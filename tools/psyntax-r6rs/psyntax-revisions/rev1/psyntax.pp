;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$208$14921 '#f) (define g$208$14922 '#f) (define g$208$14923 '#f) (define g$208$14924 '#f) (define g$208$14925 '#f) (define g$208$14926 '#f) (define g$208$14927 '#f) ((lambda (g$208$14698 g$208$14700 g$208$14702 g$208$14704 g$208$14706 g$208$14708 g$208$14899) (begin (set! g$208$14698 read) (set! g$208$14700 (lambda (g$208$14901) '#f)) (set! g$208$14702 '#f) (set! g$208$14704 '#f) (set! g$208$14706 '#f) (set! g$208$14708 (lambda g$208$14917 ((lambda (g$208$14918) (if (= g$208$14918 '1) (apply (lambda (g$208$14903) (g$208$14708 g$208$14903 (lambda (g$208$14905) g$208$14905))) g$208$14917) (if (= g$208$14918 '2) (apply (lambda (g$208$14907 g$208$14908) (begin (if (procedure? g$208$14908) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (g$208$14911) (lambda g$208$14915 ((lambda (g$208$14916) (if (= g$208$14916 '0) (apply (lambda () g$208$14911) g$208$14915) (if (= g$208$14916 '1) (apply (lambda (g$208$14913) (set! g$208$14911 (g$208$14908 g$208$14913))) g$208$14915) (error 'apply '"invalid arg count")))) (length g$208$14915)))) (g$208$14908 g$208$14907)))) g$208$14917) (error 'apply '"invalid arg count")))) (length g$208$14917)))) (set! g$208$14899 (lambda (g$208$14919) (error 'file-options-spec '"not implemented"))) (begin (set! g$208$14927 g$208$14899) (set! g$208$14926 g$208$14708) (set! g$208$14925 g$208$14706) (set! g$208$14924 g$208$14704) (set! g$208$14923 g$208$14702) (set! g$208$14922 g$208$14700) (set! g$208$14921 g$208$14698)))) '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$208$15002 '#f) (define g$208$15003 '#f) (define g$208$15004 '#f) (define g$208$15005 '#f) (define g$208$15006 '#f) (define g$208$15007 '#f) ((lambda (g$208$14931 g$208$14933 g$208$14935 g$208$14937 g$208$14939 g$208$14941) (begin (set! g$208$14931 (g$208$14926 (lambda (g$208$14943) '#f) (lambda (g$208$14945) (begin (if (procedure? g$208$14945) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) g$208$14945)))) (set! g$208$14933 (lambda (g$208$14947) ((lambda (g$208$14949) (begin (set! g$208$14949 (lambda (g$208$14951) ((lambda (g$208$14953) (if g$208$14953 g$208$14953 ((lambda (g$208$14955) (if g$208$14955 g$208$14955 ((lambda (g$208$14957) (if g$208$14957 g$208$14957 ((lambda (g$208$14959) (if g$208$14959 g$208$14959 ((lambda (g$208$14961) (if g$208$14961 g$208$14961 (begin '#f (number? g$208$14951)))) (string? g$208$14951)))) (boolean? g$208$14951)))) (symbol? g$208$14951)))) (char? g$208$14951)))) (null? g$208$14951)))) (not (g$208$14949 g$208$14947)))) '#f))) (set! g$208$14935 (lambda (g$208$14963) ((lambda (g$208$14965) (begin (set! g$208$14965 (lambda (g$208$14967) (if (pair? g$208$14967) ((lambda (g$208$14969) (if (memv g$208$14969 '(quote)) (if (if g$208$14963 (begin '#f (g$208$14933 (cadr g$208$14967))) '#f) ((lambda (g$208$14994) (begin (set-symbol-value! g$208$14994 (cadr g$208$14967)) g$208$14994)) (gensym)) g$208$14967) (if (memv g$208$14969 '(case-lambda)) (cons 'case-lambda (map (lambda (g$208$14992) (cons (car g$208$14992) (map g$208$14965 (cdr g$208$14992)))) (cdr g$208$14967))) (if (memv g$208$14969 '(lambda)) (cons* 'lambda (cadr g$208$14967) (map g$208$14965 (cddr g$208$14967))) (if (memv g$208$14969 '(letrec)) ((lambda (g$208$14984 g$208$14985) ((lambda (g$208$14988 g$208$14989) (cons* 'letrec (map list g$208$14988 (map g$208$14965 g$208$14989)) (map g$208$14965 g$208$14985))) (map car g$208$14984) (map cadr g$208$14984))) (cadr g$208$14967) (cddr g$208$14967)) (if (memv g$208$14969 '(letrec*)) ((lambda (g$208$14976 g$208$14977) ((lambda (g$208$14980 g$208$14981) (cons* 'letrec* (map list g$208$14980 (map g$208$14965 g$208$14981)) (map g$208$14965 g$208$14977))) (map car g$208$14976) (map cadr g$208$14976))) (cadr g$208$14967) (cddr g$208$14967)) (if (memv g$208$14969 '(begin)) (cons 'begin (map g$208$14965 (cdr g$208$14967))) (if (memv g$208$14969 '(set!)) (list 'set! (cadr g$208$14967) (g$208$14965 (caddr g$208$14967))) (if (memv g$208$14969 '(primitive)) ((lambda (g$208$14970) ((lambda (g$208$14972) (if g$208$14972 ((lambda (g$208$14974) g$208$14974) g$208$14972) g$208$14970)) ((g$208$14931) g$208$14970))) (cadr g$208$14967)) (if (memv g$208$14969 '(define)) g$208$14967 (if (list? g$208$14967) (map g$208$14965 g$208$14967) (error 'rewrite '"invalid form ~s ~s" g$208$14967 (list? g$208$14967))))))))))))) (car g$208$14967)) g$208$14967))) g$208$14965)) '#f))) (set! g$208$14937 '#t) (set! g$208$14939 (lambda (g$208$14996) ((g$208$14935 g$208$14937) g$208$14996))) (set! g$208$14941 (lambda (g$208$14998 g$208$14999) (begin (pretty-print ((g$208$14935 '#f) g$208$14998) g$208$14999) (newline g$208$14999)))) (begin (set! g$208$15007 g$208$14941) (set! g$208$15006 g$208$14939) (set! g$208$15005 g$208$14937) (set! g$208$15004 g$208$14935) (set! g$208$15003 g$208$14933) (set! g$208$15002 g$208$14931)))) '#f '#f '#f '#f '#f '#f))


(void)


(begin (define g$208$15469 '#f) (define g$208$15470 '#f) (define g$208$15471 '#f) (define g$208$15472 '#f) (define g$208$15473 '#f) (define g$208$15474 '#f) (define g$208$15475 '#f) (define g$208$15476 '#f) (define g$208$15477 '#f) (define g$208$15478 '#f) (define g$208$15479 '#f) (define g$208$15480 '#f) (define g$208$15481 '#f) (define g$208$15482 '#f) (define g$208$15483 '#f) (define g$208$15484 '#f) (define g$208$15485 '#f) (define g$208$15486 '#f) (define g$208$15487 '#f) (define g$208$15488 '#f) (define g$208$15489 '#f) (define g$208$15490 '#f) (define g$208$15491 '#f) (define g$208$15492 '#f) (define g$208$15493 '#f) (define g$208$15494 '#f) (define g$208$15495 '#f) (define g$208$15496 '#f) (define g$208$15497 '#f) (define g$208$15498 '#f) (define g$208$15499 '#f) (define g$208$15500 '#f) (define g$208$15501 '#f) (define g$208$15502 '#f) (define g$208$15503 '#f) (define g$208$15504 '#f) (define g$208$15505 '#f) (define g$208$15506 '#f) (define g$208$15507 '#f) (define g$208$15508 '#f) (define g$208$15509 '#f) (define g$208$15510 '#f) (define g$208$15511 '#f) (define g$208$15512 '#f) (define g$208$15513 '#f) (define g$208$15514 '#f) (define g$208$15515 '#f) (define g$208$15516 '#f) (define g$208$15517 '#f) (define g$208$15518 '#f) (define g$208$15519 '#f) (define g$208$15520 '#f) (define g$208$15521 '#f) ((lambda (g$208$15083 g$208$15085 g$208$15087 g$208$15089 g$208$15092 g$208$15094 g$208$15096 g$208$15098 g$208$15100 g$208$15102 g$208$15104 g$208$15106 g$208$15108 g$208$15110 g$208$15112 g$208$15114 g$208$15116 g$208$15118 g$208$15120 g$208$15122 g$208$15124 g$208$15126 g$208$15128 g$208$15130 g$208$15132 g$208$15134 g$208$15136 g$208$15138 g$208$15140 g$208$15142 g$208$15144 g$208$15146 g$208$15148 g$208$15150 g$208$15152 g$208$15154 g$208$15156 g$208$15158 g$208$15160 g$208$15162 g$208$15164 g$208$15166 g$208$15168 g$208$15170 g$208$15172 g$208$15174 g$208$15176 g$208$15178 g$208$15180 g$208$15182 g$208$15184 g$208$15186 g$208$15188) (begin (set! g$208$15083 (display '"hoge1")) (set! g$208$15085 (lambda () ((lambda (g$208$15190) ((lambda (g$208$15192) (begin (set! g$208$15192 (lambda (g$208$15198 g$208$15199) (if (memq g$208$15198 g$208$15199) g$208$15199 (cons g$208$15198 g$208$15199)))) (lambda g$208$15196 ((lambda (g$208$15197) (if (= g$208$15197 '0) (apply (lambda () g$208$15190) g$208$15196) (if (= g$208$15197 '1) (apply (lambda (g$208$15194) (set! g$208$15190 (g$208$15192 g$208$15194 g$208$15190))) g$208$15196) (error 'apply '"invalid arg count")))) (length g$208$15196))))) '#f)) '()))) (set! g$208$15087 (display '"hoge2")) (set! g$208$15089 (g$208$14926 (g$208$15085) (lambda (g$208$15202) (begin (if (procedure? g$208$15202) (void) (assertion-violation 'current-library-collection '"not a procedure" g$208$15202)) g$208$15202)))) (set! g$208$15092 (lambda (g$208$15204 g$208$15205 g$208$15206 g$208$15207 g$208$15208 g$208$15209 g$208$15210 g$208$15211 g$208$15212 g$208$15213 g$208$15214) (vector 'g$208$15091 g$208$15204 g$208$15205 g$208$15206 g$208$15207 g$208$15208 g$208$15209 g$208$15210 g$208$15211 g$208$15212 g$208$15213 g$208$15214))) (set! g$208$15094 (lambda (g$208$15226) (if (vector? g$208$15226) (if (= (vector-length g$208$15226) (+ '1 (length '(id name version imp* vis* inv* subst env visit-state invoke-state visible?)))) (begin '#f (eq? (vector-ref g$208$15226 '0) 'g$208$15091)) '#f) '#f))) (set! g$208$15096 (lambda (g$208$15228) (if (g$208$15094 g$208$15228) (vector-ref g$208$15228 '1) (error 'library-id '"~s is not of type ~s" g$208$15228 'library)))) (set! g$208$15098 (lambda (g$208$15230) (if (g$208$15094 g$208$15230) (vector-ref g$208$15230 '2) (error 'library-name '"~s is not of type ~s" g$208$15230 'library)))) (set! g$208$15100 (lambda (g$208$15232) (if (g$208$15094 g$208$15232) (vector-ref g$208$15232 '3) (error 'library-version '"~s is not of type ~s" g$208$15232 'library)))) (set! g$208$15102 (lambda (g$208$15234) (if (g$208$15094 g$208$15234) (vector-ref g$208$15234 '4) (error 'library-imp* '"~s is not of type ~s" g$208$15234 'library)))) (set! g$208$15104 (lambda (g$208$15236) (if (g$208$15094 g$208$15236) (vector-ref g$208$15236 '5) (error 'library-vis* '"~s is not of type ~s" g$208$15236 'library)))) (set! g$208$15106 (lambda (g$208$15238) (if (g$208$15094 g$208$15238) (vector-ref g$208$15238 '6) (error 'library-inv* '"~s is not of type ~s" g$208$15238 'library)))) (set! g$208$15108 (lambda (g$208$15240) (if (g$208$15094 g$208$15240) (vector-ref g$208$15240 '7) (error 'library-subst '"~s is not of type ~s" g$208$15240 'library)))) (set! g$208$15110 (lambda (g$208$15242) (if (g$208$15094 g$208$15242) (vector-ref g$208$15242 '8) (error 'library-env '"~s is not of type ~s" g$208$15242 'library)))) (set! g$208$15112 (lambda (g$208$15244) (if (g$208$15094 g$208$15244) (vector-ref g$208$15244 '9) (error 'library-visit-state '"~s is not of type ~s" g$208$15244 'library)))) (set! g$208$15114 (lambda (g$208$15246) (if (g$208$15094 g$208$15246) (vector-ref g$208$15246 '10) (error 'library-invoke-state '"~s is not of type ~s" g$208$15246 'library)))) (set! g$208$15116 (lambda (g$208$15248) (if (g$208$15094 g$208$15248) (vector-ref g$208$15248 '11) (error 'library-visible? '"~s is not of type ~s" g$208$15248 'library)))) (set! g$208$15118 (lambda (g$208$15250 g$208$15251) (if (g$208$15094 g$208$15250) (vector-set! g$208$15250 '1 g$208$15251) (error 'set-library-id! '"~s is not of type ~s" g$208$15250 'library)))) (set! g$208$15120 (lambda (g$208$15254 g$208$15255) (if (g$208$15094 g$208$15254) (vector-set! g$208$15254 '2 g$208$15255) (error 'set-library-name! '"~s is not of type ~s" g$208$15254 'library)))) (set! g$208$15122 (lambda (g$208$15258 g$208$15259) (if (g$208$15094 g$208$15258) (vector-set! g$208$15258 '3 g$208$15259) (error 'set-library-version! '"~s is not of type ~s" g$208$15258 'library)))) (set! g$208$15124 (lambda (g$208$15262 g$208$15263) (if (g$208$15094 g$208$15262) (vector-set! g$208$15262 '4 g$208$15263) (error 'set-library-imp*! '"~s is not of type ~s" g$208$15262 'library)))) (set! g$208$15126 (lambda (g$208$15266 g$208$15267) (if (g$208$15094 g$208$15266) (vector-set! g$208$15266 '5 g$208$15267) (error 'set-library-vis*! '"~s is not of type ~s" g$208$15266 'library)))) (set! g$208$15128 (lambda (g$208$15270 g$208$15271) (if (g$208$15094 g$208$15270) (vector-set! g$208$15270 '6 g$208$15271) (error 'set-library-inv*! '"~s is not of type ~s" g$208$15270 'library)))) (set! g$208$15130 (lambda (g$208$15274 g$208$15275) (if (g$208$15094 g$208$15274) (vector-set! g$208$15274 '7 g$208$15275) (error 'set-library-subst! '"~s is not of type ~s" g$208$15274 'library)))) (set! g$208$15132 (lambda (g$208$15278 g$208$15279) (if (g$208$15094 g$208$15278) (vector-set! g$208$15278 '8 g$208$15279) (error 'set-library-env! '"~s is not of type ~s" g$208$15278 'library)))) (set! g$208$15134 (lambda (g$208$15282 g$208$15283) (if (g$208$15094 g$208$15282) (vector-set! g$208$15282 '9 g$208$15283) (error 'set-library-visit-state! '"~s is not of type ~s" g$208$15282 'library)))) (set! g$208$15136 (lambda (g$208$15286 g$208$15287) (if (g$208$15094 g$208$15286) (vector-set! g$208$15286 '10 g$208$15287) (error 'set-library-invoke-state! '"~s is not of type ~s" g$208$15286 'library)))) (set! g$208$15138 (lambda (g$208$15290 g$208$15291) (if (g$208$15094 g$208$15290) (vector-set! g$208$15290 '11 g$208$15291) (error 'set-library-visible?! '"~s is not of type ~s" g$208$15290 'library)))) (set! g$208$15140 (lambda (g$208$15294) (if (null? g$208$15294) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! g$208$15142 (lambda (g$208$15296) ((letrec ((g$208$15298 (lambda (g$208$15300) (if (null? g$208$15300) '#f (if (g$208$15296 (car g$208$15300)) (car g$208$15300) (g$208$15298 (cdr g$208$15300))))))) g$208$15298) ((g$208$15089))))) (set! g$208$15144 (g$208$14926 '(".") (lambda (g$208$15302) (if (if (list? g$208$15302) (begin '#f (for-all string? g$208$15302)) '#f) (map (lambda (g$208$15304) g$208$15304) g$208$15302) (assertion-violation 'library-path '"not a list of strings" g$208$15302))))) (set! g$208$15146 (lambda (g$208$15306) (call-with-values (lambda () (open-string-output-port)) (lambda (g$208$15308 g$208$15309) ((lambda (g$208$15312) (begin (set! g$208$15312 (lambda (g$208$15328) (if (<= '0 g$208$15328 '9) (display g$208$15328 g$208$15308) (display (integer->char (+ (char->integer '#\A) (- g$208$15328 '10))) g$208$15308)))) (begin ((letrec ((g$208$15314 (lambda (g$208$15316) (if (null? g$208$15316) (display '".ss" g$208$15308) (begin (display '"/" g$208$15308) (for-each (lambda (g$208$15318) (if ((lambda (g$208$15320) (if g$208$15320 g$208$15320 ((lambda (g$208$15322) (if g$208$15322 g$208$15322 ((lambda (g$208$15324) (if g$208$15324 g$208$15324 (begin '#f (memv g$208$15318 '(#\- #\. #\_ #\~))))) (char<=? '#\0 g$208$15318 '#\9)))) (char<=? '#\A g$208$15318 '#\Z)))) (char<=? '#\a g$208$15318 '#\z)) (display g$208$15318 g$208$15308) (begin (display '"%" g$208$15308) ((lambda (g$208$15326) (begin (g$208$15312 (quotient g$208$15326 '16)) (g$208$15312 (remainder g$208$15326 '16)))) (char->integer g$208$15318))))) (string->list (symbol->string (car g$208$15316)))) (g$208$15314 (cdr g$208$15316))))))) g$208$15314) g$208$15306) (g$208$15309)))) '#f))))) (set! g$208$15148 (g$208$14926 (lambda (g$208$15330) ((lambda (g$208$15332) ((letrec ((g$208$15334 (lambda (g$208$15336 g$208$15337) (if (null? g$208$15336) (display '"cannot locate library in library-path") ((lambda (g$208$15340) (if (file-exists? g$208$15340) g$208$15340 (g$208$15334 (cdr g$208$15336) (cons g$208$15340 g$208$15337)))) (string-append (car g$208$15336) g$208$15332)))))) g$208$15334) (g$208$15144) '())) (g$208$15146 g$208$15330))) (lambda (g$208$15342) (if (procedure? g$208$15342) g$208$15342 (assertion-violation 'file-locator '"not a procedure" g$208$15342))))) (set! g$208$15150 (g$208$14926 (lambda (g$208$15344) ((lambda (g$208$15346) (if (string? g$208$15346) (begin '#f (with-input-from-file g$208$15346 g$208$14921)) '#f)) ((g$208$15148) g$208$15344))) (lambda (g$208$15348) (if (procedure? g$208$15348) g$208$15348 (assertion-violation 'library-locator '"not a procedure" g$208$15348))))) (set! g$208$15152 (g$208$14926 (lambda (g$208$15350) (assertion-violation 'library-expander '"not initialized")) (lambda (g$208$15352) (if (procedure? g$208$15352) g$208$15352 (assertion-violation 'library-expander '"not a procedure" g$208$15352))))) (set! g$208$15154 (g$208$14926 '())) (set! g$208$15156 (display '"hoge3")) (set! g$208$15158 (lambda (g$208$15354) (begin (if (member g$208$15354 (g$208$15154)) (assertion-violation '#f '"circular attempt to import library was detected" g$208$15354) (void)) ((lambda (g$208$15358 g$208$15359) ((lambda (g$208$15362) (dynamic-wind g$208$15362 (lambda () ((lambda (g$208$15364) (begin (if g$208$15364 (void) (assertion-violation '#f '"cannot find library" g$208$15354)) ((g$208$15152) g$208$15364) ((lambda (g$208$15366) (if g$208$15366 g$208$15366 (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" g$208$15354)))) (g$208$15142 (lambda (g$208$15368) (equal? (g$208$15098 g$208$15368) g$208$15354)))))) ((g$208$15150) g$208$15354))) g$208$15362)) (lambda () ((lambda (g$208$15370) (begin (g$208$15358 g$208$15359) (set! g$208$15359 g$208$15370))) (g$208$15358))))) g$208$15154 (cons g$208$15354 (g$208$15154)))))) (set! g$208$15160 (lambda (g$208$15372) ((lambda (g$208$15374) (if g$208$15374 g$208$15374 (begin '#f (g$208$15158 g$208$15372)))) (g$208$15142 (lambda (g$208$15376) (equal? (g$208$15098 g$208$15376) g$208$15372)))))) (set! g$208$15162 (lambda (g$208$15378) (if (g$208$15142 (lambda (g$208$15380) (equal? (g$208$15098 g$208$15380) g$208$15378))) (begin '#f '#t) '#f))) (set! g$208$15164 (lambda (g$208$15382) ((lambda (g$208$15384) ((lambda (g$208$15386) (if g$208$15386 g$208$15386 (begin '#f (assertion-violation '#f '"cannot find library with required spec" g$208$15382)))) (g$208$15142 (lambda (g$208$15388) (eq? g$208$15384 (g$208$15096 g$208$15388)))))) (car g$208$15382)))) (set! g$208$15166 (make-eq-hashtable)) (set! g$208$15168 (lambda (g$208$15390) (begin ((lambda (g$208$15392) (for-each (lambda (g$208$15394) ((lambda (g$208$15396 g$208$15397) ((lambda (g$208$15400) (hashtable-set! g$208$15166 g$208$15396 g$208$15400)) ((lambda (g$208$15402) (if (memv g$208$15402 '(global)) (cons 'global (cons g$208$15390 (cdr g$208$15397))) (if (memv g$208$15402 '(global-macro)) (cons 'global-macro (cons g$208$15390 (cdr g$208$15397))) (if (memv g$208$15402 '(global-macro!)) (cons 'global-macro! (cons g$208$15390 (cdr g$208$15397))) g$208$15397)))) (car g$208$15397)))) (car g$208$15394) (cdr g$208$15394))) g$208$15392)) (g$208$15110 g$208$15390)) ((g$208$15089) g$208$15390)))) (set! g$208$15170 (lambda (g$208$15403 g$208$15404 g$208$15405 g$208$15406 g$208$15407 g$208$15408 g$208$15409 g$208$15410 g$208$15411 g$208$15412 g$208$15413) ((lambda (g$208$15425 g$208$15426 g$208$15427) (begin (if (if (symbol? g$208$15403) (if (list? g$208$15404) (begin '#f (list? g$208$15405)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" g$208$15403 g$208$15404 g$208$15405)) (if (g$208$15162 g$208$15404) (assertion-violation 'install-library '"library is already installed" g$208$15404) (void)) ((lambda (g$208$15431) (g$208$15168 g$208$15431)) (g$208$15092 g$208$15403 g$208$15404 g$208$15405 g$208$15425 g$208$15426 g$208$15427 g$208$15409 g$208$15410 g$208$15411 g$208$15412 g$208$15413)))) (map g$208$15164 g$208$15406) (map g$208$15164 g$208$15407) (map g$208$15164 g$208$15408)))) (set! g$208$15172 (lambda (g$208$15433 g$208$15434 g$208$15435) (g$208$15130 g$208$15433 (cons (cons g$208$15434 g$208$15435) (g$208$15108 g$208$15433))))) (set! g$208$15174 (lambda (g$208$15439 g$208$15440 g$208$15441) (begin (g$208$15132 g$208$15439 (cons (cons g$208$15440 g$208$15441) (g$208$15110 g$208$15439))) (hashtable-set! g$208$15166 g$208$15440 g$208$15441)))) (set! g$208$15176 (lambda (g$208$15445) (hashtable-ref g$208$15166 g$208$15445 '#f))) (set! g$208$15178 (lambda (g$208$15447) ((lambda (g$208$15449) (if (procedure? g$208$15449) (begin (g$208$15136 g$208$15447 (lambda () (assertion-violation 'invoke '"circularity detected" g$208$15447))) (for-each g$208$15178 (g$208$15106 g$208$15447)) (g$208$15136 g$208$15447 (lambda () (assertion-violation 'invoke '"first invoke did not return" g$208$15447))) (g$208$15449) (g$208$15136 g$208$15447 '#t)) (void))) (g$208$15114 g$208$15447)))) (set! g$208$15180 (lambda (g$208$15451) ((lambda (g$208$15453) (if (procedure? g$208$15453) (begin (g$208$15134 g$208$15451 (lambda () (assertion-violation 'visit '"circularity detected" g$208$15451))) (for-each g$208$15178 (g$208$15104 g$208$15451)) (g$208$15134 g$208$15451 (lambda () (assertion-violation 'invoke '"first visit did not return" g$208$15451))) (g$208$15453) (g$208$15134 g$208$15451 '#t)) (void))) (g$208$15112 g$208$15451)))) (set! g$208$15182 (lambda (g$208$15455) (g$208$15178 (g$208$15164 g$208$15455)))) (set! g$208$15184 (display '"hoge4")) (set! g$208$15186 (lambda g$208$15465 ((lambda (g$208$15466) (if (= g$208$15466 '1) (apply (lambda (g$208$15457) ((letrec ((g$208$15459 (lambda (g$208$15461) (if (null? g$208$15461) '() (if ((lambda (g$208$15463) (if g$208$15463 g$208$15463 (begin '#f (g$208$15116 (car g$208$15461))))) g$208$15457) (cons (car g$208$15461) (g$208$15459 (cdr g$208$15461))) (g$208$15459 (cdr g$208$15461))))))) g$208$15459) ((g$208$15089)))) g$208$15465) (if (= g$208$15466 '0) (apply (lambda () (g$208$15186 '#f)) g$208$15465) (error 'apply '"invalid arg count")))) (length g$208$15465)))) (set! g$208$15188 (lambda (g$208$15467) (begin (if (g$208$15094 g$208$15467) (void) (assertion-violation 'library-spec '"not a library" g$208$15467)) (list (g$208$15096 g$208$15467) (g$208$15098 g$208$15467) (g$208$15100 g$208$15467))))) (begin (set! g$208$15521 g$208$15188) (set! g$208$15520 g$208$15186) (set! g$208$15519 g$208$15184) (set! g$208$15518 g$208$15182) (set! g$208$15517 g$208$15180) (set! g$208$15516 g$208$15178) (set! g$208$15515 g$208$15176) (set! g$208$15514 g$208$15174) (set! g$208$15513 g$208$15172) (set! g$208$15512 g$208$15170) (set! g$208$15511 g$208$15168) (set! g$208$15510 g$208$15166) (set! g$208$15509 g$208$15164) (set! g$208$15508 g$208$15162) (set! g$208$15507 g$208$15160) (set! g$208$15506 g$208$15158) (set! g$208$15505 g$208$15156) (set! g$208$15504 g$208$15154) (set! g$208$15503 g$208$15152) (set! g$208$15502 g$208$15150) (set! g$208$15501 g$208$15148) (set! g$208$15500 g$208$15146) (set! g$208$15499 g$208$15144) (set! g$208$15498 g$208$15142) (set! g$208$15497 g$208$15140) (set! g$208$15496 g$208$15138) (set! g$208$15495 g$208$15136) (set! g$208$15494 g$208$15134) (set! g$208$15493 g$208$15132) (set! g$208$15492 g$208$15130) (set! g$208$15491 g$208$15128) (set! g$208$15490 g$208$15126) (set! g$208$15489 g$208$15124) (set! g$208$15488 g$208$15122) (set! g$208$15487 g$208$15120) (set! g$208$15486 g$208$15118) (set! g$208$15485 g$208$15116) (set! g$208$15484 g$208$15114) (set! g$208$15483 g$208$15112) (set! g$208$15482 g$208$15110) (set! g$208$15481 g$208$15108) (set! g$208$15480 g$208$15106) (set! g$208$15479 g$208$15104) (set! g$208$15478 g$208$15102) (set! g$208$15477 g$208$15100) (set! g$208$15476 g$208$15098) (set! g$208$15475 g$208$15096) (set! g$208$15474 g$208$15094) (set! g$208$15473 g$208$15092) (set! g$208$15472 g$208$15089) (set! g$208$15471 g$208$15087) (set! g$208$15470 g$208$15085) (set! g$208$15469 g$208$15083)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$208$15859 '#f) (define g$208$15860 '#f) (define g$208$15861 '#f) (define g$208$15862 '#f) (define g$208$15863 '#f) (define g$208$15864 '#f) (define g$208$15865 '#f) (define g$208$15866 '#f) (define g$208$15867 '#f) ((lambda (g$208$15523 g$208$15655 g$208$15657 g$208$15659 g$208$15731 g$208$15733 g$208$15735 g$208$15737 g$208$15739) (begin (set! g$208$15523 (lambda (g$208$15741) (cons 'define (cons g$208$15741 '('#f))))) (set! g$208$15655 (lambda (g$208$15743 g$208$15744 g$208$15745) (list 'lambda g$208$15744 g$208$15745))) (set! g$208$15657 (lambda (g$208$15749 g$208$15750 g$208$15751) ((lambda (g$208$15755 g$208$15757 g$208$15759 g$208$15761) (begin (set! g$208$15755 (lambda (g$208$15809) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! g$208$15757 (lambda (g$208$15787 g$208$15788 g$208$15789) (call-with-values (lambda () ((letrec ((g$208$15795 (lambda (g$208$15797 g$208$15798) (if (pair? g$208$15797) (g$208$15795 (cdr g$208$15797) (+ g$208$15798 '1)) (if (null? g$208$15797) (values g$208$15798 '=) (values g$208$15798 '>=)))))) g$208$15795) g$208$15789 '0)) (lambda (g$208$15801 g$208$15802) ((lambda (g$208$15805 g$208$15806) (list (list 'primitive g$208$15805) g$208$15788 (list 'quote g$208$15806))) g$208$15802 g$208$15801))))) (set! g$208$15759 (lambda (g$208$15779 g$208$15780 g$208$15781 g$208$15782) (list '(primitive apply) (g$208$15655 g$208$15779 g$208$15781 g$208$15782) g$208$15780))) (set! g$208$15761 (lambda (g$208$15763 g$208$15764 g$208$15765) ((lambda (g$208$15769 g$208$15770) (list 'lambda g$208$15769 (g$208$15659 g$208$15763 (list g$208$15770) (list (list '(primitive length) g$208$15769)) ((letrec ((g$208$15773 (lambda (g$208$15775 g$208$15776) (if (null? g$208$15775) (g$208$15755 g$208$15763) (list 'if (g$208$15757 g$208$15763 g$208$15770 (car g$208$15775)) (g$208$15759 g$208$15763 g$208$15769 (car g$208$15775) (car g$208$15776)) (g$208$15773 (cdr g$208$15775) (cdr g$208$15776))))))) g$208$15773) g$208$15750 g$208$15765)))) (gensym) (gensym)))) (if (= (length g$208$15751) '1) (g$208$15655 g$208$15749 (car g$208$15750) (car g$208$15751)) (g$208$15761 g$208$15749 g$208$15750 g$208$15751)))) '#f '#f '#f '#f))) (set! g$208$15659 (lambda (g$208$15811 g$208$15812 g$208$15813 g$208$15814) (cons (g$208$15655 g$208$15811 g$208$15812 g$208$15814) g$208$15813))) (set! g$208$15731 (lambda (g$208$15819 g$208$15820) ((letrec ((g$208$15823 (lambda (g$208$15825) (if (null? (cdr g$208$15825)) (car g$208$15825) (if (equal? (car g$208$15825) (g$208$15733)) (g$208$15823 (cdr g$208$15825)) (cons 'begin g$208$15825)))))) g$208$15823) g$208$15820))) (set! g$208$15733 (lambda () '((primitive void)))) (set! g$208$15735 (lambda (g$208$15827 g$208$15828 g$208$15829 g$208$15830) (if (null? g$208$15828) g$208$15830 (list 'letrec (map list g$208$15828 g$208$15829) g$208$15830)))) (set! g$208$15737 (lambda (g$208$15835 g$208$15836 g$208$15837 g$208$15838) (if (null? g$208$15836) g$208$15838 (g$208$15659 g$208$15835 g$208$15836 (map (lambda (g$208$15843) (list 'quote '#f)) g$208$15836) (g$208$15731 g$208$15835 (append (map (lambda (g$208$15845 g$208$15846) (list 'set! g$208$15845 g$208$15846)) g$208$15836 g$208$15837) (list g$208$15838))))))) (set! g$208$15739 (lambda (g$208$15849 g$208$15850 g$208$15851 g$208$15852 g$208$15853) (list 'library-letrec* (map list g$208$15850 g$208$15851 g$208$15852) g$208$15853))) (begin (set! g$208$15867 g$208$15739) (set! g$208$15866 g$208$15737) (set! g$208$15865 g$208$15735) (set! g$208$15864 g$208$15733) (set! g$208$15863 g$208$15731) (set! g$208$15862 g$208$15659) (set! g$208$15861 g$208$15657) (set! g$208$15860 g$208$15655) (set! g$208$15859 g$208$15523)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$208$27798 '#f) (define g$208$27799 '#f) (define g$208$27800 '#f) (define g$208$27801 '#f) (define g$208$27802 '#f) (define g$208$27803 '#f) (define g$208$27804 '#f) (define g$208$27805 '#f) (define g$208$27806 '#f) (define g$208$27807 '#f) (define g$208$27808 '#f) (define g$208$27809 '#f) (define g$208$27810 '#f) (define g$208$27811 '#f) (define g$208$27812 '#f) (define g$208$27813 '#f) (define g$208$27814 '#f) (define g$208$27815 '#f) (define g$208$27816 '#f) (define g$208$27817 '#f) (define g$208$27818 '#f) (define g$208$27819 '#f) (define g$208$27820 '#f) (define g$208$27821 '#f) (define g$208$27822 '#f) (define g$208$27823 '#f) (define g$208$27824 '#f) (define g$208$27825 '#f) (define g$208$27826 '#f) (define g$208$27827 '#f) (define g$208$27828 '#f) (define g$208$27829 '#f) (define g$208$27830 '#f) (define g$208$27831 '#f) (define g$208$27832 '#f) (define g$208$27833 '#f) (define g$208$27834 '#f) (define g$208$27835 '#f) (define g$208$27836 '#f) (define g$208$27837 '#f) (define g$208$27838 '#f) (define g$208$27839 '#f) (define g$208$27840 '#f) (define g$208$27841 '#f) (define g$208$27842 '#f) (define g$208$27843 '#f) (define g$208$27844 '#f) (define g$208$27845 '#f) (define g$208$27846 '#f) (define g$208$27847 '#f) (define g$208$27848 '#f) (define g$208$27849 '#f) (define g$208$27850 '#f) (define g$208$27851 '#f) (define g$208$27852 '#f) (define g$208$27853 '#f) (define g$208$27854 '#f) (define g$208$27855 '#f) (define g$208$27856 '#f) (define g$208$27857 '#f) (define g$208$27858 '#f) (define g$208$27859 '#f) (define g$208$27860 '#f) (define g$208$27861 '#f) (define g$208$27862 '#f) (define g$208$27863 '#f) (define g$208$27864 '#f) (define g$208$27865 '#f) (define g$208$27866 '#f) (define g$208$27867 '#f) (define g$208$27868 '#f) (define g$208$27869 '#f) (define g$208$27870 '#f) (define g$208$27871 '#f) (define g$208$27872 '#f) (define g$208$27873 '#f) (define g$208$27874 '#f) (define g$208$27875 '#f) (define g$208$27876 '#f) (define g$208$27877 '#f) (define g$208$27878 '#f) (define g$208$27879 '#f) (define g$208$27880 '#f) (define g$208$27881 '#f) (define g$208$27882 '#f) (define g$208$27883 '#f) (define g$208$27884 '#f) (define g$208$27885 '#f) (define g$208$27886 '#f) (define g$208$27887 '#f) (define g$208$27888 '#f) (define g$208$27889 '#f) (define g$208$27890 '#f) (define g$208$27891 '#f) (define g$208$27892 '#f) (define g$208$27893 '#f) (define g$208$27894 '#f) (define g$208$27895 '#f) (define g$208$27896 '#f) (define g$208$27897 '#f) (define g$208$27898 '#f) (define g$208$27899 '#f) (define g$208$27900 '#f) (define g$208$27901 '#f) (define g$208$27902 '#f) (define g$208$27903 '#f) (define g$208$27904 '#f) (define g$208$27905 '#f) (define g$208$27906 '#f) (define g$208$27907 '#f) (define g$208$27908 '#f) (define g$208$27909 '#f) (define g$208$27910 '#f) (define g$208$27911 '#f) (define g$208$27912 '#f) (define g$208$27913 '#f) (define g$208$27914 '#f) (define g$208$27915 '#f) (define g$208$27916 '#f) (define g$208$27917 '#f) (define g$208$27918 '#f) (define g$208$27919 '#f) (define g$208$27920 '#f) (define g$208$27921 '#f) (define g$208$27922 '#f) (define g$208$27923 '#f) (define g$208$27924 '#f) (define g$208$27925 '#f) (define g$208$27926 '#f) (define g$208$27927 '#f) (define g$208$27928 '#f) (define g$208$27929 '#f) (define g$208$27930 '#f) (define g$208$27931 '#f) (define g$208$27932 '#f) (define g$208$27933 '#f) (define g$208$27934 '#f) (define g$208$27935 '#f) (define g$208$27936 '#f) (define g$208$27937 '#f) (define g$208$27938 '#f) (define g$208$27939 '#f) (define g$208$27940 '#f) (define g$208$27941 '#f) (define g$208$27942 '#f) (define g$208$27943 '#f) (define g$208$27944 '#f) (define g$208$27945 '#f) (define g$208$27946 '#f) (define g$208$27947 '#f) (define g$208$27948 '#f) (define g$208$27949 '#f) (define g$208$27950 '#f) (define g$208$27951 '#f) (define g$208$27952 '#f) (define g$208$27953 '#f) (define g$208$27954 '#f) (define g$208$27955 '#f) (define g$208$27956 '#f) (define g$208$27957 '#f) (define g$208$27958 '#f) (define g$208$27959 '#f) (define g$208$27960 '#f) (define g$208$27961 '#f) (define g$208$27962 '#f) (define g$208$27963 '#f) (define g$208$27964 '#f) (define g$208$27965 '#f) (define g$208$27966 '#f) (define g$208$27967 '#f) (define g$208$27968 '#f) (define g$208$27969 '#f) (define g$208$27970 '#f) (define g$208$27971 '#f) (define g$208$27972 '#f) (define g$208$27973 '#f) (define g$208$27974 '#f) (define g$208$27975 '#f) (define g$208$27976 '#f) (define g$208$27977 '#f) (define g$208$27978 '#f) (define g$208$27979 '#f) (define g$208$27980 '#f) (define g$208$27981 '#f) (define g$208$27982 '#f) (define g$208$27983 '#f) (define g$208$27984 '#f) (define g$208$27985 '#f) (define g$208$27986 '#f) (define g$208$27987 '#f) (define g$208$27988 '#f) (define g$208$27989 '#f) (define g$208$27990 '#f) (define g$208$27991 '#f) (define g$208$27992 '#f) (define g$208$27993 '#f) (define g$208$27994 '#f) (define g$208$27995 '#f) (define g$208$27996 '#f) (define g$208$27997 '#f) (define g$208$27998 '#f) (define g$208$27999 '#f) (define g$208$28000 '#f) (define g$208$28001 '#f) ((lambda (g$208$15879 g$208$15881 g$208$15886 g$208$15888 g$208$15890 g$208$15892 g$208$15894 g$208$15897 g$208$15899 g$208$15901 g$208$15903 g$208$15905 g$208$15907 g$208$15909 g$208$15911 g$208$15913 g$208$15915 g$208$15917 g$208$15919 g$208$15921 g$208$15923 g$208$15925 g$208$15927 g$208$15930 g$208$15932 g$208$15934 g$208$15936 g$208$15938 g$208$15940 g$208$15942 g$208$15944 g$208$15946 g$208$15948 g$208$15950 g$208$15952 g$208$15954 g$208$15956 g$208$15958 g$208$15960 g$208$15962 g$208$15964 g$208$15966 g$208$15968 g$208$15970 g$208$15972 g$208$15974 g$208$15976 g$208$15978 g$208$15980 g$208$15982 g$208$15984 g$208$15986 g$208$15988 g$208$15990 g$208$15992 g$208$15994 g$208$15996 g$208$15998 g$208$16000 g$208$16002 g$208$16004 g$208$16006 g$208$16008 g$208$16010 g$208$16012 g$208$16014 g$208$16016 g$208$16039 g$208$16041 g$208$16043 g$208$16462 g$208$16464 g$208$16466 g$208$16468 g$208$16470 g$208$16472 g$208$16474 g$208$16476 g$208$16478 g$208$16480 g$208$16482 g$208$16484 g$208$16486 g$208$16488 g$208$16490 g$208$16492 g$208$16494 g$208$16496 g$208$16498 g$208$16500 g$208$16502 g$208$16504 g$208$16506 g$208$16508 g$208$16510 g$208$16512 g$208$16514 g$208$16516 g$208$16518 g$208$16520 g$208$16522 g$208$16524 g$208$16526 g$208$16528 g$208$16530 g$208$16532 g$208$16534 g$208$16536 g$208$16538 g$208$16540 g$208$16542 g$208$16544 g$208$16546 g$208$16548 g$208$16550 g$208$16552 g$208$16554 g$208$16556 g$208$16558 g$208$16560 g$208$16562 g$208$16564 g$208$16566 g$208$16568 g$208$16570 g$208$16572 g$208$16574 g$208$16576 g$208$16578 g$208$16580 g$208$16582 g$208$16584 g$208$16586 g$208$16588 g$208$16590 g$208$16592 g$208$16594 g$208$16596 g$208$16598 g$208$16600 g$208$16602 g$208$16604 g$208$16606 g$208$16608 g$208$16610 g$208$16612 g$208$16614 g$208$16616 g$208$16618 g$208$16620 g$208$16622 g$208$16624 g$208$16626 g$208$16628 g$208$16630 g$208$16632 g$208$16634 g$208$16636 g$208$16638 g$208$16640 g$208$16642 g$208$16644 g$208$16646 g$208$16648 g$208$16650 g$208$16652 g$208$16654 g$208$16656 g$208$16658 g$208$16660 g$208$16663 g$208$16665 g$208$16667 g$208$16669 g$208$16671 g$208$16673 g$208$16675 g$208$16677 g$208$16679 g$208$16681 g$208$16683 g$208$16685 g$208$16687 g$208$16689 g$208$16691 g$208$16693 g$208$16695 g$208$16697 g$208$16699 g$208$16701 g$208$16703 g$208$16705 g$208$16707 g$208$16709 g$208$16711 g$208$16713 g$208$16715 g$208$16717 g$208$16719 g$208$16721 g$208$16723 g$208$16725 g$208$16727 g$208$16729) (begin (set! g$208$15879 (lambda (g$208$16731 g$208$16732) (if (memq g$208$16731 g$208$16732) g$208$16732 (cons g$208$16731 g$208$16732)))) (set! g$208$15881 (lambda (g$208$16735 g$208$16736) (if (null? g$208$16735) g$208$16736 (if (memq (car g$208$16735) g$208$16736) (g$208$15881 (cdr g$208$16735) g$208$16736) (cons (car g$208$16735) (g$208$15881 (cdr g$208$16735) g$208$16736)))))) (set! g$208$15886 '(top)) (set! g$208$15888 (lambda (g$208$16739) (memq 'top g$208$16739))) (set! g$208$15890 (lambda (g$208$16741) (if (symbol? g$208$16741) (gensym g$208$16741) (if (g$208$15932 g$208$16741) (g$208$15890 (g$208$15982 g$208$16741)) (assertion-violation 'gen-lexical '"BUG: invalid arg" g$208$16741))))) (set! g$208$15892 (lambda (g$208$16743) (g$208$15890 g$208$16743))) (set! g$208$15894 (lambda (g$208$16745) (gensym))) (set! g$208$15897 (lambda (g$208$16747 g$208$16748 g$208$16749 g$208$16750) (vector 'g$208$15896 g$208$16747 g$208$16748 g$208$16749 g$208$16750))) (set! g$208$15899 (lambda (g$208$16755) (if (vector? g$208$16755) (if (= (vector-length g$208$16755) (+ '1 (length '(sym* mark** label* sealed/freq)))) (begin '#f (eq? (vector-ref g$208$16755 '0) 'g$208$15896)) '#f) '#f))) (set! g$208$15901 (lambda (g$208$16757) (if (g$208$15899 g$208$16757) (vector-ref g$208$16757 '1) (error 'rib-sym* '"~s is not of type ~s" g$208$16757 'rib)))) (set! g$208$15903 (lambda (g$208$16759) (if (g$208$15899 g$208$16759) (vector-ref g$208$16759 '2) (error 'rib-mark** '"~s is not of type ~s" g$208$16759 'rib)))) (set! g$208$15905 (lambda (g$208$16761) (if (g$208$15899 g$208$16761) (vector-ref g$208$16761 '3) (error 'rib-label* '"~s is not of type ~s" g$208$16761 'rib)))) (set! g$208$15907 (lambda (g$208$16763) (if (g$208$15899 g$208$16763) (vector-ref g$208$16763 '4) (error 'rib-sealed/freq '"~s is not of type ~s" g$208$16763 'rib)))) (set! g$208$15909 (lambda (g$208$16765 g$208$16766) (if (g$208$15899 g$208$16765) (vector-set! g$208$16765 '1 g$208$16766) (error 'set-rib-sym*! '"~s is not of type ~s" g$208$16765 'rib)))) (set! g$208$15911 (lambda (g$208$16769 g$208$16770) (if (g$208$15899 g$208$16769) (vector-set! g$208$16769 '2 g$208$16770) (error 'set-rib-mark**! '"~s is not of type ~s" g$208$16769 'rib)))) (set! g$208$15913 (lambda (g$208$16773 g$208$16774) (if (g$208$15899 g$208$16773) (vector-set! g$208$16773 '3 g$208$16774) (error 'set-rib-label*! '"~s is not of type ~s" g$208$16773 'rib)))) (set! g$208$15915 (lambda (g$208$16777 g$208$16778) (if (g$208$15899 g$208$16777) (vector-set! g$208$16777 '4 g$208$16778) (error 'set-rib-sealed/freq! '"~s is not of type ~s" g$208$16777 'rib)))) (set! g$208$15917 (lambda () (g$208$15897 '() '() '() '#f))) (set! g$208$15919 (lambda (g$208$16781 g$208$16782 g$208$16783) ((lambda (g$208$16787) (begin (set! g$208$16787 (lambda (g$208$16799 g$208$16800 g$208$16801 g$208$16802 g$208$16803) (if (pair? g$208$16801) (begin '#f (if (if (eq? g$208$16799 (car g$208$16801)) (begin '#f (g$208$15984 g$208$16800 (car g$208$16802))) '#f) (car g$208$16803) (g$208$16787 g$208$16799 g$208$16800 (cdr g$208$16801) (cdr g$208$16802) (cdr g$208$16803)))) '#f))) (begin (if (g$208$15907 g$208$16781) (assertion-violation 'extend-rib! '"BUG: rib is sealed" g$208$16781) (void)) ((lambda (g$208$16789 g$208$16790) ((lambda (g$208$16793) ((lambda (g$208$16795) (if g$208$16795 ((lambda (g$208$16797) (if (eq? g$208$16783 g$208$16797) (void) (g$208$16715 '#f '"cannot redefine" g$208$16782))) g$208$16795) (begin (g$208$15909 g$208$16781 (cons g$208$16789 g$208$16793)) (g$208$15911 g$208$16781 (cons g$208$16790 (g$208$15903 g$208$16781))) (g$208$15913 g$208$16781 (cons g$208$16783 (g$208$15905 g$208$16781)))))) (if (memq g$208$16789 (g$208$15901 g$208$16781)) (begin '#f (g$208$16787 g$208$16789 g$208$16790 g$208$16793 (g$208$15903 g$208$16781) (g$208$15905 g$208$16781))) '#f))) (g$208$15901 g$208$16781))) (g$208$15982 g$208$16782) (g$208$15936 g$208$16782))))) '#f))) (set! g$208$15921 (lambda (g$208$16809) ((lambda (g$208$16811) (if (null? g$208$16811) (void) ((lambda (g$208$16813) (begin (g$208$15909 g$208$16809 g$208$16813) (g$208$15911 g$208$16809 (list->vector (g$208$15903 g$208$16809))) (g$208$15913 g$208$16809 (list->vector (g$208$15905 g$208$16809))) (g$208$15915 g$208$16809 (make-vector (vector-length g$208$16813) '0)))) (list->vector g$208$16811)))) (g$208$15901 g$208$16809)))) (set! g$208$15923 (lambda (g$208$16815) (if (g$208$15907 g$208$16815) (begin (g$208$15915 g$208$16815 '#f) (g$208$15909 g$208$16815 (vector->list (g$208$15901 g$208$16815))) (g$208$15911 g$208$16815 (vector->list (g$208$15903 g$208$16815))) (g$208$15913 g$208$16815 (vector->list (g$208$15905 g$208$16815)))) (void)))) (set! g$208$15925 (lambda (g$208$16817 g$208$16818) ((lambda (g$208$16821) ((lambda (g$208$16823) ((lambda (g$208$16825) (begin (vector-set! g$208$16821 g$208$16825 (+ g$208$16823 '1)) (if (= g$208$16825 g$208$16818) (void) ((lambda (g$208$16827 g$208$16828 g$208$16829) (begin ((lambda (g$208$16833) (begin (vector-set! g$208$16827 g$208$16818 (vector-ref g$208$16827 g$208$16825)) (vector-set! g$208$16827 g$208$16825 g$208$16833))) (vector-ref g$208$16827 g$208$16818)) ((lambda (g$208$16835) (begin (vector-set! g$208$16828 g$208$16818 (vector-ref g$208$16828 g$208$16825)) (vector-set! g$208$16828 g$208$16825 g$208$16835))) (vector-ref g$208$16828 g$208$16818)) ((lambda (g$208$16837) (begin (vector-set! g$208$16829 g$208$16818 (vector-ref g$208$16829 g$208$16825)) (vector-set! g$208$16829 g$208$16825 g$208$16837))) (vector-ref g$208$16829 g$208$16818)))) (g$208$15901 g$208$16817) (g$208$15903 g$208$16817) (g$208$15905 g$208$16817))))) ((letrec ((g$208$16839 (lambda (g$208$16841) (if (zero? g$208$16841) '0 ((lambda (g$208$16843) (if (= g$208$16823 (vector-ref g$208$16821 g$208$16843)) (g$208$16839 g$208$16843) g$208$16841)) (- g$208$16841 '1)))))) g$208$16839) g$208$16818))) (vector-ref g$208$16821 g$208$16818))) (g$208$15907 g$208$16817)))) (set! g$208$15927 (lambda (g$208$16845 g$208$16846) (g$208$15897 (map g$208$15982 g$208$16845) (map g$208$15936 g$208$16845) g$208$16846 '#f))) (set! g$208$15930 (lambda (g$208$16849 g$208$16850 g$208$16851) (vector 'g$208$15929 g$208$16849 g$208$16850 g$208$16851))) (set! g$208$15932 (lambda (g$208$16855) (if (vector? g$208$16855) (if (= (vector-length g$208$16855) (+ '1 (length '(expr mark* subst*)))) (begin '#f (eq? (vector-ref g$208$16855 '0) 'g$208$15929)) '#f) '#f))) (set! g$208$15934 (lambda (g$208$16857) (if (g$208$15932 g$208$16857) (vector-ref g$208$16857 '1) (error 'stx-expr '"~s is not of type ~s" g$208$16857 'stx)))) (set! g$208$15936 (lambda (g$208$16859) (if (g$208$15932 g$208$16859) (vector-ref g$208$16859 '2) (error 'stx-mark* '"~s is not of type ~s" g$208$16859 'stx)))) (set! g$208$15938 (lambda (g$208$16861) (if (g$208$15932 g$208$16861) (vector-ref g$208$16861 '3) (error 'stx-subst* '"~s is not of type ~s" g$208$16861 'stx)))) (set! g$208$15940 (lambda (g$208$16863 g$208$16864) (if (g$208$15932 g$208$16863) (vector-set! g$208$16863 '1 g$208$16864) (error 'set-stx-expr! '"~s is not of type ~s" g$208$16863 'stx)))) (set! g$208$15942 (lambda (g$208$16867 g$208$16868) (if (g$208$15932 g$208$16867) (vector-set! g$208$16867 '2 g$208$16868) (error 'set-stx-mark*! '"~s is not of type ~s" g$208$16867 'stx)))) (set! g$208$15944 (lambda (g$208$16871 g$208$16872) (if (g$208$15932 g$208$16871) (vector-set! g$208$16871 '3 g$208$16872) (error 'set-stx-subst*! '"~s is not of type ~s" g$208$16871 'stx)))) (set! g$208$15946 (lambda (g$208$16875 g$208$16876) (g$208$15930 g$208$16876 (g$208$15936 g$208$16875) (g$208$15938 g$208$16875)))) (set! g$208$15948 (lambda () (string '#\m))) (set! g$208$15950 '#f) (set! g$208$15952 not) (set! g$208$15954 (lambda (g$208$16879 g$208$16880 g$208$16881) ((lambda (g$208$16885) (begin (set! g$208$16885 (lambda (g$208$16891 g$208$16892) ((letrec ((g$208$16895 (lambda (g$208$16897 g$208$16898) (if (null? g$208$16898) (cdr g$208$16892) (cons g$208$16897 (g$208$16895 (car g$208$16898) (cdr g$208$16898))))))) g$208$16895) (car g$208$16891) (cdr g$208$16891)))) ((lambda (g$208$16887 g$208$16888) (if (if (not (null? g$208$16879)) (if (not (null? g$208$16887)) (begin '#f (g$208$15952 (car g$208$16887))) '#f) '#f) (values (g$208$16885 g$208$16879 g$208$16887) (g$208$16885 g$208$16880 g$208$16888)) (values (append g$208$16879 g$208$16887) (append g$208$16880 g$208$16888)))) (g$208$15936 g$208$16881) (g$208$15938 g$208$16881)))) '#f))) (set! g$208$15956 (lambda (g$208$16901 g$208$16902 g$208$16903) (if (g$208$15932 g$208$16901) (call-with-values (lambda () (g$208$15954 g$208$16902 g$208$16903 g$208$16901)) (lambda (g$208$16909 g$208$16910) ((lambda (g$208$16913 g$208$16914) (g$208$15930 (g$208$15934 g$208$16901) g$208$16914 g$208$16913)) g$208$16910 g$208$16909))) (g$208$15930 g$208$16901 g$208$16902 g$208$16903)))) (set! g$208$15958 (lambda (g$208$16917 g$208$16918) (g$208$15956 g$208$16918 (list g$208$16917) '(shift)))) (set! g$208$15960 (lambda (g$208$16921 g$208$16922) (g$208$15956 g$208$16922 '() (list g$208$16921)))) (set! g$208$15962 (lambda (g$208$16925 g$208$16926) (if (g$208$15932 g$208$16925) (g$208$15962 (g$208$15934 g$208$16925) g$208$16926) (if (g$208$14922 g$208$16925) (g$208$15962 (g$208$14923 g$208$16925) g$208$16926) (g$208$16926 g$208$16925))))) (set! g$208$15964 (lambda (g$208$16929) (if (g$208$15932 g$208$16929) ((lambda (g$208$16931 g$208$16932 g$208$16933) (map (lambda (g$208$16937) (g$208$15956 g$208$16937 g$208$16932 g$208$16933)) g$208$16931)) (g$208$15964 (g$208$15934 g$208$16929)) (g$208$15936 g$208$16929) (g$208$15938 g$208$16929)) (if (g$208$14922 g$208$16929) (g$208$15964 (g$208$14923 g$208$16929)) (if (vector? g$208$16929) (vector->list g$208$16929) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" g$208$16929)))))) (set! g$208$15966 (lambda (g$208$16939) (g$208$15962 g$208$16939 pair?))) (set! g$208$15968 (lambda (g$208$16941) (g$208$15962 g$208$16941 vector?))) (set! g$208$15970 (lambda (g$208$16943) (g$208$15962 g$208$16943 null?))) (set! g$208$15972 (lambda (g$208$16945) ((lambda (g$208$16947) (if g$208$16947 g$208$16947 (begin '#f (if (g$208$15966 g$208$16945) (begin '#f (g$208$15972 (g$208$15976 g$208$16945))) '#f)))) (g$208$15970 g$208$16945)))) (set! g$208$15974 (lambda (g$208$16949) (if (g$208$15932 g$208$16949) (g$208$15956 (g$208$15974 (g$208$15934 g$208$16949)) (g$208$15936 g$208$16949) (g$208$15938 g$208$16949)) (if (g$208$14922 g$208$16949) (g$208$15974 (g$208$14923 g$208$16949)) (if (pair? g$208$16949) (car g$208$16949) (assertion-violation 'syntax-car '"BUG: not a pair" g$208$16949)))))) (set! g$208$15976 (lambda (g$208$16951) (if (g$208$15932 g$208$16951) (g$208$15956 (g$208$15976 (g$208$15934 g$208$16951)) (g$208$15936 g$208$16951) (g$208$15938 g$208$16951)) (if (g$208$14922 g$208$16951) (g$208$15976 (g$208$14923 g$208$16951)) (if (pair? g$208$16951) (cdr g$208$16951) (assertion-violation 'syntax-cdr '"BUG: not a pair" g$208$16951)))))) (set! g$208$15978 (lambda (g$208$16953) (if (g$208$15966 g$208$16953) (cons (g$208$15974 g$208$16953) (g$208$15978 (g$208$15976 g$208$16953))) (if (g$208$15970 g$208$16953) '() (assertion-violation 'syntax->list '"BUG: invalid argument" g$208$16953))))) (set! g$208$15980 (lambda (g$208$16955) (g$208$15962 g$208$16955 symbol?))) (set! g$208$15982 (lambda (g$208$16957) (if (g$208$15932 g$208$16957) (g$208$15982 (g$208$15934 g$208$16957)) (if (g$208$14922 g$208$16957) (g$208$14923 g$208$16957) (if (symbol? g$208$16957) g$208$16957 (assertion-violation 'id->sym '"BUG: not an id" g$208$16957)))))) (set! g$208$15984 (lambda (g$208$16959 g$208$16960) ((lambda (g$208$16963) (if g$208$16963 g$208$16963 (begin '#f (if (pair? g$208$16959) (if (pair? g$208$16960) (if (eq? (car g$208$16959) (car g$208$16960)) (begin '#f (g$208$15984 (cdr g$208$16959) (cdr g$208$16960))) '#f) '#f) '#f)))) (if (null? g$208$16959) (begin '#f (null? g$208$16960)) '#f)))) (set! g$208$15986 (lambda (g$208$16965 g$208$16966) (if (eq? (g$208$15982 g$208$16965) (g$208$15982 g$208$16966)) (begin '#f (g$208$15984 (g$208$15936 g$208$16965) (g$208$15936 g$208$16966))) '#f))) (set! g$208$15988 (lambda (g$208$16969 g$208$16970) ((lambda (g$208$16973 g$208$16974) (if ((lambda (g$208$16977) (if g$208$16977 g$208$16977 (begin '#f g$208$16974))) g$208$16973) (eq? g$208$16973 g$208$16974) (eq? (g$208$15982 g$208$16969) (g$208$15982 g$208$16970)))) (g$208$16004 g$208$16969) (g$208$16004 g$208$16970)))) (set! g$208$15990 (lambda (g$208$16979) (if (for-all g$208$15980 g$208$16979) (begin '#f (g$208$15992 g$208$16979)) '#f))) (set! g$208$15992 (lambda (g$208$16981) ((lambda (g$208$16983) (if g$208$16983 g$208$16983 (begin '#f (if (not (g$208$15994 (car g$208$16981) (cdr g$208$16981))) (begin '#f (g$208$15992 (cdr g$208$16981))) '#f)))) (null? g$208$16981)))) (set! g$208$15994 (lambda (g$208$16985 g$208$16986) (if (pair? g$208$16986) (begin '#f ((lambda (g$208$16989) (if g$208$16989 g$208$16989 (begin '#f (g$208$15994 g$208$16985 (cdr g$208$16986))))) (g$208$15986 g$208$16985 (car g$208$16986)))) '#f))) (set! g$208$15996 (lambda (g$208$16991) ((lambda (g$208$16993) (if g$208$16993 g$208$16993 ((lambda (g$208$16995) (if g$208$16995 g$208$16995 ((lambda (g$208$16997) (if g$208$16997 g$208$16997 (begin '#f (boolean? g$208$16991)))) (char? g$208$16991)))) (string? g$208$16991)))) (number? g$208$16991)))) (set! g$208$15998 (lambda (g$208$16999) (if (pair? g$208$16999) (cons (g$208$15998 (car g$208$16999)) (g$208$15998 (cdr g$208$16999))) (if (g$208$14922 g$208$16999) (g$208$14925 g$208$16999) g$208$16999)))) (set! g$208$16000 (lambda (g$208$17001 g$208$17002) (if (g$208$15888 g$208$17002) (if ((lambda (g$208$17005) (if g$208$17005 g$208$17005 (begin '#f (if (pair? g$208$17001) (begin '#f (g$208$14922 (car g$208$17001))) '#f)))) (g$208$14922 g$208$17001)) (g$208$15998 g$208$17001) g$208$17001) ((letrec ((g$208$17007 (lambda (g$208$17009) (if (g$208$15932 g$208$17009) (g$208$16000 (g$208$15934 g$208$17009) (g$208$15936 g$208$17009)) (if (g$208$14922 g$208$17009) (g$208$14925 g$208$17009) (if (pair? g$208$17009) ((lambda (g$208$17011 g$208$17012) (if (if (eq? g$208$17011 (car g$208$17009)) (begin '#f (eq? g$208$17012 (cdr g$208$17009))) '#f) g$208$17009 (cons g$208$17011 g$208$17012))) (g$208$17007 (car g$208$17009)) (g$208$17007 (cdr g$208$17009))) (if (vector? g$208$17009) ((lambda (g$208$17015) ((lambda (g$208$17017) (if (for-all eq? g$208$17015 g$208$17017) g$208$17009 (list->vector g$208$17017))) (map g$208$17007 g$208$17015))) (vector->list g$208$17009)) g$208$17009))))))) g$208$17007) g$208$17001)))) (set! g$208$16002 (lambda (g$208$17019) (g$208$16000 g$208$17019 '()))) (set! g$208$16004 (lambda (g$208$17021) ((lambda (g$208$17023) ((letrec ((g$208$17025 (lambda (g$208$17027 g$208$17028) (if (null? g$208$17027) (g$208$16727 g$208$17023) (if (eq? (car g$208$17027) 'shift) (g$208$17025 (cdr g$208$17027) (cdr g$208$17028)) ((lambda (g$208$17031) (if (g$208$15907 g$208$17031) ((lambda (g$208$17033) ((letrec ((g$208$17035 (lambda (g$208$17037 g$208$17038) (if (= g$208$17037 g$208$17038) (g$208$17025 (cdr g$208$17027) g$208$17028) (if (if (eq? (vector-ref g$208$17033 g$208$17037) g$208$17023) (begin '#f (g$208$15984 g$208$17028 (vector-ref (g$208$15903 g$208$17031) g$208$17037))) '#f) ((lambda (g$208$17041) (begin (g$208$15925 g$208$17031 g$208$17037) g$208$17041)) (vector-ref (g$208$15905 g$208$17031) g$208$17037)) (g$208$17035 (+ g$208$17037 '1) g$208$17038)))))) g$208$17035) '0 (vector-length g$208$17033))) (g$208$15901 g$208$17031)) ((letrec ((g$208$17043 (lambda (g$208$17045 g$208$17046 g$208$17047) (if (null? g$208$17045) (g$208$17025 (cdr g$208$17027) g$208$17028) (if (if (eq? (car g$208$17045) g$208$17023) (begin '#f (g$208$15984 (car g$208$17046) g$208$17028)) '#f) (car g$208$17047) (g$208$17043 (cdr g$208$17045) (cdr g$208$17046) (cdr g$208$17047))))))) g$208$17043) (g$208$15901 g$208$17031) (g$208$15903 g$208$17031) (g$208$15905 g$208$17031)))) (car g$208$17027))))))) g$208$17025) (g$208$15938 g$208$17021) (g$208$15936 g$208$17021))) (g$208$15982 g$208$17021)))) (set! g$208$16006 (lambda (g$208$17051 g$208$17052) ((lambda (g$208$17055) (if g$208$17055 ((lambda (g$208$17057) (if (if (pair? g$208$17057) (begin '#f (eq? (car g$208$17057) '$core-rtd)) '#f) (cons '$rtd (map g$208$16504 (cdr g$208$17057))) (if (if (pair? g$208$17057) (begin '#f (eq? (car g$208$17057) 'global-rtd)) '#f) ((lambda (g$208$17059 g$208$17060) (cons '$rtd (symbol-value g$208$17060))) (cadr g$208$17057) (cddr g$208$17057)) g$208$17057))) g$208$17055) ((lambda (g$208$17063) (if g$208$17063 (cdr g$208$17063) '(displaced-lexical . #f))) (assq g$208$17051 g$208$17052)))) (g$208$15515 g$208$17051)))) (set! g$208$16008 cons) (set! g$208$16010 car) (set! g$208$16012 cdr) (set! g$208$16014 (lambda (g$208$17065) (g$208$16713 '#f '"unbound identifier" g$208$17065 (make-undefined-violation)))) (set! g$208$16016 (lambda (g$208$17067 g$208$17068) (if (g$208$15980 g$208$17067) ((lambda (g$208$17071) ((lambda (g$208$17073) ((lambda (g$208$17075) ((lambda (g$208$17077) ((lambda () (begin (if g$208$17073 (void) (begin (display '"here") (g$208$16014 g$208$17071))) ((lambda (g$208$17079) (if (memv g$208$17079 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values g$208$17077 (g$208$16012 g$208$17075) g$208$17071) (values 'other '#f '#f))) g$208$17077))))) (g$208$16010 g$208$17075))) (g$208$16006 g$208$17073 g$208$17068))) (g$208$16004 g$208$17071))) g$208$17067) (if (g$208$15966 g$208$17067) ((lambda (g$208$17080) (if (g$208$15980 g$208$17080) ((lambda (g$208$17082) ((lambda (g$208$17084) ((lambda (g$208$17086) ((lambda () (begin (if g$208$17082 (void) (begin (display '"here2") (g$208$16014 g$208$17080))) ((lambda (g$208$17088) (if (memv g$208$17088 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values g$208$17086 (g$208$16012 g$208$17084) g$208$17080) (values 'call '#f '#f))) g$208$17086))))) (g$208$16010 g$208$17084))) (g$208$16006 g$208$17082 g$208$17068))) (g$208$16004 g$208$17080)) (values 'call '#f '#f))) (g$208$15974 g$208$17067)) ((lambda (g$208$17089) (if (g$208$15996 g$208$17089) (values 'constant g$208$17089 '#f) (values 'other '#f '#f))) (g$208$16002 g$208$17067)))))) (set! g$208$16039 (lambda (g$208$17091 g$208$17092) (if (procedure? g$208$17091) (cons* 'local-macro g$208$17091 g$208$17092) (if (if (pair? g$208$17091) (if (eq? (car g$208$17091) 'macro!) (begin '#f (procedure? (cdr g$208$17091))) '#f) '#f) (cons* 'local-macro! (cdr g$208$17091) g$208$17092) (if (if (pair? g$208$17091) (begin '#f (eq? (car g$208$17091) '$rtd)) '#f) g$208$17091 (assertion-violation 'expand '"invalid transformer" g$208$17091)))))) (set! g$208$16041 (lambda (g$208$17095) (if (procedure? g$208$17095) (cons 'macro! g$208$17095) (assertion-violation 'make-variable-transformer '"not a procedure" g$208$17095)))) (set! g$208$16043 (lambda (g$208$17097) (g$208$16039 (eval-core (g$208$15006 g$208$17097)) g$208$17097))) (set! g$208$16462 (lambda (g$208$17099) ((lambda (g$208$17101) ((lambda (g$208$17103) (if (if g$208$17103 (begin '#f (apply (lambda (g$208$17105 g$208$17106 g$208$17107 g$208$17108) (g$208$15980 g$208$17105)) g$208$17103)) '#f) (apply (lambda (g$208$17113 g$208$17114 g$208$17115 g$208$17116) (values g$208$17113 (cons 'defun (cons g$208$17114 (cons g$208$17115 g$208$17116))))) g$208$17103) ((lambda (g$208$17121) ((lambda (g$208$17123) (if (if g$208$17123 (begin '#f (apply (lambda (g$208$17125 g$208$17126) (g$208$15980 g$208$17125)) g$208$17123)) '#f) (apply (lambda (g$208$17129 g$208$17130) (values g$208$17129 (cons 'expr g$208$17130))) g$208$17123) (g$208$16715 '#f '"invalid syntax" g$208$17121))) ((lambda (g$208$17133) (if (g$208$15966 g$208$17133) (begin '#f ((lambda (g$208$17135) (if g$208$17135 (begin '#f ((lambda (g$208$17137) (if g$208$17137 (begin '#f (append g$208$17135 g$208$17137)) '#f)) ((lambda (g$208$17139) (if (g$208$15966 g$208$17139) (begin '#f ((lambda (g$208$17141) (if g$208$17141 (begin '#f ((lambda (g$208$17143) (if g$208$17143 (begin '#f (append g$208$17141 g$208$17143)) '#f)) ((lambda (g$208$17145) (if (g$208$15966 g$208$17145) (begin '#f ((lambda (g$208$17147) (if g$208$17147 (begin '#f ((lambda (g$208$17149) (if g$208$17149 (begin '#f (append g$208$17147 g$208$17149)) '#f)) ((lambda (g$208$17151) (if (equal? (g$208$16002 g$208$17151) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17145)))) '#f)) ((lambda (g$208$17153) (list g$208$17153)) (g$208$15974 g$208$17145)))) '#f)) (g$208$15976 g$208$17139)))) '#f)) ((lambda (g$208$17155) (list g$208$17155)) (g$208$15974 g$208$17139)))) '#f)) (g$208$15976 g$208$17133)))) '#f)) ((lambda (g$208$17157) '()) (g$208$15974 g$208$17133)))) '#f)) g$208$17121))) g$208$17101))) ((lambda (g$208$17159) (if (g$208$15966 g$208$17159) (begin '#f ((lambda (g$208$17161) (if g$208$17161 (begin '#f ((lambda (g$208$17163) (if g$208$17163 (begin '#f (append g$208$17161 g$208$17163)) '#f)) ((lambda (g$208$17165) (if (g$208$15966 g$208$17165) (begin '#f ((lambda (g$208$17167) (if g$208$17167 (begin '#f ((lambda (g$208$17169) (if g$208$17169 (begin '#f (append g$208$17167 g$208$17169)) '#f)) ((lambda (g$208$17171) (if (g$208$15966 g$208$17171) (begin '#f ((lambda (g$208$17173) (if g$208$17173 (begin '#f ((lambda (g$208$17175) (if g$208$17175 (begin '#f (append g$208$17173 g$208$17175)) '#f)) ((letrec ((g$208$17177 (lambda (g$208$17179) (if (g$208$15966 g$208$17179) ((lambda (g$208$17181) (if g$208$17181 (begin '#f ((lambda (g$208$17183) (if g$208$17183 (begin '#f (map cons g$208$17181 g$208$17183)) '#f)) (g$208$17177 (g$208$15976 g$208$17179)))) '#f)) ((lambda (g$208$17185) (list g$208$17185)) (g$208$15974 g$208$17179))) (if (g$208$15970 g$208$17179) (list (begin 'b* '())) '#f))))) g$208$17177) (g$208$15976 g$208$17171)))) '#f)) ((lambda (g$208$17187) (list g$208$17187)) (g$208$15974 g$208$17171)))) '#f)) (g$208$15976 g$208$17165)))) '#f)) ((lambda (g$208$17189) (if (g$208$15966 g$208$17189) (begin '#f ((lambda (g$208$17191) (if g$208$17191 (begin '#f ((lambda (g$208$17193) (if g$208$17193 (begin '#f (append g$208$17191 g$208$17193)) '#f)) ((lambda (g$208$17195) (list g$208$17195)) (g$208$15976 g$208$17189)))) '#f)) ((lambda (g$208$17197) (list g$208$17197)) (g$208$15974 g$208$17189)))) '#f)) (g$208$15974 g$208$17165)))) '#f)) (g$208$15976 g$208$17159)))) '#f)) ((lambda (g$208$17199) '()) (g$208$15974 g$208$17159)))) '#f)) g$208$17101))) g$208$17099))) (set! g$208$16464 (lambda (g$208$17201) ((lambda (g$208$17203) ((lambda (g$208$17205) (if (if g$208$17205 (begin '#f (apply (lambda (g$208$17207 g$208$17208) (g$208$15980 g$208$17207)) g$208$17205)) '#f) (apply (lambda (g$208$17211 g$208$17212) (values g$208$17211 g$208$17212)) g$208$17205) (g$208$16715 '#f '"invalid syntax" g$208$17203))) ((lambda (g$208$17215) (if (g$208$15966 g$208$17215) (begin '#f ((lambda (g$208$17217) (if g$208$17217 (begin '#f ((lambda (g$208$17219) (if g$208$17219 (begin '#f (append g$208$17217 g$208$17219)) '#f)) ((lambda (g$208$17221) (if (g$208$15966 g$208$17221) (begin '#f ((lambda (g$208$17223) (if g$208$17223 (begin '#f ((lambda (g$208$17225) (if g$208$17225 (begin '#f (append g$208$17223 g$208$17225)) '#f)) ((lambda (g$208$17227) (if (g$208$15966 g$208$17227) (begin '#f ((lambda (g$208$17229) (if g$208$17229 (begin '#f ((lambda (g$208$17231) (if g$208$17231 (begin '#f (append g$208$17229 g$208$17231)) '#f)) ((lambda (g$208$17233) (if (equal? (g$208$16002 g$208$17233) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17227)))) '#f)) ((lambda (g$208$17235) (list g$208$17235)) (g$208$15974 g$208$17227)))) '#f)) (g$208$15976 g$208$17221)))) '#f)) ((lambda (g$208$17237) (list g$208$17237)) (g$208$15974 g$208$17221)))) '#f)) (g$208$15976 g$208$17215)))) '#f)) ((lambda (g$208$17239) '()) (g$208$15974 g$208$17215)))) '#f)) g$208$17203))) g$208$17201))) (set! g$208$16466 (lambda (g$208$17241) ((lambda (g$208$17243) ((lambda (g$208$17245) (if g$208$17245 ((lambda (g$208$17247) ((lambda (g$208$17249 g$208$17250) (g$208$15960 (g$208$15897 (list g$208$17249) (list g$208$15886) (list g$208$17250) '#f) (g$208$15956 g$208$17241 g$208$15886 '()))) (car g$208$17247) (cdr g$208$17247))) g$208$17245) (g$208$15956 g$208$17241 g$208$15886 '()))) (assq g$208$17241 g$208$17243))) (g$208$15481 (g$208$15507 '(psyntax system $all)))))) (set! g$208$16468 car) (set! g$208$16470 cdr) (set! g$208$16472 set-cdr!) (set! g$208$16474 (lambda (g$208$17253 g$208$17254 g$208$17255) (cons (cons* g$208$17253 'lexical g$208$17254 '#f) g$208$17255))) (set! g$208$16476 (lambda (g$208$17259 g$208$17260 g$208$17261) (if (null? g$208$17259) g$208$17261 (g$208$16476 (cdr g$208$17259) (cdr g$208$17260) (g$208$16474 (car g$208$17259) (car g$208$17260) g$208$17261))))) (set! g$208$16478 (lambda (g$208$17265 g$208$17266 g$208$17267 g$208$17268) ((lambda (g$208$17273) ((lambda (g$208$17275) (if (if g$208$17275 (begin '#f (apply (lambda (g$208$17277 g$208$17278 g$208$17279 g$208$17280) '#t) g$208$17275)) '#f) (apply (lambda (g$208$17285 g$208$17286 g$208$17287 g$208$17288) (if (not (g$208$15990 g$208$17285)) (g$208$16715 '#f '"invalid identifiers" g$208$17265) ((lambda (g$208$17293 g$208$17294) ((lambda (g$208$17297 g$208$17298) ((lambda (g$208$17301 g$208$17302) (g$208$17268 '#f g$208$17293 g$208$17302 g$208$17301)) (g$208$16616 (g$208$15960 g$208$17297 (cons g$208$17287 g$208$17288)) g$208$17298 g$208$17267) (g$208$16596 (map (lambda (g$208$17305) (g$208$15960 g$208$17297 g$208$17305)) g$208$17286) g$208$17298 g$208$17267))) (g$208$15927 g$208$17285 g$208$17294) (g$208$16476 g$208$17294 g$208$17293 g$208$17266))) (map g$208$15890 g$208$17285) (map g$208$15894 g$208$17285)))) g$208$17275) (g$208$16715 '#f '"invalid syntax" g$208$17273))) ((lambda (g$208$17307) (if (g$208$15966 g$208$17307) (begin '#f ((lambda (g$208$17309) (if g$208$17309 (begin '#f ((lambda (g$208$17311) (if g$208$17311 (begin '#f (append g$208$17309 g$208$17311)) '#f)) ((lambda (g$208$17313) (if (g$208$15966 g$208$17313) (begin '#f ((lambda (g$208$17315) (if g$208$17315 (begin '#f ((lambda (g$208$17317) (if g$208$17317 (begin '#f (append g$208$17315 g$208$17317)) '#f)) ((lambda (g$208$17319) (if (g$208$15966 g$208$17319) (begin '#f ((lambda (g$208$17321) (if g$208$17321 (begin '#f ((lambda (g$208$17323) (if g$208$17323 (begin '#f (append g$208$17321 g$208$17323)) '#f)) ((letrec ((g$208$17325 (lambda (g$208$17327) (if (g$208$15966 g$208$17327) ((lambda (g$208$17329) (if g$208$17329 (begin '#f ((lambda (g$208$17331) (if g$208$17331 (begin '#f (map cons g$208$17329 g$208$17331)) '#f)) (g$208$17325 (g$208$15976 g$208$17327)))) '#f)) ((lambda (g$208$17333) (list g$208$17333)) (g$208$15974 g$208$17327))) (if (g$208$15970 g$208$17327) (list (begin 'b* '())) '#f))))) g$208$17325) (g$208$15976 g$208$17319)))) '#f)) ((lambda (g$208$17335) (list g$208$17335)) (g$208$15974 g$208$17319)))) '#f)) (g$208$15976 g$208$17313)))) '#f)) ((letrec ((g$208$17337 (lambda (g$208$17339) (if (g$208$15966 g$208$17339) ((lambda (g$208$17341) (if g$208$17341 (begin '#f ((lambda (g$208$17343) (if g$208$17343 (begin '#f (map cons g$208$17341 g$208$17343)) '#f)) (g$208$17337 (g$208$15976 g$208$17339)))) '#f)) ((lambda (g$208$17345) (if (g$208$15966 g$208$17345) (begin '#f ((lambda (g$208$17347) (if g$208$17347 (begin '#f ((lambda (g$208$17349) (if g$208$17349 (begin '#f (append g$208$17347 g$208$17349)) '#f)) ((lambda (g$208$17351) (if (g$208$15966 g$208$17351) (begin '#f ((lambda (g$208$17353) (if g$208$17353 (begin '#f ((lambda (g$208$17355) (if g$208$17355 (begin '#f (append g$208$17353 g$208$17355)) '#f)) ((lambda (g$208$17357) (if (equal? (g$208$16002 g$208$17357) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17351)))) '#f)) ((lambda (g$208$17359) (list g$208$17359)) (g$208$15974 g$208$17351)))) '#f)) (g$208$15976 g$208$17345)))) '#f)) ((lambda (g$208$17361) (list g$208$17361)) (g$208$15974 g$208$17345)))) '#f)) (g$208$15974 g$208$17339))) (if (g$208$15970 g$208$17339) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$208$17337) (g$208$15974 g$208$17313)))) '#f)) (g$208$15976 g$208$17307)))) '#f)) ((lambda (g$208$17363) '()) (g$208$15974 g$208$17307)))) '#f)) g$208$17273))) g$208$17265))) (set! g$208$16480 (lambda (g$208$17365 g$208$17366 g$208$17367) (g$208$16478 g$208$17365 g$208$17366 g$208$17367 g$208$15865))) (set! g$208$16482 (lambda (g$208$17371 g$208$17372 g$208$17373) (g$208$16478 g$208$17371 g$208$17372 g$208$17373 g$208$15866))) (set! g$208$16484 (lambda (g$208$17377 g$208$17378 g$208$17379) ((lambda (g$208$17383) ((lambda (g$208$17385) (if (if g$208$17385 (begin '#f (apply (lambda (g$208$17387) (g$208$15980 g$208$17387)) g$208$17385)) '#f) (apply (lambda (g$208$17389) ((lambda (g$208$17391) ((lambda (g$208$17393) ((lambda (g$208$17395) ((lambda () (begin (if g$208$17391 (void) (g$208$16014 g$208$17389)) (if (if (eq? g$208$17395 '$rtd) (begin '#f (not (list? (g$208$16012 g$208$17393)))) '#f) (void) (g$208$16715 '#f '"not a record type" g$208$17377)) (list 'quote (g$208$16012 g$208$17393)))))) (g$208$16010 g$208$17393))) (g$208$16006 g$208$17391 g$208$17378))) (g$208$16004 g$208$17389))) g$208$17385) (g$208$16715 '#f '"invalid syntax" g$208$17383))) ((lambda (g$208$17397) (if (g$208$15966 g$208$17397) (begin '#f ((lambda (g$208$17399) (if g$208$17399 (begin '#f ((lambda (g$208$17401) (if g$208$17401 (begin '#f (append g$208$17399 g$208$17401)) '#f)) ((lambda (g$208$17403) (if (g$208$15966 g$208$17403) (begin '#f ((lambda (g$208$17405) (if g$208$17405 (begin '#f ((lambda (g$208$17407) (if g$208$17407 (begin '#f (append g$208$17405 g$208$17407)) '#f)) ((lambda (g$208$17409) (if (equal? (g$208$16002 g$208$17409) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17403)))) '#f)) ((lambda (g$208$17411) (list g$208$17411)) (g$208$15974 g$208$17403)))) '#f)) (g$208$15976 g$208$17397)))) '#f)) ((lambda (g$208$17413) '()) (g$208$15974 g$208$17397)))) '#f)) g$208$17383))) g$208$17377))) (set! g$208$16486 (lambda (g$208$17415 g$208$17416 g$208$17417) ((lambda (g$208$17421) ((lambda (g$208$17423) (if (if g$208$17423 (begin '#f (apply (lambda (g$208$17425) (g$208$15980 g$208$17425)) g$208$17423)) '#f) (apply (lambda (g$208$17427) ((lambda (g$208$17429) ((lambda (g$208$17431) ((lambda (g$208$17433) ((lambda () (begin (if g$208$17429 (void) (g$208$16014 g$208$17427)) (if (if (eq? g$208$17433 '$rtd) (begin '#f (list? (g$208$16012 g$208$17431))) '#f) (void) (g$208$16715 '#f '"not a record type" g$208$17415)) (g$208$16600 (car (g$208$16012 g$208$17431)) g$208$17416 g$208$17417))))) (g$208$16010 g$208$17431))) (g$208$16006 g$208$17429 g$208$17416))) (g$208$16004 g$208$17427))) g$208$17423) (g$208$16715 '#f '"invalid syntax" g$208$17421))) ((lambda (g$208$17435) (if (g$208$15966 g$208$17435) (begin '#f ((lambda (g$208$17437) (if g$208$17437 (begin '#f ((lambda (g$208$17439) (if g$208$17439 (begin '#f (append g$208$17437 g$208$17439)) '#f)) ((lambda (g$208$17441) (if (g$208$15966 g$208$17441) (begin '#f ((lambda (g$208$17443) (if g$208$17443 (begin '#f ((lambda (g$208$17445) (if g$208$17445 (begin '#f (append g$208$17443 g$208$17445)) '#f)) ((lambda (g$208$17447) (if (equal? (g$208$16002 g$208$17447) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17441)))) '#f)) ((lambda (g$208$17449) (list g$208$17449)) (g$208$15974 g$208$17441)))) '#f)) (g$208$15976 g$208$17435)))) '#f)) ((lambda (g$208$17451) '()) (g$208$15974 g$208$17435)))) '#f)) g$208$17421))) g$208$17415))) (set! g$208$16488 (lambda (g$208$17453 g$208$17454 g$208$17455) ((lambda (g$208$17459) ((lambda (g$208$17461) (if (if g$208$17461 (begin '#f (apply (lambda (g$208$17463) (g$208$15980 g$208$17463)) g$208$17461)) '#f) (apply (lambda (g$208$17465) ((lambda (g$208$17467) ((lambda (g$208$17469) ((lambda (g$208$17471) ((lambda () (begin (if g$208$17467 (void) (g$208$16014 g$208$17465)) (if (if (eq? g$208$17471 '$rtd) (begin '#f (list? (g$208$16012 g$208$17469))) '#f) (void) (g$208$16715 '#f '"invalid type" g$208$17453)) (g$208$16600 (cadr (g$208$16012 g$208$17469)) g$208$17454 g$208$17455))))) (g$208$16010 g$208$17469))) (g$208$16006 g$208$17467 g$208$17454))) (g$208$16004 g$208$17465))) g$208$17461) (g$208$16715 '#f '"invalid syntax" g$208$17459))) ((lambda (g$208$17473) (if (g$208$15966 g$208$17473) (begin '#f ((lambda (g$208$17475) (if g$208$17475 (begin '#f ((lambda (g$208$17477) (if g$208$17477 (begin '#f (append g$208$17475 g$208$17477)) '#f)) ((lambda (g$208$17479) (if (g$208$15966 g$208$17479) (begin '#f ((lambda (g$208$17481) (if g$208$17481 (begin '#f ((lambda (g$208$17483) (if g$208$17483 (begin '#f (append g$208$17481 g$208$17483)) '#f)) ((lambda (g$208$17485) (if (equal? (g$208$16002 g$208$17485) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17479)))) '#f)) ((lambda (g$208$17487) (list g$208$17487)) (g$208$15974 g$208$17479)))) '#f)) (g$208$15976 g$208$17473)))) '#f)) ((lambda (g$208$17489) '()) (g$208$15974 g$208$17473)))) '#f)) g$208$17459))) g$208$17453))) (set! g$208$16490 (lambda (g$208$17491 g$208$17492 g$208$17493) ((lambda (g$208$17497) ((lambda (g$208$17499) (if (if g$208$17499 (begin '#f (apply (lambda (g$208$17501 g$208$17502 g$208$17503) '#t) g$208$17499)) '#f) (apply (lambda (g$208$17507 g$208$17508 g$208$17509) (list 'if (g$208$16600 g$208$17507 g$208$17492 g$208$17493) (g$208$15863 '#f (g$208$16596 (cons g$208$17508 g$208$17509) g$208$17492 g$208$17493)) (g$208$15864))) g$208$17499) (g$208$16715 '#f '"invalid syntax" g$208$17497))) ((lambda (g$208$17513) (if (g$208$15966 g$208$17513) (begin '#f ((lambda (g$208$17515) (if g$208$17515 (begin '#f ((lambda (g$208$17517) (if g$208$17517 (begin '#f (append g$208$17515 g$208$17517)) '#f)) ((lambda (g$208$17519) (if (g$208$15966 g$208$17519) (begin '#f ((lambda (g$208$17521) (if g$208$17521 (begin '#f ((lambda (g$208$17523) (if g$208$17523 (begin '#f (append g$208$17521 g$208$17523)) '#f)) ((lambda (g$208$17525) (if (g$208$15966 g$208$17525) (begin '#f ((lambda (g$208$17527) (if g$208$17527 (begin '#f ((lambda (g$208$17529) (if g$208$17529 (begin '#f (append g$208$17527 g$208$17529)) '#f)) ((letrec ((g$208$17531 (lambda (g$208$17533) (if (g$208$15966 g$208$17533) ((lambda (g$208$17535) (if g$208$17535 (begin '#f ((lambda (g$208$17537) (if g$208$17537 (begin '#f (map cons g$208$17535 g$208$17537)) '#f)) (g$208$17531 (g$208$15976 g$208$17533)))) '#f)) ((lambda (g$208$17539) (list g$208$17539)) (g$208$15974 g$208$17533))) (if (g$208$15970 g$208$17533) (list (begin 'e* '())) '#f))))) g$208$17531) (g$208$15976 g$208$17525)))) '#f)) ((lambda (g$208$17541) (list g$208$17541)) (g$208$15974 g$208$17525)))) '#f)) (g$208$15976 g$208$17519)))) '#f)) ((lambda (g$208$17543) (list g$208$17543)) (g$208$15974 g$208$17519)))) '#f)) (g$208$15976 g$208$17513)))) '#f)) ((lambda (g$208$17545) '()) (g$208$15974 g$208$17513)))) '#f)) g$208$17497))) g$208$17491))) (set! g$208$16492 (lambda (g$208$17547 g$208$17548 g$208$17549) ((lambda (g$208$17553) ((lambda (g$208$17555) (if (if g$208$17555 (begin '#f (apply (lambda (g$208$17557 g$208$17558 g$208$17559) '#t) g$208$17555)) '#f) (apply (lambda (g$208$17563 g$208$17564 g$208$17565) (list 'if (g$208$16600 g$208$17563 g$208$17548 g$208$17549) (g$208$15864) (g$208$15863 '#f (g$208$16596 (cons g$208$17564 g$208$17565) g$208$17548 g$208$17549)))) g$208$17555) (g$208$16715 '#f '"invalid syntax" g$208$17553))) ((lambda (g$208$17569) (if (g$208$15966 g$208$17569) (begin '#f ((lambda (g$208$17571) (if g$208$17571 (begin '#f ((lambda (g$208$17573) (if g$208$17573 (begin '#f (append g$208$17571 g$208$17573)) '#f)) ((lambda (g$208$17575) (if (g$208$15966 g$208$17575) (begin '#f ((lambda (g$208$17577) (if g$208$17577 (begin '#f ((lambda (g$208$17579) (if g$208$17579 (begin '#f (append g$208$17577 g$208$17579)) '#f)) ((lambda (g$208$17581) (if (g$208$15966 g$208$17581) (begin '#f ((lambda (g$208$17583) (if g$208$17583 (begin '#f ((lambda (g$208$17585) (if g$208$17585 (begin '#f (append g$208$17583 g$208$17585)) '#f)) ((letrec ((g$208$17587 (lambda (g$208$17589) (if (g$208$15966 g$208$17589) ((lambda (g$208$17591) (if g$208$17591 (begin '#f ((lambda (g$208$17593) (if g$208$17593 (begin '#f (map cons g$208$17591 g$208$17593)) '#f)) (g$208$17587 (g$208$15976 g$208$17589)))) '#f)) ((lambda (g$208$17595) (list g$208$17595)) (g$208$15974 g$208$17589))) (if (g$208$15970 g$208$17589) (list (begin 'e* '())) '#f))))) g$208$17587) (g$208$15976 g$208$17581)))) '#f)) ((lambda (g$208$17597) (list g$208$17597)) (g$208$15974 g$208$17581)))) '#f)) (g$208$15976 g$208$17575)))) '#f)) ((lambda (g$208$17599) (list g$208$17599)) (g$208$15974 g$208$17575)))) '#f)) (g$208$15976 g$208$17569)))) '#f)) ((lambda (g$208$17601) '()) (g$208$15974 g$208$17569)))) '#f)) g$208$17553))) g$208$17547))) (set! g$208$16494 (lambda (g$208$17603 g$208$17604 g$208$17605) ((lambda (g$208$17609) ((lambda (g$208$17611) (if (if g$208$17611 (begin '#f (apply (lambda (g$208$17613 g$208$17614 g$208$17615) '#t) g$208$17611)) '#f) (apply (lambda (g$208$17619 g$208$17620 g$208$17621) (list 'if (g$208$16600 g$208$17619 g$208$17604 g$208$17605) (g$208$16600 g$208$17620 g$208$17604 g$208$17605) (g$208$16600 g$208$17621 g$208$17604 g$208$17605))) g$208$17611) ((lambda (g$208$17625) ((lambda (g$208$17627) (if (if g$208$17627 (begin '#f (apply (lambda (g$208$17629 g$208$17630) '#t) g$208$17627)) '#f) (apply (lambda (g$208$17633 g$208$17634) (list 'if (g$208$16600 g$208$17633 g$208$17604 g$208$17605) (g$208$16600 g$208$17634 g$208$17604 g$208$17605) (g$208$15864))) g$208$17627) (g$208$16715 '#f '"invalid syntax" g$208$17625))) ((lambda (g$208$17637) (if (g$208$15966 g$208$17637) (begin '#f ((lambda (g$208$17639) (if g$208$17639 (begin '#f ((lambda (g$208$17641) (if g$208$17641 (begin '#f (append g$208$17639 g$208$17641)) '#f)) ((lambda (g$208$17643) (if (g$208$15966 g$208$17643) (begin '#f ((lambda (g$208$17645) (if g$208$17645 (begin '#f ((lambda (g$208$17647) (if g$208$17647 (begin '#f (append g$208$17645 g$208$17647)) '#f)) ((lambda (g$208$17649) (if (g$208$15966 g$208$17649) (begin '#f ((lambda (g$208$17651) (if g$208$17651 (begin '#f ((lambda (g$208$17653) (if g$208$17653 (begin '#f (append g$208$17651 g$208$17653)) '#f)) ((lambda (g$208$17655) (if (equal? (g$208$16002 g$208$17655) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17649)))) '#f)) ((lambda (g$208$17657) (list g$208$17657)) (g$208$15974 g$208$17649)))) '#f)) (g$208$15976 g$208$17643)))) '#f)) ((lambda (g$208$17659) (list g$208$17659)) (g$208$15974 g$208$17643)))) '#f)) (g$208$15976 g$208$17637)))) '#f)) ((lambda (g$208$17661) '()) (g$208$15974 g$208$17637)))) '#f)) g$208$17625))) g$208$17609))) ((lambda (g$208$17663) (if (g$208$15966 g$208$17663) (begin '#f ((lambda (g$208$17665) (if g$208$17665 (begin '#f ((lambda (g$208$17667) (if g$208$17667 (begin '#f (append g$208$17665 g$208$17667)) '#f)) ((lambda (g$208$17669) (if (g$208$15966 g$208$17669) (begin '#f ((lambda (g$208$17671) (if g$208$17671 (begin '#f ((lambda (g$208$17673) (if g$208$17673 (begin '#f (append g$208$17671 g$208$17673)) '#f)) ((lambda (g$208$17675) (if (g$208$15966 g$208$17675) (begin '#f ((lambda (g$208$17677) (if g$208$17677 (begin '#f ((lambda (g$208$17679) (if g$208$17679 (begin '#f (append g$208$17677 g$208$17679)) '#f)) ((lambda (g$208$17681) (if (g$208$15966 g$208$17681) (begin '#f ((lambda (g$208$17683) (if g$208$17683 (begin '#f ((lambda (g$208$17685) (if g$208$17685 (begin '#f (append g$208$17683 g$208$17685)) '#f)) ((lambda (g$208$17687) (if (equal? (g$208$16002 g$208$17687) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17681)))) '#f)) ((lambda (g$208$17689) (list g$208$17689)) (g$208$15974 g$208$17681)))) '#f)) (g$208$15976 g$208$17675)))) '#f)) ((lambda (g$208$17691) (list g$208$17691)) (g$208$15974 g$208$17675)))) '#f)) (g$208$15976 g$208$17669)))) '#f)) ((lambda (g$208$17693) (list g$208$17693)) (g$208$15974 g$208$17669)))) '#f)) (g$208$15976 g$208$17663)))) '#f)) ((lambda (g$208$17695) '()) (g$208$15974 g$208$17663)))) '#f)) g$208$17609))) g$208$17603))) (set! g$208$16496 (lambda (g$208$17697 g$208$17698 g$208$17699) ((lambda (g$208$17703 g$208$17705) (begin (set! g$208$17703 (lambda (g$208$17897 g$208$17898 g$208$17899) ((lambda (g$208$17903) ((lambda (g$208$17905) (if (if g$208$17905 (begin '#f (apply (lambda (g$208$17907 g$208$17908 g$208$17909) '#t) g$208$17905)) '#f) (apply (lambda (g$208$17913 g$208$17914 g$208$17915) (list 'if (list '(primitive memv) g$208$17897 (list 'quote (g$208$16002 g$208$17913))) (g$208$15863 '#f (g$208$16596 (cons g$208$17914 g$208$17915) g$208$17698 g$208$17699)) g$208$17899)) g$208$17905) ((lambda (g$208$17919) ((lambda (g$208$17921) (if (if g$208$17921 (begin '#f (apply (lambda (g$208$17923) '#t) g$208$17921)) '#f) (apply (lambda (g$208$17925) (g$208$16715 '#f '"invalid syntax" g$208$17697)) g$208$17921) (g$208$16715 '#f '"invalid syntax" g$208$17919))) ((lambda (g$208$17927) (list g$208$17927)) g$208$17919))) g$208$17903))) ((lambda (g$208$17929) (if (g$208$15966 g$208$17929) (begin '#f ((lambda (g$208$17931) (if g$208$17931 (begin '#f ((lambda (g$208$17933) (if g$208$17933 (begin '#f (append g$208$17931 g$208$17933)) '#f)) ((lambda (g$208$17935) (if (g$208$15966 g$208$17935) (begin '#f ((lambda (g$208$17937) (if g$208$17937 (begin '#f ((lambda (g$208$17939) (if g$208$17939 (begin '#f (append g$208$17937 g$208$17939)) '#f)) ((letrec ((g$208$17941 (lambda (g$208$17943) (if (g$208$15966 g$208$17943) ((lambda (g$208$17945) (if g$208$17945 (begin '#f ((lambda (g$208$17947) (if g$208$17947 (begin '#f (map cons g$208$17945 g$208$17947)) '#f)) (g$208$17941 (g$208$15976 g$208$17943)))) '#f)) ((lambda (g$208$17949) (list g$208$17949)) (g$208$15974 g$208$17943))) (if (g$208$15970 g$208$17943) (list (begin 'e* '())) '#f))))) g$208$17941) (g$208$15976 g$208$17935)))) '#f)) ((lambda (g$208$17951) (list g$208$17951)) (g$208$15974 g$208$17935)))) '#f)) (g$208$15976 g$208$17929)))) '#f)) ((letrec ((g$208$17953 (lambda (g$208$17955) (if (g$208$15966 g$208$17955) ((lambda (g$208$17957) (if g$208$17957 (begin '#f ((lambda (g$208$17959) (if g$208$17959 (begin '#f (map cons g$208$17957 g$208$17959)) '#f)) (g$208$17953 (g$208$15976 g$208$17955)))) '#f)) ((lambda (g$208$17961) (list g$208$17961)) (g$208$15974 g$208$17955))) (if (g$208$15970 g$208$17955) (list (begin 'd* '())) '#f))))) g$208$17953) (g$208$15974 g$208$17929)))) '#f)) g$208$17903))) g$208$17898))) (set! g$208$17705 (lambda (g$208$17791 g$208$17792) ((lambda (g$208$17795) ((lambda (g$208$17797) (if (if g$208$17797 (begin '#f (apply (lambda (g$208$17799 g$208$17800 g$208$17801) '#t) g$208$17797)) '#f) (apply (lambda (g$208$17805 g$208$17806 g$208$17807) (g$208$17703 g$208$17791 g$208$17792 (g$208$15864))) g$208$17797) ((lambda (g$208$17811) ((lambda (g$208$17813) (if (if g$208$17813 (begin '#f (apply (lambda (g$208$17815 g$208$17816 g$208$17817) '#t) g$208$17813)) '#f) (apply (lambda (g$208$17821 g$208$17822 g$208$17823) (if (if (g$208$15980 g$208$17821) (begin '#f (g$208$15988 g$208$17821 (g$208$16466 'else))) '#f) (g$208$15863 '#f (g$208$16596 (cons g$208$17822 g$208$17823) g$208$17698 g$208$17699)) (g$208$16715 '#f '"invalid syntax" g$208$17697))) g$208$17813) ((lambda (g$208$17827) ((lambda (g$208$17829) (if (if g$208$17829 (begin '#f (apply (lambda (g$208$17831) '#t) g$208$17829)) '#f) (apply (lambda (g$208$17833) (g$208$16715 '#f '"invalid syntax" g$208$17697)) g$208$17829) (g$208$16715 '#f '"invalid syntax" g$208$17827))) ((lambda (g$208$17835) (list g$208$17835)) g$208$17827))) g$208$17811))) ((lambda (g$208$17837) (if (g$208$15966 g$208$17837) (begin '#f ((lambda (g$208$17839) (if g$208$17839 (begin '#f ((lambda (g$208$17841) (if g$208$17841 (begin '#f (append g$208$17839 g$208$17841)) '#f)) ((lambda (g$208$17843) (if (g$208$15966 g$208$17843) (begin '#f ((lambda (g$208$17845) (if g$208$17845 (begin '#f ((lambda (g$208$17847) (if g$208$17847 (begin '#f (append g$208$17845 g$208$17847)) '#f)) ((letrec ((g$208$17849 (lambda (g$208$17851) (if (g$208$15966 g$208$17851) ((lambda (g$208$17853) (if g$208$17853 (begin '#f ((lambda (g$208$17855) (if g$208$17855 (begin '#f (map cons g$208$17853 g$208$17855)) '#f)) (g$208$17849 (g$208$15976 g$208$17851)))) '#f)) ((lambda (g$208$17857) (list g$208$17857)) (g$208$15974 g$208$17851))) (if (g$208$15970 g$208$17851) (list (begin 'x* '())) '#f))))) g$208$17849) (g$208$15976 g$208$17843)))) '#f)) ((lambda (g$208$17859) (list g$208$17859)) (g$208$15974 g$208$17843)))) '#f)) (g$208$15976 g$208$17837)))) '#f)) ((lambda (g$208$17861) (list g$208$17861)) (g$208$15974 g$208$17837)))) '#f)) g$208$17811))) g$208$17795))) ((lambda (g$208$17863) (if (g$208$15966 g$208$17863) (begin '#f ((lambda (g$208$17865) (if g$208$17865 (begin '#f ((lambda (g$208$17867) (if g$208$17867 (begin '#f (append g$208$17865 g$208$17867)) '#f)) ((lambda (g$208$17869) (if (g$208$15966 g$208$17869) (begin '#f ((lambda (g$208$17871) (if g$208$17871 (begin '#f ((lambda (g$208$17873) (if g$208$17873 (begin '#f (append g$208$17871 g$208$17873)) '#f)) ((letrec ((g$208$17875 (lambda (g$208$17877) (if (g$208$15966 g$208$17877) ((lambda (g$208$17879) (if g$208$17879 (begin '#f ((lambda (g$208$17881) (if g$208$17881 (begin '#f (map cons g$208$17879 g$208$17881)) '#f)) (g$208$17875 (g$208$15976 g$208$17877)))) '#f)) ((lambda (g$208$17883) (list g$208$17883)) (g$208$15974 g$208$17877))) (if (g$208$15970 g$208$17877) (list (begin 'e* '())) '#f))))) g$208$17875) (g$208$15976 g$208$17869)))) '#f)) ((lambda (g$208$17885) (list g$208$17885)) (g$208$15974 g$208$17869)))) '#f)) (g$208$15976 g$208$17863)))) '#f)) ((letrec ((g$208$17887 (lambda (g$208$17889) (if (g$208$15966 g$208$17889) ((lambda (g$208$17891) (if g$208$17891 (begin '#f ((lambda (g$208$17893) (if g$208$17893 (begin '#f (map cons g$208$17891 g$208$17893)) '#f)) (g$208$17887 (g$208$15976 g$208$17889)))) '#f)) ((lambda (g$208$17895) (list g$208$17895)) (g$208$15974 g$208$17889))) (if (g$208$15970 g$208$17889) (list (begin 'd* '())) '#f))))) g$208$17887) (g$208$15974 g$208$17863)))) '#f)) g$208$17795))) g$208$17792))) ((lambda (g$208$17707) ((lambda (g$208$17709) (if (if g$208$17709 (begin '#f (apply (lambda (g$208$17711) '#t) g$208$17709)) '#f) (apply (lambda (g$208$17713) (g$208$15863 '#f (list (g$208$16600 g$208$17713 g$208$17698 g$208$17699) (g$208$15864)))) g$208$17709) ((lambda (g$208$17715) ((lambda (g$208$17717) (if (if g$208$17717 (begin '#f (apply (lambda (g$208$17719 g$208$17720 g$208$17721) '#t) g$208$17717)) '#f) (apply (lambda (g$208$17725 g$208$17726 g$208$17727) ((lambda (g$208$17731) (g$208$15862 '#f (list g$208$17731) (list (g$208$16600 g$208$17725 g$208$17698 g$208$17699)) ((letrec ((g$208$17733 (lambda (g$208$17735 g$208$17736) (if (null? g$208$17736) (g$208$17705 g$208$17731 g$208$17735) (g$208$17703 g$208$17731 g$208$17735 (g$208$17733 (car g$208$17736) (cdr g$208$17736))))))) g$208$17733) g$208$17726 g$208$17727))) (g$208$15890 't))) g$208$17717) (g$208$16715 '#f '"invalid syntax" g$208$17715))) ((lambda (g$208$17739) (if (g$208$15966 g$208$17739) (begin '#f ((lambda (g$208$17741) (if g$208$17741 (begin '#f ((lambda (g$208$17743) (if g$208$17743 (begin '#f (append g$208$17741 g$208$17743)) '#f)) ((lambda (g$208$17745) (if (g$208$15966 g$208$17745) (begin '#f ((lambda (g$208$17747) (if g$208$17747 (begin '#f ((lambda (g$208$17749) (if g$208$17749 (begin '#f (append g$208$17747 g$208$17749)) '#f)) ((lambda (g$208$17751) (if (g$208$15966 g$208$17751) (begin '#f ((lambda (g$208$17753) (if g$208$17753 (begin '#f ((lambda (g$208$17755) (if g$208$17755 (begin '#f (append g$208$17753 g$208$17755)) '#f)) ((letrec ((g$208$17757 (lambda (g$208$17759) (if (g$208$15966 g$208$17759) ((lambda (g$208$17761) (if g$208$17761 (begin '#f ((lambda (g$208$17763) (if g$208$17763 (begin '#f (map cons g$208$17761 g$208$17763)) '#f)) (g$208$17757 (g$208$15976 g$208$17759)))) '#f)) ((lambda (g$208$17765) (list g$208$17765)) (g$208$15974 g$208$17759))) (if (g$208$15970 g$208$17759) (list (begin 'cls* '())) '#f))))) g$208$17757) (g$208$15976 g$208$17751)))) '#f)) ((lambda (g$208$17767) (list g$208$17767)) (g$208$15974 g$208$17751)))) '#f)) (g$208$15976 g$208$17745)))) '#f)) ((lambda (g$208$17769) (list g$208$17769)) (g$208$15974 g$208$17745)))) '#f)) (g$208$15976 g$208$17739)))) '#f)) ((lambda (g$208$17771) '()) (g$208$15974 g$208$17739)))) '#f)) g$208$17715))) g$208$17707))) ((lambda (g$208$17773) (if (g$208$15966 g$208$17773) (begin '#f ((lambda (g$208$17775) (if g$208$17775 (begin '#f ((lambda (g$208$17777) (if g$208$17777 (begin '#f (append g$208$17775 g$208$17777)) '#f)) ((lambda (g$208$17779) (if (g$208$15966 g$208$17779) (begin '#f ((lambda (g$208$17781) (if g$208$17781 (begin '#f ((lambda (g$208$17783) (if g$208$17783 (begin '#f (append g$208$17781 g$208$17783)) '#f)) ((lambda (g$208$17785) (if (equal? (g$208$16002 g$208$17785) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17779)))) '#f)) ((lambda (g$208$17787) (list g$208$17787)) (g$208$15974 g$208$17779)))) '#f)) (g$208$15976 g$208$17773)))) '#f)) ((lambda (g$208$17789) '()) (g$208$15974 g$208$17773)))) '#f)) g$208$17707))) g$208$17697))) '#f '#f))) (set! g$208$16498 (lambda (g$208$17963 g$208$17964 g$208$17965) ((lambda (g$208$17969) ((lambda (g$208$17971) (if (if g$208$17971 (begin '#f (apply (lambda (g$208$17973) '#t) g$208$17971)) '#f) (apply (lambda (g$208$17975) (list 'quote (g$208$16002 g$208$17975))) g$208$17971) (g$208$16715 '#f '"invalid syntax" g$208$17969))) ((lambda (g$208$17977) (if (g$208$15966 g$208$17977) (begin '#f ((lambda (g$208$17979) (if g$208$17979 (begin '#f ((lambda (g$208$17981) (if g$208$17981 (begin '#f (append g$208$17979 g$208$17981)) '#f)) ((lambda (g$208$17983) (if (g$208$15966 g$208$17983) (begin '#f ((lambda (g$208$17985) (if g$208$17985 (begin '#f ((lambda (g$208$17987) (if g$208$17987 (begin '#f (append g$208$17985 g$208$17987)) '#f)) ((lambda (g$208$17989) (if (equal? (g$208$16002 g$208$17989) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$17983)))) '#f)) ((lambda (g$208$17991) (list g$208$17991)) (g$208$15974 g$208$17983)))) '#f)) (g$208$15976 g$208$17977)))) '#f)) ((lambda (g$208$17993) '()) (g$208$15974 g$208$17977)))) '#f)) g$208$17969))) g$208$17963))) (set! g$208$16500 (lambda (g$208$17995 g$208$17996 g$208$17997) ((lambda (g$208$18001) ((lambda (g$208$18003) (if (if g$208$18003 (begin '#f (apply (lambda (g$208$18005 g$208$18006 g$208$18007) '#t) g$208$18003)) '#f) (apply (lambda (g$208$18011 g$208$18012 g$208$18013) (call-with-values (lambda () (g$208$16606 g$208$17995 g$208$18011 (map cons g$208$18012 g$208$18013) g$208$17996 g$208$17997)) (lambda (g$208$18019 g$208$18020) ((lambda (g$208$18023 g$208$18024) (g$208$15861 '#f g$208$18024 g$208$18023)) g$208$18020 g$208$18019)))) g$208$18003) (g$208$16715 '#f '"invalid syntax" g$208$18001))) ((lambda (g$208$18027) (if (g$208$15966 g$208$18027) (begin '#f ((lambda (g$208$18029) (if g$208$18029 (begin '#f ((lambda (g$208$18031) (if g$208$18031 (begin '#f (append g$208$18029 g$208$18031)) '#f)) ((letrec ((g$208$18033 (lambda (g$208$18035) (if (g$208$15966 g$208$18035) ((lambda (g$208$18037) (if g$208$18037 (begin '#f ((lambda (g$208$18039) (if g$208$18039 (begin '#f (map cons g$208$18037 g$208$18039)) '#f)) (g$208$18033 (g$208$15976 g$208$18035)))) '#f)) ((lambda (g$208$18041) (if (g$208$15966 g$208$18041) (begin '#f ((lambda (g$208$18043) (if g$208$18043 (begin '#f ((lambda (g$208$18045) (if g$208$18045 (begin '#f (append g$208$18043 g$208$18045)) '#f)) ((lambda (g$208$18047) (if (g$208$15966 g$208$18047) (begin '#f ((lambda (g$208$18049) (if g$208$18049 (begin '#f ((lambda (g$208$18051) (if g$208$18051 (begin '#f (append g$208$18049 g$208$18051)) '#f)) ((letrec ((g$208$18053 (lambda (g$208$18055) (if (g$208$15966 g$208$18055) ((lambda (g$208$18057) (if g$208$18057 (begin '#f ((lambda (g$208$18059) (if g$208$18059 (begin '#f (map cons g$208$18057 g$208$18059)) '#f)) (g$208$18053 (g$208$15976 g$208$18055)))) '#f)) ((lambda (g$208$18061) (list g$208$18061)) (g$208$15974 g$208$18055))) (if (g$208$15970 g$208$18055) (list (begin 'b** '())) '#f))))) g$208$18053) (g$208$15976 g$208$18047)))) '#f)) ((lambda (g$208$18063) (list g$208$18063)) (g$208$15974 g$208$18047)))) '#f)) (g$208$15976 g$208$18041)))) '#f)) ((lambda (g$208$18065) (list g$208$18065)) (g$208$15974 g$208$18041)))) '#f)) (g$208$15974 g$208$18035))) (if (g$208$15970 g$208$18035) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f))))) g$208$18033) (g$208$15976 g$208$18027)))) '#f)) ((lambda (g$208$18067) '()) (g$208$15974 g$208$18027)))) '#f)) g$208$18001))) g$208$17995))) (set! g$208$16502 (lambda (g$208$18069 g$208$18070 g$208$18071) ((lambda (g$208$18075) ((lambda (g$208$18077) (if (if g$208$18077 (begin '#f (apply (lambda (g$208$18079 g$208$18080 g$208$18081) '#t) g$208$18077)) '#f) (apply (lambda (g$208$18085 g$208$18086 g$208$18087) (call-with-values (lambda () (g$208$16604 g$208$18069 g$208$18085 (cons g$208$18086 g$208$18087) g$208$18070 g$208$18071)) (lambda (g$208$18093 g$208$18094) ((lambda (g$208$18097 g$208$18098) (g$208$15860 '#f g$208$18098 g$208$18097)) g$208$18094 g$208$18093)))) g$208$18077) (g$208$16715 '#f '"invalid syntax" g$208$18075))) ((lambda (g$208$18101) (if (g$208$15966 g$208$18101) (begin '#f ((lambda (g$208$18103) (if g$208$18103 (begin '#f ((lambda (g$208$18105) (if g$208$18105 (begin '#f (append g$208$18103 g$208$18105)) '#f)) ((lambda (g$208$18107) (if (g$208$15966 g$208$18107) (begin '#f ((lambda (g$208$18109) (if g$208$18109 (begin '#f ((lambda (g$208$18111) (if g$208$18111 (begin '#f (append g$208$18109 g$208$18111)) '#f)) ((lambda (g$208$18113) (if (g$208$15966 g$208$18113) (begin '#f ((lambda (g$208$18115) (if g$208$18115 (begin '#f ((lambda (g$208$18117) (if g$208$18117 (begin '#f (append g$208$18115 g$208$18117)) '#f)) ((letrec ((g$208$18119 (lambda (g$208$18121) (if (g$208$15966 g$208$18121) ((lambda (g$208$18123) (if g$208$18123 (begin '#f ((lambda (g$208$18125) (if g$208$18125 (begin '#f (map cons g$208$18123 g$208$18125)) '#f)) (g$208$18119 (g$208$15976 g$208$18121)))) '#f)) ((lambda (g$208$18127) (list g$208$18127)) (g$208$15974 g$208$18121))) (if (g$208$15970 g$208$18121) (list (begin 'b* '())) '#f))))) g$208$18119) (g$208$15976 g$208$18113)))) '#f)) ((lambda (g$208$18129) (list g$208$18129)) (g$208$15974 g$208$18113)))) '#f)) (g$208$15976 g$208$18107)))) '#f)) ((lambda (g$208$18131) (list g$208$18131)) (g$208$15974 g$208$18107)))) '#f)) (g$208$15976 g$208$18101)))) '#f)) ((lambda (g$208$18133) '()) (g$208$15974 g$208$18101)))) '#f)) g$208$18075))) g$208$18069))) (set! g$208$16504 (lambda (g$208$18135) (g$208$15956 ((letrec ((g$208$18137 (lambda (g$208$18139) (if (g$208$15932 g$208$18139) g$208$18139 (if (pair? g$208$18139) (cons (g$208$18137 (car g$208$18139)) (g$208$18137 (cdr g$208$18139))) (if (symbol? g$208$18139) (g$208$16466 g$208$18139) (if (vector? g$208$18139) (list->vector (map g$208$18137 (vector->list g$208$18139))) g$208$18139))))))) g$208$18137) g$208$18135) '() '()))) (set! g$208$16506 (lambda (g$208$18141) ((lambda (g$208$18143) ((lambda (g$208$18145) (if (if g$208$18145 (begin '#f (apply (lambda (g$208$18147 g$208$18148 g$208$18149 g$208$18150) '#t) g$208$18145)) '#f) (apply (lambda (g$208$18155 g$208$18156 g$208$18157 g$208$18158) (g$208$16504 (list 'syntax-case (cons 'list g$208$18156) '() (list g$208$18155 (cons 'begin (cons g$208$18157 g$208$18158)))))) g$208$18145) (g$208$16715 '#f '"invalid syntax" g$208$18143))) ((lambda (g$208$18163) (if (g$208$15966 g$208$18163) (begin '#f ((lambda (g$208$18165) (if g$208$18165 (begin '#f ((lambda (g$208$18167) (if g$208$18167 (begin '#f (append g$208$18165 g$208$18167)) '#f)) ((lambda (g$208$18169) (if (g$208$15966 g$208$18169) (begin '#f ((lambda (g$208$18171) (if g$208$18171 (begin '#f ((lambda (g$208$18173) (if g$208$18173 (begin '#f (append g$208$18171 g$208$18173)) '#f)) ((lambda (g$208$18175) (if (g$208$15966 g$208$18175) (begin '#f ((lambda (g$208$18177) (if g$208$18177 (begin '#f ((lambda (g$208$18179) (if g$208$18179 (begin '#f (append g$208$18177 g$208$18179)) '#f)) ((letrec ((g$208$18181 (lambda (g$208$18183) (if (g$208$15966 g$208$18183) ((lambda (g$208$18185) (if g$208$18185 (begin '#f ((lambda (g$208$18187) (if g$208$18187 (begin '#f (map cons g$208$18185 g$208$18187)) '#f)) (g$208$18181 (g$208$15976 g$208$18183)))) '#f)) ((lambda (g$208$18189) (list g$208$18189)) (g$208$15974 g$208$18183))) (if (g$208$15970 g$208$18183) (list (begin 'b* '())) '#f))))) g$208$18181) (g$208$15976 g$208$18175)))) '#f)) ((lambda (g$208$18191) (list g$208$18191)) (g$208$15974 g$208$18175)))) '#f)) (g$208$15976 g$208$18169)))) '#f)) ((letrec ((g$208$18193 (lambda (g$208$18195) (if (g$208$15966 g$208$18195) ((lambda (g$208$18197) (if g$208$18197 (begin '#f ((lambda (g$208$18199) (if g$208$18199 (begin '#f (map cons g$208$18197 g$208$18199)) '#f)) (g$208$18193 (g$208$15976 g$208$18195)))) '#f)) ((lambda (g$208$18201) (if (g$208$15966 g$208$18201) (begin '#f ((lambda (g$208$18203) (if g$208$18203 (begin '#f ((lambda (g$208$18205) (if g$208$18205 (begin '#f (append g$208$18203 g$208$18205)) '#f)) ((lambda (g$208$18207) (if (g$208$15966 g$208$18207) (begin '#f ((lambda (g$208$18209) (if g$208$18209 (begin '#f ((lambda (g$208$18211) (if g$208$18211 (begin '#f (append g$208$18209 g$208$18211)) '#f)) ((lambda (g$208$18213) (if (equal? (g$208$16002 g$208$18213) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$18207)))) '#f)) ((lambda (g$208$18215) (list g$208$18215)) (g$208$15974 g$208$18207)))) '#f)) (g$208$15976 g$208$18201)))) '#f)) ((lambda (g$208$18217) (list g$208$18217)) (g$208$15974 g$208$18201)))) '#f)) (g$208$15974 g$208$18195))) (if (g$208$15970 g$208$18195) (list (begin 'fml* '()) (begin 'expr* '())) '#f))))) g$208$18193) (g$208$15974 g$208$18169)))) '#f)) (g$208$15976 g$208$18163)))) '#f)) ((lambda (g$208$18219) '()) (g$208$15974 g$208$18163)))) '#f)) g$208$18143))) g$208$18141))) (set! g$208$16508 (lambda (g$208$18221 g$208$18222) ((lambda (g$208$18225) ((lambda (g$208$18227) (if (if g$208$18227 (begin '#f (apply (lambda (g$208$18229 g$208$18230) '#t) g$208$18227)) '#f) (apply (lambda (g$208$18233 g$208$18234) ((letrec ((g$208$18237 (lambda (g$208$18239) (if (null? g$208$18239) (values) (if (not (g$208$15980 (car g$208$18239))) (g$208$16715 '#f '"not an identifier" g$208$18221 (car g$208$18239)) (begin (g$208$18237 (cdr g$208$18239)) (if (g$208$15994 (car g$208$18239) (cdr g$208$18239)) (g$208$16715 '#f '"duplicate binding" g$208$18221 (car g$208$18239)) (void)))))))) g$208$18237) (if (g$208$15980 g$208$18234) (cons g$208$18234 g$208$18233) (if (g$208$15970 g$208$18234) g$208$18233 (g$208$16715 '#f '"not an identifier" g$208$18221 g$208$18234))))) g$208$18227) ((lambda (g$208$18241) ((lambda (g$208$18243) (if (if g$208$18243 (begin '#f (apply (lambda () '#t) g$208$18243)) '#f) (apply (lambda () (g$208$16715 '#f '"malformed binding form" g$208$18221 g$208$18222)) g$208$18243) (g$208$16715 '#f '"invalid syntax" g$208$18241))) ((lambda (g$208$18245) '()) g$208$18241))) g$208$18225))) ((letrec ((g$208$18247 (lambda (g$208$18253) (if (g$208$15966 g$208$18253) ((lambda (g$208$18255) (if g$208$18255 (begin '#f ((lambda (g$208$18257) (if g$208$18257 (begin '#f (cons (map cons g$208$18255 (car g$208$18257)) (cdr g$208$18257))) '#f)) (g$208$18247 (g$208$15976 g$208$18253)))) '#f)) ((lambda (g$208$18259) (list g$208$18259)) (g$208$15974 g$208$18253))) ((lambda (g$208$18261) (if g$208$18261 (begin '#f (cons (list (begin 'id* '())) g$208$18261)) '#f)) ((lambda (g$208$18263) (list g$208$18263)) g$208$18253)))))) (lambda (g$208$18249) ((lambda (g$208$18251) (if g$208$18251 (begin '#f (append (car g$208$18251) (cdr g$208$18251))) '#f)) (g$208$18247 g$208$18249)))) g$208$18225))) g$208$18222))) (set! g$208$16510 (lambda (g$208$18265) ((lambda (g$208$18267) ((lambda (g$208$18269) (if (if g$208$18269 (begin '#f (apply (lambda (g$208$18271 g$208$18272 g$208$18273 g$208$18274) '#t) g$208$18269)) '#f) (apply (lambda (g$208$18279 g$208$18280 g$208$18281 g$208$18282) (if (g$208$15990 g$208$18279) (g$208$16504 (cons (cons 'lambda (cons g$208$18279 (cons g$208$18281 g$208$18282))) g$208$18280)) (g$208$16508 g$208$18265 g$208$18279))) g$208$18269) ((lambda (g$208$18287) ((lambda (g$208$18289) (if (if g$208$18289 (begin '#f (apply (lambda (g$208$18291 g$208$18292 g$208$18293 g$208$18294 g$208$18295) (g$208$15980 g$208$18291)) g$208$18289)) '#f) (apply (lambda (g$208$18301 g$208$18302 g$208$18303 g$208$18304 g$208$18305) (if (g$208$15990 g$208$18302) (g$208$16504 (cons (list 'letrec (list (list g$208$18301 (cons 'lambda (cons g$208$18302 (cons g$208$18304 g$208$18305))))) g$208$18301) g$208$18303)) (g$208$16508 g$208$18265 g$208$18302))) g$208$18289) (g$208$16715 '#f '"invalid syntax" g$208$18287))) ((lambda (g$208$18311) (if (g$208$15966 g$208$18311) (begin '#f ((lambda (g$208$18313) (if g$208$18313 (begin '#f ((lambda (g$208$18315) (if g$208$18315 (begin '#f (append g$208$18313 g$208$18315)) '#f)) ((lambda (g$208$18317) (if (g$208$15966 g$208$18317) (begin '#f ((lambda (g$208$18319) (if g$208$18319 (begin '#f ((lambda (g$208$18321) (if g$208$18321 (begin '#f (append g$208$18319 g$208$18321)) '#f)) ((lambda (g$208$18323) (if (g$208$15966 g$208$18323) (begin '#f ((lambda (g$208$18325) (if g$208$18325 (begin '#f ((lambda (g$208$18327) (if g$208$18327 (begin '#f (append g$208$18325 g$208$18327)) '#f)) ((lambda (g$208$18329) (if (g$208$15966 g$208$18329) (begin '#f ((lambda (g$208$18331) (if g$208$18331 (begin '#f ((lambda (g$208$18333) (if g$208$18333 (begin '#f (append g$208$18331 g$208$18333)) '#f)) ((letrec ((g$208$18335 (lambda (g$208$18337) (if (g$208$15966 g$208$18337) ((lambda (g$208$18339) (if g$208$18339 (begin '#f ((lambda (g$208$18341) (if g$208$18341 (begin '#f (map cons g$208$18339 g$208$18341)) '#f)) (g$208$18335 (g$208$15976 g$208$18337)))) '#f)) ((lambda (g$208$18343) (list g$208$18343)) (g$208$15974 g$208$18337))) (if (g$208$15970 g$208$18337) (list (begin 'b* '())) '#f))))) g$208$18335) (g$208$15976 g$208$18329)))) '#f)) ((lambda (g$208$18345) (list g$208$18345)) (g$208$15974 g$208$18329)))) '#f)) (g$208$15976 g$208$18323)))) '#f)) ((letrec ((g$208$18347 (lambda (g$208$18349) (if (g$208$15966 g$208$18349) ((lambda (g$208$18351) (if g$208$18351 (begin '#f ((lambda (g$208$18353) (if g$208$18353 (begin '#f (map cons g$208$18351 g$208$18353)) '#f)) (g$208$18347 (g$208$15976 g$208$18349)))) '#f)) ((lambda (g$208$18355) (if (g$208$15966 g$208$18355) (begin '#f ((lambda (g$208$18357) (if g$208$18357 (begin '#f ((lambda (g$208$18359) (if g$208$18359 (begin '#f (append g$208$18357 g$208$18359)) '#f)) ((lambda (g$208$18361) (if (g$208$15966 g$208$18361) (begin '#f ((lambda (g$208$18363) (if g$208$18363 (begin '#f ((lambda (g$208$18365) (if g$208$18365 (begin '#f (append g$208$18363 g$208$18365)) '#f)) ((lambda (g$208$18367) (if (equal? (g$208$16002 g$208$18367) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$18361)))) '#f)) ((lambda (g$208$18369) (list g$208$18369)) (g$208$15974 g$208$18361)))) '#f)) (g$208$15976 g$208$18355)))) '#f)) ((lambda (g$208$18371) (list g$208$18371)) (g$208$15974 g$208$18355)))) '#f)) (g$208$15974 g$208$18349))) (if (g$208$15970 g$208$18349) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$208$18347) (g$208$15974 g$208$18323)))) '#f)) (g$208$15976 g$208$18317)))) '#f)) ((lambda (g$208$18373) (list g$208$18373)) (g$208$15974 g$208$18317)))) '#f)) (g$208$15976 g$208$18311)))) '#f)) ((lambda (g$208$18375) '()) (g$208$15974 g$208$18311)))) '#f)) g$208$18287))) g$208$18267))) ((lambda (g$208$18377) (if (g$208$15966 g$208$18377) (begin '#f ((lambda (g$208$18379) (if g$208$18379 (begin '#f ((lambda (g$208$18381) (if g$208$18381 (begin '#f (append g$208$18379 g$208$18381)) '#f)) ((lambda (g$208$18383) (if (g$208$15966 g$208$18383) (begin '#f ((lambda (g$208$18385) (if g$208$18385 (begin '#f ((lambda (g$208$18387) (if g$208$18387 (begin '#f (append g$208$18385 g$208$18387)) '#f)) ((lambda (g$208$18389) (if (g$208$15966 g$208$18389) (begin '#f ((lambda (g$208$18391) (if g$208$18391 (begin '#f ((lambda (g$208$18393) (if g$208$18393 (begin '#f (append g$208$18391 g$208$18393)) '#f)) ((letrec ((g$208$18395 (lambda (g$208$18397) (if (g$208$15966 g$208$18397) ((lambda (g$208$18399) (if g$208$18399 (begin '#f ((lambda (g$208$18401) (if g$208$18401 (begin '#f (map cons g$208$18399 g$208$18401)) '#f)) (g$208$18395 (g$208$15976 g$208$18397)))) '#f)) ((lambda (g$208$18403) (list g$208$18403)) (g$208$15974 g$208$18397))) (if (g$208$15970 g$208$18397) (list (begin 'b* '())) '#f))))) g$208$18395) (g$208$15976 g$208$18389)))) '#f)) ((lambda (g$208$18405) (list g$208$18405)) (g$208$15974 g$208$18389)))) '#f)) (g$208$15976 g$208$18383)))) '#f)) ((letrec ((g$208$18407 (lambda (g$208$18409) (if (g$208$15966 g$208$18409) ((lambda (g$208$18411) (if g$208$18411 (begin '#f ((lambda (g$208$18413) (if g$208$18413 (begin '#f (map cons g$208$18411 g$208$18413)) '#f)) (g$208$18407 (g$208$15976 g$208$18409)))) '#f)) ((lambda (g$208$18415) (if (g$208$15966 g$208$18415) (begin '#f ((lambda (g$208$18417) (if g$208$18417 (begin '#f ((lambda (g$208$18419) (if g$208$18419 (begin '#f (append g$208$18417 g$208$18419)) '#f)) ((lambda (g$208$18421) (if (g$208$15966 g$208$18421) (begin '#f ((lambda (g$208$18423) (if g$208$18423 (begin '#f ((lambda (g$208$18425) (if g$208$18425 (begin '#f (append g$208$18423 g$208$18425)) '#f)) ((lambda (g$208$18427) (if (equal? (g$208$16002 g$208$18427) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$18421)))) '#f)) ((lambda (g$208$18429) (list g$208$18429)) (g$208$15974 g$208$18421)))) '#f)) (g$208$15976 g$208$18415)))) '#f)) ((lambda (g$208$18431) (list g$208$18431)) (g$208$15974 g$208$18415)))) '#f)) (g$208$15974 g$208$18409))) (if (g$208$15970 g$208$18409) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$208$18407) (g$208$15974 g$208$18383)))) '#f)) (g$208$15976 g$208$18377)))) '#f)) ((lambda (g$208$18433) '()) (g$208$15974 g$208$18377)))) '#f)) g$208$18267))) g$208$18265))) (set! g$208$16512 (lambda (g$208$18435) ((lambda (g$208$18437 g$208$18439) (begin (set! g$208$18437 (lambda (g$208$18678 g$208$18679 g$208$18680) (begin (if (g$208$15980 g$208$18678) (void) (g$208$16715 '#f '"not an indentifier" g$208$18435 g$208$18678)) (if (g$208$15994 g$208$18678 g$208$18679) (g$208$16715 '#f '"duplicate binding" g$208$18435 g$208$18678) (void)) ((lambda (g$208$18684) (values g$208$18684 (cons g$208$18678 g$208$18679) (cons g$208$18684 g$208$18680))) (gensym (g$208$16721 g$208$18678)))))) (set! g$208$18439 (lambda (g$208$18660 g$208$18661 g$208$18662) (if (null? g$208$18660) (values '() g$208$18661 g$208$18662) (call-with-values (lambda () (g$208$18437 (car g$208$18660) g$208$18661 g$208$18662)) (lambda (g$208$18666 g$208$18667 g$208$18668) (call-with-values (lambda () (g$208$18439 (cdr g$208$18660) g$208$18667 g$208$18668)) (lambda (g$208$18672 g$208$18673 g$208$18674) (values (cons g$208$18666 g$208$18672) g$208$18673 g$208$18674)))))))) ((lambda (g$208$18441) ((lambda (g$208$18443) (if (if g$208$18443 (begin '#f (apply (lambda (g$208$18445 g$208$18446) '#t) g$208$18443)) '#f) (apply (lambda (g$208$18449 g$208$18450) (cons* (g$208$16504 'let) '() g$208$18449 g$208$18450)) g$208$18443) ((lambda (g$208$18453) ((lambda (g$208$18455) (if (if g$208$18455 (begin '#f (apply (lambda (g$208$18457 g$208$18458 g$208$18459 g$208$18460) '#t) g$208$18455)) '#f) (apply (lambda (g$208$18465 g$208$18466 g$208$18467 g$208$18468) (g$208$16504 ((letrec ((g$208$18473 (lambda (g$208$18475 g$208$18476 g$208$18477 g$208$18478) (if (null? g$208$18475) (cons 'let (cons (map list g$208$18477 g$208$18478) (cons g$208$18467 g$208$18468))) ((lambda (g$208$18483) ((lambda (g$208$18485) (if (if g$208$18485 (begin '#f (apply (lambda (g$208$18487) '#t) g$208$18485)) '#f) (apply (lambda (g$208$18489) (call-with-values (lambda () (g$208$18439 g$208$18489 g$208$18477 g$208$18478)) (lambda (g$208$18494 g$208$18495 g$208$18496) ((lambda (g$208$18500 g$208$18501 g$208$18502) (list 'call-with-values (list 'lambda '() (car g$208$18476)) (list 'lambda g$208$18502 (g$208$18473 (cdr g$208$18475) (cdr g$208$18476) g$208$18501 g$208$18500)))) g$208$18496 g$208$18495 g$208$18494)))) g$208$18485) ((lambda (g$208$18506) ((lambda (g$208$18508) (if (if g$208$18508 (begin '#f (apply (lambda (g$208$18510 g$208$18511) '#t) g$208$18508)) '#f) (apply (lambda (g$208$18514 g$208$18515) (call-with-values (lambda () (g$208$18437 g$208$18515 g$208$18477 g$208$18478)) (lambda (g$208$18518 g$208$18519 g$208$18520) (call-with-values (lambda () (g$208$18439 g$208$18514 g$208$18519 g$208$18520)) (lambda (g$208$18524 g$208$18525 g$208$18526) (list 'call-with-values (list 'lambda '() (car g$208$18476)) (list 'lambda (append g$208$18524 g$208$18518) (g$208$18473 (cdr g$208$18475) (cdr g$208$18476) g$208$18525 g$208$18526)))))))) g$208$18508) ((lambda (g$208$18530) ((lambda (g$208$18532) (if (if g$208$18532 (begin '#f (apply (lambda (g$208$18534) '#t) g$208$18532)) '#f) (apply (lambda (g$208$18536) (g$208$16715 '#f '"malformed bindings" g$208$18435 g$208$18536)) g$208$18532) (g$208$16715 '#f '"invalid syntax" g$208$18530))) ((lambda (g$208$18538) (list g$208$18538)) g$208$18530))) g$208$18506))) ((letrec ((g$208$18540 (lambda (g$208$18546) (if (g$208$15966 g$208$18546) ((lambda (g$208$18548) (if g$208$18548 (begin '#f ((lambda (g$208$18550) (if g$208$18550 (begin '#f (cons (map cons g$208$18548 (car g$208$18550)) (cdr g$208$18550))) '#f)) (g$208$18540 (g$208$15976 g$208$18546)))) '#f)) ((lambda (g$208$18552) (list g$208$18552)) (g$208$15974 g$208$18546))) ((lambda (g$208$18554) (if g$208$18554 (begin '#f (cons (list (begin 'x* '())) g$208$18554)) '#f)) ((lambda (g$208$18556) (list g$208$18556)) g$208$18546)))))) (lambda (g$208$18542) ((lambda (g$208$18544) (if g$208$18544 (begin '#f (append (car g$208$18544) (cdr g$208$18544))) '#f)) (g$208$18540 g$208$18542)))) g$208$18506))) g$208$18483))) ((letrec ((g$208$18558 (lambda (g$208$18560) (if (g$208$15966 g$208$18560) ((lambda (g$208$18562) (if g$208$18562 (begin '#f ((lambda (g$208$18564) (if g$208$18564 (begin '#f (map cons g$208$18562 g$208$18564)) '#f)) (g$208$18558 (g$208$15976 g$208$18560)))) '#f)) ((lambda (g$208$18566) (list g$208$18566)) (g$208$15974 g$208$18560))) (if (g$208$15970 g$208$18560) (list (begin 'x* '())) '#f))))) g$208$18558) g$208$18483))) (car g$208$18475)))))) g$208$18473) g$208$18465 g$208$18466 '() '()))) g$208$18455) (g$208$16715 '#f '"invalid syntax" g$208$18453))) ((lambda (g$208$18568) (if (g$208$15966 g$208$18568) (begin '#f ((lambda (g$208$18570) (if g$208$18570 (begin '#f ((lambda (g$208$18572) (if g$208$18572 (begin '#f (append g$208$18570 g$208$18572)) '#f)) ((lambda (g$208$18574) (if (g$208$15966 g$208$18574) (begin '#f ((lambda (g$208$18576) (if g$208$18576 (begin '#f ((lambda (g$208$18578) (if g$208$18578 (begin '#f (append g$208$18576 g$208$18578)) '#f)) ((lambda (g$208$18580) (if (g$208$15966 g$208$18580) (begin '#f ((lambda (g$208$18582) (if g$208$18582 (begin '#f ((lambda (g$208$18584) (if g$208$18584 (begin '#f (append g$208$18582 g$208$18584)) '#f)) ((letrec ((g$208$18586 (lambda (g$208$18588) (if (g$208$15966 g$208$18588) ((lambda (g$208$18590) (if g$208$18590 (begin '#f ((lambda (g$208$18592) (if g$208$18592 (begin '#f (map cons g$208$18590 g$208$18592)) '#f)) (g$208$18586 (g$208$15976 g$208$18588)))) '#f)) ((lambda (g$208$18594) (list g$208$18594)) (g$208$15974 g$208$18588))) (if (g$208$15970 g$208$18588) (list (begin 'b* '())) '#f))))) g$208$18586) (g$208$15976 g$208$18580)))) '#f)) ((lambda (g$208$18596) (list g$208$18596)) (g$208$15974 g$208$18580)))) '#f)) (g$208$15976 g$208$18574)))) '#f)) ((letrec ((g$208$18598 (lambda (g$208$18600) (if (g$208$15966 g$208$18600) ((lambda (g$208$18602) (if g$208$18602 (begin '#f ((lambda (g$208$18604) (if g$208$18604 (begin '#f (map cons g$208$18602 g$208$18604)) '#f)) (g$208$18598 (g$208$15976 g$208$18600)))) '#f)) ((lambda (g$208$18606) (if (g$208$15966 g$208$18606) (begin '#f ((lambda (g$208$18608) (if g$208$18608 (begin '#f ((lambda (g$208$18610) (if g$208$18610 (begin '#f (append g$208$18608 g$208$18610)) '#f)) ((lambda (g$208$18612) (if (g$208$15966 g$208$18612) (begin '#f ((lambda (g$208$18614) (if g$208$18614 (begin '#f ((lambda (g$208$18616) (if g$208$18616 (begin '#f (append g$208$18614 g$208$18616)) '#f)) ((lambda (g$208$18618) (if (equal? (g$208$16002 g$208$18618) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$18612)))) '#f)) ((lambda (g$208$18620) (list g$208$18620)) (g$208$15974 g$208$18612)))) '#f)) (g$208$15976 g$208$18606)))) '#f)) ((lambda (g$208$18622) (list g$208$18622)) (g$208$15974 g$208$18606)))) '#f)) (g$208$15974 g$208$18600))) (if (g$208$15970 g$208$18600) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$208$18598) (g$208$15974 g$208$18574)))) '#f)) (g$208$15976 g$208$18568)))) '#f)) ((lambda (g$208$18624) '()) (g$208$15974 g$208$18568)))) '#f)) g$208$18453))) g$208$18441))) ((lambda (g$208$18626) (if (g$208$15966 g$208$18626) (begin '#f ((lambda (g$208$18628) (if g$208$18628 (begin '#f ((lambda (g$208$18630) (if g$208$18630 (begin '#f (append g$208$18628 g$208$18630)) '#f)) ((lambda (g$208$18632) (if (g$208$15966 g$208$18632) (begin '#f ((lambda (g$208$18634) (if g$208$18634 (begin '#f ((lambda (g$208$18636) (if g$208$18636 (begin '#f (append g$208$18634 g$208$18636)) '#f)) ((lambda (g$208$18638) (if (g$208$15966 g$208$18638) (begin '#f ((lambda (g$208$18640) (if g$208$18640 (begin '#f ((lambda (g$208$18642) (if g$208$18642 (begin '#f (append g$208$18640 g$208$18642)) '#f)) ((letrec ((g$208$18644 (lambda (g$208$18646) (if (g$208$15966 g$208$18646) ((lambda (g$208$18648) (if g$208$18648 (begin '#f ((lambda (g$208$18650) (if g$208$18650 (begin '#f (map cons g$208$18648 g$208$18650)) '#f)) (g$208$18644 (g$208$15976 g$208$18646)))) '#f)) ((lambda (g$208$18652) (list g$208$18652)) (g$208$15974 g$208$18646))) (if (g$208$15970 g$208$18646) (list (begin 'b* '())) '#f))))) g$208$18644) (g$208$15976 g$208$18638)))) '#f)) ((lambda (g$208$18654) (list g$208$18654)) (g$208$15974 g$208$18638)))) '#f)) (g$208$15976 g$208$18632)))) '#f)) ((lambda (g$208$18656) (if (equal? (g$208$16002 g$208$18656) '()) (begin '#f '()) '#f)) (g$208$15974 g$208$18632)))) '#f)) (g$208$15976 g$208$18626)))) '#f)) ((lambda (g$208$18658) '()) (g$208$15974 g$208$18626)))) '#f)) g$208$18441))) g$208$18435))) '#f '#f))) (set! g$208$16514 (lambda (g$208$18686) ((lambda (g$208$18688) (begin (set! g$208$18688 (lambda (g$208$18878) (if (null? g$208$18878) (void) ((lambda (g$208$18880) (begin (if (g$208$15980 g$208$18880) (void) (g$208$16715 '#f '"not an identifier" g$208$18686 g$208$18880)) (g$208$18688 (cdr g$208$18878)) (if (g$208$15994 g$208$18880 (cdr g$208$18878)) (g$208$16715 '#f '"duplicate identifier" g$208$18686 g$208$18880) (void)))) (car g$208$18878))))) ((lambda (g$208$18690) ((lambda (g$208$18692) (if (if g$208$18692 (begin '#f (apply (lambda (g$208$18694 g$208$18695) '#t) g$208$18692)) '#f) (apply (lambda (g$208$18698 g$208$18699) (cons* (g$208$16504 'let) '() g$208$18698 g$208$18699)) g$208$18692) ((lambda (g$208$18702) ((lambda (g$208$18704) (if (if g$208$18704 (begin '#f (apply (lambda (g$208$18706 g$208$18707 g$208$18708 g$208$18709) '#t) g$208$18704)) '#f) (apply (lambda (g$208$18714 g$208$18715 g$208$18716 g$208$18717) (g$208$16504 ((letrec ((g$208$18722 (lambda (g$208$18724 g$208$18725) (if (null? g$208$18724) (cons 'begin (cons g$208$18716 g$208$18717)) ((lambda (g$208$18728) ((lambda (g$208$18730) (if (if g$208$18730 (begin '#f (apply (lambda (g$208$18732) '#t) g$208$18730)) '#f) (apply (lambda (g$208$18734) (begin (g$208$18688 g$208$18734) (list 'call-with-values (list 'lambda '() (car g$208$18725)) (list 'lambda g$208$18734 (g$208$18722 (cdr g$208$18724) (cdr g$208$18725)))))) g$208$18730) ((lambda (g$208$18736) ((lambda (g$208$18738) (if (if g$208$18738 (begin '#f (apply (lambda (g$208$18740 g$208$18741) '#t) g$208$18738)) '#f) (apply (lambda (g$208$18744 g$208$18745) (begin (g$208$18688 (cons g$208$18745 g$208$18744)) (list 'call-with-values (list 'lambda '() (car g$208$18725)) (list 'lambda (append g$208$18744 g$208$18745) (g$208$18722 (cdr g$208$18724) (cdr g$208$18725)))))) g$208$18738) ((lambda (g$208$18748) ((lambda (g$208$18750) (if (if g$208$18750 (begin '#f (apply (lambda (g$208$18752) '#t) g$208$18750)) '#f) (apply (lambda (g$208$18754) (g$208$16715 '#f '"malformed bindings" g$208$18686 g$208$18754)) g$208$18750) (g$208$16715 '#f '"invalid syntax" g$208$18748))) ((lambda (g$208$18756) (list g$208$18756)) g$208$18748))) g$208$18736))) ((letrec ((g$208$18758 (lambda (g$208$18764) (if (g$208$15966 g$208$18764) ((lambda (g$208$18766) (if g$208$18766 (begin '#f ((lambda (g$208$18768) (if g$208$18768 (begin '#f (cons (map cons g$208$18766 (car g$208$18768)) (cdr g$208$18768))) '#f)) (g$208$18758 (g$208$15976 g$208$18764)))) '#f)) ((lambda (g$208$18770) (list g$208$18770)) (g$208$15974 g$208$18764))) ((lambda (g$208$18772) (if g$208$18772 (begin '#f (cons (list (begin 'x* '())) g$208$18772)) '#f)) ((lambda (g$208$18774) (list g$208$18774)) g$208$18764)))))) (lambda (g$208$18760) ((lambda (g$208$18762) (if g$208$18762 (begin '#f (append (car g$208$18762) (cdr g$208$18762))) '#f)) (g$208$18758 g$208$18760)))) g$208$18736))) g$208$18728))) ((letrec ((g$208$18776 (lambda (g$208$18778) (if (g$208$15966 g$208$18778) ((lambda (g$208$18780) (if g$208$18780 (begin '#f ((lambda (g$208$18782) (if g$208$18782 (begin '#f (map cons g$208$18780 g$208$18782)) '#f)) (g$208$18776 (g$208$15976 g$208$18778)))) '#f)) ((lambda (g$208$18784) (list g$208$18784)) (g$208$15974 g$208$18778))) (if (g$208$15970 g$208$18778) (list (begin 'x* '())) '#f))))) g$208$18776) g$208$18728))) (car g$208$18724)))))) g$208$18722) g$208$18714 g$208$18715))) g$208$18704) (g$208$16715 '#f '"invalid syntax" g$208$18702))) ((lambda (g$208$18786) (if (g$208$15966 g$208$18786) (begin '#f ((lambda (g$208$18788) (if g$208$18788 (begin '#f ((lambda (g$208$18790) (if g$208$18790 (begin '#f (append g$208$18788 g$208$18790)) '#f)) ((lambda (g$208$18792) (if (g$208$15966 g$208$18792) (begin '#f ((lambda (g$208$18794) (if g$208$18794 (begin '#f ((lambda (g$208$18796) (if g$208$18796 (begin '#f (append g$208$18794 g$208$18796)) '#f)) ((lambda (g$208$18798) (if (g$208$15966 g$208$18798) (begin '#f ((lambda (g$208$18800) (if g$208$18800 (begin '#f ((lambda (g$208$18802) (if g$208$18802 (begin '#f (append g$208$18800 g$208$18802)) '#f)) ((letrec ((g$208$18804 (lambda (g$208$18806) (if (g$208$15966 g$208$18806) ((lambda (g$208$18808) (if g$208$18808 (begin '#f ((lambda (g$208$18810) (if g$208$18810 (begin '#f (map cons g$208$18808 g$208$18810)) '#f)) (g$208$18804 (g$208$15976 g$208$18806)))) '#f)) ((lambda (g$208$18812) (list g$208$18812)) (g$208$15974 g$208$18806))) (if (g$208$15970 g$208$18806) (list (begin 'b* '())) '#f))))) g$208$18804) (g$208$15976 g$208$18798)))) '#f)) ((lambda (g$208$18814) (list g$208$18814)) (g$208$15974 g$208$18798)))) '#f)) (g$208$15976 g$208$18792)))) '#f)) ((letrec ((g$208$18816 (lambda (g$208$18818) (if (g$208$15966 g$208$18818) ((lambda (g$208$18820) (if g$208$18820 (begin '#f ((lambda (g$208$18822) (if g$208$18822 (begin '#f (map cons g$208$18820 g$208$18822)) '#f)) (g$208$18816 (g$208$15976 g$208$18818)))) '#f)) ((lambda (g$208$18824) (if (g$208$15966 g$208$18824) (begin '#f ((lambda (g$208$18826) (if g$208$18826 (begin '#f ((lambda (g$208$18828) (if g$208$18828 (begin '#f (append g$208$18826 g$208$18828)) '#f)) ((lambda (g$208$18830) (if (g$208$15966 g$208$18830) (begin '#f ((lambda (g$208$18832) (if g$208$18832 (begin '#f ((lambda (g$208$18834) (if g$208$18834 (begin '#f (append g$208$18832 g$208$18834)) '#f)) ((lambda (g$208$18836) (if (equal? (g$208$16002 g$208$18836) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$18830)))) '#f)) ((lambda (g$208$18838) (list g$208$18838)) (g$208$15974 g$208$18830)))) '#f)) (g$208$15976 g$208$18824)))) '#f)) ((lambda (g$208$18840) (list g$208$18840)) (g$208$15974 g$208$18824)))) '#f)) (g$208$15974 g$208$18818))) (if (g$208$15970 g$208$18818) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$208$18816) (g$208$15974 g$208$18792)))) '#f)) (g$208$15976 g$208$18786)))) '#f)) ((lambda (g$208$18842) '()) (g$208$15974 g$208$18786)))) '#f)) g$208$18702))) g$208$18690))) ((lambda (g$208$18844) (if (g$208$15966 g$208$18844) (begin '#f ((lambda (g$208$18846) (if g$208$18846 (begin '#f ((lambda (g$208$18848) (if g$208$18848 (begin '#f (append g$208$18846 g$208$18848)) '#f)) ((lambda (g$208$18850) (if (g$208$15966 g$208$18850) (begin '#f ((lambda (g$208$18852) (if g$208$18852 (begin '#f ((lambda (g$208$18854) (if g$208$18854 (begin '#f (append g$208$18852 g$208$18854)) '#f)) ((lambda (g$208$18856) (if (g$208$15966 g$208$18856) (begin '#f ((lambda (g$208$18858) (if g$208$18858 (begin '#f ((lambda (g$208$18860) (if g$208$18860 (begin '#f (append g$208$18858 g$208$18860)) '#f)) ((letrec ((g$208$18862 (lambda (g$208$18864) (if (g$208$15966 g$208$18864) ((lambda (g$208$18866) (if g$208$18866 (begin '#f ((lambda (g$208$18868) (if g$208$18868 (begin '#f (map cons g$208$18866 g$208$18868)) '#f)) (g$208$18862 (g$208$15976 g$208$18864)))) '#f)) ((lambda (g$208$18870) (list g$208$18870)) (g$208$15974 g$208$18864))) (if (g$208$15970 g$208$18864) (list (begin 'b* '())) '#f))))) g$208$18862) (g$208$15976 g$208$18856)))) '#f)) ((lambda (g$208$18872) (list g$208$18872)) (g$208$15974 g$208$18856)))) '#f)) (g$208$15976 g$208$18850)))) '#f)) ((lambda (g$208$18874) (if (equal? (g$208$16002 g$208$18874) '()) (begin '#f '()) '#f)) (g$208$15974 g$208$18850)))) '#f)) (g$208$15976 g$208$18844)))) '#f)) ((lambda (g$208$18876) '()) (g$208$15974 g$208$18844)))) '#f)) g$208$18690))) g$208$18686))) '#f))) (set! g$208$16516 (lambda (g$208$18882) ((lambda (g$208$18884) ((lambda (g$208$18886) (if (if g$208$18886 (begin '#f (apply (lambda (g$208$18888 g$208$18889 g$208$18890 g$208$18891) '#t) g$208$18886)) '#f) (apply (lambda (g$208$18896 g$208$18897 g$208$18898 g$208$18899) (if (g$208$15990 g$208$18897) (g$208$16504 (list 'make-traced-procedure (list 'quote g$208$18896) (cons 'lambda (cons g$208$18897 (cons g$208$18898 g$208$18899))))) (g$208$16508 g$208$18882 g$208$18897))) g$208$18886) ((lambda (g$208$18904) ((lambda (g$208$18906) (if (if g$208$18906 (begin '#f (apply (lambda (g$208$18908 g$208$18909 g$208$18910 g$208$18911 g$208$18912) '#t) g$208$18906)) '#f) (apply (lambda (g$208$18918 g$208$18919 g$208$18920 g$208$18921 g$208$18922) (if (g$208$15990 (cons g$208$18920 g$208$18919)) (g$208$16504 (list 'make-traced-procedure (list 'quote g$208$18918) (cons 'lambda (cons (append g$208$18919 g$208$18920) (cons g$208$18921 g$208$18922))))) (g$208$16508 g$208$18882 (append g$208$18919 g$208$18920)))) g$208$18906) (g$208$16715 '#f '"invalid syntax" g$208$18904))) ((lambda (g$208$18928) (if (g$208$15966 g$208$18928) (begin '#f ((lambda (g$208$18930) (if g$208$18930 (begin '#f ((lambda (g$208$18932) (if g$208$18932 (begin '#f (append g$208$18930 g$208$18932)) '#f)) ((lambda (g$208$18934) (if (g$208$15966 g$208$18934) (begin '#f ((lambda (g$208$18936) (if g$208$18936 (begin '#f ((lambda (g$208$18938) (if g$208$18938 (begin '#f (append g$208$18936 g$208$18938)) '#f)) ((lambda (g$208$18940) (if (g$208$15966 g$208$18940) (begin '#f ((lambda (g$208$18942) (if g$208$18942 (begin '#f ((lambda (g$208$18944) (if g$208$18944 (begin '#f (append g$208$18942 g$208$18944)) '#f)) ((lambda (g$208$18946) (if (g$208$15966 g$208$18946) (begin '#f ((lambda (g$208$18948) (if g$208$18948 (begin '#f ((lambda (g$208$18950) (if g$208$18950 (begin '#f (append g$208$18948 g$208$18950)) '#f)) ((letrec ((g$208$18952 (lambda (g$208$18954) (if (g$208$15966 g$208$18954) ((lambda (g$208$18956) (if g$208$18956 (begin '#f ((lambda (g$208$18958) (if g$208$18958 (begin '#f (map cons g$208$18956 g$208$18958)) '#f)) (g$208$18952 (g$208$15976 g$208$18954)))) '#f)) ((lambda (g$208$18960) (list g$208$18960)) (g$208$15974 g$208$18954))) (if (g$208$15970 g$208$18954) (list (begin 'b* '())) '#f))))) g$208$18952) (g$208$15976 g$208$18946)))) '#f)) ((lambda (g$208$18962) (list g$208$18962)) (g$208$15974 g$208$18946)))) '#f)) (g$208$15976 g$208$18940)))) '#f)) ((letrec ((g$208$18964 (lambda (g$208$18970) (if (g$208$15966 g$208$18970) ((lambda (g$208$18972) (if g$208$18972 (begin '#f ((lambda (g$208$18974) (if g$208$18974 (begin '#f (cons (map cons g$208$18972 (car g$208$18974)) (cdr g$208$18974))) '#f)) (g$208$18964 (g$208$15976 g$208$18970)))) '#f)) ((lambda (g$208$18976) (list g$208$18976)) (g$208$15974 g$208$18970))) ((lambda (g$208$18978) (if g$208$18978 (begin '#f (cons (list (begin 'fmls '())) g$208$18978)) '#f)) ((lambda (g$208$18980) (list g$208$18980)) g$208$18970)))))) (lambda (g$208$18966) ((lambda (g$208$18968) (if g$208$18968 (begin '#f (append (car g$208$18968) (cdr g$208$18968))) '#f)) (g$208$18964 g$208$18966)))) (g$208$15974 g$208$18940)))) '#f)) (g$208$15976 g$208$18934)))) '#f)) ((lambda (g$208$18982) (list g$208$18982)) (g$208$15974 g$208$18934)))) '#f)) (g$208$15976 g$208$18928)))) '#f)) ((lambda (g$208$18984) '()) (g$208$15974 g$208$18928)))) '#f)) g$208$18904))) g$208$18884))) ((lambda (g$208$18986) (if (g$208$15966 g$208$18986) (begin '#f ((lambda (g$208$18988) (if g$208$18988 (begin '#f ((lambda (g$208$18990) (if g$208$18990 (begin '#f (append g$208$18988 g$208$18990)) '#f)) ((lambda (g$208$18992) (if (g$208$15966 g$208$18992) (begin '#f ((lambda (g$208$18994) (if g$208$18994 (begin '#f ((lambda (g$208$18996) (if g$208$18996 (begin '#f (append g$208$18994 g$208$18996)) '#f)) ((lambda (g$208$18998) (if (g$208$15966 g$208$18998) (begin '#f ((lambda (g$208$19000) (if g$208$19000 (begin '#f ((lambda (g$208$19002) (if g$208$19002 (begin '#f (append g$208$19000 g$208$19002)) '#f)) ((lambda (g$208$19004) (if (g$208$15966 g$208$19004) (begin '#f ((lambda (g$208$19006) (if g$208$19006 (begin '#f ((lambda (g$208$19008) (if g$208$19008 (begin '#f (append g$208$19006 g$208$19008)) '#f)) ((letrec ((g$208$19010 (lambda (g$208$19012) (if (g$208$15966 g$208$19012) ((lambda (g$208$19014) (if g$208$19014 (begin '#f ((lambda (g$208$19016) (if g$208$19016 (begin '#f (map cons g$208$19014 g$208$19016)) '#f)) (g$208$19010 (g$208$15976 g$208$19012)))) '#f)) ((lambda (g$208$19018) (list g$208$19018)) (g$208$15974 g$208$19012))) (if (g$208$15970 g$208$19012) (list (begin 'b* '())) '#f))))) g$208$19010) (g$208$15976 g$208$19004)))) '#f)) ((lambda (g$208$19020) (list g$208$19020)) (g$208$15974 g$208$19004)))) '#f)) (g$208$15976 g$208$18998)))) '#f)) ((letrec ((g$208$19022 (lambda (g$208$19024) (if (g$208$15966 g$208$19024) ((lambda (g$208$19026) (if g$208$19026 (begin '#f ((lambda (g$208$19028) (if g$208$19028 (begin '#f (map cons g$208$19026 g$208$19028)) '#f)) (g$208$19022 (g$208$15976 g$208$19024)))) '#f)) ((lambda (g$208$19030) (list g$208$19030)) (g$208$15974 g$208$19024))) (if (g$208$15970 g$208$19024) (list (begin 'fmls '())) '#f))))) g$208$19022) (g$208$15974 g$208$18998)))) '#f)) (g$208$15976 g$208$18992)))) '#f)) ((lambda (g$208$19032) (list g$208$19032)) (g$208$15974 g$208$18992)))) '#f)) (g$208$15976 g$208$18986)))) '#f)) ((lambda (g$208$19034) '()) (g$208$15974 g$208$18986)))) '#f)) g$208$18884))) g$208$18882))) (set! g$208$16518 (lambda (g$208$19036) ((lambda (g$208$19038) ((lambda (g$208$19040) (if (if g$208$19040 (begin '#f (apply (lambda (g$208$19042 g$208$19043 g$208$19044 g$208$19045) '#t) g$208$19040)) '#f) (apply (lambda (g$208$19050 g$208$19051 g$208$19052 g$208$19053) (if (g$208$15990 g$208$19051) (g$208$16504 (list 'define g$208$19050 (list 'make-traced-procedure (list 'quote g$208$19050) (cons 'lambda (cons g$208$19051 (cons g$208$19052 g$208$19053)))))) (g$208$16508 g$208$19036 g$208$19051))) g$208$19040) ((lambda (g$208$19058) ((lambda (g$208$19060) (if (if g$208$19060 (begin '#f (apply (lambda (g$208$19062 g$208$19063 g$208$19064 g$208$19065 g$208$19066) '#t) g$208$19060)) '#f) (apply (lambda (g$208$19072 g$208$19073 g$208$19074 g$208$19075 g$208$19076) (if (g$208$15990 (cons g$208$19074 g$208$19073)) (g$208$16504 (list 'define g$208$19072 (list 'make-traced-procedure (list 'quote g$208$19072) (cons 'lambda (cons (append g$208$19073 g$208$19074) (cons g$208$19075 g$208$19076)))))) (g$208$16508 g$208$19036 (append g$208$19073 g$208$19074)))) g$208$19060) ((lambda (g$208$19082) ((lambda (g$208$19084) (if (if g$208$19084 (begin '#f (apply (lambda (g$208$19086 g$208$19087) '#t) g$208$19084)) '#f) (apply (lambda (g$208$19090 g$208$19091) (if (g$208$15980 g$208$19090) (g$208$16504 (list 'define g$208$19090 (list 'let (list (list 'v g$208$19091)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$208$19090) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (g$208$16715 '#f '"invalid name" g$208$19036))) g$208$19084) (g$208$16715 '#f '"invalid syntax" g$208$19082))) ((lambda (g$208$19094) (if (g$208$15966 g$208$19094) (begin '#f ((lambda (g$208$19096) (if g$208$19096 (begin '#f ((lambda (g$208$19098) (if g$208$19098 (begin '#f (append g$208$19096 g$208$19098)) '#f)) ((lambda (g$208$19100) (if (g$208$15966 g$208$19100) (begin '#f ((lambda (g$208$19102) (if g$208$19102 (begin '#f ((lambda (g$208$19104) (if g$208$19104 (begin '#f (append g$208$19102 g$208$19104)) '#f)) ((lambda (g$208$19106) (if (g$208$15966 g$208$19106) (begin '#f ((lambda (g$208$19108) (if g$208$19108 (begin '#f ((lambda (g$208$19110) (if g$208$19110 (begin '#f (append g$208$19108 g$208$19110)) '#f)) ((lambda (g$208$19112) (if (equal? (g$208$16002 g$208$19112) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19106)))) '#f)) ((lambda (g$208$19114) (list g$208$19114)) (g$208$15974 g$208$19106)))) '#f)) (g$208$15976 g$208$19100)))) '#f)) ((lambda (g$208$19116) (list g$208$19116)) (g$208$15974 g$208$19100)))) '#f)) (g$208$15976 g$208$19094)))) '#f)) ((lambda (g$208$19118) '()) (g$208$15974 g$208$19094)))) '#f)) g$208$19082))) g$208$19058))) ((lambda (g$208$19120) (if (g$208$15966 g$208$19120) (begin '#f ((lambda (g$208$19122) (if g$208$19122 (begin '#f ((lambda (g$208$19124) (if g$208$19124 (begin '#f (append g$208$19122 g$208$19124)) '#f)) ((lambda (g$208$19126) (if (g$208$15966 g$208$19126) (begin '#f ((lambda (g$208$19128) (if g$208$19128 (begin '#f ((lambda (g$208$19130) (if g$208$19130 (begin '#f (append g$208$19128 g$208$19130)) '#f)) ((lambda (g$208$19132) (if (g$208$15966 g$208$19132) (begin '#f ((lambda (g$208$19134) (if g$208$19134 (begin '#f ((lambda (g$208$19136) (if g$208$19136 (begin '#f (append g$208$19134 g$208$19136)) '#f)) ((letrec ((g$208$19138 (lambda (g$208$19140) (if (g$208$15966 g$208$19140) ((lambda (g$208$19142) (if g$208$19142 (begin '#f ((lambda (g$208$19144) (if g$208$19144 (begin '#f (map cons g$208$19142 g$208$19144)) '#f)) (g$208$19138 (g$208$15976 g$208$19140)))) '#f)) ((lambda (g$208$19146) (list g$208$19146)) (g$208$15974 g$208$19140))) (if (g$208$15970 g$208$19140) (list (begin 'b* '())) '#f))))) g$208$19138) (g$208$15976 g$208$19132)))) '#f)) ((lambda (g$208$19148) (list g$208$19148)) (g$208$15974 g$208$19132)))) '#f)) (g$208$15976 g$208$19126)))) '#f)) ((lambda (g$208$19150) (if (g$208$15966 g$208$19150) (begin '#f ((lambda (g$208$19152) (if g$208$19152 (begin '#f ((lambda (g$208$19154) (if g$208$19154 (begin '#f (append g$208$19152 g$208$19154)) '#f)) ((letrec ((g$208$19156 (lambda (g$208$19162) (if (g$208$15966 g$208$19162) ((lambda (g$208$19164) (if g$208$19164 (begin '#f ((lambda (g$208$19166) (if g$208$19166 (begin '#f (cons (map cons g$208$19164 (car g$208$19166)) (cdr g$208$19166))) '#f)) (g$208$19156 (g$208$15976 g$208$19162)))) '#f)) ((lambda (g$208$19168) (list g$208$19168)) (g$208$15974 g$208$19162))) ((lambda (g$208$19170) (if g$208$19170 (begin '#f (cons (list (begin 'fmls '())) g$208$19170)) '#f)) ((lambda (g$208$19172) (list g$208$19172)) g$208$19162)))))) (lambda (g$208$19158) ((lambda (g$208$19160) (if g$208$19160 (begin '#f (append (car g$208$19160) (cdr g$208$19160))) '#f)) (g$208$19156 g$208$19158)))) (g$208$15976 g$208$19150)))) '#f)) ((lambda (g$208$19174) (list g$208$19174)) (g$208$15974 g$208$19150)))) '#f)) (g$208$15974 g$208$19126)))) '#f)) (g$208$15976 g$208$19120)))) '#f)) ((lambda (g$208$19176) '()) (g$208$15974 g$208$19120)))) '#f)) g$208$19058))) g$208$19038))) ((lambda (g$208$19178) (if (g$208$15966 g$208$19178) (begin '#f ((lambda (g$208$19180) (if g$208$19180 (begin '#f ((lambda (g$208$19182) (if g$208$19182 (begin '#f (append g$208$19180 g$208$19182)) '#f)) ((lambda (g$208$19184) (if (g$208$15966 g$208$19184) (begin '#f ((lambda (g$208$19186) (if g$208$19186 (begin '#f ((lambda (g$208$19188) (if g$208$19188 (begin '#f (append g$208$19186 g$208$19188)) '#f)) ((lambda (g$208$19190) (if (g$208$15966 g$208$19190) (begin '#f ((lambda (g$208$19192) (if g$208$19192 (begin '#f ((lambda (g$208$19194) (if g$208$19194 (begin '#f (append g$208$19192 g$208$19194)) '#f)) ((letrec ((g$208$19196 (lambda (g$208$19198) (if (g$208$15966 g$208$19198) ((lambda (g$208$19200) (if g$208$19200 (begin '#f ((lambda (g$208$19202) (if g$208$19202 (begin '#f (map cons g$208$19200 g$208$19202)) '#f)) (g$208$19196 (g$208$15976 g$208$19198)))) '#f)) ((lambda (g$208$19204) (list g$208$19204)) (g$208$15974 g$208$19198))) (if (g$208$15970 g$208$19198) (list (begin 'b* '())) '#f))))) g$208$19196) (g$208$15976 g$208$19190)))) '#f)) ((lambda (g$208$19206) (list g$208$19206)) (g$208$15974 g$208$19190)))) '#f)) (g$208$15976 g$208$19184)))) '#f)) ((lambda (g$208$19208) (if (g$208$15966 g$208$19208) (begin '#f ((lambda (g$208$19210) (if g$208$19210 (begin '#f ((lambda (g$208$19212) (if g$208$19212 (begin '#f (append g$208$19210 g$208$19212)) '#f)) ((letrec ((g$208$19214 (lambda (g$208$19216) (if (g$208$15966 g$208$19216) ((lambda (g$208$19218) (if g$208$19218 (begin '#f ((lambda (g$208$19220) (if g$208$19220 (begin '#f (map cons g$208$19218 g$208$19220)) '#f)) (g$208$19214 (g$208$15976 g$208$19216)))) '#f)) ((lambda (g$208$19222) (list g$208$19222)) (g$208$15974 g$208$19216))) (if (g$208$15970 g$208$19216) (list (begin 'fmls '())) '#f))))) g$208$19214) (g$208$15976 g$208$19208)))) '#f)) ((lambda (g$208$19224) (list g$208$19224)) (g$208$15974 g$208$19208)))) '#f)) (g$208$15974 g$208$19184)))) '#f)) (g$208$15976 g$208$19178)))) '#f)) ((lambda (g$208$19226) '()) (g$208$15974 g$208$19178)))) '#f)) g$208$19038))) g$208$19036))) (set! g$208$16520 (lambda (g$208$19228) ((lambda (g$208$19230) ((lambda (g$208$19232) (if (if g$208$19232 (begin '#f (apply (lambda (g$208$19234 g$208$19235) '#t) g$208$19232)) '#f) (apply (lambda (g$208$19238 g$208$19239) (if (g$208$15980 g$208$19238) (g$208$16504 (list 'define-syntax g$208$19238 (list 'let (list (list 'v g$208$19239)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$208$19238) '(v syntax->datum))) '((assertion-violation 'trace-define-syntax "not a procedure" v)))))))) (g$208$16715 '#f '"invalid name" g$208$19228))) g$208$19232) (g$208$16715 '#f '"invalid syntax" g$208$19230))) ((lambda (g$208$19242) (if (g$208$15966 g$208$19242) (begin '#f ((lambda (g$208$19244) (if g$208$19244 (begin '#f ((lambda (g$208$19246) (if g$208$19246 (begin '#f (append g$208$19244 g$208$19246)) '#f)) ((lambda (g$208$19248) (if (g$208$15966 g$208$19248) (begin '#f ((lambda (g$208$19250) (if g$208$19250 (begin '#f ((lambda (g$208$19252) (if g$208$19252 (begin '#f (append g$208$19250 g$208$19252)) '#f)) ((lambda (g$208$19254) (if (g$208$15966 g$208$19254) (begin '#f ((lambda (g$208$19256) (if g$208$19256 (begin '#f ((lambda (g$208$19258) (if g$208$19258 (begin '#f (append g$208$19256 g$208$19258)) '#f)) ((lambda (g$208$19260) (if (equal? (g$208$16002 g$208$19260) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19254)))) '#f)) ((lambda (g$208$19262) (list g$208$19262)) (g$208$15974 g$208$19254)))) '#f)) (g$208$15976 g$208$19248)))) '#f)) ((lambda (g$208$19264) (list g$208$19264)) (g$208$15974 g$208$19248)))) '#f)) (g$208$15976 g$208$19242)))) '#f)) ((lambda (g$208$19266) '()) (g$208$15974 g$208$19242)))) '#f)) g$208$19230))) g$208$19228))) (set! g$208$16522 (lambda (g$208$19268) ((lambda (g$208$19270) (begin (set! g$208$19270 (lambda (g$208$19344 g$208$19345 g$208$19346) ((lambda (g$208$19350 g$208$19352) (begin (set! g$208$19350 (lambda (g$208$19462 g$208$19463) ((lambda (g$208$19466) ((lambda (g$208$19468) (if (if g$208$19468 (begin '#f (apply (lambda (g$208$19470 g$208$19471) '#t) g$208$19468)) '#f) (apply (lambda (g$208$19474 g$208$19475) ((lambda (g$208$19478) (list 'let (list (list g$208$19478 g$208$19474)) (list 'if g$208$19478 (list g$208$19475 g$208$19478) g$208$19463))) (gensym))) g$208$19468) ((lambda (g$208$19480) ((lambda (g$208$19482) (if (if g$208$19482 (begin '#f (apply (lambda (g$208$19484) '#t) g$208$19482)) '#f) (apply (lambda (g$208$19486) ((lambda (g$208$19488) (list 'let (list (list g$208$19488 g$208$19486)) (list 'if g$208$19488 g$208$19488 g$208$19463))) (gensym))) g$208$19482) ((lambda (g$208$19490) ((lambda (g$208$19492) (if (if g$208$19492 (begin '#f (apply (lambda (g$208$19494 g$208$19495 g$208$19496) '#t) g$208$19492)) '#f) (apply (lambda (g$208$19500 g$208$19501 g$208$19502) (list 'if g$208$19500 (cons 'begin (cons g$208$19501 g$208$19502)) g$208$19463)) g$208$19492) ((lambda (g$208$19506) ((lambda (g$208$19508) (if (if g$208$19508 (begin '#f (apply (lambda () '#t) g$208$19508)) '#f) (apply (lambda () (g$208$16715 '#f '"invalid guard clause" g$208$19462)) g$208$19508) (g$208$16715 '#f '"invalid syntax" g$208$19506))) ((lambda (g$208$19510) '()) g$208$19506))) g$208$19490))) ((lambda (g$208$19512) (if (g$208$15966 g$208$19512) (begin '#f ((lambda (g$208$19514) (if g$208$19514 (begin '#f ((lambda (g$208$19516) (if g$208$19516 (begin '#f (append g$208$19514 g$208$19516)) '#f)) ((lambda (g$208$19518) (if (g$208$15966 g$208$19518) (begin '#f ((lambda (g$208$19520) (if g$208$19520 (begin '#f ((lambda (g$208$19522) (if g$208$19522 (begin '#f (append g$208$19520 g$208$19522)) '#f)) ((letrec ((g$208$19524 (lambda (g$208$19526) (if (g$208$15966 g$208$19526) ((lambda (g$208$19528) (if g$208$19528 (begin '#f ((lambda (g$208$19530) (if g$208$19530 (begin '#f (map cons g$208$19528 g$208$19530)) '#f)) (g$208$19524 (g$208$15976 g$208$19526)))) '#f)) ((lambda (g$208$19532) (list g$208$19532)) (g$208$15974 g$208$19526))) (if (g$208$15970 g$208$19526) (list (begin 'v* '())) '#f))))) g$208$19524) (g$208$15976 g$208$19518)))) '#f)) ((lambda (g$208$19534) (list g$208$19534)) (g$208$15974 g$208$19518)))) '#f)) (g$208$15976 g$208$19512)))) '#f)) ((lambda (g$208$19536) (list g$208$19536)) (g$208$15974 g$208$19512)))) '#f)) g$208$19490))) g$208$19480))) ((lambda (g$208$19538) (if (g$208$15966 g$208$19538) (begin '#f ((lambda (g$208$19540) (if g$208$19540 (begin '#f ((lambda (g$208$19542) (if g$208$19542 (begin '#f (append g$208$19540 g$208$19542)) '#f)) ((lambda (g$208$19544) (if (equal? (g$208$16002 g$208$19544) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19538)))) '#f)) ((lambda (g$208$19546) (list g$208$19546)) (g$208$15974 g$208$19538)))) '#f)) g$208$19480))) g$208$19466))) ((lambda (g$208$19548) (if (g$208$15966 g$208$19548) (begin '#f ((lambda (g$208$19550) (if g$208$19550 (begin '#f ((lambda (g$208$19552) (if g$208$19552 (begin '#f (append g$208$19550 g$208$19552)) '#f)) ((lambda (g$208$19554) (if (g$208$15966 g$208$19554) (begin '#f ((lambda (g$208$19556) (if g$208$19556 (begin '#f ((lambda (g$208$19558) (if g$208$19558 (begin '#f (append g$208$19556 g$208$19558)) '#f)) ((lambda (g$208$19560) (if (g$208$15966 g$208$19560) (begin '#f ((lambda (g$208$19562) (if g$208$19562 (begin '#f ((lambda (g$208$19564) (if g$208$19564 (begin '#f (append g$208$19562 g$208$19564)) '#f)) ((lambda (g$208$19566) (if (equal? (g$208$16002 g$208$19566) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19560)))) '#f)) ((lambda (g$208$19568) (list g$208$19568)) (g$208$15974 g$208$19560)))) '#f)) (g$208$15976 g$208$19554)))) '#f)) ((lambda (g$208$19570) (if (g$208$15980 g$208$19570) (if (g$208$15988 g$208$19570 (g$208$16466 '=>)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$19554)))) '#f)) (g$208$15976 g$208$19548)))) '#f)) ((lambda (g$208$19572) (list g$208$19572)) (g$208$15974 g$208$19548)))) '#f)) g$208$19466))) g$208$19462))) (set! g$208$19352 (lambda (g$208$19364) ((lambda (g$208$19366) ((lambda (g$208$19368) (if (if g$208$19368 (begin '#f (apply (lambda () '#t) g$208$19368)) '#f) (apply (lambda () ((lambda (g$208$19370) (values (list g$208$19370 (list 'lambda '() (list 'raise g$208$19344))) g$208$19370)) (gensym))) g$208$19368) ((lambda (g$208$19372) ((lambda (g$208$19374) (if (if g$208$19374 (begin '#f (apply (lambda (g$208$19376 g$208$19377) '#t) g$208$19374)) '#f) (apply (lambda (g$208$19380 g$208$19381) (values (cons 'begin (cons g$208$19380 g$208$19381)) '#f)) g$208$19374) ((lambda (g$208$19384) ((lambda (g$208$19386) (if (if g$208$19386 (begin '#f (apply (lambda (g$208$19388 g$208$19389) '#t) g$208$19386)) '#f) (apply (lambda (g$208$19392 g$208$19393) (call-with-values (lambda () (g$208$19352 g$208$19393)) (lambda (g$208$19398 g$208$19399) ((lambda (g$208$19402 g$208$19403) (values (g$208$19350 g$208$19392 g$208$19403) g$208$19402)) g$208$19399 g$208$19398)))) g$208$19386) ((lambda (g$208$19406) ((lambda (g$208$19408) (if (if g$208$19408 (begin '#f (apply (lambda (g$208$19410) '#t) g$208$19408)) '#f) (apply (lambda (g$208$19412) (g$208$16715 '#f '"invalid guard clause" g$208$19412)) g$208$19408) (g$208$16715 '#f '"invalid syntax" g$208$19406))) ((lambda (g$208$19414) (list g$208$19414)) g$208$19406))) g$208$19384))) ((lambda (g$208$19416) (if (g$208$15966 g$208$19416) (begin '#f ((lambda (g$208$19418) (if g$208$19418 (begin '#f ((lambda (g$208$19420) (if g$208$19420 (begin '#f (append g$208$19418 g$208$19420)) '#f)) ((lambda (g$208$19422) (list g$208$19422)) (g$208$15976 g$208$19416)))) '#f)) ((lambda (g$208$19424) (list g$208$19424)) (g$208$15974 g$208$19416)))) '#f)) g$208$19384))) g$208$19372))) ((lambda (g$208$19426) (if (g$208$15966 g$208$19426) (begin '#f ((lambda (g$208$19428) (if g$208$19428 (begin '#f ((lambda (g$208$19430) (if g$208$19430 (begin '#f (append g$208$19428 g$208$19430)) '#f)) ((lambda (g$208$19432) (if (equal? (g$208$16002 g$208$19432) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19426)))) '#f)) ((lambda (g$208$19434) (if (g$208$15966 g$208$19434) (begin '#f ((lambda (g$208$19436) (if g$208$19436 (begin '#f ((lambda (g$208$19438) (if g$208$19438 (begin '#f (append g$208$19436 g$208$19438)) '#f)) ((lambda (g$208$19440) (if (g$208$15966 g$208$19440) (begin '#f ((lambda (g$208$19442) (if g$208$19442 (begin '#f ((lambda (g$208$19444) (if g$208$19444 (begin '#f (append g$208$19442 g$208$19444)) '#f)) ((letrec ((g$208$19446 (lambda (g$208$19448) (if (g$208$15966 g$208$19448) ((lambda (g$208$19450) (if g$208$19450 (begin '#f ((lambda (g$208$19452) (if g$208$19452 (begin '#f (map cons g$208$19450 g$208$19452)) '#f)) (g$208$19446 (g$208$15976 g$208$19448)))) '#f)) ((lambda (g$208$19454) (list g$208$19454)) (g$208$15974 g$208$19448))) (if (g$208$15970 g$208$19448) (list (begin 'e* '())) '#f))))) g$208$19446) (g$208$15976 g$208$19440)))) '#f)) ((lambda (g$208$19456) (list g$208$19456)) (g$208$15974 g$208$19440)))) '#f)) (g$208$15976 g$208$19434)))) '#f)) ((lambda (g$208$19458) (if (g$208$15980 g$208$19458) (if (g$208$15988 g$208$19458 (g$208$16466 'else)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$19434)))) '#f)) (g$208$15974 g$208$19426)))) '#f)) g$208$19372))) g$208$19366))) ((lambda (g$208$19460) (if (equal? (g$208$16002 g$208$19460) '()) (begin '#f '()) '#f)) g$208$19366))) g$208$19364))) (call-with-values (lambda () (g$208$19352 g$208$19346)) (lambda (g$208$19356 g$208$19357) ((lambda (g$208$19360 g$208$19361) (if g$208$19360 (list (list 'call/cc (list 'lambda (list g$208$19360) (list g$208$19345 (list 'lambda '() g$208$19361))))) (list g$208$19345 (list 'lambda '() g$208$19361)))) g$208$19357 g$208$19356))))) '#f '#f))) ((lambda (g$208$19272) ((lambda (g$208$19274) (if (if g$208$19274 (begin '#f (apply (lambda (g$208$19276 g$208$19277 g$208$19278 g$208$19279) (g$208$15980 g$208$19276)) g$208$19274)) '#f) (apply (lambda (g$208$19284 g$208$19285 g$208$19286 g$208$19287) ((lambda (g$208$19292) (g$208$16504 (list (list 'call/cc (list 'lambda (list g$208$19292) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$208$19284) (g$208$19270 g$208$19284 g$208$19292 g$208$19285)) (cons 'lambda (cons '() (cons '#f (cons g$208$19286 g$208$19287))))))))))) (gensym))) g$208$19274) (g$208$16715 '#f '"invalid syntax" g$208$19272))) ((lambda (g$208$19294) (if (g$208$15966 g$208$19294) (begin '#f ((lambda (g$208$19296) (if g$208$19296 (begin '#f ((lambda (g$208$19298) (if g$208$19298 (begin '#f (append g$208$19296 g$208$19298)) '#f)) ((lambda (g$208$19300) (if (g$208$15966 g$208$19300) (begin '#f ((lambda (g$208$19302) (if g$208$19302 (begin '#f ((lambda (g$208$19304) (if g$208$19304 (begin '#f (append g$208$19302 g$208$19304)) '#f)) ((lambda (g$208$19306) (if (g$208$15966 g$208$19306) (begin '#f ((lambda (g$208$19308) (if g$208$19308 (begin '#f ((lambda (g$208$19310) (if g$208$19310 (begin '#f (append g$208$19308 g$208$19310)) '#f)) ((letrec ((g$208$19312 (lambda (g$208$19314) (if (g$208$15966 g$208$19314) ((lambda (g$208$19316) (if g$208$19316 (begin '#f ((lambda (g$208$19318) (if g$208$19318 (begin '#f (map cons g$208$19316 g$208$19318)) '#f)) (g$208$19312 (g$208$15976 g$208$19314)))) '#f)) ((lambda (g$208$19320) (list g$208$19320)) (g$208$15974 g$208$19314))) (if (g$208$15970 g$208$19314) (list (begin 'b* '())) '#f))))) g$208$19312) (g$208$15976 g$208$19306)))) '#f)) ((lambda (g$208$19322) (list g$208$19322)) (g$208$15974 g$208$19306)))) '#f)) (g$208$15976 g$208$19300)))) '#f)) ((lambda (g$208$19324) (if (g$208$15966 g$208$19324) (begin '#f ((lambda (g$208$19326) (if g$208$19326 (begin '#f ((lambda (g$208$19328) (if g$208$19328 (begin '#f (append g$208$19326 g$208$19328)) '#f)) ((letrec ((g$208$19330 (lambda (g$208$19332) (if (g$208$15966 g$208$19332) ((lambda (g$208$19334) (if g$208$19334 (begin '#f ((lambda (g$208$19336) (if g$208$19336 (begin '#f (map cons g$208$19334 g$208$19336)) '#f)) (g$208$19330 (g$208$15976 g$208$19332)))) '#f)) ((lambda (g$208$19338) (list g$208$19338)) (g$208$15974 g$208$19332))) (if (g$208$15970 g$208$19332) (list (begin 'clause* '())) '#f))))) g$208$19330) (g$208$15976 g$208$19324)))) '#f)) ((lambda (g$208$19340) (list g$208$19340)) (g$208$15974 g$208$19324)))) '#f)) (g$208$15974 g$208$19300)))) '#f)) (g$208$15976 g$208$19294)))) '#f)) ((lambda (g$208$19342) '()) (g$208$15974 g$208$19294)))) '#f)) g$208$19272))) g$208$19268))) '#f))) (set! g$208$16524 (lambda (g$208$19574) ((lambda (g$208$19576) (begin (set! g$208$19576 (lambda (g$208$19640) ((lambda (g$208$19642) (if g$208$19642 g$208$19642 (begin '#f (if (not (memq (car g$208$19640) (cdr g$208$19640))) (begin '#f (g$208$19576 (cdr g$208$19640))) '#f)))) (null? g$208$19640)))) ((lambda (g$208$19578) ((lambda (g$208$19580) (if (if g$208$19580 (begin '#f (apply (lambda (g$208$19582 g$208$19583 g$208$19584) (if (g$208$15980 g$208$19582) (if (g$208$15980 g$208$19584) (begin '#f (for-all g$208$15980 g$208$19583)) '#f) '#f)) g$208$19580)) '#f) (apply (lambda (g$208$19588 g$208$19589 g$208$19590) ((lambda (g$208$19594 g$208$19595) (begin (if (g$208$19576 g$208$19594) (void) (g$208$16715 '#f '"duplicate names in enumeration set" g$208$19574)) (g$208$16504 (list 'begin (list 'define g$208$19595 (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$208$19594)))) (list 'define-syntax g$208$19588 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$208$19594)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$208$19594))))))) (list 'define-syntax g$208$19590 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* |...|) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$208$19594)) '((syntax-error n "not a member of set"))))) '((syntax (n* |...|))))) (list 'syntax (cons g$208$19595 '('(n* |...|))))))))))))) (g$208$16721 g$208$19589) (gensym))) g$208$19580) (g$208$16715 '#f '"invalid syntax" g$208$19578))) ((lambda (g$208$19598) (if (g$208$15966 g$208$19598) (begin '#f ((lambda (g$208$19600) (if g$208$19600 (begin '#f ((lambda (g$208$19602) (if g$208$19602 (begin '#f (append g$208$19600 g$208$19602)) '#f)) ((lambda (g$208$19604) (if (g$208$15966 g$208$19604) (begin '#f ((lambda (g$208$19606) (if g$208$19606 (begin '#f ((lambda (g$208$19608) (if g$208$19608 (begin '#f (append g$208$19606 g$208$19608)) '#f)) ((lambda (g$208$19610) (if (g$208$15966 g$208$19610) (begin '#f ((lambda (g$208$19612) (if g$208$19612 (begin '#f ((lambda (g$208$19614) (if g$208$19614 (begin '#f (append g$208$19612 g$208$19614)) '#f)) ((lambda (g$208$19616) (if (g$208$15966 g$208$19616) (begin '#f ((lambda (g$208$19618) (if g$208$19618 (begin '#f ((lambda (g$208$19620) (if g$208$19620 (begin '#f (append g$208$19618 g$208$19620)) '#f)) ((lambda (g$208$19622) (if (equal? (g$208$16002 g$208$19622) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19616)))) '#f)) ((lambda (g$208$19624) (list g$208$19624)) (g$208$15974 g$208$19616)))) '#f)) (g$208$15976 g$208$19610)))) '#f)) ((letrec ((g$208$19626 (lambda (g$208$19628) (if (g$208$15966 g$208$19628) ((lambda (g$208$19630) (if g$208$19630 (begin '#f ((lambda (g$208$19632) (if g$208$19632 (begin '#f (map cons g$208$19630 g$208$19632)) '#f)) (g$208$19626 (g$208$15976 g$208$19628)))) '#f)) ((lambda (g$208$19634) (list g$208$19634)) (g$208$15974 g$208$19628))) (if (g$208$15970 g$208$19628) (list (begin 'id* '())) '#f))))) g$208$19626) (g$208$15974 g$208$19610)))) '#f)) (g$208$15976 g$208$19604)))) '#f)) ((lambda (g$208$19636) (list g$208$19636)) (g$208$15974 g$208$19604)))) '#f)) (g$208$15976 g$208$19598)))) '#f)) ((lambda (g$208$19638) '()) (g$208$15974 g$208$19598)))) '#f)) g$208$19578))) g$208$19574))) '#f))) (set! g$208$16526 (lambda (g$208$19644) ((lambda (g$208$19646) ((lambda (g$208$19648) (if (if g$208$19648 (begin '#f (apply (lambda (g$208$19650) '#t) g$208$19648)) '#f) (apply (lambda (g$208$19652) (g$208$16504 (list 'time-it (list 'quote g$208$19652) (list 'lambda '() g$208$19652)))) g$208$19648) (g$208$16715 '#f '"invalid syntax" g$208$19646))) ((lambda (g$208$19654) (if (g$208$15966 g$208$19654) (begin '#f ((lambda (g$208$19656) (if g$208$19656 (begin '#f ((lambda (g$208$19658) (if g$208$19658 (begin '#f (append g$208$19656 g$208$19658)) '#f)) ((lambda (g$208$19660) (if (g$208$15966 g$208$19660) (begin '#f ((lambda (g$208$19662) (if g$208$19662 (begin '#f ((lambda (g$208$19664) (if g$208$19664 (begin '#f (append g$208$19662 g$208$19664)) '#f)) ((lambda (g$208$19666) (if (equal? (g$208$16002 g$208$19666) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19660)))) '#f)) ((lambda (g$208$19668) (list g$208$19668)) (g$208$15974 g$208$19660)))) '#f)) (g$208$15976 g$208$19654)))) '#f)) ((lambda (g$208$19670) '()) (g$208$15974 g$208$19654)))) '#f)) g$208$19646))) g$208$19644))) (set! g$208$16528 (lambda (g$208$19672) ((lambda (g$208$19674) ((lambda (g$208$19676) (if (if g$208$19676 (begin '#f (apply (lambda (g$208$19678) '#t) g$208$19676)) '#f) (apply (lambda (g$208$19680) (g$208$16504 (list 'make-promise (list 'lambda '() g$208$19680)))) g$208$19676) (g$208$16715 '#f '"invalid syntax" g$208$19674))) ((lambda (g$208$19682) (if (g$208$15966 g$208$19682) (begin '#f ((lambda (g$208$19684) (if g$208$19684 (begin '#f ((lambda (g$208$19686) (if g$208$19686 (begin '#f (append g$208$19684 g$208$19686)) '#f)) ((lambda (g$208$19688) (if (g$208$15966 g$208$19688) (begin '#f ((lambda (g$208$19690) (if g$208$19690 (begin '#f ((lambda (g$208$19692) (if g$208$19692 (begin '#f (append g$208$19690 g$208$19692)) '#f)) ((lambda (g$208$19694) (if (equal? (g$208$16002 g$208$19694) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19688)))) '#f)) ((lambda (g$208$19696) (list g$208$19696)) (g$208$15974 g$208$19688)))) '#f)) (g$208$15976 g$208$19682)))) '#f)) ((lambda (g$208$19698) '()) (g$208$15974 g$208$19682)))) '#f)) g$208$19674))) g$208$19672))) (set! g$208$16530 (lambda (g$208$19700) ((lambda (g$208$19702) ((lambda (g$208$19704) (if (if g$208$19704 (begin '#f (apply (lambda (g$208$19706) '#t) g$208$19704)) '#f) (apply (lambda (g$208$19708) (g$208$16504 (list 'unless g$208$19708 (list 'assertion-violation ''assert '"assertion failed" (list 'quote g$208$19708))))) g$208$19704) (g$208$16715 '#f '"invalid syntax" g$208$19702))) ((lambda (g$208$19710) (if (g$208$15966 g$208$19710) (begin '#f ((lambda (g$208$19712) (if g$208$19712 (begin '#f ((lambda (g$208$19714) (if g$208$19714 (begin '#f (append g$208$19712 g$208$19714)) '#f)) ((lambda (g$208$19716) (if (g$208$15966 g$208$19716) (begin '#f ((lambda (g$208$19718) (if g$208$19718 (begin '#f ((lambda (g$208$19720) (if g$208$19720 (begin '#f (append g$208$19718 g$208$19720)) '#f)) ((lambda (g$208$19722) (if (equal? (g$208$16002 g$208$19722) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19716)))) '#f)) ((lambda (g$208$19724) (list g$208$19724)) (g$208$15974 g$208$19716)))) '#f)) (g$208$15976 g$208$19710)))) '#f)) ((lambda (g$208$19726) '()) (g$208$15974 g$208$19710)))) '#f)) g$208$19702))) g$208$19700))) (set! g$208$16532 (lambda (g$208$19728) ((lambda (g$208$19730) ((lambda (g$208$19732) (if (if g$208$19732 (begin '#f (apply (lambda (g$208$19734) '#t) g$208$19732)) '#f) (apply (lambda (g$208$19736) ((lambda (g$208$19738) (if (memv g$208$19738 '(little)) (g$208$16504 ''little) (if (memv g$208$19738 '(big)) (g$208$16504 ''big) (g$208$16715 '#f '"endianness must be big or little" g$208$19728)))) (g$208$16721 g$208$19736))) g$208$19732) (g$208$16715 '#f '"invalid syntax" g$208$19730))) ((lambda (g$208$19739) (if (g$208$15966 g$208$19739) (begin '#f ((lambda (g$208$19741) (if g$208$19741 (begin '#f ((lambda (g$208$19743) (if g$208$19743 (begin '#f (append g$208$19741 g$208$19743)) '#f)) ((lambda (g$208$19745) (if (g$208$15966 g$208$19745) (begin '#f ((lambda (g$208$19747) (if g$208$19747 (begin '#f ((lambda (g$208$19749) (if g$208$19749 (begin '#f (append g$208$19747 g$208$19749)) '#f)) ((lambda (g$208$19751) (if (equal? (g$208$16002 g$208$19751) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19745)))) '#f)) ((lambda (g$208$19753) (list g$208$19753)) (g$208$15974 g$208$19745)))) '#f)) (g$208$15976 g$208$19739)))) '#f)) ((lambda (g$208$19755) '()) (g$208$15974 g$208$19739)))) '#f)) g$208$19730))) g$208$19728))) (set! g$208$16534 (lambda (g$208$19757) ((lambda (g$208$19759) ((lambda (g$208$19761) (if (if g$208$19761 (begin '#f (apply (lambda (g$208$19763) '#t) g$208$19761)) '#f) (apply (lambda (g$208$19765) (g$208$16504 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$208$19765)) (list '(id e* |...|) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$208$19765) '((syntax (e* |...|)))))))))) g$208$19761) ((lambda (g$208$19767) ((lambda (g$208$19769) (if (if g$208$19769 (begin '#f (apply (lambda (g$208$19771 g$208$19772 g$208$19773 g$208$19774 g$208$19775) (if (g$208$15980 g$208$19771) (if (g$208$15980 g$208$19773) (begin '#f (g$208$15980 g$208$19774)) '#f) '#f)) g$208$19769)) '#f) (apply (lambda (g$208$19781 g$208$19782 g$208$19783 g$208$19784 g$208$19785) (g$208$16504 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$208$19782)) (list (list 'set! 'id g$208$19784) (list 'syntax g$208$19785)) (list '(id e* |...|) '(identifier? (syntax id)) (list 'syntax (cons g$208$19782 '(e* |...|))))))))) g$208$19769) (g$208$16715 '#f '"invalid syntax" g$208$19767))) ((lambda (g$208$19791) (if (g$208$15966 g$208$19791) (begin '#f ((lambda (g$208$19793) (if g$208$19793 (begin '#f ((lambda (g$208$19795) (if g$208$19795 (begin '#f (append g$208$19793 g$208$19795)) '#f)) ((lambda (g$208$19797) (if (g$208$15966 g$208$19797) (begin '#f ((lambda (g$208$19799) (if g$208$19799 (begin '#f ((lambda (g$208$19801) (if g$208$19801 (begin '#f (append g$208$19799 g$208$19801)) '#f)) ((lambda (g$208$19803) (if (g$208$15966 g$208$19803) (begin '#f ((lambda (g$208$19805) (if g$208$19805 (begin '#f ((lambda (g$208$19807) (if g$208$19807 (begin '#f (append g$208$19805 g$208$19807)) '#f)) ((lambda (g$208$19809) (if (equal? (g$208$16002 g$208$19809) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19803)))) '#f)) ((lambda (g$208$19811) (if (g$208$15966 g$208$19811) (begin '#f ((lambda (g$208$19813) (if g$208$19813 (begin '#f ((lambda (g$208$19815) (if g$208$19815 (begin '#f (append g$208$19813 g$208$19815)) '#f)) ((lambda (g$208$19817) (if (g$208$15966 g$208$19817) (begin '#f ((lambda (g$208$19819) (if g$208$19819 (begin '#f ((lambda (g$208$19821) (if g$208$19821 (begin '#f (append g$208$19819 g$208$19821)) '#f)) ((lambda (g$208$19823) (if (equal? (g$208$16002 g$208$19823) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19817)))) '#f)) ((lambda (g$208$19825) (list g$208$19825)) (g$208$15974 g$208$19817)))) '#f)) (g$208$15976 g$208$19811)))) '#f)) ((lambda (g$208$19827) (if (g$208$15966 g$208$19827) (begin '#f ((lambda (g$208$19829) (if g$208$19829 (begin '#f ((lambda (g$208$19831) (if g$208$19831 (begin '#f (append g$208$19829 g$208$19831)) '#f)) ((lambda (g$208$19833) (if (g$208$15966 g$208$19833) (begin '#f ((lambda (g$208$19835) (if g$208$19835 (begin '#f ((lambda (g$208$19837) (if g$208$19837 (begin '#f (append g$208$19835 g$208$19837)) '#f)) ((lambda (g$208$19839) (if (g$208$15966 g$208$19839) (begin '#f ((lambda (g$208$19841) (if g$208$19841 (begin '#f ((lambda (g$208$19843) (if g$208$19843 (begin '#f (append g$208$19841 g$208$19843)) '#f)) ((lambda (g$208$19845) (if (equal? (g$208$16002 g$208$19845) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19839)))) '#f)) ((lambda (g$208$19847) (list g$208$19847)) (g$208$15974 g$208$19839)))) '#f)) (g$208$15976 g$208$19833)))) '#f)) ((lambda (g$208$19849) (list g$208$19849)) (g$208$15974 g$208$19833)))) '#f)) (g$208$15976 g$208$19827)))) '#f)) ((lambda (g$208$19851) (if (g$208$15980 g$208$19851) (if (g$208$15988 g$208$19851 (g$208$16466 'set!)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$19827)))) '#f)) (g$208$15974 g$208$19811)))) '#f)) (g$208$15974 g$208$19803)))) '#f)) (g$208$15976 g$208$19797)))) '#f)) ((lambda (g$208$19853) (if (g$208$15966 g$208$19853) (begin '#f ((lambda (g$208$19855) (if g$208$19855 (begin '#f ((lambda (g$208$19857) (if g$208$19857 (begin '#f (append g$208$19855 g$208$19857)) '#f)) ((lambda (g$208$19859) (if (g$208$15966 g$208$19859) (begin '#f ((lambda (g$208$19861) (if g$208$19861 (begin '#f ((lambda (g$208$19863) (if g$208$19863 (begin '#f (append g$208$19861 g$208$19863)) '#f)) ((lambda (g$208$19865) (if (equal? (g$208$16002 g$208$19865) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19859)))) '#f)) ((lambda (g$208$19867) (list g$208$19867)) (g$208$15974 g$208$19859)))) '#f)) (g$208$15976 g$208$19853)))) '#f)) ((lambda (g$208$19869) (list g$208$19869)) (g$208$15974 g$208$19853)))) '#f)) (g$208$15974 g$208$19797)))) '#f)) (g$208$15976 g$208$19791)))) '#f)) ((lambda (g$208$19871) '()) (g$208$15974 g$208$19791)))) '#f)) g$208$19767))) g$208$19759))) ((lambda (g$208$19873) (if (g$208$15966 g$208$19873) (begin '#f ((lambda (g$208$19875) (if g$208$19875 (begin '#f ((lambda (g$208$19877) (if g$208$19877 (begin '#f (append g$208$19875 g$208$19877)) '#f)) ((lambda (g$208$19879) (if (g$208$15966 g$208$19879) (begin '#f ((lambda (g$208$19881) (if g$208$19881 (begin '#f ((lambda (g$208$19883) (if g$208$19883 (begin '#f (append g$208$19881 g$208$19883)) '#f)) ((lambda (g$208$19885) (if (equal? (g$208$16002 g$208$19885) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19879)))) '#f)) ((lambda (g$208$19887) (list g$208$19887)) (g$208$15974 g$208$19879)))) '#f)) (g$208$15976 g$208$19873)))) '#f)) ((lambda (g$208$19889) '()) (g$208$15974 g$208$19873)))) '#f)) g$208$19759))) g$208$19757))) (set! g$208$16536 (lambda (g$208$19891) ((lambda (g$208$19893) (begin (set! g$208$19893 (lambda (g$208$20023) ((lambda (g$208$20025) ((lambda (g$208$20027) (if (if g$208$20027 (begin '#f (apply (lambda (g$208$20029 g$208$20030) '#t) g$208$20027)) '#f) (apply (lambda (g$208$20033 g$208$20034) (list g$208$20033 g$208$20034 g$208$20033)) g$208$20027) ((lambda (g$208$20037) ((lambda (g$208$20039) (if (if g$208$20039 (begin '#f (apply (lambda (g$208$20041 g$208$20042 g$208$20043) '#t) g$208$20039)) '#f) (apply (lambda (g$208$20047 g$208$20048 g$208$20049) (list g$208$20047 g$208$20048 g$208$20049)) g$208$20039) ((lambda (g$208$20053) ((lambda (g$208$20055) (if (if g$208$20055 (begin '#f (apply (lambda () '#t) g$208$20055)) '#f) (apply (lambda () (g$208$16715 '#f '"invalid binding" g$208$19891)) g$208$20055) (g$208$16715 '#f '"invalid syntax" g$208$20053))) ((lambda (g$208$20057) '()) g$208$20053))) g$208$20037))) ((lambda (g$208$20059) (if (g$208$15966 g$208$20059) (begin '#f ((lambda (g$208$20061) (if g$208$20061 (begin '#f ((lambda (g$208$20063) (if g$208$20063 (begin '#f (append g$208$20061 g$208$20063)) '#f)) ((lambda (g$208$20065) (if (g$208$15966 g$208$20065) (begin '#f ((lambda (g$208$20067) (if g$208$20067 (begin '#f ((lambda (g$208$20069) (if g$208$20069 (begin '#f (append g$208$20067 g$208$20069)) '#f)) ((lambda (g$208$20071) (if (g$208$15966 g$208$20071) (begin '#f ((lambda (g$208$20073) (if g$208$20073 (begin '#f ((lambda (g$208$20075) (if g$208$20075 (begin '#f (append g$208$20073 g$208$20075)) '#f)) ((lambda (g$208$20077) (if (equal? (g$208$16002 g$208$20077) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20071)))) '#f)) ((lambda (g$208$20079) (list g$208$20079)) (g$208$15974 g$208$20071)))) '#f)) (g$208$15976 g$208$20065)))) '#f)) ((lambda (g$208$20081) (list g$208$20081)) (g$208$15974 g$208$20065)))) '#f)) (g$208$15976 g$208$20059)))) '#f)) ((lambda (g$208$20083) (list g$208$20083)) (g$208$15974 g$208$20059)))) '#f)) g$208$20037))) g$208$20025))) ((lambda (g$208$20085) (if (g$208$15966 g$208$20085) (begin '#f ((lambda (g$208$20087) (if g$208$20087 (begin '#f ((lambda (g$208$20089) (if g$208$20089 (begin '#f (append g$208$20087 g$208$20089)) '#f)) ((lambda (g$208$20091) (if (g$208$15966 g$208$20091) (begin '#f ((lambda (g$208$20093) (if g$208$20093 (begin '#f ((lambda (g$208$20095) (if g$208$20095 (begin '#f (append g$208$20093 g$208$20095)) '#f)) ((lambda (g$208$20097) (if (equal? (g$208$16002 g$208$20097) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20091)))) '#f)) ((lambda (g$208$20099) (list g$208$20099)) (g$208$15974 g$208$20091)))) '#f)) (g$208$15976 g$208$20085)))) '#f)) ((lambda (g$208$20101) (list g$208$20101)) (g$208$15974 g$208$20085)))) '#f)) g$208$20025))) g$208$20023))) ((lambda (g$208$19895) ((lambda (g$208$19897) (if (if g$208$19897 (begin '#f (apply (lambda (g$208$19899 g$208$19900 g$208$19901 g$208$19902) '#t) g$208$19897)) '#f) (apply (lambda (g$208$19907 g$208$19908 g$208$19909 g$208$19910) ((lambda (g$208$19915) ((lambda (g$208$19917) (if (if g$208$19917 (begin '#f (apply (lambda (g$208$19919 g$208$19920 g$208$19921) '#t) g$208$19917)) '#f) (apply (lambda (g$208$19925 g$208$19926 g$208$19927) (if (g$208$15990 g$208$19925) (g$208$16504 (list 'letrec (list (list 'loop (list 'lambda g$208$19925 (list 'if g$208$19908 (cons 'begin (cons '(if #f #f) g$208$19909)) (cons 'begin (append g$208$19910 (list (cons 'loop g$208$19927)))))))) (cons 'loop g$208$19926))) (g$208$16715 '#f '"invalid bindings" g$208$19891))) g$208$19917) (g$208$16715 '#f '"invalid syntax" g$208$19915))) ((letrec ((g$208$19931 (lambda (g$208$19933) (if (g$208$15966 g$208$19933) ((lambda (g$208$19935) (if g$208$19935 (begin '#f ((lambda (g$208$19937) (if g$208$19937 (begin '#f (map cons g$208$19935 g$208$19937)) '#f)) (g$208$19931 (g$208$15976 g$208$19933)))) '#f)) ((lambda (g$208$19939) (if (g$208$15966 g$208$19939) (begin '#f ((lambda (g$208$19941) (if g$208$19941 (begin '#f ((lambda (g$208$19943) (if g$208$19943 (begin '#f (append g$208$19941 g$208$19943)) '#f)) ((lambda (g$208$19945) (if (g$208$15966 g$208$19945) (begin '#f ((lambda (g$208$19947) (if g$208$19947 (begin '#f ((lambda (g$208$19949) (if g$208$19949 (begin '#f (append g$208$19947 g$208$19949)) '#f)) ((lambda (g$208$19951) (if (g$208$15966 g$208$19951) (begin '#f ((lambda (g$208$19953) (if g$208$19953 (begin '#f ((lambda (g$208$19955) (if g$208$19955 (begin '#f (append g$208$19953 g$208$19955)) '#f)) ((lambda (g$208$19957) (if (equal? (g$208$16002 g$208$19957) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$19951)))) '#f)) ((lambda (g$208$19959) (list g$208$19959)) (g$208$15974 g$208$19951)))) '#f)) (g$208$15976 g$208$19945)))) '#f)) ((lambda (g$208$19961) (list g$208$19961)) (g$208$15974 g$208$19945)))) '#f)) (g$208$15976 g$208$19939)))) '#f)) ((lambda (g$208$19963) (list g$208$19963)) (g$208$15974 g$208$19939)))) '#f)) (g$208$15974 g$208$19933))) (if (g$208$15970 g$208$19933) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f))))) g$208$19931) g$208$19915))) (map g$208$19893 g$208$19907))) g$208$19897) (g$208$16715 '#f '"invalid syntax" g$208$19895))) ((lambda (g$208$19965) (if (g$208$15966 g$208$19965) (begin '#f ((lambda (g$208$19967) (if g$208$19967 (begin '#f ((lambda (g$208$19969) (if g$208$19969 (begin '#f (append g$208$19967 g$208$19969)) '#f)) ((lambda (g$208$19971) (if (g$208$15966 g$208$19971) (begin '#f ((lambda (g$208$19973) (if g$208$19973 (begin '#f ((lambda (g$208$19975) (if g$208$19975 (begin '#f (append g$208$19973 g$208$19975)) '#f)) ((lambda (g$208$19977) (if (g$208$15966 g$208$19977) (begin '#f ((lambda (g$208$19979) (if g$208$19979 (begin '#f ((lambda (g$208$19981) (if g$208$19981 (begin '#f (append g$208$19979 g$208$19981)) '#f)) ((letrec ((g$208$19983 (lambda (g$208$19985) (if (g$208$15966 g$208$19985) ((lambda (g$208$19987) (if g$208$19987 (begin '#f ((lambda (g$208$19989) (if g$208$19989 (begin '#f (map cons g$208$19987 g$208$19989)) '#f)) (g$208$19983 (g$208$15976 g$208$19985)))) '#f)) ((lambda (g$208$19991) (list g$208$19991)) (g$208$15974 g$208$19985))) (if (g$208$15970 g$208$19985) (list (begin 'command* '())) '#f))))) g$208$19983) (g$208$15976 g$208$19977)))) '#f)) ((lambda (g$208$19993) (if (g$208$15966 g$208$19993) (begin '#f ((lambda (g$208$19995) (if g$208$19995 (begin '#f ((lambda (g$208$19997) (if g$208$19997 (begin '#f (append g$208$19995 g$208$19997)) '#f)) ((letrec ((g$208$19999 (lambda (g$208$20001) (if (g$208$15966 g$208$20001) ((lambda (g$208$20003) (if g$208$20003 (begin '#f ((lambda (g$208$20005) (if g$208$20005 (begin '#f (map cons g$208$20003 g$208$20005)) '#f)) (g$208$19999 (g$208$15976 g$208$20001)))) '#f)) ((lambda (g$208$20007) (list g$208$20007)) (g$208$15974 g$208$20001))) (if (g$208$15970 g$208$20001) (list (begin 'expr* '())) '#f))))) g$208$19999) (g$208$15976 g$208$19993)))) '#f)) ((lambda (g$208$20009) (list g$208$20009)) (g$208$15974 g$208$19993)))) '#f)) (g$208$15974 g$208$19977)))) '#f)) (g$208$15976 g$208$19971)))) '#f)) ((letrec ((g$208$20011 (lambda (g$208$20013) (if (g$208$15966 g$208$20013) ((lambda (g$208$20015) (if g$208$20015 (begin '#f ((lambda (g$208$20017) (if g$208$20017 (begin '#f (map cons g$208$20015 g$208$20017)) '#f)) (g$208$20011 (g$208$15976 g$208$20013)))) '#f)) ((lambda (g$208$20019) (list g$208$20019)) (g$208$15974 g$208$20013))) (if (g$208$15970 g$208$20013) (list (begin 'binding* '())) '#f))))) g$208$20011) (g$208$15974 g$208$19971)))) '#f)) (g$208$15976 g$208$19965)))) '#f)) ((lambda (g$208$20021) '()) (g$208$15974 g$208$19965)))) '#f)) g$208$19895))) g$208$19891))) '#f))) (set! g$208$16538 (lambda (g$208$20103) ((lambda (g$208$20105) ((lambda (g$208$20107) (if (if g$208$20107 (begin '#f (apply (lambda (g$208$20109 g$208$20110 g$208$20111 g$208$20112) (for-all g$208$15980 g$208$20109)) g$208$20107)) '#f) (apply (lambda (g$208$20117 g$208$20118 g$208$20119 g$208$20120) (g$208$16504 ((letrec ((g$208$20125 (lambda (g$208$20127) (if (null? g$208$20127) (cons 'let (cons '() (cons g$208$20119 g$208$20120))) (list 'let (list (car g$208$20127)) (g$208$20125 (cdr g$208$20127))))))) g$208$20125) (map list g$208$20117 g$208$20118)))) g$208$20107) (g$208$16715 '#f '"invalid syntax" g$208$20105))) ((lambda (g$208$20129) (if (g$208$15966 g$208$20129) (begin '#f ((lambda (g$208$20131) (if g$208$20131 (begin '#f ((lambda (g$208$20133) (if g$208$20133 (begin '#f (append g$208$20131 g$208$20133)) '#f)) ((lambda (g$208$20135) (if (g$208$15966 g$208$20135) (begin '#f ((lambda (g$208$20137) (if g$208$20137 (begin '#f ((lambda (g$208$20139) (if g$208$20139 (begin '#f (append g$208$20137 g$208$20139)) '#f)) ((lambda (g$208$20141) (if (g$208$15966 g$208$20141) (begin '#f ((lambda (g$208$20143) (if g$208$20143 (begin '#f ((lambda (g$208$20145) (if g$208$20145 (begin '#f (append g$208$20143 g$208$20145)) '#f)) ((letrec ((g$208$20147 (lambda (g$208$20149) (if (g$208$15966 g$208$20149) ((lambda (g$208$20151) (if g$208$20151 (begin '#f ((lambda (g$208$20153) (if g$208$20153 (begin '#f (map cons g$208$20151 g$208$20153)) '#f)) (g$208$20147 (g$208$15976 g$208$20149)))) '#f)) ((lambda (g$208$20155) (list g$208$20155)) (g$208$15974 g$208$20149))) (if (g$208$15970 g$208$20149) (list (begin 'b* '())) '#f))))) g$208$20147) (g$208$15976 g$208$20141)))) '#f)) ((lambda (g$208$20157) (list g$208$20157)) (g$208$15974 g$208$20141)))) '#f)) (g$208$15976 g$208$20135)))) '#f)) ((letrec ((g$208$20159 (lambda (g$208$20161) (if (g$208$15966 g$208$20161) ((lambda (g$208$20163) (if g$208$20163 (begin '#f ((lambda (g$208$20165) (if g$208$20165 (begin '#f (map cons g$208$20163 g$208$20165)) '#f)) (g$208$20159 (g$208$15976 g$208$20161)))) '#f)) ((lambda (g$208$20167) (if (g$208$15966 g$208$20167) (begin '#f ((lambda (g$208$20169) (if g$208$20169 (begin '#f ((lambda (g$208$20171) (if g$208$20171 (begin '#f (append g$208$20169 g$208$20171)) '#f)) ((lambda (g$208$20173) (if (g$208$15966 g$208$20173) (begin '#f ((lambda (g$208$20175) (if g$208$20175 (begin '#f ((lambda (g$208$20177) (if g$208$20177 (begin '#f (append g$208$20175 g$208$20177)) '#f)) ((lambda (g$208$20179) (if (equal? (g$208$16002 g$208$20179) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20173)))) '#f)) ((lambda (g$208$20181) (list g$208$20181)) (g$208$15974 g$208$20173)))) '#f)) (g$208$15976 g$208$20167)))) '#f)) ((lambda (g$208$20183) (list g$208$20183)) (g$208$15974 g$208$20167)))) '#f)) (g$208$15974 g$208$20161))) (if (g$208$15970 g$208$20161) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$208$20159) (g$208$15974 g$208$20135)))) '#f)) (g$208$15976 g$208$20129)))) '#f)) ((lambda (g$208$20185) '()) (g$208$15974 g$208$20129)))) '#f)) g$208$20105))) g$208$20103))) (set! g$208$16540 (lambda (g$208$20187) ((lambda (g$208$20189) ((lambda (g$208$20191) (if (if g$208$20191 (begin '#f (apply (lambda () '#t) g$208$20191)) '#f) (apply (lambda () '#f) g$208$20191) ((lambda (g$208$20193) ((lambda (g$208$20195) (if (if g$208$20195 (begin '#f (apply (lambda (g$208$20197 g$208$20198) '#t) g$208$20195)) '#f) (apply (lambda (g$208$20201 g$208$20202) (g$208$16504 ((letrec ((g$208$20205 (lambda (g$208$20207 g$208$20208) (if (null? g$208$20208) (list 'begin '#f g$208$20207) (list 'let (list (list 't g$208$20207)) (list 'if 't 't (g$208$20205 (car g$208$20208) (cdr g$208$20208)))))))) g$208$20205) g$208$20201 g$208$20202))) g$208$20195) (g$208$16715 '#f '"invalid syntax" g$208$20193))) ((lambda (g$208$20211) (if (g$208$15966 g$208$20211) (begin '#f ((lambda (g$208$20213) (if g$208$20213 (begin '#f ((lambda (g$208$20215) (if g$208$20215 (begin '#f (append g$208$20213 g$208$20215)) '#f)) ((lambda (g$208$20217) (if (g$208$15966 g$208$20217) (begin '#f ((lambda (g$208$20219) (if g$208$20219 (begin '#f ((lambda (g$208$20221) (if g$208$20221 (begin '#f (append g$208$20219 g$208$20221)) '#f)) ((letrec ((g$208$20223 (lambda (g$208$20225) (if (g$208$15966 g$208$20225) ((lambda (g$208$20227) (if g$208$20227 (begin '#f ((lambda (g$208$20229) (if g$208$20229 (begin '#f (map cons g$208$20227 g$208$20229)) '#f)) (g$208$20223 (g$208$15976 g$208$20225)))) '#f)) ((lambda (g$208$20231) (list g$208$20231)) (g$208$15974 g$208$20225))) (if (g$208$15970 g$208$20225) (list (begin 'e* '())) '#f))))) g$208$20223) (g$208$15976 g$208$20217)))) '#f)) ((lambda (g$208$20233) (list g$208$20233)) (g$208$15974 g$208$20217)))) '#f)) (g$208$15976 g$208$20211)))) '#f)) ((lambda (g$208$20235) '()) (g$208$15974 g$208$20211)))) '#f)) g$208$20193))) g$208$20189))) ((lambda (g$208$20237) (if (g$208$15966 g$208$20237) (begin '#f ((lambda (g$208$20239) (if g$208$20239 (begin '#f ((lambda (g$208$20241) (if g$208$20241 (begin '#f (append g$208$20239 g$208$20241)) '#f)) ((lambda (g$208$20243) (if (equal? (g$208$16002 g$208$20243) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20237)))) '#f)) ((lambda (g$208$20245) '()) (g$208$15974 g$208$20237)))) '#f)) g$208$20189))) g$208$20187))) (set! g$208$16542 (lambda (g$208$20247) ((lambda (g$208$20249) ((lambda (g$208$20251) (if (if g$208$20251 (begin '#f (apply (lambda () '#t) g$208$20251)) '#f) (apply (lambda () '#t) g$208$20251) ((lambda (g$208$20253) ((lambda (g$208$20255) (if (if g$208$20255 (begin '#f (apply (lambda (g$208$20257 g$208$20258) '#t) g$208$20255)) '#f) (apply (lambda (g$208$20261 g$208$20262) (g$208$16504 ((letrec ((g$208$20265 (lambda (g$208$20267 g$208$20268) (if (null? g$208$20268) (list 'begin '#f g$208$20267) (cons 'if (cons g$208$20267 (cons (g$208$20265 (car g$208$20268) (cdr g$208$20268)) '(#f)))))))) g$208$20265) g$208$20261 g$208$20262))) g$208$20255) (g$208$16715 '#f '"invalid syntax" g$208$20253))) ((lambda (g$208$20271) (if (g$208$15966 g$208$20271) (begin '#f ((lambda (g$208$20273) (if g$208$20273 (begin '#f ((lambda (g$208$20275) (if g$208$20275 (begin '#f (append g$208$20273 g$208$20275)) '#f)) ((lambda (g$208$20277) (if (g$208$15966 g$208$20277) (begin '#f ((lambda (g$208$20279) (if g$208$20279 (begin '#f ((lambda (g$208$20281) (if g$208$20281 (begin '#f (append g$208$20279 g$208$20281)) '#f)) ((letrec ((g$208$20283 (lambda (g$208$20285) (if (g$208$15966 g$208$20285) ((lambda (g$208$20287) (if g$208$20287 (begin '#f ((lambda (g$208$20289) (if g$208$20289 (begin '#f (map cons g$208$20287 g$208$20289)) '#f)) (g$208$20283 (g$208$15976 g$208$20285)))) '#f)) ((lambda (g$208$20291) (list g$208$20291)) (g$208$15974 g$208$20285))) (if (g$208$15970 g$208$20285) (list (begin 'e* '())) '#f))))) g$208$20283) (g$208$15976 g$208$20277)))) '#f)) ((lambda (g$208$20293) (list g$208$20293)) (g$208$15974 g$208$20277)))) '#f)) (g$208$15976 g$208$20271)))) '#f)) ((lambda (g$208$20295) '()) (g$208$15974 g$208$20271)))) '#f)) g$208$20253))) g$208$20249))) ((lambda (g$208$20297) (if (g$208$15966 g$208$20297) (begin '#f ((lambda (g$208$20299) (if g$208$20299 (begin '#f ((lambda (g$208$20301) (if g$208$20301 (begin '#f (append g$208$20299 g$208$20301)) '#f)) ((lambda (g$208$20303) (if (equal? (g$208$16002 g$208$20303) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20297)))) '#f)) ((lambda (g$208$20305) '()) (g$208$15974 g$208$20297)))) '#f)) g$208$20249))) g$208$20247))) (set! g$208$16544 (lambda (g$208$20307) ((lambda (g$208$20309) ((lambda (g$208$20311) (if (if g$208$20311 (begin '#f (apply (lambda (g$208$20313 g$208$20314) '#t) g$208$20311)) '#f) (apply (lambda (g$208$20317 g$208$20318) (g$208$16504 ((letrec ((g$208$20321 (lambda (g$208$20323 g$208$20324) (if (null? g$208$20324) ((lambda (g$208$20327) ((lambda (g$208$20329) (if (if g$208$20329 (begin '#f (apply (lambda (g$208$20331 g$208$20332) '#t) g$208$20329)) '#f) (apply (lambda (g$208$20335 g$208$20336) (cons 'begin (cons g$208$20335 g$208$20336))) g$208$20329) ((lambda (g$208$20339) ((lambda (g$208$20341) (if (if g$208$20341 (begin '#f (apply (lambda (g$208$20343 g$208$20344) '#t) g$208$20341)) '#f) (apply (lambda (g$208$20347 g$208$20348) (list 'let (list (list 't g$208$20347)) (list 'if 't (cons g$208$20348 '(t))))) g$208$20341) ((lambda (g$208$20351) ((lambda (g$208$20353) (if (if g$208$20353 (begin '#f (apply (lambda (g$208$20355) '#t) g$208$20353)) '#f) (apply (lambda (g$208$20357) (cons 'or (cons g$208$20357 '((if #f #f))))) g$208$20353) ((lambda (g$208$20359) ((lambda (g$208$20361) (if (if g$208$20361 (begin '#f (apply (lambda (g$208$20363 g$208$20364) '#t) g$208$20361)) '#f) (apply (lambda (g$208$20367 g$208$20368) (list 'if g$208$20367 (cons 'begin g$208$20368))) g$208$20361) ((lambda (g$208$20371) ((lambda (g$208$20373) (if (if g$208$20373 (begin '#f (apply (lambda () '#t) g$208$20373)) '#f) (apply (lambda () (g$208$16715 '#f '"invalid last clause" g$208$20307)) g$208$20373) (g$208$16715 '#f '"invalid syntax" g$208$20371))) ((lambda (g$208$20375) '()) g$208$20371))) g$208$20359))) ((lambda (g$208$20377) (if (g$208$15966 g$208$20377) (begin '#f ((lambda (g$208$20379) (if g$208$20379 (begin '#f ((lambda (g$208$20381) (if g$208$20381 (begin '#f (append g$208$20379 g$208$20381)) '#f)) ((letrec ((g$208$20383 (lambda (g$208$20385) (if (g$208$15966 g$208$20385) ((lambda (g$208$20387) (if g$208$20387 (begin '#f ((lambda (g$208$20389) (if g$208$20389 (begin '#f (map cons g$208$20387 g$208$20389)) '#f)) (g$208$20383 (g$208$15976 g$208$20385)))) '#f)) ((lambda (g$208$20391) (list g$208$20391)) (g$208$15974 g$208$20385))) (if (g$208$15970 g$208$20385) (list (begin 'e* '())) '#f))))) g$208$20383) (g$208$15976 g$208$20377)))) '#f)) ((lambda (g$208$20393) (list g$208$20393)) (g$208$15974 g$208$20377)))) '#f)) g$208$20359))) g$208$20351))) ((lambda (g$208$20395) (if (g$208$15966 g$208$20395) (begin '#f ((lambda (g$208$20397) (if g$208$20397 (begin '#f ((lambda (g$208$20399) (if g$208$20399 (begin '#f (append g$208$20397 g$208$20399)) '#f)) ((lambda (g$208$20401) (if (equal? (g$208$16002 g$208$20401) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20395)))) '#f)) ((lambda (g$208$20403) (list g$208$20403)) (g$208$15974 g$208$20395)))) '#f)) g$208$20351))) g$208$20339))) ((lambda (g$208$20405) (if (g$208$15966 g$208$20405) (begin '#f ((lambda (g$208$20407) (if g$208$20407 (begin '#f ((lambda (g$208$20409) (if g$208$20409 (begin '#f (append g$208$20407 g$208$20409)) '#f)) ((lambda (g$208$20411) (if (g$208$15966 g$208$20411) (begin '#f ((lambda (g$208$20413) (if g$208$20413 (begin '#f ((lambda (g$208$20415) (if g$208$20415 (begin '#f (append g$208$20413 g$208$20415)) '#f)) ((lambda (g$208$20417) (if (g$208$15966 g$208$20417) (begin '#f ((lambda (g$208$20419) (if g$208$20419 (begin '#f ((lambda (g$208$20421) (if g$208$20421 (begin '#f (append g$208$20419 g$208$20421)) '#f)) ((lambda (g$208$20423) (if (equal? (g$208$16002 g$208$20423) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20417)))) '#f)) ((lambda (g$208$20425) (list g$208$20425)) (g$208$15974 g$208$20417)))) '#f)) (g$208$15976 g$208$20411)))) '#f)) ((lambda (g$208$20427) (if (g$208$15980 g$208$20427) (if (g$208$15988 g$208$20427 (g$208$16466 '=>)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$20411)))) '#f)) (g$208$15976 g$208$20405)))) '#f)) ((lambda (g$208$20429) (list g$208$20429)) (g$208$15974 g$208$20405)))) '#f)) g$208$20339))) g$208$20327))) ((lambda (g$208$20431) (if (g$208$15966 g$208$20431) (begin '#f ((lambda (g$208$20433) (if g$208$20433 (begin '#f ((lambda (g$208$20435) (if g$208$20435 (begin '#f (append g$208$20433 g$208$20435)) '#f)) ((lambda (g$208$20437) (if (g$208$15966 g$208$20437) (begin '#f ((lambda (g$208$20439) (if g$208$20439 (begin '#f ((lambda (g$208$20441) (if g$208$20441 (begin '#f (append g$208$20439 g$208$20441)) '#f)) ((letrec ((g$208$20443 (lambda (g$208$20445) (if (g$208$15966 g$208$20445) ((lambda (g$208$20447) (if g$208$20447 (begin '#f ((lambda (g$208$20449) (if g$208$20449 (begin '#f (map cons g$208$20447 g$208$20449)) '#f)) (g$208$20443 (g$208$15976 g$208$20445)))) '#f)) ((lambda (g$208$20451) (list g$208$20451)) (g$208$15974 g$208$20445))) (if (g$208$15970 g$208$20445) (list (begin 'e* '())) '#f))))) g$208$20443) (g$208$15976 g$208$20437)))) '#f)) ((lambda (g$208$20453) (list g$208$20453)) (g$208$15974 g$208$20437)))) '#f)) (g$208$15976 g$208$20431)))) '#f)) ((lambda (g$208$20455) (if (g$208$15980 g$208$20455) (if (g$208$15988 g$208$20455 (g$208$16466 'else)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$20431)))) '#f)) g$208$20327))) g$208$20323) ((lambda (g$208$20457) ((lambda (g$208$20459) (if (if g$208$20459 (begin '#f (apply (lambda (g$208$20461 g$208$20462) '#t) g$208$20459)) '#f) (apply (lambda (g$208$20465 g$208$20466) (g$208$16715 '#f '"incorrect position of keyword else" g$208$20307)) g$208$20459) ((lambda (g$208$20469) ((lambda (g$208$20471) (if (if g$208$20471 (begin '#f (apply (lambda (g$208$20473 g$208$20474) '#t) g$208$20471)) '#f) (apply (lambda (g$208$20477 g$208$20478) (list 'let (list (list 't g$208$20477)) (list 'if 't (cons g$208$20478 '(t)) (g$208$20321 (car g$208$20324) (cdr g$208$20324))))) g$208$20471) ((lambda (g$208$20481) ((lambda (g$208$20483) (if (if g$208$20483 (begin '#f (apply (lambda (g$208$20485) '#t) g$208$20483)) '#f) (apply (lambda (g$208$20487) (list 'or g$208$20487 (g$208$20321 (car g$208$20324) (cdr g$208$20324)))) g$208$20483) ((lambda (g$208$20489) ((lambda (g$208$20491) (if (if g$208$20491 (begin '#f (apply (lambda (g$208$20493 g$208$20494) '#t) g$208$20491)) '#f) (apply (lambda (g$208$20497 g$208$20498) (list 'if g$208$20497 (cons 'begin g$208$20498) (g$208$20321 (car g$208$20324) (cdr g$208$20324)))) g$208$20491) ((lambda (g$208$20501) ((lambda (g$208$20503) (if (if g$208$20503 (begin '#f (apply (lambda () '#t) g$208$20503)) '#f) (apply (lambda () (g$208$16715 '#f '"invalid last clause" g$208$20307)) g$208$20503) (g$208$16715 '#f '"invalid syntax" g$208$20501))) ((lambda (g$208$20505) '()) g$208$20501))) g$208$20489))) ((lambda (g$208$20507) (if (g$208$15966 g$208$20507) (begin '#f ((lambda (g$208$20509) (if g$208$20509 (begin '#f ((lambda (g$208$20511) (if g$208$20511 (begin '#f (append g$208$20509 g$208$20511)) '#f)) ((letrec ((g$208$20513 (lambda (g$208$20515) (if (g$208$15966 g$208$20515) ((lambda (g$208$20517) (if g$208$20517 (begin '#f ((lambda (g$208$20519) (if g$208$20519 (begin '#f (map cons g$208$20517 g$208$20519)) '#f)) (g$208$20513 (g$208$15976 g$208$20515)))) '#f)) ((lambda (g$208$20521) (list g$208$20521)) (g$208$15974 g$208$20515))) (if (g$208$15970 g$208$20515) (list (begin 'e* '())) '#f))))) g$208$20513) (g$208$15976 g$208$20507)))) '#f)) ((lambda (g$208$20523) (list g$208$20523)) (g$208$15974 g$208$20507)))) '#f)) g$208$20489))) g$208$20481))) ((lambda (g$208$20525) (if (g$208$15966 g$208$20525) (begin '#f ((lambda (g$208$20527) (if g$208$20527 (begin '#f ((lambda (g$208$20529) (if g$208$20529 (begin '#f (append g$208$20527 g$208$20529)) '#f)) ((lambda (g$208$20531) (if (equal? (g$208$16002 g$208$20531) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20525)))) '#f)) ((lambda (g$208$20533) (list g$208$20533)) (g$208$15974 g$208$20525)))) '#f)) g$208$20481))) g$208$20469))) ((lambda (g$208$20535) (if (g$208$15966 g$208$20535) (begin '#f ((lambda (g$208$20537) (if g$208$20537 (begin '#f ((lambda (g$208$20539) (if g$208$20539 (begin '#f (append g$208$20537 g$208$20539)) '#f)) ((lambda (g$208$20541) (if (g$208$15966 g$208$20541) (begin '#f ((lambda (g$208$20543) (if g$208$20543 (begin '#f ((lambda (g$208$20545) (if g$208$20545 (begin '#f (append g$208$20543 g$208$20545)) '#f)) ((lambda (g$208$20547) (if (g$208$15966 g$208$20547) (begin '#f ((lambda (g$208$20549) (if g$208$20549 (begin '#f ((lambda (g$208$20551) (if g$208$20551 (begin '#f (append g$208$20549 g$208$20551)) '#f)) ((lambda (g$208$20553) (if (equal? (g$208$16002 g$208$20553) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20547)))) '#f)) ((lambda (g$208$20555) (list g$208$20555)) (g$208$15974 g$208$20547)))) '#f)) (g$208$15976 g$208$20541)))) '#f)) ((lambda (g$208$20557) (if (g$208$15980 g$208$20557) (if (g$208$15988 g$208$20557 (g$208$16466 '=>)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$20541)))) '#f)) (g$208$15976 g$208$20535)))) '#f)) ((lambda (g$208$20559) (list g$208$20559)) (g$208$15974 g$208$20535)))) '#f)) g$208$20469))) g$208$20457))) ((lambda (g$208$20561) (if (g$208$15966 g$208$20561) (begin '#f ((lambda (g$208$20563) (if g$208$20563 (begin '#f ((lambda (g$208$20565) (if g$208$20565 (begin '#f (append g$208$20563 g$208$20565)) '#f)) ((lambda (g$208$20567) (if (g$208$15966 g$208$20567) (begin '#f ((lambda (g$208$20569) (if g$208$20569 (begin '#f ((lambda (g$208$20571) (if g$208$20571 (begin '#f (append g$208$20569 g$208$20571)) '#f)) ((letrec ((g$208$20573 (lambda (g$208$20575) (if (g$208$15966 g$208$20575) ((lambda (g$208$20577) (if g$208$20577 (begin '#f ((lambda (g$208$20579) (if g$208$20579 (begin '#f (map cons g$208$20577 g$208$20579)) '#f)) (g$208$20573 (g$208$15976 g$208$20575)))) '#f)) ((lambda (g$208$20581) (list g$208$20581)) (g$208$15974 g$208$20575))) (if (g$208$15970 g$208$20575) (list (begin 'e* '())) '#f))))) g$208$20573) (g$208$15976 g$208$20567)))) '#f)) ((lambda (g$208$20583) (list g$208$20583)) (g$208$15974 g$208$20567)))) '#f)) (g$208$15976 g$208$20561)))) '#f)) ((lambda (g$208$20585) (if (g$208$15980 g$208$20585) (if (g$208$15988 g$208$20585 (g$208$16466 'else)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$20561)))) '#f)) g$208$20457))) g$208$20323))))) g$208$20321) g$208$20317 g$208$20318))) g$208$20311) (g$208$16715 '#f '"invalid syntax" g$208$20309))) ((lambda (g$208$20587) (if (g$208$15966 g$208$20587) (begin '#f ((lambda (g$208$20589) (if g$208$20589 (begin '#f ((lambda (g$208$20591) (if g$208$20591 (begin '#f (append g$208$20589 g$208$20591)) '#f)) ((lambda (g$208$20593) (if (g$208$15966 g$208$20593) (begin '#f ((lambda (g$208$20595) (if g$208$20595 (begin '#f ((lambda (g$208$20597) (if g$208$20597 (begin '#f (append g$208$20595 g$208$20597)) '#f)) ((letrec ((g$208$20599 (lambda (g$208$20601) (if (g$208$15966 g$208$20601) ((lambda (g$208$20603) (if g$208$20603 (begin '#f ((lambda (g$208$20605) (if g$208$20605 (begin '#f (map cons g$208$20603 g$208$20605)) '#f)) (g$208$20599 (g$208$15976 g$208$20601)))) '#f)) ((lambda (g$208$20607) (list g$208$20607)) (g$208$15974 g$208$20601))) (if (g$208$15970 g$208$20601) (list (begin 'cls* '())) '#f))))) g$208$20599) (g$208$15976 g$208$20593)))) '#f)) ((lambda (g$208$20609) (list g$208$20609)) (g$208$15974 g$208$20593)))) '#f)) (g$208$15976 g$208$20587)))) '#f)) ((lambda (g$208$20611) '()) (g$208$15974 g$208$20587)))) '#f)) g$208$20309))) g$208$20307))) (set! g$208$16546 (lambda (g$208$20613 g$208$20614 g$208$20615) ((lambda (g$208$20619) (begin (if (if (string? g$208$20619) (begin '#f (g$208$15980 g$208$20614)) '#f) (void) (g$208$16715 '#f '"invalid syntax" g$208$20613)) (cons (g$208$16504 'begin) (with-input-from-file g$208$20619 (lambda () ((letrec ((g$208$20621 (lambda (g$208$20623) ((lambda (g$208$20625) (if (eof-object? g$208$20625) (reverse g$208$20623) (g$208$20621 (cons (g$208$15946 g$208$20614 g$208$20625) g$208$20623)))) (read))))) g$208$20621) '())))))) (g$208$16002 g$208$20615)))) (set! g$208$16548 (lambda (g$208$20627) ((lambda (g$208$20629) ((lambda (g$208$20631) (if (if g$208$20631 (begin '#f (apply (lambda (g$208$20633 g$208$20634) '#t) g$208$20631)) '#f) (apply (lambda (g$208$20637 g$208$20638) (g$208$16546 g$208$20627 g$208$20637 g$208$20638)) g$208$20631) (g$208$16715 '#f '"invalid syntax" g$208$20629))) ((lambda (g$208$20641) (if (g$208$15966 g$208$20641) (begin '#f ((lambda (g$208$20643) (if g$208$20643 (begin '#f ((lambda (g$208$20645) (if g$208$20645 (begin '#f (append g$208$20643 g$208$20645)) '#f)) ((lambda (g$208$20647) (if (g$208$15966 g$208$20647) (begin '#f ((lambda (g$208$20649) (if g$208$20649 (begin '#f ((lambda (g$208$20651) (if g$208$20651 (begin '#f (append g$208$20649 g$208$20651)) '#f)) ((lambda (g$208$20653) (if (equal? (g$208$16002 g$208$20653) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20647)))) '#f)) ((lambda (g$208$20655) (list g$208$20655)) (g$208$15974 g$208$20647)))) '#f)) (g$208$15976 g$208$20641)))) '#f)) ((lambda (g$208$20657) (list g$208$20657)) (g$208$15974 g$208$20641)))) '#f)) g$208$20629))) g$208$20627))) (set! g$208$16550 (lambda (g$208$20659) ((lambda (g$208$20661) ((lambda (g$208$20663) (if (if g$208$20663 (begin '#f (apply (lambda (g$208$20665 g$208$20666) '#t) g$208$20663)) '#f) (apply (lambda (g$208$20669 g$208$20670) (g$208$16546 g$208$20659 g$208$20669 g$208$20670)) g$208$20663) (g$208$16715 '#f '"invalid syntax" g$208$20661))) ((lambda (g$208$20673) (if (g$208$15966 g$208$20673) (begin '#f ((lambda (g$208$20675) (if g$208$20675 (begin '#f ((lambda (g$208$20677) (if g$208$20677 (begin '#f (append g$208$20675 g$208$20677)) '#f)) ((lambda (g$208$20679) (if (g$208$15966 g$208$20679) (begin '#f ((lambda (g$208$20681) (if g$208$20681 (begin '#f ((lambda (g$208$20683) (if g$208$20683 (begin '#f (append g$208$20681 g$208$20683)) '#f)) ((lambda (g$208$20685) (if (g$208$15966 g$208$20685) (begin '#f ((lambda (g$208$20687) (if g$208$20687 (begin '#f ((lambda (g$208$20689) (if g$208$20689 (begin '#f (append g$208$20687 g$208$20689)) '#f)) ((lambda (g$208$20691) (if (equal? (g$208$16002 g$208$20691) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20685)))) '#f)) ((lambda (g$208$20693) (list g$208$20693)) (g$208$15974 g$208$20685)))) '#f)) (g$208$15976 g$208$20679)))) '#f)) ((lambda (g$208$20695) (list g$208$20695)) (g$208$15974 g$208$20679)))) '#f)) (g$208$15976 g$208$20673)))) '#f)) ((lambda (g$208$20697) '()) (g$208$15974 g$208$20673)))) '#f)) g$208$20661))) g$208$20659))) (set! g$208$16552 (lambda (g$208$20699) ((lambda (g$208$20701) ((lambda (g$208$20703) (if (if g$208$20703 (begin '#f (apply (lambda (g$208$20705 g$208$20706 g$208$20707) '#t) g$208$20703)) '#f) (apply (lambda (g$208$20711 g$208$20712 g$208$20713) (begin (if (for-all (lambda (g$208$20717) (if (g$208$15980 g$208$20717) (if (not (g$208$15988 g$208$20717 (g$208$16466 '|...|))) (begin '#f (not (g$208$15988 g$208$20717 (g$208$16466 '_)))) '#f) '#f)) g$208$20711) (void) (g$208$16715 '#f '"invalid literals" g$208$20699)) (g$208$16504 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$208$20711 (map (lambda (g$208$20719 g$208$20720) ((lambda (g$208$20723) ((lambda (g$208$20725) (if (if g$208$20725 (begin '#f (apply (lambda (g$208$20727) '#t) g$208$20725)) '#f) (apply (lambda (g$208$20729) (list (cons 'g g$208$20729) (list 'syntax g$208$20720))) g$208$20725) ((lambda (g$208$20731) ((lambda (g$208$20733) (if (if g$208$20733 (begin '#f (apply (lambda () '#t) g$208$20733)) '#f) (apply (lambda () (g$208$16715 '#f '"invalid syntax-rules pattern" g$208$20699 g$208$20719)) g$208$20733) (g$208$16715 '#f '"invalid syntax" g$208$20731))) ((lambda (g$208$20735) '()) g$208$20731))) g$208$20723))) ((lambda (g$208$20737) (if (g$208$15966 g$208$20737) (begin '#f ((lambda (g$208$20739) (if g$208$20739 (begin '#f ((lambda (g$208$20741) (if g$208$20741 (begin '#f (append g$208$20739 g$208$20741)) '#f)) ((lambda (g$208$20743) (list g$208$20743)) (g$208$15976 g$208$20737)))) '#f)) ((lambda (g$208$20745) '()) (g$208$15974 g$208$20737)))) '#f)) g$208$20723))) g$208$20719)) g$208$20712 g$208$20713)))))))) g$208$20703) (g$208$16715 '#f '"invalid syntax" g$208$20701))) ((lambda (g$208$20747) (if (g$208$15966 g$208$20747) (begin '#f ((lambda (g$208$20749) (if g$208$20749 (begin '#f ((lambda (g$208$20751) (if g$208$20751 (begin '#f (append g$208$20749 g$208$20751)) '#f)) ((lambda (g$208$20753) (if (g$208$15966 g$208$20753) (begin '#f ((lambda (g$208$20755) (if g$208$20755 (begin '#f ((lambda (g$208$20757) (if g$208$20757 (begin '#f (append g$208$20755 g$208$20757)) '#f)) ((letrec ((g$208$20759 (lambda (g$208$20761) (if (g$208$15966 g$208$20761) ((lambda (g$208$20763) (if g$208$20763 (begin '#f ((lambda (g$208$20765) (if g$208$20765 (begin '#f (map cons g$208$20763 g$208$20765)) '#f)) (g$208$20759 (g$208$15976 g$208$20761)))) '#f)) ((lambda (g$208$20767) (if (g$208$15966 g$208$20767) (begin '#f ((lambda (g$208$20769) (if g$208$20769 (begin '#f ((lambda (g$208$20771) (if g$208$20771 (begin '#f (append g$208$20769 g$208$20771)) '#f)) ((lambda (g$208$20773) (if (g$208$15966 g$208$20773) (begin '#f ((lambda (g$208$20775) (if g$208$20775 (begin '#f ((lambda (g$208$20777) (if g$208$20777 (begin '#f (append g$208$20775 g$208$20777)) '#f)) ((lambda (g$208$20779) (if (equal? (g$208$16002 g$208$20779) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20773)))) '#f)) ((lambda (g$208$20781) (list g$208$20781)) (g$208$15974 g$208$20773)))) '#f)) (g$208$15976 g$208$20767)))) '#f)) ((lambda (g$208$20783) (list g$208$20783)) (g$208$15974 g$208$20767)))) '#f)) (g$208$15974 g$208$20761))) (if (g$208$15970 g$208$20761) (list (begin 'pat* '()) (begin 'tmp* '())) '#f))))) g$208$20759) (g$208$15976 g$208$20753)))) '#f)) ((letrec ((g$208$20785 (lambda (g$208$20787) (if (g$208$15966 g$208$20787) ((lambda (g$208$20789) (if g$208$20789 (begin '#f ((lambda (g$208$20791) (if g$208$20791 (begin '#f (map cons g$208$20789 g$208$20791)) '#f)) (g$208$20785 (g$208$15976 g$208$20787)))) '#f)) ((lambda (g$208$20793) (list g$208$20793)) (g$208$15974 g$208$20787))) (if (g$208$15970 g$208$20787) (list (begin 'lits '())) '#f))))) g$208$20785) (g$208$15974 g$208$20753)))) '#f)) (g$208$15976 g$208$20747)))) '#f)) ((lambda (g$208$20795) '()) (g$208$15974 g$208$20747)))) '#f)) g$208$20701))) g$208$20699))) (set! g$208$16554 ((lambda () ((lambda (g$208$20836 g$208$20838 g$208$20840 g$208$20842 g$208$20844 g$208$20846) (begin (set! g$208$20836 (lambda (g$208$21486 g$208$21487) ((letrec ((g$208$21490 (lambda (g$208$21492) (if (null? g$208$21492) g$208$21487 (g$208$20838 (car g$208$21492) (g$208$21490 (cdr g$208$21492))))))) g$208$21490) g$208$21486))) (set! g$208$20838 (lambda (g$208$21380 g$208$21381) ((lambda (g$208$21384) ((lambda (g$208$21386) (if (if g$208$21386 (begin '#f (apply (lambda (g$208$21388) '#t) g$208$21386)) '#f) (apply (lambda (g$208$21390) ((lambda (g$208$21392) ((lambda (g$208$21394) (if (if g$208$21394 (begin '#f (apply (lambda (g$208$21396) '#t) g$208$21394)) '#f) (apply (lambda (g$208$21398) (list (g$208$16466 'quote) (cons g$208$21398 g$208$21390))) g$208$21394) ((lambda (g$208$21400) ((lambda (g$208$21402) (if (if g$208$21402 (begin '#f (apply (lambda () '#t) g$208$21402)) '#f) (apply (lambda () ((lambda (g$208$21404) ((lambda (g$208$21406) (if (if g$208$21406 (begin '#f (apply (lambda () '#t) g$208$21406)) '#f) (apply (lambda () (list (g$208$16466 'list) g$208$21380)) g$208$21406) ((lambda (g$208$21408) ((lambda (g$208$21410) (if (if g$208$21410 (begin '#f (apply (lambda () '#t) g$208$21410)) '#f) (apply (lambda () (list (g$208$16466 'cons) g$208$21380 g$208$21381)) g$208$21410) (g$208$16715 '#f '"invalid syntax" g$208$21408))) ((lambda (g$208$21412) '()) g$208$21408))) g$208$21404))) ((lambda (g$208$21414) (if (equal? (g$208$16002 g$208$21414) '()) (begin '#f '()) '#f)) g$208$21404))) g$208$21390)) g$208$21402) (g$208$16715 '#f '"invalid syntax" g$208$21400))) ((lambda (g$208$21416) '()) g$208$21400))) g$208$21392))) ((lambda (g$208$21418) (if (g$208$15966 g$208$21418) (begin '#f ((lambda (g$208$21420) (if g$208$21420 (begin '#f ((lambda (g$208$21422) (if g$208$21422 (begin '#f (append g$208$21420 g$208$21422)) '#f)) ((lambda (g$208$21424) (if (g$208$15966 g$208$21424) (begin '#f ((lambda (g$208$21426) (if g$208$21426 (begin '#f ((lambda (g$208$21428) (if g$208$21428 (begin '#f (append g$208$21426 g$208$21428)) '#f)) ((lambda (g$208$21430) (if (equal? (g$208$16002 g$208$21430) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21424)))) '#f)) ((lambda (g$208$21432) (list g$208$21432)) (g$208$15974 g$208$21424)))) '#f)) (g$208$15976 g$208$21418)))) '#f)) ((lambda (g$208$21434) (if (g$208$15980 g$208$21434) (if (g$208$15988 g$208$21434 (g$208$16466 'quote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21418)))) '#f)) g$208$21392))) g$208$21380)) g$208$21386) ((lambda (g$208$21436) ((lambda (g$208$21438) (if (if g$208$21438 (begin '#f (apply (lambda (g$208$21440) '#t) g$208$21438)) '#f) (apply (lambda (g$208$21442) (cons* (g$208$16466 'list) g$208$21380 g$208$21442)) g$208$21438) ((lambda (g$208$21444) ((lambda (g$208$21446) (if (if g$208$21446 (begin '#f (apply (lambda () '#t) g$208$21446)) '#f) (apply (lambda () (list (g$208$16466 'cons) g$208$21380 g$208$21381)) g$208$21446) (g$208$16715 '#f '"invalid syntax" g$208$21444))) ((lambda (g$208$21448) '()) g$208$21444))) g$208$21436))) ((lambda (g$208$21450) (if (g$208$15966 g$208$21450) (begin '#f ((lambda (g$208$21452) (if g$208$21452 (begin '#f ((lambda (g$208$21454) (if g$208$21454 (begin '#f (append g$208$21452 g$208$21454)) '#f)) ((letrec ((g$208$21456 (lambda (g$208$21458) (if (g$208$15966 g$208$21458) ((lambda (g$208$21460) (if g$208$21460 (begin '#f ((lambda (g$208$21462) (if g$208$21462 (begin '#f (map cons g$208$21460 g$208$21462)) '#f)) (g$208$21456 (g$208$15976 g$208$21458)))) '#f)) ((lambda (g$208$21464) (list g$208$21464)) (g$208$15974 g$208$21458))) (if (g$208$15970 g$208$21458) (list (begin 'stuff '())) '#f))))) g$208$21456) (g$208$15976 g$208$21450)))) '#f)) ((lambda (g$208$21466) (if (g$208$15980 g$208$21466) (if (g$208$15988 g$208$21466 (g$208$16466 'list)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21450)))) '#f)) g$208$21436))) g$208$21384))) ((lambda (g$208$21468) (if (g$208$15966 g$208$21468) (begin '#f ((lambda (g$208$21470) (if g$208$21470 (begin '#f ((lambda (g$208$21472) (if g$208$21472 (begin '#f (append g$208$21470 g$208$21472)) '#f)) ((lambda (g$208$21474) (if (g$208$15966 g$208$21474) (begin '#f ((lambda (g$208$21476) (if g$208$21476 (begin '#f ((lambda (g$208$21478) (if g$208$21478 (begin '#f (append g$208$21476 g$208$21478)) '#f)) ((lambda (g$208$21480) (if (equal? (g$208$16002 g$208$21480) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21474)))) '#f)) ((lambda (g$208$21482) (list g$208$21482)) (g$208$15974 g$208$21474)))) '#f)) (g$208$15976 g$208$21468)))) '#f)) ((lambda (g$208$21484) (if (g$208$15980 g$208$21484) (if (g$208$15988 g$208$21484 (g$208$16466 'quote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21468)))) '#f)) g$208$21384))) g$208$21381))) (set! g$208$20840 (lambda (g$208$21314 g$208$21315) ((lambda (g$208$21318) (if (null? g$208$21318) (list (g$208$16466 'quote) '()) (if (null? (cdr g$208$21318)) (car g$208$21318) (cons* (g$208$16466 'append) g$208$21318)))) ((letrec ((g$208$21320 (lambda (g$208$21322) (if (null? g$208$21322) ((lambda (g$208$21324) ((lambda (g$208$21326) (if (if g$208$21326 (begin '#f (apply (lambda () '#t) g$208$21326)) '#f) (apply (lambda () '()) g$208$21326) ((lambda (g$208$21328) ((lambda (g$208$21330) (if (if g$208$21330 (begin '#f (apply (lambda () '#t) g$208$21330)) '#f) (apply (lambda () (list g$208$21315)) g$208$21330) (g$208$16715 '#f '"invalid syntax" g$208$21328))) ((lambda (g$208$21332) '()) g$208$21328))) g$208$21324))) ((lambda (g$208$21334) (if (g$208$15966 g$208$21334) (begin '#f ((lambda (g$208$21336) (if g$208$21336 (begin '#f ((lambda (g$208$21338) (if g$208$21338 (begin '#f (append g$208$21336 g$208$21338)) '#f)) ((lambda (g$208$21340) (if (g$208$15966 g$208$21340) (begin '#f ((lambda (g$208$21342) (if g$208$21342 (begin '#f ((lambda (g$208$21344) (if g$208$21344 (begin '#f (append g$208$21342 g$208$21344)) '#f)) ((lambda (g$208$21346) (if (equal? (g$208$16002 g$208$21346) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21340)))) '#f)) ((lambda (g$208$21348) (if (equal? (g$208$16002 g$208$21348) '()) (begin '#f '()) '#f)) (g$208$15974 g$208$21340)))) '#f)) (g$208$15976 g$208$21334)))) '#f)) ((lambda (g$208$21350) (if (g$208$15980 g$208$21350) (if (g$208$15988 g$208$21350 (g$208$16466 'quote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21334)))) '#f)) g$208$21324))) g$208$21315) ((lambda (g$208$21352) ((lambda (g$208$21354) (if (if g$208$21354 (begin '#f (apply (lambda () '#t) g$208$21354)) '#f) (apply (lambda () (g$208$21320 (cdr g$208$21322))) g$208$21354) ((lambda (g$208$21356) ((lambda (g$208$21358) (if (if g$208$21358 (begin '#f (apply (lambda () '#t) g$208$21358)) '#f) (apply (lambda () (cons (car g$208$21322) (g$208$21320 (cdr g$208$21322)))) g$208$21358) (g$208$16715 '#f '"invalid syntax" g$208$21356))) ((lambda (g$208$21360) '()) g$208$21356))) g$208$21352))) ((lambda (g$208$21362) (if (g$208$15966 g$208$21362) (begin '#f ((lambda (g$208$21364) (if g$208$21364 (begin '#f ((lambda (g$208$21366) (if g$208$21366 (begin '#f (append g$208$21364 g$208$21366)) '#f)) ((lambda (g$208$21368) (if (g$208$15966 g$208$21368) (begin '#f ((lambda (g$208$21370) (if g$208$21370 (begin '#f ((lambda (g$208$21372) (if g$208$21372 (begin '#f (append g$208$21370 g$208$21372)) '#f)) ((lambda (g$208$21374) (if (equal? (g$208$16002 g$208$21374) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21368)))) '#f)) ((lambda (g$208$21376) (if (equal? (g$208$16002 g$208$21376) '()) (begin '#f '()) '#f)) (g$208$15974 g$208$21368)))) '#f)) (g$208$15976 g$208$21362)))) '#f)) ((lambda (g$208$21378) (if (g$208$15980 g$208$21378) (if (g$208$15988 g$208$21378 (g$208$16466 'quote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21362)))) '#f)) g$208$21352))) (car g$208$21322)))))) g$208$21320) g$208$21314)))) (set! g$208$20842 (lambda (g$208$21154) ((lambda (g$208$21156) ((lambda (g$208$21158) ((lambda (g$208$21160) (if (if g$208$21160 (begin '#f (apply (lambda (g$208$21162) '#t) g$208$21160)) '#f) (apply (lambda (g$208$21164) (list (g$208$16466 'quote) (list->vector g$208$21164))) g$208$21160) ((lambda (g$208$21166) ((lambda (g$208$21168) (if (if g$208$21168 (begin '#f (apply (lambda () '#t) g$208$21168)) '#f) (apply (lambda () ((letrec ((g$208$21170 (lambda (g$208$21172 g$208$21173) ((lambda (g$208$21176) ((lambda (g$208$21178) (if (if g$208$21178 (begin '#f (apply (lambda (g$208$21180) '#t) g$208$21178)) '#f) (apply (lambda (g$208$21182) (g$208$21173 (map (lambda (g$208$21184) (list (g$208$16466 'quote) g$208$21184)) g$208$21182))) g$208$21178) ((lambda (g$208$21186) ((lambda (g$208$21188) (if (if g$208$21188 (begin '#f (apply (lambda (g$208$21190) '#t) g$208$21188)) '#f) (apply (lambda (g$208$21192) (g$208$21173 g$208$21192)) g$208$21188) ((lambda (g$208$21194) ((lambda (g$208$21196) (if (if g$208$21196 (begin '#f (apply (lambda (g$208$21198 g$208$21199) '#t) g$208$21196)) '#f) (apply (lambda (g$208$21202 g$208$21203) (g$208$21170 g$208$21203 (lambda (g$208$21206) (g$208$21173 (cons g$208$21202 g$208$21206))))) g$208$21196) ((lambda (g$208$21208) ((lambda (g$208$21210) (if (if g$208$21210 (begin '#f (apply (lambda () '#t) g$208$21210)) '#f) (apply (lambda () (list (g$208$16466 'list->vector) g$208$21156)) g$208$21210) (g$208$16715 '#f '"invalid syntax" g$208$21208))) ((lambda (g$208$21212) '()) g$208$21208))) g$208$21194))) ((lambda (g$208$21214) (if (g$208$15966 g$208$21214) (begin '#f ((lambda (g$208$21216) (if g$208$21216 (begin '#f ((lambda (g$208$21218) (if g$208$21218 (begin '#f (append g$208$21216 g$208$21218)) '#f)) ((lambda (g$208$21220) (if (g$208$15966 g$208$21220) (begin '#f ((lambda (g$208$21222) (if g$208$21222 (begin '#f ((lambda (g$208$21224) (if g$208$21224 (begin '#f (append g$208$21222 g$208$21224)) '#f)) ((lambda (g$208$21226) (if (g$208$15966 g$208$21226) (begin '#f ((lambda (g$208$21228) (if g$208$21228 (begin '#f ((lambda (g$208$21230) (if g$208$21230 (begin '#f (append g$208$21228 g$208$21230)) '#f)) ((lambda (g$208$21232) (if (equal? (g$208$16002 g$208$21232) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21226)))) '#f)) ((lambda (g$208$21234) (list g$208$21234)) (g$208$15974 g$208$21226)))) '#f)) (g$208$15976 g$208$21220)))) '#f)) ((lambda (g$208$21236) (list g$208$21236)) (g$208$15974 g$208$21220)))) '#f)) (g$208$15976 g$208$21214)))) '#f)) ((lambda (g$208$21238) (if (g$208$15980 g$208$21238) (if (g$208$15988 g$208$21238 (g$208$16466 'cons)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21214)))) '#f)) g$208$21194))) g$208$21186))) ((lambda (g$208$21240) (if (g$208$15966 g$208$21240) (begin '#f ((lambda (g$208$21242) (if g$208$21242 (begin '#f ((lambda (g$208$21244) (if g$208$21244 (begin '#f (append g$208$21242 g$208$21244)) '#f)) ((letrec ((g$208$21246 (lambda (g$208$21248) (if (g$208$15966 g$208$21248) ((lambda (g$208$21250) (if g$208$21250 (begin '#f ((lambda (g$208$21252) (if g$208$21252 (begin '#f (map cons g$208$21250 g$208$21252)) '#f)) (g$208$21246 (g$208$15976 g$208$21248)))) '#f)) ((lambda (g$208$21254) (list g$208$21254)) (g$208$15974 g$208$21248))) (if (g$208$15970 g$208$21248) (list (begin 'x* '())) '#f))))) g$208$21246) (g$208$15976 g$208$21240)))) '#f)) ((lambda (g$208$21256) (if (g$208$15980 g$208$21256) (if (g$208$15988 g$208$21256 (g$208$16466 'list)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21240)))) '#f)) g$208$21186))) g$208$21176))) ((lambda (g$208$21258) (if (g$208$15966 g$208$21258) (begin '#f ((lambda (g$208$21260) (if g$208$21260 (begin '#f ((lambda (g$208$21262) (if g$208$21262 (begin '#f (append g$208$21260 g$208$21262)) '#f)) ((lambda (g$208$21264) (if (g$208$15966 g$208$21264) (begin '#f ((lambda (g$208$21266) (if g$208$21266 (begin '#f ((lambda (g$208$21268) (if g$208$21268 (begin '#f (append g$208$21266 g$208$21268)) '#f)) ((lambda (g$208$21270) (if (equal? (g$208$16002 g$208$21270) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21264)))) '#f)) ((letrec ((g$208$21272 (lambda (g$208$21274) (if (g$208$15966 g$208$21274) ((lambda (g$208$21276) (if g$208$21276 (begin '#f ((lambda (g$208$21278) (if g$208$21278 (begin '#f (map cons g$208$21276 g$208$21278)) '#f)) (g$208$21272 (g$208$15976 g$208$21274)))) '#f)) ((lambda (g$208$21280) (list g$208$21280)) (g$208$15974 g$208$21274))) (if (g$208$15970 g$208$21274) (list (begin 'x* '())) '#f))))) g$208$21272) (g$208$15974 g$208$21264)))) '#f)) (g$208$15976 g$208$21258)))) '#f)) ((lambda (g$208$21282) (if (g$208$15980 g$208$21282) (if (g$208$15988 g$208$21282 (g$208$16466 'quote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21258)))) '#f)) g$208$21176))) g$208$21172)))) g$208$21170) g$208$21154 (lambda (g$208$21284) (cons* (g$208$16466 'vector) g$208$21284)))) g$208$21168) (g$208$16715 '#f '"invalid syntax" g$208$21166))) ((lambda (g$208$21286) '()) g$208$21166))) g$208$21158))) ((lambda (g$208$21288) (if (g$208$15966 g$208$21288) (begin '#f ((lambda (g$208$21290) (if g$208$21290 (begin '#f ((lambda (g$208$21292) (if g$208$21292 (begin '#f (append g$208$21290 g$208$21292)) '#f)) ((lambda (g$208$21294) (if (g$208$15966 g$208$21294) (begin '#f ((lambda (g$208$21296) (if g$208$21296 (begin '#f ((lambda (g$208$21298) (if g$208$21298 (begin '#f (append g$208$21296 g$208$21298)) '#f)) ((lambda (g$208$21300) (if (equal? (g$208$16002 g$208$21300) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21294)))) '#f)) ((letrec ((g$208$21302 (lambda (g$208$21304) (if (g$208$15966 g$208$21304) ((lambda (g$208$21306) (if g$208$21306 (begin '#f ((lambda (g$208$21308) (if g$208$21308 (begin '#f (map cons g$208$21306 g$208$21308)) '#f)) (g$208$21302 (g$208$15976 g$208$21304)))) '#f)) ((lambda (g$208$21310) (list g$208$21310)) (g$208$15974 g$208$21304))) (if (g$208$15970 g$208$21304) (list (begin 'x* '())) '#f))))) g$208$21302) (g$208$15974 g$208$21294)))) '#f)) (g$208$15976 g$208$21288)))) '#f)) ((lambda (g$208$21312) (if (g$208$15980 g$208$21312) (if (g$208$15988 g$208$21312 (g$208$16466 'quote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21288)))) '#f)) g$208$21158))) g$208$21156)) g$208$21154))) (set! g$208$20844 (lambda (g$208$21060 g$208$21061) ((lambda (g$208$21064) ((lambda (g$208$21066) (if (if g$208$21066 (begin '#f (apply (lambda (g$208$21068 g$208$21069) '#t) g$208$21066)) '#f) (apply (lambda (g$208$21072 g$208$21073) ((lambda (g$208$21076) ((lambda (g$208$21078) (if (if g$208$21078 (begin '#f (apply (lambda (g$208$21080) '#t) g$208$21078)) '#f) (apply (lambda (g$208$21082) (if (= g$208$21061 '0) (g$208$20836 g$208$21082 (g$208$20844 g$208$21073 g$208$21061)) (g$208$20838 (g$208$20838 (list (g$208$16466 'quote) 'unquote) (g$208$20846 g$208$21082 (- g$208$21061 '1))) (g$208$20844 g$208$21073 g$208$21061)))) g$208$21078) ((lambda (g$208$21084) ((lambda (g$208$21086) (if (if g$208$21086 (begin '#f (apply (lambda (g$208$21088) '#t) g$208$21086)) '#f) (apply (lambda (g$208$21090) (if (= g$208$21061 '0) (g$208$20840 g$208$21090 (g$208$20844 g$208$21073 g$208$21061)) (g$208$20838 (g$208$20838 (list (g$208$16466 'quote) 'unquote-splicing) (g$208$20846 g$208$21090 (- g$208$21061 '1))) (g$208$20844 g$208$21073 g$208$21061)))) g$208$21086) ((lambda (g$208$21092) ((lambda (g$208$21094) (if (if g$208$21094 (begin '#f (apply (lambda (g$208$21096) '#t) g$208$21094)) '#f) (apply (lambda (g$208$21098) (g$208$20838 (g$208$20846 g$208$21098 g$208$21061) (g$208$20844 g$208$21073 g$208$21061))) g$208$21094) (g$208$16715 '#f '"invalid syntax" g$208$21092))) ((lambda (g$208$21100) (list g$208$21100)) g$208$21092))) g$208$21084))) ((lambda (g$208$21102) (if (g$208$15966 g$208$21102) (begin '#f ((lambda (g$208$21104) (if g$208$21104 (begin '#f ((lambda (g$208$21106) (if g$208$21106 (begin '#f (append g$208$21104 g$208$21106)) '#f)) ((letrec ((g$208$21108 (lambda (g$208$21110) (if (g$208$15966 g$208$21110) ((lambda (g$208$21112) (if g$208$21112 (begin '#f ((lambda (g$208$21114) (if g$208$21114 (begin '#f (map cons g$208$21112 g$208$21114)) '#f)) (g$208$21108 (g$208$15976 g$208$21110)))) '#f)) ((lambda (g$208$21116) (list g$208$21116)) (g$208$15974 g$208$21110))) (if (g$208$15970 g$208$21110) (list (begin 'p '())) '#f))))) g$208$21108) (g$208$15976 g$208$21102)))) '#f)) ((lambda (g$208$21118) (if (g$208$15980 g$208$21118) (if (g$208$15988 g$208$21118 (g$208$16466 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21102)))) '#f)) g$208$21084))) g$208$21076))) ((lambda (g$208$21120) (if (g$208$15966 g$208$21120) (begin '#f ((lambda (g$208$21122) (if g$208$21122 (begin '#f ((lambda (g$208$21124) (if g$208$21124 (begin '#f (append g$208$21122 g$208$21124)) '#f)) ((letrec ((g$208$21126 (lambda (g$208$21128) (if (g$208$15966 g$208$21128) ((lambda (g$208$21130) (if g$208$21130 (begin '#f ((lambda (g$208$21132) (if g$208$21132 (begin '#f (map cons g$208$21130 g$208$21132)) '#f)) (g$208$21126 (g$208$15976 g$208$21128)))) '#f)) ((lambda (g$208$21134) (list g$208$21134)) (g$208$15974 g$208$21128))) (if (g$208$15970 g$208$21128) (list (begin 'p '())) '#f))))) g$208$21126) (g$208$15976 g$208$21120)))) '#f)) ((lambda (g$208$21136) (if (g$208$15980 g$208$21136) (if (g$208$15988 g$208$21136 (g$208$16466 'unquote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21120)))) '#f)) g$208$21076))) g$208$21072)) g$208$21066) ((lambda (g$208$21138) ((lambda (g$208$21140) (if (if g$208$21140 (begin '#f (apply (lambda () '#t) g$208$21140)) '#f) (apply (lambda () (list (g$208$16466 'quote) '())) g$208$21140) (g$208$16715 '#f '"invalid syntax" g$208$21138))) ((lambda (g$208$21142) (if (equal? (g$208$16002 g$208$21142) '()) (begin '#f '()) '#f)) g$208$21138))) g$208$21064))) ((lambda (g$208$21144) (if (g$208$15966 g$208$21144) (begin '#f ((lambda (g$208$21146) (if g$208$21146 (begin '#f ((lambda (g$208$21148) (if g$208$21148 (begin '#f (append g$208$21146 g$208$21148)) '#f)) ((lambda (g$208$21150) (list g$208$21150)) (g$208$15976 g$208$21144)))) '#f)) ((lambda (g$208$21152) (list g$208$21152)) (g$208$15974 g$208$21144)))) '#f)) g$208$21064))) g$208$21060))) (set! g$208$20846 (lambda (g$208$20876 g$208$20877) ((lambda (g$208$20880) ((lambda (g$208$20882) (if (if g$208$20882 (begin '#f (apply (lambda (g$208$20884) '#t) g$208$20882)) '#f) (apply (lambda (g$208$20886) (if (= g$208$20877 '0) g$208$20886 (g$208$20838 (list (g$208$16466 'quote) 'unquote) (g$208$20846 (list g$208$20886) (- g$208$20877 '1))))) g$208$20882) ((lambda (g$208$20888) ((lambda (g$208$20890) (if (if g$208$20890 (begin '#f (apply (lambda (g$208$20892 g$208$20893) '#t) g$208$20890)) '#f) (apply (lambda (g$208$20896 g$208$20897) (if (= g$208$20877 '0) (g$208$20836 g$208$20896 (g$208$20846 g$208$20897 g$208$20877)) (g$208$20838 (g$208$20838 (list (g$208$16466 'quote) 'unquote) (g$208$20846 g$208$20896 (- g$208$20877 '1))) (g$208$20846 g$208$20897 g$208$20877)))) g$208$20890) ((lambda (g$208$20900) ((lambda (g$208$20902) (if (if g$208$20902 (begin '#f (apply (lambda (g$208$20904 g$208$20905) '#t) g$208$20902)) '#f) (apply (lambda (g$208$20908 g$208$20909) (if (= g$208$20877 '0) (g$208$20840 g$208$20908 (g$208$20846 g$208$20909 g$208$20877)) (g$208$20838 (g$208$20838 (list (g$208$16466 'quote) 'unquote-splicing) (g$208$20846 g$208$20908 (- g$208$20877 '1))) (g$208$20846 g$208$20909 g$208$20877)))) g$208$20902) ((lambda (g$208$20912) ((lambda (g$208$20914) (if (if g$208$20914 (begin '#f (apply (lambda (g$208$20916) '#t) g$208$20914)) '#f) (apply (lambda (g$208$20918) (g$208$20838 (list (g$208$16466 'quote) 'quasiquote) (g$208$20846 (list g$208$20918) (+ g$208$20877 '1)))) g$208$20914) ((lambda (g$208$20920) ((lambda (g$208$20922) (if (if g$208$20922 (begin '#f (apply (lambda (g$208$20924 g$208$20925) '#t) g$208$20922)) '#f) (apply (lambda (g$208$20928 g$208$20929) (g$208$20838 (g$208$20846 g$208$20928 g$208$20877) (g$208$20846 g$208$20929 g$208$20877))) g$208$20922) ((lambda (g$208$20932) ((lambda (g$208$20934) (if (if g$208$20934 (begin '#f (apply (lambda (g$208$20936) (not (g$208$15932 g$208$20936))) g$208$20934)) '#f) (apply (lambda (g$208$20938) (g$208$20842 (g$208$20844 g$208$20938 g$208$20877))) g$208$20934) ((lambda (g$208$20940) ((lambda (g$208$20942) (if (if g$208$20942 (begin '#f (apply (lambda (g$208$20944) '#t) g$208$20942)) '#f) (apply (lambda (g$208$20946) (list (g$208$16466 'quote) g$208$20946)) g$208$20942) (g$208$16715 '#f '"invalid syntax" g$208$20940))) ((lambda (g$208$20948) (list g$208$20948)) g$208$20940))) g$208$20932))) ((lambda (g$208$20950) (if (g$208$15968 g$208$20950) (begin '#f ((letrec ((g$208$20952 (lambda (g$208$20954) (if (g$208$15966 g$208$20954) ((lambda (g$208$20956) (if g$208$20956 (begin '#f ((lambda (g$208$20958) (if g$208$20958 (begin '#f (map cons g$208$20956 g$208$20958)) '#f)) (g$208$20952 (g$208$15976 g$208$20954)))) '#f)) ((lambda (g$208$20960) (list g$208$20960)) (g$208$15974 g$208$20954))) (if (g$208$15970 g$208$20954) (list (begin 'x '())) '#f))))) g$208$20952) (g$208$15964 g$208$20950))) '#f)) g$208$20932))) g$208$20920))) ((lambda (g$208$20962) (if (g$208$15966 g$208$20962) (begin '#f ((lambda (g$208$20964) (if g$208$20964 (begin '#f ((lambda (g$208$20966) (if g$208$20966 (begin '#f (append g$208$20964 g$208$20966)) '#f)) ((lambda (g$208$20968) (list g$208$20968)) (g$208$15976 g$208$20962)))) '#f)) ((lambda (g$208$20970) (list g$208$20970)) (g$208$15974 g$208$20962)))) '#f)) g$208$20920))) g$208$20912))) ((lambda (g$208$20972) (if (g$208$15966 g$208$20972) (begin '#f ((lambda (g$208$20974) (if g$208$20974 (begin '#f ((lambda (g$208$20976) (if g$208$20976 (begin '#f (append g$208$20974 g$208$20976)) '#f)) ((lambda (g$208$20978) (if (g$208$15966 g$208$20978) (begin '#f ((lambda (g$208$20980) (if g$208$20980 (begin '#f ((lambda (g$208$20982) (if g$208$20982 (begin '#f (append g$208$20980 g$208$20982)) '#f)) ((lambda (g$208$20984) (if (equal? (g$208$16002 g$208$20984) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20978)))) '#f)) ((lambda (g$208$20986) (list g$208$20986)) (g$208$15974 g$208$20978)))) '#f)) (g$208$15976 g$208$20972)))) '#f)) ((lambda (g$208$20988) (if (g$208$15980 g$208$20988) (if (g$208$15988 g$208$20988 (g$208$16466 'quasiquote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$20972)))) '#f)) g$208$20912))) g$208$20900))) ((lambda (g$208$20990) (if (g$208$15966 g$208$20990) (begin '#f ((lambda (g$208$20992) (if g$208$20992 (begin '#f ((lambda (g$208$20994) (if g$208$20994 (begin '#f (append g$208$20992 g$208$20994)) '#f)) ((lambda (g$208$20996) (list g$208$20996)) (g$208$15976 g$208$20990)))) '#f)) ((lambda (g$208$20998) (if (g$208$15966 g$208$20998) (begin '#f ((lambda (g$208$21000) (if g$208$21000 (begin '#f ((lambda (g$208$21002) (if g$208$21002 (begin '#f (append g$208$21000 g$208$21002)) '#f)) ((letrec ((g$208$21004 (lambda (g$208$21006) (if (g$208$15966 g$208$21006) ((lambda (g$208$21008) (if g$208$21008 (begin '#f ((lambda (g$208$21010) (if g$208$21010 (begin '#f (map cons g$208$21008 g$208$21010)) '#f)) (g$208$21004 (g$208$15976 g$208$21006)))) '#f)) ((lambda (g$208$21012) (list g$208$21012)) (g$208$15974 g$208$21006))) (if (g$208$15970 g$208$21006) (list (begin 'p '())) '#f))))) g$208$21004) (g$208$15976 g$208$20998)))) '#f)) ((lambda (g$208$21014) (if (g$208$15980 g$208$21014) (if (g$208$15988 g$208$21014 (g$208$16466 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$20998)))) '#f)) (g$208$15974 g$208$20990)))) '#f)) g$208$20900))) g$208$20888))) ((lambda (g$208$21016) (if (g$208$15966 g$208$21016) (begin '#f ((lambda (g$208$21018) (if g$208$21018 (begin '#f ((lambda (g$208$21020) (if g$208$21020 (begin '#f (append g$208$21018 g$208$21020)) '#f)) ((lambda (g$208$21022) (list g$208$21022)) (g$208$15976 g$208$21016)))) '#f)) ((lambda (g$208$21024) (if (g$208$15966 g$208$21024) (begin '#f ((lambda (g$208$21026) (if g$208$21026 (begin '#f ((lambda (g$208$21028) (if g$208$21028 (begin '#f (append g$208$21026 g$208$21028)) '#f)) ((letrec ((g$208$21030 (lambda (g$208$21032) (if (g$208$15966 g$208$21032) ((lambda (g$208$21034) (if g$208$21034 (begin '#f ((lambda (g$208$21036) (if g$208$21036 (begin '#f (map cons g$208$21034 g$208$21036)) '#f)) (g$208$21030 (g$208$15976 g$208$21032)))) '#f)) ((lambda (g$208$21038) (list g$208$21038)) (g$208$15974 g$208$21032))) (if (g$208$15970 g$208$21032) (list (begin 'p '())) '#f))))) g$208$21030) (g$208$15976 g$208$21024)))) '#f)) ((lambda (g$208$21040) (if (g$208$15980 g$208$21040) (if (g$208$15988 g$208$21040 (g$208$16466 'unquote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21024)))) '#f)) (g$208$15974 g$208$21016)))) '#f)) g$208$20888))) g$208$20880))) ((lambda (g$208$21042) (if (g$208$15966 g$208$21042) (begin '#f ((lambda (g$208$21044) (if g$208$21044 (begin '#f ((lambda (g$208$21046) (if g$208$21046 (begin '#f (append g$208$21044 g$208$21046)) '#f)) ((lambda (g$208$21048) (if (g$208$15966 g$208$21048) (begin '#f ((lambda (g$208$21050) (if g$208$21050 (begin '#f ((lambda (g$208$21052) (if g$208$21052 (begin '#f (append g$208$21050 g$208$21052)) '#f)) ((lambda (g$208$21054) (if (equal? (g$208$16002 g$208$21054) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21048)))) '#f)) ((lambda (g$208$21056) (list g$208$21056)) (g$208$15974 g$208$21048)))) '#f)) (g$208$15976 g$208$21042)))) '#f)) ((lambda (g$208$21058) (if (g$208$15980 g$208$21058) (if (g$208$15988 g$208$21058 (g$208$16466 'unquote)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21042)))) '#f)) g$208$20880))) g$208$20876))) (lambda (g$208$20848) ((lambda (g$208$20850) ((lambda (g$208$20852) (if (if g$208$20852 (begin '#f (apply (lambda (g$208$20854) '#t) g$208$20852)) '#f) (apply (lambda (g$208$20856) (g$208$20846 g$208$20856 '0)) g$208$20852) (g$208$16715 '#f '"invalid syntax" g$208$20850))) ((lambda (g$208$20858) (if (g$208$15966 g$208$20858) (begin '#f ((lambda (g$208$20860) (if g$208$20860 (begin '#f ((lambda (g$208$20862) (if g$208$20862 (begin '#f (append g$208$20860 g$208$20862)) '#f)) ((lambda (g$208$20864) (if (g$208$15966 g$208$20864) (begin '#f ((lambda (g$208$20866) (if g$208$20866 (begin '#f ((lambda (g$208$20868) (if g$208$20868 (begin '#f (append g$208$20866 g$208$20868)) '#f)) ((lambda (g$208$20870) (if (equal? (g$208$16002 g$208$20870) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$20864)))) '#f)) ((lambda (g$208$20872) (list g$208$20872)) (g$208$15974 g$208$20864)))) '#f)) (g$208$15976 g$208$20858)))) '#f)) ((lambda (g$208$20874) '()) (g$208$15974 g$208$20858)))) '#f)) g$208$20850))) g$208$20848)))) '#f '#f '#f '#f '#f '#f)))) (set! g$208$16556 ((lambda () ((lambda (g$208$21494) (begin (set! g$208$21494 (lambda (g$208$21539 g$208$21540) ((lambda (g$208$21543) ((lambda (g$208$21545) (if (if g$208$21545 (begin '#f (apply (lambda (g$208$21547) '#t) g$208$21545)) '#f) (apply (lambda (g$208$21549) (if (= g$208$21540 '0) ((lambda (g$208$21551) (values (list g$208$21551) (list g$208$21549) g$208$21551)) (gensym)) (call-with-values (lambda () (g$208$21494 g$208$21549 (- g$208$21540 '1))) (lambda (g$208$21556 g$208$21557 g$208$21558) ((lambda (g$208$21562 g$208$21563 g$208$21564) (values g$208$21564 g$208$21563 (list 'unsyntax g$208$21562))) g$208$21558 g$208$21557 g$208$21556))))) g$208$21545) ((lambda (g$208$21568) ((lambda (g$208$21570) (if (if g$208$21570 (begin '#f (apply (lambda () (= g$208$21540 '0)) g$208$21570)) '#f) (apply (lambda () (g$208$16715 '#f '"incorrect use of unsyntax" g$208$21539)) g$208$21570) ((lambda (g$208$21572) ((lambda (g$208$21574) (if (if g$208$21574 (begin '#f (apply (lambda (g$208$21576 g$208$21577) '#t) g$208$21574)) '#f) (apply (lambda (g$208$21580 g$208$21581) (call-with-values (lambda () (g$208$21494 g$208$21581 g$208$21540)) (lambda (g$208$21587 g$208$21588 g$208$21589) ((lambda (g$208$21593 g$208$21594 g$208$21595) (if (= g$208$21540 '0) ((lambda (g$208$21599) (values (cons (cons g$208$21599 '(|...|)) g$208$21595) (cons g$208$21580 g$208$21594) (cons g$208$21599 (cons '|...| g$208$21593)))) (gensym)) (call-with-values (lambda () (g$208$21494 g$208$21580 (- g$208$21540 '1))) (lambda (g$208$21604 g$208$21605 g$208$21606) ((lambda (g$208$21610 g$208$21611 g$208$21612) (values (append g$208$21612 g$208$21595) (append g$208$21611 g$208$21594) (cons (list 'unsyntax-splicing g$208$21610) g$208$21593))) g$208$21606 g$208$21605 g$208$21604))))) g$208$21589 g$208$21588 g$208$21587)))) g$208$21574) ((lambda (g$208$21616) ((lambda (g$208$21618) (if (if g$208$21618 (begin '#f (apply (lambda () (= g$208$21540 '0)) g$208$21618)) '#f) (apply (lambda () (g$208$16715 '#f '"incorrect use of unsyntax-splicing" g$208$21539)) g$208$21618) ((lambda (g$208$21620) ((lambda (g$208$21622) (if (if g$208$21622 (begin '#f (apply (lambda (g$208$21624) '#t) g$208$21622)) '#f) (apply (lambda (g$208$21626) (call-with-values (lambda () (g$208$21494 g$208$21626 (+ g$208$21540 '1))) (lambda (g$208$21631 g$208$21632 g$208$21633) ((lambda (g$208$21637 g$208$21638 g$208$21639) (values g$208$21639 g$208$21638 (list 'quasisyntax g$208$21637))) g$208$21633 g$208$21632 g$208$21631)))) g$208$21622) ((lambda (g$208$21643) ((lambda (g$208$21645) (if (if g$208$21645 (begin '#f (apply (lambda (g$208$21647 g$208$21648) '#t) g$208$21645)) '#f) (apply (lambda (g$208$21651 g$208$21652) (call-with-values (lambda () (g$208$21494 g$208$21651 g$208$21540)) (lambda (g$208$21661 g$208$21662 g$208$21663) (call-with-values (lambda () (g$208$21494 g$208$21652 g$208$21540)) (lambda (g$208$21667 g$208$21668 g$208$21669) ((lambda (g$208$21673 g$208$21674 g$208$21675 g$208$21676 g$208$21677 g$208$21678) (values (append g$208$21675 g$208$21678) (append g$208$21674 g$208$21677) (cons g$208$21676 g$208$21673))) g$208$21669 g$208$21668 g$208$21667 g$208$21663 g$208$21662 g$208$21661)))))) g$208$21645) ((lambda (g$208$21685) ((lambda (g$208$21687) (if (if g$208$21687 (begin '#f (apply (lambda (g$208$21689) (not (g$208$15932 g$208$21539))) g$208$21687)) '#f) (apply (lambda (g$208$21691) (call-with-values (lambda () ((letrec ((g$208$21696 (lambda (g$208$21698) (if (null? g$208$21698) (values '() '() '()) (call-with-values (lambda () (g$208$21494 (car g$208$21698) g$208$21540)) (lambda (g$208$21703 g$208$21704 g$208$21705) ((lambda (g$208$21709 g$208$21710 g$208$21711) (call-with-values (lambda () (g$208$21696 (cdr g$208$21698))) (lambda (g$208$21718 g$208$21719 g$208$21720) ((lambda (g$208$21724 g$208$21725 g$208$21726) (values (append g$208$21711 g$208$21726) (append g$208$21710 g$208$21725) (cons g$208$21709 g$208$21724))) g$208$21720 g$208$21719 g$208$21718)))) g$208$21705 g$208$21704 g$208$21703))))))) g$208$21696) g$208$21691)) (lambda (g$208$21730 g$208$21731 g$208$21732) ((lambda (g$208$21736 g$208$21737 g$208$21738) (values g$208$21738 g$208$21737 (list->vector g$208$21736))) g$208$21732 g$208$21731 g$208$21730)))) g$208$21687) ((lambda (g$208$21742) ((lambda (g$208$21744) (if (if g$208$21744 (begin '#f (apply (lambda () '#t) g$208$21744)) '#f) (apply (lambda () (values '() '() g$208$21539)) g$208$21744) (g$208$16715 '#f '"invalid syntax" g$208$21742))) ((lambda (g$208$21746) '()) g$208$21742))) g$208$21685))) ((lambda (g$208$21748) (if (g$208$15968 g$208$21748) (begin '#f ((letrec ((g$208$21750 (lambda (g$208$21752) (if (g$208$15966 g$208$21752) ((lambda (g$208$21754) (if g$208$21754 (begin '#f ((lambda (g$208$21756) (if g$208$21756 (begin '#f (map cons g$208$21754 g$208$21756)) '#f)) (g$208$21750 (g$208$15976 g$208$21752)))) '#f)) ((lambda (g$208$21758) (list g$208$21758)) (g$208$15974 g$208$21752))) (if (g$208$15970 g$208$21752) (list (begin 'x '())) '#f))))) g$208$21750) (g$208$15964 g$208$21748))) '#f)) g$208$21685))) g$208$21643))) ((lambda (g$208$21760) (if (g$208$15966 g$208$21760) (begin '#f ((lambda (g$208$21762) (if g$208$21762 (begin '#f ((lambda (g$208$21764) (if g$208$21764 (begin '#f (append g$208$21762 g$208$21764)) '#f)) ((lambda (g$208$21766) (list g$208$21766)) (g$208$15976 g$208$21760)))) '#f)) ((lambda (g$208$21768) (list g$208$21768)) (g$208$15974 g$208$21760)))) '#f)) g$208$21643))) g$208$21620))) ((lambda (g$208$21770) (if (g$208$15966 g$208$21770) (begin '#f ((lambda (g$208$21772) (if g$208$21772 (begin '#f ((lambda (g$208$21774) (if g$208$21774 (begin '#f (append g$208$21772 g$208$21774)) '#f)) ((lambda (g$208$21776) (if (g$208$15966 g$208$21776) (begin '#f ((lambda (g$208$21778) (if g$208$21778 (begin '#f ((lambda (g$208$21780) (if g$208$21780 (begin '#f (append g$208$21778 g$208$21780)) '#f)) ((lambda (g$208$21782) (if (equal? (g$208$16002 g$208$21782) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21776)))) '#f)) ((lambda (g$208$21784) (list g$208$21784)) (g$208$15974 g$208$21776)))) '#f)) (g$208$15976 g$208$21770)))) '#f)) ((lambda (g$208$21786) (if (g$208$15980 g$208$21786) (if (g$208$15988 g$208$21786 (g$208$16466 'quasisyntax)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21770)))) '#f)) g$208$21620))) g$208$21616))) ((lambda (g$208$21788) (if (g$208$15980 g$208$21788) (if (g$208$15988 g$208$21788 (g$208$16466 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) g$208$21616))) g$208$21572))) ((lambda (g$208$21790) (if (g$208$15966 g$208$21790) (begin '#f ((lambda (g$208$21792) (if g$208$21792 (begin '#f ((lambda (g$208$21794) (if g$208$21794 (begin '#f (append g$208$21792 g$208$21794)) '#f)) ((lambda (g$208$21796) (list g$208$21796)) (g$208$15976 g$208$21790)))) '#f)) ((lambda (g$208$21798) (if (g$208$15966 g$208$21798) (begin '#f ((lambda (g$208$21800) (if g$208$21800 (begin '#f ((lambda (g$208$21802) (if g$208$21802 (begin '#f (append g$208$21800 g$208$21802)) '#f)) ((lambda (g$208$21804) (if (g$208$15966 g$208$21804) (begin '#f ((lambda (g$208$21806) (if g$208$21806 (begin '#f ((lambda (g$208$21808) (if g$208$21808 (begin '#f (append g$208$21806 g$208$21808)) '#f)) ((lambda (g$208$21810) (if (equal? (g$208$16002 g$208$21810) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21804)))) '#f)) ((lambda (g$208$21812) (list g$208$21812)) (g$208$15974 g$208$21804)))) '#f)) (g$208$15976 g$208$21798)))) '#f)) ((lambda (g$208$21814) (if (g$208$15980 g$208$21814) (if (g$208$15988 g$208$21814 (g$208$16466 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21798)))) '#f)) (g$208$15974 g$208$21790)))) '#f)) g$208$21572))) g$208$21568))) ((lambda (g$208$21816) (if (g$208$15980 g$208$21816) (if (g$208$15988 g$208$21816 (g$208$16466 'unsyntax)) (begin '#f '()) '#f) '#f)) g$208$21568))) g$208$21543))) ((lambda (g$208$21818) (if (g$208$15966 g$208$21818) (begin '#f ((lambda (g$208$21820) (if g$208$21820 (begin '#f ((lambda (g$208$21822) (if g$208$21822 (begin '#f (append g$208$21820 g$208$21822)) '#f)) ((lambda (g$208$21824) (if (g$208$15966 g$208$21824) (begin '#f ((lambda (g$208$21826) (if g$208$21826 (begin '#f ((lambda (g$208$21828) (if g$208$21828 (begin '#f (append g$208$21826 g$208$21828)) '#f)) ((lambda (g$208$21830) (if (equal? (g$208$16002 g$208$21830) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21824)))) '#f)) ((lambda (g$208$21832) (list g$208$21832)) (g$208$15974 g$208$21824)))) '#f)) (g$208$15976 g$208$21818)))) '#f)) ((lambda (g$208$21834) (if (g$208$15980 g$208$21834) (if (g$208$15988 g$208$21834 (g$208$16466 'unsyntax)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$21818)))) '#f)) g$208$21543))) g$208$21539))) (lambda (g$208$21496) ((lambda (g$208$21498) ((lambda (g$208$21500) (if (if g$208$21500 (begin '#f (apply (lambda (g$208$21502) '#t) g$208$21500)) '#f) (apply (lambda (g$208$21504) (call-with-values (lambda () (g$208$21494 g$208$21504 '0)) (lambda (g$208$21509 g$208$21510 g$208$21511) ((lambda (g$208$21515 g$208$21516 g$208$21517) (g$208$16504 (list 'syntax-case (cons 'list g$208$21516) '() (list g$208$21517 (list 'syntax g$208$21515))))) g$208$21511 g$208$21510 g$208$21509)))) g$208$21500) (g$208$16715 '#f '"invalid syntax" g$208$21498))) ((lambda (g$208$21521) (if (g$208$15966 g$208$21521) (begin '#f ((lambda (g$208$21523) (if g$208$21523 (begin '#f ((lambda (g$208$21525) (if g$208$21525 (begin '#f (append g$208$21523 g$208$21525)) '#f)) ((lambda (g$208$21527) (if (g$208$15966 g$208$21527) (begin '#f ((lambda (g$208$21529) (if g$208$21529 (begin '#f ((lambda (g$208$21531) (if g$208$21531 (begin '#f (append g$208$21529 g$208$21531)) '#f)) ((lambda (g$208$21533) (if (equal? (g$208$16002 g$208$21533) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$21527)))) '#f)) ((lambda (g$208$21535) (list g$208$21535)) (g$208$15974 g$208$21527)))) '#f)) (g$208$15976 g$208$21521)))) '#f)) ((lambda (g$208$21537) '()) (g$208$15974 g$208$21521)))) '#f)) g$208$21498))) g$208$21496)))) '#f)))) (set! g$208$16558 (lambda (g$208$21836) (g$208$16715 '#f '"define-struct not supported" g$208$21836))) (set! g$208$16560 (lambda (g$208$21838) ((lambda (g$208$21840 g$208$21842 g$208$21844 g$208$21846 g$208$21848 g$208$21850 g$208$21852 g$208$21854 g$208$21856 g$208$21858 g$208$21860 g$208$21862 g$208$21864 g$208$21866 g$208$21868) (begin (set! g$208$21840 (lambda (g$208$22970 . g$208$22972) (g$208$16719 g$208$22970 (string->symbol (apply string-append (map (lambda (g$208$22974) (if (symbol? g$208$22974) (symbol->string g$208$22974) (if (string? g$208$22974) g$208$22974 (assertion-violation 'define-record-type '"BUG")))) g$208$22972)))))) (set! g$208$21842 (lambda (g$208$22916) ((lambda (g$208$22918) ((lambda (g$208$22920) (if (if g$208$22920 (begin '#f (apply (lambda (g$208$22922 g$208$22923 g$208$22924) '#t) g$208$22920)) '#f) (apply (lambda (g$208$22928 g$208$22929 g$208$22930) g$208$22928) g$208$22920) ((lambda (g$208$22934) ((lambda (g$208$22936) (if (if g$208$22936 (begin '#f (apply (lambda (g$208$22938) '#t) g$208$22936)) '#f) (apply (lambda (g$208$22940) g$208$22940) g$208$22936) (g$208$16715 '#f '"invalid syntax" g$208$22934))) ((lambda (g$208$22942) (list g$208$22942)) g$208$22934))) g$208$22918))) ((lambda (g$208$22944) (if (g$208$15966 g$208$22944) (begin '#f ((lambda (g$208$22946) (if g$208$22946 (begin '#f ((lambda (g$208$22948) (if g$208$22948 (begin '#f (append g$208$22946 g$208$22948)) '#f)) ((lambda (g$208$22950) (if (g$208$15966 g$208$22950) (begin '#f ((lambda (g$208$22952) (if g$208$22952 (begin '#f ((lambda (g$208$22954) (if g$208$22954 (begin '#f (append g$208$22952 g$208$22954)) '#f)) ((lambda (g$208$22956) (if (g$208$15966 g$208$22956) (begin '#f ((lambda (g$208$22958) (if g$208$22958 (begin '#f ((lambda (g$208$22960) (if g$208$22960 (begin '#f (append g$208$22958 g$208$22960)) '#f)) ((lambda (g$208$22962) (if (equal? (g$208$16002 g$208$22962) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22956)))) '#f)) ((lambda (g$208$22964) (list g$208$22964)) (g$208$15974 g$208$22956)))) '#f)) (g$208$15976 g$208$22950)))) '#f)) ((lambda (g$208$22966) (list g$208$22966)) (g$208$15974 g$208$22950)))) '#f)) (g$208$15976 g$208$22944)))) '#f)) ((lambda (g$208$22968) (list g$208$22968)) (g$208$15974 g$208$22944)))) '#f)) g$208$22918))) g$208$22916))) (set! g$208$21844 (lambda (g$208$22862) ((lambda (g$208$22864) ((lambda (g$208$22866) (if (if g$208$22866 (begin '#f (apply (lambda (g$208$22868 g$208$22869 g$208$22870) '#t) g$208$22866)) '#f) (apply (lambda (g$208$22874 g$208$22875 g$208$22876) g$208$22875) g$208$22866) ((lambda (g$208$22880) ((lambda (g$208$22882) (if (if g$208$22882 (begin '#f (apply (lambda (g$208$22884) (g$208$15980 g$208$22884)) g$208$22882)) '#f) (apply (lambda (g$208$22886) (g$208$21840 g$208$22886 '"make-" (g$208$16002 g$208$22886))) g$208$22882) (g$208$16715 '#f '"invalid syntax" g$208$22880))) ((lambda (g$208$22888) (list g$208$22888)) g$208$22880))) g$208$22864))) ((lambda (g$208$22890) (if (g$208$15966 g$208$22890) (begin '#f ((lambda (g$208$22892) (if g$208$22892 (begin '#f ((lambda (g$208$22894) (if g$208$22894 (begin '#f (append g$208$22892 g$208$22894)) '#f)) ((lambda (g$208$22896) (if (g$208$15966 g$208$22896) (begin '#f ((lambda (g$208$22898) (if g$208$22898 (begin '#f ((lambda (g$208$22900) (if g$208$22900 (begin '#f (append g$208$22898 g$208$22900)) '#f)) ((lambda (g$208$22902) (if (g$208$15966 g$208$22902) (begin '#f ((lambda (g$208$22904) (if g$208$22904 (begin '#f ((lambda (g$208$22906) (if g$208$22906 (begin '#f (append g$208$22904 g$208$22906)) '#f)) ((lambda (g$208$22908) (if (equal? (g$208$16002 g$208$22908) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22902)))) '#f)) ((lambda (g$208$22910) (list g$208$22910)) (g$208$15974 g$208$22902)))) '#f)) (g$208$15976 g$208$22896)))) '#f)) ((lambda (g$208$22912) (list g$208$22912)) (g$208$15974 g$208$22896)))) '#f)) (g$208$15976 g$208$22890)))) '#f)) ((lambda (g$208$22914) (list g$208$22914)) (g$208$15974 g$208$22890)))) '#f)) g$208$22864))) g$208$22862))) (set! g$208$21846 (lambda (g$208$22808) ((lambda (g$208$22810) ((lambda (g$208$22812) (if (if g$208$22812 (begin '#f (apply (lambda (g$208$22814 g$208$22815 g$208$22816) '#t) g$208$22812)) '#f) (apply (lambda (g$208$22820 g$208$22821 g$208$22822) g$208$22822) g$208$22812) ((lambda (g$208$22826) ((lambda (g$208$22828) (if (if g$208$22828 (begin '#f (apply (lambda (g$208$22830) (g$208$15980 g$208$22830)) g$208$22828)) '#f) (apply (lambda (g$208$22832) (g$208$21840 g$208$22832 (g$208$16002 g$208$22832) '"?")) g$208$22828) (g$208$16715 '#f '"invalid syntax" g$208$22826))) ((lambda (g$208$22834) (list g$208$22834)) g$208$22826))) g$208$22810))) ((lambda (g$208$22836) (if (g$208$15966 g$208$22836) (begin '#f ((lambda (g$208$22838) (if g$208$22838 (begin '#f ((lambda (g$208$22840) (if g$208$22840 (begin '#f (append g$208$22838 g$208$22840)) '#f)) ((lambda (g$208$22842) (if (g$208$15966 g$208$22842) (begin '#f ((lambda (g$208$22844) (if g$208$22844 (begin '#f ((lambda (g$208$22846) (if g$208$22846 (begin '#f (append g$208$22844 g$208$22846)) '#f)) ((lambda (g$208$22848) (if (g$208$15966 g$208$22848) (begin '#f ((lambda (g$208$22850) (if g$208$22850 (begin '#f ((lambda (g$208$22852) (if g$208$22852 (begin '#f (append g$208$22850 g$208$22852)) '#f)) ((lambda (g$208$22854) (if (equal? (g$208$16002 g$208$22854) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22848)))) '#f)) ((lambda (g$208$22856) (list g$208$22856)) (g$208$15974 g$208$22848)))) '#f)) (g$208$15976 g$208$22842)))) '#f)) ((lambda (g$208$22858) (list g$208$22858)) (g$208$15974 g$208$22842)))) '#f)) (g$208$15976 g$208$22836)))) '#f)) ((lambda (g$208$22860) (list g$208$22860)) (g$208$15974 g$208$22836)))) '#f)) g$208$22810))) g$208$22808))) (set! g$208$21848 (lambda (g$208$22764 g$208$22765) ((lambda (g$208$22768) ((lambda (g$208$22770) (if (if g$208$22770 (begin '#f (apply (lambda () '#t) g$208$22770)) '#f) (apply (lambda () '#f) g$208$22770) ((lambda (g$208$22772) ((lambda (g$208$22774) (if (if g$208$22774 (begin '#f (apply (lambda (g$208$22776 g$208$22777 g$208$22778) '#t) g$208$22774)) '#f) (apply (lambda (g$208$22782 g$208$22783 g$208$22784) (if (g$208$15988 (g$208$16504 g$208$22764) g$208$22782) (cons g$208$22782 g$208$22783) (g$208$21848 g$208$22764 g$208$22784))) g$208$22774) (g$208$16715 '#f '"invalid syntax" g$208$22772))) ((lambda (g$208$22788) (if (g$208$15966 g$208$22788) (begin '#f ((lambda (g$208$22790) (if g$208$22790 (begin '#f ((lambda (g$208$22792) (if g$208$22792 (begin '#f (append g$208$22790 g$208$22792)) '#f)) ((lambda (g$208$22794) (list g$208$22794)) (g$208$15976 g$208$22788)))) '#f)) ((lambda (g$208$22796) (if (g$208$15966 g$208$22796) (begin '#f ((lambda (g$208$22798) (if g$208$22798 (begin '#f ((lambda (g$208$22800) (if g$208$22800 (begin '#f (append g$208$22798 g$208$22800)) '#f)) ((lambda (g$208$22802) (list g$208$22802)) (g$208$15976 g$208$22796)))) '#f)) ((lambda (g$208$22804) (list g$208$22804)) (g$208$15974 g$208$22796)))) '#f)) (g$208$15974 g$208$22788)))) '#f)) g$208$22772))) g$208$22768))) ((lambda (g$208$22806) (if (equal? (g$208$16002 g$208$22806) '()) (begin '#f '()) '#f)) g$208$22768))) g$208$22765))) (set! g$208$21850 (lambda (g$208$22508 g$208$22509) ((lambda (g$208$22512) (begin (set! g$208$22512 (lambda (g$208$22690) (list->vector (map (lambda (g$208$22692) ((lambda (g$208$22694) ((lambda (g$208$22696) (if (if g$208$22696 (begin '#f (apply (lambda (g$208$22698 g$208$22699) '#t) g$208$22696)) '#f) (apply (lambda (g$208$22702 g$208$22703) (list 'mutable g$208$22702)) g$208$22696) ((lambda (g$208$22706) ((lambda (g$208$22708) (if (if g$208$22708 (begin '#f (apply (lambda (g$208$22710 g$208$22711) '#t) g$208$22708)) '#f) (apply (lambda (g$208$22714 g$208$22715) (list 'immutable g$208$22714)) g$208$22708) ((lambda (g$208$22718) ((lambda (g$208$22720) (if (if g$208$22720 (begin '#f (apply (lambda (g$208$22722) '#t) g$208$22720)) '#f) (apply (lambda (g$208$22724) (list 'immutable g$208$22724)) g$208$22720) (g$208$16715 '#f '"invalid syntax" g$208$22718))) ((lambda (g$208$22726) (list g$208$22726)) g$208$22718))) g$208$22706))) ((lambda (g$208$22728) (if (g$208$15966 g$208$22728) (begin '#f ((lambda (g$208$22730) (if g$208$22730 (begin '#f ((lambda (g$208$22732) (if g$208$22732 (begin '#f (append g$208$22730 g$208$22732)) '#f)) ((lambda (g$208$22734) (if (g$208$15966 g$208$22734) (begin '#f ((lambda (g$208$22736) (if g$208$22736 (begin '#f ((lambda (g$208$22738) (if g$208$22738 (begin '#f (append g$208$22736 g$208$22738)) '#f)) ((lambda (g$208$22740) (list g$208$22740)) (g$208$15976 g$208$22734)))) '#f)) ((lambda (g$208$22742) (list g$208$22742)) (g$208$15974 g$208$22734)))) '#f)) (g$208$15976 g$208$22728)))) '#f)) ((lambda (g$208$22744) (if (g$208$15980 g$208$22744) (if (g$208$15988 g$208$22744 (g$208$16466 'immutable)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22728)))) '#f)) g$208$22706))) g$208$22694))) ((lambda (g$208$22746) (if (g$208$15966 g$208$22746) (begin '#f ((lambda (g$208$22748) (if g$208$22748 (begin '#f ((lambda (g$208$22750) (if g$208$22750 (begin '#f (append g$208$22748 g$208$22750)) '#f)) ((lambda (g$208$22752) (if (g$208$15966 g$208$22752) (begin '#f ((lambda (g$208$22754) (if g$208$22754 (begin '#f ((lambda (g$208$22756) (if g$208$22756 (begin '#f (append g$208$22754 g$208$22756)) '#f)) ((lambda (g$208$22758) (list g$208$22758)) (g$208$15976 g$208$22752)))) '#f)) ((lambda (g$208$22760) (list g$208$22760)) (g$208$15974 g$208$22752)))) '#f)) (g$208$15976 g$208$22746)))) '#f)) ((lambda (g$208$22762) (if (g$208$15980 g$208$22762) (if (g$208$15988 g$208$22762 (g$208$16466 'mutable)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22746)))) '#f)) g$208$22694))) g$208$22692)) g$208$22690)))) ((lambda (g$208$22514 g$208$22515 g$208$22516 g$208$22517 g$208$22518) (g$208$16504 (list 'make-record-type-descriptor (list 'quote g$208$22508) g$208$22514 g$208$22515 g$208$22516 g$208$22517 g$208$22518))) ((lambda (g$208$22524) ((lambda (g$208$22526) (if (if g$208$22526 (begin '#f (apply (lambda (g$208$22528) '#t) g$208$22526)) '#f) (apply (lambda (g$208$22530) (list 'record-type-descriptor g$208$22530)) g$208$22526) ((lambda (g$208$22532) ((lambda (g$208$22534) (if (if g$208$22534 (begin '#f (apply (lambda () '#t) g$208$22534)) '#f) (apply (lambda () '#f) g$208$22534) (g$208$16715 '#f '"invalid syntax" g$208$22532))) ((lambda (g$208$22536) '()) g$208$22532))) g$208$22524))) ((lambda (g$208$22538) (if (g$208$15966 g$208$22538) (begin '#f ((lambda (g$208$22540) (if g$208$22540 (begin '#f ((lambda (g$208$22542) (if g$208$22542 (begin '#f (append g$208$22540 g$208$22542)) '#f)) ((lambda (g$208$22544) (if (g$208$15966 g$208$22544) (begin '#f ((lambda (g$208$22546) (if g$208$22546 (begin '#f ((lambda (g$208$22548) (if g$208$22548 (begin '#f (append g$208$22546 g$208$22548)) '#f)) ((lambda (g$208$22550) (if (equal? (g$208$16002 g$208$22550) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22544)))) '#f)) ((lambda (g$208$22552) (list g$208$22552)) (g$208$15974 g$208$22544)))) '#f)) (g$208$15976 g$208$22538)))) '#f)) ((lambda (g$208$22554) '()) (g$208$15974 g$208$22538)))) '#f)) g$208$22524))) (g$208$21848 'parent g$208$22509)) ((lambda (g$208$22556) ((lambda (g$208$22558) (if (if g$208$22558 (begin '#f (apply (lambda () '#t) g$208$22558)) '#f) (apply (lambda () (list 'quote (gensym))) g$208$22558) ((lambda (g$208$22560) ((lambda (g$208$22562) (if (if g$208$22562 (begin '#f (apply (lambda (g$208$22564) '#t) g$208$22562)) '#f) (apply (lambda (g$208$22566) (list 'quote g$208$22566)) g$208$22562) ((lambda (g$208$22568) ((lambda (g$208$22570) (if (if g$208$22570 (begin '#f (apply (lambda () '#t) g$208$22570)) '#f) (apply (lambda () '#f) g$208$22570) (g$208$16715 '#f '"invalid syntax" g$208$22568))) ((lambda (g$208$22572) '()) g$208$22568))) g$208$22560))) ((lambda (g$208$22574) (if (g$208$15966 g$208$22574) (begin '#f ((lambda (g$208$22576) (if g$208$22576 (begin '#f ((lambda (g$208$22578) (if g$208$22578 (begin '#f (append g$208$22576 g$208$22578)) '#f)) ((lambda (g$208$22580) (if (g$208$15966 g$208$22580) (begin '#f ((lambda (g$208$22582) (if g$208$22582 (begin '#f ((lambda (g$208$22584) (if g$208$22584 (begin '#f (append g$208$22582 g$208$22584)) '#f)) ((lambda (g$208$22586) (if (equal? (g$208$16002 g$208$22586) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22580)))) '#f)) ((lambda (g$208$22588) (list g$208$22588)) (g$208$15974 g$208$22580)))) '#f)) (g$208$15976 g$208$22574)))) '#f)) ((lambda (g$208$22590) '()) (g$208$15974 g$208$22574)))) '#f)) g$208$22560))) g$208$22556))) ((lambda (g$208$22592) (if (g$208$15966 g$208$22592) (begin '#f ((lambda (g$208$22594) (if g$208$22594 (begin '#f ((lambda (g$208$22596) (if g$208$22596 (begin '#f (append g$208$22594 g$208$22596)) '#f)) ((lambda (g$208$22598) (if (equal? (g$208$16002 g$208$22598) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22592)))) '#f)) ((lambda (g$208$22600) '()) (g$208$15974 g$208$22592)))) '#f)) g$208$22556))) (g$208$21848 'nongenerative g$208$22509)) ((lambda (g$208$22602) ((lambda (g$208$22604) (if (if g$208$22604 (begin '#f (apply (lambda () '#t) g$208$22604)) '#f) (apply (lambda () '#t) g$208$22604) ((lambda (g$208$22606) ((lambda (g$208$22608) (if (if g$208$22608 (begin '#f (apply (lambda () '#t) g$208$22608)) '#f) (apply (lambda () '#f) g$208$22608) (g$208$16715 '#f '"invalid syntax" g$208$22606))) ((lambda (g$208$22610) '()) g$208$22606))) g$208$22602))) ((lambda (g$208$22612) (if (g$208$15966 g$208$22612) (begin '#f ((lambda (g$208$22614) (if g$208$22614 (begin '#f ((lambda (g$208$22616) (if g$208$22616 (begin '#f (append g$208$22614 g$208$22616)) '#f)) ((lambda (g$208$22618) (if (g$208$15966 g$208$22618) (begin '#f ((lambda (g$208$22620) (if g$208$22620 (begin '#f ((lambda (g$208$22622) (if g$208$22622 (begin '#f (append g$208$22620 g$208$22622)) '#f)) ((lambda (g$208$22624) (if (equal? (g$208$16002 g$208$22624) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22618)))) '#f)) ((lambda (g$208$22626) (if (equal? (g$208$16002 g$208$22626) '#t) (begin '#f '()) '#f)) (g$208$15974 g$208$22618)))) '#f)) (g$208$15976 g$208$22612)))) '#f)) ((lambda (g$208$22628) '()) (g$208$15974 g$208$22612)))) '#f)) g$208$22602))) (g$208$21848 'sealed g$208$22509)) ((lambda (g$208$22630) ((lambda (g$208$22632) (if (if g$208$22632 (begin '#f (apply (lambda () '#t) g$208$22632)) '#f) (apply (lambda () '#t) g$208$22632) ((lambda (g$208$22634) ((lambda (g$208$22636) (if (if g$208$22636 (begin '#f (apply (lambda () '#t) g$208$22636)) '#f) (apply (lambda () '#f) g$208$22636) (g$208$16715 '#f '"invalid syntax" g$208$22634))) ((lambda (g$208$22638) '()) g$208$22634))) g$208$22630))) ((lambda (g$208$22640) (if (g$208$15966 g$208$22640) (begin '#f ((lambda (g$208$22642) (if g$208$22642 (begin '#f ((lambda (g$208$22644) (if g$208$22644 (begin '#f (append g$208$22642 g$208$22644)) '#f)) ((lambda (g$208$22646) (if (g$208$15966 g$208$22646) (begin '#f ((lambda (g$208$22648) (if g$208$22648 (begin '#f ((lambda (g$208$22650) (if g$208$22650 (begin '#f (append g$208$22648 g$208$22650)) '#f)) ((lambda (g$208$22652) (if (equal? (g$208$16002 g$208$22652) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22646)))) '#f)) ((lambda (g$208$22654) (if (equal? (g$208$16002 g$208$22654) '#t) (begin '#f '()) '#f)) (g$208$15974 g$208$22646)))) '#f)) (g$208$15976 g$208$22640)))) '#f)) ((lambda (g$208$22656) '()) (g$208$15974 g$208$22640)))) '#f)) g$208$22630))) (g$208$21848 'opaque g$208$22509)) ((lambda (g$208$22658) ((lambda (g$208$22660) (if (if g$208$22660 (begin '#f (apply (lambda (g$208$22662) '#t) g$208$22660)) '#f) (apply (lambda (g$208$22664) (list 'quote (g$208$22512 g$208$22664))) g$208$22660) ((lambda (g$208$22666) ((lambda (g$208$22668) (if (if g$208$22668 (begin '#f (apply (lambda () '#t) g$208$22668)) '#f) (apply (lambda () ''#()) g$208$22668) (g$208$16715 '#f '"invalid syntax" g$208$22666))) ((lambda (g$208$22670) '()) g$208$22666))) g$208$22658))) ((lambda (g$208$22672) (if (g$208$15966 g$208$22672) (begin '#f ((lambda (g$208$22674) (if g$208$22674 (begin '#f ((lambda (g$208$22676) (if g$208$22676 (begin '#f (append g$208$22674 g$208$22676)) '#f)) ((letrec ((g$208$22678 (lambda (g$208$22680) (if (g$208$15966 g$208$22680) ((lambda (g$208$22682) (if g$208$22682 (begin '#f ((lambda (g$208$22684) (if g$208$22684 (begin '#f (map cons g$208$22682 g$208$22684)) '#f)) (g$208$22678 (g$208$15976 g$208$22680)))) '#f)) ((lambda (g$208$22686) (list g$208$22686)) (g$208$15974 g$208$22680))) (if (g$208$15970 g$208$22680) (list (begin 'field-spec* '())) '#f))))) g$208$22678) (g$208$15976 g$208$22672)))) '#f)) ((lambda (g$208$22688) '()) (g$208$15974 g$208$22672)))) '#f)) g$208$22658))) (g$208$21848 'fields g$208$22509))))) '#f))) (set! g$208$21852 (lambda (g$208$22468 g$208$22469 g$208$22470) ((lambda (g$208$22474) (list 'make-record-constructor-descriptor g$208$22469 g$208$22474 g$208$22470)) ((lambda (g$208$22476) ((lambda (g$208$22478) (if (if g$208$22478 (begin '#f (apply (lambda (g$208$22480) '#t) g$208$22478)) '#f) (apply (lambda (g$208$22482) (list 'record-constructor-descriptor g$208$22482)) g$208$22478) ((lambda (g$208$22484) ((lambda (g$208$22486) (if (if g$208$22486 (begin '#f (apply (lambda () '#t) g$208$22486)) '#f) (apply (lambda () '#f) g$208$22486) (g$208$16715 '#f '"invalid syntax" g$208$22484))) ((lambda (g$208$22488) '()) g$208$22484))) g$208$22476))) ((lambda (g$208$22490) (if (g$208$15966 g$208$22490) (begin '#f ((lambda (g$208$22492) (if g$208$22492 (begin '#f ((lambda (g$208$22494) (if g$208$22494 (begin '#f (append g$208$22492 g$208$22494)) '#f)) ((lambda (g$208$22496) (if (g$208$15966 g$208$22496) (begin '#f ((lambda (g$208$22498) (if g$208$22498 (begin '#f ((lambda (g$208$22500) (if g$208$22500 (begin '#f (append g$208$22498 g$208$22500)) '#f)) ((lambda (g$208$22502) (if (equal? (g$208$16002 g$208$22502) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22496)))) '#f)) ((lambda (g$208$22504) (list g$208$22504)) (g$208$15974 g$208$22496)))) '#f)) (g$208$15976 g$208$22490)))) '#f)) ((lambda (g$208$22506) '()) (g$208$15974 g$208$22490)))) '#f)) g$208$22476))) (g$208$21848 'parent g$208$22468))))) (set! g$208$21854 (lambda (g$208$22434) ((lambda (g$208$22436) ((lambda (g$208$22438) (if (if g$208$22438 (begin '#f (apply (lambda (g$208$22440) '#t) g$208$22438)) '#f) (apply (lambda (g$208$22442) g$208$22442) g$208$22438) ((lambda (g$208$22444) ((lambda (g$208$22446) (if (if g$208$22446 (begin '#f (apply (lambda () '#t) g$208$22446)) '#f) (apply (lambda () '#f) g$208$22446) (g$208$16715 '#f '"invalid syntax" g$208$22444))) ((lambda (g$208$22448) '()) g$208$22444))) g$208$22436))) ((lambda (g$208$22450) (if (g$208$15966 g$208$22450) (begin '#f ((lambda (g$208$22452) (if g$208$22452 (begin '#f ((lambda (g$208$22454) (if g$208$22454 (begin '#f (append g$208$22452 g$208$22454)) '#f)) ((lambda (g$208$22456) (if (g$208$15966 g$208$22456) (begin '#f ((lambda (g$208$22458) (if g$208$22458 (begin '#f ((lambda (g$208$22460) (if g$208$22460 (begin '#f (append g$208$22458 g$208$22460)) '#f)) ((lambda (g$208$22462) (if (equal? (g$208$16002 g$208$22462) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22456)))) '#f)) ((lambda (g$208$22464) (list g$208$22464)) (g$208$15974 g$208$22456)))) '#f)) (g$208$15976 g$208$22450)))) '#f)) ((lambda (g$208$22466) '()) (g$208$15974 g$208$22450)))) '#f)) g$208$22436))) (g$208$21848 'protocol g$208$22434)))) (set! g$208$21856 (lambda (g$208$22374) ((lambda (g$208$22376) ((lambda (g$208$22378) (if (if g$208$22378 (begin '#f (apply (lambda () '#t) g$208$22378)) '#f) (apply (lambda () '()) g$208$22378) ((lambda (g$208$22380) ((lambda (g$208$22382) (if (if g$208$22382 (begin '#f (apply (lambda (g$208$22384) '#t) g$208$22382)) '#f) (apply (lambda (g$208$22386) g$208$22386) g$208$22382) ((lambda (g$208$22388) ((lambda (g$208$22390) (if (if g$208$22390 (begin '#f (apply (lambda (g$208$22392) '#t) g$208$22390)) '#f) (apply (lambda (g$208$22394) (g$208$21856 g$208$22394)) g$208$22390) (g$208$16715 '#f '"invalid syntax" g$208$22388))) ((lambda (g$208$22396) (if (g$208$15966 g$208$22396) (begin '#f ((lambda (g$208$22398) (if g$208$22398 (begin '#f ((lambda (g$208$22400) (if g$208$22400 (begin '#f (append g$208$22398 g$208$22400)) '#f)) ((lambda (g$208$22402) (list g$208$22402)) (g$208$15976 g$208$22396)))) '#f)) ((lambda (g$208$22404) '()) (g$208$15974 g$208$22396)))) '#f)) g$208$22388))) g$208$22380))) ((lambda (g$208$22406) (if (g$208$15966 g$208$22406) (begin '#f ((lambda (g$208$22408) (if g$208$22408 (begin '#f ((lambda (g$208$22410) (if g$208$22410 (begin '#f (append g$208$22408 g$208$22410)) '#f)) ((lambda (g$208$22412) '()) (g$208$15976 g$208$22406)))) '#f)) ((lambda (g$208$22414) (if (g$208$15966 g$208$22414) (begin '#f ((lambda (g$208$22416) (if g$208$22416 (begin '#f ((lambda (g$208$22418) (if g$208$22418 (begin '#f (append g$208$22416 g$208$22418)) '#f)) ((letrec ((g$208$22420 (lambda (g$208$22422) (if (g$208$15966 g$208$22422) ((lambda (g$208$22424) (if g$208$22424 (begin '#f ((lambda (g$208$22426) (if g$208$22426 (begin '#f (map cons g$208$22424 g$208$22426)) '#f)) (g$208$22420 (g$208$15976 g$208$22422)))) '#f)) ((lambda (g$208$22428) (list g$208$22428)) (g$208$15974 g$208$22422))) (if (g$208$15970 g$208$22422) (list (begin 'f* '())) '#f))))) g$208$22420) (g$208$15976 g$208$22414)))) '#f)) ((lambda (g$208$22430) (if (g$208$15980 g$208$22430) (if (g$208$15988 g$208$22430 (g$208$16466 'fields)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22414)))) '#f)) (g$208$15974 g$208$22406)))) '#f)) g$208$22380))) g$208$22376))) ((lambda (g$208$22432) (if (equal? (g$208$16002 g$208$22432) '()) (begin '#f '()) '#f)) g$208$22376))) g$208$22374))) (set! g$208$21858 (lambda (g$208$22316) ((letrec ((g$208$22318 (lambda (g$208$22320 g$208$22321) ((lambda (g$208$22324) ((lambda (g$208$22326) (if (if g$208$22326 (begin '#f (apply (lambda () '#t) g$208$22326)) '#f) (apply (lambda () '()) g$208$22326) ((lambda (g$208$22328) ((lambda (g$208$22330) (if (if g$208$22330 (begin '#f (apply (lambda (g$208$22332) '#t) g$208$22330)) '#f) (apply (lambda (g$208$22334) (cons g$208$22321 (g$208$22318 g$208$22334 (+ g$208$22321 '1)))) g$208$22330) ((lambda (g$208$22336) ((lambda (g$208$22338) (if (if g$208$22338 (begin '#f (apply (lambda (g$208$22340) '#t) g$208$22338)) '#f) (apply (lambda (g$208$22342) (g$208$22318 g$208$22342 (+ g$208$22321 '1))) g$208$22338) (g$208$16715 '#f '"invalid syntax" g$208$22336))) ((lambda (g$208$22344) (if (g$208$15966 g$208$22344) (begin '#f ((lambda (g$208$22346) (if g$208$22346 (begin '#f ((lambda (g$208$22348) (if g$208$22348 (begin '#f (append g$208$22346 g$208$22348)) '#f)) ((lambda (g$208$22350) (list g$208$22350)) (g$208$15976 g$208$22344)))) '#f)) ((lambda (g$208$22352) '()) (g$208$15974 g$208$22344)))) '#f)) g$208$22336))) g$208$22328))) ((lambda (g$208$22354) (if (g$208$15966 g$208$22354) (begin '#f ((lambda (g$208$22356) (if g$208$22356 (begin '#f ((lambda (g$208$22358) (if g$208$22358 (begin '#f (append g$208$22356 g$208$22358)) '#f)) ((lambda (g$208$22360) (list g$208$22360)) (g$208$15976 g$208$22354)))) '#f)) ((lambda (g$208$22362) (if (g$208$15966 g$208$22362) (begin '#f ((lambda (g$208$22364) (if g$208$22364 (begin '#f ((lambda (g$208$22366) (if g$208$22366 (begin '#f (append g$208$22364 g$208$22366)) '#f)) ((lambda (g$208$22368) '()) (g$208$15976 g$208$22362)))) '#f)) ((lambda (g$208$22370) (if (g$208$15980 g$208$22370) (if (g$208$15988 g$208$22370 (g$208$16466 'mutable)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22362)))) '#f)) (g$208$15974 g$208$22354)))) '#f)) g$208$22328))) g$208$22324))) ((lambda (g$208$22372) (if (equal? (g$208$16002 g$208$22372) '()) (begin '#f '()) '#f)) g$208$22324))) g$208$22320)))) g$208$22318) g$208$22316 '0))) (set! g$208$21860 (lambda (g$208$22180 g$208$22181) ((lambda (g$208$22184) (begin (set! g$208$22184 (lambda (g$208$22314) (g$208$16719 g$208$22180 (string->symbol (string-append (symbol->string (g$208$16721 g$208$22180)) '"-" (symbol->string (g$208$16721 g$208$22314)) '"-set!"))))) ((letrec ((g$208$22186 (lambda (g$208$22188) ((lambda (g$208$22190) ((lambda (g$208$22192) (if (if g$208$22192 (begin '#f (apply (lambda () '#t) g$208$22192)) '#f) (apply (lambda () '()) g$208$22192) ((lambda (g$208$22194) ((lambda (g$208$22196) (if (if g$208$22196 (begin '#f (apply (lambda (g$208$22198 g$208$22199 g$208$22200 g$208$22201) '#t) g$208$22196)) '#f) (apply (lambda (g$208$22206 g$208$22207 g$208$22208 g$208$22209) (cons g$208$22208 (g$208$22186 g$208$22209))) g$208$22196) ((lambda (g$208$22214) ((lambda (g$208$22216) (if (if g$208$22216 (begin '#f (apply (lambda (g$208$22218 g$208$22219) '#t) g$208$22216)) '#f) (apply (lambda (g$208$22222 g$208$22223) (cons (g$208$22184 g$208$22222) (g$208$22186 g$208$22223))) g$208$22216) ((lambda (g$208$22226) ((lambda (g$208$22228) (if (if g$208$22228 (begin '#f (apply (lambda (g$208$22230) '#t) g$208$22228)) '#f) (apply (lambda (g$208$22232) (g$208$22186 g$208$22232)) g$208$22228) (g$208$16715 '#f '"invalid syntax" g$208$22226))) ((lambda (g$208$22234) (if (g$208$15966 g$208$22234) (begin '#f ((lambda (g$208$22236) (if g$208$22236 (begin '#f ((lambda (g$208$22238) (if g$208$22238 (begin '#f (append g$208$22236 g$208$22238)) '#f)) ((lambda (g$208$22240) (list g$208$22240)) (g$208$15976 g$208$22234)))) '#f)) ((lambda (g$208$22242) '()) (g$208$15974 g$208$22234)))) '#f)) g$208$22226))) g$208$22214))) ((lambda (g$208$22244) (if (g$208$15966 g$208$22244) (begin '#f ((lambda (g$208$22246) (if g$208$22246 (begin '#f ((lambda (g$208$22248) (if g$208$22248 (begin '#f (append g$208$22246 g$208$22248)) '#f)) ((lambda (g$208$22250) (list g$208$22250)) (g$208$15976 g$208$22244)))) '#f)) ((lambda (g$208$22252) (if (g$208$15966 g$208$22252) (begin '#f ((lambda (g$208$22254) (if g$208$22254 (begin '#f ((lambda (g$208$22256) (if g$208$22256 (begin '#f (append g$208$22254 g$208$22256)) '#f)) ((lambda (g$208$22258) (if (g$208$15966 g$208$22258) (begin '#f ((lambda (g$208$22260) (if g$208$22260 (begin '#f ((lambda (g$208$22262) (if g$208$22262 (begin '#f (append g$208$22260 g$208$22262)) '#f)) ((lambda (g$208$22264) (if (equal? (g$208$16002 g$208$22264) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22258)))) '#f)) ((lambda (g$208$22266) (list g$208$22266)) (g$208$15974 g$208$22258)))) '#f)) (g$208$15976 g$208$22252)))) '#f)) ((lambda (g$208$22268) (if (g$208$15980 g$208$22268) (if (g$208$15988 g$208$22268 (g$208$16466 'mutable)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22252)))) '#f)) (g$208$15974 g$208$22244)))) '#f)) g$208$22214))) g$208$22194))) ((lambda (g$208$22270) (if (g$208$15966 g$208$22270) (begin '#f ((lambda (g$208$22272) (if g$208$22272 (begin '#f ((lambda (g$208$22274) (if g$208$22274 (begin '#f (append g$208$22272 g$208$22274)) '#f)) ((lambda (g$208$22276) (list g$208$22276)) (g$208$15976 g$208$22270)))) '#f)) ((lambda (g$208$22278) (if (g$208$15966 g$208$22278) (begin '#f ((lambda (g$208$22280) (if g$208$22280 (begin '#f ((lambda (g$208$22282) (if g$208$22282 (begin '#f (append g$208$22280 g$208$22282)) '#f)) ((lambda (g$208$22284) (if (g$208$15966 g$208$22284) (begin '#f ((lambda (g$208$22286) (if g$208$22286 (begin '#f ((lambda (g$208$22288) (if g$208$22288 (begin '#f (append g$208$22286 g$208$22288)) '#f)) ((lambda (g$208$22290) (if (g$208$15966 g$208$22290) (begin '#f ((lambda (g$208$22292) (if g$208$22292 (begin '#f ((lambda (g$208$22294) (if g$208$22294 (begin '#f (append g$208$22292 g$208$22294)) '#f)) ((lambda (g$208$22296) (if (g$208$15966 g$208$22296) (begin '#f ((lambda (g$208$22298) (if g$208$22298 (begin '#f ((lambda (g$208$22300) (if g$208$22300 (begin '#f (append g$208$22298 g$208$22300)) '#f)) ((lambda (g$208$22302) (if (equal? (g$208$16002 g$208$22302) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22296)))) '#f)) ((lambda (g$208$22304) (list g$208$22304)) (g$208$15974 g$208$22296)))) '#f)) (g$208$15976 g$208$22290)))) '#f)) ((lambda (g$208$22306) (list g$208$22306)) (g$208$15974 g$208$22290)))) '#f)) (g$208$15976 g$208$22284)))) '#f)) ((lambda (g$208$22308) (list g$208$22308)) (g$208$15974 g$208$22284)))) '#f)) (g$208$15976 g$208$22278)))) '#f)) ((lambda (g$208$22310) (if (g$208$15980 g$208$22310) (if (g$208$15988 g$208$22310 (g$208$16466 'mutable)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22278)))) '#f)) (g$208$15974 g$208$22270)))) '#f)) g$208$22194))) g$208$22190))) ((lambda (g$208$22312) (if (equal? (g$208$16002 g$208$22312) '()) (begin '#f '()) '#f)) g$208$22190))) g$208$22188)))) g$208$22186) g$208$22181))) '#f))) (set! g$208$21862 (lambda (g$208$22010 g$208$22011) ((lambda (g$208$22014) (begin (set! g$208$22014 (lambda (g$208$22178) (g$208$16719 g$208$22010 (string->symbol (string-append (symbol->string (g$208$16721 g$208$22010)) '"-" (symbol->string (g$208$16721 g$208$22178))))))) (map (lambda (g$208$22016) ((lambda (g$208$22018) ((lambda (g$208$22020) (if (if g$208$22020 (begin '#f (apply (lambda (g$208$22022 g$208$22023 g$208$22024) (g$208$15980 g$208$22023)) g$208$22020)) '#f) (apply (lambda (g$208$22028 g$208$22029 g$208$22030) g$208$22029) g$208$22020) ((lambda (g$208$22034) ((lambda (g$208$22036) (if (if g$208$22036 (begin '#f (apply (lambda (g$208$22038 g$208$22039) (g$208$15980 g$208$22039)) g$208$22036)) '#f) (apply (lambda (g$208$22042 g$208$22043) g$208$22043) g$208$22036) ((lambda (g$208$22046) ((lambda (g$208$22048) (if (if g$208$22048 (begin '#f (apply (lambda (g$208$22050) (g$208$15980 g$208$22050)) g$208$22048)) '#f) (apply (lambda (g$208$22052) (g$208$22014 g$208$22052)) g$208$22048) ((lambda (g$208$22054) ((lambda (g$208$22056) (if (if g$208$22056 (begin '#f (apply (lambda (g$208$22058) (g$208$15980 g$208$22058)) g$208$22056)) '#f) (apply (lambda (g$208$22060) (g$208$22014 g$208$22060)) g$208$22056) ((lambda (g$208$22062) ((lambda (g$208$22064) (if (if g$208$22064 (begin '#f (apply (lambda (g$208$22066) (g$208$15980 g$208$22066)) g$208$22064)) '#f) (apply (lambda (g$208$22068) (g$208$22014 g$208$22068)) g$208$22064) ((lambda (g$208$22070) ((lambda (g$208$22072) (if (if g$208$22072 (begin '#f (apply (lambda (g$208$22074) '#t) g$208$22072)) '#f) (apply (lambda (g$208$22076) (g$208$16715 '#f '"invalid field spec" g$208$22016)) g$208$22072) (g$208$16715 '#f '"invalid syntax" g$208$22070))) ((lambda (g$208$22078) (list g$208$22078)) g$208$22070))) g$208$22062))) ((lambda (g$208$22080) (list g$208$22080)) g$208$22062))) g$208$22054))) ((lambda (g$208$22082) (if (g$208$15966 g$208$22082) (begin '#f ((lambda (g$208$22084) (if g$208$22084 (begin '#f ((lambda (g$208$22086) (if g$208$22086 (begin '#f (append g$208$22084 g$208$22086)) '#f)) ((lambda (g$208$22088) (if (g$208$15966 g$208$22088) (begin '#f ((lambda (g$208$22090) (if g$208$22090 (begin '#f ((lambda (g$208$22092) (if g$208$22092 (begin '#f (append g$208$22090 g$208$22092)) '#f)) ((lambda (g$208$22094) (if (equal? (g$208$16002 g$208$22094) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22088)))) '#f)) ((lambda (g$208$22096) (list g$208$22096)) (g$208$15974 g$208$22088)))) '#f)) (g$208$15976 g$208$22082)))) '#f)) ((lambda (g$208$22098) (if (g$208$15980 g$208$22098) (if (g$208$15988 g$208$22098 (g$208$16466 'immutable)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22082)))) '#f)) g$208$22054))) g$208$22046))) ((lambda (g$208$22100) (if (g$208$15966 g$208$22100) (begin '#f ((lambda (g$208$22102) (if g$208$22102 (begin '#f ((lambda (g$208$22104) (if g$208$22104 (begin '#f (append g$208$22102 g$208$22104)) '#f)) ((lambda (g$208$22106) (if (g$208$15966 g$208$22106) (begin '#f ((lambda (g$208$22108) (if g$208$22108 (begin '#f ((lambda (g$208$22110) (if g$208$22110 (begin '#f (append g$208$22108 g$208$22110)) '#f)) ((lambda (g$208$22112) (if (equal? (g$208$16002 g$208$22112) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22106)))) '#f)) ((lambda (g$208$22114) (list g$208$22114)) (g$208$15974 g$208$22106)))) '#f)) (g$208$15976 g$208$22100)))) '#f)) ((lambda (g$208$22116) (if (g$208$15980 g$208$22116) (if (g$208$15988 g$208$22116 (g$208$16466 'mutable)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22100)))) '#f)) g$208$22046))) g$208$22034))) ((lambda (g$208$22118) (if (g$208$15966 g$208$22118) (begin '#f ((lambda (g$208$22120) (if g$208$22120 (begin '#f ((lambda (g$208$22122) (if g$208$22122 (begin '#f (append g$208$22120 g$208$22122)) '#f)) ((lambda (g$208$22124) (if (g$208$15966 g$208$22124) (begin '#f ((lambda (g$208$22126) (if g$208$22126 (begin '#f ((lambda (g$208$22128) (if g$208$22128 (begin '#f (append g$208$22126 g$208$22128)) '#f)) ((lambda (g$208$22130) (if (g$208$15966 g$208$22130) (begin '#f ((lambda (g$208$22132) (if g$208$22132 (begin '#f ((lambda (g$208$22134) (if g$208$22134 (begin '#f (append g$208$22132 g$208$22134)) '#f)) ((lambda (g$208$22136) (if (equal? (g$208$16002 g$208$22136) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22130)))) '#f)) ((lambda (g$208$22138) (list g$208$22138)) (g$208$15974 g$208$22130)))) '#f)) (g$208$15976 g$208$22124)))) '#f)) ((lambda (g$208$22140) (list g$208$22140)) (g$208$15974 g$208$22124)))) '#f)) (g$208$15976 g$208$22118)))) '#f)) ((lambda (g$208$22142) (if (g$208$15980 g$208$22142) (if (g$208$15988 g$208$22142 (g$208$16466 'immutable)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22118)))) '#f)) g$208$22034))) g$208$22018))) ((lambda (g$208$22144) (if (g$208$15966 g$208$22144) (begin '#f ((lambda (g$208$22146) (if g$208$22146 (begin '#f ((lambda (g$208$22148) (if g$208$22148 (begin '#f (append g$208$22146 g$208$22148)) '#f)) ((lambda (g$208$22150) (if (g$208$15966 g$208$22150) (begin '#f ((lambda (g$208$22152) (if g$208$22152 (begin '#f ((lambda (g$208$22154) (if g$208$22154 (begin '#f (append g$208$22152 g$208$22154)) '#f)) ((lambda (g$208$22156) (if (g$208$15966 g$208$22156) (begin '#f ((lambda (g$208$22158) (if g$208$22158 (begin '#f ((lambda (g$208$22160) (if g$208$22160 (begin '#f (append g$208$22158 g$208$22160)) '#f)) ((lambda (g$208$22162) (if (g$208$15966 g$208$22162) (begin '#f ((lambda (g$208$22164) (if g$208$22164 (begin '#f ((lambda (g$208$22166) (if g$208$22166 (begin '#f (append g$208$22164 g$208$22166)) '#f)) ((lambda (g$208$22168) (if (equal? (g$208$16002 g$208$22168) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$22162)))) '#f)) ((lambda (g$208$22170) (list g$208$22170)) (g$208$15974 g$208$22162)))) '#f)) (g$208$15976 g$208$22156)))) '#f)) ((lambda (g$208$22172) (list g$208$22172)) (g$208$15974 g$208$22156)))) '#f)) (g$208$15976 g$208$22150)))) '#f)) ((lambda (g$208$22174) (list g$208$22174)) (g$208$15974 g$208$22150)))) '#f)) (g$208$15976 g$208$22144)))) '#f)) ((lambda (g$208$22176) (if (g$208$15980 g$208$22176) (if (g$208$15988 g$208$22176 (g$208$16466 'mutable)) (begin '#f '()) '#f) '#f)) (g$208$15974 g$208$22144)))) '#f)) g$208$22018))) g$208$22016)) g$208$22011))) '#f))) (set! g$208$21864 (lambda (g$208$22002) ((letrec ((g$208$22004 (lambda (g$208$22006 g$208$22007) (if (null? g$208$22006) '() (cons g$208$22007 (g$208$22004 (cdr g$208$22006) (+ g$208$22007 '1))))))) g$208$22004) g$208$22002 '0))) (set! g$208$21866 (lambda (g$208$21962 g$208$21963) ((lambda (g$208$21966) ((lambda (g$208$21968) ((lambda (g$208$21970) ((lambda (g$208$21972) ((lambda (g$208$21974) ((lambda (g$208$21976) ((lambda (g$208$21978) ((lambda (g$208$21980) ((lambda (g$208$21982) ((lambda (g$208$21984) ((lambda (g$208$21986) ((lambda (g$208$21988) ((lambda (g$208$21990) ((lambda (g$208$21992) ((lambda () (g$208$16504 (cons 'begin (cons (list 'define g$208$21968 g$208$21988) (cons (list 'define g$208$21972 g$208$21992) (cons (list 'define g$208$21970 g$208$21990) (cons (list 'define-syntax g$208$21966 (list 'list ''$rtd (list 'syntax g$208$21968) (list 'syntax g$208$21970))) (cons (list 'define g$208$21986 (list 'record-predicate g$208$21968)) (cons (list 'define g$208$21974 (list 'record-constructor g$208$21970)) (append (map (lambda (g$208$21994 g$208$21995) (list 'define g$208$21994 (list 'record-accessor g$208$21968 g$208$21995))) g$208$21980 g$208$21978) (map (lambda (g$208$21998 g$208$21999) (list 'define g$208$21998 (list 'record-mutator g$208$21968 g$208$21999))) g$208$21982 g$208$21984))))))))))))) (g$208$21854 g$208$21963))) (g$208$21852 g$208$21963 g$208$21968 g$208$21972))) (g$208$21850 g$208$21966 g$208$21963))) (g$208$21846 g$208$21962))) (g$208$21858 g$208$21976))) (g$208$21860 g$208$21966 g$208$21976))) (g$208$21862 g$208$21966 g$208$21976))) (g$208$21864 g$208$21976))) (g$208$21856 g$208$21963))) (g$208$21844 g$208$21962))) (gensym))) (gensym))) (gensym))) (g$208$21842 g$208$21962)))) (set! g$208$21868 (lambda (g$208$21908 g$208$21909) ((lambda (g$208$21912 g$208$21914) (begin (set! g$208$21912 (map g$208$16504 '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! g$208$21914 (lambda (g$208$21956 g$208$21957) (if (pair? g$208$21957) (begin '#f ((lambda (g$208$21960) (if g$208$21960 g$208$21960 (begin '#f (g$208$21914 g$208$21956 (cdr g$208$21957))))) (g$208$15988 g$208$21956 (car g$208$21957)))) '#f))) ((letrec ((g$208$21916 (lambda (g$208$21918 g$208$21919) (if (null? g$208$21918) (void) ((lambda (g$208$21922) ((lambda (g$208$21924) (if (if g$208$21924 (begin '#f (apply (lambda (g$208$21926 g$208$21927) '#t) g$208$21924)) '#f) (apply (lambda (g$208$21930 g$208$21931) (if ((lambda (g$208$21934) (if g$208$21934 g$208$21934 (begin '#f (not (g$208$21914 g$208$21930 g$208$21912))))) (not (g$208$15980 g$208$21930))) (g$208$16715 '#f '"not a valid define-record-type keyword" g$208$21930) (if (g$208$15994 g$208$21930 g$208$21919) (g$208$16715 '#f '"duplicate use of keyword " g$208$21908 g$208$21930) (g$208$21916 (cdr g$208$21918) (cons g$208$21930 g$208$21919))))) g$208$21924) ((lambda (g$208$21936) ((lambda (g$208$21938) (if (if g$208$21938 (begin '#f (apply (lambda (g$208$21940) '#t) g$208$21938)) '#f) (apply (lambda (g$208$21942) (g$208$16715 '#f '"malformed define-record-type clause" g$208$21942)) g$208$21938) (g$208$16715 '#f '"invalid syntax" g$208$21936))) ((lambda (g$208$21944) (list g$208$21944)) g$208$21936))) g$208$21922))) ((lambda (g$208$21946) (if (g$208$15966 g$208$21946) (begin '#f ((lambda (g$208$21948) (if g$208$21948 (begin '#f ((lambda (g$208$21950) (if g$208$21950 (begin '#f (append g$208$21948 g$208$21950)) '#f)) ((lambda (g$208$21952) (list g$208$21952)) (g$208$15976 g$208$21946)))) '#f)) ((lambda (g$208$21954) (list g$208$21954)) (g$208$15974 g$208$21946)))) '#f)) g$208$21922))) (car g$208$21918)))))) g$208$21916) g$208$21909 '()))) '#f '#f))) ((lambda (g$208$21870) ((lambda (g$208$21872) (if (if g$208$21872 (begin '#f (apply (lambda (g$208$21874 g$208$21875) '#t) g$208$21872)) '#f) (apply (lambda (g$208$21878 g$208$21879) (begin (g$208$21868 g$208$21838 g$208$21879) (g$208$21866 g$208$21878 g$208$21879))) g$208$21872) (g$208$16715 '#f '"invalid syntax" g$208$21870))) ((lambda (g$208$21882) (if (g$208$15966 g$208$21882) (begin '#f ((lambda (g$208$21884) (if g$208$21884 (begin '#f ((lambda (g$208$21886) (if g$208$21886 (begin '#f (append g$208$21884 g$208$21886)) '#f)) ((lambda (g$208$21888) (if (g$208$15966 g$208$21888) (begin '#f ((lambda (g$208$21890) (if g$208$21890 (begin '#f ((lambda (g$208$21892) (if g$208$21892 (begin '#f (append g$208$21890 g$208$21892)) '#f)) ((letrec ((g$208$21894 (lambda (g$208$21896) (if (g$208$15966 g$208$21896) ((lambda (g$208$21898) (if g$208$21898 (begin '#f ((lambda (g$208$21900) (if g$208$21900 (begin '#f (map cons g$208$21898 g$208$21900)) '#f)) (g$208$21894 (g$208$15976 g$208$21896)))) '#f)) ((lambda (g$208$21902) (list g$208$21902)) (g$208$15974 g$208$21896))) (if (g$208$15970 g$208$21896) (list (begin 'clause* '())) '#f))))) g$208$21894) (g$208$15976 g$208$21888)))) '#f)) ((lambda (g$208$21904) (list g$208$21904)) (g$208$15974 g$208$21888)))) '#f)) (g$208$15976 g$208$21882)))) '#f)) ((lambda (g$208$21906) '()) (g$208$15974 g$208$21882)))) '#f)) g$208$21870))) g$208$21838))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$208$16562 (lambda (g$208$22976) ((lambda (g$208$22978) (begin (set! g$208$22978 (lambda (g$208$23090 g$208$23091) (g$208$16719 g$208$23090 (string->symbol (string-append (symbol->string (g$208$16721 g$208$23090)) g$208$23091))))) ((lambda (g$208$22980) ((lambda (g$208$22982) (if (if g$208$22982 (begin '#f (apply (lambda (g$208$22984 g$208$22985 g$208$22986 g$208$22987 g$208$22988 g$208$22989 g$208$22990) (if (g$208$15980 g$208$22985) (if (g$208$15980 g$208$22986) (if (g$208$15980 g$208$22987) (if (g$208$15980 g$208$22988) (if (for-all g$208$15980 g$208$22989) (begin '#f (for-all g$208$15980 g$208$22990)) '#f) '#f) '#f) '#f) '#f)) g$208$22982)) '#f) (apply (lambda (g$208$22998 g$208$22999 g$208$23000 g$208$23001 g$208$23002 g$208$23003 g$208$23004) ((lambda (g$208$23012) (g$208$16504 (cons 'begin (cons (cons 'define-record-type (cons (list g$208$22999 g$208$23001 (gensym)) (cons (list 'parent g$208$23000) (cons (cons 'fields (map (lambda (g$208$23014 g$208$23015) (list 'immutable g$208$23014 g$208$23015)) g$208$23003 g$208$23012)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$208$23002 (list 'condition-predicate (list 'record-type-descriptor g$208$22999))) (map (lambda (g$208$23018 g$208$23019) (list 'define g$208$23018 (list 'condition-accessor (list 'record-type-descriptor g$208$22999) g$208$23019))) g$208$23004 g$208$23012)))))) (map (lambda (g$208$23022) (gensym)) g$208$23004))) g$208$22982) (g$208$16715 '#f '"invalid syntax" g$208$22980))) ((lambda (g$208$23024) (if (g$208$15966 g$208$23024) (begin '#f ((lambda (g$208$23026) (if g$208$23026 (begin '#f ((lambda (g$208$23028) (if g$208$23028 (begin '#f (append g$208$23026 g$208$23028)) '#f)) ((lambda (g$208$23030) (if (g$208$15966 g$208$23030) (begin '#f ((lambda (g$208$23032) (if g$208$23032 (begin '#f ((lambda (g$208$23034) (if g$208$23034 (begin '#f (append g$208$23032 g$208$23034)) '#f)) ((lambda (g$208$23036) (if (g$208$15966 g$208$23036) (begin '#f ((lambda (g$208$23038) (if g$208$23038 (begin '#f ((lambda (g$208$23040) (if g$208$23040 (begin '#f (append g$208$23038 g$208$23040)) '#f)) ((lambda (g$208$23042) (if (g$208$15966 g$208$23042) (begin '#f ((lambda (g$208$23044) (if g$208$23044 (begin '#f ((lambda (g$208$23046) (if g$208$23046 (begin '#f (append g$208$23044 g$208$23046)) '#f)) ((lambda (g$208$23048) (if (g$208$15966 g$208$23048) (begin '#f ((lambda (g$208$23050) (if g$208$23050 (begin '#f ((lambda (g$208$23052) (if g$208$23052 (begin '#f (append g$208$23050 g$208$23052)) '#f)) ((letrec ((g$208$23054 (lambda (g$208$23056) (if (g$208$15966 g$208$23056) ((lambda (g$208$23058) (if g$208$23058 (begin '#f ((lambda (g$208$23060) (if g$208$23060 (begin '#f (map cons g$208$23058 g$208$23060)) '#f)) (g$208$23054 (g$208$15976 g$208$23056)))) '#f)) ((lambda (g$208$23062) (if (g$208$15966 g$208$23062) (begin '#f ((lambda (g$208$23064) (if g$208$23064 (begin '#f ((lambda (g$208$23066) (if g$208$23066 (begin '#f (append g$208$23064 g$208$23066)) '#f)) ((lambda (g$208$23068) (if (g$208$15966 g$208$23068) (begin '#f ((lambda (g$208$23070) (if g$208$23070 (begin '#f ((lambda (g$208$23072) (if g$208$23072 (begin '#f (append g$208$23070 g$208$23072)) '#f)) ((lambda (g$208$23074) (if (equal? (g$208$16002 g$208$23074) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$23068)))) '#f)) ((lambda (g$208$23076) (list g$208$23076)) (g$208$15974 g$208$23068)))) '#f)) (g$208$15976 g$208$23062)))) '#f)) ((lambda (g$208$23078) (list g$208$23078)) (g$208$15974 g$208$23062)))) '#f)) (g$208$15974 g$208$23056))) (if (g$208$15970 g$208$23056) (list (begin 'field* '()) (begin 'accessor* '())) '#f))))) g$208$23054) (g$208$15976 g$208$23048)))) '#f)) ((lambda (g$208$23080) (list g$208$23080)) (g$208$15974 g$208$23048)))) '#f)) (g$208$15976 g$208$23042)))) '#f)) ((lambda (g$208$23082) (list g$208$23082)) (g$208$15974 g$208$23042)))) '#f)) (g$208$15976 g$208$23036)))) '#f)) ((lambda (g$208$23084) (list g$208$23084)) (g$208$15974 g$208$23036)))) '#f)) (g$208$15976 g$208$23030)))) '#f)) ((lambda (g$208$23086) (list g$208$23086)) (g$208$15974 g$208$23030)))) '#f)) (g$208$15976 g$208$23024)))) '#f)) ((lambda (g$208$23088) (list g$208$23088)) (g$208$15974 g$208$23024)))) '#f)) g$208$22980))) g$208$22976))) '#f))) (set! g$208$16564 (lambda (g$208$23094) (g$208$16715 '#f '"incorrect usage of auxiliary keyword" g$208$23094))) (set! g$208$16566 (lambda (g$208$23096 g$208$23097 g$208$23098) ((lambda (g$208$23102) ((lambda (g$208$23104) (if (if g$208$23104 (begin '#f (apply (lambda (g$208$23106 g$208$23107) '#t) g$208$23104)) '#f) (apply (lambda (g$208$23110 g$208$23111) (g$208$16616 (cons g$208$23110 g$208$23111) g$208$23097 g$208$23098)) g$208$23104) ((lambda (g$208$23114) ((lambda (g$208$23116) (if (if g$208$23116 (begin '#f (apply (lambda (g$208$23118 g$208$23119 g$208$23120 g$208$23121) '#t) g$208$23116)) '#f) (apply (lambda (g$208$23126 g$208$23127 g$208$23128 g$208$23129) ((lambda (g$208$23134 g$208$23135 g$208$23136 g$208$23137) (g$208$15862 '#f (append g$208$23134 g$208$23135) (append (g$208$16596 g$208$23126 g$208$23097 g$208$23098) (g$208$16596 g$208$23127 g$208$23097 g$208$23098)) (g$208$15862 '#f (list g$208$23137) (list (g$208$15860 '#f '() (g$208$15863 '#f (map (lambda (g$208$23142 g$208$23143 g$208$23144) (g$208$15862 '#f (list g$208$23142) (list (list g$208$23143)) (g$208$15863 '#f (list (list g$208$23143 g$208$23144) (list 'set! g$208$23144 g$208$23142))))) g$208$23136 g$208$23134 g$208$23135)))) (list '(primitive dynamic-wind) g$208$23137 (g$208$15860 '#f '() (g$208$16616 (cons g$208$23128 g$208$23129) g$208$23097 g$208$23098)) g$208$23137)))) (map (lambda (g$208$23148) (g$208$15890 'lhs)) g$208$23126) (map (lambda (g$208$23150) (g$208$15890 'rhs)) g$208$23126) (map (lambda (g$208$23152) (g$208$15890 't)) g$208$23126) (g$208$15890 'swap))) g$208$23116) (g$208$16715 '#f '"invalid syntax" g$208$23114))) ((lambda (g$208$23154) (if (g$208$15966 g$208$23154) (begin '#f ((lambda (g$208$23156) (if g$208$23156 (begin '#f ((lambda (g$208$23158) (if g$208$23158 (begin '#f (append g$208$23156 g$208$23158)) '#f)) ((lambda (g$208$23160) (if (g$208$15966 g$208$23160) (begin '#f ((lambda (g$208$23162) (if g$208$23162 (begin '#f ((lambda (g$208$23164) (if g$208$23164 (begin '#f (append g$208$23162 g$208$23164)) '#f)) ((lambda (g$208$23166) (if (g$208$15966 g$208$23166) (begin '#f ((lambda (g$208$23168) (if g$208$23168 (begin '#f ((lambda (g$208$23170) (if g$208$23170 (begin '#f (append g$208$23168 g$208$23170)) '#f)) ((letrec ((g$208$23172 (lambda (g$208$23174) (if (g$208$15966 g$208$23174) ((lambda (g$208$23176) (if g$208$23176 (begin '#f ((lambda (g$208$23178) (if g$208$23178 (begin '#f (map cons g$208$23176 g$208$23178)) '#f)) (g$208$23172 (g$208$15976 g$208$23174)))) '#f)) ((lambda (g$208$23180) (list g$208$23180)) (g$208$15974 g$208$23174))) (if (g$208$15970 g$208$23174) (list (begin 'b* '())) '#f))))) g$208$23172) (g$208$15976 g$208$23166)))) '#f)) ((lambda (g$208$23182) (list g$208$23182)) (g$208$15974 g$208$23166)))) '#f)) (g$208$15976 g$208$23160)))) '#f)) ((letrec ((g$208$23184 (lambda (g$208$23186) (if (g$208$15966 g$208$23186) ((lambda (g$208$23188) (if g$208$23188 (begin '#f ((lambda (g$208$23190) (if g$208$23190 (begin '#f (map cons g$208$23188 g$208$23190)) '#f)) (g$208$23184 (g$208$15976 g$208$23186)))) '#f)) ((lambda (g$208$23192) (if (g$208$15966 g$208$23192) (begin '#f ((lambda (g$208$23194) (if g$208$23194 (begin '#f ((lambda (g$208$23196) (if g$208$23196 (begin '#f (append g$208$23194 g$208$23196)) '#f)) ((lambda (g$208$23198) (if (g$208$15966 g$208$23198) (begin '#f ((lambda (g$208$23200) (if g$208$23200 (begin '#f ((lambda (g$208$23202) (if g$208$23202 (begin '#f (append g$208$23200 g$208$23202)) '#f)) ((lambda (g$208$23204) (if (equal? (g$208$16002 g$208$23204) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$23198)))) '#f)) ((lambda (g$208$23206) (list g$208$23206)) (g$208$15974 g$208$23198)))) '#f)) (g$208$15976 g$208$23192)))) '#f)) ((lambda (g$208$23208) (list g$208$23208)) (g$208$15974 g$208$23192)))) '#f)) (g$208$15974 g$208$23186))) (if (g$208$15970 g$208$23186) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f))))) g$208$23184) (g$208$15974 g$208$23160)))) '#f)) (g$208$15976 g$208$23154)))) '#f)) ((lambda (g$208$23210) '()) (g$208$15974 g$208$23154)))) '#f)) g$208$23114))) g$208$23102))) ((lambda (g$208$23212) (if (g$208$15966 g$208$23212) (begin '#f ((lambda (g$208$23214) (if g$208$23214 (begin '#f ((lambda (g$208$23216) (if g$208$23216 (begin '#f (append g$208$23214 g$208$23216)) '#f)) ((lambda (g$208$23218) (if (g$208$15966 g$208$23218) (begin '#f ((lambda (g$208$23220) (if g$208$23220 (begin '#f ((lambda (g$208$23222) (if g$208$23222 (begin '#f (append g$208$23220 g$208$23222)) '#f)) ((lambda (g$208$23224) (if (g$208$15966 g$208$23224) (begin '#f ((lambda (g$208$23226) (if g$208$23226 (begin '#f ((lambda (g$208$23228) (if g$208$23228 (begin '#f (append g$208$23226 g$208$23228)) '#f)) ((letrec ((g$208$23230 (lambda (g$208$23232) (if (g$208$15966 g$208$23232) ((lambda (g$208$23234) (if g$208$23234 (begin '#f ((lambda (g$208$23236) (if g$208$23236 (begin '#f (map cons g$208$23234 g$208$23236)) '#f)) (g$208$23230 (g$208$15976 g$208$23232)))) '#f)) ((lambda (g$208$23238) (list g$208$23238)) (g$208$15974 g$208$23232))) (if (g$208$15970 g$208$23232) (list (begin 'b* '())) '#f))))) g$208$23230) (g$208$15976 g$208$23224)))) '#f)) ((lambda (g$208$23240) (list g$208$23240)) (g$208$15974 g$208$23224)))) '#f)) (g$208$15976 g$208$23218)))) '#f)) ((lambda (g$208$23242) (if (equal? (g$208$16002 g$208$23242) '()) (begin '#f '()) '#f)) (g$208$15974 g$208$23218)))) '#f)) (g$208$15976 g$208$23212)))) '#f)) ((lambda (g$208$23244) '()) (g$208$15974 g$208$23212)))) '#f)) g$208$23102))) g$208$23096))) (set! g$208$16568 (lambda (g$208$23246 g$208$23247 g$208$23248) ((lambda (g$208$23252) ((lambda (g$208$23254) (if (if g$208$23254 (begin '#f (apply (lambda (g$208$23256 g$208$23257) '#t) g$208$23254)) '#f) (apply (lambda (g$208$23260 g$208$23261) (cons 'foreign-call (cons (g$208$16600 g$208$23260 g$208$23247 g$208$23248) (g$208$16596 g$208$23261 g$208$23247 g$208$23248)))) g$208$23254) (g$208$16715 '#f '"invalid syntax" g$208$23252))) ((lambda (g$208$23264) (if (g$208$15966 g$208$23264) (begin '#f ((lambda (g$208$23266) (if g$208$23266 (begin '#f ((lambda (g$208$23268) (if g$208$23268 (begin '#f (append g$208$23266 g$208$23268)) '#f)) ((lambda (g$208$23270) (if (g$208$15966 g$208$23270) (begin '#f ((lambda (g$208$23272) (if g$208$23272 (begin '#f ((lambda (g$208$23274) (if g$208$23274 (begin '#f (append g$208$23272 g$208$23274)) '#f)) ((letrec ((g$208$23276 (lambda (g$208$23278) (if (g$208$15966 g$208$23278) ((lambda (g$208$23280) (if g$208$23280 (begin '#f ((lambda (g$208$23282) (if g$208$23282 (begin '#f (map cons g$208$23280 g$208$23282)) '#f)) (g$208$23276 (g$208$15976 g$208$23278)))) '#f)) ((lambda (g$208$23284) (list g$208$23284)) (g$208$15974 g$208$23278))) (if (g$208$15970 g$208$23278) (list (begin 'arg* '())) '#f))))) g$208$23276) (g$208$15976 g$208$23270)))) '#f)) ((lambda (g$208$23286) (list g$208$23286)) (g$208$15974 g$208$23270)))) '#f)) (g$208$15976 g$208$23264)))) '#f)) ((lambda (g$208$23288) '()) (g$208$15974 g$208$23264)))) '#f)) g$208$23252))) g$208$23246))) (set! g$208$16570 (lambda (g$208$23290 g$208$23291) ((lambda (g$208$23294 g$208$23296) (begin (set! g$208$23294 (lambda (g$208$23526 g$208$23527 g$208$23528) (if (null? g$208$23526) (values '() g$208$23528) (call-with-values (lambda () (g$208$23294 (cdr g$208$23526) g$208$23527 g$208$23528)) (lambda (g$208$23534 g$208$23535) ((lambda (g$208$23538 g$208$23539) (call-with-values (lambda () (g$208$23296 (car g$208$23526) g$208$23527 g$208$23538)) (lambda (g$208$23544 g$208$23545) ((lambda (g$208$23548 g$208$23549) (values (cons g$208$23549 g$208$23539) g$208$23548)) g$208$23545 g$208$23544)))) g$208$23535 g$208$23534)))))) (set! g$208$23296 (lambda (g$208$23298 g$208$23299 g$208$23300) ((lambda (g$208$23304) ((lambda (g$208$23306) (if (if g$208$23306 (begin '#f (apply (lambda (g$208$23308) (g$208$15980 g$208$23308)) g$208$23306)) '#f) (apply (lambda (g$208$23310) (if (g$208$15994 g$208$23298 g$208$23291) (values (vector 'free-id g$208$23298) g$208$23300) (if (g$208$15988 g$208$23298 (g$208$16466 '_)) (values '_ g$208$23300) (values 'any (cons (cons g$208$23298 g$208$23299) g$208$23300))))) g$208$23306) ((lambda (g$208$23312) ((lambda (g$208$23314) (if (if g$208$23314 (begin '#f (apply (lambda (g$208$23316 g$208$23317) (g$208$16574 g$208$23317)) g$208$23314)) '#f) (apply (lambda (g$208$23320 g$208$23321) (call-with-values (lambda () (g$208$23296 g$208$23320 (+ g$208$23299 '1) g$208$23300)) (lambda (g$208$23326 g$208$23327) ((lambda (g$208$23330 g$208$23331) (values (if (eq? g$208$23331 'any) 'each-any (vector 'each g$208$23331)) g$208$23330)) g$208$23327 g$208$23326)))) g$208$23314) ((lambda (g$208$23334) ((lambda (g$208$23336) (if (if g$208$23336 (begin '#f (apply (lambda (g$208$23338 g$208$23339 g$208$23340 g$208$23341) (g$208$16574 g$208$23339)) g$208$23336)) '#f) (apply (lambda (g$208$23346 g$208$23347 g$208$23348 g$208$23349) (call-with-values (lambda () (g$208$23296 g$208$23349 g$208$23299 g$208$23300)) (lambda (g$208$23356 g$208$23357) ((lambda (g$208$23360 g$208$23361) (call-with-values (lambda () (g$208$23294 g$208$23348 g$208$23299 g$208$23360)) (lambda (g$208$23366 g$208$23367) ((lambda (g$208$23370 g$208$23371) (call-with-values (lambda () (g$208$23296 g$208$23346 (+ g$208$23299 '1) g$208$23370)) (lambda (g$208$23376 g$208$23377) ((lambda (g$208$23380 g$208$23381) (values (vector 'each+ g$208$23381 (reverse g$208$23371) g$208$23361) g$208$23380)) g$208$23377 g$208$23376)))) g$208$23367 g$208$23366)))) g$208$23357 g$208$23356)))) g$208$23336) ((lambda (g$208$23384) ((lambda (g$208$23386) (if (if g$208$23386 (begin '#f (apply (lambda (g$208$23388 g$208$23389) '#t) g$208$23386)) '#f) (apply (lambda (g$208$23392 g$208$23393) (call-with-values (lambda () (g$208$23296 g$208$23393 g$208$23299 g$208$23300)) (lambda (g$208$23398 g$208$23399) ((lambda (g$208$23402 g$208$23403) (call-with-values (lambda () (g$208$23296 g$208$23392 g$208$23299 g$208$23402)) (lambda (g$208$23408 g$208$23409) ((lambda (g$208$23412 g$208$23413) (values (cons g$208$23413 g$208$23403) g$208$23412)) g$208$23409 g$208$23408)))) g$208$23399 g$208$23398)))) g$208$23386) ((lambda (g$208$23416) ((lambda (g$208$23418) (if (if g$208$23418 (begin '#f (apply (lambda () '#t) g$208$23418)) '#f) (apply (lambda () (values '() g$208$23300)) g$208$23418) ((lambda (g$208$23420) ((lambda (g$208$23422) (if (if g$208$23422 (begin '#f (apply (lambda (g$208$23424) (not (g$208$15932 g$208$23424))) g$208$23422)) '#f) (apply (lambda (g$208$23426) (call-with-values (lambda () (g$208$23296 g$208$23426 g$208$23299 g$208$23300)) (lambda (g$208$23430 g$208$23431) ((lambda (g$208$23434 g$208$23435) (values (vector 'vector g$208$23435) g$208$23434)) g$208$23431 g$208$23430)))) g$208$23422) ((lambda (g$208$23438) ((lambda (g$208$23440) (if (if g$208$23440 (begin '#f (apply (lambda (g$208$23442) '#t) g$208$23440)) '#f) (apply (lambda (g$208$23444) (values (vector 'atom (g$208$16002 g$208$23444)) g$208$23300)) g$208$23440) (g$208$16715 '#f '"invalid syntax" g$208$23438))) ((lambda (g$208$23446) (list g$208$23446)) g$208$23438))) g$208$23420))) ((lambda (g$208$23448) (if (g$208$15968 g$208$23448) (begin '#f ((letrec ((g$208$23450 (lambda (g$208$23452) (if (g$208$15966 g$208$23452) ((lambda (g$208$23454) (if g$208$23454 (begin '#f ((lambda (g$208$23456) (if g$208$23456 (begin '#f (map cons g$208$23454 g$208$23456)) '#f)) (g$208$23450 (g$208$15976 g$208$23452)))) '#f)) ((lambda (g$208$23458) (list g$208$23458)) (g$208$15974 g$208$23452))) (if (g$208$15970 g$208$23452) (list (begin 'p '())) '#f))))) g$208$23450) (g$208$15964 g$208$23448))) '#f)) g$208$23420))) g$208$23416))) ((lambda (g$208$23460) (if (equal? (g$208$16002 g$208$23460) '()) (begin '#f '()) '#f)) g$208$23416))) g$208$23384))) ((lambda (g$208$23462) (if (g$208$15966 g$208$23462) (begin '#f ((lambda (g$208$23464) (if g$208$23464 (begin '#f ((lambda (g$208$23466) (if g$208$23466 (begin '#f (append g$208$23464 g$208$23466)) '#f)) ((lambda (g$208$23468) (list g$208$23468)) (g$208$15976 g$208$23462)))) '#f)) ((lambda (g$208$23470) (list g$208$23470)) (g$208$15974 g$208$23462)))) '#f)) g$208$23384))) g$208$23334))) ((lambda (g$208$23472) (if (g$208$15966 g$208$23472) (begin '#f ((lambda (g$208$23474) (if g$208$23474 (begin '#f ((lambda (g$208$23476) (if g$208$23476 (begin '#f (append g$208$23474 g$208$23476)) '#f)) ((lambda (g$208$23478) (if (g$208$15966 g$208$23478) (begin '#f ((lambda (g$208$23480) (if g$208$23480 (begin '#f ((lambda (g$208$23482) (if g$208$23482 (begin '#f (append g$208$23480 g$208$23482)) '#f)) ((letrec ((g$208$23484 (lambda (g$208$23490) (if (g$208$15966 g$208$23490) ((lambda (g$208$23492) (if g$208$23492 (begin '#f ((lambda (g$208$23494) (if g$208$23494 (begin '#f (cons (map cons g$208$23492 (car g$208$23494)) (cdr g$208$23494))) '#f)) (g$208$23484 (g$208$15976 g$208$23490)))) '#f)) ((lambda (g$208$23496) (list g$208$23496)) (g$208$15974 g$208$23490))) ((lambda (g$208$23498) (if g$208$23498 (begin '#f (cons (list (begin 'ys '())) g$208$23498)) '#f)) ((lambda (g$208$23500) (list g$208$23500)) g$208$23490)))))) (lambda (g$208$23486) ((lambda (g$208$23488) (if g$208$23488 (begin '#f (append (car g$208$23488) (cdr g$208$23488))) '#f)) (g$208$23484 g$208$23486)))) (g$208$15976 g$208$23478)))) '#f)) ((lambda (g$208$23502) (list g$208$23502)) (g$208$15974 g$208$23478)))) '#f)) (g$208$15976 g$208$23472)))) '#f)) ((lambda (g$208$23504) (list g$208$23504)) (g$208$15974 g$208$23472)))) '#f)) g$208$23334))) g$208$23312))) ((lambda (g$208$23506) (if (g$208$15966 g$208$23506) (begin '#f ((lambda (g$208$23508) (if g$208$23508 (begin '#f ((lambda (g$208$23510) (if g$208$23510 (begin '#f (append g$208$23508 g$208$23510)) '#f)) ((lambda (g$208$23512) (if (g$208$15966 g$208$23512) (begin '#f ((lambda (g$208$23514) (if g$208$23514 (begin '#f ((lambda (g$208$23516) (if g$208$23516 (begin '#f (append g$208$23514 g$208$23516)) '#f)) ((lambda (g$208$23518) (if (equal? (g$208$16002 g$208$23518) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$23512)))) '#f)) ((lambda (g$208$23520) (list g$208$23520)) (g$208$15974 g$208$23512)))) '#f)) (g$208$15976 g$208$23506)))) '#f)) ((lambda (g$208$23522) (list g$208$23522)) (g$208$15974 g$208$23506)))) '#f)) g$208$23312))) g$208$23304))) ((lambda (g$208$23524) (list g$208$23524)) g$208$23304))) g$208$23298))) (g$208$23296 g$208$23290 '0 '()))) '#f '#f))) (set! g$208$16572 (lambda (g$208$23552 g$208$23553) ((lambda (g$208$23556 g$208$23558 g$208$23560 g$208$23562 g$208$23564 g$208$23566 g$208$23568 g$208$23570) (begin (set! g$208$23556 (lambda (g$208$23720 g$208$23721 g$208$23722) (if (if (null? g$208$23721) (begin '#f (null? g$208$23722)) '#f) g$208$23720 (g$208$15956 g$208$23720 g$208$23721 g$208$23722)))) (set! g$208$23558 (lambda (g$208$23698 g$208$23699 g$208$23700 g$208$23701) (if (pair? g$208$23698) ((lambda (g$208$23706) (if g$208$23706 (begin '#f ((lambda (g$208$23708) (if g$208$23708 (begin '#f (cons g$208$23706 g$208$23708)) '#f)) (g$208$23558 (cdr g$208$23698) g$208$23699 g$208$23700 g$208$23701))) '#f)) (g$208$23570 (car g$208$23698) g$208$23699 g$208$23700 g$208$23701 '())) (if (null? g$208$23698) '() (if (g$208$15932 g$208$23698) (call-with-values (lambda () (g$208$15954 g$208$23700 g$208$23701 g$208$23698)) (lambda (g$208$23712 g$208$23713) ((lambda (g$208$23716 g$208$23717) (g$208$23558 (g$208$15934 g$208$23698) g$208$23699 g$208$23717 g$208$23716)) g$208$23713 g$208$23712))) (if (g$208$14922 g$208$23698) (g$208$23558 (g$208$14923 g$208$23698) g$208$23699 g$208$23700 g$208$23701) '#f)))))) (set! g$208$23560 (lambda (g$208$23649 g$208$23650 g$208$23651 g$208$23652 g$208$23653 g$208$23654 g$208$23655) ((letrec ((g$208$23663 (lambda (g$208$23665 g$208$23666 g$208$23667) (if (pair? g$208$23665) (call-with-values (lambda () (g$208$23663 (cdr g$208$23665) g$208$23666 g$208$23667)) (lambda (g$208$23674 g$208$23675 g$208$23676) ((lambda (g$208$23680 g$208$23681 g$208$23682) (if g$208$23680 (if (null? g$208$23681) ((lambda (g$208$23686) (if g$208$23686 (values (cons g$208$23686 g$208$23682) g$208$23681 g$208$23680) (values '#f '#f '#f))) (g$208$23570 (car g$208$23665) g$208$23650 g$208$23666 g$208$23667 '())) (values '() (cdr g$208$23681) (g$208$23570 (car g$208$23665) (car g$208$23681) g$208$23666 g$208$23667 g$208$23680))) (values '#f '#f '#f))) g$208$23676 g$208$23675 g$208$23674))) (if (g$208$15932 g$208$23665) (call-with-values (lambda () (g$208$15954 g$208$23666 g$208$23667 g$208$23665)) (lambda (g$208$23690 g$208$23691) ((lambda (g$208$23694 g$208$23695) (g$208$23663 (g$208$15934 g$208$23665) g$208$23695 g$208$23694)) g$208$23691 g$208$23690))) (if (g$208$14922 g$208$23665) (g$208$23663 (g$208$14923 g$208$23665) g$208$23666 g$208$23667) (values '() g$208$23651 (g$208$23570 g$208$23665 g$208$23652 g$208$23666 g$208$23667 g$208$23655)))))))) g$208$23663) g$208$23649 g$208$23653 g$208$23654))) (set! g$208$23562 (lambda (g$208$23631 g$208$23632 g$208$23633) (if (pair? g$208$23631) ((lambda (g$208$23637) (if g$208$23637 (begin '#f (cons (g$208$23556 (car g$208$23631) g$208$23632 g$208$23633) g$208$23637)) '#f)) (g$208$23562 (cdr g$208$23631) g$208$23632 g$208$23633)) (if (null? g$208$23631) '() (if (g$208$15932 g$208$23631) (call-with-values (lambda () (g$208$15954 g$208$23632 g$208$23633 g$208$23631)) (lambda (g$208$23641 g$208$23642) ((lambda (g$208$23645 g$208$23646) (g$208$23562 (g$208$15934 g$208$23631) g$208$23646 g$208$23645)) g$208$23642 g$208$23641))) (if (g$208$14922 g$208$23631) (g$208$23562 (g$208$14923 g$208$23631) g$208$23632 g$208$23633) '#f)))))) (set! g$208$23564 (lambda (g$208$23626 g$208$23627) (if (null? g$208$23626) g$208$23627 (if (eq? g$208$23626 '_) g$208$23627 (if (eq? g$208$23626 'any) (cons '() g$208$23627) (if (pair? g$208$23626) (g$208$23564 (car g$208$23626) (g$208$23564 (cdr g$208$23626) g$208$23627)) (if (eq? g$208$23626 'each-any) (cons '() g$208$23627) ((lambda (g$208$23630) (if (memv g$208$23630 '(each)) (g$208$23564 (vector-ref g$208$23626 '1) g$208$23627) (if (memv g$208$23630 '(each+)) (g$208$23564 (vector-ref g$208$23626 '1) (g$208$23564 (reverse (vector-ref g$208$23626 '2)) (g$208$23564 (vector-ref g$208$23626 '3) g$208$23627))) (if (memv g$208$23630 '(free-id atom)) g$208$23627 (if (memv g$208$23630 '(vector)) (g$208$23564 (vector-ref g$208$23626 '1) g$208$23627) (assertion-violation 'syntax-dispatch '"invalid pattern" g$208$23626)))))) (vector-ref g$208$23626 '0))))))))) (set! g$208$23566 (lambda (g$208$23622 g$208$23623) (if (null? (car g$208$23622)) g$208$23623 (cons (map car g$208$23622) (g$208$23566 (map cdr g$208$23622) g$208$23623))))) (set! g$208$23568 (lambda (g$208$23592 g$208$23593 g$208$23594 g$208$23595 g$208$23596) (if (null? g$208$23593) (if (null? g$208$23592) (begin '#f g$208$23596) '#f) (if (pair? g$208$23593) (if (pair? g$208$23592) (begin '#f (g$208$23570 (car g$208$23592) (car g$208$23593) g$208$23594 g$208$23595 (g$208$23570 (cdr g$208$23592) (cdr g$208$23593) g$208$23594 g$208$23595 g$208$23596))) '#f) (if (eq? g$208$23593 'each-any) ((lambda (g$208$23602) (if g$208$23602 (begin '#f (cons g$208$23602 g$208$23596)) '#f)) (g$208$23562 g$208$23592 g$208$23594 g$208$23595)) ((lambda (g$208$23604) (if (memv g$208$23604 '(each)) (if (null? g$208$23592) (g$208$23564 (vector-ref g$208$23593 '1) g$208$23596) ((lambda (g$208$23620) (if g$208$23620 (begin '#f (g$208$23566 g$208$23620 g$208$23596)) '#f)) (g$208$23558 g$208$23592 (vector-ref g$208$23593 '1) g$208$23594 g$208$23595))) (if (memv g$208$23604 '(free-id)) (if (symbol? g$208$23592) (if (g$208$15988 (g$208$23556 g$208$23592 g$208$23594 g$208$23595) (vector-ref g$208$23593 '1)) (begin '#f g$208$23596) '#f) '#f) (if (memv g$208$23604 '(each+)) (call-with-values (lambda () (g$208$23560 g$208$23592 (vector-ref g$208$23593 '1) (vector-ref g$208$23593 '2) (vector-ref g$208$23593 '3) g$208$23594 g$208$23595 g$208$23596)) (lambda (g$208$23608 g$208$23609 g$208$23610) ((lambda (g$208$23614 g$208$23615 g$208$23616) (if g$208$23614 (if (null? g$208$23615) (begin '#f (if (null? g$208$23616) (g$208$23564 (vector-ref g$208$23593 '1) g$208$23614) (g$208$23566 g$208$23616 g$208$23614))) '#f) '#f)) g$208$23610 g$208$23609 g$208$23608))) (if (memv g$208$23604 '(atom)) (if (equal? (vector-ref g$208$23593 '1) (g$208$16000 g$208$23592 g$208$23594)) (begin '#f g$208$23596) '#f) (if (memv g$208$23604 '(vector)) (if (vector? g$208$23592) (begin '#f (g$208$23570 (vector->list g$208$23592) (vector-ref g$208$23593 '1) g$208$23594 g$208$23595 g$208$23596)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" g$208$23593))))))) (vector-ref g$208$23593 '0))))))) (set! g$208$23570 (lambda (g$208$23572 g$208$23573 g$208$23574 g$208$23575 g$208$23576) (if (not g$208$23576) '#f (if (eq? g$208$23573 '_) g$208$23576 (if (eq? g$208$23573 'any) (cons (g$208$23556 g$208$23572 g$208$23574 g$208$23575) g$208$23576) (if (g$208$15932 g$208$23572) (call-with-values (lambda () (g$208$15954 g$208$23574 g$208$23575 g$208$23572)) (lambda (g$208$23584 g$208$23585) ((lambda (g$208$23588 g$208$23589) (g$208$23570 (g$208$15934 g$208$23572) g$208$23573 g$208$23589 g$208$23588 g$208$23576)) g$208$23585 g$208$23584))) (if (g$208$14922 g$208$23572) (g$208$23570 (g$208$14923 g$208$23572) g$208$23573 g$208$23574 g$208$23575 g$208$23576) (g$208$23568 g$208$23572 g$208$23573 g$208$23574 g$208$23575 g$208$23576)))))))) (g$208$23570 g$208$23552 g$208$23553 '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$208$16574 (lambda (g$208$23726) (if (g$208$15980 g$208$23726) (begin '#f (g$208$15988 g$208$23726 (g$208$16466 '|...|))) '#f))) (set! g$208$16576 ((lambda () ((lambda (g$208$23728 g$208$23730 g$208$23732 g$208$23734) (begin (set! g$208$23728 (lambda (g$208$23944 g$208$23945 g$208$23946 g$208$23947 g$208$23948) ((lambda (g$208$23954 g$208$23955) ((lambda (g$208$23958 g$208$23959) ((lambda (g$208$23962) (list '(primitive apply) (g$208$15860 '#f g$208$23959 g$208$23962) g$208$23946)) (g$208$16600 (g$208$15960 (g$208$15927 g$208$23954 g$208$23958) g$208$23945) (append (map (lambda (g$208$23964 g$208$23965 g$208$23966) (cons g$208$23964 (g$208$16008 'syntax (cons g$208$23965 g$208$23966)))) g$208$23958 g$208$23959 (map cdr g$208$23944)) g$208$23947) g$208$23948))) (map g$208$15894 g$208$23954) (map g$208$15890 g$208$23954))) (map car g$208$23944) (map cdr g$208$23944)))) (set! g$208$23730 (lambda (g$208$23932 g$208$23933 g$208$23934) ((letrec ((g$208$23938 (lambda (g$208$23940 g$208$23941) (if (null? g$208$23940) (g$208$16715 '#f '"invalid syntax" g$208$23933) (if (g$208$15980 (car g$208$23940)) (if (g$208$15994 (car g$208$23940) g$208$23941) (g$208$16711 (car g$208$23940) '"duplicate " g$208$23934) (g$208$23938 (cdr g$208$23940) (cons (car g$208$23940) g$208$23941))) (g$208$16711 (car g$208$23940) '"invalid " g$208$23934)))))) g$208$23938) g$208$23932 '()))) (set! g$208$23732 (lambda (g$208$23894 g$208$23895 g$208$23896 g$208$23897 g$208$23898 g$208$23899 g$208$23900 g$208$23901) (call-with-values (lambda () (g$208$16570 g$208$23899 g$208$23895)) (lambda (g$208$23912 g$208$23913) ((lambda (g$208$23916 g$208$23917) (if (not (g$208$15992 (map car g$208$23916))) (g$208$23730 (map car g$208$23916) g$208$23899 '"pattern variable") (if (not (for-all (lambda (g$208$23920) (not (g$208$16574 (car g$208$23920)))) g$208$23916)) (g$208$16715 '#f '"misplaced ellipsis in syntax-case pattern" g$208$23899) ((lambda (g$208$23922) ((lambda (g$208$23924) ((lambda (g$208$23926) ((lambda (g$208$23928) (list (g$208$15860 '#f (list g$208$23922) (list 'if g$208$23924 g$208$23926 g$208$23928)) (list '(primitive syntax-dispatch) g$208$23894 (list 'quote g$208$23917)))) (g$208$23734 g$208$23894 g$208$23895 g$208$23896 g$208$23897 g$208$23898))) (g$208$23728 g$208$23916 g$208$23901 g$208$23922 g$208$23897 g$208$23898))) (if (eq? g$208$23900 '#t) g$208$23922 ((lambda (g$208$23930) (list 'if g$208$23922 g$208$23930 (list 'quote '#f))) (g$208$23728 g$208$23916 g$208$23900 g$208$23922 g$208$23897 g$208$23898))))) (g$208$15890 'tmp))))) g$208$23913 g$208$23912))))) (set! g$208$23734 (lambda (g$208$23806 g$208$23807 g$208$23808 g$208$23809 g$208$23810) (if (null? g$208$23808) (list '(primitive syntax-error) g$208$23806) ((lambda (g$208$23816) ((lambda (g$208$23818) (if (if g$208$23818 (begin '#f (apply (lambda (g$208$23820 g$208$23821) '#t) g$208$23818)) '#f) (apply (lambda (g$208$23824 g$208$23825) (if (if (g$208$15980 g$208$23824) (if (not (g$208$15994 g$208$23824 g$208$23807)) (begin '#f (not (g$208$16574 g$208$23824))) '#f) '#f) (if (g$208$15988 g$208$23824 (g$208$16466 '_)) (g$208$16600 g$208$23825 g$208$23809 g$208$23810) ((lambda (g$208$23828 g$208$23829) ((lambda (g$208$23832) (list (g$208$15860 '#f (list g$208$23829) g$208$23832) g$208$23806)) (g$208$16600 (g$208$15960 (g$208$15927 (list g$208$23824) (list g$208$23828)) g$208$23825) (cons (cons g$208$23828 (g$208$16008 'syntax (cons g$208$23829 '0))) g$208$23809) g$208$23810))) (g$208$15894 g$208$23824) (g$208$15890 g$208$23824))) (g$208$23732 g$208$23806 g$208$23807 (cdr g$208$23808) g$208$23809 g$208$23810 g$208$23824 '#t g$208$23825))) g$208$23818) ((lambda (g$208$23834) ((lambda (g$208$23836) (if (if g$208$23836 (begin '#f (apply (lambda (g$208$23838 g$208$23839 g$208$23840) '#t) g$208$23836)) '#f) (apply (lambda (g$208$23844 g$208$23845 g$208$23846) (g$208$23732 g$208$23806 g$208$23807 (cdr g$208$23808) g$208$23809 g$208$23810 g$208$23844 g$208$23845 g$208$23846)) g$208$23836) (g$208$16715 '#f '"invalid syntax" g$208$23834))) ((lambda (g$208$23850) (if (g$208$15966 g$208$23850) (begin '#f ((lambda (g$208$23852) (if g$208$23852 (begin '#f ((lambda (g$208$23854) (if g$208$23854 (begin '#f (append g$208$23852 g$208$23854)) '#f)) ((lambda (g$208$23856) (if (g$208$15966 g$208$23856) (begin '#f ((lambda (g$208$23858) (if g$208$23858 (begin '#f ((lambda (g$208$23860) (if g$208$23860 (begin '#f (append g$208$23858 g$208$23860)) '#f)) ((lambda (g$208$23862) (if (g$208$15966 g$208$23862) (begin '#f ((lambda (g$208$23864) (if g$208$23864 (begin '#f ((lambda (g$208$23866) (if g$208$23866 (begin '#f (append g$208$23864 g$208$23866)) '#f)) ((lambda (g$208$23868) (if (equal? (g$208$16002 g$208$23868) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$23862)))) '#f)) ((lambda (g$208$23870) (list g$208$23870)) (g$208$15974 g$208$23862)))) '#f)) (g$208$15976 g$208$23856)))) '#f)) ((lambda (g$208$23872) (list g$208$23872)) (g$208$15974 g$208$23856)))) '#f)) (g$208$15976 g$208$23850)))) '#f)) ((lambda (g$208$23874) (list g$208$23874)) (g$208$15974 g$208$23850)))) '#f)) g$208$23834))) g$208$23816))) ((lambda (g$208$23876) (if (g$208$15966 g$208$23876) (begin '#f ((lambda (g$208$23878) (if g$208$23878 (begin '#f ((lambda (g$208$23880) (if g$208$23880 (begin '#f (append g$208$23878 g$208$23880)) '#f)) ((lambda (g$208$23882) (if (g$208$15966 g$208$23882) (begin '#f ((lambda (g$208$23884) (if g$208$23884 (begin '#f ((lambda (g$208$23886) (if g$208$23886 (begin '#f (append g$208$23884 g$208$23886)) '#f)) ((lambda (g$208$23888) (if (equal? (g$208$16002 g$208$23888) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$23882)))) '#f)) ((lambda (g$208$23890) (list g$208$23890)) (g$208$15974 g$208$23882)))) '#f)) (g$208$15976 g$208$23876)))) '#f)) ((lambda (g$208$23892) (list g$208$23892)) (g$208$15974 g$208$23876)))) '#f)) g$208$23816))) (car g$208$23808))))) (lambda (g$208$23736 g$208$23737 g$208$23738) ((lambda (g$208$23742) ((lambda (g$208$23744) (if (if g$208$23744 (begin '#f (apply (lambda (g$208$23746 g$208$23747 g$208$23748) '#t) g$208$23744)) '#f) (apply (lambda (g$208$23752 g$208$23753 g$208$23754) (begin (if (for-all (lambda (g$208$23758) (if (g$208$15980 g$208$23758) (begin '#f (not (g$208$16574 g$208$23758))) '#f)) g$208$23753) (void) (g$208$16715 '#f '"invalid literals" g$208$23736)) ((lambda (g$208$23760) ((lambda (g$208$23762) (list (g$208$15860 '#f (list g$208$23760) g$208$23762) (g$208$16600 g$208$23752 g$208$23737 g$208$23738))) (g$208$23734 g$208$23760 g$208$23753 g$208$23754 g$208$23737 g$208$23738))) (g$208$15890 'tmp)))) g$208$23744) (g$208$16715 '#f '"invalid syntax" g$208$23742))) ((lambda (g$208$23764) (if (g$208$15966 g$208$23764) (begin '#f ((lambda (g$208$23766) (if g$208$23766 (begin '#f ((lambda (g$208$23768) (if g$208$23768 (begin '#f (append g$208$23766 g$208$23768)) '#f)) ((lambda (g$208$23770) (if (g$208$15966 g$208$23770) (begin '#f ((lambda (g$208$23772) (if g$208$23772 (begin '#f ((lambda (g$208$23774) (if g$208$23774 (begin '#f (append g$208$23772 g$208$23774)) '#f)) ((lambda (g$208$23776) (if (g$208$15966 g$208$23776) (begin '#f ((lambda (g$208$23778) (if g$208$23778 (begin '#f ((lambda (g$208$23780) (if g$208$23780 (begin '#f (append g$208$23778 g$208$23780)) '#f)) ((letrec ((g$208$23782 (lambda (g$208$23784) (if (g$208$15966 g$208$23784) ((lambda (g$208$23786) (if g$208$23786 (begin '#f ((lambda (g$208$23788) (if g$208$23788 (begin '#f (map cons g$208$23786 g$208$23788)) '#f)) (g$208$23782 (g$208$15976 g$208$23784)))) '#f)) ((lambda (g$208$23790) (list g$208$23790)) (g$208$15974 g$208$23784))) (if (g$208$15970 g$208$23784) (list (begin 'clauses '())) '#f))))) g$208$23782) (g$208$15976 g$208$23776)))) '#f)) ((letrec ((g$208$23792 (lambda (g$208$23794) (if (g$208$15966 g$208$23794) ((lambda (g$208$23796) (if g$208$23796 (begin '#f ((lambda (g$208$23798) (if g$208$23798 (begin '#f (map cons g$208$23796 g$208$23798)) '#f)) (g$208$23792 (g$208$15976 g$208$23794)))) '#f)) ((lambda (g$208$23800) (list g$208$23800)) (g$208$15974 g$208$23794))) (if (g$208$15970 g$208$23794) (list (begin 'keys '())) '#f))))) g$208$23792) (g$208$15974 g$208$23776)))) '#f)) (g$208$15976 g$208$23770)))) '#f)) ((lambda (g$208$23802) (list g$208$23802)) (g$208$15974 g$208$23770)))) '#f)) (g$208$15976 g$208$23764)))) '#f)) ((lambda (g$208$23804) '()) (g$208$15974 g$208$23764)))) '#f)) g$208$23742))) g$208$23736)))) '#f '#f '#f '#f)))) (set! g$208$16578 ((lambda () ((lambda (g$208$23970 g$208$23972 g$208$23974 g$208$23976 g$208$23978 g$208$23980 g$208$23982 g$208$23984) (begin (set! g$208$23970 (lambda (g$208$24104 g$208$24105 g$208$24106 g$208$24107 g$208$24108 g$208$24109) ((lambda (g$208$24116) ((lambda (g$208$24118) (if (if g$208$24118 (begin '#f (apply (lambda (g$208$24120) (g$208$24108 g$208$24120)) g$208$24118)) '#f) (apply (lambda (g$208$24122) (g$208$16715 '#f '"misplaced ellipsis in syntax form" g$208$24104)) g$208$24118) ((lambda (g$208$24124) ((lambda (g$208$24126) (if (if g$208$24126 (begin '#f (apply (lambda (g$208$24128) (g$208$15980 g$208$24128)) g$208$24126)) '#f) (apply (lambda (g$208$24130) ((lambda (g$208$24132) ((lambda (g$208$24134) ((lambda () (if (eq? (g$208$16010 g$208$24134) 'syntax) (call-with-values (lambda () ((lambda (g$208$24138) (g$208$23972 g$208$24104 (car g$208$24138) (cdr g$208$24138) g$208$24107)) (g$208$16012 g$208$24134))) (lambda (g$208$24140 g$208$24141) ((lambda (g$208$24144 g$208$24145) (values (list 'ref g$208$24145) g$208$24144)) g$208$24141 g$208$24140))) (values (list 'quote g$208$24105) g$208$24107))))) (g$208$16006 g$208$24132 g$208$24106))) (g$208$16004 g$208$24105))) g$208$24126) ((lambda (g$208$24148) ((lambda (g$208$24150) (if (if g$208$24150 (begin '#f (apply (lambda (g$208$24152 g$208$24153) (g$208$24108 g$208$24152)) g$208$24150)) '#f) (apply (lambda (g$208$24156 g$208$24157) (if g$208$24109 (g$208$16715 '#f '"misplaced ellipsis in syntax form" g$208$24104) (g$208$23970 g$208$24104 g$208$24157 g$208$24106 g$208$24107 (lambda (g$208$24160) '#f) '#f))) g$208$24150) ((lambda (g$208$24162) ((lambda (g$208$24164) (if (if g$208$24164 (begin '#f (apply (lambda (g$208$24166 g$208$24167 g$208$24168) (g$208$24108 g$208$24167)) g$208$24164)) '#f) (apply (lambda (g$208$24172 g$208$24173 g$208$24174) ((letrec ((g$208$24178 (lambda (g$208$24180 g$208$24181) ((lambda (g$208$24184) ((lambda (g$208$24186) (if (if g$208$24186 (begin '#f (apply (lambda () '#t) g$208$24186)) '#f) (apply (lambda () (g$208$24181 g$208$24107)) g$208$24186) ((lambda (g$208$24188) ((lambda (g$208$24190) (if (if g$208$24190 (begin '#f (apply (lambda (g$208$24192 g$208$24193) (g$208$24108 g$208$24192)) g$208$24190)) '#f) (apply (lambda (g$208$24196 g$208$24197) (g$208$24178 g$208$24197 (lambda (g$208$24200) (call-with-values (lambda () (g$208$24181 (cons '() g$208$24200))) (lambda (g$208$24204 g$208$24205) ((lambda (g$208$24208 g$208$24209) (if (null? (car g$208$24208)) (g$208$16715 '#f '"extra ellipsis in syntax form" g$208$24104) (values (g$208$23976 g$208$24209 (car g$208$24208)) (cdr g$208$24208)))) g$208$24205 g$208$24204)))))) g$208$24190) ((lambda (g$208$24212) ((lambda (g$208$24214) (if (if g$208$24214 (begin '#f (apply (lambda () '#t) g$208$24214)) '#f) (apply (lambda () (call-with-values (lambda () (g$208$23970 g$208$24104 g$208$24180 g$208$24106 g$208$24107 g$208$24108 g$208$24109)) (lambda (g$208$24218 g$208$24219) ((lambda (g$208$24222 g$208$24223) (call-with-values (lambda () (g$208$24181 g$208$24222)) (lambda (g$208$24228 g$208$24229) ((lambda (g$208$24232 g$208$24233) (values (g$208$23974 g$208$24233 g$208$24223) g$208$24232)) g$208$24229 g$208$24228)))) g$208$24219 g$208$24218)))) g$208$24214) (g$208$16715 '#f '"invalid syntax" g$208$24212))) ((lambda (g$208$24236) '()) g$208$24212))) g$208$24188))) ((lambda (g$208$24238) (if (g$208$15966 g$208$24238) (begin '#f ((lambda (g$208$24240) (if g$208$24240 (begin '#f ((lambda (g$208$24242) (if g$208$24242 (begin '#f (append g$208$24240 g$208$24242)) '#f)) ((lambda (g$208$24244) (list g$208$24244)) (g$208$15976 g$208$24238)))) '#f)) ((lambda (g$208$24246) (list g$208$24246)) (g$208$15974 g$208$24238)))) '#f)) g$208$24188))) g$208$24184))) ((lambda (g$208$24248) (if (equal? (g$208$16002 g$208$24248) '()) (begin '#f '()) '#f)) g$208$24184))) g$208$24180)))) g$208$24178) g$208$24174 (lambda (g$208$24250) (call-with-values (lambda () (g$208$23970 g$208$24104 g$208$24172 g$208$24106 (cons '() g$208$24250) g$208$24108 '#f)) (lambda (g$208$24254 g$208$24255) ((lambda (g$208$24258 g$208$24259) (if (null? (car g$208$24258)) (g$208$16715 '#f '"extra ellipsis in syntax form" g$208$24104) (values (g$208$23978 g$208$24259 (car g$208$24258)) (cdr g$208$24258)))) g$208$24255 g$208$24254)))))) g$208$24164) ((lambda (g$208$24262) ((lambda (g$208$24264) (if (if g$208$24264 (begin '#f (apply (lambda (g$208$24266 g$208$24267) '#t) g$208$24264)) '#f) (apply (lambda (g$208$24270 g$208$24271) (call-with-values (lambda () (g$208$23970 g$208$24104 g$208$24270 g$208$24106 g$208$24107 g$208$24108 '#f)) (lambda (g$208$24276 g$208$24277) ((lambda (g$208$24280 g$208$24281) (call-with-values (lambda () (g$208$23970 g$208$24104 g$208$24271 g$208$24106 g$208$24280 g$208$24108 g$208$24109)) (lambda (g$208$24286 g$208$24287) ((lambda (g$208$24290 g$208$24291) (values (g$208$23980 g$208$24105 g$208$24270 g$208$24271 g$208$24281 g$208$24291) g$208$24290)) g$208$24287 g$208$24286)))) g$208$24277 g$208$24276)))) g$208$24264) ((lambda (g$208$24294) ((lambda (g$208$24296) (if (if g$208$24296 (begin '#f (apply (lambda (g$208$24298) '#t) g$208$24296)) '#f) (apply (lambda (g$208$24300) (call-with-values (lambda () (g$208$23970 g$208$24104 g$208$24300 g$208$24106 g$208$24107 g$208$24108 '#t)) (lambda (g$208$24304 g$208$24305) ((lambda (g$208$24308 g$208$24309) (values (g$208$23982 g$208$24105 g$208$24300 g$208$24309) g$208$24308)) g$208$24305 g$208$24304)))) g$208$24296) ((lambda (g$208$24312) ((lambda (g$208$24314) (if (if g$208$24314 (begin '#f (apply (lambda () '#t) g$208$24314)) '#f) (apply (lambda () (values (list 'quote g$208$24105) g$208$24107)) g$208$24314) (g$208$16715 '#f '"invalid syntax" g$208$24312))) ((lambda (g$208$24316) '()) g$208$24312))) g$208$24294))) ((lambda (g$208$24318) (if (g$208$15968 g$208$24318) (begin '#f ((letrec ((g$208$24320 (lambda (g$208$24322) (if (g$208$15966 g$208$24322) ((lambda (g$208$24324) (if g$208$24324 (begin '#f ((lambda (g$208$24326) (if g$208$24326 (begin '#f (map cons g$208$24324 g$208$24326)) '#f)) (g$208$24320 (g$208$15976 g$208$24322)))) '#f)) ((lambda (g$208$24328) (list g$208$24328)) (g$208$15974 g$208$24322))) (if (g$208$15970 g$208$24322) (list (begin 'ls '())) '#f))))) g$208$24320) (g$208$15964 g$208$24318))) '#f)) g$208$24294))) g$208$24262))) ((lambda (g$208$24330) (if (g$208$15966 g$208$24330) (begin '#f ((lambda (g$208$24332) (if g$208$24332 (begin '#f ((lambda (g$208$24334) (if g$208$24334 (begin '#f (append g$208$24332 g$208$24334)) '#f)) ((lambda (g$208$24336) (list g$208$24336)) (g$208$15976 g$208$24330)))) '#f)) ((lambda (g$208$24338) (list g$208$24338)) (g$208$15974 g$208$24330)))) '#f)) g$208$24262))) g$208$24162))) ((lambda (g$208$24340) (if (g$208$15966 g$208$24340) (begin '#f ((lambda (g$208$24342) (if g$208$24342 (begin '#f ((lambda (g$208$24344) (if g$208$24344 (begin '#f (append g$208$24342 g$208$24344)) '#f)) ((lambda (g$208$24346) (if (g$208$15966 g$208$24346) (begin '#f ((lambda (g$208$24348) (if g$208$24348 (begin '#f ((lambda (g$208$24350) (if g$208$24350 (begin '#f (append g$208$24348 g$208$24350)) '#f)) ((lambda (g$208$24352) (list g$208$24352)) (g$208$15976 g$208$24346)))) '#f)) ((lambda (g$208$24354) (list g$208$24354)) (g$208$15974 g$208$24346)))) '#f)) (g$208$15976 g$208$24340)))) '#f)) ((lambda (g$208$24356) (list g$208$24356)) (g$208$15974 g$208$24340)))) '#f)) g$208$24162))) g$208$24148))) ((lambda (g$208$24358) (if (g$208$15966 g$208$24358) (begin '#f ((lambda (g$208$24360) (if g$208$24360 (begin '#f ((lambda (g$208$24362) (if g$208$24362 (begin '#f (append g$208$24360 g$208$24362)) '#f)) ((lambda (g$208$24364) (if (g$208$15966 g$208$24364) (begin '#f ((lambda (g$208$24366) (if g$208$24366 (begin '#f ((lambda (g$208$24368) (if g$208$24368 (begin '#f (append g$208$24366 g$208$24368)) '#f)) ((lambda (g$208$24370) (if (equal? (g$208$16002 g$208$24370) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$24364)))) '#f)) ((lambda (g$208$24372) (list g$208$24372)) (g$208$15974 g$208$24364)))) '#f)) (g$208$15976 g$208$24358)))) '#f)) ((lambda (g$208$24374) (list g$208$24374)) (g$208$15974 g$208$24358)))) '#f)) g$208$24148))) g$208$24124))) ((lambda (g$208$24376) (list g$208$24376)) g$208$24124))) g$208$24116))) ((lambda (g$208$24378) (list g$208$24378)) g$208$24116))) g$208$24105))) (set! g$208$23972 (lambda (g$208$24080 g$208$24081 g$208$24082 g$208$24083) (if (= g$208$24082 '0) (values g$208$24081 g$208$24083) (if (null? g$208$24083) (g$208$16715 '#f '"missing ellipsis in syntax form" g$208$24080) (call-with-values (lambda () (g$208$23972 g$208$24080 g$208$24081 (- g$208$24082 '1) (cdr g$208$24083))) (lambda (g$208$24090 g$208$24091) ((lambda (g$208$24094 g$208$24095) ((lambda (g$208$24098) (if g$208$24098 ((lambda (g$208$24100) (values (cdr g$208$24100) g$208$24083)) g$208$24098) ((lambda (g$208$24102) (values g$208$24102 (cons (cons (cons g$208$24095 g$208$24102) (car g$208$24083)) g$208$24094))) (g$208$15890 'tmp)))) (assq g$208$24095 (car g$208$24083)))) g$208$24091 g$208$24090))))))) (set! g$208$23974 (lambda (g$208$24076 g$208$24077) (if (equal? g$208$24077 ''()) g$208$24076 (list 'append g$208$24076 g$208$24077)))) (set! g$208$23976 (lambda (g$208$24072 g$208$24073) (list 'apply '(primitive append) (g$208$23978 g$208$24072 g$208$24073)))) (set! g$208$23978 (lambda (g$208$24054 g$208$24055) ((lambda (g$208$24058 g$208$24059) (if (eq? (car g$208$24054) 'ref) (car g$208$24059) (if (for-all (lambda (g$208$24062) (if (eq? (car g$208$24062) 'ref) (begin '#f (memq (cadr g$208$24062) g$208$24058)) '#f)) (cdr g$208$24054)) ((lambda (g$208$24064) (cons 'map (cons (list 'primitive (car g$208$24054)) g$208$24064))) (map ((lambda (g$208$24066) (lambda (g$208$24068) (cdr (assq (cadr g$208$24068) g$208$24066)))) (map cons g$208$24058 g$208$24059)) (cdr g$208$24054))) (cons* 'map (list 'lambda g$208$24058 g$208$24054) g$208$24059)))) (map cdr g$208$24055) (map (lambda (g$208$24070) (list 'ref (car g$208$24070))) g$208$24055)))) (set! g$208$23980 (lambda (g$208$24039 g$208$24040 g$208$24041 g$208$24042 g$208$24043) ((lambda (g$208$24049) (if (memv g$208$24049 '(quote)) (if (eq? (car g$208$24042) 'quote) ((lambda (g$208$24050 g$208$24051) (if (if (eq? g$208$24050 g$208$24040) (begin '#f (eq? g$208$24051 g$208$24041)) '#f) (list 'quote g$208$24039) (list 'quote (cons g$208$24050 g$208$24051)))) (cadr g$208$24042) (cadr g$208$24043)) (if (null? (cadr g$208$24043)) (list 'list g$208$24042) (list 'cons g$208$24042 g$208$24043))) (if (memv g$208$24049 '(list)) (cons 'list (cons g$208$24042 (cdr g$208$24043))) (list 'cons g$208$24042 g$208$24043)))) (car g$208$24043)))) (set! g$208$23982 (lambda (g$208$24033 g$208$24034 g$208$24035) (if (eq? (car g$208$24035) 'quote) (if (eq? (cadr g$208$24035) g$208$24034) (list 'quote g$208$24033) (list 'quote (list->vector (cadr g$208$24035)))) (if (eq? (car g$208$24035) 'list) (cons 'vector (cdr g$208$24035)) (list 'list->vector g$208$24035))))) (set! g$208$23984 (lambda (g$208$24028) ((lambda (g$208$24030) (if (memv g$208$24030 '(ref)) (cadr g$208$24028) (if (memv g$208$24030 '(primitive)) (list 'primitive (cadr g$208$24028)) (if (memv g$208$24030 '(quote)) (list 'quote (cadr g$208$24028)) (if (memv g$208$24030 '(lambda)) (g$208$15860 '#f (cadr g$208$24028) (g$208$23984 (caddr g$208$24028))) (if (memv g$208$24030 '(map)) ((lambda (g$208$24031) (cons '(primitive map) g$208$24031)) (map g$208$23984 (cdr g$208$24028))) (cons (list 'primitive (car g$208$24028)) (map g$208$23984 (cdr g$208$24028))))))))) (car g$208$24028)))) (lambda (g$208$23986 g$208$23987 g$208$23988) ((lambda (g$208$23992) ((lambda (g$208$23994) (if (if g$208$23994 (begin '#f (apply (lambda (g$208$23996) '#t) g$208$23994)) '#f) (apply (lambda (g$208$23998) (call-with-values (lambda () (g$208$23970 g$208$23986 g$208$23998 g$208$23987 '() g$208$16574 '#f)) (lambda (g$208$24002 g$208$24003) ((lambda (g$208$24006 g$208$24007) (g$208$23984 g$208$24007)) g$208$24003 g$208$24002)))) g$208$23994) (g$208$16715 '#f '"invalid syntax" g$208$23992))) ((lambda (g$208$24010) (if (g$208$15966 g$208$24010) (begin '#f ((lambda (g$208$24012) (if g$208$24012 (begin '#f ((lambda (g$208$24014) (if g$208$24014 (begin '#f (append g$208$24012 g$208$24014)) '#f)) ((lambda (g$208$24016) (if (g$208$15966 g$208$24016) (begin '#f ((lambda (g$208$24018) (if g$208$24018 (begin '#f ((lambda (g$208$24020) (if g$208$24020 (begin '#f (append g$208$24018 g$208$24020)) '#f)) ((lambda (g$208$24022) (if (equal? (g$208$16002 g$208$24022) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$24016)))) '#f)) ((lambda (g$208$24024) (list g$208$24024)) (g$208$15974 g$208$24016)))) '#f)) (g$208$15976 g$208$24010)))) '#f)) ((lambda (g$208$24026) '()) (g$208$15974 g$208$24010)))) '#f)) g$208$23992))) g$208$23986)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$208$16580 (lambda (g$208$24380) ((lambda (g$208$24382) (if (memv g$208$24382 '(quote)) g$208$16498 (if (memv g$208$24382 '(lambda)) g$208$16502 (if (memv g$208$24382 '(case-lambda)) g$208$16500 (if (memv g$208$24382 '(letrec)) g$208$16480 (if (memv g$208$24382 '(letrec*)) g$208$16482 (if (memv g$208$24382 '(case)) g$208$16496 (if (memv g$208$24382 '(if)) g$208$16494 (if (memv g$208$24382 '(when)) g$208$16490 (if (memv g$208$24382 '(unless)) g$208$16492 (if (memv g$208$24382 '(parameterize)) g$208$16566 (if (memv g$208$24382 '(foreign-call)) g$208$16568 (if (memv g$208$24382 '(syntax-case)) g$208$16576 (if (memv g$208$24382 '(syntax)) g$208$16578 (if (memv g$208$24382 '(type-descriptor)) g$208$16484 (if (memv g$208$24382 '(record-type-descriptor)) g$208$16486 (if (memv g$208$24382 '(record-constructor-descriptor)) g$208$16488 (assertion-violation 'macro-transformer '"BUG: cannot find transformer" g$208$24380)))))))))))))))))) g$208$24380))) (set! g$208$16582 (lambda (g$208$24383) ((lambda (g$208$24385) ((lambda (g$208$24387) (if (if g$208$24387 (begin '#f (apply (lambda (g$208$24389) (if (for-all g$208$15980 g$208$24389) (begin '#f (g$208$14927 (map g$208$15982 g$208$24389))) '#f)) g$208$24387)) '#f) (apply (lambda (g$208$24391) (g$208$16504 (list 'quote (g$208$14927 (map g$208$15982 g$208$24391))))) g$208$24387) (g$208$16715 '#f '"invalid syntax" g$208$24385))) ((lambda (g$208$24393) (if (g$208$15966 g$208$24393) (begin '#f ((lambda (g$208$24395) (if g$208$24395 (begin '#f ((lambda (g$208$24397) (if g$208$24397 (begin '#f (append g$208$24395 g$208$24397)) '#f)) ((letrec ((g$208$24399 (lambda (g$208$24401) (if (g$208$15966 g$208$24401) ((lambda (g$208$24403) (if g$208$24403 (begin '#f ((lambda (g$208$24405) (if g$208$24405 (begin '#f (map cons g$208$24403 g$208$24405)) '#f)) (g$208$24399 (g$208$15976 g$208$24401)))) '#f)) ((lambda (g$208$24407) (list g$208$24407)) (g$208$15974 g$208$24401))) (if (g$208$15970 g$208$24401) (list (begin 'opt* '())) '#f))))) g$208$24399) (g$208$15976 g$208$24393)))) '#f)) ((lambda (g$208$24409) '()) (g$208$15974 g$208$24393)))) '#f)) g$208$24385))) g$208$24383))) (set! g$208$16584 (lambda (g$208$24411 g$208$24412) ((lambda (g$208$24415) ((lambda (g$208$24417) (if (if g$208$24417 (begin '#f (apply (lambda (g$208$24419) (if (g$208$15980 g$208$24419) (begin '#f (memq (g$208$15982 g$208$24419) g$208$24412)) '#f)) g$208$24417)) '#f) (apply (lambda (g$208$24421) (g$208$16504 (list 'quote g$208$24421))) g$208$24417) (g$208$16715 '#f '"invalid syntax" g$208$24415))) ((lambda (g$208$24423) (if (g$208$15966 g$208$24423) (begin '#f ((lambda (g$208$24425) (if g$208$24425 (begin '#f ((lambda (g$208$24427) (if g$208$24427 (begin '#f (append g$208$24425 g$208$24427)) '#f)) ((lambda (g$208$24429) (if (g$208$15966 g$208$24429) (begin '#f ((lambda (g$208$24431) (if g$208$24431 (begin '#f ((lambda (g$208$24433) (if g$208$24433 (begin '#f (append g$208$24431 g$208$24433)) '#f)) ((lambda (g$208$24435) (if (equal? (g$208$16002 g$208$24435) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$24429)))) '#f)) ((lambda (g$208$24437) (list g$208$24437)) (g$208$15974 g$208$24429)))) '#f)) (g$208$15976 g$208$24423)))) '#f)) ((lambda (g$208$24439) '()) (g$208$15974 g$208$24423)))) '#f)) g$208$24415))) g$208$24411))) (set! g$208$16586 (lambda (g$208$24441) (if (procedure? g$208$24441) g$208$24441 (if (symbol? g$208$24441) ((lambda (g$208$24443) (if (memv g$208$24443 '(define-record-type)) g$208$16560 (if (memv g$208$24443 '(define-struct)) g$208$16558 (if (memv g$208$24443 '(include)) g$208$16548 (if (memv g$208$24443 '(cond)) g$208$16544 (if (memv g$208$24443 '(let)) g$208$16510 (if (memv g$208$24443 '(do)) g$208$16536 (if (memv g$208$24443 '(or)) g$208$16540 (if (memv g$208$24443 '(and)) g$208$16542 (if (memv g$208$24443 '(let*)) g$208$16538 (if (memv g$208$24443 '(let-values)) g$208$16512 (if (memv g$208$24443 '(let*-values)) g$208$16514 (if (memv g$208$24443 '(syntax-rules)) g$208$16552 (if (memv g$208$24443 '(quasiquote)) g$208$16554 (if (memv g$208$24443 '(quasisyntax)) g$208$16556 (if (memv g$208$24443 '(with-syntax)) g$208$16506 (if (memv g$208$24443 '(identifier-syntax)) g$208$16534 (if (memv g$208$24443 '(time)) g$208$16526 (if (memv g$208$24443 '(delay)) g$208$16528 (if (memv g$208$24443 '(assert)) g$208$16530 (if (memv g$208$24443 '(endianness)) g$208$16532 (if (memv g$208$24443 '(guard)) g$208$16522 (if (memv g$208$24443 '(define-enumeration)) g$208$16524 (if (memv g$208$24443 '(trace-lambda)) g$208$16516 (if (memv g$208$24443 '(trace-define)) g$208$16518 (if (memv g$208$24443 '(trace-define-syntax)) g$208$16520 (if (memv g$208$24443 '(define-condition-type)) g$208$16562 (if (memv g$208$24443 '(include-into)) g$208$16550 (if (memv g$208$24443 '(eol-style)) (lambda (g$208$24448) (g$208$16584 g$208$24448 '(none lf cr crlf nel crnel ls))) (if (memv g$208$24443 '(error-handling-mode)) (lambda (g$208$24446) (g$208$16584 g$208$24446 '(ignore raise replace))) (if (memv g$208$24443 '(buffer-mode)) (lambda (g$208$24444) (g$208$16584 g$208$24444 '(none line block))) (if (memv g$208$24443 '(file-options)) g$208$16582 (if (memv g$208$24443 '(|...| => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$208$16564 (assertion-violation 'macro-transformer '"BUG: invalid macro" g$208$24441)))))))))))))))))))))))))))))))))) g$208$24441) (assertion-violation 'core-macro-transformer '"BUG: invalid macro" g$208$24441))))) (set! g$208$16588 (lambda (g$208$24450) (car g$208$24450))) (set! g$208$16590 (lambda (g$208$24452 g$208$24453) ((lambda (g$208$24456) (g$208$15958 (g$208$15948) g$208$24456)) ((g$208$16586 g$208$24452) (g$208$15958 g$208$15950 g$208$24453))))) (set! g$208$16592 (lambda (g$208$24458 g$208$24459) ((lambda (g$208$24462) (g$208$15958 (g$208$15948) g$208$24462)) ((g$208$16588 g$208$24458) (g$208$15958 g$208$15950 g$208$24459))))) (set! g$208$16594 (lambda (g$208$24464 g$208$24465) ((lambda (g$208$24468 g$208$24469) (begin (g$208$15517 g$208$24468) ((lambda (g$208$24472) ((lambda (g$208$24474) ((lambda (g$208$24476) (g$208$15958 (g$208$15948) g$208$24476)) (g$208$24474 (g$208$15958 g$208$15950 g$208$24465)))) (if (procedure? g$208$24472) g$208$24472 (assertion-violation 'chi-global-macro '"BUG: not a procedure" g$208$24472)))) (symbol-value g$208$24469)))) (car g$208$24464) (cdr g$208$24464)))) (set! g$208$16596 (lambda (g$208$24478 g$208$24479 g$208$24480) (if (null? g$208$24478) '() ((lambda (g$208$24484) (cons g$208$24484 (g$208$16596 (cdr g$208$24478) g$208$24479 g$208$24480))) (g$208$16600 (car g$208$24478) g$208$24479 g$208$24480))))) (set! g$208$16598 (lambda (g$208$24486 g$208$24487 g$208$24488) ((lambda (g$208$24492) ((lambda (g$208$24494) (if (if g$208$24494 (begin '#f (apply (lambda (g$208$24496 g$208$24497) '#t) g$208$24494)) '#f) (apply (lambda (g$208$24500 g$208$24501) ((lambda (g$208$24504) (cons g$208$24504 (g$208$16596 g$208$24501 g$208$24487 g$208$24488))) (g$208$16600 g$208$24500 g$208$24487 g$208$24488))) g$208$24494) (g$208$16715 '#f '"invalid syntax" g$208$24492))) ((lambda (g$208$24506) (if (g$208$15966 g$208$24506) (begin '#f ((lambda (g$208$24508) (if g$208$24508 (begin '#f ((lambda (g$208$24510) (if g$208$24510 (begin '#f (append g$208$24508 g$208$24510)) '#f)) ((letrec ((g$208$24512 (lambda (g$208$24514) (if (g$208$15966 g$208$24514) ((lambda (g$208$24516) (if g$208$24516 (begin '#f ((lambda (g$208$24518) (if g$208$24518 (begin '#f (map cons g$208$24516 g$208$24518)) '#f)) (g$208$24512 (g$208$15976 g$208$24514)))) '#f)) ((lambda (g$208$24520) (list g$208$24520)) (g$208$15974 g$208$24514))) (if (g$208$15970 g$208$24514) (list (begin 'rands '())) '#f))))) g$208$24512) (g$208$15976 g$208$24506)))) '#f)) ((lambda (g$208$24522) (list g$208$24522)) (g$208$15974 g$208$24506)))) '#f)) g$208$24492))) g$208$24486))) (set! g$208$16600 (lambda (g$208$24524 g$208$24525 g$208$24526) (call-with-values (lambda () (g$208$16016 g$208$24524 g$208$24525)) (lambda (g$208$24533 g$208$24534 g$208$24535) ((lambda (g$208$24539 g$208$24540 g$208$24541) ((lambda (g$208$24545) (if (memv g$208$24545 '(core-macro)) ((lambda (g$208$24683) (g$208$24683 g$208$24524 g$208$24525 g$208$24526)) (g$208$16580 g$208$24540)) (if (memv g$208$24545 '(global)) ((lambda (g$208$24679) ((lambda (g$208$24681) ((lambda () (begin ((g$208$16646) g$208$24679) g$208$24681)))) (cdr g$208$24540))) (car g$208$24540)) (if (memv g$208$24545 '(core-prim)) ((lambda (g$208$24677) (list 'primitive g$208$24677)) g$208$24540) (if (memv g$208$24545 '(call)) (g$208$16598 g$208$24524 g$208$24525 g$208$24526) (if (memv g$208$24545 '(lexical)) ((lambda (g$208$24675) g$208$24675) (g$208$16468 g$208$24540)) (if (memv g$208$24545 '(global-macro global-macro!)) (g$208$16600 (g$208$16594 g$208$24540 g$208$24524) g$208$24525 g$208$24526) (if (memv g$208$24545 '(local-macro local-macro!)) (g$208$16600 (g$208$16592 g$208$24540 g$208$24524) g$208$24525 g$208$24526) (if (memv g$208$24545 '(macro macro!)) (g$208$16600 (g$208$16590 g$208$24540 g$208$24524) g$208$24525 g$208$24526) (if (memv g$208$24545 '(constant)) ((lambda (g$208$24673) (list 'quote g$208$24673)) g$208$24540) (if (memv g$208$24545 '(set!)) (g$208$16602 g$208$24524 g$208$24525 g$208$24526) (if (memv g$208$24545 '(begin)) ((lambda (g$208$24635) ((lambda (g$208$24637) (if (if g$208$24637 (begin '#f (apply (lambda (g$208$24639 g$208$24640) '#t) g$208$24637)) '#f) (apply (lambda (g$208$24643 g$208$24644) (g$208$15863 '#f (g$208$16596 (cons g$208$24643 g$208$24644) g$208$24525 g$208$24526))) g$208$24637) (g$208$16715 '#f '"invalid syntax" g$208$24635))) ((lambda (g$208$24647) (if (g$208$15966 g$208$24647) (begin '#f ((lambda (g$208$24649) (if g$208$24649 (begin '#f ((lambda (g$208$24651) (if g$208$24651 (begin '#f (append g$208$24649 g$208$24651)) '#f)) ((lambda (g$208$24653) (if (g$208$15966 g$208$24653) (begin '#f ((lambda (g$208$24655) (if g$208$24655 (begin '#f ((lambda (g$208$24657) (if g$208$24657 (begin '#f (append g$208$24655 g$208$24657)) '#f)) ((letrec ((g$208$24659 (lambda (g$208$24661) (if (g$208$15966 g$208$24661) ((lambda (g$208$24663) (if g$208$24663 (begin '#f ((lambda (g$208$24665) (if g$208$24665 (begin '#f (map cons g$208$24663 g$208$24665)) '#f)) (g$208$24659 (g$208$15976 g$208$24661)))) '#f)) ((lambda (g$208$24667) (list g$208$24667)) (g$208$15974 g$208$24661))) (if (g$208$15970 g$208$24661) (list (begin 'x* '())) '#f))))) g$208$24659) (g$208$15976 g$208$24653)))) '#f)) ((lambda (g$208$24669) (list g$208$24669)) (g$208$15974 g$208$24653)))) '#f)) (g$208$15976 g$208$24647)))) '#f)) ((lambda (g$208$24671) '()) (g$208$15974 g$208$24647)))) '#f)) g$208$24635))) g$208$24524) (if (memv g$208$24545 '(let-syntax letrec-syntax)) ((lambda (g$208$24547) ((lambda (g$208$24549) (if (if g$208$24549 (begin '#f (apply (lambda (g$208$24551 g$208$24552 g$208$24553 g$208$24554) (if (g$208$15990 g$208$24551) (void) (g$208$16715 '#f '"invalid identifiers" g$208$24524))) g$208$24549)) '#f) (apply (lambda (g$208$24559 g$208$24560 g$208$24561 g$208$24562) ((lambda (g$208$24567) ((lambda (g$208$24569) ((lambda (g$208$24571) ((lambda () (g$208$15863 '#f (g$208$16596 (map (lambda (g$208$24573) (g$208$15960 g$208$24569 g$208$24573)) (cons g$208$24561 g$208$24562)) (append (map cons g$208$24567 g$208$24571) g$208$24525) (append (map cons g$208$24567 g$208$24571) g$208$24526)))))) (map (lambda (g$208$24575) (g$208$16043 (g$208$16632 (if (eq? g$208$24541 'let-syntax) g$208$24575 (g$208$15960 g$208$24569 g$208$24575)) g$208$24526))) g$208$24560))) (g$208$15927 g$208$24559 g$208$24567))) (map g$208$15894 g$208$24559))) g$208$24549) (g$208$16715 '#f '"invalid syntax" g$208$24547))) ((lambda (g$208$24577) (if (g$208$15966 g$208$24577) (begin '#f ((lambda (g$208$24579) (if g$208$24579 (begin '#f ((lambda (g$208$24581) (if g$208$24581 (begin '#f (append g$208$24579 g$208$24581)) '#f)) ((lambda (g$208$24583) (if (g$208$15966 g$208$24583) (begin '#f ((lambda (g$208$24585) (if g$208$24585 (begin '#f ((lambda (g$208$24587) (if g$208$24587 (begin '#f (append g$208$24585 g$208$24587)) '#f)) ((lambda (g$208$24589) (if (g$208$15966 g$208$24589) (begin '#f ((lambda (g$208$24591) (if g$208$24591 (begin '#f ((lambda (g$208$24593) (if g$208$24593 (begin '#f (append g$208$24591 g$208$24593)) '#f)) ((letrec ((g$208$24595 (lambda (g$208$24597) (if (g$208$15966 g$208$24597) ((lambda (g$208$24599) (if g$208$24599 (begin '#f ((lambda (g$208$24601) (if g$208$24601 (begin '#f (map cons g$208$24599 g$208$24601)) '#f)) (g$208$24595 (g$208$15976 g$208$24597)))) '#f)) ((lambda (g$208$24603) (list g$208$24603)) (g$208$15974 g$208$24597))) (if (g$208$15970 g$208$24597) (list (begin 'xbody* '())) '#f))))) g$208$24595) (g$208$15976 g$208$24589)))) '#f)) ((lambda (g$208$24605) (list g$208$24605)) (g$208$15974 g$208$24589)))) '#f)) (g$208$15976 g$208$24583)))) '#f)) ((letrec ((g$208$24607 (lambda (g$208$24609) (if (g$208$15966 g$208$24609) ((lambda (g$208$24611) (if g$208$24611 (begin '#f ((lambda (g$208$24613) (if g$208$24613 (begin '#f (map cons g$208$24611 g$208$24613)) '#f)) (g$208$24607 (g$208$15976 g$208$24609)))) '#f)) ((lambda (g$208$24615) (if (g$208$15966 g$208$24615) (begin '#f ((lambda (g$208$24617) (if g$208$24617 (begin '#f ((lambda (g$208$24619) (if g$208$24619 (begin '#f (append g$208$24617 g$208$24619)) '#f)) ((lambda (g$208$24621) (if (g$208$15966 g$208$24621) (begin '#f ((lambda (g$208$24623) (if g$208$24623 (begin '#f ((lambda (g$208$24625) (if g$208$24625 (begin '#f (append g$208$24623 g$208$24625)) '#f)) ((lambda (g$208$24627) (if (equal? (g$208$16002 g$208$24627) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$24621)))) '#f)) ((lambda (g$208$24629) (list g$208$24629)) (g$208$15974 g$208$24621)))) '#f)) (g$208$15976 g$208$24615)))) '#f)) ((lambda (g$208$24631) (list g$208$24631)) (g$208$15974 g$208$24615)))) '#f)) (g$208$15974 g$208$24609))) (if (g$208$15970 g$208$24609) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$208$24607) (g$208$15974 g$208$24583)))) '#f)) (g$208$15976 g$208$24577)))) '#f)) ((lambda (g$208$24633) '()) (g$208$15974 g$208$24577)))) '#f)) g$208$24547))) g$208$24524) (if (memv g$208$24545 '(displaced-lexical)) (g$208$16715 '#f '"identifier out of context" g$208$24524) (if (memv g$208$24545 '(syntax)) (g$208$16715 '#f '"reference to pattern variable outside a syntax form" g$208$24524) (if (memv g$208$24545 '(define define-syntax module import library)) (g$208$16715 '#f (string-append ((lambda (g$208$24546) (if (memv g$208$24546 '(define)) '"a definition" (if (memv g$208$24546 '(define-syntax)) '"a define-syntax" (if (memv g$208$24546 '(module)) '"a module definition" (if (memv g$208$24546 '(library)) '"a library definition" (if (memv g$208$24546 '(import)) '"an import declaration" '"a non-expression")))))) g$208$24541) '" was found where an expression was expected") g$208$24524) (if (memv g$208$24545 '(mutable)) (g$208$16715 '#f '"attempt to reference an unexportable variable" g$208$24524) (g$208$16715 '#f '"invalid expression" g$208$24524)))))))))))))))))) g$208$24541)) g$208$24535 g$208$24534 g$208$24533))))) (set! g$208$16602 (lambda (g$208$24685 g$208$24686 g$208$24687) ((lambda (g$208$24691) ((lambda (g$208$24693) (if (if g$208$24693 (begin '#f (apply (lambda (g$208$24695 g$208$24696) (g$208$15980 g$208$24695)) g$208$24693)) '#f) (apply (lambda (g$208$24699 g$208$24700) (call-with-values (lambda () (g$208$16016 g$208$24699 g$208$24686)) (lambda (g$208$24706 g$208$24707 g$208$24708) ((lambda (g$208$24712 g$208$24713 g$208$24714) ((lambda (g$208$24718) (if (memv g$208$24718 '(lexical)) (begin (g$208$16472 g$208$24713 '#t) (list 'set! (g$208$16468 g$208$24713) (g$208$16600 g$208$24700 g$208$24686 g$208$24687))) (if (memv g$208$24718 '(core-prim)) (g$208$16715 '#f '"cannot modify imported core primitive" g$208$24685) (if (memv g$208$24718 '(global)) ((lambda (g$208$24719) ((lambda (g$208$24721) (list 'set! g$208$24719 g$208$24721)) (g$208$16600 g$208$24700 g$208$24686 g$208$24687))) (g$208$16628 g$208$24699 g$208$24685)) (if (memv g$208$24718 '(global-macro!)) (g$208$16600 (g$208$16594 g$208$24713 g$208$24685) g$208$24686 g$208$24687) (if (memv g$208$24718 '(local-macro!)) (g$208$16600 (g$208$16592 g$208$24713 g$208$24685) g$208$24686 g$208$24687) (if (memv g$208$24718 '(mutable)) (g$208$16715 '#f '"attempt to assign to an unexportable variable" g$208$24685) (g$208$16715 '#f '"invalid syntax" g$208$24685)))))))) g$208$24714)) g$208$24708 g$208$24707 g$208$24706)))) g$208$24693) (g$208$16715 '#f '"invalid syntax" g$208$24691))) ((lambda (g$208$24723) (if (g$208$15966 g$208$24723) (begin '#f ((lambda (g$208$24725) (if g$208$24725 (begin '#f ((lambda (g$208$24727) (if g$208$24727 (begin '#f (append g$208$24725 g$208$24727)) '#f)) ((lambda (g$208$24729) (if (g$208$15966 g$208$24729) (begin '#f ((lambda (g$208$24731) (if g$208$24731 (begin '#f ((lambda (g$208$24733) (if g$208$24733 (begin '#f (append g$208$24731 g$208$24733)) '#f)) ((lambda (g$208$24735) (if (g$208$15966 g$208$24735) (begin '#f ((lambda (g$208$24737) (if g$208$24737 (begin '#f ((lambda (g$208$24739) (if g$208$24739 (begin '#f (append g$208$24737 g$208$24739)) '#f)) ((lambda (g$208$24741) (if (equal? (g$208$16002 g$208$24741) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$24735)))) '#f)) ((lambda (g$208$24743) (list g$208$24743)) (g$208$15974 g$208$24735)))) '#f)) (g$208$15976 g$208$24729)))) '#f)) ((lambda (g$208$24745) (list g$208$24745)) (g$208$15974 g$208$24729)))) '#f)) (g$208$15976 g$208$24723)))) '#f)) ((lambda (g$208$24747) '()) (g$208$15974 g$208$24723)))) '#f)) g$208$24691))) g$208$24685))) (set! g$208$16604 (lambda (g$208$24749 g$208$24750 g$208$24751 g$208$24752 g$208$24753) ((lambda (g$208$24759) ((lambda (g$208$24761) (if (if g$208$24761 (begin '#f (apply (lambda (g$208$24763) '#t) g$208$24761)) '#f) (apply (lambda (g$208$24765) (if (g$208$15990 g$208$24765) ((lambda (g$208$24767 g$208$24768) (values g$208$24767 (g$208$16616 (g$208$15960 (g$208$15927 g$208$24765 g$208$24768) g$208$24751) (g$208$16476 g$208$24768 g$208$24767 g$208$24752) g$208$24753))) (map g$208$15890 g$208$24765) (map g$208$15894 g$208$24765)) (g$208$16508 g$208$24749 g$208$24750))) g$208$24761) ((lambda (g$208$24771) ((lambda (g$208$24773) (if (if g$208$24773 (begin '#f (apply (lambda (g$208$24775 g$208$24776) '#t) g$208$24773)) '#f) (apply (lambda (g$208$24779 g$208$24780) (if (g$208$15990 (cons g$208$24780 g$208$24779)) ((lambda (g$208$24783 g$208$24784 g$208$24785 g$208$24786) (values (append g$208$24783 g$208$24785) (g$208$16616 (g$208$15960 (g$208$15927 (cons g$208$24780 g$208$24779) (cons g$208$24786 g$208$24784)) g$208$24751) (g$208$16476 (cons g$208$24786 g$208$24784) (cons g$208$24785 g$208$24783) g$208$24752) g$208$24753))) (map g$208$15890 g$208$24779) (map g$208$15894 g$208$24779) (g$208$15890 g$208$24780) (g$208$15894 g$208$24780)) (g$208$16508 g$208$24749 g$208$24750))) g$208$24773) ((lambda (g$208$24791) ((lambda (g$208$24793) (if (if g$208$24793 (begin '#f (apply (lambda () '#t) g$208$24793)) '#f) (apply (lambda () (g$208$16715 '#f '"invalid syntax" g$208$24750)) g$208$24793) (g$208$16715 '#f '"invalid syntax" g$208$24791))) ((lambda (g$208$24795) '()) g$208$24791))) g$208$24771))) ((letrec ((g$208$24797 (lambda (g$208$24803) (if (g$208$15966 g$208$24803) ((lambda (g$208$24805) (if g$208$24805 (begin '#f ((lambda (g$208$24807) (if g$208$24807 (begin '#f (cons (map cons g$208$24805 (car g$208$24807)) (cdr g$208$24807))) '#f)) (g$208$24797 (g$208$15976 g$208$24803)))) '#f)) ((lambda (g$208$24809) (list g$208$24809)) (g$208$15974 g$208$24803))) ((lambda (g$208$24811) (if g$208$24811 (begin '#f (cons (list (begin 'x* '())) g$208$24811)) '#f)) ((lambda (g$208$24813) (list g$208$24813)) g$208$24803)))))) (lambda (g$208$24799) ((lambda (g$208$24801) (if g$208$24801 (begin '#f (append (car g$208$24801) (cdr g$208$24801))) '#f)) (g$208$24797 g$208$24799)))) g$208$24771))) g$208$24759))) ((letrec ((g$208$24815 (lambda (g$208$24817) (if (g$208$15966 g$208$24817) ((lambda (g$208$24819) (if g$208$24819 (begin '#f ((lambda (g$208$24821) (if g$208$24821 (begin '#f (map cons g$208$24819 g$208$24821)) '#f)) (g$208$24815 (g$208$15976 g$208$24817)))) '#f)) ((lambda (g$208$24823) (list g$208$24823)) (g$208$15974 g$208$24817))) (if (g$208$15970 g$208$24817) (list (begin 'x* '())) '#f))))) g$208$24815) g$208$24759))) g$208$24750))) (set! g$208$16606 (lambda (g$208$24825 g$208$24826 g$208$24827 g$208$24828 g$208$24829) (if (null? g$208$24826) (values '() '()) (call-with-values (lambda () (g$208$16604 g$208$24825 (car g$208$24826) (car g$208$24827) g$208$24828 g$208$24829)) (lambda (g$208$24837 g$208$24838) ((lambda (g$208$24841 g$208$24842) (call-with-values (lambda () (g$208$16606 g$208$24825 (cdr g$208$24826) (cdr g$208$24827) g$208$24828 g$208$24829)) (lambda (g$208$24847 g$208$24848) ((lambda (g$208$24851 g$208$24852) (values (cons g$208$24842 g$208$24852) (cons g$208$24841 g$208$24851))) g$208$24848 g$208$24847)))) g$208$24838 g$208$24837)))))) (set! g$208$16608 (lambda (g$208$24855 g$208$24856 g$208$24857) ((lambda (g$208$24861) (if (memv g$208$24861 '(defun)) ((lambda (g$208$24866) ((lambda (g$208$24868 g$208$24869) (call-with-values (lambda () (g$208$16604 g$208$24868 g$208$24868 g$208$24869 g$208$24856 g$208$24857)) (lambda (g$208$24874 g$208$24875) ((lambda (g$208$24878 g$208$24879) (g$208$15860 '#f g$208$24879 g$208$24878)) g$208$24875 g$208$24874)))) (car g$208$24866) (cdr g$208$24866))) (cdr g$208$24855)) (if (memv g$208$24861 '(expr)) ((lambda (g$208$24864) (g$208$16600 g$208$24864 g$208$24856 g$208$24857)) (cdr g$208$24855)) (if (memv g$208$24861 '(top-expr)) ((lambda (g$208$24862) (g$208$15863 '#f (list (g$208$16600 g$208$24862 g$208$24856 g$208$24857) (g$208$15864)))) (cdr g$208$24855)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" g$208$24855))))) (car g$208$24855)))) (set! g$208$16610 (lambda (g$208$24882 g$208$24883 g$208$24884) ((letrec ((g$208$24888 (lambda (g$208$24890) (if (null? g$208$24890) '() ((lambda (g$208$24892) (cons g$208$24892 (g$208$24888 (cdr g$208$24890)))) (g$208$16608 (car g$208$24890) g$208$24883 g$208$24884)))))) g$208$24888) g$208$24882))) (set! g$208$16612 (lambda (g$208$24894 g$208$24895 g$208$24896) (if (null? g$208$24895) '#f (if (g$208$15986 g$208$24894 (car g$208$24895)) (car g$208$24896) (g$208$16612 g$208$24894 (cdr g$208$24895) (cdr g$208$24896)))))) (set! g$208$16614 (lambda (g$208$24900) ((letrec ((g$208$24902 (lambda (g$208$24904 g$208$24905) (if (null? g$208$24904) g$208$24905 ((lambda (g$208$24908) (if g$208$24908 ((lambda (g$208$24910) (g$208$24902 (cdr g$208$24904) (cons (list (car g$208$24904) g$208$24910) g$208$24905))) g$208$24908) (g$208$24902 (cdr g$208$24904) g$208$24905))) (g$208$16612 (car g$208$24904) (cdr g$208$24904) (cdr g$208$24904))))))) g$208$24902) g$208$24900 '()))) (set! g$208$16616 (lambda (g$208$24912 g$208$24913 g$208$24914) ((lambda (g$208$24918) (call-with-values (lambda () (g$208$16622 (map (lambda (g$208$24927) (g$208$15960 g$208$24918 g$208$24927)) (g$208$15978 g$208$24912)) g$208$24913 g$208$24914 '() '() '() '() g$208$24918 '#f)) (lambda (g$208$24929 g$208$24930 g$208$24931 g$208$24932 g$208$24933 g$208$24934 g$208$24935) ((lambda (g$208$24943 g$208$24944 g$208$24945 g$208$24946 g$208$24947 g$208$24948 g$208$24949) (begin (if (null? g$208$24949) (g$208$16715 '#f '"no expression in body" g$208$24949) (void)) ((lambda (g$208$24957) ((lambda (g$208$24959) ((lambda () (g$208$15866 '#f (reverse g$208$24946) (reverse g$208$24959) (g$208$15863 '#f g$208$24957))))) (g$208$16610 g$208$24945 g$208$24948 g$208$24947))) (g$208$16596 (append (apply append (reverse g$208$24944)) g$208$24949) g$208$24948 g$208$24947)))) g$208$24935 g$208$24934 g$208$24933 g$208$24932 g$208$24931 g$208$24930 g$208$24929)))) (g$208$15917)))) (set! g$208$16618 (lambda (g$208$24961) ((lambda (g$208$24963) ((lambda (g$208$24965) (if (if g$208$24965 (begin '#f (apply (lambda (g$208$24967 g$208$24968) '#t) g$208$24965)) '#f) (apply (lambda (g$208$24971 g$208$24972) (begin (if (for-all g$208$15980 g$208$24971) (void) (g$208$16715 '#f '"module exports must be identifiers" g$208$24961)) (values '#f (list->vector g$208$24971) g$208$24972))) g$208$24965) ((lambda (g$208$24975) ((lambda (g$208$24977) (if (if g$208$24977 (begin '#f (apply (lambda (g$208$24979 g$208$24980 g$208$24981) '#t) g$208$24977)) '#f) (apply (lambda (g$208$24985 g$208$24986 g$208$24987) (begin (if (g$208$15980 g$208$24985) (void) (g$208$16715 '#f '"module name must be an identifier" g$208$24961)) (if (for-all g$208$15980 g$208$24986) (void) (g$208$16715 '#f '"module exports must be identifiers" g$208$24961)) (values g$208$24985 (list->vector g$208$24986) g$208$24987))) g$208$24977) (g$208$16715 '#f '"invalid syntax" g$208$24975))) ((lambda (g$208$24991) (if (g$208$15966 g$208$24991) (begin '#f ((lambda (g$208$24993) (if g$208$24993 (begin '#f ((lambda (g$208$24995) (if g$208$24995 (begin '#f (append g$208$24993 g$208$24995)) '#f)) ((lambda (g$208$24997) (if (g$208$15966 g$208$24997) (begin '#f ((lambda (g$208$24999) (if g$208$24999 (begin '#f ((lambda (g$208$25001) (if g$208$25001 (begin '#f (append g$208$24999 g$208$25001)) '#f)) ((lambda (g$208$25003) (if (g$208$15966 g$208$25003) (begin '#f ((lambda (g$208$25005) (if g$208$25005 (begin '#f ((lambda (g$208$25007) (if g$208$25007 (begin '#f (append g$208$25005 g$208$25007)) '#f)) ((letrec ((g$208$25009 (lambda (g$208$25011) (if (g$208$15966 g$208$25011) ((lambda (g$208$25013) (if g$208$25013 (begin '#f ((lambda (g$208$25015) (if g$208$25015 (begin '#f (map cons g$208$25013 g$208$25015)) '#f)) (g$208$25009 (g$208$15976 g$208$25011)))) '#f)) ((lambda (g$208$25017) (list g$208$25017)) (g$208$15974 g$208$25011))) (if (g$208$15970 g$208$25011) (list (begin 'b* '())) '#f))))) g$208$25009) (g$208$15976 g$208$25003)))) '#f)) ((letrec ((g$208$25019 (lambda (g$208$25021) (if (g$208$15966 g$208$25021) ((lambda (g$208$25023) (if g$208$25023 (begin '#f ((lambda (g$208$25025) (if g$208$25025 (begin '#f (map cons g$208$25023 g$208$25025)) '#f)) (g$208$25019 (g$208$15976 g$208$25021)))) '#f)) ((lambda (g$208$25027) (list g$208$25027)) (g$208$15974 g$208$25021))) (if (g$208$15970 g$208$25021) (list (begin 'export* '())) '#f))))) g$208$25019) (g$208$15974 g$208$25003)))) '#f)) (g$208$15976 g$208$24997)))) '#f)) ((lambda (g$208$25029) (list g$208$25029)) (g$208$15974 g$208$24997)))) '#f)) (g$208$15976 g$208$24991)))) '#f)) ((lambda (g$208$25031) '()) (g$208$15974 g$208$24991)))) '#f)) g$208$24975))) g$208$24963))) ((lambda (g$208$25033) (if (g$208$15966 g$208$25033) (begin '#f ((lambda (g$208$25035) (if g$208$25035 (begin '#f ((lambda (g$208$25037) (if g$208$25037 (begin '#f (append g$208$25035 g$208$25037)) '#f)) ((lambda (g$208$25039) (if (g$208$15966 g$208$25039) (begin '#f ((lambda (g$208$25041) (if g$208$25041 (begin '#f ((lambda (g$208$25043) (if g$208$25043 (begin '#f (append g$208$25041 g$208$25043)) '#f)) ((letrec ((g$208$25045 (lambda (g$208$25047) (if (g$208$15966 g$208$25047) ((lambda (g$208$25049) (if g$208$25049 (begin '#f ((lambda (g$208$25051) (if g$208$25051 (begin '#f (map cons g$208$25049 g$208$25051)) '#f)) (g$208$25045 (g$208$15976 g$208$25047)))) '#f)) ((lambda (g$208$25053) (list g$208$25053)) (g$208$15974 g$208$25047))) (if (g$208$15970 g$208$25047) (list (begin 'b* '())) '#f))))) g$208$25045) (g$208$15976 g$208$25039)))) '#f)) ((letrec ((g$208$25055 (lambda (g$208$25057) (if (g$208$15966 g$208$25057) ((lambda (g$208$25059) (if g$208$25059 (begin '#f ((lambda (g$208$25061) (if g$208$25061 (begin '#f (map cons g$208$25059 g$208$25061)) '#f)) (g$208$25055 (g$208$15976 g$208$25057)))) '#f)) ((lambda (g$208$25063) (list g$208$25063)) (g$208$15974 g$208$25057))) (if (g$208$15970 g$208$25057) (list (begin 'export* '())) '#f))))) g$208$25055) (g$208$15974 g$208$25039)))) '#f)) (g$208$15976 g$208$25033)))) '#f)) ((lambda (g$208$25065) '()) (g$208$15974 g$208$25033)))) '#f)) g$208$24963))) g$208$24961))) (set! g$208$16620 (lambda (g$208$25067 g$208$25068 g$208$25069 g$208$25070 g$208$25071 g$208$25072 g$208$25073) (call-with-values (lambda () (g$208$16618 g$208$25067)) (lambda (g$208$25084 g$208$25085 g$208$25086) ((lambda (g$208$25090 g$208$25091 g$208$25092) ((lambda (g$208$25096) ((lambda (g$208$25098) ((lambda () (call-with-values (lambda () (g$208$16622 g$208$25098 g$208$25068 g$208$25069 g$208$25070 g$208$25071 g$208$25072 g$208$25073 g$208$25096 '#f)) (lambda (g$208$25107 g$208$25108 g$208$25109 g$208$25110 g$208$25111 g$208$25112 g$208$25113) ((lambda (g$208$25121 g$208$25122 g$208$25123 g$208$25124 g$208$25125 g$208$25126 g$208$25127) ((lambda (g$208$25135 g$208$25136) (if (not g$208$25092) (values g$208$25124 g$208$25123 g$208$25091 g$208$25135 g$208$25126 g$208$25125 g$208$25136 g$208$25121) ((lambda (g$208$25139 g$208$25140) (values g$208$25124 g$208$25123 (vector g$208$25092) (vector g$208$25139) (cons (cons g$208$25139 (cons '$module g$208$25140)) g$208$25126) (cons (cons g$208$25139 (cons '$module g$208$25140)) g$208$25125) g$208$25136 g$208$25121)) (g$208$15894 'module) (cons g$208$25091 g$208$25135)))) (vector-map (lambda (g$208$25143) ((lambda (g$208$25145) (if g$208$25145 g$208$25145 (begin '#f (g$208$16715 '#f '"cannot find module export" g$208$25143)))) (g$208$16004 (g$208$15956 (g$208$15982 g$208$25143) (g$208$15936 g$208$25143) (list g$208$25096))))) g$208$25091) (cons g$208$25127 g$208$25122))) g$208$25113 g$208$25112 g$208$25111 g$208$25110 g$208$25109 g$208$25108 g$208$25107)))))) (map (lambda (g$208$25147) (g$208$15960 g$208$25096 g$208$25147)) (g$208$15978 g$208$25090)))) (g$208$15917))) g$208$25086 g$208$25085 g$208$25084))))) (set! g$208$16622 (lambda (g$208$25149 g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25155 g$208$25156 g$208$25157) (if (null? g$208$25149) (values g$208$25149 g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25155) ((lambda (g$208$25167) (call-with-values (lambda () (g$208$16016 g$208$25167 g$208$25150)) (lambda (g$208$25172 g$208$25173 g$208$25174) ((lambda (g$208$25178 g$208$25179 g$208$25180) ((lambda (g$208$25184) ((lambda (g$208$25186) (if (memv g$208$25186 '(define)) (call-with-values (lambda () (g$208$16462 g$208$25167)) (lambda (g$208$25533 g$208$25534) ((lambda (g$208$25537 g$208$25538) (begin (if (g$208$15994 g$208$25538 g$208$25184) (g$208$16715 '#f '"cannot redefine keyword" g$208$25167) (void)) ((lambda (g$208$25541 g$208$25542) (begin (g$208$15919 g$208$25156 g$208$25538 g$208$25542) (g$208$16622 (cdr g$208$25149) (g$208$16474 g$208$25542 g$208$25541 g$208$25150) g$208$25151 (cons g$208$25541 g$208$25152) (cons g$208$25537 g$208$25153) g$208$25154 g$208$25184 g$208$25156 g$208$25157))) (g$208$15890 g$208$25538) (g$208$15894 g$208$25538)))) g$208$25534 g$208$25533))) (if (memv g$208$25186 '(define-syntax)) (call-with-values (lambda () (g$208$16464 g$208$25167)) (lambda (g$208$25517 g$208$25518) ((lambda (g$208$25521 g$208$25522) (begin (if (g$208$15994 g$208$25522 g$208$25184) (g$208$16715 '#f '"cannot redefine keyword" g$208$25167) (void)) ((lambda (g$208$25525 g$208$25526) (begin (g$208$15919 g$208$25156 g$208$25522 g$208$25525) ((lambda (g$208$25529) (g$208$16622 (cdr g$208$25149) (cons (cons g$208$25525 g$208$25529) g$208$25150) (cons (cons g$208$25525 g$208$25529) g$208$25151) g$208$25152 g$208$25153 g$208$25154 g$208$25184 g$208$25156 g$208$25157)) (g$208$16043 g$208$25526)))) (g$208$15894 g$208$25522) (g$208$16632 g$208$25521 g$208$25151)))) g$208$25518 g$208$25517))) (if (memv g$208$25186 '(let-syntax letrec-syntax)) ((lambda (g$208$25439) ((lambda (g$208$25441) (if (if g$208$25441 (begin '#f (apply (lambda (g$208$25443 g$208$25444 g$208$25445) (if (g$208$15990 g$208$25443) (void) (g$208$16715 '#f '"invalid identifiers" g$208$25167))) g$208$25441)) '#f) (apply (lambda (g$208$25449 g$208$25450 g$208$25451) ((lambda (g$208$25455) ((lambda (g$208$25457) ((lambda (g$208$25459) ((lambda () (g$208$16622 (append (map (lambda (g$208$25461) (g$208$15960 g$208$25457 g$208$25461)) g$208$25451) (cdr g$208$25149)) (append (map cons g$208$25455 g$208$25459) g$208$25150) (append (map cons g$208$25455 g$208$25459) g$208$25151) g$208$25152 g$208$25153 g$208$25154 g$208$25184 g$208$25156 g$208$25157)))) (map (lambda (g$208$25463) (g$208$16043 (g$208$16632 (if (eq? g$208$25180 'let-syntax) g$208$25463 (g$208$15960 g$208$25457 g$208$25463)) g$208$25151))) g$208$25450))) (g$208$15927 g$208$25449 g$208$25455))) (map g$208$15894 g$208$25449))) g$208$25441) (g$208$16715 '#f '"invalid syntax" g$208$25439))) ((lambda (g$208$25465) (if (g$208$15966 g$208$25465) (begin '#f ((lambda (g$208$25467) (if g$208$25467 (begin '#f ((lambda (g$208$25469) (if g$208$25469 (begin '#f (append g$208$25467 g$208$25469)) '#f)) ((lambda (g$208$25471) (if (g$208$15966 g$208$25471) (begin '#f ((lambda (g$208$25473) (if g$208$25473 (begin '#f ((lambda (g$208$25475) (if g$208$25475 (begin '#f (append g$208$25473 g$208$25475)) '#f)) ((letrec ((g$208$25477 (lambda (g$208$25479) (if (g$208$15966 g$208$25479) ((lambda (g$208$25481) (if g$208$25481 (begin '#f ((lambda (g$208$25483) (if g$208$25483 (begin '#f (map cons g$208$25481 g$208$25483)) '#f)) (g$208$25477 (g$208$15976 g$208$25479)))) '#f)) ((lambda (g$208$25485) (list g$208$25485)) (g$208$15974 g$208$25479))) (if (g$208$15970 g$208$25479) (list (begin 'xbody* '())) '#f))))) g$208$25477) (g$208$15976 g$208$25471)))) '#f)) ((letrec ((g$208$25487 (lambda (g$208$25489) (if (g$208$15966 g$208$25489) ((lambda (g$208$25491) (if g$208$25491 (begin '#f ((lambda (g$208$25493) (if g$208$25493 (begin '#f (map cons g$208$25491 g$208$25493)) '#f)) (g$208$25487 (g$208$15976 g$208$25489)))) '#f)) ((lambda (g$208$25495) (if (g$208$15966 g$208$25495) (begin '#f ((lambda (g$208$25497) (if g$208$25497 (begin '#f ((lambda (g$208$25499) (if g$208$25499 (begin '#f (append g$208$25497 g$208$25499)) '#f)) ((lambda (g$208$25501) (if (g$208$15966 g$208$25501) (begin '#f ((lambda (g$208$25503) (if g$208$25503 (begin '#f ((lambda (g$208$25505) (if g$208$25505 (begin '#f (append g$208$25503 g$208$25505)) '#f)) ((lambda (g$208$25507) (if (equal? (g$208$16002 g$208$25507) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$25501)))) '#f)) ((lambda (g$208$25509) (list g$208$25509)) (g$208$15974 g$208$25501)))) '#f)) (g$208$15976 g$208$25495)))) '#f)) ((lambda (g$208$25511) (list g$208$25511)) (g$208$15974 g$208$25495)))) '#f)) (g$208$15974 g$208$25489))) (if (g$208$15970 g$208$25489) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$208$25487) (g$208$15974 g$208$25471)))) '#f)) (g$208$15976 g$208$25465)))) '#f)) ((lambda (g$208$25513) '()) (g$208$15974 g$208$25465)))) '#f)) g$208$25439))) g$208$25167) (if (memv g$208$25186 '(begin)) ((lambda (g$208$25413) ((lambda (g$208$25415) (if (if g$208$25415 (begin '#f (apply (lambda (g$208$25417) '#t) g$208$25415)) '#f) (apply (lambda (g$208$25419) (g$208$16622 (append g$208$25419 (cdr g$208$25149)) g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25184 g$208$25156 g$208$25157)) g$208$25415) (g$208$16715 '#f '"invalid syntax" g$208$25413))) ((lambda (g$208$25421) (if (g$208$15966 g$208$25421) (begin '#f ((lambda (g$208$25423) (if g$208$25423 (begin '#f ((lambda (g$208$25425) (if g$208$25425 (begin '#f (append g$208$25423 g$208$25425)) '#f)) ((letrec ((g$208$25427 (lambda (g$208$25429) (if (g$208$15966 g$208$25429) ((lambda (g$208$25431) (if g$208$25431 (begin '#f ((lambda (g$208$25433) (if g$208$25433 (begin '#f (map cons g$208$25431 g$208$25433)) '#f)) (g$208$25427 (g$208$15976 g$208$25429)))) '#f)) ((lambda (g$208$25435) (list g$208$25435)) (g$208$15974 g$208$25429))) (if (g$208$15970 g$208$25429) (list (begin 'x* '())) '#f))))) g$208$25427) (g$208$15976 g$208$25421)))) '#f)) ((lambda (g$208$25437) '()) (g$208$15974 g$208$25421)))) '#f)) g$208$25413))) g$208$25167) (if (memv g$208$25186 '(global-macro global-macro!)) (g$208$16622 (cons (g$208$15960 g$208$25156 (g$208$16594 g$208$25179 g$208$25167)) (cdr g$208$25149)) g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25184 g$208$25156 g$208$25157) (if (memv g$208$25186 '(local-macro local-macro!)) (g$208$16622 (cons (g$208$15960 g$208$25156 (g$208$16592 g$208$25179 g$208$25167)) (cdr g$208$25149)) g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25184 g$208$25156 g$208$25157) (if (memv g$208$25186 '(macro macro!)) (g$208$16622 (cons (g$208$15960 g$208$25156 (g$208$16590 g$208$25179 g$208$25167)) (cdr g$208$25149)) g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25184 g$208$25156 g$208$25157) (if (memv g$208$25186 '(module)) (call-with-values (lambda () (g$208$16620 g$208$25167 g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25184)) (lambda (g$208$25377 g$208$25378 g$208$25379 g$208$25380 g$208$25381 g$208$25382 g$208$25383 g$208$25384) ((lambda (g$208$25393 g$208$25394 g$208$25395 g$208$25396 g$208$25397 g$208$25398 g$208$25399 g$208$25400) (begin (vector-for-each (lambda (g$208$25409 g$208$25410) (g$208$15919 g$208$25156 g$208$25409 g$208$25410)) g$208$25398 g$208$25397) (g$208$16622 (cdr g$208$25149) g$208$25396 g$208$25395 g$208$25400 g$208$25399 g$208$25394 g$208$25393 g$208$25156 g$208$25157))) g$208$25384 g$208$25383 g$208$25382 g$208$25381 g$208$25380 g$208$25379 g$208$25378 g$208$25377))) (if (memv g$208$25186 '(library)) (begin (g$208$16691 (g$208$16002 g$208$25167)) (g$208$16622 (cdr g$208$25149) g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25184 g$208$25156 g$208$25157)) (if (memv g$208$25186 '(import)) (begin ((lambda () ((lambda (g$208$25187 g$208$25189 g$208$25191) (begin (set! g$208$25187 (lambda (g$208$25309) ((lambda (g$208$25311) ((lambda (g$208$25313) (if (if g$208$25313 (begin '#f (apply (lambda (g$208$25315) (g$208$15980 g$208$25315)) g$208$25313)) '#f) (apply (lambda (g$208$25317) '#t) g$208$25313) ((lambda (g$208$25319) ((lambda (g$208$25321) (if (if g$208$25321 (begin '#f (apply (lambda (g$208$25323) '#t) g$208$25321)) '#f) (apply (lambda (g$208$25325) '#f) g$208$25321) ((lambda (g$208$25327) ((lambda (g$208$25329) (if (if g$208$25329 (begin '#f (apply (lambda () '#t) g$208$25329)) '#f) (apply (lambda () (g$208$16715 '#f '"malformed import form" g$208$25309)) g$208$25329) (g$208$16715 '#f '"invalid syntax" g$208$25327))) ((lambda (g$208$25331) '()) g$208$25327))) g$208$25319))) ((lambda (g$208$25333) (if (g$208$15966 g$208$25333) (begin '#f ((lambda (g$208$25335) (if g$208$25335 (begin '#f ((lambda (g$208$25337) (if g$208$25337 (begin '#f (append g$208$25335 g$208$25337)) '#f)) ((letrec ((g$208$25339 (lambda (g$208$25341) (if (g$208$15966 g$208$25341) ((lambda (g$208$25343) (if g$208$25343 (begin '#f ((lambda (g$208$25345) (if g$208$25345 (begin '#f (map cons g$208$25343 g$208$25345)) '#f)) (g$208$25339 (g$208$15976 g$208$25341)))) '#f)) ((lambda (g$208$25347) (list g$208$25347)) (g$208$15974 g$208$25341))) (if (g$208$15970 g$208$25341) (list (begin 'imp* '())) '#f))))) g$208$25339) (g$208$15976 g$208$25333)))) '#f)) ((lambda (g$208$25349) '()) (g$208$15974 g$208$25333)))) '#f)) g$208$25319))) g$208$25311))) ((lambda (g$208$25351) (if (g$208$15966 g$208$25351) (begin '#f ((lambda (g$208$25353) (if g$208$25353 (begin '#f ((lambda (g$208$25355) (if g$208$25355 (begin '#f (append g$208$25353 g$208$25355)) '#f)) ((lambda (g$208$25357) (if (g$208$15966 g$208$25357) (begin '#f ((lambda (g$208$25359) (if g$208$25359 (begin '#f ((lambda (g$208$25361) (if g$208$25361 (begin '#f (append g$208$25359 g$208$25361)) '#f)) ((lambda (g$208$25363) (if (equal? (g$208$16002 g$208$25363) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$25357)))) '#f)) ((lambda (g$208$25365) (list g$208$25365)) (g$208$15974 g$208$25357)))) '#f)) (g$208$15976 g$208$25351)))) '#f)) ((lambda (g$208$25367) '()) (g$208$15974 g$208$25351)))) '#f)) g$208$25311))) g$208$25309))) (set! g$208$25189 (lambda (g$208$25257 g$208$25258) ((lambda (g$208$25261) ((lambda (g$208$25263) (if (if g$208$25263 (begin '#f (apply (lambda (g$208$25265) (g$208$15980 g$208$25265)) g$208$25263)) '#f) (apply (lambda (g$208$25267) (call-with-values (lambda () (g$208$16016 g$208$25267 g$208$25258)) (lambda (g$208$25272 g$208$25273 g$208$25274) ((lambda (g$208$25278 g$208$25279 g$208$25280) ((lambda (g$208$25284) (if (memv g$208$25284 '($module)) ((lambda (g$208$25285) ((lambda (g$208$25287 g$208$25288) (values g$208$25287 g$208$25288)) (car g$208$25285) (cdr g$208$25285))) g$208$25279) (g$208$16715 '#f '"invalid import" g$208$25257))) g$208$25280)) g$208$25274 g$208$25273 g$208$25272)))) g$208$25263) (g$208$16715 '#f '"invalid syntax" g$208$25261))) ((lambda (g$208$25291) (if (g$208$15966 g$208$25291) (begin '#f ((lambda (g$208$25293) (if g$208$25293 (begin '#f ((lambda (g$208$25295) (if g$208$25295 (begin '#f (append g$208$25293 g$208$25295)) '#f)) ((lambda (g$208$25297) (if (g$208$15966 g$208$25297) (begin '#f ((lambda (g$208$25299) (if g$208$25299 (begin '#f ((lambda (g$208$25301) (if g$208$25301 (begin '#f (append g$208$25299 g$208$25301)) '#f)) ((lambda (g$208$25303) (if (equal? (g$208$16002 g$208$25303) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$25297)))) '#f)) ((lambda (g$208$25305) (list g$208$25305)) (g$208$15974 g$208$25297)))) '#f)) (g$208$15976 g$208$25291)))) '#f)) ((lambda (g$208$25307) '()) (g$208$15974 g$208$25291)))) '#f)) g$208$25261))) g$208$25257))) (set! g$208$25191 (lambda (g$208$25207) ((lambda (g$208$25209) ((lambda (g$208$25211) (if (if g$208$25211 (begin '#f (apply (lambda (g$208$25213 g$208$25214) '#t) g$208$25211)) '#f) (apply (lambda (g$208$25217 g$208$25218) (call-with-values (lambda () (g$208$16640 (g$208$16721 g$208$25218))) (lambda (g$208$25223 g$208$25224) ((lambda (g$208$25227 g$208$25228) (values (vector-map (lambda (g$208$25231) (g$208$15946 g$208$25217 g$208$25231)) g$208$25228) g$208$25227)) g$208$25224 g$208$25223)))) g$208$25211) ((lambda (g$208$25233) ((lambda (g$208$25235) (if (if g$208$25235 (begin '#f (apply (lambda () '#t) g$208$25235)) '#f) (apply (lambda () (g$208$16715 '#f '"invalid import form" g$208$25207)) g$208$25235) (g$208$16715 '#f '"invalid syntax" g$208$25233))) ((lambda (g$208$25237) '()) g$208$25233))) g$208$25209))) ((lambda (g$208$25239) (if (g$208$15966 g$208$25239) (begin '#f ((lambda (g$208$25241) (if g$208$25241 (begin '#f ((lambda (g$208$25243) (if g$208$25243 (begin '#f (append g$208$25241 g$208$25243)) '#f)) ((letrec ((g$208$25245 (lambda (g$208$25247) (if (g$208$15966 g$208$25247) ((lambda (g$208$25249) (if g$208$25249 (begin '#f ((lambda (g$208$25251) (if g$208$25251 (begin '#f (map cons g$208$25249 g$208$25251)) '#f)) (g$208$25245 (g$208$15976 g$208$25247)))) '#f)) ((lambda (g$208$25253) (list g$208$25253)) (g$208$15974 g$208$25247))) (if (g$208$15970 g$208$25247) (list (begin 'imp* '())) '#f))))) g$208$25245) (g$208$15976 g$208$25239)))) '#f)) ((lambda (g$208$25255) (list g$208$25255)) (g$208$15974 g$208$25239)))) '#f)) g$208$25209))) g$208$25207))) (call-with-values (lambda () (if (g$208$25187 g$208$25167) (g$208$25189 g$208$25167 g$208$25150) (g$208$25191 g$208$25167))) (lambda (g$208$25195 g$208$25196) ((lambda (g$208$25199 g$208$25200) (vector-for-each (lambda (g$208$25203 g$208$25204) (g$208$15919 g$208$25156 g$208$25203 g$208$25204)) g$208$25200 g$208$25199)) g$208$25196 g$208$25195))))) '#f '#f '#f))) (g$208$16622 (cdr g$208$25149) g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25184 g$208$25156 g$208$25157)) (if g$208$25157 (g$208$16622 (cdr g$208$25149) g$208$25150 g$208$25151 (cons (g$208$15890 'dummy) g$208$25152) (cons (cons 'top-expr g$208$25167) g$208$25153) g$208$25154 g$208$25184 g$208$25156 g$208$25157) (values g$208$25149 g$208$25150 g$208$25151 g$208$25152 g$208$25153 g$208$25154 g$208$25184))))))))))))) g$208$25180)) (if (g$208$15980 g$208$25178) (cons g$208$25178 g$208$25155) g$208$25155))) g$208$25174 g$208$25173 g$208$25172)))) (car g$208$25149))))) (set! g$208$16624 (lambda (g$208$25545 g$208$25546 g$208$25547) ((lambda (g$208$25551) (begin (set! g$208$25551 (lambda (g$208$25554 g$208$25555 g$208$25556 g$208$25557) ((lambda (g$208$25562 g$208$25563) (begin (set-symbol-value! g$208$25555 g$208$25557) (g$208$15513 (g$208$16725) g$208$25562 g$208$25563) (g$208$15514 (g$208$16725) g$208$25563 (cons* g$208$25556 (g$208$16725) g$208$25555)))) (g$208$15982 g$208$25554) (g$208$16004 g$208$25554)))) ((lambda (g$208$25553) (if (memv g$208$25553 '(local-macro)) (g$208$25551 g$208$25545 g$208$25546 'global-macro (cadr g$208$25547)) (if (memv g$208$25553 '(local-macro!)) (g$208$25551 g$208$25545 g$208$25546 'global-macro! (cadr g$208$25547)) (if (memv g$208$25553 '($rtd)) (g$208$25551 g$208$25545 g$208$25546 'global-rtd (cdr g$208$25547)) (assertion-violation 'set-global-macro-binding! '"BUG: invalid type" g$208$25547))))) (g$208$16010 g$208$25547)))) '#f))) (set! g$208$16626 (lambda (g$208$25566 g$208$25567) (g$208$16628 g$208$25566 g$208$25567))) (set! g$208$16628 (lambda (g$208$25570 g$208$25571) ((lambda (g$208$25574) ((lambda (g$208$25576) ((lambda (g$208$25578) (if (memv g$208$25578 '(global global-macro global-macro! global-rtd)) ((lambda (g$208$25579) ((lambda (g$208$25581 g$208$25582) (if (eq? g$208$25581 (g$208$16725)) g$208$25582 (g$208$16715 '#f '"cannot modify imported binding" g$208$25571))) (car g$208$25579) (cdr g$208$25579))) (g$208$16012 g$208$25576)) (g$208$16715 '#f '"cannot modify binding in" g$208$25571))) (g$208$16010 g$208$25576))) (g$208$15515 g$208$25574))) (g$208$16004 g$208$25570)))) (set! g$208$16630 (lambda (g$208$25585 g$208$25586) (if (null? g$208$25585) g$208$25586 ((lambda (g$208$25589) (call-with-values (lambda () (g$208$16016 g$208$25589 '())) (lambda (g$208$25594 g$208$25595 g$208$25596) ((lambda (g$208$25600 g$208$25601 g$208$25602) ((lambda (g$208$25606) (if (memv g$208$25606 '(define)) (call-with-values (lambda () (g$208$16462 g$208$25589)) (lambda (g$208$25703 g$208$25704) ((lambda (g$208$25707 g$208$25708) (begin (g$208$15513 (g$208$16725) (g$208$15982 g$208$25708) (g$208$16004 g$208$25708)) ((lambda (g$208$25711) (begin (g$208$15514 (g$208$16725) (g$208$16004 g$208$25708) (cons* 'global (g$208$16725) g$208$25711)) ((lambda (g$208$25713) (g$208$16630 (cdr g$208$25585) (cons (cons g$208$25711 g$208$25713) g$208$25586))) (g$208$16608 g$208$25707 '() '())))) (g$208$16628 g$208$25708 g$208$25589)))) g$208$25704 g$208$25703))) (if (memv g$208$25606 '(define-syntax)) (call-with-values (lambda () (g$208$16464 g$208$25589)) (lambda (g$208$25687 g$208$25688) ((lambda (g$208$25691 g$208$25692) ((lambda (g$208$25695) ((lambda (g$208$25697) ((lambda (g$208$25699) (begin (g$208$16624 g$208$25692 g$208$25695 g$208$25699) (g$208$16630 (cdr g$208$25585) g$208$25586))) (g$208$16043 g$208$25697))) (g$208$16632 g$208$25691 '()))) (g$208$16626 g$208$25692 g$208$25589))) g$208$25688 g$208$25687))) (if (memv g$208$25606 '(let-syntax letrec-syntax)) (assertion-violation 'chi-top* '"BUG: not supported yet at top level" g$208$25602) (if (memv g$208$25606 '(begin)) ((lambda (g$208$25659) ((lambda (g$208$25661) (if (if g$208$25661 (begin '#f (apply (lambda (g$208$25663) '#t) g$208$25661)) '#f) (apply (lambda (g$208$25665) (g$208$16630 (append g$208$25665 (cdr g$208$25585)) g$208$25586)) g$208$25661) (g$208$16715 '#f '"invalid syntax" g$208$25659))) ((lambda (g$208$25667) (if (g$208$15966 g$208$25667) (begin '#f ((lambda (g$208$25669) (if g$208$25669 (begin '#f ((lambda (g$208$25671) (if g$208$25671 (begin '#f (append g$208$25669 g$208$25671)) '#f)) ((letrec ((g$208$25673 (lambda (g$208$25675) (if (g$208$15966 g$208$25675) ((lambda (g$208$25677) (if g$208$25677 (begin '#f ((lambda (g$208$25679) (if g$208$25679 (begin '#f (map cons g$208$25677 g$208$25679)) '#f)) (g$208$25673 (g$208$15976 g$208$25675)))) '#f)) ((lambda (g$208$25681) (list g$208$25681)) (g$208$15974 g$208$25675))) (if (g$208$15970 g$208$25675) (list (begin 'x* '())) '#f))))) g$208$25673) (g$208$15976 g$208$25667)))) '#f)) ((lambda (g$208$25683) '()) (g$208$15974 g$208$25667)))) '#f)) g$208$25659))) g$208$25589) (if (memv g$208$25606 '(global-macro global-macro!)) (g$208$16630 (cons (g$208$16594 g$208$25601 g$208$25589) (cdr g$208$25585)) g$208$25586) (if (memv g$208$25606 '(local-macro local-macro!)) (g$208$16630 (cons (g$208$16592 g$208$25601 g$208$25589) (cdr g$208$25585)) g$208$25586) (if (memv g$208$25606 '(macro macro!)) (g$208$16630 (cons (g$208$16590 g$208$25601 g$208$25589) (cdr g$208$25585)) g$208$25586) (if (memv g$208$25606 '(library)) (begin (g$208$16691 (g$208$16002 g$208$25589)) (g$208$16630 (cdr g$208$25585) g$208$25586)) (if (memv g$208$25606 '(import)) (begin ((lambda (g$208$25607) ((lambda (g$208$25609) (if (if g$208$25609 (begin '#f (apply (lambda (g$208$25611 g$208$25612) '#t) g$208$25609)) '#f) (apply (lambda (g$208$25615 g$208$25616) (call-with-values (lambda () (g$208$16640 (g$208$16721 g$208$25616))) (lambda (g$208$25621 g$208$25622) ((lambda (g$208$25625 g$208$25626) ((lambda (g$208$25629) (if g$208$25629 ((lambda (g$208$25631) (vector-for-each (lambda (g$208$25633 g$208$25634) ((lambda (g$208$25637) (if g$208$25637 ((lambda (g$208$25639) (if (eq? (cdr g$208$25639) g$208$25634) (void) (g$208$16715 'import '"identifier conflict" g$208$25589 g$208$25633))) g$208$25637) (g$208$15513 g$208$25631 g$208$25633 g$208$25634))) (assq g$208$25633 (g$208$15481 g$208$25631)))) g$208$25626 g$208$25625)) g$208$25629) (assertion-violation 'import '"BUG: cannot happen"))) (g$208$16725))) g$208$25622 g$208$25621)))) g$208$25609) (g$208$16715 '#f '"invalid syntax" g$208$25607))) ((lambda (g$208$25641) (if (g$208$15966 g$208$25641) (begin '#f ((lambda (g$208$25643) (if g$208$25643 (begin '#f ((lambda (g$208$25645) (if g$208$25645 (begin '#f (append g$208$25643 g$208$25645)) '#f)) ((letrec ((g$208$25647 (lambda (g$208$25649) (if (g$208$15966 g$208$25649) ((lambda (g$208$25651) (if g$208$25651 (begin '#f ((lambda (g$208$25653) (if g$208$25653 (begin '#f (map cons g$208$25651 g$208$25653)) '#f)) (g$208$25647 (g$208$15976 g$208$25649)))) '#f)) ((lambda (g$208$25655) (list g$208$25655)) (g$208$15974 g$208$25649))) (if (g$208$15970 g$208$25649) (list (begin 'imp* '())) '#f))))) g$208$25647) (g$208$15976 g$208$25641)))) '#f)) ((lambda (g$208$25657) (list g$208$25657)) (g$208$15974 g$208$25641)))) '#f)) g$208$25607))) g$208$25589) (g$208$16630 (cdr g$208$25585) g$208$25586)) (g$208$16630 (cdr g$208$25585) (cons (cons '#f (g$208$16600 g$208$25589 '() '())) g$208$25586)))))))))))) g$208$25602)) g$208$25596 g$208$25595 g$208$25594)))) (car g$208$25585))))) (set! g$208$16632 (lambda (g$208$25715 g$208$25716) ((lambda (g$208$25719) ((lambda (g$208$25721) (begin (for-each ((lambda (g$208$25723) (lambda (g$208$25725) (begin (g$208$15516 g$208$25725) (g$208$25723 g$208$25725)))) (g$208$16648)) (g$208$25719)) g$208$25721)) ((lambda (g$208$25731 g$208$25732 g$208$25733 g$208$25734) ((lambda (g$208$25739) (dynamic-wind g$208$25739 (lambda () (g$208$16600 g$208$25715 g$208$25716 g$208$25716)) g$208$25739)) (lambda () (begin ((lambda (g$208$25741) (begin (g$208$25731 g$208$25733) (set! g$208$25733 g$208$25741))) (g$208$25731)) ((lambda (g$208$25743) (begin (g$208$25732 g$208$25734) (set! g$208$25734 g$208$25743))) (g$208$25732)))))) g$208$16646 g$208$16648 g$208$25719 (lambda (g$208$25745) (values))))) (g$208$16644)))) (set! g$208$16634 (lambda (g$208$25747) ((letrec ((g$208$25749 (lambda (g$208$25751 g$208$25752 g$208$25753) (if (null? g$208$25751) (begin ((lambda (g$208$25757) (if (g$208$15990 g$208$25757) (void) (g$208$16715 'export '"invalid exports" (g$208$16614 g$208$25757)))) (map (lambda (g$208$25759) (g$208$15956 g$208$25759 g$208$15886 '())) g$208$25753)) (values (map g$208$16721 g$208$25752) (map g$208$16721 g$208$25753))) ((lambda (g$208$25761) ((lambda (g$208$25763) (if (if g$208$25763 (begin '#f (apply (lambda (g$208$25765 g$208$25766 g$208$25767) '#t) g$208$25763)) '#f) (apply (lambda (g$208$25771 g$208$25772 g$208$25773) (begin (if (if (eq? (g$208$16721 g$208$25771) 'rename) (if (for-all g$208$15980 g$208$25772) (begin '#f (for-all g$208$15980 g$208$25773)) '#f) '#f) (void) (g$208$16715 'export '"invalid export specifier" (car g$208$25751))) (g$208$25749 (cdr g$208$25751) (append g$208$25772 g$208$25752) (append g$208$25773 g$208$25753)))) g$208$25763) ((lambda (g$208$25777) ((lambda (g$208$25779) (if (if g$208$25779 (begin '#f (apply (lambda (g$208$25781) '#t) g$208$25779)) '#f) (apply (lambda (g$208$25783) (begin (if (g$208$15980 g$208$25783) (void) (g$208$16715 'export '"invalid export" g$208$25783)) (g$208$25749 (cdr g$208$25751) (cons g$208$25783 g$208$25752) (cons g$208$25783 g$208$25753)))) g$208$25779) (g$208$16715 '#f '"invalid syntax" g$208$25777))) ((lambda (g$208$25785) (list g$208$25785)) g$208$25777))) g$208$25761))) ((lambda (g$208$25787) (if (g$208$15966 g$208$25787) (begin '#f ((lambda (g$208$25789) (if g$208$25789 (begin '#f ((lambda (g$208$25791) (if g$208$25791 (begin '#f (append g$208$25789 g$208$25791)) '#f)) ((letrec ((g$208$25793 (lambda (g$208$25795) (if (g$208$15966 g$208$25795) ((lambda (g$208$25797) (if g$208$25797 (begin '#f ((lambda (g$208$25799) (if g$208$25799 (begin '#f (map cons g$208$25797 g$208$25799)) '#f)) (g$208$25793 (g$208$15976 g$208$25795)))) '#f)) ((lambda (g$208$25801) (if (g$208$15966 g$208$25801) (begin '#f ((lambda (g$208$25803) (if g$208$25803 (begin '#f ((lambda (g$208$25805) (if g$208$25805 (begin '#f (append g$208$25803 g$208$25805)) '#f)) ((lambda (g$208$25807) (if (g$208$15966 g$208$25807) (begin '#f ((lambda (g$208$25809) (if g$208$25809 (begin '#f ((lambda (g$208$25811) (if g$208$25811 (begin '#f (append g$208$25809 g$208$25811)) '#f)) ((lambda (g$208$25813) (if (equal? (g$208$16002 g$208$25813) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$25807)))) '#f)) ((lambda (g$208$25815) (list g$208$25815)) (g$208$15974 g$208$25807)))) '#f)) (g$208$15976 g$208$25801)))) '#f)) ((lambda (g$208$25817) (list g$208$25817)) (g$208$15974 g$208$25801)))) '#f)) (g$208$15974 g$208$25795))) (if (g$208$15970 g$208$25795) (list (begin 'i* '()) (begin 'e* '())) '#f))))) g$208$25793) (g$208$15976 g$208$25787)))) '#f)) ((lambda (g$208$25819) (list g$208$25819)) (g$208$15974 g$208$25787)))) '#f)) g$208$25761))) (car g$208$25751)))))) g$208$25749) g$208$25747 '() '()))) (set! g$208$16636 (lambda (g$208$25821) ((lambda (g$208$25823) (begin (set! g$208$25823 (lambda (g$208$25835) ((lambda (g$208$25837) ((lambda (g$208$25839) (if (if g$208$25839 (begin '#f (apply (lambda (g$208$25841) (for-all (lambda (g$208$25843) ((lambda (g$208$25845) (if (integer? g$208$25845) (begin '#f (exact? g$208$25845)) '#f)) (g$208$16721 g$208$25843))) g$208$25841)) g$208$25839)) '#f) (apply (lambda (g$208$25847) (values '() (map g$208$16721 g$208$25847))) g$208$25839) ((lambda (g$208$25849) ((lambda (g$208$25851) (if (if g$208$25851 (begin '#f (apply (lambda (g$208$25853 g$208$25854) (g$208$15980 g$208$25853)) g$208$25851)) '#f) (apply (lambda (g$208$25857 g$208$25858) (call-with-values (lambda () (g$208$25823 g$208$25858)) (lambda (g$208$25863 g$208$25864) ((lambda (g$208$25867 g$208$25868) (values (cons (g$208$15982 g$208$25857) g$208$25868) g$208$25867)) g$208$25864 g$208$25863)))) g$208$25851) ((lambda (g$208$25871) ((lambda (g$208$25873) (if (if g$208$25873 (begin '#f (apply (lambda () '#t) g$208$25873)) '#f) (apply (lambda () (values '() '())) g$208$25873) ((lambda (g$208$25875) ((lambda (g$208$25877) (if (if g$208$25877 (begin '#f (apply (lambda () '#t) g$208$25877)) '#f) (apply (lambda () (g$208$16715 '#f '"invalid library name" g$208$25821)) g$208$25877) (g$208$16715 '#f '"invalid syntax" g$208$25875))) ((lambda (g$208$25879) '()) g$208$25875))) g$208$25871))) ((lambda (g$208$25881) (if (equal? (g$208$16002 g$208$25881) '()) (begin '#f '()) '#f)) g$208$25871))) g$208$25849))) ((lambda (g$208$25883) (if (g$208$15966 g$208$25883) (begin '#f ((lambda (g$208$25885) (if g$208$25885 (begin '#f ((lambda (g$208$25887) (if g$208$25887 (begin '#f (append g$208$25885 g$208$25887)) '#f)) ((lambda (g$208$25889) (list g$208$25889)) (g$208$15976 g$208$25883)))) '#f)) ((lambda (g$208$25891) (list g$208$25891)) (g$208$15974 g$208$25883)))) '#f)) g$208$25849))) g$208$25837))) ((lambda (g$208$25893) (if (g$208$15966 g$208$25893) (begin '#f ((lambda (g$208$25895) (if g$208$25895 (begin '#f ((lambda (g$208$25897) (if g$208$25897 (begin '#f (append g$208$25895 g$208$25897)) '#f)) ((lambda (g$208$25899) (if (equal? (g$208$16002 g$208$25899) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$25893)))) '#f)) ((letrec ((g$208$25901 (lambda (g$208$25903) (if (g$208$15966 g$208$25903) ((lambda (g$208$25905) (if g$208$25905 (begin '#f ((lambda (g$208$25907) (if g$208$25907 (begin '#f (map cons g$208$25905 g$208$25907)) '#f)) (g$208$25901 (g$208$15976 g$208$25903)))) '#f)) ((lambda (g$208$25909) (list g$208$25909)) (g$208$15974 g$208$25903))) (if (g$208$15970 g$208$25903) (list (begin 'v* '())) '#f))))) g$208$25901) (g$208$15974 g$208$25893)))) '#f)) g$208$25837))) g$208$25835))) (call-with-values (lambda () (g$208$25823 g$208$25821)) (lambda (g$208$25827 g$208$25828) ((lambda (g$208$25831 g$208$25832) (begin (if (null? g$208$25832) (g$208$16715 '#f '"empty library name" g$208$25821) (void)) (values g$208$25832 g$208$25831))) g$208$25828 g$208$25827))))) '#f))) (set! g$208$16638 (lambda (g$208$25911) ((lambda (g$208$25913) ((lambda (g$208$25915) (if (if g$208$25915 (begin '#f (apply (lambda (g$208$25917 g$208$25918 g$208$25919 g$208$25920 g$208$25921 g$208$25922 g$208$25923) (if (eq? (g$208$16721 g$208$25919) 'export) (if (eq? (g$208$16721 g$208$25921) 'import) (begin '#f (eq? (g$208$16721 g$208$25917) 'library)) '#f) '#f)) g$208$25915)) '#f) (apply (lambda (g$208$25931 g$208$25932 g$208$25933 g$208$25934 g$208$25935 g$208$25936 g$208$25937) (values g$208$25932 g$208$25934 g$208$25936 g$208$25937)) g$208$25915) ((lambda (g$208$25945) ((lambda (g$208$25947) (if (if g$208$25947 (begin '#f (apply (lambda () '#t) g$208$25947)) '#f) (apply (lambda () (g$208$16715 '#f '"malformed library" g$208$25911)) g$208$25947) (g$208$16715 '#f '"invalid syntax" g$208$25945))) ((lambda (g$208$25949) '()) g$208$25945))) g$208$25913))) ((lambda (g$208$25951) (if (g$208$15966 g$208$25951) (begin '#f ((lambda (g$208$25953) (if g$208$25953 (begin '#f ((lambda (g$208$25955) (if g$208$25955 (begin '#f (append g$208$25953 g$208$25955)) '#f)) ((lambda (g$208$25957) (if (g$208$15966 g$208$25957) (begin '#f ((lambda (g$208$25959) (if g$208$25959 (begin '#f ((lambda (g$208$25961) (if g$208$25961 (begin '#f (append g$208$25959 g$208$25961)) '#f)) ((lambda (g$208$25963) (if (g$208$15966 g$208$25963) (begin '#f ((lambda (g$208$25965) (if g$208$25965 (begin '#f ((lambda (g$208$25967) (if g$208$25967 (begin '#f (append g$208$25965 g$208$25967)) '#f)) ((lambda (g$208$25969) (if (g$208$15966 g$208$25969) (begin '#f ((lambda (g$208$25971) (if g$208$25971 (begin '#f ((lambda (g$208$25973) (if g$208$25973 (begin '#f (append g$208$25971 g$208$25973)) '#f)) ((letrec ((g$208$25975 (lambda (g$208$25977) (if (g$208$15966 g$208$25977) ((lambda (g$208$25979) (if g$208$25979 (begin '#f ((lambda (g$208$25981) (if g$208$25981 (begin '#f (map cons g$208$25979 g$208$25981)) '#f)) (g$208$25975 (g$208$15976 g$208$25977)))) '#f)) ((lambda (g$208$25983) (list g$208$25983)) (g$208$15974 g$208$25977))) (if (g$208$15970 g$208$25977) (list (begin 'b* '())) '#f))))) g$208$25975) (g$208$15976 g$208$25969)))) '#f)) ((lambda (g$208$25985) (if (g$208$15966 g$208$25985) (begin '#f ((lambda (g$208$25987) (if g$208$25987 (begin '#f ((lambda (g$208$25989) (if g$208$25989 (begin '#f (append g$208$25987 g$208$25989)) '#f)) ((letrec ((g$208$25991 (lambda (g$208$25993) (if (g$208$15966 g$208$25993) ((lambda (g$208$25995) (if g$208$25995 (begin '#f ((lambda (g$208$25997) (if g$208$25997 (begin '#f (map cons g$208$25995 g$208$25997)) '#f)) (g$208$25991 (g$208$15976 g$208$25993)))) '#f)) ((lambda (g$208$25999) (list g$208$25999)) (g$208$15974 g$208$25993))) (if (g$208$15970 g$208$25993) (list (begin 'imp* '())) '#f))))) g$208$25991) (g$208$15976 g$208$25985)))) '#f)) ((lambda (g$208$26001) (list g$208$26001)) (g$208$15974 g$208$25985)))) '#f)) (g$208$15974 g$208$25969)))) '#f)) (g$208$15976 g$208$25963)))) '#f)) ((lambda (g$208$26003) (if (g$208$15966 g$208$26003) (begin '#f ((lambda (g$208$26005) (if g$208$26005 (begin '#f ((lambda (g$208$26007) (if g$208$26007 (begin '#f (append g$208$26005 g$208$26007)) '#f)) ((letrec ((g$208$26009 (lambda (g$208$26011) (if (g$208$15966 g$208$26011) ((lambda (g$208$26013) (if g$208$26013 (begin '#f ((lambda (g$208$26015) (if g$208$26015 (begin '#f (map cons g$208$26013 g$208$26015)) '#f)) (g$208$26009 (g$208$15976 g$208$26011)))) '#f)) ((lambda (g$208$26017) (list g$208$26017)) (g$208$15974 g$208$26011))) (if (g$208$15970 g$208$26011) (list (begin 'exp* '())) '#f))))) g$208$26009) (g$208$15976 g$208$26003)))) '#f)) ((lambda (g$208$26019) (list g$208$26019)) (g$208$15974 g$208$26003)))) '#f)) (g$208$15974 g$208$25963)))) '#f)) (g$208$15976 g$208$25957)))) '#f)) ((letrec ((g$208$26021 (lambda (g$208$26023) (if (g$208$15966 g$208$26023) ((lambda (g$208$26025) (if g$208$26025 (begin '#f ((lambda (g$208$26027) (if g$208$26027 (begin '#f (map cons g$208$26025 g$208$26027)) '#f)) (g$208$26021 (g$208$15976 g$208$26023)))) '#f)) ((lambda (g$208$26029) (list g$208$26029)) (g$208$15974 g$208$26023))) (if (g$208$15970 g$208$26023) (list (begin 'name* '())) '#f))))) g$208$26021) (g$208$15974 g$208$25957)))) '#f)) (g$208$15976 g$208$25951)))) '#f)) ((lambda (g$208$26031) (list g$208$26031)) (g$208$15974 g$208$25951)))) '#f)) g$208$25913))) g$208$25911))) (set! g$208$16640 (lambda (g$208$26033) ((lambda (g$208$26035 g$208$26037 g$208$26039 g$208$26041 g$208$26043 g$208$26045 g$208$26047 g$208$26049 g$208$26051) (begin (set! g$208$26035 (lambda (g$208$26885) (g$208$16715 'import '"two imports with different bindings" g$208$26885))) (set! g$208$26037 (lambda (g$208$26867 g$208$26868) ((lambda (g$208$26871) (begin (set! g$208$26871 (lambda (g$208$26873 g$208$26874) ((lambda (g$208$26877 g$208$26878) ((lambda (g$208$26881) (if g$208$26881 ((lambda (g$208$26883) (if (eq? (cdr g$208$26883) g$208$26878) g$208$26874 (g$208$26035 g$208$26877))) g$208$26881) (cons g$208$26873 g$208$26874))) (assq g$208$26877 g$208$26874))) (car g$208$26873) (cdr g$208$26873)))) (if (null? g$208$26867) g$208$26868 (g$208$26871 (car g$208$26867) (g$208$26037 (cdr g$208$26867) g$208$26868))))) '#f))) (set! g$208$26039 (lambda (g$208$26825 g$208$26826) ((lambda (g$208$26829) (begin (set! g$208$26829 (lambda (g$208$26851 g$208$26852) (if (null? g$208$26852) (g$208$16715 'import '"cannot rename unbound identifier" g$208$26851) (if (eq? g$208$26851 (caar g$208$26852)) (values (cdar g$208$26852) (cdr g$208$26852)) ((lambda (g$208$26855) (call-with-values (lambda () (g$208$26829 g$208$26851 (cdr g$208$26852))) (lambda (g$208$26859 g$208$26860) ((lambda (g$208$26863 g$208$26864) (values g$208$26864 (cons g$208$26855 g$208$26863))) g$208$26860 g$208$26859)))) (car g$208$26852)))))) (if (null? g$208$26825) (values '() g$208$26826) (call-with-values (lambda () (g$208$26829 (car g$208$26825) g$208$26826)) (lambda (g$208$26833 g$208$26834) ((lambda (g$208$26837 g$208$26838) (call-with-values (lambda () (g$208$26039 (cdr g$208$26825) g$208$26837)) (lambda (g$208$26843 g$208$26844) ((lambda (g$208$26847 g$208$26848) (values (cons g$208$26838 g$208$26848) g$208$26847)) g$208$26844 g$208$26843)))) g$208$26834 g$208$26833)))))) '#f))) (set! g$208$26041 (lambda (g$208$26817 g$208$26818) (map (lambda (g$208$26821) ((lambda (g$208$26823) (if g$208$26823 (cdr g$208$26823) (g$208$16715 'import '"cannot find identifier" g$208$26821))) (assq g$208$26821 g$208$26818))) g$208$26817))) (set! g$208$26043 (lambda (g$208$26809 g$208$26810) ((letrec ((g$208$26813 (lambda (g$208$26815) (if (null? g$208$26815) '() (if (memq (caar g$208$26815) g$208$26809) (g$208$26813 (cdr g$208$26815)) (cons (car g$208$26815) (g$208$26813 (cdr g$208$26815)))))))) g$208$26813) g$208$26810))) (set! g$208$26045 (lambda (g$208$26807) (if (null? g$208$26807) '() (if (memq (car g$208$26807) (cdr g$208$26807)) (g$208$26045 (cdr g$208$26807)) (cons (car g$208$26807) (g$208$26045 (cdr g$208$26807))))))) (set! g$208$26047 (lambda (g$208$26381) ((lambda (g$208$26383 g$208$26385 g$208$26387) (begin (set! g$208$26383 (lambda (g$208$26805) (if (integer? g$208$26805) (if (exact? g$208$26805) (begin '#f (>= g$208$26805 '0)) '#f) '#f))) (set! g$208$26385 (lambda (g$208$26615) ((lambda (g$208$26617) ((lambda (g$208$26619) (if (if g$208$26619 (begin '#f (apply (lambda (g$208$26621) (g$208$26383 (g$208$16721 g$208$26621))) g$208$26619)) '#f) (apply (lambda (g$208$26623) (lambda (g$208$26625) (= g$208$26625 (g$208$16721 g$208$26623)))) g$208$26619) ((lambda (g$208$26627) ((lambda (g$208$26629) (if (if g$208$26629 (begin '#f (apply (lambda (g$208$26631 g$208$26632) (eq? (g$208$16721 g$208$26631) 'and)) g$208$26629)) '#f) (apply (lambda (g$208$26635 g$208$26636) ((lambda (g$208$26639) (lambda (g$208$26641) (for-all (lambda (g$208$26643) (g$208$26643 g$208$26641)) g$208$26639))) (map g$208$26385 g$208$26636))) g$208$26629) ((lambda (g$208$26645) ((lambda (g$208$26647) (if (if g$208$26647 (begin '#f (apply (lambda (g$208$26649 g$208$26650) (eq? (g$208$16721 g$208$26649) 'or)) g$208$26647)) '#f) (apply (lambda (g$208$26653 g$208$26654) ((lambda (g$208$26657) (lambda (g$208$26659) (exists (lambda (g$208$26661) (g$208$26661 g$208$26659)) g$208$26657))) (map g$208$26385 g$208$26654))) g$208$26647) ((lambda (g$208$26663) ((lambda (g$208$26665) (if (if g$208$26665 (begin '#f (apply (lambda (g$208$26667 g$208$26668) (eq? (g$208$16721 g$208$26667) 'not)) g$208$26665)) '#f) (apply (lambda (g$208$26671 g$208$26672) ((lambda (g$208$26675) (lambda (g$208$26677) (not (g$208$26675 g$208$26677)))) (g$208$26385 g$208$26672))) g$208$26665) ((lambda (g$208$26679) ((lambda (g$208$26681) (if (if g$208$26681 (begin '#f (apply (lambda (g$208$26683 g$208$26684) (if (eq? (g$208$16721 g$208$26683) '<=) (begin '#f (g$208$26383 (g$208$16721 g$208$26684))) '#f)) g$208$26681)) '#f) (apply (lambda (g$208$26687 g$208$26688) (lambda (g$208$26691) (<= g$208$26691 (g$208$16721 g$208$26688)))) g$208$26681) ((lambda (g$208$26693) ((lambda (g$208$26695) (if (if g$208$26695 (begin '#f (apply (lambda (g$208$26697 g$208$26698) (if (eq? (g$208$16721 g$208$26697) '>=) (begin '#f (g$208$26383 g$208$26698)) '#f)) g$208$26695)) '#f) (apply (lambda (g$208$26701 g$208$26702) (lambda (g$208$26705) (>= g$208$26705 (g$208$16721 g$208$26702)))) g$208$26695) ((lambda (g$208$26707) ((lambda (g$208$26709) (if (if g$208$26709 (begin '#f (apply (lambda () '#t) g$208$26709)) '#f) (apply (lambda () (g$208$16715 'import '"invalid sub-version spec" g$208$26381 g$208$26615)) g$208$26709) (g$208$16715 '#f '"invalid syntax" g$208$26707))) ((lambda (g$208$26711) '()) g$208$26707))) g$208$26693))) ((lambda (g$208$26713) (if (g$208$15966 g$208$26713) (begin '#f ((lambda (g$208$26715) (if g$208$26715 (begin '#f ((lambda (g$208$26717) (if g$208$26717 (begin '#f (append g$208$26715 g$208$26717)) '#f)) ((lambda (g$208$26719) (if (g$208$15966 g$208$26719) (begin '#f ((lambda (g$208$26721) (if g$208$26721 (begin '#f ((lambda (g$208$26723) (if g$208$26723 (begin '#f (append g$208$26721 g$208$26723)) '#f)) ((lambda (g$208$26725) (if (equal? (g$208$16002 g$208$26725) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$26719)))) '#f)) ((lambda (g$208$26727) (list g$208$26727)) (g$208$15974 g$208$26719)))) '#f)) (g$208$15976 g$208$26713)))) '#f)) ((lambda (g$208$26729) (list g$208$26729)) (g$208$15974 g$208$26713)))) '#f)) g$208$26693))) g$208$26679))) ((lambda (g$208$26731) (if (g$208$15966 g$208$26731) (begin '#f ((lambda (g$208$26733) (if g$208$26733 (begin '#f ((lambda (g$208$26735) (if g$208$26735 (begin '#f (append g$208$26733 g$208$26735)) '#f)) ((lambda (g$208$26737) (if (g$208$15966 g$208$26737) (begin '#f ((lambda (g$208$26739) (if g$208$26739 (begin '#f ((lambda (g$208$26741) (if g$208$26741 (begin '#f (append g$208$26739 g$208$26741)) '#f)) ((lambda (g$208$26743) (if (equal? (g$208$16002 g$208$26743) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$26737)))) '#f)) ((lambda (g$208$26745) (list g$208$26745)) (g$208$15974 g$208$26737)))) '#f)) (g$208$15976 g$208$26731)))) '#f)) ((lambda (g$208$26747) (list g$208$26747)) (g$208$15974 g$208$26731)))) '#f)) g$208$26679))) g$208$26663))) ((lambda (g$208$26749) (if (g$208$15966 g$208$26749) (begin '#f ((lambda (g$208$26751) (if g$208$26751 (begin '#f ((lambda (g$208$26753) (if g$208$26753 (begin '#f (append g$208$26751 g$208$26753)) '#f)) ((lambda (g$208$26755) (if (g$208$15966 g$208$26755) (begin '#f ((lambda (g$208$26757) (if g$208$26757 (begin '#f ((lambda (g$208$26759) (if g$208$26759 (begin '#f (append g$208$26757 g$208$26759)) '#f)) ((lambda (g$208$26761) (if (equal? (g$208$16002 g$208$26761) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$26755)))) '#f)) ((lambda (g$208$26763) (list g$208$26763)) (g$208$15974 g$208$26755)))) '#f)) (g$208$15976 g$208$26749)))) '#f)) ((lambda (g$208$26765) (list g$208$26765)) (g$208$15974 g$208$26749)))) '#f)) g$208$26663))) g$208$26645))) ((lambda (g$208$26767) (if (g$208$15966 g$208$26767) (begin '#f ((lambda (g$208$26769) (if g$208$26769 (begin '#f ((lambda (g$208$26771) (if g$208$26771 (begin '#f (append g$208$26769 g$208$26771)) '#f)) ((letrec ((g$208$26773 (lambda (g$208$26775) (if (g$208$15966 g$208$26775) ((lambda (g$208$26777) (if g$208$26777 (begin '#f ((lambda (g$208$26779) (if g$208$26779 (begin '#f (map cons g$208$26777 g$208$26779)) '#f)) (g$208$26773 (g$208$15976 g$208$26775)))) '#f)) ((lambda (g$208$26781) (list g$208$26781)) (g$208$15974 g$208$26775))) (if (g$208$15970 g$208$26775) (list (begin 'sub* '())) '#f))))) g$208$26773) (g$208$15976 g$208$26767)))) '#f)) ((lambda (g$208$26783) (list g$208$26783)) (g$208$15974 g$208$26767)))) '#f)) g$208$26645))) g$208$26627))) ((lambda (g$208$26785) (if (g$208$15966 g$208$26785) (begin '#f ((lambda (g$208$26787) (if g$208$26787 (begin '#f ((lambda (g$208$26789) (if g$208$26789 (begin '#f (append g$208$26787 g$208$26789)) '#f)) ((letrec ((g$208$26791 (lambda (g$208$26793) (if (g$208$15966 g$208$26793) ((lambda (g$208$26795) (if g$208$26795 (begin '#f ((lambda (g$208$26797) (if g$208$26797 (begin '#f (map cons g$208$26795 g$208$26797)) '#f)) (g$208$26791 (g$208$15976 g$208$26793)))) '#f)) ((lambda (g$208$26799) (list g$208$26799)) (g$208$15974 g$208$26793))) (if (g$208$15970 g$208$26793) (list (begin 'sub* '())) '#f))))) g$208$26791) (g$208$15976 g$208$26785)))) '#f)) ((lambda (g$208$26801) (list g$208$26801)) (g$208$15974 g$208$26785)))) '#f)) g$208$26627))) g$208$26617))) ((lambda (g$208$26803) (list g$208$26803)) g$208$26617))) g$208$26615))) (set! g$208$26387 (lambda (g$208$26465) ((lambda (g$208$26467) ((lambda (g$208$26469) (if (if g$208$26469 (begin '#f (apply (lambda () '#t) g$208$26469)) '#f) (apply (lambda () (lambda (g$208$26471) '#t)) g$208$26469) ((lambda (g$208$26473) ((lambda (g$208$26475) (if (if g$208$26475 (begin '#f (apply (lambda (g$208$26477 g$208$26478) (eq? (g$208$16721 g$208$26477) 'and)) g$208$26475)) '#f) (apply (lambda (g$208$26481 g$208$26482) ((lambda (g$208$26485) (lambda (g$208$26487) (for-all (lambda (g$208$26489) (g$208$26489 g$208$26487)) g$208$26485))) (map g$208$26387 g$208$26482))) g$208$26475) ((lambda (g$208$26491) ((lambda (g$208$26493) (if (if g$208$26493 (begin '#f (apply (lambda (g$208$26495 g$208$26496) (eq? (g$208$16721 g$208$26495) 'or)) g$208$26493)) '#f) (apply (lambda (g$208$26499 g$208$26500) ((lambda (g$208$26503) (lambda (g$208$26505) (exists (lambda (g$208$26507) (g$208$26507 g$208$26505)) g$208$26503))) (map g$208$26387 g$208$26500))) g$208$26493) ((lambda (g$208$26509) ((lambda (g$208$26511) (if (if g$208$26511 (begin '#f (apply (lambda (g$208$26513 g$208$26514) (eq? (g$208$16721 g$208$26513) 'not)) g$208$26511)) '#f) (apply (lambda (g$208$26517 g$208$26518) ((lambda (g$208$26521) (lambda (g$208$26523) (not (g$208$26521 g$208$26523)))) (g$208$26387 g$208$26518))) g$208$26511) ((lambda (g$208$26525) ((lambda (g$208$26527) (if (if g$208$26527 (begin '#f (apply (lambda (g$208$26529) '#t) g$208$26527)) '#f) (apply (lambda (g$208$26531) ((lambda (g$208$26533) (lambda (g$208$26535) ((letrec ((g$208$26537 (lambda (g$208$26539 g$208$26540) (if (null? g$208$26539) '#t (if (null? g$208$26540) '#f (if ((car g$208$26539) (car g$208$26540)) (begin '#f (g$208$26537 (cdr g$208$26539) (cdr g$208$26465))) '#f)))))) g$208$26537) g$208$26533 g$208$26535))) (map g$208$26385 g$208$26531))) g$208$26527) ((lambda (g$208$26543) ((lambda (g$208$26545) (if (if g$208$26545 (begin '#f (apply (lambda () '#t) g$208$26545)) '#f) (apply (lambda () (g$208$16715 'import '"invalid version spec" g$208$26381 g$208$26465)) g$208$26545) (g$208$16715 '#f '"invalid syntax" g$208$26543))) ((lambda (g$208$26547) '()) g$208$26543))) g$208$26525))) ((letrec ((g$208$26549 (lambda (g$208$26551) (if (g$208$15966 g$208$26551) ((lambda (g$208$26553) (if g$208$26553 (begin '#f ((lambda (g$208$26555) (if g$208$26555 (begin '#f (map cons g$208$26553 g$208$26555)) '#f)) (g$208$26549 (g$208$15976 g$208$26551)))) '#f)) ((lambda (g$208$26557) (list g$208$26557)) (g$208$15974 g$208$26551))) (if (g$208$15970 g$208$26551) (list (begin 'sub* '())) '#f))))) g$208$26549) g$208$26525))) g$208$26509))) ((lambda (g$208$26559) (if (g$208$15966 g$208$26559) (begin '#f ((lambda (g$208$26561) (if g$208$26561 (begin '#f ((lambda (g$208$26563) (if g$208$26563 (begin '#f (append g$208$26561 g$208$26563)) '#f)) ((lambda (g$208$26565) (if (g$208$15966 g$208$26565) (begin '#f ((lambda (g$208$26567) (if g$208$26567 (begin '#f ((lambda (g$208$26569) (if g$208$26569 (begin '#f (append g$208$26567 g$208$26569)) '#f)) ((lambda (g$208$26571) (if (equal? (g$208$16002 g$208$26571) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$26565)))) '#f)) ((lambda (g$208$26573) (list g$208$26573)) (g$208$15974 g$208$26565)))) '#f)) (g$208$15976 g$208$26559)))) '#f)) ((lambda (g$208$26575) (list g$208$26575)) (g$208$15974 g$208$26559)))) '#f)) g$208$26509))) g$208$26491))) ((lambda (g$208$26577) (if (g$208$15966 g$208$26577) (begin '#f ((lambda (g$208$26579) (if g$208$26579 (begin '#f ((lambda (g$208$26581) (if g$208$26581 (begin '#f (append g$208$26579 g$208$26581)) '#f)) ((letrec ((g$208$26583 (lambda (g$208$26585) (if (g$208$15966 g$208$26585) ((lambda (g$208$26587) (if g$208$26587 (begin '#f ((lambda (g$208$26589) (if g$208$26589 (begin '#f (map cons g$208$26587 g$208$26589)) '#f)) (g$208$26583 (g$208$15976 g$208$26585)))) '#f)) ((lambda (g$208$26591) (list g$208$26591)) (g$208$15974 g$208$26585))) (if (g$208$15970 g$208$26585) (list (begin 'ver* '())) '#f))))) g$208$26583) (g$208$15976 g$208$26577)))) '#f)) ((lambda (g$208$26593) (list g$208$26593)) (g$208$15974 g$208$26577)))) '#f)) g$208$26491))) g$208$26473))) ((lambda (g$208$26595) (if (g$208$15966 g$208$26595) (begin '#f ((lambda (g$208$26597) (if g$208$26597 (begin '#f ((lambda (g$208$26599) (if g$208$26599 (begin '#f (append g$208$26597 g$208$26599)) '#f)) ((letrec ((g$208$26601 (lambda (g$208$26603) (if (g$208$15966 g$208$26603) ((lambda (g$208$26605) (if g$208$26605 (begin '#f ((lambda (g$208$26607) (if g$208$26607 (begin '#f (map cons g$208$26605 g$208$26607)) '#f)) (g$208$26601 (g$208$15976 g$208$26603)))) '#f)) ((lambda (g$208$26609) (list g$208$26609)) (g$208$15974 g$208$26603))) (if (g$208$15970 g$208$26603) (list (begin 'ver* '())) '#f))))) g$208$26601) (g$208$15976 g$208$26595)))) '#f)) ((lambda (g$208$26611) (list g$208$26611)) (g$208$15974 g$208$26595)))) '#f)) g$208$26473))) g$208$26467))) ((lambda (g$208$26613) (if (equal? (g$208$16002 g$208$26613) '()) (begin '#f '()) '#f)) g$208$26467))) g$208$26465))) ((letrec ((g$208$26389 (lambda (g$208$26391) ((lambda (g$208$26393) ((lambda (g$208$26395) (if (if g$208$26395 (begin '#f (apply (lambda (g$208$26397) '#t) g$208$26395)) '#f) (apply (lambda (g$208$26399) (values '() (g$208$26387 g$208$26399))) g$208$26395) ((lambda (g$208$26401) ((lambda (g$208$26403) (if (if g$208$26403 (begin '#f (apply (lambda (g$208$26405 g$208$26406) (g$208$15980 g$208$26405)) g$208$26403)) '#f) (apply (lambda (g$208$26409 g$208$26410) (call-with-values (lambda () (g$208$26389 g$208$26410)) (lambda (g$208$26415 g$208$26416) ((lambda (g$208$26419 g$208$26420) (values (cons (g$208$15982 g$208$26409) g$208$26420) g$208$26419)) g$208$26416 g$208$26415)))) g$208$26403) ((lambda (g$208$26423) ((lambda (g$208$26425) (if (if g$208$26425 (begin '#f (apply (lambda () '#t) g$208$26425)) '#f) (apply (lambda () (values '() (lambda (g$208$26427) '#t))) g$208$26425) ((lambda (g$208$26429) ((lambda (g$208$26431) (if (if g$208$26431 (begin '#f (apply (lambda () '#t) g$208$26431)) '#f) (apply (lambda () (g$208$16715 '#f '"invalid import spec" g$208$26381)) g$208$26431) (g$208$16715 '#f '"invalid syntax" g$208$26429))) ((lambda (g$208$26433) '()) g$208$26429))) g$208$26423))) ((lambda (g$208$26435) (if (equal? (g$208$16002 g$208$26435) '()) (begin '#f '()) '#f)) g$208$26423))) g$208$26401))) ((lambda (g$208$26437) (if (g$208$15966 g$208$26437) (begin '#f ((lambda (g$208$26439) (if g$208$26439 (begin '#f ((lambda (g$208$26441) (if g$208$26441 (begin '#f (append g$208$26439 g$208$26441)) '#f)) ((lambda (g$208$26443) (list g$208$26443)) (g$208$15976 g$208$26437)))) '#f)) ((lambda (g$208$26445) (list g$208$26445)) (g$208$15974 g$208$26437)))) '#f)) g$208$26401))) g$208$26393))) ((lambda (g$208$26447) (if (g$208$15966 g$208$26447) (begin '#f ((lambda (g$208$26449) (if g$208$26449 (begin '#f ((lambda (g$208$26451) (if g$208$26451 (begin '#f (append g$208$26449 g$208$26451)) '#f)) ((lambda (g$208$26453) (if (equal? (g$208$16002 g$208$26453) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$26447)))) '#f)) ((letrec ((g$208$26455 (lambda (g$208$26457) (if (g$208$15966 g$208$26457) ((lambda (g$208$26459) (if g$208$26459 (begin '#f ((lambda (g$208$26461) (if g$208$26461 (begin '#f (map cons g$208$26459 g$208$26461)) '#f)) (g$208$26455 (g$208$15976 g$208$26457)))) '#f)) ((lambda (g$208$26463) (list g$208$26463)) (g$208$15974 g$208$26457))) (if (g$208$15970 g$208$26457) (list (begin 'version-spec* '())) '#f))))) g$208$26455) (g$208$15974 g$208$26447)))) '#f)) g$208$26393))) g$208$26391)))) g$208$26389) g$208$26381))) '#f '#f '#f))) (set! g$208$26049 (lambda (g$208$26075) ((lambda (g$208$26077) ((lambda (g$208$26079) (if (if g$208$26079 (begin '#f (apply (lambda (g$208$26081 g$208$26082 g$208$26083 g$208$26084) (if (eq? (g$208$16721 g$208$26081) 'rename) (if (for-all g$208$15980 g$208$26083) (begin '#f (for-all g$208$15980 g$208$26084)) '#f) '#f)) g$208$26079)) '#f) (apply (lambda (g$208$26089 g$208$26090 g$208$26091 g$208$26092) ((lambda (g$208$26097 g$208$26098 g$208$26099) ((lambda (g$208$26103) ((lambda (g$208$26105) (g$208$26037 (map cons g$208$26099 g$208$26103) g$208$26105)) (g$208$26043 g$208$26098 g$208$26097))) (g$208$26041 g$208$26098 g$208$26097))) (g$208$26049 g$208$26090) (map g$208$15982 g$208$26091) (map g$208$15982 g$208$26092))) g$208$26079) ((lambda (g$208$26107) ((lambda (g$208$26109) (if (if g$208$26109 (begin '#f (apply (lambda (g$208$26111 g$208$26112 g$208$26113) (if (eq? (g$208$16721 g$208$26111) 'except) (begin '#f (for-all g$208$15980 g$208$26113)) '#f)) g$208$26109)) '#f) (apply (lambda (g$208$26117 g$208$26118 g$208$26119) ((lambda (g$208$26123) (g$208$26043 (map g$208$15982 g$208$26119) g$208$26123)) (g$208$26049 g$208$26118))) g$208$26109) ((lambda (g$208$26125) ((lambda (g$208$26127) (if (if g$208$26127 (begin '#f (apply (lambda (g$208$26129 g$208$26130 g$208$26131) (if (eq? (g$208$16721 g$208$26129) 'only) (begin '#f (for-all g$208$15980 g$208$26131)) '#f)) g$208$26127)) '#f) (apply (lambda (g$208$26135 g$208$26136 g$208$26137) ((lambda (g$208$26141 g$208$26142) ((lambda (g$208$26145) ((lambda (g$208$26147) (map cons g$208$26145 g$208$26147)) (g$208$26041 g$208$26145 g$208$26141))) (g$208$26045 g$208$26142))) (g$208$26049 g$208$26136) (map g$208$15982 g$208$26137))) g$208$26127) ((lambda (g$208$26149) ((lambda (g$208$26151) (if (if g$208$26151 (begin '#f (apply (lambda (g$208$26153 g$208$26154 g$208$26155) (if (eq? (g$208$16721 g$208$26153) 'prefix) (begin '#f (g$208$15980 g$208$26155)) '#f)) g$208$26151)) '#f) (apply (lambda (g$208$26159 g$208$26160 g$208$26161) ((lambda (g$208$26165 g$208$26166) (map (lambda (g$208$26169) (cons (string->symbol (string-append g$208$26166 (symbol->string (car g$208$26169)))) (cdr g$208$26169))) g$208$26165)) (g$208$26049 g$208$26160) (symbol->string (g$208$15982 g$208$26161)))) g$208$26151) ((lambda (g$208$26171) ((lambda (g$208$26173) (if (if g$208$26173 (begin '#f (apply (lambda (g$208$26175 g$208$26176) (eq? (g$208$16721 g$208$26175) 'library)) g$208$26173)) '#f) (apply (lambda (g$208$26179 g$208$26180) (call-with-values (lambda () (g$208$26047 g$208$26180)) (lambda (g$208$26185 g$208$26186) ((lambda (g$208$26189 g$208$26190) (begin (if (null? g$208$26190) (g$208$16715 'import '"empty library name" g$208$26180) (void)) ((lambda (g$208$26193) (begin (if g$208$26193 (void) (g$208$16715 'import '"cannot find library with required name" g$208$26190)) (if (g$208$26189 (g$208$15477 g$208$26193)) (void) (g$208$16715 'import '"library does not satisfy version specification" g$208$26180 g$208$26193)) ((g$208$16650) g$208$26193) (g$208$15481 g$208$26193))) (g$208$15507 g$208$26190)))) g$208$26186 g$208$26185)))) g$208$26173) ((lambda (g$208$26195) ((lambda (g$208$26197) (if (if g$208$26197 (begin '#f (apply (lambda (g$208$26199 g$208$26200) (not (memq (g$208$16721 g$208$26199) '(rename except only prefix library)))) g$208$26197)) '#f) (apply (lambda (g$208$26203 g$208$26204) (g$208$26049 (list 'library (cons g$208$26203 g$208$26204)))) g$208$26197) ((lambda (g$208$26207) ((lambda (g$208$26209) (if (if g$208$26209 (begin '#f (apply (lambda (g$208$26211) '#t) g$208$26209)) '#f) (apply (lambda (g$208$26213) (g$208$16715 'import '"invalid import spec" g$208$26213)) g$208$26209) (g$208$16715 '#f '"invalid syntax" g$208$26207))) ((lambda (g$208$26215) (list g$208$26215)) g$208$26207))) g$208$26195))) ((lambda (g$208$26217) (if (g$208$15966 g$208$26217) (begin '#f ((lambda (g$208$26219) (if g$208$26219 (begin '#f ((lambda (g$208$26221) (if g$208$26221 (begin '#f (append g$208$26219 g$208$26221)) '#f)) ((letrec ((g$208$26223 (lambda (g$208$26225) (if (g$208$15966 g$208$26225) ((lambda (g$208$26227) (if g$208$26227 (begin '#f ((lambda (g$208$26229) (if g$208$26229 (begin '#f (map cons g$208$26227 g$208$26229)) '#f)) (g$208$26223 (g$208$15976 g$208$26225)))) '#f)) ((lambda (g$208$26231) (list g$208$26231)) (g$208$15974 g$208$26225))) (if (g$208$15970 g$208$26225) (list (begin 'x* '())) '#f))))) g$208$26223) (g$208$15976 g$208$26217)))) '#f)) ((lambda (g$208$26233) (list g$208$26233)) (g$208$15974 g$208$26217)))) '#f)) g$208$26195))) g$208$26171))) ((lambda (g$208$26235) (if (g$208$15966 g$208$26235) (begin '#f ((lambda (g$208$26237) (if g$208$26237 (begin '#f ((lambda (g$208$26239) (if g$208$26239 (begin '#f (append g$208$26237 g$208$26239)) '#f)) ((lambda (g$208$26241) (if (g$208$15966 g$208$26241) (begin '#f ((lambda (g$208$26243) (if g$208$26243 (begin '#f ((lambda (g$208$26245) (if g$208$26245 (begin '#f (append g$208$26243 g$208$26245)) '#f)) ((lambda (g$208$26247) (if (equal? (g$208$16002 g$208$26247) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$26241)))) '#f)) ((letrec ((g$208$26249 (lambda (g$208$26251) (if (g$208$15966 g$208$26251) ((lambda (g$208$26253) (if g$208$26253 (begin '#f ((lambda (g$208$26255) (if g$208$26255 (begin '#f (map cons g$208$26253 g$208$26255)) '#f)) (g$208$26249 (g$208$15976 g$208$26251)))) '#f)) ((lambda (g$208$26257) (list g$208$26257)) (g$208$15974 g$208$26251))) (if (g$208$15970 g$208$26251) (list (begin 'spec* '())) '#f))))) g$208$26249) (g$208$15974 g$208$26241)))) '#f)) (g$208$15976 g$208$26235)))) '#f)) ((lambda (g$208$26259) (list g$208$26259)) (g$208$15974 g$208$26235)))) '#f)) g$208$26171))) g$208$26149))) ((lambda (g$208$26261) (if (g$208$15966 g$208$26261) (begin '#f ((lambda (g$208$26263) (if g$208$26263 (begin '#f ((lambda (g$208$26265) (if g$208$26265 (begin '#f (append g$208$26263 g$208$26265)) '#f)) ((lambda (g$208$26267) (if (g$208$15966 g$208$26267) (begin '#f ((lambda (g$208$26269) (if g$208$26269 (begin '#f ((lambda (g$208$26271) (if g$208$26271 (begin '#f (append g$208$26269 g$208$26271)) '#f)) ((lambda (g$208$26273) (if (g$208$15966 g$208$26273) (begin '#f ((lambda (g$208$26275) (if g$208$26275 (begin '#f ((lambda (g$208$26277) (if g$208$26277 (begin '#f (append g$208$26275 g$208$26277)) '#f)) ((lambda (g$208$26279) (if (equal? (g$208$16002 g$208$26279) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$26273)))) '#f)) ((lambda (g$208$26281) (list g$208$26281)) (g$208$15974 g$208$26273)))) '#f)) (g$208$15976 g$208$26267)))) '#f)) ((lambda (g$208$26283) (list g$208$26283)) (g$208$15974 g$208$26267)))) '#f)) (g$208$15976 g$208$26261)))) '#f)) ((lambda (g$208$26285) (list g$208$26285)) (g$208$15974 g$208$26261)))) '#f)) g$208$26149))) g$208$26125))) ((lambda (g$208$26287) (if (g$208$15966 g$208$26287) (begin '#f ((lambda (g$208$26289) (if g$208$26289 (begin '#f ((lambda (g$208$26291) (if g$208$26291 (begin '#f (append g$208$26289 g$208$26291)) '#f)) ((lambda (g$208$26293) (if (g$208$15966 g$208$26293) (begin '#f ((lambda (g$208$26295) (if g$208$26295 (begin '#f ((lambda (g$208$26297) (if g$208$26297 (begin '#f (append g$208$26295 g$208$26297)) '#f)) ((letrec ((g$208$26299 (lambda (g$208$26301) (if (g$208$15966 g$208$26301) ((lambda (g$208$26303) (if g$208$26303 (begin '#f ((lambda (g$208$26305) (if g$208$26305 (begin '#f (map cons g$208$26303 g$208$26305)) '#f)) (g$208$26299 (g$208$15976 g$208$26301)))) '#f)) ((lambda (g$208$26307) (list g$208$26307)) (g$208$15974 g$208$26301))) (if (g$208$15970 g$208$26301) (list (begin 'sym* '())) '#f))))) g$208$26299) (g$208$15976 g$208$26293)))) '#f)) ((lambda (g$208$26309) (list g$208$26309)) (g$208$15974 g$208$26293)))) '#f)) (g$208$15976 g$208$26287)))) '#f)) ((lambda (g$208$26311) (list g$208$26311)) (g$208$15974 g$208$26287)))) '#f)) g$208$26125))) g$208$26107))) ((lambda (g$208$26313) (if (g$208$15966 g$208$26313) (begin '#f ((lambda (g$208$26315) (if g$208$26315 (begin '#f ((lambda (g$208$26317) (if g$208$26317 (begin '#f (append g$208$26315 g$208$26317)) '#f)) ((lambda (g$208$26319) (if (g$208$15966 g$208$26319) (begin '#f ((lambda (g$208$26321) (if g$208$26321 (begin '#f ((lambda (g$208$26323) (if g$208$26323 (begin '#f (append g$208$26321 g$208$26323)) '#f)) ((letrec ((g$208$26325 (lambda (g$208$26327) (if (g$208$15966 g$208$26327) ((lambda (g$208$26329) (if g$208$26329 (begin '#f ((lambda (g$208$26331) (if g$208$26331 (begin '#f (map cons g$208$26329 g$208$26331)) '#f)) (g$208$26325 (g$208$15976 g$208$26327)))) '#f)) ((lambda (g$208$26333) (list g$208$26333)) (g$208$15974 g$208$26327))) (if (g$208$15970 g$208$26327) (list (begin 'sym* '())) '#f))))) g$208$26325) (g$208$15976 g$208$26319)))) '#f)) ((lambda (g$208$26335) (list g$208$26335)) (g$208$15974 g$208$26319)))) '#f)) (g$208$15976 g$208$26313)))) '#f)) ((lambda (g$208$26337) (list g$208$26337)) (g$208$15974 g$208$26313)))) '#f)) g$208$26107))) g$208$26077))) ((lambda (g$208$26339) (if (g$208$15966 g$208$26339) (begin '#f ((lambda (g$208$26341) (if g$208$26341 (begin '#f ((lambda (g$208$26343) (if g$208$26343 (begin '#f (append g$208$26341 g$208$26343)) '#f)) ((lambda (g$208$26345) (if (g$208$15966 g$208$26345) (begin '#f ((lambda (g$208$26347) (if g$208$26347 (begin '#f ((lambda (g$208$26349) (if g$208$26349 (begin '#f (append g$208$26347 g$208$26349)) '#f)) ((letrec ((g$208$26351 (lambda (g$208$26353) (if (g$208$15966 g$208$26353) ((lambda (g$208$26355) (if g$208$26355 (begin '#f ((lambda (g$208$26357) (if g$208$26357 (begin '#f (map cons g$208$26355 g$208$26357)) '#f)) (g$208$26351 (g$208$15976 g$208$26353)))) '#f)) ((lambda (g$208$26359) (if (g$208$15966 g$208$26359) (begin '#f ((lambda (g$208$26361) (if g$208$26361 (begin '#f ((lambda (g$208$26363) (if g$208$26363 (begin '#f (append g$208$26361 g$208$26363)) '#f)) ((lambda (g$208$26365) (if (g$208$15966 g$208$26365) (begin '#f ((lambda (g$208$26367) (if g$208$26367 (begin '#f ((lambda (g$208$26369) (if g$208$26369 (begin '#f (append g$208$26367 g$208$26369)) '#f)) ((lambda (g$208$26371) (if (equal? (g$208$16002 g$208$26371) '()) (begin '#f '()) '#f)) (g$208$15976 g$208$26365)))) '#f)) ((lambda (g$208$26373) (list g$208$26373)) (g$208$15974 g$208$26365)))) '#f)) (g$208$15976 g$208$26359)))) '#f)) ((lambda (g$208$26375) (list g$208$26375)) (g$208$15974 g$208$26359)))) '#f)) (g$208$15974 g$208$26353))) (if (g$208$15970 g$208$26353) (list (begin 'old* '()) (begin 'new* '())) '#f))))) g$208$26351) (g$208$15976 g$208$26345)))) '#f)) ((lambda (g$208$26377) (list g$208$26377)) (g$208$15974 g$208$26345)))) '#f)) (g$208$15976 g$208$26339)))) '#f)) ((lambda (g$208$26379) (list g$208$26379)) (g$208$15974 g$208$26339)))) '#f)) g$208$26077))) g$208$26075))) (set! g$208$26051 (lambda (g$208$26059 g$208$26060) ((lambda (g$208$26063) (for-each (lambda (g$208$26065) ((lambda (g$208$26067 g$208$26068) ((lambda (g$208$26071) (if g$208$26071 ((lambda (g$208$26073) (if (eq? g$208$26073 g$208$26068) (void) (g$208$26035 g$208$26067))) g$208$26071) (hashtable-set! g$208$26060 g$208$26067 g$208$26068))) (hashtable-ref g$208$26060 g$208$26067 '#f))) (car g$208$26065) (cdr g$208$26065))) g$208$26063)) (g$208$26049 g$208$26059)))) ((letrec ((g$208$26053 (lambda (g$208$26055 g$208$26056) (if (null? g$208$26055) (hashtable-entries g$208$26056) (begin (g$208$26051 (car g$208$26055) g$208$26056) (g$208$26053 (cdr g$208$26055) g$208$26056)))))) g$208$26053) g$208$26033 (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$208$16642 (lambda (g$208$26887 g$208$26888) ((lambda (g$208$26891) (begin (vector-for-each (lambda (g$208$26893 g$208$26894) (g$208$15919 g$208$26891 (g$208$15956 g$208$26893 g$208$15886 '()) g$208$26894)) g$208$26887 g$208$26888) g$208$26891)) (g$208$15917)))) (set! g$208$16644 (lambda () ((lambda (g$208$26897) (lambda g$208$26901 ((lambda (g$208$26902) (if (= g$208$26902 '0) (apply (lambda () g$208$26897) g$208$26901) (if (= g$208$26902 '1) (apply (lambda (g$208$26899) (set! g$208$26897 (g$208$15879 g$208$26899 g$208$26897))) g$208$26901) (error 'apply '"invalid arg count")))) (length g$208$26901)))) '()))) (set! g$208$16646 (g$208$14926 (lambda g$208$26903 (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (g$208$26905) (begin (if (procedure? g$208$26905) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" g$208$26905)) g$208$26905)))) (set! g$208$16648 (g$208$14926 (lambda g$208$26907 (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (g$208$26909) (begin (if (procedure? g$208$26909) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" g$208$26909)) g$208$26909)))) (set! g$208$16650 (g$208$14926 (lambda g$208$26911 (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (g$208$26913) (begin (if (procedure? g$208$26913) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" g$208$26913)) g$208$26913)))) (set! g$208$16652 (lambda (g$208$26915 g$208$26916 g$208$26917) (call-with-values (lambda () (g$208$16622 g$208$26915 '() '() '() '() '() '() g$208$26916 g$208$26917)) (lambda (g$208$26928 g$208$26929 g$208$26930 g$208$26931 g$208$26932 g$208$26933 g$208$26934) ((lambda (g$208$26942 g$208$26943 g$208$26944 g$208$26945 g$208$26946 g$208$26947 g$208$26948) (values (append (apply append (reverse g$208$26943)) g$208$26948) g$208$26947 g$208$26946 (reverse g$208$26945) (reverse g$208$26944))) g$208$26934 g$208$26933 g$208$26932 g$208$26931 g$208$26930 g$208$26929 g$208$26928))))) (set! g$208$16654 (lambda (g$208$26956 g$208$26957 g$208$26958 g$208$26959) ((lambda (g$208$26964) (begin (set! g$208$26964 (g$208$16644)) ((lambda (g$208$26968 g$208$26969) ((lambda (g$208$26972) (dynamic-wind g$208$26972 (lambda () (call-with-values (lambda () (g$208$16634 g$208$26956)) (lambda (g$208$26976 g$208$26977) ((lambda (g$208$26980 g$208$26981) (call-with-values (lambda () (g$208$16640 g$208$26957)) (lambda (g$208$26986 g$208$26987) ((lambda (g$208$26990 g$208$26991) ((lambda (g$208$26994) ((lambda (g$208$26996 g$208$26997 g$208$26998) ((lambda (g$208$27006 g$208$27007 g$208$27008 g$208$27009) ((lambda (g$208$27014) (dynamic-wind g$208$27014 (lambda () (call-with-values (lambda () (g$208$16652 g$208$26996 g$208$26994 g$208$26959)) (lambda (g$208$27021 g$208$27022 g$208$27023 g$208$27024 g$208$27025) ((lambda (g$208$27031 g$208$27032 g$208$27033 g$208$27034 g$208$27035) (begin (g$208$15921 g$208$26994) ((lambda (g$208$27041) ((lambda (g$208$27043) ((lambda () (begin (g$208$15923 g$208$26994) ((lambda (g$208$27045 g$208$27046) ((lambda (g$208$27049) (begin (set! g$208$27049 '"attempt to export mutated variable") (call-with-values (lambda () (g$208$16701 g$208$27032 g$208$27045 g$208$27034)) (lambda (g$208$27054 g$208$27055 g$208$27056) ((lambda (g$208$27060 g$208$27061 g$208$27062) (begin (for-each (lambda (g$208$27066) ((lambda (g$208$27068 g$208$27069) ((lambda (g$208$27072) (if g$208$27072 ((lambda (g$208$27074) ((lambda (g$208$27076) (if (eq? g$208$27076 'mutable) (g$208$16715 'export g$208$27049 g$208$27068) (void))) (car g$208$27074))) (cdr g$208$27072)) (void))) (assq g$208$27069 g$208$27062))) (car g$208$27066) (cdr g$208$27066))) g$208$27046) ((lambda (g$208$27078 g$208$27079) (values (g$208$26964) (g$208$26997) (g$208$26998) (g$208$15863 '#f (append g$208$27079 (list g$208$27078))) g$208$27060 g$208$27046 g$208$27062)) (g$208$15866 '#f g$208$27032 g$208$27043 (g$208$16697 g$208$27061 g$208$27041)) (map g$208$15859 (map cdr g$208$27061))))) g$208$27056 g$208$27055 g$208$27054))))) '#f)) (map g$208$15892 g$208$27032) (g$208$16699 g$208$26981 g$208$26980 g$208$26994)))))) (g$208$16610 g$208$27031 g$208$27034 g$208$27033))) (g$208$16596 g$208$27035 g$208$27034 g$208$27033)))) g$208$27025 g$208$27024 g$208$27023 g$208$27022 g$208$27021)))) g$208$27014)) (lambda () (begin ((lambda (g$208$27082) (begin (g$208$27006 g$208$27008) (set! g$208$27008 g$208$27082))) (g$208$27006)) ((lambda (g$208$27084) (begin (g$208$27007 g$208$27009) (set! g$208$27009 g$208$27084))) (g$208$27007)))))) g$208$16646 g$208$16648 g$208$26997 g$208$26998)) (map (lambda (g$208$27086) (g$208$15956 g$208$27086 g$208$15886 (list g$208$26994))) g$208$26958) (g$208$16644) (g$208$16644))) (g$208$16642 g$208$26991 g$208$26990))) g$208$26987 g$208$26986)))) g$208$26977 g$208$26976)))) g$208$26972)) (lambda () ((lambda (g$208$27088) (begin (g$208$26968 g$208$26969) (set! g$208$26969 g$208$27088))) (g$208$26968))))) g$208$16650 g$208$26964))) '#f))) (set! g$208$16656 (lambda (g$208$27090) ((lambda (g$208$27094 g$208$27095) ((lambda (g$208$27098) (dynamic-wind g$208$27098 (lambda () (call-with-values (lambda () (g$208$16638 g$208$27090)) (lambda (g$208$27104 g$208$27105 g$208$27106 g$208$27107) ((lambda (g$208$27112 g$208$27113 g$208$27114 g$208$27115) (call-with-values (lambda () (g$208$16636 g$208$27115)) (lambda (g$208$27122 g$208$27123) ((lambda (g$208$27126 g$208$27127) (call-with-values (lambda () (g$208$16654 g$208$27114 g$208$27113 g$208$27112 '#f)) (lambda (g$208$27137 g$208$27138 g$208$27139 g$208$27140 g$208$27141 g$208$27142 g$208$27143) ((lambda (g$208$27151 g$208$27152 g$208$27153 g$208$27154 g$208$27155 g$208$27156 g$208$27157) (values g$208$27127 g$208$27126 g$208$27157 g$208$27156 g$208$27155 g$208$27154 g$208$27153 g$208$27152 g$208$27151)) g$208$27143 g$208$27142 g$208$27141 g$208$27140 g$208$27139 g$208$27138 g$208$27137)))) g$208$27123 g$208$27122)))) g$208$27107 g$208$27106 g$208$27105 g$208$27104)))) g$208$27098)) (lambda () ((lambda (g$208$27165) (begin (g$208$27094 g$208$27095) (set! g$208$27095 g$208$27165))) (g$208$27094))))) g$208$16725 '#f))) (set! g$208$16658 (lambda (g$208$27167) ((lambda (g$208$27169) ((lambda (g$208$27171) (if (if g$208$27171 (begin '#f (apply (lambda (g$208$27173 g$208$27174 g$208$27175) (eq? (g$208$16721 g$208$27173) 'import)) g$208$27171)) '#f) (apply (lambda (g$208$27179 g$208$27180 g$208$27181) (values g$208$27180 g$208$27181)) g$208$27171) ((lambda (g$208$27185) ((lambda (g$208$27187) (if (if g$208$27187 (begin '#f (apply (lambda (g$208$27189 g$208$27190 g$208$27191) (eq? (g$208$16721 g$208$27189) 'import)) g$208$27187)) '#f) (apply (lambda (g$208$27195 g$208$27196 g$208$27197) (g$208$16715 'expander '"invalid syntax of top-level program" (g$208$15974 g$208$27167))) g$208$27187) ((lambda (g$208$27201) ((lambda (g$208$27203) (if (if g$208$27203 (begin '#f (apply (lambda () '#t) g$208$27203)) '#f) (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) g$208$27203) (g$208$16715 '#f '"invalid syntax" g$208$27201))) ((lambda (g$208$27205) '()) g$208$27201))) g$208$27185))) ((lambda (g$208$27207) (if (g$208$15966 g$208$27207) (begin '#f ((lambda (g$208$27209) (if g$208$27209 (begin '#f ((lambda (g$208$27211) (if g$208$27211 (begin '#f (append g$208$27209 g$208$27211)) '#f)) ((lambda (g$208$27213) (list g$208$27213)) (g$208$15976 g$208$27207)))) '#f)) ((lambda (g$208$27215) (if (g$208$15966 g$208$27215) (begin '#f ((lambda (g$208$27217) (if g$208$27217 (begin '#f ((lambda (g$208$27219) (if g$208$27219 (begin '#f (append g$208$27217 g$208$27219)) '#f)) ((lambda (g$208$27221) (list g$208$27221)) (g$208$15976 g$208$27215)))) '#f)) ((lambda (g$208$27223) (list g$208$27223)) (g$208$15974 g$208$27215)))) '#f)) (g$208$15974 g$208$27207)))) '#f)) g$208$27185))) g$208$27169))) ((lambda (g$208$27225) (if (g$208$15966 g$208$27225) (begin '#f ((lambda (g$208$27227) (if g$208$27227 (begin '#f ((lambda (g$208$27229) (if g$208$27229 (begin '#f (append g$208$27227 g$208$27229)) '#f)) ((letrec ((g$208$27231 (lambda (g$208$27233) (if (g$208$15966 g$208$27233) ((lambda (g$208$27235) (if g$208$27235 (begin '#f ((lambda (g$208$27237) (if g$208$27237 (begin '#f (map cons g$208$27235 g$208$27237)) '#f)) (g$208$27231 (g$208$15976 g$208$27233)))) '#f)) ((lambda (g$208$27239) (list g$208$27239)) (g$208$15974 g$208$27233))) (if (g$208$15970 g$208$27233) (list (begin 'b* '())) '#f))))) g$208$27231) (g$208$15976 g$208$27225)))) '#f)) ((lambda (g$208$27241) (if (g$208$15966 g$208$27241) (begin '#f ((lambda (g$208$27243) (if g$208$27243 (begin '#f ((lambda (g$208$27245) (if g$208$27245 (begin '#f (append g$208$27243 g$208$27245)) '#f)) ((letrec ((g$208$27247 (lambda (g$208$27249) (if (g$208$15966 g$208$27249) ((lambda (g$208$27251) (if g$208$27251 (begin '#f ((lambda (g$208$27253) (if g$208$27253 (begin '#f (map cons g$208$27251 g$208$27253)) '#f)) (g$208$27247 (g$208$15976 g$208$27249)))) '#f)) ((lambda (g$208$27255) (list g$208$27255)) (g$208$15974 g$208$27249))) (if (g$208$15970 g$208$27249) (list (begin 'imp* '())) '#f))))) g$208$27247) (g$208$15976 g$208$27241)))) '#f)) ((lambda (g$208$27257) (list g$208$27257)) (g$208$15974 g$208$27241)))) '#f)) (g$208$15974 g$208$27225)))) '#f)) g$208$27169))) g$208$27167))) (set! g$208$16660 (lambda (g$208$27259) (call-with-values (lambda () (g$208$16658 g$208$27259)) (lambda (g$208$27263 g$208$27264) ((lambda (g$208$27267 g$208$27268) (call-with-values (lambda () (g$208$16654 '() g$208$27268 g$208$27267 '#t)) (lambda (g$208$27278 g$208$27279 g$208$27280 g$208$27281 g$208$27282 g$208$27283 g$208$27284) ((lambda (g$208$27292 g$208$27293 g$208$27294 g$208$27295 g$208$27296 g$208$27297 g$208$27298) (values g$208$27297 g$208$27295)) g$208$27284 g$208$27283 g$208$27282 g$208$27281 g$208$27280 g$208$27279 g$208$27278)))) g$208$27264 g$208$27263))))) (set! g$208$16663 (lambda (g$208$27306 g$208$27307 g$208$27308) (vector 'g$208$16662 g$208$27306 g$208$27307 g$208$27308))) (set! g$208$16665 (lambda (g$208$27312) (if (vector? g$208$27312) (if (= (vector-length g$208$27312) (+ '1 (length '(names labels itc)))) (begin '#f (eq? (vector-ref g$208$27312 '0) 'g$208$16662)) '#f) '#f))) (set! g$208$16667 (lambda (g$208$27314) (if (g$208$16665 g$208$27314) (vector-ref g$208$27314 '1) (error 'env-names '"~s is not of type ~s" g$208$27314 'env)))) (set! g$208$16669 (lambda (g$208$27316) (if (g$208$16665 g$208$27316) (vector-ref g$208$27316 '2) (error 'env-labels '"~s is not of type ~s" g$208$27316 'env)))) (set! g$208$16671 (lambda (g$208$27318) (if (g$208$16665 g$208$27318) (vector-ref g$208$27318 '3) (error 'env-itc '"~s is not of type ~s" g$208$27318 'env)))) (set! g$208$16673 (lambda (g$208$27320 g$208$27321) (if (g$208$16665 g$208$27320) (vector-set! g$208$27320 '1 g$208$27321) (error 'set-env-names! '"~s is not of type ~s" g$208$27320 'env)))) (set! g$208$16675 (lambda (g$208$27324 g$208$27325) (if (g$208$16665 g$208$27324) (vector-set! g$208$27324 '2 g$208$27325) (error 'set-env-labels! '"~s is not of type ~s" g$208$27324 'env)))) (set! g$208$16677 (lambda (g$208$27328 g$208$27329) (if (g$208$16665 g$208$27328) (vector-set! g$208$27328 '3 g$208$27329) (error 'set-env-itc! '"~s is not of type ~s" g$208$27328 'env)))) (set! g$208$16679 (lambda (g$208$27332) (g$208$16665 g$208$27332))) (set! g$208$16681 (lambda g$208$27334 ((lambda (g$208$27336) ((lambda (g$208$27340 g$208$27341) ((lambda (g$208$27344) (dynamic-wind g$208$27344 (lambda () (call-with-values (lambda () (g$208$16640 g$208$27334)) (lambda (g$208$27348 g$208$27349) ((lambda (g$208$27352 g$208$27353) (g$208$16663 g$208$27353 g$208$27352 g$208$27336)) g$208$27349 g$208$27348)))) g$208$27344)) (lambda () ((lambda (g$208$27356) (begin (g$208$27340 g$208$27341) (set! g$208$27341 g$208$27356))) (g$208$27340))))) g$208$16650 g$208$27336)) (g$208$16644)))) (set! g$208$16683 (lambda (g$208$27358) (begin (if (eqv? g$208$27358 '5) (void) (assertion-violation 'null-environment '"not 5" g$208$27358)) (g$208$16681 '(psyntax null-environment-5))))) (set! g$208$16685 (lambda (g$208$27360) (begin (if (eqv? g$208$27360 '5) (void) (assertion-violation 'scheme-report-environment '"not 5" g$208$27360)) (g$208$16681 '(psyntax scheme-report-environment-5))))) (set! g$208$16687 (lambda (g$208$27362 g$208$27363) (begin (if (g$208$16665 g$208$27363) (void) (assertion-violation 'expand '"not an environment" g$208$27363)) ((lambda (g$208$27366) ((lambda (g$208$27368 g$208$27369 g$208$27370 g$208$27371) ((lambda (g$208$27376) (begin (g$208$15921 g$208$27366) (values g$208$27376 (g$208$27370)))) ((lambda (g$208$27384 g$208$27385 g$208$27386 g$208$27387 g$208$27388 g$208$27389) ((lambda (g$208$27396) (dynamic-wind g$208$27396 (lambda () (g$208$16600 g$208$27368 '() '())) g$208$27396)) (lambda () (begin ((lambda (g$208$27398) (begin (g$208$27384 g$208$27387) (set! g$208$27387 g$208$27398))) (g$208$27384)) ((lambda (g$208$27400) (begin (g$208$27385 g$208$27388) (set! g$208$27388 g$208$27400))) (g$208$27385)) ((lambda (g$208$27402) (begin (g$208$27386 g$208$27389) (set! g$208$27389 g$208$27402))) (g$208$27386)))))) g$208$16646 g$208$16648 g$208$16650 g$208$27370 g$208$27371 g$208$27369))) (g$208$15956 g$208$27362 g$208$15886 (list g$208$27366)) (g$208$16671 g$208$27363) (g$208$16644) (g$208$16644))) (g$208$16642 (g$208$16667 g$208$27363) (g$208$16669 g$208$27363)))))) (set! g$208$16689 (lambda (g$208$27404 g$208$27405) (begin (if (g$208$16665 g$208$27405) (void) (assertion-violation 'eval '"not an environment" g$208$27405)) (call-with-values (lambda () (g$208$16687 g$208$27404 g$208$27405)) (lambda (g$208$27410 g$208$27411) ((lambda (g$208$27414 g$208$27415) (begin (for-each g$208$15516 g$208$27414) (eval-core (g$208$15006 g$208$27415)))) g$208$27411 g$208$27410)))))) (set! g$208$16691 (lambda (g$208$27418) ((lambda (g$208$27420 g$208$27422) (begin (set! g$208$27420 (lambda (g$208$27489) (if (null? g$208$27489) (g$208$15864) (g$208$15863 '#f (map (lambda (g$208$27491) ((lambda (g$208$27493 g$208$27494) (list 'set! g$208$27493 g$208$27494)) (car g$208$27491) (cddr g$208$27491))) g$208$27489))))) (set! g$208$27422 (lambda (g$208$27481) (for-each (lambda (g$208$27483) ((lambda (g$208$27485 g$208$27486) (set-symbol-value! g$208$27485 g$208$27486)) (car g$208$27483) (cadr g$208$27483))) g$208$27481))) (call-with-values (lambda () (g$208$16656 g$208$27418)) (lambda (g$208$27433 g$208$27434 g$208$27435 g$208$27436 g$208$27437 g$208$27438 g$208$27439 g$208$27440 g$208$27441) ((lambda (g$208$27451 g$208$27452 g$208$27453 g$208$27454 g$208$27455 g$208$27456 g$208$27457 g$208$27458 g$208$27459) ((lambda (g$208$27469 g$208$27470 g$208$27471 g$208$27472 g$208$27473 g$208$27474) (begin (g$208$15512 g$208$27469 g$208$27470 g$208$27471 g$208$27472 g$208$27473 g$208$27474 g$208$27452 g$208$27451 (lambda () (g$208$27422 g$208$27453)) (lambda () (eval-core (g$208$15006 g$208$27454))) '#t) (values g$208$27454 (g$208$27420 g$208$27453) g$208$27452 g$208$27451))) (gensym) g$208$27459 g$208$27458 (map g$208$15521 g$208$27457) (map g$208$15521 g$208$27455) (map g$208$15521 g$208$27456))) g$208$27441 g$208$27440 g$208$27439 g$208$27438 g$208$27437 g$208$27436 g$208$27435 g$208$27434 g$208$27433))))) '#f '#f))) (set! g$208$16693 (lambda (g$208$27497) (call-with-values (lambda () (g$208$16691 g$208$27497)) (lambda (g$208$27503 g$208$27504 g$208$27505 g$208$27506) ((lambda (g$208$27511 g$208$27512 g$208$27513 g$208$27514) (values g$208$27514 g$208$27512 g$208$27511)) g$208$27506 g$208$27505 g$208$27504 g$208$27503))))) (set! g$208$16695 (lambda (g$208$27519 g$208$27520 g$208$27521) (if (null? g$208$27520) g$208$27521 (g$208$16695 g$208$27519 (cdr g$208$27520) (cons (g$208$27519 (car g$208$27520)) g$208$27521))))) (set! g$208$16697 (lambda (g$208$27525 g$208$27526) (g$208$15863 '#f (cons (g$208$15864) (g$208$16695 (lambda (g$208$27529) (list 'set! (cdr g$208$27529) (car g$208$27529))) g$208$27525 g$208$27526))))) (set! g$208$16699 (lambda (g$208$27531 g$208$27532 g$208$27533) (map (lambda (g$208$27537 g$208$27538) ((lambda (g$208$27541) ((lambda (g$208$27543) ((lambda () (begin (if g$208$27543 (void) (g$208$16715 '#f '"cannot export unbound identifier" g$208$27541)) (cons g$208$27538 g$208$27543))))) (g$208$16004 g$208$27541))) (g$208$15956 g$208$27537 g$208$15886 (list g$208$27533)))) g$208$27531 g$208$27532))) (set! g$208$16701 (lambda (g$208$27545 g$208$27546 g$208$27547) ((lambda (g$208$27551) (begin (set! g$208$27551 (lambda (g$208$27580) ((letrec ((g$208$27582 (lambda (g$208$27584 g$208$27585 g$208$27586) (if (pair? g$208$27585) (if (eq? g$208$27584 (car g$208$27585)) (car g$208$27586) (g$208$27582 g$208$27584 (cdr g$208$27585) (cdr g$208$27586))) (assertion-violation 'lookup-make-export '"BUG"))))) g$208$27582) g$208$27580 g$208$27545 g$208$27546))) ((letrec ((g$208$27553 (lambda (g$208$27555 g$208$27556 g$208$27557 g$208$27558) (if (null? g$208$27555) (values g$208$27556 g$208$27557 g$208$27558) ((lambda (g$208$27563) ((lambda (g$208$27565 g$208$27566) ((lambda (g$208$27569) (if (memv g$208$27569 '(lexical)) ((lambda (g$208$27574) ((lambda (g$208$27576 g$208$27577) (g$208$27553 (cdr g$208$27555) (cons (cons* g$208$27565 g$208$27577 g$208$27576) g$208$27556) (cons (cons (g$208$16468 g$208$27574) g$208$27576) g$208$27557) g$208$27558)) (g$208$27551 (g$208$16468 g$208$27574)) (if (g$208$16470 g$208$27574) 'mutable 'global))) (g$208$16012 g$208$27566)) (if (memv g$208$27569 '(local-macro)) ((lambda (g$208$27572) (g$208$27553 (cdr g$208$27555) (cons (cons* g$208$27565 'global-macro g$208$27572) g$208$27556) g$208$27557 (cons (cons g$208$27572 (g$208$16012 g$208$27566)) g$208$27558))) (gensym)) (if (memv g$208$27569 '(local-macro!)) ((lambda (g$208$27570) (g$208$27553 (cdr g$208$27555) (cons (cons* g$208$27565 'global-macro! g$208$27570) g$208$27556) g$208$27557 (cons (cons g$208$27570 (g$208$16012 g$208$27566)) g$208$27558))) (gensym)) (if (memv g$208$27569 '($rtd $module)) (g$208$27553 (cdr g$208$27555) (cons g$208$27563 g$208$27556) g$208$27557 g$208$27558) (assertion-violation 'expander '"BUG: do not know how to export" (g$208$16010 g$208$27566) (g$208$16012 g$208$27566))))))) (g$208$16010 g$208$27566))) (car g$208$27563) (cdr g$208$27563))) (car g$208$27555)))))) g$208$27553) g$208$27547 '() '() '()))) '#f))) (set! g$208$16703 (lambda (g$208$27590) ((lambda (g$208$27592) ((lambda (g$208$27594) (if (if g$208$27594 (begin '#f (apply (lambda (g$208$27596) '#t) g$208$27594)) '#f) (apply (lambda (g$208$27598) (map (lambda (g$208$27600) (g$208$15930 ((lambda (g$208$27602) (if ((lambda (g$208$27604) (if g$208$27604 g$208$27604 (begin '#f (string? g$208$27602)))) (symbol? g$208$27602)) (gensym g$208$27602) (gensym 't))) (g$208$16721 g$208$27600)) g$208$15886 '())) g$208$27598)) g$208$27594) ((lambda (g$208$27606) ((lambda (g$208$27608) (if (if g$208$27608 (begin '#f (apply (lambda () '#t) g$208$27608)) '#f) (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) g$208$27608) (g$208$16715 '#f '"invalid syntax" g$208$27606))) ((lambda (g$208$27610) '()) g$208$27606))) g$208$27592))) ((letrec ((g$208$27612 (lambda (g$208$27614) (if (g$208$15966 g$208$27614) ((lambda (g$208$27616) (if g$208$27616 (begin '#f ((lambda (g$208$27618) (if g$208$27618 (begin '#f (map cons g$208$27616 g$208$27618)) '#f)) (g$208$27612 (g$208$15976 g$208$27614)))) '#f)) ((lambda (g$208$27620) (list g$208$27620)) (g$208$15974 g$208$27614))) (if (g$208$15970 g$208$27614) (list (begin 'ls '())) '#f))))) g$208$27612) g$208$27592))) g$208$27590))) (set! g$208$16705 (lambda (g$208$27622 g$208$27623) (if (g$208$15980 g$208$27622) (if (g$208$15980 g$208$27623) (g$208$15988 g$208$27622 g$208$27623) (assertion-violation 'free-identifier=? '"not an identifier" g$208$27623)) (assertion-violation 'free-identifier=? '"not an identifier" g$208$27622)))) (set! g$208$16707 (lambda (g$208$27626 g$208$27627) (if (g$208$15980 g$208$27626) (if (g$208$15980 g$208$27627) (g$208$15986 g$208$27626 g$208$27627) (assertion-violation 'bound-identifier=? '"not an identifier" g$208$27627)) (assertion-violation 'bound-identifier=? '"not an identifier" g$208$27626)))) (set! g$208$16709 (lambda (g$208$27630) (if (g$208$15932 g$208$27630) ((lambda (g$208$27632) (if (g$208$14922 g$208$27632) ((lambda (g$208$27634) (if (pair? g$208$27634) (condition) (condition))) (g$208$14924 g$208$27632)) (condition))) (g$208$15934 g$208$27630)) (condition)))) (set! g$208$16711 (lambda (g$208$27636 . g$208$27638) (begin (if (for-all string? g$208$27638) (void) (assertion-violation 'syntax-error '"invalid argument" g$208$27638)) (raise (condition (make-message-condition (if (null? g$208$27638) '"invalid syntax" (apply string-append g$208$27638))) (make-syntax-violation (g$208$16721 g$208$27636) '#f) (g$208$16709 g$208$27636)))))) (set! g$208$16713 (lambda (g$208$27640 g$208$27641 g$208$27642 g$208$27643) (begin (if (string? g$208$27641) (void) (assertion-violation 'syntax-violation '"message is not a string" g$208$27641)) ((lambda (g$208$27648) (raise (condition (if g$208$27648 (make-who-condition g$208$27648) (condition)) (make-message-condition g$208$27641) g$208$27643 (g$208$16709 g$208$27642)))) (if ((lambda (g$208$27650) (if g$208$27650 g$208$27650 (begin '#f (symbol? g$208$27640)))) (string? g$208$27640)) g$208$27640 (if (not g$208$27640) ((lambda (g$208$27652) ((lambda (g$208$27654) (if (if g$208$27654 (begin '#f (apply (lambda (g$208$27656) (g$208$15980 g$208$27656)) g$208$27654)) '#f) (apply (lambda (g$208$27658) (g$208$16721 g$208$27658)) g$208$27654) ((lambda (g$208$27660) ((lambda (g$208$27662) (if (if g$208$27662 (begin '#f (apply (lambda (g$208$27664 g$208$27665) (g$208$15980 g$208$27664)) g$208$27662)) '#f) (apply (lambda (g$208$27668 g$208$27669) (g$208$16721 g$208$27668)) g$208$27662) ((lambda (g$208$27672) ((lambda (g$208$27674) (if (if g$208$27674 (begin '#f (apply (lambda () '#t) g$208$27674)) '#f) (apply (lambda () '#f) g$208$27674) (g$208$16715 '#f '"invalid syntax" g$208$27672))) ((lambda (g$208$27676) '()) g$208$27672))) g$208$27660))) ((lambda (g$208$27678) (if (g$208$15966 g$208$27678) (begin '#f ((lambda (g$208$27680) (if g$208$27680 (begin '#f ((lambda (g$208$27682) (if g$208$27682 (begin '#f (append g$208$27680 g$208$27682)) '#f)) ((lambda (g$208$27684) (list g$208$27684)) (g$208$15976 g$208$27678)))) '#f)) ((lambda (g$208$27686) (list g$208$27686)) (g$208$15974 g$208$27678)))) '#f)) g$208$27660))) g$208$27652))) ((lambda (g$208$27688) (list g$208$27688)) g$208$27652))) g$208$27642) (assertion-violation 'syntax-violation '"invalid who argument" g$208$27640))))))) (set! g$208$16715 (lambda g$208$27704 ((lambda (g$208$27705) (if (= g$208$27705 '3) (apply (lambda (g$208$27690 g$208$27691 g$208$27692) (g$208$16715 g$208$27690 g$208$27691 g$208$27692 '#f)) g$208$27704) (if (= g$208$27705 '4) (apply (lambda (g$208$27696 g$208$27697 g$208$27698 g$208$27699) (g$208$16713 g$208$27696 g$208$27697 g$208$27698 (make-syntax-violation (g$208$16721 g$208$27698) (g$208$16721 g$208$27699)))) g$208$27704) (error 'apply '"invalid arg count")))) (length g$208$27704)))) (set! g$208$16717 (lambda (g$208$27706) (g$208$15980 g$208$27706))) (set! g$208$16719 (lambda (g$208$27708 g$208$27709) (if (g$208$15980 g$208$27708) (g$208$15946 g$208$27708 g$208$27709) (assertion-violation 'datum->syntax '"not an identifier" g$208$27708)))) (set! g$208$16721 (lambda (g$208$27712) (g$208$16002 g$208$27712))) (set! g$208$16723 (lambda (g$208$27714) (call-with-values (lambda () (g$208$16660 g$208$27714)) (lambda (g$208$27718 g$208$27719) ((lambda (g$208$27722 g$208$27723) (begin (for-each g$208$15516 g$208$27723) (eval-core (g$208$15006 g$208$27722)))) g$208$27719 g$208$27718))))) (set! g$208$16725 (g$208$14926 '#f)) (set! g$208$16727 (lambda (g$208$27726) ((lambda (g$208$27728) (if g$208$27728 ((lambda (g$208$27730) ((lambda (g$208$27732) (if g$208$27732 (cdr g$208$27732) ((lambda (g$208$27734) ((lambda (g$208$27736) (if g$208$27736 ((lambda (g$208$27738) ((lambda (g$208$27740) (begin (g$208$15513 g$208$27730 g$208$27726 g$208$27740) g$208$27740)) (cdr g$208$27738))) g$208$27736) ((lambda (g$208$27742) (begin (g$208$15513 g$208$27730 g$208$27726 g$208$27742) (g$208$15514 g$208$27730 g$208$27742 (cons 'global (cons g$208$27730 (g$208$15892 g$208$27726)))) g$208$27742)) (g$208$15894 g$208$27726)))) (assq g$208$27726 g$208$27734))) (if (g$208$15508 '(ironscheme)) (g$208$15481 (g$208$15507 '(ironscheme))) '())))) (assq g$208$27726 (g$208$15481 g$208$27730)))) g$208$27728) '#f)) (g$208$16725)))) (set! g$208$16729 (lambda (g$208$27744) ((lambda (g$208$27746) (begin (set! g$208$27746 (lambda (g$208$27790) ((lambda (g$208$27792 g$208$27793) (if g$208$27792 (set-symbol-value! g$208$27792 ((lambda (g$208$27796) (eval-core (g$208$15006 (list (g$208$15860 '#f (list g$208$27796) g$208$27796) g$208$27793)))) (gensym g$208$27792))) (eval-core (g$208$15006 g$208$27793)))) (car g$208$27790) (cdr g$208$27790)))) ((lambda (g$208$27748 g$208$27749 g$208$27750) ((lambda (g$208$27754) (begin (for-each g$208$15516 (g$208$27748)) (if (null? g$208$27754) (void) (begin (for-each g$208$27746 (reverse (cdr g$208$27754))) (g$208$27746 (car g$208$27754)))))) ((lambda (g$208$27764 g$208$27765 g$208$27766 g$208$27767 g$208$27768 g$208$27769 g$208$27770 g$208$27771) ((lambda (g$208$27780) (dynamic-wind g$208$27780 (lambda () (g$208$16630 (list (g$208$15956 g$208$27744 g$208$15886 '())) '())) g$208$27780)) (lambda () (begin ((lambda (g$208$27782) (begin (g$208$27764 g$208$27768) (set! g$208$27768 g$208$27782))) (g$208$27764)) ((lambda (g$208$27784) (begin (g$208$27765 g$208$27769) (set! g$208$27769 g$208$27784))) (g$208$27765)) ((lambda (g$208$27786) (begin (g$208$27766 g$208$27770) (set! g$208$27770 g$208$27786))) (g$208$27766)) ((lambda (g$208$27788) (begin (g$208$27767 g$208$27771) (set! g$208$27771 g$208$27788))) (g$208$27767)))))) g$208$16646 g$208$16648 g$208$16650 g$208$16725 g$208$27748 g$208$27750 g$208$27749 (g$208$15507 '(ironscheme interaction))))) (g$208$16644) (g$208$16644) (g$208$16644)))) '#f))) (begin (set! g$208$28001 g$208$16729) (set! g$208$28000 g$208$16727) (set! g$208$27999 g$208$16725) (set! g$208$27998 g$208$16723) (set! g$208$27997 g$208$16721) (set! g$208$27996 g$208$16719) (set! g$208$27995 g$208$16717) (set! g$208$27994 g$208$16715) (set! g$208$27993 g$208$16713) (set! g$208$27992 g$208$16711) (set! g$208$27991 g$208$16709) (set! g$208$27990 g$208$16707) (set! g$208$27989 g$208$16705) (set! g$208$27988 g$208$16703) (set! g$208$27987 g$208$16701) (set! g$208$27986 g$208$16699) (set! g$208$27985 g$208$16697) (set! g$208$27984 g$208$16695) (set! g$208$27983 g$208$16693) (set! g$208$27982 g$208$16691) (set! g$208$27981 g$208$16689) (set! g$208$27980 g$208$16687) (set! g$208$27979 g$208$16685) (set! g$208$27978 g$208$16683) (set! g$208$27977 g$208$16681) (set! g$208$27976 g$208$16679) (set! g$208$27975 g$208$16677) (set! g$208$27974 g$208$16675) (set! g$208$27973 g$208$16673) (set! g$208$27972 g$208$16671) (set! g$208$27971 g$208$16669) (set! g$208$27970 g$208$16667) (set! g$208$27969 g$208$16665) (set! g$208$27968 g$208$16663) (set! g$208$27967 g$208$16660) (set! g$208$27966 g$208$16658) (set! g$208$27965 g$208$16656) (set! g$208$27964 g$208$16654) (set! g$208$27963 g$208$16652) (set! g$208$27962 g$208$16650) (set! g$208$27961 g$208$16648) (set! g$208$27960 g$208$16646) (set! g$208$27959 g$208$16644) (set! g$208$27958 g$208$16642) (set! g$208$27957 g$208$16640) (set! g$208$27956 g$208$16638) (set! g$208$27955 g$208$16636) (set! g$208$27954 g$208$16634) (set! g$208$27953 g$208$16632) (set! g$208$27952 g$208$16630) (set! g$208$27951 g$208$16628) (set! g$208$27950 g$208$16626) (set! g$208$27949 g$208$16624) (set! g$208$27948 g$208$16622) (set! g$208$27947 g$208$16620) (set! g$208$27946 g$208$16618) (set! g$208$27945 g$208$16616) (set! g$208$27944 g$208$16614) (set! g$208$27943 g$208$16612) (set! g$208$27942 g$208$16610) (set! g$208$27941 g$208$16608) (set! g$208$27940 g$208$16606) (set! g$208$27939 g$208$16604) (set! g$208$27938 g$208$16602) (set! g$208$27937 g$208$16600) (set! g$208$27936 g$208$16598) (set! g$208$27935 g$208$16596) (set! g$208$27934 g$208$16594) (set! g$208$27933 g$208$16592) (set! g$208$27932 g$208$16590) (set! g$208$27931 g$208$16588) (set! g$208$27930 g$208$16586) (set! g$208$27929 g$208$16584) (set! g$208$27928 g$208$16582) (set! g$208$27927 g$208$16580) (set! g$208$27926 g$208$16578) (set! g$208$27925 g$208$16576) (set! g$208$27924 g$208$16574) (set! g$208$27923 g$208$16572) (set! g$208$27922 g$208$16570) (set! g$208$27921 g$208$16568) (set! g$208$27920 g$208$16566) (set! g$208$27919 g$208$16564) (set! g$208$27918 g$208$16562) (set! g$208$27917 g$208$16560) (set! g$208$27916 g$208$16558) (set! g$208$27915 g$208$16556) (set! g$208$27914 g$208$16554) (set! g$208$27913 g$208$16552) (set! g$208$27912 g$208$16550) (set! g$208$27911 g$208$16548) (set! g$208$27910 g$208$16546) (set! g$208$27909 g$208$16544) (set! g$208$27908 g$208$16542) (set! g$208$27907 g$208$16540) (set! g$208$27906 g$208$16538) (set! g$208$27905 g$208$16536) (set! g$208$27904 g$208$16534) (set! g$208$27903 g$208$16532) (set! g$208$27902 g$208$16530) (set! g$208$27901 g$208$16528) (set! g$208$27900 g$208$16526) (set! g$208$27899 g$208$16524) (set! g$208$27898 g$208$16522) (set! g$208$27897 g$208$16520) (set! g$208$27896 g$208$16518) (set! g$208$27895 g$208$16516) (set! g$208$27894 g$208$16514) (set! g$208$27893 g$208$16512) (set! g$208$27892 g$208$16510) (set! g$208$27891 g$208$16508) (set! g$208$27890 g$208$16506) (set! g$208$27889 g$208$16504) (set! g$208$27888 g$208$16502) (set! g$208$27887 g$208$16500) (set! g$208$27886 g$208$16498) (set! g$208$27885 g$208$16496) (set! g$208$27884 g$208$16494) (set! g$208$27883 g$208$16492) (set! g$208$27882 g$208$16490) (set! g$208$27881 g$208$16488) (set! g$208$27880 g$208$16486) (set! g$208$27879 g$208$16484) (set! g$208$27878 g$208$16482) (set! g$208$27877 g$208$16480) (set! g$208$27876 g$208$16478) (set! g$208$27875 g$208$16476) (set! g$208$27874 g$208$16474) (set! g$208$27873 g$208$16472) (set! g$208$27872 g$208$16470) (set! g$208$27871 g$208$16468) (set! g$208$27870 g$208$16466) (set! g$208$27869 g$208$16464) (set! g$208$27868 g$208$16462) (set! g$208$27867 g$208$16043) (set! g$208$27866 g$208$16041) (set! g$208$27865 g$208$16039) (set! g$208$27864 g$208$16016) (set! g$208$27863 g$208$16014) (set! g$208$27862 g$208$16012) (set! g$208$27861 g$208$16010) (set! g$208$27860 g$208$16008) (set! g$208$27859 g$208$16006) (set! g$208$27858 g$208$16004) (set! g$208$27857 g$208$16002) (set! g$208$27856 g$208$16000) (set! g$208$27855 g$208$15998) (set! g$208$27854 g$208$15996) (set! g$208$27853 g$208$15994) (set! g$208$27852 g$208$15992) (set! g$208$27851 g$208$15990) (set! g$208$27850 g$208$15988) (set! g$208$27849 g$208$15986) (set! g$208$27848 g$208$15984) (set! g$208$27847 g$208$15982) (set! g$208$27846 g$208$15980) (set! g$208$27845 g$208$15978) (set! g$208$27844 g$208$15976) (set! g$208$27843 g$208$15974) (set! g$208$27842 g$208$15972) (set! g$208$27841 g$208$15970) (set! g$208$27840 g$208$15968) (set! g$208$27839 g$208$15966) (set! g$208$27838 g$208$15964) (set! g$208$27837 g$208$15962) (set! g$208$27836 g$208$15960) (set! g$208$27835 g$208$15958) (set! g$208$27834 g$208$15956) (set! g$208$27833 g$208$15954) (set! g$208$27832 g$208$15952) (set! g$208$27831 g$208$15950) (set! g$208$27830 g$208$15948) (set! g$208$27829 g$208$15946) (set! g$208$27828 g$208$15944) (set! g$208$27827 g$208$15942) (set! g$208$27826 g$208$15940) (set! g$208$27825 g$208$15938) (set! g$208$27824 g$208$15936) (set! g$208$27823 g$208$15934) (set! g$208$27822 g$208$15932) (set! g$208$27821 g$208$15930) (set! g$208$27820 g$208$15927) (set! g$208$27819 g$208$15925) (set! g$208$27818 g$208$15923) (set! g$208$27817 g$208$15921) (set! g$208$27816 g$208$15919) (set! g$208$27815 g$208$15917) (set! g$208$27814 g$208$15915) (set! g$208$27813 g$208$15913) (set! g$208$27812 g$208$15911) (set! g$208$27811 g$208$15909) (set! g$208$27810 g$208$15907) (set! g$208$27809 g$208$15905) (set! g$208$27808 g$208$15903) (set! g$208$27807 g$208$15901) (set! g$208$27806 g$208$15899) (set! g$208$27805 g$208$15897) (set! g$208$27804 g$208$15894) (set! g$208$27803 g$208$15892) (set! g$208$27802 g$208$15890) (set! g$208$27801 g$208$15888) (set! g$208$27800 g$208$15886) (set! g$208$27799 g$208$15881) (set! g$208$27798 g$208$15879) (g$208$15503 g$208$16691)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (g$208$15002 (lambda (g$208$28764) ((lambda (g$208$28766) (if g$208$28766 (cdr g$208$28766) '#f)) (assq g$208$28764 '((syntax-error . g$208$27992) (syntax-dispatch . g$208$27923) (load . g$208$28022) (make-variable-transformer . g$208$27866) (identifier? . g$208$27995) (generate-temporaries . g$208$27988) (free-identifier=? . g$208$27989) (syntax->datum . g$208$27997) (datum->syntax . g$208$27996) (bound-identifier=? . g$208$27990) (scheme-report-environment . g$208$27979) (null-environment . g$208$27978) (eval . g$208$27981) (environment . g$208$27977) (syntax-violation . g$208$27994)))))) (g$208$15512 'g$208$28731 '(ikarus interaction) '() '() '() '() '() '() values values '#t) (g$208$15512 'g$208$28732 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$208$28071) (unquote . g$208$28070) (delay . g$208$28063) (or . g$208$28061) (and . g$208$28060) (do . g$208$28059) (cond . g$208$28058) (let* . g$208$28057) (let . g$208$28055) (quasiquote . g$208$28051) (syntax-rules . g$208$28050) (case . g$208$28045) (if . g$208$28041) (letrec . g$208$28039) (lambda . g$208$28036) (quote . g$208$28033) (letrec-syntax . g$208$28031) (let-syntax . g$208$28030) (set! . g$208$28029) (begin . g$208$28027) (define-syntax . g$208$28025) (define . g$208$28024)) '() values values '#t) (g$208$15512 'g$208$28733 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g$208$28714) (string-ci>=? . g$208$28713) (string-ci=? . g$208$28712) (string-ci<? . g$208$28711) (string-ci<=? . g$208$28710) (char-whitespace? . g$208$28709) (char-upper-case? . g$208$28708) (char-numeric? . g$208$28706) (char-lower-case? . g$208$28705) (char-upcase . g$208$28703) (char-downcase . g$208$28700) (char-ci>? . g$208$28699) (char-ci>=? . g$208$28698) (char-ci=? . g$208$28697) (char-ci<? . g$208$28696) (char-ci<=? . g$208$28695) (char-alphabetic? . g$208$28694) (call-with-output-file . g$208$28650) (call-with-input-file . g$208$28649) (write-char . g$208$28648) (write . g$208$28647) (with-output-to-file . g$208$28646) (with-input-from-file . g$208$28645) (read-char . g$208$28644) (read . g$208$28643) (peek-char . g$208$28642) (open-output-file . g$208$28641) (open-input-file . g$208$28640) (newline . g$208$28639) (display . g$208$28638) (close-output-port . g$208$28637) (close-input-port . g$208$28636) (eof-object . g$208$28634) (current-output-port . g$208$28632) (current-input-port . g$208$28631) (output-port? . g$208$28630) (input-port? . g$208$28629) (scheme-report-environment . g$208$16686) (quotient . g$208$28544) (null-environment . g$208$16684) (remainder . g$208$28543) (modulo . g$208$28542) (inexact->exact . g$208$28541) (force . g$208$28540) (exact->inexact . g$208$28539) (string-fill! . g$208$28536) (string-set! . g$208$28535) (set-cdr! . g$208$28534) (set-car! . g$208$28533) (memv . g$208$28527) (memq . g$208$28526) (member . g$208$28524) (assv . g$208$28516) (assq . g$208$28515) (assoc . g$208$28513) (eval . g$208$16690) (zero? . g$208$28283) (vector? . g$208$28282) (vector-set! . g$208$28281) (vector-ref . g$208$28280) (vector-length . g$208$28278) (vector-fill! . g$208$28276) (vector->list . g$208$28275) (vector . g$208$28274) (values . g$208$28273) (truncate . g$208$28272) (tan . g$208$28271) (symbol? . g$208$28270) (symbol->string . g$208$28268) (substring . g$208$28267) (string? . g$208$28266) (string>? . g$208$28265) (string>=? . g$208$28264) (string=? . g$208$28263) (string<? . g$208$28262) (string<=? . g$208$28261) (string-ref . g$208$28260) (string-length . g$208$28259) (string-copy . g$208$28257) (string-append . g$208$28256) (string->symbol . g$208$28255) (string->number . g$208$28254) (string->list . g$208$28253) (string . g$208$28252) (sqrt . g$208$28251) (sin . g$208$28250) (round . g$208$28249) (reverse . g$208$28248) (real? . g$208$28247) (real-part . g$208$28245) (rationalize . g$208$28244) (rational? . g$208$28243) (procedure? . g$208$28241) (positive? . g$208$28240) (pair? . g$208$28239) (odd? . g$208$28238) (numerator . g$208$28237) (number? . g$208$28236) (number->string . g$208$28235) (not . g$208$28233) (negative? . g$208$28232) (min . g$208$28230) (max . g$208$28229) (map . g$208$28228) (make-vector . g$208$28227) (make-string . g$208$28226) (make-rectangular . g$208$28225) (make-polar . g$208$28224) (magnitude . g$208$28223) (log . g$208$28222) (list? . g$208$28221) (list-tail . g$208$28220) (list-ref . g$208$28219) (list->vector . g$208$28218) (list->string . g$208$28217) (list . g$208$28216) (length . g$208$28215) (lcm . g$208$28214) (integer? . g$208$28213) (integer->char . g$208$28211) (inexact? . g$208$28209) (imag-part . g$208$28207) (gcd . g$208$28206) (for-each . g$208$28205) (floor . g$208$28204) (expt . g$208$28202) (exp . g$208$28201) (exact? . g$208$28200) (even? . g$208$28197) (eqv? . g$208$28195) (equal? . g$208$28194) (eq? . g$208$28193) (dynamic-wind . g$208$28192) (denominator . g$208$28185) (cos . g$208$28184) (cons . g$208$28183) (complex? . g$208$28182) (char? . g$208$28181) (char>? . g$208$28180) (char>=? . g$208$28179) (char=? . g$208$28178) (char<? . g$208$28177) (char<=? . g$208$28176) (char->integer . g$208$28175) (ceiling . g$208$28174) (call-with-values . g$208$28173) (call-with-current-continuation . g$208$28171) (cddddr . g$208$28170) (cdddar . g$208$28169) (cddadr . g$208$28168) (cddaar . g$208$28167) (cdaddr . g$208$28166) (cdadar . g$208$28165) (cdaadr . g$208$28164) (cdaaar . g$208$28163) (cadddr . g$208$28162) (caddar . g$208$28161) (cadadr . g$208$28160) (cadaar . g$208$28159) (caaddr . g$208$28158) (caadar . g$208$28157) (caaadr . g$208$28156) (caaaar . g$208$28155) (cdddr . g$208$28154) (cddar . g$208$28153) (cdadr . g$208$28152) (cdaar . g$208$28151) (caddr . g$208$28150) (cadar . g$208$28149) (caadr . g$208$28148) (caaar . g$208$28147) (cddr . g$208$28146) (cdar . g$208$28145) (cadr . g$208$28144) (caar . g$208$28143) (cdr . g$208$28142) (car . g$208$28141) (boolean? . g$208$28140) (atan . g$208$28138) (asin . g$208$28136) (apply . g$208$28135) (append . g$208$28134) (angle . g$208$28133) (acos . g$208$28132) (abs . g$208$28131) (/ . g$208$28130) (* . g$208$28129) (- . g$208$28128) (+ . g$208$28127) (>= . g$208$28126) (> . g$208$28125) (= . g$208$28124) (<= . g$208$28123) (< . g$208$28122) (unquote-splicing . g$208$28071) (unquote . g$208$28070) (delay . g$208$28063) (or . g$208$28061) (and . g$208$28060) (do . g$208$28059) (cond . g$208$28058) (let* . g$208$28057) (let . g$208$28055) (quasiquote . g$208$28051) (syntax-rules . g$208$28050) (case . g$208$28045) (if . g$208$28041) (letrec . g$208$28039) (lambda . g$208$28036) (quote . g$208$28033) (letrec-syntax . g$208$28031) (let-syntax . g$208$28030) (set! . g$208$28029) (begin . g$208$28027) (define-syntax . g$208$28025) (define . g$208$28024)) '() values values '#t) (g$208$15512 'g$208$28734 '(psyntax modules) '() '() '() '() '((module . g$208$28026)) '() values values '#t) (g$208$15512 'g$208$28735 '(chez parameters) '() '() '() '() '() '() values values '#t) (g$208$15512 'g$208$28736 '(rnrs) '(6) '() '() '() '((string-upcase . g$208$28722) (string-titlecase . g$208$28721) (string-normalize-nfkd . g$208$28720) (string-normalize-nfkc . g$208$28719) (string-normalize-nfd . g$208$28718) (string-normalize-nfc . g$208$28717) (string-foldcase . g$208$28716) (string-downcase . g$208$28715) (string-ci>? . g$208$28714) (string-ci>=? . g$208$28713) (string-ci=? . g$208$28712) (string-ci<? . g$208$28711) (string-ci<=? . g$208$28710) (char-whitespace? . g$208$28709) (char-upper-case? . g$208$28708) (char-title-case? . g$208$28707) (char-numeric? . g$208$28706) (char-lower-case? . g$208$28705) (char-general-category . g$208$28704) (char-upcase . g$208$28703) (char-titlecase . g$208$28702) (char-foldcase . g$208$28701) (char-downcase . g$208$28700) (char-ci>? . g$208$28699) (char-ci>=? . g$208$28698) (char-ci=? . g$208$28697) (char-ci<? . g$208$28696) (char-ci<=? . g$208$28695) (char-alphabetic? . g$208$28694) (make-variable-transformer . g$208$16042) (identifier? . g$208$16718) (generate-temporaries . g$208$16704) (free-identifier=? . g$208$16706) (syntax->datum . g$208$16722) (datum->syntax . g$208$16720) (bound-identifier=? . g$208$16708) (record-type-descriptor? . g$208$28693) (record-predicate . g$208$28692) (record-mutator . g$208$28691) (record-constructor . g$208$28690) (record-accessor . g$208$28689) (make-record-type-descriptor . g$208$28688) (make-record-constructor-descriptor . g$208$28687) (record? . g$208$28686) (record-type-uid . g$208$28685) (record-type-sealed? . g$208$28684) (record-type-parent . g$208$28683) (record-type-opaque? . g$208$28682) (record-type-name . g$208$28681) (record-type-generative? . g$208$28680) (record-type-field-names . g$208$28679) (record-rtd . g$208$28678) (record-field-mutable? . g$208$28677) (delete-file . g$208$28676) (file-exists? . g$208$28675) (vector-sort! . g$208$28674) (vector-sort . g$208$28673) (list-sort . g$208$28672) (symbol-hash . g$208$28671) (string-ci-hash . g$208$28670) (string-hash . g$208$28669) (equal-hash . g$208$28668) (hashtable-equivalence-function . g$208$28667) (make-hashtable . g$208$28666) (hashtable-hash-function . g$208$28665) (make-eqv-hashtable . g$208$28664) (make-eq-hashtable . g$208$28663) (hashtable? . g$208$28662) (hashtable-update! . g$208$28661) (hashtable-size . g$208$28660) (hashtable-set! . g$208$28659) (hashtable-ref . g$208$28658) (hashtable-mutable? . g$208$28657) (hashtable-keys . g$208$28656) (hashtable-entries . g$208$28655) (hashtable-delete! . g$208$28654) (hashtable-copy . g$208$28653) (hashtable-contains? . g$208$28652) (hashtable-clear! . g$208$28651) (call-with-output-file . g$208$28650) (call-with-input-file . g$208$28649) (write-char . g$208$28648) (write . g$208$28647) (with-output-to-file . g$208$28646) (with-input-from-file . g$208$28645) (read-char . g$208$28644) (read . g$208$28643) (peek-char . g$208$28642) (open-output-file . g$208$28641) (open-input-file . g$208$28640) (newline . g$208$28639) (display . g$208$28638) (close-output-port . g$208$28637) (close-input-port . g$208$28636) (eof-object? . g$208$28635) (eof-object . g$208$28634) (current-error-port . g$208$28633) (current-output-port . g$208$28632) (current-input-port . g$208$28631) (output-port? . g$208$28630) (input-port? . g$208$28629) (utf-8-codec . g$208$28628) (utf-16-codec . g$208$28627) (transcoder-error-handling-mode . g$208$28626) (transcoder-eol-style . g$208$28625) (transcoder-codec . g$208$28624) (transcoded-port . g$208$28623) (textual-port? . g$208$28622) (string->bytevector . g$208$28621) (standard-output-port . g$208$28620) (standard-input-port . g$208$28619) (standard-error-port . g$208$28618) (set-port-position! . g$208$28617) (put-u8 . g$208$28616) (put-string . g$208$28615) (put-datum . g$208$28614) (put-char . g$208$28613) (put-bytevector . g$208$28612) (port? . g$208$28611) (port-transcoder . g$208$28610) (port-position . g$208$28609) (port-has-set-port-position!? . g$208$28608) (port-has-port-position? . g$208$28607) (port-eof? . g$208$28606) (output-port-buffer-mode . g$208$28605) (open-string-output-port . g$208$28604) (open-string-input-port . g$208$28603) (open-file-output-port . g$208$28602) (open-file-input/output-port . g$208$28601) (open-file-input-port . g$208$28600) (open-bytevector-output-port . g$208$28599) (open-bytevector-input-port . g$208$28598) (native-transcoder . g$208$28597) (native-eol-style . g$208$28596) (make-transcoder . g$208$28595) (latin-1-codec . g$208$28594) (make-i/o-write-error . g$208$28593) (make-i/o-read-error . g$208$28592) (make-i/o-port-error . g$208$28591) (make-i/o-invalid-position-error . g$208$28590) (make-i/o-filename-error . g$208$28589) (make-i/o-file-protection-error . g$208$28588) (make-i/o-file-is-read-only-error . g$208$28587) (make-i/o-file-does-not-exist-error . g$208$28586) (make-i/o-file-already-exists-error . g$208$28585) (make-i/o-error . g$208$28584) (make-i/o-encoding-error . g$208$28583) (make-i/o-decoding-error . g$208$28582) (make-custom-textual-output-port . g$208$28581) (make-custom-textual-input/output-port . g$208$28580) (make-custom-textual-input-port . g$208$28579) (make-custom-binary-output-port . g$208$28578) (make-custom-binary-input/output-port . g$208$28577) (make-custom-binary-input-port . g$208$28576) (make-bytevector . g$208$28575) (lookahead-u8 . g$208$28574) (lookahead-char . g$208$28573) (i/o-write-error? . g$208$28572) (i/o-read-error? . g$208$28571) (i/o-port-error? . g$208$28570) (i/o-invalid-position-error? . g$208$28569) (i/o-filename-error? . g$208$28568) (i/o-file-protection-error? . g$208$28567) (i/o-file-is-read-only-error? . g$208$28566) (i/o-file-does-not-exist-error? . g$208$28565) (i/o-file-already-exists-error? . g$208$28564) (i/o-error? . g$208$28563) (i/o-error-port . g$208$28562) (i/o-error-filename . g$208$28561) (i/o-encoding-error? . g$208$28560) (i/o-encoding-error-char . g$208$28559) (i/o-decoding-error? . g$208$28558) (get-u8 . g$208$28557) (get-string-n! . g$208$28556) (get-string-n . g$208$28555) (get-string-all . g$208$28554) (get-line . g$208$28553) (get-datum . g$208$28552) (get-char . g$208$28551) (get-bytevector-some . g$208$28550) (get-bytevector-n! . g$208$28549) (get-bytevector-n . g$208$28548) (get-bytevector-all . g$208$28547) (flush-output-port . g$208$28546) (close-port . g$208$28545) (exit . g$208$28538) (command-line . g$208$28537) (remove . g$208$28532) (remv . g$208$28531) (remp . g$208$28530) (remq . g$208$28529) (partition . g$208$28528) (memv . g$208$28527) (memq . g$208$28526) (memp . g$208$28525) (member . g$208$28524) (exists . g$208$28523) (for-all . g$208$28522) (fold-right . g$208$28521) (fold-left . g$208$28520) (find . g$208$28519) (filter . g$208$28518) (cons* . g$208$28517) (assv . g$208$28516) (assq . g$208$28515) (assp . g$208$28514) (assoc . g$208$28513) (call-with-string-output-port . g$208$28512) (call-with-port . g$208$28511) (call-with-bytevector-output-port . g$208$28510) (bytevector->string . g$208$28509) (buffer-mode? . g$208$28508) (binary-port? . g$208$28507) (with-exception-handler . g$208$28506) (raise-continuable . g$208$28505) (raise . g$208$28504) (make-enumeration . g$208$28503) (enum-set=? . g$208$28502) (enum-set-universe . g$208$28501) (enum-set-union . g$208$28500) (enum-set-subset? . g$208$28499) (enum-set-projection . g$208$28498) (enum-set-member? . g$208$28497) (enum-set-intersection . g$208$28496) (enum-set-indexer . g$208$28495) (enum-set-difference . g$208$28494) (enum-set-constructor . g$208$28493) (enum-set-complement . g$208$28492) (enum-set->list . g$208$28491) (who-condition? . g$208$28490) (warning? . g$208$28489) (violation? . g$208$28488) (undefined-violation? . g$208$28487) (syntax-violation? . g$208$28486) (syntax-violation-subform . g$208$28485) (syntax-violation-form . g$208$28484) (syntax-violation . g$208$16716) (simple-conditions . g$208$28483) (serious-condition? . g$208$28482) (non-continuable-violation? . g$208$28481) (&non-continuable . g$208$28480) (message-condition? . g$208$28479) (make-who-condition . g$208$28478) (make-warning . g$208$28477) (make-violation . g$208$28476) (make-undefined-violation . g$208$28475) (make-syntax-violation . g$208$28474) (make-serious-condition . g$208$28473) (make-non-continuable-violation . g$208$28472) (make-message-condition . g$208$28471) (make-lexical-violation . g$208$28470) (make-irritants-condition . g$208$28469) (make-implementation-restriction-violation . g$208$28468) (make-error . g$208$28467) (make-assertion-violation . g$208$28466) (lexical-violation? . g$208$28465) (irritants-condition? . g$208$28464) (implementation-restriction-violation? . g$208$28463) (&implementation-restriction . g$208$28462) (error? . g$208$28461) (condition-who . g$208$28460) (condition-predicate . g$208$28459) (condition-message . g$208$28458) (condition-irritants . g$208$28457) (condition-accessor . g$208$28456) (condition . g$208$28455) (assertion-violation? . g$208$28454) (condition? . g$208$28453) (utf32->string . g$208$28452) (utf16->string . g$208$28451) (utf8->string . g$208$28450) (uint-list->bytevector . g$208$28449) (u8-list->bytevector . g$208$28448) (string->utf8 . g$208$28447) (string->utf32 . g$208$28446) (string->utf16 . g$208$28445) (sint-list->bytevector . g$208$28444) (native-endianness . g$208$28443) (bytevector? . g$208$28442) (bytevector=? . g$208$28441) (bytevector-uint-set! . g$208$28440) (bytevector-uint-ref . g$208$28439) (bytevector-u8-set! . g$208$28438) (bytevector-u8-ref . g$208$28437) (bytevector-u64-set! . g$208$28436) (bytevector-u64-ref . g$208$28435) (bytevector-u64-native-set! . g$208$28434) (bytevector-u64-native-ref . g$208$28433) (bytevector-u32-set! . g$208$28432) (bytevector-u32-ref . g$208$28431) (bytevector-u32-native-set! . g$208$28430) (bytevector-u32-native-ref . g$208$28429) (bytevector-u16-set! . g$208$28428) (bytevector-u16-ref . g$208$28427) (bytevector-u16-native-set! . g$208$28426) (bytevector-u16-native-ref . g$208$28425) (bytevector-sint-set! . g$208$28424) (bytevector-sint-ref . g$208$28423) (bytevector-s8-set! . g$208$28422) (bytevector-s8-ref . g$208$28421) (bytevector-s64-set! . g$208$28420) (bytevector-s64-ref . g$208$28419) (bytevector-s64-native-set! . g$208$28418) (bytevector-s64-native-ref . g$208$28417) (bytevector-s32-set! . g$208$28416) (bytevector-s32-ref . g$208$28415) (bytevector-s32-native-set! . g$208$28414) (bytevector-s32-native-ref . g$208$28413) (bytevector-s16-set! . g$208$28412) (bytevector-s16-ref . g$208$28411) (bytevector-s16-native-set! . g$208$28410) (bytevector-s16-native-ref . g$208$28409) (bytevector-length . g$208$28408) (bytevector-ieee-single-ref . g$208$28407) (bytevector-ieee-single-native-set! . g$208$28406) (bytevector-ieee-single-native-ref . g$208$28405) (bytevector-ieee-double-ref . g$208$28404) (bytevector-ieee-double-native-set! . g$208$28403) (bytevector-ieee-double-native-ref . g$208$28402) (bytevector-fill! . g$208$28401) (bytevector-copy! . g$208$28400) (bytevector-copy . g$208$28399) (bytevector->uint-list . g$208$28398) (bytevector->u8-list . g$208$28397) (bytevector->sint-list . g$208$28396) (no-nans-violation? . g$208$28395) (no-infinities-violation? . g$208$28394) (make-no-nans-violation . g$208$28393) (make-no-infinities-violation . g$208$28392) (real->flonum . g$208$28391) (flzero? . g$208$28390) (fltruncate . g$208$28389) (fltan . g$208$28388) (flsqrt . g$208$28387) (flsin . g$208$28386) (flround . g$208$28385) (flpositive? . g$208$28384) (flonum? . g$208$28383) (flodd? . g$208$28382) (flnumerator . g$208$28381) (flnegative? . g$208$28380) (flnan? . g$208$28379) (flmod0 . g$208$28378) (flmod . g$208$28377) (flmin . g$208$28376) (flmax . g$208$28375) (fllog . g$208$28374) (flinteger? . g$208$28373) (flinfinite? . g$208$28372) (flfloor . g$208$28371) (flfinite? . g$208$28370) (flexpt . g$208$28369) (flexp . g$208$28368) (fleven? . g$208$28367) (fldiv0-and-mod0 . g$208$28366) (fldiv0 . g$208$28365) (fldiv-and-mod . g$208$28364) (fldiv . g$208$28363) (fldenominator . g$208$28362) (flcos . g$208$28361) (flceiling . g$208$28360) (flatan . g$208$28359) (flasin . g$208$28358) (flacos . g$208$28357) (flabs . g$208$28356) (fl>? . g$208$28355) (fl>=? . g$208$28354) (fl=? . g$208$28353) (fl<? . g$208$28352) (fl<=? . g$208$28351) (fl/ . g$208$28350) (fl- . g$208$28349) (fl+ . g$208$28348) (fl* . g$208$28347) (fixnum->flonum . g$208$28346) (fxzero? . g$208$28345) (fxxor . g$208$28344) (fxrotate-bit-field . g$208$28343) (fxreverse-bit-field . g$208$28342) (fxpositive? . g$208$28341) (fxodd? . g$208$28340) (fxnot . g$208$28339) (fxnegative? . g$208$28338) (fxmod0 . g$208$28337) (fxmod . g$208$28336) (fxmin . g$208$28335) (fxmax . g$208$28334) (fxlength . g$208$28333) (fxior . g$208$28332) (fxif . g$208$28331) (fxfirst-bit-set . g$208$28330) (fxeven? . g$208$28329) (fxdiv0-and-mod0 . g$208$28328) (fxdiv0 . g$208$28327) (fxdiv-and-mod . g$208$28326) (fxdiv . g$208$28325) (fxcopy-bit-field . g$208$28324) (fxcopy-bit . g$208$28323) (fxbit-set? . g$208$28322) (fxbit-field . g$208$28321) (fxbit-count . g$208$28320) (fxarithmetic-shift-right . g$208$28319) (fxarithmetic-shift-left . g$208$28318) (fxarithmetic-shift . g$208$28317) (fxand . g$208$28316) (fx>? . g$208$28315) (fx>=? . g$208$28314) (fx=? . g$208$28313) (fx<? . g$208$28312) (fx<=? . g$208$28311) (fx-/carry . g$208$28310) (fx- . g$208$28309) (fx+/carry . g$208$28308) (fx+ . g$208$28307) (fx*/carry . g$208$28306) (fx* . g$208$28305) (greatest-fixnum . g$208$28304) (least-fixnum . g$208$28303) (fixnum-width . g$208$28302) (fixnum? . g$208$28301) (bitwise-rotate-bit-field . g$208$28300) (bitwise-reverse-bit-field . g$208$28299) (bitwise-length . g$208$28298) (bitwise-if . g$208$28297) (bitwise-first-bit-set . g$208$28296) (bitwise-copy-bit-field . g$208$28295) (bitwise-copy-bit . g$208$28294) (bitwise-bit-set? . g$208$28293) (bitwise-bit-field . g$208$28292) (bitwise-bit-count . g$208$28291) (bitwise-xor . g$208$28290) (bitwise-ior . g$208$28289) (bitwise-and . g$208$28288) (bitwise-not . g$208$28287) (bitwise-arithmetic-shift-right . g$208$28286) (bitwise-arithmetic-shift-left . g$208$28285) (bitwise-arithmetic-shift . g$208$28284) (zero? . g$208$28283) (vector? . g$208$28282) (vector-set! . g$208$28281) (vector-ref . g$208$28280) (vector-map . g$208$28279) (vector-length . g$208$28278) (vector-for-each . g$208$28277) (vector-fill! . g$208$28276) (vector->list . g$208$28275) (vector . g$208$28274) (values . g$208$28273) (truncate . g$208$28272) (tan . g$208$28271) (symbol? . g$208$28270) (symbol=? . g$208$28269) (symbol->string . g$208$28268) (substring . g$208$28267) (string? . g$208$28266) (string>? . g$208$28265) (string>=? . g$208$28264) (string=? . g$208$28263) (string<? . g$208$28262) (string<=? . g$208$28261) (string-ref . g$208$28260) (string-length . g$208$28259) (string-for-each . g$208$28258) (string-copy . g$208$28257) (string-append . g$208$28256) (string->symbol . g$208$28255) (string->number . g$208$28254) (string->list . g$208$28253) (string . g$208$28252) (sqrt . g$208$28251) (sin . g$208$28250) (round . g$208$28249) (reverse . g$208$28248) (real? . g$208$28247) (real-valued? . g$208$28246) (real-part . g$208$28245) (rationalize . g$208$28244) (rational? . g$208$28243) (rational-valued? . g$208$28242) (procedure? . g$208$28241) (positive? . g$208$28240) (pair? . g$208$28239) (odd? . g$208$28238) (numerator . g$208$28237) (number? . g$208$28236) (number->string . g$208$28235) (null? . g$208$28234) (not . g$208$28233) (negative? . g$208$28232) (nan? . g$208$28231) (min . g$208$28230) (max . g$208$28229) (map . g$208$28228) (make-vector . g$208$28227) (make-string . g$208$28226) (make-rectangular . g$208$28225) (make-polar . g$208$28224) (magnitude . g$208$28223) (log . g$208$28222) (list? . g$208$28221) (list-tail . g$208$28220) (list-ref . g$208$28219) (list->vector . g$208$28218) (list->string . g$208$28217) (list . g$208$28216) (length . g$208$28215) (lcm . g$208$28214) (integer? . g$208$28213) (integer-valued? . g$208$28212) (integer->char . g$208$28211) (infinite? . g$208$28210) (inexact? . g$208$28209) (inexact . g$208$28208) (imag-part . g$208$28207) (gcd . g$208$28206) (for-each . g$208$28205) (floor . g$208$28204) (finite? . g$208$28203) (expt . g$208$28202) (exp . g$208$28201) (exact? . g$208$28200) (exact-integer-sqrt . g$208$28199) (exact . g$208$28198) (even? . g$208$28197) (error . g$208$28196) (eqv? . g$208$28195) (equal? . g$208$28194) (eq? . g$208$28193) (dynamic-wind . g$208$28192) (div0-and-mod0 . g$208$28191) (mod0 . g$208$28190) (div0 . g$208$28189) (div-and-mod . g$208$28188) (mod . g$208$28187) (div . g$208$28186) (denominator . g$208$28185) (cos . g$208$28184) (cons . g$208$28183) (complex? . g$208$28182) (char? . g$208$28181) (char>? . g$208$28180) (char>=? . g$208$28179) (char=? . g$208$28178) (char<? . g$208$28177) (char<=? . g$208$28176) (char->integer . g$208$28175) (ceiling . g$208$28174) (call-with-values . g$208$28173) (call/cc . g$208$28172) (call-with-current-continuation . g$208$28171) (cddddr . g$208$28170) (cdddar . g$208$28169) (cddadr . g$208$28168) (cddaar . g$208$28167) (cdaddr . g$208$28166) (cdadar . g$208$28165) (cdaadr . g$208$28164) (cdaaar . g$208$28163) (cadddr . g$208$28162) (caddar . g$208$28161) (cadadr . g$208$28160) (cadaar . g$208$28159) (caaddr . g$208$28158) (caadar . g$208$28157) (caaadr . g$208$28156) (caaaar . g$208$28155) (cdddr . g$208$28154) (cddar . g$208$28153) (cdadr . g$208$28152) (cdaar . g$208$28151) (caddr . g$208$28150) (cadar . g$208$28149) (caadr . g$208$28148) (caaar . g$208$28147) (cddr . g$208$28146) (cdar . g$208$28145) (cadr . g$208$28144) (caar . g$208$28143) (cdr . g$208$28142) (car . g$208$28141) (boolean? . g$208$28140) (boolean=? . g$208$28139) (atan . g$208$28138) (assertion-violation . g$208$28137) (asin . g$208$28136) (apply . g$208$28135) (append . g$208$28134) (angle . g$208$28133) (acos . g$208$28132) (abs . g$208$28131) (/ . g$208$28130) (* . g$208$28129) (- . g$208$28128) (+ . g$208$28127) (>= . g$208$28126) (> . g$208$28125) (= . g$208$28124) (<= . g$208$28123) (< . g$208$28122) (let*-values . g$208$28121) (&no-nans . g$208$28120) (&no-infinities . g$208$28119) (&i/o-encoding . g$208$28118) (&i/o-decoding . g$208$28117) (&i/o-port . g$208$28116) (&i/o-file-does-not-exist . g$208$28115) (&i/o-file-already-exists . g$208$28114) (&i/o-file-is-read-only . g$208$28113) (&i/o-file-protection . g$208$28112) (&i/o-filename . g$208$28111) (&i/o-invalid-position . g$208$28110) (&i/o-write . g$208$28109) (&i/o-read . g$208$28108) (&i/o . g$208$28107) (&undefined . g$208$28106) (&syntax . g$208$28105) (&lexical . g$208$28104) (&who . g$208$28101) (&irritants . g$208$28100) (&assertion . g$208$28099) (&violation . g$208$28098) (&error . g$208$28097) (&serious . g$208$28096) (&warning . g$208$28095) (&message . g$208$28094) (&condition . g$208$28093) (define-condition-type . g$208$28092) (define-enumeration . g$208$28091) (define-record-type . g$208$28090) (parent-rtd . g$208$28089) (nongenerative . g$208$28088) (opaque . g$208$28087) (sealed . g$208$28086) (protocol . g$208$28085) (parent . g$208$28084) (immutable . g$208$28083) (mutable . g$208$28082) (fields . g$208$28081) (error-handling-mode . g$208$28080) (file-options . g$208$28079) (buffer-mode . g$208$28078) (eol-style . g$208$28077) (guard . g$208$28076) (unsyntax-splicing . g$208$28073) (unsyntax . g$208$28072) (unquote-splicing . g$208$28071) (unquote . g$208$28070) (_ . g$208$28069) (else . g$208$28068) (=> . g$208$28067) (|...| . g$208$28066) (assert . g$208$28065) (endianness . g$208$28064) (or . g$208$28061) (and . g$208$28060) (do . g$208$28059) (cond . g$208$28058) (let* . g$208$28057) (let-values . g$208$28056) (let . g$208$28055) (identifier-syntax . g$208$28054) (with-syntax . g$208$28053) (quasisyntax . g$208$28052) (quasiquote . g$208$28051) (syntax-rules . g$208$28050) (record-constructor-descriptor . g$208$28047) (record-type-descriptor . g$208$28046) (case . g$208$28045) (unless . g$208$28043) (when . g$208$28042) (if . g$208$28041) (letrec* . g$208$28040) (letrec . g$208$28039) (case-lambda . g$208$28037) (lambda . g$208$28036) (syntax . g$208$28035) (syntax-case . g$208$28034) (quote . g$208$28033) (letrec-syntax . g$208$28031) (let-syntax . g$208$28030) (set! . g$208$28029) (begin . g$208$28027) (define-syntax . g$208$28025) (define . g$208$28024)) '() values values '#t) (g$208$15512 'g$208$28737 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g$208$16686) (quotient . g$208$28544) (null-environment . g$208$16684) (remainder . g$208$28543) (modulo . g$208$28542) (inexact->exact . g$208$28541) (force . g$208$28540) (exact->inexact . g$208$28539) (delay . g$208$28063)) '() values values '#t) (g$208$15512 'g$208$28738 '(rnrs control) '(6) '() '() '() '((do . g$208$28059) (unless . g$208$28043) (when . g$208$28042) (case-lambda . g$208$28037)) '() values values '#t) (g$208$15512 'g$208$28739 '(rnrs eval) '(6) '() '() '() '((eval . g$208$16690) (environment . g$208$16682)) '() values values '#t) (g$208$15512 'g$208$28740 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$208$28534) (set-car! . g$208$28533)) '() values values '#t) (g$208$15512 'g$208$28741 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$208$28536) (string-set! . g$208$28535)) '() values values '#t) (g$208$15512 'g$208$28742 '(rnrs programs) '(6) '() '() '() '((exit . g$208$28538) (command-line . g$208$28537)) '() values values '#t) (g$208$15512 'g$208$28743 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$208$16042) (identifier? . g$208$16718) (generate-temporaries . g$208$16704) (free-identifier=? . g$208$16706) (syntax->datum . g$208$16722) (datum->syntax . g$208$16720) (bound-identifier=? . g$208$16708) (syntax-violation . g$208$16716) (unsyntax-splicing . g$208$28073) (unsyntax . g$208$28072) (_ . g$208$28069) (|...| . g$208$28066) (with-syntax . g$208$28053) (quasisyntax . g$208$28052) (syntax . g$208$28035) (syntax-case . g$208$28034)) '() values values '#t) (g$208$15512 'g$208$28744 '(rnrs files) '(6) '() '() '() '((delete-file . g$208$28676) (file-exists? . g$208$28675) (make-i/o-write-error . g$208$28593) (make-i/o-read-error . g$208$28592) (make-i/o-port-error . g$208$28591) (make-i/o-invalid-position-error . g$208$28590) (make-i/o-filename-error . g$208$28589) (make-i/o-file-protection-error . g$208$28588) (make-i/o-file-is-read-only-error . g$208$28587) (make-i/o-file-does-not-exist-error . g$208$28586) (make-i/o-file-already-exists-error . g$208$28585) (make-i/o-error . g$208$28584) (i/o-write-error? . g$208$28572) (i/o-read-error? . g$208$28571) (i/o-port-error? . g$208$28570) (i/o-invalid-position-error? . g$208$28569) (i/o-filename-error? . g$208$28568) (i/o-file-protection-error? . g$208$28567) (i/o-file-is-read-only-error? . g$208$28566) (i/o-file-does-not-exist-error? . g$208$28565) (i/o-file-already-exists-error? . g$208$28564) (i/o-error? . g$208$28563) (i/o-error-port . g$208$28562) (i/o-error-filename . g$208$28561) (&i/o-port . g$208$28116) (&i/o-file-does-not-exist . g$208$28115) (&i/o-file-already-exists . g$208$28114) (&i/o-file-is-read-only . g$208$28113) (&i/o-file-protection . g$208$28112) (&i/o-filename . g$208$28111) (&i/o-invalid-position . g$208$28110) (&i/o-write . g$208$28109) (&i/o-read . g$208$28108) (&i/o . g$208$28107)) '() values values '#t) (g$208$15512 'g$208$28745 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$208$28674) (vector-sort . g$208$28673) (list-sort . g$208$28672)) '() values values '#t) (g$208$15512 'g$208$28746 '(rnrs base) '(6) '() '() '() '((zero? . g$208$28283) (vector? . g$208$28282) (vector-set! . g$208$28281) (vector-ref . g$208$28280) (vector-map . g$208$28279) (vector-length . g$208$28278) (vector-for-each . g$208$28277) (vector-fill! . g$208$28276) (vector->list . g$208$28275) (vector . g$208$28274) (values . g$208$28273) (truncate . g$208$28272) (tan . g$208$28271) (symbol? . g$208$28270) (symbol=? . g$208$28269) (symbol->string . g$208$28268) (substring . g$208$28267) (string? . g$208$28266) (string>? . g$208$28265) (string>=? . g$208$28264) (string=? . g$208$28263) (string<? . g$208$28262) (string<=? . g$208$28261) (string-ref . g$208$28260) (string-length . g$208$28259) (string-for-each . g$208$28258) (string-copy . g$208$28257) (string-append . g$208$28256) (string->symbol . g$208$28255) (string->number . g$208$28254) (string->list . g$208$28253) (string . g$208$28252) (sqrt . g$208$28251) (sin . g$208$28250) (round . g$208$28249) (reverse . g$208$28248) (real? . g$208$28247) (real-valued? . g$208$28246) (real-part . g$208$28245) (rationalize . g$208$28244) (rational? . g$208$28243) (rational-valued? . g$208$28242) (procedure? . g$208$28241) (positive? . g$208$28240) (pair? . g$208$28239) (odd? . g$208$28238) (numerator . g$208$28237) (number? . g$208$28236) (number->string . g$208$28235) (null? . g$208$28234) (not . g$208$28233) (negative? . g$208$28232) (nan? . g$208$28231) (min . g$208$28230) (max . g$208$28229) (map . g$208$28228) (make-vector . g$208$28227) (make-string . g$208$28226) (make-rectangular . g$208$28225) (make-polar . g$208$28224) (magnitude . g$208$28223) (log . g$208$28222) (list? . g$208$28221) (list-tail . g$208$28220) (list-ref . g$208$28219) (list->vector . g$208$28218) (list->string . g$208$28217) (list . g$208$28216) (length . g$208$28215) (lcm . g$208$28214) (integer? . g$208$28213) (integer-valued? . g$208$28212) (integer->char . g$208$28211) (infinite? . g$208$28210) (inexact? . g$208$28209) (inexact . g$208$28208) (imag-part . g$208$28207) (gcd . g$208$28206) (for-each . g$208$28205) (floor . g$208$28204) (finite? . g$208$28203) (expt . g$208$28202) (exp . g$208$28201) (exact? . g$208$28200) (exact-integer-sqrt . g$208$28199) (exact . g$208$28198) (even? . g$208$28197) (error . g$208$28196) (eqv? . g$208$28195) (equal? . g$208$28194) (eq? . g$208$28193) (dynamic-wind . g$208$28192) (div0-and-mod0 . g$208$28191) (mod0 . g$208$28190) (div0 . g$208$28189) (div-and-mod . g$208$28188) (mod . g$208$28187) (div . g$208$28186) (denominator . g$208$28185) (cos . g$208$28184) (cons . g$208$28183) (complex? . g$208$28182) (char? . g$208$28181) (char>? . g$208$28180) (char>=? . g$208$28179) (char=? . g$208$28178) (char<? . g$208$28177) (char<=? . g$208$28176) (char->integer . g$208$28175) (ceiling . g$208$28174) (call-with-values . g$208$28173) (call/cc . g$208$28172) (call-with-current-continuation . g$208$28171) (cddddr . g$208$28170) (cdddar . g$208$28169) (cddadr . g$208$28168) (cddaar . g$208$28167) (cdaddr . g$208$28166) (cdadar . g$208$28165) (cdaadr . g$208$28164) (cdaaar . g$208$28163) (cadddr . g$208$28162) (caddar . g$208$28161) (cadadr . g$208$28160) (cadaar . g$208$28159) (caaddr . g$208$28158) (caadar . g$208$28157) (caaadr . g$208$28156) (caaaar . g$208$28155) (cdddr . g$208$28154) (cddar . g$208$28153) (cdadr . g$208$28152) (cdaar . g$208$28151) (caddr . g$208$28150) (cadar . g$208$28149) (caadr . g$208$28148) (caaar . g$208$28147) (cddr . g$208$28146) (cdar . g$208$28145) (cadr . g$208$28144) (caar . g$208$28143) (cdr . g$208$28142) (car . g$208$28141) (boolean? . g$208$28140) (boolean=? . g$208$28139) (atan . g$208$28138) (assertion-violation . g$208$28137) (asin . g$208$28136) (apply . g$208$28135) (append . g$208$28134) (angle . g$208$28133) (acos . g$208$28132) (abs . g$208$28131) (/ . g$208$28130) (* . g$208$28129) (- . g$208$28128) (+ . g$208$28127) (>= . g$208$28126) (> . g$208$28125) (= . g$208$28124) (<= . g$208$28123) (< . g$208$28122) (let*-values . g$208$28121) (unquote-splicing . g$208$28071) (unquote . g$208$28070) (_ . g$208$28069) (else . g$208$28068) (=> . g$208$28067) (|...| . g$208$28066) (assert . g$208$28065) (or . g$208$28061) (and . g$208$28060) (cond . g$208$28058) (let* . g$208$28057) (let-values . g$208$28056) (let . g$208$28055) (identifier-syntax . g$208$28054) (quasiquote . g$208$28051) (syntax-rules . g$208$28050) (case . g$208$28045) (if . g$208$28041) (letrec* . g$208$28040) (letrec . g$208$28039) (lambda . g$208$28036) (quote . g$208$28033) (letrec-syntax . g$208$28031) (let-syntax . g$208$28030) (set! . g$208$28029) (begin . g$208$28027) (define-syntax . g$208$28025) (define . g$208$28024)) '() values values '#t) (g$208$15512 'g$208$28747 '(rnrs lists) '(6) '() '() '() '((remove . g$208$28532) (remv . g$208$28531) (remp . g$208$28530) (remq . g$208$28529) (partition . g$208$28528) (memv . g$208$28527) (memq . g$208$28526) (memp . g$208$28525) (member . g$208$28524) (exists . g$208$28523) (for-all . g$208$28522) (fold-right . g$208$28521) (fold-left . g$208$28520) (find . g$208$28519) (filter . g$208$28518) (cons* . g$208$28517) (assv . g$208$28516) (assq . g$208$28515) (assp . g$208$28514) (assoc . g$208$28513)) '() values values '#t) (g$208$15512 'g$208$28748 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g$208$28650) (call-with-input-file . g$208$28649) (write-char . g$208$28648) (write . g$208$28647) (with-output-to-file . g$208$28646) (with-input-from-file . g$208$28645) (read-char . g$208$28644) (read . g$208$28643) (peek-char . g$208$28642) (open-output-file . g$208$28641) (open-input-file . g$208$28640) (newline . g$208$28639) (display . g$208$28638) (close-output-port . g$208$28637) (close-input-port . g$208$28636) (eof-object? . g$208$28635) (eof-object . g$208$28634) (current-error-port . g$208$28633) (current-output-port . g$208$28632) (current-input-port . g$208$28631) (output-port? . g$208$28630) (input-port? . g$208$28629) (make-i/o-write-error . g$208$28593) (make-i/o-read-error . g$208$28592) (make-i/o-port-error . g$208$28591) (make-i/o-invalid-position-error . g$208$28590) (make-i/o-filename-error . g$208$28589) (make-i/o-file-protection-error . g$208$28588) (make-i/o-file-is-read-only-error . g$208$28587) (make-i/o-file-does-not-exist-error . g$208$28586) (make-i/o-file-already-exists-error . g$208$28585) (make-i/o-error . g$208$28584) (i/o-write-error? . g$208$28572) (i/o-read-error? . g$208$28571) (i/o-port-error? . g$208$28570) (i/o-invalid-position-error? . g$208$28569) (i/o-filename-error? . g$208$28568) (i/o-file-protection-error? . g$208$28567) (i/o-file-is-read-only-error? . g$208$28566) (i/o-file-does-not-exist-error? . g$208$28565) (i/o-file-already-exists-error? . g$208$28564) (i/o-error? . g$208$28563) (i/o-error-port . g$208$28562) (i/o-error-filename . g$208$28561) (&i/o-port . g$208$28116) (&i/o-file-does-not-exist . g$208$28115) (&i/o-file-already-exists . g$208$28114) (&i/o-file-is-read-only . g$208$28113) (&i/o-file-protection . g$208$28112) (&i/o-filename . g$208$28111) (&i/o-invalid-position . g$208$28110) (&i/o-write . g$208$28109) (&i/o-read . g$208$28108) (&i/o . g$208$28107)) '() values values '#t) (g$208$15512 'g$208$28749 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$208$28575) (utf32->string . g$208$28452) (utf16->string . g$208$28451) (utf8->string . g$208$28450) (uint-list->bytevector . g$208$28449) (u8-list->bytevector . g$208$28448) (string->utf8 . g$208$28447) (string->utf32 . g$208$28446) (string->utf16 . g$208$28445) (sint-list->bytevector . g$208$28444) (native-endianness . g$208$28443) (bytevector? . g$208$28442) (bytevector=? . g$208$28441) (bytevector-uint-set! . g$208$28440) (bytevector-uint-ref . g$208$28439) (bytevector-u8-set! . g$208$28438) (bytevector-u8-ref . g$208$28437) (bytevector-u64-set! . g$208$28436) (bytevector-u64-ref . g$208$28435) (bytevector-u64-native-set! . g$208$28434) (bytevector-u64-native-ref . g$208$28433) (bytevector-u32-set! . g$208$28432) (bytevector-u32-ref . g$208$28431) (bytevector-u32-native-set! . g$208$28430) (bytevector-u32-native-ref . g$208$28429) (bytevector-u16-set! . g$208$28428) (bytevector-u16-ref . g$208$28427) (bytevector-u16-native-set! . g$208$28426) (bytevector-u16-native-ref . g$208$28425) (bytevector-sint-set! . g$208$28424) (bytevector-sint-ref . g$208$28423) (bytevector-s8-set! . g$208$28422) (bytevector-s8-ref . g$208$28421) (bytevector-s64-set! . g$208$28420) (bytevector-s64-ref . g$208$28419) (bytevector-s64-native-set! . g$208$28418) (bytevector-s64-native-ref . g$208$28417) (bytevector-s32-set! . g$208$28416) (bytevector-s32-ref . g$208$28415) (bytevector-s32-native-set! . g$208$28414) (bytevector-s32-native-ref . g$208$28413) (bytevector-s16-set! . g$208$28412) (bytevector-s16-ref . g$208$28411) (bytevector-s16-native-set! . g$208$28410) (bytevector-s16-native-ref . g$208$28409) (bytevector-length . g$208$28408) (bytevector-ieee-single-ref . g$208$28407) (bytevector-ieee-single-native-set! . g$208$28406) (bytevector-ieee-single-native-ref . g$208$28405) (bytevector-ieee-double-ref . g$208$28404) (bytevector-ieee-double-native-set! . g$208$28403) (bytevector-ieee-double-native-ref . g$208$28402) (bytevector-fill! . g$208$28401) (bytevector-copy! . g$208$28400) (bytevector-copy . g$208$28399) (bytevector->uint-list . g$208$28398) (bytevector->u8-list . g$208$28397) (bytevector->sint-list . g$208$28396) (endianness . g$208$28064)) '() values values '#t) (g$208$15512 'g$208$28750 '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$208$28722) (string-titlecase . g$208$28721) (string-normalize-nfkd . g$208$28720) (string-normalize-nfkc . g$208$28719) (string-normalize-nfd . g$208$28718) (string-normalize-nfc . g$208$28717) (string-foldcase . g$208$28716) (string-downcase . g$208$28715) (string-ci>? . g$208$28714) (string-ci>=? . g$208$28713) (string-ci=? . g$208$28712) (string-ci<? . g$208$28711) (string-ci<=? . g$208$28710) (char-whitespace? . g$208$28709) (char-upper-case? . g$208$28708) (char-title-case? . g$208$28707) (char-numeric? . g$208$28706) (char-lower-case? . g$208$28705) (char-general-category . g$208$28704) (char-upcase . g$208$28703) (char-titlecase . g$208$28702) (char-foldcase . g$208$28701) (char-downcase . g$208$28700) (char-ci>? . g$208$28699) (char-ci>=? . g$208$28698) (char-ci=? . g$208$28697) (char-ci<? . g$208$28696) (char-ci<=? . g$208$28695) (char-alphabetic? . g$208$28694)) '() values values '#t) (g$208$15512 'g$208$28751 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$208$28506) (raise-continuable . g$208$28505) (raise . g$208$28504) (guard . g$208$28076) (else . g$208$28068) (=> . g$208$28067)) '() values values '#t) (g$208$15512 'g$208$28752 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$208$28300) (bitwise-reverse-bit-field . g$208$28299) (bitwise-length . g$208$28298) (bitwise-if . g$208$28297) (bitwise-first-bit-set . g$208$28296) (bitwise-copy-bit-field . g$208$28295) (bitwise-copy-bit . g$208$28294) (bitwise-bit-set? . g$208$28293) (bitwise-bit-field . g$208$28292) (bitwise-bit-count . g$208$28291) (bitwise-xor . g$208$28290) (bitwise-ior . g$208$28289) (bitwise-and . g$208$28288) (bitwise-not . g$208$28287) (bitwise-arithmetic-shift-right . g$208$28286) (bitwise-arithmetic-shift-left . g$208$28285) (bitwise-arithmetic-shift . g$208$28284)) '() values values '#t) (g$208$15512 'g$208$28753 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$208$28345) (fxxor . g$208$28344) (fxrotate-bit-field . g$208$28343) (fxreverse-bit-field . g$208$28342) (fxpositive? . g$208$28341) (fxodd? . g$208$28340) (fxnot . g$208$28339) (fxnegative? . g$208$28338) (fxmod0 . g$208$28337) (fxmod . g$208$28336) (fxmin . g$208$28335) (fxmax . g$208$28334) (fxlength . g$208$28333) (fxior . g$208$28332) (fxif . g$208$28331) (fxfirst-bit-set . g$208$28330) (fxeven? . g$208$28329) (fxdiv0-and-mod0 . g$208$28328) (fxdiv0 . g$208$28327) (fxdiv-and-mod . g$208$28326) (fxdiv . g$208$28325) (fxcopy-bit-field . g$208$28324) (fxcopy-bit . g$208$28323) (fxbit-set? . g$208$28322) (fxbit-field . g$208$28321) (fxbit-count . g$208$28320) (fxarithmetic-shift-right . g$208$28319) (fxarithmetic-shift-left . g$208$28318) (fxarithmetic-shift . g$208$28317) (fxand . g$208$28316) (fx>? . g$208$28315) (fx>=? . g$208$28314) (fx=? . g$208$28313) (fx<? . g$208$28312) (fx<=? . g$208$28311) (fx-/carry . g$208$28310) (fx- . g$208$28309) (fx+/carry . g$208$28308) (fx+ . g$208$28307) (fx*/carry . g$208$28306) (fx* . g$208$28305) (greatest-fixnum . g$208$28304) (least-fixnum . g$208$28303) (fixnum-width . g$208$28302) (fixnum? . g$208$28301)) '() values values '#t) (g$208$15512 'g$208$28754 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$208$28395) (no-infinities-violation? . g$208$28394) (make-no-nans-violation . g$208$28393) (make-no-infinities-violation . g$208$28392) (real->flonum . g$208$28391) (flzero? . g$208$28390) (fltruncate . g$208$28389) (fltan . g$208$28388) (flsqrt . g$208$28387) (flsin . g$208$28386) (flround . g$208$28385) (flpositive? . g$208$28384) (flonum? . g$208$28383) (flodd? . g$208$28382) (flnumerator . g$208$28381) (flnegative? . g$208$28380) (flnan? . g$208$28379) (flmod0 . g$208$28378) (flmod . g$208$28377) (flmin . g$208$28376) (flmax . g$208$28375) (fllog . g$208$28374) (flinteger? . g$208$28373) (flinfinite? . g$208$28372) (flfloor . g$208$28371) (flfinite? . g$208$28370) (flexpt . g$208$28369) (flexp . g$208$28368) (fleven? . g$208$28367) (fldiv0-and-mod0 . g$208$28366) (fldiv0 . g$208$28365) (fldiv-and-mod . g$208$28364) (fldiv . g$208$28363) (fldenominator . g$208$28362) (flcos . g$208$28361) (flceiling . g$208$28360) (flatan . g$208$28359) (flasin . g$208$28358) (flacos . g$208$28357) (flabs . g$208$28356) (fl>? . g$208$28355) (fl>=? . g$208$28354) (fl=? . g$208$28353) (fl<? . g$208$28352) (fl<=? . g$208$28351) (fl/ . g$208$28350) (fl- . g$208$28349) (fl+ . g$208$28348) (fl* . g$208$28347) (fixnum->flonum . g$208$28346) (&no-nans . g$208$28120) (&no-infinities . g$208$28119)) '() values values '#t) (g$208$15512 'g$208$28755 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$208$28671) (string-ci-hash . g$208$28670) (string-hash . g$208$28669) (equal-hash . g$208$28668) (hashtable-equivalence-function . g$208$28667) (make-hashtable . g$208$28666) (hashtable-hash-function . g$208$28665) (make-eqv-hashtable . g$208$28664) (make-eq-hashtable . g$208$28663) (hashtable? . g$208$28662) (hashtable-update! . g$208$28661) (hashtable-size . g$208$28660) (hashtable-set! . g$208$28659) (hashtable-ref . g$208$28658) (hashtable-mutable? . g$208$28657) (hashtable-keys . g$208$28656) (hashtable-entries . g$208$28655) (hashtable-delete! . g$208$28654) (hashtable-copy . g$208$28653) (hashtable-contains? . g$208$28652) (hashtable-clear! . g$208$28651)) '() values values '#t) (g$208$15512 'g$208$28756 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$208$28635) (eof-object . g$208$28634) (current-error-port . g$208$28633) (current-output-port . g$208$28632) (current-input-port . g$208$28631) (output-port? . g$208$28630) (input-port? . g$208$28629) (utf-8-codec . g$208$28628) (utf-16-codec . g$208$28627) (transcoder-error-handling-mode . g$208$28626) (transcoder-eol-style . g$208$28625) (transcoder-codec . g$208$28624) (transcoded-port . g$208$28623) (textual-port? . g$208$28622) (string->bytevector . g$208$28621) (standard-output-port . g$208$28620) (standard-input-port . g$208$28619) (standard-error-port . g$208$28618) (set-port-position! . g$208$28617) (put-u8 . g$208$28616) (put-string . g$208$28615) (put-datum . g$208$28614) (put-char . g$208$28613) (put-bytevector . g$208$28612) (port? . g$208$28611) (port-transcoder . g$208$28610) (port-position . g$208$28609) (port-has-set-port-position!? . g$208$28608) (port-has-port-position? . g$208$28607) (port-eof? . g$208$28606) (output-port-buffer-mode . g$208$28605) (open-string-output-port . g$208$28604) (open-string-input-port . g$208$28603) (open-file-output-port . g$208$28602) (open-file-input/output-port . g$208$28601) (open-file-input-port . g$208$28600) (open-bytevector-output-port . g$208$28599) (open-bytevector-input-port . g$208$28598) (native-transcoder . g$208$28597) (native-eol-style . g$208$28596) (make-transcoder . g$208$28595) (latin-1-codec . g$208$28594) (make-i/o-write-error . g$208$28593) (make-i/o-read-error . g$208$28592) (make-i/o-port-error . g$208$28591) (make-i/o-invalid-position-error . g$208$28590) (make-i/o-filename-error . g$208$28589) (make-i/o-file-protection-error . g$208$28588) (make-i/o-file-is-read-only-error . g$208$28587) (make-i/o-file-does-not-exist-error . g$208$28586) (make-i/o-file-already-exists-error . g$208$28585) (make-i/o-error . g$208$28584) (make-i/o-encoding-error . g$208$28583) (make-i/o-decoding-error . g$208$28582) (make-custom-textual-output-port . g$208$28581) (make-custom-textual-input/output-port . g$208$28580) (make-custom-textual-input-port . g$208$28579) (make-custom-binary-output-port . g$208$28578) (make-custom-binary-input/output-port . g$208$28577) (make-custom-binary-input-port . g$208$28576) (lookahead-u8 . g$208$28574) (lookahead-char . g$208$28573) (i/o-write-error? . g$208$28572) (i/o-read-error? . g$208$28571) (i/o-port-error? . g$208$28570) (i/o-invalid-position-error? . g$208$28569) (i/o-filename-error? . g$208$28568) (i/o-file-protection-error? . g$208$28567) (i/o-file-is-read-only-error? . g$208$28566) (i/o-file-does-not-exist-error? . g$208$28565) (i/o-file-already-exists-error? . g$208$28564) (i/o-error? . g$208$28563) (i/o-error-port . g$208$28562) (i/o-error-filename . g$208$28561) (i/o-encoding-error? . g$208$28560) (i/o-encoding-error-char . g$208$28559) (i/o-decoding-error? . g$208$28558) (get-u8 . g$208$28557) (get-string-n! . g$208$28556) (get-string-n . g$208$28555) (get-string-all . g$208$28554) (get-line . g$208$28553) (get-datum . g$208$28552) (get-char . g$208$28551) (get-bytevector-some . g$208$28550) (get-bytevector-n! . g$208$28549) (get-bytevector-n . g$208$28548) (get-bytevector-all . g$208$28547) (flush-output-port . g$208$28546) (close-port . g$208$28545) (call-with-string-output-port . g$208$28512) (call-with-port . g$208$28511) (call-with-bytevector-output-port . g$208$28510) (bytevector->string . g$208$28509) (buffer-mode? . g$208$28508) (binary-port? . g$208$28507) (&i/o-encoding . g$208$28118) (&i/o-decoding . g$208$28117) (&i/o-port . g$208$28116) (&i/o-file-does-not-exist . g$208$28115) (&i/o-file-already-exists . g$208$28114) (&i/o-file-is-read-only . g$208$28113) (&i/o-file-protection . g$208$28112) (&i/o-filename . g$208$28111) (&i/o-invalid-position . g$208$28110) (&i/o-write . g$208$28109) (&i/o-read . g$208$28108) (&i/o . g$208$28107) (error-handling-mode . g$208$28080) (file-options . g$208$28079) (buffer-mode . g$208$28078) (eol-style . g$208$28077)) '() values values '#t) (g$208$15512 'g$208$28757 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$208$28503) (enum-set=? . g$208$28502) (enum-set-universe . g$208$28501) (enum-set-union . g$208$28500) (enum-set-subset? . g$208$28499) (enum-set-projection . g$208$28498) (enum-set-member? . g$208$28497) (enum-set-intersection . g$208$28496) (enum-set-indexer . g$208$28495) (enum-set-difference . g$208$28494) (enum-set-constructor . g$208$28493) (enum-set-complement . g$208$28492) (enum-set->list . g$208$28491) (define-enumeration . g$208$28091)) '() values values '#t) (g$208$15512 'g$208$28758 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$208$28490) (warning? . g$208$28489) (violation? . g$208$28488) (undefined-violation? . g$208$28487) (syntax-violation? . g$208$28486) (syntax-violation-subform . g$208$28485) (syntax-violation-form . g$208$28484) (syntax-violation . g$208$16716) (simple-conditions . g$208$28483) (serious-condition? . g$208$28482) (non-continuable-violation? . g$208$28481) (&non-continuable . g$208$28480) (message-condition? . g$208$28479) (make-who-condition . g$208$28478) (make-warning . g$208$28477) (make-violation . g$208$28476) (make-undefined-violation . g$208$28475) (make-syntax-violation . g$208$28474) (make-serious-condition . g$208$28473) (make-non-continuable-violation . g$208$28472) (make-message-condition . g$208$28471) (make-lexical-violation . g$208$28470) (make-irritants-condition . g$208$28469) (make-implementation-restriction-violation . g$208$28468) (make-error . g$208$28467) (make-assertion-violation . g$208$28466) (lexical-violation? . g$208$28465) (irritants-condition? . g$208$28464) (implementation-restriction-violation? . g$208$28463) (&implementation-restriction . g$208$28462) (error? . g$208$28461) (condition-who . g$208$28460) (condition-predicate . g$208$28459) (condition-message . g$208$28458) (condition-irritants . g$208$28457) (condition-accessor . g$208$28456) (condition . g$208$28455) (assertion-violation? . g$208$28454) (condition? . g$208$28453) (&undefined . g$208$28106) (&syntax . g$208$28105) (&lexical . g$208$28104) (&who . g$208$28101) (&irritants . g$208$28100) (&assertion . g$208$28099) (&violation . g$208$28098) (&error . g$208$28097) (&serious . g$208$28096) (&warning . g$208$28095) (&message . g$208$28094) (&condition . g$208$28093) (define-condition-type . g$208$28092)) '() values values '#t) (g$208$15512 'g$208$28759 '(rnrs records inspection) '(6) '() '() '() '((record? . g$208$28686) (record-type-uid . g$208$28685) (record-type-sealed? . g$208$28684) (record-type-parent . g$208$28683) (record-type-opaque? . g$208$28682) (record-type-name . g$208$28681) (record-type-generative? . g$208$28680) (record-type-field-names . g$208$28679) (record-rtd . g$208$28678) (record-field-mutable? . g$208$28677)) '() values values '#t) (g$208$15512 'g$208$28760 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$208$28693) (record-predicate . g$208$28692) (record-mutator . g$208$28691) (record-constructor . g$208$28690) (record-accessor . g$208$28689) (make-record-type-descriptor . g$208$28688) (make-record-constructor-descriptor . g$208$28687)) '() values values '#t) (g$208$15512 'g$208$28761 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$208$28090) (parent-rtd . g$208$28089) (nongenerative . g$208$28088) (opaque . g$208$28087) (sealed . g$208$28086) (protocol . g$208$28085) (parent . g$208$28084) (immutable . g$208$28083) (mutable . g$208$28082) (fields . g$208$28081) (record-constructor-descriptor . g$208$28047) (record-type-descriptor . g$208$28046)) '() values values '#t) (g$208$15512 'g$208$28762 '(psyntax system $all) '() '() '() '() '((syntax-error . g$208$16712) (syntax-dispatch . g$208$16573) (pretty-print . g$208$28730) (eval-core . g$208$28729) (set-symbol-value! . g$208$28728) (symbol-value . g$208$28727) (gensym . g$208$28726) (void . g$208$28725) (load . g$208$28007) (interaction-environment . g$208$28724) (char-ready? . g$208$28723) (string-upcase . g$208$28722) (string-titlecase . g$208$28721) (string-normalize-nfkd . g$208$28720) (string-normalize-nfkc . g$208$28719) (string-normalize-nfd . g$208$28718) (string-normalize-nfc . g$208$28717) (string-foldcase . g$208$28716) (string-downcase . g$208$28715) (string-ci>? . g$208$28714) (string-ci>=? . g$208$28713) (string-ci=? . g$208$28712) (string-ci<? . g$208$28711) (string-ci<=? . g$208$28710) (char-whitespace? . g$208$28709) (char-upper-case? . g$208$28708) (char-title-case? . g$208$28707) (char-numeric? . g$208$28706) (char-lower-case? . g$208$28705) (char-general-category . g$208$28704) (char-upcase . g$208$28703) (char-titlecase . g$208$28702) (char-foldcase . g$208$28701) (char-downcase . g$208$28700) (char-ci>? . g$208$28699) (char-ci>=? . g$208$28698) (char-ci=? . g$208$28697) (char-ci<? . g$208$28696) (char-ci<=? . g$208$28695) (char-alphabetic? . g$208$28694) (make-variable-transformer . g$208$16042) (identifier? . g$208$16718) (generate-temporaries . g$208$16704) (free-identifier=? . g$208$16706) (syntax->datum . g$208$16722) (datum->syntax . g$208$16720) (bound-identifier=? . g$208$16708) (record-type-descriptor? . g$208$28693) (record-predicate . g$208$28692) (record-mutator . g$208$28691) (record-constructor . g$208$28690) (record-accessor . g$208$28689) (make-record-type-descriptor . g$208$28688) (make-record-constructor-descriptor . g$208$28687) (record? . g$208$28686) (record-type-uid . g$208$28685) (record-type-sealed? . g$208$28684) (record-type-parent . g$208$28683) (record-type-opaque? . g$208$28682) (record-type-name . g$208$28681) (record-type-generative? . g$208$28680) (record-type-field-names . g$208$28679) (record-rtd . g$208$28678) (record-field-mutable? . g$208$28677) (delete-file . g$208$28676) (file-exists? . g$208$28675) (vector-sort! . g$208$28674) (vector-sort . g$208$28673) (list-sort . g$208$28672) (symbol-hash . g$208$28671) (string-ci-hash . g$208$28670) (string-hash . g$208$28669) (equal-hash . g$208$28668) (hashtable-equivalence-function . g$208$28667) (make-hashtable . g$208$28666) (hashtable-hash-function . g$208$28665) (make-eqv-hashtable . g$208$28664) (make-eq-hashtable . g$208$28663) (hashtable? . g$208$28662) (hashtable-update! . g$208$28661) (hashtable-size . g$208$28660) (hashtable-set! . g$208$28659) (hashtable-ref . g$208$28658) (hashtable-mutable? . g$208$28657) (hashtable-keys . g$208$28656) (hashtable-entries . g$208$28655) (hashtable-delete! . g$208$28654) (hashtable-copy . g$208$28653) (hashtable-contains? . g$208$28652) (hashtable-clear! . g$208$28651) (call-with-output-file . g$208$28650) (call-with-input-file . g$208$28649) (write-char . g$208$28648) (write . g$208$28647) (with-output-to-file . g$208$28646) (with-input-from-file . g$208$28645) (read-char . g$208$28644) (read . g$208$28643) (peek-char . g$208$28642) (open-output-file . g$208$28641) (open-input-file . g$208$28640) (newline . g$208$28639) (display . g$208$28638) (close-output-port . g$208$28637) (close-input-port . g$208$28636) (eof-object? . g$208$28635) (eof-object . g$208$28634) (current-error-port . g$208$28633) (current-output-port . g$208$28632) (current-input-port . g$208$28631) (output-port? . g$208$28630) (input-port? . g$208$28629) (utf-8-codec . g$208$28628) (utf-16-codec . g$208$28627) (transcoder-error-handling-mode . g$208$28626) (transcoder-eol-style . g$208$28625) (transcoder-codec . g$208$28624) (transcoded-port . g$208$28623) (textual-port? . g$208$28622) (string->bytevector . g$208$28621) (standard-output-port . g$208$28620) (standard-input-port . g$208$28619) (standard-error-port . g$208$28618) (set-port-position! . g$208$28617) (put-u8 . g$208$28616) (put-string . g$208$28615) (put-datum . g$208$28614) (put-char . g$208$28613) (put-bytevector . g$208$28612) (port? . g$208$28611) (port-transcoder . g$208$28610) (port-position . g$208$28609) (port-has-set-port-position!? . g$208$28608) (port-has-port-position? . g$208$28607) (port-eof? . g$208$28606) (output-port-buffer-mode . g$208$28605) (open-string-output-port . g$208$28604) (open-string-input-port . g$208$28603) (open-file-output-port . g$208$28602) (open-file-input/output-port . g$208$28601) (open-file-input-port . g$208$28600) (open-bytevector-output-port . g$208$28599) (open-bytevector-input-port . g$208$28598) (native-transcoder . g$208$28597) (native-eol-style . g$208$28596) (make-transcoder . g$208$28595) (latin-1-codec . g$208$28594) (make-i/o-write-error . g$208$28593) (make-i/o-read-error . g$208$28592) (make-i/o-port-error . g$208$28591) (make-i/o-invalid-position-error . g$208$28590) (make-i/o-filename-error . g$208$28589) (make-i/o-file-protection-error . g$208$28588) (make-i/o-file-is-read-only-error . g$208$28587) (make-i/o-file-does-not-exist-error . g$208$28586) (make-i/o-file-already-exists-error . g$208$28585) (make-i/o-error . g$208$28584) (make-i/o-encoding-error . g$208$28583) (make-i/o-decoding-error . g$208$28582) (make-custom-textual-output-port . g$208$28581) (make-custom-textual-input/output-port . g$208$28580) (make-custom-textual-input-port . g$208$28579) (make-custom-binary-output-port . g$208$28578) (make-custom-binary-input/output-port . g$208$28577) (make-custom-binary-input-port . g$208$28576) (make-bytevector . g$208$28575) (lookahead-u8 . g$208$28574) (lookahead-char . g$208$28573) (i/o-write-error? . g$208$28572) (i/o-read-error? . g$208$28571) (i/o-port-error? . g$208$28570) (i/o-invalid-position-error? . g$208$28569) (i/o-filename-error? . g$208$28568) (i/o-file-protection-error? . g$208$28567) (i/o-file-is-read-only-error? . g$208$28566) (i/o-file-does-not-exist-error? . g$208$28565) (i/o-file-already-exists-error? . g$208$28564) (i/o-error? . g$208$28563) (i/o-error-port . g$208$28562) (i/o-error-filename . g$208$28561) (i/o-encoding-error? . g$208$28560) (i/o-encoding-error-char . g$208$28559) (i/o-decoding-error? . g$208$28558) (get-u8 . g$208$28557) (get-string-n! . g$208$28556) (get-string-n . g$208$28555) (get-string-all . g$208$28554) (get-line . g$208$28553) (get-datum . g$208$28552) (get-char . g$208$28551) (get-bytevector-some . g$208$28550) (get-bytevector-n! . g$208$28549) (get-bytevector-n . g$208$28548) (get-bytevector-all . g$208$28547) (flush-output-port . g$208$28546) (close-port . g$208$28545) (scheme-report-environment . g$208$16686) (quotient . g$208$28544) (null-environment . g$208$16684) (remainder . g$208$28543) (modulo . g$208$28542) (inexact->exact . g$208$28541) (force . g$208$28540) (exact->inexact . g$208$28539) (exit . g$208$28538) (command-line . g$208$28537) (string-fill! . g$208$28536) (string-set! . g$208$28535) (set-cdr! . g$208$28534) (set-car! . g$208$28533) (remove . g$208$28532) (remv . g$208$28531) (remp . g$208$28530) (remq . g$208$28529) (partition . g$208$28528) (memv . g$208$28527) (memq . g$208$28526) (memp . g$208$28525) (member . g$208$28524) (exists . g$208$28523) (for-all . g$208$28522) (fold-right . g$208$28521) (fold-left . g$208$28520) (find . g$208$28519) (filter . g$208$28518) (cons* . g$208$28517) (assv . g$208$28516) (assq . g$208$28515) (assp . g$208$28514) (assoc . g$208$28513) (call-with-string-output-port . g$208$28512) (call-with-port . g$208$28511) (call-with-bytevector-output-port . g$208$28510) (bytevector->string . g$208$28509) (buffer-mode? . g$208$28508) (binary-port? . g$208$28507) (with-exception-handler . g$208$28506) (raise-continuable . g$208$28505) (raise . g$208$28504) (eval . g$208$16690) (environment . g$208$16682) (make-enumeration . g$208$28503) (enum-set=? . g$208$28502) (enum-set-universe . g$208$28501) (enum-set-union . g$208$28500) (enum-set-subset? . g$208$28499) (enum-set-projection . g$208$28498) (enum-set-member? . g$208$28497) (enum-set-intersection . g$208$28496) (enum-set-indexer . g$208$28495) (enum-set-difference . g$208$28494) (enum-set-constructor . g$208$28493) (enum-set-complement . g$208$28492) (enum-set->list . g$208$28491) (who-condition? . g$208$28490) (warning? . g$208$28489) (violation? . g$208$28488) (undefined-violation? . g$208$28487) (syntax-violation? . g$208$28486) (syntax-violation-subform . g$208$28485) (syntax-violation-form . g$208$28484) (syntax-violation . g$208$16716) (simple-conditions . g$208$28483) (serious-condition? . g$208$28482) (non-continuable-violation? . g$208$28481) (&non-continuable . g$208$28480) (message-condition? . g$208$28479) (make-who-condition . g$208$28478) (make-warning . g$208$28477) (make-violation . g$208$28476) (make-undefined-violation . g$208$28475) (make-syntax-violation . g$208$28474) (make-serious-condition . g$208$28473) (make-non-continuable-violation . g$208$28472) (make-message-condition . g$208$28471) (make-lexical-violation . g$208$28470) (make-irritants-condition . g$208$28469) (make-implementation-restriction-violation . g$208$28468) (make-error . g$208$28467) (make-assertion-violation . g$208$28466) (lexical-violation? . g$208$28465) (irritants-condition? . g$208$28464) (implementation-restriction-violation? . g$208$28463) (&implementation-restriction . g$208$28462) (error? . g$208$28461) (condition-who . g$208$28460) (condition-predicate . g$208$28459) (condition-message . g$208$28458) (condition-irritants . g$208$28457) (condition-accessor . g$208$28456) (condition . g$208$28455) (assertion-violation? . g$208$28454) (condition? . g$208$28453) (utf32->string . g$208$28452) (utf16->string . g$208$28451) (utf8->string . g$208$28450) (uint-list->bytevector . g$208$28449) (u8-list->bytevector . g$208$28448) (string->utf8 . g$208$28447) (string->utf32 . g$208$28446) (string->utf16 . g$208$28445) (sint-list->bytevector . g$208$28444) (native-endianness . g$208$28443) (bytevector? . g$208$28442) (bytevector=? . g$208$28441) (bytevector-uint-set! . g$208$28440) (bytevector-uint-ref . g$208$28439) (bytevector-u8-set! . g$208$28438) (bytevector-u8-ref . g$208$28437) (bytevector-u64-set! . g$208$28436) (bytevector-u64-ref . g$208$28435) (bytevector-u64-native-set! . g$208$28434) (bytevector-u64-native-ref . g$208$28433) (bytevector-u32-set! . g$208$28432) (bytevector-u32-ref . g$208$28431) (bytevector-u32-native-set! . g$208$28430) (bytevector-u32-native-ref . g$208$28429) (bytevector-u16-set! . g$208$28428) (bytevector-u16-ref . g$208$28427) (bytevector-u16-native-set! . g$208$28426) (bytevector-u16-native-ref . g$208$28425) (bytevector-sint-set! . g$208$28424) (bytevector-sint-ref . g$208$28423) (bytevector-s8-set! . g$208$28422) (bytevector-s8-ref . g$208$28421) (bytevector-s64-set! . g$208$28420) (bytevector-s64-ref . g$208$28419) (bytevector-s64-native-set! . g$208$28418) (bytevector-s64-native-ref . g$208$28417) (bytevector-s32-set! . g$208$28416) (bytevector-s32-ref . g$208$28415) (bytevector-s32-native-set! . g$208$28414) (bytevector-s32-native-ref . g$208$28413) (bytevector-s16-set! . g$208$28412) (bytevector-s16-ref . g$208$28411) (bytevector-s16-native-set! . g$208$28410) (bytevector-s16-native-ref . g$208$28409) (bytevector-length . g$208$28408) (bytevector-ieee-single-ref . g$208$28407) (bytevector-ieee-single-native-set! . g$208$28406) (bytevector-ieee-single-native-ref . g$208$28405) (bytevector-ieee-double-ref . g$208$28404) (bytevector-ieee-double-native-set! . g$208$28403) (bytevector-ieee-double-native-ref . g$208$28402) (bytevector-fill! . g$208$28401) (bytevector-copy! . g$208$28400) (bytevector-copy . g$208$28399) (bytevector->uint-list . g$208$28398) (bytevector->u8-list . g$208$28397) (bytevector->sint-list . g$208$28396) (no-nans-violation? . g$208$28395) (no-infinities-violation? . g$208$28394) (make-no-nans-violation . g$208$28393) (make-no-infinities-violation . g$208$28392) (real->flonum . g$208$28391) (flzero? . g$208$28390) (fltruncate . g$208$28389) (fltan . g$208$28388) (flsqrt . g$208$28387) (flsin . g$208$28386) (flround . g$208$28385) (flpositive? . g$208$28384) (flonum? . g$208$28383) (flodd? . g$208$28382) (flnumerator . g$208$28381) (flnegative? . g$208$28380) (flnan? . g$208$28379) (flmod0 . g$208$28378) (flmod . g$208$28377) (flmin . g$208$28376) (flmax . g$208$28375) (fllog . g$208$28374) (flinteger? . g$208$28373) (flinfinite? . g$208$28372) (flfloor . g$208$28371) (flfinite? . g$208$28370) (flexpt . g$208$28369) (flexp . g$208$28368) (fleven? . g$208$28367) (fldiv0-and-mod0 . g$208$28366) (fldiv0 . g$208$28365) (fldiv-and-mod . g$208$28364) (fldiv . g$208$28363) (fldenominator . g$208$28362) (flcos . g$208$28361) (flceiling . g$208$28360) (flatan . g$208$28359) (flasin . g$208$28358) (flacos . g$208$28357) (flabs . g$208$28356) (fl>? . g$208$28355) (fl>=? . g$208$28354) (fl=? . g$208$28353) (fl<? . g$208$28352) (fl<=? . g$208$28351) (fl/ . g$208$28350) (fl- . g$208$28349) (fl+ . g$208$28348) (fl* . g$208$28347) (fixnum->flonum . g$208$28346) (fxzero? . g$208$28345) (fxxor . g$208$28344) (fxrotate-bit-field . g$208$28343) (fxreverse-bit-field . g$208$28342) (fxpositive? . g$208$28341) (fxodd? . g$208$28340) (fxnot . g$208$28339) (fxnegative? . g$208$28338) (fxmod0 . g$208$28337) (fxmod . g$208$28336) (fxmin . g$208$28335) (fxmax . g$208$28334) (fxlength . g$208$28333) (fxior . g$208$28332) (fxif . g$208$28331) (fxfirst-bit-set . g$208$28330) (fxeven? . g$208$28329) (fxdiv0-and-mod0 . g$208$28328) (fxdiv0 . g$208$28327) (fxdiv-and-mod . g$208$28326) (fxdiv . g$208$28325) (fxcopy-bit-field . g$208$28324) (fxcopy-bit . g$208$28323) (fxbit-set? . g$208$28322) (fxbit-field . g$208$28321) (fxbit-count . g$208$28320) (fxarithmetic-shift-right . g$208$28319) (fxarithmetic-shift-left . g$208$28318) (fxarithmetic-shift . g$208$28317) (fxand . g$208$28316) (fx>? . g$208$28315) (fx>=? . g$208$28314) (fx=? . g$208$28313) (fx<? . g$208$28312) (fx<=? . g$208$28311) (fx-/carry . g$208$28310) (fx- . g$208$28309) (fx+/carry . g$208$28308) (fx+ . g$208$28307) (fx*/carry . g$208$28306) (fx* . g$208$28305) (greatest-fixnum . g$208$28304) (least-fixnum . g$208$28303) (fixnum-width . g$208$28302) (fixnum? . g$208$28301) (bitwise-rotate-bit-field . g$208$28300) (bitwise-reverse-bit-field . g$208$28299) (bitwise-length . g$208$28298) (bitwise-if . g$208$28297) (bitwise-first-bit-set . g$208$28296) (bitwise-copy-bit-field . g$208$28295) (bitwise-copy-bit . g$208$28294) (bitwise-bit-set? . g$208$28293) (bitwise-bit-field . g$208$28292) (bitwise-bit-count . g$208$28291) (bitwise-xor . g$208$28290) (bitwise-ior . g$208$28289) (bitwise-and . g$208$28288) (bitwise-not . g$208$28287) (bitwise-arithmetic-shift-right . g$208$28286) (bitwise-arithmetic-shift-left . g$208$28285) (bitwise-arithmetic-shift . g$208$28284) (zero? . g$208$28283) (vector? . g$208$28282) (vector-set! . g$208$28281) (vector-ref . g$208$28280) (vector-map . g$208$28279) (vector-length . g$208$28278) (vector-for-each . g$208$28277) (vector-fill! . g$208$28276) (vector->list . g$208$28275) (vector . g$208$28274) (values . g$208$28273) (truncate . g$208$28272) (tan . g$208$28271) (symbol? . g$208$28270) (symbol=? . g$208$28269) (symbol->string . g$208$28268) (substring . g$208$28267) (string? . g$208$28266) (string>? . g$208$28265) (string>=? . g$208$28264) (string=? . g$208$28263) (string<? . g$208$28262) (string<=? . g$208$28261) (string-ref . g$208$28260) (string-length . g$208$28259) (string-for-each . g$208$28258) (string-copy . g$208$28257) (string-append . g$208$28256) (string->symbol . g$208$28255) (string->number . g$208$28254) (string->list . g$208$28253) (string . g$208$28252) (sqrt . g$208$28251) (sin . g$208$28250) (round . g$208$28249) (reverse . g$208$28248) (real? . g$208$28247) (real-valued? . g$208$28246) (real-part . g$208$28245) (rationalize . g$208$28244) (rational? . g$208$28243) (rational-valued? . g$208$28242) (procedure? . g$208$28241) (positive? . g$208$28240) (pair? . g$208$28239) (odd? . g$208$28238) (numerator . g$208$28237) (number? . g$208$28236) (number->string . g$208$28235) (null? . g$208$28234) (not . g$208$28233) (negative? . g$208$28232) (nan? . g$208$28231) (min . g$208$28230) (max . g$208$28229) (map . g$208$28228) (make-vector . g$208$28227) (make-string . g$208$28226) (make-rectangular . g$208$28225) (make-polar . g$208$28224) (magnitude . g$208$28223) (log . g$208$28222) (list? . g$208$28221) (list-tail . g$208$28220) (list-ref . g$208$28219) (list->vector . g$208$28218) (list->string . g$208$28217) (list . g$208$28216) (length . g$208$28215) (lcm . g$208$28214) (integer? . g$208$28213) (integer-valued? . g$208$28212) (integer->char . g$208$28211) (infinite? . g$208$28210) (inexact? . g$208$28209) (inexact . g$208$28208) (imag-part . g$208$28207) (gcd . g$208$28206) (for-each . g$208$28205) (floor . g$208$28204) (finite? . g$208$28203) (expt . g$208$28202) (exp . g$208$28201) (exact? . g$208$28200) (exact-integer-sqrt . g$208$28199) (exact . g$208$28198) (even? . g$208$28197) (error . g$208$28196) (eqv? . g$208$28195) (equal? . g$208$28194) (eq? . g$208$28193) (dynamic-wind . g$208$28192) (div0-and-mod0 . g$208$28191) (mod0 . g$208$28190) (div0 . g$208$28189) (div-and-mod . g$208$28188) (mod . g$208$28187) (div . g$208$28186) (denominator . g$208$28185) (cos . g$208$28184) (cons . g$208$28183) (complex? . g$208$28182) (char? . g$208$28181) (char>? . g$208$28180) (char>=? . g$208$28179) (char=? . g$208$28178) (char<? . g$208$28177) (char<=? . g$208$28176) (char->integer . g$208$28175) (ceiling . g$208$28174) (call-with-values . g$208$28173) (call/cc . g$208$28172) (call-with-current-continuation . g$208$28171) (cddddr . g$208$28170) (cdddar . g$208$28169) (cddadr . g$208$28168) (cddaar . g$208$28167) (cdaddr . g$208$28166) (cdadar . g$208$28165) (cdaadr . g$208$28164) (cdaaar . g$208$28163) (cadddr . g$208$28162) (caddar . g$208$28161) (cadadr . g$208$28160) (cadaar . g$208$28159) (caaddr . g$208$28158) (caadar . g$208$28157) (caaadr . g$208$28156) (caaaar . g$208$28155) (cdddr . g$208$28154) (cddar . g$208$28153) (cdadr . g$208$28152) (cdaar . g$208$28151) (caddr . g$208$28150) (cadar . g$208$28149) (caadr . g$208$28148) (caaar . g$208$28147) (cddr . g$208$28146) (cdar . g$208$28145) (cadr . g$208$28144) (caar . g$208$28143) (cdr . g$208$28142) (car . g$208$28141) (boolean? . g$208$28140) (boolean=? . g$208$28139) (atan . g$208$28138) (assertion-violation . g$208$28137) (asin . g$208$28136) (apply . g$208$28135) (append . g$208$28134) (angle . g$208$28133) (acos . g$208$28132) (abs . g$208$28131) (/ . g$208$28130) (* . g$208$28129) (- . g$208$28128) (+ . g$208$28127) (>= . g$208$28126) (> . g$208$28125) (= . g$208$28124) (<= . g$208$28123) (< . g$208$28122) (let*-values . g$208$28121) (&no-nans . g$208$28120) (&no-infinities . g$208$28119) (&i/o-encoding . g$208$28118) (&i/o-decoding . g$208$28117) (&i/o-port . g$208$28116) (&i/o-file-does-not-exist . g$208$28115) (&i/o-file-already-exists . g$208$28114) (&i/o-file-is-read-only . g$208$28113) (&i/o-file-protection . g$208$28112) (&i/o-filename . g$208$28111) (&i/o-invalid-position . g$208$28110) (&i/o-write . g$208$28109) (&i/o-read . g$208$28108) (&i/o . g$208$28107) (&undefined . g$208$28106) (&syntax . g$208$28105) (&lexical . g$208$28104) (&implementation . g$208$28103) (&non . g$208$28102) (&who . g$208$28101) (&irritants . g$208$28100) (&assertion . g$208$28099) (&violation . g$208$28098) (&error . g$208$28097) (&serious . g$208$28096) (&warning . g$208$28095) (&message . g$208$28094) (&condition . g$208$28093) (define-condition-type . g$208$28092) (define-enumeration . g$208$28091) (define-record-type . g$208$28090) (parent-rtd . g$208$28089) (nongenerative . g$208$28088) (opaque . g$208$28087) (sealed . g$208$28086) (protocol . g$208$28085) (parent . g$208$28084) (immutable . g$208$28083) (mutable . g$208$28082) (fields . g$208$28081) (error-handling-mode . g$208$28080) (file-options . g$208$28079) (buffer-mode . g$208$28078) (eol-style . g$208$28077) (guard . g$208$28076) (trace-define . g$208$28075) (trace-lambda . g$208$28074) (unsyntax-splicing . g$208$28073) (unsyntax . g$208$28072) (unquote-splicing . g$208$28071) (unquote . g$208$28070) (_ . g$208$28069) (else . g$208$28068) (=> . g$208$28067) (|...| . g$208$28066) (assert . g$208$28065) (endianness . g$208$28064) (delay . g$208$28063) (time . g$208$28062) (or . g$208$28061) (and . g$208$28060) (do . g$208$28059) (cond . g$208$28058) (let* . g$208$28057) (let-values . g$208$28056) (let . g$208$28055) (identifier-syntax . g$208$28054) (with-syntax . g$208$28053) (quasisyntax . g$208$28052) (quasiquote . g$208$28051) (syntax-rules . g$208$28050) (include . g$208$28049) (define-struct . g$208$28048) (record-constructor-descriptor . g$208$28047) (record-type-descriptor . g$208$28046) (case . g$208$28045) (parameterize . g$208$28044) (unless . g$208$28043) (when . g$208$28042) (if . g$208$28041) (letrec* . g$208$28040) (letrec . g$208$28039) (type-descriptor . g$208$28038) (case-lambda . g$208$28037) (lambda . g$208$28036) (syntax . g$208$28035) (syntax-case . g$208$28034) (quote . g$208$28033) (foreign-call . g$208$28032) (letrec-syntax . g$208$28031) (let-syntax . g$208$28030) (set! . g$208$28029) (import . g$208$28028) (begin . g$208$28027) (module . g$208$28026) (define-syntax . g$208$28025) (define . g$208$28024)) '((g$208$16712 core-prim . syntax-error) (g$208$16573 core-prim . syntax-dispatch) (g$208$28730 core-prim . pretty-print) (g$208$28729 core-prim . eval-core) (g$208$28728 core-prim . set-symbol-value!) (g$208$28727 core-prim . symbol-value) (g$208$28726 core-prim . gensym) (g$208$28725 core-prim . void) (g$208$28007 core-prim . load) (g$208$28724 core-prim . interaction-environment) (g$208$28723 core-prim . char-ready?) (g$208$28722 core-prim . string-upcase) (g$208$28721 core-prim . string-titlecase) (g$208$28720 core-prim . string-normalize-nfkd) (g$208$28719 core-prim . string-normalize-nfkc) (g$208$28718 core-prim . string-normalize-nfd) (g$208$28717 core-prim . string-normalize-nfc) (g$208$28716 core-prim . string-foldcase) (g$208$28715 core-prim . string-downcase) (g$208$28714 core-prim . string-ci>?) (g$208$28713 core-prim . string-ci>=?) (g$208$28712 core-prim . string-ci=?) (g$208$28711 core-prim . string-ci<?) (g$208$28710 core-prim . string-ci<=?) (g$208$28709 core-prim . char-whitespace?) (g$208$28708 core-prim . char-upper-case?) (g$208$28707 core-prim . char-title-case?) (g$208$28706 core-prim . char-numeric?) (g$208$28705 core-prim . char-lower-case?) (g$208$28704 core-prim . char-general-category) (g$208$28703 core-prim . char-upcase) (g$208$28702 core-prim . char-titlecase) (g$208$28701 core-prim . char-foldcase) (g$208$28700 core-prim . char-downcase) (g$208$28699 core-prim . char-ci>?) (g$208$28698 core-prim . char-ci>=?) (g$208$28697 core-prim . char-ci=?) (g$208$28696 core-prim . char-ci<?) (g$208$28695 core-prim . char-ci<=?) (g$208$28694 core-prim . char-alphabetic?) (g$208$16042 core-prim . make-variable-transformer) (g$208$16718 core-prim . identifier?) (g$208$16704 core-prim . generate-temporaries) (g$208$16706 core-prim . free-identifier=?) (g$208$16722 core-prim . syntax->datum) (g$208$16720 core-prim . datum->syntax) (g$208$16708 core-prim . bound-identifier=?) (g$208$28693 core-prim . record-type-descriptor?) (g$208$28692 core-prim . record-predicate) (g$208$28691 core-prim . record-mutator) (g$208$28690 core-prim . record-constructor) (g$208$28689 core-prim . record-accessor) (g$208$28688 core-prim . make-record-type-descriptor) (g$208$28687 core-prim . make-record-constructor-descriptor) (g$208$28686 core-prim . record?) (g$208$28685 core-prim . record-type-uid) (g$208$28684 core-prim . record-type-sealed?) (g$208$28683 core-prim . record-type-parent) (g$208$28682 core-prim . record-type-opaque?) (g$208$28681 core-prim . record-type-name) (g$208$28680 core-prim . record-type-generative?) (g$208$28679 core-prim . record-type-field-names) (g$208$28678 core-prim . record-rtd) (g$208$28677 core-prim . record-field-mutable?) (g$208$28676 core-prim . delete-file) (g$208$28675 core-prim . file-exists?) (g$208$28674 core-prim . vector-sort!) (g$208$28673 core-prim . vector-sort) (g$208$28672 core-prim . list-sort) (g$208$28671 core-prim . symbol-hash) (g$208$28670 core-prim . string-ci-hash) (g$208$28669 core-prim . string-hash) (g$208$28668 core-prim . equal-hash) (g$208$28667 core-prim . hashtable-equivalence-function) (g$208$28666 core-prim . make-hashtable) (g$208$28665 core-prim . hashtable-hash-function) (g$208$28664 core-prim . make-eqv-hashtable) (g$208$28663 core-prim . make-eq-hashtable) (g$208$28662 core-prim . hashtable?) (g$208$28661 core-prim . hashtable-update!) (g$208$28660 core-prim . hashtable-size) (g$208$28659 core-prim . hashtable-set!) (g$208$28658 core-prim . hashtable-ref) (g$208$28657 core-prim . hashtable-mutable?) (g$208$28656 core-prim . hashtable-keys) (g$208$28655 core-prim . hashtable-entries) (g$208$28654 core-prim . hashtable-delete!) (g$208$28653 core-prim . hashtable-copy) (g$208$28652 core-prim . hashtable-contains?) (g$208$28651 core-prim . hashtable-clear!) (g$208$28650 core-prim . call-with-output-file) (g$208$28649 core-prim . call-with-input-file) (g$208$28648 core-prim . write-char) (g$208$28647 core-prim . write) (g$208$28646 core-prim . with-output-to-file) (g$208$28645 core-prim . with-input-from-file) (g$208$28644 core-prim . read-char) (g$208$28643 core-prim . read) (g$208$28642 core-prim . peek-char) (g$208$28641 core-prim . open-output-file) (g$208$28640 core-prim . open-input-file) (g$208$28639 core-prim . newline) (g$208$28638 core-prim . display) (g$208$28637 core-prim . close-output-port) (g$208$28636 core-prim . close-input-port) (g$208$28635 core-prim . eof-object?) (g$208$28634 core-prim . eof-object) (g$208$28633 core-prim . current-error-port) (g$208$28632 core-prim . current-output-port) (g$208$28631 core-prim . current-input-port) (g$208$28630 core-prim . output-port?) (g$208$28629 core-prim . input-port?) (g$208$28628 core-prim . utf-8-codec) (g$208$28627 core-prim . utf-16-codec) (g$208$28626 core-prim . transcoder-error-handling-mode) (g$208$28625 core-prim . transcoder-eol-style) (g$208$28624 core-prim . transcoder-codec) (g$208$28623 core-prim . transcoded-port) (g$208$28622 core-prim . textual-port?) (g$208$28621 core-prim . string->bytevector) (g$208$28620 core-prim . standard-output-port) (g$208$28619 core-prim . standard-input-port) (g$208$28618 core-prim . standard-error-port) (g$208$28617 core-prim . set-port-position!) (g$208$28616 core-prim . put-u8) (g$208$28615 core-prim . put-string) (g$208$28614 core-prim . put-datum) (g$208$28613 core-prim . put-char) (g$208$28612 core-prim . put-bytevector) (g$208$28611 core-prim . port?) (g$208$28610 core-prim . port-transcoder) (g$208$28609 core-prim . port-position) (g$208$28608 core-prim . port-has-set-port-position!?) (g$208$28607 core-prim . port-has-port-position?) (g$208$28606 core-prim . port-eof?) (g$208$28605 core-prim . output-port-buffer-mode) (g$208$28604 core-prim . open-string-output-port) (g$208$28603 core-prim . open-string-input-port) (g$208$28602 core-prim . open-file-output-port) (g$208$28601 core-prim . open-file-input/output-port) (g$208$28600 core-prim . open-file-input-port) (g$208$28599 core-prim . open-bytevector-output-port) (g$208$28598 core-prim . open-bytevector-input-port) (g$208$28597 core-prim . native-transcoder) (g$208$28596 core-prim . native-eol-style) (g$208$28595 core-prim . make-transcoder) (g$208$28594 core-prim . latin-1-codec) (g$208$28593 core-prim . make-i/o-write-error) (g$208$28592 core-prim . make-i/o-read-error) (g$208$28591 core-prim . make-i/o-port-error) (g$208$28590 core-prim . make-i/o-invalid-position-error) (g$208$28589 core-prim . make-i/o-filename-error) (g$208$28588 core-prim . make-i/o-file-protection-error) (g$208$28587 core-prim . make-i/o-file-is-read-only-error) (g$208$28586 core-prim . make-i/o-file-does-not-exist-error) (g$208$28585 core-prim . make-i/o-file-already-exists-error) (g$208$28584 core-prim . make-i/o-error) (g$208$28583 core-prim . make-i/o-encoding-error) (g$208$28582 core-prim . make-i/o-decoding-error) (g$208$28581 core-prim . make-custom-textual-output-port) (g$208$28580 core-prim . make-custom-textual-input/output-port) (g$208$28579 core-prim . make-custom-textual-input-port) (g$208$28578 core-prim . make-custom-binary-output-port) (g$208$28577 core-prim . make-custom-binary-input/output-port) (g$208$28576 core-prim . make-custom-binary-input-port) (g$208$28575 core-prim . make-bytevector) (g$208$28574 core-prim . lookahead-u8) (g$208$28573 core-prim . lookahead-char) (g$208$28572 core-prim . i/o-write-error?) (g$208$28571 core-prim . i/o-read-error?) (g$208$28570 core-prim . i/o-port-error?) (g$208$28569 core-prim . i/o-invalid-position-error?) (g$208$28568 core-prim . i/o-filename-error?) (g$208$28567 core-prim . i/o-file-protection-error?) (g$208$28566 core-prim . i/o-file-is-read-only-error?) (g$208$28565 core-prim . i/o-file-does-not-exist-error?) (g$208$28564 core-prim . i/o-file-already-exists-error?) (g$208$28563 core-prim . i/o-error?) (g$208$28562 core-prim . i/o-error-port) (g$208$28561 core-prim . i/o-error-filename) (g$208$28560 core-prim . i/o-encoding-error?) (g$208$28559 core-prim . i/o-encoding-error-char) (g$208$28558 core-prim . i/o-decoding-error?) (g$208$28557 core-prim . get-u8) (g$208$28556 core-prim . get-string-n!) (g$208$28555 core-prim . get-string-n) (g$208$28554 core-prim . get-string-all) (g$208$28553 core-prim . get-line) (g$208$28552 core-prim . get-datum) (g$208$28551 core-prim . get-char) (g$208$28550 core-prim . get-bytevector-some) (g$208$28549 core-prim . get-bytevector-n!) (g$208$28548 core-prim . get-bytevector-n) (g$208$28547 core-prim . get-bytevector-all) (g$208$28546 core-prim . flush-output-port) (g$208$28545 core-prim . close-port) (g$208$16686 core-prim . scheme-report-environment) (g$208$28544 core-prim . quotient) (g$208$16684 core-prim . null-environment) (g$208$28543 core-prim . remainder) (g$208$28542 core-prim . modulo) (g$208$28541 core-prim . inexact->exact) (g$208$28540 core-prim . force) (g$208$28539 core-prim . exact->inexact) (g$208$28538 core-prim . exit) (g$208$28537 core-prim . command-line) (g$208$28536 core-prim . string-fill!) (g$208$28535 core-prim . string-set!) (g$208$28534 core-prim . set-cdr!) (g$208$28533 core-prim . set-car!) (g$208$28532 core-prim . remove) (g$208$28531 core-prim . remv) (g$208$28530 core-prim . remp) (g$208$28529 core-prim . remq) (g$208$28528 core-prim . partition) (g$208$28527 core-prim . memv) (g$208$28526 core-prim . memq) (g$208$28525 core-prim . memp) (g$208$28524 core-prim . member) (g$208$28523 core-prim . exists) (g$208$28522 core-prim . for-all) (g$208$28521 core-prim . fold-right) (g$208$28520 core-prim . fold-left) (g$208$28519 core-prim . find) (g$208$28518 core-prim . filter) (g$208$28517 core-prim . cons*) (g$208$28516 core-prim . assv) (g$208$28515 core-prim . assq) (g$208$28514 core-prim . assp) (g$208$28513 core-prim . assoc) (g$208$28512 core-prim . call-with-string-output-port) (g$208$28511 core-prim . call-with-port) (g$208$28510 core-prim . call-with-bytevector-output-port) (g$208$28509 core-prim . bytevector->string) (g$208$28508 core-prim . buffer-mode?) (g$208$28507 core-prim . binary-port?) (g$208$28506 core-prim . with-exception-handler) (g$208$28505 core-prim . raise-continuable) (g$208$28504 core-prim . raise) (g$208$16690 core-prim . eval) (g$208$16682 core-prim . environment) (g$208$28503 core-prim . make-enumeration) (g$208$28502 core-prim . enum-set=?) (g$208$28501 core-prim . enum-set-universe) (g$208$28500 core-prim . enum-set-union) (g$208$28499 core-prim . enum-set-subset?) (g$208$28498 core-prim . enum-set-projection) (g$208$28497 core-prim . enum-set-member?) (g$208$28496 core-prim . enum-set-intersection) (g$208$28495 core-prim . enum-set-indexer) (g$208$28494 core-prim . enum-set-difference) (g$208$28493 core-prim . enum-set-constructor) (g$208$28492 core-prim . enum-set-complement) (g$208$28491 core-prim . enum-set->list) (g$208$28490 core-prim . who-condition?) (g$208$28489 core-prim . warning?) (g$208$28488 core-prim . violation?) (g$208$28487 core-prim . undefined-violation?) (g$208$28486 core-prim . syntax-violation?) (g$208$28485 core-prim . syntax-violation-subform) (g$208$28484 core-prim . syntax-violation-form) (g$208$16716 core-prim . syntax-violation) (g$208$28483 core-prim . simple-conditions) (g$208$28482 core-prim . serious-condition?) (g$208$28481 core-prim . non-continuable-violation?) (g$208$28480 core-prim . &non-continuable) (g$208$28479 core-prim . message-condition?) (g$208$28478 core-prim . make-who-condition) (g$208$28477 core-prim . make-warning) (g$208$28476 core-prim . make-violation) (g$208$28475 core-prim . make-undefined-violation) (g$208$28474 core-prim . make-syntax-violation) (g$208$28473 core-prim . make-serious-condition) (g$208$28472 core-prim . make-non-continuable-violation) (g$208$28471 core-prim . make-message-condition) (g$208$28470 core-prim . make-lexical-violation) (g$208$28469 core-prim . make-irritants-condition) (g$208$28468 core-prim . make-implementation-restriction-violation) (g$208$28467 core-prim . make-error) (g$208$28466 core-prim . make-assertion-violation) (g$208$28465 core-prim . lexical-violation?) (g$208$28464 core-prim . irritants-condition?) (g$208$28463 core-prim . implementation-restriction-violation?) (g$208$28462 core-prim . &implementation-restriction) (g$208$28461 core-prim . error?) (g$208$28460 core-prim . condition-who) (g$208$28459 core-prim . condition-predicate) (g$208$28458 core-prim . condition-message) (g$208$28457 core-prim . condition-irritants) (g$208$28456 core-prim . condition-accessor) (g$208$28455 core-prim . condition) (g$208$28454 core-prim . assertion-violation?) (g$208$28453 core-prim . condition?) (g$208$28452 core-prim . utf32->string) (g$208$28451 core-prim . utf16->string) (g$208$28450 core-prim . utf8->string) (g$208$28449 core-prim . uint-list->bytevector) (g$208$28448 core-prim . u8-list->bytevector) (g$208$28447 core-prim . string->utf8) (g$208$28446 core-prim . string->utf32) (g$208$28445 core-prim . string->utf16) (g$208$28444 core-prim . sint-list->bytevector) (g$208$28443 core-prim . native-endianness) (g$208$28442 core-prim . bytevector?) (g$208$28441 core-prim . bytevector=?) (g$208$28440 core-prim . bytevector-uint-set!) (g$208$28439 core-prim . bytevector-uint-ref) (g$208$28438 core-prim . bytevector-u8-set!) (g$208$28437 core-prim . bytevector-u8-ref) (g$208$28436 core-prim . bytevector-u64-set!) (g$208$28435 core-prim . bytevector-u64-ref) (g$208$28434 core-prim . bytevector-u64-native-set!) (g$208$28433 core-prim . bytevector-u64-native-ref) (g$208$28432 core-prim . bytevector-u32-set!) (g$208$28431 core-prim . bytevector-u32-ref) (g$208$28430 core-prim . bytevector-u32-native-set!) (g$208$28429 core-prim . bytevector-u32-native-ref) (g$208$28428 core-prim . bytevector-u16-set!) (g$208$28427 core-prim . bytevector-u16-ref) (g$208$28426 core-prim . bytevector-u16-native-set!) (g$208$28425 core-prim . bytevector-u16-native-ref) (g$208$28424 core-prim . bytevector-sint-set!) (g$208$28423 core-prim . bytevector-sint-ref) (g$208$28422 core-prim . bytevector-s8-set!) (g$208$28421 core-prim . bytevector-s8-ref) (g$208$28420 core-prim . bytevector-s64-set!) (g$208$28419 core-prim . bytevector-s64-ref) (g$208$28418 core-prim . bytevector-s64-native-set!) (g$208$28417 core-prim . bytevector-s64-native-ref) (g$208$28416 core-prim . bytevector-s32-set!) (g$208$28415 core-prim . bytevector-s32-ref) (g$208$28414 core-prim . bytevector-s32-native-set!) (g$208$28413 core-prim . bytevector-s32-native-ref) (g$208$28412 core-prim . bytevector-s16-set!) (g$208$28411 core-prim . bytevector-s16-ref) (g$208$28410 core-prim . bytevector-s16-native-set!) (g$208$28409 core-prim . bytevector-s16-native-ref) (g$208$28408 core-prim . bytevector-length) (g$208$28407 core-prim . bytevector-ieee-single-ref) (g$208$28406 core-prim . bytevector-ieee-single-native-set!) (g$208$28405 core-prim . bytevector-ieee-single-native-ref) (g$208$28404 core-prim . bytevector-ieee-double-ref) (g$208$28403 core-prim . bytevector-ieee-double-native-set!) (g$208$28402 core-prim . bytevector-ieee-double-native-ref) (g$208$28401 core-prim . bytevector-fill!) (g$208$28400 core-prim . bytevector-copy!) (g$208$28399 core-prim . bytevector-copy) (g$208$28398 core-prim . bytevector->uint-list) (g$208$28397 core-prim . bytevector->u8-list) (g$208$28396 core-prim . bytevector->sint-list) (g$208$28395 core-prim . no-nans-violation?) (g$208$28394 core-prim . no-infinities-violation?) (g$208$28393 core-prim . make-no-nans-violation) (g$208$28392 core-prim . make-no-infinities-violation) (g$208$28391 core-prim . real->flonum) (g$208$28390 core-prim . flzero?) (g$208$28389 core-prim . fltruncate) (g$208$28388 core-prim . fltan) (g$208$28387 core-prim . flsqrt) (g$208$28386 core-prim . flsin) (g$208$28385 core-prim . flround) (g$208$28384 core-prim . flpositive?) (g$208$28383 core-prim . flonum?) (g$208$28382 core-prim . flodd?) (g$208$28381 core-prim . flnumerator) (g$208$28380 core-prim . flnegative?) (g$208$28379 core-prim . flnan?) (g$208$28378 core-prim . flmod0) (g$208$28377 core-prim . flmod) (g$208$28376 core-prim . flmin) (g$208$28375 core-prim . flmax) (g$208$28374 core-prim . fllog) (g$208$28373 core-prim . flinteger?) (g$208$28372 core-prim . flinfinite?) (g$208$28371 core-prim . flfloor) (g$208$28370 core-prim . flfinite?) (g$208$28369 core-prim . flexpt) (g$208$28368 core-prim . flexp) (g$208$28367 core-prim . fleven?) (g$208$28366 core-prim . fldiv0-and-mod0) (g$208$28365 core-prim . fldiv0) (g$208$28364 core-prim . fldiv-and-mod) (g$208$28363 core-prim . fldiv) (g$208$28362 core-prim . fldenominator) (g$208$28361 core-prim . flcos) (g$208$28360 core-prim . flceiling) (g$208$28359 core-prim . flatan) (g$208$28358 core-prim . flasin) (g$208$28357 core-prim . flacos) (g$208$28356 core-prim . flabs) (g$208$28355 core-prim . fl>?) (g$208$28354 core-prim . fl>=?) (g$208$28353 core-prim . fl=?) (g$208$28352 core-prim . fl<?) (g$208$28351 core-prim . fl<=?) (g$208$28350 core-prim . fl/) (g$208$28349 core-prim . fl-) (g$208$28348 core-prim . fl+) (g$208$28347 core-prim . fl*) (g$208$28346 core-prim . fixnum->flonum) (g$208$28345 core-prim . fxzero?) (g$208$28344 core-prim . fxxor) (g$208$28343 core-prim . fxrotate-bit-field) (g$208$28342 core-prim . fxreverse-bit-field) (g$208$28341 core-prim . fxpositive?) (g$208$28340 core-prim . fxodd?) (g$208$28339 core-prim . fxnot) (g$208$28338 core-prim . fxnegative?) (g$208$28337 core-prim . fxmod0) (g$208$28336 core-prim . fxmod) (g$208$28335 core-prim . fxmin) (g$208$28334 core-prim . fxmax) (g$208$28333 core-prim . fxlength) (g$208$28332 core-prim . fxior) (g$208$28331 core-prim . fxif) (g$208$28330 core-prim . fxfirst-bit-set) (g$208$28329 core-prim . fxeven?) (g$208$28328 core-prim . fxdiv0-and-mod0) (g$208$28327 core-prim . fxdiv0) (g$208$28326 core-prim . fxdiv-and-mod) (g$208$28325 core-prim . fxdiv) (g$208$28324 core-prim . fxcopy-bit-field) (g$208$28323 core-prim . fxcopy-bit) (g$208$28322 core-prim . fxbit-set?) (g$208$28321 core-prim . fxbit-field) (g$208$28320 core-prim . fxbit-count) (g$208$28319 core-prim . fxarithmetic-shift-right) (g$208$28318 core-prim . fxarithmetic-shift-left) (g$208$28317 core-prim . fxarithmetic-shift) (g$208$28316 core-prim . fxand) (g$208$28315 core-prim . fx>?) (g$208$28314 core-prim . fx>=?) (g$208$28313 core-prim . fx=?) (g$208$28312 core-prim . fx<?) (g$208$28311 core-prim . fx<=?) (g$208$28310 core-prim . fx-/carry) (g$208$28309 core-prim . fx-) (g$208$28308 core-prim . fx+/carry) (g$208$28307 core-prim . fx+) (g$208$28306 core-prim . fx*/carry) (g$208$28305 core-prim . fx*) (g$208$28304 core-prim . greatest-fixnum) (g$208$28303 core-prim . least-fixnum) (g$208$28302 core-prim . fixnum-width) (g$208$28301 core-prim . fixnum?) (g$208$28300 core-prim . bitwise-rotate-bit-field) (g$208$28299 core-prim . bitwise-reverse-bit-field) (g$208$28298 core-prim . bitwise-length) (g$208$28297 core-prim . bitwise-if) (g$208$28296 core-prim . bitwise-first-bit-set) (g$208$28295 core-prim . bitwise-copy-bit-field) (g$208$28294 core-prim . bitwise-copy-bit) (g$208$28293 core-prim . bitwise-bit-set?) (g$208$28292 core-prim . bitwise-bit-field) (g$208$28291 core-prim . bitwise-bit-count) (g$208$28290 core-prim . bitwise-xor) (g$208$28289 core-prim . bitwise-ior) (g$208$28288 core-prim . bitwise-and) (g$208$28287 core-prim . bitwise-not) (g$208$28286 core-prim . bitwise-arithmetic-shift-right) (g$208$28285 core-prim . bitwise-arithmetic-shift-left) (g$208$28284 core-prim . bitwise-arithmetic-shift) (g$208$28283 core-prim . zero?) (g$208$28282 core-prim . vector?) (g$208$28281 core-prim . vector-set!) (g$208$28280 core-prim . vector-ref) (g$208$28279 core-prim . vector-map) (g$208$28278 core-prim . vector-length) (g$208$28277 core-prim . vector-for-each) (g$208$28276 core-prim . vector-fill!) (g$208$28275 core-prim . vector->list) (g$208$28274 core-prim . vector) (g$208$28273 core-prim . values) (g$208$28272 core-prim . truncate) (g$208$28271 core-prim . tan) (g$208$28270 core-prim . symbol?) (g$208$28269 core-prim . symbol=?) (g$208$28268 core-prim . symbol->string) (g$208$28267 core-prim . substring) (g$208$28266 core-prim . string?) (g$208$28265 core-prim . string>?) (g$208$28264 core-prim . string>=?) (g$208$28263 core-prim . string=?) (g$208$28262 core-prim . string<?) (g$208$28261 core-prim . string<=?) (g$208$28260 core-prim . string-ref) (g$208$28259 core-prim . string-length) (g$208$28258 core-prim . string-for-each) (g$208$28257 core-prim . string-copy) (g$208$28256 core-prim . string-append) (g$208$28255 core-prim . string->symbol) (g$208$28254 core-prim . string->number) (g$208$28253 core-prim . string->list) (g$208$28252 core-prim . string) (g$208$28251 core-prim . sqrt) (g$208$28250 core-prim . sin) (g$208$28249 core-prim . round) (g$208$28248 core-prim . reverse) (g$208$28247 core-prim . real?) (g$208$28246 core-prim . real-valued?) (g$208$28245 core-prim . real-part) (g$208$28244 core-prim . rationalize) (g$208$28243 core-prim . rational?) (g$208$28242 core-prim . rational-valued?) (g$208$28241 core-prim . procedure?) (g$208$28240 core-prim . positive?) (g$208$28239 core-prim . pair?) (g$208$28238 core-prim . odd?) (g$208$28237 core-prim . numerator) (g$208$28236 core-prim . number?) (g$208$28235 core-prim . number->string) (g$208$28234 core-prim . null?) (g$208$28233 core-prim . not) (g$208$28232 core-prim . negative?) (g$208$28231 core-prim . nan?) (g$208$28230 core-prim . min) (g$208$28229 core-prim . max) (g$208$28228 core-prim . map) (g$208$28227 core-prim . make-vector) (g$208$28226 core-prim . make-string) (g$208$28225 core-prim . make-rectangular) (g$208$28224 core-prim . make-polar) (g$208$28223 core-prim . magnitude) (g$208$28222 core-prim . log) (g$208$28221 core-prim . list?) (g$208$28220 core-prim . list-tail) (g$208$28219 core-prim . list-ref) (g$208$28218 core-prim . list->vector) (g$208$28217 core-prim . list->string) (g$208$28216 core-prim . list) (g$208$28215 core-prim . length) (g$208$28214 core-prim . lcm) (g$208$28213 core-prim . integer?) (g$208$28212 core-prim . integer-valued?) (g$208$28211 core-prim . integer->char) (g$208$28210 core-prim . infinite?) (g$208$28209 core-prim . inexact?) (g$208$28208 core-prim . inexact) (g$208$28207 core-prim . imag-part) (g$208$28206 core-prim . gcd) (g$208$28205 core-prim . for-each) (g$208$28204 core-prim . floor) (g$208$28203 core-prim . finite?) (g$208$28202 core-prim . expt) (g$208$28201 core-prim . exp) (g$208$28200 core-prim . exact?) (g$208$28199 core-prim . exact-integer-sqrt) (g$208$28198 core-prim . exact) (g$208$28197 core-prim . even?) (g$208$28196 core-prim . error) (g$208$28195 core-prim . eqv?) (g$208$28194 core-prim . equal?) (g$208$28193 core-prim . eq?) (g$208$28192 core-prim . dynamic-wind) (g$208$28191 core-prim . div0-and-mod0) (g$208$28190 core-prim . mod0) (g$208$28189 core-prim . div0) (g$208$28188 core-prim . div-and-mod) (g$208$28187 core-prim . mod) (g$208$28186 core-prim . div) (g$208$28185 core-prim . denominator) (g$208$28184 core-prim . cos) (g$208$28183 core-prim . cons) (g$208$28182 core-prim . complex?) (g$208$28181 core-prim . char?) (g$208$28180 core-prim . char>?) (g$208$28179 core-prim . char>=?) (g$208$28178 core-prim . char=?) (g$208$28177 core-prim . char<?) (g$208$28176 core-prim . char<=?) (g$208$28175 core-prim . char->integer) (g$208$28174 core-prim . ceiling) (g$208$28173 core-prim . call-with-values) (g$208$28172 core-prim . call/cc) (g$208$28171 core-prim . call-with-current-continuation) (g$208$28170 core-prim . cddddr) (g$208$28169 core-prim . cdddar) (g$208$28168 core-prim . cddadr) (g$208$28167 core-prim . cddaar) (g$208$28166 core-prim . cdaddr) (g$208$28165 core-prim . cdadar) (g$208$28164 core-prim . cdaadr) (g$208$28163 core-prim . cdaaar) (g$208$28162 core-prim . cadddr) (g$208$28161 core-prim . caddar) (g$208$28160 core-prim . cadadr) (g$208$28159 core-prim . cadaar) (g$208$28158 core-prim . caaddr) (g$208$28157 core-prim . caadar) (g$208$28156 core-prim . caaadr) (g$208$28155 core-prim . caaaar) (g$208$28154 core-prim . cdddr) (g$208$28153 core-prim . cddar) (g$208$28152 core-prim . cdadr) (g$208$28151 core-prim . cdaar) (g$208$28150 core-prim . caddr) (g$208$28149 core-prim . cadar) (g$208$28148 core-prim . caadr) (g$208$28147 core-prim . caaar) (g$208$28146 core-prim . cddr) (g$208$28145 core-prim . cdar) (g$208$28144 core-prim . cadr) (g$208$28143 core-prim . caar) (g$208$28142 core-prim . cdr) (g$208$28141 core-prim . car) (g$208$28140 core-prim . boolean?) (g$208$28139 core-prim . boolean=?) (g$208$28138 core-prim . atan) (g$208$28137 core-prim . assertion-violation) (g$208$28136 core-prim . asin) (g$208$28135 core-prim . apply) (g$208$28134 core-prim . append) (g$208$28133 core-prim . angle) (g$208$28132 core-prim . acos) (g$208$28131 core-prim . abs) (g$208$28130 core-prim . /) (g$208$28129 core-prim . *) (g$208$28128 core-prim . -) (g$208$28127 core-prim . +) (g$208$28126 core-prim . >=) (g$208$28125 core-prim . >) (g$208$28124 core-prim . =) (g$208$28123 core-prim . <=) (g$208$28122 core-prim . <) (g$208$28121 core-prim . let*-values) (g$208$28120 $core-rtd &no-nans-rtd &no-nans-rcd) (g$208$28119 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$208$28118 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$208$28117 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$208$28116 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$208$28115 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$208$28114 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$208$28113 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$208$28112 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$208$28111 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$208$28110 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$208$28109 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$208$28108 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$208$28107 $core-rtd &i/o-rtd &i/o-rcd) (g$208$28106 $core-rtd &undefined-rtd &undefined-rcd) (g$208$28105 $core-rtd &syntax-rtd &syntax-rcd) (g$208$28104 $core-rtd &lexical-rtd &lexical-rcd) (g$208$28103 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$208$28102 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$208$28101 $core-rtd &who-rtd &who-rcd) (g$208$28100 $core-rtd &irritants-rtd &irritants-rcd) (g$208$28099 $core-rtd &assertion-rtd &assertion-rcd) (g$208$28098 $core-rtd &violation-rtd &violation-rcd) (g$208$28097 $core-rtd &error-rtd &error-rcd) (g$208$28096 $core-rtd &serious-rtd &serious-rcd) (g$208$28095 $core-rtd &warning-rtd &warning-rcd) (g$208$28094 $core-rtd &message-rtd &message-rcd) (g$208$28093 $core-rtd &condition-rtd &condition-rcd) (g$208$28092 macro . define-condition-type) (g$208$28091 macro . define-enumeration) (g$208$28090 macro . define-record-type) (g$208$28089 macro . parent-rtd) (g$208$28088 macro . nongenerative) (g$208$28087 macro . opaque) (g$208$28086 macro . sealed) (g$208$28085 macro . protocol) (g$208$28084 macro . parent) (g$208$28083 macro . immutable) (g$208$28082 macro . mutable) (g$208$28081 macro . fields) (g$208$28080 macro . error-handling-mode) (g$208$28079 macro . file-options) (g$208$28078 macro . buffer-mode) (g$208$28077 macro . eol-style) (g$208$28076 macro . guard) (g$208$28075 macro . trace-define) (g$208$28074 macro . trace-lambda) (g$208$28073 macro . unsyntax-splicing) (g$208$28072 macro . unsyntax) (g$208$28071 macro . unquote-splicing) (g$208$28070 macro . unquote) (g$208$28069 macro . _) (g$208$28068 macro . else) (g$208$28067 macro . =>) (g$208$28066 macro . |...|) (g$208$28065 macro . assert) (g$208$28064 macro . endianness) (g$208$28063 macro . delay) (g$208$28062 macro . time) (g$208$28061 macro . or) (g$208$28060 macro . and) (g$208$28059 macro . do) (g$208$28058 macro . cond) (g$208$28057 macro . let*) (g$208$28056 macro . let-values) (g$208$28055 macro . let) (g$208$28054 macro . identifier-syntax) (g$208$28053 macro . with-syntax) (g$208$28052 macro . quasisyntax) (g$208$28051 macro . quasiquote) (g$208$28050 macro . syntax-rules) (g$208$28049 macro . include) (g$208$28048 macro . define-struct) (g$208$28047 core-macro . record-constructor-descriptor) (g$208$28046 core-macro . record-type-descriptor) (g$208$28045 core-macro . case) (g$208$28044 core-macro . parameterize) (g$208$28043 core-macro . unless) (g$208$28042 core-macro . when) (g$208$28041 core-macro . if) (g$208$28040 core-macro . letrec*) (g$208$28039 core-macro . letrec) (g$208$28038 core-macro . type-descriptor) (g$208$28037 core-macro . case-lambda) (g$208$28036 core-macro . lambda) (g$208$28035 core-macro . syntax) (g$208$28034 core-macro . syntax-case) (g$208$28033 core-macro . quote) (g$208$28032 core-macro . foreign-call) (g$208$28031 letrec-syntax) (g$208$28030 let-syntax) (g$208$28029 set!) (g$208$28028 import) (g$208$28027 begin) (g$208$28026 module) (g$208$28025 define-syntax) (g$208$28024 define)) values values '#f) (g$208$15512 'g$208$28763 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g$208$28730) (eval-core . g$208$28729) (set-symbol-value! . g$208$28728) (symbol-value . g$208$28727) (gensym . g$208$28726) (void . g$208$28725)) '() values values '#f))


(begin (define g$208$28022 '#f) ((lambda (g$208$28006) (begin (set! g$208$28006 (lambda (g$208$28014) ((lambda (g$208$28016) (begin (g$208$27998 g$208$28016) (if '#f '#f (void)))) (with-input-from-file g$208$28014 (lambda () ((letrec ((g$208$28018 (lambda () ((lambda (g$208$28020) (if (eof-object? g$208$28020) '() (cons g$208$28020 (g$208$28018)))) (g$208$14921))))) g$208$28018))))))) (begin (set! g$208$28022 g$208$28006) ((lambda (g$208$28008) (begin (if (= (length g$208$28008) '2) (void) (begin (display '"provide a script name argument\n") (exit '17))) ((lambda (g$208$28010 g$208$28011) (g$208$28006 (car g$208$28011))) (car g$208$28008) (cdr g$208$28008)))) (command-line)) g$208$28001))) '#f))


