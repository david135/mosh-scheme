;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$3456$12323 '#f) (define g$3456$12320 '#f) ((lambda (g$3456$12213 g$3456$12300) (begin (set! g$3456$12213 (lambda g$3456$12316 ((lambda (g$3456$12317) (if (= g$3456$12317 '1) (apply (lambda (g$3456$12302) (g$3456$12213 g$3456$12302 (lambda (g$3456$12304) g$3456$12304))) g$3456$12316) (if (= g$3456$12317 '2) (apply (lambda (g$3456$12306 g$3456$12307) (begin (if (procedure? g$3456$12307) (void) (error 'assert '"assertion failed" '(procedure? fender))) ((lambda (g$3456$12310) (lambda g$3456$12314 ((lambda (g$3456$12315) (if (= g$3456$12315 '0) (apply (lambda () g$3456$12310) g$3456$12314) (if (= g$3456$12315 '1) (apply (lambda (g$3456$12312) (set! g$3456$12310 (g$3456$12307 g$3456$12312))) g$3456$12314) (error 'apply '"invalid arg count")))) (length g$3456$12314)))) (g$3456$12307 g$3456$12306)))) g$3456$12316) (error 'apply '"invalid arg count")))) (length g$3456$12316)))) (set! g$3456$12300 (lambda (g$3456$12318) (error 'file-options-spec '"not implemented"))) (begin (set! g$3456$12320 g$3456$12300) (set! g$3456$12323 g$3456$12213)))) '#f '#f))


(begin (define g$3456$12401 '#f) (define g$3456$12400 '#f) (define g$3456$12399 '#f) (define g$3456$12398 '#f) (define g$3456$12397 '#f) (define g$3456$12396 '#f) ((lambda (g$3456$12325 g$3456$12327 g$3456$12329 g$3456$12331 g$3456$12333 g$3456$12335) (begin (set! g$3456$12325 (g$3456$12323 (lambda (g$3456$12337) '#f) (lambda (g$3456$12339) (begin (if (procedure? g$3456$12339) (void) (error 'assert '"assertion failed" '(procedure? p))) g$3456$12339)))) (set! g$3456$12327 (lambda (g$3456$12341) ((lambda (g$3456$12343) (begin (set! g$3456$12343 (lambda (g$3456$12345) ((lambda (g$3456$12347) (if g$3456$12347 g$3456$12347 ((lambda (g$3456$12349) (if g$3456$12349 g$3456$12349 ((lambda (g$3456$12351) (if g$3456$12351 g$3456$12351 ((lambda (g$3456$12353) (if g$3456$12353 g$3456$12353 (begin '#f (number? g$3456$12345)))) (boolean? g$3456$12345)))) (symbol? g$3456$12345)))) (char? g$3456$12345)))) (null? g$3456$12345)))) (not (g$3456$12343 g$3456$12341)))) '#f))) (set! g$3456$12329 (lambda (g$3456$12355) ((lambda (g$3456$12357) (begin (set! g$3456$12357 (lambda (g$3456$12359) (if (pair? g$3456$12359) ((lambda (g$3456$12361) (if (memv g$3456$12361 '(quote)) (if (if g$3456$12355 (begin '#f (g$3456$12327 (cadr g$3456$12359))) '#f) ((lambda (g$3456$12386) (begin (set-symbol-value! g$3456$12386 (cadr g$3456$12359)) g$3456$12386)) (gensym)) g$3456$12359) (if (memv g$3456$12361 '(case-lambda)) (cons 'case-lambda (map (lambda (g$3456$12384) (cons (car g$3456$12384) (map g$3456$12357 (cdr g$3456$12384)))) (cdr g$3456$12359))) (if (memv g$3456$12361 '(lambda)) (cons* 'lambda (cadr g$3456$12359) (map g$3456$12357 (cddr g$3456$12359))) (if (memv g$3456$12361 '(letrec)) ((lambda (g$3456$12376 g$3456$12377) ((lambda (g$3456$12380 g$3456$12381) (cons* 'letrec (map list g$3456$12380 (map g$3456$12357 g$3456$12381)) (map g$3456$12357 g$3456$12377))) (map car g$3456$12376) (map cadr g$3456$12376))) (cadr g$3456$12359) (cddr g$3456$12359)) (if (memv g$3456$12361 '(letrec*)) ((lambda (g$3456$12368 g$3456$12369) ((lambda (g$3456$12372 g$3456$12373) (cons* 'letrec* (map list g$3456$12372 (map g$3456$12357 g$3456$12373)) (map g$3456$12357 g$3456$12369))) (map car g$3456$12368) (map cadr g$3456$12368))) (cadr g$3456$12359) (cddr g$3456$12359)) (if (memv g$3456$12361 '(begin)) (cons 'begin (map g$3456$12357 (cdr g$3456$12359))) (if (memv g$3456$12361 '(set!)) (list 'set! (cadr g$3456$12359) (g$3456$12357 (caddr g$3456$12359))) (if (memv g$3456$12361 '(primitive)) ((lambda (g$3456$12362) ((lambda (g$3456$12364) (if g$3456$12364 ((lambda (g$3456$12366) g$3456$12366) g$3456$12364) g$3456$12362)) ((g$3456$12325) g$3456$12362))) (cadr g$3456$12359)) (if (memv g$3456$12361 '(define)) g$3456$12359 (if (list? g$3456$12359) (map g$3456$12357 g$3456$12359) (error 'rewrite '"invalid form ~s ~s" g$3456$12359 (list? g$3456$12359))))))))))))) (car g$3456$12359)) g$3456$12359))) g$3456$12357)) '#f))) (set! g$3456$12331 ((lambda (g$3456$12388) (not (eq? (eval-core (list 'quote g$3456$12388)) (eval-core (list 'quote g$3456$12388))))) (cons '1 '2))) (set! g$3456$12333 (lambda (g$3456$12390) ((g$3456$12329 g$3456$12331) g$3456$12390))) (set! g$3456$12335 (lambda (g$3456$12392 g$3456$12393) (begin (pretty-print ((g$3456$12329 '#f) g$3456$12392) g$3456$12393) (newline g$3456$12393)))) (begin (set! g$3456$12396 g$3456$12335) (set! g$3456$12397 g$3456$12333) (set! g$3456$12398 g$3456$12331) (set! g$3456$12399 g$3456$12329) (set! g$3456$12400 g$3456$12327) (set! g$3456$12401 g$3456$12325)))) '#f '#f '#f '#f '#f '#f))


(void)


(begin (define g$3456$12883 '#f) (define g$3456$12882 '#f) (define g$3456$12881 '#f) (define g$3456$12880 '#f) (define g$3456$12879 '#f) (define g$3456$12878 '#f) (define g$3456$12877 '#f) (define g$3456$12876 '#f) (define g$3456$12875 '#f) (define g$3456$12874 '#f) (define g$3456$12873 '#f) (define g$3456$12872 '#f) (define g$3456$12871 '#f) (define g$3456$12870 '#f) (define g$3456$12869 '#f) (define g$3456$12868 '#f) (define g$3456$12867 '#f) (define g$3456$12866 '#f) (define g$3456$12865 '#f) (define g$3456$12864 '#f) (define g$3456$12863 '#f) (define g$3456$12862 '#f) (define g$3456$12861 '#f) (define g$3456$12860 '#f) (define g$3456$12859 '#f) (define g$3456$12858 '#f) (define g$3456$12857 '#f) (define g$3456$12856 '#f) (define g$3456$12855 '#f) (define g$3456$12854 '#f) (define g$3456$12853 '#f) (define g$3456$12852 '#f) (define g$3456$12851 '#f) (define g$3456$12850 '#f) (define g$3456$12849 '#f) (define g$3456$12848 '#f) (define g$3456$12847 '#f) (define g$3456$12846 '#f) (define g$3456$12845 '#f) (define g$3456$12844 '#f) (define g$3456$12843 '#f) (define g$3456$12842 '#f) (define g$3456$12841 '#f) (define g$3456$12840 '#f) (define g$3456$12839 '#f) (define g$3456$12838 '#f) (define g$3456$12837 '#f) (define g$3456$12836 '#f) (define g$3456$12835 '#f) ((lambda (g$3456$12455 g$3456$12457 g$3456$12460 g$3456$12462 g$3456$12464 g$3456$12466 g$3456$12468 g$3456$12470 g$3456$12472 g$3456$12474 g$3456$12476 g$3456$12478 g$3456$12480 g$3456$12482 g$3456$12484 g$3456$12486 g$3456$12488 g$3456$12490 g$3456$12492 g$3456$12494 g$3456$12496 g$3456$12498 g$3456$12500 g$3456$12502 g$3456$12504 g$3456$12506 g$3456$12508 g$3456$12510 g$3456$12512 g$3456$12514 g$3456$12516 g$3456$12518 g$3456$12520 g$3456$12522 g$3456$12524 g$3456$12526 g$3456$12528 g$3456$12530 g$3456$12532 g$3456$12534 g$3456$12536 g$3456$12538 g$3456$12540 g$3456$12542 g$3456$12544 g$3456$12546 g$3456$12548 g$3456$12550 g$3456$12552) (begin (set! g$3456$12455 (lambda () ((lambda (g$3456$12554) ((lambda (g$3456$12556) (begin (set! g$3456$12556 (lambda (g$3456$12558 g$3456$12559) (if (memq g$3456$12558 g$3456$12559) g$3456$12559 (cons g$3456$12558 g$3456$12559)))) (lambda g$3456$12564 ((lambda (g$3456$12565) (if (= g$3456$12565 '0) (apply (lambda () g$3456$12554) g$3456$12564) (if (= g$3456$12565 '1) (apply (lambda (g$3456$12562) (set! g$3456$12554 (g$3456$12556 g$3456$12562 g$3456$12554))) g$3456$12564) (error 'apply '"invalid arg count")))) (length g$3456$12564))))) '#f)) '()))) (set! g$3456$12457 (g$3456$12323 (g$3456$12455) (lambda (g$3456$12566) (begin (if (procedure? g$3456$12566) (void) (error 'current-library-collection '"not a procedure" g$3456$12566)) g$3456$12566)))) (set! g$3456$12460 (lambda (g$3456$12568 g$3456$12569 g$3456$12570 g$3456$12571 g$3456$12572 g$3456$12573 g$3456$12574 g$3456$12575 g$3456$12576 g$3456$12577 g$3456$12578) (vector 'g$3456$12459 g$3456$12568 g$3456$12569 g$3456$12570 g$3456$12571 g$3456$12572 g$3456$12573 g$3456$12574 g$3456$12575 g$3456$12576 g$3456$12577 g$3456$12578))) (set! g$3456$12462 (lambda (g$3456$12590) (if (vector? g$3456$12590) (if (= (vector-length g$3456$12590) (+ '1 (length '(id name version imp* vis* inv* subst env visit-state invoke-state visible?)))) (begin '#f (eq? (vector-ref g$3456$12590 '0) 'g$3456$12459)) '#f) '#f))) (set! g$3456$12464 (lambda (g$3456$12592) (if (g$3456$12462 g$3456$12592) (vector-ref g$3456$12592 '1) (error 'library-id '"~s is not of type ~s" g$3456$12592 'library)))) (set! g$3456$12466 (lambda (g$3456$12594) (if (g$3456$12462 g$3456$12594) (vector-ref g$3456$12594 '2) (error 'library-name '"~s is not of type ~s" g$3456$12594 'library)))) (set! g$3456$12468 (lambda (g$3456$12596) (if (g$3456$12462 g$3456$12596) (vector-ref g$3456$12596 '3) (error 'library-version '"~s is not of type ~s" g$3456$12596 'library)))) (set! g$3456$12470 (lambda (g$3456$12598) (if (g$3456$12462 g$3456$12598) (vector-ref g$3456$12598 '4) (error 'library-imp* '"~s is not of type ~s" g$3456$12598 'library)))) (set! g$3456$12472 (lambda (g$3456$12600) (if (g$3456$12462 g$3456$12600) (vector-ref g$3456$12600 '5) (error 'library-vis* '"~s is not of type ~s" g$3456$12600 'library)))) (set! g$3456$12474 (lambda (g$3456$12602) (if (g$3456$12462 g$3456$12602) (vector-ref g$3456$12602 '6) (error 'library-inv* '"~s is not of type ~s" g$3456$12602 'library)))) (set! g$3456$12476 (lambda (g$3456$12604) (if (g$3456$12462 g$3456$12604) (vector-ref g$3456$12604 '7) (error 'library-subst '"~s is not of type ~s" g$3456$12604 'library)))) (set! g$3456$12478 (lambda (g$3456$12606) (if (g$3456$12462 g$3456$12606) (vector-ref g$3456$12606 '8) (error 'library-env '"~s is not of type ~s" g$3456$12606 'library)))) (set! g$3456$12480 (lambda (g$3456$12608) (if (g$3456$12462 g$3456$12608) (vector-ref g$3456$12608 '9) (error 'library-visit-state '"~s is not of type ~s" g$3456$12608 'library)))) (set! g$3456$12482 (lambda (g$3456$12610) (if (g$3456$12462 g$3456$12610) (vector-ref g$3456$12610 '10) (error 'library-invoke-state '"~s is not of type ~s" g$3456$12610 'library)))) (set! g$3456$12484 (lambda (g$3456$12612) (if (g$3456$12462 g$3456$12612) (vector-ref g$3456$12612 '11) (error 'library-visible? '"~s is not of type ~s" g$3456$12612 'library)))) (set! g$3456$12486 (lambda (g$3456$12614 g$3456$12615) (if (g$3456$12462 g$3456$12614) (vector-set! g$3456$12614 '1 g$3456$12615) (error 'set-library-id! '"~s is not of type ~s" g$3456$12614 'library)))) (set! g$3456$12488 (lambda (g$3456$12618 g$3456$12619) (if (g$3456$12462 g$3456$12618) (vector-set! g$3456$12618 '2 g$3456$12619) (error 'set-library-name! '"~s is not of type ~s" g$3456$12618 'library)))) (set! g$3456$12490 (lambda (g$3456$12622 g$3456$12623) (if (g$3456$12462 g$3456$12622) (vector-set! g$3456$12622 '3 g$3456$12623) (error 'set-library-version! '"~s is not of type ~s" g$3456$12622 'library)))) (set! g$3456$12492 (lambda (g$3456$12626 g$3456$12627) (if (g$3456$12462 g$3456$12626) (vector-set! g$3456$12626 '4 g$3456$12627) (error 'set-library-imp*! '"~s is not of type ~s" g$3456$12626 'library)))) (set! g$3456$12494 (lambda (g$3456$12630 g$3456$12631) (if (g$3456$12462 g$3456$12630) (vector-set! g$3456$12630 '5 g$3456$12631) (error 'set-library-vis*! '"~s is not of type ~s" g$3456$12630 'library)))) (set! g$3456$12496 (lambda (g$3456$12634 g$3456$12635) (if (g$3456$12462 g$3456$12634) (vector-set! g$3456$12634 '6 g$3456$12635) (error 'set-library-inv*! '"~s is not of type ~s" g$3456$12634 'library)))) (set! g$3456$12498 (lambda (g$3456$12638 g$3456$12639) (if (g$3456$12462 g$3456$12638) (vector-set! g$3456$12638 '7 g$3456$12639) (error 'set-library-subst! '"~s is not of type ~s" g$3456$12638 'library)))) (set! g$3456$12500 (lambda (g$3456$12642 g$3456$12643) (if (g$3456$12462 g$3456$12642) (vector-set! g$3456$12642 '8 g$3456$12643) (error 'set-library-env! '"~s is not of type ~s" g$3456$12642 'library)))) (set! g$3456$12502 (lambda (g$3456$12646 g$3456$12647) (if (g$3456$12462 g$3456$12646) (vector-set! g$3456$12646 '9 g$3456$12647) (error 'set-library-visit-state! '"~s is not of type ~s" g$3456$12646 'library)))) (set! g$3456$12504 (lambda (g$3456$12650 g$3456$12651) (if (g$3456$12462 g$3456$12650) (vector-set! g$3456$12650 '10 g$3456$12651) (error 'set-library-invoke-state! '"~s is not of type ~s" g$3456$12650 'library)))) (set! g$3456$12506 (lambda (g$3456$12654 g$3456$12655) (if (g$3456$12462 g$3456$12654) (vector-set! g$3456$12654 '11 g$3456$12655) (error 'set-library-visible?! '"~s is not of type ~s" g$3456$12654 'library)))) (set! g$3456$12508 (lambda (g$3456$12658) (if (null? g$3456$12658) '() (error 'find-dependencies '"cannot handle deps yet")))) (set! g$3456$12510 (lambda (g$3456$12660) (letrec ((g$3456$12662 (lambda (g$3456$12664) (if (null? g$3456$12664) '#f (if (g$3456$12660 (car g$3456$12664)) (car g$3456$12664) (g$3456$12662 (cdr g$3456$12664))))))) (g$3456$12662 ((g$3456$12457)))))) (set! g$3456$12512 (g$3456$12323 '(".") (lambda (g$3456$12666) (if (if (list? g$3456$12666) (begin '#f (for-all string? g$3456$12666)) '#f) (map (lambda (g$3456$12668) g$3456$12668) g$3456$12666) (error 'library-path '"not a list of strings" g$3456$12666))))) (set! g$3456$12514 (lambda (g$3456$12670) (call-with-values (lambda () (open-string-output-port)) (lambda (g$3456$12672 g$3456$12673) ((lambda (g$3456$12676) (begin (set! g$3456$12676 (lambda (g$3456$12678) (if (<= '0 g$3456$12678 '9) (display g$3456$12678 g$3456$12672) (display (integer->char (+ (char->integer '#\A) (- g$3456$12678 '10))) g$3456$12672)))) (begin (letrec ((g$3456$12680 (lambda (g$3456$12682) (if (null? g$3456$12682) '#f (begin (display '"/" g$3456$12672) (for-each (lambda (g$3456$12684) (if ((lambda (g$3456$12686) (if g$3456$12686 g$3456$12686 ((lambda (g$3456$12688) (if g$3456$12688 g$3456$12688 ((lambda (g$3456$12690) (if g$3456$12690 g$3456$12690 (begin '#f (memv g$3456$12684 '(#\- #\. #\_ #\~))))) (char<=? '#\0 g$3456$12684 '#\9)))) (char<=? '#\A g$3456$12684 '#\Z)))) (char<=? '#\a g$3456$12684 '#\z)) (display g$3456$12684 g$3456$12672) (begin (display '"%" g$3456$12672) ((lambda (g$3456$12692) (begin (g$3456$12676 (quotient g$3456$12692 '16)) (g$3456$12676 (remainder g$3456$12692 '16)))) (char->integer g$3456$12684))))) (string->list (symbol->string (car g$3456$12682)))) (g$3456$12680 (cdr g$3456$12682))))))) (g$3456$12680 g$3456$12670)) (g$3456$12673)))) '#f))))) (set! g$3456$12516 (g$3456$12323 (lambda (g$3456$12694) ((lambda (g$3456$12696) (letrec ((g$3456$12698 (lambda (g$3456$12700) (if (pair? g$3456$12700) (begin '#f (letrec ((g$3456$12702 (lambda (g$3456$12704) (if (null? g$3456$12704) (g$3456$12698 (cdr g$3456$12700)) ((lambda (g$3456$12706) (if (file-exists? g$3456$12706) g$3456$12706 (g$3456$12702 (cdr g$3456$12704)))) (string-append (car g$3456$12700) g$3456$12696 (car g$3456$12704))))))) (g$3456$12702 '(".ss" ".sls")))) '#f)))) (g$3456$12698 (g$3456$12512)))) (g$3456$12514 g$3456$12694))) (lambda (g$3456$12708) (if (procedure? g$3456$12708) g$3456$12708 (error 'file-locator '"not a procedure" g$3456$12708))))) (set! g$3456$12518 (g$3456$12323 (lambda (g$3456$12710) ((lambda (g$3456$12712) (if (string? g$3456$12712) (begin '#f (with-input-from-file g$3456$12712 read)) '#f)) ((g$3456$12516) g$3456$12710))) (lambda (g$3456$12714) (if (procedure? g$3456$12714) g$3456$12714 (error 'library-locator '"not a procedure" g$3456$12714))))) (set! g$3456$12520 (g$3456$12323 (lambda (g$3456$12716) (error 'library-expander '"not initialized")) (lambda (g$3456$12718) (if (procedure? g$3456$12718) g$3456$12718 (error 'library-expander '"not a procedure" g$3456$12718))))) (set! g$3456$12522 (g$3456$12323 '())) (set! g$3456$12524 (lambda (g$3456$12720) (begin (if (member g$3456$12720 (g$3456$12522)) (error '#f '"circular attempt to import library was detected" g$3456$12720) (void)) ((lambda (g$3456$12724 g$3456$12725) ((lambda (g$3456$12728) (dynamic-wind g$3456$12728 (lambda () ((lambda (g$3456$12730) (begin (if g$3456$12730 (void) (error '#f '"cannot find library" g$3456$12720)) ((g$3456$12520) g$3456$12730) ((lambda (g$3456$12732) (if g$3456$12732 g$3456$12732 (begin '#f (error '#f '"handling external library did not yield the currect library" g$3456$12720)))) (g$3456$12510 (lambda (g$3456$12734) (equal? (g$3456$12466 g$3456$12734) g$3456$12720)))))) ((g$3456$12518) g$3456$12720))) g$3456$12728)) (lambda () ((lambda (g$3456$12736) (begin (g$3456$12724 g$3456$12725) (set! g$3456$12725 g$3456$12736))) (g$3456$12724))))) g$3456$12522 (cons g$3456$12720 (g$3456$12522)))))) (set! g$3456$12526 (lambda (g$3456$12738) ((lambda (g$3456$12740) (if g$3456$12740 g$3456$12740 (begin '#f (g$3456$12524 g$3456$12738)))) (g$3456$12510 (lambda (g$3456$12742) (equal? (g$3456$12466 g$3456$12742) g$3456$12738)))))) (set! g$3456$12528 (lambda (g$3456$12744) (if (g$3456$12510 (lambda (g$3456$12746) (equal? (g$3456$12466 g$3456$12746) g$3456$12744))) (begin '#f '#t) '#f))) (set! g$3456$12530 (lambda (g$3456$12748) ((lambda (g$3456$12750) ((lambda (g$3456$12752) (if g$3456$12752 g$3456$12752 (begin '#f (error '#f '"cannot find library with required spec" g$3456$12748)))) (g$3456$12510 (lambda (g$3456$12754) (eq? g$3456$12750 (g$3456$12464 g$3456$12754)))))) (car g$3456$12748)))) (set! g$3456$12532 (make-eq-hashtable)) (set! g$3456$12534 (lambda (g$3456$12756) (begin ((lambda (g$3456$12758) (for-each (lambda (g$3456$12760) ((lambda (g$3456$12762 g$3456$12763) ((lambda (g$3456$12766) (hashtable-set! g$3456$12532 g$3456$12762 g$3456$12766)) ((lambda (g$3456$12768) (if (memv g$3456$12768 '(global)) (cons 'global (cons g$3456$12756 (cdr g$3456$12763))) (if (memv g$3456$12768 '(global-macro)) (cons 'global-macro (cons g$3456$12756 (cdr g$3456$12763))) (if (memv g$3456$12768 '(global-macro!)) (cons 'global-macro! (cons g$3456$12756 (cdr g$3456$12763))) g$3456$12763)))) (car g$3456$12763)))) (car g$3456$12760) (cdr g$3456$12760))) g$3456$12758)) (g$3456$12478 g$3456$12756)) ((g$3456$12457) g$3456$12756)))) (set! g$3456$12536 (lambda (g$3456$12769 g$3456$12770 g$3456$12771 g$3456$12772 g$3456$12773 g$3456$12774 g$3456$12775 g$3456$12776 g$3456$12777 g$3456$12778 g$3456$12779) ((lambda (g$3456$12791 g$3456$12792 g$3456$12793) (begin (if (if (symbol? g$3456$12769) (if (list? g$3456$12770) (begin '#f (list? g$3456$12771)) '#f) '#f) (void) (error 'install-library '"invalid spec with id/name/ver" g$3456$12769 g$3456$12770 g$3456$12771)) (if (g$3456$12528 g$3456$12770) (error 'install-library '"library is already installed" g$3456$12770) (void)) ((lambda (g$3456$12797) (g$3456$12534 g$3456$12797)) (g$3456$12460 g$3456$12769 g$3456$12770 g$3456$12771 g$3456$12791 g$3456$12792 g$3456$12793 g$3456$12775 g$3456$12776 g$3456$12777 g$3456$12778 g$3456$12779)))) (map g$3456$12530 g$3456$12772) (map g$3456$12530 g$3456$12773) (map g$3456$12530 g$3456$12774)))) (set! g$3456$12538 (lambda (g$3456$12799 g$3456$12800 g$3456$12801) (g$3456$12498 g$3456$12799 (cons (cons g$3456$12800 g$3456$12801) (g$3456$12476 g$3456$12799))))) (set! g$3456$12540 (lambda (g$3456$12805 g$3456$12806 g$3456$12807) (begin (g$3456$12500 g$3456$12805 (cons (cons g$3456$12806 g$3456$12807) (g$3456$12478 g$3456$12805))) (hashtable-set! g$3456$12532 g$3456$12806 g$3456$12807)))) (set! g$3456$12542 (lambda (g$3456$12811) (hashtable-ref g$3456$12532 g$3456$12811 '#f))) (set! g$3456$12544 (lambda (g$3456$12813) ((lambda (g$3456$12815) (if (procedure? g$3456$12815) (begin (g$3456$12504 g$3456$12813 (lambda () (error 'invoke '"circularity detected" g$3456$12813))) (for-each g$3456$12544 (g$3456$12474 g$3456$12813)) (g$3456$12504 g$3456$12813 (lambda () (error 'invoke '"first invoke did not return" g$3456$12813))) (g$3456$12815) (g$3456$12504 g$3456$12813 '#t)) (void))) (g$3456$12482 g$3456$12813)))) (set! g$3456$12546 (lambda (g$3456$12817) ((lambda (g$3456$12819) (if (procedure? g$3456$12819) (begin (g$3456$12502 g$3456$12817 (lambda () (error 'visit '"circularity detected" g$3456$12817))) (for-each g$3456$12544 (g$3456$12472 g$3456$12817)) (g$3456$12502 g$3456$12817 (lambda () (error 'invoke '"first visit did not return" g$3456$12817))) (g$3456$12819) (g$3456$12502 g$3456$12817 '#t)) (void))) (g$3456$12480 g$3456$12817)))) (set! g$3456$12548 (lambda (g$3456$12821) (g$3456$12544 (g$3456$12530 g$3456$12821)))) (set! g$3456$12550 (lambda g$3456$12831 ((lambda (g$3456$12832) (if (= g$3456$12832 '1) (apply (lambda (g$3456$12823) (letrec ((g$3456$12825 (lambda (g$3456$12827) (if (null? g$3456$12827) '() (if ((lambda (g$3456$12829) (if g$3456$12829 g$3456$12829 (begin '#f (g$3456$12484 (car g$3456$12827))))) g$3456$12823) (cons (car g$3456$12827) (g$3456$12825 (cdr g$3456$12827))) (g$3456$12825 (cdr g$3456$12827))))))) (g$3456$12825 ((g$3456$12457))))) g$3456$12831) (if (= g$3456$12832 '0) (apply (lambda () (g$3456$12550 '#f)) g$3456$12831) (error 'apply '"invalid arg count")))) (length g$3456$12831)))) (set! g$3456$12552 (lambda (g$3456$12833) (begin (if (g$3456$12462 g$3456$12833) (void) (error 'library-spec '"not a library" g$3456$12833)) (list (g$3456$12464 g$3456$12833) (g$3456$12466 g$3456$12833) (g$3456$12468 g$3456$12833))))) (begin (set! g$3456$12835 g$3456$12552) (set! g$3456$12836 g$3456$12550) (set! g$3456$12837 g$3456$12548) (set! g$3456$12838 g$3456$12546) (set! g$3456$12839 g$3456$12544) (set! g$3456$12840 g$3456$12542) (set! g$3456$12841 g$3456$12540) (set! g$3456$12842 g$3456$12538) (set! g$3456$12843 g$3456$12536) (set! g$3456$12844 g$3456$12534) (set! g$3456$12845 g$3456$12532) (set! g$3456$12846 g$3456$12530) (set! g$3456$12847 g$3456$12528) (set! g$3456$12848 g$3456$12526) (set! g$3456$12849 g$3456$12524) (set! g$3456$12850 g$3456$12522) (set! g$3456$12851 g$3456$12520) (set! g$3456$12852 g$3456$12518) (set! g$3456$12853 g$3456$12516) (set! g$3456$12854 g$3456$12514) (set! g$3456$12855 g$3456$12512) (set! g$3456$12856 g$3456$12510) (set! g$3456$12857 g$3456$12508) (set! g$3456$12858 g$3456$12506) (set! g$3456$12859 g$3456$12504) (set! g$3456$12860 g$3456$12502) (set! g$3456$12861 g$3456$12500) (set! g$3456$12862 g$3456$12498) (set! g$3456$12863 g$3456$12496) (set! g$3456$12864 g$3456$12494) (set! g$3456$12865 g$3456$12492) (set! g$3456$12866 g$3456$12490) (set! g$3456$12867 g$3456$12488) (set! g$3456$12868 g$3456$12486) (set! g$3456$12869 g$3456$12484) (set! g$3456$12870 g$3456$12482) (set! g$3456$12871 g$3456$12480) (set! g$3456$12872 g$3456$12478) (set! g$3456$12873 g$3456$12476) (set! g$3456$12874 g$3456$12474) (set! g$3456$12875 g$3456$12472) (set! g$3456$12876 g$3456$12470) (set! g$3456$12877 g$3456$12468) (set! g$3456$12878 g$3456$12466) (set! g$3456$12879 g$3456$12464) (set! g$3456$12880 g$3456$12462) (set! g$3456$12881 g$3456$12460) (set! g$3456$12882 g$3456$12457) (set! g$3456$12883 g$3456$12455)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$3456$13131 '#f) (define g$3456$13123 '#f) (define g$3456$13122 '#f) (define g$3456$13121 '#f) (define g$3456$13117 '#f) (define g$3456$13116 '#f) (define g$3456$13115 '#f) (define g$3456$13114 '#f) ((lambda (g$3456$12885 g$3456$12962 g$3456$12964 g$3456$12966 g$3456$13004 g$3456$13006 g$3456$13008 g$3456$13010) (begin (set! g$3456$12885 (lambda (g$3456$13012) (cons 'define (cons g$3456$13012 '('#f))))) (set! g$3456$12962 (lambda (g$3456$13014 g$3456$13015 g$3456$13016) (list 'lambda g$3456$13015 g$3456$13016))) (set! g$3456$12964 (lambda (g$3456$13020 g$3456$13021 g$3456$13022) ((lambda (g$3456$13026 g$3456$13028 g$3456$13030 g$3456$13032) (begin (set! g$3456$13026 (lambda (g$3456$13074) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! g$3456$13028 (lambda (g$3456$13058 g$3456$13059 g$3456$13060) (call-with-values (lambda () (letrec ((g$3456$13064 (lambda (g$3456$13066 g$3456$13067) (if (pair? g$3456$13066) (g$3456$13064 (cdr g$3456$13066) (+ g$3456$13067 '1)) (if (null? g$3456$13066) (values g$3456$13067 '=) (values g$3456$13067 '>=)))))) (g$3456$13064 g$3456$13060 '0))) (lambda (g$3456$13070 g$3456$13071) (list (list 'primitive g$3456$13071) g$3456$13059 (list 'quote g$3456$13070)))))) (set! g$3456$13030 (lambda (g$3456$13050 g$3456$13051 g$3456$13052 g$3456$13053) (list '(primitive apply) (g$3456$12962 g$3456$13050 g$3456$13052 g$3456$13053) g$3456$13051))) (set! g$3456$13032 (lambda (g$3456$13034 g$3456$13035 g$3456$13036) ((lambda (g$3456$13040 g$3456$13041) (list 'lambda g$3456$13040 (g$3456$12966 g$3456$13034 (list g$3456$13041) (list (list '(primitive length) g$3456$13040)) (letrec ((g$3456$13044 (lambda (g$3456$13046 g$3456$13047) (if (null? g$3456$13046) (g$3456$13026 g$3456$13034) (list 'if (g$3456$13028 g$3456$13034 g$3456$13041 (car g$3456$13046)) (g$3456$13030 g$3456$13034 g$3456$13040 (car g$3456$13046) (car g$3456$13047)) (g$3456$13044 (cdr g$3456$13046) (cdr g$3456$13047))))))) (g$3456$13044 g$3456$13021 g$3456$13036))))) (gensym) (gensym)))) (if (= (length g$3456$13022) '1) (g$3456$12962 g$3456$13020 (car g$3456$13021) (car g$3456$13022)) (g$3456$13032 g$3456$13020 g$3456$13021 g$3456$13022)))) '#f '#f '#f '#f))) (set! g$3456$12966 (lambda (g$3456$13076 g$3456$13077 g$3456$13078 g$3456$13079) (cons (g$3456$12962 g$3456$13076 g$3456$13077 g$3456$13079) g$3456$13078))) (set! g$3456$13004 (lambda (g$3456$13084 g$3456$13085) (letrec ((g$3456$13088 (lambda (g$3456$13090) (if (null? (cdr g$3456$13090)) (car g$3456$13090) (if (equal? (car g$3456$13090) (g$3456$13006)) (g$3456$13088 (cdr g$3456$13090)) (cons 'begin g$3456$13090)))))) (g$3456$13088 g$3456$13085)))) (set! g$3456$13006 (lambda () '((primitive void)))) (set! g$3456$13008 (lambda (g$3456$13092 g$3456$13093 g$3456$13094 g$3456$13095) (if (null? g$3456$13093) g$3456$13095 (list 'letrec (map list g$3456$13093 g$3456$13094) g$3456$13095)))) (set! g$3456$13010 (lambda (g$3456$13100 g$3456$13101 g$3456$13102 g$3456$13103) (if (null? g$3456$13101) g$3456$13103 (g$3456$12966 g$3456$13100 g$3456$13101 (map (lambda (g$3456$13108) (list 'quote '#f)) g$3456$13101) (g$3456$13004 g$3456$13100 (append (map (lambda (g$3456$13110 g$3456$13111) (list 'set! g$3456$13110 g$3456$13111)) g$3456$13101 g$3456$13102) (list g$3456$13103))))))) (begin (set! g$3456$13114 g$3456$13010) (set! g$3456$13115 g$3456$13008) (set! g$3456$13116 g$3456$13006) (set! g$3456$13117 g$3456$13004) (set! g$3456$13121 g$3456$12966) (set! g$3456$13122 g$3456$12964) (set! g$3456$13123 g$3456$12962) (set! g$3456$13131 g$3456$12885)))) '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$3456$23368 '#f) (define g$3456$23367 '#f) (define g$3456$23365 '#f) (define g$3456$23364 '#f) (define g$3456$23363 '#f) (define g$3456$23362 '#f) (define g$3456$23361 '#f) (define g$3456$23360 '#f) (define g$3456$23359 '#f) (define g$3456$23358 '#f) (define g$3456$23357 '#f) (define g$3456$23356 '#f) (define g$3456$23355 '#f) (define g$3456$23354 '#f) (define g$3456$23353 '#f) (define g$3456$23352 '#f) (define g$3456$23351 '#f) (define g$3456$23350 '#f) (define g$3456$23349 '#f) (define g$3456$23348 '#f) (define g$3456$23347 '#f) (define g$3456$23346 '#f) (define g$3456$23345 '#f) (define g$3456$23344 '#f) (define g$3456$23343 '#f) (define g$3456$23342 '#f) (define g$3456$23341 '#f) (define g$3456$23340 '#f) (define g$3456$23339 '#f) (define g$3456$23338 '#f) (define g$3456$23337 '#f) (define g$3456$23336 '#f) (define g$3456$23335 '#f) (define g$3456$23334 '#f) (define g$3456$23333 '#f) (define g$3456$23332 '#f) (define g$3456$23331 '#f) (define g$3456$23330 '#f) (define g$3456$23329 '#f) (define g$3456$23328 '#f) (define g$3456$23327 '#f) (define g$3456$23326 '#f) (define g$3456$23325 '#f) (define g$3456$23324 '#f) (define g$3456$23323 '#f) (define g$3456$23322 '#f) (define g$3456$23321 '#f) (define g$3456$23320 '#f) (define g$3456$23319 '#f) (define g$3456$23318 '#f) (define g$3456$23317 '#f) (define g$3456$23316 '#f) (define g$3456$23315 '#f) (define g$3456$23314 '#f) (define g$3456$23313 '#f) (define g$3456$23312 '#f) (define g$3456$23311 '#f) (define g$3456$23310 '#f) (define g$3456$23309 '#f) (define g$3456$23308 '#f) (define g$3456$23307 '#f) (define g$3456$23306 '#f) (define g$3456$23305 '#f) (define g$3456$23304 '#f) (define g$3456$23303 '#f) (define g$3456$23301 '#f) (define g$3456$23300 '#f) (define g$3456$23299 '#f) (define g$3456$23297 '#f) (define g$3456$23296 '#f) (define g$3456$23295 '#f) (define g$3456$23294 '#f) (define g$3456$23293 '#f) (define g$3456$23292 '#f) (define g$3456$23291 '#f) (define g$3456$23290 '#f) (define g$3456$23289 '#f) (define g$3456$23288 '#f) (define g$3456$23287 '#f) (define g$3456$23286 '#f) (define g$3456$23285 '#f) (define g$3456$23284 '#f) (define g$3456$23283 '#f) (define g$3456$23282 '#f) (define g$3456$23281 '#f) (define g$3456$23280 '#f) (define g$3456$23279 '#f) (define g$3456$23278 '#f) (define g$3456$23277 '#f) (define g$3456$23276 '#f) (define g$3456$23275 '#f) (define g$3456$23274 '#f) (define g$3456$23273 '#f) (define g$3456$23272 '#f) (define g$3456$23271 '#f) (define g$3456$23270 '#f) (define g$3456$23269 '#f) (define g$3456$23268 '#f) (define g$3456$23267 '#f) (define g$3456$23266 '#f) (define g$3456$23265 '#f) (define g$3456$23264 '#f) (define g$3456$23263 '#f) (define g$3456$23262 '#f) (define g$3456$23261 '#f) (define g$3456$23260 '#f) (define g$3456$23259 '#f) (define g$3456$23258 '#f) (define g$3456$23257 '#f) (define g$3456$23256 '#f) (define g$3456$23255 '#f) (define g$3456$23254 '#f) (define g$3456$23253 '#f) (define g$3456$23252 '#f) (define g$3456$23251 '#f) (define g$3456$23250 '#f) (define g$3456$23249 '#f) (define g$3456$23248 '#f) (define g$3456$23247 '#f) (define g$3456$23246 '#f) (define g$3456$23245 '#f) (define g$3456$23244 '#f) (define g$3456$23243 '#f) (define g$3456$23242 '#f) (define g$3456$23241 '#f) (define g$3456$23240 '#f) (define g$3456$23239 '#f) (define g$3456$23238 '#f) (define g$3456$23237 '#f) (define g$3456$23236 '#f) (define g$3456$23235 '#f) (define g$3456$23234 '#f) (define g$3456$23233 '#f) (define g$3456$23232 '#f) (define g$3456$23231 '#f) (define g$3456$23230 '#f) (define g$3456$23229 '#f) (define g$3456$23228 '#f) (define g$3456$23227 '#f) (define g$3456$23226 '#f) (define g$3456$23225 '#f) (define g$3456$23224 '#f) (define g$3456$23223 '#f) (define g$3456$23222 '#f) (define g$3456$23221 '#f) (define g$3456$23220 '#f) (define g$3456$23219 '#f) (define g$3456$23218 '#f) (define g$3456$23217 '#f) (define g$3456$23216 '#f) (define g$3456$23215 '#f) (define g$3456$23214 '#f) (define g$3456$23213 '#f) (define g$3456$23212 '#f) (define g$3456$23211 '#f) (define g$3456$23210 '#f) (define g$3456$23209 '#f) (define g$3456$23208 '#f) (define g$3456$23207 '#f) (define g$3456$23206 '#f) (define g$3456$23205 '#f) (define g$3456$23204 '#f) (define g$3456$23203 '#f) (define g$3456$23202 '#f) (define g$3456$23201 '#f) (define g$3456$23200 '#f) (define g$3456$23199 '#f) (define g$3456$23198 '#f) (define g$3456$23197 '#f) (define g$3456$23196 '#f) (define g$3456$23195 '#f) (define g$3456$23194 '#f) (define g$3456$23193 '#f) (define g$3456$23192 '#f) (define g$3456$23191 '#f) (define g$3456$23190 '#f) (define g$3456$23189 '#f) (define g$3456$23188 '#f) (define g$3456$23187 '#f) (define g$3456$23186 '#f) (define g$3456$23185 '#f) (define g$3456$23184 '#f) (define g$3456$23183 '#f) (define g$3456$23182 '#f) (define g$3456$23181 '#f) (define g$3456$23180 '#f) (define g$3456$23179 '#f) (define g$3456$23178 '#f) (define g$3456$23177 '#f) ((lambda (g$3456$13133 g$3456$13135 g$3456$13140 g$3456$13142 g$3456$13144 g$3456$13146 g$3456$13148 g$3456$13151 g$3456$13153 g$3456$13155 g$3456$13157 g$3456$13159 g$3456$13161 g$3456$13163 g$3456$13165 g$3456$13167 g$3456$13169 g$3456$13171 g$3456$13173 g$3456$13175 g$3456$13177 g$3456$13179 g$3456$13181 g$3456$13184 g$3456$13186 g$3456$13188 g$3456$13190 g$3456$13192 g$3456$13194 g$3456$13196 g$3456$13198 g$3456$13200 g$3456$13202 g$3456$13204 g$3456$13206 g$3456$13208 g$3456$13210 g$3456$13212 g$3456$13214 g$3456$13216 g$3456$13218 g$3456$13220 g$3456$13222 g$3456$13224 g$3456$13226 g$3456$13228 g$3456$13230 g$3456$13232 g$3456$13234 g$3456$13236 g$3456$13238 g$3456$13240 g$3456$13242 g$3456$13244 g$3456$13246 g$3456$13248 g$3456$13250 g$3456$13252 g$3456$13254 g$3456$13256 g$3456$13258 g$3456$13260 g$3456$13262 g$3456$13264 g$3456$13266 g$3456$13280 g$3456$13282 g$3456$13284 g$3456$13483 g$3456$13485 g$3456$13487 g$3456$13489 g$3456$13491 g$3456$13493 g$3456$13495 g$3456$13497 g$3456$13499 g$3456$13501 g$3456$13503 g$3456$13505 g$3456$13507 g$3456$13509 g$3456$13511 g$3456$13513 g$3456$13515 g$3456$13517 g$3456$13519 g$3456$13521 g$3456$13523 g$3456$13525 g$3456$13527 g$3456$13529 g$3456$13531 g$3456$13533 g$3456$13535 g$3456$13537 g$3456$13539 g$3456$13541 g$3456$13543 g$3456$13545 g$3456$13547 g$3456$13549 g$3456$13551 g$3456$13553 g$3456$13555 g$3456$13557 g$3456$13559 g$3456$13561 g$3456$13563 g$3456$13565 g$3456$13567 g$3456$13569 g$3456$13571 g$3456$13573 g$3456$13575 g$3456$13577 g$3456$13579 g$3456$13581 g$3456$13583 g$3456$13585 g$3456$13587 g$3456$13589 g$3456$13591 g$3456$13593 g$3456$13595 g$3456$13597 g$3456$13599 g$3456$13601 g$3456$13603 g$3456$13605 g$3456$13607 g$3456$13609 g$3456$13611 g$3456$13613 g$3456$13615 g$3456$13617 g$3456$13619 g$3456$13621 g$3456$13623 g$3456$13625 g$3456$13627 g$3456$13629 g$3456$13631 g$3456$13633 g$3456$13635 g$3456$13637 g$3456$13639 g$3456$13641 g$3456$13643 g$3456$13645 g$3456$13647 g$3456$13649 g$3456$13651 g$3456$13653 g$3456$13655 g$3456$13657 g$3456$13659 g$3456$13661 g$3456$13663 g$3456$13665 g$3456$13668 g$3456$13670 g$3456$13672 g$3456$13674 g$3456$13676 g$3456$13678 g$3456$13680 g$3456$13682 g$3456$13684 g$3456$13686 g$3456$13688 g$3456$13690 g$3456$13692 g$3456$13694 g$3456$13696 g$3456$13698 g$3456$13700 g$3456$13702 g$3456$13704 g$3456$13706 g$3456$13708 g$3456$13710 g$3456$13712 g$3456$13714 g$3456$13716 g$3456$13718 g$3456$13720 g$3456$13722 g$3456$13724) (begin (set! g$3456$13133 (lambda (g$3456$13726 g$3456$13727) (if (memq g$3456$13726 g$3456$13727) g$3456$13727 (cons g$3456$13726 g$3456$13727)))) (set! g$3456$13135 (lambda (g$3456$13730 g$3456$13731) (if (null? g$3456$13730) g$3456$13731 (if (memq (car g$3456$13730) g$3456$13731) (g$3456$13135 (cdr g$3456$13730) g$3456$13731) (cons (car g$3456$13730) (g$3456$13135 (cdr g$3456$13730) g$3456$13731)))))) (set! g$3456$13140 '(top)) (set! g$3456$13142 (lambda (g$3456$13734) (memq 'top g$3456$13734))) (set! g$3456$13144 (lambda (g$3456$13736) (if (symbol? g$3456$13736) (gensym g$3456$13736) (if (g$3456$13186 g$3456$13736) (g$3456$13144 (g$3456$13236 g$3456$13736)) (error 'gen-lexical '"BUG: invalid arg" g$3456$13736))))) (set! g$3456$13146 (lambda (g$3456$13738) (g$3456$13144 g$3456$13738))) (set! g$3456$13148 (lambda (g$3456$13740) (gensym))) (set! g$3456$13151 (lambda (g$3456$13742 g$3456$13743 g$3456$13744 g$3456$13745) (vector 'g$3456$13150 g$3456$13742 g$3456$13743 g$3456$13744 g$3456$13745))) (set! g$3456$13153 (lambda (g$3456$13750) (if (vector? g$3456$13750) (if (= (vector-length g$3456$13750) (+ '1 (length '(sym* mark** label* sealed/freq)))) (begin '#f (eq? (vector-ref g$3456$13750 '0) 'g$3456$13150)) '#f) '#f))) (set! g$3456$13155 (lambda (g$3456$13752) (if (g$3456$13153 g$3456$13752) (vector-ref g$3456$13752 '1) (error 'rib-sym* '"~s is not of type ~s" g$3456$13752 'rib)))) (set! g$3456$13157 (lambda (g$3456$13754) (if (g$3456$13153 g$3456$13754) (vector-ref g$3456$13754 '2) (error 'rib-mark** '"~s is not of type ~s" g$3456$13754 'rib)))) (set! g$3456$13159 (lambda (g$3456$13756) (if (g$3456$13153 g$3456$13756) (vector-ref g$3456$13756 '3) (error 'rib-label* '"~s is not of type ~s" g$3456$13756 'rib)))) (set! g$3456$13161 (lambda (g$3456$13758) (if (g$3456$13153 g$3456$13758) (vector-ref g$3456$13758 '4) (error 'rib-sealed/freq '"~s is not of type ~s" g$3456$13758 'rib)))) (set! g$3456$13163 (lambda (g$3456$13760 g$3456$13761) (if (g$3456$13153 g$3456$13760) (vector-set! g$3456$13760 '1 g$3456$13761) (error 'set-rib-sym*! '"~s is not of type ~s" g$3456$13760 'rib)))) (set! g$3456$13165 (lambda (g$3456$13764 g$3456$13765) (if (g$3456$13153 g$3456$13764) (vector-set! g$3456$13764 '2 g$3456$13765) (error 'set-rib-mark**! '"~s is not of type ~s" g$3456$13764 'rib)))) (set! g$3456$13167 (lambda (g$3456$13768 g$3456$13769) (if (g$3456$13153 g$3456$13768) (vector-set! g$3456$13768 '3 g$3456$13769) (error 'set-rib-label*! '"~s is not of type ~s" g$3456$13768 'rib)))) (set! g$3456$13169 (lambda (g$3456$13772 g$3456$13773) (if (g$3456$13153 g$3456$13772) (vector-set! g$3456$13772 '4 g$3456$13773) (error 'set-rib-sealed/freq! '"~s is not of type ~s" g$3456$13772 'rib)))) (set! g$3456$13171 (lambda () (g$3456$13151 '() '() '() '#f))) (set! g$3456$13173 (lambda (g$3456$13776 g$3456$13777 g$3456$13778) ((lambda (g$3456$13782) (begin (set! g$3456$13782 (lambda (g$3456$13784 g$3456$13785 g$3456$13786 g$3456$13787) (if (pair? g$3456$13786) (begin '#f ((lambda (g$3456$13792) (if g$3456$13792 g$3456$13792 (begin '#f (g$3456$13782 g$3456$13784 g$3456$13785 (cdr g$3456$13786) (cdr g$3456$13787))))) (if (eq? g$3456$13784 (car g$3456$13786)) (begin '#f (g$3456$13238 g$3456$13785 (car g$3456$13787))) '#f))) '#f))) (begin (if (g$3456$13161 g$3456$13776) (error 'extend-rib! '"rib is sealed" g$3456$13776) (void)) ((lambda (g$3456$13794 g$3456$13795) ((lambda (g$3456$13798) (begin (if (if (memq g$3456$13794 (g$3456$13155 g$3456$13776)) (begin '#f (g$3456$13782 g$3456$13794 g$3456$13795 g$3456$13798 (g$3456$13157 g$3456$13776))) '#f) (error 'expander '"cannot redefine" (g$3456$13252 g$3456$13777 '())) (void)) (g$3456$13163 g$3456$13776 (cons g$3456$13794 g$3456$13798)) (g$3456$13165 g$3456$13776 (cons g$3456$13795 (g$3456$13157 g$3456$13776))) (g$3456$13167 g$3456$13776 (cons g$3456$13778 (g$3456$13159 g$3456$13776))))) (g$3456$13155 g$3456$13776))) (g$3456$13236 g$3456$13777) (g$3456$13190 g$3456$13777))))) '#f))) (set! g$3456$13175 (lambda (g$3456$13800) ((lambda (g$3456$13802) (if (null? g$3456$13802) (void) ((lambda (g$3456$13804) (begin (g$3456$13163 g$3456$13800 g$3456$13804) (g$3456$13165 g$3456$13800 (list->vector (g$3456$13157 g$3456$13800))) (g$3456$13167 g$3456$13800 (list->vector (g$3456$13159 g$3456$13800))) (g$3456$13169 g$3456$13800 (make-vector (vector-length g$3456$13804) '0)))) (list->vector g$3456$13802)))) (g$3456$13155 g$3456$13800)))) (set! g$3456$13177 (lambda (g$3456$13806) (if (g$3456$13161 g$3456$13806) (begin (g$3456$13169 g$3456$13806 '#f) (g$3456$13163 g$3456$13806 (vector->list (g$3456$13155 g$3456$13806))) (g$3456$13165 g$3456$13806 (vector->list (g$3456$13157 g$3456$13806))) (g$3456$13167 g$3456$13806 (vector->list (g$3456$13159 g$3456$13806)))) (void)))) (set! g$3456$13179 (lambda (g$3456$13808 g$3456$13809) ((lambda (g$3456$13812) ((lambda (g$3456$13814) ((lambda (g$3456$13816) (begin (vector-set! g$3456$13812 g$3456$13816 (+ g$3456$13814 '1)) (if (= g$3456$13816 g$3456$13809) (void) ((lambda (g$3456$13818 g$3456$13819 g$3456$13820) (begin ((lambda (g$3456$13824) (begin (vector-set! g$3456$13818 g$3456$13809 (vector-ref g$3456$13818 g$3456$13816)) (vector-set! g$3456$13818 g$3456$13816 g$3456$13824))) (vector-ref g$3456$13818 g$3456$13809)) ((lambda (g$3456$13826) (begin (vector-set! g$3456$13819 g$3456$13809 (vector-ref g$3456$13819 g$3456$13816)) (vector-set! g$3456$13819 g$3456$13816 g$3456$13826))) (vector-ref g$3456$13819 g$3456$13809)) ((lambda (g$3456$13828) (begin (vector-set! g$3456$13820 g$3456$13809 (vector-ref g$3456$13820 g$3456$13816)) (vector-set! g$3456$13820 g$3456$13816 g$3456$13828))) (vector-ref g$3456$13820 g$3456$13809)))) (g$3456$13155 g$3456$13808) (g$3456$13157 g$3456$13808) (g$3456$13159 g$3456$13808))))) (letrec ((g$3456$13830 (lambda (g$3456$13832) (if (zero? g$3456$13832) '0 ((lambda (g$3456$13834) (if (= g$3456$13814 (vector-ref g$3456$13812 g$3456$13834)) (g$3456$13830 g$3456$13834) g$3456$13832)) (- g$3456$13832 '1)))))) (g$3456$13830 g$3456$13809)))) (vector-ref g$3456$13812 g$3456$13809))) (g$3456$13161 g$3456$13808)))) (set! g$3456$13181 (lambda (g$3456$13836 g$3456$13837) (g$3456$13151 (map g$3456$13236 g$3456$13836) (map g$3456$13190 g$3456$13836) g$3456$13837 '#f))) (set! g$3456$13184 (lambda (g$3456$13840 g$3456$13841 g$3456$13842) (vector 'g$3456$13183 g$3456$13840 g$3456$13841 g$3456$13842))) (set! g$3456$13186 (lambda (g$3456$13846) (if (vector? g$3456$13846) (if (= (vector-length g$3456$13846) (+ '1 (length '(expr mark* subst*)))) (begin '#f (eq? (vector-ref g$3456$13846 '0) 'g$3456$13183)) '#f) '#f))) (set! g$3456$13188 (lambda (g$3456$13848) (if (g$3456$13186 g$3456$13848) (vector-ref g$3456$13848 '1) (error 'stx-expr '"~s is not of type ~s" g$3456$13848 'stx)))) (set! g$3456$13190 (lambda (g$3456$13850) (if (g$3456$13186 g$3456$13850) (vector-ref g$3456$13850 '2) (error 'stx-mark* '"~s is not of type ~s" g$3456$13850 'stx)))) (set! g$3456$13192 (lambda (g$3456$13852) (if (g$3456$13186 g$3456$13852) (vector-ref g$3456$13852 '3) (error 'stx-subst* '"~s is not of type ~s" g$3456$13852 'stx)))) (set! g$3456$13194 (lambda (g$3456$13854 g$3456$13855) (if (g$3456$13186 g$3456$13854) (vector-set! g$3456$13854 '1 g$3456$13855) (error 'set-stx-expr! '"~s is not of type ~s" g$3456$13854 'stx)))) (set! g$3456$13196 (lambda (g$3456$13858 g$3456$13859) (if (g$3456$13186 g$3456$13858) (vector-set! g$3456$13858 '2 g$3456$13859) (error 'set-stx-mark*! '"~s is not of type ~s" g$3456$13858 'stx)))) (set! g$3456$13198 (lambda (g$3456$13862 g$3456$13863) (if (g$3456$13186 g$3456$13862) (vector-set! g$3456$13862 '3 g$3456$13863) (error 'set-stx-subst*! '"~s is not of type ~s" g$3456$13862 'stx)))) (set! g$3456$13200 (lambda (g$3456$13866 g$3456$13867) (g$3456$13184 g$3456$13867 (g$3456$13190 g$3456$13866) (g$3456$13192 g$3456$13866)))) (set! g$3456$13202 (lambda () (string '#\m))) (set! g$3456$13204 '#f) (set! g$3456$13206 not) (set! g$3456$13208 (lambda (g$3456$13870 g$3456$13871 g$3456$13872) ((lambda (g$3456$13876) (begin (set! g$3456$13876 (lambda (g$3456$13878 g$3456$13879) (letrec ((g$3456$13882 (lambda (g$3456$13884 g$3456$13885) (if (null? g$3456$13885) (cdr g$3456$13879) (cons g$3456$13884 (g$3456$13882 (car g$3456$13885) (cdr g$3456$13885))))))) (g$3456$13882 (car g$3456$13878) (cdr g$3456$13878))))) ((lambda (g$3456$13888 g$3456$13889) (if (if (not (null? g$3456$13870)) (if (not (null? g$3456$13888)) (begin '#f (g$3456$13206 (car g$3456$13888))) '#f) '#f) (values (g$3456$13876 g$3456$13870 g$3456$13888) (g$3456$13876 g$3456$13871 g$3456$13889)) (values (append g$3456$13870 g$3456$13888) (append g$3456$13871 g$3456$13889)))) (g$3456$13190 g$3456$13872) (g$3456$13192 g$3456$13872)))) '#f))) (set! g$3456$13210 (lambda (g$3456$13892 g$3456$13893 g$3456$13894) (if (g$3456$13186 g$3456$13892) (call-with-values (lambda () (g$3456$13208 g$3456$13893 g$3456$13894 g$3456$13892)) (lambda (g$3456$13898 g$3456$13899) (g$3456$13184 (g$3456$13188 g$3456$13892) g$3456$13898 g$3456$13899))) (g$3456$13184 g$3456$13892 g$3456$13893 g$3456$13894)))) (set! g$3456$13212 (lambda (g$3456$13902 g$3456$13903) (g$3456$13210 g$3456$13903 (list g$3456$13902) '(shift)))) (set! g$3456$13214 (lambda (g$3456$13906 g$3456$13907) (g$3456$13210 g$3456$13907 '() (list g$3456$13906)))) (set! g$3456$13216 (lambda (g$3456$13910 g$3456$13911) (if (g$3456$13186 g$3456$13910) (g$3456$13216 (g$3456$13188 g$3456$13910) g$3456$13911) (g$3456$13911 g$3456$13910)))) (set! g$3456$13218 (lambda (g$3456$13914) (if (g$3456$13186 g$3456$13914) ((lambda (g$3456$13916 g$3456$13917 g$3456$13918) (map (lambda (g$3456$13922) (g$3456$13210 g$3456$13922 g$3456$13917 g$3456$13918)) g$3456$13916)) (g$3456$13218 (g$3456$13188 g$3456$13914)) (g$3456$13190 g$3456$13914) (g$3456$13192 g$3456$13914)) (if (vector? g$3456$13914) (vector->list g$3456$13914) (error 'syntax-vector->list '"not a syntax vector" g$3456$13914))))) (set! g$3456$13220 (lambda (g$3456$13924) (g$3456$13216 g$3456$13924 pair?))) (set! g$3456$13222 (lambda (g$3456$13926) (g$3456$13216 g$3456$13926 vector?))) (set! g$3456$13224 (lambda (g$3456$13928) (g$3456$13216 g$3456$13928 null?))) (set! g$3456$13226 (lambda (g$3456$13930) ((lambda (g$3456$13932) (if g$3456$13932 g$3456$13932 (begin '#f (if (g$3456$13220 g$3456$13930) (begin '#f (g$3456$13226 (g$3456$13232 g$3456$13930))) '#f)))) (g$3456$13224 g$3456$13930)))) (set! g$3456$13228 (lambda (g$3456$13934) (if (g$3456$13186 g$3456$13934) (g$3456$13210 (g$3456$13228 (g$3456$13188 g$3456$13934)) (g$3456$13190 g$3456$13934) (g$3456$13192 g$3456$13934)) (if (pair? g$3456$13934) (car g$3456$13934) (error 'syntax-car '"not a pair" g$3456$13934))))) (set! g$3456$13230 (lambda (g$3456$13936) (if (g$3456$13220 g$3456$13936) (cons (g$3456$13228 g$3456$13936) (g$3456$13230 (g$3456$13232 g$3456$13936))) (if (g$3456$13224 g$3456$13936) '() (error 'syntax->list '"invalid argument" g$3456$13936))))) (set! g$3456$13232 (lambda (g$3456$13938) (if (g$3456$13186 g$3456$13938) (g$3456$13210 (g$3456$13232 (g$3456$13188 g$3456$13938)) (g$3456$13190 g$3456$13938) (g$3456$13192 g$3456$13938)) (if (pair? g$3456$13938) (cdr g$3456$13938) (error 'syntax-cdr '"not a pair" g$3456$13938))))) (set! g$3456$13234 (lambda (g$3456$13940) (g$3456$13216 g$3456$13940 symbol?))) (set! g$3456$13236 (lambda (g$3456$13942) (if (g$3456$13186 g$3456$13942) (g$3456$13236 (g$3456$13188 g$3456$13942)) (if (symbol? g$3456$13942) g$3456$13942 (error 'id->sym '"not an id" g$3456$13942))))) (set! g$3456$13238 (lambda (g$3456$13944 g$3456$13945) ((lambda (g$3456$13948) (if g$3456$13948 g$3456$13948 (begin '#f (if (pair? g$3456$13944) (if (pair? g$3456$13945) (if (eq? (car g$3456$13944) (car g$3456$13945)) (begin '#f (g$3456$13238 (cdr g$3456$13944) (cdr g$3456$13945))) '#f) '#f) '#f)))) (if (null? g$3456$13944) (begin '#f (null? g$3456$13945)) '#f)))) (set! g$3456$13240 (lambda (g$3456$13950 g$3456$13951) (if (eq? (g$3456$13236 g$3456$13950) (g$3456$13236 g$3456$13951)) (begin '#f (g$3456$13238 (g$3456$13190 g$3456$13950) (g$3456$13190 g$3456$13951))) '#f))) (set! g$3456$13242 (lambda (g$3456$13954 g$3456$13955) ((lambda (g$3456$13958 g$3456$13959) (if ((lambda (g$3456$13962) (if g$3456$13962 g$3456$13962 (begin '#f g$3456$13959))) g$3456$13958) (eq? g$3456$13958 g$3456$13959) (eq? (g$3456$13236 g$3456$13954) (g$3456$13236 g$3456$13955)))) (g$3456$13256 g$3456$13954) (g$3456$13256 g$3456$13955)))) (set! g$3456$13244 (lambda (g$3456$13964) (if (for-all g$3456$13234 g$3456$13964) (begin '#f (g$3456$13246 g$3456$13964)) '#f))) (set! g$3456$13246 (lambda (g$3456$13966) ((lambda (g$3456$13968) (if g$3456$13968 g$3456$13968 (begin '#f (if (not (g$3456$13248 (car g$3456$13966) (cdr g$3456$13966))) (begin '#f (g$3456$13246 (cdr g$3456$13966))) '#f)))) (null? g$3456$13966)))) (set! g$3456$13248 (lambda (g$3456$13970 g$3456$13971) (if (pair? g$3456$13971) (begin '#f ((lambda (g$3456$13974) (if g$3456$13974 g$3456$13974 (begin '#f (g$3456$13248 g$3456$13970 (cdr g$3456$13971))))) (g$3456$13240 g$3456$13970 (car g$3456$13971)))) '#f))) (set! g$3456$13250 (lambda (g$3456$13976) ((lambda (g$3456$13978) (if g$3456$13978 g$3456$13978 ((lambda (g$3456$13980) (if g$3456$13980 g$3456$13980 ((lambda (g$3456$13982) (if g$3456$13982 g$3456$13982 (begin '#f (boolean? g$3456$13976)))) (char? g$3456$13976)))) (string? g$3456$13976)))) (number? g$3456$13976)))) (set! g$3456$13252 (lambda (g$3456$13984 g$3456$13985) (if (g$3456$13142 g$3456$13985) g$3456$13984 (letrec ((g$3456$13988 (lambda (g$3456$13990) (if (g$3456$13186 g$3456$13990) (g$3456$13252 (g$3456$13188 g$3456$13990) (g$3456$13190 g$3456$13990)) (if (pair? g$3456$13990) ((lambda (g$3456$13992 g$3456$13993) (if (if (eq? g$3456$13992 (car g$3456$13990)) (begin '#f (eq? g$3456$13993 (cdr g$3456$13990))) '#f) g$3456$13990 (cons g$3456$13992 g$3456$13993))) (g$3456$13988 (car g$3456$13990)) (g$3456$13988 (cdr g$3456$13990))) (if (vector? g$3456$13990) ((lambda (g$3456$13996) ((lambda (g$3456$13998) (if (for-all eq? g$3456$13996 g$3456$13998) g$3456$13990 (list->vector g$3456$13998))) (map g$3456$13988 g$3456$13996))) (vector->list g$3456$13990)) g$3456$13990)))))) (g$3456$13988 g$3456$13984))))) (set! g$3456$13254 (lambda (g$3456$14000) (g$3456$13252 g$3456$14000 '()))) (set! g$3456$13256 (lambda (g$3456$14002) ((lambda (g$3456$14004) (letrec ((g$3456$14006 (lambda (g$3456$14008 g$3456$14009) (if (null? g$3456$14008) (g$3456$13722 g$3456$14004) (if (eq? (car g$3456$14008) 'shift) (g$3456$14006 (cdr g$3456$14008) (cdr g$3456$14009)) ((lambda (g$3456$14012) (if (g$3456$13161 g$3456$14012) ((lambda (g$3456$14014) (letrec ((g$3456$14016 (lambda (g$3456$14018 g$3456$14019) (if (= g$3456$14018 g$3456$14019) (g$3456$14006 (cdr g$3456$14008) g$3456$14009) (if (if (eq? (vector-ref g$3456$14014 g$3456$14018) g$3456$14004) (begin '#f (g$3456$13238 g$3456$14009 (vector-ref (g$3456$13157 g$3456$14012) g$3456$14018))) '#f) ((lambda (g$3456$14022) (begin (g$3456$13179 g$3456$14012 g$3456$14018) g$3456$14022)) (vector-ref (g$3456$13159 g$3456$14012) g$3456$14018)) (g$3456$14016 (+ g$3456$14018 '1) g$3456$14019)))))) (g$3456$14016 '0 (vector-length g$3456$14014)))) (g$3456$13155 g$3456$14012)) (letrec ((g$3456$14024 (lambda (g$3456$14026 g$3456$14027 g$3456$14028) (if (null? g$3456$14026) (g$3456$14006 (cdr g$3456$14008) g$3456$14009) (if (if (eq? (car g$3456$14026) g$3456$14004) (begin '#f (g$3456$13238 (car g$3456$14027) g$3456$14009)) '#f) (car g$3456$14028) (g$3456$14024 (cdr g$3456$14026) (cdr g$3456$14027) (cdr g$3456$14028))))))) (g$3456$14024 (g$3456$13155 g$3456$14012) (g$3456$13157 g$3456$14012) (g$3456$13159 g$3456$14012))))) (car g$3456$14008))))))) (g$3456$14006 (g$3456$13192 g$3456$14002) (g$3456$13190 g$3456$14002)))) (g$3456$13236 g$3456$14002)))) (set! g$3456$13258 (lambda (g$3456$14032 g$3456$14033) ((lambda (g$3456$14036) (if g$3456$14036 ((lambda (g$3456$14038) (if (if (pair? g$3456$14038) (begin '#f (eq? (car g$3456$14038) '$core-rtd)) '#f) (cons '$rtd (map g$3456$13521 (cdr g$3456$14038))) g$3456$14038)) g$3456$14036) ((lambda (g$3456$14040) (if g$3456$14040 (cdr g$3456$14040) '(displaced-lexical . #f))) (assq g$3456$14032 g$3456$14033)))) (g$3456$12840 g$3456$14032)))) (set! g$3456$13260 cons) (set! g$3456$13262 car) (set! g$3456$13264 cdr) (set! g$3456$13266 (lambda (g$3456$14042 g$3456$14043) (if (g$3456$13234 g$3456$14042) ((lambda (g$3456$14046) ((lambda (g$3456$14048) ((lambda (g$3456$14050) ((lambda (g$3456$14052) ((lambda () (begin (if g$3456$14048 (void) (error 'expander '"unbound identifier" (g$3456$13252 g$3456$14042 '()))) ((lambda (g$3456$14054) (if (memv g$3456$14054 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd)) (values g$3456$14052 (g$3456$13264 g$3456$14050) g$3456$14046) (values 'other '#f '#f))) g$3456$14052))))) (g$3456$13262 g$3456$14050))) (g$3456$13258 g$3456$14048 g$3456$14043))) (g$3456$13256 g$3456$14046))) g$3456$14042) (if (g$3456$13220 g$3456$14042) ((lambda (g$3456$14055) (if (g$3456$13234 g$3456$14055) ((lambda (g$3456$14057) ((lambda (g$3456$14059) ((lambda (g$3456$14061) ((lambda () (begin (if g$3456$14057 (void) (error 'expander '"unbound identifier" (g$3456$13252 g$3456$14042 '()))) ((lambda (g$3456$14063) (if (memv g$3456$14063 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import $core-rtd)) (values g$3456$14061 (g$3456$13264 g$3456$14059) g$3456$14055) (values 'call '#f '#f))) g$3456$14061))))) (g$3456$13262 g$3456$14059))) (g$3456$13258 g$3456$14057 g$3456$14043))) (g$3456$13256 g$3456$14055)) (values 'call '#f '#f))) (g$3456$13228 g$3456$14042)) ((lambda (g$3456$14064) (if (g$3456$13250 g$3456$14064) (values 'constant g$3456$14064 '#f) (values 'other '#f '#f))) (g$3456$13254 g$3456$14042)))))) (set! g$3456$13280 (lambda (g$3456$14066 g$3456$14067) (if (procedure? g$3456$14066) (cons* 'local-macro g$3456$14066 g$3456$14067) (if (if (pair? g$3456$14066) (if (eq? (car g$3456$14066) 'macro!) (begin '#f (procedure? (cdr g$3456$14066))) '#f) '#f) (cons* 'local-macro! (cdr g$3456$14066) g$3456$14067) (if (if (pair? g$3456$14066) (begin '#f (eq? (car g$3456$14066) '$rtd)) '#f) g$3456$14066 (error 'expand '"invalid transformer" g$3456$14066)))))) (set! g$3456$13282 (lambda (g$3456$14070) (if (procedure? g$3456$14070) (cons 'macro! g$3456$14070) (error 'make-variable-transformer '"not a procedure" g$3456$14070)))) (set! g$3456$13284 (lambda (g$3456$14072) (g$3456$13280 (eval-core (g$3456$12397 g$3456$14072)) g$3456$14072))) (set! g$3456$13483 (lambda (g$3456$14074) ((lambda (g$3456$14076) ((lambda (g$3456$14078) (if (if g$3456$14078 (begin '#f (apply (lambda (g$3456$14080 g$3456$14081 g$3456$14082 g$3456$14083) (g$3456$13234 g$3456$14080)) g$3456$14078)) '#f) (apply (lambda (g$3456$14088 g$3456$14089 g$3456$14090 g$3456$14091) (values g$3456$14088 (cons 'defun (cons g$3456$14089 (cons g$3456$14090 g$3456$14091))))) g$3456$14078) ((lambda (g$3456$14096) ((lambda (g$3456$14098) (if (if g$3456$14098 (begin '#f (apply (lambda (g$3456$14100 g$3456$14101) (g$3456$13234 g$3456$14100)) g$3456$14098)) '#f) (apply (lambda (g$3456$14104 g$3456$14105) (values g$3456$14104 (cons 'expr g$3456$14105))) g$3456$14098) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14096 '())))) ((lambda (g$3456$14108) (if (g$3456$13220 g$3456$14108) (begin '#f ((lambda (g$3456$14110) (if g$3456$14110 (begin '#f ((lambda (g$3456$14112) (if g$3456$14112 (begin '#f (append g$3456$14110 g$3456$14112)) '#f)) ((lambda (g$3456$14114) (if (g$3456$13220 g$3456$14114) (begin '#f ((lambda (g$3456$14116) (if g$3456$14116 (begin '#f ((lambda (g$3456$14118) (if g$3456$14118 (begin '#f (append g$3456$14116 g$3456$14118)) '#f)) ((lambda (g$3456$14120) (if (g$3456$13220 g$3456$14120) (begin '#f ((lambda (g$3456$14122) (if g$3456$14122 (begin '#f ((lambda (g$3456$14124) (if g$3456$14124 (begin '#f (append g$3456$14122 g$3456$14124)) '#f)) ((lambda (g$3456$14126) (if (equal? (g$3456$13254 g$3456$14126) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$14120)))) '#f)) ((lambda (g$3456$14128) (list g$3456$14128)) (g$3456$13228 g$3456$14120)))) '#f)) (g$3456$13232 g$3456$14114)))) '#f)) ((lambda (g$3456$14130) (list g$3456$14130)) (g$3456$13228 g$3456$14114)))) '#f)) (g$3456$13232 g$3456$14108)))) '#f)) ((lambda (g$3456$14132) '()) (g$3456$13228 g$3456$14108)))) '#f)) g$3456$14096))) g$3456$14076))) ((lambda (g$3456$14134) (if (g$3456$13220 g$3456$14134) (begin '#f ((lambda (g$3456$14136) (if g$3456$14136 (begin '#f ((lambda (g$3456$14138) (if g$3456$14138 (begin '#f (append g$3456$14136 g$3456$14138)) '#f)) ((lambda (g$3456$14140) (if (g$3456$13220 g$3456$14140) (begin '#f ((lambda (g$3456$14142) (if g$3456$14142 (begin '#f ((lambda (g$3456$14144) (if g$3456$14144 (begin '#f (append g$3456$14142 g$3456$14144)) '#f)) ((lambda (g$3456$14146) (if (g$3456$13220 g$3456$14146) (begin '#f ((lambda (g$3456$14148) (if g$3456$14148 (begin '#f ((lambda (g$3456$14150) (if g$3456$14150 (begin '#f (append g$3456$14148 g$3456$14150)) '#f)) ((letrec ((g$3456$14152 (lambda (g$3456$14154) (if (g$3456$13220 g$3456$14154) ((lambda (g$3456$14156) (if g$3456$14156 (begin '#f ((lambda (g$3456$14158) (if g$3456$14158 (begin '#f (map cons g$3456$14156 g$3456$14158)) '#f)) (g$3456$14152 (g$3456$13232 g$3456$14154)))) '#f)) ((lambda (g$3456$14160) (list g$3456$14160)) (g$3456$13228 g$3456$14154))) (if (g$3456$13224 g$3456$14154) (list (begin 'b* '())) '#f))))) g$3456$14152) (g$3456$13232 g$3456$14146)))) '#f)) ((lambda (g$3456$14162) (list g$3456$14162)) (g$3456$13228 g$3456$14146)))) '#f)) (g$3456$13232 g$3456$14140)))) '#f)) ((lambda (g$3456$14164) (if (g$3456$13220 g$3456$14164) (begin '#f ((lambda (g$3456$14166) (if g$3456$14166 (begin '#f ((lambda (g$3456$14168) (if g$3456$14168 (begin '#f (append g$3456$14166 g$3456$14168)) '#f)) ((lambda (g$3456$14170) (list g$3456$14170)) (g$3456$13232 g$3456$14164)))) '#f)) ((lambda (g$3456$14172) (list g$3456$14172)) (g$3456$13228 g$3456$14164)))) '#f)) (g$3456$13228 g$3456$14140)))) '#f)) (g$3456$13232 g$3456$14134)))) '#f)) ((lambda (g$3456$14174) '()) (g$3456$13228 g$3456$14134)))) '#f)) g$3456$14076))) g$3456$14074))) (set! g$3456$13485 (lambda (g$3456$14176) ((lambda (g$3456$14178) ((lambda (g$3456$14180) (if (if g$3456$14180 (begin '#f (apply (lambda (g$3456$14182 g$3456$14183) (g$3456$13234 g$3456$14182)) g$3456$14180)) '#f) (apply (lambda (g$3456$14186 g$3456$14187) (values g$3456$14186 g$3456$14187)) g$3456$14180) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14178 '())))) ((lambda (g$3456$14190) (if (g$3456$13220 g$3456$14190) (begin '#f ((lambda (g$3456$14192) (if g$3456$14192 (begin '#f ((lambda (g$3456$14194) (if g$3456$14194 (begin '#f (append g$3456$14192 g$3456$14194)) '#f)) ((lambda (g$3456$14196) (if (g$3456$13220 g$3456$14196) (begin '#f ((lambda (g$3456$14198) (if g$3456$14198 (begin '#f ((lambda (g$3456$14200) (if g$3456$14200 (begin '#f (append g$3456$14198 g$3456$14200)) '#f)) ((lambda (g$3456$14202) (if (g$3456$13220 g$3456$14202) (begin '#f ((lambda (g$3456$14204) (if g$3456$14204 (begin '#f ((lambda (g$3456$14206) (if g$3456$14206 (begin '#f (append g$3456$14204 g$3456$14206)) '#f)) ((lambda (g$3456$14208) (if (equal? (g$3456$13254 g$3456$14208) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$14202)))) '#f)) ((lambda (g$3456$14210) (list g$3456$14210)) (g$3456$13228 g$3456$14202)))) '#f)) (g$3456$13232 g$3456$14196)))) '#f)) ((lambda (g$3456$14212) (list g$3456$14212)) (g$3456$13228 g$3456$14196)))) '#f)) (g$3456$13232 g$3456$14190)))) '#f)) ((lambda (g$3456$14214) '()) (g$3456$13228 g$3456$14190)))) '#f)) g$3456$14178))) g$3456$14176))) (set! g$3456$13487 (lambda (g$3456$14216) ((lambda (g$3456$14218) ((lambda (g$3456$14220) (if g$3456$14220 ((lambda (g$3456$14222) ((lambda (g$3456$14224 g$3456$14225) (g$3456$13214 (g$3456$13151 (list g$3456$14224) (list g$3456$13140) (list g$3456$14225) '#f) (g$3456$13210 g$3456$14216 g$3456$13140 '()))) (car g$3456$14222) (cdr g$3456$14222))) g$3456$14220) (g$3456$13210 g$3456$14216 g$3456$13140 '()))) (assq g$3456$14216 g$3456$14218))) (g$3456$12873 (g$3456$12848 '(psyntax system $all)))))) (set! g$3456$13489 (lambda (g$3456$14228 g$3456$14229 g$3456$14230) (cons (cons* g$3456$14228 'lexical g$3456$14229) g$3456$14230))) (set! g$3456$13491 (lambda (g$3456$14234 g$3456$14235 g$3456$14236) (if (null? g$3456$14234) g$3456$14236 (g$3456$13491 (cdr g$3456$14234) (cdr g$3456$14235) (g$3456$13489 (car g$3456$14234) (car g$3456$14235) g$3456$14236))))) (set! g$3456$13493 (lambda (g$3456$14240 g$3456$14241 g$3456$14242) ((lambda (g$3456$14246) ((lambda (g$3456$14248) (if (if g$3456$14248 (begin '#f (apply (lambda (g$3456$14250 g$3456$14251 g$3456$14252 g$3456$14253) '#t) g$3456$14248)) '#f) (apply (lambda (g$3456$14258 g$3456$14259 g$3456$14260 g$3456$14261) ((lambda (g$3456$14266) ((lambda (g$3456$14268 g$3456$14269) ((lambda (g$3456$14272 g$3456$14273 g$3456$14274) (letrec ((g$3456$14278 (lambda (g$3456$14280 g$3456$14281) (if (null? g$3456$14280) (g$3456$13621 (g$3456$13214 (g$3456$13181 g$3456$14272 g$3456$14273) (cons g$3456$14260 g$3456$14261)) (g$3456$13491 g$3456$14273 g$3456$14274 g$3456$14241) g$3456$14242) (list '(primitive call-with-values) (g$3456$13123 '#f '() (car g$3456$14281)) (g$3456$13123 '#f (car g$3456$14280) (g$3456$14278 (cdr g$3456$14280) (cdr g$3456$14281)))))))) (g$3456$14278 g$3456$14268 g$3456$14266))) (apply append g$3456$14258) (apply append g$3456$14269) (apply append g$3456$14268))) (map (lambda (g$3456$14284) (map g$3456$13144 g$3456$14284)) g$3456$14258) (map (lambda (g$3456$14286) (map g$3456$13148 g$3456$14286)) g$3456$14258))) (g$3456$13601 g$3456$14259 g$3456$14241 g$3456$14242))) g$3456$14248) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14246 '())))) ((lambda (g$3456$14288) (if (g$3456$13220 g$3456$14288) (begin '#f ((lambda (g$3456$14290) (if g$3456$14290 (begin '#f ((lambda (g$3456$14292) (if g$3456$14292 (begin '#f (append g$3456$14290 g$3456$14292)) '#f)) ((lambda (g$3456$14294) (if (g$3456$13220 g$3456$14294) (begin '#f ((lambda (g$3456$14296) (if g$3456$14296 (begin '#f ((lambda (g$3456$14298) (if g$3456$14298 (begin '#f (append g$3456$14296 g$3456$14298)) '#f)) ((lambda (g$3456$14300) (if (g$3456$13220 g$3456$14300) (begin '#f ((lambda (g$3456$14302) (if g$3456$14302 (begin '#f ((lambda (g$3456$14304) (if g$3456$14304 (begin '#f (append g$3456$14302 g$3456$14304)) '#f)) ((letrec ((g$3456$14306 (lambda (g$3456$14308) (if (g$3456$13220 g$3456$14308) ((lambda (g$3456$14310) (if g$3456$14310 (begin '#f ((lambda (g$3456$14312) (if g$3456$14312 (begin '#f (map cons g$3456$14310 g$3456$14312)) '#f)) (g$3456$14306 (g$3456$13232 g$3456$14308)))) '#f)) ((lambda (g$3456$14314) (list g$3456$14314)) (g$3456$13228 g$3456$14308))) (if (g$3456$13224 g$3456$14308) (list (begin 'b* '())) '#f))))) g$3456$14306) (g$3456$13232 g$3456$14300)))) '#f)) ((lambda (g$3456$14316) (list g$3456$14316)) (g$3456$13228 g$3456$14300)))) '#f)) (g$3456$13232 g$3456$14294)))) '#f)) ((letrec ((g$3456$14318 (lambda (g$3456$14320) (if (g$3456$13220 g$3456$14320) ((lambda (g$3456$14322) (if g$3456$14322 (begin '#f ((lambda (g$3456$14324) (if g$3456$14324 (begin '#f (map cons g$3456$14322 g$3456$14324)) '#f)) (g$3456$14318 (g$3456$13232 g$3456$14320)))) '#f)) ((lambda (g$3456$14326) (if (g$3456$13220 g$3456$14326) (begin '#f ((lambda (g$3456$14328) (if g$3456$14328 (begin '#f ((lambda (g$3456$14330) (if g$3456$14330 (begin '#f (append g$3456$14328 g$3456$14330)) '#f)) ((lambda (g$3456$14332) (if (g$3456$13220 g$3456$14332) (begin '#f ((lambda (g$3456$14334) (if g$3456$14334 (begin '#f ((lambda (g$3456$14336) (if g$3456$14336 (begin '#f (append g$3456$14334 g$3456$14336)) '#f)) ((lambda (g$3456$14338) (if (equal? (g$3456$13254 g$3456$14338) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$14332)))) '#f)) ((lambda (g$3456$14340) (list g$3456$14340)) (g$3456$13228 g$3456$14332)))) '#f)) (g$3456$13232 g$3456$14326)))) '#f)) ((letrec ((g$3456$14342 (lambda (g$3456$14344) (if (g$3456$13220 g$3456$14344) ((lambda (g$3456$14346) (if g$3456$14346 (begin '#f ((lambda (g$3456$14348) (if g$3456$14348 (begin '#f (map cons g$3456$14346 g$3456$14348)) '#f)) (g$3456$14342 (g$3456$13232 g$3456$14344)))) '#f)) ((lambda (g$3456$14350) (list g$3456$14350)) (g$3456$13228 g$3456$14344))) (if (g$3456$13224 g$3456$14344) (list (begin 'fml** '())) '#f))))) g$3456$14342) (g$3456$13228 g$3456$14326)))) '#f)) (g$3456$13228 g$3456$14320))) (if (g$3456$13224 g$3456$14320) (list (begin 'fml** '()) (begin 'rhs* '())) '#f))))) g$3456$14318) (g$3456$13228 g$3456$14294)))) '#f)) (g$3456$13232 g$3456$14288)))) '#f)) ((lambda (g$3456$14352) '()) (g$3456$13228 g$3456$14288)))) '#f)) g$3456$14246))) g$3456$14240))) (set! g$3456$13495 (lambda (g$3456$14354 g$3456$14355 g$3456$14356 g$3456$14357) ((lambda (g$3456$14362) ((lambda (g$3456$14364) (if (if g$3456$14364 (begin '#f (apply (lambda (g$3456$14366 g$3456$14367 g$3456$14368 g$3456$14369) '#t) g$3456$14364)) '#f) (apply (lambda (g$3456$14374 g$3456$14375 g$3456$14376 g$3456$14377) (if (not (g$3456$13244 g$3456$14374)) (error 'expander '"invalid identifiers" (g$3456$13252 g$3456$14354 '())) ((lambda (g$3456$14382 g$3456$14383) ((lambda (g$3456$14386 g$3456$14387) ((lambda (g$3456$14390 g$3456$14391) (g$3456$14357 '#f g$3456$14382 g$3456$14391 g$3456$14390)) (g$3456$13621 (g$3456$13214 g$3456$14386 (cons g$3456$14376 g$3456$14377)) g$3456$14387 g$3456$14356) (g$3456$13601 (map (lambda (g$3456$14394) (g$3456$13214 g$3456$14386 g$3456$14394)) g$3456$14375) g$3456$14387 g$3456$14356))) (g$3456$13181 g$3456$14374 g$3456$14383) (g$3456$13491 g$3456$14383 g$3456$14382 g$3456$14355))) (map g$3456$13144 g$3456$14374) (map g$3456$13148 g$3456$14374)))) g$3456$14364) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14362 '())))) ((lambda (g$3456$14396) (if (g$3456$13220 g$3456$14396) (begin '#f ((lambda (g$3456$14398) (if g$3456$14398 (begin '#f ((lambda (g$3456$14400) (if g$3456$14400 (begin '#f (append g$3456$14398 g$3456$14400)) '#f)) ((lambda (g$3456$14402) (if (g$3456$13220 g$3456$14402) (begin '#f ((lambda (g$3456$14404) (if g$3456$14404 (begin '#f ((lambda (g$3456$14406) (if g$3456$14406 (begin '#f (append g$3456$14404 g$3456$14406)) '#f)) ((lambda (g$3456$14408) (if (g$3456$13220 g$3456$14408) (begin '#f ((lambda (g$3456$14410) (if g$3456$14410 (begin '#f ((lambda (g$3456$14412) (if g$3456$14412 (begin '#f (append g$3456$14410 g$3456$14412)) '#f)) ((letrec ((g$3456$14414 (lambda (g$3456$14416) (if (g$3456$13220 g$3456$14416) ((lambda (g$3456$14418) (if g$3456$14418 (begin '#f ((lambda (g$3456$14420) (if g$3456$14420 (begin '#f (map cons g$3456$14418 g$3456$14420)) '#f)) (g$3456$14414 (g$3456$13232 g$3456$14416)))) '#f)) ((lambda (g$3456$14422) (list g$3456$14422)) (g$3456$13228 g$3456$14416))) (if (g$3456$13224 g$3456$14416) (list (begin 'b* '())) '#f))))) g$3456$14414) (g$3456$13232 g$3456$14408)))) '#f)) ((lambda (g$3456$14424) (list g$3456$14424)) (g$3456$13228 g$3456$14408)))) '#f)) (g$3456$13232 g$3456$14402)))) '#f)) ((letrec ((g$3456$14426 (lambda (g$3456$14428) (if (g$3456$13220 g$3456$14428) ((lambda (g$3456$14430) (if g$3456$14430 (begin '#f ((lambda (g$3456$14432) (if g$3456$14432 (begin '#f (map cons g$3456$14430 g$3456$14432)) '#f)) (g$3456$14426 (g$3456$13232 g$3456$14428)))) '#f)) ((lambda (g$3456$14434) (if (g$3456$13220 g$3456$14434) (begin '#f ((lambda (g$3456$14436) (if g$3456$14436 (begin '#f ((lambda (g$3456$14438) (if g$3456$14438 (begin '#f (append g$3456$14436 g$3456$14438)) '#f)) ((lambda (g$3456$14440) (if (g$3456$13220 g$3456$14440) (begin '#f ((lambda (g$3456$14442) (if g$3456$14442 (begin '#f ((lambda (g$3456$14444) (if g$3456$14444 (begin '#f (append g$3456$14442 g$3456$14444)) '#f)) ((lambda (g$3456$14446) (if (equal? (g$3456$13254 g$3456$14446) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$14440)))) '#f)) ((lambda (g$3456$14448) (list g$3456$14448)) (g$3456$13228 g$3456$14440)))) '#f)) (g$3456$13232 g$3456$14434)))) '#f)) ((lambda (g$3456$14450) (list g$3456$14450)) (g$3456$13228 g$3456$14434)))) '#f)) (g$3456$13228 g$3456$14428))) (if (g$3456$13224 g$3456$14428) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$3456$14426) (g$3456$13228 g$3456$14402)))) '#f)) (g$3456$13232 g$3456$14396)))) '#f)) ((lambda (g$3456$14452) '()) (g$3456$13228 g$3456$14396)))) '#f)) g$3456$14362))) g$3456$14354))) (set! g$3456$13497 (lambda (g$3456$14454 g$3456$14455 g$3456$14456) (g$3456$13495 g$3456$14454 g$3456$14455 g$3456$14456 g$3456$13115))) (set! g$3456$13499 (lambda (g$3456$14460 g$3456$14461 g$3456$14462) (g$3456$13495 g$3456$14460 g$3456$14461 g$3456$14462 g$3456$13114))) (set! g$3456$13501 (lambda (g$3456$14466 g$3456$14467 g$3456$14468) ((lambda (g$3456$14472) ((lambda (g$3456$14474) (if (if g$3456$14474 (begin '#f (apply (lambda (g$3456$14476) (g$3456$13234 g$3456$14476)) g$3456$14474)) '#f) (apply (lambda (g$3456$14478) ((lambda (g$3456$14480) ((lambda (g$3456$14482) ((lambda (g$3456$14484) ((lambda () (begin (if g$3456$14480 (void) (error 'expander '"unbound identifier" (g$3456$13252 g$3456$14466 '()))) (if (if (eq? g$3456$14484 '$rtd) (begin '#f (not (list? (g$3456$13264 g$3456$14482)))) '#f) (void) (error 'expander '"invalid type" (g$3456$13252 g$3456$14466 '()))) (list 'quote (g$3456$13264 g$3456$14482)))))) (g$3456$13262 g$3456$14482))) (g$3456$13258 g$3456$14480 g$3456$14467))) (g$3456$13256 g$3456$14478))) g$3456$14474) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14472 '())))) ((lambda (g$3456$14486) (if (g$3456$13220 g$3456$14486) (begin '#f ((lambda (g$3456$14488) (if g$3456$14488 (begin '#f ((lambda (g$3456$14490) (if g$3456$14490 (begin '#f (append g$3456$14488 g$3456$14490)) '#f)) ((lambda (g$3456$14492) (if (g$3456$13220 g$3456$14492) (begin '#f ((lambda (g$3456$14494) (if g$3456$14494 (begin '#f ((lambda (g$3456$14496) (if g$3456$14496 (begin '#f (append g$3456$14494 g$3456$14496)) '#f)) ((lambda (g$3456$14498) (if (equal? (g$3456$13254 g$3456$14498) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$14492)))) '#f)) ((lambda (g$3456$14500) (list g$3456$14500)) (g$3456$13228 g$3456$14492)))) '#f)) (g$3456$13232 g$3456$14486)))) '#f)) ((lambda (g$3456$14502) '()) (g$3456$13228 g$3456$14486)))) '#f)) g$3456$14472))) g$3456$14466))) (set! g$3456$13503 (lambda (g$3456$14504 g$3456$14505 g$3456$14506) ((lambda (g$3456$14510) ((lambda (g$3456$14512) (if (if g$3456$14512 (begin '#f (apply (lambda (g$3456$14514) (g$3456$13234 g$3456$14514)) g$3456$14512)) '#f) (apply (lambda (g$3456$14516) ((lambda (g$3456$14518) ((lambda (g$3456$14520) ((lambda (g$3456$14522) ((lambda () (begin (if g$3456$14518 (void) (error 'expander '"unbound identifier" (g$3456$13252 g$3456$14504 '()))) (if (if (eq? g$3456$14522 '$rtd) (begin '#f (list? (g$3456$13264 g$3456$14520))) '#f) (void) (error 'expander '"invalid type" (g$3456$13252 g$3456$14504 '()))) (g$3456$13605 (car (g$3456$13264 g$3456$14520)) g$3456$14505 g$3456$14506))))) (g$3456$13262 g$3456$14520))) (g$3456$13258 g$3456$14518 g$3456$14505))) (g$3456$13256 g$3456$14516))) g$3456$14512) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14510 '())))) ((lambda (g$3456$14524) (if (g$3456$13220 g$3456$14524) (begin '#f ((lambda (g$3456$14526) (if g$3456$14526 (begin '#f ((lambda (g$3456$14528) (if g$3456$14528 (begin '#f (append g$3456$14526 g$3456$14528)) '#f)) ((lambda (g$3456$14530) (if (g$3456$13220 g$3456$14530) (begin '#f ((lambda (g$3456$14532) (if g$3456$14532 (begin '#f ((lambda (g$3456$14534) (if g$3456$14534 (begin '#f (append g$3456$14532 g$3456$14534)) '#f)) ((lambda (g$3456$14536) (if (equal? (g$3456$13254 g$3456$14536) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$14530)))) '#f)) ((lambda (g$3456$14538) (list g$3456$14538)) (g$3456$13228 g$3456$14530)))) '#f)) (g$3456$13232 g$3456$14524)))) '#f)) ((lambda (g$3456$14540) '()) (g$3456$13228 g$3456$14524)))) '#f)) g$3456$14510))) g$3456$14504))) (set! g$3456$13505 (lambda (g$3456$14542 g$3456$14543 g$3456$14544) ((lambda (g$3456$14548) ((lambda (g$3456$14550) (if (if g$3456$14550 (begin '#f (apply (lambda (g$3456$14552) (g$3456$13234 g$3456$14552)) g$3456$14550)) '#f) (apply (lambda (g$3456$14554) ((lambda (g$3456$14556) ((lambda (g$3456$14558) ((lambda (g$3456$14560) ((lambda () (begin (if g$3456$14556 (void) (error 'expander '"unbound identifier" (g$3456$13252 g$3456$14542 '()))) (if (if (eq? g$3456$14560 '$rtd) (begin '#f (list? (g$3456$13264 g$3456$14558))) '#f) (void) (error 'expander '"invalid type" (g$3456$13252 g$3456$14542 '()))) (g$3456$13605 (cadr (g$3456$13264 g$3456$14558)) g$3456$14543 g$3456$14544))))) (g$3456$13262 g$3456$14558))) (g$3456$13258 g$3456$14556 g$3456$14543))) (g$3456$13256 g$3456$14554))) g$3456$14550) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14548 '())))) ((lambda (g$3456$14562) (if (g$3456$13220 g$3456$14562) (begin '#f ((lambda (g$3456$14564) (if g$3456$14564 (begin '#f ((lambda (g$3456$14566) (if g$3456$14566 (begin '#f (append g$3456$14564 g$3456$14566)) '#f)) ((lambda (g$3456$14568) (if (g$3456$13220 g$3456$14568) (begin '#f ((lambda (g$3456$14570) (if g$3456$14570 (begin '#f ((lambda (g$3456$14572) (if g$3456$14572 (begin '#f (append g$3456$14570 g$3456$14572)) '#f)) ((lambda (g$3456$14574) (if (equal? (g$3456$13254 g$3456$14574) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$14568)))) '#f)) ((lambda (g$3456$14576) (list g$3456$14576)) (g$3456$13228 g$3456$14568)))) '#f)) (g$3456$13232 g$3456$14562)))) '#f)) ((lambda (g$3456$14578) '()) (g$3456$13228 g$3456$14562)))) '#f)) g$3456$14548))) g$3456$14542))) (set! g$3456$13507 (lambda (g$3456$14580 g$3456$14581 g$3456$14582) ((lambda (g$3456$14586) ((lambda (g$3456$14588) (if (if g$3456$14588 (begin '#f (apply (lambda (g$3456$14590 g$3456$14591 g$3456$14592) '#t) g$3456$14588)) '#f) (apply (lambda (g$3456$14596 g$3456$14597 g$3456$14598) (list 'if (g$3456$13605 g$3456$14596 g$3456$14581 g$3456$14582) (g$3456$13117 '#f (g$3456$13601 (cons g$3456$14597 g$3456$14598) g$3456$14581 g$3456$14582)) (g$3456$13116))) g$3456$14588) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14586 '())))) ((lambda (g$3456$14602) (if (g$3456$13220 g$3456$14602) (begin '#f ((lambda (g$3456$14604) (if g$3456$14604 (begin '#f ((lambda (g$3456$14606) (if g$3456$14606 (begin '#f (append g$3456$14604 g$3456$14606)) '#f)) ((lambda (g$3456$14608) (if (g$3456$13220 g$3456$14608) (begin '#f ((lambda (g$3456$14610) (if g$3456$14610 (begin '#f ((lambda (g$3456$14612) (if g$3456$14612 (begin '#f (append g$3456$14610 g$3456$14612)) '#f)) ((lambda (g$3456$14614) (if (g$3456$13220 g$3456$14614) (begin '#f ((lambda (g$3456$14616) (if g$3456$14616 (begin '#f ((lambda (g$3456$14618) (if g$3456$14618 (begin '#f (append g$3456$14616 g$3456$14618)) '#f)) ((letrec ((g$3456$14620 (lambda (g$3456$14622) (if (g$3456$13220 g$3456$14622) ((lambda (g$3456$14624) (if g$3456$14624 (begin '#f ((lambda (g$3456$14626) (if g$3456$14626 (begin '#f (map cons g$3456$14624 g$3456$14626)) '#f)) (g$3456$14620 (g$3456$13232 g$3456$14622)))) '#f)) ((lambda (g$3456$14628) (list g$3456$14628)) (g$3456$13228 g$3456$14622))) (if (g$3456$13224 g$3456$14622) (list (begin 'e* '())) '#f))))) g$3456$14620) (g$3456$13232 g$3456$14614)))) '#f)) ((lambda (g$3456$14630) (list g$3456$14630)) (g$3456$13228 g$3456$14614)))) '#f)) (g$3456$13232 g$3456$14608)))) '#f)) ((lambda (g$3456$14632) (list g$3456$14632)) (g$3456$13228 g$3456$14608)))) '#f)) (g$3456$13232 g$3456$14602)))) '#f)) ((lambda (g$3456$14634) '()) (g$3456$13228 g$3456$14602)))) '#f)) g$3456$14586))) g$3456$14580))) (set! g$3456$13509 (lambda (g$3456$14636 g$3456$14637 g$3456$14638) ((lambda (g$3456$14642) ((lambda (g$3456$14644) (if (if g$3456$14644 (begin '#f (apply (lambda (g$3456$14646 g$3456$14647 g$3456$14648) '#t) g$3456$14644)) '#f) (apply (lambda (g$3456$14652 g$3456$14653 g$3456$14654) (list 'if (g$3456$13605 g$3456$14652 g$3456$14637 g$3456$14638) (g$3456$13116) (g$3456$13117 '#f (g$3456$13601 (cons g$3456$14653 g$3456$14654) g$3456$14637 g$3456$14638)))) g$3456$14644) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14642 '())))) ((lambda (g$3456$14658) (if (g$3456$13220 g$3456$14658) (begin '#f ((lambda (g$3456$14660) (if g$3456$14660 (begin '#f ((lambda (g$3456$14662) (if g$3456$14662 (begin '#f (append g$3456$14660 g$3456$14662)) '#f)) ((lambda (g$3456$14664) (if (g$3456$13220 g$3456$14664) (begin '#f ((lambda (g$3456$14666) (if g$3456$14666 (begin '#f ((lambda (g$3456$14668) (if g$3456$14668 (begin '#f (append g$3456$14666 g$3456$14668)) '#f)) ((lambda (g$3456$14670) (if (g$3456$13220 g$3456$14670) (begin '#f ((lambda (g$3456$14672) (if g$3456$14672 (begin '#f ((lambda (g$3456$14674) (if g$3456$14674 (begin '#f (append g$3456$14672 g$3456$14674)) '#f)) ((letrec ((g$3456$14676 (lambda (g$3456$14678) (if (g$3456$13220 g$3456$14678) ((lambda (g$3456$14680) (if g$3456$14680 (begin '#f ((lambda (g$3456$14682) (if g$3456$14682 (begin '#f (map cons g$3456$14680 g$3456$14682)) '#f)) (g$3456$14676 (g$3456$13232 g$3456$14678)))) '#f)) ((lambda (g$3456$14684) (list g$3456$14684)) (g$3456$13228 g$3456$14678))) (if (g$3456$13224 g$3456$14678) (list (begin 'e* '())) '#f))))) g$3456$14676) (g$3456$13232 g$3456$14670)))) '#f)) ((lambda (g$3456$14686) (list g$3456$14686)) (g$3456$13228 g$3456$14670)))) '#f)) (g$3456$13232 g$3456$14664)))) '#f)) ((lambda (g$3456$14688) (list g$3456$14688)) (g$3456$13228 g$3456$14664)))) '#f)) (g$3456$13232 g$3456$14658)))) '#f)) ((lambda (g$3456$14690) '()) (g$3456$13228 g$3456$14658)))) '#f)) g$3456$14642))) g$3456$14636))) (set! g$3456$13511 (lambda (g$3456$14692 g$3456$14693 g$3456$14694) ((lambda (g$3456$14698) ((lambda (g$3456$14700) (if (if g$3456$14700 (begin '#f (apply (lambda (g$3456$14702 g$3456$14703 g$3456$14704) '#t) g$3456$14700)) '#f) (apply (lambda (g$3456$14708 g$3456$14709 g$3456$14710) (list 'if (g$3456$13605 g$3456$14708 g$3456$14693 g$3456$14694) (g$3456$13605 g$3456$14709 g$3456$14693 g$3456$14694) (g$3456$13605 g$3456$14710 g$3456$14693 g$3456$14694))) g$3456$14700) ((lambda (g$3456$14714) ((lambda (g$3456$14716) (if (if g$3456$14716 (begin '#f (apply (lambda (g$3456$14718 g$3456$14719) '#t) g$3456$14716)) '#f) (apply (lambda (g$3456$14722 g$3456$14723) (list 'if (g$3456$13605 g$3456$14722 g$3456$14693 g$3456$14694) (g$3456$13605 g$3456$14723 g$3456$14693 g$3456$14694) (g$3456$13116))) g$3456$14716) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14714 '())))) ((lambda (g$3456$14726) (if (g$3456$13220 g$3456$14726) (begin '#f ((lambda (g$3456$14728) (if g$3456$14728 (begin '#f ((lambda (g$3456$14730) (if g$3456$14730 (begin '#f (append g$3456$14728 g$3456$14730)) '#f)) ((lambda (g$3456$14732) (if (g$3456$13220 g$3456$14732) (begin '#f ((lambda (g$3456$14734) (if g$3456$14734 (begin '#f ((lambda (g$3456$14736) (if g$3456$14736 (begin '#f (append g$3456$14734 g$3456$14736)) '#f)) ((lambda (g$3456$14738) (if (g$3456$13220 g$3456$14738) (begin '#f ((lambda (g$3456$14740) (if g$3456$14740 (begin '#f ((lambda (g$3456$14742) (if g$3456$14742 (begin '#f (append g$3456$14740 g$3456$14742)) '#f)) ((lambda (g$3456$14744) (if (equal? (g$3456$13254 g$3456$14744) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$14738)))) '#f)) ((lambda (g$3456$14746) (list g$3456$14746)) (g$3456$13228 g$3456$14738)))) '#f)) (g$3456$13232 g$3456$14732)))) '#f)) ((lambda (g$3456$14748) (list g$3456$14748)) (g$3456$13228 g$3456$14732)))) '#f)) (g$3456$13232 g$3456$14726)))) '#f)) ((lambda (g$3456$14750) '()) (g$3456$13228 g$3456$14726)))) '#f)) g$3456$14714))) g$3456$14698))) ((lambda (g$3456$14752) (if (g$3456$13220 g$3456$14752) (begin '#f ((lambda (g$3456$14754) (if g$3456$14754 (begin '#f ((lambda (g$3456$14756) (if g$3456$14756 (begin '#f (append g$3456$14754 g$3456$14756)) '#f)) ((lambda (g$3456$14758) (if (g$3456$13220 g$3456$14758) (begin '#f ((lambda (g$3456$14760) (if g$3456$14760 (begin '#f ((lambda (g$3456$14762) (if g$3456$14762 (begin '#f (append g$3456$14760 g$3456$14762)) '#f)) ((lambda (g$3456$14764) (if (g$3456$13220 g$3456$14764) (begin '#f ((lambda (g$3456$14766) (if g$3456$14766 (begin '#f ((lambda (g$3456$14768) (if g$3456$14768 (begin '#f (append g$3456$14766 g$3456$14768)) '#f)) ((lambda (g$3456$14770) (if (g$3456$13220 g$3456$14770) (begin '#f ((lambda (g$3456$14772) (if g$3456$14772 (begin '#f ((lambda (g$3456$14774) (if g$3456$14774 (begin '#f (append g$3456$14772 g$3456$14774)) '#f)) ((lambda (g$3456$14776) (if (equal? (g$3456$13254 g$3456$14776) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$14770)))) '#f)) ((lambda (g$3456$14778) (list g$3456$14778)) (g$3456$13228 g$3456$14770)))) '#f)) (g$3456$13232 g$3456$14764)))) '#f)) ((lambda (g$3456$14780) (list g$3456$14780)) (g$3456$13228 g$3456$14764)))) '#f)) (g$3456$13232 g$3456$14758)))) '#f)) ((lambda (g$3456$14782) (list g$3456$14782)) (g$3456$13228 g$3456$14758)))) '#f)) (g$3456$13232 g$3456$14752)))) '#f)) ((lambda (g$3456$14784) '()) (g$3456$13228 g$3456$14752)))) '#f)) g$3456$14698))) g$3456$14692))) (set! g$3456$13513 (lambda (g$3456$14786 g$3456$14787 g$3456$14788) ((lambda (g$3456$14792 g$3456$14794) (begin (set! g$3456$14792 (lambda (g$3456$14902 g$3456$14903 g$3456$14904) ((lambda (g$3456$14908) ((lambda (g$3456$14910) (if (if g$3456$14910 (begin '#f (apply (lambda (g$3456$14912 g$3456$14913 g$3456$14914) '#t) g$3456$14910)) '#f) (apply (lambda (g$3456$14918 g$3456$14919 g$3456$14920) (list 'if (list '(primitive memv) g$3456$14902 (list 'quote (g$3456$13254 g$3456$14918))) (g$3456$13117 '#f (g$3456$13601 (cons g$3456$14919 g$3456$14920) g$3456$14787 g$3456$14788)) g$3456$14904)) g$3456$14910) ((lambda (g$3456$14924) ((lambda (g$3456$14926) (if (if g$3456$14926 (begin '#f (apply (lambda (g$3456$14928) '#t) g$3456$14926)) '#f) (apply (lambda (g$3456$14930) (error 'expander '"invalid syntax" (g$3456$13254 g$3456$14786))) g$3456$14926) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14924 '())))) ((lambda (g$3456$14932) (list g$3456$14932)) g$3456$14924))) g$3456$14908))) ((lambda (g$3456$14934) (if (g$3456$13220 g$3456$14934) (begin '#f ((lambda (g$3456$14936) (if g$3456$14936 (begin '#f ((lambda (g$3456$14938) (if g$3456$14938 (begin '#f (append g$3456$14936 g$3456$14938)) '#f)) ((lambda (g$3456$14940) (if (g$3456$13220 g$3456$14940) (begin '#f ((lambda (g$3456$14942) (if g$3456$14942 (begin '#f ((lambda (g$3456$14944) (if g$3456$14944 (begin '#f (append g$3456$14942 g$3456$14944)) '#f)) ((letrec ((g$3456$14946 (lambda (g$3456$14948) (if (g$3456$13220 g$3456$14948) ((lambda (g$3456$14950) (if g$3456$14950 (begin '#f ((lambda (g$3456$14952) (if g$3456$14952 (begin '#f (map cons g$3456$14950 g$3456$14952)) '#f)) (g$3456$14946 (g$3456$13232 g$3456$14948)))) '#f)) ((lambda (g$3456$14954) (list g$3456$14954)) (g$3456$13228 g$3456$14948))) (if (g$3456$13224 g$3456$14948) (list (begin 'e* '())) '#f))))) g$3456$14946) (g$3456$13232 g$3456$14940)))) '#f)) ((lambda (g$3456$14956) (list g$3456$14956)) (g$3456$13228 g$3456$14940)))) '#f)) (g$3456$13232 g$3456$14934)))) '#f)) ((letrec ((g$3456$14958 (lambda (g$3456$14960) (if (g$3456$13220 g$3456$14960) ((lambda (g$3456$14962) (if g$3456$14962 (begin '#f ((lambda (g$3456$14964) (if g$3456$14964 (begin '#f (map cons g$3456$14962 g$3456$14964)) '#f)) (g$3456$14958 (g$3456$13232 g$3456$14960)))) '#f)) ((lambda (g$3456$14966) (list g$3456$14966)) (g$3456$13228 g$3456$14960))) (if (g$3456$13224 g$3456$14960) (list (begin 'd* '())) '#f))))) g$3456$14958) (g$3456$13228 g$3456$14934)))) '#f)) g$3456$14908))) g$3456$14903))) (set! g$3456$14794 (lambda (g$3456$14796 g$3456$14797) ((lambda (g$3456$14800) ((lambda (g$3456$14802) (if (if g$3456$14802 (begin '#f (apply (lambda (g$3456$14804 g$3456$14805 g$3456$14806) '#t) g$3456$14802)) '#f) (apply (lambda (g$3456$14810 g$3456$14811 g$3456$14812) (g$3456$14792 g$3456$14796 g$3456$14797 (g$3456$13116))) g$3456$14802) ((lambda (g$3456$14816) ((lambda (g$3456$14818) (if (if g$3456$14818 (begin '#f (apply (lambda (g$3456$14820 g$3456$14821 g$3456$14822) '#t) g$3456$14818)) '#f) (apply (lambda (g$3456$14826 g$3456$14827 g$3456$14828) (if (if (g$3456$13234 g$3456$14826) (begin '#f (g$3456$13242 g$3456$14826 (g$3456$13487 'else))) '#f) (g$3456$13117 '#f (g$3456$13601 (cons g$3456$14827 g$3456$14828) g$3456$14787 g$3456$14788)) (error 'expander '"invalid syntax" (g$3456$13254 g$3456$14786)))) g$3456$14818) ((lambda (g$3456$14832) ((lambda (g$3456$14834) (if (if g$3456$14834 (begin '#f (apply (lambda (g$3456$14836) '#t) g$3456$14834)) '#f) (apply (lambda (g$3456$14838) (error 'expander '"invalid syntax" (g$3456$13254 g$3456$14786))) g$3456$14834) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14832 '())))) ((lambda (g$3456$14840) (list g$3456$14840)) g$3456$14832))) g$3456$14816))) ((lambda (g$3456$14842) (if (g$3456$13220 g$3456$14842) (begin '#f ((lambda (g$3456$14844) (if g$3456$14844 (begin '#f ((lambda (g$3456$14846) (if g$3456$14846 (begin '#f (append g$3456$14844 g$3456$14846)) '#f)) ((lambda (g$3456$14848) (if (g$3456$13220 g$3456$14848) (begin '#f ((lambda (g$3456$14850) (if g$3456$14850 (begin '#f ((lambda (g$3456$14852) (if g$3456$14852 (begin '#f (append g$3456$14850 g$3456$14852)) '#f)) ((letrec ((g$3456$14854 (lambda (g$3456$14856) (if (g$3456$13220 g$3456$14856) ((lambda (g$3456$14858) (if g$3456$14858 (begin '#f ((lambda (g$3456$14860) (if g$3456$14860 (begin '#f (map cons g$3456$14858 g$3456$14860)) '#f)) (g$3456$14854 (g$3456$13232 g$3456$14856)))) '#f)) ((lambda (g$3456$14862) (list g$3456$14862)) (g$3456$13228 g$3456$14856))) (if (g$3456$13224 g$3456$14856) (list (begin 'x* '())) '#f))))) g$3456$14854) (g$3456$13232 g$3456$14848)))) '#f)) ((lambda (g$3456$14864) (list g$3456$14864)) (g$3456$13228 g$3456$14848)))) '#f)) (g$3456$13232 g$3456$14842)))) '#f)) ((lambda (g$3456$14866) (list g$3456$14866)) (g$3456$13228 g$3456$14842)))) '#f)) g$3456$14816))) g$3456$14800))) ((lambda (g$3456$14868) (if (g$3456$13220 g$3456$14868) (begin '#f ((lambda (g$3456$14870) (if g$3456$14870 (begin '#f ((lambda (g$3456$14872) (if g$3456$14872 (begin '#f (append g$3456$14870 g$3456$14872)) '#f)) ((lambda (g$3456$14874) (if (g$3456$13220 g$3456$14874) (begin '#f ((lambda (g$3456$14876) (if g$3456$14876 (begin '#f ((lambda (g$3456$14878) (if g$3456$14878 (begin '#f (append g$3456$14876 g$3456$14878)) '#f)) ((letrec ((g$3456$14880 (lambda (g$3456$14882) (if (g$3456$13220 g$3456$14882) ((lambda (g$3456$14884) (if g$3456$14884 (begin '#f ((lambda (g$3456$14886) (if g$3456$14886 (begin '#f (map cons g$3456$14884 g$3456$14886)) '#f)) (g$3456$14880 (g$3456$13232 g$3456$14882)))) '#f)) ((lambda (g$3456$14888) (list g$3456$14888)) (g$3456$13228 g$3456$14882))) (if (g$3456$13224 g$3456$14882) (list (begin 'e* '())) '#f))))) g$3456$14880) (g$3456$13232 g$3456$14874)))) '#f)) ((lambda (g$3456$14890) (list g$3456$14890)) (g$3456$13228 g$3456$14874)))) '#f)) (g$3456$13232 g$3456$14868)))) '#f)) ((letrec ((g$3456$14892 (lambda (g$3456$14894) (if (g$3456$13220 g$3456$14894) ((lambda (g$3456$14896) (if g$3456$14896 (begin '#f ((lambda (g$3456$14898) (if g$3456$14898 (begin '#f (map cons g$3456$14896 g$3456$14898)) '#f)) (g$3456$14892 (g$3456$13232 g$3456$14894)))) '#f)) ((lambda (g$3456$14900) (list g$3456$14900)) (g$3456$13228 g$3456$14894))) (if (g$3456$13224 g$3456$14894) (list (begin 'd* '())) '#f))))) g$3456$14892) (g$3456$13228 g$3456$14868)))) '#f)) g$3456$14800))) g$3456$14797))) ((lambda (g$3456$14968) ((lambda (g$3456$14970) (if (if g$3456$14970 (begin '#f (apply (lambda (g$3456$14972) '#t) g$3456$14970)) '#f) (apply (lambda (g$3456$14974) (g$3456$13117 '#f (list (g$3456$13605 g$3456$14974 g$3456$14787 g$3456$14788) (g$3456$13116)))) g$3456$14970) ((lambda (g$3456$14976) ((lambda (g$3456$14978) (if (if g$3456$14978 (begin '#f (apply (lambda (g$3456$14980 g$3456$14981 g$3456$14982) '#t) g$3456$14978)) '#f) (apply (lambda (g$3456$14986 g$3456$14987 g$3456$14988) ((lambda (g$3456$14992) (g$3456$13121 '#f (list g$3456$14992) (list (g$3456$13605 g$3456$14986 g$3456$14787 g$3456$14788)) (letrec ((g$3456$14994 (lambda (g$3456$14996 g$3456$14997) (if (null? g$3456$14997) (g$3456$14794 g$3456$14992 g$3456$14996) (g$3456$14792 g$3456$14992 g$3456$14996 (g$3456$14994 (car g$3456$14997) (cdr g$3456$14997))))))) (g$3456$14994 g$3456$14987 g$3456$14988)))) (g$3456$13144 't))) g$3456$14978) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$14976 '())))) ((lambda (g$3456$15000) (if (g$3456$13220 g$3456$15000) (begin '#f ((lambda (g$3456$15002) (if g$3456$15002 (begin '#f ((lambda (g$3456$15004) (if g$3456$15004 (begin '#f (append g$3456$15002 g$3456$15004)) '#f)) ((lambda (g$3456$15006) (if (g$3456$13220 g$3456$15006) (begin '#f ((lambda (g$3456$15008) (if g$3456$15008 (begin '#f ((lambda (g$3456$15010) (if g$3456$15010 (begin '#f (append g$3456$15008 g$3456$15010)) '#f)) ((lambda (g$3456$15012) (if (g$3456$13220 g$3456$15012) (begin '#f ((lambda (g$3456$15014) (if g$3456$15014 (begin '#f ((lambda (g$3456$15016) (if g$3456$15016 (begin '#f (append g$3456$15014 g$3456$15016)) '#f)) ((letrec ((g$3456$15018 (lambda (g$3456$15020) (if (g$3456$13220 g$3456$15020) ((lambda (g$3456$15022) (if g$3456$15022 (begin '#f ((lambda (g$3456$15024) (if g$3456$15024 (begin '#f (map cons g$3456$15022 g$3456$15024)) '#f)) (g$3456$15018 (g$3456$13232 g$3456$15020)))) '#f)) ((lambda (g$3456$15026) (list g$3456$15026)) (g$3456$13228 g$3456$15020))) (if (g$3456$13224 g$3456$15020) (list (begin 'cls* '())) '#f))))) g$3456$15018) (g$3456$13232 g$3456$15012)))) '#f)) ((lambda (g$3456$15028) (list g$3456$15028)) (g$3456$13228 g$3456$15012)))) '#f)) (g$3456$13232 g$3456$15006)))) '#f)) ((lambda (g$3456$15030) (list g$3456$15030)) (g$3456$13228 g$3456$15006)))) '#f)) (g$3456$13232 g$3456$15000)))) '#f)) ((lambda (g$3456$15032) '()) (g$3456$13228 g$3456$15000)))) '#f)) g$3456$14976))) g$3456$14968))) ((lambda (g$3456$15034) (if (g$3456$13220 g$3456$15034) (begin '#f ((lambda (g$3456$15036) (if g$3456$15036 (begin '#f ((lambda (g$3456$15038) (if g$3456$15038 (begin '#f (append g$3456$15036 g$3456$15038)) '#f)) ((lambda (g$3456$15040) (if (g$3456$13220 g$3456$15040) (begin '#f ((lambda (g$3456$15042) (if g$3456$15042 (begin '#f ((lambda (g$3456$15044) (if g$3456$15044 (begin '#f (append g$3456$15042 g$3456$15044)) '#f)) ((lambda (g$3456$15046) (if (equal? (g$3456$13254 g$3456$15046) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$15040)))) '#f)) ((lambda (g$3456$15048) (list g$3456$15048)) (g$3456$13228 g$3456$15040)))) '#f)) (g$3456$13232 g$3456$15034)))) '#f)) ((lambda (g$3456$15050) '()) (g$3456$13228 g$3456$15034)))) '#f)) g$3456$14968))) g$3456$14786))) '#f '#f))) (set! g$3456$13515 (lambda (g$3456$15052 g$3456$15053 g$3456$15054) ((lambda (g$3456$15058) ((lambda (g$3456$15060) (if (if g$3456$15060 (begin '#f (apply (lambda (g$3456$15062) '#t) g$3456$15060)) '#f) (apply (lambda (g$3456$15064) (list 'quote (g$3456$13254 g$3456$15064))) g$3456$15060) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15058 '())))) ((lambda (g$3456$15066) (if (g$3456$13220 g$3456$15066) (begin '#f ((lambda (g$3456$15068) (if g$3456$15068 (begin '#f ((lambda (g$3456$15070) (if g$3456$15070 (begin '#f (append g$3456$15068 g$3456$15070)) '#f)) ((lambda (g$3456$15072) (if (g$3456$13220 g$3456$15072) (begin '#f ((lambda (g$3456$15074) (if g$3456$15074 (begin '#f ((lambda (g$3456$15076) (if g$3456$15076 (begin '#f (append g$3456$15074 g$3456$15076)) '#f)) ((lambda (g$3456$15078) (if (equal? (g$3456$13254 g$3456$15078) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$15072)))) '#f)) ((lambda (g$3456$15080) (list g$3456$15080)) (g$3456$13228 g$3456$15072)))) '#f)) (g$3456$13232 g$3456$15066)))) '#f)) ((lambda (g$3456$15082) '()) (g$3456$13228 g$3456$15066)))) '#f)) g$3456$15058))) g$3456$15052))) (set! g$3456$13517 (lambda (g$3456$15084 g$3456$15085 g$3456$15086) ((lambda (g$3456$15090) ((lambda (g$3456$15092) (if (if g$3456$15092 (begin '#f (apply (lambda (g$3456$15094 g$3456$15095 g$3456$15096) '#t) g$3456$15092)) '#f) (apply (lambda (g$3456$15100 g$3456$15101 g$3456$15102) (call-with-values (lambda () (g$3456$13611 g$3456$15100 (map cons g$3456$15101 g$3456$15102) g$3456$15085 g$3456$15086)) (lambda (g$3456$15106 g$3456$15107) (g$3456$13122 '#f g$3456$15106 g$3456$15107)))) g$3456$15092) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15090 '())))) ((lambda (g$3456$15110) (if (g$3456$13220 g$3456$15110) (begin '#f ((lambda (g$3456$15112) (if g$3456$15112 (begin '#f ((lambda (g$3456$15114) (if g$3456$15114 (begin '#f (append g$3456$15112 g$3456$15114)) '#f)) ((letrec ((g$3456$15116 (lambda (g$3456$15118) (if (g$3456$13220 g$3456$15118) ((lambda (g$3456$15120) (if g$3456$15120 (begin '#f ((lambda (g$3456$15122) (if g$3456$15122 (begin '#f (map cons g$3456$15120 g$3456$15122)) '#f)) (g$3456$15116 (g$3456$13232 g$3456$15118)))) '#f)) ((lambda (g$3456$15124) (if (g$3456$13220 g$3456$15124) (begin '#f ((lambda (g$3456$15126) (if g$3456$15126 (begin '#f ((lambda (g$3456$15128) (if g$3456$15128 (begin '#f (append g$3456$15126 g$3456$15128)) '#f)) ((lambda (g$3456$15130) (if (g$3456$13220 g$3456$15130) (begin '#f ((lambda (g$3456$15132) (if g$3456$15132 (begin '#f ((lambda (g$3456$15134) (if g$3456$15134 (begin '#f (append g$3456$15132 g$3456$15134)) '#f)) ((letrec ((g$3456$15136 (lambda (g$3456$15138) (if (g$3456$13220 g$3456$15138) ((lambda (g$3456$15140) (if g$3456$15140 (begin '#f ((lambda (g$3456$15142) (if g$3456$15142 (begin '#f (map cons g$3456$15140 g$3456$15142)) '#f)) (g$3456$15136 (g$3456$13232 g$3456$15138)))) '#f)) ((lambda (g$3456$15144) (list g$3456$15144)) (g$3456$13228 g$3456$15138))) (if (g$3456$13224 g$3456$15138) (list (begin 'b** '())) '#f))))) g$3456$15136) (g$3456$13232 g$3456$15130)))) '#f)) ((lambda (g$3456$15146) (list g$3456$15146)) (g$3456$13228 g$3456$15130)))) '#f)) (g$3456$13232 g$3456$15124)))) '#f)) ((lambda (g$3456$15148) (list g$3456$15148)) (g$3456$13228 g$3456$15124)))) '#f)) (g$3456$13228 g$3456$15118))) (if (g$3456$13224 g$3456$15118) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f))))) g$3456$15116) (g$3456$13232 g$3456$15110)))) '#f)) ((lambda (g$3456$15150) '()) (g$3456$13228 g$3456$15110)))) '#f)) g$3456$15090))) g$3456$15084))) (set! g$3456$13519 (lambda (g$3456$15152 g$3456$15153 g$3456$15154) ((lambda (g$3456$15158) ((lambda (g$3456$15160) (if (if g$3456$15160 (begin '#f (apply (lambda (g$3456$15162 g$3456$15163 g$3456$15164) '#t) g$3456$15160)) '#f) (apply (lambda (g$3456$15168 g$3456$15169 g$3456$15170) (call-with-values (lambda () (g$3456$13609 g$3456$15168 (cons g$3456$15169 g$3456$15170) g$3456$15153 g$3456$15154)) (lambda (g$3456$15174 g$3456$15175) (g$3456$13123 '#f g$3456$15174 g$3456$15175)))) g$3456$15160) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15158 '())))) ((lambda (g$3456$15178) (if (g$3456$13220 g$3456$15178) (begin '#f ((lambda (g$3456$15180) (if g$3456$15180 (begin '#f ((lambda (g$3456$15182) (if g$3456$15182 (begin '#f (append g$3456$15180 g$3456$15182)) '#f)) ((lambda (g$3456$15184) (if (g$3456$13220 g$3456$15184) (begin '#f ((lambda (g$3456$15186) (if g$3456$15186 (begin '#f ((lambda (g$3456$15188) (if g$3456$15188 (begin '#f (append g$3456$15186 g$3456$15188)) '#f)) ((lambda (g$3456$15190) (if (g$3456$13220 g$3456$15190) (begin '#f ((lambda (g$3456$15192) (if g$3456$15192 (begin '#f ((lambda (g$3456$15194) (if g$3456$15194 (begin '#f (append g$3456$15192 g$3456$15194)) '#f)) ((letrec ((g$3456$15196 (lambda (g$3456$15198) (if (g$3456$13220 g$3456$15198) ((lambda (g$3456$15200) (if g$3456$15200 (begin '#f ((lambda (g$3456$15202) (if g$3456$15202 (begin '#f (map cons g$3456$15200 g$3456$15202)) '#f)) (g$3456$15196 (g$3456$13232 g$3456$15198)))) '#f)) ((lambda (g$3456$15204) (list g$3456$15204)) (g$3456$13228 g$3456$15198))) (if (g$3456$13224 g$3456$15198) (list (begin 'b* '())) '#f))))) g$3456$15196) (g$3456$13232 g$3456$15190)))) '#f)) ((lambda (g$3456$15206) (list g$3456$15206)) (g$3456$13228 g$3456$15190)))) '#f)) (g$3456$13232 g$3456$15184)))) '#f)) ((lambda (g$3456$15208) (list g$3456$15208)) (g$3456$13228 g$3456$15184)))) '#f)) (g$3456$13232 g$3456$15178)))) '#f)) ((lambda (g$3456$15210) '()) (g$3456$13228 g$3456$15178)))) '#f)) g$3456$15158))) g$3456$15152))) (set! g$3456$13521 (lambda (g$3456$15212) (g$3456$13210 (letrec ((g$3456$15214 (lambda (g$3456$15216) (if (g$3456$13186 g$3456$15216) g$3456$15216 (if (pair? g$3456$15216) (cons (g$3456$15214 (car g$3456$15216)) (g$3456$15214 (cdr g$3456$15216))) (if (symbol? g$3456$15216) (g$3456$13487 g$3456$15216) (if (vector? g$3456$15216) (list->vector (map g$3456$15214 (vector->list g$3456$15216))) g$3456$15216))))))) (g$3456$15214 g$3456$15212)) '() '()))) (set! g$3456$13523 (lambda (g$3456$15218) ((lambda (g$3456$15220) ((lambda (g$3456$15222) (if (if g$3456$15222 (begin '#f (apply (lambda (g$3456$15224 g$3456$15225 g$3456$15226 g$3456$15227) '#t) g$3456$15222)) '#f) (apply (lambda (g$3456$15232 g$3456$15233 g$3456$15234 g$3456$15235) (g$3456$13521 (list 'syntax-case (cons 'list g$3456$15233) '() (list g$3456$15232 (cons 'begin (cons g$3456$15234 g$3456$15235)))))) g$3456$15222) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15220 '())))) ((lambda (g$3456$15240) (if (g$3456$13220 g$3456$15240) (begin '#f ((lambda (g$3456$15242) (if g$3456$15242 (begin '#f ((lambda (g$3456$15244) (if g$3456$15244 (begin '#f (append g$3456$15242 g$3456$15244)) '#f)) ((lambda (g$3456$15246) (if (g$3456$13220 g$3456$15246) (begin '#f ((lambda (g$3456$15248) (if g$3456$15248 (begin '#f ((lambda (g$3456$15250) (if g$3456$15250 (begin '#f (append g$3456$15248 g$3456$15250)) '#f)) ((lambda (g$3456$15252) (if (g$3456$13220 g$3456$15252) (begin '#f ((lambda (g$3456$15254) (if g$3456$15254 (begin '#f ((lambda (g$3456$15256) (if g$3456$15256 (begin '#f (append g$3456$15254 g$3456$15256)) '#f)) ((letrec ((g$3456$15258 (lambda (g$3456$15260) (if (g$3456$13220 g$3456$15260) ((lambda (g$3456$15262) (if g$3456$15262 (begin '#f ((lambda (g$3456$15264) (if g$3456$15264 (begin '#f (map cons g$3456$15262 g$3456$15264)) '#f)) (g$3456$15258 (g$3456$13232 g$3456$15260)))) '#f)) ((lambda (g$3456$15266) (list g$3456$15266)) (g$3456$13228 g$3456$15260))) (if (g$3456$13224 g$3456$15260) (list (begin 'b* '())) '#f))))) g$3456$15258) (g$3456$13232 g$3456$15252)))) '#f)) ((lambda (g$3456$15268) (list g$3456$15268)) (g$3456$13228 g$3456$15252)))) '#f)) (g$3456$13232 g$3456$15246)))) '#f)) ((letrec ((g$3456$15270 (lambda (g$3456$15272) (if (g$3456$13220 g$3456$15272) ((lambda (g$3456$15274) (if g$3456$15274 (begin '#f ((lambda (g$3456$15276) (if g$3456$15276 (begin '#f (map cons g$3456$15274 g$3456$15276)) '#f)) (g$3456$15270 (g$3456$13232 g$3456$15272)))) '#f)) ((lambda (g$3456$15278) (if (g$3456$13220 g$3456$15278) (begin '#f ((lambda (g$3456$15280) (if g$3456$15280 (begin '#f ((lambda (g$3456$15282) (if g$3456$15282 (begin '#f (append g$3456$15280 g$3456$15282)) '#f)) ((lambda (g$3456$15284) (if (g$3456$13220 g$3456$15284) (begin '#f ((lambda (g$3456$15286) (if g$3456$15286 (begin '#f ((lambda (g$3456$15288) (if g$3456$15288 (begin '#f (append g$3456$15286 g$3456$15288)) '#f)) ((lambda (g$3456$15290) (if (equal? (g$3456$13254 g$3456$15290) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$15284)))) '#f)) ((lambda (g$3456$15292) (list g$3456$15292)) (g$3456$13228 g$3456$15284)))) '#f)) (g$3456$13232 g$3456$15278)))) '#f)) ((lambda (g$3456$15294) (list g$3456$15294)) (g$3456$13228 g$3456$15278)))) '#f)) (g$3456$13228 g$3456$15272))) (if (g$3456$13224 g$3456$15272) (list (begin 'fml* '()) (begin 'expr* '())) '#f))))) g$3456$15270) (g$3456$13228 g$3456$15246)))) '#f)) (g$3456$13232 g$3456$15240)))) '#f)) ((lambda (g$3456$15296) '()) (g$3456$13228 g$3456$15240)))) '#f)) g$3456$15220))) g$3456$15218))) (set! g$3456$13525 (lambda (g$3456$15298) ((lambda (g$3456$15300) ((lambda (g$3456$15302) (if (if g$3456$15302 (begin '#f (apply (lambda (g$3456$15304 g$3456$15305 g$3456$15306 g$3456$15307) '#t) g$3456$15302)) '#f) (apply (lambda (g$3456$15312 g$3456$15313 g$3456$15314 g$3456$15315) (if (g$3456$13244 g$3456$15312) (g$3456$13521 (cons (cons 'lambda (cons g$3456$15312 (cons g$3456$15314 g$3456$15315))) g$3456$15313)) (error 'expander '"invalid bindings" (g$3456$13252 g$3456$15298 '())))) g$3456$15302) ((lambda (g$3456$15320) ((lambda (g$3456$15322) (if (if g$3456$15322 (begin '#f (apply (lambda (g$3456$15324 g$3456$15325 g$3456$15326 g$3456$15327 g$3456$15328) (g$3456$13234 g$3456$15324)) g$3456$15322)) '#f) (apply (lambda (g$3456$15334 g$3456$15335 g$3456$15336 g$3456$15337 g$3456$15338) (if (g$3456$13244 g$3456$15335) (g$3456$13521 (list 'letrec (list (list g$3456$15334 (cons 'lambda (cons g$3456$15335 (cons g$3456$15337 g$3456$15338))))) (cons g$3456$15334 g$3456$15336))) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15298 '())))) g$3456$15322) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15320 '())))) ((lambda (g$3456$15344) (if (g$3456$13220 g$3456$15344) (begin '#f ((lambda (g$3456$15346) (if g$3456$15346 (begin '#f ((lambda (g$3456$15348) (if g$3456$15348 (begin '#f (append g$3456$15346 g$3456$15348)) '#f)) ((lambda (g$3456$15350) (if (g$3456$13220 g$3456$15350) (begin '#f ((lambda (g$3456$15352) (if g$3456$15352 (begin '#f ((lambda (g$3456$15354) (if g$3456$15354 (begin '#f (append g$3456$15352 g$3456$15354)) '#f)) ((lambda (g$3456$15356) (if (g$3456$13220 g$3456$15356) (begin '#f ((lambda (g$3456$15358) (if g$3456$15358 (begin '#f ((lambda (g$3456$15360) (if g$3456$15360 (begin '#f (append g$3456$15358 g$3456$15360)) '#f)) ((lambda (g$3456$15362) (if (g$3456$13220 g$3456$15362) (begin '#f ((lambda (g$3456$15364) (if g$3456$15364 (begin '#f ((lambda (g$3456$15366) (if g$3456$15366 (begin '#f (append g$3456$15364 g$3456$15366)) '#f)) ((letrec ((g$3456$15368 (lambda (g$3456$15370) (if (g$3456$13220 g$3456$15370) ((lambda (g$3456$15372) (if g$3456$15372 (begin '#f ((lambda (g$3456$15374) (if g$3456$15374 (begin '#f (map cons g$3456$15372 g$3456$15374)) '#f)) (g$3456$15368 (g$3456$13232 g$3456$15370)))) '#f)) ((lambda (g$3456$15376) (list g$3456$15376)) (g$3456$13228 g$3456$15370))) (if (g$3456$13224 g$3456$15370) (list (begin 'b* '())) '#f))))) g$3456$15368) (g$3456$13232 g$3456$15362)))) '#f)) ((lambda (g$3456$15378) (list g$3456$15378)) (g$3456$13228 g$3456$15362)))) '#f)) (g$3456$13232 g$3456$15356)))) '#f)) ((letrec ((g$3456$15380 (lambda (g$3456$15382) (if (g$3456$13220 g$3456$15382) ((lambda (g$3456$15384) (if g$3456$15384 (begin '#f ((lambda (g$3456$15386) (if g$3456$15386 (begin '#f (map cons g$3456$15384 g$3456$15386)) '#f)) (g$3456$15380 (g$3456$13232 g$3456$15382)))) '#f)) ((lambda (g$3456$15388) (if (g$3456$13220 g$3456$15388) (begin '#f ((lambda (g$3456$15390) (if g$3456$15390 (begin '#f ((lambda (g$3456$15392) (if g$3456$15392 (begin '#f (append g$3456$15390 g$3456$15392)) '#f)) ((lambda (g$3456$15394) (if (g$3456$13220 g$3456$15394) (begin '#f ((lambda (g$3456$15396) (if g$3456$15396 (begin '#f ((lambda (g$3456$15398) (if g$3456$15398 (begin '#f (append g$3456$15396 g$3456$15398)) '#f)) ((lambda (g$3456$15400) (if (equal? (g$3456$13254 g$3456$15400) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$15394)))) '#f)) ((lambda (g$3456$15402) (list g$3456$15402)) (g$3456$13228 g$3456$15394)))) '#f)) (g$3456$13232 g$3456$15388)))) '#f)) ((lambda (g$3456$15404) (list g$3456$15404)) (g$3456$13228 g$3456$15388)))) '#f)) (g$3456$13228 g$3456$15382))) (if (g$3456$13224 g$3456$15382) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$3456$15380) (g$3456$13228 g$3456$15356)))) '#f)) (g$3456$13232 g$3456$15350)))) '#f)) ((lambda (g$3456$15406) (list g$3456$15406)) (g$3456$13228 g$3456$15350)))) '#f)) (g$3456$13232 g$3456$15344)))) '#f)) ((lambda (g$3456$15408) '()) (g$3456$13228 g$3456$15344)))) '#f)) g$3456$15320))) g$3456$15300))) ((lambda (g$3456$15410) (if (g$3456$13220 g$3456$15410) (begin '#f ((lambda (g$3456$15412) (if g$3456$15412 (begin '#f ((lambda (g$3456$15414) (if g$3456$15414 (begin '#f (append g$3456$15412 g$3456$15414)) '#f)) ((lambda (g$3456$15416) (if (g$3456$13220 g$3456$15416) (begin '#f ((lambda (g$3456$15418) (if g$3456$15418 (begin '#f ((lambda (g$3456$15420) (if g$3456$15420 (begin '#f (append g$3456$15418 g$3456$15420)) '#f)) ((lambda (g$3456$15422) (if (g$3456$13220 g$3456$15422) (begin '#f ((lambda (g$3456$15424) (if g$3456$15424 (begin '#f ((lambda (g$3456$15426) (if g$3456$15426 (begin '#f (append g$3456$15424 g$3456$15426)) '#f)) ((letrec ((g$3456$15428 (lambda (g$3456$15430) (if (g$3456$13220 g$3456$15430) ((lambda (g$3456$15432) (if g$3456$15432 (begin '#f ((lambda (g$3456$15434) (if g$3456$15434 (begin '#f (map cons g$3456$15432 g$3456$15434)) '#f)) (g$3456$15428 (g$3456$13232 g$3456$15430)))) '#f)) ((lambda (g$3456$15436) (list g$3456$15436)) (g$3456$13228 g$3456$15430))) (if (g$3456$13224 g$3456$15430) (list (begin 'b* '())) '#f))))) g$3456$15428) (g$3456$13232 g$3456$15422)))) '#f)) ((lambda (g$3456$15438) (list g$3456$15438)) (g$3456$13228 g$3456$15422)))) '#f)) (g$3456$13232 g$3456$15416)))) '#f)) ((letrec ((g$3456$15440 (lambda (g$3456$15442) (if (g$3456$13220 g$3456$15442) ((lambda (g$3456$15444) (if g$3456$15444 (begin '#f ((lambda (g$3456$15446) (if g$3456$15446 (begin '#f (map cons g$3456$15444 g$3456$15446)) '#f)) (g$3456$15440 (g$3456$13232 g$3456$15442)))) '#f)) ((lambda (g$3456$15448) (if (g$3456$13220 g$3456$15448) (begin '#f ((lambda (g$3456$15450) (if g$3456$15450 (begin '#f ((lambda (g$3456$15452) (if g$3456$15452 (begin '#f (append g$3456$15450 g$3456$15452)) '#f)) ((lambda (g$3456$15454) (if (g$3456$13220 g$3456$15454) (begin '#f ((lambda (g$3456$15456) (if g$3456$15456 (begin '#f ((lambda (g$3456$15458) (if g$3456$15458 (begin '#f (append g$3456$15456 g$3456$15458)) '#f)) ((lambda (g$3456$15460) (if (equal? (g$3456$13254 g$3456$15460) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$15454)))) '#f)) ((lambda (g$3456$15462) (list g$3456$15462)) (g$3456$13228 g$3456$15454)))) '#f)) (g$3456$13232 g$3456$15448)))) '#f)) ((lambda (g$3456$15464) (list g$3456$15464)) (g$3456$13228 g$3456$15448)))) '#f)) (g$3456$13228 g$3456$15442))) (if (g$3456$13224 g$3456$15442) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$3456$15440) (g$3456$13228 g$3456$15416)))) '#f)) (g$3456$13232 g$3456$15410)))) '#f)) ((lambda (g$3456$15466) '()) (g$3456$13228 g$3456$15410)))) '#f)) g$3456$15300))) g$3456$15298))) (set! g$3456$13527 (lambda (g$3456$15468) ((lambda (g$3456$15470) ((lambda (g$3456$15472) (if (if g$3456$15472 (begin '#f (apply (lambda (g$3456$15474 g$3456$15475 g$3456$15476 g$3456$15477) '#t) g$3456$15472)) '#f) (apply (lambda (g$3456$15482 g$3456$15483 g$3456$15484 g$3456$15485) (if (g$3456$13244 g$3456$15483) (g$3456$13521 (list 'make-traced-procedure (list 'quote g$3456$15482) (cons 'lambda (cons g$3456$15483 (cons g$3456$15484 g$3456$15485))))) (error 'expander '"invalid formals" (g$3456$13252 g$3456$15468 '())))) g$3456$15472) ((lambda (g$3456$15490) ((lambda (g$3456$15492) (if (if g$3456$15492 (begin '#f (apply (lambda (g$3456$15494 g$3456$15495 g$3456$15496 g$3456$15497 g$3456$15498) '#t) g$3456$15492)) '#f) (apply (lambda (g$3456$15504 g$3456$15505 g$3456$15506 g$3456$15507 g$3456$15508) (if (g$3456$13244 (cons g$3456$15506 g$3456$15505)) (g$3456$13521 (list 'make-traced-procedure (list 'quote g$3456$15504) (cons 'lambda (cons (append g$3456$15505 g$3456$15506) (cons g$3456$15507 g$3456$15508))))) (error 'expander '"invalid formals" (g$3456$13252 g$3456$15468 '())))) g$3456$15492) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15490 '())))) ((lambda (g$3456$15514) (if (g$3456$13220 g$3456$15514) (begin '#f ((lambda (g$3456$15516) (if g$3456$15516 (begin '#f ((lambda (g$3456$15518) (if g$3456$15518 (begin '#f (append g$3456$15516 g$3456$15518)) '#f)) ((lambda (g$3456$15520) (if (g$3456$13220 g$3456$15520) (begin '#f ((lambda (g$3456$15522) (if g$3456$15522 (begin '#f ((lambda (g$3456$15524) (if g$3456$15524 (begin '#f (append g$3456$15522 g$3456$15524)) '#f)) ((lambda (g$3456$15526) (if (g$3456$13220 g$3456$15526) (begin '#f ((lambda (g$3456$15528) (if g$3456$15528 (begin '#f ((lambda (g$3456$15530) (if g$3456$15530 (begin '#f (append g$3456$15528 g$3456$15530)) '#f)) ((lambda (g$3456$15532) (if (g$3456$13220 g$3456$15532) (begin '#f ((lambda (g$3456$15534) (if g$3456$15534 (begin '#f ((lambda (g$3456$15536) (if g$3456$15536 (begin '#f (append g$3456$15534 g$3456$15536)) '#f)) ((letrec ((g$3456$15538 (lambda (g$3456$15540) (if (g$3456$13220 g$3456$15540) ((lambda (g$3456$15542) (if g$3456$15542 (begin '#f ((lambda (g$3456$15544) (if g$3456$15544 (begin '#f (map cons g$3456$15542 g$3456$15544)) '#f)) (g$3456$15538 (g$3456$13232 g$3456$15540)))) '#f)) ((lambda (g$3456$15546) (list g$3456$15546)) (g$3456$13228 g$3456$15540))) (if (g$3456$13224 g$3456$15540) (list (begin 'b* '())) '#f))))) g$3456$15538) (g$3456$13232 g$3456$15532)))) '#f)) ((lambda (g$3456$15548) (list g$3456$15548)) (g$3456$13228 g$3456$15532)))) '#f)) (g$3456$13232 g$3456$15526)))) '#f)) ((letrec ((g$3456$15550 (lambda (g$3456$15556) (if (g$3456$13220 g$3456$15556) ((lambda (g$3456$15558) (if g$3456$15558 (begin '#f ((lambda (g$3456$15560) (if g$3456$15560 (begin '#f (cons (map cons g$3456$15558 (car g$3456$15560)) (cdr g$3456$15560))) '#f)) (g$3456$15550 (g$3456$13232 g$3456$15556)))) '#f)) ((lambda (g$3456$15562) (list g$3456$15562)) (g$3456$13228 g$3456$15556))) ((lambda (g$3456$15564) (if g$3456$15564 (begin '#f (cons (list (begin 'fmls '())) g$3456$15564)) '#f)) ((lambda (g$3456$15566) (list g$3456$15566)) g$3456$15556)))))) (lambda (g$3456$15552) ((lambda (g$3456$15554) (if g$3456$15554 (begin '#f (append (car g$3456$15554) (cdr g$3456$15554))) '#f)) (g$3456$15550 g$3456$15552)))) (g$3456$13228 g$3456$15526)))) '#f)) (g$3456$13232 g$3456$15520)))) '#f)) ((lambda (g$3456$15568) (list g$3456$15568)) (g$3456$13228 g$3456$15520)))) '#f)) (g$3456$13232 g$3456$15514)))) '#f)) ((lambda (g$3456$15570) '()) (g$3456$13228 g$3456$15514)))) '#f)) g$3456$15490))) g$3456$15470))) ((lambda (g$3456$15572) (if (g$3456$13220 g$3456$15572) (begin '#f ((lambda (g$3456$15574) (if g$3456$15574 (begin '#f ((lambda (g$3456$15576) (if g$3456$15576 (begin '#f (append g$3456$15574 g$3456$15576)) '#f)) ((lambda (g$3456$15578) (if (g$3456$13220 g$3456$15578) (begin '#f ((lambda (g$3456$15580) (if g$3456$15580 (begin '#f ((lambda (g$3456$15582) (if g$3456$15582 (begin '#f (append g$3456$15580 g$3456$15582)) '#f)) ((lambda (g$3456$15584) (if (g$3456$13220 g$3456$15584) (begin '#f ((lambda (g$3456$15586) (if g$3456$15586 (begin '#f ((lambda (g$3456$15588) (if g$3456$15588 (begin '#f (append g$3456$15586 g$3456$15588)) '#f)) ((lambda (g$3456$15590) (if (g$3456$13220 g$3456$15590) (begin '#f ((lambda (g$3456$15592) (if g$3456$15592 (begin '#f ((lambda (g$3456$15594) (if g$3456$15594 (begin '#f (append g$3456$15592 g$3456$15594)) '#f)) ((letrec ((g$3456$15596 (lambda (g$3456$15598) (if (g$3456$13220 g$3456$15598) ((lambda (g$3456$15600) (if g$3456$15600 (begin '#f ((lambda (g$3456$15602) (if g$3456$15602 (begin '#f (map cons g$3456$15600 g$3456$15602)) '#f)) (g$3456$15596 (g$3456$13232 g$3456$15598)))) '#f)) ((lambda (g$3456$15604) (list g$3456$15604)) (g$3456$13228 g$3456$15598))) (if (g$3456$13224 g$3456$15598) (list (begin 'b* '())) '#f))))) g$3456$15596) (g$3456$13232 g$3456$15590)))) '#f)) ((lambda (g$3456$15606) (list g$3456$15606)) (g$3456$13228 g$3456$15590)))) '#f)) (g$3456$13232 g$3456$15584)))) '#f)) ((letrec ((g$3456$15608 (lambda (g$3456$15610) (if (g$3456$13220 g$3456$15610) ((lambda (g$3456$15612) (if g$3456$15612 (begin '#f ((lambda (g$3456$15614) (if g$3456$15614 (begin '#f (map cons g$3456$15612 g$3456$15614)) '#f)) (g$3456$15608 (g$3456$13232 g$3456$15610)))) '#f)) ((lambda (g$3456$15616) (list g$3456$15616)) (g$3456$13228 g$3456$15610))) (if (g$3456$13224 g$3456$15610) (list (begin 'fmls '())) '#f))))) g$3456$15608) (g$3456$13228 g$3456$15584)))) '#f)) (g$3456$13232 g$3456$15578)))) '#f)) ((lambda (g$3456$15618) (list g$3456$15618)) (g$3456$13228 g$3456$15578)))) '#f)) (g$3456$13232 g$3456$15572)))) '#f)) ((lambda (g$3456$15620) '()) (g$3456$13228 g$3456$15572)))) '#f)) g$3456$15470))) g$3456$15468))) (set! g$3456$13529 (lambda (g$3456$15622) ((lambda (g$3456$15624) ((lambda (g$3456$15626) (if (if g$3456$15626 (begin '#f (apply (lambda (g$3456$15628 g$3456$15629 g$3456$15630 g$3456$15631) '#t) g$3456$15626)) '#f) (apply (lambda (g$3456$15636 g$3456$15637 g$3456$15638 g$3456$15639) (if (g$3456$13244 g$3456$15637) (g$3456$13521 (list 'define g$3456$15636 (list 'make-traced-procedure (list 'quote g$3456$15636) (cons 'lambda (cons g$3456$15637 (cons g$3456$15638 g$3456$15639)))))) (error 'expander '"invalid formals" (g$3456$13252 g$3456$15622 '())))) g$3456$15626) ((lambda (g$3456$15644) ((lambda (g$3456$15646) (if (if g$3456$15646 (begin '#f (apply (lambda (g$3456$15648 g$3456$15649 g$3456$15650 g$3456$15651 g$3456$15652) '#t) g$3456$15646)) '#f) (apply (lambda (g$3456$15658 g$3456$15659 g$3456$15660 g$3456$15661 g$3456$15662) (if (g$3456$13244 (cons g$3456$15660 g$3456$15659)) (g$3456$13521 (list 'define g$3456$15658 (list 'make-traced-procedure (list 'quote g$3456$15658) (cons 'lambda (cons (append g$3456$15659 g$3456$15660) (cons g$3456$15661 g$3456$15662)))))) (error 'expander '"invalid formals" (g$3456$13252 g$3456$15622 '())))) g$3456$15646) ((lambda (g$3456$15668) ((lambda (g$3456$15670) (if (if g$3456$15670 (begin '#f (apply (lambda (g$3456$15672 g$3456$15673) '#t) g$3456$15670)) '#f) (apply (lambda (g$3456$15676 g$3456$15677) (if (g$3456$13234 g$3456$15676) (g$3456$13521 (list 'define g$3456$15676 (list 'let (list (list 'v g$3456$15677)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$3456$15676) '(v))) '((error 'trace-define "not a procedure" v)))))))) (error 'expander '"invalid formals" (g$3456$13252 g$3456$15622 '())))) g$3456$15670) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15668 '())))) ((lambda (g$3456$15680) (if (g$3456$13220 g$3456$15680) (begin '#f ((lambda (g$3456$15682) (if g$3456$15682 (begin '#f ((lambda (g$3456$15684) (if g$3456$15684 (begin '#f (append g$3456$15682 g$3456$15684)) '#f)) ((lambda (g$3456$15686) (if (g$3456$13220 g$3456$15686) (begin '#f ((lambda (g$3456$15688) (if g$3456$15688 (begin '#f ((lambda (g$3456$15690) (if g$3456$15690 (begin '#f (append g$3456$15688 g$3456$15690)) '#f)) ((lambda (g$3456$15692) (if (g$3456$13220 g$3456$15692) (begin '#f ((lambda (g$3456$15694) (if g$3456$15694 (begin '#f ((lambda (g$3456$15696) (if g$3456$15696 (begin '#f (append g$3456$15694 g$3456$15696)) '#f)) ((lambda (g$3456$15698) (if (equal? (g$3456$13254 g$3456$15698) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$15692)))) '#f)) ((lambda (g$3456$15700) (list g$3456$15700)) (g$3456$13228 g$3456$15692)))) '#f)) (g$3456$13232 g$3456$15686)))) '#f)) ((lambda (g$3456$15702) (list g$3456$15702)) (g$3456$13228 g$3456$15686)))) '#f)) (g$3456$13232 g$3456$15680)))) '#f)) ((lambda (g$3456$15704) '()) (g$3456$13228 g$3456$15680)))) '#f)) g$3456$15668))) g$3456$15644))) ((lambda (g$3456$15706) (if (g$3456$13220 g$3456$15706) (begin '#f ((lambda (g$3456$15708) (if g$3456$15708 (begin '#f ((lambda (g$3456$15710) (if g$3456$15710 (begin '#f (append g$3456$15708 g$3456$15710)) '#f)) ((lambda (g$3456$15712) (if (g$3456$13220 g$3456$15712) (begin '#f ((lambda (g$3456$15714) (if g$3456$15714 (begin '#f ((lambda (g$3456$15716) (if g$3456$15716 (begin '#f (append g$3456$15714 g$3456$15716)) '#f)) ((lambda (g$3456$15718) (if (g$3456$13220 g$3456$15718) (begin '#f ((lambda (g$3456$15720) (if g$3456$15720 (begin '#f ((lambda (g$3456$15722) (if g$3456$15722 (begin '#f (append g$3456$15720 g$3456$15722)) '#f)) ((letrec ((g$3456$15724 (lambda (g$3456$15726) (if (g$3456$13220 g$3456$15726) ((lambda (g$3456$15728) (if g$3456$15728 (begin '#f ((lambda (g$3456$15730) (if g$3456$15730 (begin '#f (map cons g$3456$15728 g$3456$15730)) '#f)) (g$3456$15724 (g$3456$13232 g$3456$15726)))) '#f)) ((lambda (g$3456$15732) (list g$3456$15732)) (g$3456$13228 g$3456$15726))) (if (g$3456$13224 g$3456$15726) (list (begin 'b* '())) '#f))))) g$3456$15724) (g$3456$13232 g$3456$15718)))) '#f)) ((lambda (g$3456$15734) (list g$3456$15734)) (g$3456$13228 g$3456$15718)))) '#f)) (g$3456$13232 g$3456$15712)))) '#f)) ((lambda (g$3456$15736) (if (g$3456$13220 g$3456$15736) (begin '#f ((lambda (g$3456$15738) (if g$3456$15738 (begin '#f ((lambda (g$3456$15740) (if g$3456$15740 (begin '#f (append g$3456$15738 g$3456$15740)) '#f)) ((letrec ((g$3456$15742 (lambda (g$3456$15748) (if (g$3456$13220 g$3456$15748) ((lambda (g$3456$15750) (if g$3456$15750 (begin '#f ((lambda (g$3456$15752) (if g$3456$15752 (begin '#f (cons (map cons g$3456$15750 (car g$3456$15752)) (cdr g$3456$15752))) '#f)) (g$3456$15742 (g$3456$13232 g$3456$15748)))) '#f)) ((lambda (g$3456$15754) (list g$3456$15754)) (g$3456$13228 g$3456$15748))) ((lambda (g$3456$15756) (if g$3456$15756 (begin '#f (cons (list (begin 'fmls '())) g$3456$15756)) '#f)) ((lambda (g$3456$15758) (list g$3456$15758)) g$3456$15748)))))) (lambda (g$3456$15744) ((lambda (g$3456$15746) (if g$3456$15746 (begin '#f (append (car g$3456$15746) (cdr g$3456$15746))) '#f)) (g$3456$15742 g$3456$15744)))) (g$3456$13232 g$3456$15736)))) '#f)) ((lambda (g$3456$15760) (list g$3456$15760)) (g$3456$13228 g$3456$15736)))) '#f)) (g$3456$13228 g$3456$15712)))) '#f)) (g$3456$13232 g$3456$15706)))) '#f)) ((lambda (g$3456$15762) '()) (g$3456$13228 g$3456$15706)))) '#f)) g$3456$15644))) g$3456$15624))) ((lambda (g$3456$15764) (if (g$3456$13220 g$3456$15764) (begin '#f ((lambda (g$3456$15766) (if g$3456$15766 (begin '#f ((lambda (g$3456$15768) (if g$3456$15768 (begin '#f (append g$3456$15766 g$3456$15768)) '#f)) ((lambda (g$3456$15770) (if (g$3456$13220 g$3456$15770) (begin '#f ((lambda (g$3456$15772) (if g$3456$15772 (begin '#f ((lambda (g$3456$15774) (if g$3456$15774 (begin '#f (append g$3456$15772 g$3456$15774)) '#f)) ((lambda (g$3456$15776) (if (g$3456$13220 g$3456$15776) (begin '#f ((lambda (g$3456$15778) (if g$3456$15778 (begin '#f ((lambda (g$3456$15780) (if g$3456$15780 (begin '#f (append g$3456$15778 g$3456$15780)) '#f)) ((letrec ((g$3456$15782 (lambda (g$3456$15784) (if (g$3456$13220 g$3456$15784) ((lambda (g$3456$15786) (if g$3456$15786 (begin '#f ((lambda (g$3456$15788) (if g$3456$15788 (begin '#f (map cons g$3456$15786 g$3456$15788)) '#f)) (g$3456$15782 (g$3456$13232 g$3456$15784)))) '#f)) ((lambda (g$3456$15790) (list g$3456$15790)) (g$3456$13228 g$3456$15784))) (if (g$3456$13224 g$3456$15784) (list (begin 'b* '())) '#f))))) g$3456$15782) (g$3456$13232 g$3456$15776)))) '#f)) ((lambda (g$3456$15792) (list g$3456$15792)) (g$3456$13228 g$3456$15776)))) '#f)) (g$3456$13232 g$3456$15770)))) '#f)) ((lambda (g$3456$15794) (if (g$3456$13220 g$3456$15794) (begin '#f ((lambda (g$3456$15796) (if g$3456$15796 (begin '#f ((lambda (g$3456$15798) (if g$3456$15798 (begin '#f (append g$3456$15796 g$3456$15798)) '#f)) ((letrec ((g$3456$15800 (lambda (g$3456$15802) (if (g$3456$13220 g$3456$15802) ((lambda (g$3456$15804) (if g$3456$15804 (begin '#f ((lambda (g$3456$15806) (if g$3456$15806 (begin '#f (map cons g$3456$15804 g$3456$15806)) '#f)) (g$3456$15800 (g$3456$13232 g$3456$15802)))) '#f)) ((lambda (g$3456$15808) (list g$3456$15808)) (g$3456$13228 g$3456$15802))) (if (g$3456$13224 g$3456$15802) (list (begin 'fmls '())) '#f))))) g$3456$15800) (g$3456$13232 g$3456$15794)))) '#f)) ((lambda (g$3456$15810) (list g$3456$15810)) (g$3456$13228 g$3456$15794)))) '#f)) (g$3456$13228 g$3456$15770)))) '#f)) (g$3456$13232 g$3456$15764)))) '#f)) ((lambda (g$3456$15812) '()) (g$3456$13228 g$3456$15764)))) '#f)) g$3456$15624))) g$3456$15622))) (set! g$3456$13531 (lambda (g$3456$15814) ((lambda (g$3456$15816) (begin (set! g$3456$15816 (lambda (g$3456$15818 g$3456$15819 g$3456$15820) ((lambda (g$3456$15824 g$3456$15826) (begin (set! g$3456$15824 (lambda (g$3456$15920 g$3456$15921) ((lambda (g$3456$15924) ((lambda (g$3456$15926) (if (if g$3456$15926 (begin '#f (apply (lambda (g$3456$15928 g$3456$15929) '#t) g$3456$15926)) '#f) (apply (lambda (g$3456$15932 g$3456$15933) ((lambda (g$3456$15936) (list 'let (list (list g$3456$15936 g$3456$15932)) (list 'if g$3456$15936 (list g$3456$15933 g$3456$15936) g$3456$15921))) (gensym))) g$3456$15926) ((lambda (g$3456$15938) ((lambda (g$3456$15940) (if (if g$3456$15940 (begin '#f (apply (lambda (g$3456$15942) '#t) g$3456$15940)) '#f) (apply (lambda (g$3456$15944) ((lambda (g$3456$15946) (list 'let (list (list g$3456$15946 g$3456$15944)) (list 'if g$3456$15946 g$3456$15946 g$3456$15921))) (gensym))) g$3456$15940) ((lambda (g$3456$15948) ((lambda (g$3456$15950) (if (if g$3456$15950 (begin '#f (apply (lambda (g$3456$15952 g$3456$15953 g$3456$15954) '#t) g$3456$15950)) '#f) (apply (lambda (g$3456$15958 g$3456$15959 g$3456$15960) (list 'if g$3456$15958 (cons 'begin (cons g$3456$15959 g$3456$15960)) g$3456$15921)) g$3456$15950) ((lambda (g$3456$15964) ((lambda (g$3456$15966) (if (if g$3456$15966 (begin '#f (apply (lambda () '#t) g$3456$15966)) '#f) (apply (lambda () (error 'expander '"invalid guard clause" (g$3456$13252 g$3456$15920 '()))) g$3456$15966) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15964 '())))) ((lambda (g$3456$15968) '()) g$3456$15964))) g$3456$15948))) ((lambda (g$3456$15970) (if (g$3456$13220 g$3456$15970) (begin '#f ((lambda (g$3456$15972) (if g$3456$15972 (begin '#f ((lambda (g$3456$15974) (if g$3456$15974 (begin '#f (append g$3456$15972 g$3456$15974)) '#f)) ((lambda (g$3456$15976) (if (g$3456$13220 g$3456$15976) (begin '#f ((lambda (g$3456$15978) (if g$3456$15978 (begin '#f ((lambda (g$3456$15980) (if g$3456$15980 (begin '#f (append g$3456$15978 g$3456$15980)) '#f)) ((letrec ((g$3456$15982 (lambda (g$3456$15984) (if (g$3456$13220 g$3456$15984) ((lambda (g$3456$15986) (if g$3456$15986 (begin '#f ((lambda (g$3456$15988) (if g$3456$15988 (begin '#f (map cons g$3456$15986 g$3456$15988)) '#f)) (g$3456$15982 (g$3456$13232 g$3456$15984)))) '#f)) ((lambda (g$3456$15990) (list g$3456$15990)) (g$3456$13228 g$3456$15984))) (if (g$3456$13224 g$3456$15984) (list (begin 'v* '())) '#f))))) g$3456$15982) (g$3456$13232 g$3456$15976)))) '#f)) ((lambda (g$3456$15992) (list g$3456$15992)) (g$3456$13228 g$3456$15976)))) '#f)) (g$3456$13232 g$3456$15970)))) '#f)) ((lambda (g$3456$15994) (list g$3456$15994)) (g$3456$13228 g$3456$15970)))) '#f)) g$3456$15948))) g$3456$15938))) ((lambda (g$3456$15996) (if (g$3456$13220 g$3456$15996) (begin '#f ((lambda (g$3456$15998) (if g$3456$15998 (begin '#f ((lambda (g$3456$16000) (if g$3456$16000 (begin '#f (append g$3456$15998 g$3456$16000)) '#f)) ((lambda (g$3456$16002) (if (equal? (g$3456$13254 g$3456$16002) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$15996)))) '#f)) ((lambda (g$3456$16004) (list g$3456$16004)) (g$3456$13228 g$3456$15996)))) '#f)) g$3456$15938))) g$3456$15924))) ((lambda (g$3456$16006) (if (g$3456$13220 g$3456$16006) (begin '#f ((lambda (g$3456$16008) (if g$3456$16008 (begin '#f ((lambda (g$3456$16010) (if g$3456$16010 (begin '#f (append g$3456$16008 g$3456$16010)) '#f)) ((lambda (g$3456$16012) (if (g$3456$13220 g$3456$16012) (begin '#f ((lambda (g$3456$16014) (if g$3456$16014 (begin '#f ((lambda (g$3456$16016) (if g$3456$16016 (begin '#f (append g$3456$16014 g$3456$16016)) '#f)) ((lambda (g$3456$16018) (if (g$3456$13220 g$3456$16018) (begin '#f ((lambda (g$3456$16020) (if g$3456$16020 (begin '#f ((lambda (g$3456$16022) (if g$3456$16022 (begin '#f (append g$3456$16020 g$3456$16022)) '#f)) ((lambda (g$3456$16024) (if (equal? (g$3456$13254 g$3456$16024) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16018)))) '#f)) ((lambda (g$3456$16026) (list g$3456$16026)) (g$3456$13228 g$3456$16018)))) '#f)) (g$3456$13232 g$3456$16012)))) '#f)) ((lambda (g$3456$16028) (if (g$3456$13234 g$3456$16028) (if (g$3456$13242 g$3456$16028 (g$3456$13487 '=>)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$16012)))) '#f)) (g$3456$13232 g$3456$16006)))) '#f)) ((lambda (g$3456$16030) (list g$3456$16030)) (g$3456$13228 g$3456$16006)))) '#f)) g$3456$15924))) g$3456$15920))) (set! g$3456$15826 (lambda (g$3456$15828) ((lambda (g$3456$15830) ((lambda (g$3456$15832) (if (if g$3456$15832 (begin '#f (apply (lambda () '#t) g$3456$15832)) '#f) (apply (lambda () ((lambda (g$3456$15834) (values (list g$3456$15834 (list 'lambda '() (list 'raise g$3456$15818))) g$3456$15834)) (gensym))) g$3456$15832) ((lambda (g$3456$15836) ((lambda (g$3456$15838) (if (if g$3456$15838 (begin '#f (apply (lambda (g$3456$15840 g$3456$15841) '#t) g$3456$15838)) '#f) (apply (lambda (g$3456$15844 g$3456$15845) (values (cons 'begin (cons g$3456$15844 g$3456$15845)) '#f)) g$3456$15838) ((lambda (g$3456$15848) ((lambda (g$3456$15850) (if (if g$3456$15850 (begin '#f (apply (lambda (g$3456$15852 g$3456$15853) '#t) g$3456$15850)) '#f) (apply (lambda (g$3456$15856 g$3456$15857) (call-with-values (lambda () (g$3456$15826 g$3456$15857)) (lambda (g$3456$15860 g$3456$15861) (values (g$3456$15824 g$3456$15856 g$3456$15860) g$3456$15861)))) g$3456$15850) ((lambda (g$3456$15864) ((lambda (g$3456$15866) (if (if g$3456$15866 (begin '#f (apply (lambda (g$3456$15868) '#t) g$3456$15866)) '#f) (apply (lambda (g$3456$15870) (error 'expander '"invalid guard clause" (g$3456$13252 g$3456$15870 '()))) g$3456$15866) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$15864 '())))) ((lambda (g$3456$15872) (list g$3456$15872)) g$3456$15864))) g$3456$15848))) ((lambda (g$3456$15874) (if (g$3456$13220 g$3456$15874) (begin '#f ((lambda (g$3456$15876) (if g$3456$15876 (begin '#f ((lambda (g$3456$15878) (if g$3456$15878 (begin '#f (append g$3456$15876 g$3456$15878)) '#f)) ((lambda (g$3456$15880) (list g$3456$15880)) (g$3456$13232 g$3456$15874)))) '#f)) ((lambda (g$3456$15882) (list g$3456$15882)) (g$3456$13228 g$3456$15874)))) '#f)) g$3456$15848))) g$3456$15836))) ((lambda (g$3456$15884) (if (g$3456$13220 g$3456$15884) (begin '#f ((lambda (g$3456$15886) (if g$3456$15886 (begin '#f ((lambda (g$3456$15888) (if g$3456$15888 (begin '#f (append g$3456$15886 g$3456$15888)) '#f)) ((lambda (g$3456$15890) (if (equal? (g$3456$13254 g$3456$15890) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$15884)))) '#f)) ((lambda (g$3456$15892) (if (g$3456$13220 g$3456$15892) (begin '#f ((lambda (g$3456$15894) (if g$3456$15894 (begin '#f ((lambda (g$3456$15896) (if g$3456$15896 (begin '#f (append g$3456$15894 g$3456$15896)) '#f)) ((lambda (g$3456$15898) (if (g$3456$13220 g$3456$15898) (begin '#f ((lambda (g$3456$15900) (if g$3456$15900 (begin '#f ((lambda (g$3456$15902) (if g$3456$15902 (begin '#f (append g$3456$15900 g$3456$15902)) '#f)) ((letrec ((g$3456$15904 (lambda (g$3456$15906) (if (g$3456$13220 g$3456$15906) ((lambda (g$3456$15908) (if g$3456$15908 (begin '#f ((lambda (g$3456$15910) (if g$3456$15910 (begin '#f (map cons g$3456$15908 g$3456$15910)) '#f)) (g$3456$15904 (g$3456$13232 g$3456$15906)))) '#f)) ((lambda (g$3456$15912) (list g$3456$15912)) (g$3456$13228 g$3456$15906))) (if (g$3456$13224 g$3456$15906) (list (begin 'e* '())) '#f))))) g$3456$15904) (g$3456$13232 g$3456$15898)))) '#f)) ((lambda (g$3456$15914) (list g$3456$15914)) (g$3456$13228 g$3456$15898)))) '#f)) (g$3456$13232 g$3456$15892)))) '#f)) ((lambda (g$3456$15916) (if (g$3456$13234 g$3456$15916) (if (g$3456$13242 g$3456$15916 (g$3456$13487 'else)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$15892)))) '#f)) (g$3456$13228 g$3456$15884)))) '#f)) g$3456$15836))) g$3456$15830))) ((lambda (g$3456$15918) (if (equal? (g$3456$13254 g$3456$15918) '()) (begin '#f '()) '#f)) g$3456$15830))) g$3456$15828))) (call-with-values (lambda () (g$3456$15826 g$3456$15820)) (lambda (g$3456$16032 g$3456$16033) (if g$3456$16033 (list (list 'call/cc (list 'lambda (list g$3456$16033) (list g$3456$15819 (list 'lambda '() g$3456$16032))))) (list g$3456$15819 (list 'lambda '() g$3456$16032))))))) '#f '#f))) ((lambda (g$3456$16036) ((lambda (g$3456$16038) (if (if g$3456$16038 (begin '#f (apply (lambda (g$3456$16040 g$3456$16041 g$3456$16042 g$3456$16043) (g$3456$13234 g$3456$16040)) g$3456$16038)) '#f) (apply (lambda (g$3456$16048 g$3456$16049 g$3456$16050 g$3456$16051) ((lambda (g$3456$16056) (g$3456$13521 (list (list 'call/cc (list 'lambda (list g$3456$16056) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list g$3456$16048) (g$3456$15816 g$3456$16048 g$3456$16056 g$3456$16049)) (cons 'lambda (cons '() (cons '#f (cons g$3456$16050 g$3456$16051))))))))))) (gensym))) g$3456$16038) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16036 '())))) ((lambda (g$3456$16058) (if (g$3456$13220 g$3456$16058) (begin '#f ((lambda (g$3456$16060) (if g$3456$16060 (begin '#f ((lambda (g$3456$16062) (if g$3456$16062 (begin '#f (append g$3456$16060 g$3456$16062)) '#f)) ((lambda (g$3456$16064) (if (g$3456$13220 g$3456$16064) (begin '#f ((lambda (g$3456$16066) (if g$3456$16066 (begin '#f ((lambda (g$3456$16068) (if g$3456$16068 (begin '#f (append g$3456$16066 g$3456$16068)) '#f)) ((lambda (g$3456$16070) (if (g$3456$13220 g$3456$16070) (begin '#f ((lambda (g$3456$16072) (if g$3456$16072 (begin '#f ((lambda (g$3456$16074) (if g$3456$16074 (begin '#f (append g$3456$16072 g$3456$16074)) '#f)) ((letrec ((g$3456$16076 (lambda (g$3456$16078) (if (g$3456$13220 g$3456$16078) ((lambda (g$3456$16080) (if g$3456$16080 (begin '#f ((lambda (g$3456$16082) (if g$3456$16082 (begin '#f (map cons g$3456$16080 g$3456$16082)) '#f)) (g$3456$16076 (g$3456$13232 g$3456$16078)))) '#f)) ((lambda (g$3456$16084) (list g$3456$16084)) (g$3456$13228 g$3456$16078))) (if (g$3456$13224 g$3456$16078) (list (begin 'b* '())) '#f))))) g$3456$16076) (g$3456$13232 g$3456$16070)))) '#f)) ((lambda (g$3456$16086) (list g$3456$16086)) (g$3456$13228 g$3456$16070)))) '#f)) (g$3456$13232 g$3456$16064)))) '#f)) ((lambda (g$3456$16088) (if (g$3456$13220 g$3456$16088) (begin '#f ((lambda (g$3456$16090) (if g$3456$16090 (begin '#f ((lambda (g$3456$16092) (if g$3456$16092 (begin '#f (append g$3456$16090 g$3456$16092)) '#f)) ((letrec ((g$3456$16094 (lambda (g$3456$16096) (if (g$3456$13220 g$3456$16096) ((lambda (g$3456$16098) (if g$3456$16098 (begin '#f ((lambda (g$3456$16100) (if g$3456$16100 (begin '#f (map cons g$3456$16098 g$3456$16100)) '#f)) (g$3456$16094 (g$3456$13232 g$3456$16096)))) '#f)) ((lambda (g$3456$16102) (list g$3456$16102)) (g$3456$13228 g$3456$16096))) (if (g$3456$13224 g$3456$16096) (list (begin 'clause* '())) '#f))))) g$3456$16094) (g$3456$13232 g$3456$16088)))) '#f)) ((lambda (g$3456$16104) (list g$3456$16104)) (g$3456$13228 g$3456$16088)))) '#f)) (g$3456$13228 g$3456$16064)))) '#f)) (g$3456$13232 g$3456$16058)))) '#f)) ((lambda (g$3456$16106) '()) (g$3456$13228 g$3456$16058)))) '#f)) g$3456$16036))) g$3456$15814))) '#f))) (set! g$3456$13533 (lambda (g$3456$16108) ((lambda (g$3456$16110) (begin (set! g$3456$16110 (lambda (g$3456$16112) ((lambda (g$3456$16114) (if g$3456$16114 g$3456$16114 (begin '#f (if (not (memq (car g$3456$16112) (cdr g$3456$16112))) (begin '#f (g$3456$16110 (cdr g$3456$16112))) '#f)))) (null? g$3456$16112)))) ((lambda (g$3456$16116) ((lambda (g$3456$16118) (if (if g$3456$16118 (begin '#f (apply (lambda (g$3456$16120 g$3456$16121 g$3456$16122) (if (g$3456$13234 g$3456$16120) (if (g$3456$13234 g$3456$16122) (begin '#f (for-all g$3456$13234 g$3456$16121)) '#f) '#f)) g$3456$16118)) '#f) (apply (lambda (g$3456$16126 g$3456$16127 g$3456$16128) ((lambda (g$3456$16132 g$3456$16133) (begin (if (g$3456$16110 g$3456$16132) (void) (error 'expander '"duplicate names in enumeration set" (g$3456$13252 g$3456$16108 '()))) (g$3456$13521 (list 'begin (list 'define g$3456$16133 (list 'enum-set-constructor (list 'make-enumeration (list 'quote g$3456$16132)))) (list 'define-syntax g$3456$16126 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote g$3456$16132)) '(syntax 'n) (list 'syntax-error 'x '"not a member of set" (list 'quote g$3456$16132))))))) (list 'define-syntax g$3456$16128 (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* |...|) (list 'begin (cons 'for-each (cons (list 'lambda '(n) '(unless (identifier? n) (syntax-error x "non-identifier argument")) (cons 'unless (cons (list 'memq '(syntax->datum n) (list 'quote g$3456$16132)) '((syntax-error n "not a member of set"))))) '((syntax (n* |...|))))) (list 'syntax (cons g$3456$16133 '('(n* |...|))))))))))))) (g$3456$13716 g$3456$16127) (gensym))) g$3456$16118) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16116 '())))) ((lambda (g$3456$16136) (if (g$3456$13220 g$3456$16136) (begin '#f ((lambda (g$3456$16138) (if g$3456$16138 (begin '#f ((lambda (g$3456$16140) (if g$3456$16140 (begin '#f (append g$3456$16138 g$3456$16140)) '#f)) ((lambda (g$3456$16142) (if (g$3456$13220 g$3456$16142) (begin '#f ((lambda (g$3456$16144) (if g$3456$16144 (begin '#f ((lambda (g$3456$16146) (if g$3456$16146 (begin '#f (append g$3456$16144 g$3456$16146)) '#f)) ((lambda (g$3456$16148) (if (g$3456$13220 g$3456$16148) (begin '#f ((lambda (g$3456$16150) (if g$3456$16150 (begin '#f ((lambda (g$3456$16152) (if g$3456$16152 (begin '#f (append g$3456$16150 g$3456$16152)) '#f)) ((lambda (g$3456$16154) (if (g$3456$13220 g$3456$16154) (begin '#f ((lambda (g$3456$16156) (if g$3456$16156 (begin '#f ((lambda (g$3456$16158) (if g$3456$16158 (begin '#f (append g$3456$16156 g$3456$16158)) '#f)) ((lambda (g$3456$16160) (if (equal? (g$3456$13254 g$3456$16160) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16154)))) '#f)) ((lambda (g$3456$16162) (list g$3456$16162)) (g$3456$13228 g$3456$16154)))) '#f)) (g$3456$13232 g$3456$16148)))) '#f)) ((letrec ((g$3456$16164 (lambda (g$3456$16166) (if (g$3456$13220 g$3456$16166) ((lambda (g$3456$16168) (if g$3456$16168 (begin '#f ((lambda (g$3456$16170) (if g$3456$16170 (begin '#f (map cons g$3456$16168 g$3456$16170)) '#f)) (g$3456$16164 (g$3456$13232 g$3456$16166)))) '#f)) ((lambda (g$3456$16172) (list g$3456$16172)) (g$3456$13228 g$3456$16166))) (if (g$3456$13224 g$3456$16166) (list (begin 'id* '())) '#f))))) g$3456$16164) (g$3456$13228 g$3456$16148)))) '#f)) (g$3456$13232 g$3456$16142)))) '#f)) ((lambda (g$3456$16174) (list g$3456$16174)) (g$3456$13228 g$3456$16142)))) '#f)) (g$3456$13232 g$3456$16136)))) '#f)) ((lambda (g$3456$16176) '()) (g$3456$13228 g$3456$16136)))) '#f)) g$3456$16116))) g$3456$16108))) '#f))) (set! g$3456$13535 (lambda (g$3456$16178) ((lambda (g$3456$16180) ((lambda (g$3456$16182) (if (if g$3456$16182 (begin '#f (apply (lambda (g$3456$16184) '#t) g$3456$16182)) '#f) (apply (lambda (g$3456$16186) (g$3456$13521 (list 'time-it (list 'quote g$3456$16186) (list 'lambda '() g$3456$16186)))) g$3456$16182) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16180 '())))) ((lambda (g$3456$16188) (if (g$3456$13220 g$3456$16188) (begin '#f ((lambda (g$3456$16190) (if g$3456$16190 (begin '#f ((lambda (g$3456$16192) (if g$3456$16192 (begin '#f (append g$3456$16190 g$3456$16192)) '#f)) ((lambda (g$3456$16194) (if (g$3456$13220 g$3456$16194) (begin '#f ((lambda (g$3456$16196) (if g$3456$16196 (begin '#f ((lambda (g$3456$16198) (if g$3456$16198 (begin '#f (append g$3456$16196 g$3456$16198)) '#f)) ((lambda (g$3456$16200) (if (equal? (g$3456$13254 g$3456$16200) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16194)))) '#f)) ((lambda (g$3456$16202) (list g$3456$16202)) (g$3456$13228 g$3456$16194)))) '#f)) (g$3456$13232 g$3456$16188)))) '#f)) ((lambda (g$3456$16204) '()) (g$3456$13228 g$3456$16188)))) '#f)) g$3456$16180))) g$3456$16178))) (set! g$3456$13537 (lambda (g$3456$16206) ((lambda (g$3456$16208) ((lambda (g$3456$16210) (if (if g$3456$16210 (begin '#f (apply (lambda (g$3456$16212) '#t) g$3456$16210)) '#f) (apply (lambda (g$3456$16214) (g$3456$13521 (list 'make-promise (list 'lambda '() g$3456$16214)))) g$3456$16210) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16208 '())))) ((lambda (g$3456$16216) (if (g$3456$13220 g$3456$16216) (begin '#f ((lambda (g$3456$16218) (if g$3456$16218 (begin '#f ((lambda (g$3456$16220) (if g$3456$16220 (begin '#f (append g$3456$16218 g$3456$16220)) '#f)) ((lambda (g$3456$16222) (if (g$3456$13220 g$3456$16222) (begin '#f ((lambda (g$3456$16224) (if g$3456$16224 (begin '#f ((lambda (g$3456$16226) (if g$3456$16226 (begin '#f (append g$3456$16224 g$3456$16226)) '#f)) ((lambda (g$3456$16228) (if (equal? (g$3456$13254 g$3456$16228) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16222)))) '#f)) ((lambda (g$3456$16230) (list g$3456$16230)) (g$3456$13228 g$3456$16222)))) '#f)) (g$3456$13232 g$3456$16216)))) '#f)) ((lambda (g$3456$16232) '()) (g$3456$13228 g$3456$16216)))) '#f)) g$3456$16208))) g$3456$16206))) (set! g$3456$13539 (lambda (g$3456$16234) ((lambda (g$3456$16236) ((lambda (g$3456$16238) (if (if g$3456$16238 (begin '#f (apply (lambda (g$3456$16240) '#t) g$3456$16238)) '#f) (apply (lambda (g$3456$16242) (g$3456$13521 (list 'unless g$3456$16242 (list 'error ''assert '"assertion failed" (list 'quote g$3456$16242))))) g$3456$16238) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16236 '())))) ((lambda (g$3456$16244) (if (g$3456$13220 g$3456$16244) (begin '#f ((lambda (g$3456$16246) (if g$3456$16246 (begin '#f ((lambda (g$3456$16248) (if g$3456$16248 (begin '#f (append g$3456$16246 g$3456$16248)) '#f)) ((lambda (g$3456$16250) (if (g$3456$13220 g$3456$16250) (begin '#f ((lambda (g$3456$16252) (if g$3456$16252 (begin '#f ((lambda (g$3456$16254) (if g$3456$16254 (begin '#f (append g$3456$16252 g$3456$16254)) '#f)) ((lambda (g$3456$16256) (if (equal? (g$3456$13254 g$3456$16256) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16250)))) '#f)) ((lambda (g$3456$16258) (list g$3456$16258)) (g$3456$13228 g$3456$16250)))) '#f)) (g$3456$13232 g$3456$16244)))) '#f)) ((lambda (g$3456$16260) '()) (g$3456$13228 g$3456$16244)))) '#f)) g$3456$16236))) g$3456$16234))) (set! g$3456$13541 (lambda (g$3456$16262) ((lambda (g$3456$16264) ((lambda (g$3456$16266) (if (if g$3456$16266 (begin '#f (apply (lambda (g$3456$16268) '#t) g$3456$16266)) '#f) (apply (lambda (g$3456$16270) ((lambda (g$3456$16272) (if (memv g$3456$16272 '(little)) (g$3456$13521 ''little) (if (memv g$3456$16272 '(big)) (g$3456$13521 ''big) (error 'expander '"endianness must be big or little" (g$3456$13252 g$3456$16262 '()))))) (g$3456$13716 g$3456$16270))) g$3456$16266) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16264 '())))) ((lambda (g$3456$16273) (if (g$3456$13220 g$3456$16273) (begin '#f ((lambda (g$3456$16275) (if g$3456$16275 (begin '#f ((lambda (g$3456$16277) (if g$3456$16277 (begin '#f (append g$3456$16275 g$3456$16277)) '#f)) ((lambda (g$3456$16279) (if (g$3456$13220 g$3456$16279) (begin '#f ((lambda (g$3456$16281) (if g$3456$16281 (begin '#f ((lambda (g$3456$16283) (if g$3456$16283 (begin '#f (append g$3456$16281 g$3456$16283)) '#f)) ((lambda (g$3456$16285) (if (equal? (g$3456$13254 g$3456$16285) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16279)))) '#f)) ((lambda (g$3456$16287) (list g$3456$16287)) (g$3456$13228 g$3456$16279)))) '#f)) (g$3456$13232 g$3456$16273)))) '#f)) ((lambda (g$3456$16289) '()) (g$3456$13228 g$3456$16273)))) '#f)) g$3456$16264))) g$3456$16262))) (set! g$3456$13543 (lambda (g$3456$16291) ((lambda (g$3456$16293) ((lambda (g$3456$16295) (if (if g$3456$16295 (begin '#f (apply (lambda (g$3456$16297) '#t) g$3456$16295)) '#f) (apply (lambda (g$3456$16299) (g$3456$13521 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$3456$16299)) (list '(id e* |...|) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$3456$16299) '((syntax (e* |...|)))))))))) g$3456$16295) ((lambda (g$3456$16301) ((lambda (g$3456$16303) (if (if g$3456$16303 (begin '#f (apply (lambda (g$3456$16305 g$3456$16306 g$3456$16307 g$3456$16308 g$3456$16309) (if (g$3456$13234 g$3456$16305) (if (g$3456$13234 g$3456$16307) (begin '#f (g$3456$13234 g$3456$16308)) '#f) '#f)) g$3456$16303)) '#f) (apply (lambda (g$3456$16315 g$3456$16316 g$3456$16317 g$3456$16318 g$3456$16319) (g$3456$13521 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$3456$16316)) (list (list 'set! 'id g$3456$16318) (list 'syntax g$3456$16319)) (list '(id e* |...|) '(identifier? (syntax id)) (list 'syntax (cons g$3456$16316 '(e* |...|))))))))) g$3456$16303) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16301 '())))) ((lambda (g$3456$16325) (if (g$3456$13220 g$3456$16325) (begin '#f ((lambda (g$3456$16327) (if g$3456$16327 (begin '#f ((lambda (g$3456$16329) (if g$3456$16329 (begin '#f (append g$3456$16327 g$3456$16329)) '#f)) ((lambda (g$3456$16331) (if (g$3456$13220 g$3456$16331) (begin '#f ((lambda (g$3456$16333) (if g$3456$16333 (begin '#f ((lambda (g$3456$16335) (if g$3456$16335 (begin '#f (append g$3456$16333 g$3456$16335)) '#f)) ((lambda (g$3456$16337) (if (g$3456$13220 g$3456$16337) (begin '#f ((lambda (g$3456$16339) (if g$3456$16339 (begin '#f ((lambda (g$3456$16341) (if g$3456$16341 (begin '#f (append g$3456$16339 g$3456$16341)) '#f)) ((lambda (g$3456$16343) (if (equal? (g$3456$13254 g$3456$16343) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16337)))) '#f)) ((lambda (g$3456$16345) (if (g$3456$13220 g$3456$16345) (begin '#f ((lambda (g$3456$16347) (if g$3456$16347 (begin '#f ((lambda (g$3456$16349) (if g$3456$16349 (begin '#f (append g$3456$16347 g$3456$16349)) '#f)) ((lambda (g$3456$16351) (if (g$3456$13220 g$3456$16351) (begin '#f ((lambda (g$3456$16353) (if g$3456$16353 (begin '#f ((lambda (g$3456$16355) (if g$3456$16355 (begin '#f (append g$3456$16353 g$3456$16355)) '#f)) ((lambda (g$3456$16357) (if (equal? (g$3456$13254 g$3456$16357) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16351)))) '#f)) ((lambda (g$3456$16359) (list g$3456$16359)) (g$3456$13228 g$3456$16351)))) '#f)) (g$3456$13232 g$3456$16345)))) '#f)) ((lambda (g$3456$16361) (if (g$3456$13220 g$3456$16361) (begin '#f ((lambda (g$3456$16363) (if g$3456$16363 (begin '#f ((lambda (g$3456$16365) (if g$3456$16365 (begin '#f (append g$3456$16363 g$3456$16365)) '#f)) ((lambda (g$3456$16367) (if (g$3456$13220 g$3456$16367) (begin '#f ((lambda (g$3456$16369) (if g$3456$16369 (begin '#f ((lambda (g$3456$16371) (if g$3456$16371 (begin '#f (append g$3456$16369 g$3456$16371)) '#f)) ((lambda (g$3456$16373) (if (g$3456$13220 g$3456$16373) (begin '#f ((lambda (g$3456$16375) (if g$3456$16375 (begin '#f ((lambda (g$3456$16377) (if g$3456$16377 (begin '#f (append g$3456$16375 g$3456$16377)) '#f)) ((lambda (g$3456$16379) (if (equal? (g$3456$13254 g$3456$16379) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16373)))) '#f)) ((lambda (g$3456$16381) (list g$3456$16381)) (g$3456$13228 g$3456$16373)))) '#f)) (g$3456$13232 g$3456$16367)))) '#f)) ((lambda (g$3456$16383) (list g$3456$16383)) (g$3456$13228 g$3456$16367)))) '#f)) (g$3456$13232 g$3456$16361)))) '#f)) ((lambda (g$3456$16385) (if (g$3456$13234 g$3456$16385) (if (g$3456$13242 g$3456$16385 (g$3456$13487 'set!)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$16361)))) '#f)) (g$3456$13228 g$3456$16345)))) '#f)) (g$3456$13228 g$3456$16337)))) '#f)) (g$3456$13232 g$3456$16331)))) '#f)) ((lambda (g$3456$16387) (if (g$3456$13220 g$3456$16387) (begin '#f ((lambda (g$3456$16389) (if g$3456$16389 (begin '#f ((lambda (g$3456$16391) (if g$3456$16391 (begin '#f (append g$3456$16389 g$3456$16391)) '#f)) ((lambda (g$3456$16393) (if (g$3456$13220 g$3456$16393) (begin '#f ((lambda (g$3456$16395) (if g$3456$16395 (begin '#f ((lambda (g$3456$16397) (if g$3456$16397 (begin '#f (append g$3456$16395 g$3456$16397)) '#f)) ((lambda (g$3456$16399) (if (equal? (g$3456$13254 g$3456$16399) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16393)))) '#f)) ((lambda (g$3456$16401) (list g$3456$16401)) (g$3456$13228 g$3456$16393)))) '#f)) (g$3456$13232 g$3456$16387)))) '#f)) ((lambda (g$3456$16403) (list g$3456$16403)) (g$3456$13228 g$3456$16387)))) '#f)) (g$3456$13228 g$3456$16331)))) '#f)) (g$3456$13232 g$3456$16325)))) '#f)) ((lambda (g$3456$16405) '()) (g$3456$13228 g$3456$16325)))) '#f)) g$3456$16301))) g$3456$16293))) ((lambda (g$3456$16407) (if (g$3456$13220 g$3456$16407) (begin '#f ((lambda (g$3456$16409) (if g$3456$16409 (begin '#f ((lambda (g$3456$16411) (if g$3456$16411 (begin '#f (append g$3456$16409 g$3456$16411)) '#f)) ((lambda (g$3456$16413) (if (g$3456$13220 g$3456$16413) (begin '#f ((lambda (g$3456$16415) (if g$3456$16415 (begin '#f ((lambda (g$3456$16417) (if g$3456$16417 (begin '#f (append g$3456$16415 g$3456$16417)) '#f)) ((lambda (g$3456$16419) (if (equal? (g$3456$13254 g$3456$16419) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16413)))) '#f)) ((lambda (g$3456$16421) (list g$3456$16421)) (g$3456$13228 g$3456$16413)))) '#f)) (g$3456$13232 g$3456$16407)))) '#f)) ((lambda (g$3456$16423) '()) (g$3456$13228 g$3456$16407)))) '#f)) g$3456$16293))) g$3456$16291))) (set! g$3456$13545 (lambda (g$3456$16425) ((lambda (g$3456$16427) (begin (set! g$3456$16427 (lambda (g$3456$16429) ((lambda (g$3456$16431) ((lambda (g$3456$16433) (if (if g$3456$16433 (begin '#f (apply (lambda (g$3456$16435 g$3456$16436) '#t) g$3456$16433)) '#f) (apply (lambda (g$3456$16439 g$3456$16440) (list g$3456$16439 g$3456$16440 g$3456$16439)) g$3456$16433) ((lambda (g$3456$16443) ((lambda (g$3456$16445) (if (if g$3456$16445 (begin '#f (apply (lambda (g$3456$16447 g$3456$16448 g$3456$16449) '#t) g$3456$16445)) '#f) (apply (lambda (g$3456$16453 g$3456$16454 g$3456$16455) (list g$3456$16453 g$3456$16454 g$3456$16455)) g$3456$16445) ((lambda (g$3456$16459) ((lambda (g$3456$16461) (if (if g$3456$16461 (begin '#f (apply (lambda () '#t) g$3456$16461)) '#f) (apply (lambda () (error 'expander '"invalid binding" (g$3456$13252 g$3456$16425 '()))) g$3456$16461) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16459 '())))) ((lambda (g$3456$16463) '()) g$3456$16459))) g$3456$16443))) ((lambda (g$3456$16465) (if (g$3456$13220 g$3456$16465) (begin '#f ((lambda (g$3456$16467) (if g$3456$16467 (begin '#f ((lambda (g$3456$16469) (if g$3456$16469 (begin '#f (append g$3456$16467 g$3456$16469)) '#f)) ((lambda (g$3456$16471) (if (g$3456$13220 g$3456$16471) (begin '#f ((lambda (g$3456$16473) (if g$3456$16473 (begin '#f ((lambda (g$3456$16475) (if g$3456$16475 (begin '#f (append g$3456$16473 g$3456$16475)) '#f)) ((lambda (g$3456$16477) (if (g$3456$13220 g$3456$16477) (begin '#f ((lambda (g$3456$16479) (if g$3456$16479 (begin '#f ((lambda (g$3456$16481) (if g$3456$16481 (begin '#f (append g$3456$16479 g$3456$16481)) '#f)) ((lambda (g$3456$16483) (if (equal? (g$3456$13254 g$3456$16483) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16477)))) '#f)) ((lambda (g$3456$16485) (list g$3456$16485)) (g$3456$13228 g$3456$16477)))) '#f)) (g$3456$13232 g$3456$16471)))) '#f)) ((lambda (g$3456$16487) (list g$3456$16487)) (g$3456$13228 g$3456$16471)))) '#f)) (g$3456$13232 g$3456$16465)))) '#f)) ((lambda (g$3456$16489) (list g$3456$16489)) (g$3456$13228 g$3456$16465)))) '#f)) g$3456$16443))) g$3456$16431))) ((lambda (g$3456$16491) (if (g$3456$13220 g$3456$16491) (begin '#f ((lambda (g$3456$16493) (if g$3456$16493 (begin '#f ((lambda (g$3456$16495) (if g$3456$16495 (begin '#f (append g$3456$16493 g$3456$16495)) '#f)) ((lambda (g$3456$16497) (if (g$3456$13220 g$3456$16497) (begin '#f ((lambda (g$3456$16499) (if g$3456$16499 (begin '#f ((lambda (g$3456$16501) (if g$3456$16501 (begin '#f (append g$3456$16499 g$3456$16501)) '#f)) ((lambda (g$3456$16503) (if (equal? (g$3456$13254 g$3456$16503) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16497)))) '#f)) ((lambda (g$3456$16505) (list g$3456$16505)) (g$3456$13228 g$3456$16497)))) '#f)) (g$3456$13232 g$3456$16491)))) '#f)) ((lambda (g$3456$16507) (list g$3456$16507)) (g$3456$13228 g$3456$16491)))) '#f)) g$3456$16431))) g$3456$16429))) ((lambda (g$3456$16509) ((lambda (g$3456$16511) (if (if g$3456$16511 (begin '#f (apply (lambda (g$3456$16513 g$3456$16514 g$3456$16515 g$3456$16516) '#t) g$3456$16511)) '#f) (apply (lambda (g$3456$16521 g$3456$16522 g$3456$16523 g$3456$16524) ((lambda (g$3456$16529) ((lambda (g$3456$16531) (if (if g$3456$16531 (begin '#f (apply (lambda (g$3456$16533 g$3456$16534 g$3456$16535) '#t) g$3456$16531)) '#f) (apply (lambda (g$3456$16539 g$3456$16540 g$3456$16541) (if (g$3456$13244 g$3456$16539) (g$3456$13521 (list 'letrec (list (list 'loop (list 'lambda g$3456$16539 (list 'if g$3456$16522 (cons 'begin (cons '(if #f #f) g$3456$16523)) (cons 'begin (append g$3456$16524 (list (cons 'loop g$3456$16541)))))))) (cons 'loop g$3456$16540))) (error 'expander '"invalid bindings" (g$3456$13252 g$3456$16425 '())))) g$3456$16531) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16529 '())))) ((letrec ((g$3456$16545 (lambda (g$3456$16547) (if (g$3456$13220 g$3456$16547) ((lambda (g$3456$16549) (if g$3456$16549 (begin '#f ((lambda (g$3456$16551) (if g$3456$16551 (begin '#f (map cons g$3456$16549 g$3456$16551)) '#f)) (g$3456$16545 (g$3456$13232 g$3456$16547)))) '#f)) ((lambda (g$3456$16553) (if (g$3456$13220 g$3456$16553) (begin '#f ((lambda (g$3456$16555) (if g$3456$16555 (begin '#f ((lambda (g$3456$16557) (if g$3456$16557 (begin '#f (append g$3456$16555 g$3456$16557)) '#f)) ((lambda (g$3456$16559) (if (g$3456$13220 g$3456$16559) (begin '#f ((lambda (g$3456$16561) (if g$3456$16561 (begin '#f ((lambda (g$3456$16563) (if g$3456$16563 (begin '#f (append g$3456$16561 g$3456$16563)) '#f)) ((lambda (g$3456$16565) (if (g$3456$13220 g$3456$16565) (begin '#f ((lambda (g$3456$16567) (if g$3456$16567 (begin '#f ((lambda (g$3456$16569) (if g$3456$16569 (begin '#f (append g$3456$16567 g$3456$16569)) '#f)) ((lambda (g$3456$16571) (if (equal? (g$3456$13254 g$3456$16571) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16565)))) '#f)) ((lambda (g$3456$16573) (list g$3456$16573)) (g$3456$13228 g$3456$16565)))) '#f)) (g$3456$13232 g$3456$16559)))) '#f)) ((lambda (g$3456$16575) (list g$3456$16575)) (g$3456$13228 g$3456$16559)))) '#f)) (g$3456$13232 g$3456$16553)))) '#f)) ((lambda (g$3456$16577) (list g$3456$16577)) (g$3456$13228 g$3456$16553)))) '#f)) (g$3456$13228 g$3456$16547))) (if (g$3456$13224 g$3456$16547) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f))))) g$3456$16545) g$3456$16529))) (map g$3456$16427 g$3456$16521))) g$3456$16511) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16509 '())))) ((lambda (g$3456$16579) (if (g$3456$13220 g$3456$16579) (begin '#f ((lambda (g$3456$16581) (if g$3456$16581 (begin '#f ((lambda (g$3456$16583) (if g$3456$16583 (begin '#f (append g$3456$16581 g$3456$16583)) '#f)) ((lambda (g$3456$16585) (if (g$3456$13220 g$3456$16585) (begin '#f ((lambda (g$3456$16587) (if g$3456$16587 (begin '#f ((lambda (g$3456$16589) (if g$3456$16589 (begin '#f (append g$3456$16587 g$3456$16589)) '#f)) ((lambda (g$3456$16591) (if (g$3456$13220 g$3456$16591) (begin '#f ((lambda (g$3456$16593) (if g$3456$16593 (begin '#f ((lambda (g$3456$16595) (if g$3456$16595 (begin '#f (append g$3456$16593 g$3456$16595)) '#f)) ((letrec ((g$3456$16597 (lambda (g$3456$16599) (if (g$3456$13220 g$3456$16599) ((lambda (g$3456$16601) (if g$3456$16601 (begin '#f ((lambda (g$3456$16603) (if g$3456$16603 (begin '#f (map cons g$3456$16601 g$3456$16603)) '#f)) (g$3456$16597 (g$3456$13232 g$3456$16599)))) '#f)) ((lambda (g$3456$16605) (list g$3456$16605)) (g$3456$13228 g$3456$16599))) (if (g$3456$13224 g$3456$16599) (list (begin 'command* '())) '#f))))) g$3456$16597) (g$3456$13232 g$3456$16591)))) '#f)) ((lambda (g$3456$16607) (if (g$3456$13220 g$3456$16607) (begin '#f ((lambda (g$3456$16609) (if g$3456$16609 (begin '#f ((lambda (g$3456$16611) (if g$3456$16611 (begin '#f (append g$3456$16609 g$3456$16611)) '#f)) ((letrec ((g$3456$16613 (lambda (g$3456$16615) (if (g$3456$13220 g$3456$16615) ((lambda (g$3456$16617) (if g$3456$16617 (begin '#f ((lambda (g$3456$16619) (if g$3456$16619 (begin '#f (map cons g$3456$16617 g$3456$16619)) '#f)) (g$3456$16613 (g$3456$13232 g$3456$16615)))) '#f)) ((lambda (g$3456$16621) (list g$3456$16621)) (g$3456$13228 g$3456$16615))) (if (g$3456$13224 g$3456$16615) (list (begin 'expr* '())) '#f))))) g$3456$16613) (g$3456$13232 g$3456$16607)))) '#f)) ((lambda (g$3456$16623) (list g$3456$16623)) (g$3456$13228 g$3456$16607)))) '#f)) (g$3456$13228 g$3456$16591)))) '#f)) (g$3456$13232 g$3456$16585)))) '#f)) ((letrec ((g$3456$16625 (lambda (g$3456$16627) (if (g$3456$13220 g$3456$16627) ((lambda (g$3456$16629) (if g$3456$16629 (begin '#f ((lambda (g$3456$16631) (if g$3456$16631 (begin '#f (map cons g$3456$16629 g$3456$16631)) '#f)) (g$3456$16625 (g$3456$13232 g$3456$16627)))) '#f)) ((lambda (g$3456$16633) (list g$3456$16633)) (g$3456$13228 g$3456$16627))) (if (g$3456$13224 g$3456$16627) (list (begin 'binding* '())) '#f))))) g$3456$16625) (g$3456$13228 g$3456$16585)))) '#f)) (g$3456$13232 g$3456$16579)))) '#f)) ((lambda (g$3456$16635) '()) (g$3456$13228 g$3456$16579)))) '#f)) g$3456$16509))) g$3456$16425))) '#f))) (set! g$3456$13547 (lambda (g$3456$16637) ((lambda (g$3456$16639) ((lambda (g$3456$16641) (if (if g$3456$16641 (begin '#f (apply (lambda (g$3456$16643 g$3456$16644 g$3456$16645 g$3456$16646) (for-all g$3456$13234 g$3456$16643)) g$3456$16641)) '#f) (apply (lambda (g$3456$16651 g$3456$16652 g$3456$16653 g$3456$16654) (g$3456$13521 (letrec ((g$3456$16659 (lambda (g$3456$16661) (if (null? g$3456$16661) (cons 'let (cons '() (cons g$3456$16653 g$3456$16654))) (list 'let (list (car g$3456$16661)) (g$3456$16659 (cdr g$3456$16661))))))) (g$3456$16659 (map list g$3456$16651 g$3456$16652))))) g$3456$16641) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16639 '())))) ((lambda (g$3456$16663) (if (g$3456$13220 g$3456$16663) (begin '#f ((lambda (g$3456$16665) (if g$3456$16665 (begin '#f ((lambda (g$3456$16667) (if g$3456$16667 (begin '#f (append g$3456$16665 g$3456$16667)) '#f)) ((lambda (g$3456$16669) (if (g$3456$13220 g$3456$16669) (begin '#f ((lambda (g$3456$16671) (if g$3456$16671 (begin '#f ((lambda (g$3456$16673) (if g$3456$16673 (begin '#f (append g$3456$16671 g$3456$16673)) '#f)) ((lambda (g$3456$16675) (if (g$3456$13220 g$3456$16675) (begin '#f ((lambda (g$3456$16677) (if g$3456$16677 (begin '#f ((lambda (g$3456$16679) (if g$3456$16679 (begin '#f (append g$3456$16677 g$3456$16679)) '#f)) ((letrec ((g$3456$16681 (lambda (g$3456$16683) (if (g$3456$13220 g$3456$16683) ((lambda (g$3456$16685) (if g$3456$16685 (begin '#f ((lambda (g$3456$16687) (if g$3456$16687 (begin '#f (map cons g$3456$16685 g$3456$16687)) '#f)) (g$3456$16681 (g$3456$13232 g$3456$16683)))) '#f)) ((lambda (g$3456$16689) (list g$3456$16689)) (g$3456$13228 g$3456$16683))) (if (g$3456$13224 g$3456$16683) (list (begin 'b* '())) '#f))))) g$3456$16681) (g$3456$13232 g$3456$16675)))) '#f)) ((lambda (g$3456$16691) (list g$3456$16691)) (g$3456$13228 g$3456$16675)))) '#f)) (g$3456$13232 g$3456$16669)))) '#f)) ((letrec ((g$3456$16693 (lambda (g$3456$16695) (if (g$3456$13220 g$3456$16695) ((lambda (g$3456$16697) (if g$3456$16697 (begin '#f ((lambda (g$3456$16699) (if g$3456$16699 (begin '#f (map cons g$3456$16697 g$3456$16699)) '#f)) (g$3456$16693 (g$3456$13232 g$3456$16695)))) '#f)) ((lambda (g$3456$16701) (if (g$3456$13220 g$3456$16701) (begin '#f ((lambda (g$3456$16703) (if g$3456$16703 (begin '#f ((lambda (g$3456$16705) (if g$3456$16705 (begin '#f (append g$3456$16703 g$3456$16705)) '#f)) ((lambda (g$3456$16707) (if (g$3456$13220 g$3456$16707) (begin '#f ((lambda (g$3456$16709) (if g$3456$16709 (begin '#f ((lambda (g$3456$16711) (if g$3456$16711 (begin '#f (append g$3456$16709 g$3456$16711)) '#f)) ((lambda (g$3456$16713) (if (equal? (g$3456$13254 g$3456$16713) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16707)))) '#f)) ((lambda (g$3456$16715) (list g$3456$16715)) (g$3456$13228 g$3456$16707)))) '#f)) (g$3456$13232 g$3456$16701)))) '#f)) ((lambda (g$3456$16717) (list g$3456$16717)) (g$3456$13228 g$3456$16701)))) '#f)) (g$3456$13228 g$3456$16695))) (if (g$3456$13224 g$3456$16695) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$3456$16693) (g$3456$13228 g$3456$16669)))) '#f)) (g$3456$13232 g$3456$16663)))) '#f)) ((lambda (g$3456$16719) '()) (g$3456$13228 g$3456$16663)))) '#f)) g$3456$16639))) g$3456$16637))) (set! g$3456$13549 (lambda (g$3456$16721) ((lambda (g$3456$16723) ((lambda (g$3456$16725) (if (if g$3456$16725 (begin '#f (apply (lambda () '#t) g$3456$16725)) '#f) (apply (lambda () '#f) g$3456$16725) ((lambda (g$3456$16727) ((lambda (g$3456$16729) (if (if g$3456$16729 (begin '#f (apply (lambda (g$3456$16731 g$3456$16732) '#t) g$3456$16729)) '#f) (apply (lambda (g$3456$16735 g$3456$16736) (g$3456$13521 (letrec ((g$3456$16739 (lambda (g$3456$16741 g$3456$16742) (if (null? g$3456$16742) (list 'begin '#f g$3456$16741) (list 'let (list (list 't g$3456$16741)) (list 'if 't 't (g$3456$16739 (car g$3456$16742) (cdr g$3456$16742)))))))) (g$3456$16739 g$3456$16735 g$3456$16736)))) g$3456$16729) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16727 '())))) ((lambda (g$3456$16745) (if (g$3456$13220 g$3456$16745) (begin '#f ((lambda (g$3456$16747) (if g$3456$16747 (begin '#f ((lambda (g$3456$16749) (if g$3456$16749 (begin '#f (append g$3456$16747 g$3456$16749)) '#f)) ((lambda (g$3456$16751) (if (g$3456$13220 g$3456$16751) (begin '#f ((lambda (g$3456$16753) (if g$3456$16753 (begin '#f ((lambda (g$3456$16755) (if g$3456$16755 (begin '#f (append g$3456$16753 g$3456$16755)) '#f)) ((letrec ((g$3456$16757 (lambda (g$3456$16759) (if (g$3456$13220 g$3456$16759) ((lambda (g$3456$16761) (if g$3456$16761 (begin '#f ((lambda (g$3456$16763) (if g$3456$16763 (begin '#f (map cons g$3456$16761 g$3456$16763)) '#f)) (g$3456$16757 (g$3456$13232 g$3456$16759)))) '#f)) ((lambda (g$3456$16765) (list g$3456$16765)) (g$3456$13228 g$3456$16759))) (if (g$3456$13224 g$3456$16759) (list (begin 'e* '())) '#f))))) g$3456$16757) (g$3456$13232 g$3456$16751)))) '#f)) ((lambda (g$3456$16767) (list g$3456$16767)) (g$3456$13228 g$3456$16751)))) '#f)) (g$3456$13232 g$3456$16745)))) '#f)) ((lambda (g$3456$16769) '()) (g$3456$13228 g$3456$16745)))) '#f)) g$3456$16727))) g$3456$16723))) ((lambda (g$3456$16771) (if (g$3456$13220 g$3456$16771) (begin '#f ((lambda (g$3456$16773) (if g$3456$16773 (begin '#f ((lambda (g$3456$16775) (if g$3456$16775 (begin '#f (append g$3456$16773 g$3456$16775)) '#f)) ((lambda (g$3456$16777) (if (equal? (g$3456$13254 g$3456$16777) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16771)))) '#f)) ((lambda (g$3456$16779) '()) (g$3456$13228 g$3456$16771)))) '#f)) g$3456$16723))) g$3456$16721))) (set! g$3456$13551 (lambda (g$3456$16781) ((lambda (g$3456$16783) ((lambda (g$3456$16785) (if (if g$3456$16785 (begin '#f (apply (lambda () '#t) g$3456$16785)) '#f) (apply (lambda () '#t) g$3456$16785) ((lambda (g$3456$16787) ((lambda (g$3456$16789) (if (if g$3456$16789 (begin '#f (apply (lambda (g$3456$16791 g$3456$16792) '#t) g$3456$16789)) '#f) (apply (lambda (g$3456$16795 g$3456$16796) (g$3456$13521 (letrec ((g$3456$16799 (lambda (g$3456$16801 g$3456$16802) (if (null? g$3456$16802) (list 'begin '#f g$3456$16801) (cons 'if (cons g$3456$16801 (cons (g$3456$16799 (car g$3456$16802) (cdr g$3456$16802)) '(#f)))))))) (g$3456$16799 g$3456$16795 g$3456$16796)))) g$3456$16789) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16787 '())))) ((lambda (g$3456$16805) (if (g$3456$13220 g$3456$16805) (begin '#f ((lambda (g$3456$16807) (if g$3456$16807 (begin '#f ((lambda (g$3456$16809) (if g$3456$16809 (begin '#f (append g$3456$16807 g$3456$16809)) '#f)) ((lambda (g$3456$16811) (if (g$3456$13220 g$3456$16811) (begin '#f ((lambda (g$3456$16813) (if g$3456$16813 (begin '#f ((lambda (g$3456$16815) (if g$3456$16815 (begin '#f (append g$3456$16813 g$3456$16815)) '#f)) ((letrec ((g$3456$16817 (lambda (g$3456$16819) (if (g$3456$13220 g$3456$16819) ((lambda (g$3456$16821) (if g$3456$16821 (begin '#f ((lambda (g$3456$16823) (if g$3456$16823 (begin '#f (map cons g$3456$16821 g$3456$16823)) '#f)) (g$3456$16817 (g$3456$13232 g$3456$16819)))) '#f)) ((lambda (g$3456$16825) (list g$3456$16825)) (g$3456$13228 g$3456$16819))) (if (g$3456$13224 g$3456$16819) (list (begin 'e* '())) '#f))))) g$3456$16817) (g$3456$13232 g$3456$16811)))) '#f)) ((lambda (g$3456$16827) (list g$3456$16827)) (g$3456$13228 g$3456$16811)))) '#f)) (g$3456$13232 g$3456$16805)))) '#f)) ((lambda (g$3456$16829) '()) (g$3456$13228 g$3456$16805)))) '#f)) g$3456$16787))) g$3456$16783))) ((lambda (g$3456$16831) (if (g$3456$13220 g$3456$16831) (begin '#f ((lambda (g$3456$16833) (if g$3456$16833 (begin '#f ((lambda (g$3456$16835) (if g$3456$16835 (begin '#f (append g$3456$16833 g$3456$16835)) '#f)) ((lambda (g$3456$16837) (if (equal? (g$3456$13254 g$3456$16837) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16831)))) '#f)) ((lambda (g$3456$16839) '()) (g$3456$13228 g$3456$16831)))) '#f)) g$3456$16783))) g$3456$16781))) (set! g$3456$13553 (lambda (g$3456$16841) ((lambda (g$3456$16843) ((lambda (g$3456$16845) (if (if g$3456$16845 (begin '#f (apply (lambda (g$3456$16847 g$3456$16848) '#t) g$3456$16845)) '#f) (apply (lambda (g$3456$16851 g$3456$16852) (g$3456$13521 (letrec ((g$3456$16855 (lambda (g$3456$16857 g$3456$16858) (if (null? g$3456$16858) ((lambda (g$3456$16861) ((lambda (g$3456$16863) (if (if g$3456$16863 (begin '#f (apply (lambda (g$3456$16865 g$3456$16866) '#t) g$3456$16863)) '#f) (apply (lambda (g$3456$16869 g$3456$16870) (cons 'begin (cons g$3456$16869 g$3456$16870))) g$3456$16863) ((lambda (g$3456$16873) ((lambda (g$3456$16875) (if (if g$3456$16875 (begin '#f (apply (lambda (g$3456$16877 g$3456$16878) '#t) g$3456$16875)) '#f) (apply (lambda (g$3456$16881 g$3456$16882) (list 'let (list (list 't g$3456$16881)) (list 'if 't (cons g$3456$16882 '(t))))) g$3456$16875) ((lambda (g$3456$16885) ((lambda (g$3456$16887) (if (if g$3456$16887 (begin '#f (apply (lambda (g$3456$16889) '#t) g$3456$16887)) '#f) (apply (lambda (g$3456$16891) (cons 'or (cons g$3456$16891 '((if #f #f))))) g$3456$16887) ((lambda (g$3456$16893) ((lambda (g$3456$16895) (if (if g$3456$16895 (begin '#f (apply (lambda (g$3456$16897 g$3456$16898) '#t) g$3456$16895)) '#f) (apply (lambda (g$3456$16901 g$3456$16902) (list 'if g$3456$16901 (cons 'begin g$3456$16902))) g$3456$16895) ((lambda (g$3456$16905) ((lambda (g$3456$16907) (if (if g$3456$16907 (begin '#f (apply (lambda () '#t) g$3456$16907)) '#f) (apply (lambda () (error 'expander '"invalid last clause" (g$3456$13252 g$3456$16841 '()))) g$3456$16907) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16905 '())))) ((lambda (g$3456$16909) '()) g$3456$16905))) g$3456$16893))) ((lambda (g$3456$16911) (if (g$3456$13220 g$3456$16911) (begin '#f ((lambda (g$3456$16913) (if g$3456$16913 (begin '#f ((lambda (g$3456$16915) (if g$3456$16915 (begin '#f (append g$3456$16913 g$3456$16915)) '#f)) ((letrec ((g$3456$16917 (lambda (g$3456$16919) (if (g$3456$13220 g$3456$16919) ((lambda (g$3456$16921) (if g$3456$16921 (begin '#f ((lambda (g$3456$16923) (if g$3456$16923 (begin '#f (map cons g$3456$16921 g$3456$16923)) '#f)) (g$3456$16917 (g$3456$13232 g$3456$16919)))) '#f)) ((lambda (g$3456$16925) (list g$3456$16925)) (g$3456$13228 g$3456$16919))) (if (g$3456$13224 g$3456$16919) (list (begin 'e* '())) '#f))))) g$3456$16917) (g$3456$13232 g$3456$16911)))) '#f)) ((lambda (g$3456$16927) (list g$3456$16927)) (g$3456$13228 g$3456$16911)))) '#f)) g$3456$16893))) g$3456$16885))) ((lambda (g$3456$16929) (if (g$3456$13220 g$3456$16929) (begin '#f ((lambda (g$3456$16931) (if g$3456$16931 (begin '#f ((lambda (g$3456$16933) (if g$3456$16933 (begin '#f (append g$3456$16931 g$3456$16933)) '#f)) ((lambda (g$3456$16935) (if (equal? (g$3456$13254 g$3456$16935) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16929)))) '#f)) ((lambda (g$3456$16937) (list g$3456$16937)) (g$3456$13228 g$3456$16929)))) '#f)) g$3456$16885))) g$3456$16873))) ((lambda (g$3456$16939) (if (g$3456$13220 g$3456$16939) (begin '#f ((lambda (g$3456$16941) (if g$3456$16941 (begin '#f ((lambda (g$3456$16943) (if g$3456$16943 (begin '#f (append g$3456$16941 g$3456$16943)) '#f)) ((lambda (g$3456$16945) (if (g$3456$13220 g$3456$16945) (begin '#f ((lambda (g$3456$16947) (if g$3456$16947 (begin '#f ((lambda (g$3456$16949) (if g$3456$16949 (begin '#f (append g$3456$16947 g$3456$16949)) '#f)) ((lambda (g$3456$16951) (if (g$3456$13220 g$3456$16951) (begin '#f ((lambda (g$3456$16953) (if g$3456$16953 (begin '#f ((lambda (g$3456$16955) (if g$3456$16955 (begin '#f (append g$3456$16953 g$3456$16955)) '#f)) ((lambda (g$3456$16957) (if (equal? (g$3456$13254 g$3456$16957) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$16951)))) '#f)) ((lambda (g$3456$16959) (list g$3456$16959)) (g$3456$13228 g$3456$16951)))) '#f)) (g$3456$13232 g$3456$16945)))) '#f)) ((lambda (g$3456$16961) (if (g$3456$13234 g$3456$16961) (if (g$3456$13242 g$3456$16961 (g$3456$13487 '=>)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$16945)))) '#f)) (g$3456$13232 g$3456$16939)))) '#f)) ((lambda (g$3456$16963) (list g$3456$16963)) (g$3456$13228 g$3456$16939)))) '#f)) g$3456$16873))) g$3456$16861))) ((lambda (g$3456$16965) (if (g$3456$13220 g$3456$16965) (begin '#f ((lambda (g$3456$16967) (if g$3456$16967 (begin '#f ((lambda (g$3456$16969) (if g$3456$16969 (begin '#f (append g$3456$16967 g$3456$16969)) '#f)) ((lambda (g$3456$16971) (if (g$3456$13220 g$3456$16971) (begin '#f ((lambda (g$3456$16973) (if g$3456$16973 (begin '#f ((lambda (g$3456$16975) (if g$3456$16975 (begin '#f (append g$3456$16973 g$3456$16975)) '#f)) ((letrec ((g$3456$16977 (lambda (g$3456$16979) (if (g$3456$13220 g$3456$16979) ((lambda (g$3456$16981) (if g$3456$16981 (begin '#f ((lambda (g$3456$16983) (if g$3456$16983 (begin '#f (map cons g$3456$16981 g$3456$16983)) '#f)) (g$3456$16977 (g$3456$13232 g$3456$16979)))) '#f)) ((lambda (g$3456$16985) (list g$3456$16985)) (g$3456$13228 g$3456$16979))) (if (g$3456$13224 g$3456$16979) (list (begin 'e* '())) '#f))))) g$3456$16977) (g$3456$13232 g$3456$16971)))) '#f)) ((lambda (g$3456$16987) (list g$3456$16987)) (g$3456$13228 g$3456$16971)))) '#f)) (g$3456$13232 g$3456$16965)))) '#f)) ((lambda (g$3456$16989) (if (g$3456$13234 g$3456$16989) (if (g$3456$13242 g$3456$16989 (g$3456$13487 'else)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$16965)))) '#f)) g$3456$16861))) g$3456$16857) ((lambda (g$3456$16991) ((lambda (g$3456$16993) (if (if g$3456$16993 (begin '#f (apply (lambda (g$3456$16995 g$3456$16996) '#t) g$3456$16993)) '#f) (apply (lambda (g$3456$16999 g$3456$17000) (error 'expander '"incorrect position of keyword else" (g$3456$13252 g$3456$16841 '()))) g$3456$16993) ((lambda (g$3456$17003) ((lambda (g$3456$17005) (if (if g$3456$17005 (begin '#f (apply (lambda (g$3456$17007 g$3456$17008) '#t) g$3456$17005)) '#f) (apply (lambda (g$3456$17011 g$3456$17012) (list 'let (list (list 't g$3456$17011)) (list 'if 't (cons g$3456$17012 '(t)) (g$3456$16855 (car g$3456$16858) (cdr g$3456$16858))))) g$3456$17005) ((lambda (g$3456$17015) ((lambda (g$3456$17017) (if (if g$3456$17017 (begin '#f (apply (lambda (g$3456$17019) '#t) g$3456$17017)) '#f) (apply (lambda (g$3456$17021) (list 'or g$3456$17021 (g$3456$16855 (car g$3456$16858) (cdr g$3456$16858)))) g$3456$17017) ((lambda (g$3456$17023) ((lambda (g$3456$17025) (if (if g$3456$17025 (begin '#f (apply (lambda (g$3456$17027 g$3456$17028) '#t) g$3456$17025)) '#f) (apply (lambda (g$3456$17031 g$3456$17032) (list 'if g$3456$17031 (cons 'begin g$3456$17032) (g$3456$16855 (car g$3456$16858) (cdr g$3456$16858)))) g$3456$17025) ((lambda (g$3456$17035) ((lambda (g$3456$17037) (if (if g$3456$17037 (begin '#f (apply (lambda () '#t) g$3456$17037)) '#f) (apply (lambda () (error 'expander '"invalid last clause" (g$3456$13252 g$3456$16841 '()))) g$3456$17037) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17035 '())))) ((lambda (g$3456$17039) '()) g$3456$17035))) g$3456$17023))) ((lambda (g$3456$17041) (if (g$3456$13220 g$3456$17041) (begin '#f ((lambda (g$3456$17043) (if g$3456$17043 (begin '#f ((lambda (g$3456$17045) (if g$3456$17045 (begin '#f (append g$3456$17043 g$3456$17045)) '#f)) ((letrec ((g$3456$17047 (lambda (g$3456$17049) (if (g$3456$13220 g$3456$17049) ((lambda (g$3456$17051) (if g$3456$17051 (begin '#f ((lambda (g$3456$17053) (if g$3456$17053 (begin '#f (map cons g$3456$17051 g$3456$17053)) '#f)) (g$3456$17047 (g$3456$13232 g$3456$17049)))) '#f)) ((lambda (g$3456$17055) (list g$3456$17055)) (g$3456$13228 g$3456$17049))) (if (g$3456$13224 g$3456$17049) (list (begin 'e* '())) '#f))))) g$3456$17047) (g$3456$13232 g$3456$17041)))) '#f)) ((lambda (g$3456$17057) (list g$3456$17057)) (g$3456$13228 g$3456$17041)))) '#f)) g$3456$17023))) g$3456$17015))) ((lambda (g$3456$17059) (if (g$3456$13220 g$3456$17059) (begin '#f ((lambda (g$3456$17061) (if g$3456$17061 (begin '#f ((lambda (g$3456$17063) (if g$3456$17063 (begin '#f (append g$3456$17061 g$3456$17063)) '#f)) ((lambda (g$3456$17065) (if (equal? (g$3456$13254 g$3456$17065) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17059)))) '#f)) ((lambda (g$3456$17067) (list g$3456$17067)) (g$3456$13228 g$3456$17059)))) '#f)) g$3456$17015))) g$3456$17003))) ((lambda (g$3456$17069) (if (g$3456$13220 g$3456$17069) (begin '#f ((lambda (g$3456$17071) (if g$3456$17071 (begin '#f ((lambda (g$3456$17073) (if g$3456$17073 (begin '#f (append g$3456$17071 g$3456$17073)) '#f)) ((lambda (g$3456$17075) (if (g$3456$13220 g$3456$17075) (begin '#f ((lambda (g$3456$17077) (if g$3456$17077 (begin '#f ((lambda (g$3456$17079) (if g$3456$17079 (begin '#f (append g$3456$17077 g$3456$17079)) '#f)) ((lambda (g$3456$17081) (if (g$3456$13220 g$3456$17081) (begin '#f ((lambda (g$3456$17083) (if g$3456$17083 (begin '#f ((lambda (g$3456$17085) (if g$3456$17085 (begin '#f (append g$3456$17083 g$3456$17085)) '#f)) ((lambda (g$3456$17087) (if (equal? (g$3456$13254 g$3456$17087) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17081)))) '#f)) ((lambda (g$3456$17089) (list g$3456$17089)) (g$3456$13228 g$3456$17081)))) '#f)) (g$3456$13232 g$3456$17075)))) '#f)) ((lambda (g$3456$17091) (if (g$3456$13234 g$3456$17091) (if (g$3456$13242 g$3456$17091 (g$3456$13487 '=>)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17075)))) '#f)) (g$3456$13232 g$3456$17069)))) '#f)) ((lambda (g$3456$17093) (list g$3456$17093)) (g$3456$13228 g$3456$17069)))) '#f)) g$3456$17003))) g$3456$16991))) ((lambda (g$3456$17095) (if (g$3456$13220 g$3456$17095) (begin '#f ((lambda (g$3456$17097) (if g$3456$17097 (begin '#f ((lambda (g$3456$17099) (if g$3456$17099 (begin '#f (append g$3456$17097 g$3456$17099)) '#f)) ((lambda (g$3456$17101) (if (g$3456$13220 g$3456$17101) (begin '#f ((lambda (g$3456$17103) (if g$3456$17103 (begin '#f ((lambda (g$3456$17105) (if g$3456$17105 (begin '#f (append g$3456$17103 g$3456$17105)) '#f)) ((letrec ((g$3456$17107 (lambda (g$3456$17109) (if (g$3456$13220 g$3456$17109) ((lambda (g$3456$17111) (if g$3456$17111 (begin '#f ((lambda (g$3456$17113) (if g$3456$17113 (begin '#f (map cons g$3456$17111 g$3456$17113)) '#f)) (g$3456$17107 (g$3456$13232 g$3456$17109)))) '#f)) ((lambda (g$3456$17115) (list g$3456$17115)) (g$3456$13228 g$3456$17109))) (if (g$3456$13224 g$3456$17109) (list (begin 'e* '())) '#f))))) g$3456$17107) (g$3456$13232 g$3456$17101)))) '#f)) ((lambda (g$3456$17117) (list g$3456$17117)) (g$3456$13228 g$3456$17101)))) '#f)) (g$3456$13232 g$3456$17095)))) '#f)) ((lambda (g$3456$17119) (if (g$3456$13234 g$3456$17119) (if (g$3456$13242 g$3456$17119 (g$3456$13487 'else)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17095)))) '#f)) g$3456$16991))) g$3456$16857))))) (g$3456$16855 g$3456$16851 g$3456$16852)))) g$3456$16845) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$16843 '())))) ((lambda (g$3456$17121) (if (g$3456$13220 g$3456$17121) (begin '#f ((lambda (g$3456$17123) (if g$3456$17123 (begin '#f ((lambda (g$3456$17125) (if g$3456$17125 (begin '#f (append g$3456$17123 g$3456$17125)) '#f)) ((lambda (g$3456$17127) (if (g$3456$13220 g$3456$17127) (begin '#f ((lambda (g$3456$17129) (if g$3456$17129 (begin '#f ((lambda (g$3456$17131) (if g$3456$17131 (begin '#f (append g$3456$17129 g$3456$17131)) '#f)) ((letrec ((g$3456$17133 (lambda (g$3456$17135) (if (g$3456$13220 g$3456$17135) ((lambda (g$3456$17137) (if g$3456$17137 (begin '#f ((lambda (g$3456$17139) (if g$3456$17139 (begin '#f (map cons g$3456$17137 g$3456$17139)) '#f)) (g$3456$17133 (g$3456$13232 g$3456$17135)))) '#f)) ((lambda (g$3456$17141) (list g$3456$17141)) (g$3456$13228 g$3456$17135))) (if (g$3456$13224 g$3456$17135) (list (begin 'cls* '())) '#f))))) g$3456$17133) (g$3456$13232 g$3456$17127)))) '#f)) ((lambda (g$3456$17143) (list g$3456$17143)) (g$3456$13228 g$3456$17127)))) '#f)) (g$3456$13232 g$3456$17121)))) '#f)) ((lambda (g$3456$17145) '()) (g$3456$13228 g$3456$17121)))) '#f)) g$3456$16843))) g$3456$16841))) (set! g$3456$13555 (lambda (g$3456$17147) ((lambda (g$3456$17149) ((lambda (g$3456$17151) (if (if g$3456$17151 (begin '#f (apply (lambda (g$3456$17153 g$3456$17154) '#t) g$3456$17151)) '#f) (apply (lambda (g$3456$17157 g$3456$17158) ((lambda (g$3456$17161) (begin (if (string? g$3456$17161) (void) (error 'expander '"invalid syntax" (g$3456$13254 g$3456$17147))) (with-input-from-file g$3456$17161 (lambda () (letrec ((g$3456$17163 (lambda (g$3456$17165) ((lambda (g$3456$17167) (if (eof-object? g$3456$17167) (cons (g$3456$13521 'begin) (g$3456$13200 g$3456$17157 (reverse g$3456$17165))) (g$3456$17163 (cons g$3456$17167 g$3456$17165)))) (read))))) (g$3456$17163 '())))))) (g$3456$13254 g$3456$17158))) g$3456$17151) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17149 '())))) ((lambda (g$3456$17169) (if (g$3456$13220 g$3456$17169) (begin '#f ((lambda (g$3456$17171) (if g$3456$17171 (begin '#f ((lambda (g$3456$17173) (if g$3456$17173 (begin '#f (append g$3456$17171 g$3456$17173)) '#f)) ((lambda (g$3456$17175) (if (g$3456$13220 g$3456$17175) (begin '#f ((lambda (g$3456$17177) (if g$3456$17177 (begin '#f ((lambda (g$3456$17179) (if g$3456$17179 (begin '#f (append g$3456$17177 g$3456$17179)) '#f)) ((lambda (g$3456$17181) (if (equal? (g$3456$13254 g$3456$17181) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17175)))) '#f)) ((lambda (g$3456$17183) (list g$3456$17183)) (g$3456$13228 g$3456$17175)))) '#f)) (g$3456$13232 g$3456$17169)))) '#f)) ((lambda (g$3456$17185) (list g$3456$17185)) (g$3456$13228 g$3456$17169)))) '#f)) g$3456$17149))) g$3456$17147))) (set! g$3456$13557 (lambda (g$3456$17187) ((lambda (g$3456$17189) ((lambda (g$3456$17191) (if (if g$3456$17191 (begin '#f (apply (lambda (g$3456$17193 g$3456$17194 g$3456$17195) '#t) g$3456$17191)) '#f) (apply (lambda (g$3456$17199 g$3456$17200 g$3456$17201) (begin (if (for-all (lambda (g$3456$17205) (if (g$3456$13234 g$3456$17205) (if (not (g$3456$13242 g$3456$17205 (g$3456$13487 '|...|))) (begin '#f (not (g$3456$13242 g$3456$17205 (g$3456$13487 '_)))) '#f) '#f)) g$3456$17199) (void) (error 'expander '"invalid literals" (g$3456$13252 g$3456$17187 '()))) (g$3456$13521 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$3456$17199 (map (lambda (g$3456$17207 g$3456$17208) (list g$3456$17207 (list 'syntax g$3456$17208))) g$3456$17200 g$3456$17201)))))))) g$3456$17191) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17189 '())))) ((lambda (g$3456$17211) (if (g$3456$13220 g$3456$17211) (begin '#f ((lambda (g$3456$17213) (if g$3456$17213 (begin '#f ((lambda (g$3456$17215) (if g$3456$17215 (begin '#f (append g$3456$17213 g$3456$17215)) '#f)) ((lambda (g$3456$17217) (if (g$3456$13220 g$3456$17217) (begin '#f ((lambda (g$3456$17219) (if g$3456$17219 (begin '#f ((lambda (g$3456$17221) (if g$3456$17221 (begin '#f (append g$3456$17219 g$3456$17221)) '#f)) ((letrec ((g$3456$17223 (lambda (g$3456$17225) (if (g$3456$13220 g$3456$17225) ((lambda (g$3456$17227) (if g$3456$17227 (begin '#f ((lambda (g$3456$17229) (if g$3456$17229 (begin '#f (map cons g$3456$17227 g$3456$17229)) '#f)) (g$3456$17223 (g$3456$13232 g$3456$17225)))) '#f)) ((lambda (g$3456$17231) (if (g$3456$13220 g$3456$17231) (begin '#f ((lambda (g$3456$17233) (if g$3456$17233 (begin '#f ((lambda (g$3456$17235) (if g$3456$17235 (begin '#f (append g$3456$17233 g$3456$17235)) '#f)) ((lambda (g$3456$17237) (if (g$3456$13220 g$3456$17237) (begin '#f ((lambda (g$3456$17239) (if g$3456$17239 (begin '#f ((lambda (g$3456$17241) (if g$3456$17241 (begin '#f (append g$3456$17239 g$3456$17241)) '#f)) ((lambda (g$3456$17243) (if (equal? (g$3456$13254 g$3456$17243) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17237)))) '#f)) ((lambda (g$3456$17245) (list g$3456$17245)) (g$3456$13228 g$3456$17237)))) '#f)) (g$3456$13232 g$3456$17231)))) '#f)) ((lambda (g$3456$17247) (list g$3456$17247)) (g$3456$13228 g$3456$17231)))) '#f)) (g$3456$13228 g$3456$17225))) (if (g$3456$13224 g$3456$17225) (list (begin 'pat* '()) (begin 'tmp* '())) '#f))))) g$3456$17223) (g$3456$13232 g$3456$17217)))) '#f)) ((letrec ((g$3456$17249 (lambda (g$3456$17251) (if (g$3456$13220 g$3456$17251) ((lambda (g$3456$17253) (if g$3456$17253 (begin '#f ((lambda (g$3456$17255) (if g$3456$17255 (begin '#f (map cons g$3456$17253 g$3456$17255)) '#f)) (g$3456$17249 (g$3456$13232 g$3456$17251)))) '#f)) ((lambda (g$3456$17257) (list g$3456$17257)) (g$3456$13228 g$3456$17251))) (if (g$3456$13224 g$3456$17251) (list (begin 'lits '())) '#f))))) g$3456$17249) (g$3456$13228 g$3456$17217)))) '#f)) (g$3456$13232 g$3456$17211)))) '#f)) ((lambda (g$3456$17259) '()) (g$3456$13228 g$3456$17211)))) '#f)) g$3456$17189))) g$3456$17187))) (set! g$3456$13559 ((lambda () ((lambda (g$3456$17283 g$3456$17285 g$3456$17287 g$3456$17289 g$3456$17291 g$3456$17293) (begin (set! g$3456$17283 (lambda (g$3456$17905 g$3456$17906) (letrec ((g$3456$17909 (lambda (g$3456$17911) (if (null? g$3456$17911) g$3456$17906 (g$3456$17285 (car g$3456$17911) (g$3456$17909 (cdr g$3456$17911))))))) (g$3456$17909 g$3456$17905)))) (set! g$3456$17285 (lambda (g$3456$17799 g$3456$17800) ((lambda (g$3456$17803) ((lambda (g$3456$17805) (if (if g$3456$17805 (begin '#f (apply (lambda (g$3456$17807) '#t) g$3456$17805)) '#f) (apply (lambda (g$3456$17809) ((lambda (g$3456$17811) ((lambda (g$3456$17813) (if (if g$3456$17813 (begin '#f (apply (lambda (g$3456$17815) '#t) g$3456$17813)) '#f) (apply (lambda (g$3456$17817) (list (g$3456$13487 'quote) (cons g$3456$17817 g$3456$17809))) g$3456$17813) ((lambda (g$3456$17819) ((lambda (g$3456$17821) (if (if g$3456$17821 (begin '#f (apply (lambda () '#t) g$3456$17821)) '#f) (apply (lambda () ((lambda (g$3456$17823) ((lambda (g$3456$17825) (if (if g$3456$17825 (begin '#f (apply (lambda () '#t) g$3456$17825)) '#f) (apply (lambda () (list (g$3456$13487 'list) g$3456$17799)) g$3456$17825) ((lambda (g$3456$17827) ((lambda (g$3456$17829) (if (if g$3456$17829 (begin '#f (apply (lambda () '#t) g$3456$17829)) '#f) (apply (lambda () (list (g$3456$13487 'cons) g$3456$17799 g$3456$17800)) g$3456$17829) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17827 '())))) ((lambda (g$3456$17831) '()) g$3456$17827))) g$3456$17823))) ((lambda (g$3456$17833) (if (equal? (g$3456$13254 g$3456$17833) '()) (begin '#f '()) '#f)) g$3456$17823))) g$3456$17809)) g$3456$17821) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17819 '())))) ((lambda (g$3456$17835) '()) g$3456$17819))) g$3456$17811))) ((lambda (g$3456$17837) (if (g$3456$13220 g$3456$17837) (begin '#f ((lambda (g$3456$17839) (if g$3456$17839 (begin '#f ((lambda (g$3456$17841) (if g$3456$17841 (begin '#f (append g$3456$17839 g$3456$17841)) '#f)) ((lambda (g$3456$17843) (if (g$3456$13220 g$3456$17843) (begin '#f ((lambda (g$3456$17845) (if g$3456$17845 (begin '#f ((lambda (g$3456$17847) (if g$3456$17847 (begin '#f (append g$3456$17845 g$3456$17847)) '#f)) ((lambda (g$3456$17849) (if (equal? (g$3456$13254 g$3456$17849) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17843)))) '#f)) ((lambda (g$3456$17851) (list g$3456$17851)) (g$3456$13228 g$3456$17843)))) '#f)) (g$3456$13232 g$3456$17837)))) '#f)) ((lambda (g$3456$17853) (if (g$3456$13234 g$3456$17853) (if (g$3456$13242 g$3456$17853 (g$3456$13487 'quote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17837)))) '#f)) g$3456$17811))) g$3456$17799)) g$3456$17805) ((lambda (g$3456$17855) ((lambda (g$3456$17857) (if (if g$3456$17857 (begin '#f (apply (lambda (g$3456$17859) '#t) g$3456$17857)) '#f) (apply (lambda (g$3456$17861) (cons* (g$3456$13487 'list) g$3456$17799 g$3456$17861)) g$3456$17857) ((lambda (g$3456$17863) ((lambda (g$3456$17865) (if (if g$3456$17865 (begin '#f (apply (lambda () '#t) g$3456$17865)) '#f) (apply (lambda () (list (g$3456$13487 'cons) g$3456$17799 g$3456$17800)) g$3456$17865) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17863 '())))) ((lambda (g$3456$17867) '()) g$3456$17863))) g$3456$17855))) ((lambda (g$3456$17869) (if (g$3456$13220 g$3456$17869) (begin '#f ((lambda (g$3456$17871) (if g$3456$17871 (begin '#f ((lambda (g$3456$17873) (if g$3456$17873 (begin '#f (append g$3456$17871 g$3456$17873)) '#f)) ((letrec ((g$3456$17875 (lambda (g$3456$17877) (if (g$3456$13220 g$3456$17877) ((lambda (g$3456$17879) (if g$3456$17879 (begin '#f ((lambda (g$3456$17881) (if g$3456$17881 (begin '#f (map cons g$3456$17879 g$3456$17881)) '#f)) (g$3456$17875 (g$3456$13232 g$3456$17877)))) '#f)) ((lambda (g$3456$17883) (list g$3456$17883)) (g$3456$13228 g$3456$17877))) (if (g$3456$13224 g$3456$17877) (list (begin 'stuff '())) '#f))))) g$3456$17875) (g$3456$13232 g$3456$17869)))) '#f)) ((lambda (g$3456$17885) (if (g$3456$13234 g$3456$17885) (if (g$3456$13242 g$3456$17885 (g$3456$13487 'list)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17869)))) '#f)) g$3456$17855))) g$3456$17803))) ((lambda (g$3456$17887) (if (g$3456$13220 g$3456$17887) (begin '#f ((lambda (g$3456$17889) (if g$3456$17889 (begin '#f ((lambda (g$3456$17891) (if g$3456$17891 (begin '#f (append g$3456$17889 g$3456$17891)) '#f)) ((lambda (g$3456$17893) (if (g$3456$13220 g$3456$17893) (begin '#f ((lambda (g$3456$17895) (if g$3456$17895 (begin '#f ((lambda (g$3456$17897) (if g$3456$17897 (begin '#f (append g$3456$17895 g$3456$17897)) '#f)) ((lambda (g$3456$17899) (if (equal? (g$3456$13254 g$3456$17899) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17893)))) '#f)) ((lambda (g$3456$17901) (list g$3456$17901)) (g$3456$13228 g$3456$17893)))) '#f)) (g$3456$13232 g$3456$17887)))) '#f)) ((lambda (g$3456$17903) (if (g$3456$13234 g$3456$17903) (if (g$3456$13242 g$3456$17903 (g$3456$13487 'quote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17887)))) '#f)) g$3456$17803))) g$3456$17800))) (set! g$3456$17287 (lambda (g$3456$17733 g$3456$17734) ((lambda (g$3456$17737) (if (null? g$3456$17737) (list (g$3456$13487 'quote) '()) (if (null? (cdr g$3456$17737)) (car g$3456$17737) (cons* (g$3456$13487 'append) g$3456$17737)))) (letrec ((g$3456$17739 (lambda (g$3456$17741) (if (null? g$3456$17741) ((lambda (g$3456$17743) ((lambda (g$3456$17745) (if (if g$3456$17745 (begin '#f (apply (lambda () '#t) g$3456$17745)) '#f) (apply (lambda () '()) g$3456$17745) ((lambda (g$3456$17747) ((lambda (g$3456$17749) (if (if g$3456$17749 (begin '#f (apply (lambda () '#t) g$3456$17749)) '#f) (apply (lambda () (list g$3456$17734)) g$3456$17749) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17747 '())))) ((lambda (g$3456$17751) '()) g$3456$17747))) g$3456$17743))) ((lambda (g$3456$17753) (if (g$3456$13220 g$3456$17753) (begin '#f ((lambda (g$3456$17755) (if g$3456$17755 (begin '#f ((lambda (g$3456$17757) (if g$3456$17757 (begin '#f (append g$3456$17755 g$3456$17757)) '#f)) ((lambda (g$3456$17759) (if (g$3456$13220 g$3456$17759) (begin '#f ((lambda (g$3456$17761) (if g$3456$17761 (begin '#f ((lambda (g$3456$17763) (if g$3456$17763 (begin '#f (append g$3456$17761 g$3456$17763)) '#f)) ((lambda (g$3456$17765) (if (equal? (g$3456$13254 g$3456$17765) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17759)))) '#f)) ((lambda (g$3456$17767) (if (equal? (g$3456$13254 g$3456$17767) '()) (begin '#f '()) '#f)) (g$3456$13228 g$3456$17759)))) '#f)) (g$3456$13232 g$3456$17753)))) '#f)) ((lambda (g$3456$17769) (if (g$3456$13234 g$3456$17769) (if (g$3456$13242 g$3456$17769 (g$3456$13487 'quote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17753)))) '#f)) g$3456$17743))) g$3456$17734) ((lambda (g$3456$17771) ((lambda (g$3456$17773) (if (if g$3456$17773 (begin '#f (apply (lambda () '#t) g$3456$17773)) '#f) (apply (lambda () (g$3456$17739 (cdr g$3456$17741))) g$3456$17773) ((lambda (g$3456$17775) ((lambda (g$3456$17777) (if (if g$3456$17777 (begin '#f (apply (lambda () '#t) g$3456$17777)) '#f) (apply (lambda () (cons (car g$3456$17741) (g$3456$17739 (cdr g$3456$17741)))) g$3456$17777) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17775 '())))) ((lambda (g$3456$17779) '()) g$3456$17775))) g$3456$17771))) ((lambda (g$3456$17781) (if (g$3456$13220 g$3456$17781) (begin '#f ((lambda (g$3456$17783) (if g$3456$17783 (begin '#f ((lambda (g$3456$17785) (if g$3456$17785 (begin '#f (append g$3456$17783 g$3456$17785)) '#f)) ((lambda (g$3456$17787) (if (g$3456$13220 g$3456$17787) (begin '#f ((lambda (g$3456$17789) (if g$3456$17789 (begin '#f ((lambda (g$3456$17791) (if g$3456$17791 (begin '#f (append g$3456$17789 g$3456$17791)) '#f)) ((lambda (g$3456$17793) (if (equal? (g$3456$13254 g$3456$17793) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17787)))) '#f)) ((lambda (g$3456$17795) (if (equal? (g$3456$13254 g$3456$17795) '()) (begin '#f '()) '#f)) (g$3456$13228 g$3456$17787)))) '#f)) (g$3456$13232 g$3456$17781)))) '#f)) ((lambda (g$3456$17797) (if (g$3456$13234 g$3456$17797) (if (g$3456$13242 g$3456$17797 (g$3456$13487 'quote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17781)))) '#f)) g$3456$17771))) (car g$3456$17741)))))) (g$3456$17739 g$3456$17733))))) (set! g$3456$17289 (lambda (g$3456$17573) ((lambda (g$3456$17575) ((lambda (g$3456$17577) ((lambda (g$3456$17579) (if (if g$3456$17579 (begin '#f (apply (lambda (g$3456$17581) '#t) g$3456$17579)) '#f) (apply (lambda (g$3456$17583) (list (g$3456$13487 'quote) (list->vector g$3456$17583))) g$3456$17579) ((lambda (g$3456$17585) ((lambda (g$3456$17587) (if (if g$3456$17587 (begin '#f (apply (lambda () '#t) g$3456$17587)) '#f) (apply (lambda () (letrec ((g$3456$17589 (lambda (g$3456$17593 g$3456$17594) ((lambda (g$3456$17597) ((lambda (g$3456$17599) (if (if g$3456$17599 (begin '#f (apply (lambda (g$3456$17601) '#t) g$3456$17599)) '#f) (apply (lambda (g$3456$17603) (g$3456$17594 (map (lambda (g$3456$17605) (list (g$3456$13487 'quote) g$3456$17605)) g$3456$17603))) g$3456$17599) ((lambda (g$3456$17607) ((lambda (g$3456$17609) (if (if g$3456$17609 (begin '#f (apply (lambda (g$3456$17611) '#t) g$3456$17609)) '#f) (apply (lambda (g$3456$17613) (g$3456$17594 g$3456$17613)) g$3456$17609) ((lambda (g$3456$17615) ((lambda (g$3456$17617) (if (if g$3456$17617 (begin '#f (apply (lambda (g$3456$17619 g$3456$17620) '#t) g$3456$17617)) '#f) (apply (lambda (g$3456$17623 g$3456$17624) (g$3456$17589 g$3456$17624 (lambda (g$3456$17627) (g$3456$17594 (cons g$3456$17623 g$3456$17627))))) g$3456$17617) ((lambda (g$3456$17629) ((lambda (g$3456$17631) (if (if g$3456$17631 (begin '#f (apply (lambda () '#t) g$3456$17631)) '#f) (apply (lambda () (list (g$3456$13487 'list->vector) g$3456$17575)) g$3456$17631) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17629 '())))) ((lambda (g$3456$17633) '()) g$3456$17629))) g$3456$17615))) ((lambda (g$3456$17635) (if (g$3456$13220 g$3456$17635) (begin '#f ((lambda (g$3456$17637) (if g$3456$17637 (begin '#f ((lambda (g$3456$17639) (if g$3456$17639 (begin '#f (append g$3456$17637 g$3456$17639)) '#f)) ((lambda (g$3456$17641) (if (g$3456$13220 g$3456$17641) (begin '#f ((lambda (g$3456$17643) (if g$3456$17643 (begin '#f ((lambda (g$3456$17645) (if g$3456$17645 (begin '#f (append g$3456$17643 g$3456$17645)) '#f)) ((lambda (g$3456$17647) (if (g$3456$13220 g$3456$17647) (begin '#f ((lambda (g$3456$17649) (if g$3456$17649 (begin '#f ((lambda (g$3456$17651) (if g$3456$17651 (begin '#f (append g$3456$17649 g$3456$17651)) '#f)) ((lambda (g$3456$17653) (if (equal? (g$3456$13254 g$3456$17653) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17647)))) '#f)) ((lambda (g$3456$17655) (list g$3456$17655)) (g$3456$13228 g$3456$17647)))) '#f)) (g$3456$13232 g$3456$17641)))) '#f)) ((lambda (g$3456$17657) (list g$3456$17657)) (g$3456$13228 g$3456$17641)))) '#f)) (g$3456$13232 g$3456$17635)))) '#f)) ((lambda (g$3456$17659) (if (g$3456$13234 g$3456$17659) (if (g$3456$13242 g$3456$17659 (g$3456$13487 'cons)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17635)))) '#f)) g$3456$17615))) g$3456$17607))) ((lambda (g$3456$17661) (if (g$3456$13220 g$3456$17661) (begin '#f ((lambda (g$3456$17663) (if g$3456$17663 (begin '#f ((lambda (g$3456$17665) (if g$3456$17665 (begin '#f (append g$3456$17663 g$3456$17665)) '#f)) ((letrec ((g$3456$17667 (lambda (g$3456$17669) (if (g$3456$13220 g$3456$17669) ((lambda (g$3456$17671) (if g$3456$17671 (begin '#f ((lambda (g$3456$17673) (if g$3456$17673 (begin '#f (map cons g$3456$17671 g$3456$17673)) '#f)) (g$3456$17667 (g$3456$13232 g$3456$17669)))) '#f)) ((lambda (g$3456$17675) (list g$3456$17675)) (g$3456$13228 g$3456$17669))) (if (g$3456$13224 g$3456$17669) (list (begin 'x* '())) '#f))))) g$3456$17667) (g$3456$13232 g$3456$17661)))) '#f)) ((lambda (g$3456$17677) (if (g$3456$13234 g$3456$17677) (if (g$3456$13242 g$3456$17677 (g$3456$13487 'list)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17661)))) '#f)) g$3456$17607))) g$3456$17597))) ((lambda (g$3456$17679) (if (g$3456$13220 g$3456$17679) (begin '#f ((lambda (g$3456$17681) (if g$3456$17681 (begin '#f ((lambda (g$3456$17683) (if g$3456$17683 (begin '#f (append g$3456$17681 g$3456$17683)) '#f)) ((lambda (g$3456$17685) (if (g$3456$13220 g$3456$17685) (begin '#f ((lambda (g$3456$17687) (if g$3456$17687 (begin '#f ((lambda (g$3456$17689) (if g$3456$17689 (begin '#f (append g$3456$17687 g$3456$17689)) '#f)) ((lambda (g$3456$17691) (if (equal? (g$3456$13254 g$3456$17691) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17685)))) '#f)) ((letrec ((g$3456$17693 (lambda (g$3456$17695) (if (g$3456$13220 g$3456$17695) ((lambda (g$3456$17697) (if g$3456$17697 (begin '#f ((lambda (g$3456$17699) (if g$3456$17699 (begin '#f (map cons g$3456$17697 g$3456$17699)) '#f)) (g$3456$17693 (g$3456$13232 g$3456$17695)))) '#f)) ((lambda (g$3456$17701) (list g$3456$17701)) (g$3456$13228 g$3456$17695))) (if (g$3456$13224 g$3456$17695) (list (begin 'x* '())) '#f))))) g$3456$17693) (g$3456$13228 g$3456$17685)))) '#f)) (g$3456$13232 g$3456$17679)))) '#f)) ((lambda (g$3456$17703) (if (g$3456$13234 g$3456$17703) (if (g$3456$13242 g$3456$17703 (g$3456$13487 'quote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17679)))) '#f)) g$3456$17597))) g$3456$17593)))) (g$3456$17589 g$3456$17573 (lambda (g$3456$17591) (cons* (g$3456$13487 'vector) g$3456$17591))))) g$3456$17587) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17585 '())))) ((lambda (g$3456$17705) '()) g$3456$17585))) g$3456$17577))) ((lambda (g$3456$17707) (if (g$3456$13220 g$3456$17707) (begin '#f ((lambda (g$3456$17709) (if g$3456$17709 (begin '#f ((lambda (g$3456$17711) (if g$3456$17711 (begin '#f (append g$3456$17709 g$3456$17711)) '#f)) ((lambda (g$3456$17713) (if (g$3456$13220 g$3456$17713) (begin '#f ((lambda (g$3456$17715) (if g$3456$17715 (begin '#f ((lambda (g$3456$17717) (if g$3456$17717 (begin '#f (append g$3456$17715 g$3456$17717)) '#f)) ((lambda (g$3456$17719) (if (equal? (g$3456$13254 g$3456$17719) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17713)))) '#f)) ((letrec ((g$3456$17721 (lambda (g$3456$17723) (if (g$3456$13220 g$3456$17723) ((lambda (g$3456$17725) (if g$3456$17725 (begin '#f ((lambda (g$3456$17727) (if g$3456$17727 (begin '#f (map cons g$3456$17725 g$3456$17727)) '#f)) (g$3456$17721 (g$3456$13232 g$3456$17723)))) '#f)) ((lambda (g$3456$17729) (list g$3456$17729)) (g$3456$13228 g$3456$17723))) (if (g$3456$13224 g$3456$17723) (list (begin 'x* '())) '#f))))) g$3456$17721) (g$3456$13228 g$3456$17713)))) '#f)) (g$3456$13232 g$3456$17707)))) '#f)) ((lambda (g$3456$17731) (if (g$3456$13234 g$3456$17731) (if (g$3456$13242 g$3456$17731 (g$3456$13487 'quote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17707)))) '#f)) g$3456$17577))) g$3456$17575)) g$3456$17573))) (set! g$3456$17291 (lambda (g$3456$17479 g$3456$17480) ((lambda (g$3456$17483) ((lambda (g$3456$17485) (if (if g$3456$17485 (begin '#f (apply (lambda (g$3456$17487 g$3456$17488) '#t) g$3456$17485)) '#f) (apply (lambda (g$3456$17491 g$3456$17492) ((lambda (g$3456$17495) ((lambda (g$3456$17497) (if (if g$3456$17497 (begin '#f (apply (lambda (g$3456$17499) '#t) g$3456$17497)) '#f) (apply (lambda (g$3456$17501) (if (= g$3456$17480 '0) (g$3456$17283 g$3456$17501 (g$3456$17291 g$3456$17492 g$3456$17480)) (g$3456$17285 (g$3456$17285 (list (g$3456$13487 'quote) 'unquote) (g$3456$17293 g$3456$17501 (- g$3456$17480 '1))) (g$3456$17291 g$3456$17492 g$3456$17480)))) g$3456$17497) ((lambda (g$3456$17503) ((lambda (g$3456$17505) (if (if g$3456$17505 (begin '#f (apply (lambda (g$3456$17507) '#t) g$3456$17505)) '#f) (apply (lambda (g$3456$17509) (if (= g$3456$17480 '0) (g$3456$17287 g$3456$17509 (g$3456$17291 g$3456$17492 g$3456$17480)) (g$3456$17285 (g$3456$17285 (list (g$3456$13487 'quote) 'unquote-splicing) (g$3456$17293 g$3456$17509 (- g$3456$17480 '1))) (g$3456$17291 g$3456$17492 g$3456$17480)))) g$3456$17505) ((lambda (g$3456$17511) ((lambda (g$3456$17513) (if (if g$3456$17513 (begin '#f (apply (lambda (g$3456$17515) '#t) g$3456$17513)) '#f) (apply (lambda (g$3456$17517) (g$3456$17285 (g$3456$17293 g$3456$17517 g$3456$17480) (g$3456$17291 g$3456$17492 g$3456$17480))) g$3456$17513) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17511 '())))) ((lambda (g$3456$17519) (list g$3456$17519)) g$3456$17511))) g$3456$17503))) ((lambda (g$3456$17521) (if (g$3456$13220 g$3456$17521) (begin '#f ((lambda (g$3456$17523) (if g$3456$17523 (begin '#f ((lambda (g$3456$17525) (if g$3456$17525 (begin '#f (append g$3456$17523 g$3456$17525)) '#f)) ((letrec ((g$3456$17527 (lambda (g$3456$17529) (if (g$3456$13220 g$3456$17529) ((lambda (g$3456$17531) (if g$3456$17531 (begin '#f ((lambda (g$3456$17533) (if g$3456$17533 (begin '#f (map cons g$3456$17531 g$3456$17533)) '#f)) (g$3456$17527 (g$3456$13232 g$3456$17529)))) '#f)) ((lambda (g$3456$17535) (list g$3456$17535)) (g$3456$13228 g$3456$17529))) (if (g$3456$13224 g$3456$17529) (list (begin 'p '())) '#f))))) g$3456$17527) (g$3456$13232 g$3456$17521)))) '#f)) ((lambda (g$3456$17537) (if (g$3456$13234 g$3456$17537) (if (g$3456$13242 g$3456$17537 (g$3456$13487 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17521)))) '#f)) g$3456$17503))) g$3456$17495))) ((lambda (g$3456$17539) (if (g$3456$13220 g$3456$17539) (begin '#f ((lambda (g$3456$17541) (if g$3456$17541 (begin '#f ((lambda (g$3456$17543) (if g$3456$17543 (begin '#f (append g$3456$17541 g$3456$17543)) '#f)) ((letrec ((g$3456$17545 (lambda (g$3456$17547) (if (g$3456$13220 g$3456$17547) ((lambda (g$3456$17549) (if g$3456$17549 (begin '#f ((lambda (g$3456$17551) (if g$3456$17551 (begin '#f (map cons g$3456$17549 g$3456$17551)) '#f)) (g$3456$17545 (g$3456$13232 g$3456$17547)))) '#f)) ((lambda (g$3456$17553) (list g$3456$17553)) (g$3456$13228 g$3456$17547))) (if (g$3456$13224 g$3456$17547) (list (begin 'p '())) '#f))))) g$3456$17545) (g$3456$13232 g$3456$17539)))) '#f)) ((lambda (g$3456$17555) (if (g$3456$13234 g$3456$17555) (if (g$3456$13242 g$3456$17555 (g$3456$13487 'unquote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17539)))) '#f)) g$3456$17495))) g$3456$17491)) g$3456$17485) ((lambda (g$3456$17557) ((lambda (g$3456$17559) (if (if g$3456$17559 (begin '#f (apply (lambda () '#t) g$3456$17559)) '#f) (apply (lambda () (list (g$3456$13487 'quote) '())) g$3456$17559) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17557 '())))) ((lambda (g$3456$17561) (if (equal? (g$3456$13254 g$3456$17561) '()) (begin '#f '()) '#f)) g$3456$17557))) g$3456$17483))) ((lambda (g$3456$17563) (if (g$3456$13220 g$3456$17563) (begin '#f ((lambda (g$3456$17565) (if g$3456$17565 (begin '#f ((lambda (g$3456$17567) (if g$3456$17567 (begin '#f (append g$3456$17565 g$3456$17567)) '#f)) ((lambda (g$3456$17569) (list g$3456$17569)) (g$3456$13232 g$3456$17563)))) '#f)) ((lambda (g$3456$17571) (list g$3456$17571)) (g$3456$13228 g$3456$17563)))) '#f)) g$3456$17483))) g$3456$17479))) (set! g$3456$17293 (lambda (g$3456$17295 g$3456$17296) ((lambda (g$3456$17299) ((lambda (g$3456$17301) (if (if g$3456$17301 (begin '#f (apply (lambda (g$3456$17303) '#t) g$3456$17301)) '#f) (apply (lambda (g$3456$17305) (if (= g$3456$17296 '0) g$3456$17305 (g$3456$17285 (list (g$3456$13487 'quote) 'unquote) (g$3456$17293 (list g$3456$17305) (- g$3456$17296 '1))))) g$3456$17301) ((lambda (g$3456$17307) ((lambda (g$3456$17309) (if (if g$3456$17309 (begin '#f (apply (lambda (g$3456$17311 g$3456$17312) '#t) g$3456$17309)) '#f) (apply (lambda (g$3456$17315 g$3456$17316) (if (= g$3456$17296 '0) (g$3456$17283 g$3456$17315 (g$3456$17293 g$3456$17316 g$3456$17296)) (g$3456$17285 (g$3456$17285 (list (g$3456$13487 'quote) 'unquote) (g$3456$17293 g$3456$17315 (- g$3456$17296 '1))) (g$3456$17293 g$3456$17316 g$3456$17296)))) g$3456$17309) ((lambda (g$3456$17319) ((lambda (g$3456$17321) (if (if g$3456$17321 (begin '#f (apply (lambda (g$3456$17323 g$3456$17324) '#t) g$3456$17321)) '#f) (apply (lambda (g$3456$17327 g$3456$17328) (if (= g$3456$17296 '0) (g$3456$17287 g$3456$17327 (g$3456$17293 g$3456$17328 g$3456$17296)) (g$3456$17285 (g$3456$17285 (list (g$3456$13487 'quote) 'unquote-splicing) (g$3456$17293 g$3456$17327 (- g$3456$17296 '1))) (g$3456$17293 g$3456$17328 g$3456$17296)))) g$3456$17321) ((lambda (g$3456$17331) ((lambda (g$3456$17333) (if (if g$3456$17333 (begin '#f (apply (lambda (g$3456$17335) '#t) g$3456$17333)) '#f) (apply (lambda (g$3456$17337) (g$3456$17285 (list (g$3456$13487 'quote) 'quasiquote) (g$3456$17293 (list g$3456$17337) (+ g$3456$17296 '1)))) g$3456$17333) ((lambda (g$3456$17339) ((lambda (g$3456$17341) (if (if g$3456$17341 (begin '#f (apply (lambda (g$3456$17343 g$3456$17344) '#t) g$3456$17341)) '#f) (apply (lambda (g$3456$17347 g$3456$17348) (g$3456$17285 (g$3456$17293 g$3456$17347 g$3456$17296) (g$3456$17293 g$3456$17348 g$3456$17296))) g$3456$17341) ((lambda (g$3456$17351) ((lambda (g$3456$17353) (if (if g$3456$17353 (begin '#f (apply (lambda (g$3456$17355) (not (g$3456$13186 g$3456$17355))) g$3456$17353)) '#f) (apply (lambda (g$3456$17357) (g$3456$17289 (g$3456$17291 g$3456$17357 g$3456$17296))) g$3456$17353) ((lambda (g$3456$17359) ((lambda (g$3456$17361) (if (if g$3456$17361 (begin '#f (apply (lambda (g$3456$17363) '#t) g$3456$17361)) '#f) (apply (lambda (g$3456$17365) (list (g$3456$13487 'quote) g$3456$17365)) g$3456$17361) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17359 '())))) ((lambda (g$3456$17367) (list g$3456$17367)) g$3456$17359))) g$3456$17351))) ((lambda (g$3456$17369) (if (g$3456$13222 g$3456$17369) (begin '#f ((letrec ((g$3456$17371 (lambda (g$3456$17373) (if (g$3456$13220 g$3456$17373) ((lambda (g$3456$17375) (if g$3456$17375 (begin '#f ((lambda (g$3456$17377) (if g$3456$17377 (begin '#f (map cons g$3456$17375 g$3456$17377)) '#f)) (g$3456$17371 (g$3456$13232 g$3456$17373)))) '#f)) ((lambda (g$3456$17379) (list g$3456$17379)) (g$3456$13228 g$3456$17373))) (if (g$3456$13224 g$3456$17373) (list (begin 'x '())) '#f))))) g$3456$17371) (g$3456$13218 g$3456$17369))) '#f)) g$3456$17351))) g$3456$17339))) ((lambda (g$3456$17381) (if (g$3456$13220 g$3456$17381) (begin '#f ((lambda (g$3456$17383) (if g$3456$17383 (begin '#f ((lambda (g$3456$17385) (if g$3456$17385 (begin '#f (append g$3456$17383 g$3456$17385)) '#f)) ((lambda (g$3456$17387) (list g$3456$17387)) (g$3456$13232 g$3456$17381)))) '#f)) ((lambda (g$3456$17389) (list g$3456$17389)) (g$3456$13228 g$3456$17381)))) '#f)) g$3456$17339))) g$3456$17331))) ((lambda (g$3456$17391) (if (g$3456$13220 g$3456$17391) (begin '#f ((lambda (g$3456$17393) (if g$3456$17393 (begin '#f ((lambda (g$3456$17395) (if g$3456$17395 (begin '#f (append g$3456$17393 g$3456$17395)) '#f)) ((lambda (g$3456$17397) (if (g$3456$13220 g$3456$17397) (begin '#f ((lambda (g$3456$17399) (if g$3456$17399 (begin '#f ((lambda (g$3456$17401) (if g$3456$17401 (begin '#f (append g$3456$17399 g$3456$17401)) '#f)) ((lambda (g$3456$17403) (if (equal? (g$3456$13254 g$3456$17403) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17397)))) '#f)) ((lambda (g$3456$17405) (list g$3456$17405)) (g$3456$13228 g$3456$17397)))) '#f)) (g$3456$13232 g$3456$17391)))) '#f)) ((lambda (g$3456$17407) (if (g$3456$13234 g$3456$17407) (if (g$3456$13242 g$3456$17407 (g$3456$13487 'quasiquote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17391)))) '#f)) g$3456$17331))) g$3456$17319))) ((lambda (g$3456$17409) (if (g$3456$13220 g$3456$17409) (begin '#f ((lambda (g$3456$17411) (if g$3456$17411 (begin '#f ((lambda (g$3456$17413) (if g$3456$17413 (begin '#f (append g$3456$17411 g$3456$17413)) '#f)) ((lambda (g$3456$17415) (list g$3456$17415)) (g$3456$13232 g$3456$17409)))) '#f)) ((lambda (g$3456$17417) (if (g$3456$13220 g$3456$17417) (begin '#f ((lambda (g$3456$17419) (if g$3456$17419 (begin '#f ((lambda (g$3456$17421) (if g$3456$17421 (begin '#f (append g$3456$17419 g$3456$17421)) '#f)) ((letrec ((g$3456$17423 (lambda (g$3456$17425) (if (g$3456$13220 g$3456$17425) ((lambda (g$3456$17427) (if g$3456$17427 (begin '#f ((lambda (g$3456$17429) (if g$3456$17429 (begin '#f (map cons g$3456$17427 g$3456$17429)) '#f)) (g$3456$17423 (g$3456$13232 g$3456$17425)))) '#f)) ((lambda (g$3456$17431) (list g$3456$17431)) (g$3456$13228 g$3456$17425))) (if (g$3456$13224 g$3456$17425) (list (begin 'p '())) '#f))))) g$3456$17423) (g$3456$13232 g$3456$17417)))) '#f)) ((lambda (g$3456$17433) (if (g$3456$13234 g$3456$17433) (if (g$3456$13242 g$3456$17433 (g$3456$13487 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17417)))) '#f)) (g$3456$13228 g$3456$17409)))) '#f)) g$3456$17319))) g$3456$17307))) ((lambda (g$3456$17435) (if (g$3456$13220 g$3456$17435) (begin '#f ((lambda (g$3456$17437) (if g$3456$17437 (begin '#f ((lambda (g$3456$17439) (if g$3456$17439 (begin '#f (append g$3456$17437 g$3456$17439)) '#f)) ((lambda (g$3456$17441) (list g$3456$17441)) (g$3456$13232 g$3456$17435)))) '#f)) ((lambda (g$3456$17443) (if (g$3456$13220 g$3456$17443) (begin '#f ((lambda (g$3456$17445) (if g$3456$17445 (begin '#f ((lambda (g$3456$17447) (if g$3456$17447 (begin '#f (append g$3456$17445 g$3456$17447)) '#f)) ((letrec ((g$3456$17449 (lambda (g$3456$17451) (if (g$3456$13220 g$3456$17451) ((lambda (g$3456$17453) (if g$3456$17453 (begin '#f ((lambda (g$3456$17455) (if g$3456$17455 (begin '#f (map cons g$3456$17453 g$3456$17455)) '#f)) (g$3456$17449 (g$3456$13232 g$3456$17451)))) '#f)) ((lambda (g$3456$17457) (list g$3456$17457)) (g$3456$13228 g$3456$17451))) (if (g$3456$13224 g$3456$17451) (list (begin 'p '())) '#f))))) g$3456$17449) (g$3456$13232 g$3456$17443)))) '#f)) ((lambda (g$3456$17459) (if (g$3456$13234 g$3456$17459) (if (g$3456$13242 g$3456$17459 (g$3456$13487 'unquote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17443)))) '#f)) (g$3456$13228 g$3456$17435)))) '#f)) g$3456$17307))) g$3456$17299))) ((lambda (g$3456$17461) (if (g$3456$13220 g$3456$17461) (begin '#f ((lambda (g$3456$17463) (if g$3456$17463 (begin '#f ((lambda (g$3456$17465) (if g$3456$17465 (begin '#f (append g$3456$17463 g$3456$17465)) '#f)) ((lambda (g$3456$17467) (if (g$3456$13220 g$3456$17467) (begin '#f ((lambda (g$3456$17469) (if g$3456$17469 (begin '#f ((lambda (g$3456$17471) (if g$3456$17471 (begin '#f (append g$3456$17469 g$3456$17471)) '#f)) ((lambda (g$3456$17473) (if (equal? (g$3456$13254 g$3456$17473) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17467)))) '#f)) ((lambda (g$3456$17475) (list g$3456$17475)) (g$3456$13228 g$3456$17467)))) '#f)) (g$3456$13232 g$3456$17461)))) '#f)) ((lambda (g$3456$17477) (if (g$3456$13234 g$3456$17477) (if (g$3456$13242 g$3456$17477 (g$3456$13487 'unquote)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$17461)))) '#f)) g$3456$17299))) g$3456$17295))) (lambda (g$3456$17913) ((lambda (g$3456$17915) ((lambda (g$3456$17917) (if (if g$3456$17917 (begin '#f (apply (lambda (g$3456$17919) '#t) g$3456$17917)) '#f) (apply (lambda (g$3456$17921) (g$3456$17293 g$3456$17921 '0)) g$3456$17917) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$17915 '())))) ((lambda (g$3456$17923) (if (g$3456$13220 g$3456$17923) (begin '#f ((lambda (g$3456$17925) (if g$3456$17925 (begin '#f ((lambda (g$3456$17927) (if g$3456$17927 (begin '#f (append g$3456$17925 g$3456$17927)) '#f)) ((lambda (g$3456$17929) (if (g$3456$13220 g$3456$17929) (begin '#f ((lambda (g$3456$17931) (if g$3456$17931 (begin '#f ((lambda (g$3456$17933) (if g$3456$17933 (begin '#f (append g$3456$17931 g$3456$17933)) '#f)) ((lambda (g$3456$17935) (if (equal? (g$3456$13254 g$3456$17935) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$17929)))) '#f)) ((lambda (g$3456$17937) (list g$3456$17937)) (g$3456$13228 g$3456$17929)))) '#f)) (g$3456$13232 g$3456$17923)))) '#f)) ((lambda (g$3456$17939) '()) (g$3456$13228 g$3456$17923)))) '#f)) g$3456$17915))) g$3456$17913)))) '#f '#f '#f '#f '#f '#f)))) (set! g$3456$13561 ((lambda () ((lambda (g$3456$17941) (begin (set! g$3456$17941 (lambda (g$3456$17943 g$3456$17944) ((lambda (g$3456$17947) ((lambda (g$3456$17949) (if (if g$3456$17949 (begin '#f (apply (lambda (g$3456$17951) '#t) g$3456$17949)) '#f) (apply (lambda (g$3456$17953) (if (= g$3456$17944 '0) ((lambda (g$3456$17955) (values (list g$3456$17955) (list g$3456$17953) g$3456$17955)) (gensym)) (call-with-values (lambda () (g$3456$17941 g$3456$17953 (- g$3456$17944 '1))) (lambda (g$3456$17957 g$3456$17958 g$3456$17959) (values g$3456$17957 g$3456$17958 (list 'unsyntax g$3456$17959)))))) g$3456$17949) ((lambda (g$3456$17963) ((lambda (g$3456$17965) (if (if g$3456$17965 (begin '#f (apply (lambda () (= g$3456$17944 '0)) g$3456$17965)) '#f) (apply (lambda () (error 'expander '"incorrect use of unsyntax" (g$3456$13252 g$3456$17943 '()))) g$3456$17965) ((lambda (g$3456$17967) ((lambda (g$3456$17969) (if (if g$3456$17969 (begin '#f (apply (lambda (g$3456$17971 g$3456$17972) '#t) g$3456$17969)) '#f) (apply (lambda (g$3456$17975 g$3456$17976) (call-with-values (lambda () (g$3456$17941 g$3456$17976 g$3456$17944)) (lambda (g$3456$17979 g$3456$17980 g$3456$17981) (if (= g$3456$17944 '0) ((lambda (g$3456$17985) (values (cons (cons g$3456$17985 '(|...|)) g$3456$17979) (cons g$3456$17975 g$3456$17980) (cons g$3456$17985 (cons '|...| g$3456$17981)))) (gensym)) (call-with-values (lambda () (g$3456$17941 g$3456$17975 (- g$3456$17944 '1))) (lambda (g$3456$17987 g$3456$17988 g$3456$17989) (values (append g$3456$17987 g$3456$17979) (append g$3456$17988 g$3456$17980) (cons (list 'unsyntax-splicing g$3456$17989) g$3456$17981)))))))) g$3456$17969) ((lambda (g$3456$17993) ((lambda (g$3456$17995) (if (if g$3456$17995 (begin '#f (apply (lambda () (= g$3456$17944 '0)) g$3456$17995)) '#f) (apply (lambda () (error 'expander '"incorrect use of unsyntax-splicing" (g$3456$13252 g$3456$17943 '()))) g$3456$17995) ((lambda (g$3456$17997) ((lambda (g$3456$17999) (if (if g$3456$17999 (begin '#f (apply (lambda (g$3456$18001) '#t) g$3456$17999)) '#f) (apply (lambda (g$3456$18003) (call-with-values (lambda () (g$3456$17941 g$3456$18003 (+ g$3456$17944 '1))) (lambda (g$3456$18005 g$3456$18006 g$3456$18007) (values g$3456$18005 g$3456$18006 (list 'quasisyntax g$3456$18007))))) g$3456$17999) ((lambda (g$3456$18011) ((lambda (g$3456$18013) (if (if g$3456$18013 (begin '#f (apply (lambda (g$3456$18015 g$3456$18016) '#t) g$3456$18013)) '#f) (apply (lambda (g$3456$18019 g$3456$18020) (call-with-values (lambda () (g$3456$17941 g$3456$18019 g$3456$17944)) (lambda (g$3456$18023 g$3456$18024 g$3456$18025) (call-with-values (lambda () (g$3456$17941 g$3456$18020 g$3456$17944)) (lambda (g$3456$18026 g$3456$18027 g$3456$18028) (values (append g$3456$18026 g$3456$18023) (append g$3456$18027 g$3456$18024) (cons g$3456$18025 g$3456$18028))))))) g$3456$18013) ((lambda (g$3456$18035) ((lambda (g$3456$18037) (if (if g$3456$18037 (begin '#f (apply (lambda (g$3456$18039) (not (g$3456$13186 g$3456$17943))) g$3456$18037)) '#f) (apply (lambda (g$3456$18041) (call-with-values (lambda () (letrec ((g$3456$18043 (lambda (g$3456$18045) (if (null? g$3456$18045) (values '() '() '()) (call-with-values (lambda () (g$3456$17941 (car g$3456$18045) g$3456$17944)) (lambda (g$3456$18047 g$3456$18048 g$3456$18049) (call-with-values (lambda () (g$3456$18043 (cdr g$3456$18045))) (lambda (g$3456$18053 g$3456$18054 g$3456$18055) (values (append g$3456$18047 g$3456$18053) (append g$3456$18048 g$3456$18054) (cons g$3456$18049 g$3456$18055)))))))))) (g$3456$18043 g$3456$18041))) (lambda (g$3456$18059 g$3456$18060 g$3456$18061) (values g$3456$18059 g$3456$18060 (list->vector g$3456$18061))))) g$3456$18037) ((lambda (g$3456$18065) ((lambda (g$3456$18067) (if (if g$3456$18067 (begin '#f (apply (lambda () '#t) g$3456$18067)) '#f) (apply (lambda () (values '() '() g$3456$17943)) g$3456$18067) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18065 '())))) ((lambda (g$3456$18069) '()) g$3456$18065))) g$3456$18035))) ((lambda (g$3456$18071) (if (g$3456$13222 g$3456$18071) (begin '#f ((letrec ((g$3456$18073 (lambda (g$3456$18075) (if (g$3456$13220 g$3456$18075) ((lambda (g$3456$18077) (if g$3456$18077 (begin '#f ((lambda (g$3456$18079) (if g$3456$18079 (begin '#f (map cons g$3456$18077 g$3456$18079)) '#f)) (g$3456$18073 (g$3456$13232 g$3456$18075)))) '#f)) ((lambda (g$3456$18081) (list g$3456$18081)) (g$3456$13228 g$3456$18075))) (if (g$3456$13224 g$3456$18075) (list (begin 'x '())) '#f))))) g$3456$18073) (g$3456$13218 g$3456$18071))) '#f)) g$3456$18035))) g$3456$18011))) ((lambda (g$3456$18083) (if (g$3456$13220 g$3456$18083) (begin '#f ((lambda (g$3456$18085) (if g$3456$18085 (begin '#f ((lambda (g$3456$18087) (if g$3456$18087 (begin '#f (append g$3456$18085 g$3456$18087)) '#f)) ((lambda (g$3456$18089) (list g$3456$18089)) (g$3456$13232 g$3456$18083)))) '#f)) ((lambda (g$3456$18091) (list g$3456$18091)) (g$3456$13228 g$3456$18083)))) '#f)) g$3456$18011))) g$3456$17997))) ((lambda (g$3456$18093) (if (g$3456$13220 g$3456$18093) (begin '#f ((lambda (g$3456$18095) (if g$3456$18095 (begin '#f ((lambda (g$3456$18097) (if g$3456$18097 (begin '#f (append g$3456$18095 g$3456$18097)) '#f)) ((lambda (g$3456$18099) (if (g$3456$13220 g$3456$18099) (begin '#f ((lambda (g$3456$18101) (if g$3456$18101 (begin '#f ((lambda (g$3456$18103) (if g$3456$18103 (begin '#f (append g$3456$18101 g$3456$18103)) '#f)) ((lambda (g$3456$18105) (if (equal? (g$3456$13254 g$3456$18105) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18099)))) '#f)) ((lambda (g$3456$18107) (list g$3456$18107)) (g$3456$13228 g$3456$18099)))) '#f)) (g$3456$13232 g$3456$18093)))) '#f)) ((lambda (g$3456$18109) (if (g$3456$13234 g$3456$18109) (if (g$3456$13242 g$3456$18109 (g$3456$13487 'quasisyntax)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18093)))) '#f)) g$3456$17997))) g$3456$17993))) ((lambda (g$3456$18111) (if (g$3456$13234 g$3456$18111) (if (g$3456$13242 g$3456$18111 (g$3456$13487 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) g$3456$17993))) g$3456$17967))) ((lambda (g$3456$18113) (if (g$3456$13220 g$3456$18113) (begin '#f ((lambda (g$3456$18115) (if g$3456$18115 (begin '#f ((lambda (g$3456$18117) (if g$3456$18117 (begin '#f (append g$3456$18115 g$3456$18117)) '#f)) ((lambda (g$3456$18119) (list g$3456$18119)) (g$3456$13232 g$3456$18113)))) '#f)) ((lambda (g$3456$18121) (if (g$3456$13220 g$3456$18121) (begin '#f ((lambda (g$3456$18123) (if g$3456$18123 (begin '#f ((lambda (g$3456$18125) (if g$3456$18125 (begin '#f (append g$3456$18123 g$3456$18125)) '#f)) ((lambda (g$3456$18127) (if (g$3456$13220 g$3456$18127) (begin '#f ((lambda (g$3456$18129) (if g$3456$18129 (begin '#f ((lambda (g$3456$18131) (if g$3456$18131 (begin '#f (append g$3456$18129 g$3456$18131)) '#f)) ((lambda (g$3456$18133) (if (equal? (g$3456$13254 g$3456$18133) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18127)))) '#f)) ((lambda (g$3456$18135) (list g$3456$18135)) (g$3456$13228 g$3456$18127)))) '#f)) (g$3456$13232 g$3456$18121)))) '#f)) ((lambda (g$3456$18137) (if (g$3456$13234 g$3456$18137) (if (g$3456$13242 g$3456$18137 (g$3456$13487 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18121)))) '#f)) (g$3456$13228 g$3456$18113)))) '#f)) g$3456$17967))) g$3456$17963))) ((lambda (g$3456$18139) (if (g$3456$13234 g$3456$18139) (if (g$3456$13242 g$3456$18139 (g$3456$13487 'unsyntax)) (begin '#f '()) '#f) '#f)) g$3456$17963))) g$3456$17947))) ((lambda (g$3456$18141) (if (g$3456$13220 g$3456$18141) (begin '#f ((lambda (g$3456$18143) (if g$3456$18143 (begin '#f ((lambda (g$3456$18145) (if g$3456$18145 (begin '#f (append g$3456$18143 g$3456$18145)) '#f)) ((lambda (g$3456$18147) (if (g$3456$13220 g$3456$18147) (begin '#f ((lambda (g$3456$18149) (if g$3456$18149 (begin '#f ((lambda (g$3456$18151) (if g$3456$18151 (begin '#f (append g$3456$18149 g$3456$18151)) '#f)) ((lambda (g$3456$18153) (if (equal? (g$3456$13254 g$3456$18153) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18147)))) '#f)) ((lambda (g$3456$18155) (list g$3456$18155)) (g$3456$13228 g$3456$18147)))) '#f)) (g$3456$13232 g$3456$18141)))) '#f)) ((lambda (g$3456$18157) (if (g$3456$13234 g$3456$18157) (if (g$3456$13242 g$3456$18157 (g$3456$13487 'unsyntax)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18141)))) '#f)) g$3456$17947))) g$3456$17943))) (lambda (g$3456$18159) ((lambda (g$3456$18161) ((lambda (g$3456$18163) (if (if g$3456$18163 (begin '#f (apply (lambda (g$3456$18165) '#t) g$3456$18163)) '#f) (apply (lambda (g$3456$18167) (call-with-values (lambda () (g$3456$17941 g$3456$18167 '0)) (lambda (g$3456$18169 g$3456$18170 g$3456$18171) (g$3456$13521 (list 'syntax-case (cons 'list g$3456$18170) '() (list g$3456$18169 (list 'syntax g$3456$18171))))))) g$3456$18163) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18161 '())))) ((lambda (g$3456$18175) (if (g$3456$13220 g$3456$18175) (begin '#f ((lambda (g$3456$18177) (if g$3456$18177 (begin '#f ((lambda (g$3456$18179) (if g$3456$18179 (begin '#f (append g$3456$18177 g$3456$18179)) '#f)) ((lambda (g$3456$18181) (if (g$3456$13220 g$3456$18181) (begin '#f ((lambda (g$3456$18183) (if g$3456$18183 (begin '#f ((lambda (g$3456$18185) (if g$3456$18185 (begin '#f (append g$3456$18183 g$3456$18185)) '#f)) ((lambda (g$3456$18187) (if (equal? (g$3456$13254 g$3456$18187) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18181)))) '#f)) ((lambda (g$3456$18189) (list g$3456$18189)) (g$3456$13228 g$3456$18181)))) '#f)) (g$3456$13232 g$3456$18175)))) '#f)) ((lambda (g$3456$18191) '()) (g$3456$13228 g$3456$18175)))) '#f)) g$3456$18161))) g$3456$18159)))) '#f)))) (set! g$3456$13563 (lambda (g$3456$18193) (error 'expander '"define-struct not supported" (g$3456$13252 g$3456$18193 '())))) (set! g$3456$13565 (lambda (g$3456$18195) ((lambda (g$3456$18197 g$3456$18199 g$3456$18201 g$3456$18203 g$3456$18205 g$3456$18207 g$3456$18209 g$3456$18211 g$3456$18213 g$3456$18215 g$3456$18217 g$3456$18219 g$3456$18221 g$3456$18223) (begin (set! g$3456$18197 (lambda (g$3456$19245 . g$3456$19247) (g$3456$13714 g$3456$19245 (string->symbol (apply string-append (map (lambda (g$3456$19249) (if (symbol? g$3456$19249) (symbol->string g$3456$19249) (if (string? g$3456$19249) g$3456$19249 (error 'define-record-type '"BUG")))) g$3456$19247)))))) (set! g$3456$18199 (lambda (g$3456$19191) ((lambda (g$3456$19193) ((lambda (g$3456$19195) (if (if g$3456$19195 (begin '#f (apply (lambda (g$3456$19197 g$3456$19198 g$3456$19199) '#t) g$3456$19195)) '#f) (apply (lambda (g$3456$19203 g$3456$19204 g$3456$19205) g$3456$19203) g$3456$19195) ((lambda (g$3456$19209) ((lambda (g$3456$19211) (if (if g$3456$19211 (begin '#f (apply (lambda (g$3456$19213) '#t) g$3456$19211)) '#f) (apply (lambda (g$3456$19215) g$3456$19215) g$3456$19211) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19209 '())))) ((lambda (g$3456$19217) (list g$3456$19217)) g$3456$19209))) g$3456$19193))) ((lambda (g$3456$19219) (if (g$3456$13220 g$3456$19219) (begin '#f ((lambda (g$3456$19221) (if g$3456$19221 (begin '#f ((lambda (g$3456$19223) (if g$3456$19223 (begin '#f (append g$3456$19221 g$3456$19223)) '#f)) ((lambda (g$3456$19225) (if (g$3456$13220 g$3456$19225) (begin '#f ((lambda (g$3456$19227) (if g$3456$19227 (begin '#f ((lambda (g$3456$19229) (if g$3456$19229 (begin '#f (append g$3456$19227 g$3456$19229)) '#f)) ((lambda (g$3456$19231) (if (g$3456$13220 g$3456$19231) (begin '#f ((lambda (g$3456$19233) (if g$3456$19233 (begin '#f ((lambda (g$3456$19235) (if g$3456$19235 (begin '#f (append g$3456$19233 g$3456$19235)) '#f)) ((lambda (g$3456$19237) (if (equal? (g$3456$13254 g$3456$19237) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$19231)))) '#f)) ((lambda (g$3456$19239) (list g$3456$19239)) (g$3456$13228 g$3456$19231)))) '#f)) (g$3456$13232 g$3456$19225)))) '#f)) ((lambda (g$3456$19241) (list g$3456$19241)) (g$3456$13228 g$3456$19225)))) '#f)) (g$3456$13232 g$3456$19219)))) '#f)) ((lambda (g$3456$19243) (list g$3456$19243)) (g$3456$13228 g$3456$19219)))) '#f)) g$3456$19193))) g$3456$19191))) (set! g$3456$18201 (lambda (g$3456$19135 g$3456$19136) ((lambda (g$3456$19139) ((lambda (g$3456$19141) (if (if g$3456$19141 (begin '#f (apply (lambda (g$3456$19143 g$3456$19144 g$3456$19145) '#t) g$3456$19141)) '#f) (apply (lambda (g$3456$19149 g$3456$19150 g$3456$19151) g$3456$19150) g$3456$19141) ((lambda (g$3456$19155) ((lambda (g$3456$19157) (if (if g$3456$19157 (begin '#f (apply (lambda (g$3456$19159) '#t) g$3456$19157)) '#f) (apply (lambda (g$3456$19161) (g$3456$18197 g$3456$19136 '"make-" (g$3456$13254 g$3456$19161))) g$3456$19157) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19155 '())))) ((lambda (g$3456$19163) (list g$3456$19163)) g$3456$19155))) g$3456$19139))) ((lambda (g$3456$19165) (if (g$3456$13220 g$3456$19165) (begin '#f ((lambda (g$3456$19167) (if g$3456$19167 (begin '#f ((lambda (g$3456$19169) (if g$3456$19169 (begin '#f (append g$3456$19167 g$3456$19169)) '#f)) ((lambda (g$3456$19171) (if (g$3456$13220 g$3456$19171) (begin '#f ((lambda (g$3456$19173) (if g$3456$19173 (begin '#f ((lambda (g$3456$19175) (if g$3456$19175 (begin '#f (append g$3456$19173 g$3456$19175)) '#f)) ((lambda (g$3456$19177) (if (g$3456$13220 g$3456$19177) (begin '#f ((lambda (g$3456$19179) (if g$3456$19179 (begin '#f ((lambda (g$3456$19181) (if g$3456$19181 (begin '#f (append g$3456$19179 g$3456$19181)) '#f)) ((lambda (g$3456$19183) (if (equal? (g$3456$13254 g$3456$19183) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$19177)))) '#f)) ((lambda (g$3456$19185) (list g$3456$19185)) (g$3456$13228 g$3456$19177)))) '#f)) (g$3456$13232 g$3456$19171)))) '#f)) ((lambda (g$3456$19187) (list g$3456$19187)) (g$3456$13228 g$3456$19171)))) '#f)) (g$3456$13232 g$3456$19165)))) '#f)) ((lambda (g$3456$19189) (list g$3456$19189)) (g$3456$13228 g$3456$19165)))) '#f)) g$3456$19139))) g$3456$19135))) (set! g$3456$18203 (lambda (g$3456$19079 g$3456$19080) ((lambda (g$3456$19083) ((lambda (g$3456$19085) (if (if g$3456$19085 (begin '#f (apply (lambda (g$3456$19087 g$3456$19088 g$3456$19089) '#t) g$3456$19085)) '#f) (apply (lambda (g$3456$19093 g$3456$19094 g$3456$19095) g$3456$19095) g$3456$19085) ((lambda (g$3456$19099) ((lambda (g$3456$19101) (if (if g$3456$19101 (begin '#f (apply (lambda (g$3456$19103) '#t) g$3456$19101)) '#f) (apply (lambda (g$3456$19105) (g$3456$18197 g$3456$19080 (g$3456$13254 g$3456$19105) '"?")) g$3456$19101) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19099 '())))) ((lambda (g$3456$19107) (list g$3456$19107)) g$3456$19099))) g$3456$19083))) ((lambda (g$3456$19109) (if (g$3456$13220 g$3456$19109) (begin '#f ((lambda (g$3456$19111) (if g$3456$19111 (begin '#f ((lambda (g$3456$19113) (if g$3456$19113 (begin '#f (append g$3456$19111 g$3456$19113)) '#f)) ((lambda (g$3456$19115) (if (g$3456$13220 g$3456$19115) (begin '#f ((lambda (g$3456$19117) (if g$3456$19117 (begin '#f ((lambda (g$3456$19119) (if g$3456$19119 (begin '#f (append g$3456$19117 g$3456$19119)) '#f)) ((lambda (g$3456$19121) (if (g$3456$13220 g$3456$19121) (begin '#f ((lambda (g$3456$19123) (if g$3456$19123 (begin '#f ((lambda (g$3456$19125) (if g$3456$19125 (begin '#f (append g$3456$19123 g$3456$19125)) '#f)) ((lambda (g$3456$19127) (if (equal? (g$3456$13254 g$3456$19127) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$19121)))) '#f)) ((lambda (g$3456$19129) (list g$3456$19129)) (g$3456$13228 g$3456$19121)))) '#f)) (g$3456$13232 g$3456$19115)))) '#f)) ((lambda (g$3456$19131) (list g$3456$19131)) (g$3456$13228 g$3456$19115)))) '#f)) (g$3456$13232 g$3456$19109)))) '#f)) ((lambda (g$3456$19133) (list g$3456$19133)) (g$3456$13228 g$3456$19109)))) '#f)) g$3456$19083))) g$3456$19079))) (set! g$3456$18205 (lambda (g$3456$19035 g$3456$19036) ((lambda (g$3456$19039) ((lambda (g$3456$19041) (if (if g$3456$19041 (begin '#f (apply (lambda () '#t) g$3456$19041)) '#f) (apply (lambda () '#f) g$3456$19041) ((lambda (g$3456$19043) ((lambda (g$3456$19045) (if (if g$3456$19045 (begin '#f (apply (lambda (g$3456$19047 g$3456$19048 g$3456$19049) '#t) g$3456$19045)) '#f) (apply (lambda (g$3456$19053 g$3456$19054 g$3456$19055) (if (g$3456$13242 (g$3456$13521 g$3456$19035) g$3456$19053) (cons g$3456$19053 g$3456$19054) (g$3456$18205 g$3456$19035 g$3456$19055))) g$3456$19045) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19043 '())))) ((lambda (g$3456$19059) (if (g$3456$13220 g$3456$19059) (begin '#f ((lambda (g$3456$19061) (if g$3456$19061 (begin '#f ((lambda (g$3456$19063) (if g$3456$19063 (begin '#f (append g$3456$19061 g$3456$19063)) '#f)) ((lambda (g$3456$19065) (list g$3456$19065)) (g$3456$13232 g$3456$19059)))) '#f)) ((lambda (g$3456$19067) (if (g$3456$13220 g$3456$19067) (begin '#f ((lambda (g$3456$19069) (if g$3456$19069 (begin '#f ((lambda (g$3456$19071) (if g$3456$19071 (begin '#f (append g$3456$19069 g$3456$19071)) '#f)) ((lambda (g$3456$19073) (list g$3456$19073)) (g$3456$13232 g$3456$19067)))) '#f)) ((lambda (g$3456$19075) (list g$3456$19075)) (g$3456$13228 g$3456$19067)))) '#f)) (g$3456$13228 g$3456$19059)))) '#f)) g$3456$19043))) g$3456$19039))) ((lambda (g$3456$19077) (if (equal? (g$3456$13254 g$3456$19077) '()) (begin '#f '()) '#f)) g$3456$19039))) g$3456$19036))) (set! g$3456$18207 (lambda (g$3456$18777 g$3456$18778 g$3456$18779) ((lambda (g$3456$18783) (begin (set! g$3456$18783 (lambda (g$3456$18785) (list->vector (map (lambda (g$3456$18787) ((lambda (g$3456$18789) ((lambda (g$3456$18791) (if (if g$3456$18791 (begin '#f (apply (lambda (g$3456$18793 g$3456$18794) '#t) g$3456$18791)) '#f) (apply (lambda (g$3456$18797 g$3456$18798) (list 'mutable g$3456$18797)) g$3456$18791) ((lambda (g$3456$18801) ((lambda (g$3456$18803) (if (if g$3456$18803 (begin '#f (apply (lambda (g$3456$18805 g$3456$18806) '#t) g$3456$18803)) '#f) (apply (lambda (g$3456$18809 g$3456$18810) (list 'immutable g$3456$18809)) g$3456$18803) ((lambda (g$3456$18813) ((lambda (g$3456$18815) (if (if g$3456$18815 (begin '#f (apply (lambda (g$3456$18817) '#t) g$3456$18815)) '#f) (apply (lambda (g$3456$18819) (list 'immutable g$3456$18819)) g$3456$18815) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18813 '())))) ((lambda (g$3456$18821) (list g$3456$18821)) g$3456$18813))) g$3456$18801))) ((lambda (g$3456$18823) (if (g$3456$13220 g$3456$18823) (begin '#f ((lambda (g$3456$18825) (if g$3456$18825 (begin '#f ((lambda (g$3456$18827) (if g$3456$18827 (begin '#f (append g$3456$18825 g$3456$18827)) '#f)) ((lambda (g$3456$18829) (if (g$3456$13220 g$3456$18829) (begin '#f ((lambda (g$3456$18831) (if g$3456$18831 (begin '#f ((lambda (g$3456$18833) (if g$3456$18833 (begin '#f (append g$3456$18831 g$3456$18833)) '#f)) ((lambda (g$3456$18835) (list g$3456$18835)) (g$3456$13232 g$3456$18829)))) '#f)) ((lambda (g$3456$18837) (list g$3456$18837)) (g$3456$13228 g$3456$18829)))) '#f)) (g$3456$13232 g$3456$18823)))) '#f)) ((lambda (g$3456$18839) (if (g$3456$13234 g$3456$18839) (if (g$3456$13242 g$3456$18839 (g$3456$13487 'immutable)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18823)))) '#f)) g$3456$18801))) g$3456$18789))) ((lambda (g$3456$18841) (if (g$3456$13220 g$3456$18841) (begin '#f ((lambda (g$3456$18843) (if g$3456$18843 (begin '#f ((lambda (g$3456$18845) (if g$3456$18845 (begin '#f (append g$3456$18843 g$3456$18845)) '#f)) ((lambda (g$3456$18847) (if (g$3456$13220 g$3456$18847) (begin '#f ((lambda (g$3456$18849) (if g$3456$18849 (begin '#f ((lambda (g$3456$18851) (if g$3456$18851 (begin '#f (append g$3456$18849 g$3456$18851)) '#f)) ((lambda (g$3456$18853) (list g$3456$18853)) (g$3456$13232 g$3456$18847)))) '#f)) ((lambda (g$3456$18855) (list g$3456$18855)) (g$3456$13228 g$3456$18847)))) '#f)) (g$3456$13232 g$3456$18841)))) '#f)) ((lambda (g$3456$18857) (if (g$3456$13234 g$3456$18857) (if (g$3456$13242 g$3456$18857 (g$3456$13487 'mutable)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18841)))) '#f)) g$3456$18789))) g$3456$18787)) g$3456$18785)))) ((lambda (g$3456$18859 g$3456$18860 g$3456$18861 g$3456$18862 g$3456$18863) (g$3456$13521 (list 'make-record-type-descriptor (list 'quote g$3456$18778) g$3456$18859 g$3456$18860 g$3456$18861 g$3456$18862 g$3456$18863))) ((lambda (g$3456$18869) ((lambda (g$3456$18871) (if (if g$3456$18871 (begin '#f (apply (lambda (g$3456$18873) '#t) g$3456$18871)) '#f) (apply (lambda (g$3456$18875) (list 'record-type-descriptor g$3456$18875)) g$3456$18871) ((lambda (g$3456$18877) ((lambda (g$3456$18879) (if (if g$3456$18879 (begin '#f (apply (lambda () '#t) g$3456$18879)) '#f) (apply (lambda () '#f) g$3456$18879) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18877 '())))) ((lambda (g$3456$18881) '()) g$3456$18877))) g$3456$18869))) ((lambda (g$3456$18883) (if (g$3456$13220 g$3456$18883) (begin '#f ((lambda (g$3456$18885) (if g$3456$18885 (begin '#f ((lambda (g$3456$18887) (if g$3456$18887 (begin '#f (append g$3456$18885 g$3456$18887)) '#f)) ((lambda (g$3456$18889) (if (g$3456$13220 g$3456$18889) (begin '#f ((lambda (g$3456$18891) (if g$3456$18891 (begin '#f ((lambda (g$3456$18893) (if g$3456$18893 (begin '#f (append g$3456$18891 g$3456$18893)) '#f)) ((lambda (g$3456$18895) (if (equal? (g$3456$13254 g$3456$18895) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18889)))) '#f)) ((lambda (g$3456$18897) (list g$3456$18897)) (g$3456$13228 g$3456$18889)))) '#f)) (g$3456$13232 g$3456$18883)))) '#f)) ((lambda (g$3456$18899) '()) (g$3456$13228 g$3456$18883)))) '#f)) g$3456$18869))) (g$3456$18205 'parent g$3456$18779)) ((lambda (g$3456$18901) ((lambda (g$3456$18903) (if (if g$3456$18903 (begin '#f (apply (lambda () '#t) g$3456$18903)) '#f) (apply (lambda () (list 'quote (gensym))) g$3456$18903) ((lambda (g$3456$18905) ((lambda (g$3456$18907) (if (if g$3456$18907 (begin '#f (apply (lambda (g$3456$18909) '#t) g$3456$18907)) '#f) (apply (lambda (g$3456$18911) (list 'quote g$3456$18911)) g$3456$18907) ((lambda (g$3456$18913) ((lambda (g$3456$18915) (if (if g$3456$18915 (begin '#f (apply (lambda () '#t) g$3456$18915)) '#f) (apply (lambda () '#f) g$3456$18915) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18913 '())))) ((lambda (g$3456$18917) '()) g$3456$18913))) g$3456$18905))) ((lambda (g$3456$18919) (if (g$3456$13220 g$3456$18919) (begin '#f ((lambda (g$3456$18921) (if g$3456$18921 (begin '#f ((lambda (g$3456$18923) (if g$3456$18923 (begin '#f (append g$3456$18921 g$3456$18923)) '#f)) ((lambda (g$3456$18925) (if (g$3456$13220 g$3456$18925) (begin '#f ((lambda (g$3456$18927) (if g$3456$18927 (begin '#f ((lambda (g$3456$18929) (if g$3456$18929 (begin '#f (append g$3456$18927 g$3456$18929)) '#f)) ((lambda (g$3456$18931) (if (equal? (g$3456$13254 g$3456$18931) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18925)))) '#f)) ((lambda (g$3456$18933) (list g$3456$18933)) (g$3456$13228 g$3456$18925)))) '#f)) (g$3456$13232 g$3456$18919)))) '#f)) ((lambda (g$3456$18935) '()) (g$3456$13228 g$3456$18919)))) '#f)) g$3456$18905))) g$3456$18901))) ((lambda (g$3456$18937) (if (g$3456$13220 g$3456$18937) (begin '#f ((lambda (g$3456$18939) (if g$3456$18939 (begin '#f ((lambda (g$3456$18941) (if g$3456$18941 (begin '#f (append g$3456$18939 g$3456$18941)) '#f)) ((lambda (g$3456$18943) (if (equal? (g$3456$13254 g$3456$18943) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18937)))) '#f)) ((lambda (g$3456$18945) '()) (g$3456$13228 g$3456$18937)))) '#f)) g$3456$18901))) (g$3456$18205 'nongenerative g$3456$18779)) ((lambda (g$3456$18947) ((lambda (g$3456$18949) (if (if g$3456$18949 (begin '#f (apply (lambda () '#t) g$3456$18949)) '#f) (apply (lambda () '#t) g$3456$18949) ((lambda (g$3456$18951) ((lambda (g$3456$18953) (if (if g$3456$18953 (begin '#f (apply (lambda () '#t) g$3456$18953)) '#f) (apply (lambda () '#f) g$3456$18953) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18951 '())))) ((lambda (g$3456$18955) '()) g$3456$18951))) g$3456$18947))) ((lambda (g$3456$18957) (if (g$3456$13220 g$3456$18957) (begin '#f ((lambda (g$3456$18959) (if g$3456$18959 (begin '#f ((lambda (g$3456$18961) (if g$3456$18961 (begin '#f (append g$3456$18959 g$3456$18961)) '#f)) ((lambda (g$3456$18963) (if (g$3456$13220 g$3456$18963) (begin '#f ((lambda (g$3456$18965) (if g$3456$18965 (begin '#f ((lambda (g$3456$18967) (if g$3456$18967 (begin '#f (append g$3456$18965 g$3456$18967)) '#f)) ((lambda (g$3456$18969) (if (equal? (g$3456$13254 g$3456$18969) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18963)))) '#f)) ((lambda (g$3456$18971) (if (equal? (g$3456$13254 g$3456$18971) '#t) (begin '#f '()) '#f)) (g$3456$13228 g$3456$18963)))) '#f)) (g$3456$13232 g$3456$18957)))) '#f)) ((lambda (g$3456$18973) '()) (g$3456$13228 g$3456$18957)))) '#f)) g$3456$18947))) (g$3456$18205 'sealed? g$3456$18779)) ((lambda (g$3456$18975) ((lambda (g$3456$18977) (if (if g$3456$18977 (begin '#f (apply (lambda () '#t) g$3456$18977)) '#f) (apply (lambda () '#t) g$3456$18977) ((lambda (g$3456$18979) ((lambda (g$3456$18981) (if (if g$3456$18981 (begin '#f (apply (lambda () '#t) g$3456$18981)) '#f) (apply (lambda () '#f) g$3456$18981) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18979 '())))) ((lambda (g$3456$18983) '()) g$3456$18979))) g$3456$18975))) ((lambda (g$3456$18985) (if (g$3456$13220 g$3456$18985) (begin '#f ((lambda (g$3456$18987) (if g$3456$18987 (begin '#f ((lambda (g$3456$18989) (if g$3456$18989 (begin '#f (append g$3456$18987 g$3456$18989)) '#f)) ((lambda (g$3456$18991) (if (g$3456$13220 g$3456$18991) (begin '#f ((lambda (g$3456$18993) (if g$3456$18993 (begin '#f ((lambda (g$3456$18995) (if g$3456$18995 (begin '#f (append g$3456$18993 g$3456$18995)) '#f)) ((lambda (g$3456$18997) (if (equal? (g$3456$13254 g$3456$18997) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18991)))) '#f)) ((lambda (g$3456$18999) (if (equal? (g$3456$13254 g$3456$18999) '#t) (begin '#f '()) '#f)) (g$3456$13228 g$3456$18991)))) '#f)) (g$3456$13232 g$3456$18985)))) '#f)) ((lambda (g$3456$19001) '()) (g$3456$13228 g$3456$18985)))) '#f)) g$3456$18975))) (g$3456$18205 'opaque? g$3456$18779)) ((lambda (g$3456$19003) ((lambda (g$3456$19005) (if (if g$3456$19005 (begin '#f (apply (lambda (g$3456$19007) '#t) g$3456$19005)) '#f) (apply (lambda (g$3456$19009) (list 'quote (g$3456$18783 g$3456$19009))) g$3456$19005) ((lambda (g$3456$19011) ((lambda (g$3456$19013) (if (if g$3456$19013 (begin '#f (apply (lambda () '#t) g$3456$19013)) '#f) (apply (lambda () ''#()) g$3456$19013) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19011 '())))) ((lambda (g$3456$19015) '()) g$3456$19011))) g$3456$19003))) ((lambda (g$3456$19017) (if (g$3456$13220 g$3456$19017) (begin '#f ((lambda (g$3456$19019) (if g$3456$19019 (begin '#f ((lambda (g$3456$19021) (if g$3456$19021 (begin '#f (append g$3456$19019 g$3456$19021)) '#f)) ((letrec ((g$3456$19023 (lambda (g$3456$19025) (if (g$3456$13220 g$3456$19025) ((lambda (g$3456$19027) (if g$3456$19027 (begin '#f ((lambda (g$3456$19029) (if g$3456$19029 (begin '#f (map cons g$3456$19027 g$3456$19029)) '#f)) (g$3456$19023 (g$3456$13232 g$3456$19025)))) '#f)) ((lambda (g$3456$19031) (list g$3456$19031)) (g$3456$13228 g$3456$19025))) (if (g$3456$13224 g$3456$19025) (list (begin 'field-spec* '())) '#f))))) g$3456$19023) (g$3456$13232 g$3456$19017)))) '#f)) ((lambda (g$3456$19033) '()) (g$3456$13228 g$3456$19017)))) '#f)) g$3456$19003))) (g$3456$18205 'fields g$3456$18779))))) '#f))) (set! g$3456$18209 (lambda (g$3456$18737 g$3456$18738 g$3456$18739) ((lambda (g$3456$18743) (list 'make-record-constructor-descriptor g$3456$18738 g$3456$18743 g$3456$18739)) ((lambda (g$3456$18745) ((lambda (g$3456$18747) (if (if g$3456$18747 (begin '#f (apply (lambda (g$3456$18749) '#t) g$3456$18747)) '#f) (apply (lambda (g$3456$18751) (list 'record-constructor-descriptor g$3456$18751)) g$3456$18747) ((lambda (g$3456$18753) ((lambda (g$3456$18755) (if (if g$3456$18755 (begin '#f (apply (lambda () '#t) g$3456$18755)) '#f) (apply (lambda () '#f) g$3456$18755) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18753 '())))) ((lambda (g$3456$18757) '()) g$3456$18753))) g$3456$18745))) ((lambda (g$3456$18759) (if (g$3456$13220 g$3456$18759) (begin '#f ((lambda (g$3456$18761) (if g$3456$18761 (begin '#f ((lambda (g$3456$18763) (if g$3456$18763 (begin '#f (append g$3456$18761 g$3456$18763)) '#f)) ((lambda (g$3456$18765) (if (g$3456$13220 g$3456$18765) (begin '#f ((lambda (g$3456$18767) (if g$3456$18767 (begin '#f ((lambda (g$3456$18769) (if g$3456$18769 (begin '#f (append g$3456$18767 g$3456$18769)) '#f)) ((lambda (g$3456$18771) (if (equal? (g$3456$13254 g$3456$18771) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18765)))) '#f)) ((lambda (g$3456$18773) (list g$3456$18773)) (g$3456$13228 g$3456$18765)))) '#f)) (g$3456$13232 g$3456$18759)))) '#f)) ((lambda (g$3456$18775) '()) (g$3456$13228 g$3456$18759)))) '#f)) g$3456$18745))) (g$3456$18205 'parent g$3456$18737))))) (set! g$3456$18211 (lambda (g$3456$18703) ((lambda (g$3456$18705) ((lambda (g$3456$18707) (if (if g$3456$18707 (begin '#f (apply (lambda (g$3456$18709) '#t) g$3456$18707)) '#f) (apply (lambda (g$3456$18711) g$3456$18711) g$3456$18707) ((lambda (g$3456$18713) ((lambda (g$3456$18715) (if (if g$3456$18715 (begin '#f (apply (lambda () '#t) g$3456$18715)) '#f) (apply (lambda () '#f) g$3456$18715) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18713 '())))) ((lambda (g$3456$18717) '()) g$3456$18713))) g$3456$18705))) ((lambda (g$3456$18719) (if (g$3456$13220 g$3456$18719) (begin '#f ((lambda (g$3456$18721) (if g$3456$18721 (begin '#f ((lambda (g$3456$18723) (if g$3456$18723 (begin '#f (append g$3456$18721 g$3456$18723)) '#f)) ((lambda (g$3456$18725) (if (g$3456$13220 g$3456$18725) (begin '#f ((lambda (g$3456$18727) (if g$3456$18727 (begin '#f ((lambda (g$3456$18729) (if g$3456$18729 (begin '#f (append g$3456$18727 g$3456$18729)) '#f)) ((lambda (g$3456$18731) (if (equal? (g$3456$13254 g$3456$18731) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18725)))) '#f)) ((lambda (g$3456$18733) (list g$3456$18733)) (g$3456$13228 g$3456$18725)))) '#f)) (g$3456$13232 g$3456$18719)))) '#f)) ((lambda (g$3456$18735) '()) (g$3456$13228 g$3456$18719)))) '#f)) g$3456$18705))) (g$3456$18205 'protocol g$3456$18703)))) (set! g$3456$18213 (lambda (g$3456$18643) ((lambda (g$3456$18645) ((lambda (g$3456$18647) (if (if g$3456$18647 (begin '#f (apply (lambda () '#t) g$3456$18647)) '#f) (apply (lambda () '()) g$3456$18647) ((lambda (g$3456$18649) ((lambda (g$3456$18651) (if (if g$3456$18651 (begin '#f (apply (lambda (g$3456$18653) '#t) g$3456$18651)) '#f) (apply (lambda (g$3456$18655) g$3456$18655) g$3456$18651) ((lambda (g$3456$18657) ((lambda (g$3456$18659) (if (if g$3456$18659 (begin '#f (apply (lambda (g$3456$18661) '#t) g$3456$18659)) '#f) (apply (lambda (g$3456$18663) (g$3456$18213 g$3456$18663)) g$3456$18659) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18657 '())))) ((lambda (g$3456$18665) (if (g$3456$13220 g$3456$18665) (begin '#f ((lambda (g$3456$18667) (if g$3456$18667 (begin '#f ((lambda (g$3456$18669) (if g$3456$18669 (begin '#f (append g$3456$18667 g$3456$18669)) '#f)) ((lambda (g$3456$18671) (list g$3456$18671)) (g$3456$13232 g$3456$18665)))) '#f)) ((lambda (g$3456$18673) '()) (g$3456$13228 g$3456$18665)))) '#f)) g$3456$18657))) g$3456$18649))) ((lambda (g$3456$18675) (if (g$3456$13220 g$3456$18675) (begin '#f ((lambda (g$3456$18677) (if g$3456$18677 (begin '#f ((lambda (g$3456$18679) (if g$3456$18679 (begin '#f (append g$3456$18677 g$3456$18679)) '#f)) ((lambda (g$3456$18681) '()) (g$3456$13232 g$3456$18675)))) '#f)) ((lambda (g$3456$18683) (if (g$3456$13220 g$3456$18683) (begin '#f ((lambda (g$3456$18685) (if g$3456$18685 (begin '#f ((lambda (g$3456$18687) (if g$3456$18687 (begin '#f (append g$3456$18685 g$3456$18687)) '#f)) ((letrec ((g$3456$18689 (lambda (g$3456$18691) (if (g$3456$13220 g$3456$18691) ((lambda (g$3456$18693) (if g$3456$18693 (begin '#f ((lambda (g$3456$18695) (if g$3456$18695 (begin '#f (map cons g$3456$18693 g$3456$18695)) '#f)) (g$3456$18689 (g$3456$13232 g$3456$18691)))) '#f)) ((lambda (g$3456$18697) (list g$3456$18697)) (g$3456$13228 g$3456$18691))) (if (g$3456$13224 g$3456$18691) (list (begin 'f* '())) '#f))))) g$3456$18689) (g$3456$13232 g$3456$18683)))) '#f)) ((lambda (g$3456$18699) (if (g$3456$13234 g$3456$18699) (if (g$3456$13242 g$3456$18699 (g$3456$13487 'fields)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18683)))) '#f)) (g$3456$13228 g$3456$18675)))) '#f)) g$3456$18649))) g$3456$18645))) ((lambda (g$3456$18701) (if (equal? (g$3456$13254 g$3456$18701) '()) (begin '#f '()) '#f)) g$3456$18645))) g$3456$18643))) (set! g$3456$18215 (lambda (g$3456$18585) (letrec ((g$3456$18587 (lambda (g$3456$18589 g$3456$18590) ((lambda (g$3456$18593) ((lambda (g$3456$18595) (if (if g$3456$18595 (begin '#f (apply (lambda () '#t) g$3456$18595)) '#f) (apply (lambda () '()) g$3456$18595) ((lambda (g$3456$18597) ((lambda (g$3456$18599) (if (if g$3456$18599 (begin '#f (apply (lambda (g$3456$18601) '#t) g$3456$18599)) '#f) (apply (lambda (g$3456$18603) (cons g$3456$18590 (g$3456$18587 g$3456$18603 (+ g$3456$18590 '1)))) g$3456$18599) ((lambda (g$3456$18605) ((lambda (g$3456$18607) (if (if g$3456$18607 (begin '#f (apply (lambda (g$3456$18609) '#t) g$3456$18607)) '#f) (apply (lambda (g$3456$18611) (g$3456$18587 g$3456$18611 (+ g$3456$18590 '1))) g$3456$18607) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18605 '())))) ((lambda (g$3456$18613) (if (g$3456$13220 g$3456$18613) (begin '#f ((lambda (g$3456$18615) (if g$3456$18615 (begin '#f ((lambda (g$3456$18617) (if g$3456$18617 (begin '#f (append g$3456$18615 g$3456$18617)) '#f)) ((lambda (g$3456$18619) (list g$3456$18619)) (g$3456$13232 g$3456$18613)))) '#f)) ((lambda (g$3456$18621) '()) (g$3456$13228 g$3456$18613)))) '#f)) g$3456$18605))) g$3456$18597))) ((lambda (g$3456$18623) (if (g$3456$13220 g$3456$18623) (begin '#f ((lambda (g$3456$18625) (if g$3456$18625 (begin '#f ((lambda (g$3456$18627) (if g$3456$18627 (begin '#f (append g$3456$18625 g$3456$18627)) '#f)) ((lambda (g$3456$18629) (list g$3456$18629)) (g$3456$13232 g$3456$18623)))) '#f)) ((lambda (g$3456$18631) (if (g$3456$13220 g$3456$18631) (begin '#f ((lambda (g$3456$18633) (if g$3456$18633 (begin '#f ((lambda (g$3456$18635) (if g$3456$18635 (begin '#f (append g$3456$18633 g$3456$18635)) '#f)) ((lambda (g$3456$18637) '()) (g$3456$13232 g$3456$18631)))) '#f)) ((lambda (g$3456$18639) (if (g$3456$13234 g$3456$18639) (if (g$3456$13242 g$3456$18639 (g$3456$13487 'mutable)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18631)))) '#f)) (g$3456$13228 g$3456$18623)))) '#f)) g$3456$18597))) g$3456$18593))) ((lambda (g$3456$18641) (if (equal? (g$3456$13254 g$3456$18641) '()) (begin '#f '()) '#f)) g$3456$18593))) g$3456$18589)))) (g$3456$18587 g$3456$18585 '0)))) (set! g$3456$18217 (lambda (g$3456$18447 g$3456$18448 g$3456$18449) ((lambda (g$3456$18453) (begin (set! g$3456$18453 (lambda (g$3456$18455) (g$3456$13714 g$3456$18449 (string->symbol (string-append '"set-" (symbol->string (g$3456$13716 g$3456$18447)) '"-" (symbol->string (g$3456$13716 g$3456$18455)) '"!"))))) (letrec ((g$3456$18457 (lambda (g$3456$18459) ((lambda (g$3456$18461) ((lambda (g$3456$18463) (if (if g$3456$18463 (begin '#f (apply (lambda () '#t) g$3456$18463)) '#f) (apply (lambda () '()) g$3456$18463) ((lambda (g$3456$18465) ((lambda (g$3456$18467) (if (if g$3456$18467 (begin '#f (apply (lambda (g$3456$18469 g$3456$18470 g$3456$18471 g$3456$18472) '#t) g$3456$18467)) '#f) (apply (lambda (g$3456$18477 g$3456$18478 g$3456$18479 g$3456$18480) (cons g$3456$18479 (g$3456$18457 g$3456$18480))) g$3456$18467) ((lambda (g$3456$18485) ((lambda (g$3456$18487) (if (if g$3456$18487 (begin '#f (apply (lambda (g$3456$18489 g$3456$18490) '#t) g$3456$18487)) '#f) (apply (lambda (g$3456$18493 g$3456$18494) (cons (g$3456$18453 g$3456$18493) (g$3456$18457 g$3456$18494))) g$3456$18487) ((lambda (g$3456$18497) ((lambda (g$3456$18499) (if (if g$3456$18499 (begin '#f (apply (lambda (g$3456$18501) '#t) g$3456$18499)) '#f) (apply (lambda (g$3456$18503) (g$3456$18457 g$3456$18503)) g$3456$18499) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18497 '())))) ((lambda (g$3456$18505) (if (g$3456$13220 g$3456$18505) (begin '#f ((lambda (g$3456$18507) (if g$3456$18507 (begin '#f ((lambda (g$3456$18509) (if g$3456$18509 (begin '#f (append g$3456$18507 g$3456$18509)) '#f)) ((lambda (g$3456$18511) (list g$3456$18511)) (g$3456$13232 g$3456$18505)))) '#f)) ((lambda (g$3456$18513) '()) (g$3456$13228 g$3456$18505)))) '#f)) g$3456$18497))) g$3456$18485))) ((lambda (g$3456$18515) (if (g$3456$13220 g$3456$18515) (begin '#f ((lambda (g$3456$18517) (if g$3456$18517 (begin '#f ((lambda (g$3456$18519) (if g$3456$18519 (begin '#f (append g$3456$18517 g$3456$18519)) '#f)) ((lambda (g$3456$18521) (list g$3456$18521)) (g$3456$13232 g$3456$18515)))) '#f)) ((lambda (g$3456$18523) (if (g$3456$13220 g$3456$18523) (begin '#f ((lambda (g$3456$18525) (if g$3456$18525 (begin '#f ((lambda (g$3456$18527) (if g$3456$18527 (begin '#f (append g$3456$18525 g$3456$18527)) '#f)) ((lambda (g$3456$18529) (if (g$3456$13220 g$3456$18529) (begin '#f ((lambda (g$3456$18531) (if g$3456$18531 (begin '#f ((lambda (g$3456$18533) (if g$3456$18533 (begin '#f (append g$3456$18531 g$3456$18533)) '#f)) ((lambda (g$3456$18535) (if (equal? (g$3456$13254 g$3456$18535) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18529)))) '#f)) ((lambda (g$3456$18537) (list g$3456$18537)) (g$3456$13228 g$3456$18529)))) '#f)) (g$3456$13232 g$3456$18523)))) '#f)) ((lambda (g$3456$18539) (if (g$3456$13234 g$3456$18539) (if (g$3456$13242 g$3456$18539 (g$3456$13487 'mutable)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18523)))) '#f)) (g$3456$13228 g$3456$18515)))) '#f)) g$3456$18485))) g$3456$18465))) ((lambda (g$3456$18541) (if (g$3456$13220 g$3456$18541) (begin '#f ((lambda (g$3456$18543) (if g$3456$18543 (begin '#f ((lambda (g$3456$18545) (if g$3456$18545 (begin '#f (append g$3456$18543 g$3456$18545)) '#f)) ((lambda (g$3456$18547) (list g$3456$18547)) (g$3456$13232 g$3456$18541)))) '#f)) ((lambda (g$3456$18549) (if (g$3456$13220 g$3456$18549) (begin '#f ((lambda (g$3456$18551) (if g$3456$18551 (begin '#f ((lambda (g$3456$18553) (if g$3456$18553 (begin '#f (append g$3456$18551 g$3456$18553)) '#f)) ((lambda (g$3456$18555) (if (g$3456$13220 g$3456$18555) (begin '#f ((lambda (g$3456$18557) (if g$3456$18557 (begin '#f ((lambda (g$3456$18559) (if g$3456$18559 (begin '#f (append g$3456$18557 g$3456$18559)) '#f)) ((lambda (g$3456$18561) (if (g$3456$13220 g$3456$18561) (begin '#f ((lambda (g$3456$18563) (if g$3456$18563 (begin '#f ((lambda (g$3456$18565) (if g$3456$18565 (begin '#f (append g$3456$18563 g$3456$18565)) '#f)) ((lambda (g$3456$18567) (if (g$3456$13220 g$3456$18567) (begin '#f ((lambda (g$3456$18569) (if g$3456$18569 (begin '#f ((lambda (g$3456$18571) (if g$3456$18571 (begin '#f (append g$3456$18569 g$3456$18571)) '#f)) ((lambda (g$3456$18573) (if (equal? (g$3456$13254 g$3456$18573) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18567)))) '#f)) ((lambda (g$3456$18575) (list g$3456$18575)) (g$3456$13228 g$3456$18567)))) '#f)) (g$3456$13232 g$3456$18561)))) '#f)) ((lambda (g$3456$18577) (list g$3456$18577)) (g$3456$13228 g$3456$18561)))) '#f)) (g$3456$13232 g$3456$18555)))) '#f)) ((lambda (g$3456$18579) (list g$3456$18579)) (g$3456$13228 g$3456$18555)))) '#f)) (g$3456$13232 g$3456$18549)))) '#f)) ((lambda (g$3456$18581) (if (g$3456$13234 g$3456$18581) (if (g$3456$13242 g$3456$18581 (g$3456$13487 'mutable)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18549)))) '#f)) (g$3456$13228 g$3456$18541)))) '#f)) g$3456$18465))) g$3456$18461))) ((lambda (g$3456$18583) (if (equal? (g$3456$13254 g$3456$18583) '()) (begin '#f '()) '#f)) g$3456$18461))) g$3456$18459)))) (g$3456$18457 g$3456$18448)))) '#f))) (set! g$3456$18219 (lambda (g$3456$18275 g$3456$18276 g$3456$18277) ((lambda (g$3456$18281) (begin (set! g$3456$18281 (lambda (g$3456$18283) (g$3456$13714 g$3456$18277 (string->symbol (string-append (symbol->string (g$3456$13716 g$3456$18275)) '"-" (symbol->string (g$3456$13716 g$3456$18283))))))) (map (lambda (g$3456$18285) ((lambda (g$3456$18287) ((lambda (g$3456$18289) (if (if g$3456$18289 (begin '#f (apply (lambda (g$3456$18291 g$3456$18292 g$3456$18293) (g$3456$13234 g$3456$18292)) g$3456$18289)) '#f) (apply (lambda (g$3456$18297 g$3456$18298 g$3456$18299) g$3456$18298) g$3456$18289) ((lambda (g$3456$18303) ((lambda (g$3456$18305) (if (if g$3456$18305 (begin '#f (apply (lambda (g$3456$18307 g$3456$18308) (g$3456$13234 g$3456$18308)) g$3456$18305)) '#f) (apply (lambda (g$3456$18311 g$3456$18312) g$3456$18312) g$3456$18305) ((lambda (g$3456$18315) ((lambda (g$3456$18317) (if (if g$3456$18317 (begin '#f (apply (lambda (g$3456$18319) (g$3456$13234 g$3456$18319)) g$3456$18317)) '#f) (apply (lambda (g$3456$18321) (g$3456$18281 g$3456$18321)) g$3456$18317) ((lambda (g$3456$18323) ((lambda (g$3456$18325) (if (if g$3456$18325 (begin '#f (apply (lambda (g$3456$18327) (g$3456$13234 g$3456$18327)) g$3456$18325)) '#f) (apply (lambda (g$3456$18329) (g$3456$18281 g$3456$18329)) g$3456$18325) ((lambda (g$3456$18331) ((lambda (g$3456$18333) (if (if g$3456$18333 (begin '#f (apply (lambda (g$3456$18335) (g$3456$13234 g$3456$18335)) g$3456$18333)) '#f) (apply (lambda (g$3456$18337) (g$3456$18281 g$3456$18337)) g$3456$18333) ((lambda (g$3456$18339) ((lambda (g$3456$18341) (if (if g$3456$18341 (begin '#f (apply (lambda (g$3456$18343) '#t) g$3456$18341)) '#f) (apply (lambda (g$3456$18345) (error 'expander '"invalid field spec" (g$3456$13252 g$3456$18285 '()))) g$3456$18341) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$18339 '())))) ((lambda (g$3456$18347) (list g$3456$18347)) g$3456$18339))) g$3456$18331))) ((lambda (g$3456$18349) (list g$3456$18349)) g$3456$18331))) g$3456$18323))) ((lambda (g$3456$18351) (if (g$3456$13220 g$3456$18351) (begin '#f ((lambda (g$3456$18353) (if g$3456$18353 (begin '#f ((lambda (g$3456$18355) (if g$3456$18355 (begin '#f (append g$3456$18353 g$3456$18355)) '#f)) ((lambda (g$3456$18357) (if (g$3456$13220 g$3456$18357) (begin '#f ((lambda (g$3456$18359) (if g$3456$18359 (begin '#f ((lambda (g$3456$18361) (if g$3456$18361 (begin '#f (append g$3456$18359 g$3456$18361)) '#f)) ((lambda (g$3456$18363) (if (equal? (g$3456$13254 g$3456$18363) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18357)))) '#f)) ((lambda (g$3456$18365) (list g$3456$18365)) (g$3456$13228 g$3456$18357)))) '#f)) (g$3456$13232 g$3456$18351)))) '#f)) ((lambda (g$3456$18367) (if (g$3456$13234 g$3456$18367) (if (g$3456$13242 g$3456$18367 (g$3456$13487 'immutable)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18351)))) '#f)) g$3456$18323))) g$3456$18315))) ((lambda (g$3456$18369) (if (g$3456$13220 g$3456$18369) (begin '#f ((lambda (g$3456$18371) (if g$3456$18371 (begin '#f ((lambda (g$3456$18373) (if g$3456$18373 (begin '#f (append g$3456$18371 g$3456$18373)) '#f)) ((lambda (g$3456$18375) (if (g$3456$13220 g$3456$18375) (begin '#f ((lambda (g$3456$18377) (if g$3456$18377 (begin '#f ((lambda (g$3456$18379) (if g$3456$18379 (begin '#f (append g$3456$18377 g$3456$18379)) '#f)) ((lambda (g$3456$18381) (if (equal? (g$3456$13254 g$3456$18381) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18375)))) '#f)) ((lambda (g$3456$18383) (list g$3456$18383)) (g$3456$13228 g$3456$18375)))) '#f)) (g$3456$13232 g$3456$18369)))) '#f)) ((lambda (g$3456$18385) (if (g$3456$13234 g$3456$18385) (if (g$3456$13242 g$3456$18385 (g$3456$13487 'mutable)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18369)))) '#f)) g$3456$18315))) g$3456$18303))) ((lambda (g$3456$18387) (if (g$3456$13220 g$3456$18387) (begin '#f ((lambda (g$3456$18389) (if g$3456$18389 (begin '#f ((lambda (g$3456$18391) (if g$3456$18391 (begin '#f (append g$3456$18389 g$3456$18391)) '#f)) ((lambda (g$3456$18393) (if (g$3456$13220 g$3456$18393) (begin '#f ((lambda (g$3456$18395) (if g$3456$18395 (begin '#f ((lambda (g$3456$18397) (if g$3456$18397 (begin '#f (append g$3456$18395 g$3456$18397)) '#f)) ((lambda (g$3456$18399) (if (g$3456$13220 g$3456$18399) (begin '#f ((lambda (g$3456$18401) (if g$3456$18401 (begin '#f ((lambda (g$3456$18403) (if g$3456$18403 (begin '#f (append g$3456$18401 g$3456$18403)) '#f)) ((lambda (g$3456$18405) (if (equal? (g$3456$13254 g$3456$18405) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18399)))) '#f)) ((lambda (g$3456$18407) (list g$3456$18407)) (g$3456$13228 g$3456$18399)))) '#f)) (g$3456$13232 g$3456$18393)))) '#f)) ((lambda (g$3456$18409) (list g$3456$18409)) (g$3456$13228 g$3456$18393)))) '#f)) (g$3456$13232 g$3456$18387)))) '#f)) ((lambda (g$3456$18411) (if (g$3456$13234 g$3456$18411) (if (g$3456$13242 g$3456$18411 (g$3456$13487 'immutable)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18387)))) '#f)) g$3456$18303))) g$3456$18287))) ((lambda (g$3456$18413) (if (g$3456$13220 g$3456$18413) (begin '#f ((lambda (g$3456$18415) (if g$3456$18415 (begin '#f ((lambda (g$3456$18417) (if g$3456$18417 (begin '#f (append g$3456$18415 g$3456$18417)) '#f)) ((lambda (g$3456$18419) (if (g$3456$13220 g$3456$18419) (begin '#f ((lambda (g$3456$18421) (if g$3456$18421 (begin '#f ((lambda (g$3456$18423) (if g$3456$18423 (begin '#f (append g$3456$18421 g$3456$18423)) '#f)) ((lambda (g$3456$18425) (if (g$3456$13220 g$3456$18425) (begin '#f ((lambda (g$3456$18427) (if g$3456$18427 (begin '#f ((lambda (g$3456$18429) (if g$3456$18429 (begin '#f (append g$3456$18427 g$3456$18429)) '#f)) ((lambda (g$3456$18431) (if (g$3456$13220 g$3456$18431) (begin '#f ((lambda (g$3456$18433) (if g$3456$18433 (begin '#f ((lambda (g$3456$18435) (if g$3456$18435 (begin '#f (append g$3456$18433 g$3456$18435)) '#f)) ((lambda (g$3456$18437) (if (equal? (g$3456$13254 g$3456$18437) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$18431)))) '#f)) ((lambda (g$3456$18439) (list g$3456$18439)) (g$3456$13228 g$3456$18431)))) '#f)) (g$3456$13232 g$3456$18425)))) '#f)) ((lambda (g$3456$18441) (list g$3456$18441)) (g$3456$13228 g$3456$18425)))) '#f)) (g$3456$13232 g$3456$18419)))) '#f)) ((lambda (g$3456$18443) (list g$3456$18443)) (g$3456$13228 g$3456$18419)))) '#f)) (g$3456$13232 g$3456$18413)))) '#f)) ((lambda (g$3456$18445) (if (g$3456$13234 g$3456$18445) (if (g$3456$13242 g$3456$18445 (g$3456$13487 'mutable)) (begin '#f '()) '#f) '#f)) (g$3456$13228 g$3456$18413)))) '#f)) g$3456$18287))) g$3456$18285)) g$3456$18276))) '#f))) (set! g$3456$18221 (lambda (g$3456$18267) (letrec ((g$3456$18269 (lambda (g$3456$18271 g$3456$18272) (if (null? g$3456$18271) '() (cons g$3456$18272 (g$3456$18269 (cdr g$3456$18271) (+ g$3456$18272 '1))))))) (g$3456$18269 g$3456$18267 '0)))) (set! g$3456$18223 (lambda (g$3456$18225 g$3456$18226 g$3456$18227) ((lambda (g$3456$18231) ((lambda (g$3456$18233) ((lambda (g$3456$18235) ((lambda (g$3456$18237) ((lambda (g$3456$18239) ((lambda (g$3456$18241) ((lambda (g$3456$18243) ((lambda (g$3456$18245) ((lambda (g$3456$18247) ((lambda (g$3456$18249) ((lambda (g$3456$18251) ((lambda (g$3456$18253) ((lambda (g$3456$18255) ((lambda (g$3456$18257) ((lambda () (g$3456$13521 (cons 'begin (cons (list 'define g$3456$18233 g$3456$18253) (cons (list 'define g$3456$18237 g$3456$18257) (cons (list 'define g$3456$18235 g$3456$18255) (cons (list 'define-syntax g$3456$18231 (list 'list ''$rtd (list 'syntax g$3456$18233) (list 'syntax g$3456$18235))) (cons (list 'define g$3456$18251 (list 'record-predicate g$3456$18233)) (cons (list 'define g$3456$18239 (list 'record-constructor g$3456$18235)) (append (map (lambda (g$3456$18259 g$3456$18260) (list 'define g$3456$18259 (list 'record-accessor g$3456$18233 g$3456$18260))) g$3456$18245 g$3456$18243) (map (lambda (g$3456$18263 g$3456$18264) (list 'define g$3456$18263 (list 'record-mutator g$3456$18233 g$3456$18264))) g$3456$18247 g$3456$18249))))))))))))) (g$3456$18211 g$3456$18227))) (g$3456$18209 g$3456$18227 g$3456$18233 g$3456$18237))) (g$3456$18207 g$3456$18225 g$3456$18231 g$3456$18227))) (g$3456$18203 g$3456$18226 g$3456$18225))) (g$3456$18215 g$3456$18241))) (g$3456$18217 g$3456$18231 g$3456$18241 g$3456$18225))) (g$3456$18219 g$3456$18231 g$3456$18241 g$3456$18225))) (g$3456$18221 g$3456$18241))) (g$3456$18213 g$3456$18227))) (g$3456$18201 g$3456$18226 g$3456$18225))) (gensym))) (gensym))) (gensym))) (g$3456$18199 g$3456$18226)))) ((lambda (g$3456$19251) ((lambda (g$3456$19253) (if (if g$3456$19253 (begin '#f (apply (lambda (g$3456$19255 g$3456$19256 g$3456$19257) '#t) g$3456$19253)) '#f) (apply (lambda (g$3456$19261 g$3456$19262 g$3456$19263) (g$3456$18223 g$3456$19261 g$3456$19262 g$3456$19263)) g$3456$19253) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19251 '())))) ((lambda (g$3456$19267) (if (g$3456$13220 g$3456$19267) (begin '#f ((lambda (g$3456$19269) (if g$3456$19269 (begin '#f ((lambda (g$3456$19271) (if g$3456$19271 (begin '#f (append g$3456$19269 g$3456$19271)) '#f)) ((lambda (g$3456$19273) (if (g$3456$13220 g$3456$19273) (begin '#f ((lambda (g$3456$19275) (if g$3456$19275 (begin '#f ((lambda (g$3456$19277) (if g$3456$19277 (begin '#f (append g$3456$19275 g$3456$19277)) '#f)) ((letrec ((g$3456$19279 (lambda (g$3456$19281) (if (g$3456$13220 g$3456$19281) ((lambda (g$3456$19283) (if g$3456$19283 (begin '#f ((lambda (g$3456$19285) (if g$3456$19285 (begin '#f (map cons g$3456$19283 g$3456$19285)) '#f)) (g$3456$19279 (g$3456$13232 g$3456$19281)))) '#f)) ((lambda (g$3456$19287) (list g$3456$19287)) (g$3456$13228 g$3456$19281))) (if (g$3456$13224 g$3456$19281) (list (begin 'clause* '())) '#f))))) g$3456$19279) (g$3456$13232 g$3456$19273)))) '#f)) ((lambda (g$3456$19289) (list g$3456$19289)) (g$3456$13228 g$3456$19273)))) '#f)) (g$3456$13232 g$3456$19267)))) '#f)) ((lambda (g$3456$19291) (list g$3456$19291)) (g$3456$13228 g$3456$19267)))) '#f)) g$3456$19251))) g$3456$18195))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$3456$13567 (lambda (g$3456$19293) ((lambda (g$3456$19295) (begin (set! g$3456$19295 (lambda (g$3456$19297 g$3456$19298) (g$3456$13714 g$3456$19297 (string->symbol (string-append (symbol->string (g$3456$13716 g$3456$19297)) g$3456$19298))))) ((lambda (g$3456$19301) ((lambda (g$3456$19303) (if (if g$3456$19303 (begin '#f (apply (lambda (g$3456$19305 g$3456$19306 g$3456$19307 g$3456$19308 g$3456$19309 g$3456$19310 g$3456$19311) (if (g$3456$13234 g$3456$19306) (if (g$3456$13234 g$3456$19307) (if (g$3456$13234 g$3456$19308) (if (g$3456$13234 g$3456$19309) (if (for-all g$3456$13234 g$3456$19310) (begin '#f (for-all g$3456$13234 g$3456$19311)) '#f) '#f) '#f) '#f) '#f)) g$3456$19303)) '#f) (apply (lambda (g$3456$19319 g$3456$19320 g$3456$19321 g$3456$19322 g$3456$19323 g$3456$19324 g$3456$19325) ((lambda (g$3456$19333) (g$3456$13521 (cons 'begin (cons (cons 'define-record-type (cons (list g$3456$19320 g$3456$19322 (gensym)) (cons (list 'parent g$3456$19321) (cons (cons 'fields (map (lambda (g$3456$19335 g$3456$19336) (list 'immutable g$3456$19335 g$3456$19336)) g$3456$19324 g$3456$19333)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define g$3456$19323 (list 'condition-predicate (list 'record-type-descriptor g$3456$19320))) (map (lambda (g$3456$19339 g$3456$19340) (list 'define g$3456$19339 (list 'condition-accessor (list 'record-type-descriptor g$3456$19320) g$3456$19340))) g$3456$19325 g$3456$19333)))))) (map (lambda (g$3456$19343) (gensym)) g$3456$19325))) g$3456$19303) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19301 '())))) ((lambda (g$3456$19345) (if (g$3456$13220 g$3456$19345) (begin '#f ((lambda (g$3456$19347) (if g$3456$19347 (begin '#f ((lambda (g$3456$19349) (if g$3456$19349 (begin '#f (append g$3456$19347 g$3456$19349)) '#f)) ((lambda (g$3456$19351) (if (g$3456$13220 g$3456$19351) (begin '#f ((lambda (g$3456$19353) (if g$3456$19353 (begin '#f ((lambda (g$3456$19355) (if g$3456$19355 (begin '#f (append g$3456$19353 g$3456$19355)) '#f)) ((lambda (g$3456$19357) (if (g$3456$13220 g$3456$19357) (begin '#f ((lambda (g$3456$19359) (if g$3456$19359 (begin '#f ((lambda (g$3456$19361) (if g$3456$19361 (begin '#f (append g$3456$19359 g$3456$19361)) '#f)) ((lambda (g$3456$19363) (if (g$3456$13220 g$3456$19363) (begin '#f ((lambda (g$3456$19365) (if g$3456$19365 (begin '#f ((lambda (g$3456$19367) (if g$3456$19367 (begin '#f (append g$3456$19365 g$3456$19367)) '#f)) ((lambda (g$3456$19369) (if (g$3456$13220 g$3456$19369) (begin '#f ((lambda (g$3456$19371) (if g$3456$19371 (begin '#f ((lambda (g$3456$19373) (if g$3456$19373 (begin '#f (append g$3456$19371 g$3456$19373)) '#f)) ((letrec ((g$3456$19375 (lambda (g$3456$19377) (if (g$3456$13220 g$3456$19377) ((lambda (g$3456$19379) (if g$3456$19379 (begin '#f ((lambda (g$3456$19381) (if g$3456$19381 (begin '#f (map cons g$3456$19379 g$3456$19381)) '#f)) (g$3456$19375 (g$3456$13232 g$3456$19377)))) '#f)) ((lambda (g$3456$19383) (if (g$3456$13220 g$3456$19383) (begin '#f ((lambda (g$3456$19385) (if g$3456$19385 (begin '#f ((lambda (g$3456$19387) (if g$3456$19387 (begin '#f (append g$3456$19385 g$3456$19387)) '#f)) ((lambda (g$3456$19389) (if (g$3456$13220 g$3456$19389) (begin '#f ((lambda (g$3456$19391) (if g$3456$19391 (begin '#f ((lambda (g$3456$19393) (if g$3456$19393 (begin '#f (append g$3456$19391 g$3456$19393)) '#f)) ((lambda (g$3456$19395) (if (equal? (g$3456$13254 g$3456$19395) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$19389)))) '#f)) ((lambda (g$3456$19397) (list g$3456$19397)) (g$3456$13228 g$3456$19389)))) '#f)) (g$3456$13232 g$3456$19383)))) '#f)) ((lambda (g$3456$19399) (list g$3456$19399)) (g$3456$13228 g$3456$19383)))) '#f)) (g$3456$13228 g$3456$19377))) (if (g$3456$13224 g$3456$19377) (list (begin 'field* '()) (begin 'accessor* '())) '#f))))) g$3456$19375) (g$3456$13232 g$3456$19369)))) '#f)) ((lambda (g$3456$19401) (list g$3456$19401)) (g$3456$13228 g$3456$19369)))) '#f)) (g$3456$13232 g$3456$19363)))) '#f)) ((lambda (g$3456$19403) (list g$3456$19403)) (g$3456$13228 g$3456$19363)))) '#f)) (g$3456$13232 g$3456$19357)))) '#f)) ((lambda (g$3456$19405) (list g$3456$19405)) (g$3456$13228 g$3456$19357)))) '#f)) (g$3456$13232 g$3456$19351)))) '#f)) ((lambda (g$3456$19407) (list g$3456$19407)) (g$3456$13228 g$3456$19351)))) '#f)) (g$3456$13232 g$3456$19345)))) '#f)) ((lambda (g$3456$19409) (list g$3456$19409)) (g$3456$13228 g$3456$19345)))) '#f)) g$3456$19301))) g$3456$19293))) '#f))) (set! g$3456$13569 (lambda (g$3456$19411) (error 'expander '"incorrect usage of auxilary keyword" (g$3456$13252 g$3456$19411 '())))) (set! g$3456$13571 (lambda (g$3456$19413 g$3456$19414 g$3456$19415) ((lambda (g$3456$19419) ((lambda (g$3456$19421) (if (if g$3456$19421 (begin '#f (apply (lambda (g$3456$19423 g$3456$19424) '#t) g$3456$19421)) '#f) (apply (lambda (g$3456$19427 g$3456$19428) (g$3456$13621 (cons g$3456$19427 g$3456$19428) g$3456$19414 g$3456$19415)) g$3456$19421) ((lambda (g$3456$19431) ((lambda (g$3456$19433) (if (if g$3456$19433 (begin '#f (apply (lambda (g$3456$19435 g$3456$19436 g$3456$19437 g$3456$19438) '#t) g$3456$19433)) '#f) (apply (lambda (g$3456$19443 g$3456$19444 g$3456$19445 g$3456$19446) ((lambda (g$3456$19451 g$3456$19452 g$3456$19453 g$3456$19454) (g$3456$13121 '#f (append g$3456$19451 g$3456$19452) (append (g$3456$13601 g$3456$19443 g$3456$19414 g$3456$19415) (g$3456$13601 g$3456$19444 g$3456$19414 g$3456$19415)) (g$3456$13121 '#f (list g$3456$19454) (list (g$3456$13123 '#f '() (g$3456$13117 '#f (map (lambda (g$3456$19459 g$3456$19460 g$3456$19461) (g$3456$13121 '#f (list g$3456$19459) (list (list g$3456$19460)) (g$3456$13117 '#f (list (list g$3456$19460 g$3456$19461) (list 'set! g$3456$19461 g$3456$19459))))) g$3456$19453 g$3456$19451 g$3456$19452)))) (list '(primitive dynamic-wind) g$3456$19454 (g$3456$13123 '#f '() (g$3456$13621 (cons g$3456$19445 g$3456$19446) g$3456$19414 g$3456$19415)) g$3456$19454)))) (map (lambda (g$3456$19465) (g$3456$13144 'lhs)) g$3456$19443) (map (lambda (g$3456$19467) (g$3456$13144 'rhs)) g$3456$19443) (map (lambda (g$3456$19469) (g$3456$13144 't)) g$3456$19443) (g$3456$13144 'swap))) g$3456$19433) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19431 '())))) ((lambda (g$3456$19471) (if (g$3456$13220 g$3456$19471) (begin '#f ((lambda (g$3456$19473) (if g$3456$19473 (begin '#f ((lambda (g$3456$19475) (if g$3456$19475 (begin '#f (append g$3456$19473 g$3456$19475)) '#f)) ((lambda (g$3456$19477) (if (g$3456$13220 g$3456$19477) (begin '#f ((lambda (g$3456$19479) (if g$3456$19479 (begin '#f ((lambda (g$3456$19481) (if g$3456$19481 (begin '#f (append g$3456$19479 g$3456$19481)) '#f)) ((lambda (g$3456$19483) (if (g$3456$13220 g$3456$19483) (begin '#f ((lambda (g$3456$19485) (if g$3456$19485 (begin '#f ((lambda (g$3456$19487) (if g$3456$19487 (begin '#f (append g$3456$19485 g$3456$19487)) '#f)) ((letrec ((g$3456$19489 (lambda (g$3456$19491) (if (g$3456$13220 g$3456$19491) ((lambda (g$3456$19493) (if g$3456$19493 (begin '#f ((lambda (g$3456$19495) (if g$3456$19495 (begin '#f (map cons g$3456$19493 g$3456$19495)) '#f)) (g$3456$19489 (g$3456$13232 g$3456$19491)))) '#f)) ((lambda (g$3456$19497) (list g$3456$19497)) (g$3456$13228 g$3456$19491))) (if (g$3456$13224 g$3456$19491) (list (begin 'b* '())) '#f))))) g$3456$19489) (g$3456$13232 g$3456$19483)))) '#f)) ((lambda (g$3456$19499) (list g$3456$19499)) (g$3456$13228 g$3456$19483)))) '#f)) (g$3456$13232 g$3456$19477)))) '#f)) ((letrec ((g$3456$19501 (lambda (g$3456$19503) (if (g$3456$13220 g$3456$19503) ((lambda (g$3456$19505) (if g$3456$19505 (begin '#f ((lambda (g$3456$19507) (if g$3456$19507 (begin '#f (map cons g$3456$19505 g$3456$19507)) '#f)) (g$3456$19501 (g$3456$13232 g$3456$19503)))) '#f)) ((lambda (g$3456$19509) (if (g$3456$13220 g$3456$19509) (begin '#f ((lambda (g$3456$19511) (if g$3456$19511 (begin '#f ((lambda (g$3456$19513) (if g$3456$19513 (begin '#f (append g$3456$19511 g$3456$19513)) '#f)) ((lambda (g$3456$19515) (if (g$3456$13220 g$3456$19515) (begin '#f ((lambda (g$3456$19517) (if g$3456$19517 (begin '#f ((lambda (g$3456$19519) (if g$3456$19519 (begin '#f (append g$3456$19517 g$3456$19519)) '#f)) ((lambda (g$3456$19521) (if (equal? (g$3456$13254 g$3456$19521) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$19515)))) '#f)) ((lambda (g$3456$19523) (list g$3456$19523)) (g$3456$13228 g$3456$19515)))) '#f)) (g$3456$13232 g$3456$19509)))) '#f)) ((lambda (g$3456$19525) (list g$3456$19525)) (g$3456$13228 g$3456$19509)))) '#f)) (g$3456$13228 g$3456$19503))) (if (g$3456$13224 g$3456$19503) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f))))) g$3456$19501) (g$3456$13228 g$3456$19477)))) '#f)) (g$3456$13232 g$3456$19471)))) '#f)) ((lambda (g$3456$19527) '()) (g$3456$13228 g$3456$19471)))) '#f)) g$3456$19431))) g$3456$19419))) ((lambda (g$3456$19529) (if (g$3456$13220 g$3456$19529) (begin '#f ((lambda (g$3456$19531) (if g$3456$19531 (begin '#f ((lambda (g$3456$19533) (if g$3456$19533 (begin '#f (append g$3456$19531 g$3456$19533)) '#f)) ((lambda (g$3456$19535) (if (g$3456$13220 g$3456$19535) (begin '#f ((lambda (g$3456$19537) (if g$3456$19537 (begin '#f ((lambda (g$3456$19539) (if g$3456$19539 (begin '#f (append g$3456$19537 g$3456$19539)) '#f)) ((lambda (g$3456$19541) (if (g$3456$13220 g$3456$19541) (begin '#f ((lambda (g$3456$19543) (if g$3456$19543 (begin '#f ((lambda (g$3456$19545) (if g$3456$19545 (begin '#f (append g$3456$19543 g$3456$19545)) '#f)) ((letrec ((g$3456$19547 (lambda (g$3456$19549) (if (g$3456$13220 g$3456$19549) ((lambda (g$3456$19551) (if g$3456$19551 (begin '#f ((lambda (g$3456$19553) (if g$3456$19553 (begin '#f (map cons g$3456$19551 g$3456$19553)) '#f)) (g$3456$19547 (g$3456$13232 g$3456$19549)))) '#f)) ((lambda (g$3456$19555) (list g$3456$19555)) (g$3456$13228 g$3456$19549))) (if (g$3456$13224 g$3456$19549) (list (begin 'b* '())) '#f))))) g$3456$19547) (g$3456$13232 g$3456$19541)))) '#f)) ((lambda (g$3456$19557) (list g$3456$19557)) (g$3456$13228 g$3456$19541)))) '#f)) (g$3456$13232 g$3456$19535)))) '#f)) ((lambda (g$3456$19559) (if (equal? (g$3456$13254 g$3456$19559) '()) (begin '#f '()) '#f)) (g$3456$13228 g$3456$19535)))) '#f)) (g$3456$13232 g$3456$19529)))) '#f)) ((lambda (g$3456$19561) '()) (g$3456$13228 g$3456$19529)))) '#f)) g$3456$19419))) g$3456$19413))) (set! g$3456$13573 (lambda (g$3456$19563 g$3456$19564 g$3456$19565) ((lambda (g$3456$19569) ((lambda (g$3456$19571) (if (if g$3456$19571 (begin '#f (apply (lambda (g$3456$19573 g$3456$19574) '#t) g$3456$19571)) '#f) (apply (lambda (g$3456$19577 g$3456$19578) (cons 'foreign-call (cons (g$3456$13605 g$3456$19577 g$3456$19564 g$3456$19565) (g$3456$13601 g$3456$19578 g$3456$19564 g$3456$19565)))) g$3456$19571) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19569 '())))) ((lambda (g$3456$19581) (if (g$3456$13220 g$3456$19581) (begin '#f ((lambda (g$3456$19583) (if g$3456$19583 (begin '#f ((lambda (g$3456$19585) (if g$3456$19585 (begin '#f (append g$3456$19583 g$3456$19585)) '#f)) ((lambda (g$3456$19587) (if (g$3456$13220 g$3456$19587) (begin '#f ((lambda (g$3456$19589) (if g$3456$19589 (begin '#f ((lambda (g$3456$19591) (if g$3456$19591 (begin '#f (append g$3456$19589 g$3456$19591)) '#f)) ((letrec ((g$3456$19593 (lambda (g$3456$19595) (if (g$3456$13220 g$3456$19595) ((lambda (g$3456$19597) (if g$3456$19597 (begin '#f ((lambda (g$3456$19599) (if g$3456$19599 (begin '#f (map cons g$3456$19597 g$3456$19599)) '#f)) (g$3456$19593 (g$3456$13232 g$3456$19595)))) '#f)) ((lambda (g$3456$19601) (list g$3456$19601)) (g$3456$13228 g$3456$19595))) (if (g$3456$13224 g$3456$19595) (list (begin 'arg* '())) '#f))))) g$3456$19593) (g$3456$13232 g$3456$19587)))) '#f)) ((lambda (g$3456$19603) (list g$3456$19603)) (g$3456$13228 g$3456$19587)))) '#f)) (g$3456$13232 g$3456$19581)))) '#f)) ((lambda (g$3456$19605) '()) (g$3456$13228 g$3456$19581)))) '#f)) g$3456$19569))) g$3456$19563))) (set! g$3456$13575 (lambda (g$3456$19607 g$3456$19608) ((lambda (g$3456$19611 g$3456$19613) (begin (set! g$3456$19611 (lambda (g$3456$19801 g$3456$19802 g$3456$19803) (if (null? g$3456$19801) (values '() g$3456$19803) (call-with-values (lambda () (g$3456$19611 (cdr g$3456$19801) g$3456$19802 g$3456$19803)) (lambda (g$3456$19807 g$3456$19808) (call-with-values (lambda () (g$3456$19613 (car g$3456$19801) g$3456$19802 g$3456$19808)) (lambda (g$3456$19811 g$3456$19812) (values (cons g$3456$19811 g$3456$19807) g$3456$19812)))))))) (set! g$3456$19613 (lambda (g$3456$19615 g$3456$19616 g$3456$19617) ((lambda (g$3456$19621) ((lambda (g$3456$19623) (if (if g$3456$19623 (begin '#f (apply (lambda (g$3456$19625) (g$3456$13234 g$3456$19625)) g$3456$19623)) '#f) (apply (lambda (g$3456$19627) (if (g$3456$13248 g$3456$19615 g$3456$19608) (values (vector 'free-id g$3456$19615) g$3456$19617) (if (g$3456$13242 g$3456$19615 (g$3456$13487 '_)) (values '_ g$3456$19617) (values 'any (cons (cons g$3456$19615 g$3456$19616) g$3456$19617))))) g$3456$19623) ((lambda (g$3456$19629) ((lambda (g$3456$19631) (if (if g$3456$19631 (begin '#f (apply (lambda (g$3456$19633 g$3456$19634) (g$3456$13579 g$3456$19634)) g$3456$19631)) '#f) (apply (lambda (g$3456$19637 g$3456$19638) (call-with-values (lambda () (g$3456$19613 g$3456$19637 (+ g$3456$19616 '1) g$3456$19617)) (lambda (g$3456$19641 g$3456$19642) (values (if (eq? g$3456$19641 'any) 'each-any (vector 'each g$3456$19641)) g$3456$19642)))) g$3456$19631) ((lambda (g$3456$19645) ((lambda (g$3456$19647) (if (if g$3456$19647 (begin '#f (apply (lambda (g$3456$19649 g$3456$19650 g$3456$19651 g$3456$19652) (g$3456$13579 g$3456$19650)) g$3456$19647)) '#f) (apply (lambda (g$3456$19657 g$3456$19658 g$3456$19659 g$3456$19660) (call-with-values (lambda () (g$3456$19613 g$3456$19660 g$3456$19616 g$3456$19617)) (lambda (g$3456$19665 g$3456$19666) (call-with-values (lambda () (g$3456$19611 g$3456$19659 g$3456$19616 g$3456$19666)) (lambda (g$3456$19669 g$3456$19670) (call-with-values (lambda () (g$3456$19613 g$3456$19657 (+ g$3456$19616 '1) g$3456$19670)) (lambda (g$3456$19673 g$3456$19674) (values (vector 'each+ g$3456$19673 (reverse g$3456$19669) g$3456$19665) g$3456$19674)))))))) g$3456$19647) ((lambda (g$3456$19677) ((lambda (g$3456$19679) (if (if g$3456$19679 (begin '#f (apply (lambda (g$3456$19681 g$3456$19682) '#t) g$3456$19679)) '#f) (apply (lambda (g$3456$19685 g$3456$19686) (call-with-values (lambda () (g$3456$19613 g$3456$19686 g$3456$19616 g$3456$19617)) (lambda (g$3456$19689 g$3456$19690) (call-with-values (lambda () (g$3456$19613 g$3456$19685 g$3456$19616 g$3456$19690)) (lambda (g$3456$19693 g$3456$19694) (values (cons g$3456$19693 g$3456$19689) g$3456$19694)))))) g$3456$19679) ((lambda (g$3456$19697) ((lambda (g$3456$19699) (if (if g$3456$19699 (begin '#f (apply (lambda () '#t) g$3456$19699)) '#f) (apply (lambda () (values '() g$3456$19617)) g$3456$19699) ((lambda (g$3456$19701) ((lambda (g$3456$19703) (if (if g$3456$19703 (begin '#f (apply (lambda (g$3456$19705) (not (g$3456$13186 g$3456$19705))) g$3456$19703)) '#f) (apply (lambda (g$3456$19707) (call-with-values (lambda () (g$3456$19613 g$3456$19707 g$3456$19616 g$3456$19617)) (lambda (g$3456$19709 g$3456$19710) (values (vector 'vector g$3456$19709) g$3456$19710)))) g$3456$19703) ((lambda (g$3456$19713) ((lambda (g$3456$19715) (if (if g$3456$19715 (begin '#f (apply (lambda (g$3456$19717) '#t) g$3456$19715)) '#f) (apply (lambda (g$3456$19719) (values (vector 'atom (g$3456$13254 g$3456$19719)) g$3456$19617)) g$3456$19715) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19713 '())))) ((lambda (g$3456$19721) (list g$3456$19721)) g$3456$19713))) g$3456$19701))) ((lambda (g$3456$19723) (if (g$3456$13222 g$3456$19723) (begin '#f ((letrec ((g$3456$19725 (lambda (g$3456$19727) (if (g$3456$13220 g$3456$19727) ((lambda (g$3456$19729) (if g$3456$19729 (begin '#f ((lambda (g$3456$19731) (if g$3456$19731 (begin '#f (map cons g$3456$19729 g$3456$19731)) '#f)) (g$3456$19725 (g$3456$13232 g$3456$19727)))) '#f)) ((lambda (g$3456$19733) (list g$3456$19733)) (g$3456$13228 g$3456$19727))) (if (g$3456$13224 g$3456$19727) (list (begin 'p '())) '#f))))) g$3456$19725) (g$3456$13218 g$3456$19723))) '#f)) g$3456$19701))) g$3456$19697))) ((lambda (g$3456$19735) (if (equal? (g$3456$13254 g$3456$19735) '()) (begin '#f '()) '#f)) g$3456$19697))) g$3456$19677))) ((lambda (g$3456$19737) (if (g$3456$13220 g$3456$19737) (begin '#f ((lambda (g$3456$19739) (if g$3456$19739 (begin '#f ((lambda (g$3456$19741) (if g$3456$19741 (begin '#f (append g$3456$19739 g$3456$19741)) '#f)) ((lambda (g$3456$19743) (list g$3456$19743)) (g$3456$13232 g$3456$19737)))) '#f)) ((lambda (g$3456$19745) (list g$3456$19745)) (g$3456$13228 g$3456$19737)))) '#f)) g$3456$19677))) g$3456$19645))) ((lambda (g$3456$19747) (if (g$3456$13220 g$3456$19747) (begin '#f ((lambda (g$3456$19749) (if g$3456$19749 (begin '#f ((lambda (g$3456$19751) (if g$3456$19751 (begin '#f (append g$3456$19749 g$3456$19751)) '#f)) ((lambda (g$3456$19753) (if (g$3456$13220 g$3456$19753) (begin '#f ((lambda (g$3456$19755) (if g$3456$19755 (begin '#f ((lambda (g$3456$19757) (if g$3456$19757 (begin '#f (append g$3456$19755 g$3456$19757)) '#f)) ((letrec ((g$3456$19759 (lambda (g$3456$19765) (if (g$3456$13220 g$3456$19765) ((lambda (g$3456$19767) (if g$3456$19767 (begin '#f ((lambda (g$3456$19769) (if g$3456$19769 (begin '#f (cons (map cons g$3456$19767 (car g$3456$19769)) (cdr g$3456$19769))) '#f)) (g$3456$19759 (g$3456$13232 g$3456$19765)))) '#f)) ((lambda (g$3456$19771) (list g$3456$19771)) (g$3456$13228 g$3456$19765))) ((lambda (g$3456$19773) (if g$3456$19773 (begin '#f (cons (list (begin 'ys '())) g$3456$19773)) '#f)) ((lambda (g$3456$19775) (list g$3456$19775)) g$3456$19765)))))) (lambda (g$3456$19761) ((lambda (g$3456$19763) (if g$3456$19763 (begin '#f (append (car g$3456$19763) (cdr g$3456$19763))) '#f)) (g$3456$19759 g$3456$19761)))) (g$3456$13232 g$3456$19753)))) '#f)) ((lambda (g$3456$19777) (list g$3456$19777)) (g$3456$13228 g$3456$19753)))) '#f)) (g$3456$13232 g$3456$19747)))) '#f)) ((lambda (g$3456$19779) (list g$3456$19779)) (g$3456$13228 g$3456$19747)))) '#f)) g$3456$19645))) g$3456$19629))) ((lambda (g$3456$19781) (if (g$3456$13220 g$3456$19781) (begin '#f ((lambda (g$3456$19783) (if g$3456$19783 (begin '#f ((lambda (g$3456$19785) (if g$3456$19785 (begin '#f (append g$3456$19783 g$3456$19785)) '#f)) ((lambda (g$3456$19787) (if (g$3456$13220 g$3456$19787) (begin '#f ((lambda (g$3456$19789) (if g$3456$19789 (begin '#f ((lambda (g$3456$19791) (if g$3456$19791 (begin '#f (append g$3456$19789 g$3456$19791)) '#f)) ((lambda (g$3456$19793) (if (equal? (g$3456$13254 g$3456$19793) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$19787)))) '#f)) ((lambda (g$3456$19795) (list g$3456$19795)) (g$3456$13228 g$3456$19787)))) '#f)) (g$3456$13232 g$3456$19781)))) '#f)) ((lambda (g$3456$19797) (list g$3456$19797)) (g$3456$13228 g$3456$19781)))) '#f)) g$3456$19629))) g$3456$19621))) ((lambda (g$3456$19799) (list g$3456$19799)) g$3456$19621))) g$3456$19615))) (g$3456$19613 g$3456$19607 '0 '()))) '#f '#f))) (set! g$3456$13577 (lambda (g$3456$19815 g$3456$19816) ((lambda (g$3456$19819 g$3456$19821 g$3456$19823 g$3456$19825 g$3456$19827 g$3456$19829 g$3456$19831 g$3456$19833) (begin (set! g$3456$19819 (lambda (g$3456$19941 g$3456$19942 g$3456$19943) (if (if (null? g$3456$19942) (begin '#f (null? g$3456$19943)) '#f) g$3456$19941 (g$3456$13210 g$3456$19941 g$3456$19942 g$3456$19943)))) (set! g$3456$19821 (lambda (g$3456$19925 g$3456$19926 g$3456$19927 g$3456$19928) (if (pair? g$3456$19925) ((lambda (g$3456$19933) (if g$3456$19933 (begin '#f ((lambda (g$3456$19935) (if g$3456$19935 (begin '#f (cons g$3456$19933 g$3456$19935)) '#f)) (g$3456$19821 (cdr g$3456$19925) g$3456$19926 g$3456$19927 g$3456$19928))) '#f)) (g$3456$19833 (car g$3456$19925) g$3456$19926 g$3456$19927 g$3456$19928 '())) (if (null? g$3456$19925) '() (if (g$3456$13186 g$3456$19925) (call-with-values (lambda () (g$3456$13208 g$3456$19927 g$3456$19928 g$3456$19925)) (lambda (g$3456$19937 g$3456$19938) (g$3456$19821 (g$3456$13188 g$3456$19925) g$3456$19926 g$3456$19937 g$3456$19938))) '#f))))) (set! g$3456$19823 (lambda (g$3456$19891 g$3456$19892 g$3456$19893 g$3456$19894 g$3456$19895 g$3456$19896 g$3456$19897) (letrec ((g$3456$19905 (lambda (g$3456$19907 g$3456$19908 g$3456$19909) (if (pair? g$3456$19907) (call-with-values (lambda () (g$3456$19905 (cdr g$3456$19907) g$3456$19908 g$3456$19909)) (lambda (g$3456$19913 g$3456$19914 g$3456$19915) (if g$3456$19915 (if (null? g$3456$19914) ((lambda (g$3456$19919) (if g$3456$19919 (values (cons g$3456$19919 g$3456$19913) g$3456$19914 g$3456$19915) (values '#f '#f '#f))) (g$3456$19833 (car g$3456$19907) g$3456$19892 g$3456$19908 g$3456$19909 '())) (values '() (cdr g$3456$19914) (g$3456$19833 (car g$3456$19907) (car g$3456$19914) g$3456$19908 g$3456$19909 g$3456$19915))) (values '#f '#f '#f)))) (if (g$3456$13186 g$3456$19907) (call-with-values (lambda () (g$3456$13208 g$3456$19908 g$3456$19909 g$3456$19907)) (lambda (g$3456$19921 g$3456$19922) (g$3456$19905 (g$3456$13188 g$3456$19907) g$3456$19921 g$3456$19922))) (values '() g$3456$19893 (g$3456$19833 g$3456$19907 g$3456$19894 g$3456$19908 g$3456$19909 g$3456$19897))))))) (g$3456$19905 g$3456$19891 g$3456$19895 g$3456$19896)))) (set! g$3456$19825 (lambda (g$3456$19879 g$3456$19880 g$3456$19881) (if (pair? g$3456$19879) ((lambda (g$3456$19885) (if g$3456$19885 (begin '#f (cons (g$3456$19819 (car g$3456$19879) g$3456$19880 g$3456$19881) g$3456$19885)) '#f)) (g$3456$19825 (cdr g$3456$19879) g$3456$19880 g$3456$19881)) (if (null? g$3456$19879) '() (if (g$3456$13186 g$3456$19879) (call-with-values (lambda () (g$3456$13208 g$3456$19880 g$3456$19881 g$3456$19879)) (lambda (g$3456$19887 g$3456$19888) (g$3456$19825 (g$3456$13188 g$3456$19879) g$3456$19887 g$3456$19888))) '#f))))) (set! g$3456$19827 (lambda (g$3456$19874 g$3456$19875) (if (null? g$3456$19874) g$3456$19875 (if (eq? g$3456$19874 '_) g$3456$19875 (if (eq? g$3456$19874 'any) (cons '() g$3456$19875) (if (pair? g$3456$19874) (g$3456$19827 (car g$3456$19874) (g$3456$19827 (cdr g$3456$19874) g$3456$19875)) (if (eq? g$3456$19874 'each-any) (cons '() g$3456$19875) ((lambda (g$3456$19878) (if (memv g$3456$19878 '(each)) (g$3456$19827 (vector-ref g$3456$19874 '1) g$3456$19875) (if (memv g$3456$19878 '(each+)) (g$3456$19827 (vector-ref g$3456$19874 '1) (g$3456$19827 (reverse (vector-ref g$3456$19874 '2)) (g$3456$19827 (vector-ref g$3456$19874 '3) g$3456$19875))) (if (memv g$3456$19878 '(free-id atom)) g$3456$19875 (if (memv g$3456$19878 '(vector)) (g$3456$19827 (vector-ref g$3456$19874 '1) g$3456$19875) (error 'syntax-dispatch '"invalid pattern" g$3456$19874)))))) (vector-ref g$3456$19874 '0))))))))) (set! g$3456$19829 (lambda (g$3456$19870 g$3456$19871) (if (null? (car g$3456$19870)) g$3456$19871 (cons (map car g$3456$19870) (g$3456$19829 (map cdr g$3456$19870) g$3456$19871))))) (set! g$3456$19831 (lambda (g$3456$19849 g$3456$19850 g$3456$19851 g$3456$19852 g$3456$19853) (if (null? g$3456$19850) (if (null? g$3456$19849) (begin '#f g$3456$19853) '#f) (if (pair? g$3456$19850) (if (pair? g$3456$19849) (begin '#f (g$3456$19833 (car g$3456$19849) (car g$3456$19850) g$3456$19851 g$3456$19852 (g$3456$19833 (cdr g$3456$19849) (cdr g$3456$19850) g$3456$19851 g$3456$19852 g$3456$19853))) '#f) (if (eq? g$3456$19850 'each-any) ((lambda (g$3456$19859) (if g$3456$19859 (begin '#f (cons g$3456$19859 g$3456$19853)) '#f)) (g$3456$19825 g$3456$19849 g$3456$19851 g$3456$19852)) ((lambda (g$3456$19861) (if (memv g$3456$19861 '(each)) (if (null? g$3456$19849) (g$3456$19827 (vector-ref g$3456$19850 '1) g$3456$19853) ((lambda (g$3456$19868) (if g$3456$19868 (begin '#f (g$3456$19829 g$3456$19868 g$3456$19853)) '#f)) (g$3456$19821 g$3456$19849 (vector-ref g$3456$19850 '1) g$3456$19851 g$3456$19852))) (if (memv g$3456$19861 '(free-id)) (if (symbol? g$3456$19849) (if (g$3456$13242 (g$3456$19819 g$3456$19849 g$3456$19851 g$3456$19852) (vector-ref g$3456$19850 '1)) (begin '#f g$3456$19853) '#f) '#f) (if (memv g$3456$19861 '(each+)) (call-with-values (lambda () (g$3456$19823 g$3456$19849 (vector-ref g$3456$19850 '1) (vector-ref g$3456$19850 '2) (vector-ref g$3456$19850 '3) g$3456$19851 g$3456$19852 g$3456$19853)) (lambda (g$3456$19862 g$3456$19863 g$3456$19864) (if g$3456$19864 (if (null? g$3456$19863) (begin '#f (if (null? g$3456$19862) (g$3456$19827 (vector-ref g$3456$19850 '1) g$3456$19864) (g$3456$19829 g$3456$19862 g$3456$19864))) '#f) '#f))) (if (memv g$3456$19861 '(atom)) (if (equal? (vector-ref g$3456$19850 '1) (g$3456$13252 g$3456$19849 g$3456$19851)) (begin '#f g$3456$19853) '#f) (if (memv g$3456$19861 '(vector)) (if (vector? g$3456$19849) (begin '#f (g$3456$19833 (vector->list g$3456$19849) (vector-ref g$3456$19850 '1) g$3456$19851 g$3456$19852 g$3456$19853)) '#f) (error 'syntax-dispatch '"invalid pattern" g$3456$19850))))))) (vector-ref g$3456$19850 '0))))))) (set! g$3456$19833 (lambda (g$3456$19835 g$3456$19836 g$3456$19837 g$3456$19838 g$3456$19839) (if (not g$3456$19839) '#f (if (eq? g$3456$19836 '_) g$3456$19839 (if (eq? g$3456$19836 'any) (cons (g$3456$19819 g$3456$19835 g$3456$19837 g$3456$19838) g$3456$19839) (if (g$3456$13186 g$3456$19835) (call-with-values (lambda () (g$3456$13208 g$3456$19837 g$3456$19838 g$3456$19835)) (lambda (g$3456$19845 g$3456$19846) (g$3456$19833 (g$3456$13188 g$3456$19835) g$3456$19836 g$3456$19845 g$3456$19846 g$3456$19839))) (g$3456$19831 g$3456$19835 g$3456$19836 g$3456$19837 g$3456$19838 g$3456$19839))))))) (g$3456$19833 g$3456$19815 g$3456$19816 '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$3456$13579 (lambda (g$3456$19947) (if (g$3456$13234 g$3456$19947) (begin '#f (g$3456$13242 g$3456$19947 (g$3456$13487 '|...|))) '#f))) (set! g$3456$13581 ((lambda () ((lambda (g$3456$19949 g$3456$19951 g$3456$19953 g$3456$19955) (begin (set! g$3456$19949 (lambda (g$3456$20089 g$3456$20090 g$3456$20091 g$3456$20092 g$3456$20093) ((lambda (g$3456$20099 g$3456$20100) ((lambda (g$3456$20103 g$3456$20104) ((lambda (g$3456$20107) (list '(primitive apply) (g$3456$13123 '#f g$3456$20104 g$3456$20107) g$3456$20091)) (g$3456$13605 (g$3456$13214 (g$3456$13181 g$3456$20099 g$3456$20103) g$3456$20090) (append (map (lambda (g$3456$20109 g$3456$20110 g$3456$20111) (cons g$3456$20109 (g$3456$13260 'syntax (cons g$3456$20110 g$3456$20111)))) g$3456$20103 g$3456$20104 (map cdr g$3456$20089)) g$3456$20092) g$3456$20093))) (map g$3456$13148 g$3456$20099) (map g$3456$13144 g$3456$20099))) (map car g$3456$20089) (map cdr g$3456$20089)))) (set! g$3456$19951 (lambda (g$3456$20077 g$3456$20078 g$3456$20079) (letrec ((g$3456$20083 (lambda (g$3456$20085 g$3456$20086) (if (null? g$3456$20085) (error 'expander '"invalid syntax" (g$3456$13254 g$3456$20078)) (if (g$3456$13234 (car g$3456$20085)) (if (g$3456$13248 (car g$3456$20085) g$3456$20086) (g$3456$13710 (car g$3456$20085) '"duplicate " g$3456$20079) (g$3456$20083 (cdr g$3456$20085) (cons (car g$3456$20085) g$3456$20086))) (g$3456$13710 (car g$3456$20085) '"invalid " g$3456$20079)))))) (g$3456$20083 g$3456$20077 '())))) (set! g$3456$19953 (lambda (g$3456$20045 g$3456$20046 g$3456$20047 g$3456$20048 g$3456$20049 g$3456$20050 g$3456$20051 g$3456$20052) (call-with-values (lambda () (g$3456$13575 g$3456$20050 g$3456$20046)) (lambda (g$3456$20061 g$3456$20062) (if (not (g$3456$13246 (map car g$3456$20062))) (g$3456$19951 (map car g$3456$20062) g$3456$20050 '"pattern variable") (if (not (for-all (lambda (g$3456$20065) (not (g$3456$13579 (car g$3456$20065)))) g$3456$20062)) (error 'expander '"misplaced ellipsis in syntax-case pattern" (g$3456$13252 g$3456$20050 '())) ((lambda (g$3456$20067) ((lambda (g$3456$20069) ((lambda (g$3456$20071) ((lambda (g$3456$20073) (list (g$3456$13123 '#f (list g$3456$20067) (list 'if g$3456$20069 g$3456$20071 g$3456$20073)) (list '(primitive syntax-dispatch) g$3456$20045 (list 'quote g$3456$20061)))) (g$3456$19955 g$3456$20045 g$3456$20046 g$3456$20047 g$3456$20048 g$3456$20049))) (g$3456$19949 g$3456$20062 g$3456$20052 g$3456$20067 g$3456$20048 g$3456$20049))) (if (eq? g$3456$20051 '#t) g$3456$20067 ((lambda (g$3456$20075) (list 'if g$3456$20067 g$3456$20075 (list 'quote '#f))) (g$3456$19949 g$3456$20062 g$3456$20051 g$3456$20067 g$3456$20048 g$3456$20049))))) (g$3456$13144 'tmp)))))))) (set! g$3456$19955 (lambda (g$3456$19957 g$3456$19958 g$3456$19959 g$3456$19960 g$3456$19961) (if (null? g$3456$19959) (list '(primitive syntax-error) g$3456$19957) ((lambda (g$3456$19967) ((lambda (g$3456$19969) (if (if g$3456$19969 (begin '#f (apply (lambda (g$3456$19971 g$3456$19972) '#t) g$3456$19969)) '#f) (apply (lambda (g$3456$19975 g$3456$19976) (if (if (g$3456$13234 g$3456$19975) (if (not (g$3456$13248 g$3456$19975 g$3456$19958)) (begin '#f (not (g$3456$13579 g$3456$19975))) '#f) '#f) (if (g$3456$13242 g$3456$19975 (g$3456$13487 '_)) (g$3456$13605 g$3456$19976 g$3456$19960 g$3456$19961) ((lambda (g$3456$19979 g$3456$19980) ((lambda (g$3456$19983) (list (g$3456$13123 '#f (list g$3456$19980) g$3456$19983) g$3456$19957)) (g$3456$13605 (g$3456$13214 (g$3456$13181 (list g$3456$19975) (list g$3456$19979)) g$3456$19976) (cons (cons g$3456$19979 (g$3456$13260 'syntax (cons g$3456$19980 '0))) g$3456$19960) g$3456$19961))) (g$3456$13148 g$3456$19975) (g$3456$13144 g$3456$19975))) (g$3456$19953 g$3456$19957 g$3456$19958 (cdr g$3456$19959) g$3456$19960 g$3456$19961 g$3456$19975 '#t g$3456$19976))) g$3456$19969) ((lambda (g$3456$19985) ((lambda (g$3456$19987) (if (if g$3456$19987 (begin '#f (apply (lambda (g$3456$19989 g$3456$19990 g$3456$19991) '#t) g$3456$19987)) '#f) (apply (lambda (g$3456$19995 g$3456$19996 g$3456$19997) (g$3456$19953 g$3456$19957 g$3456$19958 (cdr g$3456$19959) g$3456$19960 g$3456$19961 g$3456$19995 g$3456$19996 g$3456$19997)) g$3456$19987) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$19985 '())))) ((lambda (g$3456$20001) (if (g$3456$13220 g$3456$20001) (begin '#f ((lambda (g$3456$20003) (if g$3456$20003 (begin '#f ((lambda (g$3456$20005) (if g$3456$20005 (begin '#f (append g$3456$20003 g$3456$20005)) '#f)) ((lambda (g$3456$20007) (if (g$3456$13220 g$3456$20007) (begin '#f ((lambda (g$3456$20009) (if g$3456$20009 (begin '#f ((lambda (g$3456$20011) (if g$3456$20011 (begin '#f (append g$3456$20009 g$3456$20011)) '#f)) ((lambda (g$3456$20013) (if (g$3456$13220 g$3456$20013) (begin '#f ((lambda (g$3456$20015) (if g$3456$20015 (begin '#f ((lambda (g$3456$20017) (if g$3456$20017 (begin '#f (append g$3456$20015 g$3456$20017)) '#f)) ((lambda (g$3456$20019) (if (equal? (g$3456$13254 g$3456$20019) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$20013)))) '#f)) ((lambda (g$3456$20021) (list g$3456$20021)) (g$3456$13228 g$3456$20013)))) '#f)) (g$3456$13232 g$3456$20007)))) '#f)) ((lambda (g$3456$20023) (list g$3456$20023)) (g$3456$13228 g$3456$20007)))) '#f)) (g$3456$13232 g$3456$20001)))) '#f)) ((lambda (g$3456$20025) (list g$3456$20025)) (g$3456$13228 g$3456$20001)))) '#f)) g$3456$19985))) g$3456$19967))) ((lambda (g$3456$20027) (if (g$3456$13220 g$3456$20027) (begin '#f ((lambda (g$3456$20029) (if g$3456$20029 (begin '#f ((lambda (g$3456$20031) (if g$3456$20031 (begin '#f (append g$3456$20029 g$3456$20031)) '#f)) ((lambda (g$3456$20033) (if (g$3456$13220 g$3456$20033) (begin '#f ((lambda (g$3456$20035) (if g$3456$20035 (begin '#f ((lambda (g$3456$20037) (if g$3456$20037 (begin '#f (append g$3456$20035 g$3456$20037)) '#f)) ((lambda (g$3456$20039) (if (equal? (g$3456$13254 g$3456$20039) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$20033)))) '#f)) ((lambda (g$3456$20041) (list g$3456$20041)) (g$3456$13228 g$3456$20033)))) '#f)) (g$3456$13232 g$3456$20027)))) '#f)) ((lambda (g$3456$20043) (list g$3456$20043)) (g$3456$13228 g$3456$20027)))) '#f)) g$3456$19967))) (car g$3456$19959))))) (lambda (g$3456$20115 g$3456$20116 g$3456$20117) ((lambda (g$3456$20121) ((lambda (g$3456$20123) (if (if g$3456$20123 (begin '#f (apply (lambda (g$3456$20125 g$3456$20126 g$3456$20127) '#t) g$3456$20123)) '#f) (apply (lambda (g$3456$20131 g$3456$20132 g$3456$20133) (begin (if (for-all (lambda (g$3456$20137) (if (g$3456$13234 g$3456$20137) (begin '#f (not (g$3456$13579 g$3456$20137))) '#f)) g$3456$20132) (void) (error 'expander '"invalid literals" (g$3456$13252 g$3456$20115 '()))) ((lambda (g$3456$20139) ((lambda (g$3456$20141) (list (g$3456$13123 '#f (list g$3456$20139) g$3456$20141) (g$3456$13605 g$3456$20131 g$3456$20116 g$3456$20117))) (g$3456$19955 g$3456$20139 g$3456$20132 g$3456$20133 g$3456$20116 g$3456$20117))) (g$3456$13144 'tmp)))) g$3456$20123) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20121 '())))) ((lambda (g$3456$20143) (if (g$3456$13220 g$3456$20143) (begin '#f ((lambda (g$3456$20145) (if g$3456$20145 (begin '#f ((lambda (g$3456$20147) (if g$3456$20147 (begin '#f (append g$3456$20145 g$3456$20147)) '#f)) ((lambda (g$3456$20149) (if (g$3456$13220 g$3456$20149) (begin '#f ((lambda (g$3456$20151) (if g$3456$20151 (begin '#f ((lambda (g$3456$20153) (if g$3456$20153 (begin '#f (append g$3456$20151 g$3456$20153)) '#f)) ((lambda (g$3456$20155) (if (g$3456$13220 g$3456$20155) (begin '#f ((lambda (g$3456$20157) (if g$3456$20157 (begin '#f ((lambda (g$3456$20159) (if g$3456$20159 (begin '#f (append g$3456$20157 g$3456$20159)) '#f)) ((letrec ((g$3456$20161 (lambda (g$3456$20163) (if (g$3456$13220 g$3456$20163) ((lambda (g$3456$20165) (if g$3456$20165 (begin '#f ((lambda (g$3456$20167) (if g$3456$20167 (begin '#f (map cons g$3456$20165 g$3456$20167)) '#f)) (g$3456$20161 (g$3456$13232 g$3456$20163)))) '#f)) ((lambda (g$3456$20169) (list g$3456$20169)) (g$3456$13228 g$3456$20163))) (if (g$3456$13224 g$3456$20163) (list (begin 'clauses '())) '#f))))) g$3456$20161) (g$3456$13232 g$3456$20155)))) '#f)) ((letrec ((g$3456$20171 (lambda (g$3456$20173) (if (g$3456$13220 g$3456$20173) ((lambda (g$3456$20175) (if g$3456$20175 (begin '#f ((lambda (g$3456$20177) (if g$3456$20177 (begin '#f (map cons g$3456$20175 g$3456$20177)) '#f)) (g$3456$20171 (g$3456$13232 g$3456$20173)))) '#f)) ((lambda (g$3456$20179) (list g$3456$20179)) (g$3456$13228 g$3456$20173))) (if (g$3456$13224 g$3456$20173) (list (begin 'keys '())) '#f))))) g$3456$20171) (g$3456$13228 g$3456$20155)))) '#f)) (g$3456$13232 g$3456$20149)))) '#f)) ((lambda (g$3456$20181) (list g$3456$20181)) (g$3456$13228 g$3456$20149)))) '#f)) (g$3456$13232 g$3456$20143)))) '#f)) ((lambda (g$3456$20183) '()) (g$3456$13228 g$3456$20143)))) '#f)) g$3456$20121))) g$3456$20115)))) '#f '#f '#f '#f)))) (set! g$3456$13583 ((lambda () ((lambda (g$3456$20185 g$3456$20187 g$3456$20189 g$3456$20191 g$3456$20193 g$3456$20195 g$3456$20197 g$3456$20199) (begin (set! g$3456$20185 (lambda (g$3456$20271 g$3456$20272 g$3456$20273 g$3456$20274 g$3456$20275 g$3456$20276) ((lambda (g$3456$20283) ((lambda (g$3456$20285) (if (if g$3456$20285 (begin '#f (apply (lambda (g$3456$20287) (g$3456$20275 g$3456$20287)) g$3456$20285)) '#f) (apply (lambda (g$3456$20289) (error 'expander '"misplaced ellipsis in syntax form" (g$3456$13252 g$3456$20271 '()))) g$3456$20285) ((lambda (g$3456$20291) ((lambda (g$3456$20293) (if (if g$3456$20293 (begin '#f (apply (lambda (g$3456$20295) (g$3456$13234 g$3456$20295)) g$3456$20293)) '#f) (apply (lambda (g$3456$20297) ((lambda (g$3456$20299) ((lambda (g$3456$20301) ((lambda () (if (eq? (g$3456$13262 g$3456$20301) 'syntax) (call-with-values (lambda () ((lambda (g$3456$20303) (g$3456$20187 g$3456$20271 (car g$3456$20303) (cdr g$3456$20303) g$3456$20274)) (g$3456$13264 g$3456$20301))) (lambda (g$3456$20305 g$3456$20306) (values (list 'ref g$3456$20305) g$3456$20306))) (values (list 'quote g$3456$20272) g$3456$20274))))) (g$3456$13258 g$3456$20299 g$3456$20273))) (g$3456$13256 g$3456$20272))) g$3456$20293) ((lambda (g$3456$20309) ((lambda (g$3456$20311) (if (if g$3456$20311 (begin '#f (apply (lambda (g$3456$20313 g$3456$20314) (g$3456$20275 g$3456$20313)) g$3456$20311)) '#f) (apply (lambda (g$3456$20317 g$3456$20318) (if g$3456$20276 (error 'expander '"misplaced ellipsis in syntax form" (g$3456$13252 g$3456$20271 '())) (g$3456$20185 g$3456$20271 g$3456$20318 g$3456$20273 g$3456$20274 (lambda (g$3456$20321) '#f) '#f))) g$3456$20311) ((lambda (g$3456$20323) ((lambda (g$3456$20325) (if (if g$3456$20325 (begin '#f (apply (lambda (g$3456$20327 g$3456$20328 g$3456$20329) (g$3456$20275 g$3456$20328)) g$3456$20325)) '#f) (apply (lambda (g$3456$20333 g$3456$20334 g$3456$20335) (letrec ((g$3456$20339 (lambda (g$3456$20347 g$3456$20348) ((lambda (g$3456$20351) ((lambda (g$3456$20353) (if (if g$3456$20353 (begin '#f (apply (lambda () '#t) g$3456$20353)) '#f) (apply (lambda () (g$3456$20348 g$3456$20274)) g$3456$20353) ((lambda (g$3456$20355) ((lambda (g$3456$20357) (if (if g$3456$20357 (begin '#f (apply (lambda (g$3456$20359 g$3456$20360) (g$3456$20275 g$3456$20359)) g$3456$20357)) '#f) (apply (lambda (g$3456$20363 g$3456$20364) (g$3456$20339 g$3456$20364 (lambda (g$3456$20367) (call-with-values (lambda () (g$3456$20348 (cons '() g$3456$20367))) (lambda (g$3456$20369 g$3456$20370) (if (null? (car g$3456$20370)) (error 'expander '"extra ellipsis in syntax form" (g$3456$13252 g$3456$20271 '())) (values (g$3456$20191 g$3456$20369 (car g$3456$20370)) (cdr g$3456$20370)))))))) g$3456$20357) ((lambda (g$3456$20373) ((lambda (g$3456$20375) (if (if g$3456$20375 (begin '#f (apply (lambda () '#t) g$3456$20375)) '#f) (apply (lambda () (call-with-values (lambda () (g$3456$20185 g$3456$20271 g$3456$20347 g$3456$20273 g$3456$20274 g$3456$20275 g$3456$20276)) (lambda (g$3456$20377 g$3456$20378) (call-with-values (lambda () (g$3456$20348 g$3456$20378)) (lambda (g$3456$20381 g$3456$20382) (values (g$3456$20189 g$3456$20381 g$3456$20377) g$3456$20382)))))) g$3456$20375) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20373 '())))) ((lambda (g$3456$20385) '()) g$3456$20373))) g$3456$20355))) ((lambda (g$3456$20387) (if (g$3456$13220 g$3456$20387) (begin '#f ((lambda (g$3456$20389) (if g$3456$20389 (begin '#f ((lambda (g$3456$20391) (if g$3456$20391 (begin '#f (append g$3456$20389 g$3456$20391)) '#f)) ((lambda (g$3456$20393) (list g$3456$20393)) (g$3456$13232 g$3456$20387)))) '#f)) ((lambda (g$3456$20395) (list g$3456$20395)) (g$3456$13228 g$3456$20387)))) '#f)) g$3456$20355))) g$3456$20351))) ((lambda (g$3456$20397) (if (equal? (g$3456$13254 g$3456$20397) '()) (begin '#f '()) '#f)) g$3456$20351))) g$3456$20347)))) (g$3456$20339 g$3456$20335 (lambda (g$3456$20341) (call-with-values (lambda () (g$3456$20185 g$3456$20271 g$3456$20333 g$3456$20273 (cons '() g$3456$20341) g$3456$20275 '#f)) (lambda (g$3456$20343 g$3456$20344) (if (null? (car g$3456$20344)) (error 'expander '"extra ellipsis in syntax form" (g$3456$13252 g$3456$20271 '())) (values (g$3456$20193 g$3456$20343 (car g$3456$20344)) (cdr g$3456$20344))))))))) g$3456$20325) ((lambda (g$3456$20399) ((lambda (g$3456$20401) (if (if g$3456$20401 (begin '#f (apply (lambda (g$3456$20403 g$3456$20404) '#t) g$3456$20401)) '#f) (apply (lambda (g$3456$20407 g$3456$20408) (call-with-values (lambda () (g$3456$20185 g$3456$20271 g$3456$20407 g$3456$20273 g$3456$20274 g$3456$20275 '#f)) (lambda (g$3456$20411 g$3456$20412) (call-with-values (lambda () (g$3456$20185 g$3456$20271 g$3456$20408 g$3456$20273 g$3456$20412 g$3456$20275 g$3456$20276)) (lambda (g$3456$20415 g$3456$20416) (values (g$3456$20195 g$3456$20272 g$3456$20407 g$3456$20408 g$3456$20411 g$3456$20415) g$3456$20416)))))) g$3456$20401) ((lambda (g$3456$20419) ((lambda (g$3456$20421) (if (if g$3456$20421 (begin '#f (apply (lambda (g$3456$20423) (not (g$3456$13186 g$3456$20272))) g$3456$20421)) '#f) (apply (lambda (g$3456$20425) (call-with-values (lambda () (g$3456$20185 g$3456$20271 g$3456$20425 g$3456$20273 g$3456$20274 g$3456$20275 '#t)) (lambda (g$3456$20427 g$3456$20428) (values (g$3456$20197 g$3456$20272 g$3456$20425 g$3456$20427) g$3456$20428)))) g$3456$20421) ((lambda (g$3456$20431) ((lambda (g$3456$20433) (if (if g$3456$20433 (begin '#f (apply (lambda () '#t) g$3456$20433)) '#f) (apply (lambda () (values (list 'quote g$3456$20272) g$3456$20274)) g$3456$20433) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20431 '())))) ((lambda (g$3456$20435) '()) g$3456$20431))) g$3456$20419))) ((lambda (g$3456$20437) (if (g$3456$13222 g$3456$20437) (begin '#f ((letrec ((g$3456$20439 (lambda (g$3456$20441) (if (g$3456$13220 g$3456$20441) ((lambda (g$3456$20443) (if g$3456$20443 (begin '#f ((lambda (g$3456$20445) (if g$3456$20445 (begin '#f (map cons g$3456$20443 g$3456$20445)) '#f)) (g$3456$20439 (g$3456$13232 g$3456$20441)))) '#f)) ((lambda (g$3456$20447) (list g$3456$20447)) (g$3456$13228 g$3456$20441))) (if (g$3456$13224 g$3456$20441) (list (begin 'ls '())) '#f))))) g$3456$20439) (g$3456$13218 g$3456$20437))) '#f)) g$3456$20419))) g$3456$20399))) ((lambda (g$3456$20449) (if (g$3456$13220 g$3456$20449) (begin '#f ((lambda (g$3456$20451) (if g$3456$20451 (begin '#f ((lambda (g$3456$20453) (if g$3456$20453 (begin '#f (append g$3456$20451 g$3456$20453)) '#f)) ((lambda (g$3456$20455) (list g$3456$20455)) (g$3456$13232 g$3456$20449)))) '#f)) ((lambda (g$3456$20457) (list g$3456$20457)) (g$3456$13228 g$3456$20449)))) '#f)) g$3456$20399))) g$3456$20323))) ((lambda (g$3456$20459) (if (g$3456$13220 g$3456$20459) (begin '#f ((lambda (g$3456$20461) (if g$3456$20461 (begin '#f ((lambda (g$3456$20463) (if g$3456$20463 (begin '#f (append g$3456$20461 g$3456$20463)) '#f)) ((lambda (g$3456$20465) (if (g$3456$13220 g$3456$20465) (begin '#f ((lambda (g$3456$20467) (if g$3456$20467 (begin '#f ((lambda (g$3456$20469) (if g$3456$20469 (begin '#f (append g$3456$20467 g$3456$20469)) '#f)) ((lambda (g$3456$20471) (list g$3456$20471)) (g$3456$13232 g$3456$20465)))) '#f)) ((lambda (g$3456$20473) (list g$3456$20473)) (g$3456$13228 g$3456$20465)))) '#f)) (g$3456$13232 g$3456$20459)))) '#f)) ((lambda (g$3456$20475) (list g$3456$20475)) (g$3456$13228 g$3456$20459)))) '#f)) g$3456$20323))) g$3456$20309))) ((lambda (g$3456$20477) (if (g$3456$13220 g$3456$20477) (begin '#f ((lambda (g$3456$20479) (if g$3456$20479 (begin '#f ((lambda (g$3456$20481) (if g$3456$20481 (begin '#f (append g$3456$20479 g$3456$20481)) '#f)) ((lambda (g$3456$20483) (if (g$3456$13220 g$3456$20483) (begin '#f ((lambda (g$3456$20485) (if g$3456$20485 (begin '#f ((lambda (g$3456$20487) (if g$3456$20487 (begin '#f (append g$3456$20485 g$3456$20487)) '#f)) ((lambda (g$3456$20489) (if (equal? (g$3456$13254 g$3456$20489) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$20483)))) '#f)) ((lambda (g$3456$20491) (list g$3456$20491)) (g$3456$13228 g$3456$20483)))) '#f)) (g$3456$13232 g$3456$20477)))) '#f)) ((lambda (g$3456$20493) (list g$3456$20493)) (g$3456$13228 g$3456$20477)))) '#f)) g$3456$20309))) g$3456$20291))) ((lambda (g$3456$20495) (list g$3456$20495)) g$3456$20291))) g$3456$20283))) ((lambda (g$3456$20497) (list g$3456$20497)) g$3456$20283))) g$3456$20272))) (set! g$3456$20187 (lambda (g$3456$20253 g$3456$20254 g$3456$20255 g$3456$20256) (if (= g$3456$20255 '0) (values g$3456$20254 g$3456$20256) (if (null? g$3456$20256) (error 'expander '"missing ellipsis in syntax form" (g$3456$13252 g$3456$20253 '())) (call-with-values (lambda () (g$3456$20187 g$3456$20253 g$3456$20254 (- g$3456$20255 '1) (cdr g$3456$20256))) (lambda (g$3456$20261 g$3456$20262) ((lambda (g$3456$20265) (if g$3456$20265 ((lambda (g$3456$20267) (values (cdr g$3456$20267) g$3456$20256)) g$3456$20265) ((lambda (g$3456$20269) (values g$3456$20269 (cons (cons (cons g$3456$20261 g$3456$20269) (car g$3456$20256)) g$3456$20262))) (g$3456$13144 'tmp)))) (assq g$3456$20261 (car g$3456$20256))))))))) (set! g$3456$20189 (lambda (g$3456$20249 g$3456$20250) (if (equal? g$3456$20250 ''()) g$3456$20249 (list 'append g$3456$20249 g$3456$20250)))) (set! g$3456$20191 (lambda (g$3456$20245 g$3456$20246) (list 'apply '(primitive append) (g$3456$20193 g$3456$20245 g$3456$20246)))) (set! g$3456$20193 (lambda (g$3456$20227 g$3456$20228) ((lambda (g$3456$20231 g$3456$20232) (if (eq? (car g$3456$20227) 'ref) (car g$3456$20232) (if (for-all (lambda (g$3456$20235) (if (eq? (car g$3456$20235) 'ref) (begin '#f (memq (cadr g$3456$20235) g$3456$20231)) '#f)) (cdr g$3456$20227)) ((lambda (g$3456$20237) (cons 'map (cons (list 'primitive (car g$3456$20227)) g$3456$20237))) (map ((lambda (g$3456$20239) (lambda (g$3456$20241) (cdr (assq (cadr g$3456$20241) g$3456$20239)))) (map cons g$3456$20231 g$3456$20232)) (cdr g$3456$20227))) (cons* 'map (list 'lambda g$3456$20231 g$3456$20227) g$3456$20232)))) (map cdr g$3456$20228) (map (lambda (g$3456$20243) (list 'ref (car g$3456$20243))) g$3456$20228)))) (set! g$3456$20195 (lambda (g$3456$20212 g$3456$20213 g$3456$20214 g$3456$20215 g$3456$20216) ((lambda (g$3456$20222) (if (memv g$3456$20222 '(quote)) (if (eq? (car g$3456$20215) 'quote) ((lambda (g$3456$20223 g$3456$20224) (if (if (eq? g$3456$20223 g$3456$20213) (begin '#f (eq? g$3456$20224 g$3456$20214)) '#f) (list 'quote g$3456$20212) (list 'quote (cons g$3456$20223 g$3456$20224)))) (cadr g$3456$20215) (cadr g$3456$20216)) (if (null? (cadr g$3456$20216)) (list 'list g$3456$20215) (list 'cons g$3456$20215 g$3456$20216))) (if (memv g$3456$20222 '(list)) (cons 'list (cons g$3456$20215 (cdr g$3456$20216))) (list 'cons g$3456$20215 g$3456$20216)))) (car g$3456$20216)))) (set! g$3456$20197 (lambda (g$3456$20206 g$3456$20207 g$3456$20208) (if (eq? (car g$3456$20208) 'quote) (if (eq? (cadr g$3456$20208) g$3456$20207) (list 'quote g$3456$20206) (list 'quote (list->vector (cadr g$3456$20208)))) (if (eq? (car g$3456$20208) 'list) (cons 'vector (cdr g$3456$20208)) (list 'list->vector g$3456$20208))))) (set! g$3456$20199 (lambda (g$3456$20201) ((lambda (g$3456$20203) (if (memv g$3456$20203 '(ref)) (cadr g$3456$20201) (if (memv g$3456$20203 '(primitive)) (list 'primitive (cadr g$3456$20201)) (if (memv g$3456$20203 '(quote)) (list 'quote (cadr g$3456$20201)) (if (memv g$3456$20203 '(lambda)) (g$3456$13123 '#f (cadr g$3456$20201) (g$3456$20199 (caddr g$3456$20201))) (if (memv g$3456$20203 '(map)) ((lambda (g$3456$20204) (cons '(primitive map) g$3456$20204)) (map g$3456$20199 (cdr g$3456$20201))) (cons (list 'primitive (car g$3456$20201)) (map g$3456$20199 (cdr g$3456$20201))))))))) (car g$3456$20201)))) (lambda (g$3456$20499 g$3456$20500 g$3456$20501) ((lambda (g$3456$20505) ((lambda (g$3456$20507) (if (if g$3456$20507 (begin '#f (apply (lambda (g$3456$20509) '#t) g$3456$20507)) '#f) (apply (lambda (g$3456$20511) (call-with-values (lambda () (g$3456$20185 g$3456$20499 g$3456$20511 g$3456$20500 '() g$3456$13579 '#f)) (lambda (g$3456$20513 g$3456$20514) (g$3456$20199 g$3456$20513)))) g$3456$20507) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20505 '())))) ((lambda (g$3456$20517) (if (g$3456$13220 g$3456$20517) (begin '#f ((lambda (g$3456$20519) (if g$3456$20519 (begin '#f ((lambda (g$3456$20521) (if g$3456$20521 (begin '#f (append g$3456$20519 g$3456$20521)) '#f)) ((lambda (g$3456$20523) (if (g$3456$13220 g$3456$20523) (begin '#f ((lambda (g$3456$20525) (if g$3456$20525 (begin '#f ((lambda (g$3456$20527) (if g$3456$20527 (begin '#f (append g$3456$20525 g$3456$20527)) '#f)) ((lambda (g$3456$20529) (if (equal? (g$3456$13254 g$3456$20529) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$20523)))) '#f)) ((lambda (g$3456$20531) (list g$3456$20531)) (g$3456$13228 g$3456$20523)))) '#f)) (g$3456$13232 g$3456$20517)))) '#f)) ((lambda (g$3456$20533) '()) (g$3456$13228 g$3456$20517)))) '#f)) g$3456$20505))) g$3456$20499)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$3456$13585 (lambda (g$3456$20535) ((lambda (g$3456$20537) (if (memv g$3456$20537 '(quote)) g$3456$13515 (if (memv g$3456$20537 '(lambda)) g$3456$13519 (if (memv g$3456$20537 '(case-lambda)) g$3456$13517 (if (memv g$3456$20537 '(let-values)) g$3456$13493 (if (memv g$3456$20537 '(letrec)) g$3456$13497 (if (memv g$3456$20537 '(letrec*)) g$3456$13499 (if (memv g$3456$20537 '(case)) g$3456$13513 (if (memv g$3456$20537 '(if)) g$3456$13511 (if (memv g$3456$20537 '(when)) g$3456$13507 (if (memv g$3456$20537 '(unless)) g$3456$13509 (if (memv g$3456$20537 '(parameterize)) g$3456$13571 (if (memv g$3456$20537 '(foreign-call)) g$3456$13573 (if (memv g$3456$20537 '(syntax-case)) g$3456$13581 (if (memv g$3456$20537 '(syntax)) g$3456$13583 (if (memv g$3456$20537 '(type-descriptor)) g$3456$13501 (if (memv g$3456$20537 '(record-type-descriptor)) g$3456$13503 (if (memv g$3456$20537 '(record-constructor-descriptor)) g$3456$13505 (error 'macro-transformer '"cannot find transformer" g$3456$20535))))))))))))))))))) g$3456$20535))) (set! g$3456$13587 (lambda (g$3456$20538) ((lambda (g$3456$20540) ((lambda (g$3456$20542) (if (if g$3456$20542 (begin '#f (apply (lambda (g$3456$20544) (if (for-all g$3456$13234 g$3456$20544) (begin '#f (g$3456$12320 (map g$3456$13236 g$3456$20544))) '#f)) g$3456$20542)) '#f) (apply (lambda (g$3456$20546) (g$3456$13521 (list 'quote (g$3456$12320 (map g$3456$13236 g$3456$20546))))) g$3456$20542) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20540 '())))) ((lambda (g$3456$20548) (if (g$3456$13220 g$3456$20548) (begin '#f ((lambda (g$3456$20550) (if g$3456$20550 (begin '#f ((lambda (g$3456$20552) (if g$3456$20552 (begin '#f (append g$3456$20550 g$3456$20552)) '#f)) ((letrec ((g$3456$20554 (lambda (g$3456$20556) (if (g$3456$13220 g$3456$20556) ((lambda (g$3456$20558) (if g$3456$20558 (begin '#f ((lambda (g$3456$20560) (if g$3456$20560 (begin '#f (map cons g$3456$20558 g$3456$20560)) '#f)) (g$3456$20554 (g$3456$13232 g$3456$20556)))) '#f)) ((lambda (g$3456$20562) (list g$3456$20562)) (g$3456$13228 g$3456$20556))) (if (g$3456$13224 g$3456$20556) (list (begin 'opt* '())) '#f))))) g$3456$20554) (g$3456$13232 g$3456$20548)))) '#f)) ((lambda (g$3456$20564) '()) (g$3456$13228 g$3456$20548)))) '#f)) g$3456$20540))) g$3456$20538))) (set! g$3456$13589 (lambda (g$3456$20566 g$3456$20567) ((lambda (g$3456$20570) ((lambda (g$3456$20572) (if (if g$3456$20572 (begin '#f (apply (lambda (g$3456$20574) (if (g$3456$13234 g$3456$20574) (begin '#f (memq (g$3456$13236 g$3456$20574) g$3456$20567)) '#f)) g$3456$20572)) '#f) (apply (lambda (g$3456$20576) (g$3456$13521 (list 'quote g$3456$20576))) g$3456$20572) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20570 '())))) ((lambda (g$3456$20578) (if (g$3456$13220 g$3456$20578) (begin '#f ((lambda (g$3456$20580) (if g$3456$20580 (begin '#f ((lambda (g$3456$20582) (if g$3456$20582 (begin '#f (append g$3456$20580 g$3456$20582)) '#f)) ((lambda (g$3456$20584) (if (g$3456$13220 g$3456$20584) (begin '#f ((lambda (g$3456$20586) (if g$3456$20586 (begin '#f ((lambda (g$3456$20588) (if g$3456$20588 (begin '#f (append g$3456$20586 g$3456$20588)) '#f)) ((lambda (g$3456$20590) (if (equal? (g$3456$13254 g$3456$20590) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$20584)))) '#f)) ((lambda (g$3456$20592) (list g$3456$20592)) (g$3456$13228 g$3456$20584)))) '#f)) (g$3456$13232 g$3456$20578)))) '#f)) ((lambda (g$3456$20594) '()) (g$3456$13228 g$3456$20578)))) '#f)) g$3456$20570))) g$3456$20566))) (set! g$3456$13591 (lambda (g$3456$20596) (if (procedure? g$3456$20596) g$3456$20596 (if (symbol? g$3456$20596) ((lambda (g$3456$20598) (if (memv g$3456$20598 '(define-record-type)) g$3456$13565 (if (memv g$3456$20598 '(define-struct)) g$3456$13563 (if (memv g$3456$20598 '(include)) g$3456$13555 (if (memv g$3456$20598 '(cond)) g$3456$13553 (if (memv g$3456$20598 '(let)) g$3456$13525 (if (memv g$3456$20598 '(do)) g$3456$13545 (if (memv g$3456$20598 '(or)) g$3456$13549 (if (memv g$3456$20598 '(and)) g$3456$13551 (if (memv g$3456$20598 '(let*)) g$3456$13547 (if (memv g$3456$20598 '(syntax-rules)) g$3456$13557 (if (memv g$3456$20598 '(quasiquote)) g$3456$13559 (if (memv g$3456$20598 '(quasisyntax)) g$3456$13561 (if (memv g$3456$20598 '(with-syntax)) g$3456$13523 (if (memv g$3456$20598 '(identifier-syntax)) g$3456$13543 (if (memv g$3456$20598 '(time)) g$3456$13535 (if (memv g$3456$20598 '(delay)) g$3456$13537 (if (memv g$3456$20598 '(assert)) g$3456$13539 (if (memv g$3456$20598 '(endianness)) g$3456$13541 (if (memv g$3456$20598 '(guard)) g$3456$13531 (if (memv g$3456$20598 '(define-enumeration)) g$3456$13533 (if (memv g$3456$20598 '(trace-lambda)) g$3456$13527 (if (memv g$3456$20598 '(trace-define)) g$3456$13529 (if (memv g$3456$20598 '(define-condition-type)) g$3456$13567 (if (memv g$3456$20598 '(eol-style)) (lambda (g$3456$20603) (g$3456$13589 g$3456$20603 '(none lf cr crlf nel crnel ls))) (if (memv g$3456$20598 '(error-handling-mode)) (lambda (g$3456$20601) (g$3456$13589 g$3456$20601 '(ignore raise replace))) (if (memv g$3456$20598 '(buffer-mode)) (lambda (g$3456$20599) (g$3456$13589 g$3456$20599 '(none line block))) (if (memv g$3456$20598 '(file-options)) g$3456$13587 (if (memv g$3456$20598 '(|...| => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) g$3456$13569 (error 'macro-transformer '"invalid macro" g$3456$20596)))))))))))))))))))))))))))))) g$3456$20596) (error 'core-macro-transformer '"invalid macro" g$3456$20596))))) (set! g$3456$13593 (lambda (g$3456$20605) (car g$3456$20605))) (set! g$3456$13595 (lambda (g$3456$20607 g$3456$20608) ((lambda (g$3456$20611) (g$3456$13212 (g$3456$13202) g$3456$20611)) ((g$3456$13591 g$3456$20607) (g$3456$13212 g$3456$13204 g$3456$20608))))) (set! g$3456$13597 (lambda (g$3456$20613 g$3456$20614) ((lambda (g$3456$20617) (g$3456$13212 (g$3456$13202) g$3456$20617)) ((g$3456$13593 g$3456$20613) (g$3456$13212 g$3456$13204 g$3456$20614))))) (set! g$3456$13599 (lambda (g$3456$20619 g$3456$20620) ((lambda (g$3456$20623 g$3456$20624) (begin (g$3456$12838 g$3456$20623) ((lambda (g$3456$20627) ((lambda (g$3456$20629) ((lambda (g$3456$20631) (g$3456$13212 (g$3456$13202) g$3456$20631)) (g$3456$20629 (g$3456$13212 g$3456$13204 g$3456$20620)))) (if (procedure? g$3456$20627) g$3456$20627 (error 'chi-global-macro '"not a procedure")))) (symbol-value g$3456$20624)))) (car g$3456$20619) (cdr g$3456$20619)))) (set! g$3456$13601 (lambda (g$3456$20633 g$3456$20634 g$3456$20635) (if (null? g$3456$20633) '() ((lambda (g$3456$20639) (cons g$3456$20639 (g$3456$13601 (cdr g$3456$20633) g$3456$20634 g$3456$20635))) (g$3456$13605 (car g$3456$20633) g$3456$20634 g$3456$20635))))) (set! g$3456$13603 (lambda (g$3456$20641 g$3456$20642 g$3456$20643) ((lambda (g$3456$20647) ((lambda (g$3456$20649) (if (if g$3456$20649 (begin '#f (apply (lambda (g$3456$20651 g$3456$20652) '#t) g$3456$20649)) '#f) (apply (lambda (g$3456$20655 g$3456$20656) ((lambda (g$3456$20659) (cons g$3456$20659 (g$3456$13601 g$3456$20656 g$3456$20642 g$3456$20643))) (g$3456$13605 g$3456$20655 g$3456$20642 g$3456$20643))) g$3456$20649) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20647 '())))) ((lambda (g$3456$20661) (if (g$3456$13220 g$3456$20661) (begin '#f ((lambda (g$3456$20663) (if g$3456$20663 (begin '#f ((lambda (g$3456$20665) (if g$3456$20665 (begin '#f (append g$3456$20663 g$3456$20665)) '#f)) ((letrec ((g$3456$20667 (lambda (g$3456$20669) (if (g$3456$13220 g$3456$20669) ((lambda (g$3456$20671) (if g$3456$20671 (begin '#f ((lambda (g$3456$20673) (if g$3456$20673 (begin '#f (map cons g$3456$20671 g$3456$20673)) '#f)) (g$3456$20667 (g$3456$13232 g$3456$20669)))) '#f)) ((lambda (g$3456$20675) (list g$3456$20675)) (g$3456$13228 g$3456$20669))) (if (g$3456$13224 g$3456$20669) (list (begin 'rands '())) '#f))))) g$3456$20667) (g$3456$13232 g$3456$20661)))) '#f)) ((lambda (g$3456$20677) (list g$3456$20677)) (g$3456$13228 g$3456$20661)))) '#f)) g$3456$20647))) g$3456$20641))) (set! g$3456$13605 (lambda (g$3456$20679 g$3456$20680 g$3456$20681) (call-with-values (lambda () (g$3456$13266 g$3456$20679 g$3456$20680)) (lambda (g$3456$20685 g$3456$20686 g$3456$20687) ((lambda (g$3456$20691) (if (memv g$3456$20691 '(core-macro)) ((lambda (g$3456$20828) (g$3456$20828 g$3456$20679 g$3456$20680 g$3456$20681)) (g$3456$13585 g$3456$20686)) (if (memv g$3456$20691 '(global)) ((lambda (g$3456$20824) ((lambda (g$3456$20826) ((lambda () (begin ((g$3456$13653) g$3456$20824) g$3456$20826)))) (cdr g$3456$20686))) (car g$3456$20686)) (if (memv g$3456$20691 '(core-prim)) ((lambda (g$3456$20822) (list 'primitive g$3456$20822)) g$3456$20686) (if (memv g$3456$20691 '(call)) (g$3456$13603 g$3456$20679 g$3456$20680 g$3456$20681) (if (memv g$3456$20691 '(lexical)) ((lambda (g$3456$20820) g$3456$20820) g$3456$20686) (if (memv g$3456$20691 '(global-macro global-macro!)) (g$3456$13605 (g$3456$13599 g$3456$20686 g$3456$20679) g$3456$20680 g$3456$20681) (if (memv g$3456$20691 '(local-macro local-macro!)) (g$3456$13605 (g$3456$13597 g$3456$20686 g$3456$20679) g$3456$20680 g$3456$20681) (if (memv g$3456$20691 '(macro macro!)) (g$3456$13605 (g$3456$13595 g$3456$20686 g$3456$20679) g$3456$20680 g$3456$20681) (if (memv g$3456$20691 '(constant)) ((lambda (g$3456$20818) (list 'quote g$3456$20818)) g$3456$20686) (if (memv g$3456$20691 '(set!)) (g$3456$13607 g$3456$20679 g$3456$20680 g$3456$20681) (if (memv g$3456$20691 '(begin)) ((lambda (g$3456$20780) ((lambda (g$3456$20782) (if (if g$3456$20782 (begin '#f (apply (lambda (g$3456$20784 g$3456$20785) '#t) g$3456$20782)) '#f) (apply (lambda (g$3456$20788 g$3456$20789) (g$3456$13117 '#f (g$3456$13601 (cons g$3456$20788 g$3456$20789) g$3456$20680 g$3456$20681))) g$3456$20782) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20780 '())))) ((lambda (g$3456$20792) (if (g$3456$13220 g$3456$20792) (begin '#f ((lambda (g$3456$20794) (if g$3456$20794 (begin '#f ((lambda (g$3456$20796) (if g$3456$20796 (begin '#f (append g$3456$20794 g$3456$20796)) '#f)) ((lambda (g$3456$20798) (if (g$3456$13220 g$3456$20798) (begin '#f ((lambda (g$3456$20800) (if g$3456$20800 (begin '#f ((lambda (g$3456$20802) (if g$3456$20802 (begin '#f (append g$3456$20800 g$3456$20802)) '#f)) ((letrec ((g$3456$20804 (lambda (g$3456$20806) (if (g$3456$13220 g$3456$20806) ((lambda (g$3456$20808) (if g$3456$20808 (begin '#f ((lambda (g$3456$20810) (if g$3456$20810 (begin '#f (map cons g$3456$20808 g$3456$20810)) '#f)) (g$3456$20804 (g$3456$13232 g$3456$20806)))) '#f)) ((lambda (g$3456$20812) (list g$3456$20812)) (g$3456$13228 g$3456$20806))) (if (g$3456$13224 g$3456$20806) (list (begin 'x* '())) '#f))))) g$3456$20804) (g$3456$13232 g$3456$20798)))) '#f)) ((lambda (g$3456$20814) (list g$3456$20814)) (g$3456$13228 g$3456$20798)))) '#f)) (g$3456$13232 g$3456$20792)))) '#f)) ((lambda (g$3456$20816) '()) (g$3456$13228 g$3456$20792)))) '#f)) g$3456$20780))) g$3456$20679) (if (memv g$3456$20691 '(let-syntax letrec-syntax)) ((lambda (g$3456$20692) ((lambda (g$3456$20694) (if (if g$3456$20694 (begin '#f (apply (lambda (g$3456$20696 g$3456$20697 g$3456$20698 g$3456$20699) (if (g$3456$13244 g$3456$20696) (void) (error 'expander '"invalid identifiers" (g$3456$13252 g$3456$20679 '())))) g$3456$20694)) '#f) (apply (lambda (g$3456$20704 g$3456$20705 g$3456$20706 g$3456$20707) ((lambda (g$3456$20712) ((lambda (g$3456$20714) ((lambda (g$3456$20716) ((lambda () (g$3456$13117 '#f (g$3456$13601 (map (lambda (g$3456$20718) (g$3456$13214 g$3456$20714 g$3456$20718)) (cons g$3456$20706 g$3456$20707)) (append (map cons g$3456$20712 g$3456$20716) g$3456$20680) (append (map cons g$3456$20712 g$3456$20716) g$3456$20681)))))) (map (lambda (g$3456$20720) (g$3456$13284 (g$3456$13639 (if (eq? g$3456$20685 'let-syntax) g$3456$20720 (g$3456$13214 g$3456$20714 g$3456$20720)) g$3456$20681))) g$3456$20705))) (g$3456$13181 g$3456$20704 g$3456$20712))) (map g$3456$13148 g$3456$20704))) g$3456$20694) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20692 '())))) ((lambda (g$3456$20722) (if (g$3456$13220 g$3456$20722) (begin '#f ((lambda (g$3456$20724) (if g$3456$20724 (begin '#f ((lambda (g$3456$20726) (if g$3456$20726 (begin '#f (append g$3456$20724 g$3456$20726)) '#f)) ((lambda (g$3456$20728) (if (g$3456$13220 g$3456$20728) (begin '#f ((lambda (g$3456$20730) (if g$3456$20730 (begin '#f ((lambda (g$3456$20732) (if g$3456$20732 (begin '#f (append g$3456$20730 g$3456$20732)) '#f)) ((lambda (g$3456$20734) (if (g$3456$13220 g$3456$20734) (begin '#f ((lambda (g$3456$20736) (if g$3456$20736 (begin '#f ((lambda (g$3456$20738) (if g$3456$20738 (begin '#f (append g$3456$20736 g$3456$20738)) '#f)) ((letrec ((g$3456$20740 (lambda (g$3456$20742) (if (g$3456$13220 g$3456$20742) ((lambda (g$3456$20744) (if g$3456$20744 (begin '#f ((lambda (g$3456$20746) (if g$3456$20746 (begin '#f (map cons g$3456$20744 g$3456$20746)) '#f)) (g$3456$20740 (g$3456$13232 g$3456$20742)))) '#f)) ((lambda (g$3456$20748) (list g$3456$20748)) (g$3456$13228 g$3456$20742))) (if (g$3456$13224 g$3456$20742) (list (begin 'xbody* '())) '#f))))) g$3456$20740) (g$3456$13232 g$3456$20734)))) '#f)) ((lambda (g$3456$20750) (list g$3456$20750)) (g$3456$13228 g$3456$20734)))) '#f)) (g$3456$13232 g$3456$20728)))) '#f)) ((letrec ((g$3456$20752 (lambda (g$3456$20754) (if (g$3456$13220 g$3456$20754) ((lambda (g$3456$20756) (if g$3456$20756 (begin '#f ((lambda (g$3456$20758) (if g$3456$20758 (begin '#f (map cons g$3456$20756 g$3456$20758)) '#f)) (g$3456$20752 (g$3456$13232 g$3456$20754)))) '#f)) ((lambda (g$3456$20760) (if (g$3456$13220 g$3456$20760) (begin '#f ((lambda (g$3456$20762) (if g$3456$20762 (begin '#f ((lambda (g$3456$20764) (if g$3456$20764 (begin '#f (append g$3456$20762 g$3456$20764)) '#f)) ((lambda (g$3456$20766) (if (g$3456$13220 g$3456$20766) (begin '#f ((lambda (g$3456$20768) (if g$3456$20768 (begin '#f ((lambda (g$3456$20770) (if g$3456$20770 (begin '#f (append g$3456$20768 g$3456$20770)) '#f)) ((lambda (g$3456$20772) (if (equal? (g$3456$13254 g$3456$20772) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$20766)))) '#f)) ((lambda (g$3456$20774) (list g$3456$20774)) (g$3456$13228 g$3456$20766)))) '#f)) (g$3456$13232 g$3456$20760)))) '#f)) ((lambda (g$3456$20776) (list g$3456$20776)) (g$3456$13228 g$3456$20760)))) '#f)) (g$3456$13228 g$3456$20754))) (if (g$3456$13224 g$3456$20754) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$3456$20752) (g$3456$13228 g$3456$20728)))) '#f)) (g$3456$13232 g$3456$20722)))) '#f)) ((lambda (g$3456$20778) '()) (g$3456$13228 g$3456$20722)))) '#f)) g$3456$20692))) g$3456$20679) (if (memv g$3456$20691 '(displaced-lexical)) (error 'expander '"identifier out of context" (g$3456$13252 g$3456$20679 '())) (if (memv g$3456$20691 '(syntax)) (error 'expander '"reference to pattern variable outside a syntax form" (g$3456$13252 g$3456$20679 '())) (if (memv g$3456$20691 '(define define-syntax module import)) (error 'expander '"invalid expression" (g$3456$13252 g$3456$20679 '())) (error 'expander '"invalid expression" (g$3456$13252 g$3456$20679 '())))))))))))))))))) g$3456$20685))))) (set! g$3456$13607 (lambda (g$3456$20830 g$3456$20831 g$3456$20832) ((lambda (g$3456$20836) ((lambda (g$3456$20838) (if (if g$3456$20838 (begin '#f (apply (lambda (g$3456$20840 g$3456$20841) (g$3456$13234 g$3456$20840)) g$3456$20838)) '#f) (apply (lambda (g$3456$20844 g$3456$20845) (call-with-values (lambda () (g$3456$13266 g$3456$20844 g$3456$20831)) (lambda (g$3456$20848 g$3456$20849 g$3456$20850) ((lambda (g$3456$20854) (if (memv g$3456$20854 '(lexical)) (list 'set! g$3456$20849 (g$3456$13605 g$3456$20845 g$3456$20831 g$3456$20832)) (if (memv g$3456$20854 '(global core-prim)) (error 'expander '"cannot modify imported identifier in" (g$3456$13252 g$3456$20830 '())) (if (memv g$3456$20854 '(global-macro!)) (g$3456$13605 (g$3456$13599 g$3456$20849 g$3456$20830) g$3456$20831 g$3456$20832) (if (memv g$3456$20854 '(local-macro!)) (g$3456$13605 (g$3456$13597 g$3456$20849 g$3456$20830) g$3456$20831 g$3456$20832) (error 'expander '"invalid syntax" (g$3456$13254 g$3456$20830))))))) g$3456$20848)))) g$3456$20838) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20836 '())))) ((lambda (g$3456$20855) (if (g$3456$13220 g$3456$20855) (begin '#f ((lambda (g$3456$20857) (if g$3456$20857 (begin '#f ((lambda (g$3456$20859) (if g$3456$20859 (begin '#f (append g$3456$20857 g$3456$20859)) '#f)) ((lambda (g$3456$20861) (if (g$3456$13220 g$3456$20861) (begin '#f ((lambda (g$3456$20863) (if g$3456$20863 (begin '#f ((lambda (g$3456$20865) (if g$3456$20865 (begin '#f (append g$3456$20863 g$3456$20865)) '#f)) ((lambda (g$3456$20867) (if (g$3456$13220 g$3456$20867) (begin '#f ((lambda (g$3456$20869) (if g$3456$20869 (begin '#f ((lambda (g$3456$20871) (if g$3456$20871 (begin '#f (append g$3456$20869 g$3456$20871)) '#f)) ((lambda (g$3456$20873) (if (equal? (g$3456$13254 g$3456$20873) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$20867)))) '#f)) ((lambda (g$3456$20875) (list g$3456$20875)) (g$3456$13228 g$3456$20867)))) '#f)) (g$3456$13232 g$3456$20861)))) '#f)) ((lambda (g$3456$20877) (list g$3456$20877)) (g$3456$13228 g$3456$20861)))) '#f)) (g$3456$13232 g$3456$20855)))) '#f)) ((lambda (g$3456$20879) '()) (g$3456$13228 g$3456$20855)))) '#f)) g$3456$20836))) g$3456$20830))) (set! g$3456$13609 (lambda (g$3456$20881 g$3456$20882 g$3456$20883 g$3456$20884) ((lambda (g$3456$20889) ((lambda (g$3456$20891) (if (if g$3456$20891 (begin '#f (apply (lambda (g$3456$20893) '#t) g$3456$20891)) '#f) (apply (lambda (g$3456$20895) (if (g$3456$13244 g$3456$20895) ((lambda (g$3456$20897 g$3456$20898) (values g$3456$20897 (g$3456$13621 (g$3456$13214 (g$3456$13181 g$3456$20895 g$3456$20898) g$3456$20882) (g$3456$13491 g$3456$20898 g$3456$20897 g$3456$20883) g$3456$20884))) (map g$3456$13144 g$3456$20895) (map g$3456$13148 g$3456$20895)) (error 'expander '"invalid fmls" (g$3456$13252 g$3456$20881 '())))) g$3456$20891) ((lambda (g$3456$20901) ((lambda (g$3456$20903) (if (if g$3456$20903 (begin '#f (apply (lambda (g$3456$20905 g$3456$20906) '#t) g$3456$20903)) '#f) (apply (lambda (g$3456$20909 g$3456$20910) (if (g$3456$13244 (cons g$3456$20910 g$3456$20909)) ((lambda (g$3456$20913 g$3456$20914 g$3456$20915 g$3456$20916) (values (append g$3456$20913 g$3456$20915) (g$3456$13621 (g$3456$13214 (g$3456$13181 (cons g$3456$20910 g$3456$20909) (cons g$3456$20916 g$3456$20914)) g$3456$20882) (g$3456$13491 (cons g$3456$20916 g$3456$20914) (cons g$3456$20915 g$3456$20913) g$3456$20883) g$3456$20884))) (map g$3456$13144 g$3456$20909) (map g$3456$13148 g$3456$20909) (g$3456$13144 g$3456$20910) (g$3456$13148 g$3456$20910)) (error 'expander '"invalid fmls" (g$3456$13252 g$3456$20881 '())))) g$3456$20903) ((lambda (g$3456$20921) ((lambda (g$3456$20923) (if (if g$3456$20923 (begin '#f (apply (lambda () '#t) g$3456$20923)) '#f) (apply (lambda () (error 'expander '"invalid fmls" (g$3456$13252 g$3456$20881 '()))) g$3456$20923) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$20921 '())))) ((lambda (g$3456$20925) '()) g$3456$20921))) g$3456$20901))) ((letrec ((g$3456$20927 (lambda (g$3456$20933) (if (g$3456$13220 g$3456$20933) ((lambda (g$3456$20935) (if g$3456$20935 (begin '#f ((lambda (g$3456$20937) (if g$3456$20937 (begin '#f (cons (map cons g$3456$20935 (car g$3456$20937)) (cdr g$3456$20937))) '#f)) (g$3456$20927 (g$3456$13232 g$3456$20933)))) '#f)) ((lambda (g$3456$20939) (list g$3456$20939)) (g$3456$13228 g$3456$20933))) ((lambda (g$3456$20941) (if g$3456$20941 (begin '#f (cons (list (begin 'x* '())) g$3456$20941)) '#f)) ((lambda (g$3456$20943) (list g$3456$20943)) g$3456$20933)))))) (lambda (g$3456$20929) ((lambda (g$3456$20931) (if g$3456$20931 (begin '#f (append (car g$3456$20931) (cdr g$3456$20931))) '#f)) (g$3456$20927 g$3456$20929)))) g$3456$20901))) g$3456$20889))) ((letrec ((g$3456$20945 (lambda (g$3456$20947) (if (g$3456$13220 g$3456$20947) ((lambda (g$3456$20949) (if g$3456$20949 (begin '#f ((lambda (g$3456$20951) (if g$3456$20951 (begin '#f (map cons g$3456$20949 g$3456$20951)) '#f)) (g$3456$20945 (g$3456$13232 g$3456$20947)))) '#f)) ((lambda (g$3456$20953) (list g$3456$20953)) (g$3456$13228 g$3456$20947))) (if (g$3456$13224 g$3456$20947) (list (begin 'x* '())) '#f))))) g$3456$20945) g$3456$20889))) g$3456$20881))) (set! g$3456$13611 (lambda (g$3456$20955 g$3456$20956 g$3456$20957 g$3456$20958) (if (null? g$3456$20955) (values '() '()) (call-with-values (lambda () (g$3456$13609 (car g$3456$20955) (car g$3456$20956) g$3456$20957 g$3456$20958)) (lambda (g$3456$20963 g$3456$20964) (call-with-values (lambda () (g$3456$13611 (cdr g$3456$20955) (cdr g$3456$20956) g$3456$20957 g$3456$20958)) (lambda (g$3456$20967 g$3456$20968) (values (cons g$3456$20963 g$3456$20967) (cons g$3456$20964 g$3456$20968))))))))) (set! g$3456$13613 (lambda (g$3456$20971 g$3456$20972 g$3456$20973) ((lambda (g$3456$20977) (if (memv g$3456$20977 '(defun)) ((lambda (g$3456$20982) ((lambda (g$3456$20984 g$3456$20985) (call-with-values (lambda () (g$3456$13609 g$3456$20984 g$3456$20985 g$3456$20972 g$3456$20973)) (lambda (g$3456$20988 g$3456$20989) (g$3456$13123 '#f g$3456$20988 g$3456$20989)))) (car g$3456$20982) (cdr g$3456$20982))) (cdr g$3456$20971)) (if (memv g$3456$20977 '(expr)) ((lambda (g$3456$20980) (g$3456$13605 g$3456$20980 g$3456$20972 g$3456$20973)) (cdr g$3456$20971)) (if (memv g$3456$20977 '(top-expr)) ((lambda (g$3456$20978) (g$3456$13117 '#f (list (g$3456$13605 g$3456$20978 g$3456$20972 g$3456$20973) (g$3456$13116)))) (cdr g$3456$20971)) (error 'chi-rhs '"invalid rhs" g$3456$20971))))) (car g$3456$20971)))) (set! g$3456$13615 (lambda (g$3456$20992 g$3456$20993 g$3456$20994) (letrec ((g$3456$20998 (lambda (g$3456$21000) (if (null? g$3456$21000) '() ((lambda (g$3456$21002) (cons g$3456$21002 (g$3456$20998 (cdr g$3456$21000)))) (g$3456$13613 (car g$3456$21000) g$3456$20993 g$3456$20994)))))) (g$3456$20998 g$3456$20992)))) (set! g$3456$13617 (lambda (g$3456$21004 g$3456$21005 g$3456$21006) (if (null? g$3456$21005) '#f (if (g$3456$13240 g$3456$21004 (car g$3456$21005)) (car g$3456$21006) (g$3456$13617 g$3456$21004 (cdr g$3456$21005) (cdr g$3456$21006)))))) (set! g$3456$13619 (lambda (g$3456$21010) (letrec ((g$3456$21012 (lambda (g$3456$21014 g$3456$21015) (if (null? g$3456$21014) g$3456$21015 ((lambda (g$3456$21018) (if g$3456$21018 ((lambda (g$3456$21020) (g$3456$21012 (cdr g$3456$21014) (cons (list (car g$3456$21014) g$3456$21020) g$3456$21015))) g$3456$21018) (g$3456$21012 (cdr g$3456$21014) g$3456$21015))) (g$3456$13617 (car g$3456$21014) (cdr g$3456$21014) (cdr g$3456$21014))))))) (g$3456$21012 g$3456$21010 '())))) (set! g$3456$13621 (lambda (g$3456$21022 g$3456$21023 g$3456$21024) ((lambda (g$3456$21028) (call-with-values (lambda () (g$3456$13627 (map (lambda (g$3456$21030) (g$3456$13214 g$3456$21028 g$3456$21030)) (g$3456$13230 g$3456$21022)) g$3456$21023 g$3456$21024 '() '() '() '() g$3456$21028 '#f)) (lambda (g$3456$21032 g$3456$21033 g$3456$21034 g$3456$21035 g$3456$21036 g$3456$21037 g$3456$21038) (begin (if (null? g$3456$21032) (error 'expander '"no expression in body" (g$3456$13252 g$3456$21032 '())) (void)) ((lambda (g$3456$21046 g$3456$21047) (g$3456$13114 '#f (reverse g$3456$21035) (reverse g$3456$21046) (g$3456$13117 '#f g$3456$21047))) (g$3456$13615 g$3456$21036 g$3456$21033 g$3456$21034) (g$3456$13601 (append (apply append (reverse g$3456$21037)) g$3456$21032) g$3456$21033 g$3456$21034)))))) (g$3456$13171)))) (set! g$3456$13623 (lambda (g$3456$21050) ((lambda (g$3456$21052) ((lambda (g$3456$21054) (if (if g$3456$21054 (begin '#f (apply (lambda (g$3456$21056 g$3456$21057) '#t) g$3456$21054)) '#f) (apply (lambda (g$3456$21060 g$3456$21061) (begin (if (for-all g$3456$13234 g$3456$21060) (void) (error 'expander '"module exports must be identifiers" (g$3456$13252 g$3456$21050 '()))) (values '#f g$3456$21060 g$3456$21061))) g$3456$21054) ((lambda (g$3456$21064) ((lambda (g$3456$21066) (if (if g$3456$21066 (begin '#f (apply (lambda (g$3456$21068 g$3456$21069 g$3456$21070) '#t) g$3456$21066)) '#f) (apply (lambda (g$3456$21074 g$3456$21075 g$3456$21076) (begin (if (g$3456$13234 g$3456$21074) (void) (error 'expander '"module name must be an identifier" (g$3456$13252 g$3456$21050 '()))) (if (for-all g$3456$13234 g$3456$21075) (void) (error 'expander '"module exports must be identifiers" (g$3456$13252 g$3456$21050 '()))) (values g$3456$21074 g$3456$21075 g$3456$21076))) g$3456$21066) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$21064 '())))) ((lambda (g$3456$21080) (if (g$3456$13220 g$3456$21080) (begin '#f ((lambda (g$3456$21082) (if g$3456$21082 (begin '#f ((lambda (g$3456$21084) (if g$3456$21084 (begin '#f (append g$3456$21082 g$3456$21084)) '#f)) ((lambda (g$3456$21086) (if (g$3456$13220 g$3456$21086) (begin '#f ((lambda (g$3456$21088) (if g$3456$21088 (begin '#f ((lambda (g$3456$21090) (if g$3456$21090 (begin '#f (append g$3456$21088 g$3456$21090)) '#f)) ((lambda (g$3456$21092) (if (g$3456$13220 g$3456$21092) (begin '#f ((lambda (g$3456$21094) (if g$3456$21094 (begin '#f ((lambda (g$3456$21096) (if g$3456$21096 (begin '#f (append g$3456$21094 g$3456$21096)) '#f)) ((letrec ((g$3456$21098 (lambda (g$3456$21100) (if (g$3456$13220 g$3456$21100) ((lambda (g$3456$21102) (if g$3456$21102 (begin '#f ((lambda (g$3456$21104) (if g$3456$21104 (begin '#f (map cons g$3456$21102 g$3456$21104)) '#f)) (g$3456$21098 (g$3456$13232 g$3456$21100)))) '#f)) ((lambda (g$3456$21106) (list g$3456$21106)) (g$3456$13228 g$3456$21100))) (if (g$3456$13224 g$3456$21100) (list (begin 'b* '())) '#f))))) g$3456$21098) (g$3456$13232 g$3456$21092)))) '#f)) ((letrec ((g$3456$21108 (lambda (g$3456$21110) (if (g$3456$13220 g$3456$21110) ((lambda (g$3456$21112) (if g$3456$21112 (begin '#f ((lambda (g$3456$21114) (if g$3456$21114 (begin '#f (map cons g$3456$21112 g$3456$21114)) '#f)) (g$3456$21108 (g$3456$13232 g$3456$21110)))) '#f)) ((lambda (g$3456$21116) (list g$3456$21116)) (g$3456$13228 g$3456$21110))) (if (g$3456$13224 g$3456$21110) (list (begin 'export* '())) '#f))))) g$3456$21108) (g$3456$13228 g$3456$21092)))) '#f)) (g$3456$13232 g$3456$21086)))) '#f)) ((lambda (g$3456$21118) (list g$3456$21118)) (g$3456$13228 g$3456$21086)))) '#f)) (g$3456$13232 g$3456$21080)))) '#f)) ((lambda (g$3456$21120) '()) (g$3456$13228 g$3456$21080)))) '#f)) g$3456$21064))) g$3456$21052))) ((lambda (g$3456$21122) (if (g$3456$13220 g$3456$21122) (begin '#f ((lambda (g$3456$21124) (if g$3456$21124 (begin '#f ((lambda (g$3456$21126) (if g$3456$21126 (begin '#f (append g$3456$21124 g$3456$21126)) '#f)) ((lambda (g$3456$21128) (if (g$3456$13220 g$3456$21128) (begin '#f ((lambda (g$3456$21130) (if g$3456$21130 (begin '#f ((lambda (g$3456$21132) (if g$3456$21132 (begin '#f (append g$3456$21130 g$3456$21132)) '#f)) ((letrec ((g$3456$21134 (lambda (g$3456$21136) (if (g$3456$13220 g$3456$21136) ((lambda (g$3456$21138) (if g$3456$21138 (begin '#f ((lambda (g$3456$21140) (if g$3456$21140 (begin '#f (map cons g$3456$21138 g$3456$21140)) '#f)) (g$3456$21134 (g$3456$13232 g$3456$21136)))) '#f)) ((lambda (g$3456$21142) (list g$3456$21142)) (g$3456$13228 g$3456$21136))) (if (g$3456$13224 g$3456$21136) (list (begin 'b* '())) '#f))))) g$3456$21134) (g$3456$13232 g$3456$21128)))) '#f)) ((letrec ((g$3456$21144 (lambda (g$3456$21146) (if (g$3456$13220 g$3456$21146) ((lambda (g$3456$21148) (if g$3456$21148 (begin '#f ((lambda (g$3456$21150) (if g$3456$21150 (begin '#f (map cons g$3456$21148 g$3456$21150)) '#f)) (g$3456$21144 (g$3456$13232 g$3456$21146)))) '#f)) ((lambda (g$3456$21152) (list g$3456$21152)) (g$3456$13228 g$3456$21146))) (if (g$3456$13224 g$3456$21146) (list (begin 'export* '())) '#f))))) g$3456$21144) (g$3456$13228 g$3456$21128)))) '#f)) (g$3456$13232 g$3456$21122)))) '#f)) ((lambda (g$3456$21154) '()) (g$3456$13228 g$3456$21122)))) '#f)) g$3456$21052))) g$3456$21050))) (set! g$3456$13625 (lambda (g$3456$21156 g$3456$21157 g$3456$21158 g$3456$21159 g$3456$21160 g$3456$21161 g$3456$21162) (call-with-values (lambda () (g$3456$13623 g$3456$21156)) (lambda (g$3456$21170 g$3456$21171 g$3456$21172) ((lambda (g$3456$21176) ((lambda (g$3456$21178) ((lambda () (call-with-values (lambda () (g$3456$13627 g$3456$21178 g$3456$21157 g$3456$21158 g$3456$21159 g$3456$21160 g$3456$21161 g$3456$21162 g$3456$21176 '#f)) (lambda (g$3456$21180 g$3456$21181 g$3456$21182 g$3456$21183 g$3456$21184 g$3456$21185 g$3456$21186) ((lambda (g$3456$21194 g$3456$21195) (if (not g$3456$21170) (values g$3456$21183 g$3456$21184 g$3456$21171 g$3456$21194 g$3456$21181 g$3456$21182 g$3456$21195 g$3456$21186) ((lambda (g$3456$21198 g$3456$21199) (values g$3456$21183 g$3456$21184 (list g$3456$21170) (list g$3456$21198) (cons (cons g$3456$21198 (cons '$module g$3456$21199)) g$3456$21181) (cons (cons g$3456$21198 (cons '$module g$3456$21199)) g$3456$21182) g$3456$21195 g$3456$21186)) (g$3456$13148 'module) (cons g$3456$21171 g$3456$21194)))) (map (lambda (g$3456$21202) ((lambda (g$3456$21204) (if g$3456$21204 g$3456$21204 (begin '#f (error 'expander '"cannot find module export" (g$3456$13252 g$3456$21202 '()))))) (g$3456$13256 (g$3456$13210 (g$3456$13236 g$3456$21202) (g$3456$13190 g$3456$21202) (list g$3456$21176))))) g$3456$21171) (cons g$3456$21180 g$3456$21185))))))) (map (lambda (g$3456$21206) (g$3456$13214 g$3456$21176 g$3456$21206)) (g$3456$13230 g$3456$21172)))) (g$3456$13171)))))) (set! g$3456$13627 (lambda (g$3456$21208 g$3456$21209 g$3456$21210 g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21214 g$3456$21215 g$3456$21216) (if (null? g$3456$21208) (values g$3456$21208 g$3456$21209 g$3456$21210 g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21214) ((lambda (g$3456$21226) (call-with-values (lambda () (g$3456$13266 g$3456$21226 g$3456$21209)) (lambda (g$3456$21228 g$3456$21229 g$3456$21230) ((lambda (g$3456$21234) ((lambda (g$3456$21236) (if (memv g$3456$21236 '(define)) (call-with-values (lambda () (g$3456$13483 g$3456$21226)) (lambda (g$3456$21422 g$3456$21423) (begin (if (g$3456$13248 g$3456$21422 g$3456$21234) (error 'expander '"cannot redefine keyword" (g$3456$13252 g$3456$21226 '())) (void)) ((lambda (g$3456$21426 g$3456$21427) (begin (g$3456$13173 g$3456$21215 g$3456$21422 g$3456$21427) (g$3456$13627 (cdr g$3456$21208) (g$3456$13489 g$3456$21427 g$3456$21426 g$3456$21209) g$3456$21210 (cons g$3456$21426 g$3456$21211) (cons g$3456$21423 g$3456$21212) g$3456$21213 g$3456$21234 g$3456$21215 g$3456$21216))) (g$3456$13144 g$3456$21422) (g$3456$13148 g$3456$21422))))) (if (memv g$3456$21236 '(define-syntax)) (call-with-values (lambda () (g$3456$13485 g$3456$21226)) (lambda (g$3456$21412 g$3456$21413) (begin (if (g$3456$13248 g$3456$21412 g$3456$21234) (error 'expander '"cannot redefine keyword" (g$3456$13252 g$3456$21226 '())) (void)) ((lambda (g$3456$21416 g$3456$21417) (begin (g$3456$13173 g$3456$21215 g$3456$21412 g$3456$21416) ((lambda (g$3456$21420) (g$3456$13627 (cdr g$3456$21208) (cons (cons g$3456$21416 g$3456$21420) g$3456$21209) (cons (cons g$3456$21416 g$3456$21420) g$3456$21210) g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21234 g$3456$21215 g$3456$21216)) (g$3456$13284 g$3456$21417)))) (g$3456$13148 g$3456$21412) (g$3456$13639 g$3456$21413 g$3456$21210))))) (if (memv g$3456$21236 '(let-syntax letrec-syntax)) ((lambda (g$3456$21336) ((lambda (g$3456$21338) (if (if g$3456$21338 (begin '#f (apply (lambda (g$3456$21340 g$3456$21341 g$3456$21342) (if (g$3456$13244 g$3456$21340) (void) (error 'expander '"invalid identifiers" (g$3456$13252 g$3456$21226 '())))) g$3456$21338)) '#f) (apply (lambda (g$3456$21346 g$3456$21347 g$3456$21348) ((lambda (g$3456$21352) ((lambda (g$3456$21354) ((lambda (g$3456$21356) ((lambda () (g$3456$13627 (append (map (lambda (g$3456$21358) (g$3456$13214 g$3456$21354 g$3456$21358)) g$3456$21348) (cdr g$3456$21208)) (append (map cons g$3456$21352 g$3456$21356) g$3456$21209) (append (map cons g$3456$21352 g$3456$21356) g$3456$21210) g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21234 g$3456$21215 g$3456$21216)))) (map (lambda (g$3456$21360) (g$3456$13284 (g$3456$13639 (if (eq? g$3456$21228 'let-syntax) g$3456$21360 (g$3456$13214 g$3456$21354 g$3456$21360)) g$3456$21210))) g$3456$21347))) (g$3456$13181 g$3456$21346 g$3456$21352))) (map g$3456$13148 g$3456$21346))) g$3456$21338) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$21336 '())))) ((lambda (g$3456$21362) (if (g$3456$13220 g$3456$21362) (begin '#f ((lambda (g$3456$21364) (if g$3456$21364 (begin '#f ((lambda (g$3456$21366) (if g$3456$21366 (begin '#f (append g$3456$21364 g$3456$21366)) '#f)) ((lambda (g$3456$21368) (if (g$3456$13220 g$3456$21368) (begin '#f ((lambda (g$3456$21370) (if g$3456$21370 (begin '#f ((lambda (g$3456$21372) (if g$3456$21372 (begin '#f (append g$3456$21370 g$3456$21372)) '#f)) ((letrec ((g$3456$21374 (lambda (g$3456$21376) (if (g$3456$13220 g$3456$21376) ((lambda (g$3456$21378) (if g$3456$21378 (begin '#f ((lambda (g$3456$21380) (if g$3456$21380 (begin '#f (map cons g$3456$21378 g$3456$21380)) '#f)) (g$3456$21374 (g$3456$13232 g$3456$21376)))) '#f)) ((lambda (g$3456$21382) (list g$3456$21382)) (g$3456$13228 g$3456$21376))) (if (g$3456$13224 g$3456$21376) (list (begin 'xbody* '())) '#f))))) g$3456$21374) (g$3456$13232 g$3456$21368)))) '#f)) ((letrec ((g$3456$21384 (lambda (g$3456$21386) (if (g$3456$13220 g$3456$21386) ((lambda (g$3456$21388) (if g$3456$21388 (begin '#f ((lambda (g$3456$21390) (if g$3456$21390 (begin '#f (map cons g$3456$21388 g$3456$21390)) '#f)) (g$3456$21384 (g$3456$13232 g$3456$21386)))) '#f)) ((lambda (g$3456$21392) (if (g$3456$13220 g$3456$21392) (begin '#f ((lambda (g$3456$21394) (if g$3456$21394 (begin '#f ((lambda (g$3456$21396) (if g$3456$21396 (begin '#f (append g$3456$21394 g$3456$21396)) '#f)) ((lambda (g$3456$21398) (if (g$3456$13220 g$3456$21398) (begin '#f ((lambda (g$3456$21400) (if g$3456$21400 (begin '#f ((lambda (g$3456$21402) (if g$3456$21402 (begin '#f (append g$3456$21400 g$3456$21402)) '#f)) ((lambda (g$3456$21404) (if (equal? (g$3456$13254 g$3456$21404) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$21398)))) '#f)) ((lambda (g$3456$21406) (list g$3456$21406)) (g$3456$13228 g$3456$21398)))) '#f)) (g$3456$13232 g$3456$21392)))) '#f)) ((lambda (g$3456$21408) (list g$3456$21408)) (g$3456$13228 g$3456$21392)))) '#f)) (g$3456$13228 g$3456$21386))) (if (g$3456$13224 g$3456$21386) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$3456$21384) (g$3456$13228 g$3456$21368)))) '#f)) (g$3456$13232 g$3456$21362)))) '#f)) ((lambda (g$3456$21410) '()) (g$3456$13228 g$3456$21362)))) '#f)) g$3456$21336))) g$3456$21226) (if (memv g$3456$21236 '(begin)) ((lambda (g$3456$21310) ((lambda (g$3456$21312) (if (if g$3456$21312 (begin '#f (apply (lambda (g$3456$21314) '#t) g$3456$21312)) '#f) (apply (lambda (g$3456$21316) (g$3456$13627 (append g$3456$21316 (cdr g$3456$21208)) g$3456$21209 g$3456$21210 g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21234 g$3456$21215 g$3456$21216)) g$3456$21312) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$21310 '())))) ((lambda (g$3456$21318) (if (g$3456$13220 g$3456$21318) (begin '#f ((lambda (g$3456$21320) (if g$3456$21320 (begin '#f ((lambda (g$3456$21322) (if g$3456$21322 (begin '#f (append g$3456$21320 g$3456$21322)) '#f)) ((letrec ((g$3456$21324 (lambda (g$3456$21326) (if (g$3456$13220 g$3456$21326) ((lambda (g$3456$21328) (if g$3456$21328 (begin '#f ((lambda (g$3456$21330) (if g$3456$21330 (begin '#f (map cons g$3456$21328 g$3456$21330)) '#f)) (g$3456$21324 (g$3456$13232 g$3456$21326)))) '#f)) ((lambda (g$3456$21332) (list g$3456$21332)) (g$3456$13228 g$3456$21326))) (if (g$3456$13224 g$3456$21326) (list (begin 'x* '())) '#f))))) g$3456$21324) (g$3456$13232 g$3456$21318)))) '#f)) ((lambda (g$3456$21334) '()) (g$3456$13228 g$3456$21318)))) '#f)) g$3456$21310))) g$3456$21226) (if (memv g$3456$21236 '(global-macro global-macro!)) (g$3456$13627 (cons (g$3456$13214 g$3456$21215 (g$3456$13599 g$3456$21229 g$3456$21226)) (cdr g$3456$21208)) g$3456$21209 g$3456$21210 g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21234 g$3456$21215 g$3456$21216) (if (memv g$3456$21236 '(local-macro local-macro!)) (g$3456$13627 (cons (g$3456$13214 g$3456$21215 (g$3456$13597 g$3456$21229 g$3456$21226)) (cdr g$3456$21208)) g$3456$21209 g$3456$21210 g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21234 g$3456$21215 g$3456$21216) (if (memv g$3456$21236 '(macro macro!)) (g$3456$13627 (cons (g$3456$13214 g$3456$21215 (g$3456$13595 g$3456$21229 g$3456$21226)) (cdr g$3456$21208)) g$3456$21209 g$3456$21210 g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21234 g$3456$21215 g$3456$21216) (if (memv g$3456$21236 '(module)) (call-with-values (lambda () (g$3456$13625 g$3456$21226 g$3456$21209 g$3456$21210 g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21234)) (lambda (g$3456$21290 g$3456$21291 g$3456$21292 g$3456$21293 g$3456$21294 g$3456$21295 g$3456$21296 g$3456$21297) (begin (for-each (lambda (g$3456$21306 g$3456$21307) (g$3456$13173 g$3456$21215 g$3456$21306 g$3456$21307)) g$3456$21292 g$3456$21293) (g$3456$13627 (cdr g$3456$21208) g$3456$21294 g$3456$21295 g$3456$21290 g$3456$21291 g$3456$21296 g$3456$21297 g$3456$21215 g$3456$21216)))) (if (memv g$3456$21236 '(import)) (begin ((lambda () ((lambda (g$3456$21237) (begin (set! g$3456$21237 (lambda (g$3456$21239 g$3456$21240) ((lambda (g$3456$21243) ((lambda (g$3456$21245) (if (if g$3456$21245 (begin '#f (apply (lambda (g$3456$21247) (g$3456$13234 g$3456$21247)) g$3456$21245)) '#f) (apply (lambda (g$3456$21249) (call-with-values (lambda () (g$3456$13266 g$3456$21249 g$3456$21240)) (lambda (g$3456$21251 g$3456$21252 g$3456$21253) ((lambda (g$3456$21257) (if (memv g$3456$21257 '($module)) ((lambda (g$3456$21258) ((lambda (g$3456$21260 g$3456$21261) (values g$3456$21260 g$3456$21261)) (car g$3456$21258) (cdr g$3456$21258))) g$3456$21252) (error 'expander '"invalid import" (g$3456$13252 g$3456$21239 '())))) g$3456$21251)))) g$3456$21245) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$21243 '())))) ((lambda (g$3456$21264) (if (g$3456$13220 g$3456$21264) (begin '#f ((lambda (g$3456$21266) (if g$3456$21266 (begin '#f ((lambda (g$3456$21268) (if g$3456$21268 (begin '#f (append g$3456$21266 g$3456$21268)) '#f)) ((lambda (g$3456$21270) (if (g$3456$13220 g$3456$21270) (begin '#f ((lambda (g$3456$21272) (if g$3456$21272 (begin '#f ((lambda (g$3456$21274) (if g$3456$21274 (begin '#f (append g$3456$21272 g$3456$21274)) '#f)) ((lambda (g$3456$21276) (if (equal? (g$3456$13254 g$3456$21276) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$21270)))) '#f)) ((lambda (g$3456$21278) (list g$3456$21278)) (g$3456$13228 g$3456$21270)))) '#f)) (g$3456$13232 g$3456$21264)))) '#f)) ((lambda (g$3456$21280) '()) (g$3456$13228 g$3456$21264)))) '#f)) g$3456$21243))) g$3456$21239))) (call-with-values (lambda () (g$3456$21237 g$3456$21226 g$3456$21209)) (lambda (g$3456$21282 g$3456$21283) (for-each (lambda (g$3456$21286 g$3456$21287) (g$3456$13173 g$3456$21215 g$3456$21286 g$3456$21287)) g$3456$21282 g$3456$21283))))) '#f))) (g$3456$13627 (cdr g$3456$21208) g$3456$21209 g$3456$21210 g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21234 g$3456$21215 g$3456$21216)) (if g$3456$21216 (g$3456$13627 (cdr g$3456$21208) g$3456$21209 g$3456$21210 (cons (g$3456$13144 'dummy) g$3456$21211) (cons (cons 'top-expr g$3456$21226) g$3456$21212) g$3456$21213 g$3456$21234 g$3456$21215 g$3456$21216) (values g$3456$21208 g$3456$21209 g$3456$21210 g$3456$21211 g$3456$21212 g$3456$21213 g$3456$21234)))))))))))) g$3456$21228)) (if (g$3456$13234 g$3456$21230) (cons g$3456$21230 g$3456$21214) g$3456$21214))))) (car g$3456$21208))))) (set! g$3456$13629 (lambda (g$3456$21430 g$3456$21431 g$3456$21432) (begin (g$3456$12842 (g$3456$13720) g$3456$21430 g$3456$21431) (g$3456$12841 (g$3456$13720) g$3456$21431 g$3456$21432)))) (set! g$3456$13631 (lambda (g$3456$21436 g$3456$21437) (g$3456$13633 g$3456$21436 g$3456$21437))) (set! g$3456$13633 (lambda (g$3456$21440 g$3456$21441) ((lambda (g$3456$21444) ((lambda (g$3456$21446) ((lambda (g$3456$21448) (if (memv g$3456$21448 '(global)) ((lambda (g$3456$21449) ((lambda (g$3456$21451 g$3456$21452) (if (eq? g$3456$21451 (g$3456$13720)) g$3456$21452 (error 'expander '"cannot modify imported binding" (g$3456$13252 g$3456$21441 '())))) (car g$3456$21449) (cdr g$3456$21449))) (g$3456$13264 g$3456$21446)) (error 'expander '"cannot modify binding in" (g$3456$13252 g$3456$21441 '())))) (g$3456$13262 g$3456$21446))) (g$3456$12840 g$3456$21444))) (g$3456$13256 g$3456$21440)))) (set! g$3456$13635 (lambda (g$3456$21455) ((lambda (g$3456$21457) ((lambda (g$3456$21459) (if (if g$3456$21459 (begin '#f (apply (lambda (g$3456$21461 g$3456$21462) (g$3456$13234 g$3456$21461)) g$3456$21459)) '#f) (apply (lambda (g$3456$21465 g$3456$21466) ((lambda (g$3456$21469) ((lambda (g$3456$21471) (values g$3456$21469 g$3456$21471)) (g$3456$13605 g$3456$21466 '() '()))) (g$3456$13633 g$3456$21465 g$3456$21455))) g$3456$21459) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$21457 '())))) ((lambda (g$3456$21473) (if (g$3456$13220 g$3456$21473) (begin '#f ((lambda (g$3456$21475) (if g$3456$21475 (begin '#f ((lambda (g$3456$21477) (if g$3456$21477 (begin '#f (append g$3456$21475 g$3456$21477)) '#f)) ((lambda (g$3456$21479) (if (g$3456$13220 g$3456$21479) (begin '#f ((lambda (g$3456$21481) (if g$3456$21481 (begin '#f ((lambda (g$3456$21483) (if g$3456$21483 (begin '#f (append g$3456$21481 g$3456$21483)) '#f)) ((lambda (g$3456$21485) (if (g$3456$13220 g$3456$21485) (begin '#f ((lambda (g$3456$21487) (if g$3456$21487 (begin '#f ((lambda (g$3456$21489) (if g$3456$21489 (begin '#f (append g$3456$21487 g$3456$21489)) '#f)) ((lambda (g$3456$21491) (if (equal? (g$3456$13254 g$3456$21491) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$21485)))) '#f)) ((lambda (g$3456$21493) (list g$3456$21493)) (g$3456$13228 g$3456$21485)))) '#f)) (g$3456$13232 g$3456$21479)))) '#f)) ((lambda (g$3456$21495) (list g$3456$21495)) (g$3456$13228 g$3456$21479)))) '#f)) (g$3456$13232 g$3456$21473)))) '#f)) ((lambda (g$3456$21497) '()) (g$3456$13228 g$3456$21473)))) '#f)) g$3456$21457))) g$3456$21455))) (set! g$3456$13637 (lambda (g$3456$21499 g$3456$21500) (if (null? g$3456$21499) g$3456$21500 ((lambda (g$3456$21503) (call-with-values (lambda () (g$3456$13266 g$3456$21503 '())) (lambda (g$3456$21505 g$3456$21506 g$3456$21507) ((lambda (g$3456$21511) (if (memv g$3456$21511 '(define)) (call-with-values (lambda () (g$3456$13483 g$3456$21503)) (lambda (g$3456$21552 g$3456$21553) ((lambda (g$3456$21556) ((lambda (g$3456$21558) (g$3456$13637 (cdr g$3456$21499) (cons (cons g$3456$21556 g$3456$21558) g$3456$21500))) (g$3456$13613 g$3456$21553 '() '()))) (g$3456$13633 g$3456$21552 g$3456$21503)))) (if (memv g$3456$21511 '(set!)) (call-with-values (lambda () (g$3456$13635 g$3456$21503)) (lambda (g$3456$21548 g$3456$21549) (g$3456$13637 (cdr g$3456$21499) (cons (cons g$3456$21548 g$3456$21549) g$3456$21500)))) (if (memv g$3456$21511 '(define-syntax)) (call-with-values (lambda () (g$3456$13485 g$3456$21503)) (lambda (g$3456$21538 g$3456$21539) ((lambda (g$3456$21542) ((lambda (g$3456$21544) ((lambda (g$3456$21546) (begin (g$3456$13629 (g$3456$13236 g$3456$21538) g$3456$21542 g$3456$21546) (g$3456$13637 (cdr g$3456$21499) g$3456$21500))) (g$3456$13284 g$3456$21544))) (g$3456$13639 g$3456$21539 '()))) (g$3456$13631 g$3456$21538 g$3456$21503)))) (if (memv g$3456$21511 '(let-syntax letrec-syntax)) (error 'chi-top* '"not supported yet at top level" g$3456$21505) (if (memv g$3456$21511 '(begin)) ((lambda (g$3456$21512) ((lambda (g$3456$21514) (if (if g$3456$21514 (begin '#f (apply (lambda (g$3456$21516) '#t) g$3456$21514)) '#f) (apply (lambda (g$3456$21518) (g$3456$13637 (append g$3456$21518 (cdr g$3456$21499)) g$3456$21500)) g$3456$21514) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$21512 '())))) ((lambda (g$3456$21520) (if (g$3456$13220 g$3456$21520) (begin '#f ((lambda (g$3456$21522) (if g$3456$21522 (begin '#f ((lambda (g$3456$21524) (if g$3456$21524 (begin '#f (append g$3456$21522 g$3456$21524)) '#f)) ((letrec ((g$3456$21526 (lambda (g$3456$21528) (if (g$3456$13220 g$3456$21528) ((lambda (g$3456$21530) (if g$3456$21530 (begin '#f ((lambda (g$3456$21532) (if g$3456$21532 (begin '#f (map cons g$3456$21530 g$3456$21532)) '#f)) (g$3456$21526 (g$3456$13232 g$3456$21528)))) '#f)) ((lambda (g$3456$21534) (list g$3456$21534)) (g$3456$13228 g$3456$21528))) (if (g$3456$13224 g$3456$21528) (list (begin 'x* '())) '#f))))) g$3456$21526) (g$3456$13232 g$3456$21520)))) '#f)) ((lambda (g$3456$21536) '()) (g$3456$13228 g$3456$21520)))) '#f)) g$3456$21512))) g$3456$21503) (if (memv g$3456$21511 '(global-macro global-macro!)) (g$3456$13637 (cons (g$3456$13599 g$3456$21506 g$3456$21503) (cdr g$3456$21499)) g$3456$21500) (if (memv g$3456$21511 '(local-macro local-macro!)) (g$3456$13637 (cons (g$3456$13597 g$3456$21506 g$3456$21503) (cdr g$3456$21499)) g$3456$21500) (if (memv g$3456$21511 '(macro macro!)) (g$3456$13637 (cons (g$3456$13595 g$3456$21506 g$3456$21503) (cdr g$3456$21499)) g$3456$21500) (g$3456$13637 (cdr g$3456$21499) (cons (cons '#f (g$3456$13605 g$3456$21503 '() '())) g$3456$21500))))))))))) g$3456$21505)))) (car g$3456$21499))))) (set! g$3456$13639 (lambda (g$3456$21560 g$3456$21561) ((lambda (g$3456$21564) ((lambda (g$3456$21566) (begin (for-each ((lambda (g$3456$21568) (lambda (g$3456$21570) (begin (g$3456$12839 g$3456$21570) (g$3456$21568 g$3456$21570)))) (g$3456$13655)) (g$3456$21564)) g$3456$21566)) ((lambda (g$3456$21576 g$3456$21577 g$3456$21578 g$3456$21579) ((lambda (g$3456$21584) (dynamic-wind g$3456$21584 (lambda () (g$3456$13605 g$3456$21560 g$3456$21561 g$3456$21561)) g$3456$21584)) (lambda () (begin ((lambda (g$3456$21586) (begin (g$3456$21576 g$3456$21578) (set! g$3456$21578 g$3456$21586))) (g$3456$21576)) ((lambda (g$3456$21588) (begin (g$3456$21577 g$3456$21579) (set! g$3456$21579 g$3456$21588))) (g$3456$21577)))))) g$3456$13653 g$3456$13655 g$3456$21564 (lambda (g$3456$21590) (values))))) (g$3456$13651)))) (set! g$3456$13641 (lambda (g$3456$21592) (letrec ((g$3456$21594 (lambda (g$3456$21596 g$3456$21597 g$3456$21598) (if (null? g$3456$21596) (begin ((lambda (g$3456$21602) (if (g$3456$13244 g$3456$21602) (void) (error 'expander '"invalid exports" (g$3456$13619 g$3456$21602)))) (map (lambda (g$3456$21604) (g$3456$13210 g$3456$21604 g$3456$13140 '())) g$3456$21598)) (values g$3456$21597 g$3456$21598)) ((lambda (g$3456$21606) ((lambda (g$3456$21608) (if (if g$3456$21608 (begin '#f (apply (lambda (g$3456$21610 g$3456$21611 g$3456$21612) '#t) g$3456$21608)) '#f) (apply (lambda (g$3456$21616 g$3456$21617 g$3456$21618) (begin (if (if (eq? g$3456$21616 'rename) (if (for-all symbol? g$3456$21617) (begin '#f (for-all symbol? g$3456$21618)) '#f) '#f) (void) (error 'expander '"invalid export specifier" (car g$3456$21596))) (g$3456$21594 (cdr g$3456$21596) (append g$3456$21617 g$3456$21597) (append g$3456$21618 g$3456$21598)))) g$3456$21608) ((lambda (g$3456$21622) ((lambda (g$3456$21624) (if (if g$3456$21624 (begin '#f (apply (lambda (g$3456$21626) '#t) g$3456$21624)) '#f) (apply (lambda (g$3456$21628) (begin (if (symbol? g$3456$21628) (void) (error 'expander '"invalid export" g$3456$21628)) (g$3456$21594 (cdr g$3456$21596) (cons g$3456$21628 g$3456$21597) (cons g$3456$21628 g$3456$21598)))) g$3456$21624) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$21622 '())))) ((lambda (g$3456$21630) (list g$3456$21630)) g$3456$21622))) g$3456$21606))) ((lambda (g$3456$21632) (if (g$3456$13220 g$3456$21632) (begin '#f ((lambda (g$3456$21634) (if g$3456$21634 (begin '#f ((lambda (g$3456$21636) (if g$3456$21636 (begin '#f (append g$3456$21634 g$3456$21636)) '#f)) ((letrec ((g$3456$21638 (lambda (g$3456$21640) (if (g$3456$13220 g$3456$21640) ((lambda (g$3456$21642) (if g$3456$21642 (begin '#f ((lambda (g$3456$21644) (if g$3456$21644 (begin '#f (map cons g$3456$21642 g$3456$21644)) '#f)) (g$3456$21638 (g$3456$13232 g$3456$21640)))) '#f)) ((lambda (g$3456$21646) (if (g$3456$13220 g$3456$21646) (begin '#f ((lambda (g$3456$21648) (if g$3456$21648 (begin '#f ((lambda (g$3456$21650) (if g$3456$21650 (begin '#f (append g$3456$21648 g$3456$21650)) '#f)) ((lambda (g$3456$21652) (if (g$3456$13220 g$3456$21652) (begin '#f ((lambda (g$3456$21654) (if g$3456$21654 (begin '#f ((lambda (g$3456$21656) (if g$3456$21656 (begin '#f (append g$3456$21654 g$3456$21656)) '#f)) ((lambda (g$3456$21658) (if (equal? (g$3456$13254 g$3456$21658) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$21652)))) '#f)) ((lambda (g$3456$21660) (list g$3456$21660)) (g$3456$13228 g$3456$21652)))) '#f)) (g$3456$13232 g$3456$21646)))) '#f)) ((lambda (g$3456$21662) (list g$3456$21662)) (g$3456$13228 g$3456$21646)))) '#f)) (g$3456$13228 g$3456$21640))) (if (g$3456$13224 g$3456$21640) (list (begin 'i* '()) (begin 'e* '())) '#f))))) g$3456$21638) (g$3456$13232 g$3456$21632)))) '#f)) ((lambda (g$3456$21664) (list g$3456$21664)) (g$3456$13228 g$3456$21632)))) '#f)) g$3456$21606))) (car g$3456$21596)))))) (g$3456$21594 g$3456$21592 '() '())))) (set! g$3456$13643 (lambda (g$3456$21666) ((lambda (g$3456$21668) (begin (set! g$3456$21668 (lambda (g$3456$21670) ((lambda (g$3456$21672) ((lambda (g$3456$21674) (if (if g$3456$21674 (begin '#f (apply (lambda (g$3456$21676) (for-all (lambda (g$3456$21678) (if (integer? g$3456$21678) (begin '#f (exact? g$3456$21678)) '#f)) g$3456$21676)) g$3456$21674)) '#f) (apply (lambda (g$3456$21680) (values '() g$3456$21680)) g$3456$21674) ((lambda (g$3456$21682) ((lambda (g$3456$21684) (if (if g$3456$21684 (begin '#f (apply (lambda (g$3456$21686 g$3456$21687) (symbol? g$3456$21686)) g$3456$21684)) '#f) (apply (lambda (g$3456$21690 g$3456$21691) (call-with-values (lambda () (g$3456$21668 g$3456$21691)) (lambda (g$3456$21694 g$3456$21695) (values (cons g$3456$21690 g$3456$21694) g$3456$21695)))) g$3456$21684) ((lambda (g$3456$21698) ((lambda (g$3456$21700) (if (if g$3456$21700 (begin '#f (apply (lambda () '#t) g$3456$21700)) '#f) (apply (lambda () (values '() '())) g$3456$21700) ((lambda (g$3456$21702) ((lambda (g$3456$21704) (if (if g$3456$21704 (begin '#f (apply (lambda () '#t) g$3456$21704)) '#f) (apply (lambda () (error 'expander '"invalid library name" (g$3456$13252 g$3456$21666 '()))) g$3456$21704) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$21702 '())))) ((lambda (g$3456$21706) '()) g$3456$21702))) g$3456$21698))) ((lambda (g$3456$21708) (if (equal? (g$3456$13254 g$3456$21708) '()) (begin '#f '()) '#f)) g$3456$21698))) g$3456$21682))) ((lambda (g$3456$21710) (if (g$3456$13220 g$3456$21710) (begin '#f ((lambda (g$3456$21712) (if g$3456$21712 (begin '#f ((lambda (g$3456$21714) (if g$3456$21714 (begin '#f (append g$3456$21712 g$3456$21714)) '#f)) ((lambda (g$3456$21716) (list g$3456$21716)) (g$3456$13232 g$3456$21710)))) '#f)) ((lambda (g$3456$21718) (list g$3456$21718)) (g$3456$13228 g$3456$21710)))) '#f)) g$3456$21682))) g$3456$21672))) ((lambda (g$3456$21720) (if (g$3456$13220 g$3456$21720) (begin '#f ((lambda (g$3456$21722) (if g$3456$21722 (begin '#f ((lambda (g$3456$21724) (if g$3456$21724 (begin '#f (append g$3456$21722 g$3456$21724)) '#f)) ((lambda (g$3456$21726) (if (equal? (g$3456$13254 g$3456$21726) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$21720)))) '#f)) ((letrec ((g$3456$21728 (lambda (g$3456$21730) (if (g$3456$13220 g$3456$21730) ((lambda (g$3456$21732) (if g$3456$21732 (begin '#f ((lambda (g$3456$21734) (if g$3456$21734 (begin '#f (map cons g$3456$21732 g$3456$21734)) '#f)) (g$3456$21728 (g$3456$13232 g$3456$21730)))) '#f)) ((lambda (g$3456$21736) (list g$3456$21736)) (g$3456$13228 g$3456$21730))) (if (g$3456$13224 g$3456$21730) (list (begin 'v* '())) '#f))))) g$3456$21728) (g$3456$13228 g$3456$21720)))) '#f)) g$3456$21672))) g$3456$21670))) (call-with-values (lambda () (g$3456$21668 g$3456$21666)) (lambda (g$3456$21738 g$3456$21739) (begin (if (null? g$3456$21738) (error 'expander '"empty library name" (g$3456$13252 g$3456$21666 '())) (void)) (values g$3456$21738 g$3456$21739)))))) '#f))) (set! g$3456$13645 (lambda (g$3456$21742) ((lambda (g$3456$21744) ((lambda (g$3456$21746) (if (if g$3456$21746 (begin '#f (apply (lambda (g$3456$21748 g$3456$21749 g$3456$21750 g$3456$21751 g$3456$21752 g$3456$21753 g$3456$21754) (if (eq? g$3456$21750 'export) (if (eq? g$3456$21752 'import) (begin '#f (eq? g$3456$21748 'library)) '#f) '#f)) g$3456$21746)) '#f) (apply (lambda (g$3456$21762 g$3456$21763 g$3456$21764 g$3456$21765 g$3456$21766 g$3456$21767 g$3456$21768) (values g$3456$21763 g$3456$21765 g$3456$21767 g$3456$21768)) g$3456$21746) ((lambda (g$3456$21776) ((lambda (g$3456$21778) (if (if g$3456$21778 (begin '#f (apply (lambda () '#t) g$3456$21778)) '#f) (apply (lambda () (error 'expander '"malformed library" (g$3456$13252 g$3456$21742 '()))) g$3456$21778) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$21776 '())))) ((lambda (g$3456$21780) '()) g$3456$21776))) g$3456$21744))) ((lambda (g$3456$21782) (if (g$3456$13220 g$3456$21782) (begin '#f ((lambda (g$3456$21784) (if g$3456$21784 (begin '#f ((lambda (g$3456$21786) (if g$3456$21786 (begin '#f (append g$3456$21784 g$3456$21786)) '#f)) ((lambda (g$3456$21788) (if (g$3456$13220 g$3456$21788) (begin '#f ((lambda (g$3456$21790) (if g$3456$21790 (begin '#f ((lambda (g$3456$21792) (if g$3456$21792 (begin '#f (append g$3456$21790 g$3456$21792)) '#f)) ((lambda (g$3456$21794) (if (g$3456$13220 g$3456$21794) (begin '#f ((lambda (g$3456$21796) (if g$3456$21796 (begin '#f ((lambda (g$3456$21798) (if g$3456$21798 (begin '#f (append g$3456$21796 g$3456$21798)) '#f)) ((lambda (g$3456$21800) (if (g$3456$13220 g$3456$21800) (begin '#f ((lambda (g$3456$21802) (if g$3456$21802 (begin '#f ((lambda (g$3456$21804) (if g$3456$21804 (begin '#f (append g$3456$21802 g$3456$21804)) '#f)) ((letrec ((g$3456$21806 (lambda (g$3456$21808) (if (g$3456$13220 g$3456$21808) ((lambda (g$3456$21810) (if g$3456$21810 (begin '#f ((lambda (g$3456$21812) (if g$3456$21812 (begin '#f (map cons g$3456$21810 g$3456$21812)) '#f)) (g$3456$21806 (g$3456$13232 g$3456$21808)))) '#f)) ((lambda (g$3456$21814) (list g$3456$21814)) (g$3456$13228 g$3456$21808))) (if (g$3456$13224 g$3456$21808) (list (begin 'b* '())) '#f))))) g$3456$21806) (g$3456$13232 g$3456$21800)))) '#f)) ((lambda (g$3456$21816) (if (g$3456$13220 g$3456$21816) (begin '#f ((lambda (g$3456$21818) (if g$3456$21818 (begin '#f ((lambda (g$3456$21820) (if g$3456$21820 (begin '#f (append g$3456$21818 g$3456$21820)) '#f)) ((letrec ((g$3456$21822 (lambda (g$3456$21824) (if (g$3456$13220 g$3456$21824) ((lambda (g$3456$21826) (if g$3456$21826 (begin '#f ((lambda (g$3456$21828) (if g$3456$21828 (begin '#f (map cons g$3456$21826 g$3456$21828)) '#f)) (g$3456$21822 (g$3456$13232 g$3456$21824)))) '#f)) ((lambda (g$3456$21830) (list g$3456$21830)) (g$3456$13228 g$3456$21824))) (if (g$3456$13224 g$3456$21824) (list (begin 'imp* '())) '#f))))) g$3456$21822) (g$3456$13232 g$3456$21816)))) '#f)) ((lambda (g$3456$21832) (list g$3456$21832)) (g$3456$13228 g$3456$21816)))) '#f)) (g$3456$13228 g$3456$21800)))) '#f)) (g$3456$13232 g$3456$21794)))) '#f)) ((lambda (g$3456$21834) (if (g$3456$13220 g$3456$21834) (begin '#f ((lambda (g$3456$21836) (if g$3456$21836 (begin '#f ((lambda (g$3456$21838) (if g$3456$21838 (begin '#f (append g$3456$21836 g$3456$21838)) '#f)) ((letrec ((g$3456$21840 (lambda (g$3456$21842) (if (g$3456$13220 g$3456$21842) ((lambda (g$3456$21844) (if g$3456$21844 (begin '#f ((lambda (g$3456$21846) (if g$3456$21846 (begin '#f (map cons g$3456$21844 g$3456$21846)) '#f)) (g$3456$21840 (g$3456$13232 g$3456$21842)))) '#f)) ((lambda (g$3456$21848) (list g$3456$21848)) (g$3456$13228 g$3456$21842))) (if (g$3456$13224 g$3456$21842) (list (begin 'exp* '())) '#f))))) g$3456$21840) (g$3456$13232 g$3456$21834)))) '#f)) ((lambda (g$3456$21850) (list g$3456$21850)) (g$3456$13228 g$3456$21834)))) '#f)) (g$3456$13228 g$3456$21794)))) '#f)) (g$3456$13232 g$3456$21788)))) '#f)) ((letrec ((g$3456$21852 (lambda (g$3456$21854) (if (g$3456$13220 g$3456$21854) ((lambda (g$3456$21856) (if g$3456$21856 (begin '#f ((lambda (g$3456$21858) (if g$3456$21858 (begin '#f (map cons g$3456$21856 g$3456$21858)) '#f)) (g$3456$21852 (g$3456$13232 g$3456$21854)))) '#f)) ((lambda (g$3456$21860) (list g$3456$21860)) (g$3456$13228 g$3456$21854))) (if (g$3456$13224 g$3456$21854) (list (begin 'name* '())) '#f))))) g$3456$21852) (g$3456$13228 g$3456$21788)))) '#f)) (g$3456$13232 g$3456$21782)))) '#f)) ((lambda (g$3456$21862) (list g$3456$21862)) (g$3456$13228 g$3456$21782)))) '#f)) g$3456$21744))) g$3456$21742))) (set! g$3456$13647 (lambda (g$3456$21864) ((lambda (g$3456$21866 g$3456$21868 g$3456$21870 g$3456$21872 g$3456$21874 g$3456$21876 g$3456$21878 g$3456$21880) (begin (set! g$3456$21866 (g$3456$13651)) (set! g$3456$21868 (lambda (g$3456$22636 g$3456$22637) ((lambda (g$3456$22640) (begin (set! g$3456$22640 (lambda (g$3456$22642 g$3456$22643) ((lambda (g$3456$22646 g$3456$22647) ((lambda (g$3456$22650) (if g$3456$22650 ((lambda (g$3456$22652) (if (eq? (cdr g$3456$22652) g$3456$22647) g$3456$22643 (error 'import '"two imports with different bindings" g$3456$22646))) g$3456$22650) (cons g$3456$22642 g$3456$22643))) (assq g$3456$22646 g$3456$22643))) (car g$3456$22642) (cdr g$3456$22642)))) (if (null? g$3456$22636) g$3456$22637 (g$3456$22640 (car g$3456$22636) (g$3456$21868 (cdr g$3456$22636) g$3456$22637))))) '#f))) (set! g$3456$21870 (lambda (g$3456$22612 g$3456$22613) ((lambda (g$3456$22616) (begin (set! g$3456$22616 (lambda (g$3456$22618 g$3456$22619) (if (null? g$3456$22619) (error 'import '"cannot rename unbound identifier" g$3456$22618) (if (eq? g$3456$22618 (caar g$3456$22619)) (values (cdar g$3456$22619) (cdr g$3456$22619)) ((lambda (g$3456$22622) (call-with-values (lambda () (g$3456$22616 g$3456$22618 (cdr g$3456$22619))) (lambda (g$3456$22624 g$3456$22625) (values g$3456$22624 (cons g$3456$22622 g$3456$22625))))) (car g$3456$22619)))))) (if (null? g$3456$22612) (values '() g$3456$22613) (call-with-values (lambda () (g$3456$22616 (car g$3456$22612) g$3456$22613)) (lambda (g$3456$22628 g$3456$22629) (call-with-values (lambda () (g$3456$21870 (cdr g$3456$22612) g$3456$22629)) (lambda (g$3456$22632 g$3456$22633) (values (cons g$3456$22628 g$3456$22632) g$3456$22633)))))))) '#f))) (set! g$3456$21872 (lambda (g$3456$22604 g$3456$22605) (map (lambda (g$3456$22608) ((lambda (g$3456$22610) (if g$3456$22610 (cdr g$3456$22610) (error 'import '"cannot find identifier" g$3456$22608))) (assq g$3456$22608 g$3456$22605))) g$3456$22604))) (set! g$3456$21874 (lambda (g$3456$22596 g$3456$22597) (letrec ((g$3456$22600 (lambda (g$3456$22602) (if (null? g$3456$22602) '() (if (memq (caar g$3456$22602) g$3456$22596) (g$3456$22600 (cdr g$3456$22602)) (cons (car g$3456$22602) (g$3456$22600 (cdr g$3456$22602)))))))) (g$3456$22600 g$3456$22597)))) (set! g$3456$21876 (lambda (g$3456$22594) (if (null? g$3456$22594) '() (if (memq (car g$3456$22594) (cdr g$3456$22594)) (g$3456$21876 (cdr g$3456$22594)) (cons (car g$3456$22594) (g$3456$21876 (cdr g$3456$22594))))))) (set! g$3456$21878 (lambda (g$3456$22174) ((lambda (g$3456$22176 g$3456$22178 g$3456$22180) (begin (set! g$3456$22176 (lambda (g$3456$22522) (if (integer? g$3456$22522) (if (exact? g$3456$22522) (begin '#f (>= g$3456$22522 '0)) '#f) '#f))) (set! g$3456$22178 (lambda (g$3456$22332) ((lambda (g$3456$22334) ((lambda (g$3456$22336) (if (if g$3456$22336 (begin '#f (apply (lambda (g$3456$22338) (g$3456$22176 g$3456$22338)) g$3456$22336)) '#f) (apply (lambda (g$3456$22340) (lambda (g$3456$22342) (= g$3456$22342 g$3456$22340))) g$3456$22336) ((lambda (g$3456$22344) ((lambda (g$3456$22346) (if (if g$3456$22346 (begin '#f (apply (lambda (g$3456$22348 g$3456$22349) (eq? g$3456$22348 'and)) g$3456$22346)) '#f) (apply (lambda (g$3456$22352 g$3456$22353) ((lambda (g$3456$22356) (lambda (g$3456$22358) (for-all (lambda (g$3456$22360) (g$3456$22360 g$3456$22358)) g$3456$22356))) (map g$3456$22178 g$3456$22353))) g$3456$22346) ((lambda (g$3456$22362) ((lambda (g$3456$22364) (if (if g$3456$22364 (begin '#f (apply (lambda (g$3456$22366 g$3456$22367) (eq? g$3456$22366 'or)) g$3456$22364)) '#f) (apply (lambda (g$3456$22370 g$3456$22371) ((lambda (g$3456$22374) (lambda (g$3456$22376) (exists (lambda (g$3456$22378) (g$3456$22378 g$3456$22376)) g$3456$22374))) (map g$3456$22178 g$3456$22371))) g$3456$22364) ((lambda (g$3456$22380) ((lambda (g$3456$22382) (if (if g$3456$22382 (begin '#f (apply (lambda (g$3456$22384 g$3456$22385) (eq? g$3456$22384 'not)) g$3456$22382)) '#f) (apply (lambda (g$3456$22388 g$3456$22389) ((lambda (g$3456$22392) (lambda (g$3456$22394) (not (g$3456$22392 g$3456$22394)))) (g$3456$22178 g$3456$22389))) g$3456$22382) ((lambda (g$3456$22396) ((lambda (g$3456$22398) (if (if g$3456$22398 (begin '#f (apply (lambda (g$3456$22400 g$3456$22401) (if (eq? g$3456$22400 '<=) (begin '#f (g$3456$22176 g$3456$22401)) '#f)) g$3456$22398)) '#f) (apply (lambda (g$3456$22404 g$3456$22405) (lambda (g$3456$22408) (<= g$3456$22408 g$3456$22405))) g$3456$22398) ((lambda (g$3456$22410) ((lambda (g$3456$22412) (if (if g$3456$22412 (begin '#f (apply (lambda (g$3456$22414 g$3456$22415) (if (eq? g$3456$22414 '>=) (begin '#f (g$3456$22176 g$3456$22415)) '#f)) g$3456$22412)) '#f) (apply (lambda (g$3456$22418 g$3456$22419) (lambda (g$3456$22422) (>= g$3456$22422 g$3456$22419))) g$3456$22412) ((lambda (g$3456$22424) ((lambda (g$3456$22426) (if (if g$3456$22426 (begin '#f (apply (lambda () '#t) g$3456$22426)) '#f) (apply (lambda () (error 'import '"invalid sub-version spec" g$3456$22332 g$3456$22174)) g$3456$22426) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$22424 '())))) ((lambda (g$3456$22428) '()) g$3456$22424))) g$3456$22410))) ((lambda (g$3456$22430) (if (g$3456$13220 g$3456$22430) (begin '#f ((lambda (g$3456$22432) (if g$3456$22432 (begin '#f ((lambda (g$3456$22434) (if g$3456$22434 (begin '#f (append g$3456$22432 g$3456$22434)) '#f)) ((lambda (g$3456$22436) (if (g$3456$13220 g$3456$22436) (begin '#f ((lambda (g$3456$22438) (if g$3456$22438 (begin '#f ((lambda (g$3456$22440) (if g$3456$22440 (begin '#f (append g$3456$22438 g$3456$22440)) '#f)) ((lambda (g$3456$22442) (if (equal? (g$3456$13254 g$3456$22442) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$22436)))) '#f)) ((lambda (g$3456$22444) (list g$3456$22444)) (g$3456$13228 g$3456$22436)))) '#f)) (g$3456$13232 g$3456$22430)))) '#f)) ((lambda (g$3456$22446) (list g$3456$22446)) (g$3456$13228 g$3456$22430)))) '#f)) g$3456$22410))) g$3456$22396))) ((lambda (g$3456$22448) (if (g$3456$13220 g$3456$22448) (begin '#f ((lambda (g$3456$22450) (if g$3456$22450 (begin '#f ((lambda (g$3456$22452) (if g$3456$22452 (begin '#f (append g$3456$22450 g$3456$22452)) '#f)) ((lambda (g$3456$22454) (if (g$3456$13220 g$3456$22454) (begin '#f ((lambda (g$3456$22456) (if g$3456$22456 (begin '#f ((lambda (g$3456$22458) (if g$3456$22458 (begin '#f (append g$3456$22456 g$3456$22458)) '#f)) ((lambda (g$3456$22460) (if (equal? (g$3456$13254 g$3456$22460) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$22454)))) '#f)) ((lambda (g$3456$22462) (list g$3456$22462)) (g$3456$13228 g$3456$22454)))) '#f)) (g$3456$13232 g$3456$22448)))) '#f)) ((lambda (g$3456$22464) (list g$3456$22464)) (g$3456$13228 g$3456$22448)))) '#f)) g$3456$22396))) g$3456$22380))) ((lambda (g$3456$22466) (if (g$3456$13220 g$3456$22466) (begin '#f ((lambda (g$3456$22468) (if g$3456$22468 (begin '#f ((lambda (g$3456$22470) (if g$3456$22470 (begin '#f (append g$3456$22468 g$3456$22470)) '#f)) ((lambda (g$3456$22472) (if (g$3456$13220 g$3456$22472) (begin '#f ((lambda (g$3456$22474) (if g$3456$22474 (begin '#f ((lambda (g$3456$22476) (if g$3456$22476 (begin '#f (append g$3456$22474 g$3456$22476)) '#f)) ((lambda (g$3456$22478) (if (equal? (g$3456$13254 g$3456$22478) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$22472)))) '#f)) ((lambda (g$3456$22480) (list g$3456$22480)) (g$3456$13228 g$3456$22472)))) '#f)) (g$3456$13232 g$3456$22466)))) '#f)) ((lambda (g$3456$22482) (list g$3456$22482)) (g$3456$13228 g$3456$22466)))) '#f)) g$3456$22380))) g$3456$22362))) ((lambda (g$3456$22484) (if (g$3456$13220 g$3456$22484) (begin '#f ((lambda (g$3456$22486) (if g$3456$22486 (begin '#f ((lambda (g$3456$22488) (if g$3456$22488 (begin '#f (append g$3456$22486 g$3456$22488)) '#f)) ((letrec ((g$3456$22490 (lambda (g$3456$22492) (if (g$3456$13220 g$3456$22492) ((lambda (g$3456$22494) (if g$3456$22494 (begin '#f ((lambda (g$3456$22496) (if g$3456$22496 (begin '#f (map cons g$3456$22494 g$3456$22496)) '#f)) (g$3456$22490 (g$3456$13232 g$3456$22492)))) '#f)) ((lambda (g$3456$22498) (list g$3456$22498)) (g$3456$13228 g$3456$22492))) (if (g$3456$13224 g$3456$22492) (list (begin 'sub* '())) '#f))))) g$3456$22490) (g$3456$13232 g$3456$22484)))) '#f)) ((lambda (g$3456$22500) (list g$3456$22500)) (g$3456$13228 g$3456$22484)))) '#f)) g$3456$22362))) g$3456$22344))) ((lambda (g$3456$22502) (if (g$3456$13220 g$3456$22502) (begin '#f ((lambda (g$3456$22504) (if g$3456$22504 (begin '#f ((lambda (g$3456$22506) (if g$3456$22506 (begin '#f (append g$3456$22504 g$3456$22506)) '#f)) ((letrec ((g$3456$22508 (lambda (g$3456$22510) (if (g$3456$13220 g$3456$22510) ((lambda (g$3456$22512) (if g$3456$22512 (begin '#f ((lambda (g$3456$22514) (if g$3456$22514 (begin '#f (map cons g$3456$22512 g$3456$22514)) '#f)) (g$3456$22508 (g$3456$13232 g$3456$22510)))) '#f)) ((lambda (g$3456$22516) (list g$3456$22516)) (g$3456$13228 g$3456$22510))) (if (g$3456$13224 g$3456$22510) (list (begin 'sub* '())) '#f))))) g$3456$22508) (g$3456$13232 g$3456$22502)))) '#f)) ((lambda (g$3456$22518) (list g$3456$22518)) (g$3456$13228 g$3456$22502)))) '#f)) g$3456$22344))) g$3456$22334))) ((lambda (g$3456$22520) (list g$3456$22520)) g$3456$22334))) g$3456$22332))) (set! g$3456$22180 (lambda (g$3456$22182) ((lambda (g$3456$22184) ((lambda (g$3456$22186) (if (if g$3456$22186 (begin '#f (apply (lambda () '#t) g$3456$22186)) '#f) (apply (lambda () (lambda (g$3456$22188) '#t)) g$3456$22186) ((lambda (g$3456$22190) ((lambda (g$3456$22192) (if (if g$3456$22192 (begin '#f (apply (lambda (g$3456$22194 g$3456$22195) (eq? g$3456$22194 'and)) g$3456$22192)) '#f) (apply (lambda (g$3456$22198 g$3456$22199) ((lambda (g$3456$22202) (lambda (g$3456$22204) (for-all (lambda (g$3456$22206) (g$3456$22206 g$3456$22204)) g$3456$22202))) (map g$3456$22180 g$3456$22199))) g$3456$22192) ((lambda (g$3456$22208) ((lambda (g$3456$22210) (if (if g$3456$22210 (begin '#f (apply (lambda (g$3456$22212 g$3456$22213) (eq? g$3456$22212 'or)) g$3456$22210)) '#f) (apply (lambda (g$3456$22216 g$3456$22217) ((lambda (g$3456$22220) (lambda (g$3456$22222) (exists (lambda (g$3456$22224) (g$3456$22224 g$3456$22222)) g$3456$22220))) (map g$3456$22180 g$3456$22217))) g$3456$22210) ((lambda (g$3456$22226) ((lambda (g$3456$22228) (if (if g$3456$22228 (begin '#f (apply (lambda (g$3456$22230 g$3456$22231) (eq? g$3456$22230 'not)) g$3456$22228)) '#f) (apply (lambda (g$3456$22234 g$3456$22235) ((lambda (g$3456$22238) (lambda (g$3456$22240) (not (g$3456$22238 g$3456$22240)))) (g$3456$22180 g$3456$22235))) g$3456$22228) ((lambda (g$3456$22242) ((lambda (g$3456$22244) (if (if g$3456$22244 (begin '#f (apply (lambda (g$3456$22246) '#t) g$3456$22244)) '#f) (apply (lambda (g$3456$22248) ((lambda (g$3456$22250) (lambda (g$3456$22252) (letrec ((g$3456$22254 (lambda (g$3456$22256 g$3456$22257) (if (null? g$3456$22256) '#t (if (null? g$3456$22257) '#f (if ((car g$3456$22256) (car g$3456$22257)) (begin '#f (g$3456$22254 (cdr g$3456$22256) (cdr g$3456$22182))) '#f)))))) (g$3456$22254 g$3456$22250 g$3456$22252)))) (map g$3456$22178 g$3456$22248))) g$3456$22244) ((lambda (g$3456$22260) ((lambda (g$3456$22262) (if (if g$3456$22262 (begin '#f (apply (lambda () '#t) g$3456$22262)) '#f) (apply (lambda () (error 'import '"invalid version spec" g$3456$22182 g$3456$22174)) g$3456$22262) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$22260 '())))) ((lambda (g$3456$22264) '()) g$3456$22260))) g$3456$22242))) ((letrec ((g$3456$22266 (lambda (g$3456$22268) (if (g$3456$13220 g$3456$22268) ((lambda (g$3456$22270) (if g$3456$22270 (begin '#f ((lambda (g$3456$22272) (if g$3456$22272 (begin '#f (map cons g$3456$22270 g$3456$22272)) '#f)) (g$3456$22266 (g$3456$13232 g$3456$22268)))) '#f)) ((lambda (g$3456$22274) (list g$3456$22274)) (g$3456$13228 g$3456$22268))) (if (g$3456$13224 g$3456$22268) (list (begin 'sub* '())) '#f))))) g$3456$22266) g$3456$22242))) g$3456$22226))) ((lambda (g$3456$22276) (if (g$3456$13220 g$3456$22276) (begin '#f ((lambda (g$3456$22278) (if g$3456$22278 (begin '#f ((lambda (g$3456$22280) (if g$3456$22280 (begin '#f (append g$3456$22278 g$3456$22280)) '#f)) ((lambda (g$3456$22282) (if (g$3456$13220 g$3456$22282) (begin '#f ((lambda (g$3456$22284) (if g$3456$22284 (begin '#f ((lambda (g$3456$22286) (if g$3456$22286 (begin '#f (append g$3456$22284 g$3456$22286)) '#f)) ((lambda (g$3456$22288) (if (equal? (g$3456$13254 g$3456$22288) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$22282)))) '#f)) ((lambda (g$3456$22290) (list g$3456$22290)) (g$3456$13228 g$3456$22282)))) '#f)) (g$3456$13232 g$3456$22276)))) '#f)) ((lambda (g$3456$22292) (list g$3456$22292)) (g$3456$13228 g$3456$22276)))) '#f)) g$3456$22226))) g$3456$22208))) ((lambda (g$3456$22294) (if (g$3456$13220 g$3456$22294) (begin '#f ((lambda (g$3456$22296) (if g$3456$22296 (begin '#f ((lambda (g$3456$22298) (if g$3456$22298 (begin '#f (append g$3456$22296 g$3456$22298)) '#f)) ((letrec ((g$3456$22300 (lambda (g$3456$22302) (if (g$3456$13220 g$3456$22302) ((lambda (g$3456$22304) (if g$3456$22304 (begin '#f ((lambda (g$3456$22306) (if g$3456$22306 (begin '#f (map cons g$3456$22304 g$3456$22306)) '#f)) (g$3456$22300 (g$3456$13232 g$3456$22302)))) '#f)) ((lambda (g$3456$22308) (list g$3456$22308)) (g$3456$13228 g$3456$22302))) (if (g$3456$13224 g$3456$22302) (list (begin 'ver* '())) '#f))))) g$3456$22300) (g$3456$13232 g$3456$22294)))) '#f)) ((lambda (g$3456$22310) (list g$3456$22310)) (g$3456$13228 g$3456$22294)))) '#f)) g$3456$22208))) g$3456$22190))) ((lambda (g$3456$22312) (if (g$3456$13220 g$3456$22312) (begin '#f ((lambda (g$3456$22314) (if g$3456$22314 (begin '#f ((lambda (g$3456$22316) (if g$3456$22316 (begin '#f (append g$3456$22314 g$3456$22316)) '#f)) ((letrec ((g$3456$22318 (lambda (g$3456$22320) (if (g$3456$13220 g$3456$22320) ((lambda (g$3456$22322) (if g$3456$22322 (begin '#f ((lambda (g$3456$22324) (if g$3456$22324 (begin '#f (map cons g$3456$22322 g$3456$22324)) '#f)) (g$3456$22318 (g$3456$13232 g$3456$22320)))) '#f)) ((lambda (g$3456$22326) (list g$3456$22326)) (g$3456$13228 g$3456$22320))) (if (g$3456$13224 g$3456$22320) (list (begin 'ver* '())) '#f))))) g$3456$22318) (g$3456$13232 g$3456$22312)))) '#f)) ((lambda (g$3456$22328) (list g$3456$22328)) (g$3456$13228 g$3456$22312)))) '#f)) g$3456$22190))) g$3456$22184))) ((lambda (g$3456$22330) (if (equal? (g$3456$13254 g$3456$22330) '()) (begin '#f '()) '#f)) g$3456$22184))) g$3456$22182))) (letrec ((g$3456$22524 (lambda (g$3456$22526) ((lambda (g$3456$22528) ((lambda (g$3456$22530) (if (if g$3456$22530 (begin '#f (apply (lambda (g$3456$22532) '#t) g$3456$22530)) '#f) (apply (lambda (g$3456$22534) (values '() (g$3456$22180 g$3456$22534))) g$3456$22530) ((lambda (g$3456$22536) ((lambda (g$3456$22538) (if (if g$3456$22538 (begin '#f (apply (lambda (g$3456$22540 g$3456$22541) (symbol? g$3456$22540)) g$3456$22538)) '#f) (apply (lambda (g$3456$22544 g$3456$22545) (call-with-values (lambda () (g$3456$22524 g$3456$22545)) (lambda (g$3456$22548 g$3456$22549) (values (cons g$3456$22544 g$3456$22548) g$3456$22549)))) g$3456$22538) ((lambda (g$3456$22552) ((lambda (g$3456$22554) (if (if g$3456$22554 (begin '#f (apply (lambda () '#t) g$3456$22554)) '#f) (apply (lambda () (values '() (lambda (g$3456$22556) '#t))) g$3456$22554) ((lambda (g$3456$22558) ((lambda (g$3456$22560) (if (if g$3456$22560 (begin '#f (apply (lambda () '#t) g$3456$22560)) '#f) (apply (lambda () (error 'expander '"invalid import spec" (g$3456$13252 g$3456$22174 '()))) g$3456$22560) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$22558 '())))) ((lambda (g$3456$22562) '()) g$3456$22558))) g$3456$22552))) ((lambda (g$3456$22564) (if (equal? (g$3456$13254 g$3456$22564) '()) (begin '#f '()) '#f)) g$3456$22552))) g$3456$22536))) ((lambda (g$3456$22566) (if (g$3456$13220 g$3456$22566) (begin '#f ((lambda (g$3456$22568) (if g$3456$22568 (begin '#f ((lambda (g$3456$22570) (if g$3456$22570 (begin '#f (append g$3456$22568 g$3456$22570)) '#f)) ((lambda (g$3456$22572) (list g$3456$22572)) (g$3456$13232 g$3456$22566)))) '#f)) ((lambda (g$3456$22574) (list g$3456$22574)) (g$3456$13228 g$3456$22566)))) '#f)) g$3456$22536))) g$3456$22528))) ((lambda (g$3456$22576) (if (g$3456$13220 g$3456$22576) (begin '#f ((lambda (g$3456$22578) (if g$3456$22578 (begin '#f ((lambda (g$3456$22580) (if g$3456$22580 (begin '#f (append g$3456$22578 g$3456$22580)) '#f)) ((lambda (g$3456$22582) (if (equal? (g$3456$13254 g$3456$22582) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$22576)))) '#f)) ((letrec ((g$3456$22584 (lambda (g$3456$22586) (if (g$3456$13220 g$3456$22586) ((lambda (g$3456$22588) (if g$3456$22588 (begin '#f ((lambda (g$3456$22590) (if g$3456$22590 (begin '#f (map cons g$3456$22588 g$3456$22590)) '#f)) (g$3456$22584 (g$3456$13232 g$3456$22586)))) '#f)) ((lambda (g$3456$22592) (list g$3456$22592)) (g$3456$13228 g$3456$22586))) (if (g$3456$13224 g$3456$22586) (list (begin 'version-spec* '())) '#f))))) g$3456$22584) (g$3456$13228 g$3456$22576)))) '#f)) g$3456$22528))) g$3456$22526)))) (g$3456$22524 g$3456$22174)))) '#f '#f '#f))) (set! g$3456$21880 (lambda (g$3456$21882) ((lambda (g$3456$21884) ((lambda (g$3456$21886) (if (if g$3456$21886 (begin '#f (apply (lambda (g$3456$21888 g$3456$21889 g$3456$21890 g$3456$21891) (if (eq? g$3456$21888 'rename) (if (for-all symbol? g$3456$21890) (begin '#f (for-all symbol? g$3456$21891)) '#f) '#f)) g$3456$21886)) '#f) (apply (lambda (g$3456$21896 g$3456$21897 g$3456$21898 g$3456$21899) ((lambda (g$3456$21904) ((lambda (g$3456$21906) ((lambda (g$3456$21908) (g$3456$21868 (map cons g$3456$21899 g$3456$21906) g$3456$21908)) (g$3456$21874 g$3456$21898 g$3456$21904))) (g$3456$21872 g$3456$21898 g$3456$21904))) (g$3456$21880 g$3456$21897))) g$3456$21886) ((lambda (g$3456$21910) ((lambda (g$3456$21912) (if (if g$3456$21912 (begin '#f (apply (lambda (g$3456$21914 g$3456$21915 g$3456$21916) (if (eq? g$3456$21914 'except) (begin '#f (for-all symbol? g$3456$21916)) '#f)) g$3456$21912)) '#f) (apply (lambda (g$3456$21920 g$3456$21921 g$3456$21922) ((lambda (g$3456$21926) (g$3456$21874 g$3456$21922 g$3456$21926)) (g$3456$21880 g$3456$21921))) g$3456$21912) ((lambda (g$3456$21928) ((lambda (g$3456$21930) (if (if g$3456$21930 (begin '#f (apply (lambda (g$3456$21932 g$3456$21933 g$3456$21934) (if (eq? g$3456$21932 'only) (begin '#f (for-all symbol? g$3456$21934)) '#f)) g$3456$21930)) '#f) (apply (lambda (g$3456$21938 g$3456$21939 g$3456$21940) ((lambda (g$3456$21944) ((lambda (g$3456$21946) ((lambda (g$3456$21948) (map cons g$3456$21946 g$3456$21948)) (g$3456$21872 g$3456$21946 g$3456$21944))) (g$3456$21876 g$3456$21940))) (g$3456$21880 g$3456$21939))) g$3456$21930) ((lambda (g$3456$21950) ((lambda (g$3456$21952) (if (if g$3456$21952 (begin '#f (apply (lambda (g$3456$21954 g$3456$21955 g$3456$21956) (if (eq? g$3456$21954 'prefix) (begin '#f (symbol? g$3456$21956)) '#f)) g$3456$21952)) '#f) (apply (lambda (g$3456$21960 g$3456$21961 g$3456$21962) ((lambda (g$3456$21966) (map (lambda (g$3456$21968) (cons (string->symbol (string-append (symbol->string g$3456$21962) (symbol->string (car g$3456$21968)))) (cdr g$3456$21968))) g$3456$21966)) (g$3456$21880 g$3456$21961))) g$3456$21952) ((lambda (g$3456$21970) ((lambda (g$3456$21972) (if (if g$3456$21972 (begin '#f (apply (lambda (g$3456$21974 g$3456$21975) (eq? g$3456$21974 'library)) g$3456$21972)) '#f) (apply (lambda (g$3456$21978 g$3456$21979) (call-with-values (lambda () (g$3456$21878 g$3456$21979)) (lambda (g$3456$21982 g$3456$21983) (begin (if (null? g$3456$21982) (error 'import '"empty library name" g$3456$21979) (void)) ((lambda (g$3456$21986) (begin (if g$3456$21986 (void) (error 'import '"cannot find library with required name" g$3456$21982)) (if (g$3456$21983 (g$3456$12877 g$3456$21986)) (void) (error 'import '"library does not satisfy version specification" g$3456$21986 g$3456$21979)) (g$3456$21866 g$3456$21986) (g$3456$12873 g$3456$21986))) (g$3456$12848 g$3456$21982)))))) g$3456$21972) ((lambda (g$3456$21988) ((lambda (g$3456$21990) (if (if g$3456$21990 (begin '#f (apply (lambda (g$3456$21992 g$3456$21993) (not (memq g$3456$21992 '(rename except only prefix library)))) g$3456$21990)) '#f) (apply (lambda (g$3456$21996 g$3456$21997) (g$3456$21880 (list 'library (cons g$3456$21996 g$3456$21997)))) g$3456$21990) ((lambda (g$3456$22000) ((lambda (g$3456$22002) (if (if g$3456$22002 (begin '#f (apply (lambda (g$3456$22004) '#t) g$3456$22002)) '#f) (apply (lambda (g$3456$22006) (error 'import '"invalid import spec" g$3456$22006)) g$3456$22002) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$22000 '())))) ((lambda (g$3456$22008) (list g$3456$22008)) g$3456$22000))) g$3456$21988))) ((lambda (g$3456$22010) (if (g$3456$13220 g$3456$22010) (begin '#f ((lambda (g$3456$22012) (if g$3456$22012 (begin '#f ((lambda (g$3456$22014) (if g$3456$22014 (begin '#f (append g$3456$22012 g$3456$22014)) '#f)) ((letrec ((g$3456$22016 (lambda (g$3456$22018) (if (g$3456$13220 g$3456$22018) ((lambda (g$3456$22020) (if g$3456$22020 (begin '#f ((lambda (g$3456$22022) (if g$3456$22022 (begin '#f (map cons g$3456$22020 g$3456$22022)) '#f)) (g$3456$22016 (g$3456$13232 g$3456$22018)))) '#f)) ((lambda (g$3456$22024) (list g$3456$22024)) (g$3456$13228 g$3456$22018))) (if (g$3456$13224 g$3456$22018) (list (begin 'x* '())) '#f))))) g$3456$22016) (g$3456$13232 g$3456$22010)))) '#f)) ((lambda (g$3456$22026) (list g$3456$22026)) (g$3456$13228 g$3456$22010)))) '#f)) g$3456$21988))) g$3456$21970))) ((lambda (g$3456$22028) (if (g$3456$13220 g$3456$22028) (begin '#f ((lambda (g$3456$22030) (if g$3456$22030 (begin '#f ((lambda (g$3456$22032) (if g$3456$22032 (begin '#f (append g$3456$22030 g$3456$22032)) '#f)) ((lambda (g$3456$22034) (if (g$3456$13220 g$3456$22034) (begin '#f ((lambda (g$3456$22036) (if g$3456$22036 (begin '#f ((lambda (g$3456$22038) (if g$3456$22038 (begin '#f (append g$3456$22036 g$3456$22038)) '#f)) ((lambda (g$3456$22040) (if (equal? (g$3456$13254 g$3456$22040) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$22034)))) '#f)) ((letrec ((g$3456$22042 (lambda (g$3456$22044) (if (g$3456$13220 g$3456$22044) ((lambda (g$3456$22046) (if g$3456$22046 (begin '#f ((lambda (g$3456$22048) (if g$3456$22048 (begin '#f (map cons g$3456$22046 g$3456$22048)) '#f)) (g$3456$22042 (g$3456$13232 g$3456$22044)))) '#f)) ((lambda (g$3456$22050) (list g$3456$22050)) (g$3456$13228 g$3456$22044))) (if (g$3456$13224 g$3456$22044) (list (begin 'spec* '())) '#f))))) g$3456$22042) (g$3456$13228 g$3456$22034)))) '#f)) (g$3456$13232 g$3456$22028)))) '#f)) ((lambda (g$3456$22052) (list g$3456$22052)) (g$3456$13228 g$3456$22028)))) '#f)) g$3456$21970))) g$3456$21950))) ((lambda (g$3456$22054) (if (g$3456$13220 g$3456$22054) (begin '#f ((lambda (g$3456$22056) (if g$3456$22056 (begin '#f ((lambda (g$3456$22058) (if g$3456$22058 (begin '#f (append g$3456$22056 g$3456$22058)) '#f)) ((lambda (g$3456$22060) (if (g$3456$13220 g$3456$22060) (begin '#f ((lambda (g$3456$22062) (if g$3456$22062 (begin '#f ((lambda (g$3456$22064) (if g$3456$22064 (begin '#f (append g$3456$22062 g$3456$22064)) '#f)) ((lambda (g$3456$22066) (if (g$3456$13220 g$3456$22066) (begin '#f ((lambda (g$3456$22068) (if g$3456$22068 (begin '#f ((lambda (g$3456$22070) (if g$3456$22070 (begin '#f (append g$3456$22068 g$3456$22070)) '#f)) ((lambda (g$3456$22072) (if (equal? (g$3456$13254 g$3456$22072) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$22066)))) '#f)) ((lambda (g$3456$22074) (list g$3456$22074)) (g$3456$13228 g$3456$22066)))) '#f)) (g$3456$13232 g$3456$22060)))) '#f)) ((lambda (g$3456$22076) (list g$3456$22076)) (g$3456$13228 g$3456$22060)))) '#f)) (g$3456$13232 g$3456$22054)))) '#f)) ((lambda (g$3456$22078) (list g$3456$22078)) (g$3456$13228 g$3456$22054)))) '#f)) g$3456$21950))) g$3456$21928))) ((lambda (g$3456$22080) (if (g$3456$13220 g$3456$22080) (begin '#f ((lambda (g$3456$22082) (if g$3456$22082 (begin '#f ((lambda (g$3456$22084) (if g$3456$22084 (begin '#f (append g$3456$22082 g$3456$22084)) '#f)) ((lambda (g$3456$22086) (if (g$3456$13220 g$3456$22086) (begin '#f ((lambda (g$3456$22088) (if g$3456$22088 (begin '#f ((lambda (g$3456$22090) (if g$3456$22090 (begin '#f (append g$3456$22088 g$3456$22090)) '#f)) ((letrec ((g$3456$22092 (lambda (g$3456$22094) (if (g$3456$13220 g$3456$22094) ((lambda (g$3456$22096) (if g$3456$22096 (begin '#f ((lambda (g$3456$22098) (if g$3456$22098 (begin '#f (map cons g$3456$22096 g$3456$22098)) '#f)) (g$3456$22092 (g$3456$13232 g$3456$22094)))) '#f)) ((lambda (g$3456$22100) (list g$3456$22100)) (g$3456$13228 g$3456$22094))) (if (g$3456$13224 g$3456$22094) (list (begin 'sym* '())) '#f))))) g$3456$22092) (g$3456$13232 g$3456$22086)))) '#f)) ((lambda (g$3456$22102) (list g$3456$22102)) (g$3456$13228 g$3456$22086)))) '#f)) (g$3456$13232 g$3456$22080)))) '#f)) ((lambda (g$3456$22104) (list g$3456$22104)) (g$3456$13228 g$3456$22080)))) '#f)) g$3456$21928))) g$3456$21910))) ((lambda (g$3456$22106) (if (g$3456$13220 g$3456$22106) (begin '#f ((lambda (g$3456$22108) (if g$3456$22108 (begin '#f ((lambda (g$3456$22110) (if g$3456$22110 (begin '#f (append g$3456$22108 g$3456$22110)) '#f)) ((lambda (g$3456$22112) (if (g$3456$13220 g$3456$22112) (begin '#f ((lambda (g$3456$22114) (if g$3456$22114 (begin '#f ((lambda (g$3456$22116) (if g$3456$22116 (begin '#f (append g$3456$22114 g$3456$22116)) '#f)) ((letrec ((g$3456$22118 (lambda (g$3456$22120) (if (g$3456$13220 g$3456$22120) ((lambda (g$3456$22122) (if g$3456$22122 (begin '#f ((lambda (g$3456$22124) (if g$3456$22124 (begin '#f (map cons g$3456$22122 g$3456$22124)) '#f)) (g$3456$22118 (g$3456$13232 g$3456$22120)))) '#f)) ((lambda (g$3456$22126) (list g$3456$22126)) (g$3456$13228 g$3456$22120))) (if (g$3456$13224 g$3456$22120) (list (begin 'sym* '())) '#f))))) g$3456$22118) (g$3456$13232 g$3456$22112)))) '#f)) ((lambda (g$3456$22128) (list g$3456$22128)) (g$3456$13228 g$3456$22112)))) '#f)) (g$3456$13232 g$3456$22106)))) '#f)) ((lambda (g$3456$22130) (list g$3456$22130)) (g$3456$13228 g$3456$22106)))) '#f)) g$3456$21910))) g$3456$21884))) ((lambda (g$3456$22132) (if (g$3456$13220 g$3456$22132) (begin '#f ((lambda (g$3456$22134) (if g$3456$22134 (begin '#f ((lambda (g$3456$22136) (if g$3456$22136 (begin '#f (append g$3456$22134 g$3456$22136)) '#f)) ((lambda (g$3456$22138) (if (g$3456$13220 g$3456$22138) (begin '#f ((lambda (g$3456$22140) (if g$3456$22140 (begin '#f ((lambda (g$3456$22142) (if g$3456$22142 (begin '#f (append g$3456$22140 g$3456$22142)) '#f)) ((letrec ((g$3456$22144 (lambda (g$3456$22146) (if (g$3456$13220 g$3456$22146) ((lambda (g$3456$22148) (if g$3456$22148 (begin '#f ((lambda (g$3456$22150) (if g$3456$22150 (begin '#f (map cons g$3456$22148 g$3456$22150)) '#f)) (g$3456$22144 (g$3456$13232 g$3456$22146)))) '#f)) ((lambda (g$3456$22152) (if (g$3456$13220 g$3456$22152) (begin '#f ((lambda (g$3456$22154) (if g$3456$22154 (begin '#f ((lambda (g$3456$22156) (if g$3456$22156 (begin '#f (append g$3456$22154 g$3456$22156)) '#f)) ((lambda (g$3456$22158) (if (g$3456$13220 g$3456$22158) (begin '#f ((lambda (g$3456$22160) (if g$3456$22160 (begin '#f ((lambda (g$3456$22162) (if g$3456$22162 (begin '#f (append g$3456$22160 g$3456$22162)) '#f)) ((lambda (g$3456$22164) (if (equal? (g$3456$13254 g$3456$22164) '()) (begin '#f '()) '#f)) (g$3456$13232 g$3456$22158)))) '#f)) ((lambda (g$3456$22166) (list g$3456$22166)) (g$3456$13228 g$3456$22158)))) '#f)) (g$3456$13232 g$3456$22152)))) '#f)) ((lambda (g$3456$22168) (list g$3456$22168)) (g$3456$13228 g$3456$22152)))) '#f)) (g$3456$13228 g$3456$22146))) (if (g$3456$13224 g$3456$22146) (list (begin 'old* '()) (begin 'new* '())) '#f))))) g$3456$22144) (g$3456$13232 g$3456$22138)))) '#f)) ((lambda (g$3456$22170) (list g$3456$22170)) (g$3456$13228 g$3456$22138)))) '#f)) (g$3456$13232 g$3456$22132)))) '#f)) ((lambda (g$3456$22172) (list g$3456$22172)) (g$3456$13228 g$3456$22132)))) '#f)) g$3456$21884))) g$3456$21882))) (letrec ((g$3456$22654 (lambda (g$3456$22656 g$3456$22657) (if (null? g$3456$22656) (values g$3456$22657 (g$3456$21866)) (g$3456$22654 (cdr g$3456$22656) (g$3456$21868 (g$3456$21880 (car g$3456$22656)) g$3456$22657)))))) (g$3456$22654 g$3456$21864 '())))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$3456$13649 (lambda (g$3456$22660) ((lambda (g$3456$22662) (begin (for-each (lambda (g$3456$22664) ((lambda (g$3456$22666 g$3456$22667) (g$3456$13173 g$3456$22662 (g$3456$13210 g$3456$22666 g$3456$13140 '()) g$3456$22667)) (car g$3456$22664) (cdr g$3456$22664))) g$3456$22660) g$3456$22662)) (g$3456$13171)))) (set! g$3456$13651 (lambda () ((lambda (g$3456$22670) (lambda g$3456$22674 ((lambda (g$3456$22675) (if (= g$3456$22675 '0) (apply (lambda () g$3456$22670) g$3456$22674) (if (= g$3456$22675 '1) (apply (lambda (g$3456$22672) (set! g$3456$22670 (g$3456$13133 g$3456$22672 g$3456$22670))) g$3456$22674) (error 'apply '"invalid arg count")))) (length g$3456$22674)))) '()))) (set! g$3456$13653 (g$3456$12323 (lambda g$3456$22676 (error 'inv-collector '"not initialized")) (lambda (g$3456$22678) (begin (if (procedure? g$3456$22678) (void) (error 'inv-collector '"not a procedure" g$3456$22678)) g$3456$22678)))) (set! g$3456$13655 (g$3456$12323 (lambda g$3456$22680 (error 'vis-collector '"not initialized")) (lambda (g$3456$22682) (begin (if (procedure? g$3456$22682) (void) (error 'vis-collector '"not a procedure" g$3456$22682)) g$3456$22682)))) (set! g$3456$13657 (lambda (g$3456$22684 g$3456$22685 g$3456$22686) (call-with-values (lambda () (g$3456$13627 g$3456$22684 '() '() '() '() '() '() g$3456$22685 g$3456$22686)) (lambda (g$3456$22690 g$3456$22691 g$3456$22692 g$3456$22693 g$3456$22694 g$3456$22695 g$3456$22696) (values (append (apply append (reverse g$3456$22695)) g$3456$22690) g$3456$22691 g$3456$22692 (reverse g$3456$22693) (reverse g$3456$22694)))))) (set! g$3456$13659 (lambda (g$3456$22704 g$3456$22705 g$3456$22706) (call-with-values (lambda () (g$3456$13641 g$3456$22704)) (lambda (g$3456$22710 g$3456$22711) (call-with-values (lambda () (g$3456$13647 g$3456$22705)) (lambda (g$3456$22712 g$3456$22713) ((lambda (g$3456$22718) ((lambda (g$3456$22720 g$3456$22721 g$3456$22722) ((lambda (g$3456$22730 g$3456$22731 g$3456$22732 g$3456$22733) ((lambda (g$3456$22738) (dynamic-wind g$3456$22738 (lambda () (call-with-values (lambda () (g$3456$13657 g$3456$22720 g$3456$22718 '#f)) (lambda (g$3456$22740 g$3456$22741 g$3456$22742 g$3456$22743 g$3456$22744) (begin (g$3456$13175 g$3456$22718) ((lambda (g$3456$22750 g$3456$22751) (begin (g$3456$13177 g$3456$22718) ((lambda (g$3456$22754) (call-with-values (lambda () (g$3456$13702 g$3456$22741)) (lambda (g$3456$22756 g$3456$22757 g$3456$22758) ((lambda (g$3456$22762 g$3456$22763) (values g$3456$22713 (g$3456$22721) (g$3456$22722) (g$3456$13117 '#f (append g$3456$22763 (list g$3456$22762))) g$3456$22758 g$3456$22754 g$3456$22756)) (g$3456$13114 '#f g$3456$22743 g$3456$22750 (g$3456$13698 g$3456$22757 g$3456$22751)) (map g$3456$13131 (map cdr g$3456$22757)))))) (g$3456$13700 g$3456$22710 g$3456$22711 g$3456$22718)))) (g$3456$13615 g$3456$22744 g$3456$22741 g$3456$22742) (g$3456$13601 g$3456$22740 g$3456$22741 g$3456$22742)))))) g$3456$22738)) (lambda () (begin ((lambda (g$3456$22766) (begin (g$3456$22730 g$3456$22732) (set! g$3456$22732 g$3456$22766))) (g$3456$22730)) ((lambda (g$3456$22768) (begin (g$3456$22731 g$3456$22733) (set! g$3456$22733 g$3456$22768))) (g$3456$22731)))))) g$3456$13653 g$3456$13655 g$3456$22721 g$3456$22722)) (map (lambda (g$3456$22770) (g$3456$13210 g$3456$22770 g$3456$13140 (list g$3456$22718))) g$3456$22706) (g$3456$13651) (g$3456$13651))) (g$3456$13649 g$3456$22712)))))))) (set! g$3456$13661 (lambda (g$3456$22772) (call-with-values (lambda () (g$3456$13645 g$3456$22772)) (lambda (g$3456$22774 g$3456$22775 g$3456$22776 g$3456$22777) (call-with-values (lambda () (g$3456$13643 g$3456$22774)) (lambda (g$3456$22782 g$3456$22783) (call-with-values (lambda () (g$3456$13659 g$3456$22775 g$3456$22776 g$3456$22777)) (lambda (g$3456$22786 g$3456$22787 g$3456$22788 g$3456$22789 g$3456$22790 g$3456$22791 g$3456$22792) (values g$3456$22782 g$3456$22783 g$3456$22786 g$3456$22787 g$3456$22788 g$3456$22789 g$3456$22790 g$3456$22791 g$3456$22792))))))))) (set! g$3456$13663 (lambda (g$3456$22800) ((lambda (g$3456$22802) ((lambda (g$3456$22804) (if (if g$3456$22804 (begin '#f (apply (lambda (g$3456$22806 g$3456$22807 g$3456$22808) (eq? g$3456$22806 'import)) g$3456$22804)) '#f) (apply (lambda (g$3456$22812 g$3456$22813 g$3456$22814) (values g$3456$22813 g$3456$22814)) g$3456$22804) ((lambda (g$3456$22818) ((lambda (g$3456$22820) (if (if g$3456$22820 (begin '#f (apply (lambda () '#t) g$3456$22820)) '#f) (apply (lambda () (error '"invalid syntax of top-level program")) g$3456$22820) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$22818 '())))) ((lambda (g$3456$22822) '()) g$3456$22818))) g$3456$22802))) ((lambda (g$3456$22824) (if (g$3456$13220 g$3456$22824) (begin '#f ((lambda (g$3456$22826) (if g$3456$22826 (begin '#f ((lambda (g$3456$22828) (if g$3456$22828 (begin '#f (append g$3456$22826 g$3456$22828)) '#f)) ((letrec ((g$3456$22830 (lambda (g$3456$22832) (if (g$3456$13220 g$3456$22832) ((lambda (g$3456$22834) (if g$3456$22834 (begin '#f ((lambda (g$3456$22836) (if g$3456$22836 (begin '#f (map cons g$3456$22834 g$3456$22836)) '#f)) (g$3456$22830 (g$3456$13232 g$3456$22832)))) '#f)) ((lambda (g$3456$22838) (list g$3456$22838)) (g$3456$13228 g$3456$22832))) (if (g$3456$13224 g$3456$22832) (list (begin 'b* '())) '#f))))) g$3456$22830) (g$3456$13232 g$3456$22824)))) '#f)) ((lambda (g$3456$22840) (if (g$3456$13220 g$3456$22840) (begin '#f ((lambda (g$3456$22842) (if g$3456$22842 (begin '#f ((lambda (g$3456$22844) (if g$3456$22844 (begin '#f (append g$3456$22842 g$3456$22844)) '#f)) ((letrec ((g$3456$22846 (lambda (g$3456$22848) (if (g$3456$13220 g$3456$22848) ((lambda (g$3456$22850) (if g$3456$22850 (begin '#f ((lambda (g$3456$22852) (if g$3456$22852 (begin '#f (map cons g$3456$22850 g$3456$22852)) '#f)) (g$3456$22846 (g$3456$13232 g$3456$22848)))) '#f)) ((lambda (g$3456$22854) (list g$3456$22854)) (g$3456$13228 g$3456$22848))) (if (g$3456$13224 g$3456$22848) (list (begin 'imp* '())) '#f))))) g$3456$22846) (g$3456$13232 g$3456$22840)))) '#f)) ((lambda (g$3456$22856) (list g$3456$22856)) (g$3456$13228 g$3456$22840)))) '#f)) (g$3456$13228 g$3456$22824)))) '#f)) g$3456$22802))) g$3456$22800))) (set! g$3456$13665 (lambda (g$3456$22858) (call-with-values (lambda () (g$3456$13663 g$3456$22858)) (lambda (g$3456$22860 g$3456$22861) (call-with-values (lambda () (g$3456$13659 '() g$3456$22860 g$3456$22861)) (lambda (g$3456$22864 g$3456$22865 g$3456$22866 g$3456$22867 g$3456$22868 g$3456$22869 g$3456$22870) (values g$3456$22865 g$3456$22867))))))) (set! g$3456$13668 (lambda (g$3456$22878 g$3456$22879) (vector 'g$3456$13667 g$3456$22878 g$3456$22879))) (set! g$3456$13670 (lambda (g$3456$22882) (if (vector? g$3456$22882) (if (= (vector-length g$3456$22882) (+ '1 (length '(subst imp*)))) (begin '#f (eq? (vector-ref g$3456$22882 '0) 'g$3456$13667)) '#f) '#f))) (set! g$3456$13672 (lambda (g$3456$22884) (if (g$3456$13670 g$3456$22884) (vector-ref g$3456$22884 '1) (error 'env-subst '"~s is not of type ~s" g$3456$22884 'env)))) (set! g$3456$13674 (lambda (g$3456$22886) (if (g$3456$13670 g$3456$22886) (vector-ref g$3456$22886 '2) (error 'env-imp* '"~s is not of type ~s" g$3456$22886 'env)))) (set! g$3456$13676 (lambda (g$3456$22888 g$3456$22889) (if (g$3456$13670 g$3456$22888) (vector-set! g$3456$22888 '1 g$3456$22889) (error 'set-env-subst! '"~s is not of type ~s" g$3456$22888 'env)))) (set! g$3456$13678 (lambda (g$3456$22892 g$3456$22893) (if (g$3456$13670 g$3456$22892) (vector-set! g$3456$22892 '2 g$3456$22893) (error 'set-env-imp*! '"~s is not of type ~s" g$3456$22892 'env)))) (set! g$3456$13680 (lambda (g$3456$22896) (g$3456$13670 g$3456$22896))) (set! g$3456$13682 (lambda g$3456$22898 (call-with-values (lambda () (g$3456$13647 g$3456$22898)) (lambda (g$3456$22900 g$3456$22901) (g$3456$13668 g$3456$22900 g$3456$22901))))) (set! g$3456$13684 (lambda (g$3456$22904) (begin (if (eqv? g$3456$22904 '5) (void) (error 'null-environment '"not 5" g$3456$22904)) (g$3456$13682 '(psyntax null-environment-5))))) (set! g$3456$13686 (lambda (g$3456$22906) (begin (if (eqv? g$3456$22906 '5) (void) (error 'scheme-report-environment '"not 5" g$3456$22906)) (g$3456$13682 '(psyntax scheme-report-environment-5))))) (set! g$3456$13688 (lambda (g$3456$22908 g$3456$22909) (begin (if (g$3456$13670 g$3456$22909) (void) (error 'expand '"not an environment" g$3456$22909)) ((lambda (g$3456$22912) ((lambda (g$3456$22914) ((lambda (g$3456$22916 g$3456$22917 g$3456$22918) ((lambda (g$3456$22922) (begin (g$3456$13175 g$3456$22914) (values g$3456$22922 (g$3456$22917)))) ((lambda (g$3456$22928 g$3456$22929 g$3456$22930 g$3456$22931) ((lambda (g$3456$22936) (dynamic-wind g$3456$22936 (lambda () (g$3456$13605 g$3456$22916 '() '())) g$3456$22936)) (lambda () (begin ((lambda (g$3456$22938) (begin (g$3456$22928 g$3456$22930) (set! g$3456$22930 g$3456$22938))) (g$3456$22928)) ((lambda (g$3456$22940) (begin (g$3456$22929 g$3456$22931) (set! g$3456$22931 g$3456$22940))) (g$3456$22929)))))) g$3456$13653 g$3456$13655 g$3456$22917 g$3456$22918))) (g$3456$13210 g$3456$22908 g$3456$13140 (list g$3456$22914)) (g$3456$13651) (g$3456$13651))) (g$3456$13649 g$3456$22912))) (g$3456$13672 g$3456$22909))))) (set! g$3456$13690 (lambda (g$3456$22942 g$3456$22943) (begin (if (g$3456$13670 g$3456$22943) (void) (error 'eval '"not an environment" g$3456$22943)) (call-with-values (lambda () (g$3456$13688 g$3456$22942 g$3456$22943)) (lambda (g$3456$22946 g$3456$22947) (begin (for-each g$3456$12839 g$3456$22947) (eval-core (g$3456$12397 g$3456$22946)))))))) (set! g$3456$13692 (lambda (g$3456$22950) ((lambda (g$3456$22952 g$3456$22954) (begin (set! g$3456$22952 (lambda (g$3456$22964) (if (null? g$3456$22964) (g$3456$13116) (g$3456$13117 '#f (map (lambda (g$3456$22966) ((lambda (g$3456$22968 g$3456$22969) (list 'set! g$3456$22968 g$3456$22969)) (car g$3456$22966) (cddr g$3456$22966))) g$3456$22964))))) (set! g$3456$22954 (lambda (g$3456$22956) (for-each (lambda (g$3456$22958) ((lambda (g$3456$22960 g$3456$22961) (set-symbol-value! g$3456$22960 g$3456$22961)) (car g$3456$22958) (cadr g$3456$22958))) g$3456$22956))) (call-with-values (lambda () (g$3456$13661 g$3456$22950)) (lambda (g$3456$22972 g$3456$22973 g$3456$22974 g$3456$22975 g$3456$22976 g$3456$22977 g$3456$22978 g$3456$22979 g$3456$22980) ((lambda (g$3456$22990 g$3456$22991 g$3456$22992 g$3456$22993 g$3456$22994 g$3456$22995) (begin (g$3456$12843 g$3456$22990 g$3456$22991 g$3456$22992 g$3456$22993 g$3456$22994 g$3456$22995 g$3456$22979 g$3456$22980 (lambda () (g$3456$22954 g$3456$22978)) (lambda () (eval-core (g$3456$12397 g$3456$22977))) '#t) (values g$3456$22977 (g$3456$22952 g$3456$22978) g$3456$22979 g$3456$22980))) (gensym) g$3456$22972 g$3456$22973 (map g$3456$12835 g$3456$22974) (map g$3456$12835 g$3456$22976) (map g$3456$12835 g$3456$22975)))))) '#f '#f))) (set! g$3456$13694 (lambda (g$3456$23002) (call-with-values (lambda () (g$3456$13692 g$3456$23002)) (lambda (g$3456$23004 g$3456$23005 g$3456$23006 g$3456$23007) (values g$3456$23004 g$3456$23006 g$3456$23007))))) (set! g$3456$13696 (lambda (g$3456$23012 g$3456$23013 g$3456$23014) (if (null? g$3456$23013) g$3456$23014 (g$3456$13696 g$3456$23012 (cdr g$3456$23013) (cons (g$3456$23012 (car g$3456$23013)) g$3456$23014))))) (set! g$3456$13698 (lambda (g$3456$23018 g$3456$23019) (g$3456$13117 '#f (cons (g$3456$13116) (g$3456$13696 (lambda (g$3456$23022) (list 'set! (cdr g$3456$23022) (car g$3456$23022))) g$3456$23018 g$3456$23019))))) (set! g$3456$13700 (lambda (g$3456$23024 g$3456$23025 g$3456$23026) (map (lambda (g$3456$23030 g$3456$23031) ((lambda (g$3456$23034) ((lambda (g$3456$23036) ((lambda () (begin (if g$3456$23036 (void) (error 'expander '"cannot export unbound identifier" (g$3456$13252 g$3456$23034 '()))) (cons g$3456$23031 g$3456$23036))))) (g$3456$13256 g$3456$23034))) (g$3456$13210 g$3456$23030 g$3456$13140 (list g$3456$23026)))) g$3456$23024 g$3456$23025))) (set! g$3456$13702 (lambda (g$3456$23038) (letrec ((g$3456$23040 (lambda (g$3456$23042 g$3456$23043 g$3456$23044 g$3456$23045) (if (null? g$3456$23042) (values g$3456$23043 g$3456$23044 g$3456$23045) ((lambda (g$3456$23050) ((lambda (g$3456$23052 g$3456$23053) ((lambda (g$3456$23056) (if (memv g$3456$23056 '(lexical)) ((lambda (g$3456$23061) (g$3456$23040 (cdr g$3456$23042) (cons (cons* g$3456$23052 'global g$3456$23061) g$3456$23043) (cons (cons (g$3456$13264 g$3456$23053) g$3456$23061) g$3456$23044) g$3456$23045)) (g$3456$13146 (g$3456$13264 g$3456$23053))) (if (memv g$3456$23056 '(local-macro)) ((lambda (g$3456$23059) (g$3456$23040 (cdr g$3456$23042) (cons (cons* g$3456$23052 'global-macro g$3456$23059) g$3456$23043) g$3456$23044 (cons (cons g$3456$23059 (g$3456$13264 g$3456$23053)) g$3456$23045))) (gensym)) (if (memv g$3456$23056 '(local-macro!)) ((lambda (g$3456$23057) (g$3456$23040 (cdr g$3456$23042) (cons (cons* g$3456$23052 'global-macro! g$3456$23057) g$3456$23043) g$3456$23044 (cons (cons g$3456$23057 (g$3456$13264 g$3456$23053)) g$3456$23045))) (gensym)) (if (memv g$3456$23056 '($rtd $module)) (g$3456$23040 (cdr g$3456$23042) (cons g$3456$23050 g$3456$23043) g$3456$23044 g$3456$23045) (error 'expander '"BUG: do not know how to export" (g$3456$13262 g$3456$23053) (g$3456$13264 g$3456$23053))))))) (g$3456$13262 g$3456$23053))) (car g$3456$23050) (cdr g$3456$23050))) (car g$3456$23042)))))) (g$3456$23040 g$3456$23038 '() '() '())))) (set! g$3456$13704 (lambda (g$3456$23063) ((lambda (g$3456$23065) ((lambda (g$3456$23067) (if (if g$3456$23067 (begin '#f (apply (lambda (g$3456$23069) '#t) g$3456$23067)) '#f) (apply (lambda (g$3456$23071) (map (lambda (g$3456$23073) (g$3456$13184 (gensym 't) g$3456$13140 '())) g$3456$23071)) g$3456$23067) ((lambda (g$3456$23075) ((lambda (g$3456$23077) (if (if g$3456$23077 (begin '#f (apply (lambda () '#t) g$3456$23077)) '#f) (apply (lambda () (error 'generate-temporaries '"not a list")) g$3456$23077) (error 'expander '"invalid syntax" (g$3456$13252 g$3456$23075 '())))) ((lambda (g$3456$23079) '()) g$3456$23075))) g$3456$23065))) ((letrec ((g$3456$23081 (lambda (g$3456$23083) (if (g$3456$13220 g$3456$23083) ((lambda (g$3456$23085) (if g$3456$23085 (begin '#f ((lambda (g$3456$23087) (if g$3456$23087 (begin '#f (map cons g$3456$23085 g$3456$23087)) '#f)) (g$3456$23081 (g$3456$13232 g$3456$23083)))) '#f)) ((lambda (g$3456$23089) (list g$3456$23089)) (g$3456$13228 g$3456$23083))) (if (g$3456$13224 g$3456$23083) (list (begin 'ls '())) '#f))))) g$3456$23081) g$3456$23065))) g$3456$23063))) (set! g$3456$13706 (lambda (g$3456$23091 g$3456$23092) (if (g$3456$13234 g$3456$23091) (if (g$3456$13234 g$3456$23092) (g$3456$13242 g$3456$23091 g$3456$23092) (error 'free-identifier=? '"not an identifier" g$3456$23092)) (error 'free-identifier=? '"not an identifier" g$3456$23091)))) (set! g$3456$13708 (lambda (g$3456$23095 g$3456$23096) (if (g$3456$13234 g$3456$23095) (if (g$3456$13234 g$3456$23096) (g$3456$13240 g$3456$23095 g$3456$23096) (error 'bound-identifier=? '"not an identifier" g$3456$23096)) (error 'bound-identifier=? '"not an identifier" g$3456$23095)))) (set! g$3456$13710 (lambda (g$3456$23099 . g$3456$23101) (begin (if (for-all string? g$3456$23101) (void) (error 'syntax-error '"invalid argument" g$3456$23101)) (error 'expander '"invalid syntax" (g$3456$13254 g$3456$23099) (apply string-append g$3456$23101))))) (set! g$3456$13712 (lambda (g$3456$23103) (g$3456$13234 g$3456$23103))) (set! g$3456$13714 (lambda (g$3456$23105 g$3456$23106) (if (g$3456$13234 g$3456$23105) (g$3456$13200 g$3456$23105 g$3456$23106) (error 'datum->syntax '"not an identifier" g$3456$23105)))) (set! g$3456$13716 (lambda (g$3456$23109) (g$3456$13254 g$3456$23109))) (set! g$3456$13718 (lambda (g$3456$23111) (call-with-values (lambda () (g$3456$13665 g$3456$23111)) (lambda (g$3456$23113 g$3456$23114) (begin (for-each g$3456$12839 g$3456$23113) (eval-core (g$3456$12397 g$3456$23114))))))) (set! g$3456$13720 (g$3456$12323 '#f)) (set! g$3456$13722 (lambda (g$3456$23117) ((lambda (g$3456$23119) (if g$3456$23119 ((lambda (g$3456$23121) ((lambda (g$3456$23123) (if g$3456$23123 (cdr g$3456$23123) ((lambda (g$3456$23125) ((lambda (g$3456$23127) (if g$3456$23127 ((lambda (g$3456$23129) ((lambda (g$3456$23131) (begin (g$3456$12842 g$3456$23121 g$3456$23117 g$3456$23131) g$3456$23131)) (cdr g$3456$23129))) g$3456$23127) ((lambda (g$3456$23133) (begin (g$3456$12842 g$3456$23121 g$3456$23117 g$3456$23133) (g$3456$12841 g$3456$23121 g$3456$23133 (cons 'global (cons g$3456$23121 (g$3456$13146 g$3456$23117)))) g$3456$23133)) (g$3456$13148 g$3456$23117)))) (assq g$3456$23117 g$3456$23125))) (if (g$3456$12847 '(ikarus)) (g$3456$12873 (g$3456$12848 '(ikarus))) '())))) (assq g$3456$23117 (g$3456$12873 g$3456$23121)))) g$3456$23119) '#f)) (g$3456$13720)))) (set! g$3456$13724 (lambda (g$3456$23135) ((lambda (g$3456$23137) (begin (set! g$3456$23137 (lambda (g$3456$23139) ((lambda (g$3456$23141 g$3456$23142) (if g$3456$23141 (set-symbol-value! g$3456$23141 (eval-core (g$3456$12397 g$3456$23142))) (eval-core (g$3456$12397 g$3456$23142)))) (car g$3456$23139) (cdr g$3456$23139)))) ((lambda (g$3456$23145 g$3456$23146) ((lambda (g$3456$23149) (begin (for-each g$3456$12839 (g$3456$23145)) (if (null? g$3456$23149) (void) (begin (for-each g$3456$23137 (reverse (cdr g$3456$23149))) (g$3456$23137 (car g$3456$23149)))))) ((lambda (g$3456$23157 g$3456$23158 g$3456$23159 g$3456$23160 g$3456$23161 g$3456$23162) ((lambda (g$3456$23169) (dynamic-wind g$3456$23169 (lambda () (g$3456$13637 (list (g$3456$13210 g$3456$23135 g$3456$13140 '())) '())) g$3456$23169)) (lambda () (begin ((lambda (g$3456$23171) (begin (g$3456$23157 g$3456$23160) (set! g$3456$23160 g$3456$23171))) (g$3456$23157)) ((lambda (g$3456$23173) (begin (g$3456$23158 g$3456$23161) (set! g$3456$23161 g$3456$23173))) (g$3456$23158)) ((lambda (g$3456$23175) (begin (g$3456$23159 g$3456$23162) (set! g$3456$23162 g$3456$23175))) (g$3456$23159)))))) g$3456$13653 g$3456$13655 g$3456$13720 g$3456$23145 g$3456$23146 (g$3456$12848 '(ikarus interaction))))) (g$3456$13651) (g$3456$13651)))) '#f))) (begin (set! g$3456$23177 g$3456$13724) (set! g$3456$23178 g$3456$13722) (set! g$3456$23179 g$3456$13720) (set! g$3456$23180 g$3456$13718) (set! g$3456$23181 g$3456$13716) (set! g$3456$23182 g$3456$13714) (set! g$3456$23183 g$3456$13712) (set! g$3456$23184 g$3456$13710) (set! g$3456$23185 g$3456$13708) (set! g$3456$23186 g$3456$13706) (set! g$3456$23187 g$3456$13704) (set! g$3456$23188 g$3456$13702) (set! g$3456$23189 g$3456$13700) (set! g$3456$23190 g$3456$13698) (set! g$3456$23191 g$3456$13696) (set! g$3456$23192 g$3456$13694) (set! g$3456$23193 g$3456$13692) (set! g$3456$23194 g$3456$13690) (set! g$3456$23195 g$3456$13688) (set! g$3456$23196 g$3456$13686) (set! g$3456$23197 g$3456$13684) (set! g$3456$23198 g$3456$13682) (set! g$3456$23199 g$3456$13680) (set! g$3456$23200 g$3456$13678) (set! g$3456$23201 g$3456$13676) (set! g$3456$23202 g$3456$13674) (set! g$3456$23203 g$3456$13672) (set! g$3456$23204 g$3456$13670) (set! g$3456$23205 g$3456$13668) (set! g$3456$23206 g$3456$13665) (set! g$3456$23207 g$3456$13663) (set! g$3456$23208 g$3456$13661) (set! g$3456$23209 g$3456$13659) (set! g$3456$23210 g$3456$13657) (set! g$3456$23211 g$3456$13655) (set! g$3456$23212 g$3456$13653) (set! g$3456$23213 g$3456$13651) (set! g$3456$23214 g$3456$13649) (set! g$3456$23215 g$3456$13647) (set! g$3456$23216 g$3456$13645) (set! g$3456$23217 g$3456$13643) (set! g$3456$23218 g$3456$13641) (set! g$3456$23219 g$3456$13639) (set! g$3456$23220 g$3456$13637) (set! g$3456$23221 g$3456$13635) (set! g$3456$23222 g$3456$13633) (set! g$3456$23223 g$3456$13631) (set! g$3456$23224 g$3456$13629) (set! g$3456$23225 g$3456$13627) (set! g$3456$23226 g$3456$13625) (set! g$3456$23227 g$3456$13623) (set! g$3456$23228 g$3456$13621) (set! g$3456$23229 g$3456$13619) (set! g$3456$23230 g$3456$13617) (set! g$3456$23231 g$3456$13615) (set! g$3456$23232 g$3456$13613) (set! g$3456$23233 g$3456$13611) (set! g$3456$23234 g$3456$13609) (set! g$3456$23235 g$3456$13607) (set! g$3456$23236 g$3456$13605) (set! g$3456$23237 g$3456$13603) (set! g$3456$23238 g$3456$13601) (set! g$3456$23239 g$3456$13599) (set! g$3456$23240 g$3456$13597) (set! g$3456$23241 g$3456$13595) (set! g$3456$23242 g$3456$13593) (set! g$3456$23243 g$3456$13591) (set! g$3456$23244 g$3456$13589) (set! g$3456$23245 g$3456$13587) (set! g$3456$23246 g$3456$13585) (set! g$3456$23247 g$3456$13583) (set! g$3456$23248 g$3456$13581) (set! g$3456$23249 g$3456$13579) (set! g$3456$23250 g$3456$13577) (set! g$3456$23251 g$3456$13575) (set! g$3456$23252 g$3456$13573) (set! g$3456$23253 g$3456$13571) (set! g$3456$23254 g$3456$13569) (set! g$3456$23255 g$3456$13567) (set! g$3456$23256 g$3456$13565) (set! g$3456$23257 g$3456$13563) (set! g$3456$23258 g$3456$13561) (set! g$3456$23259 g$3456$13559) (set! g$3456$23260 g$3456$13557) (set! g$3456$23261 g$3456$13555) (set! g$3456$23262 g$3456$13553) (set! g$3456$23263 g$3456$13551) (set! g$3456$23264 g$3456$13549) (set! g$3456$23265 g$3456$13547) (set! g$3456$23266 g$3456$13545) (set! g$3456$23267 g$3456$13543) (set! g$3456$23268 g$3456$13541) (set! g$3456$23269 g$3456$13539) (set! g$3456$23270 g$3456$13537) (set! g$3456$23271 g$3456$13535) (set! g$3456$23272 g$3456$13533) (set! g$3456$23273 g$3456$13531) (set! g$3456$23274 g$3456$13529) (set! g$3456$23275 g$3456$13527) (set! g$3456$23276 g$3456$13525) (set! g$3456$23277 g$3456$13523) (set! g$3456$23278 g$3456$13521) (set! g$3456$23279 g$3456$13519) (set! g$3456$23280 g$3456$13517) (set! g$3456$23281 g$3456$13515) (set! g$3456$23282 g$3456$13513) (set! g$3456$23283 g$3456$13511) (set! g$3456$23284 g$3456$13509) (set! g$3456$23285 g$3456$13507) (set! g$3456$23286 g$3456$13505) (set! g$3456$23287 g$3456$13503) (set! g$3456$23288 g$3456$13501) (set! g$3456$23289 g$3456$13499) (set! g$3456$23290 g$3456$13497) (set! g$3456$23291 g$3456$13495) (set! g$3456$23292 g$3456$13493) (set! g$3456$23293 g$3456$13491) (set! g$3456$23294 g$3456$13489) (set! g$3456$23295 g$3456$13487) (set! g$3456$23296 g$3456$13485) (set! g$3456$23297 g$3456$13483) (set! g$3456$23299 g$3456$13284) (set! g$3456$23300 g$3456$13282) (set! g$3456$23301 g$3456$13280) (set! g$3456$23303 g$3456$13266) (set! g$3456$23304 g$3456$13264) (set! g$3456$23305 g$3456$13262) (set! g$3456$23306 g$3456$13260) (set! g$3456$23307 g$3456$13258) (set! g$3456$23308 g$3456$13256) (set! g$3456$23309 g$3456$13254) (set! g$3456$23310 g$3456$13252) (set! g$3456$23311 g$3456$13250) (set! g$3456$23312 g$3456$13248) (set! g$3456$23313 g$3456$13246) (set! g$3456$23314 g$3456$13244) (set! g$3456$23315 g$3456$13242) (set! g$3456$23316 g$3456$13240) (set! g$3456$23317 g$3456$13238) (set! g$3456$23318 g$3456$13236) (set! g$3456$23319 g$3456$13234) (set! g$3456$23320 g$3456$13232) (set! g$3456$23321 g$3456$13230) (set! g$3456$23322 g$3456$13228) (set! g$3456$23323 g$3456$13226) (set! g$3456$23324 g$3456$13224) (set! g$3456$23325 g$3456$13222) (set! g$3456$23326 g$3456$13220) (set! g$3456$23327 g$3456$13218) (set! g$3456$23328 g$3456$13216) (set! g$3456$23329 g$3456$13214) (set! g$3456$23330 g$3456$13212) (set! g$3456$23331 g$3456$13210) (set! g$3456$23332 g$3456$13208) (set! g$3456$23333 g$3456$13206) (set! g$3456$23334 g$3456$13204) (set! g$3456$23335 g$3456$13202) (set! g$3456$23336 g$3456$13200) (set! g$3456$23337 g$3456$13198) (set! g$3456$23338 g$3456$13196) (set! g$3456$23339 g$3456$13194) (set! g$3456$23340 g$3456$13192) (set! g$3456$23341 g$3456$13190) (set! g$3456$23342 g$3456$13188) (set! g$3456$23343 g$3456$13186) (set! g$3456$23344 g$3456$13184) (set! g$3456$23345 g$3456$13181) (set! g$3456$23346 g$3456$13179) (set! g$3456$23347 g$3456$13177) (set! g$3456$23348 g$3456$13175) (set! g$3456$23349 g$3456$13173) (set! g$3456$23350 g$3456$13171) (set! g$3456$23351 g$3456$13169) (set! g$3456$23352 g$3456$13167) (set! g$3456$23353 g$3456$13165) (set! g$3456$23354 g$3456$13163) (set! g$3456$23355 g$3456$13161) (set! g$3456$23356 g$3456$13159) (set! g$3456$23357 g$3456$13157) (set! g$3456$23358 g$3456$13155) (set! g$3456$23359 g$3456$13153) (set! g$3456$23360 g$3456$13151) (set! g$3456$23361 g$3456$13148) (set! g$3456$23362 g$3456$13146) (set! g$3456$23363 g$3456$13144) (set! g$3456$23364 g$3456$13142) (set! g$3456$23365 g$3456$13140) (set! g$3456$23367 g$3456$13135) (set! g$3456$23368 g$3456$13133) (g$3456$12851 g$3456$13692)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (g$3456$12401 (lambda (g$3456$24132) ((lambda (g$3456$24134) (if g$3456$24134 (cdr g$3456$24134) '#f)) (assq g$3456$24132 '((syntax-error . g$3456$23184) (syntax-dispatch . g$3456$23250) (make-variable-transformer . g$3456$23300) (identifier? . g$3456$23183) (generate-temporaries . g$3456$23187) (free-identifier=? . g$3456$23186) (syntax->datum . g$3456$23181) (datum->syntax . g$3456$23182) (bound-identifier=? . g$3456$23185) (null-environment . g$3456$23197) (eval . g$3456$23194) (environment . g$3456$23198)))))) (g$3456$12843 'g$3456$24099 '(ikarus interaction) '() '() '() '() '() '() values values '#t) (g$3456$12843 'g$3456$24100 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$3456$23435) (unquote . g$3456$23434) (delay . g$3456$23427) (or . g$3456$23425) (and . g$3456$23424) (do . g$3456$23423) (cond . g$3456$23422) (let* . g$3456$23421) (let . g$3456$23420) (quasiquote . g$3456$23416) (syntax-rules . g$3456$23415) (case . g$3456$23409) (if . g$3456$23405) (letrec . g$3456$23403) (lambda . g$3456$23400) (quote . g$3456$23397) (letrec-syntax . g$3456$23395) (let-syntax . g$3456$23394) (set! . g$3456$23393) (begin . g$3456$23391) (define-syntax . g$3456$23389) (define . g$3456$23388)) '() values values '#t) (g$3456$12843 'g$3456$24101 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g$3456$24080) (string-ci>=? . g$3456$24079) (string-ci=? . g$3456$24078) (string-ci<? . g$3456$24077) (string-ci<=? . g$3456$24076) (char-whitespace? . g$3456$24075) (char-upper-case? . g$3456$24074) (char-numeric? . g$3456$24072) (char-lower-case? . g$3456$24071) (char-upcase . g$3456$24069) (char-downcase . g$3456$24066) (char-ci>? . g$3456$24065) (char-ci>=? . g$3456$24064) (char-ci=? . g$3456$24063) (char-ci<? . g$3456$24062) (char-ci<=? . g$3456$24061) (char-alphabetic? . g$3456$24060) (call-with-output-file . g$3456$24016) (call-with-input-file . g$3456$24015) (write-char . g$3456$24014) (write . g$3456$24013) (with-output-to-file . g$3456$24012) (with-input-from-file . g$3456$24011) (read-char . g$3456$24010) (read . g$3456$24009) (peek-char . g$3456$24008) (open-output-file . g$3456$24007) (open-input-file . g$3456$24006) (newline . g$3456$24005) (display . g$3456$24004) (close-output-port . g$3456$24003) (close-input-port . g$3456$24002) (eof-object . g$3456$24000) (current-output-port . g$3456$23998) (current-input-port . g$3456$23997) (output-port? . g$3456$23996) (input-port? . g$3456$23995) (scheme-report-environment . g$3456$23910) (quotient . g$3456$23909) (null-environment . g$3456$13685) (remainder . g$3456$23908) (modulo . g$3456$23907) (inexact->exact . g$3456$23906) (force . g$3456$23905) (exact->inexact . g$3456$23904) (string-fill! . g$3456$23901) (string-set! . g$3456$23900) (set-cdr! . g$3456$23899) (set-car! . g$3456$23898) (memv . g$3456$23892) (memq . g$3456$23891) (member . g$3456$23889) (assv . g$3456$23881) (assq . g$3456$23880) (assoc . g$3456$23878) (eval . g$3456$13691) (zero? . g$3456$23647) (vector? . g$3456$23646) (vector-set! . g$3456$23645) (vector-ref . g$3456$23644) (vector-length . g$3456$23642) (vector-fill! . g$3456$23640) (vector->list . g$3456$23639) (vector . g$3456$23638) (values . g$3456$23637) (truncate . g$3456$23636) (tan . g$3456$23635) (symbol? . g$3456$23634) (symbol->string . g$3456$23632) (substring . g$3456$23631) (string? . g$3456$23630) (string>? . g$3456$23629) (string>=? . g$3456$23628) (string=? . g$3456$23627) (string<? . g$3456$23626) (string<=? . g$3456$23625) (string-ref . g$3456$23624) (string-length . g$3456$23623) (string-copy . g$3456$23621) (string-append . g$3456$23620) (string->symbol . g$3456$23619) (string->number . g$3456$23618) (string->list . g$3456$23617) (string . g$3456$23616) (sqrt . g$3456$23615) (sin . g$3456$23614) (round . g$3456$23613) (reverse . g$3456$23612) (real? . g$3456$23611) (real-part . g$3456$23609) (rationalize . g$3456$23608) (rational? . g$3456$23607) (procedure? . g$3456$23605) (positive? . g$3456$23604) (pair? . g$3456$23603) (odd? . g$3456$23602) (numerator . g$3456$23601) (number? . g$3456$23600) (number->string . g$3456$23599) (not . g$3456$23597) (negative? . g$3456$23596) (min . g$3456$23594) (max . g$3456$23593) (map . g$3456$23592) (make-vector . g$3456$23591) (make-string . g$3456$23590) (make-rectangular . g$3456$23589) (make-polar . g$3456$23588) (magnitude . g$3456$23587) (log . g$3456$23586) (list? . g$3456$23585) (list-tail . g$3456$23584) (list-ref . g$3456$23583) (list->vector . g$3456$23582) (list->string . g$3456$23581) (list . g$3456$23580) (length . g$3456$23579) (lcm . g$3456$23578) (integer? . g$3456$23577) (integer->char . g$3456$23575) (inexact? . g$3456$23573) (imag-part . g$3456$23571) (gcd . g$3456$23570) (for-each . g$3456$23569) (floor . g$3456$23568) (expt . g$3456$23566) (exp . g$3456$23565) (exact? . g$3456$23564) (even? . g$3456$23561) (eqv? . g$3456$23559) (equal? . g$3456$23558) (eq? . g$3456$23557) (dynamic-wind . g$3456$23556) (denominator . g$3456$23549) (cos . g$3456$23548) (cons . g$3456$23547) (complex? . g$3456$23546) (char? . g$3456$23545) (char>? . g$3456$23544) (char>=? . g$3456$23543) (char=? . g$3456$23542) (char<? . g$3456$23541) (char<=? . g$3456$23540) (char->integer . g$3456$23539) (ceiling . g$3456$23538) (call-with-values . g$3456$23537) (call-with-current-continuation . g$3456$23535) (cddddr . g$3456$23534) (cdddar . g$3456$23533) (cddadr . g$3456$23532) (cddaar . g$3456$23531) (cdaddr . g$3456$23530) (cdadar . g$3456$23529) (cdaadr . g$3456$23528) (cdaaar . g$3456$23527) (cadddr . g$3456$23526) (caddar . g$3456$23525) (cadadr . g$3456$23524) (cadaar . g$3456$23523) (caaddr . g$3456$23522) (caadar . g$3456$23521) (caaadr . g$3456$23520) (caaaar . g$3456$23519) (cdddr . g$3456$23518) (cddar . g$3456$23517) (cdadr . g$3456$23516) (cdaar . g$3456$23515) (caddr . g$3456$23514) (cadar . g$3456$23513) (caadr . g$3456$23512) (caaar . g$3456$23511) (cddr . g$3456$23510) (cdar . g$3456$23509) (cadr . g$3456$23508) (caar . g$3456$23507) (cdr . g$3456$23506) (car . g$3456$23505) (boolean? . g$3456$23504) (atan . g$3456$23502) (asin . g$3456$23500) (apply . g$3456$23499) (append . g$3456$23498) (angle . g$3456$23497) (acos . g$3456$23496) (abs . g$3456$23495) (/ . g$3456$23494) (* . g$3456$23493) (- . g$3456$23492) (+ . g$3456$23491) (>= . g$3456$23490) (> . g$3456$23489) (= . g$3456$23488) (<= . g$3456$23487) (< . g$3456$23486) (unquote-splicing . g$3456$23435) (unquote . g$3456$23434) (delay . g$3456$23427) (or . g$3456$23425) (and . g$3456$23424) (do . g$3456$23423) (cond . g$3456$23422) (let* . g$3456$23421) (let . g$3456$23420) (quasiquote . g$3456$23416) (syntax-rules . g$3456$23415) (case . g$3456$23409) (if . g$3456$23405) (letrec . g$3456$23403) (lambda . g$3456$23400) (quote . g$3456$23397) (letrec-syntax . g$3456$23395) (let-syntax . g$3456$23394) (set! . g$3456$23393) (begin . g$3456$23391) (define-syntax . g$3456$23389) (define . g$3456$23388)) '() values values '#t) (g$3456$12843 'g$3456$24102 '(psyntax modules) '() '() '() '() '((module . g$3456$23390)) '() values values '#t) (g$3456$12843 'g$3456$24103 '(chez parameters) '() '() '() '() '() '() values values '#t) (g$3456$12843 'g$3456$24104 '(rnrs) '(6) '() '() '() '((regexp? . g$3456$24098) (string-upcase . g$3456$24088) (string-titlecase . g$3456$24087) (string-normalize-nfkd . g$3456$24086) (string-normalize-nfkc . g$3456$24085) (string-normalize-nfd . g$3456$24084) (string-normalize-nfc . g$3456$24083) (string-foldcase . g$3456$24082) (string-downcase . g$3456$24081) (string-ci>? . g$3456$24080) (string-ci>=? . g$3456$24079) (string-ci=? . g$3456$24078) (string-ci<? . g$3456$24077) (string-ci<=? . g$3456$24076) (char-whitespace? . g$3456$24075) (char-upper-case? . g$3456$24074) (char-title-case? . g$3456$24073) (char-numeric? . g$3456$24072) (char-lower-case? . g$3456$24071) (char-general-category . g$3456$24070) (char-upcase . g$3456$24069) (char-titlecase . g$3456$24068) (char-foldcase . g$3456$24067) (char-downcase . g$3456$24066) (char-ci>? . g$3456$24065) (char-ci>=? . g$3456$24064) (char-ci=? . g$3456$24063) (char-ci<? . g$3456$24062) (char-ci<=? . g$3456$24061) (char-alphabetic? . g$3456$24060) (make-variable-transformer . g$3456$13283) (identifier? . g$3456$13713) (generate-temporaries . g$3456$13705) (free-identifier=? . g$3456$13707) (syntax->datum . g$3456$13717) (datum->syntax . g$3456$13715) (bound-identifier=? . g$3456$13709) (record-type-descriptor? . g$3456$24059) (record-predicate . g$3456$24058) (record-mutator . g$3456$24057) (record-constructor . g$3456$24056) (record-accessor . g$3456$24055) (make-record-type-descriptor . g$3456$24054) (make-record-constructor-descriptor . g$3456$24053) (record? . g$3456$24052) (record-type-uid . g$3456$24051) (record-type-sealed? . g$3456$24050) (record-type-parent . g$3456$24049) (record-type-opaque? . g$3456$24048) (record-type-name . g$3456$24047) (record-type-generative? . g$3456$24046) (record-type-field-names . g$3456$24045) (record-rtd . g$3456$24044) (record-field-mutable? . g$3456$24043) (delete-file . g$3456$24042) (file-exists? . g$3456$24041) (vector-sort! . g$3456$24040) (vector-sort . g$3456$24039) (list-sort . g$3456$24038) (symbol-hash . g$3456$24037) (string-ci-hash . g$3456$24036) (string-hash . g$3456$24035) (equal-hash . g$3456$24034) (hashtable-equivalence-function . g$3456$24033) (make-hashtable . g$3456$24032) (hashtable-hash-function . g$3456$24031) (make-eqv-hashtable . g$3456$24030) (make-eq-hashtable . g$3456$24029) (hashtable? . g$3456$24028) (hashtable-update! . g$3456$24027) (hashtable-size . g$3456$24026) (hashtable-set! . g$3456$24025) (hashtable-ref . g$3456$24024) (hashtable-mutable? . g$3456$24023) (hashtable-keys . g$3456$24022) (hashtable-entries . g$3456$24021) (hashtable-delete! . g$3456$24020) (hashtable-copy . g$3456$24019) (hashtable-contains? . g$3456$24018) (hashtable-clear! . g$3456$24017) (call-with-output-file . g$3456$24016) (call-with-input-file . g$3456$24015) (write-char . g$3456$24014) (write . g$3456$24013) (with-output-to-file . g$3456$24012) (with-input-from-file . g$3456$24011) (read-char . g$3456$24010) (read . g$3456$24009) (peek-char . g$3456$24008) (open-output-file . g$3456$24007) (open-input-file . g$3456$24006) (newline . g$3456$24005) (display . g$3456$24004) (close-output-port . g$3456$24003) (close-input-port . g$3456$24002) (eof-object? . g$3456$24001) (eof-object . g$3456$24000) (current-error-port . g$3456$23999) (current-output-port . g$3456$23998) (current-input-port . g$3456$23997) (output-port? . g$3456$23996) (input-port? . g$3456$23995) (utf-8-codec . g$3456$23994) (utf-16-codec . g$3456$23993) (transcoder-error-handling-mode . g$3456$23992) (transcoder-eol-style . g$3456$23991) (transcoder-codec . g$3456$23990) (transcoded-port . g$3456$23989) (textual-port? . g$3456$23988) (string->bytevector . g$3456$23987) (standard-output-port . g$3456$23986) (standard-input-port . g$3456$23985) (standard-error-port . g$3456$23984) (set-port-position! . g$3456$23983) (put-u8 . g$3456$23982) (put-string . g$3456$23981) (put-datum . g$3456$23980) (put-char . g$3456$23979) (put-bytevector . g$3456$23978) (port? . g$3456$23977) (port-transcoder . g$3456$23976) (port-position . g$3456$23975) (port-has-set-port-position!? . g$3456$23974) (port-has-port-position? . g$3456$23973) (port-eof? . g$3456$23972) (output-port-buffer-mode . g$3456$23971) (open-string-output-port . g$3456$23970) (open-string-input-port . g$3456$23969) (open-file-output-port . g$3456$23968) (open-file-input/output-port . g$3456$23967) (open-file-input-port . g$3456$23966) (open-bytevector-output-port . g$3456$23965) (open-bytevector-input-port . g$3456$23964) (native-transcoder . g$3456$23963) (native-eol-style . g$3456$23962) (make-transcoder . g$3456$23961) (latin-1-codec . g$3456$23960) (make-i/o-write-error . g$3456$23959) (make-i/o-read-error . g$3456$23958) (make-i/o-port-error . g$3456$23957) (make-i/o-invalid-position-error . g$3456$23956) (make-i/o-filename-error . g$3456$23955) (make-i/o-file-protection-error . g$3456$23954) (make-i/o-file-is-read-only-error . g$3456$23953) (make-i/o-file-does-not-exist-error . g$3456$23952) (make-i/o-file-already-exists-error . g$3456$23951) (make-i/o-error . g$3456$23950) (make-i/o-encoding-error . g$3456$23949) (make-i/o-decoding-error . g$3456$23948) (make-custom-textual-output-port . g$3456$23947) (make-custom-textual-input/output-port . g$3456$23946) (make-custom-textual-input-port . g$3456$23945) (make-custom-binary-output-port . g$3456$23944) (make-custom-binary-input/output-port . g$3456$23943) (make-custom-binary-input-port . g$3456$23942) (make-bytevector . g$3456$23941) (lookahead-u8 . g$3456$23940) (lookahead-char . g$3456$23939) (i/o-write-error? . g$3456$23938) (i/o-read-error? . g$3456$23937) (i/o-port-error? . g$3456$23936) (i/o-invalid-position-error? . g$3456$23935) (i/o-filename-error? . g$3456$23934) (i/o-file-protection-error? . g$3456$23933) (i/o-file-is-read-only-error? . g$3456$23932) (i/o-file-does-not-exist-error? . g$3456$23931) (i/o-file-already-exists-error? . g$3456$23930) (i/o-error? . g$3456$23929) (i/o-error-port . g$3456$23928) (i/o-error-filename . g$3456$23927) (i/o-encoding-error? . g$3456$23926) (i/o-encoding-error-char . g$3456$23925) (i/o-decoding-error? . g$3456$23924) (get-u8 . g$3456$23923) (get-string-n! . g$3456$23922) (get-string-n . g$3456$23921) (get-string-all . g$3456$23920) (get-line . g$3456$23919) (get-datum . g$3456$23918) (get-char . g$3456$23917) (get-bytevector-some . g$3456$23916) (get-bytevector-n! . g$3456$23915) (get-bytevector-n . g$3456$23914) (get-bytevector-all . g$3456$23913) (flush-output-port . g$3456$23912) (close-port . g$3456$23911) (exit . g$3456$23903) (command-line . g$3456$23902) (remove . g$3456$23897) (remv . g$3456$23896) (remp . g$3456$23895) (remq . g$3456$23894) (partition . g$3456$23893) (memv . g$3456$23892) (memq . g$3456$23891) (memp . g$3456$23890) (member . g$3456$23889) (exists . g$3456$23888) (for-all . g$3456$23887) (fold-right . g$3456$23886) (fold-left . g$3456$23885) (find . g$3456$23884) (filter . g$3456$23883) (cons* . g$3456$23882) (assv . g$3456$23881) (assq . g$3456$23880) (assp . g$3456$23879) (assoc . g$3456$23878) (call-with-string-output-port . g$3456$23877) (call-with-port . g$3456$23876) (call-with-bytevector-output-port . g$3456$23875) (bytevector->string . g$3456$23874) (buffer-mode? . g$3456$23873) (binary-port? . g$3456$23872) (with-exception-handler . g$3456$23871) (raise-continuable . g$3456$23870) (raise . g$3456$23869) (make-enumeration . g$3456$23868) (enum-set=? . g$3456$23867) (enum-set-universe . g$3456$23866) (enum-set-union . g$3456$23865) (enum-set-subset? . g$3456$23864) (enum-set-projection . g$3456$23863) (enum-set-member? . g$3456$23862) (enum-set-intersection . g$3456$23861) (enum-set-indexer . g$3456$23860) (enum-set-difference . g$3456$23859) (enum-set-constructor . g$3456$23858) (enum-set-complement . g$3456$23857) (enum-set->list . g$3456$23856) (who-condition? . g$3456$23855) (warning? . g$3456$23854) (violation? . g$3456$23853) (undefined-violation? . g$3456$23852) (syntax-violation? . g$3456$23851) (syntax-violation-subform . g$3456$23850) (syntax-violation-form . g$3456$23849) (syntax-violation . g$3456$23848) (simple-conditions . g$3456$23847) (serious-condition? . g$3456$23846) (non-continuable-violation? . g$3456$23845) (&non-continuable . g$3456$23844) (message-condition? . g$3456$23843) (make-who-condition . g$3456$23842) (make-warning . g$3456$23841) (make-violation . g$3456$23840) (make-undefined-violation . g$3456$23839) (make-syntax-violation . g$3456$23838) (make-serious-condition . g$3456$23837) (make-non-continuable-violation . g$3456$23836) (make-message-condition . g$3456$23835) (make-lexical-violation . g$3456$23834) (make-irritants-condition . g$3456$23833) (make-implementation-restriction-violation . g$3456$23832) (make-error . g$3456$23831) (make-assertion-violation . g$3456$23830) (lexical-violation? . g$3456$23829) (irritants-condition? . g$3456$23828) (implementation-restriction-violation? . g$3456$23827) (&implementation-restriction . g$3456$23826) (error? . g$3456$23825) (condition-who . g$3456$23824) (condition-predicate . g$3456$23823) (condition-message . g$3456$23822) (condition-irritants . g$3456$23821) (condition-accessor . g$3456$23820) (condition . g$3456$23819) (assertion-violation? . g$3456$23818) (condition? . g$3456$23817) (utf32->string . g$3456$23816) (utf16->string . g$3456$23815) (utf8->string . g$3456$23814) (uint-list->bytevector . g$3456$23813) (u8-list->bytevector . g$3456$23812) (string->utf8 . g$3456$23811) (string->utf32 . g$3456$23810) (string->utf16 . g$3456$23809) (sint-list->bytevector . g$3456$23808) (native-endianness . g$3456$23807) (bytevector? . g$3456$23806) (bytevector=? . g$3456$23805) (bytevector-uint-set! . g$3456$23804) (bytevector-uint-ref . g$3456$23803) (bytevector-u8-set! . g$3456$23802) (bytevector-u8-ref . g$3456$23801) (bytevector-u64-set! . g$3456$23800) (bytevector-u64-ref . g$3456$23799) (bytevector-u64-native-set! . g$3456$23798) (bytevector-u64-native-ref . g$3456$23797) (bytevector-u32-set! . g$3456$23796) (bytevector-u32-ref . g$3456$23795) (bytevector-u32-native-set! . g$3456$23794) (bytevector-u32-native-ref . g$3456$23793) (bytevector-u16-set! . g$3456$23792) (bytevector-u16-ref . g$3456$23791) (bytevector-u16-native-set! . g$3456$23790) (bytevector-u16-native-ref . g$3456$23789) (bytevector-sint-set! . g$3456$23788) (bytevector-sint-ref . g$3456$23787) (bytevector-s8-set! . g$3456$23786) (bytevector-s8-ref . g$3456$23785) (bytevector-s64-set! . g$3456$23784) (bytevector-s64-ref . g$3456$23783) (bytevector-s64-native-set! . g$3456$23782) (bytevector-s64-native-ref . g$3456$23781) (bytevector-s32-set! . g$3456$23780) (bytevector-s32-ref . g$3456$23779) (bytevector-s32-native-set! . g$3456$23778) (bytevector-s32-native-ref . g$3456$23777) (bytevector-s16-set! . g$3456$23776) (bytevector-s16-ref . g$3456$23775) (bytevector-s16-native-set! . g$3456$23774) (bytevector-s16-native-ref . g$3456$23773) (bytevector-length . g$3456$23772) (bytevector-ieee-single-ref . g$3456$23771) (bytevector-ieee-single-native-set! . g$3456$23770) (bytevector-ieee-single-native-ref . g$3456$23769) (bytevector-ieee-double-ref . g$3456$23768) (bytevector-ieee-double-native-set! . g$3456$23767) (bytevector-ieee-double-native-ref . g$3456$23766) (bytevector-fill! . g$3456$23765) (bytevector-copy! . g$3456$23764) (bytevector-copy . g$3456$23763) (bytevector->uint-list . g$3456$23762) (bytevector->u8-list . g$3456$23761) (bytevector->sint-list . g$3456$23760) (no-nans-violation? . g$3456$23759) (no-infinities-violation? . g$3456$23758) (make-no-nans-violation . g$3456$23757) (make-no-infinities-violation . g$3456$23756) (real->flonum . g$3456$23755) (flzero? . g$3456$23754) (fltruncate . g$3456$23753) (fltan . g$3456$23752) (flsqrt . g$3456$23751) (flsin . g$3456$23750) (flround . g$3456$23749) (flpositive? . g$3456$23748) (flonum? . g$3456$23747) (flodd? . g$3456$23746) (flnumerator . g$3456$23745) (flnegative? . g$3456$23744) (flnan? . g$3456$23743) (flmod0 . g$3456$23742) (flmod . g$3456$23741) (flmin . g$3456$23740) (flmax . g$3456$23739) (fllog . g$3456$23738) (flinteger? . g$3456$23737) (flinfinite? . g$3456$23736) (flfloor . g$3456$23735) (flfinite? . g$3456$23734) (flexpt . g$3456$23733) (flexp . g$3456$23732) (fleven? . g$3456$23731) (fldiv0-and-mod0 . g$3456$23730) (fldiv0 . g$3456$23729) (fldiv-and-mod . g$3456$23728) (fldiv . g$3456$23727) (fldenominator . g$3456$23726) (flcos . g$3456$23725) (flceiling . g$3456$23724) (flatan . g$3456$23723) (flasin . g$3456$23722) (flacos . g$3456$23721) (flabs . g$3456$23720) (fl>? . g$3456$23719) (fl>=? . g$3456$23718) (fl=? . g$3456$23717) (fl<? . g$3456$23716) (fl<=? . g$3456$23715) (fl/ . g$3456$23714) (fl- . g$3456$23713) (fl+ . g$3456$23712) (fl* . g$3456$23711) (fixnum->flonum . g$3456$23710) (fxzero? . g$3456$23709) (fxxor . g$3456$23708) (fxrotate-bit-field . g$3456$23707) (fxreverse-bit-field . g$3456$23706) (fxpositive? . g$3456$23705) (fxodd? . g$3456$23704) (fxnot . g$3456$23703) (fxnegative? . g$3456$23702) (fxmod0 . g$3456$23701) (fxmod . g$3456$23700) (fxmin . g$3456$23699) (fxmax . g$3456$23698) (fxlength . g$3456$23697) (fxior . g$3456$23696) (fxif . g$3456$23695) (fxfirst-bit-set . g$3456$23694) (fxeven? . g$3456$23693) (fxdiv0-and-mod0 . g$3456$23692) (fxdiv0 . g$3456$23691) (fxdiv-and-mod . g$3456$23690) (fxdiv . g$3456$23689) (fxcopy-bit-field . g$3456$23688) (fxcopy-bit . g$3456$23687) (fxbit-set? . g$3456$23686) (fxbit-field . g$3456$23685) (fxbit-count . g$3456$23684) (fxarithmetic-shift-right . g$3456$23683) (fxarithmetic-shift-left . g$3456$23682) (fxarithmetic-shift . g$3456$23681) (fxand . g$3456$23680) (fx>? . g$3456$23679) (fx>=? . g$3456$23678) (fx=? . g$3456$23677) (fx<? . g$3456$23676) (fx<=? . g$3456$23675) (fx-/carry . g$3456$23674) (fx- . g$3456$23673) (fx+/carry . g$3456$23672) (fx+ . g$3456$23671) (fx*/carry . g$3456$23670) (fx* . g$3456$23669) (greatest-fixnum . g$3456$23668) (least-fixnum . g$3456$23667) (fixnum-width . g$3456$23666) (fixnum? . g$3456$23665) (bitwise-rotate-bit-field . g$3456$23664) (bitwise-reverse-bit-field . g$3456$23663) (bitwise-length . g$3456$23662) (bitwise-if . g$3456$23661) (bitwise-first-bit-set . g$3456$23660) (bitwise-copy-bit-field . g$3456$23659) (bitwise-copy-bit . g$3456$23658) (bitwise-bit-set? . g$3456$23657) (bitwise-bit-field . g$3456$23656) (bitwise-bit-count . g$3456$23655) (bitwise-xor . g$3456$23654) (bitwise-ior . g$3456$23653) (bitwise-and . g$3456$23652) (bitwise-not . g$3456$23651) (bitwise-arithmetic-shift-right . g$3456$23650) (bitwise-arithmetic-shift-left . g$3456$23649) (bitwise-arithmetic-shift . g$3456$23648) (zero? . g$3456$23647) (vector? . g$3456$23646) (vector-set! . g$3456$23645) (vector-ref . g$3456$23644) (vector-map . g$3456$23643) (vector-length . g$3456$23642) (vector-for-each . g$3456$23641) (vector-fill! . g$3456$23640) (vector->list . g$3456$23639) (vector . g$3456$23638) (values . g$3456$23637) (truncate . g$3456$23636) (tan . g$3456$23635) (symbol? . g$3456$23634) (symbol=? . g$3456$23633) (symbol->string . g$3456$23632) (substring . g$3456$23631) (string? . g$3456$23630) (string>? . g$3456$23629) (string>=? . g$3456$23628) (string=? . g$3456$23627) (string<? . g$3456$23626) (string<=? . g$3456$23625) (string-ref . g$3456$23624) (string-length . g$3456$23623) (string-for-each . g$3456$23622) (string-copy . g$3456$23621) (string-append . g$3456$23620) (string->symbol . g$3456$23619) (string->number . g$3456$23618) (string->list . g$3456$23617) (string . g$3456$23616) (sqrt . g$3456$23615) (sin . g$3456$23614) (round . g$3456$23613) (reverse . g$3456$23612) (real? . g$3456$23611) (real-valued? . g$3456$23610) (real-part . g$3456$23609) (rationalize . g$3456$23608) (rational? . g$3456$23607) (rational-valued? . g$3456$23606) (procedure? . g$3456$23605) (positive? . g$3456$23604) (pair? . g$3456$23603) (odd? . g$3456$23602) (numerator . g$3456$23601) (number? . g$3456$23600) (number->string . g$3456$23599) (null? . g$3456$23598) (not . g$3456$23597) (negative? . g$3456$23596) (nan? . g$3456$23595) (min . g$3456$23594) (max . g$3456$23593) (map . g$3456$23592) (make-vector . g$3456$23591) (make-string . g$3456$23590) (make-rectangular . g$3456$23589) (make-polar . g$3456$23588) (magnitude . g$3456$23587) (log . g$3456$23586) (list? . g$3456$23585) (list-tail . g$3456$23584) (list-ref . g$3456$23583) (list->vector . g$3456$23582) (list->string . g$3456$23581) (list . g$3456$23580) (length . g$3456$23579) (lcm . g$3456$23578) (integer? . g$3456$23577) (integer-valued? . g$3456$23576) (integer->char . g$3456$23575) (infinite? . g$3456$23574) (inexact? . g$3456$23573) (inexact . g$3456$23572) (imag-part . g$3456$23571) (gcd . g$3456$23570) (for-each . g$3456$23569) (floor . g$3456$23568) (finite? . g$3456$23567) (expt . g$3456$23566) (exp . g$3456$23565) (exact? . g$3456$23564) (exact-integer-sqrt . g$3456$23563) (exact . g$3456$23562) (even? . g$3456$23561) (error . g$3456$23560) (eqv? . g$3456$23559) (equal? . g$3456$23558) (eq? . g$3456$23557) (dynamic-wind . g$3456$23556) (div0-and-mod0 . g$3456$23555) (mod0 . g$3456$23554) (div0 . g$3456$23553) (div-and-mod . g$3456$23552) (mod . g$3456$23551) (div . g$3456$23550) (denominator . g$3456$23549) (cos . g$3456$23548) (cons . g$3456$23547) (complex? . g$3456$23546) (char? . g$3456$23545) (char>? . g$3456$23544) (char>=? . g$3456$23543) (char=? . g$3456$23542) (char<? . g$3456$23541) (char<=? . g$3456$23540) (char->integer . g$3456$23539) (ceiling . g$3456$23538) (call-with-values . g$3456$23537) (call/cc . g$3456$23536) (call-with-current-continuation . g$3456$23535) (cddddr . g$3456$23534) (cdddar . g$3456$23533) (cddadr . g$3456$23532) (cddaar . g$3456$23531) (cdaddr . g$3456$23530) (cdadar . g$3456$23529) (cdaadr . g$3456$23528) (cdaaar . g$3456$23527) (cadddr . g$3456$23526) (caddar . g$3456$23525) (cadadr . g$3456$23524) (cadaar . g$3456$23523) (caaddr . g$3456$23522) (caadar . g$3456$23521) (caaadr . g$3456$23520) (caaaar . g$3456$23519) (cdddr . g$3456$23518) (cddar . g$3456$23517) (cdadr . g$3456$23516) (cdaar . g$3456$23515) (caddr . g$3456$23514) (cadar . g$3456$23513) (caadr . g$3456$23512) (caaar . g$3456$23511) (cddr . g$3456$23510) (cdar . g$3456$23509) (cadr . g$3456$23508) (caar . g$3456$23507) (cdr . g$3456$23506) (car . g$3456$23505) (boolean? . g$3456$23504) (boolean=? . g$3456$23503) (atan . g$3456$23502) (assertion-violation . g$3456$23501) (asin . g$3456$23500) (apply . g$3456$23499) (append . g$3456$23498) (angle . g$3456$23497) (acos . g$3456$23496) (abs . g$3456$23495) (/ . g$3456$23494) (* . g$3456$23493) (- . g$3456$23492) (+ . g$3456$23491) (>= . g$3456$23490) (> . g$3456$23489) (= . g$3456$23488) (<= . g$3456$23487) (< . g$3456$23486) (let*-values . g$3456$23485) (&no-nans . g$3456$23484) (&no-infinities . g$3456$23483) (&i/o-encoding . g$3456$23482) (&i/o-decoding . g$3456$23481) (&i/o-port . g$3456$23480) (&i/o-file-does-not-exist . g$3456$23479) (&i/o-file-already-exists . g$3456$23478) (&i/o-file-is-read-only . g$3456$23477) (&i/o-file-protection . g$3456$23476) (&i/o-filename . g$3456$23475) (&i/o-invalid-position . g$3456$23474) (&i/o-write . g$3456$23473) (&i/o-read . g$3456$23472) (&i/o . g$3456$23471) (&undefined . g$3456$23470) (&syntax . g$3456$23469) (&lexical . g$3456$23468) (&who . g$3456$23465) (&irritants . g$3456$23464) (&assertion . g$3456$23463) (&violation . g$3456$23462) (&error . g$3456$23461) (&serious . g$3456$23460) (&warning . g$3456$23459) (&message . g$3456$23458) (&condition . g$3456$23457) (define-condition-type . g$3456$23456) (define-enumeration . g$3456$23455) (define-record-type . g$3456$23454) (parent-rtd . g$3456$23453) (nongenerative . g$3456$23452) (opaque . g$3456$23451) (sealed . g$3456$23450) (protocol . g$3456$23449) (parent . g$3456$23448) (immutable . g$3456$23447) (mutable . g$3456$23446) (fields . g$3456$23445) (error-handling-mode . g$3456$23444) (file-options . g$3456$23443) (buffer-mode . g$3456$23442) (eol-style . g$3456$23441) (guard . g$3456$23440) (unsyntax-splicing . g$3456$23437) (unsyntax . g$3456$23436) (unquote-splicing . g$3456$23435) (unquote . g$3456$23434) (_ . g$3456$23433) (else . g$3456$23432) (=> . g$3456$23431) (|...| . g$3456$23430) (assert . g$3456$23429) (endianness . g$3456$23428) (or . g$3456$23425) (and . g$3456$23424) (do . g$3456$23423) (cond . g$3456$23422) (let* . g$3456$23421) (let . g$3456$23420) (identifier-syntax . g$3456$23419) (with-syntax . g$3456$23418) (quasisyntax . g$3456$23417) (quasiquote . g$3456$23416) (syntax-rules . g$3456$23415) (record-constructor-descriptor . g$3456$23412) (record-type-descriptor . g$3456$23411) (let-values . g$3456$23410) (case . g$3456$23409) (unless . g$3456$23407) (when . g$3456$23406) (if . g$3456$23405) (letrec* . g$3456$23404) (letrec . g$3456$23403) (case-lambda . g$3456$23401) (lambda . g$3456$23400) (syntax . g$3456$23399) (syntax-case . g$3456$23398) (quote . g$3456$23397) (letrec-syntax . g$3456$23395) (let-syntax . g$3456$23394) (set! . g$3456$23393) (begin . g$3456$23391) (define-syntax . g$3456$23389) (define . g$3456$23388)) '() values values '#t) (g$3456$12843 'g$3456$24105 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . g$3456$23910) (quotient . g$3456$23909) (null-environment . g$3456$13685) (remainder . g$3456$23908) (modulo . g$3456$23907) (inexact->exact . g$3456$23906) (force . g$3456$23905) (exact->inexact . g$3456$23904) (delay . g$3456$23427)) '() values values '#t) (g$3456$12843 'g$3456$24106 '(rnrs control) '(6) '() '() '() '((do . g$3456$23423) (unless . g$3456$23407) (when . g$3456$23406) (case-lambda . g$3456$23401)) '() values values '#t) (g$3456$12843 'g$3456$24107 '(rnrs eval) '(6) '() '() '() '((eval . g$3456$13691) (environment . g$3456$13683)) '() values values '#t) (g$3456$12843 'g$3456$24108 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . g$3456$23899) (set-car! . g$3456$23898)) '() values values '#t) (g$3456$12843 'g$3456$24109 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . g$3456$23901) (string-set! . g$3456$23900)) '() values values '#t) (g$3456$12843 'g$3456$24110 '(rnrs programs) '(6) '() '() '() '((exit . g$3456$23903) (command-line . g$3456$23902)) '() values values '#t) (g$3456$12843 'g$3456$24111 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . g$3456$13283) (identifier? . g$3456$13713) (generate-temporaries . g$3456$13705) (free-identifier=? . g$3456$13707) (syntax->datum . g$3456$13717) (datum->syntax . g$3456$13715) (bound-identifier=? . g$3456$13709) (syntax-violation . g$3456$23848) (unsyntax-splicing . g$3456$23437) (unsyntax . g$3456$23436) (_ . g$3456$23433) (|...| . g$3456$23430) (with-syntax . g$3456$23418) (quasisyntax . g$3456$23417) (syntax . g$3456$23399) (syntax-case . g$3456$23398)) '() values values '#t) (g$3456$12843 'g$3456$24112 '(rnrs files) '(6) '() '() '() '((delete-file . g$3456$24042) (file-exists? . g$3456$24041) (make-i/o-write-error . g$3456$23959) (make-i/o-read-error . g$3456$23958) (make-i/o-port-error . g$3456$23957) (make-i/o-invalid-position-error . g$3456$23956) (make-i/o-filename-error . g$3456$23955) (make-i/o-file-protection-error . g$3456$23954) (make-i/o-file-is-read-only-error . g$3456$23953) (make-i/o-file-does-not-exist-error . g$3456$23952) (make-i/o-file-already-exists-error . g$3456$23951) (make-i/o-error . g$3456$23950) (i/o-write-error? . g$3456$23938) (i/o-read-error? . g$3456$23937) (i/o-port-error? . g$3456$23936) (i/o-invalid-position-error? . g$3456$23935) (i/o-filename-error? . g$3456$23934) (i/o-file-protection-error? . g$3456$23933) (i/o-file-is-read-only-error? . g$3456$23932) (i/o-file-does-not-exist-error? . g$3456$23931) (i/o-file-already-exists-error? . g$3456$23930) (i/o-error? . g$3456$23929) (i/o-error-port . g$3456$23928) (i/o-error-filename . g$3456$23927) (&i/o-port . g$3456$23480) (&i/o-file-does-not-exist . g$3456$23479) (&i/o-file-already-exists . g$3456$23478) (&i/o-file-is-read-only . g$3456$23477) (&i/o-file-protection . g$3456$23476) (&i/o-filename . g$3456$23475) (&i/o-invalid-position . g$3456$23474) (&i/o-write . g$3456$23473) (&i/o-read . g$3456$23472) (&i/o . g$3456$23471)) '() values values '#t) (g$3456$12843 'g$3456$24113 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . g$3456$24040) (vector-sort . g$3456$24039) (list-sort . g$3456$24038)) '() values values '#t) (g$3456$12843 'g$3456$24114 '(rnrs base) '(6) '() '() '() '((zero? . g$3456$23647) (vector? . g$3456$23646) (vector-set! . g$3456$23645) (vector-ref . g$3456$23644) (vector-map . g$3456$23643) (vector-length . g$3456$23642) (vector-for-each . g$3456$23641) (vector-fill! . g$3456$23640) (vector->list . g$3456$23639) (vector . g$3456$23638) (values . g$3456$23637) (truncate . g$3456$23636) (tan . g$3456$23635) (symbol? . g$3456$23634) (symbol=? . g$3456$23633) (symbol->string . g$3456$23632) (substring . g$3456$23631) (string? . g$3456$23630) (string>? . g$3456$23629) (string>=? . g$3456$23628) (string=? . g$3456$23627) (string<? . g$3456$23626) (string<=? . g$3456$23625) (string-ref . g$3456$23624) (string-length . g$3456$23623) (string-for-each . g$3456$23622) (string-copy . g$3456$23621) (string-append . g$3456$23620) (string->symbol . g$3456$23619) (string->number . g$3456$23618) (string->list . g$3456$23617) (string . g$3456$23616) (sqrt . g$3456$23615) (sin . g$3456$23614) (round . g$3456$23613) (reverse . g$3456$23612) (real? . g$3456$23611) (real-valued? . g$3456$23610) (real-part . g$3456$23609) (rationalize . g$3456$23608) (rational? . g$3456$23607) (rational-valued? . g$3456$23606) (procedure? . g$3456$23605) (positive? . g$3456$23604) (pair? . g$3456$23603) (odd? . g$3456$23602) (numerator . g$3456$23601) (number? . g$3456$23600) (number->string . g$3456$23599) (null? . g$3456$23598) (not . g$3456$23597) (negative? . g$3456$23596) (nan? . g$3456$23595) (min . g$3456$23594) (max . g$3456$23593) (map . g$3456$23592) (make-vector . g$3456$23591) (make-string . g$3456$23590) (make-rectangular . g$3456$23589) (make-polar . g$3456$23588) (magnitude . g$3456$23587) (log . g$3456$23586) (list? . g$3456$23585) (list-tail . g$3456$23584) (list-ref . g$3456$23583) (list->vector . g$3456$23582) (list->string . g$3456$23581) (list . g$3456$23580) (length . g$3456$23579) (lcm . g$3456$23578) (integer? . g$3456$23577) (integer-valued? . g$3456$23576) (integer->char . g$3456$23575) (infinite? . g$3456$23574) (inexact? . g$3456$23573) (inexact . g$3456$23572) (imag-part . g$3456$23571) (gcd . g$3456$23570) (for-each . g$3456$23569) (floor . g$3456$23568) (finite? . g$3456$23567) (expt . g$3456$23566) (exp . g$3456$23565) (exact? . g$3456$23564) (exact-integer-sqrt . g$3456$23563) (exact . g$3456$23562) (even? . g$3456$23561) (error . g$3456$23560) (eqv? . g$3456$23559) (equal? . g$3456$23558) (eq? . g$3456$23557) (dynamic-wind . g$3456$23556) (div0-and-mod0 . g$3456$23555) (mod0 . g$3456$23554) (div0 . g$3456$23553) (div-and-mod . g$3456$23552) (mod . g$3456$23551) (div . g$3456$23550) (denominator . g$3456$23549) (cos . g$3456$23548) (cons . g$3456$23547) (complex? . g$3456$23546) (char? . g$3456$23545) (char>? . g$3456$23544) (char>=? . g$3456$23543) (char=? . g$3456$23542) (char<? . g$3456$23541) (char<=? . g$3456$23540) (char->integer . g$3456$23539) (ceiling . g$3456$23538) (call-with-values . g$3456$23537) (call/cc . g$3456$23536) (call-with-current-continuation . g$3456$23535) (cddddr . g$3456$23534) (cdddar . g$3456$23533) (cddadr . g$3456$23532) (cddaar . g$3456$23531) (cdaddr . g$3456$23530) (cdadar . g$3456$23529) (cdaadr . g$3456$23528) (cdaaar . g$3456$23527) (cadddr . g$3456$23526) (caddar . g$3456$23525) (cadadr . g$3456$23524) (cadaar . g$3456$23523) (caaddr . g$3456$23522) (caadar . g$3456$23521) (caaadr . g$3456$23520) (caaaar . g$3456$23519) (cdddr . g$3456$23518) (cddar . g$3456$23517) (cdadr . g$3456$23516) (cdaar . g$3456$23515) (caddr . g$3456$23514) (cadar . g$3456$23513) (caadr . g$3456$23512) (caaar . g$3456$23511) (cddr . g$3456$23510) (cdar . g$3456$23509) (cadr . g$3456$23508) (caar . g$3456$23507) (cdr . g$3456$23506) (car . g$3456$23505) (boolean? . g$3456$23504) (boolean=? . g$3456$23503) (atan . g$3456$23502) (assertion-violation . g$3456$23501) (asin . g$3456$23500) (apply . g$3456$23499) (append . g$3456$23498) (angle . g$3456$23497) (acos . g$3456$23496) (abs . g$3456$23495) (/ . g$3456$23494) (* . g$3456$23493) (- . g$3456$23492) (+ . g$3456$23491) (>= . g$3456$23490) (> . g$3456$23489) (= . g$3456$23488) (<= . g$3456$23487) (< . g$3456$23486) (let*-values . g$3456$23485) (unquote-splicing . g$3456$23435) (unquote . g$3456$23434) (_ . g$3456$23433) (else . g$3456$23432) (=> . g$3456$23431) (|...| . g$3456$23430) (assert . g$3456$23429) (or . g$3456$23425) (and . g$3456$23424) (cond . g$3456$23422) (let* . g$3456$23421) (let . g$3456$23420) (identifier-syntax . g$3456$23419) (quasiquote . g$3456$23416) (syntax-rules . g$3456$23415) (let-values . g$3456$23410) (case . g$3456$23409) (if . g$3456$23405) (letrec* . g$3456$23404) (letrec . g$3456$23403) (lambda . g$3456$23400) (quote . g$3456$23397) (letrec-syntax . g$3456$23395) (let-syntax . g$3456$23394) (set! . g$3456$23393) (begin . g$3456$23391) (define-syntax . g$3456$23389) (define . g$3456$23388)) '() values values '#t) (g$3456$12843 'g$3456$24115 '(rnrs lists) '(6) '() '() '() '((remove . g$3456$23897) (remv . g$3456$23896) (remp . g$3456$23895) (remq . g$3456$23894) (partition . g$3456$23893) (memv . g$3456$23892) (memq . g$3456$23891) (memp . g$3456$23890) (member . g$3456$23889) (exists . g$3456$23888) (for-all . g$3456$23887) (fold-right . g$3456$23886) (fold-left . g$3456$23885) (find . g$3456$23884) (filter . g$3456$23883) (cons* . g$3456$23882) (assv . g$3456$23881) (assq . g$3456$23880) (assp . g$3456$23879) (assoc . g$3456$23878)) '() values values '#t) (g$3456$12843 'g$3456$24116 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . g$3456$24016) (call-with-input-file . g$3456$24015) (write-char . g$3456$24014) (write . g$3456$24013) (with-output-to-file . g$3456$24012) (with-input-from-file . g$3456$24011) (read-char . g$3456$24010) (read . g$3456$24009) (peek-char . g$3456$24008) (open-output-file . g$3456$24007) (open-input-file . g$3456$24006) (newline . g$3456$24005) (display . g$3456$24004) (close-output-port . g$3456$24003) (close-input-port . g$3456$24002) (eof-object? . g$3456$24001) (eof-object . g$3456$24000) (current-error-port . g$3456$23999) (current-output-port . g$3456$23998) (current-input-port . g$3456$23997) (output-port? . g$3456$23996) (input-port? . g$3456$23995) (make-i/o-write-error . g$3456$23959) (make-i/o-read-error . g$3456$23958) (make-i/o-port-error . g$3456$23957) (make-i/o-invalid-position-error . g$3456$23956) (make-i/o-filename-error . g$3456$23955) (make-i/o-file-protection-error . g$3456$23954) (make-i/o-file-is-read-only-error . g$3456$23953) (make-i/o-file-does-not-exist-error . g$3456$23952) (make-i/o-file-already-exists-error . g$3456$23951) (make-i/o-error . g$3456$23950) (i/o-write-error? . g$3456$23938) (i/o-read-error? . g$3456$23937) (i/o-port-error? . g$3456$23936) (i/o-invalid-position-error? . g$3456$23935) (i/o-filename-error? . g$3456$23934) (i/o-file-protection-error? . g$3456$23933) (i/o-file-is-read-only-error? . g$3456$23932) (i/o-file-does-not-exist-error? . g$3456$23931) (i/o-file-already-exists-error? . g$3456$23930) (i/o-error? . g$3456$23929) (i/o-error-port . g$3456$23928) (i/o-error-filename . g$3456$23927) (&i/o-port . g$3456$23480) (&i/o-file-does-not-exist . g$3456$23479) (&i/o-file-already-exists . g$3456$23478) (&i/o-file-is-read-only . g$3456$23477) (&i/o-file-protection . g$3456$23476) (&i/o-filename . g$3456$23475) (&i/o-invalid-position . g$3456$23474) (&i/o-write . g$3456$23473) (&i/o-read . g$3456$23472) (&i/o . g$3456$23471)) '() values values '#t) (g$3456$12843 'g$3456$24117 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . g$3456$23941) (utf32->string . g$3456$23816) (utf16->string . g$3456$23815) (utf8->string . g$3456$23814) (uint-list->bytevector . g$3456$23813) (u8-list->bytevector . g$3456$23812) (string->utf8 . g$3456$23811) (string->utf32 . g$3456$23810) (string->utf16 . g$3456$23809) (sint-list->bytevector . g$3456$23808) (native-endianness . g$3456$23807) (bytevector? . g$3456$23806) (bytevector=? . g$3456$23805) (bytevector-uint-set! . g$3456$23804) (bytevector-uint-ref . g$3456$23803) (bytevector-u8-set! . g$3456$23802) (bytevector-u8-ref . g$3456$23801) (bytevector-u64-set! . g$3456$23800) (bytevector-u64-ref . g$3456$23799) (bytevector-u64-native-set! . g$3456$23798) (bytevector-u64-native-ref . g$3456$23797) (bytevector-u32-set! . g$3456$23796) (bytevector-u32-ref . g$3456$23795) (bytevector-u32-native-set! . g$3456$23794) (bytevector-u32-native-ref . g$3456$23793) (bytevector-u16-set! . g$3456$23792) (bytevector-u16-ref . g$3456$23791) (bytevector-u16-native-set! . g$3456$23790) (bytevector-u16-native-ref . g$3456$23789) (bytevector-sint-set! . g$3456$23788) (bytevector-sint-ref . g$3456$23787) (bytevector-s8-set! . g$3456$23786) (bytevector-s8-ref . g$3456$23785) (bytevector-s64-set! . g$3456$23784) (bytevector-s64-ref . g$3456$23783) (bytevector-s64-native-set! . g$3456$23782) (bytevector-s64-native-ref . g$3456$23781) (bytevector-s32-set! . g$3456$23780) (bytevector-s32-ref . g$3456$23779) (bytevector-s32-native-set! . g$3456$23778) (bytevector-s32-native-ref . g$3456$23777) (bytevector-s16-set! . g$3456$23776) (bytevector-s16-ref . g$3456$23775) (bytevector-s16-native-set! . g$3456$23774) (bytevector-s16-native-ref . g$3456$23773) (bytevector-length . g$3456$23772) (bytevector-ieee-single-ref . g$3456$23771) (bytevector-ieee-single-native-set! . g$3456$23770) (bytevector-ieee-single-native-ref . g$3456$23769) (bytevector-ieee-double-ref . g$3456$23768) (bytevector-ieee-double-native-set! . g$3456$23767) (bytevector-ieee-double-native-ref . g$3456$23766) (bytevector-fill! . g$3456$23765) (bytevector-copy! . g$3456$23764) (bytevector-copy . g$3456$23763) (bytevector->uint-list . g$3456$23762) (bytevector->u8-list . g$3456$23761) (bytevector->sint-list . g$3456$23760) (endianness . g$3456$23428)) '() values values '#t) (g$3456$12843 'g$3456$24118 '(rnrs unicode) '(6) '() '() '() '((string-upcase . g$3456$24088) (string-titlecase . g$3456$24087) (string-normalize-nfkd . g$3456$24086) (string-normalize-nfkc . g$3456$24085) (string-normalize-nfd . g$3456$24084) (string-normalize-nfc . g$3456$24083) (string-foldcase . g$3456$24082) (string-downcase . g$3456$24081) (string-ci>? . g$3456$24080) (string-ci>=? . g$3456$24079) (string-ci=? . g$3456$24078) (string-ci<? . g$3456$24077) (string-ci<=? . g$3456$24076) (char-whitespace? . g$3456$24075) (char-upper-case? . g$3456$24074) (char-title-case? . g$3456$24073) (char-numeric? . g$3456$24072) (char-lower-case? . g$3456$24071) (char-general-category . g$3456$24070) (char-upcase . g$3456$24069) (char-titlecase . g$3456$24068) (char-foldcase . g$3456$24067) (char-downcase . g$3456$24066) (char-ci>? . g$3456$24065) (char-ci>=? . g$3456$24064) (char-ci=? . g$3456$24063) (char-ci<? . g$3456$24062) (char-ci<=? . g$3456$24061) (char-alphabetic? . g$3456$24060)) '() values values '#t) (g$3456$12843 'g$3456$24119 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . g$3456$23871) (raise-continuable . g$3456$23870) (raise . g$3456$23869) (guard . g$3456$23440) (else . g$3456$23432) (=> . g$3456$23431)) '() values values '#t) (g$3456$12843 'g$3456$24120 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . g$3456$23664) (bitwise-reverse-bit-field . g$3456$23663) (bitwise-length . g$3456$23662) (bitwise-if . g$3456$23661) (bitwise-first-bit-set . g$3456$23660) (bitwise-copy-bit-field . g$3456$23659) (bitwise-copy-bit . g$3456$23658) (bitwise-bit-set? . g$3456$23657) (bitwise-bit-field . g$3456$23656) (bitwise-bit-count . g$3456$23655) (bitwise-xor . g$3456$23654) (bitwise-ior . g$3456$23653) (bitwise-and . g$3456$23652) (bitwise-not . g$3456$23651) (bitwise-arithmetic-shift-right . g$3456$23650) (bitwise-arithmetic-shift-left . g$3456$23649) (bitwise-arithmetic-shift . g$3456$23648)) '() values values '#t) (g$3456$12843 'g$3456$24121 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . g$3456$23709) (fxxor . g$3456$23708) (fxrotate-bit-field . g$3456$23707) (fxreverse-bit-field . g$3456$23706) (fxpositive? . g$3456$23705) (fxodd? . g$3456$23704) (fxnot . g$3456$23703) (fxnegative? . g$3456$23702) (fxmod0 . g$3456$23701) (fxmod . g$3456$23700) (fxmin . g$3456$23699) (fxmax . g$3456$23698) (fxlength . g$3456$23697) (fxior . g$3456$23696) (fxif . g$3456$23695) (fxfirst-bit-set . g$3456$23694) (fxeven? . g$3456$23693) (fxdiv0-and-mod0 . g$3456$23692) (fxdiv0 . g$3456$23691) (fxdiv-and-mod . g$3456$23690) (fxdiv . g$3456$23689) (fxcopy-bit-field . g$3456$23688) (fxcopy-bit . g$3456$23687) (fxbit-set? . g$3456$23686) (fxbit-field . g$3456$23685) (fxbit-count . g$3456$23684) (fxarithmetic-shift-right . g$3456$23683) (fxarithmetic-shift-left . g$3456$23682) (fxarithmetic-shift . g$3456$23681) (fxand . g$3456$23680) (fx>? . g$3456$23679) (fx>=? . g$3456$23678) (fx=? . g$3456$23677) (fx<? . g$3456$23676) (fx<=? . g$3456$23675) (fx-/carry . g$3456$23674) (fx- . g$3456$23673) (fx+/carry . g$3456$23672) (fx+ . g$3456$23671) (fx*/carry . g$3456$23670) (fx* . g$3456$23669) (greatest-fixnum . g$3456$23668) (least-fixnum . g$3456$23667) (fixnum-width . g$3456$23666) (fixnum? . g$3456$23665)) '() values values '#t) (g$3456$12843 'g$3456$24122 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . g$3456$23759) (no-infinities-violation? . g$3456$23758) (make-no-nans-violation . g$3456$23757) (make-no-infinities-violation . g$3456$23756) (real->flonum . g$3456$23755) (flzero? . g$3456$23754) (fltruncate . g$3456$23753) (fltan . g$3456$23752) (flsqrt . g$3456$23751) (flsin . g$3456$23750) (flround . g$3456$23749) (flpositive? . g$3456$23748) (flonum? . g$3456$23747) (flodd? . g$3456$23746) (flnumerator . g$3456$23745) (flnegative? . g$3456$23744) (flnan? . g$3456$23743) (flmod0 . g$3456$23742) (flmod . g$3456$23741) (flmin . g$3456$23740) (flmax . g$3456$23739) (fllog . g$3456$23738) (flinteger? . g$3456$23737) (flinfinite? . g$3456$23736) (flfloor . g$3456$23735) (flfinite? . g$3456$23734) (flexpt . g$3456$23733) (flexp . g$3456$23732) (fleven? . g$3456$23731) (fldiv0-and-mod0 . g$3456$23730) (fldiv0 . g$3456$23729) (fldiv-and-mod . g$3456$23728) (fldiv . g$3456$23727) (fldenominator . g$3456$23726) (flcos . g$3456$23725) (flceiling . g$3456$23724) (flatan . g$3456$23723) (flasin . g$3456$23722) (flacos . g$3456$23721) (flabs . g$3456$23720) (fl>? . g$3456$23719) (fl>=? . g$3456$23718) (fl=? . g$3456$23717) (fl<? . g$3456$23716) (fl<=? . g$3456$23715) (fl/ . g$3456$23714) (fl- . g$3456$23713) (fl+ . g$3456$23712) (fl* . g$3456$23711) (fixnum->flonum . g$3456$23710) (&no-nans . g$3456$23484) (&no-infinities . g$3456$23483)) '() values values '#t) (g$3456$12843 'g$3456$24123 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . g$3456$24037) (string-ci-hash . g$3456$24036) (string-hash . g$3456$24035) (equal-hash . g$3456$24034) (hashtable-equivalence-function . g$3456$24033) (make-hashtable . g$3456$24032) (hashtable-hash-function . g$3456$24031) (make-eqv-hashtable . g$3456$24030) (make-eq-hashtable . g$3456$24029) (hashtable? . g$3456$24028) (hashtable-update! . g$3456$24027) (hashtable-size . g$3456$24026) (hashtable-set! . g$3456$24025) (hashtable-ref . g$3456$24024) (hashtable-mutable? . g$3456$24023) (hashtable-keys . g$3456$24022) (hashtable-entries . g$3456$24021) (hashtable-delete! . g$3456$24020) (hashtable-copy . g$3456$24019) (hashtable-contains? . g$3456$24018) (hashtable-clear! . g$3456$24017)) '() values values '#t) (g$3456$12843 'g$3456$24124 '(rnrs io ports) '(6) '() '() '() '((eof-object? . g$3456$24001) (eof-object . g$3456$24000) (current-error-port . g$3456$23999) (current-output-port . g$3456$23998) (current-input-port . g$3456$23997) (output-port? . g$3456$23996) (input-port? . g$3456$23995) (utf-8-codec . g$3456$23994) (utf-16-codec . g$3456$23993) (transcoder-error-handling-mode . g$3456$23992) (transcoder-eol-style . g$3456$23991) (transcoder-codec . g$3456$23990) (transcoded-port . g$3456$23989) (textual-port? . g$3456$23988) (string->bytevector . g$3456$23987) (standard-output-port . g$3456$23986) (standard-input-port . g$3456$23985) (standard-error-port . g$3456$23984) (set-port-position! . g$3456$23983) (put-u8 . g$3456$23982) (put-string . g$3456$23981) (put-datum . g$3456$23980) (put-char . g$3456$23979) (put-bytevector . g$3456$23978) (port? . g$3456$23977) (port-transcoder . g$3456$23976) (port-position . g$3456$23975) (port-has-set-port-position!? . g$3456$23974) (port-has-port-position? . g$3456$23973) (port-eof? . g$3456$23972) (output-port-buffer-mode . g$3456$23971) (open-string-output-port . g$3456$23970) (open-string-input-port . g$3456$23969) (open-file-output-port . g$3456$23968) (open-file-input/output-port . g$3456$23967) (open-file-input-port . g$3456$23966) (open-bytevector-output-port . g$3456$23965) (open-bytevector-input-port . g$3456$23964) (native-transcoder . g$3456$23963) (native-eol-style . g$3456$23962) (make-transcoder . g$3456$23961) (latin-1-codec . g$3456$23960) (make-i/o-write-error . g$3456$23959) (make-i/o-read-error . g$3456$23958) (make-i/o-port-error . g$3456$23957) (make-i/o-invalid-position-error . g$3456$23956) (make-i/o-filename-error . g$3456$23955) (make-i/o-file-protection-error . g$3456$23954) (make-i/o-file-is-read-only-error . g$3456$23953) (make-i/o-file-does-not-exist-error . g$3456$23952) (make-i/o-file-already-exists-error . g$3456$23951) (make-i/o-error . g$3456$23950) (make-i/o-encoding-error . g$3456$23949) (make-i/o-decoding-error . g$3456$23948) (make-custom-textual-output-port . g$3456$23947) (make-custom-textual-input/output-port . g$3456$23946) (make-custom-textual-input-port . g$3456$23945) (make-custom-binary-output-port . g$3456$23944) (make-custom-binary-input/output-port . g$3456$23943) (make-custom-binary-input-port . g$3456$23942) (lookahead-u8 . g$3456$23940) (lookahead-char . g$3456$23939) (i/o-write-error? . g$3456$23938) (i/o-read-error? . g$3456$23937) (i/o-port-error? . g$3456$23936) (i/o-invalid-position-error? . g$3456$23935) (i/o-filename-error? . g$3456$23934) (i/o-file-protection-error? . g$3456$23933) (i/o-file-is-read-only-error? . g$3456$23932) (i/o-file-does-not-exist-error? . g$3456$23931) (i/o-file-already-exists-error? . g$3456$23930) (i/o-error? . g$3456$23929) (i/o-error-port . g$3456$23928) (i/o-error-filename . g$3456$23927) (i/o-encoding-error? . g$3456$23926) (i/o-encoding-error-char . g$3456$23925) (i/o-decoding-error? . g$3456$23924) (get-u8 . g$3456$23923) (get-string-n! . g$3456$23922) (get-string-n . g$3456$23921) (get-string-all . g$3456$23920) (get-line . g$3456$23919) (get-datum . g$3456$23918) (get-char . g$3456$23917) (get-bytevector-some . g$3456$23916) (get-bytevector-n! . g$3456$23915) (get-bytevector-n . g$3456$23914) (get-bytevector-all . g$3456$23913) (flush-output-port . g$3456$23912) (close-port . g$3456$23911) (call-with-string-output-port . g$3456$23877) (call-with-port . g$3456$23876) (call-with-bytevector-output-port . g$3456$23875) (bytevector->string . g$3456$23874) (buffer-mode? . g$3456$23873) (binary-port? . g$3456$23872) (&i/o-encoding . g$3456$23482) (&i/o-decoding . g$3456$23481) (&i/o-port . g$3456$23480) (&i/o-file-does-not-exist . g$3456$23479) (&i/o-file-already-exists . g$3456$23478) (&i/o-file-is-read-only . g$3456$23477) (&i/o-file-protection . g$3456$23476) (&i/o-filename . g$3456$23475) (&i/o-invalid-position . g$3456$23474) (&i/o-write . g$3456$23473) (&i/o-read . g$3456$23472) (&i/o . g$3456$23471) (error-handling-mode . g$3456$23444) (file-options . g$3456$23443) (buffer-mode . g$3456$23442) (eol-style . g$3456$23441)) '() values values '#t) (g$3456$12843 'g$3456$24125 '(rnrs enums) '(6) '() '() '() '((make-enumeration . g$3456$23868) (enum-set=? . g$3456$23867) (enum-set-universe . g$3456$23866) (enum-set-union . g$3456$23865) (enum-set-subset? . g$3456$23864) (enum-set-projection . g$3456$23863) (enum-set-member? . g$3456$23862) (enum-set-intersection . g$3456$23861) (enum-set-indexer . g$3456$23860) (enum-set-difference . g$3456$23859) (enum-set-constructor . g$3456$23858) (enum-set-complement . g$3456$23857) (enum-set->list . g$3456$23856) (define-enumeration . g$3456$23455)) '() values values '#t) (g$3456$12843 'g$3456$24126 '(rnrs conditions) '(6) '() '() '() '((who-condition? . g$3456$23855) (warning? . g$3456$23854) (violation? . g$3456$23853) (undefined-violation? . g$3456$23852) (syntax-violation? . g$3456$23851) (syntax-violation-subform . g$3456$23850) (syntax-violation-form . g$3456$23849) (syntax-violation . g$3456$23848) (simple-conditions . g$3456$23847) (serious-condition? . g$3456$23846) (non-continuable-violation? . g$3456$23845) (&non-continuable . g$3456$23844) (message-condition? . g$3456$23843) (make-who-condition . g$3456$23842) (make-warning . g$3456$23841) (make-violation . g$3456$23840) (make-undefined-violation . g$3456$23839) (make-syntax-violation . g$3456$23838) (make-serious-condition . g$3456$23837) (make-non-continuable-violation . g$3456$23836) (make-message-condition . g$3456$23835) (make-lexical-violation . g$3456$23834) (make-irritants-condition . g$3456$23833) (make-implementation-restriction-violation . g$3456$23832) (make-error . g$3456$23831) (make-assertion-violation . g$3456$23830) (lexical-violation? . g$3456$23829) (irritants-condition? . g$3456$23828) (implementation-restriction-violation? . g$3456$23827) (&implementation-restriction . g$3456$23826) (error? . g$3456$23825) (condition-who . g$3456$23824) (condition-predicate . g$3456$23823) (condition-message . g$3456$23822) (condition-irritants . g$3456$23821) (condition-accessor . g$3456$23820) (condition . g$3456$23819) (assertion-violation? . g$3456$23818) (condition? . g$3456$23817) (&undefined . g$3456$23470) (&syntax . g$3456$23469) (&lexical . g$3456$23468) (&who . g$3456$23465) (&irritants . g$3456$23464) (&assertion . g$3456$23463) (&violation . g$3456$23462) (&error . g$3456$23461) (&serious . g$3456$23460) (&warning . g$3456$23459) (&message . g$3456$23458) (&condition . g$3456$23457) (define-condition-type . g$3456$23456)) '() values values '#t) (g$3456$12843 'g$3456$24127 '(rnrs records inspection) '(6) '() '() '() '((record? . g$3456$24052) (record-type-uid . g$3456$24051) (record-type-sealed? . g$3456$24050) (record-type-parent . g$3456$24049) (record-type-opaque? . g$3456$24048) (record-type-name . g$3456$24047) (record-type-generative? . g$3456$24046) (record-type-field-names . g$3456$24045) (record-rtd . g$3456$24044) (record-field-mutable? . g$3456$24043)) '() values values '#t) (g$3456$12843 'g$3456$24128 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . g$3456$24059) (record-predicate . g$3456$24058) (record-mutator . g$3456$24057) (record-constructor . g$3456$24056) (record-accessor . g$3456$24055) (make-record-type-descriptor . g$3456$24054) (make-record-constructor-descriptor . g$3456$24053)) '() values values '#t) (g$3456$12843 'g$3456$24129 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . g$3456$23454) (parent-rtd . g$3456$23453) (nongenerative . g$3456$23452) (opaque . g$3456$23451) (sealed . g$3456$23450) (protocol . g$3456$23449) (parent . g$3456$23448) (immutable . g$3456$23447) (mutable . g$3456$23446) (fields . g$3456$23445) (record-constructor-descriptor . g$3456$23412) (record-type-descriptor . g$3456$23411)) '() values values '#t) (g$3456$12843 'g$3456$24130 '(psyntax system $all) '() '() '() '() '((regexp? . g$3456$24098) (syntax-error . g$3456$13711) (syntax-dispatch . g$3456$13578) (pretty-print . g$3456$24097) (eval-core . g$3456$24096) (set-symbol-value! . g$3456$24095) (symbol-value . g$3456$24094) (gensym . g$3456$24093) (void . g$3456$24092) (load . g$3456$24091) (interaction-environment . g$3456$24090) (char-ready? . g$3456$24089) (string-upcase . g$3456$24088) (string-titlecase . g$3456$24087) (string-normalize-nfkd . g$3456$24086) (string-normalize-nfkc . g$3456$24085) (string-normalize-nfd . g$3456$24084) (string-normalize-nfc . g$3456$24083) (string-foldcase . g$3456$24082) (string-downcase . g$3456$24081) (string-ci>? . g$3456$24080) (string-ci>=? . g$3456$24079) (string-ci=? . g$3456$24078) (string-ci<? . g$3456$24077) (string-ci<=? . g$3456$24076) (char-whitespace? . g$3456$24075) (char-upper-case? . g$3456$24074) (char-title-case? . g$3456$24073) (char-numeric? . g$3456$24072) (char-lower-case? . g$3456$24071) (char-general-category . g$3456$24070) (char-upcase . g$3456$24069) (char-titlecase . g$3456$24068) (char-foldcase . g$3456$24067) (char-downcase . g$3456$24066) (char-ci>? . g$3456$24065) (char-ci>=? . g$3456$24064) (char-ci=? . g$3456$24063) (char-ci<? . g$3456$24062) (char-ci<=? . g$3456$24061) (char-alphabetic? . g$3456$24060) (make-variable-transformer . g$3456$13283) (identifier? . g$3456$13713) (generate-temporaries . g$3456$13705) (free-identifier=? . g$3456$13707) (syntax->datum . g$3456$13717) (datum->syntax . g$3456$13715) (bound-identifier=? . g$3456$13709) (record-type-descriptor? . g$3456$24059) (record-predicate . g$3456$24058) (record-mutator . g$3456$24057) (record-constructor . g$3456$24056) (record-accessor . g$3456$24055) (make-record-type-descriptor . g$3456$24054) (make-record-constructor-descriptor . g$3456$24053) (record? . g$3456$24052) (record-type-uid . g$3456$24051) (record-type-sealed? . g$3456$24050) (record-type-parent . g$3456$24049) (record-type-opaque? . g$3456$24048) (record-type-name . g$3456$24047) (record-type-generative? . g$3456$24046) (record-type-field-names . g$3456$24045) (record-rtd . g$3456$24044) (record-field-mutable? . g$3456$24043) (delete-file . g$3456$24042) (file-exists? . g$3456$24041) (vector-sort! . g$3456$24040) (vector-sort . g$3456$24039) (list-sort . g$3456$24038) (symbol-hash . g$3456$24037) (string-ci-hash . g$3456$24036) (string-hash . g$3456$24035) (equal-hash . g$3456$24034) (hashtable-equivalence-function . g$3456$24033) (make-hashtable . g$3456$24032) (hashtable-hash-function . g$3456$24031) (make-eqv-hashtable . g$3456$24030) (make-eq-hashtable . g$3456$24029) (hashtable? . g$3456$24028) (hashtable-update! . g$3456$24027) (hashtable-size . g$3456$24026) (hashtable-set! . g$3456$24025) (hashtable-ref . g$3456$24024) (hashtable-mutable? . g$3456$24023) (hashtable-keys . g$3456$24022) (hashtable-entries . g$3456$24021) (hashtable-delete! . g$3456$24020) (hashtable-copy . g$3456$24019) (hashtable-contains? . g$3456$24018) (hashtable-clear! . g$3456$24017) (call-with-output-file . g$3456$24016) (call-with-input-file . g$3456$24015) (write-char . g$3456$24014) (write . g$3456$24013) (with-output-to-file . g$3456$24012) (with-input-from-file . g$3456$24011) (read-char . g$3456$24010) (read . g$3456$24009) (peek-char . g$3456$24008) (open-output-file . g$3456$24007) (open-input-file . g$3456$24006) (newline . g$3456$24005) (display . g$3456$24004) (close-output-port . g$3456$24003) (close-input-port . g$3456$24002) (eof-object? . g$3456$24001) (eof-object . g$3456$24000) (current-error-port . g$3456$23999) (current-output-port . g$3456$23998) (current-input-port . g$3456$23997) (output-port? . g$3456$23996) (input-port? . g$3456$23995) (utf-8-codec . g$3456$23994) (utf-16-codec . g$3456$23993) (transcoder-error-handling-mode . g$3456$23992) (transcoder-eol-style . g$3456$23991) (transcoder-codec . g$3456$23990) (transcoded-port . g$3456$23989) (textual-port? . g$3456$23988) (string->bytevector . g$3456$23987) (standard-output-port . g$3456$23986) (standard-input-port . g$3456$23985) (standard-error-port . g$3456$23984) (set-port-position! . g$3456$23983) (put-u8 . g$3456$23982) (put-string . g$3456$23981) (put-datum . g$3456$23980) (put-char . g$3456$23979) (put-bytevector . g$3456$23978) (port? . g$3456$23977) (port-transcoder . g$3456$23976) (port-position . g$3456$23975) (port-has-set-port-position!? . g$3456$23974) (port-has-port-position? . g$3456$23973) (port-eof? . g$3456$23972) (output-port-buffer-mode . g$3456$23971) (open-string-output-port . g$3456$23970) (open-string-input-port . g$3456$23969) (open-file-output-port . g$3456$23968) (open-file-input/output-port . g$3456$23967) (open-file-input-port . g$3456$23966) (open-bytevector-output-port . g$3456$23965) (open-bytevector-input-port . g$3456$23964) (native-transcoder . g$3456$23963) (native-eol-style . g$3456$23962) (make-transcoder . g$3456$23961) (latin-1-codec . g$3456$23960) (make-i/o-write-error . g$3456$23959) (make-i/o-read-error . g$3456$23958) (make-i/o-port-error . g$3456$23957) (make-i/o-invalid-position-error . g$3456$23956) (make-i/o-filename-error . g$3456$23955) (make-i/o-file-protection-error . g$3456$23954) (make-i/o-file-is-read-only-error . g$3456$23953) (make-i/o-file-does-not-exist-error . g$3456$23952) (make-i/o-file-already-exists-error . g$3456$23951) (make-i/o-error . g$3456$23950) (make-i/o-encoding-error . g$3456$23949) (make-i/o-decoding-error . g$3456$23948) (make-custom-textual-output-port . g$3456$23947) (make-custom-textual-input/output-port . g$3456$23946) (make-custom-textual-input-port . g$3456$23945) (make-custom-binary-output-port . g$3456$23944) (make-custom-binary-input/output-port . g$3456$23943) (make-custom-binary-input-port . g$3456$23942) (make-bytevector . g$3456$23941) (lookahead-u8 . g$3456$23940) (lookahead-char . g$3456$23939) (i/o-write-error? . g$3456$23938) (i/o-read-error? . g$3456$23937) (i/o-port-error? . g$3456$23936) (i/o-invalid-position-error? . g$3456$23935) (i/o-filename-error? . g$3456$23934) (i/o-file-protection-error? . g$3456$23933) (i/o-file-is-read-only-error? . g$3456$23932) (i/o-file-does-not-exist-error? . g$3456$23931) (i/o-file-already-exists-error? . g$3456$23930) (i/o-error? . g$3456$23929) (i/o-error-port . g$3456$23928) (i/o-error-filename . g$3456$23927) (i/o-encoding-error? . g$3456$23926) (i/o-encoding-error-char . g$3456$23925) (i/o-decoding-error? . g$3456$23924) (get-u8 . g$3456$23923) (get-string-n! . g$3456$23922) (get-string-n . g$3456$23921) (get-string-all . g$3456$23920) (get-line . g$3456$23919) (get-datum . g$3456$23918) (get-char . g$3456$23917) (get-bytevector-some . g$3456$23916) (get-bytevector-n! . g$3456$23915) (get-bytevector-n . g$3456$23914) (get-bytevector-all . g$3456$23913) (flush-output-port . g$3456$23912) (close-port . g$3456$23911) (scheme-report-environment . g$3456$23910) (quotient . g$3456$23909) (null-environment . g$3456$13685) (remainder . g$3456$23908) (modulo . g$3456$23907) (inexact->exact . g$3456$23906) (force . g$3456$23905) (exact->inexact . g$3456$23904) (exit . g$3456$23903) (command-line . g$3456$23902) (string-fill! . g$3456$23901) (string-set! . g$3456$23900) (set-cdr! . g$3456$23899) (set-car! . g$3456$23898) (remove . g$3456$23897) (remv . g$3456$23896) (remp . g$3456$23895) (remq . g$3456$23894) (partition . g$3456$23893) (memv . g$3456$23892) (memq . g$3456$23891) (memp . g$3456$23890) (member . g$3456$23889) (exists . g$3456$23888) (for-all . g$3456$23887) (fold-right . g$3456$23886) (fold-left . g$3456$23885) (find . g$3456$23884) (filter . g$3456$23883) (cons* . g$3456$23882) (assv . g$3456$23881) (assq . g$3456$23880) (assp . g$3456$23879) (assoc . g$3456$23878) (call-with-string-output-port . g$3456$23877) (call-with-port . g$3456$23876) (call-with-bytevector-output-port . g$3456$23875) (bytevector->string . g$3456$23874) (buffer-mode? . g$3456$23873) (binary-port? . g$3456$23872) (with-exception-handler . g$3456$23871) (raise-continuable . g$3456$23870) (raise . g$3456$23869) (eval . g$3456$13691) (environment . g$3456$13683) (make-enumeration . g$3456$23868) (enum-set=? . g$3456$23867) (enum-set-universe . g$3456$23866) (enum-set-union . g$3456$23865) (enum-set-subset? . g$3456$23864) (enum-set-projection . g$3456$23863) (enum-set-member? . g$3456$23862) (enum-set-intersection . g$3456$23861) (enum-set-indexer . g$3456$23860) (enum-set-difference . g$3456$23859) (enum-set-constructor . g$3456$23858) (enum-set-complement . g$3456$23857) (enum-set->list . g$3456$23856) (who-condition? . g$3456$23855) (warning? . g$3456$23854) (violation? . g$3456$23853) (undefined-violation? . g$3456$23852) (syntax-violation? . g$3456$23851) (syntax-violation-subform . g$3456$23850) (syntax-violation-form . g$3456$23849) (syntax-violation . g$3456$23848) (simple-conditions . g$3456$23847) (serious-condition? . g$3456$23846) (non-continuable-violation? . g$3456$23845) (&non-continuable . g$3456$23844) (message-condition? . g$3456$23843) (make-who-condition . g$3456$23842) (make-warning . g$3456$23841) (make-violation . g$3456$23840) (make-undefined-violation . g$3456$23839) (make-syntax-violation . g$3456$23838) (make-serious-condition . g$3456$23837) (make-non-continuable-violation . g$3456$23836) (make-message-condition . g$3456$23835) (make-lexical-violation . g$3456$23834) (make-irritants-condition . g$3456$23833) (make-implementation-restriction-violation . g$3456$23832) (make-error . g$3456$23831) (make-assertion-violation . g$3456$23830) (lexical-violation? . g$3456$23829) (irritants-condition? . g$3456$23828) (implementation-restriction-violation? . g$3456$23827) (&implementation-restriction . g$3456$23826) (error? . g$3456$23825) (condition-who . g$3456$23824) (condition-predicate . g$3456$23823) (condition-message . g$3456$23822) (condition-irritants . g$3456$23821) (condition-accessor . g$3456$23820) (condition . g$3456$23819) (assertion-violation? . g$3456$23818) (condition? . g$3456$23817) (utf32->string . g$3456$23816) (utf16->string . g$3456$23815) (utf8->string . g$3456$23814) (uint-list->bytevector . g$3456$23813) (u8-list->bytevector . g$3456$23812) (string->utf8 . g$3456$23811) (string->utf32 . g$3456$23810) (string->utf16 . g$3456$23809) (sint-list->bytevector . g$3456$23808) (native-endianness . g$3456$23807) (bytevector? . g$3456$23806) (bytevector=? . g$3456$23805) (bytevector-uint-set! . g$3456$23804) (bytevector-uint-ref . g$3456$23803) (bytevector-u8-set! . g$3456$23802) (bytevector-u8-ref . g$3456$23801) (bytevector-u64-set! . g$3456$23800) (bytevector-u64-ref . g$3456$23799) (bytevector-u64-native-set! . g$3456$23798) (bytevector-u64-native-ref . g$3456$23797) (bytevector-u32-set! . g$3456$23796) (bytevector-u32-ref . g$3456$23795) (bytevector-u32-native-set! . g$3456$23794) (bytevector-u32-native-ref . g$3456$23793) (bytevector-u16-set! . g$3456$23792) (bytevector-u16-ref . g$3456$23791) (bytevector-u16-native-set! . g$3456$23790) (bytevector-u16-native-ref . g$3456$23789) (bytevector-sint-set! . g$3456$23788) (bytevector-sint-ref . g$3456$23787) (bytevector-s8-set! . g$3456$23786) (bytevector-s8-ref . g$3456$23785) (bytevector-s64-set! . g$3456$23784) (bytevector-s64-ref . g$3456$23783) (bytevector-s64-native-set! . g$3456$23782) (bytevector-s64-native-ref . g$3456$23781) (bytevector-s32-set! . g$3456$23780) (bytevector-s32-ref . g$3456$23779) (bytevector-s32-native-set! . g$3456$23778) (bytevector-s32-native-ref . g$3456$23777) (bytevector-s16-set! . g$3456$23776) (bytevector-s16-ref . g$3456$23775) (bytevector-s16-native-set! . g$3456$23774) (bytevector-s16-native-ref . g$3456$23773) (bytevector-length . g$3456$23772) (bytevector-ieee-single-ref . g$3456$23771) (bytevector-ieee-single-native-set! . g$3456$23770) (bytevector-ieee-single-native-ref . g$3456$23769) (bytevector-ieee-double-ref . g$3456$23768) (bytevector-ieee-double-native-set! . g$3456$23767) (bytevector-ieee-double-native-ref . g$3456$23766) (bytevector-fill! . g$3456$23765) (bytevector-copy! . g$3456$23764) (bytevector-copy . g$3456$23763) (bytevector->uint-list . g$3456$23762) (bytevector->u8-list . g$3456$23761) (bytevector->sint-list . g$3456$23760) (no-nans-violation? . g$3456$23759) (no-infinities-violation? . g$3456$23758) (make-no-nans-violation . g$3456$23757) (make-no-infinities-violation . g$3456$23756) (real->flonum . g$3456$23755) (flzero? . g$3456$23754) (fltruncate . g$3456$23753) (fltan . g$3456$23752) (flsqrt . g$3456$23751) (flsin . g$3456$23750) (flround . g$3456$23749) (flpositive? . g$3456$23748) (flonum? . g$3456$23747) (flodd? . g$3456$23746) (flnumerator . g$3456$23745) (flnegative? . g$3456$23744) (flnan? . g$3456$23743) (flmod0 . g$3456$23742) (flmod . g$3456$23741) (flmin . g$3456$23740) (flmax . g$3456$23739) (fllog . g$3456$23738) (flinteger? . g$3456$23737) (flinfinite? . g$3456$23736) (flfloor . g$3456$23735) (flfinite? . g$3456$23734) (flexpt . g$3456$23733) (flexp . g$3456$23732) (fleven? . g$3456$23731) (fldiv0-and-mod0 . g$3456$23730) (fldiv0 . g$3456$23729) (fldiv-and-mod . g$3456$23728) (fldiv . g$3456$23727) (fldenominator . g$3456$23726) (flcos . g$3456$23725) (flceiling . g$3456$23724) (flatan . g$3456$23723) (flasin . g$3456$23722) (flacos . g$3456$23721) (flabs . g$3456$23720) (fl>? . g$3456$23719) (fl>=? . g$3456$23718) (fl=? . g$3456$23717) (fl<? . g$3456$23716) (fl<=? . g$3456$23715) (fl/ . g$3456$23714) (fl- . g$3456$23713) (fl+ . g$3456$23712) (fl* . g$3456$23711) (fixnum->flonum . g$3456$23710) (fxzero? . g$3456$23709) (fxxor . g$3456$23708) (fxrotate-bit-field . g$3456$23707) (fxreverse-bit-field . g$3456$23706) (fxpositive? . g$3456$23705) (fxodd? . g$3456$23704) (fxnot . g$3456$23703) (fxnegative? . g$3456$23702) (fxmod0 . g$3456$23701) (fxmod . g$3456$23700) (fxmin . g$3456$23699) (fxmax . g$3456$23698) (fxlength . g$3456$23697) (fxior . g$3456$23696) (fxif . g$3456$23695) (fxfirst-bit-set . g$3456$23694) (fxeven? . g$3456$23693) (fxdiv0-and-mod0 . g$3456$23692) (fxdiv0 . g$3456$23691) (fxdiv-and-mod . g$3456$23690) (fxdiv . g$3456$23689) (fxcopy-bit-field . g$3456$23688) (fxcopy-bit . g$3456$23687) (fxbit-set? . g$3456$23686) (fxbit-field . g$3456$23685) (fxbit-count . g$3456$23684) (fxarithmetic-shift-right . g$3456$23683) (fxarithmetic-shift-left . g$3456$23682) (fxarithmetic-shift . g$3456$23681) (fxand . g$3456$23680) (fx>? . g$3456$23679) (fx>=? . g$3456$23678) (fx=? . g$3456$23677) (fx<? . g$3456$23676) (fx<=? . g$3456$23675) (fx-/carry . g$3456$23674) (fx- . g$3456$23673) (fx+/carry . g$3456$23672) (fx+ . g$3456$23671) (fx*/carry . g$3456$23670) (fx* . g$3456$23669) (greatest-fixnum . g$3456$23668) (least-fixnum . g$3456$23667) (fixnum-width . g$3456$23666) (fixnum? . g$3456$23665) (bitwise-rotate-bit-field . g$3456$23664) (bitwise-reverse-bit-field . g$3456$23663) (bitwise-length . g$3456$23662) (bitwise-if . g$3456$23661) (bitwise-first-bit-set . g$3456$23660) (bitwise-copy-bit-field . g$3456$23659) (bitwise-copy-bit . g$3456$23658) (bitwise-bit-set? . g$3456$23657) (bitwise-bit-field . g$3456$23656) (bitwise-bit-count . g$3456$23655) (bitwise-xor . g$3456$23654) (bitwise-ior . g$3456$23653) (bitwise-and . g$3456$23652) (bitwise-not . g$3456$23651) (bitwise-arithmetic-shift-right . g$3456$23650) (bitwise-arithmetic-shift-left . g$3456$23649) (bitwise-arithmetic-shift . g$3456$23648) (zero? . g$3456$23647) (vector? . g$3456$23646) (vector-set! . g$3456$23645) (vector-ref . g$3456$23644) (vector-map . g$3456$23643) (vector-length . g$3456$23642) (vector-for-each . g$3456$23641) (vector-fill! . g$3456$23640) (vector->list . g$3456$23639) (vector . g$3456$23638) (values . g$3456$23637) (truncate . g$3456$23636) (tan . g$3456$23635) (symbol? . g$3456$23634) (symbol=? . g$3456$23633) (symbol->string . g$3456$23632) (substring . g$3456$23631) (string? . g$3456$23630) (string>? . g$3456$23629) (string>=? . g$3456$23628) (string=? . g$3456$23627) (string<? . g$3456$23626) (string<=? . g$3456$23625) (string-ref . g$3456$23624) (string-length . g$3456$23623) (string-for-each . g$3456$23622) (string-copy . g$3456$23621) (string-append . g$3456$23620) (string->symbol . g$3456$23619) (string->number . g$3456$23618) (string->list . g$3456$23617) (string . g$3456$23616) (sqrt . g$3456$23615) (sin . g$3456$23614) (round . g$3456$23613) (reverse . g$3456$23612) (real? . g$3456$23611) (real-valued? . g$3456$23610) (real-part . g$3456$23609) (rationalize . g$3456$23608) (rational? . g$3456$23607) (rational-valued? . g$3456$23606) (procedure? . g$3456$23605) (positive? . g$3456$23604) (pair? . g$3456$23603) (odd? . g$3456$23602) (numerator . g$3456$23601) (number? . g$3456$23600) (number->string . g$3456$23599) (null? . g$3456$23598) (not . g$3456$23597) (negative? . g$3456$23596) (nan? . g$3456$23595) (min . g$3456$23594) (max . g$3456$23593) (map . g$3456$23592) (make-vector . g$3456$23591) (make-string . g$3456$23590) (make-rectangular . g$3456$23589) (make-polar . g$3456$23588) (magnitude . g$3456$23587) (log . g$3456$23586) (list? . g$3456$23585) (list-tail . g$3456$23584) (list-ref . g$3456$23583) (list->vector . g$3456$23582) (list->string . g$3456$23581) (list . g$3456$23580) (length . g$3456$23579) (lcm . g$3456$23578) (integer? . g$3456$23577) (integer-valued? . g$3456$23576) (integer->char . g$3456$23575) (infinite? . g$3456$23574) (inexact? . g$3456$23573) (inexact . g$3456$23572) (imag-part . g$3456$23571) (gcd . g$3456$23570) (for-each . g$3456$23569) (floor . g$3456$23568) (finite? . g$3456$23567) (expt . g$3456$23566) (exp . g$3456$23565) (exact? . g$3456$23564) (exact-integer-sqrt . g$3456$23563) (exact . g$3456$23562) (even? . g$3456$23561) (error . g$3456$23560) (eqv? . g$3456$23559) (equal? . g$3456$23558) (eq? . g$3456$23557) (dynamic-wind . g$3456$23556) (div0-and-mod0 . g$3456$23555) (mod0 . g$3456$23554) (div0 . g$3456$23553) (div-and-mod . g$3456$23552) (mod . g$3456$23551) (div . g$3456$23550) (denominator . g$3456$23549) (cos . g$3456$23548) (cons . g$3456$23547) (complex? . g$3456$23546) (char? . g$3456$23545) (char>? . g$3456$23544) (char>=? . g$3456$23543) (char=? . g$3456$23542) (char<? . g$3456$23541) (char<=? . g$3456$23540) (char->integer . g$3456$23539) (ceiling . g$3456$23538) (call-with-values . g$3456$23537) (call/cc . g$3456$23536) (call-with-current-continuation . g$3456$23535) (cddddr . g$3456$23534) (cdddar . g$3456$23533) (cddadr . g$3456$23532) (cddaar . g$3456$23531) (cdaddr . g$3456$23530) (cdadar . g$3456$23529) (cdaadr . g$3456$23528) (cdaaar . g$3456$23527) (cadddr . g$3456$23526) (caddar . g$3456$23525) (cadadr . g$3456$23524) (cadaar . g$3456$23523) (caaddr . g$3456$23522) (caadar . g$3456$23521) (caaadr . g$3456$23520) (caaaar . g$3456$23519) (cdddr . g$3456$23518) (cddar . g$3456$23517) (cdadr . g$3456$23516) (cdaar . g$3456$23515) (caddr . g$3456$23514) (cadar . g$3456$23513) (caadr . g$3456$23512) (caaar . g$3456$23511) (cddr . g$3456$23510) (cdar . g$3456$23509) (cadr . g$3456$23508) (caar . g$3456$23507) (cdr . g$3456$23506) (car . g$3456$23505) (boolean? . g$3456$23504) (boolean=? . g$3456$23503) (atan . g$3456$23502) (assertion-violation . g$3456$23501) (asin . g$3456$23500) (apply . g$3456$23499) (append . g$3456$23498) (angle . g$3456$23497) (acos . g$3456$23496) (abs . g$3456$23495) (/ . g$3456$23494) (* . g$3456$23493) (- . g$3456$23492) (+ . g$3456$23491) (>= . g$3456$23490) (> . g$3456$23489) (= . g$3456$23488) (<= . g$3456$23487) (< . g$3456$23486) (let*-values . g$3456$23485) (&no-nans . g$3456$23484) (&no-infinities . g$3456$23483) (&i/o-encoding . g$3456$23482) (&i/o-decoding . g$3456$23481) (&i/o-port . g$3456$23480) (&i/o-file-does-not-exist . g$3456$23479) (&i/o-file-already-exists . g$3456$23478) (&i/o-file-is-read-only . g$3456$23477) (&i/o-file-protection . g$3456$23476) (&i/o-filename . g$3456$23475) (&i/o-invalid-position . g$3456$23474) (&i/o-write . g$3456$23473) (&i/o-read . g$3456$23472) (&i/o . g$3456$23471) (&undefined . g$3456$23470) (&syntax . g$3456$23469) (&lexical . g$3456$23468) (&implementation . g$3456$23467) (&non . g$3456$23466) (&who . g$3456$23465) (&irritants . g$3456$23464) (&assertion . g$3456$23463) (&violation . g$3456$23462) (&error . g$3456$23461) (&serious . g$3456$23460) (&warning . g$3456$23459) (&message . g$3456$23458) (&condition . g$3456$23457) (define-condition-type . g$3456$23456) (define-enumeration . g$3456$23455) (define-record-type . g$3456$23454) (parent-rtd . g$3456$23453) (nongenerative . g$3456$23452) (opaque . g$3456$23451) (sealed . g$3456$23450) (protocol . g$3456$23449) (parent . g$3456$23448) (immutable . g$3456$23447) (mutable . g$3456$23446) (fields . g$3456$23445) (error-handling-mode . g$3456$23444) (file-options . g$3456$23443) (buffer-mode . g$3456$23442) (eol-style . g$3456$23441) (guard . g$3456$23440) (trace-define . g$3456$23439) (trace-lambda . g$3456$23438) (unsyntax-splicing . g$3456$23437) (unsyntax . g$3456$23436) (unquote-splicing . g$3456$23435) (unquote . g$3456$23434) (_ . g$3456$23433) (else . g$3456$23432) (=> . g$3456$23431) (|...| . g$3456$23430) (assert . g$3456$23429) (endianness . g$3456$23428) (delay . g$3456$23427) (time . g$3456$23426) (or . g$3456$23425) (and . g$3456$23424) (do . g$3456$23423) (cond . g$3456$23422) (let* . g$3456$23421) (let . g$3456$23420) (identifier-syntax . g$3456$23419) (with-syntax . g$3456$23418) (quasisyntax . g$3456$23417) (quasiquote . g$3456$23416) (syntax-rules . g$3456$23415) (include . g$3456$23414) (define-struct . g$3456$23413) (record-constructor-descriptor . g$3456$23412) (record-type-descriptor . g$3456$23411) (let-values . g$3456$23410) (case . g$3456$23409) (parameterize . g$3456$23408) (unless . g$3456$23407) (when . g$3456$23406) (if . g$3456$23405) (letrec* . g$3456$23404) (letrec . g$3456$23403) (type-descriptor . g$3456$23402) (case-lambda . g$3456$23401) (lambda . g$3456$23400) (syntax . g$3456$23399) (syntax-case . g$3456$23398) (quote . g$3456$23397) (foreign-call . g$3456$23396) (letrec-syntax . g$3456$23395) (let-syntax . g$3456$23394) (set! . g$3456$23393) (import . g$3456$23392) (begin . g$3456$23391) (module . g$3456$23390) (define-syntax . g$3456$23389) (define . g$3456$23388)) '((g$3456$24098 core-prim . regexp?) (g$3456$13711 core-prim . syntax-error) (g$3456$13578 core-prim . syntax-dispatch) (g$3456$24097 core-prim . pretty-print) (g$3456$24096 core-prim . eval-core) (g$3456$24095 core-prim . set-symbol-value!) (g$3456$24094 core-prim . symbol-value) (g$3456$24093 core-prim . gensym) (g$3456$24092 core-prim . void) (g$3456$24091 core-prim . load) (g$3456$24090 core-prim . interaction-environment) (g$3456$24089 core-prim . char-ready?) (g$3456$24088 core-prim . string-upcase) (g$3456$24087 core-prim . string-titlecase) (g$3456$24086 core-prim . string-normalize-nfkd) (g$3456$24085 core-prim . string-normalize-nfkc) (g$3456$24084 core-prim . string-normalize-nfd) (g$3456$24083 core-prim . string-normalize-nfc) (g$3456$24082 core-prim . string-foldcase) (g$3456$24081 core-prim . string-downcase) (g$3456$24080 core-prim . string-ci>?) (g$3456$24079 core-prim . string-ci>=?) (g$3456$24078 core-prim . string-ci=?) (g$3456$24077 core-prim . string-ci<?) (g$3456$24076 core-prim . string-ci<=?) (g$3456$24075 core-prim . char-whitespace?) (g$3456$24074 core-prim . char-upper-case?) (g$3456$24073 core-prim . char-title-case?) (g$3456$24072 core-prim . char-numeric?) (g$3456$24071 core-prim . char-lower-case?) (g$3456$24070 core-prim . char-general-category) (g$3456$24069 core-prim . char-upcase) (g$3456$24068 core-prim . char-titlecase) (g$3456$24067 core-prim . char-foldcase) (g$3456$24066 core-prim . char-downcase) (g$3456$24065 core-prim . char-ci>?) (g$3456$24064 core-prim . char-ci>=?) (g$3456$24063 core-prim . char-ci=?) (g$3456$24062 core-prim . char-ci<?) (g$3456$24061 core-prim . char-ci<=?) (g$3456$24060 core-prim . char-alphabetic?) (g$3456$13283 core-prim . make-variable-transformer) (g$3456$13713 core-prim . identifier?) (g$3456$13705 core-prim . generate-temporaries) (g$3456$13707 core-prim . free-identifier=?) (g$3456$13717 core-prim . syntax->datum) (g$3456$13715 core-prim . datum->syntax) (g$3456$13709 core-prim . bound-identifier=?) (g$3456$24059 core-prim . record-type-descriptor?) (g$3456$24058 core-prim . record-predicate) (g$3456$24057 core-prim . record-mutator) (g$3456$24056 core-prim . record-constructor) (g$3456$24055 core-prim . record-accessor) (g$3456$24054 core-prim . make-record-type-descriptor) (g$3456$24053 core-prim . make-record-constructor-descriptor) (g$3456$24052 core-prim . record?) (g$3456$24051 core-prim . record-type-uid) (g$3456$24050 core-prim . record-type-sealed?) (g$3456$24049 core-prim . record-type-parent) (g$3456$24048 core-prim . record-type-opaque?) (g$3456$24047 core-prim . record-type-name) (g$3456$24046 core-prim . record-type-generative?) (g$3456$24045 core-prim . record-type-field-names) (g$3456$24044 core-prim . record-rtd) (g$3456$24043 core-prim . record-field-mutable?) (g$3456$24042 core-prim . delete-file) (g$3456$24041 core-prim . file-exists?) (g$3456$24040 core-prim . vector-sort!) (g$3456$24039 core-prim . vector-sort) (g$3456$24038 core-prim . list-sort) (g$3456$24037 core-prim . symbol-hash) (g$3456$24036 core-prim . string-ci-hash) (g$3456$24035 core-prim . string-hash) (g$3456$24034 core-prim . equal-hash) (g$3456$24033 core-prim . hashtable-equivalence-function) (g$3456$24032 core-prim . make-hashtable) (g$3456$24031 core-prim . hashtable-hash-function) (g$3456$24030 core-prim . make-eqv-hashtable) (g$3456$24029 core-prim . make-eq-hashtable) (g$3456$24028 core-prim . hashtable?) (g$3456$24027 core-prim . hashtable-update!) (g$3456$24026 core-prim . hashtable-size) (g$3456$24025 core-prim . hashtable-set!) (g$3456$24024 core-prim . hashtable-ref) (g$3456$24023 core-prim . hashtable-mutable?) (g$3456$24022 core-prim . hashtable-keys) (g$3456$24021 core-prim . hashtable-entries) (g$3456$24020 core-prim . hashtable-delete!) (g$3456$24019 core-prim . hashtable-copy) (g$3456$24018 core-prim . hashtable-contains?) (g$3456$24017 core-prim . hashtable-clear!) (g$3456$24016 core-prim . call-with-output-file) (g$3456$24015 core-prim . call-with-input-file) (g$3456$24014 core-prim . write-char) (g$3456$24013 core-prim . write) (g$3456$24012 core-prim . with-output-to-file) (g$3456$24011 core-prim . with-input-from-file) (g$3456$24010 core-prim . read-char) (g$3456$24009 core-prim . read) (g$3456$24008 core-prim . peek-char) (g$3456$24007 core-prim . open-output-file) (g$3456$24006 core-prim . open-input-file) (g$3456$24005 core-prim . newline) (g$3456$24004 core-prim . display) (g$3456$24003 core-prim . close-output-port) (g$3456$24002 core-prim . close-input-port) (g$3456$24001 core-prim . eof-object?) (g$3456$24000 core-prim . eof-object) (g$3456$23999 core-prim . current-error-port) (g$3456$23998 core-prim . current-output-port) (g$3456$23997 core-prim . current-input-port) (g$3456$23996 core-prim . output-port?) (g$3456$23995 core-prim . input-port?) (g$3456$23994 core-prim . utf-8-codec) (g$3456$23993 core-prim . utf-16-codec) (g$3456$23992 core-prim . transcoder-error-handling-mode) (g$3456$23991 core-prim . transcoder-eol-style) (g$3456$23990 core-prim . transcoder-codec) (g$3456$23989 core-prim . transcoded-port) (g$3456$23988 core-prim . textual-port?) (g$3456$23987 core-prim . string->bytevector) (g$3456$23986 core-prim . standard-output-port) (g$3456$23985 core-prim . standard-input-port) (g$3456$23984 core-prim . standard-error-port) (g$3456$23983 core-prim . set-port-position!) (g$3456$23982 core-prim . put-u8) (g$3456$23981 core-prim . put-string) (g$3456$23980 core-prim . put-datum) (g$3456$23979 core-prim . put-char) (g$3456$23978 core-prim . put-bytevector) (g$3456$23977 core-prim . port?) (g$3456$23976 core-prim . port-transcoder) (g$3456$23975 core-prim . port-position) (g$3456$23974 core-prim . port-has-set-port-position!?) (g$3456$23973 core-prim . port-has-port-position?) (g$3456$23972 core-prim . port-eof?) (g$3456$23971 core-prim . output-port-buffer-mode) (g$3456$23970 core-prim . open-string-output-port) (g$3456$23969 core-prim . open-string-input-port) (g$3456$23968 core-prim . open-file-output-port) (g$3456$23967 core-prim . open-file-input/output-port) (g$3456$23966 core-prim . open-file-input-port) (g$3456$23965 core-prim . open-bytevector-output-port) (g$3456$23964 core-prim . open-bytevector-input-port) (g$3456$23963 core-prim . native-transcoder) (g$3456$23962 core-prim . native-eol-style) (g$3456$23961 core-prim . make-transcoder) (g$3456$23960 core-prim . latin-1-codec) (g$3456$23959 core-prim . make-i/o-write-error) (g$3456$23958 core-prim . make-i/o-read-error) (g$3456$23957 core-prim . make-i/o-port-error) (g$3456$23956 core-prim . make-i/o-invalid-position-error) (g$3456$23955 core-prim . make-i/o-filename-error) (g$3456$23954 core-prim . make-i/o-file-protection-error) (g$3456$23953 core-prim . make-i/o-file-is-read-only-error) (g$3456$23952 core-prim . make-i/o-file-does-not-exist-error) (g$3456$23951 core-prim . make-i/o-file-already-exists-error) (g$3456$23950 core-prim . make-i/o-error) (g$3456$23949 core-prim . make-i/o-encoding-error) (g$3456$23948 core-prim . make-i/o-decoding-error) (g$3456$23947 core-prim . make-custom-textual-output-port) (g$3456$23946 core-prim . make-custom-textual-input/output-port) (g$3456$23945 core-prim . make-custom-textual-input-port) (g$3456$23944 core-prim . make-custom-binary-output-port) (g$3456$23943 core-prim . make-custom-binary-input/output-port) (g$3456$23942 core-prim . make-custom-binary-input-port) (g$3456$23941 core-prim . make-bytevector) (g$3456$23940 core-prim . lookahead-u8) (g$3456$23939 core-prim . lookahead-char) (g$3456$23938 core-prim . i/o-write-error?) (g$3456$23937 core-prim . i/o-read-error?) (g$3456$23936 core-prim . i/o-port-error?) (g$3456$23935 core-prim . i/o-invalid-position-error?) (g$3456$23934 core-prim . i/o-filename-error?) (g$3456$23933 core-prim . i/o-file-protection-error?) (g$3456$23932 core-prim . i/o-file-is-read-only-error?) (g$3456$23931 core-prim . i/o-file-does-not-exist-error?) (g$3456$23930 core-prim . i/o-file-already-exists-error?) (g$3456$23929 core-prim . i/o-error?) (g$3456$23928 core-prim . i/o-error-port) (g$3456$23927 core-prim . i/o-error-filename) (g$3456$23926 core-prim . i/o-encoding-error?) (g$3456$23925 core-prim . i/o-encoding-error-char) (g$3456$23924 core-prim . i/o-decoding-error?) (g$3456$23923 core-prim . get-u8) (g$3456$23922 core-prim . get-string-n!) (g$3456$23921 core-prim . get-string-n) (g$3456$23920 core-prim . get-string-all) (g$3456$23919 core-prim . get-line) (g$3456$23918 core-prim . get-datum) (g$3456$23917 core-prim . get-char) (g$3456$23916 core-prim . get-bytevector-some) (g$3456$23915 core-prim . get-bytevector-n!) (g$3456$23914 core-prim . get-bytevector-n) (g$3456$23913 core-prim . get-bytevector-all) (g$3456$23912 core-prim . flush-output-port) (g$3456$23911 core-prim . close-port) (g$3456$23910 core-prim . scheme-report-environment) (g$3456$23909 core-prim . quotient) (g$3456$13685 core-prim . null-environment) (g$3456$23908 core-prim . remainder) (g$3456$23907 core-prim . modulo) (g$3456$23906 core-prim . inexact->exact) (g$3456$23905 core-prim . force) (g$3456$23904 core-prim . exact->inexact) (g$3456$23903 core-prim . exit) (g$3456$23902 core-prim . command-line) (g$3456$23901 core-prim . string-fill!) (g$3456$23900 core-prim . string-set!) (g$3456$23899 core-prim . set-cdr!) (g$3456$23898 core-prim . set-car!) (g$3456$23897 core-prim . remove) (g$3456$23896 core-prim . remv) (g$3456$23895 core-prim . remp) (g$3456$23894 core-prim . remq) (g$3456$23893 core-prim . partition) (g$3456$23892 core-prim . memv) (g$3456$23891 core-prim . memq) (g$3456$23890 core-prim . memp) (g$3456$23889 core-prim . member) (g$3456$23888 core-prim . exists) (g$3456$23887 core-prim . for-all) (g$3456$23886 core-prim . fold-right) (g$3456$23885 core-prim . fold-left) (g$3456$23884 core-prim . find) (g$3456$23883 core-prim . filter) (g$3456$23882 core-prim . cons*) (g$3456$23881 core-prim . assv) (g$3456$23880 core-prim . assq) (g$3456$23879 core-prim . assp) (g$3456$23878 core-prim . assoc) (g$3456$23877 core-prim . call-with-string-output-port) (g$3456$23876 core-prim . call-with-port) (g$3456$23875 core-prim . call-with-bytevector-output-port) (g$3456$23874 core-prim . bytevector->string) (g$3456$23873 core-prim . buffer-mode?) (g$3456$23872 core-prim . binary-port?) (g$3456$23871 core-prim . with-exception-handler) (g$3456$23870 core-prim . raise-continuable) (g$3456$23869 core-prim . raise) (g$3456$13691 core-prim . eval) (g$3456$13683 core-prim . environment) (g$3456$23868 core-prim . make-enumeration) (g$3456$23867 core-prim . enum-set=?) (g$3456$23866 core-prim . enum-set-universe) (g$3456$23865 core-prim . enum-set-union) (g$3456$23864 core-prim . enum-set-subset?) (g$3456$23863 core-prim . enum-set-projection) (g$3456$23862 core-prim . enum-set-member?) (g$3456$23861 core-prim . enum-set-intersection) (g$3456$23860 core-prim . enum-set-indexer) (g$3456$23859 core-prim . enum-set-difference) (g$3456$23858 core-prim . enum-set-constructor) (g$3456$23857 core-prim . enum-set-complement) (g$3456$23856 core-prim . enum-set->list) (g$3456$23855 core-prim . who-condition?) (g$3456$23854 core-prim . warning?) (g$3456$23853 core-prim . violation?) (g$3456$23852 core-prim . undefined-violation?) (g$3456$23851 core-prim . syntax-violation?) (g$3456$23850 core-prim . syntax-violation-subform) (g$3456$23849 core-prim . syntax-violation-form) (g$3456$23848 core-prim . syntax-violation) (g$3456$23847 core-prim . simple-conditions) (g$3456$23846 core-prim . serious-condition?) (g$3456$23845 core-prim . non-continuable-violation?) (g$3456$23844 core-prim . &non-continuable) (g$3456$23843 core-prim . message-condition?) (g$3456$23842 core-prim . make-who-condition) (g$3456$23841 core-prim . make-warning) (g$3456$23840 core-prim . make-violation) (g$3456$23839 core-prim . make-undefined-violation) (g$3456$23838 core-prim . make-syntax-violation) (g$3456$23837 core-prim . make-serious-condition) (g$3456$23836 core-prim . make-non-continuable-violation) (g$3456$23835 core-prim . make-message-condition) (g$3456$23834 core-prim . make-lexical-violation) (g$3456$23833 core-prim . make-irritants-condition) (g$3456$23832 core-prim . make-implementation-restriction-violation) (g$3456$23831 core-prim . make-error) (g$3456$23830 core-prim . make-assertion-violation) (g$3456$23829 core-prim . lexical-violation?) (g$3456$23828 core-prim . irritants-condition?) (g$3456$23827 core-prim . implementation-restriction-violation?) (g$3456$23826 core-prim . &implementation-restriction) (g$3456$23825 core-prim . error?) (g$3456$23824 core-prim . condition-who) (g$3456$23823 core-prim . condition-predicate) (g$3456$23822 core-prim . condition-message) (g$3456$23821 core-prim . condition-irritants) (g$3456$23820 core-prim . condition-accessor) (g$3456$23819 core-prim . condition) (g$3456$23818 core-prim . assertion-violation?) (g$3456$23817 core-prim . condition?) (g$3456$23816 core-prim . utf32->string) (g$3456$23815 core-prim . utf16->string) (g$3456$23814 core-prim . utf8->string) (g$3456$23813 core-prim . uint-list->bytevector) (g$3456$23812 core-prim . u8-list->bytevector) (g$3456$23811 core-prim . string->utf8) (g$3456$23810 core-prim . string->utf32) (g$3456$23809 core-prim . string->utf16) (g$3456$23808 core-prim . sint-list->bytevector) (g$3456$23807 core-prim . native-endianness) (g$3456$23806 core-prim . bytevector?) (g$3456$23805 core-prim . bytevector=?) (g$3456$23804 core-prim . bytevector-uint-set!) (g$3456$23803 core-prim . bytevector-uint-ref) (g$3456$23802 core-prim . bytevector-u8-set!) (g$3456$23801 core-prim . bytevector-u8-ref) (g$3456$23800 core-prim . bytevector-u64-set!) (g$3456$23799 core-prim . bytevector-u64-ref) (g$3456$23798 core-prim . bytevector-u64-native-set!) (g$3456$23797 core-prim . bytevector-u64-native-ref) (g$3456$23796 core-prim . bytevector-u32-set!) (g$3456$23795 core-prim . bytevector-u32-ref) (g$3456$23794 core-prim . bytevector-u32-native-set!) (g$3456$23793 core-prim . bytevector-u32-native-ref) (g$3456$23792 core-prim . bytevector-u16-set!) (g$3456$23791 core-prim . bytevector-u16-ref) (g$3456$23790 core-prim . bytevector-u16-native-set!) (g$3456$23789 core-prim . bytevector-u16-native-ref) (g$3456$23788 core-prim . bytevector-sint-set!) (g$3456$23787 core-prim . bytevector-sint-ref) (g$3456$23786 core-prim . bytevector-s8-set!) (g$3456$23785 core-prim . bytevector-s8-ref) (g$3456$23784 core-prim . bytevector-s64-set!) (g$3456$23783 core-prim . bytevector-s64-ref) (g$3456$23782 core-prim . bytevector-s64-native-set!) (g$3456$23781 core-prim . bytevector-s64-native-ref) (g$3456$23780 core-prim . bytevector-s32-set!) (g$3456$23779 core-prim . bytevector-s32-ref) (g$3456$23778 core-prim . bytevector-s32-native-set!) (g$3456$23777 core-prim . bytevector-s32-native-ref) (g$3456$23776 core-prim . bytevector-s16-set!) (g$3456$23775 core-prim . bytevector-s16-ref) (g$3456$23774 core-prim . bytevector-s16-native-set!) (g$3456$23773 core-prim . bytevector-s16-native-ref) (g$3456$23772 core-prim . bytevector-length) (g$3456$23771 core-prim . bytevector-ieee-single-ref) (g$3456$23770 core-prim . bytevector-ieee-single-native-set!) (g$3456$23769 core-prim . bytevector-ieee-single-native-ref) (g$3456$23768 core-prim . bytevector-ieee-double-ref) (g$3456$23767 core-prim . bytevector-ieee-double-native-set!) (g$3456$23766 core-prim . bytevector-ieee-double-native-ref) (g$3456$23765 core-prim . bytevector-fill!) (g$3456$23764 core-prim . bytevector-copy!) (g$3456$23763 core-prim . bytevector-copy) (g$3456$23762 core-prim . bytevector->uint-list) (g$3456$23761 core-prim . bytevector->u8-list) (g$3456$23760 core-prim . bytevector->sint-list) (g$3456$23759 core-prim . no-nans-violation?) (g$3456$23758 core-prim . no-infinities-violation?) (g$3456$23757 core-prim . make-no-nans-violation) (g$3456$23756 core-prim . make-no-infinities-violation) (g$3456$23755 core-prim . real->flonum) (g$3456$23754 core-prim . flzero?) (g$3456$23753 core-prim . fltruncate) (g$3456$23752 core-prim . fltan) (g$3456$23751 core-prim . flsqrt) (g$3456$23750 core-prim . flsin) (g$3456$23749 core-prim . flround) (g$3456$23748 core-prim . flpositive?) (g$3456$23747 core-prim . flonum?) (g$3456$23746 core-prim . flodd?) (g$3456$23745 core-prim . flnumerator) (g$3456$23744 core-prim . flnegative?) (g$3456$23743 core-prim . flnan?) (g$3456$23742 core-prim . flmod0) (g$3456$23741 core-prim . flmod) (g$3456$23740 core-prim . flmin) (g$3456$23739 core-prim . flmax) (g$3456$23738 core-prim . fllog) (g$3456$23737 core-prim . flinteger?) (g$3456$23736 core-prim . flinfinite?) (g$3456$23735 core-prim . flfloor) (g$3456$23734 core-prim . flfinite?) (g$3456$23733 core-prim . flexpt) (g$3456$23732 core-prim . flexp) (g$3456$23731 core-prim . fleven?) (g$3456$23730 core-prim . fldiv0-and-mod0) (g$3456$23729 core-prim . fldiv0) (g$3456$23728 core-prim . fldiv-and-mod) (g$3456$23727 core-prim . fldiv) (g$3456$23726 core-prim . fldenominator) (g$3456$23725 core-prim . flcos) (g$3456$23724 core-prim . flceiling) (g$3456$23723 core-prim . flatan) (g$3456$23722 core-prim . flasin) (g$3456$23721 core-prim . flacos) (g$3456$23720 core-prim . flabs) (g$3456$23719 core-prim . fl>?) (g$3456$23718 core-prim . fl>=?) (g$3456$23717 core-prim . fl=?) (g$3456$23716 core-prim . fl<?) (g$3456$23715 core-prim . fl<=?) (g$3456$23714 core-prim . fl/) (g$3456$23713 core-prim . fl-) (g$3456$23712 core-prim . fl+) (g$3456$23711 core-prim . fl*) (g$3456$23710 core-prim . fixnum->flonum) (g$3456$23709 core-prim . fxzero?) (g$3456$23708 core-prim . fxxor) (g$3456$23707 core-prim . fxrotate-bit-field) (g$3456$23706 core-prim . fxreverse-bit-field) (g$3456$23705 core-prim . fxpositive?) (g$3456$23704 core-prim . fxodd?) (g$3456$23703 core-prim . fxnot) (g$3456$23702 core-prim . fxnegative?) (g$3456$23701 core-prim . fxmod0) (g$3456$23700 core-prim . fxmod) (g$3456$23699 core-prim . fxmin) (g$3456$23698 core-prim . fxmax) (g$3456$23697 core-prim . fxlength) (g$3456$23696 core-prim . fxior) (g$3456$23695 core-prim . fxif) (g$3456$23694 core-prim . fxfirst-bit-set) (g$3456$23693 core-prim . fxeven?) (g$3456$23692 core-prim . fxdiv0-and-mod0) (g$3456$23691 core-prim . fxdiv0) (g$3456$23690 core-prim . fxdiv-and-mod) (g$3456$23689 core-prim . fxdiv) (g$3456$23688 core-prim . fxcopy-bit-field) (g$3456$23687 core-prim . fxcopy-bit) (g$3456$23686 core-prim . fxbit-set?) (g$3456$23685 core-prim . fxbit-field) (g$3456$23684 core-prim . fxbit-count) (g$3456$23683 core-prim . fxarithmetic-shift-right) (g$3456$23682 core-prim . fxarithmetic-shift-left) (g$3456$23681 core-prim . fxarithmetic-shift) (g$3456$23680 core-prim . fxand) (g$3456$23679 core-prim . fx>?) (g$3456$23678 core-prim . fx>=?) (g$3456$23677 core-prim . fx=?) (g$3456$23676 core-prim . fx<?) (g$3456$23675 core-prim . fx<=?) (g$3456$23674 core-prim . fx-/carry) (g$3456$23673 core-prim . fx-) (g$3456$23672 core-prim . fx+/carry) (g$3456$23671 core-prim . fx+) (g$3456$23670 core-prim . fx*/carry) (g$3456$23669 core-prim . fx*) (g$3456$23668 core-prim . greatest-fixnum) (g$3456$23667 core-prim . least-fixnum) (g$3456$23666 core-prim . fixnum-width) (g$3456$23665 core-prim . fixnum?) (g$3456$23664 core-prim . bitwise-rotate-bit-field) (g$3456$23663 core-prim . bitwise-reverse-bit-field) (g$3456$23662 core-prim . bitwise-length) (g$3456$23661 core-prim . bitwise-if) (g$3456$23660 core-prim . bitwise-first-bit-set) (g$3456$23659 core-prim . bitwise-copy-bit-field) (g$3456$23658 core-prim . bitwise-copy-bit) (g$3456$23657 core-prim . bitwise-bit-set?) (g$3456$23656 core-prim . bitwise-bit-field) (g$3456$23655 core-prim . bitwise-bit-count) (g$3456$23654 core-prim . bitwise-xor) (g$3456$23653 core-prim . bitwise-ior) (g$3456$23652 core-prim . bitwise-and) (g$3456$23651 core-prim . bitwise-not) (g$3456$23650 core-prim . bitwise-arithmetic-shift-right) (g$3456$23649 core-prim . bitwise-arithmetic-shift-left) (g$3456$23648 core-prim . bitwise-arithmetic-shift) (g$3456$23647 core-prim . zero?) (g$3456$23646 core-prim . vector?) (g$3456$23645 core-prim . vector-set!) (g$3456$23644 core-prim . vector-ref) (g$3456$23643 core-prim . vector-map) (g$3456$23642 core-prim . vector-length) (g$3456$23641 core-prim . vector-for-each) (g$3456$23640 core-prim . vector-fill!) (g$3456$23639 core-prim . vector->list) (g$3456$23638 core-prim . vector) (g$3456$23637 core-prim . values) (g$3456$23636 core-prim . truncate) (g$3456$23635 core-prim . tan) (g$3456$23634 core-prim . symbol?) (g$3456$23633 core-prim . symbol=?) (g$3456$23632 core-prim . symbol->string) (g$3456$23631 core-prim . substring) (g$3456$23630 core-prim . string?) (g$3456$23629 core-prim . string>?) (g$3456$23628 core-prim . string>=?) (g$3456$23627 core-prim . string=?) (g$3456$23626 core-prim . string<?) (g$3456$23625 core-prim . string<=?) (g$3456$23624 core-prim . string-ref) (g$3456$23623 core-prim . string-length) (g$3456$23622 core-prim . string-for-each) (g$3456$23621 core-prim . string-copy) (g$3456$23620 core-prim . string-append) (g$3456$23619 core-prim . string->symbol) (g$3456$23618 core-prim . string->number) (g$3456$23617 core-prim . string->list) (g$3456$23616 core-prim . string) (g$3456$23615 core-prim . sqrt) (g$3456$23614 core-prim . sin) (g$3456$23613 core-prim . round) (g$3456$23612 core-prim . reverse) (g$3456$23611 core-prim . real?) (g$3456$23610 core-prim . real-valued?) (g$3456$23609 core-prim . real-part) (g$3456$23608 core-prim . rationalize) (g$3456$23607 core-prim . rational?) (g$3456$23606 core-prim . rational-valued?) (g$3456$23605 core-prim . procedure?) (g$3456$23604 core-prim . positive?) (g$3456$23603 core-prim . pair?) (g$3456$23602 core-prim . odd?) (g$3456$23601 core-prim . numerator) (g$3456$23600 core-prim . number?) (g$3456$23599 core-prim . number->string) (g$3456$23598 core-prim . null?) (g$3456$23597 core-prim . not) (g$3456$23596 core-prim . negative?) (g$3456$23595 core-prim . nan?) (g$3456$23594 core-prim . min) (g$3456$23593 core-prim . max) (g$3456$23592 core-prim . map) (g$3456$23591 core-prim . make-vector) (g$3456$23590 core-prim . make-string) (g$3456$23589 core-prim . make-rectangular) (g$3456$23588 core-prim . make-polar) (g$3456$23587 core-prim . magnitude) (g$3456$23586 core-prim . log) (g$3456$23585 core-prim . list?) (g$3456$23584 core-prim . list-tail) (g$3456$23583 core-prim . list-ref) (g$3456$23582 core-prim . list->vector) (g$3456$23581 core-prim . list->string) (g$3456$23580 core-prim . list) (g$3456$23579 core-prim . length) (g$3456$23578 core-prim . lcm) (g$3456$23577 core-prim . integer?) (g$3456$23576 core-prim . integer-valued?) (g$3456$23575 core-prim . integer->char) (g$3456$23574 core-prim . infinite?) (g$3456$23573 core-prim . inexact?) (g$3456$23572 core-prim . inexact) (g$3456$23571 core-prim . imag-part) (g$3456$23570 core-prim . gcd) (g$3456$23569 core-prim . for-each) (g$3456$23568 core-prim . floor) (g$3456$23567 core-prim . finite?) (g$3456$23566 core-prim . expt) (g$3456$23565 core-prim . exp) (g$3456$23564 core-prim . exact?) (g$3456$23563 core-prim . exact-integer-sqrt) (g$3456$23562 core-prim . exact) (g$3456$23561 core-prim . even?) (g$3456$23560 core-prim . error) (g$3456$23559 core-prim . eqv?) (g$3456$23558 core-prim . equal?) (g$3456$23557 core-prim . eq?) (g$3456$23556 core-prim . dynamic-wind) (g$3456$23555 core-prim . div0-and-mod0) (g$3456$23554 core-prim . mod0) (g$3456$23553 core-prim . div0) (g$3456$23552 core-prim . div-and-mod) (g$3456$23551 core-prim . mod) (g$3456$23550 core-prim . div) (g$3456$23549 core-prim . denominator) (g$3456$23548 core-prim . cos) (g$3456$23547 core-prim . cons) (g$3456$23546 core-prim . complex?) (g$3456$23545 core-prim . char?) (g$3456$23544 core-prim . char>?) (g$3456$23543 core-prim . char>=?) (g$3456$23542 core-prim . char=?) (g$3456$23541 core-prim . char<?) (g$3456$23540 core-prim . char<=?) (g$3456$23539 core-prim . char->integer) (g$3456$23538 core-prim . ceiling) (g$3456$23537 core-prim . call-with-values) (g$3456$23536 core-prim . call/cc) (g$3456$23535 core-prim . call-with-current-continuation) (g$3456$23534 core-prim . cddddr) (g$3456$23533 core-prim . cdddar) (g$3456$23532 core-prim . cddadr) (g$3456$23531 core-prim . cddaar) (g$3456$23530 core-prim . cdaddr) (g$3456$23529 core-prim . cdadar) (g$3456$23528 core-prim . cdaadr) (g$3456$23527 core-prim . cdaaar) (g$3456$23526 core-prim . cadddr) (g$3456$23525 core-prim . caddar) (g$3456$23524 core-prim . cadadr) (g$3456$23523 core-prim . cadaar) (g$3456$23522 core-prim . caaddr) (g$3456$23521 core-prim . caadar) (g$3456$23520 core-prim . caaadr) (g$3456$23519 core-prim . caaaar) (g$3456$23518 core-prim . cdddr) (g$3456$23517 core-prim . cddar) (g$3456$23516 core-prim . cdadr) (g$3456$23515 core-prim . cdaar) (g$3456$23514 core-prim . caddr) (g$3456$23513 core-prim . cadar) (g$3456$23512 core-prim . caadr) (g$3456$23511 core-prim . caaar) (g$3456$23510 core-prim . cddr) (g$3456$23509 core-prim . cdar) (g$3456$23508 core-prim . cadr) (g$3456$23507 core-prim . caar) (g$3456$23506 core-prim . cdr) (g$3456$23505 core-prim . car) (g$3456$23504 core-prim . boolean?) (g$3456$23503 core-prim . boolean=?) (g$3456$23502 core-prim . atan) (g$3456$23501 core-prim . assertion-violation) (g$3456$23500 core-prim . asin) (g$3456$23499 core-prim . apply) (g$3456$23498 core-prim . append) (g$3456$23497 core-prim . angle) (g$3456$23496 core-prim . acos) (g$3456$23495 core-prim . abs) (g$3456$23494 core-prim . /) (g$3456$23493 core-prim . *) (g$3456$23492 core-prim . -) (g$3456$23491 core-prim . +) (g$3456$23490 core-prim . >=) (g$3456$23489 core-prim . >) (g$3456$23488 core-prim . =) (g$3456$23487 core-prim . <=) (g$3456$23486 core-prim . <) (g$3456$23485 core-prim . let*-values) (g$3456$23484 $core-rtd &no-nans-rtd &no-nans-rcd) (g$3456$23483 $core-rtd &no-infinities-rtd &no-infinities-rcd) (g$3456$23482 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (g$3456$23481 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (g$3456$23480 $core-rtd &i/o-port-rtd &i/o-port-rcd) (g$3456$23479 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (g$3456$23478 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (g$3456$23477 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (g$3456$23476 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (g$3456$23475 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (g$3456$23474 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (g$3456$23473 $core-rtd &i/o-write-rtd &i/o-write-rcd) (g$3456$23472 $core-rtd &i/o-read-rtd &i/o-read-rcd) (g$3456$23471 $core-rtd &i/o-rtd &i/o-rcd) (g$3456$23470 $core-rtd &undefined-rtd &undefined-rcd) (g$3456$23469 $core-rtd &syntax-rtd &syntax-rcd) (g$3456$23468 $core-rtd &lexical-rtd &lexical-rcd) (g$3456$23467 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (g$3456$23466 $core-rtd &non-continuable-rtd &non-continuable-rcd) (g$3456$23465 $core-rtd &who-rtd &who-rcd) (g$3456$23464 $core-rtd &irritants-rtd &irritants-rcd) (g$3456$23463 $core-rtd &assertion-rtd &assertion-rcd) (g$3456$23462 $core-rtd &violation-rtd &violation-rcd) (g$3456$23461 $core-rtd &error-rtd &error-rcd) (g$3456$23460 $core-rtd &serious-rtd &serious-rcd) (g$3456$23459 $core-rtd &warning-rtd &warning-rcd) (g$3456$23458 $core-rtd &message-rtd &message-rcd) (g$3456$23457 $core-rtd &condition-rtd &condition-rcd) (g$3456$23456 macro . define-condition-type) (g$3456$23455 macro . define-enumeration) (g$3456$23454 macro . define-record-type) (g$3456$23453 macro . parent-rtd) (g$3456$23452 macro . nongenerative) (g$3456$23451 macro . opaque) (g$3456$23450 macro . sealed) (g$3456$23449 macro . protocol) (g$3456$23448 macro . parent) (g$3456$23447 macro . immutable) (g$3456$23446 macro . mutable) (g$3456$23445 macro . fields) (g$3456$23444 macro . error-handling-mode) (g$3456$23443 macro . file-options) (g$3456$23442 macro . buffer-mode) (g$3456$23441 macro . eol-style) (g$3456$23440 macro . guard) (g$3456$23439 macro . trace-define) (g$3456$23438 macro . trace-lambda) (g$3456$23437 macro . unsyntax-splicing) (g$3456$23436 macro . unsyntax) (g$3456$23435 macro . unquote-splicing) (g$3456$23434 macro . unquote) (g$3456$23433 macro . _) (g$3456$23432 macro . else) (g$3456$23431 macro . =>) (g$3456$23430 macro . |...|) (g$3456$23429 macro . assert) (g$3456$23428 macro . endianness) (g$3456$23427 macro . delay) (g$3456$23426 macro . time) (g$3456$23425 macro . or) (g$3456$23424 macro . and) (g$3456$23423 macro . do) (g$3456$23422 macro . cond) (g$3456$23421 macro . let*) (g$3456$23420 macro . let) (g$3456$23419 macro . identifier-syntax) (g$3456$23418 macro . with-syntax) (g$3456$23417 macro . quasisyntax) (g$3456$23416 macro . quasiquote) (g$3456$23415 macro . syntax-rules) (g$3456$23414 macro . include) (g$3456$23413 macro . define-struct) (g$3456$23412 core-macro . record-constructor-descriptor) (g$3456$23411 core-macro . record-type-descriptor) (g$3456$23410 core-macro . let-values) (g$3456$23409 core-macro . case) (g$3456$23408 core-macro . parameterize) (g$3456$23407 core-macro . unless) (g$3456$23406 core-macro . when) (g$3456$23405 core-macro . if) (g$3456$23404 core-macro . letrec*) (g$3456$23403 core-macro . letrec) (g$3456$23402 core-macro . type-descriptor) (g$3456$23401 core-macro . case-lambda) (g$3456$23400 core-macro . lambda) (g$3456$23399 core-macro . syntax) (g$3456$23398 core-macro . syntax-case) (g$3456$23397 core-macro . quote) (g$3456$23396 core-macro . foreign-call) (g$3456$23395 letrec-syntax) (g$3456$23394 let-syntax) (g$3456$23393 set!) (g$3456$23392 import) (g$3456$23391 begin) (g$3456$23390 module) (g$3456$23389 define-syntax) (g$3456$23388 define)) values values '#f) (g$3456$12843 'g$3456$24131 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g$3456$24097) (eval-core . g$3456$24096) (set-symbol-value! . g$3456$24095) (symbol-value . g$3456$24094) (gensym . g$3456$24093) (void . g$3456$24092)) '() values values '#f))


(begin (define g$3456$23386 '#f) ((lambda (g$3456$23370) (begin (set! g$3456$23370 (lambda (g$3456$23372) ((lambda (g$3456$23374) (g$3456$23180 g$3456$23374)) (with-input-from-file g$3456$23372 (lambda () (letrec ((g$3456$23376 (lambda () ((lambda (g$3456$23378) (if (eof-object? g$3456$23378) '() (cons g$3456$23378 (g$3456$23376)))) (read))))) (g$3456$23376))))))) (begin (set! g$3456$23386 g$3456$23370) (display '"r6rs psyntax ready\n") ((lambda (g$3456$23380) (begin (if (= (length g$3456$23380) '2) (void) (begin (display '"provide a script name argument\n") (exit '17))) ((lambda (g$3456$23382 g$3456$23383) (g$3456$23370 (car g$3456$23383))) (car g$3456$23380) (cdr g$3456$23380)))) (command-line))))) '#f))


