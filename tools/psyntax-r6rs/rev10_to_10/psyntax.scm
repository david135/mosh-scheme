;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2812@read-annotated G2814@annotation-stripped G2816@annotation? G2818@annotation-source G281a@annotation-expression G281c@scm->fasl G281e@fasl-save G2820@fasl-load G2822@serialize-library G2824@load-serialized-library G2826@make-record-printer G2828@compile-core G282a@read-library-source-file G282c@make-parameter G2898@file-options-spec) (begin (set! G2812@read-annotated read) (set! G2814@annotation-stripped (lambda (G2899@x) (G281a@annotation-expression G2899@x))) (set! G2816@annotation? (lambda (G289b@x) (source-info G289b@x))) (set! G2818@annotation-source (lambda (G289d@x) (source-info G289d@x))) (set! G281a@annotation-expression (lambda (G289f@x) (if (pair? G289f@x) (cons (car G289f@x) (cdr G289f@x)) (display '"line:46\n")))) (set! G281c@scm->fasl (lambda (G28a1@filename) (string-append G28a1@filename '".fasl"))) (set! G281e@fasl-save (lambda (G28a3@filename G28a4@obj) (call-with-port (open-file-output-port G28a3@filename) (lambda (G28a7@port) ((symbol-value 'fasl-write!) G28a4@obj G28a7@port))))) (set! G2820@fasl-load (lambda (G28a9@filename) (call-with-port (open-file-input-port G28a9@filename) (symbol-value 'fasl-read!)))) (set! G2822@serialize-library (lambda (G28ab@filename G28ac@obj) (begin (format '#t '"serialize-library ~a\n..." G28ab@filename) ((lambda (G28af@fasl-file) (begin (if (file-exists? G28af@fasl-file) (delete-file G28af@fasl-file) (void)) ((call/cc (lambda (G28b3@G28b1) (lambda () (with-exception-handler (lambda (G28b5@c) ((call/cc (lambda (G28b7@G28b2) (G28b3@G28b1 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28ab@filename) (if (file-exists? G28af@fasl-file) (delete-file G28af@fasl-file) (void)) '#f) (G28b7@G28b2 (lambda () (raise-continuable G28b5@c)))))))))) (lambda () (begin (G281e@fasl-save G28af@fasl-file G28ac@obj) (display '"OK\n")))))))))) (G281c@scm->fasl G28ab@filename))))) (set! G2824@load-serialized-library (lambda (G28b9@filename G28ba@obj) ((lambda (G28bd@fasl-file) (if (and (file-exists? G28bd@fasl-file) ((symbol-value 'file-newer?) G28bd@fasl-file G28b9@filename)) ((lambda (G28bf@expanded2core) ((lambda (G28c1@code) ((lambda (G28c3@pivot) ((lambda (G28c5@visit) ((lambda (G28c7@visit-proc) ((lambda () (begin (set-car! G28c3@pivot G28c7@visit-proc) ((lambda (G28c9@pivot) ((lambda (G28cb@invoke) ((lambda () (begin (set-car! G28c9@pivot (lambda () (eval-core G28cb@invoke))) (apply G28ba@obj G28c1@code))))) (G28bf@expanded2core (car G28c9@pivot)))) (cdr G28c3@pivot)) '#t)))) (lambda () (eval-core G28c5@visit)))) (G28bf@expanded2core (car G28c3@pivot)))) (cddddr (cddddr G28c1@code)))) (G2820@fasl-load G28bd@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G281c@scm->fasl G28b9@filename)))) (set! G2826@make-record-printer (lambda (G28cd@name G28ce@printer) (lambda G28d1@x (begin (display '"record printer") (for-each display G28d1@x))))) (set! G2828@compile-core (lambda G28d3@x (apply error 'comile-core '"not implementated" G28d3@x))) (set! G282a@read-library-source-file (lambda (G28d5@file-name) (with-input-from-file G28d5@file-name G2812@read-annotated))) (set! G282c@make-parameter (lambda G28e5 ((lambda (G28e6) (if (= G28e6 '1) (apply (lambda (G28d7@x) (G282c@make-parameter G28d7@x (lambda (G28d9@x) G28d9@x))) G28e5) (if (= G28e6 '2) (apply (lambda (G28db@x G28dc@fender) ((lambda (G28df@x) (lambda G28e3 ((lambda (G28e4) (if (= G28e4 '0) (apply (lambda () G28df@x) G28e3) (if (= G28e4 '1) (apply (lambda (G28e1@v) (set! G28df@x (G28dc@fender G28e1@v))) G28e3) (error 'apply '"invalid arg count")))) (length G28e3)))) (G28dc@fender G28db@x))) G28e5) (error 'apply '"invalid arg count")))) (length G28e5)))) (set! G2898@file-options-spec (lambda (G28e7@x) G28e7@x)) (begin (set! G28f7@G2898@file-options-spec G2898@file-options-spec) (set! G28f6@G282c@make-parameter G282c@make-parameter) (set! G28f5@G282a@read-library-source-file G282a@read-library-source-file) (set! G28f4@G2828@compile-core G2828@compile-core) (set! G28f3@G2826@make-record-printer G2826@make-record-printer) (set! G28f2@G2824@load-serialized-library G2824@load-serialized-library) (set! G28f1@G2822@serialize-library G2822@serialize-library) (set! G28f0@G2820@fasl-load G2820@fasl-load) (set! G28ef@G281e@fasl-save G281e@fasl-save) (set! G28ee@G281c@scm->fasl G281c@scm->fasl) (set! G28ed@G281a@annotation-expression G281a@annotation-expression) (set! G28ec@G2818@annotation-source G2818@annotation-source) (set! G28eb@G2816@annotation? G2816@annotation?) (set! G28ea@G2814@annotation-stripped G2814@annotation-stripped) (set! G28e9@G2812@read-annotated G2812@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28fc@current-primitive-locations G28fe@mutable? G2900@rewriter G2902@expanded->core G2904@compile-core-expr G2906@pretty-print G2908@compile-core-expr-to-port) (begin (set! G28fc@current-primitive-locations (G28f6@G282c@make-parameter (lambda (G2909@x) '#f) (lambda (G290b@p) G290b@p))) (set! G28fe@mutable? (lambda (G290d@x) (or (pair? G290d@x) (vector? G290d@x) (hashtable? G290d@x)))) (set! G2900@rewriter (lambda (G290f@quote-hack?) ((lambda (G2912@f) (begin (set! G2912@f (lambda (G2913@x) (if (pair? G2913@x) ((lambda (G2915@t) (if (memv G2915@t '(quote)) (if (and G290f@quote-hack? (G28fe@mutable? (cadr G2913@x))) ((lambda (G2917@g) (begin (set-symbol-value! G2917@g (cadr G2913@x)) G2917@g)) (gensym)) G2913@x) (if (memv G2915@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2919@x) (cons (car G2919@x) (map G2912@f (cdr G2919@x)))) (cdr G2913@x))) (if (memv G2915@t '(lambda)) (cons* 'lambda (cadr G2913@x) (map G2912@f (cddr G2913@x))) (if (memv G2915@t '(letrec)) ((lambda (G291b@bindings G291c@body*) ((lambda (G291f@lhs* G2920@rhs*) (cons* 'letrec (map list G291f@lhs* (map G2912@f G2920@rhs*)) (map G2912@f G291c@body*))) (map car G291b@bindings) (map cadr G291b@bindings))) (cadr G2913@x) (cddr G2913@x)) (if (memv G2915@t '(letrec*)) ((lambda (G2923@bindings G2924@body*) ((lambda (G2927@lhs* G2928@rhs*) (cons* 'letrec* (map list G2927@lhs* (map G2912@f G2928@rhs*)) (map G2912@f G2924@body*))) (map car G2923@bindings) (map cadr G2923@bindings))) (cadr G2913@x) (cddr G2913@x)) (if (memv G2915@t '(library-letrec*)) ((lambda (G292b@name G292c@x) ((lambda (G292f@bindings G2930@body*) ((lambda (G2933@lhs* G2934@lhs** G2935@rhs*) (cons* 'library-letrec* G292b@name (map list G2933@lhs* G2934@lhs** (map G2912@f G2935@rhs*)) (map G2912@f G2930@body*))) (map car G292f@bindings) (map cadr G292f@bindings) (map caddr G292f@bindings))) (cadr G292c@x) (cddr G292c@x))) (cadr G2913@x) (cdr G2913@x)) (if (memv G2915@t '(begin)) (cons 'begin (map G2912@f (cdr G2913@x))) (if (memv G2915@t '(set!)) (list 'set! (cadr G2913@x) (G2912@f (caddr G2913@x))) (if (memv G2915@t '(primitive)) ((lambda (G2939@op) ((lambda (G293b@t) (if G293b@t ((lambda (G293d@loc) G293d@loc) G293b@t) G2939@op)) ((G28fc@current-primitive-locations) G2939@op))) (cadr G2913@x)) (if (memv G2915@t '(define)) G2913@x (if (list? G2913@x) (map G2912@f G2913@x) (error 'rewrite '"invalid form ~s ~s" G2913@x (list? G2913@x)))))))))))))) (car G2913@x)) G2913@x))) G2912@f)) '#f))) (set! G2902@expanded->core (lambda (G293f@x) ((G2900@rewriter '#t) G293f@x))) (set! G2904@compile-core-expr (lambda (G2941@x) ((G2900@rewriter '#f) G2941@x))) (set! G2906@pretty-print write) (set! G2908@compile-core-expr-to-port (lambda (G2943@x G2944@p) (G2906@pretty-print ((G2900@rewriter '#f) G2943@x) G2944@p))) (begin (set! G294d@G2908@compile-core-expr-to-port G2908@compile-core-expr-to-port) (set! G294c@G2906@pretty-print G2906@pretty-print) (set! G294b@G2904@compile-core-expr G2904@compile-core-expr) (set! G294a@G2902@expanded->core G2902@expanded->core) (set! G2949@G2900@rewriter G2900@rewriter) (set! G2948@G28fe@mutable? G28fe@mutable?) (set! G2947@G28fc@current-primitive-locations G28fc@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29a3@make-collection G29a5@current-library-collection G29ab@G29a6 G29ad@G29a8 G29af@G29a7 G29b2@library? G29b4@make-library G29b6@library-id G29b8@library-name G29ba@library-version G29bc@library-imp* G29be@library-vis* G29c0@library-inv* G29c2@library-subst G29c4@library-env G29c6@library-visit-state G29c8@library-invoke-state G29ca@library-visit-code G29cc@library-invoke-code G29ce@library-visible? G29d0@library-source-file-name G29d2@set-library-id! G29d4@set-library-name! G29d6@set-library-version! G29d8@set-library-imp*! G29da@set-library-vis*! G29dc@set-library-inv*! G29de@set-library-subst! G29e0@set-library-env! G29e2@set-library-visit-state! G29e4@set-library-invoke-state! G29e6@set-library-visit-code! G29e8@set-library-invoke-code! G29ea@set-library-visible?! G29ec@set-library-source-file-name! G29ee@rp G29f0@find-dependencies G29f2@find-library-by G29f4@library-path G29f6@library-extensions G29f8@library-name->file-name G29fa@file-locator G29fc@serialize-all G29fe@current-precompiled-library-loader G2a00@try-load-from-file G2a02@library-loader G2a04@current-library-expander G2a06@external-pending-libraries G2a08@find-external-library G2a0a@find-library-by-name G2a0c@library-exists? G2a0e@find-library-by-spec/die G2a10@label->binding-table G2a12@install-library-record G2a14@install-library G2a16@imported-label->binding G2a18@invoke-library G2a1a@visit-library G2a1c@invoke-library-by-spec G2a1e@installed-libraries G2a20@library-spec) (begin (set! G29a3@make-collection (lambda () ((lambda (G2a21@set) ((lambda (G2a24@set-cons) (begin (set! G2a24@set-cons (lambda (G2a29@x G2a2a@ls) (if (memq G2a29@x G2a2a@ls) G2a2a@ls (cons G2a29@x G2a2a@ls)))) (lambda G2a27 ((lambda (G2a28) (if (= G2a28 '0) (apply (lambda () G2a21@set) G2a27) (if (= G2a28 '1) (apply (lambda (G2a25@x) (set! G2a21@set (G2a24@set-cons G2a25@x G2a21@set))) G2a27) (error 'apply '"invalid arg count")))) (length G2a27))))) '#f)) '()))) (set! G29a5@current-library-collection (G28f6@G282c@make-parameter (G29a3@make-collection) (lambda (G2a2d@x) (begin (if (not (procedure? G2a2d@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a2d@x) (void)) G2a2d@x)))) (set! G29ab@G29a6 (make-record-type-descriptor 'library '#f 'G29a9 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29ad@G29a8 '#f) (set! G29af@G29a7 (make-record-constructor-descriptor G29ab@G29a6 '#f G29ad@G29a8)) (set! G29b2@library? (record-predicate G29ab@G29a6)) (set! G29b4@make-library (record-constructor G29af@G29a7)) (set! G29b6@library-id (record-accessor G29ab@G29a6 '0)) (set! G29b8@library-name (record-accessor G29ab@G29a6 '1)) (set! G29ba@library-version (record-accessor G29ab@G29a6 '2)) (set! G29bc@library-imp* (record-accessor G29ab@G29a6 '3)) (set! G29be@library-vis* (record-accessor G29ab@G29a6 '4)) (set! G29c0@library-inv* (record-accessor G29ab@G29a6 '5)) (set! G29c2@library-subst (record-accessor G29ab@G29a6 '6)) (set! G29c4@library-env (record-accessor G29ab@G29a6 '7)) (set! G29c6@library-visit-state (record-accessor G29ab@G29a6 '8)) (set! G29c8@library-invoke-state (record-accessor G29ab@G29a6 '9)) (set! G29ca@library-visit-code (record-accessor G29ab@G29a6 '10)) (set! G29cc@library-invoke-code (record-accessor G29ab@G29a6 '11)) (set! G29ce@library-visible? (record-accessor G29ab@G29a6 '12)) (set! G29d0@library-source-file-name (record-accessor G29ab@G29a6 '13)) (set! G29d2@set-library-id! (record-mutator G29ab@G29a6 '0)) (set! G29d4@set-library-name! (record-mutator G29ab@G29a6 '1)) (set! G29d6@set-library-version! (record-mutator G29ab@G29a6 '2)) (set! G29d8@set-library-imp*! (record-mutator G29ab@G29a6 '3)) (set! G29da@set-library-vis*! (record-mutator G29ab@G29a6 '4)) (set! G29dc@set-library-inv*! (record-mutator G29ab@G29a6 '5)) (set! G29de@set-library-subst! (record-mutator G29ab@G29a6 '6)) (set! G29e0@set-library-env! (record-mutator G29ab@G29a6 '7)) (set! G29e2@set-library-visit-state! (record-mutator G29ab@G29a6 '8)) (set! G29e4@set-library-invoke-state! (record-mutator G29ab@G29a6 '9)) (set! G29e6@set-library-visit-code! (record-mutator G29ab@G29a6 '10)) (set! G29e8@set-library-invoke-code! (record-mutator G29ab@G29a6 '11)) (set! G29ea@set-library-visible?! (record-mutator G29ab@G29a6 '12)) (set! G29ec@set-library-source-file-name! (record-mutator G29ab@G29a6 '13)) (set! G29ee@rp (G28f3@G2826@make-record-printer 'library (lambda (G2a2f@x G2a30@p G2a31@wr) (begin (if (not (G29b2@library? G2a2f@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29ba@library-version G2a2f@x)) (G29b8@library-name G2a2f@x) (append (G29b8@library-name G2a2f@x) (list (G29ba@library-version G2a2f@x))))) G2a30@p))))) (set! G29f0@find-dependencies (lambda (G2a35@ls) (if (null? G2a35@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29f2@find-library-by (lambda (G2a37@pred) ((letrec ((G2a39@f (lambda (G2a3b@ls) (if (null? G2a3b@ls) '#f (if (G2a37@pred (car G2a3b@ls)) (car G2a3b@ls) (G2a39@f (cdr G2a3b@ls))))))) G2a39@f) ((G29a5@current-library-collection))))) (set! G29f4@library-path (G28f6@G282c@make-parameter '(".") (lambda (G2a3d@x) (if (and (list? G2a3d@x) (for-all string? G2a3d@x)) (map (lambda (G2a3f@x) G2a3f@x) G2a3d@x) (assertion-violation 'library-path '"not a list of strings" G2a3d@x))))) (set! G29f6@library-extensions (G28f6@G282c@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a41@x) (if (and (list? G2a41@x) (for-all string? G2a41@x)) (map (lambda (G2a43@x) G2a43@x) G2a41@x) (assertion-violation 'library-extensions '"not a list of strings" G2a41@x))))) (set! G29f8@library-name->file-name (lambda (G2a45@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a49@G2a47 G2a4a@G2a48) ((lambda (G2a4d@extract G2a4e@p) ((lambda (G2a52@display-hex) (begin (set! G2a52@display-hex (lambda (G2a5b@n) (if (<= '0 G2a5b@n '9) (display G2a5b@n G2a4e@p) (display (integer->char (+ (char->integer '#\A) (- G2a5b@n '10))) G2a4e@p)))) (begin ((letrec ((G2a53@f (lambda (G2a55@ls) (if (not (null? G2a55@ls)) (begin (display '"/" G2a4e@p) (for-each (lambda (G2a57@c) (if (or (char<=? '#\a G2a57@c '#\z) (char<=? '#\A G2a57@c '#\Z) (char<=? '#\0 G2a57@c '#\9) (memv G2a57@c '(#\- #\. #\_ #\~))) (display G2a57@c G2a4e@p) (begin (display '"%" G2a4e@p) ((lambda (G2a59@n) (begin (G2a52@display-hex (quotient G2a59@n '16)) (G2a52@display-hex (remainder G2a59@n '16)))) (char->integer G2a57@c))))) (string->list (symbol->string (car G2a55@ls)))) (G2a53@f (cdr G2a55@ls))) (void))))) G2a53@f) G2a45@x) (G2a4d@extract)))) '#f)) G2a4a@G2a48 G2a49@G2a47))))) (set! G29fa@file-locator (G28f6@G282c@make-parameter (lambda (G2a5d@x) ((lambda (G2a5f@str) ((letrec ((G2a61@f (lambda (G2a63@ls G2a64@exts G2a65@failed-list) (if (null? G2a63@ls) ((lambda () ((lambda (G2a71@G2a6c G2a73@G2a6e G2a75@G2a6d G2a78@G2a6b G2a7a@make-library-resolution-condition G2a7c@G2a69 G2a7e@G2a6a G2a80@library-resolution-condition? G2a82@condition-library G2a84@condition-files) (begin (set! G2a71@G2a6c (make-record-type-descriptor '&library-resolution G4c0c@G495d@&condition-rtd 'G2a6f '#f '#f '#((immutable library) (immutable files)))) (set! G2a73@G2a6e '#f) (set! G2a75@G2a6d (make-record-constructor-descriptor G2a71@G2a6c G4c0d@G495f@&condition-rcd G2a73@G2a6e)) (set! G2a78@G2a6b (record-predicate G2a71@G2a6c)) (set! G2a7a@make-library-resolution-condition (record-constructor G2a75@G2a6d)) (set! G2a7c@G2a69 (record-accessor G2a71@G2a6c '0)) (set! G2a7e@G2a6a (record-accessor G2a71@G2a6c '1)) (set! G2a80@library-resolution-condition? (condition-predicate G2a71@G2a6c)) (set! G2a82@condition-library (condition-accessor G2a71@G2a6c G2a7c@G2a69)) (set! G2a84@condition-files (condition-accessor G2a71@G2a6c G2a7e@G2a6a)) (raise (condition (G4c2c@G49f5@make-error) (G4c4e@G4a4f@make-who-condition 'expander) (G4c12@G49b2@make-message-condition '"cannot locate library in library-path") (G2a7a@make-library-resolution-condition G2a5d@x (reverse G2a65@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a64@exts) (G2a61@f (cdr G2a63@ls) (G29f6@library-extensions) G2a65@failed-list) ((lambda (G2a85@name) (if (file-exists? G2a85@name) G2a85@name (G2a61@f G2a63@ls (cdr G2a64@exts) (cons G2a85@name G2a65@failed-list)))) (string-append (car G2a63@ls) G2a5f@str (car G2a64@exts)))))))) G2a61@f) (G29f4@library-path) (G29f6@library-extensions) '())) (G29f8@library-name->file-name G2a5d@x))) (lambda (G2a87@f) (if (procedure? G2a87@f) G2a87@f (assertion-violation 'file-locator '"not a procedure" G2a87@f))))) (set! G29fc@serialize-all (lambda (G2a89@serialize G2a8a@compile) ((lambda (G2a8e@library-desc) (begin (set! G2a8e@library-desc (lambda (G2a91@x) (list (G29b6@library-id G2a91@x) (G29b8@library-name G2a91@x)))) (for-each (lambda (G2a8f@x) (if (G29d0@library-source-file-name G2a8f@x) (G2a89@serialize (G29d0@library-source-file-name G2a8f@x) (list (G29b6@library-id G2a8f@x) (G29b8@library-name G2a8f@x) (G29ba@library-version G2a8f@x) (map G2a8e@library-desc (G29bc@library-imp* G2a8f@x)) (map G2a8e@library-desc (G29be@library-vis* G2a8f@x)) (map G2a8e@library-desc (G29c0@library-inv* G2a8f@x)) (G29c2@library-subst G2a8f@x) (G29c4@library-env G2a8f@x) (G2a8a@compile (G29ca@library-visit-code G2a8f@x)) (G2a8a@compile (G29cc@library-invoke-code G2a8f@x)) (G29ce@library-visible? G2a8f@x))) (void))) ((G29a5@current-library-collection))))) '#f))) (set! G29fe@current-precompiled-library-loader (G28f6@G282c@make-parameter (lambda (G2a93@filename G2a94@sk) '#f))) (set! G2a00@try-load-from-file (lambda (G2a97@filename) ((G29fe@current-precompiled-library-loader) G2a97@filename (lambda G2abd ((lambda (G2abe) (if (= G2abe '11) (apply (lambda (G2a99@id G2a9a@name G2a9b@ver G2a9c@imp* G2a9d@vis* G2a9e@inv* G2a9f@exp-subst G2aa0@exp-env G2aa1@visit-proc G2aa2@invoke-proc G2aa3@visible?) ((letrec ((G2aaf@f (lambda (G2ab1@deps) (if (null? G2ab1@deps) (begin (G2a14@install-library G2a99@id G2a9a@name G2a9b@ver G2a9c@imp* G2a9d@vis* G2a9e@inv* G2a9f@exp-subst G2aa0@exp-env G2aa1@visit-proc G2aa2@invoke-proc '#f '#f G2aa3@visible? '#f) '#t) ((lambda (G2ab3@d) ((lambda (G2ab5@label G2ab6@dname) ((lambda (G2ab9@l) (if (and (G29b2@library? G2ab9@l) (eq? G2ab5@label (G29b6@library-id G2ab9@l))) (G2aaf@f (cdr G2ab1@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2a9a@name G2ab6@dname G2a97@filename G2ab9@l G2ab5@label (G29b6@library-id G2ab9@l)) '#f))) (G2a0a@find-library-by-name G2ab6@dname))) (car G2ab3@d) (cadr G2ab3@d))) (car G2ab1@deps)))))) G2aaf@f) (append G2a9c@imp* G2a9d@vis* G2a9e@inv*))) G2abd) (if (>= G2abe '0) (apply (lambda G2abb@others '#f) G2abd) (error 'apply '"invalid arg count")))) (length G2abd)))))) (set! G2a02@library-loader (G28f6@G282c@make-parameter (lambda (G2abf@x) ((lambda (G2ac1@file-name) (if (not G2ac1@file-name) (assertion-violation '#f '"cannot file library" G2abf@x) (or (G2a00@try-load-from-file G2ac1@file-name) ((G2a04@current-library-expander) (G28f5@G282a@read-library-source-file G2ac1@file-name) G2ac1@file-name (lambda (G2ac3@name) (if (not (fast-equal? G2ac3@name G2abf@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ac7@G2ac5 G2ac8@G2ac6) ((lambda (G2acb@e G2acc@p) (begin (display '"expected to find library " G2acc@p) (write G2abf@x G2acc@p) (display '" in file " G2acc@p) (display G2ac1@file-name G2acc@p) (display '", found " G2acc@p) (write G2ac3@name G2acc@p) (display '" instead" G2acc@p) (G2acb@e))) G2ac8@G2ac6 G2ac7@G2ac5)))) (void))))))) ((G29fa@file-locator) G2abf@x))) (lambda (G2acf@f) (if (procedure? G2acf@f) G2acf@f (assertion-violation 'library-locator '"not a procedure" G2acf@f))))) (set! G2a04@current-library-expander (G28f6@G282c@make-parameter (lambda (G2ad1@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ad3@f) (if (procedure? G2ad3@f) G2ad3@f (assertion-violation 'library-expander '"not a procedure" G2ad3@f))))) (set! G2a06@external-pending-libraries (G28f6@G282c@make-parameter '())) (set! G2a08@find-external-library (lambda (G2ad5@name) (begin (if (member G2ad5@name (G2a06@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ad5@name) (void)) ((lambda (G2ad9@G2ad7 G2ada@G2ad8) ((lambda (G2add@swap) (dynamic-wind G2add@swap (lambda () (begin ((G2a02@library-loader) G2ad5@name) (or (G29f2@find-library-by (lambda (G2adf@x) (fast-equal? (G29b8@library-name G2adf@x) G2ad5@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ad5@name)))) G2add@swap)) (lambda () ((lambda (G2ae1@t) (begin (G2ad9@G2ad7 G2ada@G2ad8) (set! G2ada@G2ad8 G2ae1@t))) (G2ad9@G2ad7))))) G2a06@external-pending-libraries (cons G2ad5@name (G2a06@external-pending-libraries)))))) (set! G2a0a@find-library-by-name (lambda (G2ae3@name) (or (G29f2@find-library-by (lambda (G2ae5@x) (fast-equal? (G29b8@library-name G2ae5@x) G2ae3@name))) (G2a08@find-external-library G2ae3@name)))) (set! G2a0c@library-exists? (lambda (G2ae7@name) (and (G29f2@find-library-by (lambda (G2ae9@x) (fast-equal? (G29b8@library-name G2ae9@x) G2ae7@name))) '#t))) (set! G2a0e@find-library-by-spec/die (lambda (G2aeb@spec) ((lambda (G2aed@id) (or (G29f2@find-library-by (lambda (G2aef@x) (eq? G2aed@id (G29b6@library-id G2aef@x)))) (assertion-violation '#f '"cannot find library with required spec" G2aeb@spec))) (car G2aeb@spec)))) (set! G2a10@label->binding-table (make-eq-hashtable)) (set! G2a12@install-library-record (lambda (G2af1@lib) (begin ((lambda (G2af3@exp-env) (for-each (lambda (G2af5@x) ((lambda (G2af7@label G2af8@binding) ((lambda (G2afb@binding) (hashtable-set! G2a10@label->binding-table G2af7@label G2afb@binding)) ((lambda (G2afd@t) (if (memv G2afd@t '(global)) (cons 'global (cons G2af1@lib (cdr G2af8@binding))) (if (memv G2afd@t '(global-macro)) (cons 'global-macro (cons G2af1@lib (cdr G2af8@binding))) (if (memv G2afd@t '(global-macro!)) (cons 'global-macro! (cons G2af1@lib (cdr G2af8@binding))) G2af8@binding)))) (car G2af8@binding)))) (car G2af5@x) (cdr G2af5@x))) G2af3@exp-env)) (G29c4@library-env G2af1@lib)) ((G29a5@current-library-collection) G2af1@lib)))) (set! G2a14@install-library (lambda (G2aff@id G2b00@name G2b01@ver G2b02@imp* G2b03@vis* G2b04@inv* G2b05@exp-subst G2b06@exp-env G2b07@visit-proc G2b08@invoke-proc G2b09@visit-code G2b0a@invoke-code G2b0b@visible? G2b0c@source-file-name) ((lambda (G2b1b@imp-lib* G2b1c@vis-lib* G2b1d@inv-lib*) (begin (if (not (and (symbol? G2aff@id) (list? G2b00@name) (list? G2b01@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2aff@id G2b00@name G2b01@ver) (void)) (if (G2a0c@library-exists? G2b00@name) (assertion-violation 'install-library '"library is already installed" G2b00@name) (void)) ((lambda (G2b21@lib) (G2a12@install-library-record G2b21@lib)) (G29b4@make-library G2aff@id G2b00@name G2b01@ver G2b1b@imp-lib* G2b1c@vis-lib* G2b1d@inv-lib* G2b05@exp-subst G2b06@exp-env G2b07@visit-proc G2b08@invoke-proc G2b09@visit-code G2b0a@invoke-code G2b0b@visible? G2b0c@source-file-name)))) (map G2a0e@find-library-by-spec/die G2b02@imp*) (map G2a0e@find-library-by-spec/die G2b03@vis*) (map G2a0e@find-library-by-spec/die G2b04@inv*)))) (set! G2a16@imported-label->binding (lambda (G2b23@lab) (hashtable-ref G2a10@label->binding-table G2b23@lab '#f))) (set! G2a18@invoke-library (lambda (G2b25@lib) ((lambda (G2b27@invoke) (if (procedure? G2b27@invoke) (begin (G29e4@set-library-invoke-state! G2b25@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b25@lib))) (for-each G2a18@invoke-library (G29c0@library-inv* G2b25@lib)) (G29e4@set-library-invoke-state! G2b25@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b25@lib))) (G2b27@invoke) (G29e4@set-library-invoke-state! G2b25@lib '#t)) (void))) (G29c8@library-invoke-state G2b25@lib)))) (set! G2a1a@visit-library (lambda (G2b29@lib) ((lambda (G2b2b@visit) (if (procedure? G2b2b@visit) (begin (G29e2@set-library-visit-state! G2b29@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b29@lib))) (for-each G2a18@invoke-library (G29be@library-vis* G2b29@lib)) (G29e2@set-library-visit-state! G2b29@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b29@lib))) (G2b2b@visit) (G29e2@set-library-visit-state! G2b29@lib '#t)) (void))) (G29c6@library-visit-state G2b29@lib)))) (set! G2a1c@invoke-library-by-spec (lambda (G2b2d@spec) (G2a18@invoke-library (G2a0e@find-library-by-spec/die G2b2d@spec)))) (set! G2a1e@installed-libraries (lambda G2b35 ((lambda (G2b36) (if (= G2b36 '1) (apply (lambda (G2b2f@all?) ((letrec ((G2b31@f (lambda (G2b33@ls) (if (null? G2b33@ls) '() (if (or G2b2f@all? (G29ce@library-visible? (car G2b33@ls))) (cons (car G2b33@ls) (G2b31@f (cdr G2b33@ls))) (G2b31@f (cdr G2b33@ls))))))) G2b31@f) ((G29a5@current-library-collection)))) G2b35) (if (= G2b36 '0) (apply (lambda () (G2a1e@installed-libraries '#f)) G2b35) (error 'apply '"invalid arg count")))) (length G2b35)))) (set! G2a20@library-spec (lambda (G2b37@x) (begin (if (not (G29b2@library? G2b37@x)) (assertion-violation 'library-spec '"not a library" G2b37@x) (void)) (list (G29b6@library-id G2b37@x) (G29b8@library-name G2b37@x) (G29ba@library-version G2b37@x))))) (begin (set! G2b75@G2a20@library-spec G2a20@library-spec) (set! G2b74@G2a1e@installed-libraries G2a1e@installed-libraries) (set! G2b73@G2a1c@invoke-library-by-spec G2a1c@invoke-library-by-spec) (set! G2b72@G2a1a@visit-library G2a1a@visit-library) (set! G2b71@G2a18@invoke-library G2a18@invoke-library) (set! G2b70@G2a16@imported-label->binding G2a16@imported-label->binding) (set! G2b6f@G2a14@install-library G2a14@install-library) (set! G2b6e@G2a12@install-library-record G2a12@install-library-record) (set! G2b6d@G2a10@label->binding-table G2a10@label->binding-table) (set! G2b6c@G2a0e@find-library-by-spec/die G2a0e@find-library-by-spec/die) (set! G2b6b@G2a0c@library-exists? G2a0c@library-exists?) (set! G2b6a@G2a0a@find-library-by-name G2a0a@find-library-by-name) (set! G2b69@G2a08@find-external-library G2a08@find-external-library) (set! G2b68@G2a06@external-pending-libraries G2a06@external-pending-libraries) (set! G2b67@G2a04@current-library-expander G2a04@current-library-expander) (set! G2b66@G2a02@library-loader G2a02@library-loader) (set! G2b65@G2a00@try-load-from-file G2a00@try-load-from-file) (set! G2b64@G29fe@current-precompiled-library-loader G29fe@current-precompiled-library-loader) (set! G2b63@G29fc@serialize-all G29fc@serialize-all) (set! G2b62@G29fa@file-locator G29fa@file-locator) (set! G2b61@G29f8@library-name->file-name G29f8@library-name->file-name) (set! G2b60@G29f6@library-extensions G29f6@library-extensions) (set! G2b5f@G29f4@library-path G29f4@library-path) (set! G2b5e@G29f2@find-library-by G29f2@find-library-by) (set! G2b5d@G29f0@find-dependencies G29f0@find-dependencies) (set! G2b5c@G29ee@rp G29ee@rp) (set! G2b5b@G29ec@set-library-source-file-name! G29ec@set-library-source-file-name!) (set! G2b5a@G29ea@set-library-visible?! G29ea@set-library-visible?!) (set! G2b59@G29e8@set-library-invoke-code! G29e8@set-library-invoke-code!) (set! G2b58@G29e6@set-library-visit-code! G29e6@set-library-visit-code!) (set! G2b57@G29e4@set-library-invoke-state! G29e4@set-library-invoke-state!) (set! G2b56@G29e2@set-library-visit-state! G29e2@set-library-visit-state!) (set! G2b55@G29e0@set-library-env! G29e0@set-library-env!) (set! G2b54@G29de@set-library-subst! G29de@set-library-subst!) (set! G2b53@G29dc@set-library-inv*! G29dc@set-library-inv*!) (set! G2b52@G29da@set-library-vis*! G29da@set-library-vis*!) (set! G2b51@G29d8@set-library-imp*! G29d8@set-library-imp*!) (set! G2b50@G29d6@set-library-version! G29d6@set-library-version!) (set! G2b4f@G29d4@set-library-name! G29d4@set-library-name!) (set! G2b4e@G29d2@set-library-id! G29d2@set-library-id!) (set! G2b4d@G29d0@library-source-file-name G29d0@library-source-file-name) (set! G2b4c@G29ce@library-visible? G29ce@library-visible?) (set! G2b4b@G29cc@library-invoke-code G29cc@library-invoke-code) (set! G2b4a@G29ca@library-visit-code G29ca@library-visit-code) (set! G2b49@G29c8@library-invoke-state G29c8@library-invoke-state) (set! G2b48@G29c6@library-visit-state G29c6@library-visit-state) (set! G2b47@G29c4@library-env G29c4@library-env) (set! G2b46@G29c2@library-subst G29c2@library-subst) (set! G2b45@G29c0@library-inv* G29c0@library-inv*) (set! G2b44@G29be@library-vis* G29be@library-vis*) (set! G2b43@G29bc@library-imp* G29bc@library-imp*) (set! G2b42@G29ba@library-version G29ba@library-version) (set! G2b41@G29b8@library-name G29b8@library-name) (set! G2b40@G29b6@library-id G29b6@library-id) (set! G2b3f@G29b4@make-library G29b4@make-library) (set! G2b3e@G29b2@library? G29b2@library?) (set! G2b3d@G29af@G29a7 G29af@G29a7) (set! G2b3c@G29ad@G29a8 G29ad@G29a8) (set! G2b3b@G29ab@G29a6 G29ab@G29a6) (set! G2b3a@G29a5@current-library-collection G29a5@current-library-collection) (set! G2b39@G29a3@make-collection G29a3@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b78@build-global-define G2bf2@build-lambda G2bf4@build-case-lambda G2bf6@build-let G2c28@build-sequence G2c2a@build-void G2c2c@build-letrec G2c2e@build-letrec* G2c30@build-library-letrec* G2c32@build-receive) (begin (set! G2b78@build-global-define (lambda (G2c33@x) (G2c2a@build-void))) (set! G2bf2@build-lambda (lambda (G2c35@ae G2c36@vars G2c37@exp) (list 'lambda G2c36@vars G2c37@exp))) (set! G2bf4@build-case-lambda (lambda (G2c3b@ae G2c3c@vars* G2c3d@exp*) ((lambda (G2c42@build-error G2c44@build-pred G2c46@build-apply G2c48@expand-case-lambda) (begin (set! G2c42@build-error (lambda (G2c77@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c44@build-pred (lambda (G2c61@ae G2c62@n G2c63@vars) (call-with-values (lambda () ((letrec ((G2c69@f (lambda (G2c6b@vars G2c6c@count) (if (pair? G2c6b@vars) (G2c69@f (cdr G2c6b@vars) (+ G2c6c@count '1)) (if (null? G2c6b@vars) (values G2c6c@count '=) (values G2c6c@count '>=)))))) G2c69@f) G2c63@vars '0)) (lambda (G2c6f@G2c67 G2c70@G2c68) ((lambda (G2c73@pred G2c74@count) (list (list 'primitive G2c73@pred) G2c62@n (list 'quote G2c74@count))) G2c70@G2c68 G2c6f@G2c67))))) (set! G2c46@build-apply (lambda (G2c59@ae G2c5a@g G2c5b@vars G2c5c@exp) (list '(primitive apply) (G2bf2@build-lambda G2c59@ae G2c5b@vars G2c5c@exp) G2c5a@g))) (set! G2c48@expand-case-lambda (lambda (G2c49@ae G2c4a@vars G2c4b@exp*) ((lambda (G2c4f@g G2c50@n) (list 'lambda G2c4f@g (G2bf6@build-let G2c49@ae (list G2c50@n) (list (list '(primitive length) G2c4f@g)) ((letrec ((G2c53@f (lambda (G2c55@vars* G2c56@exp*) (if (null? G2c55@vars*) (G2c42@build-error G2c49@ae) (list 'if (G2c44@build-pred G2c49@ae G2c50@n (car G2c55@vars*)) (G2c46@build-apply G2c49@ae G2c4f@g (car G2c55@vars*) (car G2c56@exp*)) (G2c53@f (cdr G2c55@vars*) (cdr G2c56@exp*))))))) G2c53@f) G2c3c@vars* G2c4b@exp*)))) (gensym) (gensym)))) (if (= (length G2c3d@exp*) '1) (G2bf2@build-lambda G2c3b@ae (car G2c3c@vars*) (car G2c3d@exp*)) (G2c48@expand-case-lambda G2c3b@ae G2c3c@vars* G2c3d@exp*)))) '#f '#f '#f '#f))) (set! G2bf6@build-let (lambda (G2c79@ae G2c7a@lhs* G2c7b@rhs* G2c7c@body) (cons (G2bf2@build-lambda G2c79@ae G2c7a@lhs* G2c7c@body) G2c7b@rhs*))) (set! G2c28@build-sequence (lambda (G2c81@ae G2c82@exps) ((letrec ((G2c85@loop (lambda (G2c87@exps) (if (null? (cdr G2c87@exps)) (car G2c87@exps) (if (equal? (car G2c87@exps) (G2c2a@build-void)) (G2c85@loop (cdr G2c87@exps)) (cons 'begin G2c87@exps)))))) G2c85@loop) G2c82@exps))) (set! G2c2a@build-void (lambda () '((primitive void)))) (set! G2c2c@build-letrec (lambda (G2c89@ae G2c8a@vars G2c8b@val-exps G2c8c@body-exp) (if (null? G2c8a@vars) G2c8c@body-exp (list 'letrec (map list G2c8a@vars G2c8b@val-exps) G2c8c@body-exp)))) (set! G2c2e@build-letrec* (lambda (G2c91@ae G2c92@vars G2c93@val-exps G2c94@body-exp) (if (null? G2c92@vars) G2c94@body-exp (G2bf6@build-let G2c91@ae G2c92@vars (map (lambda (G2c99@x) (list 'quote '#f)) G2c92@vars) (G2c28@build-sequence G2c91@ae (append (map (lambda (G2c9b@lhs G2c9c@rhs) (list 'set! G2c9b@lhs G2c9c@rhs)) G2c92@vars G2c93@val-exps) (list G2c94@body-exp))))))) (set! G2c30@build-library-letrec* (lambda (G2c9f@ae G2ca0@name G2ca1@vars G2ca2@locs G2ca3@val-exps G2ca4@body-exp) (list 'library-letrec* G2ca0@name (map list G2ca1@vars G2ca2@locs G2ca3@val-exps) G2ca4@body-exp))) (set! G2c32@build-receive (lambda (G2cab@ae G2cac@vars G2cad@producer G2cae@body*) (begin (display '"************** in ") (cons 'receive (cons G2cac@vars (cons G2cad@producer G2cae@body*)))))) (begin (set! G2cbc@G2c32@build-receive G2c32@build-receive) (set! G2cbb@G2c30@build-library-letrec* G2c30@build-library-letrec*) (set! G2cba@G2c2e@build-letrec* G2c2e@build-letrec*) (set! G2cb9@G2c2c@build-letrec G2c2c@build-letrec) (set! G2cb8@G2c2a@build-void G2c2a@build-void) (set! G2cb7@G2c28@build-sequence G2c28@build-sequence) (set! G2cb6@G2bf6@build-let G2bf6@build-let) (set! G2cb5@G2bf4@build-case-lambda G2bf4@build-case-lambda) (set! G2cb4@G2bf2@build-lambda G2bf2@build-lambda) (set! G2cb3@G2b78@build-global-define G2b78@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2ccb@set-cons G2ccd@set-union G2cd2@top-mark* G2cd4@top-marked? G2cd6@gen-lexical G2cd8@gen-global G2cda@gen-label G2cdc@gen-top-level-label G2cde@gen-define-label+loc G2ce0@gen-define-label G2ce6@G2ce1 G2ce8@G2ce3 G2cea@G2ce2 G2ced@rib? G2cef@make-rib G2cf1@rib-sym* G2cf3@rib-mark** G2cf5@rib-label* G2cf7@rib-sealed/freq G2cf9@rib-cache G2cfb@set-rib-sym*! G2cfd@set-rib-mark**! G2cff@set-rib-label*! G2d01@set-rib-sealed/freq! G2d03@set-rib-cache! G2d05@make-empty-rib G2d07@make-cache-rib G2d09@find-label G2d0b@extend-rib! G2d0d@extend-rib/nc! G2d0f@make-rib-map G2d11@seal-rib! G2d13@unseal-rib! G2d15@make-full-rib G2d1b@G2d16 G2d1d@G2d18 G2d1f@G2d17 G2d22@stx? G2d24@make-stx G2d26@stx-expr G2d28@stx-mark* G2d2a@stx-subst* G2d2c@stx-ae* G2d2e@set-stx-expr! G2d30@set-stx-mark*! G2d32@set-stx-subst*! G2d34@set-stx-ae*! G2d36@rp G2d38@datum->stx G2d3a@gen-mark G2d3c@anti-mark G2d3e@anti-mark? G2d40@join-wraps G2d42@mkstx G2d44@add-mark G2d46@add-subst G2d48@syntax-kind? G2d4a@syntax-vector->list G2d4c@syntax-pair? G2d4e@syntax-vector? G2d50@syntax-null? G2d52@syntax-list? G2d54@syntax-car G2d56@syntax-cdr G2d58@syntax->list G2d5a@id? G2d5c@id->sym G2d5e@same-marks? G2d60@bound-id=? G2d62@free-id=? G2d64@valid-bound-ids? G2d66@distinct-bound-ids? G2d68@bound-id-member? G2d6a@self-evaluating? G2d6c@strip-annotations G2d6e@strip G2d70@stx->datum G2d72@same-marks*? G2d74@id->label G2d76@id->real-label G2d78@label->binding G2d7a@make-binding G2d7c@binding-type G2d7e@binding-value G2d80@raise-unbound-error G2d82@syntax-type G2d92@sanitize-binding G2d94@make-variable-transformer G2d96@variable-transformer? G2d98@variable-transformer-procedure G2d9a@make-eval-transformer G2edd@parse-define G2edf@parse-define-syntax G2ee1@scheme-stx-hashtable G2ee3@scheme-stx G2ee5@lexical-var G2ee7@lexical-mutable? G2ee9@set-lexical-mutable! G2eeb@add-lexical G2eed@add-lexicals G2eef@letrec-helper G2ef1@letrec-transformer G2ef3@letrec*-transformer G2ef5@fluid-let-syntax-transformer G2ef7@type-descriptor-transformer G2ef9@record-type-descriptor-transformer G2efb@record-constructor-descriptor-transformer G2efd@when-macro G2eff@unless-macro G2f01@if-transformer G2f03@and-transformer G2f05@or-transformer G2f07@case-macro G2f09@quote-transformer G2f0b@case-lambda-transformer G2f0d@lambda-transformer G2f0f@bless G2f11@with-syntax-macro G2f13@invalid-fmls-error G2f15@let-macro G2f17@let-values-macro G2f19@let*-values-macro G2f1b@trace-lambda-macro G2f1d@trace-define-macro G2f1f@trace-define-syntax-macro G2f21@trace-let/rec-syntax G2f23@trace-let-syntax-macro G2f25@trace-letrec-syntax-macro G2f27@guard-macro G2f29@define-enumeration-macro G2f2b@time-macro G2f2d@delay-macro G2f2f@assert-macro G2f31@endianness-macro G2f33@identifier-syntax-macro G2f35@do-macro G2f37@let*-macro G2f39@or-macro G2f3b@and-macro G2f3d@cond-macro G2f3f@do-include G2f41@include-macro G2f43@include-into-macro G2f45@syntax-rules-macro G2f47@quasiquote-macro G2f49@quasisyntax-macro G2f4b@define-struct-macro G2f4d@define-record-type-macro G2f4f@define-condition-type-macro G2f51@incorrect-usage-macro G2f53@parameterize-macro G2f55@foreign-call-transformer G2f57@convert-pattern G2f59@syntax-dispatch G2f5b@ellipsis? G2f5d@underscore? G2f5f@verify-literals G2f61@syntax-case-transformer G2f63@ellipsis-map G2f65@syntax-transformer G2f67@core-macro-transformer G2f69@file-options-macro G2f6b@symbol-macro G2f6d@macro-transformer G2f6f@local-macro-transformer G2f71@do-macro-call G2f73@chi-macro G2f75@chi-local-macro G2f77@chi-global-macro G2f79@chi-expr* G2f7b@chi-application G2f7d@chi-expr G2f7f@chi-set! G2f81@verify-formals G2f83@chi-lambda-clause G2f85@chi-lambda-clause* G2f87@chi-defun G2f89@chi-rhs G2f8b@expand-interaction-rhs*/init* G2f8d@chi-rhs* G2f8f@find-bound=? G2f91@find-dups G2f93@chi-internal G2f95@parse-module G2f9b@G2f96 G2f9d@G2f98 G2f9f@G2f97 G2fa2@module-interface? G2fa4@make-module-interface G2fa6@module-interface-first-mark G2fa8@module-interface-exp-id-vec G2faa@module-interface-exp-lab-vec G2fac@set-module-interface-first-mark! G2fae@set-module-interface-exp-id-vec! G2fb0@set-module-interface-exp-lab-vec! G2fb2@module-interface-exp-id* G2fb4@chi-internal-module G2fb6@chi-body* G2fb8@expand-transformer G2fba@parse-exports G2fbc@parse-library-name G2fbe@parse-library G2fc0@parse-import-spec* G2fc2@make-top-rib G2fc4@make-collector G2fc6@inv-collector G2fc8@vis-collector G2fca@imp-collector G2fcc@chi-library-internal G2fce@chi-interaction-expr G2fd0@library-body-expander G2fd2@core-library-expander G2fd4@parse-top-level-program G2fd6@top-level-expander G2fdc@G2fd7 G2fde@G2fd9 G2fe0@G2fd8 G2fe3@env? G2fe5@make-env G2fe7@env-names G2fe9@env-labels G2feb@env-itc G2fed@set-env-names! G2fef@set-env-labels! G2ff1@set-env-itc! G2ff3@rp G2ff9@G2ff4 G2ffb@G2ff6 G2ffd@G2ff5 G3000@interaction-env? G3002@make-interaction-env G3004@interaction-env-rib G3006@interaction-env-r G3008@interaction-env-locs G300a@set-interaction-env-rib! G300c@set-interaction-env-r! G300e@set-interaction-env-locs! G3010@rp G3012@interaction-environment-symbols G3014@environment-bindings G3016@parse-binding G3018@environment? G301a@environment-symbols G301c@environment G301e@null-environment G3020@scheme-report-environment G3022@expand G3024@eval G3026@library-expander G3028@boot-library-expand G302a@rev-map-append G302c@build-exports G302e@make-export-subst G3030@make-export-env/macros G3032@generate-temporaries G3034@free-identifier=? G3036@bound-identifier=? G3038@make-source-condition G303a@extract-position-condition G303c@expression-position G303e@assertion-error G3040@syntax-error G3042@syntax-violation* G3044@syntax-violation G3046@identifier? G3048@datum->syntax G304a@syntax->datum G304c@compile-r6rs-top-level G304e@pre-compile-r6rs-top-level G3050@interaction-environment G3052@top-level-context) (begin (set! G2ccb@set-cons (lambda (G3053@x G3054@ls) (if (memq G3053@x G3054@ls) G3054@ls (cons G3053@x G3054@ls)))) (set! G2ccd@set-union (lambda (G3057@ls1 G3058@ls2) (if (null? G3057@ls1) G3058@ls2 (if (memq (car G3057@ls1) G3058@ls2) (G2ccd@set-union (cdr G3057@ls1) G3058@ls2) (cons (car G3057@ls1) (G2ccd@set-union (cdr G3057@ls1) G3058@ls2)))))) (set! G2cd2@top-mark* '(top)) (set! G2cd4@top-marked? (lambda (G305b@m*) (memq 'top G305b@m*))) (set! G2cd6@gen-lexical (lambda (G305d@sym) (if (symbol? G305d@sym) (gensym G305d@sym) (if (G2d22@stx? G305d@sym) (G2cd6@gen-lexical (G2d5c@id->sym G305d@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G305d@sym))))) (set! G2cd8@gen-global (lambda (G305f@x) (G2cd6@gen-lexical G305f@x))) (set! G2cda@gen-label (lambda (G3061@_) (gensym))) (set! G2cdc@gen-top-level-label (lambda (G3063@id G3064@rib) ((lambda (G3068@find) (begin (set! G3068@find (lambda (G3073@sym G3074@mark* G3075@sym* G3076@mark** G3077@label*) (and (pair? G3075@sym*) (if (and (eq? G3073@sym (car G3075@sym*)) (G2d5e@same-marks? G3074@mark* (car G3076@mark**))) (car G3077@label*) (G3068@find G3073@sym G3074@mark* (cdr G3075@sym*) (cdr G3076@mark**) (cdr G3077@label*)))))) ((lambda (G3069@sym G306a@mark*) ((lambda (G306d@sym*) ((lambda (G306f@t) (if G306f@t ((lambda (G3071@label) (if (G2b70@G2a16@imported-label->binding G3071@label) (gensym) G3071@label)) G306f@t) (gensym))) (and (memq G3069@sym (G2cf1@rib-sym* G3064@rib)) (G3068@find G3069@sym G306a@mark* G306d@sym* (G2cf3@rib-mark** G3064@rib) (G2cf5@rib-label* G3064@rib))))) (G2cf1@rib-sym* G3064@rib))) (G2d5c@id->sym G3063@id) (G2d28@stx-mark* G3063@id)))) '#f))) (set! G2cde@gen-define-label+loc (lambda (G307d@id G307e@rib) ((lambda (G3081@t) (if G3081@t ((lambda (G3083@env) ((lambda (G3085@label G3086@locs) (values G3085@label ((lambda (G3089@t) (if G3089@t (cdr G3089@t) ((lambda (G308b@loc) (begin (G300e@set-interaction-env-locs! G3083@env (cons (cons G3085@label G308b@loc) G3086@locs)) G308b@loc)) (G2cd6@gen-lexical G307d@id)))) (assq G3085@label G3086@locs)))) (G2cdc@gen-top-level-label G307d@id G307e@rib) (G3008@interaction-env-locs G3083@env))) G3081@t) (values (gensym) (G2cd6@gen-lexical G307d@id)))) (G3052@top-level-context)))) (set! G2ce0@gen-define-label (lambda (G308d@id G308e@rib) (if (G3052@top-level-context) (G2cdc@gen-top-level-label G308d@id G308e@rib) (gensym)))) (set! G2ce6@G2ce1 (make-record-type-descriptor 'rib '#f 'G2ce4 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ce8@G2ce3 '#f) (set! G2cea@G2ce2 (make-record-constructor-descriptor G2ce6@G2ce1 '#f G2ce8@G2ce3)) (set! G2ced@rib? (record-predicate G2ce6@G2ce1)) (set! G2cef@make-rib (record-constructor G2cea@G2ce2)) (set! G2cf1@rib-sym* (record-accessor G2ce6@G2ce1 '0)) (set! G2cf3@rib-mark** (record-accessor G2ce6@G2ce1 '1)) (set! G2cf5@rib-label* (record-accessor G2ce6@G2ce1 '2)) (set! G2cf7@rib-sealed/freq (record-accessor G2ce6@G2ce1 '3)) (set! G2cf9@rib-cache (record-accessor G2ce6@G2ce1 '4)) (set! G2cfb@set-rib-sym*! (record-mutator G2ce6@G2ce1 '0)) (set! G2cfd@set-rib-mark**! (record-mutator G2ce6@G2ce1 '1)) (set! G2cff@set-rib-label*! (record-mutator G2ce6@G2ce1 '2)) (set! G2d01@set-rib-sealed/freq! (record-mutator G2ce6@G2ce1 '3)) (set! G2d03@set-rib-cache! (record-mutator G2ce6@G2ce1 '4)) (set! G2d05@make-empty-rib (lambda () (G2cef@make-rib '() '() '() '#f '#f))) (set! G2d07@make-cache-rib (lambda () (G2cef@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d09@find-label (lambda (G3091@rib G3092@sym G3093@mark*) ((lambda (G3097@ht) (and G3097@ht ((lambda (G3099@cv) ((lambda (G309b@t) (if G309b@t (cdr G309b@t) '#f)) (and G3099@cv (assp (lambda (G309d@m) (G2d5e@same-marks? G3093@mark* G309d@m)) G3099@cv)))) (hashtable-ref G3097@ht G3092@sym '#f)))) (G2cf9@rib-cache G3091@rib)))) (set! G2d0b@extend-rib! (lambda (G309f@rib G30a0@id G30a1@label) ((lambda (G30a6@find) (begin (set! G30a6@find (lambda (G30b7@sym G30b8@mark* G30b9@sym* G30ba@mark** G30bb@label*) (and (pair? G30b9@sym*) (if (and (eq? G30b7@sym (car G30b9@sym*)) (G2d5e@same-marks? G30b8@mark* (car G30ba@mark**))) G30bb@label* (G30a6@find G30b7@sym G30b8@mark* (cdr G30b9@sym*) (cdr G30ba@mark**) (cdr G30bb@label*)))))) (begin (if (G2cf7@rib-sealed/freq G309f@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G309f@rib) (void)) ((lambda (G30a7@sym G30a8@mark*) ((lambda (G30ab@sym*) ((lambda (G30ad@t) (if G30ad@t ((lambda (G30af@p) (if (not (eq? G30a1@label G30af@p)) (G3044@syntax-violation '#f '"multiple definitions of identifier" G30a0@id) (void))) G30ad@t) ((lambda (G30b1@t) (if G30b1@t ((lambda (G30b3@p) (if (not (eq? G30a1@label (car G30b3@p))) (if (G3052@top-level-context) (set-car! G30b3@p G30a1@label) (G3044@syntax-violation '#f '"multiple definitions of identifier" G30a0@id)) (void))) G30b1@t) (begin (if (G2cf9@rib-cache G309f@rib) (hashtable-update! (G2cf9@rib-cache G309f@rib) G30a7@sym (lambda (G30b5@e) (cons (cons G30a8@mark* G30a1@label) G30b5@e)) '()) (void)) (G2cfb@set-rib-sym*! G309f@rib (cons G30a7@sym G30ab@sym*)) (G2cfd@set-rib-mark**! G309f@rib (cons G30a8@mark* (G2cf3@rib-mark** G309f@rib))) (G2cff@set-rib-label*! G309f@rib (cons G30a1@label (G2cf5@rib-label* G309f@rib)))))) (and (memq G30a7@sym (G2cf1@rib-sym* G309f@rib)) (G30a6@find G30a7@sym G30a8@mark* G30ab@sym* (G2cf3@rib-mark** G309f@rib) (G2cf5@rib-label* G309f@rib)))))) (G2d09@find-label G309f@rib G30a7@sym G30a8@mark*))) (G2cf1@rib-sym* G309f@rib))) (G2d5c@id->sym G30a0@id) (G2d28@stx-mark* G30a0@id))))) '#f))) (set! G2d0d@extend-rib/nc! (lambda (G30c1@rib G30c2@id G30c3@label) ((lambda (G30c7@sym G30c8@mark*) ((lambda (G30cb@sym*) (begin (if (G2cf9@rib-cache G30c1@rib) (hashtable-update! (G2cf9@rib-cache G30c1@rib) G30c7@sym (lambda (G30cd@e) (cons (cons G30c8@mark* G30c3@label) G30cd@e)) '()) (void)) (G2cfb@set-rib-sym*! G30c1@rib (cons G30c7@sym G30cb@sym*)) (G2cfd@set-rib-mark**! G30c1@rib (cons G30c8@mark* (G2cf3@rib-mark** G30c1@rib))) (G2cff@set-rib-label*! G30c1@rib (cons G30c3@label (G2cf5@rib-label* G30c1@rib))))) (G2cf1@rib-sym* G30c1@rib))) (G2d5c@id->sym G30c2@id) (G2d28@stx-mark* G30c2@id)))) (set! G2d0f@make-rib-map (lambda (G30cf@sym*) ((lambda (G30d1@ht) ((letrec ((G30d3@f (lambda (G30d5@i G30d6@sym*) (if (null? G30d6@sym*) G30d1@ht (begin (hashtable-update! G30d1@ht (car G30d6@sym*) (lambda (G30d9@x) (cons G30d5@i G30d9@x)) '()) (G30d3@f (+ G30d5@i '1) (cdr G30d6@sym*))))))) G30d3@f) '0 G30cf@sym*)) (make-eq-hashtable)))) (set! G2d11@seal-rib! (lambda (G30db@rib) ((lambda (G30dd@sym*) (if (not (null? G30dd@sym*)) (begin (G2cfb@set-rib-sym*! G30db@rib (list->vector G30dd@sym*)) (G2cfd@set-rib-mark**! G30db@rib (list->vector (G2cf3@rib-mark** G30db@rib))) (G2cff@set-rib-label*! G30db@rib (list->vector (G2cf5@rib-label* G30db@rib))) (G2d01@set-rib-sealed/freq! G30db@rib (G2d0f@make-rib-map G30dd@sym*))) (void))) (G2cf1@rib-sym* G30db@rib)))) (set! G2d13@unseal-rib! (lambda (G30df@rib) (if (G2cf7@rib-sealed/freq G30df@rib) (begin (G2d01@set-rib-sealed/freq! G30df@rib '#f) (G2cfb@set-rib-sym*! G30df@rib (vector->list (G2cf1@rib-sym* G30df@rib))) (G2cfd@set-rib-mark**! G30df@rib (vector->list (G2cf3@rib-mark** G30df@rib))) (G2cff@set-rib-label*! G30df@rib (vector->list (G2cf5@rib-label* G30df@rib)))) (void)))) (set! G2d15@make-full-rib (lambda (G30e1@id* G30e2@label*) ((lambda (G30e5@r) (begin (G2d11@seal-rib! G30e5@r) G30e5@r)) (G2cef@make-rib (map G2d5c@id->sym G30e1@id*) (map G2d28@stx-mark* G30e1@id*) G30e2@label* '#f '#f)))) (set! G2d1b@G2d16 (make-record-type-descriptor 'stx '#f 'G2d19 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d1d@G2d18 '#f) (set! G2d1f@G2d17 (make-record-constructor-descriptor G2d1b@G2d16 '#f G2d1d@G2d18)) (set! G2d22@stx? (record-predicate G2d1b@G2d16)) (set! G2d24@make-stx (record-constructor G2d1f@G2d17)) (set! G2d26@stx-expr (record-accessor G2d1b@G2d16 '0)) (set! G2d28@stx-mark* (record-accessor G2d1b@G2d16 '1)) (set! G2d2a@stx-subst* (record-accessor G2d1b@G2d16 '2)) (set! G2d2c@stx-ae* (record-accessor G2d1b@G2d16 '3)) (set! G2d2e@set-stx-expr! (record-mutator G2d1b@G2d16 '0)) (set! G2d30@set-stx-mark*! (record-mutator G2d1b@G2d16 '1)) (set! G2d32@set-stx-subst*! (record-mutator G2d1b@G2d16 '2)) (set! G2d34@set-stx-ae*! (record-mutator G2d1b@G2d16 '3)) (set! G2d36@rp (G28f3@G2826@make-record-printer 'stx (lambda (G30e7@x G30e8@p G30e9@wr) (begin (display '"#<syntax " G30e8@p) (write (G2d70@stx->datum G30e7@x) G30e8@p) ((lambda (G30ed@expr) (if (G28eb@G2816@annotation? G30ed@expr) ((lambda (G30ef@src) (if (pair? G30ef@src) (begin (display '" [" G30e8@p) (display (cdr G30ef@src) G30e8@p) (display '" of " G30e8@p) (display (car G30ef@src) G30e8@p) (display '"]" G30e8@p)) (void))) (G28ec@G2818@annotation-source G30ed@expr)) (void))) (G2d26@stx-expr G30e7@x)) (display '">" G30e8@p))))) (set! G2d38@datum->stx (lambda (G30f1@id G30f2@datum) (G2d24@make-stx G30f2@datum (G2d28@stx-mark* G30f1@id) (G2d2a@stx-subst* G30f1@id) (G2d2c@stx-ae* G30f1@id)))) (set! G2d3a@gen-mark (lambda () (string '#\m))) (set! G2d3c@anti-mark '#f) (set! G2d3e@anti-mark? not) (set! G2d40@join-wraps (lambda (G30f5@m1* G30f6@s1* G30f7@ae1* G30f8@e) ((lambda (G30fe@cancel) (begin (set! G30fe@cancel (lambda (G3105@ls1 G3106@ls2) ((letrec ((G3109@f (lambda (G310b@x G310c@ls1) (if (null? G310c@ls1) (cdr G3106@ls2) (cons G310b@x (G3109@f (car G310c@ls1) (cdr G310c@ls1))))))) G3109@f) (car G3105@ls1) (cdr G3105@ls1)))) ((lambda (G30ff@m2* G3100@s2* G3101@ae2*) (if (and (not (null? G30f5@m1*)) (not (null? G30ff@m2*)) (G2d3e@anti-mark? (car G30ff@m2*))) (values (G30fe@cancel G30f5@m1* G30ff@m2*) (G30fe@cancel G30f6@s1* G3100@s2*) (G30fe@cancel G30f7@ae1* G3101@ae2*)) (values (append G30f5@m1* G30ff@m2*) (append G30f6@s1* G3100@s2*) (append G30f7@ae1* G3101@ae2*)))) (G2d28@stx-mark* G30f8@e) (G2d2a@stx-subst* G30f8@e) (G2d2c@stx-ae* G30f8@e)))) '#f))) (set! G2d42@mkstx (lambda (G310f@e G3110@m* G3111@s* G3112@ae*) (if (and (G2d22@stx? G310f@e) (not (G2cd4@top-marked? G3110@m*))) (call-with-values (lambda () (G2d40@join-wraps G3110@m* G3111@s* G3112@ae* G310f@e)) (lambda (G311a@G3117 G311b@G3118 G311c@G3119) ((lambda (G3120@ae* G3121@s* G3122@m*) (G2d24@make-stx (G2d26@stx-expr G310f@e) G3122@m* G3121@s* G3120@ae*)) G311c@G3119 G311b@G3118 G311a@G3117))) (G2d24@make-stx G310f@e G3110@m* G3111@s* G3112@ae*)))) (set! G2d44@add-mark (lambda (G3126@m G3127@e G3128@ae) (G2d42@mkstx G3127@e (list G3126@m) '(shift) (list G3128@ae)))) (set! G2d46@add-subst (lambda (G312c@subst G312d@e) (G2d42@mkstx G312d@e '() (list G312c@subst) '()))) (set! G2d48@syntax-kind? (lambda (G3130@x G3131@p?) (if (G2d22@stx? G3130@x) (G2d48@syntax-kind? (G2d26@stx-expr G3130@x) G3131@p?) (if (G28eb@G2816@annotation? G3130@x) (G2d48@syntax-kind? (G28ed@G281a@annotation-expression G3130@x) G3131@p?) (G3131@p? G3130@x))))) (set! G2d4a@syntax-vector->list (lambda (G3134@x) (if (G2d22@stx? G3134@x) ((lambda (G3136@ls G3137@m* G3138@s* G3139@ae*) (map (lambda (G313e@x) (G2d42@mkstx G313e@x G3137@m* G3138@s* G3139@ae*)) G3136@ls)) (G2d4a@syntax-vector->list (G2d26@stx-expr G3134@x)) (G2d28@stx-mark* G3134@x) (G2d2a@stx-subst* G3134@x) (G2d2c@stx-ae* G3134@x)) (if (G28eb@G2816@annotation? G3134@x) (G2d4a@syntax-vector->list (G28ed@G281a@annotation-expression G3134@x)) (if (vector? G3134@x) (vector->list G3134@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3134@x)))))) (set! G2d4c@syntax-pair? (lambda (G3140@x) (G2d48@syntax-kind? G3140@x pair?))) (set! G2d4e@syntax-vector? (lambda (G3142@x) (G2d48@syntax-kind? G3142@x vector?))) (set! G2d50@syntax-null? (lambda (G3144@x) (G2d48@syntax-kind? G3144@x null?))) (set! G2d52@syntax-list? (lambda (G3146@x) (or (G2d50@syntax-null? G3146@x) (and (G2d4c@syntax-pair? G3146@x) (G2d52@syntax-list? (G2d56@syntax-cdr G3146@x)))))) (set! G2d54@syntax-car (lambda (G3148@x) (if (G2d22@stx? G3148@x) (G2d42@mkstx (G2d54@syntax-car (G2d26@stx-expr G3148@x)) (G2d28@stx-mark* G3148@x) (G2d2a@stx-subst* G3148@x) (G2d2c@stx-ae* G3148@x)) (if (G28eb@G2816@annotation? G3148@x) (G2d54@syntax-car (G28ed@G281a@annotation-expression G3148@x)) (if (pair? G3148@x) (car G3148@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3148@x)))))) (set! G2d56@syntax-cdr (lambda (G314a@x) (if (G2d22@stx? G314a@x) (G2d42@mkstx (G2d56@syntax-cdr (G2d26@stx-expr G314a@x)) (G2d28@stx-mark* G314a@x) (G2d2a@stx-subst* G314a@x) (G2d2c@stx-ae* G314a@x)) (if (G28eb@G2816@annotation? G314a@x) (G2d56@syntax-cdr (G28ed@G281a@annotation-expression G314a@x)) (if (pair? G314a@x) (cdr G314a@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G314a@x)))))) (set! G2d58@syntax->list (lambda (G314c@x) (if (G2d4c@syntax-pair? G314c@x) (cons (G2d54@syntax-car G314c@x) (G2d58@syntax->list (G2d56@syntax-cdr G314c@x))) (if (G2d50@syntax-null? G314c@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G314c@x))))) (set! G2d5a@id? (lambda (G314e@x) (and (G2d22@stx? G314e@x) ((lambda (G3150@expr) (symbol? (if (G28eb@G2816@annotation? G3150@expr) (G28ea@G2814@annotation-stripped G3150@expr) G3150@expr))) (G2d26@stx-expr G314e@x))))) (set! G2d5c@id->sym (lambda (G3152@x) (begin (if (not (G2d22@stx? G3152@x)) (error 'id->sym '"BUG in ikarus: not an id" G3152@x) (void)) ((lambda (G3154@expr) ((lambda (G3156@sym) (if (symbol? G3156@sym) G3156@sym (error 'id->sym '"BUG in ikarus: not an id" G3152@x))) (if (G28eb@G2816@annotation? G3154@expr) (G28ea@G2814@annotation-stripped G3154@expr) G3154@expr))) (G2d26@stx-expr G3152@x))))) (set! G2d5e@same-marks? (lambda (G3158@x G3159@y) (or (and (null? G3158@x) (null? G3159@y)) (and (pair? G3158@x) (pair? G3159@y) (eq? (car G3158@x) (car G3159@y)) (G2d5e@same-marks? (cdr G3158@x) (cdr G3159@y)))))) (set! G2d60@bound-id=? (lambda (G315c@x G315d@y) (and (eq? (G2d5c@id->sym G315c@x) (G2d5c@id->sym G315d@y)) (G2d5e@same-marks? (G2d28@stx-mark* G315c@x) (G2d28@stx-mark* G315d@y))))) (set! G2d62@free-id=? (lambda (G3160@i G3161@j) ((lambda (G3164@t0 G3165@t1) (if (or G3164@t0 G3165@t1) (eq? G3164@t0 G3165@t1) (eq? (G2d5c@id->sym G3160@i) (G2d5c@id->sym G3161@j)))) (G2d76@id->real-label G3160@i) (G2d76@id->real-label G3161@j)))) (set! G2d64@valid-bound-ids? (lambda (G3168@id*) (and (for-all G2d5a@id? G3168@id*) (G2d66@distinct-bound-ids? G3168@id*)))) (set! G2d66@distinct-bound-ids? (lambda (G316a@id*) (or (null? G316a@id*) (and (not (G2d68@bound-id-member? (car G316a@id*) (cdr G316a@id*))) (G2d66@distinct-bound-ids? (cdr G316a@id*)))))) (set! G2d68@bound-id-member? (lambda (G316c@id G316d@id*) (and (pair? G316d@id*) (or (G2d60@bound-id=? G316c@id (car G316d@id*)) (G2d68@bound-id-member? G316c@id (cdr G316d@id*)))))) (set! G2d6a@self-evaluating? (lambda (G3170@x) (or (number? G3170@x) (string? G3170@x) (char? G3170@x) (boolean? G3170@x) (regexp? G3170@x) (bytevector? G3170@x)))) (set! G2d6c@strip-annotations (lambda (G3172@x) (if (pair? G3172@x) (cons (G2d6c@strip-annotations (car G3172@x)) (G2d6c@strip-annotations (cdr G3172@x))) (if (vector? G3172@x) (vector-map G2d6c@strip-annotations G3172@x) (if (G28eb@G2816@annotation? G3172@x) (G28ea@G2814@annotation-stripped G3172@x) G3172@x))))) (set! G2d6e@strip (lambda (G3174@x G3175@m*) (if (G2cd4@top-marked? G3175@m*) (if (or (G28eb@G2816@annotation? G3174@x) (and (pair? G3174@x) (G28eb@G2816@annotation? (car G3174@x))) (and (vector? G3174@x) (> (vector-length G3174@x) '0) (G28eb@G2816@annotation? (vector-ref G3174@x '0)))) (G2d6c@strip-annotations G3174@x) G3174@x) ((letrec ((G3178@f (lambda (G317a@x) (if (G2d22@stx? G317a@x) (G2d6e@strip (G2d26@stx-expr G317a@x) (G2d28@stx-mark* G317a@x)) (if (G28eb@G2816@annotation? G317a@x) (G28ea@G2814@annotation-stripped G317a@x) (if (pair? G317a@x) ((lambda (G317c@a G317d@d) (if (and (eq? G317c@a (car G317a@x)) (eq? G317d@d (cdr G317a@x))) G317a@x (cons G317c@a G317d@d))) (G3178@f (car G317a@x)) (G3178@f (cdr G317a@x))) (if (vector? G317a@x) ((lambda (G3180@old) ((lambda (G3182@new) (if (for-all eq? G3180@old G3182@new) G317a@x (list->vector G3182@new))) (map G3178@f G3180@old))) (vector->list G317a@x)) G317a@x))))))) G3178@f) G3174@x)))) (set! G2d70@stx->datum (lambda (G3184@x) (G2d6e@strip G3184@x '()))) (set! G2d72@same-marks*? (lambda (G3186@mark* G3187@mark** G3188@si) (if (null? G3188@si) '#f (if (G2d5e@same-marks? G3186@mark* (vector-ref G3187@mark** (car G3188@si))) (car G3188@si) (G2d72@same-marks*? G3186@mark* G3187@mark** (cdr G3188@si)))))) (set! G2d74@id->label (lambda (G318c@id) (or (G2d76@id->real-label G318c@id) ((lambda (G318e@t) (if G318e@t ((lambda (G3190@env) ((lambda (G3192@rib) (call-with-values (lambda () (G2cde@gen-define-label+loc G318c@id G3192@rib)) (lambda (G3196@G3194 G3197@G3195) ((lambda (G319a@loc_ G319b@lab) (begin (G2d0b@extend-rib! G3192@rib G318c@id G319b@lab) G319b@lab)) G3197@G3195 G3196@G3194)))) (G3004@interaction-env-rib G3190@env))) G318e@t) '#f)) (G3052@top-level-context))))) (set! G2d76@id->real-label (lambda (G319e@id) ((lambda (G31a0@sym) ((letrec ((G31a2@search (lambda (G31a4@subst* G31a5@mark*) (if (null? G31a4@subst*) '#f (if (eq? (car G31a4@subst*) 'shift) (G31a2@search (cdr G31a4@subst*) (cdr G31a5@mark*)) ((lambda (G31a8@rib) ((lambda (G31aa@t) (if G31aa@t ((lambda (G31ac@ht) ((lambda (G31ae@si) ((lambda (G31b0@i) (if G31b0@i (vector-ref (G2cf5@rib-label* G31a8@rib) G31b0@i) (G31a2@search (cdr G31a4@subst*) G31a5@mark*))) (and G31ae@si (G2d72@same-marks*? G31a5@mark* (G2cf3@rib-mark** G31a8@rib) (reverse G31ae@si))))) (hashtable-ref G31ac@ht G31a0@sym '#f))) G31aa@t) (or (G2d09@find-label G31a8@rib G31a0@sym G31a5@mark*) ((letrec ((G31b2@f (lambda (G31b4@sym* G31b5@mark** G31b6@label*) (if (null? G31b4@sym*) (G31a2@search (cdr G31a4@subst*) G31a5@mark*) (if (and (eq? (car G31b4@sym*) G31a0@sym) (G2d5e@same-marks? (car G31b5@mark**) G31a5@mark*)) (car G31b6@label*) (G31b2@f (cdr G31b4@sym*) (cdr G31b5@mark**) (cdr G31b6@label*))))))) G31b2@f) (G2cf1@rib-sym* G31a8@rib) (G2cf3@rib-mark** G31a8@rib) (G2cf5@rib-label* G31a8@rib))))) (G2cf7@rib-sealed/freq G31a8@rib))) (car G31a4@subst*))))))) G31a2@search) (G2d2a@stx-subst* G319e@id) (G2d28@stx-mark* G319e@id))) (G2d5c@id->sym G319e@id)))) (set! G2d78@label->binding (lambda (G31ba@x G31bb@r) ((lambda (G31be@t) (if G31be@t ((lambda (G31c0@b) (if (and (pair? G31c0@b) (eq? (car G31c0@b) '$core-rtd)) (cons '$rtd (map G2f0f@bless (cdr G31c0@b))) (if (and (pair? G31c0@b) (eq? (car G31c0@b) 'global-rtd)) ((lambda (G31c2@lib G31c3@loc) (cons '$rtd (symbol-value G31c3@loc))) (cadr G31c0@b) (cddr G31c0@b)) G31c0@b))) G31be@t) ((lambda (G31c6@t) (if G31c6@t (cdr G31c6@t) ((lambda (G31c8@t) (if G31c8@t ((lambda (G31ca@env) ((lambda (G31cc@t) (if G31cc@t ((lambda (G31ce@p) (cons* 'lexical (cdr G31ce@p) '#f)) G31cc@t) '(displaced-lexical . #f))) (assq G31ba@x (G3008@interaction-env-locs G31ca@env)))) G31c8@t) '(displaced-lexical . #f))) (G3052@top-level-context)))) (assq G31ba@x G31bb@r)))) (G2b70@G2a16@imported-label->binding G31ba@x)))) (set! G2d7a@make-binding cons) (set! G2d7c@binding-type car) (set! G2d7e@binding-value cdr) (set! G2d80@raise-unbound-error (lambda (G31d0@id) (G3042@syntax-violation* '#f '"unbound identifier" G31d0@id (G4c7c@G4ac6@make-undefined-violation)))) (set! G2d82@syntax-type (lambda (G31d2@e G31d3@r) (if (G2d5a@id? G31d2@e) ((lambda (G31d6@id) ((lambda (G31d8@label) ((lambda (G31da@b) ((lambda (G31dc@type) ((lambda () (begin (if (not G31d8@label) (G2d80@raise-unbound-error G31d6@id) (void)) ((lambda (G31de@t) (if (memv G31de@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31dc@type (G2d7e@binding-value G31da@b) G31d6@id) (values 'other '#f '#f))) G31dc@type))))) (G2d7c@binding-type G31da@b))) (G2d78@label->binding G31d8@label G31d3@r))) (G2d74@id->label G31d6@id))) G31d2@e) (if (G2d4c@syntax-pair? G31d2@e) ((lambda (G31e0@id) (if (G2d5a@id? G31e0@id) ((lambda (G31e2@label) ((lambda (G31e4@b) ((lambda (G31e6@type) ((lambda () (begin (if (not G31e2@label) (G2d80@raise-unbound-error G31e0@id) (void)) ((lambda (G31e8@t) (if (memv G31e8@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31e6@type (G2d7e@binding-value G31e4@b) G31e0@id) (values 'call '#f '#f))) G31e6@type))))) (G2d7c@binding-type G31e4@b))) (G2d78@label->binding G31e2@label G31d3@r))) (G2d74@id->label G31e0@id)) (values 'call '#f '#f))) (G2d54@syntax-car G31d2@e)) ((lambda (G31ea@d) (if (G2d6a@self-evaluating? G31ea@d) (values 'constant G31ea@d '#f) (values 'other '#f '#f))) (G2d70@stx->datum G31d2@e)))))) (set! G2d92@sanitize-binding (lambda (G31ec@x G31ed@src) (if (procedure? G31ec@x) (cons* 'local-macro G31ec@x G31ed@src) (if (and (pair? G31ec@x) (eq? (car G31ec@x) 'macro!) (procedure? (cdr G31ec@x))) (cons* 'local-macro! (cdr G31ec@x) G31ed@src) (if (and (pair? G31ec@x) (eq? (car G31ec@x) '$rtd)) G31ec@x (assertion-violation 'expand '"invalid transformer" G31ec@x)))))) (set! G2d94@make-variable-transformer (lambda (G31f0@x) (if (procedure? G31f0@x) (cons 'macro! G31f0@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31f0@x)))) (set! G2d96@variable-transformer? (lambda (G31f2@x) (and (pair? G31f2@x) (eq? (car G31f2@x) 'macro!) (procedure? (cdr G31f2@x))))) (set! G2d98@variable-transformer-procedure (lambda (G31f4@x) (if (G2d96@variable-transformer? G31f4@x) (cdr G31f4@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31f4@x)))) (set! G2d9a@make-eval-transformer (lambda (G31f6@x) (G2d92@sanitize-binding (eval-core (G294a@G2902@expanded->core G31f6@x)) G31f6@x))) (set! G2edd@parse-define (lambda (G31f8@x) ((lambda (G31fa@t) ((lambda (G31fc@ls/false) (if (and G31fc@ls/false (apply (lambda (G31fe@id G31ff@fmls G3200@b G3201@b*) (G2d5a@id? G31fe@id)) G31fc@ls/false)) (apply (lambda (G3206@id G3207@fmls G3208@b G3209@b*) (begin (G2f81@verify-formals G3207@fmls G31f8@x) (values G3206@id (cons 'defun (cons G3207@fmls (cons G3208@b G3209@b*)))))) G31fc@ls/false) ((lambda (G320e@t) ((lambda (G3210@ls/false) (if (and G3210@ls/false (apply (lambda (G3212@id G3213@val) (G2d5a@id? G3212@id)) G3210@ls/false)) (apply (lambda (G3216@id G3217@val) (values G3216@id (cons 'expr G3217@val))) G3210@ls/false) ((lambda (G321a@t) ((lambda (G321c@ls/false) (if (and G321c@ls/false (apply (lambda (G321e@id) (G2d5a@id? G321e@id)) G321c@ls/false)) (apply (lambda (G3220@id) (values G3220@id (cons 'expr (G2f0f@bless '(void))))) G321c@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G321a@t))) (G2f59@syntax-dispatch G321a@t '(_ any)))) G320e@t))) (G2f59@syntax-dispatch G320e@t '(_ any any)))) G31fa@t))) (G2f59@syntax-dispatch G31fa@t '(_ (any . any) any . each-any)))) G31f8@x))) (set! G2edf@parse-define-syntax (lambda (G3222@x) ((lambda (G3224@t) ((lambda (G3226@ls/false) (if (and G3226@ls/false (apply (lambda (G3228@id G3229@val) (G2d5a@id? G3228@id)) G3226@ls/false)) (apply (lambda (G322c@id G322d@val) (values G322c@id G322d@val)) G3226@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3224@t))) (G2f59@syntax-dispatch G3224@t '(_ any any)))) G3222@x))) (set! G2ee1@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ee3@scheme-stx (lambda (G3230@sym) (or (hashtable-ref G2ee1@scheme-stx-hashtable G3230@sym '#f) ((lambda (G3232@subst) ((lambda (G3234@stx) ((lambda (G3236@stx) ((lambda () (begin (hashtable-set! G2ee1@scheme-stx-hashtable G3230@sym G3236@stx) G3236@stx)))) ((lambda (G3238@t) (if G3238@t ((lambda (G323a@x) ((lambda (G323c@name G323d@label) (G2d46@add-subst (G2cef@make-rib (list G323c@name) (list G2cd2@top-mark*) (list G323d@label) '#f '#f) G3234@stx)) (car G323a@x) (cdr G323a@x))) G3238@t) G3234@stx)) (assq G3230@sym G3232@subst)))) (G2d24@make-stx G3230@sym G2cd2@top-mark* '() '()))) (G2b46@G29c2@library-subst (G2b6a@G2a0a@find-library-by-name '(psyntax system $all))))))) (set! G2ee5@lexical-var car) (set! G2ee7@lexical-mutable? cdr) (set! G2ee9@set-lexical-mutable! set-cdr!) (set! G2eeb@add-lexical (lambda (G3240@lab G3241@lex G3242@r) (cons (cons* G3240@lab 'lexical G3241@lex '#f) G3242@r))) (set! G2eed@add-lexicals (lambda (G3246@lab* G3247@lex* G3248@r) (if (null? G3246@lab*) G3248@r (G2eed@add-lexicals (cdr G3246@lab*) (cdr G3247@lex*) (G2eeb@add-lexical (car G3246@lab*) (car G3247@lex*) G3248@r))))) (set! G2eef@letrec-helper (lambda (G324c@e G324d@r G324e@mr G324f@build) ((lambda (G3254@t) ((lambda (G3256@ls/false) (if G3256@ls/false (apply (lambda (G3258@lhs* G3259@rhs* G325a@b G325b@b*) (if (not (G2d64@valid-bound-ids? G3258@lhs*)) (G2f13@invalid-fmls-error G324c@e G3258@lhs*) ((lambda (G3260@lex* G3261@lab*) ((lambda (G3264@rib G3265@r) ((lambda (G3268@body G3269@rhs*) (G324f@build '#f G3260@lex* G3269@rhs* G3268@body)) (G2f93@chi-internal (G2d46@add-subst G3264@rib (cons G325a@b G325b@b*)) G3265@r G324e@mr) (G2f79@chi-expr* (map (lambda (G326c@x) (G2d46@add-subst G3264@rib G326c@x)) G3259@rhs*) G3265@r G324e@mr))) (G2d15@make-full-rib G3258@lhs* G3261@lab*) (G2eed@add-lexicals G3261@lab* G3260@lex* G324d@r))) (map G2cd6@gen-lexical G3258@lhs*) (map G2cda@gen-label G3258@lhs*)))) G3256@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3254@t))) (G2f59@syntax-dispatch G3254@t '(_ #(each (any any)) any . each-any)))) G324c@e))) (set! G2ef1@letrec-transformer (lambda (G326e@e G326f@r G3270@mr) (G2eef@letrec-helper G326e@e G326f@r G3270@mr G2cb9@G2c2c@build-letrec))) (set! G2ef3@letrec*-transformer (lambda (G3274@e G3275@r G3276@mr) (G2eef@letrec-helper G3274@e G3275@r G3276@mr G2cba@G2c2e@build-letrec*))) (set! G2ef5@fluid-let-syntax-transformer (lambda (G327a@e G327b@r G327c@mr) ((lambda (G3281@lookup) (begin (set! G3281@lookup (lambda (G3294@x) (or (G2d74@id->label G3294@x) (G3044@syntax-violation '#f '"unbound identifier" G327a@e G3294@x)))) ((lambda (G3282@t) ((lambda (G3284@ls/false) (if G3284@ls/false (apply (lambda (G3286@lhs* G3287@rhs* G3288@b G3289@b*) (if (not (G2d64@valid-bound-ids? G3286@lhs*)) (G2f13@invalid-fmls-error G327a@e G3286@lhs*) ((lambda (G328e@lab* G328f@rhs*) (G2f93@chi-internal (cons G3288@b G3289@b*) (append (map cons G328e@lab* G328f@rhs*) G327b@r) (append (map cons G328e@lab* G328f@rhs*) G327c@mr))) (map G3281@lookup G3286@lhs*) (map (lambda (G3292@x) (G2d9a@make-eval-transformer (G2fb8@expand-transformer G3292@x G327c@mr))) G3287@rhs*)))) G3284@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3282@t))) (G2f59@syntax-dispatch G3282@t '(_ #(each (any any)) any . each-any)))) G327a@e))) '#f))) (set! G2ef7@type-descriptor-transformer (lambda (G3296@e G3297@r G3298@mr) ((lambda (G329c@t) ((lambda (G329e@ls/false) (if (and G329e@ls/false (apply (lambda (G32a0@id) (G2d5a@id? G32a0@id)) G329e@ls/false)) (apply (lambda (G32a2@id) ((lambda (G32a4@lab) ((lambda (G32a6@b) ((lambda (G32a8@type) ((lambda () (begin (if (not G32a4@lab) (G2d80@raise-unbound-error G32a2@id) (void)) (if (not (and (eq? G32a8@type '$rtd) (not (list? (G2d7e@binding-value G32a6@b))))) (G3044@syntax-violation '#f '"not a record type" G3296@e) (void)) (list 'quote (G2d7e@binding-value G32a6@b)))))) (G2d7c@binding-type G32a6@b))) (G2d78@label->binding G32a4@lab G3297@r))) (G2d74@id->label G32a2@id))) G329e@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G329c@t))) (G2f59@syntax-dispatch G329c@t '(_ any)))) G3296@e))) (set! G2ef9@record-type-descriptor-transformer (lambda (G32aa@e G32ab@r G32ac@mr) ((lambda (G32b0@t) ((lambda (G32b2@ls/false) (if (and G32b2@ls/false (apply (lambda (G32b4@id) (G2d5a@id? G32b4@id)) G32b2@ls/false)) (apply (lambda (G32b6@id) ((lambda (G32b8@lab) ((lambda (G32ba@b) ((lambda (G32bc@type) ((lambda () (begin (if (not G32b8@lab) (G2d80@raise-unbound-error G32b6@id) (void)) (if (not (and (eq? G32bc@type '$rtd) (list? (G2d7e@binding-value G32ba@b)))) (G3044@syntax-violation '#f '"not a record type" G32aa@e) (void)) (G2f7d@chi-expr (car (G2d7e@binding-value G32ba@b)) G32ab@r G32ac@mr))))) (G2d7c@binding-type G32ba@b))) (G2d78@label->binding G32b8@lab G32ab@r))) (G2d74@id->label G32b6@id))) G32b2@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G32b0@t))) (G2f59@syntax-dispatch G32b0@t '(_ any)))) G32aa@e))) (set! G2efb@record-constructor-descriptor-transformer (lambda (G32be@e G32bf@r G32c0@mr) ((lambda (G32c4@t) ((lambda (G32c6@ls/false) (if (and G32c6@ls/false (apply (lambda (G32c8@id) (G2d5a@id? G32c8@id)) G32c6@ls/false)) (apply (lambda (G32ca@id) ((lambda (G32cc@lab) ((lambda (G32ce@b) ((lambda (G32d0@type) ((lambda () (begin (if (not G32cc@lab) (G2d80@raise-unbound-error G32ca@id) (void)) (if (not (and (eq? G32d0@type '$rtd) (list? (G2d7e@binding-value G32ce@b)))) (G3044@syntax-violation '#f '"invalid type" G32be@e) (void)) (G2f7d@chi-expr (cadr (G2d7e@binding-value G32ce@b)) G32bf@r G32c0@mr))))) (G2d7c@binding-type G32ce@b))) (G2d78@label->binding G32cc@lab G32bf@r))) (G2d74@id->label G32ca@id))) G32c6@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G32c4@t))) (G2f59@syntax-dispatch G32c4@t '(_ any)))) G32be@e))) (set! G2efd@when-macro (lambda (G32d2@e) ((lambda (G32d4@t) ((lambda (G32d6@ls/false) (if G32d6@ls/false (apply (lambda (G32d8@test G32d9@e G32da@e*) (G2f0f@bless (list 'if G32d8@test (cons 'begin (cons G32d9@e G32da@e*))))) G32d6@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G32d4@t))) (G2f59@syntax-dispatch G32d4@t '(_ any any . each-any)))) G32d2@e))) (set! G2eff@unless-macro (lambda (G32de@e) ((lambda (G32e0@t) ((lambda (G32e2@ls/false) (if G32e2@ls/false (apply (lambda (G32e4@test G32e5@e G32e6@e*) (G2f0f@bless (list 'if (list 'not G32e4@test) (cons 'begin (cons G32e5@e G32e6@e*))))) G32e2@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G32e0@t))) (G2f59@syntax-dispatch G32e0@t '(_ any any . each-any)))) G32de@e))) (set! G2f01@if-transformer (lambda (G32ea@e G32eb@r G32ec@mr) ((lambda (G32f0@t) ((lambda (G32f2@ls/false) (if G32f2@ls/false (apply (lambda (G32f4@e0 G32f5@e1 G32f6@e2) (list 'if (G2f7d@chi-expr G32f4@e0 G32eb@r G32ec@mr) (G2f7d@chi-expr G32f5@e1 G32eb@r G32ec@mr) (G2f7d@chi-expr G32f6@e2 G32eb@r G32ec@mr))) G32f2@ls/false) ((lambda (G32fa@t) ((lambda (G32fc@ls/false) (if G32fc@ls/false (apply (lambda (G32fe@e0 G32ff@e1) (list 'if (G2f7d@chi-expr G32fe@e0 G32eb@r G32ec@mr) (G2f7d@chi-expr G32ff@e1 G32eb@r G32ec@mr) (G2cb8@G2c2a@build-void))) G32fc@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G32fa@t))) (G2f59@syntax-dispatch G32fa@t '(_ any any)))) G32f0@t))) (G2f59@syntax-dispatch G32f0@t '(_ any any any)))) G32ea@e))) (set! G2f03@and-transformer (lambda (G3302@e G3303@r G3304@mr) ((lambda (G3308@t) ((lambda (G330a@ls/false) (if G330a@ls/false (apply (lambda (G330c@e*) (cons 'and (G2f79@chi-expr* G330c@e* G3303@r G3304@mr))) G330a@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3308@t))) (G2f59@syntax-dispatch G3308@t '(_ . each-any)))) G3302@e))) (set! G2f05@or-transformer (lambda (G330e@e G330f@r G3310@mr) ((lambda (G3314@t) ((lambda (G3316@ls/false) (if G3316@ls/false (apply (lambda (G3318@e*) (cons 'or (G2f79@chi-expr* G3318@e* G330f@r G3310@mr))) G3316@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3314@t))) (G2f59@syntax-dispatch G3314@t '(_ . each-any)))) G330e@e))) (set! G2f07@case-macro (lambda (G331a@e) ((lambda (G331d@build-last G331f@build-one) (begin (set! G331d@build-last (lambda (G3344@cls) ((lambda (G3346@t) ((lambda (G3348@ls/false) (if G3348@ls/false (apply (lambda (G334a@e G334b@e*) (cons 'begin (cons G334a@e G334b@e*))) G3348@ls/false) ((lambda (G334e@t) ((lambda (G3350@ls/false) (if G3350@ls/false (apply (lambda () (G331f@build-one G3344@cls '(if #f #f))) G3350@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G334e@t))) (G2f59@syntax-dispatch G334e@t '_))) G3346@t))) (G2f59@syntax-dispatch G3346@t '(#(scheme-id else) any . each-any)))) G3344@cls))) (set! G331f@build-one (lambda (G3336@cls G3337@k) ((lambda (G333a@t) ((lambda (G333c@ls/false) (if G333c@ls/false (apply (lambda (G333e@d* G333f@e G3340@e*) (list 'if (list 'memv 't (list 'quote G333e@d*)) (cons 'begin (cons G333f@e G3340@e*)) G3337@k)) G333c@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G333a@t))) (G2f59@syntax-dispatch G333a@t '(each-any any . each-any)))) G3336@cls))) ((lambda (G3320@t) ((lambda (G3322@ls/false) (if G3322@ls/false (apply (lambda (G3324@expr) (G2f0f@bless (cons 'let (cons (list (list 't G3324@expr)) '((if #f #f)))))) G3322@ls/false) ((lambda (G3326@t) ((lambda (G3328@ls/false) (if G3328@ls/false (apply (lambda (G332a@expr G332b@cls G332c@cls*) (G2f0f@bless (list 'let (list (list 't G332a@expr)) ((letrec ((G3330@f (lambda (G3332@cls G3333@cls*) (if (null? G3333@cls*) (G331d@build-last G3332@cls) (G331f@build-one G3332@cls (G3330@f (car G3333@cls*) (cdr G3333@cls*))))))) G3330@f) G332b@cls G332c@cls*)))) G3328@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3326@t))) (G2f59@syntax-dispatch G3326@t '(_ any any . each-any)))) G3320@t))) (G2f59@syntax-dispatch G3320@t '(_ any)))) G331a@e))) '#f '#f))) (set! G2f09@quote-transformer (lambda (G3352@e G3353@r G3354@mr) ((lambda (G3358@t) ((lambda (G335a@ls/false) (if G335a@ls/false (apply (lambda (G335c@datum) (list 'quote (G2d70@stx->datum G335c@datum))) G335a@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3358@t))) (G2f59@syntax-dispatch G3358@t '(_ any)))) G3352@e))) (set! G2f0b@case-lambda-transformer (lambda (G335e@e G335f@r G3360@mr) ((lambda (G3364@t) ((lambda (G3366@ls/false) (if G3366@ls/false (apply (lambda (G3368@fmls* G3369@b* G336a@b**) (call-with-values (lambda () (G2f85@chi-lambda-clause* G335e@e G3368@fmls* (map cons G3369@b* G336a@b**) G335f@r G3360@mr)) (lambda (G3370@G336e G3371@G336f) ((lambda (G3374@body* G3375@fmls*) (G2cb5@G2bf4@build-case-lambda '#f G3375@fmls* G3374@body*)) G3371@G336f G3370@G336e)))) G3366@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3364@t))) (G2f59@syntax-dispatch G3364@t '(_ . #(each (any any . each-any)))))) G335e@e))) (set! G2f0d@lambda-transformer (lambda (G3378@e G3379@r G337a@mr) ((lambda (G337e@t) ((lambda (G3380@ls/false) (if G3380@ls/false (apply (lambda (G3382@fmls G3383@b G3384@b*) (call-with-values (lambda () (G2f83@chi-lambda-clause G3378@e G3382@fmls (cons G3383@b G3384@b*) G3379@r G337a@mr)) (lambda (G338a@G3388 G338b@G3389) ((lambda (G338e@body G338f@fmls) (G2cb4@G2bf2@build-lambda '#f G338f@fmls G338e@body)) G338b@G3389 G338a@G3388)))) G3380@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G337e@t))) (G2f59@syntax-dispatch G337e@t '(_ any any . each-any)))) G3378@e))) (set! G2f0f@bless (lambda (G3392@x) (G2d42@mkstx ((letrec ((G3394@f (lambda (G3396@x) (if (G2d22@stx? G3396@x) G3396@x (if (pair? G3396@x) (cons (G3394@f (car G3396@x)) (G3394@f (cdr G3396@x))) (if (symbol? G3396@x) (G2ee3@scheme-stx G3396@x) (if (vector? G3396@x) (vector-map G3394@f G3396@x) G3396@x))))))) G3394@f) G3392@x) '() '() '()))) (set! G2f11@with-syntax-macro (lambda (G3398@e) ((lambda (G339a@t) ((lambda (G339c@ls/false) (if G339c@ls/false (apply (lambda (G339e@pat* G339f@expr* G33a0@b G33a1@b*) ((lambda (G33a6@idn*) (begin (G2f81@verify-formals (map car G33a6@idn*) G3398@e) ((lambda (G33a8@t*) (G2f0f@bless (list 'let (map list G33a8@t* G339f@expr*) ((letrec ((G33aa@f (lambda (G33ac@pat* G33ad@t*) (if (null? G33ac@pat*) (cons 'begin (cons '#f (cons G33a0@b G33a1@b*))) (list 'syntax-case (car G33ad@t*) '() (list (car G33ac@pat*) (G33aa@f (cdr G33ac@pat*) (cdr G33ad@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33ac@pat*)) (car G33ad@t*)))))))) G33aa@f) G339e@pat* G33a8@t*)))) (G3032@generate-temporaries G339f@expr*)))) ((letrec ((G33b0@f (lambda (G33b2@pat*) (if (null? G33b2@pat*) '() (call-with-values (lambda () (G2f57@convert-pattern (car G33b2@pat*) '())) (lambda (G33b6@G33b4 G33b7@G33b5) ((lambda (G33ba@idn* G33bb@pat) (append G33ba@idn* (G33b0@f (cdr G33b2@pat*)))) G33b7@G33b5 G33b6@G33b4))))))) G33b0@f) G339e@pat*))) G339c@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G339a@t))) (G2f59@syntax-dispatch G339a@t '(_ #(each (any any)) any . each-any)))) G3398@e))) (set! G2f13@invalid-fmls-error (lambda (G33be@stx G33bf@fmls) ((lambda (G33c2@t) ((lambda (G33c4@ls/false) (if G33c4@ls/false (apply (lambda (G33c6@id* G33c7@last) ((letrec ((G33ca@f (lambda (G33cc@id*) (if (null? G33cc@id*) (values) (if (not (G2d5a@id? (car G33cc@id*))) (G3044@syntax-violation '#f '"not an identifier" G33be@stx (car G33cc@id*)) (begin (G33ca@f (cdr G33cc@id*)) (if (G2d68@bound-id-member? (car G33cc@id*) (cdr G33cc@id*)) (G3044@syntax-violation '#f '"duplicate binding" G33be@stx (car G33cc@id*)) (void)))))))) G33ca@f) (if (G2d5a@id? G33c7@last) (cons G33c7@last G33c6@id*) (if (G2d50@syntax-null? G33c7@last) G33c6@id* (G3044@syntax-violation '#f '"not an identifier" G33be@stx G33c7@last))))) G33c4@ls/false) ((lambda (G33ce@t) ((lambda (G33d0@ls/false) (if G33d0@ls/false (apply (lambda () (G3044@syntax-violation '#f '"malformed binding form" G33be@stx G33bf@fmls)) G33d0@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G33ce@t))) (G2f59@syntax-dispatch G33ce@t '_))) G33c2@t))) (G2f59@syntax-dispatch G33c2@t '#(each+ any () any)))) G33bf@fmls))) (set! G2f15@let-macro (lambda (G33d2@stx) ((lambda (G33d4@t) ((lambda (G33d6@ls/false) (if G33d6@ls/false (apply (lambda (G33d8@lhs* G33d9@rhs* G33da@b G33db@b*) (if (G2d64@valid-bound-ids? G33d8@lhs*) (G2f0f@bless (cons (cons 'lambda (cons G33d8@lhs* (cons G33da@b G33db@b*))) G33d9@rhs*)) (G2f13@invalid-fmls-error G33d2@stx G33d8@lhs*))) G33d6@ls/false) ((lambda (G33e0@t) ((lambda (G33e2@ls/false) (if (and G33e2@ls/false (apply (lambda (G33e4@f G33e5@lhs* G33e6@rhs* G33e7@b G33e8@b*) (G2d5a@id? G33e4@f)) G33e2@ls/false)) (apply (lambda (G33ee@f G33ef@lhs* G33f0@rhs* G33f1@b G33f2@b*) (if (G2d64@valid-bound-ids? G33ef@lhs*) (G2f0f@bless (cons (list 'letrec (list (list G33ee@f (cons 'lambda (cons G33ef@lhs* (cons G33f1@b G33f2@b*))))) G33ee@f) G33f0@rhs*)) (G2f13@invalid-fmls-error G33d2@stx G33ef@lhs*))) G33e2@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G33e0@t))) (G2f59@syntax-dispatch G33e0@t '(_ any #(each (any any)) any . each-any)))) G33d4@t))) (G2f59@syntax-dispatch G33d4@t '(_ #(each (any any)) any . each-any)))) G33d2@stx))) (set! G2f17@let-values-macro (lambda (G33f8@stx) ((lambda (G33fb@rename G33fd@rename*) (begin (set! G33fb@rename (lambda (G345d@x G345e@old* G345f@new*) (begin (if (not (G2d5a@id? G345d@x)) (G3044@syntax-violation '#f '"not an indentifier" G33f8@stx G345d@x) (void)) (if (G2d68@bound-id-member? G345d@x G345e@old*) (G3044@syntax-violation '#f '"duplicate binding" G33f8@stx G345d@x) (void)) ((lambda (G3463@y) (values G3463@y (cons G345d@x G345e@old*) (cons G3463@y G345f@new*))) (gensym (G304a@syntax->datum G345d@x)))))) (set! G33fd@rename* (lambda (G344b@x* G344c@old* G344d@new*) (if (null? G344b@x*) (values '() G344c@old* G344d@new*) (call-with-values (lambda () (G33fb@rename (car G344b@x*) G344c@old* G344d@new*)) (lambda (G3451@x G3452@old* G3453@new*) (call-with-values (lambda () (G33fd@rename* (cdr G344b@x*) G3452@old* G3453@new*)) (lambda (G3457@x* G3458@old* G3459@new*) (values (cons G3451@x G3457@x*) G3458@old* G3459@new*)))))))) ((lambda (G33fe@t) ((lambda (G3400@ls/false) (if G3400@ls/false (apply (lambda (G3402@b G3403@b*) (cons* (G2f0f@bless 'let) '() G3402@b G3403@b*)) G3400@ls/false) ((lambda (G3406@t) ((lambda (G3408@ls/false) (if G3408@ls/false (apply (lambda (G340a@lhs* G340b@rhs* G340c@b G340d@b*) (G2f0f@bless ((letrec ((G3412@f (lambda (G3414@lhs* G3415@rhs* G3416@old* G3417@new*) (if (null? G3414@lhs*) (cons 'let (cons (map list G3416@old* G3417@new*) (cons G340c@b G340d@b*))) ((lambda (G341c@t) ((lambda (G341e@ls/false) (if G341e@ls/false (apply (lambda (G3420@x*) (call-with-values (lambda () (G33fd@rename* G3420@x* G3416@old* G3417@new*)) (lambda (G3425@G3422 G3426@G3423 G3427@G3424) ((lambda (G342b@new* G342c@old* G342d@y*) (list 'call-with-values (list 'lambda '() (car G3415@rhs*)) (list 'lambda G342d@y* (G3412@f (cdr G3414@lhs*) (cdr G3415@rhs*) G342c@old* G342b@new*)))) G3427@G3424 G3426@G3423 G3425@G3422)))) G341e@ls/false) ((lambda (G3431@t) ((lambda (G3433@ls/false) (if G3433@ls/false (apply (lambda (G3435@x* G3436@x) (call-with-values (lambda () (G33fb@rename G3436@x G3416@old* G3417@new*)) (lambda (G3439@y G343a@old* G343b@new*) (call-with-values (lambda () (G33fd@rename* G3435@x* G343a@old* G343b@new*)) (lambda (G343f@y* G3440@old* G3441@new*) (list 'call-with-values (list 'lambda '() (car G3415@rhs*)) (list 'lambda (append G343f@y* G3439@y) (G3412@f (cdr G3414@lhs*) (cdr G3415@rhs*) G3440@old* G3441@new*)))))))) G3433@ls/false) ((lambda (G3445@t) ((lambda (G3447@ls/false) (if G3447@ls/false (apply (lambda (G3449@others) (G3044@syntax-violation '#f '"malformed bindings" G33f8@stx G3449@others)) G3447@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3445@t))) (G2f59@syntax-dispatch G3445@t 'any))) G3431@t))) (G2f59@syntax-dispatch G3431@t '#(each+ any () any)))) G341c@t))) (G2f59@syntax-dispatch G341c@t 'each-any))) (car G3414@lhs*)))))) G3412@f) G340a@lhs* G340b@rhs* '() '()))) G3408@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3406@t))) (G2f59@syntax-dispatch G3406@t '(_ #(each (any any)) any . each-any)))) G33fe@t))) (G2f59@syntax-dispatch G33fe@t '(_ () any . each-any)))) G33f8@stx))) '#f '#f))) (set! G2f19@let*-values-macro (lambda (G3465@stx) ((lambda (G3468@check) (begin (set! G3468@check (lambda (G3497@x*) (if (not (null? G3497@x*)) ((lambda (G3499@x) (begin (if (not (G2d5a@id? G3499@x)) (G3044@syntax-violation '#f '"not an identifier" G3465@stx G3499@x) (void)) (G3468@check (cdr G3497@x*)) (if (G2d68@bound-id-member? G3499@x (cdr G3497@x*)) (G3044@syntax-violation '#f '"duplicate identifier" G3465@stx G3499@x) (void)))) (car G3497@x*)) (void)))) ((lambda (G3469@t) ((lambda (G346b@ls/false) (if G346b@ls/false (apply (lambda (G346d@b G346e@b*) (cons* (G2f0f@bless 'let) '() G346d@b G346e@b*)) G346b@ls/false) ((lambda (G3471@t) ((lambda (G3473@ls/false) (if G3473@ls/false (apply (lambda (G3475@lhs* G3476@rhs* G3477@b G3478@b*) (G2f0f@bless ((letrec ((G347d@f (lambda (G347f@lhs* G3480@rhs*) (if (null? G347f@lhs*) (cons 'begin (cons G3477@b G3478@b*)) ((lambda (G3483@t) ((lambda (G3485@ls/false) (if G3485@ls/false (apply (lambda (G3487@x*) (begin (G3468@check G3487@x*) (list 'call-with-values (list 'lambda '() (car G3480@rhs*)) (list 'lambda G3487@x* (G347d@f (cdr G347f@lhs*) (cdr G3480@rhs*)))))) G3485@ls/false) ((lambda (G3489@t) ((lambda (G348b@ls/false) (if G348b@ls/false (apply (lambda (G348d@x* G348e@x) (begin (G3468@check (cons G348e@x G348d@x*)) (list 'call-with-values (list 'lambda '() (car G3480@rhs*)) (list 'lambda (append G348d@x* G348e@x) (G347d@f (cdr G347f@lhs*) (cdr G3480@rhs*)))))) G348b@ls/false) ((lambda (G3491@t) ((lambda (G3493@ls/false) (if G3493@ls/false (apply (lambda (G3495@others) (G3044@syntax-violation '#f '"malformed bindings" G3465@stx G3495@others)) G3493@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3491@t))) (G2f59@syntax-dispatch G3491@t 'any))) G3489@t))) (G2f59@syntax-dispatch G3489@t '#(each+ any () any)))) G3483@t))) (G2f59@syntax-dispatch G3483@t 'each-any))) (car G347f@lhs*)))))) G347d@f) G3475@lhs* G3476@rhs*))) G3473@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3471@t))) (G2f59@syntax-dispatch G3471@t '(_ #(each (any any)) any . each-any)))) G3469@t))) (G2f59@syntax-dispatch G3469@t '(_ () any . each-any)))) G3465@stx))) '#f))) (set! G2f1b@trace-lambda-macro (lambda (G349b@stx) ((lambda (G349d@t) ((lambda (G349f@ls/false) (if G349f@ls/false (apply (lambda (G34a1@who G34a2@fmls G34a3@b G34a4@b*) (if (G2d64@valid-bound-ids? G34a2@fmls) (G2f0f@bless (list 'make-traced-procedure (list 'quote G34a1@who) (cons 'lambda (cons G34a2@fmls (cons G34a3@b G34a4@b*))))) (G2f13@invalid-fmls-error G349b@stx G34a2@fmls))) G349f@ls/false) ((lambda (G34a9@t) ((lambda (G34ab@ls/false) (if G34ab@ls/false (apply (lambda (G34ad@who G34ae@fmls G34af@last G34b0@b G34b1@b*) (if (G2d64@valid-bound-ids? (cons G34af@last G34ae@fmls)) (G2f0f@bless (list 'make-traced-procedure (list 'quote G34ad@who) (cons 'lambda (cons (append G34ae@fmls G34af@last) (cons G34b0@b G34b1@b*))))) (G2f13@invalid-fmls-error G349b@stx (append G34ae@fmls G34af@last)))) G34ab@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G34a9@t))) (G2f59@syntax-dispatch G34a9@t '(_ any #(each+ any () any) any . each-any)))) G349d@t))) (G2f59@syntax-dispatch G349d@t '(_ any each-any any . each-any)))) G349b@stx))) (set! G2f1d@trace-define-macro (lambda (G34b7@stx) ((lambda (G34b9@t) ((lambda (G34bb@ls/false) (if G34bb@ls/false (apply (lambda (G34bd@who G34be@fmls G34bf@b G34c0@b*) (if (G2d64@valid-bound-ids? G34be@fmls) (G2f0f@bless (list 'define G34bd@who (list 'make-traced-procedure (list 'quote G34bd@who) (cons 'lambda (cons G34be@fmls (cons G34bf@b G34c0@b*)))))) (G2f13@invalid-fmls-error G34b7@stx G34be@fmls))) G34bb@ls/false) ((lambda (G34c5@t) ((lambda (G34c7@ls/false) (if G34c7@ls/false (apply (lambda (G34c9@who G34ca@fmls G34cb@last G34cc@b G34cd@b*) (if (G2d64@valid-bound-ids? (cons G34cb@last G34ca@fmls)) (G2f0f@bless (list 'define G34c9@who (list 'make-traced-procedure (list 'quote G34c9@who) (cons 'lambda (cons (append G34ca@fmls G34cb@last) (cons G34cc@b G34cd@b*)))))) (G2f13@invalid-fmls-error G34b7@stx (append G34ca@fmls G34cb@last)))) G34c7@ls/false) ((lambda (G34d3@t) ((lambda (G34d5@ls/false) (if G34d5@ls/false (apply (lambda (G34d7@who G34d8@expr) (if (G2d5a@id? G34d7@who) (G2f0f@bless (list 'define G34d7@who (list 'let (list (list 'v G34d8@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34d7@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3044@syntax-violation '#f '"invalid name" G34b7@stx))) G34d5@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G34d3@t))) (G2f59@syntax-dispatch G34d3@t '(_ any any)))) G34c5@t))) (G2f59@syntax-dispatch G34c5@t '(_ (any . #(each+ any () any)) any . each-any)))) G34b9@t))) (G2f59@syntax-dispatch G34b9@t '(_ (any . each-any) any . each-any)))) G34b7@stx))) (set! G2f1f@trace-define-syntax-macro (lambda (G34db@stx) ((lambda (G34dd@t) ((lambda (G34df@ls/false) (if G34df@ls/false (apply (lambda (G34e1@who G34e2@expr) (if (G2d5a@id? G34e1@who) (G2f0f@bless (list 'define-syntax G34e1@who (list 'make-traced-macro (list 'quote G34e1@who) G34e2@expr))) (G3044@syntax-violation '#f '"invalid name" G34db@stx))) G34df@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G34dd@t))) (G2f59@syntax-dispatch G34dd@t '(_ any any)))) G34db@stx))) (set! G2f21@trace-let/rec-syntax (lambda (G34e5@who) (lambda (G34e7@stx) ((lambda (G34e9@t) ((lambda (G34eb@ls/false) (if G34eb@ls/false (apply (lambda (G34ed@lhs* G34ee@rhs* G34ef@b G34f0@b*) (if (G2d64@valid-bound-ids? G34ed@lhs*) ((lambda (G34f5@rhs*) (G2f0f@bless (cons G34e5@who (cons (map list G34ed@lhs* G34f5@rhs*) (cons G34ef@b G34f0@b*))))) (map (lambda (G34f7@lhs G34f8@rhs) (list 'make-traced-macro (list 'quote G34f7@lhs) G34f8@rhs)) G34ed@lhs* G34ee@rhs*)) (G2f13@invalid-fmls-error G34e7@stx G34ed@lhs*))) G34eb@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G34e9@t))) (G2f59@syntax-dispatch G34e9@t '(_ #(each (any any)) any . each-any)))) G34e7@stx)))) (set! G2f23@trace-let-syntax-macro (G2f21@trace-let/rec-syntax 'let-syntax)) (set! G2f25@trace-letrec-syntax-macro (G2f21@trace-let/rec-syntax 'letrec-syntax)) (set! G2f27@guard-macro (lambda (G34fb@x) ((lambda (G34fe@gen-clauses) (begin (set! G34fe@gen-clauses (lambda (G3515@con G3516@outerk G3517@clause*) ((lambda (G351c@f G351e@f*) (begin (set! G351c@f (lambda (G3551@x G3552@k) ((lambda (G3555@t) ((lambda (G3557@ls/false) (if G3557@ls/false (apply (lambda (G3559@e G355a@p) ((lambda (G355d@t) (list 'let (list (list G355d@t G3559@e)) (list 'if G355d@t (list G355a@p G355d@t) G3552@k))) (gensym))) G3557@ls/false) ((lambda (G355f@t) ((lambda (G3561@ls/false) (if G3561@ls/false (apply (lambda (G3563@e) ((lambda (G3565@t) (list 'let (list (list G3565@t G3563@e)) (list 'if G3565@t G3565@t G3552@k))) (gensym))) G3561@ls/false) ((lambda (G3567@t) ((lambda (G3569@ls/false) (if G3569@ls/false (apply (lambda (G356b@e G356c@v G356d@v*) (list 'if G356b@e (cons 'begin (cons G356c@v G356d@v*)) G3552@k)) G3569@ls/false) ((lambda (G3571@t) ((lambda (G3573@ls/false) (if G3573@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid guard clause" G3551@x)) G3573@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3571@t))) (G2f59@syntax-dispatch G3571@t '_))) G3567@t))) (G2f59@syntax-dispatch G3567@t '(any any . each-any)))) G355f@t))) (G2f59@syntax-dispatch G355f@t '(any)))) G3555@t))) (G2f59@syntax-dispatch G3555@t '(any #(scheme-id =>) any)))) G3551@x))) (set! G351e@f* (lambda (G3529@x*) ((lambda (G352b@t) ((lambda (G352d@ls/false) (if G352d@ls/false (apply (lambda () ((lambda (G352f@g) (values (list G352f@g (list 'lambda '() (list 'raise-continuable G3515@con))) G352f@g)) (gensym))) G352d@ls/false) ((lambda (G3531@t) ((lambda (G3533@ls/false) (if G3533@ls/false (apply (lambda (G3535@e G3536@e*) (values (cons 'begin (cons G3535@e G3536@e*)) '#f)) G3533@ls/false) ((lambda (G3539@t) ((lambda (G353b@ls/false) (if G353b@ls/false (apply (lambda (G353d@cls G353e@cls*) (call-with-values (lambda () (G351e@f* G353e@cls*)) (lambda (G3543@G3541 G3544@G3542) ((lambda (G3547@g G3548@e) (values (G351c@f G353d@cls G3548@e) G3547@g)) G3544@G3542 G3543@G3541)))) G353b@ls/false) ((lambda (G354b@t) ((lambda (G354d@ls/false) (if G354d@ls/false (apply (lambda (G354f@others) (G3044@syntax-violation '#f '"invalid guard clause" G354f@others)) G354d@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G354b@t))) (G2f59@syntax-dispatch G354b@t 'any))) G3539@t))) (G2f59@syntax-dispatch G3539@t '(any . any)))) G3531@t))) (G2f59@syntax-dispatch G3531@t '((#(scheme-id else) any . each-any))))) G352b@t))) (G2f59@syntax-dispatch G352b@t '()))) G3529@x*))) (call-with-values (lambda () (G351e@f* G3517@clause*)) (lambda (G3521@G351f G3522@G3520) ((lambda (G3525@raisek G3526@code) (if G3525@raisek (list (list 'call/cc (list 'lambda (list G3525@raisek) (list G3516@outerk (list 'lambda '() G3526@code))))) (list G3516@outerk (list 'lambda '() G3526@code)))) G3522@G3520 G3521@G351f))))) '#f '#f))) ((lambda (G34ff@t) ((lambda (G3501@ls/false) (if (and G3501@ls/false (apply (lambda (G3503@con G3504@clause* G3505@b G3506@b*) (G2d5a@id? G3503@con)) G3501@ls/false)) (apply (lambda (G350b@con G350c@clause* G350d@b G350e@b*) ((lambda (G3513@outerk) (G2f0f@bless (list (list 'call/cc (list 'lambda (list G3513@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G350b@con) (G34fe@gen-clauses G350b@con G3513@outerk G350c@clause*)) (cons 'lambda (cons '() (cons G350d@b G350e@b*)))))))))) (gensym))) G3501@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G34ff@t))) (G2f59@syntax-dispatch G34ff@t '(_ (any . each-any) any . each-any)))) G34fb@x))) '#f))) (set! G2f29@define-enumeration-macro (lambda (G3575@stx) ((lambda (G3578@set? G357a@remove-dups) (begin (set! G3578@set? (lambda (G3591@x) (or (null? G3591@x) (and (not (memq (car G3591@x) (cdr G3591@x))) (G3578@set? (cdr G3591@x)))))) (set! G357a@remove-dups (lambda (G358f@ls) (if (null? G358f@ls) '() (cons (car G358f@ls) (G357a@remove-dups (remq (car G358f@ls) (cdr G358f@ls))))))) ((lambda (G357b@t) ((lambda (G357d@ls/false) (if (and G357d@ls/false (apply (lambda (G357f@name G3580@id* G3581@maker) (and (G2d5a@id? G357f@name) (G2d5a@id? G3581@maker) (for-all G2d5a@id? G3580@id*))) G357d@ls/false)) (apply (lambda (G3585@name G3586@id* G3587@maker) ((lambda (G358b@name* G358c@mk) (G2f0f@bless (list 'begin (list 'define G358c@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G358b@name*)))) (list 'define-syntax G3585@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G358b@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3585@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3587@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3587@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G358b@name*)) (cons 'syntax-violation (cons (list 'quote G3587@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G358c@mk '('(n* ...)))))))))))) (G357a@remove-dups (G304a@syntax->datum G3586@id*)) (gensym))) G357d@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G357b@t))) (G2f59@syntax-dispatch G357b@t '(_ any each-any any)))) G3575@stx))) '#f '#f))) (set! G2f2b@time-macro (lambda (G3593@stx) ((lambda (G3595@t) ((lambda (G3597@ls/false) (if G3597@ls/false (apply (lambda (G3599@expr) ((lambda (G359b@str) (G2f0f@bless (list 'time-it G359b@str (list 'lambda '() G3599@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G359f@G359d G35a0@G359e) ((lambda (G35a3@e G35a4@p) (begin (write (G304a@syntax->datum G3599@expr) G35a4@p) (G35a3@e))) G35a0@G359e G359f@G359d))))) G3597@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3595@t))) (G2f59@syntax-dispatch G3595@t '(_ any)))) G3593@stx))) (set! G2f2d@delay-macro (lambda (G35a7@stx) ((lambda (G35a9@t) ((lambda (G35ab@ls/false) (if G35ab@ls/false (apply (lambda (G35ad@expr) (G2f0f@bless (list 'make-promise (list 'lambda '() G35ad@expr)))) G35ab@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G35a9@t))) (G2f59@syntax-dispatch G35a9@t '(_ any)))) G35a7@stx))) (set! G2f2f@assert-macro (lambda (G35af@stx) ((lambda (G35b1@t) ((lambda (G35b3@ls/false) (if G35b3@ls/false (apply (lambda (G35b5@expr) ((lambda (G35b7@pos) (G2f0f@bless (list 'unless G35b5@expr (list 'assertion-error (list 'quote G35b5@expr) (list 'quote G35b7@pos))))) (or (G303c@expression-position G35af@stx) (G303c@expression-position G35b5@expr)))) G35b3@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G35b1@t))) (G2f59@syntax-dispatch G35b1@t '(_ any)))) G35af@stx))) (set! G2f31@endianness-macro (lambda (G35b9@stx) ((lambda (G35bb@t) ((lambda (G35bd@ls/false) (if G35bd@ls/false (apply (lambda (G35bf@e) ((lambda (G35c1@t) (if (memv G35c1@t '(little)) (G2f0f@bless ''little) (if (memv G35c1@t '(big)) (G2f0f@bless ''big) (G3044@syntax-violation '#f '"endianness must be big or little" G35b9@stx)))) (G304a@syntax->datum G35bf@e))) G35bd@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G35bb@t))) (G2f59@syntax-dispatch G35bb@t '(_ any)))) G35b9@stx))) (set! G2f33@identifier-syntax-macro (lambda (G35c3@stx) ((lambda (G35c5@t) ((lambda (G35c7@ls/false) (if G35c7@ls/false (apply (lambda (G35c9@expr) (G2f0f@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35c9@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35c9@expr) '((syntax (e* ...)))))))))) G35c7@ls/false) ((lambda (G35cb@t) ((lambda (G35cd@ls/false) (if (and G35cd@ls/false (apply (lambda (G35cf@id1 G35d0@expr1 G35d1@id2 G35d2@expr2 G35d3@expr3) (and (G2d5a@id? G35cf@id1) (G2d5a@id? G35d1@id2) (G2d5a@id? G35d2@expr2))) G35cd@ls/false)) (apply (lambda (G35d9@id1 G35da@expr1 G35db@id2 G35dc@expr2 G35dd@expr3) (G2f0f@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35da@expr1)) (list (list 'set! 'id G35dc@expr2) (list 'syntax G35dd@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35da@expr1 '(e* ...))))))))) G35cd@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G35cb@t))) (G2f59@syntax-dispatch G35cb@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35c5@t))) (G2f59@syntax-dispatch G35c5@t '(_ any)))) G35c3@stx))) (set! G2f35@do-macro (lambda (G35e3@stx) ((lambda (G35e6@bind) (begin (set! G35e6@bind (lambda (G35fd@x) ((lambda (G35ff@t) ((lambda (G3601@ls/false) (if G3601@ls/false (apply (lambda (G3603@x G3604@init) (list G3603@x G3604@init G3603@x)) G3601@ls/false) ((lambda (G3607@t) ((lambda (G3609@ls/false) (if G3609@ls/false (apply (lambda (G360b@x G360c@init G360d@step) (list G360b@x G360c@init G360d@step)) G3609@ls/false) ((lambda (G3611@t) ((lambda (G3613@ls/false) (if G3613@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid binding" G35e3@stx)) G3613@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3611@t))) (G2f59@syntax-dispatch G3611@t '_))) G3607@t))) (G2f59@syntax-dispatch G3607@t '(any any any)))) G35ff@t))) (G2f59@syntax-dispatch G35ff@t '(any any)))) G35fd@x))) ((lambda (G35e7@t) ((lambda (G35e9@ls/false) (if G35e9@ls/false (apply (lambda (G35eb@binding* G35ec@test G35ed@expr* G35ee@command*) ((lambda (G35f3@t) ((lambda (G35f5@ls/false) (if G35f5@ls/false (apply (lambda (G35f7@x* G35f8@init* G35f9@step*) (if (G2d64@valid-bound-ids? G35f7@x*) (G2f0f@bless (list 'letrec (list (list 'loop (list 'lambda G35f7@x* (list 'if G35ec@test (cons 'begin (cons '(if #f #f) G35ed@expr*)) (cons 'begin (append G35ee@command* (list (cons 'loop G35f9@step*)))))))) (cons 'loop G35f8@init*))) (G3044@syntax-violation '#f '"invalid bindings" G35e3@stx))) G35f5@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G35f3@t))) (G2f59@syntax-dispatch G35f3@t '#(each (any any any))))) (map G35e6@bind G35eb@binding*))) G35e9@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G35e7@t))) (G2f59@syntax-dispatch G35e7@t '(_ each-any (any . each-any) . each-any)))) G35e3@stx))) '#f))) (set! G2f37@let*-macro (lambda (G3615@stx) ((lambda (G3617@t) ((lambda (G3619@ls/false) (if (and G3619@ls/false (apply (lambda (G361b@lhs* G361c@rhs* G361d@b G361e@b*) (for-all G2d5a@id? G361b@lhs*)) G3619@ls/false)) (apply (lambda (G3623@lhs* G3624@rhs* G3625@b G3626@b*) (G2f0f@bless ((letrec ((G362b@f (lambda (G362d@x*) (if (null? G362d@x*) (cons 'let (cons '() (cons G3625@b G3626@b*))) (list 'let (list (car G362d@x*)) (G362b@f (cdr G362d@x*))))))) G362b@f) (map list G3623@lhs* G3624@rhs*)))) G3619@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3617@t))) (G2f59@syntax-dispatch G3617@t '(_ #(each (any any)) any . each-any)))) G3615@stx))) (set! G2f39@or-macro (lambda (G362f@stx) ((lambda (G3631@t) ((lambda (G3633@ls/false) (if G3633@ls/false (apply (lambda () '#f) G3633@ls/false) ((lambda (G3635@t) ((lambda (G3637@ls/false) (if G3637@ls/false (apply (lambda (G3639@e G363a@e*) (G2f0f@bless ((letrec ((G363d@f (lambda (G363f@e G3640@e*) (if (null? G3640@e*) (list 'begin '#f G363f@e) (list 'let (list (list 't G363f@e)) (list 'if 't 't (G363d@f (car G3640@e*) (cdr G3640@e*)))))))) G363d@f) G3639@e G363a@e*))) G3637@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3635@t))) (G2f59@syntax-dispatch G3635@t '(_ any . each-any)))) G3631@t))) (G2f59@syntax-dispatch G3631@t '(_)))) G362f@stx))) (set! G2f3b@and-macro (lambda (G3643@stx) ((lambda (G3645@t) ((lambda (G3647@ls/false) (if G3647@ls/false (apply (lambda () '#t) G3647@ls/false) ((lambda (G3649@t) ((lambda (G364b@ls/false) (if G364b@ls/false (apply (lambda (G364d@e G364e@e*) (G2f0f@bless ((letrec ((G3651@f (lambda (G3653@e G3654@e*) (if (null? G3654@e*) (list 'begin '#f G3653@e) (cons 'if (cons G3653@e (cons (G3651@f (car G3654@e*) (cdr G3654@e*)) '(#f)))))))) G3651@f) G364d@e G364e@e*))) G364b@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3649@t))) (G2f59@syntax-dispatch G3649@t '(_ any . each-any)))) G3645@t))) (G2f59@syntax-dispatch G3645@t '(_)))) G3643@stx))) (set! G2f3d@cond-macro (lambda (G3657@stx) ((lambda (G3659@t) ((lambda (G365b@ls/false) (if G365b@ls/false (apply (lambda (G365d@cls G365e@cls*) (G2f0f@bless ((letrec ((G3661@f (lambda (G3663@cls G3664@cls*) (if (null? G3664@cls*) ((lambda (G3667@t) ((lambda (G3669@ls/false) (if G3669@ls/false (apply (lambda (G366b@e G366c@e*) (cons 'begin (cons G366b@e G366c@e*))) G3669@ls/false) ((lambda (G366f@t) ((lambda (G3671@ls/false) (if G3671@ls/false (apply (lambda (G3673@e G3674@p) (list 'let (list (list 't G3673@e)) (list 'if 't (cons G3674@p '(t))))) G3671@ls/false) ((lambda (G3677@t) ((lambda (G3679@ls/false) (if G3679@ls/false (apply (lambda (G367b@e) (cons 'or (cons G367b@e '((if #f #f))))) G3679@ls/false) ((lambda (G367d@t) ((lambda (G367f@ls/false) (if G367f@ls/false (apply (lambda (G3681@e G3682@e*) (list 'if G3681@e (cons 'begin G3682@e*))) G367f@ls/false) ((lambda (G3685@t) ((lambda (G3687@ls/false) (if G3687@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid last clause" G3657@stx)) G3687@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3685@t))) (G2f59@syntax-dispatch G3685@t '_))) G367d@t))) (G2f59@syntax-dispatch G367d@t '(any . each-any)))) G3677@t))) (G2f59@syntax-dispatch G3677@t '(any)))) G366f@t))) (G2f59@syntax-dispatch G366f@t '(any #(scheme-id =>) any)))) G3667@t))) (G2f59@syntax-dispatch G3667@t '(#(scheme-id else) any . each-any)))) G3663@cls) ((lambda (G3689@t) ((lambda (G368b@ls/false) (if G368b@ls/false (apply (lambda (G368d@e G368e@e*) (G3044@syntax-violation '#f '"incorrect position of keyword else" G3657@stx)) G368b@ls/false) ((lambda (G3691@t) ((lambda (G3693@ls/false) (if G3693@ls/false (apply (lambda (G3695@e G3696@p) (list 'let (list (list 't G3695@e)) (list 'if 't (cons G3696@p '(t)) (G3661@f (car G3664@cls*) (cdr G3664@cls*))))) G3693@ls/false) ((lambda (G3699@t) ((lambda (G369b@ls/false) (if G369b@ls/false (apply (lambda (G369d@e) (list 'or G369d@e (G3661@f (car G3664@cls*) (cdr G3664@cls*)))) G369b@ls/false) ((lambda (G369f@t) ((lambda (G36a1@ls/false) (if G36a1@ls/false (apply (lambda (G36a3@e G36a4@e*) (list 'if G36a3@e (cons 'begin G36a4@e*) (G3661@f (car G3664@cls*) (cdr G3664@cls*)))) G36a1@ls/false) ((lambda (G36a7@t) ((lambda (G36a9@ls/false) (if G36a9@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid last clause" G3657@stx)) G36a9@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G36a7@t))) (G2f59@syntax-dispatch G36a7@t '_))) G369f@t))) (G2f59@syntax-dispatch G369f@t '(any . each-any)))) G3699@t))) (G2f59@syntax-dispatch G3699@t '(any)))) G3691@t))) (G2f59@syntax-dispatch G3691@t '(any #(scheme-id =>) any)))) G3689@t))) (G2f59@syntax-dispatch G3689@t '(#(scheme-id else) any . each-any)))) G3663@cls))))) G3661@f) G365d@cls G365e@cls*))) G365b@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3659@t))) (G2f59@syntax-dispatch G3659@t '(_ any . each-any)))) G3657@stx))) (set! G2f3f@do-include (lambda (G36ab@stx G36ac@id G36ad@filename) ((lambda (G36b1@filename) (begin (if (not (and (string? G36b1@filename) (G2d5a@id? G36ac@id))) (G3044@syntax-violation '#f '"invalid syntax" G36ab@stx) (void)) (cons (G2f0f@bless 'begin) (with-input-from-file G36b1@filename (lambda () ((letrec ((G36b3@f (lambda (G36b5@ls) ((lambda (G36b7@x) (if (eof-object? G36b7@x) (reverse G36b5@ls) (G36b3@f (cons (G2d38@datum->stx G36ac@id G36b7@x) G36b5@ls)))) (G28e9@G2812@read-annotated))))) G36b3@f) '())))))) (G2d70@stx->datum G36ad@filename)))) (set! G2f41@include-macro (lambda (G36b9@e) ((lambda (G36bb@t) ((lambda (G36bd@ls/false) (if G36bd@ls/false (apply (lambda (G36bf@id G36c0@filename) (G2f3f@do-include G36b9@e G36bf@id G36c0@filename)) G36bd@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G36bb@t))) (G2f59@syntax-dispatch G36bb@t '(any any)))) G36b9@e))) (set! G2f43@include-into-macro (lambda (G36c3@e) ((lambda (G36c5@t) ((lambda (G36c7@ls/false) (if G36c7@ls/false (apply (lambda (G36c9@id G36ca@filename) (G2f3f@do-include G36c3@e G36c9@id G36ca@filename)) G36c7@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G36c5@t))) (G2f59@syntax-dispatch G36c5@t '(_ any any)))) G36c3@e))) (set! G2f45@syntax-rules-macro (lambda (G36cd@e) ((lambda (G36cf@t) ((lambda (G36d1@ls/false) (if G36d1@ls/false (apply (lambda (G36d3@lits G36d4@pat* G36d5@tmp*) (begin (G2f5f@verify-literals G36d3@lits G36cd@e) (G2f0f@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36d3@lits (map (lambda (G36d9@pat G36da@tmp) ((lambda (G36dd@t) ((lambda (G36df@ls/false) (if G36df@ls/false (apply (lambda (G36e1@rest) (list (cons 'g G36e1@rest) (list 'syntax G36da@tmp))) G36df@ls/false) ((lambda (G36e3@t) ((lambda (G36e5@ls/false) (if G36e5@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid syntax-rules pattern" G36cd@e G36d9@pat)) G36e5@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G36e3@t))) (G2f59@syntax-dispatch G36e3@t '_))) G36dd@t))) (G2f59@syntax-dispatch G36dd@t '(_ . any)))) G36d9@pat)) G36d4@pat* G36d5@tmp*)))))))) G36d1@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G36cf@t))) (G2f59@syntax-dispatch G36cf@t '(_ each-any . #(each (any any)))))) G36cd@e))) (set! G2f47@quasiquote-macro ((lambda () ((lambda (G36e8@datum G3706@quasicons* G3708@quasicons G370a@quasiappend G370c@quasivector G370e@vquasi G3710@quasi) (begin (set! G36e8@datum (lambda (G37eb@x) (list (G2ee3@scheme-stx 'quote) (G2d42@mkstx G37eb@x '() '() '())))) (set! G3706@quasicons* (lambda (G37e3@x G37e4@y) ((letrec ((G37e7@f (lambda (G37e9@x) (if (null? G37e9@x) G37e4@y (G3708@quasicons (car G37e9@x) (G37e7@f (cdr G37e9@x))))))) G37e7@f) G37e3@x))) (set! G3708@quasicons (lambda (G37bd@x G37be@y) ((lambda (G37c1@t) ((lambda (G37c3@ls/false) (if G37c3@ls/false (apply (lambda (G37c5@dy) ((lambda (G37c7@t) ((lambda (G37c9@ls/false) (if G37c9@ls/false (apply (lambda (G37cb@dx) (list (G2ee3@scheme-stx 'quote) (cons G37cb@dx G37c5@dy))) G37c9@ls/false) ((lambda (G37cd@t) ((lambda (G37cf@ls/false) (if G37cf@ls/false (apply (lambda () ((lambda (G37d1@t) ((lambda (G37d3@ls/false) (if G37d3@ls/false (apply (lambda () (list (G2ee3@scheme-stx 'list) G37bd@x)) G37d3@ls/false) ((lambda (G37d5@t) ((lambda (G37d7@ls/false) (if G37d7@ls/false (apply (lambda () (list (G2ee3@scheme-stx 'cons) G37bd@x G37be@y)) G37d7@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G37d5@t))) (G2f59@syntax-dispatch G37d5@t '_))) G37d1@t))) (G2f59@syntax-dispatch G37d1@t '()))) G37c5@dy)) G37cf@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G37cd@t))) (G2f59@syntax-dispatch G37cd@t '_))) G37c7@t))) (G2f59@syntax-dispatch G37c7@t '(#(scheme-id quote) any)))) G37bd@x)) G37c3@ls/false) ((lambda (G37d9@t) ((lambda (G37db@ls/false) (if G37db@ls/false (apply (lambda (G37dd@stuff) (cons* (G2ee3@scheme-stx 'list) G37bd@x G37dd@stuff)) G37db@ls/false) ((lambda (G37df@t) ((lambda (G37e1@ls/false) (if G37e1@ls/false (apply (lambda () (list (G2ee3@scheme-stx 'cons) G37bd@x G37be@y)) G37e1@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G37df@t))) (G2f59@syntax-dispatch G37df@t '_))) G37d9@t))) (G2f59@syntax-dispatch G37d9@t '(#(scheme-id list) . each-any)))) G37c1@t))) (G2f59@syntax-dispatch G37c1@t '(#(scheme-id quote) any)))) G37be@y))) (set! G370a@quasiappend (lambda (G37a3@x G37a4@y) ((lambda (G37a7@ls) (if (null? G37a7@ls) (list (G2ee3@scheme-stx 'quote) '()) (if (null? (cdr G37a7@ls)) (car G37a7@ls) (cons* (G2ee3@scheme-stx 'append) G37a7@ls)))) ((letrec ((G37a9@f (lambda (G37ab@x) (if (null? G37ab@x) ((lambda (G37ad@t) ((lambda (G37af@ls/false) (if G37af@ls/false (apply (lambda () '()) G37af@ls/false) ((lambda (G37b1@t) ((lambda (G37b3@ls/false) (if G37b3@ls/false (apply (lambda () (list G37a4@y)) G37b3@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G37b1@t))) (G2f59@syntax-dispatch G37b1@t '_))) G37ad@t))) (G2f59@syntax-dispatch G37ad@t '(#(scheme-id quote) ())))) G37a4@y) ((lambda (G37b5@t) ((lambda (G37b7@ls/false) (if G37b7@ls/false (apply (lambda () (G37a9@f (cdr G37ab@x))) G37b7@ls/false) ((lambda (G37b9@t) ((lambda (G37bb@ls/false) (if G37bb@ls/false (apply (lambda () (cons (car G37ab@x) (G37a9@f (cdr G37ab@x)))) G37bb@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G37b9@t))) (G2f59@syntax-dispatch G37b9@t '_))) G37b5@t))) (G2f59@syntax-dispatch G37b5@t '(#(scheme-id quote) ())))) (car G37ab@x)))))) G37a9@f) G37a3@x)))) (set! G370c@quasivector (lambda (G3771@x) ((lambda (G3773@pat-x) ((lambda (G3775@t) ((lambda (G3777@ls/false) (if G3777@ls/false (apply (lambda (G3779@x*) (list (G2ee3@scheme-stx 'quote) (list->vector G3779@x*))) G3777@ls/false) ((lambda (G377b@t) ((lambda (G377d@ls/false) (if G377d@ls/false (apply (lambda () ((letrec ((G377f@f (lambda (G3781@x G3782@k) ((lambda (G3785@t) ((lambda (G3787@ls/false) (if G3787@ls/false (apply (lambda (G3789@x*) (G3782@k (map (lambda (G378b@x) (list (G2ee3@scheme-stx 'quote) G378b@x)) G3789@x*))) G3787@ls/false) ((lambda (G378d@t) ((lambda (G378f@ls/false) (if G378f@ls/false (apply (lambda (G3791@x*) (G3782@k G3791@x*)) G378f@ls/false) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda (G3797@x G3798@y) (G377f@f G3798@y (lambda (G379b@ls) (G3782@k (cons G3797@x G379b@ls))))) G3795@ls/false) ((lambda (G379d@t) ((lambda (G379f@ls/false) (if G379f@ls/false (apply (lambda () (list (G2ee3@scheme-stx 'list->vector) G3773@pat-x)) G379f@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G379d@t))) (G2f59@syntax-dispatch G379d@t '_))) G3793@t))) (G2f59@syntax-dispatch G3793@t '(#(scheme-id cons) any any)))) G378d@t))) (G2f59@syntax-dispatch G378d@t '(#(scheme-id list) . each-any)))) G3785@t))) (G2f59@syntax-dispatch G3785@t '(#(scheme-id quote) each-any)))) G3781@x)))) G377f@f) G3771@x (lambda (G37a1@ls) (cons* (G2ee3@scheme-stx 'vector) G37a1@ls)))) G377d@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G377b@t))) (G2f59@syntax-dispatch G377b@t '_))) G3775@t))) (G2f59@syntax-dispatch G3775@t '(#(scheme-id quote) each-any)))) G3773@pat-x)) G3771@x))) (set! G370e@vquasi (lambda (G374f@p G3750@lev) ((lambda (G3753@t) ((lambda (G3755@ls/false) (if G3755@ls/false (apply (lambda (G3757@p G3758@q) ((lambda (G375b@t) ((lambda (G375d@ls/false) (if G375d@ls/false (apply (lambda (G375f@p) (if (= G3750@lev '0) (G3706@quasicons* G375f@p (G370e@vquasi G3758@q G3750@lev)) (G3708@quasicons (G3708@quasicons (G36e8@datum 'unquote) (G3710@quasi G375f@p (- G3750@lev '1))) (G370e@vquasi G3758@q G3750@lev)))) G375d@ls/false) ((lambda (G3761@t) ((lambda (G3763@ls/false) (if G3763@ls/false (apply (lambda (G3765@p) (if (= G3750@lev '0) (G370a@quasiappend G3765@p (G370e@vquasi G3758@q G3750@lev)) (G3708@quasicons (G3708@quasicons (G36e8@datum 'unquote-splicing) (G3710@quasi G3765@p (- G3750@lev '1))) (G370e@vquasi G3758@q G3750@lev)))) G3763@ls/false) ((lambda (G3767@t) ((lambda (G3769@ls/false) (if G3769@ls/false (apply (lambda (G376b@p) (G3708@quasicons (G3710@quasi G376b@p G3750@lev) (G370e@vquasi G3758@q G3750@lev))) G3769@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3767@t))) (G2f59@syntax-dispatch G3767@t 'any))) G3761@t))) (G2f59@syntax-dispatch G3761@t '(#(scheme-id unquote-splicing) . each-any)))) G375b@t))) (G2f59@syntax-dispatch G375b@t '(#(scheme-id unquote) . each-any)))) G3757@p)) G3755@ls/false) ((lambda (G376d@t) ((lambda (G376f@ls/false) (if G376f@ls/false (apply (lambda () (list (G2ee3@scheme-stx 'quote) '())) G376f@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G376d@t))) (G2f59@syntax-dispatch G376d@t '()))) G3753@t))) (G2f59@syntax-dispatch G3753@t '(any . any)))) G374f@p))) (set! G3710@quasi (lambda (G3719@p G371a@lev) ((lambda (G371d@t) ((lambda (G371f@ls/false) (if G371f@ls/false (apply (lambda (G3721@p) (if (= G371a@lev '0) G3721@p (G3708@quasicons (G36e8@datum 'unquote) (G3710@quasi (list G3721@p) (- G371a@lev '1))))) G371f@ls/false) ((lambda (G3723@t) ((lambda (G3725@ls/false) (if G3725@ls/false (apply (lambda (G3727@p G3728@q) (if (= G371a@lev '0) (G3706@quasicons* G3727@p (G3710@quasi G3728@q G371a@lev)) (G3708@quasicons (G3708@quasicons (G36e8@datum 'unquote) (G3710@quasi G3727@p (- G371a@lev '1))) (G3710@quasi G3728@q G371a@lev)))) G3725@ls/false) ((lambda (G372b@t) ((lambda (G372d@ls/false) (if G372d@ls/false (apply (lambda (G372f@p G3730@q) (if (= G371a@lev '0) (G370a@quasiappend G372f@p (G3710@quasi G3730@q G371a@lev)) (G3708@quasicons (G3708@quasicons (G36e8@datum 'unquote-splicing) (G3710@quasi G372f@p (- G371a@lev '1))) (G3710@quasi G3730@q G371a@lev)))) G372d@ls/false) ((lambda (G3733@t) ((lambda (G3735@ls/false) (if G3735@ls/false (apply (lambda (G3737@p) (G3708@quasicons (G36e8@datum 'quasiquote) (G3710@quasi (list G3737@p) (+ G371a@lev '1)))) G3735@ls/false) ((lambda (G3739@t) ((lambda (G373b@ls/false) (if G373b@ls/false (apply (lambda (G373d@p G373e@q) (G3708@quasicons (G3710@quasi G373d@p G371a@lev) (G3710@quasi G373e@q G371a@lev))) G373b@ls/false) ((lambda (G3741@t) ((lambda (G3743@ls/false) (if (and G3743@ls/false (apply (lambda (G3745@x) (not (G2d22@stx? G3745@x))) G3743@ls/false)) (apply (lambda (G3747@x) (G370c@quasivector (G370e@vquasi G3747@x G371a@lev))) G3743@ls/false) ((lambda (G3749@t) ((lambda (G374b@ls/false) (if G374b@ls/false (apply (lambda (G374d@p) (list (G2ee3@scheme-stx 'quote) G374d@p)) G374b@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3749@t))) (G2f59@syntax-dispatch G3749@t 'any))) G3741@t))) (G2f59@syntax-dispatch G3741@t '#(vector each-any)))) G3739@t))) (G2f59@syntax-dispatch G3739@t '(any . any)))) G3733@t))) (G2f59@syntax-dispatch G3733@t '(#(scheme-id quasiquote) any)))) G372b@t))) (G2f59@syntax-dispatch G372b@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3723@t))) (G2f59@syntax-dispatch G3723@t '((#(scheme-id unquote) . each-any) . any)))) G371d@t))) (G2f59@syntax-dispatch G371d@t '(#(scheme-id unquote) any)))) G3719@p))) (lambda (G3711@x) ((lambda (G3713@t) ((lambda (G3715@ls/false) (if G3715@ls/false (apply (lambda (G3717@e) (G3710@quasi G3717@e '0)) G3715@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3713@t))) (G2f59@syntax-dispatch G3713@t '(_ any)))) G3711@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f49@quasisyntax-macro ((lambda () ((lambda (G37ee@quasi) (begin (set! G37ee@quasi (lambda (G3806@p G3807@lev) ((lambda (G380a@t) ((lambda (G380c@ls/false) (if G380c@ls/false (apply (lambda (G380e@p) (if (= G3807@lev '0) ((lambda (G3810@g) (values (list G3810@g) (list G380e@p) G3810@g)) (gensym)) (call-with-values (lambda () (G37ee@quasi G380e@p (- G3807@lev '1))) (lambda (G3815@G3812 G3816@G3813 G3817@G3814) ((lambda (G381b@p G381c@rhs* G381d@lhs*) (values G381d@lhs* G381c@rhs* (list 'unsyntax G381b@p))) G3817@G3814 G3816@G3813 G3815@G3812))))) G380c@ls/false) ((lambda (G3821@t) ((lambda (G3823@ls/false) (if (and G3823@ls/false (apply (lambda () (= G3807@lev '0)) G3823@ls/false)) (apply (lambda () (G3044@syntax-violation '#f '"incorrect use of unsyntax" G3806@p)) G3823@ls/false) ((lambda (G3825@t) ((lambda (G3827@ls/false) (if G3827@ls/false (apply (lambda (G3829@p* G382a@q) (call-with-values (lambda () (G37ee@quasi G382a@q G3807@lev)) (lambda (G3830@G382d G3831@G382e G3832@G382f) ((lambda (G3836@q G3837@rhs* G3838@lhs*) (if (= G3807@lev '0) ((lambda (G383c@g*) (values (append G383c@g* G3838@lhs*) (append G3829@p* G3837@rhs*) (append G383c@g* G3836@q))) (map (lambda (G383e@x) (gensym)) G3829@p*)) (call-with-values (lambda () (G37ee@quasi G3829@p* (- G3807@lev '1))) (lambda (G3843@G3840 G3844@G3841 G3845@G3842) ((lambda (G3849@p* G384a@rhs2* G384b@lhs2*) (values (append G384b@lhs2* G3838@lhs*) (append G384a@rhs2* G3837@rhs*) (cons (cons 'unsyntax G3849@p*) G3836@q))) G3845@G3842 G3844@G3841 G3843@G3840))))) G3832@G382f G3831@G382e G3830@G382d)))) G3827@ls/false) ((lambda (G384f@t) ((lambda (G3851@ls/false) (if G3851@ls/false (apply (lambda (G3853@p* G3854@q) (call-with-values (lambda () (G37ee@quasi G3854@q G3807@lev)) (lambda (G385a@G3857 G385b@G3858 G385c@G3859) ((lambda (G3860@q G3861@rhs* G3862@lhs*) (if (= G3807@lev '0) ((lambda (G3866@g*) (values (append (map (lambda (G3868@g) (cons G3868@g '(...))) G3866@g*) G3862@lhs*) (append G3853@p* G3861@rhs*) (append (apply append (map (lambda (G386a@g) (cons G386a@g '(...))) G3866@g*)) G3860@q))) (map (lambda (G386c@x) (gensym)) G3853@p*)) (call-with-values (lambda () (G37ee@quasi G3853@p* (- G3807@lev '1))) (lambda (G3871@G386e G3872@G386f G3873@G3870) ((lambda (G3877@p* G3878@rhs2* G3879@lhs2*) (values (append G3879@lhs2* G3862@lhs*) (append G3878@rhs2* G3861@rhs*) (cons (cons 'unsyntax-splicing G3877@p*) G3860@q))) G3873@G3870 G3872@G386f G3871@G386e))))) G385c@G3859 G385b@G3858 G385a@G3857)))) G3851@ls/false) ((lambda (G387d@t) ((lambda (G387f@ls/false) (if (and G387f@ls/false (apply (lambda () (= G3807@lev '0)) G387f@ls/false)) (apply (lambda () (G3044@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3806@p)) G387f@ls/false) ((lambda (G3881@t) ((lambda (G3883@ls/false) (if G3883@ls/false (apply (lambda (G3885@p) (call-with-values (lambda () (G37ee@quasi G3885@p (+ G3807@lev '1))) (lambda (G388a@G3887 G388b@G3888 G388c@G3889) ((lambda (G3890@p G3891@rhs* G3892@lhs*) (values G3892@lhs* G3891@rhs* (list 'quasisyntax G3890@p))) G388c@G3889 G388b@G3888 G388a@G3887)))) G3883@ls/false) ((lambda (G3896@t) ((lambda (G3898@ls/false) (if G3898@ls/false (apply (lambda (G389a@p G389b@q) (call-with-values (lambda () (G37ee@quasi G389a@p G3807@lev)) (lambda (G38a4@G389e G38a5@G389f G38a6@G38a0) (call-with-values (lambda () (G37ee@quasi G389b@q G3807@lev)) (lambda (G38aa@G38a1 G38ab@G38a2 G38ac@G38a3) ((lambda (G38b0@q G38b1@rhs2* G38b2@lhs2* G38b3@p G38b4@rhs* G38b5@lhs*) (values (append G38b2@lhs2* G38b5@lhs*) (append G38b1@rhs2* G38b4@rhs*) (cons G38b3@p G38b0@q))) G38ac@G38a3 G38ab@G38a2 G38aa@G38a1 G38a6@G38a0 G38a5@G389f G38a4@G389e)))))) G3898@ls/false) ((lambda (G38bc@t) ((lambda (G38be@ls/false) (if G38be@ls/false (apply (lambda (G38c0@x*) (call-with-values (lambda () (G37ee@quasi G38c0@x* G3807@lev)) (lambda (G38c5@G38c2 G38c6@G38c3 G38c7@G38c4) ((lambda (G38cb@x* G38cc@rhs* G38cd@lhs*) (values G38cd@lhs* G38cc@rhs* (list->vector G38cb@x*))) G38c7@G38c4 G38c6@G38c3 G38c5@G38c2)))) G38be@ls/false) ((lambda (G38d1@t) ((lambda (G38d3@ls/false) (if G38d3@ls/false (apply (lambda () (values '() '() G3806@p)) G38d3@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G38d1@t))) (G2f59@syntax-dispatch G38d1@t '_))) G38bc@t))) (G2f59@syntax-dispatch G38bc@t '#(vector each-any)))) G3896@t))) (G2f59@syntax-dispatch G3896@t '(any . any)))) G3881@t))) (G2f59@syntax-dispatch G3881@t '(#(scheme-id quasisyntax) any)))) G387d@t))) (G2f59@syntax-dispatch G387d@t '#(scheme-id unsyntax-splicing)))) G384f@t))) (G2f59@syntax-dispatch G384f@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3825@t))) (G2f59@syntax-dispatch G3825@t '((#(scheme-id unsyntax) . each-any) . any)))) G3821@t))) (G2f59@syntax-dispatch G3821@t '#(scheme-id unsyntax)))) G380a@t))) (G2f59@syntax-dispatch G380a@t '(#(scheme-id unsyntax) any)))) G3806@p))) (lambda (G37ef@x) ((lambda (G37f1@t) ((lambda (G37f3@ls/false) (if G37f3@ls/false (apply (lambda (G37f5@e) (call-with-values (lambda () (G37ee@quasi G37f5@e '0)) (lambda (G37fa@G37f7 G37fb@G37f8 G37fc@G37f9) ((lambda (G3800@v G3801@rhs* G3802@lhs*) (G2f0f@bless (list 'syntax-case (cons 'list G3801@rhs*) '() (list G3802@lhs* (list 'syntax G3800@v))))) G37fc@G37f9 G37fb@G37f8 G37fa@G37f7)))) G37f3@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G37f1@t))) (G2f59@syntax-dispatch G37f1@t '(_ any)))) G37ef@x)))) '#f)))) (set! G2f4b@define-struct-macro (lambda (G38d5@stx) (G3044@syntax-violation '#f '"define-struct not supported" G38d5@stx))) (set! G2f4d@define-record-type-macro (lambda (G38d7@x) ((lambda (G38da@id G38dc@get-record-name G38de@get-record-constructor-name G38e0@get-record-predicate-name G38e2@get-clause G38e4@foo-rtd-code G38e6@parent-rtd-code G38e8@parent-rcd-code G38ea@foo-rcd-code G38ec@get-protocol-code G38ee@get-fields G38f0@get-mutator-indices G38f2@get-mutators G38f4@get-accessors G38f6@enumerate G38f8@do-define-record G38fa@verify-clauses) (begin (set! G38da@id (lambda (G3acd@ctxt . G3acf@str*) (G3048@datum->syntax G3acd@ctxt (string->symbol (apply string-append (map (lambda (G3ad1@x) (if (symbol? G3ad1@x) (symbol->string G3ad1@x) (if (string? G3ad1@x) G3ad1@x (assertion-violation 'define-record-type '"BUG")))) G3acf@str*)))))) (set! G38dc@get-record-name (lambda (G3abb@spec) ((lambda (G3abd@t) ((lambda (G3abf@ls/false) (if G3abf@ls/false (apply (lambda (G3ac1@foo G3ac2@make-foo G3ac3@foo?) G3ac1@foo) G3abf@ls/false) ((lambda (G3ac7@t) ((lambda (G3ac9@ls/false) (if G3ac9@ls/false (apply (lambda (G3acb@foo) G3acb@foo) G3ac9@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3ac7@t))) (G2f59@syntax-dispatch G3ac7@t 'any))) G3abd@t))) (G2f59@syntax-dispatch G3abd@t '(any any any)))) G3abb@spec))) (set! G38de@get-record-constructor-name (lambda (G3aa7@spec) ((lambda (G3aa9@t) ((lambda (G3aab@ls/false) (if G3aab@ls/false (apply (lambda (G3aad@foo G3aae@make-foo G3aaf@foo?) G3aae@make-foo) G3aab@ls/false) ((lambda (G3ab3@t) ((lambda (G3ab5@ls/false) (if (and G3ab5@ls/false (apply (lambda (G3ab7@foo) (G2d5a@id? G3ab7@foo)) G3ab5@ls/false)) (apply (lambda (G3ab9@foo) (G38da@id G3ab9@foo '"make-" (G2d70@stx->datum G3ab9@foo))) G3ab5@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3ab3@t))) (G2f59@syntax-dispatch G3ab3@t 'any))) G3aa9@t))) (G2f59@syntax-dispatch G3aa9@t '(any any any)))) G3aa7@spec))) (set! G38e0@get-record-predicate-name (lambda (G3a93@spec) ((lambda (G3a95@t) ((lambda (G3a97@ls/false) (if G3a97@ls/false (apply (lambda (G3a99@foo G3a9a@make-foo G3a9b@foo?) G3a9b@foo?) G3a97@ls/false) ((lambda (G3a9f@t) ((lambda (G3aa1@ls/false) (if (and G3aa1@ls/false (apply (lambda (G3aa3@foo) (G2d5a@id? G3aa3@foo)) G3aa1@ls/false)) (apply (lambda (G3aa5@foo) (G38da@id G3aa5@foo (G2d70@stx->datum G3aa5@foo) '"?")) G3aa1@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a9f@t))) (G2f59@syntax-dispatch G3a9f@t 'any))) G3a95@t))) (G2f59@syntax-dispatch G3a95@t '(any any any)))) G3a93@spec))) (set! G38e2@get-clause (lambda (G3a81@id G3a82@ls) ((lambda (G3a85@t) ((lambda (G3a87@ls/false) (if G3a87@ls/false (apply (lambda () '#f) G3a87@ls/false) ((lambda (G3a89@t) ((lambda (G3a8b@ls/false) (if G3a8b@ls/false (apply (lambda (G3a8d@x G3a8e@rest G3a8f@ls) (if (G2d62@free-id=? (G2f0f@bless G3a81@id) G3a8d@x) (cons G3a8d@x G3a8e@rest) (G38e2@get-clause G3a81@id G3a8f@ls))) G3a8b@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a89@t))) (G2f59@syntax-dispatch G3a89@t '((any . any) . any)))) G3a85@t))) (G2f59@syntax-dispatch G3a85@t '()))) G3a82@ls))) (set! G38e4@foo-rtd-code (lambda (G3a2f@name G3a30@clause* G3a31@parent-rtd-code) ((lambda (G3a36@convert-field-spec*) (begin (set! G3a36@convert-field-spec* (lambda (G3a67@ls) (list->vector (map (lambda (G3a69@x) ((lambda (G3a6b@t) ((lambda (G3a6d@ls/false) (if G3a6d@ls/false (apply (lambda (G3a6f@name G3a70@rest) (list 'mutable G3a6f@name)) G3a6d@ls/false) ((lambda (G3a73@t) ((lambda (G3a75@ls/false) (if G3a75@ls/false (apply (lambda (G3a77@name G3a78@rest) (list 'immutable G3a77@name)) G3a75@ls/false) ((lambda (G3a7b@t) ((lambda (G3a7d@ls/false) (if G3a7d@ls/false (apply (lambda (G3a7f@name) (list 'immutable G3a7f@name)) G3a7d@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a7b@t))) (G2f59@syntax-dispatch G3a7b@t 'any))) G3a73@t))) (G2f59@syntax-dispatch G3a73@t '(#(scheme-id immutable) any . any)))) G3a6b@t))) (G2f59@syntax-dispatch G3a6b@t '(#(scheme-id mutable) any . any)))) G3a69@x)) G3a67@ls)))) ((lambda (G3a37@uid-code G3a38@sealed? G3a39@opaque? G3a3a@fields) (G2f0f@bless (list 'make-record-type-descriptor (list 'quote G3a2f@name) G3a31@parent-rtd-code G3a37@uid-code G3a38@sealed? G3a39@opaque? G3a3a@fields))) ((lambda (G3a3f@t) ((lambda (G3a41@ls/false) (if G3a41@ls/false (apply (lambda () (list 'quote (gensym))) G3a41@ls/false) ((lambda (G3a43@t) ((lambda (G3a45@ls/false) (if G3a45@ls/false (apply (lambda (G3a47@uid) (list 'quote G3a47@uid)) G3a45@ls/false) ((lambda (G3a49@t) ((lambda (G3a4b@ls/false) (if G3a4b@ls/false (apply (lambda () '#f) G3a4b@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a49@t))) (G2f59@syntax-dispatch G3a49@t '_))) G3a43@t))) (G2f59@syntax-dispatch G3a43@t '(_ any)))) G3a3f@t))) (G2f59@syntax-dispatch G3a3f@t '(_)))) (G38e2@get-clause 'nongenerative G3a30@clause*)) ((lambda (G3a4d@t) ((lambda (G3a4f@ls/false) (if G3a4f@ls/false (apply (lambda () '#t) G3a4f@ls/false) ((lambda (G3a51@t) ((lambda (G3a53@ls/false) (if G3a53@ls/false (apply (lambda () '#f) G3a53@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a51@t))) (G2f59@syntax-dispatch G3a51@t '_))) G3a4d@t))) (G2f59@syntax-dispatch G3a4d@t '(_ #(atom #t))))) (G38e2@get-clause 'sealed G3a30@clause*)) ((lambda (G3a55@t) ((lambda (G3a57@ls/false) (if G3a57@ls/false (apply (lambda () '#t) G3a57@ls/false) ((lambda (G3a59@t) ((lambda (G3a5b@ls/false) (if G3a5b@ls/false (apply (lambda () '#f) G3a5b@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a59@t))) (G2f59@syntax-dispatch G3a59@t '_))) G3a55@t))) (G2f59@syntax-dispatch G3a55@t '(_ #(atom #t))))) (G38e2@get-clause 'opaque G3a30@clause*)) ((lambda (G3a5d@t) ((lambda (G3a5f@ls/false) (if G3a5f@ls/false (apply (lambda (G3a61@field-spec*) (list 'quote (G3a36@convert-field-spec* G3a61@field-spec*))) G3a5f@ls/false) ((lambda (G3a63@t) ((lambda (G3a65@ls/false) (if G3a65@ls/false (apply (lambda () ''#()) G3a65@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a63@t))) (G2f59@syntax-dispatch G3a63@t '_))) G3a5d@t))) (G2f59@syntax-dispatch G3a5d@t '(_ . each-any)))) (G38e2@get-clause 'fields G3a30@clause*))))) '#f))) (set! G38e6@parent-rtd-code (lambda (G3a17@clause*) ((lambda (G3a19@t) ((lambda (G3a1b@ls/false) (if G3a1b@ls/false (apply (lambda (G3a1d@name) (list 'record-type-descriptor G3a1d@name)) G3a1b@ls/false) ((lambda (G3a1f@t) ((lambda (G3a21@ls/false) (if G3a21@ls/false (apply (lambda () ((lambda (G3a23@t) ((lambda (G3a25@ls/false) (if G3a25@ls/false (apply (lambda (G3a27@rtd G3a28@rcd) G3a27@rtd) G3a25@ls/false) ((lambda (G3a2b@t) ((lambda (G3a2d@ls/false) (if G3a2d@ls/false (apply (lambda () '#f) G3a2d@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a2b@t))) (G2f59@syntax-dispatch G3a2b@t '#(atom #f)))) G3a23@t))) (G2f59@syntax-dispatch G3a23@t '(_ any any)))) (G38e2@get-clause 'parent-rtd G3a17@clause*))) G3a21@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a1f@t))) (G2f59@syntax-dispatch G3a1f@t '#(atom #f)))) G3a19@t))) (G2f59@syntax-dispatch G3a19@t '(_ any)))) (G38e2@get-clause 'parent G3a17@clause*)))) (set! G38e8@parent-rcd-code (lambda (G39ff@clause*) ((lambda (G3a01@t) ((lambda (G3a03@ls/false) (if G3a03@ls/false (apply (lambda (G3a05@name) (list 'record-constructor-descriptor G3a05@name)) G3a03@ls/false) ((lambda (G3a07@t) ((lambda (G3a09@ls/false) (if G3a09@ls/false (apply (lambda () ((lambda (G3a0b@t) ((lambda (G3a0d@ls/false) (if G3a0d@ls/false (apply (lambda (G3a0f@rtd G3a10@rcd) G3a10@rcd) G3a0d@ls/false) ((lambda (G3a13@t) ((lambda (G3a15@ls/false) (if G3a15@ls/false (apply (lambda () '#f) G3a15@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a13@t))) (G2f59@syntax-dispatch G3a13@t '#(atom #f)))) G3a0b@t))) (G2f59@syntax-dispatch G3a0b@t '(_ any any)))) (G38e2@get-clause 'parent-rtd G39ff@clause*))) G3a09@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3a07@t))) (G2f59@syntax-dispatch G3a07@t '#(atom #f)))) G3a01@t))) (G2f59@syntax-dispatch G3a01@t '(_ any)))) (G38e2@get-clause 'parent G39ff@clause*)))) (set! G38ea@foo-rcd-code (lambda (G39f7@clause* G39f8@foo-rtd G39f9@protocol G39fa@parent-rcd-code) (list 'make-record-constructor-descriptor G39f8@foo-rtd G39fa@parent-rcd-code G39f9@protocol))) (set! G38ec@get-protocol-code (lambda (G39eb@clause*) ((lambda (G39ed@t) ((lambda (G39ef@ls/false) (if G39ef@ls/false (apply (lambda (G39f1@expr) G39f1@expr) G39ef@ls/false) ((lambda (G39f3@t) ((lambda (G39f5@ls/false) (if G39f5@ls/false (apply (lambda () '#f) G39f5@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G39f3@t))) (G2f59@syntax-dispatch G39f3@t '_))) G39ed@t))) (G2f59@syntax-dispatch G39ed@t '(_ any)))) (G38e2@get-clause 'protocol G39eb@clause*)))) (set! G38ee@get-fields (lambda (G39d9@clause*) ((lambda (G39db@t) ((lambda (G39dd@ls/false) (if G39dd@ls/false (apply (lambda () '()) G39dd@ls/false) ((lambda (G39df@t) ((lambda (G39e1@ls/false) (if G39e1@ls/false (apply (lambda (G39e3@f*) G39e3@f*) G39e1@ls/false) ((lambda (G39e5@t) ((lambda (G39e7@ls/false) (if G39e7@ls/false (apply (lambda (G39e9@rest) (G38ee@get-fields G39e9@rest)) G39e7@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G39e5@t))) (G2f59@syntax-dispatch G39e5@t '(_ . any)))) G39df@t))) (G2f59@syntax-dispatch G39df@t '((#(scheme-id fields) . each-any) . _)))) G39db@t))) (G2f59@syntax-dispatch G39db@t '()))) G39d9@clause*))) (set! G38f0@get-mutator-indices (lambda (G39c1@fields) ((letrec ((G39c3@f (lambda (G39c5@fields G39c6@i) ((lambda (G39c9@t) ((lambda (G39cb@ls/false) (if G39cb@ls/false (apply (lambda () '()) G39cb@ls/false) ((lambda (G39cd@t) ((lambda (G39cf@ls/false) (if G39cf@ls/false (apply (lambda (G39d1@rest) (cons G39c6@i (G39c3@f G39d1@rest (+ G39c6@i '1)))) G39cf@ls/false) ((lambda (G39d3@t) ((lambda (G39d5@ls/false) (if G39d5@ls/false (apply (lambda (G39d7@rest) (G39c3@f G39d7@rest (+ G39c6@i '1))) G39d5@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G39d3@t))) (G2f59@syntax-dispatch G39d3@t '(_ . any)))) G39cd@t))) (G2f59@syntax-dispatch G39cd@t '((#(scheme-id mutable) . _) . any)))) G39c9@t))) (G2f59@syntax-dispatch G39c9@t '()))) G39c5@fields)))) G39c3@f) G39c1@fields '0))) (set! G38f2@get-mutators (lambda (G3997@foo G3998@fields) ((lambda (G399c@gen-name) (begin (set! G399c@gen-name (lambda (G39bf@x) (G3048@datum->syntax G3997@foo (string->symbol (string-append (symbol->string (G304a@syntax->datum G3997@foo)) '"-" (symbol->string (G304a@syntax->datum G39bf@x)) '"-set!"))))) ((letrec ((G399d@f (lambda (G399f@fields) ((lambda (G39a1@t) ((lambda (G39a3@ls/false) (if G39a3@ls/false (apply (lambda () '()) G39a3@ls/false) ((lambda (G39a5@t) ((lambda (G39a7@ls/false) (if G39a7@ls/false (apply (lambda (G39a9@name G39aa@accessor G39ab@mutator G39ac@rest) (cons G39ab@mutator (G399d@f G39ac@rest))) G39a7@ls/false) ((lambda (G39b1@t) ((lambda (G39b3@ls/false) (if G39b3@ls/false (apply (lambda (G39b5@name G39b6@rest) (cons (G399c@gen-name G39b5@name) (G399d@f G39b6@rest))) G39b3@ls/false) ((lambda (G39b9@t) ((lambda (G39bb@ls/false) (if G39bb@ls/false (apply (lambda (G39bd@rest) (G399d@f G39bd@rest)) G39bb@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G39b9@t))) (G2f59@syntax-dispatch G39b9@t '(_ . any)))) G39b1@t))) (G2f59@syntax-dispatch G39b1@t '((#(scheme-id mutable) any) . any)))) G39a5@t))) (G2f59@syntax-dispatch G39a5@t '((#(scheme-id mutable) any any any) . any)))) G39a1@t))) (G2f59@syntax-dispatch G39a1@t '()))) G399f@fields)))) G399d@f) G3998@fields))) '#f))) (set! G38f4@get-accessors (lambda (G3953@foo G3954@fields) ((lambda (G3958@gen-name) (begin (set! G3958@gen-name (lambda (G3995@x) (G3048@datum->syntax G3953@foo (string->symbol (string-append (symbol->string (G304a@syntax->datum G3953@foo)) '"-" (symbol->string (G304a@syntax->datum G3995@x))))))) (map (lambda (G3959@field) ((lambda (G395b@t) ((lambda (G395d@ls/false) (if (and G395d@ls/false (apply (lambda (G395f@name G3960@accessor G3961@mutator) (G2d5a@id? G3960@accessor)) G395d@ls/false)) (apply (lambda (G3965@name G3966@accessor G3967@mutator) G3966@accessor) G395d@ls/false) ((lambda (G396b@t) ((lambda (G396d@ls/false) (if (and G396d@ls/false (apply (lambda (G396f@name G3970@accessor) (G2d5a@id? G3970@accessor)) G396d@ls/false)) (apply (lambda (G3973@name G3974@accessor) G3974@accessor) G396d@ls/false) ((lambda (G3977@t) ((lambda (G3979@ls/false) (if (and G3979@ls/false (apply (lambda (G397b@name) (G2d5a@id? G397b@name)) G3979@ls/false)) (apply (lambda (G397d@name) (G3958@gen-name G397d@name)) G3979@ls/false) ((lambda (G397f@t) ((lambda (G3981@ls/false) (if (and G3981@ls/false (apply (lambda (G3983@name) (G2d5a@id? G3983@name)) G3981@ls/false)) (apply (lambda (G3985@name) (G3958@gen-name G3985@name)) G3981@ls/false) ((lambda (G3987@t) ((lambda (G3989@ls/false) (if (and G3989@ls/false (apply (lambda (G398b@name) (G2d5a@id? G398b@name)) G3989@ls/false)) (apply (lambda (G398d@name) (G3958@gen-name G398d@name)) G3989@ls/false) ((lambda (G398f@t) ((lambda (G3991@ls/false) (if G3991@ls/false (apply (lambda (G3993@others) (G3044@syntax-violation '#f '"invalid field spec" G3959@field)) G3991@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G398f@t))) (G2f59@syntax-dispatch G398f@t 'any))) G3987@t))) (G2f59@syntax-dispatch G3987@t 'any))) G397f@t))) (G2f59@syntax-dispatch G397f@t '(#(scheme-id immutable) any)))) G3977@t))) (G2f59@syntax-dispatch G3977@t '(#(scheme-id mutable) any)))) G396b@t))) (G2f59@syntax-dispatch G396b@t '(#(scheme-id immutable) any any)))) G395b@t))) (G2f59@syntax-dispatch G395b@t '(#(scheme-id mutable) any any any)))) G3959@field)) G3954@fields))) '#f))) (set! G38f6@enumerate (lambda (G394b@ls) ((letrec ((G394d@f (lambda (G394f@ls G3950@i) (if (null? G394f@ls) '() (cons G3950@i (G394d@f (cdr G394f@ls) (+ G3950@i '1))))))) G394d@f) G394b@ls '0))) (set! G38f8@do-define-record (lambda (G3923@namespec G3924@clause*) ((lambda (G3927@foo) ((lambda (G3929@foo-rtd) ((lambda (G392b@foo-rcd) ((lambda (G392d@protocol) ((lambda (G392f@make-foo) ((lambda (G3931@fields) ((lambda (G3933@idx*) ((lambda (G3935@foo-x*) ((lambda (G3937@set-foo-x!*) ((lambda (G3939@set-foo-idx*) ((lambda (G393b@foo?) ((lambda (G393d@foo-rtd-code) ((lambda (G393f@foo-rcd-code) ((lambda (G3941@protocol-code) ((lambda () (G2f0f@bless (cons 'begin (cons (list 'define G3929@foo-rtd G393d@foo-rtd-code) (cons (list 'define G392d@protocol G3941@protocol-code) (cons (list 'define G392b@foo-rcd G393f@foo-rcd-code) (cons (list 'define-syntax G3927@foo (list 'list ''$rtd (list 'syntax G3929@foo-rtd) (list 'syntax G392b@foo-rcd))) (cons (list 'define G393b@foo? (list 'record-predicate G3929@foo-rtd)) (cons (list 'define G392f@make-foo (list 'record-constructor G392b@foo-rcd)) (append (map (lambda (G3943@foo-x G3944@idx) (list 'define G3943@foo-x (list 'record-accessor G3929@foo-rtd G3944@idx))) G3935@foo-x* G3933@idx*) (map (lambda (G3947@set-foo-x! G3948@idx) (list 'define G3947@set-foo-x! (list 'record-mutator G3929@foo-rtd G3948@idx))) G3937@set-foo-x!* G3939@set-foo-idx*))))))))))))) (G38ec@get-protocol-code G3924@clause*))) (G38ea@foo-rcd-code G3924@clause* G3929@foo-rtd G392d@protocol (G38e8@parent-rcd-code G3924@clause*)))) (G38e4@foo-rtd-code G3927@foo G3924@clause* (G38e6@parent-rtd-code G3924@clause*)))) (G38e0@get-record-predicate-name G3923@namespec))) (G38f0@get-mutator-indices G3931@fields))) (G38f2@get-mutators G3927@foo G3931@fields))) (G38f4@get-accessors G3927@foo G3931@fields))) (G38f6@enumerate G3931@fields))) (G38ee@get-fields G3924@clause*))) (G38de@get-record-constructor-name G3923@namespec))) (gensym))) (gensym))) (gensym))) (G38dc@get-record-name G3923@namespec)))) (set! G38fa@verify-clauses (lambda (G3903@x G3904@cls*) ((lambda (G3908@valid-kwds G390a@free-id-member?) (begin (set! G3908@valid-kwds (map G2f0f@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G390a@free-id-member? (lambda (G391f@x G3920@ls) (and (pair? G3920@ls) (or (G2d62@free-id=? G391f@x (car G3920@ls)) (G390a@free-id-member? G391f@x (cdr G3920@ls)))))) ((letrec ((G390b@f (lambda (G390d@cls* G390e@seen*) (if (not (null? G390d@cls*)) ((lambda (G3911@t) ((lambda (G3913@ls/false) (if G3913@ls/false (apply (lambda (G3915@kwd G3916@rest) (if (or (not (G2d5a@id? G3915@kwd)) (not (G390a@free-id-member? G3915@kwd G3908@valid-kwds))) (G3044@syntax-violation '#f '"not a valid define-record-type keyword" G3915@kwd) (if (G2d68@bound-id-member? G3915@kwd G390e@seen*) (G3044@syntax-violation '#f '"duplicate use of keyword " G3903@x G3915@kwd) (G390b@f (cdr G390d@cls*) (cons G3915@kwd G390e@seen*))))) G3913@ls/false) ((lambda (G3919@t) ((lambda (G391b@ls/false) (if G391b@ls/false (apply (lambda (G391d@cls) (G3044@syntax-violation '#f '"malformed define-record-type clause" G391d@cls)) G391b@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3919@t))) (G2f59@syntax-dispatch G3919@t 'any))) G3911@t))) (G2f59@syntax-dispatch G3911@t '(any . any)))) (car G390d@cls*)) (void))))) G390b@f) G3904@cls* '()))) '#f '#f))) ((lambda (G38fb@t) ((lambda (G38fd@ls/false) (if G38fd@ls/false (apply (lambda (G38ff@namespec G3900@clause*) (begin (G38fa@verify-clauses G38d7@x G3900@clause*) (G38f8@do-define-record G38ff@namespec G3900@clause*))) G38fd@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G38fb@t))) (G2f59@syntax-dispatch G38fb@t '(_ any . each-any)))) G38d7@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f4f@define-condition-type-macro (lambda (G3ad3@x) ((lambda (G3ad6@mkname) (begin (set! G3ad6@mkname (lambda (G3b03@name G3b04@suffix) (G3048@datum->syntax G3b03@name (string->symbol (string-append (symbol->string (G304a@syntax->datum G3b03@name)) G3b04@suffix))))) ((lambda (G3ad7@t) ((lambda (G3ad9@ls/false) (if (and G3ad9@ls/false (apply (lambda (G3adb@ctxt G3adc@name G3add@super G3ade@constructor G3adf@predicate G3ae0@field* G3ae1@accessor*) (and (G2d5a@id? G3adc@name) (G2d5a@id? G3add@super) (G2d5a@id? G3ade@constructor) (G2d5a@id? G3adf@predicate) (for-all G2d5a@id? G3ae0@field*) (for-all G2d5a@id? G3ae1@accessor*))) G3ad9@ls/false)) (apply (lambda (G3ae9@ctxt G3aea@name G3aeb@super G3aec@constructor G3aed@predicate G3aee@field* G3aef@accessor*) ((lambda (G3af7@aux-accessor*) (G2f0f@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3aea@name G3aec@constructor (gensym)) (cons (list 'parent G3aeb@super) (cons (cons 'fields (map (lambda (G3af9@field G3afa@aux) (list 'immutable G3af9@field G3afa@aux)) G3aee@field* G3af7@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3aed@predicate (list 'condition-predicate (list 'record-type-descriptor G3aea@name))) (map (lambda (G3afd@accessor G3afe@aux) (list 'define G3afd@accessor (list 'condition-accessor (list 'record-type-descriptor G3aea@name) G3afe@aux))) G3aef@accessor* G3af7@aux-accessor*)))))) (map (lambda (G3b01@x) (gensym)) G3aef@accessor*))) G3ad9@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3ad7@t))) (G2f59@syntax-dispatch G3ad7@t '(any any any any any . #(each (any any)))))) G3ad3@x))) '#f))) (set! G2f51@incorrect-usage-macro (lambda (G3b07@e) (G3044@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b07@e))) (set! G2f53@parameterize-macro (lambda (G3b09@e) ((lambda (G3b0b@t) ((lambda (G3b0d@ls/false) (if G3b0d@ls/false (apply (lambda (G3b0f@b G3b10@b*) (G2f0f@bless (cons 'let (cons '() (cons G3b0f@b G3b10@b*))))) G3b0d@ls/false) ((lambda (G3b13@t) ((lambda (G3b15@ls/false) (if G3b15@ls/false (apply (lambda (G3b17@olhs* G3b18@orhs* G3b19@b G3b1a@b*) ((lambda (G3b1f@lhs* G3b20@rhs*) (G2f0f@bless (cons (list 'lambda (append G3b1f@lhs* G3b20@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b23@lhs G3b24@rhs) (list 'let (list (list 't (list G3b23@lhs))) (list G3b23@lhs G3b24@rhs) (cons 'set! (cons G3b24@rhs '(t))))) G3b1f@lhs* G3b20@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b19@b G3b1a@b*))) '(swap)))))) (append G3b17@olhs* G3b18@orhs*)))) (G3032@generate-temporaries G3b17@olhs*) (G3032@generate-temporaries G3b18@orhs*))) G3b15@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3b13@t))) (G2f59@syntax-dispatch G3b13@t '(_ #(each (any any)) any . each-any)))) G3b0b@t))) (G2f59@syntax-dispatch G3b0b@t '(_ () any . each-any)))) G3b09@e))) (set! G2f55@foreign-call-transformer (lambda (G3b27@e G3b28@r G3b29@mr) ((lambda (G3b2d@t) ((lambda (G3b2f@ls/false) (if G3b2f@ls/false (apply (lambda (G3b31@name G3b32@arg*) (cons 'foreign-call (cons (G2f7d@chi-expr G3b31@name G3b28@r G3b29@mr) (G2f79@chi-expr* G3b32@arg* G3b28@r G3b29@mr)))) G3b2f@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3b2d@t))) (G2f59@syntax-dispatch G3b2d@t '(_ any . each-any)))) G3b27@e))) (set! G2f57@convert-pattern (lambda (G3b35@pattern G3b36@keys) ((lambda (G3b3a@cvt* G3b3c@cvt) (begin (set! G3b3a@cvt* (lambda (G3bcb@p* G3bcc@n G3bcd@ids) (if (null? G3bcb@p*) (values '() G3bcd@ids) (call-with-values (lambda () (G3b3a@cvt* (cdr G3bcb@p*) G3bcc@n G3bcd@ids)) (lambda (G3bd3@G3bd1 G3bd4@G3bd2) ((lambda (G3bd7@ids G3bd8@y) (call-with-values (lambda () (G3b3c@cvt (car G3bcb@p*) G3bcc@n G3bd7@ids)) (lambda (G3bdd@G3bdb G3bde@G3bdc) ((lambda (G3be1@ids G3be2@x) (values (cons G3be2@x G3bd8@y) G3be1@ids)) G3bde@G3bdc G3bdd@G3bdb)))) G3bd4@G3bd2 G3bd3@G3bd1)))))) (set! G3b3c@cvt (lambda (G3b3d@p G3b3e@n G3b3f@ids) ((lambda (G3b43@t) ((lambda (G3b45@ls/false) (if (and G3b45@ls/false (apply (lambda (G3b47@id) (G2d5a@id? G3b47@id)) G3b45@ls/false)) (apply (lambda (G3b49@id) (if (G2d68@bound-id-member? G3b3d@p G3b36@keys) (values (vector 'free-id G3b3d@p) G3b3f@ids) (if (G2d62@free-id=? G3b3d@p (G2ee3@scheme-stx '_)) (values '_ G3b3f@ids) (values 'any (cons (cons G3b3d@p G3b3e@n) G3b3f@ids))))) G3b45@ls/false) ((lambda (G3b4b@t) ((lambda (G3b4d@ls/false) (if (and G3b4d@ls/false (apply (lambda (G3b4f@p G3b50@dots) (G2f5b@ellipsis? G3b50@dots)) G3b4d@ls/false)) (apply (lambda (G3b53@p G3b54@dots) (call-with-values (lambda () (G3b3c@cvt G3b53@p (+ G3b3e@n '1) G3b3f@ids)) (lambda (G3b59@G3b57 G3b5a@G3b58) ((lambda (G3b5d@ids G3b5e@p) (values (if (eq? G3b5e@p 'any) 'each-any (vector 'each G3b5e@p)) G3b5d@ids)) G3b5a@G3b58 G3b59@G3b57)))) G3b4d@ls/false) ((lambda (G3b61@t) ((lambda (G3b63@ls/false) (if (and G3b63@ls/false (apply (lambda (G3b65@x G3b66@dots G3b67@ys G3b68@z) (G2f5b@ellipsis? G3b66@dots)) G3b63@ls/false)) (apply (lambda (G3b6d@x G3b6e@dots G3b6f@ys G3b70@z) (call-with-values (lambda () (G3b3c@cvt G3b70@z G3b3e@n G3b3f@ids)) (lambda (G3b77@G3b75 G3b78@G3b76) ((lambda (G3b7b@ids G3b7c@z) (call-with-values (lambda () (G3b3a@cvt* G3b6f@ys G3b3e@n G3b7b@ids)) (lambda (G3b81@G3b7f G3b82@G3b80) ((lambda (G3b85@ids G3b86@ys) (call-with-values (lambda () (G3b3c@cvt G3b6d@x (+ G3b3e@n '1) G3b85@ids)) (lambda (G3b8b@G3b89 G3b8c@G3b8a) ((lambda (G3b8f@ids G3b90@x) (values (vector 'each+ G3b90@x (reverse G3b86@ys) G3b7c@z) G3b8f@ids)) G3b8c@G3b8a G3b8b@G3b89)))) G3b82@G3b80 G3b81@G3b7f)))) G3b78@G3b76 G3b77@G3b75)))) G3b63@ls/false) ((lambda (G3b93@t) ((lambda (G3b95@ls/false) (if G3b95@ls/false (apply (lambda (G3b97@x G3b98@y) (call-with-values (lambda () (G3b3c@cvt G3b98@y G3b3e@n G3b3f@ids)) (lambda (G3b9d@G3b9b G3b9e@G3b9c) ((lambda (G3ba1@ids G3ba2@y) (call-with-values (lambda () (G3b3c@cvt G3b97@x G3b3e@n G3ba1@ids)) (lambda (G3ba7@G3ba5 G3ba8@G3ba6) ((lambda (G3bab@ids G3bac@x) (values (cons G3bac@x G3ba2@y) G3bab@ids)) G3ba8@G3ba6 G3ba7@G3ba5)))) G3b9e@G3b9c G3b9d@G3b9b)))) G3b95@ls/false) ((lambda (G3baf@t) ((lambda (G3bb1@ls/false) (if G3bb1@ls/false (apply (lambda () (values '() G3b3f@ids)) G3bb1@ls/false) ((lambda (G3bb3@t) ((lambda (G3bb5@ls/false) (if (and G3bb5@ls/false (apply (lambda (G3bb7@p) (not (G2d22@stx? G3bb7@p))) G3bb5@ls/false)) (apply (lambda (G3bb9@p) (call-with-values (lambda () (G3b3c@cvt G3bb9@p G3b3e@n G3b3f@ids)) (lambda (G3bbd@G3bbb G3bbe@G3bbc) ((lambda (G3bc1@ids G3bc2@p) (values (vector 'vector G3bc2@p) G3bc1@ids)) G3bbe@G3bbc G3bbd@G3bbb)))) G3bb5@ls/false) ((lambda (G3bc5@t) ((lambda (G3bc7@ls/false) (if G3bc7@ls/false (apply (lambda (G3bc9@datum) (values (vector 'atom (G2d70@stx->datum G3bc9@datum)) G3b3f@ids)) G3bc7@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3bc5@t))) (G2f59@syntax-dispatch G3bc5@t 'any))) G3bb3@t))) (G2f59@syntax-dispatch G3bb3@t '#(vector each-any)))) G3baf@t))) (G2f59@syntax-dispatch G3baf@t '()))) G3b93@t))) (G2f59@syntax-dispatch G3b93@t '(any . any)))) G3b61@t))) (G2f59@syntax-dispatch G3b61@t '(any any . #(each+ any () any))))) G3b4b@t))) (G2f59@syntax-dispatch G3b4b@t '(any any)))) G3b43@t))) (G2f59@syntax-dispatch G3b43@t 'any))) G3b3d@p))) (G3b3c@cvt G3b35@pattern '0 '()))) '#f '#f))) (set! G2f59@syntax-dispatch ((lambda () ((lambda (G3be6@stx^ G3be8@match-each G3bea@match-each+ G3bec@match-each-any G3bee@match-empty G3bf0@combine G3bf2@match* G3bf4@match) (begin (set! G3be6@stx^ (lambda (G3caf@e G3cb0@m* G3cb1@s* G3cb2@ae*) (if (and (null? G3cb0@m*) (null? G3cb1@s*) (null? G3cb2@ae*)) G3caf@e (G2d42@mkstx G3caf@e G3cb0@m* G3cb1@s* G3cb2@ae*)))) (set! G3be8@match-each (lambda (G3c92@e G3c93@p G3c94@m* G3c95@s* G3c96@ae*) (if (pair? G3c92@e) ((lambda (G3c9c@first) (and G3c9c@first ((lambda (G3c9e@rest) (and G3c9e@rest (cons G3c9c@first G3c9e@rest))) (G3be8@match-each (cdr G3c92@e) G3c93@p G3c94@m* G3c95@s* G3c96@ae*)))) (G3bf4@match (car G3c92@e) G3c93@p G3c94@m* G3c95@s* G3c96@ae* '())) (if (null? G3c92@e) '() (if (G2d22@stx? G3c92@e) (and (not (G2cd4@top-marked? G3c94@m*)) (call-with-values (lambda () (G2d40@join-wraps G3c94@m* G3c95@s* G3c96@ae* G3c92@e)) (lambda (G3ca3@G3ca0 G3ca4@G3ca1 G3ca5@G3ca2) ((lambda (G3ca9@ae* G3caa@s* G3cab@m*) (G3be8@match-each (G2d26@stx-expr G3c92@e) G3c93@p G3cab@m* G3caa@s* G3ca9@ae*)) G3ca5@G3ca2 G3ca4@G3ca1 G3ca3@G3ca0)))) (if (G28eb@G2816@annotation? G3c92@e) (G3be8@match-each (G28ed@G281a@annotation-expression G3c92@e) G3c93@p G3c94@m* G3c95@s* G3c96@ae*) '#f)))))) (set! G3bea@match-each+ (lambda (G3c58@e G3c59@x-pat G3c5a@y-pat G3c5b@z-pat G3c5c@m* G3c5d@s* G3c5e@ae* G3c5f@r) ((letrec ((G3c68@f (lambda (G3c6a@e G3c6b@m* G3c6c@s* G3c6d@ae*) (if (pair? G3c6a@e) (call-with-values (lambda () (G3c68@f (cdr G3c6a@e) G3c6b@m* G3c6c@s* G3c6d@ae*)) (lambda (G3c75@G3c72 G3c76@G3c73 G3c77@G3c74) ((lambda (G3c7b@r G3c7c@y-pat G3c7d@xr*) (if G3c7b@r (if (null? G3c7c@y-pat) ((lambda (G3c81@xr) (if G3c81@xr (values (cons G3c81@xr G3c7d@xr*) G3c7c@y-pat G3c7b@r) (values '#f '#f '#f))) (G3bf4@match (car G3c6a@e) G3c59@x-pat G3c6b@m* G3c6c@s* G3c6d@ae* '())) (values '() (cdr G3c7c@y-pat) (G3bf4@match (car G3c6a@e) (car G3c7c@y-pat) G3c6b@m* G3c6c@s* G3c6d@ae* G3c7b@r))) (values '#f '#f '#f))) G3c77@G3c74 G3c76@G3c73 G3c75@G3c72))) (if (G2d22@stx? G3c6a@e) (if (G2cd4@top-marked? G3c6b@m*) (values '() G3c5a@y-pat (G3bf4@match G3c6a@e G3c5b@z-pat G3c6b@m* G3c6c@s* G3c6d@ae* G3c5f@r)) (call-with-values (lambda () (G2d40@join-wraps G3c6b@m* G3c6c@s* G3c6d@ae* G3c6a@e)) (lambda (G3c86@G3c83 G3c87@G3c84 G3c88@G3c85) ((lambda (G3c8c@ae* G3c8d@s* G3c8e@m*) (G3c68@f (G2d26@stx-expr G3c6a@e) G3c8e@m* G3c8d@s* G3c8c@ae*)) G3c88@G3c85 G3c87@G3c84 G3c86@G3c83)))) (if (G28eb@G2816@annotation? G3c6a@e) (G3c68@f (G28ed@G281a@annotation-expression G3c6a@e) G3c6b@m* G3c6c@s* G3c6d@ae*) (values '() G3c5a@y-pat (G3bf4@match G3c6a@e G3c5b@z-pat G3c6b@m* G3c6c@s* G3c6d@ae* G3c5f@r)))))))) G3c68@f) G3c58@e G3c5c@m* G3c5d@s* G3c5e@ae*))) (set! G3bec@match-each-any (lambda (G3c3f@e G3c40@m* G3c41@s* G3c42@ae*) (if (pair? G3c3f@e) ((lambda (G3c47@l) (and G3c47@l (cons (G3be6@stx^ (car G3c3f@e) G3c40@m* G3c41@s* G3c42@ae*) G3c47@l))) (G3bec@match-each-any (cdr G3c3f@e) G3c40@m* G3c41@s* G3c42@ae*)) (if (null? G3c3f@e) '() (if (G2d22@stx? G3c3f@e) (and (not (G2cd4@top-marked? G3c40@m*)) (call-with-values (lambda () (G2d40@join-wraps G3c40@m* G3c41@s* G3c42@ae* G3c3f@e)) (lambda (G3c4c@G3c49 G3c4d@G3c4a G3c4e@G3c4b) ((lambda (G3c52@ae* G3c53@s* G3c54@m*) (G3bec@match-each-any (G2d26@stx-expr G3c3f@e) G3c54@m* G3c53@s* G3c52@ae*)) G3c4e@G3c4b G3c4d@G3c4a G3c4c@G3c49)))) (if (G28eb@G2816@annotation? G3c3f@e) (G3bec@match-each-any (G28ed@G281a@annotation-expression G3c3f@e) G3c40@m* G3c41@s* G3c42@ae*) '#f)))))) (set! G3bee@match-empty (lambda (G3c39@p G3c3a@r) (if (null? G3c39@p) G3c3a@r (if (eq? G3c39@p '_) G3c3a@r (if (eq? G3c39@p 'any) (cons '() G3c3a@r) (if (pair? G3c39@p) (G3bee@match-empty (car G3c39@p) (G3bee@match-empty (cdr G3c39@p) G3c3a@r)) (if (eq? G3c39@p 'each-any) (cons '() G3c3a@r) ((lambda (G3c3d@t) (if (memv G3c3d@t '(each)) (G3bee@match-empty (vector-ref G3c39@p '1) G3c3a@r) (if (memv G3c3d@t '(each+)) (G3bee@match-empty (vector-ref G3c39@p '1) (G3bee@match-empty (reverse (vector-ref G3c39@p '2)) (G3bee@match-empty (vector-ref G3c39@p '3) G3c3a@r))) (if (memv G3c3d@t '(free-id atom)) G3c3a@r (if (memv G3c3d@t '(scheme-id atom)) G3c3a@r (if (memv G3c3d@t '(vector)) (G3bee@match-empty (vector-ref G3c39@p '1) G3c3a@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c39@p))))))) (vector-ref G3c39@p '0))))))))) (set! G3bf0@combine (lambda (G3c35@r* G3c36@r) (if (null? (car G3c35@r*)) G3c36@r (cons (map car G3c35@r*) (G3bf0@combine (map cdr G3c35@r*) G3c36@r))))) (set! G3bf2@match* (lambda (G3c14@e G3c15@p G3c16@m* G3c17@s* G3c18@ae* G3c19@r) (if (null? G3c15@p) (and (null? G3c14@e) G3c19@r) (if (pair? G3c15@p) (and (pair? G3c14@e) (G3bf4@match (car G3c14@e) (car G3c15@p) G3c16@m* G3c17@s* G3c18@ae* (G3bf4@match (cdr G3c14@e) (cdr G3c15@p) G3c16@m* G3c17@s* G3c18@ae* G3c19@r))) (if (eq? G3c15@p 'each-any) ((lambda (G3c20@l) (and G3c20@l (cons G3c20@l G3c19@r))) (G3bec@match-each-any G3c14@e G3c16@m* G3c17@s* G3c18@ae*)) ((lambda (G3c22@t) (if (memv G3c22@t '(each)) (if (null? G3c14@e) (G3bee@match-empty (vector-ref G3c15@p '1) G3c19@r) ((lambda (G3c24@r*) (and G3c24@r* (G3bf0@combine G3c24@r* G3c19@r))) (G3be8@match-each G3c14@e (vector-ref G3c15@p '1) G3c16@m* G3c17@s* G3c18@ae*))) (if (memv G3c22@t '(free-id)) (and (symbol? G3c14@e) (G2cd4@top-marked? G3c16@m*) (G2d62@free-id=? (G3be6@stx^ G3c14@e G3c16@m* G3c17@s* G3c18@ae*) (vector-ref G3c15@p '1)) G3c19@r) (if (memv G3c22@t '(scheme-id)) (and (symbol? G3c14@e) (G2cd4@top-marked? G3c16@m*) (G2d62@free-id=? (G3be6@stx^ G3c14@e G3c16@m* G3c17@s* G3c18@ae*) (G2ee3@scheme-stx (vector-ref G3c15@p '1))) G3c19@r) (if (memv G3c22@t '(each+)) (call-with-values (lambda () (G3bea@match-each+ G3c14@e (vector-ref G3c15@p '1) (vector-ref G3c15@p '2) (vector-ref G3c15@p '3) G3c16@m* G3c17@s* G3c18@ae* G3c19@r)) (lambda (G3c29@G3c26 G3c2a@G3c27 G3c2b@G3c28) ((lambda (G3c2f@r G3c30@y-pat G3c31@xr*) (and G3c2f@r (null? G3c30@y-pat) (if (null? G3c31@xr*) (G3bee@match-empty (vector-ref G3c15@p '1) G3c2f@r) (G3bf0@combine G3c31@xr* G3c2f@r)))) G3c2b@G3c28 G3c2a@G3c27 G3c29@G3c26))) (if (memv G3c22@t '(atom)) (and (fast-equal? (vector-ref G3c15@p '1) (G2d6e@strip G3c14@e G3c16@m*)) G3c19@r) (if (memv G3c22@t '(vector)) (and (vector? G3c14@e) (G3bf4@match (vector->list G3c14@e) (vector-ref G3c15@p '1) G3c16@m* G3c17@s* G3c18@ae* G3c19@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c15@p)))))))) (vector-ref G3c15@p '0))))))) (set! G3bf4@match (lambda (G3bf9@e G3bfa@p G3bfb@m* G3bfc@s* G3bfd@ae* G3bfe@r) (if (not G3bfe@r) '#f (if (eq? G3bfa@p '_) G3bfe@r (if (eq? G3bfa@p 'any) (cons (G3be6@stx^ G3bf9@e G3bfb@m* G3bfc@s* G3bfd@ae*) G3bfe@r) (if (G2d22@stx? G3bf9@e) (and (not (G2cd4@top-marked? G3bfb@m*)) (call-with-values (lambda () (G2d40@join-wraps G3bfb@m* G3bfc@s* G3bfd@ae* G3bf9@e)) (lambda (G3c08@G3c05 G3c09@G3c06 G3c0a@G3c07) ((lambda (G3c0e@ae* G3c0f@s* G3c10@m*) (G3bf4@match (G2d26@stx-expr G3bf9@e) G3bfa@p G3c10@m* G3c0f@s* G3c0e@ae* G3bfe@r)) G3c0a@G3c07 G3c09@G3c06 G3c08@G3c05)))) (if (G28eb@G2816@annotation? G3bf9@e) (G3bf4@match (G28ed@G281a@annotation-expression G3bf9@e) G3bfa@p G3bfb@m* G3bfc@s* G3bfd@ae* G3bfe@r) (G3bf2@match* G3bf9@e G3bfa@p G3bfb@m* G3bfc@s* G3bfd@ae* G3bfe@r)))))))) (lambda (G3bf5@e G3bf6@p) (G3bf4@match G3bf5@e G3bf6@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f5b@ellipsis? (lambda (G3cb7@x) (and (G2d5a@id? G3cb7@x) (G2d62@free-id=? G3cb7@x (G2ee3@scheme-stx '...))))) (set! G2f5d@underscore? (lambda (G3cb9@x) (and (G2d5a@id? G3cb9@x) (G2d62@free-id=? G3cb9@x (G2ee3@scheme-stx '_))))) (set! G2f5f@verify-literals (lambda (G3cbb@lits G3cbc@expr) (for-each (lambda (G3cbf@x) (if (or (not (G2d5a@id? G3cbf@x)) (G2f5b@ellipsis? G3cbf@x) (G2f5d@underscore? G3cbf@x)) (G3044@syntax-violation '#f '"invalid literal" G3cbc@expr G3cbf@x) (void))) G3cbb@lits))) (set! G2f61@syntax-case-transformer ((lambda () ((lambda (G3cc2@build-dispatch-call G3cc4@invalid-ids-error G3cc6@gen-clause G3cc8@gen-syntax-case) (begin (set! G3cc2@build-dispatch-call (lambda (G3d31@pvars G3d32@expr G3d33@y G3d34@r G3d35@mr) ((lambda (G3d3b@ids G3d3c@levels) ((lambda (G3d3f@labels G3d40@new-vars) ((lambda (G3d43@body) (list '(primitive apply) (G2cb4@G2bf2@build-lambda '#f G3d40@new-vars G3d43@body) G3d33@y)) (G2f7d@chi-expr (G2d46@add-subst (G2d15@make-full-rib G3d3b@ids G3d3f@labels) G3d32@expr) (append (map (lambda (G3d45@label G3d46@var G3d47@level) (cons G3d45@label (G2d7a@make-binding 'syntax (cons G3d46@var G3d47@level)))) G3d3f@labels G3d40@new-vars (map cdr G3d31@pvars)) G3d34@r) G3d35@mr))) (map G2cda@gen-label G3d3b@ids) (map G2cd6@gen-lexical G3d3b@ids))) (map car G3d31@pvars) (map cdr G3d31@pvars)))) (set! G3cc4@invalid-ids-error (lambda (G3d25@id* G3d26@e G3d27@class) ((letrec ((G3d2b@find (lambda (G3d2d@id* G3d2e@ok*) (if (null? G3d2d@id*) (G3044@syntax-violation '#f '"invalid syntax" G3d26@e) (if (G2d5a@id? (car G3d2d@id*)) (if (G2d68@bound-id-member? (car G3d2d@id*) G3d2e@ok*) (G3040@syntax-error (car G3d2d@id*) '"duplicate " G3d27@class) (G3d2b@find (cdr G3d2d@id*) (cons (car G3d2d@id*) G3d2e@ok*))) (G3040@syntax-error (car G3d2d@id*) '"invalid " G3d27@class)))))) G3d2b@find) G3d25@id* '()))) (set! G3cc6@gen-clause (lambda (G3cff@x G3d00@keys G3d01@clauses G3d02@r G3d03@mr G3d04@pat G3d05@fender G3d06@expr) (call-with-values (lambda () (G2f57@convert-pattern G3d04@pat G3d00@keys)) (lambda (G3d11@G3d0f G3d12@G3d10) ((lambda (G3d15@pvars G3d16@p) (if (not (G2d66@distinct-bound-ids? (map car G3d15@pvars))) (G3cc4@invalid-ids-error (map car G3d15@pvars) G3d04@pat '"pattern variable") (if (not (for-all (lambda (G3d19@x) (not (G2f5b@ellipsis? (car G3d19@x)))) G3d15@pvars)) (G3044@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d04@pat) ((lambda (G3d1b@y) ((lambda (G3d1d@test) ((lambda (G3d1f@conseq) ((lambda (G3d21@altern) (list (G2cb4@G2bf2@build-lambda '#f (list G3d1b@y) (list 'if G3d1d@test G3d1f@conseq G3d21@altern)) (list '(primitive syntax-dispatch) G3cff@x (list 'quote G3d16@p)))) (G3cc8@gen-syntax-case G3cff@x G3d00@keys G3d01@clauses G3d02@r G3d03@mr))) (G3cc2@build-dispatch-call G3d15@pvars G3d06@expr G3d1b@y G3d02@r G3d03@mr))) (if (eq? G3d05@fender '#t) G3d1b@y ((lambda (G3d23@call) (list 'if G3d1b@y G3d23@call (list 'quote '#f))) (G3cc2@build-dispatch-call G3d15@pvars G3d05@fender G3d1b@y G3d02@r G3d03@mr))))) (G2cd6@gen-lexical 'tmp))))) G3d12@G3d10 G3d11@G3d0f))))) (set! G3cc8@gen-syntax-case (lambda (G3cdd@x G3cde@keys G3cdf@clauses G3ce0@r G3ce1@mr) (if (null? G3cdf@clauses) (list '(primitive syntax-error) G3cdd@x) ((lambda (G3ce7@t) ((lambda (G3ce9@ls/false) (if G3ce9@ls/false (apply (lambda (G3ceb@pat G3cec@expr) (if (and (G2d5a@id? G3ceb@pat) (not (G2d68@bound-id-member? G3ceb@pat G3cde@keys)) (not (G2f5b@ellipsis? G3ceb@pat))) (if (G2d62@free-id=? G3ceb@pat (G2ee3@scheme-stx '_)) (G2f7d@chi-expr G3cec@expr G3ce0@r G3ce1@mr) ((lambda (G3cef@lab G3cf0@lex) ((lambda (G3cf3@body) (list (G2cb4@G2bf2@build-lambda '#f (list G3cf0@lex) G3cf3@body) G3cdd@x)) (G2f7d@chi-expr (G2d46@add-subst (G2d15@make-full-rib (list G3ceb@pat) (list G3cef@lab)) G3cec@expr) (cons (cons G3cef@lab (G2d7a@make-binding 'syntax (cons G3cf0@lex '0))) G3ce0@r) G3ce1@mr))) (G2cda@gen-label G3ceb@pat) (G2cd6@gen-lexical G3ceb@pat))) (G3cc6@gen-clause G3cdd@x G3cde@keys (cdr G3cdf@clauses) G3ce0@r G3ce1@mr G3ceb@pat '#t G3cec@expr))) G3ce9@ls/false) ((lambda (G3cf5@t) ((lambda (G3cf7@ls/false) (if G3cf7@ls/false (apply (lambda (G3cf9@pat G3cfa@fender G3cfb@expr) (G3cc6@gen-clause G3cdd@x G3cde@keys (cdr G3cdf@clauses) G3ce0@r G3ce1@mr G3cf9@pat G3cfa@fender G3cfb@expr)) G3cf7@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3cf5@t))) (G2f59@syntax-dispatch G3cf5@t '(any any any)))) G3ce7@t))) (G2f59@syntax-dispatch G3ce7@t '(any any)))) (car G3cdf@clauses))))) (lambda (G3cc9@e G3cca@r G3ccb@mr) ((lambda (G3ccf@t) ((lambda (G3cd1@ls/false) (if G3cd1@ls/false (apply (lambda (G3cd3@expr G3cd4@keys G3cd5@clauses) (begin (G2f5f@verify-literals G3cd4@keys G3cc9@e) ((lambda (G3cd9@x) ((lambda (G3cdb@body) (list (G2cb4@G2bf2@build-lambda '#f (list G3cd9@x) G3cdb@body) (G2f7d@chi-expr G3cd3@expr G3cca@r G3ccb@mr))) (G3cc8@gen-syntax-case G3cd9@x G3cd4@keys G3cd5@clauses G3cca@r G3ccb@mr))) (G2cd6@gen-lexical 'tmp)))) G3cd1@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3ccf@t))) (G2f59@syntax-dispatch G3ccf@t '(_ any each-any . each-any)))) G3cc9@e)))) '#f '#f '#f '#f)))) (set! G2f63@ellipsis-map (lambda (G3d4b@proc G3d4c@ls . G3d4f@ls*) ((lambda (G3d52@who) (begin (set! G3d52@who '...) (begin (if (not (list? G3d4c@ls)) (assertion-violation G3d52@who '"not a list" G3d4c@ls) (void)) (if (not (null? G3d4f@ls*)) ((lambda (G3d53@n) (for-each (lambda (G3d55@x) (begin (if (not (list? G3d55@x)) (assertion-violation G3d52@who '"not a list" G3d55@x) (void)) (if (not (= (length G3d55@x) G3d53@n)) (assertion-violation G3d52@who '"length mismatch" G3d4c@ls G3d55@x) (void)))) G3d4f@ls*)) (length G3d4c@ls)) (void)) (apply map G3d4b@proc G3d4c@ls G3d4f@ls*)))) '#f))) (set! G2f65@syntax-transformer ((lambda () ((lambda (G3d58@gen-syntax G3d5a@gen-ref G3d5c@gen-append G3d5e@gen-mappend G3d60@gen-map G3d62@gen-cons G3d64@gen-vector G3d66@regen) (begin (set! G3d58@gen-syntax (lambda (G3dcb@src G3dcc@e G3dcd@r G3dce@maps G3dcf@ellipsis? G3dd0@vec?) ((lambda (G3dd7@t) ((lambda (G3dd9@ls/false) (if (and G3dd9@ls/false (apply (lambda (G3ddb@dots) (G3dcf@ellipsis? G3ddb@dots)) G3dd9@ls/false)) (apply (lambda (G3ddd@dots) (G3044@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dcb@src)) G3dd9@ls/false) ((lambda (G3ddf@t) ((lambda (G3de1@ls/false) (if (and G3de1@ls/false (apply (lambda (G3de3@id) (G2d5a@id? G3de3@id)) G3de1@ls/false)) (apply (lambda (G3de5@id) ((lambda (G3de7@label) ((lambda (G3de9@b) ((lambda () (if (eq? (G2d7c@binding-type G3de9@b) 'syntax) (call-with-values (lambda () ((lambda (G3ded@var.lev) (G3d5a@gen-ref G3dcb@src (car G3ded@var.lev) (cdr G3ded@var.lev) G3dce@maps)) (G2d7e@binding-value G3de9@b))) (lambda (G3def@G3deb G3df0@G3dec) ((lambda (G3df3@maps G3df4@var) (values (list 'ref G3df4@var) G3df3@maps)) G3df0@G3dec G3def@G3deb))) (values (list 'quote G3dcc@e) G3dce@maps))))) (G2d78@label->binding G3de7@label G3dcd@r))) (G2d74@id->label G3dcc@e))) G3de1@ls/false) ((lambda (G3df7@t) ((lambda (G3df9@ls/false) (if (and G3df9@ls/false (apply (lambda (G3dfb@dots G3dfc@e) (G3dcf@ellipsis? G3dfb@dots)) G3df9@ls/false)) (apply (lambda (G3dff@dots G3e00@e) (if G3dd0@vec? (G3044@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dcb@src) (G3d58@gen-syntax G3dcb@src G3e00@e G3dcd@r G3dce@maps (lambda (G3e03@x) '#f) '#f))) G3df9@ls/false) ((lambda (G3e05@t) ((lambda (G3e07@ls/false) (if (and G3e07@ls/false (apply (lambda (G3e09@x G3e0a@dots G3e0b@y) (G3dcf@ellipsis? G3e0a@dots)) G3e07@ls/false)) (apply (lambda (G3e0f@x G3e10@dots G3e11@y) ((letrec ((G3e15@f (lambda (G3e17@y G3e18@k) ((lambda (G3e1b@t) ((lambda (G3e1d@ls/false) (if G3e1d@ls/false (apply (lambda () (G3e18@k G3dce@maps)) G3e1d@ls/false) ((lambda (G3e1f@t) ((lambda (G3e21@ls/false) (if (and G3e21@ls/false (apply (lambda (G3e23@dots G3e24@y) (G3dcf@ellipsis? G3e23@dots)) G3e21@ls/false)) (apply (lambda (G3e27@dots G3e28@y) (G3e15@f G3e28@y (lambda (G3e2b@maps) (call-with-values (lambda () (G3e18@k (cons '() G3e2b@maps))) (lambda (G3e2f@G3e2d G3e30@G3e2e) ((lambda (G3e33@maps G3e34@x) (if (null? (car G3e33@maps)) (G3044@syntax-violation '#f '"extra ellipsis in syntax form" G3dcb@src) (values (G3d5e@gen-mappend G3e34@x (car G3e33@maps)) (cdr G3e33@maps)))) G3e30@G3e2e G3e2f@G3e2d)))))) G3e21@ls/false) ((lambda (G3e37@t) ((lambda (G3e39@ls/false) (if G3e39@ls/false (apply (lambda () (call-with-values (lambda () (G3d58@gen-syntax G3dcb@src G3e17@y G3dcd@r G3dce@maps G3dcf@ellipsis? G3dd0@vec?)) (lambda (G3e3d@G3e3b G3e3e@G3e3c) ((lambda (G3e41@maps G3e42@y) (call-with-values (lambda () (G3e18@k G3e41@maps)) (lambda (G3e47@G3e45 G3e48@G3e46) ((lambda (G3e4b@maps G3e4c@x) (values (G3d5c@gen-append G3e4c@x G3e42@y) G3e4b@maps)) G3e48@G3e46 G3e47@G3e45)))) G3e3e@G3e3c G3e3d@G3e3b)))) G3e39@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3e37@t))) (G2f59@syntax-dispatch G3e37@t '_))) G3e1f@t))) (G2f59@syntax-dispatch G3e1f@t '(any . any)))) G3e1b@t))) (G2f59@syntax-dispatch G3e1b@t '()))) G3e17@y)))) G3e15@f) G3e11@y (lambda (G3e4f@maps) (call-with-values (lambda () (G3d58@gen-syntax G3dcb@src G3e0f@x G3dcd@r (cons '() G3e4f@maps) G3dcf@ellipsis? '#f)) (lambda (G3e53@G3e51 G3e54@G3e52) ((lambda (G3e57@maps G3e58@x) (if (null? (car G3e57@maps)) (G3044@syntax-violation '#f '"extra ellipsis in syntax form" G3dcb@src) (values (G3d60@gen-map G3e58@x (car G3e57@maps)) (cdr G3e57@maps)))) G3e54@G3e52 G3e53@G3e51)))))) G3e07@ls/false) ((lambda (G3e5b@t) ((lambda (G3e5d@ls/false) (if G3e5d@ls/false (apply (lambda (G3e5f@x G3e60@y) (call-with-values (lambda () (G3d58@gen-syntax G3dcb@src G3e5f@x G3dcd@r G3dce@maps G3dcf@ellipsis? '#f)) (lambda (G3e65@G3e63 G3e66@G3e64) ((lambda (G3e69@maps G3e6a@xnew) (call-with-values (lambda () (G3d58@gen-syntax G3dcb@src G3e60@y G3dcd@r G3e69@maps G3dcf@ellipsis? G3dd0@vec?)) (lambda (G3e6f@G3e6d G3e70@G3e6e) ((lambda (G3e73@maps G3e74@ynew) (values (G3d62@gen-cons G3dcc@e G3e5f@x G3e60@y G3e6a@xnew G3e74@ynew) G3e73@maps)) G3e70@G3e6e G3e6f@G3e6d)))) G3e66@G3e64 G3e65@G3e63)))) G3e5d@ls/false) ((lambda (G3e77@t) ((lambda (G3e79@ls/false) (if G3e79@ls/false (apply (lambda (G3e7b@ls) (call-with-values (lambda () (G3d58@gen-syntax G3dcb@src G3e7b@ls G3dcd@r G3dce@maps G3dcf@ellipsis? '#t)) (lambda (G3e7f@G3e7d G3e80@G3e7e) ((lambda (G3e83@maps G3e84@lsnew) (values (G3d64@gen-vector G3dcc@e G3e7b@ls G3e84@lsnew) G3e83@maps)) G3e80@G3e7e G3e7f@G3e7d)))) G3e79@ls/false) ((lambda (G3e87@t) ((lambda (G3e89@ls/false) (if G3e89@ls/false (apply (lambda () (values (list 'quote G3dcc@e) G3dce@maps)) G3e89@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3e87@t))) (G2f59@syntax-dispatch G3e87@t '_))) G3e77@t))) (G2f59@syntax-dispatch G3e77@t '#(vector each-any)))) G3e5b@t))) (G2f59@syntax-dispatch G3e5b@t '(any . any)))) G3e05@t))) (G2f59@syntax-dispatch G3e05@t '(any any . any)))) G3df7@t))) (G2f59@syntax-dispatch G3df7@t '(any any)))) G3ddf@t))) (G2f59@syntax-dispatch G3ddf@t 'any))) G3dd7@t))) (G2f59@syntax-dispatch G3dd7@t 'any))) G3dcc@e))) (set! G3d5a@gen-ref (lambda (G3db3@src G3db4@var G3db5@level G3db6@maps) (if (= G3db5@level '0) (values G3db4@var G3db6@maps) (if (null? G3db6@maps) (G3044@syntax-violation '#f '"missing ellipsis in syntax form" G3db3@src) (call-with-values (lambda () (G3d5a@gen-ref G3db3@src G3db4@var (- G3db5@level '1) (cdr G3db6@maps))) (lambda (G3dbd@G3dbb G3dbe@G3dbc) ((lambda (G3dc1@outer-maps G3dc2@outer-var) ((lambda (G3dc5@t) (if G3dc5@t ((lambda (G3dc7@b) (values (cdr G3dc7@b) G3db6@maps)) G3dc5@t) ((lambda (G3dc9@inner-var) (values G3dc9@inner-var (cons (cons (cons G3dc2@outer-var G3dc9@inner-var) (car G3db6@maps)) G3dc1@outer-maps))) (G2cd6@gen-lexical 'tmp)))) (assq G3dc2@outer-var (car G3db6@maps)))) G3dbe@G3dbc G3dbd@G3dbb))))))) (set! G3d5c@gen-append (lambda (G3daf@x G3db0@y) (if (fast-equal? G3db0@y ''()) G3daf@x (list 'append G3daf@x G3db0@y)))) (set! G3d5e@gen-mappend (lambda (G3dab@e G3dac@map-env) (list 'apply '(primitive append) (G3d60@gen-map G3dab@e G3dac@map-env)))) (set! G3d60@gen-map (lambda (G3d99@e G3d9a@map-env) ((lambda (G3d9d@formals G3d9e@actuals) (if (eq? (car G3d99@e) 'ref) (car G3d9e@actuals) (if (for-all (lambda (G3da1@x) (and (eq? (car G3da1@x) 'ref) (memq (cadr G3da1@x) G3d9d@formals))) (cdr G3d99@e)) ((lambda (G3da3@args) (cons 'map (cons (list 'primitive (car G3d99@e)) G3da3@args))) (map ((lambda (G3da5@r) (lambda (G3da7@x) (cdr (assq (cadr G3da7@x) G3da5@r)))) (map cons G3d9d@formals G3d9e@actuals)) (cdr G3d99@e))) (cons* 'map (list 'lambda G3d9d@formals G3d99@e) G3d9e@actuals)))) (map cdr G3d9a@map-env) (map (lambda (G3da9@x) (list 'ref (car G3da9@x))) G3d9a@map-env)))) (set! G3d62@gen-cons (lambda (G3d89@e G3d8a@x G3d8b@y G3d8c@xnew G3d8d@ynew) ((lambda (G3d93@t) (if (memv G3d93@t '(quote)) (if (eq? (car G3d8c@xnew) 'quote) ((lambda (G3d95@xnew G3d96@ynew) (if (and (eq? G3d95@xnew G3d8a@x) (eq? G3d96@ynew G3d8b@y)) (list 'quote G3d89@e) (list 'quote (cons G3d95@xnew G3d96@ynew)))) (cadr G3d8c@xnew) (cadr G3d8d@ynew)) (if (null? (cadr G3d8d@ynew)) (list 'list G3d8c@xnew) (list 'cons G3d8c@xnew G3d8d@ynew))) (if (memv G3d93@t '(list)) (cons 'list (cons G3d8c@xnew (cdr G3d8d@ynew))) (list 'cons G3d8c@xnew G3d8d@ynew)))) (car G3d8d@ynew)))) (set! G3d64@gen-vector (lambda (G3d83@e G3d84@ls G3d85@lsnew) (if (eq? (car G3d85@lsnew) 'quote) (if (eq? (cadr G3d85@lsnew) G3d84@ls) (list 'quote G3d83@e) (list 'quote (list->vector (cadr G3d85@lsnew)))) (if (eq? (car G3d85@lsnew) 'list) (cons 'vector (cdr G3d85@lsnew)) (list 'list->vector G3d85@lsnew))))) (set! G3d66@regen (lambda (G3d7d@x) ((lambda (G3d7f@t) (if (memv G3d7f@t '(ref)) (cadr G3d7d@x) (if (memv G3d7f@t '(primitive)) (list 'primitive (cadr G3d7d@x)) (if (memv G3d7f@t '(quote)) (list 'quote (cadr G3d7d@x)) (if (memv G3d7f@t '(lambda)) (G2cb4@G2bf2@build-lambda '#f (cadr G3d7d@x) (G3d66@regen (caddr G3d7d@x))) (if (memv G3d7f@t '(map)) ((lambda (G3d81@ls) (cons '(primitive ellipsis-map) G3d81@ls)) (map G3d66@regen (cdr G3d7d@x))) (cons (list 'primitive (car G3d7d@x)) (map G3d66@regen (cdr G3d7d@x))))))))) (car G3d7d@x)))) (lambda (G3d67@e G3d68@r G3d69@mr) ((lambda (G3d6d@t) ((lambda (G3d6f@ls/false) (if G3d6f@ls/false (apply (lambda (G3d71@x) (call-with-values (lambda () (G3d58@gen-syntax G3d67@e G3d71@x G3d68@r '() G2f5b@ellipsis? '#f)) (lambda (G3d75@G3d73 G3d76@G3d74) ((lambda (G3d79@maps G3d7a@e) (G3d66@regen G3d7a@e)) G3d76@G3d74 G3d75@G3d73)))) G3d6f@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3d6d@t))) (G2f59@syntax-dispatch G3d6d@t '(_ any)))) G3d67@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f67@core-macro-transformer (lambda (G3e8b@name) ((lambda (G3e8d@t) (if (memv G3e8d@t '(quote)) G2f09@quote-transformer (if (memv G3e8d@t '(lambda)) G2f0d@lambda-transformer (if (memv G3e8d@t '(case-lambda)) G2f0b@case-lambda-transformer (if (memv G3e8d@t '(letrec)) G2ef1@letrec-transformer (if (memv G3e8d@t '(letrec*)) G2ef3@letrec*-transformer (if (memv G3e8d@t '(if)) G2f01@if-transformer (if (memv G3e8d@t '(and)) G2f03@and-transformer (if (memv G3e8d@t '(or)) G2f05@or-transformer (if (memv G3e8d@t '(foreign-call)) G2f55@foreign-call-transformer (if (memv G3e8d@t '(syntax-case)) G2f61@syntax-case-transformer (if (memv G3e8d@t '(syntax)) G2f65@syntax-transformer (if (memv G3e8d@t '(type-descriptor)) G2ef7@type-descriptor-transformer (if (memv G3e8d@t '(record-type-descriptor)) G2ef9@record-type-descriptor-transformer (if (memv G3e8d@t '(record-constructor-descriptor)) G2efb@record-constructor-descriptor-transformer (if (memv G3e8d@t '(fluid-let-syntax)) G2ef5@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e8b@name))))))))))))))))) G3e8b@name))) (set! G2f69@file-options-macro (lambda (G3e8f@x) ((lambda (G3e92@valid-option?) (begin (set! G3e92@valid-option? (lambda (G3e9b@x) (and (G2d5a@id? G3e9b@x) (memq (G2d5c@id->sym G3e9b@x) '(no-fail no-create no-truncate))))) ((lambda (G3e93@t) ((lambda (G3e95@ls/false) (if (and G3e95@ls/false (apply (lambda (G3e97@opt*) (and (for-all G3e92@valid-option? G3e97@opt*) (G28f7@G2898@file-options-spec (map G2d5c@id->sym G3e97@opt*)))) G3e95@ls/false)) (apply (lambda (G3e99@opt*) (G2f0f@bless (list 'quote (G28f7@G2898@file-options-spec (map G2d5c@id->sym G3e99@opt*))))) G3e95@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3e93@t))) (G2f59@syntax-dispatch G3e93@t '(_ . each-any)))) G3e8f@x))) '#f))) (set! G2f6b@symbol-macro (lambda (G3e9d@x G3e9e@set) ((lambda (G3ea1@t) ((lambda (G3ea3@ls/false) (if (and G3ea3@ls/false (apply (lambda (G3ea5@name) (and (G2d5a@id? G3ea5@name) (memq (G2d5c@id->sym G3ea5@name) G3e9e@set))) G3ea3@ls/false)) (apply (lambda (G3ea7@name) (G2f0f@bless (list 'quote G3ea7@name))) G3ea3@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3ea1@t))) (G2f59@syntax-dispatch G3ea1@t '(_ any)))) G3e9d@x))) (set! G2f6d@macro-transformer (lambda (G3ea9@x) (if (procedure? G3ea9@x) G3ea9@x (if (symbol? G3ea9@x) ((lambda (G3eab@t) (if (memv G3eab@t '(define-record-type)) G2f4d@define-record-type-macro (if (memv G3eab@t '(define-struct)) G2f4b@define-struct-macro (if (memv G3eab@t '(include)) G2f41@include-macro (if (memv G3eab@t '(cond)) G2f3d@cond-macro (if (memv G3eab@t '(let)) G2f15@let-macro (if (memv G3eab@t '(do)) G2f35@do-macro (if (memv G3eab@t '(or)) G2f39@or-macro (if (memv G3eab@t '(and)) G2f3b@and-macro (if (memv G3eab@t '(let*)) G2f37@let*-macro (if (memv G3eab@t '(let-values)) G2f17@let-values-macro (if (memv G3eab@t '(let*-values)) G2f19@let*-values-macro (if (memv G3eab@t '(syntax-rules)) G2f45@syntax-rules-macro (if (memv G3eab@t '(quasiquote)) G2f47@quasiquote-macro (if (memv G3eab@t '(quasisyntax)) G2f49@quasisyntax-macro (if (memv G3eab@t '(with-syntax)) G2f11@with-syntax-macro (if (memv G3eab@t '(when)) G2efd@when-macro (if (memv G3eab@t '(unless)) G2eff@unless-macro (if (memv G3eab@t '(case)) G2f07@case-macro (if (memv G3eab@t '(identifier-syntax)) G2f33@identifier-syntax-macro (if (memv G3eab@t '(time)) G2f2b@time-macro (if (memv G3eab@t '(delay)) G2f2d@delay-macro (if (memv G3eab@t '(assert)) G2f2f@assert-macro (if (memv G3eab@t '(endianness)) G2f31@endianness-macro (if (memv G3eab@t '(guard)) G2f27@guard-macro (if (memv G3eab@t '(define-enumeration)) G2f29@define-enumeration-macro (if (memv G3eab@t '(trace-lambda)) G2f1b@trace-lambda-macro (if (memv G3eab@t '(trace-define)) G2f1d@trace-define-macro (if (memv G3eab@t '(trace-define-syntax)) G2f1f@trace-define-syntax-macro (if (memv G3eab@t '(trace-let-syntax)) G2f23@trace-let-syntax-macro (if (memv G3eab@t '(trace-letrec-syntax)) G2f25@trace-letrec-syntax-macro (if (memv G3eab@t '(define-condition-type)) G2f4f@define-condition-type-macro (if (memv G3eab@t '(parameterize)) G2f53@parameterize-macro (if (memv G3eab@t '(include-into)) G2f43@include-into-macro (if (memv G3eab@t '(eol-style)) (lambda (G3ead@x) (G2f6b@symbol-macro G3ead@x '(none lf cr crlf nel crnel ls))) (if (memv G3eab@t '(error-handling-mode)) (lambda (G3eaf@x) (G2f6b@symbol-macro G3eaf@x '(ignore raise replace))) (if (memv G3eab@t '(buffer-mode)) (lambda (G3eb1@x) (G2f6b@symbol-macro G3eb1@x '(none line block))) (if (memv G3eab@t '(file-options)) G2f69@file-options-macro (if (memv G3eab@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f51@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ea9@x)))))))))))))))))))))))))))))))))))))))) G3ea9@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ea9@x))))) (set! G2f6f@local-macro-transformer (lambda (G3eb3@x) (car G3eb3@x))) (set! G2f71@do-macro-call (lambda (G3eb5@transformer G3eb6@expr) ((lambda (G3eb9@out) (begin ((letrec ((G3ebb@f (lambda (G3ebd@x) (if (not (G2d22@stx? G3ebd@x)) (if (pair? G3ebd@x) (begin (G3ebb@f (car G3ebd@x)) (G3ebb@f (cdr G3ebd@x))) (if (vector? G3ebd@x) (vector-for-each G3ebb@f G3ebd@x) (if (symbol? G3ebd@x) (G3044@syntax-violation '#f '"raw symbol encountered in output of macro" G3eb6@expr G3ebd@x) (void)))) (void))))) G3ebb@f) G3eb9@out) (G2d44@add-mark (G2d3a@gen-mark) G3eb9@out G3eb6@expr))) (G3eb5@transformer (G2d44@add-mark G2d3c@anti-mark G3eb6@expr '#f))))) (set! G2f73@chi-macro (lambda (G3ebf@p G3ec0@e) (G2f71@do-macro-call (G2f6d@macro-transformer G3ebf@p) G3ec0@e))) (set! G2f75@chi-local-macro (lambda (G3ec3@p G3ec4@e) (G2f71@do-macro-call (G2f6f@local-macro-transformer G3ec3@p) G3ec4@e))) (set! G2f77@chi-global-macro (lambda (G3ec7@p G3ec8@e) ((lambda (G3ecb@lib G3ecc@loc) (begin (G2b72@G2a1a@visit-library G3ecb@lib) ((lambda (G3ecf@x) ((lambda (G3ed1@transformer) (G2f71@do-macro-call G3ed1@transformer G3ec8@e)) (if (procedure? G3ecf@x) G3ecf@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ecf@x)))) (symbol-value G3ecc@loc)))) (car G3ec7@p) (cdr G3ec7@p)))) (set! G2f79@chi-expr* (lambda (G3ed3@e* G3ed4@r G3ed5@mr) (if (null? G3ed3@e*) '() ((lambda (G3ed9@e) (cons G3ed9@e (G2f79@chi-expr* (cdr G3ed3@e*) G3ed4@r G3ed5@mr))) (G2f7d@chi-expr (car G3ed3@e*) G3ed4@r G3ed5@mr))))) (set! G2f7b@chi-application (lambda (G3edb@e G3edc@r G3edd@mr) ((lambda (G3ee1@t) ((lambda (G3ee3@ls/false) (if G3ee3@ls/false (apply (lambda (G3ee5@rator G3ee6@rands) ((lambda (G3ee9@rator) (cons G3ee9@rator (G2f79@chi-expr* G3ee6@rands G3edc@r G3edd@mr))) (G2f7d@chi-expr G3ee5@rator G3edc@r G3edd@mr))) G3ee3@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3ee1@t))) (G2f59@syntax-dispatch G3ee1@t '(any . each-any)))) G3edb@e))) (set! G2f7d@chi-expr (lambda (G3eeb@e G3eec@r G3eed@mr) (call-with-values (lambda () (G2d82@syntax-type G3eeb@e G3eec@r)) (lambda (G3ef4@G3ef1 G3ef5@G3ef2 G3ef6@G3ef3) ((lambda (G3efa@kwd G3efb@value G3efc@type) ((lambda (G3f00@t) (if (memv G3f00@t '(core-macro)) ((lambda (G3f02@transformer) (G3f02@transformer G3eeb@e G3eec@r G3eed@mr)) (G2f67@core-macro-transformer G3efb@value)) (if (memv G3f00@t '(global)) ((lambda (G3f04@lib) ((lambda (G3f06@loc) ((lambda () (begin ((G2fc6@inv-collector) G3f04@lib) G3f06@loc)))) (cdr G3efb@value))) (car G3efb@value)) (if (memv G3f00@t '(core-prim)) ((lambda (G3f08@name) (list 'primitive G3f08@name)) G3efb@value) (if (memv G3f00@t '(call)) (G2f7b@chi-application G3eeb@e G3eec@r G3eed@mr) (if (memv G3f00@t '(lexical)) ((lambda (G3f0a@lex) G3f0a@lex) (G2ee5@lexical-var G3efb@value)) (if (memv G3f00@t '(global-macro global-macro!)) (G2f7d@chi-expr (G2f77@chi-global-macro G3efb@value G3eeb@e) G3eec@r G3eed@mr) (if (memv G3f00@t '(local-macro local-macro!)) (G2f7d@chi-expr (G2f75@chi-local-macro G3efb@value G3eeb@e) G3eec@r G3eed@mr) (if (memv G3f00@t '(macro macro!)) (G2f7d@chi-expr (G2f73@chi-macro G3efb@value G3eeb@e) G3eec@r G3eed@mr) (if (memv G3f00@t '(constant)) ((lambda (G3f0c@datum) (list 'quote G3f0c@datum)) G3efb@value) (if (memv G3f00@t '(set!)) (G2f7f@chi-set! G3eeb@e G3eec@r G3eed@mr) (if (memv G3f00@t '(begin)) ((lambda (G3f0e@t) ((lambda (G3f10@ls/false) (if G3f10@ls/false (apply (lambda (G3f12@x G3f13@x*) (G2cb7@G2c28@build-sequence '#f (G2f79@chi-expr* (cons G3f12@x G3f13@x*) G3eec@r G3eed@mr))) G3f10@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3f0e@t))) (G2f59@syntax-dispatch G3f0e@t '(_ any . each-any)))) G3eeb@e) (if (memv G3f00@t '(let-syntax letrec-syntax)) ((lambda (G3f16@t) ((lambda (G3f18@ls/false) (if (and G3f18@ls/false (apply (lambda (G3f1a@xlhs* G3f1b@xrhs* G3f1c@xbody G3f1d@xbody*) (if (not (G2d64@valid-bound-ids? G3f1a@xlhs*)) (G3044@syntax-violation '#f '"invalid identifiers" G3eeb@e) (void))) G3f18@ls/false)) (apply (lambda (G3f22@xlhs* G3f23@xrhs* G3f24@xbody G3f25@xbody*) ((lambda (G3f2a@xlab*) ((lambda (G3f2c@xrib) ((lambda (G3f2e@xb*) ((lambda () (G2cb7@G2c28@build-sequence '#f (G2f79@chi-expr* (map (lambda (G3f30@x) (G2d46@add-subst G3f2c@xrib G3f30@x)) (cons G3f24@xbody G3f25@xbody*)) (append (map cons G3f2a@xlab* G3f2e@xb*) G3eec@r) (append (map cons G3f2a@xlab* G3f2e@xb*) G3eed@mr)))))) (map (lambda (G3f32@x) (G2d9a@make-eval-transformer (G2fb8@expand-transformer (if (eq? G3efc@type 'let-syntax) G3f32@x (G2d46@add-subst G3f2c@xrib G3f32@x)) G3eed@mr))) G3f23@xrhs*))) (G2d15@make-full-rib G3f22@xlhs* G3f2a@xlab*))) (map G2cda@gen-label G3f22@xlhs*))) G3f18@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3f16@t))) (G2f59@syntax-dispatch G3f16@t '(_ #(each (any any)) any . each-any)))) G3eeb@e) (if (memv G3f00@t '(displaced-lexical)) (G3044@syntax-violation '#f '"identifier out of context" G3eeb@e) (if (memv G3f00@t '(syntax)) (G3044@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3eeb@e) (if (memv G3f00@t '(define define-syntax module import library)) (G3044@syntax-violation '#f (string-append ((lambda (G3f34@t) (if (memv G3f34@t '(define)) '"a definition" (if (memv G3f34@t '(define-syntax)) '"a define-syntax" (if (memv G3f34@t '(module)) '"a module definition" (if (memv G3f34@t '(library)) '"a library definition" (if (memv G3f34@t '(import)) '"an import declaration" (if (memv G3f34@t '(export)) '"an export declaration" '"a non-expression"))))))) G3efc@type) '" was found where an expression was expected") G3eeb@e) (if (memv G3f00@t '(mutable)) (G3044@syntax-violation '#f '"attempt to reference an unexportable variable" G3eeb@e) (G3044@syntax-violation '#f '"invalid expression" G3eeb@e)))))))))))))))))) G3efc@type)) G3ef6@G3ef3 G3ef5@G3ef2 G3ef4@G3ef1))))) (set! G2f7f@chi-set! (lambda (G3f36@e G3f37@r G3f38@mr) ((lambda (G3f3c@t) ((lambda (G3f3e@ls/false) (if (and G3f3e@ls/false (apply (lambda (G3f40@x G3f41@v) (G2d5a@id? G3f40@x)) G3f3e@ls/false)) (apply (lambda (G3f44@x G3f45@v) (call-with-values (lambda () (G2d82@syntax-type G3f44@x G3f37@r)) (lambda (G3f4b@G3f48 G3f4c@G3f49 G3f4d@G3f4a) ((lambda (G3f51@kwd G3f52@value G3f53@type) ((lambda (G3f57@t) (if (memv G3f57@t '(lexical)) (begin (G2ee9@set-lexical-mutable! G3f52@value '#t) (list 'set! (G2ee5@lexical-var G3f52@value) (G2f7d@chi-expr G3f45@v G3f37@r G3f38@mr))) (if (memv G3f57@t '(core-prim)) (G3044@syntax-violation '#f '"cannot modify imported core primitive" G3f36@e) (if (memv G3f57@t '(global)) (G3044@syntax-violation '#f '"attempt to modify imported binding" G3f36@e) (if (memv G3f57@t '(global-macro!)) (G2f7d@chi-expr (G2f77@chi-global-macro G3f52@value G3f36@e) G3f37@r G3f38@mr) (if (memv G3f57@t '(local-macro!)) (G2f7d@chi-expr (G2f75@chi-local-macro G3f52@value G3f36@e) G3f37@r G3f38@mr) (if (memv G3f57@t '(mutable)) (G3044@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f36@e) (G3044@syntax-violation '#f '"invalid syntax" G3f36@e)))))))) G3f53@type)) G3f4d@G3f4a G3f4c@G3f49 G3f4b@G3f48)))) G3f3e@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3f3c@t))) (G2f59@syntax-dispatch G3f3c@t '(_ any any)))) G3f36@e))) (set! G2f81@verify-formals (lambda (G3f59@fmls G3f5a@stx) ((lambda (G3f5d@t) ((lambda (G3f5f@ls/false) (if G3f5f@ls/false (apply (lambda (G3f61@x*) (if (not (G2d64@valid-bound-ids? G3f61@x*)) (G2f13@invalid-fmls-error G3f5a@stx G3f59@fmls) (void))) G3f5f@ls/false) ((lambda (G3f63@t) ((lambda (G3f65@ls/false) (if G3f65@ls/false (apply (lambda (G3f67@x* G3f68@x) (if (not (G2d64@valid-bound-ids? (cons G3f68@x G3f67@x*))) (G2f13@invalid-fmls-error G3f5a@stx G3f59@fmls) (void))) G3f65@ls/false) ((lambda (G3f6b@t) ((lambda (G3f6d@ls/false) (if G3f6d@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid syntax" G3f5a@stx)) G3f6d@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3f6b@t))) (G2f59@syntax-dispatch G3f6b@t '_))) G3f63@t))) (G2f59@syntax-dispatch G3f63@t '#(each+ any () any)))) G3f5d@t))) (G2f59@syntax-dispatch G3f5d@t 'each-any))) G3f59@fmls))) (set! G2f83@chi-lambda-clause (lambda (G3f6f@stx G3f70@fmls G3f71@body* G3f72@r G3f73@mr) ((lambda (G3f79@t) ((lambda (G3f7b@ls/false) (if G3f7b@ls/false (apply (lambda (G3f7d@x*) (begin (G2f81@verify-formals G3f70@fmls G3f6f@stx) ((lambda (G3f7f@lex* G3f80@lab*) (values G3f7f@lex* (G2f93@chi-internal (G2d46@add-subst (G2d15@make-full-rib G3f7d@x* G3f80@lab*) G3f71@body*) (G2eed@add-lexicals G3f80@lab* G3f7f@lex* G3f72@r) G3f73@mr))) (map G2cd6@gen-lexical G3f7d@x*) (map G2cda@gen-label G3f7d@x*)))) G3f7b@ls/false) ((lambda (G3f83@t) ((lambda (G3f85@ls/false) (if G3f85@ls/false (apply (lambda (G3f87@x* G3f88@x) (begin (G2f81@verify-formals G3f70@fmls G3f6f@stx) ((lambda (G3f8b@lex* G3f8c@lab* G3f8d@lex G3f8e@lab) (values (append G3f8b@lex* G3f8d@lex) (G2f93@chi-internal (G2d46@add-subst (G2d15@make-full-rib (cons G3f88@x G3f87@x*) (cons G3f8e@lab G3f8c@lab*)) G3f71@body*) (G2eed@add-lexicals (cons G3f8e@lab G3f8c@lab*) (cons G3f8d@lex G3f8b@lex*) G3f72@r) G3f73@mr))) (map G2cd6@gen-lexical G3f87@x*) (map G2cda@gen-label G3f87@x*) (G2cd6@gen-lexical G3f88@x) (G2cda@gen-label G3f88@x)))) G3f85@ls/false) ((lambda (G3f93@t) ((lambda (G3f95@ls/false) (if G3f95@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid syntax" G3f70@fmls)) G3f95@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G3f93@t))) (G2f59@syntax-dispatch G3f93@t '_))) G3f83@t))) (G2f59@syntax-dispatch G3f83@t '#(each+ any () any)))) G3f79@t))) (G2f59@syntax-dispatch G3f79@t 'each-any))) G3f70@fmls))) (set! G2f85@chi-lambda-clause* (lambda (G3f97@stx G3f98@fmls* G3f99@body** G3f9a@r G3f9b@mr) (if (null? G3f98@fmls*) (values '() '()) (call-with-values (lambda () (G2f83@chi-lambda-clause G3f97@stx (car G3f98@fmls*) (car G3f99@body**) G3f9a@r G3f9b@mr)) (lambda (G3fa3@G3fa1 G3fa4@G3fa2) ((lambda (G3fa7@b G3fa8@a) (call-with-values (lambda () (G2f85@chi-lambda-clause* G3f97@stx (cdr G3f98@fmls*) (cdr G3f99@body**) G3f9a@r G3f9b@mr)) (lambda (G3fad@G3fab G3fae@G3fac) ((lambda (G3fb1@b* G3fb2@a*) (values (cons G3fa8@a G3fb2@a*) (cons G3fa7@b G3fb1@b*))) G3fae@G3fac G3fad@G3fab)))) G3fa4@G3fa2 G3fa3@G3fa1)))))) (set! G2f87@chi-defun (lambda (G3fb5@x G3fb6@r G3fb7@mr) ((lambda (G3fbb@fmls G3fbc@body*) (call-with-values (lambda () (G2f83@chi-lambda-clause G3fbb@fmls G3fbb@fmls G3fbc@body* G3fb6@r G3fb7@mr)) (lambda (G3fc1@G3fbf G3fc2@G3fc0) ((lambda (G3fc5@body G3fc6@fmls) (G2cb4@G2bf2@build-lambda '#f G3fc6@fmls G3fc5@body)) G3fc2@G3fc0 G3fc1@G3fbf)))) (car G3fb5@x) (cdr G3fb5@x)))) (set! G2f89@chi-rhs (lambda (G3fc9@rhs G3fca@r G3fcb@mr) ((lambda (G3fcf@t) (if (memv G3fcf@t '(defun)) (G2f87@chi-defun (cdr G3fc9@rhs) G3fca@r G3fcb@mr) (if (memv G3fcf@t '(expr)) ((lambda (G3fd1@expr) (G2f7d@chi-expr G3fd1@expr G3fca@r G3fcb@mr)) (cdr G3fc9@rhs)) (if (memv G3fcf@t '(top-expr)) ((lambda (G3fd3@expr) (G2cb7@G2c28@build-sequence '#f (list (G2f7d@chi-expr G3fd3@expr G3fca@r G3fcb@mr) (G2cb8@G2c2a@build-void)))) (cdr G3fc9@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fc9@rhs))))) (car G3fc9@rhs)))) (set! G2f8b@expand-interaction-rhs*/init* (lambda (G3fd5@lhs* G3fd6@rhs* G3fd7@init* G3fd8@r G3fd9@mr) ((letrec ((G3fdf@f (lambda (G3fe1@lhs* G3fe2@rhs*) (if (null? G3fe1@lhs*) (map (lambda (G3fe5@x) (G2f7d@chi-expr G3fe5@x G3fd8@r G3fd9@mr)) G3fd7@init*) ((lambda (G3fe7@lhs G3fe8@rhs) ((lambda (G3feb@t) (if (memv G3feb@t '(defun)) ((lambda (G3fed@rhs) (cons (list 'set! G3fe7@lhs G3fed@rhs) (G3fdf@f (cdr G3fe1@lhs*) (cdr G3fe2@rhs*)))) (G2f87@chi-defun (cdr G3fe8@rhs) G3fd8@r G3fd9@mr)) (if (memv G3feb@t '(expr)) ((lambda (G3fef@rhs) (cons (list 'set! G3fe7@lhs G3fef@rhs) (G3fdf@f (cdr G3fe1@lhs*) (cdr G3fe2@rhs*)))) (G2f7d@chi-expr (cdr G3fe8@rhs) G3fd8@r G3fd9@mr)) (if (memv G3feb@t '(top-expr)) ((lambda (G3ff1@e) (cons G3ff1@e (G3fdf@f (cdr G3fe1@lhs*) (cdr G3fe2@rhs*)))) (G2f7d@chi-expr (cdr G3fe8@rhs) G3fd8@r G3fd9@mr)) (error 'expand-interaction '"invallid" G3fe8@rhs))))) (car G3fe8@rhs))) (car G3fe1@lhs*) (car G3fe2@rhs*)))))) G3fdf@f) G3fd5@lhs* G3fd6@rhs*))) (set! G2f8d@chi-rhs* (lambda (G3ff3@rhs* G3ff4@r G3ff5@mr) ((letrec ((G3ff9@f (lambda (G3ffb@ls) (if (null? G3ffb@ls) '() ((lambda (G3ffd@a) (cons G3ffd@a (G3ff9@f (cdr G3ffb@ls)))) (G2f89@chi-rhs (car G3ffb@ls) G3ff4@r G3ff5@mr)))))) G3ff9@f) G3ff3@rhs*))) (set! G2f8f@find-bound=? (lambda (G3fff@x G4000@lhs* G4001@rhs*) (if (null? G4000@lhs*) '#f (if (G2d60@bound-id=? G3fff@x (car G4000@lhs*)) (car G4001@rhs*) (G2f8f@find-bound=? G3fff@x (cdr G4000@lhs*) (cdr G4001@rhs*)))))) (set! G2f91@find-dups (lambda (G4005@ls) ((letrec ((G4007@f (lambda (G4009@ls G400a@dups) (if (null? G4009@ls) G400a@dups ((lambda (G400d@t) (if G400d@t ((lambda (G400f@x) (G4007@f (cdr G4009@ls) (cons (list (car G4009@ls) G400f@x) G400a@dups))) G400d@t) (G4007@f (cdr G4009@ls) G400a@dups))) (G2f8f@find-bound=? (car G4009@ls) (cdr G4009@ls) (cdr G4009@ls))))))) G4007@f) G4005@ls '()))) (set! G2f93@chi-internal (lambda (G4011@e* G4012@r G4013@mr) ((lambda (G4017@rib) (call-with-values (lambda () (G2fb6@chi-body* (map (lambda (G4021@x) (G2d46@add-subst G4017@rib G4021@x)) (G2d58@syntax->list G4011@e*)) G4012@r G4013@mr '() '() '() '() '() G4017@rib '#f)) (lambda (G4023@G4019 G4024@G401a G4025@G401b G4026@G401c G4027@G401d G4028@G401e G4029@G401f G402a@G4020) ((lambda (G4033@_exp* G4034@kwd* G4035@mod** G4036@rhs* G4037@lex* G4038@mr G4039@r G403a@e*) (begin (if (null? G403a@e*) (G3044@syntax-violation '#f '"no expression in body" G403a@e*) (void)) ((lambda (G4043@init*) ((lambda (G4045@rhs*) ((lambda () (G2cba@G2c2e@build-letrec* '#f (reverse G4037@lex*) (reverse G4045@rhs*) (G2cb7@G2c28@build-sequence '#f G4043@init*))))) (G2f8d@chi-rhs* G4036@rhs* G4039@r G4038@mr))) (G2f79@chi-expr* (append (apply append (reverse G4035@mod**)) G403a@e*) G4039@r G4038@mr)))) G402a@G4020 G4029@G401f G4028@G401e G4027@G401d G4026@G401c G4025@G401b G4024@G401a G4023@G4019)))) (G2d05@make-empty-rib)))) (set! G2f95@parse-module (lambda (G4047@e) ((lambda (G4049@t) ((lambda (G404b@ls/false) (if G404b@ls/false (apply (lambda (G404d@export* G404e@b*) (begin (if (not (for-all G2d5a@id? G404d@export*)) (G3044@syntax-violation '#f '"module exports must be identifiers" G4047@e) (void)) (values '#f (list->vector G404d@export*) G404e@b*))) G404b@ls/false) ((lambda (G4051@t) ((lambda (G4053@ls/false) (if G4053@ls/false (apply (lambda (G4055@name G4056@export* G4057@b*) (begin (if (not (G2d5a@id? G4055@name)) (G3044@syntax-violation '#f '"module name must be an identifier" G4047@e) (void)) (if (not (for-all G2d5a@id? G4056@export*)) (G3044@syntax-violation '#f '"module exports must be identifiers" G4047@e) (void)) (values G4055@name (list->vector G4056@export*) G4057@b*))) G4053@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G4051@t))) (G2f59@syntax-dispatch G4051@t '(_ any each-any . each-any)))) G4049@t))) (G2f59@syntax-dispatch G4049@t '(_ each-any . each-any)))) G4047@e))) (set! G2f9b@G2f96 (make-record-type-descriptor 'module-interface '#f 'G2f99 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2f9d@G2f98 '#f) (set! G2f9f@G2f97 (make-record-constructor-descriptor G2f9b@G2f96 '#f G2f9d@G2f98)) (set! G2fa2@module-interface? (record-predicate G2f9b@G2f96)) (set! G2fa4@make-module-interface (record-constructor G2f9f@G2f97)) (set! G2fa6@module-interface-first-mark (record-accessor G2f9b@G2f96 '0)) (set! G2fa8@module-interface-exp-id-vec (record-accessor G2f9b@G2f96 '1)) (set! G2faa@module-interface-exp-lab-vec (record-accessor G2f9b@G2f96 '2)) (set! G2fac@set-module-interface-first-mark! (record-mutator G2f9b@G2f96 '0)) (set! G2fae@set-module-interface-exp-id-vec! (record-mutator G2f9b@G2f96 '1)) (set! G2fb0@set-module-interface-exp-lab-vec! (record-mutator G2f9b@G2f96 '2)) (set! G2fb2@module-interface-exp-id* (lambda (G405b@iface G405c@id) ((lambda (G4060@diff-marks) (begin (set! G4060@diff-marks (lambda (G4067@ls G4068@x) (begin (if (null? G4067@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G406b@a) (if (eq? G406b@a G4068@x) '() (cons G406b@a (G4060@diff-marks (cdr G4067@ls) G4068@x)))) (car G4067@ls))))) ((lambda (G4061@diff G4062@id-vec) (if (null? G4061@diff) G4062@id-vec (vector-map (lambda (G4065@x) (G2d24@make-stx (G2d26@stx-expr G4065@x) (append G4061@diff (G2d28@stx-mark* G4065@x)) '() '())) G4062@id-vec))) (G4060@diff-marks (G2d28@stx-mark* G405c@id) (G2fa6@module-interface-first-mark G405b@iface)) (G2fa8@module-interface-exp-id-vec G405b@iface)))) '#f))) (set! G2fb4@chi-internal-module (lambda (G406d@e G406e@r G406f@mr G4070@lex* G4071@rhs* G4072@mod** G4073@kwd*) (call-with-values (lambda () (G2f95@parse-module G406d@e)) (lambda (G407e@G407b G407f@G407c G4080@G407d) ((lambda (G4084@e* G4085@exp-id* G4086@name) ((lambda (G408a@rib) ((lambda (G408c@e*) ((lambda () (call-with-values (lambda () (G2fb6@chi-body* G408c@e* G406e@r G406f@mr G4070@lex* G4071@rhs* G4072@mod** G4073@kwd* '() G408a@rib '#f)) (lambda (G4096@G408e G4097@G408f G4098@G4090 G4099@G4091 G409a@G4092 G409b@G4093 G409c@G4094 G409d@G4095) ((lambda (G40a6@_exp* G40a7@kwd* G40a8@mod** G40a9@rhs* G40aa@lex* G40ab@mr G40ac@r G40ad@e*) ((lambda (G40b6@exp-lab* G40b7@mod**) (if (not G4086@name) (values G40aa@lex* G40a9@rhs* G4085@exp-id* G40b6@exp-lab* G40ac@r G40ab@mr G40b7@mod** G40a7@kwd*) ((lambda (G40ba@lab G40bb@iface) (values G40aa@lex* G40a9@rhs* (vector G4086@name) (vector G40ba@lab) (cons (cons G40ba@lab (cons '$module G40bb@iface)) G40ac@r) (cons (cons G40ba@lab (cons '$module G40bb@iface)) G40ab@mr) G40b7@mod** G40a7@kwd*)) (G2cda@gen-label 'module) (G2fa4@make-module-interface (car (G2d28@stx-mark* G4086@name)) (vector-map (lambda (G40be@x) (G2d24@make-stx (G2d26@stx-expr G40be@x) (G2d28@stx-mark* G40be@x) '() '())) G4085@exp-id*) G40b6@exp-lab*)))) (vector-map (lambda (G40c0@x) (or (G2d74@id->label (G2d24@make-stx (G2d5c@id->sym G40c0@x) (G2d28@stx-mark* G40c0@x) (list G408a@rib) '())) (G3044@syntax-violation '#f '"cannot find module export" G40c0@x))) G4085@exp-id*) (cons G40ad@e* G40a8@mod**))) G409d@G4095 G409c@G4094 G409b@G4093 G409a@G4092 G4099@G4091 G4098@G4090 G4097@G408f G4096@G408e)))))) (map (lambda (G40c2@x) (G2d46@add-subst G408a@rib G40c2@x)) (G2d58@syntax->list G4084@e*)))) (G2d05@make-empty-rib))) G4080@G407d G407f@G407c G407e@G407b))))) (set! G2fb6@chi-body* (lambda (G40c4@e* G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40ca@kwd* G40cb@exp* G40cc@rib G40cd@top?) (if (null? G40c4@e*) (values G40c4@e* G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40ca@kwd* G40cb@exp*) ((lambda (G40d8@e) (call-with-values (lambda () (G2d82@syntax-type G40d8@e G40c5@r)) (lambda (G40dd@G40da G40de@G40db G40df@G40dc) ((lambda (G40e3@kwd G40e4@value G40e5@type) ((lambda (G40e9@kwd*) ((lambda (G40eb@t) (if (memv G40eb@t '(define)) (call-with-values (lambda () (G2edd@parse-define G40d8@e)) (lambda (G40ef@G40ed G40f0@G40ee) ((lambda (G40f3@rhs G40f4@id) (begin (if (G2d68@bound-id-member? G40f4@id G40e9@kwd*) (G3044@syntax-violation '#f '"cannot redefine keyword" G40d8@e) (void)) (call-with-values (lambda () (G2cde@gen-define-label+loc G40f4@id G40cc@rib)) (lambda (G40f9@G40f7 G40fa@G40f8) ((lambda (G40fd@lex G40fe@lab) (begin (G2d0b@extend-rib! G40cc@rib G40f4@id G40fe@lab) (G2fb6@chi-body* (cdr G40c4@e*) (G2eeb@add-lexical G40fe@lab G40fd@lex G40c5@r) G40c6@mr (cons G40fd@lex G40c7@lex*) (cons G40f3@rhs G40c8@rhs*) G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?))) G40fa@G40f8 G40f9@G40f7))))) G40f0@G40ee G40ef@G40ed))) (if (memv G40eb@t '(define-syntax)) (call-with-values (lambda () (G2edf@parse-define-syntax G40d8@e)) (lambda (G4103@G4101 G4104@G4102) ((lambda (G4107@rhs G4108@id) (begin (if (G2d68@bound-id-member? G4108@id G40e9@kwd*) (G3044@syntax-violation '#f '"cannot redefine keyword" G40d8@e) (void)) ((lambda (G410b@lab G410c@expanded-rhs) (begin (G2d0b@extend-rib! G40cc@rib G4108@id G410b@lab) ((lambda (G410f@b) (G2fb6@chi-body* (cdr G40c4@e*) (cons (cons G410b@lab G410f@b) G40c5@r) (cons (cons G410b@lab G410f@b) G40c6@mr) G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?)) (G2d9a@make-eval-transformer G410c@expanded-rhs)))) (G2ce0@gen-define-label G4108@id G40cc@rib) (G2fb8@expand-transformer G4107@rhs G40c6@mr)))) G4104@G4102 G4103@G4101))) (if (memv G40eb@t '(let-syntax letrec-syntax)) ((lambda (G4111@t) ((lambda (G4113@ls/false) (if (and G4113@ls/false (apply (lambda (G4115@xlhs* G4116@xrhs* G4117@xbody*) (if (not (G2d64@valid-bound-ids? G4115@xlhs*)) (G3044@syntax-violation '#f '"invalid identifiers" G40d8@e) (void))) G4113@ls/false)) (apply (lambda (G411b@xlhs* G411c@xrhs* G411d@xbody*) ((lambda (G4121@xlab*) ((lambda (G4123@xrib) ((lambda (G4125@xb*) ((lambda () (G2fb6@chi-body* (append (map (lambda (G4127@x) (G2d46@add-subst G4123@xrib G4127@x)) G411d@xbody*) (cdr G40c4@e*)) (append (map cons G4121@xlab* G4125@xb*) G40c5@r) (append (map cons G4121@xlab* G4125@xb*) G40c6@mr) G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?)))) (map (lambda (G4129@x) (G2d9a@make-eval-transformer (G2fb8@expand-transformer (if (eq? G40e5@type 'let-syntax) G4129@x (G2d46@add-subst G4123@xrib G4129@x)) G40c6@mr))) G411c@xrhs*))) (G2d15@make-full-rib G411b@xlhs* G4121@xlab*))) (map G2cda@gen-label G411b@xlhs*))) G4113@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G4111@t))) (G2f59@syntax-dispatch G4111@t '(_ #(each (any any)) . each-any)))) G40d8@e) (if (memv G40eb@t '(begin)) ((lambda (G412b@t) ((lambda (G412d@ls/false) (if G412d@ls/false (apply (lambda (G412f@x*) (G2fb6@chi-body* (append G412f@x* (cdr G40c4@e*)) G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?)) G412d@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G412b@t))) (G2f59@syntax-dispatch G412b@t '(_ . each-any)))) G40d8@e) (if (memv G40eb@t '(global-macro global-macro!)) (G2fb6@chi-body* (cons (G2d46@add-subst G40cc@rib (G2f77@chi-global-macro G40e4@value G40d8@e)) (cdr G40c4@e*)) G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?) (if (memv G40eb@t '(local-macro local-macro!)) (G2fb6@chi-body* (cons (G2d46@add-subst G40cc@rib (G2f75@chi-local-macro G40e4@value G40d8@e)) (cdr G40c4@e*)) G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?) (if (memv G40eb@t '(macro macro!)) (G2fb6@chi-body* (cons (G2d46@add-subst G40cc@rib (G2f73@chi-macro G40e4@value G40d8@e)) (cdr G40c4@e*)) G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?) (if (memv G40eb@t '(module)) (call-with-values (lambda () (G2fb4@chi-internal-module G40d8@e G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd*)) (lambda (G4139@G4131 G413a@G4132 G413b@G4133 G413c@G4134 G413d@G4135 G413e@G4136 G413f@G4137 G4140@G4138) ((lambda (G4149@kwd* G414a@mod** G414b@mr G414c@r G414d@m-exp-lab* G414e@m-exp-id* G414f@rhs* G4150@lex*) (begin (vector-for-each (lambda (G4159@id G415a@lab) (G2d0b@extend-rib! G40cc@rib G4159@id G415a@lab)) G414e@m-exp-id* G414d@m-exp-lab*) (G2fb6@chi-body* (cdr G40c4@e*) G414c@r G414b@mr G4150@lex* G414f@rhs* G414a@mod** G4149@kwd* G40cb@exp* G40cc@rib G40cd@top?))) G4140@G4138 G413f@G4137 G413e@G4136 G413d@G4135 G413c@G4134 G413b@G4133 G413a@G4132 G4139@G4131))) (if (memv G40eb@t '(library)) (begin (G3026@library-expander (G2d70@stx->datum G40d8@e)) (G2fb6@chi-body* (cdr G40c4@e*) G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?)) (if (memv G40eb@t '(export)) ((lambda (G415d@t) ((lambda (G415f@ls/false) (if G415f@ls/false (apply (lambda (G4161@exp-decl*) (G2fb6@chi-body* (cdr G40c4@e*) G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* (append G4161@exp-decl* G40cb@exp*) G40cc@rib G40cd@top?)) G415f@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G415d@t))) (G2f59@syntax-dispatch G415d@t '(_ . each-any)))) G40d8@e) (if (memv G40eb@t '(import)) ((lambda () ((lambda (G4164@module-import? G4166@module-import G4168@library-import) (begin (set! G4164@module-import? (lambda (G41b0@e) ((lambda (G41b2@t) ((lambda (G41b4@ls/false) (if (and G41b4@ls/false (apply (lambda (G41b6@id) (G2d5a@id? G41b6@id)) G41b4@ls/false)) (apply (lambda (G41b8@id) '#t) G41b4@ls/false) ((lambda (G41ba@t) ((lambda (G41bc@ls/false) (if G41bc@ls/false (apply (lambda (G41be@imp*) '#f) G41bc@ls/false) ((lambda (G41c0@t) ((lambda (G41c2@ls/false) (if G41c2@ls/false (apply (lambda () (G3044@syntax-violation '#f '"malformed import form" G41b0@e)) G41c2@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G41c0@t))) (G2f59@syntax-dispatch G41c0@t '_))) G41ba@t))) (G2f59@syntax-dispatch G41ba@t '(_ . each-any)))) G41b2@t))) (G2f59@syntax-dispatch G41b2@t '(_ any)))) G41b0@e))) (set! G4166@module-import (lambda (G4191@e G4192@r) ((lambda (G4195@t) ((lambda (G4197@ls/false) (if (and G4197@ls/false (apply (lambda (G4199@id) (G2d5a@id? G4199@id)) G4197@ls/false)) (apply (lambda (G419b@id) (call-with-values (lambda () (G2d82@syntax-type G419b@id G4192@r)) (lambda (G41a0@G419d G41a1@G419e G41a2@G419f) ((lambda (G41a6@kwd G41a7@value G41a8@type) ((lambda (G41ac@t) (if (memv G41ac@t '($module)) ((lambda (G41ae@iface) (values (G2fb2@module-interface-exp-id* G41ae@iface G419b@id) (G2faa@module-interface-exp-lab-vec G41ae@iface))) G41a7@value) (G3044@syntax-violation '#f '"invalid import" G4191@e))) G41a8@type)) G41a2@G419f G41a1@G419e G41a0@G419d)))) G4197@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G4195@t))) (G2f59@syntax-dispatch G4195@t '(_ any)))) G4191@e))) (set! G4168@library-import (lambda (G4177@e) ((lambda (G4179@t) ((lambda (G417b@ls/false) (if G417b@ls/false (apply (lambda (G417d@ctxt G417e@imp*) (call-with-values (lambda () (G2fc0@parse-import-spec* (G304a@syntax->datum G417e@imp*))) (lambda (G4183@G4181 G4184@G4182) ((lambda (G4187@subst-labels G4188@subst-names) (values (vector-map (lambda (G418b@name) (G2d38@datum->stx G417d@ctxt G418b@name)) G4188@subst-names) G4187@subst-labels)) G4184@G4182 G4183@G4181)))) G417b@ls/false) ((lambda (G418d@t) ((lambda (G418f@ls/false) (if G418f@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid import form" G4177@e)) G418f@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G418d@t))) (G2f59@syntax-dispatch G418d@t '_))) G4179@t))) (G2f59@syntax-dispatch G4179@t '(any . each-any)))) G4177@e))) (begin (call-with-values (lambda () (if (G4164@module-import? G40d8@e) (G4166@module-import G40d8@e G40c5@r) (G4168@library-import G40d8@e))) (lambda (G416b@G4169 G416c@G416a) ((lambda (G416f@lab* G4170@id*) (vector-for-each (lambda (G4173@id G4174@lab) (G2d0b@extend-rib! G40cc@rib G4173@id G4174@lab)) G4170@id* G416f@lab*)) G416c@G416a G416b@G4169))) (G2fb6@chi-body* (cdr G40c4@e*) G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?)))) '#f '#f '#f))) (if G40cd@top? (G2fb6@chi-body* (cdr G40c4@e*) G40c5@r G40c6@mr (cons (G2cd6@gen-lexical 'dummy) G40c7@lex*) (cons (cons 'top-expr G40d8@e) G40c8@rhs*) G40c9@mod** G40e9@kwd* G40cb@exp* G40cc@rib G40cd@top?) (values G40c4@e* G40c5@r G40c6@mr G40c7@lex* G40c8@rhs* G40c9@mod** G40e9@kwd* G40cb@exp*)))))))))))))) G40e5@type)) (if (G2d5a@id? G40e3@kwd) (cons G40e3@kwd G40ca@kwd*) G40ca@kwd*))) G40df@G40dc G40de@G40db G40dd@G40da)))) (car G40c4@e*))))) (set! G2fb8@expand-transformer (lambda (G41c4@expr G41c5@r) ((lambda (G41c8@rtc) ((lambda (G41ca@expanded-rhs) (begin (for-each ((lambda (G41cc@mark-visit) (lambda (G41ce@x) (begin (G2b71@G2a18@invoke-library G41ce@x) (G41cc@mark-visit G41ce@x)))) (G2fc8@vis-collector)) (G41c8@rtc)) G41ca@expanded-rhs)) ((lambda (G41d4@G41d0 G41d5@G41d1 G41d6@G41d2 G41d7@G41d3) ((lambda (G41dc@swap) (dynamic-wind G41dc@swap (lambda () (G2f7d@chi-expr G41c4@expr G41c5@r G41c5@r)) G41dc@swap)) (lambda () (begin ((lambda (G41de@t) (begin (G41d4@G41d0 G41d6@G41d2) (set! G41d6@G41d2 G41de@t))) (G41d4@G41d0)) ((lambda (G41e0@t) (begin (G41d5@G41d1 G41d7@G41d3) (set! G41d7@G41d3 G41e0@t))) (G41d5@G41d1)))))) G2fc6@inv-collector G2fc8@vis-collector G41c8@rtc (lambda (G41e2@x) (values))))) (G2fc4@make-collector)))) (set! G2fba@parse-exports (lambda (G41e4@exp*) ((letrec ((G41e6@f (lambda (G41e8@exp* G41e9@int* G41ea@ext*) (if (null? G41e8@exp*) (begin (if (not (G2d64@valid-bound-ids? G41ea@ext*)) (G3044@syntax-violation 'export '"invalid exports" (G2f91@find-dups G41ea@ext*)) (void)) (values (map G304a@syntax->datum G41ea@ext*) G41e9@int*)) ((lambda (G41ee@t) ((lambda (G41f0@ls/false) (if G41f0@ls/false (apply (lambda (G41f2@rename G41f3@i* G41f4@e*) (begin (if (not (and (eq? (G304a@syntax->datum G41f2@rename) 'rename) (for-all G2d5a@id? G41f3@i*) (for-all G2d5a@id? G41f4@e*))) (G3044@syntax-violation 'export '"invalid export specifier" (car G41e8@exp*)) (void)) (G41e6@f (cdr G41e8@exp*) (append G41f3@i* G41e9@int*) (append G41f4@e* G41ea@ext*)))) G41f0@ls/false) ((lambda (G41f8@t) ((lambda (G41fa@ls/false) (if G41fa@ls/false (apply (lambda (G41fc@ie) (begin (if (not (G2d5a@id? G41fc@ie)) (G3044@syntax-violation 'export '"invalid export" G41fc@ie) (void)) (G41e6@f (cdr G41e8@exp*) (cons G41fc@ie G41e9@int*) (cons G41fc@ie G41ea@ext*)))) G41fa@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G41f8@t))) (G2f59@syntax-dispatch G41f8@t 'any))) G41ee@t))) (G2f59@syntax-dispatch G41ee@t '(any . #(each (any any)))))) (car G41e8@exp*)))))) G41e6@f) G41e4@exp* '() '()))) (set! G2fbc@parse-library-name (lambda (G41fe@spec) ((lambda (G4201@parse) (begin (set! G4201@parse (lambda (G420c@x) ((lambda (G420e@t) ((lambda (G4210@ls/false) (if (and G4210@ls/false (apply (lambda (G4212@v*) (for-all (lambda (G4214@x) ((lambda (G4216@x) (and (integer? G4216@x) (exact? G4216@x))) (G304a@syntax->datum G4214@x))) G4212@v*)) G4210@ls/false)) (apply (lambda (G4218@v*) (values '() (map G304a@syntax->datum G4218@v*))) G4210@ls/false) ((lambda (G421a@t) ((lambda (G421c@ls/false) (if (and G421c@ls/false (apply (lambda (G421e@x G421f@rest) (symbol? (G304a@syntax->datum G421e@x))) G421c@ls/false)) (apply (lambda (G4222@x G4223@rest) (call-with-values (lambda () (G4201@parse G4223@rest)) (lambda (G4228@G4226 G4229@G4227) ((lambda (G422c@v* G422d@x*) (values (cons (G304a@syntax->datum G4222@x) G422d@x*) G422c@v*)) G4229@G4227 G4228@G4226)))) G421c@ls/false) ((lambda (G4230@t) ((lambda (G4232@ls/false) (if G4232@ls/false (apply (lambda () (values '() '())) G4232@ls/false) ((lambda (G4234@t) ((lambda (G4236@ls/false) (if G4236@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid library name" G41fe@spec)) G4236@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G4234@t))) (G2f59@syntax-dispatch G4234@t '_))) G4230@t))) (G2f59@syntax-dispatch G4230@t '()))) G421a@t))) (G2f59@syntax-dispatch G421a@t '(any . any)))) G420e@t))) (G2f59@syntax-dispatch G420e@t '(each-any)))) G420c@x))) (call-with-values (lambda () (G4201@parse G41fe@spec)) (lambda (G4204@G4202 G4205@G4203) ((lambda (G4208@ver* G4209@name*) (begin (if (null? G4209@name*) (G3044@syntax-violation '#f '"empty library name" G41fe@spec) (void)) (values G4209@name* G4208@ver*))) G4205@G4203 G4204@G4202))))) '#f))) (set! G2fbe@parse-library (lambda (G4238@e) ((lambda (G423a@t) ((lambda (G423c@ls/false) (if (and G423c@ls/false (apply (lambda (G423e@library G423f@name* G4240@export G4241@exp* G4242@import G4243@imp* G4244@b*) (and (eq? (G304a@syntax->datum G4240@export) 'export) (eq? (G304a@syntax->datum G4242@import) 'import) (eq? (G304a@syntax->datum G423e@library) 'library))) G423c@ls/false)) (apply (lambda (G424c@library G424d@name* G424e@export G424f@exp* G4250@import G4251@imp* G4252@b*) (values G424d@name* G424f@exp* G4251@imp* G4252@b*)) G423c@ls/false) ((lambda (G425a@t) ((lambda (G425c@ls/false) (if G425c@ls/false (apply (lambda () (G3044@syntax-violation '#f '"malformed library" G4238@e)) G425c@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G425a@t))) (G2f59@syntax-dispatch G425a@t '_))) G423a@t))) (G2f59@syntax-dispatch G423a@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4238@e))) (set! G2fc0@parse-import-spec* ((lambda () ((lambda (G425f@idsyn? G4261@dup-error G4263@merge-substs G4265@exclude* G4267@find* G4269@rem* G426b@remove-dups G426d@parse-library-name G426f@import-library G4271@get-import G4273@add-imports!) (begin (set! G425f@idsyn? (lambda (G445e@x) (symbol? (G304a@syntax->datum G445e@x)))) (set! G4261@dup-error (lambda (G445c@name) (G3044@syntax-violation 'import '"two imports with different bindings" G445c@name))) (set! G4263@merge-substs (lambda (G444a@s G444b@subst) ((lambda (G444f@insert-to-subst) (begin (set! G444f@insert-to-subst (lambda (G4450@a G4451@subst) ((lambda (G4454@name G4455@label) ((lambda (G4458@t) (if G4458@t ((lambda (G445a@x) (if (eq? (cdr G445a@x) G4455@label) G4451@subst (G4261@dup-error G4454@name))) G4458@t) (cons G4450@a G4451@subst))) (assq G4454@name G4451@subst))) (car G4450@a) (cdr G4450@a)))) (if (null? G444a@s) G444b@subst (G444f@insert-to-subst (car G444a@s) (G4263@merge-substs (cdr G444a@s) G444b@subst))))) '#f))) (set! G4265@exclude* (lambda (G4420@sym* G4421@subst) ((lambda (G4425@exclude) (begin (set! G4425@exclude (lambda (G443a@sym G443b@subst) (if (null? G443b@subst) (G3044@syntax-violation 'import '"cannot rename unbound identifier" G443a@sym) (if (eq? G443a@sym (caar G443b@subst)) (values (cdar G443b@subst) (cdr G443b@subst)) ((lambda (G443e@a) (call-with-values (lambda () (G4425@exclude G443a@sym (cdr G443b@subst))) (lambda (G4442@G4440 G4443@G4441) ((lambda (G4446@subst G4447@old) (values G4447@old (cons G443e@a G4446@subst))) G4443@G4441 G4442@G4440)))) (car G443b@subst)))))) (if (null? G4420@sym*) (values '() G4421@subst) (call-with-values (lambda () (G4425@exclude (car G4420@sym*) G4421@subst)) (lambda (G4428@G4426 G4429@G4427) ((lambda (G442c@subst G442d@old) (call-with-values (lambda () (G4265@exclude* (cdr G4420@sym*) G442c@subst)) (lambda (G4432@G4430 G4433@G4431) ((lambda (G4436@subst G4437@old*) (values (cons G442d@old G4437@old*) G4436@subst)) G4433@G4431 G4432@G4430)))) G4429@G4427 G4428@G4426)))))) '#f))) (set! G4267@find* (lambda (G4418@sym* G4419@subst) (map (lambda (G441c@x) ((lambda (G441e@t) (if G441e@t (cdr G441e@t) (G3044@syntax-violation 'import '"cannot find identifier" G441c@x))) (assq G441c@x G4419@subst))) G4418@sym*))) (set! G4269@rem* (lambda (G4410@sym* G4411@subst) ((letrec ((G4414@f (lambda (G4416@subst) (if (null? G4416@subst) '() (if (memq (caar G4416@subst) G4410@sym*) (G4414@f (cdr G4416@subst)) (cons (car G4416@subst) (G4414@f (cdr G4416@subst)))))))) G4414@f) G4411@subst))) (set! G426b@remove-dups (lambda (G440e@ls) (if (null? G440e@ls) '() (if (memq (car G440e@ls) (cdr G440e@ls)) (G426b@remove-dups (cdr G440e@ls)) (cons (car G440e@ls) (G426b@remove-dups (cdr G440e@ls))))))) (set! G426d@parse-library-name (lambda (G4328@spec) ((lambda (G432b@subversion? G432d@subversion-pred G432f@version-pred) (begin (set! G432b@subversion? (lambda (G440a@x) ((lambda (G440c@x) (and (integer? G440c@x) (exact? G440c@x) (>= G440c@x '0))) (G304a@syntax->datum G440a@x)))) (set! G432d@subversion-pred (lambda (G43aa@x*) ((lambda (G43ac@t) ((lambda (G43ae@ls/false) (if (and G43ae@ls/false (apply (lambda (G43b0@n) (G432b@subversion? G43b0@n)) G43ae@ls/false)) (apply (lambda (G43b2@n) (lambda (G43b4@x) (= G43b4@x (G304a@syntax->datum G43b2@n)))) G43ae@ls/false) ((lambda (G43b6@t) ((lambda (G43b8@ls/false) (if (and G43b8@ls/false (apply (lambda (G43ba@p? G43bb@sub*) (eq? (G304a@syntax->datum G43ba@p?) 'and)) G43b8@ls/false)) (apply (lambda (G43be@p? G43bf@sub*) ((lambda (G43c2@p*) (lambda (G43c4@x) (for-all (lambda (G43c6@p) (G43c6@p G43c4@x)) G43c2@p*))) (map G432d@subversion-pred G43bf@sub*))) G43b8@ls/false) ((lambda (G43c8@t) ((lambda (G43ca@ls/false) (if (and G43ca@ls/false (apply (lambda (G43cc@p? G43cd@sub*) (eq? (G304a@syntax->datum G43cc@p?) 'or)) G43ca@ls/false)) (apply (lambda (G43d0@p? G43d1@sub*) ((lambda (G43d4@p*) (lambda (G43d6@x) (exists (lambda (G43d8@p) (G43d8@p G43d6@x)) G43d4@p*))) (map G432d@subversion-pred G43d1@sub*))) G43ca@ls/false) ((lambda (G43da@t) ((lambda (G43dc@ls/false) (if (and G43dc@ls/false (apply (lambda (G43de@p? G43df@sub) (eq? (G304a@syntax->datum G43de@p?) 'not)) G43dc@ls/false)) (apply (lambda (G43e2@p? G43e3@sub) ((lambda (G43e6@p) (lambda (G43e8@x) (not (G43e6@p G43e8@x)))) (G432d@subversion-pred G43e3@sub))) G43dc@ls/false) ((lambda (G43ea@t) ((lambda (G43ec@ls/false) (if (and G43ec@ls/false (apply (lambda (G43ee@p? G43ef@n) (and (eq? (G304a@syntax->datum G43ee@p?) '<=) (G432b@subversion? G43ef@n))) G43ec@ls/false)) (apply (lambda (G43f2@p? G43f3@n) (lambda (G43f6@x) (<= G43f6@x (G304a@syntax->datum G43f3@n)))) G43ec@ls/false) ((lambda (G43f8@t) ((lambda (G43fa@ls/false) (if (and G43fa@ls/false (apply (lambda (G43fc@p? G43fd@n) (and (eq? (G304a@syntax->datum G43fc@p?) '>=) (G432b@subversion? G43fd@n))) G43fa@ls/false)) (apply (lambda (G4400@p? G4401@n) (lambda (G4404@x) (>= G4404@x (G304a@syntax->datum G4401@n)))) G43fa@ls/false) ((lambda (G4406@t) ((lambda (G4408@ls/false) (if G4408@ls/false (apply (lambda () (G3044@syntax-violation 'import '"invalid sub-version spec" G4328@spec G43aa@x*)) G4408@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G4406@t))) (G2f59@syntax-dispatch G4406@t '_))) G43f8@t))) (G2f59@syntax-dispatch G43f8@t '(any any)))) G43ea@t))) (G2f59@syntax-dispatch G43ea@t '(any any)))) G43da@t))) (G2f59@syntax-dispatch G43da@t '(any any)))) G43c8@t))) (G2f59@syntax-dispatch G43c8@t '(any . each-any)))) G43b6@t))) (G2f59@syntax-dispatch G43b6@t '(any . each-any)))) G43ac@t))) (G2f59@syntax-dispatch G43ac@t 'any))) G43aa@x*))) (set! G432f@version-pred (lambda (G435a@x*) ((lambda (G435c@t) ((lambda (G435e@ls/false) (if G435e@ls/false (apply (lambda () (lambda (G4360@x) '#t)) G435e@ls/false) ((lambda (G4362@t) ((lambda (G4364@ls/false) (if (and G4364@ls/false (apply (lambda (G4366@c G4367@ver*) (eq? (G304a@syntax->datum G4366@c) 'and)) G4364@ls/false)) (apply (lambda (G436a@c G436b@ver*) ((lambda (G436e@p*) (lambda (G4370@x) (for-all (lambda (G4372@p) (G4372@p G4370@x)) G436e@p*))) (map G432f@version-pred G436b@ver*))) G4364@ls/false) ((lambda (G4374@t) ((lambda (G4376@ls/false) (if (and G4376@ls/false (apply (lambda (G4378@c G4379@ver*) (eq? (G304a@syntax->datum G4378@c) 'or)) G4376@ls/false)) (apply (lambda (G437c@c G437d@ver*) ((lambda (G4380@p*) (lambda (G4382@x) (exists (lambda (G4384@p) (G4384@p G4382@x)) G4380@p*))) (map G432f@version-pred G437d@ver*))) G4376@ls/false) ((lambda (G4386@t) ((lambda (G4388@ls/false) (if (and G4388@ls/false (apply (lambda (G438a@c G438b@ver) (eq? (G304a@syntax->datum G438a@c) 'not)) G4388@ls/false)) (apply (lambda (G438e@c G438f@ver) ((lambda (G4392@p) (lambda (G4394@x) (not (G4392@p G4394@x)))) (G432f@version-pred G438f@ver))) G4388@ls/false) ((lambda (G4396@t) ((lambda (G4398@ls/false) (if G4398@ls/false (apply (lambda (G439a@sub*) ((lambda (G439c@p*) (lambda (G439e@x) ((letrec ((G43a0@f (lambda (G43a2@p* G43a3@x) (if (null? G43a2@p*) '#t (if (null? G43a3@x) '#f (and ((car G43a2@p*) (car G43a3@x)) (G43a0@f (cdr G43a2@p*) (cdr G43a3@x)))))))) G43a0@f) G439c@p* G439e@x))) (map G432d@subversion-pred G439a@sub*))) G4398@ls/false) ((lambda (G43a6@t) ((lambda (G43a8@ls/false) (if G43a8@ls/false (apply (lambda () (G3044@syntax-violation 'import '"invalid version spec" G4328@spec G435a@x*)) G43a8@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G43a6@t))) (G2f59@syntax-dispatch G43a6@t '_))) G4396@t))) (G2f59@syntax-dispatch G4396@t 'each-any))) G4386@t))) (G2f59@syntax-dispatch G4386@t '(any any)))) G4374@t))) (G2f59@syntax-dispatch G4374@t '(any . each-any)))) G4362@t))) (G2f59@syntax-dispatch G4362@t '(any . each-any)))) G435c@t))) (G2f59@syntax-dispatch G435c@t '()))) G435a@x*))) ((letrec ((G4330@f (lambda (G4332@x) ((lambda (G4334@t) ((lambda (G4336@ls/false) (if G4336@ls/false (apply (lambda (G4338@version-spec*) (values '() (G432f@version-pred G4338@version-spec*))) G4336@ls/false) ((lambda (G433a@t) ((lambda (G433c@ls/false) (if (and G433c@ls/false (apply (lambda (G433e@x G433f@x*) (G425f@idsyn? G433e@x)) G433c@ls/false)) (apply (lambda (G4342@x G4343@x*) (call-with-values (lambda () (G4330@f G4343@x*)) (lambda (G4348@G4346 G4349@G4347) ((lambda (G434c@pred G434d@name) (values (cons (G304a@syntax->datum G4342@x) G434d@name) G434c@pred)) G4349@G4347 G4348@G4346)))) G433c@ls/false) ((lambda (G4350@t) ((lambda (G4352@ls/false) (if G4352@ls/false (apply (lambda () (values '() (lambda (G4354@x) '#t))) G4352@ls/false) ((lambda (G4356@t) ((lambda (G4358@ls/false) (if G4358@ls/false (apply (lambda () (G3044@syntax-violation '#f '"invalid import spec" G4328@spec)) G4358@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G4356@t))) (G2f59@syntax-dispatch G4356@t '_))) G4350@t))) (G2f59@syntax-dispatch G4350@t '()))) G433a@t))) (G2f59@syntax-dispatch G433a@t '(any . any)))) G4334@t))) (G2f59@syntax-dispatch G4334@t '(each-any)))) G4332@x)))) G4330@f) G4328@spec))) '#f '#f '#f))) (set! G426f@import-library (lambda (G431a@spec*) (call-with-values (lambda () (G426d@parse-library-name G431a@spec*)) (lambda (G431e@G431c G431f@G431d) ((lambda (G4322@pred G4323@name) (begin (if (null? G4323@name) (G3044@syntax-violation 'import '"empty library name" G431a@spec*) (void)) ((lambda (G4326@lib) (begin (if (not G4326@lib) (G3044@syntax-violation 'import '"cannot find library with required name" G4323@name) (void)) (if (not (G4322@pred (G2b42@G29ba@library-version G4326@lib))) (G3044@syntax-violation 'import '"library does not satisfy version specification" G431a@spec* G4326@lib) (void)) ((G2fca@imp-collector) G4326@lib) (G2b46@G29c2@library-subst G4326@lib))) (G2b6a@G2a0a@find-library-by-name G4323@name)))) G431f@G431d G431e@G431c))))) (set! G4271@get-import (lambda (G428c@spec) ((lambda (G428e@t) ((lambda (G4290@ls/false) (if (and G4290@ls/false (apply (lambda (G4292@x G4293@x*) (not (memq (G304a@syntax->datum G4292@x) '(for rename except only prefix library)))) G4290@ls/false)) (apply (lambda (G4296@x G4297@x*) (G426f@import-library (cons G4296@x G4297@x*))) G4290@ls/false) ((lambda (G429a@t) ((lambda (G429c@ls/false) (if (and G429c@ls/false (apply (lambda (G429e@rename G429f@isp G42a0@old* G42a1@new*) (and (eq? (G304a@syntax->datum G429e@rename) 'rename) (for-all G425f@idsyn? G42a0@old*) (for-all G425f@idsyn? G42a1@new*))) G429c@ls/false)) (apply (lambda (G42a6@rename G42a7@isp G42a8@old* G42a9@new*) ((lambda (G42ae@subst G42af@old* G42b0@new*) ((lambda (G42b4@old-label*) ((lambda (G42b6@subst) (G4263@merge-substs (map cons G42b0@new* G42b4@old-label*) G42b6@subst)) (G4269@rem* G42af@old* G42ae@subst))) (G4267@find* G42af@old* G42ae@subst))) (G4271@get-import G42a7@isp) (map G304a@syntax->datum G42a8@old*) (map G304a@syntax->datum G42a9@new*))) G429c@ls/false) ((lambda (G42b8@t) ((lambda (G42ba@ls/false) (if (and G42ba@ls/false (apply (lambda (G42bc@except G42bd@isp G42be@sym*) (and (eq? (G304a@syntax->datum G42bc@except) 'except) (for-all G425f@idsyn? G42be@sym*))) G42ba@ls/false)) (apply (lambda (G42c2@except G42c3@isp G42c4@sym*) ((lambda (G42c8@subst) (G4269@rem* (map G304a@syntax->datum G42c4@sym*) G42c8@subst)) (G4271@get-import G42c3@isp))) G42ba@ls/false) ((lambda (G42ca@t) ((lambda (G42cc@ls/false) (if (and G42cc@ls/false (apply (lambda (G42ce@only G42cf@isp G42d0@sym*) (and (eq? (G304a@syntax->datum G42ce@only) 'only) (for-all G425f@idsyn? G42d0@sym*))) G42cc@ls/false)) (apply (lambda (G42d4@only G42d5@isp G42d6@sym*) ((lambda (G42da@subst G42db@sym*) ((lambda (G42de@sym*) ((lambda (G42e0@lab*) (map cons G42de@sym* G42e0@lab*)) (G4267@find* G42de@sym* G42da@subst))) (G426b@remove-dups G42db@sym*))) (G4271@get-import G42d5@isp) (map G304a@syntax->datum G42d6@sym*))) G42cc@ls/false) ((lambda (G42e2@t) ((lambda (G42e4@ls/false) (if (and G42e4@ls/false (apply (lambda (G42e6@prefix G42e7@isp G42e8@p) (and (eq? (G304a@syntax->datum G42e6@prefix) 'prefix) (G425f@idsyn? G42e8@p))) G42e4@ls/false)) (apply (lambda (G42ec@prefix G42ed@isp G42ee@p) ((lambda (G42f2@subst G42f3@prefix) (map (lambda (G42f6@x) (cons (string->symbol (string-append G42f3@prefix (symbol->string (car G42f6@x)))) (cdr G42f6@x))) G42f2@subst)) (G4271@get-import G42ed@isp) (symbol->string (G304a@syntax->datum G42ee@p)))) G42e4@ls/false) ((lambda (G42f8@t) ((lambda (G42fa@ls/false) (if (and G42fa@ls/false (apply (lambda (G42fc@library G42fd@spec*) (eq? (G304a@syntax->datum G42fc@library) 'library)) G42fa@ls/false)) (apply (lambda (G4300@library G4301@spec*) (G426f@import-library G4301@spec*)) G42fa@ls/false) ((lambda (G4304@t) ((lambda (G4306@ls/false) (if (and G4306@ls/false (apply (lambda (G4308@for G4309@isp G430a@rest) (eq? (G304a@syntax->datum G4308@for) 'for)) G4306@ls/false)) (apply (lambda (G430e@for G430f@isp G4310@rest) (G4271@get-import G430f@isp)) G4306@ls/false) ((lambda (G4314@t) ((lambda (G4316@ls/false) (if G4316@ls/false (apply (lambda (G4318@spec) (G3044@syntax-violation 'import '"invalid import spec" G4318@spec)) G4316@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G4314@t))) (G2f59@syntax-dispatch G4314@t 'any))) G4304@t))) (G2f59@syntax-dispatch G4304@t '(any any . any)))) G42f8@t))) (G2f59@syntax-dispatch G42f8@t '(any each-any)))) G42e2@t))) (G2f59@syntax-dispatch G42e2@t '(any any any)))) G42ca@t))) (G2f59@syntax-dispatch G42ca@t '(any any . each-any)))) G42b8@t))) (G2f59@syntax-dispatch G42b8@t '(any any . each-any)))) G429a@t))) (G2f59@syntax-dispatch G429a@t '(any any . #(each (any any)))))) G428e@t))) (G2f59@syntax-dispatch G428e@t '(any . each-any)))) G428c@spec))) (set! G4273@add-imports! (lambda (G427c@imp G427d@h) ((lambda (G4280@subst) (for-each (lambda (G4282@x) ((lambda (G4284@name G4285@label) ((lambda (G4288@t) (if G4288@t ((lambda (G428a@l) (if (not (eq? G428a@l G4285@label)) (G4261@dup-error G4284@name) (void))) G4288@t) (hashtable-set! G427d@h G4284@name G4285@label))) (hashtable-ref G427d@h G4284@name '#f))) (car G4282@x) (cdr G4282@x))) G4280@subst)) (G4271@get-import G427c@imp)))) (lambda (G4274@imp*) ((letrec ((G4276@f (lambda (G4278@imp* G4279@h) (if (null? G4278@imp*) (hashtable-entries G4279@h) (begin (G4273@add-imports! (car G4278@imp*) G4279@h) (G4276@f (cdr G4278@imp*) G4279@h)))))) G4276@f) G4274@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fc2@make-top-rib (lambda (G4460@names G4461@labels) ((lambda (G4464@rib) (begin (vector-for-each (lambda (G4466@name G4467@label) (begin (if (not (symbol? G4466@name)) (error 'make-top-rib '"BUG: not a symbol" G4466@name) (void)) (G2d0d@extend-rib/nc! G4464@rib (G2d24@make-stx G4466@name G2cd2@top-mark* '() '()) G4467@label))) G4460@names G4461@labels) G4464@rib)) (G2d07@make-cache-rib)))) (set! G2fc4@make-collector (lambda () ((lambda (G446a@ls) (lambda G446e ((lambda (G446f) (if (= G446f '0) (apply (lambda () G446a@ls) G446e) (if (= G446f '1) (apply (lambda (G446c@x) (set! G446a@ls (G2ccb@set-cons G446c@x G446a@ls))) G446e) (error 'apply '"invalid arg count")))) (length G446e)))) '()))) (set! G2fc6@inv-collector (G28f6@G282c@make-parameter (lambda G4470@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4472@x) (begin (if (not (procedure? G4472@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4472@x) (void)) G4472@x)))) (set! G2fc8@vis-collector (G28f6@G282c@make-parameter (lambda G4474@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4476@x) (begin (if (not (procedure? G4476@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4476@x) (void)) G4476@x)))) (set! G2fca@imp-collector (G28f6@G282c@make-parameter (lambda G4478@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G447a@x) (begin (if (not (procedure? G447a@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G447a@x) (void)) G447a@x)))) (set! G2fcc@chi-library-internal (lambda (G447c@e* G447d@rib G447e@top?) (call-with-values (lambda () (G2fb6@chi-body* G447c@e* '() '() '() '() '() '() '() G447d@rib G447e@top?)) (lambda (G448a@G4482 G448b@G4483 G448c@G4484 G448d@G4485 G448e@G4486 G448f@G4487 G4490@G4488 G4491@G4489) ((lambda (G449a@exp* G449b@_kwd* G449c@mod** G449d@rhs* G449e@lex* G449f@mr G44a0@r G44a1@e*) (values (append (apply append (reverse G449c@mod**)) G44a1@e*) G44a0@r G449f@mr (reverse G449e@lex*) (reverse G449d@rhs*) G449a@exp*)) G4491@G4489 G4490@G4488 G448f@G4487 G448e@G4486 G448d@G4485 G448c@G4484 G448b@G4483 G448a@G4482))))) (set! G2fce@chi-interaction-expr (lambda (G44aa@e G44ab@rib G44ac@r) (call-with-values (lambda () (G2fb6@chi-body* (list G44aa@e) G44ac@r G44ac@r '() '() '() '() '() G44ab@rib '#t)) (lambda (G44b8@G44b0 G44b9@G44b1 G44ba@G44b2 G44bb@G44b3 G44bc@G44b4 G44bd@G44b5 G44be@G44b6 G44bf@G44b7) ((lambda (G44c8@_exp* G44c9@_kwd* G44ca@mod** G44cb@rhs* G44cc@lex* G44cd@mr G44ce@r G44cf@e*) ((lambda (G44d8@e*) ((lambda (G44da@e) (values G44da@e G44ce@r)) (if (null? G44d8@e*) (G2cb8@G2c2a@build-void) (if (null? (cdr G44d8@e*)) (car G44d8@e*) (G2cb7@G2c28@build-sequence '#f G44d8@e*))))) (G2f8b@expand-interaction-rhs*/init* (reverse G44cc@lex*) (reverse G44cb@rhs*) (append (apply append (reverse G44ca@mod**)) G44cf@e*) G44ce@r G44cd@mr))) G44bf@G44b7 G44be@G44b6 G44bd@G44b5 G44bc@G44b4 G44bb@G44b3 G44ba@G44b2 G44b9@G44b1 G44b8@G44b0))))) (set! G2fd0@library-body-expander (lambda (G44dc@name G44dd@main-exp* G44de@imp* G44df@b* G44e0@top?) ((lambda (G44e7@itc) (begin (set! G44e7@itc (G2fc4@make-collector)) ((lambda (G44ec@G44e8 G44ed@G44e9 G44ee@G44ea G44ef@G44eb) ((lambda (G44f4@swap) (dynamic-wind G44f4@swap (lambda () (call-with-values (lambda () (G2fc0@parse-import-spec* G44de@imp*)) (lambda (G44f8@G44f6 G44f9@G44f7) ((lambda (G44fc@subst-labels G44fd@subst-names) ((lambda (G4500@rib) ((lambda (G4503@wrap) (begin (set! G4503@wrap (lambda (G456f@x) (G2d24@make-stx G456f@x G2cd2@top-mark* (list G4500@rib) '()))) ((lambda (G4504@b* G4505@main-exp* G4506@rtc G4507@vtc) ((lambda (G4510@G450c G4511@G450d G4512@G450e G4513@G450f) ((lambda (G4518@swap) (dynamic-wind G4518@swap (lambda () (call-with-values (lambda () (G2fcc@chi-library-internal G4504@b* G4500@rib G44e0@top?)) (lambda (G4520@G451a G4521@G451b G4522@G451c G4523@G451d G4524@G451e G4525@G451f) ((lambda (G452c@internal-exp* G452d@rhs* G452e@lex* G452f@mr G4530@r G4531@init*) (call-with-values (lambda () (G2fba@parse-exports (append G4505@main-exp* G452c@internal-exp*))) (lambda (G453a@G4538 G453b@G4539) ((lambda (G453e@exp-id* G453f@exp-name*) (begin (G2d11@seal-rib! G4500@rib) ((lambda (G4542@init*) ((lambda (G4544@rhs*) ((lambda () (begin (G2d13@unseal-rib! G4500@rib) ((lambda (G4546@loc* G4547@export-subst) ((lambda (G454b@errstr) (begin (set! G454b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3030@make-export-env/macros G452e@lex* G4546@loc* G4530@r)) (lambda (G454f@G454c G4550@G454d G4551@G454e) ((lambda (G4555@macro* G4556@global* G4557@export-env) (begin (for-each (lambda (G455b@s) ((lambda (G455d@name G455e@label) ((lambda (G4561@p) (if G4561@p ((lambda (G4563@b) ((lambda (G4565@type) (if (eq? G4565@type 'mutable) (G3044@syntax-violation 'export G454b@errstr G455d@name) (void))) (car G4563@b))) (cdr G4561@p)) (void))) (assq G455e@label G4557@export-env))) (car G455b@s) (cdr G455b@s))) G4547@export-subst) ((lambda (G4567@invoke-body G4568@invoke-definitions) (values (G44e7@itc) (G4506@rtc) (G4507@vtc) (G2cb7@G2c28@build-sequence '#f (append G4568@invoke-definitions (list G4567@invoke-body))) G4555@macro* G4547@export-subst G4557@export-env)) (G2cba@G2c2e@build-letrec* '#f G452e@lex* G4544@rhs* (G302c@build-exports G4556@global* G4542@init*)) (map G2cb3@G2b78@build-global-define (map cdr G4556@global*))))) G4551@G454e G4550@G454d G454f@G454c))))) '#f)) (map G2cd8@gen-global G452e@lex*) (G302e@make-export-subst G453f@exp-name* G453e@exp-id*)))))) (G2f8d@chi-rhs* G452d@rhs* G4530@r G452f@mr))) (G2f79@chi-expr* G4531@init* G4530@r G452f@mr)))) G453b@G4539 G453a@G4538)))) G4525@G451f G4524@G451e G4523@G451d G4522@G451c G4521@G451b G4520@G451a)))) G4518@swap)) (lambda () (begin ((lambda (G456b@t) (begin (G4510@G450c G4512@G450e) (set! G4512@G450e G456b@t))) (G4510@G450c)) ((lambda (G456d@t) (begin (G4511@G450d G4513@G450f) (set! G4513@G450f G456d@t))) (G4511@G450d)))))) G2fc6@inv-collector G2fc8@vis-collector G4506@rtc G4507@vtc)) (map G4503@wrap G44df@b*) (map G4503@wrap G44dd@main-exp*) (G2fc4@make-collector) (G2fc4@make-collector)))) '#f)) (G2fc2@make-top-rib G44fd@subst-names G44fc@subst-labels))) G44f9@G44f7 G44f8@G44f6)))) G44f4@swap)) (lambda () (begin ((lambda (G4571@t) (begin (G44ec@G44e8 G44ee@G44ea) (set! G44ee@G44ea G4571@t))) (G44ec@G44e8)) ((lambda (G4573@t) (begin (G44ed@G44e9 G44ef@G44eb) (set! G44ef@G44eb G4573@t))) (G44ed@G44e9)))))) G2fca@imp-collector G3052@top-level-context G44e7@itc '#f))) '#f))) (set! G2fd2@core-library-expander (lambda (G4575@e G4576@verify-name) (call-with-values (lambda () (G2fbe@parse-library G4575@e)) (lambda (G457d@G4579 G457e@G457a G457f@G457b G4580@G457c) ((lambda (G4585@b* G4586@imp* G4587@exp* G4588@name*) (call-with-values (lambda () (G2fbc@parse-library-name G4588@name*)) (lambda (G458f@G458d G4590@G458e) ((lambda (G4593@ver G4594@name) (begin (G4576@verify-name G4594@name) (call-with-values (lambda () (G2fd0@library-body-expander G4594@name G4587@exp* G4586@imp* G4585@b* '#f)) (lambda (G459e@G4597 G459f@G4598 G45a0@G4599 G45a1@G459a G45a2@G459b G45a3@G459c G45a4@G459d) ((lambda (G45ac@export-env G45ad@export-subst G45ae@visit-code G45af@invoke-code G45b0@visit-req* G45b1@invoke-req* G45b2@imp*) (values G4594@name G4593@ver G45b2@imp* G45b1@invoke-req* G45b0@visit-req* G45af@invoke-code G45ae@visit-code G45ad@export-subst G45ac@export-env)) G45a4@G459d G45a3@G459c G45a2@G459b G45a1@G459a G45a0@G4599 G459f@G4598 G459e@G4597))))) G4590@G458e G458f@G458d)))) G4580@G457c G457f@G457b G457e@G457a G457d@G4579))))) (set! G2fd4@parse-top-level-program (lambda (G45ba@e*) ((lambda (G45bc@t) ((lambda (G45be@ls/false) (if (and G45be@ls/false (apply (lambda (G45c0@import G45c1@imp* G45c2@b*) (eq? (G304a@syntax->datum G45c0@import) 'import)) G45be@ls/false)) (apply (lambda (G45c6@import G45c7@imp* G45c8@b*) (values G45c7@imp* G45c8@b*)) G45be@ls/false) ((lambda (G45cc@t) ((lambda (G45ce@ls/false) (if (and G45ce@ls/false (apply (lambda (G45d0@import G45d1@x G45d2@y) (eq? (G304a@syntax->datum G45d0@import) 'import)) G45ce@ls/false)) (apply (lambda (G45d6@import G45d7@x G45d8@y) (G3044@syntax-violation 'expander '"invalid syntax of top-level program" (G2d54@syntax-car G45ba@e*))) G45ce@ls/false) ((lambda (G45dc@t) ((lambda (G45de@ls/false) (if G45de@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45de@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G45dc@t))) (G2f59@syntax-dispatch G45dc@t '_))) G45cc@t))) (G2f59@syntax-dispatch G45cc@t '((any . any) . any)))) G45bc@t))) (G2f59@syntax-dispatch G45bc@t '((any . each-any) . each-any)))) G45ba@e*))) (set! G2fd6@top-level-expander (lambda (G45e0@e*) (call-with-values (lambda () (G2fd4@parse-top-level-program G45e0@e*)) (lambda (G45e4@G45e2 G45e5@G45e3) ((lambda (G45e8@b* G45e9@imp*) (call-with-values (lambda () (G2fd0@library-body-expander '() '() G45e9@imp* G45e8@b* '#t)) (lambda (G45f3@G45ec G45f4@G45ed G45f5@G45ee G45f6@G45ef G45f7@G45f0 G45f8@G45f1 G45f9@G45f2) ((lambda (G4601@export-env G4602@export-subst G4603@visit-code G4604@invoke-code G4605@visit-req* G4606@invoke-req* G4607@imp*) (values G4606@invoke-req* G4604@invoke-code)) G45f9@G45f2 G45f8@G45f1 G45f7@G45f0 G45f6@G45ef G45f5@G45ee G45f4@G45ed G45f3@G45ec)))) G45e5@G45e3 G45e4@G45e2))))) (set! G2fdc@G2fd7 (make-record-type-descriptor 'env '#f 'G2fda '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fde@G2fd9 '#f) (set! G2fe0@G2fd8 (make-record-constructor-descriptor G2fdc@G2fd7 '#f G2fde@G2fd9)) (set! G2fe3@env? (record-predicate G2fdc@G2fd7)) (set! G2fe5@make-env (record-constructor G2fe0@G2fd8)) (set! G2fe7@env-names (record-accessor G2fdc@G2fd7 '0)) (set! G2fe9@env-labels (record-accessor G2fdc@G2fd7 '1)) (set! G2feb@env-itc (record-accessor G2fdc@G2fd7 '2)) (set! G2fed@set-env-names! (record-mutator G2fdc@G2fd7 '0)) (set! G2fef@set-env-labels! (record-mutator G2fdc@G2fd7 '1)) (set! G2ff1@set-env-itc! (record-mutator G2fdc@G2fd7 '2)) (set! G2ff3@rp (G28f3@G2826@make-record-printer 'env (lambda (G460f@x G4610@p G4611@wr) (display '"#<environment>" G4610@p)))) (set! G2ff9@G2ff4 (make-record-type-descriptor 'interaction-env '#f 'G2ff7 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2ffb@G2ff6 '#f) (set! G2ffd@G2ff5 (make-record-constructor-descriptor G2ff9@G2ff4 '#f G2ffb@G2ff6)) (set! G3000@interaction-env? (record-predicate G2ff9@G2ff4)) (set! G3002@make-interaction-env (record-constructor G2ffd@G2ff5)) (set! G3004@interaction-env-rib (record-accessor G2ff9@G2ff4 '0)) (set! G3006@interaction-env-r (record-accessor G2ff9@G2ff4 '1)) (set! G3008@interaction-env-locs (record-accessor G2ff9@G2ff4 '2)) (set! G300a@set-interaction-env-rib! (record-mutator G2ff9@G2ff4 '0)) (set! G300c@set-interaction-env-r! (record-mutator G2ff9@G2ff4 '1)) (set! G300e@set-interaction-env-locs! (record-mutator G2ff9@G2ff4 '2)) (set! G3010@rp (G28f3@G2826@make-record-printer 'interaction-env (lambda (G4615@x G4616@p G4617@wr) (display '"#<environment>" G4616@p)))) (set! G3012@interaction-environment-symbols (lambda () (G301a@environment-symbols (G3050@interaction-environment)))) (set! G3014@environment-bindings (lambda (G461b@e) (vector->list (vector-map (lambda (G461d@name G461e@label) (G3016@parse-binding (cons G461d@name (G2b70@G2a16@imported-label->binding G461e@label)))) (G2fe7@env-names G461b@e) (G2fe9@env-labels G461b@e))))) (set! G3016@parse-binding (lambda (G4621@b) (cons (car G4621@b) ((lambda (G4623@t) (if (memv G4623@t '(core-prim global)) 'procedure (if (memv G4623@t '(core-macro macro global-macro)) 'syntax (if (memv G4623@t '($core-rtd)) 'record (if (eq? (car G4621@b) (cadr G4621@b)) 'syntax 'unknown))))) (cadr G4621@b))))) (set! G3018@environment? (lambda (G4625@x) (or (G2fe3@env? G4625@x) (G3000@interaction-env? G4625@x)))) (set! G301a@environment-symbols (lambda (G4627@x) (if (G2fe3@env? G4627@x) (vector->list (G2fe7@env-names G4627@x)) (if (G3000@interaction-env? G4627@x) (map values (G2cf1@rib-sym* (G3004@interaction-env-rib G4627@x))) (assertion-violation 'environment-symbols '"not an environment" G4627@x))))) (set! G301c@environment (lambda G4629@imp* ((lambda (G462b@itc) ((lambda (G462f@G462d G4630@G462e) ((lambda (G4633@swap) (dynamic-wind G4633@swap (lambda () (call-with-values (lambda () (G2fc0@parse-import-spec* G4629@imp*)) (lambda (G4637@G4635 G4638@G4636) ((lambda (G463b@subst-labels G463c@subst-names) (G2fe5@make-env G463c@subst-names G463b@subst-labels G462b@itc)) G4638@G4636 G4637@G4635)))) G4633@swap)) (lambda () ((lambda (G463f@t) (begin (G462f@G462d G4630@G462e) (set! G4630@G462e G463f@t))) (G462f@G462d))))) G2fca@imp-collector G462b@itc)) (G2fc4@make-collector)))) (set! G301e@null-environment (lambda (G4641@n) (begin (if (not (eqv? G4641@n '5)) (assertion-violation 'null-environment '"not 5" G4641@n) (void)) (G301c@environment '(psyntax null-environment-5))))) (set! G3020@scheme-report-environment (lambda (G4643@n) (begin (if (not (eqv? G4643@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4643@n) (void)) (G301c@environment '(psyntax scheme-report-environment-5))))) (set! G3022@expand (lambda (G4645@x G4646@env) (if (G2fe3@env? G4646@env) ((lambda (G4649@rib) ((lambda (G464b@x G464c@itc G464d@rtc G464e@vtc) ((lambda (G4653@x) (begin (G2d11@seal-rib! G4649@rib) (values G4653@x (G464d@rtc)))) ((lambda (G465d@G4655 G465e@G4656 G465f@G4657 G4660@G4658 G4661@G4659 G4662@G465a G4663@G465b G4664@G465c) ((lambda (G466d@swap) (dynamic-wind G466d@swap (lambda () (G2f7d@chi-expr G464b@x '() '())) G466d@swap)) (lambda () (begin ((lambda (G466f@t) (begin (G465d@G4655 G4661@G4659) (set! G4661@G4659 G466f@t))) (G465d@G4655)) ((lambda (G4671@t) (begin (G465e@G4656 G4662@G465a) (set! G4662@G465a G4671@t))) (G465e@G4656)) ((lambda (G4673@t) (begin (G465f@G4657 G4663@G465b) (set! G4663@G465b G4673@t))) (G465f@G4657)) ((lambda (G4675@t) (begin (G4660@G4658 G4664@G465c) (set! G4664@G465c G4675@t))) (G4660@G4658)))))) G3052@top-level-context G2fc6@inv-collector G2fc8@vis-collector G2fca@imp-collector '#f G464d@rtc G464e@vtc G464c@itc))) (G2d24@make-stx G4645@x G2cd2@top-mark* (list G4649@rib) '()) (G2feb@env-itc G4646@env) (G2fc4@make-collector) (G2fc4@make-collector))) (G2fc2@make-top-rib (G2fe7@env-names G4646@env) (G2fe9@env-labels G4646@env))) (if (G3000@interaction-env? G4646@env) ((lambda (G4677@rib G4678@r G4679@rtc) ((lambda (G467d@x) (call-with-values (lambda () ((lambda (G4689@G4681 G468a@G4682 G468b@G4683 G468c@G4684 G468d@G4685 G468e@G4686 G468f@G4687 G4690@G4688) ((lambda (G4699@swap) (dynamic-wind G4699@swap (lambda () (G2fce@chi-interaction-expr G467d@x G4677@rib G4678@r)) G4699@swap)) (lambda () (begin ((lambda (G469b@t) (begin (G4689@G4681 G468d@G4685) (set! G468d@G4685 G469b@t))) (G4689@G4681)) ((lambda (G469d@t) (begin (G468a@G4682 G468e@G4686) (set! G468e@G4686 G469d@t))) (G468a@G4682)) ((lambda (G469f@t) (begin (G468b@G4683 G468f@G4687) (set! G468f@G4687 G469f@t))) (G468b@G4683)) ((lambda (G46a1@t) (begin (G468c@G4684 G4690@G4688) (set! G4690@G4688 G46a1@t))) (G468c@G4684)))))) G3052@top-level-context G2fc6@inv-collector G2fc8@vis-collector G2fca@imp-collector G4646@env G4679@rtc (G2fc4@make-collector) (G2fc4@make-collector))) (lambda (G46a3@G467f G46a4@G4680) ((lambda (G46a7@r^ G46a8@e) (begin (G300c@set-interaction-env-r! G4646@env G46a7@r^) (values G46a8@e (G4679@rtc)))) G46a4@G4680 G46a3@G467f)))) (G2d24@make-stx G4645@x G2cd2@top-mark* (list G4677@rib) '()))) (G3004@interaction-env-rib G4646@env) (G3006@interaction-env-r G4646@env) (G2fc4@make-collector)) (assertion-violation 'expand '"not an environment" G4646@env))))) (set! G3024@eval (lambda (G46ab@x G46ac@env) (begin (if (not (G3018@environment? G46ac@env)) (error 'eval '"not an environment" G46ac@env) (void)) (call-with-values (lambda () (G3022@expand G46ab@x G46ac@env)) (lambda (G46b1@G46af G46b2@G46b0) ((lambda (G46b5@invoke-req* G46b6@x) (begin (for-each G2b71@G2a18@invoke-library G46b5@invoke-req*) (eval-core (G294a@G2902@expanded->core G46b6@x)))) G46b2@G46b0 G46b1@G46af)))))) (set! G3026@library-expander (lambda G471e ((lambda (G471f) (if (= G471f '3) (apply (lambda (G46b9@x G46ba@filename G46bb@verify-name) ((lambda (G46c0@build-visit-code G46c2@visit!) (begin (set! G46c0@build-visit-code (lambda (G470c@macro*) (if (null? G470c@macro*) (G2cb8@G2c2a@build-void) (G2cb7@G2c28@build-sequence '#f (map (lambda (G470e@x) ((lambda (G4710@loc G4711@src) (list 'set! G4710@loc G4711@src)) (car G470e@x) (cddr G470e@x))) G470c@macro*))))) (set! G46c2@visit! (lambda (G4704@macro*) (for-each (lambda (G4706@x) ((lambda (G4708@loc G4709@proc) (set-symbol-value! G4708@loc G4709@proc)) (car G4706@x) (cadr G4706@x))) G4704@macro*))) (call-with-values (lambda () (G2fd2@core-library-expander G46b9@x G46bb@verify-name)) (lambda (G46cc@G46c3 G46cd@G46c4 G46ce@G46c5 G46cf@G46c6 G46d0@G46c7 G46d1@G46c8 G46d2@G46c9 G46d3@G46ca G46d4@G46cb) ((lambda (G46de@export-env G46df@export-subst G46e0@macro* G46e1@invoke-code G46e2@vis* G46e3@inv* G46e4@imp* G46e5@ver G46e6@name) ((lambda (G46f0@id G46f1@name G46f2@ver G46f3@imp* G46f4@vis* G46f5@inv* G46f6@visit-proc G46f7@invoke-proc G46f8@visit-code G46f9@invoke-code) (begin (G2b6f@G2a14@install-library G46f0@id G46f1@name G46f2@ver G46f3@imp* G46f4@vis* G46f5@inv* G46df@export-subst G46de@export-env G46f6@visit-proc G46f7@invoke-proc G46f8@visit-code G46f9@invoke-code '#t G46ba@filename) (values G46f0@id G46f1@name G46f2@ver G46f3@imp* G46f4@vis* G46f5@inv* G46f9@invoke-code G46f8@visit-code G46df@export-subst G46de@export-env))) (gensym) G46e6@name G46e5@ver (map G2b75@G2a20@library-spec G46e4@imp*) (map G2b75@G2a20@library-spec G46e2@vis*) (map G2b75@G2a20@library-spec G46e3@inv*) (lambda () (G46c2@visit! G46e0@macro*)) (lambda () (eval-core (G294a@G2902@expanded->core G46e1@invoke-code))) (G46c0@build-visit-code G46e0@macro*) G46e1@invoke-code)) G46d4@G46cb G46d3@G46ca G46d2@G46c9 G46d1@G46c8 G46d0@G46c7 G46cf@G46c6 G46ce@G46c5 G46cd@G46c4 G46cc@G46c3))))) '#f '#f)) G471e) (if (= G471f '2) (apply (lambda (G4714@x G4715@filename) (G3026@library-expander G4714@x G4715@filename (lambda (G4718@x) (values)))) G471e) (if (= G471f '1) (apply (lambda (G471a@x) (G3026@library-expander G471a@x '#f (lambda (G471c@x) (values)))) G471e) (error 'apply '"invalid arg count"))))) (length G471e)))) (set! G3028@boot-library-expand (lambda (G4720@x) (call-with-values (lambda () (G3026@library-expander G4720@x)) (lambda (G472c@G4722 G472d@G4723 G472e@G4724 G472f@G4725 G4730@G4726 G4731@G4727 G4732@G4728 G4733@G4729 G4734@G472a G4735@G472b) ((lambda (G4740@export-env G4741@export-subst G4742@visit-code G4743@invoke-code G4744@inv* G4745@vis* G4746@imp* G4747@ver G4748@name G4749@id) (values G4748@name G4743@invoke-code G4741@export-subst G4740@export-env)) G4735@G472b G4734@G472a G4733@G4729 G4732@G4728 G4731@G4727 G4730@G4726 G472f@G4725 G472e@G4724 G472d@G4723 G472c@G4722))))) (set! G302a@rev-map-append (lambda (G4754@f G4755@ls G4756@ac) (if (null? G4755@ls) G4756@ac (G302a@rev-map-append G4754@f (cdr G4755@ls) (cons (G4754@f (car G4755@ls)) G4756@ac))))) (set! G302c@build-exports (lambda (G475a@lex*+loc* G475b@init*) (G2cb7@G2c28@build-sequence '#f (cons (G2cb8@G2c2a@build-void) (G302a@rev-map-append (lambda (G475e@x) (list 'set! (cdr G475e@x) (car G475e@x))) G475a@lex*+loc* G475b@init*))))) (set! G302e@make-export-subst (lambda (G4760@name* G4761@id*) (map (lambda (G4764@name G4765@id) ((lambda (G4768@label) (begin (if (not G4768@label) (G3044@syntax-violation '#f '"cannot export unbound identifier" G4765@id) (void)) (cons G4764@name G4768@label))) (G2d74@id->label G4765@id))) G4760@name* G4761@id*))) (set! G3030@make-export-env/macros (lambda (G476a@lex* G476b@loc* G476c@r) ((lambda (G4771@lookup) (begin (set! G4771@lookup (lambda (G478e@x) ((letrec ((G4790@f (lambda (G4792@x G4793@lex* G4794@loc*) (if (pair? G4793@lex*) (if (eq? G4792@x (car G4793@lex*)) (car G4794@loc*) (G4790@f G4792@x (cdr G4793@lex*) (cdr G4794@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4790@f) G478e@x G476a@lex* G476b@loc*))) ((letrec ((G4772@f (lambda (G4774@r G4775@env G4776@global* G4777@macro*) (if (null? G4774@r) (values G4775@env G4776@global* G4777@macro*) ((lambda (G477c@x) ((lambda (G477e@label G477f@b) ((lambda (G4782@t) (if (memv G4782@t '(lexical)) ((lambda (G4784@v) ((lambda (G4786@loc G4787@type) (G4772@f (cdr G4774@r) (cons (cons* G477e@label G4787@type G4786@loc) G4775@env) (cons (cons (G2ee5@lexical-var G4784@v) G4786@loc) G4776@global*) G4777@macro*)) (G4771@lookup (G2ee5@lexical-var G4784@v)) (if (G2ee7@lexical-mutable? G4784@v) 'mutable 'global))) (G2d7e@binding-value G477f@b)) (if (memv G4782@t '(local-macro)) ((lambda (G478a@loc) (G4772@f (cdr G4774@r) (cons (cons* G477e@label 'global-macro G478a@loc) G4775@env) G4776@global* (cons (cons G478a@loc (G2d7e@binding-value G477f@b)) G4777@macro*))) (gensym)) (if (memv G4782@t '(local-macro!)) ((lambda (G478c@loc) (G4772@f (cdr G4774@r) (cons (cons* G477e@label 'global-macro! G478c@loc) G4775@env) G4776@global* (cons (cons G478c@loc (G2d7e@binding-value G477f@b)) G4777@macro*))) (gensym)) (if (memv G4782@t '($rtd $module)) (G4772@f (cdr G4774@r) (cons G477c@x G4775@env) G4776@global* G4777@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d7c@binding-type G477f@b) (G2d7e@binding-value G477f@b))))))) (G2d7c@binding-type G477f@b))) (car G477c@x) (cdr G477c@x))) (car G4774@r)))))) G4772@f) G476c@r '() '() '()))) '#f))) (set! G3032@generate-temporaries (lambda (G4798@ls) ((lambda (G479a@t) ((lambda (G479c@ls/false) (if G479c@ls/false (apply (lambda (G479e@ls) (map (lambda (G47a0@x) (G2d24@make-stx ((lambda (G47a2@x) (if (or (symbol? G47a2@x) (string? G47a2@x)) (gensym G47a2@x) (gensym 't))) (G304a@syntax->datum G47a0@x)) G2cd2@top-mark* '() '())) G479e@ls)) G479c@ls/false) ((lambda (G47a4@t) ((lambda (G47a6@ls/false) (if G47a6@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47a6@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G47a4@t))) (G2f59@syntax-dispatch G47a4@t '_))) G479a@t))) (G2f59@syntax-dispatch G479a@t 'each-any))) G4798@ls))) (set! G3034@free-identifier=? (lambda (G47a8@x G47a9@y) (if (G2d5a@id? G47a8@x) (if (G2d5a@id? G47a9@y) (G2d62@free-id=? G47a8@x G47a9@y) (assertion-violation 'free-identifier=? '"not an identifier" G47a9@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47a8@x)))) (set! G3036@bound-identifier=? (lambda (G47ac@x G47ad@y) (if (G2d5a@id? G47ac@x) (if (G2d5a@id? G47ad@y) (G2d60@bound-id=? G47ac@x G47ad@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47ad@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47ac@x)))) (set! G3038@make-source-condition (lambda (G47b0@x) ((lambda (G47ba@G47b5 G47bc@G47b7 G47be@G47b6 G47c1@G47b4 G47c3@make-source-condition G47c5@G47b2 G47c7@G47b3 G47c9@source-condition? G47cb@source-filename G47cd@source-character) (begin (set! G47ba@G47b5 (make-record-type-descriptor '&source-information G4c0c@G495d@&condition-rtd 'G47b8 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47bc@G47b7 '#f) (set! G47be@G47b6 (make-record-constructor-descriptor G47ba@G47b5 G4c0d@G495f@&condition-rcd G47bc@G47b7)) (set! G47c1@G47b4 (record-predicate G47ba@G47b5)) (set! G47c3@make-source-condition (record-constructor G47be@G47b6)) (set! G47c5@G47b2 (record-accessor G47ba@G47b5 '0)) (set! G47c7@G47b3 (record-accessor G47ba@G47b5 '1)) (set! G47c9@source-condition? (condition-predicate G47ba@G47b5)) (set! G47cb@source-filename (condition-accessor G47ba@G47b5 G47c5@G47b2)) (set! G47cd@source-character (condition-accessor G47ba@G47b5 G47c7@G47b3)) (if (pair? G47b0@x) (G47c3@make-source-condition (car G47b0@x) (cdr G47b0@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G303a@extract-position-condition (lambda (G47ce@x) (G3038@make-source-condition (G303c@expression-position G47ce@x)))) (set! G303c@expression-position (lambda (G47d0@x) (and (G2d22@stx? G47d0@x) ((lambda (G47d2@x) (and (G28eb@G2816@annotation? G47d2@x) (G28ec@G2818@annotation-source G47d2@x))) (G2d26@stx-expr G47d0@x))))) (set! G303e@assertion-error (lambda (G47d4@expr G47d5@pos) (raise (condition (G4c3c@G4a1f@make-assertion-violation) (G4c4e@G4a4f@make-who-condition 'assert) (G4c12@G49b2@make-message-condition '"assertion failed") (G4c44@G4a35@make-irritants-condition (list G47d4@expr)) (G3038@make-source-condition G47d5@pos))))) (set! G3040@syntax-error (lambda (G47d8@x . G47da@args) (begin (if (not (for-all string? G47da@args)) (assertion-violation 'syntax-error '"invalid argument" G47da@args) (void)) (raise (condition (G4c12@G49b2@make-message-condition (if (null? G47da@args) '"invalid syntax" (apply string-append G47da@args))) (G4c70@G4aa9@make-syntax-violation (G304a@syntax->datum G47d8@x) '#f) (G303a@extract-position-condition G47d8@x)))))) (set! G3042@syntax-violation* (lambda (G47dc@who G47dd@msg G47de@form G47df@condition-object) (begin (if (not (string? G47dd@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47dd@msg) (void)) ((lambda (G47e4@who) (raise (condition (if G47e4@who (G4c4e@G4a4f@make-who-condition G47e4@who) (condition)) (G4c12@G49b2@make-message-condition G47dd@msg) G47df@condition-object (G303a@extract-position-condition G47de@form)))) (if (or (string? G47dc@who) (symbol? G47dc@who)) G47dc@who (if (not G47dc@who) ((lambda (G47e6@t) ((lambda (G47e8@ls/false) (if (and G47e8@ls/false (apply (lambda (G47ea@id) (G2d5a@id? G47ea@id)) G47e8@ls/false)) (apply (lambda (G47ec@id) (G304a@syntax->datum G47ec@id)) G47e8@ls/false) ((lambda (G47ee@t) ((lambda (G47f0@ls/false) (if (and G47f0@ls/false (apply (lambda (G47f2@id G47f3@rest) (G2d5a@id? G47f2@id)) G47f0@ls/false)) (apply (lambda (G47f6@id G47f7@rest) (G304a@syntax->datum G47f6@id)) G47f0@ls/false) ((lambda (G47fa@t) ((lambda (G47fc@ls/false) (if G47fc@ls/false (apply (lambda () '#f) G47fc@ls/false) (G3044@syntax-violation '#f '"invalid syntax" G47fa@t))) (G2f59@syntax-dispatch G47fa@t '_))) G47ee@t))) (G2f59@syntax-dispatch G47ee@t '(any . any)))) G47e6@t))) (G2f59@syntax-dispatch G47e6@t 'any))) G47de@form) (assertion-violation 'syntax-violation '"invalid who argument" G47dc@who))))))) (set! G3044@syntax-violation (lambda G480c ((lambda (G480d) (if (= G480d '3) (apply (lambda (G47fe@who G47ff@msg G4800@form) (G3044@syntax-violation G47fe@who G47ff@msg G4800@form '#f)) G480c) (if (= G480d '4) (apply (lambda (G4804@who G4805@msg G4806@form G4807@subform) (G3042@syntax-violation* G4804@who G4805@msg G4806@form (G4c70@G4aa9@make-syntax-violation (G304a@syntax->datum G4806@form) (G304a@syntax->datum G4807@subform)))) G480c) (error 'apply '"invalid arg count")))) (length G480c)))) (set! G3046@identifier? (lambda (G480e@x) (G2d5a@id? G480e@x))) (set! G3048@datum->syntax (lambda (G4810@id G4811@datum) (if (G2d5a@id? G4810@id) (G2d38@datum->stx G4810@id G4811@datum) (assertion-violation 'datum->syntax '"not an identifier" G4810@id)))) (set! G304a@syntax->datum (lambda (G4814@x) (G2d70@stx->datum G4814@x))) (set! G304c@compile-r6rs-top-level (lambda (G4816@x*) (call-with-values (lambda () (G2fd6@top-level-expander G4816@x*)) (lambda (G481a@G4818 G481b@G4819) ((lambda (G481e@invoke-code G481f@lib*) (lambda () (begin (for-each G2b71@G2a18@invoke-library G481f@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G294a@G2902@expanded->core G481e@invoke-code)) (void)) (eval-core (G294a@G2902@expanded->core G481e@invoke-code))))) G481b@G4819 G481a@G4818))))) (set! G304e@pre-compile-r6rs-top-level (lambda (G4822@x*) (call-with-values (lambda () (G2fd6@top-level-expander G4822@x*)) (lambda (G4826@G4824 G4827@G4825) ((lambda (G482a@invoke-code G482b@lib*) (begin (for-each G2b71@G2a18@invoke-library G482b@lib*) (G28f4@G2828@compile-core (G294a@G2902@expanded->core G482a@invoke-code)))) G4827@G4825 G4826@G4824))))) (set! G3050@interaction-environment ((lambda (G482e@the-env) (lambda () (or G482e@the-env ((lambda (G4830@lib G4831@rib) (begin ((lambda (G4834@subst) (begin (G2cfb@set-rib-sym*! G4831@rib (map car G4834@subst)) (G2cfd@set-rib-mark**! G4831@rib (map (lambda (G4836@x) G2cd2@top-mark*) G4834@subst)) (G2cff@set-rib-label*! G4831@rib (map cdr G4834@subst)))) (G2b46@G29c2@library-subst G4830@lib)) ((lambda (G4838@env) (begin (set! G482e@the-env G4838@env) G4838@env)) (G3002@make-interaction-env G4831@rib '() '())))) (G2b6a@G2a0a@find-library-by-name '(mosh interaction)) (G2d05@make-empty-rib))))) '#f)) (set! G3052@top-level-context (G28f6@G282c@make-parameter '#f)) (begin (set! G4948@G3052@top-level-context G3052@top-level-context) (set! G4947@G3050@interaction-environment G3050@interaction-environment) (set! G4946@G304e@pre-compile-r6rs-top-level G304e@pre-compile-r6rs-top-level) (set! G4945@G304c@compile-r6rs-top-level G304c@compile-r6rs-top-level) (set! G4944@G304a@syntax->datum G304a@syntax->datum) (set! G4943@G3048@datum->syntax G3048@datum->syntax) (set! G4942@G3046@identifier? G3046@identifier?) (set! G4941@G3044@syntax-violation G3044@syntax-violation) (set! G4940@G3042@syntax-violation* G3042@syntax-violation*) (set! G493f@G3040@syntax-error G3040@syntax-error) (set! G493e@G303e@assertion-error G303e@assertion-error) (set! G493d@G303c@expression-position G303c@expression-position) (set! G493c@G303a@extract-position-condition G303a@extract-position-condition) (set! G493b@G3038@make-source-condition G3038@make-source-condition) (set! G493a@G3036@bound-identifier=? G3036@bound-identifier=?) (set! G4939@G3034@free-identifier=? G3034@free-identifier=?) (set! G4938@G3032@generate-temporaries G3032@generate-temporaries) (set! G4937@G3030@make-export-env/macros G3030@make-export-env/macros) (set! G4936@G302e@make-export-subst G302e@make-export-subst) (set! G4935@G302c@build-exports G302c@build-exports) (set! G4934@G302a@rev-map-append G302a@rev-map-append) (set! G4933@G3028@boot-library-expand G3028@boot-library-expand) (set! G4932@G3026@library-expander G3026@library-expander) (set! G4931@G3024@eval G3024@eval) (set! G4930@G3022@expand G3022@expand) (set! G492f@G3020@scheme-report-environment G3020@scheme-report-environment) (set! G492e@G301e@null-environment G301e@null-environment) (set! G492d@G301c@environment G301c@environment) (set! G492c@G301a@environment-symbols G301a@environment-symbols) (set! G492b@G3018@environment? G3018@environment?) (set! G492a@G3016@parse-binding G3016@parse-binding) (set! G4929@G3014@environment-bindings G3014@environment-bindings) (set! G4928@G3012@interaction-environment-symbols G3012@interaction-environment-symbols) (set! G4927@G3010@rp G3010@rp) (set! G4926@G300e@set-interaction-env-locs! G300e@set-interaction-env-locs!) (set! G4925@G300c@set-interaction-env-r! G300c@set-interaction-env-r!) (set! G4924@G300a@set-interaction-env-rib! G300a@set-interaction-env-rib!) (set! G4923@G3008@interaction-env-locs G3008@interaction-env-locs) (set! G4922@G3006@interaction-env-r G3006@interaction-env-r) (set! G4921@G3004@interaction-env-rib G3004@interaction-env-rib) (set! G4920@G3002@make-interaction-env G3002@make-interaction-env) (set! G491f@G3000@interaction-env? G3000@interaction-env?) (set! G491e@G2ffd@G2ff5 G2ffd@G2ff5) (set! G491d@G2ffb@G2ff6 G2ffb@G2ff6) (set! G491c@G2ff9@G2ff4 G2ff9@G2ff4) (set! G491b@G2ff3@rp G2ff3@rp) (set! G491a@G2ff1@set-env-itc! G2ff1@set-env-itc!) (set! G4919@G2fef@set-env-labels! G2fef@set-env-labels!) (set! G4918@G2fed@set-env-names! G2fed@set-env-names!) (set! G4917@G2feb@env-itc G2feb@env-itc) (set! G4916@G2fe9@env-labels G2fe9@env-labels) (set! G4915@G2fe7@env-names G2fe7@env-names) (set! G4914@G2fe5@make-env G2fe5@make-env) (set! G4913@G2fe3@env? G2fe3@env?) (set! G4912@G2fe0@G2fd8 G2fe0@G2fd8) (set! G4911@G2fde@G2fd9 G2fde@G2fd9) (set! G4910@G2fdc@G2fd7 G2fdc@G2fd7) (set! G490f@G2fd6@top-level-expander G2fd6@top-level-expander) (set! G490e@G2fd4@parse-top-level-program G2fd4@parse-top-level-program) (set! G490d@G2fd2@core-library-expander G2fd2@core-library-expander) (set! G490c@G2fd0@library-body-expander G2fd0@library-body-expander) (set! G490b@G2fce@chi-interaction-expr G2fce@chi-interaction-expr) (set! G490a@G2fcc@chi-library-internal G2fcc@chi-library-internal) (set! G4909@G2fca@imp-collector G2fca@imp-collector) (set! G4908@G2fc8@vis-collector G2fc8@vis-collector) (set! G4907@G2fc6@inv-collector G2fc6@inv-collector) (set! G4906@G2fc4@make-collector G2fc4@make-collector) (set! G4905@G2fc2@make-top-rib G2fc2@make-top-rib) (set! G4904@G2fc0@parse-import-spec* G2fc0@parse-import-spec*) (set! G4903@G2fbe@parse-library G2fbe@parse-library) (set! G4902@G2fbc@parse-library-name G2fbc@parse-library-name) (set! G4901@G2fba@parse-exports G2fba@parse-exports) (set! G4900@G2fb8@expand-transformer G2fb8@expand-transformer) (set! G48ff@G2fb6@chi-body* G2fb6@chi-body*) (set! G48fe@G2fb4@chi-internal-module G2fb4@chi-internal-module) (set! G48fd@G2fb2@module-interface-exp-id* G2fb2@module-interface-exp-id*) (set! G48fc@G2fb0@set-module-interface-exp-lab-vec! G2fb0@set-module-interface-exp-lab-vec!) (set! G48fb@G2fae@set-module-interface-exp-id-vec! G2fae@set-module-interface-exp-id-vec!) (set! G48fa@G2fac@set-module-interface-first-mark! G2fac@set-module-interface-first-mark!) (set! G48f9@G2faa@module-interface-exp-lab-vec G2faa@module-interface-exp-lab-vec) (set! G48f8@G2fa8@module-interface-exp-id-vec G2fa8@module-interface-exp-id-vec) (set! G48f7@G2fa6@module-interface-first-mark G2fa6@module-interface-first-mark) (set! G48f6@G2fa4@make-module-interface G2fa4@make-module-interface) (set! G48f5@G2fa2@module-interface? G2fa2@module-interface?) (set! G48f4@G2f9f@G2f97 G2f9f@G2f97) (set! G48f3@G2f9d@G2f98 G2f9d@G2f98) (set! G48f2@G2f9b@G2f96 G2f9b@G2f96) (set! G48f1@G2f95@parse-module G2f95@parse-module) (set! G48f0@G2f93@chi-internal G2f93@chi-internal) (set! G48ef@G2f91@find-dups G2f91@find-dups) (set! G48ee@G2f8f@find-bound=? G2f8f@find-bound=?) (set! G48ed@G2f8d@chi-rhs* G2f8d@chi-rhs*) (set! G48ec@G2f8b@expand-interaction-rhs*/init* G2f8b@expand-interaction-rhs*/init*) (set! G48eb@G2f89@chi-rhs G2f89@chi-rhs) (set! G48ea@G2f87@chi-defun G2f87@chi-defun) (set! G48e9@G2f85@chi-lambda-clause* G2f85@chi-lambda-clause*) (set! G48e8@G2f83@chi-lambda-clause G2f83@chi-lambda-clause) (set! G48e7@G2f81@verify-formals G2f81@verify-formals) (set! G48e6@G2f7f@chi-set! G2f7f@chi-set!) (set! G48e5@G2f7d@chi-expr G2f7d@chi-expr) (set! G48e4@G2f7b@chi-application G2f7b@chi-application) (set! G48e3@G2f79@chi-expr* G2f79@chi-expr*) (set! G48e2@G2f77@chi-global-macro G2f77@chi-global-macro) (set! G48e1@G2f75@chi-local-macro G2f75@chi-local-macro) (set! G48e0@G2f73@chi-macro G2f73@chi-macro) (set! G48df@G2f71@do-macro-call G2f71@do-macro-call) (set! G48de@G2f6f@local-macro-transformer G2f6f@local-macro-transformer) (set! G48dd@G2f6d@macro-transformer G2f6d@macro-transformer) (set! G48dc@G2f6b@symbol-macro G2f6b@symbol-macro) (set! G48db@G2f69@file-options-macro G2f69@file-options-macro) (set! G48da@G2f67@core-macro-transformer G2f67@core-macro-transformer) (set! G48d9@G2f65@syntax-transformer G2f65@syntax-transformer) (set! G48d8@G2f63@ellipsis-map G2f63@ellipsis-map) (set! G48d7@G2f61@syntax-case-transformer G2f61@syntax-case-transformer) (set! G48d6@G2f5f@verify-literals G2f5f@verify-literals) (set! G48d5@G2f5d@underscore? G2f5d@underscore?) (set! G48d4@G2f5b@ellipsis? G2f5b@ellipsis?) (set! G48d3@G2f59@syntax-dispatch G2f59@syntax-dispatch) (set! G48d2@G2f57@convert-pattern G2f57@convert-pattern) (set! G48d1@G2f55@foreign-call-transformer G2f55@foreign-call-transformer) (set! G48d0@G2f53@parameterize-macro G2f53@parameterize-macro) (set! G48cf@G2f51@incorrect-usage-macro G2f51@incorrect-usage-macro) (set! G48ce@G2f4f@define-condition-type-macro G2f4f@define-condition-type-macro) (set! G48cd@G2f4d@define-record-type-macro G2f4d@define-record-type-macro) (set! G48cc@G2f4b@define-struct-macro G2f4b@define-struct-macro) (set! G48cb@G2f49@quasisyntax-macro G2f49@quasisyntax-macro) (set! G48ca@G2f47@quasiquote-macro G2f47@quasiquote-macro) (set! G48c9@G2f45@syntax-rules-macro G2f45@syntax-rules-macro) (set! G48c8@G2f43@include-into-macro G2f43@include-into-macro) (set! G48c7@G2f41@include-macro G2f41@include-macro) (set! G48c6@G2f3f@do-include G2f3f@do-include) (set! G48c5@G2f3d@cond-macro G2f3d@cond-macro) (set! G48c4@G2f3b@and-macro G2f3b@and-macro) (set! G48c3@G2f39@or-macro G2f39@or-macro) (set! G48c2@G2f37@let*-macro G2f37@let*-macro) (set! G48c1@G2f35@do-macro G2f35@do-macro) (set! G48c0@G2f33@identifier-syntax-macro G2f33@identifier-syntax-macro) (set! G48bf@G2f31@endianness-macro G2f31@endianness-macro) (set! G48be@G2f2f@assert-macro G2f2f@assert-macro) (set! G48bd@G2f2d@delay-macro G2f2d@delay-macro) (set! G48bc@G2f2b@time-macro G2f2b@time-macro) (set! G48bb@G2f29@define-enumeration-macro G2f29@define-enumeration-macro) (set! G48ba@G2f27@guard-macro G2f27@guard-macro) (set! G48b9@G2f25@trace-letrec-syntax-macro G2f25@trace-letrec-syntax-macro) (set! G48b8@G2f23@trace-let-syntax-macro G2f23@trace-let-syntax-macro) (set! G48b7@G2f21@trace-let/rec-syntax G2f21@trace-let/rec-syntax) (set! G48b6@G2f1f@trace-define-syntax-macro G2f1f@trace-define-syntax-macro) (set! G48b5@G2f1d@trace-define-macro G2f1d@trace-define-macro) (set! G48b4@G2f1b@trace-lambda-macro G2f1b@trace-lambda-macro) (set! G48b3@G2f19@let*-values-macro G2f19@let*-values-macro) (set! G48b2@G2f17@let-values-macro G2f17@let-values-macro) (set! G48b1@G2f15@let-macro G2f15@let-macro) (set! G48b0@G2f13@invalid-fmls-error G2f13@invalid-fmls-error) (set! G48af@G2f11@with-syntax-macro G2f11@with-syntax-macro) (set! G48ae@G2f0f@bless G2f0f@bless) (set! G48ad@G2f0d@lambda-transformer G2f0d@lambda-transformer) (set! G48ac@G2f0b@case-lambda-transformer G2f0b@case-lambda-transformer) (set! G48ab@G2f09@quote-transformer G2f09@quote-transformer) (set! G48aa@G2f07@case-macro G2f07@case-macro) (set! G48a9@G2f05@or-transformer G2f05@or-transformer) (set! G48a8@G2f03@and-transformer G2f03@and-transformer) (set! G48a7@G2f01@if-transformer G2f01@if-transformer) (set! G48a6@G2eff@unless-macro G2eff@unless-macro) (set! G48a5@G2efd@when-macro G2efd@when-macro) (set! G48a4@G2efb@record-constructor-descriptor-transformer G2efb@record-constructor-descriptor-transformer) (set! G48a3@G2ef9@record-type-descriptor-transformer G2ef9@record-type-descriptor-transformer) (set! G48a2@G2ef7@type-descriptor-transformer G2ef7@type-descriptor-transformer) (set! G48a1@G2ef5@fluid-let-syntax-transformer G2ef5@fluid-let-syntax-transformer) (set! G48a0@G2ef3@letrec*-transformer G2ef3@letrec*-transformer) (set! G489f@G2ef1@letrec-transformer G2ef1@letrec-transformer) (set! G489e@G2eef@letrec-helper G2eef@letrec-helper) (set! G489d@G2eed@add-lexicals G2eed@add-lexicals) (set! G489c@G2eeb@add-lexical G2eeb@add-lexical) (set! G489b@G2ee9@set-lexical-mutable! G2ee9@set-lexical-mutable!) (set! G489a@G2ee7@lexical-mutable? G2ee7@lexical-mutable?) (set! G4899@G2ee5@lexical-var G2ee5@lexical-var) (set! G4898@G2ee3@scheme-stx G2ee3@scheme-stx) (set! G4897@G2ee1@scheme-stx-hashtable G2ee1@scheme-stx-hashtable) (set! G4896@G2edf@parse-define-syntax G2edf@parse-define-syntax) (set! G4895@G2edd@parse-define G2edd@parse-define) (set! G4894@G2d9a@make-eval-transformer G2d9a@make-eval-transformer) (set! G4893@G2d98@variable-transformer-procedure G2d98@variable-transformer-procedure) (set! G4892@G2d96@variable-transformer? G2d96@variable-transformer?) (set! G4891@G2d94@make-variable-transformer G2d94@make-variable-transformer) (set! G4890@G2d92@sanitize-binding G2d92@sanitize-binding) (set! G488f@G2d82@syntax-type G2d82@syntax-type) (set! G488e@G2d80@raise-unbound-error G2d80@raise-unbound-error) (set! G488d@G2d7e@binding-value G2d7e@binding-value) (set! G488c@G2d7c@binding-type G2d7c@binding-type) (set! G488b@G2d7a@make-binding G2d7a@make-binding) (set! G488a@G2d78@label->binding G2d78@label->binding) (set! G4889@G2d76@id->real-label G2d76@id->real-label) (set! G4888@G2d74@id->label G2d74@id->label) (set! G4887@G2d72@same-marks*? G2d72@same-marks*?) (set! G4886@G2d70@stx->datum G2d70@stx->datum) (set! G4885@G2d6e@strip G2d6e@strip) (set! G4884@G2d6c@strip-annotations G2d6c@strip-annotations) (set! G4883@G2d6a@self-evaluating? G2d6a@self-evaluating?) (set! G4882@G2d68@bound-id-member? G2d68@bound-id-member?) (set! G4881@G2d66@distinct-bound-ids? G2d66@distinct-bound-ids?) (set! G4880@G2d64@valid-bound-ids? G2d64@valid-bound-ids?) (set! G487f@G2d62@free-id=? G2d62@free-id=?) (set! G487e@G2d60@bound-id=? G2d60@bound-id=?) (set! G487d@G2d5e@same-marks? G2d5e@same-marks?) (set! G487c@G2d5c@id->sym G2d5c@id->sym) (set! G487b@G2d5a@id? G2d5a@id?) (set! G487a@G2d58@syntax->list G2d58@syntax->list) (set! G4879@G2d56@syntax-cdr G2d56@syntax-cdr) (set! G4878@G2d54@syntax-car G2d54@syntax-car) (set! G4877@G2d52@syntax-list? G2d52@syntax-list?) (set! G4876@G2d50@syntax-null? G2d50@syntax-null?) (set! G4875@G2d4e@syntax-vector? G2d4e@syntax-vector?) (set! G4874@G2d4c@syntax-pair? G2d4c@syntax-pair?) (set! G4873@G2d4a@syntax-vector->list G2d4a@syntax-vector->list) (set! G4872@G2d48@syntax-kind? G2d48@syntax-kind?) (set! G4871@G2d46@add-subst G2d46@add-subst) (set! G4870@G2d44@add-mark G2d44@add-mark) (set! G486f@G2d42@mkstx G2d42@mkstx) (set! G486e@G2d40@join-wraps G2d40@join-wraps) (set! G486d@G2d3e@anti-mark? G2d3e@anti-mark?) (set! G486c@G2d3c@anti-mark G2d3c@anti-mark) (set! G486b@G2d3a@gen-mark G2d3a@gen-mark) (set! G486a@G2d38@datum->stx G2d38@datum->stx) (set! G4869@G2d36@rp G2d36@rp) (set! G4868@G2d34@set-stx-ae*! G2d34@set-stx-ae*!) (set! G4867@G2d32@set-stx-subst*! G2d32@set-stx-subst*!) (set! G4866@G2d30@set-stx-mark*! G2d30@set-stx-mark*!) (set! G4865@G2d2e@set-stx-expr! G2d2e@set-stx-expr!) (set! G4864@G2d2c@stx-ae* G2d2c@stx-ae*) (set! G4863@G2d2a@stx-subst* G2d2a@stx-subst*) (set! G4862@G2d28@stx-mark* G2d28@stx-mark*) (set! G4861@G2d26@stx-expr G2d26@stx-expr) (set! G4860@G2d24@make-stx G2d24@make-stx) (set! G485f@G2d22@stx? G2d22@stx?) (set! G485e@G2d1f@G2d17 G2d1f@G2d17) (set! G485d@G2d1d@G2d18 G2d1d@G2d18) (set! G485c@G2d1b@G2d16 G2d1b@G2d16) (set! G485b@G2d15@make-full-rib G2d15@make-full-rib) (set! G485a@G2d13@unseal-rib! G2d13@unseal-rib!) (set! G4859@G2d11@seal-rib! G2d11@seal-rib!) (set! G4858@G2d0f@make-rib-map G2d0f@make-rib-map) (set! G4857@G2d0d@extend-rib/nc! G2d0d@extend-rib/nc!) (set! G4856@G2d0b@extend-rib! G2d0b@extend-rib!) (set! G4855@G2d09@find-label G2d09@find-label) (set! G4854@G2d07@make-cache-rib G2d07@make-cache-rib) (set! G4853@G2d05@make-empty-rib G2d05@make-empty-rib) (set! G4852@G2d03@set-rib-cache! G2d03@set-rib-cache!) (set! G4851@G2d01@set-rib-sealed/freq! G2d01@set-rib-sealed/freq!) (set! G4850@G2cff@set-rib-label*! G2cff@set-rib-label*!) (set! G484f@G2cfd@set-rib-mark**! G2cfd@set-rib-mark**!) (set! G484e@G2cfb@set-rib-sym*! G2cfb@set-rib-sym*!) (set! G484d@G2cf9@rib-cache G2cf9@rib-cache) (set! G484c@G2cf7@rib-sealed/freq G2cf7@rib-sealed/freq) (set! G484b@G2cf5@rib-label* G2cf5@rib-label*) (set! G484a@G2cf3@rib-mark** G2cf3@rib-mark**) (set! G4849@G2cf1@rib-sym* G2cf1@rib-sym*) (set! G4848@G2cef@make-rib G2cef@make-rib) (set! G4847@G2ced@rib? G2ced@rib?) (set! G4846@G2cea@G2ce2 G2cea@G2ce2) (set! G4845@G2ce8@G2ce3 G2ce8@G2ce3) (set! G4844@G2ce6@G2ce1 G2ce6@G2ce1) (set! G4843@G2ce0@gen-define-label G2ce0@gen-define-label) (set! G4842@G2cde@gen-define-label+loc G2cde@gen-define-label+loc) (set! G4841@G2cdc@gen-top-level-label G2cdc@gen-top-level-label) (set! G4840@G2cda@gen-label G2cda@gen-label) (set! G483f@G2cd8@gen-global G2cd8@gen-global) (set! G483e@G2cd6@gen-lexical G2cd6@gen-lexical) (set! G483d@G2cd4@top-marked? G2cd4@top-marked?) (set! G483c@G2cd2@top-mark* G2cd2@top-mark*) (set! G483b@G2ccd@set-union G2ccd@set-union) (set! G483a@G2ccb@set-cons G2ccb@set-cons) (G2b67@G2a04@current-library-expander G3026@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4952@G494d G4954@G494f G4956@G494e G4959@&condition? G495b@make-&condition G495d@&condition-rtd G495f@&condition-rcd G49a9@G49a4 G49ab@G49a6 G49ad@G49a5 G49b0@p? G49b2@make-message-condition G49b4@G49a3 G49b6@message-condition? G49b8@condition-message G49ba@&message-rtd G49bc@&message-rcd G49c2@G49bd G49c4@G49bf G49c6@G49be G49c9@p? G49cb@make-warning G49cd@warning? G49cf@&warning-rtd G49d1@&warning-rcd G49d7@G49d2 G49d9@G49d4 G49db@G49d3 G49de@p? G49e0@make-serious-condition G49e2@serious-condition? G49e4@&serious-rtd G49e6@&serious-rcd G49ec@G49e7 G49ee@G49e9 G49f0@G49e8 G49f3@p? G49f5@make-error G49f7@error? G49f9@&error-rtd G49fb@&error-rcd G4a01@G49fc G4a03@G49fe G4a05@G49fd G4a08@p? G4a0a@make-violation G4a0c@violation? G4a0e@&violation-rtd G4a10@&violation-rcd G4a16@G4a11 G4a18@G4a13 G4a1a@G4a12 G4a1d@p? G4a1f@make-assertion-violation G4a21@assertion-violation? G4a23@&assertion-rtd G4a25@&assertion-rcd G4a2c@G4a27 G4a2e@G4a29 G4a30@G4a28 G4a33@p? G4a35@make-irritants-condition G4a37@G4a26 G4a39@irritants-condition? G4a3b@condition-irritants G4a3d@&irritants-rtd G4a3f@&irritants-rcd G4a46@G4a41 G4a48@G4a43 G4a4a@G4a42 G4a4d@p? G4a4f@make-who-condition G4a51@G4a40 G4a53@who-condition? G4a55@condition-who G4a57@&who-rtd G4a59@&who-rcd G4a5f@G4a5a G4a61@G4a5c G4a63@G4a5b G4a66@p? G4a68@make-non-continuable-violation G4a6a@non-continuable-violation? G4a6c@&non-continuable-rtd G4a6e@&non-continuable-rcd G4a74@G4a6f G4a76@G4a71 G4a78@G4a70 G4a7b@p? G4a7d@make-implementation-restriction-violation G4a7f@implementation-restriction-violation? G4a81@&implementation-restriction-rtd G4a83@&implementation-restriction-rcd G4a89@G4a84 G4a8b@G4a86 G4a8d@G4a85 G4a90@p? G4a92@make-lexical-violation G4a94@lexical-violation? G4a96@&lexical-rtd G4a98@&lexical-rcd G4aa0@G4a9b G4aa2@G4a9d G4aa4@G4a9c G4aa7@p? G4aa9@make-syntax-violation G4aab@G4a99 G4aad@G4a9a G4aaf@syntax-violation? G4ab1@syntax-violation-form G4ab3@syntax-violation-subform G4ab5@&syntax-rtd G4ab7@&syntax-rcd G4abd@G4ab8 G4abf@G4aba G4ac1@G4ab9 G4ac4@p? G4ac6@make-undefined-violation G4ac8@undefined-violation? G4aca@&undefined-rtd G4acc@&undefined-rcd G4ad2@G4acd G4ad4@G4acf G4ad6@G4ace G4ad9@p? G4adb@make-i/o-error G4add@i/o-error? G4adf@&i/o-rtd G4ae1@&i/o-rcd G4ae7@G4ae2 G4ae9@G4ae4 G4aeb@G4ae3 G4aee@p? G4af0@make-i/o-read-error G4af2@i/o-read-error? G4af4@&i/o-read-rtd G4af6@&i/o-read-rcd G4afc@G4af7 G4afe@G4af9 G4b00@G4af8 G4b03@p? G4b05@make-i/o-write-error G4b07@i/o-write-error? G4b09@&i/o-write-rtd G4b0b@&i/o-write-rcd G4b12@G4b0d G4b14@G4b0f G4b16@G4b0e G4b19@p? G4b1b@make-i/o-invalid-position-error G4b1d@G4b0c G4b1f@i/o-invalid-position-error? G4b21@i/o-error-position G4b23@&i/o-invalid-position-rtd G4b25@&i/o-invalid-position-rcd G4b2c@G4b27 G4b2e@G4b29 G4b30@G4b28 G4b33@p? G4b35@make-i/o-filename-error G4b37@G4b26 G4b39@i/o-filename-error? G4b3b@i/o-error-filename G4b3d@&i/o-filename-rtd G4b3f@&i/o-filename-rcd G4b45@G4b40 G4b47@G4b42 G4b49@G4b41 G4b4c@p? G4b4e@make-i/o-file-protection-error G4b50@i/o-file-protection-error? G4b52@&i/o-file-protection-rtd G4b54@&i/o-file-protection-rcd G4b5a@G4b55 G4b5c@G4b57 G4b5e@G4b56 G4b61@p? G4b63@make-i/o-file-is-read-only-error G4b65@i/o-file-is-read-only-error? G4b67@&i/o-file-is-read-only-rtd G4b69@&i/o-file-is-read-only-rcd G4b6f@G4b6a G4b71@G4b6c G4b73@G4b6b G4b76@p? G4b78@make-i/o-file-already-exists-error G4b7a@i/o-file-already-exists-error? G4b7c@&i/o-file-already-exists-rtd G4b7e@&i/o-file-already-exists-rcd G4b84@G4b7f G4b86@G4b81 G4b88@G4b80 G4b8b@p? G4b8d@make-i/o-file-does-not-exist-error G4b8f@i/o-file-does-not-exist-error? G4b91@&i/o-file-does-not-exist-rtd G4b93@&i/o-file-does-not-exist-rcd G4b9a@G4b95 G4b9c@G4b97 G4b9e@G4b96 G4ba1@p? G4ba3@make-i/o-port-error G4ba5@G4b94 G4ba7@i/o-port-error? G4ba9@i/o-error-port G4bab@&i/o-port-rtd G4bad@&i/o-port-rcd G4bb3@G4bae G4bb5@G4bb0 G4bb7@G4baf G4bba@p? G4bbc@make-i/o-decoding-error G4bbe@i/o-decoding-error? G4bc0@&i/o-decoding-rtd G4bc2@&i/o-decoding-rcd G4bc9@G4bc4 G4bcb@G4bc6 G4bcd@G4bc5 G4bd0@p? G4bd2@make-i/o-encoding-error G4bd4@G4bc3 G4bd6@i/o-encoding-error? G4bd8@i/o-encoding-error-char G4bda@&i/o-encoding-rtd G4bdc@&i/o-encoding-rcd G4be2@G4bdd G4be4@G4bdf G4be6@G4bde G4be9@p? G4beb@make-no-infinities-violation G4bed@no-infinities-violation? G4bef@&no-infinities-rtd G4bf1@&no-infinities-rcd G4bf7@G4bf2 G4bf9@G4bf4 G4bfb@G4bf3 G4bfe@p? G4c00@make-no-nans-violation G4c02@no-nans-violation? G4c04@&no-nans-rtd G4c06@&no-nans-rcd) (begin (set! G4952@G494d (make-record-type-descriptor '&condition '#f 'G4950 '#f '#f '#())) (set! G4954@G494f '#f) (set! G4956@G494e (make-record-constructor-descriptor G4952@G494d '#f G4954@G494f)) (set! G4959@&condition? (record-predicate G4952@G494d)) (set! G495b@make-&condition (record-constructor G4956@G494e)) (set! G495d@&condition-rtd G4952@G494d) (set! G495f@&condition-rcd G4956@G494e) (set! G49a9@G49a4 (make-record-type-descriptor '&message G4952@G494d 'G49a7 '#f '#f '#((immutable message)))) (set! G49ab@G49a6 '#f) (set! G49ad@G49a5 (make-record-constructor-descriptor G49a9@G49a4 G4956@G494e G49ab@G49a6)) (set! G49b0@p? (record-predicate G49a9@G49a4)) (set! G49b2@make-message-condition (record-constructor G49ad@G49a5)) (set! G49b4@G49a3 (record-accessor G49a9@G49a4 '0)) (set! G49b6@message-condition? (condition-predicate G49a9@G49a4)) (set! G49b8@condition-message (condition-accessor G49a9@G49a4 G49b4@G49a3)) (set! G49ba@&message-rtd G49a9@G49a4) (set! G49bc@&message-rcd G49ad@G49a5) (set! G49c2@G49bd (make-record-type-descriptor '&warning G4952@G494d 'G49c0 '#f '#f '#())) (set! G49c4@G49bf '#f) (set! G49c6@G49be (make-record-constructor-descriptor G49c2@G49bd G4956@G494e G49c4@G49bf)) (set! G49c9@p? (record-predicate G49c2@G49bd)) (set! G49cb@make-warning (record-constructor G49c6@G49be)) (set! G49cd@warning? (condition-predicate G49c2@G49bd)) (set! G49cf@&warning-rtd G49c2@G49bd) (set! G49d1@&warning-rcd G49c6@G49be) (set! G49d7@G49d2 (make-record-type-descriptor '&serious G4952@G494d 'G49d5 '#f '#f '#())) (set! G49d9@G49d4 '#f) (set! G49db@G49d3 (make-record-constructor-descriptor G49d7@G49d2 G4956@G494e G49d9@G49d4)) (set! G49de@p? (record-predicate G49d7@G49d2)) (set! G49e0@make-serious-condition (record-constructor G49db@G49d3)) (set! G49e2@serious-condition? (condition-predicate G49d7@G49d2)) (set! G49e4@&serious-rtd G49d7@G49d2) (set! G49e6@&serious-rcd G49db@G49d3) (set! G49ec@G49e7 (make-record-type-descriptor '&error G49d7@G49d2 'G49ea '#f '#f '#())) (set! G49ee@G49e9 '#f) (set! G49f0@G49e8 (make-record-constructor-descriptor G49ec@G49e7 G49db@G49d3 G49ee@G49e9)) (set! G49f3@p? (record-predicate G49ec@G49e7)) (set! G49f5@make-error (record-constructor G49f0@G49e8)) (set! G49f7@error? (condition-predicate G49ec@G49e7)) (set! G49f9@&error-rtd G49ec@G49e7) (set! G49fb@&error-rcd G49f0@G49e8) (set! G4a01@G49fc (make-record-type-descriptor '&violation G49d7@G49d2 'G49ff '#f '#f '#())) (set! G4a03@G49fe '#f) (set! G4a05@G49fd (make-record-constructor-descriptor G4a01@G49fc G49db@G49d3 G4a03@G49fe)) (set! G4a08@p? (record-predicate G4a01@G49fc)) (set! G4a0a@make-violation (record-constructor G4a05@G49fd)) (set! G4a0c@violation? (condition-predicate G4a01@G49fc)) (set! G4a0e@&violation-rtd G4a01@G49fc) (set! G4a10@&violation-rcd G4a05@G49fd) (set! G4a16@G4a11 (make-record-type-descriptor '&assertion G4a01@G49fc 'G4a14 '#f '#f '#())) (set! G4a18@G4a13 '#f) (set! G4a1a@G4a12 (make-record-constructor-descriptor G4a16@G4a11 G4a05@G49fd G4a18@G4a13)) (set! G4a1d@p? (record-predicate G4a16@G4a11)) (set! G4a1f@make-assertion-violation (record-constructor G4a1a@G4a12)) (set! G4a21@assertion-violation? (condition-predicate G4a16@G4a11)) (set! G4a23@&assertion-rtd G4a16@G4a11) (set! G4a25@&assertion-rcd G4a1a@G4a12) (set! G4a2c@G4a27 (make-record-type-descriptor '&irritants G4952@G494d 'G4a2a '#f '#f '#((immutable irritants)))) (set! G4a2e@G4a29 '#f) (set! G4a30@G4a28 (make-record-constructor-descriptor G4a2c@G4a27 G4956@G494e G4a2e@G4a29)) (set! G4a33@p? (record-predicate G4a2c@G4a27)) (set! G4a35@make-irritants-condition (record-constructor G4a30@G4a28)) (set! G4a37@G4a26 (record-accessor G4a2c@G4a27 '0)) (set! G4a39@irritants-condition? (condition-predicate G4a2c@G4a27)) (set! G4a3b@condition-irritants (condition-accessor G4a2c@G4a27 G4a37@G4a26)) (set! G4a3d@&irritants-rtd G4a2c@G4a27) (set! G4a3f@&irritants-rcd G4a30@G4a28) (set! G4a46@G4a41 (make-record-type-descriptor '&who G4952@G494d 'G4a44 '#f '#f '#((immutable who)))) (set! G4a48@G4a43 '#f) (set! G4a4a@G4a42 (make-record-constructor-descriptor G4a46@G4a41 G4956@G494e G4a48@G4a43)) (set! G4a4d@p? (record-predicate G4a46@G4a41)) (set! G4a4f@make-who-condition (record-constructor G4a4a@G4a42)) (set! G4a51@G4a40 (record-accessor G4a46@G4a41 '0)) (set! G4a53@who-condition? (condition-predicate G4a46@G4a41)) (set! G4a55@condition-who (condition-accessor G4a46@G4a41 G4a51@G4a40)) (set! G4a57@&who-rtd G4a46@G4a41) (set! G4a59@&who-rcd G4a4a@G4a42) (set! G4a5f@G4a5a (make-record-type-descriptor '&non-continuable G4a01@G49fc 'G4a5d '#f '#f '#())) (set! G4a61@G4a5c '#f) (set! G4a63@G4a5b (make-record-constructor-descriptor G4a5f@G4a5a G4a05@G49fd G4a61@G4a5c)) (set! G4a66@p? (record-predicate G4a5f@G4a5a)) (set! G4a68@make-non-continuable-violation (record-constructor G4a63@G4a5b)) (set! G4a6a@non-continuable-violation? (condition-predicate G4a5f@G4a5a)) (set! G4a6c@&non-continuable-rtd G4a5f@G4a5a) (set! G4a6e@&non-continuable-rcd G4a63@G4a5b) (set! G4a74@G4a6f (make-record-type-descriptor '&implementation-restriction G4a01@G49fc 'G4a72 '#f '#f '#())) (set! G4a76@G4a71 '#f) (set! G4a78@G4a70 (make-record-constructor-descriptor G4a74@G4a6f G4a05@G49fd G4a76@G4a71)) (set! G4a7b@p? (record-predicate G4a74@G4a6f)) (set! G4a7d@make-implementation-restriction-violation (record-constructor G4a78@G4a70)) (set! G4a7f@implementation-restriction-violation? (condition-predicate G4a74@G4a6f)) (set! G4a81@&implementation-restriction-rtd G4a74@G4a6f) (set! G4a83@&implementation-restriction-rcd G4a78@G4a70) (set! G4a89@G4a84 (make-record-type-descriptor '&lexical G4a01@G49fc 'G4a87 '#f '#f '#())) (set! G4a8b@G4a86 '#f) (set! G4a8d@G4a85 (make-record-constructor-descriptor G4a89@G4a84 G4a05@G49fd G4a8b@G4a86)) (set! G4a90@p? (record-predicate G4a89@G4a84)) (set! G4a92@make-lexical-violation (record-constructor G4a8d@G4a85)) (set! G4a94@lexical-violation? (condition-predicate G4a89@G4a84)) (set! G4a96@&lexical-rtd G4a89@G4a84) (set! G4a98@&lexical-rcd G4a8d@G4a85) (set! G4aa0@G4a9b (make-record-type-descriptor '&syntax G4a01@G49fc 'G4a9e '#f '#f '#((immutable form) (immutable subform)))) (set! G4aa2@G4a9d '#f) (set! G4aa4@G4a9c (make-record-constructor-descriptor G4aa0@G4a9b G4a05@G49fd G4aa2@G4a9d)) (set! G4aa7@p? (record-predicate G4aa0@G4a9b)) (set! G4aa9@make-syntax-violation (record-constructor G4aa4@G4a9c)) (set! G4aab@G4a99 (record-accessor G4aa0@G4a9b '0)) (set! G4aad@G4a9a (record-accessor G4aa0@G4a9b '1)) (set! G4aaf@syntax-violation? (condition-predicate G4aa0@G4a9b)) (set! G4ab1@syntax-violation-form (condition-accessor G4aa0@G4a9b G4aab@G4a99)) (set! G4ab3@syntax-violation-subform (condition-accessor G4aa0@G4a9b G4aad@G4a9a)) (set! G4ab5@&syntax-rtd G4aa0@G4a9b) (set! G4ab7@&syntax-rcd G4aa4@G4a9c) (set! G4abd@G4ab8 (make-record-type-descriptor '&undefined G4a01@G49fc 'G4abb '#f '#f '#())) (set! G4abf@G4aba '#f) (set! G4ac1@G4ab9 (make-record-constructor-descriptor G4abd@G4ab8 G4a05@G49fd G4abf@G4aba)) (set! G4ac4@p? (record-predicate G4abd@G4ab8)) (set! G4ac6@make-undefined-violation (record-constructor G4ac1@G4ab9)) (set! G4ac8@undefined-violation? (condition-predicate G4abd@G4ab8)) (set! G4aca@&undefined-rtd G4abd@G4ab8) (set! G4acc@&undefined-rcd G4ac1@G4ab9) (set! G4ad2@G4acd (make-record-type-descriptor '&i/o G49ec@G49e7 'G4ad0 '#f '#f '#())) (set! G4ad4@G4acf '#f) (set! G4ad6@G4ace (make-record-constructor-descriptor G4ad2@G4acd G49f0@G49e8 G4ad4@G4acf)) (set! G4ad9@p? (record-predicate G4ad2@G4acd)) (set! G4adb@make-i/o-error (record-constructor G4ad6@G4ace)) (set! G4add@i/o-error? (condition-predicate G4ad2@G4acd)) (set! G4adf@&i/o-rtd G4ad2@G4acd) (set! G4ae1@&i/o-rcd G4ad6@G4ace) (set! G4ae7@G4ae2 (make-record-type-descriptor '&i/o-read G4ad2@G4acd 'G4ae5 '#f '#f '#())) (set! G4ae9@G4ae4 '#f) (set! G4aeb@G4ae3 (make-record-constructor-descriptor G4ae7@G4ae2 G4ad6@G4ace G4ae9@G4ae4)) (set! G4aee@p? (record-predicate G4ae7@G4ae2)) (set! G4af0@make-i/o-read-error (record-constructor G4aeb@G4ae3)) (set! G4af2@i/o-read-error? (condition-predicate G4ae7@G4ae2)) (set! G4af4@&i/o-read-rtd G4ae7@G4ae2) (set! G4af6@&i/o-read-rcd G4aeb@G4ae3) (set! G4afc@G4af7 (make-record-type-descriptor '&i/o-write G4ad2@G4acd 'G4afa '#f '#f '#())) (set! G4afe@G4af9 '#f) (set! G4b00@G4af8 (make-record-constructor-descriptor G4afc@G4af7 G4ad6@G4ace G4afe@G4af9)) (set! G4b03@p? (record-predicate G4afc@G4af7)) (set! G4b05@make-i/o-write-error (record-constructor G4b00@G4af8)) (set! G4b07@i/o-write-error? (condition-predicate G4afc@G4af7)) (set! G4b09@&i/o-write-rtd G4afc@G4af7) (set! G4b0b@&i/o-write-rcd G4b00@G4af8) (set! G4b12@G4b0d (make-record-type-descriptor '&i/o-invalid-position G4ad2@G4acd 'G4b10 '#f '#f '#((immutable position)))) (set! G4b14@G4b0f '#f) (set! G4b16@G4b0e (make-record-constructor-descriptor G4b12@G4b0d G4ad6@G4ace G4b14@G4b0f)) (set! G4b19@p? (record-predicate G4b12@G4b0d)) (set! G4b1b@make-i/o-invalid-position-error (record-constructor G4b16@G4b0e)) (set! G4b1d@G4b0c (record-accessor G4b12@G4b0d '0)) (set! G4b1f@i/o-invalid-position-error? (condition-predicate G4b12@G4b0d)) (set! G4b21@i/o-error-position (condition-accessor G4b12@G4b0d G4b1d@G4b0c)) (set! G4b23@&i/o-invalid-position-rtd G4b12@G4b0d) (set! G4b25@&i/o-invalid-position-rcd G4b16@G4b0e) (set! G4b2c@G4b27 (make-record-type-descriptor '&i/o-filename G4ad2@G4acd 'G4b2a '#f '#f '#((immutable filename)))) (set! G4b2e@G4b29 '#f) (set! G4b30@G4b28 (make-record-constructor-descriptor G4b2c@G4b27 G4ad6@G4ace G4b2e@G4b29)) (set! G4b33@p? (record-predicate G4b2c@G4b27)) (set! G4b35@make-i/o-filename-error (record-constructor G4b30@G4b28)) (set! G4b37@G4b26 (record-accessor G4b2c@G4b27 '0)) (set! G4b39@i/o-filename-error? (condition-predicate G4b2c@G4b27)) (set! G4b3b@i/o-error-filename (condition-accessor G4b2c@G4b27 G4b37@G4b26)) (set! G4b3d@&i/o-filename-rtd G4b2c@G4b27) (set! G4b3f@&i/o-filename-rcd G4b30@G4b28) (set! G4b45@G4b40 (make-record-type-descriptor '&i/o-file-protection G4b2c@G4b27 'G4b43 '#f '#f '#())) (set! G4b47@G4b42 '#f) (set! G4b49@G4b41 (make-record-constructor-descriptor G4b45@G4b40 G4b30@G4b28 G4b47@G4b42)) (set! G4b4c@p? (record-predicate G4b45@G4b40)) (set! G4b4e@make-i/o-file-protection-error (record-constructor G4b49@G4b41)) (set! G4b50@i/o-file-protection-error? (condition-predicate G4b45@G4b40)) (set! G4b52@&i/o-file-protection-rtd G4b45@G4b40) (set! G4b54@&i/o-file-protection-rcd G4b49@G4b41) (set! G4b5a@G4b55 (make-record-type-descriptor '&i/o-file-is-read-only G4b45@G4b40 'G4b58 '#f '#f '#())) (set! G4b5c@G4b57 '#f) (set! G4b5e@G4b56 (make-record-constructor-descriptor G4b5a@G4b55 G4b49@G4b41 G4b5c@G4b57)) (set! G4b61@p? (record-predicate G4b5a@G4b55)) (set! G4b63@make-i/o-file-is-read-only-error (record-constructor G4b5e@G4b56)) (set! G4b65@i/o-file-is-read-only-error? (condition-predicate G4b5a@G4b55)) (set! G4b67@&i/o-file-is-read-only-rtd G4b5a@G4b55) (set! G4b69@&i/o-file-is-read-only-rcd G4b5e@G4b56) (set! G4b6f@G4b6a (make-record-type-descriptor '&i/o-file-already-exists G4b2c@G4b27 'G4b6d '#f '#f '#())) (set! G4b71@G4b6c '#f) (set! G4b73@G4b6b (make-record-constructor-descriptor G4b6f@G4b6a G4b30@G4b28 G4b71@G4b6c)) (set! G4b76@p? (record-predicate G4b6f@G4b6a)) (set! G4b78@make-i/o-file-already-exists-error (record-constructor G4b73@G4b6b)) (set! G4b7a@i/o-file-already-exists-error? (condition-predicate G4b6f@G4b6a)) (set! G4b7c@&i/o-file-already-exists-rtd G4b6f@G4b6a) (set! G4b7e@&i/o-file-already-exists-rcd G4b73@G4b6b) (set! G4b84@G4b7f (make-record-type-descriptor '&i/o-file-does-not-exist G4b2c@G4b27 'G4b82 '#f '#f '#())) (set! G4b86@G4b81 '#f) (set! G4b88@G4b80 (make-record-constructor-descriptor G4b84@G4b7f G4b30@G4b28 G4b86@G4b81)) (set! G4b8b@p? (record-predicate G4b84@G4b7f)) (set! G4b8d@make-i/o-file-does-not-exist-error (record-constructor G4b88@G4b80)) (set! G4b8f@i/o-file-does-not-exist-error? (condition-predicate G4b84@G4b7f)) (set! G4b91@&i/o-file-does-not-exist-rtd G4b84@G4b7f) (set! G4b93@&i/o-file-does-not-exist-rcd G4b88@G4b80) (set! G4b9a@G4b95 (make-record-type-descriptor '&i/o-port G4ad2@G4acd 'G4b98 '#f '#f '#((immutable port)))) (set! G4b9c@G4b97 '#f) (set! G4b9e@G4b96 (make-record-constructor-descriptor G4b9a@G4b95 G4ad6@G4ace G4b9c@G4b97)) (set! G4ba1@p? (record-predicate G4b9a@G4b95)) (set! G4ba3@make-i/o-port-error (record-constructor G4b9e@G4b96)) (set! G4ba5@G4b94 (record-accessor G4b9a@G4b95 '0)) (set! G4ba7@i/o-port-error? (condition-predicate G4b9a@G4b95)) (set! G4ba9@i/o-error-port (condition-accessor G4b9a@G4b95 G4ba5@G4b94)) (set! G4bab@&i/o-port-rtd G4b9a@G4b95) (set! G4bad@&i/o-port-rcd G4b9e@G4b96) (set! G4bb3@G4bae (make-record-type-descriptor '&i/o-decoding G4b9a@G4b95 'G4bb1 '#f '#f '#())) (set! G4bb5@G4bb0 '#f) (set! G4bb7@G4baf (make-record-constructor-descriptor G4bb3@G4bae G4b9e@G4b96 G4bb5@G4bb0)) (set! G4bba@p? (record-predicate G4bb3@G4bae)) (set! G4bbc@make-i/o-decoding-error (record-constructor G4bb7@G4baf)) (set! G4bbe@i/o-decoding-error? (condition-predicate G4bb3@G4bae)) (set! G4bc0@&i/o-decoding-rtd G4bb3@G4bae) (set! G4bc2@&i/o-decoding-rcd G4bb7@G4baf) (set! G4bc9@G4bc4 (make-record-type-descriptor '&i/o-encoding G4b9a@G4b95 'G4bc7 '#f '#f '#((immutable char)))) (set! G4bcb@G4bc6 '#f) (set! G4bcd@G4bc5 (make-record-constructor-descriptor G4bc9@G4bc4 G4b9e@G4b96 G4bcb@G4bc6)) (set! G4bd0@p? (record-predicate G4bc9@G4bc4)) (set! G4bd2@make-i/o-encoding-error (record-constructor G4bcd@G4bc5)) (set! G4bd4@G4bc3 (record-accessor G4bc9@G4bc4 '0)) (set! G4bd6@i/o-encoding-error? (condition-predicate G4bc9@G4bc4)) (set! G4bd8@i/o-encoding-error-char (condition-accessor G4bc9@G4bc4 G4bd4@G4bc3)) (set! G4bda@&i/o-encoding-rtd G4bc9@G4bc4) (set! G4bdc@&i/o-encoding-rcd G4bcd@G4bc5) (set! G4be2@G4bdd (make-record-type-descriptor '&no-infinities G4a74@G4a6f 'G4be0 '#f '#f '#())) (set! G4be4@G4bdf '#f) (set! G4be6@G4bde (make-record-constructor-descriptor G4be2@G4bdd G4a78@G4a70 G4be4@G4bdf)) (set! G4be9@p? (record-predicate G4be2@G4bdd)) (set! G4beb@make-no-infinities-violation (record-constructor G4be6@G4bde)) (set! G4bed@no-infinities-violation? (condition-predicate G4be2@G4bdd)) (set! G4bef@&no-infinities-rtd G4be2@G4bdd) (set! G4bf1@&no-infinities-rcd G4be6@G4bde) (set! G4bf7@G4bf2 (make-record-type-descriptor '&no-nans G4a74@G4a6f 'G4bf5 '#f '#f '#())) (set! G4bf9@G4bf4 '#f) (set! G4bfb@G4bf3 (make-record-constructor-descriptor G4bf7@G4bf2 G4a78@G4a70 G4bf9@G4bf4)) (set! G4bfe@p? (record-predicate G4bf7@G4bf2)) (set! G4c00@make-no-nans-violation (record-constructor G4bfb@G4bf3)) (set! G4c02@no-nans-violation? (condition-predicate G4bf7@G4bf2)) (set! G4c04@&no-nans-rtd G4bf7@G4bf2) (set! G4c06@&no-nans-rcd G4bfb@G4bf3) (begin (set! G4cf7@G4c06@&no-nans-rcd G4c06@&no-nans-rcd) (set! G4cf6@G4c04@&no-nans-rtd G4c04@&no-nans-rtd) (set! G4cf5@G4c02@no-nans-violation? G4c02@no-nans-violation?) (set! G4cf4@G4c00@make-no-nans-violation G4c00@make-no-nans-violation) (set! G4cf3@G4bfe@p? G4bfe@p?) (set! G4cf2@G4bfb@G4bf3 G4bfb@G4bf3) (set! G4cf1@G4bf9@G4bf4 G4bf9@G4bf4) (set! G4cf0@G4bf7@G4bf2 G4bf7@G4bf2) (set! G4cef@G4bf1@&no-infinities-rcd G4bf1@&no-infinities-rcd) (set! G4cee@G4bef@&no-infinities-rtd G4bef@&no-infinities-rtd) (set! G4ced@G4bed@no-infinities-violation? G4bed@no-infinities-violation?) (set! G4cec@G4beb@make-no-infinities-violation G4beb@make-no-infinities-violation) (set! G4ceb@G4be9@p? G4be9@p?) (set! G4cea@G4be6@G4bde G4be6@G4bde) (set! G4ce9@G4be4@G4bdf G4be4@G4bdf) (set! G4ce8@G4be2@G4bdd G4be2@G4bdd) (set! G4ce7@G4bdc@&i/o-encoding-rcd G4bdc@&i/o-encoding-rcd) (set! G4ce6@G4bda@&i/o-encoding-rtd G4bda@&i/o-encoding-rtd) (set! G4ce5@G4bd8@i/o-encoding-error-char G4bd8@i/o-encoding-error-char) (set! G4ce4@G4bd6@i/o-encoding-error? G4bd6@i/o-encoding-error?) (set! G4ce3@G4bd4@G4bc3 G4bd4@G4bc3) (set! G4ce2@G4bd2@make-i/o-encoding-error G4bd2@make-i/o-encoding-error) (set! G4ce1@G4bd0@p? G4bd0@p?) (set! G4ce0@G4bcd@G4bc5 G4bcd@G4bc5) (set! G4cdf@G4bcb@G4bc6 G4bcb@G4bc6) (set! G4cde@G4bc9@G4bc4 G4bc9@G4bc4) (set! G4cdd@G4bc2@&i/o-decoding-rcd G4bc2@&i/o-decoding-rcd) (set! G4cdc@G4bc0@&i/o-decoding-rtd G4bc0@&i/o-decoding-rtd) (set! G4cdb@G4bbe@i/o-decoding-error? G4bbe@i/o-decoding-error?) (set! G4cda@G4bbc@make-i/o-decoding-error G4bbc@make-i/o-decoding-error) (set! G4cd9@G4bba@p? G4bba@p?) (set! G4cd8@G4bb7@G4baf G4bb7@G4baf) (set! G4cd7@G4bb5@G4bb0 G4bb5@G4bb0) (set! G4cd6@G4bb3@G4bae G4bb3@G4bae) (set! G4cd5@G4bad@&i/o-port-rcd G4bad@&i/o-port-rcd) (set! G4cd4@G4bab@&i/o-port-rtd G4bab@&i/o-port-rtd) (set! G4cd3@G4ba9@i/o-error-port G4ba9@i/o-error-port) (set! G4cd2@G4ba7@i/o-port-error? G4ba7@i/o-port-error?) (set! G4cd1@G4ba5@G4b94 G4ba5@G4b94) (set! G4cd0@G4ba3@make-i/o-port-error G4ba3@make-i/o-port-error) (set! G4ccf@G4ba1@p? G4ba1@p?) (set! G4cce@G4b9e@G4b96 G4b9e@G4b96) (set! G4ccd@G4b9c@G4b97 G4b9c@G4b97) (set! G4ccc@G4b9a@G4b95 G4b9a@G4b95) (set! G4ccb@G4b93@&i/o-file-does-not-exist-rcd G4b93@&i/o-file-does-not-exist-rcd) (set! G4cca@G4b91@&i/o-file-does-not-exist-rtd G4b91@&i/o-file-does-not-exist-rtd) (set! G4cc9@G4b8f@i/o-file-does-not-exist-error? G4b8f@i/o-file-does-not-exist-error?) (set! G4cc8@G4b8d@make-i/o-file-does-not-exist-error G4b8d@make-i/o-file-does-not-exist-error) (set! G4cc7@G4b8b@p? G4b8b@p?) (set! G4cc6@G4b88@G4b80 G4b88@G4b80) (set! G4cc5@G4b86@G4b81 G4b86@G4b81) (set! G4cc4@G4b84@G4b7f G4b84@G4b7f) (set! G4cc3@G4b7e@&i/o-file-already-exists-rcd G4b7e@&i/o-file-already-exists-rcd) (set! G4cc2@G4b7c@&i/o-file-already-exists-rtd G4b7c@&i/o-file-already-exists-rtd) (set! G4cc1@G4b7a@i/o-file-already-exists-error? G4b7a@i/o-file-already-exists-error?) (set! G4cc0@G4b78@make-i/o-file-already-exists-error G4b78@make-i/o-file-already-exists-error) (set! G4cbf@G4b76@p? G4b76@p?) (set! G4cbe@G4b73@G4b6b G4b73@G4b6b) (set! G4cbd@G4b71@G4b6c G4b71@G4b6c) (set! G4cbc@G4b6f@G4b6a G4b6f@G4b6a) (set! G4cbb@G4b69@&i/o-file-is-read-only-rcd G4b69@&i/o-file-is-read-only-rcd) (set! G4cba@G4b67@&i/o-file-is-read-only-rtd G4b67@&i/o-file-is-read-only-rtd) (set! G4cb9@G4b65@i/o-file-is-read-only-error? G4b65@i/o-file-is-read-only-error?) (set! G4cb8@G4b63@make-i/o-file-is-read-only-error G4b63@make-i/o-file-is-read-only-error) (set! G4cb7@G4b61@p? G4b61@p?) (set! G4cb6@G4b5e@G4b56 G4b5e@G4b56) (set! G4cb5@G4b5c@G4b57 G4b5c@G4b57) (set! G4cb4@G4b5a@G4b55 G4b5a@G4b55) (set! G4cb3@G4b54@&i/o-file-protection-rcd G4b54@&i/o-file-protection-rcd) (set! G4cb2@G4b52@&i/o-file-protection-rtd G4b52@&i/o-file-protection-rtd) (set! G4cb1@G4b50@i/o-file-protection-error? G4b50@i/o-file-protection-error?) (set! G4cb0@G4b4e@make-i/o-file-protection-error G4b4e@make-i/o-file-protection-error) (set! G4caf@G4b4c@p? G4b4c@p?) (set! G4cae@G4b49@G4b41 G4b49@G4b41) (set! G4cad@G4b47@G4b42 G4b47@G4b42) (set! G4cac@G4b45@G4b40 G4b45@G4b40) (set! G4cab@G4b3f@&i/o-filename-rcd G4b3f@&i/o-filename-rcd) (set! G4caa@G4b3d@&i/o-filename-rtd G4b3d@&i/o-filename-rtd) (set! G4ca9@G4b3b@i/o-error-filename G4b3b@i/o-error-filename) (set! G4ca8@G4b39@i/o-filename-error? G4b39@i/o-filename-error?) (set! G4ca7@G4b37@G4b26 G4b37@G4b26) (set! G4ca6@G4b35@make-i/o-filename-error G4b35@make-i/o-filename-error) (set! G4ca5@G4b33@p? G4b33@p?) (set! G4ca4@G4b30@G4b28 G4b30@G4b28) (set! G4ca3@G4b2e@G4b29 G4b2e@G4b29) (set! G4ca2@G4b2c@G4b27 G4b2c@G4b27) (set! G4ca1@G4b25@&i/o-invalid-position-rcd G4b25@&i/o-invalid-position-rcd) (set! G4ca0@G4b23@&i/o-invalid-position-rtd G4b23@&i/o-invalid-position-rtd) (set! G4c9f@G4b21@i/o-error-position G4b21@i/o-error-position) (set! G4c9e@G4b1f@i/o-invalid-position-error? G4b1f@i/o-invalid-position-error?) (set! G4c9d@G4b1d@G4b0c G4b1d@G4b0c) (set! G4c9c@G4b1b@make-i/o-invalid-position-error G4b1b@make-i/o-invalid-position-error) (set! G4c9b@G4b19@p? G4b19@p?) (set! G4c9a@G4b16@G4b0e G4b16@G4b0e) (set! G4c99@G4b14@G4b0f G4b14@G4b0f) (set! G4c98@G4b12@G4b0d G4b12@G4b0d) (set! G4c97@G4b0b@&i/o-write-rcd G4b0b@&i/o-write-rcd) (set! G4c96@G4b09@&i/o-write-rtd G4b09@&i/o-write-rtd) (set! G4c95@G4b07@i/o-write-error? G4b07@i/o-write-error?) (set! G4c94@G4b05@make-i/o-write-error G4b05@make-i/o-write-error) (set! G4c93@G4b03@p? G4b03@p?) (set! G4c92@G4b00@G4af8 G4b00@G4af8) (set! G4c91@G4afe@G4af9 G4afe@G4af9) (set! G4c90@G4afc@G4af7 G4afc@G4af7) (set! G4c8f@G4af6@&i/o-read-rcd G4af6@&i/o-read-rcd) (set! G4c8e@G4af4@&i/o-read-rtd G4af4@&i/o-read-rtd) (set! G4c8d@G4af2@i/o-read-error? G4af2@i/o-read-error?) (set! G4c8c@G4af0@make-i/o-read-error G4af0@make-i/o-read-error) (set! G4c8b@G4aee@p? G4aee@p?) (set! G4c8a@G4aeb@G4ae3 G4aeb@G4ae3) (set! G4c89@G4ae9@G4ae4 G4ae9@G4ae4) (set! G4c88@G4ae7@G4ae2 G4ae7@G4ae2) (set! G4c87@G4ae1@&i/o-rcd G4ae1@&i/o-rcd) (set! G4c86@G4adf@&i/o-rtd G4adf@&i/o-rtd) (set! G4c85@G4add@i/o-error? G4add@i/o-error?) (set! G4c84@G4adb@make-i/o-error G4adb@make-i/o-error) (set! G4c83@G4ad9@p? G4ad9@p?) (set! G4c82@G4ad6@G4ace G4ad6@G4ace) (set! G4c81@G4ad4@G4acf G4ad4@G4acf) (set! G4c80@G4ad2@G4acd G4ad2@G4acd) (set! G4c7f@G4acc@&undefined-rcd G4acc@&undefined-rcd) (set! G4c7e@G4aca@&undefined-rtd G4aca@&undefined-rtd) (set! G4c7d@G4ac8@undefined-violation? G4ac8@undefined-violation?) (set! G4c7c@G4ac6@make-undefined-violation G4ac6@make-undefined-violation) (set! G4c7b@G4ac4@p? G4ac4@p?) (set! G4c7a@G4ac1@G4ab9 G4ac1@G4ab9) (set! G4c79@G4abf@G4aba G4abf@G4aba) (set! G4c78@G4abd@G4ab8 G4abd@G4ab8) (set! G4c77@G4ab7@&syntax-rcd G4ab7@&syntax-rcd) (set! G4c76@G4ab5@&syntax-rtd G4ab5@&syntax-rtd) (set! G4c75@G4ab3@syntax-violation-subform G4ab3@syntax-violation-subform) (set! G4c74@G4ab1@syntax-violation-form G4ab1@syntax-violation-form) (set! G4c73@G4aaf@syntax-violation? G4aaf@syntax-violation?) (set! G4c72@G4aad@G4a9a G4aad@G4a9a) (set! G4c71@G4aab@G4a99 G4aab@G4a99) (set! G4c70@G4aa9@make-syntax-violation G4aa9@make-syntax-violation) (set! G4c6f@G4aa7@p? G4aa7@p?) (set! G4c6e@G4aa4@G4a9c G4aa4@G4a9c) (set! G4c6d@G4aa2@G4a9d G4aa2@G4a9d) (set! G4c6c@G4aa0@G4a9b G4aa0@G4a9b) (set! G4c6b@G4a98@&lexical-rcd G4a98@&lexical-rcd) (set! G4c6a@G4a96@&lexical-rtd G4a96@&lexical-rtd) (set! G4c69@G4a94@lexical-violation? G4a94@lexical-violation?) (set! G4c68@G4a92@make-lexical-violation G4a92@make-lexical-violation) (set! G4c67@G4a90@p? G4a90@p?) (set! G4c66@G4a8d@G4a85 G4a8d@G4a85) (set! G4c65@G4a8b@G4a86 G4a8b@G4a86) (set! G4c64@G4a89@G4a84 G4a89@G4a84) (set! G4c63@G4a83@&implementation-restriction-rcd G4a83@&implementation-restriction-rcd) (set! G4c62@G4a81@&implementation-restriction-rtd G4a81@&implementation-restriction-rtd) (set! G4c61@G4a7f@implementation-restriction-violation? G4a7f@implementation-restriction-violation?) (set! G4c60@G4a7d@make-implementation-restriction-violation G4a7d@make-implementation-restriction-violation) (set! G4c5f@G4a7b@p? G4a7b@p?) (set! G4c5e@G4a78@G4a70 G4a78@G4a70) (set! G4c5d@G4a76@G4a71 G4a76@G4a71) (set! G4c5c@G4a74@G4a6f G4a74@G4a6f) (set! G4c5b@G4a6e@&non-continuable-rcd G4a6e@&non-continuable-rcd) (set! G4c5a@G4a6c@&non-continuable-rtd G4a6c@&non-continuable-rtd) (set! G4c59@G4a6a@non-continuable-violation? G4a6a@non-continuable-violation?) (set! G4c58@G4a68@make-non-continuable-violation G4a68@make-non-continuable-violation) (set! G4c57@G4a66@p? G4a66@p?) (set! G4c56@G4a63@G4a5b G4a63@G4a5b) (set! G4c55@G4a61@G4a5c G4a61@G4a5c) (set! G4c54@G4a5f@G4a5a G4a5f@G4a5a) (set! G4c53@G4a59@&who-rcd G4a59@&who-rcd) (set! G4c52@G4a57@&who-rtd G4a57@&who-rtd) (set! G4c51@G4a55@condition-who G4a55@condition-who) (set! G4c50@G4a53@who-condition? G4a53@who-condition?) (set! G4c4f@G4a51@G4a40 G4a51@G4a40) (set! G4c4e@G4a4f@make-who-condition G4a4f@make-who-condition) (set! G4c4d@G4a4d@p? G4a4d@p?) (set! G4c4c@G4a4a@G4a42 G4a4a@G4a42) (set! G4c4b@G4a48@G4a43 G4a48@G4a43) (set! G4c4a@G4a46@G4a41 G4a46@G4a41) (set! G4c49@G4a3f@&irritants-rcd G4a3f@&irritants-rcd) (set! G4c48@G4a3d@&irritants-rtd G4a3d@&irritants-rtd) (set! G4c47@G4a3b@condition-irritants G4a3b@condition-irritants) (set! G4c46@G4a39@irritants-condition? G4a39@irritants-condition?) (set! G4c45@G4a37@G4a26 G4a37@G4a26) (set! G4c44@G4a35@make-irritants-condition G4a35@make-irritants-condition) (set! G4c43@G4a33@p? G4a33@p?) (set! G4c42@G4a30@G4a28 G4a30@G4a28) (set! G4c41@G4a2e@G4a29 G4a2e@G4a29) (set! G4c40@G4a2c@G4a27 G4a2c@G4a27) (set! G4c3f@G4a25@&assertion-rcd G4a25@&assertion-rcd) (set! G4c3e@G4a23@&assertion-rtd G4a23@&assertion-rtd) (set! G4c3d@G4a21@assertion-violation? G4a21@assertion-violation?) (set! G4c3c@G4a1f@make-assertion-violation G4a1f@make-assertion-violation) (set! G4c3b@G4a1d@p? G4a1d@p?) (set! G4c3a@G4a1a@G4a12 G4a1a@G4a12) (set! G4c39@G4a18@G4a13 G4a18@G4a13) (set! G4c38@G4a16@G4a11 G4a16@G4a11) (set! G4c37@G4a10@&violation-rcd G4a10@&violation-rcd) (set! G4c36@G4a0e@&violation-rtd G4a0e@&violation-rtd) (set! G4c35@G4a0c@violation? G4a0c@violation?) (set! G4c34@G4a0a@make-violation G4a0a@make-violation) (set! G4c33@G4a08@p? G4a08@p?) (set! G4c32@G4a05@G49fd G4a05@G49fd) (set! G4c31@G4a03@G49fe G4a03@G49fe) (set! G4c30@G4a01@G49fc G4a01@G49fc) (set! G4c2f@G49fb@&error-rcd G49fb@&error-rcd) (set! G4c2e@G49f9@&error-rtd G49f9@&error-rtd) (set! G4c2d@G49f7@error? G49f7@error?) (set! G4c2c@G49f5@make-error G49f5@make-error) (set! G4c2b@G49f3@p? G49f3@p?) (set! G4c2a@G49f0@G49e8 G49f0@G49e8) (set! G4c29@G49ee@G49e9 G49ee@G49e9) (set! G4c28@G49ec@G49e7 G49ec@G49e7) (set! G4c27@G49e6@&serious-rcd G49e6@&serious-rcd) (set! G4c26@G49e4@&serious-rtd G49e4@&serious-rtd) (set! G4c25@G49e2@serious-condition? G49e2@serious-condition?) (set! G4c24@G49e0@make-serious-condition G49e0@make-serious-condition) (set! G4c23@G49de@p? G49de@p?) (set! G4c22@G49db@G49d3 G49db@G49d3) (set! G4c21@G49d9@G49d4 G49d9@G49d4) (set! G4c20@G49d7@G49d2 G49d7@G49d2) (set! G4c1f@G49d1@&warning-rcd G49d1@&warning-rcd) (set! G4c1e@G49cf@&warning-rtd G49cf@&warning-rtd) (set! G4c1d@G49cd@warning? G49cd@warning?) (set! G4c1c@G49cb@make-warning G49cb@make-warning) (set! G4c1b@G49c9@p? G49c9@p?) (set! G4c1a@G49c6@G49be G49c6@G49be) (set! G4c19@G49c4@G49bf G49c4@G49bf) (set! G4c18@G49c2@G49bd G49c2@G49bd) (set! G4c17@G49bc@&message-rcd G49bc@&message-rcd) (set! G4c16@G49ba@&message-rtd G49ba@&message-rtd) (set! G4c15@G49b8@condition-message G49b8@condition-message) (set! G4c14@G49b6@message-condition? G49b6@message-condition?) (set! G4c13@G49b4@G49a3 G49b4@G49a3) (set! G4c12@G49b2@make-message-condition G49b2@make-message-condition) (set! G4c11@G49b0@p? G49b0@p?) (set! G4c10@G49ad@G49a5 G49ad@G49a5) (set! G4c0f@G49ab@G49a6 G49ab@G49a6) (set! G4c0e@G49a9@G49a4 G49a9@G49a4) (set! G4c0d@G495f@&condition-rcd G495f@&condition-rcd) (set! G4c0c@G495d@&condition-rtd G495d@&condition-rtd) (set! G4c0b@G495b@make-&condition G495b@make-&condition) (set! G4c0a@G4959@&condition? G4959@&condition?) (set! G4c09@G4956@G494e G4956@G494e) (set! G4c08@G4954@G494f G4954@G494f) (set! G4c07@G4952@G494d G4952@G494d)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2947@G28fc@current-primitive-locations (lambda (G50d7@x) ((lambda (G50d9@t) (if G50d9@t (cdr G50d9@t) '#f)) (assq G50d7@x '((&no-nans-rcd . G4cf7@G4c06@&no-nans-rcd) (&no-nans-rtd . G4cf6@G4c04@&no-nans-rtd) (&no-infinities-rcd . G4cef@G4bf1@&no-infinities-rcd) (&no-infinities-rtd . G4cee@G4bef@&no-infinities-rtd) (&i/o-encoding-rcd . G4ce7@G4bdc@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4ce6@G4bda@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4cdd@G4bc2@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4cdc@G4bc0@&i/o-decoding-rtd) (&i/o-port-rcd . G4cd5@G4bad@&i/o-port-rcd) (&i/o-port-rtd . G4cd4@G4bab@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4ccb@G4b93@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cca@G4b91@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cc3@G4b7e@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cc2@G4b7c@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cbb@G4b69@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cba@G4b67@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cb3@G4b54@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cb2@G4b52@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4cab@G4b3f@&i/o-filename-rcd) (&i/o-filename-rtd . G4caa@G4b3d@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4ca1@G4b25@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4ca0@G4b23@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c97@G4b0b@&i/o-write-rcd) (&i/o-write-rtd . G4c96@G4b09@&i/o-write-rtd) (&i/o-read-rcd . G4c8f@G4af6@&i/o-read-rcd) (&i/o-read-rtd . G4c8e@G4af4@&i/o-read-rtd) (&i/o-rcd . G4c87@G4ae1@&i/o-rcd) (&i/o-rtd . G4c86@G4adf@&i/o-rtd) (&undefined-rcd . G4c7f@G4acc@&undefined-rcd) (&undefined-rtd . G4c7e@G4aca@&undefined-rtd) (&syntax-rcd . G4c77@G4ab7@&syntax-rcd) (&syntax-rtd . G4c76@G4ab5@&syntax-rtd) (&lexical-rcd . G4c6b@G4a98@&lexical-rcd) (&lexical-rtd . G4c6a@G4a96@&lexical-rtd) (&implementation-restriction-rcd . G4c63@G4a83@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c62@G4a81@&implementation-restriction-rtd) (&non-continuable-rcd . G4c5b@G4a6e@&non-continuable-rcd) (&non-continuable-rtd . G4c5a@G4a6c@&non-continuable-rtd) (&who-rcd . G4c53@G4a59@&who-rcd) (&who-rtd . G4c52@G4a57@&who-rtd) (&irritants-rcd . G4c49@G4a3f@&irritants-rcd) (&irritants-rtd . G4c48@G4a3d@&irritants-rtd) (&assertion-rcd . G4c3f@G4a25@&assertion-rcd) (&assertion-rtd . G4c3e@G4a23@&assertion-rtd) (&violation-rcd . G4c37@G4a10@&violation-rcd) (&violation-rtd . G4c36@G4a0e@&violation-rtd) (&error-rcd . G4c2f@G49fb@&error-rcd) (&error-rtd . G4c2e@G49f9@&error-rtd) (&serious-rcd . G4c27@G49e6@&serious-rcd) (&serious-rtd . G4c26@G49e4@&serious-rtd) (&warning-rcd . G4c1f@G49d1@&warning-rcd) (&warning-rtd . G4c1e@G49cf@&warning-rtd) (&message-rcd . G4c17@G49bc@&message-rcd) (&message-rtd . G4c16@G49ba@&message-rtd) (&condition-rcd . G4c0d@G495f@&condition-rcd) (&condition-rtd . G4c0c@G495d@&condition-rtd) (syntax-error . G493f@G3040@syntax-error) (syntax-dispatch . G48d3@G2f59@syntax-dispatch) (load . G4dc9@G4d0d@load) (interaction-environment . G4947@G3050@interaction-environment) (make-parameter . G28f6@G282c@make-parameter) (make-variable-transformer . G4891@G2d94@make-variable-transformer) (identifier? . G4942@G3046@identifier?) (generate-temporaries . G4938@G3032@generate-temporaries) (free-identifier=? . G4939@G3034@free-identifier=?) (syntax->datum . G4944@G304a@syntax->datum) (datum->syntax . G4943@G3048@datum->syntax) (bound-identifier=? . G493a@G3036@bound-identifier=?) (make-i/o-write-error . G4c94@G4b05@make-i/o-write-error) (make-i/o-read-error . G4c8c@G4af0@make-i/o-read-error) (make-i/o-port-error . G4cd0@G4ba3@make-i/o-port-error) (make-i/o-invalid-position-error . G4c9c@G4b1b@make-i/o-invalid-position-error) (make-i/o-filename-error . G4ca6@G4b35@make-i/o-filename-error) (make-i/o-file-protection-error . G4cb0@G4b4e@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cb8@G4b63@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cc8@G4b8d@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cc0@G4b78@make-i/o-file-already-exists-error) (make-i/o-error . G4c84@G4adb@make-i/o-error) (make-i/o-encoding-error . G4ce2@G4bd2@make-i/o-encoding-error) (make-i/o-decoding-error . G4cda@G4bbc@make-i/o-decoding-error) (i/o-write-error? . G4c95@G4b07@i/o-write-error?) (i/o-read-error? . G4c8d@G4af2@i/o-read-error?) (i/o-port-error? . G4cd2@G4ba7@i/o-port-error?) (i/o-invalid-position-error? . G4c9e@G4b1f@i/o-invalid-position-error?) (i/o-filename-error? . G4ca8@G4b39@i/o-filename-error?) (i/o-file-protection-error? . G4cb1@G4b50@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cb9@G4b65@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cc9@G4b8f@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cc1@G4b7a@i/o-file-already-exists-error?) (i/o-error? . G4c85@G4add@i/o-error?) (i/o-error-position . G4c9f@G4b21@i/o-error-position) (i/o-error-port . G4cd3@G4ba9@i/o-error-port) (i/o-error-filename . G4ca9@G4b3b@i/o-error-filename) (i/o-encoding-error? . G4ce4@G4bd6@i/o-encoding-error?) (i/o-encoding-error-char . G4ce5@G4bd8@i/o-encoding-error-char) (i/o-decoding-error? . G4cdb@G4bbe@i/o-decoding-error?) (scheme-report-environment . G492f@G3020@scheme-report-environment) (null-environment . G492e@G301e@null-environment) (command-line . G4dc6@G4d07@command-line) (eval . G4931@G3024@eval) (environment . G492d@G301c@environment) (who-condition? . G4c50@G4a53@who-condition?) (warning? . G4c1d@G49cd@warning?) (violation? . G4c35@G4a0c@violation?) (undefined-violation? . G4c7d@G4ac8@undefined-violation?) (syntax-violation? . G4c73@G4aaf@syntax-violation?) (syntax-violation-subform . G4c75@G4ab3@syntax-violation-subform) (syntax-violation-form . G4c74@G4ab1@syntax-violation-form) (syntax-violation . G4941@G3044@syntax-violation) (serious-condition? . G4c25@G49e2@serious-condition?) (non-continuable-violation? . G4c59@G4a6a@non-continuable-violation?) (message-condition? . G4c14@G49b6@message-condition?) (make-who-condition . G4c4e@G4a4f@make-who-condition) (make-warning . G4c1c@G49cb@make-warning) (make-violation . G4c34@G4a0a@make-violation) (make-undefined-violation . G4c7c@G4ac6@make-undefined-violation) (make-syntax-violation . G4c70@G4aa9@make-syntax-violation) (make-serious-condition . G4c24@G49e0@make-serious-condition) (make-non-continuable-violation . G4c58@G4a68@make-non-continuable-violation) (make-message-condition . G4c12@G49b2@make-message-condition) (make-lexical-violation . G4c68@G4a92@make-lexical-violation) (make-irritants-condition . G4c44@G4a35@make-irritants-condition) (make-implementation-restriction-violation . G4c60@G4a7d@make-implementation-restriction-violation) (make-error . G4c2c@G49f5@make-error) (make-assertion-violation . G4c3c@G4a1f@make-assertion-violation) (lexical-violation? . G4c69@G4a94@lexical-violation?) (irritants-condition? . G4c46@G4a39@irritants-condition?) (implementation-restriction-violation? . G4c61@G4a7f@implementation-restriction-violation?) (error? . G4c2d@G49f7@error?) (condition-who . G4c51@G4a55@condition-who) (condition-message . G4c15@G49b8@condition-message) (condition-irritants . G4c47@G4a3b@condition-irritants) (assertion-violation? . G4c3d@G4a21@assertion-violation?) (no-nans-violation? . G4cf5@G4c02@no-nans-violation?) (no-infinities-violation? . G4ced@G4bed@no-infinities-violation?) (make-no-nans-violation . G4cf4@G4c00@make-no-nans-violation) (make-no-infinities-violation . G4cec@G4beb@make-no-infinities-violation)))))) (G2b6f@G2a14@install-library 'G50b3 '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G5087) (format . G5082) (string-split . G5078) (call-process . G5072) (set-current-directory! . G506e) (expand-path . G506d) (current-directory . G506c) (%spawn . G506b) (%waitpid . G506a) (%ffi-supported? . G5069) (%ffi-pointer-ref . G5068) (%ffi-pointer->string . G5067) (%ffi-call->string-or-zero . G5066) (%ffi-call->double . G5065) (%ffi-call->void* . G5064) (%ffi-call->void . G5063) (%ffi-call->int . G5062) (%ffi-lookup . G5061) (%ffi-open . G5060) (%fork . G505f) (%pipe . G505e) (p . G505d) (string-upcase . G504f) (string-titlecase . G504e) (string-normalize-nfkd . G504d) (string-normalize-nfkc . G504c) (string-normalize-nfd . G504b) (string-normalize-nfc . G504a) (string-foldcase . G5049) (string-downcase . G5048) (string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-title-case? . G5040) (char-numeric? . G503f) (char-lower-case? . G503e) (char-general-category . G503d) (char-upcase . G503c) (char-titlecase . G503b) (char-foldcase . G503a) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033) (make-variable-transformer . G2d93) (identifier? . G3045) (generate-temporaries . G3031) (free-identifier=? . G3033) (syntax->datum . G3049) (datum->syntax . G3047) (bound-identifier=? . G3035) (record-type-descriptor? . G5032) (record-predicate . G5031) (record-mutator . G5030) (record-constructor . G502f) (record-accessor . G502e) (make-record-type-descriptor . G502d) (make-record-constructor-descriptor . G502c) (record? . G502b) (record-type-uid . G502a) (record-type-sealed? . G5029) (record-type-parent . G5028) (record-type-opaque? . G5027) (record-type-name . G5026) (record-type-generative? . G5025) (record-type-field-names . G5024) (record-rtd . G5023) (record-field-mutable? . G5022) (delete-file . G5021) (file-exists? . G5020) (vector-sort! . G501f) (vector-sort . G501e) (list-sort . G501d) (symbol-hash . G501c) (string-ci-hash . G501b) (string-hash . G501a) (equal-hash . G5019) (hashtable-equivalence-function . G5018) (make-hashtable . G5017) (hashtable-hash-function . G5016) (make-eqv-hashtable . G5015) (make-eq-hashtable . G5014) (hashtable? . G5013) (hashtable-update! . G5012) (hashtable-size . G5011) (hashtable-set! . G5010) (hashtable-ref . G500f) (hashtable-mutable? . G500e) (hashtable-keys . G500d) (hashtable-entries . G500c) (hashtable-delete! . G500b) (hashtable-copy . G500a) (hashtable-contains? . G5009) (hashtable-clear! . G5008) (call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (utf-8-codec . G4ff1) (utf-16-codec . G4ff0) (transcoder-error-handling-mode . G4fef) (transcoder-eol-style . G4fee) (transcoder-codec . G4fed) (transcoded-port . G4fec) (textual-port? . G4feb) (string->bytevector . G4fea) (standard-output-port . G4fe9) (standard-input-port . G4fe8) (standard-error-port . G4fe7) (set-port-position! . G4fe6) (put-u8 . G4fe5) (put-string . G4fe4) (put-datum . G4fe3) (put-char . G4fe2) (put-bytevector . G4fe1) (port? . G4fe0) (port-transcoder . G4fdf) (port-position . G4fde) (port-has-set-port-position!? . G4fdd) (port-has-port-position? . G4fdc) (port-eof? . G4fdb) (output-port-buffer-mode . G4fda) (open-string-output-port . G4fd9) (open-string-input-port . G4fd8) (open-file-output-port . G4fd7) (open-file-input/output-port . G4fd6) (open-file-input-port . G4fd5) (open-bytevector-output-port . G4fd4) (open-bytevector-input-port . G4fd3) (native-transcoder . G4fd2) (native-eol-style . G4fd1) (make-transcoder . G4fd0) (latin-1-codec . G4fcf) (make-i/o-write-error . G4b04) (make-i/o-read-error . G4aef) (make-i/o-port-error . G4ba2) (make-i/o-invalid-position-error . G4b1a) (make-i/o-filename-error . G4b34) (make-i/o-file-protection-error . G4b4d) (make-i/o-file-is-read-only-error . G4b62) (make-i/o-file-does-not-exist-error . G4b8c) (make-i/o-file-already-exists-error . G4b77) (make-i/o-error . G4ada) (make-i/o-encoding-error . G4bd1) (make-i/o-decoding-error . G4bbb) (make-custom-textual-output-port . G4fce) (make-custom-textual-input/output-port . G4fcd) (make-custom-textual-input-port . G4fcc) (make-custom-binary-output-port . G4fcb) (make-custom-binary-input/output-port . G4fca) (make-custom-binary-input-port . G4fc9) (make-bytevector . G4fc8) (lookahead-u8 . G4fc7) (lookahead-char . G4fc6) (i/o-write-error? . G4b06) (i/o-read-error? . G4af1) (i/o-port-error? . G4ba6) (i/o-invalid-position-error? . G4b1e) (i/o-filename-error? . G4b38) (i/o-file-protection-error? . G4b4f) (i/o-file-is-read-only-error? . G4b64) (i/o-file-does-not-exist-error? . G4b8e) (i/o-file-already-exists-error? . G4b79) (i/o-error? . G4adc) (i/o-error-position . G4b20) (i/o-error-port . G4ba8) (i/o-error-filename . G4b3a) (i/o-encoding-error? . G4bd5) (i/o-encoding-error-char . G4bd7) (i/o-decoding-error? . G4bbd) (get-u8 . G4fc5) (get-string-n! . G4fc4) (get-string-n . G4fc3) (get-string-all . G4fc2) (get-line . G4fc1) (get-datum . G4fc0) (get-char . G4fbf) (get-bytevector-some . G4fbe) (get-bytevector-n! . G4fbd) (get-bytevector-n . G4fbc) (get-bytevector-all . G4fbb) (flush-output-port . G4fba) (close-port . G4fb9) (exit . G4fb1) (command-line . G4d06) (string-fill! . G4fb0) (string-set! . G4faf) (set-cdr! . G4fae) (set-car! . G4fad) (remove . G4fac) (remv . G4fab) (remp . G4faa) (remq . G4fa9) (partition . G4fa8) (memv . G4fa7) (memq . G4fa6) (memp . G4fa5) (member . G4fa4) (exists . G4fa3) (for-all . G4fa2) (fold-right . G4fa1) (fold-left . G4fa0) (find . G4f9f) (filter . G4f9e) (cons* . G4f9d) (assv . G4f9c) (assq . G4f9b) (assp . G4f9a) (assoc . G4f99) (call-with-string-output-port . G4f98) (call-with-port . G4f97) (call-with-bytevector-output-port . G4f96) (bytevector->string . G4f95) (buffer-mode? . G4f94) (binary-port? . G4f93) (with-exception-handler . G4f92) (raise-continuable . G4f91) (raise . G4f90) (eval . G3023) (environment . G301b) (make-enumeration . G4f8f) (enum-set=? . G4f8e) (enum-set-universe . G4f8d) (enum-set-union . G4f8c) (enum-set-subset? . G4f8b) (enum-set-projection . G4f8a) (enum-set-member? . G4f89) (enum-set-intersection . G4f88) (enum-set-indexer . G4f87) (enum-set-difference . G4f86) (enum-set-constructor . G4f85) (enum-set-complement . G4f84) (enum-set->list . G4f83) (who-condition? . G4a52) (warning? . G49cc) (violation? . G4a0b) (undefined-violation? . G4ac7) (syntax-violation? . G4aae) (syntax-violation-subform . G4ab2) (syntax-violation-form . G4ab0) (syntax-violation . G3043) (simple-conditions . G4f82) (serious-condition? . G49e1) (non-continuable-violation? . G4a69) (message-condition? . G49b5) (make-who-condition . G4a4e) (make-warning . G49ca) (make-violation . G4a09) (make-undefined-violation . G4ac5) (make-syntax-violation . G4aa8) (make-serious-condition . G49df) (make-non-continuable-violation . G4a67) (make-message-condition . G49b1) (make-lexical-violation . G4a91) (make-irritants-condition . G4a34) (make-implementation-restriction-violation . G4a7c) (make-error . G49f4) (make-assertion-violation . G4a1e) (lexical-violation? . G4a93) (irritants-condition? . G4a38) (implementation-restriction-violation? . G4a7e) (error? . G49f6) (condition-who . G4a54) (condition-predicate . G4f81) (condition-message . G49b7) (condition-irritants . G4a3a) (condition-accessor . G4f80) (condition . G4f7f) (assertion-violation? . G4a20) (condition? . G4f7e) (utf32->string . G4f7d) (utf16->string . G4f7c) (utf8->string . G4f7b) (uint-list->bytevector . G4f7a) (u8-list->bytevector . G4f79) (string->utf8 . G4f78) (string->utf32 . G4f77) (string->utf16 . G4f76) (sint-list->bytevector . G4f75) (native-endianness . G4f74) (bytevector? . G4f73) (bytevector=? . G4f72) (bytevector-uint-set! . G4f71) (bytevector-uint-ref . G4f70) (bytevector-u8-set! . G4f6f) (bytevector-u8-ref . G4f6e) (bytevector-u64-set! . G4f6d) (bytevector-u64-ref . G4f6c) (bytevector-u64-native-set! . G4f6b) (bytevector-u64-native-ref . G4f6a) (bytevector-u32-set! . G4f69) (bytevector-u32-ref . G4f68) (bytevector-u32-native-set! . G4f67) (bytevector-u32-native-ref . G4f66) (bytevector-u16-set! . G4f65) (bytevector-u16-ref . G4f64) (bytevector-u16-native-set! . G4f63) (bytevector-u16-native-ref . G4f62) (bytevector-sint-set! . G4f61) (bytevector-sint-ref . G4f60) (bytevector-s8-set! . G4f5f) (bytevector-s8-ref . G4f5e) (bytevector-s64-set! . G4f5d) (bytevector-s64-ref . G4f5c) (bytevector-s64-native-set! . G4f5b) (bytevector-s64-native-ref . G4f5a) (bytevector-s32-set! . G4f59) (bytevector-s32-ref . G4f58) (bytevector-s32-native-set! . G4f57) (bytevector-s32-native-ref . G4f56) (bytevector-s16-set! . G4f55) (bytevector-s16-ref . G4f54) (bytevector-s16-native-set! . G4f53) (bytevector-s16-native-ref . G4f52) (bytevector-length . G4f51) (bytevector-ieee-single-ref . G4f50) (bytevector-ieee-single-set! . G4f4f) (bytevector-ieee-single-native-set! . G4f4e) (bytevector-ieee-single-native-ref . G4f4d) (bytevector-ieee-double-set! . G4f4c) (bytevector-ieee-double-ref . G4f4b) (bytevector-ieee-double-native-set! . G4f4a) (bytevector-ieee-double-native-ref . G4f49) (bytevector-fill! . G4f48) (bytevector-copy! . G4f47) (bytevector-copy . G4f46) (bytevector->uint-list . G4f45) (bytevector->u8-list . G4f44) (bytevector->sint-list . G4f43) (no-nans-violation? . G4c01) (no-infinities-violation? . G4bec) (make-no-nans-violation . G4bff) (make-no-infinities-violation . G4bea) (real->flonum . G4f42) (flzero? . G4f41) (fltruncate . G4f40) (fltan . G4f3f) (flsqrt . G4f3e) (flsin . G4f3d) (flround . G4f3c) (flpositive? . G4f3b) (flonum? . G4f3a) (flodd? . G4f39) (flnumerator . G4f38) (flnegative? . G4f37) (flnan? . G4f36) (flmod0 . G4f35) (flmod . G4f34) (flmin . G4f33) (flmax . G4f32) (fllog . G4f31) (flinteger? . G4f30) (flinfinite? . G4f2f) (flfloor . G4f2e) (flfinite? . G4f2d) (flexpt . G4f2c) (flexp . G4f2b) (fleven? . G4f2a) (fldiv0-and-mod0 . G4f29) (fldiv0 . G4f28) (fldiv-and-mod . G4f27) (fldiv . G4f26) (fldenominator . G4f25) (flcos . G4f24) (flceiling . G4f23) (flatan . G4f22) (flasin . G4f21) (flacos . G4f20) (flabs . G4f1f) (fl>? . G4f1e) (fl>=? . G4f1d) (fl=? . G4f1c) (fl<? . G4f1b) (fl<=? . G4f1a) (fl/ . G4f19) (fl- . G4f18) (fl+ . G4f17) (fl* . G4f16) (fixnum->flonum . G4f15) (fxzero? . G4f14) (fxxor . G4f13) (fxrotate-bit-field . G4f12) (fxreverse-bit-field . G4f11) (fxpositive? . G4f10) (fxodd? . G4f0f) (fxnot . G4f0e) (fxnegative? . G4f0d) (fxmod0 . G4f0c) (fxmod . G4f0b) (fxmin . G4f0a) (fxmax . G4f09) (fxlength . G4f08) (fxior . G4f07) (fxif . G4f06) (fxfirst-bit-set . G4f05) (fxeven? . G4f04) (fxdiv0-and-mod0 . G4f03) (fxdiv0 . G4f02) (fxdiv-and-mod . G4f01) (fxdiv . G4f00) (fxcopy-bit-field . G4eff) (fxcopy-bit . G4efe) (fxbit-set? . G4efd) (fxbit-field . G4efc) (fxbit-count . G4efb) (fxarithmetic-shift-right . G4efa) (fxarithmetic-shift-left . G4ef9) (fxarithmetic-shift . G4ef8) (fxand . G4ef7) (fx>? . G4ef6) (fx>=? . G4ef5) (fx=? . G4ef4) (fx<? . G4ef3) (fx<=? . G4ef2) (fx-/carry . G4ef1) (fx- . G4ef0) (fx+/carry . G4eef) (fx+ . G4eee) (fx*/carry . G4eed) (fx* . G4eec) (greatest-fixnum . G4eeb) (least-fixnum . G4eea) (fixnum-width . G4ee9) (fixnum? . G4ee8) (bitwise-rotate-bit-field . G4ee7) (bitwise-reverse-bit-field . G4ee6) (bitwise-length . G4ee5) (bitwise-if . G4ee4) (bitwise-first-bit-set . G4ee3) (bitwise-copy-bit-field . G4ee2) (bitwise-copy-bit . G4ee1) (bitwise-bit-set? . G4ee0) (bitwise-bit-field . G4edf) (bitwise-bit-count . G4ede) (bitwise-xor . G4edd) (bitwise-ior . G4edc) (bitwise-and . G4edb) (bitwise-not . G4eda) (bitwise-arithmetic-shift-right . G4ed9) (bitwise-arithmetic-shift-left . G4ed8) (bitwise-arithmetic-shift . G4ed7) (zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-map . G4ed2) (vector-length . G4ed1) (vector-for-each . G4ed0) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol=? . G4ec8) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-for-each . G4ebd) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-valued? . G4eb1) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (rational-valued? . G4ead) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (null? . G4ea5) (not . G4ea4) (negative? . G4ea3) (nan? . G4ea2) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer-valued? . G4e8f) (integer->char . G4e8e) (infinite? . G4e8d) (inexact? . G4e8c) (inexact . G4e8b) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (finite? . G4e86) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (exact-integer-sqrt . G4e82) (exact . G4e81) (even? . G4e80) (error . G4e7f) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (div0-and-mod0 . G4e7a) (mod0 . G4e79) (div0 . G4e78) (div-and-mod . G4e77) (mod . G4e76) (div . G4e75) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call/cc . G4e67) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (boolean=? . G4e46) (atan . G4e45) (assertion-violation . G4e44) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (library . G4e34) (&no-nans . G4e33) (&no-infinities . G4e32) (&i/o-encoding . G4e31) (&i/o-decoding . G4e30) (&i/o-port . G4e2f) (&i/o-file-does-not-exist . G4e2e) (&i/o-file-already-exists . G4e2d) (&i/o-file-is-read-only . G4e2c) (&i/o-file-protection . G4e2b) (&i/o-filename . G4e2a) (&i/o-invalid-position . G4e29) (&i/o-write . G4e28) (&i/o-read . G4e27) (&i/o . G4e26) (&undefined . G4e25) (&syntax . G4e24) (&lexical . G4e23) (&implementation-restriction . G4e22) (&non-continuable . G4e21) (&who . G4e20) (&irritants . G4e1f) (&assertion . G4e1e) (&violation . G4e1d) (&error . G4e1c) (&serious . G4e1b) (&warning . G4e1a) (&message . G4e19) (&condition . G4e18) (define-condition-type . G4e17) (define-enumeration . G4e16) (define-record-type . G4e15) (parent-rtd . G4e14) (nongenerative . G4e13) (opaque . G4e12) (sealed . G4e11) (protocol . G4e10) (parent . G4e0f) (immutable . G4e0e) (mutable . G4e0d) (fields . G4e0c) (error-handling-mode . G4e0b) (file-options . G4e0a) (buffer-mode . G4e09) (eol-style . G4e08) (guard . G4e07) (unsyntax-splicing . G4e04) (unsyntax . G4e03) (unquote-splicing . G4e02) (unquote . G4e01) (_ . G4e00) (else . G4dff) (=> . G4dfe) (... . G4dfd) (assert . G4dfc) (endianness . G4dfb) (do . G4df8) (cond . G4df7) (let* . G4df6) (let . G4df5) (let*-values . G4df4) (let-values . G4df3) (identifier-syntax . G4df2) (with-syntax . G4df1) (quasisyntax . G4df0) (quasiquote . G4def) (syntax-rules . G4dee) (include . G4ded) (record-constructor-descriptor . G4deb) (record-type-descriptor . G4dea) (case . G4de9) (unless . G4de7) (when . G4de6) (or . G4de5) (and . G4de4) (if . G4de3) (letrec* . G4de2) (letrec . G4de1) (case-lambda . G4ddf) (lambda . G4dde) (syntax . G4ddd) (syntax-case . G4ddc) (quote . G4ddb) (letrec-syntax . G4dd9) (let-syntax . G4dd8) (set! . G4dd7) (import . G4dd6) (begin . G4dd5) (define-syntax . G4dd3) (define . G4dd2)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50b4 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fb2) (unquote-splicing . G4e02) (unquote . G4e01) (_ . G4e00) (else . G4dff) (=> . G4dfe) (... . G4dfd) (delay . G4dfa) (do . G4df8) (cond . G4df7) (let* . G4df6) (let . G4df5) (quasiquote . G4def) (syntax-rules . G4dee) (case . G4de9) (or . G4de5) (and . G4de4) (if . G4de3) (letrec . G4de1) (lambda . G4dde) (quote . G4ddb) (letrec-syntax . G4dd9) (let-syntax . G4dd8) (set! . G4dd7) (begin . G4dd5) (define-syntax . G4dd3) (define . G4dd2)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50b5 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-numeric? . G503f) (char-lower-case? . G503e) (char-upcase . G503c) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033) (call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object . G4ff7) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (scheme-report-environment . G301f) (quotient . G4fb8) (null-environment . G301d) (remainder . G4fb7) (modulo . G4fb6) (inexact->exact . G4fb5) (force . G4fb4) (exact->inexact . G4fb3) (make-promise . G4fb2) (string-fill! . G4fb0) (string-set! . G4faf) (set-cdr! . G4fae) (set-car! . G4fad) (memv . G4fa7) (memq . G4fa6) (member . G4fa4) (assv . G4f9c) (assq . G4f9b) (assoc . G4f99) (eval . G3023) (zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-length . G4ed1) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (not . G4ea4) (negative? . G4ea3) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer->char . G4e8e) (inexact? . G4e8c) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (even? . G4e80) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (atan . G4e45) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (unquote-splicing . G4e02) (unquote . G4e01) (else . G4dff) (=> . G4dfe) (... . G4dfd) (delay . G4dfa) (do . G4df8) (cond . G4df7) (let* . G4df6) (let . G4df5) (quasiquote . G4def) (syntax-rules . G4dee) (case . G4de9) (or . G4de5) (and . G4de4) (if . G4de3) (letrec . G4de1) (lambda . G4dde) (quote . G4ddb) (letrec-syntax . G4dd9) (let-syntax . G4dd8) (set! . G4dd7) (begin . G4dd5) (define-syntax . G4dd3) (define . G4dd2)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50b6 '(psyntax modules) '() '() '() '() '((module . G4dd4)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50b7 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50b8 '(rnrs) '(6) '() '() '() '((regexp? . G50ab) (string-upcase . G504f) (string-titlecase . G504e) (string-normalize-nfkd . G504d) (string-normalize-nfkc . G504c) (string-normalize-nfd . G504b) (string-normalize-nfc . G504a) (string-foldcase . G5049) (string-downcase . G5048) (string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-title-case? . G5040) (char-numeric? . G503f) (char-lower-case? . G503e) (char-general-category . G503d) (char-upcase . G503c) (char-titlecase . G503b) (char-foldcase . G503a) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033) (make-variable-transformer . G2d93) (identifier? . G3045) (generate-temporaries . G3031) (free-identifier=? . G3033) (syntax->datum . G3049) (datum->syntax . G3047) (bound-identifier=? . G3035) (record-type-descriptor? . G5032) (record-predicate . G5031) (record-mutator . G5030) (record-constructor . G502f) (record-accessor . G502e) (make-record-type-descriptor . G502d) (make-record-constructor-descriptor . G502c) (record? . G502b) (record-type-uid . G502a) (record-type-sealed? . G5029) (record-type-parent . G5028) (record-type-opaque? . G5027) (record-type-name . G5026) (record-type-generative? . G5025) (record-type-field-names . G5024) (record-rtd . G5023) (record-field-mutable? . G5022) (delete-file . G5021) (file-exists? . G5020) (vector-sort! . G501f) (vector-sort . G501e) (list-sort . G501d) (symbol-hash . G501c) (string-ci-hash . G501b) (string-hash . G501a) (equal-hash . G5019) (hashtable-equivalence-function . G5018) (make-hashtable . G5017) (hashtable-hash-function . G5016) (make-eqv-hashtable . G5015) (make-eq-hashtable . G5014) (hashtable? . G5013) (hashtable-update! . G5012) (hashtable-size . G5011) (hashtable-set! . G5010) (hashtable-ref . G500f) (hashtable-mutable? . G500e) (hashtable-keys . G500d) (hashtable-entries . G500c) (hashtable-delete! . G500b) (hashtable-copy . G500a) (hashtable-contains? . G5009) (hashtable-clear! . G5008) (call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (utf-8-codec . G4ff1) (utf-16-codec . G4ff0) (transcoder-error-handling-mode . G4fef) (transcoder-eol-style . G4fee) (transcoder-codec . G4fed) (transcoded-port . G4fec) (textual-port? . G4feb) (string->bytevector . G4fea) (standard-output-port . G4fe9) (standard-input-port . G4fe8) (standard-error-port . G4fe7) (set-port-position! . G4fe6) (put-u8 . G4fe5) (put-string . G4fe4) (put-datum . G4fe3) (put-char . G4fe2) (put-bytevector . G4fe1) (port? . G4fe0) (port-transcoder . G4fdf) (port-position . G4fde) (port-has-set-port-position!? . G4fdd) (port-has-port-position? . G4fdc) (port-eof? . G4fdb) (output-port-buffer-mode . G4fda) (open-string-output-port . G4fd9) (open-string-input-port . G4fd8) (open-file-output-port . G4fd7) (open-file-input/output-port . G4fd6) (open-file-input-port . G4fd5) (open-bytevector-output-port . G4fd4) (open-bytevector-input-port . G4fd3) (native-transcoder . G4fd2) (native-eol-style . G4fd1) (make-transcoder . G4fd0) (latin-1-codec . G4fcf) (make-i/o-write-error . G4b04) (make-i/o-read-error . G4aef) (make-i/o-port-error . G4ba2) (make-i/o-invalid-position-error . G4b1a) (make-i/o-filename-error . G4b34) (make-i/o-file-protection-error . G4b4d) (make-i/o-file-is-read-only-error . G4b62) (make-i/o-file-does-not-exist-error . G4b8c) (make-i/o-file-already-exists-error . G4b77) (make-i/o-error . G4ada) (make-i/o-encoding-error . G4bd1) (make-i/o-decoding-error . G4bbb) (make-custom-textual-output-port . G4fce) (make-custom-textual-input/output-port . G4fcd) (make-custom-textual-input-port . G4fcc) (make-custom-binary-output-port . G4fcb) (make-custom-binary-input/output-port . G4fca) (make-custom-binary-input-port . G4fc9) (make-bytevector . G4fc8) (lookahead-u8 . G4fc7) (lookahead-char . G4fc6) (i/o-write-error? . G4b06) (i/o-read-error? . G4af1) (i/o-port-error? . G4ba6) (i/o-invalid-position-error? . G4b1e) (i/o-filename-error? . G4b38) (i/o-file-protection-error? . G4b4f) (i/o-file-is-read-only-error? . G4b64) (i/o-file-does-not-exist-error? . G4b8e) (i/o-file-already-exists-error? . G4b79) (i/o-error? . G4adc) (i/o-error-position . G4b20) (i/o-error-port . G4ba8) (i/o-error-filename . G4b3a) (i/o-encoding-error? . G4bd5) (i/o-encoding-error-char . G4bd7) (i/o-decoding-error? . G4bbd) (get-u8 . G4fc5) (get-string-n! . G4fc4) (get-string-n . G4fc3) (get-string-all . G4fc2) (get-line . G4fc1) (get-datum . G4fc0) (get-char . G4fbf) (get-bytevector-some . G4fbe) (get-bytevector-n! . G4fbd) (get-bytevector-n . G4fbc) (get-bytevector-all . G4fbb) (flush-output-port . G4fba) (close-port . G4fb9) (exit . G4fb1) (command-line . G4d06) (remove . G4fac) (remv . G4fab) (remp . G4faa) (remq . G4fa9) (partition . G4fa8) (memv . G4fa7) (memq . G4fa6) (memp . G4fa5) (member . G4fa4) (exists . G4fa3) (for-all . G4fa2) (fold-right . G4fa1) (fold-left . G4fa0) (find . G4f9f) (filter . G4f9e) (cons* . G4f9d) (assv . G4f9c) (assq . G4f9b) (assp . G4f9a) (assoc . G4f99) (call-with-string-output-port . G4f98) (call-with-port . G4f97) (call-with-bytevector-output-port . G4f96) (bytevector->string . G4f95) (buffer-mode? . G4f94) (binary-port? . G4f93) (with-exception-handler . G4f92) (raise-continuable . G4f91) (raise . G4f90) (make-enumeration . G4f8f) (enum-set=? . G4f8e) (enum-set-universe . G4f8d) (enum-set-union . G4f8c) (enum-set-subset? . G4f8b) (enum-set-projection . G4f8a) (enum-set-member? . G4f89) (enum-set-intersection . G4f88) (enum-set-indexer . G4f87) (enum-set-difference . G4f86) (enum-set-constructor . G4f85) (enum-set-complement . G4f84) (enum-set->list . G4f83) (who-condition? . G4a52) (warning? . G49cc) (violation? . G4a0b) (undefined-violation? . G4ac7) (syntax-violation? . G4aae) (syntax-violation-subform . G4ab2) (syntax-violation-form . G4ab0) (syntax-violation . G3043) (simple-conditions . G4f82) (serious-condition? . G49e1) (non-continuable-violation? . G4a69) (message-condition? . G49b5) (make-who-condition . G4a4e) (make-warning . G49ca) (make-violation . G4a09) (make-undefined-violation . G4ac5) (make-syntax-violation . G4aa8) (make-serious-condition . G49df) (make-non-continuable-violation . G4a67) (make-message-condition . G49b1) (make-lexical-violation . G4a91) (make-irritants-condition . G4a34) (make-implementation-restriction-violation . G4a7c) (make-error . G49f4) (make-assertion-violation . G4a1e) (lexical-violation? . G4a93) (irritants-condition? . G4a38) (implementation-restriction-violation? . G4a7e) (error? . G49f6) (condition-who . G4a54) (condition-predicate . G4f81) (condition-message . G49b7) (condition-irritants . G4a3a) (condition-accessor . G4f80) (condition . G4f7f) (assertion-violation? . G4a20) (condition? . G4f7e) (utf32->string . G4f7d) (utf16->string . G4f7c) (utf8->string . G4f7b) (uint-list->bytevector . G4f7a) (u8-list->bytevector . G4f79) (string->utf8 . G4f78) (string->utf32 . G4f77) (string->utf16 . G4f76) (sint-list->bytevector . G4f75) (native-endianness . G4f74) (bytevector? . G4f73) (bytevector=? . G4f72) (bytevector-uint-set! . G4f71) (bytevector-uint-ref . G4f70) (bytevector-u8-set! . G4f6f) (bytevector-u8-ref . G4f6e) (bytevector-u64-set! . G4f6d) (bytevector-u64-ref . G4f6c) (bytevector-u64-native-set! . G4f6b) (bytevector-u64-native-ref . G4f6a) (bytevector-u32-set! . G4f69) (bytevector-u32-ref . G4f68) (bytevector-u32-native-set! . G4f67) (bytevector-u32-native-ref . G4f66) (bytevector-u16-set! . G4f65) (bytevector-u16-ref . G4f64) (bytevector-u16-native-set! . G4f63) (bytevector-u16-native-ref . G4f62) (bytevector-sint-set! . G4f61) (bytevector-sint-ref . G4f60) (bytevector-s8-set! . G4f5f) (bytevector-s8-ref . G4f5e) (bytevector-s64-set! . G4f5d) (bytevector-s64-ref . G4f5c) (bytevector-s64-native-set! . G4f5b) (bytevector-s64-native-ref . G4f5a) (bytevector-s32-set! . G4f59) (bytevector-s32-ref . G4f58) (bytevector-s32-native-set! . G4f57) (bytevector-s32-native-ref . G4f56) (bytevector-s16-set! . G4f55) (bytevector-s16-ref . G4f54) (bytevector-s16-native-set! . G4f53) (bytevector-s16-native-ref . G4f52) (bytevector-length . G4f51) (bytevector-ieee-single-ref . G4f50) (bytevector-ieee-single-set! . G4f4f) (bytevector-ieee-single-native-set! . G4f4e) (bytevector-ieee-single-native-ref . G4f4d) (bytevector-ieee-double-set! . G4f4c) (bytevector-ieee-double-ref . G4f4b) (bytevector-ieee-double-native-set! . G4f4a) (bytevector-ieee-double-native-ref . G4f49) (bytevector-fill! . G4f48) (bytevector-copy! . G4f47) (bytevector-copy . G4f46) (bytevector->uint-list . G4f45) (bytevector->u8-list . G4f44) (bytevector->sint-list . G4f43) (no-nans-violation? . G4c01) (no-infinities-violation? . G4bec) (make-no-nans-violation . G4bff) (make-no-infinities-violation . G4bea) (real->flonum . G4f42) (flzero? . G4f41) (fltruncate . G4f40) (fltan . G4f3f) (flsqrt . G4f3e) (flsin . G4f3d) (flround . G4f3c) (flpositive? . G4f3b) (flonum? . G4f3a) (flodd? . G4f39) (flnumerator . G4f38) (flnegative? . G4f37) (flnan? . G4f36) (flmod0 . G4f35) (flmod . G4f34) (flmin . G4f33) (flmax . G4f32) (fllog . G4f31) (flinteger? . G4f30) (flinfinite? . G4f2f) (flfloor . G4f2e) (flfinite? . G4f2d) (flexpt . G4f2c) (flexp . G4f2b) (fleven? . G4f2a) (fldiv0-and-mod0 . G4f29) (fldiv0 . G4f28) (fldiv-and-mod . G4f27) (fldiv . G4f26) (fldenominator . G4f25) (flcos . G4f24) (flceiling . G4f23) (flatan . G4f22) (flasin . G4f21) (flacos . G4f20) (flabs . G4f1f) (fl>? . G4f1e) (fl>=? . G4f1d) (fl=? . G4f1c) (fl<? . G4f1b) (fl<=? . G4f1a) (fl/ . G4f19) (fl- . G4f18) (fl+ . G4f17) (fl* . G4f16) (fixnum->flonum . G4f15) (fxzero? . G4f14) (fxxor . G4f13) (fxrotate-bit-field . G4f12) (fxreverse-bit-field . G4f11) (fxpositive? . G4f10) (fxodd? . G4f0f) (fxnot . G4f0e) (fxnegative? . G4f0d) (fxmod0 . G4f0c) (fxmod . G4f0b) (fxmin . G4f0a) (fxmax . G4f09) (fxlength . G4f08) (fxior . G4f07) (fxif . G4f06) (fxfirst-bit-set . G4f05) (fxeven? . G4f04) (fxdiv0-and-mod0 . G4f03) (fxdiv0 . G4f02) (fxdiv-and-mod . G4f01) (fxdiv . G4f00) (fxcopy-bit-field . G4eff) (fxcopy-bit . G4efe) (fxbit-set? . G4efd) (fxbit-field . G4efc) (fxbit-count . G4efb) (fxarithmetic-shift-right . G4efa) (fxarithmetic-shift-left . G4ef9) (fxarithmetic-shift . G4ef8) (fxand . G4ef7) (fx>? . G4ef6) (fx>=? . G4ef5) (fx=? . G4ef4) (fx<? . G4ef3) (fx<=? . G4ef2) (fx-/carry . G4ef1) (fx- . G4ef0) (fx+/carry . G4eef) (fx+ . G4eee) (fx*/carry . G4eed) (fx* . G4eec) (greatest-fixnum . G4eeb) (least-fixnum . G4eea) (fixnum-width . G4ee9) (fixnum? . G4ee8) (bitwise-rotate-bit-field . G4ee7) (bitwise-reverse-bit-field . G4ee6) (bitwise-length . G4ee5) (bitwise-if . G4ee4) (bitwise-first-bit-set . G4ee3) (bitwise-copy-bit-field . G4ee2) (bitwise-copy-bit . G4ee1) (bitwise-bit-set? . G4ee0) (bitwise-bit-field . G4edf) (bitwise-bit-count . G4ede) (bitwise-xor . G4edd) (bitwise-ior . G4edc) (bitwise-and . G4edb) (bitwise-not . G4eda) (bitwise-arithmetic-shift-right . G4ed9) (bitwise-arithmetic-shift-left . G4ed8) (bitwise-arithmetic-shift . G4ed7) (zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-map . G4ed2) (vector-length . G4ed1) (vector-for-each . G4ed0) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol=? . G4ec8) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-for-each . G4ebd) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-valued? . G4eb1) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (rational-valued? . G4ead) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (null? . G4ea5) (not . G4ea4) (negative? . G4ea3) (nan? . G4ea2) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer-valued? . G4e8f) (integer->char . G4e8e) (infinite? . G4e8d) (inexact? . G4e8c) (inexact . G4e8b) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (finite? . G4e86) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (exact-integer-sqrt . G4e82) (exact . G4e81) (even? . G4e80) (error . G4e7f) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (div0-and-mod0 . G4e7a) (mod0 . G4e79) (div0 . G4e78) (div-and-mod . G4e77) (mod . G4e76) (div . G4e75) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call/cc . G4e67) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (boolean=? . G4e46) (atan . G4e45) (assertion-violation . G4e44) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (&no-nans . G4e33) (&no-infinities . G4e32) (&i/o-encoding . G4e31) (&i/o-decoding . G4e30) (&i/o-port . G4e2f) (&i/o-file-does-not-exist . G4e2e) (&i/o-file-already-exists . G4e2d) (&i/o-file-is-read-only . G4e2c) (&i/o-file-protection . G4e2b) (&i/o-filename . G4e2a) (&i/o-invalid-position . G4e29) (&i/o-write . G4e28) (&i/o-read . G4e27) (&i/o . G4e26) (&undefined . G4e25) (&syntax . G4e24) (&lexical . G4e23) (&implementation-restriction . G4e22) (&non-continuable . G4e21) (&who . G4e20) (&irritants . G4e1f) (&assertion . G4e1e) (&violation . G4e1d) (&error . G4e1c) (&serious . G4e1b) (&warning . G4e1a) (&message . G4e19) (&condition . G4e18) (define-condition-type . G4e17) (define-enumeration . G4e16) (define-record-type . G4e15) (parent-rtd . G4e14) (nongenerative . G4e13) (opaque . G4e12) (sealed . G4e11) (protocol . G4e10) (parent . G4e0f) (immutable . G4e0e) (mutable . G4e0d) (fields . G4e0c) (error-handling-mode . G4e0b) (file-options . G4e0a) (buffer-mode . G4e09) (eol-style . G4e08) (guard . G4e07) (unsyntax-splicing . G4e04) (unsyntax . G4e03) (unquote-splicing . G4e02) (unquote . G4e01) (_ . G4e00) (else . G4dff) (=> . G4dfe) (... . G4dfd) (assert . G4dfc) (endianness . G4dfb) (do . G4df8) (cond . G4df7) (let* . G4df6) (let . G4df5) (let*-values . G4df4) (let-values . G4df3) (identifier-syntax . G4df2) (with-syntax . G4df1) (quasisyntax . G4df0) (quasiquote . G4def) (syntax-rules . G4dee) (record-constructor-descriptor . G4deb) (record-type-descriptor . G4dea) (case . G4de9) (unless . G4de7) (when . G4de6) (or . G4de5) (and . G4de4) (if . G4de3) (letrec* . G4de2) (letrec . G4de1) (case-lambda . G4ddf) (lambda . G4dde) (syntax . G4ddd) (syntax-case . G4ddc) (quote . G4ddb) (letrec-syntax . G4dd9) (let-syntax . G4dd8) (set! . G4dd7) (begin . G4dd5) (define-syntax . G4dd3) (define . G4dd2)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50b9 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G301f) (quotient . G4fb8) (null-environment . G301d) (remainder . G4fb7) (modulo . G4fb6) (inexact->exact . G4fb5) (force . G4fb4) (exact->inexact . G4fb3) (make-promise . G4fb2) (delay . G4dfa)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50ba '(rnrs control) '(6) '() '() '() '((do . G4df8) (unless . G4de7) (when . G4de6) (case-lambda . G4ddf)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50bb '(rnrs eval) '(6) '() '() '() '((eval . G3023) (environment . G301b)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50bc '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fae) (set-car! . G4fad)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50bd '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fb0) (string-set! . G4faf)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50be '(rnrs programs) '(6) '() '() '() '((exit . G4fb1) (command-line . G4d06)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50bf '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d93) (identifier? . G3045) (generate-temporaries . G3031) (free-identifier=? . G3033) (syntax->datum . G3049) (datum->syntax . G3047) (bound-identifier=? . G3035) (syntax-violation . G3043) (unsyntax-splicing . G4e04) (unsyntax . G4e03) (_ . G4e00) (... . G4dfd) (with-syntax . G4df1) (quasisyntax . G4df0) (syntax . G4ddd) (syntax-case . G4ddc)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c0 '(rnrs files) '(6) '() '() '() '((delete-file . G5021) (file-exists? . G5020) (make-i/o-write-error . G4b04) (make-i/o-read-error . G4aef) (make-i/o-port-error . G4ba2) (make-i/o-invalid-position-error . G4b1a) (make-i/o-filename-error . G4b34) (make-i/o-file-protection-error . G4b4d) (make-i/o-file-is-read-only-error . G4b62) (make-i/o-file-does-not-exist-error . G4b8c) (make-i/o-file-already-exists-error . G4b77) (make-i/o-error . G4ada) (i/o-write-error? . G4b06) (i/o-read-error? . G4af1) (i/o-port-error? . G4ba6) (i/o-invalid-position-error? . G4b1e) (i/o-filename-error? . G4b38) (i/o-file-protection-error? . G4b4f) (i/o-file-is-read-only-error? . G4b64) (i/o-file-does-not-exist-error? . G4b8e) (i/o-file-already-exists-error? . G4b79) (i/o-error? . G4adc) (i/o-error-position . G4b20) (i/o-error-port . G4ba8) (i/o-error-filename . G4b3a) (&i/o-port . G4e2f) (&i/o-file-does-not-exist . G4e2e) (&i/o-file-already-exists . G4e2d) (&i/o-file-is-read-only . G4e2c) (&i/o-file-protection . G4e2b) (&i/o-filename . G4e2a) (&i/o-invalid-position . G4e29) (&i/o-write . G4e28) (&i/o-read . G4e27) (&i/o . G4e26)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c1 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G501f) (vector-sort . G501e) (list-sort . G501d)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c2 '(rnrs base) '(6) '() '() '() '((zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-map . G4ed2) (vector-length . G4ed1) (vector-for-each . G4ed0) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol=? . G4ec8) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-for-each . G4ebd) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-valued? . G4eb1) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (rational-valued? . G4ead) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (null? . G4ea5) (not . G4ea4) (negative? . G4ea3) (nan? . G4ea2) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer-valued? . G4e8f) (integer->char . G4e8e) (infinite? . G4e8d) (inexact? . G4e8c) (inexact . G4e8b) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (finite? . G4e86) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (exact-integer-sqrt . G4e82) (exact . G4e81) (even? . G4e80) (error . G4e7f) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (div0-and-mod0 . G4e7a) (mod0 . G4e79) (div0 . G4e78) (div-and-mod . G4e77) (mod . G4e76) (div . G4e75) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call/cc . G4e67) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (boolean=? . G4e46) (atan . G4e45) (assertion-violation . G4e44) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (unquote-splicing . G4e02) (unquote . G4e01) (_ . G4e00) (else . G4dff) (=> . G4dfe) (... . G4dfd) (assert . G4dfc) (cond . G4df7) (let* . G4df6) (let . G4df5) (let*-values . G4df4) (let-values . G4df3) (identifier-syntax . G4df2) (quasiquote . G4def) (syntax-rules . G4dee) (case . G4de9) (or . G4de5) (and . G4de4) (if . G4de3) (letrec* . G4de2) (letrec . G4de1) (lambda . G4dde) (quote . G4ddb) (letrec-syntax . G4dd9) (let-syntax . G4dd8) (set! . G4dd7) (begin . G4dd5) (define-syntax . G4dd3) (define . G4dd2)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c3 '(rnrs lists) '(6) '() '() '() '((remove . G4fac) (remv . G4fab) (remp . G4faa) (remq . G4fa9) (partition . G4fa8) (memv . G4fa7) (memq . G4fa6) (memp . G4fa5) (member . G4fa4) (exists . G4fa3) (for-all . G4fa2) (fold-right . G4fa1) (fold-left . G4fa0) (find . G4f9f) (filter . G4f9e) (cons* . G4f9d) (assv . G4f9c) (assq . G4f9b) (assp . G4f9a) (assoc . G4f99)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c4 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (make-i/o-write-error . G4b04) (make-i/o-read-error . G4aef) (make-i/o-port-error . G4ba2) (make-i/o-invalid-position-error . G4b1a) (make-i/o-filename-error . G4b34) (make-i/o-file-protection-error . G4b4d) (make-i/o-file-is-read-only-error . G4b62) (make-i/o-file-does-not-exist-error . G4b8c) (make-i/o-file-already-exists-error . G4b77) (make-i/o-error . G4ada) (i/o-write-error? . G4b06) (i/o-read-error? . G4af1) (i/o-port-error? . G4ba6) (i/o-invalid-position-error? . G4b1e) (i/o-filename-error? . G4b38) (i/o-file-protection-error? . G4b4f) (i/o-file-is-read-only-error? . G4b64) (i/o-file-does-not-exist-error? . G4b8e) (i/o-file-already-exists-error? . G4b79) (i/o-error? . G4adc) (i/o-error-position . G4b20) (i/o-error-port . G4ba8) (i/o-error-filename . G4b3a) (&i/o-port . G4e2f) (&i/o-file-does-not-exist . G4e2e) (&i/o-file-already-exists . G4e2d) (&i/o-file-is-read-only . G4e2c) (&i/o-file-protection . G4e2b) (&i/o-filename . G4e2a) (&i/o-invalid-position . G4e29) (&i/o-write . G4e28) (&i/o-read . G4e27) (&i/o . G4e26)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c5 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fc8) (utf32->string . G4f7d) (utf16->string . G4f7c) (utf8->string . G4f7b) (uint-list->bytevector . G4f7a) (u8-list->bytevector . G4f79) (string->utf8 . G4f78) (string->utf32 . G4f77) (string->utf16 . G4f76) (sint-list->bytevector . G4f75) (native-endianness . G4f74) (bytevector? . G4f73) (bytevector=? . G4f72) (bytevector-uint-set! . G4f71) (bytevector-uint-ref . G4f70) (bytevector-u8-set! . G4f6f) (bytevector-u8-ref . G4f6e) (bytevector-u64-set! . G4f6d) (bytevector-u64-ref . G4f6c) (bytevector-u64-native-set! . G4f6b) (bytevector-u64-native-ref . G4f6a) (bytevector-u32-set! . G4f69) (bytevector-u32-ref . G4f68) (bytevector-u32-native-set! . G4f67) (bytevector-u32-native-ref . G4f66) (bytevector-u16-set! . G4f65) (bytevector-u16-ref . G4f64) (bytevector-u16-native-set! . G4f63) (bytevector-u16-native-ref . G4f62) (bytevector-sint-set! . G4f61) (bytevector-sint-ref . G4f60) (bytevector-s8-set! . G4f5f) (bytevector-s8-ref . G4f5e) (bytevector-s64-set! . G4f5d) (bytevector-s64-ref . G4f5c) (bytevector-s64-native-set! . G4f5b) (bytevector-s64-native-ref . G4f5a) (bytevector-s32-set! . G4f59) (bytevector-s32-ref . G4f58) (bytevector-s32-native-set! . G4f57) (bytevector-s32-native-ref . G4f56) (bytevector-s16-set! . G4f55) (bytevector-s16-ref . G4f54) (bytevector-s16-native-set! . G4f53) (bytevector-s16-native-ref . G4f52) (bytevector-length . G4f51) (bytevector-ieee-single-ref . G4f50) (bytevector-ieee-single-set! . G4f4f) (bytevector-ieee-single-native-set! . G4f4e) (bytevector-ieee-single-native-ref . G4f4d) (bytevector-ieee-double-set! . G4f4c) (bytevector-ieee-double-ref . G4f4b) (bytevector-ieee-double-native-set! . G4f4a) (bytevector-ieee-double-native-ref . G4f49) (bytevector-fill! . G4f48) (bytevector-copy! . G4f47) (bytevector-copy . G4f46) (bytevector->uint-list . G4f45) (bytevector->u8-list . G4f44) (bytevector->sint-list . G4f43) (endianness . G4dfb)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c6 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G504f) (string-titlecase . G504e) (string-normalize-nfkd . G504d) (string-normalize-nfkc . G504c) (string-normalize-nfd . G504b) (string-normalize-nfc . G504a) (string-foldcase . G5049) (string-downcase . G5048) (string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-title-case? . G5040) (char-numeric? . G503f) (char-lower-case? . G503e) (char-general-category . G503d) (char-upcase . G503c) (char-titlecase . G503b) (char-foldcase . G503a) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c7 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f92) (raise-continuable . G4f91) (raise . G4f90) (guard . G4e07) (else . G4dff) (=> . G4dfe)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c8 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ee7) (bitwise-reverse-bit-field . G4ee6) (bitwise-length . G4ee5) (bitwise-if . G4ee4) (bitwise-first-bit-set . G4ee3) (bitwise-copy-bit-field . G4ee2) (bitwise-copy-bit . G4ee1) (bitwise-bit-set? . G4ee0) (bitwise-bit-field . G4edf) (bitwise-bit-count . G4ede) (bitwise-xor . G4edd) (bitwise-ior . G4edc) (bitwise-and . G4edb) (bitwise-not . G4eda) (bitwise-arithmetic-shift-right . G4ed9) (bitwise-arithmetic-shift-left . G4ed8) (bitwise-arithmetic-shift . G4ed7)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50c9 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f14) (fxxor . G4f13) (fxrotate-bit-field . G4f12) (fxreverse-bit-field . G4f11) (fxpositive? . G4f10) (fxodd? . G4f0f) (fxnot . G4f0e) (fxnegative? . G4f0d) (fxmod0 . G4f0c) (fxmod . G4f0b) (fxmin . G4f0a) (fxmax . G4f09) (fxlength . G4f08) (fxior . G4f07) (fxif . G4f06) (fxfirst-bit-set . G4f05) (fxeven? . G4f04) (fxdiv0-and-mod0 . G4f03) (fxdiv0 . G4f02) (fxdiv-and-mod . G4f01) (fxdiv . G4f00) (fxcopy-bit-field . G4eff) (fxcopy-bit . G4efe) (fxbit-set? . G4efd) (fxbit-field . G4efc) (fxbit-count . G4efb) (fxarithmetic-shift-right . G4efa) (fxarithmetic-shift-left . G4ef9) (fxarithmetic-shift . G4ef8) (fxand . G4ef7) (fx>? . G4ef6) (fx>=? . G4ef5) (fx=? . G4ef4) (fx<? . G4ef3) (fx<=? . G4ef2) (fx-/carry . G4ef1) (fx- . G4ef0) (fx+/carry . G4eef) (fx+ . G4eee) (fx*/carry . G4eed) (fx* . G4eec) (greatest-fixnum . G4eeb) (least-fixnum . G4eea) (fixnum-width . G4ee9) (fixnum? . G4ee8)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50ca '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c01) (no-infinities-violation? . G4bec) (make-no-nans-violation . G4bff) (make-no-infinities-violation . G4bea) (real->flonum . G4f42) (flzero? . G4f41) (fltruncate . G4f40) (fltan . G4f3f) (flsqrt . G4f3e) (flsin . G4f3d) (flround . G4f3c) (flpositive? . G4f3b) (flonum? . G4f3a) (flodd? . G4f39) (flnumerator . G4f38) (flnegative? . G4f37) (flnan? . G4f36) (flmod0 . G4f35) (flmod . G4f34) (flmin . G4f33) (flmax . G4f32) (fllog . G4f31) (flinteger? . G4f30) (flinfinite? . G4f2f) (flfloor . G4f2e) (flfinite? . G4f2d) (flexpt . G4f2c) (flexp . G4f2b) (fleven? . G4f2a) (fldiv0-and-mod0 . G4f29) (fldiv0 . G4f28) (fldiv-and-mod . G4f27) (fldiv . G4f26) (fldenominator . G4f25) (flcos . G4f24) (flceiling . G4f23) (flatan . G4f22) (flasin . G4f21) (flacos . G4f20) (flabs . G4f1f) (fl>? . G4f1e) (fl>=? . G4f1d) (fl=? . G4f1c) (fl<? . G4f1b) (fl<=? . G4f1a) (fl/ . G4f19) (fl- . G4f18) (fl+ . G4f17) (fl* . G4f16) (fixnum->flonum . G4f15) (&no-nans . G4e33) (&no-infinities . G4e32)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50cb '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G501c) (string-ci-hash . G501b) (string-hash . G501a) (equal-hash . G5019) (hashtable-equivalence-function . G5018) (make-hashtable . G5017) (hashtable-hash-function . G5016) (make-eqv-hashtable . G5015) (make-eq-hashtable . G5014) (hashtable? . G5013) (hashtable-update! . G5012) (hashtable-size . G5011) (hashtable-set! . G5010) (hashtable-ref . G500f) (hashtable-mutable? . G500e) (hashtable-keys . G500d) (hashtable-entries . G500c) (hashtable-delete! . G500b) (hashtable-copy . G500a) (hashtable-contains? . G5009) (hashtable-clear! . G5008)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50cc '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (utf-8-codec . G4ff1) (utf-16-codec . G4ff0) (transcoder-error-handling-mode . G4fef) (transcoder-eol-style . G4fee) (transcoder-codec . G4fed) (transcoded-port . G4fec) (textual-port? . G4feb) (string->bytevector . G4fea) (standard-output-port . G4fe9) (standard-input-port . G4fe8) (standard-error-port . G4fe7) (set-port-position! . G4fe6) (put-u8 . G4fe5) (put-string . G4fe4) (put-datum . G4fe3) (put-char . G4fe2) (put-bytevector . G4fe1) (port? . G4fe0) (port-transcoder . G4fdf) (port-position . G4fde) (port-has-set-port-position!? . G4fdd) (port-has-port-position? . G4fdc) (port-eof? . G4fdb) (output-port-buffer-mode . G4fda) (open-string-output-port . G4fd9) (open-string-input-port . G4fd8) (open-file-output-port . G4fd7) (open-file-input/output-port . G4fd6) (open-file-input-port . G4fd5) (open-bytevector-output-port . G4fd4) (open-bytevector-input-port . G4fd3) (native-transcoder . G4fd2) (native-eol-style . G4fd1) (make-transcoder . G4fd0) (latin-1-codec . G4fcf) (make-i/o-write-error . G4b04) (make-i/o-read-error . G4aef) (make-i/o-port-error . G4ba2) (make-i/o-invalid-position-error . G4b1a) (make-i/o-filename-error . G4b34) (make-i/o-file-protection-error . G4b4d) (make-i/o-file-is-read-only-error . G4b62) (make-i/o-file-does-not-exist-error . G4b8c) (make-i/o-file-already-exists-error . G4b77) (make-i/o-error . G4ada) (make-i/o-encoding-error . G4bd1) (make-i/o-decoding-error . G4bbb) (make-custom-textual-output-port . G4fce) (make-custom-textual-input/output-port . G4fcd) (make-custom-textual-input-port . G4fcc) (make-custom-binary-output-port . G4fcb) (make-custom-binary-input/output-port . G4fca) (make-custom-binary-input-port . G4fc9) (lookahead-u8 . G4fc7) (lookahead-char . G4fc6) (i/o-write-error? . G4b06) (i/o-read-error? . G4af1) (i/o-port-error? . G4ba6) (i/o-invalid-position-error? . G4b1e) (i/o-filename-error? . G4b38) (i/o-file-protection-error? . G4b4f) (i/o-file-is-read-only-error? . G4b64) (i/o-file-does-not-exist-error? . G4b8e) (i/o-file-already-exists-error? . G4b79) (i/o-error? . G4adc) (i/o-error-position . G4b20) (i/o-error-port . G4ba8) (i/o-error-filename . G4b3a) (i/o-encoding-error? . G4bd5) (i/o-encoding-error-char . G4bd7) (i/o-decoding-error? . G4bbd) (get-u8 . G4fc5) (get-string-n! . G4fc4) (get-string-n . G4fc3) (get-string-all . G4fc2) (get-line . G4fc1) (get-datum . G4fc0) (get-char . G4fbf) (get-bytevector-some . G4fbe) (get-bytevector-n! . G4fbd) (get-bytevector-n . G4fbc) (get-bytevector-all . G4fbb) (flush-output-port . G4fba) (close-port . G4fb9) (call-with-string-output-port . G4f98) (call-with-port . G4f97) (call-with-bytevector-output-port . G4f96) (bytevector->string . G4f95) (buffer-mode? . G4f94) (binary-port? . G4f93) (&i/o-encoding . G4e31) (&i/o-decoding . G4e30) (&i/o-port . G4e2f) (&i/o-file-does-not-exist . G4e2e) (&i/o-file-already-exists . G4e2d) (&i/o-file-is-read-only . G4e2c) (&i/o-file-protection . G4e2b) (&i/o-filename . G4e2a) (&i/o-invalid-position . G4e29) (&i/o-write . G4e28) (&i/o-read . G4e27) (&i/o . G4e26) (error-handling-mode . G4e0b) (file-options . G4e0a) (buffer-mode . G4e09) (eol-style . G4e08)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50cd '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f8f) (enum-set=? . G4f8e) (enum-set-universe . G4f8d) (enum-set-union . G4f8c) (enum-set-subset? . G4f8b) (enum-set-projection . G4f8a) (enum-set-member? . G4f89) (enum-set-intersection . G4f88) (enum-set-indexer . G4f87) (enum-set-difference . G4f86) (enum-set-constructor . G4f85) (enum-set-complement . G4f84) (enum-set->list . G4f83) (define-enumeration . G4e16)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50ce '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a52) (warning? . G49cc) (violation? . G4a0b) (undefined-violation? . G4ac7) (syntax-violation? . G4aae) (syntax-violation-subform . G4ab2) (syntax-violation-form . G4ab0) (syntax-violation . G3043) (simple-conditions . G4f82) (serious-condition? . G49e1) (non-continuable-violation? . G4a69) (message-condition? . G49b5) (make-who-condition . G4a4e) (make-warning . G49ca) (make-violation . G4a09) (make-undefined-violation . G4ac5) (make-syntax-violation . G4aa8) (make-serious-condition . G49df) (make-non-continuable-violation . G4a67) (make-message-condition . G49b1) (make-lexical-violation . G4a91) (make-irritants-condition . G4a34) (make-implementation-restriction-violation . G4a7c) (make-error . G49f4) (make-assertion-violation . G4a1e) (lexical-violation? . G4a93) (irritants-condition? . G4a38) (implementation-restriction-violation? . G4a7e) (error? . G49f6) (condition-who . G4a54) (condition-predicate . G4f81) (condition-message . G49b7) (condition-irritants . G4a3a) (condition-accessor . G4f80) (condition . G4f7f) (assertion-violation? . G4a20) (condition? . G4f7e) (&undefined . G4e25) (&syntax . G4e24) (&lexical . G4e23) (&implementation-restriction . G4e22) (&non-continuable . G4e21) (&who . G4e20) (&irritants . G4e1f) (&assertion . G4e1e) (&violation . G4e1d) (&error . G4e1c) (&serious . G4e1b) (&warning . G4e1a) (&message . G4e19) (&condition . G4e18) (define-condition-type . G4e17)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50cf '(rnrs records inspection) '(6) '() '() '() '((record? . G502b) (record-type-uid . G502a) (record-type-sealed? . G5029) (record-type-parent . G5028) (record-type-opaque? . G5027) (record-type-name . G5026) (record-type-generative? . G5025) (record-type-field-names . G5024) (record-rtd . G5023) (record-field-mutable? . G5022)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50d0 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5032) (record-predicate . G5031) (record-mutator . G5030) (record-constructor . G502f) (record-accessor . G502e) (make-record-type-descriptor . G502d) (make-record-constructor-descriptor . G502c)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50d1 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e15) (parent-rtd . G4e14) (nongenerative . G4e13) (opaque . G4e12) (sealed . G4e11) (protocol . G4e10) (parent . G4e0f) (immutable . G4e0e) (mutable . G4e0d) (fields . G4e0c) (record-constructor-descriptor . G4deb) (record-type-descriptor . G4dea)) '() values values '#f '#f '#t '#f) (G2b6f@G2a14@install-library 'G50d2 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c05) (&no-nans-rtd . G4c03) (&no-infinities-rcd . G4bf0) (&no-infinities-rtd . G4bee) (&i/o-encoding-rcd . G4bdb) (&i/o-encoding-rtd . G4bd9) (&i/o-decoding-rcd . G4bc1) (&i/o-decoding-rtd . G4bbf) (&i/o-port-rcd . G4bac) (&i/o-port-rtd . G4baa) (&i/o-file-does-not-exist-rcd . G4b92) (&i/o-file-does-not-exist-rtd . G4b90) (&i/o-file-already-exists-rcd . G4b7d) (&i/o-file-already-exists-rtd . G4b7b) (&i/o-file-is-read-only-rcd . G4b68) (&i/o-file-is-read-only-rtd . G4b66) (&i/o-file-protection-rcd . G4b53) (&i/o-file-protection-rtd . G4b51) (&i/o-filename-rcd . G4b3e) (&i/o-filename-rtd . G4b3c) (&i/o-invalid-position-rcd . G4b24) (&i/o-invalid-position-rtd . G4b22) (&i/o-write-rcd . G4b0a) (&i/o-write-rtd . G4b08) (&i/o-read-rcd . G4af5) (&i/o-read-rtd . G4af3) (&i/o-rcd . G4ae0) (&i/o-rtd . G4ade) (&undefined-rcd . G4acb) (&undefined-rtd . G4ac9) (&syntax-rcd . G4ab6) (&syntax-rtd . G4ab4) (&lexical-rcd . G4a97) (&lexical-rtd . G4a95) (&implementation-restriction-rcd . G4a82) (&implementation-restriction-rtd . G4a80) (&non-continuable-rcd . G4a6d) (&non-continuable-rtd . G4a6b) (&who-rcd . G4a58) (&who-rtd . G4a56) (&irritants-rcd . G4a3e) (&irritants-rtd . G4a3c) (&assertion-rcd . G4a24) (&assertion-rtd . G4a22) (&violation-rcd . G4a0f) (&violation-rtd . G4a0d) (&error-rcd . G49fa) (&error-rtd . G49f8) (&serious-rcd . G49e5) (&serious-rtd . G49e3) (&warning-rcd . G49d0) (&warning-rtd . G49ce) (&message-rcd . G49bb) (&message-rtd . G49b9) (&condition-rcd . G495e) (&condition-rtd . G495c) (syntax-error . G303f) (syntax-dispatch . G2f58) (pretty-print . G50b2) (eval-core . G50b1) (set-symbol-value! . G50b0) (symbol-value . G50af) (gensym . G50ae) (void . G50ad) (load . G4d0c) (interaction-environment . G304f) (char-ready? . G50ac) (regexp? . G50ab) (read-line . G50aa) (dotted-list? . G50a9) (circular-list? . G50a8) (proper-list? . G50a7) (circular-list . G50a6) (last . G50a5) (last-pair . G50a4) (not-pair? . G50a3) (split-at! . G50a2) (split-at . G50a1) (list= . G50a0) (list-copy . G509f) (list-tabulate . G509e) (make-list . G509d) (xcons . G509c) (tenth . G509b) (ninth . G509a) (eighth . G5099) (seventh . G5098) (sixth . G5097) (fifth . G5096) (drop-right! . G5095) (drop-right . G5094) (take-right . G5093) (take! . G5092) (drop . G5091) (take . G5090) (car+cdr . G508f) (fourth . G508e) (third . G508d) (second . G508c) (first . G508b) (iota . G508a) (every . G5089) (ungensym . G5088) (alist->eq-hash-table . G5087) (assoc-ref . G5086) (alist-cons . G5085) (append-map . G5084) (print . G5083) (format . G5082) (standard-library-path . G5081) (file-newer? . G5080) (stat-mtime . G507f) (write-to-file . G507e) (file->list . G507d) (file->string . G507c) (digit->integer . G507b) (call-with-string-input-port . G507a) (call-with-string-io . G5079) (string-split . G5078) (bytevector-for-each . G5077) (string->regexp . G5076) (rxmatch . G5075) (regexp-replace-all . G5074) (hashtable-for-each . G5073) (call-process . G5072) (local-tz-offset . G5071) (microseconds . G5070) (readdir . G506f) (set-current-directory! . G506e) (expand-path . G506d) (current-directory . G506c) (%spawn . G506b) (%waitpid . G506a) (%ffi-supported? . G5069) (%ffi-pointer-ref . G5068) (%ffi-pointer->string . G5067) (%ffi-call->string-or-zero . G5066) (%ffi-call->double . G5065) (%ffi-call->void* . G5064) (%ffi-call->void . G5063) (%ffi-call->int . G5062) (%ffi-lookup . G5061) (%ffi-open . G5060) (%fork . G505f) (%pipe . G505e) (p . G505d) (get-environment-variables . G505c) (get-environment-variable . G505b) (get-timeofday . G505a) (get-command-line . G5059) (sys-display . G5058) (source-info . G5057) (make-compiler-instruction . G5056) (make-instruction . G5055) (set-source-info! . G5054) (bignum? . G5053) (fast-equal? . G5052) (fasl-read . G5051) (fasl-write . G5050) (make-parameter . G282b) (string-upcase . G504f) (string-titlecase . G504e) (string-normalize-nfkd . G504d) (string-normalize-nfkc . G504c) (string-normalize-nfd . G504b) (string-normalize-nfc . G504a) (string-foldcase . G5049) (string-downcase . G5048) (string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-title-case? . G5040) (char-numeric? . G503f) (char-lower-case? . G503e) (char-general-category . G503d) (char-upcase . G503c) (char-titlecase . G503b) (char-foldcase . G503a) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033) (make-variable-transformer . G2d93) (identifier? . G3045) (generate-temporaries . G3031) (free-identifier=? . G3033) (syntax->datum . G3049) (datum->syntax . G3047) (bound-identifier=? . G3035) (record-type-descriptor? . G5032) (record-predicate . G5031) (record-mutator . G5030) (record-constructor . G502f) (record-accessor . G502e) (make-record-type-descriptor . G502d) (make-record-constructor-descriptor . G502c) (record? . G502b) (record-type-uid . G502a) (record-type-sealed? . G5029) (record-type-parent . G5028) (record-type-opaque? . G5027) (record-type-name . G5026) (record-type-generative? . G5025) (record-type-field-names . G5024) (record-rtd . G5023) (record-field-mutable? . G5022) (delete-file . G5021) (file-exists? . G5020) (vector-sort! . G501f) (vector-sort . G501e) (list-sort . G501d) (symbol-hash . G501c) (string-ci-hash . G501b) (string-hash . G501a) (equal-hash . G5019) (hashtable-equivalence-function . G5018) (make-hashtable . G5017) (hashtable-hash-function . G5016) (make-eqv-hashtable . G5015) (make-eq-hashtable . G5014) (hashtable? . G5013) (hashtable-update! . G5012) (hashtable-size . G5011) (hashtable-set! . G5010) (hashtable-ref . G500f) (hashtable-mutable? . G500e) (hashtable-keys . G500d) (hashtable-entries . G500c) (hashtable-delete! . G500b) (hashtable-copy . G500a) (hashtable-contains? . G5009) (hashtable-clear! . G5008) (call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (utf-8-codec . G4ff1) (utf-16-codec . G4ff0) (transcoder-error-handling-mode . G4fef) (transcoder-eol-style . G4fee) (transcoder-codec . G4fed) (transcoded-port . G4fec) (textual-port? . G4feb) (string->bytevector . G4fea) (standard-output-port . G4fe9) (standard-input-port . G4fe8) (standard-error-port . G4fe7) (set-port-position! . G4fe6) (put-u8 . G4fe5) (put-string . G4fe4) (put-datum . G4fe3) (put-char . G4fe2) (put-bytevector . G4fe1) (port? . G4fe0) (port-transcoder . G4fdf) (port-position . G4fde) (port-has-set-port-position!? . G4fdd) (port-has-port-position? . G4fdc) (port-eof? . G4fdb) (output-port-buffer-mode . G4fda) (open-string-output-port . G4fd9) (open-string-input-port . G4fd8) (open-file-output-port . G4fd7) (open-file-input/output-port . G4fd6) (open-file-input-port . G4fd5) (open-bytevector-output-port . G4fd4) (open-bytevector-input-port . G4fd3) (native-transcoder . G4fd2) (native-eol-style . G4fd1) (make-transcoder . G4fd0) (latin-1-codec . G4fcf) (make-i/o-write-error . G4b04) (make-i/o-read-error . G4aef) (make-i/o-port-error . G4ba2) (make-i/o-invalid-position-error . G4b1a) (make-i/o-filename-error . G4b34) (make-i/o-file-protection-error . G4b4d) (make-i/o-file-is-read-only-error . G4b62) (make-i/o-file-does-not-exist-error . G4b8c) (make-i/o-file-already-exists-error . G4b77) (make-i/o-error . G4ada) (make-i/o-encoding-error . G4bd1) (make-i/o-decoding-error . G4bbb) (make-custom-textual-output-port . G4fce) (make-custom-textual-input/output-port . G4fcd) (make-custom-textual-input-port . G4fcc) (make-custom-binary-output-port . G4fcb) (make-custom-binary-input/output-port . G4fca) (make-custom-binary-input-port . G4fc9) (make-bytevector . G4fc8) (lookahead-u8 . G4fc7) (lookahead-char . G4fc6) (i/o-write-error? . G4b06) (i/o-read-error? . G4af1) (i/o-port-error? . G4ba6) (i/o-invalid-position-error? . G4b1e) (i/o-filename-error? . G4b38) (i/o-file-protection-error? . G4b4f) (i/o-file-is-read-only-error? . G4b64) (i/o-file-does-not-exist-error? . G4b8e) (i/o-file-already-exists-error? . G4b79) (i/o-error? . G4adc) (i/o-error-position . G4b20) (i/o-error-port . G4ba8) (i/o-error-filename . G4b3a) (i/o-encoding-error? . G4bd5) (i/o-encoding-error-char . G4bd7) (i/o-decoding-error? . G4bbd) (get-u8 . G4fc5) (get-string-n! . G4fc4) (get-string-n . G4fc3) (get-string-all . G4fc2) (get-line . G4fc1) (get-datum . G4fc0) (get-char . G4fbf) (get-bytevector-some . G4fbe) (get-bytevector-n! . G4fbd) (get-bytevector-n . G4fbc) (get-bytevector-all . G4fbb) (flush-output-port . G4fba) (close-port . G4fb9) (scheme-report-environment . G301f) (quotient . G4fb8) (null-environment . G301d) (remainder . G4fb7) (modulo . G4fb6) (inexact->exact . G4fb5) (force . G4fb4) (exact->inexact . G4fb3) (make-promise . G4fb2) (exit . G4fb1) (command-line . G4d06) (string-fill! . G4fb0) (string-set! . G4faf) (set-cdr! . G4fae) (set-car! . G4fad) (remove . G4fac) (remv . G4fab) (remp . G4faa) (remq . G4fa9) (partition . G4fa8) (memv . G4fa7) (memq . G4fa6) (memp . G4fa5) (member . G4fa4) (exists . G4fa3) (for-all . G4fa2) (fold-right . G4fa1) (fold-left . G4fa0) (find . G4f9f) (filter . G4f9e) (cons* . G4f9d) (assv . G4f9c) (assq . G4f9b) (assp . G4f9a) (assoc . G4f99) (call-with-string-output-port . G4f98) (call-with-port . G4f97) (call-with-bytevector-output-port . G4f96) (bytevector->string . G4f95) (buffer-mode? . G4f94) (binary-port? . G4f93) (with-exception-handler . G4f92) (raise-continuable . G4f91) (raise . G4f90) (eval . G3023) (environment . G301b) (make-enumeration . G4f8f) (enum-set=? . G4f8e) (enum-set-universe . G4f8d) (enum-set-union . G4f8c) (enum-set-subset? . G4f8b) (enum-set-projection . G4f8a) (enum-set-member? . G4f89) (enum-set-intersection . G4f88) (enum-set-indexer . G4f87) (enum-set-difference . G4f86) (enum-set-constructor . G4f85) (enum-set-complement . G4f84) (enum-set->list . G4f83) (who-condition? . G4a52) (warning? . G49cc) (violation? . G4a0b) (undefined-violation? . G4ac7) (syntax-violation? . G4aae) (syntax-violation-subform . G4ab2) (syntax-violation-form . G4ab0) (syntax-violation . G3043) (simple-conditions . G4f82) (serious-condition? . G49e1) (non-continuable-violation? . G4a69) (message-condition? . G49b5) (make-who-condition . G4a4e) (make-warning . G49ca) (make-violation . G4a09) (make-undefined-violation . G4ac5) (make-syntax-violation . G4aa8) (make-serious-condition . G49df) (make-non-continuable-violation . G4a67) (make-message-condition . G49b1) (make-lexical-violation . G4a91) (make-irritants-condition . G4a34) (make-implementation-restriction-violation . G4a7c) (make-error . G49f4) (make-assertion-violation . G4a1e) (lexical-violation? . G4a93) (irritants-condition? . G4a38) (implementation-restriction-violation? . G4a7e) (error? . G49f6) (condition-who . G4a54) (condition-predicate . G4f81) (condition-message . G49b7) (condition-irritants . G4a3a) (condition-accessor . G4f80) (condition . G4f7f) (assertion-violation? . G4a20) (condition? . G4f7e) (utf32->string . G4f7d) (utf16->string . G4f7c) (utf8->string . G4f7b) (uint-list->bytevector . G4f7a) (u8-list->bytevector . G4f79) (string->utf8 . G4f78) (string->utf32 . G4f77) (string->utf16 . G4f76) (sint-list->bytevector . G4f75) (native-endianness . G4f74) (bytevector? . G4f73) (bytevector=? . G4f72) (bytevector-uint-set! . G4f71) (bytevector-uint-ref . G4f70) (bytevector-u8-set! . G4f6f) (bytevector-u8-ref . G4f6e) (bytevector-u64-set! . G4f6d) (bytevector-u64-ref . G4f6c) (bytevector-u64-native-set! . G4f6b) (bytevector-u64-native-ref . G4f6a) (bytevector-u32-set! . G4f69) (bytevector-u32-ref . G4f68) (bytevector-u32-native-set! . G4f67) (bytevector-u32-native-ref . G4f66) (bytevector-u16-set! . G4f65) (bytevector-u16-ref . G4f64) (bytevector-u16-native-set! . G4f63) (bytevector-u16-native-ref . G4f62) (bytevector-sint-set! . G4f61) (bytevector-sint-ref . G4f60) (bytevector-s8-set! . G4f5f) (bytevector-s8-ref . G4f5e) (bytevector-s64-set! . G4f5d) (bytevector-s64-ref . G4f5c) (bytevector-s64-native-set! . G4f5b) (bytevector-s64-native-ref . G4f5a) (bytevector-s32-set! . G4f59) (bytevector-s32-ref . G4f58) (bytevector-s32-native-set! . G4f57) (bytevector-s32-native-ref . G4f56) (bytevector-s16-set! . G4f55) (bytevector-s16-ref . G4f54) (bytevector-s16-native-set! . G4f53) (bytevector-s16-native-ref . G4f52) (bytevector-length . G4f51) (bytevector-ieee-single-ref . G4f50) (bytevector-ieee-single-set! . G4f4f) (bytevector-ieee-single-native-set! . G4f4e) (bytevector-ieee-single-native-ref . G4f4d) (bytevector-ieee-double-set! . G4f4c) (bytevector-ieee-double-ref . G4f4b) (bytevector-ieee-double-native-set! . G4f4a) (bytevector-ieee-double-native-ref . G4f49) (bytevector-fill! . G4f48) (bytevector-copy! . G4f47) (bytevector-copy . G4f46) (bytevector->uint-list . G4f45) (bytevector->u8-list . G4f44) (bytevector->sint-list . G4f43) (no-nans-violation? . G4c01) (no-infinities-violation? . G4bec) (make-no-nans-violation . G4bff) (make-no-infinities-violation . G4bea) (real->flonum . G4f42) (flzero? . G4f41) (fltruncate . G4f40) (fltan . G4f3f) (flsqrt . G4f3e) (flsin . G4f3d) (flround . G4f3c) (flpositive? . G4f3b) (flonum? . G4f3a) (flodd? . G4f39) (flnumerator . G4f38) (flnegative? . G4f37) (flnan? . G4f36) (flmod0 . G4f35) (flmod . G4f34) (flmin . G4f33) (flmax . G4f32) (fllog . G4f31) (flinteger? . G4f30) (flinfinite? . G4f2f) (flfloor . G4f2e) (flfinite? . G4f2d) (flexpt . G4f2c) (flexp . G4f2b) (fleven? . G4f2a) (fldiv0-and-mod0 . G4f29) (fldiv0 . G4f28) (fldiv-and-mod . G4f27) (fldiv . G4f26) (fldenominator . G4f25) (flcos . G4f24) (flceiling . G4f23) (flatan . G4f22) (flasin . G4f21) (flacos . G4f20) (flabs . G4f1f) (fl>? . G4f1e) (fl>=? . G4f1d) (fl=? . G4f1c) (fl<? . G4f1b) (fl<=? . G4f1a) (fl/ . G4f19) (fl- . G4f18) (fl+ . G4f17) (fl* . G4f16) (fixnum->flonum . G4f15) (fxzero? . G4f14) (fxxor . G4f13) (fxrotate-bit-field . G4f12) (fxreverse-bit-field . G4f11) (fxpositive? . G4f10) (fxodd? . G4f0f) (fxnot . G4f0e) (fxnegative? . G4f0d) (fxmod0 . G4f0c) (fxmod . G4f0b) (fxmin . G4f0a) (fxmax . G4f09) (fxlength . G4f08) (fxior . G4f07) (fxif . G4f06) (fxfirst-bit-set . G4f05) (fxeven? . G4f04) (fxdiv0-and-mod0 . G4f03) (fxdiv0 . G4f02) (fxdiv-and-mod . G4f01) (fxdiv . G4f00) (fxcopy-bit-field . G4eff) (fxcopy-bit . G4efe) (fxbit-set? . G4efd) (fxbit-field . G4efc) (fxbit-count . G4efb) (fxarithmetic-shift-right . G4efa) (fxarithmetic-shift-left . G4ef9) (fxarithmetic-shift . G4ef8) (fxand . G4ef7) (fx>? . G4ef6) (fx>=? . G4ef5) (fx=? . G4ef4) (fx<? . G4ef3) (fx<=? . G4ef2) (fx-/carry . G4ef1) (fx- . G4ef0) (fx+/carry . G4eef) (fx+ . G4eee) (fx*/carry . G4eed) (fx* . G4eec) (greatest-fixnum . G4eeb) (least-fixnum . G4eea) (fixnum-width . G4ee9) (fixnum? . G4ee8) (bitwise-rotate-bit-field . G4ee7) (bitwise-reverse-bit-field . G4ee6) (bitwise-length . G4ee5) (bitwise-if . G4ee4) (bitwise-first-bit-set . G4ee3) (bitwise-copy-bit-field . G4ee2) (bitwise-copy-bit . G4ee1) (bitwise-bit-set? . G4ee0) (bitwise-bit-field . G4edf) (bitwise-bit-count . G4ede) (bitwise-xor . G4edd) (bitwise-ior . G4edc) (bitwise-and . G4edb) (bitwise-not . G4eda) (bitwise-arithmetic-shift-right . G4ed9) (bitwise-arithmetic-shift-left . G4ed8) (bitwise-arithmetic-shift . G4ed7) (zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-map . G4ed2) (vector-length . G4ed1) (vector-for-each . G4ed0) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol=? . G4ec8) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-for-each . G4ebd) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-valued? . G4eb1) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (rational-valued? . G4ead) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (null? . G4ea5) (not . G4ea4) (negative? . G4ea3) (nan? . G4ea2) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer-valued? . G4e8f) (integer->char . G4e8e) (infinite? . G4e8d) (inexact? . G4e8c) (inexact . G4e8b) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (finite? . G4e86) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (exact-integer-sqrt . G4e82) (exact . G4e81) (even? . G4e80) (error . G4e7f) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (div0-and-mod0 . G4e7a) (mod0 . G4e79) (div0 . G4e78) (div-and-mod . G4e77) (mod . G4e76) (div . G4e75) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call/cc . G4e67) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (boolean=? . G4e46) (atan . G4e45) (assertion-violation . G4e44) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (library . G4e34) (&no-nans . G4e33) (&no-infinities . G4e32) (&i/o-encoding . G4e31) (&i/o-decoding . G4e30) (&i/o-port . G4e2f) (&i/o-file-does-not-exist . G4e2e) (&i/o-file-already-exists . G4e2d) (&i/o-file-is-read-only . G4e2c) (&i/o-file-protection . G4e2b) (&i/o-filename . G4e2a) (&i/o-invalid-position . G4e29) (&i/o-write . G4e28) (&i/o-read . G4e27) (&i/o . G4e26) (&undefined . G4e25) (&syntax . G4e24) (&lexical . G4e23) (&implementation-restriction . G4e22) (&non-continuable . G4e21) (&who . G4e20) (&irritants . G4e1f) (&assertion . G4e1e) (&violation . G4e1d) (&error . G4e1c) (&serious . G4e1b) (&warning . G4e1a) (&message . G4e19) (&condition . G4e18) (define-condition-type . G4e17) (define-enumeration . G4e16) (define-record-type . G4e15) (parent-rtd . G4e14) (nongenerative . G4e13) (opaque . G4e12) (sealed . G4e11) (protocol . G4e10) (parent . G4e0f) (immutable . G4e0e) (mutable . G4e0d) (fields . G4e0c) (error-handling-mode . G4e0b) (file-options . G4e0a) (buffer-mode . G4e09) (eol-style . G4e08) (guard . G4e07) (trace-define . G4e06) (trace-lambda . G4e05) (unsyntax-splicing . G4e04) (unsyntax . G4e03) (unquote-splicing . G4e02) (unquote . G4e01) (_ . G4e00) (else . G4dff) (=> . G4dfe) (... . G4dfd) (assert . G4dfc) (endianness . G4dfb) (delay . G4dfa) (time . G4df9) (do . G4df8) (cond . G4df7) (let* . G4df6) (let . G4df5) (let*-values . G4df4) (let-values . G4df3) (identifier-syntax . G4df2) (with-syntax . G4df1) (quasisyntax . G4df0) (quasiquote . G4def) (syntax-rules . G4dee) (include . G4ded) (define-struct . G4dec) (record-constructor-descriptor . G4deb) (record-type-descriptor . G4dea) (case . G4de9) (parameterize . G4de8) (unless . G4de7) (when . G4de6) (or . G4de5) (and . G4de4) (if . G4de3) (letrec* . G4de2) (letrec . G4de1) (type-descriptor . G4de0) (case-lambda . G4ddf) (lambda . G4dde) (syntax . G4ddd) (syntax-case . G4ddc) (quote . G4ddb) (foreign-call . G4dda) (letrec-syntax . G4dd9) (let-syntax . G4dd8) (set! . G4dd7) (import . G4dd6) (begin . G4dd5) (module . G4dd4) (define-syntax . G4dd3) (define . G4dd2)) '((G4c05 core-prim . &no-nans-rcd) (G4c03 core-prim . &no-nans-rtd) (G4bf0 core-prim . &no-infinities-rcd) (G4bee core-prim . &no-infinities-rtd) (G4bdb core-prim . &i/o-encoding-rcd) (G4bd9 core-prim . &i/o-encoding-rtd) (G4bc1 core-prim . &i/o-decoding-rcd) (G4bbf core-prim . &i/o-decoding-rtd) (G4bac core-prim . &i/o-port-rcd) (G4baa core-prim . &i/o-port-rtd) (G4b92 core-prim . &i/o-file-does-not-exist-rcd) (G4b90 core-prim . &i/o-file-does-not-exist-rtd) (G4b7d core-prim . &i/o-file-already-exists-rcd) (G4b7b core-prim . &i/o-file-already-exists-rtd) (G4b68 core-prim . &i/o-file-is-read-only-rcd) (G4b66 core-prim . &i/o-file-is-read-only-rtd) (G4b53 core-prim . &i/o-file-protection-rcd) (G4b51 core-prim . &i/o-file-protection-rtd) (G4b3e core-prim . &i/o-filename-rcd) (G4b3c core-prim . &i/o-filename-rtd) (G4b24 core-prim . &i/o-invalid-position-rcd) (G4b22 core-prim . &i/o-invalid-position-rtd) (G4b0a core-prim . &i/o-write-rcd) (G4b08 core-prim . &i/o-write-rtd) (G4af5 core-prim . &i/o-read-rcd) (G4af3 core-prim . &i/o-read-rtd) (G4ae0 core-prim . &i/o-rcd) (G4ade core-prim . &i/o-rtd) (G4acb core-prim . &undefined-rcd) (G4ac9 core-prim . &undefined-rtd) (G4ab6 core-prim . &syntax-rcd) (G4ab4 core-prim . &syntax-rtd) (G4a97 core-prim . &lexical-rcd) (G4a95 core-prim . &lexical-rtd) (G4a82 core-prim . &implementation-restriction-rcd) (G4a80 core-prim . &implementation-restriction-rtd) (G4a6d core-prim . &non-continuable-rcd) (G4a6b core-prim . &non-continuable-rtd) (G4a58 core-prim . &who-rcd) (G4a56 core-prim . &who-rtd) (G4a3e core-prim . &irritants-rcd) (G4a3c core-prim . &irritants-rtd) (G4a24 core-prim . &assertion-rcd) (G4a22 core-prim . &assertion-rtd) (G4a0f core-prim . &violation-rcd) (G4a0d core-prim . &violation-rtd) (G49fa core-prim . &error-rcd) (G49f8 core-prim . &error-rtd) (G49e5 core-prim . &serious-rcd) (G49e3 core-prim . &serious-rtd) (G49d0 core-prim . &warning-rcd) (G49ce core-prim . &warning-rtd) (G49bb core-prim . &message-rcd) (G49b9 core-prim . &message-rtd) (G495e core-prim . &condition-rcd) (G495c core-prim . &condition-rtd) (G303f core-prim . syntax-error) (G2f58 core-prim . syntax-dispatch) (G50b2 core-prim . pretty-print) (G50b1 core-prim . eval-core) (G50b0 core-prim . set-symbol-value!) (G50af core-prim . symbol-value) (G50ae core-prim . gensym) (G50ad core-prim . void) (G4d0c core-prim . load) (G304f core-prim . interaction-environment) (G50ac core-prim . char-ready?) (G50ab core-prim . regexp?) (G50aa core-prim . read-line) (G50a9 core-prim . dotted-list?) (G50a8 core-prim . circular-list?) (G50a7 core-prim . proper-list?) (G50a6 core-prim . circular-list) (G50a5 core-prim . last) (G50a4 core-prim . last-pair) (G50a3 core-prim . not-pair?) (G50a2 core-prim . split-at!) (G50a1 core-prim . split-at) (G50a0 core-prim . list=) (G509f core-prim . list-copy) (G509e core-prim . list-tabulate) (G509d core-prim . make-list) (G509c core-prim . xcons) (G509b core-prim . tenth) (G509a core-prim . ninth) (G5099 core-prim . eighth) (G5098 core-prim . seventh) (G5097 core-prim . sixth) (G5096 core-prim . fifth) (G5095 core-prim . drop-right!) (G5094 core-prim . drop-right) (G5093 core-prim . take-right) (G5092 core-prim . take!) (G5091 core-prim . drop) (G5090 core-prim . take) (G508f core-prim . car+cdr) (G508e core-prim . fourth) (G508d core-prim . third) (G508c core-prim . second) (G508b core-prim . first) (G508a core-prim . iota) (G5089 core-prim . every) (G5088 core-prim . ungensym) (G5087 core-prim . alist->eq-hash-table) (G5086 core-prim . assoc-ref) (G5085 core-prim . alist-cons) (G5084 core-prim . append-map) (G5083 core-prim . print) (G5082 core-prim . format) (G5081 core-prim . standard-library-path) (G5080 core-prim . file-newer?) (G507f core-prim . stat-mtime) (G507e core-prim . write-to-file) (G507d core-prim . file->list) (G507c core-prim . file->string) (G507b core-prim . digit->integer) (G507a core-prim . call-with-string-input-port) (G5079 core-prim . call-with-string-io) (G5078 core-prim . string-split) (G5077 core-prim . bytevector-for-each) (G5076 core-prim . string->regexp) (G5075 core-prim . rxmatch) (G5074 core-prim . regexp-replace-all) (G5073 core-prim . hashtable-for-each) (G5072 core-prim . call-process) (G5071 core-prim . local-tz-offset) (G5070 core-prim . microseconds) (G506f core-prim . readdir) (G506e core-prim . set-current-directory!) (G506d core-prim . expand-path) (G506c core-prim . current-directory) (G506b core-prim . %spawn) (G506a core-prim . %waitpid) (G5069 core-prim . %ffi-supported?) (G5068 core-prim . %ffi-pointer-ref) (G5067 core-prim . %ffi-pointer->string) (G5066 core-prim . %ffi-call->string-or-zero) (G5065 core-prim . %ffi-call->double) (G5064 core-prim . %ffi-call->void*) (G5063 core-prim . %ffi-call->void) (G5062 core-prim . %ffi-call->int) (G5061 core-prim . %ffi-lookup) (G5060 core-prim . %ffi-open) (G505f core-prim . %fork) (G505e core-prim . %pipe) (G505d core-prim . p) (G505c core-prim . get-environment-variables) (G505b core-prim . get-environment-variable) (G505a core-prim . get-timeofday) (G5059 core-prim . get-command-line) (G5058 core-prim . sys-display) (G5057 core-prim . source-info) (G5056 core-prim . make-compiler-instruction) (G5055 core-prim . make-instruction) (G5054 core-prim . set-source-info!) (G5053 core-prim . bignum?) (G5052 core-prim . fast-equal?) (G5051 core-prim . fasl-read) (G5050 core-prim . fasl-write) (G282b core-prim . make-parameter) (G504f core-prim . string-upcase) (G504e core-prim . string-titlecase) (G504d core-prim . string-normalize-nfkd) (G504c core-prim . string-normalize-nfkc) (G504b core-prim . string-normalize-nfd) (G504a core-prim . string-normalize-nfc) (G5049 core-prim . string-foldcase) (G5048 core-prim . string-downcase) (G5047 core-prim . string-ci>?) (G5046 core-prim . string-ci>=?) (G5045 core-prim . string-ci=?) (G5044 core-prim . string-ci<?) (G5043 core-prim . string-ci<=?) (G5042 core-prim . char-whitespace?) (G5041 core-prim . char-upper-case?) (G5040 core-prim . char-title-case?) (G503f core-prim . char-numeric?) (G503e core-prim . char-lower-case?) (G503d core-prim . char-general-category) (G503c core-prim . char-upcase) (G503b core-prim . char-titlecase) (G503a core-prim . char-foldcase) (G5039 core-prim . char-downcase) (G5038 core-prim . char-ci>?) (G5037 core-prim . char-ci>=?) (G5036 core-prim . char-ci=?) (G5035 core-prim . char-ci<?) (G5034 core-prim . char-ci<=?) (G5033 core-prim . char-alphabetic?) (G2d93 core-prim . make-variable-transformer) (G3045 core-prim . identifier?) (G3031 core-prim . generate-temporaries) (G3033 core-prim . free-identifier=?) (G3049 core-prim . syntax->datum) (G3047 core-prim . datum->syntax) (G3035 core-prim . bound-identifier=?) (G5032 core-prim . record-type-descriptor?) (G5031 core-prim . record-predicate) (G5030 core-prim . record-mutator) (G502f core-prim . record-constructor) (G502e core-prim . record-accessor) (G502d core-prim . make-record-type-descriptor) (G502c core-prim . make-record-constructor-descriptor) (G502b core-prim . record?) (G502a core-prim . record-type-uid) (G5029 core-prim . record-type-sealed?) (G5028 core-prim . record-type-parent) (G5027 core-prim . record-type-opaque?) (G5026 core-prim . record-type-name) (G5025 core-prim . record-type-generative?) (G5024 core-prim . record-type-field-names) (G5023 core-prim . record-rtd) (G5022 core-prim . record-field-mutable?) (G5021 core-prim . delete-file) (G5020 core-prim . file-exists?) (G501f core-prim . vector-sort!) (G501e core-prim . vector-sort) (G501d core-prim . list-sort) (G501c core-prim . symbol-hash) (G501b core-prim . string-ci-hash) (G501a core-prim . string-hash) (G5019 core-prim . equal-hash) (G5018 core-prim . hashtable-equivalence-function) (G5017 core-prim . make-hashtable) (G5016 core-prim . hashtable-hash-function) (G5015 core-prim . make-eqv-hashtable) (G5014 core-prim . make-eq-hashtable) (G5013 core-prim . hashtable?) (G5012 core-prim . hashtable-update!) (G5011 core-prim . hashtable-size) (G5010 core-prim . hashtable-set!) (G500f core-prim . hashtable-ref) (G500e core-prim . hashtable-mutable?) (G500d core-prim . hashtable-keys) (G500c core-prim . hashtable-entries) (G500b core-prim . hashtable-delete!) (G500a core-prim . hashtable-copy) (G5009 core-prim . hashtable-contains?) (G5008 core-prim . hashtable-clear!) (G5007 core-prim . call-with-output-file) (G5006 core-prim . call-with-input-file) (G5005 core-prim . write-char) (G5004 core-prim . write) (G5003 core-prim . with-output-to-file) (G5002 core-prim . with-input-from-file) (G5001 core-prim . read-char) (G5000 core-prim . read) (G4fff core-prim . peek-char) (G4ffe core-prim . open-output-file) (G4ffd core-prim . open-input-file) (G4ffc core-prim . newline) (G4ffb core-prim . display) (G4ffa core-prim . close-output-port) (G4ff9 core-prim . close-input-port) (G4ff8 core-prim . eof-object?) (G4ff7 core-prim . eof-object) (G4ff6 core-prim . current-error-port) (G4ff5 core-prim . current-output-port) (G4ff4 core-prim . current-input-port) (G4ff3 core-prim . output-port?) (G4ff2 core-prim . input-port?) (G4ff1 core-prim . utf-8-codec) (G4ff0 core-prim . utf-16-codec) (G4fef core-prim . transcoder-error-handling-mode) (G4fee core-prim . transcoder-eol-style) (G4fed core-prim . transcoder-codec) (G4fec core-prim . transcoded-port) (G4feb core-prim . textual-port?) (G4fea core-prim . string->bytevector) (G4fe9 core-prim . standard-output-port) (G4fe8 core-prim . standard-input-port) (G4fe7 core-prim . standard-error-port) (G4fe6 core-prim . set-port-position!) (G4fe5 core-prim . put-u8) (G4fe4 core-prim . put-string) (G4fe3 core-prim . put-datum) (G4fe2 core-prim . put-char) (G4fe1 core-prim . put-bytevector) (G4fe0 core-prim . port?) (G4fdf core-prim . port-transcoder) (G4fde core-prim . port-position) (G4fdd core-prim . port-has-set-port-position!?) (G4fdc core-prim . port-has-port-position?) (G4fdb core-prim . port-eof?) (G4fda core-prim . output-port-buffer-mode) (G4fd9 core-prim . open-string-output-port) (G4fd8 core-prim . open-string-input-port) (G4fd7 core-prim . open-file-output-port) (G4fd6 core-prim . open-file-input/output-port) (G4fd5 core-prim . open-file-input-port) (G4fd4 core-prim . open-bytevector-output-port) (G4fd3 core-prim . open-bytevector-input-port) (G4fd2 core-prim . native-transcoder) (G4fd1 core-prim . native-eol-style) (G4fd0 core-prim . make-transcoder) (G4fcf core-prim . latin-1-codec) (G4b04 core-prim . make-i/o-write-error) (G4aef core-prim . make-i/o-read-error) (G4ba2 core-prim . make-i/o-port-error) (G4b1a core-prim . make-i/o-invalid-position-error) (G4b34 core-prim . make-i/o-filename-error) (G4b4d core-prim . make-i/o-file-protection-error) (G4b62 core-prim . make-i/o-file-is-read-only-error) (G4b8c core-prim . make-i/o-file-does-not-exist-error) (G4b77 core-prim . make-i/o-file-already-exists-error) (G4ada core-prim . make-i/o-error) (G4bd1 core-prim . make-i/o-encoding-error) (G4bbb core-prim . make-i/o-decoding-error) (G4fce core-prim . make-custom-textual-output-port) (G4fcd core-prim . make-custom-textual-input/output-port) (G4fcc core-prim . make-custom-textual-input-port) (G4fcb core-prim . make-custom-binary-output-port) (G4fca core-prim . make-custom-binary-input/output-port) (G4fc9 core-prim . make-custom-binary-input-port) (G4fc8 core-prim . make-bytevector) (G4fc7 core-prim . lookahead-u8) (G4fc6 core-prim . lookahead-char) (G4b06 core-prim . i/o-write-error?) (G4af1 core-prim . i/o-read-error?) (G4ba6 core-prim . i/o-port-error?) (G4b1e core-prim . i/o-invalid-position-error?) (G4b38 core-prim . i/o-filename-error?) (G4b4f core-prim . i/o-file-protection-error?) (G4b64 core-prim . i/o-file-is-read-only-error?) (G4b8e core-prim . i/o-file-does-not-exist-error?) (G4b79 core-prim . i/o-file-already-exists-error?) (G4adc core-prim . i/o-error?) (G4b20 core-prim . i/o-error-position) (G4ba8 core-prim . i/o-error-port) (G4b3a core-prim . i/o-error-filename) (G4bd5 core-prim . i/o-encoding-error?) (G4bd7 core-prim . i/o-encoding-error-char) (G4bbd core-prim . i/o-decoding-error?) (G4fc5 core-prim . get-u8) (G4fc4 core-prim . get-string-n!) (G4fc3 core-prim . get-string-n) (G4fc2 core-prim . get-string-all) (G4fc1 core-prim . get-line) (G4fc0 core-prim . get-datum) (G4fbf core-prim . get-char) (G4fbe core-prim . get-bytevector-some) (G4fbd core-prim . get-bytevector-n!) (G4fbc core-prim . get-bytevector-n) (G4fbb core-prim . get-bytevector-all) (G4fba core-prim . flush-output-port) (G4fb9 core-prim . close-port) (G301f core-prim . scheme-report-environment) (G4fb8 core-prim . quotient) (G301d core-prim . null-environment) (G4fb7 core-prim . remainder) (G4fb6 core-prim . modulo) (G4fb5 core-prim . inexact->exact) (G4fb4 core-prim . force) (G4fb3 core-prim . exact->inexact) (G4fb2 core-prim . make-promise) (G4fb1 core-prim . exit) (G4d06 core-prim . command-line) (G4fb0 core-prim . string-fill!) (G4faf core-prim . string-set!) (G4fae core-prim . set-cdr!) (G4fad core-prim . set-car!) (G4fac core-prim . remove) (G4fab core-prim . remv) (G4faa core-prim . remp) (G4fa9 core-prim . remq) (G4fa8 core-prim . partition) (G4fa7 core-prim . memv) (G4fa6 core-prim . memq) (G4fa5 core-prim . memp) (G4fa4 core-prim . member) (G4fa3 core-prim . exists) (G4fa2 core-prim . for-all) (G4fa1 core-prim . fold-right) (G4fa0 core-prim . fold-left) (G4f9f core-prim . find) (G4f9e core-prim . filter) (G4f9d core-prim . cons*) (G4f9c core-prim . assv) (G4f9b core-prim . assq) (G4f9a core-prim . assp) (G4f99 core-prim . assoc) (G4f98 core-prim . call-with-string-output-port) (G4f97 core-prim . call-with-port) (G4f96 core-prim . call-with-bytevector-output-port) (G4f95 core-prim . bytevector->string) (G4f94 core-prim . buffer-mode?) (G4f93 core-prim . binary-port?) (G4f92 core-prim . with-exception-handler) (G4f91 core-prim . raise-continuable) (G4f90 core-prim . raise) (G3023 core-prim . eval) (G301b core-prim . environment) (G4f8f core-prim . make-enumeration) (G4f8e core-prim . enum-set=?) (G4f8d core-prim . enum-set-universe) (G4f8c core-prim . enum-set-union) (G4f8b core-prim . enum-set-subset?) (G4f8a core-prim . enum-set-projection) (G4f89 core-prim . enum-set-member?) (G4f88 core-prim . enum-set-intersection) (G4f87 core-prim . enum-set-indexer) (G4f86 core-prim . enum-set-difference) (G4f85 core-prim . enum-set-constructor) (G4f84 core-prim . enum-set-complement) (G4f83 core-prim . enum-set->list) (G4a52 core-prim . who-condition?) (G49cc core-prim . warning?) (G4a0b core-prim . violation?) (G4ac7 core-prim . undefined-violation?) (G4aae core-prim . syntax-violation?) (G4ab2 core-prim . syntax-violation-subform) (G4ab0 core-prim . syntax-violation-form) (G3043 core-prim . syntax-violation) (G4f82 core-prim . simple-conditions) (G49e1 core-prim . serious-condition?) (G4a69 core-prim . non-continuable-violation?) (G49b5 core-prim . message-condition?) (G4a4e core-prim . make-who-condition) (G49ca core-prim . make-warning) (G4a09 core-prim . make-violation) (G4ac5 core-prim . make-undefined-violation) (G4aa8 core-prim . make-syntax-violation) (G49df core-prim . make-serious-condition) (G4a67 core-prim . make-non-continuable-violation) (G49b1 core-prim . make-message-condition) (G4a91 core-prim . make-lexical-violation) (G4a34 core-prim . make-irritants-condition) (G4a7c core-prim . make-implementation-restriction-violation) (G49f4 core-prim . make-error) (G4a1e core-prim . make-assertion-violation) (G4a93 core-prim . lexical-violation?) (G4a38 core-prim . irritants-condition?) (G4a7e core-prim . implementation-restriction-violation?) (G49f6 core-prim . error?) (G4a54 core-prim . condition-who) (G4f81 core-prim . condition-predicate) (G49b7 core-prim . condition-message) (G4a3a core-prim . condition-irritants) (G4f80 core-prim . condition-accessor) (G4f7f core-prim . condition) (G4a20 core-prim . assertion-violation?) (G4f7e core-prim . condition?) (G4f7d core-prim . utf32->string) (G4f7c core-prim . utf16->string) (G4f7b core-prim . utf8->string) (G4f7a core-prim . uint-list->bytevector) (G4f79 core-prim . u8-list->bytevector) (G4f78 core-prim . string->utf8) (G4f77 core-prim . string->utf32) (G4f76 core-prim . string->utf16) (G4f75 core-prim . sint-list->bytevector) (G4f74 core-prim . native-endianness) (G4f73 core-prim . bytevector?) (G4f72 core-prim . bytevector=?) (G4f71 core-prim . bytevector-uint-set!) (G4f70 core-prim . bytevector-uint-ref) (G4f6f core-prim . bytevector-u8-set!) (G4f6e core-prim . bytevector-u8-ref) (G4f6d core-prim . bytevector-u64-set!) (G4f6c core-prim . bytevector-u64-ref) (G4f6b core-prim . bytevector-u64-native-set!) (G4f6a core-prim . bytevector-u64-native-ref) (G4f69 core-prim . bytevector-u32-set!) (G4f68 core-prim . bytevector-u32-ref) (G4f67 core-prim . bytevector-u32-native-set!) (G4f66 core-prim . bytevector-u32-native-ref) (G4f65 core-prim . bytevector-u16-set!) (G4f64 core-prim . bytevector-u16-ref) (G4f63 core-prim . bytevector-u16-native-set!) (G4f62 core-prim . bytevector-u16-native-ref) (G4f61 core-prim . bytevector-sint-set!) (G4f60 core-prim . bytevector-sint-ref) (G4f5f core-prim . bytevector-s8-set!) (G4f5e core-prim . bytevector-s8-ref) (G4f5d core-prim . bytevector-s64-set!) (G4f5c core-prim . bytevector-s64-ref) (G4f5b core-prim . bytevector-s64-native-set!) (G4f5a core-prim . bytevector-s64-native-ref) (G4f59 core-prim . bytevector-s32-set!) (G4f58 core-prim . bytevector-s32-ref) (G4f57 core-prim . bytevector-s32-native-set!) (G4f56 core-prim . bytevector-s32-native-ref) (G4f55 core-prim . bytevector-s16-set!) (G4f54 core-prim . bytevector-s16-ref) (G4f53 core-prim . bytevector-s16-native-set!) (G4f52 core-prim . bytevector-s16-native-ref) (G4f51 core-prim . bytevector-length) (G4f50 core-prim . bytevector-ieee-single-ref) (G4f4f core-prim . bytevector-ieee-single-set!) (G4f4e core-prim . bytevector-ieee-single-native-set!) (G4f4d core-prim . bytevector-ieee-single-native-ref) (G4f4c core-prim . bytevector-ieee-double-set!) (G4f4b core-prim . bytevector-ieee-double-ref) (G4f4a core-prim . bytevector-ieee-double-native-set!) (G4f49 core-prim . bytevector-ieee-double-native-ref) (G4f48 core-prim . bytevector-fill!) (G4f47 core-prim . bytevector-copy!) (G4f46 core-prim . bytevector-copy) (G4f45 core-prim . bytevector->uint-list) (G4f44 core-prim . bytevector->u8-list) (G4f43 core-prim . bytevector->sint-list) (G4c01 core-prim . no-nans-violation?) (G4bec core-prim . no-infinities-violation?) (G4bff core-prim . make-no-nans-violation) (G4bea core-prim . make-no-infinities-violation) (G4f42 core-prim . real->flonum) (G4f41 core-prim . flzero?) (G4f40 core-prim . fltruncate) (G4f3f core-prim . fltan) (G4f3e core-prim . flsqrt) (G4f3d core-prim . flsin) (G4f3c core-prim . flround) (G4f3b core-prim . flpositive?) (G4f3a core-prim . flonum?) (G4f39 core-prim . flodd?) (G4f38 core-prim . flnumerator) (G4f37 core-prim . flnegative?) (G4f36 core-prim . flnan?) (G4f35 core-prim . flmod0) (G4f34 core-prim . flmod) (G4f33 core-prim . flmin) (G4f32 core-prim . flmax) (G4f31 core-prim . fllog) (G4f30 core-prim . flinteger?) (G4f2f core-prim . flinfinite?) (G4f2e core-prim . flfloor) (G4f2d core-prim . flfinite?) (G4f2c core-prim . flexpt) (G4f2b core-prim . flexp) (G4f2a core-prim . fleven?) (G4f29 core-prim . fldiv0-and-mod0) (G4f28 core-prim . fldiv0) (G4f27 core-prim . fldiv-and-mod) (G4f26 core-prim . fldiv) (G4f25 core-prim . fldenominator) (G4f24 core-prim . flcos) (G4f23 core-prim . flceiling) (G4f22 core-prim . flatan) (G4f21 core-prim . flasin) (G4f20 core-prim . flacos) (G4f1f core-prim . flabs) (G4f1e core-prim . fl>?) (G4f1d core-prim . fl>=?) (G4f1c core-prim . fl=?) (G4f1b core-prim . fl<?) (G4f1a core-prim . fl<=?) (G4f19 core-prim . fl/) (G4f18 core-prim . fl-) (G4f17 core-prim . fl+) (G4f16 core-prim . fl*) (G4f15 core-prim . fixnum->flonum) (G4f14 core-prim . fxzero?) (G4f13 core-prim . fxxor) (G4f12 core-prim . fxrotate-bit-field) (G4f11 core-prim . fxreverse-bit-field) (G4f10 core-prim . fxpositive?) (G4f0f core-prim . fxodd?) (G4f0e core-prim . fxnot) (G4f0d core-prim . fxnegative?) (G4f0c core-prim . fxmod0) (G4f0b core-prim . fxmod) (G4f0a core-prim . fxmin) (G4f09 core-prim . fxmax) (G4f08 core-prim . fxlength) (G4f07 core-prim . fxior) (G4f06 core-prim . fxif) (G4f05 core-prim . fxfirst-bit-set) (G4f04 core-prim . fxeven?) (G4f03 core-prim . fxdiv0-and-mod0) (G4f02 core-prim . fxdiv0) (G4f01 core-prim . fxdiv-and-mod) (G4f00 core-prim . fxdiv) (G4eff core-prim . fxcopy-bit-field) (G4efe core-prim . fxcopy-bit) (G4efd core-prim . fxbit-set?) (G4efc core-prim . fxbit-field) (G4efb core-prim . fxbit-count) (G4efa core-prim . fxarithmetic-shift-right) (G4ef9 core-prim . fxarithmetic-shift-left) (G4ef8 core-prim . fxarithmetic-shift) (G4ef7 core-prim . fxand) (G4ef6 core-prim . fx>?) (G4ef5 core-prim . fx>=?) (G4ef4 core-prim . fx=?) (G4ef3 core-prim . fx<?) (G4ef2 core-prim . fx<=?) (G4ef1 core-prim . fx-/carry) (G4ef0 core-prim . fx-) (G4eef core-prim . fx+/carry) (G4eee core-prim . fx+) (G4eed core-prim . fx*/carry) (G4eec core-prim . fx*) (G4eeb core-prim . greatest-fixnum) (G4eea core-prim . least-fixnum) (G4ee9 core-prim . fixnum-width) (G4ee8 core-prim . fixnum?) (G4ee7 core-prim . bitwise-rotate-bit-field) (G4ee6 core-prim . bitwise-reverse-bit-field) (G4ee5 core-prim . bitwise-length) (G4ee4 core-prim . bitwise-if) (G4ee3 core-prim . bitwise-first-bit-set) (G4ee2 core-prim . bitwise-copy-bit-field) (G4ee1 core-prim . bitwise-copy-bit) (G4ee0 core-prim . bitwise-bit-set?) (G4edf core-prim . bitwise-bit-field) (G4ede core-prim . bitwise-bit-count) (G4edd core-prim . bitwise-xor) (G4edc core-prim . bitwise-ior) (G4edb core-prim . bitwise-and) (G4eda core-prim . bitwise-not) (G4ed9 core-prim . bitwise-arithmetic-shift-right) (G4ed8 core-prim . bitwise-arithmetic-shift-left) (G4ed7 core-prim . bitwise-arithmetic-shift) (G4ed6 core-prim . zero?) (G4ed5 core-prim . vector?) (G4ed4 core-prim . vector-set!) (G4ed3 core-prim . vector-ref) (G4ed2 core-prim . vector-map) (G4ed1 core-prim . vector-length) (G4ed0 core-prim . vector-for-each) (G4ecf core-prim . vector-fill!) (G4ece core-prim . vector->list) (G4ecd core-prim . vector) (G4ecc core-prim . values) (G4ecb core-prim . truncate) (G4eca core-prim . tan) (G4ec9 core-prim . symbol?) (G4ec8 core-prim . symbol=?) (G4ec7 core-prim . symbol->string) (G4ec6 core-prim . substring) (G4ec5 core-prim . string?) (G4ec4 core-prim . string>?) (G4ec3 core-prim . string>=?) (G4ec2 core-prim . string=?) (G4ec1 core-prim . string<?) (G4ec0 core-prim . string<=?) (G4ebf core-prim . string-ref) (G4ebe core-prim . string-length) (G4ebd core-prim . string-for-each) (G4ebc core-prim . string-copy) (G4ebb core-prim . string-append) (G4eba core-prim . string->symbol) (G4eb9 core-prim . string->number) (G4eb8 core-prim . string->list) (G4eb7 core-prim . string) (G4eb6 core-prim . sqrt) (G4eb5 core-prim . sin) (G4eb4 core-prim . round) (G4eb3 core-prim . reverse) (G4eb2 core-prim . real?) (G4eb1 core-prim . real-valued?) (G4eb0 core-prim . real-part) (G4eaf core-prim . rationalize) (G4eae core-prim . rational?) (G4ead core-prim . rational-valued?) (G4eac core-prim . procedure?) (G4eab core-prim . positive?) (G4eaa core-prim . pair?) (G4ea9 core-prim . odd?) (G4ea8 core-prim . numerator) (G4ea7 core-prim . number?) (G4ea6 core-prim . number->string) (G4ea5 core-prim . null?) (G4ea4 core-prim . not) (G4ea3 core-prim . negative?) (G4ea2 core-prim . nan?) (G4ea1 core-prim . min) (G4ea0 core-prim . max) (G4e9f core-prim . map) (G4e9e core-prim . make-vector) (G4e9d core-prim . make-string) (G4e9c core-prim . make-rectangular) (G4e9b core-prim . make-polar) (G4e9a core-prim . magnitude) (G4e99 core-prim . log) (G4e98 core-prim . list?) (G4e97 core-prim . list-tail) (G4e96 core-prim . list-ref) (G4e95 core-prim . list->vector) (G4e94 core-prim . list->string) (G4e93 core-prim . list) (G4e92 core-prim . length) (G4e91 core-prim . lcm) (G4e90 core-prim . integer?) (G4e8f core-prim . integer-valued?) (G4e8e core-prim . integer->char) (G4e8d core-prim . infinite?) (G4e8c core-prim . inexact?) (G4e8b core-prim . inexact) (G4e8a core-prim . imag-part) (G4e89 core-prim . gcd) (G4e88 core-prim . for-each) (G4e87 core-prim . floor) (G4e86 core-prim . finite?) (G4e85 core-prim . expt) (G4e84 core-prim . exp) (G4e83 core-prim . exact?) (G4e82 core-prim . exact-integer-sqrt) (G4e81 core-prim . exact) (G4e80 core-prim . even?) (G4e7f core-prim . error) (G4e7e core-prim . eqv?) (G4e7d core-prim . equal?) (G4e7c core-prim . eq?) (G4e7b core-prim . dynamic-wind) (G4e7a core-prim . div0-and-mod0) (G4e79 core-prim . mod0) (G4e78 core-prim . div0) (G4e77 core-prim . div-and-mod) (G4e76 core-prim . mod) (G4e75 core-prim . div) (G4e74 core-prim . denominator) (G4e73 core-prim . cos) (G4e72 core-prim . cons) (G4e71 core-prim . complex?) (G4e70 core-prim . char?) (G4e6f core-prim . char>?) (G4e6e core-prim . char>=?) (G4e6d core-prim . char=?) (G4e6c core-prim . char<?) (G4e6b core-prim . char<=?) (G4e6a core-prim . char->integer) (G4e69 core-prim . ceiling) (G4e68 core-prim . call-with-values) (G4e67 core-prim . call/cc) (G4e66 core-prim . call-with-current-continuation) (G4e65 core-prim . cddddr) (G4e64 core-prim . cdddar) (G4e63 core-prim . cddadr) (G4e62 core-prim . cddaar) (G4e61 core-prim . cdaddr) (G4e60 core-prim . cdadar) (G4e5f core-prim . cdaadr) (G4e5e core-prim . cdaaar) (G4e5d core-prim . cadddr) (G4e5c core-prim . caddar) (G4e5b core-prim . cadadr) (G4e5a core-prim . cadaar) (G4e59 core-prim . caaddr) (G4e58 core-prim . caadar) (G4e57 core-prim . caaadr) (G4e56 core-prim . caaaar) (G4e55 core-prim . cdddr) (G4e54 core-prim . cddar) (G4e53 core-prim . cdadr) (G4e52 core-prim . cdaar) (G4e51 core-prim . caddr) (G4e50 core-prim . cadar) (G4e4f core-prim . caadr) (G4e4e core-prim . caaar) (G4e4d core-prim . cddr) (G4e4c core-prim . cdar) (G4e4b core-prim . cadr) (G4e4a core-prim . caar) (G4e49 core-prim . cdr) (G4e48 core-prim . car) (G4e47 core-prim . boolean?) (G4e46 core-prim . boolean=?) (G4e45 core-prim . atan) (G4e44 core-prim . assertion-violation) (G4e43 core-prim . asin) (G4e42 core-prim . apply) (G4e41 core-prim . append) (G4e40 core-prim . angle) (G4e3f core-prim . acos) (G4e3e core-prim . abs) (G4e3d core-prim . /) (G4e3c core-prim . *) (G4e3b core-prim . -) (G4e3a core-prim . +) (G4e39 core-prim . >=) (G4e38 core-prim . >) (G4e37 core-prim . =) (G4e36 core-prim . <=) (G4e35 core-prim . <) (G4e34 core-prim . library) (G4e33 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e32 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e31 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e30 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e2f $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e2e $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e2d $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e2c $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e2b $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e2a $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e29 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e28 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e27 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e26 $core-rtd &i/o-rtd &i/o-rcd) (G4e25 $core-rtd &undefined-rtd &undefined-rcd) (G4e24 $core-rtd &syntax-rtd &syntax-rcd) (G4e23 $core-rtd &lexical-rtd &lexical-rcd) (G4e22 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e21 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e20 $core-rtd &who-rtd &who-rcd) (G4e1f $core-rtd &irritants-rtd &irritants-rcd) (G4e1e $core-rtd &assertion-rtd &assertion-rcd) (G4e1d $core-rtd &violation-rtd &violation-rcd) (G4e1c $core-rtd &error-rtd &error-rcd) (G4e1b $core-rtd &serious-rtd &serious-rcd) (G4e1a $core-rtd &warning-rtd &warning-rcd) (G4e19 $core-rtd &message-rtd &message-rcd) (G4e18 $core-rtd &condition-rtd &condition-rcd) (G4e17 macro . define-condition-type) (G4e16 macro . define-enumeration) (G4e15 macro . define-record-type) (G4e14 macro . parent-rtd) (G4e13 macro . nongenerative) (G4e12 macro . opaque) (G4e11 macro . sealed) (G4e10 macro . protocol) (G4e0f macro . parent) (G4e0e macro . immutable) (G4e0d macro . mutable) (G4e0c macro . fields) (G4e0b macro . error-handling-mode) (G4e0a macro . file-options) (G4e09 macro . buffer-mode) (G4e08 macro . eol-style) (G4e07 macro . guard) (G4e06 macro . trace-define) (G4e05 macro . trace-lambda) (G4e04 macro . unsyntax-splicing) (G4e03 macro . unsyntax) (G4e02 macro . unquote-splicing) (G4e01 macro . unquote) (G4e00 macro . _) (G4dff macro . else) (G4dfe macro . =>) (G4dfd macro . ...) (G4dfc macro . assert) (G4dfb macro . endianness) (G4dfa macro . delay) (G4df9 macro . time) (G4df8 macro . do) (G4df7 macro . cond) (G4df6 macro . let*) (G4df5 macro . let) (G4df4 macro . let*-values) (G4df3 macro . let-values) (G4df2 macro . identifier-syntax) (G4df1 macro . with-syntax) (G4df0 macro . quasisyntax) (G4def macro . quasiquote) (G4dee macro . syntax-rules) (G4ded macro . include) (G4dec macro . define-struct) (G4deb core-macro . record-constructor-descriptor) (G4dea core-macro . record-type-descriptor) (G4de9 macro . case) (G4de8 macro . parameterize) (G4de7 macro . unless) (G4de6 macro . when) (G4de5 core-macro . or) (G4de4 core-macro . and) (G4de3 core-macro . if) (G4de2 core-macro . letrec*) (G4de1 core-macro . letrec) (G4de0 core-macro . type-descriptor) (G4ddf core-macro . case-lambda) (G4dde core-macro . lambda) (G4ddd core-macro . syntax) (G4ddc core-macro . syntax-case) (G4ddb core-macro . quote) (G4dda core-macro . foreign-call) (G4dd9 letrec-syntax) (G4dd8 let-syntax) (G4dd7 set!) (G4dd6 import) (G4dd5 begin) (G4dd4 module) (G4dd3 define-syntax) (G4dd2 define)) values values '#f '#f '#f '#f) (G2b6f@G2a14@install-library 'G50d3 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50b2) (eval-core . G50b1) (set-symbol-value! . G50b0) (symbol-value . G50af) (gensym . G50ae) (void . G50ad)) '() values values '#f '#f '#f '#f) (G2b6f@G2a14@install-library 'G50d4 '(mosh) '() '() '() '() '((set-symbol-value! . G50b0) (symbol-value . G50af) (read-line . G50aa) (ungensym . G5088) (alist->eq-hash-table . G5087) (assoc-ref . G5086) (print . G5083) (format . G5082) (standard-library-path . G5081) (file-newer? . G5080) (stat-mtime . G507f) (write-to-file . G507e) (file->list . G507d) (file->string . G507c) (digit->integer . G507b) (call-with-string-input-port . G507a) (call-with-string-io . G5079) (string-split . G5078) (bytevector-for-each . G5077) (string->regexp . G5076) (rxmatch . G5075) (regexp-replace-all . G5074) (hashtable-for-each . G5073) (readdir . G506f) (set-current-directory! . G506e) (expand-path . G506d) (current-directory . G506c) (p . G505d) (get-timeofday . G505a) (get-command-line . G5059) (sys-display . G5058) (source-info . G5057) (make-compiler-instruction . G5056) (make-instruction . G5055) (set-source-info! . G5054) (bignum? . G5053) (fast-equal? . G5052) (fasl-read . G5051) (fasl-write . G5050) (include . G4ded)) '() values values '#f '#f '#f '#f) (G2b6f@G2a14@install-library 'G50d5 '(system) '() '() '() '() '((call-process . G5072) (local-tz-offset . G5071) (microseconds . G5070) (expand-path . G506d) (%spawn . G506b) (%waitpid . G506a) (%ffi-supported? . G5069) (%ffi-pointer-ref . G5068) (%ffi-pointer->string . G5067) (%ffi-call->string-or-zero . G5066) (%ffi-call->double . G5065) (%ffi-call->void* . G5064) (%ffi-call->void . G5063) (%ffi-call->int . G5062) (%ffi-lookup . G5061) (%ffi-open . G5060) (%fork . G505f) (%pipe . G505e) (get-environment-variables . G505c) (get-environment-variable . G505b) (make-parameter . G282b) (parameterize . G4de8)) '() values values '#f '#f '#f '#f) (G2b6f@G2a14@install-library 'G50d6 '(srfi :1) '() '() '() '() '((dotted-list? . G50a9) (circular-list? . G50a8) (proper-list? . G50a7) (circular-list . G50a6) (last . G50a5) (last-pair . G50a4) (not-pair? . G50a3) (split-at! . G50a2) (split-at . G50a1) (list= . G50a0) (list-copy . G509f) (list-tabulate . G509e) (make-list . G509d) (xcons . G509c) (tenth . G509b) (ninth . G509a) (eighth . G5099) (seventh . G5098) (sixth . G5097) (fifth . G5096) (drop-right! . G5095) (drop-right . G5094) (take-right . G5093) (take! . G5092) (drop . G5091) (take . G5090) (car+cdr . G508f) (fourth . G508e) (third . G508d) (second . G508c) (first . G508b) (iota . G508a) (every . G5089) (alist-cons . G5085) (append-map . G5084)) '() values values '#f '#f '#f '#f))
((lambda (G4cfb@add-library-path! G4cfd@parse-and-add-library-path G4cff@for-each-with-index G4d01@conditioon-printer G4d03@repl G4d05@trace-printer G4d07@command-line G4d09@local-library-path G4d0b@load/args G4d0d@load G4d0f@ironscheme-build G4d11@eval-top-level G4d13@compile-system-libraries G4d15@compile G4d17@compile->closure G4d19@pre-compile-r6rs-file G4d1b@load-r6rs-top-level) (begin (set! G4cfb@add-library-path! (lambda (G4d36@path) (G2b5f@G29f4@library-path (append (G2b5f@G29f4@library-path) (list G4d36@path))))) (set! G4cfd@parse-and-add-library-path (lambda (G4d38@paths G4d39@message) ((lambda (G4d3c@t) (if G4d3c@t ((lambda (G4d3e@paths) (for-each (lambda (G4d40@path) (if (file-exists? G4d40@path) (G4cfb@add-library-path! (expand-path G4d40@path)) (format (current-error-port) G4d39@message G4d40@path))) (reverse (string-split G4d3e@paths '#\:)))) G4d3c@t) (void))) G4d38@paths))) (set! G4cff@for-each-with-index (lambda (G4d42@proc G4d43@lst) (letrec ((G4d46@loop (lambda (G4d48@i G4d49@lst) (if (null? G4d49@lst) (if '#f '#f (void)) (begin (G4d42@proc G4d48@i (car G4d49@lst)) (G4d46@loop (+ G4d48@i '1) (cdr G4d49@lst))))))) (G4d46@loop '1 G4d43@lst)))) (set! G4d01@conditioon-printer (lambda (G4d4c@e G4d4d@port) ((lambda (G4d51@ref) (begin (set! G4d51@ref (lambda (G4d60@rtd G4d61@i G4d62@x) ((lambda (G4d66@val) (if (symbol? G4d66@val) (ungensym G4d66@val) G4d66@val)) ((record-accessor G4d60@rtd G4d61@i) G4d62@x)))) (begin (display '" Condition components:\n" G4d4d@port) (G4cff@for-each-with-index (lambda (G4d52@i G4d53@x) ((lambda (G4d56@rtd) (begin (format G4d4d@port '"   ~d. ~a" G4d52@i (record-type-name G4d56@rtd)) ((lambda (G4d58@v) ((lambda (G4d5a@t) (if (memv G4d5a@t '(0)) (newline G4d4d@port) (if (memv G4d5a@t '(1)) (begin (display '": " G4d4d@port) (write (G4d51@ref G4d56@rtd '0 G4d53@x) G4d4d@port) (newline G4d4d@port)) (begin (display '":\n" G4d4d@port) ((letrec ((G4d5c@f (lambda (G4d5e@i) (if (not (= G4d5e@i (vector-length G4d58@v))) (begin (display '"       " G4d4d@port) (display (vector-ref G4d58@v G4d5e@i) G4d4d@port) (display '": " G4d4d@port) (write (G4d51@ref G4d56@rtd G4d5e@i G4d53@x) G4d4d@port) (newline G4d4d@port) (G4d5c@f (+ G4d5e@i '1))) (void))))) G4d5c@f) '0))))) (vector-length G4d58@v))) (record-type-field-names G4d56@rtd)))) (record-rtd G4d53@x))) (simple-conditions G4d4c@e))))) '#f))) (set! G4d03@repl (lambda G4d68@x ((lambda (G4d6b@rec) (begin (set! G4d6b@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d6e@G4d6c) (lambda () (with-exception-handler (lambda (G4d70@e) ((call/cc (lambda (G4d72@G4d6d) (G4d6e@G4d6c (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? G4d70@e) (G4d01@conditioon-printer G4d70@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" G4d70@e))) (G4d72@G4d6d (lambda () (raise-continuable G4d70@e)))))))))) (lambda () ((letrec ((G4d74@loop (lambda (G4d76@line G4d77@accum) ((lambda (G4d7b@parentheses-ok? G4d7d@eval-string-print) (begin (set! G4d7b@parentheses-ok? (lambda (G4d82@text) ((letrec ((G4d84@loop (lambda (G4d86@chars G4d87@p0 G4d88@p1) (if (null? G4d86@chars) (= '0 G4d87@p0 G4d88@p1) ((lambda (G4d8c@t) (if (memv G4d8c@t '(#\()) (G4d84@loop (cdr G4d86@chars) (+ G4d87@p0 '1) G4d88@p1) (if (memv G4d8c@t '(#\))) (G4d84@loop (cdr G4d86@chars) (- G4d87@p0 '1) G4d88@p1) (if (memv G4d8c@t '(#\[)) (G4d84@loop (cdr G4d86@chars) G4d87@p0 (+ G4d88@p1 '1)) (if (memv G4d8c@t '(#\])) (G4d84@loop (cdr G4d86@chars) G4d87@p0 (- G4d88@p1 '1)) (G4d84@loop (cdr G4d86@chars) G4d87@p0 G4d88@p1)))))) (car G4d86@chars)))))) G4d84@loop) (string->list G4d82@text) '0 '0))) (set! G4d7d@eval-string-print (lambda (G4d80@text) (if (not (or (string=? '"\n" G4d80@text) (= '0 (string-length G4d80@text)))) (write (G4d11@eval-top-level (call-with-port (open-string-input-port G4d80@text) read))) (void)))) (if (eof-object? G4d76@line) (begin (G4d7d@eval-string-print G4d77@accum) (exit)) ((lambda (G4d7e@current) (if (G4d7b@parentheses-ok? G4d7e@current) (G4d7d@eval-string-print G4d7e@current) (G4d74@loop (get-line (current-input-port)) G4d7e@current))) (string-append G4d77@accum G4d76@line))))) '#f '#f)))) G4d74@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d6b@rec)))) (G4d6b@rec))) '#f))) (set! G4d05@trace-printer (G28f6@G282c@make-parameter write)) (set! G4d07@command-line (G28f6@G282c@make-parameter (get-command-line))) (set! G4d09@local-library-path (lambda (G4d8e@filename) (cons (expand-path '".") (G2b5f@G29f4@library-path)))) (set! G4d0b@load/args (lambda (G4d90@filename . G4d92@args) (begin (apply G4d1b@load-r6rs-top-level G4d90@filename 'load G4d92@args) (void)))) (set! G4d0d@load (lambda (G4d94@filename) (begin (apply G4d1b@load-r6rs-top-level G4d94@filename 'load (G4d07@command-line)) (void)))) (set! G4d0f@ironscheme-build (lambda () (G4d0d@load '"ironscheme-buildscript.ss"))) (set! G4d11@eval-top-level (lambda (G4d96@x) (G4931@G3024@eval G4d96@x (G4947@G3050@interaction-environment)))) (set! G4d13@compile-system-libraries (lambda () (G4d11@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d15@compile (lambda (G4d98@filename) (G4d1b@load-r6rs-top-level G4d98@filename 'compile))) (set! G4d17@compile->closure (lambda (G4d9a@filename) (G4d1b@load-r6rs-top-level G4d9a@filename 'closure))) (set! G4d19@pre-compile-r6rs-file (lambda (G4d9c@filename) (G4d1b@load-r6rs-top-level G4d9c@filename 'compile))) (set! G4d1b@load-r6rs-top-level (lambda (G4d9e@filename G4d9f@how . G4da2@args) ((lambda (G4da6@G4da4 G4da7@G4da5) ((lambda (G4daa@swap) (dynamic-wind G4daa@swap (lambda () ((lambda (G4dac@x*) ((lambda (G4dae@t) (if (memv G4dae@t '(closure)) (G4946@G304e@pre-compile-r6rs-top-level G4dac@x*) (if (memv G4dae@t '(load)) ((lambda (G4db2@G4db0 G4db3@G4db1) ((lambda (G4db6@swap) (dynamic-wind G4db6@swap (lambda () ((G4945@G304c@compile-r6rs-top-level G4dac@x*))) G4db6@swap)) (lambda () ((lambda (G4db8@t) (begin (G4db2@G4db0 G4db3@G4db1) (set! G4db3@G4db1 G4db8@t))) (G4db2@G4db0))))) G4d07@command-line (cons G4d9e@filename (car G4da2@args))) (if (memv G4dae@t '(compile)) (begin (G4945@G304c@compile-r6rs-top-level G4dac@x*) (G2b63@G29fc@serialize-all G28f1@G2822@serialize-library G294b@G2904@compile-core-expr)) (if '#f '#f (void)))))) G4d9f@how)) (with-input-from-file G4d9e@filename (lambda () ((letrec ((G4dba@f (lambda () ((lambda (G4dbc@x) (if (eof-object? G4dbc@x) '() (cons G4dbc@x (G4dba@f)))) (G28e9@G2812@read-annotated))))) G4dba@f)))))) G4daa@swap)) (lambda () ((lambda (G4dbe@t) (begin (G4da6@G4da4 G4da7@G4da5) (set! G4da7@G4da5 G4dbe@t))) (G4da6@G4da4))))) G2b5f@G29f4@library-path (G4d09@local-library-path G4d9e@filename)))) (begin (set! G4dd0@G4d1b@load-r6rs-top-level G4d1b@load-r6rs-top-level) (set! G4dcf@G4d19@pre-compile-r6rs-file G4d19@pre-compile-r6rs-file) (set! G4dce@G4d17@compile->closure G4d17@compile->closure) (set! G4dcd@G4d15@compile G4d15@compile) (set! G4dcc@G4d13@compile-system-libraries G4d13@compile-system-libraries) (set! G4dcb@G4d11@eval-top-level G4d11@eval-top-level) (set! G4dca@G4d0f@ironscheme-build G4d0f@ironscheme-build) (set! G4dc9@G4d0d@load G4d0d@load) (set! G4dc8@G4d0b@load/args G4d0b@load/args) (set! G4dc7@G4d09@local-library-path G4d09@local-library-path) (set! G4dc6@G4d07@command-line G4d07@command-line) (set! G4dc5@G4d05@trace-printer G4d05@trace-printer) (set! G4dc4@G4d03@repl G4d03@repl) (set! G4dc3@G4d01@conditioon-printer G4d01@conditioon-printer) (set! G4dc2@G4cff@for-each-with-index G4cff@for-each-with-index) (set! G4dc1@G4cfd@parse-and-add-library-path G4cfd@parse-and-add-library-path) (set! G4dc0@G4cfb@add-library-path! G4cfb@add-library-path!) (G2b64@G29fe@current-precompiled-library-loader G28f2@G2824@load-serialized-library) (set-symbol-value! 'load G4d0d@load) (set-symbol-value! 'pre-compile-r6rs-file G4d19@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d11@eval-top-level) (set-symbol-value! 'int-env-syms G4928@G3012@interaction-environment-symbols) (set-symbol-value! 'expanded2core G294a@G2902@expanded->core) (set-symbol-value! 'trace-printer G4d05@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d1c@c) (condition (G4c58@G4a68@make-non-continuable-violation) (G4c4e@G4a4f@make-who-condition 'raise) (G4c12@G49b2@make-message-condition '"returned from non-continuable exception") (G4c44@G4a35@make-irritants-condition (list G4d1c@c))))) (G4cfd@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4cfd@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b5f@G29f4@library-path (append (G2b5f@G29f4@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) (display (G2b5f@G29f4@library-path)) ((lambda (G4d1e@prefix) (G2b60@G29f6@library-extensions (G4d1e@prefix '".mosh" (G2b60@G29f6@library-extensions)))) (lambda (G4d20@ext G4d21@ls) (append (map (lambda (G4d24@x) (string-append G4d20@ext G4d24@x)) G4d21@ls) G4d21@ls))) ((lambda (G4d26@args G4d27@port) ((lambda (G4d2b@ref) (begin (set! G4d2b@ref (lambda (G4d2e@rtd G4d2f@i G4d30@x) ((lambda (G4d34@val) (if (symbol? G4d34@val) (ungensym G4d34@val) G4d34@val)) ((record-accessor G4d2e@rtd G4d2f@i) G4d30@x)))) (with-exception-handler (lambda (G4d2c@c) (if (condition? G4d2c@c) (G4d01@conditioon-printer G4d2c@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" G4d2c@c))) (lambda () (if (null? G4d26@args) (G4d03@repl) (G4d1b@load-r6rs-top-level (car G4d26@args) 'load (cdr G4d26@args))))))) '#f)) (G4d07@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
