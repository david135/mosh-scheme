;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2877@read-annotated G2879@annotation-stripped G287b@annotation? G287d@annotation-source G287f@annotation-expression G2881@scm->fasl G2883@serialize-library G2885@load-serialized-library G2887@make-record-printer G2889@compile-core G288b@read-library-source-file G288d@make-parameter G2927@file-options-spec) (begin (set! G2877@read-annotated read) (set! G2879@annotation-stripped (lambda (G2928@x) (G287f@annotation-expression G2928@x))) (set! G287b@annotation? (lambda (G292a@x) (source-info G292a@x))) (set! G287d@annotation-source (lambda (G292c@x) (source-info G292c@x))) (set! G287f@annotation-expression (lambda (G292e@x) (if (pair? G292e@x) (cons (car G292e@x) (cdr G292e@x)) (display '"line:46\n")))) (set! G2881@scm->fasl (lambda (G2930@filename) (string-append G2930@filename '".fasl"))) (set! G2883@serialize-library (lambda (G2932@filename G2933@obj) (begin (format '#t '"serialize-library ~a\n..." G2932@filename) ((lambda (G2936@fasl-file) (begin (if (file-exists? G2936@fasl-file) (delete-file G2936@fasl-file) (void)) (call/cc (lambda (G2939@G2938) (with-exception-handler (lambda (G293b@c) (G2939@G2938 (if '#t (begin (format '#t '"Warning:serialize-library failed " G2932@filename) '#f) (raise G293b@c)))) (lambda () (begin '#f (call-with-port (open-output-file G2936@fasl-file) (lambda (G293d@port) (write G2933@obj G293d@port))) (display '"OK\n")))))))) (G2881@scm->fasl G2932@filename))))) (set! G2885@load-serialized-library (lambda (G293f@filename G2940@obj) ((lambda (G2943@fasl-file) (if (file-exists? G2943@fasl-file) ((lambda (G2945@expanded2core) ((lambda (G2947@code) ((lambda (G2949@pivot) ((lambda (G294b@visit) ((lambda (G294d@visit-proc) ((lambda () (begin (set-car! G2949@pivot G294d@visit-proc) ((lambda (G294f@pivot) ((lambda (G2951@invoke) ((lambda () (begin (set-car! G294f@pivot (lambda () (eval-core G2951@invoke))) (apply G2940@obj G2947@code))))) (G2945@expanded2core (car G294f@pivot)))) (cdr G2949@pivot)) '#t)))) (lambda () (eval-core G294b@visit)))) (G2945@expanded2core (car G2949@pivot)))) (cddddr (cddddr G2947@code)))) (call-with-port (open-input-file G2943@fasl-file) read))) (symbol-value 'expanded2core)) '#f)) (G2881@scm->fasl G293f@filename)))) (set! G2887@make-record-printer (lambda (G2953@name G2954@printer) (lambda G2957@x (begin (display '"record printer") (for-each display G2957@x))))) (set! G2889@compile-core (lambda G2959@x (apply error 'comile-core '"not implementated" G2959@x))) (set! G288b@read-library-source-file (lambda (G295b@file-name) (with-input-from-file G295b@file-name G2877@read-annotated))) (set! G288d@make-parameter (lambda G296b ((lambda (G296c) (if (= G296c '1) (apply (lambda (G295d@x) (G288d@make-parameter G295d@x (lambda (G295f@x) G295f@x))) G296b) (if (= G296c '2) (apply (lambda (G2961@x G2962@fender) ((lambda (G2965@x) (lambda G2969 ((lambda (G296a) (if (= G296a '0) (apply (lambda () G2965@x) G2969) (if (= G296a '1) (apply (lambda (G2967@v) (set! G2965@x (G2962@fender G2967@v))) G2969) (error 'apply '"invalid arg count")))) (length G2969)))) (G2962@fender G2961@x))) G296b) (error 'apply '"invalid arg count")))) (length G296b)))) (set! G2927@file-options-spec (lambda (G296d@x) G296d@x)) (begin (set! G297b@G2927@file-options-spec G2927@file-options-spec) (set! G297a@G288d@make-parameter G288d@make-parameter) (set! G2979@G288b@read-library-source-file G288b@read-library-source-file) (set! G2978@G2889@compile-core G2889@compile-core) (set! G2977@G2887@make-record-printer G2887@make-record-printer) (set! G2976@G2885@load-serialized-library G2885@load-serialized-library) (set! G2975@G2883@serialize-library G2883@serialize-library) (set! G2974@G2881@scm->fasl G2881@scm->fasl) (set! G2973@G287f@annotation-expression G287f@annotation-expression) (set! G2972@G287d@annotation-source G287d@annotation-source) (set! G2971@G287b@annotation? G287b@annotation?) (set! G2970@G2879@annotation-stripped G2879@annotation-stripped) (set! G296f@G2877@read-annotated G2877@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2980@current-primitive-locations G2982@mutable? G2984@rewriter G2986@expanded->core G2988@compile-core-expr G298a@pretty-print G298c@compile-core-expr-to-port) (begin (set! G2980@current-primitive-locations (G297a@G288d@make-parameter (lambda (G298d@x) '#f) (lambda (G298f@p) G298f@p))) (set! G2982@mutable? (lambda (G2991@x) ((lambda (G2994@simple?) (begin (set! G2994@simple? (lambda (G2995@x) ((lambda (G2997@t) (if G2997@t G2997@t ((lambda (G2999@t) (if G2999@t G2999@t ((lambda (G299b@t) (if G299b@t G299b@t ((lambda (G299d@t) (if G299d@t G299d@t ((lambda (G299f@t) (if G299f@t G299f@t ((lambda (G29a1@t) (if G29a1@t G29a1@t (begin '#f (number? G2995@x)))) (bytevector? G2995@x)))) (string? G2995@x)))) (boolean? G2995@x)))) (symbol? G2995@x)))) (char? G2995@x)))) (null? G2995@x)))) (not (G2994@simple? G2991@x)))) '#f))) (set! G2984@rewriter (lambda (G29a3@quote-hack?) ((lambda (G29a6@f) (begin (set! G29a6@f (lambda (G29a7@x) (if (pair? G29a7@x) ((lambda (G29a9@t) (if (memv G29a9@t '(quote)) (if (if G29a3@quote-hack? (begin '#f (G2982@mutable? (cadr G29a7@x))) '#f) ((lambda (G29ab@g) (begin (set-symbol-value! G29ab@g (cadr G29a7@x)) G29ab@g)) (gensym)) G29a7@x) (if (memv G29a9@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29ad@x) (cons (car G29ad@x) (map G29a6@f (cdr G29ad@x)))) (cdr G29a7@x))) (if (memv G29a9@t '(lambda)) (cons* 'lambda (cadr G29a7@x) (map G29a6@f (cddr G29a7@x))) (if (memv G29a9@t '(letrec)) ((lambda (G29af@bindings G29b0@body*) ((lambda (G29b3@lhs* G29b4@rhs*) (cons* 'letrec (map list G29b3@lhs* (map G29a6@f G29b4@rhs*)) (map G29a6@f G29b0@body*))) (map car G29af@bindings) (map cadr G29af@bindings))) (cadr G29a7@x) (cddr G29a7@x)) (if (memv G29a9@t '(letrec*)) ((lambda (G29b7@bindings G29b8@body*) ((lambda (G29bb@lhs* G29bc@rhs*) (cons* 'letrec* (map list G29bb@lhs* (map G29a6@f G29bc@rhs*)) (map G29a6@f G29b8@body*))) (map car G29b7@bindings) (map cadr G29b7@bindings))) (cadr G29a7@x) (cddr G29a7@x)) (if (memv G29a9@t '(library-letrec*)) ((lambda (G29bf@name G29c0@x) ((lambda (G29c3@bindings G29c4@body*) ((lambda (G29c7@lhs* G29c8@lhs** G29c9@rhs*) (cons* 'library-letrec* G29bf@name (map list G29c7@lhs* G29c8@lhs** (map G29a6@f G29c9@rhs*)) (map G29a6@f G29c4@body*))) (map car G29c3@bindings) (map cadr G29c3@bindings) (map caddr G29c3@bindings))) (cadr G29c0@x) (cddr G29c0@x))) (cadr G29a7@x) (cdr G29a7@x)) (if (memv G29a9@t '(begin)) (cons 'begin (map G29a6@f (cdr G29a7@x))) (if (memv G29a9@t '(set!)) (list 'set! (cadr G29a7@x) (G29a6@f (caddr G29a7@x))) (if (memv G29a9@t '(primitive)) ((lambda (G29cd@op) ((lambda (G29cf@t) (if G29cf@t ((lambda (G29d1@loc) G29d1@loc) G29cf@t) G29cd@op)) ((G2980@current-primitive-locations) G29cd@op))) (cadr G29a7@x)) (if (memv G29a9@t '(define)) G29a7@x (if (list? G29a7@x) (map G29a6@f G29a7@x) (error 'rewrite '"invalid form ~s ~s" G29a7@x (list? G29a7@x)))))))))))))) (car G29a7@x)) G29a7@x))) G29a6@f)) '#f))) (set! G2986@expanded->core (lambda (G29d3@x) ((G2984@rewriter '#t) G29d3@x))) (set! G2988@compile-core-expr (lambda (G29d5@x) ((G2984@rewriter '#f) G29d5@x))) (set! G298a@pretty-print write) (set! G298c@compile-core-expr-to-port (lambda (G29d7@x G29d8@p) (G298a@pretty-print ((G2984@rewriter '#f) G29d7@x) G29d8@p))) (begin (set! G29e1@G298c@compile-core-expr-to-port G298c@compile-core-expr-to-port) (set! G29e0@G298a@pretty-print G298a@pretty-print) (set! G29df@G2988@compile-core-expr G2988@compile-core-expr) (set! G29de@G2986@expanded->core G2986@expanded->core) (set! G29dd@G2984@rewriter G2984@rewriter) (set! G29dc@G2982@mutable? G2982@mutable?) (set! G29db@G2980@current-primitive-locations G2980@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a3b@make-collection G2a3d@current-library-collection G2a43@G2a3e G2a45@G2a40 G2a47@G2a3f G2a4c@library? G2a4e@make-library G2a50@library-id G2a52@library-name G2a54@library-version G2a56@library-imp* G2a58@library-vis* G2a5a@library-inv* G2a5c@library-subst G2a5e@library-env G2a60@library-visit-state G2a62@library-invoke-state G2a64@library-visit-code G2a66@library-invoke-code G2a68@library-visible? G2a6a@library-source-file-name G2a6c@set-library-id! G2a6e@set-library-name! G2a70@set-library-version! G2a72@set-library-imp*! G2a74@set-library-vis*! G2a76@set-library-inv*! G2a78@set-library-subst! G2a7a@set-library-env! G2a7c@set-library-visit-state! G2a7e@set-library-invoke-state! G2a80@set-library-visit-code! G2a82@set-library-invoke-code! G2a84@set-library-visible?! G2a86@set-library-source-file-name! G2a88@rp G2a8a@find-dependencies G2a8c@find-library-by G2a8e@library-path G2a90@library-extensions G2a92@library-name->file-name G2a94@file-locator G2a96@serialize-all G2a98@current-precompiled-library-loader G2a9a@try-load-from-file G2a9c@library-loader G2a9e@current-library-expander G2aa0@external-pending-libraries G2aa2@find-external-library G2aa4@find-library-by-name G2aa6@library-exists? G2aa8@find-library-by-spec/die G2aaa@label->binding-table G2aac@install-library-record G2aae@install-library G2ab0@imported-label->binding G2ab2@invoke-library G2ab4@visit-library G2ab6@invoke-library-by-spec G2ab8@installed-libraries G2aba@library-spec) (begin (set! G2a3b@make-collection (lambda () ((lambda (G2abb@set) ((lambda (G2abe@set-cons) (begin (set! G2abe@set-cons (lambda (G2ac3@x G2ac4@ls) (if (memq G2ac3@x G2ac4@ls) G2ac4@ls (cons G2ac3@x G2ac4@ls)))) (lambda G2ac1 ((lambda (G2ac2) (if (= G2ac2 '0) (apply (lambda () G2abb@set) G2ac1) (if (= G2ac2 '1) (apply (lambda (G2abf@x) (set! G2abb@set (G2abe@set-cons G2abf@x G2abb@set))) G2ac1) (error 'apply '"invalid arg count")))) (length G2ac1))))) '#f)) '()))) (set! G2a3d@current-library-collection (G297a@G288d@make-parameter (G2a3b@make-collection) (lambda (G2ac7@x) (begin (if (not (procedure? G2ac7@x)) (assertion-violation 'current-library-collection '"not a procedure" G2ac7@x) (void)) G2ac7@x)))) (set! G2a43@G2a3e (make-record-type-descriptor 'library '#f 'G2a41 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a45@G2a40 '#f) (set! G2a47@G2a3f (make-record-constructor-descriptor G2a43@G2a3e '#f G2a45@G2a40)) (set! G2a4c@library? (record-predicate G2a43@G2a3e)) (set! G2a4e@make-library (record-constructor G2a47@G2a3f)) (set! G2a50@library-id (record-accessor G2a43@G2a3e '0)) (set! G2a52@library-name (record-accessor G2a43@G2a3e '1)) (set! G2a54@library-version (record-accessor G2a43@G2a3e '2)) (set! G2a56@library-imp* (record-accessor G2a43@G2a3e '3)) (set! G2a58@library-vis* (record-accessor G2a43@G2a3e '4)) (set! G2a5a@library-inv* (record-accessor G2a43@G2a3e '5)) (set! G2a5c@library-subst (record-accessor G2a43@G2a3e '6)) (set! G2a5e@library-env (record-accessor G2a43@G2a3e '7)) (set! G2a60@library-visit-state (record-accessor G2a43@G2a3e '8)) (set! G2a62@library-invoke-state (record-accessor G2a43@G2a3e '9)) (set! G2a64@library-visit-code (record-accessor G2a43@G2a3e '10)) (set! G2a66@library-invoke-code (record-accessor G2a43@G2a3e '11)) (set! G2a68@library-visible? (record-accessor G2a43@G2a3e '12)) (set! G2a6a@library-source-file-name (record-accessor G2a43@G2a3e '13)) (set! G2a6c@set-library-id! (record-mutator G2a43@G2a3e '0)) (set! G2a6e@set-library-name! (record-mutator G2a43@G2a3e '1)) (set! G2a70@set-library-version! (record-mutator G2a43@G2a3e '2)) (set! G2a72@set-library-imp*! (record-mutator G2a43@G2a3e '3)) (set! G2a74@set-library-vis*! (record-mutator G2a43@G2a3e '4)) (set! G2a76@set-library-inv*! (record-mutator G2a43@G2a3e '5)) (set! G2a78@set-library-subst! (record-mutator G2a43@G2a3e '6)) (set! G2a7a@set-library-env! (record-mutator G2a43@G2a3e '7)) (set! G2a7c@set-library-visit-state! (record-mutator G2a43@G2a3e '8)) (set! G2a7e@set-library-invoke-state! (record-mutator G2a43@G2a3e '9)) (set! G2a80@set-library-visit-code! (record-mutator G2a43@G2a3e '10)) (set! G2a82@set-library-invoke-code! (record-mutator G2a43@G2a3e '11)) (set! G2a84@set-library-visible?! (record-mutator G2a43@G2a3e '12)) (set! G2a86@set-library-source-file-name! (record-mutator G2a43@G2a3e '13)) (set! G2a88@rp (G2977@G2887@make-record-printer 'library (lambda (G2ac9@x G2aca@p G2acb@wr) (begin (if (not (G2a4c@library? G2ac9@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a54@library-version G2ac9@x)) (G2a52@library-name G2ac9@x) (append (G2a52@library-name G2ac9@x) (list (G2a54@library-version G2ac9@x))))) G2aca@p))))) (set! G2a8a@find-dependencies (lambda (G2acf@ls) (if (null? G2acf@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2a8c@find-library-by (lambda (G2ad1@pred) ((letrec ((G2ad3@f (lambda (G2ad5@ls) (if (null? G2ad5@ls) '#f (if (G2ad1@pred (car G2ad5@ls)) (car G2ad5@ls) (G2ad3@f (cdr G2ad5@ls))))))) G2ad3@f) ((G2a3d@current-library-collection))))) (set! G2a8e@library-path (G297a@G288d@make-parameter '(".") (lambda (G2ad7@x) (if (if (list? G2ad7@x) (begin '#f (for-all string? G2ad7@x)) '#f) (map (lambda (G2ad9@x) G2ad9@x) G2ad7@x) (assertion-violation 'library-path '"not a list of strings" G2ad7@x))))) (set! G2a90@library-extensions (G297a@G288d@make-parameter '(".sls" ".ss" ".scm") (lambda (G2adb@x) (if (if (list? G2adb@x) (begin '#f (for-all string? G2adb@x)) '#f) (map (lambda (G2add@x) G2add@x) G2adb@x) (assertion-violation 'library-extensions '"not a list of strings" G2adb@x))))) (set! G2a92@library-name->file-name (lambda (G2adf@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2ae3@G2ae1 G2ae4@G2ae2) ((lambda (G2ae7@extract G2ae8@p) ((lambda (G2aec@display-hex) (begin (set! G2aec@display-hex (lambda (G2afb@n) (if (<= '0 G2afb@n '9) (display G2afb@n G2ae8@p) (display (integer->char (+ (char->integer '#\A) (- G2afb@n '10))) G2ae8@p)))) (begin ((letrec ((G2aed@f (lambda (G2aef@ls) (if (not (null? G2aef@ls)) (begin (display '"/" G2ae8@p) (for-each (lambda (G2af1@c) (if ((lambda (G2af3@t) (if G2af3@t G2af3@t ((lambda (G2af5@t) (if G2af5@t G2af5@t ((lambda (G2af7@t) (if G2af7@t G2af7@t (begin '#f (memv G2af1@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2af1@c '#\9)))) (char<=? '#\A G2af1@c '#\Z)))) (char<=? '#\a G2af1@c '#\z)) (display G2af1@c G2ae8@p) (begin (display '"%" G2ae8@p) ((lambda (G2af9@n) (begin (G2aec@display-hex (quotient G2af9@n '16)) (G2aec@display-hex (remainder G2af9@n '16)))) (char->integer G2af1@c))))) (string->list (symbol->string (car G2aef@ls)))) (G2aed@f (cdr G2aef@ls))) (void))))) G2aed@f) G2adf@x) (G2ae7@extract)))) '#f)) G2ae4@G2ae2 G2ae3@G2ae1))))) (set! G2a94@file-locator (G297a@G288d@make-parameter (lambda (G2afd@x) ((lambda (G2aff@str) ((letrec ((G2b01@f (lambda (G2b03@ls G2b04@exts G2b05@failed-list) (if (null? G2b03@ls) ((lambda () ((lambda (G2b11@G2b0c G2b13@G2b0e G2b15@G2b0d G2b1a@G2b0b G2b1c@make-library-resolution-condition G2b1e@G2b09 G2b20@G2b0a G2b22@library-resolution-condition? G2b24@condition-library G2b26@condition-files) (begin (set! G2b11@G2b0c (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b0f '#f '#f '#((immutable library) (immutable files)))) (set! G2b13@G2b0e '#f) (set! G2b15@G2b0d (make-record-constructor-descriptor G2b11@G2b0c &condition-rcd G2b13@G2b0e)) (set! G2b1a@G2b0b (record-predicate G2b11@G2b0c)) (set! G2b1c@make-library-resolution-condition (record-constructor G2b15@G2b0d)) (set! G2b1e@G2b09 (record-accessor G2b11@G2b0c '0)) (set! G2b20@G2b0a (record-accessor G2b11@G2b0c '1)) (set! G2b22@library-resolution-condition? (condition-predicate G2b11@G2b0c)) (set! G2b24@condition-library (condition-accessor G2b11@G2b0c G2b1e@G2b09)) (set! G2b26@condition-files (condition-accessor G2b11@G2b0c G2b20@G2b0a)) (raise (condition (G4bff@G4b15@make-error) (G4c19@G4b6b@make-who-condition 'expander) (G4beb@G4ad5@make-message-condition '"cannot locate library in library-path") (G2b1c@make-library-resolution-condition G2afd@x (reverse G2b05@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b04@exts) (G2b01@f (cdr G2b03@ls) (G2a90@library-extensions) G2b05@failed-list) ((lambda (G2b27@name) (if (file-exists? G2b27@name) G2b27@name (G2b01@f G2b03@ls (cdr G2b04@exts) (cons G2b27@name G2b05@failed-list)))) (string-append (car G2b03@ls) G2aff@str (car G2b04@exts)))))))) G2b01@f) (G2a8e@library-path) (G2a90@library-extensions) '())) (G2a92@library-name->file-name G2afd@x))) (lambda (G2b29@f) (if (procedure? G2b29@f) G2b29@f (assertion-violation 'file-locator '"not a procedure" G2b29@f))))) (set! G2a96@serialize-all (lambda (G2b2b@serialize G2b2c@compile) ((lambda (G2b30@library-desc) (begin (set! G2b30@library-desc (lambda (G2b33@x) (list (G2a50@library-id G2b33@x) (G2a52@library-name G2b33@x)))) (for-each (lambda (G2b31@x) (if (G2a6a@library-source-file-name G2b31@x) (G2b2b@serialize (G2a6a@library-source-file-name G2b31@x) (list (G2a50@library-id G2b31@x) (G2a52@library-name G2b31@x) (G2a54@library-version G2b31@x) (map G2b30@library-desc (G2a56@library-imp* G2b31@x)) (map G2b30@library-desc (G2a58@library-vis* G2b31@x)) (map G2b30@library-desc (G2a5a@library-inv* G2b31@x)) (G2a5c@library-subst G2b31@x) (G2a5e@library-env G2b31@x) (G2b2c@compile (G2a64@library-visit-code G2b31@x)) (G2b2c@compile (G2a66@library-invoke-code G2b31@x)) (G2a68@library-visible? G2b31@x))) (void))) ((G2a3d@current-library-collection))))) '#f))) (set! G2a98@current-precompiled-library-loader (G297a@G288d@make-parameter (lambda (G2b35@filename G2b36@sk) '#f))) (set! G2a9a@try-load-from-file (lambda (G2b39@filename) ((G2a98@current-precompiled-library-loader) G2b39@filename (lambda G2b5f ((lambda (G2b60) (if (= G2b60 '11) (apply (lambda (G2b3b@id G2b3c@name G2b3d@ver G2b3e@imp* G2b3f@vis* G2b40@inv* G2b41@exp-subst G2b42@exp-env G2b43@visit-proc G2b44@invoke-proc G2b45@visible?) ((letrec ((G2b51@f (lambda (G2b53@deps) (if (null? G2b53@deps) (begin (G2aae@install-library G2b3b@id G2b3c@name G2b3d@ver G2b3e@imp* G2b3f@vis* G2b40@inv* G2b41@exp-subst G2b42@exp-env G2b43@visit-proc G2b44@invoke-proc '#f '#f G2b45@visible? '#f) '#t) ((lambda (G2b55@d) ((lambda (G2b57@label G2b58@dname) ((lambda (G2b5b@l) (if (if (G2a4c@library? G2b5b@l) (begin '#f (eq? G2b57@label (G2a50@library-id G2b5b@l))) '#f) (G2b51@f (cdr G2b53@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b3c@name G2b58@dname G2b39@filename G2b5b@l G2b57@label (G2a50@library-id G2b5b@l)) '#f))) (G2aa4@find-library-by-name G2b58@dname))) (car G2b55@d) (cadr G2b55@d))) (car G2b53@deps)))))) G2b51@f) (append G2b3e@imp* G2b3f@vis* G2b40@inv*))) G2b5f) (if (>= G2b60 '0) (apply (lambda G2b5d@others '#f) G2b5f) (error 'apply '"invalid arg count")))) (length G2b5f)))))) (set! G2a9c@library-loader (G297a@G288d@make-parameter (lambda (G2b61@x) ((lambda (G2b63@file-name) (if (not G2b63@file-name) (assertion-violation '#f '"cannot file library" G2b61@x) ((lambda (G2b65@t) (if G2b65@t G2b65@t (begin '#f ((G2a9e@current-library-expander) (G2979@G288b@read-library-source-file G2b63@file-name) G2b63@file-name (lambda (G2b67@name) (if (not (equal? G2b67@name G2b61@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b6b@G2b69 G2b6c@G2b6a) ((lambda (G2b6f@e G2b70@p) (begin (display '"expected to find library " G2b70@p) (write G2b61@x G2b70@p) (display '" in file " G2b70@p) (display G2b63@file-name G2b70@p) (display '", found " G2b70@p) (write G2b67@name G2b70@p) (display '" instead" G2b70@p) (G2b6f@e))) G2b6c@G2b6a G2b6b@G2b69)))) (void))))))) (G2a9a@try-load-from-file G2b63@file-name)))) ((G2a94@file-locator) G2b61@x))) (lambda (G2b73@f) (if (procedure? G2b73@f) G2b73@f (assertion-violation 'library-locator '"not a procedure" G2b73@f))))) (set! G2a9e@current-library-expander (G297a@G288d@make-parameter (lambda (G2b75@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b77@f) (if (procedure? G2b77@f) G2b77@f (assertion-violation 'library-expander '"not a procedure" G2b77@f))))) (set! G2aa0@external-pending-libraries (G297a@G288d@make-parameter '())) (set! G2aa2@find-external-library (lambda (G2b79@name) (begin (if (member G2b79@name (G2aa0@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b79@name) (void)) ((lambda (G2b7d@G2b7b@external-pending-libraries G2b7e@G2b7c@external-pending-libraries) ((lambda (G2b81@swap) (dynamic-wind G2b81@swap (lambda () (begin ((G2a9c@library-loader) G2b79@name) ((lambda (G2b83@t) (if G2b83@t G2b83@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b79@name)))) (G2a8c@find-library-by (lambda (G2b85@x) (equal? (G2a52@library-name G2b85@x) G2b79@name)))))) G2b81@swap)) (lambda () ((lambda (G2b87@t) (begin (G2b7d@G2b7b@external-pending-libraries G2b7e@G2b7c@external-pending-libraries) (set! G2b7e@G2b7c@external-pending-libraries G2b87@t))) (G2b7d@G2b7b@external-pending-libraries))))) G2aa0@external-pending-libraries (cons G2b79@name (G2aa0@external-pending-libraries)))))) (set! G2aa4@find-library-by-name (lambda (G2b89@name) ((lambda (G2b8b@t) (if G2b8b@t G2b8b@t (begin '#f (G2aa2@find-external-library G2b89@name)))) (G2a8c@find-library-by (lambda (G2b8d@x) (equal? (G2a52@library-name G2b8d@x) G2b89@name)))))) (set! G2aa6@library-exists? (lambda (G2b8f@name) (if (G2a8c@find-library-by (lambda (G2b91@x) (equal? (G2a52@library-name G2b91@x) G2b8f@name))) (begin '#f '#t) '#f))) (set! G2aa8@find-library-by-spec/die (lambda (G2b93@spec) ((lambda (G2b95@id) ((lambda (G2b97@t) (if G2b97@t G2b97@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2b93@spec)))) (G2a8c@find-library-by (lambda (G2b99@x) (eq? G2b95@id (G2a50@library-id G2b99@x)))))) (car G2b93@spec)))) (set! G2aaa@label->binding-table (make-eq-hashtable)) (set! G2aac@install-library-record (lambda (G2b9b@lib) (begin ((lambda (G2b9d@exp-env) (for-each (lambda (G2b9f@x) ((lambda (G2ba1@label G2ba2@binding) ((lambda (G2ba5@binding) (hashtable-set! G2aaa@label->binding-table G2ba1@label G2ba5@binding)) ((lambda (G2ba7@t) (if (memv G2ba7@t '(global)) (cons 'global (cons G2b9b@lib (cdr G2ba2@binding))) (if (memv G2ba7@t '(global-macro)) (cons 'global-macro (cons G2b9b@lib (cdr G2ba2@binding))) (if (memv G2ba7@t '(global-macro!)) (cons 'global-macro! (cons G2b9b@lib (cdr G2ba2@binding))) G2ba2@binding)))) (car G2ba2@binding)))) (car G2b9f@x) (cdr G2b9f@x))) G2b9d@exp-env)) (G2a5e@library-env G2b9b@lib)) ((G2a3d@current-library-collection) G2b9b@lib)))) (set! G2aae@install-library (lambda (G2ba9@id G2baa@name G2bab@ver G2bac@imp* G2bad@vis* G2bae@inv* G2baf@exp-subst G2bb0@exp-env G2bb1@visit-proc G2bb2@invoke-proc G2bb3@visit-code G2bb4@invoke-code G2bb5@visible? G2bb6@source-file-name) ((lambda (G2bc5@imp-lib* G2bc6@vis-lib* G2bc7@inv-lib*) (begin (if (not (if (symbol? G2ba9@id) (if (list? G2baa@name) (begin '#f (list? G2bab@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2ba9@id G2baa@name G2bab@ver) (void)) (if (G2aa6@library-exists? G2baa@name) (assertion-violation 'install-library '"library is already installed" G2baa@name) (void)) ((lambda (G2bcb@lib) (G2aac@install-library-record G2bcb@lib)) (G2a4e@make-library G2ba9@id G2baa@name G2bab@ver G2bc5@imp-lib* G2bc6@vis-lib* G2bc7@inv-lib* G2baf@exp-subst G2bb0@exp-env G2bb1@visit-proc G2bb2@invoke-proc G2bb3@visit-code G2bb4@invoke-code G2bb5@visible? G2bb6@source-file-name)))) (map G2aa8@find-library-by-spec/die G2bac@imp*) (map G2aa8@find-library-by-spec/die G2bad@vis*) (map G2aa8@find-library-by-spec/die G2bae@inv*)))) (set! G2ab0@imported-label->binding (lambda (G2bcd@lab) (hashtable-ref G2aaa@label->binding-table G2bcd@lab '#f))) (set! G2ab2@invoke-library (lambda (G2bcf@lib) ((lambda (G2bd1@invoke) (if (procedure? G2bd1@invoke) (begin (G2a7e@set-library-invoke-state! G2bcf@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bcf@lib))) (for-each G2ab2@invoke-library (G2a5a@library-inv* G2bcf@lib)) (G2a7e@set-library-invoke-state! G2bcf@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bcf@lib))) (G2bd1@invoke) (G2a7e@set-library-invoke-state! G2bcf@lib '#t)) (void))) (G2a62@library-invoke-state G2bcf@lib)))) (set! G2ab4@visit-library (lambda (G2bd3@lib) ((lambda (G2bd5@visit) (if (procedure? G2bd5@visit) (begin (G2a7c@set-library-visit-state! G2bd3@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bd3@lib))) (for-each G2ab2@invoke-library (G2a58@library-vis* G2bd3@lib)) (G2a7c@set-library-visit-state! G2bd3@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bd3@lib))) (G2bd5@visit) (G2a7c@set-library-visit-state! G2bd3@lib '#t)) (void))) (G2a60@library-visit-state G2bd3@lib)))) (set! G2ab6@invoke-library-by-spec (lambda (G2bd7@spec) (G2ab2@invoke-library (G2aa8@find-library-by-spec/die G2bd7@spec)))) (set! G2ab8@installed-libraries (lambda G2be1 ((lambda (G2be2) (if (= G2be2 '1) (apply (lambda (G2bd9@all?) ((letrec ((G2bdb@f (lambda (G2bdd@ls) (if (null? G2bdd@ls) '() (if ((lambda (G2bdf@t) (if G2bdf@t G2bdf@t (begin '#f (G2a68@library-visible? (car G2bdd@ls))))) G2bd9@all?) (cons (car G2bdd@ls) (G2bdb@f (cdr G2bdd@ls))) (G2bdb@f (cdr G2bdd@ls))))))) G2bdb@f) ((G2a3d@current-library-collection)))) G2be1) (if (= G2be2 '0) (apply (lambda () (G2ab8@installed-libraries '#f)) G2be1) (error 'apply '"invalid arg count")))) (length G2be1)))) (set! G2aba@library-spec (lambda (G2be3@x) (begin (if (not (G2a4c@library? G2be3@x)) (assertion-violation 'library-spec '"not a library" G2be3@x) (void)) (list (G2a50@library-id G2be3@x) (G2a52@library-name G2be3@x) (G2a54@library-version G2be3@x))))) (begin (set! G2c21@G2aba@library-spec G2aba@library-spec) (set! G2c20@G2ab8@installed-libraries G2ab8@installed-libraries) (set! G2c1f@G2ab6@invoke-library-by-spec G2ab6@invoke-library-by-spec) (set! G2c1e@G2ab4@visit-library G2ab4@visit-library) (set! G2c1d@G2ab2@invoke-library G2ab2@invoke-library) (set! G2c1c@G2ab0@imported-label->binding G2ab0@imported-label->binding) (set! G2c1b@G2aae@install-library G2aae@install-library) (set! G2c1a@G2aac@install-library-record G2aac@install-library-record) (set! G2c19@G2aaa@label->binding-table G2aaa@label->binding-table) (set! G2c18@G2aa8@find-library-by-spec/die G2aa8@find-library-by-spec/die) (set! G2c17@G2aa6@library-exists? G2aa6@library-exists?) (set! G2c16@G2aa4@find-library-by-name G2aa4@find-library-by-name) (set! G2c15@G2aa2@find-external-library G2aa2@find-external-library) (set! G2c14@G2aa0@external-pending-libraries G2aa0@external-pending-libraries) (set! G2c13@G2a9e@current-library-expander G2a9e@current-library-expander) (set! G2c12@G2a9c@library-loader G2a9c@library-loader) (set! G2c11@G2a9a@try-load-from-file G2a9a@try-load-from-file) (set! G2c10@G2a98@current-precompiled-library-loader G2a98@current-precompiled-library-loader) (set! G2c0f@G2a96@serialize-all G2a96@serialize-all) (set! G2c0e@G2a94@file-locator G2a94@file-locator) (set! G2c0d@G2a92@library-name->file-name G2a92@library-name->file-name) (set! G2c0c@G2a90@library-extensions G2a90@library-extensions) (set! G2c0b@G2a8e@library-path G2a8e@library-path) (set! G2c0a@G2a8c@find-library-by G2a8c@find-library-by) (set! G2c09@G2a8a@find-dependencies G2a8a@find-dependencies) (set! G2c08@G2a88@rp G2a88@rp) (set! G2c07@G2a86@set-library-source-file-name! G2a86@set-library-source-file-name!) (set! G2c06@G2a84@set-library-visible?! G2a84@set-library-visible?!) (set! G2c05@G2a82@set-library-invoke-code! G2a82@set-library-invoke-code!) (set! G2c04@G2a80@set-library-visit-code! G2a80@set-library-visit-code!) (set! G2c03@G2a7e@set-library-invoke-state! G2a7e@set-library-invoke-state!) (set! G2c02@G2a7c@set-library-visit-state! G2a7c@set-library-visit-state!) (set! G2c01@G2a7a@set-library-env! G2a7a@set-library-env!) (set! G2c00@G2a78@set-library-subst! G2a78@set-library-subst!) (set! G2bff@G2a76@set-library-inv*! G2a76@set-library-inv*!) (set! G2bfe@G2a74@set-library-vis*! G2a74@set-library-vis*!) (set! G2bfd@G2a72@set-library-imp*! G2a72@set-library-imp*!) (set! G2bfc@G2a70@set-library-version! G2a70@set-library-version!) (set! G2bfb@G2a6e@set-library-name! G2a6e@set-library-name!) (set! G2bfa@G2a6c@set-library-id! G2a6c@set-library-id!) (set! G2bf9@G2a6a@library-source-file-name G2a6a@library-source-file-name) (set! G2bf8@G2a68@library-visible? G2a68@library-visible?) (set! G2bf7@G2a66@library-invoke-code G2a66@library-invoke-code) (set! G2bf6@G2a64@library-visit-code G2a64@library-visit-code) (set! G2bf5@G2a62@library-invoke-state G2a62@library-invoke-state) (set! G2bf4@G2a60@library-visit-state G2a60@library-visit-state) (set! G2bf3@G2a5e@library-env G2a5e@library-env) (set! G2bf2@G2a5c@library-subst G2a5c@library-subst) (set! G2bf1@G2a5a@library-inv* G2a5a@library-inv*) (set! G2bf0@G2a58@library-vis* G2a58@library-vis*) (set! G2bef@G2a56@library-imp* G2a56@library-imp*) (set! G2bee@G2a54@library-version G2a54@library-version) (set! G2bed@G2a52@library-name G2a52@library-name) (set! G2bec@G2a50@library-id G2a50@library-id) (set! G2beb@G2a4e@make-library G2a4e@make-library) (set! G2bea@G2a4c@library? G2a4c@library?) (set! G2be9@G2a47@G2a3f G2a47@G2a3f) (set! G2be8@G2a45@G2a40 G2a45@G2a40) (set! G2be7@G2a43@G2a3e G2a43@G2a3e) (set! G2be6@G2a3d@current-library-collection G2a3d@current-library-collection) (set! G2be5@G2a3b@make-collection G2a3b@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c24@build-global-define G2ca8@build-lambda G2caa@build-case-lambda G2cac@build-let G2cf4@build-sequence G2cf6@build-void G2cf8@build-letrec G2cfa@build-letrec* G2cfc@build-library-letrec* G2cfe@build-receive) (begin (set! G2c24@build-global-define (lambda (G2cff@x) (G2cf6@build-void))) (set! G2ca8@build-lambda (lambda (G2d01@ae G2d02@vars G2d03@exp) (list 'lambda G2d02@vars G2d03@exp))) (set! G2caa@build-case-lambda (lambda (G2d07@ae G2d08@vars* G2d09@exp*) ((lambda (G2d0e@build-error G2d10@build-pred G2d12@build-apply G2d14@expand-case-lambda) (begin (set! G2d0e@build-error (lambda (G2d43@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d10@build-pred (lambda (G2d2d@ae G2d2e@n G2d2f@vars) (call-with-values (lambda () ((letrec ((G2d35@f (lambda (G2d37@vars G2d38@count) (if (pair? G2d37@vars) (G2d35@f (cdr G2d37@vars) (+ G2d38@count '1)) (if (null? G2d37@vars) (values G2d38@count '=) (values G2d38@count '>=)))))) G2d35@f) G2d2f@vars '0)) (lambda (G2d3b@G2d33 G2d3c@G2d34) ((lambda (G2d3f@pred G2d40@count) (list (list 'primitive G2d3f@pred) G2d2e@n (list 'quote G2d40@count))) G2d3c@G2d34 G2d3b@G2d33))))) (set! G2d12@build-apply (lambda (G2d25@ae G2d26@g G2d27@vars G2d28@exp) (list '(primitive apply) (G2ca8@build-lambda G2d25@ae G2d27@vars G2d28@exp) G2d26@g))) (set! G2d14@expand-case-lambda (lambda (G2d15@ae G2d16@vars G2d17@exp*) ((lambda (G2d1b@g G2d1c@n) (list 'lambda G2d1b@g (G2cac@build-let G2d15@ae (list G2d1c@n) (list (list '(primitive length) G2d1b@g)) ((letrec ((G2d1f@f (lambda (G2d21@vars* G2d22@exp*) (if (null? G2d21@vars*) (G2d0e@build-error G2d15@ae) (list 'if (G2d10@build-pred G2d15@ae G2d1c@n (car G2d21@vars*)) (G2d12@build-apply G2d15@ae G2d1b@g (car G2d21@vars*) (car G2d22@exp*)) (G2d1f@f (cdr G2d21@vars*) (cdr G2d22@exp*))))))) G2d1f@f) G2d08@vars* G2d17@exp*)))) (gensym) (gensym)))) (if (= (length G2d09@exp*) '1) (G2ca8@build-lambda G2d07@ae (car G2d08@vars*) (car G2d09@exp*)) (G2d14@expand-case-lambda G2d07@ae G2d08@vars* G2d09@exp*)))) '#f '#f '#f '#f))) (set! G2cac@build-let (lambda (G2d45@ae G2d46@lhs* G2d47@rhs* G2d48@body) (cons (G2ca8@build-lambda G2d45@ae G2d46@lhs* G2d48@body) G2d47@rhs*))) (set! G2cf4@build-sequence (lambda (G2d4d@ae G2d4e@exps) ((letrec ((G2d51@loop (lambda (G2d53@exps) (if (null? (cdr G2d53@exps)) (car G2d53@exps) (if (equal? (car G2d53@exps) (G2cf6@build-void)) (G2d51@loop (cdr G2d53@exps)) (cons 'begin G2d53@exps)))))) G2d51@loop) G2d4e@exps))) (set! G2cf6@build-void (lambda () '((primitive void)))) (set! G2cf8@build-letrec (lambda (G2d55@ae G2d56@vars G2d57@val-exps G2d58@body-exp) (if (null? G2d56@vars) G2d58@body-exp (list 'letrec (map list G2d56@vars G2d57@val-exps) G2d58@body-exp)))) (set! G2cfa@build-letrec* (lambda (G2d5d@ae G2d5e@vars G2d5f@val-exps G2d60@body-exp) (if (null? G2d5e@vars) G2d60@body-exp (G2cac@build-let G2d5d@ae G2d5e@vars (map (lambda (G2d65@x) (list 'quote '#f)) G2d5e@vars) (G2cf4@build-sequence G2d5d@ae (append (map (lambda (G2d67@lhs G2d68@rhs) (list 'set! G2d67@lhs G2d68@rhs)) G2d5e@vars G2d5f@val-exps) (list G2d60@body-exp))))))) (set! G2cfc@build-library-letrec* (lambda (G2d6b@ae G2d6c@name G2d6d@vars G2d6e@locs G2d6f@val-exps G2d70@body-exp) (list 'library-letrec* G2d6c@name (map list G2d6d@vars G2d6e@locs G2d6f@val-exps) G2d70@body-exp))) (set! G2cfe@build-receive (lambda (G2d77@ae G2d78@vars G2d79@producer G2d7a@body*) (begin (display '"************** in ") (cons 'receive (cons G2d78@vars (cons G2d79@producer G2d7a@body*)))))) (begin (set! G2d88@G2cfe@build-receive G2cfe@build-receive) (set! G2d87@G2cfc@build-library-letrec* G2cfc@build-library-letrec*) (set! G2d86@G2cfa@build-letrec* G2cfa@build-letrec*) (set! G2d85@G2cf8@build-letrec G2cf8@build-letrec) (set! G2d84@G2cf6@build-void G2cf6@build-void) (set! G2d83@G2cf4@build-sequence G2cf4@build-sequence) (set! G2d82@G2cac@build-let G2cac@build-let) (set! G2d81@G2caa@build-case-lambda G2caa@build-case-lambda) (set! G2d80@G2ca8@build-lambda G2ca8@build-lambda) (set! G2d7f@G2c24@build-global-define G2c24@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2d95@set-cons G2d97@set-union G2d9c@top-mark* G2d9e@top-marked? G2da0@gen-lexical G2da2@gen-global G2da4@gen-label G2da6@gen-top-level-label G2da8@gen-define-label+loc G2daa@gen-define-label G2db0@G2dab G2db2@G2dad G2db4@G2dac G2db9@rib? G2dbb@make-rib G2dbd@rib-sym* G2dbf@rib-mark** G2dc1@rib-label* G2dc3@rib-sealed/freq G2dc5@rib-cache G2dc7@set-rib-sym*! G2dc9@set-rib-mark**! G2dcb@set-rib-label*! G2dcd@set-rib-sealed/freq! G2dcf@set-rib-cache! G2dd1@make-empty-rib G2dd3@make-cache-rib G2dd5@find-label G2dd7@extend-rib! G2dd9@extend-rib/nc! G2ddb@make-rib-map G2ddd@seal-rib! G2ddf@unseal-rib! G2de1@make-full-rib G2de7@G2de2 G2de9@G2de4 G2deb@G2de3 G2df0@stx? G2df2@make-stx G2df4@stx-expr G2df6@stx-mark* G2df8@stx-subst* G2dfa@stx-ae* G2dfc@set-stx-expr! G2dfe@set-stx-mark*! G2e00@set-stx-subst*! G2e02@set-stx-ae*! G2e04@rp G2e06@datum->stx G2e08@gen-mark G2e0a@anti-mark G2e0c@anti-mark? G2e0e@join-wraps G2e10@mkstx G2e12@add-mark G2e14@add-subst G2e16@syntax-kind? G2e18@syntax-vector->list G2e1a@syntax-pair? G2e1c@syntax-vector? G2e1e@syntax-null? G2e20@syntax-list? G2e22@syntax-car G2e24@syntax-cdr G2e26@syntax->list G2e28@id? G2e2a@id->sym G2e2c@same-marks? G2e2e@bound-id=? G2e30@free-id=? G2e32@valid-bound-ids? G2e34@distinct-bound-ids? G2e36@bound-id-member? G2e38@self-evaluating? G2e3a@strip-annotations G2e3c@strip G2e3e@stx->datum G2e40@same-marks*? G2e42@id->label G2e44@id->real-label G2e46@label->binding G2e48@make-binding G2e4a@binding-type G2e4c@binding-value G2e4e@raise-unbound-error G2e50@syntax-type G2e67@sanitize-binding G2e69@make-variable-transformer G2e6b@variable-transformer? G2e6d@variable-transformer-procedure G2e6f@make-eval-transformer G2ff3@parse-define G2ff5@parse-define-syntax G2ff7@scheme-stx-hashtable G2ff9@scheme-stx G2ffb@lexical-var G2ffd@lexical-mutable? G2fff@set-lexical-mutable! G3001@add-lexical G3003@add-lexicals G3005@letrec-helper G3007@letrec-transformer G3009@letrec*-transformer G300b@fluid-let-syntax-transformer G300d@type-descriptor-transformer G300f@record-type-descriptor-transformer G3011@record-constructor-descriptor-transformer G3013@when-macro G3015@unless-macro G3017@if-transformer G3019@case-macro G301b@quote-transformer G301d@case-lambda-transformer G301f@lambda-transformer G3021@bless G3023@with-syntax-macro G3025@invalid-fmls-error G3027@let-macro G3029@let-values-macro G302b@let*-values-macro G302d@trace-lambda-macro G302f@trace-define-macro G3031@trace-define-syntax-macro G3033@trace-let/rec-syntax G3035@trace-let-syntax-macro G3037@trace-letrec-syntax-macro G3039@guard-macro G303b@define-enumeration-macro G303d@time-macro G303f@delay-macro G3041@assert-macro G3043@endianness-macro G3045@identifier-syntax-macro G3047@do-macro G3049@let*-macro G304b@or-macro G304d@and-macro G304f@cond-macro G3051@do-include G3053@include-macro G3055@include-into-macro G3057@syntax-rules-macro G3059@quasiquote-macro G305b@quasisyntax-macro G305d@define-struct-macro G305f@define-record-type-macro G3061@define-condition-type-macro G3063@incorrect-usage-macro G3065@parameterize-macro G3067@foreign-call-transformer G3069@convert-pattern G306b@syntax-dispatch G306d@ellipsis? G306f@underscore? G3071@verify-literals G3073@syntax-case-transformer G3075@ellipsis-map G3077@syntax-transformer G3079@core-macro-transformer G307b@file-options-macro G307d@symbol-macro G307f@macro-transformer G3081@local-macro-transformer G3083@do-macro-call G3085@chi-macro G3087@chi-local-macro G3089@chi-global-macro G308b@chi-expr* G308d@chi-application G308f@chi-expr G3091@chi-set! G3093@verify-formals G3095@chi-lambda-clause G3097@chi-lambda-clause* G3099@chi-defun G309b@chi-rhs G309d@expand-interaction-rhs*/init* G309f@chi-rhs* G30a1@find-bound=? G30a3@find-dups G30a5@chi-internal G30a7@parse-module G30ad@G30a8 G30af@G30aa G30b1@G30a9 G30b6@module-interface? G30b8@make-module-interface G30ba@module-interface-first-mark G30bc@module-interface-exp-id-vec G30be@module-interface-exp-lab-vec G30c0@set-module-interface-first-mark! G30c2@set-module-interface-exp-id-vec! G30c4@set-module-interface-exp-lab-vec! G30c6@module-interface-exp-id* G30c8@chi-internal-module G30ca@chi-body* G30cc@expand-transformer G30ce@parse-exports G30d0@parse-library-name G30d2@parse-library G30d4@parse-import-spec* G30d6@make-top-rib G30d8@make-collector G30da@inv-collector G30dc@vis-collector G30de@imp-collector G30e0@chi-library-internal G30e2@chi-interaction-expr G30e4@library-body-expander G30e6@core-library-expander G30e8@parse-top-level-program G30ea@top-level-expander G30f0@G30eb G30f2@G30ed G30f4@G30ec G30f9@env? G30fb@make-env G30fd@env-names G30ff@env-labels G3101@env-itc G3103@set-env-names! G3105@set-env-labels! G3107@set-env-itc! G3109@rp G310f@G310a G3111@G310c G3113@G310b G3118@interaction-env? G311a@make-interaction-env G311c@interaction-env-rib G311e@interaction-env-r G3120@interaction-env-locs G3122@set-interaction-env-rib! G3124@set-interaction-env-r! G3126@set-interaction-env-locs! G3128@rp G312a@interaction-environment-symbols G312c@environment-bindings G312e@parse-binding G3130@environment? G3132@environment-symbols G3134@environment G3136@null-environment G3138@scheme-report-environment G313a@expand G313c@eval G313e@library-expander G3140@boot-library-expand G3142@rev-map-append G3144@build-exports G3146@make-export-subst G3148@make-export-env/macros G314a@generate-temporaries G314c@free-identifier=? G314e@bound-identifier=? G3150@make-source-condition G3152@extract-position-condition G3154@expression-position G3156@assertion-error G3158@syntax-error G315a@extract-trace G315c@syntax-violation* G315e@syntax-violation G3160@identifier? G3162@datum->syntax G3164@syntax->datum G3166@compile-r6rs-top-level G3168@pre-compile-r6rs-top-level G316a@interaction-environment G316c@top-level-context) (begin (set! G2d95@set-cons (lambda (G316d@x G316e@ls) (if (memq G316d@x G316e@ls) G316e@ls (cons G316d@x G316e@ls)))) (set! G2d97@set-union (lambda (G3171@ls1 G3172@ls2) (if (null? G3171@ls1) G3172@ls2 (if (memq (car G3171@ls1) G3172@ls2) (G2d97@set-union (cdr G3171@ls1) G3172@ls2) (cons (car G3171@ls1) (G2d97@set-union (cdr G3171@ls1) G3172@ls2)))))) (set! G2d9c@top-mark* '(top)) (set! G2d9e@top-marked? (lambda (G3175@m*) (memq 'top G3175@m*))) (set! G2da0@gen-lexical (lambda (G3177@sym) (if (symbol? G3177@sym) (gensym G3177@sym) (if (G2df0@stx? G3177@sym) (G2da0@gen-lexical (G2e2a@id->sym G3177@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3177@sym))))) (set! G2da2@gen-global (lambda (G3179@x) (G2da0@gen-lexical G3179@x))) (set! G2da4@gen-label (lambda (G317b@_) (gensym))) (set! G2da6@gen-top-level-label (lambda (G317d@id G317e@rib) ((lambda (G3182@find) (begin (set! G3182@find (lambda (G318d@sym G318e@mark* G318f@sym* G3190@mark** G3191@label*) (if (pair? G318f@sym*) (begin '#f (if (if (eq? G318d@sym (car G318f@sym*)) (begin '#f (G2e2c@same-marks? G318e@mark* (car G3190@mark**))) '#f) (car G3191@label*) (G3182@find G318d@sym G318e@mark* (cdr G318f@sym*) (cdr G3190@mark**) (cdr G3191@label*)))) '#f))) ((lambda (G3183@sym G3184@mark*) ((lambda (G3187@sym*) ((lambda (G3189@t) (if G3189@t ((lambda (G318b@label) (if (G2c1c@G2ab0@imported-label->binding G318b@label) (gensym) G318b@label)) G3189@t) (gensym))) (if (memq G3183@sym (G2dbd@rib-sym* G317e@rib)) (begin '#f (G3182@find G3183@sym G3184@mark* G3187@sym* (G2dbf@rib-mark** G317e@rib) (G2dc1@rib-label* G317e@rib))) '#f))) (G2dbd@rib-sym* G317e@rib))) (G2e2a@id->sym G317d@id) (G2df6@stx-mark* G317d@id)))) '#f))) (set! G2da8@gen-define-label+loc (lambda (G3197@id G3198@rib) ((lambda (G319b@t) (if G319b@t ((lambda (G319d@env) ((lambda (G319f@label G31a0@locs) (values G319f@label ((lambda (G31a3@t) (if G31a3@t (cdr G31a3@t) ((lambda (G31a5@loc) (begin (G3126@set-interaction-env-locs! G319d@env (cons (cons G319f@label G31a5@loc) G31a0@locs)) G31a5@loc)) (G2da0@gen-lexical G3197@id)))) (assq G319f@label G31a0@locs)))) (G2da6@gen-top-level-label G3197@id G3198@rib) (G3120@interaction-env-locs G319d@env))) G319b@t) (values (gensym) (G2da0@gen-lexical G3197@id)))) (G316c@top-level-context)))) (set! G2daa@gen-define-label (lambda (G31a7@id G31a8@rib) (if (G316c@top-level-context) (G2da6@gen-top-level-label G31a7@id G31a8@rib) (gensym)))) (set! G2db0@G2dab (make-record-type-descriptor 'rib '#f 'G2dae '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2db2@G2dad '#f) (set! G2db4@G2dac (make-record-constructor-descriptor G2db0@G2dab '#f G2db2@G2dad)) (set! G2db9@rib? (record-predicate G2db0@G2dab)) (set! G2dbb@make-rib (record-constructor G2db4@G2dac)) (set! G2dbd@rib-sym* (record-accessor G2db0@G2dab '0)) (set! G2dbf@rib-mark** (record-accessor G2db0@G2dab '1)) (set! G2dc1@rib-label* (record-accessor G2db0@G2dab '2)) (set! G2dc3@rib-sealed/freq (record-accessor G2db0@G2dab '3)) (set! G2dc5@rib-cache (record-accessor G2db0@G2dab '4)) (set! G2dc7@set-rib-sym*! (record-mutator G2db0@G2dab '0)) (set! G2dc9@set-rib-mark**! (record-mutator G2db0@G2dab '1)) (set! G2dcb@set-rib-label*! (record-mutator G2db0@G2dab '2)) (set! G2dcd@set-rib-sealed/freq! (record-mutator G2db0@G2dab '3)) (set! G2dcf@set-rib-cache! (record-mutator G2db0@G2dab '4)) (set! G2dd1@make-empty-rib (lambda () (G2dbb@make-rib '() '() '() '#f '#f))) (set! G2dd3@make-cache-rib (lambda () (G2dbb@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2dd5@find-label (lambda (G31ab@rib G31ac@sym G31ad@mark*) ((lambda (G31b1@ht) (if G31b1@ht (begin '#f ((lambda (G31b3@cv) ((lambda (G31b5@t) (if G31b5@t (cdr G31b5@t) '#f)) (if G31b3@cv (begin '#f (assp (lambda (G31b7@m) (G2e2c@same-marks? G31ad@mark* G31b7@m)) G31b3@cv)) '#f))) (hashtable-ref G31b1@ht G31ac@sym '#f))) '#f)) (G2dc5@rib-cache G31ab@rib)))) (set! G2dd7@extend-rib! (lambda (G31b9@rib G31ba@id G31bb@label) ((lambda (G31c0@find) (begin (set! G31c0@find (lambda (G31d1@sym G31d2@mark* G31d3@sym* G31d4@mark** G31d5@label*) (if (pair? G31d3@sym*) (begin '#f (if (if (eq? G31d1@sym (car G31d3@sym*)) (begin '#f (G2e2c@same-marks? G31d2@mark* (car G31d4@mark**))) '#f) G31d5@label* (G31c0@find G31d1@sym G31d2@mark* (cdr G31d3@sym*) (cdr G31d4@mark**) (cdr G31d5@label*)))) '#f))) (begin (if (G2dc3@rib-sealed/freq G31b9@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31b9@rib) (void)) ((lambda (G31c1@sym G31c2@mark*) ((lambda (G31c5@sym*) ((lambda (G31c7@t) (if G31c7@t ((lambda (G31c9@p) (if (not (eq? G31bb@label G31c9@p)) (G315e@syntax-violation '#f '"multiple definitions of identifier" G31ba@id) (void))) G31c7@t) ((lambda (G31cb@t) (if G31cb@t ((lambda (G31cd@p) (if (not (eq? G31bb@label (car G31cd@p))) (if (G316c@top-level-context) (set-car! G31cd@p G31bb@label) (G315e@syntax-violation '#f '"multiple definitions of identifier" G31ba@id)) (void))) G31cb@t) (begin (if (G2dc5@rib-cache G31b9@rib) (hashtable-update! (G2dc5@rib-cache G31b9@rib) G31c1@sym (lambda (G31cf@e) (cons (cons G31c2@mark* G31bb@label) G31cf@e)) '()) (void)) (G2dc7@set-rib-sym*! G31b9@rib (cons G31c1@sym G31c5@sym*)) (G2dc9@set-rib-mark**! G31b9@rib (cons G31c2@mark* (G2dbf@rib-mark** G31b9@rib))) (G2dcb@set-rib-label*! G31b9@rib (cons G31bb@label (G2dc1@rib-label* G31b9@rib)))))) (if (memq G31c1@sym (G2dbd@rib-sym* G31b9@rib)) (begin '#f (G31c0@find G31c1@sym G31c2@mark* G31c5@sym* (G2dbf@rib-mark** G31b9@rib) (G2dc1@rib-label* G31b9@rib))) '#f)))) (G2dd5@find-label G31b9@rib G31c1@sym G31c2@mark*))) (G2dbd@rib-sym* G31b9@rib))) (G2e2a@id->sym G31ba@id) (G2df6@stx-mark* G31ba@id))))) '#f))) (set! G2dd9@extend-rib/nc! (lambda (G31db@rib G31dc@id G31dd@label) ((lambda (G31e1@sym G31e2@mark*) ((lambda (G31e5@sym*) (begin (if (G2dc5@rib-cache G31db@rib) (hashtable-update! (G2dc5@rib-cache G31db@rib) G31e1@sym (lambda (G31e7@e) (cons (cons G31e2@mark* G31dd@label) G31e7@e)) '()) (void)) (G2dc7@set-rib-sym*! G31db@rib (cons G31e1@sym G31e5@sym*)) (G2dc9@set-rib-mark**! G31db@rib (cons G31e2@mark* (G2dbf@rib-mark** G31db@rib))) (G2dcb@set-rib-label*! G31db@rib (cons G31dd@label (G2dc1@rib-label* G31db@rib))))) (G2dbd@rib-sym* G31db@rib))) (G2e2a@id->sym G31dc@id) (G2df6@stx-mark* G31dc@id)))) (set! G2ddb@make-rib-map (lambda (G31e9@sym*) ((lambda (G31eb@ht) ((letrec ((G31ed@f (lambda (G31ef@i G31f0@sym*) (if (null? G31f0@sym*) G31eb@ht (begin (hashtable-update! G31eb@ht (car G31f0@sym*) (lambda (G31f3@x) (cons G31ef@i G31f3@x)) '()) (G31ed@f (+ G31ef@i '1) (cdr G31f0@sym*))))))) G31ed@f) '0 G31e9@sym*)) (make-eq-hashtable)))) (set! G2ddd@seal-rib! (lambda (G31f5@rib) ((lambda (G31f7@sym*) (if (not (null? G31f7@sym*)) (begin (G2dc7@set-rib-sym*! G31f5@rib (list->vector G31f7@sym*)) (G2dc9@set-rib-mark**! G31f5@rib (list->vector (G2dbf@rib-mark** G31f5@rib))) (G2dcb@set-rib-label*! G31f5@rib (list->vector (G2dc1@rib-label* G31f5@rib))) (G2dcd@set-rib-sealed/freq! G31f5@rib (G2ddb@make-rib-map G31f7@sym*))) (void))) (G2dbd@rib-sym* G31f5@rib)))) (set! G2ddf@unseal-rib! (lambda (G31f9@rib) (if (G2dc3@rib-sealed/freq G31f9@rib) (begin (G2dcd@set-rib-sealed/freq! G31f9@rib '#f) (G2dc7@set-rib-sym*! G31f9@rib (vector->list (G2dbd@rib-sym* G31f9@rib))) (G2dc9@set-rib-mark**! G31f9@rib (vector->list (G2dbf@rib-mark** G31f9@rib))) (G2dcb@set-rib-label*! G31f9@rib (vector->list (G2dc1@rib-label* G31f9@rib)))) (void)))) (set! G2de1@make-full-rib (lambda (G31fb@id* G31fc@label*) ((lambda (G31ff@r) (begin (G2ddd@seal-rib! G31ff@r) G31ff@r)) (G2dbb@make-rib (map G2e2a@id->sym G31fb@id*) (map G2df6@stx-mark* G31fb@id*) G31fc@label* '#f '#f)))) (set! G2de7@G2de2 (make-record-type-descriptor 'stx '#f 'G2de5 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2de9@G2de4 '#f) (set! G2deb@G2de3 (make-record-constructor-descriptor G2de7@G2de2 '#f G2de9@G2de4)) (set! G2df0@stx? (record-predicate G2de7@G2de2)) (set! G2df2@make-stx (record-constructor G2deb@G2de3)) (set! G2df4@stx-expr (record-accessor G2de7@G2de2 '0)) (set! G2df6@stx-mark* (record-accessor G2de7@G2de2 '1)) (set! G2df8@stx-subst* (record-accessor G2de7@G2de2 '2)) (set! G2dfa@stx-ae* (record-accessor G2de7@G2de2 '3)) (set! G2dfc@set-stx-expr! (record-mutator G2de7@G2de2 '0)) (set! G2dfe@set-stx-mark*! (record-mutator G2de7@G2de2 '1)) (set! G2e00@set-stx-subst*! (record-mutator G2de7@G2de2 '2)) (set! G2e02@set-stx-ae*! (record-mutator G2de7@G2de2 '3)) (set! G2e04@rp (G2977@G2887@make-record-printer 'stx (lambda (G3201@x G3202@p G3203@wr) (begin (display '"#<syntax " G3202@p) (write (G2e3e@stx->datum G3201@x) G3202@p) ((lambda (G3207@expr) (if (G2971@G287b@annotation? G3207@expr) ((lambda (G3209@src) (if (pair? G3209@src) (begin (display '" [" G3202@p) (display (cdr G3209@src) G3202@p) (display '" of " G3202@p) (display (car G3209@src) G3202@p) (display '"]" G3202@p)) (void))) (G2972@G287d@annotation-source G3207@expr)) (void))) (G2df4@stx-expr G3201@x)) (display '">" G3202@p))))) (set! G2e06@datum->stx (lambda (G320b@id G320c@datum) (G2df2@make-stx G320c@datum (G2df6@stx-mark* G320b@id) (G2df8@stx-subst* G320b@id) (G2dfa@stx-ae* G320b@id)))) (set! G2e08@gen-mark (lambda () (string '#\m))) (set! G2e0a@anti-mark '#f) (set! G2e0c@anti-mark? not) (set! G2e0e@join-wraps (lambda (G320f@m1* G3210@s1* G3211@ae1* G3212@e) ((lambda (G3218@cancel) (begin (set! G3218@cancel (lambda (G321f@ls1 G3220@ls2) ((letrec ((G3223@f (lambda (G3225@x G3226@ls1) (if (null? G3226@ls1) (cdr G3220@ls2) (cons G3225@x (G3223@f (car G3226@ls1) (cdr G3226@ls1))))))) G3223@f) (car G321f@ls1) (cdr G321f@ls1)))) ((lambda (G3219@m2* G321a@s2* G321b@ae2*) (if (if (not (null? G320f@m1*)) (if (not (null? G3219@m2*)) (begin '#f (G2e0c@anti-mark? (car G3219@m2*))) '#f) '#f) (values (G3218@cancel G320f@m1* G3219@m2*) (G3218@cancel G3210@s1* G321a@s2*) (G3218@cancel G3211@ae1* G321b@ae2*)) (values (append G320f@m1* G3219@m2*) (append G3210@s1* G321a@s2*) (append G3211@ae1* G321b@ae2*)))) (G2df6@stx-mark* G3212@e) (G2df8@stx-subst* G3212@e) (G2dfa@stx-ae* G3212@e)))) '#f))) (set! G2e10@mkstx (lambda (G3229@e G322a@m* G322b@s* G322c@ae*) (if (if (G2df0@stx? G3229@e) (begin '#f (not (G2d9e@top-marked? G322a@m*))) '#f) (call-with-values (lambda () (G2e0e@join-wraps G322a@m* G322b@s* G322c@ae* G3229@e)) (lambda (G3234@G3231 G3235@G3232 G3236@G3233) ((lambda (G323a@ae* G323b@s* G323c@m*) (G2df2@make-stx (G2df4@stx-expr G3229@e) G323c@m* G323b@s* G323a@ae*)) G3236@G3233 G3235@G3232 G3234@G3231))) (G2df2@make-stx G3229@e G322a@m* G322b@s* G322c@ae*)))) (set! G2e12@add-mark (lambda (G3240@m G3241@e G3242@ae) (G2e10@mkstx G3241@e (list G3240@m) '(shift) (list G3242@ae)))) (set! G2e14@add-subst (lambda (G3246@subst G3247@e) (G2e10@mkstx G3247@e '() (list G3246@subst) '()))) (set! G2e16@syntax-kind? (lambda (G324a@x G324b@p?) (if (G2df0@stx? G324a@x) (G2e16@syntax-kind? (G2df4@stx-expr G324a@x) G324b@p?) (if (G2971@G287b@annotation? G324a@x) (G2e16@syntax-kind? (G2973@G287f@annotation-expression G324a@x) G324b@p?) (G324b@p? G324a@x))))) (set! G2e18@syntax-vector->list (lambda (G324e@x) (if (G2df0@stx? G324e@x) ((lambda (G3250@ls G3251@m* G3252@s* G3253@ae*) (map (lambda (G3258@x) (G2e10@mkstx G3258@x G3251@m* G3252@s* G3253@ae*)) G3250@ls)) (G2e18@syntax-vector->list (G2df4@stx-expr G324e@x)) (G2df6@stx-mark* G324e@x) (G2df8@stx-subst* G324e@x) (G2dfa@stx-ae* G324e@x)) (if (G2971@G287b@annotation? G324e@x) (G2e18@syntax-vector->list (G2973@G287f@annotation-expression G324e@x)) (if (vector? G324e@x) (vector->list G324e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G324e@x)))))) (set! G2e1a@syntax-pair? (lambda (G325a@x) (G2e16@syntax-kind? G325a@x pair?))) (set! G2e1c@syntax-vector? (lambda (G325c@x) (G2e16@syntax-kind? G325c@x vector?))) (set! G2e1e@syntax-null? (lambda (G325e@x) (G2e16@syntax-kind? G325e@x null?))) (set! G2e20@syntax-list? (lambda (G3260@x) ((lambda (G3262@t) (if G3262@t G3262@t (begin '#f (if (G2e1a@syntax-pair? G3260@x) (begin '#f (G2e20@syntax-list? (G2e24@syntax-cdr G3260@x))) '#f)))) (G2e1e@syntax-null? G3260@x)))) (set! G2e22@syntax-car (lambda (G3264@x) (if (G2df0@stx? G3264@x) (G2e10@mkstx (G2e22@syntax-car (G2df4@stx-expr G3264@x)) (G2df6@stx-mark* G3264@x) (G2df8@stx-subst* G3264@x) (G2dfa@stx-ae* G3264@x)) (if (G2971@G287b@annotation? G3264@x) (G2e22@syntax-car (G2973@G287f@annotation-expression G3264@x)) (if (pair? G3264@x) (car G3264@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3264@x)))))) (set! G2e24@syntax-cdr (lambda (G3266@x) (if (G2df0@stx? G3266@x) (G2e10@mkstx (G2e24@syntax-cdr (G2df4@stx-expr G3266@x)) (G2df6@stx-mark* G3266@x) (G2df8@stx-subst* G3266@x) (G2dfa@stx-ae* G3266@x)) (if (G2971@G287b@annotation? G3266@x) (G2e24@syntax-cdr (G2973@G287f@annotation-expression G3266@x)) (if (pair? G3266@x) (cdr G3266@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3266@x)))))) (set! G2e26@syntax->list (lambda (G3268@x) (if (G2e1a@syntax-pair? G3268@x) (cons (G2e22@syntax-car G3268@x) (G2e26@syntax->list (G2e24@syntax-cdr G3268@x))) (if (G2e1e@syntax-null? G3268@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3268@x))))) (set! G2e28@id? (lambda (G326a@x) (if (G2df0@stx? G326a@x) (begin '#f ((lambda (G326c@expr) (symbol? (if (G2971@G287b@annotation? G326c@expr) (G2970@G2879@annotation-stripped G326c@expr) G326c@expr))) (G2df4@stx-expr G326a@x))) '#f))) (set! G2e2a@id->sym (lambda (G326e@x) (begin (if (not (G2df0@stx? G326e@x)) (error 'id->sym '"BUG in ikarus: not an id" G326e@x) (void)) ((lambda (G3270@expr) ((lambda (G3272@sym) (if (symbol? G3272@sym) G3272@sym (error 'id->sym '"BUG in ikarus: not an id" G326e@x))) (if (G2971@G287b@annotation? G3270@expr) (G2970@G2879@annotation-stripped G3270@expr) G3270@expr))) (G2df4@stx-expr G326e@x))))) (set! G2e2c@same-marks? (lambda (G3274@x G3275@y) ((lambda (G3278@t) (if G3278@t G3278@t (begin '#f (if (pair? G3274@x) (if (pair? G3275@y) (if (eq? (car G3274@x) (car G3275@y)) (begin '#f (G2e2c@same-marks? (cdr G3274@x) (cdr G3275@y))) '#f) '#f) '#f)))) (if (null? G3274@x) (begin '#f (null? G3275@y)) '#f)))) (set! G2e2e@bound-id=? (lambda (G327a@x G327b@y) (if (eq? (G2e2a@id->sym G327a@x) (G2e2a@id->sym G327b@y)) (begin '#f (G2e2c@same-marks? (G2df6@stx-mark* G327a@x) (G2df6@stx-mark* G327b@y))) '#f))) (set! G2e30@free-id=? (lambda (G327e@i G327f@j) ((lambda (G3282@t0 G3283@t1) (if ((lambda (G3286@t) (if G3286@t G3286@t (begin '#f G3283@t1))) G3282@t0) (eq? G3282@t0 G3283@t1) (eq? (G2e2a@id->sym G327e@i) (G2e2a@id->sym G327f@j)))) (G2e44@id->real-label G327e@i) (G2e44@id->real-label G327f@j)))) (set! G2e32@valid-bound-ids? (lambda (G3288@id*) (if (for-all G2e28@id? G3288@id*) (begin '#f (G2e34@distinct-bound-ids? G3288@id*)) '#f))) (set! G2e34@distinct-bound-ids? (lambda (G328a@id*) ((lambda (G328c@t) (if G328c@t G328c@t (begin '#f (if (not (G2e36@bound-id-member? (car G328a@id*) (cdr G328a@id*))) (begin '#f (G2e34@distinct-bound-ids? (cdr G328a@id*))) '#f)))) (null? G328a@id*)))) (set! G2e36@bound-id-member? (lambda (G328e@id G328f@id*) (if (pair? G328f@id*) (begin '#f ((lambda (G3292@t) (if G3292@t G3292@t (begin '#f (G2e36@bound-id-member? G328e@id (cdr G328f@id*))))) (G2e2e@bound-id=? G328e@id (car G328f@id*)))) '#f))) (set! G2e38@self-evaluating? (lambda (G3294@x) ((lambda (G3296@t) (if G3296@t G3296@t ((lambda (G3298@t) (if G3298@t G3298@t ((lambda (G329a@t) (if G329a@t G329a@t ((lambda (G329c@t) (if G329c@t G329c@t ((lambda (G329e@t) (if G329e@t G329e@t (begin '#f (bytevector? G3294@x)))) (regexp? G3294@x)))) (boolean? G3294@x)))) (char? G3294@x)))) (string? G3294@x)))) (number? G3294@x)))) (set! G2e3a@strip-annotations (lambda (G32a0@x) (if (pair? G32a0@x) (cons (G2e3a@strip-annotations (car G32a0@x)) (G2e3a@strip-annotations (cdr G32a0@x))) (if (vector? G32a0@x) (vector-map G2e3a@strip-annotations G32a0@x) (if (G2971@G287b@annotation? G32a0@x) (G2970@G2879@annotation-stripped G32a0@x) G32a0@x))))) (set! G2e3c@strip (lambda (G32a2@x G32a3@m*) (if (G2d9e@top-marked? G32a3@m*) (if ((lambda (G32a6@t) (if G32a6@t G32a6@t ((lambda (G32a8@t) (if G32a8@t G32a8@t (begin '#f (if (vector? G32a2@x) (if (> (vector-length G32a2@x) '0) (begin '#f (G2971@G287b@annotation? (vector-ref G32a2@x '0))) '#f) '#f)))) (if (pair? G32a2@x) (begin '#f (G2971@G287b@annotation? (car G32a2@x))) '#f)))) (G2971@G287b@annotation? G32a2@x)) (G2e3a@strip-annotations G32a2@x) G32a2@x) ((letrec ((G32aa@f (lambda (G32ac@x) (if (G2df0@stx? G32ac@x) (G2e3c@strip (G2df4@stx-expr G32ac@x) (G2df6@stx-mark* G32ac@x)) (if (G2971@G287b@annotation? G32ac@x) (G2970@G2879@annotation-stripped G32ac@x) (if (pair? G32ac@x) ((lambda (G32ae@a G32af@d) (if (if (eq? G32ae@a (car G32ac@x)) (begin '#f (eq? G32af@d (cdr G32ac@x))) '#f) G32ac@x (cons G32ae@a G32af@d))) (G32aa@f (car G32ac@x)) (G32aa@f (cdr G32ac@x))) (if (vector? G32ac@x) ((lambda (G32b2@old) ((lambda (G32b4@new) (if (for-all eq? G32b2@old G32b4@new) G32ac@x (list->vector G32b4@new))) (map G32aa@f G32b2@old))) (vector->list G32ac@x)) G32ac@x))))))) G32aa@f) G32a2@x)))) (set! G2e3e@stx->datum (lambda (G32b6@x) (G2e3c@strip G32b6@x '()))) (set! G2e40@same-marks*? (lambda (G32b8@mark* G32b9@mark** G32ba@si) (if (null? G32ba@si) '#f (if (G2e2c@same-marks? G32b8@mark* (vector-ref G32b9@mark** (car G32ba@si))) (car G32ba@si) (G2e40@same-marks*? G32b8@mark* G32b9@mark** (cdr G32ba@si)))))) (set! G2e42@id->label (lambda (G32be@id) ((lambda (G32c0@t) (if G32c0@t G32c0@t (begin '#f ((lambda (G32c2@t) (if G32c2@t ((lambda (G32c4@env) ((lambda (G32c6@rib) (call-with-values (lambda () (G2da8@gen-define-label+loc G32be@id G32c6@rib)) (lambda (G32ca@G32c8 G32cb@G32c9) ((lambda (G32ce@loc_ G32cf@lab) (begin (G2dd7@extend-rib! G32c6@rib G32be@id G32cf@lab) G32cf@lab)) G32cb@G32c9 G32ca@G32c8)))) (G311c@interaction-env-rib G32c4@env))) G32c2@t) '#f)) (G316c@top-level-context))))) (G2e44@id->real-label G32be@id)))) (set! G2e44@id->real-label (lambda (G32d2@id) ((lambda (G32d4@sym) ((letrec ((G32d6@search (lambda (G32d8@subst* G32d9@mark*) (if (null? G32d8@subst*) '#f (if (eq? (car G32d8@subst*) 'shift) (G32d6@search (cdr G32d8@subst*) (cdr G32d9@mark*)) ((lambda (G32dc@rib) ((lambda (G32de@t) (if G32de@t ((lambda (G32e0@ht) ((lambda (G32e2@si) ((lambda (G32e4@i) (if G32e4@i (vector-ref (G2dc1@rib-label* G32dc@rib) G32e4@i) (G32d6@search (cdr G32d8@subst*) G32d9@mark*))) (if G32e2@si (begin '#f (G2e40@same-marks*? G32d9@mark* (G2dbf@rib-mark** G32dc@rib) (reverse G32e2@si))) '#f))) (hashtable-ref G32e0@ht G32d4@sym '#f))) G32de@t) ((lambda (G32e6@t) (if G32e6@t G32e6@t (begin '#f ((letrec ((G32e8@f (lambda (G32ea@sym* G32eb@mark** G32ec@label*) (if (null? G32ea@sym*) (G32d6@search (cdr G32d8@subst*) G32d9@mark*) (if (if (eq? (car G32ea@sym*) G32d4@sym) (begin '#f (G2e2c@same-marks? (car G32eb@mark**) G32d9@mark*)) '#f) (car G32ec@label*) (G32e8@f (cdr G32ea@sym*) (cdr G32eb@mark**) (cdr G32ec@label*))))))) G32e8@f) (G2dbd@rib-sym* G32dc@rib) (G2dbf@rib-mark** G32dc@rib) (G2dc1@rib-label* G32dc@rib))))) (G2dd5@find-label G32dc@rib G32d4@sym G32d9@mark*)))) (G2dc3@rib-sealed/freq G32dc@rib))) (car G32d8@subst*))))))) G32d6@search) (G2df8@stx-subst* G32d2@id) (G2df6@stx-mark* G32d2@id))) (G2e2a@id->sym G32d2@id)))) (set! G2e46@label->binding (lambda (G32f0@x G32f1@r) ((lambda (G32f4@t) (if G32f4@t ((lambda (G32f6@b) (if (if (pair? G32f6@b) (begin '#f (eq? (car G32f6@b) '$core-rtd)) '#f) (cons '$rtd (map G3021@bless (cdr G32f6@b))) (if (if (pair? G32f6@b) (begin '#f (eq? (car G32f6@b) 'global-rtd)) '#f) ((lambda (G32f8@lib G32f9@loc) (cons '$rtd (symbol-value G32f9@loc))) (cadr G32f6@b) (cddr G32f6@b)) G32f6@b))) G32f4@t) ((lambda (G32fc@t) (if G32fc@t (cdr G32fc@t) ((lambda (G32fe@t) (if G32fe@t ((lambda (G3300@env) ((lambda (G3302@t) (if G3302@t ((lambda (G3304@p) (cons* 'lexical (cdr G3304@p) '#f)) G3302@t) '(displaced-lexical . #f))) (assq G32f0@x (G3120@interaction-env-locs G3300@env)))) G32fe@t) '(displaced-lexical . #f))) (G316c@top-level-context)))) (assq G32f0@x G32f1@r)))) (G2c1c@G2ab0@imported-label->binding G32f0@x)))) (set! G2e48@make-binding cons) (set! G2e4a@binding-type car) (set! G2e4c@binding-value cdr) (set! G2e4e@raise-unbound-error (lambda (G3306@id) (G315c@syntax-violation* '#f '"unbound identifier" G3306@id (G4c3d@G4bdd@make-undefined-violation)))) (set! G2e50@syntax-type (lambda (G3308@e G3309@r) (if (G2e28@id? G3308@e) ((lambda (G330c@id) ((lambda (G330e@label) ((lambda (G3310@b) ((lambda (G3312@type) ((lambda () (begin (if (not G330e@label) (G2e4e@raise-unbound-error G330c@id) (void)) ((lambda (G3314@t) (if (memv G3314@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3312@type (G2e4c@binding-value G3310@b) G330c@id) (values 'other '#f '#f))) G3312@type))))) (G2e4a@binding-type G3310@b))) (G2e46@label->binding G330e@label G3309@r))) (G2e42@id->label G330c@id))) G3308@e) (if (G2e1a@syntax-pair? G3308@e) ((lambda (G3316@id) (if (G2e28@id? G3316@id) ((lambda (G3318@label) ((lambda (G331a@b) ((lambda (G331c@type) ((lambda () (begin (if (not G3318@label) (G2e4e@raise-unbound-error G3316@id) (void)) ((lambda (G331e@t) (if (memv G331e@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G331c@type (G2e4c@binding-value G331a@b) G3316@id) (values 'call '#f '#f))) G331c@type))))) (G2e4a@binding-type G331a@b))) (G2e46@label->binding G3318@label G3309@r))) (G2e42@id->label G3316@id)) (values 'call '#f '#f))) (G2e22@syntax-car G3308@e)) ((lambda (G3320@d) (if (G2e38@self-evaluating? G3320@d) (values 'constant G3320@d '#f) (values 'other '#f '#f))) (G2e3e@stx->datum G3308@e)))))) (set! G2e67@sanitize-binding (lambda (G3322@x G3323@src) (if (procedure? G3322@x) (cons* 'local-macro G3322@x G3323@src) (if (if (pair? G3322@x) (if (eq? (car G3322@x) 'macro!) (begin '#f (procedure? (cdr G3322@x))) '#f) '#f) (cons* 'local-macro! (cdr G3322@x) G3323@src) (if (if (pair? G3322@x) (begin '#f (eq? (car G3322@x) '$rtd)) '#f) G3322@x (assertion-violation 'expand '"invalid transformer" G3322@x)))))) (set! G2e69@make-variable-transformer (lambda (G3326@x) (if (procedure? G3326@x) (cons 'macro! G3326@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3326@x)))) (set! G2e6b@variable-transformer? (lambda (G3328@x) (if (pair? G3328@x) (if (eq? (car G3328@x) 'macro!) (begin '#f (procedure? (cdr G3328@x))) '#f) '#f))) (set! G2e6d@variable-transformer-procedure (lambda (G332a@x) (if (G2e6b@variable-transformer? G332a@x) (cdr G332a@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G332a@x)))) (set! G2e6f@make-eval-transformer (lambda (G332c@x) (G2e67@sanitize-binding (eval-core (G29de@G2986@expanded->core G332c@x)) G332c@x))) (set! G2ff3@parse-define (lambda (G332e@x) ((lambda (G3330@t) ((lambda (G3332@ls/false) (if (if G3332@ls/false (begin '#f (apply (lambda (G3334@id G3335@fmls G3336@b G3337@b*) (G2e28@id? G3334@id)) G3332@ls/false)) '#f) (apply (lambda (G333c@id G333d@fmls G333e@b G333f@b*) (begin (G3093@verify-formals G333d@fmls G332e@x) (values G333c@id (cons 'defun (cons G333d@fmls (cons G333e@b G333f@b*)))))) G3332@ls/false) ((lambda (G3344@t) ((lambda (G3346@ls/false) (if (if G3346@ls/false (begin '#f (apply (lambda (G3348@id G3349@val) (G2e28@id? G3348@id)) G3346@ls/false)) '#f) (apply (lambda (G334c@id G334d@val) (values G334c@id (cons 'expr G334d@val))) G3346@ls/false) ((lambda (G3350@t) ((lambda (G3352@ls/false) (if (if G3352@ls/false (begin '#f (apply (lambda (G3354@id) (G2e28@id? G3354@id)) G3352@ls/false)) '#f) (apply (lambda (G3356@id) (values G3356@id (cons 'expr (G3021@bless '(void))))) G3352@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3350@t))) (G306b@syntax-dispatch G3350@t '(_ any)))) G3344@t))) (G306b@syntax-dispatch G3344@t '(_ any any)))) G3330@t))) (G306b@syntax-dispatch G3330@t '(_ (any . any) any . each-any)))) G332e@x))) (set! G2ff5@parse-define-syntax (lambda (G3358@x) ((lambda (G335a@t) ((lambda (G335c@ls/false) (if (if G335c@ls/false (begin '#f (apply (lambda (G335e@id G335f@val) (G2e28@id? G335e@id)) G335c@ls/false)) '#f) (apply (lambda (G3362@id G3363@val) (values G3362@id G3363@val)) G335c@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G335a@t))) (G306b@syntax-dispatch G335a@t '(_ any any)))) G3358@x))) (set! G2ff7@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ff9@scheme-stx (lambda (G3366@sym) ((lambda (G3368@t) (if G3368@t G3368@t (begin '#f ((lambda (G336a@subst) ((lambda (G336c@stx) ((lambda (G336e@stx) ((lambda () (begin (hashtable-set! G2ff7@scheme-stx-hashtable G3366@sym G336e@stx) G336e@stx)))) ((lambda (G3370@t) (if G3370@t ((lambda (G3372@x) ((lambda (G3374@name G3375@label) (G2e14@add-subst (G2dbb@make-rib (list G3374@name) (list G2d9c@top-mark*) (list G3375@label) '#f '#f) G336c@stx)) (car G3372@x) (cdr G3372@x))) G3370@t) G336c@stx)) (assq G3366@sym G336a@subst)))) (G2df2@make-stx G3366@sym G2d9c@top-mark* '() '()))) (G2bf2@G2a5c@library-subst (G2c16@G2aa4@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G2ff7@scheme-stx-hashtable G3366@sym '#f)))) (set! G2ffb@lexical-var car) (set! G2ffd@lexical-mutable? cdr) (set! G2fff@set-lexical-mutable! set-cdr!) (set! G3001@add-lexical (lambda (G3378@lab G3379@lex G337a@r) (cons (cons* G3378@lab 'lexical G3379@lex '#f) G337a@r))) (set! G3003@add-lexicals (lambda (G337e@lab* G337f@lex* G3380@r) (if (null? G337e@lab*) G3380@r (G3003@add-lexicals (cdr G337e@lab*) (cdr G337f@lex*) (G3001@add-lexical (car G337e@lab*) (car G337f@lex*) G3380@r))))) (set! G3005@letrec-helper (lambda (G3384@e G3385@r G3386@mr G3387@build) ((lambda (G338c@t) ((lambda (G338e@ls/false) (if G338e@ls/false (apply (lambda (G3390@lhs* G3391@rhs* G3392@b G3393@b*) (if (not (G2e32@valid-bound-ids? G3390@lhs*)) (G3025@invalid-fmls-error G3384@e G3390@lhs*) ((lambda (G3398@lex* G3399@lab*) ((lambda (G339c@rib G339d@r) ((lambda (G33a0@body G33a1@rhs*) (G3387@build '#f G3398@lex* G33a1@rhs* G33a0@body)) (G30a5@chi-internal (G2e14@add-subst G339c@rib (cons G3392@b G3393@b*)) G339d@r G3386@mr) (G308b@chi-expr* (map (lambda (G33a4@x) (G2e14@add-subst G339c@rib G33a4@x)) G3391@rhs*) G339d@r G3386@mr))) (G2de1@make-full-rib G3390@lhs* G3399@lab*) (G3003@add-lexicals G3399@lab* G3398@lex* G3385@r))) (map G2da0@gen-lexical G3390@lhs*) (map G2da4@gen-label G3390@lhs*)))) G338e@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G338c@t))) (G306b@syntax-dispatch G338c@t '(_ #(each (any any)) any . each-any)))) G3384@e))) (set! G3007@letrec-transformer (lambda (G33a6@e G33a7@r G33a8@mr) (G3005@letrec-helper G33a6@e G33a7@r G33a8@mr G2d85@G2cf8@build-letrec))) (set! G3009@letrec*-transformer (lambda (G33ac@e G33ad@r G33ae@mr) (G3005@letrec-helper G33ac@e G33ad@r G33ae@mr G2d86@G2cfa@build-letrec*))) (set! G300b@fluid-let-syntax-transformer (lambda (G33b2@e G33b3@r G33b4@mr) ((lambda (G33b9@lookup) (begin (set! G33b9@lookup (lambda (G33cc@x) ((lambda (G33ce@t) (if G33ce@t G33ce@t (begin '#f (G315e@syntax-violation '#f '"unbound identifier" G33b2@e G33cc@x)))) (G2e42@id->label G33cc@x)))) ((lambda (G33ba@t) ((lambda (G33bc@ls/false) (if G33bc@ls/false (apply (lambda (G33be@lhs* G33bf@rhs* G33c0@b G33c1@b*) (if (not (G2e32@valid-bound-ids? G33be@lhs*)) (G3025@invalid-fmls-error G33b2@e G33be@lhs*) ((lambda (G33c6@lab* G33c7@rhs*) (G30a5@chi-internal (cons G33c0@b G33c1@b*) (append (map cons G33c6@lab* G33c7@rhs*) G33b3@r) (append (map cons G33c6@lab* G33c7@rhs*) G33b4@mr))) (map G33b9@lookup G33be@lhs*) (map (lambda (G33ca@x) (G2e6f@make-eval-transformer (G30cc@expand-transformer G33ca@x G33b4@mr))) G33bf@rhs*)))) G33bc@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G33ba@t))) (G306b@syntax-dispatch G33ba@t '(_ #(each (any any)) any . each-any)))) G33b2@e))) '#f))) (set! G300d@type-descriptor-transformer (lambda (G33d0@e G33d1@r G33d2@mr) ((lambda (G33d6@t) ((lambda (G33d8@ls/false) (if (if G33d8@ls/false (begin '#f (apply (lambda (G33da@id) (G2e28@id? G33da@id)) G33d8@ls/false)) '#f) (apply (lambda (G33dc@id) ((lambda (G33de@lab) ((lambda (G33e0@b) ((lambda (G33e2@type) ((lambda () (begin (if (not G33de@lab) (G2e4e@raise-unbound-error G33dc@id) (void)) (if (not (if (eq? G33e2@type '$rtd) (begin '#f (not (list? (G2e4c@binding-value G33e0@b)))) '#f)) (G315e@syntax-violation '#f '"not a record type" G33d0@e) (void)) (list 'quote (G2e4c@binding-value G33e0@b)))))) (G2e4a@binding-type G33e0@b))) (G2e46@label->binding G33de@lab G33d1@r))) (G2e42@id->label G33dc@id))) G33d8@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G33d6@t))) (G306b@syntax-dispatch G33d6@t '(_ any)))) G33d0@e))) (set! G300f@record-type-descriptor-transformer (lambda (G33e4@e G33e5@r G33e6@mr) ((lambda (G33ea@t) ((lambda (G33ec@ls/false) (if (if G33ec@ls/false (begin '#f (apply (lambda (G33ee@id) (G2e28@id? G33ee@id)) G33ec@ls/false)) '#f) (apply (lambda (G33f0@id) ((lambda (G33f2@lab) ((lambda (G33f4@b) ((lambda (G33f6@type) ((lambda () (begin (if (not G33f2@lab) (G2e4e@raise-unbound-error G33f0@id) (void)) (if (not (if (eq? G33f6@type '$rtd) (begin '#f (list? (G2e4c@binding-value G33f4@b))) '#f)) (G315e@syntax-violation '#f '"not a record type" G33e4@e) (void)) (G308f@chi-expr (car (G2e4c@binding-value G33f4@b)) G33e5@r G33e6@mr))))) (G2e4a@binding-type G33f4@b))) (G2e46@label->binding G33f2@lab G33e5@r))) (G2e42@id->label G33f0@id))) G33ec@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G33ea@t))) (G306b@syntax-dispatch G33ea@t '(_ any)))) G33e4@e))) (set! G3011@record-constructor-descriptor-transformer (lambda (G33f8@e G33f9@r G33fa@mr) ((lambda (G33fe@t) ((lambda (G3400@ls/false) (if (if G3400@ls/false (begin '#f (apply (lambda (G3402@id) (G2e28@id? G3402@id)) G3400@ls/false)) '#f) (apply (lambda (G3404@id) ((lambda (G3406@lab) ((lambda (G3408@b) ((lambda (G340a@type) ((lambda () (begin (if (not G3406@lab) (G2e4e@raise-unbound-error G3404@id) (void)) (if (not (if (eq? G340a@type '$rtd) (begin '#f (list? (G2e4c@binding-value G3408@b))) '#f)) (G315e@syntax-violation '#f '"invalid type" G33f8@e) (void)) (G308f@chi-expr (cadr (G2e4c@binding-value G3408@b)) G33f9@r G33fa@mr))))) (G2e4a@binding-type G3408@b))) (G2e46@label->binding G3406@lab G33f9@r))) (G2e42@id->label G3404@id))) G3400@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G33fe@t))) (G306b@syntax-dispatch G33fe@t '(_ any)))) G33f8@e))) (set! G3013@when-macro (lambda (G340c@e) ((lambda (G340e@t) ((lambda (G3410@ls/false) (if G3410@ls/false (apply (lambda (G3412@test G3413@e G3414@e*) (G3021@bless (list 'if G3412@test (cons 'begin (cons G3413@e G3414@e*))))) G3410@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G340e@t))) (G306b@syntax-dispatch G340e@t '(_ any any . each-any)))) G340c@e))) (set! G3015@unless-macro (lambda (G3418@e) ((lambda (G341a@t) ((lambda (G341c@ls/false) (if G341c@ls/false (apply (lambda (G341e@test G341f@e G3420@e*) (G3021@bless (list 'if (list 'not G341e@test) (cons 'begin (cons G341f@e G3420@e*))))) G341c@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G341a@t))) (G306b@syntax-dispatch G341a@t '(_ any any . each-any)))) G3418@e))) (set! G3017@if-transformer (lambda (G3424@e G3425@r G3426@mr) ((lambda (G342a@t) ((lambda (G342c@ls/false) (if G342c@ls/false (apply (lambda (G342e@e0 G342f@e1 G3430@e2) (list 'if (G308f@chi-expr G342e@e0 G3425@r G3426@mr) (G308f@chi-expr G342f@e1 G3425@r G3426@mr) (G308f@chi-expr G3430@e2 G3425@r G3426@mr))) G342c@ls/false) ((lambda (G3434@t) ((lambda (G3436@ls/false) (if G3436@ls/false (apply (lambda (G3438@e0 G3439@e1) (list 'if (G308f@chi-expr G3438@e0 G3425@r G3426@mr) (G308f@chi-expr G3439@e1 G3425@r G3426@mr) (G2d84@G2cf6@build-void))) G3436@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3434@t))) (G306b@syntax-dispatch G3434@t '(_ any any)))) G342a@t))) (G306b@syntax-dispatch G342a@t '(_ any any any)))) G3424@e))) (set! G3019@case-macro (lambda (G343c@e) ((lambda (G343f@build-last G3441@build-one) (begin (set! G343f@build-last (lambda (G3466@cls) ((lambda (G3468@t) ((lambda (G346a@ls/false) (if G346a@ls/false (apply (lambda (G346c@e G346d@e*) (cons 'begin (cons G346c@e G346d@e*))) G346a@ls/false) ((lambda (G3470@t) ((lambda (G3472@ls/false) (if G3472@ls/false (apply (lambda () (G3441@build-one G3466@cls '(if #f #f))) G3472@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3470@t))) (G306b@syntax-dispatch G3470@t '_))) G3468@t))) (G306b@syntax-dispatch G3468@t '(#(scheme-id else) any . each-any)))) G3466@cls))) (set! G3441@build-one (lambda (G3458@cls G3459@k) ((lambda (G345c@t) ((lambda (G345e@ls/false) (if G345e@ls/false (apply (lambda (G3460@d* G3461@e G3462@e*) (list 'if (list 'memv 't (list 'quote G3460@d*)) (cons 'begin (cons G3461@e G3462@e*)) G3459@k)) G345e@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G345c@t))) (G306b@syntax-dispatch G345c@t '(each-any any . each-any)))) G3458@cls))) ((lambda (G3442@t) ((lambda (G3444@ls/false) (if G3444@ls/false (apply (lambda (G3446@expr) (G3021@bless (cons 'let (cons (list (list 't G3446@expr)) '((if #f #f)))))) G3444@ls/false) ((lambda (G3448@t) ((lambda (G344a@ls/false) (if G344a@ls/false (apply (lambda (G344c@expr G344d@cls G344e@cls*) (G3021@bless (list 'let (list (list 't G344c@expr)) ((letrec ((G3452@f (lambda (G3454@cls G3455@cls*) (if (null? G3455@cls*) (G343f@build-last G3454@cls) (G3441@build-one G3454@cls (G3452@f (car G3455@cls*) (cdr G3455@cls*))))))) G3452@f) G344d@cls G344e@cls*)))) G344a@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3448@t))) (G306b@syntax-dispatch G3448@t '(_ any any . each-any)))) G3442@t))) (G306b@syntax-dispatch G3442@t '(_ any)))) G343c@e))) '#f '#f))) (set! G301b@quote-transformer (lambda (G3474@e G3475@r G3476@mr) ((lambda (G347a@t) ((lambda (G347c@ls/false) (if G347c@ls/false (apply (lambda (G347e@datum) (list 'quote (G2e3e@stx->datum G347e@datum))) G347c@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G347a@t))) (G306b@syntax-dispatch G347a@t '(_ any)))) G3474@e))) (set! G301d@case-lambda-transformer (lambda (G3480@e G3481@r G3482@mr) ((lambda (G3486@t) ((lambda (G3488@ls/false) (if G3488@ls/false (apply (lambda (G348a@fmls* G348b@b* G348c@b**) (call-with-values (lambda () (G3097@chi-lambda-clause* G3480@e G348a@fmls* (map cons G348b@b* G348c@b**) G3481@r G3482@mr)) (lambda (G3492@G3490 G3493@G3491) ((lambda (G3496@body* G3497@fmls*) (G2d81@G2caa@build-case-lambda '#f G3497@fmls* G3496@body*)) G3493@G3491 G3492@G3490)))) G3488@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3486@t))) (G306b@syntax-dispatch G3486@t '(_ . #(each (any any . each-any)))))) G3480@e))) (set! G301f@lambda-transformer (lambda (G349a@e G349b@r G349c@mr) ((lambda (G34a0@t) ((lambda (G34a2@ls/false) (if G34a2@ls/false (apply (lambda (G34a4@fmls G34a5@b G34a6@b*) (call-with-values (lambda () (G3095@chi-lambda-clause G349a@e G34a4@fmls (cons G34a5@b G34a6@b*) G349b@r G349c@mr)) (lambda (G34ac@G34aa G34ad@G34ab) ((lambda (G34b0@body G34b1@fmls) (G2d80@G2ca8@build-lambda '#f G34b1@fmls G34b0@body)) G34ad@G34ab G34ac@G34aa)))) G34a2@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G34a0@t))) (G306b@syntax-dispatch G34a0@t '(_ any any . each-any)))) G349a@e))) (set! G3021@bless (lambda (G34b4@x) (G2e10@mkstx ((letrec ((G34b6@f (lambda (G34b8@x) (if (G2df0@stx? G34b8@x) G34b8@x (if (pair? G34b8@x) (cons (G34b6@f (car G34b8@x)) (G34b6@f (cdr G34b8@x))) (if (symbol? G34b8@x) (G2ff9@scheme-stx G34b8@x) (if (vector? G34b8@x) (vector-map G34b6@f G34b8@x) G34b8@x))))))) G34b6@f) G34b4@x) '() '() '()))) (set! G3023@with-syntax-macro (lambda (G34ba@e) ((lambda (G34bc@t) ((lambda (G34be@ls/false) (if G34be@ls/false (apply (lambda (G34c0@pat* G34c1@expr* G34c2@b G34c3@b*) ((lambda (G34c8@idn*) (begin (G3093@verify-formals (map car G34c8@idn*) G34ba@e) ((lambda (G34ca@t*) (G3021@bless (list 'let (map list G34ca@t* G34c1@expr*) ((letrec ((G34cc@f (lambda (G34ce@pat* G34cf@t*) (if (null? G34ce@pat*) (cons 'begin (cons '#f (cons G34c2@b G34c3@b*))) (list 'syntax-case (car G34cf@t*) '() (list (car G34ce@pat*) (G34cc@f (cdr G34ce@pat*) (cdr G34cf@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34ce@pat*)) (car G34cf@t*)))))))) G34cc@f) G34c0@pat* G34ca@t*)))) (G314a@generate-temporaries G34c1@expr*)))) ((letrec ((G34d2@f (lambda (G34d4@pat*) (if (null? G34d4@pat*) '() (call-with-values (lambda () (G3069@convert-pattern (car G34d4@pat*) '())) (lambda (G34d8@G34d6 G34d9@G34d7) ((lambda (G34dc@idn* G34dd@pat) (append G34dc@idn* (G34d2@f (cdr G34d4@pat*)))) G34d9@G34d7 G34d8@G34d6))))))) G34d2@f) G34c0@pat*))) G34be@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G34bc@t))) (G306b@syntax-dispatch G34bc@t '(_ #(each (any any)) any . each-any)))) G34ba@e))) (set! G3025@invalid-fmls-error (lambda (G34e0@stx G34e1@fmls) ((lambda (G34e4@t) ((lambda (G34e6@ls/false) (if G34e6@ls/false (apply (lambda (G34e8@id* G34e9@last) ((letrec ((G34ec@f (lambda (G34ee@id*) (if (null? G34ee@id*) (values) (if (not (G2e28@id? (car G34ee@id*))) (G315e@syntax-violation '#f '"not an identifier" G34e0@stx (car G34ee@id*)) (begin (G34ec@f (cdr G34ee@id*)) (if (G2e36@bound-id-member? (car G34ee@id*) (cdr G34ee@id*)) (G315e@syntax-violation '#f '"duplicate binding" G34e0@stx (car G34ee@id*)) (void)))))))) G34ec@f) (if (G2e28@id? G34e9@last) (cons G34e9@last G34e8@id*) (if (G2e1e@syntax-null? G34e9@last) G34e8@id* (G315e@syntax-violation '#f '"not an identifier" G34e0@stx G34e9@last))))) G34e6@ls/false) ((lambda (G34f0@t) ((lambda (G34f2@ls/false) (if G34f2@ls/false (apply (lambda () (G315e@syntax-violation '#f '"malformed binding form" G34e0@stx G34e1@fmls)) G34f2@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G34f0@t))) (G306b@syntax-dispatch G34f0@t '_))) G34e4@t))) (G306b@syntax-dispatch G34e4@t '#(each+ any () any)))) G34e1@fmls))) (set! G3027@let-macro (lambda (G34f4@stx) ((lambda (G34f6@t) ((lambda (G34f8@ls/false) (if G34f8@ls/false (apply (lambda (G34fa@lhs* G34fb@rhs* G34fc@b G34fd@b*) (if (G2e32@valid-bound-ids? G34fa@lhs*) (G3021@bless (cons (cons 'lambda (cons G34fa@lhs* (cons G34fc@b G34fd@b*))) G34fb@rhs*)) (G3025@invalid-fmls-error G34f4@stx G34fa@lhs*))) G34f8@ls/false) ((lambda (G3502@t) ((lambda (G3504@ls/false) (if (if G3504@ls/false (begin '#f (apply (lambda (G3506@f G3507@lhs* G3508@rhs* G3509@b G350a@b*) (G2e28@id? G3506@f)) G3504@ls/false)) '#f) (apply (lambda (G3510@f G3511@lhs* G3512@rhs* G3513@b G3514@b*) (if (G2e32@valid-bound-ids? G3511@lhs*) (G3021@bless (cons (list 'letrec (list (list G3510@f (cons 'lambda (cons G3511@lhs* (cons G3513@b G3514@b*))))) G3510@f) G3512@rhs*)) (G3025@invalid-fmls-error G34f4@stx G3511@lhs*))) G3504@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3502@t))) (G306b@syntax-dispatch G3502@t '(_ any #(each (any any)) any . each-any)))) G34f6@t))) (G306b@syntax-dispatch G34f6@t '(_ #(each (any any)) any . each-any)))) G34f4@stx))) (set! G3029@let-values-macro (lambda (G351a@stx) ((lambda (G351d@rename G351f@rename*) (begin (set! G351d@rename (lambda (G357f@x G3580@old* G3581@new*) (begin (if (not (G2e28@id? G357f@x)) (G315e@syntax-violation '#f '"not an indentifier" G351a@stx G357f@x) (void)) (if (G2e36@bound-id-member? G357f@x G3580@old*) (G315e@syntax-violation '#f '"duplicate binding" G351a@stx G357f@x) (void)) ((lambda (G3585@y) (values G3585@y (cons G357f@x G3580@old*) (cons G3585@y G3581@new*))) (gensym (G3164@syntax->datum G357f@x)))))) (set! G351f@rename* (lambda (G356d@x* G356e@old* G356f@new*) (if (null? G356d@x*) (values '() G356e@old* G356f@new*) (call-with-values (lambda () (G351d@rename (car G356d@x*) G356e@old* G356f@new*)) (lambda (G3573@x G3574@old* G3575@new*) (call-with-values (lambda () (G351f@rename* (cdr G356d@x*) G3574@old* G3575@new*)) (lambda (G3579@x* G357a@old* G357b@new*) (values (cons G3573@x G3579@x*) G357a@old* G357b@new*)))))))) ((lambda (G3520@t) ((lambda (G3522@ls/false) (if G3522@ls/false (apply (lambda (G3524@b G3525@b*) (cons* (G3021@bless 'let) '() G3524@b G3525@b*)) G3522@ls/false) ((lambda (G3528@t) ((lambda (G352a@ls/false) (if G352a@ls/false (apply (lambda (G352c@lhs* G352d@rhs* G352e@b G352f@b*) (G3021@bless ((letrec ((G3534@f (lambda (G3536@lhs* G3537@rhs* G3538@old* G3539@new*) (if (null? G3536@lhs*) (cons 'let (cons (map list G3538@old* G3539@new*) (cons G352e@b G352f@b*))) ((lambda (G353e@t) ((lambda (G3540@ls/false) (if G3540@ls/false (apply (lambda (G3542@x*) (call-with-values (lambda () (G351f@rename* G3542@x* G3538@old* G3539@new*)) (lambda (G3547@G3544 G3548@G3545 G3549@G3546) ((lambda (G354d@new* G354e@old* G354f@y*) (list 'call-with-values (list 'lambda '() (car G3537@rhs*)) (list 'lambda G354f@y* (G3534@f (cdr G3536@lhs*) (cdr G3537@rhs*) G354e@old* G354d@new*)))) G3549@G3546 G3548@G3545 G3547@G3544)))) G3540@ls/false) ((lambda (G3553@t) ((lambda (G3555@ls/false) (if G3555@ls/false (apply (lambda (G3557@x* G3558@x) (call-with-values (lambda () (G351d@rename G3558@x G3538@old* G3539@new*)) (lambda (G355b@y G355c@old* G355d@new*) (call-with-values (lambda () (G351f@rename* G3557@x* G355c@old* G355d@new*)) (lambda (G3561@y* G3562@old* G3563@new*) (list 'call-with-values (list 'lambda '() (car G3537@rhs*)) (list 'lambda (append G3561@y* G355b@y) (G3534@f (cdr G3536@lhs*) (cdr G3537@rhs*) G3562@old* G3563@new*)))))))) G3555@ls/false) ((lambda (G3567@t) ((lambda (G3569@ls/false) (if G3569@ls/false (apply (lambda (G356b@others) (G315e@syntax-violation '#f '"malformed bindings" G351a@stx G356b@others)) G3569@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3567@t))) (G306b@syntax-dispatch G3567@t 'any))) G3553@t))) (G306b@syntax-dispatch G3553@t '#(each+ any () any)))) G353e@t))) (G306b@syntax-dispatch G353e@t 'each-any))) (car G3536@lhs*)))))) G3534@f) G352c@lhs* G352d@rhs* '() '()))) G352a@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3528@t))) (G306b@syntax-dispatch G3528@t '(_ #(each (any any)) any . each-any)))) G3520@t))) (G306b@syntax-dispatch G3520@t '(_ () any . each-any)))) G351a@stx))) '#f '#f))) (set! G302b@let*-values-macro (lambda (G3587@stx) ((lambda (G358a@check) (begin (set! G358a@check (lambda (G35b9@x*) (if (not (null? G35b9@x*)) ((lambda (G35bb@x) (begin (if (not (G2e28@id? G35bb@x)) (G315e@syntax-violation '#f '"not an identifier" G3587@stx G35bb@x) (void)) (G358a@check (cdr G35b9@x*)) (if (G2e36@bound-id-member? G35bb@x (cdr G35b9@x*)) (G315e@syntax-violation '#f '"duplicate identifier" G3587@stx G35bb@x) (void)))) (car G35b9@x*)) (void)))) ((lambda (G358b@t) ((lambda (G358d@ls/false) (if G358d@ls/false (apply (lambda (G358f@b G3590@b*) (cons* (G3021@bless 'let) '() G358f@b G3590@b*)) G358d@ls/false) ((lambda (G3593@t) ((lambda (G3595@ls/false) (if G3595@ls/false (apply (lambda (G3597@lhs* G3598@rhs* G3599@b G359a@b*) (G3021@bless ((letrec ((G359f@f (lambda (G35a1@lhs* G35a2@rhs*) (if (null? G35a1@lhs*) (cons 'begin (cons G3599@b G359a@b*)) ((lambda (G35a5@t) ((lambda (G35a7@ls/false) (if G35a7@ls/false (apply (lambda (G35a9@x*) (begin (G358a@check G35a9@x*) (list 'call-with-values (list 'lambda '() (car G35a2@rhs*)) (list 'lambda G35a9@x* (G359f@f (cdr G35a1@lhs*) (cdr G35a2@rhs*)))))) G35a7@ls/false) ((lambda (G35ab@t) ((lambda (G35ad@ls/false) (if G35ad@ls/false (apply (lambda (G35af@x* G35b0@x) (begin (G358a@check (cons G35b0@x G35af@x*)) (list 'call-with-values (list 'lambda '() (car G35a2@rhs*)) (list 'lambda (append G35af@x* G35b0@x) (G359f@f (cdr G35a1@lhs*) (cdr G35a2@rhs*)))))) G35ad@ls/false) ((lambda (G35b3@t) ((lambda (G35b5@ls/false) (if G35b5@ls/false (apply (lambda (G35b7@others) (G315e@syntax-violation '#f '"malformed bindings" G3587@stx G35b7@others)) G35b5@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G35b3@t))) (G306b@syntax-dispatch G35b3@t 'any))) G35ab@t))) (G306b@syntax-dispatch G35ab@t '#(each+ any () any)))) G35a5@t))) (G306b@syntax-dispatch G35a5@t 'each-any))) (car G35a1@lhs*)))))) G359f@f) G3597@lhs* G3598@rhs*))) G3595@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3593@t))) (G306b@syntax-dispatch G3593@t '(_ #(each (any any)) any . each-any)))) G358b@t))) (G306b@syntax-dispatch G358b@t '(_ () any . each-any)))) G3587@stx))) '#f))) (set! G302d@trace-lambda-macro (lambda (G35bd@stx) ((lambda (G35bf@t) ((lambda (G35c1@ls/false) (if G35c1@ls/false (apply (lambda (G35c3@who G35c4@fmls G35c5@b G35c6@b*) (if (G2e32@valid-bound-ids? G35c4@fmls) (G3021@bless (list 'make-traced-procedure (list 'quote G35c3@who) (cons 'lambda (cons G35c4@fmls (cons G35c5@b G35c6@b*))))) (G3025@invalid-fmls-error G35bd@stx G35c4@fmls))) G35c1@ls/false) ((lambda (G35cb@t) ((lambda (G35cd@ls/false) (if G35cd@ls/false (apply (lambda (G35cf@who G35d0@fmls G35d1@last G35d2@b G35d3@b*) (if (G2e32@valid-bound-ids? (cons G35d1@last G35d0@fmls)) (G3021@bless (list 'make-traced-procedure (list 'quote G35cf@who) (cons 'lambda (cons (append G35d0@fmls G35d1@last) (cons G35d2@b G35d3@b*))))) (G3025@invalid-fmls-error G35bd@stx (append G35d0@fmls G35d1@last)))) G35cd@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G35cb@t))) (G306b@syntax-dispatch G35cb@t '(_ any #(each+ any () any) any . each-any)))) G35bf@t))) (G306b@syntax-dispatch G35bf@t '(_ any each-any any . each-any)))) G35bd@stx))) (set! G302f@trace-define-macro (lambda (G35d9@stx) ((lambda (G35db@t) ((lambda (G35dd@ls/false) (if G35dd@ls/false (apply (lambda (G35df@who G35e0@fmls G35e1@b G35e2@b*) (if (G2e32@valid-bound-ids? G35e0@fmls) (G3021@bless (list 'define G35df@who (list 'make-traced-procedure (list 'quote G35df@who) (cons 'lambda (cons G35e0@fmls (cons G35e1@b G35e2@b*)))))) (G3025@invalid-fmls-error G35d9@stx G35e0@fmls))) G35dd@ls/false) ((lambda (G35e7@t) ((lambda (G35e9@ls/false) (if G35e9@ls/false (apply (lambda (G35eb@who G35ec@fmls G35ed@last G35ee@b G35ef@b*) (if (G2e32@valid-bound-ids? (cons G35ed@last G35ec@fmls)) (G3021@bless (list 'define G35eb@who (list 'make-traced-procedure (list 'quote G35eb@who) (cons 'lambda (cons (append G35ec@fmls G35ed@last) (cons G35ee@b G35ef@b*)))))) (G3025@invalid-fmls-error G35d9@stx (append G35ec@fmls G35ed@last)))) G35e9@ls/false) ((lambda (G35f5@t) ((lambda (G35f7@ls/false) (if G35f7@ls/false (apply (lambda (G35f9@who G35fa@expr) (if (G2e28@id? G35f9@who) (G3021@bless (list 'define G35f9@who (list 'let (list (list 'v G35fa@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G35f9@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G315e@syntax-violation '#f '"invalid name" G35d9@stx))) G35f7@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G35f5@t))) (G306b@syntax-dispatch G35f5@t '(_ any any)))) G35e7@t))) (G306b@syntax-dispatch G35e7@t '(_ (any . #(each+ any () any)) any . each-any)))) G35db@t))) (G306b@syntax-dispatch G35db@t '(_ (any . each-any) any . each-any)))) G35d9@stx))) (set! G3031@trace-define-syntax-macro (lambda (G35fd@stx) ((lambda (G35ff@t) ((lambda (G3601@ls/false) (if G3601@ls/false (apply (lambda (G3603@who G3604@expr) (if (G2e28@id? G3603@who) (G3021@bless (list 'define-syntax G3603@who (list 'make-traced-macro (list 'quote G3603@who) G3604@expr))) (G315e@syntax-violation '#f '"invalid name" G35fd@stx))) G3601@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G35ff@t))) (G306b@syntax-dispatch G35ff@t '(_ any any)))) G35fd@stx))) (set! G3033@trace-let/rec-syntax (lambda (G3607@who) (lambda (G3609@stx) ((lambda (G360b@t) ((lambda (G360d@ls/false) (if G360d@ls/false (apply (lambda (G360f@lhs* G3610@rhs* G3611@b G3612@b*) (if (G2e32@valid-bound-ids? G360f@lhs*) ((lambda (G3617@rhs*) (G3021@bless (cons G3607@who (cons (map list G360f@lhs* G3617@rhs*) (cons G3611@b G3612@b*))))) (map (lambda (G3619@lhs G361a@rhs) (list 'make-traced-macro (list 'quote G3619@lhs) G361a@rhs)) G360f@lhs* G3610@rhs*)) (G3025@invalid-fmls-error G3609@stx G360f@lhs*))) G360d@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G360b@t))) (G306b@syntax-dispatch G360b@t '(_ #(each (any any)) any . each-any)))) G3609@stx)))) (set! G3035@trace-let-syntax-macro (G3033@trace-let/rec-syntax 'let-syntax)) (set! G3037@trace-letrec-syntax-macro (G3033@trace-let/rec-syntax 'letrec-syntax)) (set! G3039@guard-macro (lambda (G361d@x) ((lambda (G3620@gen-clauses) (begin (set! G3620@gen-clauses (lambda (G3637@con G3638@outerk G3639@clause*) ((lambda (G363e@f G3640@f*) (begin (set! G363e@f (lambda (G3671@x G3672@k) ((lambda (G3675@t) ((lambda (G3677@ls/false) (if G3677@ls/false (apply (lambda (G3679@e G367a@p) ((lambda (G367d@t) (list 'let (list (list G367d@t G3679@e)) (list 'if G367d@t (list G367a@p G367d@t) G3672@k))) (gensym))) G3677@ls/false) ((lambda (G367f@t) ((lambda (G3681@ls/false) (if G3681@ls/false (apply (lambda (G3683@e) ((lambda (G3685@t) (list 'let (list (list G3685@t G3683@e)) (list 'if G3685@t G3685@t G3672@k))) (gensym))) G3681@ls/false) ((lambda (G3687@t) ((lambda (G3689@ls/false) (if G3689@ls/false (apply (lambda (G368b@e G368c@v G368d@v*) (list 'if G368b@e (cons 'begin (cons G368c@v G368d@v*)) G3672@k)) G3689@ls/false) ((lambda (G3691@t) ((lambda (G3693@ls/false) (if G3693@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid guard clause" G3671@x)) G3693@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3691@t))) (G306b@syntax-dispatch G3691@t '_))) G3687@t))) (G306b@syntax-dispatch G3687@t '(any any . each-any)))) G367f@t))) (G306b@syntax-dispatch G367f@t '(any)))) G3675@t))) (G306b@syntax-dispatch G3675@t '(any #(scheme-id =>) any)))) G3671@x))) (set! G3640@f* (lambda (G364b@x*) ((lambda (G364d@t) ((lambda (G364f@ls/false) (if G364f@ls/false (apply (lambda () (values (list 'raise G3637@con) '#t)) G364f@ls/false) ((lambda (G3651@t) ((lambda (G3653@ls/false) (if G3653@ls/false (apply (lambda (G3655@e G3656@e*) (values (cons 'begin (cons G3655@e G3656@e*)) '#f)) G3653@ls/false) ((lambda (G3659@t) ((lambda (G365b@ls/false) (if G365b@ls/false (apply (lambda (G365d@cls G365e@cls*) (call-with-values (lambda () (G3640@f* G365e@cls*)) (lambda (G3663@G3661 G3664@G3662) ((lambda (G3667@g G3668@e) (values (G363e@f G365d@cls G3668@e) G3667@g)) G3664@G3662 G3663@G3661)))) G365b@ls/false) ((lambda (G366b@t) ((lambda (G366d@ls/false) (if G366d@ls/false (apply (lambda (G366f@others) (G315e@syntax-violation '#f '"invalid guard clause" G366f@others)) G366d@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G366b@t))) (G306b@syntax-dispatch G366b@t 'any))) G3659@t))) (G306b@syntax-dispatch G3659@t '(any . any)))) G3651@t))) (G306b@syntax-dispatch G3651@t '((#(scheme-id else) any . each-any))))) G364d@t))) (G306b@syntax-dispatch G364d@t '()))) G364b@x*))) (call-with-values (lambda () (G3640@f* G3639@clause*)) (lambda (G3643@G3641 G3644@G3642) ((lambda (G3647@raisek G3648@code) (if G3647@raisek (list G3638@outerk G3648@code) G3648@code)) G3644@G3642 G3643@G3641))))) '#f '#f))) ((lambda (G3621@t) ((lambda (G3623@ls/false) (if (if G3623@ls/false (begin '#f (apply (lambda (G3625@con G3626@clause* G3627@b G3628@b*) (G2e28@id? G3625@con)) G3623@ls/false)) '#f) (apply (lambda (G362d@con G362e@clause* G362f@b G3630@b*) ((lambda (G3635@outerk) (G3021@bless (list 'call/cc (list 'lambda (list G3635@outerk) (list 'with-exception-handler (list 'lambda (list G362d@con) (G3620@gen-clauses G362d@con G3635@outerk G362e@clause*)) (cons 'lambda (cons '() (cons '#f (cons G362f@b G3630@b*))))))))) (gensym))) G3623@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3621@t))) (G306b@syntax-dispatch G3621@t '(_ (any . each-any) any . each-any)))) G361d@x))) '#f))) (set! G303b@define-enumeration-macro (lambda (G3695@stx) ((lambda (G3698@set? G369a@remove-dups) (begin (set! G3698@set? (lambda (G36b1@x) ((lambda (G36b3@t) (if G36b3@t G36b3@t (begin '#f (if (not (memq (car G36b1@x) (cdr G36b1@x))) (begin '#f (G3698@set? (cdr G36b1@x))) '#f)))) (null? G36b1@x)))) (set! G369a@remove-dups (lambda (G36af@ls) (if (null? G36af@ls) '() (cons (car G36af@ls) (G369a@remove-dups (remq (car G36af@ls) (cdr G36af@ls))))))) ((lambda (G369b@t) ((lambda (G369d@ls/false) (if (if G369d@ls/false (begin '#f (apply (lambda (G369f@name G36a0@id* G36a1@maker) (if (G2e28@id? G369f@name) (if (G2e28@id? G36a1@maker) (begin '#f (for-all G2e28@id? G36a0@id*)) '#f) '#f)) G369d@ls/false)) '#f) (apply (lambda (G36a5@name G36a6@id* G36a7@maker) ((lambda (G36ab@name* G36ac@mk) (G3021@bless (list 'begin (list 'define G36ac@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G36ab@name*)))) (list 'define-syntax G36a5@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G36ab@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G36a5@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G36a7@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G36a7@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G36ab@name*)) (cons 'syntax-violation (cons (list 'quote G36a7@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36ac@mk '('(n* ...)))))))))))) (G369a@remove-dups (G3164@syntax->datum G36a6@id*)) (gensym))) G369d@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G369b@t))) (G306b@syntax-dispatch G369b@t '(_ any each-any any)))) G3695@stx))) '#f '#f))) (set! G303d@time-macro (lambda (G36b5@stx) ((lambda (G36b7@t) ((lambda (G36b9@ls/false) (if G36b9@ls/false (apply (lambda (G36bb@expr) ((lambda (G36bd@str) (G3021@bless (list 'time-it G36bd@str (list 'lambda '() G36bb@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36c1@G36bf G36c2@G36c0) ((lambda (G36c5@e G36c6@p) (begin (write (G3164@syntax->datum G36bb@expr) G36c6@p) (G36c5@e))) G36c2@G36c0 G36c1@G36bf))))) G36b9@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G36b7@t))) (G306b@syntax-dispatch G36b7@t '(_ any)))) G36b5@stx))) (set! G303f@delay-macro (lambda (G36c9@stx) ((lambda (G36cb@t) ((lambda (G36cd@ls/false) (if G36cd@ls/false (apply (lambda (G36cf@expr) (G3021@bless (list 'make-promise (list 'lambda '() G36cf@expr)))) G36cd@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G36cb@t))) (G306b@syntax-dispatch G36cb@t '(_ any)))) G36c9@stx))) (set! G3041@assert-macro (lambda (G36d1@stx) ((lambda (G36d3@t) ((lambda (G36d5@ls/false) (if G36d5@ls/false (apply (lambda (G36d7@expr) ((lambda (G36d9@pos) (G3021@bless (list 'unless G36d7@expr (list 'assertion-error (list 'quote G36d7@expr) (list 'quote G36d9@pos))))) ((lambda (G36db@t) (if G36db@t G36db@t (begin '#f (G3154@expression-position G36d7@expr)))) (G3154@expression-position G36d1@stx)))) G36d5@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G36d3@t))) (G306b@syntax-dispatch G36d3@t '(_ any)))) G36d1@stx))) (set! G3043@endianness-macro (lambda (G36dd@stx) ((lambda (G36df@t) ((lambda (G36e1@ls/false) (if G36e1@ls/false (apply (lambda (G36e3@e) ((lambda (G36e5@t) (if (memv G36e5@t '(little)) (G3021@bless ''little) (if (memv G36e5@t '(big)) (G3021@bless ''big) (G315e@syntax-violation '#f '"endianness must be big or little" G36dd@stx)))) (G3164@syntax->datum G36e3@e))) G36e1@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G36df@t))) (G306b@syntax-dispatch G36df@t '(_ any)))) G36dd@stx))) (set! G3045@identifier-syntax-macro (lambda (G36e7@stx) ((lambda (G36e9@t) ((lambda (G36eb@ls/false) (if G36eb@ls/false (apply (lambda (G36ed@expr) (G3021@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G36ed@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G36ed@expr) '((syntax (e* ...)))))))))) G36eb@ls/false) ((lambda (G36ef@t) ((lambda (G36f1@ls/false) (if (if G36f1@ls/false (begin '#f (apply (lambda (G36f3@id1 G36f4@expr1 G36f5@id2 G36f6@expr2 G36f7@expr3) (if (G2e28@id? G36f3@id1) (if (G2e28@id? G36f5@id2) (begin '#f (G2e28@id? G36f6@expr2)) '#f) '#f)) G36f1@ls/false)) '#f) (apply (lambda (G36fd@id1 G36fe@expr1 G36ff@id2 G3700@expr2 G3701@expr3) (G3021@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G36fe@expr1)) (list (list 'set! 'id G3700@expr2) (list 'syntax G3701@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G36fe@expr1 '(e* ...))))))))) G36f1@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G36ef@t))) (G306b@syntax-dispatch G36ef@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G36e9@t))) (G306b@syntax-dispatch G36e9@t '(_ any)))) G36e7@stx))) (set! G3047@do-macro (lambda (G3707@stx) ((lambda (G370a@bind) (begin (set! G370a@bind (lambda (G3721@x) ((lambda (G3723@t) ((lambda (G3725@ls/false) (if G3725@ls/false (apply (lambda (G3727@x G3728@init) (list G3727@x G3728@init G3727@x)) G3725@ls/false) ((lambda (G372b@t) ((lambda (G372d@ls/false) (if G372d@ls/false (apply (lambda (G372f@x G3730@init G3731@step) (list G372f@x G3730@init G3731@step)) G372d@ls/false) ((lambda (G3735@t) ((lambda (G3737@ls/false) (if G3737@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid binding" G3707@stx)) G3737@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3735@t))) (G306b@syntax-dispatch G3735@t '_))) G372b@t))) (G306b@syntax-dispatch G372b@t '(any any any)))) G3723@t))) (G306b@syntax-dispatch G3723@t '(any any)))) G3721@x))) ((lambda (G370b@t) ((lambda (G370d@ls/false) (if G370d@ls/false (apply (lambda (G370f@binding* G3710@test G3711@expr* G3712@command*) ((lambda (G3717@t) ((lambda (G3719@ls/false) (if G3719@ls/false (apply (lambda (G371b@x* G371c@init* G371d@step*) (if (G2e32@valid-bound-ids? G371b@x*) (G3021@bless (list 'letrec (list (list 'loop (list 'lambda G371b@x* (list 'if G3710@test (cons 'begin (cons '(if #f #f) G3711@expr*)) (cons 'begin (append G3712@command* (list (cons 'loop G371d@step*)))))))) (cons 'loop G371c@init*))) (G315e@syntax-violation '#f '"invalid bindings" G3707@stx))) G3719@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3717@t))) (G306b@syntax-dispatch G3717@t '#(each (any any any))))) (map G370a@bind G370f@binding*))) G370d@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G370b@t))) (G306b@syntax-dispatch G370b@t '(_ each-any (any . each-any) . each-any)))) G3707@stx))) '#f))) (set! G3049@let*-macro (lambda (G3739@stx) ((lambda (G373b@t) ((lambda (G373d@ls/false) (if (if G373d@ls/false (begin '#f (apply (lambda (G373f@lhs* G3740@rhs* G3741@b G3742@b*) (for-all G2e28@id? G373f@lhs*)) G373d@ls/false)) '#f) (apply (lambda (G3747@lhs* G3748@rhs* G3749@b G374a@b*) (G3021@bless ((letrec ((G374f@f (lambda (G3751@x*) (if (null? G3751@x*) (cons 'let (cons '() (cons G3749@b G374a@b*))) (list 'let (list (car G3751@x*)) (G374f@f (cdr G3751@x*))))))) G374f@f) (map list G3747@lhs* G3748@rhs*)))) G373d@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G373b@t))) (G306b@syntax-dispatch G373b@t '(_ #(each (any any)) any . each-any)))) G3739@stx))) (set! G304b@or-macro (lambda (G3753@stx) ((lambda (G3755@t) ((lambda (G3757@ls/false) (if G3757@ls/false (apply (lambda () '#f) G3757@ls/false) ((lambda (G3759@t) ((lambda (G375b@ls/false) (if G375b@ls/false (apply (lambda (G375d@e G375e@e*) (G3021@bless ((letrec ((G3761@f (lambda (G3763@e G3764@e*) (if (null? G3764@e*) (list 'begin '#f G3763@e) (list 'let (list (list 't G3763@e)) (list 'if 't 't (G3761@f (car G3764@e*) (cdr G3764@e*)))))))) G3761@f) G375d@e G375e@e*))) G375b@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3759@t))) (G306b@syntax-dispatch G3759@t '(_ any . each-any)))) G3755@t))) (G306b@syntax-dispatch G3755@t '(_)))) G3753@stx))) (set! G304d@and-macro (lambda (G3767@stx) ((lambda (G3769@t) ((lambda (G376b@ls/false) (if G376b@ls/false (apply (lambda () '#t) G376b@ls/false) ((lambda (G376d@t) ((lambda (G376f@ls/false) (if G376f@ls/false (apply (lambda (G3771@e G3772@e*) (G3021@bless ((letrec ((G3775@f (lambda (G3777@e G3778@e*) (if (null? G3778@e*) (list 'begin '#f G3777@e) (cons 'if (cons G3777@e (cons (G3775@f (car G3778@e*) (cdr G3778@e*)) '(#f)))))))) G3775@f) G3771@e G3772@e*))) G376f@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G376d@t))) (G306b@syntax-dispatch G376d@t '(_ any . each-any)))) G3769@t))) (G306b@syntax-dispatch G3769@t '(_)))) G3767@stx))) (set! G304f@cond-macro (lambda (G377b@stx) ((lambda (G377d@t) ((lambda (G377f@ls/false) (if G377f@ls/false (apply (lambda (G3781@cls G3782@cls*) (G3021@bless ((letrec ((G3785@f (lambda (G3787@cls G3788@cls*) (if (null? G3788@cls*) ((lambda (G378b@t) ((lambda (G378d@ls/false) (if G378d@ls/false (apply (lambda (G378f@e G3790@e*) (cons 'begin (cons G378f@e G3790@e*))) G378d@ls/false) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda (G3797@e G3798@p) (list 'let (list (list 't G3797@e)) (list 'if 't (cons G3798@p '(t))))) G3795@ls/false) ((lambda (G379b@t) ((lambda (G379d@ls/false) (if G379d@ls/false (apply (lambda (G379f@e) (cons 'or (cons G379f@e '((if #f #f))))) G379d@ls/false) ((lambda (G37a1@t) ((lambda (G37a3@ls/false) (if G37a3@ls/false (apply (lambda (G37a5@e G37a6@e*) (list 'if G37a5@e (cons 'begin G37a6@e*))) G37a3@ls/false) ((lambda (G37a9@t) ((lambda (G37ab@ls/false) (if G37ab@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid last clause" G377b@stx)) G37ab@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G37a9@t))) (G306b@syntax-dispatch G37a9@t '_))) G37a1@t))) (G306b@syntax-dispatch G37a1@t '(any . each-any)))) G379b@t))) (G306b@syntax-dispatch G379b@t '(any)))) G3793@t))) (G306b@syntax-dispatch G3793@t '(any #(scheme-id =>) any)))) G378b@t))) (G306b@syntax-dispatch G378b@t '(#(scheme-id else) any . each-any)))) G3787@cls) ((lambda (G37ad@t) ((lambda (G37af@ls/false) (if G37af@ls/false (apply (lambda (G37b1@e G37b2@e*) (G315e@syntax-violation '#f '"incorrect position of keyword else" G377b@stx)) G37af@ls/false) ((lambda (G37b5@t) ((lambda (G37b7@ls/false) (if G37b7@ls/false (apply (lambda (G37b9@e G37ba@p) (list 'let (list (list 't G37b9@e)) (list 'if 't (cons G37ba@p '(t)) (G3785@f (car G3788@cls*) (cdr G3788@cls*))))) G37b7@ls/false) ((lambda (G37bd@t) ((lambda (G37bf@ls/false) (if G37bf@ls/false (apply (lambda (G37c1@e) (list 'or G37c1@e (G3785@f (car G3788@cls*) (cdr G3788@cls*)))) G37bf@ls/false) ((lambda (G37c3@t) ((lambda (G37c5@ls/false) (if G37c5@ls/false (apply (lambda (G37c7@e G37c8@e*) (list 'if G37c7@e (cons 'begin G37c8@e*) (G3785@f (car G3788@cls*) (cdr G3788@cls*)))) G37c5@ls/false) ((lambda (G37cb@t) ((lambda (G37cd@ls/false) (if G37cd@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid last clause" G377b@stx)) G37cd@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G37cb@t))) (G306b@syntax-dispatch G37cb@t '_))) G37c3@t))) (G306b@syntax-dispatch G37c3@t '(any . each-any)))) G37bd@t))) (G306b@syntax-dispatch G37bd@t '(any)))) G37b5@t))) (G306b@syntax-dispatch G37b5@t '(any #(scheme-id =>) any)))) G37ad@t))) (G306b@syntax-dispatch G37ad@t '(#(scheme-id else) any . each-any)))) G3787@cls))))) G3785@f) G3781@cls G3782@cls*))) G377f@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G377d@t))) (G306b@syntax-dispatch G377d@t '(_ any . each-any)))) G377b@stx))) (set! G3051@do-include (lambda (G37cf@stx G37d0@id G37d1@filename) ((lambda (G37d5@filename) (begin (if (not (if (string? G37d5@filename) (begin '#f (G2e28@id? G37d0@id)) '#f)) (G315e@syntax-violation '#f '"invalid syntax" G37cf@stx) (void)) (cons (G3021@bless 'begin) (with-input-from-file G37d5@filename (lambda () ((letrec ((G37d7@f (lambda (G37d9@ls) ((lambda (G37db@x) (if (eof-object? G37db@x) (reverse G37d9@ls) (G37d7@f (cons (G2e06@datum->stx G37d0@id G37db@x) G37d9@ls)))) (G296f@G2877@read-annotated))))) G37d7@f) '())))))) (G2e3e@stx->datum G37d1@filename)))) (set! G3053@include-macro (lambda (G37dd@e) ((lambda (G37df@t) ((lambda (G37e1@ls/false) (if G37e1@ls/false (apply (lambda (G37e3@id G37e4@filename) (G3051@do-include G37dd@e G37e3@id G37e4@filename)) G37e1@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G37df@t))) (G306b@syntax-dispatch G37df@t '(any any)))) G37dd@e))) (set! G3055@include-into-macro (lambda (G37e7@e) ((lambda (G37e9@t) ((lambda (G37eb@ls/false) (if G37eb@ls/false (apply (lambda (G37ed@id G37ee@filename) (G3051@do-include G37e7@e G37ed@id G37ee@filename)) G37eb@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G37e9@t))) (G306b@syntax-dispatch G37e9@t '(_ any any)))) G37e7@e))) (set! G3057@syntax-rules-macro (lambda (G37f1@e) ((lambda (G37f3@t) ((lambda (G37f5@ls/false) (if G37f5@ls/false (apply (lambda (G37f7@lits G37f8@pat* G37f9@tmp*) (begin (G3071@verify-literals G37f7@lits G37f1@e) (G3021@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G37f7@lits (map (lambda (G37fd@pat G37fe@tmp) ((lambda (G3801@t) ((lambda (G3803@ls/false) (if G3803@ls/false (apply (lambda (G3805@rest) (list (cons 'g G3805@rest) (list 'syntax G37fe@tmp))) G3803@ls/false) ((lambda (G3807@t) ((lambda (G3809@ls/false) (if G3809@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid syntax-rules pattern" G37f1@e G37fd@pat)) G3809@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3807@t))) (G306b@syntax-dispatch G3807@t '_))) G3801@t))) (G306b@syntax-dispatch G3801@t '(_ . any)))) G37fd@pat)) G37f8@pat* G37f9@tmp*)))))))) G37f5@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G37f3@t))) (G306b@syntax-dispatch G37f3@t '(_ each-any . #(each (any any)))))) G37f1@e))) (set! G3059@quasiquote-macro ((lambda () ((lambda (G380c@datum G3835@quasicons* G3837@quasicons G3839@quasiappend G383b@quasivector G383d@vquasi G383f@quasi) (begin (set! G380c@datum (lambda (G391a@x) (list (G2ff9@scheme-stx 'quote) (G2e10@mkstx G391a@x '() '() '())))) (set! G3835@quasicons* (lambda (G3912@x G3913@y) ((letrec ((G3916@f (lambda (G3918@x) (if (null? G3918@x) G3913@y (G3837@quasicons (car G3918@x) (G3916@f (cdr G3918@x))))))) G3916@f) G3912@x))) (set! G3837@quasicons (lambda (G38ec@x G38ed@y) ((lambda (G38f0@t) ((lambda (G38f2@ls/false) (if G38f2@ls/false (apply (lambda (G38f4@dy) ((lambda (G38f6@t) ((lambda (G38f8@ls/false) (if G38f8@ls/false (apply (lambda (G38fa@dx) (list (G2ff9@scheme-stx 'quote) (cons G38fa@dx G38f4@dy))) G38f8@ls/false) ((lambda (G38fc@t) ((lambda (G38fe@ls/false) (if G38fe@ls/false (apply (lambda () ((lambda (G3900@t) ((lambda (G3902@ls/false) (if G3902@ls/false (apply (lambda () (list (G2ff9@scheme-stx 'list) G38ec@x)) G3902@ls/false) ((lambda (G3904@t) ((lambda (G3906@ls/false) (if G3906@ls/false (apply (lambda () (list (G2ff9@scheme-stx 'cons) G38ec@x G38ed@y)) G3906@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3904@t))) (G306b@syntax-dispatch G3904@t '_))) G3900@t))) (G306b@syntax-dispatch G3900@t '()))) G38f4@dy)) G38fe@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G38fc@t))) (G306b@syntax-dispatch G38fc@t '_))) G38f6@t))) (G306b@syntax-dispatch G38f6@t '(#(scheme-id quote) any)))) G38ec@x)) G38f2@ls/false) ((lambda (G3908@t) ((lambda (G390a@ls/false) (if G390a@ls/false (apply (lambda (G390c@stuff) (cons* (G2ff9@scheme-stx 'list) G38ec@x G390c@stuff)) G390a@ls/false) ((lambda (G390e@t) ((lambda (G3910@ls/false) (if G3910@ls/false (apply (lambda () (list (G2ff9@scheme-stx 'cons) G38ec@x G38ed@y)) G3910@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G390e@t))) (G306b@syntax-dispatch G390e@t '_))) G3908@t))) (G306b@syntax-dispatch G3908@t '(#(scheme-id list) . each-any)))) G38f0@t))) (G306b@syntax-dispatch G38f0@t '(#(scheme-id quote) any)))) G38ed@y))) (set! G3839@quasiappend (lambda (G38d2@x G38d3@y) ((lambda (G38d6@ls) (if (null? G38d6@ls) (list (G2ff9@scheme-stx 'quote) '()) (if (null? (cdr G38d6@ls)) (car G38d6@ls) (cons* (G2ff9@scheme-stx 'append) G38d6@ls)))) ((letrec ((G38d8@f (lambda (G38da@x) (if (null? G38da@x) ((lambda (G38dc@t) ((lambda (G38de@ls/false) (if G38de@ls/false (apply (lambda () '()) G38de@ls/false) ((lambda (G38e0@t) ((lambda (G38e2@ls/false) (if G38e2@ls/false (apply (lambda () (list G38d3@y)) G38e2@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G38e0@t))) (G306b@syntax-dispatch G38e0@t '_))) G38dc@t))) (G306b@syntax-dispatch G38dc@t '(#(scheme-id quote) ())))) G38d3@y) ((lambda (G38e4@t) ((lambda (G38e6@ls/false) (if G38e6@ls/false (apply (lambda () (G38d8@f (cdr G38da@x))) G38e6@ls/false) ((lambda (G38e8@t) ((lambda (G38ea@ls/false) (if G38ea@ls/false (apply (lambda () (cons (car G38da@x) (G38d8@f (cdr G38da@x)))) G38ea@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G38e8@t))) (G306b@syntax-dispatch G38e8@t '_))) G38e4@t))) (G306b@syntax-dispatch G38e4@t '(#(scheme-id quote) ())))) (car G38da@x)))))) G38d8@f) G38d2@x)))) (set! G383b@quasivector (lambda (G38a0@x) ((lambda (G38a2@pat-x) ((lambda (G38a4@t) ((lambda (G38a6@ls/false) (if G38a6@ls/false (apply (lambda (G38a8@x*) (list (G2ff9@scheme-stx 'quote) (list->vector G38a8@x*))) G38a6@ls/false) ((lambda (G38aa@t) ((lambda (G38ac@ls/false) (if G38ac@ls/false (apply (lambda () ((letrec ((G38ae@f (lambda (G38b0@x G38b1@k) ((lambda (G38b4@t) ((lambda (G38b6@ls/false) (if G38b6@ls/false (apply (lambda (G38b8@x*) (G38b1@k (map (lambda (G38ba@x) (list (G2ff9@scheme-stx 'quote) G38ba@x)) G38b8@x*))) G38b6@ls/false) ((lambda (G38bc@t) ((lambda (G38be@ls/false) (if G38be@ls/false (apply (lambda (G38c0@x*) (G38b1@k G38c0@x*)) G38be@ls/false) ((lambda (G38c2@t) ((lambda (G38c4@ls/false) (if G38c4@ls/false (apply (lambda (G38c6@x G38c7@y) (G38ae@f G38c7@y (lambda (G38ca@ls) (G38b1@k (cons G38c6@x G38ca@ls))))) G38c4@ls/false) ((lambda (G38cc@t) ((lambda (G38ce@ls/false) (if G38ce@ls/false (apply (lambda () (list (G2ff9@scheme-stx 'list->vector) G38a2@pat-x)) G38ce@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G38cc@t))) (G306b@syntax-dispatch G38cc@t '_))) G38c2@t))) (G306b@syntax-dispatch G38c2@t '(#(scheme-id cons) any any)))) G38bc@t))) (G306b@syntax-dispatch G38bc@t '(#(scheme-id list) . each-any)))) G38b4@t))) (G306b@syntax-dispatch G38b4@t '(#(scheme-id quote) each-any)))) G38b0@x)))) G38ae@f) G38a0@x (lambda (G38d0@ls) (cons* (G2ff9@scheme-stx 'vector) G38d0@ls)))) G38ac@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G38aa@t))) (G306b@syntax-dispatch G38aa@t '_))) G38a4@t))) (G306b@syntax-dispatch G38a4@t '(#(scheme-id quote) each-any)))) G38a2@pat-x)) G38a0@x))) (set! G383d@vquasi (lambda (G387e@p G387f@lev) ((lambda (G3882@t) ((lambda (G3884@ls/false) (if G3884@ls/false (apply (lambda (G3886@p G3887@q) ((lambda (G388a@t) ((lambda (G388c@ls/false) (if G388c@ls/false (apply (lambda (G388e@p) (if (= G387f@lev '0) (G3835@quasicons* G388e@p (G383d@vquasi G3887@q G387f@lev)) (G3837@quasicons (G3837@quasicons (G380c@datum 'unquote) (G383f@quasi G388e@p (- G387f@lev '1))) (G383d@vquasi G3887@q G387f@lev)))) G388c@ls/false) ((lambda (G3890@t) ((lambda (G3892@ls/false) (if G3892@ls/false (apply (lambda (G3894@p) (if (= G387f@lev '0) (G3839@quasiappend G3894@p (G383d@vquasi G3887@q G387f@lev)) (G3837@quasicons (G3837@quasicons (G380c@datum 'unquote-splicing) (G383f@quasi G3894@p (- G387f@lev '1))) (G383d@vquasi G3887@q G387f@lev)))) G3892@ls/false) ((lambda (G3896@t) ((lambda (G3898@ls/false) (if G3898@ls/false (apply (lambda (G389a@p) (G3837@quasicons (G383f@quasi G389a@p G387f@lev) (G383d@vquasi G3887@q G387f@lev))) G3898@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3896@t))) (G306b@syntax-dispatch G3896@t 'any))) G3890@t))) (G306b@syntax-dispatch G3890@t '(#(scheme-id unquote-splicing) . each-any)))) G388a@t))) (G306b@syntax-dispatch G388a@t '(#(scheme-id unquote) . each-any)))) G3886@p)) G3884@ls/false) ((lambda (G389c@t) ((lambda (G389e@ls/false) (if G389e@ls/false (apply (lambda () (list (G2ff9@scheme-stx 'quote) '())) G389e@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G389c@t))) (G306b@syntax-dispatch G389c@t '()))) G3882@t))) (G306b@syntax-dispatch G3882@t '(any . any)))) G387e@p))) (set! G383f@quasi (lambda (G3848@p G3849@lev) ((lambda (G384c@t) ((lambda (G384e@ls/false) (if G384e@ls/false (apply (lambda (G3850@p) (if (= G3849@lev '0) G3850@p (G3837@quasicons (G380c@datum 'unquote) (G383f@quasi (list G3850@p) (- G3849@lev '1))))) G384e@ls/false) ((lambda (G3852@t) ((lambda (G3854@ls/false) (if G3854@ls/false (apply (lambda (G3856@p G3857@q) (if (= G3849@lev '0) (G3835@quasicons* G3856@p (G383f@quasi G3857@q G3849@lev)) (G3837@quasicons (G3837@quasicons (G380c@datum 'unquote) (G383f@quasi G3856@p (- G3849@lev '1))) (G383f@quasi G3857@q G3849@lev)))) G3854@ls/false) ((lambda (G385a@t) ((lambda (G385c@ls/false) (if G385c@ls/false (apply (lambda (G385e@p G385f@q) (if (= G3849@lev '0) (G3839@quasiappend G385e@p (G383f@quasi G385f@q G3849@lev)) (G3837@quasicons (G3837@quasicons (G380c@datum 'unquote-splicing) (G383f@quasi G385e@p (- G3849@lev '1))) (G383f@quasi G385f@q G3849@lev)))) G385c@ls/false) ((lambda (G3862@t) ((lambda (G3864@ls/false) (if G3864@ls/false (apply (lambda (G3866@p) (G3837@quasicons (G380c@datum 'quasiquote) (G383f@quasi (list G3866@p) (+ G3849@lev '1)))) G3864@ls/false) ((lambda (G3868@t) ((lambda (G386a@ls/false) (if G386a@ls/false (apply (lambda (G386c@p G386d@q) (G3837@quasicons (G383f@quasi G386c@p G3849@lev) (G383f@quasi G386d@q G3849@lev))) G386a@ls/false) ((lambda (G3870@t) ((lambda (G3872@ls/false) (if (if G3872@ls/false (begin '#f (apply (lambda (G3874@x) (not (G2df0@stx? G3874@x))) G3872@ls/false)) '#f) (apply (lambda (G3876@x) (G383b@quasivector (G383d@vquasi G3876@x G3849@lev))) G3872@ls/false) ((lambda (G3878@t) ((lambda (G387a@ls/false) (if G387a@ls/false (apply (lambda (G387c@p) (list (G2ff9@scheme-stx 'quote) G387c@p)) G387a@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3878@t))) (G306b@syntax-dispatch G3878@t 'any))) G3870@t))) (G306b@syntax-dispatch G3870@t '#(vector each-any)))) G3868@t))) (G306b@syntax-dispatch G3868@t '(any . any)))) G3862@t))) (G306b@syntax-dispatch G3862@t '(#(scheme-id quasiquote) any)))) G385a@t))) (G306b@syntax-dispatch G385a@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3852@t))) (G306b@syntax-dispatch G3852@t '((#(scheme-id unquote) . each-any) . any)))) G384c@t))) (G306b@syntax-dispatch G384c@t '(#(scheme-id unquote) any)))) G3848@p))) (lambda (G3840@x) ((lambda (G3842@t) ((lambda (G3844@ls/false) (if G3844@ls/false (apply (lambda (G3846@e) (G383f@quasi G3846@e '0)) G3844@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3842@t))) (G306b@syntax-dispatch G3842@t '(_ any)))) G3840@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G305b@quasisyntax-macro ((lambda () ((lambda (G391d@quasi) (begin (set! G391d@quasi (lambda (G3935@p G3936@lev) ((lambda (G3939@t) ((lambda (G393b@ls/false) (if G393b@ls/false (apply (lambda (G393d@p) (if (= G3936@lev '0) ((lambda (G393f@g) (values (list G393f@g) (list G393d@p) G393f@g)) (gensym)) (call-with-values (lambda () (G391d@quasi G393d@p (- G3936@lev '1))) (lambda (G3944@G3941 G3945@G3942 G3946@G3943) ((lambda (G394a@p G394b@rhs* G394c@lhs*) (values G394c@lhs* G394b@rhs* (list 'unsyntax G394a@p))) G3946@G3943 G3945@G3942 G3944@G3941))))) G393b@ls/false) ((lambda (G3950@t) ((lambda (G3952@ls/false) (if (if G3952@ls/false (begin '#f (apply (lambda () (= G3936@lev '0)) G3952@ls/false)) '#f) (apply (lambda () (G315e@syntax-violation '#f '"incorrect use of unsyntax" G3935@p)) G3952@ls/false) ((lambda (G3954@t) ((lambda (G3956@ls/false) (if G3956@ls/false (apply (lambda (G3958@p* G3959@q) (call-with-values (lambda () (G391d@quasi G3959@q G3936@lev)) (lambda (G395f@G395c G3960@G395d G3961@G395e) ((lambda (G3965@q G3966@rhs* G3967@lhs*) (if (= G3936@lev '0) ((lambda (G396b@g*) (values (append G396b@g* G3967@lhs*) (append G3958@p* G3966@rhs*) (append G396b@g* G3965@q))) (map (lambda (G396d@x) (gensym)) G3958@p*)) (call-with-values (lambda () (G391d@quasi G3958@p* (- G3936@lev '1))) (lambda (G3972@G396f G3973@G3970 G3974@G3971) ((lambda (G3978@p* G3979@rhs2* G397a@lhs2*) (values (append G397a@lhs2* G3967@lhs*) (append G3979@rhs2* G3966@rhs*) (cons (cons 'unsyntax G3978@p*) G3965@q))) G3974@G3971 G3973@G3970 G3972@G396f))))) G3961@G395e G3960@G395d G395f@G395c)))) G3956@ls/false) ((lambda (G397e@t) ((lambda (G3980@ls/false) (if G3980@ls/false (apply (lambda (G3982@p* G3983@q) (call-with-values (lambda () (G391d@quasi G3983@q G3936@lev)) (lambda (G3989@G3986 G398a@G3987 G398b@G3988) ((lambda (G398f@q G3990@rhs* G3991@lhs*) (if (= G3936@lev '0) ((lambda (G3995@g*) (values (append (map (lambda (G3997@g) (cons G3997@g '(...))) G3995@g*) G3991@lhs*) (append G3982@p* G3990@rhs*) (append (apply append (map (lambda (G3999@g) (cons G3999@g '(...))) G3995@g*)) G398f@q))) (map (lambda (G399b@x) (gensym)) G3982@p*)) (call-with-values (lambda () (G391d@quasi G3982@p* (- G3936@lev '1))) (lambda (G39a0@G399d G39a1@G399e G39a2@G399f) ((lambda (G39a6@p* G39a7@rhs2* G39a8@lhs2*) (values (append G39a8@lhs2* G3991@lhs*) (append G39a7@rhs2* G3990@rhs*) (cons (cons 'unsyntax-splicing G39a6@p*) G398f@q))) G39a2@G399f G39a1@G399e G39a0@G399d))))) G398b@G3988 G398a@G3987 G3989@G3986)))) G3980@ls/false) ((lambda (G39ac@t) ((lambda (G39ae@ls/false) (if (if G39ae@ls/false (begin '#f (apply (lambda () (= G3936@lev '0)) G39ae@ls/false)) '#f) (apply (lambda () (G315e@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3935@p)) G39ae@ls/false) ((lambda (G39b0@t) ((lambda (G39b2@ls/false) (if G39b2@ls/false (apply (lambda (G39b4@p) (call-with-values (lambda () (G391d@quasi G39b4@p (+ G3936@lev '1))) (lambda (G39b9@G39b6 G39ba@G39b7 G39bb@G39b8) ((lambda (G39bf@p G39c0@rhs* G39c1@lhs*) (values G39c1@lhs* G39c0@rhs* (list 'quasisyntax G39bf@p))) G39bb@G39b8 G39ba@G39b7 G39b9@G39b6)))) G39b2@ls/false) ((lambda (G39c5@t) ((lambda (G39c7@ls/false) (if G39c7@ls/false (apply (lambda (G39c9@p G39ca@q) (call-with-values (lambda () (G391d@quasi G39c9@p G3936@lev)) (lambda (G39d3@G39cd G39d4@G39ce G39d5@G39cf) (call-with-values (lambda () (G391d@quasi G39ca@q G3936@lev)) (lambda (G39d9@G39d0 G39da@G39d1 G39db@G39d2) ((lambda (G39df@q G39e0@rhs2* G39e1@lhs2* G39e2@p G39e3@rhs* G39e4@lhs*) (values (append G39e1@lhs2* G39e4@lhs*) (append G39e0@rhs2* G39e3@rhs*) (cons G39e2@p G39df@q))) G39db@G39d2 G39da@G39d1 G39d9@G39d0 G39d5@G39cf G39d4@G39ce G39d3@G39cd)))))) G39c7@ls/false) ((lambda (G39eb@t) ((lambda (G39ed@ls/false) (if G39ed@ls/false (apply (lambda (G39ef@x*) (call-with-values (lambda () (G391d@quasi G39ef@x* G3936@lev)) (lambda (G39f4@G39f1 G39f5@G39f2 G39f6@G39f3) ((lambda (G39fa@x* G39fb@rhs* G39fc@lhs*) (values G39fc@lhs* G39fb@rhs* (list->vector G39fa@x*))) G39f6@G39f3 G39f5@G39f2 G39f4@G39f1)))) G39ed@ls/false) ((lambda (G3a00@t) ((lambda (G3a02@ls/false) (if G3a02@ls/false (apply (lambda () (values '() '() G3935@p)) G3a02@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3a00@t))) (G306b@syntax-dispatch G3a00@t '_))) G39eb@t))) (G306b@syntax-dispatch G39eb@t '#(vector each-any)))) G39c5@t))) (G306b@syntax-dispatch G39c5@t '(any . any)))) G39b0@t))) (G306b@syntax-dispatch G39b0@t '(#(scheme-id quasisyntax) any)))) G39ac@t))) (G306b@syntax-dispatch G39ac@t '#(scheme-id unsyntax-splicing)))) G397e@t))) (G306b@syntax-dispatch G397e@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3954@t))) (G306b@syntax-dispatch G3954@t '((#(scheme-id unsyntax) . each-any) . any)))) G3950@t))) (G306b@syntax-dispatch G3950@t '#(scheme-id unsyntax)))) G3939@t))) (G306b@syntax-dispatch G3939@t '(#(scheme-id unsyntax) any)))) G3935@p))) (lambda (G391e@x) ((lambda (G3920@t) ((lambda (G3922@ls/false) (if G3922@ls/false (apply (lambda (G3924@e) (call-with-values (lambda () (G391d@quasi G3924@e '0)) (lambda (G3929@G3926 G392a@G3927 G392b@G3928) ((lambda (G392f@v G3930@rhs* G3931@lhs*) (G3021@bless (list 'syntax-case (cons 'list G3930@rhs*) '() (list G3931@lhs* (list 'syntax G392f@v))))) G392b@G3928 G392a@G3927 G3929@G3926)))) G3922@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3920@t))) (G306b@syntax-dispatch G3920@t '(_ any)))) G391e@x)))) '#f)))) (set! G305d@define-struct-macro (lambda (G3a04@stx) (G315e@syntax-violation '#f '"define-struct not supported" G3a04@stx))) (set! G305f@define-record-type-macro (lambda (G3a06@x) ((lambda (G3a09@id G3a0b@get-record-name G3a0d@get-record-constructor-name G3a0f@get-record-predicate-name G3a11@get-clause G3a13@foo-rtd-code G3a15@parent-rtd-code G3a17@parent-rcd-code G3a19@foo-rcd-code G3a1b@get-protocol-code G3a1d@get-fields G3a1f@get-mutator-indices G3a21@get-mutators G3a23@get-accessors G3a25@enumerate G3a27@do-define-record G3a29@verify-clauses) (begin (set! G3a09@id (lambda (G3c00@ctxt . G3c02@str*) (G3162@datum->syntax G3c00@ctxt (string->symbol (apply string-append (map (lambda (G3c04@x) (if (symbol? G3c04@x) (symbol->string G3c04@x) (if (string? G3c04@x) G3c04@x (assertion-violation 'define-record-type '"BUG")))) G3c02@str*)))))) (set! G3a0b@get-record-name (lambda (G3bee@spec) ((lambda (G3bf0@t) ((lambda (G3bf2@ls/false) (if G3bf2@ls/false (apply (lambda (G3bf4@foo G3bf5@make-foo G3bf6@foo?) G3bf4@foo) G3bf2@ls/false) ((lambda (G3bfa@t) ((lambda (G3bfc@ls/false) (if G3bfc@ls/false (apply (lambda (G3bfe@foo) G3bfe@foo) G3bfc@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3bfa@t))) (G306b@syntax-dispatch G3bfa@t 'any))) G3bf0@t))) (G306b@syntax-dispatch G3bf0@t '(any any any)))) G3bee@spec))) (set! G3a0d@get-record-constructor-name (lambda (G3bda@spec) ((lambda (G3bdc@t) ((lambda (G3bde@ls/false) (if G3bde@ls/false (apply (lambda (G3be0@foo G3be1@make-foo G3be2@foo?) G3be1@make-foo) G3bde@ls/false) ((lambda (G3be6@t) ((lambda (G3be8@ls/false) (if (if G3be8@ls/false (begin '#f (apply (lambda (G3bea@foo) (G2e28@id? G3bea@foo)) G3be8@ls/false)) '#f) (apply (lambda (G3bec@foo) (G3a09@id G3bec@foo '"make-" (G2e3e@stx->datum G3bec@foo))) G3be8@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3be6@t))) (G306b@syntax-dispatch G3be6@t 'any))) G3bdc@t))) (G306b@syntax-dispatch G3bdc@t '(any any any)))) G3bda@spec))) (set! G3a0f@get-record-predicate-name (lambda (G3bc6@spec) ((lambda (G3bc8@t) ((lambda (G3bca@ls/false) (if G3bca@ls/false (apply (lambda (G3bcc@foo G3bcd@make-foo G3bce@foo?) G3bce@foo?) G3bca@ls/false) ((lambda (G3bd2@t) ((lambda (G3bd4@ls/false) (if (if G3bd4@ls/false (begin '#f (apply (lambda (G3bd6@foo) (G2e28@id? G3bd6@foo)) G3bd4@ls/false)) '#f) (apply (lambda (G3bd8@foo) (G3a09@id G3bd8@foo (G2e3e@stx->datum G3bd8@foo) '"?")) G3bd4@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3bd2@t))) (G306b@syntax-dispatch G3bd2@t 'any))) G3bc8@t))) (G306b@syntax-dispatch G3bc8@t '(any any any)))) G3bc6@spec))) (set! G3a11@get-clause (lambda (G3bb4@id G3bb5@ls) ((lambda (G3bb8@t) ((lambda (G3bba@ls/false) (if G3bba@ls/false (apply (lambda () '#f) G3bba@ls/false) ((lambda (G3bbc@t) ((lambda (G3bbe@ls/false) (if G3bbe@ls/false (apply (lambda (G3bc0@x G3bc1@rest G3bc2@ls) (if (G2e30@free-id=? (G3021@bless G3bb4@id) G3bc0@x) (cons G3bc0@x G3bc1@rest) (G3a11@get-clause G3bb4@id G3bc2@ls))) G3bbe@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3bbc@t))) (G306b@syntax-dispatch G3bbc@t '((any . any) . any)))) G3bb8@t))) (G306b@syntax-dispatch G3bb8@t '()))) G3bb5@ls))) (set! G3a13@foo-rtd-code (lambda (G3b62@name G3b63@clause* G3b64@parent-rtd-code) ((lambda (G3b69@convert-field-spec*) (begin (set! G3b69@convert-field-spec* (lambda (G3b9a@ls) (list->vector (map (lambda (G3b9c@x) ((lambda (G3b9e@t) ((lambda (G3ba0@ls/false) (if G3ba0@ls/false (apply (lambda (G3ba2@name G3ba3@rest) (list 'mutable G3ba2@name)) G3ba0@ls/false) ((lambda (G3ba6@t) ((lambda (G3ba8@ls/false) (if G3ba8@ls/false (apply (lambda (G3baa@name G3bab@rest) (list 'immutable G3baa@name)) G3ba8@ls/false) ((lambda (G3bae@t) ((lambda (G3bb0@ls/false) (if G3bb0@ls/false (apply (lambda (G3bb2@name) (list 'immutable G3bb2@name)) G3bb0@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3bae@t))) (G306b@syntax-dispatch G3bae@t 'any))) G3ba6@t))) (G306b@syntax-dispatch G3ba6@t '(#(scheme-id immutable) any . any)))) G3b9e@t))) (G306b@syntax-dispatch G3b9e@t '(#(scheme-id mutable) any . any)))) G3b9c@x)) G3b9a@ls)))) ((lambda (G3b6a@uid-code G3b6b@sealed? G3b6c@opaque? G3b6d@fields) (G3021@bless (list 'make-record-type-descriptor (list 'quote G3b62@name) G3b64@parent-rtd-code G3b6a@uid-code G3b6b@sealed? G3b6c@opaque? G3b6d@fields))) ((lambda (G3b72@t) ((lambda (G3b74@ls/false) (if G3b74@ls/false (apply (lambda () (list 'quote (gensym))) G3b74@ls/false) ((lambda (G3b76@t) ((lambda (G3b78@ls/false) (if G3b78@ls/false (apply (lambda (G3b7a@uid) (list 'quote G3b7a@uid)) G3b78@ls/false) ((lambda (G3b7c@t) ((lambda (G3b7e@ls/false) (if G3b7e@ls/false (apply (lambda () '#f) G3b7e@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b7c@t))) (G306b@syntax-dispatch G3b7c@t '_))) G3b76@t))) (G306b@syntax-dispatch G3b76@t '(_ any)))) G3b72@t))) (G306b@syntax-dispatch G3b72@t '(_)))) (G3a11@get-clause 'nongenerative G3b63@clause*)) ((lambda (G3b80@t) ((lambda (G3b82@ls/false) (if G3b82@ls/false (apply (lambda () '#t) G3b82@ls/false) ((lambda (G3b84@t) ((lambda (G3b86@ls/false) (if G3b86@ls/false (apply (lambda () '#f) G3b86@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b84@t))) (G306b@syntax-dispatch G3b84@t '_))) G3b80@t))) (G306b@syntax-dispatch G3b80@t '(_ #(atom #t))))) (G3a11@get-clause 'sealed G3b63@clause*)) ((lambda (G3b88@t) ((lambda (G3b8a@ls/false) (if G3b8a@ls/false (apply (lambda () '#t) G3b8a@ls/false) ((lambda (G3b8c@t) ((lambda (G3b8e@ls/false) (if G3b8e@ls/false (apply (lambda () '#f) G3b8e@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b8c@t))) (G306b@syntax-dispatch G3b8c@t '_))) G3b88@t))) (G306b@syntax-dispatch G3b88@t '(_ #(atom #t))))) (G3a11@get-clause 'opaque G3b63@clause*)) ((lambda (G3b90@t) ((lambda (G3b92@ls/false) (if G3b92@ls/false (apply (lambda (G3b94@field-spec*) (list 'quote (G3b69@convert-field-spec* G3b94@field-spec*))) G3b92@ls/false) ((lambda (G3b96@t) ((lambda (G3b98@ls/false) (if G3b98@ls/false (apply (lambda () ''#()) G3b98@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b96@t))) (G306b@syntax-dispatch G3b96@t '_))) G3b90@t))) (G306b@syntax-dispatch G3b90@t '(_ . each-any)))) (G3a11@get-clause 'fields G3b63@clause*))))) '#f))) (set! G3a15@parent-rtd-code (lambda (G3b4a@clause*) ((lambda (G3b4c@t) ((lambda (G3b4e@ls/false) (if G3b4e@ls/false (apply (lambda (G3b50@name) (list 'record-type-descriptor G3b50@name)) G3b4e@ls/false) ((lambda (G3b52@t) ((lambda (G3b54@ls/false) (if G3b54@ls/false (apply (lambda () ((lambda (G3b56@t) ((lambda (G3b58@ls/false) (if G3b58@ls/false (apply (lambda (G3b5a@rtd G3b5b@rcd) G3b5a@rtd) G3b58@ls/false) ((lambda (G3b5e@t) ((lambda (G3b60@ls/false) (if G3b60@ls/false (apply (lambda () '#f) G3b60@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b5e@t))) (G306b@syntax-dispatch G3b5e@t '#(atom #f)))) G3b56@t))) (G306b@syntax-dispatch G3b56@t '(_ any any)))) (G3a11@get-clause 'parent-rtd G3b4a@clause*))) G3b54@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b52@t))) (G306b@syntax-dispatch G3b52@t '#(atom #f)))) G3b4c@t))) (G306b@syntax-dispatch G3b4c@t '(_ any)))) (G3a11@get-clause 'parent G3b4a@clause*)))) (set! G3a17@parent-rcd-code (lambda (G3b32@clause*) ((lambda (G3b34@t) ((lambda (G3b36@ls/false) (if G3b36@ls/false (apply (lambda (G3b38@name) (list 'record-constructor-descriptor G3b38@name)) G3b36@ls/false) ((lambda (G3b3a@t) ((lambda (G3b3c@ls/false) (if G3b3c@ls/false (apply (lambda () ((lambda (G3b3e@t) ((lambda (G3b40@ls/false) (if G3b40@ls/false (apply (lambda (G3b42@rtd G3b43@rcd) G3b43@rcd) G3b40@ls/false) ((lambda (G3b46@t) ((lambda (G3b48@ls/false) (if G3b48@ls/false (apply (lambda () '#f) G3b48@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b46@t))) (G306b@syntax-dispatch G3b46@t '#(atom #f)))) G3b3e@t))) (G306b@syntax-dispatch G3b3e@t '(_ any any)))) (G3a11@get-clause 'parent-rtd G3b32@clause*))) G3b3c@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b3a@t))) (G306b@syntax-dispatch G3b3a@t '#(atom #f)))) G3b34@t))) (G306b@syntax-dispatch G3b34@t '(_ any)))) (G3a11@get-clause 'parent G3b32@clause*)))) (set! G3a19@foo-rcd-code (lambda (G3b2a@clause* G3b2b@foo-rtd G3b2c@protocol G3b2d@parent-rcd-code) (list 'make-record-constructor-descriptor G3b2b@foo-rtd G3b2d@parent-rcd-code G3b2c@protocol))) (set! G3a1b@get-protocol-code (lambda (G3b1e@clause*) ((lambda (G3b20@t) ((lambda (G3b22@ls/false) (if G3b22@ls/false (apply (lambda (G3b24@expr) G3b24@expr) G3b22@ls/false) ((lambda (G3b26@t) ((lambda (G3b28@ls/false) (if G3b28@ls/false (apply (lambda () '#f) G3b28@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b26@t))) (G306b@syntax-dispatch G3b26@t '_))) G3b20@t))) (G306b@syntax-dispatch G3b20@t '(_ any)))) (G3a11@get-clause 'protocol G3b1e@clause*)))) (set! G3a1d@get-fields (lambda (G3b0c@clause*) ((lambda (G3b0e@t) ((lambda (G3b10@ls/false) (if G3b10@ls/false (apply (lambda () '()) G3b10@ls/false) ((lambda (G3b12@t) ((lambda (G3b14@ls/false) (if G3b14@ls/false (apply (lambda (G3b16@f*) G3b16@f*) G3b14@ls/false) ((lambda (G3b18@t) ((lambda (G3b1a@ls/false) (if G3b1a@ls/false (apply (lambda (G3b1c@rest) (G3a1d@get-fields G3b1c@rest)) G3b1a@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b18@t))) (G306b@syntax-dispatch G3b18@t '(_ . any)))) G3b12@t))) (G306b@syntax-dispatch G3b12@t '((#(scheme-id fields) . each-any) . _)))) G3b0e@t))) (G306b@syntax-dispatch G3b0e@t '()))) G3b0c@clause*))) (set! G3a1f@get-mutator-indices (lambda (G3af4@fields) ((letrec ((G3af6@f (lambda (G3af8@fields G3af9@i) ((lambda (G3afc@t) ((lambda (G3afe@ls/false) (if G3afe@ls/false (apply (lambda () '()) G3afe@ls/false) ((lambda (G3b00@t) ((lambda (G3b02@ls/false) (if G3b02@ls/false (apply (lambda (G3b04@rest) (cons G3af9@i (G3af6@f G3b04@rest (+ G3af9@i '1)))) G3b02@ls/false) ((lambda (G3b06@t) ((lambda (G3b08@ls/false) (if G3b08@ls/false (apply (lambda (G3b0a@rest) (G3af6@f G3b0a@rest (+ G3af9@i '1))) G3b08@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3b06@t))) (G306b@syntax-dispatch G3b06@t '(_ . any)))) G3b00@t))) (G306b@syntax-dispatch G3b00@t '((#(scheme-id mutable) . _) . any)))) G3afc@t))) (G306b@syntax-dispatch G3afc@t '()))) G3af8@fields)))) G3af6@f) G3af4@fields '0))) (set! G3a21@get-mutators (lambda (G3aca@foo G3acb@fields) ((lambda (G3acf@gen-name) (begin (set! G3acf@gen-name (lambda (G3af2@x) (G3162@datum->syntax G3aca@foo (string->symbol (string-append (symbol->string (G3164@syntax->datum G3aca@foo)) '"-" (symbol->string (G3164@syntax->datum G3af2@x)) '"-set!"))))) ((letrec ((G3ad0@f (lambda (G3ad2@fields) ((lambda (G3ad4@t) ((lambda (G3ad6@ls/false) (if G3ad6@ls/false (apply (lambda () '()) G3ad6@ls/false) ((lambda (G3ad8@t) ((lambda (G3ada@ls/false) (if G3ada@ls/false (apply (lambda (G3adc@name G3add@accessor G3ade@mutator G3adf@rest) (cons G3ade@mutator (G3ad0@f G3adf@rest))) G3ada@ls/false) ((lambda (G3ae4@t) ((lambda (G3ae6@ls/false) (if G3ae6@ls/false (apply (lambda (G3ae8@name G3ae9@rest) (cons (G3acf@gen-name G3ae8@name) (G3ad0@f G3ae9@rest))) G3ae6@ls/false) ((lambda (G3aec@t) ((lambda (G3aee@ls/false) (if G3aee@ls/false (apply (lambda (G3af0@rest) (G3ad0@f G3af0@rest)) G3aee@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3aec@t))) (G306b@syntax-dispatch G3aec@t '(_ . any)))) G3ae4@t))) (G306b@syntax-dispatch G3ae4@t '((#(scheme-id mutable) any) . any)))) G3ad8@t))) (G306b@syntax-dispatch G3ad8@t '((#(scheme-id mutable) any any any) . any)))) G3ad4@t))) (G306b@syntax-dispatch G3ad4@t '()))) G3ad2@fields)))) G3ad0@f) G3acb@fields))) '#f))) (set! G3a23@get-accessors (lambda (G3a86@foo G3a87@fields) ((lambda (G3a8b@gen-name) (begin (set! G3a8b@gen-name (lambda (G3ac8@x) (G3162@datum->syntax G3a86@foo (string->symbol (string-append (symbol->string (G3164@syntax->datum G3a86@foo)) '"-" (symbol->string (G3164@syntax->datum G3ac8@x))))))) (map (lambda (G3a8c@field) ((lambda (G3a8e@t) ((lambda (G3a90@ls/false) (if (if G3a90@ls/false (begin '#f (apply (lambda (G3a92@name G3a93@accessor G3a94@mutator) (G2e28@id? G3a93@accessor)) G3a90@ls/false)) '#f) (apply (lambda (G3a98@name G3a99@accessor G3a9a@mutator) G3a99@accessor) G3a90@ls/false) ((lambda (G3a9e@t) ((lambda (G3aa0@ls/false) (if (if G3aa0@ls/false (begin '#f (apply (lambda (G3aa2@name G3aa3@accessor) (G2e28@id? G3aa3@accessor)) G3aa0@ls/false)) '#f) (apply (lambda (G3aa6@name G3aa7@accessor) G3aa7@accessor) G3aa0@ls/false) ((lambda (G3aaa@t) ((lambda (G3aac@ls/false) (if (if G3aac@ls/false (begin '#f (apply (lambda (G3aae@name) (G2e28@id? G3aae@name)) G3aac@ls/false)) '#f) (apply (lambda (G3ab0@name) (G3a8b@gen-name G3ab0@name)) G3aac@ls/false) ((lambda (G3ab2@t) ((lambda (G3ab4@ls/false) (if (if G3ab4@ls/false (begin '#f (apply (lambda (G3ab6@name) (G2e28@id? G3ab6@name)) G3ab4@ls/false)) '#f) (apply (lambda (G3ab8@name) (G3a8b@gen-name G3ab8@name)) G3ab4@ls/false) ((lambda (G3aba@t) ((lambda (G3abc@ls/false) (if (if G3abc@ls/false (begin '#f (apply (lambda (G3abe@name) (G2e28@id? G3abe@name)) G3abc@ls/false)) '#f) (apply (lambda (G3ac0@name) (G3a8b@gen-name G3ac0@name)) G3abc@ls/false) ((lambda (G3ac2@t) ((lambda (G3ac4@ls/false) (if G3ac4@ls/false (apply (lambda (G3ac6@others) (G315e@syntax-violation '#f '"invalid field spec" G3a8c@field)) G3ac4@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3ac2@t))) (G306b@syntax-dispatch G3ac2@t 'any))) G3aba@t))) (G306b@syntax-dispatch G3aba@t 'any))) G3ab2@t))) (G306b@syntax-dispatch G3ab2@t '(#(scheme-id immutable) any)))) G3aaa@t))) (G306b@syntax-dispatch G3aaa@t '(#(scheme-id mutable) any)))) G3a9e@t))) (G306b@syntax-dispatch G3a9e@t '(#(scheme-id immutable) any any)))) G3a8e@t))) (G306b@syntax-dispatch G3a8e@t '(#(scheme-id mutable) any any any)))) G3a8c@field)) G3a87@fields))) '#f))) (set! G3a25@enumerate (lambda (G3a7e@ls) ((letrec ((G3a80@f (lambda (G3a82@ls G3a83@i) (if (null? G3a82@ls) '() (cons G3a83@i (G3a80@f (cdr G3a82@ls) (+ G3a83@i '1))))))) G3a80@f) G3a7e@ls '0))) (set! G3a27@do-define-record (lambda (G3a56@namespec G3a57@clause*) ((lambda (G3a5a@foo) ((lambda (G3a5c@foo-rtd) ((lambda (G3a5e@foo-rcd) ((lambda (G3a60@protocol) ((lambda (G3a62@make-foo) ((lambda (G3a64@fields) ((lambda (G3a66@idx*) ((lambda (G3a68@foo-x*) ((lambda (G3a6a@set-foo-x!*) ((lambda (G3a6c@set-foo-idx*) ((lambda (G3a6e@foo?) ((lambda (G3a70@foo-rtd-code) ((lambda (G3a72@foo-rcd-code) ((lambda (G3a74@protocol-code) ((lambda () (G3021@bless (cons 'begin (cons (list 'define G3a5c@foo-rtd G3a70@foo-rtd-code) (cons (list 'define G3a60@protocol G3a74@protocol-code) (cons (list 'define G3a5e@foo-rcd G3a72@foo-rcd-code) (cons (list 'define-syntax G3a5a@foo (list 'list ''$rtd (list 'syntax G3a5c@foo-rtd) (list 'syntax G3a5e@foo-rcd))) (cons (list 'define G3a6e@foo? (list 'record-predicate G3a5c@foo-rtd)) (cons (list 'define G3a62@make-foo (list 'record-constructor G3a5e@foo-rcd)) (append (map (lambda (G3a76@foo-x G3a77@idx) (list 'define G3a76@foo-x (list 'record-accessor G3a5c@foo-rtd G3a77@idx))) G3a68@foo-x* G3a66@idx*) (map (lambda (G3a7a@set-foo-x! G3a7b@idx) (list 'define G3a7a@set-foo-x! (list 'record-mutator G3a5c@foo-rtd G3a7b@idx))) G3a6a@set-foo-x!* G3a6c@set-foo-idx*))))))))))))) (G3a1b@get-protocol-code G3a57@clause*))) (G3a19@foo-rcd-code G3a57@clause* G3a5c@foo-rtd G3a60@protocol (G3a17@parent-rcd-code G3a57@clause*)))) (G3a13@foo-rtd-code G3a5a@foo G3a57@clause* (G3a15@parent-rtd-code G3a57@clause*)))) (G3a0f@get-record-predicate-name G3a56@namespec))) (G3a1f@get-mutator-indices G3a64@fields))) (G3a21@get-mutators G3a5a@foo G3a64@fields))) (G3a23@get-accessors G3a5a@foo G3a64@fields))) (G3a25@enumerate G3a64@fields))) (G3a1d@get-fields G3a57@clause*))) (G3a0d@get-record-constructor-name G3a56@namespec))) (gensym))) (gensym))) (gensym))) (G3a0b@get-record-name G3a56@namespec)))) (set! G3a29@verify-clauses (lambda (G3a32@x G3a33@cls*) ((lambda (G3a37@valid-kwds G3a39@free-id-member?) (begin (set! G3a37@valid-kwds (map G3021@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a39@free-id-member? (lambda (G3a50@x G3a51@ls) (if (pair? G3a51@ls) (begin '#f ((lambda (G3a54@t) (if G3a54@t G3a54@t (begin '#f (G3a39@free-id-member? G3a50@x (cdr G3a51@ls))))) (G2e30@free-id=? G3a50@x (car G3a51@ls)))) '#f))) ((letrec ((G3a3a@f (lambda (G3a3c@cls* G3a3d@seen*) (if (not (null? G3a3c@cls*)) ((lambda (G3a40@t) ((lambda (G3a42@ls/false) (if G3a42@ls/false (apply (lambda (G3a44@kwd G3a45@rest) (if ((lambda (G3a48@t) (if G3a48@t G3a48@t (begin '#f (not (G3a39@free-id-member? G3a44@kwd G3a37@valid-kwds))))) (not (G2e28@id? G3a44@kwd))) (G315e@syntax-violation '#f '"not a valid define-record-type keyword" G3a44@kwd) (if (G2e36@bound-id-member? G3a44@kwd G3a3d@seen*) (G315e@syntax-violation '#f '"duplicate use of keyword " G3a32@x G3a44@kwd) (G3a3a@f (cdr G3a3c@cls*) (cons G3a44@kwd G3a3d@seen*))))) G3a42@ls/false) ((lambda (G3a4a@t) ((lambda (G3a4c@ls/false) (if G3a4c@ls/false (apply (lambda (G3a4e@cls) (G315e@syntax-violation '#f '"malformed define-record-type clause" G3a4e@cls)) G3a4c@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3a4a@t))) (G306b@syntax-dispatch G3a4a@t 'any))) G3a40@t))) (G306b@syntax-dispatch G3a40@t '(any . any)))) (car G3a3c@cls*)) (void))))) G3a3a@f) G3a33@cls* '()))) '#f '#f))) ((lambda (G3a2a@t) ((lambda (G3a2c@ls/false) (if G3a2c@ls/false (apply (lambda (G3a2e@namespec G3a2f@clause*) (begin (G3a29@verify-clauses G3a06@x G3a2f@clause*) (G3a27@do-define-record G3a2e@namespec G3a2f@clause*))) G3a2c@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3a2a@t))) (G306b@syntax-dispatch G3a2a@t '(_ any . each-any)))) G3a06@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3061@define-condition-type-macro (lambda (G3c06@x) ((lambda (G3c09@mkname) (begin (set! G3c09@mkname (lambda (G3c36@name G3c37@suffix) (G3162@datum->syntax G3c36@name (string->symbol (string-append (symbol->string (G3164@syntax->datum G3c36@name)) G3c37@suffix))))) ((lambda (G3c0a@t) ((lambda (G3c0c@ls/false) (if (if G3c0c@ls/false (begin '#f (apply (lambda (G3c0e@ctxt G3c0f@name G3c10@super G3c11@constructor G3c12@predicate G3c13@field* G3c14@accessor*) (if (G2e28@id? G3c0f@name) (if (G2e28@id? G3c10@super) (if (G2e28@id? G3c11@constructor) (if (G2e28@id? G3c12@predicate) (if (for-all G2e28@id? G3c13@field*) (begin '#f (for-all G2e28@id? G3c14@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c0c@ls/false)) '#f) (apply (lambda (G3c1c@ctxt G3c1d@name G3c1e@super G3c1f@constructor G3c20@predicate G3c21@field* G3c22@accessor*) ((lambda (G3c2a@aux-accessor*) (G3021@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c1d@name G3c1f@constructor (gensym)) (cons (list 'parent G3c1e@super) (cons (cons 'fields (map (lambda (G3c2c@field G3c2d@aux) (list 'immutable G3c2c@field G3c2d@aux)) G3c21@field* G3c2a@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c20@predicate (list 'condition-predicate (list 'record-type-descriptor G3c1d@name))) (map (lambda (G3c30@accessor G3c31@aux) (list 'define G3c30@accessor (list 'condition-accessor (list 'record-type-descriptor G3c1d@name) G3c31@aux))) G3c22@accessor* G3c2a@aux-accessor*)))))) (map (lambda (G3c34@x) (gensym)) G3c22@accessor*))) G3c0c@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3c0a@t))) (G306b@syntax-dispatch G3c0a@t '(any any any any any . #(each (any any)))))) G3c06@x))) '#f))) (set! G3063@incorrect-usage-macro (lambda (G3c3a@e) (G315e@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c3a@e))) (set! G3065@parameterize-macro (lambda (G3c3c@e) ((lambda (G3c3e@t) ((lambda (G3c40@ls/false) (if G3c40@ls/false (apply (lambda (G3c42@b G3c43@b*) (G3021@bless (cons 'let (cons '() (cons G3c42@b G3c43@b*))))) G3c40@ls/false) ((lambda (G3c46@t) ((lambda (G3c48@ls/false) (if G3c48@ls/false (apply (lambda (G3c4a@olhs* G3c4b@orhs* G3c4c@b G3c4d@b*) ((lambda (G3c52@lhs* G3c53@rhs*) (G3021@bless (cons (list 'lambda (append G3c52@lhs* G3c53@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c56@lhs G3c57@rhs) (list 'let (list (list 't (list G3c56@lhs))) (list G3c56@lhs G3c57@rhs) (cons 'set! (cons G3c57@rhs '(t))))) G3c52@lhs* G3c53@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c4c@b G3c4d@b*))) '(swap)))))) (append G3c4a@olhs* G3c4b@orhs*)))) (G314a@generate-temporaries G3c4a@olhs*) (G314a@generate-temporaries G3c4b@orhs*))) G3c48@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3c46@t))) (G306b@syntax-dispatch G3c46@t '(_ #(each (any any)) any . each-any)))) G3c3e@t))) (G306b@syntax-dispatch G3c3e@t '(_ () any . each-any)))) G3c3c@e))) (set! G3067@foreign-call-transformer (lambda (G3c5a@e G3c5b@r G3c5c@mr) ((lambda (G3c60@t) ((lambda (G3c62@ls/false) (if G3c62@ls/false (apply (lambda (G3c64@name G3c65@arg*) (cons 'foreign-call (cons (G308f@chi-expr G3c64@name G3c5b@r G3c5c@mr) (G308b@chi-expr* G3c65@arg* G3c5b@r G3c5c@mr)))) G3c62@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3c60@t))) (G306b@syntax-dispatch G3c60@t '(_ any . each-any)))) G3c5a@e))) (set! G3069@convert-pattern (lambda (G3c68@pattern G3c69@keys) ((lambda (G3c6d@cvt* G3c6f@cvt) (begin (set! G3c6d@cvt* (lambda (G3cfe@p* G3cff@n G3d00@ids) (if (null? G3cfe@p*) (values '() G3d00@ids) (call-with-values (lambda () (G3c6d@cvt* (cdr G3cfe@p*) G3cff@n G3d00@ids)) (lambda (G3d06@G3d04 G3d07@G3d05) ((lambda (G3d0a@ids G3d0b@y) (call-with-values (lambda () (G3c6f@cvt (car G3cfe@p*) G3cff@n G3d0a@ids)) (lambda (G3d10@G3d0e G3d11@G3d0f) ((lambda (G3d14@ids G3d15@x) (values (cons G3d15@x G3d0b@y) G3d14@ids)) G3d11@G3d0f G3d10@G3d0e)))) G3d07@G3d05 G3d06@G3d04)))))) (set! G3c6f@cvt (lambda (G3c70@p G3c71@n G3c72@ids) ((lambda (G3c76@t) ((lambda (G3c78@ls/false) (if (if G3c78@ls/false (begin '#f (apply (lambda (G3c7a@id) (G2e28@id? G3c7a@id)) G3c78@ls/false)) '#f) (apply (lambda (G3c7c@id) (if (G2e36@bound-id-member? G3c70@p G3c69@keys) (values (vector 'free-id G3c70@p) G3c72@ids) (if (G2e30@free-id=? G3c70@p (G2ff9@scheme-stx '_)) (values '_ G3c72@ids) (values 'any (cons (cons G3c70@p G3c71@n) G3c72@ids))))) G3c78@ls/false) ((lambda (G3c7e@t) ((lambda (G3c80@ls/false) (if (if G3c80@ls/false (begin '#f (apply (lambda (G3c82@p G3c83@dots) (G306d@ellipsis? G3c83@dots)) G3c80@ls/false)) '#f) (apply (lambda (G3c86@p G3c87@dots) (call-with-values (lambda () (G3c6f@cvt G3c86@p (+ G3c71@n '1) G3c72@ids)) (lambda (G3c8c@G3c8a G3c8d@G3c8b) ((lambda (G3c90@ids G3c91@p) (values (if (eq? G3c91@p 'any) 'each-any (vector 'each G3c91@p)) G3c90@ids)) G3c8d@G3c8b G3c8c@G3c8a)))) G3c80@ls/false) ((lambda (G3c94@t) ((lambda (G3c96@ls/false) (if (if G3c96@ls/false (begin '#f (apply (lambda (G3c98@x G3c99@dots G3c9a@ys G3c9b@z) (G306d@ellipsis? G3c99@dots)) G3c96@ls/false)) '#f) (apply (lambda (G3ca0@x G3ca1@dots G3ca2@ys G3ca3@z) (call-with-values (lambda () (G3c6f@cvt G3ca3@z G3c71@n G3c72@ids)) (lambda (G3caa@G3ca8 G3cab@G3ca9) ((lambda (G3cae@ids G3caf@z) (call-with-values (lambda () (G3c6d@cvt* G3ca2@ys G3c71@n G3cae@ids)) (lambda (G3cb4@G3cb2 G3cb5@G3cb3) ((lambda (G3cb8@ids G3cb9@ys) (call-with-values (lambda () (G3c6f@cvt G3ca0@x (+ G3c71@n '1) G3cb8@ids)) (lambda (G3cbe@G3cbc G3cbf@G3cbd) ((lambda (G3cc2@ids G3cc3@x) (values (vector 'each+ G3cc3@x (reverse G3cb9@ys) G3caf@z) G3cc2@ids)) G3cbf@G3cbd G3cbe@G3cbc)))) G3cb5@G3cb3 G3cb4@G3cb2)))) G3cab@G3ca9 G3caa@G3ca8)))) G3c96@ls/false) ((lambda (G3cc6@t) ((lambda (G3cc8@ls/false) (if G3cc8@ls/false (apply (lambda (G3cca@x G3ccb@y) (call-with-values (lambda () (G3c6f@cvt G3ccb@y G3c71@n G3c72@ids)) (lambda (G3cd0@G3cce G3cd1@G3ccf) ((lambda (G3cd4@ids G3cd5@y) (call-with-values (lambda () (G3c6f@cvt G3cca@x G3c71@n G3cd4@ids)) (lambda (G3cda@G3cd8 G3cdb@G3cd9) ((lambda (G3cde@ids G3cdf@x) (values (cons G3cdf@x G3cd5@y) G3cde@ids)) G3cdb@G3cd9 G3cda@G3cd8)))) G3cd1@G3ccf G3cd0@G3cce)))) G3cc8@ls/false) ((lambda (G3ce2@t) ((lambda (G3ce4@ls/false) (if G3ce4@ls/false (apply (lambda () (values '() G3c72@ids)) G3ce4@ls/false) ((lambda (G3ce6@t) ((lambda (G3ce8@ls/false) (if (if G3ce8@ls/false (begin '#f (apply (lambda (G3cea@p) (not (G2df0@stx? G3cea@p))) G3ce8@ls/false)) '#f) (apply (lambda (G3cec@p) (call-with-values (lambda () (G3c6f@cvt G3cec@p G3c71@n G3c72@ids)) (lambda (G3cf0@G3cee G3cf1@G3cef) ((lambda (G3cf4@ids G3cf5@p) (values (vector 'vector G3cf5@p) G3cf4@ids)) G3cf1@G3cef G3cf0@G3cee)))) G3ce8@ls/false) ((lambda (G3cf8@t) ((lambda (G3cfa@ls/false) (if G3cfa@ls/false (apply (lambda (G3cfc@datum) (values (vector 'atom (G2e3e@stx->datum G3cfc@datum)) G3c72@ids)) G3cfa@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3cf8@t))) (G306b@syntax-dispatch G3cf8@t 'any))) G3ce6@t))) (G306b@syntax-dispatch G3ce6@t '#(vector each-any)))) G3ce2@t))) (G306b@syntax-dispatch G3ce2@t '()))) G3cc6@t))) (G306b@syntax-dispatch G3cc6@t '(any . any)))) G3c94@t))) (G306b@syntax-dispatch G3c94@t '(any any . #(each+ any () any))))) G3c7e@t))) (G306b@syntax-dispatch G3c7e@t '(any any)))) G3c76@t))) (G306b@syntax-dispatch G3c76@t 'any))) G3c70@p))) (G3c6f@cvt G3c68@pattern '0 '()))) '#f '#f))) (set! G306b@syntax-dispatch ((lambda () ((lambda (G3d19@stx^ G3d1b@match-each G3d1d@match-each+ G3d1f@match-each-any G3d21@match-empty G3d23@combine G3d25@match* G3d27@match) (begin (set! G3d19@stx^ (lambda (G3de2@e G3de3@m* G3de4@s* G3de5@ae*) (if (if (null? G3de3@m*) (if (null? G3de4@s*) (begin '#f (null? G3de5@ae*)) '#f) '#f) G3de2@e (G2e10@mkstx G3de2@e G3de3@m* G3de4@s* G3de5@ae*)))) (set! G3d1b@match-each (lambda (G3dc5@e G3dc6@p G3dc7@m* G3dc8@s* G3dc9@ae*) (if (pair? G3dc5@e) ((lambda (G3dcf@first) (if G3dcf@first (begin '#f ((lambda (G3dd1@rest) (if G3dd1@rest (begin '#f (cons G3dcf@first G3dd1@rest)) '#f)) (G3d1b@match-each (cdr G3dc5@e) G3dc6@p G3dc7@m* G3dc8@s* G3dc9@ae*))) '#f)) (G3d27@match (car G3dc5@e) G3dc6@p G3dc7@m* G3dc8@s* G3dc9@ae* '())) (if (null? G3dc5@e) '() (if (G2df0@stx? G3dc5@e) (if (not (G2d9e@top-marked? G3dc7@m*)) (begin '#f (call-with-values (lambda () (G2e0e@join-wraps G3dc7@m* G3dc8@s* G3dc9@ae* G3dc5@e)) (lambda (G3dd6@G3dd3 G3dd7@G3dd4 G3dd8@G3dd5) ((lambda (G3ddc@ae* G3ddd@s* G3dde@m*) (G3d1b@match-each (G2df4@stx-expr G3dc5@e) G3dc6@p G3dde@m* G3ddd@s* G3ddc@ae*)) G3dd8@G3dd5 G3dd7@G3dd4 G3dd6@G3dd3)))) '#f) (if (G2971@G287b@annotation? G3dc5@e) (G3d1b@match-each (G2973@G287f@annotation-expression G3dc5@e) G3dc6@p G3dc7@m* G3dc8@s* G3dc9@ae*) '#f)))))) (set! G3d1d@match-each+ (lambda (G3d8b@e G3d8c@x-pat G3d8d@y-pat G3d8e@z-pat G3d8f@m* G3d90@s* G3d91@ae* G3d92@r) ((letrec ((G3d9b@f (lambda (G3d9d@e G3d9e@m* G3d9f@s* G3da0@ae*) (if (pair? G3d9d@e) (call-with-values (lambda () (G3d9b@f (cdr G3d9d@e) G3d9e@m* G3d9f@s* G3da0@ae*)) (lambda (G3da8@G3da5 G3da9@G3da6 G3daa@G3da7) ((lambda (G3dae@r G3daf@y-pat G3db0@xr*) (if G3dae@r (if (null? G3daf@y-pat) ((lambda (G3db4@xr) (if G3db4@xr (values (cons G3db4@xr G3db0@xr*) G3daf@y-pat G3dae@r) (values '#f '#f '#f))) (G3d27@match (car G3d9d@e) G3d8c@x-pat G3d9e@m* G3d9f@s* G3da0@ae* '())) (values '() (cdr G3daf@y-pat) (G3d27@match (car G3d9d@e) (car G3daf@y-pat) G3d9e@m* G3d9f@s* G3da0@ae* G3dae@r))) (values '#f '#f '#f))) G3daa@G3da7 G3da9@G3da6 G3da8@G3da5))) (if (G2df0@stx? G3d9d@e) (if (G2d9e@top-marked? G3d9e@m*) (values '() G3d8d@y-pat (G3d27@match G3d9d@e G3d8e@z-pat G3d9e@m* G3d9f@s* G3da0@ae* G3d92@r)) (call-with-values (lambda () (G2e0e@join-wraps G3d9e@m* G3d9f@s* G3da0@ae* G3d9d@e)) (lambda (G3db9@G3db6 G3dba@G3db7 G3dbb@G3db8) ((lambda (G3dbf@ae* G3dc0@s* G3dc1@m*) (G3d9b@f (G2df4@stx-expr G3d9d@e) G3dc1@m* G3dc0@s* G3dbf@ae*)) G3dbb@G3db8 G3dba@G3db7 G3db9@G3db6)))) (if (G2971@G287b@annotation? G3d9d@e) (G3d9b@f (G2973@G287f@annotation-expression G3d9d@e) G3d9e@m* G3d9f@s* G3da0@ae*) (values '() G3d8d@y-pat (G3d27@match G3d9d@e G3d8e@z-pat G3d9e@m* G3d9f@s* G3da0@ae* G3d92@r)))))))) G3d9b@f) G3d8b@e G3d8f@m* G3d90@s* G3d91@ae*))) (set! G3d1f@match-each-any (lambda (G3d72@e G3d73@m* G3d74@s* G3d75@ae*) (if (pair? G3d72@e) ((lambda (G3d7a@l) (if G3d7a@l (begin '#f (cons (G3d19@stx^ (car G3d72@e) G3d73@m* G3d74@s* G3d75@ae*) G3d7a@l)) '#f)) (G3d1f@match-each-any (cdr G3d72@e) G3d73@m* G3d74@s* G3d75@ae*)) (if (null? G3d72@e) '() (if (G2df0@stx? G3d72@e) (if (not (G2d9e@top-marked? G3d73@m*)) (begin '#f (call-with-values (lambda () (G2e0e@join-wraps G3d73@m* G3d74@s* G3d75@ae* G3d72@e)) (lambda (G3d7f@G3d7c G3d80@G3d7d G3d81@G3d7e) ((lambda (G3d85@ae* G3d86@s* G3d87@m*) (G3d1f@match-each-any (G2df4@stx-expr G3d72@e) G3d87@m* G3d86@s* G3d85@ae*)) G3d81@G3d7e G3d80@G3d7d G3d7f@G3d7c)))) '#f) (if (G2971@G287b@annotation? G3d72@e) (G3d1f@match-each-any (G2973@G287f@annotation-expression G3d72@e) G3d73@m* G3d74@s* G3d75@ae*) '#f)))))) (set! G3d21@match-empty (lambda (G3d6c@p G3d6d@r) (if (null? G3d6c@p) G3d6d@r (if (eq? G3d6c@p '_) G3d6d@r (if (eq? G3d6c@p 'any) (cons '() G3d6d@r) (if (pair? G3d6c@p) (G3d21@match-empty (car G3d6c@p) (G3d21@match-empty (cdr G3d6c@p) G3d6d@r)) (if (eq? G3d6c@p 'each-any) (cons '() G3d6d@r) ((lambda (G3d70@t) (if (memv G3d70@t '(each)) (G3d21@match-empty (vector-ref G3d6c@p '1) G3d6d@r) (if (memv G3d70@t '(each+)) (G3d21@match-empty (vector-ref G3d6c@p '1) (G3d21@match-empty (reverse (vector-ref G3d6c@p '2)) (G3d21@match-empty (vector-ref G3d6c@p '3) G3d6d@r))) (if (memv G3d70@t '(free-id atom)) G3d6d@r (if (memv G3d70@t '(scheme-id atom)) G3d6d@r (if (memv G3d70@t '(vector)) (G3d21@match-empty (vector-ref G3d6c@p '1) G3d6d@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d6c@p))))))) (vector-ref G3d6c@p '0))))))))) (set! G3d23@combine (lambda (G3d68@r* G3d69@r) (if (null? (car G3d68@r*)) G3d69@r (cons (map car G3d68@r*) (G3d23@combine (map cdr G3d68@r*) G3d69@r))))) (set! G3d25@match* (lambda (G3d47@e G3d48@p G3d49@m* G3d4a@s* G3d4b@ae* G3d4c@r) (if (null? G3d48@p) (if (null? G3d47@e) (begin '#f G3d4c@r) '#f) (if (pair? G3d48@p) (if (pair? G3d47@e) (begin '#f (G3d27@match (car G3d47@e) (car G3d48@p) G3d49@m* G3d4a@s* G3d4b@ae* (G3d27@match (cdr G3d47@e) (cdr G3d48@p) G3d49@m* G3d4a@s* G3d4b@ae* G3d4c@r))) '#f) (if (eq? G3d48@p 'each-any) ((lambda (G3d53@l) (if G3d53@l (begin '#f (cons G3d53@l G3d4c@r)) '#f)) (G3d1f@match-each-any G3d47@e G3d49@m* G3d4a@s* G3d4b@ae*)) ((lambda (G3d55@t) (if (memv G3d55@t '(each)) (if (null? G3d47@e) (G3d21@match-empty (vector-ref G3d48@p '1) G3d4c@r) ((lambda (G3d57@r*) (if G3d57@r* (begin '#f (G3d23@combine G3d57@r* G3d4c@r)) '#f)) (G3d1b@match-each G3d47@e (vector-ref G3d48@p '1) G3d49@m* G3d4a@s* G3d4b@ae*))) (if (memv G3d55@t '(free-id)) (if (symbol? G3d47@e) (if (G2d9e@top-marked? G3d49@m*) (if (G2e30@free-id=? (G3d19@stx^ G3d47@e G3d49@m* G3d4a@s* G3d4b@ae*) (vector-ref G3d48@p '1)) (begin '#f G3d4c@r) '#f) '#f) '#f) (if (memv G3d55@t '(scheme-id)) (if (symbol? G3d47@e) (if (G2d9e@top-marked? G3d49@m*) (if (G2e30@free-id=? (G3d19@stx^ G3d47@e G3d49@m* G3d4a@s* G3d4b@ae*) (G2ff9@scheme-stx (vector-ref G3d48@p '1))) (begin '#f G3d4c@r) '#f) '#f) '#f) (if (memv G3d55@t '(each+)) (call-with-values (lambda () (G3d1d@match-each+ G3d47@e (vector-ref G3d48@p '1) (vector-ref G3d48@p '2) (vector-ref G3d48@p '3) G3d49@m* G3d4a@s* G3d4b@ae* G3d4c@r)) (lambda (G3d5c@G3d59 G3d5d@G3d5a G3d5e@G3d5b) ((lambda (G3d62@r G3d63@y-pat G3d64@xr*) (if G3d62@r (if (null? G3d63@y-pat) (begin '#f (if (null? G3d64@xr*) (G3d21@match-empty (vector-ref G3d48@p '1) G3d62@r) (G3d23@combine G3d64@xr* G3d62@r))) '#f) '#f)) G3d5e@G3d5b G3d5d@G3d5a G3d5c@G3d59))) (if (memv G3d55@t '(atom)) (if (equal? (vector-ref G3d48@p '1) (G2e3c@strip G3d47@e G3d49@m*)) (begin '#f G3d4c@r) '#f) (if (memv G3d55@t '(vector)) (if (vector? G3d47@e) (begin '#f (G3d27@match (vector->list G3d47@e) (vector-ref G3d48@p '1) G3d49@m* G3d4a@s* G3d4b@ae* G3d4c@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d48@p)))))))) (vector-ref G3d48@p '0))))))) (set! G3d27@match (lambda (G3d2c@e G3d2d@p G3d2e@m* G3d2f@s* G3d30@ae* G3d31@r) (if (not G3d31@r) '#f (if (eq? G3d2d@p '_) G3d31@r (if (eq? G3d2d@p 'any) (cons (G3d19@stx^ G3d2c@e G3d2e@m* G3d2f@s* G3d30@ae*) G3d31@r) (if (G2df0@stx? G3d2c@e) (if (not (G2d9e@top-marked? G3d2e@m*)) (begin '#f (call-with-values (lambda () (G2e0e@join-wraps G3d2e@m* G3d2f@s* G3d30@ae* G3d2c@e)) (lambda (G3d3b@G3d38 G3d3c@G3d39 G3d3d@G3d3a) ((lambda (G3d41@ae* G3d42@s* G3d43@m*) (G3d27@match (G2df4@stx-expr G3d2c@e) G3d2d@p G3d43@m* G3d42@s* G3d41@ae* G3d31@r)) G3d3d@G3d3a G3d3c@G3d39 G3d3b@G3d38)))) '#f) (if (G2971@G287b@annotation? G3d2c@e) (G3d27@match (G2973@G287f@annotation-expression G3d2c@e) G3d2d@p G3d2e@m* G3d2f@s* G3d30@ae* G3d31@r) (G3d25@match* G3d2c@e G3d2d@p G3d2e@m* G3d2f@s* G3d30@ae* G3d31@r)))))))) (lambda (G3d28@e G3d29@p) (G3d27@match G3d28@e G3d29@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G306d@ellipsis? (lambda (G3dea@x) (if (G2e28@id? G3dea@x) (begin '#f (G2e30@free-id=? G3dea@x (G2ff9@scheme-stx '...))) '#f))) (set! G306f@underscore? (lambda (G3dec@x) (if (G2e28@id? G3dec@x) (begin '#f (G2e30@free-id=? G3dec@x (G2ff9@scheme-stx '_))) '#f))) (set! G3071@verify-literals (lambda (G3dee@lits G3def@expr) (for-each (lambda (G3df2@x) (if ((lambda (G3df4@t) (if G3df4@t G3df4@t ((lambda (G3df6@t) (if G3df6@t G3df6@t (begin '#f (G306f@underscore? G3df2@x)))) (G306d@ellipsis? G3df2@x)))) (not (G2e28@id? G3df2@x))) (G315e@syntax-violation '#f '"invalid literal" G3def@expr G3df2@x) (void))) G3dee@lits))) (set! G3073@syntax-case-transformer ((lambda () ((lambda (G3df9@build-dispatch-call G3dfb@invalid-ids-error G3dfd@gen-clause G3dff@gen-syntax-case) (begin (set! G3df9@build-dispatch-call (lambda (G3e68@pvars G3e69@expr G3e6a@y G3e6b@r G3e6c@mr) ((lambda (G3e72@ids G3e73@levels) ((lambda (G3e76@labels G3e77@new-vars) ((lambda (G3e7a@body) (list '(primitive apply) (G2d80@G2ca8@build-lambda '#f G3e77@new-vars G3e7a@body) G3e6a@y)) (G308f@chi-expr (G2e14@add-subst (G2de1@make-full-rib G3e72@ids G3e76@labels) G3e69@expr) (append (map (lambda (G3e7c@label G3e7d@var G3e7e@level) (cons G3e7c@label (G2e48@make-binding 'syntax (cons G3e7d@var G3e7e@level)))) G3e76@labels G3e77@new-vars (map cdr G3e68@pvars)) G3e6b@r) G3e6c@mr))) (map G2da4@gen-label G3e72@ids) (map G2da0@gen-lexical G3e72@ids))) (map car G3e68@pvars) (map cdr G3e68@pvars)))) (set! G3dfb@invalid-ids-error (lambda (G3e5c@id* G3e5d@e G3e5e@class) ((letrec ((G3e62@find (lambda (G3e64@id* G3e65@ok*) (if (null? G3e64@id*) (G315e@syntax-violation '#f '"invalid syntax" G3e5d@e) (if (G2e28@id? (car G3e64@id*)) (if (G2e36@bound-id-member? (car G3e64@id*) G3e65@ok*) (G3158@syntax-error (car G3e64@id*) '"duplicate " G3e5e@class) (G3e62@find (cdr G3e64@id*) (cons (car G3e64@id*) G3e65@ok*))) (G3158@syntax-error (car G3e64@id*) '"invalid " G3e5e@class)))))) G3e62@find) G3e5c@id* '()))) (set! G3dfd@gen-clause (lambda (G3e36@x G3e37@keys G3e38@clauses G3e39@r G3e3a@mr G3e3b@pat G3e3c@fender G3e3d@expr) (call-with-values (lambda () (G3069@convert-pattern G3e3b@pat G3e37@keys)) (lambda (G3e48@G3e46 G3e49@G3e47) ((lambda (G3e4c@pvars G3e4d@p) (if (not (G2e34@distinct-bound-ids? (map car G3e4c@pvars))) (G3dfb@invalid-ids-error (map car G3e4c@pvars) G3e3b@pat '"pattern variable") (if (not (for-all (lambda (G3e50@x) (not (G306d@ellipsis? (car G3e50@x)))) G3e4c@pvars)) (G315e@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e3b@pat) ((lambda (G3e52@y) ((lambda (G3e54@test) ((lambda (G3e56@conseq) ((lambda (G3e58@altern) (list (G2d80@G2ca8@build-lambda '#f (list G3e52@y) (list 'if G3e54@test G3e56@conseq G3e58@altern)) (list '(primitive syntax-dispatch) G3e36@x (list 'quote G3e4d@p)))) (G3dff@gen-syntax-case G3e36@x G3e37@keys G3e38@clauses G3e39@r G3e3a@mr))) (G3df9@build-dispatch-call G3e4c@pvars G3e3d@expr G3e52@y G3e39@r G3e3a@mr))) (if (eq? G3e3c@fender '#t) G3e52@y ((lambda (G3e5a@call) (list 'if G3e52@y G3e5a@call (list 'quote '#f))) (G3df9@build-dispatch-call G3e4c@pvars G3e3c@fender G3e52@y G3e39@r G3e3a@mr))))) (G2da0@gen-lexical 'tmp))))) G3e49@G3e47 G3e48@G3e46))))) (set! G3dff@gen-syntax-case (lambda (G3e14@x G3e15@keys G3e16@clauses G3e17@r G3e18@mr) (if (null? G3e16@clauses) (list '(primitive syntax-error) G3e14@x) ((lambda (G3e1e@t) ((lambda (G3e20@ls/false) (if G3e20@ls/false (apply (lambda (G3e22@pat G3e23@expr) (if (if (G2e28@id? G3e22@pat) (if (not (G2e36@bound-id-member? G3e22@pat G3e15@keys)) (begin '#f (not (G306d@ellipsis? G3e22@pat))) '#f) '#f) (if (G2e30@free-id=? G3e22@pat (G2ff9@scheme-stx '_)) (G308f@chi-expr G3e23@expr G3e17@r G3e18@mr) ((lambda (G3e26@lab G3e27@lex) ((lambda (G3e2a@body) (list (G2d80@G2ca8@build-lambda '#f (list G3e27@lex) G3e2a@body) G3e14@x)) (G308f@chi-expr (G2e14@add-subst (G2de1@make-full-rib (list G3e22@pat) (list G3e26@lab)) G3e23@expr) (cons (cons G3e26@lab (G2e48@make-binding 'syntax (cons G3e27@lex '0))) G3e17@r) G3e18@mr))) (G2da4@gen-label G3e22@pat) (G2da0@gen-lexical G3e22@pat))) (G3dfd@gen-clause G3e14@x G3e15@keys (cdr G3e16@clauses) G3e17@r G3e18@mr G3e22@pat '#t G3e23@expr))) G3e20@ls/false) ((lambda (G3e2c@t) ((lambda (G3e2e@ls/false) (if G3e2e@ls/false (apply (lambda (G3e30@pat G3e31@fender G3e32@expr) (G3dfd@gen-clause G3e14@x G3e15@keys (cdr G3e16@clauses) G3e17@r G3e18@mr G3e30@pat G3e31@fender G3e32@expr)) G3e2e@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3e2c@t))) (G306b@syntax-dispatch G3e2c@t '(any any any)))) G3e1e@t))) (G306b@syntax-dispatch G3e1e@t '(any any)))) (car G3e16@clauses))))) (lambda (G3e00@e G3e01@r G3e02@mr) ((lambda (G3e06@t) ((lambda (G3e08@ls/false) (if G3e08@ls/false (apply (lambda (G3e0a@expr G3e0b@keys G3e0c@clauses) (begin (G3071@verify-literals G3e0b@keys G3e00@e) ((lambda (G3e10@x) ((lambda (G3e12@body) (list (G2d80@G2ca8@build-lambda '#f (list G3e10@x) G3e12@body) (G308f@chi-expr G3e0a@expr G3e01@r G3e02@mr))) (G3dff@gen-syntax-case G3e10@x G3e0b@keys G3e0c@clauses G3e01@r G3e02@mr))) (G2da0@gen-lexical 'tmp)))) G3e08@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3e06@t))) (G306b@syntax-dispatch G3e06@t '(_ any each-any . each-any)))) G3e00@e)))) '#f '#f '#f '#f)))) (set! G3075@ellipsis-map (lambda (G3e82@proc G3e83@ls . G3e86@ls*) ((lambda (G3e89@who) (begin (set! G3e89@who '...) (begin (if (not (list? G3e83@ls)) (assertion-violation G3e89@who '"not a list" G3e83@ls) (void)) (if (not (null? G3e86@ls*)) ((lambda (G3e8a@n) (for-each (lambda (G3e8c@x) (begin (if (not (list? G3e8c@x)) (assertion-violation G3e89@who '"not a list" G3e8c@x) (void)) (if (not (= (length G3e8c@x) G3e8a@n)) (assertion-violation G3e89@who '"length mismatch" G3e83@ls G3e8c@x) (void)))) G3e86@ls*)) (length G3e83@ls)) (void)) (apply map G3e82@proc G3e83@ls G3e86@ls*)))) '#f))) (set! G3077@syntax-transformer ((lambda () ((lambda (G3e8f@gen-syntax G3e91@gen-ref G3e93@gen-append G3e95@gen-mappend G3e97@gen-map G3e99@gen-cons G3e9b@gen-vector G3e9d@regen) (begin (set! G3e8f@gen-syntax (lambda (G3f02@src G3f03@e G3f04@r G3f05@maps G3f06@ellipsis? G3f07@vec?) ((lambda (G3f0e@t) ((lambda (G3f10@ls/false) (if (if G3f10@ls/false (begin '#f (apply (lambda (G3f12@dots) (G3f06@ellipsis? G3f12@dots)) G3f10@ls/false)) '#f) (apply (lambda (G3f14@dots) (G315e@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f02@src)) G3f10@ls/false) ((lambda (G3f16@t) ((lambda (G3f18@ls/false) (if (if G3f18@ls/false (begin '#f (apply (lambda (G3f1a@id) (G2e28@id? G3f1a@id)) G3f18@ls/false)) '#f) (apply (lambda (G3f1c@id) ((lambda (G3f1e@label) ((lambda (G3f20@b) ((lambda () (if (eq? (G2e4a@binding-type G3f20@b) 'syntax) (call-with-values (lambda () ((lambda (G3f24@var.lev) (G3e91@gen-ref G3f02@src (car G3f24@var.lev) (cdr G3f24@var.lev) G3f05@maps)) (G2e4c@binding-value G3f20@b))) (lambda (G3f26@G3f22 G3f27@G3f23) ((lambda (G3f2a@maps G3f2b@var) (values (list 'ref G3f2b@var) G3f2a@maps)) G3f27@G3f23 G3f26@G3f22))) (values (list 'quote G3f03@e) G3f05@maps))))) (G2e46@label->binding G3f1e@label G3f04@r))) (G2e42@id->label G3f03@e))) G3f18@ls/false) ((lambda (G3f2e@t) ((lambda (G3f30@ls/false) (if (if G3f30@ls/false (begin '#f (apply (lambda (G3f32@dots G3f33@e) (G3f06@ellipsis? G3f32@dots)) G3f30@ls/false)) '#f) (apply (lambda (G3f36@dots G3f37@e) (if G3f07@vec? (G315e@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f02@src) (G3e8f@gen-syntax G3f02@src G3f37@e G3f04@r G3f05@maps (lambda (G3f3a@x) '#f) '#f))) G3f30@ls/false) ((lambda (G3f3c@t) ((lambda (G3f3e@ls/false) (if (if G3f3e@ls/false (begin '#f (apply (lambda (G3f40@x G3f41@dots G3f42@y) (G3f06@ellipsis? G3f41@dots)) G3f3e@ls/false)) '#f) (apply (lambda (G3f46@x G3f47@dots G3f48@y) ((letrec ((G3f4c@f (lambda (G3f4e@y G3f4f@k) ((lambda (G3f52@t) ((lambda (G3f54@ls/false) (if G3f54@ls/false (apply (lambda () (G3f4f@k G3f05@maps)) G3f54@ls/false) ((lambda (G3f56@t) ((lambda (G3f58@ls/false) (if (if G3f58@ls/false (begin '#f (apply (lambda (G3f5a@dots G3f5b@y) (G3f06@ellipsis? G3f5a@dots)) G3f58@ls/false)) '#f) (apply (lambda (G3f5e@dots G3f5f@y) (G3f4c@f G3f5f@y (lambda (G3f62@maps) (call-with-values (lambda () (G3f4f@k (cons '() G3f62@maps))) (lambda (G3f66@G3f64 G3f67@G3f65) ((lambda (G3f6a@maps G3f6b@x) (if (null? (car G3f6a@maps)) (G315e@syntax-violation '#f '"extra ellipsis in syntax form" G3f02@src) (values (G3e95@gen-mappend G3f6b@x (car G3f6a@maps)) (cdr G3f6a@maps)))) G3f67@G3f65 G3f66@G3f64)))))) G3f58@ls/false) ((lambda (G3f6e@t) ((lambda (G3f70@ls/false) (if G3f70@ls/false (apply (lambda () (call-with-values (lambda () (G3e8f@gen-syntax G3f02@src G3f4e@y G3f04@r G3f05@maps G3f06@ellipsis? G3f07@vec?)) (lambda (G3f74@G3f72 G3f75@G3f73) ((lambda (G3f78@maps G3f79@y) (call-with-values (lambda () (G3f4f@k G3f78@maps)) (lambda (G3f7e@G3f7c G3f7f@G3f7d) ((lambda (G3f82@maps G3f83@x) (values (G3e93@gen-append G3f83@x G3f79@y) G3f82@maps)) G3f7f@G3f7d G3f7e@G3f7c)))) G3f75@G3f73 G3f74@G3f72)))) G3f70@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3f6e@t))) (G306b@syntax-dispatch G3f6e@t '_))) G3f56@t))) (G306b@syntax-dispatch G3f56@t '(any . any)))) G3f52@t))) (G306b@syntax-dispatch G3f52@t '()))) G3f4e@y)))) G3f4c@f) G3f48@y (lambda (G3f86@maps) (call-with-values (lambda () (G3e8f@gen-syntax G3f02@src G3f46@x G3f04@r (cons '() G3f86@maps) G3f06@ellipsis? '#f)) (lambda (G3f8a@G3f88 G3f8b@G3f89) ((lambda (G3f8e@maps G3f8f@x) (if (null? (car G3f8e@maps)) (G315e@syntax-violation '#f '"extra ellipsis in syntax form" G3f02@src) (values (G3e97@gen-map G3f8f@x (car G3f8e@maps)) (cdr G3f8e@maps)))) G3f8b@G3f89 G3f8a@G3f88)))))) G3f3e@ls/false) ((lambda (G3f92@t) ((lambda (G3f94@ls/false) (if G3f94@ls/false (apply (lambda (G3f96@x G3f97@y) (call-with-values (lambda () (G3e8f@gen-syntax G3f02@src G3f96@x G3f04@r G3f05@maps G3f06@ellipsis? '#f)) (lambda (G3f9c@G3f9a G3f9d@G3f9b) ((lambda (G3fa0@maps G3fa1@xnew) (call-with-values (lambda () (G3e8f@gen-syntax G3f02@src G3f97@y G3f04@r G3fa0@maps G3f06@ellipsis? G3f07@vec?)) (lambda (G3fa6@G3fa4 G3fa7@G3fa5) ((lambda (G3faa@maps G3fab@ynew) (values (G3e99@gen-cons G3f03@e G3f96@x G3f97@y G3fa1@xnew G3fab@ynew) G3faa@maps)) G3fa7@G3fa5 G3fa6@G3fa4)))) G3f9d@G3f9b G3f9c@G3f9a)))) G3f94@ls/false) ((lambda (G3fae@t) ((lambda (G3fb0@ls/false) (if G3fb0@ls/false (apply (lambda (G3fb2@ls) (call-with-values (lambda () (G3e8f@gen-syntax G3f02@src G3fb2@ls G3f04@r G3f05@maps G3f06@ellipsis? '#t)) (lambda (G3fb6@G3fb4 G3fb7@G3fb5) ((lambda (G3fba@maps G3fbb@lsnew) (values (G3e9b@gen-vector G3f03@e G3fb2@ls G3fbb@lsnew) G3fba@maps)) G3fb7@G3fb5 G3fb6@G3fb4)))) G3fb0@ls/false) ((lambda (G3fbe@t) ((lambda (G3fc0@ls/false) (if G3fc0@ls/false (apply (lambda () (values (list 'quote G3f03@e) G3f05@maps)) G3fc0@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3fbe@t))) (G306b@syntax-dispatch G3fbe@t '_))) G3fae@t))) (G306b@syntax-dispatch G3fae@t '#(vector each-any)))) G3f92@t))) (G306b@syntax-dispatch G3f92@t '(any . any)))) G3f3c@t))) (G306b@syntax-dispatch G3f3c@t '(any any . any)))) G3f2e@t))) (G306b@syntax-dispatch G3f2e@t '(any any)))) G3f16@t))) (G306b@syntax-dispatch G3f16@t 'any))) G3f0e@t))) (G306b@syntax-dispatch G3f0e@t 'any))) G3f03@e))) (set! G3e91@gen-ref (lambda (G3eea@src G3eeb@var G3eec@level G3eed@maps) (if (= G3eec@level '0) (values G3eeb@var G3eed@maps) (if (null? G3eed@maps) (G315e@syntax-violation '#f '"missing ellipsis in syntax form" G3eea@src) (call-with-values (lambda () (G3e91@gen-ref G3eea@src G3eeb@var (- G3eec@level '1) (cdr G3eed@maps))) (lambda (G3ef4@G3ef2 G3ef5@G3ef3) ((lambda (G3ef8@outer-maps G3ef9@outer-var) ((lambda (G3efc@t) (if G3efc@t ((lambda (G3efe@b) (values (cdr G3efe@b) G3eed@maps)) G3efc@t) ((lambda (G3f00@inner-var) (values G3f00@inner-var (cons (cons (cons G3ef9@outer-var G3f00@inner-var) (car G3eed@maps)) G3ef8@outer-maps))) (G2da0@gen-lexical 'tmp)))) (assq G3ef9@outer-var (car G3eed@maps)))) G3ef5@G3ef3 G3ef4@G3ef2))))))) (set! G3e93@gen-append (lambda (G3ee6@x G3ee7@y) (if (equal? G3ee7@y ''()) G3ee6@x (list 'append G3ee6@x G3ee7@y)))) (set! G3e95@gen-mappend (lambda (G3ee2@e G3ee3@map-env) (list 'apply '(primitive append) (G3e97@gen-map G3ee2@e G3ee3@map-env)))) (set! G3e97@gen-map (lambda (G3ed0@e G3ed1@map-env) ((lambda (G3ed4@formals G3ed5@actuals) (if (eq? (car G3ed0@e) 'ref) (car G3ed5@actuals) (if (for-all (lambda (G3ed8@x) (if (eq? (car G3ed8@x) 'ref) (begin '#f (memq (cadr G3ed8@x) G3ed4@formals)) '#f)) (cdr G3ed0@e)) ((lambda (G3eda@args) (cons 'map (cons (list 'primitive (car G3ed0@e)) G3eda@args))) (map ((lambda (G3edc@r) (lambda (G3ede@x) (cdr (assq (cadr G3ede@x) G3edc@r)))) (map cons G3ed4@formals G3ed5@actuals)) (cdr G3ed0@e))) (cons* 'map (list 'lambda G3ed4@formals G3ed0@e) G3ed5@actuals)))) (map cdr G3ed1@map-env) (map (lambda (G3ee0@x) (list 'ref (car G3ee0@x))) G3ed1@map-env)))) (set! G3e99@gen-cons (lambda (G3ec0@e G3ec1@x G3ec2@y G3ec3@xnew G3ec4@ynew) ((lambda (G3eca@t) (if (memv G3eca@t '(quote)) (if (eq? (car G3ec3@xnew) 'quote) ((lambda (G3ecc@xnew G3ecd@ynew) (if (if (eq? G3ecc@xnew G3ec1@x) (begin '#f (eq? G3ecd@ynew G3ec2@y)) '#f) (list 'quote G3ec0@e) (list 'quote (cons G3ecc@xnew G3ecd@ynew)))) (cadr G3ec3@xnew) (cadr G3ec4@ynew)) (if (null? (cadr G3ec4@ynew)) (list 'list G3ec3@xnew) (list 'cons G3ec3@xnew G3ec4@ynew))) (if (memv G3eca@t '(list)) (cons 'list (cons G3ec3@xnew (cdr G3ec4@ynew))) (list 'cons G3ec3@xnew G3ec4@ynew)))) (car G3ec4@ynew)))) (set! G3e9b@gen-vector (lambda (G3eba@e G3ebb@ls G3ebc@lsnew) (if (eq? (car G3ebc@lsnew) 'quote) (if (eq? (cadr G3ebc@lsnew) G3ebb@ls) (list 'quote G3eba@e) (list 'quote (list->vector (cadr G3ebc@lsnew)))) (if (eq? (car G3ebc@lsnew) 'list) (cons 'vector (cdr G3ebc@lsnew)) (list 'list->vector G3ebc@lsnew))))) (set! G3e9d@regen (lambda (G3eb4@x) ((lambda (G3eb6@t) (if (memv G3eb6@t '(ref)) (cadr G3eb4@x) (if (memv G3eb6@t '(primitive)) (list 'primitive (cadr G3eb4@x)) (if (memv G3eb6@t '(quote)) (list 'quote (cadr G3eb4@x)) (if (memv G3eb6@t '(lambda)) (G2d80@G2ca8@build-lambda '#f (cadr G3eb4@x) (G3e9d@regen (caddr G3eb4@x))) (if (memv G3eb6@t '(map)) ((lambda (G3eb8@ls) (cons '(primitive ellipsis-map) G3eb8@ls)) (map G3e9d@regen (cdr G3eb4@x))) (cons (list 'primitive (car G3eb4@x)) (map G3e9d@regen (cdr G3eb4@x))))))))) (car G3eb4@x)))) (lambda (G3e9e@e G3e9f@r G3ea0@mr) ((lambda (G3ea4@t) ((lambda (G3ea6@ls/false) (if G3ea6@ls/false (apply (lambda (G3ea8@x) (call-with-values (lambda () (G3e8f@gen-syntax G3e9e@e G3ea8@x G3e9f@r '() G306d@ellipsis? '#f)) (lambda (G3eac@G3eaa G3ead@G3eab) ((lambda (G3eb0@maps G3eb1@e) (G3e9d@regen G3eb1@e)) G3ead@G3eab G3eac@G3eaa)))) G3ea6@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3ea4@t))) (G306b@syntax-dispatch G3ea4@t '(_ any)))) G3e9e@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3079@core-macro-transformer (lambda (G3fc2@name) ((lambda (G3fc4@t) (if (memv G3fc4@t '(quote)) G301b@quote-transformer (if (memv G3fc4@t '(lambda)) G301f@lambda-transformer (if (memv G3fc4@t '(case-lambda)) G301d@case-lambda-transformer (if (memv G3fc4@t '(letrec)) G3007@letrec-transformer (if (memv G3fc4@t '(letrec*)) G3009@letrec*-transformer (if (memv G3fc4@t '(if)) G3017@if-transformer (if (memv G3fc4@t '(foreign-call)) G3067@foreign-call-transformer (if (memv G3fc4@t '(syntax-case)) G3073@syntax-case-transformer (if (memv G3fc4@t '(syntax)) G3077@syntax-transformer (if (memv G3fc4@t '(type-descriptor)) G300d@type-descriptor-transformer (if (memv G3fc4@t '(record-type-descriptor)) G300f@record-type-descriptor-transformer (if (memv G3fc4@t '(record-constructor-descriptor)) G3011@record-constructor-descriptor-transformer (if (memv G3fc4@t '(fluid-let-syntax)) G300b@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fc2@name))))))))))))))) G3fc2@name))) (set! G307b@file-options-macro (lambda (G3fc6@x) ((lambda (G3fc9@valid-option?) (begin (set! G3fc9@valid-option? (lambda (G3fd2@x) (if (G2e28@id? G3fd2@x) (begin '#f (memq (G2e2a@id->sym G3fd2@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3fca@t) ((lambda (G3fcc@ls/false) (if (if G3fcc@ls/false (begin '#f (apply (lambda (G3fce@opt*) (if (for-all G3fc9@valid-option? G3fce@opt*) (begin '#f (G297b@G2927@file-options-spec (map G2e2a@id->sym G3fce@opt*))) '#f)) G3fcc@ls/false)) '#f) (apply (lambda (G3fd0@opt*) (G3021@bless (list 'quote (G297b@G2927@file-options-spec (map G2e2a@id->sym G3fd0@opt*))))) G3fcc@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3fca@t))) (G306b@syntax-dispatch G3fca@t '(_ . each-any)))) G3fc6@x))) '#f))) (set! G307d@symbol-macro (lambda (G3fd4@x G3fd5@set) ((lambda (G3fd8@t) ((lambda (G3fda@ls/false) (if (if G3fda@ls/false (begin '#f (apply (lambda (G3fdc@name) (if (G2e28@id? G3fdc@name) (begin '#f (memq (G2e2a@id->sym G3fdc@name) G3fd5@set)) '#f)) G3fda@ls/false)) '#f) (apply (lambda (G3fde@name) (G3021@bless (list 'quote G3fde@name))) G3fda@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G3fd8@t))) (G306b@syntax-dispatch G3fd8@t '(_ any)))) G3fd4@x))) (set! G307f@macro-transformer (lambda (G3fe0@x) (if (procedure? G3fe0@x) G3fe0@x (if (symbol? G3fe0@x) ((lambda (G3fe2@t) (if (memv G3fe2@t '(define-record-type)) G305f@define-record-type-macro (if (memv G3fe2@t '(define-struct)) G305d@define-struct-macro (if (memv G3fe2@t '(include)) G3053@include-macro (if (memv G3fe2@t '(cond)) G304f@cond-macro (if (memv G3fe2@t '(let)) G3027@let-macro (if (memv G3fe2@t '(do)) G3047@do-macro (if (memv G3fe2@t '(or)) G304b@or-macro (if (memv G3fe2@t '(and)) G304d@and-macro (if (memv G3fe2@t '(let*)) G3049@let*-macro (if (memv G3fe2@t '(let-values)) G3029@let-values-macro (if (memv G3fe2@t '(let*-values)) G302b@let*-values-macro (if (memv G3fe2@t '(syntax-rules)) G3057@syntax-rules-macro (if (memv G3fe2@t '(quasiquote)) G3059@quasiquote-macro (if (memv G3fe2@t '(quasisyntax)) G305b@quasisyntax-macro (if (memv G3fe2@t '(with-syntax)) G3023@with-syntax-macro (if (memv G3fe2@t '(when)) G3013@when-macro (if (memv G3fe2@t '(unless)) G3015@unless-macro (if (memv G3fe2@t '(case)) G3019@case-macro (if (memv G3fe2@t '(identifier-syntax)) G3045@identifier-syntax-macro (if (memv G3fe2@t '(time)) G303d@time-macro (if (memv G3fe2@t '(delay)) G303f@delay-macro (if (memv G3fe2@t '(assert)) G3041@assert-macro (if (memv G3fe2@t '(endianness)) G3043@endianness-macro (if (memv G3fe2@t '(guard)) G3039@guard-macro (if (memv G3fe2@t '(define-enumeration)) G303b@define-enumeration-macro (if (memv G3fe2@t '(trace-lambda)) G302d@trace-lambda-macro (if (memv G3fe2@t '(trace-define)) G302f@trace-define-macro (if (memv G3fe2@t '(trace-define-syntax)) G3031@trace-define-syntax-macro (if (memv G3fe2@t '(trace-let-syntax)) G3035@trace-let-syntax-macro (if (memv G3fe2@t '(trace-letrec-syntax)) G3037@trace-letrec-syntax-macro (if (memv G3fe2@t '(define-condition-type)) G3061@define-condition-type-macro (if (memv G3fe2@t '(parameterize)) G3065@parameterize-macro (if (memv G3fe2@t '(include-into)) G3055@include-into-macro (if (memv G3fe2@t '(eol-style)) (lambda (G3fe4@x) (G307d@symbol-macro G3fe4@x '(none lf cr crlf nel crnel ls))) (if (memv G3fe2@t '(error-handling-mode)) (lambda (G3fe6@x) (G307d@symbol-macro G3fe6@x '(ignore raise replace))) (if (memv G3fe2@t '(buffer-mode)) (lambda (G3fe8@x) (G307d@symbol-macro G3fe8@x '(none line block))) (if (memv G3fe2@t '(file-options)) G307b@file-options-macro (if (memv G3fe2@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3063@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3fe0@x)))))))))))))))))))))))))))))))))))))))) G3fe0@x) (error 'core-macro-transformer '"BUG: invalid macro" G3fe0@x))))) (set! G3081@local-macro-transformer (lambda (G3fea@x) (car G3fea@x))) (set! G3083@do-macro-call (lambda (G3fec@transformer G3fed@expr) ((lambda (G3ff0@out) (begin ((letrec ((G3ff2@f (lambda (G3ff4@x) (if (not (G2df0@stx? G3ff4@x)) (if (pair? G3ff4@x) (begin (G3ff2@f (car G3ff4@x)) (G3ff2@f (cdr G3ff4@x))) (if (vector? G3ff4@x) (vector-for-each G3ff2@f G3ff4@x) (if (symbol? G3ff4@x) (G315e@syntax-violation '#f '"raw symbol encountered in output of macro" G3fed@expr G3ff4@x) (void)))) (void))))) G3ff2@f) G3ff0@out) (G2e12@add-mark (G2e08@gen-mark) G3ff0@out G3fed@expr))) (G3fec@transformer (G2e12@add-mark G2e0a@anti-mark G3fed@expr '#f))))) (set! G3085@chi-macro (lambda (G3ff6@p G3ff7@e) (G3083@do-macro-call (G307f@macro-transformer G3ff6@p) G3ff7@e))) (set! G3087@chi-local-macro (lambda (G3ffa@p G3ffb@e) (G3083@do-macro-call (G3081@local-macro-transformer G3ffa@p) G3ffb@e))) (set! G3089@chi-global-macro (lambda (G3ffe@p G3fff@e) ((lambda (G4002@lib G4003@loc) (begin (G2c1e@G2ab4@visit-library G4002@lib) ((lambda (G4006@x) ((lambda (G4008@transformer) (G3083@do-macro-call G4008@transformer G3fff@e)) (if (procedure? G4006@x) G4006@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G4006@x)))) (symbol-value G4003@loc)))) (car G3ffe@p) (cdr G3ffe@p)))) (set! G308b@chi-expr* (lambda (G400a@e* G400b@r G400c@mr) (if (null? G400a@e*) '() ((lambda (G4010@e) (cons G4010@e (G308b@chi-expr* (cdr G400a@e*) G400b@r G400c@mr))) (G308f@chi-expr (car G400a@e*) G400b@r G400c@mr))))) (set! G308d@chi-application (lambda (G4012@e G4013@r G4014@mr) ((lambda (G4018@t) ((lambda (G401a@ls/false) (if G401a@ls/false (apply (lambda (G401c@rator G401d@rands) ((lambda (G4020@rator) (cons G4020@rator (G308b@chi-expr* G401d@rands G4013@r G4014@mr))) (G308f@chi-expr G401c@rator G4013@r G4014@mr))) G401a@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G4018@t))) (G306b@syntax-dispatch G4018@t '(any . each-any)))) G4012@e))) (set! G308f@chi-expr (lambda (G4022@e G4023@r G4024@mr) (call-with-values (lambda () (G2e50@syntax-type G4022@e G4023@r)) (lambda (G402b@G4028 G402c@G4029 G402d@G402a) ((lambda (G4031@kwd G4032@value G4033@type) ((lambda (G4037@t) (if (memv G4037@t '(core-macro)) ((lambda (G4039@transformer) (G4039@transformer G4022@e G4023@r G4024@mr)) (G3079@core-macro-transformer G4032@value)) (if (memv G4037@t '(global)) ((lambda (G403b@lib) ((lambda (G403d@loc) ((lambda () (begin ((G30da@inv-collector) G403b@lib) G403d@loc)))) (cdr G4032@value))) (car G4032@value)) (if (memv G4037@t '(core-prim)) ((lambda (G403f@name) (list 'primitive G403f@name)) G4032@value) (if (memv G4037@t '(call)) (G308d@chi-application G4022@e G4023@r G4024@mr) (if (memv G4037@t '(lexical)) ((lambda (G4041@lex) G4041@lex) (G2ffb@lexical-var G4032@value)) (if (memv G4037@t '(global-macro global-macro!)) (G308f@chi-expr (G3089@chi-global-macro G4032@value G4022@e) G4023@r G4024@mr) (if (memv G4037@t '(local-macro local-macro!)) (G308f@chi-expr (G3087@chi-local-macro G4032@value G4022@e) G4023@r G4024@mr) (if (memv G4037@t '(macro macro!)) (G308f@chi-expr (G3085@chi-macro G4032@value G4022@e) G4023@r G4024@mr) (if (memv G4037@t '(constant)) ((lambda (G4043@datum) (list 'quote G4043@datum)) G4032@value) (if (memv G4037@t '(set!)) (G3091@chi-set! G4022@e G4023@r G4024@mr) (if (memv G4037@t '(begin)) ((lambda (G4045@t) ((lambda (G4047@ls/false) (if G4047@ls/false (apply (lambda (G4049@x G404a@x*) (G2d83@G2cf4@build-sequence '#f (G308b@chi-expr* (cons G4049@x G404a@x*) G4023@r G4024@mr))) G4047@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G4045@t))) (G306b@syntax-dispatch G4045@t '(_ any . each-any)))) G4022@e) (if (memv G4037@t '(let-syntax letrec-syntax)) ((lambda (G404d@t) ((lambda (G404f@ls/false) (if (if G404f@ls/false (begin '#f (apply (lambda (G4051@xlhs* G4052@xrhs* G4053@xbody G4054@xbody*) (if (not (G2e32@valid-bound-ids? G4051@xlhs*)) (G315e@syntax-violation '#f '"invalid identifiers" G4022@e) (void))) G404f@ls/false)) '#f) (apply (lambda (G4059@xlhs* G405a@xrhs* G405b@xbody G405c@xbody*) ((lambda (G4061@xlab*) ((lambda (G4063@xrib) ((lambda (G4065@xb*) ((lambda () (G2d83@G2cf4@build-sequence '#f (G308b@chi-expr* (map (lambda (G4067@x) (G2e14@add-subst G4063@xrib G4067@x)) (cons G405b@xbody G405c@xbody*)) (append (map cons G4061@xlab* G4065@xb*) G4023@r) (append (map cons G4061@xlab* G4065@xb*) G4024@mr)))))) (map (lambda (G4069@x) (G2e6f@make-eval-transformer (G30cc@expand-transformer (if (eq? G4033@type 'let-syntax) G4069@x (G2e14@add-subst G4063@xrib G4069@x)) G4024@mr))) G405a@xrhs*))) (G2de1@make-full-rib G4059@xlhs* G4061@xlab*))) (map G2da4@gen-label G4059@xlhs*))) G404f@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G404d@t))) (G306b@syntax-dispatch G404d@t '(_ #(each (any any)) any . each-any)))) G4022@e) (if (memv G4037@t '(displaced-lexical)) (G315e@syntax-violation '#f '"identifier out of context" G4022@e) (if (memv G4037@t '(syntax)) (G315e@syntax-violation '#f '"reference to pattern variable outside a syntax form" G4022@e) (if (memv G4037@t '(define define-syntax module import library)) (G315e@syntax-violation '#f (string-append ((lambda (G406b@t) (if (memv G406b@t '(define)) '"a definition" (if (memv G406b@t '(define-syntax)) '"a define-syntax" (if (memv G406b@t '(module)) '"a module definition" (if (memv G406b@t '(library)) '"a library definition" (if (memv G406b@t '(import)) '"an import declaration" (if (memv G406b@t '(export)) '"an export declaration" '"a non-expression"))))))) G4033@type) '" was found where an expression was expected") G4022@e) (if (memv G4037@t '(mutable)) (G315e@syntax-violation '#f '"attempt to reference an unexportable variable" G4022@e) (G315e@syntax-violation '#f '"invalid expression" G4022@e)))))))))))))))))) G4033@type)) G402d@G402a G402c@G4029 G402b@G4028))))) (set! G3091@chi-set! (lambda (G406d@e G406e@r G406f@mr) ((lambda (G4073@t) ((lambda (G4075@ls/false) (if (if G4075@ls/false (begin '#f (apply (lambda (G4077@x G4078@v) (G2e28@id? G4077@x)) G4075@ls/false)) '#f) (apply (lambda (G407b@x G407c@v) (call-with-values (lambda () (G2e50@syntax-type G407b@x G406e@r)) (lambda (G4082@G407f G4083@G4080 G4084@G4081) ((lambda (G4088@kwd G4089@value G408a@type) ((lambda (G408e@t) (if (memv G408e@t '(lexical)) (begin (G2fff@set-lexical-mutable! G4089@value '#t) (list 'set! (G2ffb@lexical-var G4089@value) (G308f@chi-expr G407c@v G406e@r G406f@mr))) (if (memv G408e@t '(core-prim)) (G315e@syntax-violation '#f '"cannot modify imported core primitive" G406d@e) (if (memv G408e@t '(global)) (G315e@syntax-violation '#f '"attempt to modify imported binding" G406d@e) (if (memv G408e@t '(global-macro!)) (G308f@chi-expr (G3089@chi-global-macro G4089@value G406d@e) G406e@r G406f@mr) (if (memv G408e@t '(local-macro!)) (G308f@chi-expr (G3087@chi-local-macro G4089@value G406d@e) G406e@r G406f@mr) (if (memv G408e@t '(mutable)) (G315e@syntax-violation '#f '"attempt to assign to an unexportable variable" G406d@e) (G315e@syntax-violation '#f '"invalid syntax" G406d@e)))))))) G408a@type)) G4084@G4081 G4083@G4080 G4082@G407f)))) G4075@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G4073@t))) (G306b@syntax-dispatch G4073@t '(_ any any)))) G406d@e))) (set! G3093@verify-formals (lambda (G4090@fmls G4091@stx) ((lambda (G4094@t) ((lambda (G4096@ls/false) (if G4096@ls/false (apply (lambda (G4098@x*) (if (not (G2e32@valid-bound-ids? G4098@x*)) (G3025@invalid-fmls-error G4091@stx G4090@fmls) (void))) G4096@ls/false) ((lambda (G409a@t) ((lambda (G409c@ls/false) (if G409c@ls/false (apply (lambda (G409e@x* G409f@x) (if (not (G2e32@valid-bound-ids? (cons G409f@x G409e@x*))) (G3025@invalid-fmls-error G4091@stx G4090@fmls) (void))) G409c@ls/false) ((lambda (G40a2@t) ((lambda (G40a4@ls/false) (if G40a4@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid syntax" G4091@stx)) G40a4@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G40a2@t))) (G306b@syntax-dispatch G40a2@t '_))) G409a@t))) (G306b@syntax-dispatch G409a@t '#(each+ any () any)))) G4094@t))) (G306b@syntax-dispatch G4094@t 'each-any))) G4090@fmls))) (set! G3095@chi-lambda-clause (lambda (G40a6@stx G40a7@fmls G40a8@body* G40a9@r G40aa@mr) ((lambda (G40b0@t) ((lambda (G40b2@ls/false) (if G40b2@ls/false (apply (lambda (G40b4@x*) (begin (G3093@verify-formals G40a7@fmls G40a6@stx) ((lambda (G40b6@lex* G40b7@lab*) (values G40b6@lex* (G30a5@chi-internal (G2e14@add-subst (G2de1@make-full-rib G40b4@x* G40b7@lab*) G40a8@body*) (G3003@add-lexicals G40b7@lab* G40b6@lex* G40a9@r) G40aa@mr))) (map G2da0@gen-lexical G40b4@x*) (map G2da4@gen-label G40b4@x*)))) G40b2@ls/false) ((lambda (G40ba@t) ((lambda (G40bc@ls/false) (if G40bc@ls/false (apply (lambda (G40be@x* G40bf@x) (begin (G3093@verify-formals G40a7@fmls G40a6@stx) ((lambda (G40c2@lex* G40c3@lab* G40c4@lex G40c5@lab) (values (append G40c2@lex* G40c4@lex) (G30a5@chi-internal (G2e14@add-subst (G2de1@make-full-rib (cons G40bf@x G40be@x*) (cons G40c5@lab G40c3@lab*)) G40a8@body*) (G3003@add-lexicals (cons G40c5@lab G40c3@lab*) (cons G40c4@lex G40c2@lex*) G40a9@r) G40aa@mr))) (map G2da0@gen-lexical G40be@x*) (map G2da4@gen-label G40be@x*) (G2da0@gen-lexical G40bf@x) (G2da4@gen-label G40bf@x)))) G40bc@ls/false) ((lambda (G40ca@t) ((lambda (G40cc@ls/false) (if G40cc@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid syntax" G40a7@fmls)) G40cc@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G40ca@t))) (G306b@syntax-dispatch G40ca@t '_))) G40ba@t))) (G306b@syntax-dispatch G40ba@t '#(each+ any () any)))) G40b0@t))) (G306b@syntax-dispatch G40b0@t 'each-any))) G40a7@fmls))) (set! G3097@chi-lambda-clause* (lambda (G40ce@stx G40cf@fmls* G40d0@body** G40d1@r G40d2@mr) (if (null? G40cf@fmls*) (values '() '()) (call-with-values (lambda () (G3095@chi-lambda-clause G40ce@stx (car G40cf@fmls*) (car G40d0@body**) G40d1@r G40d2@mr)) (lambda (G40da@G40d8 G40db@G40d9) ((lambda (G40de@b G40df@a) (call-with-values (lambda () (G3097@chi-lambda-clause* G40ce@stx (cdr G40cf@fmls*) (cdr G40d0@body**) G40d1@r G40d2@mr)) (lambda (G40e4@G40e2 G40e5@G40e3) ((lambda (G40e8@b* G40e9@a*) (values (cons G40df@a G40e9@a*) (cons G40de@b G40e8@b*))) G40e5@G40e3 G40e4@G40e2)))) G40db@G40d9 G40da@G40d8)))))) (set! G3099@chi-defun (lambda (G40ec@x G40ed@r G40ee@mr) ((lambda (G40f2@fmls G40f3@body*) (call-with-values (lambda () (G3095@chi-lambda-clause G40f2@fmls G40f2@fmls G40f3@body* G40ed@r G40ee@mr)) (lambda (G40f8@G40f6 G40f9@G40f7) ((lambda (G40fc@body G40fd@fmls) (G2d80@G2ca8@build-lambda '#f G40fd@fmls G40fc@body)) G40f9@G40f7 G40f8@G40f6)))) (car G40ec@x) (cdr G40ec@x)))) (set! G309b@chi-rhs (lambda (G4100@rhs G4101@r G4102@mr) ((lambda (G4106@t) (if (memv G4106@t '(defun)) (G3099@chi-defun (cdr G4100@rhs) G4101@r G4102@mr) (if (memv G4106@t '(expr)) ((lambda (G4108@expr) (G308f@chi-expr G4108@expr G4101@r G4102@mr)) (cdr G4100@rhs)) (if (memv G4106@t '(top-expr)) ((lambda (G410a@expr) (G2d83@G2cf4@build-sequence '#f (list (G308f@chi-expr G410a@expr G4101@r G4102@mr) (G2d84@G2cf6@build-void)))) (cdr G4100@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G4100@rhs))))) (car G4100@rhs)))) (set! G309d@expand-interaction-rhs*/init* (lambda (G410c@lhs* G410d@rhs* G410e@init* G410f@r G4110@mr) ((letrec ((G4116@f (lambda (G4118@lhs* G4119@rhs*) (if (null? G4118@lhs*) (map (lambda (G411c@x) (G308f@chi-expr G411c@x G410f@r G4110@mr)) G410e@init*) ((lambda (G411e@lhs G411f@rhs) ((lambda (G4122@t) (if (memv G4122@t '(defun)) ((lambda (G4124@rhs) (cons (list 'set! G411e@lhs G4124@rhs) (G4116@f (cdr G4118@lhs*) (cdr G4119@rhs*)))) (G3099@chi-defun (cdr G411f@rhs) G410f@r G4110@mr)) (if (memv G4122@t '(expr)) ((lambda (G4126@rhs) (cons (list 'set! G411e@lhs G4126@rhs) (G4116@f (cdr G4118@lhs*) (cdr G4119@rhs*)))) (G308f@chi-expr (cdr G411f@rhs) G410f@r G4110@mr)) (if (memv G4122@t '(top-expr)) ((lambda (G4128@e) (cons G4128@e (G4116@f (cdr G4118@lhs*) (cdr G4119@rhs*)))) (G308f@chi-expr (cdr G411f@rhs) G410f@r G4110@mr)) (error 'expand-interaction '"invallid" G411f@rhs))))) (car G411f@rhs))) (car G4118@lhs*) (car G4119@rhs*)))))) G4116@f) G410c@lhs* G410d@rhs*))) (set! G309f@chi-rhs* (lambda (G412a@rhs* G412b@r G412c@mr) ((letrec ((G4130@f (lambda (G4132@ls) (if (null? G4132@ls) '() ((lambda (G4134@a) (cons G4134@a (G4130@f (cdr G4132@ls)))) (G309b@chi-rhs (car G4132@ls) G412b@r G412c@mr)))))) G4130@f) G412a@rhs*))) (set! G30a1@find-bound=? (lambda (G4136@x G4137@lhs* G4138@rhs*) (if (null? G4137@lhs*) '#f (if (G2e2e@bound-id=? G4136@x (car G4137@lhs*)) (car G4138@rhs*) (G30a1@find-bound=? G4136@x (cdr G4137@lhs*) (cdr G4138@rhs*)))))) (set! G30a3@find-dups (lambda (G413c@ls) ((letrec ((G413e@f (lambda (G4140@ls G4141@dups) (if (null? G4140@ls) G4141@dups ((lambda (G4144@t) (if G4144@t ((lambda (G4146@x) (G413e@f (cdr G4140@ls) (cons (list (car G4140@ls) G4146@x) G4141@dups))) G4144@t) (G413e@f (cdr G4140@ls) G4141@dups))) (G30a1@find-bound=? (car G4140@ls) (cdr G4140@ls) (cdr G4140@ls))))))) G413e@f) G413c@ls '()))) (set! G30a5@chi-internal (lambda (G4148@e* G4149@r G414a@mr) ((lambda (G414e@rib) (call-with-values (lambda () (G30ca@chi-body* (map (lambda (G4158@x) (G2e14@add-subst G414e@rib G4158@x)) (G2e26@syntax->list G4148@e*)) G4149@r G414a@mr '() '() '() '() '() G414e@rib '#f)) (lambda (G415a@G4150 G415b@G4151 G415c@G4152 G415d@G4153 G415e@G4154 G415f@G4155 G4160@G4156 G4161@G4157) ((lambda (G416a@_exp* G416b@kwd* G416c@mod** G416d@rhs* G416e@lex* G416f@mr G4170@r G4171@e*) (begin (if (null? G4171@e*) (G315e@syntax-violation '#f '"no expression in body" G4171@e*) (void)) ((lambda (G417a@init*) ((lambda (G417c@rhs*) ((lambda () (G2d86@G2cfa@build-letrec* '#f (reverse G416e@lex*) (reverse G417c@rhs*) (G2d83@G2cf4@build-sequence '#f G417a@init*))))) (G309f@chi-rhs* G416d@rhs* G4170@r G416f@mr))) (G308b@chi-expr* (append (apply append (reverse G416c@mod**)) G4171@e*) G4170@r G416f@mr)))) G4161@G4157 G4160@G4156 G415f@G4155 G415e@G4154 G415d@G4153 G415c@G4152 G415b@G4151 G415a@G4150)))) (G2dd1@make-empty-rib)))) (set! G30a7@parse-module (lambda (G417e@e) ((lambda (G4180@t) ((lambda (G4182@ls/false) (if G4182@ls/false (apply (lambda (G4184@export* G4185@b*) (begin (if (not (for-all G2e28@id? G4184@export*)) (G315e@syntax-violation '#f '"module exports must be identifiers" G417e@e) (void)) (values '#f (list->vector G4184@export*) G4185@b*))) G4182@ls/false) ((lambda (G4188@t) ((lambda (G418a@ls/false) (if G418a@ls/false (apply (lambda (G418c@name G418d@export* G418e@b*) (begin (if (not (G2e28@id? G418c@name)) (G315e@syntax-violation '#f '"module name must be an identifier" G417e@e) (void)) (if (not (for-all G2e28@id? G418d@export*)) (G315e@syntax-violation '#f '"module exports must be identifiers" G417e@e) (void)) (values G418c@name (list->vector G418d@export*) G418e@b*))) G418a@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G4188@t))) (G306b@syntax-dispatch G4188@t '(_ any each-any . each-any)))) G4180@t))) (G306b@syntax-dispatch G4180@t '(_ each-any . each-any)))) G417e@e))) (set! G30ad@G30a8 (make-record-type-descriptor 'module-interface '#f 'G30ab '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30af@G30aa '#f) (set! G30b1@G30a9 (make-record-constructor-descriptor G30ad@G30a8 '#f G30af@G30aa)) (set! G30b6@module-interface? (record-predicate G30ad@G30a8)) (set! G30b8@make-module-interface (record-constructor G30b1@G30a9)) (set! G30ba@module-interface-first-mark (record-accessor G30ad@G30a8 '0)) (set! G30bc@module-interface-exp-id-vec (record-accessor G30ad@G30a8 '1)) (set! G30be@module-interface-exp-lab-vec (record-accessor G30ad@G30a8 '2)) (set! G30c0@set-module-interface-first-mark! (record-mutator G30ad@G30a8 '0)) (set! G30c2@set-module-interface-exp-id-vec! (record-mutator G30ad@G30a8 '1)) (set! G30c4@set-module-interface-exp-lab-vec! (record-mutator G30ad@G30a8 '2)) (set! G30c6@module-interface-exp-id* (lambda (G4192@iface G4193@id) ((lambda (G4197@diff-marks) (begin (set! G4197@diff-marks (lambda (G419e@ls G419f@x) (begin (if (null? G419e@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G41a2@a) (if (eq? G41a2@a G419f@x) '() (cons G41a2@a (G4197@diff-marks (cdr G419e@ls) G419f@x)))) (car G419e@ls))))) ((lambda (G4198@diff G4199@id-vec) (if (null? G4198@diff) G4199@id-vec (vector-map (lambda (G419c@x) (G2df2@make-stx (G2df4@stx-expr G419c@x) (append G4198@diff (G2df6@stx-mark* G419c@x)) '() '())) G4199@id-vec))) (G4197@diff-marks (G2df6@stx-mark* G4193@id) (G30ba@module-interface-first-mark G4192@iface)) (G30bc@module-interface-exp-id-vec G4192@iface)))) '#f))) (set! G30c8@chi-internal-module (lambda (G41a4@e G41a5@r G41a6@mr G41a7@lex* G41a8@rhs* G41a9@mod** G41aa@kwd*) (call-with-values (lambda () (G30a7@parse-module G41a4@e)) (lambda (G41b5@G41b2 G41b6@G41b3 G41b7@G41b4) ((lambda (G41bb@e* G41bc@exp-id* G41bd@name) ((lambda (G41c1@rib) ((lambda (G41c3@e*) ((lambda () (call-with-values (lambda () (G30ca@chi-body* G41c3@e* G41a5@r G41a6@mr G41a7@lex* G41a8@rhs* G41a9@mod** G41aa@kwd* '() G41c1@rib '#f)) (lambda (G41cd@G41c5 G41ce@G41c6 G41cf@G41c7 G41d0@G41c8 G41d1@G41c9 G41d2@G41ca G41d3@G41cb G41d4@G41cc) ((lambda (G41dd@_exp* G41de@kwd* G41df@mod** G41e0@rhs* G41e1@lex* G41e2@mr G41e3@r G41e4@e*) ((lambda (G41ed@exp-lab* G41ee@mod**) (if (not G41bd@name) (values G41e1@lex* G41e0@rhs* G41bc@exp-id* G41ed@exp-lab* G41e3@r G41e2@mr G41ee@mod** G41de@kwd*) ((lambda (G41f1@lab G41f2@iface) (values G41e1@lex* G41e0@rhs* (vector G41bd@name) (vector G41f1@lab) (cons (cons G41f1@lab (cons '$module G41f2@iface)) G41e3@r) (cons (cons G41f1@lab (cons '$module G41f2@iface)) G41e2@mr) G41ee@mod** G41de@kwd*)) (G2da4@gen-label 'module) (G30b8@make-module-interface (car (G2df6@stx-mark* G41bd@name)) (vector-map (lambda (G41f5@x) (G2df2@make-stx (G2df4@stx-expr G41f5@x) (G2df6@stx-mark* G41f5@x) '() '())) G41bc@exp-id*) G41ed@exp-lab*)))) (vector-map (lambda (G41f7@x) ((lambda (G41f9@t) (if G41f9@t G41f9@t (begin '#f (G315e@syntax-violation '#f '"cannot find module export" G41f7@x)))) (G2e42@id->label (G2df2@make-stx (G2e2a@id->sym G41f7@x) (G2df6@stx-mark* G41f7@x) (list G41c1@rib) '())))) G41bc@exp-id*) (cons G41e4@e* G41df@mod**))) G41d4@G41cc G41d3@G41cb G41d2@G41ca G41d1@G41c9 G41d0@G41c8 G41cf@G41c7 G41ce@G41c6 G41cd@G41c5)))))) (map (lambda (G41fb@x) (G2e14@add-subst G41c1@rib G41fb@x)) (G2e26@syntax->list G41bb@e*)))) (G2dd1@make-empty-rib))) G41b7@G41b4 G41b6@G41b3 G41b5@G41b2))))) (set! G30ca@chi-body* (lambda (G41fd@e* G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4203@kwd* G4204@exp* G4205@rib G4206@top?) (if (null? G41fd@e*) (values G41fd@e* G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4203@kwd* G4204@exp*) ((lambda (G4211@e) (call-with-values (lambda () (G2e50@syntax-type G4211@e G41fe@r)) (lambda (G4216@G4213 G4217@G4214 G4218@G4215) ((lambda (G421c@kwd G421d@value G421e@type) ((lambda (G4222@kwd*) ((lambda (G4224@t) (if (memv G4224@t '(define)) (call-with-values (lambda () (G2ff3@parse-define G4211@e)) (lambda (G4228@G4226 G4229@G4227) ((lambda (G422c@rhs G422d@id) (begin (if (G2e36@bound-id-member? G422d@id G4222@kwd*) (G315e@syntax-violation '#f '"cannot redefine keyword" G4211@e) (void)) (call-with-values (lambda () (G2da8@gen-define-label+loc G422d@id G4205@rib)) (lambda (G4232@G4230 G4233@G4231) ((lambda (G4236@lex G4237@lab) (begin (G2dd7@extend-rib! G4205@rib G422d@id G4237@lab) (G30ca@chi-body* (cdr G41fd@e*) (G3001@add-lexical G4237@lab G4236@lex G41fe@r) G41ff@mr (cons G4236@lex G4200@lex*) (cons G422c@rhs G4201@rhs*) G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?))) G4233@G4231 G4232@G4230))))) G4229@G4227 G4228@G4226))) (if (memv G4224@t '(define-syntax)) (call-with-values (lambda () (G2ff5@parse-define-syntax G4211@e)) (lambda (G423c@G423a G423d@G423b) ((lambda (G4240@rhs G4241@id) (begin (if (G2e36@bound-id-member? G4241@id G4222@kwd*) (G315e@syntax-violation '#f '"cannot redefine keyword" G4211@e) (void)) ((lambda (G4244@lab G4245@expanded-rhs) (begin (G2dd7@extend-rib! G4205@rib G4241@id G4244@lab) ((lambda (G4248@b) (G30ca@chi-body* (cdr G41fd@e*) (cons (cons G4244@lab G4248@b) G41fe@r) (cons (cons G4244@lab G4248@b) G41ff@mr) G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?)) (G2e6f@make-eval-transformer G4245@expanded-rhs)))) (G2daa@gen-define-label G4241@id G4205@rib) (G30cc@expand-transformer G4240@rhs G41ff@mr)))) G423d@G423b G423c@G423a))) (if (memv G4224@t '(let-syntax letrec-syntax)) ((lambda (G424a@t) ((lambda (G424c@ls/false) (if (if G424c@ls/false (begin '#f (apply (lambda (G424e@xlhs* G424f@xrhs* G4250@xbody*) (if (not (G2e32@valid-bound-ids? G424e@xlhs*)) (G315e@syntax-violation '#f '"invalid identifiers" G4211@e) (void))) G424c@ls/false)) '#f) (apply (lambda (G4254@xlhs* G4255@xrhs* G4256@xbody*) ((lambda (G425a@xlab*) ((lambda (G425c@xrib) ((lambda (G425e@xb*) ((lambda () (G30ca@chi-body* (append (map (lambda (G4260@x) (G2e14@add-subst G425c@xrib G4260@x)) G4256@xbody*) (cdr G41fd@e*)) (append (map cons G425a@xlab* G425e@xb*) G41fe@r) (append (map cons G425a@xlab* G425e@xb*) G41ff@mr) G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?)))) (map (lambda (G4262@x) (G2e6f@make-eval-transformer (G30cc@expand-transformer (if (eq? G421e@type 'let-syntax) G4262@x (G2e14@add-subst G425c@xrib G4262@x)) G41ff@mr))) G4255@xrhs*))) (G2de1@make-full-rib G4254@xlhs* G425a@xlab*))) (map G2da4@gen-label G4254@xlhs*))) G424c@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G424a@t))) (G306b@syntax-dispatch G424a@t '(_ #(each (any any)) . each-any)))) G4211@e) (if (memv G4224@t '(begin)) ((lambda (G4264@t) ((lambda (G4266@ls/false) (if G4266@ls/false (apply (lambda (G4268@x*) (G30ca@chi-body* (append G4268@x* (cdr G41fd@e*)) G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?)) G4266@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G4264@t))) (G306b@syntax-dispatch G4264@t '(_ . each-any)))) G4211@e) (if (memv G4224@t '(global-macro global-macro!)) (G30ca@chi-body* (cons (G2e14@add-subst G4205@rib (G3089@chi-global-macro G421d@value G4211@e)) (cdr G41fd@e*)) G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?) (if (memv G4224@t '(local-macro local-macro!)) (G30ca@chi-body* (cons (G2e14@add-subst G4205@rib (G3087@chi-local-macro G421d@value G4211@e)) (cdr G41fd@e*)) G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?) (if (memv G4224@t '(macro macro!)) (G30ca@chi-body* (cons (G2e14@add-subst G4205@rib (G3085@chi-macro G421d@value G4211@e)) (cdr G41fd@e*)) G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?) (if (memv G4224@t '(module)) (call-with-values (lambda () (G30c8@chi-internal-module G4211@e G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4222@kwd*)) (lambda (G4272@G426a G4273@G426b G4274@G426c G4275@G426d G4276@G426e G4277@G426f G4278@G4270 G4279@G4271) ((lambda (G4282@kwd* G4283@mod** G4284@mr G4285@r G4286@m-exp-lab* G4287@m-exp-id* G4288@rhs* G4289@lex*) (begin (vector-for-each (lambda (G4292@id G4293@lab) (G2dd7@extend-rib! G4205@rib G4292@id G4293@lab)) G4287@m-exp-id* G4286@m-exp-lab*) (G30ca@chi-body* (cdr G41fd@e*) G4285@r G4284@mr G4289@lex* G4288@rhs* G4283@mod** G4282@kwd* G4204@exp* G4205@rib G4206@top?))) G4279@G4271 G4278@G4270 G4277@G426f G4276@G426e G4275@G426d G4274@G426c G4273@G426b G4272@G426a))) (if (memv G4224@t '(library)) (begin (G313e@library-expander (G2e3e@stx->datum G4211@e)) (G30ca@chi-body* (cdr G41fd@e*) G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?)) (if (memv G4224@t '(export)) ((lambda (G4296@t) ((lambda (G4298@ls/false) (if G4298@ls/false (apply (lambda (G429a@exp-decl*) (G30ca@chi-body* (cdr G41fd@e*) G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* (append G429a@exp-decl* G4204@exp*) G4205@rib G4206@top?)) G4298@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G4296@t))) (G306b@syntax-dispatch G4296@t '(_ . each-any)))) G4211@e) (if (memv G4224@t '(import)) ((lambda () ((lambda (G429d@module-import? G429f@module-import G42a1@library-import) (begin (set! G429d@module-import? (lambda (G42e9@e) ((lambda (G42eb@t) ((lambda (G42ed@ls/false) (if (if G42ed@ls/false (begin '#f (apply (lambda (G42ef@id) (G2e28@id? G42ef@id)) G42ed@ls/false)) '#f) (apply (lambda (G42f1@id) '#t) G42ed@ls/false) ((lambda (G42f3@t) ((lambda (G42f5@ls/false) (if G42f5@ls/false (apply (lambda (G42f7@imp*) '#f) G42f5@ls/false) ((lambda (G42f9@t) ((lambda (G42fb@ls/false) (if G42fb@ls/false (apply (lambda () (G315e@syntax-violation '#f '"malformed import form" G42e9@e)) G42fb@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G42f9@t))) (G306b@syntax-dispatch G42f9@t '_))) G42f3@t))) (G306b@syntax-dispatch G42f3@t '(_ . each-any)))) G42eb@t))) (G306b@syntax-dispatch G42eb@t '(_ any)))) G42e9@e))) (set! G429f@module-import (lambda (G42ca@e G42cb@r) ((lambda (G42ce@t) ((lambda (G42d0@ls/false) (if (if G42d0@ls/false (begin '#f (apply (lambda (G42d2@id) (G2e28@id? G42d2@id)) G42d0@ls/false)) '#f) (apply (lambda (G42d4@id) (call-with-values (lambda () (G2e50@syntax-type G42d4@id G42cb@r)) (lambda (G42d9@G42d6 G42da@G42d7 G42db@G42d8) ((lambda (G42df@kwd G42e0@value G42e1@type) ((lambda (G42e5@t) (if (memv G42e5@t '($module)) ((lambda (G42e7@iface) (values (G30c6@module-interface-exp-id* G42e7@iface G42d4@id) (G30be@module-interface-exp-lab-vec G42e7@iface))) G42e0@value) (G315e@syntax-violation '#f '"invalid import" G42ca@e))) G42e1@type)) G42db@G42d8 G42da@G42d7 G42d9@G42d6)))) G42d0@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G42ce@t))) (G306b@syntax-dispatch G42ce@t '(_ any)))) G42ca@e))) (set! G42a1@library-import (lambda (G42b0@e) ((lambda (G42b2@t) ((lambda (G42b4@ls/false) (if G42b4@ls/false (apply (lambda (G42b6@ctxt G42b7@imp*) (call-with-values (lambda () (G30d4@parse-import-spec* (G3164@syntax->datum G42b7@imp*))) (lambda (G42bc@G42ba G42bd@G42bb) ((lambda (G42c0@subst-labels G42c1@subst-names) (values (vector-map (lambda (G42c4@name) (G2e06@datum->stx G42b6@ctxt G42c4@name)) G42c1@subst-names) G42c0@subst-labels)) G42bd@G42bb G42bc@G42ba)))) G42b4@ls/false) ((lambda (G42c6@t) ((lambda (G42c8@ls/false) (if G42c8@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid import form" G42b0@e)) G42c8@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G42c6@t))) (G306b@syntax-dispatch G42c6@t '_))) G42b2@t))) (G306b@syntax-dispatch G42b2@t '(any . each-any)))) G42b0@e))) (begin (call-with-values (lambda () (if (G429d@module-import? G4211@e) (G429f@module-import G4211@e G41fe@r) (G42a1@library-import G4211@e))) (lambda (G42a4@G42a2 G42a5@G42a3) ((lambda (G42a8@lab* G42a9@id*) (vector-for-each (lambda (G42ac@id G42ad@lab) (G2dd7@extend-rib! G4205@rib G42ac@id G42ad@lab)) G42a9@id* G42a8@lab*)) G42a5@G42a3 G42a4@G42a2))) (G30ca@chi-body* (cdr G41fd@e*) G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?)))) '#f '#f '#f))) (if G4206@top? (G30ca@chi-body* (cdr G41fd@e*) G41fe@r G41ff@mr (cons (G2da0@gen-lexical 'dummy) G4200@lex*) (cons (cons 'top-expr G4211@e) G4201@rhs*) G4202@mod** G4222@kwd* G4204@exp* G4205@rib G4206@top?) (values G41fd@e* G41fe@r G41ff@mr G4200@lex* G4201@rhs* G4202@mod** G4222@kwd* G4204@exp*)))))))))))))) G421e@type)) (if (G2e28@id? G421c@kwd) (cons G421c@kwd G4203@kwd*) G4203@kwd*))) G4218@G4215 G4217@G4214 G4216@G4213)))) (car G41fd@e*))))) (set! G30cc@expand-transformer (lambda (G42fd@expr G42fe@r) ((lambda (G4301@rtc) ((lambda (G4303@expanded-rhs) (begin (for-each ((lambda (G4305@mark-visit) (lambda (G4307@x) (begin (G2c1d@G2ab2@invoke-library G4307@x) (G4305@mark-visit G4307@x)))) (G30dc@vis-collector)) (G4301@rtc)) G4303@expanded-rhs)) ((lambda (G430d@G4309@inv-collector G430e@G430a@vis-collector G430f@G430b@inv-collector G4310@G430c@vis-collector) ((lambda (G4315@swap) (dynamic-wind G4315@swap (lambda () (G308f@chi-expr G42fd@expr G42fe@r G42fe@r)) G4315@swap)) (lambda () (begin ((lambda (G4317@t) (begin (G430d@G4309@inv-collector G430f@G430b@inv-collector) (set! G430f@G430b@inv-collector G4317@t))) (G430d@G4309@inv-collector)) ((lambda (G4319@t) (begin (G430e@G430a@vis-collector G4310@G430c@vis-collector) (set! G4310@G430c@vis-collector G4319@t))) (G430e@G430a@vis-collector)))))) G30da@inv-collector G30dc@vis-collector G4301@rtc (lambda (G431b@x) (values))))) (G30d8@make-collector)))) (set! G30ce@parse-exports (lambda (G431d@exp*) ((letrec ((G431f@f (lambda (G4321@exp* G4322@int* G4323@ext*) (if (null? G4321@exp*) (begin (if (not (G2e32@valid-bound-ids? G4323@ext*)) (G315e@syntax-violation 'export '"invalid exports" (G30a3@find-dups G4323@ext*)) (void)) (values (map G3164@syntax->datum G4323@ext*) G4322@int*)) ((lambda (G4327@t) ((lambda (G4329@ls/false) (if G4329@ls/false (apply (lambda (G432b@rename G432c@i* G432d@e*) (begin (if (not (if (eq? (G3164@syntax->datum G432b@rename) 'rename) (if (for-all G2e28@id? G432c@i*) (begin '#f (for-all G2e28@id? G432d@e*)) '#f) '#f)) (G315e@syntax-violation 'export '"invalid export specifier" (car G4321@exp*)) (void)) (G431f@f (cdr G4321@exp*) (append G432c@i* G4322@int*) (append G432d@e* G4323@ext*)))) G4329@ls/false) ((lambda (G4331@t) ((lambda (G4333@ls/false) (if G4333@ls/false (apply (lambda (G4335@ie) (begin (if (not (G2e28@id? G4335@ie)) (G315e@syntax-violation 'export '"invalid export" G4335@ie) (void)) (G431f@f (cdr G4321@exp*) (cons G4335@ie G4322@int*) (cons G4335@ie G4323@ext*)))) G4333@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G4331@t))) (G306b@syntax-dispatch G4331@t 'any))) G4327@t))) (G306b@syntax-dispatch G4327@t '(any . #(each (any any)))))) (car G4321@exp*)))))) G431f@f) G431d@exp* '() '()))) (set! G30d0@parse-library-name (lambda (G4337@spec) ((lambda (G433a@parse) (begin (set! G433a@parse (lambda (G4345@x) ((lambda (G4347@t) ((lambda (G4349@ls/false) (if (if G4349@ls/false (begin '#f (apply (lambda (G434b@v*) (for-all (lambda (G434d@x) ((lambda (G434f@x) (if (integer? G434f@x) (begin '#f (exact? G434f@x)) '#f)) (G3164@syntax->datum G434d@x))) G434b@v*)) G4349@ls/false)) '#f) (apply (lambda (G4351@v*) (values '() (map G3164@syntax->datum G4351@v*))) G4349@ls/false) ((lambda (G4353@t) ((lambda (G4355@ls/false) (if (if G4355@ls/false (begin '#f (apply (lambda (G4357@x G4358@rest) (symbol? (G3164@syntax->datum G4357@x))) G4355@ls/false)) '#f) (apply (lambda (G435b@x G435c@rest) (call-with-values (lambda () (G433a@parse G435c@rest)) (lambda (G4361@G435f G4362@G4360) ((lambda (G4365@v* G4366@x*) (values (cons (G3164@syntax->datum G435b@x) G4366@x*) G4365@v*)) G4362@G4360 G4361@G435f)))) G4355@ls/false) ((lambda (G4369@t) ((lambda (G436b@ls/false) (if G436b@ls/false (apply (lambda () (values '() '())) G436b@ls/false) ((lambda (G436d@t) ((lambda (G436f@ls/false) (if G436f@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid library name" G4337@spec)) G436f@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G436d@t))) (G306b@syntax-dispatch G436d@t '_))) G4369@t))) (G306b@syntax-dispatch G4369@t '()))) G4353@t))) (G306b@syntax-dispatch G4353@t '(any . any)))) G4347@t))) (G306b@syntax-dispatch G4347@t '(each-any)))) G4345@x))) (call-with-values (lambda () (G433a@parse G4337@spec)) (lambda (G433d@G433b G433e@G433c) ((lambda (G4341@ver* G4342@name*) (begin (if (null? G4342@name*) (G315e@syntax-violation '#f '"empty library name" G4337@spec) (void)) (values G4342@name* G4341@ver*))) G433e@G433c G433d@G433b))))) '#f))) (set! G30d2@parse-library (lambda (G4371@e) ((lambda (G4373@t) ((lambda (G4375@ls/false) (if (if G4375@ls/false (begin '#f (apply (lambda (G4377@library G4378@name* G4379@export G437a@exp* G437b@import G437c@imp* G437d@b*) (if (eq? (G3164@syntax->datum G4379@export) 'export) (if (eq? (G3164@syntax->datum G437b@import) 'import) (begin '#f (eq? (G3164@syntax->datum G4377@library) 'library)) '#f) '#f)) G4375@ls/false)) '#f) (apply (lambda (G4385@library G4386@name* G4387@export G4388@exp* G4389@import G438a@imp* G438b@b*) (values G4386@name* G4388@exp* G438a@imp* G438b@b*)) G4375@ls/false) ((lambda (G4393@t) ((lambda (G4395@ls/false) (if G4395@ls/false (apply (lambda () (G315e@syntax-violation '#f '"malformed library" G4371@e)) G4395@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G4393@t))) (G306b@syntax-dispatch G4393@t '_))) G4373@t))) (G306b@syntax-dispatch G4373@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4371@e))) (set! G30d4@parse-import-spec* ((lambda () ((lambda (G4398@idsyn? G439a@dup-error G439c@merge-substs G439e@exclude* G43a0@find* G43a2@rem* G43a4@remove-dups G43a6@parse-library-name G43a8@import-library G43aa@get-import G43ac@add-imports!) (begin (set! G4398@idsyn? (lambda (G4597@x) (symbol? (G3164@syntax->datum G4597@x)))) (set! G439a@dup-error (lambda (G4595@name) (G315e@syntax-violation 'import '"two imports with different bindings" G4595@name))) (set! G439c@merge-substs (lambda (G4583@s G4584@subst) ((lambda (G4588@insert-to-subst) (begin (set! G4588@insert-to-subst (lambda (G4589@a G458a@subst) ((lambda (G458d@name G458e@label) ((lambda (G4591@t) (if G4591@t ((lambda (G4593@x) (if (eq? (cdr G4593@x) G458e@label) G458a@subst (G439a@dup-error G458d@name))) G4591@t) (cons G4589@a G458a@subst))) (assq G458d@name G458a@subst))) (car G4589@a) (cdr G4589@a)))) (if (null? G4583@s) G4584@subst (G4588@insert-to-subst (car G4583@s) (G439c@merge-substs (cdr G4583@s) G4584@subst))))) '#f))) (set! G439e@exclude* (lambda (G4559@sym* G455a@subst) ((lambda (G455e@exclude) (begin (set! G455e@exclude (lambda (G4573@sym G4574@subst) (if (null? G4574@subst) (G315e@syntax-violation 'import '"cannot rename unbound identifier" G4573@sym) (if (eq? G4573@sym (caar G4574@subst)) (values (cdar G4574@subst) (cdr G4574@subst)) ((lambda (G4577@a) (call-with-values (lambda () (G455e@exclude G4573@sym (cdr G4574@subst))) (lambda (G457b@G4579 G457c@G457a) ((lambda (G457f@subst G4580@old) (values G4580@old (cons G4577@a G457f@subst))) G457c@G457a G457b@G4579)))) (car G4574@subst)))))) (if (null? G4559@sym*) (values '() G455a@subst) (call-with-values (lambda () (G455e@exclude (car G4559@sym*) G455a@subst)) (lambda (G4561@G455f G4562@G4560) ((lambda (G4565@subst G4566@old) (call-with-values (lambda () (G439e@exclude* (cdr G4559@sym*) G4565@subst)) (lambda (G456b@G4569 G456c@G456a) ((lambda (G456f@subst G4570@old*) (values (cons G4566@old G4570@old*) G456f@subst)) G456c@G456a G456b@G4569)))) G4562@G4560 G4561@G455f)))))) '#f))) (set! G43a0@find* (lambda (G4551@sym* G4552@subst) (map (lambda (G4555@x) ((lambda (G4557@t) (if G4557@t (cdr G4557@t) (G315e@syntax-violation 'import '"cannot find identifier" G4555@x))) (assq G4555@x G4552@subst))) G4551@sym*))) (set! G43a2@rem* (lambda (G4549@sym* G454a@subst) ((letrec ((G454d@f (lambda (G454f@subst) (if (null? G454f@subst) '() (if (memq (caar G454f@subst) G4549@sym*) (G454d@f (cdr G454f@subst)) (cons (car G454f@subst) (G454d@f (cdr G454f@subst)))))))) G454d@f) G454a@subst))) (set! G43a4@remove-dups (lambda (G4547@ls) (if (null? G4547@ls) '() (if (memq (car G4547@ls) (cdr G4547@ls)) (G43a4@remove-dups (cdr G4547@ls)) (cons (car G4547@ls) (G43a4@remove-dups (cdr G4547@ls))))))) (set! G43a6@parse-library-name (lambda (G4461@spec) ((lambda (G4464@subversion? G4466@subversion-pred G4468@version-pred) (begin (set! G4464@subversion? (lambda (G4543@x) ((lambda (G4545@x) (if (integer? G4545@x) (if (exact? G4545@x) (begin '#f (>= G4545@x '0)) '#f) '#f)) (G3164@syntax->datum G4543@x)))) (set! G4466@subversion-pred (lambda (G44e3@x*) ((lambda (G44e5@t) ((lambda (G44e7@ls/false) (if (if G44e7@ls/false (begin '#f (apply (lambda (G44e9@n) (G4464@subversion? G44e9@n)) G44e7@ls/false)) '#f) (apply (lambda (G44eb@n) (lambda (G44ed@x) (= G44ed@x (G3164@syntax->datum G44eb@n)))) G44e7@ls/false) ((lambda (G44ef@t) ((lambda (G44f1@ls/false) (if (if G44f1@ls/false (begin '#f (apply (lambda (G44f3@p? G44f4@sub*) (eq? (G3164@syntax->datum G44f3@p?) 'and)) G44f1@ls/false)) '#f) (apply (lambda (G44f7@p? G44f8@sub*) ((lambda (G44fb@p*) (lambda (G44fd@x) (for-all (lambda (G44ff@p) (G44ff@p G44fd@x)) G44fb@p*))) (map G4466@subversion-pred G44f8@sub*))) G44f1@ls/false) ((lambda (G4501@t) ((lambda (G4503@ls/false) (if (if G4503@ls/false (begin '#f (apply (lambda (G4505@p? G4506@sub*) (eq? (G3164@syntax->datum G4505@p?) 'or)) G4503@ls/false)) '#f) (apply (lambda (G4509@p? G450a@sub*) ((lambda (G450d@p*) (lambda (G450f@x) (exists (lambda (G4511@p) (G4511@p G450f@x)) G450d@p*))) (map G4466@subversion-pred G450a@sub*))) G4503@ls/false) ((lambda (G4513@t) ((lambda (G4515@ls/false) (if (if G4515@ls/false (begin '#f (apply (lambda (G4517@p? G4518@sub) (eq? (G3164@syntax->datum G4517@p?) 'not)) G4515@ls/false)) '#f) (apply (lambda (G451b@p? G451c@sub) ((lambda (G451f@p) (lambda (G4521@x) (not (G451f@p G4521@x)))) (G4466@subversion-pred G451c@sub))) G4515@ls/false) ((lambda (G4523@t) ((lambda (G4525@ls/false) (if (if G4525@ls/false (begin '#f (apply (lambda (G4527@p? G4528@n) (if (eq? (G3164@syntax->datum G4527@p?) '<=) (begin '#f (G4464@subversion? G4528@n)) '#f)) G4525@ls/false)) '#f) (apply (lambda (G452b@p? G452c@n) (lambda (G452f@x) (<= G452f@x (G3164@syntax->datum G452c@n)))) G4525@ls/false) ((lambda (G4531@t) ((lambda (G4533@ls/false) (if (if G4533@ls/false (begin '#f (apply (lambda (G4535@p? G4536@n) (if (eq? (G3164@syntax->datum G4535@p?) '>=) (begin '#f (G4464@subversion? G4536@n)) '#f)) G4533@ls/false)) '#f) (apply (lambda (G4539@p? G453a@n) (lambda (G453d@x) (>= G453d@x (G3164@syntax->datum G453a@n)))) G4533@ls/false) ((lambda (G453f@t) ((lambda (G4541@ls/false) (if G4541@ls/false (apply (lambda () (G315e@syntax-violation 'import '"invalid sub-version spec" G4461@spec G44e3@x*)) G4541@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G453f@t))) (G306b@syntax-dispatch G453f@t '_))) G4531@t))) (G306b@syntax-dispatch G4531@t '(any any)))) G4523@t))) (G306b@syntax-dispatch G4523@t '(any any)))) G4513@t))) (G306b@syntax-dispatch G4513@t '(any any)))) G4501@t))) (G306b@syntax-dispatch G4501@t '(any . each-any)))) G44ef@t))) (G306b@syntax-dispatch G44ef@t '(any . each-any)))) G44e5@t))) (G306b@syntax-dispatch G44e5@t 'any))) G44e3@x*))) (set! G4468@version-pred (lambda (G4493@x*) ((lambda (G4495@t) ((lambda (G4497@ls/false) (if G4497@ls/false (apply (lambda () (lambda (G4499@x) '#t)) G4497@ls/false) ((lambda (G449b@t) ((lambda (G449d@ls/false) (if (if G449d@ls/false (begin '#f (apply (lambda (G449f@c G44a0@ver*) (eq? (G3164@syntax->datum G449f@c) 'and)) G449d@ls/false)) '#f) (apply (lambda (G44a3@c G44a4@ver*) ((lambda (G44a7@p*) (lambda (G44a9@x) (for-all (lambda (G44ab@p) (G44ab@p G44a9@x)) G44a7@p*))) (map G4468@version-pred G44a4@ver*))) G449d@ls/false) ((lambda (G44ad@t) ((lambda (G44af@ls/false) (if (if G44af@ls/false (begin '#f (apply (lambda (G44b1@c G44b2@ver*) (eq? (G3164@syntax->datum G44b1@c) 'or)) G44af@ls/false)) '#f) (apply (lambda (G44b5@c G44b6@ver*) ((lambda (G44b9@p*) (lambda (G44bb@x) (exists (lambda (G44bd@p) (G44bd@p G44bb@x)) G44b9@p*))) (map G4468@version-pred G44b6@ver*))) G44af@ls/false) ((lambda (G44bf@t) ((lambda (G44c1@ls/false) (if (if G44c1@ls/false (begin '#f (apply (lambda (G44c3@c G44c4@ver) (eq? (G3164@syntax->datum G44c3@c) 'not)) G44c1@ls/false)) '#f) (apply (lambda (G44c7@c G44c8@ver) ((lambda (G44cb@p) (lambda (G44cd@x) (not (G44cb@p G44cd@x)))) (G4468@version-pred G44c8@ver))) G44c1@ls/false) ((lambda (G44cf@t) ((lambda (G44d1@ls/false) (if G44d1@ls/false (apply (lambda (G44d3@sub*) ((lambda (G44d5@p*) (lambda (G44d7@x) ((letrec ((G44d9@f (lambda (G44db@p* G44dc@x) (if (null? G44db@p*) '#t (if (null? G44dc@x) '#f (if ((car G44db@p*) (car G44dc@x)) (begin '#f (G44d9@f (cdr G44db@p*) (cdr G44dc@x))) '#f)))))) G44d9@f) G44d5@p* G44d7@x))) (map G4466@subversion-pred G44d3@sub*))) G44d1@ls/false) ((lambda (G44df@t) ((lambda (G44e1@ls/false) (if G44e1@ls/false (apply (lambda () (G315e@syntax-violation 'import '"invalid version spec" G4461@spec G4493@x*)) G44e1@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G44df@t))) (G306b@syntax-dispatch G44df@t '_))) G44cf@t))) (G306b@syntax-dispatch G44cf@t 'each-any))) G44bf@t))) (G306b@syntax-dispatch G44bf@t '(any any)))) G44ad@t))) (G306b@syntax-dispatch G44ad@t '(any . each-any)))) G449b@t))) (G306b@syntax-dispatch G449b@t '(any . each-any)))) G4495@t))) (G306b@syntax-dispatch G4495@t '()))) G4493@x*))) ((letrec ((G4469@f (lambda (G446b@x) ((lambda (G446d@t) ((lambda (G446f@ls/false) (if G446f@ls/false (apply (lambda (G4471@version-spec*) (values '() (G4468@version-pred G4471@version-spec*))) G446f@ls/false) ((lambda (G4473@t) ((lambda (G4475@ls/false) (if (if G4475@ls/false (begin '#f (apply (lambda (G4477@x G4478@x*) (G4398@idsyn? G4477@x)) G4475@ls/false)) '#f) (apply (lambda (G447b@x G447c@x*) (call-with-values (lambda () (G4469@f G447c@x*)) (lambda (G4481@G447f G4482@G4480) ((lambda (G4485@pred G4486@name) (values (cons (G3164@syntax->datum G447b@x) G4486@name) G4485@pred)) G4482@G4480 G4481@G447f)))) G4475@ls/false) ((lambda (G4489@t) ((lambda (G448b@ls/false) (if G448b@ls/false (apply (lambda () (values '() (lambda (G448d@x) '#t))) G448b@ls/false) ((lambda (G448f@t) ((lambda (G4491@ls/false) (if G4491@ls/false (apply (lambda () (G315e@syntax-violation '#f '"invalid import spec" G4461@spec)) G4491@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G448f@t))) (G306b@syntax-dispatch G448f@t '_))) G4489@t))) (G306b@syntax-dispatch G4489@t '()))) G4473@t))) (G306b@syntax-dispatch G4473@t '(any . any)))) G446d@t))) (G306b@syntax-dispatch G446d@t '(each-any)))) G446b@x)))) G4469@f) G4461@spec))) '#f '#f '#f))) (set! G43a8@import-library (lambda (G4453@spec*) (call-with-values (lambda () (G43a6@parse-library-name G4453@spec*)) (lambda (G4457@G4455 G4458@G4456) ((lambda (G445b@pred G445c@name) (begin (if (null? G445c@name) (G315e@syntax-violation 'import '"empty library name" G4453@spec*) (void)) ((lambda (G445f@lib) (begin (if (not G445f@lib) (G315e@syntax-violation 'import '"cannot find library with required name" G445c@name) (void)) (if (not (G445b@pred (G2bee@G2a54@library-version G445f@lib))) (G315e@syntax-violation 'import '"library does not satisfy version specification" G4453@spec* G445f@lib) (void)) ((G30de@imp-collector) G445f@lib) (G2bf2@G2a5c@library-subst G445f@lib))) (G2c16@G2aa4@find-library-by-name G445c@name)))) G4458@G4456 G4457@G4455))))) (set! G43aa@get-import (lambda (G43c5@spec) ((lambda (G43c7@t) ((lambda (G43c9@ls/false) (if (if G43c9@ls/false (begin '#f (apply (lambda (G43cb@x G43cc@x*) (not (memq (G3164@syntax->datum G43cb@x) '(for rename except only prefix library)))) G43c9@ls/false)) '#f) (apply (lambda (G43cf@x G43d0@x*) (G43a8@import-library (cons G43cf@x G43d0@x*))) G43c9@ls/false) ((lambda (G43d3@t) ((lambda (G43d5@ls/false) (if (if G43d5@ls/false (begin '#f (apply (lambda (G43d7@rename G43d8@isp G43d9@old* G43da@new*) (if (eq? (G3164@syntax->datum G43d7@rename) 'rename) (if (for-all G4398@idsyn? G43d9@old*) (begin '#f (for-all G4398@idsyn? G43da@new*)) '#f) '#f)) G43d5@ls/false)) '#f) (apply (lambda (G43df@rename G43e0@isp G43e1@old* G43e2@new*) ((lambda (G43e7@subst G43e8@old* G43e9@new*) ((lambda (G43ed@old-label*) ((lambda (G43ef@subst) (G439c@merge-substs (map cons G43e9@new* G43ed@old-label*) G43ef@subst)) (G43a2@rem* G43e8@old* G43e7@subst))) (G43a0@find* G43e8@old* G43e7@subst))) (G43aa@get-import G43e0@isp) (map G3164@syntax->datum G43e1@old*) (map G3164@syntax->datum G43e2@new*))) G43d5@ls/false) ((lambda (G43f1@t) ((lambda (G43f3@ls/false) (if (if G43f3@ls/false (begin '#f (apply (lambda (G43f5@except G43f6@isp G43f7@sym*) (if (eq? (G3164@syntax->datum G43f5@except) 'except) (begin '#f (for-all G4398@idsyn? G43f7@sym*)) '#f)) G43f3@ls/false)) '#f) (apply (lambda (G43fb@except G43fc@isp G43fd@sym*) ((lambda (G4401@subst) (G43a2@rem* (map G3164@syntax->datum G43fd@sym*) G4401@subst)) (G43aa@get-import G43fc@isp))) G43f3@ls/false) ((lambda (G4403@t) ((lambda (G4405@ls/false) (if (if G4405@ls/false (begin '#f (apply (lambda (G4407@only G4408@isp G4409@sym*) (if (eq? (G3164@syntax->datum G4407@only) 'only) (begin '#f (for-all G4398@idsyn? G4409@sym*)) '#f)) G4405@ls/false)) '#f) (apply (lambda (G440d@only G440e@isp G440f@sym*) ((lambda (G4413@subst G4414@sym*) ((lambda (G4417@sym*) ((lambda (G4419@lab*) (map cons G4417@sym* G4419@lab*)) (G43a0@find* G4417@sym* G4413@subst))) (G43a4@remove-dups G4414@sym*))) (G43aa@get-import G440e@isp) (map G3164@syntax->datum G440f@sym*))) G4405@ls/false) ((lambda (G441b@t) ((lambda (G441d@ls/false) (if (if G441d@ls/false (begin '#f (apply (lambda (G441f@prefix G4420@isp G4421@p) (if (eq? (G3164@syntax->datum G441f@prefix) 'prefix) (begin '#f (G4398@idsyn? G4421@p)) '#f)) G441d@ls/false)) '#f) (apply (lambda (G4425@prefix G4426@isp G4427@p) ((lambda (G442b@subst G442c@prefix) (map (lambda (G442f@x) (cons (string->symbol (string-append G442c@prefix (symbol->string (car G442f@x)))) (cdr G442f@x))) G442b@subst)) (G43aa@get-import G4426@isp) (symbol->string (G3164@syntax->datum G4427@p)))) G441d@ls/false) ((lambda (G4431@t) ((lambda (G4433@ls/false) (if (if G4433@ls/false (begin '#f (apply (lambda (G4435@library G4436@spec*) (eq? (G3164@syntax->datum G4435@library) 'library)) G4433@ls/false)) '#f) (apply (lambda (G4439@library G443a@spec*) (G43a8@import-library G443a@spec*)) G4433@ls/false) ((lambda (G443d@t) ((lambda (G443f@ls/false) (if (if G443f@ls/false (begin '#f (apply (lambda (G4441@for G4442@isp G4443@rest) (eq? (G3164@syntax->datum G4441@for) 'for)) G443f@ls/false)) '#f) (apply (lambda (G4447@for G4448@isp G4449@rest) (G43aa@get-import G4448@isp)) G443f@ls/false) ((lambda (G444d@t) ((lambda (G444f@ls/false) (if G444f@ls/false (apply (lambda (G4451@spec) (G315e@syntax-violation 'import '"invalid import spec" G4451@spec)) G444f@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G444d@t))) (G306b@syntax-dispatch G444d@t 'any))) G443d@t))) (G306b@syntax-dispatch G443d@t '(any any . any)))) G4431@t))) (G306b@syntax-dispatch G4431@t '(any each-any)))) G441b@t))) (G306b@syntax-dispatch G441b@t '(any any any)))) G4403@t))) (G306b@syntax-dispatch G4403@t '(any any . each-any)))) G43f1@t))) (G306b@syntax-dispatch G43f1@t '(any any . each-any)))) G43d3@t))) (G306b@syntax-dispatch G43d3@t '(any any . #(each (any any)))))) G43c7@t))) (G306b@syntax-dispatch G43c7@t '(any . each-any)))) G43c5@spec))) (set! G43ac@add-imports! (lambda (G43b5@imp G43b6@h) ((lambda (G43b9@subst) (for-each (lambda (G43bb@x) ((lambda (G43bd@name G43be@label) ((lambda (G43c1@t) (if G43c1@t ((lambda (G43c3@l) (if (not (eq? G43c3@l G43be@label)) (G439a@dup-error G43bd@name) (void))) G43c1@t) (hashtable-set! G43b6@h G43bd@name G43be@label))) (hashtable-ref G43b6@h G43bd@name '#f))) (car G43bb@x) (cdr G43bb@x))) G43b9@subst)) (G43aa@get-import G43b5@imp)))) (lambda (G43ad@imp*) ((letrec ((G43af@f (lambda (G43b1@imp* G43b2@h) (if (null? G43b1@imp*) (hashtable-entries G43b2@h) (begin (G43ac@add-imports! (car G43b1@imp*) G43b2@h) (G43af@f (cdr G43b1@imp*) G43b2@h)))))) G43af@f) G43ad@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30d6@make-top-rib (lambda (G4599@names G459a@labels) ((lambda (G459d@rib) (begin (vector-for-each (lambda (G459f@name G45a0@label) (begin (if (not (symbol? G459f@name)) (error 'make-top-rib '"BUG: not a symbol" G459f@name) (void)) (G2dd9@extend-rib/nc! G459d@rib (G2df2@make-stx G459f@name G2d9c@top-mark* '() '()) G45a0@label))) G4599@names G459a@labels) G459d@rib)) (G2dd3@make-cache-rib)))) (set! G30d8@make-collector (lambda () ((lambda (G45a3@ls) (lambda G45a7 ((lambda (G45a8) (if (= G45a8 '0) (apply (lambda () G45a3@ls) G45a7) (if (= G45a8 '1) (apply (lambda (G45a5@x) (set! G45a3@ls (G2d95@set-cons G45a5@x G45a3@ls))) G45a7) (error 'apply '"invalid arg count")))) (length G45a7)))) '()))) (set! G30da@inv-collector (G297a@G288d@make-parameter (lambda G45a9@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G45ab@x) (begin (if (not (procedure? G45ab@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G45ab@x) (void)) G45ab@x)))) (set! G30dc@vis-collector (G297a@G288d@make-parameter (lambda G45ad@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45af@x) (begin (if (not (procedure? G45af@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45af@x) (void)) G45af@x)))) (set! G30de@imp-collector (G297a@G288d@make-parameter (lambda G45b1@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45b3@x) (begin (if (not (procedure? G45b3@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45b3@x) (void)) G45b3@x)))) (set! G30e0@chi-library-internal (lambda (G45b5@e* G45b6@rib G45b7@top?) (call-with-values (lambda () (G30ca@chi-body* G45b5@e* '() '() '() '() '() '() '() G45b6@rib G45b7@top?)) (lambda (G45c3@G45bb G45c4@G45bc G45c5@G45bd G45c6@G45be G45c7@G45bf G45c8@G45c0 G45c9@G45c1 G45ca@G45c2) ((lambda (G45d3@exp* G45d4@_kwd* G45d5@mod** G45d6@rhs* G45d7@lex* G45d8@mr G45d9@r G45da@e*) (values (append (apply append (reverse G45d5@mod**)) G45da@e*) G45d9@r G45d8@mr (reverse G45d7@lex*) (reverse G45d6@rhs*) G45d3@exp*)) G45ca@G45c2 G45c9@G45c1 G45c8@G45c0 G45c7@G45bf G45c6@G45be G45c5@G45bd G45c4@G45bc G45c3@G45bb))))) (set! G30e2@chi-interaction-expr (lambda (G45e3@e G45e4@rib G45e5@r) (call-with-values (lambda () (G30ca@chi-body* (list G45e3@e) G45e5@r G45e5@r '() '() '() '() '() G45e4@rib '#t)) (lambda (G45f1@G45e9 G45f2@G45ea G45f3@G45eb G45f4@G45ec G45f5@G45ed G45f6@G45ee G45f7@G45ef G45f8@G45f0) ((lambda (G4601@_exp* G4602@_kwd* G4603@mod** G4604@rhs* G4605@lex* G4606@mr G4607@r G4608@e*) ((lambda (G4611@e*) ((lambda (G4613@e) (values G4613@e G4607@r)) (if (null? G4611@e*) (G2d84@G2cf6@build-void) (if (null? (cdr G4611@e*)) (car G4611@e*) (G2d83@G2cf4@build-sequence '#f G4611@e*))))) (G309d@expand-interaction-rhs*/init* (reverse G4605@lex*) (reverse G4604@rhs*) (append (apply append (reverse G4603@mod**)) G4608@e*) G4607@r G4606@mr))) G45f8@G45f0 G45f7@G45ef G45f6@G45ee G45f5@G45ed G45f4@G45ec G45f3@G45eb G45f2@G45ea G45f1@G45e9))))) (set! G30e4@library-body-expander (lambda (G4615@name G4616@main-exp* G4617@imp* G4618@b* G4619@top?) ((lambda (G4620@itc) (begin (set! G4620@itc (G30d8@make-collector)) ((lambda (G4625@G4621@imp-collector G4626@G4622@top-level-context G4627@G4623@imp-collector G4628@G4624@top-level-context) ((lambda (G462d@swap) (dynamic-wind G462d@swap (lambda () (call-with-values (lambda () (G30d4@parse-import-spec* G4617@imp*)) (lambda (G4631@G462f G4632@G4630) ((lambda (G4635@subst-labels G4636@subst-names) ((lambda (G4639@rib) ((lambda (G463c@wrap) (begin (set! G463c@wrap (lambda (G46a8@x) (G2df2@make-stx G46a8@x G2d9c@top-mark* (list G4639@rib) '()))) ((lambda (G463d@b* G463e@main-exp* G463f@rtc G4640@vtc) ((lambda (G4649@G4645@inv-collector G464a@G4646@vis-collector G464b@G4647@inv-collector G464c@G4648@vis-collector) ((lambda (G4651@swap) (dynamic-wind G4651@swap (lambda () (call-with-values (lambda () (G30e0@chi-library-internal G463d@b* G4639@rib G4619@top?)) (lambda (G4659@G4653 G465a@G4654 G465b@G4655 G465c@G4656 G465d@G4657 G465e@G4658) ((lambda (G4665@internal-exp* G4666@rhs* G4667@lex* G4668@mr G4669@r G466a@init*) (call-with-values (lambda () (G30ce@parse-exports (append G463e@main-exp* G4665@internal-exp*))) (lambda (G4673@G4671 G4674@G4672) ((lambda (G4677@exp-id* G4678@exp-name*) (begin (G2ddd@seal-rib! G4639@rib) ((lambda (G467b@init*) ((lambda (G467d@rhs*) ((lambda () (begin (G2ddf@unseal-rib! G4639@rib) ((lambda (G467f@loc* G4680@export-subst) ((lambda (G4684@errstr) (begin (set! G4684@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3148@make-export-env/macros G4667@lex* G467f@loc* G4669@r)) (lambda (G4688@G4685 G4689@G4686 G468a@G4687) ((lambda (G468e@macro* G468f@global* G4690@export-env) (begin (for-each (lambda (G4694@s) ((lambda (G4696@name G4697@label) ((lambda (G469a@p) (if G469a@p ((lambda (G469c@b) ((lambda (G469e@type) (if (eq? G469e@type 'mutable) (G315e@syntax-violation 'export G4684@errstr G4696@name) (void))) (car G469c@b))) (cdr G469a@p)) (void))) (assq G4697@label G4690@export-env))) (car G4694@s) (cdr G4694@s))) G4680@export-subst) ((lambda (G46a0@invoke-body G46a1@invoke-definitions) (values (G4620@itc) (G463f@rtc) (G4640@vtc) (G2d83@G2cf4@build-sequence '#f (append G46a1@invoke-definitions (list G46a0@invoke-body))) G468e@macro* G4680@export-subst G4690@export-env)) (G2d86@G2cfa@build-letrec* '#f G4667@lex* G467d@rhs* (G3144@build-exports G468f@global* G467b@init*)) (map G2d7f@G2c24@build-global-define (map cdr G468f@global*))))) G468a@G4687 G4689@G4686 G4688@G4685))))) '#f)) (map G2da2@gen-global G4667@lex*) (G3146@make-export-subst G4678@exp-name* G4677@exp-id*)))))) (G309f@chi-rhs* G4666@rhs* G4669@r G4668@mr))) (G308b@chi-expr* G466a@init* G4669@r G4668@mr)))) G4674@G4672 G4673@G4671)))) G465e@G4658 G465d@G4657 G465c@G4656 G465b@G4655 G465a@G4654 G4659@G4653)))) G4651@swap)) (lambda () (begin ((lambda (G46a4@t) (begin (G4649@G4645@inv-collector G464b@G4647@inv-collector) (set! G464b@G4647@inv-collector G46a4@t))) (G4649@G4645@inv-collector)) ((lambda (G46a6@t) (begin (G464a@G4646@vis-collector G464c@G4648@vis-collector) (set! G464c@G4648@vis-collector G46a6@t))) (G464a@G4646@vis-collector)))))) G30da@inv-collector G30dc@vis-collector G463f@rtc G4640@vtc)) (map G463c@wrap G4618@b*) (map G463c@wrap G4616@main-exp*) (G30d8@make-collector) (G30d8@make-collector)))) '#f)) (G30d6@make-top-rib G4636@subst-names G4635@subst-labels))) G4632@G4630 G4631@G462f)))) G462d@swap)) (lambda () (begin ((lambda (G46aa@t) (begin (G4625@G4621@imp-collector G4627@G4623@imp-collector) (set! G4627@G4623@imp-collector G46aa@t))) (G4625@G4621@imp-collector)) ((lambda (G46ac@t) (begin (G4626@G4622@top-level-context G4628@G4624@top-level-context) (set! G4628@G4624@top-level-context G46ac@t))) (G4626@G4622@top-level-context)))))) G30de@imp-collector G316c@top-level-context G4620@itc '#f))) '#f))) (set! G30e6@core-library-expander (lambda (G46ae@e G46af@verify-name) (call-with-values (lambda () (G30d2@parse-library G46ae@e)) (lambda (G46b6@G46b2 G46b7@G46b3 G46b8@G46b4 G46b9@G46b5) ((lambda (G46be@b* G46bf@imp* G46c0@exp* G46c1@name*) (call-with-values (lambda () (G30d0@parse-library-name G46c1@name*)) (lambda (G46c8@G46c6 G46c9@G46c7) ((lambda (G46cc@ver G46cd@name) (begin (G46af@verify-name G46cd@name) (call-with-values (lambda () (G30e4@library-body-expander G46cd@name G46c0@exp* G46bf@imp* G46be@b* '#f)) (lambda (G46d7@G46d0 G46d8@G46d1 G46d9@G46d2 G46da@G46d3 G46db@G46d4 G46dc@G46d5 G46dd@G46d6) ((lambda (G46e5@export-env G46e6@export-subst G46e7@visit-code G46e8@invoke-code G46e9@visit-req* G46ea@invoke-req* G46eb@imp*) (values G46cd@name G46cc@ver G46eb@imp* G46ea@invoke-req* G46e9@visit-req* G46e8@invoke-code G46e7@visit-code G46e6@export-subst G46e5@export-env)) G46dd@G46d6 G46dc@G46d5 G46db@G46d4 G46da@G46d3 G46d9@G46d2 G46d8@G46d1 G46d7@G46d0))))) G46c9@G46c7 G46c8@G46c6)))) G46b9@G46b5 G46b8@G46b4 G46b7@G46b3 G46b6@G46b2))))) (set! G30e8@parse-top-level-program (lambda (G46f3@e*) ((lambda (G46f5@t) ((lambda (G46f7@ls/false) (if (if G46f7@ls/false (begin '#f (apply (lambda (G46f9@import G46fa@imp* G46fb@b*) (eq? (G3164@syntax->datum G46f9@import) 'import)) G46f7@ls/false)) '#f) (apply (lambda (G46ff@import G4700@imp* G4701@b*) (values G4700@imp* G4701@b*)) G46f7@ls/false) ((lambda (G4705@t) ((lambda (G4707@ls/false) (if (if G4707@ls/false (begin '#f (apply (lambda (G4709@import G470a@x G470b@y) (eq? (G3164@syntax->datum G4709@import) 'import)) G4707@ls/false)) '#f) (apply (lambda (G470f@import G4710@x G4711@y) (G315e@syntax-violation 'expander '"invalid syntax of top-level program" (G2e22@syntax-car G46f3@e*))) G4707@ls/false) ((lambda (G4715@t) ((lambda (G4717@ls/false) (if G4717@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G4717@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G4715@t))) (G306b@syntax-dispatch G4715@t '_))) G4705@t))) (G306b@syntax-dispatch G4705@t '((any . any) . any)))) G46f5@t))) (G306b@syntax-dispatch G46f5@t '((any . each-any) . each-any)))) G46f3@e*))) (set! G30ea@top-level-expander (lambda (G4719@e*) (call-with-values (lambda () (G30e8@parse-top-level-program G4719@e*)) (lambda (G471d@G471b G471e@G471c) ((lambda (G4721@b* G4722@imp*) (call-with-values (lambda () (G30e4@library-body-expander '() '() G4722@imp* G4721@b* '#t)) (lambda (G472c@G4725 G472d@G4726 G472e@G4727 G472f@G4728 G4730@G4729 G4731@G472a G4732@G472b) ((lambda (G473a@export-env G473b@export-subst G473c@visit-code G473d@invoke-code G473e@visit-req* G473f@invoke-req* G4740@imp*) (values G473f@invoke-req* G473d@invoke-code)) G4732@G472b G4731@G472a G4730@G4729 G472f@G4728 G472e@G4727 G472d@G4726 G472c@G4725)))) G471e@G471c G471d@G471b))))) (set! G30f0@G30eb (make-record-type-descriptor 'env '#f 'G30ee '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G30f2@G30ed '#f) (set! G30f4@G30ec (make-record-constructor-descriptor G30f0@G30eb '#f G30f2@G30ed)) (set! G30f9@env? (record-predicate G30f0@G30eb)) (set! G30fb@make-env (record-constructor G30f4@G30ec)) (set! G30fd@env-names (record-accessor G30f0@G30eb '0)) (set! G30ff@env-labels (record-accessor G30f0@G30eb '1)) (set! G3101@env-itc (record-accessor G30f0@G30eb '2)) (set! G3103@set-env-names! (record-mutator G30f0@G30eb '0)) (set! G3105@set-env-labels! (record-mutator G30f0@G30eb '1)) (set! G3107@set-env-itc! (record-mutator G30f0@G30eb '2)) (set! G3109@rp (G2977@G2887@make-record-printer 'env (lambda (G4748@x G4749@p G474a@wr) (display '"#<environment>" G4749@p)))) (set! G310f@G310a (make-record-type-descriptor 'interaction-env '#f 'G310d '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3111@G310c '#f) (set! G3113@G310b (make-record-constructor-descriptor G310f@G310a '#f G3111@G310c)) (set! G3118@interaction-env? (record-predicate G310f@G310a)) (set! G311a@make-interaction-env (record-constructor G3113@G310b)) (set! G311c@interaction-env-rib (record-accessor G310f@G310a '0)) (set! G311e@interaction-env-r (record-accessor G310f@G310a '1)) (set! G3120@interaction-env-locs (record-accessor G310f@G310a '2)) (set! G3122@set-interaction-env-rib! (record-mutator G310f@G310a '0)) (set! G3124@set-interaction-env-r! (record-mutator G310f@G310a '1)) (set! G3126@set-interaction-env-locs! (record-mutator G310f@G310a '2)) (set! G3128@rp (G2977@G2887@make-record-printer 'interaction-env (lambda (G474e@x G474f@p G4750@wr) (display '"#<environment>" G474f@p)))) (set! G312a@interaction-environment-symbols (lambda () (G3132@environment-symbols (G316a@interaction-environment)))) (set! G312c@environment-bindings (lambda (G4754@e) (vector->list (vector-map (lambda (G4756@name G4757@label) (G312e@parse-binding (cons G4756@name (G2c1c@G2ab0@imported-label->binding G4757@label)))) (G30fd@env-names G4754@e) (G30ff@env-labels G4754@e))))) (set! G312e@parse-binding (lambda (G475a@b) (cons (car G475a@b) ((lambda (G475c@t) (if (memv G475c@t '(core-prim global)) 'procedure (if (memv G475c@t '(core-macro macro global-macro)) 'syntax (if (memv G475c@t '($core-rtd)) 'record (if (eq? (car G475a@b) (cadr G475a@b)) 'syntax 'unknown))))) (cadr G475a@b))))) (set! G3130@environment? (lambda (G475e@x) ((lambda (G4760@t) (if G4760@t G4760@t (begin '#f (G3118@interaction-env? G475e@x)))) (G30f9@env? G475e@x)))) (set! G3132@environment-symbols (lambda (G4762@x) (if (G30f9@env? G4762@x) (vector->list (G30fd@env-names G4762@x)) (if (G3118@interaction-env? G4762@x) (map values (G2dbd@rib-sym* (G311c@interaction-env-rib G4762@x))) (assertion-violation 'environment-symbols '"not an environment" G4762@x))))) (set! G3134@environment (lambda G4764@imp* ((lambda (G4766@itc) ((lambda (G476a@G4768@imp-collector G476b@G4769@imp-collector) ((lambda (G476e@swap) (dynamic-wind G476e@swap (lambda () (call-with-values (lambda () (G30d4@parse-import-spec* G4764@imp*)) (lambda (G4772@G4770 G4773@G4771) ((lambda (G4776@subst-labels G4777@subst-names) (G30fb@make-env G4777@subst-names G4776@subst-labels G4766@itc)) G4773@G4771 G4772@G4770)))) G476e@swap)) (lambda () ((lambda (G477a@t) (begin (G476a@G4768@imp-collector G476b@G4769@imp-collector) (set! G476b@G4769@imp-collector G477a@t))) (G476a@G4768@imp-collector))))) G30de@imp-collector G4766@itc)) (G30d8@make-collector)))) (set! G3136@null-environment (lambda (G477c@n) (begin (if (not (eqv? G477c@n '5)) (assertion-violation 'null-environment '"not 5" G477c@n) (void)) (G3134@environment '(psyntax null-environment-5))))) (set! G3138@scheme-report-environment (lambda (G477e@n) (begin (if (not (eqv? G477e@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G477e@n) (void)) (G3134@environment '(psyntax scheme-report-environment-5))))) (set! G313a@expand (lambda (G4780@x G4781@env) (if (G30f9@env? G4781@env) ((lambda (G4784@rib) ((lambda (G4786@x G4787@itc G4788@rtc G4789@vtc) ((lambda (G478e@x) (begin (G2ddd@seal-rib! G4784@rib) (values G478e@x (G4788@rtc)))) ((lambda (G4798@G4790@top-level-context G4799@G4791@inv-collector G479a@G4792@vis-collector G479b@G4793@imp-collector G479c@G4794@top-level-context G479d@G4795@inv-collector G479e@G4796@vis-collector G479f@G4797@imp-collector) ((lambda (G47a8@swap) (dynamic-wind G47a8@swap (lambda () (G308f@chi-expr G4786@x '() '())) G47a8@swap)) (lambda () (begin ((lambda (G47aa@t) (begin (G4798@G4790@top-level-context G479c@G4794@top-level-context) (set! G479c@G4794@top-level-context G47aa@t))) (G4798@G4790@top-level-context)) ((lambda (G47ac@t) (begin (G4799@G4791@inv-collector G479d@G4795@inv-collector) (set! G479d@G4795@inv-collector G47ac@t))) (G4799@G4791@inv-collector)) ((lambda (G47ae@t) (begin (G479a@G4792@vis-collector G479e@G4796@vis-collector) (set! G479e@G4796@vis-collector G47ae@t))) (G479a@G4792@vis-collector)) ((lambda (G47b0@t) (begin (G479b@G4793@imp-collector G479f@G4797@imp-collector) (set! G479f@G4797@imp-collector G47b0@t))) (G479b@G4793@imp-collector)))))) G316c@top-level-context G30da@inv-collector G30dc@vis-collector G30de@imp-collector '#f G4788@rtc G4789@vtc G4787@itc))) (G2df2@make-stx G4780@x G2d9c@top-mark* (list G4784@rib) '()) (G3101@env-itc G4781@env) (G30d8@make-collector) (G30d8@make-collector))) (G30d6@make-top-rib (G30fd@env-names G4781@env) (G30ff@env-labels G4781@env))) (if (G3118@interaction-env? G4781@env) ((lambda (G47b2@rib G47b3@r G47b4@rtc) ((lambda (G47b8@x) (call-with-values (lambda () ((lambda (G47c4@G47bc@top-level-context G47c5@G47bd@inv-collector G47c6@G47be@vis-collector G47c7@G47bf@imp-collector G47c8@G47c0@top-level-context G47c9@G47c1@inv-collector G47ca@G47c2@vis-collector G47cb@G47c3@imp-collector) ((lambda (G47d4@swap) (dynamic-wind G47d4@swap (lambda () (G30e2@chi-interaction-expr G47b8@x G47b2@rib G47b3@r)) G47d4@swap)) (lambda () (begin ((lambda (G47d6@t) (begin (G47c4@G47bc@top-level-context G47c8@G47c0@top-level-context) (set! G47c8@G47c0@top-level-context G47d6@t))) (G47c4@G47bc@top-level-context)) ((lambda (G47d8@t) (begin (G47c5@G47bd@inv-collector G47c9@G47c1@inv-collector) (set! G47c9@G47c1@inv-collector G47d8@t))) (G47c5@G47bd@inv-collector)) ((lambda (G47da@t) (begin (G47c6@G47be@vis-collector G47ca@G47c2@vis-collector) (set! G47ca@G47c2@vis-collector G47da@t))) (G47c6@G47be@vis-collector)) ((lambda (G47dc@t) (begin (G47c7@G47bf@imp-collector G47cb@G47c3@imp-collector) (set! G47cb@G47c3@imp-collector G47dc@t))) (G47c7@G47bf@imp-collector)))))) G316c@top-level-context G30da@inv-collector G30dc@vis-collector G30de@imp-collector G4781@env G47b4@rtc (G30d8@make-collector) (G30d8@make-collector))) (lambda (G47de@G47ba G47df@G47bb) ((lambda (G47e2@r^ G47e3@e) (begin (G3124@set-interaction-env-r! G4781@env G47e2@r^) (values G47e3@e (G47b4@rtc)))) G47df@G47bb G47de@G47ba)))) (G2df2@make-stx G4780@x G2d9c@top-mark* (list G47b2@rib) '()))) (G311c@interaction-env-rib G4781@env) (G311e@interaction-env-r G4781@env) (G30d8@make-collector)) (assertion-violation 'expand '"not an environment" G4781@env))))) (set! G313c@eval (lambda (G47e6@x G47e7@env) (begin (if (not (G3130@environment? G47e7@env)) (error 'eval '"not an environment" G47e7@env) (void)) (call-with-values (lambda () (G313a@expand G47e6@x G47e7@env)) (lambda (G47ec@G47ea G47ed@G47eb) ((lambda (G47f0@invoke-req* G47f1@x) (begin (for-each G2c1d@G2ab2@invoke-library G47f0@invoke-req*) (eval-core (G29de@G2986@expanded->core G47f1@x)))) G47ed@G47eb G47ec@G47ea)))))) (set! G313e@library-expander (lambda G4859 ((lambda (G485a) (if (= G485a '3) (apply (lambda (G47f4@x G47f5@filename G47f6@verify-name) ((lambda (G47fb@build-visit-code G47fd@visit!) (begin (set! G47fb@build-visit-code (lambda (G4847@macro*) (if (null? G4847@macro*) (G2d84@G2cf6@build-void) (G2d83@G2cf4@build-sequence '#f (map (lambda (G4849@x) ((lambda (G484b@loc G484c@src) (list 'set! G484b@loc G484c@src)) (car G4849@x) (cddr G4849@x))) G4847@macro*))))) (set! G47fd@visit! (lambda (G483f@macro*) (for-each (lambda (G4841@x) ((lambda (G4843@loc G4844@proc) (set-symbol-value! G4843@loc G4844@proc)) (car G4841@x) (cadr G4841@x))) G483f@macro*))) (call-with-values (lambda () (G30e6@core-library-expander G47f4@x G47f6@verify-name)) (lambda (G4807@G47fe G4808@G47ff G4809@G4800 G480a@G4801 G480b@G4802 G480c@G4803 G480d@G4804 G480e@G4805 G480f@G4806) ((lambda (G4819@export-env G481a@export-subst G481b@macro* G481c@invoke-code G481d@vis* G481e@inv* G481f@imp* G4820@ver G4821@name) ((lambda (G482b@id G482c@name G482d@ver G482e@imp* G482f@vis* G4830@inv* G4831@visit-proc G4832@invoke-proc G4833@visit-code G4834@invoke-code) (begin (G2c1b@G2aae@install-library G482b@id G482c@name G482d@ver G482e@imp* G482f@vis* G4830@inv* G481a@export-subst G4819@export-env G4831@visit-proc G4832@invoke-proc G4833@visit-code G4834@invoke-code '#t G47f5@filename) (values G482b@id G482c@name G482d@ver G482e@imp* G482f@vis* G4830@inv* G4834@invoke-code G4833@visit-code G481a@export-subst G4819@export-env))) (gensym) G4821@name G4820@ver (map G2c21@G2aba@library-spec G481f@imp*) (map G2c21@G2aba@library-spec G481d@vis*) (map G2c21@G2aba@library-spec G481e@inv*) (lambda () (G47fd@visit! G481b@macro*)) (lambda () (eval-core (G29de@G2986@expanded->core G481c@invoke-code))) (G47fb@build-visit-code G481b@macro*) G481c@invoke-code)) G480f@G4806 G480e@G4805 G480d@G4804 G480c@G4803 G480b@G4802 G480a@G4801 G4809@G4800 G4808@G47ff G4807@G47fe))))) '#f '#f)) G4859) (if (= G485a '2) (apply (lambda (G484f@x G4850@filename) (G313e@library-expander G484f@x G4850@filename (lambda (G4853@x) (values)))) G4859) (if (= G485a '1) (apply (lambda (G4855@x) (G313e@library-expander G4855@x '#f (lambda (G4857@x) (values)))) G4859) (error 'apply '"invalid arg count"))))) (length G4859)))) (set! G3140@boot-library-expand (lambda (G485b@x) (call-with-values (lambda () (G313e@library-expander G485b@x)) (lambda (G4867@G485d G4868@G485e G4869@G485f G486a@G4860 G486b@G4861 G486c@G4862 G486d@G4863 G486e@G4864 G486f@G4865 G4870@G4866) ((lambda (G487b@export-env G487c@export-subst G487d@visit-code G487e@invoke-code G487f@inv* G4880@vis* G4881@imp* G4882@ver G4883@name G4884@id) (values G4883@name G487e@invoke-code G487c@export-subst G487b@export-env)) G4870@G4866 G486f@G4865 G486e@G4864 G486d@G4863 G486c@G4862 G486b@G4861 G486a@G4860 G4869@G485f G4868@G485e G4867@G485d))))) (set! G3142@rev-map-append (lambda (G488f@f G4890@ls G4891@ac) (if (null? G4890@ls) G4891@ac (G3142@rev-map-append G488f@f (cdr G4890@ls) (cons (G488f@f (car G4890@ls)) G4891@ac))))) (set! G3144@build-exports (lambda (G4895@lex*+loc* G4896@init*) (G2d83@G2cf4@build-sequence '#f (cons (G2d84@G2cf6@build-void) (G3142@rev-map-append (lambda (G4899@x) (list 'set! (cdr G4899@x) (car G4899@x))) G4895@lex*+loc* G4896@init*))))) (set! G3146@make-export-subst (lambda (G489b@name* G489c@id*) (map (lambda (G489f@name G48a0@id) ((lambda (G48a3@label) (begin (if (not G48a3@label) (G315e@syntax-violation '#f '"cannot export unbound identifier" G48a0@id) (void)) (cons G489f@name G48a3@label))) (G2e42@id->label G48a0@id))) G489b@name* G489c@id*))) (set! G3148@make-export-env/macros (lambda (G48a5@lex* G48a6@loc* G48a7@r) ((lambda (G48ac@lookup) (begin (set! G48ac@lookup (lambda (G48c9@x) ((letrec ((G48cb@f (lambda (G48cd@x G48ce@lex* G48cf@loc*) (if (pair? G48ce@lex*) (if (eq? G48cd@x (car G48ce@lex*)) (car G48cf@loc*) (G48cb@f G48cd@x (cdr G48ce@lex*) (cdr G48cf@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48cb@f) G48c9@x G48a5@lex* G48a6@loc*))) ((letrec ((G48ad@f (lambda (G48af@r G48b0@env G48b1@global* G48b2@macro*) (if (null? G48af@r) (values G48b0@env G48b1@global* G48b2@macro*) ((lambda (G48b7@x) ((lambda (G48b9@label G48ba@b) ((lambda (G48bd@t) (if (memv G48bd@t '(lexical)) ((lambda (G48bf@v) ((lambda (G48c1@loc G48c2@type) (G48ad@f (cdr G48af@r) (cons (cons* G48b9@label G48c2@type G48c1@loc) G48b0@env) (cons (cons (G2ffb@lexical-var G48bf@v) G48c1@loc) G48b1@global*) G48b2@macro*)) (G48ac@lookup (G2ffb@lexical-var G48bf@v)) (if (G2ffd@lexical-mutable? G48bf@v) 'mutable 'global))) (G2e4c@binding-value G48ba@b)) (if (memv G48bd@t '(local-macro)) ((lambda (G48c5@loc) (G48ad@f (cdr G48af@r) (cons (cons* G48b9@label 'global-macro G48c5@loc) G48b0@env) G48b1@global* (cons (cons G48c5@loc (G2e4c@binding-value G48ba@b)) G48b2@macro*))) (gensym)) (if (memv G48bd@t '(local-macro!)) ((lambda (G48c7@loc) (G48ad@f (cdr G48af@r) (cons (cons* G48b9@label 'global-macro! G48c7@loc) G48b0@env) G48b1@global* (cons (cons G48c7@loc (G2e4c@binding-value G48ba@b)) G48b2@macro*))) (gensym)) (if (memv G48bd@t '($rtd $module)) (G48ad@f (cdr G48af@r) (cons G48b7@x G48b0@env) G48b1@global* G48b2@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e4a@binding-type G48ba@b) (G2e4c@binding-value G48ba@b))))))) (G2e4a@binding-type G48ba@b))) (car G48b7@x) (cdr G48b7@x))) (car G48af@r)))))) G48ad@f) G48a7@r '() '() '()))) '#f))) (set! G314a@generate-temporaries (lambda (G48d3@ls) ((lambda (G48d5@t) ((lambda (G48d7@ls/false) (if G48d7@ls/false (apply (lambda (G48d9@ls) (map (lambda (G48db@x) (G2df2@make-stx ((lambda (G48dd@x) (if ((lambda (G48df@t) (if G48df@t G48df@t (begin '#f (string? G48dd@x)))) (symbol? G48dd@x)) (gensym G48dd@x) (gensym 't))) (G3164@syntax->datum G48db@x)) G2d9c@top-mark* '() '())) G48d9@ls)) G48d7@ls/false) ((lambda (G48e1@t) ((lambda (G48e3@ls/false) (if G48e3@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G48e3@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G48e1@t))) (G306b@syntax-dispatch G48e1@t '_))) G48d5@t))) (G306b@syntax-dispatch G48d5@t 'each-any))) G48d3@ls))) (set! G314c@free-identifier=? (lambda (G48e5@x G48e6@y) (if (G2e28@id? G48e5@x) (if (G2e28@id? G48e6@y) (G2e30@free-id=? G48e5@x G48e6@y) (assertion-violation 'free-identifier=? '"not an identifier" G48e6@y)) (assertion-violation 'free-identifier=? '"not an identifier" G48e5@x)))) (set! G314e@bound-identifier=? (lambda (G48e9@x G48ea@y) (if (G2e28@id? G48e9@x) (if (G2e28@id? G48ea@y) (G2e2e@bound-id=? G48e9@x G48ea@y) (assertion-violation 'bound-identifier=? '"not an identifier" G48ea@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G48e9@x)))) (set! G3150@make-source-condition (lambda (G48ed@x) ((lambda (G48f7@G48f2 G48f9@G48f4 G48fb@G48f3 G4900@G48f1 G4902@make-source-condition G4904@G48ef G4906@G48f0 G4908@source-condition? G490a@source-filename G490c@source-character) (begin (set! G48f7@G48f2 (make-record-type-descriptor '&source-information &condition-rtd 'G48f5 '#f '#f '#((immutable file-name) (immutable character)))) (set! G48f9@G48f4 '#f) (set! G48fb@G48f3 (make-record-constructor-descriptor G48f7@G48f2 &condition-rcd G48f9@G48f4)) (set! G4900@G48f1 (record-predicate G48f7@G48f2)) (set! G4902@make-source-condition (record-constructor G48fb@G48f3)) (set! G4904@G48ef (record-accessor G48f7@G48f2 '0)) (set! G4906@G48f0 (record-accessor G48f7@G48f2 '1)) (set! G4908@source-condition? (condition-predicate G48f7@G48f2)) (set! G490a@source-filename (condition-accessor G48f7@G48f2 G4904@G48ef)) (set! G490c@source-character (condition-accessor G48f7@G48f2 G4906@G48f0)) (if (pair? G48ed@x) (G4902@make-source-condition (car G48ed@x) (cdr G48ed@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3152@extract-position-condition (lambda (G490d@x) (G3150@make-source-condition (G3154@expression-position G490d@x)))) (set! G3154@expression-position (lambda (G490f@x) (if (G2df0@stx? G490f@x) (begin '#f ((lambda (G4911@x) (if (G2971@G287b@annotation? G4911@x) (begin '#f (G2972@G287d@annotation-source G4911@x)) '#f)) (G2df4@stx-expr G490f@x))) '#f))) (set! G3156@assertion-error (lambda (G4913@expr G4914@pos) (raise (condition (G4c0b@G4b3d@make-assertion-violation) (G4c19@G4b6b@make-who-condition 'assert) (G4beb@G4ad5@make-message-condition '"assertion failed") (G4c11@G4b52@make-irritants-condition (list G4913@expr)) (G3150@make-source-condition G4914@pos))))) (set! G3158@syntax-error (lambda (G4917@x . G4919@args) (begin (if (not (for-all string? G4919@args)) (assertion-violation 'syntax-error '"invalid argument" G4919@args) (void)) (raise (condition (G4beb@G4ad5@make-message-condition (if (null? G4919@args) '"invalid syntax" (apply string-append G4919@args))) (G4c33@G4bc1@make-syntax-violation (G3164@syntax->datum G4917@x) '#f) (G3152@extract-position-condition G4917@x) (G315a@extract-trace G4917@x)))))) (set! G315a@extract-trace (lambda (G491b@x) ((lambda (G4924@G491f G4926@G4921 G4928@G4920 G492d@G491e G492f@make-trace G4931@G491d G4933@trace? G4935@trace-form) (begin (set! G4924@G491f (make-record-type-descriptor '&trace &condition-rtd 'G4922 '#f '#f '#((immutable form)))) (set! G4926@G4921 '#f) (set! G4928@G4920 (make-record-constructor-descriptor G4924@G491f &condition-rcd G4926@G4921)) (set! G492d@G491e (record-predicate G4924@G491f)) (set! G492f@make-trace (record-constructor G4928@G4920)) (set! G4931@G491d (record-accessor G4924@G491f '0)) (set! G4933@trace? (condition-predicate G4924@G491f)) (set! G4935@trace-form (condition-accessor G4924@G491f G4931@G491d)) ((letrec ((G4936@f (lambda (G4938@x) (if (G2df0@stx? G4938@x) (apply condition (G492f@make-trace G4938@x) (map G4936@f (G2dfa@stx-ae* G4938@x))) (if (G2971@G287b@annotation? G4938@x) (G492f@make-trace (G2df2@make-stx G4938@x '() '() '())) (condition)))))) G4936@f) G491b@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G315c@syntax-violation* (lambda (G493a@who G493b@msg G493c@form G493d@condition-object) (begin (if (not (string? G493b@msg)) (assertion-violation 'syntax-violation '"message is not a string" G493b@msg) (void)) ((lambda (G4942@who) (raise (condition (if G4942@who (G4c19@G4b6b@make-who-condition G4942@who) (condition)) (G4beb@G4ad5@make-message-condition G493b@msg) G493d@condition-object (G3152@extract-position-condition G493c@form) (G315a@extract-trace G493c@form)))) (if ((lambda (G4944@t) (if G4944@t G4944@t (begin '#f (symbol? G493a@who)))) (string? G493a@who)) G493a@who (if (not G493a@who) ((lambda (G4946@t) ((lambda (G4948@ls/false) (if (if G4948@ls/false (begin '#f (apply (lambda (G494a@id) (G2e28@id? G494a@id)) G4948@ls/false)) '#f) (apply (lambda (G494c@id) (G3164@syntax->datum G494c@id)) G4948@ls/false) ((lambda (G494e@t) ((lambda (G4950@ls/false) (if (if G4950@ls/false (begin '#f (apply (lambda (G4952@id G4953@rest) (G2e28@id? G4952@id)) G4950@ls/false)) '#f) (apply (lambda (G4956@id G4957@rest) (G3164@syntax->datum G4956@id)) G4950@ls/false) ((lambda (G495a@t) ((lambda (G495c@ls/false) (if G495c@ls/false (apply (lambda () '#f) G495c@ls/false) (G315e@syntax-violation '#f '"invalid syntax" G495a@t))) (G306b@syntax-dispatch G495a@t '_))) G494e@t))) (G306b@syntax-dispatch G494e@t '(any . any)))) G4946@t))) (G306b@syntax-dispatch G4946@t 'any))) G493c@form) (assertion-violation 'syntax-violation '"invalid who argument" G493a@who))))))) (set! G315e@syntax-violation (lambda G496c ((lambda (G496d) (if (= G496d '3) (apply (lambda (G495e@who G495f@msg G4960@form) (G315e@syntax-violation G495e@who G495f@msg G4960@form '#f)) G496c) (if (= G496d '4) (apply (lambda (G4964@who G4965@msg G4966@form G4967@subform) (G315c@syntax-violation* G4964@who G4965@msg G4966@form (G4c33@G4bc1@make-syntax-violation (G3164@syntax->datum G4966@form) (G3164@syntax->datum G4967@subform)))) G496c) (error 'apply '"invalid arg count")))) (length G496c)))) (set! G3160@identifier? (lambda (G496e@x) (G2e28@id? G496e@x))) (set! G3162@datum->syntax (lambda (G4970@id G4971@datum) (if (G2e28@id? G4970@id) (G2e06@datum->stx G4970@id G4971@datum) (assertion-violation 'datum->syntax '"not an identifier" G4970@id)))) (set! G3164@syntax->datum (lambda (G4974@x) (G2e3e@stx->datum G4974@x))) (set! G3166@compile-r6rs-top-level (lambda (G4976@x*) (call-with-values (lambda () (G30ea@top-level-expander G4976@x*)) (lambda (G497a@G4978 G497b@G4979) ((lambda (G497e@invoke-code G497f@lib*) (lambda () (begin (for-each G2c1d@G2ab2@invoke-library G497f@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29de@G2986@expanded->core G497e@invoke-code)) (void)) (eval-core (G29de@G2986@expanded->core G497e@invoke-code))))) G497b@G4979 G497a@G4978))))) (set! G3168@pre-compile-r6rs-top-level (lambda (G4982@x*) (call-with-values (lambda () (G30ea@top-level-expander G4982@x*)) (lambda (G4986@G4984 G4987@G4985) ((lambda (G498a@invoke-code G498b@lib*) (begin (for-each G2c1d@G2ab2@invoke-library G498b@lib*) (G2978@G2889@compile-core (G29de@G2986@expanded->core G498a@invoke-code)))) G4987@G4985 G4986@G4984))))) (set! G316a@interaction-environment ((lambda (G498e@the-env) (lambda () ((lambda (G4990@t) (if G4990@t G4990@t (begin '#f ((lambda (G4992@lib G4993@rib) (begin ((lambda (G4996@subst) (begin (G2dc7@set-rib-sym*! G4993@rib (map car G4996@subst)) (G2dc9@set-rib-mark**! G4993@rib (map (lambda (G4998@x) G2d9c@top-mark*) G4996@subst)) (G2dcb@set-rib-label*! G4993@rib (map cdr G4996@subst)))) (G2bf2@G2a5c@library-subst G4992@lib)) ((lambda (G499a@env) (begin (set! G498e@the-env G499a@env) G499a@env)) (G311a@make-interaction-env G4993@rib '() '())))) (G2c16@G2aa4@find-library-by-name '(mosh interaction)) (G2dd3@make-cache-rib))))) G498e@the-env))) '#f)) (set! G316c@top-level-context (G297a@G288d@make-parameter '#f)) (begin (set! G4aa9@G316c@top-level-context G316c@top-level-context) (set! G4aa8@G316a@interaction-environment G316a@interaction-environment) (set! G4aa7@G3168@pre-compile-r6rs-top-level G3168@pre-compile-r6rs-top-level) (set! G4aa6@G3166@compile-r6rs-top-level G3166@compile-r6rs-top-level) (set! G4aa5@G3164@syntax->datum G3164@syntax->datum) (set! G4aa4@G3162@datum->syntax G3162@datum->syntax) (set! G4aa3@G3160@identifier? G3160@identifier?) (set! G4aa2@G315e@syntax-violation G315e@syntax-violation) (set! G4aa1@G315c@syntax-violation* G315c@syntax-violation*) (set! G4aa0@G315a@extract-trace G315a@extract-trace) (set! G4a9f@G3158@syntax-error G3158@syntax-error) (set! G4a9e@G3156@assertion-error G3156@assertion-error) (set! G4a9d@G3154@expression-position G3154@expression-position) (set! G4a9c@G3152@extract-position-condition G3152@extract-position-condition) (set! G4a9b@G3150@make-source-condition G3150@make-source-condition) (set! G4a9a@G314e@bound-identifier=? G314e@bound-identifier=?) (set! G4a99@G314c@free-identifier=? G314c@free-identifier=?) (set! G4a98@G314a@generate-temporaries G314a@generate-temporaries) (set! G4a97@G3148@make-export-env/macros G3148@make-export-env/macros) (set! G4a96@G3146@make-export-subst G3146@make-export-subst) (set! G4a95@G3144@build-exports G3144@build-exports) (set! G4a94@G3142@rev-map-append G3142@rev-map-append) (set! G4a93@G3140@boot-library-expand G3140@boot-library-expand) (set! G4a92@G313e@library-expander G313e@library-expander) (set! G4a91@G313c@eval G313c@eval) (set! G4a90@G313a@expand G313a@expand) (set! G4a8f@G3138@scheme-report-environment G3138@scheme-report-environment) (set! G4a8e@G3136@null-environment G3136@null-environment) (set! G4a8d@G3134@environment G3134@environment) (set! G4a8c@G3132@environment-symbols G3132@environment-symbols) (set! G4a8b@G3130@environment? G3130@environment?) (set! G4a8a@G312e@parse-binding G312e@parse-binding) (set! G4a89@G312c@environment-bindings G312c@environment-bindings) (set! G4a88@G312a@interaction-environment-symbols G312a@interaction-environment-symbols) (set! G4a87@G3128@rp G3128@rp) (set! G4a86@G3126@set-interaction-env-locs! G3126@set-interaction-env-locs!) (set! G4a85@G3124@set-interaction-env-r! G3124@set-interaction-env-r!) (set! G4a84@G3122@set-interaction-env-rib! G3122@set-interaction-env-rib!) (set! G4a83@G3120@interaction-env-locs G3120@interaction-env-locs) (set! G4a82@G311e@interaction-env-r G311e@interaction-env-r) (set! G4a81@G311c@interaction-env-rib G311c@interaction-env-rib) (set! G4a80@G311a@make-interaction-env G311a@make-interaction-env) (set! G4a7f@G3118@interaction-env? G3118@interaction-env?) (set! G4a7e@G3113@G310b G3113@G310b) (set! G4a7d@G3111@G310c G3111@G310c) (set! G4a7c@G310f@G310a G310f@G310a) (set! G4a7b@G3109@rp G3109@rp) (set! G4a7a@G3107@set-env-itc! G3107@set-env-itc!) (set! G4a79@G3105@set-env-labels! G3105@set-env-labels!) (set! G4a78@G3103@set-env-names! G3103@set-env-names!) (set! G4a77@G3101@env-itc G3101@env-itc) (set! G4a76@G30ff@env-labels G30ff@env-labels) (set! G4a75@G30fd@env-names G30fd@env-names) (set! G4a74@G30fb@make-env G30fb@make-env) (set! G4a73@G30f9@env? G30f9@env?) (set! G4a72@G30f4@G30ec G30f4@G30ec) (set! G4a71@G30f2@G30ed G30f2@G30ed) (set! G4a70@G30f0@G30eb G30f0@G30eb) (set! G4a6f@G30ea@top-level-expander G30ea@top-level-expander) (set! G4a6e@G30e8@parse-top-level-program G30e8@parse-top-level-program) (set! G4a6d@G30e6@core-library-expander G30e6@core-library-expander) (set! G4a6c@G30e4@library-body-expander G30e4@library-body-expander) (set! G4a6b@G30e2@chi-interaction-expr G30e2@chi-interaction-expr) (set! G4a6a@G30e0@chi-library-internal G30e0@chi-library-internal) (set! G4a69@G30de@imp-collector G30de@imp-collector) (set! G4a68@G30dc@vis-collector G30dc@vis-collector) (set! G4a67@G30da@inv-collector G30da@inv-collector) (set! G4a66@G30d8@make-collector G30d8@make-collector) (set! G4a65@G30d6@make-top-rib G30d6@make-top-rib) (set! G4a64@G30d4@parse-import-spec* G30d4@parse-import-spec*) (set! G4a63@G30d2@parse-library G30d2@parse-library) (set! G4a62@G30d0@parse-library-name G30d0@parse-library-name) (set! G4a61@G30ce@parse-exports G30ce@parse-exports) (set! G4a60@G30cc@expand-transformer G30cc@expand-transformer) (set! G4a5f@G30ca@chi-body* G30ca@chi-body*) (set! G4a5e@G30c8@chi-internal-module G30c8@chi-internal-module) (set! G4a5d@G30c6@module-interface-exp-id* G30c6@module-interface-exp-id*) (set! G4a5c@G30c4@set-module-interface-exp-lab-vec! G30c4@set-module-interface-exp-lab-vec!) (set! G4a5b@G30c2@set-module-interface-exp-id-vec! G30c2@set-module-interface-exp-id-vec!) (set! G4a5a@G30c0@set-module-interface-first-mark! G30c0@set-module-interface-first-mark!) (set! G4a59@G30be@module-interface-exp-lab-vec G30be@module-interface-exp-lab-vec) (set! G4a58@G30bc@module-interface-exp-id-vec G30bc@module-interface-exp-id-vec) (set! G4a57@G30ba@module-interface-first-mark G30ba@module-interface-first-mark) (set! G4a56@G30b8@make-module-interface G30b8@make-module-interface) (set! G4a55@G30b6@module-interface? G30b6@module-interface?) (set! G4a54@G30b1@G30a9 G30b1@G30a9) (set! G4a53@G30af@G30aa G30af@G30aa) (set! G4a52@G30ad@G30a8 G30ad@G30a8) (set! G4a51@G30a7@parse-module G30a7@parse-module) (set! G4a50@G30a5@chi-internal G30a5@chi-internal) (set! G4a4f@G30a3@find-dups G30a3@find-dups) (set! G4a4e@G30a1@find-bound=? G30a1@find-bound=?) (set! G4a4d@G309f@chi-rhs* G309f@chi-rhs*) (set! G4a4c@G309d@expand-interaction-rhs*/init* G309d@expand-interaction-rhs*/init*) (set! G4a4b@G309b@chi-rhs G309b@chi-rhs) (set! G4a4a@G3099@chi-defun G3099@chi-defun) (set! G4a49@G3097@chi-lambda-clause* G3097@chi-lambda-clause*) (set! G4a48@G3095@chi-lambda-clause G3095@chi-lambda-clause) (set! G4a47@G3093@verify-formals G3093@verify-formals) (set! G4a46@G3091@chi-set! G3091@chi-set!) (set! G4a45@G308f@chi-expr G308f@chi-expr) (set! G4a44@G308d@chi-application G308d@chi-application) (set! G4a43@G308b@chi-expr* G308b@chi-expr*) (set! G4a42@G3089@chi-global-macro G3089@chi-global-macro) (set! G4a41@G3087@chi-local-macro G3087@chi-local-macro) (set! G4a40@G3085@chi-macro G3085@chi-macro) (set! G4a3f@G3083@do-macro-call G3083@do-macro-call) (set! G4a3e@G3081@local-macro-transformer G3081@local-macro-transformer) (set! G4a3d@G307f@macro-transformer G307f@macro-transformer) (set! G4a3c@G307d@symbol-macro G307d@symbol-macro) (set! G4a3b@G307b@file-options-macro G307b@file-options-macro) (set! G4a3a@G3079@core-macro-transformer G3079@core-macro-transformer) (set! G4a39@G3077@syntax-transformer G3077@syntax-transformer) (set! G4a38@G3075@ellipsis-map G3075@ellipsis-map) (set! G4a37@G3073@syntax-case-transformer G3073@syntax-case-transformer) (set! G4a36@G3071@verify-literals G3071@verify-literals) (set! G4a35@G306f@underscore? G306f@underscore?) (set! G4a34@G306d@ellipsis? G306d@ellipsis?) (set! G4a33@G306b@syntax-dispatch G306b@syntax-dispatch) (set! G4a32@G3069@convert-pattern G3069@convert-pattern) (set! G4a31@G3067@foreign-call-transformer G3067@foreign-call-transformer) (set! G4a30@G3065@parameterize-macro G3065@parameterize-macro) (set! G4a2f@G3063@incorrect-usage-macro G3063@incorrect-usage-macro) (set! G4a2e@G3061@define-condition-type-macro G3061@define-condition-type-macro) (set! G4a2d@G305f@define-record-type-macro G305f@define-record-type-macro) (set! G4a2c@G305d@define-struct-macro G305d@define-struct-macro) (set! G4a2b@G305b@quasisyntax-macro G305b@quasisyntax-macro) (set! G4a2a@G3059@quasiquote-macro G3059@quasiquote-macro) (set! G4a29@G3057@syntax-rules-macro G3057@syntax-rules-macro) (set! G4a28@G3055@include-into-macro G3055@include-into-macro) (set! G4a27@G3053@include-macro G3053@include-macro) (set! G4a26@G3051@do-include G3051@do-include) (set! G4a25@G304f@cond-macro G304f@cond-macro) (set! G4a24@G304d@and-macro G304d@and-macro) (set! G4a23@G304b@or-macro G304b@or-macro) (set! G4a22@G3049@let*-macro G3049@let*-macro) (set! G4a21@G3047@do-macro G3047@do-macro) (set! G4a20@G3045@identifier-syntax-macro G3045@identifier-syntax-macro) (set! G4a1f@G3043@endianness-macro G3043@endianness-macro) (set! G4a1e@G3041@assert-macro G3041@assert-macro) (set! G4a1d@G303f@delay-macro G303f@delay-macro) (set! G4a1c@G303d@time-macro G303d@time-macro) (set! G4a1b@G303b@define-enumeration-macro G303b@define-enumeration-macro) (set! G4a1a@G3039@guard-macro G3039@guard-macro) (set! G4a19@G3037@trace-letrec-syntax-macro G3037@trace-letrec-syntax-macro) (set! G4a18@G3035@trace-let-syntax-macro G3035@trace-let-syntax-macro) (set! G4a17@G3033@trace-let/rec-syntax G3033@trace-let/rec-syntax) (set! G4a16@G3031@trace-define-syntax-macro G3031@trace-define-syntax-macro) (set! G4a15@G302f@trace-define-macro G302f@trace-define-macro) (set! G4a14@G302d@trace-lambda-macro G302d@trace-lambda-macro) (set! G4a13@G302b@let*-values-macro G302b@let*-values-macro) (set! G4a12@G3029@let-values-macro G3029@let-values-macro) (set! G4a11@G3027@let-macro G3027@let-macro) (set! G4a10@G3025@invalid-fmls-error G3025@invalid-fmls-error) (set! G4a0f@G3023@with-syntax-macro G3023@with-syntax-macro) (set! G4a0e@G3021@bless G3021@bless) (set! G4a0d@G301f@lambda-transformer G301f@lambda-transformer) (set! G4a0c@G301d@case-lambda-transformer G301d@case-lambda-transformer) (set! G4a0b@G301b@quote-transformer G301b@quote-transformer) (set! G4a0a@G3019@case-macro G3019@case-macro) (set! G4a09@G3017@if-transformer G3017@if-transformer) (set! G4a08@G3015@unless-macro G3015@unless-macro) (set! G4a07@G3013@when-macro G3013@when-macro) (set! G4a06@G3011@record-constructor-descriptor-transformer G3011@record-constructor-descriptor-transformer) (set! G4a05@G300f@record-type-descriptor-transformer G300f@record-type-descriptor-transformer) (set! G4a04@G300d@type-descriptor-transformer G300d@type-descriptor-transformer) (set! G4a03@G300b@fluid-let-syntax-transformer G300b@fluid-let-syntax-transformer) (set! G4a02@G3009@letrec*-transformer G3009@letrec*-transformer) (set! G4a01@G3007@letrec-transformer G3007@letrec-transformer) (set! G4a00@G3005@letrec-helper G3005@letrec-helper) (set! G49ff@G3003@add-lexicals G3003@add-lexicals) (set! G49fe@G3001@add-lexical G3001@add-lexical) (set! G49fd@G2fff@set-lexical-mutable! G2fff@set-lexical-mutable!) (set! G49fc@G2ffd@lexical-mutable? G2ffd@lexical-mutable?) (set! G49fb@G2ffb@lexical-var G2ffb@lexical-var) (set! G49fa@G2ff9@scheme-stx G2ff9@scheme-stx) (set! G49f9@G2ff7@scheme-stx-hashtable G2ff7@scheme-stx-hashtable) (set! G49f8@G2ff5@parse-define-syntax G2ff5@parse-define-syntax) (set! G49f7@G2ff3@parse-define G2ff3@parse-define) (set! G49f6@G2e6f@make-eval-transformer G2e6f@make-eval-transformer) (set! G49f5@G2e6d@variable-transformer-procedure G2e6d@variable-transformer-procedure) (set! G49f4@G2e6b@variable-transformer? G2e6b@variable-transformer?) (set! G49f3@G2e69@make-variable-transformer G2e69@make-variable-transformer) (set! G49f2@G2e67@sanitize-binding G2e67@sanitize-binding) (set! G49f1@G2e50@syntax-type G2e50@syntax-type) (set! G49f0@G2e4e@raise-unbound-error G2e4e@raise-unbound-error) (set! G49ef@G2e4c@binding-value G2e4c@binding-value) (set! G49ee@G2e4a@binding-type G2e4a@binding-type) (set! G49ed@G2e48@make-binding G2e48@make-binding) (set! G49ec@G2e46@label->binding G2e46@label->binding) (set! G49eb@G2e44@id->real-label G2e44@id->real-label) (set! G49ea@G2e42@id->label G2e42@id->label) (set! G49e9@G2e40@same-marks*? G2e40@same-marks*?) (set! G49e8@G2e3e@stx->datum G2e3e@stx->datum) (set! G49e7@G2e3c@strip G2e3c@strip) (set! G49e6@G2e3a@strip-annotations G2e3a@strip-annotations) (set! G49e5@G2e38@self-evaluating? G2e38@self-evaluating?) (set! G49e4@G2e36@bound-id-member? G2e36@bound-id-member?) (set! G49e3@G2e34@distinct-bound-ids? G2e34@distinct-bound-ids?) (set! G49e2@G2e32@valid-bound-ids? G2e32@valid-bound-ids?) (set! G49e1@G2e30@free-id=? G2e30@free-id=?) (set! G49e0@G2e2e@bound-id=? G2e2e@bound-id=?) (set! G49df@G2e2c@same-marks? G2e2c@same-marks?) (set! G49de@G2e2a@id->sym G2e2a@id->sym) (set! G49dd@G2e28@id? G2e28@id?) (set! G49dc@G2e26@syntax->list G2e26@syntax->list) (set! G49db@G2e24@syntax-cdr G2e24@syntax-cdr) (set! G49da@G2e22@syntax-car G2e22@syntax-car) (set! G49d9@G2e20@syntax-list? G2e20@syntax-list?) (set! G49d8@G2e1e@syntax-null? G2e1e@syntax-null?) (set! G49d7@G2e1c@syntax-vector? G2e1c@syntax-vector?) (set! G49d6@G2e1a@syntax-pair? G2e1a@syntax-pair?) (set! G49d5@G2e18@syntax-vector->list G2e18@syntax-vector->list) (set! G49d4@G2e16@syntax-kind? G2e16@syntax-kind?) (set! G49d3@G2e14@add-subst G2e14@add-subst) (set! G49d2@G2e12@add-mark G2e12@add-mark) (set! G49d1@G2e10@mkstx G2e10@mkstx) (set! G49d0@G2e0e@join-wraps G2e0e@join-wraps) (set! G49cf@G2e0c@anti-mark? G2e0c@anti-mark?) (set! G49ce@G2e0a@anti-mark G2e0a@anti-mark) (set! G49cd@G2e08@gen-mark G2e08@gen-mark) (set! G49cc@G2e06@datum->stx G2e06@datum->stx) (set! G49cb@G2e04@rp G2e04@rp) (set! G49ca@G2e02@set-stx-ae*! G2e02@set-stx-ae*!) (set! G49c9@G2e00@set-stx-subst*! G2e00@set-stx-subst*!) (set! G49c8@G2dfe@set-stx-mark*! G2dfe@set-stx-mark*!) (set! G49c7@G2dfc@set-stx-expr! G2dfc@set-stx-expr!) (set! G49c6@G2dfa@stx-ae* G2dfa@stx-ae*) (set! G49c5@G2df8@stx-subst* G2df8@stx-subst*) (set! G49c4@G2df6@stx-mark* G2df6@stx-mark*) (set! G49c3@G2df4@stx-expr G2df4@stx-expr) (set! G49c2@G2df2@make-stx G2df2@make-stx) (set! G49c1@G2df0@stx? G2df0@stx?) (set! G49c0@G2deb@G2de3 G2deb@G2de3) (set! G49bf@G2de9@G2de4 G2de9@G2de4) (set! G49be@G2de7@G2de2 G2de7@G2de2) (set! G49bd@G2de1@make-full-rib G2de1@make-full-rib) (set! G49bc@G2ddf@unseal-rib! G2ddf@unseal-rib!) (set! G49bb@G2ddd@seal-rib! G2ddd@seal-rib!) (set! G49ba@G2ddb@make-rib-map G2ddb@make-rib-map) (set! G49b9@G2dd9@extend-rib/nc! G2dd9@extend-rib/nc!) (set! G49b8@G2dd7@extend-rib! G2dd7@extend-rib!) (set! G49b7@G2dd5@find-label G2dd5@find-label) (set! G49b6@G2dd3@make-cache-rib G2dd3@make-cache-rib) (set! G49b5@G2dd1@make-empty-rib G2dd1@make-empty-rib) (set! G49b4@G2dcf@set-rib-cache! G2dcf@set-rib-cache!) (set! G49b3@G2dcd@set-rib-sealed/freq! G2dcd@set-rib-sealed/freq!) (set! G49b2@G2dcb@set-rib-label*! G2dcb@set-rib-label*!) (set! G49b1@G2dc9@set-rib-mark**! G2dc9@set-rib-mark**!) (set! G49b0@G2dc7@set-rib-sym*! G2dc7@set-rib-sym*!) (set! G49af@G2dc5@rib-cache G2dc5@rib-cache) (set! G49ae@G2dc3@rib-sealed/freq G2dc3@rib-sealed/freq) (set! G49ad@G2dc1@rib-label* G2dc1@rib-label*) (set! G49ac@G2dbf@rib-mark** G2dbf@rib-mark**) (set! G49ab@G2dbd@rib-sym* G2dbd@rib-sym*) (set! G49aa@G2dbb@make-rib G2dbb@make-rib) (set! G49a9@G2db9@rib? G2db9@rib?) (set! G49a8@G2db4@G2dac G2db4@G2dac) (set! G49a7@G2db2@G2dad G2db2@G2dad) (set! G49a6@G2db0@G2dab G2db0@G2dab) (set! G49a5@G2daa@gen-define-label G2daa@gen-define-label) (set! G49a4@G2da8@gen-define-label+loc G2da8@gen-define-label+loc) (set! G49a3@G2da6@gen-top-level-label G2da6@gen-top-level-label) (set! G49a2@G2da4@gen-label G2da4@gen-label) (set! G49a1@G2da2@gen-global G2da2@gen-global) (set! G49a0@G2da0@gen-lexical G2da0@gen-lexical) (set! G499f@G2d9e@top-marked? G2d9e@top-marked?) (set! G499e@G2d9c@top-mark* G2d9c@top-mark*) (set! G499d@G2d97@set-union G2d97@set-union) (set! G499c@G2d95@set-cons G2d95@set-cons) (G2c13@G2a9e@current-library-expander G313e@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ab3@G4aae G4ab5@G4ab0 G4ab7@G4aaf G4abc@&condition? G4abe@make-&condition G4ac0@&condition-rtd G4ac2@&condition-rcd G4aca@G4ac5 G4acc@G4ac7 G4ace@G4ac6 G4ad3@G4ac4 G4ad5@make-message-condition G4ad7@G4ac3 G4ad9@message-condition? G4adb@condition-message G4ae2@G4add G4ae4@G4adf G4ae6@G4ade G4aeb@G4adc G4aed@make-warning G4aef@warning? G4af6@G4af1 G4af8@G4af3 G4afa@G4af2 G4aff@G4af0 G4b01@make-serious-condition G4b03@serious-condition? G4b0a@G4b05 G4b0c@G4b07 G4b0e@G4b06 G4b13@G4b04 G4b15@make-error G4b17@error? G4b1e@G4b19 G4b20@G4b1b G4b22@G4b1a G4b27@G4b18 G4b29@make-violation G4b2b@violation? G4b32@G4b2d G4b34@G4b2f G4b36@G4b2e G4b3b@G4b2c G4b3d@make-assertion-violation G4b3f@assertion-violation? G4b47@G4b42 G4b49@G4b44 G4b4b@G4b43 G4b50@G4b41 G4b52@make-irritants-condition G4b54@G4b40 G4b56@irritants-condition? G4b58@condition-irritants G4b60@G4b5b G4b62@G4b5d G4b64@G4b5c G4b69@G4b5a G4b6b@make-who-condition G4b6d@G4b59 G4b6f@who-condition? G4b71@condition-who G4b78@G4b73 G4b7a@G4b75 G4b7c@G4b74 G4b81@G4b72 G4b83@make-non-continuable-violation G4b85@non-continuable-violation? G4b8c@G4b87 G4b8e@G4b89 G4b90@G4b88 G4b95@G4b86 G4b97@make-implementation-restriction-violation G4b99@implementation-restriction-violation? G4ba0@G4b9b G4ba2@G4b9d G4ba4@G4b9c G4ba9@G4b9a G4bab@make-lexical-violation G4bad@lexical-violation? G4bb6@G4bb1 G4bb8@G4bb3 G4bba@G4bb2 G4bbf@G4bb0 G4bc1@make-syntax-violation G4bc3@G4bae G4bc5@G4baf G4bc7@syntax-violation? G4bc9@syntax-violation-form G4bcb@syntax-violation-subform G4bd2@G4bcd G4bd4@G4bcf G4bd6@G4bce G4bdb@G4bcc G4bdd@make-undefined-violation G4bdf@undefined-violation?) (begin (set! G4ab3@G4aae (make-record-type-descriptor '&condition '#f 'G4ab1 '#f '#f '#())) (set! G4ab5@G4ab0 '#f) (set! G4ab7@G4aaf (make-record-constructor-descriptor G4ab3@G4aae '#f G4ab5@G4ab0)) (set! G4abc@&condition? (record-predicate G4ab3@G4aae)) (set! G4abe@make-&condition (record-constructor G4ab7@G4aaf)) (set! G4ac0@&condition-rtd G4ab3@G4aae) (set! G4ac2@&condition-rcd G4ab7@G4aaf) (set! G4aca@G4ac5 (make-record-type-descriptor '&message G4ab3@G4aae 'G4ac8 '#f '#f '#((immutable message)))) (set! G4acc@G4ac7 '#f) (set! G4ace@G4ac6 (make-record-constructor-descriptor G4aca@G4ac5 G4ab7@G4aaf G4acc@G4ac7)) (set! G4ad3@G4ac4 (record-predicate G4aca@G4ac5)) (set! G4ad5@make-message-condition (record-constructor G4ace@G4ac6)) (set! G4ad7@G4ac3 (record-accessor G4aca@G4ac5 '0)) (set! G4ad9@message-condition? (condition-predicate G4aca@G4ac5)) (set! G4adb@condition-message (condition-accessor G4aca@G4ac5 G4ad7@G4ac3)) (set! G4ae2@G4add (make-record-type-descriptor '&warning G4ab3@G4aae 'G4ae0 '#f '#f '#())) (set! G4ae4@G4adf '#f) (set! G4ae6@G4ade (make-record-constructor-descriptor G4ae2@G4add G4ab7@G4aaf G4ae4@G4adf)) (set! G4aeb@G4adc (record-predicate G4ae2@G4add)) (set! G4aed@make-warning (record-constructor G4ae6@G4ade)) (set! G4aef@warning? (condition-predicate G4ae2@G4add)) (set! G4af6@G4af1 (make-record-type-descriptor '&serious G4ab3@G4aae 'G4af4 '#f '#f '#())) (set! G4af8@G4af3 '#f) (set! G4afa@G4af2 (make-record-constructor-descriptor G4af6@G4af1 G4ab7@G4aaf G4af8@G4af3)) (set! G4aff@G4af0 (record-predicate G4af6@G4af1)) (set! G4b01@make-serious-condition (record-constructor G4afa@G4af2)) (set! G4b03@serious-condition? (condition-predicate G4af6@G4af1)) (set! G4b0a@G4b05 (make-record-type-descriptor '&error G4af6@G4af1 'G4b08 '#f '#f '#())) (set! G4b0c@G4b07 '#f) (set! G4b0e@G4b06 (make-record-constructor-descriptor G4b0a@G4b05 G4afa@G4af2 G4b0c@G4b07)) (set! G4b13@G4b04 (record-predicate G4b0a@G4b05)) (set! G4b15@make-error (record-constructor G4b0e@G4b06)) (set! G4b17@error? (condition-predicate G4b0a@G4b05)) (set! G4b1e@G4b19 (make-record-type-descriptor '&violation G4af6@G4af1 'G4b1c '#f '#f '#())) (set! G4b20@G4b1b '#f) (set! G4b22@G4b1a (make-record-constructor-descriptor G4b1e@G4b19 G4afa@G4af2 G4b20@G4b1b)) (set! G4b27@G4b18 (record-predicate G4b1e@G4b19)) (set! G4b29@make-violation (record-constructor G4b22@G4b1a)) (set! G4b2b@violation? (condition-predicate G4b1e@G4b19)) (set! G4b32@G4b2d (make-record-type-descriptor '&assertion G4b1e@G4b19 'G4b30 '#f '#f '#())) (set! G4b34@G4b2f '#f) (set! G4b36@G4b2e (make-record-constructor-descriptor G4b32@G4b2d G4b22@G4b1a G4b34@G4b2f)) (set! G4b3b@G4b2c (record-predicate G4b32@G4b2d)) (set! G4b3d@make-assertion-violation (record-constructor G4b36@G4b2e)) (set! G4b3f@assertion-violation? (condition-predicate G4b32@G4b2d)) (set! G4b47@G4b42 (make-record-type-descriptor '&irritants G4ab3@G4aae 'G4b45 '#f '#f '#((immutable irritants)))) (set! G4b49@G4b44 '#f) (set! G4b4b@G4b43 (make-record-constructor-descriptor G4b47@G4b42 G4ab7@G4aaf G4b49@G4b44)) (set! G4b50@G4b41 (record-predicate G4b47@G4b42)) (set! G4b52@make-irritants-condition (record-constructor G4b4b@G4b43)) (set! G4b54@G4b40 (record-accessor G4b47@G4b42 '0)) (set! G4b56@irritants-condition? (condition-predicate G4b47@G4b42)) (set! G4b58@condition-irritants (condition-accessor G4b47@G4b42 G4b54@G4b40)) (set! G4b60@G4b5b (make-record-type-descriptor '&who G4ab3@G4aae 'G4b5e '#f '#f '#((immutable who)))) (set! G4b62@G4b5d '#f) (set! G4b64@G4b5c (make-record-constructor-descriptor G4b60@G4b5b G4ab7@G4aaf G4b62@G4b5d)) (set! G4b69@G4b5a (record-predicate G4b60@G4b5b)) (set! G4b6b@make-who-condition (record-constructor G4b64@G4b5c)) (set! G4b6d@G4b59 (record-accessor G4b60@G4b5b '0)) (set! G4b6f@who-condition? (condition-predicate G4b60@G4b5b)) (set! G4b71@condition-who (condition-accessor G4b60@G4b5b G4b6d@G4b59)) (set! G4b78@G4b73 (make-record-type-descriptor '&non-continuable G4b1e@G4b19 'G4b76 '#f '#f '#())) (set! G4b7a@G4b75 '#f) (set! G4b7c@G4b74 (make-record-constructor-descriptor G4b78@G4b73 G4b22@G4b1a G4b7a@G4b75)) (set! G4b81@G4b72 (record-predicate G4b78@G4b73)) (set! G4b83@make-non-continuable-violation (record-constructor G4b7c@G4b74)) (set! G4b85@non-continuable-violation? (condition-predicate G4b78@G4b73)) (set! G4b8c@G4b87 (make-record-type-descriptor '&implementation-restriction G4b1e@G4b19 'G4b8a '#f '#f '#())) (set! G4b8e@G4b89 '#f) (set! G4b90@G4b88 (make-record-constructor-descriptor G4b8c@G4b87 G4b22@G4b1a G4b8e@G4b89)) (set! G4b95@G4b86 (record-predicate G4b8c@G4b87)) (set! G4b97@make-implementation-restriction-violation (record-constructor G4b90@G4b88)) (set! G4b99@implementation-restriction-violation? (condition-predicate G4b8c@G4b87)) (set! G4ba0@G4b9b (make-record-type-descriptor '&lexical G4b1e@G4b19 'G4b9e '#f '#f '#())) (set! G4ba2@G4b9d '#f) (set! G4ba4@G4b9c (make-record-constructor-descriptor G4ba0@G4b9b G4b22@G4b1a G4ba2@G4b9d)) (set! G4ba9@G4b9a (record-predicate G4ba0@G4b9b)) (set! G4bab@make-lexical-violation (record-constructor G4ba4@G4b9c)) (set! G4bad@lexical-violation? (condition-predicate G4ba0@G4b9b)) (set! G4bb6@G4bb1 (make-record-type-descriptor '&syntax G4b1e@G4b19 'G4bb4 '#f '#f '#((immutable form) (immutable subform)))) (set! G4bb8@G4bb3 '#f) (set! G4bba@G4bb2 (make-record-constructor-descriptor G4bb6@G4bb1 G4b22@G4b1a G4bb8@G4bb3)) (set! G4bbf@G4bb0 (record-predicate G4bb6@G4bb1)) (set! G4bc1@make-syntax-violation (record-constructor G4bba@G4bb2)) (set! G4bc3@G4bae (record-accessor G4bb6@G4bb1 '0)) (set! G4bc5@G4baf (record-accessor G4bb6@G4bb1 '1)) (set! G4bc7@syntax-violation? (condition-predicate G4bb6@G4bb1)) (set! G4bc9@syntax-violation-form (condition-accessor G4bb6@G4bb1 G4bc3@G4bae)) (set! G4bcb@syntax-violation-subform (condition-accessor G4bb6@G4bb1 G4bc5@G4baf)) (set! G4bd2@G4bcd (make-record-type-descriptor '&undefined G4b1e@G4b19 'G4bd0 '#f '#f '#())) (set! G4bd4@G4bcf '#f) (set! G4bd6@G4bce (make-record-constructor-descriptor G4bd2@G4bcd G4b22@G4b1a G4bd4@G4bcf)) (set! G4bdb@G4bcc (record-predicate G4bd2@G4bcd)) (set! G4bdd@make-undefined-violation (record-constructor G4bd6@G4bce)) (set! G4bdf@undefined-violation? (condition-predicate G4bd2@G4bcd)) (begin (set! G4c3e@G4bdf@undefined-violation? G4bdf@undefined-violation?) (set! G4c3d@G4bdd@make-undefined-violation G4bdd@make-undefined-violation) (set! G4c3c@G4bdb@G4bcc G4bdb@G4bcc) (set! G4c3b@G4bd6@G4bce G4bd6@G4bce) (set! G4c3a@G4bd4@G4bcf G4bd4@G4bcf) (set! G4c39@G4bd2@G4bcd G4bd2@G4bcd) (set! G4c38@G4bcb@syntax-violation-subform G4bcb@syntax-violation-subform) (set! G4c37@G4bc9@syntax-violation-form G4bc9@syntax-violation-form) (set! G4c36@G4bc7@syntax-violation? G4bc7@syntax-violation?) (set! G4c35@G4bc5@G4baf G4bc5@G4baf) (set! G4c34@G4bc3@G4bae G4bc3@G4bae) (set! G4c33@G4bc1@make-syntax-violation G4bc1@make-syntax-violation) (set! G4c32@G4bbf@G4bb0 G4bbf@G4bb0) (set! G4c31@G4bba@G4bb2 G4bba@G4bb2) (set! G4c30@G4bb8@G4bb3 G4bb8@G4bb3) (set! G4c2f@G4bb6@G4bb1 G4bb6@G4bb1) (set! G4c2e@G4bad@lexical-violation? G4bad@lexical-violation?) (set! G4c2d@G4bab@make-lexical-violation G4bab@make-lexical-violation) (set! G4c2c@G4ba9@G4b9a G4ba9@G4b9a) (set! G4c2b@G4ba4@G4b9c G4ba4@G4b9c) (set! G4c2a@G4ba2@G4b9d G4ba2@G4b9d) (set! G4c29@G4ba0@G4b9b G4ba0@G4b9b) (set! G4c28@G4b99@implementation-restriction-violation? G4b99@implementation-restriction-violation?) (set! G4c27@G4b97@make-implementation-restriction-violation G4b97@make-implementation-restriction-violation) (set! G4c26@G4b95@G4b86 G4b95@G4b86) (set! G4c25@G4b90@G4b88 G4b90@G4b88) (set! G4c24@G4b8e@G4b89 G4b8e@G4b89) (set! G4c23@G4b8c@G4b87 G4b8c@G4b87) (set! G4c22@G4b85@non-continuable-violation? G4b85@non-continuable-violation?) (set! G4c21@G4b83@make-non-continuable-violation G4b83@make-non-continuable-violation) (set! G4c20@G4b81@G4b72 G4b81@G4b72) (set! G4c1f@G4b7c@G4b74 G4b7c@G4b74) (set! G4c1e@G4b7a@G4b75 G4b7a@G4b75) (set! G4c1d@G4b78@G4b73 G4b78@G4b73) (set! G4c1c@G4b71@condition-who G4b71@condition-who) (set! G4c1b@G4b6f@who-condition? G4b6f@who-condition?) (set! G4c1a@G4b6d@G4b59 G4b6d@G4b59) (set! G4c19@G4b6b@make-who-condition G4b6b@make-who-condition) (set! G4c18@G4b69@G4b5a G4b69@G4b5a) (set! G4c17@G4b64@G4b5c G4b64@G4b5c) (set! G4c16@G4b62@G4b5d G4b62@G4b5d) (set! G4c15@G4b60@G4b5b G4b60@G4b5b) (set! G4c14@G4b58@condition-irritants G4b58@condition-irritants) (set! G4c13@G4b56@irritants-condition? G4b56@irritants-condition?) (set! G4c12@G4b54@G4b40 G4b54@G4b40) (set! G4c11@G4b52@make-irritants-condition G4b52@make-irritants-condition) (set! G4c10@G4b50@G4b41 G4b50@G4b41) (set! G4c0f@G4b4b@G4b43 G4b4b@G4b43) (set! G4c0e@G4b49@G4b44 G4b49@G4b44) (set! G4c0d@G4b47@G4b42 G4b47@G4b42) (set! G4c0c@G4b3f@assertion-violation? G4b3f@assertion-violation?) (set! G4c0b@G4b3d@make-assertion-violation G4b3d@make-assertion-violation) (set! G4c0a@G4b3b@G4b2c G4b3b@G4b2c) (set! G4c09@G4b36@G4b2e G4b36@G4b2e) (set! G4c08@G4b34@G4b2f G4b34@G4b2f) (set! G4c07@G4b32@G4b2d G4b32@G4b2d) (set! G4c06@G4b2b@violation? G4b2b@violation?) (set! G4c05@G4b29@make-violation G4b29@make-violation) (set! G4c04@G4b27@G4b18 G4b27@G4b18) (set! G4c03@G4b22@G4b1a G4b22@G4b1a) (set! G4c02@G4b20@G4b1b G4b20@G4b1b) (set! G4c01@G4b1e@G4b19 G4b1e@G4b19) (set! G4c00@G4b17@error? G4b17@error?) (set! G4bff@G4b15@make-error G4b15@make-error) (set! G4bfe@G4b13@G4b04 G4b13@G4b04) (set! G4bfd@G4b0e@G4b06 G4b0e@G4b06) (set! G4bfc@G4b0c@G4b07 G4b0c@G4b07) (set! G4bfb@G4b0a@G4b05 G4b0a@G4b05) (set! G4bfa@G4b03@serious-condition? G4b03@serious-condition?) (set! G4bf9@G4b01@make-serious-condition G4b01@make-serious-condition) (set! G4bf8@G4aff@G4af0 G4aff@G4af0) (set! G4bf7@G4afa@G4af2 G4afa@G4af2) (set! G4bf6@G4af8@G4af3 G4af8@G4af3) (set! G4bf5@G4af6@G4af1 G4af6@G4af1) (set! G4bf4@G4aef@warning? G4aef@warning?) (set! G4bf3@G4aed@make-warning G4aed@make-warning) (set! G4bf2@G4aeb@G4adc G4aeb@G4adc) (set! G4bf1@G4ae6@G4ade G4ae6@G4ade) (set! G4bf0@G4ae4@G4adf G4ae4@G4adf) (set! G4bef@G4ae2@G4add G4ae2@G4add) (set! G4bee@G4adb@condition-message G4adb@condition-message) (set! G4bed@G4ad9@message-condition? G4ad9@message-condition?) (set! G4bec@G4ad7@G4ac3 G4ad7@G4ac3) (set! G4beb@G4ad5@make-message-condition G4ad5@make-message-condition) (set! G4bea@G4ad3@G4ac4 G4ad3@G4ac4) (set! G4be9@G4ace@G4ac6 G4ace@G4ac6) (set! G4be8@G4acc@G4ac7 G4acc@G4ac7) (set! G4be7@G4aca@G4ac5 G4aca@G4ac5) (set! G4be6@G4ac2@&condition-rcd G4ac2@&condition-rcd) (set! G4be5@G4ac0@&condition-rtd G4ac0@&condition-rtd) (set! G4be4@G4abe@make-&condition G4abe@make-&condition) (set! G4be3@G4abc@&condition? G4abc@&condition?) (set! G4be2@G4ab7@G4aaf G4ab7@G4aaf) (set! G4be1@G4ab5@G4ab0 G4ab5@G4ab0) (set! G4be0@G4ab3@G4aae G4ab3@G4aae)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c46@G4c41 G4c48@G4c43 G4c4a@G4c42 G4c4f@G4c40 G4c51@make-i/o-error G4c53@i/o-error? G4c5a@G4c55 G4c5c@G4c57 G4c5e@G4c56 G4c63@G4c54 G4c65@make-i/o-read-error G4c67@i/o-read-error? G4c6e@G4c69 G4c70@G4c6b G4c72@G4c6a G4c77@G4c68 G4c79@make-i/o-write-error G4c7b@i/o-write-error? G4c83@G4c7e G4c85@G4c80 G4c87@G4c7f G4c8c@G4c7d G4c8e@make-i/o-invalid-position-error G4c90@G4c7c G4c92@i/o-invalid-position-error? G4c94@i/o-error-position G4c9c@G4c97 G4c9e@G4c99 G4ca0@G4c98 G4ca5@G4c96 G4ca7@make-i/o-filename-error G4ca9@G4c95 G4cab@i/o-filename-error? G4cad@i/o-error-filename G4cb4@G4caf G4cb6@G4cb1 G4cb8@G4cb0 G4cbd@G4cae G4cbf@make-i/o-file-protection-error G4cc1@i/o-file-protection-error? G4cc8@G4cc3 G4cca@G4cc5 G4ccc@G4cc4 G4cd1@G4cc2 G4cd3@make-i/o-file-is-read-only-error G4cd5@i/o-file-is-read-only-error? G4cdc@G4cd7 G4cde@G4cd9 G4ce0@G4cd8 G4ce5@G4cd6 G4ce7@make-i/o-file-already-exists-error G4ce9@i/o-file-already-exists-error? G4cf0@G4ceb G4cf2@G4ced G4cf4@G4cec G4cf9@G4cea G4cfb@make-i/o-file-does-not-exist-error G4cfd@i/o-file-does-not-exist-error? G4d05@G4d00 G4d07@G4d02 G4d09@G4d01 G4d0e@G4cff G4d10@make-i/o-port-error G4d12@G4cfe G4d14@i/o-port-error? G4d16@i/o-error-port G4d1d@G4d18 G4d1f@G4d1a G4d21@G4d19 G4d26@G4d17 G4d28@make-i/o-decoding-error G4d2a@i/o-decoding-error? G4d32@G4d2d G4d34@G4d2f G4d36@G4d2e G4d3b@G4d2c G4d3d@make-i/o-encoding-error G4d3f@G4d2b G4d41@i/o-encoding-error? G4d43@i/o-encoding-error-char) (begin (set! G4c46@G4c41 (make-record-type-descriptor '&i/o &error-rtd 'G4c44 '#f '#f '#())) (set! G4c48@G4c43 '#f) (set! G4c4a@G4c42 (make-record-constructor-descriptor G4c46@G4c41 &error-rcd G4c48@G4c43)) (set! G4c4f@G4c40 (record-predicate G4c46@G4c41)) (set! G4c51@make-i/o-error (record-constructor G4c4a@G4c42)) (set! G4c53@i/o-error? (condition-predicate G4c46@G4c41)) (set! G4c5a@G4c55 (make-record-type-descriptor '&i/o-read G4c46@G4c41 'G4c58 '#f '#f '#())) (set! G4c5c@G4c57 '#f) (set! G4c5e@G4c56 (make-record-constructor-descriptor G4c5a@G4c55 G4c4a@G4c42 G4c5c@G4c57)) (set! G4c63@G4c54 (record-predicate G4c5a@G4c55)) (set! G4c65@make-i/o-read-error (record-constructor G4c5e@G4c56)) (set! G4c67@i/o-read-error? (condition-predicate G4c5a@G4c55)) (set! G4c6e@G4c69 (make-record-type-descriptor '&i/o-write G4c46@G4c41 'G4c6c '#f '#f '#())) (set! G4c70@G4c6b '#f) (set! G4c72@G4c6a (make-record-constructor-descriptor G4c6e@G4c69 G4c4a@G4c42 G4c70@G4c6b)) (set! G4c77@G4c68 (record-predicate G4c6e@G4c69)) (set! G4c79@make-i/o-write-error (record-constructor G4c72@G4c6a)) (set! G4c7b@i/o-write-error? (condition-predicate G4c6e@G4c69)) (set! G4c83@G4c7e (make-record-type-descriptor '&i/o-invalid-position G4c46@G4c41 'G4c81 '#f '#f '#((immutable position)))) (set! G4c85@G4c80 '#f) (set! G4c87@G4c7f (make-record-constructor-descriptor G4c83@G4c7e G4c4a@G4c42 G4c85@G4c80)) (set! G4c8c@G4c7d (record-predicate G4c83@G4c7e)) (set! G4c8e@make-i/o-invalid-position-error (record-constructor G4c87@G4c7f)) (set! G4c90@G4c7c (record-accessor G4c83@G4c7e '0)) (set! G4c92@i/o-invalid-position-error? (condition-predicate G4c83@G4c7e)) (set! G4c94@i/o-error-position (condition-accessor G4c83@G4c7e G4c90@G4c7c)) (set! G4c9c@G4c97 (make-record-type-descriptor '&i/o-filename G4c46@G4c41 'G4c9a '#f '#f '#((immutable filename)))) (set! G4c9e@G4c99 '#f) (set! G4ca0@G4c98 (make-record-constructor-descriptor G4c9c@G4c97 G4c4a@G4c42 G4c9e@G4c99)) (set! G4ca5@G4c96 (record-predicate G4c9c@G4c97)) (set! G4ca7@make-i/o-filename-error (record-constructor G4ca0@G4c98)) (set! G4ca9@G4c95 (record-accessor G4c9c@G4c97 '0)) (set! G4cab@i/o-filename-error? (condition-predicate G4c9c@G4c97)) (set! G4cad@i/o-error-filename (condition-accessor G4c9c@G4c97 G4ca9@G4c95)) (set! G4cb4@G4caf (make-record-type-descriptor '&i/o-file-protection G4c46@G4c41 'G4cb2 '#f '#f '#())) (set! G4cb6@G4cb1 '#f) (set! G4cb8@G4cb0 (make-record-constructor-descriptor G4cb4@G4caf G4c4a@G4c42 G4cb6@G4cb1)) (set! G4cbd@G4cae (record-predicate G4cb4@G4caf)) (set! G4cbf@make-i/o-file-protection-error (record-constructor G4cb8@G4cb0)) (set! G4cc1@i/o-file-protection-error? (condition-predicate G4cb4@G4caf)) (set! G4cc8@G4cc3 (make-record-type-descriptor '&i/o-file-is-read-only G4cb4@G4caf 'G4cc6 '#f '#f '#())) (set! G4cca@G4cc5 '#f) (set! G4ccc@G4cc4 (make-record-constructor-descriptor G4cc8@G4cc3 G4cb8@G4cb0 G4cca@G4cc5)) (set! G4cd1@G4cc2 (record-predicate G4cc8@G4cc3)) (set! G4cd3@make-i/o-file-is-read-only-error (record-constructor G4ccc@G4cc4)) (set! G4cd5@i/o-file-is-read-only-error? (condition-predicate G4cc8@G4cc3)) (set! G4cdc@G4cd7 (make-record-type-descriptor '&i/o-file-already-exists G4c9c@G4c97 'G4cda '#f '#f '#())) (set! G4cde@G4cd9 '#f) (set! G4ce0@G4cd8 (make-record-constructor-descriptor G4cdc@G4cd7 G4ca0@G4c98 G4cde@G4cd9)) (set! G4ce5@G4cd6 (record-predicate G4cdc@G4cd7)) (set! G4ce7@make-i/o-file-already-exists-error (record-constructor G4ce0@G4cd8)) (set! G4ce9@i/o-file-already-exists-error? (condition-predicate G4cdc@G4cd7)) (set! G4cf0@G4ceb (make-record-type-descriptor '&i/o-file-does-not-exist G4c9c@G4c97 'G4cee '#f '#f '#())) (set! G4cf2@G4ced '#f) (set! G4cf4@G4cec (make-record-constructor-descriptor G4cf0@G4ceb G4ca0@G4c98 G4cf2@G4ced)) (set! G4cf9@G4cea (record-predicate G4cf0@G4ceb)) (set! G4cfb@make-i/o-file-does-not-exist-error (record-constructor G4cf4@G4cec)) (set! G4cfd@i/o-file-does-not-exist-error? (condition-predicate G4cf0@G4ceb)) (set! G4d05@G4d00 (make-record-type-descriptor '&i/o-port G4c46@G4c41 'G4d03 '#f '#f '#((immutable port)))) (set! G4d07@G4d02 '#f) (set! G4d09@G4d01 (make-record-constructor-descriptor G4d05@G4d00 G4c4a@G4c42 G4d07@G4d02)) (set! G4d0e@G4cff (record-predicate G4d05@G4d00)) (set! G4d10@make-i/o-port-error (record-constructor G4d09@G4d01)) (set! G4d12@G4cfe (record-accessor G4d05@G4d00 '0)) (set! G4d14@i/o-port-error? (condition-predicate G4d05@G4d00)) (set! G4d16@i/o-error-port (condition-accessor G4d05@G4d00 G4d12@G4cfe)) (set! G4d1d@G4d18 (make-record-type-descriptor '&i/o-decoding G4d05@G4d00 'G4d1b '#f '#f '#())) (set! G4d1f@G4d1a '#f) (set! G4d21@G4d19 (make-record-constructor-descriptor G4d1d@G4d18 G4d09@G4d01 G4d1f@G4d1a)) (set! G4d26@G4d17 (record-predicate G4d1d@G4d18)) (set! G4d28@make-i/o-decoding-error (record-constructor G4d21@G4d19)) (set! G4d2a@i/o-decoding-error? (condition-predicate G4d1d@G4d18)) (set! G4d32@G4d2d (make-record-type-descriptor '&i/o-encoding G4d05@G4d00 'G4d30 '#f '#f '#((immutable char)))) (set! G4d34@G4d2f '#f) (set! G4d36@G4d2e (make-record-constructor-descriptor G4d32@G4d2d G4d09@G4d01 G4d34@G4d2f)) (set! G4d3b@G4d2c (record-predicate G4d32@G4d2d)) (set! G4d3d@make-i/o-encoding-error (record-constructor G4d36@G4d2e)) (set! G4d3f@G4d2b (record-accessor G4d32@G4d2d '0)) (set! G4d41@i/o-encoding-error? (condition-predicate G4d32@G4d2d)) (set! G4d43@i/o-encoding-error-char (condition-accessor G4d32@G4d2d G4d3f@G4d2b)) (begin (set! G4d93@G4d43@i/o-encoding-error-char G4d43@i/o-encoding-error-char) (set! G4d92@G4d41@i/o-encoding-error? G4d41@i/o-encoding-error?) (set! G4d91@G4d3f@G4d2b G4d3f@G4d2b) (set! G4d90@G4d3d@make-i/o-encoding-error G4d3d@make-i/o-encoding-error) (set! G4d8f@G4d3b@G4d2c G4d3b@G4d2c) (set! G4d8e@G4d36@G4d2e G4d36@G4d2e) (set! G4d8d@G4d34@G4d2f G4d34@G4d2f) (set! G4d8c@G4d32@G4d2d G4d32@G4d2d) (set! G4d8b@G4d2a@i/o-decoding-error? G4d2a@i/o-decoding-error?) (set! G4d8a@G4d28@make-i/o-decoding-error G4d28@make-i/o-decoding-error) (set! G4d89@G4d26@G4d17 G4d26@G4d17) (set! G4d88@G4d21@G4d19 G4d21@G4d19) (set! G4d87@G4d1f@G4d1a G4d1f@G4d1a) (set! G4d86@G4d1d@G4d18 G4d1d@G4d18) (set! G4d85@G4d16@i/o-error-port G4d16@i/o-error-port) (set! G4d84@G4d14@i/o-port-error? G4d14@i/o-port-error?) (set! G4d83@G4d12@G4cfe G4d12@G4cfe) (set! G4d82@G4d10@make-i/o-port-error G4d10@make-i/o-port-error) (set! G4d81@G4d0e@G4cff G4d0e@G4cff) (set! G4d80@G4d09@G4d01 G4d09@G4d01) (set! G4d7f@G4d07@G4d02 G4d07@G4d02) (set! G4d7e@G4d05@G4d00 G4d05@G4d00) (set! G4d7d@G4cfd@i/o-file-does-not-exist-error? G4cfd@i/o-file-does-not-exist-error?) (set! G4d7c@G4cfb@make-i/o-file-does-not-exist-error G4cfb@make-i/o-file-does-not-exist-error) (set! G4d7b@G4cf9@G4cea G4cf9@G4cea) (set! G4d7a@G4cf4@G4cec G4cf4@G4cec) (set! G4d79@G4cf2@G4ced G4cf2@G4ced) (set! G4d78@G4cf0@G4ceb G4cf0@G4ceb) (set! G4d77@G4ce9@i/o-file-already-exists-error? G4ce9@i/o-file-already-exists-error?) (set! G4d76@G4ce7@make-i/o-file-already-exists-error G4ce7@make-i/o-file-already-exists-error) (set! G4d75@G4ce5@G4cd6 G4ce5@G4cd6) (set! G4d74@G4ce0@G4cd8 G4ce0@G4cd8) (set! G4d73@G4cde@G4cd9 G4cde@G4cd9) (set! G4d72@G4cdc@G4cd7 G4cdc@G4cd7) (set! G4d71@G4cd5@i/o-file-is-read-only-error? G4cd5@i/o-file-is-read-only-error?) (set! G4d70@G4cd3@make-i/o-file-is-read-only-error G4cd3@make-i/o-file-is-read-only-error) (set! G4d6f@G4cd1@G4cc2 G4cd1@G4cc2) (set! G4d6e@G4ccc@G4cc4 G4ccc@G4cc4) (set! G4d6d@G4cca@G4cc5 G4cca@G4cc5) (set! G4d6c@G4cc8@G4cc3 G4cc8@G4cc3) (set! G4d6b@G4cc1@i/o-file-protection-error? G4cc1@i/o-file-protection-error?) (set! G4d6a@G4cbf@make-i/o-file-protection-error G4cbf@make-i/o-file-protection-error) (set! G4d69@G4cbd@G4cae G4cbd@G4cae) (set! G4d68@G4cb8@G4cb0 G4cb8@G4cb0) (set! G4d67@G4cb6@G4cb1 G4cb6@G4cb1) (set! G4d66@G4cb4@G4caf G4cb4@G4caf) (set! G4d65@G4cad@i/o-error-filename G4cad@i/o-error-filename) (set! G4d64@G4cab@i/o-filename-error? G4cab@i/o-filename-error?) (set! G4d63@G4ca9@G4c95 G4ca9@G4c95) (set! G4d62@G4ca7@make-i/o-filename-error G4ca7@make-i/o-filename-error) (set! G4d61@G4ca5@G4c96 G4ca5@G4c96) (set! G4d60@G4ca0@G4c98 G4ca0@G4c98) (set! G4d5f@G4c9e@G4c99 G4c9e@G4c99) (set! G4d5e@G4c9c@G4c97 G4c9c@G4c97) (set! G4d5d@G4c94@i/o-error-position G4c94@i/o-error-position) (set! G4d5c@G4c92@i/o-invalid-position-error? G4c92@i/o-invalid-position-error?) (set! G4d5b@G4c90@G4c7c G4c90@G4c7c) (set! G4d5a@G4c8e@make-i/o-invalid-position-error G4c8e@make-i/o-invalid-position-error) (set! G4d59@G4c8c@G4c7d G4c8c@G4c7d) (set! G4d58@G4c87@G4c7f G4c87@G4c7f) (set! G4d57@G4c85@G4c80 G4c85@G4c80) (set! G4d56@G4c83@G4c7e G4c83@G4c7e) (set! G4d55@G4c7b@i/o-write-error? G4c7b@i/o-write-error?) (set! G4d54@G4c79@make-i/o-write-error G4c79@make-i/o-write-error) (set! G4d53@G4c77@G4c68 G4c77@G4c68) (set! G4d52@G4c72@G4c6a G4c72@G4c6a) (set! G4d51@G4c70@G4c6b G4c70@G4c6b) (set! G4d50@G4c6e@G4c69 G4c6e@G4c69) (set! G4d4f@G4c67@i/o-read-error? G4c67@i/o-read-error?) (set! G4d4e@G4c65@make-i/o-read-error G4c65@make-i/o-read-error) (set! G4d4d@G4c63@G4c54 G4c63@G4c54) (set! G4d4c@G4c5e@G4c56 G4c5e@G4c56) (set! G4d4b@G4c5c@G4c57 G4c5c@G4c57) (set! G4d4a@G4c5a@G4c55 G4c5a@G4c55) (set! G4d49@G4c53@i/o-error? G4c53@i/o-error?) (set! G4d48@G4c51@make-i/o-error G4c51@make-i/o-error) (set! G4d47@G4c4f@G4c40 G4c4f@G4c40) (set! G4d46@G4c4a@G4c42 G4c4a@G4c42) (set! G4d45@G4c48@G4c43 G4c48@G4c43) (set! G4d44@G4c46@G4c41 G4c46@G4c41)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29db@G2980@current-primitive-locations (lambda (G515d@x) ((lambda (G515f@t) (if G515f@t (cdr G515f@t) '#f)) (assq G515d@x '((syntax-error . G4a9f@G3158@syntax-error) (syntax-dispatch . G4a33@G306b@syntax-dispatch) (load . G4e2c@G4da2@load) (interaction-environment . G4aa8@G316a@interaction-environment) (make-variable-transformer . G49f3@G2e69@make-variable-transformer) (identifier? . G4aa3@G3160@identifier?) (generate-temporaries . G4a98@G314a@generate-temporaries) (free-identifier=? . G4a99@G314c@free-identifier=?) (syntax->datum . G4aa5@G3164@syntax->datum) (datum->syntax . G4aa4@G3162@datum->syntax) (bound-identifier=? . G4a9a@G314e@bound-identifier=?) (make-i/o-write-error . G4d54@G4c79@make-i/o-write-error) (make-i/o-read-error . G4d4e@G4c65@make-i/o-read-error) (make-i/o-port-error . G4d82@G4d10@make-i/o-port-error) (make-i/o-invalid-position-error . G4d5a@G4c8e@make-i/o-invalid-position-error) (make-i/o-filename-error . G4d62@G4ca7@make-i/o-filename-error) (make-i/o-file-protection-error . G4d6a@G4cbf@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4d70@G4cd3@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4d7c@G4cfb@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4d76@G4ce7@make-i/o-file-already-exists-error) (make-i/o-error . G4d48@G4c51@make-i/o-error) (make-i/o-encoding-error . G4d90@G4d3d@make-i/o-encoding-error) (make-i/o-decoding-error . G4d8a@G4d28@make-i/o-decoding-error) (i/o-write-error? . G4d55@G4c7b@i/o-write-error?) (i/o-read-error? . G4d4f@G4c67@i/o-read-error?) (i/o-port-error? . G4d84@G4d14@i/o-port-error?) (i/o-invalid-position-error? . G4d5c@G4c92@i/o-invalid-position-error?) (i/o-filename-error? . G4d64@G4cab@i/o-filename-error?) (i/o-file-protection-error? . G4d6b@G4cc1@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4d71@G4cd5@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4d7d@G4cfd@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4d77@G4ce9@i/o-file-already-exists-error?) (i/o-error? . G4d49@G4c53@i/o-error?) (i/o-error-port . G4d85@G4d16@i/o-error-port) (i/o-error-filename . G4d65@G4cad@i/o-error-filename) (i/o-encoding-error? . G4d92@G4d41@i/o-encoding-error?) (i/o-encoding-error-char . G4d93@G4d43@i/o-encoding-error-char) (i/o-decoding-error? . G4d8b@G4d2a@i/o-decoding-error?) (scheme-report-environment . G4a8f@G3138@scheme-report-environment) (null-environment . G4a8e@G3136@null-environment) (command-line . G4e29@G4d9c@command-line) (eval . G4a91@G313c@eval) (environment . G4a8d@G3134@environment) (who-condition? . G4c1b@G4b6f@who-condition?) (warning? . G4bf4@G4aef@warning?) (violation? . G4c06@G4b2b@violation?) (undefined-violation? . G4c3e@G4bdf@undefined-violation?) (syntax-violation? . G4c36@G4bc7@syntax-violation?) (syntax-violation-subform . G4c38@G4bcb@syntax-violation-subform) (syntax-violation-form . G4c37@G4bc9@syntax-violation-form) (syntax-violation . G4aa2@G315e@syntax-violation) (serious-condition? . G4bfa@G4b03@serious-condition?) (non-continuable-violation? . G4c22@G4b85@non-continuable-violation?) (message-condition? . G4bed@G4ad9@message-condition?) (make-who-condition . G4c19@G4b6b@make-who-condition) (make-warning . G4bf3@G4aed@make-warning) (make-violation . G4c05@G4b29@make-violation) (make-undefined-violation . G4c3d@G4bdd@make-undefined-violation) (make-syntax-violation . G4c33@G4bc1@make-syntax-violation) (make-serious-condition . G4bf9@G4b01@make-serious-condition) (make-non-continuable-violation . G4c21@G4b83@make-non-continuable-violation) (make-message-condition . G4beb@G4ad5@make-message-condition) (make-lexical-violation . G4c2d@G4bab@make-lexical-violation) (make-irritants-condition . G4c11@G4b52@make-irritants-condition) (make-implementation-restriction-violation . G4c27@G4b97@make-implementation-restriction-violation) (make-error . G4bff@G4b15@make-error) (make-assertion-violation . G4c0b@G4b3d@make-assertion-violation) (lexical-violation? . G4c2e@G4bad@lexical-violation?) (irritants-condition? . G4c13@G4b56@irritants-condition?) (implementation-restriction-violation? . G4c28@G4b99@implementation-restriction-violation?) (error? . G4c00@G4b17@error?) (condition-who . G4c1c@G4b71@condition-who) (condition-message . G4bee@G4adb@condition-message) (condition-irritants . G4c14@G4b58@condition-irritants) (assertion-violation? . G4c0c@G4b3f@assertion-violation?)))))) (G2c1b@G2aae@install-library 'G5131 '(mosh interaction) '() '() '() '() '((string-upcase . G50b4) (string-titlecase . G50b3) (string-normalize-nfkd . G50b2) (string-normalize-nfkc . G50b1) (string-normalize-nfd . G50b0) (string-normalize-nfc . G50af) (string-foldcase . G50ae) (string-downcase . G50ad) (string-ci>? . G50ac) (string-ci>=? . G50ab) (string-ci=? . G50aa) (string-ci<? . G50a9) (string-ci<=? . G50a8) (char-whitespace? . G50a7) (char-upper-case? . G50a6) (char-title-case? . G50a5) (char-numeric? . G50a4) (char-lower-case? . G50a3) (char-general-category . G50a2) (char-upcase . G50a1) (char-titlecase . G50a0) (char-foldcase . G509f) (char-downcase . G509e) (char-ci>? . G509d) (char-ci>=? . G509c) (char-ci=? . G509b) (char-ci<? . G509a) (char-ci<=? . G5099) (char-alphabetic? . G5098) (make-variable-transformer . G2e68) (identifier? . G315f) (generate-temporaries . G3149) (free-identifier=? . G314b) (syntax->datum . G3163) (datum->syntax . G3161) (bound-identifier=? . G314d) (record-type-descriptor? . G5097) (record-predicate . G5096) (record-mutator . G5095) (record-constructor . G5094) (record-accessor . G5093) (make-record-type-descriptor . G5092) (make-record-constructor-descriptor . G5091) (record? . G5090) (record-type-uid . G508f) (record-type-sealed? . G508e) (record-type-parent . G508d) (record-type-opaque? . G508c) (record-type-name . G508b) (record-type-generative? . G508a) (record-type-field-names . G5089) (record-rtd . G5088) (record-field-mutable? . G5087) (delete-file . G5086) (file-exists? . G5085) (vector-sort! . G5084) (vector-sort . G5083) (list-sort . G5082) (symbol-hash . G5081) (string-ci-hash . G5080) (string-hash . G507f) (equal-hash . G507e) (hashtable-equivalence-function . G507d) (make-hashtable . G507c) (hashtable-hash-function . G507b) (make-eqv-hashtable . G507a) (make-eq-hashtable . G5079) (hashtable? . G5078) (hashtable-update! . G5077) (hashtable-size . G5076) (hashtable-set! . G5075) (hashtable-ref . G5074) (hashtable-mutable? . G5073) (hashtable-keys . G5072) (hashtable-entries . G5071) (hashtable-delete! . G5070) (hashtable-copy . G506f) (hashtable-contains? . G506e) (hashtable-clear! . G506d) (call-with-output-file . G506c) (call-with-input-file . G506b) (write-char . G506a) (write . G5069) (with-output-to-file . G5068) (with-input-from-file . G5067) (read-char . G5066) (read . G5065) (peek-char . G5064) (open-output-file . G5063) (open-input-file . G5062) (newline . G5061) (display . G5060) (close-output-port . G505f) (close-input-port . G505e) (eof-object? . G505d) (eof-object . G505c) (current-error-port . G505b) (current-output-port . G505a) (current-input-port . G5059) (output-port? . G5058) (input-port? . G5057) (utf-8-codec . G5056) (utf-16-codec . G5055) (transcoder-error-handling-mode . G5054) (transcoder-eol-style . G5053) (transcoder-codec . G5052) (transcoded-port . G5051) (textual-port? . G5050) (string->bytevector . G504f) (standard-output-port . G504e) (standard-input-port . G504d) (standard-error-port . G504c) (set-port-position! . G504b) (put-u8 . G504a) (put-string . G5049) (put-datum . G5048) (put-char . G5047) (put-bytevector . G5046) (port? . G5045) (port-transcoder . G5044) (port-position . G5043) (port-has-set-port-position!? . G5042) (port-has-port-position? . G5041) (port-eof? . G5040) (output-port-buffer-mode . G503f) (open-string-output-port . G503e) (open-string-input-port . G503d) (open-file-output-port . G503c) (open-file-input/output-port . G503b) (open-file-input-port . G503a) (open-bytevector-output-port . G5039) (open-bytevector-input-port . G5038) (native-transcoder . G5037) (native-eol-style . G5036) (make-transcoder . G5035) (latin-1-codec . G5034) (make-i/o-write-error . G4c78) (make-i/o-read-error . G4c64) (make-i/o-port-error . G4d0f) (make-i/o-invalid-position-error . G4c8d) (make-i/o-filename-error . G4ca6) (make-i/o-file-protection-error . G4cbe) (make-i/o-file-is-read-only-error . G4cd2) (make-i/o-file-does-not-exist-error . G4cfa) (make-i/o-file-already-exists-error . G4ce6) (make-i/o-error . G4c50) (make-i/o-encoding-error . G4d3c) (make-i/o-decoding-error . G4d27) (make-custom-textual-output-port . G5033) (make-custom-textual-input/output-port . G5032) (make-custom-textual-input-port . G5031) (make-custom-binary-output-port . G5030) (make-custom-binary-input/output-port . G502f) (make-custom-binary-input-port . G502e) (make-bytevector . G502d) (lookahead-u8 . G502c) (lookahead-char . G502b) (i/o-write-error? . G4c7a) (i/o-read-error? . G4c66) (i/o-port-error? . G4d13) (i/o-invalid-position-error? . G4c91) (i/o-filename-error? . G4caa) (i/o-file-protection-error? . G4cc0) (i/o-file-is-read-only-error? . G4cd4) (i/o-file-does-not-exist-error? . G4cfc) (i/o-file-already-exists-error? . G4ce8) (i/o-error? . G4c52) (i/o-error-port . G4d15) (i/o-error-filename . G4cac) (i/o-encoding-error? . G4d40) (i/o-encoding-error-char . G4d42) (i/o-decoding-error? . G4d29) (get-u8 . G502a) (get-string-n! . G5029) (get-string-n . G5028) (get-string-all . G5027) (get-line . G5026) (get-datum . G5025) (get-char . G5024) (get-bytevector-some . G5023) (get-bytevector-n! . G5022) (get-bytevector-n . G5021) (get-bytevector-all . G5020) (flush-output-port . G501f) (close-port . G501e) (exit . G5017) (command-line . G4d9b) (string-fill! . G5016) (string-set! . G5015) (set-cdr! . G5014) (set-car! . G5013) (remove . G5012) (remv . G5011) (remp . G5010) (remq . G500f) (partition . G500e) (memv . G500d) (memq . G500c) (memp . G500b) (member . G500a) (exists . G5009) (for-all . G5008) (fold-right . G5007) (fold-left . G5006) (find . G5005) (filter . G5004) (cons* . G5003) (assv . G5002) (assq . G5001) (assp . G5000) (assoc . G4fff) (call-with-string-output-port . G4ffe) (call-with-port . G4ffd) (call-with-bytevector-output-port . G4ffc) (bytevector->string . G4ffb) (buffer-mode? . G4ffa) (binary-port? . G4ff9) (with-exception-handler . G4ff8) (raise-continuable . G4ff7) (raise . G4ff6) (eval . G313b) (environment . G3133) (make-enumeration . G4ff5) (enum-set=? . G4ff4) (enum-set-universe . G4ff3) (enum-set-union . G4ff2) (enum-set-subset? . G4ff1) (enum-set-projection . G4ff0) (enum-set-member? . G4fef) (enum-set-intersection . G4fee) (enum-set-indexer . G4fed) (enum-set-difference . G4fec) (enum-set-constructor . G4feb) (enum-set-complement . G4fea) (enum-set->list . G4fe9) (who-condition? . G4b6e) (warning? . G4aee) (violation? . G4b2a) (undefined-violation? . G4bde) (syntax-violation? . G4bc6) (syntax-violation-subform . G4bca) (syntax-violation-form . G4bc8) (syntax-violation . G315d) (simple-conditions . G4fe8) (serious-condition? . G4b02) (non-continuable-violation? . G4b84) (message-condition? . G4ad8) (make-who-condition . G4b6a) (make-warning . G4aec) (make-violation . G4b28) (make-undefined-violation . G4bdc) (make-syntax-violation . G4bc0) (make-serious-condition . G4b00) (make-non-continuable-violation . G4b82) (make-message-condition . G4ad4) (make-lexical-violation . G4baa) (make-irritants-condition . G4b51) (make-implementation-restriction-violation . G4b96) (make-error . G4b14) (make-assertion-violation . G4b3c) (lexical-violation? . G4bac) (irritants-condition? . G4b55) (implementation-restriction-violation? . G4b98) (error? . G4b16) (condition-who . G4b70) (condition-predicate . G4fe7) (condition-message . G4ada) (condition-irritants . G4b57) (condition-accessor . G4fe6) (condition . G4fe5) (assertion-violation? . G4b3e) (condition? . G4fe4) (utf32->string . G4fe3) (utf16->string . G4fe2) (utf8->string . G4fe1) (uint-list->bytevector . G4fe0) (u8-list->bytevector . G4fdf) (string->utf8 . G4fde) (string->utf32 . G4fdd) (string->utf16 . G4fdc) (sint-list->bytevector . G4fdb) (native-endianness . G4fda) (bytevector? . G4fd9) (bytevector=? . G4fd8) (bytevector-uint-set! . G4fd7) (bytevector-uint-ref . G4fd6) (bytevector-u8-set! . G4fd5) (bytevector-u8-ref . G4fd4) (bytevector-u64-set! . G4fd3) (bytevector-u64-ref . G4fd2) (bytevector-u64-native-set! . G4fd1) (bytevector-u64-native-ref . G4fd0) (bytevector-u32-set! . G4fcf) (bytevector-u32-ref . G4fce) (bytevector-u32-native-set! . G4fcd) (bytevector-u32-native-ref . G4fcc) (bytevector-u16-set! . G4fcb) (bytevector-u16-ref . G4fca) (bytevector-u16-native-set! . G4fc9) (bytevector-u16-native-ref . G4fc8) (bytevector-sint-set! . G4fc7) (bytevector-sint-ref . G4fc6) (bytevector-s8-set! . G4fc5) (bytevector-s8-ref . G4fc4) (bytevector-s64-set! . G4fc3) (bytevector-s64-ref . G4fc2) (bytevector-s64-native-set! . G4fc1) (bytevector-s64-native-ref . G4fc0) (bytevector-s32-set! . G4fbf) (bytevector-s32-ref . G4fbe) (bytevector-s32-native-set! . G4fbd) (bytevector-s32-native-ref . G4fbc) (bytevector-s16-set! . G4fbb) (bytevector-s16-ref . G4fba) (bytevector-s16-native-set! . G4fb9) (bytevector-s16-native-ref . G4fb8) (bytevector-length . G4fb7) (bytevector-ieee-single-ref . G4fb6) (bytevector-ieee-single-native-set! . G4fb5) (bytevector-ieee-single-native-ref . G4fb4) (bytevector-ieee-double-ref . G4fb3) (bytevector-ieee-double-native-set! . G4fb2) (bytevector-ieee-double-native-ref . G4fb1) (bytevector-fill! . G4fb0) (bytevector-copy! . G4faf) (bytevector-copy . G4fae) (bytevector->uint-list . G4fad) (bytevector->u8-list . G4fac) (bytevector->sint-list . G4fab) (no-nans-violation? . G4faa) (no-infinities-violation? . G4fa9) (make-no-nans-violation . G4fa8) (make-no-infinities-violation . G4fa7) (real->flonum . G4fa6) (flzero? . G4fa5) (fltruncate . G4fa4) (fltan . G4fa3) (flsqrt . G4fa2) (flsin . G4fa1) (flround . G4fa0) (flpositive? . G4f9f) (flonum? . G4f9e) (flodd? . G4f9d) (flnumerator . G4f9c) (flnegative? . G4f9b) (flnan? . G4f9a) (flmod0 . G4f99) (flmod . G4f98) (flmin . G4f97) (flmax . G4f96) (fllog . G4f95) (flinteger? . G4f94) (flinfinite? . G4f93) (flfloor . G4f92) (flfinite? . G4f91) (flexpt . G4f90) (flexp . G4f8f) (fleven? . G4f8e) (fldiv0-and-mod0 . G4f8d) (fldiv0 . G4f8c) (fldiv-and-mod . G4f8b) (fldiv . G4f8a) (fldenominator . G4f89) (flcos . G4f88) (flceiling . G4f87) (flatan . G4f86) (flasin . G4f85) (flacos . G4f84) (flabs . G4f83) (fl>? . G4f82) (fl>=? . G4f81) (fl=? . G4f80) (fl<? . G4f7f) (fl<=? . G4f7e) (fl/ . G4f7d) (fl- . G4f7c) (fl+ . G4f7b) (fl* . G4f7a) (fixnum->flonum . G4f79) (fxzero? . G4f78) (fxxor . G4f77) (fxrotate-bit-field . G4f76) (fxreverse-bit-field . G4f75) (fxpositive? . G4f74) (fxodd? . G4f73) (fxnot . G4f72) (fxnegative? . G4f71) (fxmod0 . G4f70) (fxmod . G4f6f) (fxmin . G4f6e) (fxmax . G4f6d) (fxlength . G4f6c) (fxior . G4f6b) (fxif . G4f6a) (fxfirst-bit-set . G4f69) (fxeven? . G4f68) (fxdiv0-and-mod0 . G4f67) (fxdiv0 . G4f66) (fxdiv-and-mod . G4f65) (fxdiv . G4f64) (fxcopy-bit-field . G4f63) (fxcopy-bit . G4f62) (fxbit-set? . G4f61) (fxbit-field . G4f60) (fxbit-count . G4f5f) (fxarithmetic-shift-right . G4f5e) (fxarithmetic-shift-left . G4f5d) (fxarithmetic-shift . G4f5c) (fxand . G4f5b) (fx>? . G4f5a) (fx>=? . G4f59) (fx=? . G4f58) (fx<? . G4f57) (fx<=? . G4f56) (fx-/carry . G4f55) (fx- . G4f54) (fx+/carry . G4f53) (fx+ . G4f52) (fx*/carry . G4f51) (fx* . G4f50) (greatest-fixnum . G4f4f) (least-fixnum . G4f4e) (fixnum-width . G4f4d) (fixnum? . G4f4c) (bitwise-rotate-bit-field . G4f4b) (bitwise-reverse-bit-field . G4f4a) (bitwise-length . G4f49) (bitwise-if . G4f48) (bitwise-first-bit-set . G4f47) (bitwise-copy-bit-field . G4f46) (bitwise-copy-bit . G4f45) (bitwise-bit-set? . G4f44) (bitwise-bit-field . G4f43) (bitwise-bit-count . G4f42) (bitwise-xor . G4f41) (bitwise-ior . G4f40) (bitwise-and . G4f3f) (bitwise-not . G4f3e) (bitwise-arithmetic-shift-right . G4f3d) (bitwise-arithmetic-shift-left . G4f3c) (bitwise-arithmetic-shift . G4f3b) (zero? . G4f3a) (vector? . G4f39) (vector-set! . G4f38) (vector-ref . G4f37) (vector-map . G4f36) (vector-length . G4f35) (vector-for-each . G4f34) (vector-fill! . G4f33) (vector->list . G4f32) (vector . G4f31) (values . G4f30) (truncate . G4f2f) (tan . G4f2e) (symbol? . G4f2d) (symbol=? . G4f2c) (symbol->string . G4f2b) (substring . G4f2a) (string? . G4f29) (string>? . G4f28) (string>=? . G4f27) (string=? . G4f26) (string<? . G4f25) (string<=? . G4f24) (string-ref . G4f23) (string-length . G4f22) (string-for-each . G4f21) (string-copy . G4f20) (string-append . G4f1f) (string->symbol . G4f1e) (string->number . G4f1d) (string->list . G4f1c) (string . G4f1b) (sqrt . G4f1a) (sin . G4f19) (round . G4f18) (reverse . G4f17) (real? . G4f16) (real-valued? . G4f15) (real-part . G4f14) (rationalize . G4f13) (rational? . G4f12) (rational-valued? . G4f11) (procedure? . G4f10) (positive? . G4f0f) (pair? . G4f0e) (odd? . G4f0d) (numerator . G4f0c) (number? . G4f0b) (number->string . G4f0a) (null? . G4f09) (not . G4f08) (negative? . G4f07) (nan? . G4f06) (min . G4f05) (max . G4f04) (map . G4f03) (make-vector . G4f02) (make-string . G4f01) (make-rectangular . G4f00) (make-polar . G4eff) (magnitude . G4efe) (log . G4efd) (list? . G4efc) (list-tail . G4efb) (list-ref . G4efa) (list->vector . G4ef9) (list->string . G4ef8) (list . G4ef7) (length . G4ef6) (lcm . G4ef5) (integer? . G4ef4) (integer-valued? . G4ef3) (integer->char . G4ef2) (infinite? . G4ef1) (inexact? . G4ef0) (inexact . G4eef) (imag-part . G4eee) (gcd . G4eed) (for-each . G4eec) (floor . G4eeb) (finite? . G4eea) (expt . G4ee9) (exp . G4ee8) (exact? . G4ee7) (exact-integer-sqrt . G4ee6) (exact . G4ee5) (even? . G4ee4) (error . G4ee3) (eqv? . G4ee2) (equal? . G4ee1) (eq? . G4ee0) (dynamic-wind . G4edf) (div0-and-mod0 . G4ede) (mod0 . G4edd) (div0 . G4edc) (div-and-mod . G4edb) (mod . G4eda) (div . G4ed9) (denominator . G4ed8) (cos . G4ed7) (cons . G4ed6) (complex? . G4ed5) (char? . G4ed4) (char>? . G4ed3) (char>=? . G4ed2) (char=? . G4ed1) (char<? . G4ed0) (char<=? . G4ecf) (char->integer . G4ece) (ceiling . G4ecd) (call-with-values . G4ecc) (call/cc . G4ecb) (call-with-current-continuation . G4eca) (cddddr . G4ec9) (cdddar . G4ec8) (cddadr . G4ec7) (cddaar . G4ec6) (cdaddr . G4ec5) (cdadar . G4ec4) (cdaadr . G4ec3) (cdaaar . G4ec2) (cadddr . G4ec1) (caddar . G4ec0) (cadadr . G4ebf) (cadaar . G4ebe) (caaddr . G4ebd) (caadar . G4ebc) (caaadr . G4ebb) (caaaar . G4eba) (cdddr . G4eb9) (cddar . G4eb8) (cdadr . G4eb7) (cdaar . G4eb6) (caddr . G4eb5) (cadar . G4eb4) (caadr . G4eb3) (caaar . G4eb2) (cddr . G4eb1) (cdar . G4eb0) (cadr . G4eaf) (caar . G4eae) (cdr . G4ead) (car . G4eac) (boolean? . G4eab) (boolean=? . G4eaa) (atan . G4ea9) (assertion-violation . G4ea8) (asin . G4ea7) (apply . G4ea6) (append . G4ea5) (angle . G4ea4) (acos . G4ea3) (abs . G4ea2) (/ . G4ea1) (* . G4ea0) (- . G4e9f) (+ . G4e9e) (>= . G4e9d) (> . G4e9c) (= . G4e9b) (<= . G4e9a) (< . G4e99) (library . G4e98) (export . G4e97) (&no-nans . G4e96) (&no-infinities . G4e95) (&i/o-encoding . G4e94) (&i/o-decoding . G4e93) (&i/o-port . G4e92) (&i/o-file-does-not-exist . G4e91) (&i/o-file-already-exists . G4e90) (&i/o-file-is-read-only . G4e8f) (&i/o-file-protection . G4e8e) (&i/o-filename . G4e8d) (&i/o-invalid-position . G4e8c) (&i/o-write . G4e8b) (&i/o-read . G4e8a) (&i/o . G4e89) (&undefined . G4e88) (&syntax . G4e87) (&lexical . G4e86) (&implementation-restriction . G4e85) (&non-continuable . G4e84) (&who . G4e83) (&irritants . G4e82) (&assertion . G4e81) (&violation . G4e80) (&error . G4e7f) (&serious . G4e7e) (&warning . G4e7d) (&message . G4e7c) (&condition . G4e7b) (define-condition-type . G4e7a) (define-enumeration . G4e79) (define-record-type . G4e78) (parent-rtd . G4e77) (nongenerative . G4e76) (opaque . G4e75) (sealed . G4e74) (protocol . G4e73) (parent . G4e72) (immutable . G4e71) (mutable . G4e70) (fields . G4e6f) (error-handling-mode . G4e6e) (file-options . G4e6d) (buffer-mode . G4e6c) (eol-style . G4e6b) (guard . G4e6a) (unsyntax-splicing . G4e67) (unsyntax . G4e66) (unquote-splicing . G4e65) (unquote . G4e64) (_ . G4e63) (else . G4e62) (=> . G4e61) (... . G4e60) (assert . G4e5f) (endianness . G4e5e) (or . G4e5b) (and . G4e5a) (do . G4e59) (cond . G4e58) (let* . G4e57) (let . G4e56) (let*-values . G4e55) (let-values . G4e54) (identifier-syntax . G4e53) (with-syntax . G4e52) (quasisyntax . G4e51) (quasiquote . G4e50) (syntax-rules . G4e4f) (include . G4e4e) (record-constructor-descriptor . G4e4c) (record-type-descriptor . G4e4b) (case . G4e4a) (unless . G4e48) (when . G4e47) (if . G4e46) (letrec* . G4e45) (letrec . G4e44) (case-lambda . G4e42) (lambda . G4e41) (syntax . G4e40) (syntax-case . G4e3f) (quote . G4e3e) (letrec-syntax . G4e3c) (let-syntax . G4e3b) (set! . G4e3a) (import . G4e39) (begin . G4e38) (define-syntax . G4e36) (define . G4e35)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5132 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4e65) (unquote . G4e64) (delay . G4e5d) (or . G4e5b) (and . G4e5a) (do . G4e59) (cond . G4e58) (let* . G4e57) (let . G4e56) (quasiquote . G4e50) (syntax-rules . G4e4f) (case . G4e4a) (if . G4e46) (letrec . G4e44) (lambda . G4e41) (quote . G4e3e) (letrec-syntax . G4e3c) (let-syntax . G4e3b) (set! . G4e3a) (begin . G4e38) (define-syntax . G4e36) (define . G4e35)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5133 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G50ac) (string-ci>=? . G50ab) (string-ci=? . G50aa) (string-ci<? . G50a9) (string-ci<=? . G50a8) (char-whitespace? . G50a7) (char-upper-case? . G50a6) (char-numeric? . G50a4) (char-lower-case? . G50a3) (char-upcase . G50a1) (char-downcase . G509e) (char-ci>? . G509d) (char-ci>=? . G509c) (char-ci=? . G509b) (char-ci<? . G509a) (char-ci<=? . G5099) (char-alphabetic? . G5098) (call-with-output-file . G506c) (call-with-input-file . G506b) (write-char . G506a) (write . G5069) (with-output-to-file . G5068) (with-input-from-file . G5067) (read-char . G5066) (read . G5065) (peek-char . G5064) (open-output-file . G5063) (open-input-file . G5062) (newline . G5061) (display . G5060) (close-output-port . G505f) (close-input-port . G505e) (eof-object . G505c) (current-output-port . G505a) (current-input-port . G5059) (output-port? . G5058) (input-port? . G5057) (scheme-report-environment . G3137) (quotient . G501d) (null-environment . G3135) (remainder . G501c) (modulo . G501b) (inexact->exact . G501a) (force . G5019) (exact->inexact . G5018) (string-fill! . G5016) (string-set! . G5015) (set-cdr! . G5014) (set-car! . G5013) (memv . G500d) (memq . G500c) (member . G500a) (assv . G5002) (assq . G5001) (assoc . G4fff) (eval . G313b) (zero? . G4f3a) (vector? . G4f39) (vector-set! . G4f38) (vector-ref . G4f37) (vector-length . G4f35) (vector-fill! . G4f33) (vector->list . G4f32) (vector . G4f31) (values . G4f30) (truncate . G4f2f) (tan . G4f2e) (symbol? . G4f2d) (symbol->string . G4f2b) (substring . G4f2a) (string? . G4f29) (string>? . G4f28) (string>=? . G4f27) (string=? . G4f26) (string<? . G4f25) (string<=? . G4f24) (string-ref . G4f23) (string-length . G4f22) (string-copy . G4f20) (string-append . G4f1f) (string->symbol . G4f1e) (string->number . G4f1d) (string->list . G4f1c) (string . G4f1b) (sqrt . G4f1a) (sin . G4f19) (round . G4f18) (reverse . G4f17) (real? . G4f16) (real-part . G4f14) (rationalize . G4f13) (rational? . G4f12) (procedure? . G4f10) (positive? . G4f0f) (pair? . G4f0e) (odd? . G4f0d) (numerator . G4f0c) (number? . G4f0b) (number->string . G4f0a) (not . G4f08) (negative? . G4f07) (min . G4f05) (max . G4f04) (map . G4f03) (make-vector . G4f02) (make-string . G4f01) (make-rectangular . G4f00) (make-polar . G4eff) (magnitude . G4efe) (log . G4efd) (list? . G4efc) (list-tail . G4efb) (list-ref . G4efa) (list->vector . G4ef9) (list->string . G4ef8) (list . G4ef7) (length . G4ef6) (lcm . G4ef5) (integer? . G4ef4) (integer->char . G4ef2) (inexact? . G4ef0) (imag-part . G4eee) (gcd . G4eed) (for-each . G4eec) (floor . G4eeb) (expt . G4ee9) (exp . G4ee8) (exact? . G4ee7) (even? . G4ee4) (eqv? . G4ee2) (equal? . G4ee1) (eq? . G4ee0) (dynamic-wind . G4edf) (denominator . G4ed8) (cos . G4ed7) (cons . G4ed6) (complex? . G4ed5) (char? . G4ed4) (char>? . G4ed3) (char>=? . G4ed2) (char=? . G4ed1) (char<? . G4ed0) (char<=? . G4ecf) (char->integer . G4ece) (ceiling . G4ecd) (call-with-values . G4ecc) (call-with-current-continuation . G4eca) (cddddr . G4ec9) (cdddar . G4ec8) (cddadr . G4ec7) (cddaar . G4ec6) (cdaddr . G4ec5) (cdadar . G4ec4) (cdaadr . G4ec3) (cdaaar . G4ec2) (cadddr . G4ec1) (caddar . G4ec0) (cadadr . G4ebf) (cadaar . G4ebe) (caaddr . G4ebd) (caadar . G4ebc) (caaadr . G4ebb) (caaaar . G4eba) (cdddr . G4eb9) (cddar . G4eb8) (cdadr . G4eb7) (cdaar . G4eb6) (caddr . G4eb5) (cadar . G4eb4) (caadr . G4eb3) (caaar . G4eb2) (cddr . G4eb1) (cdar . G4eb0) (cadr . G4eaf) (caar . G4eae) (cdr . G4ead) (car . G4eac) (boolean? . G4eab) (atan . G4ea9) (asin . G4ea7) (apply . G4ea6) (append . G4ea5) (angle . G4ea4) (acos . G4ea3) (abs . G4ea2) (/ . G4ea1) (* . G4ea0) (- . G4e9f) (+ . G4e9e) (>= . G4e9d) (> . G4e9c) (= . G4e9b) (<= . G4e9a) (< . G4e99) (unquote-splicing . G4e65) (unquote . G4e64) (delay . G4e5d) (or . G4e5b) (and . G4e5a) (do . G4e59) (cond . G4e58) (let* . G4e57) (let . G4e56) (quasiquote . G4e50) (syntax-rules . G4e4f) (case . G4e4a) (if . G4e46) (letrec . G4e44) (lambda . G4e41) (quote . G4e3e) (letrec-syntax . G4e3c) (let-syntax . G4e3b) (set! . G4e3a) (begin . G4e38) (define-syntax . G4e36) (define . G4e35)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5134 '(psyntax modules) '() '() '() '() '((module . G4e37)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5135 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5136 '(rnrs) '(6) '() '() '() '((regexp? . G50f1) (string-upcase . G50b4) (string-titlecase . G50b3) (string-normalize-nfkd . G50b2) (string-normalize-nfkc . G50b1) (string-normalize-nfd . G50b0) (string-normalize-nfc . G50af) (string-foldcase . G50ae) (string-downcase . G50ad) (string-ci>? . G50ac) (string-ci>=? . G50ab) (string-ci=? . G50aa) (string-ci<? . G50a9) (string-ci<=? . G50a8) (char-whitespace? . G50a7) (char-upper-case? . G50a6) (char-title-case? . G50a5) (char-numeric? . G50a4) (char-lower-case? . G50a3) (char-general-category . G50a2) (char-upcase . G50a1) (char-titlecase . G50a0) (char-foldcase . G509f) (char-downcase . G509e) (char-ci>? . G509d) (char-ci>=? . G509c) (char-ci=? . G509b) (char-ci<? . G509a) (char-ci<=? . G5099) (char-alphabetic? . G5098) (make-variable-transformer . G2e68) (identifier? . G315f) (generate-temporaries . G3149) (free-identifier=? . G314b) (syntax->datum . G3163) (datum->syntax . G3161) (bound-identifier=? . G314d) (record-type-descriptor? . G5097) (record-predicate . G5096) (record-mutator . G5095) (record-constructor . G5094) (record-accessor . G5093) (make-record-type-descriptor . G5092) (make-record-constructor-descriptor . G5091) (record? . G5090) (record-type-uid . G508f) (record-type-sealed? . G508e) (record-type-parent . G508d) (record-type-opaque? . G508c) (record-type-name . G508b) (record-type-generative? . G508a) (record-type-field-names . G5089) (record-rtd . G5088) (record-field-mutable? . G5087) (delete-file . G5086) (file-exists? . G5085) (vector-sort! . G5084) (vector-sort . G5083) (list-sort . G5082) (symbol-hash . G5081) (string-ci-hash . G5080) (string-hash . G507f) (equal-hash . G507e) (hashtable-equivalence-function . G507d) (make-hashtable . G507c) (hashtable-hash-function . G507b) (make-eqv-hashtable . G507a) (make-eq-hashtable . G5079) (hashtable? . G5078) (hashtable-update! . G5077) (hashtable-size . G5076) (hashtable-set! . G5075) (hashtable-ref . G5074) (hashtable-mutable? . G5073) (hashtable-keys . G5072) (hashtable-entries . G5071) (hashtable-delete! . G5070) (hashtable-copy . G506f) (hashtable-contains? . G506e) (hashtable-clear! . G506d) (call-with-output-file . G506c) (call-with-input-file . G506b) (write-char . G506a) (write . G5069) (with-output-to-file . G5068) (with-input-from-file . G5067) (read-char . G5066) (read . G5065) (peek-char . G5064) (open-output-file . G5063) (open-input-file . G5062) (newline . G5061) (display . G5060) (close-output-port . G505f) (close-input-port . G505e) (eof-object? . G505d) (eof-object . G505c) (current-error-port . G505b) (current-output-port . G505a) (current-input-port . G5059) (output-port? . G5058) (input-port? . G5057) (utf-8-codec . G5056) (utf-16-codec . G5055) (transcoder-error-handling-mode . G5054) (transcoder-eol-style . G5053) (transcoder-codec . G5052) (transcoded-port . G5051) (textual-port? . G5050) (string->bytevector . G504f) (standard-output-port . G504e) (standard-input-port . G504d) (standard-error-port . G504c) (set-port-position! . G504b) (put-u8 . G504a) (put-string . G5049) (put-datum . G5048) (put-char . G5047) (put-bytevector . G5046) (port? . G5045) (port-transcoder . G5044) (port-position . G5043) (port-has-set-port-position!? . G5042) (port-has-port-position? . G5041) (port-eof? . G5040) (output-port-buffer-mode . G503f) (open-string-output-port . G503e) (open-string-input-port . G503d) (open-file-output-port . G503c) (open-file-input/output-port . G503b) (open-file-input-port . G503a) (open-bytevector-output-port . G5039) (open-bytevector-input-port . G5038) (native-transcoder . G5037) (native-eol-style . G5036) (make-transcoder . G5035) (latin-1-codec . G5034) (make-i/o-write-error . G4c78) (make-i/o-read-error . G4c64) (make-i/o-port-error . G4d0f) (make-i/o-invalid-position-error . G4c8d) (make-i/o-filename-error . G4ca6) (make-i/o-file-protection-error . G4cbe) (make-i/o-file-is-read-only-error . G4cd2) (make-i/o-file-does-not-exist-error . G4cfa) (make-i/o-file-already-exists-error . G4ce6) (make-i/o-error . G4c50) (make-i/o-encoding-error . G4d3c) (make-i/o-decoding-error . G4d27) (make-custom-textual-output-port . G5033) (make-custom-textual-input/output-port . G5032) (make-custom-textual-input-port . G5031) (make-custom-binary-output-port . G5030) (make-custom-binary-input/output-port . G502f) (make-custom-binary-input-port . G502e) (make-bytevector . G502d) (lookahead-u8 . G502c) (lookahead-char . G502b) (i/o-write-error? . G4c7a) (i/o-read-error? . G4c66) (i/o-port-error? . G4d13) (i/o-invalid-position-error? . G4c91) (i/o-filename-error? . G4caa) (i/o-file-protection-error? . G4cc0) (i/o-file-is-read-only-error? . G4cd4) (i/o-file-does-not-exist-error? . G4cfc) (i/o-file-already-exists-error? . G4ce8) (i/o-error? . G4c52) (i/o-error-port . G4d15) (i/o-error-filename . G4cac) (i/o-encoding-error? . G4d40) (i/o-encoding-error-char . G4d42) (i/o-decoding-error? . G4d29) (get-u8 . G502a) (get-string-n! . G5029) (get-string-n . G5028) (get-string-all . G5027) (get-line . G5026) (get-datum . G5025) (get-char . G5024) (get-bytevector-some . G5023) (get-bytevector-n! . G5022) (get-bytevector-n . G5021) (get-bytevector-all . G5020) (flush-output-port . G501f) (close-port . G501e) (exit . G5017) (command-line . G4d9b) (remove . G5012) (remv . G5011) (remp . G5010) (remq . G500f) (partition . G500e) (memv . G500d) (memq . G500c) (memp . G500b) (member . G500a) (exists . G5009) (for-all . G5008) (fold-right . G5007) (fold-left . G5006) (find . G5005) (filter . G5004) (cons* . G5003) (assv . G5002) (assq . G5001) (assp . G5000) (assoc . G4fff) (call-with-string-output-port . G4ffe) (call-with-port . G4ffd) (call-with-bytevector-output-port . G4ffc) (bytevector->string . G4ffb) (buffer-mode? . G4ffa) (binary-port? . G4ff9) (with-exception-handler . G4ff8) (raise-continuable . G4ff7) (raise . G4ff6) (make-enumeration . G4ff5) (enum-set=? . G4ff4) (enum-set-universe . G4ff3) (enum-set-union . G4ff2) (enum-set-subset? . G4ff1) (enum-set-projection . G4ff0) (enum-set-member? . G4fef) (enum-set-intersection . G4fee) (enum-set-indexer . G4fed) (enum-set-difference . G4fec) (enum-set-constructor . G4feb) (enum-set-complement . G4fea) (enum-set->list . G4fe9) (who-condition? . G4b6e) (warning? . G4aee) (violation? . G4b2a) (undefined-violation? . G4bde) (syntax-violation? . G4bc6) (syntax-violation-subform . G4bca) (syntax-violation-form . G4bc8) (syntax-violation . G315d) (simple-conditions . G4fe8) (serious-condition? . G4b02) (non-continuable-violation? . G4b84) (message-condition? . G4ad8) (make-who-condition . G4b6a) (make-warning . G4aec) (make-violation . G4b28) (make-undefined-violation . G4bdc) (make-syntax-violation . G4bc0) (make-serious-condition . G4b00) (make-non-continuable-violation . G4b82) (make-message-condition . G4ad4) (make-lexical-violation . G4baa) (make-irritants-condition . G4b51) (make-implementation-restriction-violation . G4b96) (make-error . G4b14) (make-assertion-violation . G4b3c) (lexical-violation? . G4bac) (irritants-condition? . G4b55) (implementation-restriction-violation? . G4b98) (error? . G4b16) (condition-who . G4b70) (condition-predicate . G4fe7) (condition-message . G4ada) (condition-irritants . G4b57) (condition-accessor . G4fe6) (condition . G4fe5) (assertion-violation? . G4b3e) (condition? . G4fe4) (utf32->string . G4fe3) (utf16->string . G4fe2) (utf8->string . G4fe1) (uint-list->bytevector . G4fe0) (u8-list->bytevector . G4fdf) (string->utf8 . G4fde) (string->utf32 . G4fdd) (string->utf16 . G4fdc) (sint-list->bytevector . G4fdb) (native-endianness . G4fda) (bytevector? . G4fd9) (bytevector=? . G4fd8) (bytevector-uint-set! . G4fd7) (bytevector-uint-ref . G4fd6) (bytevector-u8-set! . G4fd5) (bytevector-u8-ref . G4fd4) (bytevector-u64-set! . G4fd3) (bytevector-u64-ref . G4fd2) (bytevector-u64-native-set! . G4fd1) (bytevector-u64-native-ref . G4fd0) (bytevector-u32-set! . G4fcf) (bytevector-u32-ref . G4fce) (bytevector-u32-native-set! . G4fcd) (bytevector-u32-native-ref . G4fcc) (bytevector-u16-set! . G4fcb) (bytevector-u16-ref . G4fca) (bytevector-u16-native-set! . G4fc9) (bytevector-u16-native-ref . G4fc8) (bytevector-sint-set! . G4fc7) (bytevector-sint-ref . G4fc6) (bytevector-s8-set! . G4fc5) (bytevector-s8-ref . G4fc4) (bytevector-s64-set! . G4fc3) (bytevector-s64-ref . G4fc2) (bytevector-s64-native-set! . G4fc1) (bytevector-s64-native-ref . G4fc0) (bytevector-s32-set! . G4fbf) (bytevector-s32-ref . G4fbe) (bytevector-s32-native-set! . G4fbd) (bytevector-s32-native-ref . G4fbc) (bytevector-s16-set! . G4fbb) (bytevector-s16-ref . G4fba) (bytevector-s16-native-set! . G4fb9) (bytevector-s16-native-ref . G4fb8) (bytevector-length . G4fb7) (bytevector-ieee-single-ref . G4fb6) (bytevector-ieee-single-native-set! . G4fb5) (bytevector-ieee-single-native-ref . G4fb4) (bytevector-ieee-double-ref . G4fb3) (bytevector-ieee-double-native-set! . G4fb2) (bytevector-ieee-double-native-ref . G4fb1) (bytevector-fill! . G4fb0) (bytevector-copy! . G4faf) (bytevector-copy . G4fae) (bytevector->uint-list . G4fad) (bytevector->u8-list . G4fac) (bytevector->sint-list . G4fab) (no-nans-violation? . G4faa) (no-infinities-violation? . G4fa9) (make-no-nans-violation . G4fa8) (make-no-infinities-violation . G4fa7) (real->flonum . G4fa6) (flzero? . G4fa5) (fltruncate . G4fa4) (fltan . G4fa3) (flsqrt . G4fa2) (flsin . G4fa1) (flround . G4fa0) (flpositive? . G4f9f) (flonum? . G4f9e) (flodd? . G4f9d) (flnumerator . G4f9c) (flnegative? . G4f9b) (flnan? . G4f9a) (flmod0 . G4f99) (flmod . G4f98) (flmin . G4f97) (flmax . G4f96) (fllog . G4f95) (flinteger? . G4f94) (flinfinite? . G4f93) (flfloor . G4f92) (flfinite? . G4f91) (flexpt . G4f90) (flexp . G4f8f) (fleven? . G4f8e) (fldiv0-and-mod0 . G4f8d) (fldiv0 . G4f8c) (fldiv-and-mod . G4f8b) (fldiv . G4f8a) (fldenominator . G4f89) (flcos . G4f88) (flceiling . G4f87) (flatan . G4f86) (flasin . G4f85) (flacos . G4f84) (flabs . G4f83) (fl>? . G4f82) (fl>=? . G4f81) (fl=? . G4f80) (fl<? . G4f7f) (fl<=? . G4f7e) (fl/ . G4f7d) (fl- . G4f7c) (fl+ . G4f7b) (fl* . G4f7a) (fixnum->flonum . G4f79) (fxzero? . G4f78) (fxxor . G4f77) (fxrotate-bit-field . G4f76) (fxreverse-bit-field . G4f75) (fxpositive? . G4f74) (fxodd? . G4f73) (fxnot . G4f72) (fxnegative? . G4f71) (fxmod0 . G4f70) (fxmod . G4f6f) (fxmin . G4f6e) (fxmax . G4f6d) (fxlength . G4f6c) (fxior . G4f6b) (fxif . G4f6a) (fxfirst-bit-set . G4f69) (fxeven? . G4f68) (fxdiv0-and-mod0 . G4f67) (fxdiv0 . G4f66) (fxdiv-and-mod . G4f65) (fxdiv . G4f64) (fxcopy-bit-field . G4f63) (fxcopy-bit . G4f62) (fxbit-set? . G4f61) (fxbit-field . G4f60) (fxbit-count . G4f5f) (fxarithmetic-shift-right . G4f5e) (fxarithmetic-shift-left . G4f5d) (fxarithmetic-shift . G4f5c) (fxand . G4f5b) (fx>? . G4f5a) (fx>=? . G4f59) (fx=? . G4f58) (fx<? . G4f57) (fx<=? . G4f56) (fx-/carry . G4f55) (fx- . G4f54) (fx+/carry . G4f53) (fx+ . G4f52) (fx*/carry . G4f51) (fx* . G4f50) (greatest-fixnum . G4f4f) (least-fixnum . G4f4e) (fixnum-width . G4f4d) (fixnum? . G4f4c) (bitwise-rotate-bit-field . G4f4b) (bitwise-reverse-bit-field . G4f4a) (bitwise-length . G4f49) (bitwise-if . G4f48) (bitwise-first-bit-set . G4f47) (bitwise-copy-bit-field . G4f46) (bitwise-copy-bit . G4f45) (bitwise-bit-set? . G4f44) (bitwise-bit-field . G4f43) (bitwise-bit-count . G4f42) (bitwise-xor . G4f41) (bitwise-ior . G4f40) (bitwise-and . G4f3f) (bitwise-not . G4f3e) (bitwise-arithmetic-shift-right . G4f3d) (bitwise-arithmetic-shift-left . G4f3c) (bitwise-arithmetic-shift . G4f3b) (zero? . G4f3a) (vector? . G4f39) (vector-set! . G4f38) (vector-ref . G4f37) (vector-map . G4f36) (vector-length . G4f35) (vector-for-each . G4f34) (vector-fill! . G4f33) (vector->list . G4f32) (vector . G4f31) (values . G4f30) (truncate . G4f2f) (tan . G4f2e) (symbol? . G4f2d) (symbol=? . G4f2c) (symbol->string . G4f2b) (substring . G4f2a) (string? . G4f29) (string>? . G4f28) (string>=? . G4f27) (string=? . G4f26) (string<? . G4f25) (string<=? . G4f24) (string-ref . G4f23) (string-length . G4f22) (string-for-each . G4f21) (string-copy . G4f20) (string-append . G4f1f) (string->symbol . G4f1e) (string->number . G4f1d) (string->list . G4f1c) (string . G4f1b) (sqrt . G4f1a) (sin . G4f19) (round . G4f18) (reverse . G4f17) (real? . G4f16) (real-valued? . G4f15) (real-part . G4f14) (rationalize . G4f13) (rational? . G4f12) (rational-valued? . G4f11) (procedure? . G4f10) (positive? . G4f0f) (pair? . G4f0e) (odd? . G4f0d) (numerator . G4f0c) (number? . G4f0b) (number->string . G4f0a) (null? . G4f09) (not . G4f08) (negative? . G4f07) (nan? . G4f06) (min . G4f05) (max . G4f04) (map . G4f03) (make-vector . G4f02) (make-string . G4f01) (make-rectangular . G4f00) (make-polar . G4eff) (magnitude . G4efe) (log . G4efd) (list? . G4efc) (list-tail . G4efb) (list-ref . G4efa) (list->vector . G4ef9) (list->string . G4ef8) (list . G4ef7) (length . G4ef6) (lcm . G4ef5) (integer? . G4ef4) (integer-valued? . G4ef3) (integer->char . G4ef2) (infinite? . G4ef1) (inexact? . G4ef0) (inexact . G4eef) (imag-part . G4eee) (gcd . G4eed) (for-each . G4eec) (floor . G4eeb) (finite? . G4eea) (expt . G4ee9) (exp . G4ee8) (exact? . G4ee7) (exact-integer-sqrt . G4ee6) (exact . G4ee5) (even? . G4ee4) (error . G4ee3) (eqv? . G4ee2) (equal? . G4ee1) (eq? . G4ee0) (dynamic-wind . G4edf) (div0-and-mod0 . G4ede) (mod0 . G4edd) (div0 . G4edc) (div-and-mod . G4edb) (mod . G4eda) (div . G4ed9) (denominator . G4ed8) (cos . G4ed7) (cons . G4ed6) (complex? . G4ed5) (char? . G4ed4) (char>? . G4ed3) (char>=? . G4ed2) (char=? . G4ed1) (char<? . G4ed0) (char<=? . G4ecf) (char->integer . G4ece) (ceiling . G4ecd) (call-with-values . G4ecc) (call/cc . G4ecb) (call-with-current-continuation . G4eca) (cddddr . G4ec9) (cdddar . G4ec8) (cddadr . G4ec7) (cddaar . G4ec6) (cdaddr . G4ec5) (cdadar . G4ec4) (cdaadr . G4ec3) (cdaaar . G4ec2) (cadddr . G4ec1) (caddar . G4ec0) (cadadr . G4ebf) (cadaar . G4ebe) (caaddr . G4ebd) (caadar . G4ebc) (caaadr . G4ebb) (caaaar . G4eba) (cdddr . G4eb9) (cddar . G4eb8) (cdadr . G4eb7) (cdaar . G4eb6) (caddr . G4eb5) (cadar . G4eb4) (caadr . G4eb3) (caaar . G4eb2) (cddr . G4eb1) (cdar . G4eb0) (cadr . G4eaf) (caar . G4eae) (cdr . G4ead) (car . G4eac) (boolean? . G4eab) (boolean=? . G4eaa) (atan . G4ea9) (assertion-violation . G4ea8) (asin . G4ea7) (apply . G4ea6) (append . G4ea5) (angle . G4ea4) (acos . G4ea3) (abs . G4ea2) (/ . G4ea1) (* . G4ea0) (- . G4e9f) (+ . G4e9e) (>= . G4e9d) (> . G4e9c) (= . G4e9b) (<= . G4e9a) (< . G4e99) (&no-nans . G4e96) (&no-infinities . G4e95) (&i/o-encoding . G4e94) (&i/o-decoding . G4e93) (&i/o-port . G4e92) (&i/o-file-does-not-exist . G4e91) (&i/o-file-already-exists . G4e90) (&i/o-file-is-read-only . G4e8f) (&i/o-file-protection . G4e8e) (&i/o-filename . G4e8d) (&i/o-invalid-position . G4e8c) (&i/o-write . G4e8b) (&i/o-read . G4e8a) (&i/o . G4e89) (&undefined . G4e88) (&syntax . G4e87) (&lexical . G4e86) (&implementation-restriction . G4e85) (&non-continuable . G4e84) (&who . G4e83) (&irritants . G4e82) (&assertion . G4e81) (&violation . G4e80) (&error . G4e7f) (&serious . G4e7e) (&warning . G4e7d) (&message . G4e7c) (&condition . G4e7b) (define-condition-type . G4e7a) (define-enumeration . G4e79) (define-record-type . G4e78) (parent-rtd . G4e77) (nongenerative . G4e76) (opaque . G4e75) (sealed . G4e74) (protocol . G4e73) (parent . G4e72) (immutable . G4e71) (mutable . G4e70) (fields . G4e6f) (error-handling-mode . G4e6e) (file-options . G4e6d) (buffer-mode . G4e6c) (eol-style . G4e6b) (guard . G4e6a) (unsyntax-splicing . G4e67) (unsyntax . G4e66) (unquote-splicing . G4e65) (unquote . G4e64) (_ . G4e63) (else . G4e62) (=> . G4e61) (... . G4e60) (assert . G4e5f) (endianness . G4e5e) (or . G4e5b) (and . G4e5a) (do . G4e59) (cond . G4e58) (let* . G4e57) (let . G4e56) (let*-values . G4e55) (let-values . G4e54) (identifier-syntax . G4e53) (with-syntax . G4e52) (quasisyntax . G4e51) (quasiquote . G4e50) (syntax-rules . G4e4f) (record-constructor-descriptor . G4e4c) (record-type-descriptor . G4e4b) (case . G4e4a) (unless . G4e48) (when . G4e47) (if . G4e46) (letrec* . G4e45) (letrec . G4e44) (case-lambda . G4e42) (lambda . G4e41) (syntax . G4e40) (syntax-case . G4e3f) (quote . G4e3e) (letrec-syntax . G4e3c) (let-syntax . G4e3b) (set! . G4e3a) (begin . G4e38) (define-syntax . G4e36) (define . G4e35)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5137 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3137) (quotient . G501d) (null-environment . G3135) (remainder . G501c) (modulo . G501b) (inexact->exact . G501a) (force . G5019) (exact->inexact . G5018) (delay . G4e5d)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5138 '(rnrs control) '(6) '() '() '() '((do . G4e59) (unless . G4e48) (when . G4e47) (case-lambda . G4e42)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5139 '(rnrs eval) '(6) '() '() '() '((eval . G313b) (environment . G3133)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G513a '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G5014) (set-car! . G5013)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G513b '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G5016) (string-set! . G5015)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G513c '(rnrs programs) '(6) '() '() '() '((exit . G5017) (command-line . G4d9b)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G513d '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e68) (identifier? . G315f) (generate-temporaries . G3149) (free-identifier=? . G314b) (syntax->datum . G3163) (datum->syntax . G3161) (bound-identifier=? . G314d) (syntax-violation . G315d) (unsyntax-splicing . G4e67) (unsyntax . G4e66) (_ . G4e63) (... . G4e60) (with-syntax . G4e52) (quasisyntax . G4e51) (syntax . G4e40) (syntax-case . G4e3f)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G513e '(rnrs files) '(6) '() '() '() '((delete-file . G5086) (file-exists? . G5085) (make-i/o-write-error . G4c78) (make-i/o-read-error . G4c64) (make-i/o-port-error . G4d0f) (make-i/o-invalid-position-error . G4c8d) (make-i/o-filename-error . G4ca6) (make-i/o-file-protection-error . G4cbe) (make-i/o-file-is-read-only-error . G4cd2) (make-i/o-file-does-not-exist-error . G4cfa) (make-i/o-file-already-exists-error . G4ce6) (make-i/o-error . G4c50) (i/o-write-error? . G4c7a) (i/o-read-error? . G4c66) (i/o-port-error? . G4d13) (i/o-invalid-position-error? . G4c91) (i/o-filename-error? . G4caa) (i/o-file-protection-error? . G4cc0) (i/o-file-is-read-only-error? . G4cd4) (i/o-file-does-not-exist-error? . G4cfc) (i/o-file-already-exists-error? . G4ce8) (i/o-error? . G4c52) (i/o-error-port . G4d15) (i/o-error-filename . G4cac) (&i/o-port . G4e92) (&i/o-file-does-not-exist . G4e91) (&i/o-file-already-exists . G4e90) (&i/o-file-is-read-only . G4e8f) (&i/o-file-protection . G4e8e) (&i/o-filename . G4e8d) (&i/o-invalid-position . G4e8c) (&i/o-write . G4e8b) (&i/o-read . G4e8a) (&i/o . G4e89)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G513f '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5084) (vector-sort . G5083) (list-sort . G5082)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5140 '(rnrs base) '(6) '() '() '() '((zero? . G4f3a) (vector? . G4f39) (vector-set! . G4f38) (vector-ref . G4f37) (vector-map . G4f36) (vector-length . G4f35) (vector-for-each . G4f34) (vector-fill! . G4f33) (vector->list . G4f32) (vector . G4f31) (values . G4f30) (truncate . G4f2f) (tan . G4f2e) (symbol? . G4f2d) (symbol=? . G4f2c) (symbol->string . G4f2b) (substring . G4f2a) (string? . G4f29) (string>? . G4f28) (string>=? . G4f27) (string=? . G4f26) (string<? . G4f25) (string<=? . G4f24) (string-ref . G4f23) (string-length . G4f22) (string-for-each . G4f21) (string-copy . G4f20) (string-append . G4f1f) (string->symbol . G4f1e) (string->number . G4f1d) (string->list . G4f1c) (string . G4f1b) (sqrt . G4f1a) (sin . G4f19) (round . G4f18) (reverse . G4f17) (real? . G4f16) (real-valued? . G4f15) (real-part . G4f14) (rationalize . G4f13) (rational? . G4f12) (rational-valued? . G4f11) (procedure? . G4f10) (positive? . G4f0f) (pair? . G4f0e) (odd? . G4f0d) (numerator . G4f0c) (number? . G4f0b) (number->string . G4f0a) (null? . G4f09) (not . G4f08) (negative? . G4f07) (nan? . G4f06) (min . G4f05) (max . G4f04) (map . G4f03) (make-vector . G4f02) (make-string . G4f01) (make-rectangular . G4f00) (make-polar . G4eff) (magnitude . G4efe) (log . G4efd) (list? . G4efc) (list-tail . G4efb) (list-ref . G4efa) (list->vector . G4ef9) (list->string . G4ef8) (list . G4ef7) (length . G4ef6) (lcm . G4ef5) (integer? . G4ef4) (integer-valued? . G4ef3) (integer->char . G4ef2) (infinite? . G4ef1) (inexact? . G4ef0) (inexact . G4eef) (imag-part . G4eee) (gcd . G4eed) (for-each . G4eec) (floor . G4eeb) (finite? . G4eea) (expt . G4ee9) (exp . G4ee8) (exact? . G4ee7) (exact-integer-sqrt . G4ee6) (exact . G4ee5) (even? . G4ee4) (error . G4ee3) (eqv? . G4ee2) (equal? . G4ee1) (eq? . G4ee0) (dynamic-wind . G4edf) (div0-and-mod0 . G4ede) (mod0 . G4edd) (div0 . G4edc) (div-and-mod . G4edb) (mod . G4eda) (div . G4ed9) (denominator . G4ed8) (cos . G4ed7) (cons . G4ed6) (complex? . G4ed5) (char? . G4ed4) (char>? . G4ed3) (char>=? . G4ed2) (char=? . G4ed1) (char<? . G4ed0) (char<=? . G4ecf) (char->integer . G4ece) (ceiling . G4ecd) (call-with-values . G4ecc) (call/cc . G4ecb) (call-with-current-continuation . G4eca) (cddddr . G4ec9) (cdddar . G4ec8) (cddadr . G4ec7) (cddaar . G4ec6) (cdaddr . G4ec5) (cdadar . G4ec4) (cdaadr . G4ec3) (cdaaar . G4ec2) (cadddr . G4ec1) (caddar . G4ec0) (cadadr . G4ebf) (cadaar . G4ebe) (caaddr . G4ebd) (caadar . G4ebc) (caaadr . G4ebb) (caaaar . G4eba) (cdddr . G4eb9) (cddar . G4eb8) (cdadr . G4eb7) (cdaar . G4eb6) (caddr . G4eb5) (cadar . G4eb4) (caadr . G4eb3) (caaar . G4eb2) (cddr . G4eb1) (cdar . G4eb0) (cadr . G4eaf) (caar . G4eae) (cdr . G4ead) (car . G4eac) (boolean? . G4eab) (boolean=? . G4eaa) (atan . G4ea9) (assertion-violation . G4ea8) (asin . G4ea7) (apply . G4ea6) (append . G4ea5) (angle . G4ea4) (acos . G4ea3) (abs . G4ea2) (/ . G4ea1) (* . G4ea0) (- . G4e9f) (+ . G4e9e) (>= . G4e9d) (> . G4e9c) (= . G4e9b) (<= . G4e9a) (< . G4e99) (unquote-splicing . G4e65) (unquote . G4e64) (_ . G4e63) (else . G4e62) (=> . G4e61) (... . G4e60) (assert . G4e5f) (or . G4e5b) (and . G4e5a) (cond . G4e58) (let* . G4e57) (let . G4e56) (let*-values . G4e55) (let-values . G4e54) (identifier-syntax . G4e53) (quasiquote . G4e50) (syntax-rules . G4e4f) (case . G4e4a) (if . G4e46) (letrec* . G4e45) (letrec . G4e44) (lambda . G4e41) (quote . G4e3e) (letrec-syntax . G4e3c) (let-syntax . G4e3b) (set! . G4e3a) (begin . G4e38) (define-syntax . G4e36) (define . G4e35)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5141 '(rnrs lists) '(6) '() '() '() '((remove . G5012) (remv . G5011) (remp . G5010) (remq . G500f) (partition . G500e) (memv . G500d) (memq . G500c) (memp . G500b) (member . G500a) (exists . G5009) (for-all . G5008) (fold-right . G5007) (fold-left . G5006) (find . G5005) (filter . G5004) (cons* . G5003) (assv . G5002) (assq . G5001) (assp . G5000) (assoc . G4fff)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5142 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G506c) (call-with-input-file . G506b) (write-char . G506a) (write . G5069) (with-output-to-file . G5068) (with-input-from-file . G5067) (read-char . G5066) (read . G5065) (peek-char . G5064) (open-output-file . G5063) (open-input-file . G5062) (newline . G5061) (display . G5060) (close-output-port . G505f) (close-input-port . G505e) (eof-object? . G505d) (eof-object . G505c) (current-error-port . G505b) (current-output-port . G505a) (current-input-port . G5059) (output-port? . G5058) (input-port? . G5057) (make-i/o-write-error . G4c78) (make-i/o-read-error . G4c64) (make-i/o-port-error . G4d0f) (make-i/o-invalid-position-error . G4c8d) (make-i/o-filename-error . G4ca6) (make-i/o-file-protection-error . G4cbe) (make-i/o-file-is-read-only-error . G4cd2) (make-i/o-file-does-not-exist-error . G4cfa) (make-i/o-file-already-exists-error . G4ce6) (make-i/o-error . G4c50) (i/o-write-error? . G4c7a) (i/o-read-error? . G4c66) (i/o-port-error? . G4d13) (i/o-invalid-position-error? . G4c91) (i/o-filename-error? . G4caa) (i/o-file-protection-error? . G4cc0) (i/o-file-is-read-only-error? . G4cd4) (i/o-file-does-not-exist-error? . G4cfc) (i/o-file-already-exists-error? . G4ce8) (i/o-error? . G4c52) (i/o-error-port . G4d15) (i/o-error-filename . G4cac) (&i/o-port . G4e92) (&i/o-file-does-not-exist . G4e91) (&i/o-file-already-exists . G4e90) (&i/o-file-is-read-only . G4e8f) (&i/o-file-protection . G4e8e) (&i/o-filename . G4e8d) (&i/o-invalid-position . G4e8c) (&i/o-write . G4e8b) (&i/o-read . G4e8a) (&i/o . G4e89)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5143 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G502d) (utf32->string . G4fe3) (utf16->string . G4fe2) (utf8->string . G4fe1) (uint-list->bytevector . G4fe0) (u8-list->bytevector . G4fdf) (string->utf8 . G4fde) (string->utf32 . G4fdd) (string->utf16 . G4fdc) (sint-list->bytevector . G4fdb) (native-endianness . G4fda) (bytevector? . G4fd9) (bytevector=? . G4fd8) (bytevector-uint-set! . G4fd7) (bytevector-uint-ref . G4fd6) (bytevector-u8-set! . G4fd5) (bytevector-u8-ref . G4fd4) (bytevector-u64-set! . G4fd3) (bytevector-u64-ref . G4fd2) (bytevector-u64-native-set! . G4fd1) (bytevector-u64-native-ref . G4fd0) (bytevector-u32-set! . G4fcf) (bytevector-u32-ref . G4fce) (bytevector-u32-native-set! . G4fcd) (bytevector-u32-native-ref . G4fcc) (bytevector-u16-set! . G4fcb) (bytevector-u16-ref . G4fca) (bytevector-u16-native-set! . G4fc9) (bytevector-u16-native-ref . G4fc8) (bytevector-sint-set! . G4fc7) (bytevector-sint-ref . G4fc6) (bytevector-s8-set! . G4fc5) (bytevector-s8-ref . G4fc4) (bytevector-s64-set! . G4fc3) (bytevector-s64-ref . G4fc2) (bytevector-s64-native-set! . G4fc1) (bytevector-s64-native-ref . G4fc0) (bytevector-s32-set! . G4fbf) (bytevector-s32-ref . G4fbe) (bytevector-s32-native-set! . G4fbd) (bytevector-s32-native-ref . G4fbc) (bytevector-s16-set! . G4fbb) (bytevector-s16-ref . G4fba) (bytevector-s16-native-set! . G4fb9) (bytevector-s16-native-ref . G4fb8) (bytevector-length . G4fb7) (bytevector-ieee-single-ref . G4fb6) (bytevector-ieee-single-native-set! . G4fb5) (bytevector-ieee-single-native-ref . G4fb4) (bytevector-ieee-double-ref . G4fb3) (bytevector-ieee-double-native-set! . G4fb2) (bytevector-ieee-double-native-ref . G4fb1) (bytevector-fill! . G4fb0) (bytevector-copy! . G4faf) (bytevector-copy . G4fae) (bytevector->uint-list . G4fad) (bytevector->u8-list . G4fac) (bytevector->sint-list . G4fab) (endianness . G4e5e)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5144 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G50b4) (string-titlecase . G50b3) (string-normalize-nfkd . G50b2) (string-normalize-nfkc . G50b1) (string-normalize-nfd . G50b0) (string-normalize-nfc . G50af) (string-foldcase . G50ae) (string-downcase . G50ad) (string-ci>? . G50ac) (string-ci>=? . G50ab) (string-ci=? . G50aa) (string-ci<? . G50a9) (string-ci<=? . G50a8) (char-whitespace? . G50a7) (char-upper-case? . G50a6) (char-title-case? . G50a5) (char-numeric? . G50a4) (char-lower-case? . G50a3) (char-general-category . G50a2) (char-upcase . G50a1) (char-titlecase . G50a0) (char-foldcase . G509f) (char-downcase . G509e) (char-ci>? . G509d) (char-ci>=? . G509c) (char-ci=? . G509b) (char-ci<? . G509a) (char-ci<=? . G5099) (char-alphabetic? . G5098)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5145 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4ff8) (raise-continuable . G4ff7) (raise . G4ff6) (guard . G4e6a) (else . G4e62) (=> . G4e61)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5146 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4f4b) (bitwise-reverse-bit-field . G4f4a) (bitwise-length . G4f49) (bitwise-if . G4f48) (bitwise-first-bit-set . G4f47) (bitwise-copy-bit-field . G4f46) (bitwise-copy-bit . G4f45) (bitwise-bit-set? . G4f44) (bitwise-bit-field . G4f43) (bitwise-bit-count . G4f42) (bitwise-xor . G4f41) (bitwise-ior . G4f40) (bitwise-and . G4f3f) (bitwise-not . G4f3e) (bitwise-arithmetic-shift-right . G4f3d) (bitwise-arithmetic-shift-left . G4f3c) (bitwise-arithmetic-shift . G4f3b)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5147 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f78) (fxxor . G4f77) (fxrotate-bit-field . G4f76) (fxreverse-bit-field . G4f75) (fxpositive? . G4f74) (fxodd? . G4f73) (fxnot . G4f72) (fxnegative? . G4f71) (fxmod0 . G4f70) (fxmod . G4f6f) (fxmin . G4f6e) (fxmax . G4f6d) (fxlength . G4f6c) (fxior . G4f6b) (fxif . G4f6a) (fxfirst-bit-set . G4f69) (fxeven? . G4f68) (fxdiv0-and-mod0 . G4f67) (fxdiv0 . G4f66) (fxdiv-and-mod . G4f65) (fxdiv . G4f64) (fxcopy-bit-field . G4f63) (fxcopy-bit . G4f62) (fxbit-set? . G4f61) (fxbit-field . G4f60) (fxbit-count . G4f5f) (fxarithmetic-shift-right . G4f5e) (fxarithmetic-shift-left . G4f5d) (fxarithmetic-shift . G4f5c) (fxand . G4f5b) (fx>? . G4f5a) (fx>=? . G4f59) (fx=? . G4f58) (fx<? . G4f57) (fx<=? . G4f56) (fx-/carry . G4f55) (fx- . G4f54) (fx+/carry . G4f53) (fx+ . G4f52) (fx*/carry . G4f51) (fx* . G4f50) (greatest-fixnum . G4f4f) (least-fixnum . G4f4e) (fixnum-width . G4f4d) (fixnum? . G4f4c)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5148 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4faa) (no-infinities-violation? . G4fa9) (make-no-nans-violation . G4fa8) (make-no-infinities-violation . G4fa7) (real->flonum . G4fa6) (flzero? . G4fa5) (fltruncate . G4fa4) (fltan . G4fa3) (flsqrt . G4fa2) (flsin . G4fa1) (flround . G4fa0) (flpositive? . G4f9f) (flonum? . G4f9e) (flodd? . G4f9d) (flnumerator . G4f9c) (flnegative? . G4f9b) (flnan? . G4f9a) (flmod0 . G4f99) (flmod . G4f98) (flmin . G4f97) (flmax . G4f96) (fllog . G4f95) (flinteger? . G4f94) (flinfinite? . G4f93) (flfloor . G4f92) (flfinite? . G4f91) (flexpt . G4f90) (flexp . G4f8f) (fleven? . G4f8e) (fldiv0-and-mod0 . G4f8d) (fldiv0 . G4f8c) (fldiv-and-mod . G4f8b) (fldiv . G4f8a) (fldenominator . G4f89) (flcos . G4f88) (flceiling . G4f87) (flatan . G4f86) (flasin . G4f85) (flacos . G4f84) (flabs . G4f83) (fl>? . G4f82) (fl>=? . G4f81) (fl=? . G4f80) (fl<? . G4f7f) (fl<=? . G4f7e) (fl/ . G4f7d) (fl- . G4f7c) (fl+ . G4f7b) (fl* . G4f7a) (fixnum->flonum . G4f79) (&no-nans . G4e96) (&no-infinities . G4e95)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5149 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5081) (string-ci-hash . G5080) (string-hash . G507f) (equal-hash . G507e) (hashtable-equivalence-function . G507d) (make-hashtable . G507c) (hashtable-hash-function . G507b) (make-eqv-hashtable . G507a) (make-eq-hashtable . G5079) (hashtable? . G5078) (hashtable-update! . G5077) (hashtable-size . G5076) (hashtable-set! . G5075) (hashtable-ref . G5074) (hashtable-mutable? . G5073) (hashtable-keys . G5072) (hashtable-entries . G5071) (hashtable-delete! . G5070) (hashtable-copy . G506f) (hashtable-contains? . G506e) (hashtable-clear! . G506d)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G514a '(rnrs io ports) '(6) '() '() '() '((eof-object? . G505d) (eof-object . G505c) (current-error-port . G505b) (current-output-port . G505a) (current-input-port . G5059) (output-port? . G5058) (input-port? . G5057) (utf-8-codec . G5056) (utf-16-codec . G5055) (transcoder-error-handling-mode . G5054) (transcoder-eol-style . G5053) (transcoder-codec . G5052) (transcoded-port . G5051) (textual-port? . G5050) (string->bytevector . G504f) (standard-output-port . G504e) (standard-input-port . G504d) (standard-error-port . G504c) (set-port-position! . G504b) (put-u8 . G504a) (put-string . G5049) (put-datum . G5048) (put-char . G5047) (put-bytevector . G5046) (port? . G5045) (port-transcoder . G5044) (port-position . G5043) (port-has-set-port-position!? . G5042) (port-has-port-position? . G5041) (port-eof? . G5040) (output-port-buffer-mode . G503f) (open-string-output-port . G503e) (open-string-input-port . G503d) (open-file-output-port . G503c) (open-file-input/output-port . G503b) (open-file-input-port . G503a) (open-bytevector-output-port . G5039) (open-bytevector-input-port . G5038) (native-transcoder . G5037) (native-eol-style . G5036) (make-transcoder . G5035) (latin-1-codec . G5034) (make-i/o-write-error . G4c78) (make-i/o-read-error . G4c64) (make-i/o-port-error . G4d0f) (make-i/o-invalid-position-error . G4c8d) (make-i/o-filename-error . G4ca6) (make-i/o-file-protection-error . G4cbe) (make-i/o-file-is-read-only-error . G4cd2) (make-i/o-file-does-not-exist-error . G4cfa) (make-i/o-file-already-exists-error . G4ce6) (make-i/o-error . G4c50) (make-i/o-encoding-error . G4d3c) (make-i/o-decoding-error . G4d27) (make-custom-textual-output-port . G5033) (make-custom-textual-input/output-port . G5032) (make-custom-textual-input-port . G5031) (make-custom-binary-output-port . G5030) (make-custom-binary-input/output-port . G502f) (make-custom-binary-input-port . G502e) (lookahead-u8 . G502c) (lookahead-char . G502b) (i/o-write-error? . G4c7a) (i/o-read-error? . G4c66) (i/o-port-error? . G4d13) (i/o-invalid-position-error? . G4c91) (i/o-filename-error? . G4caa) (i/o-file-protection-error? . G4cc0) (i/o-file-is-read-only-error? . G4cd4) (i/o-file-does-not-exist-error? . G4cfc) (i/o-file-already-exists-error? . G4ce8) (i/o-error? . G4c52) (i/o-error-port . G4d15) (i/o-error-filename . G4cac) (i/o-encoding-error? . G4d40) (i/o-encoding-error-char . G4d42) (i/o-decoding-error? . G4d29) (get-u8 . G502a) (get-string-n! . G5029) (get-string-n . G5028) (get-string-all . G5027) (get-line . G5026) (get-datum . G5025) (get-char . G5024) (get-bytevector-some . G5023) (get-bytevector-n! . G5022) (get-bytevector-n . G5021) (get-bytevector-all . G5020) (flush-output-port . G501f) (close-port . G501e) (call-with-string-output-port . G4ffe) (call-with-port . G4ffd) (call-with-bytevector-output-port . G4ffc) (bytevector->string . G4ffb) (buffer-mode? . G4ffa) (binary-port? . G4ff9) (&i/o-encoding . G4e94) (&i/o-decoding . G4e93) (&i/o-port . G4e92) (&i/o-file-does-not-exist . G4e91) (&i/o-file-already-exists . G4e90) (&i/o-file-is-read-only . G4e8f) (&i/o-file-protection . G4e8e) (&i/o-filename . G4e8d) (&i/o-invalid-position . G4e8c) (&i/o-write . G4e8b) (&i/o-read . G4e8a) (&i/o . G4e89) (error-handling-mode . G4e6e) (file-options . G4e6d) (buffer-mode . G4e6c) (eol-style . G4e6b)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G514b '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4ff5) (enum-set=? . G4ff4) (enum-set-universe . G4ff3) (enum-set-union . G4ff2) (enum-set-subset? . G4ff1) (enum-set-projection . G4ff0) (enum-set-member? . G4fef) (enum-set-intersection . G4fee) (enum-set-indexer . G4fed) (enum-set-difference . G4fec) (enum-set-constructor . G4feb) (enum-set-complement . G4fea) (enum-set->list . G4fe9) (define-enumeration . G4e79)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G514c '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b6e) (warning? . G4aee) (violation? . G4b2a) (undefined-violation? . G4bde) (syntax-violation? . G4bc6) (syntax-violation-subform . G4bca) (syntax-violation-form . G4bc8) (syntax-violation . G315d) (simple-conditions . G4fe8) (serious-condition? . G4b02) (non-continuable-violation? . G4b84) (message-condition? . G4ad8) (make-who-condition . G4b6a) (make-warning . G4aec) (make-violation . G4b28) (make-undefined-violation . G4bdc) (make-syntax-violation . G4bc0) (make-serious-condition . G4b00) (make-non-continuable-violation . G4b82) (make-message-condition . G4ad4) (make-lexical-violation . G4baa) (make-irritants-condition . G4b51) (make-implementation-restriction-violation . G4b96) (make-error . G4b14) (make-assertion-violation . G4b3c) (lexical-violation? . G4bac) (irritants-condition? . G4b55) (implementation-restriction-violation? . G4b98) (error? . G4b16) (condition-who . G4b70) (condition-predicate . G4fe7) (condition-message . G4ada) (condition-irritants . G4b57) (condition-accessor . G4fe6) (condition . G4fe5) (assertion-violation? . G4b3e) (condition? . G4fe4) (&undefined . G4e88) (&syntax . G4e87) (&lexical . G4e86) (&implementation-restriction . G4e85) (&non-continuable . G4e84) (&who . G4e83) (&irritants . G4e82) (&assertion . G4e81) (&violation . G4e80) (&error . G4e7f) (&serious . G4e7e) (&warning . G4e7d) (&message . G4e7c) (&condition . G4e7b) (define-condition-type . G4e7a)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G514d '(rnrs records inspection) '(6) '() '() '() '((record? . G5090) (record-type-uid . G508f) (record-type-sealed? . G508e) (record-type-parent . G508d) (record-type-opaque? . G508c) (record-type-name . G508b) (record-type-generative? . G508a) (record-type-field-names . G5089) (record-rtd . G5088) (record-field-mutable? . G5087)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G514e '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5097) (record-predicate . G5096) (record-mutator . G5095) (record-constructor . G5094) (record-accessor . G5093) (make-record-type-descriptor . G5092) (make-record-constructor-descriptor . G5091)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G514f '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e78) (parent-rtd . G4e77) (nongenerative . G4e76) (opaque . G4e75) (sealed . G4e74) (protocol . G4e73) (parent . G4e72) (immutable . G4e71) (mutable . G4e70) (fields . G4e6f) (record-constructor-descriptor . G4e4c) (record-type-descriptor . G4e4b)) '() values values '#f '#f '#t '#f) (G2c1b@G2aae@install-library 'G5150 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5130) (&no-nans-rtd . G512f) (&no-infinities-rcd . G512e) (&no-infinities-rtd . G512d) (&i/o-encoding-rcd . G512c) (&i/o-encoding-rtd . G512b) (&i/o-decoding-rcd . G512a) (&i/o-decoding-rtd . G5129) (&i/o-port-rcd . G5128) (&i/o-port-rtd . G5127) (&i/o-file-does-not-exist-rcd . G5126) (&i/o-file-does-not-exist-rtd . G5125) (&i/o-file-already-exists-rcd . G5124) (&i/o-file-already-exists-rtd . G5123) (&i/o-file-is-read-only-rcd . G5122) (&i/o-file-is-read-only-rtd . G5121) (&i/o-file-protection-rcd . G5120) (&i/o-file-protection-rtd . G511f) (&i/o-filename-rcd . G511e) (&i/o-filename-rtd . G511d) (&i/o-invalid-position-rcd . G511c) (&i/o-invalid-position-rtd . G511b) (&i/o-write-rcd . G511a) (&i/o-write-rtd . G5119) (&i/o-read-rcd . G5118) (&i/o-read-rtd . G5117) (&i/o-rcd . G5116) (&i/o-rtd . G5115) (&undefined-rcd . G5114) (&undefined-rtd . G5113) (&syntax-rcd . G5112) (&syntax-rtd . G5111) (&lexical-rcd . G5110) (&lexical-rtd . G510f) (&implementation-restriction-rcd . G510e) (&implementation-restriction-rtd . G510d) (&non-continuable-rcd . G510c) (&non-continuable-rtd . G510b) (&who-rcd . G510a) (&who-rtd . G5109) (&irritants-rcd . G5108) (&irritants-rtd . G5107) (&assertion-rcd . G5106) (&assertion-rtd . G5105) (&violation-rcd . G5104) (&violation-rtd . G5103) (&error-rcd . G5102) (&error-rtd . G5101) (&serious-rcd . G5100) (&serious-rtd . G50ff) (&warning-rcd . G50fe) (&warning-rtd . G50fd) (&message-rcd . G50fc) (&message-rtd . G50fb) (&condition-rcd . G50fa) (&condition-rtd . G50f9) (syntax-error . G3157) (syntax-dispatch . G306a) (pretty-print . G50f8) (eval-core . G50f7) (set-symbol-value! . G50f6) (symbol-value . G50f5) (gensym . G50f4) (void . G50f3) (load . G4da1) (interaction-environment . G3169) (char-ready? . G50f2) (regexp? . G50f1) (read-line . G50f0) (dotted-list? . G50ef) (circular-list? . G50ee) (proper-list? . G50ed) (circular-list . G50ec) (last . G50eb) (last-pair . G50ea) (not-pair? . G50e9) (split-at! . G50e8) (split-at . G50e7) (list= . G50e6) (list-copy . G50e5) (list-tabulate . G50e4) (make-list . G50e3) (xcons . G50e2) (tenth . G50e1) (ninth . G50e0) (eighth . G50df) (seventh . G50de) (sixth . G50dd) (fifth . G50dc) (drop-right! . G50db) (drop-right . G50da) (take-right . G50d9) (take! . G50d8) (drop . G50d7) (take . G50d6) (car+cdr . G50d5) (third . G50d4) (second . G50d3) (first . G50d2) (assoc-ref . G50d1) (alist-cons . G50d0) (print . G50cf) (format . G50ce) (standard-library-path . G50cd) (current-directory . G50cc) (write-to-file . G50cb) (file->list . G50ca) (file->string . G50c9) (digit->integer . G50c8) (call-with-string-input-port . G50c7) (call-with-string-io . G50c6) (string-split . G50c5) (bytevector-for-each . G50c4) (string->regexp . G50c3) (rxmatch . G50c2) (regexp-replace-all . G50c1) (hashtable-for-each . G50c0) (readdir . G50bf) (get-environment-variables . G50be) (get-environment-variable . G50bd) (get-command-line . G50bc) (sys-display . G50bb) (source-info . G50ba) (make-compiler-instruction . G50b9) (make-instruction . G50b8) (set-source-info! . G50b7) (fasl-write . G50b6) (receive . G50b5) (string-upcase . G50b4) (string-titlecase . G50b3) (string-normalize-nfkd . G50b2) (string-normalize-nfkc . G50b1) (string-normalize-nfd . G50b0) (string-normalize-nfc . G50af) (string-foldcase . G50ae) (string-downcase . G50ad) (string-ci>? . G50ac) (string-ci>=? . G50ab) (string-ci=? . G50aa) (string-ci<? . G50a9) (string-ci<=? . G50a8) (char-whitespace? . G50a7) (char-upper-case? . G50a6) (char-title-case? . G50a5) (char-numeric? . G50a4) (char-lower-case? . G50a3) (char-general-category . G50a2) (char-upcase . G50a1) (char-titlecase . G50a0) (char-foldcase . G509f) (char-downcase . G509e) (char-ci>? . G509d) (char-ci>=? . G509c) (char-ci=? . G509b) (char-ci<? . G509a) (char-ci<=? . G5099) (char-alphabetic? . G5098) (make-variable-transformer . G2e68) (identifier? . G315f) (generate-temporaries . G3149) (free-identifier=? . G314b) (syntax->datum . G3163) (datum->syntax . G3161) (bound-identifier=? . G314d) (record-type-descriptor? . G5097) (record-predicate . G5096) (record-mutator . G5095) (record-constructor . G5094) (record-accessor . G5093) (make-record-type-descriptor . G5092) (make-record-constructor-descriptor . G5091) (record? . G5090) (record-type-uid . G508f) (record-type-sealed? . G508e) (record-type-parent . G508d) (record-type-opaque? . G508c) (record-type-name . G508b) (record-type-generative? . G508a) (record-type-field-names . G5089) (record-rtd . G5088) (record-field-mutable? . G5087) (delete-file . G5086) (file-exists? . G5085) (vector-sort! . G5084) (vector-sort . G5083) (list-sort . G5082) (symbol-hash . G5081) (string-ci-hash . G5080) (string-hash . G507f) (equal-hash . G507e) (hashtable-equivalence-function . G507d) (make-hashtable . G507c) (hashtable-hash-function . G507b) (make-eqv-hashtable . G507a) (make-eq-hashtable . G5079) (hashtable? . G5078) (hashtable-update! . G5077) (hashtable-size . G5076) (hashtable-set! . G5075) (hashtable-ref . G5074) (hashtable-mutable? . G5073) (hashtable-keys . G5072) (hashtable-entries . G5071) (hashtable-delete! . G5070) (hashtable-copy . G506f) (hashtable-contains? . G506e) (hashtable-clear! . G506d) (call-with-output-file . G506c) (call-with-input-file . G506b) (write-char . G506a) (write . G5069) (with-output-to-file . G5068) (with-input-from-file . G5067) (read-char . G5066) (read . G5065) (peek-char . G5064) (open-output-file . G5063) (open-input-file . G5062) (newline . G5061) (display . G5060) (close-output-port . G505f) (close-input-port . G505e) (eof-object? . G505d) (eof-object . G505c) (current-error-port . G505b) (current-output-port . G505a) (current-input-port . G5059) (output-port? . G5058) (input-port? . G5057) (utf-8-codec . G5056) (utf-16-codec . G5055) (transcoder-error-handling-mode . G5054) (transcoder-eol-style . G5053) (transcoder-codec . G5052) (transcoded-port . G5051) (textual-port? . G5050) (string->bytevector . G504f) (standard-output-port . G504e) (standard-input-port . G504d) (standard-error-port . G504c) (set-port-position! . G504b) (put-u8 . G504a) (put-string . G5049) (put-datum . G5048) (put-char . G5047) (put-bytevector . G5046) (port? . G5045) (port-transcoder . G5044) (port-position . G5043) (port-has-set-port-position!? . G5042) (port-has-port-position? . G5041) (port-eof? . G5040) (output-port-buffer-mode . G503f) (open-string-output-port . G503e) (open-string-input-port . G503d) (open-file-output-port . G503c) (open-file-input/output-port . G503b) (open-file-input-port . G503a) (open-bytevector-output-port . G5039) (open-bytevector-input-port . G5038) (native-transcoder . G5037) (native-eol-style . G5036) (make-transcoder . G5035) (latin-1-codec . G5034) (make-i/o-write-error . G4c78) (make-i/o-read-error . G4c64) (make-i/o-port-error . G4d0f) (make-i/o-invalid-position-error . G4c8d) (make-i/o-filename-error . G4ca6) (make-i/o-file-protection-error . G4cbe) (make-i/o-file-is-read-only-error . G4cd2) (make-i/o-file-does-not-exist-error . G4cfa) (make-i/o-file-already-exists-error . G4ce6) (make-i/o-error . G4c50) (make-i/o-encoding-error . G4d3c) (make-i/o-decoding-error . G4d27) (make-custom-textual-output-port . G5033) (make-custom-textual-input/output-port . G5032) (make-custom-textual-input-port . G5031) (make-custom-binary-output-port . G5030) (make-custom-binary-input/output-port . G502f) (make-custom-binary-input-port . G502e) (make-bytevector . G502d) (lookahead-u8 . G502c) (lookahead-char . G502b) (i/o-write-error? . G4c7a) (i/o-read-error? . G4c66) (i/o-port-error? . G4d13) (i/o-invalid-position-error? . G4c91) (i/o-filename-error? . G4caa) (i/o-file-protection-error? . G4cc0) (i/o-file-is-read-only-error? . G4cd4) (i/o-file-does-not-exist-error? . G4cfc) (i/o-file-already-exists-error? . G4ce8) (i/o-error? . G4c52) (i/o-error-port . G4d15) (i/o-error-filename . G4cac) (i/o-encoding-error? . G4d40) (i/o-encoding-error-char . G4d42) (i/o-decoding-error? . G4d29) (get-u8 . G502a) (get-string-n! . G5029) (get-string-n . G5028) (get-string-all . G5027) (get-line . G5026) (get-datum . G5025) (get-char . G5024) (get-bytevector-some . G5023) (get-bytevector-n! . G5022) (get-bytevector-n . G5021) (get-bytevector-all . G5020) (flush-output-port . G501f) (close-port . G501e) (scheme-report-environment . G3137) (quotient . G501d) (null-environment . G3135) (remainder . G501c) (modulo . G501b) (inexact->exact . G501a) (force . G5019) (exact->inexact . G5018) (exit . G5017) (command-line . G4d9b) (string-fill! . G5016) (string-set! . G5015) (set-cdr! . G5014) (set-car! . G5013) (remove . G5012) (remv . G5011) (remp . G5010) (remq . G500f) (partition . G500e) (memv . G500d) (memq . G500c) (memp . G500b) (member . G500a) (exists . G5009) (for-all . G5008) (fold-right . G5007) (fold-left . G5006) (find . G5005) (filter . G5004) (cons* . G5003) (assv . G5002) (assq . G5001) (assp . G5000) (assoc . G4fff) (call-with-string-output-port . G4ffe) (call-with-port . G4ffd) (call-with-bytevector-output-port . G4ffc) (bytevector->string . G4ffb) (buffer-mode? . G4ffa) (binary-port? . G4ff9) (with-exception-handler . G4ff8) (raise-continuable . G4ff7) (raise . G4ff6) (eval . G313b) (environment . G3133) (make-enumeration . G4ff5) (enum-set=? . G4ff4) (enum-set-universe . G4ff3) (enum-set-union . G4ff2) (enum-set-subset? . G4ff1) (enum-set-projection . G4ff0) (enum-set-member? . G4fef) (enum-set-intersection . G4fee) (enum-set-indexer . G4fed) (enum-set-difference . G4fec) (enum-set-constructor . G4feb) (enum-set-complement . G4fea) (enum-set->list . G4fe9) (who-condition? . G4b6e) (warning? . G4aee) (violation? . G4b2a) (undefined-violation? . G4bde) (syntax-violation? . G4bc6) (syntax-violation-subform . G4bca) (syntax-violation-form . G4bc8) (syntax-violation . G315d) (simple-conditions . G4fe8) (serious-condition? . G4b02) (non-continuable-violation? . G4b84) (message-condition? . G4ad8) (make-who-condition . G4b6a) (make-warning . G4aec) (make-violation . G4b28) (make-undefined-violation . G4bdc) (make-syntax-violation . G4bc0) (make-serious-condition . G4b00) (make-non-continuable-violation . G4b82) (make-message-condition . G4ad4) (make-lexical-violation . G4baa) (make-irritants-condition . G4b51) (make-implementation-restriction-violation . G4b96) (make-error . G4b14) (make-assertion-violation . G4b3c) (lexical-violation? . G4bac) (irritants-condition? . G4b55) (implementation-restriction-violation? . G4b98) (error? . G4b16) (condition-who . G4b70) (condition-predicate . G4fe7) (condition-message . G4ada) (condition-irritants . G4b57) (condition-accessor . G4fe6) (condition . G4fe5) (assertion-violation? . G4b3e) (condition? . G4fe4) (utf32->string . G4fe3) (utf16->string . G4fe2) (utf8->string . G4fe1) (uint-list->bytevector . G4fe0) (u8-list->bytevector . G4fdf) (string->utf8 . G4fde) (string->utf32 . G4fdd) (string->utf16 . G4fdc) (sint-list->bytevector . G4fdb) (native-endianness . G4fda) (bytevector? . G4fd9) (bytevector=? . G4fd8) (bytevector-uint-set! . G4fd7) (bytevector-uint-ref . G4fd6) (bytevector-u8-set! . G4fd5) (bytevector-u8-ref . G4fd4) (bytevector-u64-set! . G4fd3) (bytevector-u64-ref . G4fd2) (bytevector-u64-native-set! . G4fd1) (bytevector-u64-native-ref . G4fd0) (bytevector-u32-set! . G4fcf) (bytevector-u32-ref . G4fce) (bytevector-u32-native-set! . G4fcd) (bytevector-u32-native-ref . G4fcc) (bytevector-u16-set! . G4fcb) (bytevector-u16-ref . G4fca) (bytevector-u16-native-set! . G4fc9) (bytevector-u16-native-ref . G4fc8) (bytevector-sint-set! . G4fc7) (bytevector-sint-ref . G4fc6) (bytevector-s8-set! . G4fc5) (bytevector-s8-ref . G4fc4) (bytevector-s64-set! . G4fc3) (bytevector-s64-ref . G4fc2) (bytevector-s64-native-set! . G4fc1) (bytevector-s64-native-ref . G4fc0) (bytevector-s32-set! . G4fbf) (bytevector-s32-ref . G4fbe) (bytevector-s32-native-set! . G4fbd) (bytevector-s32-native-ref . G4fbc) (bytevector-s16-set! . G4fbb) (bytevector-s16-ref . G4fba) (bytevector-s16-native-set! . G4fb9) (bytevector-s16-native-ref . G4fb8) (bytevector-length . G4fb7) (bytevector-ieee-single-ref . G4fb6) (bytevector-ieee-single-native-set! . G4fb5) (bytevector-ieee-single-native-ref . G4fb4) (bytevector-ieee-double-ref . G4fb3) (bytevector-ieee-double-native-set! . G4fb2) (bytevector-ieee-double-native-ref . G4fb1) (bytevector-fill! . G4fb0) (bytevector-copy! . G4faf) (bytevector-copy . G4fae) (bytevector->uint-list . G4fad) (bytevector->u8-list . G4fac) (bytevector->sint-list . G4fab) (no-nans-violation? . G4faa) (no-infinities-violation? . G4fa9) (make-no-nans-violation . G4fa8) (make-no-infinities-violation . G4fa7) (real->flonum . G4fa6) (flzero? . G4fa5) (fltruncate . G4fa4) (fltan . G4fa3) (flsqrt . G4fa2) (flsin . G4fa1) (flround . G4fa0) (flpositive? . G4f9f) (flonum? . G4f9e) (flodd? . G4f9d) (flnumerator . G4f9c) (flnegative? . G4f9b) (flnan? . G4f9a) (flmod0 . G4f99) (flmod . G4f98) (flmin . G4f97) (flmax . G4f96) (fllog . G4f95) (flinteger? . G4f94) (flinfinite? . G4f93) (flfloor . G4f92) (flfinite? . G4f91) (flexpt . G4f90) (flexp . G4f8f) (fleven? . G4f8e) (fldiv0-and-mod0 . G4f8d) (fldiv0 . G4f8c) (fldiv-and-mod . G4f8b) (fldiv . G4f8a) (fldenominator . G4f89) (flcos . G4f88) (flceiling . G4f87) (flatan . G4f86) (flasin . G4f85) (flacos . G4f84) (flabs . G4f83) (fl>? . G4f82) (fl>=? . G4f81) (fl=? . G4f80) (fl<? . G4f7f) (fl<=? . G4f7e) (fl/ . G4f7d) (fl- . G4f7c) (fl+ . G4f7b) (fl* . G4f7a) (fixnum->flonum . G4f79) (fxzero? . G4f78) (fxxor . G4f77) (fxrotate-bit-field . G4f76) (fxreverse-bit-field . G4f75) (fxpositive? . G4f74) (fxodd? . G4f73) (fxnot . G4f72) (fxnegative? . G4f71) (fxmod0 . G4f70) (fxmod . G4f6f) (fxmin . G4f6e) (fxmax . G4f6d) (fxlength . G4f6c) (fxior . G4f6b) (fxif . G4f6a) (fxfirst-bit-set . G4f69) (fxeven? . G4f68) (fxdiv0-and-mod0 . G4f67) (fxdiv0 . G4f66) (fxdiv-and-mod . G4f65) (fxdiv . G4f64) (fxcopy-bit-field . G4f63) (fxcopy-bit . G4f62) (fxbit-set? . G4f61) (fxbit-field . G4f60) (fxbit-count . G4f5f) (fxarithmetic-shift-right . G4f5e) (fxarithmetic-shift-left . G4f5d) (fxarithmetic-shift . G4f5c) (fxand . G4f5b) (fx>? . G4f5a) (fx>=? . G4f59) (fx=? . G4f58) (fx<? . G4f57) (fx<=? . G4f56) (fx-/carry . G4f55) (fx- . G4f54) (fx+/carry . G4f53) (fx+ . G4f52) (fx*/carry . G4f51) (fx* . G4f50) (greatest-fixnum . G4f4f) (least-fixnum . G4f4e) (fixnum-width . G4f4d) (fixnum? . G4f4c) (bitwise-rotate-bit-field . G4f4b) (bitwise-reverse-bit-field . G4f4a) (bitwise-length . G4f49) (bitwise-if . G4f48) (bitwise-first-bit-set . G4f47) (bitwise-copy-bit-field . G4f46) (bitwise-copy-bit . G4f45) (bitwise-bit-set? . G4f44) (bitwise-bit-field . G4f43) (bitwise-bit-count . G4f42) (bitwise-xor . G4f41) (bitwise-ior . G4f40) (bitwise-and . G4f3f) (bitwise-not . G4f3e) (bitwise-arithmetic-shift-right . G4f3d) (bitwise-arithmetic-shift-left . G4f3c) (bitwise-arithmetic-shift . G4f3b) (zero? . G4f3a) (vector? . G4f39) (vector-set! . G4f38) (vector-ref . G4f37) (vector-map . G4f36) (vector-length . G4f35) (vector-for-each . G4f34) (vector-fill! . G4f33) (vector->list . G4f32) (vector . G4f31) (values . G4f30) (truncate . G4f2f) (tan . G4f2e) (symbol? . G4f2d) (symbol=? . G4f2c) (symbol->string . G4f2b) (substring . G4f2a) (string? . G4f29) (string>? . G4f28) (string>=? . G4f27) (string=? . G4f26) (string<? . G4f25) (string<=? . G4f24) (string-ref . G4f23) (string-length . G4f22) (string-for-each . G4f21) (string-copy . G4f20) (string-append . G4f1f) (string->symbol . G4f1e) (string->number . G4f1d) (string->list . G4f1c) (string . G4f1b) (sqrt . G4f1a) (sin . G4f19) (round . G4f18) (reverse . G4f17) (real? . G4f16) (real-valued? . G4f15) (real-part . G4f14) (rationalize . G4f13) (rational? . G4f12) (rational-valued? . G4f11) (procedure? . G4f10) (positive? . G4f0f) (pair? . G4f0e) (odd? . G4f0d) (numerator . G4f0c) (number? . G4f0b) (number->string . G4f0a) (null? . G4f09) (not . G4f08) (negative? . G4f07) (nan? . G4f06) (min . G4f05) (max . G4f04) (map . G4f03) (make-vector . G4f02) (make-string . G4f01) (make-rectangular . G4f00) (make-polar . G4eff) (magnitude . G4efe) (log . G4efd) (list? . G4efc) (list-tail . G4efb) (list-ref . G4efa) (list->vector . G4ef9) (list->string . G4ef8) (list . G4ef7) (length . G4ef6) (lcm . G4ef5) (integer? . G4ef4) (integer-valued? . G4ef3) (integer->char . G4ef2) (infinite? . G4ef1) (inexact? . G4ef0) (inexact . G4eef) (imag-part . G4eee) (gcd . G4eed) (for-each . G4eec) (floor . G4eeb) (finite? . G4eea) (expt . G4ee9) (exp . G4ee8) (exact? . G4ee7) (exact-integer-sqrt . G4ee6) (exact . G4ee5) (even? . G4ee4) (error . G4ee3) (eqv? . G4ee2) (equal? . G4ee1) (eq? . G4ee0) (dynamic-wind . G4edf) (div0-and-mod0 . G4ede) (mod0 . G4edd) (div0 . G4edc) (div-and-mod . G4edb) (mod . G4eda) (div . G4ed9) (denominator . G4ed8) (cos . G4ed7) (cons . G4ed6) (complex? . G4ed5) (char? . G4ed4) (char>? . G4ed3) (char>=? . G4ed2) (char=? . G4ed1) (char<? . G4ed0) (char<=? . G4ecf) (char->integer . G4ece) (ceiling . G4ecd) (call-with-values . G4ecc) (call/cc . G4ecb) (call-with-current-continuation . G4eca) (cddddr . G4ec9) (cdddar . G4ec8) (cddadr . G4ec7) (cddaar . G4ec6) (cdaddr . G4ec5) (cdadar . G4ec4) (cdaadr . G4ec3) (cdaaar . G4ec2) (cadddr . G4ec1) (caddar . G4ec0) (cadadr . G4ebf) (cadaar . G4ebe) (caaddr . G4ebd) (caadar . G4ebc) (caaadr . G4ebb) (caaaar . G4eba) (cdddr . G4eb9) (cddar . G4eb8) (cdadr . G4eb7) (cdaar . G4eb6) (caddr . G4eb5) (cadar . G4eb4) (caadr . G4eb3) (caaar . G4eb2) (cddr . G4eb1) (cdar . G4eb0) (cadr . G4eaf) (caar . G4eae) (cdr . G4ead) (car . G4eac) (boolean? . G4eab) (boolean=? . G4eaa) (atan . G4ea9) (assertion-violation . G4ea8) (asin . G4ea7) (apply . G4ea6) (append . G4ea5) (angle . G4ea4) (acos . G4ea3) (abs . G4ea2) (/ . G4ea1) (* . G4ea0) (- . G4e9f) (+ . G4e9e) (>= . G4e9d) (> . G4e9c) (= . G4e9b) (<= . G4e9a) (< . G4e99) (library . G4e98) (export . G4e97) (&no-nans . G4e96) (&no-infinities . G4e95) (&i/o-encoding . G4e94) (&i/o-decoding . G4e93) (&i/o-port . G4e92) (&i/o-file-does-not-exist . G4e91) (&i/o-file-already-exists . G4e90) (&i/o-file-is-read-only . G4e8f) (&i/o-file-protection . G4e8e) (&i/o-filename . G4e8d) (&i/o-invalid-position . G4e8c) (&i/o-write . G4e8b) (&i/o-read . G4e8a) (&i/o . G4e89) (&undefined . G4e88) (&syntax . G4e87) (&lexical . G4e86) (&implementation-restriction . G4e85) (&non-continuable . G4e84) (&who . G4e83) (&irritants . G4e82) (&assertion . G4e81) (&violation . G4e80) (&error . G4e7f) (&serious . G4e7e) (&warning . G4e7d) (&message . G4e7c) (&condition . G4e7b) (define-condition-type . G4e7a) (define-enumeration . G4e79) (define-record-type . G4e78) (parent-rtd . G4e77) (nongenerative . G4e76) (opaque . G4e75) (sealed . G4e74) (protocol . G4e73) (parent . G4e72) (immutable . G4e71) (mutable . G4e70) (fields . G4e6f) (error-handling-mode . G4e6e) (file-options . G4e6d) (buffer-mode . G4e6c) (eol-style . G4e6b) (guard . G4e6a) (trace-define . G4e69) (trace-lambda . G4e68) (unsyntax-splicing . G4e67) (unsyntax . G4e66) (unquote-splicing . G4e65) (unquote . G4e64) (_ . G4e63) (else . G4e62) (=> . G4e61) (... . G4e60) (assert . G4e5f) (endianness . G4e5e) (delay . G4e5d) (time . G4e5c) (or . G4e5b) (and . G4e5a) (do . G4e59) (cond . G4e58) (let* . G4e57) (let . G4e56) (let*-values . G4e55) (let-values . G4e54) (identifier-syntax . G4e53) (with-syntax . G4e52) (quasisyntax . G4e51) (quasiquote . G4e50) (syntax-rules . G4e4f) (include . G4e4e) (define-struct . G4e4d) (record-constructor-descriptor . G4e4c) (record-type-descriptor . G4e4b) (case . G4e4a) (parameterize . G4e49) (unless . G4e48) (when . G4e47) (if . G4e46) (letrec* . G4e45) (letrec . G4e44) (type-descriptor . G4e43) (case-lambda . G4e42) (lambda . G4e41) (syntax . G4e40) (syntax-case . G4e3f) (quote . G4e3e) (foreign-call . G4e3d) (letrec-syntax . G4e3c) (let-syntax . G4e3b) (set! . G4e3a) (import . G4e39) (begin . G4e38) (module . G4e37) (define-syntax . G4e36) (define . G4e35)) '((G5130 core-prim . &no-nans-rcd) (G512f core-prim . &no-nans-rtd) (G512e core-prim . &no-infinities-rcd) (G512d core-prim . &no-infinities-rtd) (G512c core-prim . &i/o-encoding-rcd) (G512b core-prim . &i/o-encoding-rtd) (G512a core-prim . &i/o-decoding-rcd) (G5129 core-prim . &i/o-decoding-rtd) (G5128 core-prim . &i/o-port-rcd) (G5127 core-prim . &i/o-port-rtd) (G5126 core-prim . &i/o-file-does-not-exist-rcd) (G5125 core-prim . &i/o-file-does-not-exist-rtd) (G5124 core-prim . &i/o-file-already-exists-rcd) (G5123 core-prim . &i/o-file-already-exists-rtd) (G5122 core-prim . &i/o-file-is-read-only-rcd) (G5121 core-prim . &i/o-file-is-read-only-rtd) (G5120 core-prim . &i/o-file-protection-rcd) (G511f core-prim . &i/o-file-protection-rtd) (G511e core-prim . &i/o-filename-rcd) (G511d core-prim . &i/o-filename-rtd) (G511c core-prim . &i/o-invalid-position-rcd) (G511b core-prim . &i/o-invalid-position-rtd) (G511a core-prim . &i/o-write-rcd) (G5119 core-prim . &i/o-write-rtd) (G5118 core-prim . &i/o-read-rcd) (G5117 core-prim . &i/o-read-rtd) (G5116 core-prim . &i/o-rcd) (G5115 core-prim . &i/o-rtd) (G5114 core-prim . &undefined-rcd) (G5113 core-prim . &undefined-rtd) (G5112 core-prim . &syntax-rcd) (G5111 core-prim . &syntax-rtd) (G5110 core-prim . &lexical-rcd) (G510f core-prim . &lexical-rtd) (G510e core-prim . &implementation-restriction-rcd) (G510d core-prim . &implementation-restriction-rtd) (G510c core-prim . &non-continuable-rcd) (G510b core-prim . &non-continuable-rtd) (G510a core-prim . &who-rcd) (G5109 core-prim . &who-rtd) (G5108 core-prim . &irritants-rcd) (G5107 core-prim . &irritants-rtd) (G5106 core-prim . &assertion-rcd) (G5105 core-prim . &assertion-rtd) (G5104 core-prim . &violation-rcd) (G5103 core-prim . &violation-rtd) (G5102 core-prim . &error-rcd) (G5101 core-prim . &error-rtd) (G5100 core-prim . &serious-rcd) (G50ff core-prim . &serious-rtd) (G50fe core-prim . &warning-rcd) (G50fd core-prim . &warning-rtd) (G50fc core-prim . &message-rcd) (G50fb core-prim . &message-rtd) (G50fa core-prim . &condition-rcd) (G50f9 core-prim . &condition-rtd) (G3157 core-prim . syntax-error) (G306a core-prim . syntax-dispatch) (G50f8 core-prim . pretty-print) (G50f7 core-prim . eval-core) (G50f6 core-prim . set-symbol-value!) (G50f5 core-prim . symbol-value) (G50f4 core-prim . gensym) (G50f3 core-prim . void) (G4da1 core-prim . load) (G3169 core-prim . interaction-environment) (G50f2 core-prim . char-ready?) (G50f1 core-prim . regexp?) (G50f0 core-prim . read-line) (G50ef core-prim . dotted-list?) (G50ee core-prim . circular-list?) (G50ed core-prim . proper-list?) (G50ec core-prim . circular-list) (G50eb core-prim . last) (G50ea core-prim . last-pair) (G50e9 core-prim . not-pair?) (G50e8 core-prim . split-at!) (G50e7 core-prim . split-at) (G50e6 core-prim . list=) (G50e5 core-prim . list-copy) (G50e4 core-prim . list-tabulate) (G50e3 core-prim . make-list) (G50e2 core-prim . xcons) (G50e1 core-prim . tenth) (G50e0 core-prim . ninth) (G50df core-prim . eighth) (G50de core-prim . seventh) (G50dd core-prim . sixth) (G50dc core-prim . fifth) (G50db core-prim . drop-right!) (G50da core-prim . drop-right) (G50d9 core-prim . take-right) (G50d8 core-prim . take!) (G50d7 core-prim . drop) (G50d6 core-prim . take) (G50d5 core-prim . car+cdr) (G50d4 core-prim . third) (G50d3 core-prim . second) (G50d2 core-prim . first) (G50d1 core-prim . assoc-ref) (G50d0 core-prim . alist-cons) (G50cf core-prim . print) (G50ce core-prim . format) (G50cd core-prim . standard-library-path) (G50cc core-prim . current-directory) (G50cb core-prim . write-to-file) (G50ca core-prim . file->list) (G50c9 core-prim . file->string) (G50c8 core-prim . digit->integer) (G50c7 core-prim . call-with-string-input-port) (G50c6 core-prim . call-with-string-io) (G50c5 core-prim . string-split) (G50c4 core-prim . bytevector-for-each) (G50c3 core-prim . string->regexp) (G50c2 core-prim . rxmatch) (G50c1 core-prim . regexp-replace-all) (G50c0 core-prim . hashtable-for-each) (G50bf core-prim . readdir) (G50be core-prim . get-environment-variables) (G50bd core-prim . get-environment-variable) (G50bc core-prim . get-command-line) (G50bb core-prim . sys-display) (G50ba core-prim . source-info) (G50b9 core-prim . make-compiler-instruction) (G50b8 core-prim . make-instruction) (G50b7 core-prim . set-source-info!) (G50b6 core-prim . fasl-write) (G50b5 core-prim . receive) (G50b4 core-prim . string-upcase) (G50b3 core-prim . string-titlecase) (G50b2 core-prim . string-normalize-nfkd) (G50b1 core-prim . string-normalize-nfkc) (G50b0 core-prim . string-normalize-nfd) (G50af core-prim . string-normalize-nfc) (G50ae core-prim . string-foldcase) (G50ad core-prim . string-downcase) (G50ac core-prim . string-ci>?) (G50ab core-prim . string-ci>=?) (G50aa core-prim . string-ci=?) (G50a9 core-prim . string-ci<?) (G50a8 core-prim . string-ci<=?) (G50a7 core-prim . char-whitespace?) (G50a6 core-prim . char-upper-case?) (G50a5 core-prim . char-title-case?) (G50a4 core-prim . char-numeric?) (G50a3 core-prim . char-lower-case?) (G50a2 core-prim . char-general-category) (G50a1 core-prim . char-upcase) (G50a0 core-prim . char-titlecase) (G509f core-prim . char-foldcase) (G509e core-prim . char-downcase) (G509d core-prim . char-ci>?) (G509c core-prim . char-ci>=?) (G509b core-prim . char-ci=?) (G509a core-prim . char-ci<?) (G5099 core-prim . char-ci<=?) (G5098 core-prim . char-alphabetic?) (G2e68 core-prim . make-variable-transformer) (G315f core-prim . identifier?) (G3149 core-prim . generate-temporaries) (G314b core-prim . free-identifier=?) (G3163 core-prim . syntax->datum) (G3161 core-prim . datum->syntax) (G314d core-prim . bound-identifier=?) (G5097 core-prim . record-type-descriptor?) (G5096 core-prim . record-predicate) (G5095 core-prim . record-mutator) (G5094 core-prim . record-constructor) (G5093 core-prim . record-accessor) (G5092 core-prim . make-record-type-descriptor) (G5091 core-prim . make-record-constructor-descriptor) (G5090 core-prim . record?) (G508f core-prim . record-type-uid) (G508e core-prim . record-type-sealed?) (G508d core-prim . record-type-parent) (G508c core-prim . record-type-opaque?) (G508b core-prim . record-type-name) (G508a core-prim . record-type-generative?) (G5089 core-prim . record-type-field-names) (G5088 core-prim . record-rtd) (G5087 core-prim . record-field-mutable?) (G5086 core-prim . delete-file) (G5085 core-prim . file-exists?) (G5084 core-prim . vector-sort!) (G5083 core-prim . vector-sort) (G5082 core-prim . list-sort) (G5081 core-prim . symbol-hash) (G5080 core-prim . string-ci-hash) (G507f core-prim . string-hash) (G507e core-prim . equal-hash) (G507d core-prim . hashtable-equivalence-function) (G507c core-prim . make-hashtable) (G507b core-prim . hashtable-hash-function) (G507a core-prim . make-eqv-hashtable) (G5079 core-prim . make-eq-hashtable) (G5078 core-prim . hashtable?) (G5077 core-prim . hashtable-update!) (G5076 core-prim . hashtable-size) (G5075 core-prim . hashtable-set!) (G5074 core-prim . hashtable-ref) (G5073 core-prim . hashtable-mutable?) (G5072 core-prim . hashtable-keys) (G5071 core-prim . hashtable-entries) (G5070 core-prim . hashtable-delete!) (G506f core-prim . hashtable-copy) (G506e core-prim . hashtable-contains?) (G506d core-prim . hashtable-clear!) (G506c core-prim . call-with-output-file) (G506b core-prim . call-with-input-file) (G506a core-prim . write-char) (G5069 core-prim . write) (G5068 core-prim . with-output-to-file) (G5067 core-prim . with-input-from-file) (G5066 core-prim . read-char) (G5065 core-prim . read) (G5064 core-prim . peek-char) (G5063 core-prim . open-output-file) (G5062 core-prim . open-input-file) (G5061 core-prim . newline) (G5060 core-prim . display) (G505f core-prim . close-output-port) (G505e core-prim . close-input-port) (G505d core-prim . eof-object?) (G505c core-prim . eof-object) (G505b core-prim . current-error-port) (G505a core-prim . current-output-port) (G5059 core-prim . current-input-port) (G5058 core-prim . output-port?) (G5057 core-prim . input-port?) (G5056 core-prim . utf-8-codec) (G5055 core-prim . utf-16-codec) (G5054 core-prim . transcoder-error-handling-mode) (G5053 core-prim . transcoder-eol-style) (G5052 core-prim . transcoder-codec) (G5051 core-prim . transcoded-port) (G5050 core-prim . textual-port?) (G504f core-prim . string->bytevector) (G504e core-prim . standard-output-port) (G504d core-prim . standard-input-port) (G504c core-prim . standard-error-port) (G504b core-prim . set-port-position!) (G504a core-prim . put-u8) (G5049 core-prim . put-string) (G5048 core-prim . put-datum) (G5047 core-prim . put-char) (G5046 core-prim . put-bytevector) (G5045 core-prim . port?) (G5044 core-prim . port-transcoder) (G5043 core-prim . port-position) (G5042 core-prim . port-has-set-port-position!?) (G5041 core-prim . port-has-port-position?) (G5040 core-prim . port-eof?) (G503f core-prim . output-port-buffer-mode) (G503e core-prim . open-string-output-port) (G503d core-prim . open-string-input-port) (G503c core-prim . open-file-output-port) (G503b core-prim . open-file-input/output-port) (G503a core-prim . open-file-input-port) (G5039 core-prim . open-bytevector-output-port) (G5038 core-prim . open-bytevector-input-port) (G5037 core-prim . native-transcoder) (G5036 core-prim . native-eol-style) (G5035 core-prim . make-transcoder) (G5034 core-prim . latin-1-codec) (G4c78 core-prim . make-i/o-write-error) (G4c64 core-prim . make-i/o-read-error) (G4d0f core-prim . make-i/o-port-error) (G4c8d core-prim . make-i/o-invalid-position-error) (G4ca6 core-prim . make-i/o-filename-error) (G4cbe core-prim . make-i/o-file-protection-error) (G4cd2 core-prim . make-i/o-file-is-read-only-error) (G4cfa core-prim . make-i/o-file-does-not-exist-error) (G4ce6 core-prim . make-i/o-file-already-exists-error) (G4c50 core-prim . make-i/o-error) (G4d3c core-prim . make-i/o-encoding-error) (G4d27 core-prim . make-i/o-decoding-error) (G5033 core-prim . make-custom-textual-output-port) (G5032 core-prim . make-custom-textual-input/output-port) (G5031 core-prim . make-custom-textual-input-port) (G5030 core-prim . make-custom-binary-output-port) (G502f core-prim . make-custom-binary-input/output-port) (G502e core-prim . make-custom-binary-input-port) (G502d core-prim . make-bytevector) (G502c core-prim . lookahead-u8) (G502b core-prim . lookahead-char) (G4c7a core-prim . i/o-write-error?) (G4c66 core-prim . i/o-read-error?) (G4d13 core-prim . i/o-port-error?) (G4c91 core-prim . i/o-invalid-position-error?) (G4caa core-prim . i/o-filename-error?) (G4cc0 core-prim . i/o-file-protection-error?) (G4cd4 core-prim . i/o-file-is-read-only-error?) (G4cfc core-prim . i/o-file-does-not-exist-error?) (G4ce8 core-prim . i/o-file-already-exists-error?) (G4c52 core-prim . i/o-error?) (G4d15 core-prim . i/o-error-port) (G4cac core-prim . i/o-error-filename) (G4d40 core-prim . i/o-encoding-error?) (G4d42 core-prim . i/o-encoding-error-char) (G4d29 core-prim . i/o-decoding-error?) (G502a core-prim . get-u8) (G5029 core-prim . get-string-n!) (G5028 core-prim . get-string-n) (G5027 core-prim . get-string-all) (G5026 core-prim . get-line) (G5025 core-prim . get-datum) (G5024 core-prim . get-char) (G5023 core-prim . get-bytevector-some) (G5022 core-prim . get-bytevector-n!) (G5021 core-prim . get-bytevector-n) (G5020 core-prim . get-bytevector-all) (G501f core-prim . flush-output-port) (G501e core-prim . close-port) (G3137 core-prim . scheme-report-environment) (G501d core-prim . quotient) (G3135 core-prim . null-environment) (G501c core-prim . remainder) (G501b core-prim . modulo) (G501a core-prim . inexact->exact) (G5019 core-prim . force) (G5018 core-prim . exact->inexact) (G5017 core-prim . exit) (G4d9b core-prim . command-line) (G5016 core-prim . string-fill!) (G5015 core-prim . string-set!) (G5014 core-prim . set-cdr!) (G5013 core-prim . set-car!) (G5012 core-prim . remove) (G5011 core-prim . remv) (G5010 core-prim . remp) (G500f core-prim . remq) (G500e core-prim . partition) (G500d core-prim . memv) (G500c core-prim . memq) (G500b core-prim . memp) (G500a core-prim . member) (G5009 core-prim . exists) (G5008 core-prim . for-all) (G5007 core-prim . fold-right) (G5006 core-prim . fold-left) (G5005 core-prim . find) (G5004 core-prim . filter) (G5003 core-prim . cons*) (G5002 core-prim . assv) (G5001 core-prim . assq) (G5000 core-prim . assp) (G4fff core-prim . assoc) (G4ffe core-prim . call-with-string-output-port) (G4ffd core-prim . call-with-port) (G4ffc core-prim . call-with-bytevector-output-port) (G4ffb core-prim . bytevector->string) (G4ffa core-prim . buffer-mode?) (G4ff9 core-prim . binary-port?) (G4ff8 core-prim . with-exception-handler) (G4ff7 core-prim . raise-continuable) (G4ff6 core-prim . raise) (G313b core-prim . eval) (G3133 core-prim . environment) (G4ff5 core-prim . make-enumeration) (G4ff4 core-prim . enum-set=?) (G4ff3 core-prim . enum-set-universe) (G4ff2 core-prim . enum-set-union) (G4ff1 core-prim . enum-set-subset?) (G4ff0 core-prim . enum-set-projection) (G4fef core-prim . enum-set-member?) (G4fee core-prim . enum-set-intersection) (G4fed core-prim . enum-set-indexer) (G4fec core-prim . enum-set-difference) (G4feb core-prim . enum-set-constructor) (G4fea core-prim . enum-set-complement) (G4fe9 core-prim . enum-set->list) (G4b6e core-prim . who-condition?) (G4aee core-prim . warning?) (G4b2a core-prim . violation?) (G4bde core-prim . undefined-violation?) (G4bc6 core-prim . syntax-violation?) (G4bca core-prim . syntax-violation-subform) (G4bc8 core-prim . syntax-violation-form) (G315d core-prim . syntax-violation) (G4fe8 core-prim . simple-conditions) (G4b02 core-prim . serious-condition?) (G4b84 core-prim . non-continuable-violation?) (G4ad8 core-prim . message-condition?) (G4b6a core-prim . make-who-condition) (G4aec core-prim . make-warning) (G4b28 core-prim . make-violation) (G4bdc core-prim . make-undefined-violation) (G4bc0 core-prim . make-syntax-violation) (G4b00 core-prim . make-serious-condition) (G4b82 core-prim . make-non-continuable-violation) (G4ad4 core-prim . make-message-condition) (G4baa core-prim . make-lexical-violation) (G4b51 core-prim . make-irritants-condition) (G4b96 core-prim . make-implementation-restriction-violation) (G4b14 core-prim . make-error) (G4b3c core-prim . make-assertion-violation) (G4bac core-prim . lexical-violation?) (G4b55 core-prim . irritants-condition?) (G4b98 core-prim . implementation-restriction-violation?) (G4b16 core-prim . error?) (G4b70 core-prim . condition-who) (G4fe7 core-prim . condition-predicate) (G4ada core-prim . condition-message) (G4b57 core-prim . condition-irritants) (G4fe6 core-prim . condition-accessor) (G4fe5 core-prim . condition) (G4b3e core-prim . assertion-violation?) (G4fe4 core-prim . condition?) (G4fe3 core-prim . utf32->string) (G4fe2 core-prim . utf16->string) (G4fe1 core-prim . utf8->string) (G4fe0 core-prim . uint-list->bytevector) (G4fdf core-prim . u8-list->bytevector) (G4fde core-prim . string->utf8) (G4fdd core-prim . string->utf32) (G4fdc core-prim . string->utf16) (G4fdb core-prim . sint-list->bytevector) (G4fda core-prim . native-endianness) (G4fd9 core-prim . bytevector?) (G4fd8 core-prim . bytevector=?) (G4fd7 core-prim . bytevector-uint-set!) (G4fd6 core-prim . bytevector-uint-ref) (G4fd5 core-prim . bytevector-u8-set!) (G4fd4 core-prim . bytevector-u8-ref) (G4fd3 core-prim . bytevector-u64-set!) (G4fd2 core-prim . bytevector-u64-ref) (G4fd1 core-prim . bytevector-u64-native-set!) (G4fd0 core-prim . bytevector-u64-native-ref) (G4fcf core-prim . bytevector-u32-set!) (G4fce core-prim . bytevector-u32-ref) (G4fcd core-prim . bytevector-u32-native-set!) (G4fcc core-prim . bytevector-u32-native-ref) (G4fcb core-prim . bytevector-u16-set!) (G4fca core-prim . bytevector-u16-ref) (G4fc9 core-prim . bytevector-u16-native-set!) (G4fc8 core-prim . bytevector-u16-native-ref) (G4fc7 core-prim . bytevector-sint-set!) (G4fc6 core-prim . bytevector-sint-ref) (G4fc5 core-prim . bytevector-s8-set!) (G4fc4 core-prim . bytevector-s8-ref) (G4fc3 core-prim . bytevector-s64-set!) (G4fc2 core-prim . bytevector-s64-ref) (G4fc1 core-prim . bytevector-s64-native-set!) (G4fc0 core-prim . bytevector-s64-native-ref) (G4fbf core-prim . bytevector-s32-set!) (G4fbe core-prim . bytevector-s32-ref) (G4fbd core-prim . bytevector-s32-native-set!) (G4fbc core-prim . bytevector-s32-native-ref) (G4fbb core-prim . bytevector-s16-set!) (G4fba core-prim . bytevector-s16-ref) (G4fb9 core-prim . bytevector-s16-native-set!) (G4fb8 core-prim . bytevector-s16-native-ref) (G4fb7 core-prim . bytevector-length) (G4fb6 core-prim . bytevector-ieee-single-ref) (G4fb5 core-prim . bytevector-ieee-single-native-set!) (G4fb4 core-prim . bytevector-ieee-single-native-ref) (G4fb3 core-prim . bytevector-ieee-double-ref) (G4fb2 core-prim . bytevector-ieee-double-native-set!) (G4fb1 core-prim . bytevector-ieee-double-native-ref) (G4fb0 core-prim . bytevector-fill!) (G4faf core-prim . bytevector-copy!) (G4fae core-prim . bytevector-copy) (G4fad core-prim . bytevector->uint-list) (G4fac core-prim . bytevector->u8-list) (G4fab core-prim . bytevector->sint-list) (G4faa core-prim . no-nans-violation?) (G4fa9 core-prim . no-infinities-violation?) (G4fa8 core-prim . make-no-nans-violation) (G4fa7 core-prim . make-no-infinities-violation) (G4fa6 core-prim . real->flonum) (G4fa5 core-prim . flzero?) (G4fa4 core-prim . fltruncate) (G4fa3 core-prim . fltan) (G4fa2 core-prim . flsqrt) (G4fa1 core-prim . flsin) (G4fa0 core-prim . flround) (G4f9f core-prim . flpositive?) (G4f9e core-prim . flonum?) (G4f9d core-prim . flodd?) (G4f9c core-prim . flnumerator) (G4f9b core-prim . flnegative?) (G4f9a core-prim . flnan?) (G4f99 core-prim . flmod0) (G4f98 core-prim . flmod) (G4f97 core-prim . flmin) (G4f96 core-prim . flmax) (G4f95 core-prim . fllog) (G4f94 core-prim . flinteger?) (G4f93 core-prim . flinfinite?) (G4f92 core-prim . flfloor) (G4f91 core-prim . flfinite?) (G4f90 core-prim . flexpt) (G4f8f core-prim . flexp) (G4f8e core-prim . fleven?) (G4f8d core-prim . fldiv0-and-mod0) (G4f8c core-prim . fldiv0) (G4f8b core-prim . fldiv-and-mod) (G4f8a core-prim . fldiv) (G4f89 core-prim . fldenominator) (G4f88 core-prim . flcos) (G4f87 core-prim . flceiling) (G4f86 core-prim . flatan) (G4f85 core-prim . flasin) (G4f84 core-prim . flacos) (G4f83 core-prim . flabs) (G4f82 core-prim . fl>?) (G4f81 core-prim . fl>=?) (G4f80 core-prim . fl=?) (G4f7f core-prim . fl<?) (G4f7e core-prim . fl<=?) (G4f7d core-prim . fl/) (G4f7c core-prim . fl-) (G4f7b core-prim . fl+) (G4f7a core-prim . fl*) (G4f79 core-prim . fixnum->flonum) (G4f78 core-prim . fxzero?) (G4f77 core-prim . fxxor) (G4f76 core-prim . fxrotate-bit-field) (G4f75 core-prim . fxreverse-bit-field) (G4f74 core-prim . fxpositive?) (G4f73 core-prim . fxodd?) (G4f72 core-prim . fxnot) (G4f71 core-prim . fxnegative?) (G4f70 core-prim . fxmod0) (G4f6f core-prim . fxmod) (G4f6e core-prim . fxmin) (G4f6d core-prim . fxmax) (G4f6c core-prim . fxlength) (G4f6b core-prim . fxior) (G4f6a core-prim . fxif) (G4f69 core-prim . fxfirst-bit-set) (G4f68 core-prim . fxeven?) (G4f67 core-prim . fxdiv0-and-mod0) (G4f66 core-prim . fxdiv0) (G4f65 core-prim . fxdiv-and-mod) (G4f64 core-prim . fxdiv) (G4f63 core-prim . fxcopy-bit-field) (G4f62 core-prim . fxcopy-bit) (G4f61 core-prim . fxbit-set?) (G4f60 core-prim . fxbit-field) (G4f5f core-prim . fxbit-count) (G4f5e core-prim . fxarithmetic-shift-right) (G4f5d core-prim . fxarithmetic-shift-left) (G4f5c core-prim . fxarithmetic-shift) (G4f5b core-prim . fxand) (G4f5a core-prim . fx>?) (G4f59 core-prim . fx>=?) (G4f58 core-prim . fx=?) (G4f57 core-prim . fx<?) (G4f56 core-prim . fx<=?) (G4f55 core-prim . fx-/carry) (G4f54 core-prim . fx-) (G4f53 core-prim . fx+/carry) (G4f52 core-prim . fx+) (G4f51 core-prim . fx*/carry) (G4f50 core-prim . fx*) (G4f4f core-prim . greatest-fixnum) (G4f4e core-prim . least-fixnum) (G4f4d core-prim . fixnum-width) (G4f4c core-prim . fixnum?) (G4f4b core-prim . bitwise-rotate-bit-field) (G4f4a core-prim . bitwise-reverse-bit-field) (G4f49 core-prim . bitwise-length) (G4f48 core-prim . bitwise-if) (G4f47 core-prim . bitwise-first-bit-set) (G4f46 core-prim . bitwise-copy-bit-field) (G4f45 core-prim . bitwise-copy-bit) (G4f44 core-prim . bitwise-bit-set?) (G4f43 core-prim . bitwise-bit-field) (G4f42 core-prim . bitwise-bit-count) (G4f41 core-prim . bitwise-xor) (G4f40 core-prim . bitwise-ior) (G4f3f core-prim . bitwise-and) (G4f3e core-prim . bitwise-not) (G4f3d core-prim . bitwise-arithmetic-shift-right) (G4f3c core-prim . bitwise-arithmetic-shift-left) (G4f3b core-prim . bitwise-arithmetic-shift) (G4f3a core-prim . zero?) (G4f39 core-prim . vector?) (G4f38 core-prim . vector-set!) (G4f37 core-prim . vector-ref) (G4f36 core-prim . vector-map) (G4f35 core-prim . vector-length) (G4f34 core-prim . vector-for-each) (G4f33 core-prim . vector-fill!) (G4f32 core-prim . vector->list) (G4f31 core-prim . vector) (G4f30 core-prim . values) (G4f2f core-prim . truncate) (G4f2e core-prim . tan) (G4f2d core-prim . symbol?) (G4f2c core-prim . symbol=?) (G4f2b core-prim . symbol->string) (G4f2a core-prim . substring) (G4f29 core-prim . string?) (G4f28 core-prim . string>?) (G4f27 core-prim . string>=?) (G4f26 core-prim . string=?) (G4f25 core-prim . string<?) (G4f24 core-prim . string<=?) (G4f23 core-prim . string-ref) (G4f22 core-prim . string-length) (G4f21 core-prim . string-for-each) (G4f20 core-prim . string-copy) (G4f1f core-prim . string-append) (G4f1e core-prim . string->symbol) (G4f1d core-prim . string->number) (G4f1c core-prim . string->list) (G4f1b core-prim . string) (G4f1a core-prim . sqrt) (G4f19 core-prim . sin) (G4f18 core-prim . round) (G4f17 core-prim . reverse) (G4f16 core-prim . real?) (G4f15 core-prim . real-valued?) (G4f14 core-prim . real-part) (G4f13 core-prim . rationalize) (G4f12 core-prim . rational?) (G4f11 core-prim . rational-valued?) (G4f10 core-prim . procedure?) (G4f0f core-prim . positive?) (G4f0e core-prim . pair?) (G4f0d core-prim . odd?) (G4f0c core-prim . numerator) (G4f0b core-prim . number?) (G4f0a core-prim . number->string) (G4f09 core-prim . null?) (G4f08 core-prim . not) (G4f07 core-prim . negative?) (G4f06 core-prim . nan?) (G4f05 core-prim . min) (G4f04 core-prim . max) (G4f03 core-prim . map) (G4f02 core-prim . make-vector) (G4f01 core-prim . make-string) (G4f00 core-prim . make-rectangular) (G4eff core-prim . make-polar) (G4efe core-prim . magnitude) (G4efd core-prim . log) (G4efc core-prim . list?) (G4efb core-prim . list-tail) (G4efa core-prim . list-ref) (G4ef9 core-prim . list->vector) (G4ef8 core-prim . list->string) (G4ef7 core-prim . list) (G4ef6 core-prim . length) (G4ef5 core-prim . lcm) (G4ef4 core-prim . integer?) (G4ef3 core-prim . integer-valued?) (G4ef2 core-prim . integer->char) (G4ef1 core-prim . infinite?) (G4ef0 core-prim . inexact?) (G4eef core-prim . inexact) (G4eee core-prim . imag-part) (G4eed core-prim . gcd) (G4eec core-prim . for-each) (G4eeb core-prim . floor) (G4eea core-prim . finite?) (G4ee9 core-prim . expt) (G4ee8 core-prim . exp) (G4ee7 core-prim . exact?) (G4ee6 core-prim . exact-integer-sqrt) (G4ee5 core-prim . exact) (G4ee4 core-prim . even?) (G4ee3 core-prim . error) (G4ee2 core-prim . eqv?) (G4ee1 core-prim . equal?) (G4ee0 core-prim . eq?) (G4edf core-prim . dynamic-wind) (G4ede core-prim . div0-and-mod0) (G4edd core-prim . mod0) (G4edc core-prim . div0) (G4edb core-prim . div-and-mod) (G4eda core-prim . mod) (G4ed9 core-prim . div) (G4ed8 core-prim . denominator) (G4ed7 core-prim . cos) (G4ed6 core-prim . cons) (G4ed5 core-prim . complex?) (G4ed4 core-prim . char?) (G4ed3 core-prim . char>?) (G4ed2 core-prim . char>=?) (G4ed1 core-prim . char=?) (G4ed0 core-prim . char<?) (G4ecf core-prim . char<=?) (G4ece core-prim . char->integer) (G4ecd core-prim . ceiling) (G4ecc core-prim . call-with-values) (G4ecb core-prim . call/cc) (G4eca core-prim . call-with-current-continuation) (G4ec9 core-prim . cddddr) (G4ec8 core-prim . cdddar) (G4ec7 core-prim . cddadr) (G4ec6 core-prim . cddaar) (G4ec5 core-prim . cdaddr) (G4ec4 core-prim . cdadar) (G4ec3 core-prim . cdaadr) (G4ec2 core-prim . cdaaar) (G4ec1 core-prim . cadddr) (G4ec0 core-prim . caddar) (G4ebf core-prim . cadadr) (G4ebe core-prim . cadaar) (G4ebd core-prim . caaddr) (G4ebc core-prim . caadar) (G4ebb core-prim . caaadr) (G4eba core-prim . caaaar) (G4eb9 core-prim . cdddr) (G4eb8 core-prim . cddar) (G4eb7 core-prim . cdadr) (G4eb6 core-prim . cdaar) (G4eb5 core-prim . caddr) (G4eb4 core-prim . cadar) (G4eb3 core-prim . caadr) (G4eb2 core-prim . caaar) (G4eb1 core-prim . cddr) (G4eb0 core-prim . cdar) (G4eaf core-prim . cadr) (G4eae core-prim . caar) (G4ead core-prim . cdr) (G4eac core-prim . car) (G4eab core-prim . boolean?) (G4eaa core-prim . boolean=?) (G4ea9 core-prim . atan) (G4ea8 core-prim . assertion-violation) (G4ea7 core-prim . asin) (G4ea6 core-prim . apply) (G4ea5 core-prim . append) (G4ea4 core-prim . angle) (G4ea3 core-prim . acos) (G4ea2 core-prim . abs) (G4ea1 core-prim . /) (G4ea0 core-prim . *) (G4e9f core-prim . -) (G4e9e core-prim . +) (G4e9d core-prim . >=) (G4e9c core-prim . >) (G4e9b core-prim . =) (G4e9a core-prim . <=) (G4e99 core-prim . <) (G4e98 core-prim . library) (G4e97 core-prim . export) (G4e96 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e95 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e94 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e93 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e92 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e91 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e90 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e8f $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e8e $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e8d $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e8c $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e8b $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e8a $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e89 $core-rtd &i/o-rtd &i/o-rcd) (G4e88 $core-rtd &undefined-rtd &undefined-rcd) (G4e87 $core-rtd &syntax-rtd &syntax-rcd) (G4e86 $core-rtd &lexical-rtd &lexical-rcd) (G4e85 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e84 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e83 $core-rtd &who-rtd &who-rcd) (G4e82 $core-rtd &irritants-rtd &irritants-rcd) (G4e81 $core-rtd &assertion-rtd &assertion-rcd) (G4e80 $core-rtd &violation-rtd &violation-rcd) (G4e7f $core-rtd &error-rtd &error-rcd) (G4e7e $core-rtd &serious-rtd &serious-rcd) (G4e7d $core-rtd &warning-rtd &warning-rcd) (G4e7c $core-rtd &message-rtd &message-rcd) (G4e7b $core-rtd &condition-rtd &condition-rcd) (G4e7a macro . define-condition-type) (G4e79 macro . define-enumeration) (G4e78 macro . define-record-type) (G4e77 macro . parent-rtd) (G4e76 macro . nongenerative) (G4e75 macro . opaque) (G4e74 macro . sealed) (G4e73 macro . protocol) (G4e72 macro . parent) (G4e71 macro . immutable) (G4e70 macro . mutable) (G4e6f macro . fields) (G4e6e macro . error-handling-mode) (G4e6d macro . file-options) (G4e6c macro . buffer-mode) (G4e6b macro . eol-style) (G4e6a macro . guard) (G4e69 macro . trace-define) (G4e68 macro . trace-lambda) (G4e67 macro . unsyntax-splicing) (G4e66 macro . unsyntax) (G4e65 macro . unquote-splicing) (G4e64 macro . unquote) (G4e63 macro . _) (G4e62 macro . else) (G4e61 macro . =>) (G4e60 macro . ...) (G4e5f macro . assert) (G4e5e macro . endianness) (G4e5d macro . delay) (G4e5c macro . time) (G4e5b macro . or) (G4e5a macro . and) (G4e59 macro . do) (G4e58 macro . cond) (G4e57 macro . let*) (G4e56 macro . let) (G4e55 macro . let*-values) (G4e54 macro . let-values) (G4e53 macro . identifier-syntax) (G4e52 macro . with-syntax) (G4e51 macro . quasisyntax) (G4e50 macro . quasiquote) (G4e4f macro . syntax-rules) (G4e4e macro . include) (G4e4d macro . define-struct) (G4e4c core-macro . record-constructor-descriptor) (G4e4b core-macro . record-type-descriptor) (G4e4a macro . case) (G4e49 macro . parameterize) (G4e48 macro . unless) (G4e47 macro . when) (G4e46 core-macro . if) (G4e45 core-macro . letrec*) (G4e44 core-macro . letrec) (G4e43 core-macro . type-descriptor) (G4e42 core-macro . case-lambda) (G4e41 core-macro . lambda) (G4e40 core-macro . syntax) (G4e3f core-macro . syntax-case) (G4e3e core-macro . quote) (G4e3d core-macro . foreign-call) (G4e3c letrec-syntax) (G4e3b let-syntax) (G4e3a set!) (G4e39 import) (G4e38 begin) (G4e37 module) (G4e36 define-syntax) (G4e35 define)) values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G5151 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50f8) (eval-core . G50f7) (set-symbol-value! . G50f6) (symbol-value . G50f5) (gensym . G50f4) (void . G50f3)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G5152 '(mosh) '() '() '() '() '((set-symbol-value! . G50f6) (symbol-value . G50f5) (standard-library-path . G50cd) (get-command-line . G50bc) (sys-display . G50bb) (source-info . G50ba) (make-compiler-instruction . G50b9) (make-instruction . G50b8) (set-source-info! . G50b7) (fasl-write . G50b6) (include . G4e4e)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G5153 '(mosh backend) '() '() '() '() '((receive . G50b5)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G5154 '(mosh file) '() '() '() '() '((read-line . G50f0) (current-directory . G50cc) (write-to-file . G50cb) (file->list . G50ca) (file->string . G50c9)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G5155 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G50c4)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G5156 '(mosh number) '() '() '() '() '((digit->integer . G50c8)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G5157 '(mosh string) '() '() '() '() '((print . G50cf) (format . G50ce) (call-with-string-input-port . G50c7) (call-with-string-io . G50c6) (string-split . G50c5) (string->regexp . G50c3)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G5158 '(mosh list) '() '() '() '() '((assoc-ref . G50d1)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G5159 '(mosh regexp) '() '() '() '() '((rxmatch . G50c2) (regexp-replace-all . G50c1)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G515a '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G50c0)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G515b '(system) '() '() '() '() '((readdir . G50bf) (get-environment-variables . G50be) (get-environment-variable . G50bd)) '() values values '#f '#f '#f '#f) (G2c1b@G2aae@install-library 'G515c '(srfi :1) '() '() '() '() '((dotted-list? . G50ef) (circular-list? . G50ee) (proper-list? . G50ed) (circular-list . G50ec) (last . G50eb) (last-pair . G50ea) (not-pair? . G50e9) (split-at! . G50e8) (split-at . G50e7) (list= . G50e6) (list-copy . G50e5) (list-tabulate . G50e4) (make-list . G50e3) (xcons . G50e2) (tenth . G50e1) (ninth . G50e0) (eighth . G50df) (seventh . G50de) (sixth . G50dd) (fifth . G50dc) (drop-right! . G50db) (drop-right . G50da) (take-right . G50d9) (take! . G50d8) (drop . G50d7) (take . G50d6) (car+cdr . G50d5) (third . G50d4) (second . G50d3) (first . G50d2) (alist-cons . G50d0)) '() values values '#f '#f '#f '#f))
((lambda (G4d96@for-each-with-index G4d98@repl G4d9a@trace-printer G4d9c@command-line G4d9e@local-library-path G4da0@load/args G4da2@load G4da4@ironscheme-build G4da6@eval-top-level G4da8@compile-system-libraries G4daa@compile G4dac@compile->closure G4dae@load-r6rs-top-level G4db0@write-record) (begin (set! G4d96@for-each-with-index (lambda (G4dc5@proc G4dc6@lst) (letrec ((G4dc9@loop (lambda (G4dcb@i G4dcc@lst) (if (null? G4dcc@lst) (if '#f '#f (void)) (begin (G4dc5@proc G4dcb@i (car G4dcc@lst)) (G4dc9@loop (+ G4dcb@i '1) (cdr G4dcc@lst))))))) (G4dc9@loop '1 G4dc6@lst)))) (set! G4d98@repl (lambda G4dcf@x ((lambda (G4dd2@rec) (begin (set! G4dd2@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4dd4@G4dd3) (with-exception-handler (lambda (G4dd6@e) (G4dd4@G4dd3 (if '#t (G4d96@for-each-with-index (lambda (G4dd8@i G4dd9@x) ((lambda (G4ddc@rtd) (begin (format '#t '"   ~d. ~a" G4dd8@i (record-type-name G4ddc@rtd)) ((lambda (G4dde@v) ((lambda (G4de0@t) (if (memv G4de0@t '(0)) (newline) (if (memv G4de0@t '(1)) (begin (display '": ") (write ((record-accessor G4ddc@rtd '0) G4dd9@x)) (newline)) (begin (display '":\n") ((letrec ((G4de2@f (lambda (G4de4@i) (if (not (= G4de4@i (vector-length G4dde@v))) (begin (display '"       ") (display (vector-ref G4dde@v G4de4@i)) (display '": ") (write ((record-accessor G4ddc@rtd G4de4@i) G4dd9@x)) (newline) (G4de2@f (+ G4de4@i '1))) (void))))) G4de2@f) '0))))) (vector-length G4dde@v))) (record-type-field-names G4ddc@rtd)))) (record-rtd G4dd9@x))) (simple-conditions G4dd6@e)) (raise G4dd6@e)))) (lambda () (begin '#f ((lambda (G4de6@line) (if (eof-object? G4de6@line) (exit) (write (G4da6@eval-top-level (call-with-port (open-string-input-port G4de6@line) read))))) (get-line (current-input-port)))))))) (newline) (G4dd2@rec)))) (G4dd2@rec))) '#f))) (set! G4d9a@trace-printer (G297a@G288d@make-parameter write)) (set! G4d9c@command-line (G297a@G288d@make-parameter (get-command-line))) (set! G4d9e@local-library-path (lambda (G4de8@filename) (cons '"." (G2c0b@G2a8e@library-path)))) (set! G4da0@load/args (lambda (G4dea@filename . G4dec@args) (begin (apply G4dae@load-r6rs-top-level G4dea@filename 'load G4dec@args) (void)))) (set! G4da2@load (lambda (G4dee@filename) (begin (apply G4dae@load-r6rs-top-level G4dee@filename 'load (G4d9c@command-line)) (void)))) (set! G4da4@ironscheme-build (lambda () (G4da2@load '"ironscheme-buildscript.ss"))) (set! G4da6@eval-top-level (lambda (G4df0@x) (G4a91@G313c@eval G4df0@x (G4aa8@G316a@interaction-environment)))) (set! G4da8@compile-system-libraries (lambda () (G4da6@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4daa@compile (lambda (G4df2@filename) (G4dae@load-r6rs-top-level G4df2@filename 'compile))) (set! G4dac@compile->closure (lambda (G4df4@filename) (G4dae@load-r6rs-top-level G4df4@filename 'closure))) (set! G4dae@load-r6rs-top-level (lambda (G4df6@filename G4df7@how . G4dfa@args) ((lambda (G4dfe@G4dfc@library-path G4dff@G4dfd@library-path) ((lambda (G4e02@swap) (dynamic-wind G4e02@swap (lambda () ((lambda (G4e04@x*) ((lambda (G4e06@t) (if (memv G4e06@t '(closure)) (G4aa7@G3168@pre-compile-r6rs-top-level G4e04@x*) (if (memv G4e06@t '(load)) ((lambda (G4e0a@G4e08@command-line G4e0b@G4e09@command-line) ((lambda (G4e0e@swap) (dynamic-wind G4e0e@swap (lambda () ((G4aa6@G3166@compile-r6rs-top-level G4e04@x*))) G4e0e@swap)) (lambda () ((lambda (G4e10@t) (begin (G4e0a@G4e08@command-line G4e0b@G4e09@command-line) (set! G4e0b@G4e09@command-line G4e10@t))) (G4e0a@G4e08@command-line))))) G4d9c@command-line (cons G4df6@filename (car G4dfa@args))) (if (memv G4e06@t '(compile)) (begin (G4aa6@G3166@compile-r6rs-top-level G4e04@x*) (G2c0f@G2a96@serialize-all G2975@G2883@serialize-library G29df@G2988@compile-core-expr)) (if '#f '#f (void)))))) G4df7@how)) (with-input-from-file G4df6@filename (lambda () ((letrec ((G4e12@f (lambda () ((lambda (G4e14@x) (if (eof-object? G4e14@x) '() (cons G4e14@x (G4e12@f)))) (G296f@G2877@read-annotated))))) G4e12@f)))))) G4e02@swap)) (lambda () ((lambda (G4e16@t) (begin (G4dfe@G4dfc@library-path G4dff@G4dfd@library-path) (set! G4dff@G4dfd@library-path G4e16@t))) (G4dfe@G4dfc@library-path))))) G2c0b@G2a8e@library-path (G4d9e@local-library-path G4df6@filename)))) (set! G4db0@write-record (lambda (G4e18@record G4e19@port) ((lambda (G4e1c@rtd) (begin (format G4e19@port '"    ~a" (record-type-name G4e1c@rtd)) ((lambda (G4e1e@v) ((lambda (G4e20@t) (if (memv G4e20@t '(0)) (newline) (if (memv G4e20@t '(1)) (begin (display '": " G4e19@port) (write ((record-accessor G4e1c@rtd '0) G4e18@record) G4e19@port) (newline G4e19@port)) (begin (display '":\n") ((letrec ((G4e22@f (lambda (G4e24@i) (if (not (= G4e24@i (vector-length G4e1e@v))) (begin (display '"       " G4e19@port) (display (vector-ref G4e1e@v G4e24@i) G4e19@port) (display '": " G4e19@port) (write ((record-accessor G4e1c@rtd G4e24@i) G4e18@record) G4e19@port) (newline G4e19@port) (G4e22@f (+ G4e24@i '1))) (void))))) G4e22@f) '0))))) (vector-length G4e1e@v))) (record-type-field-names G4e1c@rtd)))) (record-rtd G4e18@record)))) (begin (set! G4e33@G4db0@write-record G4db0@write-record) (set! G4e32@G4dae@load-r6rs-top-level G4dae@load-r6rs-top-level) (set! G4e31@G4dac@compile->closure G4dac@compile->closure) (set! G4e30@G4daa@compile G4daa@compile) (set! G4e2f@G4da8@compile-system-libraries G4da8@compile-system-libraries) (set! G4e2e@G4da6@eval-top-level G4da6@eval-top-level) (set! G4e2d@G4da4@ironscheme-build G4da4@ironscheme-build) (set! G4e2c@G4da2@load G4da2@load) (set! G4e2b@G4da0@load/args G4da0@load/args) (set! G4e2a@G4d9e@local-library-path G4d9e@local-library-path) (set! G4e29@G4d9c@command-line G4d9c@command-line) (set! G4e28@G4d9a@trace-printer G4d9a@trace-printer) (set! G4e27@G4d98@repl G4d98@repl) (set! G4e26@G4d96@for-each-with-index G4d96@for-each-with-index) (G2c10@G2a98@current-precompiled-library-loader G2976@G2885@load-serialized-library) (set-symbol-value! 'load G4da2@load) (set-symbol-value! 'load-r6rs-top-level G4dae@load-r6rs-top-level) (set-symbol-value! 'eval-r6rs G4da6@eval-top-level) (set-symbol-value! 'int-env-syms G4a88@G312a@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29de@G2986@expanded->core) (set-symbol-value! 'trace-printer G4d9a@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c0b@G2a8e@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4db1@args G4db2@port) (with-exception-handler (lambda (G4db5@c) (begin (display '" Condition components:\n" G4db2@port) (G4d96@for-each-with-index (lambda (G4db7@i G4db8@x) ((lambda (G4dbb@rtd) (begin (format G4db2@port '"   ~d. ~a" G4db7@i (record-type-name G4dbb@rtd)) ((lambda (G4dbd@v) ((lambda (G4dbf@t) (if (memv G4dbf@t '(0)) (newline) (if (memv G4dbf@t '(1)) (begin (display '": ") (write ((record-accessor G4dbb@rtd '0) G4db8@x)) (newline)) (begin (display '":\n") ((letrec ((G4dc1@f (lambda (G4dc3@i) (if (not (= G4dc3@i (vector-length G4dbd@v))) (begin (display '"       ") (display (vector-ref G4dbd@v G4dc3@i)) (display '": ") (write ((record-accessor G4dbb@rtd G4dc3@i) G4db8@x)) (newline) (G4dc1@f (+ G4dc3@i '1))) (void))))) G4dc1@f) '0))))) (vector-length G4dbd@v))) (record-type-field-names G4dbb@rtd)))) (record-rtd G4db8@x))) (simple-conditions G4db5@c)))) (lambda () (if (null? G4db1@args) (G4d98@repl) (G4dae@load-r6rs-top-level (car G4db1@args) 'load (cdr G4db1@args)))))) (G4d9c@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
