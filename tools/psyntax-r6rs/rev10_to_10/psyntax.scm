;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2855@read-annotated G2857@annotation-stripped G2859@annotation? G285b@annotation-source G285d@annotation-expression G285f@serialize-library G2861@load-serialized-library G2863@make-record-printer G2865@compile-core G2867@read-library-source-file G2869@make-parameter G2903@file-options-spec) (begin (set! G2855@read-annotated read) (set! G2857@annotation-stripped (lambda (G2904@x) (G285d@annotation-expression G2904@x))) (set! G2859@annotation? (lambda (G2906@x) (source-info G2906@x))) (set! G285b@annotation-source (lambda (G2908@x) (source-info G2908@x))) (set! G285d@annotation-expression (lambda (G290a@x) (if (pair? G290a@x) (cons (car G290a@x) (cdr G290a@x)) (display '"line:46\n")))) (set! G285f@serialize-library (lambda G290c@x (begin (display G290c@x) '#f))) (set! G2861@load-serialized-library (lambda G290e@x '#f)) (set! G2863@make-record-printer (lambda (G2910@name G2911@printer) (lambda G2914@x (begin (display '"record printer") (for-each display G2914@x))))) (set! G2865@compile-core (lambda G2916@x (apply error 'comile-core '"not implementated" G2916@x))) (set! G2867@read-library-source-file (lambda (G2918@file-name) (with-input-from-file G2918@file-name G2855@read-annotated))) (set! G2869@make-parameter (lambda G2928 ((lambda (G2929) (if (= G2929 '1) (apply (lambda (G291a@x) (G2869@make-parameter G291a@x (lambda (G291c@x) G291c@x))) G2928) (if (= G2929 '2) (apply (lambda (G291e@x G291f@fender) ((lambda (G2922@x) (lambda G2926 ((lambda (G2927) (if (= G2927 '0) (apply (lambda () G2922@x) G2926) (if (= G2927 '1) (apply (lambda (G2924@v) (set! G2922@x (G291f@fender G2924@v))) G2926) (error 'apply '"invalid arg count")))) (length G2926)))) (G291f@fender G291e@x))) G2928) (error 'apply '"invalid arg count")))) (length G2928)))) (set! G2903@file-options-spec (lambda (G292a@x) G292a@x)) (begin (set! G2937@G2903@file-options-spec G2903@file-options-spec) (set! G2936@G2869@make-parameter G2869@make-parameter) (set! G2935@G2867@read-library-source-file G2867@read-library-source-file) (set! G2934@G2865@compile-core G2865@compile-core) (set! G2933@G2863@make-record-printer G2863@make-record-printer) (set! G2932@G2861@load-serialized-library G2861@load-serialized-library) (set! G2931@G285f@serialize-library G285f@serialize-library) (set! G2930@G285d@annotation-expression G285d@annotation-expression) (set! G292f@G285b@annotation-source G285b@annotation-source) (set! G292e@G2859@annotation? G2859@annotation?) (set! G292d@G2857@annotation-stripped G2857@annotation-stripped) (set! G292c@G2855@read-annotated G2855@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G293c@current-primitive-locations G293e@mutable? G2940@rewriter G2942@expanded->core G2944@compile-core-expr G2946@pretty-print G2948@compile-core-expr-to-port) (begin (set! G293c@current-primitive-locations (G2936@G2869@make-parameter (lambda (G2949@x) '#f) (lambda (G294b@p) G294b@p))) (set! G293e@mutable? (lambda (G294d@x) ((lambda (G2950@simple?) (begin (set! G2950@simple? (lambda (G2951@x) ((lambda (G2953@t) (if G2953@t G2953@t ((lambda (G2955@t) (if G2955@t G2955@t ((lambda (G2957@t) (if G2957@t G2957@t ((lambda (G2959@t) (if G2959@t G2959@t ((lambda (G295b@t) (if G295b@t G295b@t ((lambda (G295d@t) (if G295d@t G295d@t (begin '#f (number? G2951@x)))) (bytevector? G2951@x)))) (string? G2951@x)))) (boolean? G2951@x)))) (symbol? G2951@x)))) (char? G2951@x)))) (null? G2951@x)))) (not (G2950@simple? G294d@x)))) '#f))) (set! G2940@rewriter (lambda (G295f@quote-hack?) ((lambda (G2962@f) (begin (set! G2962@f (lambda (G2963@x) (if (pair? G2963@x) ((lambda (G2965@t) (if (memv G2965@t '(quote)) (if (if G295f@quote-hack? (begin '#f (G293e@mutable? (cadr G2963@x))) '#f) ((lambda (G2967@g) (begin (set-symbol-value! G2967@g (cadr G2963@x)) G2967@g)) (gensym)) G2963@x) (if (memv G2965@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2969@x) (cons (car G2969@x) (map G2962@f (cdr G2969@x)))) (cdr G2963@x))) (if (memv G2965@t '(lambda)) (cons* 'lambda (cadr G2963@x) (map G2962@f (cddr G2963@x))) (if (memv G2965@t '(letrec)) ((lambda (G296b@bindings G296c@body*) ((lambda (G296f@lhs* G2970@rhs*) (cons* 'letrec (map list G296f@lhs* (map G2962@f G2970@rhs*)) (map G2962@f G296c@body*))) (map car G296b@bindings) (map cadr G296b@bindings))) (cadr G2963@x) (cddr G2963@x)) (if (memv G2965@t '(letrec*)) ((lambda (G2973@bindings G2974@body*) ((lambda (G2977@lhs* G2978@rhs*) (cons* 'letrec* (map list G2977@lhs* (map G2962@f G2978@rhs*)) (map G2962@f G2974@body*))) (map car G2973@bindings) (map cadr G2973@bindings))) (cadr G2963@x) (cddr G2963@x)) (if (memv G2965@t '(library-letrec*)) ((lambda (G297b@name G297c@x) ((lambda (G297f@bindings G2980@body*) ((lambda (G2983@lhs* G2984@lhs** G2985@rhs*) (cons* 'library-letrec* G297b@name (map list G2983@lhs* G2984@lhs** (map G2962@f G2985@rhs*)) (map G2962@f G2980@body*))) (map car G297f@bindings) (map cadr G297f@bindings) (map caddr G297f@bindings))) (cadr G297c@x) (cddr G297c@x))) (cadr G2963@x) (cdr G2963@x)) (if (memv G2965@t '(begin)) (cons 'begin (map G2962@f (cdr G2963@x))) (if (memv G2965@t '(set!)) (list 'set! (cadr G2963@x) (G2962@f (caddr G2963@x))) (if (memv G2965@t '(primitive)) ((lambda (G2989@op) ((lambda (G298b@t) (if G298b@t ((lambda (G298d@loc) G298d@loc) G298b@t) G2989@op)) ((G293c@current-primitive-locations) G2989@op))) (cadr G2963@x)) (if (memv G2965@t '(define)) G2963@x (if (list? G2963@x) (map G2962@f G2963@x) (error 'rewrite '"invalid form ~s ~s" G2963@x (list? G2963@x)))))))))))))) (car G2963@x)) G2963@x))) G2962@f)) '#f))) (set! G2942@expanded->core (lambda (G298f@x) ((G2940@rewriter '#t) G298f@x))) (set! G2944@compile-core-expr (lambda (G2991@x) ((G2940@rewriter '#f) G2991@x))) (set! G2946@pretty-print write) (set! G2948@compile-core-expr-to-port (lambda (G2993@x G2994@p) (G2946@pretty-print ((G2940@rewriter '#f) G2993@x) G2994@p))) (begin (set! G299d@G2948@compile-core-expr-to-port G2948@compile-core-expr-to-port) (set! G299c@G2946@pretty-print G2946@pretty-print) (set! G299b@G2944@compile-core-expr G2944@compile-core-expr) (set! G299a@G2942@expanded->core G2942@expanded->core) (set! G2999@G2940@rewriter G2940@rewriter) (set! G2998@G293e@mutable? G293e@mutable?) (set! G2997@G293c@current-primitive-locations G293c@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29f7@make-collection G29f9@current-library-collection G29ff@G29fa G2a01@G29fc G2a03@G29fb G2a08@library? G2a0a@make-library G2a0c@library-id G2a0e@library-name G2a10@library-version G2a12@library-imp* G2a14@library-vis* G2a16@library-inv* G2a18@library-subst G2a1a@library-env G2a1c@library-visit-state G2a1e@library-invoke-state G2a20@library-visit-code G2a22@library-invoke-code G2a24@library-visible? G2a26@library-source-file-name G2a28@set-library-id! G2a2a@set-library-name! G2a2c@set-library-version! G2a2e@set-library-imp*! G2a30@set-library-vis*! G2a32@set-library-inv*! G2a34@set-library-subst! G2a36@set-library-env! G2a38@set-library-visit-state! G2a3a@set-library-invoke-state! G2a3c@set-library-visit-code! G2a3e@set-library-invoke-code! G2a40@set-library-visible?! G2a42@set-library-source-file-name! G2a44@rp G2a46@find-dependencies G2a48@find-library-by G2a4a@library-path G2a4c@library-extensions G2a4e@library-name->file-name G2a50@file-locator G2a52@serialize-all G2a54@current-precompiled-library-loader G2a56@try-load-from-file G2a58@library-loader G2a5a@current-library-expander G2a5c@external-pending-libraries G2a5e@find-external-library G2a60@find-library-by-name G2a62@library-exists? G2a64@find-library-by-spec/die G2a66@label->binding-table G2a68@install-library-record G2a6a@install-library G2a6c@imported-label->binding G2a6e@invoke-library G2a70@visit-library G2a72@invoke-library-by-spec G2a74@installed-libraries G2a76@library-spec) (begin (set! G29f7@make-collection (lambda () ((lambda (G2a77@set) ((lambda (G2a7a@set-cons) (begin (set! G2a7a@set-cons (lambda (G2a7f@x G2a80@ls) (if (memq G2a7f@x G2a80@ls) G2a80@ls (cons G2a7f@x G2a80@ls)))) (lambda G2a7d ((lambda (G2a7e) (if (= G2a7e '0) (apply (lambda () G2a77@set) G2a7d) (if (= G2a7e '1) (apply (lambda (G2a7b@x) (set! G2a77@set (G2a7a@set-cons G2a7b@x G2a77@set))) G2a7d) (error 'apply '"invalid arg count")))) (length G2a7d))))) '#f)) '()))) (set! G29f9@current-library-collection (G2936@G2869@make-parameter (G29f7@make-collection) (lambda (G2a83@x) (begin (if (not (procedure? G2a83@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a83@x) (void)) G2a83@x)))) (set! G29ff@G29fa (make-record-type-descriptor 'library '#f 'G29fd '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a01@G29fc '#f) (set! G2a03@G29fb (make-record-constructor-descriptor G29ff@G29fa '#f G2a01@G29fc)) (set! G2a08@library? (record-predicate G29ff@G29fa)) (set! G2a0a@make-library (record-constructor G2a03@G29fb)) (set! G2a0c@library-id (record-accessor G29ff@G29fa '0)) (set! G2a0e@library-name (record-accessor G29ff@G29fa '1)) (set! G2a10@library-version (record-accessor G29ff@G29fa '2)) (set! G2a12@library-imp* (record-accessor G29ff@G29fa '3)) (set! G2a14@library-vis* (record-accessor G29ff@G29fa '4)) (set! G2a16@library-inv* (record-accessor G29ff@G29fa '5)) (set! G2a18@library-subst (record-accessor G29ff@G29fa '6)) (set! G2a1a@library-env (record-accessor G29ff@G29fa '7)) (set! G2a1c@library-visit-state (record-accessor G29ff@G29fa '8)) (set! G2a1e@library-invoke-state (record-accessor G29ff@G29fa '9)) (set! G2a20@library-visit-code (record-accessor G29ff@G29fa '10)) (set! G2a22@library-invoke-code (record-accessor G29ff@G29fa '11)) (set! G2a24@library-visible? (record-accessor G29ff@G29fa '12)) (set! G2a26@library-source-file-name (record-accessor G29ff@G29fa '13)) (set! G2a28@set-library-id! (record-mutator G29ff@G29fa '0)) (set! G2a2a@set-library-name! (record-mutator G29ff@G29fa '1)) (set! G2a2c@set-library-version! (record-mutator G29ff@G29fa '2)) (set! G2a2e@set-library-imp*! (record-mutator G29ff@G29fa '3)) (set! G2a30@set-library-vis*! (record-mutator G29ff@G29fa '4)) (set! G2a32@set-library-inv*! (record-mutator G29ff@G29fa '5)) (set! G2a34@set-library-subst! (record-mutator G29ff@G29fa '6)) (set! G2a36@set-library-env! (record-mutator G29ff@G29fa '7)) (set! G2a38@set-library-visit-state! (record-mutator G29ff@G29fa '8)) (set! G2a3a@set-library-invoke-state! (record-mutator G29ff@G29fa '9)) (set! G2a3c@set-library-visit-code! (record-mutator G29ff@G29fa '10)) (set! G2a3e@set-library-invoke-code! (record-mutator G29ff@G29fa '11)) (set! G2a40@set-library-visible?! (record-mutator G29ff@G29fa '12)) (set! G2a42@set-library-source-file-name! (record-mutator G29ff@G29fa '13)) (set! G2a44@rp (G2933@G2863@make-record-printer 'library (lambda (G2a85@x G2a86@p G2a87@wr) (begin (if (not (G2a08@library? G2a85@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a10@library-version G2a85@x)) (G2a0e@library-name G2a85@x) (append (G2a0e@library-name G2a85@x) (list (G2a10@library-version G2a85@x))))) G2a86@p))))) (set! G2a46@find-dependencies (lambda (G2a8b@ls) (if (null? G2a8b@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2a48@find-library-by (lambda (G2a8d@pred) ((letrec ((G2a8f@f (lambda (G2a91@ls) (if (null? G2a91@ls) '#f (if (G2a8d@pred (car G2a91@ls)) (car G2a91@ls) (G2a8f@f (cdr G2a91@ls))))))) G2a8f@f) ((G29f9@current-library-collection))))) (set! G2a4a@library-path (G2936@G2869@make-parameter '(".") (lambda (G2a93@x) (if (if (list? G2a93@x) (begin '#f (for-all string? G2a93@x)) '#f) (map (lambda (G2a95@x) G2a95@x) G2a93@x) (assertion-violation 'library-path '"not a list of strings" G2a93@x))))) (set! G2a4c@library-extensions (G2936@G2869@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a97@x) (if (if (list? G2a97@x) (begin '#f (for-all string? G2a97@x)) '#f) (map (lambda (G2a99@x) G2a99@x) G2a97@x) (assertion-violation 'library-extensions '"not a list of strings" G2a97@x))))) (set! G2a4e@library-name->file-name (lambda (G2a9b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a9f@G2a9d G2aa0@G2a9e) ((lambda (G2aa3@extract G2aa4@p) ((lambda (G2aa8@display-hex) (begin (set! G2aa8@display-hex (lambda (G2ab7@n) (if (<= '0 G2ab7@n '9) (display G2ab7@n G2aa4@p) (display (integer->char (+ (char->integer '#\A) (- G2ab7@n '10))) G2aa4@p)))) (begin ((letrec ((G2aa9@f (lambda (G2aab@ls) (if (not (null? G2aab@ls)) (begin (display '"/" G2aa4@p) (for-each (lambda (G2aad@c) (if ((lambda (G2aaf@t) (if G2aaf@t G2aaf@t ((lambda (G2ab1@t) (if G2ab1@t G2ab1@t ((lambda (G2ab3@t) (if G2ab3@t G2ab3@t (begin '#f (memv G2aad@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2aad@c '#\9)))) (char<=? '#\A G2aad@c '#\Z)))) (char<=? '#\a G2aad@c '#\z)) (display G2aad@c G2aa4@p) (begin (display '"%" G2aa4@p) ((lambda (G2ab5@n) (begin (G2aa8@display-hex (quotient G2ab5@n '16)) (G2aa8@display-hex (remainder G2ab5@n '16)))) (char->integer G2aad@c))))) (string->list (symbol->string (car G2aab@ls)))) (G2aa9@f (cdr G2aab@ls))) (void))))) G2aa9@f) G2a9b@x) (G2aa3@extract)))) '#f)) G2aa0@G2a9e G2a9f@G2a9d))))) (set! G2a50@file-locator (G2936@G2869@make-parameter (lambda (G2ab9@x) ((lambda (G2abb@str) ((letrec ((G2abd@f (lambda (G2abf@ls G2ac0@exts G2ac1@failed-list) (if (null? G2abf@ls) ((lambda () ((lambda (G2acd@G2ac8 G2acf@G2aca G2ad1@G2ac9 G2ad6@G2ac7 G2ad8@make-library-resolution-condition G2ada@G2ac5 G2adc@G2ac6 G2ade@library-resolution-condition? G2ae0@condition-library G2ae2@condition-files) (begin (set! G2acd@G2ac8 (make-record-type-descriptor '&library-resolution &condition-rtd 'G2acb '#f '#f '#((immutable library) (immutable files)))) (set! G2acf@G2aca '#f) (set! G2ad1@G2ac9 (make-record-constructor-descriptor G2acd@G2ac8 &condition-rcd G2acf@G2aca)) (set! G2ad6@G2ac7 (record-predicate G2acd@G2ac8)) (set! G2ad8@make-library-resolution-condition (record-constructor G2ad1@G2ac9)) (set! G2ada@G2ac5 (record-accessor G2acd@G2ac8 '0)) (set! G2adc@G2ac6 (record-accessor G2acd@G2ac8 '1)) (set! G2ade@library-resolution-condition? (condition-predicate G2acd@G2ac8)) (set! G2ae0@condition-library (condition-accessor G2acd@G2ac8 G2ada@G2ac5)) (set! G2ae2@condition-files (condition-accessor G2acd@G2ac8 G2adc@G2ac6)) (raise (condition (G4bbb@G4ad1@make-error) (G4bd5@G4b27@make-who-condition 'expander) (G4ba7@G4a91@make-message-condition '"cannot locate library in library-path") (G2ad8@make-library-resolution-condition G2ab9@x (reverse G2ac1@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2ac0@exts) (G2abd@f (cdr G2abf@ls) (G2a4c@library-extensions) G2ac1@failed-list) ((lambda (G2ae3@name) (if (file-exists? G2ae3@name) G2ae3@name (G2abd@f G2abf@ls (cdr G2ac0@exts) (cons G2ae3@name G2ac1@failed-list)))) (string-append (car G2abf@ls) G2abb@str (car G2ac0@exts)))))))) G2abd@f) (G2a4a@library-path) (G2a4c@library-extensions) '())) (G2a4e@library-name->file-name G2ab9@x))) (lambda (G2ae5@f) (if (procedure? G2ae5@f) G2ae5@f (assertion-violation 'file-locator '"not a procedure" G2ae5@f))))) (set! G2a52@serialize-all (lambda (G2ae7@serialize G2ae8@compile) ((lambda (G2aec@library-desc) (begin (set! G2aec@library-desc (lambda (G2aef@x) (list (G2a0c@library-id G2aef@x) (G2a0e@library-name G2aef@x)))) (for-each (lambda (G2aed@x) (if (G2a26@library-source-file-name G2aed@x) (G2ae7@serialize (G2a26@library-source-file-name G2aed@x) (list (G2a0c@library-id G2aed@x) (G2a0e@library-name G2aed@x) (G2a10@library-version G2aed@x) (map G2aec@library-desc (G2a12@library-imp* G2aed@x)) (map G2aec@library-desc (G2a14@library-vis* G2aed@x)) (map G2aec@library-desc (G2a16@library-inv* G2aed@x)) (G2a18@library-subst G2aed@x) (G2a1a@library-env G2aed@x) (G2ae8@compile (G2a20@library-visit-code G2aed@x)) (G2ae8@compile (G2a22@library-invoke-code G2aed@x)) (G2a24@library-visible? G2aed@x))) (void))) ((G29f9@current-library-collection))))) '#f))) (set! G2a54@current-precompiled-library-loader (G2936@G2869@make-parameter (lambda (G2af1@filename G2af2@sk) '#f))) (set! G2a56@try-load-from-file (lambda (G2af5@filename) ((G2a54@current-precompiled-library-loader) G2af5@filename (lambda G2b1b ((lambda (G2b1c) (if (= G2b1c '11) (apply (lambda (G2af7@id G2af8@name G2af9@ver G2afa@imp* G2afb@vis* G2afc@inv* G2afd@exp-subst G2afe@exp-env G2aff@visit-proc G2b00@invoke-proc G2b01@visible?) ((letrec ((G2b0d@f (lambda (G2b0f@deps) (if (null? G2b0f@deps) (begin (G2a6a@install-library G2af7@id G2af8@name G2af9@ver G2afa@imp* G2afb@vis* G2afc@inv* G2afd@exp-subst G2afe@exp-env G2aff@visit-proc G2b00@invoke-proc '#f '#f G2b01@visible? '#f) '#t) ((lambda (G2b11@d) ((lambda (G2b13@label G2b14@dname) ((lambda (G2b17@l) (if (if (G2a08@library? G2b17@l) (begin '#f (eq? G2b13@label (G2a0c@library-id G2b17@l))) '#f) (G2b0d@f (cdr G2b0f@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G2af8@name G2b14@dname G2af5@filename) '#f))) (G2a60@find-library-by-name G2b14@dname))) (car G2b11@d) (cadr G2b11@d))) (car G2b0f@deps)))))) G2b0d@f) (append G2afa@imp* G2afb@vis* G2afc@inv*))) G2b1b) (if (>= G2b1c '0) (apply (lambda G2b19@others '#f) G2b1b) (error 'apply '"invalid arg count")))) (length G2b1b)))))) (set! G2a58@library-loader (G2936@G2869@make-parameter (lambda (G2b1d@x) ((lambda (G2b1f@file-name) (if (not G2b1f@file-name) (assertion-violation '#f '"cannot file library" G2b1d@x) ((lambda (G2b21@t) (if G2b21@t G2b21@t (begin '#f ((G2a5a@current-library-expander) (G2935@G2867@read-library-source-file G2b1f@file-name) G2b1f@file-name (lambda (G2b23@name) (if (not (equal? G2b23@name G2b1d@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b27@G2b25 G2b28@G2b26) ((lambda (G2b2b@e G2b2c@p) (begin (display '"expected to find library " G2b2c@p) (write G2b1d@x G2b2c@p) (display '" in file " G2b2c@p) (display G2b1f@file-name G2b2c@p) (display '", found " G2b2c@p) (write G2b23@name G2b2c@p) (display '" instead" G2b2c@p) (G2b2b@e))) G2b28@G2b26 G2b27@G2b25)))) (void))))))) (G2a56@try-load-from-file G2b1f@file-name)))) ((G2a50@file-locator) G2b1d@x))) (lambda (G2b2f@f) (if (procedure? G2b2f@f) G2b2f@f (assertion-violation 'library-locator '"not a procedure" G2b2f@f))))) (set! G2a5a@current-library-expander (G2936@G2869@make-parameter (lambda (G2b31@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b33@f) (if (procedure? G2b33@f) G2b33@f (assertion-violation 'library-expander '"not a procedure" G2b33@f))))) (set! G2a5c@external-pending-libraries (G2936@G2869@make-parameter '())) (set! G2a5e@find-external-library (lambda (G2b35@name) (begin (if (member G2b35@name (G2a5c@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b35@name) (void)) ((lambda (G2b39@G2b37@external-pending-libraries G2b3a@G2b38@external-pending-libraries) ((lambda (G2b3d@swap) (dynamic-wind G2b3d@swap (lambda () (begin ((G2a58@library-loader) G2b35@name) ((lambda (G2b3f@t) (if G2b3f@t G2b3f@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b35@name)))) (G2a48@find-library-by (lambda (G2b41@x) (equal? (G2a0e@library-name G2b41@x) G2b35@name)))))) G2b3d@swap)) (lambda () ((lambda (G2b43@t) (begin (G2b39@G2b37@external-pending-libraries G2b3a@G2b38@external-pending-libraries) (set! G2b3a@G2b38@external-pending-libraries G2b43@t))) (G2b39@G2b37@external-pending-libraries))))) G2a5c@external-pending-libraries (cons G2b35@name (G2a5c@external-pending-libraries)))))) (set! G2a60@find-library-by-name (lambda (G2b45@name) ((lambda (G2b47@t) (if G2b47@t G2b47@t (begin '#f (G2a5e@find-external-library G2b45@name)))) (G2a48@find-library-by (lambda (G2b49@x) (equal? (G2a0e@library-name G2b49@x) G2b45@name)))))) (set! G2a62@library-exists? (lambda (G2b4b@name) (if (G2a48@find-library-by (lambda (G2b4d@x) (equal? (G2a0e@library-name G2b4d@x) G2b4b@name))) (begin '#f '#t) '#f))) (set! G2a64@find-library-by-spec/die (lambda (G2b4f@spec) ((lambda (G2b51@id) ((lambda (G2b53@t) (if G2b53@t G2b53@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2b4f@spec)))) (G2a48@find-library-by (lambda (G2b55@x) (eq? G2b51@id (G2a0c@library-id G2b55@x)))))) (car G2b4f@spec)))) (set! G2a66@label->binding-table (make-eq-hashtable)) (set! G2a68@install-library-record (lambda (G2b57@lib) (begin ((lambda (G2b59@exp-env) (for-each (lambda (G2b5b@x) ((lambda (G2b5d@label G2b5e@binding) ((lambda (G2b61@binding) (hashtable-set! G2a66@label->binding-table G2b5d@label G2b61@binding)) ((lambda (G2b63@t) (if (memv G2b63@t '(global)) (cons 'global (cons G2b57@lib (cdr G2b5e@binding))) (if (memv G2b63@t '(global-macro)) (cons 'global-macro (cons G2b57@lib (cdr G2b5e@binding))) (if (memv G2b63@t '(global-macro!)) (cons 'global-macro! (cons G2b57@lib (cdr G2b5e@binding))) G2b5e@binding)))) (car G2b5e@binding)))) (car G2b5b@x) (cdr G2b5b@x))) G2b59@exp-env)) (G2a1a@library-env G2b57@lib)) ((G29f9@current-library-collection) G2b57@lib)))) (set! G2a6a@install-library (lambda (G2b65@id G2b66@name G2b67@ver G2b68@imp* G2b69@vis* G2b6a@inv* G2b6b@exp-subst G2b6c@exp-env G2b6d@visit-proc G2b6e@invoke-proc G2b6f@visit-code G2b70@invoke-code G2b71@visible? G2b72@source-file-name) ((lambda (G2b81@imp-lib* G2b82@vis-lib* G2b83@inv-lib*) (begin (if (not (if (symbol? G2b65@id) (if (list? G2b66@name) (begin '#f (list? G2b67@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b65@id G2b66@name G2b67@ver) (void)) (if (G2a62@library-exists? G2b66@name) (assertion-violation 'install-library '"library is already installed" G2b66@name) (void)) ((lambda (G2b87@lib) (G2a68@install-library-record G2b87@lib)) (G2a0a@make-library G2b65@id G2b66@name G2b67@ver G2b81@imp-lib* G2b82@vis-lib* G2b83@inv-lib* G2b6b@exp-subst G2b6c@exp-env G2b6d@visit-proc G2b6e@invoke-proc G2b6f@visit-code G2b70@invoke-code G2b71@visible? G2b72@source-file-name)))) (map G2a64@find-library-by-spec/die G2b68@imp*) (map G2a64@find-library-by-spec/die G2b69@vis*) (map G2a64@find-library-by-spec/die G2b6a@inv*)))) (set! G2a6c@imported-label->binding (lambda (G2b89@lab) (hashtable-ref G2a66@label->binding-table G2b89@lab '#f))) (set! G2a6e@invoke-library (lambda (G2b8b@lib) ((lambda (G2b8d@invoke) (if (procedure? G2b8d@invoke) (begin (G2a3a@set-library-invoke-state! G2b8b@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b8b@lib))) (for-each G2a6e@invoke-library (G2a16@library-inv* G2b8b@lib)) (G2a3a@set-library-invoke-state! G2b8b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b8b@lib))) (G2b8d@invoke) (G2a3a@set-library-invoke-state! G2b8b@lib '#t)) (void))) (G2a1e@library-invoke-state G2b8b@lib)))) (set! G2a70@visit-library (lambda (G2b8f@lib) ((lambda (G2b91@visit) (if (procedure? G2b91@visit) (begin (G2a38@set-library-visit-state! G2b8f@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b8f@lib))) (for-each G2a6e@invoke-library (G2a14@library-vis* G2b8f@lib)) (G2a38@set-library-visit-state! G2b8f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b8f@lib))) (G2b91@visit) (G2a38@set-library-visit-state! G2b8f@lib '#t)) (void))) (G2a1c@library-visit-state G2b8f@lib)))) (set! G2a72@invoke-library-by-spec (lambda (G2b93@spec) (G2a6e@invoke-library (G2a64@find-library-by-spec/die G2b93@spec)))) (set! G2a74@installed-libraries (lambda G2b9d ((lambda (G2b9e) (if (= G2b9e '1) (apply (lambda (G2b95@all?) ((letrec ((G2b97@f (lambda (G2b99@ls) (if (null? G2b99@ls) '() (if ((lambda (G2b9b@t) (if G2b9b@t G2b9b@t (begin '#f (G2a24@library-visible? (car G2b99@ls))))) G2b95@all?) (cons (car G2b99@ls) (G2b97@f (cdr G2b99@ls))) (G2b97@f (cdr G2b99@ls))))))) G2b97@f) ((G29f9@current-library-collection)))) G2b9d) (if (= G2b9e '0) (apply (lambda () (G2a74@installed-libraries '#f)) G2b9d) (error 'apply '"invalid arg count")))) (length G2b9d)))) (set! G2a76@library-spec (lambda (G2b9f@x) (begin (if (not (G2a08@library? G2b9f@x)) (assertion-violation 'library-spec '"not a library" G2b9f@x) (void)) (list (G2a0c@library-id G2b9f@x) (G2a0e@library-name G2b9f@x) (G2a10@library-version G2b9f@x))))) (begin (set! G2bdd@G2a76@library-spec G2a76@library-spec) (set! G2bdc@G2a74@installed-libraries G2a74@installed-libraries) (set! G2bdb@G2a72@invoke-library-by-spec G2a72@invoke-library-by-spec) (set! G2bda@G2a70@visit-library G2a70@visit-library) (set! G2bd9@G2a6e@invoke-library G2a6e@invoke-library) (set! G2bd8@G2a6c@imported-label->binding G2a6c@imported-label->binding) (set! G2bd7@G2a6a@install-library G2a6a@install-library) (set! G2bd6@G2a68@install-library-record G2a68@install-library-record) (set! G2bd5@G2a66@label->binding-table G2a66@label->binding-table) (set! G2bd4@G2a64@find-library-by-spec/die G2a64@find-library-by-spec/die) (set! G2bd3@G2a62@library-exists? G2a62@library-exists?) (set! G2bd2@G2a60@find-library-by-name G2a60@find-library-by-name) (set! G2bd1@G2a5e@find-external-library G2a5e@find-external-library) (set! G2bd0@G2a5c@external-pending-libraries G2a5c@external-pending-libraries) (set! G2bcf@G2a5a@current-library-expander G2a5a@current-library-expander) (set! G2bce@G2a58@library-loader G2a58@library-loader) (set! G2bcd@G2a56@try-load-from-file G2a56@try-load-from-file) (set! G2bcc@G2a54@current-precompiled-library-loader G2a54@current-precompiled-library-loader) (set! G2bcb@G2a52@serialize-all G2a52@serialize-all) (set! G2bca@G2a50@file-locator G2a50@file-locator) (set! G2bc9@G2a4e@library-name->file-name G2a4e@library-name->file-name) (set! G2bc8@G2a4c@library-extensions G2a4c@library-extensions) (set! G2bc7@G2a4a@library-path G2a4a@library-path) (set! G2bc6@G2a48@find-library-by G2a48@find-library-by) (set! G2bc5@G2a46@find-dependencies G2a46@find-dependencies) (set! G2bc4@G2a44@rp G2a44@rp) (set! G2bc3@G2a42@set-library-source-file-name! G2a42@set-library-source-file-name!) (set! G2bc2@G2a40@set-library-visible?! G2a40@set-library-visible?!) (set! G2bc1@G2a3e@set-library-invoke-code! G2a3e@set-library-invoke-code!) (set! G2bc0@G2a3c@set-library-visit-code! G2a3c@set-library-visit-code!) (set! G2bbf@G2a3a@set-library-invoke-state! G2a3a@set-library-invoke-state!) (set! G2bbe@G2a38@set-library-visit-state! G2a38@set-library-visit-state!) (set! G2bbd@G2a36@set-library-env! G2a36@set-library-env!) (set! G2bbc@G2a34@set-library-subst! G2a34@set-library-subst!) (set! G2bbb@G2a32@set-library-inv*! G2a32@set-library-inv*!) (set! G2bba@G2a30@set-library-vis*! G2a30@set-library-vis*!) (set! G2bb9@G2a2e@set-library-imp*! G2a2e@set-library-imp*!) (set! G2bb8@G2a2c@set-library-version! G2a2c@set-library-version!) (set! G2bb7@G2a2a@set-library-name! G2a2a@set-library-name!) (set! G2bb6@G2a28@set-library-id! G2a28@set-library-id!) (set! G2bb5@G2a26@library-source-file-name G2a26@library-source-file-name) (set! G2bb4@G2a24@library-visible? G2a24@library-visible?) (set! G2bb3@G2a22@library-invoke-code G2a22@library-invoke-code) (set! G2bb2@G2a20@library-visit-code G2a20@library-visit-code) (set! G2bb1@G2a1e@library-invoke-state G2a1e@library-invoke-state) (set! G2bb0@G2a1c@library-visit-state G2a1c@library-visit-state) (set! G2baf@G2a1a@library-env G2a1a@library-env) (set! G2bae@G2a18@library-subst G2a18@library-subst) (set! G2bad@G2a16@library-inv* G2a16@library-inv*) (set! G2bac@G2a14@library-vis* G2a14@library-vis*) (set! G2bab@G2a12@library-imp* G2a12@library-imp*) (set! G2baa@G2a10@library-version G2a10@library-version) (set! G2ba9@G2a0e@library-name G2a0e@library-name) (set! G2ba8@G2a0c@library-id G2a0c@library-id) (set! G2ba7@G2a0a@make-library G2a0a@make-library) (set! G2ba6@G2a08@library? G2a08@library?) (set! G2ba5@G2a03@G29fb G2a03@G29fb) (set! G2ba4@G2a01@G29fc G2a01@G29fc) (set! G2ba3@G29ff@G29fa G29ff@G29fa) (set! G2ba2@G29f9@current-library-collection G29f9@current-library-collection) (set! G2ba1@G29f7@make-collection G29f7@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2be0@build-global-define G2c64@build-lambda G2c66@build-case-lambda G2c68@build-let G2cb0@build-sequence G2cb2@build-void G2cb4@build-letrec G2cb6@build-letrec* G2cb8@build-library-letrec* G2cba@build-receive) (begin (set! G2be0@build-global-define (lambda (G2cbb@x) (G2cb2@build-void))) (set! G2c64@build-lambda (lambda (G2cbd@ae G2cbe@vars G2cbf@exp) (list 'lambda G2cbe@vars G2cbf@exp))) (set! G2c66@build-case-lambda (lambda (G2cc3@ae G2cc4@vars* G2cc5@exp*) ((lambda (G2cca@build-error G2ccc@build-pred G2cce@build-apply G2cd0@expand-case-lambda) (begin (set! G2cca@build-error (lambda (G2cff@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2ccc@build-pred (lambda (G2ce9@ae G2cea@n G2ceb@vars) (call-with-values (lambda () ((letrec ((G2cf1@f (lambda (G2cf3@vars G2cf4@count) (if (pair? G2cf3@vars) (G2cf1@f (cdr G2cf3@vars) (+ G2cf4@count '1)) (if (null? G2cf3@vars) (values G2cf4@count '=) (values G2cf4@count '>=)))))) G2cf1@f) G2ceb@vars '0)) (lambda (G2cf7@G2cef G2cf8@G2cf0) ((lambda (G2cfb@pred G2cfc@count) (list (list 'primitive G2cfb@pred) G2cea@n (list 'quote G2cfc@count))) G2cf8@G2cf0 G2cf7@G2cef))))) (set! G2cce@build-apply (lambda (G2ce1@ae G2ce2@g G2ce3@vars G2ce4@exp) (list '(primitive apply) (G2c64@build-lambda G2ce1@ae G2ce3@vars G2ce4@exp) G2ce2@g))) (set! G2cd0@expand-case-lambda (lambda (G2cd1@ae G2cd2@vars G2cd3@exp*) ((lambda (G2cd7@g G2cd8@n) (list 'lambda G2cd7@g (G2c68@build-let G2cd1@ae (list G2cd8@n) (list (list '(primitive length) G2cd7@g)) ((letrec ((G2cdb@f (lambda (G2cdd@vars* G2cde@exp*) (if (null? G2cdd@vars*) (G2cca@build-error G2cd1@ae) (list 'if (G2ccc@build-pred G2cd1@ae G2cd8@n (car G2cdd@vars*)) (G2cce@build-apply G2cd1@ae G2cd7@g (car G2cdd@vars*) (car G2cde@exp*)) (G2cdb@f (cdr G2cdd@vars*) (cdr G2cde@exp*))))))) G2cdb@f) G2cc4@vars* G2cd3@exp*)))) (gensym) (gensym)))) (if (= (length G2cc5@exp*) '1) (G2c64@build-lambda G2cc3@ae (car G2cc4@vars*) (car G2cc5@exp*)) (G2cd0@expand-case-lambda G2cc3@ae G2cc4@vars* G2cc5@exp*)))) '#f '#f '#f '#f))) (set! G2c68@build-let (lambda (G2d01@ae G2d02@lhs* G2d03@rhs* G2d04@body) (cons (G2c64@build-lambda G2d01@ae G2d02@lhs* G2d04@body) G2d03@rhs*))) (set! G2cb0@build-sequence (lambda (G2d09@ae G2d0a@exps) ((letrec ((G2d0d@loop (lambda (G2d0f@exps) (if (null? (cdr G2d0f@exps)) (car G2d0f@exps) (if (equal? (car G2d0f@exps) (G2cb2@build-void)) (G2d0d@loop (cdr G2d0f@exps)) (cons 'begin G2d0f@exps)))))) G2d0d@loop) G2d0a@exps))) (set! G2cb2@build-void (lambda () '((primitive void)))) (set! G2cb4@build-letrec (lambda (G2d11@ae G2d12@vars G2d13@val-exps G2d14@body-exp) (if (null? G2d12@vars) G2d14@body-exp (list 'letrec (map list G2d12@vars G2d13@val-exps) G2d14@body-exp)))) (set! G2cb6@build-letrec* (lambda (G2d19@ae G2d1a@vars G2d1b@val-exps G2d1c@body-exp) (if (null? G2d1a@vars) G2d1c@body-exp (G2c68@build-let G2d19@ae G2d1a@vars (map (lambda (G2d21@x) (list 'quote '#f)) G2d1a@vars) (G2cb0@build-sequence G2d19@ae (append (map (lambda (G2d23@lhs G2d24@rhs) (list 'set! G2d23@lhs G2d24@rhs)) G2d1a@vars G2d1b@val-exps) (list G2d1c@body-exp))))))) (set! G2cb8@build-library-letrec* (lambda (G2d27@ae G2d28@name G2d29@vars G2d2a@locs G2d2b@val-exps G2d2c@body-exp) (list 'library-letrec* G2d28@name (map list G2d29@vars G2d2a@locs G2d2b@val-exps) G2d2c@body-exp))) (set! G2cba@build-receive (lambda (G2d33@ae G2d34@vars G2d35@producer G2d36@body*) (begin (display '"************** in ") (cons 'receive (cons G2d34@vars (cons G2d35@producer G2d36@body*)))))) (begin (set! G2d44@G2cba@build-receive G2cba@build-receive) (set! G2d43@G2cb8@build-library-letrec* G2cb8@build-library-letrec*) (set! G2d42@G2cb6@build-letrec* G2cb6@build-letrec*) (set! G2d41@G2cb4@build-letrec G2cb4@build-letrec) (set! G2d40@G2cb2@build-void G2cb2@build-void) (set! G2d3f@G2cb0@build-sequence G2cb0@build-sequence) (set! G2d3e@G2c68@build-let G2c68@build-let) (set! G2d3d@G2c66@build-case-lambda G2c66@build-case-lambda) (set! G2d3c@G2c64@build-lambda G2c64@build-lambda) (set! G2d3b@G2be0@build-global-define G2be0@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2d51@set-cons G2d53@set-union G2d58@top-mark* G2d5a@top-marked? G2d5c@gen-lexical G2d5e@gen-global G2d60@gen-label G2d62@gen-top-level-label G2d64@gen-define-label+loc G2d66@gen-define-label G2d6c@G2d67 G2d6e@G2d69 G2d70@G2d68 G2d75@rib? G2d77@make-rib G2d79@rib-sym* G2d7b@rib-mark** G2d7d@rib-label* G2d7f@rib-sealed/freq G2d81@rib-cache G2d83@set-rib-sym*! G2d85@set-rib-mark**! G2d87@set-rib-label*! G2d89@set-rib-sealed/freq! G2d8b@set-rib-cache! G2d8d@make-empty-rib G2d8f@make-cache-rib G2d91@find-label G2d93@extend-rib! G2d95@extend-rib/nc! G2d97@make-rib-map G2d99@seal-rib! G2d9b@unseal-rib! G2d9d@make-full-rib G2da3@G2d9e G2da5@G2da0 G2da7@G2d9f G2dac@stx? G2dae@make-stx G2db0@stx-expr G2db2@stx-mark* G2db4@stx-subst* G2db6@stx-ae* G2db8@set-stx-expr! G2dba@set-stx-mark*! G2dbc@set-stx-subst*! G2dbe@set-stx-ae*! G2dc0@rp G2dc2@datum->stx G2dc4@gen-mark G2dc6@anti-mark G2dc8@anti-mark? G2dca@join-wraps G2dcc@mkstx G2dce@add-mark G2dd0@add-subst G2dd2@syntax-kind? G2dd4@syntax-vector->list G2dd6@syntax-pair? G2dd8@syntax-vector? G2dda@syntax-null? G2ddc@syntax-list? G2dde@syntax-car G2de0@syntax-cdr G2de2@syntax->list G2de4@id? G2de6@id->sym G2de8@same-marks? G2dea@bound-id=? G2dec@free-id=? G2dee@valid-bound-ids? G2df0@distinct-bound-ids? G2df2@bound-id-member? G2df4@self-evaluating? G2df6@strip-annotations G2df8@strip G2dfa@stx->datum G2dfc@same-marks*? G2dfe@id->label G2e00@id->real-label G2e02@label->binding G2e04@make-binding G2e06@binding-type G2e08@binding-value G2e0a@raise-unbound-error G2e0c@syntax-type G2e23@sanitize-binding G2e25@make-variable-transformer G2e27@variable-transformer? G2e29@variable-transformer-procedure G2e2b@make-eval-transformer G2faf@parse-define G2fb1@parse-define-syntax G2fb3@scheme-stx-hashtable G2fb5@scheme-stx G2fb7@lexical-var G2fb9@lexical-mutable? G2fbb@set-lexical-mutable! G2fbd@add-lexical G2fbf@add-lexicals G2fc1@letrec-helper G2fc3@letrec-transformer G2fc5@letrec*-transformer G2fc7@fluid-let-syntax-transformer G2fc9@type-descriptor-transformer G2fcb@record-type-descriptor-transformer G2fcd@record-constructor-descriptor-transformer G2fcf@when-macro G2fd1@unless-macro G2fd3@if-transformer G2fd5@case-macro G2fd7@quote-transformer G2fd9@case-lambda-transformer G2fdb@lambda-transformer G2fdd@bless G2fdf@with-syntax-macro G2fe1@invalid-fmls-error G2fe3@let-macro G2fe5@let-values-macro G2fe7@let*-values-macro G2fe9@trace-lambda-macro G2feb@trace-define-macro G2fed@trace-define-syntax-macro G2fef@trace-let/rec-syntax G2ff1@trace-let-syntax-macro G2ff3@trace-letrec-syntax-macro G2ff5@guard-macro G2ff7@define-enumeration-macro G2ff9@time-macro G2ffb@delay-macro G2ffd@assert-macro G2fff@endianness-macro G3001@identifier-syntax-macro G3003@do-macro G3005@let*-macro G3007@or-macro G3009@and-macro G300b@cond-macro G300d@do-include G300f@include-macro G3011@include-into-macro G3013@syntax-rules-macro G3015@quasiquote-macro G3017@quasisyntax-macro G3019@define-struct-macro G301b@define-record-type-macro G301d@define-condition-type-macro G301f@incorrect-usage-macro G3021@parameterize-macro G3023@foreign-call-transformer G3025@convert-pattern G3027@syntax-dispatch G3029@ellipsis? G302b@underscore? G302d@verify-literals G302f@syntax-case-transformer G3031@ellipsis-map G3033@syntax-transformer G3035@core-macro-transformer G3037@file-options-macro G3039@symbol-macro G303b@macro-transformer G303d@local-macro-transformer G303f@do-macro-call G3041@chi-macro G3043@chi-local-macro G3045@chi-global-macro G3047@chi-expr* G3049@chi-application G304b@chi-expr G304d@chi-set! G304f@verify-formals G3051@chi-lambda-clause G3053@chi-lambda-clause* G3055@chi-defun G3057@chi-rhs G3059@expand-interaction-rhs*/init* G305b@chi-rhs* G305d@find-bound=? G305f@find-dups G3061@chi-internal G3063@parse-module G3069@G3064 G306b@G3066 G306d@G3065 G3072@module-interface? G3074@make-module-interface G3076@module-interface-first-mark G3078@module-interface-exp-id-vec G307a@module-interface-exp-lab-vec G307c@set-module-interface-first-mark! G307e@set-module-interface-exp-id-vec! G3080@set-module-interface-exp-lab-vec! G3082@module-interface-exp-id* G3084@chi-internal-module G3086@chi-body* G3088@expand-transformer G308a@parse-exports G308c@parse-library-name G308e@parse-library G3090@parse-import-spec* G3092@make-top-rib G3094@make-collector G3096@inv-collector G3098@vis-collector G309a@imp-collector G309c@chi-library-internal G309e@chi-interaction-expr G30a0@library-body-expander G30a2@core-library-expander G30a4@parse-top-level-program G30a6@top-level-expander G30ac@G30a7 G30ae@G30a9 G30b0@G30a8 G30b5@env? G30b7@make-env G30b9@env-names G30bb@env-labels G30bd@env-itc G30bf@set-env-names! G30c1@set-env-labels! G30c3@set-env-itc! G30c5@rp G30cb@G30c6 G30cd@G30c8 G30cf@G30c7 G30d4@interaction-env? G30d6@make-interaction-env G30d8@interaction-env-rib G30da@interaction-env-r G30dc@interaction-env-locs G30de@set-interaction-env-rib! G30e0@set-interaction-env-r! G30e2@set-interaction-env-locs! G30e4@rp G30e6@interaction-environment-symbols G30e8@environment-bindings G30ea@parse-binding G30ec@environment? G30ee@environment-symbols G30f0@environment G30f2@null-environment G30f4@scheme-report-environment G30f6@expand G30f8@eval G30fa@library-expander G30fc@boot-library-expand G30fe@rev-map-append G3100@build-exports G3102@make-export-subst G3104@make-export-env/macros G3106@generate-temporaries G3108@free-identifier=? G310a@bound-identifier=? G310c@make-source-condition G310e@extract-position-condition G3110@expression-position G3112@assertion-error G3114@syntax-error G3116@extract-trace G3118@syntax-violation* G311a@syntax-violation G311c@identifier? G311e@datum->syntax G3120@syntax->datum G3122@compile-r6rs-top-level G3124@pre-compile-r6rs-top-level G3126@interaction-environment G3128@top-level-context) (begin (set! G2d51@set-cons (lambda (G3129@x G312a@ls) (if (memq G3129@x G312a@ls) G312a@ls (cons G3129@x G312a@ls)))) (set! G2d53@set-union (lambda (G312d@ls1 G312e@ls2) (if (null? G312d@ls1) G312e@ls2 (if (memq (car G312d@ls1) G312e@ls2) (G2d53@set-union (cdr G312d@ls1) G312e@ls2) (cons (car G312d@ls1) (G2d53@set-union (cdr G312d@ls1) G312e@ls2)))))) (set! G2d58@top-mark* '(top)) (set! G2d5a@top-marked? (lambda (G3131@m*) (memq 'top G3131@m*))) (set! G2d5c@gen-lexical (lambda (G3133@sym) (if (symbol? G3133@sym) (gensym G3133@sym) (if (G2dac@stx? G3133@sym) (G2d5c@gen-lexical (G2de6@id->sym G3133@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3133@sym))))) (set! G2d5e@gen-global (lambda (G3135@x) (G2d5c@gen-lexical G3135@x))) (set! G2d60@gen-label (lambda (G3137@_) (gensym))) (set! G2d62@gen-top-level-label (lambda (G3139@id G313a@rib) ((lambda (G313e@find) (begin (set! G313e@find (lambda (G3149@sym G314a@mark* G314b@sym* G314c@mark** G314d@label*) (if (pair? G314b@sym*) (begin '#f (if (if (eq? G3149@sym (car G314b@sym*)) (begin '#f (G2de8@same-marks? G314a@mark* (car G314c@mark**))) '#f) (car G314d@label*) (G313e@find G3149@sym G314a@mark* (cdr G314b@sym*) (cdr G314c@mark**) (cdr G314d@label*)))) '#f))) ((lambda (G313f@sym G3140@mark*) ((lambda (G3143@sym*) ((lambda (G3145@t) (if G3145@t ((lambda (G3147@label) (if (G2bd8@G2a6c@imported-label->binding G3147@label) (gensym) G3147@label)) G3145@t) (gensym))) (if (memq G313f@sym (G2d79@rib-sym* G313a@rib)) (begin '#f (G313e@find G313f@sym G3140@mark* G3143@sym* (G2d7b@rib-mark** G313a@rib) (G2d7d@rib-label* G313a@rib))) '#f))) (G2d79@rib-sym* G313a@rib))) (G2de6@id->sym G3139@id) (G2db2@stx-mark* G3139@id)))) '#f))) (set! G2d64@gen-define-label+loc (lambda (G3153@id G3154@rib) ((lambda (G3157@t) (if G3157@t ((lambda (G3159@env) ((lambda (G315b@label G315c@locs) (values G315b@label ((lambda (G315f@t) (if G315f@t (cdr G315f@t) ((lambda (G3161@loc) (begin (G30e2@set-interaction-env-locs! G3159@env (cons (cons G315b@label G3161@loc) G315c@locs)) G3161@loc)) (G2d5c@gen-lexical G3153@id)))) (assq G315b@label G315c@locs)))) (G2d62@gen-top-level-label G3153@id G3154@rib) (G30dc@interaction-env-locs G3159@env))) G3157@t) (values (gensym) (G2d5c@gen-lexical G3153@id)))) (G3128@top-level-context)))) (set! G2d66@gen-define-label (lambda (G3163@id G3164@rib) (if (G3128@top-level-context) (G2d62@gen-top-level-label G3163@id G3164@rib) (gensym)))) (set! G2d6c@G2d67 (make-record-type-descriptor 'rib '#f 'G2d6a '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2d6e@G2d69 '#f) (set! G2d70@G2d68 (make-record-constructor-descriptor G2d6c@G2d67 '#f G2d6e@G2d69)) (set! G2d75@rib? (record-predicate G2d6c@G2d67)) (set! G2d77@make-rib (record-constructor G2d70@G2d68)) (set! G2d79@rib-sym* (record-accessor G2d6c@G2d67 '0)) (set! G2d7b@rib-mark** (record-accessor G2d6c@G2d67 '1)) (set! G2d7d@rib-label* (record-accessor G2d6c@G2d67 '2)) (set! G2d7f@rib-sealed/freq (record-accessor G2d6c@G2d67 '3)) (set! G2d81@rib-cache (record-accessor G2d6c@G2d67 '4)) (set! G2d83@set-rib-sym*! (record-mutator G2d6c@G2d67 '0)) (set! G2d85@set-rib-mark**! (record-mutator G2d6c@G2d67 '1)) (set! G2d87@set-rib-label*! (record-mutator G2d6c@G2d67 '2)) (set! G2d89@set-rib-sealed/freq! (record-mutator G2d6c@G2d67 '3)) (set! G2d8b@set-rib-cache! (record-mutator G2d6c@G2d67 '4)) (set! G2d8d@make-empty-rib (lambda () (G2d77@make-rib '() '() '() '#f '#f))) (set! G2d8f@make-cache-rib (lambda () (G2d77@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d91@find-label (lambda (G3167@rib G3168@sym G3169@mark*) ((lambda (G316d@ht) (if G316d@ht (begin '#f ((lambda (G316f@cv) ((lambda (G3171@t) (if G3171@t (cdr G3171@t) '#f)) (if G316f@cv (begin '#f (assp (lambda (G3173@m) (G2de8@same-marks? G3169@mark* G3173@m)) G316f@cv)) '#f))) (hashtable-ref G316d@ht G3168@sym '#f))) '#f)) (G2d81@rib-cache G3167@rib)))) (set! G2d93@extend-rib! (lambda (G3175@rib G3176@id G3177@label) ((lambda (G317c@find) (begin (set! G317c@find (lambda (G318d@sym G318e@mark* G318f@sym* G3190@mark** G3191@label*) (if (pair? G318f@sym*) (begin '#f (if (if (eq? G318d@sym (car G318f@sym*)) (begin '#f (G2de8@same-marks? G318e@mark* (car G3190@mark**))) '#f) G3191@label* (G317c@find G318d@sym G318e@mark* (cdr G318f@sym*) (cdr G3190@mark**) (cdr G3191@label*)))) '#f))) (begin (if (G2d7f@rib-sealed/freq G3175@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G3175@rib) (void)) ((lambda (G317d@sym G317e@mark*) ((lambda (G3181@sym*) ((lambda (G3183@t) (if G3183@t ((lambda (G3185@p) (if (not (eq? G3177@label G3185@p)) (G311a@syntax-violation '#f '"multiple definitions of identifier" G3176@id) (void))) G3183@t) ((lambda (G3187@t) (if G3187@t ((lambda (G3189@p) (if (not (eq? G3177@label (car G3189@p))) (if (G3128@top-level-context) (set-car! G3189@p G3177@label) (G311a@syntax-violation '#f '"multiple definitions of identifier" G3176@id)) (void))) G3187@t) (begin (if (G2d81@rib-cache G3175@rib) (hashtable-update! (G2d81@rib-cache G3175@rib) G317d@sym (lambda (G318b@e) (cons (cons G317e@mark* G3177@label) G318b@e)) '()) (void)) (G2d83@set-rib-sym*! G3175@rib (cons G317d@sym G3181@sym*)) (G2d85@set-rib-mark**! G3175@rib (cons G317e@mark* (G2d7b@rib-mark** G3175@rib))) (G2d87@set-rib-label*! G3175@rib (cons G3177@label (G2d7d@rib-label* G3175@rib)))))) (if (memq G317d@sym (G2d79@rib-sym* G3175@rib)) (begin '#f (G317c@find G317d@sym G317e@mark* G3181@sym* (G2d7b@rib-mark** G3175@rib) (G2d7d@rib-label* G3175@rib))) '#f)))) (G2d91@find-label G3175@rib G317d@sym G317e@mark*))) (G2d79@rib-sym* G3175@rib))) (G2de6@id->sym G3176@id) (G2db2@stx-mark* G3176@id))))) '#f))) (set! G2d95@extend-rib/nc! (lambda (G3197@rib G3198@id G3199@label) ((lambda (G319d@sym G319e@mark*) ((lambda (G31a1@sym*) (begin (if (G2d81@rib-cache G3197@rib) (hashtable-update! (G2d81@rib-cache G3197@rib) G319d@sym (lambda (G31a3@e) (cons (cons G319e@mark* G3199@label) G31a3@e)) '()) (void)) (G2d83@set-rib-sym*! G3197@rib (cons G319d@sym G31a1@sym*)) (G2d85@set-rib-mark**! G3197@rib (cons G319e@mark* (G2d7b@rib-mark** G3197@rib))) (G2d87@set-rib-label*! G3197@rib (cons G3199@label (G2d7d@rib-label* G3197@rib))))) (G2d79@rib-sym* G3197@rib))) (G2de6@id->sym G3198@id) (G2db2@stx-mark* G3198@id)))) (set! G2d97@make-rib-map (lambda (G31a5@sym*) ((lambda (G31a7@ht) ((letrec ((G31a9@f (lambda (G31ab@i G31ac@sym*) (if (null? G31ac@sym*) G31a7@ht (begin (hashtable-update! G31a7@ht (car G31ac@sym*) (lambda (G31af@x) (cons G31ab@i G31af@x)) '()) (G31a9@f (+ G31ab@i '1) (cdr G31ac@sym*))))))) G31a9@f) '0 G31a5@sym*)) (make-eq-hashtable)))) (set! G2d99@seal-rib! (lambda (G31b1@rib) ((lambda (G31b3@sym*) (if (not (null? G31b3@sym*)) (begin (G2d83@set-rib-sym*! G31b1@rib (list->vector G31b3@sym*)) (G2d85@set-rib-mark**! G31b1@rib (list->vector (G2d7b@rib-mark** G31b1@rib))) (G2d87@set-rib-label*! G31b1@rib (list->vector (G2d7d@rib-label* G31b1@rib))) (G2d89@set-rib-sealed/freq! G31b1@rib (G2d97@make-rib-map G31b3@sym*))) (void))) (G2d79@rib-sym* G31b1@rib)))) (set! G2d9b@unseal-rib! (lambda (G31b5@rib) (if (G2d7f@rib-sealed/freq G31b5@rib) (begin (G2d89@set-rib-sealed/freq! G31b5@rib '#f) (G2d83@set-rib-sym*! G31b5@rib (vector->list (G2d79@rib-sym* G31b5@rib))) (G2d85@set-rib-mark**! G31b5@rib (vector->list (G2d7b@rib-mark** G31b5@rib))) (G2d87@set-rib-label*! G31b5@rib (vector->list (G2d7d@rib-label* G31b5@rib)))) (void)))) (set! G2d9d@make-full-rib (lambda (G31b7@id* G31b8@label*) ((lambda (G31bb@r) (begin (G2d99@seal-rib! G31bb@r) G31bb@r)) (G2d77@make-rib (map G2de6@id->sym G31b7@id*) (map G2db2@stx-mark* G31b7@id*) G31b8@label* '#f '#f)))) (set! G2da3@G2d9e (make-record-type-descriptor 'stx '#f 'G2da1 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2da5@G2da0 '#f) (set! G2da7@G2d9f (make-record-constructor-descriptor G2da3@G2d9e '#f G2da5@G2da0)) (set! G2dac@stx? (record-predicate G2da3@G2d9e)) (set! G2dae@make-stx (record-constructor G2da7@G2d9f)) (set! G2db0@stx-expr (record-accessor G2da3@G2d9e '0)) (set! G2db2@stx-mark* (record-accessor G2da3@G2d9e '1)) (set! G2db4@stx-subst* (record-accessor G2da3@G2d9e '2)) (set! G2db6@stx-ae* (record-accessor G2da3@G2d9e '3)) (set! G2db8@set-stx-expr! (record-mutator G2da3@G2d9e '0)) (set! G2dba@set-stx-mark*! (record-mutator G2da3@G2d9e '1)) (set! G2dbc@set-stx-subst*! (record-mutator G2da3@G2d9e '2)) (set! G2dbe@set-stx-ae*! (record-mutator G2da3@G2d9e '3)) (set! G2dc0@rp (G2933@G2863@make-record-printer 'stx (lambda (G31bd@x G31be@p G31bf@wr) (begin (display '"#<syntax " G31be@p) (write (G2dfa@stx->datum G31bd@x) G31be@p) ((lambda (G31c3@expr) (if (G292e@G2859@annotation? G31c3@expr) ((lambda (G31c5@src) (if (pair? G31c5@src) (begin (display '" [" G31be@p) (display (cdr G31c5@src) G31be@p) (display '" of " G31be@p) (display (car G31c5@src) G31be@p) (display '"]" G31be@p)) (void))) (G292f@G285b@annotation-source G31c3@expr)) (void))) (G2db0@stx-expr G31bd@x)) (display '">" G31be@p))))) (set! G2dc2@datum->stx (lambda (G31c7@id G31c8@datum) (G2dae@make-stx G31c8@datum (G2db2@stx-mark* G31c7@id) (G2db4@stx-subst* G31c7@id) (G2db6@stx-ae* G31c7@id)))) (set! G2dc4@gen-mark (lambda () (string '#\m))) (set! G2dc6@anti-mark '#f) (set! G2dc8@anti-mark? not) (set! G2dca@join-wraps (lambda (G31cb@m1* G31cc@s1* G31cd@ae1* G31ce@e) ((lambda (G31d4@cancel) (begin (set! G31d4@cancel (lambda (G31db@ls1 G31dc@ls2) ((letrec ((G31df@f (lambda (G31e1@x G31e2@ls1) (if (null? G31e2@ls1) (cdr G31dc@ls2) (cons G31e1@x (G31df@f (car G31e2@ls1) (cdr G31e2@ls1))))))) G31df@f) (car G31db@ls1) (cdr G31db@ls1)))) ((lambda (G31d5@m2* G31d6@s2* G31d7@ae2*) (if (if (not (null? G31cb@m1*)) (if (not (null? G31d5@m2*)) (begin '#f (G2dc8@anti-mark? (car G31d5@m2*))) '#f) '#f) (values (G31d4@cancel G31cb@m1* G31d5@m2*) (G31d4@cancel G31cc@s1* G31d6@s2*) (G31d4@cancel G31cd@ae1* G31d7@ae2*)) (values (append G31cb@m1* G31d5@m2*) (append G31cc@s1* G31d6@s2*) (append G31cd@ae1* G31d7@ae2*)))) (G2db2@stx-mark* G31ce@e) (G2db4@stx-subst* G31ce@e) (G2db6@stx-ae* G31ce@e)))) '#f))) (set! G2dcc@mkstx (lambda (G31e5@e G31e6@m* G31e7@s* G31e8@ae*) (if (if (G2dac@stx? G31e5@e) (begin '#f (not (G2d5a@top-marked? G31e6@m*))) '#f) (call-with-values (lambda () (G2dca@join-wraps G31e6@m* G31e7@s* G31e8@ae* G31e5@e)) (lambda (G31f0@G31ed G31f1@G31ee G31f2@G31ef) ((lambda (G31f6@ae* G31f7@s* G31f8@m*) (G2dae@make-stx (G2db0@stx-expr G31e5@e) G31f8@m* G31f7@s* G31f6@ae*)) G31f2@G31ef G31f1@G31ee G31f0@G31ed))) (G2dae@make-stx G31e5@e G31e6@m* G31e7@s* G31e8@ae*)))) (set! G2dce@add-mark (lambda (G31fc@m G31fd@e G31fe@ae) (G2dcc@mkstx G31fd@e (list G31fc@m) '(shift) (list G31fe@ae)))) (set! G2dd0@add-subst (lambda (G3202@subst G3203@e) (G2dcc@mkstx G3203@e '() (list G3202@subst) '()))) (set! G2dd2@syntax-kind? (lambda (G3206@x G3207@p?) (if (G2dac@stx? G3206@x) (G2dd2@syntax-kind? (G2db0@stx-expr G3206@x) G3207@p?) (if (G292e@G2859@annotation? G3206@x) (G2dd2@syntax-kind? (G2930@G285d@annotation-expression G3206@x) G3207@p?) (G3207@p? G3206@x))))) (set! G2dd4@syntax-vector->list (lambda (G320a@x) (if (G2dac@stx? G320a@x) ((lambda (G320c@ls G320d@m* G320e@s* G320f@ae*) (map (lambda (G3214@x) (G2dcc@mkstx G3214@x G320d@m* G320e@s* G320f@ae*)) G320c@ls)) (G2dd4@syntax-vector->list (G2db0@stx-expr G320a@x)) (G2db2@stx-mark* G320a@x) (G2db4@stx-subst* G320a@x) (G2db6@stx-ae* G320a@x)) (if (G292e@G2859@annotation? G320a@x) (G2dd4@syntax-vector->list (G2930@G285d@annotation-expression G320a@x)) (if (vector? G320a@x) (vector->list G320a@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G320a@x)))))) (set! G2dd6@syntax-pair? (lambda (G3216@x) (G2dd2@syntax-kind? G3216@x pair?))) (set! G2dd8@syntax-vector? (lambda (G3218@x) (G2dd2@syntax-kind? G3218@x vector?))) (set! G2dda@syntax-null? (lambda (G321a@x) (G2dd2@syntax-kind? G321a@x null?))) (set! G2ddc@syntax-list? (lambda (G321c@x) ((lambda (G321e@t) (if G321e@t G321e@t (begin '#f (if (G2dd6@syntax-pair? G321c@x) (begin '#f (G2ddc@syntax-list? (G2de0@syntax-cdr G321c@x))) '#f)))) (G2dda@syntax-null? G321c@x)))) (set! G2dde@syntax-car (lambda (G3220@x) (if (G2dac@stx? G3220@x) (G2dcc@mkstx (G2dde@syntax-car (G2db0@stx-expr G3220@x)) (G2db2@stx-mark* G3220@x) (G2db4@stx-subst* G3220@x) (G2db6@stx-ae* G3220@x)) (if (G292e@G2859@annotation? G3220@x) (G2dde@syntax-car (G2930@G285d@annotation-expression G3220@x)) (if (pair? G3220@x) (car G3220@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3220@x)))))) (set! G2de0@syntax-cdr (lambda (G3222@x) (if (G2dac@stx? G3222@x) (G2dcc@mkstx (G2de0@syntax-cdr (G2db0@stx-expr G3222@x)) (G2db2@stx-mark* G3222@x) (G2db4@stx-subst* G3222@x) (G2db6@stx-ae* G3222@x)) (if (G292e@G2859@annotation? G3222@x) (G2de0@syntax-cdr (G2930@G285d@annotation-expression G3222@x)) (if (pair? G3222@x) (cdr G3222@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3222@x)))))) (set! G2de2@syntax->list (lambda (G3224@x) (if (G2dd6@syntax-pair? G3224@x) (cons (G2dde@syntax-car G3224@x) (G2de2@syntax->list (G2de0@syntax-cdr G3224@x))) (if (G2dda@syntax-null? G3224@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3224@x))))) (set! G2de4@id? (lambda (G3226@x) (if (G2dac@stx? G3226@x) (begin '#f ((lambda (G3228@expr) (symbol? (if (G292e@G2859@annotation? G3228@expr) (G292d@G2857@annotation-stripped G3228@expr) G3228@expr))) (G2db0@stx-expr G3226@x))) '#f))) (set! G2de6@id->sym (lambda (G322a@x) (begin (if (not (G2dac@stx? G322a@x)) (error 'id->sym '"BUG in ikarus: not an id" G322a@x) (void)) ((lambda (G322c@expr) ((lambda (G322e@sym) (if (symbol? G322e@sym) G322e@sym (error 'id->sym '"BUG in ikarus: not an id" G322a@x))) (if (G292e@G2859@annotation? G322c@expr) (G292d@G2857@annotation-stripped G322c@expr) G322c@expr))) (G2db0@stx-expr G322a@x))))) (set! G2de8@same-marks? (lambda (G3230@x G3231@y) ((lambda (G3234@t) (if G3234@t G3234@t (begin '#f (if (pair? G3230@x) (if (pair? G3231@y) (if (eq? (car G3230@x) (car G3231@y)) (begin '#f (G2de8@same-marks? (cdr G3230@x) (cdr G3231@y))) '#f) '#f) '#f)))) (if (null? G3230@x) (begin '#f (null? G3231@y)) '#f)))) (set! G2dea@bound-id=? (lambda (G3236@x G3237@y) (if (eq? (G2de6@id->sym G3236@x) (G2de6@id->sym G3237@y)) (begin '#f (G2de8@same-marks? (G2db2@stx-mark* G3236@x) (G2db2@stx-mark* G3237@y))) '#f))) (set! G2dec@free-id=? (lambda (G323a@i G323b@j) ((lambda (G323e@t0 G323f@t1) (if ((lambda (G3242@t) (if G3242@t G3242@t (begin '#f G323f@t1))) G323e@t0) (eq? G323e@t0 G323f@t1) (eq? (G2de6@id->sym G323a@i) (G2de6@id->sym G323b@j)))) (G2e00@id->real-label G323a@i) (G2e00@id->real-label G323b@j)))) (set! G2dee@valid-bound-ids? (lambda (G3244@id*) (if (for-all G2de4@id? G3244@id*) (begin '#f (G2df0@distinct-bound-ids? G3244@id*)) '#f))) (set! G2df0@distinct-bound-ids? (lambda (G3246@id*) ((lambda (G3248@t) (if G3248@t G3248@t (begin '#f (if (not (G2df2@bound-id-member? (car G3246@id*) (cdr G3246@id*))) (begin '#f (G2df0@distinct-bound-ids? (cdr G3246@id*))) '#f)))) (null? G3246@id*)))) (set! G2df2@bound-id-member? (lambda (G324a@id G324b@id*) (if (pair? G324b@id*) (begin '#f ((lambda (G324e@t) (if G324e@t G324e@t (begin '#f (G2df2@bound-id-member? G324a@id (cdr G324b@id*))))) (G2dea@bound-id=? G324a@id (car G324b@id*)))) '#f))) (set! G2df4@self-evaluating? (lambda (G3250@x) ((lambda (G3252@t) (if G3252@t G3252@t ((lambda (G3254@t) (if G3254@t G3254@t ((lambda (G3256@t) (if G3256@t G3256@t ((lambda (G3258@t) (if G3258@t G3258@t ((lambda (G325a@t) (if G325a@t G325a@t (begin '#f (bytevector? G3250@x)))) (regexp? G3250@x)))) (boolean? G3250@x)))) (char? G3250@x)))) (string? G3250@x)))) (number? G3250@x)))) (set! G2df6@strip-annotations (lambda (G325c@x) (if (pair? G325c@x) (cons (G2df6@strip-annotations (car G325c@x)) (G2df6@strip-annotations (cdr G325c@x))) (if (vector? G325c@x) (vector-map G2df6@strip-annotations G325c@x) (if (G292e@G2859@annotation? G325c@x) (G292d@G2857@annotation-stripped G325c@x) G325c@x))))) (set! G2df8@strip (lambda (G325e@x G325f@m*) (if (G2d5a@top-marked? G325f@m*) (if ((lambda (G3262@t) (if G3262@t G3262@t ((lambda (G3264@t) (if G3264@t G3264@t (begin '#f (if (vector? G325e@x) (if (> (vector-length G325e@x) '0) (begin '#f (G292e@G2859@annotation? (vector-ref G325e@x '0))) '#f) '#f)))) (if (pair? G325e@x) (begin '#f (G292e@G2859@annotation? (car G325e@x))) '#f)))) (G292e@G2859@annotation? G325e@x)) (G2df6@strip-annotations G325e@x) G325e@x) ((letrec ((G3266@f (lambda (G3268@x) (if (G2dac@stx? G3268@x) (G2df8@strip (G2db0@stx-expr G3268@x) (G2db2@stx-mark* G3268@x)) (if (G292e@G2859@annotation? G3268@x) (G292d@G2857@annotation-stripped G3268@x) (if (pair? G3268@x) ((lambda (G326a@a G326b@d) (if (if (eq? G326a@a (car G3268@x)) (begin '#f (eq? G326b@d (cdr G3268@x))) '#f) G3268@x (cons G326a@a G326b@d))) (G3266@f (car G3268@x)) (G3266@f (cdr G3268@x))) (if (vector? G3268@x) ((lambda (G326e@old) ((lambda (G3270@new) (if (for-all eq? G326e@old G3270@new) G3268@x (list->vector G3270@new))) (map G3266@f G326e@old))) (vector->list G3268@x)) G3268@x))))))) G3266@f) G325e@x)))) (set! G2dfa@stx->datum (lambda (G3272@x) (G2df8@strip G3272@x '()))) (set! G2dfc@same-marks*? (lambda (G3274@mark* G3275@mark** G3276@si) (if (null? G3276@si) '#f (if (G2de8@same-marks? G3274@mark* (vector-ref G3275@mark** (car G3276@si))) (car G3276@si) (G2dfc@same-marks*? G3274@mark* G3275@mark** (cdr G3276@si)))))) (set! G2dfe@id->label (lambda (G327a@id) ((lambda (G327c@t) (if G327c@t G327c@t (begin '#f ((lambda (G327e@t) (if G327e@t ((lambda (G3280@env) ((lambda (G3282@rib) (call-with-values (lambda () (G2d64@gen-define-label+loc G327a@id G3282@rib)) (lambda (G3286@G3284 G3287@G3285) ((lambda (G328a@loc_ G328b@lab) (begin (G2d93@extend-rib! G3282@rib G327a@id G328b@lab) G328b@lab)) G3287@G3285 G3286@G3284)))) (G30d8@interaction-env-rib G3280@env))) G327e@t) '#f)) (G3128@top-level-context))))) (G2e00@id->real-label G327a@id)))) (set! G2e00@id->real-label (lambda (G328e@id) ((lambda (G3290@sym) ((letrec ((G3292@search (lambda (G3294@subst* G3295@mark*) (if (null? G3294@subst*) '#f (if (eq? (car G3294@subst*) 'shift) (G3292@search (cdr G3294@subst*) (cdr G3295@mark*)) ((lambda (G3298@rib) ((lambda (G329a@t) (if G329a@t ((lambda (G329c@ht) ((lambda (G329e@si) ((lambda (G32a0@i) (if G32a0@i (vector-ref (G2d7d@rib-label* G3298@rib) G32a0@i) (G3292@search (cdr G3294@subst*) G3295@mark*))) (if G329e@si (begin '#f (G2dfc@same-marks*? G3295@mark* (G2d7b@rib-mark** G3298@rib) (reverse G329e@si))) '#f))) (hashtable-ref G329c@ht G3290@sym '#f))) G329a@t) ((lambda (G32a2@t) (if G32a2@t G32a2@t (begin '#f ((letrec ((G32a4@f (lambda (G32a6@sym* G32a7@mark** G32a8@label*) (if (null? G32a6@sym*) (G3292@search (cdr G3294@subst*) G3295@mark*) (if (if (eq? (car G32a6@sym*) G3290@sym) (begin '#f (G2de8@same-marks? (car G32a7@mark**) G3295@mark*)) '#f) (car G32a8@label*) (G32a4@f (cdr G32a6@sym*) (cdr G32a7@mark**) (cdr G32a8@label*))))))) G32a4@f) (G2d79@rib-sym* G3298@rib) (G2d7b@rib-mark** G3298@rib) (G2d7d@rib-label* G3298@rib))))) (G2d91@find-label G3298@rib G3290@sym G3295@mark*)))) (G2d7f@rib-sealed/freq G3298@rib))) (car G3294@subst*))))))) G3292@search) (G2db4@stx-subst* G328e@id) (G2db2@stx-mark* G328e@id))) (G2de6@id->sym G328e@id)))) (set! G2e02@label->binding (lambda (G32ac@x G32ad@r) ((lambda (G32b0@t) (if G32b0@t ((lambda (G32b2@b) (if (if (pair? G32b2@b) (begin '#f (eq? (car G32b2@b) '$core-rtd)) '#f) (cons '$rtd (map G2fdd@bless (cdr G32b2@b))) (if (if (pair? G32b2@b) (begin '#f (eq? (car G32b2@b) 'global-rtd)) '#f) ((lambda (G32b4@lib G32b5@loc) (cons '$rtd (symbol-value G32b5@loc))) (cadr G32b2@b) (cddr G32b2@b)) G32b2@b))) G32b0@t) ((lambda (G32b8@t) (if G32b8@t (cdr G32b8@t) ((lambda (G32ba@t) (if G32ba@t ((lambda (G32bc@env) ((lambda (G32be@t) (if G32be@t ((lambda (G32c0@p) (cons* 'lexical (cdr G32c0@p) '#f)) G32be@t) '(displaced-lexical . #f))) (assq G32ac@x (G30dc@interaction-env-locs G32bc@env)))) G32ba@t) '(displaced-lexical . #f))) (G3128@top-level-context)))) (assq G32ac@x G32ad@r)))) (G2bd8@G2a6c@imported-label->binding G32ac@x)))) (set! G2e04@make-binding cons) (set! G2e06@binding-type car) (set! G2e08@binding-value cdr) (set! G2e0a@raise-unbound-error (lambda (G32c2@id) (G3118@syntax-violation* '#f '"unbound identifier" G32c2@id (G4bf9@G4b99@make-undefined-violation)))) (set! G2e0c@syntax-type (lambda (G32c4@e G32c5@r) (if (G2de4@id? G32c4@e) ((lambda (G32c8@id) ((lambda (G32ca@label) ((lambda (G32cc@b) ((lambda (G32ce@type) ((lambda () (begin (if (not G32ca@label) (G2e0a@raise-unbound-error G32c8@id) (void)) ((lambda (G32d0@t) (if (memv G32d0@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G32ce@type (G2e08@binding-value G32cc@b) G32c8@id) (values 'other '#f '#f))) G32ce@type))))) (G2e06@binding-type G32cc@b))) (G2e02@label->binding G32ca@label G32c5@r))) (G2dfe@id->label G32c8@id))) G32c4@e) (if (G2dd6@syntax-pair? G32c4@e) ((lambda (G32d2@id) (if (G2de4@id? G32d2@id) ((lambda (G32d4@label) ((lambda (G32d6@b) ((lambda (G32d8@type) ((lambda () (begin (if (not G32d4@label) (G2e0a@raise-unbound-error G32d2@id) (void)) ((lambda (G32da@t) (if (memv G32da@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G32d8@type (G2e08@binding-value G32d6@b) G32d2@id) (values 'call '#f '#f))) G32d8@type))))) (G2e06@binding-type G32d6@b))) (G2e02@label->binding G32d4@label G32c5@r))) (G2dfe@id->label G32d2@id)) (values 'call '#f '#f))) (G2dde@syntax-car G32c4@e)) ((lambda (G32dc@d) (if (G2df4@self-evaluating? G32dc@d) (values 'constant G32dc@d '#f) (values 'other '#f '#f))) (G2dfa@stx->datum G32c4@e)))))) (set! G2e23@sanitize-binding (lambda (G32de@x G32df@src) (if (procedure? G32de@x) (cons* 'local-macro G32de@x G32df@src) (if (if (pair? G32de@x) (if (eq? (car G32de@x) 'macro!) (begin '#f (procedure? (cdr G32de@x))) '#f) '#f) (cons* 'local-macro! (cdr G32de@x) G32df@src) (if (if (pair? G32de@x) (begin '#f (eq? (car G32de@x) '$rtd)) '#f) G32de@x (assertion-violation 'expand '"invalid transformer" G32de@x)))))) (set! G2e25@make-variable-transformer (lambda (G32e2@x) (if (procedure? G32e2@x) (cons 'macro! G32e2@x) (assertion-violation 'make-variable-transformer '"not a procedure" G32e2@x)))) (set! G2e27@variable-transformer? (lambda (G32e4@x) (if (pair? G32e4@x) (if (eq? (car G32e4@x) 'macro!) (begin '#f (procedure? (cdr G32e4@x))) '#f) '#f))) (set! G2e29@variable-transformer-procedure (lambda (G32e6@x) (if (G2e27@variable-transformer? G32e6@x) (cdr G32e6@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G32e6@x)))) (set! G2e2b@make-eval-transformer (lambda (G32e8@x) (G2e23@sanitize-binding (eval-core (G299a@G2942@expanded->core G32e8@x)) G32e8@x))) (set! G2faf@parse-define (lambda (G32ea@x) ((lambda (G32ec@t) ((lambda (G32ee@ls/false) (if (if G32ee@ls/false (begin '#f (apply (lambda (G32f0@id G32f1@fmls G32f2@b G32f3@b*) (G2de4@id? G32f0@id)) G32ee@ls/false)) '#f) (apply (lambda (G32f8@id G32f9@fmls G32fa@b G32fb@b*) (begin (G304f@verify-formals G32f9@fmls G32ea@x) (values G32f8@id (cons 'defun (cons G32f9@fmls (cons G32fa@b G32fb@b*)))))) G32ee@ls/false) ((lambda (G3300@t) ((lambda (G3302@ls/false) (if (if G3302@ls/false (begin '#f (apply (lambda (G3304@id G3305@val) (G2de4@id? G3304@id)) G3302@ls/false)) '#f) (apply (lambda (G3308@id G3309@val) (values G3308@id (cons 'expr G3309@val))) G3302@ls/false) ((lambda (G330c@t) ((lambda (G330e@ls/false) (if (if G330e@ls/false (begin '#f (apply (lambda (G3310@id) (G2de4@id? G3310@id)) G330e@ls/false)) '#f) (apply (lambda (G3312@id) (values G3312@id (cons 'expr (G2fdd@bless '(void))))) G330e@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G330c@t))) (G3027@syntax-dispatch G330c@t '(_ any)))) G3300@t))) (G3027@syntax-dispatch G3300@t '(_ any any)))) G32ec@t))) (G3027@syntax-dispatch G32ec@t '(_ (any . any) any . each-any)))) G32ea@x))) (set! G2fb1@parse-define-syntax (lambda (G3314@x) ((lambda (G3316@t) ((lambda (G3318@ls/false) (if (if G3318@ls/false (begin '#f (apply (lambda (G331a@id G331b@val) (G2de4@id? G331a@id)) G3318@ls/false)) '#f) (apply (lambda (G331e@id G331f@val) (values G331e@id G331f@val)) G3318@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3316@t))) (G3027@syntax-dispatch G3316@t '(_ any any)))) G3314@x))) (set! G2fb3@scheme-stx-hashtable (make-eq-hashtable)) (set! G2fb5@scheme-stx (lambda (G3322@sym) ((lambda (G3324@t) (if G3324@t G3324@t (begin '#f ((lambda (G3326@subst) ((lambda (G3328@stx) ((lambda (G332a@stx) ((lambda () (begin (hashtable-set! G2fb3@scheme-stx-hashtable G3322@sym G332a@stx) G332a@stx)))) ((lambda (G332c@t) (if G332c@t ((lambda (G332e@x) ((lambda (G3330@name G3331@label) (G2dd0@add-subst (G2d77@make-rib (list G3330@name) (list G2d58@top-mark*) (list G3331@label) '#f '#f) G3328@stx)) (car G332e@x) (cdr G332e@x))) G332c@t) G3328@stx)) (assq G3322@sym G3326@subst)))) (G2dae@make-stx G3322@sym G2d58@top-mark* '() '()))) (G2bae@G2a18@library-subst (G2bd2@G2a60@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G2fb3@scheme-stx-hashtable G3322@sym '#f)))) (set! G2fb7@lexical-var car) (set! G2fb9@lexical-mutable? cdr) (set! G2fbb@set-lexical-mutable! set-cdr!) (set! G2fbd@add-lexical (lambda (G3334@lab G3335@lex G3336@r) (cons (cons* G3334@lab 'lexical G3335@lex '#f) G3336@r))) (set! G2fbf@add-lexicals (lambda (G333a@lab* G333b@lex* G333c@r) (if (null? G333a@lab*) G333c@r (G2fbf@add-lexicals (cdr G333a@lab*) (cdr G333b@lex*) (G2fbd@add-lexical (car G333a@lab*) (car G333b@lex*) G333c@r))))) (set! G2fc1@letrec-helper (lambda (G3340@e G3341@r G3342@mr G3343@build) ((lambda (G3348@t) ((lambda (G334a@ls/false) (if G334a@ls/false (apply (lambda (G334c@lhs* G334d@rhs* G334e@b G334f@b*) (if (not (G2dee@valid-bound-ids? G334c@lhs*)) (G2fe1@invalid-fmls-error G3340@e G334c@lhs*) ((lambda (G3354@lex* G3355@lab*) ((lambda (G3358@rib G3359@r) ((lambda (G335c@body G335d@rhs*) (G3343@build '#f G3354@lex* G335d@rhs* G335c@body)) (G3061@chi-internal (G2dd0@add-subst G3358@rib (cons G334e@b G334f@b*)) G3359@r G3342@mr) (G3047@chi-expr* (map (lambda (G3360@x) (G2dd0@add-subst G3358@rib G3360@x)) G334d@rhs*) G3359@r G3342@mr))) (G2d9d@make-full-rib G334c@lhs* G3355@lab*) (G2fbf@add-lexicals G3355@lab* G3354@lex* G3341@r))) (map G2d5c@gen-lexical G334c@lhs*) (map G2d60@gen-label G334c@lhs*)))) G334a@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3348@t))) (G3027@syntax-dispatch G3348@t '(_ #(each (any any)) any . each-any)))) G3340@e))) (set! G2fc3@letrec-transformer (lambda (G3362@e G3363@r G3364@mr) (G2fc1@letrec-helper G3362@e G3363@r G3364@mr G2d41@G2cb4@build-letrec))) (set! G2fc5@letrec*-transformer (lambda (G3368@e G3369@r G336a@mr) (G2fc1@letrec-helper G3368@e G3369@r G336a@mr G2d42@G2cb6@build-letrec*))) (set! G2fc7@fluid-let-syntax-transformer (lambda (G336e@e G336f@r G3370@mr) ((lambda (G3375@lookup) (begin (set! G3375@lookup (lambda (G3388@x) ((lambda (G338a@t) (if G338a@t G338a@t (begin '#f (G311a@syntax-violation '#f '"unbound identifier" G336e@e G3388@x)))) (G2dfe@id->label G3388@x)))) ((lambda (G3376@t) ((lambda (G3378@ls/false) (if G3378@ls/false (apply (lambda (G337a@lhs* G337b@rhs* G337c@b G337d@b*) (if (not (G2dee@valid-bound-ids? G337a@lhs*)) (G2fe1@invalid-fmls-error G336e@e G337a@lhs*) ((lambda (G3382@lab* G3383@rhs*) (G3061@chi-internal (cons G337c@b G337d@b*) (append (map cons G3382@lab* G3383@rhs*) G336f@r) (append (map cons G3382@lab* G3383@rhs*) G3370@mr))) (map G3375@lookup G337a@lhs*) (map (lambda (G3386@x) (G2e2b@make-eval-transformer (G3088@expand-transformer G3386@x G3370@mr))) G337b@rhs*)))) G3378@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3376@t))) (G3027@syntax-dispatch G3376@t '(_ #(each (any any)) any . each-any)))) G336e@e))) '#f))) (set! G2fc9@type-descriptor-transformer (lambda (G338c@e G338d@r G338e@mr) ((lambda (G3392@t) ((lambda (G3394@ls/false) (if (if G3394@ls/false (begin '#f (apply (lambda (G3396@id) (G2de4@id? G3396@id)) G3394@ls/false)) '#f) (apply (lambda (G3398@id) ((lambda (G339a@lab) ((lambda (G339c@b) ((lambda (G339e@type) ((lambda () (begin (if (not G339a@lab) (G2e0a@raise-unbound-error G3398@id) (void)) (if (not (if (eq? G339e@type '$rtd) (begin '#f (not (list? (G2e08@binding-value G339c@b)))) '#f)) (G311a@syntax-violation '#f '"not a record type" G338c@e) (void)) (list 'quote (G2e08@binding-value G339c@b)))))) (G2e06@binding-type G339c@b))) (G2e02@label->binding G339a@lab G338d@r))) (G2dfe@id->label G3398@id))) G3394@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3392@t))) (G3027@syntax-dispatch G3392@t '(_ any)))) G338c@e))) (set! G2fcb@record-type-descriptor-transformer (lambda (G33a0@e G33a1@r G33a2@mr) ((lambda (G33a6@t) ((lambda (G33a8@ls/false) (if (if G33a8@ls/false (begin '#f (apply (lambda (G33aa@id) (G2de4@id? G33aa@id)) G33a8@ls/false)) '#f) (apply (lambda (G33ac@id) ((lambda (G33ae@lab) ((lambda (G33b0@b) ((lambda (G33b2@type) ((lambda () (begin (if (not G33ae@lab) (G2e0a@raise-unbound-error G33ac@id) (void)) (if (not (if (eq? G33b2@type '$rtd) (begin '#f (list? (G2e08@binding-value G33b0@b))) '#f)) (G311a@syntax-violation '#f '"not a record type" G33a0@e) (void)) (G304b@chi-expr (car (G2e08@binding-value G33b0@b)) G33a1@r G33a2@mr))))) (G2e06@binding-type G33b0@b))) (G2e02@label->binding G33ae@lab G33a1@r))) (G2dfe@id->label G33ac@id))) G33a8@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G33a6@t))) (G3027@syntax-dispatch G33a6@t '(_ any)))) G33a0@e))) (set! G2fcd@record-constructor-descriptor-transformer (lambda (G33b4@e G33b5@r G33b6@mr) ((lambda (G33ba@t) ((lambda (G33bc@ls/false) (if (if G33bc@ls/false (begin '#f (apply (lambda (G33be@id) (G2de4@id? G33be@id)) G33bc@ls/false)) '#f) (apply (lambda (G33c0@id) ((lambda (G33c2@lab) ((lambda (G33c4@b) ((lambda (G33c6@type) ((lambda () (begin (if (not G33c2@lab) (G2e0a@raise-unbound-error G33c0@id) (void)) (if (not (if (eq? G33c6@type '$rtd) (begin '#f (list? (G2e08@binding-value G33c4@b))) '#f)) (G311a@syntax-violation '#f '"invalid type" G33b4@e) (void)) (G304b@chi-expr (cadr (G2e08@binding-value G33c4@b)) G33b5@r G33b6@mr))))) (G2e06@binding-type G33c4@b))) (G2e02@label->binding G33c2@lab G33b5@r))) (G2dfe@id->label G33c0@id))) G33bc@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G33ba@t))) (G3027@syntax-dispatch G33ba@t '(_ any)))) G33b4@e))) (set! G2fcf@when-macro (lambda (G33c8@e) ((lambda (G33ca@t) ((lambda (G33cc@ls/false) (if G33cc@ls/false (apply (lambda (G33ce@test G33cf@e G33d0@e*) (G2fdd@bless (list 'if G33ce@test (cons 'begin (cons G33cf@e G33d0@e*))))) G33cc@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G33ca@t))) (G3027@syntax-dispatch G33ca@t '(_ any any . each-any)))) G33c8@e))) (set! G2fd1@unless-macro (lambda (G33d4@e) ((lambda (G33d6@t) ((lambda (G33d8@ls/false) (if G33d8@ls/false (apply (lambda (G33da@test G33db@e G33dc@e*) (G2fdd@bless (list 'if (list 'not G33da@test) (cons 'begin (cons G33db@e G33dc@e*))))) G33d8@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G33d6@t))) (G3027@syntax-dispatch G33d6@t '(_ any any . each-any)))) G33d4@e))) (set! G2fd3@if-transformer (lambda (G33e0@e G33e1@r G33e2@mr) ((lambda (G33e6@t) ((lambda (G33e8@ls/false) (if G33e8@ls/false (apply (lambda (G33ea@e0 G33eb@e1 G33ec@e2) (list 'if (G304b@chi-expr G33ea@e0 G33e1@r G33e2@mr) (G304b@chi-expr G33eb@e1 G33e1@r G33e2@mr) (G304b@chi-expr G33ec@e2 G33e1@r G33e2@mr))) G33e8@ls/false) ((lambda (G33f0@t) ((lambda (G33f2@ls/false) (if G33f2@ls/false (apply (lambda (G33f4@e0 G33f5@e1) (list 'if (G304b@chi-expr G33f4@e0 G33e1@r G33e2@mr) (G304b@chi-expr G33f5@e1 G33e1@r G33e2@mr) (G2d40@G2cb2@build-void))) G33f2@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G33f0@t))) (G3027@syntax-dispatch G33f0@t '(_ any any)))) G33e6@t))) (G3027@syntax-dispatch G33e6@t '(_ any any any)))) G33e0@e))) (set! G2fd5@case-macro (lambda (G33f8@e) ((lambda (G33fb@build-last G33fd@build-one) (begin (set! G33fb@build-last (lambda (G3422@cls) ((lambda (G3424@t) ((lambda (G3426@ls/false) (if G3426@ls/false (apply (lambda (G3428@e G3429@e*) (cons 'begin (cons G3428@e G3429@e*))) G3426@ls/false) ((lambda (G342c@t) ((lambda (G342e@ls/false) (if G342e@ls/false (apply (lambda () (G33fd@build-one G3422@cls '(if #f #f))) G342e@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G342c@t))) (G3027@syntax-dispatch G342c@t '_))) G3424@t))) (G3027@syntax-dispatch G3424@t '(#(scheme-id else) any . each-any)))) G3422@cls))) (set! G33fd@build-one (lambda (G3414@cls G3415@k) ((lambda (G3418@t) ((lambda (G341a@ls/false) (if G341a@ls/false (apply (lambda (G341c@d* G341d@e G341e@e*) (list 'if (list 'memv 't (list 'quote G341c@d*)) (cons 'begin (cons G341d@e G341e@e*)) G3415@k)) G341a@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3418@t))) (G3027@syntax-dispatch G3418@t '(each-any any . each-any)))) G3414@cls))) ((lambda (G33fe@t) ((lambda (G3400@ls/false) (if G3400@ls/false (apply (lambda (G3402@expr) (G2fdd@bless (cons 'let (cons (list (list 't G3402@expr)) '((if #f #f)))))) G3400@ls/false) ((lambda (G3404@t) ((lambda (G3406@ls/false) (if G3406@ls/false (apply (lambda (G3408@expr G3409@cls G340a@cls*) (G2fdd@bless (list 'let (list (list 't G3408@expr)) ((letrec ((G340e@f (lambda (G3410@cls G3411@cls*) (if (null? G3411@cls*) (G33fb@build-last G3410@cls) (G33fd@build-one G3410@cls (G340e@f (car G3411@cls*) (cdr G3411@cls*))))))) G340e@f) G3409@cls G340a@cls*)))) G3406@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3404@t))) (G3027@syntax-dispatch G3404@t '(_ any any . each-any)))) G33fe@t))) (G3027@syntax-dispatch G33fe@t '(_ any)))) G33f8@e))) '#f '#f))) (set! G2fd7@quote-transformer (lambda (G3430@e G3431@r G3432@mr) ((lambda (G3436@t) ((lambda (G3438@ls/false) (if G3438@ls/false (apply (lambda (G343a@datum) (list 'quote (G2dfa@stx->datum G343a@datum))) G3438@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3436@t))) (G3027@syntax-dispatch G3436@t '(_ any)))) G3430@e))) (set! G2fd9@case-lambda-transformer (lambda (G343c@e G343d@r G343e@mr) ((lambda (G3442@t) ((lambda (G3444@ls/false) (if G3444@ls/false (apply (lambda (G3446@fmls* G3447@b* G3448@b**) (call-with-values (lambda () (G3053@chi-lambda-clause* G343c@e G3446@fmls* (map cons G3447@b* G3448@b**) G343d@r G343e@mr)) (lambda (G344e@G344c G344f@G344d) ((lambda (G3452@body* G3453@fmls*) (G2d3d@G2c66@build-case-lambda '#f G3453@fmls* G3452@body*)) G344f@G344d G344e@G344c)))) G3444@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3442@t))) (G3027@syntax-dispatch G3442@t '(_ . #(each (any any . each-any)))))) G343c@e))) (set! G2fdb@lambda-transformer (lambda (G3456@e G3457@r G3458@mr) ((lambda (G345c@t) ((lambda (G345e@ls/false) (if G345e@ls/false (apply (lambda (G3460@fmls G3461@b G3462@b*) (call-with-values (lambda () (G3051@chi-lambda-clause G3456@e G3460@fmls (cons G3461@b G3462@b*) G3457@r G3458@mr)) (lambda (G3468@G3466 G3469@G3467) ((lambda (G346c@body G346d@fmls) (G2d3c@G2c64@build-lambda '#f G346d@fmls G346c@body)) G3469@G3467 G3468@G3466)))) G345e@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G345c@t))) (G3027@syntax-dispatch G345c@t '(_ any any . each-any)))) G3456@e))) (set! G2fdd@bless (lambda (G3470@x) (G2dcc@mkstx ((letrec ((G3472@f (lambda (G3474@x) (if (G2dac@stx? G3474@x) G3474@x (if (pair? G3474@x) (cons (G3472@f (car G3474@x)) (G3472@f (cdr G3474@x))) (if (symbol? G3474@x) (G2fb5@scheme-stx G3474@x) (if (vector? G3474@x) (vector-map G3472@f G3474@x) G3474@x))))))) G3472@f) G3470@x) '() '() '()))) (set! G2fdf@with-syntax-macro (lambda (G3476@e) ((lambda (G3478@t) ((lambda (G347a@ls/false) (if G347a@ls/false (apply (lambda (G347c@pat* G347d@expr* G347e@b G347f@b*) ((lambda (G3484@idn*) (begin (G304f@verify-formals (map car G3484@idn*) G3476@e) ((lambda (G3486@t*) (G2fdd@bless (list 'let (map list G3486@t* G347d@expr*) ((letrec ((G3488@f (lambda (G348a@pat* G348b@t*) (if (null? G348a@pat*) (cons 'begin (cons '#f (cons G347e@b G347f@b*))) (list 'syntax-case (car G348b@t*) '() (list (car G348a@pat*) (G3488@f (cdr G348a@pat*) (cdr G348b@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G348a@pat*)) (car G348b@t*)))))))) G3488@f) G347c@pat* G3486@t*)))) (G3106@generate-temporaries G347d@expr*)))) ((letrec ((G348e@f (lambda (G3490@pat*) (if (null? G3490@pat*) '() (call-with-values (lambda () (G3025@convert-pattern (car G3490@pat*) '())) (lambda (G3494@G3492 G3495@G3493) ((lambda (G3498@idn* G3499@pat) (append G3498@idn* (G348e@f (cdr G3490@pat*)))) G3495@G3493 G3494@G3492))))))) G348e@f) G347c@pat*))) G347a@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3478@t))) (G3027@syntax-dispatch G3478@t '(_ #(each (any any)) any . each-any)))) G3476@e))) (set! G2fe1@invalid-fmls-error (lambda (G349c@stx G349d@fmls) ((lambda (G34a0@t) ((lambda (G34a2@ls/false) (if G34a2@ls/false (apply (lambda (G34a4@id* G34a5@last) ((letrec ((G34a8@f (lambda (G34aa@id*) (if (null? G34aa@id*) (values) (if (not (G2de4@id? (car G34aa@id*))) (G311a@syntax-violation '#f '"not an identifier" G349c@stx (car G34aa@id*)) (begin (G34a8@f (cdr G34aa@id*)) (if (G2df2@bound-id-member? (car G34aa@id*) (cdr G34aa@id*)) (G311a@syntax-violation '#f '"duplicate binding" G349c@stx (car G34aa@id*)) (void)))))))) G34a8@f) (if (G2de4@id? G34a5@last) (cons G34a5@last G34a4@id*) (if (G2dda@syntax-null? G34a5@last) G34a4@id* (G311a@syntax-violation '#f '"not an identifier" G349c@stx G34a5@last))))) G34a2@ls/false) ((lambda (G34ac@t) ((lambda (G34ae@ls/false) (if G34ae@ls/false (apply (lambda () (G311a@syntax-violation '#f '"malformed binding form" G349c@stx G349d@fmls)) G34ae@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G34ac@t))) (G3027@syntax-dispatch G34ac@t '_))) G34a0@t))) (G3027@syntax-dispatch G34a0@t '#(each+ any () any)))) G349d@fmls))) (set! G2fe3@let-macro (lambda (G34b0@stx) ((lambda (G34b2@t) ((lambda (G34b4@ls/false) (if G34b4@ls/false (apply (lambda (G34b6@lhs* G34b7@rhs* G34b8@b G34b9@b*) (if (G2dee@valid-bound-ids? G34b6@lhs*) (G2fdd@bless (cons (cons 'lambda (cons G34b6@lhs* (cons G34b8@b G34b9@b*))) G34b7@rhs*)) (G2fe1@invalid-fmls-error G34b0@stx G34b6@lhs*))) G34b4@ls/false) ((lambda (G34be@t) ((lambda (G34c0@ls/false) (if (if G34c0@ls/false (begin '#f (apply (lambda (G34c2@f G34c3@lhs* G34c4@rhs* G34c5@b G34c6@b*) (G2de4@id? G34c2@f)) G34c0@ls/false)) '#f) (apply (lambda (G34cc@f G34cd@lhs* G34ce@rhs* G34cf@b G34d0@b*) (if (G2dee@valid-bound-ids? G34cd@lhs*) (G2fdd@bless (cons (list 'letrec (list (list G34cc@f (cons 'lambda (cons G34cd@lhs* (cons G34cf@b G34d0@b*))))) G34cc@f) G34ce@rhs*)) (G2fe1@invalid-fmls-error G34b0@stx G34cd@lhs*))) G34c0@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G34be@t))) (G3027@syntax-dispatch G34be@t '(_ any #(each (any any)) any . each-any)))) G34b2@t))) (G3027@syntax-dispatch G34b2@t '(_ #(each (any any)) any . each-any)))) G34b0@stx))) (set! G2fe5@let-values-macro (lambda (G34d6@stx) ((lambda (G34d9@rename G34db@rename*) (begin (set! G34d9@rename (lambda (G353b@x G353c@old* G353d@new*) (begin (if (not (G2de4@id? G353b@x)) (G311a@syntax-violation '#f '"not an indentifier" G34d6@stx G353b@x) (void)) (if (G2df2@bound-id-member? G353b@x G353c@old*) (G311a@syntax-violation '#f '"duplicate binding" G34d6@stx G353b@x) (void)) ((lambda (G3541@y) (values G3541@y (cons G353b@x G353c@old*) (cons G3541@y G353d@new*))) (gensym (G3120@syntax->datum G353b@x)))))) (set! G34db@rename* (lambda (G3529@x* G352a@old* G352b@new*) (if (null? G3529@x*) (values '() G352a@old* G352b@new*) (call-with-values (lambda () (G34d9@rename (car G3529@x*) G352a@old* G352b@new*)) (lambda (G352f@x G3530@old* G3531@new*) (call-with-values (lambda () (G34db@rename* (cdr G3529@x*) G3530@old* G3531@new*)) (lambda (G3535@x* G3536@old* G3537@new*) (values (cons G352f@x G3535@x*) G3536@old* G3537@new*)))))))) ((lambda (G34dc@t) ((lambda (G34de@ls/false) (if G34de@ls/false (apply (lambda (G34e0@b G34e1@b*) (cons* (G2fdd@bless 'let) '() G34e0@b G34e1@b*)) G34de@ls/false) ((lambda (G34e4@t) ((lambda (G34e6@ls/false) (if G34e6@ls/false (apply (lambda (G34e8@lhs* G34e9@rhs* G34ea@b G34eb@b*) (G2fdd@bless ((letrec ((G34f0@f (lambda (G34f2@lhs* G34f3@rhs* G34f4@old* G34f5@new*) (if (null? G34f2@lhs*) (cons 'let (cons (map list G34f4@old* G34f5@new*) (cons G34ea@b G34eb@b*))) ((lambda (G34fa@t) ((lambda (G34fc@ls/false) (if G34fc@ls/false (apply (lambda (G34fe@x*) (call-with-values (lambda () (G34db@rename* G34fe@x* G34f4@old* G34f5@new*)) (lambda (G3503@G3500 G3504@G3501 G3505@G3502) ((lambda (G3509@new* G350a@old* G350b@y*) (list 'call-with-values (list 'lambda '() (car G34f3@rhs*)) (list 'lambda G350b@y* (G34f0@f (cdr G34f2@lhs*) (cdr G34f3@rhs*) G350a@old* G3509@new*)))) G3505@G3502 G3504@G3501 G3503@G3500)))) G34fc@ls/false) ((lambda (G350f@t) ((lambda (G3511@ls/false) (if G3511@ls/false (apply (lambda (G3513@x* G3514@x) (call-with-values (lambda () (G34d9@rename G3514@x G34f4@old* G34f5@new*)) (lambda (G3517@y G3518@old* G3519@new*) (call-with-values (lambda () (G34db@rename* G3513@x* G3518@old* G3519@new*)) (lambda (G351d@y* G351e@old* G351f@new*) (list 'call-with-values (list 'lambda '() (car G34f3@rhs*)) (list 'lambda (append G351d@y* G3517@y) (G34f0@f (cdr G34f2@lhs*) (cdr G34f3@rhs*) G351e@old* G351f@new*)))))))) G3511@ls/false) ((lambda (G3523@t) ((lambda (G3525@ls/false) (if G3525@ls/false (apply (lambda (G3527@others) (G311a@syntax-violation '#f '"malformed bindings" G34d6@stx G3527@others)) G3525@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3523@t))) (G3027@syntax-dispatch G3523@t 'any))) G350f@t))) (G3027@syntax-dispatch G350f@t '#(each+ any () any)))) G34fa@t))) (G3027@syntax-dispatch G34fa@t 'each-any))) (car G34f2@lhs*)))))) G34f0@f) G34e8@lhs* G34e9@rhs* '() '()))) G34e6@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G34e4@t))) (G3027@syntax-dispatch G34e4@t '(_ #(each (any any)) any . each-any)))) G34dc@t))) (G3027@syntax-dispatch G34dc@t '(_ () any . each-any)))) G34d6@stx))) '#f '#f))) (set! G2fe7@let*-values-macro (lambda (G3543@stx) ((lambda (G3546@check) (begin (set! G3546@check (lambda (G3575@x*) (if (not (null? G3575@x*)) ((lambda (G3577@x) (begin (if (not (G2de4@id? G3577@x)) (G311a@syntax-violation '#f '"not an identifier" G3543@stx G3577@x) (void)) (G3546@check (cdr G3575@x*)) (if (G2df2@bound-id-member? G3577@x (cdr G3575@x*)) (G311a@syntax-violation '#f '"duplicate identifier" G3543@stx G3577@x) (void)))) (car G3575@x*)) (void)))) ((lambda (G3547@t) ((lambda (G3549@ls/false) (if G3549@ls/false (apply (lambda (G354b@b G354c@b*) (cons* (G2fdd@bless 'let) '() G354b@b G354c@b*)) G3549@ls/false) ((lambda (G354f@t) ((lambda (G3551@ls/false) (if G3551@ls/false (apply (lambda (G3553@lhs* G3554@rhs* G3555@b G3556@b*) (G2fdd@bless ((letrec ((G355b@f (lambda (G355d@lhs* G355e@rhs*) (if (null? G355d@lhs*) (cons 'begin (cons G3555@b G3556@b*)) ((lambda (G3561@t) ((lambda (G3563@ls/false) (if G3563@ls/false (apply (lambda (G3565@x*) (begin (G3546@check G3565@x*) (list 'call-with-values (list 'lambda '() (car G355e@rhs*)) (list 'lambda G3565@x* (G355b@f (cdr G355d@lhs*) (cdr G355e@rhs*)))))) G3563@ls/false) ((lambda (G3567@t) ((lambda (G3569@ls/false) (if G3569@ls/false (apply (lambda (G356b@x* G356c@x) (begin (G3546@check (cons G356c@x G356b@x*)) (list 'call-with-values (list 'lambda '() (car G355e@rhs*)) (list 'lambda (append G356b@x* G356c@x) (G355b@f (cdr G355d@lhs*) (cdr G355e@rhs*)))))) G3569@ls/false) ((lambda (G356f@t) ((lambda (G3571@ls/false) (if G3571@ls/false (apply (lambda (G3573@others) (G311a@syntax-violation '#f '"malformed bindings" G3543@stx G3573@others)) G3571@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G356f@t))) (G3027@syntax-dispatch G356f@t 'any))) G3567@t))) (G3027@syntax-dispatch G3567@t '#(each+ any () any)))) G3561@t))) (G3027@syntax-dispatch G3561@t 'each-any))) (car G355d@lhs*)))))) G355b@f) G3553@lhs* G3554@rhs*))) G3551@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G354f@t))) (G3027@syntax-dispatch G354f@t '(_ #(each (any any)) any . each-any)))) G3547@t))) (G3027@syntax-dispatch G3547@t '(_ () any . each-any)))) G3543@stx))) '#f))) (set! G2fe9@trace-lambda-macro (lambda (G3579@stx) ((lambda (G357b@t) ((lambda (G357d@ls/false) (if G357d@ls/false (apply (lambda (G357f@who G3580@fmls G3581@b G3582@b*) (if (G2dee@valid-bound-ids? G3580@fmls) (G2fdd@bless (list 'make-traced-procedure (list 'quote G357f@who) (cons 'lambda (cons G3580@fmls (cons G3581@b G3582@b*))))) (G2fe1@invalid-fmls-error G3579@stx G3580@fmls))) G357d@ls/false) ((lambda (G3587@t) ((lambda (G3589@ls/false) (if G3589@ls/false (apply (lambda (G358b@who G358c@fmls G358d@last G358e@b G358f@b*) (if (G2dee@valid-bound-ids? (cons G358d@last G358c@fmls)) (G2fdd@bless (list 'make-traced-procedure (list 'quote G358b@who) (cons 'lambda (cons (append G358c@fmls G358d@last) (cons G358e@b G358f@b*))))) (G2fe1@invalid-fmls-error G3579@stx (append G358c@fmls G358d@last)))) G3589@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3587@t))) (G3027@syntax-dispatch G3587@t '(_ any #(each+ any () any) any . each-any)))) G357b@t))) (G3027@syntax-dispatch G357b@t '(_ any each-any any . each-any)))) G3579@stx))) (set! G2feb@trace-define-macro (lambda (G3595@stx) ((lambda (G3597@t) ((lambda (G3599@ls/false) (if G3599@ls/false (apply (lambda (G359b@who G359c@fmls G359d@b G359e@b*) (if (G2dee@valid-bound-ids? G359c@fmls) (G2fdd@bless (list 'define G359b@who (list 'make-traced-procedure (list 'quote G359b@who) (cons 'lambda (cons G359c@fmls (cons G359d@b G359e@b*)))))) (G2fe1@invalid-fmls-error G3595@stx G359c@fmls))) G3599@ls/false) ((lambda (G35a3@t) ((lambda (G35a5@ls/false) (if G35a5@ls/false (apply (lambda (G35a7@who G35a8@fmls G35a9@last G35aa@b G35ab@b*) (if (G2dee@valid-bound-ids? (cons G35a9@last G35a8@fmls)) (G2fdd@bless (list 'define G35a7@who (list 'make-traced-procedure (list 'quote G35a7@who) (cons 'lambda (cons (append G35a8@fmls G35a9@last) (cons G35aa@b G35ab@b*)))))) (G2fe1@invalid-fmls-error G3595@stx (append G35a8@fmls G35a9@last)))) G35a5@ls/false) ((lambda (G35b1@t) ((lambda (G35b3@ls/false) (if G35b3@ls/false (apply (lambda (G35b5@who G35b6@expr) (if (G2de4@id? G35b5@who) (G2fdd@bless (list 'define G35b5@who (list 'let (list (list 'v G35b6@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G35b5@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G311a@syntax-violation '#f '"invalid name" G3595@stx))) G35b3@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G35b1@t))) (G3027@syntax-dispatch G35b1@t '(_ any any)))) G35a3@t))) (G3027@syntax-dispatch G35a3@t '(_ (any . #(each+ any () any)) any . each-any)))) G3597@t))) (G3027@syntax-dispatch G3597@t '(_ (any . each-any) any . each-any)))) G3595@stx))) (set! G2fed@trace-define-syntax-macro (lambda (G35b9@stx) ((lambda (G35bb@t) ((lambda (G35bd@ls/false) (if G35bd@ls/false (apply (lambda (G35bf@who G35c0@expr) (if (G2de4@id? G35bf@who) (G2fdd@bless (list 'define-syntax G35bf@who (list 'make-traced-macro (list 'quote G35bf@who) G35c0@expr))) (G311a@syntax-violation '#f '"invalid name" G35b9@stx))) G35bd@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G35bb@t))) (G3027@syntax-dispatch G35bb@t '(_ any any)))) G35b9@stx))) (set! G2fef@trace-let/rec-syntax (lambda (G35c3@who) (lambda (G35c5@stx) ((lambda (G35c7@t) ((lambda (G35c9@ls/false) (if G35c9@ls/false (apply (lambda (G35cb@lhs* G35cc@rhs* G35cd@b G35ce@b*) (if (G2dee@valid-bound-ids? G35cb@lhs*) ((lambda (G35d3@rhs*) (G2fdd@bless (cons G35c3@who (cons (map list G35cb@lhs* G35d3@rhs*) (cons G35cd@b G35ce@b*))))) (map (lambda (G35d5@lhs G35d6@rhs) (list 'make-traced-macro (list 'quote G35d5@lhs) G35d6@rhs)) G35cb@lhs* G35cc@rhs*)) (G2fe1@invalid-fmls-error G35c5@stx G35cb@lhs*))) G35c9@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G35c7@t))) (G3027@syntax-dispatch G35c7@t '(_ #(each (any any)) any . each-any)))) G35c5@stx)))) (set! G2ff1@trace-let-syntax-macro (G2fef@trace-let/rec-syntax 'let-syntax)) (set! G2ff3@trace-letrec-syntax-macro (G2fef@trace-let/rec-syntax 'letrec-syntax)) (set! G2ff5@guard-macro (lambda (G35d9@x) ((lambda (G35dc@gen-clauses) (begin (set! G35dc@gen-clauses (lambda (G35f3@con G35f4@outerk G35f5@clause*) ((lambda (G35fa@f G35fc@f*) (begin (set! G35fa@f (lambda (G362d@x G362e@k) ((lambda (G3631@t) ((lambda (G3633@ls/false) (if G3633@ls/false (apply (lambda (G3635@e G3636@p) ((lambda (G3639@t) (list 'let (list (list G3639@t G3635@e)) (list 'if G3639@t (list G3636@p G3639@t) G362e@k))) (gensym))) G3633@ls/false) ((lambda (G363b@t) ((lambda (G363d@ls/false) (if G363d@ls/false (apply (lambda (G363f@e) ((lambda (G3641@t) (list 'let (list (list G3641@t G363f@e)) (list 'if G3641@t G3641@t G362e@k))) (gensym))) G363d@ls/false) ((lambda (G3643@t) ((lambda (G3645@ls/false) (if G3645@ls/false (apply (lambda (G3647@e G3648@v G3649@v*) (list 'if G3647@e (cons 'begin (cons G3648@v G3649@v*)) G362e@k)) G3645@ls/false) ((lambda (G364d@t) ((lambda (G364f@ls/false) (if G364f@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid guard clause" G362d@x)) G364f@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G364d@t))) (G3027@syntax-dispatch G364d@t '_))) G3643@t))) (G3027@syntax-dispatch G3643@t '(any any . each-any)))) G363b@t))) (G3027@syntax-dispatch G363b@t '(any)))) G3631@t))) (G3027@syntax-dispatch G3631@t '(any #(scheme-id =>) any)))) G362d@x))) (set! G35fc@f* (lambda (G3607@x*) ((lambda (G3609@t) ((lambda (G360b@ls/false) (if G360b@ls/false (apply (lambda () (values (list 'raise G35f3@con) '#t)) G360b@ls/false) ((lambda (G360d@t) ((lambda (G360f@ls/false) (if G360f@ls/false (apply (lambda (G3611@e G3612@e*) (values (cons 'begin (cons G3611@e G3612@e*)) '#f)) G360f@ls/false) ((lambda (G3615@t) ((lambda (G3617@ls/false) (if G3617@ls/false (apply (lambda (G3619@cls G361a@cls*) (call-with-values (lambda () (G35fc@f* G361a@cls*)) (lambda (G361f@G361d G3620@G361e) ((lambda (G3623@g G3624@e) (values (G35fa@f G3619@cls G3624@e) G3623@g)) G3620@G361e G361f@G361d)))) G3617@ls/false) ((lambda (G3627@t) ((lambda (G3629@ls/false) (if G3629@ls/false (apply (lambda (G362b@others) (G311a@syntax-violation '#f '"invalid guard clause" G362b@others)) G3629@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3627@t))) (G3027@syntax-dispatch G3627@t 'any))) G3615@t))) (G3027@syntax-dispatch G3615@t '(any . any)))) G360d@t))) (G3027@syntax-dispatch G360d@t '((#(scheme-id else) any . each-any))))) G3609@t))) (G3027@syntax-dispatch G3609@t '()))) G3607@x*))) (call-with-values (lambda () (G35fc@f* G35f5@clause*)) (lambda (G35ff@G35fd G3600@G35fe) ((lambda (G3603@raisek G3604@code) (if G3603@raisek (list G35f4@outerk G3604@code) G3604@code)) G3600@G35fe G35ff@G35fd))))) '#f '#f))) ((lambda (G35dd@t) ((lambda (G35df@ls/false) (if (if G35df@ls/false (begin '#f (apply (lambda (G35e1@con G35e2@clause* G35e3@b G35e4@b*) (G2de4@id? G35e1@con)) G35df@ls/false)) '#f) (apply (lambda (G35e9@con G35ea@clause* G35eb@b G35ec@b*) ((lambda (G35f1@outerk) (G2fdd@bless (list 'call/cc (list 'lambda (list G35f1@outerk) (list 'with-exception-handler (list 'lambda (list G35e9@con) (G35dc@gen-clauses G35e9@con G35f1@outerk G35ea@clause*)) (cons 'lambda (cons '() (cons '#f (cons G35eb@b G35ec@b*))))))))) (gensym))) G35df@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G35dd@t))) (G3027@syntax-dispatch G35dd@t '(_ (any . each-any) any . each-any)))) G35d9@x))) '#f))) (set! G2ff7@define-enumeration-macro (lambda (G3651@stx) ((lambda (G3654@set? G3656@remove-dups) (begin (set! G3654@set? (lambda (G366d@x) ((lambda (G366f@t) (if G366f@t G366f@t (begin '#f (if (not (memq (car G366d@x) (cdr G366d@x))) (begin '#f (G3654@set? (cdr G366d@x))) '#f)))) (null? G366d@x)))) (set! G3656@remove-dups (lambda (G366b@ls) (if (null? G366b@ls) '() (cons (car G366b@ls) (G3656@remove-dups (remq (car G366b@ls) (cdr G366b@ls))))))) ((lambda (G3657@t) ((lambda (G3659@ls/false) (if (if G3659@ls/false (begin '#f (apply (lambda (G365b@name G365c@id* G365d@maker) (if (G2de4@id? G365b@name) (if (G2de4@id? G365d@maker) (begin '#f (for-all G2de4@id? G365c@id*)) '#f) '#f)) G3659@ls/false)) '#f) (apply (lambda (G3661@name G3662@id* G3663@maker) ((lambda (G3667@name* G3668@mk) (G2fdd@bless (list 'begin (list 'define G3668@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3667@name*)))) (list 'define-syntax G3661@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3667@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3661@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3663@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3663@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3667@name*)) (cons 'syntax-violation (cons (list 'quote G3663@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3668@mk '('(n* ...)))))))))))) (G3656@remove-dups (G3120@syntax->datum G3662@id*)) (gensym))) G3659@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3657@t))) (G3027@syntax-dispatch G3657@t '(_ any each-any any)))) G3651@stx))) '#f '#f))) (set! G2ff9@time-macro (lambda (G3671@stx) ((lambda (G3673@t) ((lambda (G3675@ls/false) (if G3675@ls/false (apply (lambda (G3677@expr) ((lambda (G3679@str) (G2fdd@bless (list 'time-it G3679@str (list 'lambda '() G3677@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G367d@G367b G367e@G367c) ((lambda (G3681@e G3682@p) (begin (write (G3120@syntax->datum G3677@expr) G3682@p) (G3681@e))) G367e@G367c G367d@G367b))))) G3675@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3673@t))) (G3027@syntax-dispatch G3673@t '(_ any)))) G3671@stx))) (set! G2ffb@delay-macro (lambda (G3685@stx) ((lambda (G3687@t) ((lambda (G3689@ls/false) (if G3689@ls/false (apply (lambda (G368b@expr) (G2fdd@bless (list 'make-promise (list 'lambda '() G368b@expr)))) G3689@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3687@t))) (G3027@syntax-dispatch G3687@t '(_ any)))) G3685@stx))) (set! G2ffd@assert-macro (lambda (G368d@stx) ((lambda (G368f@t) ((lambda (G3691@ls/false) (if G3691@ls/false (apply (lambda (G3693@expr) ((lambda (G3695@pos) (G2fdd@bless (list 'unless G3693@expr (list 'assertion-error (list 'quote G3693@expr) (list 'quote G3695@pos))))) ((lambda (G3697@t) (if G3697@t G3697@t (begin '#f (G3110@expression-position G3693@expr)))) (G3110@expression-position G368d@stx)))) G3691@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G368f@t))) (G3027@syntax-dispatch G368f@t '(_ any)))) G368d@stx))) (set! G2fff@endianness-macro (lambda (G3699@stx) ((lambda (G369b@t) ((lambda (G369d@ls/false) (if G369d@ls/false (apply (lambda (G369f@e) ((lambda (G36a1@t) (if (memv G36a1@t '(little)) (G2fdd@bless ''little) (if (memv G36a1@t '(big)) (G2fdd@bless ''big) (G311a@syntax-violation '#f '"endianness must be big or little" G3699@stx)))) (G3120@syntax->datum G369f@e))) G369d@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G369b@t))) (G3027@syntax-dispatch G369b@t '(_ any)))) G3699@stx))) (set! G3001@identifier-syntax-macro (lambda (G36a3@stx) ((lambda (G36a5@t) ((lambda (G36a7@ls/false) (if G36a7@ls/false (apply (lambda (G36a9@expr) (G2fdd@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G36a9@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G36a9@expr) '((syntax (e* ...)))))))))) G36a7@ls/false) ((lambda (G36ab@t) ((lambda (G36ad@ls/false) (if (if G36ad@ls/false (begin '#f (apply (lambda (G36af@id1 G36b0@expr1 G36b1@id2 G36b2@expr2 G36b3@expr3) (if (G2de4@id? G36af@id1) (if (G2de4@id? G36b1@id2) (begin '#f (G2de4@id? G36b2@expr2)) '#f) '#f)) G36ad@ls/false)) '#f) (apply (lambda (G36b9@id1 G36ba@expr1 G36bb@id2 G36bc@expr2 G36bd@expr3) (G2fdd@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G36ba@expr1)) (list (list 'set! 'id G36bc@expr2) (list 'syntax G36bd@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G36ba@expr1 '(e* ...))))))))) G36ad@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G36ab@t))) (G3027@syntax-dispatch G36ab@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G36a5@t))) (G3027@syntax-dispatch G36a5@t '(_ any)))) G36a3@stx))) (set! G3003@do-macro (lambda (G36c3@stx) ((lambda (G36c6@bind) (begin (set! G36c6@bind (lambda (G36dd@x) ((lambda (G36df@t) ((lambda (G36e1@ls/false) (if G36e1@ls/false (apply (lambda (G36e3@x G36e4@init) (list G36e3@x G36e4@init G36e3@x)) G36e1@ls/false) ((lambda (G36e7@t) ((lambda (G36e9@ls/false) (if G36e9@ls/false (apply (lambda (G36eb@x G36ec@init G36ed@step) (list G36eb@x G36ec@init G36ed@step)) G36e9@ls/false) ((lambda (G36f1@t) ((lambda (G36f3@ls/false) (if G36f3@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid binding" G36c3@stx)) G36f3@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G36f1@t))) (G3027@syntax-dispatch G36f1@t '_))) G36e7@t))) (G3027@syntax-dispatch G36e7@t '(any any any)))) G36df@t))) (G3027@syntax-dispatch G36df@t '(any any)))) G36dd@x))) ((lambda (G36c7@t) ((lambda (G36c9@ls/false) (if G36c9@ls/false (apply (lambda (G36cb@binding* G36cc@test G36cd@expr* G36ce@command*) ((lambda (G36d3@t) ((lambda (G36d5@ls/false) (if G36d5@ls/false (apply (lambda (G36d7@x* G36d8@init* G36d9@step*) (if (G2dee@valid-bound-ids? G36d7@x*) (G2fdd@bless (list 'letrec (list (list 'loop (list 'lambda G36d7@x* (list 'if G36cc@test (cons 'begin (cons '(if #f #f) G36cd@expr*)) (cons 'begin (append G36ce@command* (list (cons 'loop G36d9@step*)))))))) (cons 'loop G36d8@init*))) (G311a@syntax-violation '#f '"invalid bindings" G36c3@stx))) G36d5@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G36d3@t))) (G3027@syntax-dispatch G36d3@t '#(each (any any any))))) (map G36c6@bind G36cb@binding*))) G36c9@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G36c7@t))) (G3027@syntax-dispatch G36c7@t '(_ each-any (any . each-any) . each-any)))) G36c3@stx))) '#f))) (set! G3005@let*-macro (lambda (G36f5@stx) ((lambda (G36f7@t) ((lambda (G36f9@ls/false) (if (if G36f9@ls/false (begin '#f (apply (lambda (G36fb@lhs* G36fc@rhs* G36fd@b G36fe@b*) (for-all G2de4@id? G36fb@lhs*)) G36f9@ls/false)) '#f) (apply (lambda (G3703@lhs* G3704@rhs* G3705@b G3706@b*) (G2fdd@bless ((letrec ((G370b@f (lambda (G370d@x*) (if (null? G370d@x*) (cons 'let (cons '() (cons G3705@b G3706@b*))) (list 'let (list (car G370d@x*)) (G370b@f (cdr G370d@x*))))))) G370b@f) (map list G3703@lhs* G3704@rhs*)))) G36f9@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G36f7@t))) (G3027@syntax-dispatch G36f7@t '(_ #(each (any any)) any . each-any)))) G36f5@stx))) (set! G3007@or-macro (lambda (G370f@stx) ((lambda (G3711@t) ((lambda (G3713@ls/false) (if G3713@ls/false (apply (lambda () '#f) G3713@ls/false) ((lambda (G3715@t) ((lambda (G3717@ls/false) (if G3717@ls/false (apply (lambda (G3719@e G371a@e*) (G2fdd@bless ((letrec ((G371d@f (lambda (G371f@e G3720@e*) (if (null? G3720@e*) (list 'begin '#f G371f@e) (list 'let (list (list 't G371f@e)) (list 'if 't 't (G371d@f (car G3720@e*) (cdr G3720@e*)))))))) G371d@f) G3719@e G371a@e*))) G3717@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3715@t))) (G3027@syntax-dispatch G3715@t '(_ any . each-any)))) G3711@t))) (G3027@syntax-dispatch G3711@t '(_)))) G370f@stx))) (set! G3009@and-macro (lambda (G3723@stx) ((lambda (G3725@t) ((lambda (G3727@ls/false) (if G3727@ls/false (apply (lambda () '#t) G3727@ls/false) ((lambda (G3729@t) ((lambda (G372b@ls/false) (if G372b@ls/false (apply (lambda (G372d@e G372e@e*) (G2fdd@bless ((letrec ((G3731@f (lambda (G3733@e G3734@e*) (if (null? G3734@e*) (list 'begin '#f G3733@e) (cons 'if (cons G3733@e (cons (G3731@f (car G3734@e*) (cdr G3734@e*)) '(#f)))))))) G3731@f) G372d@e G372e@e*))) G372b@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3729@t))) (G3027@syntax-dispatch G3729@t '(_ any . each-any)))) G3725@t))) (G3027@syntax-dispatch G3725@t '(_)))) G3723@stx))) (set! G300b@cond-macro (lambda (G3737@stx) ((lambda (G3739@t) ((lambda (G373b@ls/false) (if G373b@ls/false (apply (lambda (G373d@cls G373e@cls*) (G2fdd@bless ((letrec ((G3741@f (lambda (G3743@cls G3744@cls*) (if (null? G3744@cls*) ((lambda (G3747@t) ((lambda (G3749@ls/false) (if G3749@ls/false (apply (lambda (G374b@e G374c@e*) (cons 'begin (cons G374b@e G374c@e*))) G3749@ls/false) ((lambda (G374f@t) ((lambda (G3751@ls/false) (if G3751@ls/false (apply (lambda (G3753@e G3754@p) (list 'let (list (list 't G3753@e)) (list 'if 't (cons G3754@p '(t))))) G3751@ls/false) ((lambda (G3757@t) ((lambda (G3759@ls/false) (if G3759@ls/false (apply (lambda (G375b@e) (cons 'or (cons G375b@e '((if #f #f))))) G3759@ls/false) ((lambda (G375d@t) ((lambda (G375f@ls/false) (if G375f@ls/false (apply (lambda (G3761@e G3762@e*) (list 'if G3761@e (cons 'begin G3762@e*))) G375f@ls/false) ((lambda (G3765@t) ((lambda (G3767@ls/false) (if G3767@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid last clause" G3737@stx)) G3767@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3765@t))) (G3027@syntax-dispatch G3765@t '_))) G375d@t))) (G3027@syntax-dispatch G375d@t '(any . each-any)))) G3757@t))) (G3027@syntax-dispatch G3757@t '(any)))) G374f@t))) (G3027@syntax-dispatch G374f@t '(any #(scheme-id =>) any)))) G3747@t))) (G3027@syntax-dispatch G3747@t '(#(scheme-id else) any . each-any)))) G3743@cls) ((lambda (G3769@t) ((lambda (G376b@ls/false) (if G376b@ls/false (apply (lambda (G376d@e G376e@e*) (G311a@syntax-violation '#f '"incorrect position of keyword else" G3737@stx)) G376b@ls/false) ((lambda (G3771@t) ((lambda (G3773@ls/false) (if G3773@ls/false (apply (lambda (G3775@e G3776@p) (list 'let (list (list 't G3775@e)) (list 'if 't (cons G3776@p '(t)) (G3741@f (car G3744@cls*) (cdr G3744@cls*))))) G3773@ls/false) ((lambda (G3779@t) ((lambda (G377b@ls/false) (if G377b@ls/false (apply (lambda (G377d@e) (list 'or G377d@e (G3741@f (car G3744@cls*) (cdr G3744@cls*)))) G377b@ls/false) ((lambda (G377f@t) ((lambda (G3781@ls/false) (if G3781@ls/false (apply (lambda (G3783@e G3784@e*) (list 'if G3783@e (cons 'begin G3784@e*) (G3741@f (car G3744@cls*) (cdr G3744@cls*)))) G3781@ls/false) ((lambda (G3787@t) ((lambda (G3789@ls/false) (if G3789@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid last clause" G3737@stx)) G3789@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3787@t))) (G3027@syntax-dispatch G3787@t '_))) G377f@t))) (G3027@syntax-dispatch G377f@t '(any . each-any)))) G3779@t))) (G3027@syntax-dispatch G3779@t '(any)))) G3771@t))) (G3027@syntax-dispatch G3771@t '(any #(scheme-id =>) any)))) G3769@t))) (G3027@syntax-dispatch G3769@t '(#(scheme-id else) any . each-any)))) G3743@cls))))) G3741@f) G373d@cls G373e@cls*))) G373b@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3739@t))) (G3027@syntax-dispatch G3739@t '(_ any . each-any)))) G3737@stx))) (set! G300d@do-include (lambda (G378b@stx G378c@id G378d@filename) ((lambda (G3791@filename) (begin (if (not (if (string? G3791@filename) (begin '#f (G2de4@id? G378c@id)) '#f)) (G311a@syntax-violation '#f '"invalid syntax" G378b@stx) (void)) (cons (G2fdd@bless 'begin) (with-input-from-file G3791@filename (lambda () ((letrec ((G3793@f (lambda (G3795@ls) ((lambda (G3797@x) (if (eof-object? G3797@x) (reverse G3795@ls) (G3793@f (cons (G2dc2@datum->stx G378c@id G3797@x) G3795@ls)))) (G292c@G2855@read-annotated))))) G3793@f) '())))))) (G2dfa@stx->datum G378d@filename)))) (set! G300f@include-macro (lambda (G3799@e) ((lambda (G379b@t) ((lambda (G379d@ls/false) (if G379d@ls/false (apply (lambda (G379f@id G37a0@filename) (G300d@do-include G3799@e G379f@id G37a0@filename)) G379d@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G379b@t))) (G3027@syntax-dispatch G379b@t '(any any)))) G3799@e))) (set! G3011@include-into-macro (lambda (G37a3@e) ((lambda (G37a5@t) ((lambda (G37a7@ls/false) (if G37a7@ls/false (apply (lambda (G37a9@id G37aa@filename) (G300d@do-include G37a3@e G37a9@id G37aa@filename)) G37a7@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G37a5@t))) (G3027@syntax-dispatch G37a5@t '(_ any any)))) G37a3@e))) (set! G3013@syntax-rules-macro (lambda (G37ad@e) ((lambda (G37af@t) ((lambda (G37b1@ls/false) (if G37b1@ls/false (apply (lambda (G37b3@lits G37b4@pat* G37b5@tmp*) (begin (G302d@verify-literals G37b3@lits G37ad@e) (G2fdd@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G37b3@lits (map (lambda (G37b9@pat G37ba@tmp) ((lambda (G37bd@t) ((lambda (G37bf@ls/false) (if G37bf@ls/false (apply (lambda (G37c1@rest) (list (cons 'g G37c1@rest) (list 'syntax G37ba@tmp))) G37bf@ls/false) ((lambda (G37c3@t) ((lambda (G37c5@ls/false) (if G37c5@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid syntax-rules pattern" G37ad@e G37b9@pat)) G37c5@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G37c3@t))) (G3027@syntax-dispatch G37c3@t '_))) G37bd@t))) (G3027@syntax-dispatch G37bd@t '(_ . any)))) G37b9@pat)) G37b4@pat* G37b5@tmp*)))))))) G37b1@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G37af@t))) (G3027@syntax-dispatch G37af@t '(_ each-any . #(each (any any)))))) G37ad@e))) (set! G3015@quasiquote-macro ((lambda () ((lambda (G37c8@datum G37f1@quasicons* G37f3@quasicons G37f5@quasiappend G37f7@quasivector G37f9@vquasi G37fb@quasi) (begin (set! G37c8@datum (lambda (G38d6@x) (list (G2fb5@scheme-stx 'quote) (G2dcc@mkstx G38d6@x '() '() '())))) (set! G37f1@quasicons* (lambda (G38ce@x G38cf@y) ((letrec ((G38d2@f (lambda (G38d4@x) (if (null? G38d4@x) G38cf@y (G37f3@quasicons (car G38d4@x) (G38d2@f (cdr G38d4@x))))))) G38d2@f) G38ce@x))) (set! G37f3@quasicons (lambda (G38a8@x G38a9@y) ((lambda (G38ac@t) ((lambda (G38ae@ls/false) (if G38ae@ls/false (apply (lambda (G38b0@dy) ((lambda (G38b2@t) ((lambda (G38b4@ls/false) (if G38b4@ls/false (apply (lambda (G38b6@dx) (list (G2fb5@scheme-stx 'quote) (cons G38b6@dx G38b0@dy))) G38b4@ls/false) ((lambda (G38b8@t) ((lambda (G38ba@ls/false) (if G38ba@ls/false (apply (lambda () ((lambda (G38bc@t) ((lambda (G38be@ls/false) (if G38be@ls/false (apply (lambda () (list (G2fb5@scheme-stx 'list) G38a8@x)) G38be@ls/false) ((lambda (G38c0@t) ((lambda (G38c2@ls/false) (if G38c2@ls/false (apply (lambda () (list (G2fb5@scheme-stx 'cons) G38a8@x G38a9@y)) G38c2@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G38c0@t))) (G3027@syntax-dispatch G38c0@t '_))) G38bc@t))) (G3027@syntax-dispatch G38bc@t '()))) G38b0@dy)) G38ba@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G38b8@t))) (G3027@syntax-dispatch G38b8@t '_))) G38b2@t))) (G3027@syntax-dispatch G38b2@t '(#(scheme-id quote) any)))) G38a8@x)) G38ae@ls/false) ((lambda (G38c4@t) ((lambda (G38c6@ls/false) (if G38c6@ls/false (apply (lambda (G38c8@stuff) (cons* (G2fb5@scheme-stx 'list) G38a8@x G38c8@stuff)) G38c6@ls/false) ((lambda (G38ca@t) ((lambda (G38cc@ls/false) (if G38cc@ls/false (apply (lambda () (list (G2fb5@scheme-stx 'cons) G38a8@x G38a9@y)) G38cc@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G38ca@t))) (G3027@syntax-dispatch G38ca@t '_))) G38c4@t))) (G3027@syntax-dispatch G38c4@t '(#(scheme-id list) . each-any)))) G38ac@t))) (G3027@syntax-dispatch G38ac@t '(#(scheme-id quote) any)))) G38a9@y))) (set! G37f5@quasiappend (lambda (G388e@x G388f@y) ((lambda (G3892@ls) (if (null? G3892@ls) (list (G2fb5@scheme-stx 'quote) '()) (if (null? (cdr G3892@ls)) (car G3892@ls) (cons* (G2fb5@scheme-stx 'append) G3892@ls)))) ((letrec ((G3894@f (lambda (G3896@x) (if (null? G3896@x) ((lambda (G3898@t) ((lambda (G389a@ls/false) (if G389a@ls/false (apply (lambda () '()) G389a@ls/false) ((lambda (G389c@t) ((lambda (G389e@ls/false) (if G389e@ls/false (apply (lambda () (list G388f@y)) G389e@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G389c@t))) (G3027@syntax-dispatch G389c@t '_))) G3898@t))) (G3027@syntax-dispatch G3898@t '(#(scheme-id quote) ())))) G388f@y) ((lambda (G38a0@t) ((lambda (G38a2@ls/false) (if G38a2@ls/false (apply (lambda () (G3894@f (cdr G3896@x))) G38a2@ls/false) ((lambda (G38a4@t) ((lambda (G38a6@ls/false) (if G38a6@ls/false (apply (lambda () (cons (car G3896@x) (G3894@f (cdr G3896@x)))) G38a6@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G38a4@t))) (G3027@syntax-dispatch G38a4@t '_))) G38a0@t))) (G3027@syntax-dispatch G38a0@t '(#(scheme-id quote) ())))) (car G3896@x)))))) G3894@f) G388e@x)))) (set! G37f7@quasivector (lambda (G385c@x) ((lambda (G385e@pat-x) ((lambda (G3860@t) ((lambda (G3862@ls/false) (if G3862@ls/false (apply (lambda (G3864@x*) (list (G2fb5@scheme-stx 'quote) (list->vector G3864@x*))) G3862@ls/false) ((lambda (G3866@t) ((lambda (G3868@ls/false) (if G3868@ls/false (apply (lambda () ((letrec ((G386a@f (lambda (G386c@x G386d@k) ((lambda (G3870@t) ((lambda (G3872@ls/false) (if G3872@ls/false (apply (lambda (G3874@x*) (G386d@k (map (lambda (G3876@x) (list (G2fb5@scheme-stx 'quote) G3876@x)) G3874@x*))) G3872@ls/false) ((lambda (G3878@t) ((lambda (G387a@ls/false) (if G387a@ls/false (apply (lambda (G387c@x*) (G386d@k G387c@x*)) G387a@ls/false) ((lambda (G387e@t) ((lambda (G3880@ls/false) (if G3880@ls/false (apply (lambda (G3882@x G3883@y) (G386a@f G3883@y (lambda (G3886@ls) (G386d@k (cons G3882@x G3886@ls))))) G3880@ls/false) ((lambda (G3888@t) ((lambda (G388a@ls/false) (if G388a@ls/false (apply (lambda () (list (G2fb5@scheme-stx 'list->vector) G385e@pat-x)) G388a@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3888@t))) (G3027@syntax-dispatch G3888@t '_))) G387e@t))) (G3027@syntax-dispatch G387e@t '(#(scheme-id cons) any any)))) G3878@t))) (G3027@syntax-dispatch G3878@t '(#(scheme-id list) . each-any)))) G3870@t))) (G3027@syntax-dispatch G3870@t '(#(scheme-id quote) each-any)))) G386c@x)))) G386a@f) G385c@x (lambda (G388c@ls) (cons* (G2fb5@scheme-stx 'vector) G388c@ls)))) G3868@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3866@t))) (G3027@syntax-dispatch G3866@t '_))) G3860@t))) (G3027@syntax-dispatch G3860@t '(#(scheme-id quote) each-any)))) G385e@pat-x)) G385c@x))) (set! G37f9@vquasi (lambda (G383a@p G383b@lev) ((lambda (G383e@t) ((lambda (G3840@ls/false) (if G3840@ls/false (apply (lambda (G3842@p G3843@q) ((lambda (G3846@t) ((lambda (G3848@ls/false) (if G3848@ls/false (apply (lambda (G384a@p) (if (= G383b@lev '0) (G37f1@quasicons* G384a@p (G37f9@vquasi G3843@q G383b@lev)) (G37f3@quasicons (G37f3@quasicons (G37c8@datum 'unquote) (G37fb@quasi G384a@p (- G383b@lev '1))) (G37f9@vquasi G3843@q G383b@lev)))) G3848@ls/false) ((lambda (G384c@t) ((lambda (G384e@ls/false) (if G384e@ls/false (apply (lambda (G3850@p) (if (= G383b@lev '0) (G37f5@quasiappend G3850@p (G37f9@vquasi G3843@q G383b@lev)) (G37f3@quasicons (G37f3@quasicons (G37c8@datum 'unquote-splicing) (G37fb@quasi G3850@p (- G383b@lev '1))) (G37f9@vquasi G3843@q G383b@lev)))) G384e@ls/false) ((lambda (G3852@t) ((lambda (G3854@ls/false) (if G3854@ls/false (apply (lambda (G3856@p) (G37f3@quasicons (G37fb@quasi G3856@p G383b@lev) (G37f9@vquasi G3843@q G383b@lev))) G3854@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3852@t))) (G3027@syntax-dispatch G3852@t 'any))) G384c@t))) (G3027@syntax-dispatch G384c@t '(#(scheme-id unquote-splicing) . each-any)))) G3846@t))) (G3027@syntax-dispatch G3846@t '(#(scheme-id unquote) . each-any)))) G3842@p)) G3840@ls/false) ((lambda (G3858@t) ((lambda (G385a@ls/false) (if G385a@ls/false (apply (lambda () (list (G2fb5@scheme-stx 'quote) '())) G385a@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3858@t))) (G3027@syntax-dispatch G3858@t '()))) G383e@t))) (G3027@syntax-dispatch G383e@t '(any . any)))) G383a@p))) (set! G37fb@quasi (lambda (G3804@p G3805@lev) ((lambda (G3808@t) ((lambda (G380a@ls/false) (if G380a@ls/false (apply (lambda (G380c@p) (if (= G3805@lev '0) G380c@p (G37f3@quasicons (G37c8@datum 'unquote) (G37fb@quasi (list G380c@p) (- G3805@lev '1))))) G380a@ls/false) ((lambda (G380e@t) ((lambda (G3810@ls/false) (if G3810@ls/false (apply (lambda (G3812@p G3813@q) (if (= G3805@lev '0) (G37f1@quasicons* G3812@p (G37fb@quasi G3813@q G3805@lev)) (G37f3@quasicons (G37f3@quasicons (G37c8@datum 'unquote) (G37fb@quasi G3812@p (- G3805@lev '1))) (G37fb@quasi G3813@q G3805@lev)))) G3810@ls/false) ((lambda (G3816@t) ((lambda (G3818@ls/false) (if G3818@ls/false (apply (lambda (G381a@p G381b@q) (if (= G3805@lev '0) (G37f5@quasiappend G381a@p (G37fb@quasi G381b@q G3805@lev)) (G37f3@quasicons (G37f3@quasicons (G37c8@datum 'unquote-splicing) (G37fb@quasi G381a@p (- G3805@lev '1))) (G37fb@quasi G381b@q G3805@lev)))) G3818@ls/false) ((lambda (G381e@t) ((lambda (G3820@ls/false) (if G3820@ls/false (apply (lambda (G3822@p) (G37f3@quasicons (G37c8@datum 'quasiquote) (G37fb@quasi (list G3822@p) (+ G3805@lev '1)))) G3820@ls/false) ((lambda (G3824@t) ((lambda (G3826@ls/false) (if G3826@ls/false (apply (lambda (G3828@p G3829@q) (G37f3@quasicons (G37fb@quasi G3828@p G3805@lev) (G37fb@quasi G3829@q G3805@lev))) G3826@ls/false) ((lambda (G382c@t) ((lambda (G382e@ls/false) (if (if G382e@ls/false (begin '#f (apply (lambda (G3830@x) (not (G2dac@stx? G3830@x))) G382e@ls/false)) '#f) (apply (lambda (G3832@x) (G37f7@quasivector (G37f9@vquasi G3832@x G3805@lev))) G382e@ls/false) ((lambda (G3834@t) ((lambda (G3836@ls/false) (if G3836@ls/false (apply (lambda (G3838@p) (list (G2fb5@scheme-stx 'quote) G3838@p)) G3836@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3834@t))) (G3027@syntax-dispatch G3834@t 'any))) G382c@t))) (G3027@syntax-dispatch G382c@t '#(vector each-any)))) G3824@t))) (G3027@syntax-dispatch G3824@t '(any . any)))) G381e@t))) (G3027@syntax-dispatch G381e@t '(#(scheme-id quasiquote) any)))) G3816@t))) (G3027@syntax-dispatch G3816@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G380e@t))) (G3027@syntax-dispatch G380e@t '((#(scheme-id unquote) . each-any) . any)))) G3808@t))) (G3027@syntax-dispatch G3808@t '(#(scheme-id unquote) any)))) G3804@p))) (lambda (G37fc@x) ((lambda (G37fe@t) ((lambda (G3800@ls/false) (if G3800@ls/false (apply (lambda (G3802@e) (G37fb@quasi G3802@e '0)) G3800@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G37fe@t))) (G3027@syntax-dispatch G37fe@t '(_ any)))) G37fc@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G3017@quasisyntax-macro ((lambda () ((lambda (G38d9@quasi) (begin (set! G38d9@quasi (lambda (G38f1@p G38f2@lev) ((lambda (G38f5@t) ((lambda (G38f7@ls/false) (if G38f7@ls/false (apply (lambda (G38f9@p) (if (= G38f2@lev '0) ((lambda (G38fb@g) (values (list G38fb@g) (list G38f9@p) G38fb@g)) (gensym)) (call-with-values (lambda () (G38d9@quasi G38f9@p (- G38f2@lev '1))) (lambda (G3900@G38fd G3901@G38fe G3902@G38ff) ((lambda (G3906@p G3907@rhs* G3908@lhs*) (values G3908@lhs* G3907@rhs* (list 'unsyntax G3906@p))) G3902@G38ff G3901@G38fe G3900@G38fd))))) G38f7@ls/false) ((lambda (G390c@t) ((lambda (G390e@ls/false) (if (if G390e@ls/false (begin '#f (apply (lambda () (= G38f2@lev '0)) G390e@ls/false)) '#f) (apply (lambda () (G311a@syntax-violation '#f '"incorrect use of unsyntax" G38f1@p)) G390e@ls/false) ((lambda (G3910@t) ((lambda (G3912@ls/false) (if G3912@ls/false (apply (lambda (G3914@p* G3915@q) (call-with-values (lambda () (G38d9@quasi G3915@q G38f2@lev)) (lambda (G391b@G3918 G391c@G3919 G391d@G391a) ((lambda (G3921@q G3922@rhs* G3923@lhs*) (if (= G38f2@lev '0) ((lambda (G3927@g*) (values (append G3927@g* G3923@lhs*) (append G3914@p* G3922@rhs*) (append G3927@g* G3921@q))) (map (lambda (G3929@x) (gensym)) G3914@p*)) (call-with-values (lambda () (G38d9@quasi G3914@p* (- G38f2@lev '1))) (lambda (G392e@G392b G392f@G392c G3930@G392d) ((lambda (G3934@p* G3935@rhs2* G3936@lhs2*) (values (append G3936@lhs2* G3923@lhs*) (append G3935@rhs2* G3922@rhs*) (cons (cons 'unsyntax G3934@p*) G3921@q))) G3930@G392d G392f@G392c G392e@G392b))))) G391d@G391a G391c@G3919 G391b@G3918)))) G3912@ls/false) ((lambda (G393a@t) ((lambda (G393c@ls/false) (if G393c@ls/false (apply (lambda (G393e@p* G393f@q) (call-with-values (lambda () (G38d9@quasi G393f@q G38f2@lev)) (lambda (G3945@G3942 G3946@G3943 G3947@G3944) ((lambda (G394b@q G394c@rhs* G394d@lhs*) (if (= G38f2@lev '0) ((lambda (G3951@g*) (values (append (map (lambda (G3953@g) (cons G3953@g '(...))) G3951@g*) G394d@lhs*) (append G393e@p* G394c@rhs*) (append (apply append (map (lambda (G3955@g) (cons G3955@g '(...))) G3951@g*)) G394b@q))) (map (lambda (G3957@x) (gensym)) G393e@p*)) (call-with-values (lambda () (G38d9@quasi G393e@p* (- G38f2@lev '1))) (lambda (G395c@G3959 G395d@G395a G395e@G395b) ((lambda (G3962@p* G3963@rhs2* G3964@lhs2*) (values (append G3964@lhs2* G394d@lhs*) (append G3963@rhs2* G394c@rhs*) (cons (cons 'unsyntax-splicing G3962@p*) G394b@q))) G395e@G395b G395d@G395a G395c@G3959))))) G3947@G3944 G3946@G3943 G3945@G3942)))) G393c@ls/false) ((lambda (G3968@t) ((lambda (G396a@ls/false) (if (if G396a@ls/false (begin '#f (apply (lambda () (= G38f2@lev '0)) G396a@ls/false)) '#f) (apply (lambda () (G311a@syntax-violation '#f '"incorrect use of unsyntax-splicing" G38f1@p)) G396a@ls/false) ((lambda (G396c@t) ((lambda (G396e@ls/false) (if G396e@ls/false (apply (lambda (G3970@p) (call-with-values (lambda () (G38d9@quasi G3970@p (+ G38f2@lev '1))) (lambda (G3975@G3972 G3976@G3973 G3977@G3974) ((lambda (G397b@p G397c@rhs* G397d@lhs*) (values G397d@lhs* G397c@rhs* (list 'quasisyntax G397b@p))) G3977@G3974 G3976@G3973 G3975@G3972)))) G396e@ls/false) ((lambda (G3981@t) ((lambda (G3983@ls/false) (if G3983@ls/false (apply (lambda (G3985@p G3986@q) (call-with-values (lambda () (G38d9@quasi G3985@p G38f2@lev)) (lambda (G398f@G3989 G3990@G398a G3991@G398b) (call-with-values (lambda () (G38d9@quasi G3986@q G38f2@lev)) (lambda (G3995@G398c G3996@G398d G3997@G398e) ((lambda (G399b@q G399c@rhs2* G399d@lhs2* G399e@p G399f@rhs* G39a0@lhs*) (values (append G399d@lhs2* G39a0@lhs*) (append G399c@rhs2* G399f@rhs*) (cons G399e@p G399b@q))) G3997@G398e G3996@G398d G3995@G398c G3991@G398b G3990@G398a G398f@G3989)))))) G3983@ls/false) ((lambda (G39a7@t) ((lambda (G39a9@ls/false) (if G39a9@ls/false (apply (lambda (G39ab@x*) (call-with-values (lambda () (G38d9@quasi G39ab@x* G38f2@lev)) (lambda (G39b0@G39ad G39b1@G39ae G39b2@G39af) ((lambda (G39b6@x* G39b7@rhs* G39b8@lhs*) (values G39b8@lhs* G39b7@rhs* (list->vector G39b6@x*))) G39b2@G39af G39b1@G39ae G39b0@G39ad)))) G39a9@ls/false) ((lambda (G39bc@t) ((lambda (G39be@ls/false) (if G39be@ls/false (apply (lambda () (values '() '() G38f1@p)) G39be@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G39bc@t))) (G3027@syntax-dispatch G39bc@t '_))) G39a7@t))) (G3027@syntax-dispatch G39a7@t '#(vector each-any)))) G3981@t))) (G3027@syntax-dispatch G3981@t '(any . any)))) G396c@t))) (G3027@syntax-dispatch G396c@t '(#(scheme-id quasisyntax) any)))) G3968@t))) (G3027@syntax-dispatch G3968@t '#(scheme-id unsyntax-splicing)))) G393a@t))) (G3027@syntax-dispatch G393a@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3910@t))) (G3027@syntax-dispatch G3910@t '((#(scheme-id unsyntax) . each-any) . any)))) G390c@t))) (G3027@syntax-dispatch G390c@t '#(scheme-id unsyntax)))) G38f5@t))) (G3027@syntax-dispatch G38f5@t '(#(scheme-id unsyntax) any)))) G38f1@p))) (lambda (G38da@x) ((lambda (G38dc@t) ((lambda (G38de@ls/false) (if G38de@ls/false (apply (lambda (G38e0@e) (call-with-values (lambda () (G38d9@quasi G38e0@e '0)) (lambda (G38e5@G38e2 G38e6@G38e3 G38e7@G38e4) ((lambda (G38eb@v G38ec@rhs* G38ed@lhs*) (G2fdd@bless (list 'syntax-case (cons 'list G38ec@rhs*) '() (list G38ed@lhs* (list 'syntax G38eb@v))))) G38e7@G38e4 G38e6@G38e3 G38e5@G38e2)))) G38de@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G38dc@t))) (G3027@syntax-dispatch G38dc@t '(_ any)))) G38da@x)))) '#f)))) (set! G3019@define-struct-macro (lambda (G39c0@stx) (G311a@syntax-violation '#f '"define-struct not supported" G39c0@stx))) (set! G301b@define-record-type-macro (lambda (G39c2@x) ((lambda (G39c5@id G39c7@get-record-name G39c9@get-record-constructor-name G39cb@get-record-predicate-name G39cd@get-clause G39cf@foo-rtd-code G39d1@parent-rtd-code G39d3@parent-rcd-code G39d5@foo-rcd-code G39d7@get-protocol-code G39d9@get-fields G39db@get-mutator-indices G39dd@get-mutators G39df@get-accessors G39e1@enumerate G39e3@do-define-record G39e5@verify-clauses) (begin (set! G39c5@id (lambda (G3bbc@ctxt . G3bbe@str*) (G311e@datum->syntax G3bbc@ctxt (string->symbol (apply string-append (map (lambda (G3bc0@x) (if (symbol? G3bc0@x) (symbol->string G3bc0@x) (if (string? G3bc0@x) G3bc0@x (assertion-violation 'define-record-type '"BUG")))) G3bbe@str*)))))) (set! G39c7@get-record-name (lambda (G3baa@spec) ((lambda (G3bac@t) ((lambda (G3bae@ls/false) (if G3bae@ls/false (apply (lambda (G3bb0@foo G3bb1@make-foo G3bb2@foo?) G3bb0@foo) G3bae@ls/false) ((lambda (G3bb6@t) ((lambda (G3bb8@ls/false) (if G3bb8@ls/false (apply (lambda (G3bba@foo) G3bba@foo) G3bb8@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3bb6@t))) (G3027@syntax-dispatch G3bb6@t 'any))) G3bac@t))) (G3027@syntax-dispatch G3bac@t '(any any any)))) G3baa@spec))) (set! G39c9@get-record-constructor-name (lambda (G3b96@spec) ((lambda (G3b98@t) ((lambda (G3b9a@ls/false) (if G3b9a@ls/false (apply (lambda (G3b9c@foo G3b9d@make-foo G3b9e@foo?) G3b9d@make-foo) G3b9a@ls/false) ((lambda (G3ba2@t) ((lambda (G3ba4@ls/false) (if (if G3ba4@ls/false (begin '#f (apply (lambda (G3ba6@foo) (G2de4@id? G3ba6@foo)) G3ba4@ls/false)) '#f) (apply (lambda (G3ba8@foo) (G39c5@id G3ba8@foo '"make-" (G2dfa@stx->datum G3ba8@foo))) G3ba4@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3ba2@t))) (G3027@syntax-dispatch G3ba2@t 'any))) G3b98@t))) (G3027@syntax-dispatch G3b98@t '(any any any)))) G3b96@spec))) (set! G39cb@get-record-predicate-name (lambda (G3b82@spec) ((lambda (G3b84@t) ((lambda (G3b86@ls/false) (if G3b86@ls/false (apply (lambda (G3b88@foo G3b89@make-foo G3b8a@foo?) G3b8a@foo?) G3b86@ls/false) ((lambda (G3b8e@t) ((lambda (G3b90@ls/false) (if (if G3b90@ls/false (begin '#f (apply (lambda (G3b92@foo) (G2de4@id? G3b92@foo)) G3b90@ls/false)) '#f) (apply (lambda (G3b94@foo) (G39c5@id G3b94@foo (G2dfa@stx->datum G3b94@foo) '"?")) G3b90@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b8e@t))) (G3027@syntax-dispatch G3b8e@t 'any))) G3b84@t))) (G3027@syntax-dispatch G3b84@t '(any any any)))) G3b82@spec))) (set! G39cd@get-clause (lambda (G3b70@id G3b71@ls) ((lambda (G3b74@t) ((lambda (G3b76@ls/false) (if G3b76@ls/false (apply (lambda () '#f) G3b76@ls/false) ((lambda (G3b78@t) ((lambda (G3b7a@ls/false) (if G3b7a@ls/false (apply (lambda (G3b7c@x G3b7d@rest G3b7e@ls) (if (G2dec@free-id=? (G2fdd@bless G3b70@id) G3b7c@x) (cons G3b7c@x G3b7d@rest) (G39cd@get-clause G3b70@id G3b7e@ls))) G3b7a@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b78@t))) (G3027@syntax-dispatch G3b78@t '((any . any) . any)))) G3b74@t))) (G3027@syntax-dispatch G3b74@t '()))) G3b71@ls))) (set! G39cf@foo-rtd-code (lambda (G3b1e@name G3b1f@clause* G3b20@parent-rtd-code) ((lambda (G3b25@convert-field-spec*) (begin (set! G3b25@convert-field-spec* (lambda (G3b56@ls) (list->vector (map (lambda (G3b58@x) ((lambda (G3b5a@t) ((lambda (G3b5c@ls/false) (if G3b5c@ls/false (apply (lambda (G3b5e@name G3b5f@rest) (list 'mutable G3b5e@name)) G3b5c@ls/false) ((lambda (G3b62@t) ((lambda (G3b64@ls/false) (if G3b64@ls/false (apply (lambda (G3b66@name G3b67@rest) (list 'immutable G3b66@name)) G3b64@ls/false) ((lambda (G3b6a@t) ((lambda (G3b6c@ls/false) (if G3b6c@ls/false (apply (lambda (G3b6e@name) (list 'immutable G3b6e@name)) G3b6c@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b6a@t))) (G3027@syntax-dispatch G3b6a@t 'any))) G3b62@t))) (G3027@syntax-dispatch G3b62@t '(#(scheme-id immutable) any . any)))) G3b5a@t))) (G3027@syntax-dispatch G3b5a@t '(#(scheme-id mutable) any . any)))) G3b58@x)) G3b56@ls)))) ((lambda (G3b26@uid-code G3b27@sealed? G3b28@opaque? G3b29@fields) (G2fdd@bless (list 'make-record-type-descriptor (list 'quote G3b1e@name) G3b20@parent-rtd-code G3b26@uid-code G3b27@sealed? G3b28@opaque? G3b29@fields))) ((lambda (G3b2e@t) ((lambda (G3b30@ls/false) (if G3b30@ls/false (apply (lambda () (list 'quote (gensym))) G3b30@ls/false) ((lambda (G3b32@t) ((lambda (G3b34@ls/false) (if G3b34@ls/false (apply (lambda (G3b36@uid) (list 'quote G3b36@uid)) G3b34@ls/false) ((lambda (G3b38@t) ((lambda (G3b3a@ls/false) (if G3b3a@ls/false (apply (lambda () '#f) G3b3a@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b38@t))) (G3027@syntax-dispatch G3b38@t '_))) G3b32@t))) (G3027@syntax-dispatch G3b32@t '(_ any)))) G3b2e@t))) (G3027@syntax-dispatch G3b2e@t '(_)))) (G39cd@get-clause 'nongenerative G3b1f@clause*)) ((lambda (G3b3c@t) ((lambda (G3b3e@ls/false) (if G3b3e@ls/false (apply (lambda () '#t) G3b3e@ls/false) ((lambda (G3b40@t) ((lambda (G3b42@ls/false) (if G3b42@ls/false (apply (lambda () '#f) G3b42@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b40@t))) (G3027@syntax-dispatch G3b40@t '_))) G3b3c@t))) (G3027@syntax-dispatch G3b3c@t '(_ #(atom #t))))) (G39cd@get-clause 'sealed G3b1f@clause*)) ((lambda (G3b44@t) ((lambda (G3b46@ls/false) (if G3b46@ls/false (apply (lambda () '#t) G3b46@ls/false) ((lambda (G3b48@t) ((lambda (G3b4a@ls/false) (if G3b4a@ls/false (apply (lambda () '#f) G3b4a@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b48@t))) (G3027@syntax-dispatch G3b48@t '_))) G3b44@t))) (G3027@syntax-dispatch G3b44@t '(_ #(atom #t))))) (G39cd@get-clause 'opaque G3b1f@clause*)) ((lambda (G3b4c@t) ((lambda (G3b4e@ls/false) (if G3b4e@ls/false (apply (lambda (G3b50@field-spec*) (list 'quote (G3b25@convert-field-spec* G3b50@field-spec*))) G3b4e@ls/false) ((lambda (G3b52@t) ((lambda (G3b54@ls/false) (if G3b54@ls/false (apply (lambda () ''#()) G3b54@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b52@t))) (G3027@syntax-dispatch G3b52@t '_))) G3b4c@t))) (G3027@syntax-dispatch G3b4c@t '(_ . each-any)))) (G39cd@get-clause 'fields G3b1f@clause*))))) '#f))) (set! G39d1@parent-rtd-code (lambda (G3b06@clause*) ((lambda (G3b08@t) ((lambda (G3b0a@ls/false) (if G3b0a@ls/false (apply (lambda (G3b0c@name) (list 'record-type-descriptor G3b0c@name)) G3b0a@ls/false) ((lambda (G3b0e@t) ((lambda (G3b10@ls/false) (if G3b10@ls/false (apply (lambda () ((lambda (G3b12@t) ((lambda (G3b14@ls/false) (if G3b14@ls/false (apply (lambda (G3b16@rtd G3b17@rcd) G3b16@rtd) G3b14@ls/false) ((lambda (G3b1a@t) ((lambda (G3b1c@ls/false) (if G3b1c@ls/false (apply (lambda () '#f) G3b1c@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b1a@t))) (G3027@syntax-dispatch G3b1a@t '#(atom #f)))) G3b12@t))) (G3027@syntax-dispatch G3b12@t '(_ any any)))) (G39cd@get-clause 'parent-rtd G3b06@clause*))) G3b10@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b0e@t))) (G3027@syntax-dispatch G3b0e@t '#(atom #f)))) G3b08@t))) (G3027@syntax-dispatch G3b08@t '(_ any)))) (G39cd@get-clause 'parent G3b06@clause*)))) (set! G39d3@parent-rcd-code (lambda (G3aee@clause*) ((lambda (G3af0@t) ((lambda (G3af2@ls/false) (if G3af2@ls/false (apply (lambda (G3af4@name) (list 'record-constructor-descriptor G3af4@name)) G3af2@ls/false) ((lambda (G3af6@t) ((lambda (G3af8@ls/false) (if G3af8@ls/false (apply (lambda () ((lambda (G3afa@t) ((lambda (G3afc@ls/false) (if G3afc@ls/false (apply (lambda (G3afe@rtd G3aff@rcd) G3aff@rcd) G3afc@ls/false) ((lambda (G3b02@t) ((lambda (G3b04@ls/false) (if G3b04@ls/false (apply (lambda () '#f) G3b04@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3b02@t))) (G3027@syntax-dispatch G3b02@t '#(atom #f)))) G3afa@t))) (G3027@syntax-dispatch G3afa@t '(_ any any)))) (G39cd@get-clause 'parent-rtd G3aee@clause*))) G3af8@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3af6@t))) (G3027@syntax-dispatch G3af6@t '#(atom #f)))) G3af0@t))) (G3027@syntax-dispatch G3af0@t '(_ any)))) (G39cd@get-clause 'parent G3aee@clause*)))) (set! G39d5@foo-rcd-code (lambda (G3ae6@clause* G3ae7@foo-rtd G3ae8@protocol G3ae9@parent-rcd-code) (list 'make-record-constructor-descriptor G3ae7@foo-rtd G3ae9@parent-rcd-code G3ae8@protocol))) (set! G39d7@get-protocol-code (lambda (G3ada@clause*) ((lambda (G3adc@t) ((lambda (G3ade@ls/false) (if G3ade@ls/false (apply (lambda (G3ae0@expr) G3ae0@expr) G3ade@ls/false) ((lambda (G3ae2@t) ((lambda (G3ae4@ls/false) (if G3ae4@ls/false (apply (lambda () '#f) G3ae4@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3ae2@t))) (G3027@syntax-dispatch G3ae2@t '_))) G3adc@t))) (G3027@syntax-dispatch G3adc@t '(_ any)))) (G39cd@get-clause 'protocol G3ada@clause*)))) (set! G39d9@get-fields (lambda (G3ac8@clause*) ((lambda (G3aca@t) ((lambda (G3acc@ls/false) (if G3acc@ls/false (apply (lambda () '()) G3acc@ls/false) ((lambda (G3ace@t) ((lambda (G3ad0@ls/false) (if G3ad0@ls/false (apply (lambda (G3ad2@f*) G3ad2@f*) G3ad0@ls/false) ((lambda (G3ad4@t) ((lambda (G3ad6@ls/false) (if G3ad6@ls/false (apply (lambda (G3ad8@rest) (G39d9@get-fields G3ad8@rest)) G3ad6@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3ad4@t))) (G3027@syntax-dispatch G3ad4@t '(_ . any)))) G3ace@t))) (G3027@syntax-dispatch G3ace@t '((#(scheme-id fields) . each-any) . _)))) G3aca@t))) (G3027@syntax-dispatch G3aca@t '()))) G3ac8@clause*))) (set! G39db@get-mutator-indices (lambda (G3ab0@fields) ((letrec ((G3ab2@f (lambda (G3ab4@fields G3ab5@i) ((lambda (G3ab8@t) ((lambda (G3aba@ls/false) (if G3aba@ls/false (apply (lambda () '()) G3aba@ls/false) ((lambda (G3abc@t) ((lambda (G3abe@ls/false) (if G3abe@ls/false (apply (lambda (G3ac0@rest) (cons G3ab5@i (G3ab2@f G3ac0@rest (+ G3ab5@i '1)))) G3abe@ls/false) ((lambda (G3ac2@t) ((lambda (G3ac4@ls/false) (if G3ac4@ls/false (apply (lambda (G3ac6@rest) (G3ab2@f G3ac6@rest (+ G3ab5@i '1))) G3ac4@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3ac2@t))) (G3027@syntax-dispatch G3ac2@t '(_ . any)))) G3abc@t))) (G3027@syntax-dispatch G3abc@t '((#(scheme-id mutable) . _) . any)))) G3ab8@t))) (G3027@syntax-dispatch G3ab8@t '()))) G3ab4@fields)))) G3ab2@f) G3ab0@fields '0))) (set! G39dd@get-mutators (lambda (G3a86@foo G3a87@fields) ((lambda (G3a8b@gen-name) (begin (set! G3a8b@gen-name (lambda (G3aae@x) (G311e@datum->syntax G3a86@foo (string->symbol (string-append (symbol->string (G3120@syntax->datum G3a86@foo)) '"-" (symbol->string (G3120@syntax->datum G3aae@x)) '"-set!"))))) ((letrec ((G3a8c@f (lambda (G3a8e@fields) ((lambda (G3a90@t) ((lambda (G3a92@ls/false) (if G3a92@ls/false (apply (lambda () '()) G3a92@ls/false) ((lambda (G3a94@t) ((lambda (G3a96@ls/false) (if G3a96@ls/false (apply (lambda (G3a98@name G3a99@accessor G3a9a@mutator G3a9b@rest) (cons G3a9a@mutator (G3a8c@f G3a9b@rest))) G3a96@ls/false) ((lambda (G3aa0@t) ((lambda (G3aa2@ls/false) (if G3aa2@ls/false (apply (lambda (G3aa4@name G3aa5@rest) (cons (G3a8b@gen-name G3aa4@name) (G3a8c@f G3aa5@rest))) G3aa2@ls/false) ((lambda (G3aa8@t) ((lambda (G3aaa@ls/false) (if G3aaa@ls/false (apply (lambda (G3aac@rest) (G3a8c@f G3aac@rest)) G3aaa@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3aa8@t))) (G3027@syntax-dispatch G3aa8@t '(_ . any)))) G3aa0@t))) (G3027@syntax-dispatch G3aa0@t '((#(scheme-id mutable) any) . any)))) G3a94@t))) (G3027@syntax-dispatch G3a94@t '((#(scheme-id mutable) any any any) . any)))) G3a90@t))) (G3027@syntax-dispatch G3a90@t '()))) G3a8e@fields)))) G3a8c@f) G3a87@fields))) '#f))) (set! G39df@get-accessors (lambda (G3a42@foo G3a43@fields) ((lambda (G3a47@gen-name) (begin (set! G3a47@gen-name (lambda (G3a84@x) (G311e@datum->syntax G3a42@foo (string->symbol (string-append (symbol->string (G3120@syntax->datum G3a42@foo)) '"-" (symbol->string (G3120@syntax->datum G3a84@x))))))) (map (lambda (G3a48@field) ((lambda (G3a4a@t) ((lambda (G3a4c@ls/false) (if (if G3a4c@ls/false (begin '#f (apply (lambda (G3a4e@name G3a4f@accessor G3a50@mutator) (G2de4@id? G3a4f@accessor)) G3a4c@ls/false)) '#f) (apply (lambda (G3a54@name G3a55@accessor G3a56@mutator) G3a55@accessor) G3a4c@ls/false) ((lambda (G3a5a@t) ((lambda (G3a5c@ls/false) (if (if G3a5c@ls/false (begin '#f (apply (lambda (G3a5e@name G3a5f@accessor) (G2de4@id? G3a5f@accessor)) G3a5c@ls/false)) '#f) (apply (lambda (G3a62@name G3a63@accessor) G3a63@accessor) G3a5c@ls/false) ((lambda (G3a66@t) ((lambda (G3a68@ls/false) (if (if G3a68@ls/false (begin '#f (apply (lambda (G3a6a@name) (G2de4@id? G3a6a@name)) G3a68@ls/false)) '#f) (apply (lambda (G3a6c@name) (G3a47@gen-name G3a6c@name)) G3a68@ls/false) ((lambda (G3a6e@t) ((lambda (G3a70@ls/false) (if (if G3a70@ls/false (begin '#f (apply (lambda (G3a72@name) (G2de4@id? G3a72@name)) G3a70@ls/false)) '#f) (apply (lambda (G3a74@name) (G3a47@gen-name G3a74@name)) G3a70@ls/false) ((lambda (G3a76@t) ((lambda (G3a78@ls/false) (if (if G3a78@ls/false (begin '#f (apply (lambda (G3a7a@name) (G2de4@id? G3a7a@name)) G3a78@ls/false)) '#f) (apply (lambda (G3a7c@name) (G3a47@gen-name G3a7c@name)) G3a78@ls/false) ((lambda (G3a7e@t) ((lambda (G3a80@ls/false) (if G3a80@ls/false (apply (lambda (G3a82@others) (G311a@syntax-violation '#f '"invalid field spec" G3a48@field)) G3a80@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3a7e@t))) (G3027@syntax-dispatch G3a7e@t 'any))) G3a76@t))) (G3027@syntax-dispatch G3a76@t 'any))) G3a6e@t))) (G3027@syntax-dispatch G3a6e@t '(#(scheme-id immutable) any)))) G3a66@t))) (G3027@syntax-dispatch G3a66@t '(#(scheme-id mutable) any)))) G3a5a@t))) (G3027@syntax-dispatch G3a5a@t '(#(scheme-id immutable) any any)))) G3a4a@t))) (G3027@syntax-dispatch G3a4a@t '(#(scheme-id mutable) any any any)))) G3a48@field)) G3a43@fields))) '#f))) (set! G39e1@enumerate (lambda (G3a3a@ls) ((letrec ((G3a3c@f (lambda (G3a3e@ls G3a3f@i) (if (null? G3a3e@ls) '() (cons G3a3f@i (G3a3c@f (cdr G3a3e@ls) (+ G3a3f@i '1))))))) G3a3c@f) G3a3a@ls '0))) (set! G39e3@do-define-record (lambda (G3a12@namespec G3a13@clause*) ((lambda (G3a16@foo) ((lambda (G3a18@foo-rtd) ((lambda (G3a1a@foo-rcd) ((lambda (G3a1c@protocol) ((lambda (G3a1e@make-foo) ((lambda (G3a20@fields) ((lambda (G3a22@idx*) ((lambda (G3a24@foo-x*) ((lambda (G3a26@set-foo-x!*) ((lambda (G3a28@set-foo-idx*) ((lambda (G3a2a@foo?) ((lambda (G3a2c@foo-rtd-code) ((lambda (G3a2e@foo-rcd-code) ((lambda (G3a30@protocol-code) ((lambda () (G2fdd@bless (cons 'begin (cons (list 'define G3a18@foo-rtd G3a2c@foo-rtd-code) (cons (list 'define G3a1c@protocol G3a30@protocol-code) (cons (list 'define G3a1a@foo-rcd G3a2e@foo-rcd-code) (cons (list 'define-syntax G3a16@foo (list 'list ''$rtd (list 'syntax G3a18@foo-rtd) (list 'syntax G3a1a@foo-rcd))) (cons (list 'define G3a2a@foo? (list 'record-predicate G3a18@foo-rtd)) (cons (list 'define G3a1e@make-foo (list 'record-constructor G3a1a@foo-rcd)) (append (map (lambda (G3a32@foo-x G3a33@idx) (list 'define G3a32@foo-x (list 'record-accessor G3a18@foo-rtd G3a33@idx))) G3a24@foo-x* G3a22@idx*) (map (lambda (G3a36@set-foo-x! G3a37@idx) (list 'define G3a36@set-foo-x! (list 'record-mutator G3a18@foo-rtd G3a37@idx))) G3a26@set-foo-x!* G3a28@set-foo-idx*))))))))))))) (G39d7@get-protocol-code G3a13@clause*))) (G39d5@foo-rcd-code G3a13@clause* G3a18@foo-rtd G3a1c@protocol (G39d3@parent-rcd-code G3a13@clause*)))) (G39cf@foo-rtd-code G3a16@foo G3a13@clause* (G39d1@parent-rtd-code G3a13@clause*)))) (G39cb@get-record-predicate-name G3a12@namespec))) (G39db@get-mutator-indices G3a20@fields))) (G39dd@get-mutators G3a16@foo G3a20@fields))) (G39df@get-accessors G3a16@foo G3a20@fields))) (G39e1@enumerate G3a20@fields))) (G39d9@get-fields G3a13@clause*))) (G39c9@get-record-constructor-name G3a12@namespec))) (gensym))) (gensym))) (gensym))) (G39c7@get-record-name G3a12@namespec)))) (set! G39e5@verify-clauses (lambda (G39ee@x G39ef@cls*) ((lambda (G39f3@valid-kwds G39f5@free-id-member?) (begin (set! G39f3@valid-kwds (map G2fdd@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G39f5@free-id-member? (lambda (G3a0c@x G3a0d@ls) (if (pair? G3a0d@ls) (begin '#f ((lambda (G3a10@t) (if G3a10@t G3a10@t (begin '#f (G39f5@free-id-member? G3a0c@x (cdr G3a0d@ls))))) (G2dec@free-id=? G3a0c@x (car G3a0d@ls)))) '#f))) ((letrec ((G39f6@f (lambda (G39f8@cls* G39f9@seen*) (if (not (null? G39f8@cls*)) ((lambda (G39fc@t) ((lambda (G39fe@ls/false) (if G39fe@ls/false (apply (lambda (G3a00@kwd G3a01@rest) (if ((lambda (G3a04@t) (if G3a04@t G3a04@t (begin '#f (not (G39f5@free-id-member? G3a00@kwd G39f3@valid-kwds))))) (not (G2de4@id? G3a00@kwd))) (G311a@syntax-violation '#f '"not a valid define-record-type keyword" G3a00@kwd) (if (G2df2@bound-id-member? G3a00@kwd G39f9@seen*) (G311a@syntax-violation '#f '"duplicate use of keyword " G39ee@x G3a00@kwd) (G39f6@f (cdr G39f8@cls*) (cons G3a00@kwd G39f9@seen*))))) G39fe@ls/false) ((lambda (G3a06@t) ((lambda (G3a08@ls/false) (if G3a08@ls/false (apply (lambda (G3a0a@cls) (G311a@syntax-violation '#f '"malformed define-record-type clause" G3a0a@cls)) G3a08@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3a06@t))) (G3027@syntax-dispatch G3a06@t 'any))) G39fc@t))) (G3027@syntax-dispatch G39fc@t '(any . any)))) (car G39f8@cls*)) (void))))) G39f6@f) G39ef@cls* '()))) '#f '#f))) ((lambda (G39e6@t) ((lambda (G39e8@ls/false) (if G39e8@ls/false (apply (lambda (G39ea@namespec G39eb@clause*) (begin (G39e5@verify-clauses G39c2@x G39eb@clause*) (G39e3@do-define-record G39ea@namespec G39eb@clause*))) G39e8@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G39e6@t))) (G3027@syntax-dispatch G39e6@t '(_ any . each-any)))) G39c2@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G301d@define-condition-type-macro (lambda (G3bc2@x) ((lambda (G3bc5@mkname) (begin (set! G3bc5@mkname (lambda (G3bf2@name G3bf3@suffix) (G311e@datum->syntax G3bf2@name (string->symbol (string-append (symbol->string (G3120@syntax->datum G3bf2@name)) G3bf3@suffix))))) ((lambda (G3bc6@t) ((lambda (G3bc8@ls/false) (if (if G3bc8@ls/false (begin '#f (apply (lambda (G3bca@ctxt G3bcb@name G3bcc@super G3bcd@constructor G3bce@predicate G3bcf@field* G3bd0@accessor*) (if (G2de4@id? G3bcb@name) (if (G2de4@id? G3bcc@super) (if (G2de4@id? G3bcd@constructor) (if (G2de4@id? G3bce@predicate) (if (for-all G2de4@id? G3bcf@field*) (begin '#f (for-all G2de4@id? G3bd0@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3bc8@ls/false)) '#f) (apply (lambda (G3bd8@ctxt G3bd9@name G3bda@super G3bdb@constructor G3bdc@predicate G3bdd@field* G3bde@accessor*) ((lambda (G3be6@aux-accessor*) (G2fdd@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3bd9@name G3bdb@constructor (gensym)) (cons (list 'parent G3bda@super) (cons (cons 'fields (map (lambda (G3be8@field G3be9@aux) (list 'immutable G3be8@field G3be9@aux)) G3bdd@field* G3be6@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3bdc@predicate (list 'condition-predicate (list 'record-type-descriptor G3bd9@name))) (map (lambda (G3bec@accessor G3bed@aux) (list 'define G3bec@accessor (list 'condition-accessor (list 'record-type-descriptor G3bd9@name) G3bed@aux))) G3bde@accessor* G3be6@aux-accessor*)))))) (map (lambda (G3bf0@x) (gensym)) G3bde@accessor*))) G3bc8@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3bc6@t))) (G3027@syntax-dispatch G3bc6@t '(any any any any any . #(each (any any)))))) G3bc2@x))) '#f))) (set! G301f@incorrect-usage-macro (lambda (G3bf6@e) (G311a@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3bf6@e))) (set! G3021@parameterize-macro (lambda (G3bf8@e) ((lambda (G3bfa@t) ((lambda (G3bfc@ls/false) (if G3bfc@ls/false (apply (lambda (G3bfe@b G3bff@b*) (G2fdd@bless (cons 'let (cons '() (cons G3bfe@b G3bff@b*))))) G3bfc@ls/false) ((lambda (G3c02@t) ((lambda (G3c04@ls/false) (if G3c04@ls/false (apply (lambda (G3c06@olhs* G3c07@orhs* G3c08@b G3c09@b*) ((lambda (G3c0e@lhs* G3c0f@rhs*) (G2fdd@bless (cons (list 'lambda (append G3c0e@lhs* G3c0f@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c12@lhs G3c13@rhs) (list 'let (list (list 't (list G3c12@lhs))) (list G3c12@lhs G3c13@rhs) (cons 'set! (cons G3c13@rhs '(t))))) G3c0e@lhs* G3c0f@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c08@b G3c09@b*))) '(swap)))))) (append G3c06@olhs* G3c07@orhs*)))) (G3106@generate-temporaries G3c06@olhs*) (G3106@generate-temporaries G3c07@orhs*))) G3c04@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3c02@t))) (G3027@syntax-dispatch G3c02@t '(_ #(each (any any)) any . each-any)))) G3bfa@t))) (G3027@syntax-dispatch G3bfa@t '(_ () any . each-any)))) G3bf8@e))) (set! G3023@foreign-call-transformer (lambda (G3c16@e G3c17@r G3c18@mr) ((lambda (G3c1c@t) ((lambda (G3c1e@ls/false) (if G3c1e@ls/false (apply (lambda (G3c20@name G3c21@arg*) (cons 'foreign-call (cons (G304b@chi-expr G3c20@name G3c17@r G3c18@mr) (G3047@chi-expr* G3c21@arg* G3c17@r G3c18@mr)))) G3c1e@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3c1c@t))) (G3027@syntax-dispatch G3c1c@t '(_ any . each-any)))) G3c16@e))) (set! G3025@convert-pattern (lambda (G3c24@pattern G3c25@keys) ((lambda (G3c29@cvt* G3c2b@cvt) (begin (set! G3c29@cvt* (lambda (G3cba@p* G3cbb@n G3cbc@ids) (if (null? G3cba@p*) (values '() G3cbc@ids) (call-with-values (lambda () (G3c29@cvt* (cdr G3cba@p*) G3cbb@n G3cbc@ids)) (lambda (G3cc2@G3cc0 G3cc3@G3cc1) ((lambda (G3cc6@ids G3cc7@y) (call-with-values (lambda () (G3c2b@cvt (car G3cba@p*) G3cbb@n G3cc6@ids)) (lambda (G3ccc@G3cca G3ccd@G3ccb) ((lambda (G3cd0@ids G3cd1@x) (values (cons G3cd1@x G3cc7@y) G3cd0@ids)) G3ccd@G3ccb G3ccc@G3cca)))) G3cc3@G3cc1 G3cc2@G3cc0)))))) (set! G3c2b@cvt (lambda (G3c2c@p G3c2d@n G3c2e@ids) ((lambda (G3c32@t) ((lambda (G3c34@ls/false) (if (if G3c34@ls/false (begin '#f (apply (lambda (G3c36@id) (G2de4@id? G3c36@id)) G3c34@ls/false)) '#f) (apply (lambda (G3c38@id) (if (G2df2@bound-id-member? G3c2c@p G3c25@keys) (values (vector 'free-id G3c2c@p) G3c2e@ids) (if (G2dec@free-id=? G3c2c@p (G2fb5@scheme-stx '_)) (values '_ G3c2e@ids) (values 'any (cons (cons G3c2c@p G3c2d@n) G3c2e@ids))))) G3c34@ls/false) ((lambda (G3c3a@t) ((lambda (G3c3c@ls/false) (if (if G3c3c@ls/false (begin '#f (apply (lambda (G3c3e@p G3c3f@dots) (G3029@ellipsis? G3c3f@dots)) G3c3c@ls/false)) '#f) (apply (lambda (G3c42@p G3c43@dots) (call-with-values (lambda () (G3c2b@cvt G3c42@p (+ G3c2d@n '1) G3c2e@ids)) (lambda (G3c48@G3c46 G3c49@G3c47) ((lambda (G3c4c@ids G3c4d@p) (values (if (eq? G3c4d@p 'any) 'each-any (vector 'each G3c4d@p)) G3c4c@ids)) G3c49@G3c47 G3c48@G3c46)))) G3c3c@ls/false) ((lambda (G3c50@t) ((lambda (G3c52@ls/false) (if (if G3c52@ls/false (begin '#f (apply (lambda (G3c54@x G3c55@dots G3c56@ys G3c57@z) (G3029@ellipsis? G3c55@dots)) G3c52@ls/false)) '#f) (apply (lambda (G3c5c@x G3c5d@dots G3c5e@ys G3c5f@z) (call-with-values (lambda () (G3c2b@cvt G3c5f@z G3c2d@n G3c2e@ids)) (lambda (G3c66@G3c64 G3c67@G3c65) ((lambda (G3c6a@ids G3c6b@z) (call-with-values (lambda () (G3c29@cvt* G3c5e@ys G3c2d@n G3c6a@ids)) (lambda (G3c70@G3c6e G3c71@G3c6f) ((lambda (G3c74@ids G3c75@ys) (call-with-values (lambda () (G3c2b@cvt G3c5c@x (+ G3c2d@n '1) G3c74@ids)) (lambda (G3c7a@G3c78 G3c7b@G3c79) ((lambda (G3c7e@ids G3c7f@x) (values (vector 'each+ G3c7f@x (reverse G3c75@ys) G3c6b@z) G3c7e@ids)) G3c7b@G3c79 G3c7a@G3c78)))) G3c71@G3c6f G3c70@G3c6e)))) G3c67@G3c65 G3c66@G3c64)))) G3c52@ls/false) ((lambda (G3c82@t) ((lambda (G3c84@ls/false) (if G3c84@ls/false (apply (lambda (G3c86@x G3c87@y) (call-with-values (lambda () (G3c2b@cvt G3c87@y G3c2d@n G3c2e@ids)) (lambda (G3c8c@G3c8a G3c8d@G3c8b) ((lambda (G3c90@ids G3c91@y) (call-with-values (lambda () (G3c2b@cvt G3c86@x G3c2d@n G3c90@ids)) (lambda (G3c96@G3c94 G3c97@G3c95) ((lambda (G3c9a@ids G3c9b@x) (values (cons G3c9b@x G3c91@y) G3c9a@ids)) G3c97@G3c95 G3c96@G3c94)))) G3c8d@G3c8b G3c8c@G3c8a)))) G3c84@ls/false) ((lambda (G3c9e@t) ((lambda (G3ca0@ls/false) (if G3ca0@ls/false (apply (lambda () (values '() G3c2e@ids)) G3ca0@ls/false) ((lambda (G3ca2@t) ((lambda (G3ca4@ls/false) (if (if G3ca4@ls/false (begin '#f (apply (lambda (G3ca6@p) (not (G2dac@stx? G3ca6@p))) G3ca4@ls/false)) '#f) (apply (lambda (G3ca8@p) (call-with-values (lambda () (G3c2b@cvt G3ca8@p G3c2d@n G3c2e@ids)) (lambda (G3cac@G3caa G3cad@G3cab) ((lambda (G3cb0@ids G3cb1@p) (values (vector 'vector G3cb1@p) G3cb0@ids)) G3cad@G3cab G3cac@G3caa)))) G3ca4@ls/false) ((lambda (G3cb4@t) ((lambda (G3cb6@ls/false) (if G3cb6@ls/false (apply (lambda (G3cb8@datum) (values (vector 'atom (G2dfa@stx->datum G3cb8@datum)) G3c2e@ids)) G3cb6@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3cb4@t))) (G3027@syntax-dispatch G3cb4@t 'any))) G3ca2@t))) (G3027@syntax-dispatch G3ca2@t '#(vector each-any)))) G3c9e@t))) (G3027@syntax-dispatch G3c9e@t '()))) G3c82@t))) (G3027@syntax-dispatch G3c82@t '(any . any)))) G3c50@t))) (G3027@syntax-dispatch G3c50@t '(any any . #(each+ any () any))))) G3c3a@t))) (G3027@syntax-dispatch G3c3a@t '(any any)))) G3c32@t))) (G3027@syntax-dispatch G3c32@t 'any))) G3c2c@p))) (G3c2b@cvt G3c24@pattern '0 '()))) '#f '#f))) (set! G3027@syntax-dispatch ((lambda () ((lambda (G3cd5@stx^ G3cd7@match-each G3cd9@match-each+ G3cdb@match-each-any G3cdd@match-empty G3cdf@combine G3ce1@match* G3ce3@match) (begin (set! G3cd5@stx^ (lambda (G3d9e@e G3d9f@m* G3da0@s* G3da1@ae*) (if (if (null? G3d9f@m*) (if (null? G3da0@s*) (begin '#f (null? G3da1@ae*)) '#f) '#f) G3d9e@e (G2dcc@mkstx G3d9e@e G3d9f@m* G3da0@s* G3da1@ae*)))) (set! G3cd7@match-each (lambda (G3d81@e G3d82@p G3d83@m* G3d84@s* G3d85@ae*) (if (pair? G3d81@e) ((lambda (G3d8b@first) (if G3d8b@first (begin '#f ((lambda (G3d8d@rest) (if G3d8d@rest (begin '#f (cons G3d8b@first G3d8d@rest)) '#f)) (G3cd7@match-each (cdr G3d81@e) G3d82@p G3d83@m* G3d84@s* G3d85@ae*))) '#f)) (G3ce3@match (car G3d81@e) G3d82@p G3d83@m* G3d84@s* G3d85@ae* '())) (if (null? G3d81@e) '() (if (G2dac@stx? G3d81@e) (if (not (G2d5a@top-marked? G3d83@m*)) (begin '#f (call-with-values (lambda () (G2dca@join-wraps G3d83@m* G3d84@s* G3d85@ae* G3d81@e)) (lambda (G3d92@G3d8f G3d93@G3d90 G3d94@G3d91) ((lambda (G3d98@ae* G3d99@s* G3d9a@m*) (G3cd7@match-each (G2db0@stx-expr G3d81@e) G3d82@p G3d9a@m* G3d99@s* G3d98@ae*)) G3d94@G3d91 G3d93@G3d90 G3d92@G3d8f)))) '#f) (if (G292e@G2859@annotation? G3d81@e) (G3cd7@match-each (G2930@G285d@annotation-expression G3d81@e) G3d82@p G3d83@m* G3d84@s* G3d85@ae*) '#f)))))) (set! G3cd9@match-each+ (lambda (G3d47@e G3d48@x-pat G3d49@y-pat G3d4a@z-pat G3d4b@m* G3d4c@s* G3d4d@ae* G3d4e@r) ((letrec ((G3d57@f (lambda (G3d59@e G3d5a@m* G3d5b@s* G3d5c@ae*) (if (pair? G3d59@e) (call-with-values (lambda () (G3d57@f (cdr G3d59@e) G3d5a@m* G3d5b@s* G3d5c@ae*)) (lambda (G3d64@G3d61 G3d65@G3d62 G3d66@G3d63) ((lambda (G3d6a@r G3d6b@y-pat G3d6c@xr*) (if G3d6a@r (if (null? G3d6b@y-pat) ((lambda (G3d70@xr) (if G3d70@xr (values (cons G3d70@xr G3d6c@xr*) G3d6b@y-pat G3d6a@r) (values '#f '#f '#f))) (G3ce3@match (car G3d59@e) G3d48@x-pat G3d5a@m* G3d5b@s* G3d5c@ae* '())) (values '() (cdr G3d6b@y-pat) (G3ce3@match (car G3d59@e) (car G3d6b@y-pat) G3d5a@m* G3d5b@s* G3d5c@ae* G3d6a@r))) (values '#f '#f '#f))) G3d66@G3d63 G3d65@G3d62 G3d64@G3d61))) (if (G2dac@stx? G3d59@e) (if (G2d5a@top-marked? G3d5a@m*) (values '() G3d49@y-pat (G3ce3@match G3d59@e G3d4a@z-pat G3d5a@m* G3d5b@s* G3d5c@ae* G3d4e@r)) (call-with-values (lambda () (G2dca@join-wraps G3d5a@m* G3d5b@s* G3d5c@ae* G3d59@e)) (lambda (G3d75@G3d72 G3d76@G3d73 G3d77@G3d74) ((lambda (G3d7b@ae* G3d7c@s* G3d7d@m*) (G3d57@f (G2db0@stx-expr G3d59@e) G3d7d@m* G3d7c@s* G3d7b@ae*)) G3d77@G3d74 G3d76@G3d73 G3d75@G3d72)))) (if (G292e@G2859@annotation? G3d59@e) (G3d57@f (G2930@G285d@annotation-expression G3d59@e) G3d5a@m* G3d5b@s* G3d5c@ae*) (values '() G3d49@y-pat (G3ce3@match G3d59@e G3d4a@z-pat G3d5a@m* G3d5b@s* G3d5c@ae* G3d4e@r)))))))) G3d57@f) G3d47@e G3d4b@m* G3d4c@s* G3d4d@ae*))) (set! G3cdb@match-each-any (lambda (G3d2e@e G3d2f@m* G3d30@s* G3d31@ae*) (if (pair? G3d2e@e) ((lambda (G3d36@l) (if G3d36@l (begin '#f (cons (G3cd5@stx^ (car G3d2e@e) G3d2f@m* G3d30@s* G3d31@ae*) G3d36@l)) '#f)) (G3cdb@match-each-any (cdr G3d2e@e) G3d2f@m* G3d30@s* G3d31@ae*)) (if (null? G3d2e@e) '() (if (G2dac@stx? G3d2e@e) (if (not (G2d5a@top-marked? G3d2f@m*)) (begin '#f (call-with-values (lambda () (G2dca@join-wraps G3d2f@m* G3d30@s* G3d31@ae* G3d2e@e)) (lambda (G3d3b@G3d38 G3d3c@G3d39 G3d3d@G3d3a) ((lambda (G3d41@ae* G3d42@s* G3d43@m*) (G3cdb@match-each-any (G2db0@stx-expr G3d2e@e) G3d43@m* G3d42@s* G3d41@ae*)) G3d3d@G3d3a G3d3c@G3d39 G3d3b@G3d38)))) '#f) (if (G292e@G2859@annotation? G3d2e@e) (G3cdb@match-each-any (G2930@G285d@annotation-expression G3d2e@e) G3d2f@m* G3d30@s* G3d31@ae*) '#f)))))) (set! G3cdd@match-empty (lambda (G3d28@p G3d29@r) (if (null? G3d28@p) G3d29@r (if (eq? G3d28@p '_) G3d29@r (if (eq? G3d28@p 'any) (cons '() G3d29@r) (if (pair? G3d28@p) (G3cdd@match-empty (car G3d28@p) (G3cdd@match-empty (cdr G3d28@p) G3d29@r)) (if (eq? G3d28@p 'each-any) (cons '() G3d29@r) ((lambda (G3d2c@t) (if (memv G3d2c@t '(each)) (G3cdd@match-empty (vector-ref G3d28@p '1) G3d29@r) (if (memv G3d2c@t '(each+)) (G3cdd@match-empty (vector-ref G3d28@p '1) (G3cdd@match-empty (reverse (vector-ref G3d28@p '2)) (G3cdd@match-empty (vector-ref G3d28@p '3) G3d29@r))) (if (memv G3d2c@t '(free-id atom)) G3d29@r (if (memv G3d2c@t '(scheme-id atom)) G3d29@r (if (memv G3d2c@t '(vector)) (G3cdd@match-empty (vector-ref G3d28@p '1) G3d29@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d28@p))))))) (vector-ref G3d28@p '0))))))))) (set! G3cdf@combine (lambda (G3d24@r* G3d25@r) (if (null? (car G3d24@r*)) G3d25@r (cons (map car G3d24@r*) (G3cdf@combine (map cdr G3d24@r*) G3d25@r))))) (set! G3ce1@match* (lambda (G3d03@e G3d04@p G3d05@m* G3d06@s* G3d07@ae* G3d08@r) (if (null? G3d04@p) (if (null? G3d03@e) (begin '#f G3d08@r) '#f) (if (pair? G3d04@p) (if (pair? G3d03@e) (begin '#f (G3ce3@match (car G3d03@e) (car G3d04@p) G3d05@m* G3d06@s* G3d07@ae* (G3ce3@match (cdr G3d03@e) (cdr G3d04@p) G3d05@m* G3d06@s* G3d07@ae* G3d08@r))) '#f) (if (eq? G3d04@p 'each-any) ((lambda (G3d0f@l) (if G3d0f@l (begin '#f (cons G3d0f@l G3d08@r)) '#f)) (G3cdb@match-each-any G3d03@e G3d05@m* G3d06@s* G3d07@ae*)) ((lambda (G3d11@t) (if (memv G3d11@t '(each)) (if (null? G3d03@e) (G3cdd@match-empty (vector-ref G3d04@p '1) G3d08@r) ((lambda (G3d13@r*) (if G3d13@r* (begin '#f (G3cdf@combine G3d13@r* G3d08@r)) '#f)) (G3cd7@match-each G3d03@e (vector-ref G3d04@p '1) G3d05@m* G3d06@s* G3d07@ae*))) (if (memv G3d11@t '(free-id)) (if (symbol? G3d03@e) (if (G2d5a@top-marked? G3d05@m*) (if (G2dec@free-id=? (G3cd5@stx^ G3d03@e G3d05@m* G3d06@s* G3d07@ae*) (vector-ref G3d04@p '1)) (begin '#f G3d08@r) '#f) '#f) '#f) (if (memv G3d11@t '(scheme-id)) (if (symbol? G3d03@e) (if (G2d5a@top-marked? G3d05@m*) (if (G2dec@free-id=? (G3cd5@stx^ G3d03@e G3d05@m* G3d06@s* G3d07@ae*) (G2fb5@scheme-stx (vector-ref G3d04@p '1))) (begin '#f G3d08@r) '#f) '#f) '#f) (if (memv G3d11@t '(each+)) (call-with-values (lambda () (G3cd9@match-each+ G3d03@e (vector-ref G3d04@p '1) (vector-ref G3d04@p '2) (vector-ref G3d04@p '3) G3d05@m* G3d06@s* G3d07@ae* G3d08@r)) (lambda (G3d18@G3d15 G3d19@G3d16 G3d1a@G3d17) ((lambda (G3d1e@r G3d1f@y-pat G3d20@xr*) (if G3d1e@r (if (null? G3d1f@y-pat) (begin '#f (if (null? G3d20@xr*) (G3cdd@match-empty (vector-ref G3d04@p '1) G3d1e@r) (G3cdf@combine G3d20@xr* G3d1e@r))) '#f) '#f)) G3d1a@G3d17 G3d19@G3d16 G3d18@G3d15))) (if (memv G3d11@t '(atom)) (if (equal? (vector-ref G3d04@p '1) (G2df8@strip G3d03@e G3d05@m*)) (begin '#f G3d08@r) '#f) (if (memv G3d11@t '(vector)) (if (vector? G3d03@e) (begin '#f (G3ce3@match (vector->list G3d03@e) (vector-ref G3d04@p '1) G3d05@m* G3d06@s* G3d07@ae* G3d08@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d04@p)))))))) (vector-ref G3d04@p '0))))))) (set! G3ce3@match (lambda (G3ce8@e G3ce9@p G3cea@m* G3ceb@s* G3cec@ae* G3ced@r) (if (not G3ced@r) '#f (if (eq? G3ce9@p '_) G3ced@r (if (eq? G3ce9@p 'any) (cons (G3cd5@stx^ G3ce8@e G3cea@m* G3ceb@s* G3cec@ae*) G3ced@r) (if (G2dac@stx? G3ce8@e) (if (not (G2d5a@top-marked? G3cea@m*)) (begin '#f (call-with-values (lambda () (G2dca@join-wraps G3cea@m* G3ceb@s* G3cec@ae* G3ce8@e)) (lambda (G3cf7@G3cf4 G3cf8@G3cf5 G3cf9@G3cf6) ((lambda (G3cfd@ae* G3cfe@s* G3cff@m*) (G3ce3@match (G2db0@stx-expr G3ce8@e) G3ce9@p G3cff@m* G3cfe@s* G3cfd@ae* G3ced@r)) G3cf9@G3cf6 G3cf8@G3cf5 G3cf7@G3cf4)))) '#f) (if (G292e@G2859@annotation? G3ce8@e) (G3ce3@match (G2930@G285d@annotation-expression G3ce8@e) G3ce9@p G3cea@m* G3ceb@s* G3cec@ae* G3ced@r) (G3ce1@match* G3ce8@e G3ce9@p G3cea@m* G3ceb@s* G3cec@ae* G3ced@r)))))))) (lambda (G3ce4@e G3ce5@p) (G3ce3@match G3ce4@e G3ce5@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3029@ellipsis? (lambda (G3da6@x) (if (G2de4@id? G3da6@x) (begin '#f (G2dec@free-id=? G3da6@x (G2fb5@scheme-stx '...))) '#f))) (set! G302b@underscore? (lambda (G3da8@x) (if (G2de4@id? G3da8@x) (begin '#f (G2dec@free-id=? G3da8@x (G2fb5@scheme-stx '_))) '#f))) (set! G302d@verify-literals (lambda (G3daa@lits G3dab@expr) (for-each (lambda (G3dae@x) (if ((lambda (G3db0@t) (if G3db0@t G3db0@t ((lambda (G3db2@t) (if G3db2@t G3db2@t (begin '#f (G302b@underscore? G3dae@x)))) (G3029@ellipsis? G3dae@x)))) (not (G2de4@id? G3dae@x))) (G311a@syntax-violation '#f '"invalid literal" G3dab@expr G3dae@x) (void))) G3daa@lits))) (set! G302f@syntax-case-transformer ((lambda () ((lambda (G3db5@build-dispatch-call G3db7@invalid-ids-error G3db9@gen-clause G3dbb@gen-syntax-case) (begin (set! G3db5@build-dispatch-call (lambda (G3e24@pvars G3e25@expr G3e26@y G3e27@r G3e28@mr) ((lambda (G3e2e@ids G3e2f@levels) ((lambda (G3e32@labels G3e33@new-vars) ((lambda (G3e36@body) (list '(primitive apply) (G2d3c@G2c64@build-lambda '#f G3e33@new-vars G3e36@body) G3e26@y)) (G304b@chi-expr (G2dd0@add-subst (G2d9d@make-full-rib G3e2e@ids G3e32@labels) G3e25@expr) (append (map (lambda (G3e38@label G3e39@var G3e3a@level) (cons G3e38@label (G2e04@make-binding 'syntax (cons G3e39@var G3e3a@level)))) G3e32@labels G3e33@new-vars (map cdr G3e24@pvars)) G3e27@r) G3e28@mr))) (map G2d60@gen-label G3e2e@ids) (map G2d5c@gen-lexical G3e2e@ids))) (map car G3e24@pvars) (map cdr G3e24@pvars)))) (set! G3db7@invalid-ids-error (lambda (G3e18@id* G3e19@e G3e1a@class) ((letrec ((G3e1e@find (lambda (G3e20@id* G3e21@ok*) (if (null? G3e20@id*) (G311a@syntax-violation '#f '"invalid syntax" G3e19@e) (if (G2de4@id? (car G3e20@id*)) (if (G2df2@bound-id-member? (car G3e20@id*) G3e21@ok*) (G3114@syntax-error (car G3e20@id*) '"duplicate " G3e1a@class) (G3e1e@find (cdr G3e20@id*) (cons (car G3e20@id*) G3e21@ok*))) (G3114@syntax-error (car G3e20@id*) '"invalid " G3e1a@class)))))) G3e1e@find) G3e18@id* '()))) (set! G3db9@gen-clause (lambda (G3df2@x G3df3@keys G3df4@clauses G3df5@r G3df6@mr G3df7@pat G3df8@fender G3df9@expr) (call-with-values (lambda () (G3025@convert-pattern G3df7@pat G3df3@keys)) (lambda (G3e04@G3e02 G3e05@G3e03) ((lambda (G3e08@pvars G3e09@p) (if (not (G2df0@distinct-bound-ids? (map car G3e08@pvars))) (G3db7@invalid-ids-error (map car G3e08@pvars) G3df7@pat '"pattern variable") (if (not (for-all (lambda (G3e0c@x) (not (G3029@ellipsis? (car G3e0c@x)))) G3e08@pvars)) (G311a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3df7@pat) ((lambda (G3e0e@y) ((lambda (G3e10@test) ((lambda (G3e12@conseq) ((lambda (G3e14@altern) (list (G2d3c@G2c64@build-lambda '#f (list G3e0e@y) (list 'if G3e10@test G3e12@conseq G3e14@altern)) (list '(primitive syntax-dispatch) G3df2@x (list 'quote G3e09@p)))) (G3dbb@gen-syntax-case G3df2@x G3df3@keys G3df4@clauses G3df5@r G3df6@mr))) (G3db5@build-dispatch-call G3e08@pvars G3df9@expr G3e0e@y G3df5@r G3df6@mr))) (if (eq? G3df8@fender '#t) G3e0e@y ((lambda (G3e16@call) (list 'if G3e0e@y G3e16@call (list 'quote '#f))) (G3db5@build-dispatch-call G3e08@pvars G3df8@fender G3e0e@y G3df5@r G3df6@mr))))) (G2d5c@gen-lexical 'tmp))))) G3e05@G3e03 G3e04@G3e02))))) (set! G3dbb@gen-syntax-case (lambda (G3dd0@x G3dd1@keys G3dd2@clauses G3dd3@r G3dd4@mr) (if (null? G3dd2@clauses) (list '(primitive syntax-error) G3dd0@x) ((lambda (G3dda@t) ((lambda (G3ddc@ls/false) (if G3ddc@ls/false (apply (lambda (G3dde@pat G3ddf@expr) (if (if (G2de4@id? G3dde@pat) (if (not (G2df2@bound-id-member? G3dde@pat G3dd1@keys)) (begin '#f (not (G3029@ellipsis? G3dde@pat))) '#f) '#f) (if (G2dec@free-id=? G3dde@pat (G2fb5@scheme-stx '_)) (G304b@chi-expr G3ddf@expr G3dd3@r G3dd4@mr) ((lambda (G3de2@lab G3de3@lex) ((lambda (G3de6@body) (list (G2d3c@G2c64@build-lambda '#f (list G3de3@lex) G3de6@body) G3dd0@x)) (G304b@chi-expr (G2dd0@add-subst (G2d9d@make-full-rib (list G3dde@pat) (list G3de2@lab)) G3ddf@expr) (cons (cons G3de2@lab (G2e04@make-binding 'syntax (cons G3de3@lex '0))) G3dd3@r) G3dd4@mr))) (G2d60@gen-label G3dde@pat) (G2d5c@gen-lexical G3dde@pat))) (G3db9@gen-clause G3dd0@x G3dd1@keys (cdr G3dd2@clauses) G3dd3@r G3dd4@mr G3dde@pat '#t G3ddf@expr))) G3ddc@ls/false) ((lambda (G3de8@t) ((lambda (G3dea@ls/false) (if G3dea@ls/false (apply (lambda (G3dec@pat G3ded@fender G3dee@expr) (G3db9@gen-clause G3dd0@x G3dd1@keys (cdr G3dd2@clauses) G3dd3@r G3dd4@mr G3dec@pat G3ded@fender G3dee@expr)) G3dea@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3de8@t))) (G3027@syntax-dispatch G3de8@t '(any any any)))) G3dda@t))) (G3027@syntax-dispatch G3dda@t '(any any)))) (car G3dd2@clauses))))) (lambda (G3dbc@e G3dbd@r G3dbe@mr) ((lambda (G3dc2@t) ((lambda (G3dc4@ls/false) (if G3dc4@ls/false (apply (lambda (G3dc6@expr G3dc7@keys G3dc8@clauses) (begin (G302d@verify-literals G3dc7@keys G3dbc@e) ((lambda (G3dcc@x) ((lambda (G3dce@body) (list (G2d3c@G2c64@build-lambda '#f (list G3dcc@x) G3dce@body) (G304b@chi-expr G3dc6@expr G3dbd@r G3dbe@mr))) (G3dbb@gen-syntax-case G3dcc@x G3dc7@keys G3dc8@clauses G3dbd@r G3dbe@mr))) (G2d5c@gen-lexical 'tmp)))) G3dc4@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3dc2@t))) (G3027@syntax-dispatch G3dc2@t '(_ any each-any . each-any)))) G3dbc@e)))) '#f '#f '#f '#f)))) (set! G3031@ellipsis-map (lambda (G3e3e@proc G3e3f@ls . G3e42@ls*) ((lambda (G3e45@who) (begin (set! G3e45@who '...) (begin (if (not (list? G3e3f@ls)) (assertion-violation G3e45@who '"not a list" G3e3f@ls) (void)) (if (not (null? G3e42@ls*)) ((lambda (G3e46@n) (for-each (lambda (G3e48@x) (begin (if (not (list? G3e48@x)) (assertion-violation G3e45@who '"not a list" G3e48@x) (void)) (if (not (= (length G3e48@x) G3e46@n)) (assertion-violation G3e45@who '"length mismatch" G3e3f@ls G3e48@x) (void)))) G3e42@ls*)) (length G3e3f@ls)) (void)) (apply map G3e3e@proc G3e3f@ls G3e42@ls*)))) '#f))) (set! G3033@syntax-transformer ((lambda () ((lambda (G3e4b@gen-syntax G3e4d@gen-ref G3e4f@gen-append G3e51@gen-mappend G3e53@gen-map G3e55@gen-cons G3e57@gen-vector G3e59@regen) (begin (set! G3e4b@gen-syntax (lambda (G3ebe@src G3ebf@e G3ec0@r G3ec1@maps G3ec2@ellipsis? G3ec3@vec?) ((lambda (G3eca@t) ((lambda (G3ecc@ls/false) (if (if G3ecc@ls/false (begin '#f (apply (lambda (G3ece@dots) (G3ec2@ellipsis? G3ece@dots)) G3ecc@ls/false)) '#f) (apply (lambda (G3ed0@dots) (G311a@syntax-violation '#f '"misplaced ellipsis in syntax form" G3ebe@src)) G3ecc@ls/false) ((lambda (G3ed2@t) ((lambda (G3ed4@ls/false) (if (if G3ed4@ls/false (begin '#f (apply (lambda (G3ed6@id) (G2de4@id? G3ed6@id)) G3ed4@ls/false)) '#f) (apply (lambda (G3ed8@id) ((lambda (G3eda@label) ((lambda (G3edc@b) ((lambda () (if (eq? (G2e06@binding-type G3edc@b) 'syntax) (call-with-values (lambda () ((lambda (G3ee0@var.lev) (G3e4d@gen-ref G3ebe@src (car G3ee0@var.lev) (cdr G3ee0@var.lev) G3ec1@maps)) (G2e08@binding-value G3edc@b))) (lambda (G3ee2@G3ede G3ee3@G3edf) ((lambda (G3ee6@maps G3ee7@var) (values (list 'ref G3ee7@var) G3ee6@maps)) G3ee3@G3edf G3ee2@G3ede))) (values (list 'quote G3ebf@e) G3ec1@maps))))) (G2e02@label->binding G3eda@label G3ec0@r))) (G2dfe@id->label G3ebf@e))) G3ed4@ls/false) ((lambda (G3eea@t) ((lambda (G3eec@ls/false) (if (if G3eec@ls/false (begin '#f (apply (lambda (G3eee@dots G3eef@e) (G3ec2@ellipsis? G3eee@dots)) G3eec@ls/false)) '#f) (apply (lambda (G3ef2@dots G3ef3@e) (if G3ec3@vec? (G311a@syntax-violation '#f '"misplaced ellipsis in syntax form" G3ebe@src) (G3e4b@gen-syntax G3ebe@src G3ef3@e G3ec0@r G3ec1@maps (lambda (G3ef6@x) '#f) '#f))) G3eec@ls/false) ((lambda (G3ef8@t) ((lambda (G3efa@ls/false) (if (if G3efa@ls/false (begin '#f (apply (lambda (G3efc@x G3efd@dots G3efe@y) (G3ec2@ellipsis? G3efd@dots)) G3efa@ls/false)) '#f) (apply (lambda (G3f02@x G3f03@dots G3f04@y) ((letrec ((G3f08@f (lambda (G3f0a@y G3f0b@k) ((lambda (G3f0e@t) ((lambda (G3f10@ls/false) (if G3f10@ls/false (apply (lambda () (G3f0b@k G3ec1@maps)) G3f10@ls/false) ((lambda (G3f12@t) ((lambda (G3f14@ls/false) (if (if G3f14@ls/false (begin '#f (apply (lambda (G3f16@dots G3f17@y) (G3ec2@ellipsis? G3f16@dots)) G3f14@ls/false)) '#f) (apply (lambda (G3f1a@dots G3f1b@y) (G3f08@f G3f1b@y (lambda (G3f1e@maps) (call-with-values (lambda () (G3f0b@k (cons '() G3f1e@maps))) (lambda (G3f22@G3f20 G3f23@G3f21) ((lambda (G3f26@maps G3f27@x) (if (null? (car G3f26@maps)) (G311a@syntax-violation '#f '"extra ellipsis in syntax form" G3ebe@src) (values (G3e51@gen-mappend G3f27@x (car G3f26@maps)) (cdr G3f26@maps)))) G3f23@G3f21 G3f22@G3f20)))))) G3f14@ls/false) ((lambda (G3f2a@t) ((lambda (G3f2c@ls/false) (if G3f2c@ls/false (apply (lambda () (call-with-values (lambda () (G3e4b@gen-syntax G3ebe@src G3f0a@y G3ec0@r G3ec1@maps G3ec2@ellipsis? G3ec3@vec?)) (lambda (G3f30@G3f2e G3f31@G3f2f) ((lambda (G3f34@maps G3f35@y) (call-with-values (lambda () (G3f0b@k G3f34@maps)) (lambda (G3f3a@G3f38 G3f3b@G3f39) ((lambda (G3f3e@maps G3f3f@x) (values (G3e4f@gen-append G3f3f@x G3f35@y) G3f3e@maps)) G3f3b@G3f39 G3f3a@G3f38)))) G3f31@G3f2f G3f30@G3f2e)))) G3f2c@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3f2a@t))) (G3027@syntax-dispatch G3f2a@t '_))) G3f12@t))) (G3027@syntax-dispatch G3f12@t '(any . any)))) G3f0e@t))) (G3027@syntax-dispatch G3f0e@t '()))) G3f0a@y)))) G3f08@f) G3f04@y (lambda (G3f42@maps) (call-with-values (lambda () (G3e4b@gen-syntax G3ebe@src G3f02@x G3ec0@r (cons '() G3f42@maps) G3ec2@ellipsis? '#f)) (lambda (G3f46@G3f44 G3f47@G3f45) ((lambda (G3f4a@maps G3f4b@x) (if (null? (car G3f4a@maps)) (G311a@syntax-violation '#f '"extra ellipsis in syntax form" G3ebe@src) (values (G3e53@gen-map G3f4b@x (car G3f4a@maps)) (cdr G3f4a@maps)))) G3f47@G3f45 G3f46@G3f44)))))) G3efa@ls/false) ((lambda (G3f4e@t) ((lambda (G3f50@ls/false) (if G3f50@ls/false (apply (lambda (G3f52@x G3f53@y) (call-with-values (lambda () (G3e4b@gen-syntax G3ebe@src G3f52@x G3ec0@r G3ec1@maps G3ec2@ellipsis? '#f)) (lambda (G3f58@G3f56 G3f59@G3f57) ((lambda (G3f5c@maps G3f5d@xnew) (call-with-values (lambda () (G3e4b@gen-syntax G3ebe@src G3f53@y G3ec0@r G3f5c@maps G3ec2@ellipsis? G3ec3@vec?)) (lambda (G3f62@G3f60 G3f63@G3f61) ((lambda (G3f66@maps G3f67@ynew) (values (G3e55@gen-cons G3ebf@e G3f52@x G3f53@y G3f5d@xnew G3f67@ynew) G3f66@maps)) G3f63@G3f61 G3f62@G3f60)))) G3f59@G3f57 G3f58@G3f56)))) G3f50@ls/false) ((lambda (G3f6a@t) ((lambda (G3f6c@ls/false) (if G3f6c@ls/false (apply (lambda (G3f6e@ls) (call-with-values (lambda () (G3e4b@gen-syntax G3ebe@src G3f6e@ls G3ec0@r G3ec1@maps G3ec2@ellipsis? '#t)) (lambda (G3f72@G3f70 G3f73@G3f71) ((lambda (G3f76@maps G3f77@lsnew) (values (G3e57@gen-vector G3ebf@e G3f6e@ls G3f77@lsnew) G3f76@maps)) G3f73@G3f71 G3f72@G3f70)))) G3f6c@ls/false) ((lambda (G3f7a@t) ((lambda (G3f7c@ls/false) (if G3f7c@ls/false (apply (lambda () (values (list 'quote G3ebf@e) G3ec1@maps)) G3f7c@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3f7a@t))) (G3027@syntax-dispatch G3f7a@t '_))) G3f6a@t))) (G3027@syntax-dispatch G3f6a@t '#(vector each-any)))) G3f4e@t))) (G3027@syntax-dispatch G3f4e@t '(any . any)))) G3ef8@t))) (G3027@syntax-dispatch G3ef8@t '(any any . any)))) G3eea@t))) (G3027@syntax-dispatch G3eea@t '(any any)))) G3ed2@t))) (G3027@syntax-dispatch G3ed2@t 'any))) G3eca@t))) (G3027@syntax-dispatch G3eca@t 'any))) G3ebf@e))) (set! G3e4d@gen-ref (lambda (G3ea6@src G3ea7@var G3ea8@level G3ea9@maps) (if (= G3ea8@level '0) (values G3ea7@var G3ea9@maps) (if (null? G3ea9@maps) (G311a@syntax-violation '#f '"missing ellipsis in syntax form" G3ea6@src) (call-with-values (lambda () (G3e4d@gen-ref G3ea6@src G3ea7@var (- G3ea8@level '1) (cdr G3ea9@maps))) (lambda (G3eb0@G3eae G3eb1@G3eaf) ((lambda (G3eb4@outer-maps G3eb5@outer-var) ((lambda (G3eb8@t) (if G3eb8@t ((lambda (G3eba@b) (values (cdr G3eba@b) G3ea9@maps)) G3eb8@t) ((lambda (G3ebc@inner-var) (values G3ebc@inner-var (cons (cons (cons G3eb5@outer-var G3ebc@inner-var) (car G3ea9@maps)) G3eb4@outer-maps))) (G2d5c@gen-lexical 'tmp)))) (assq G3eb5@outer-var (car G3ea9@maps)))) G3eb1@G3eaf G3eb0@G3eae))))))) (set! G3e4f@gen-append (lambda (G3ea2@x G3ea3@y) (if (equal? G3ea3@y ''()) G3ea2@x (list 'append G3ea2@x G3ea3@y)))) (set! G3e51@gen-mappend (lambda (G3e9e@e G3e9f@map-env) (list 'apply '(primitive append) (G3e53@gen-map G3e9e@e G3e9f@map-env)))) (set! G3e53@gen-map (lambda (G3e8c@e G3e8d@map-env) ((lambda (G3e90@formals G3e91@actuals) (if (eq? (car G3e8c@e) 'ref) (car G3e91@actuals) (if (for-all (lambda (G3e94@x) (if (eq? (car G3e94@x) 'ref) (begin '#f (memq (cadr G3e94@x) G3e90@formals)) '#f)) (cdr G3e8c@e)) ((lambda (G3e96@args) (cons 'map (cons (list 'primitive (car G3e8c@e)) G3e96@args))) (map ((lambda (G3e98@r) (lambda (G3e9a@x) (cdr (assq (cadr G3e9a@x) G3e98@r)))) (map cons G3e90@formals G3e91@actuals)) (cdr G3e8c@e))) (cons* 'map (list 'lambda G3e90@formals G3e8c@e) G3e91@actuals)))) (map cdr G3e8d@map-env) (map (lambda (G3e9c@x) (list 'ref (car G3e9c@x))) G3e8d@map-env)))) (set! G3e55@gen-cons (lambda (G3e7c@e G3e7d@x G3e7e@y G3e7f@xnew G3e80@ynew) ((lambda (G3e86@t) (if (memv G3e86@t '(quote)) (if (eq? (car G3e7f@xnew) 'quote) ((lambda (G3e88@xnew G3e89@ynew) (if (if (eq? G3e88@xnew G3e7d@x) (begin '#f (eq? G3e89@ynew G3e7e@y)) '#f) (list 'quote G3e7c@e) (list 'quote (cons G3e88@xnew G3e89@ynew)))) (cadr G3e7f@xnew) (cadr G3e80@ynew)) (if (null? (cadr G3e80@ynew)) (list 'list G3e7f@xnew) (list 'cons G3e7f@xnew G3e80@ynew))) (if (memv G3e86@t '(list)) (cons 'list (cons G3e7f@xnew (cdr G3e80@ynew))) (list 'cons G3e7f@xnew G3e80@ynew)))) (car G3e80@ynew)))) (set! G3e57@gen-vector (lambda (G3e76@e G3e77@ls G3e78@lsnew) (if (eq? (car G3e78@lsnew) 'quote) (if (eq? (cadr G3e78@lsnew) G3e77@ls) (list 'quote G3e76@e) (list 'quote (list->vector (cadr G3e78@lsnew)))) (if (eq? (car G3e78@lsnew) 'list) (cons 'vector (cdr G3e78@lsnew)) (list 'list->vector G3e78@lsnew))))) (set! G3e59@regen (lambda (G3e70@x) ((lambda (G3e72@t) (if (memv G3e72@t '(ref)) (cadr G3e70@x) (if (memv G3e72@t '(primitive)) (list 'primitive (cadr G3e70@x)) (if (memv G3e72@t '(quote)) (list 'quote (cadr G3e70@x)) (if (memv G3e72@t '(lambda)) (G2d3c@G2c64@build-lambda '#f (cadr G3e70@x) (G3e59@regen (caddr G3e70@x))) (if (memv G3e72@t '(map)) ((lambda (G3e74@ls) (cons '(primitive ellipsis-map) G3e74@ls)) (map G3e59@regen (cdr G3e70@x))) (cons (list 'primitive (car G3e70@x)) (map G3e59@regen (cdr G3e70@x))))))))) (car G3e70@x)))) (lambda (G3e5a@e G3e5b@r G3e5c@mr) ((lambda (G3e60@t) ((lambda (G3e62@ls/false) (if G3e62@ls/false (apply (lambda (G3e64@x) (call-with-values (lambda () (G3e4b@gen-syntax G3e5a@e G3e64@x G3e5b@r '() G3029@ellipsis? '#f)) (lambda (G3e68@G3e66 G3e69@G3e67) ((lambda (G3e6c@maps G3e6d@e) (G3e59@regen G3e6d@e)) G3e69@G3e67 G3e68@G3e66)))) G3e62@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3e60@t))) (G3027@syntax-dispatch G3e60@t '(_ any)))) G3e5a@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3035@core-macro-transformer (lambda (G3f7e@name) ((lambda (G3f80@t) (if (memv G3f80@t '(quote)) G2fd7@quote-transformer (if (memv G3f80@t '(lambda)) G2fdb@lambda-transformer (if (memv G3f80@t '(case-lambda)) G2fd9@case-lambda-transformer (if (memv G3f80@t '(letrec)) G2fc3@letrec-transformer (if (memv G3f80@t '(letrec*)) G2fc5@letrec*-transformer (if (memv G3f80@t '(if)) G2fd3@if-transformer (if (memv G3f80@t '(foreign-call)) G3023@foreign-call-transformer (if (memv G3f80@t '(syntax-case)) G302f@syntax-case-transformer (if (memv G3f80@t '(syntax)) G3033@syntax-transformer (if (memv G3f80@t '(type-descriptor)) G2fc9@type-descriptor-transformer (if (memv G3f80@t '(record-type-descriptor)) G2fcb@record-type-descriptor-transformer (if (memv G3f80@t '(record-constructor-descriptor)) G2fcd@record-constructor-descriptor-transformer (if (memv G3f80@t '(fluid-let-syntax)) G2fc7@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3f7e@name))))))))))))))) G3f7e@name))) (set! G3037@file-options-macro (lambda (G3f82@x) ((lambda (G3f85@valid-option?) (begin (set! G3f85@valid-option? (lambda (G3f8e@x) (if (G2de4@id? G3f8e@x) (begin '#f (memq (G2de6@id->sym G3f8e@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3f86@t) ((lambda (G3f88@ls/false) (if (if G3f88@ls/false (begin '#f (apply (lambda (G3f8a@opt*) (if (for-all G3f85@valid-option? G3f8a@opt*) (begin '#f (G2937@G2903@file-options-spec (map G2de6@id->sym G3f8a@opt*))) '#f)) G3f88@ls/false)) '#f) (apply (lambda (G3f8c@opt*) (G2fdd@bless (list 'quote (G2937@G2903@file-options-spec (map G2de6@id->sym G3f8c@opt*))))) G3f88@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3f86@t))) (G3027@syntax-dispatch G3f86@t '(_ . each-any)))) G3f82@x))) '#f))) (set! G3039@symbol-macro (lambda (G3f90@x G3f91@set) ((lambda (G3f94@t) ((lambda (G3f96@ls/false) (if (if G3f96@ls/false (begin '#f (apply (lambda (G3f98@name) (if (G2de4@id? G3f98@name) (begin '#f (memq (G2de6@id->sym G3f98@name) G3f91@set)) '#f)) G3f96@ls/false)) '#f) (apply (lambda (G3f9a@name) (G2fdd@bless (list 'quote G3f9a@name))) G3f96@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3f94@t))) (G3027@syntax-dispatch G3f94@t '(_ any)))) G3f90@x))) (set! G303b@macro-transformer (lambda (G3f9c@x) (if (procedure? G3f9c@x) G3f9c@x (if (symbol? G3f9c@x) ((lambda (G3f9e@t) (if (memv G3f9e@t '(define-record-type)) G301b@define-record-type-macro (if (memv G3f9e@t '(define-struct)) G3019@define-struct-macro (if (memv G3f9e@t '(include)) G300f@include-macro (if (memv G3f9e@t '(cond)) G300b@cond-macro (if (memv G3f9e@t '(let)) G2fe3@let-macro (if (memv G3f9e@t '(do)) G3003@do-macro (if (memv G3f9e@t '(or)) G3007@or-macro (if (memv G3f9e@t '(and)) G3009@and-macro (if (memv G3f9e@t '(let*)) G3005@let*-macro (if (memv G3f9e@t '(let-values)) G2fe5@let-values-macro (if (memv G3f9e@t '(let*-values)) G2fe7@let*-values-macro (if (memv G3f9e@t '(syntax-rules)) G3013@syntax-rules-macro (if (memv G3f9e@t '(quasiquote)) G3015@quasiquote-macro (if (memv G3f9e@t '(quasisyntax)) G3017@quasisyntax-macro (if (memv G3f9e@t '(with-syntax)) G2fdf@with-syntax-macro (if (memv G3f9e@t '(when)) G2fcf@when-macro (if (memv G3f9e@t '(unless)) G2fd1@unless-macro (if (memv G3f9e@t '(case)) G2fd5@case-macro (if (memv G3f9e@t '(identifier-syntax)) G3001@identifier-syntax-macro (if (memv G3f9e@t '(time)) G2ff9@time-macro (if (memv G3f9e@t '(delay)) G2ffb@delay-macro (if (memv G3f9e@t '(assert)) G2ffd@assert-macro (if (memv G3f9e@t '(endianness)) G2fff@endianness-macro (if (memv G3f9e@t '(guard)) G2ff5@guard-macro (if (memv G3f9e@t '(define-enumeration)) G2ff7@define-enumeration-macro (if (memv G3f9e@t '(trace-lambda)) G2fe9@trace-lambda-macro (if (memv G3f9e@t '(trace-define)) G2feb@trace-define-macro (if (memv G3f9e@t '(trace-define-syntax)) G2fed@trace-define-syntax-macro (if (memv G3f9e@t '(trace-let-syntax)) G2ff1@trace-let-syntax-macro (if (memv G3f9e@t '(trace-letrec-syntax)) G2ff3@trace-letrec-syntax-macro (if (memv G3f9e@t '(define-condition-type)) G301d@define-condition-type-macro (if (memv G3f9e@t '(parameterize)) G3021@parameterize-macro (if (memv G3f9e@t '(include-into)) G3011@include-into-macro (if (memv G3f9e@t '(eol-style)) (lambda (G3fa0@x) (G3039@symbol-macro G3fa0@x '(none lf cr crlf nel crnel ls))) (if (memv G3f9e@t '(error-handling-mode)) (lambda (G3fa2@x) (G3039@symbol-macro G3fa2@x '(ignore raise replace))) (if (memv G3f9e@t '(buffer-mode)) (lambda (G3fa4@x) (G3039@symbol-macro G3fa4@x '(none line block))) (if (memv G3f9e@t '(file-options)) G3037@file-options-macro (if (memv G3f9e@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G301f@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3f9c@x)))))))))))))))))))))))))))))))))))))))) G3f9c@x) (error 'core-macro-transformer '"BUG: invalid macro" G3f9c@x))))) (set! G303d@local-macro-transformer (lambda (G3fa6@x) (car G3fa6@x))) (set! G303f@do-macro-call (lambda (G3fa8@transformer G3fa9@expr) ((lambda (G3fac@out) (begin ((letrec ((G3fae@f (lambda (G3fb0@x) (if (not (G2dac@stx? G3fb0@x)) (if (pair? G3fb0@x) (begin (G3fae@f (car G3fb0@x)) (G3fae@f (cdr G3fb0@x))) (if (vector? G3fb0@x) (vector-for-each G3fae@f G3fb0@x) (if (symbol? G3fb0@x) (G311a@syntax-violation '#f '"raw symbol encountered in output of macro" G3fa9@expr G3fb0@x) (void)))) (void))))) G3fae@f) G3fac@out) (G2dce@add-mark (G2dc4@gen-mark) G3fac@out G3fa9@expr))) (G3fa8@transformer (G2dce@add-mark G2dc6@anti-mark G3fa9@expr '#f))))) (set! G3041@chi-macro (lambda (G3fb2@p G3fb3@e) (G303f@do-macro-call (G303b@macro-transformer G3fb2@p) G3fb3@e))) (set! G3043@chi-local-macro (lambda (G3fb6@p G3fb7@e) (G303f@do-macro-call (G303d@local-macro-transformer G3fb6@p) G3fb7@e))) (set! G3045@chi-global-macro (lambda (G3fba@p G3fbb@e) ((lambda (G3fbe@lib G3fbf@loc) (begin (G2bda@G2a70@visit-library G3fbe@lib) ((lambda (G3fc2@x) ((lambda (G3fc4@transformer) (G303f@do-macro-call G3fc4@transformer G3fbb@e)) (if (procedure? G3fc2@x) G3fc2@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3fc2@x)))) (symbol-value G3fbf@loc)))) (car G3fba@p) (cdr G3fba@p)))) (set! G3047@chi-expr* (lambda (G3fc6@e* G3fc7@r G3fc8@mr) (if (null? G3fc6@e*) '() ((lambda (G3fcc@e) (cons G3fcc@e (G3047@chi-expr* (cdr G3fc6@e*) G3fc7@r G3fc8@mr))) (G304b@chi-expr (car G3fc6@e*) G3fc7@r G3fc8@mr))))) (set! G3049@chi-application (lambda (G3fce@e G3fcf@r G3fd0@mr) ((lambda (G3fd4@t) ((lambda (G3fd6@ls/false) (if G3fd6@ls/false (apply (lambda (G3fd8@rator G3fd9@rands) ((lambda (G3fdc@rator) (cons G3fdc@rator (G3047@chi-expr* G3fd9@rands G3fcf@r G3fd0@mr))) (G304b@chi-expr G3fd8@rator G3fcf@r G3fd0@mr))) G3fd6@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G3fd4@t))) (G3027@syntax-dispatch G3fd4@t '(any . each-any)))) G3fce@e))) (set! G304b@chi-expr (lambda (G3fde@e G3fdf@r G3fe0@mr) (call-with-values (lambda () (G2e0c@syntax-type G3fde@e G3fdf@r)) (lambda (G3fe7@G3fe4 G3fe8@G3fe5 G3fe9@G3fe6) ((lambda (G3fed@kwd G3fee@value G3fef@type) ((lambda (G3ff3@t) (if (memv G3ff3@t '(core-macro)) ((lambda (G3ff5@transformer) (G3ff5@transformer G3fde@e G3fdf@r G3fe0@mr)) (G3035@core-macro-transformer G3fee@value)) (if (memv G3ff3@t '(global)) ((lambda (G3ff7@lib) ((lambda (G3ff9@loc) ((lambda () (begin ((G3096@inv-collector) G3ff7@lib) G3ff9@loc)))) (cdr G3fee@value))) (car G3fee@value)) (if (memv G3ff3@t '(core-prim)) ((lambda (G3ffb@name) (list 'primitive G3ffb@name)) G3fee@value) (if (memv G3ff3@t '(call)) (G3049@chi-application G3fde@e G3fdf@r G3fe0@mr) (if (memv G3ff3@t '(lexical)) ((lambda (G3ffd@lex) G3ffd@lex) (G2fb7@lexical-var G3fee@value)) (if (memv G3ff3@t '(global-macro global-macro!)) (G304b@chi-expr (G3045@chi-global-macro G3fee@value G3fde@e) G3fdf@r G3fe0@mr) (if (memv G3ff3@t '(local-macro local-macro!)) (G304b@chi-expr (G3043@chi-local-macro G3fee@value G3fde@e) G3fdf@r G3fe0@mr) (if (memv G3ff3@t '(macro macro!)) (G304b@chi-expr (G3041@chi-macro G3fee@value G3fde@e) G3fdf@r G3fe0@mr) (if (memv G3ff3@t '(constant)) ((lambda (G3fff@datum) (list 'quote G3fff@datum)) G3fee@value) (if (memv G3ff3@t '(set!)) (G304d@chi-set! G3fde@e G3fdf@r G3fe0@mr) (if (memv G3ff3@t '(begin)) ((lambda (G4001@t) ((lambda (G4003@ls/false) (if G4003@ls/false (apply (lambda (G4005@x G4006@x*) (G2d3f@G2cb0@build-sequence '#f (G3047@chi-expr* (cons G4005@x G4006@x*) G3fdf@r G3fe0@mr))) G4003@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4001@t))) (G3027@syntax-dispatch G4001@t '(_ any . each-any)))) G3fde@e) (if (memv G3ff3@t '(let-syntax letrec-syntax)) ((lambda (G4009@t) ((lambda (G400b@ls/false) (if (if G400b@ls/false (begin '#f (apply (lambda (G400d@xlhs* G400e@xrhs* G400f@xbody G4010@xbody*) (if (not (G2dee@valid-bound-ids? G400d@xlhs*)) (G311a@syntax-violation '#f '"invalid identifiers" G3fde@e) (void))) G400b@ls/false)) '#f) (apply (lambda (G4015@xlhs* G4016@xrhs* G4017@xbody G4018@xbody*) ((lambda (G401d@xlab*) ((lambda (G401f@xrib) ((lambda (G4021@xb*) ((lambda () (G2d3f@G2cb0@build-sequence '#f (G3047@chi-expr* (map (lambda (G4023@x) (G2dd0@add-subst G401f@xrib G4023@x)) (cons G4017@xbody G4018@xbody*)) (append (map cons G401d@xlab* G4021@xb*) G3fdf@r) (append (map cons G401d@xlab* G4021@xb*) G3fe0@mr)))))) (map (lambda (G4025@x) (G2e2b@make-eval-transformer (G3088@expand-transformer (if (eq? G3fef@type 'let-syntax) G4025@x (G2dd0@add-subst G401f@xrib G4025@x)) G3fe0@mr))) G4016@xrhs*))) (G2d9d@make-full-rib G4015@xlhs* G401d@xlab*))) (map G2d60@gen-label G4015@xlhs*))) G400b@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4009@t))) (G3027@syntax-dispatch G4009@t '(_ #(each (any any)) any . each-any)))) G3fde@e) (if (memv G3ff3@t '(displaced-lexical)) (G311a@syntax-violation '#f '"identifier out of context" G3fde@e) (if (memv G3ff3@t '(syntax)) (G311a@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3fde@e) (if (memv G3ff3@t '(define define-syntax module import library)) (G311a@syntax-violation '#f (string-append ((lambda (G4027@t) (if (memv G4027@t '(define)) '"a definition" (if (memv G4027@t '(define-syntax)) '"a define-syntax" (if (memv G4027@t '(module)) '"a module definition" (if (memv G4027@t '(library)) '"a library definition" (if (memv G4027@t '(import)) '"an import declaration" (if (memv G4027@t '(export)) '"an export declaration" '"a non-expression"))))))) G3fef@type) '" was found where an expression was expected") G3fde@e) (if (memv G3ff3@t '(mutable)) (G311a@syntax-violation '#f '"attempt to reference an unexportable variable" G3fde@e) (G311a@syntax-violation '#f '"invalid expression" G3fde@e)))))))))))))))))) G3fef@type)) G3fe9@G3fe6 G3fe8@G3fe5 G3fe7@G3fe4))))) (set! G304d@chi-set! (lambda (G4029@e G402a@r G402b@mr) ((lambda (G402f@t) ((lambda (G4031@ls/false) (if (if G4031@ls/false (begin '#f (apply (lambda (G4033@x G4034@v) (G2de4@id? G4033@x)) G4031@ls/false)) '#f) (apply (lambda (G4037@x G4038@v) (call-with-values (lambda () (G2e0c@syntax-type G4037@x G402a@r)) (lambda (G403e@G403b G403f@G403c G4040@G403d) ((lambda (G4044@kwd G4045@value G4046@type) ((lambda (G404a@t) (if (memv G404a@t '(lexical)) (begin (G2fbb@set-lexical-mutable! G4045@value '#t) (list 'set! (G2fb7@lexical-var G4045@value) (G304b@chi-expr G4038@v G402a@r G402b@mr))) (if (memv G404a@t '(core-prim)) (G311a@syntax-violation '#f '"cannot modify imported core primitive" G4029@e) (if (memv G404a@t '(global)) (G311a@syntax-violation '#f '"attempt to modify imported binding" G4029@e) (if (memv G404a@t '(global-macro!)) (G304b@chi-expr (G3045@chi-global-macro G4045@value G4029@e) G402a@r G402b@mr) (if (memv G404a@t '(local-macro!)) (G304b@chi-expr (G3043@chi-local-macro G4045@value G4029@e) G402a@r G402b@mr) (if (memv G404a@t '(mutable)) (G311a@syntax-violation '#f '"attempt to assign to an unexportable variable" G4029@e) (G311a@syntax-violation '#f '"invalid syntax" G4029@e)))))))) G4046@type)) G4040@G403d G403f@G403c G403e@G403b)))) G4031@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G402f@t))) (G3027@syntax-dispatch G402f@t '(_ any any)))) G4029@e))) (set! G304f@verify-formals (lambda (G404c@fmls G404d@stx) ((lambda (G4050@t) ((lambda (G4052@ls/false) (if G4052@ls/false (apply (lambda (G4054@x*) (if (not (G2dee@valid-bound-ids? G4054@x*)) (G2fe1@invalid-fmls-error G404d@stx G404c@fmls) (void))) G4052@ls/false) ((lambda (G4056@t) ((lambda (G4058@ls/false) (if G4058@ls/false (apply (lambda (G405a@x* G405b@x) (if (not (G2dee@valid-bound-ids? (cons G405b@x G405a@x*))) (G2fe1@invalid-fmls-error G404d@stx G404c@fmls) (void))) G4058@ls/false) ((lambda (G405e@t) ((lambda (G4060@ls/false) (if G4060@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid syntax" G404d@stx)) G4060@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G405e@t))) (G3027@syntax-dispatch G405e@t '_))) G4056@t))) (G3027@syntax-dispatch G4056@t '#(each+ any () any)))) G4050@t))) (G3027@syntax-dispatch G4050@t 'each-any))) G404c@fmls))) (set! G3051@chi-lambda-clause (lambda (G4062@stx G4063@fmls G4064@body* G4065@r G4066@mr) ((lambda (G406c@t) ((lambda (G406e@ls/false) (if G406e@ls/false (apply (lambda (G4070@x*) (begin (G304f@verify-formals G4063@fmls G4062@stx) ((lambda (G4072@lex* G4073@lab*) (values G4072@lex* (G3061@chi-internal (G2dd0@add-subst (G2d9d@make-full-rib G4070@x* G4073@lab*) G4064@body*) (G2fbf@add-lexicals G4073@lab* G4072@lex* G4065@r) G4066@mr))) (map G2d5c@gen-lexical G4070@x*) (map G2d60@gen-label G4070@x*)))) G406e@ls/false) ((lambda (G4076@t) ((lambda (G4078@ls/false) (if G4078@ls/false (apply (lambda (G407a@x* G407b@x) (begin (G304f@verify-formals G4063@fmls G4062@stx) ((lambda (G407e@lex* G407f@lab* G4080@lex G4081@lab) (values (append G407e@lex* G4080@lex) (G3061@chi-internal (G2dd0@add-subst (G2d9d@make-full-rib (cons G407b@x G407a@x*) (cons G4081@lab G407f@lab*)) G4064@body*) (G2fbf@add-lexicals (cons G4081@lab G407f@lab*) (cons G4080@lex G407e@lex*) G4065@r) G4066@mr))) (map G2d5c@gen-lexical G407a@x*) (map G2d60@gen-label G407a@x*) (G2d5c@gen-lexical G407b@x) (G2d60@gen-label G407b@x)))) G4078@ls/false) ((lambda (G4086@t) ((lambda (G4088@ls/false) (if G4088@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid syntax" G4063@fmls)) G4088@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4086@t))) (G3027@syntax-dispatch G4086@t '_))) G4076@t))) (G3027@syntax-dispatch G4076@t '#(each+ any () any)))) G406c@t))) (G3027@syntax-dispatch G406c@t 'each-any))) G4063@fmls))) (set! G3053@chi-lambda-clause* (lambda (G408a@stx G408b@fmls* G408c@body** G408d@r G408e@mr) (if (null? G408b@fmls*) (values '() '()) (call-with-values (lambda () (G3051@chi-lambda-clause G408a@stx (car G408b@fmls*) (car G408c@body**) G408d@r G408e@mr)) (lambda (G4096@G4094 G4097@G4095) ((lambda (G409a@b G409b@a) (call-with-values (lambda () (G3053@chi-lambda-clause* G408a@stx (cdr G408b@fmls*) (cdr G408c@body**) G408d@r G408e@mr)) (lambda (G40a0@G409e G40a1@G409f) ((lambda (G40a4@b* G40a5@a*) (values (cons G409b@a G40a5@a*) (cons G409a@b G40a4@b*))) G40a1@G409f G40a0@G409e)))) G4097@G4095 G4096@G4094)))))) (set! G3055@chi-defun (lambda (G40a8@x G40a9@r G40aa@mr) ((lambda (G40ae@fmls G40af@body*) (call-with-values (lambda () (G3051@chi-lambda-clause G40ae@fmls G40ae@fmls G40af@body* G40a9@r G40aa@mr)) (lambda (G40b4@G40b2 G40b5@G40b3) ((lambda (G40b8@body G40b9@fmls) (G2d3c@G2c64@build-lambda '#f G40b9@fmls G40b8@body)) G40b5@G40b3 G40b4@G40b2)))) (car G40a8@x) (cdr G40a8@x)))) (set! G3057@chi-rhs (lambda (G40bc@rhs G40bd@r G40be@mr) ((lambda (G40c2@t) (if (memv G40c2@t '(defun)) (G3055@chi-defun (cdr G40bc@rhs) G40bd@r G40be@mr) (if (memv G40c2@t '(expr)) ((lambda (G40c4@expr) (G304b@chi-expr G40c4@expr G40bd@r G40be@mr)) (cdr G40bc@rhs)) (if (memv G40c2@t '(top-expr)) ((lambda (G40c6@expr) (G2d3f@G2cb0@build-sequence '#f (list (G304b@chi-expr G40c6@expr G40bd@r G40be@mr) (G2d40@G2cb2@build-void)))) (cdr G40bc@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G40bc@rhs))))) (car G40bc@rhs)))) (set! G3059@expand-interaction-rhs*/init* (lambda (G40c8@lhs* G40c9@rhs* G40ca@init* G40cb@r G40cc@mr) ((letrec ((G40d2@f (lambda (G40d4@lhs* G40d5@rhs*) (if (null? G40d4@lhs*) (map (lambda (G40d8@x) (G304b@chi-expr G40d8@x G40cb@r G40cc@mr)) G40ca@init*) ((lambda (G40da@lhs G40db@rhs) ((lambda (G40de@t) (if (memv G40de@t '(defun)) ((lambda (G40e0@rhs) (cons (list 'set! G40da@lhs G40e0@rhs) (G40d2@f (cdr G40d4@lhs*) (cdr G40d5@rhs*)))) (G3055@chi-defun (cdr G40db@rhs) G40cb@r G40cc@mr)) (if (memv G40de@t '(expr)) ((lambda (G40e2@rhs) (cons (list 'set! G40da@lhs G40e2@rhs) (G40d2@f (cdr G40d4@lhs*) (cdr G40d5@rhs*)))) (G304b@chi-expr (cdr G40db@rhs) G40cb@r G40cc@mr)) (if (memv G40de@t '(top-expr)) ((lambda (G40e4@e) (cons G40e4@e (G40d2@f (cdr G40d4@lhs*) (cdr G40d5@rhs*)))) (G304b@chi-expr (cdr G40db@rhs) G40cb@r G40cc@mr)) (error 'expand-interaction '"invallid" G40db@rhs))))) (car G40db@rhs))) (car G40d4@lhs*) (car G40d5@rhs*)))))) G40d2@f) G40c8@lhs* G40c9@rhs*))) (set! G305b@chi-rhs* (lambda (G40e6@rhs* G40e7@r G40e8@mr) ((letrec ((G40ec@f (lambda (G40ee@ls) (if (null? G40ee@ls) '() ((lambda (G40f0@a) (cons G40f0@a (G40ec@f (cdr G40ee@ls)))) (G3057@chi-rhs (car G40ee@ls) G40e7@r G40e8@mr)))))) G40ec@f) G40e6@rhs*))) (set! G305d@find-bound=? (lambda (G40f2@x G40f3@lhs* G40f4@rhs*) (if (null? G40f3@lhs*) '#f (if (G2dea@bound-id=? G40f2@x (car G40f3@lhs*)) (car G40f4@rhs*) (G305d@find-bound=? G40f2@x (cdr G40f3@lhs*) (cdr G40f4@rhs*)))))) (set! G305f@find-dups (lambda (G40f8@ls) ((letrec ((G40fa@f (lambda (G40fc@ls G40fd@dups) (if (null? G40fc@ls) G40fd@dups ((lambda (G4100@t) (if G4100@t ((lambda (G4102@x) (G40fa@f (cdr G40fc@ls) (cons (list (car G40fc@ls) G4102@x) G40fd@dups))) G4100@t) (G40fa@f (cdr G40fc@ls) G40fd@dups))) (G305d@find-bound=? (car G40fc@ls) (cdr G40fc@ls) (cdr G40fc@ls))))))) G40fa@f) G40f8@ls '()))) (set! G3061@chi-internal (lambda (G4104@e* G4105@r G4106@mr) ((lambda (G410a@rib) (call-with-values (lambda () (G3086@chi-body* (map (lambda (G4114@x) (G2dd0@add-subst G410a@rib G4114@x)) (G2de2@syntax->list G4104@e*)) G4105@r G4106@mr '() '() '() '() '() G410a@rib '#f)) (lambda (G4116@G410c G4117@G410d G4118@G410e G4119@G410f G411a@G4110 G411b@G4111 G411c@G4112 G411d@G4113) ((lambda (G4126@_exp* G4127@kwd* G4128@mod** G4129@rhs* G412a@lex* G412b@mr G412c@r G412d@e*) (begin (if (null? G412d@e*) (G311a@syntax-violation '#f '"no expression in body" G412d@e*) (void)) ((lambda (G4136@init*) ((lambda (G4138@rhs*) ((lambda () (G2d42@G2cb6@build-letrec* '#f (reverse G412a@lex*) (reverse G4138@rhs*) (G2d3f@G2cb0@build-sequence '#f G4136@init*))))) (G305b@chi-rhs* G4129@rhs* G412c@r G412b@mr))) (G3047@chi-expr* (append (apply append (reverse G4128@mod**)) G412d@e*) G412c@r G412b@mr)))) G411d@G4113 G411c@G4112 G411b@G4111 G411a@G4110 G4119@G410f G4118@G410e G4117@G410d G4116@G410c)))) (G2d8d@make-empty-rib)))) (set! G3063@parse-module (lambda (G413a@e) ((lambda (G413c@t) ((lambda (G413e@ls/false) (if G413e@ls/false (apply (lambda (G4140@export* G4141@b*) (begin (if (not (for-all G2de4@id? G4140@export*)) (G311a@syntax-violation '#f '"module exports must be identifiers" G413a@e) (void)) (values '#f (list->vector G4140@export*) G4141@b*))) G413e@ls/false) ((lambda (G4144@t) ((lambda (G4146@ls/false) (if G4146@ls/false (apply (lambda (G4148@name G4149@export* G414a@b*) (begin (if (not (G2de4@id? G4148@name)) (G311a@syntax-violation '#f '"module name must be an identifier" G413a@e) (void)) (if (not (for-all G2de4@id? G4149@export*)) (G311a@syntax-violation '#f '"module exports must be identifiers" G413a@e) (void)) (values G4148@name (list->vector G4149@export*) G414a@b*))) G4146@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4144@t))) (G3027@syntax-dispatch G4144@t '(_ any each-any . each-any)))) G413c@t))) (G3027@syntax-dispatch G413c@t '(_ each-any . each-any)))) G413a@e))) (set! G3069@G3064 (make-record-type-descriptor 'module-interface '#f 'G3067 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G306b@G3066 '#f) (set! G306d@G3065 (make-record-constructor-descriptor G3069@G3064 '#f G306b@G3066)) (set! G3072@module-interface? (record-predicate G3069@G3064)) (set! G3074@make-module-interface (record-constructor G306d@G3065)) (set! G3076@module-interface-first-mark (record-accessor G3069@G3064 '0)) (set! G3078@module-interface-exp-id-vec (record-accessor G3069@G3064 '1)) (set! G307a@module-interface-exp-lab-vec (record-accessor G3069@G3064 '2)) (set! G307c@set-module-interface-first-mark! (record-mutator G3069@G3064 '0)) (set! G307e@set-module-interface-exp-id-vec! (record-mutator G3069@G3064 '1)) (set! G3080@set-module-interface-exp-lab-vec! (record-mutator G3069@G3064 '2)) (set! G3082@module-interface-exp-id* (lambda (G414e@iface G414f@id) ((lambda (G4153@diff-marks) (begin (set! G4153@diff-marks (lambda (G415a@ls G415b@x) (begin (if (null? G415a@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G415e@a) (if (eq? G415e@a G415b@x) '() (cons G415e@a (G4153@diff-marks (cdr G415a@ls) G415b@x)))) (car G415a@ls))))) ((lambda (G4154@diff G4155@id-vec) (if (null? G4154@diff) G4155@id-vec (vector-map (lambda (G4158@x) (G2dae@make-stx (G2db0@stx-expr G4158@x) (append G4154@diff (G2db2@stx-mark* G4158@x)) '() '())) G4155@id-vec))) (G4153@diff-marks (G2db2@stx-mark* G414f@id) (G3076@module-interface-first-mark G414e@iface)) (G3078@module-interface-exp-id-vec G414e@iface)))) '#f))) (set! G3084@chi-internal-module (lambda (G4160@e G4161@r G4162@mr G4163@lex* G4164@rhs* G4165@mod** G4166@kwd*) (call-with-values (lambda () (G3063@parse-module G4160@e)) (lambda (G4171@G416e G4172@G416f G4173@G4170) ((lambda (G4177@e* G4178@exp-id* G4179@name) ((lambda (G417d@rib) ((lambda (G417f@e*) ((lambda () (call-with-values (lambda () (G3086@chi-body* G417f@e* G4161@r G4162@mr G4163@lex* G4164@rhs* G4165@mod** G4166@kwd* '() G417d@rib '#f)) (lambda (G4189@G4181 G418a@G4182 G418b@G4183 G418c@G4184 G418d@G4185 G418e@G4186 G418f@G4187 G4190@G4188) ((lambda (G4199@_exp* G419a@kwd* G419b@mod** G419c@rhs* G419d@lex* G419e@mr G419f@r G41a0@e*) ((lambda (G41a9@exp-lab* G41aa@mod**) (if (not G4179@name) (values G419d@lex* G419c@rhs* G4178@exp-id* G41a9@exp-lab* G419f@r G419e@mr G41aa@mod** G419a@kwd*) ((lambda (G41ad@lab G41ae@iface) (values G419d@lex* G419c@rhs* (vector G4179@name) (vector G41ad@lab) (cons (cons G41ad@lab (cons '$module G41ae@iface)) G419f@r) (cons (cons G41ad@lab (cons '$module G41ae@iface)) G419e@mr) G41aa@mod** G419a@kwd*)) (G2d60@gen-label 'module) (G3074@make-module-interface (car (G2db2@stx-mark* G4179@name)) (vector-map (lambda (G41b1@x) (G2dae@make-stx (G2db0@stx-expr G41b1@x) (G2db2@stx-mark* G41b1@x) '() '())) G4178@exp-id*) G41a9@exp-lab*)))) (vector-map (lambda (G41b3@x) ((lambda (G41b5@t) (if G41b5@t G41b5@t (begin '#f (G311a@syntax-violation '#f '"cannot find module export" G41b3@x)))) (G2dfe@id->label (G2dae@make-stx (G2de6@id->sym G41b3@x) (G2db2@stx-mark* G41b3@x) (list G417d@rib) '())))) G4178@exp-id*) (cons G41a0@e* G419b@mod**))) G4190@G4188 G418f@G4187 G418e@G4186 G418d@G4185 G418c@G4184 G418b@G4183 G418a@G4182 G4189@G4181)))))) (map (lambda (G41b7@x) (G2dd0@add-subst G417d@rib G41b7@x)) (G2de2@syntax->list G4177@e*)))) (G2d8d@make-empty-rib))) G4173@G4170 G4172@G416f G4171@G416e))))) (set! G3086@chi-body* (lambda (G41b9@e* G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41bf@kwd* G41c0@exp* G41c1@rib G41c2@top?) (if (null? G41b9@e*) (values G41b9@e* G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41bf@kwd* G41c0@exp*) ((lambda (G41cd@e) (call-with-values (lambda () (G2e0c@syntax-type G41cd@e G41ba@r)) (lambda (G41d2@G41cf G41d3@G41d0 G41d4@G41d1) ((lambda (G41d8@kwd G41d9@value G41da@type) ((lambda (G41de@kwd*) ((lambda (G41e0@t) (if (memv G41e0@t '(define)) (call-with-values (lambda () (G2faf@parse-define G41cd@e)) (lambda (G41e4@G41e2 G41e5@G41e3) ((lambda (G41e8@rhs G41e9@id) (begin (if (G2df2@bound-id-member? G41e9@id G41de@kwd*) (G311a@syntax-violation '#f '"cannot redefine keyword" G41cd@e) (void)) (call-with-values (lambda () (G2d64@gen-define-label+loc G41e9@id G41c1@rib)) (lambda (G41ee@G41ec G41ef@G41ed) ((lambda (G41f2@lex G41f3@lab) (begin (G2d93@extend-rib! G41c1@rib G41e9@id G41f3@lab) (G3086@chi-body* (cdr G41b9@e*) (G2fbd@add-lexical G41f3@lab G41f2@lex G41ba@r) G41bb@mr (cons G41f2@lex G41bc@lex*) (cons G41e8@rhs G41bd@rhs*) G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?))) G41ef@G41ed G41ee@G41ec))))) G41e5@G41e3 G41e4@G41e2))) (if (memv G41e0@t '(define-syntax)) (call-with-values (lambda () (G2fb1@parse-define-syntax G41cd@e)) (lambda (G41f8@G41f6 G41f9@G41f7) ((lambda (G41fc@rhs G41fd@id) (begin (if (G2df2@bound-id-member? G41fd@id G41de@kwd*) (G311a@syntax-violation '#f '"cannot redefine keyword" G41cd@e) (void)) ((lambda (G4200@lab G4201@expanded-rhs) (begin (G2d93@extend-rib! G41c1@rib G41fd@id G4200@lab) ((lambda (G4204@b) (G3086@chi-body* (cdr G41b9@e*) (cons (cons G4200@lab G4204@b) G41ba@r) (cons (cons G4200@lab G4204@b) G41bb@mr) G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?)) (G2e2b@make-eval-transformer G4201@expanded-rhs)))) (G2d66@gen-define-label G41fd@id G41c1@rib) (G3088@expand-transformer G41fc@rhs G41bb@mr)))) G41f9@G41f7 G41f8@G41f6))) (if (memv G41e0@t '(let-syntax letrec-syntax)) ((lambda (G4206@t) ((lambda (G4208@ls/false) (if (if G4208@ls/false (begin '#f (apply (lambda (G420a@xlhs* G420b@xrhs* G420c@xbody*) (if (not (G2dee@valid-bound-ids? G420a@xlhs*)) (G311a@syntax-violation '#f '"invalid identifiers" G41cd@e) (void))) G4208@ls/false)) '#f) (apply (lambda (G4210@xlhs* G4211@xrhs* G4212@xbody*) ((lambda (G4216@xlab*) ((lambda (G4218@xrib) ((lambda (G421a@xb*) ((lambda () (G3086@chi-body* (append (map (lambda (G421c@x) (G2dd0@add-subst G4218@xrib G421c@x)) G4212@xbody*) (cdr G41b9@e*)) (append (map cons G4216@xlab* G421a@xb*) G41ba@r) (append (map cons G4216@xlab* G421a@xb*) G41bb@mr) G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?)))) (map (lambda (G421e@x) (G2e2b@make-eval-transformer (G3088@expand-transformer (if (eq? G41da@type 'let-syntax) G421e@x (G2dd0@add-subst G4218@xrib G421e@x)) G41bb@mr))) G4211@xrhs*))) (G2d9d@make-full-rib G4210@xlhs* G4216@xlab*))) (map G2d60@gen-label G4210@xlhs*))) G4208@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4206@t))) (G3027@syntax-dispatch G4206@t '(_ #(each (any any)) . each-any)))) G41cd@e) (if (memv G41e0@t '(begin)) ((lambda (G4220@t) ((lambda (G4222@ls/false) (if G4222@ls/false (apply (lambda (G4224@x*) (G3086@chi-body* (append G4224@x* (cdr G41b9@e*)) G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?)) G4222@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4220@t))) (G3027@syntax-dispatch G4220@t '(_ . each-any)))) G41cd@e) (if (memv G41e0@t '(global-macro global-macro!)) (G3086@chi-body* (cons (G2dd0@add-subst G41c1@rib (G3045@chi-global-macro G41d9@value G41cd@e)) (cdr G41b9@e*)) G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?) (if (memv G41e0@t '(local-macro local-macro!)) (G3086@chi-body* (cons (G2dd0@add-subst G41c1@rib (G3043@chi-local-macro G41d9@value G41cd@e)) (cdr G41b9@e*)) G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?) (if (memv G41e0@t '(macro macro!)) (G3086@chi-body* (cons (G2dd0@add-subst G41c1@rib (G3041@chi-macro G41d9@value G41cd@e)) (cdr G41b9@e*)) G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?) (if (memv G41e0@t '(module)) (call-with-values (lambda () (G3084@chi-internal-module G41cd@e G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd*)) (lambda (G422e@G4226 G422f@G4227 G4230@G4228 G4231@G4229 G4232@G422a G4233@G422b G4234@G422c G4235@G422d) ((lambda (G423e@kwd* G423f@mod** G4240@mr G4241@r G4242@m-exp-lab* G4243@m-exp-id* G4244@rhs* G4245@lex*) (begin (vector-for-each (lambda (G424e@id G424f@lab) (G2d93@extend-rib! G41c1@rib G424e@id G424f@lab)) G4243@m-exp-id* G4242@m-exp-lab*) (G3086@chi-body* (cdr G41b9@e*) G4241@r G4240@mr G4245@lex* G4244@rhs* G423f@mod** G423e@kwd* G41c0@exp* G41c1@rib G41c2@top?))) G4235@G422d G4234@G422c G4233@G422b G4232@G422a G4231@G4229 G4230@G4228 G422f@G4227 G422e@G4226))) (if (memv G41e0@t '(library)) (begin (G30fa@library-expander (G2dfa@stx->datum G41cd@e)) (G3086@chi-body* (cdr G41b9@e*) G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?)) (if (memv G41e0@t '(export)) ((lambda (G4252@t) ((lambda (G4254@ls/false) (if G4254@ls/false (apply (lambda (G4256@exp-decl*) (G3086@chi-body* (cdr G41b9@e*) G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* (append G4256@exp-decl* G41c0@exp*) G41c1@rib G41c2@top?)) G4254@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4252@t))) (G3027@syntax-dispatch G4252@t '(_ . each-any)))) G41cd@e) (if (memv G41e0@t '(import)) ((lambda () ((lambda (G4259@module-import? G425b@module-import G425d@library-import) (begin (set! G4259@module-import? (lambda (G42a5@e) ((lambda (G42a7@t) ((lambda (G42a9@ls/false) (if (if G42a9@ls/false (begin '#f (apply (lambda (G42ab@id) (G2de4@id? G42ab@id)) G42a9@ls/false)) '#f) (apply (lambda (G42ad@id) '#t) G42a9@ls/false) ((lambda (G42af@t) ((lambda (G42b1@ls/false) (if G42b1@ls/false (apply (lambda (G42b3@imp*) '#f) G42b1@ls/false) ((lambda (G42b5@t) ((lambda (G42b7@ls/false) (if G42b7@ls/false (apply (lambda () (G311a@syntax-violation '#f '"malformed import form" G42a5@e)) G42b7@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G42b5@t))) (G3027@syntax-dispatch G42b5@t '_))) G42af@t))) (G3027@syntax-dispatch G42af@t '(_ . each-any)))) G42a7@t))) (G3027@syntax-dispatch G42a7@t '(_ any)))) G42a5@e))) (set! G425b@module-import (lambda (G4286@e G4287@r) ((lambda (G428a@t) ((lambda (G428c@ls/false) (if (if G428c@ls/false (begin '#f (apply (lambda (G428e@id) (G2de4@id? G428e@id)) G428c@ls/false)) '#f) (apply (lambda (G4290@id) (call-with-values (lambda () (G2e0c@syntax-type G4290@id G4287@r)) (lambda (G4295@G4292 G4296@G4293 G4297@G4294) ((lambda (G429b@kwd G429c@value G429d@type) ((lambda (G42a1@t) (if (memv G42a1@t '($module)) ((lambda (G42a3@iface) (values (G3082@module-interface-exp-id* G42a3@iface G4290@id) (G307a@module-interface-exp-lab-vec G42a3@iface))) G429c@value) (G311a@syntax-violation '#f '"invalid import" G4286@e))) G429d@type)) G4297@G4294 G4296@G4293 G4295@G4292)))) G428c@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G428a@t))) (G3027@syntax-dispatch G428a@t '(_ any)))) G4286@e))) (set! G425d@library-import (lambda (G426c@e) ((lambda (G426e@t) ((lambda (G4270@ls/false) (if G4270@ls/false (apply (lambda (G4272@ctxt G4273@imp*) (call-with-values (lambda () (G3090@parse-import-spec* (G3120@syntax->datum G4273@imp*))) (lambda (G4278@G4276 G4279@G4277) ((lambda (G427c@subst-labels G427d@subst-names) (values (vector-map (lambda (G4280@name) (G2dc2@datum->stx G4272@ctxt G4280@name)) G427d@subst-names) G427c@subst-labels)) G4279@G4277 G4278@G4276)))) G4270@ls/false) ((lambda (G4282@t) ((lambda (G4284@ls/false) (if G4284@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid import form" G426c@e)) G4284@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4282@t))) (G3027@syntax-dispatch G4282@t '_))) G426e@t))) (G3027@syntax-dispatch G426e@t '(any . each-any)))) G426c@e))) (begin (call-with-values (lambda () (if (G4259@module-import? G41cd@e) (G425b@module-import G41cd@e G41ba@r) (G425d@library-import G41cd@e))) (lambda (G4260@G425e G4261@G425f) ((lambda (G4264@lab* G4265@id*) (vector-for-each (lambda (G4268@id G4269@lab) (G2d93@extend-rib! G41c1@rib G4268@id G4269@lab)) G4265@id* G4264@lab*)) G4261@G425f G4260@G425e))) (G3086@chi-body* (cdr G41b9@e*) G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?)))) '#f '#f '#f))) (if G41c2@top? (G3086@chi-body* (cdr G41b9@e*) G41ba@r G41bb@mr (cons (G2d5c@gen-lexical 'dummy) G41bc@lex*) (cons (cons 'top-expr G41cd@e) G41bd@rhs*) G41be@mod** G41de@kwd* G41c0@exp* G41c1@rib G41c2@top?) (values G41b9@e* G41ba@r G41bb@mr G41bc@lex* G41bd@rhs* G41be@mod** G41de@kwd* G41c0@exp*)))))))))))))) G41da@type)) (if (G2de4@id? G41d8@kwd) (cons G41d8@kwd G41bf@kwd*) G41bf@kwd*))) G41d4@G41d1 G41d3@G41d0 G41d2@G41cf)))) (car G41b9@e*))))) (set! G3088@expand-transformer (lambda (G42b9@expr G42ba@r) ((lambda (G42bd@rtc) ((lambda (G42bf@expanded-rhs) (begin (for-each ((lambda (G42c1@mark-visit) (lambda (G42c3@x) (begin (G2bd9@G2a6e@invoke-library G42c3@x) (G42c1@mark-visit G42c3@x)))) (G3098@vis-collector)) (G42bd@rtc)) G42bf@expanded-rhs)) ((lambda (G42c9@G42c5@inv-collector G42ca@G42c6@vis-collector G42cb@G42c7@inv-collector G42cc@G42c8@vis-collector) ((lambda (G42d1@swap) (dynamic-wind G42d1@swap (lambda () (G304b@chi-expr G42b9@expr G42ba@r G42ba@r)) G42d1@swap)) (lambda () (begin ((lambda (G42d3@t) (begin (G42c9@G42c5@inv-collector G42cb@G42c7@inv-collector) (set! G42cb@G42c7@inv-collector G42d3@t))) (G42c9@G42c5@inv-collector)) ((lambda (G42d5@t) (begin (G42ca@G42c6@vis-collector G42cc@G42c8@vis-collector) (set! G42cc@G42c8@vis-collector G42d5@t))) (G42ca@G42c6@vis-collector)))))) G3096@inv-collector G3098@vis-collector G42bd@rtc (lambda (G42d7@x) (values))))) (G3094@make-collector)))) (set! G308a@parse-exports (lambda (G42d9@exp*) ((letrec ((G42db@f (lambda (G42dd@exp* G42de@int* G42df@ext*) (if (null? G42dd@exp*) (begin (if (not (G2dee@valid-bound-ids? G42df@ext*)) (G311a@syntax-violation 'export '"invalid exports" (G305f@find-dups G42df@ext*)) (void)) (values (map G3120@syntax->datum G42df@ext*) G42de@int*)) ((lambda (G42e3@t) ((lambda (G42e5@ls/false) (if G42e5@ls/false (apply (lambda (G42e7@rename G42e8@i* G42e9@e*) (begin (if (not (if (eq? (G3120@syntax->datum G42e7@rename) 'rename) (if (for-all G2de4@id? G42e8@i*) (begin '#f (for-all G2de4@id? G42e9@e*)) '#f) '#f)) (G311a@syntax-violation 'export '"invalid export specifier" (car G42dd@exp*)) (void)) (G42db@f (cdr G42dd@exp*) (append G42e8@i* G42de@int*) (append G42e9@e* G42df@ext*)))) G42e5@ls/false) ((lambda (G42ed@t) ((lambda (G42ef@ls/false) (if G42ef@ls/false (apply (lambda (G42f1@ie) (begin (if (not (G2de4@id? G42f1@ie)) (G311a@syntax-violation 'export '"invalid export" G42f1@ie) (void)) (G42db@f (cdr G42dd@exp*) (cons G42f1@ie G42de@int*) (cons G42f1@ie G42df@ext*)))) G42ef@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G42ed@t))) (G3027@syntax-dispatch G42ed@t 'any))) G42e3@t))) (G3027@syntax-dispatch G42e3@t '(any . #(each (any any)))))) (car G42dd@exp*)))))) G42db@f) G42d9@exp* '() '()))) (set! G308c@parse-library-name (lambda (G42f3@spec) ((lambda (G42f6@parse) (begin (set! G42f6@parse (lambda (G4301@x) ((lambda (G4303@t) ((lambda (G4305@ls/false) (if (if G4305@ls/false (begin '#f (apply (lambda (G4307@v*) (for-all (lambda (G4309@x) ((lambda (G430b@x) (if (integer? G430b@x) (begin '#f (exact? G430b@x)) '#f)) (G3120@syntax->datum G4309@x))) G4307@v*)) G4305@ls/false)) '#f) (apply (lambda (G430d@v*) (values '() (map G3120@syntax->datum G430d@v*))) G4305@ls/false) ((lambda (G430f@t) ((lambda (G4311@ls/false) (if (if G4311@ls/false (begin '#f (apply (lambda (G4313@x G4314@rest) (symbol? (G3120@syntax->datum G4313@x))) G4311@ls/false)) '#f) (apply (lambda (G4317@x G4318@rest) (call-with-values (lambda () (G42f6@parse G4318@rest)) (lambda (G431d@G431b G431e@G431c) ((lambda (G4321@v* G4322@x*) (values (cons (G3120@syntax->datum G4317@x) G4322@x*) G4321@v*)) G431e@G431c G431d@G431b)))) G4311@ls/false) ((lambda (G4325@t) ((lambda (G4327@ls/false) (if G4327@ls/false (apply (lambda () (values '() '())) G4327@ls/false) ((lambda (G4329@t) ((lambda (G432b@ls/false) (if G432b@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid library name" G42f3@spec)) G432b@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4329@t))) (G3027@syntax-dispatch G4329@t '_))) G4325@t))) (G3027@syntax-dispatch G4325@t '()))) G430f@t))) (G3027@syntax-dispatch G430f@t '(any . any)))) G4303@t))) (G3027@syntax-dispatch G4303@t '(each-any)))) G4301@x))) (call-with-values (lambda () (G42f6@parse G42f3@spec)) (lambda (G42f9@G42f7 G42fa@G42f8) ((lambda (G42fd@ver* G42fe@name*) (begin (if (null? G42fe@name*) (G311a@syntax-violation '#f '"empty library name" G42f3@spec) (void)) (values G42fe@name* G42fd@ver*))) G42fa@G42f8 G42f9@G42f7))))) '#f))) (set! G308e@parse-library (lambda (G432d@e) ((lambda (G432f@t) ((lambda (G4331@ls/false) (if (if G4331@ls/false (begin '#f (apply (lambda (G4333@library G4334@name* G4335@export G4336@exp* G4337@import G4338@imp* G4339@b*) (if (eq? (G3120@syntax->datum G4335@export) 'export) (if (eq? (G3120@syntax->datum G4337@import) 'import) (begin '#f (eq? (G3120@syntax->datum G4333@library) 'library)) '#f) '#f)) G4331@ls/false)) '#f) (apply (lambda (G4341@library G4342@name* G4343@export G4344@exp* G4345@import G4346@imp* G4347@b*) (values G4342@name* G4344@exp* G4346@imp* G4347@b*)) G4331@ls/false) ((lambda (G434f@t) ((lambda (G4351@ls/false) (if G4351@ls/false (apply (lambda () (G311a@syntax-violation '#f '"malformed library" G432d@e)) G4351@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G434f@t))) (G3027@syntax-dispatch G434f@t '_))) G432f@t))) (G3027@syntax-dispatch G432f@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G432d@e))) (set! G3090@parse-import-spec* ((lambda () ((lambda (G4354@idsyn? G4356@dup-error G4358@merge-substs G435a@exclude* G435c@find* G435e@rem* G4360@remove-dups G4362@parse-library-name G4364@import-library G4366@get-import G4368@add-imports!) (begin (set! G4354@idsyn? (lambda (G4553@x) (symbol? (G3120@syntax->datum G4553@x)))) (set! G4356@dup-error (lambda (G4551@name) (G311a@syntax-violation 'import '"two imports with different bindings" G4551@name))) (set! G4358@merge-substs (lambda (G453f@s G4540@subst) ((lambda (G4544@insert-to-subst) (begin (set! G4544@insert-to-subst (lambda (G4545@a G4546@subst) ((lambda (G4549@name G454a@label) ((lambda (G454d@t) (if G454d@t ((lambda (G454f@x) (if (eq? (cdr G454f@x) G454a@label) G4546@subst (G4356@dup-error G4549@name))) G454d@t) (cons G4545@a G4546@subst))) (assq G4549@name G4546@subst))) (car G4545@a) (cdr G4545@a)))) (if (null? G453f@s) G4540@subst (G4544@insert-to-subst (car G453f@s) (G4358@merge-substs (cdr G453f@s) G4540@subst))))) '#f))) (set! G435a@exclude* (lambda (G4515@sym* G4516@subst) ((lambda (G451a@exclude) (begin (set! G451a@exclude (lambda (G452f@sym G4530@subst) (if (null? G4530@subst) (G311a@syntax-violation 'import '"cannot rename unbound identifier" G452f@sym) (if (eq? G452f@sym (caar G4530@subst)) (values (cdar G4530@subst) (cdr G4530@subst)) ((lambda (G4533@a) (call-with-values (lambda () (G451a@exclude G452f@sym (cdr G4530@subst))) (lambda (G4537@G4535 G4538@G4536) ((lambda (G453b@subst G453c@old) (values G453c@old (cons G4533@a G453b@subst))) G4538@G4536 G4537@G4535)))) (car G4530@subst)))))) (if (null? G4515@sym*) (values '() G4516@subst) (call-with-values (lambda () (G451a@exclude (car G4515@sym*) G4516@subst)) (lambda (G451d@G451b G451e@G451c) ((lambda (G4521@subst G4522@old) (call-with-values (lambda () (G435a@exclude* (cdr G4515@sym*) G4521@subst)) (lambda (G4527@G4525 G4528@G4526) ((lambda (G452b@subst G452c@old*) (values (cons G4522@old G452c@old*) G452b@subst)) G4528@G4526 G4527@G4525)))) G451e@G451c G451d@G451b)))))) '#f))) (set! G435c@find* (lambda (G450d@sym* G450e@subst) (map (lambda (G4511@x) ((lambda (G4513@t) (if G4513@t (cdr G4513@t) (G311a@syntax-violation 'import '"cannot find identifier" G4511@x))) (assq G4511@x G450e@subst))) G450d@sym*))) (set! G435e@rem* (lambda (G4505@sym* G4506@subst) ((letrec ((G4509@f (lambda (G450b@subst) (if (null? G450b@subst) '() (if (memq (caar G450b@subst) G4505@sym*) (G4509@f (cdr G450b@subst)) (cons (car G450b@subst) (G4509@f (cdr G450b@subst)))))))) G4509@f) G4506@subst))) (set! G4360@remove-dups (lambda (G4503@ls) (if (null? G4503@ls) '() (if (memq (car G4503@ls) (cdr G4503@ls)) (G4360@remove-dups (cdr G4503@ls)) (cons (car G4503@ls) (G4360@remove-dups (cdr G4503@ls))))))) (set! G4362@parse-library-name (lambda (G441d@spec) ((lambda (G4420@subversion? G4422@subversion-pred G4424@version-pred) (begin (set! G4420@subversion? (lambda (G44ff@x) ((lambda (G4501@x) (if (integer? G4501@x) (if (exact? G4501@x) (begin '#f (>= G4501@x '0)) '#f) '#f)) (G3120@syntax->datum G44ff@x)))) (set! G4422@subversion-pred (lambda (G449f@x*) ((lambda (G44a1@t) ((lambda (G44a3@ls/false) (if (if G44a3@ls/false (begin '#f (apply (lambda (G44a5@n) (G4420@subversion? G44a5@n)) G44a3@ls/false)) '#f) (apply (lambda (G44a7@n) (lambda (G44a9@x) (= G44a9@x (G3120@syntax->datum G44a7@n)))) G44a3@ls/false) ((lambda (G44ab@t) ((lambda (G44ad@ls/false) (if (if G44ad@ls/false (begin '#f (apply (lambda (G44af@p? G44b0@sub*) (eq? (G3120@syntax->datum G44af@p?) 'and)) G44ad@ls/false)) '#f) (apply (lambda (G44b3@p? G44b4@sub*) ((lambda (G44b7@p*) (lambda (G44b9@x) (for-all (lambda (G44bb@p) (G44bb@p G44b9@x)) G44b7@p*))) (map G4422@subversion-pred G44b4@sub*))) G44ad@ls/false) ((lambda (G44bd@t) ((lambda (G44bf@ls/false) (if (if G44bf@ls/false (begin '#f (apply (lambda (G44c1@p? G44c2@sub*) (eq? (G3120@syntax->datum G44c1@p?) 'or)) G44bf@ls/false)) '#f) (apply (lambda (G44c5@p? G44c6@sub*) ((lambda (G44c9@p*) (lambda (G44cb@x) (exists (lambda (G44cd@p) (G44cd@p G44cb@x)) G44c9@p*))) (map G4422@subversion-pred G44c6@sub*))) G44bf@ls/false) ((lambda (G44cf@t) ((lambda (G44d1@ls/false) (if (if G44d1@ls/false (begin '#f (apply (lambda (G44d3@p? G44d4@sub) (eq? (G3120@syntax->datum G44d3@p?) 'not)) G44d1@ls/false)) '#f) (apply (lambda (G44d7@p? G44d8@sub) ((lambda (G44db@p) (lambda (G44dd@x) (not (G44db@p G44dd@x)))) (G4422@subversion-pred G44d8@sub))) G44d1@ls/false) ((lambda (G44df@t) ((lambda (G44e1@ls/false) (if (if G44e1@ls/false (begin '#f (apply (lambda (G44e3@p? G44e4@n) (if (eq? (G3120@syntax->datum G44e3@p?) '<=) (begin '#f (G4420@subversion? G44e4@n)) '#f)) G44e1@ls/false)) '#f) (apply (lambda (G44e7@p? G44e8@n) (lambda (G44eb@x) (<= G44eb@x (G3120@syntax->datum G44e8@n)))) G44e1@ls/false) ((lambda (G44ed@t) ((lambda (G44ef@ls/false) (if (if G44ef@ls/false (begin '#f (apply (lambda (G44f1@p? G44f2@n) (if (eq? (G3120@syntax->datum G44f1@p?) '>=) (begin '#f (G4420@subversion? G44f2@n)) '#f)) G44ef@ls/false)) '#f) (apply (lambda (G44f5@p? G44f6@n) (lambda (G44f9@x) (>= G44f9@x (G3120@syntax->datum G44f6@n)))) G44ef@ls/false) ((lambda (G44fb@t) ((lambda (G44fd@ls/false) (if G44fd@ls/false (apply (lambda () (G311a@syntax-violation 'import '"invalid sub-version spec" G441d@spec G449f@x*)) G44fd@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G44fb@t))) (G3027@syntax-dispatch G44fb@t '_))) G44ed@t))) (G3027@syntax-dispatch G44ed@t '(any any)))) G44df@t))) (G3027@syntax-dispatch G44df@t '(any any)))) G44cf@t))) (G3027@syntax-dispatch G44cf@t '(any any)))) G44bd@t))) (G3027@syntax-dispatch G44bd@t '(any . each-any)))) G44ab@t))) (G3027@syntax-dispatch G44ab@t '(any . each-any)))) G44a1@t))) (G3027@syntax-dispatch G44a1@t 'any))) G449f@x*))) (set! G4424@version-pred (lambda (G444f@x*) ((lambda (G4451@t) ((lambda (G4453@ls/false) (if G4453@ls/false (apply (lambda () (lambda (G4455@x) '#t)) G4453@ls/false) ((lambda (G4457@t) ((lambda (G4459@ls/false) (if (if G4459@ls/false (begin '#f (apply (lambda (G445b@c G445c@ver*) (eq? (G3120@syntax->datum G445b@c) 'and)) G4459@ls/false)) '#f) (apply (lambda (G445f@c G4460@ver*) ((lambda (G4463@p*) (lambda (G4465@x) (for-all (lambda (G4467@p) (G4467@p G4465@x)) G4463@p*))) (map G4424@version-pred G4460@ver*))) G4459@ls/false) ((lambda (G4469@t) ((lambda (G446b@ls/false) (if (if G446b@ls/false (begin '#f (apply (lambda (G446d@c G446e@ver*) (eq? (G3120@syntax->datum G446d@c) 'or)) G446b@ls/false)) '#f) (apply (lambda (G4471@c G4472@ver*) ((lambda (G4475@p*) (lambda (G4477@x) (exists (lambda (G4479@p) (G4479@p G4477@x)) G4475@p*))) (map G4424@version-pred G4472@ver*))) G446b@ls/false) ((lambda (G447b@t) ((lambda (G447d@ls/false) (if (if G447d@ls/false (begin '#f (apply (lambda (G447f@c G4480@ver) (eq? (G3120@syntax->datum G447f@c) 'not)) G447d@ls/false)) '#f) (apply (lambda (G4483@c G4484@ver) ((lambda (G4487@p) (lambda (G4489@x) (not (G4487@p G4489@x)))) (G4424@version-pred G4484@ver))) G447d@ls/false) ((lambda (G448b@t) ((lambda (G448d@ls/false) (if G448d@ls/false (apply (lambda (G448f@sub*) ((lambda (G4491@p*) (lambda (G4493@x) ((letrec ((G4495@f (lambda (G4497@p* G4498@x) (if (null? G4497@p*) '#t (if (null? G4498@x) '#f (if ((car G4497@p*) (car G4498@x)) (begin '#f (G4495@f (cdr G4497@p*) (cdr G4498@x))) '#f)))))) G4495@f) G4491@p* G4493@x))) (map G4422@subversion-pred G448f@sub*))) G448d@ls/false) ((lambda (G449b@t) ((lambda (G449d@ls/false) (if G449d@ls/false (apply (lambda () (G311a@syntax-violation 'import '"invalid version spec" G441d@spec G444f@x*)) G449d@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G449b@t))) (G3027@syntax-dispatch G449b@t '_))) G448b@t))) (G3027@syntax-dispatch G448b@t 'each-any))) G447b@t))) (G3027@syntax-dispatch G447b@t '(any any)))) G4469@t))) (G3027@syntax-dispatch G4469@t '(any . each-any)))) G4457@t))) (G3027@syntax-dispatch G4457@t '(any . each-any)))) G4451@t))) (G3027@syntax-dispatch G4451@t '()))) G444f@x*))) ((letrec ((G4425@f (lambda (G4427@x) ((lambda (G4429@t) ((lambda (G442b@ls/false) (if G442b@ls/false (apply (lambda (G442d@version-spec*) (values '() (G4424@version-pred G442d@version-spec*))) G442b@ls/false) ((lambda (G442f@t) ((lambda (G4431@ls/false) (if (if G4431@ls/false (begin '#f (apply (lambda (G4433@x G4434@x*) (G4354@idsyn? G4433@x)) G4431@ls/false)) '#f) (apply (lambda (G4437@x G4438@x*) (call-with-values (lambda () (G4425@f G4438@x*)) (lambda (G443d@G443b G443e@G443c) ((lambda (G4441@pred G4442@name) (values (cons (G3120@syntax->datum G4437@x) G4442@name) G4441@pred)) G443e@G443c G443d@G443b)))) G4431@ls/false) ((lambda (G4445@t) ((lambda (G4447@ls/false) (if G4447@ls/false (apply (lambda () (values '() (lambda (G4449@x) '#t))) G4447@ls/false) ((lambda (G444b@t) ((lambda (G444d@ls/false) (if G444d@ls/false (apply (lambda () (G311a@syntax-violation '#f '"invalid import spec" G441d@spec)) G444d@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G444b@t))) (G3027@syntax-dispatch G444b@t '_))) G4445@t))) (G3027@syntax-dispatch G4445@t '()))) G442f@t))) (G3027@syntax-dispatch G442f@t '(any . any)))) G4429@t))) (G3027@syntax-dispatch G4429@t '(each-any)))) G4427@x)))) G4425@f) G441d@spec))) '#f '#f '#f))) (set! G4364@import-library (lambda (G440f@spec*) (call-with-values (lambda () (G4362@parse-library-name G440f@spec*)) (lambda (G4413@G4411 G4414@G4412) ((lambda (G4417@pred G4418@name) (begin (if (null? G4418@name) (G311a@syntax-violation 'import '"empty library name" G440f@spec*) (void)) ((lambda (G441b@lib) (begin (if (not G441b@lib) (G311a@syntax-violation 'import '"cannot find library with required name" G4418@name) (void)) (if (not (G4417@pred (G2baa@G2a10@library-version G441b@lib))) (G311a@syntax-violation 'import '"library does not satisfy version specification" G440f@spec* G441b@lib) (void)) ((G309a@imp-collector) G441b@lib) (G2bae@G2a18@library-subst G441b@lib))) (G2bd2@G2a60@find-library-by-name G4418@name)))) G4414@G4412 G4413@G4411))))) (set! G4366@get-import (lambda (G4381@spec) ((lambda (G4383@t) ((lambda (G4385@ls/false) (if (if G4385@ls/false (begin '#f (apply (lambda (G4387@x G4388@x*) (not (memq (G3120@syntax->datum G4387@x) '(for rename except only prefix library)))) G4385@ls/false)) '#f) (apply (lambda (G438b@x G438c@x*) (G4364@import-library (cons G438b@x G438c@x*))) G4385@ls/false) ((lambda (G438f@t) ((lambda (G4391@ls/false) (if (if G4391@ls/false (begin '#f (apply (lambda (G4393@rename G4394@isp G4395@old* G4396@new*) (if (eq? (G3120@syntax->datum G4393@rename) 'rename) (if (for-all G4354@idsyn? G4395@old*) (begin '#f (for-all G4354@idsyn? G4396@new*)) '#f) '#f)) G4391@ls/false)) '#f) (apply (lambda (G439b@rename G439c@isp G439d@old* G439e@new*) ((lambda (G43a3@subst G43a4@old* G43a5@new*) ((lambda (G43a9@old-label*) ((lambda (G43ab@subst) (G4358@merge-substs (map cons G43a5@new* G43a9@old-label*) G43ab@subst)) (G435e@rem* G43a4@old* G43a3@subst))) (G435c@find* G43a4@old* G43a3@subst))) (G4366@get-import G439c@isp) (map G3120@syntax->datum G439d@old*) (map G3120@syntax->datum G439e@new*))) G4391@ls/false) ((lambda (G43ad@t) ((lambda (G43af@ls/false) (if (if G43af@ls/false (begin '#f (apply (lambda (G43b1@except G43b2@isp G43b3@sym*) (if (eq? (G3120@syntax->datum G43b1@except) 'except) (begin '#f (for-all G4354@idsyn? G43b3@sym*)) '#f)) G43af@ls/false)) '#f) (apply (lambda (G43b7@except G43b8@isp G43b9@sym*) ((lambda (G43bd@subst) (G435e@rem* (map G3120@syntax->datum G43b9@sym*) G43bd@subst)) (G4366@get-import G43b8@isp))) G43af@ls/false) ((lambda (G43bf@t) ((lambda (G43c1@ls/false) (if (if G43c1@ls/false (begin '#f (apply (lambda (G43c3@only G43c4@isp G43c5@sym*) (if (eq? (G3120@syntax->datum G43c3@only) 'only) (begin '#f (for-all G4354@idsyn? G43c5@sym*)) '#f)) G43c1@ls/false)) '#f) (apply (lambda (G43c9@only G43ca@isp G43cb@sym*) ((lambda (G43cf@subst G43d0@sym*) ((lambda (G43d3@sym*) ((lambda (G43d5@lab*) (map cons G43d3@sym* G43d5@lab*)) (G435c@find* G43d3@sym* G43cf@subst))) (G4360@remove-dups G43d0@sym*))) (G4366@get-import G43ca@isp) (map G3120@syntax->datum G43cb@sym*))) G43c1@ls/false) ((lambda (G43d7@t) ((lambda (G43d9@ls/false) (if (if G43d9@ls/false (begin '#f (apply (lambda (G43db@prefix G43dc@isp G43dd@p) (if (eq? (G3120@syntax->datum G43db@prefix) 'prefix) (begin '#f (G4354@idsyn? G43dd@p)) '#f)) G43d9@ls/false)) '#f) (apply (lambda (G43e1@prefix G43e2@isp G43e3@p) ((lambda (G43e7@subst G43e8@prefix) (map (lambda (G43eb@x) (cons (string->symbol (string-append G43e8@prefix (symbol->string (car G43eb@x)))) (cdr G43eb@x))) G43e7@subst)) (G4366@get-import G43e2@isp) (symbol->string (G3120@syntax->datum G43e3@p)))) G43d9@ls/false) ((lambda (G43ed@t) ((lambda (G43ef@ls/false) (if (if G43ef@ls/false (begin '#f (apply (lambda (G43f1@library G43f2@spec*) (eq? (G3120@syntax->datum G43f1@library) 'library)) G43ef@ls/false)) '#f) (apply (lambda (G43f5@library G43f6@spec*) (G4364@import-library G43f6@spec*)) G43ef@ls/false) ((lambda (G43f9@t) ((lambda (G43fb@ls/false) (if (if G43fb@ls/false (begin '#f (apply (lambda (G43fd@for G43fe@isp G43ff@rest) (eq? (G3120@syntax->datum G43fd@for) 'for)) G43fb@ls/false)) '#f) (apply (lambda (G4403@for G4404@isp G4405@rest) (G4366@get-import G4404@isp)) G43fb@ls/false) ((lambda (G4409@t) ((lambda (G440b@ls/false) (if G440b@ls/false (apply (lambda (G440d@spec) (G311a@syntax-violation 'import '"invalid import spec" G440d@spec)) G440b@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4409@t))) (G3027@syntax-dispatch G4409@t 'any))) G43f9@t))) (G3027@syntax-dispatch G43f9@t '(any any . any)))) G43ed@t))) (G3027@syntax-dispatch G43ed@t '(any each-any)))) G43d7@t))) (G3027@syntax-dispatch G43d7@t '(any any any)))) G43bf@t))) (G3027@syntax-dispatch G43bf@t '(any any . each-any)))) G43ad@t))) (G3027@syntax-dispatch G43ad@t '(any any . each-any)))) G438f@t))) (G3027@syntax-dispatch G438f@t '(any any . #(each (any any)))))) G4383@t))) (G3027@syntax-dispatch G4383@t '(any . each-any)))) G4381@spec))) (set! G4368@add-imports! (lambda (G4371@imp G4372@h) ((lambda (G4375@subst) (for-each (lambda (G4377@x) ((lambda (G4379@name G437a@label) ((lambda (G437d@t) (if G437d@t ((lambda (G437f@l) (if (not (eq? G437f@l G437a@label)) (G4356@dup-error G4379@name) (void))) G437d@t) (hashtable-set! G4372@h G4379@name G437a@label))) (hashtable-ref G4372@h G4379@name '#f))) (car G4377@x) (cdr G4377@x))) G4375@subst)) (G4366@get-import G4371@imp)))) (lambda (G4369@imp*) ((letrec ((G436b@f (lambda (G436d@imp* G436e@h) (if (null? G436d@imp*) (hashtable-entries G436e@h) (begin (G4368@add-imports! (car G436d@imp*) G436e@h) (G436b@f (cdr G436d@imp*) G436e@h)))))) G436b@f) G4369@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3092@make-top-rib (lambda (G4555@names G4556@labels) ((lambda (G4559@rib) (begin (vector-for-each (lambda (G455b@name G455c@label) (begin (if (not (symbol? G455b@name)) (error 'make-top-rib '"BUG: not a symbol" G455b@name) (void)) (G2d95@extend-rib/nc! G4559@rib (G2dae@make-stx G455b@name G2d58@top-mark* '() '()) G455c@label))) G4555@names G4556@labels) G4559@rib)) (G2d8f@make-cache-rib)))) (set! G3094@make-collector (lambda () ((lambda (G455f@ls) (lambda G4563 ((lambda (G4564) (if (= G4564 '0) (apply (lambda () G455f@ls) G4563) (if (= G4564 '1) (apply (lambda (G4561@x) (set! G455f@ls (G2d51@set-cons G4561@x G455f@ls))) G4563) (error 'apply '"invalid arg count")))) (length G4563)))) '()))) (set! G3096@inv-collector (G2936@G2869@make-parameter (lambda G4565@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4567@x) (begin (if (not (procedure? G4567@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4567@x) (void)) G4567@x)))) (set! G3098@vis-collector (G2936@G2869@make-parameter (lambda G4569@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G456b@x) (begin (if (not (procedure? G456b@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G456b@x) (void)) G456b@x)))) (set! G309a@imp-collector (G2936@G2869@make-parameter (lambda G456d@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G456f@x) (begin (if (not (procedure? G456f@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G456f@x) (void)) G456f@x)))) (set! G309c@chi-library-internal (lambda (G4571@e* G4572@rib G4573@top?) (call-with-values (lambda () (G3086@chi-body* G4571@e* '() '() '() '() '() '() '() G4572@rib G4573@top?)) (lambda (G457f@G4577 G4580@G4578 G4581@G4579 G4582@G457a G4583@G457b G4584@G457c G4585@G457d G4586@G457e) ((lambda (G458f@exp* G4590@_kwd* G4591@mod** G4592@rhs* G4593@lex* G4594@mr G4595@r G4596@e*) (values (append (apply append (reverse G4591@mod**)) G4596@e*) G4595@r G4594@mr (reverse G4593@lex*) (reverse G4592@rhs*) G458f@exp*)) G4586@G457e G4585@G457d G4584@G457c G4583@G457b G4582@G457a G4581@G4579 G4580@G4578 G457f@G4577))))) (set! G309e@chi-interaction-expr (lambda (G459f@e G45a0@rib G45a1@r) (call-with-values (lambda () (G3086@chi-body* (list G459f@e) G45a1@r G45a1@r '() '() '() '() '() G45a0@rib '#t)) (lambda (G45ad@G45a5 G45ae@G45a6 G45af@G45a7 G45b0@G45a8 G45b1@G45a9 G45b2@G45aa G45b3@G45ab G45b4@G45ac) ((lambda (G45bd@_exp* G45be@_kwd* G45bf@mod** G45c0@rhs* G45c1@lex* G45c2@mr G45c3@r G45c4@e*) ((lambda (G45cd@e*) ((lambda (G45cf@e) (values G45cf@e G45c3@r)) (if (null? G45cd@e*) (G2d40@G2cb2@build-void) (if (null? (cdr G45cd@e*)) (car G45cd@e*) (G2d3f@G2cb0@build-sequence '#f G45cd@e*))))) (G3059@expand-interaction-rhs*/init* (reverse G45c1@lex*) (reverse G45c0@rhs*) (append (apply append (reverse G45bf@mod**)) G45c4@e*) G45c3@r G45c2@mr))) G45b4@G45ac G45b3@G45ab G45b2@G45aa G45b1@G45a9 G45b0@G45a8 G45af@G45a7 G45ae@G45a6 G45ad@G45a5))))) (set! G30a0@library-body-expander (lambda (G45d1@name G45d2@main-exp* G45d3@imp* G45d4@b* G45d5@top?) ((lambda (G45dc@itc) (begin (set! G45dc@itc (G3094@make-collector)) ((lambda (G45e1@G45dd@imp-collector G45e2@G45de@top-level-context G45e3@G45df@imp-collector G45e4@G45e0@top-level-context) ((lambda (G45e9@swap) (dynamic-wind G45e9@swap (lambda () (call-with-values (lambda () (G3090@parse-import-spec* G45d3@imp*)) (lambda (G45ed@G45eb G45ee@G45ec) ((lambda (G45f1@subst-labels G45f2@subst-names) ((lambda (G45f5@rib) ((lambda (G45f8@wrap) (begin (set! G45f8@wrap (lambda (G4664@x) (G2dae@make-stx G4664@x G2d58@top-mark* (list G45f5@rib) '()))) ((lambda (G45f9@b* G45fa@main-exp* G45fb@rtc G45fc@vtc) ((lambda (G4605@G4601@inv-collector G4606@G4602@vis-collector G4607@G4603@inv-collector G4608@G4604@vis-collector) ((lambda (G460d@swap) (dynamic-wind G460d@swap (lambda () (call-with-values (lambda () (G309c@chi-library-internal G45f9@b* G45f5@rib G45d5@top?)) (lambda (G4615@G460f G4616@G4610 G4617@G4611 G4618@G4612 G4619@G4613 G461a@G4614) ((lambda (G4621@internal-exp* G4622@rhs* G4623@lex* G4624@mr G4625@r G4626@init*) (call-with-values (lambda () (G308a@parse-exports (append G45fa@main-exp* G4621@internal-exp*))) (lambda (G462f@G462d G4630@G462e) ((lambda (G4633@exp-id* G4634@exp-name*) (begin (G2d99@seal-rib! G45f5@rib) ((lambda (G4637@init*) ((lambda (G4639@rhs*) ((lambda () (begin (G2d9b@unseal-rib! G45f5@rib) ((lambda (G463b@loc* G463c@export-subst) ((lambda (G4640@errstr) (begin (set! G4640@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3104@make-export-env/macros G4623@lex* G463b@loc* G4625@r)) (lambda (G4644@G4641 G4645@G4642 G4646@G4643) ((lambda (G464a@macro* G464b@global* G464c@export-env) (begin (for-each (lambda (G4650@s) ((lambda (G4652@name G4653@label) ((lambda (G4656@p) (if G4656@p ((lambda (G4658@b) ((lambda (G465a@type) (if (eq? G465a@type 'mutable) (G311a@syntax-violation 'export G4640@errstr G4652@name) (void))) (car G4658@b))) (cdr G4656@p)) (void))) (assq G4653@label G464c@export-env))) (car G4650@s) (cdr G4650@s))) G463c@export-subst) ((lambda (G465c@invoke-body G465d@invoke-definitions) (values (G45dc@itc) (G45fb@rtc) (G45fc@vtc) (G2d3f@G2cb0@build-sequence '#f (append G465d@invoke-definitions (list G465c@invoke-body))) G464a@macro* G463c@export-subst G464c@export-env)) (G2d42@G2cb6@build-letrec* '#f G4623@lex* G4639@rhs* (G3100@build-exports G464b@global* G4637@init*)) (map G2d3b@G2be0@build-global-define (map cdr G464b@global*))))) G4646@G4643 G4645@G4642 G4644@G4641))))) '#f)) (map G2d5e@gen-global G4623@lex*) (G3102@make-export-subst G4634@exp-name* G4633@exp-id*)))))) (G305b@chi-rhs* G4622@rhs* G4625@r G4624@mr))) (G3047@chi-expr* G4626@init* G4625@r G4624@mr)))) G4630@G462e G462f@G462d)))) G461a@G4614 G4619@G4613 G4618@G4612 G4617@G4611 G4616@G4610 G4615@G460f)))) G460d@swap)) (lambda () (begin ((lambda (G4660@t) (begin (G4605@G4601@inv-collector G4607@G4603@inv-collector) (set! G4607@G4603@inv-collector G4660@t))) (G4605@G4601@inv-collector)) ((lambda (G4662@t) (begin (G4606@G4602@vis-collector G4608@G4604@vis-collector) (set! G4608@G4604@vis-collector G4662@t))) (G4606@G4602@vis-collector)))))) G3096@inv-collector G3098@vis-collector G45fb@rtc G45fc@vtc)) (map G45f8@wrap G45d4@b*) (map G45f8@wrap G45d2@main-exp*) (G3094@make-collector) (G3094@make-collector)))) '#f)) (G3092@make-top-rib G45f2@subst-names G45f1@subst-labels))) G45ee@G45ec G45ed@G45eb)))) G45e9@swap)) (lambda () (begin ((lambda (G4666@t) (begin (G45e1@G45dd@imp-collector G45e3@G45df@imp-collector) (set! G45e3@G45df@imp-collector G4666@t))) (G45e1@G45dd@imp-collector)) ((lambda (G4668@t) (begin (G45e2@G45de@top-level-context G45e4@G45e0@top-level-context) (set! G45e4@G45e0@top-level-context G4668@t))) (G45e2@G45de@top-level-context)))))) G309a@imp-collector G3128@top-level-context G45dc@itc '#f))) '#f))) (set! G30a2@core-library-expander (lambda (G466a@e G466b@verify-name) (call-with-values (lambda () (G308e@parse-library G466a@e)) (lambda (G4672@G466e G4673@G466f G4674@G4670 G4675@G4671) ((lambda (G467a@b* G467b@imp* G467c@exp* G467d@name*) (call-with-values (lambda () (G308c@parse-library-name G467d@name*)) (lambda (G4684@G4682 G4685@G4683) ((lambda (G4688@ver G4689@name) (begin (G466b@verify-name G4689@name) (call-with-values (lambda () (G30a0@library-body-expander G4689@name G467c@exp* G467b@imp* G467a@b* '#f)) (lambda (G4693@G468c G4694@G468d G4695@G468e G4696@G468f G4697@G4690 G4698@G4691 G4699@G4692) ((lambda (G46a1@export-env G46a2@export-subst G46a3@visit-code G46a4@invoke-code G46a5@visit-req* G46a6@invoke-req* G46a7@imp*) (values G4689@name G4688@ver G46a7@imp* G46a6@invoke-req* G46a5@visit-req* G46a4@invoke-code G46a3@visit-code G46a2@export-subst G46a1@export-env)) G4699@G4692 G4698@G4691 G4697@G4690 G4696@G468f G4695@G468e G4694@G468d G4693@G468c))))) G4685@G4683 G4684@G4682)))) G4675@G4671 G4674@G4670 G4673@G466f G4672@G466e))))) (set! G30a4@parse-top-level-program (lambda (G46af@e*) ((lambda (G46b1@t) ((lambda (G46b3@ls/false) (if (if G46b3@ls/false (begin '#f (apply (lambda (G46b5@import G46b6@imp* G46b7@b*) (eq? (G3120@syntax->datum G46b5@import) 'import)) G46b3@ls/false)) '#f) (apply (lambda (G46bb@import G46bc@imp* G46bd@b*) (values G46bc@imp* G46bd@b*)) G46b3@ls/false) ((lambda (G46c1@t) ((lambda (G46c3@ls/false) (if (if G46c3@ls/false (begin '#f (apply (lambda (G46c5@import G46c6@x G46c7@y) (eq? (G3120@syntax->datum G46c5@import) 'import)) G46c3@ls/false)) '#f) (apply (lambda (G46cb@import G46cc@x G46cd@y) (G311a@syntax-violation 'expander '"invalid syntax of top-level program" (G2dde@syntax-car G46af@e*))) G46c3@ls/false) ((lambda (G46d1@t) ((lambda (G46d3@ls/false) (if G46d3@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G46d3@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G46d1@t))) (G3027@syntax-dispatch G46d1@t '_))) G46c1@t))) (G3027@syntax-dispatch G46c1@t '((any . any) . any)))) G46b1@t))) (G3027@syntax-dispatch G46b1@t '((any . each-any) . each-any)))) G46af@e*))) (set! G30a6@top-level-expander (lambda (G46d5@e*) (call-with-values (lambda () (G30a4@parse-top-level-program G46d5@e*)) (lambda (G46d9@G46d7 G46da@G46d8) ((lambda (G46dd@b* G46de@imp*) (call-with-values (lambda () (G30a0@library-body-expander '() '() G46de@imp* G46dd@b* '#t)) (lambda (G46e8@G46e1 G46e9@G46e2 G46ea@G46e3 G46eb@G46e4 G46ec@G46e5 G46ed@G46e6 G46ee@G46e7) ((lambda (G46f6@export-env G46f7@export-subst G46f8@visit-code G46f9@invoke-code G46fa@visit-req* G46fb@invoke-req* G46fc@imp*) (values G46fb@invoke-req* G46f9@invoke-code)) G46ee@G46e7 G46ed@G46e6 G46ec@G46e5 G46eb@G46e4 G46ea@G46e3 G46e9@G46e2 G46e8@G46e1)))) G46da@G46d8 G46d9@G46d7))))) (set! G30ac@G30a7 (make-record-type-descriptor 'env '#f 'G30aa '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G30ae@G30a9 '#f) (set! G30b0@G30a8 (make-record-constructor-descriptor G30ac@G30a7 '#f G30ae@G30a9)) (set! G30b5@env? (record-predicate G30ac@G30a7)) (set! G30b7@make-env (record-constructor G30b0@G30a8)) (set! G30b9@env-names (record-accessor G30ac@G30a7 '0)) (set! G30bb@env-labels (record-accessor G30ac@G30a7 '1)) (set! G30bd@env-itc (record-accessor G30ac@G30a7 '2)) (set! G30bf@set-env-names! (record-mutator G30ac@G30a7 '0)) (set! G30c1@set-env-labels! (record-mutator G30ac@G30a7 '1)) (set! G30c3@set-env-itc! (record-mutator G30ac@G30a7 '2)) (set! G30c5@rp (G2933@G2863@make-record-printer 'env (lambda (G4704@x G4705@p G4706@wr) (display '"#<environment>" G4705@p)))) (set! G30cb@G30c6 (make-record-type-descriptor 'interaction-env '#f 'G30c9 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G30cd@G30c8 '#f) (set! G30cf@G30c7 (make-record-constructor-descriptor G30cb@G30c6 '#f G30cd@G30c8)) (set! G30d4@interaction-env? (record-predicate G30cb@G30c6)) (set! G30d6@make-interaction-env (record-constructor G30cf@G30c7)) (set! G30d8@interaction-env-rib (record-accessor G30cb@G30c6 '0)) (set! G30da@interaction-env-r (record-accessor G30cb@G30c6 '1)) (set! G30dc@interaction-env-locs (record-accessor G30cb@G30c6 '2)) (set! G30de@set-interaction-env-rib! (record-mutator G30cb@G30c6 '0)) (set! G30e0@set-interaction-env-r! (record-mutator G30cb@G30c6 '1)) (set! G30e2@set-interaction-env-locs! (record-mutator G30cb@G30c6 '2)) (set! G30e4@rp (G2933@G2863@make-record-printer 'interaction-env (lambda (G470a@x G470b@p G470c@wr) (display '"#<environment>" G470b@p)))) (set! G30e6@interaction-environment-symbols (lambda () (G30ee@environment-symbols (G3126@interaction-environment)))) (set! G30e8@environment-bindings (lambda (G4710@e) (vector->list (vector-map (lambda (G4712@name G4713@label) (G30ea@parse-binding (cons G4712@name (G2bd8@G2a6c@imported-label->binding G4713@label)))) (G30b9@env-names G4710@e) (G30bb@env-labels G4710@e))))) (set! G30ea@parse-binding (lambda (G4716@b) (cons (car G4716@b) ((lambda (G4718@t) (if (memv G4718@t '(core-prim global)) 'procedure (if (memv G4718@t '(core-macro macro global-macro)) 'syntax (if (memv G4718@t '($core-rtd)) 'record (if (eq? (car G4716@b) (cadr G4716@b)) 'syntax 'unknown))))) (cadr G4716@b))))) (set! G30ec@environment? (lambda (G471a@x) ((lambda (G471c@t) (if G471c@t G471c@t (begin '#f (G30d4@interaction-env? G471a@x)))) (G30b5@env? G471a@x)))) (set! G30ee@environment-symbols (lambda (G471e@x) (if (G30b5@env? G471e@x) (vector->list (G30b9@env-names G471e@x)) (if (G30d4@interaction-env? G471e@x) (map values (G2d79@rib-sym* (G30d8@interaction-env-rib G471e@x))) (assertion-violation 'environment-symbols '"not an environment" G471e@x))))) (set! G30f0@environment (lambda G4720@imp* ((lambda (G4722@itc) ((lambda (G4726@G4724@imp-collector G4727@G4725@imp-collector) ((lambda (G472a@swap) (dynamic-wind G472a@swap (lambda () (call-with-values (lambda () (G3090@parse-import-spec* G4720@imp*)) (lambda (G472e@G472c G472f@G472d) ((lambda (G4732@subst-labels G4733@subst-names) (G30b7@make-env G4733@subst-names G4732@subst-labels G4722@itc)) G472f@G472d G472e@G472c)))) G472a@swap)) (lambda () ((lambda (G4736@t) (begin (G4726@G4724@imp-collector G4727@G4725@imp-collector) (set! G4727@G4725@imp-collector G4736@t))) (G4726@G4724@imp-collector))))) G309a@imp-collector G4722@itc)) (G3094@make-collector)))) (set! G30f2@null-environment (lambda (G4738@n) (begin (if (not (eqv? G4738@n '5)) (assertion-violation 'null-environment '"not 5" G4738@n) (void)) (G30f0@environment '(psyntax null-environment-5))))) (set! G30f4@scheme-report-environment (lambda (G473a@n) (begin (if (not (eqv? G473a@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G473a@n) (void)) (G30f0@environment '(psyntax scheme-report-environment-5))))) (set! G30f6@expand (lambda (G473c@x G473d@env) (if (G30b5@env? G473d@env) ((lambda (G4740@rib) ((lambda (G4742@x G4743@itc G4744@rtc G4745@vtc) ((lambda (G474a@x) (begin (G2d99@seal-rib! G4740@rib) (values G474a@x (G4744@rtc)))) ((lambda (G4754@G474c@top-level-context G4755@G474d@inv-collector G4756@G474e@vis-collector G4757@G474f@imp-collector G4758@G4750@top-level-context G4759@G4751@inv-collector G475a@G4752@vis-collector G475b@G4753@imp-collector) ((lambda (G4764@swap) (dynamic-wind G4764@swap (lambda () (G304b@chi-expr G4742@x '() '())) G4764@swap)) (lambda () (begin ((lambda (G4766@t) (begin (G4754@G474c@top-level-context G4758@G4750@top-level-context) (set! G4758@G4750@top-level-context G4766@t))) (G4754@G474c@top-level-context)) ((lambda (G4768@t) (begin (G4755@G474d@inv-collector G4759@G4751@inv-collector) (set! G4759@G4751@inv-collector G4768@t))) (G4755@G474d@inv-collector)) ((lambda (G476a@t) (begin (G4756@G474e@vis-collector G475a@G4752@vis-collector) (set! G475a@G4752@vis-collector G476a@t))) (G4756@G474e@vis-collector)) ((lambda (G476c@t) (begin (G4757@G474f@imp-collector G475b@G4753@imp-collector) (set! G475b@G4753@imp-collector G476c@t))) (G4757@G474f@imp-collector)))))) G3128@top-level-context G3096@inv-collector G3098@vis-collector G309a@imp-collector '#f G4744@rtc G4745@vtc G4743@itc))) (G2dae@make-stx G473c@x G2d58@top-mark* (list G4740@rib) '()) (G30bd@env-itc G473d@env) (G3094@make-collector) (G3094@make-collector))) (G3092@make-top-rib (G30b9@env-names G473d@env) (G30bb@env-labels G473d@env))) (if (G30d4@interaction-env? G473d@env) ((lambda (G476e@rib G476f@r G4770@rtc) ((lambda (G4774@x) (call-with-values (lambda () ((lambda (G4780@G4778@top-level-context G4781@G4779@inv-collector G4782@G477a@vis-collector G4783@G477b@imp-collector G4784@G477c@top-level-context G4785@G477d@inv-collector G4786@G477e@vis-collector G4787@G477f@imp-collector) ((lambda (G4790@swap) (dynamic-wind G4790@swap (lambda () (G309e@chi-interaction-expr G4774@x G476e@rib G476f@r)) G4790@swap)) (lambda () (begin ((lambda (G4792@t) (begin (G4780@G4778@top-level-context G4784@G477c@top-level-context) (set! G4784@G477c@top-level-context G4792@t))) (G4780@G4778@top-level-context)) ((lambda (G4794@t) (begin (G4781@G4779@inv-collector G4785@G477d@inv-collector) (set! G4785@G477d@inv-collector G4794@t))) (G4781@G4779@inv-collector)) ((lambda (G4796@t) (begin (G4782@G477a@vis-collector G4786@G477e@vis-collector) (set! G4786@G477e@vis-collector G4796@t))) (G4782@G477a@vis-collector)) ((lambda (G4798@t) (begin (G4783@G477b@imp-collector G4787@G477f@imp-collector) (set! G4787@G477f@imp-collector G4798@t))) (G4783@G477b@imp-collector)))))) G3128@top-level-context G3096@inv-collector G3098@vis-collector G309a@imp-collector G473d@env G4770@rtc (G3094@make-collector) (G3094@make-collector))) (lambda (G479a@G4776 G479b@G4777) ((lambda (G479e@r^ G479f@e) (begin (G30e0@set-interaction-env-r! G473d@env G479e@r^) (values G479f@e (G4770@rtc)))) G479b@G4777 G479a@G4776)))) (G2dae@make-stx G473c@x G2d58@top-mark* (list G476e@rib) '()))) (G30d8@interaction-env-rib G473d@env) (G30da@interaction-env-r G473d@env) (G3094@make-collector)) (assertion-violation 'expand '"not an environment" G473d@env))))) (set! G30f8@eval (lambda (G47a2@x G47a3@env) (begin (if (not (G30ec@environment? G47a3@env)) (error 'eval '"not an environment" G47a3@env) (void)) (call-with-values (lambda () (G30f6@expand G47a2@x G47a3@env)) (lambda (G47a8@G47a6 G47a9@G47a7) ((lambda (G47ac@invoke-req* G47ad@x) (begin (for-each G2bd9@G2a6e@invoke-library G47ac@invoke-req*) (eval-core (G299a@G2942@expanded->core G47ad@x)))) G47a9@G47a7 G47a8@G47a6)))))) (set! G30fa@library-expander (lambda G4815 ((lambda (G4816) (if (= G4816 '3) (apply (lambda (G47b0@x G47b1@filename G47b2@verify-name) ((lambda (G47b7@build-visit-code G47b9@visit!) (begin (set! G47b7@build-visit-code (lambda (G4803@macro*) (if (null? G4803@macro*) (G2d40@G2cb2@build-void) (G2d3f@G2cb0@build-sequence '#f (map (lambda (G4805@x) ((lambda (G4807@loc G4808@src) (list 'set! G4807@loc G4808@src)) (car G4805@x) (cddr G4805@x))) G4803@macro*))))) (set! G47b9@visit! (lambda (G47fb@macro*) (for-each (lambda (G47fd@x) ((lambda (G47ff@loc G4800@proc) (set-symbol-value! G47ff@loc G4800@proc)) (car G47fd@x) (cadr G47fd@x))) G47fb@macro*))) (call-with-values (lambda () (G30a2@core-library-expander G47b0@x G47b2@verify-name)) (lambda (G47c3@G47ba G47c4@G47bb G47c5@G47bc G47c6@G47bd G47c7@G47be G47c8@G47bf G47c9@G47c0 G47ca@G47c1 G47cb@G47c2) ((lambda (G47d5@export-env G47d6@export-subst G47d7@macro* G47d8@invoke-code G47d9@vis* G47da@inv* G47db@imp* G47dc@ver G47dd@name) ((lambda (G47e7@id G47e8@name G47e9@ver G47ea@imp* G47eb@vis* G47ec@inv* G47ed@visit-proc G47ee@invoke-proc G47ef@visit-code G47f0@invoke-code) (begin (G2bd7@G2a6a@install-library G47e7@id G47e8@name G47e9@ver G47ea@imp* G47eb@vis* G47ec@inv* G47d6@export-subst G47d5@export-env G47ed@visit-proc G47ee@invoke-proc G47ef@visit-code G47f0@invoke-code '#t G47b1@filename) (values G47e7@id G47e8@name G47e9@ver G47ea@imp* G47eb@vis* G47ec@inv* G47f0@invoke-code G47ef@visit-code G47d6@export-subst G47d5@export-env))) (gensym) G47dd@name G47dc@ver (map G2bdd@G2a76@library-spec G47db@imp*) (map G2bdd@G2a76@library-spec G47d9@vis*) (map G2bdd@G2a76@library-spec G47da@inv*) (lambda () (G47b9@visit! G47d7@macro*)) (lambda () (eval-core (G299a@G2942@expanded->core G47d8@invoke-code))) (G47b7@build-visit-code G47d7@macro*) G47d8@invoke-code)) G47cb@G47c2 G47ca@G47c1 G47c9@G47c0 G47c8@G47bf G47c7@G47be G47c6@G47bd G47c5@G47bc G47c4@G47bb G47c3@G47ba))))) '#f '#f)) G4815) (if (= G4816 '2) (apply (lambda (G480b@x G480c@filename) (G30fa@library-expander G480b@x G480c@filename (lambda (G480f@x) (values)))) G4815) (if (= G4816 '1) (apply (lambda (G4811@x) (G30fa@library-expander G4811@x '#f (lambda (G4813@x) (values)))) G4815) (error 'apply '"invalid arg count"))))) (length G4815)))) (set! G30fc@boot-library-expand (lambda (G4817@x) (call-with-values (lambda () (G30fa@library-expander G4817@x)) (lambda (G4823@G4819 G4824@G481a G4825@G481b G4826@G481c G4827@G481d G4828@G481e G4829@G481f G482a@G4820 G482b@G4821 G482c@G4822) ((lambda (G4837@export-env G4838@export-subst G4839@visit-code G483a@invoke-code G483b@inv* G483c@vis* G483d@imp* G483e@ver G483f@name G4840@id) (values G483f@name G483a@invoke-code G4838@export-subst G4837@export-env)) G482c@G4822 G482b@G4821 G482a@G4820 G4829@G481f G4828@G481e G4827@G481d G4826@G481c G4825@G481b G4824@G481a G4823@G4819))))) (set! G30fe@rev-map-append (lambda (G484b@f G484c@ls G484d@ac) (if (null? G484c@ls) G484d@ac (G30fe@rev-map-append G484b@f (cdr G484c@ls) (cons (G484b@f (car G484c@ls)) G484d@ac))))) (set! G3100@build-exports (lambda (G4851@lex*+loc* G4852@init*) (G2d3f@G2cb0@build-sequence '#f (cons (G2d40@G2cb2@build-void) (G30fe@rev-map-append (lambda (G4855@x) (list 'set! (cdr G4855@x) (car G4855@x))) G4851@lex*+loc* G4852@init*))))) (set! G3102@make-export-subst (lambda (G4857@name* G4858@id*) (map (lambda (G485b@name G485c@id) ((lambda (G485f@label) (begin (if (not G485f@label) (G311a@syntax-violation '#f '"cannot export unbound identifier" G485c@id) (void)) (cons G485b@name G485f@label))) (G2dfe@id->label G485c@id))) G4857@name* G4858@id*))) (set! G3104@make-export-env/macros (lambda (G4861@lex* G4862@loc* G4863@r) ((lambda (G4868@lookup) (begin (set! G4868@lookup (lambda (G4885@x) ((letrec ((G4887@f (lambda (G4889@x G488a@lex* G488b@loc*) (if (pair? G488a@lex*) (if (eq? G4889@x (car G488a@lex*)) (car G488b@loc*) (G4887@f G4889@x (cdr G488a@lex*) (cdr G488b@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4887@f) G4885@x G4861@lex* G4862@loc*))) ((letrec ((G4869@f (lambda (G486b@r G486c@env G486d@global* G486e@macro*) (if (null? G486b@r) (values G486c@env G486d@global* G486e@macro*) ((lambda (G4873@x) ((lambda (G4875@label G4876@b) ((lambda (G4879@t) (if (memv G4879@t '(lexical)) ((lambda (G487b@v) ((lambda (G487d@loc G487e@type) (G4869@f (cdr G486b@r) (cons (cons* G4875@label G487e@type G487d@loc) G486c@env) (cons (cons (G2fb7@lexical-var G487b@v) G487d@loc) G486d@global*) G486e@macro*)) (G4868@lookup (G2fb7@lexical-var G487b@v)) (if (G2fb9@lexical-mutable? G487b@v) 'mutable 'global))) (G2e08@binding-value G4876@b)) (if (memv G4879@t '(local-macro)) ((lambda (G4881@loc) (G4869@f (cdr G486b@r) (cons (cons* G4875@label 'global-macro G4881@loc) G486c@env) G486d@global* (cons (cons G4881@loc (G2e08@binding-value G4876@b)) G486e@macro*))) (gensym)) (if (memv G4879@t '(local-macro!)) ((lambda (G4883@loc) (G4869@f (cdr G486b@r) (cons (cons* G4875@label 'global-macro! G4883@loc) G486c@env) G486d@global* (cons (cons G4883@loc (G2e08@binding-value G4876@b)) G486e@macro*))) (gensym)) (if (memv G4879@t '($rtd $module)) (G4869@f (cdr G486b@r) (cons G4873@x G486c@env) G486d@global* G486e@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e06@binding-type G4876@b) (G2e08@binding-value G4876@b))))))) (G2e06@binding-type G4876@b))) (car G4873@x) (cdr G4873@x))) (car G486b@r)))))) G4869@f) G4863@r '() '() '()))) '#f))) (set! G3106@generate-temporaries (lambda (G488f@ls) ((lambda (G4891@t) ((lambda (G4893@ls/false) (if G4893@ls/false (apply (lambda (G4895@ls) (map (lambda (G4897@x) (G2dae@make-stx ((lambda (G4899@x) (if ((lambda (G489b@t) (if G489b@t G489b@t (begin '#f (string? G4899@x)))) (symbol? G4899@x)) (gensym G4899@x) (gensym 't))) (G3120@syntax->datum G4897@x)) G2d58@top-mark* '() '())) G4895@ls)) G4893@ls/false) ((lambda (G489d@t) ((lambda (G489f@ls/false) (if G489f@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G489f@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G489d@t))) (G3027@syntax-dispatch G489d@t '_))) G4891@t))) (G3027@syntax-dispatch G4891@t 'each-any))) G488f@ls))) (set! G3108@free-identifier=? (lambda (G48a1@x G48a2@y) (if (G2de4@id? G48a1@x) (if (G2de4@id? G48a2@y) (G2dec@free-id=? G48a1@x G48a2@y) (assertion-violation 'free-identifier=? '"not an identifier" G48a2@y)) (assertion-violation 'free-identifier=? '"not an identifier" G48a1@x)))) (set! G310a@bound-identifier=? (lambda (G48a5@x G48a6@y) (if (G2de4@id? G48a5@x) (if (G2de4@id? G48a6@y) (G2dea@bound-id=? G48a5@x G48a6@y) (assertion-violation 'bound-identifier=? '"not an identifier" G48a6@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G48a5@x)))) (set! G310c@make-source-condition (lambda (G48a9@x) ((lambda (G48b3@G48ae G48b5@G48b0 G48b7@G48af G48bc@G48ad G48be@make-source-condition G48c0@G48ab G48c2@G48ac G48c4@source-condition? G48c6@source-filename G48c8@source-character) (begin (set! G48b3@G48ae (make-record-type-descriptor '&source-information &condition-rtd 'G48b1 '#f '#f '#((immutable file-name) (immutable character)))) (set! G48b5@G48b0 '#f) (set! G48b7@G48af (make-record-constructor-descriptor G48b3@G48ae &condition-rcd G48b5@G48b0)) (set! G48bc@G48ad (record-predicate G48b3@G48ae)) (set! G48be@make-source-condition (record-constructor G48b7@G48af)) (set! G48c0@G48ab (record-accessor G48b3@G48ae '0)) (set! G48c2@G48ac (record-accessor G48b3@G48ae '1)) (set! G48c4@source-condition? (condition-predicate G48b3@G48ae)) (set! G48c6@source-filename (condition-accessor G48b3@G48ae G48c0@G48ab)) (set! G48c8@source-character (condition-accessor G48b3@G48ae G48c2@G48ac)) (if (pair? G48a9@x) (G48be@make-source-condition (car G48a9@x) (cdr G48a9@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G310e@extract-position-condition (lambda (G48c9@x) (G310c@make-source-condition (G3110@expression-position G48c9@x)))) (set! G3110@expression-position (lambda (G48cb@x) (if (G2dac@stx? G48cb@x) (begin '#f ((lambda (G48cd@x) (if (G292e@G2859@annotation? G48cd@x) (begin '#f (G292f@G285b@annotation-source G48cd@x)) '#f)) (G2db0@stx-expr G48cb@x))) '#f))) (set! G3112@assertion-error (lambda (G48cf@expr G48d0@pos) (raise (condition (G4bc7@G4af9@make-assertion-violation) (G4bd5@G4b27@make-who-condition 'assert) (G4ba7@G4a91@make-message-condition '"assertion failed") (G4bcd@G4b0e@make-irritants-condition (list G48cf@expr)) (G310c@make-source-condition G48d0@pos))))) (set! G3114@syntax-error (lambda (G48d3@x . G48d5@args) (begin (if (not (for-all string? G48d5@args)) (assertion-violation 'syntax-error '"invalid argument" G48d5@args) (void)) (raise (condition (G4ba7@G4a91@make-message-condition (if (null? G48d5@args) '"invalid syntax" (apply string-append G48d5@args))) (G4bef@G4b7d@make-syntax-violation (G3120@syntax->datum G48d3@x) '#f) (G310e@extract-position-condition G48d3@x) (G3116@extract-trace G48d3@x)))))) (set! G3116@extract-trace (lambda (G48d7@x) ((lambda (G48e0@G48db G48e2@G48dd G48e4@G48dc G48e9@G48da G48eb@make-trace G48ed@G48d9 G48ef@trace? G48f1@trace-form) (begin (set! G48e0@G48db (make-record-type-descriptor '&trace &condition-rtd 'G48de '#f '#f '#((immutable form)))) (set! G48e2@G48dd '#f) (set! G48e4@G48dc (make-record-constructor-descriptor G48e0@G48db &condition-rcd G48e2@G48dd)) (set! G48e9@G48da (record-predicate G48e0@G48db)) (set! G48eb@make-trace (record-constructor G48e4@G48dc)) (set! G48ed@G48d9 (record-accessor G48e0@G48db '0)) (set! G48ef@trace? (condition-predicate G48e0@G48db)) (set! G48f1@trace-form (condition-accessor G48e0@G48db G48ed@G48d9)) ((letrec ((G48f2@f (lambda (G48f4@x) (if (G2dac@stx? G48f4@x) (apply condition (G48eb@make-trace G48f4@x) (map G48f2@f (G2db6@stx-ae* G48f4@x))) (if (G292e@G2859@annotation? G48f4@x) (G48eb@make-trace (G2dae@make-stx G48f4@x '() '() '())) (condition)))))) G48f2@f) G48d7@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3118@syntax-violation* (lambda (G48f6@who G48f7@msg G48f8@form G48f9@condition-object) (begin (if (not (string? G48f7@msg)) (assertion-violation 'syntax-violation '"message is not a string" G48f7@msg) (void)) ((lambda (G48fe@who) (raise (condition (if G48fe@who (G4bd5@G4b27@make-who-condition G48fe@who) (condition)) (G4ba7@G4a91@make-message-condition G48f7@msg) G48f9@condition-object (G310e@extract-position-condition G48f8@form) (G3116@extract-trace G48f8@form)))) (if ((lambda (G4900@t) (if G4900@t G4900@t (begin '#f (symbol? G48f6@who)))) (string? G48f6@who)) G48f6@who (if (not G48f6@who) ((lambda (G4902@t) ((lambda (G4904@ls/false) (if (if G4904@ls/false (begin '#f (apply (lambda (G4906@id) (G2de4@id? G4906@id)) G4904@ls/false)) '#f) (apply (lambda (G4908@id) (G3120@syntax->datum G4908@id)) G4904@ls/false) ((lambda (G490a@t) ((lambda (G490c@ls/false) (if (if G490c@ls/false (begin '#f (apply (lambda (G490e@id G490f@rest) (G2de4@id? G490e@id)) G490c@ls/false)) '#f) (apply (lambda (G4912@id G4913@rest) (G3120@syntax->datum G4912@id)) G490c@ls/false) ((lambda (G4916@t) ((lambda (G4918@ls/false) (if G4918@ls/false (apply (lambda () '#f) G4918@ls/false) (G311a@syntax-violation '#f '"invalid syntax" G4916@t))) (G3027@syntax-dispatch G4916@t '_))) G490a@t))) (G3027@syntax-dispatch G490a@t '(any . any)))) G4902@t))) (G3027@syntax-dispatch G4902@t 'any))) G48f8@form) (assertion-violation 'syntax-violation '"invalid who argument" G48f6@who))))))) (set! G311a@syntax-violation (lambda G4928 ((lambda (G4929) (if (= G4929 '3) (apply (lambda (G491a@who G491b@msg G491c@form) (G311a@syntax-violation G491a@who G491b@msg G491c@form '#f)) G4928) (if (= G4929 '4) (apply (lambda (G4920@who G4921@msg G4922@form G4923@subform) (G3118@syntax-violation* G4920@who G4921@msg G4922@form (G4bef@G4b7d@make-syntax-violation (G3120@syntax->datum G4922@form) (G3120@syntax->datum G4923@subform)))) G4928) (error 'apply '"invalid arg count")))) (length G4928)))) (set! G311c@identifier? (lambda (G492a@x) (G2de4@id? G492a@x))) (set! G311e@datum->syntax (lambda (G492c@id G492d@datum) (if (G2de4@id? G492c@id) (G2dc2@datum->stx G492c@id G492d@datum) (assertion-violation 'datum->syntax '"not an identifier" G492c@id)))) (set! G3120@syntax->datum (lambda (G4930@x) (G2dfa@stx->datum G4930@x))) (set! G3122@compile-r6rs-top-level (lambda (G4932@x*) (call-with-values (lambda () (G30a6@top-level-expander G4932@x*)) (lambda (G4936@G4934 G4937@G4935) ((lambda (G493a@invoke-code G493b@lib*) (lambda () (begin (for-each G2bd9@G2a6e@invoke-library G493b@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G299a@G2942@expanded->core G493a@invoke-code)) (void)) (eval-core (G299a@G2942@expanded->core G493a@invoke-code))))) G4937@G4935 G4936@G4934))))) (set! G3124@pre-compile-r6rs-top-level (lambda (G493e@x*) (call-with-values (lambda () (G30a6@top-level-expander G493e@x*)) (lambda (G4942@G4940 G4943@G4941) ((lambda (G4946@invoke-code G4947@lib*) (begin (for-each G2bd9@G2a6e@invoke-library G4947@lib*) (G2934@G2865@compile-core (G299a@G2942@expanded->core G4946@invoke-code)))) G4943@G4941 G4942@G4940))))) (set! G3126@interaction-environment ((lambda (G494a@the-env) (lambda () ((lambda (G494c@t) (if G494c@t G494c@t (begin '#f ((lambda (G494e@lib G494f@rib) (begin ((lambda (G4952@subst) (begin (G2d83@set-rib-sym*! G494f@rib (map car G4952@subst)) (G2d85@set-rib-mark**! G494f@rib (map (lambda (G4954@x) G2d58@top-mark*) G4952@subst)) (G2d87@set-rib-label*! G494f@rib (map cdr G4952@subst)))) (G2bae@G2a18@library-subst G494e@lib)) ((lambda (G4956@env) (begin (set! G494a@the-env G4956@env) G4956@env)) (G30d6@make-interaction-env G494f@rib '() '())))) (G2bd2@G2a60@find-library-by-name '(mosh interaction)) (G2d8f@make-cache-rib))))) G494a@the-env))) '#f)) (set! G3128@top-level-context (G2936@G2869@make-parameter '#f)) (begin (set! G4a65@G3128@top-level-context G3128@top-level-context) (set! G4a64@G3126@interaction-environment G3126@interaction-environment) (set! G4a63@G3124@pre-compile-r6rs-top-level G3124@pre-compile-r6rs-top-level) (set! G4a62@G3122@compile-r6rs-top-level G3122@compile-r6rs-top-level) (set! G4a61@G3120@syntax->datum G3120@syntax->datum) (set! G4a60@G311e@datum->syntax G311e@datum->syntax) (set! G4a5f@G311c@identifier? G311c@identifier?) (set! G4a5e@G311a@syntax-violation G311a@syntax-violation) (set! G4a5d@G3118@syntax-violation* G3118@syntax-violation*) (set! G4a5c@G3116@extract-trace G3116@extract-trace) (set! G4a5b@G3114@syntax-error G3114@syntax-error) (set! G4a5a@G3112@assertion-error G3112@assertion-error) (set! G4a59@G3110@expression-position G3110@expression-position) (set! G4a58@G310e@extract-position-condition G310e@extract-position-condition) (set! G4a57@G310c@make-source-condition G310c@make-source-condition) (set! G4a56@G310a@bound-identifier=? G310a@bound-identifier=?) (set! G4a55@G3108@free-identifier=? G3108@free-identifier=?) (set! G4a54@G3106@generate-temporaries G3106@generate-temporaries) (set! G4a53@G3104@make-export-env/macros G3104@make-export-env/macros) (set! G4a52@G3102@make-export-subst G3102@make-export-subst) (set! G4a51@G3100@build-exports G3100@build-exports) (set! G4a50@G30fe@rev-map-append G30fe@rev-map-append) (set! G4a4f@G30fc@boot-library-expand G30fc@boot-library-expand) (set! G4a4e@G30fa@library-expander G30fa@library-expander) (set! G4a4d@G30f8@eval G30f8@eval) (set! G4a4c@G30f6@expand G30f6@expand) (set! G4a4b@G30f4@scheme-report-environment G30f4@scheme-report-environment) (set! G4a4a@G30f2@null-environment G30f2@null-environment) (set! G4a49@G30f0@environment G30f0@environment) (set! G4a48@G30ee@environment-symbols G30ee@environment-symbols) (set! G4a47@G30ec@environment? G30ec@environment?) (set! G4a46@G30ea@parse-binding G30ea@parse-binding) (set! G4a45@G30e8@environment-bindings G30e8@environment-bindings) (set! G4a44@G30e6@interaction-environment-symbols G30e6@interaction-environment-symbols) (set! G4a43@G30e4@rp G30e4@rp) (set! G4a42@G30e2@set-interaction-env-locs! G30e2@set-interaction-env-locs!) (set! G4a41@G30e0@set-interaction-env-r! G30e0@set-interaction-env-r!) (set! G4a40@G30de@set-interaction-env-rib! G30de@set-interaction-env-rib!) (set! G4a3f@G30dc@interaction-env-locs G30dc@interaction-env-locs) (set! G4a3e@G30da@interaction-env-r G30da@interaction-env-r) (set! G4a3d@G30d8@interaction-env-rib G30d8@interaction-env-rib) (set! G4a3c@G30d6@make-interaction-env G30d6@make-interaction-env) (set! G4a3b@G30d4@interaction-env? G30d4@interaction-env?) (set! G4a3a@G30cf@G30c7 G30cf@G30c7) (set! G4a39@G30cd@G30c8 G30cd@G30c8) (set! G4a38@G30cb@G30c6 G30cb@G30c6) (set! G4a37@G30c5@rp G30c5@rp) (set! G4a36@G30c3@set-env-itc! G30c3@set-env-itc!) (set! G4a35@G30c1@set-env-labels! G30c1@set-env-labels!) (set! G4a34@G30bf@set-env-names! G30bf@set-env-names!) (set! G4a33@G30bd@env-itc G30bd@env-itc) (set! G4a32@G30bb@env-labels G30bb@env-labels) (set! G4a31@G30b9@env-names G30b9@env-names) (set! G4a30@G30b7@make-env G30b7@make-env) (set! G4a2f@G30b5@env? G30b5@env?) (set! G4a2e@G30b0@G30a8 G30b0@G30a8) (set! G4a2d@G30ae@G30a9 G30ae@G30a9) (set! G4a2c@G30ac@G30a7 G30ac@G30a7) (set! G4a2b@G30a6@top-level-expander G30a6@top-level-expander) (set! G4a2a@G30a4@parse-top-level-program G30a4@parse-top-level-program) (set! G4a29@G30a2@core-library-expander G30a2@core-library-expander) (set! G4a28@G30a0@library-body-expander G30a0@library-body-expander) (set! G4a27@G309e@chi-interaction-expr G309e@chi-interaction-expr) (set! G4a26@G309c@chi-library-internal G309c@chi-library-internal) (set! G4a25@G309a@imp-collector G309a@imp-collector) (set! G4a24@G3098@vis-collector G3098@vis-collector) (set! G4a23@G3096@inv-collector G3096@inv-collector) (set! G4a22@G3094@make-collector G3094@make-collector) (set! G4a21@G3092@make-top-rib G3092@make-top-rib) (set! G4a20@G3090@parse-import-spec* G3090@parse-import-spec*) (set! G4a1f@G308e@parse-library G308e@parse-library) (set! G4a1e@G308c@parse-library-name G308c@parse-library-name) (set! G4a1d@G308a@parse-exports G308a@parse-exports) (set! G4a1c@G3088@expand-transformer G3088@expand-transformer) (set! G4a1b@G3086@chi-body* G3086@chi-body*) (set! G4a1a@G3084@chi-internal-module G3084@chi-internal-module) (set! G4a19@G3082@module-interface-exp-id* G3082@module-interface-exp-id*) (set! G4a18@G3080@set-module-interface-exp-lab-vec! G3080@set-module-interface-exp-lab-vec!) (set! G4a17@G307e@set-module-interface-exp-id-vec! G307e@set-module-interface-exp-id-vec!) (set! G4a16@G307c@set-module-interface-first-mark! G307c@set-module-interface-first-mark!) (set! G4a15@G307a@module-interface-exp-lab-vec G307a@module-interface-exp-lab-vec) (set! G4a14@G3078@module-interface-exp-id-vec G3078@module-interface-exp-id-vec) (set! G4a13@G3076@module-interface-first-mark G3076@module-interface-first-mark) (set! G4a12@G3074@make-module-interface G3074@make-module-interface) (set! G4a11@G3072@module-interface? G3072@module-interface?) (set! G4a10@G306d@G3065 G306d@G3065) (set! G4a0f@G306b@G3066 G306b@G3066) (set! G4a0e@G3069@G3064 G3069@G3064) (set! G4a0d@G3063@parse-module G3063@parse-module) (set! G4a0c@G3061@chi-internal G3061@chi-internal) (set! G4a0b@G305f@find-dups G305f@find-dups) (set! G4a0a@G305d@find-bound=? G305d@find-bound=?) (set! G4a09@G305b@chi-rhs* G305b@chi-rhs*) (set! G4a08@G3059@expand-interaction-rhs*/init* G3059@expand-interaction-rhs*/init*) (set! G4a07@G3057@chi-rhs G3057@chi-rhs) (set! G4a06@G3055@chi-defun G3055@chi-defun) (set! G4a05@G3053@chi-lambda-clause* G3053@chi-lambda-clause*) (set! G4a04@G3051@chi-lambda-clause G3051@chi-lambda-clause) (set! G4a03@G304f@verify-formals G304f@verify-formals) (set! G4a02@G304d@chi-set! G304d@chi-set!) (set! G4a01@G304b@chi-expr G304b@chi-expr) (set! G4a00@G3049@chi-application G3049@chi-application) (set! G49ff@G3047@chi-expr* G3047@chi-expr*) (set! G49fe@G3045@chi-global-macro G3045@chi-global-macro) (set! G49fd@G3043@chi-local-macro G3043@chi-local-macro) (set! G49fc@G3041@chi-macro G3041@chi-macro) (set! G49fb@G303f@do-macro-call G303f@do-macro-call) (set! G49fa@G303d@local-macro-transformer G303d@local-macro-transformer) (set! G49f9@G303b@macro-transformer G303b@macro-transformer) (set! G49f8@G3039@symbol-macro G3039@symbol-macro) (set! G49f7@G3037@file-options-macro G3037@file-options-macro) (set! G49f6@G3035@core-macro-transformer G3035@core-macro-transformer) (set! G49f5@G3033@syntax-transformer G3033@syntax-transformer) (set! G49f4@G3031@ellipsis-map G3031@ellipsis-map) (set! G49f3@G302f@syntax-case-transformer G302f@syntax-case-transformer) (set! G49f2@G302d@verify-literals G302d@verify-literals) (set! G49f1@G302b@underscore? G302b@underscore?) (set! G49f0@G3029@ellipsis? G3029@ellipsis?) (set! G49ef@G3027@syntax-dispatch G3027@syntax-dispatch) (set! G49ee@G3025@convert-pattern G3025@convert-pattern) (set! G49ed@G3023@foreign-call-transformer G3023@foreign-call-transformer) (set! G49ec@G3021@parameterize-macro G3021@parameterize-macro) (set! G49eb@G301f@incorrect-usage-macro G301f@incorrect-usage-macro) (set! G49ea@G301d@define-condition-type-macro G301d@define-condition-type-macro) (set! G49e9@G301b@define-record-type-macro G301b@define-record-type-macro) (set! G49e8@G3019@define-struct-macro G3019@define-struct-macro) (set! G49e7@G3017@quasisyntax-macro G3017@quasisyntax-macro) (set! G49e6@G3015@quasiquote-macro G3015@quasiquote-macro) (set! G49e5@G3013@syntax-rules-macro G3013@syntax-rules-macro) (set! G49e4@G3011@include-into-macro G3011@include-into-macro) (set! G49e3@G300f@include-macro G300f@include-macro) (set! G49e2@G300d@do-include G300d@do-include) (set! G49e1@G300b@cond-macro G300b@cond-macro) (set! G49e0@G3009@and-macro G3009@and-macro) (set! G49df@G3007@or-macro G3007@or-macro) (set! G49de@G3005@let*-macro G3005@let*-macro) (set! G49dd@G3003@do-macro G3003@do-macro) (set! G49dc@G3001@identifier-syntax-macro G3001@identifier-syntax-macro) (set! G49db@G2fff@endianness-macro G2fff@endianness-macro) (set! G49da@G2ffd@assert-macro G2ffd@assert-macro) (set! G49d9@G2ffb@delay-macro G2ffb@delay-macro) (set! G49d8@G2ff9@time-macro G2ff9@time-macro) (set! G49d7@G2ff7@define-enumeration-macro G2ff7@define-enumeration-macro) (set! G49d6@G2ff5@guard-macro G2ff5@guard-macro) (set! G49d5@G2ff3@trace-letrec-syntax-macro G2ff3@trace-letrec-syntax-macro) (set! G49d4@G2ff1@trace-let-syntax-macro G2ff1@trace-let-syntax-macro) (set! G49d3@G2fef@trace-let/rec-syntax G2fef@trace-let/rec-syntax) (set! G49d2@G2fed@trace-define-syntax-macro G2fed@trace-define-syntax-macro) (set! G49d1@G2feb@trace-define-macro G2feb@trace-define-macro) (set! G49d0@G2fe9@trace-lambda-macro G2fe9@trace-lambda-macro) (set! G49cf@G2fe7@let*-values-macro G2fe7@let*-values-macro) (set! G49ce@G2fe5@let-values-macro G2fe5@let-values-macro) (set! G49cd@G2fe3@let-macro G2fe3@let-macro) (set! G49cc@G2fe1@invalid-fmls-error G2fe1@invalid-fmls-error) (set! G49cb@G2fdf@with-syntax-macro G2fdf@with-syntax-macro) (set! G49ca@G2fdd@bless G2fdd@bless) (set! G49c9@G2fdb@lambda-transformer G2fdb@lambda-transformer) (set! G49c8@G2fd9@case-lambda-transformer G2fd9@case-lambda-transformer) (set! G49c7@G2fd7@quote-transformer G2fd7@quote-transformer) (set! G49c6@G2fd5@case-macro G2fd5@case-macro) (set! G49c5@G2fd3@if-transformer G2fd3@if-transformer) (set! G49c4@G2fd1@unless-macro G2fd1@unless-macro) (set! G49c3@G2fcf@when-macro G2fcf@when-macro) (set! G49c2@G2fcd@record-constructor-descriptor-transformer G2fcd@record-constructor-descriptor-transformer) (set! G49c1@G2fcb@record-type-descriptor-transformer G2fcb@record-type-descriptor-transformer) (set! G49c0@G2fc9@type-descriptor-transformer G2fc9@type-descriptor-transformer) (set! G49bf@G2fc7@fluid-let-syntax-transformer G2fc7@fluid-let-syntax-transformer) (set! G49be@G2fc5@letrec*-transformer G2fc5@letrec*-transformer) (set! G49bd@G2fc3@letrec-transformer G2fc3@letrec-transformer) (set! G49bc@G2fc1@letrec-helper G2fc1@letrec-helper) (set! G49bb@G2fbf@add-lexicals G2fbf@add-lexicals) (set! G49ba@G2fbd@add-lexical G2fbd@add-lexical) (set! G49b9@G2fbb@set-lexical-mutable! G2fbb@set-lexical-mutable!) (set! G49b8@G2fb9@lexical-mutable? G2fb9@lexical-mutable?) (set! G49b7@G2fb7@lexical-var G2fb7@lexical-var) (set! G49b6@G2fb5@scheme-stx G2fb5@scheme-stx) (set! G49b5@G2fb3@scheme-stx-hashtable G2fb3@scheme-stx-hashtable) (set! G49b4@G2fb1@parse-define-syntax G2fb1@parse-define-syntax) (set! G49b3@G2faf@parse-define G2faf@parse-define) (set! G49b2@G2e2b@make-eval-transformer G2e2b@make-eval-transformer) (set! G49b1@G2e29@variable-transformer-procedure G2e29@variable-transformer-procedure) (set! G49b0@G2e27@variable-transformer? G2e27@variable-transformer?) (set! G49af@G2e25@make-variable-transformer G2e25@make-variable-transformer) (set! G49ae@G2e23@sanitize-binding G2e23@sanitize-binding) (set! G49ad@G2e0c@syntax-type G2e0c@syntax-type) (set! G49ac@G2e0a@raise-unbound-error G2e0a@raise-unbound-error) (set! G49ab@G2e08@binding-value G2e08@binding-value) (set! G49aa@G2e06@binding-type G2e06@binding-type) (set! G49a9@G2e04@make-binding G2e04@make-binding) (set! G49a8@G2e02@label->binding G2e02@label->binding) (set! G49a7@G2e00@id->real-label G2e00@id->real-label) (set! G49a6@G2dfe@id->label G2dfe@id->label) (set! G49a5@G2dfc@same-marks*? G2dfc@same-marks*?) (set! G49a4@G2dfa@stx->datum G2dfa@stx->datum) (set! G49a3@G2df8@strip G2df8@strip) (set! G49a2@G2df6@strip-annotations G2df6@strip-annotations) (set! G49a1@G2df4@self-evaluating? G2df4@self-evaluating?) (set! G49a0@G2df2@bound-id-member? G2df2@bound-id-member?) (set! G499f@G2df0@distinct-bound-ids? G2df0@distinct-bound-ids?) (set! G499e@G2dee@valid-bound-ids? G2dee@valid-bound-ids?) (set! G499d@G2dec@free-id=? G2dec@free-id=?) (set! G499c@G2dea@bound-id=? G2dea@bound-id=?) (set! G499b@G2de8@same-marks? G2de8@same-marks?) (set! G499a@G2de6@id->sym G2de6@id->sym) (set! G4999@G2de4@id? G2de4@id?) (set! G4998@G2de2@syntax->list G2de2@syntax->list) (set! G4997@G2de0@syntax-cdr G2de0@syntax-cdr) (set! G4996@G2dde@syntax-car G2dde@syntax-car) (set! G4995@G2ddc@syntax-list? G2ddc@syntax-list?) (set! G4994@G2dda@syntax-null? G2dda@syntax-null?) (set! G4993@G2dd8@syntax-vector? G2dd8@syntax-vector?) (set! G4992@G2dd6@syntax-pair? G2dd6@syntax-pair?) (set! G4991@G2dd4@syntax-vector->list G2dd4@syntax-vector->list) (set! G4990@G2dd2@syntax-kind? G2dd2@syntax-kind?) (set! G498f@G2dd0@add-subst G2dd0@add-subst) (set! G498e@G2dce@add-mark G2dce@add-mark) (set! G498d@G2dcc@mkstx G2dcc@mkstx) (set! G498c@G2dca@join-wraps G2dca@join-wraps) (set! G498b@G2dc8@anti-mark? G2dc8@anti-mark?) (set! G498a@G2dc6@anti-mark G2dc6@anti-mark) (set! G4989@G2dc4@gen-mark G2dc4@gen-mark) (set! G4988@G2dc2@datum->stx G2dc2@datum->stx) (set! G4987@G2dc0@rp G2dc0@rp) (set! G4986@G2dbe@set-stx-ae*! G2dbe@set-stx-ae*!) (set! G4985@G2dbc@set-stx-subst*! G2dbc@set-stx-subst*!) (set! G4984@G2dba@set-stx-mark*! G2dba@set-stx-mark*!) (set! G4983@G2db8@set-stx-expr! G2db8@set-stx-expr!) (set! G4982@G2db6@stx-ae* G2db6@stx-ae*) (set! G4981@G2db4@stx-subst* G2db4@stx-subst*) (set! G4980@G2db2@stx-mark* G2db2@stx-mark*) (set! G497f@G2db0@stx-expr G2db0@stx-expr) (set! G497e@G2dae@make-stx G2dae@make-stx) (set! G497d@G2dac@stx? G2dac@stx?) (set! G497c@G2da7@G2d9f G2da7@G2d9f) (set! G497b@G2da5@G2da0 G2da5@G2da0) (set! G497a@G2da3@G2d9e G2da3@G2d9e) (set! G4979@G2d9d@make-full-rib G2d9d@make-full-rib) (set! G4978@G2d9b@unseal-rib! G2d9b@unseal-rib!) (set! G4977@G2d99@seal-rib! G2d99@seal-rib!) (set! G4976@G2d97@make-rib-map G2d97@make-rib-map) (set! G4975@G2d95@extend-rib/nc! G2d95@extend-rib/nc!) (set! G4974@G2d93@extend-rib! G2d93@extend-rib!) (set! G4973@G2d91@find-label G2d91@find-label) (set! G4972@G2d8f@make-cache-rib G2d8f@make-cache-rib) (set! G4971@G2d8d@make-empty-rib G2d8d@make-empty-rib) (set! G4970@G2d8b@set-rib-cache! G2d8b@set-rib-cache!) (set! G496f@G2d89@set-rib-sealed/freq! G2d89@set-rib-sealed/freq!) (set! G496e@G2d87@set-rib-label*! G2d87@set-rib-label*!) (set! G496d@G2d85@set-rib-mark**! G2d85@set-rib-mark**!) (set! G496c@G2d83@set-rib-sym*! G2d83@set-rib-sym*!) (set! G496b@G2d81@rib-cache G2d81@rib-cache) (set! G496a@G2d7f@rib-sealed/freq G2d7f@rib-sealed/freq) (set! G4969@G2d7d@rib-label* G2d7d@rib-label*) (set! G4968@G2d7b@rib-mark** G2d7b@rib-mark**) (set! G4967@G2d79@rib-sym* G2d79@rib-sym*) (set! G4966@G2d77@make-rib G2d77@make-rib) (set! G4965@G2d75@rib? G2d75@rib?) (set! G4964@G2d70@G2d68 G2d70@G2d68) (set! G4963@G2d6e@G2d69 G2d6e@G2d69) (set! G4962@G2d6c@G2d67 G2d6c@G2d67) (set! G4961@G2d66@gen-define-label G2d66@gen-define-label) (set! G4960@G2d64@gen-define-label+loc G2d64@gen-define-label+loc) (set! G495f@G2d62@gen-top-level-label G2d62@gen-top-level-label) (set! G495e@G2d60@gen-label G2d60@gen-label) (set! G495d@G2d5e@gen-global G2d5e@gen-global) (set! G495c@G2d5c@gen-lexical G2d5c@gen-lexical) (set! G495b@G2d5a@top-marked? G2d5a@top-marked?) (set! G495a@G2d58@top-mark* G2d58@top-mark*) (set! G4959@G2d53@set-union G2d53@set-union) (set! G4958@G2d51@set-cons G2d51@set-cons) (G2bcf@G2a5a@current-library-expander G30fa@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4a6f@G4a6a G4a71@G4a6c G4a73@G4a6b G4a78@&condition? G4a7a@make-&condition G4a7c@&condition-rtd G4a7e@&condition-rcd G4a86@G4a81 G4a88@G4a83 G4a8a@G4a82 G4a8f@G4a80 G4a91@make-message-condition G4a93@G4a7f G4a95@message-condition? G4a97@condition-message G4a9e@G4a99 G4aa0@G4a9b G4aa2@G4a9a G4aa7@G4a98 G4aa9@make-warning G4aab@warning? G4ab2@G4aad G4ab4@G4aaf G4ab6@G4aae G4abb@G4aac G4abd@make-serious-condition G4abf@serious-condition? G4ac6@G4ac1 G4ac8@G4ac3 G4aca@G4ac2 G4acf@G4ac0 G4ad1@make-error G4ad3@error? G4ada@G4ad5 G4adc@G4ad7 G4ade@G4ad6 G4ae3@G4ad4 G4ae5@make-violation G4ae7@violation? G4aee@G4ae9 G4af0@G4aeb G4af2@G4aea G4af7@G4ae8 G4af9@make-assertion-violation G4afb@assertion-violation? G4b03@G4afe G4b05@G4b00 G4b07@G4aff G4b0c@G4afd G4b0e@make-irritants-condition G4b10@G4afc G4b12@irritants-condition? G4b14@condition-irritants G4b1c@G4b17 G4b1e@G4b19 G4b20@G4b18 G4b25@G4b16 G4b27@make-who-condition G4b29@G4b15 G4b2b@who-condition? G4b2d@condition-who G4b34@G4b2f G4b36@G4b31 G4b38@G4b30 G4b3d@G4b2e G4b3f@make-non-continuable-violation G4b41@non-continuable-violation? G4b48@G4b43 G4b4a@G4b45 G4b4c@G4b44 G4b51@G4b42 G4b53@make-implementation-restriction-violation G4b55@implementation-restriction-violation? G4b5c@G4b57 G4b5e@G4b59 G4b60@G4b58 G4b65@G4b56 G4b67@make-lexical-violation G4b69@lexical-violation? G4b72@G4b6d G4b74@G4b6f G4b76@G4b6e G4b7b@G4b6c G4b7d@make-syntax-violation G4b7f@G4b6a G4b81@G4b6b G4b83@syntax-violation? G4b85@syntax-violation-form G4b87@syntax-violation-subform G4b8e@G4b89 G4b90@G4b8b G4b92@G4b8a G4b97@G4b88 G4b99@make-undefined-violation G4b9b@undefined-violation?) (begin (set! G4a6f@G4a6a (make-record-type-descriptor '&condition '#f 'G4a6d '#f '#f '#())) (set! G4a71@G4a6c '#f) (set! G4a73@G4a6b (make-record-constructor-descriptor G4a6f@G4a6a '#f G4a71@G4a6c)) (set! G4a78@&condition? (record-predicate G4a6f@G4a6a)) (set! G4a7a@make-&condition (record-constructor G4a73@G4a6b)) (set! G4a7c@&condition-rtd G4a6f@G4a6a) (set! G4a7e@&condition-rcd G4a73@G4a6b) (set! G4a86@G4a81 (make-record-type-descriptor '&message G4a6f@G4a6a 'G4a84 '#f '#f '#((immutable message)))) (set! G4a88@G4a83 '#f) (set! G4a8a@G4a82 (make-record-constructor-descriptor G4a86@G4a81 G4a73@G4a6b G4a88@G4a83)) (set! G4a8f@G4a80 (record-predicate G4a86@G4a81)) (set! G4a91@make-message-condition (record-constructor G4a8a@G4a82)) (set! G4a93@G4a7f (record-accessor G4a86@G4a81 '0)) (set! G4a95@message-condition? (condition-predicate G4a86@G4a81)) (set! G4a97@condition-message (condition-accessor G4a86@G4a81 G4a93@G4a7f)) (set! G4a9e@G4a99 (make-record-type-descriptor '&warning G4a6f@G4a6a 'G4a9c '#f '#f '#())) (set! G4aa0@G4a9b '#f) (set! G4aa2@G4a9a (make-record-constructor-descriptor G4a9e@G4a99 G4a73@G4a6b G4aa0@G4a9b)) (set! G4aa7@G4a98 (record-predicate G4a9e@G4a99)) (set! G4aa9@make-warning (record-constructor G4aa2@G4a9a)) (set! G4aab@warning? (condition-predicate G4a9e@G4a99)) (set! G4ab2@G4aad (make-record-type-descriptor '&serious G4a6f@G4a6a 'G4ab0 '#f '#f '#())) (set! G4ab4@G4aaf '#f) (set! G4ab6@G4aae (make-record-constructor-descriptor G4ab2@G4aad G4a73@G4a6b G4ab4@G4aaf)) (set! G4abb@G4aac (record-predicate G4ab2@G4aad)) (set! G4abd@make-serious-condition (record-constructor G4ab6@G4aae)) (set! G4abf@serious-condition? (condition-predicate G4ab2@G4aad)) (set! G4ac6@G4ac1 (make-record-type-descriptor '&error G4ab2@G4aad 'G4ac4 '#f '#f '#())) (set! G4ac8@G4ac3 '#f) (set! G4aca@G4ac2 (make-record-constructor-descriptor G4ac6@G4ac1 G4ab6@G4aae G4ac8@G4ac3)) (set! G4acf@G4ac0 (record-predicate G4ac6@G4ac1)) (set! G4ad1@make-error (record-constructor G4aca@G4ac2)) (set! G4ad3@error? (condition-predicate G4ac6@G4ac1)) (set! G4ada@G4ad5 (make-record-type-descriptor '&violation G4ab2@G4aad 'G4ad8 '#f '#f '#())) (set! G4adc@G4ad7 '#f) (set! G4ade@G4ad6 (make-record-constructor-descriptor G4ada@G4ad5 G4ab6@G4aae G4adc@G4ad7)) (set! G4ae3@G4ad4 (record-predicate G4ada@G4ad5)) (set! G4ae5@make-violation (record-constructor G4ade@G4ad6)) (set! G4ae7@violation? (condition-predicate G4ada@G4ad5)) (set! G4aee@G4ae9 (make-record-type-descriptor '&assertion G4ada@G4ad5 'G4aec '#f '#f '#())) (set! G4af0@G4aeb '#f) (set! G4af2@G4aea (make-record-constructor-descriptor G4aee@G4ae9 G4ade@G4ad6 G4af0@G4aeb)) (set! G4af7@G4ae8 (record-predicate G4aee@G4ae9)) (set! G4af9@make-assertion-violation (record-constructor G4af2@G4aea)) (set! G4afb@assertion-violation? (condition-predicate G4aee@G4ae9)) (set! G4b03@G4afe (make-record-type-descriptor '&irritants G4a6f@G4a6a 'G4b01 '#f '#f '#((immutable irritants)))) (set! G4b05@G4b00 '#f) (set! G4b07@G4aff (make-record-constructor-descriptor G4b03@G4afe G4a73@G4a6b G4b05@G4b00)) (set! G4b0c@G4afd (record-predicate G4b03@G4afe)) (set! G4b0e@make-irritants-condition (record-constructor G4b07@G4aff)) (set! G4b10@G4afc (record-accessor G4b03@G4afe '0)) (set! G4b12@irritants-condition? (condition-predicate G4b03@G4afe)) (set! G4b14@condition-irritants (condition-accessor G4b03@G4afe G4b10@G4afc)) (set! G4b1c@G4b17 (make-record-type-descriptor '&who G4a6f@G4a6a 'G4b1a '#f '#f '#((immutable who)))) (set! G4b1e@G4b19 '#f) (set! G4b20@G4b18 (make-record-constructor-descriptor G4b1c@G4b17 G4a73@G4a6b G4b1e@G4b19)) (set! G4b25@G4b16 (record-predicate G4b1c@G4b17)) (set! G4b27@make-who-condition (record-constructor G4b20@G4b18)) (set! G4b29@G4b15 (record-accessor G4b1c@G4b17 '0)) (set! G4b2b@who-condition? (condition-predicate G4b1c@G4b17)) (set! G4b2d@condition-who (condition-accessor G4b1c@G4b17 G4b29@G4b15)) (set! G4b34@G4b2f (make-record-type-descriptor '&non-continuable G4ada@G4ad5 'G4b32 '#f '#f '#())) (set! G4b36@G4b31 '#f) (set! G4b38@G4b30 (make-record-constructor-descriptor G4b34@G4b2f G4ade@G4ad6 G4b36@G4b31)) (set! G4b3d@G4b2e (record-predicate G4b34@G4b2f)) (set! G4b3f@make-non-continuable-violation (record-constructor G4b38@G4b30)) (set! G4b41@non-continuable-violation? (condition-predicate G4b34@G4b2f)) (set! G4b48@G4b43 (make-record-type-descriptor '&implementation-restriction G4ada@G4ad5 'G4b46 '#f '#f '#())) (set! G4b4a@G4b45 '#f) (set! G4b4c@G4b44 (make-record-constructor-descriptor G4b48@G4b43 G4ade@G4ad6 G4b4a@G4b45)) (set! G4b51@G4b42 (record-predicate G4b48@G4b43)) (set! G4b53@make-implementation-restriction-violation (record-constructor G4b4c@G4b44)) (set! G4b55@implementation-restriction-violation? (condition-predicate G4b48@G4b43)) (set! G4b5c@G4b57 (make-record-type-descriptor '&lexical G4ada@G4ad5 'G4b5a '#f '#f '#())) (set! G4b5e@G4b59 '#f) (set! G4b60@G4b58 (make-record-constructor-descriptor G4b5c@G4b57 G4ade@G4ad6 G4b5e@G4b59)) (set! G4b65@G4b56 (record-predicate G4b5c@G4b57)) (set! G4b67@make-lexical-violation (record-constructor G4b60@G4b58)) (set! G4b69@lexical-violation? (condition-predicate G4b5c@G4b57)) (set! G4b72@G4b6d (make-record-type-descriptor '&syntax G4ada@G4ad5 'G4b70 '#f '#f '#((immutable form) (immutable subform)))) (set! G4b74@G4b6f '#f) (set! G4b76@G4b6e (make-record-constructor-descriptor G4b72@G4b6d G4ade@G4ad6 G4b74@G4b6f)) (set! G4b7b@G4b6c (record-predicate G4b72@G4b6d)) (set! G4b7d@make-syntax-violation (record-constructor G4b76@G4b6e)) (set! G4b7f@G4b6a (record-accessor G4b72@G4b6d '0)) (set! G4b81@G4b6b (record-accessor G4b72@G4b6d '1)) (set! G4b83@syntax-violation? (condition-predicate G4b72@G4b6d)) (set! G4b85@syntax-violation-form (condition-accessor G4b72@G4b6d G4b7f@G4b6a)) (set! G4b87@syntax-violation-subform (condition-accessor G4b72@G4b6d G4b81@G4b6b)) (set! G4b8e@G4b89 (make-record-type-descriptor '&undefined G4ada@G4ad5 'G4b8c '#f '#f '#())) (set! G4b90@G4b8b '#f) (set! G4b92@G4b8a (make-record-constructor-descriptor G4b8e@G4b89 G4ade@G4ad6 G4b90@G4b8b)) (set! G4b97@G4b88 (record-predicate G4b8e@G4b89)) (set! G4b99@make-undefined-violation (record-constructor G4b92@G4b8a)) (set! G4b9b@undefined-violation? (condition-predicate G4b8e@G4b89)) (begin (set! G4bfa@G4b9b@undefined-violation? G4b9b@undefined-violation?) (set! G4bf9@G4b99@make-undefined-violation G4b99@make-undefined-violation) (set! G4bf8@G4b97@G4b88 G4b97@G4b88) (set! G4bf7@G4b92@G4b8a G4b92@G4b8a) (set! G4bf6@G4b90@G4b8b G4b90@G4b8b) (set! G4bf5@G4b8e@G4b89 G4b8e@G4b89) (set! G4bf4@G4b87@syntax-violation-subform G4b87@syntax-violation-subform) (set! G4bf3@G4b85@syntax-violation-form G4b85@syntax-violation-form) (set! G4bf2@G4b83@syntax-violation? G4b83@syntax-violation?) (set! G4bf1@G4b81@G4b6b G4b81@G4b6b) (set! G4bf0@G4b7f@G4b6a G4b7f@G4b6a) (set! G4bef@G4b7d@make-syntax-violation G4b7d@make-syntax-violation) (set! G4bee@G4b7b@G4b6c G4b7b@G4b6c) (set! G4bed@G4b76@G4b6e G4b76@G4b6e) (set! G4bec@G4b74@G4b6f G4b74@G4b6f) (set! G4beb@G4b72@G4b6d G4b72@G4b6d) (set! G4bea@G4b69@lexical-violation? G4b69@lexical-violation?) (set! G4be9@G4b67@make-lexical-violation G4b67@make-lexical-violation) (set! G4be8@G4b65@G4b56 G4b65@G4b56) (set! G4be7@G4b60@G4b58 G4b60@G4b58) (set! G4be6@G4b5e@G4b59 G4b5e@G4b59) (set! G4be5@G4b5c@G4b57 G4b5c@G4b57) (set! G4be4@G4b55@implementation-restriction-violation? G4b55@implementation-restriction-violation?) (set! G4be3@G4b53@make-implementation-restriction-violation G4b53@make-implementation-restriction-violation) (set! G4be2@G4b51@G4b42 G4b51@G4b42) (set! G4be1@G4b4c@G4b44 G4b4c@G4b44) (set! G4be0@G4b4a@G4b45 G4b4a@G4b45) (set! G4bdf@G4b48@G4b43 G4b48@G4b43) (set! G4bde@G4b41@non-continuable-violation? G4b41@non-continuable-violation?) (set! G4bdd@G4b3f@make-non-continuable-violation G4b3f@make-non-continuable-violation) (set! G4bdc@G4b3d@G4b2e G4b3d@G4b2e) (set! G4bdb@G4b38@G4b30 G4b38@G4b30) (set! G4bda@G4b36@G4b31 G4b36@G4b31) (set! G4bd9@G4b34@G4b2f G4b34@G4b2f) (set! G4bd8@G4b2d@condition-who G4b2d@condition-who) (set! G4bd7@G4b2b@who-condition? G4b2b@who-condition?) (set! G4bd6@G4b29@G4b15 G4b29@G4b15) (set! G4bd5@G4b27@make-who-condition G4b27@make-who-condition) (set! G4bd4@G4b25@G4b16 G4b25@G4b16) (set! G4bd3@G4b20@G4b18 G4b20@G4b18) (set! G4bd2@G4b1e@G4b19 G4b1e@G4b19) (set! G4bd1@G4b1c@G4b17 G4b1c@G4b17) (set! G4bd0@G4b14@condition-irritants G4b14@condition-irritants) (set! G4bcf@G4b12@irritants-condition? G4b12@irritants-condition?) (set! G4bce@G4b10@G4afc G4b10@G4afc) (set! G4bcd@G4b0e@make-irritants-condition G4b0e@make-irritants-condition) (set! G4bcc@G4b0c@G4afd G4b0c@G4afd) (set! G4bcb@G4b07@G4aff G4b07@G4aff) (set! G4bca@G4b05@G4b00 G4b05@G4b00) (set! G4bc9@G4b03@G4afe G4b03@G4afe) (set! G4bc8@G4afb@assertion-violation? G4afb@assertion-violation?) (set! G4bc7@G4af9@make-assertion-violation G4af9@make-assertion-violation) (set! G4bc6@G4af7@G4ae8 G4af7@G4ae8) (set! G4bc5@G4af2@G4aea G4af2@G4aea) (set! G4bc4@G4af0@G4aeb G4af0@G4aeb) (set! G4bc3@G4aee@G4ae9 G4aee@G4ae9) (set! G4bc2@G4ae7@violation? G4ae7@violation?) (set! G4bc1@G4ae5@make-violation G4ae5@make-violation) (set! G4bc0@G4ae3@G4ad4 G4ae3@G4ad4) (set! G4bbf@G4ade@G4ad6 G4ade@G4ad6) (set! G4bbe@G4adc@G4ad7 G4adc@G4ad7) (set! G4bbd@G4ada@G4ad5 G4ada@G4ad5) (set! G4bbc@G4ad3@error? G4ad3@error?) (set! G4bbb@G4ad1@make-error G4ad1@make-error) (set! G4bba@G4acf@G4ac0 G4acf@G4ac0) (set! G4bb9@G4aca@G4ac2 G4aca@G4ac2) (set! G4bb8@G4ac8@G4ac3 G4ac8@G4ac3) (set! G4bb7@G4ac6@G4ac1 G4ac6@G4ac1) (set! G4bb6@G4abf@serious-condition? G4abf@serious-condition?) (set! G4bb5@G4abd@make-serious-condition G4abd@make-serious-condition) (set! G4bb4@G4abb@G4aac G4abb@G4aac) (set! G4bb3@G4ab6@G4aae G4ab6@G4aae) (set! G4bb2@G4ab4@G4aaf G4ab4@G4aaf) (set! G4bb1@G4ab2@G4aad G4ab2@G4aad) (set! G4bb0@G4aab@warning? G4aab@warning?) (set! G4baf@G4aa9@make-warning G4aa9@make-warning) (set! G4bae@G4aa7@G4a98 G4aa7@G4a98) (set! G4bad@G4aa2@G4a9a G4aa2@G4a9a) (set! G4bac@G4aa0@G4a9b G4aa0@G4a9b) (set! G4bab@G4a9e@G4a99 G4a9e@G4a99) (set! G4baa@G4a97@condition-message G4a97@condition-message) (set! G4ba9@G4a95@message-condition? G4a95@message-condition?) (set! G4ba8@G4a93@G4a7f G4a93@G4a7f) (set! G4ba7@G4a91@make-message-condition G4a91@make-message-condition) (set! G4ba6@G4a8f@G4a80 G4a8f@G4a80) (set! G4ba5@G4a8a@G4a82 G4a8a@G4a82) (set! G4ba4@G4a88@G4a83 G4a88@G4a83) (set! G4ba3@G4a86@G4a81 G4a86@G4a81) (set! G4ba2@G4a7e@&condition-rcd G4a7e@&condition-rcd) (set! G4ba1@G4a7c@&condition-rtd G4a7c@&condition-rtd) (set! G4ba0@G4a7a@make-&condition G4a7a@make-&condition) (set! G4b9f@G4a78@&condition? G4a78@&condition?) (set! G4b9e@G4a73@G4a6b G4a73@G4a6b) (set! G4b9d@G4a71@G4a6c G4a71@G4a6c) (set! G4b9c@G4a6f@G4a6a G4a6f@G4a6a)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c02@G4bfd G4c04@G4bff G4c06@G4bfe G4c0b@G4bfc G4c0d@make-i/o-error G4c0f@i/o-error? G4c16@G4c11 G4c18@G4c13 G4c1a@G4c12 G4c1f@G4c10 G4c21@make-i/o-read-error G4c23@i/o-read-error? G4c2a@G4c25 G4c2c@G4c27 G4c2e@G4c26 G4c33@G4c24 G4c35@make-i/o-write-error G4c37@i/o-write-error? G4c3f@G4c3a G4c41@G4c3c G4c43@G4c3b G4c48@G4c39 G4c4a@make-i/o-invalid-position-error G4c4c@G4c38 G4c4e@i/o-invalid-position-error? G4c50@i/o-error-position G4c58@G4c53 G4c5a@G4c55 G4c5c@G4c54 G4c61@G4c52 G4c63@make-i/o-filename-error G4c65@G4c51 G4c67@i/o-filename-error? G4c69@i/o-error-filename G4c70@G4c6b G4c72@G4c6d G4c74@G4c6c G4c79@G4c6a G4c7b@make-i/o-file-protection-error G4c7d@i/o-file-protection-error? G4c84@G4c7f G4c86@G4c81 G4c88@G4c80 G4c8d@G4c7e G4c8f@make-i/o-file-is-read-only-error G4c91@i/o-file-is-read-only-error? G4c98@G4c93 G4c9a@G4c95 G4c9c@G4c94 G4ca1@G4c92 G4ca3@make-i/o-file-already-exists-error G4ca5@i/o-file-already-exists-error? G4cac@G4ca7 G4cae@G4ca9 G4cb0@G4ca8 G4cb5@G4ca6 G4cb7@make-i/o-file-does-not-exist-error G4cb9@i/o-file-does-not-exist-error? G4cc1@G4cbc G4cc3@G4cbe G4cc5@G4cbd G4cca@G4cbb G4ccc@make-i/o-port-error G4cce@G4cba G4cd0@i/o-port-error? G4cd2@i/o-error-port G4cd9@G4cd4 G4cdb@G4cd6 G4cdd@G4cd5 G4ce2@G4cd3 G4ce4@make-i/o-decoding-error G4ce6@i/o-decoding-error? G4cee@G4ce9 G4cf0@G4ceb G4cf2@G4cea G4cf7@G4ce8 G4cf9@make-i/o-encoding-error G4cfb@G4ce7 G4cfd@i/o-encoding-error? G4cff@i/o-encoding-error-char) (begin (set! G4c02@G4bfd (make-record-type-descriptor '&i/o &error-rtd 'G4c00 '#f '#f '#())) (set! G4c04@G4bff '#f) (set! G4c06@G4bfe (make-record-constructor-descriptor G4c02@G4bfd &error-rcd G4c04@G4bff)) (set! G4c0b@G4bfc (record-predicate G4c02@G4bfd)) (set! G4c0d@make-i/o-error (record-constructor G4c06@G4bfe)) (set! G4c0f@i/o-error? (condition-predicate G4c02@G4bfd)) (set! G4c16@G4c11 (make-record-type-descriptor '&i/o-read G4c02@G4bfd 'G4c14 '#f '#f '#())) (set! G4c18@G4c13 '#f) (set! G4c1a@G4c12 (make-record-constructor-descriptor G4c16@G4c11 G4c06@G4bfe G4c18@G4c13)) (set! G4c1f@G4c10 (record-predicate G4c16@G4c11)) (set! G4c21@make-i/o-read-error (record-constructor G4c1a@G4c12)) (set! G4c23@i/o-read-error? (condition-predicate G4c16@G4c11)) (set! G4c2a@G4c25 (make-record-type-descriptor '&i/o-write G4c02@G4bfd 'G4c28 '#f '#f '#())) (set! G4c2c@G4c27 '#f) (set! G4c2e@G4c26 (make-record-constructor-descriptor G4c2a@G4c25 G4c06@G4bfe G4c2c@G4c27)) (set! G4c33@G4c24 (record-predicate G4c2a@G4c25)) (set! G4c35@make-i/o-write-error (record-constructor G4c2e@G4c26)) (set! G4c37@i/o-write-error? (condition-predicate G4c2a@G4c25)) (set! G4c3f@G4c3a (make-record-type-descriptor '&i/o-invalid-position G4c02@G4bfd 'G4c3d '#f '#f '#((immutable position)))) (set! G4c41@G4c3c '#f) (set! G4c43@G4c3b (make-record-constructor-descriptor G4c3f@G4c3a G4c06@G4bfe G4c41@G4c3c)) (set! G4c48@G4c39 (record-predicate G4c3f@G4c3a)) (set! G4c4a@make-i/o-invalid-position-error (record-constructor G4c43@G4c3b)) (set! G4c4c@G4c38 (record-accessor G4c3f@G4c3a '0)) (set! G4c4e@i/o-invalid-position-error? (condition-predicate G4c3f@G4c3a)) (set! G4c50@i/o-error-position (condition-accessor G4c3f@G4c3a G4c4c@G4c38)) (set! G4c58@G4c53 (make-record-type-descriptor '&i/o-filename G4c02@G4bfd 'G4c56 '#f '#f '#((immutable filename)))) (set! G4c5a@G4c55 '#f) (set! G4c5c@G4c54 (make-record-constructor-descriptor G4c58@G4c53 G4c06@G4bfe G4c5a@G4c55)) (set! G4c61@G4c52 (record-predicate G4c58@G4c53)) (set! G4c63@make-i/o-filename-error (record-constructor G4c5c@G4c54)) (set! G4c65@G4c51 (record-accessor G4c58@G4c53 '0)) (set! G4c67@i/o-filename-error? (condition-predicate G4c58@G4c53)) (set! G4c69@i/o-error-filename (condition-accessor G4c58@G4c53 G4c65@G4c51)) (set! G4c70@G4c6b (make-record-type-descriptor '&i/o-file-protection G4c02@G4bfd 'G4c6e '#f '#f '#())) (set! G4c72@G4c6d '#f) (set! G4c74@G4c6c (make-record-constructor-descriptor G4c70@G4c6b G4c06@G4bfe G4c72@G4c6d)) (set! G4c79@G4c6a (record-predicate G4c70@G4c6b)) (set! G4c7b@make-i/o-file-protection-error (record-constructor G4c74@G4c6c)) (set! G4c7d@i/o-file-protection-error? (condition-predicate G4c70@G4c6b)) (set! G4c84@G4c7f (make-record-type-descriptor '&i/o-file-is-read-only G4c70@G4c6b 'G4c82 '#f '#f '#())) (set! G4c86@G4c81 '#f) (set! G4c88@G4c80 (make-record-constructor-descriptor G4c84@G4c7f G4c74@G4c6c G4c86@G4c81)) (set! G4c8d@G4c7e (record-predicate G4c84@G4c7f)) (set! G4c8f@make-i/o-file-is-read-only-error (record-constructor G4c88@G4c80)) (set! G4c91@i/o-file-is-read-only-error? (condition-predicate G4c84@G4c7f)) (set! G4c98@G4c93 (make-record-type-descriptor '&i/o-file-already-exists G4c58@G4c53 'G4c96 '#f '#f '#())) (set! G4c9a@G4c95 '#f) (set! G4c9c@G4c94 (make-record-constructor-descriptor G4c98@G4c93 G4c5c@G4c54 G4c9a@G4c95)) (set! G4ca1@G4c92 (record-predicate G4c98@G4c93)) (set! G4ca3@make-i/o-file-already-exists-error (record-constructor G4c9c@G4c94)) (set! G4ca5@i/o-file-already-exists-error? (condition-predicate G4c98@G4c93)) (set! G4cac@G4ca7 (make-record-type-descriptor '&i/o-file-does-not-exist G4c58@G4c53 'G4caa '#f '#f '#())) (set! G4cae@G4ca9 '#f) (set! G4cb0@G4ca8 (make-record-constructor-descriptor G4cac@G4ca7 G4c5c@G4c54 G4cae@G4ca9)) (set! G4cb5@G4ca6 (record-predicate G4cac@G4ca7)) (set! G4cb7@make-i/o-file-does-not-exist-error (record-constructor G4cb0@G4ca8)) (set! G4cb9@i/o-file-does-not-exist-error? (condition-predicate G4cac@G4ca7)) (set! G4cc1@G4cbc (make-record-type-descriptor '&i/o-port G4c02@G4bfd 'G4cbf '#f '#f '#((immutable port)))) (set! G4cc3@G4cbe '#f) (set! G4cc5@G4cbd (make-record-constructor-descriptor G4cc1@G4cbc G4c06@G4bfe G4cc3@G4cbe)) (set! G4cca@G4cbb (record-predicate G4cc1@G4cbc)) (set! G4ccc@make-i/o-port-error (record-constructor G4cc5@G4cbd)) (set! G4cce@G4cba (record-accessor G4cc1@G4cbc '0)) (set! G4cd0@i/o-port-error? (condition-predicate G4cc1@G4cbc)) (set! G4cd2@i/o-error-port (condition-accessor G4cc1@G4cbc G4cce@G4cba)) (set! G4cd9@G4cd4 (make-record-type-descriptor '&i/o-decoding G4cc1@G4cbc 'G4cd7 '#f '#f '#())) (set! G4cdb@G4cd6 '#f) (set! G4cdd@G4cd5 (make-record-constructor-descriptor G4cd9@G4cd4 G4cc5@G4cbd G4cdb@G4cd6)) (set! G4ce2@G4cd3 (record-predicate G4cd9@G4cd4)) (set! G4ce4@make-i/o-decoding-error (record-constructor G4cdd@G4cd5)) (set! G4ce6@i/o-decoding-error? (condition-predicate G4cd9@G4cd4)) (set! G4cee@G4ce9 (make-record-type-descriptor '&i/o-encoding G4cc1@G4cbc 'G4cec '#f '#f '#((immutable char)))) (set! G4cf0@G4ceb '#f) (set! G4cf2@G4cea (make-record-constructor-descriptor G4cee@G4ce9 G4cc5@G4cbd G4cf0@G4ceb)) (set! G4cf7@G4ce8 (record-predicate G4cee@G4ce9)) (set! G4cf9@make-i/o-encoding-error (record-constructor G4cf2@G4cea)) (set! G4cfb@G4ce7 (record-accessor G4cee@G4ce9 '0)) (set! G4cfd@i/o-encoding-error? (condition-predicate G4cee@G4ce9)) (set! G4cff@i/o-encoding-error-char (condition-accessor G4cee@G4ce9 G4cfb@G4ce7)) (begin (set! G4d4f@G4cff@i/o-encoding-error-char G4cff@i/o-encoding-error-char) (set! G4d4e@G4cfd@i/o-encoding-error? G4cfd@i/o-encoding-error?) (set! G4d4d@G4cfb@G4ce7 G4cfb@G4ce7) (set! G4d4c@G4cf9@make-i/o-encoding-error G4cf9@make-i/o-encoding-error) (set! G4d4b@G4cf7@G4ce8 G4cf7@G4ce8) (set! G4d4a@G4cf2@G4cea G4cf2@G4cea) (set! G4d49@G4cf0@G4ceb G4cf0@G4ceb) (set! G4d48@G4cee@G4ce9 G4cee@G4ce9) (set! G4d47@G4ce6@i/o-decoding-error? G4ce6@i/o-decoding-error?) (set! G4d46@G4ce4@make-i/o-decoding-error G4ce4@make-i/o-decoding-error) (set! G4d45@G4ce2@G4cd3 G4ce2@G4cd3) (set! G4d44@G4cdd@G4cd5 G4cdd@G4cd5) (set! G4d43@G4cdb@G4cd6 G4cdb@G4cd6) (set! G4d42@G4cd9@G4cd4 G4cd9@G4cd4) (set! G4d41@G4cd2@i/o-error-port G4cd2@i/o-error-port) (set! G4d40@G4cd0@i/o-port-error? G4cd0@i/o-port-error?) (set! G4d3f@G4cce@G4cba G4cce@G4cba) (set! G4d3e@G4ccc@make-i/o-port-error G4ccc@make-i/o-port-error) (set! G4d3d@G4cca@G4cbb G4cca@G4cbb) (set! G4d3c@G4cc5@G4cbd G4cc5@G4cbd) (set! G4d3b@G4cc3@G4cbe G4cc3@G4cbe) (set! G4d3a@G4cc1@G4cbc G4cc1@G4cbc) (set! G4d39@G4cb9@i/o-file-does-not-exist-error? G4cb9@i/o-file-does-not-exist-error?) (set! G4d38@G4cb7@make-i/o-file-does-not-exist-error G4cb7@make-i/o-file-does-not-exist-error) (set! G4d37@G4cb5@G4ca6 G4cb5@G4ca6) (set! G4d36@G4cb0@G4ca8 G4cb0@G4ca8) (set! G4d35@G4cae@G4ca9 G4cae@G4ca9) (set! G4d34@G4cac@G4ca7 G4cac@G4ca7) (set! G4d33@G4ca5@i/o-file-already-exists-error? G4ca5@i/o-file-already-exists-error?) (set! G4d32@G4ca3@make-i/o-file-already-exists-error G4ca3@make-i/o-file-already-exists-error) (set! G4d31@G4ca1@G4c92 G4ca1@G4c92) (set! G4d30@G4c9c@G4c94 G4c9c@G4c94) (set! G4d2f@G4c9a@G4c95 G4c9a@G4c95) (set! G4d2e@G4c98@G4c93 G4c98@G4c93) (set! G4d2d@G4c91@i/o-file-is-read-only-error? G4c91@i/o-file-is-read-only-error?) (set! G4d2c@G4c8f@make-i/o-file-is-read-only-error G4c8f@make-i/o-file-is-read-only-error) (set! G4d2b@G4c8d@G4c7e G4c8d@G4c7e) (set! G4d2a@G4c88@G4c80 G4c88@G4c80) (set! G4d29@G4c86@G4c81 G4c86@G4c81) (set! G4d28@G4c84@G4c7f G4c84@G4c7f) (set! G4d27@G4c7d@i/o-file-protection-error? G4c7d@i/o-file-protection-error?) (set! G4d26@G4c7b@make-i/o-file-protection-error G4c7b@make-i/o-file-protection-error) (set! G4d25@G4c79@G4c6a G4c79@G4c6a) (set! G4d24@G4c74@G4c6c G4c74@G4c6c) (set! G4d23@G4c72@G4c6d G4c72@G4c6d) (set! G4d22@G4c70@G4c6b G4c70@G4c6b) (set! G4d21@G4c69@i/o-error-filename G4c69@i/o-error-filename) (set! G4d20@G4c67@i/o-filename-error? G4c67@i/o-filename-error?) (set! G4d1f@G4c65@G4c51 G4c65@G4c51) (set! G4d1e@G4c63@make-i/o-filename-error G4c63@make-i/o-filename-error) (set! G4d1d@G4c61@G4c52 G4c61@G4c52) (set! G4d1c@G4c5c@G4c54 G4c5c@G4c54) (set! G4d1b@G4c5a@G4c55 G4c5a@G4c55) (set! G4d1a@G4c58@G4c53 G4c58@G4c53) (set! G4d19@G4c50@i/o-error-position G4c50@i/o-error-position) (set! G4d18@G4c4e@i/o-invalid-position-error? G4c4e@i/o-invalid-position-error?) (set! G4d17@G4c4c@G4c38 G4c4c@G4c38) (set! G4d16@G4c4a@make-i/o-invalid-position-error G4c4a@make-i/o-invalid-position-error) (set! G4d15@G4c48@G4c39 G4c48@G4c39) (set! G4d14@G4c43@G4c3b G4c43@G4c3b) (set! G4d13@G4c41@G4c3c G4c41@G4c3c) (set! G4d12@G4c3f@G4c3a G4c3f@G4c3a) (set! G4d11@G4c37@i/o-write-error? G4c37@i/o-write-error?) (set! G4d10@G4c35@make-i/o-write-error G4c35@make-i/o-write-error) (set! G4d0f@G4c33@G4c24 G4c33@G4c24) (set! G4d0e@G4c2e@G4c26 G4c2e@G4c26) (set! G4d0d@G4c2c@G4c27 G4c2c@G4c27) (set! G4d0c@G4c2a@G4c25 G4c2a@G4c25) (set! G4d0b@G4c23@i/o-read-error? G4c23@i/o-read-error?) (set! G4d0a@G4c21@make-i/o-read-error G4c21@make-i/o-read-error) (set! G4d09@G4c1f@G4c10 G4c1f@G4c10) (set! G4d08@G4c1a@G4c12 G4c1a@G4c12) (set! G4d07@G4c18@G4c13 G4c18@G4c13) (set! G4d06@G4c16@G4c11 G4c16@G4c11) (set! G4d05@G4c0f@i/o-error? G4c0f@i/o-error?) (set! G4d04@G4c0d@make-i/o-error G4c0d@make-i/o-error) (set! G4d03@G4c0b@G4bfc G4c0b@G4bfc) (set! G4d02@G4c06@G4bfe G4c06@G4bfe) (set! G4d01@G4c04@G4bff G4c04@G4bff) (set! G4d00@G4c02@G4bfd G4c02@G4bfd)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2997@G293c@current-primitive-locations (lambda (G5119@x) ((lambda (G511b@t) (if G511b@t (cdr G511b@t) '#f)) (assq G5119@x '((syntax-error . G4a5b@G3114@syntax-error) (syntax-dispatch . G49ef@G3027@syntax-dispatch) (load . G4de8@G4d5e@load) (interaction-environment . G4a64@G3126@interaction-environment) (make-variable-transformer . G49af@G2e25@make-variable-transformer) (identifier? . G4a5f@G311c@identifier?) (generate-temporaries . G4a54@G3106@generate-temporaries) (free-identifier=? . G4a55@G3108@free-identifier=?) (syntax->datum . G4a61@G3120@syntax->datum) (datum->syntax . G4a60@G311e@datum->syntax) (bound-identifier=? . G4a56@G310a@bound-identifier=?) (make-i/o-write-error . G4d10@G4c35@make-i/o-write-error) (make-i/o-read-error . G4d0a@G4c21@make-i/o-read-error) (make-i/o-port-error . G4d3e@G4ccc@make-i/o-port-error) (make-i/o-invalid-position-error . G4d16@G4c4a@make-i/o-invalid-position-error) (make-i/o-filename-error . G4d1e@G4c63@make-i/o-filename-error) (make-i/o-file-protection-error . G4d26@G4c7b@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4d2c@G4c8f@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4d38@G4cb7@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4d32@G4ca3@make-i/o-file-already-exists-error) (make-i/o-error . G4d04@G4c0d@make-i/o-error) (make-i/o-encoding-error . G4d4c@G4cf9@make-i/o-encoding-error) (make-i/o-decoding-error . G4d46@G4ce4@make-i/o-decoding-error) (i/o-write-error? . G4d11@G4c37@i/o-write-error?) (i/o-read-error? . G4d0b@G4c23@i/o-read-error?) (i/o-port-error? . G4d40@G4cd0@i/o-port-error?) (i/o-invalid-position-error? . G4d18@G4c4e@i/o-invalid-position-error?) (i/o-filename-error? . G4d20@G4c67@i/o-filename-error?) (i/o-file-protection-error? . G4d27@G4c7d@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4d2d@G4c91@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4d39@G4cb9@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4d33@G4ca5@i/o-file-already-exists-error?) (i/o-error? . G4d05@G4c0f@i/o-error?) (i/o-error-port . G4d41@G4cd2@i/o-error-port) (i/o-error-filename . G4d21@G4c69@i/o-error-filename) (i/o-encoding-error? . G4d4e@G4cfd@i/o-encoding-error?) (i/o-encoding-error-char . G4d4f@G4cff@i/o-encoding-error-char) (i/o-decoding-error? . G4d47@G4ce6@i/o-decoding-error?) (scheme-report-environment . G4a4b@G30f4@scheme-report-environment) (null-environment . G4a4a@G30f2@null-environment) (command-line . G4de5@G4d58@command-line) (eval . G4a4d@G30f8@eval) (environment . G4a49@G30f0@environment) (who-condition? . G4bd7@G4b2b@who-condition?) (warning? . G4bb0@G4aab@warning?) (violation? . G4bc2@G4ae7@violation?) (undefined-violation? . G4bfa@G4b9b@undefined-violation?) (syntax-violation? . G4bf2@G4b83@syntax-violation?) (syntax-violation-subform . G4bf4@G4b87@syntax-violation-subform) (syntax-violation-form . G4bf3@G4b85@syntax-violation-form) (syntax-violation . G4a5e@G311a@syntax-violation) (serious-condition? . G4bb6@G4abf@serious-condition?) (non-continuable-violation? . G4bde@G4b41@non-continuable-violation?) (message-condition? . G4ba9@G4a95@message-condition?) (make-who-condition . G4bd5@G4b27@make-who-condition) (make-warning . G4baf@G4aa9@make-warning) (make-violation . G4bc1@G4ae5@make-violation) (make-undefined-violation . G4bf9@G4b99@make-undefined-violation) (make-syntax-violation . G4bef@G4b7d@make-syntax-violation) (make-serious-condition . G4bb5@G4abd@make-serious-condition) (make-non-continuable-violation . G4bdd@G4b3f@make-non-continuable-violation) (make-message-condition . G4ba7@G4a91@make-message-condition) (make-lexical-violation . G4be9@G4b67@make-lexical-violation) (make-irritants-condition . G4bcd@G4b0e@make-irritants-condition) (make-implementation-restriction-violation . G4be3@G4b53@make-implementation-restriction-violation) (make-error . G4bbb@G4ad1@make-error) (make-assertion-violation . G4bc7@G4af9@make-assertion-violation) (lexical-violation? . G4bea@G4b69@lexical-violation?) (irritants-condition? . G4bcf@G4b12@irritants-condition?) (implementation-restriction-violation? . G4be4@G4b55@implementation-restriction-violation?) (error? . G4bbc@G4ad3@error?) (condition-who . G4bd8@G4b2d@condition-who) (condition-message . G4baa@G4a97@condition-message) (condition-irritants . G4bd0@G4b14@condition-irritants) (assertion-violation? . G4bc8@G4afb@assertion-violation?)))))) (G2bd7@G2a6a@install-library 'G50ed '(mosh interaction) '() '() '() '() '((string-upcase . G5070) (string-titlecase . G506f) (string-normalize-nfkd . G506e) (string-normalize-nfkc . G506d) (string-normalize-nfd . G506c) (string-normalize-nfc . G506b) (string-foldcase . G506a) (string-downcase . G5069) (string-ci>? . G5068) (string-ci>=? . G5067) (string-ci=? . G5066) (string-ci<? . G5065) (string-ci<=? . G5064) (char-whitespace? . G5063) (char-upper-case? . G5062) (char-title-case? . G5061) (char-numeric? . G5060) (char-lower-case? . G505f) (char-general-category . G505e) (char-upcase . G505d) (char-titlecase . G505c) (char-foldcase . G505b) (char-downcase . G505a) (char-ci>? . G5059) (char-ci>=? . G5058) (char-ci=? . G5057) (char-ci<? . G5056) (char-ci<=? . G5055) (char-alphabetic? . G5054) (make-variable-transformer . G2e24) (identifier? . G311b) (generate-temporaries . G3105) (free-identifier=? . G3107) (syntax->datum . G311f) (datum->syntax . G311d) (bound-identifier=? . G3109) (record-type-descriptor? . G5053) (record-predicate . G5052) (record-mutator . G5051) (record-constructor . G5050) (record-accessor . G504f) (make-record-type-descriptor . G504e) (make-record-constructor-descriptor . G504d) (record? . G504c) (record-type-uid . G504b) (record-type-sealed? . G504a) (record-type-parent . G5049) (record-type-opaque? . G5048) (record-type-name . G5047) (record-type-generative? . G5046) (record-type-field-names . G5045) (record-rtd . G5044) (record-field-mutable? . G5043) (delete-file . G5042) (file-exists? . G5041) (vector-sort! . G5040) (vector-sort . G503f) (list-sort . G503e) (symbol-hash . G503d) (string-ci-hash . G503c) (string-hash . G503b) (equal-hash . G503a) (hashtable-equivalence-function . G5039) (make-hashtable . G5038) (hashtable-hash-function . G5037) (make-eqv-hashtable . G5036) (make-eq-hashtable . G5035) (hashtable? . G5034) (hashtable-update! . G5033) (hashtable-size . G5032) (hashtable-set! . G5031) (hashtable-ref . G5030) (hashtable-mutable? . G502f) (hashtable-keys . G502e) (hashtable-entries . G502d) (hashtable-delete! . G502c) (hashtable-copy . G502b) (hashtable-contains? . G502a) (hashtable-clear! . G5029) (call-with-output-file . G5028) (call-with-input-file . G5027) (write-char . G5026) (write . G5025) (with-output-to-file . G5024) (with-input-from-file . G5023) (read-char . G5022) (read . G5021) (peek-char . G5020) (open-output-file . G501f) (open-input-file . G501e) (newline . G501d) (display . G501c) (close-output-port . G501b) (close-input-port . G501a) (eof-object? . G5019) (eof-object . G5018) (current-error-port . G5017) (current-output-port . G5016) (current-input-port . G5015) (output-port? . G5014) (input-port? . G5013) (utf-8-codec . G5012) (utf-16-codec . G5011) (transcoder-error-handling-mode . G5010) (transcoder-eol-style . G500f) (transcoder-codec . G500e) (transcoded-port . G500d) (textual-port? . G500c) (string->bytevector . G500b) (standard-output-port . G500a) (standard-input-port . G5009) (standard-error-port . G5008) (set-port-position! . G5007) (put-u8 . G5006) (put-string . G5005) (put-datum . G5004) (put-char . G5003) (put-bytevector . G5002) (port? . G5001) (port-transcoder . G5000) (port-position . G4fff) (port-has-set-port-position!? . G4ffe) (port-has-port-position? . G4ffd) (port-eof? . G4ffc) (output-port-buffer-mode . G4ffb) (open-string-output-port . G4ffa) (open-string-input-port . G4ff9) (open-file-output-port . G4ff8) (open-file-input/output-port . G4ff7) (open-file-input-port . G4ff6) (open-bytevector-output-port . G4ff5) (open-bytevector-input-port . G4ff4) (native-transcoder . G4ff3) (native-eol-style . G4ff2) (make-transcoder . G4ff1) (latin-1-codec . G4ff0) (make-i/o-write-error . G4c34) (make-i/o-read-error . G4c20) (make-i/o-port-error . G4ccb) (make-i/o-invalid-position-error . G4c49) (make-i/o-filename-error . G4c62) (make-i/o-file-protection-error . G4c7a) (make-i/o-file-is-read-only-error . G4c8e) (make-i/o-file-does-not-exist-error . G4cb6) (make-i/o-file-already-exists-error . G4ca2) (make-i/o-error . G4c0c) (make-i/o-encoding-error . G4cf8) (make-i/o-decoding-error . G4ce3) (make-custom-textual-output-port . G4fef) (make-custom-textual-input/output-port . G4fee) (make-custom-textual-input-port . G4fed) (make-custom-binary-output-port . G4fec) (make-custom-binary-input/output-port . G4feb) (make-custom-binary-input-port . G4fea) (make-bytevector . G4fe9) (lookahead-u8 . G4fe8) (lookahead-char . G4fe7) (i/o-write-error? . G4c36) (i/o-read-error? . G4c22) (i/o-port-error? . G4ccf) (i/o-invalid-position-error? . G4c4d) (i/o-filename-error? . G4c66) (i/o-file-protection-error? . G4c7c) (i/o-file-is-read-only-error? . G4c90) (i/o-file-does-not-exist-error? . G4cb8) (i/o-file-already-exists-error? . G4ca4) (i/o-error? . G4c0e) (i/o-error-port . G4cd1) (i/o-error-filename . G4c68) (i/o-encoding-error? . G4cfc) (i/o-encoding-error-char . G4cfe) (i/o-decoding-error? . G4ce5) (get-u8 . G4fe6) (get-string-n! . G4fe5) (get-string-n . G4fe4) (get-string-all . G4fe3) (get-line . G4fe2) (get-datum . G4fe1) (get-char . G4fe0) (get-bytevector-some . G4fdf) (get-bytevector-n! . G4fde) (get-bytevector-n . G4fdd) (get-bytevector-all . G4fdc) (flush-output-port . G4fdb) (close-port . G4fda) (exit . G4fd3) (command-line . G4d57) (string-fill! . G4fd2) (string-set! . G4fd1) (set-cdr! . G4fd0) (set-car! . G4fcf) (remove . G4fce) (remv . G4fcd) (remp . G4fcc) (remq . G4fcb) (partition . G4fca) (memv . G4fc9) (memq . G4fc8) (memp . G4fc7) (member . G4fc6) (exists . G4fc5) (for-all . G4fc4) (fold-right . G4fc3) (fold-left . G4fc2) (find . G4fc1) (filter . G4fc0) (cons* . G4fbf) (assv . G4fbe) (assq . G4fbd) (assp . G4fbc) (assoc . G4fbb) (call-with-string-output-port . G4fba) (call-with-port . G4fb9) (call-with-bytevector-output-port . G4fb8) (bytevector->string . G4fb7) (buffer-mode? . G4fb6) (binary-port? . G4fb5) (with-exception-handler . G4fb4) (raise-continuable . G4fb3) (raise . G4fb2) (eval . G30f7) (environment . G30ef) (make-enumeration . G4fb1) (enum-set=? . G4fb0) (enum-set-universe . G4faf) (enum-set-union . G4fae) (enum-set-subset? . G4fad) (enum-set-projection . G4fac) (enum-set-member? . G4fab) (enum-set-intersection . G4faa) (enum-set-indexer . G4fa9) (enum-set-difference . G4fa8) (enum-set-constructor . G4fa7) (enum-set-complement . G4fa6) (enum-set->list . G4fa5) (who-condition? . G4b2a) (warning? . G4aaa) (violation? . G4ae6) (undefined-violation? . G4b9a) (syntax-violation? . G4b82) (syntax-violation-subform . G4b86) (syntax-violation-form . G4b84) (syntax-violation . G3119) (simple-conditions . G4fa4) (serious-condition? . G4abe) (non-continuable-violation? . G4b40) (message-condition? . G4a94) (make-who-condition . G4b26) (make-warning . G4aa8) (make-violation . G4ae4) (make-undefined-violation . G4b98) (make-syntax-violation . G4b7c) (make-serious-condition . G4abc) (make-non-continuable-violation . G4b3e) (make-message-condition . G4a90) (make-lexical-violation . G4b66) (make-irritants-condition . G4b0d) (make-implementation-restriction-violation . G4b52) (make-error . G4ad0) (make-assertion-violation . G4af8) (lexical-violation? . G4b68) (irritants-condition? . G4b11) (implementation-restriction-violation? . G4b54) (error? . G4ad2) (condition-who . G4b2c) (condition-predicate . G4fa3) (condition-message . G4a96) (condition-irritants . G4b13) (condition-accessor . G4fa2) (condition . G4fa1) (assertion-violation? . G4afa) (condition? . G4fa0) (utf32->string . G4f9f) (utf16->string . G4f9e) (utf8->string . G4f9d) (uint-list->bytevector . G4f9c) (u8-list->bytevector . G4f9b) (string->utf8 . G4f9a) (string->utf32 . G4f99) (string->utf16 . G4f98) (sint-list->bytevector . G4f97) (native-endianness . G4f96) (bytevector? . G4f95) (bytevector=? . G4f94) (bytevector-uint-set! . G4f93) (bytevector-uint-ref . G4f92) (bytevector-u8-set! . G4f91) (bytevector-u8-ref . G4f90) (bytevector-u64-set! . G4f8f) (bytevector-u64-ref . G4f8e) (bytevector-u64-native-set! . G4f8d) (bytevector-u64-native-ref . G4f8c) (bytevector-u32-set! . G4f8b) (bytevector-u32-ref . G4f8a) (bytevector-u32-native-set! . G4f89) (bytevector-u32-native-ref . G4f88) (bytevector-u16-set! . G4f87) (bytevector-u16-ref . G4f86) (bytevector-u16-native-set! . G4f85) (bytevector-u16-native-ref . G4f84) (bytevector-sint-set! . G4f83) (bytevector-sint-ref . G4f82) (bytevector-s8-set! . G4f81) (bytevector-s8-ref . G4f80) (bytevector-s64-set! . G4f7f) (bytevector-s64-ref . G4f7e) (bytevector-s64-native-set! . G4f7d) (bytevector-s64-native-ref . G4f7c) (bytevector-s32-set! . G4f7b) (bytevector-s32-ref . G4f7a) (bytevector-s32-native-set! . G4f79) (bytevector-s32-native-ref . G4f78) (bytevector-s16-set! . G4f77) (bytevector-s16-ref . G4f76) (bytevector-s16-native-set! . G4f75) (bytevector-s16-native-ref . G4f74) (bytevector-length . G4f73) (bytevector-ieee-single-ref . G4f72) (bytevector-ieee-single-native-set! . G4f71) (bytevector-ieee-single-native-ref . G4f70) (bytevector-ieee-double-ref . G4f6f) (bytevector-ieee-double-native-set! . G4f6e) (bytevector-ieee-double-native-ref . G4f6d) (bytevector-fill! . G4f6c) (bytevector-copy! . G4f6b) (bytevector-copy . G4f6a) (bytevector->uint-list . G4f69) (bytevector->u8-list . G4f68) (bytevector->sint-list . G4f67) (no-nans-violation? . G4f66) (no-infinities-violation? . G4f65) (make-no-nans-violation . G4f64) (make-no-infinities-violation . G4f63) (real->flonum . G4f62) (flzero? . G4f61) (fltruncate . G4f60) (fltan . G4f5f) (flsqrt . G4f5e) (flsin . G4f5d) (flround . G4f5c) (flpositive? . G4f5b) (flonum? . G4f5a) (flodd? . G4f59) (flnumerator . G4f58) (flnegative? . G4f57) (flnan? . G4f56) (flmod0 . G4f55) (flmod . G4f54) (flmin . G4f53) (flmax . G4f52) (fllog . G4f51) (flinteger? . G4f50) (flinfinite? . G4f4f) (flfloor . G4f4e) (flfinite? . G4f4d) (flexpt . G4f4c) (flexp . G4f4b) (fleven? . G4f4a) (fldiv0-and-mod0 . G4f49) (fldiv0 . G4f48) (fldiv-and-mod . G4f47) (fldiv . G4f46) (fldenominator . G4f45) (flcos . G4f44) (flceiling . G4f43) (flatan . G4f42) (flasin . G4f41) (flacos . G4f40) (flabs . G4f3f) (fl>? . G4f3e) (fl>=? . G4f3d) (fl=? . G4f3c) (fl<? . G4f3b) (fl<=? . G4f3a) (fl/ . G4f39) (fl- . G4f38) (fl+ . G4f37) (fl* . G4f36) (fixnum->flonum . G4f35) (fxzero? . G4f34) (fxxor . G4f33) (fxrotate-bit-field . G4f32) (fxreverse-bit-field . G4f31) (fxpositive? . G4f30) (fxodd? . G4f2f) (fxnot . G4f2e) (fxnegative? . G4f2d) (fxmod0 . G4f2c) (fxmod . G4f2b) (fxmin . G4f2a) (fxmax . G4f29) (fxlength . G4f28) (fxior . G4f27) (fxif . G4f26) (fxfirst-bit-set . G4f25) (fxeven? . G4f24) (fxdiv0-and-mod0 . G4f23) (fxdiv0 . G4f22) (fxdiv-and-mod . G4f21) (fxdiv . G4f20) (fxcopy-bit-field . G4f1f) (fxcopy-bit . G4f1e) (fxbit-set? . G4f1d) (fxbit-field . G4f1c) (fxbit-count . G4f1b) (fxarithmetic-shift-right . G4f1a) (fxarithmetic-shift-left . G4f19) (fxarithmetic-shift . G4f18) (fxand . G4f17) (fx>? . G4f16) (fx>=? . G4f15) (fx=? . G4f14) (fx<? . G4f13) (fx<=? . G4f12) (fx-/carry . G4f11) (fx- . G4f10) (fx+/carry . G4f0f) (fx+ . G4f0e) (fx*/carry . G4f0d) (fx* . G4f0c) (greatest-fixnum . G4f0b) (least-fixnum . G4f0a) (fixnum-width . G4f09) (fixnum? . G4f08) (bitwise-rotate-bit-field . G4f07) (bitwise-reverse-bit-field . G4f06) (bitwise-length . G4f05) (bitwise-if . G4f04) (bitwise-first-bit-set . G4f03) (bitwise-copy-bit-field . G4f02) (bitwise-copy-bit . G4f01) (bitwise-bit-set? . G4f00) (bitwise-bit-field . G4eff) (bitwise-bit-count . G4efe) (bitwise-xor . G4efd) (bitwise-ior . G4efc) (bitwise-and . G4efb) (bitwise-not . G4efa) (bitwise-arithmetic-shift-right . G4ef9) (bitwise-arithmetic-shift-left . G4ef8) (bitwise-arithmetic-shift . G4ef7) (zero? . G4ef6) (vector? . G4ef5) (vector-set! . G4ef4) (vector-ref . G4ef3) (vector-map . G4ef2) (vector-length . G4ef1) (vector-for-each . G4ef0) (vector-fill! . G4eef) (vector->list . G4eee) (vector . G4eed) (values . G4eec) (truncate . G4eeb) (tan . G4eea) (symbol? . G4ee9) (symbol=? . G4ee8) (symbol->string . G4ee7) (substring . G4ee6) (string? . G4ee5) (string>? . G4ee4) (string>=? . G4ee3) (string=? . G4ee2) (string<? . G4ee1) (string<=? . G4ee0) (string-ref . G4edf) (string-length . G4ede) (string-for-each . G4edd) (string-copy . G4edc) (string-append . G4edb) (string->symbol . G4eda) (string->number . G4ed9) (string->list . G4ed8) (string . G4ed7) (sqrt . G4ed6) (sin . G4ed5) (round . G4ed4) (reverse . G4ed3) (real? . G4ed2) (real-valued? . G4ed1) (real-part . G4ed0) (rationalize . G4ecf) (rational? . G4ece) (rational-valued? . G4ecd) (procedure? . G4ecc) (positive? . G4ecb) (pair? . G4eca) (odd? . G4ec9) (numerator . G4ec8) (number? . G4ec7) (number->string . G4ec6) (null? . G4ec5) (not . G4ec4) (negative? . G4ec3) (nan? . G4ec2) (min . G4ec1) (max . G4ec0) (map . G4ebf) (make-vector . G4ebe) (make-string . G4ebd) (make-rectangular . G4ebc) (make-polar . G4ebb) (magnitude . G4eba) (log . G4eb9) (list? . G4eb8) (list-tail . G4eb7) (list-ref . G4eb6) (list->vector . G4eb5) (list->string . G4eb4) (list . G4eb3) (length . G4eb2) (lcm . G4eb1) (integer? . G4eb0) (integer-valued? . G4eaf) (integer->char . G4eae) (infinite? . G4ead) (inexact? . G4eac) (inexact . G4eab) (imag-part . G4eaa) (gcd . G4ea9) (for-each . G4ea8) (floor . G4ea7) (finite? . G4ea6) (expt . G4ea5) (exp . G4ea4) (exact? . G4ea3) (exact-integer-sqrt . G4ea2) (exact . G4ea1) (even? . G4ea0) (error . G4e9f) (eqv? . G4e9e) (equal? . G4e9d) (eq? . G4e9c) (dynamic-wind . G4e9b) (div0-and-mod0 . G4e9a) (mod0 . G4e99) (div0 . G4e98) (div-and-mod . G4e97) (mod . G4e96) (div . G4e95) (denominator . G4e94) (cos . G4e93) (cons . G4e92) (complex? . G4e91) (char? . G4e90) (char>? . G4e8f) (char>=? . G4e8e) (char=? . G4e8d) (char<? . G4e8c) (char<=? . G4e8b) (char->integer . G4e8a) (ceiling . G4e89) (call-with-values . G4e88) (call/cc . G4e87) (call-with-current-continuation . G4e86) (cddddr . G4e85) (cdddar . G4e84) (cddadr . G4e83) (cddaar . G4e82) (cdaddr . G4e81) (cdadar . G4e80) (cdaadr . G4e7f) (cdaaar . G4e7e) (cadddr . G4e7d) (caddar . G4e7c) (cadadr . G4e7b) (cadaar . G4e7a) (caaddr . G4e79) (caadar . G4e78) (caaadr . G4e77) (caaaar . G4e76) (cdddr . G4e75) (cddar . G4e74) (cdadr . G4e73) (cdaar . G4e72) (caddr . G4e71) (cadar . G4e70) (caadr . G4e6f) (caaar . G4e6e) (cddr . G4e6d) (cdar . G4e6c) (cadr . G4e6b) (caar . G4e6a) (cdr . G4e69) (car . G4e68) (boolean? . G4e67) (boolean=? . G4e66) (atan . G4e65) (assertion-violation . G4e64) (asin . G4e63) (apply . G4e62) (append . G4e61) (angle . G4e60) (acos . G4e5f) (abs . G4e5e) (/ . G4e5d) (* . G4e5c) (- . G4e5b) (+ . G4e5a) (>= . G4e59) (> . G4e58) (= . G4e57) (<= . G4e56) (< . G4e55) (library . G4e54) (export . G4e53) (&no-nans . G4e52) (&no-infinities . G4e51) (&i/o-encoding . G4e50) (&i/o-decoding . G4e4f) (&i/o-port . G4e4e) (&i/o-file-does-not-exist . G4e4d) (&i/o-file-already-exists . G4e4c) (&i/o-file-is-read-only . G4e4b) (&i/o-file-protection . G4e4a) (&i/o-filename . G4e49) (&i/o-invalid-position . G4e48) (&i/o-write . G4e47) (&i/o-read . G4e46) (&i/o . G4e45) (&undefined . G4e44) (&syntax . G4e43) (&lexical . G4e42) (&implementation-restriction . G4e41) (&non-continuable . G4e40) (&who . G4e3f) (&irritants . G4e3e) (&assertion . G4e3d) (&violation . G4e3c) (&error . G4e3b) (&serious . G4e3a) (&warning . G4e39) (&message . G4e38) (&condition . G4e37) (define-condition-type . G4e36) (define-enumeration . G4e35) (define-record-type . G4e34) (parent-rtd . G4e33) (nongenerative . G4e32) (opaque . G4e31) (sealed . G4e30) (protocol . G4e2f) (parent . G4e2e) (immutable . G4e2d) (mutable . G4e2c) (fields . G4e2b) (error-handling-mode . G4e2a) (file-options . G4e29) (buffer-mode . G4e28) (eol-style . G4e27) (guard . G4e26) (unsyntax-splicing . G4e23) (unsyntax . G4e22) (unquote-splicing . G4e21) (unquote . G4e20) (_ . G4e1f) (else . G4e1e) (=> . G4e1d) (... . G4e1c) (assert . G4e1b) (endianness . G4e1a) (or . G4e17) (and . G4e16) (do . G4e15) (cond . G4e14) (let* . G4e13) (let . G4e12) (let*-values . G4e11) (let-values . G4e10) (identifier-syntax . G4e0f) (with-syntax . G4e0e) (quasisyntax . G4e0d) (quasiquote . G4e0c) (syntax-rules . G4e0b) (include . G4e0a) (record-constructor-descriptor . G4e08) (record-type-descriptor . G4e07) (case . G4e06) (unless . G4e04) (when . G4e03) (if . G4e02) (letrec* . G4e01) (letrec . G4e00) (case-lambda . G4dfe) (lambda . G4dfd) (syntax . G4dfc) (syntax-case . G4dfb) (quote . G4dfa) (letrec-syntax . G4df8) (let-syntax . G4df7) (set! . G4df6) (import . G4df5) (begin . G4df4) (define-syntax . G4df2) (define . G4df1)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50ee '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4e21) (unquote . G4e20) (delay . G4e19) (or . G4e17) (and . G4e16) (do . G4e15) (cond . G4e14) (let* . G4e13) (let . G4e12) (quasiquote . G4e0c) (syntax-rules . G4e0b) (case . G4e06) (if . G4e02) (letrec . G4e00) (lambda . G4dfd) (quote . G4dfa) (letrec-syntax . G4df8) (let-syntax . G4df7) (set! . G4df6) (begin . G4df4) (define-syntax . G4df2) (define . G4df1)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50ef '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5068) (string-ci>=? . G5067) (string-ci=? . G5066) (string-ci<? . G5065) (string-ci<=? . G5064) (char-whitespace? . G5063) (char-upper-case? . G5062) (char-numeric? . G5060) (char-lower-case? . G505f) (char-upcase . G505d) (char-downcase . G505a) (char-ci>? . G5059) (char-ci>=? . G5058) (char-ci=? . G5057) (char-ci<? . G5056) (char-ci<=? . G5055) (char-alphabetic? . G5054) (call-with-output-file . G5028) (call-with-input-file . G5027) (write-char . G5026) (write . G5025) (with-output-to-file . G5024) (with-input-from-file . G5023) (read-char . G5022) (read . G5021) (peek-char . G5020) (open-output-file . G501f) (open-input-file . G501e) (newline . G501d) (display . G501c) (close-output-port . G501b) (close-input-port . G501a) (eof-object . G5018) (current-output-port . G5016) (current-input-port . G5015) (output-port? . G5014) (input-port? . G5013) (scheme-report-environment . G30f3) (quotient . G4fd9) (null-environment . G30f1) (remainder . G4fd8) (modulo . G4fd7) (inexact->exact . G4fd6) (force . G4fd5) (exact->inexact . G4fd4) (string-fill! . G4fd2) (string-set! . G4fd1) (set-cdr! . G4fd0) (set-car! . G4fcf) (memv . G4fc9) (memq . G4fc8) (member . G4fc6) (assv . G4fbe) (assq . G4fbd) (assoc . G4fbb) (eval . G30f7) (zero? . G4ef6) (vector? . G4ef5) (vector-set! . G4ef4) (vector-ref . G4ef3) (vector-length . G4ef1) (vector-fill! . G4eef) (vector->list . G4eee) (vector . G4eed) (values . G4eec) (truncate . G4eeb) (tan . G4eea) (symbol? . G4ee9) (symbol->string . G4ee7) (substring . G4ee6) (string? . G4ee5) (string>? . G4ee4) (string>=? . G4ee3) (string=? . G4ee2) (string<? . G4ee1) (string<=? . G4ee0) (string-ref . G4edf) (string-length . G4ede) (string-copy . G4edc) (string-append . G4edb) (string->symbol . G4eda) (string->number . G4ed9) (string->list . G4ed8) (string . G4ed7) (sqrt . G4ed6) (sin . G4ed5) (round . G4ed4) (reverse . G4ed3) (real? . G4ed2) (real-part . G4ed0) (rationalize . G4ecf) (rational? . G4ece) (procedure? . G4ecc) (positive? . G4ecb) (pair? . G4eca) (odd? . G4ec9) (numerator . G4ec8) (number? . G4ec7) (number->string . G4ec6) (not . G4ec4) (negative? . G4ec3) (min . G4ec1) (max . G4ec0) (map . G4ebf) (make-vector . G4ebe) (make-string . G4ebd) (make-rectangular . G4ebc) (make-polar . G4ebb) (magnitude . G4eba) (log . G4eb9) (list? . G4eb8) (list-tail . G4eb7) (list-ref . G4eb6) (list->vector . G4eb5) (list->string . G4eb4) (list . G4eb3) (length . G4eb2) (lcm . G4eb1) (integer? . G4eb0) (integer->char . G4eae) (inexact? . G4eac) (imag-part . G4eaa) (gcd . G4ea9) (for-each . G4ea8) (floor . G4ea7) (expt . G4ea5) (exp . G4ea4) (exact? . G4ea3) (even? . G4ea0) (eqv? . G4e9e) (equal? . G4e9d) (eq? . G4e9c) (dynamic-wind . G4e9b) (denominator . G4e94) (cos . G4e93) (cons . G4e92) (complex? . G4e91) (char? . G4e90) (char>? . G4e8f) (char>=? . G4e8e) (char=? . G4e8d) (char<? . G4e8c) (char<=? . G4e8b) (char->integer . G4e8a) (ceiling . G4e89) (call-with-values . G4e88) (call-with-current-continuation . G4e86) (cddddr . G4e85) (cdddar . G4e84) (cddadr . G4e83) (cddaar . G4e82) (cdaddr . G4e81) (cdadar . G4e80) (cdaadr . G4e7f) (cdaaar . G4e7e) (cadddr . G4e7d) (caddar . G4e7c) (cadadr . G4e7b) (cadaar . G4e7a) (caaddr . G4e79) (caadar . G4e78) (caaadr . G4e77) (caaaar . G4e76) (cdddr . G4e75) (cddar . G4e74) (cdadr . G4e73) (cdaar . G4e72) (caddr . G4e71) (cadar . G4e70) (caadr . G4e6f) (caaar . G4e6e) (cddr . G4e6d) (cdar . G4e6c) (cadr . G4e6b) (caar . G4e6a) (cdr . G4e69) (car . G4e68) (boolean? . G4e67) (atan . G4e65) (asin . G4e63) (apply . G4e62) (append . G4e61) (angle . G4e60) (acos . G4e5f) (abs . G4e5e) (/ . G4e5d) (* . G4e5c) (- . G4e5b) (+ . G4e5a) (>= . G4e59) (> . G4e58) (= . G4e57) (<= . G4e56) (< . G4e55) (unquote-splicing . G4e21) (unquote . G4e20) (delay . G4e19) (or . G4e17) (and . G4e16) (do . G4e15) (cond . G4e14) (let* . G4e13) (let . G4e12) (quasiquote . G4e0c) (syntax-rules . G4e0b) (case . G4e06) (if . G4e02) (letrec . G4e00) (lambda . G4dfd) (quote . G4dfa) (letrec-syntax . G4df8) (let-syntax . G4df7) (set! . G4df6) (begin . G4df4) (define-syntax . G4df2) (define . G4df1)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f0 '(psyntax modules) '() '() '() '() '((module . G4df3)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f1 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f2 '(rnrs) '(6) '() '() '() '((regexp? . G50ad) (string-upcase . G5070) (string-titlecase . G506f) (string-normalize-nfkd . G506e) (string-normalize-nfkc . G506d) (string-normalize-nfd . G506c) (string-normalize-nfc . G506b) (string-foldcase . G506a) (string-downcase . G5069) (string-ci>? . G5068) (string-ci>=? . G5067) (string-ci=? . G5066) (string-ci<? . G5065) (string-ci<=? . G5064) (char-whitespace? . G5063) (char-upper-case? . G5062) (char-title-case? . G5061) (char-numeric? . G5060) (char-lower-case? . G505f) (char-general-category . G505e) (char-upcase . G505d) (char-titlecase . G505c) (char-foldcase . G505b) (char-downcase . G505a) (char-ci>? . G5059) (char-ci>=? . G5058) (char-ci=? . G5057) (char-ci<? . G5056) (char-ci<=? . G5055) (char-alphabetic? . G5054) (make-variable-transformer . G2e24) (identifier? . G311b) (generate-temporaries . G3105) (free-identifier=? . G3107) (syntax->datum . G311f) (datum->syntax . G311d) (bound-identifier=? . G3109) (record-type-descriptor? . G5053) (record-predicate . G5052) (record-mutator . G5051) (record-constructor . G5050) (record-accessor . G504f) (make-record-type-descriptor . G504e) (make-record-constructor-descriptor . G504d) (record? . G504c) (record-type-uid . G504b) (record-type-sealed? . G504a) (record-type-parent . G5049) (record-type-opaque? . G5048) (record-type-name . G5047) (record-type-generative? . G5046) (record-type-field-names . G5045) (record-rtd . G5044) (record-field-mutable? . G5043) (delete-file . G5042) (file-exists? . G5041) (vector-sort! . G5040) (vector-sort . G503f) (list-sort . G503e) (symbol-hash . G503d) (string-ci-hash . G503c) (string-hash . G503b) (equal-hash . G503a) (hashtable-equivalence-function . G5039) (make-hashtable . G5038) (hashtable-hash-function . G5037) (make-eqv-hashtable . G5036) (make-eq-hashtable . G5035) (hashtable? . G5034) (hashtable-update! . G5033) (hashtable-size . G5032) (hashtable-set! . G5031) (hashtable-ref . G5030) (hashtable-mutable? . G502f) (hashtable-keys . G502e) (hashtable-entries . G502d) (hashtable-delete! . G502c) (hashtable-copy . G502b) (hashtable-contains? . G502a) (hashtable-clear! . G5029) (call-with-output-file . G5028) (call-with-input-file . G5027) (write-char . G5026) (write . G5025) (with-output-to-file . G5024) (with-input-from-file . G5023) (read-char . G5022) (read . G5021) (peek-char . G5020) (open-output-file . G501f) (open-input-file . G501e) (newline . G501d) (display . G501c) (close-output-port . G501b) (close-input-port . G501a) (eof-object? . G5019) (eof-object . G5018) (current-error-port . G5017) (current-output-port . G5016) (current-input-port . G5015) (output-port? . G5014) (input-port? . G5013) (utf-8-codec . G5012) (utf-16-codec . G5011) (transcoder-error-handling-mode . G5010) (transcoder-eol-style . G500f) (transcoder-codec . G500e) (transcoded-port . G500d) (textual-port? . G500c) (string->bytevector . G500b) (standard-output-port . G500a) (standard-input-port . G5009) (standard-error-port . G5008) (set-port-position! . G5007) (put-u8 . G5006) (put-string . G5005) (put-datum . G5004) (put-char . G5003) (put-bytevector . G5002) (port? . G5001) (port-transcoder . G5000) (port-position . G4fff) (port-has-set-port-position!? . G4ffe) (port-has-port-position? . G4ffd) (port-eof? . G4ffc) (output-port-buffer-mode . G4ffb) (open-string-output-port . G4ffa) (open-string-input-port . G4ff9) (open-file-output-port . G4ff8) (open-file-input/output-port . G4ff7) (open-file-input-port . G4ff6) (open-bytevector-output-port . G4ff5) (open-bytevector-input-port . G4ff4) (native-transcoder . G4ff3) (native-eol-style . G4ff2) (make-transcoder . G4ff1) (latin-1-codec . G4ff0) (make-i/o-write-error . G4c34) (make-i/o-read-error . G4c20) (make-i/o-port-error . G4ccb) (make-i/o-invalid-position-error . G4c49) (make-i/o-filename-error . G4c62) (make-i/o-file-protection-error . G4c7a) (make-i/o-file-is-read-only-error . G4c8e) (make-i/o-file-does-not-exist-error . G4cb6) (make-i/o-file-already-exists-error . G4ca2) (make-i/o-error . G4c0c) (make-i/o-encoding-error . G4cf8) (make-i/o-decoding-error . G4ce3) (make-custom-textual-output-port . G4fef) (make-custom-textual-input/output-port . G4fee) (make-custom-textual-input-port . G4fed) (make-custom-binary-output-port . G4fec) (make-custom-binary-input/output-port . G4feb) (make-custom-binary-input-port . G4fea) (make-bytevector . G4fe9) (lookahead-u8 . G4fe8) (lookahead-char . G4fe7) (i/o-write-error? . G4c36) (i/o-read-error? . G4c22) (i/o-port-error? . G4ccf) (i/o-invalid-position-error? . G4c4d) (i/o-filename-error? . G4c66) (i/o-file-protection-error? . G4c7c) (i/o-file-is-read-only-error? . G4c90) (i/o-file-does-not-exist-error? . G4cb8) (i/o-file-already-exists-error? . G4ca4) (i/o-error? . G4c0e) (i/o-error-port . G4cd1) (i/o-error-filename . G4c68) (i/o-encoding-error? . G4cfc) (i/o-encoding-error-char . G4cfe) (i/o-decoding-error? . G4ce5) (get-u8 . G4fe6) (get-string-n! . G4fe5) (get-string-n . G4fe4) (get-string-all . G4fe3) (get-line . G4fe2) (get-datum . G4fe1) (get-char . G4fe0) (get-bytevector-some . G4fdf) (get-bytevector-n! . G4fde) (get-bytevector-n . G4fdd) (get-bytevector-all . G4fdc) (flush-output-port . G4fdb) (close-port . G4fda) (exit . G4fd3) (command-line . G4d57) (remove . G4fce) (remv . G4fcd) (remp . G4fcc) (remq . G4fcb) (partition . G4fca) (memv . G4fc9) (memq . G4fc8) (memp . G4fc7) (member . G4fc6) (exists . G4fc5) (for-all . G4fc4) (fold-right . G4fc3) (fold-left . G4fc2) (find . G4fc1) (filter . G4fc0) (cons* . G4fbf) (assv . G4fbe) (assq . G4fbd) (assp . G4fbc) (assoc . G4fbb) (call-with-string-output-port . G4fba) (call-with-port . G4fb9) (call-with-bytevector-output-port . G4fb8) (bytevector->string . G4fb7) (buffer-mode? . G4fb6) (binary-port? . G4fb5) (with-exception-handler . G4fb4) (raise-continuable . G4fb3) (raise . G4fb2) (make-enumeration . G4fb1) (enum-set=? . G4fb0) (enum-set-universe . G4faf) (enum-set-union . G4fae) (enum-set-subset? . G4fad) (enum-set-projection . G4fac) (enum-set-member? . G4fab) (enum-set-intersection . G4faa) (enum-set-indexer . G4fa9) (enum-set-difference . G4fa8) (enum-set-constructor . G4fa7) (enum-set-complement . G4fa6) (enum-set->list . G4fa5) (who-condition? . G4b2a) (warning? . G4aaa) (violation? . G4ae6) (undefined-violation? . G4b9a) (syntax-violation? . G4b82) (syntax-violation-subform . G4b86) (syntax-violation-form . G4b84) (syntax-violation . G3119) (simple-conditions . G4fa4) (serious-condition? . G4abe) (non-continuable-violation? . G4b40) (message-condition? . G4a94) (make-who-condition . G4b26) (make-warning . G4aa8) (make-violation . G4ae4) (make-undefined-violation . G4b98) (make-syntax-violation . G4b7c) (make-serious-condition . G4abc) (make-non-continuable-violation . G4b3e) (make-message-condition . G4a90) (make-lexical-violation . G4b66) (make-irritants-condition . G4b0d) (make-implementation-restriction-violation . G4b52) (make-error . G4ad0) (make-assertion-violation . G4af8) (lexical-violation? . G4b68) (irritants-condition? . G4b11) (implementation-restriction-violation? . G4b54) (error? . G4ad2) (condition-who . G4b2c) (condition-predicate . G4fa3) (condition-message . G4a96) (condition-irritants . G4b13) (condition-accessor . G4fa2) (condition . G4fa1) (assertion-violation? . G4afa) (condition? . G4fa0) (utf32->string . G4f9f) (utf16->string . G4f9e) (utf8->string . G4f9d) (uint-list->bytevector . G4f9c) (u8-list->bytevector . G4f9b) (string->utf8 . G4f9a) (string->utf32 . G4f99) (string->utf16 . G4f98) (sint-list->bytevector . G4f97) (native-endianness . G4f96) (bytevector? . G4f95) (bytevector=? . G4f94) (bytevector-uint-set! . G4f93) (bytevector-uint-ref . G4f92) (bytevector-u8-set! . G4f91) (bytevector-u8-ref . G4f90) (bytevector-u64-set! . G4f8f) (bytevector-u64-ref . G4f8e) (bytevector-u64-native-set! . G4f8d) (bytevector-u64-native-ref . G4f8c) (bytevector-u32-set! . G4f8b) (bytevector-u32-ref . G4f8a) (bytevector-u32-native-set! . G4f89) (bytevector-u32-native-ref . G4f88) (bytevector-u16-set! . G4f87) (bytevector-u16-ref . G4f86) (bytevector-u16-native-set! . G4f85) (bytevector-u16-native-ref . G4f84) (bytevector-sint-set! . G4f83) (bytevector-sint-ref . G4f82) (bytevector-s8-set! . G4f81) (bytevector-s8-ref . G4f80) (bytevector-s64-set! . G4f7f) (bytevector-s64-ref . G4f7e) (bytevector-s64-native-set! . G4f7d) (bytevector-s64-native-ref . G4f7c) (bytevector-s32-set! . G4f7b) (bytevector-s32-ref . G4f7a) (bytevector-s32-native-set! . G4f79) (bytevector-s32-native-ref . G4f78) (bytevector-s16-set! . G4f77) (bytevector-s16-ref . G4f76) (bytevector-s16-native-set! . G4f75) (bytevector-s16-native-ref . G4f74) (bytevector-length . G4f73) (bytevector-ieee-single-ref . G4f72) (bytevector-ieee-single-native-set! . G4f71) (bytevector-ieee-single-native-ref . G4f70) (bytevector-ieee-double-ref . G4f6f) (bytevector-ieee-double-native-set! . G4f6e) (bytevector-ieee-double-native-ref . G4f6d) (bytevector-fill! . G4f6c) (bytevector-copy! . G4f6b) (bytevector-copy . G4f6a) (bytevector->uint-list . G4f69) (bytevector->u8-list . G4f68) (bytevector->sint-list . G4f67) (no-nans-violation? . G4f66) (no-infinities-violation? . G4f65) (make-no-nans-violation . G4f64) (make-no-infinities-violation . G4f63) (real->flonum . G4f62) (flzero? . G4f61) (fltruncate . G4f60) (fltan . G4f5f) (flsqrt . G4f5e) (flsin . G4f5d) (flround . G4f5c) (flpositive? . G4f5b) (flonum? . G4f5a) (flodd? . G4f59) (flnumerator . G4f58) (flnegative? . G4f57) (flnan? . G4f56) (flmod0 . G4f55) (flmod . G4f54) (flmin . G4f53) (flmax . G4f52) (fllog . G4f51) (flinteger? . G4f50) (flinfinite? . G4f4f) (flfloor . G4f4e) (flfinite? . G4f4d) (flexpt . G4f4c) (flexp . G4f4b) (fleven? . G4f4a) (fldiv0-and-mod0 . G4f49) (fldiv0 . G4f48) (fldiv-and-mod . G4f47) (fldiv . G4f46) (fldenominator . G4f45) (flcos . G4f44) (flceiling . G4f43) (flatan . G4f42) (flasin . G4f41) (flacos . G4f40) (flabs . G4f3f) (fl>? . G4f3e) (fl>=? . G4f3d) (fl=? . G4f3c) (fl<? . G4f3b) (fl<=? . G4f3a) (fl/ . G4f39) (fl- . G4f38) (fl+ . G4f37) (fl* . G4f36) (fixnum->flonum . G4f35) (fxzero? . G4f34) (fxxor . G4f33) (fxrotate-bit-field . G4f32) (fxreverse-bit-field . G4f31) (fxpositive? . G4f30) (fxodd? . G4f2f) (fxnot . G4f2e) (fxnegative? . G4f2d) (fxmod0 . G4f2c) (fxmod . G4f2b) (fxmin . G4f2a) (fxmax . G4f29) (fxlength . G4f28) (fxior . G4f27) (fxif . G4f26) (fxfirst-bit-set . G4f25) (fxeven? . G4f24) (fxdiv0-and-mod0 . G4f23) (fxdiv0 . G4f22) (fxdiv-and-mod . G4f21) (fxdiv . G4f20) (fxcopy-bit-field . G4f1f) (fxcopy-bit . G4f1e) (fxbit-set? . G4f1d) (fxbit-field . G4f1c) (fxbit-count . G4f1b) (fxarithmetic-shift-right . G4f1a) (fxarithmetic-shift-left . G4f19) (fxarithmetic-shift . G4f18) (fxand . G4f17) (fx>? . G4f16) (fx>=? . G4f15) (fx=? . G4f14) (fx<? . G4f13) (fx<=? . G4f12) (fx-/carry . G4f11) (fx- . G4f10) (fx+/carry . G4f0f) (fx+ . G4f0e) (fx*/carry . G4f0d) (fx* . G4f0c) (greatest-fixnum . G4f0b) (least-fixnum . G4f0a) (fixnum-width . G4f09) (fixnum? . G4f08) (bitwise-rotate-bit-field . G4f07) (bitwise-reverse-bit-field . G4f06) (bitwise-length . G4f05) (bitwise-if . G4f04) (bitwise-first-bit-set . G4f03) (bitwise-copy-bit-field . G4f02) (bitwise-copy-bit . G4f01) (bitwise-bit-set? . G4f00) (bitwise-bit-field . G4eff) (bitwise-bit-count . G4efe) (bitwise-xor . G4efd) (bitwise-ior . G4efc) (bitwise-and . G4efb) (bitwise-not . G4efa) (bitwise-arithmetic-shift-right . G4ef9) (bitwise-arithmetic-shift-left . G4ef8) (bitwise-arithmetic-shift . G4ef7) (zero? . G4ef6) (vector? . G4ef5) (vector-set! . G4ef4) (vector-ref . G4ef3) (vector-map . G4ef2) (vector-length . G4ef1) (vector-for-each . G4ef0) (vector-fill! . G4eef) (vector->list . G4eee) (vector . G4eed) (values . G4eec) (truncate . G4eeb) (tan . G4eea) (symbol? . G4ee9) (symbol=? . G4ee8) (symbol->string . G4ee7) (substring . G4ee6) (string? . G4ee5) (string>? . G4ee4) (string>=? . G4ee3) (string=? . G4ee2) (string<? . G4ee1) (string<=? . G4ee0) (string-ref . G4edf) (string-length . G4ede) (string-for-each . G4edd) (string-copy . G4edc) (string-append . G4edb) (string->symbol . G4eda) (string->number . G4ed9) (string->list . G4ed8) (string . G4ed7) (sqrt . G4ed6) (sin . G4ed5) (round . G4ed4) (reverse . G4ed3) (real? . G4ed2) (real-valued? . G4ed1) (real-part . G4ed0) (rationalize . G4ecf) (rational? . G4ece) (rational-valued? . G4ecd) (procedure? . G4ecc) (positive? . G4ecb) (pair? . G4eca) (odd? . G4ec9) (numerator . G4ec8) (number? . G4ec7) (number->string . G4ec6) (null? . G4ec5) (not . G4ec4) (negative? . G4ec3) (nan? . G4ec2) (min . G4ec1) (max . G4ec0) (map . G4ebf) (make-vector . G4ebe) (make-string . G4ebd) (make-rectangular . G4ebc) (make-polar . G4ebb) (magnitude . G4eba) (log . G4eb9) (list? . G4eb8) (list-tail . G4eb7) (list-ref . G4eb6) (list->vector . G4eb5) (list->string . G4eb4) (list . G4eb3) (length . G4eb2) (lcm . G4eb1) (integer? . G4eb0) (integer-valued? . G4eaf) (integer->char . G4eae) (infinite? . G4ead) (inexact? . G4eac) (inexact . G4eab) (imag-part . G4eaa) (gcd . G4ea9) (for-each . G4ea8) (floor . G4ea7) (finite? . G4ea6) (expt . G4ea5) (exp . G4ea4) (exact? . G4ea3) (exact-integer-sqrt . G4ea2) (exact . G4ea1) (even? . G4ea0) (error . G4e9f) (eqv? . G4e9e) (equal? . G4e9d) (eq? . G4e9c) (dynamic-wind . G4e9b) (div0-and-mod0 . G4e9a) (mod0 . G4e99) (div0 . G4e98) (div-and-mod . G4e97) (mod . G4e96) (div . G4e95) (denominator . G4e94) (cos . G4e93) (cons . G4e92) (complex? . G4e91) (char? . G4e90) (char>? . G4e8f) (char>=? . G4e8e) (char=? . G4e8d) (char<? . G4e8c) (char<=? . G4e8b) (char->integer . G4e8a) (ceiling . G4e89) (call-with-values . G4e88) (call/cc . G4e87) (call-with-current-continuation . G4e86) (cddddr . G4e85) (cdddar . G4e84) (cddadr . G4e83) (cddaar . G4e82) (cdaddr . G4e81) (cdadar . G4e80) (cdaadr . G4e7f) (cdaaar . G4e7e) (cadddr . G4e7d) (caddar . G4e7c) (cadadr . G4e7b) (cadaar . G4e7a) (caaddr . G4e79) (caadar . G4e78) (caaadr . G4e77) (caaaar . G4e76) (cdddr . G4e75) (cddar . G4e74) (cdadr . G4e73) (cdaar . G4e72) (caddr . G4e71) (cadar . G4e70) (caadr . G4e6f) (caaar . G4e6e) (cddr . G4e6d) (cdar . G4e6c) (cadr . G4e6b) (caar . G4e6a) (cdr . G4e69) (car . G4e68) (boolean? . G4e67) (boolean=? . G4e66) (atan . G4e65) (assertion-violation . G4e64) (asin . G4e63) (apply . G4e62) (append . G4e61) (angle . G4e60) (acos . G4e5f) (abs . G4e5e) (/ . G4e5d) (* . G4e5c) (- . G4e5b) (+ . G4e5a) (>= . G4e59) (> . G4e58) (= . G4e57) (<= . G4e56) (< . G4e55) (&no-nans . G4e52) (&no-infinities . G4e51) (&i/o-encoding . G4e50) (&i/o-decoding . G4e4f) (&i/o-port . G4e4e) (&i/o-file-does-not-exist . G4e4d) (&i/o-file-already-exists . G4e4c) (&i/o-file-is-read-only . G4e4b) (&i/o-file-protection . G4e4a) (&i/o-filename . G4e49) (&i/o-invalid-position . G4e48) (&i/o-write . G4e47) (&i/o-read . G4e46) (&i/o . G4e45) (&undefined . G4e44) (&syntax . G4e43) (&lexical . G4e42) (&implementation-restriction . G4e41) (&non-continuable . G4e40) (&who . G4e3f) (&irritants . G4e3e) (&assertion . G4e3d) (&violation . G4e3c) (&error . G4e3b) (&serious . G4e3a) (&warning . G4e39) (&message . G4e38) (&condition . G4e37) (define-condition-type . G4e36) (define-enumeration . G4e35) (define-record-type . G4e34) (parent-rtd . G4e33) (nongenerative . G4e32) (opaque . G4e31) (sealed . G4e30) (protocol . G4e2f) (parent . G4e2e) (immutable . G4e2d) (mutable . G4e2c) (fields . G4e2b) (error-handling-mode . G4e2a) (file-options . G4e29) (buffer-mode . G4e28) (eol-style . G4e27) (guard . G4e26) (unsyntax-splicing . G4e23) (unsyntax . G4e22) (unquote-splicing . G4e21) (unquote . G4e20) (_ . G4e1f) (else . G4e1e) (=> . G4e1d) (... . G4e1c) (assert . G4e1b) (endianness . G4e1a) (or . G4e17) (and . G4e16) (do . G4e15) (cond . G4e14) (let* . G4e13) (let . G4e12) (let*-values . G4e11) (let-values . G4e10) (identifier-syntax . G4e0f) (with-syntax . G4e0e) (quasisyntax . G4e0d) (quasiquote . G4e0c) (syntax-rules . G4e0b) (record-constructor-descriptor . G4e08) (record-type-descriptor . G4e07) (case . G4e06) (unless . G4e04) (when . G4e03) (if . G4e02) (letrec* . G4e01) (letrec . G4e00) (case-lambda . G4dfe) (lambda . G4dfd) (syntax . G4dfc) (syntax-case . G4dfb) (quote . G4dfa) (letrec-syntax . G4df8) (let-syntax . G4df7) (set! . G4df6) (begin . G4df4) (define-syntax . G4df2) (define . G4df1)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f3 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G30f3) (quotient . G4fd9) (null-environment . G30f1) (remainder . G4fd8) (modulo . G4fd7) (inexact->exact . G4fd6) (force . G4fd5) (exact->inexact . G4fd4) (delay . G4e19)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f4 '(rnrs control) '(6) '() '() '() '((do . G4e15) (unless . G4e04) (when . G4e03) (case-lambda . G4dfe)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f5 '(rnrs eval) '(6) '() '() '() '((eval . G30f7) (environment . G30ef)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f6 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fd0) (set-car! . G4fcf)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f7 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fd2) (string-set! . G4fd1)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f8 '(rnrs programs) '(6) '() '() '() '((exit . G4fd3) (command-line . G4d57)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50f9 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e24) (identifier? . G311b) (generate-temporaries . G3105) (free-identifier=? . G3107) (syntax->datum . G311f) (datum->syntax . G311d) (bound-identifier=? . G3109) (syntax-violation . G3119) (unsyntax-splicing . G4e23) (unsyntax . G4e22) (_ . G4e1f) (... . G4e1c) (with-syntax . G4e0e) (quasisyntax . G4e0d) (syntax . G4dfc) (syntax-case . G4dfb)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50fa '(rnrs files) '(6) '() '() '() '((delete-file . G5042) (file-exists? . G5041) (make-i/o-write-error . G4c34) (make-i/o-read-error . G4c20) (make-i/o-port-error . G4ccb) (make-i/o-invalid-position-error . G4c49) (make-i/o-filename-error . G4c62) (make-i/o-file-protection-error . G4c7a) (make-i/o-file-is-read-only-error . G4c8e) (make-i/o-file-does-not-exist-error . G4cb6) (make-i/o-file-already-exists-error . G4ca2) (make-i/o-error . G4c0c) (i/o-write-error? . G4c36) (i/o-read-error? . G4c22) (i/o-port-error? . G4ccf) (i/o-invalid-position-error? . G4c4d) (i/o-filename-error? . G4c66) (i/o-file-protection-error? . G4c7c) (i/o-file-is-read-only-error? . G4c90) (i/o-file-does-not-exist-error? . G4cb8) (i/o-file-already-exists-error? . G4ca4) (i/o-error? . G4c0e) (i/o-error-port . G4cd1) (i/o-error-filename . G4c68) (&i/o-port . G4e4e) (&i/o-file-does-not-exist . G4e4d) (&i/o-file-already-exists . G4e4c) (&i/o-file-is-read-only . G4e4b) (&i/o-file-protection . G4e4a) (&i/o-filename . G4e49) (&i/o-invalid-position . G4e48) (&i/o-write . G4e47) (&i/o-read . G4e46) (&i/o . G4e45)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50fb '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5040) (vector-sort . G503f) (list-sort . G503e)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50fc '(rnrs base) '(6) '() '() '() '((zero? . G4ef6) (vector? . G4ef5) (vector-set! . G4ef4) (vector-ref . G4ef3) (vector-map . G4ef2) (vector-length . G4ef1) (vector-for-each . G4ef0) (vector-fill! . G4eef) (vector->list . G4eee) (vector . G4eed) (values . G4eec) (truncate . G4eeb) (tan . G4eea) (symbol? . G4ee9) (symbol=? . G4ee8) (symbol->string . G4ee7) (substring . G4ee6) (string? . G4ee5) (string>? . G4ee4) (string>=? . G4ee3) (string=? . G4ee2) (string<? . G4ee1) (string<=? . G4ee0) (string-ref . G4edf) (string-length . G4ede) (string-for-each . G4edd) (string-copy . G4edc) (string-append . G4edb) (string->symbol . G4eda) (string->number . G4ed9) (string->list . G4ed8) (string . G4ed7) (sqrt . G4ed6) (sin . G4ed5) (round . G4ed4) (reverse . G4ed3) (real? . G4ed2) (real-valued? . G4ed1) (real-part . G4ed0) (rationalize . G4ecf) (rational? . G4ece) (rational-valued? . G4ecd) (procedure? . G4ecc) (positive? . G4ecb) (pair? . G4eca) (odd? . G4ec9) (numerator . G4ec8) (number? . G4ec7) (number->string . G4ec6) (null? . G4ec5) (not . G4ec4) (negative? . G4ec3) (nan? . G4ec2) (min . G4ec1) (max . G4ec0) (map . G4ebf) (make-vector . G4ebe) (make-string . G4ebd) (make-rectangular . G4ebc) (make-polar . G4ebb) (magnitude . G4eba) (log . G4eb9) (list? . G4eb8) (list-tail . G4eb7) (list-ref . G4eb6) (list->vector . G4eb5) (list->string . G4eb4) (list . G4eb3) (length . G4eb2) (lcm . G4eb1) (integer? . G4eb0) (integer-valued? . G4eaf) (integer->char . G4eae) (infinite? . G4ead) (inexact? . G4eac) (inexact . G4eab) (imag-part . G4eaa) (gcd . G4ea9) (for-each . G4ea8) (floor . G4ea7) (finite? . G4ea6) (expt . G4ea5) (exp . G4ea4) (exact? . G4ea3) (exact-integer-sqrt . G4ea2) (exact . G4ea1) (even? . G4ea0) (error . G4e9f) (eqv? . G4e9e) (equal? . G4e9d) (eq? . G4e9c) (dynamic-wind . G4e9b) (div0-and-mod0 . G4e9a) (mod0 . G4e99) (div0 . G4e98) (div-and-mod . G4e97) (mod . G4e96) (div . G4e95) (denominator . G4e94) (cos . G4e93) (cons . G4e92) (complex? . G4e91) (char? . G4e90) (char>? . G4e8f) (char>=? . G4e8e) (char=? . G4e8d) (char<? . G4e8c) (char<=? . G4e8b) (char->integer . G4e8a) (ceiling . G4e89) (call-with-values . G4e88) (call/cc . G4e87) (call-with-current-continuation . G4e86) (cddddr . G4e85) (cdddar . G4e84) (cddadr . G4e83) (cddaar . G4e82) (cdaddr . G4e81) (cdadar . G4e80) (cdaadr . G4e7f) (cdaaar . G4e7e) (cadddr . G4e7d) (caddar . G4e7c) (cadadr . G4e7b) (cadaar . G4e7a) (caaddr . G4e79) (caadar . G4e78) (caaadr . G4e77) (caaaar . G4e76) (cdddr . G4e75) (cddar . G4e74) (cdadr . G4e73) (cdaar . G4e72) (caddr . G4e71) (cadar . G4e70) (caadr . G4e6f) (caaar . G4e6e) (cddr . G4e6d) (cdar . G4e6c) (cadr . G4e6b) (caar . G4e6a) (cdr . G4e69) (car . G4e68) (boolean? . G4e67) (boolean=? . G4e66) (atan . G4e65) (assertion-violation . G4e64) (asin . G4e63) (apply . G4e62) (append . G4e61) (angle . G4e60) (acos . G4e5f) (abs . G4e5e) (/ . G4e5d) (* . G4e5c) (- . G4e5b) (+ . G4e5a) (>= . G4e59) (> . G4e58) (= . G4e57) (<= . G4e56) (< . G4e55) (unquote-splicing . G4e21) (unquote . G4e20) (_ . G4e1f) (else . G4e1e) (=> . G4e1d) (... . G4e1c) (assert . G4e1b) (or . G4e17) (and . G4e16) (cond . G4e14) (let* . G4e13) (let . G4e12) (let*-values . G4e11) (let-values . G4e10) (identifier-syntax . G4e0f) (quasiquote . G4e0c) (syntax-rules . G4e0b) (case . G4e06) (if . G4e02) (letrec* . G4e01) (letrec . G4e00) (lambda . G4dfd) (quote . G4dfa) (letrec-syntax . G4df8) (let-syntax . G4df7) (set! . G4df6) (begin . G4df4) (define-syntax . G4df2) (define . G4df1)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50fd '(rnrs lists) '(6) '() '() '() '((remove . G4fce) (remv . G4fcd) (remp . G4fcc) (remq . G4fcb) (partition . G4fca) (memv . G4fc9) (memq . G4fc8) (memp . G4fc7) (member . G4fc6) (exists . G4fc5) (for-all . G4fc4) (fold-right . G4fc3) (fold-left . G4fc2) (find . G4fc1) (filter . G4fc0) (cons* . G4fbf) (assv . G4fbe) (assq . G4fbd) (assp . G4fbc) (assoc . G4fbb)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50fe '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5028) (call-with-input-file . G5027) (write-char . G5026) (write . G5025) (with-output-to-file . G5024) (with-input-from-file . G5023) (read-char . G5022) (read . G5021) (peek-char . G5020) (open-output-file . G501f) (open-input-file . G501e) (newline . G501d) (display . G501c) (close-output-port . G501b) (close-input-port . G501a) (eof-object? . G5019) (eof-object . G5018) (current-error-port . G5017) (current-output-port . G5016) (current-input-port . G5015) (output-port? . G5014) (input-port? . G5013) (make-i/o-write-error . G4c34) (make-i/o-read-error . G4c20) (make-i/o-port-error . G4ccb) (make-i/o-invalid-position-error . G4c49) (make-i/o-filename-error . G4c62) (make-i/o-file-protection-error . G4c7a) (make-i/o-file-is-read-only-error . G4c8e) (make-i/o-file-does-not-exist-error . G4cb6) (make-i/o-file-already-exists-error . G4ca2) (make-i/o-error . G4c0c) (i/o-write-error? . G4c36) (i/o-read-error? . G4c22) (i/o-port-error? . G4ccf) (i/o-invalid-position-error? . G4c4d) (i/o-filename-error? . G4c66) (i/o-file-protection-error? . G4c7c) (i/o-file-is-read-only-error? . G4c90) (i/o-file-does-not-exist-error? . G4cb8) (i/o-file-already-exists-error? . G4ca4) (i/o-error? . G4c0e) (i/o-error-port . G4cd1) (i/o-error-filename . G4c68) (&i/o-port . G4e4e) (&i/o-file-does-not-exist . G4e4d) (&i/o-file-already-exists . G4e4c) (&i/o-file-is-read-only . G4e4b) (&i/o-file-protection . G4e4a) (&i/o-filename . G4e49) (&i/o-invalid-position . G4e48) (&i/o-write . G4e47) (&i/o-read . G4e46) (&i/o . G4e45)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G50ff '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fe9) (utf32->string . G4f9f) (utf16->string . G4f9e) (utf8->string . G4f9d) (uint-list->bytevector . G4f9c) (u8-list->bytevector . G4f9b) (string->utf8 . G4f9a) (string->utf32 . G4f99) (string->utf16 . G4f98) (sint-list->bytevector . G4f97) (native-endianness . G4f96) (bytevector? . G4f95) (bytevector=? . G4f94) (bytevector-uint-set! . G4f93) (bytevector-uint-ref . G4f92) (bytevector-u8-set! . G4f91) (bytevector-u8-ref . G4f90) (bytevector-u64-set! . G4f8f) (bytevector-u64-ref . G4f8e) (bytevector-u64-native-set! . G4f8d) (bytevector-u64-native-ref . G4f8c) (bytevector-u32-set! . G4f8b) (bytevector-u32-ref . G4f8a) (bytevector-u32-native-set! . G4f89) (bytevector-u32-native-ref . G4f88) (bytevector-u16-set! . G4f87) (bytevector-u16-ref . G4f86) (bytevector-u16-native-set! . G4f85) (bytevector-u16-native-ref . G4f84) (bytevector-sint-set! . G4f83) (bytevector-sint-ref . G4f82) (bytevector-s8-set! . G4f81) (bytevector-s8-ref . G4f80) (bytevector-s64-set! . G4f7f) (bytevector-s64-ref . G4f7e) (bytevector-s64-native-set! . G4f7d) (bytevector-s64-native-ref . G4f7c) (bytevector-s32-set! . G4f7b) (bytevector-s32-ref . G4f7a) (bytevector-s32-native-set! . G4f79) (bytevector-s32-native-ref . G4f78) (bytevector-s16-set! . G4f77) (bytevector-s16-ref . G4f76) (bytevector-s16-native-set! . G4f75) (bytevector-s16-native-ref . G4f74) (bytevector-length . G4f73) (bytevector-ieee-single-ref . G4f72) (bytevector-ieee-single-native-set! . G4f71) (bytevector-ieee-single-native-ref . G4f70) (bytevector-ieee-double-ref . G4f6f) (bytevector-ieee-double-native-set! . G4f6e) (bytevector-ieee-double-native-ref . G4f6d) (bytevector-fill! . G4f6c) (bytevector-copy! . G4f6b) (bytevector-copy . G4f6a) (bytevector->uint-list . G4f69) (bytevector->u8-list . G4f68) (bytevector->sint-list . G4f67) (endianness . G4e1a)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5100 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5070) (string-titlecase . G506f) (string-normalize-nfkd . G506e) (string-normalize-nfkc . G506d) (string-normalize-nfd . G506c) (string-normalize-nfc . G506b) (string-foldcase . G506a) (string-downcase . G5069) (string-ci>? . G5068) (string-ci>=? . G5067) (string-ci=? . G5066) (string-ci<? . G5065) (string-ci<=? . G5064) (char-whitespace? . G5063) (char-upper-case? . G5062) (char-title-case? . G5061) (char-numeric? . G5060) (char-lower-case? . G505f) (char-general-category . G505e) (char-upcase . G505d) (char-titlecase . G505c) (char-foldcase . G505b) (char-downcase . G505a) (char-ci>? . G5059) (char-ci>=? . G5058) (char-ci=? . G5057) (char-ci<? . G5056) (char-ci<=? . G5055) (char-alphabetic? . G5054)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5101 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4fb4) (raise-continuable . G4fb3) (raise . G4fb2) (guard . G4e26) (else . G4e1e) (=> . G4e1d)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5102 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4f07) (bitwise-reverse-bit-field . G4f06) (bitwise-length . G4f05) (bitwise-if . G4f04) (bitwise-first-bit-set . G4f03) (bitwise-copy-bit-field . G4f02) (bitwise-copy-bit . G4f01) (bitwise-bit-set? . G4f00) (bitwise-bit-field . G4eff) (bitwise-bit-count . G4efe) (bitwise-xor . G4efd) (bitwise-ior . G4efc) (bitwise-and . G4efb) (bitwise-not . G4efa) (bitwise-arithmetic-shift-right . G4ef9) (bitwise-arithmetic-shift-left . G4ef8) (bitwise-arithmetic-shift . G4ef7)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5103 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f34) (fxxor . G4f33) (fxrotate-bit-field . G4f32) (fxreverse-bit-field . G4f31) (fxpositive? . G4f30) (fxodd? . G4f2f) (fxnot . G4f2e) (fxnegative? . G4f2d) (fxmod0 . G4f2c) (fxmod . G4f2b) (fxmin . G4f2a) (fxmax . G4f29) (fxlength . G4f28) (fxior . G4f27) (fxif . G4f26) (fxfirst-bit-set . G4f25) (fxeven? . G4f24) (fxdiv0-and-mod0 . G4f23) (fxdiv0 . G4f22) (fxdiv-and-mod . G4f21) (fxdiv . G4f20) (fxcopy-bit-field . G4f1f) (fxcopy-bit . G4f1e) (fxbit-set? . G4f1d) (fxbit-field . G4f1c) (fxbit-count . G4f1b) (fxarithmetic-shift-right . G4f1a) (fxarithmetic-shift-left . G4f19) (fxarithmetic-shift . G4f18) (fxand . G4f17) (fx>? . G4f16) (fx>=? . G4f15) (fx=? . G4f14) (fx<? . G4f13) (fx<=? . G4f12) (fx-/carry . G4f11) (fx- . G4f10) (fx+/carry . G4f0f) (fx+ . G4f0e) (fx*/carry . G4f0d) (fx* . G4f0c) (greatest-fixnum . G4f0b) (least-fixnum . G4f0a) (fixnum-width . G4f09) (fixnum? . G4f08)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5104 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4f66) (no-infinities-violation? . G4f65) (make-no-nans-violation . G4f64) (make-no-infinities-violation . G4f63) (real->flonum . G4f62) (flzero? . G4f61) (fltruncate . G4f60) (fltan . G4f5f) (flsqrt . G4f5e) (flsin . G4f5d) (flround . G4f5c) (flpositive? . G4f5b) (flonum? . G4f5a) (flodd? . G4f59) (flnumerator . G4f58) (flnegative? . G4f57) (flnan? . G4f56) (flmod0 . G4f55) (flmod . G4f54) (flmin . G4f53) (flmax . G4f52) (fllog . G4f51) (flinteger? . G4f50) (flinfinite? . G4f4f) (flfloor . G4f4e) (flfinite? . G4f4d) (flexpt . G4f4c) (flexp . G4f4b) (fleven? . G4f4a) (fldiv0-and-mod0 . G4f49) (fldiv0 . G4f48) (fldiv-and-mod . G4f47) (fldiv . G4f46) (fldenominator . G4f45) (flcos . G4f44) (flceiling . G4f43) (flatan . G4f42) (flasin . G4f41) (flacos . G4f40) (flabs . G4f3f) (fl>? . G4f3e) (fl>=? . G4f3d) (fl=? . G4f3c) (fl<? . G4f3b) (fl<=? . G4f3a) (fl/ . G4f39) (fl- . G4f38) (fl+ . G4f37) (fl* . G4f36) (fixnum->flonum . G4f35) (&no-nans . G4e52) (&no-infinities . G4e51)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5105 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G503d) (string-ci-hash . G503c) (string-hash . G503b) (equal-hash . G503a) (hashtable-equivalence-function . G5039) (make-hashtable . G5038) (hashtable-hash-function . G5037) (make-eqv-hashtable . G5036) (make-eq-hashtable . G5035) (hashtable? . G5034) (hashtable-update! . G5033) (hashtable-size . G5032) (hashtable-set! . G5031) (hashtable-ref . G5030) (hashtable-mutable? . G502f) (hashtable-keys . G502e) (hashtable-entries . G502d) (hashtable-delete! . G502c) (hashtable-copy . G502b) (hashtable-contains? . G502a) (hashtable-clear! . G5029)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5106 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5019) (eof-object . G5018) (current-error-port . G5017) (current-output-port . G5016) (current-input-port . G5015) (output-port? . G5014) (input-port? . G5013) (utf-8-codec . G5012) (utf-16-codec . G5011) (transcoder-error-handling-mode . G5010) (transcoder-eol-style . G500f) (transcoder-codec . G500e) (transcoded-port . G500d) (textual-port? . G500c) (string->bytevector . G500b) (standard-output-port . G500a) (standard-input-port . G5009) (standard-error-port . G5008) (set-port-position! . G5007) (put-u8 . G5006) (put-string . G5005) (put-datum . G5004) (put-char . G5003) (put-bytevector . G5002) (port? . G5001) (port-transcoder . G5000) (port-position . G4fff) (port-has-set-port-position!? . G4ffe) (port-has-port-position? . G4ffd) (port-eof? . G4ffc) (output-port-buffer-mode . G4ffb) (open-string-output-port . G4ffa) (open-string-input-port . G4ff9) (open-file-output-port . G4ff8) (open-file-input/output-port . G4ff7) (open-file-input-port . G4ff6) (open-bytevector-output-port . G4ff5) (open-bytevector-input-port . G4ff4) (native-transcoder . G4ff3) (native-eol-style . G4ff2) (make-transcoder . G4ff1) (latin-1-codec . G4ff0) (make-i/o-write-error . G4c34) (make-i/o-read-error . G4c20) (make-i/o-port-error . G4ccb) (make-i/o-invalid-position-error . G4c49) (make-i/o-filename-error . G4c62) (make-i/o-file-protection-error . G4c7a) (make-i/o-file-is-read-only-error . G4c8e) (make-i/o-file-does-not-exist-error . G4cb6) (make-i/o-file-already-exists-error . G4ca2) (make-i/o-error . G4c0c) (make-i/o-encoding-error . G4cf8) (make-i/o-decoding-error . G4ce3) (make-custom-textual-output-port . G4fef) (make-custom-textual-input/output-port . G4fee) (make-custom-textual-input-port . G4fed) (make-custom-binary-output-port . G4fec) (make-custom-binary-input/output-port . G4feb) (make-custom-binary-input-port . G4fea) (lookahead-u8 . G4fe8) (lookahead-char . G4fe7) (i/o-write-error? . G4c36) (i/o-read-error? . G4c22) (i/o-port-error? . G4ccf) (i/o-invalid-position-error? . G4c4d) (i/o-filename-error? . G4c66) (i/o-file-protection-error? . G4c7c) (i/o-file-is-read-only-error? . G4c90) (i/o-file-does-not-exist-error? . G4cb8) (i/o-file-already-exists-error? . G4ca4) (i/o-error? . G4c0e) (i/o-error-port . G4cd1) (i/o-error-filename . G4c68) (i/o-encoding-error? . G4cfc) (i/o-encoding-error-char . G4cfe) (i/o-decoding-error? . G4ce5) (get-u8 . G4fe6) (get-string-n! . G4fe5) (get-string-n . G4fe4) (get-string-all . G4fe3) (get-line . G4fe2) (get-datum . G4fe1) (get-char . G4fe0) (get-bytevector-some . G4fdf) (get-bytevector-n! . G4fde) (get-bytevector-n . G4fdd) (get-bytevector-all . G4fdc) (flush-output-port . G4fdb) (close-port . G4fda) (call-with-string-output-port . G4fba) (call-with-port . G4fb9) (call-with-bytevector-output-port . G4fb8) (bytevector->string . G4fb7) (buffer-mode? . G4fb6) (binary-port? . G4fb5) (&i/o-encoding . G4e50) (&i/o-decoding . G4e4f) (&i/o-port . G4e4e) (&i/o-file-does-not-exist . G4e4d) (&i/o-file-already-exists . G4e4c) (&i/o-file-is-read-only . G4e4b) (&i/o-file-protection . G4e4a) (&i/o-filename . G4e49) (&i/o-invalid-position . G4e48) (&i/o-write . G4e47) (&i/o-read . G4e46) (&i/o . G4e45) (error-handling-mode . G4e2a) (file-options . G4e29) (buffer-mode . G4e28) (eol-style . G4e27)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5107 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4fb1) (enum-set=? . G4fb0) (enum-set-universe . G4faf) (enum-set-union . G4fae) (enum-set-subset? . G4fad) (enum-set-projection . G4fac) (enum-set-member? . G4fab) (enum-set-intersection . G4faa) (enum-set-indexer . G4fa9) (enum-set-difference . G4fa8) (enum-set-constructor . G4fa7) (enum-set-complement . G4fa6) (enum-set->list . G4fa5) (define-enumeration . G4e35)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5108 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b2a) (warning? . G4aaa) (violation? . G4ae6) (undefined-violation? . G4b9a) (syntax-violation? . G4b82) (syntax-violation-subform . G4b86) (syntax-violation-form . G4b84) (syntax-violation . G3119) (simple-conditions . G4fa4) (serious-condition? . G4abe) (non-continuable-violation? . G4b40) (message-condition? . G4a94) (make-who-condition . G4b26) (make-warning . G4aa8) (make-violation . G4ae4) (make-undefined-violation . G4b98) (make-syntax-violation . G4b7c) (make-serious-condition . G4abc) (make-non-continuable-violation . G4b3e) (make-message-condition . G4a90) (make-lexical-violation . G4b66) (make-irritants-condition . G4b0d) (make-implementation-restriction-violation . G4b52) (make-error . G4ad0) (make-assertion-violation . G4af8) (lexical-violation? . G4b68) (irritants-condition? . G4b11) (implementation-restriction-violation? . G4b54) (error? . G4ad2) (condition-who . G4b2c) (condition-predicate . G4fa3) (condition-message . G4a96) (condition-irritants . G4b13) (condition-accessor . G4fa2) (condition . G4fa1) (assertion-violation? . G4afa) (condition? . G4fa0) (&undefined . G4e44) (&syntax . G4e43) (&lexical . G4e42) (&implementation-restriction . G4e41) (&non-continuable . G4e40) (&who . G4e3f) (&irritants . G4e3e) (&assertion . G4e3d) (&violation . G4e3c) (&error . G4e3b) (&serious . G4e3a) (&warning . G4e39) (&message . G4e38) (&condition . G4e37) (define-condition-type . G4e36)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G5109 '(rnrs records inspection) '(6) '() '() '() '((record? . G504c) (record-type-uid . G504b) (record-type-sealed? . G504a) (record-type-parent . G5049) (record-type-opaque? . G5048) (record-type-name . G5047) (record-type-generative? . G5046) (record-type-field-names . G5045) (record-rtd . G5044) (record-field-mutable? . G5043)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G510a '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5053) (record-predicate . G5052) (record-mutator . G5051) (record-constructor . G5050) (record-accessor . G504f) (make-record-type-descriptor . G504e) (make-record-constructor-descriptor . G504d)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G510b '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e34) (parent-rtd . G4e33) (nongenerative . G4e32) (opaque . G4e31) (sealed . G4e30) (protocol . G4e2f) (parent . G4e2e) (immutable . G4e2d) (mutable . G4e2c) (fields . G4e2b) (record-constructor-descriptor . G4e08) (record-type-descriptor . G4e07)) '() values values '#f '#f '#t '#f) (G2bd7@G2a6a@install-library 'G510c '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G50ec) (&no-nans-rtd . G50eb) (&no-infinities-rcd . G50ea) (&no-infinities-rtd . G50e9) (&i/o-encoding-rcd . G50e8) (&i/o-encoding-rtd . G50e7) (&i/o-decoding-rcd . G50e6) (&i/o-decoding-rtd . G50e5) (&i/o-port-rcd . G50e4) (&i/o-port-rtd . G50e3) (&i/o-file-does-not-exist-rcd . G50e2) (&i/o-file-does-not-exist-rtd . G50e1) (&i/o-file-already-exists-rcd . G50e0) (&i/o-file-already-exists-rtd . G50df) (&i/o-file-is-read-only-rcd . G50de) (&i/o-file-is-read-only-rtd . G50dd) (&i/o-file-protection-rcd . G50dc) (&i/o-file-protection-rtd . G50db) (&i/o-filename-rcd . G50da) (&i/o-filename-rtd . G50d9) (&i/o-invalid-position-rcd . G50d8) (&i/o-invalid-position-rtd . G50d7) (&i/o-write-rcd . G50d6) (&i/o-write-rtd . G50d5) (&i/o-read-rcd . G50d4) (&i/o-read-rtd . G50d3) (&i/o-rcd . G50d2) (&i/o-rtd . G50d1) (&undefined-rcd . G50d0) (&undefined-rtd . G50cf) (&syntax-rcd . G50ce) (&syntax-rtd . G50cd) (&lexical-rcd . G50cc) (&lexical-rtd . G50cb) (&implementation-restriction-rcd . G50ca) (&implementation-restriction-rtd . G50c9) (&non-continuable-rcd . G50c8) (&non-continuable-rtd . G50c7) (&who-rcd . G50c6) (&who-rtd . G50c5) (&irritants-rcd . G50c4) (&irritants-rtd . G50c3) (&assertion-rcd . G50c2) (&assertion-rtd . G50c1) (&violation-rcd . G50c0) (&violation-rtd . G50bf) (&error-rcd . G50be) (&error-rtd . G50bd) (&serious-rcd . G50bc) (&serious-rtd . G50bb) (&warning-rcd . G50ba) (&warning-rtd . G50b9) (&message-rcd . G50b8) (&message-rtd . G50b7) (&condition-rcd . G50b6) (&condition-rtd . G50b5) (syntax-error . G3113) (syntax-dispatch . G3026) (pretty-print . G50b4) (eval-core . G50b3) (set-symbol-value! . G50b2) (symbol-value . G50b1) (gensym . G50b0) (void . G50af) (load . G4d5d) (interaction-environment . G3125) (char-ready? . G50ae) (regexp? . G50ad) (read-line . G50ac) (dotted-list? . G50ab) (circular-list? . G50aa) (proper-list? . G50a9) (circular-list . G50a8) (last . G50a7) (last-pair . G50a6) (not-pair? . G50a5) (split-at! . G50a4) (split-at . G50a3) (list= . G50a2) (list-copy . G50a1) (list-tabulate . G50a0) (make-list . G509f) (xcons . G509e) (tenth . G509d) (ninth . G509c) (eighth . G509b) (seventh . G509a) (sixth . G5099) (fifth . G5098) (drop-right! . G5097) (drop-right . G5096) (take-right . G5095) (take! . G5094) (drop . G5093) (take . G5092) (car+cdr . G5091) (third . G5090) (second . G508f) (first . G508e) (assoc-ref . G508d) (alist-cons . G508c) (print . G508b) (format . G508a) (standard-library-path . G5089) (current-directory . G5088) (write-to-file . G5087) (file->list . G5086) (file->string . G5085) (digit->integer . G5084) (call-with-string-input-port . G5083) (call-with-string-io . G5082) (string-split . G5081) (bytevector-for-each . G5080) (string->regexp . G507f) (rxmatch . G507e) (regexp-replace-all . G507d) (hashtable-for-each . G507c) (readdir . G507b) (get-environment-variables . G507a) (get-environment-variable . G5079) (get-command-line . G5078) (sys-display . G5077) (source-info . G5076) (make-compiler-instruction . G5075) (make-instruction . G5074) (set-source-info! . G5073) (fasl-write . G5072) (receive . G5071) (string-upcase . G5070) (string-titlecase . G506f) (string-normalize-nfkd . G506e) (string-normalize-nfkc . G506d) (string-normalize-nfd . G506c) (string-normalize-nfc . G506b) (string-foldcase . G506a) (string-downcase . G5069) (string-ci>? . G5068) (string-ci>=? . G5067) (string-ci=? . G5066) (string-ci<? . G5065) (string-ci<=? . G5064) (char-whitespace? . G5063) (char-upper-case? . G5062) (char-title-case? . G5061) (char-numeric? . G5060) (char-lower-case? . G505f) (char-general-category . G505e) (char-upcase . G505d) (char-titlecase . G505c) (char-foldcase . G505b) (char-downcase . G505a) (char-ci>? . G5059) (char-ci>=? . G5058) (char-ci=? . G5057) (char-ci<? . G5056) (char-ci<=? . G5055) (char-alphabetic? . G5054) (make-variable-transformer . G2e24) (identifier? . G311b) (generate-temporaries . G3105) (free-identifier=? . G3107) (syntax->datum . G311f) (datum->syntax . G311d) (bound-identifier=? . G3109) (record-type-descriptor? . G5053) (record-predicate . G5052) (record-mutator . G5051) (record-constructor . G5050) (record-accessor . G504f) (make-record-type-descriptor . G504e) (make-record-constructor-descriptor . G504d) (record? . G504c) (record-type-uid . G504b) (record-type-sealed? . G504a) (record-type-parent . G5049) (record-type-opaque? . G5048) (record-type-name . G5047) (record-type-generative? . G5046) (record-type-field-names . G5045) (record-rtd . G5044) (record-field-mutable? . G5043) (delete-file . G5042) (file-exists? . G5041) (vector-sort! . G5040) (vector-sort . G503f) (list-sort . G503e) (symbol-hash . G503d) (string-ci-hash . G503c) (string-hash . G503b) (equal-hash . G503a) (hashtable-equivalence-function . G5039) (make-hashtable . G5038) (hashtable-hash-function . G5037) (make-eqv-hashtable . G5036) (make-eq-hashtable . G5035) (hashtable? . G5034) (hashtable-update! . G5033) (hashtable-size . G5032) (hashtable-set! . G5031) (hashtable-ref . G5030) (hashtable-mutable? . G502f) (hashtable-keys . G502e) (hashtable-entries . G502d) (hashtable-delete! . G502c) (hashtable-copy . G502b) (hashtable-contains? . G502a) (hashtable-clear! . G5029) (call-with-output-file . G5028) (call-with-input-file . G5027) (write-char . G5026) (write . G5025) (with-output-to-file . G5024) (with-input-from-file . G5023) (read-char . G5022) (read . G5021) (peek-char . G5020) (open-output-file . G501f) (open-input-file . G501e) (newline . G501d) (display . G501c) (close-output-port . G501b) (close-input-port . G501a) (eof-object? . G5019) (eof-object . G5018) (current-error-port . G5017) (current-output-port . G5016) (current-input-port . G5015) (output-port? . G5014) (input-port? . G5013) (utf-8-codec . G5012) (utf-16-codec . G5011) (transcoder-error-handling-mode . G5010) (transcoder-eol-style . G500f) (transcoder-codec . G500e) (transcoded-port . G500d) (textual-port? . G500c) (string->bytevector . G500b) (standard-output-port . G500a) (standard-input-port . G5009) (standard-error-port . G5008) (set-port-position! . G5007) (put-u8 . G5006) (put-string . G5005) (put-datum . G5004) (put-char . G5003) (put-bytevector . G5002) (port? . G5001) (port-transcoder . G5000) (port-position . G4fff) (port-has-set-port-position!? . G4ffe) (port-has-port-position? . G4ffd) (port-eof? . G4ffc) (output-port-buffer-mode . G4ffb) (open-string-output-port . G4ffa) (open-string-input-port . G4ff9) (open-file-output-port . G4ff8) (open-file-input/output-port . G4ff7) (open-file-input-port . G4ff6) (open-bytevector-output-port . G4ff5) (open-bytevector-input-port . G4ff4) (native-transcoder . G4ff3) (native-eol-style . G4ff2) (make-transcoder . G4ff1) (latin-1-codec . G4ff0) (make-i/o-write-error . G4c34) (make-i/o-read-error . G4c20) (make-i/o-port-error . G4ccb) (make-i/o-invalid-position-error . G4c49) (make-i/o-filename-error . G4c62) (make-i/o-file-protection-error . G4c7a) (make-i/o-file-is-read-only-error . G4c8e) (make-i/o-file-does-not-exist-error . G4cb6) (make-i/o-file-already-exists-error . G4ca2) (make-i/o-error . G4c0c) (make-i/o-encoding-error . G4cf8) (make-i/o-decoding-error . G4ce3) (make-custom-textual-output-port . G4fef) (make-custom-textual-input/output-port . G4fee) (make-custom-textual-input-port . G4fed) (make-custom-binary-output-port . G4fec) (make-custom-binary-input/output-port . G4feb) (make-custom-binary-input-port . G4fea) (make-bytevector . G4fe9) (lookahead-u8 . G4fe8) (lookahead-char . G4fe7) (i/o-write-error? . G4c36) (i/o-read-error? . G4c22) (i/o-port-error? . G4ccf) (i/o-invalid-position-error? . G4c4d) (i/o-filename-error? . G4c66) (i/o-file-protection-error? . G4c7c) (i/o-file-is-read-only-error? . G4c90) (i/o-file-does-not-exist-error? . G4cb8) (i/o-file-already-exists-error? . G4ca4) (i/o-error? . G4c0e) (i/o-error-port . G4cd1) (i/o-error-filename . G4c68) (i/o-encoding-error? . G4cfc) (i/o-encoding-error-char . G4cfe) (i/o-decoding-error? . G4ce5) (get-u8 . G4fe6) (get-string-n! . G4fe5) (get-string-n . G4fe4) (get-string-all . G4fe3) (get-line . G4fe2) (get-datum . G4fe1) (get-char . G4fe0) (get-bytevector-some . G4fdf) (get-bytevector-n! . G4fde) (get-bytevector-n . G4fdd) (get-bytevector-all . G4fdc) (flush-output-port . G4fdb) (close-port . G4fda) (scheme-report-environment . G30f3) (quotient . G4fd9) (null-environment . G30f1) (remainder . G4fd8) (modulo . G4fd7) (inexact->exact . G4fd6) (force . G4fd5) (exact->inexact . G4fd4) (exit . G4fd3) (command-line . G4d57) (string-fill! . G4fd2) (string-set! . G4fd1) (set-cdr! . G4fd0) (set-car! . G4fcf) (remove . G4fce) (remv . G4fcd) (remp . G4fcc) (remq . G4fcb) (partition . G4fca) (memv . G4fc9) (memq . G4fc8) (memp . G4fc7) (member . G4fc6) (exists . G4fc5) (for-all . G4fc4) (fold-right . G4fc3) (fold-left . G4fc2) (find . G4fc1) (filter . G4fc0) (cons* . G4fbf) (assv . G4fbe) (assq . G4fbd) (assp . G4fbc) (assoc . G4fbb) (call-with-string-output-port . G4fba) (call-with-port . G4fb9) (call-with-bytevector-output-port . G4fb8) (bytevector->string . G4fb7) (buffer-mode? . G4fb6) (binary-port? . G4fb5) (with-exception-handler . G4fb4) (raise-continuable . G4fb3) (raise . G4fb2) (eval . G30f7) (environment . G30ef) (make-enumeration . G4fb1) (enum-set=? . G4fb0) (enum-set-universe . G4faf) (enum-set-union . G4fae) (enum-set-subset? . G4fad) (enum-set-projection . G4fac) (enum-set-member? . G4fab) (enum-set-intersection . G4faa) (enum-set-indexer . G4fa9) (enum-set-difference . G4fa8) (enum-set-constructor . G4fa7) (enum-set-complement . G4fa6) (enum-set->list . G4fa5) (who-condition? . G4b2a) (warning? . G4aaa) (violation? . G4ae6) (undefined-violation? . G4b9a) (syntax-violation? . G4b82) (syntax-violation-subform . G4b86) (syntax-violation-form . G4b84) (syntax-violation . G3119) (simple-conditions . G4fa4) (serious-condition? . G4abe) (non-continuable-violation? . G4b40) (message-condition? . G4a94) (make-who-condition . G4b26) (make-warning . G4aa8) (make-violation . G4ae4) (make-undefined-violation . G4b98) (make-syntax-violation . G4b7c) (make-serious-condition . G4abc) (make-non-continuable-violation . G4b3e) (make-message-condition . G4a90) (make-lexical-violation . G4b66) (make-irritants-condition . G4b0d) (make-implementation-restriction-violation . G4b52) (make-error . G4ad0) (make-assertion-violation . G4af8) (lexical-violation? . G4b68) (irritants-condition? . G4b11) (implementation-restriction-violation? . G4b54) (error? . G4ad2) (condition-who . G4b2c) (condition-predicate . G4fa3) (condition-message . G4a96) (condition-irritants . G4b13) (condition-accessor . G4fa2) (condition . G4fa1) (assertion-violation? . G4afa) (condition? . G4fa0) (utf32->string . G4f9f) (utf16->string . G4f9e) (utf8->string . G4f9d) (uint-list->bytevector . G4f9c) (u8-list->bytevector . G4f9b) (string->utf8 . G4f9a) (string->utf32 . G4f99) (string->utf16 . G4f98) (sint-list->bytevector . G4f97) (native-endianness . G4f96) (bytevector? . G4f95) (bytevector=? . G4f94) (bytevector-uint-set! . G4f93) (bytevector-uint-ref . G4f92) (bytevector-u8-set! . G4f91) (bytevector-u8-ref . G4f90) (bytevector-u64-set! . G4f8f) (bytevector-u64-ref . G4f8e) (bytevector-u64-native-set! . G4f8d) (bytevector-u64-native-ref . G4f8c) (bytevector-u32-set! . G4f8b) (bytevector-u32-ref . G4f8a) (bytevector-u32-native-set! . G4f89) (bytevector-u32-native-ref . G4f88) (bytevector-u16-set! . G4f87) (bytevector-u16-ref . G4f86) (bytevector-u16-native-set! . G4f85) (bytevector-u16-native-ref . G4f84) (bytevector-sint-set! . G4f83) (bytevector-sint-ref . G4f82) (bytevector-s8-set! . G4f81) (bytevector-s8-ref . G4f80) (bytevector-s64-set! . G4f7f) (bytevector-s64-ref . G4f7e) (bytevector-s64-native-set! . G4f7d) (bytevector-s64-native-ref . G4f7c) (bytevector-s32-set! . G4f7b) (bytevector-s32-ref . G4f7a) (bytevector-s32-native-set! . G4f79) (bytevector-s32-native-ref . G4f78) (bytevector-s16-set! . G4f77) (bytevector-s16-ref . G4f76) (bytevector-s16-native-set! . G4f75) (bytevector-s16-native-ref . G4f74) (bytevector-length . G4f73) (bytevector-ieee-single-ref . G4f72) (bytevector-ieee-single-native-set! . G4f71) (bytevector-ieee-single-native-ref . G4f70) (bytevector-ieee-double-ref . G4f6f) (bytevector-ieee-double-native-set! . G4f6e) (bytevector-ieee-double-native-ref . G4f6d) (bytevector-fill! . G4f6c) (bytevector-copy! . G4f6b) (bytevector-copy . G4f6a) (bytevector->uint-list . G4f69) (bytevector->u8-list . G4f68) (bytevector->sint-list . G4f67) (no-nans-violation? . G4f66) (no-infinities-violation? . G4f65) (make-no-nans-violation . G4f64) (make-no-infinities-violation . G4f63) (real->flonum . G4f62) (flzero? . G4f61) (fltruncate . G4f60) (fltan . G4f5f) (flsqrt . G4f5e) (flsin . G4f5d) (flround . G4f5c) (flpositive? . G4f5b) (flonum? . G4f5a) (flodd? . G4f59) (flnumerator . G4f58) (flnegative? . G4f57) (flnan? . G4f56) (flmod0 . G4f55) (flmod . G4f54) (flmin . G4f53) (flmax . G4f52) (fllog . G4f51) (flinteger? . G4f50) (flinfinite? . G4f4f) (flfloor . G4f4e) (flfinite? . G4f4d) (flexpt . G4f4c) (flexp . G4f4b) (fleven? . G4f4a) (fldiv0-and-mod0 . G4f49) (fldiv0 . G4f48) (fldiv-and-mod . G4f47) (fldiv . G4f46) (fldenominator . G4f45) (flcos . G4f44) (flceiling . G4f43) (flatan . G4f42) (flasin . G4f41) (flacos . G4f40) (flabs . G4f3f) (fl>? . G4f3e) (fl>=? . G4f3d) (fl=? . G4f3c) (fl<? . G4f3b) (fl<=? . G4f3a) (fl/ . G4f39) (fl- . G4f38) (fl+ . G4f37) (fl* . G4f36) (fixnum->flonum . G4f35) (fxzero? . G4f34) (fxxor . G4f33) (fxrotate-bit-field . G4f32) (fxreverse-bit-field . G4f31) (fxpositive? . G4f30) (fxodd? . G4f2f) (fxnot . G4f2e) (fxnegative? . G4f2d) (fxmod0 . G4f2c) (fxmod . G4f2b) (fxmin . G4f2a) (fxmax . G4f29) (fxlength . G4f28) (fxior . G4f27) (fxif . G4f26) (fxfirst-bit-set . G4f25) (fxeven? . G4f24) (fxdiv0-and-mod0 . G4f23) (fxdiv0 . G4f22) (fxdiv-and-mod . G4f21) (fxdiv . G4f20) (fxcopy-bit-field . G4f1f) (fxcopy-bit . G4f1e) (fxbit-set? . G4f1d) (fxbit-field . G4f1c) (fxbit-count . G4f1b) (fxarithmetic-shift-right . G4f1a) (fxarithmetic-shift-left . G4f19) (fxarithmetic-shift . G4f18) (fxand . G4f17) (fx>? . G4f16) (fx>=? . G4f15) (fx=? . G4f14) (fx<? . G4f13) (fx<=? . G4f12) (fx-/carry . G4f11) (fx- . G4f10) (fx+/carry . G4f0f) (fx+ . G4f0e) (fx*/carry . G4f0d) (fx* . G4f0c) (greatest-fixnum . G4f0b) (least-fixnum . G4f0a) (fixnum-width . G4f09) (fixnum? . G4f08) (bitwise-rotate-bit-field . G4f07) (bitwise-reverse-bit-field . G4f06) (bitwise-length . G4f05) (bitwise-if . G4f04) (bitwise-first-bit-set . G4f03) (bitwise-copy-bit-field . G4f02) (bitwise-copy-bit . G4f01) (bitwise-bit-set? . G4f00) (bitwise-bit-field . G4eff) (bitwise-bit-count . G4efe) (bitwise-xor . G4efd) (bitwise-ior . G4efc) (bitwise-and . G4efb) (bitwise-not . G4efa) (bitwise-arithmetic-shift-right . G4ef9) (bitwise-arithmetic-shift-left . G4ef8) (bitwise-arithmetic-shift . G4ef7) (zero? . G4ef6) (vector? . G4ef5) (vector-set! . G4ef4) (vector-ref . G4ef3) (vector-map . G4ef2) (vector-length . G4ef1) (vector-for-each . G4ef0) (vector-fill! . G4eef) (vector->list . G4eee) (vector . G4eed) (values . G4eec) (truncate . G4eeb) (tan . G4eea) (symbol? . G4ee9) (symbol=? . G4ee8) (symbol->string . G4ee7) (substring . G4ee6) (string? . G4ee5) (string>? . G4ee4) (string>=? . G4ee3) (string=? . G4ee2) (string<? . G4ee1) (string<=? . G4ee0) (string-ref . G4edf) (string-length . G4ede) (string-for-each . G4edd) (string-copy . G4edc) (string-append . G4edb) (string->symbol . G4eda) (string->number . G4ed9) (string->list . G4ed8) (string . G4ed7) (sqrt . G4ed6) (sin . G4ed5) (round . G4ed4) (reverse . G4ed3) (real? . G4ed2) (real-valued? . G4ed1) (real-part . G4ed0) (rationalize . G4ecf) (rational? . G4ece) (rational-valued? . G4ecd) (procedure? . G4ecc) (positive? . G4ecb) (pair? . G4eca) (odd? . G4ec9) (numerator . G4ec8) (number? . G4ec7) (number->string . G4ec6) (null? . G4ec5) (not . G4ec4) (negative? . G4ec3) (nan? . G4ec2) (min . G4ec1) (max . G4ec0) (map . G4ebf) (make-vector . G4ebe) (make-string . G4ebd) (make-rectangular . G4ebc) (make-polar . G4ebb) (magnitude . G4eba) (log . G4eb9) (list? . G4eb8) (list-tail . G4eb7) (list-ref . G4eb6) (list->vector . G4eb5) (list->string . G4eb4) (list . G4eb3) (length . G4eb2) (lcm . G4eb1) (integer? . G4eb0) (integer-valued? . G4eaf) (integer->char . G4eae) (infinite? . G4ead) (inexact? . G4eac) (inexact . G4eab) (imag-part . G4eaa) (gcd . G4ea9) (for-each . G4ea8) (floor . G4ea7) (finite? . G4ea6) (expt . G4ea5) (exp . G4ea4) (exact? . G4ea3) (exact-integer-sqrt . G4ea2) (exact . G4ea1) (even? . G4ea0) (error . G4e9f) (eqv? . G4e9e) (equal? . G4e9d) (eq? . G4e9c) (dynamic-wind . G4e9b) (div0-and-mod0 . G4e9a) (mod0 . G4e99) (div0 . G4e98) (div-and-mod . G4e97) (mod . G4e96) (div . G4e95) (denominator . G4e94) (cos . G4e93) (cons . G4e92) (complex? . G4e91) (char? . G4e90) (char>? . G4e8f) (char>=? . G4e8e) (char=? . G4e8d) (char<? . G4e8c) (char<=? . G4e8b) (char->integer . G4e8a) (ceiling . G4e89) (call-with-values . G4e88) (call/cc . G4e87) (call-with-current-continuation . G4e86) (cddddr . G4e85) (cdddar . G4e84) (cddadr . G4e83) (cddaar . G4e82) (cdaddr . G4e81) (cdadar . G4e80) (cdaadr . G4e7f) (cdaaar . G4e7e) (cadddr . G4e7d) (caddar . G4e7c) (cadadr . G4e7b) (cadaar . G4e7a) (caaddr . G4e79) (caadar . G4e78) (caaadr . G4e77) (caaaar . G4e76) (cdddr . G4e75) (cddar . G4e74) (cdadr . G4e73) (cdaar . G4e72) (caddr . G4e71) (cadar . G4e70) (caadr . G4e6f) (caaar . G4e6e) (cddr . G4e6d) (cdar . G4e6c) (cadr . G4e6b) (caar . G4e6a) (cdr . G4e69) (car . G4e68) (boolean? . G4e67) (boolean=? . G4e66) (atan . G4e65) (assertion-violation . G4e64) (asin . G4e63) (apply . G4e62) (append . G4e61) (angle . G4e60) (acos . G4e5f) (abs . G4e5e) (/ . G4e5d) (* . G4e5c) (- . G4e5b) (+ . G4e5a) (>= . G4e59) (> . G4e58) (= . G4e57) (<= . G4e56) (< . G4e55) (library . G4e54) (export . G4e53) (&no-nans . G4e52) (&no-infinities . G4e51) (&i/o-encoding . G4e50) (&i/o-decoding . G4e4f) (&i/o-port . G4e4e) (&i/o-file-does-not-exist . G4e4d) (&i/o-file-already-exists . G4e4c) (&i/o-file-is-read-only . G4e4b) (&i/o-file-protection . G4e4a) (&i/o-filename . G4e49) (&i/o-invalid-position . G4e48) (&i/o-write . G4e47) (&i/o-read . G4e46) (&i/o . G4e45) (&undefined . G4e44) (&syntax . G4e43) (&lexical . G4e42) (&implementation-restriction . G4e41) (&non-continuable . G4e40) (&who . G4e3f) (&irritants . G4e3e) (&assertion . G4e3d) (&violation . G4e3c) (&error . G4e3b) (&serious . G4e3a) (&warning . G4e39) (&message . G4e38) (&condition . G4e37) (define-condition-type . G4e36) (define-enumeration . G4e35) (define-record-type . G4e34) (parent-rtd . G4e33) (nongenerative . G4e32) (opaque . G4e31) (sealed . G4e30) (protocol . G4e2f) (parent . G4e2e) (immutable . G4e2d) (mutable . G4e2c) (fields . G4e2b) (error-handling-mode . G4e2a) (file-options . G4e29) (buffer-mode . G4e28) (eol-style . G4e27) (guard . G4e26) (trace-define . G4e25) (trace-lambda . G4e24) (unsyntax-splicing . G4e23) (unsyntax . G4e22) (unquote-splicing . G4e21) (unquote . G4e20) (_ . G4e1f) (else . G4e1e) (=> . G4e1d) (... . G4e1c) (assert . G4e1b) (endianness . G4e1a) (delay . G4e19) (time . G4e18) (or . G4e17) (and . G4e16) (do . G4e15) (cond . G4e14) (let* . G4e13) (let . G4e12) (let*-values . G4e11) (let-values . G4e10) (identifier-syntax . G4e0f) (with-syntax . G4e0e) (quasisyntax . G4e0d) (quasiquote . G4e0c) (syntax-rules . G4e0b) (include . G4e0a) (define-struct . G4e09) (record-constructor-descriptor . G4e08) (record-type-descriptor . G4e07) (case . G4e06) (parameterize . G4e05) (unless . G4e04) (when . G4e03) (if . G4e02) (letrec* . G4e01) (letrec . G4e00) (type-descriptor . G4dff) (case-lambda . G4dfe) (lambda . G4dfd) (syntax . G4dfc) (syntax-case . G4dfb) (quote . G4dfa) (foreign-call . G4df9) (letrec-syntax . G4df8) (let-syntax . G4df7) (set! . G4df6) (import . G4df5) (begin . G4df4) (module . G4df3) (define-syntax . G4df2) (define . G4df1)) '((G50ec core-prim . &no-nans-rcd) (G50eb core-prim . &no-nans-rtd) (G50ea core-prim . &no-infinities-rcd) (G50e9 core-prim . &no-infinities-rtd) (G50e8 core-prim . &i/o-encoding-rcd) (G50e7 core-prim . &i/o-encoding-rtd) (G50e6 core-prim . &i/o-decoding-rcd) (G50e5 core-prim . &i/o-decoding-rtd) (G50e4 core-prim . &i/o-port-rcd) (G50e3 core-prim . &i/o-port-rtd) (G50e2 core-prim . &i/o-file-does-not-exist-rcd) (G50e1 core-prim . &i/o-file-does-not-exist-rtd) (G50e0 core-prim . &i/o-file-already-exists-rcd) (G50df core-prim . &i/o-file-already-exists-rtd) (G50de core-prim . &i/o-file-is-read-only-rcd) (G50dd core-prim . &i/o-file-is-read-only-rtd) (G50dc core-prim . &i/o-file-protection-rcd) (G50db core-prim . &i/o-file-protection-rtd) (G50da core-prim . &i/o-filename-rcd) (G50d9 core-prim . &i/o-filename-rtd) (G50d8 core-prim . &i/o-invalid-position-rcd) (G50d7 core-prim . &i/o-invalid-position-rtd) (G50d6 core-prim . &i/o-write-rcd) (G50d5 core-prim . &i/o-write-rtd) (G50d4 core-prim . &i/o-read-rcd) (G50d3 core-prim . &i/o-read-rtd) (G50d2 core-prim . &i/o-rcd) (G50d1 core-prim . &i/o-rtd) (G50d0 core-prim . &undefined-rcd) (G50cf core-prim . &undefined-rtd) (G50ce core-prim . &syntax-rcd) (G50cd core-prim . &syntax-rtd) (G50cc core-prim . &lexical-rcd) (G50cb core-prim . &lexical-rtd) (G50ca core-prim . &implementation-restriction-rcd) (G50c9 core-prim . &implementation-restriction-rtd) (G50c8 core-prim . &non-continuable-rcd) (G50c7 core-prim . &non-continuable-rtd) (G50c6 core-prim . &who-rcd) (G50c5 core-prim . &who-rtd) (G50c4 core-prim . &irritants-rcd) (G50c3 core-prim . &irritants-rtd) (G50c2 core-prim . &assertion-rcd) (G50c1 core-prim . &assertion-rtd) (G50c0 core-prim . &violation-rcd) (G50bf core-prim . &violation-rtd) (G50be core-prim . &error-rcd) (G50bd core-prim . &error-rtd) (G50bc core-prim . &serious-rcd) (G50bb core-prim . &serious-rtd) (G50ba core-prim . &warning-rcd) (G50b9 core-prim . &warning-rtd) (G50b8 core-prim . &message-rcd) (G50b7 core-prim . &message-rtd) (G50b6 core-prim . &condition-rcd) (G50b5 core-prim . &condition-rtd) (G3113 core-prim . syntax-error) (G3026 core-prim . syntax-dispatch) (G50b4 core-prim . pretty-print) (G50b3 core-prim . eval-core) (G50b2 core-prim . set-symbol-value!) (G50b1 core-prim . symbol-value) (G50b0 core-prim . gensym) (G50af core-prim . void) (G4d5d core-prim . load) (G3125 core-prim . interaction-environment) (G50ae core-prim . char-ready?) (G50ad core-prim . regexp?) (G50ac core-prim . read-line) (G50ab core-prim . dotted-list?) (G50aa core-prim . circular-list?) (G50a9 core-prim . proper-list?) (G50a8 core-prim . circular-list) (G50a7 core-prim . last) (G50a6 core-prim . last-pair) (G50a5 core-prim . not-pair?) (G50a4 core-prim . split-at!) (G50a3 core-prim . split-at) (G50a2 core-prim . list=) (G50a1 core-prim . list-copy) (G50a0 core-prim . list-tabulate) (G509f core-prim . make-list) (G509e core-prim . xcons) (G509d core-prim . tenth) (G509c core-prim . ninth) (G509b core-prim . eighth) (G509a core-prim . seventh) (G5099 core-prim . sixth) (G5098 core-prim . fifth) (G5097 core-prim . drop-right!) (G5096 core-prim . drop-right) (G5095 core-prim . take-right) (G5094 core-prim . take!) (G5093 core-prim . drop) (G5092 core-prim . take) (G5091 core-prim . car+cdr) (G5090 core-prim . third) (G508f core-prim . second) (G508e core-prim . first) (G508d core-prim . assoc-ref) (G508c core-prim . alist-cons) (G508b core-prim . print) (G508a core-prim . format) (G5089 core-prim . standard-library-path) (G5088 core-prim . current-directory) (G5087 core-prim . write-to-file) (G5086 core-prim . file->list) (G5085 core-prim . file->string) (G5084 core-prim . digit->integer) (G5083 core-prim . call-with-string-input-port) (G5082 core-prim . call-with-string-io) (G5081 core-prim . string-split) (G5080 core-prim . bytevector-for-each) (G507f core-prim . string->regexp) (G507e core-prim . rxmatch) (G507d core-prim . regexp-replace-all) (G507c core-prim . hashtable-for-each) (G507b core-prim . readdir) (G507a core-prim . get-environment-variables) (G5079 core-prim . get-environment-variable) (G5078 core-prim . get-command-line) (G5077 core-prim . sys-display) (G5076 core-prim . source-info) (G5075 core-prim . make-compiler-instruction) (G5074 core-prim . make-instruction) (G5073 core-prim . set-source-info!) (G5072 core-prim . fasl-write) (G5071 core-prim . receive) (G5070 core-prim . string-upcase) (G506f core-prim . string-titlecase) (G506e core-prim . string-normalize-nfkd) (G506d core-prim . string-normalize-nfkc) (G506c core-prim . string-normalize-nfd) (G506b core-prim . string-normalize-nfc) (G506a core-prim . string-foldcase) (G5069 core-prim . string-downcase) (G5068 core-prim . string-ci>?) (G5067 core-prim . string-ci>=?) (G5066 core-prim . string-ci=?) (G5065 core-prim . string-ci<?) (G5064 core-prim . string-ci<=?) (G5063 core-prim . char-whitespace?) (G5062 core-prim . char-upper-case?) (G5061 core-prim . char-title-case?) (G5060 core-prim . char-numeric?) (G505f core-prim . char-lower-case?) (G505e core-prim . char-general-category) (G505d core-prim . char-upcase) (G505c core-prim . char-titlecase) (G505b core-prim . char-foldcase) (G505a core-prim . char-downcase) (G5059 core-prim . char-ci>?) (G5058 core-prim . char-ci>=?) (G5057 core-prim . char-ci=?) (G5056 core-prim . char-ci<?) (G5055 core-prim . char-ci<=?) (G5054 core-prim . char-alphabetic?) (G2e24 core-prim . make-variable-transformer) (G311b core-prim . identifier?) (G3105 core-prim . generate-temporaries) (G3107 core-prim . free-identifier=?) (G311f core-prim . syntax->datum) (G311d core-prim . datum->syntax) (G3109 core-prim . bound-identifier=?) (G5053 core-prim . record-type-descriptor?) (G5052 core-prim . record-predicate) (G5051 core-prim . record-mutator) (G5050 core-prim . record-constructor) (G504f core-prim . record-accessor) (G504e core-prim . make-record-type-descriptor) (G504d core-prim . make-record-constructor-descriptor) (G504c core-prim . record?) (G504b core-prim . record-type-uid) (G504a core-prim . record-type-sealed?) (G5049 core-prim . record-type-parent) (G5048 core-prim . record-type-opaque?) (G5047 core-prim . record-type-name) (G5046 core-prim . record-type-generative?) (G5045 core-prim . record-type-field-names) (G5044 core-prim . record-rtd) (G5043 core-prim . record-field-mutable?) (G5042 core-prim . delete-file) (G5041 core-prim . file-exists?) (G5040 core-prim . vector-sort!) (G503f core-prim . vector-sort) (G503e core-prim . list-sort) (G503d core-prim . symbol-hash) (G503c core-prim . string-ci-hash) (G503b core-prim . string-hash) (G503a core-prim . equal-hash) (G5039 core-prim . hashtable-equivalence-function) (G5038 core-prim . make-hashtable) (G5037 core-prim . hashtable-hash-function) (G5036 core-prim . make-eqv-hashtable) (G5035 core-prim . make-eq-hashtable) (G5034 core-prim . hashtable?) (G5033 core-prim . hashtable-update!) (G5032 core-prim . hashtable-size) (G5031 core-prim . hashtable-set!) (G5030 core-prim . hashtable-ref) (G502f core-prim . hashtable-mutable?) (G502e core-prim . hashtable-keys) (G502d core-prim . hashtable-entries) (G502c core-prim . hashtable-delete!) (G502b core-prim . hashtable-copy) (G502a core-prim . hashtable-contains?) (G5029 core-prim . hashtable-clear!) (G5028 core-prim . call-with-output-file) (G5027 core-prim . call-with-input-file) (G5026 core-prim . write-char) (G5025 core-prim . write) (G5024 core-prim . with-output-to-file) (G5023 core-prim . with-input-from-file) (G5022 core-prim . read-char) (G5021 core-prim . read) (G5020 core-prim . peek-char) (G501f core-prim . open-output-file) (G501e core-prim . open-input-file) (G501d core-prim . newline) (G501c core-prim . display) (G501b core-prim . close-output-port) (G501a core-prim . close-input-port) (G5019 core-prim . eof-object?) (G5018 core-prim . eof-object) (G5017 core-prim . current-error-port) (G5016 core-prim . current-output-port) (G5015 core-prim . current-input-port) (G5014 core-prim . output-port?) (G5013 core-prim . input-port?) (G5012 core-prim . utf-8-codec) (G5011 core-prim . utf-16-codec) (G5010 core-prim . transcoder-error-handling-mode) (G500f core-prim . transcoder-eol-style) (G500e core-prim . transcoder-codec) (G500d core-prim . transcoded-port) (G500c core-prim . textual-port?) (G500b core-prim . string->bytevector) (G500a core-prim . standard-output-port) (G5009 core-prim . standard-input-port) (G5008 core-prim . standard-error-port) (G5007 core-prim . set-port-position!) (G5006 core-prim . put-u8) (G5005 core-prim . put-string) (G5004 core-prim . put-datum) (G5003 core-prim . put-char) (G5002 core-prim . put-bytevector) (G5001 core-prim . port?) (G5000 core-prim . port-transcoder) (G4fff core-prim . port-position) (G4ffe core-prim . port-has-set-port-position!?) (G4ffd core-prim . port-has-port-position?) (G4ffc core-prim . port-eof?) (G4ffb core-prim . output-port-buffer-mode) (G4ffa core-prim . open-string-output-port) (G4ff9 core-prim . open-string-input-port) (G4ff8 core-prim . open-file-output-port) (G4ff7 core-prim . open-file-input/output-port) (G4ff6 core-prim . open-file-input-port) (G4ff5 core-prim . open-bytevector-output-port) (G4ff4 core-prim . open-bytevector-input-port) (G4ff3 core-prim . native-transcoder) (G4ff2 core-prim . native-eol-style) (G4ff1 core-prim . make-transcoder) (G4ff0 core-prim . latin-1-codec) (G4c34 core-prim . make-i/o-write-error) (G4c20 core-prim . make-i/o-read-error) (G4ccb core-prim . make-i/o-port-error) (G4c49 core-prim . make-i/o-invalid-position-error) (G4c62 core-prim . make-i/o-filename-error) (G4c7a core-prim . make-i/o-file-protection-error) (G4c8e core-prim . make-i/o-file-is-read-only-error) (G4cb6 core-prim . make-i/o-file-does-not-exist-error) (G4ca2 core-prim . make-i/o-file-already-exists-error) (G4c0c core-prim . make-i/o-error) (G4cf8 core-prim . make-i/o-encoding-error) (G4ce3 core-prim . make-i/o-decoding-error) (G4fef core-prim . make-custom-textual-output-port) (G4fee core-prim . make-custom-textual-input/output-port) (G4fed core-prim . make-custom-textual-input-port) (G4fec core-prim . make-custom-binary-output-port) (G4feb core-prim . make-custom-binary-input/output-port) (G4fea core-prim . make-custom-binary-input-port) (G4fe9 core-prim . make-bytevector) (G4fe8 core-prim . lookahead-u8) (G4fe7 core-prim . lookahead-char) (G4c36 core-prim . i/o-write-error?) (G4c22 core-prim . i/o-read-error?) (G4ccf core-prim . i/o-port-error?) (G4c4d core-prim . i/o-invalid-position-error?) (G4c66 core-prim . i/o-filename-error?) (G4c7c core-prim . i/o-file-protection-error?) (G4c90 core-prim . i/o-file-is-read-only-error?) (G4cb8 core-prim . i/o-file-does-not-exist-error?) (G4ca4 core-prim . i/o-file-already-exists-error?) (G4c0e core-prim . i/o-error?) (G4cd1 core-prim . i/o-error-port) (G4c68 core-prim . i/o-error-filename) (G4cfc core-prim . i/o-encoding-error?) (G4cfe core-prim . i/o-encoding-error-char) (G4ce5 core-prim . i/o-decoding-error?) (G4fe6 core-prim . get-u8) (G4fe5 core-prim . get-string-n!) (G4fe4 core-prim . get-string-n) (G4fe3 core-prim . get-string-all) (G4fe2 core-prim . get-line) (G4fe1 core-prim . get-datum) (G4fe0 core-prim . get-char) (G4fdf core-prim . get-bytevector-some) (G4fde core-prim . get-bytevector-n!) (G4fdd core-prim . get-bytevector-n) (G4fdc core-prim . get-bytevector-all) (G4fdb core-prim . flush-output-port) (G4fda core-prim . close-port) (G30f3 core-prim . scheme-report-environment) (G4fd9 core-prim . quotient) (G30f1 core-prim . null-environment) (G4fd8 core-prim . remainder) (G4fd7 core-prim . modulo) (G4fd6 core-prim . inexact->exact) (G4fd5 core-prim . force) (G4fd4 core-prim . exact->inexact) (G4fd3 core-prim . exit) (G4d57 core-prim . command-line) (G4fd2 core-prim . string-fill!) (G4fd1 core-prim . string-set!) (G4fd0 core-prim . set-cdr!) (G4fcf core-prim . set-car!) (G4fce core-prim . remove) (G4fcd core-prim . remv) (G4fcc core-prim . remp) (G4fcb core-prim . remq) (G4fca core-prim . partition) (G4fc9 core-prim . memv) (G4fc8 core-prim . memq) (G4fc7 core-prim . memp) (G4fc6 core-prim . member) (G4fc5 core-prim . exists) (G4fc4 core-prim . for-all) (G4fc3 core-prim . fold-right) (G4fc2 core-prim . fold-left) (G4fc1 core-prim . find) (G4fc0 core-prim . filter) (G4fbf core-prim . cons*) (G4fbe core-prim . assv) (G4fbd core-prim . assq) (G4fbc core-prim . assp) (G4fbb core-prim . assoc) (G4fba core-prim . call-with-string-output-port) (G4fb9 core-prim . call-with-port) (G4fb8 core-prim . call-with-bytevector-output-port) (G4fb7 core-prim . bytevector->string) (G4fb6 core-prim . buffer-mode?) (G4fb5 core-prim . binary-port?) (G4fb4 core-prim . with-exception-handler) (G4fb3 core-prim . raise-continuable) (G4fb2 core-prim . raise) (G30f7 core-prim . eval) (G30ef core-prim . environment) (G4fb1 core-prim . make-enumeration) (G4fb0 core-prim . enum-set=?) (G4faf core-prim . enum-set-universe) (G4fae core-prim . enum-set-union) (G4fad core-prim . enum-set-subset?) (G4fac core-prim . enum-set-projection) (G4fab core-prim . enum-set-member?) (G4faa core-prim . enum-set-intersection) (G4fa9 core-prim . enum-set-indexer) (G4fa8 core-prim . enum-set-difference) (G4fa7 core-prim . enum-set-constructor) (G4fa6 core-prim . enum-set-complement) (G4fa5 core-prim . enum-set->list) (G4b2a core-prim . who-condition?) (G4aaa core-prim . warning?) (G4ae6 core-prim . violation?) (G4b9a core-prim . undefined-violation?) (G4b82 core-prim . syntax-violation?) (G4b86 core-prim . syntax-violation-subform) (G4b84 core-prim . syntax-violation-form) (G3119 core-prim . syntax-violation) (G4fa4 core-prim . simple-conditions) (G4abe core-prim . serious-condition?) (G4b40 core-prim . non-continuable-violation?) (G4a94 core-prim . message-condition?) (G4b26 core-prim . make-who-condition) (G4aa8 core-prim . make-warning) (G4ae4 core-prim . make-violation) (G4b98 core-prim . make-undefined-violation) (G4b7c core-prim . make-syntax-violation) (G4abc core-prim . make-serious-condition) (G4b3e core-prim . make-non-continuable-violation) (G4a90 core-prim . make-message-condition) (G4b66 core-prim . make-lexical-violation) (G4b0d core-prim . make-irritants-condition) (G4b52 core-prim . make-implementation-restriction-violation) (G4ad0 core-prim . make-error) (G4af8 core-prim . make-assertion-violation) (G4b68 core-prim . lexical-violation?) (G4b11 core-prim . irritants-condition?) (G4b54 core-prim . implementation-restriction-violation?) (G4ad2 core-prim . error?) (G4b2c core-prim . condition-who) (G4fa3 core-prim . condition-predicate) (G4a96 core-prim . condition-message) (G4b13 core-prim . condition-irritants) (G4fa2 core-prim . condition-accessor) (G4fa1 core-prim . condition) (G4afa core-prim . assertion-violation?) (G4fa0 core-prim . condition?) (G4f9f core-prim . utf32->string) (G4f9e core-prim . utf16->string) (G4f9d core-prim . utf8->string) (G4f9c core-prim . uint-list->bytevector) (G4f9b core-prim . u8-list->bytevector) (G4f9a core-prim . string->utf8) (G4f99 core-prim . string->utf32) (G4f98 core-prim . string->utf16) (G4f97 core-prim . sint-list->bytevector) (G4f96 core-prim . native-endianness) (G4f95 core-prim . bytevector?) (G4f94 core-prim . bytevector=?) (G4f93 core-prim . bytevector-uint-set!) (G4f92 core-prim . bytevector-uint-ref) (G4f91 core-prim . bytevector-u8-set!) (G4f90 core-prim . bytevector-u8-ref) (G4f8f core-prim . bytevector-u64-set!) (G4f8e core-prim . bytevector-u64-ref) (G4f8d core-prim . bytevector-u64-native-set!) (G4f8c core-prim . bytevector-u64-native-ref) (G4f8b core-prim . bytevector-u32-set!) (G4f8a core-prim . bytevector-u32-ref) (G4f89 core-prim . bytevector-u32-native-set!) (G4f88 core-prim . bytevector-u32-native-ref) (G4f87 core-prim . bytevector-u16-set!) (G4f86 core-prim . bytevector-u16-ref) (G4f85 core-prim . bytevector-u16-native-set!) (G4f84 core-prim . bytevector-u16-native-ref) (G4f83 core-prim . bytevector-sint-set!) (G4f82 core-prim . bytevector-sint-ref) (G4f81 core-prim . bytevector-s8-set!) (G4f80 core-prim . bytevector-s8-ref) (G4f7f core-prim . bytevector-s64-set!) (G4f7e core-prim . bytevector-s64-ref) (G4f7d core-prim . bytevector-s64-native-set!) (G4f7c core-prim . bytevector-s64-native-ref) (G4f7b core-prim . bytevector-s32-set!) (G4f7a core-prim . bytevector-s32-ref) (G4f79 core-prim . bytevector-s32-native-set!) (G4f78 core-prim . bytevector-s32-native-ref) (G4f77 core-prim . bytevector-s16-set!) (G4f76 core-prim . bytevector-s16-ref) (G4f75 core-prim . bytevector-s16-native-set!) (G4f74 core-prim . bytevector-s16-native-ref) (G4f73 core-prim . bytevector-length) (G4f72 core-prim . bytevector-ieee-single-ref) (G4f71 core-prim . bytevector-ieee-single-native-set!) (G4f70 core-prim . bytevector-ieee-single-native-ref) (G4f6f core-prim . bytevector-ieee-double-ref) (G4f6e core-prim . bytevector-ieee-double-native-set!) (G4f6d core-prim . bytevector-ieee-double-native-ref) (G4f6c core-prim . bytevector-fill!) (G4f6b core-prim . bytevector-copy!) (G4f6a core-prim . bytevector-copy) (G4f69 core-prim . bytevector->uint-list) (G4f68 core-prim . bytevector->u8-list) (G4f67 core-prim . bytevector->sint-list) (G4f66 core-prim . no-nans-violation?) (G4f65 core-prim . no-infinities-violation?) (G4f64 core-prim . make-no-nans-violation) (G4f63 core-prim . make-no-infinities-violation) (G4f62 core-prim . real->flonum) (G4f61 core-prim . flzero?) (G4f60 core-prim . fltruncate) (G4f5f core-prim . fltan) (G4f5e core-prim . flsqrt) (G4f5d core-prim . flsin) (G4f5c core-prim . flround) (G4f5b core-prim . flpositive?) (G4f5a core-prim . flonum?) (G4f59 core-prim . flodd?) (G4f58 core-prim . flnumerator) (G4f57 core-prim . flnegative?) (G4f56 core-prim . flnan?) (G4f55 core-prim . flmod0) (G4f54 core-prim . flmod) (G4f53 core-prim . flmin) (G4f52 core-prim . flmax) (G4f51 core-prim . fllog) (G4f50 core-prim . flinteger?) (G4f4f core-prim . flinfinite?) (G4f4e core-prim . flfloor) (G4f4d core-prim . flfinite?) (G4f4c core-prim . flexpt) (G4f4b core-prim . flexp) (G4f4a core-prim . fleven?) (G4f49 core-prim . fldiv0-and-mod0) (G4f48 core-prim . fldiv0) (G4f47 core-prim . fldiv-and-mod) (G4f46 core-prim . fldiv) (G4f45 core-prim . fldenominator) (G4f44 core-prim . flcos) (G4f43 core-prim . flceiling) (G4f42 core-prim . flatan) (G4f41 core-prim . flasin) (G4f40 core-prim . flacos) (G4f3f core-prim . flabs) (G4f3e core-prim . fl>?) (G4f3d core-prim . fl>=?) (G4f3c core-prim . fl=?) (G4f3b core-prim . fl<?) (G4f3a core-prim . fl<=?) (G4f39 core-prim . fl/) (G4f38 core-prim . fl-) (G4f37 core-prim . fl+) (G4f36 core-prim . fl*) (G4f35 core-prim . fixnum->flonum) (G4f34 core-prim . fxzero?) (G4f33 core-prim . fxxor) (G4f32 core-prim . fxrotate-bit-field) (G4f31 core-prim . fxreverse-bit-field) (G4f30 core-prim . fxpositive?) (G4f2f core-prim . fxodd?) (G4f2e core-prim . fxnot) (G4f2d core-prim . fxnegative?) (G4f2c core-prim . fxmod0) (G4f2b core-prim . fxmod) (G4f2a core-prim . fxmin) (G4f29 core-prim . fxmax) (G4f28 core-prim . fxlength) (G4f27 core-prim . fxior) (G4f26 core-prim . fxif) (G4f25 core-prim . fxfirst-bit-set) (G4f24 core-prim . fxeven?) (G4f23 core-prim . fxdiv0-and-mod0) (G4f22 core-prim . fxdiv0) (G4f21 core-prim . fxdiv-and-mod) (G4f20 core-prim . fxdiv) (G4f1f core-prim . fxcopy-bit-field) (G4f1e core-prim . fxcopy-bit) (G4f1d core-prim . fxbit-set?) (G4f1c core-prim . fxbit-field) (G4f1b core-prim . fxbit-count) (G4f1a core-prim . fxarithmetic-shift-right) (G4f19 core-prim . fxarithmetic-shift-left) (G4f18 core-prim . fxarithmetic-shift) (G4f17 core-prim . fxand) (G4f16 core-prim . fx>?) (G4f15 core-prim . fx>=?) (G4f14 core-prim . fx=?) (G4f13 core-prim . fx<?) (G4f12 core-prim . fx<=?) (G4f11 core-prim . fx-/carry) (G4f10 core-prim . fx-) (G4f0f core-prim . fx+/carry) (G4f0e core-prim . fx+) (G4f0d core-prim . fx*/carry) (G4f0c core-prim . fx*) (G4f0b core-prim . greatest-fixnum) (G4f0a core-prim . least-fixnum) (G4f09 core-prim . fixnum-width) (G4f08 core-prim . fixnum?) (G4f07 core-prim . bitwise-rotate-bit-field) (G4f06 core-prim . bitwise-reverse-bit-field) (G4f05 core-prim . bitwise-length) (G4f04 core-prim . bitwise-if) (G4f03 core-prim . bitwise-first-bit-set) (G4f02 core-prim . bitwise-copy-bit-field) (G4f01 core-prim . bitwise-copy-bit) (G4f00 core-prim . bitwise-bit-set?) (G4eff core-prim . bitwise-bit-field) (G4efe core-prim . bitwise-bit-count) (G4efd core-prim . bitwise-xor) (G4efc core-prim . bitwise-ior) (G4efb core-prim . bitwise-and) (G4efa core-prim . bitwise-not) (G4ef9 core-prim . bitwise-arithmetic-shift-right) (G4ef8 core-prim . bitwise-arithmetic-shift-left) (G4ef7 core-prim . bitwise-arithmetic-shift) (G4ef6 core-prim . zero?) (G4ef5 core-prim . vector?) (G4ef4 core-prim . vector-set!) (G4ef3 core-prim . vector-ref) (G4ef2 core-prim . vector-map) (G4ef1 core-prim . vector-length) (G4ef0 core-prim . vector-for-each) (G4eef core-prim . vector-fill!) (G4eee core-prim . vector->list) (G4eed core-prim . vector) (G4eec core-prim . values) (G4eeb core-prim . truncate) (G4eea core-prim . tan) (G4ee9 core-prim . symbol?) (G4ee8 core-prim . symbol=?) (G4ee7 core-prim . symbol->string) (G4ee6 core-prim . substring) (G4ee5 core-prim . string?) (G4ee4 core-prim . string>?) (G4ee3 core-prim . string>=?) (G4ee2 core-prim . string=?) (G4ee1 core-prim . string<?) (G4ee0 core-prim . string<=?) (G4edf core-prim . string-ref) (G4ede core-prim . string-length) (G4edd core-prim . string-for-each) (G4edc core-prim . string-copy) (G4edb core-prim . string-append) (G4eda core-prim . string->symbol) (G4ed9 core-prim . string->number) (G4ed8 core-prim . string->list) (G4ed7 core-prim . string) (G4ed6 core-prim . sqrt) (G4ed5 core-prim . sin) (G4ed4 core-prim . round) (G4ed3 core-prim . reverse) (G4ed2 core-prim . real?) (G4ed1 core-prim . real-valued?) (G4ed0 core-prim . real-part) (G4ecf core-prim . rationalize) (G4ece core-prim . rational?) (G4ecd core-prim . rational-valued?) (G4ecc core-prim . procedure?) (G4ecb core-prim . positive?) (G4eca core-prim . pair?) (G4ec9 core-prim . odd?) (G4ec8 core-prim . numerator) (G4ec7 core-prim . number?) (G4ec6 core-prim . number->string) (G4ec5 core-prim . null?) (G4ec4 core-prim . not) (G4ec3 core-prim . negative?) (G4ec2 core-prim . nan?) (G4ec1 core-prim . min) (G4ec0 core-prim . max) (G4ebf core-prim . map) (G4ebe core-prim . make-vector) (G4ebd core-prim . make-string) (G4ebc core-prim . make-rectangular) (G4ebb core-prim . make-polar) (G4eba core-prim . magnitude) (G4eb9 core-prim . log) (G4eb8 core-prim . list?) (G4eb7 core-prim . list-tail) (G4eb6 core-prim . list-ref) (G4eb5 core-prim . list->vector) (G4eb4 core-prim . list->string) (G4eb3 core-prim . list) (G4eb2 core-prim . length) (G4eb1 core-prim . lcm) (G4eb0 core-prim . integer?) (G4eaf core-prim . integer-valued?) (G4eae core-prim . integer->char) (G4ead core-prim . infinite?) (G4eac core-prim . inexact?) (G4eab core-prim . inexact) (G4eaa core-prim . imag-part) (G4ea9 core-prim . gcd) (G4ea8 core-prim . for-each) (G4ea7 core-prim . floor) (G4ea6 core-prim . finite?) (G4ea5 core-prim . expt) (G4ea4 core-prim . exp) (G4ea3 core-prim . exact?) (G4ea2 core-prim . exact-integer-sqrt) (G4ea1 core-prim . exact) (G4ea0 core-prim . even?) (G4e9f core-prim . error) (G4e9e core-prim . eqv?) (G4e9d core-prim . equal?) (G4e9c core-prim . eq?) (G4e9b core-prim . dynamic-wind) (G4e9a core-prim . div0-and-mod0) (G4e99 core-prim . mod0) (G4e98 core-prim . div0) (G4e97 core-prim . div-and-mod) (G4e96 core-prim . mod) (G4e95 core-prim . div) (G4e94 core-prim . denominator) (G4e93 core-prim . cos) (G4e92 core-prim . cons) (G4e91 core-prim . complex?) (G4e90 core-prim . char?) (G4e8f core-prim . char>?) (G4e8e core-prim . char>=?) (G4e8d core-prim . char=?) (G4e8c core-prim . char<?) (G4e8b core-prim . char<=?) (G4e8a core-prim . char->integer) (G4e89 core-prim . ceiling) (G4e88 core-prim . call-with-values) (G4e87 core-prim . call/cc) (G4e86 core-prim . call-with-current-continuation) (G4e85 core-prim . cddddr) (G4e84 core-prim . cdddar) (G4e83 core-prim . cddadr) (G4e82 core-prim . cddaar) (G4e81 core-prim . cdaddr) (G4e80 core-prim . cdadar) (G4e7f core-prim . cdaadr) (G4e7e core-prim . cdaaar) (G4e7d core-prim . cadddr) (G4e7c core-prim . caddar) (G4e7b core-prim . cadadr) (G4e7a core-prim . cadaar) (G4e79 core-prim . caaddr) (G4e78 core-prim . caadar) (G4e77 core-prim . caaadr) (G4e76 core-prim . caaaar) (G4e75 core-prim . cdddr) (G4e74 core-prim . cddar) (G4e73 core-prim . cdadr) (G4e72 core-prim . cdaar) (G4e71 core-prim . caddr) (G4e70 core-prim . cadar) (G4e6f core-prim . caadr) (G4e6e core-prim . caaar) (G4e6d core-prim . cddr) (G4e6c core-prim . cdar) (G4e6b core-prim . cadr) (G4e6a core-prim . caar) (G4e69 core-prim . cdr) (G4e68 core-prim . car) (G4e67 core-prim . boolean?) (G4e66 core-prim . boolean=?) (G4e65 core-prim . atan) (G4e64 core-prim . assertion-violation) (G4e63 core-prim . asin) (G4e62 core-prim . apply) (G4e61 core-prim . append) (G4e60 core-prim . angle) (G4e5f core-prim . acos) (G4e5e core-prim . abs) (G4e5d core-prim . /) (G4e5c core-prim . *) (G4e5b core-prim . -) (G4e5a core-prim . +) (G4e59 core-prim . >=) (G4e58 core-prim . >) (G4e57 core-prim . =) (G4e56 core-prim . <=) (G4e55 core-prim . <) (G4e54 core-prim . library) (G4e53 core-prim . export) (G4e52 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e51 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e50 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e4f $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e4e $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e4d $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e4c $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e4b $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e4a $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e49 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e48 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e47 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e46 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e45 $core-rtd &i/o-rtd &i/o-rcd) (G4e44 $core-rtd &undefined-rtd &undefined-rcd) (G4e43 $core-rtd &syntax-rtd &syntax-rcd) (G4e42 $core-rtd &lexical-rtd &lexical-rcd) (G4e41 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e40 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e3f $core-rtd &who-rtd &who-rcd) (G4e3e $core-rtd &irritants-rtd &irritants-rcd) (G4e3d $core-rtd &assertion-rtd &assertion-rcd) (G4e3c $core-rtd &violation-rtd &violation-rcd) (G4e3b $core-rtd &error-rtd &error-rcd) (G4e3a $core-rtd &serious-rtd &serious-rcd) (G4e39 $core-rtd &warning-rtd &warning-rcd) (G4e38 $core-rtd &message-rtd &message-rcd) (G4e37 $core-rtd &condition-rtd &condition-rcd) (G4e36 macro . define-condition-type) (G4e35 macro . define-enumeration) (G4e34 macro . define-record-type) (G4e33 macro . parent-rtd) (G4e32 macro . nongenerative) (G4e31 macro . opaque) (G4e30 macro . sealed) (G4e2f macro . protocol) (G4e2e macro . parent) (G4e2d macro . immutable) (G4e2c macro . mutable) (G4e2b macro . fields) (G4e2a macro . error-handling-mode) (G4e29 macro . file-options) (G4e28 macro . buffer-mode) (G4e27 macro . eol-style) (G4e26 macro . guard) (G4e25 macro . trace-define) (G4e24 macro . trace-lambda) (G4e23 macro . unsyntax-splicing) (G4e22 macro . unsyntax) (G4e21 macro . unquote-splicing) (G4e20 macro . unquote) (G4e1f macro . _) (G4e1e macro . else) (G4e1d macro . =>) (G4e1c macro . ...) (G4e1b macro . assert) (G4e1a macro . endianness) (G4e19 macro . delay) (G4e18 macro . time) (G4e17 macro . or) (G4e16 macro . and) (G4e15 macro . do) (G4e14 macro . cond) (G4e13 macro . let*) (G4e12 macro . let) (G4e11 macro . let*-values) (G4e10 macro . let-values) (G4e0f macro . identifier-syntax) (G4e0e macro . with-syntax) (G4e0d macro . quasisyntax) (G4e0c macro . quasiquote) (G4e0b macro . syntax-rules) (G4e0a macro . include) (G4e09 macro . define-struct) (G4e08 core-macro . record-constructor-descriptor) (G4e07 core-macro . record-type-descriptor) (G4e06 macro . case) (G4e05 macro . parameterize) (G4e04 macro . unless) (G4e03 macro . when) (G4e02 core-macro . if) (G4e01 core-macro . letrec*) (G4e00 core-macro . letrec) (G4dff core-macro . type-descriptor) (G4dfe core-macro . case-lambda) (G4dfd core-macro . lambda) (G4dfc core-macro . syntax) (G4dfb core-macro . syntax-case) (G4dfa core-macro . quote) (G4df9 core-macro . foreign-call) (G4df8 letrec-syntax) (G4df7 let-syntax) (G4df6 set!) (G4df5 import) (G4df4 begin) (G4df3 module) (G4df2 define-syntax) (G4df1 define)) values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G510d '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50b4) (eval-core . G50b3) (set-symbol-value! . G50b2) (symbol-value . G50b1) (gensym . G50b0) (void . G50af)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G510e '(mosh) '() '() '() '() '((symbol-value . G50b1) (standard-library-path . G5089) (get-command-line . G5078) (sys-display . G5077) (source-info . G5076) (make-compiler-instruction . G5075) (make-instruction . G5074) (set-source-info! . G5073) (fasl-write . G5072) (include . G4e0a)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G510f '(mosh backend) '() '() '() '() '((receive . G5071)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G5110 '(mosh file) '() '() '() '() '((read-line . G50ac) (current-directory . G5088) (write-to-file . G5087) (file->list . G5086) (file->string . G5085)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G5111 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5080)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G5112 '(mosh number) '() '() '() '() '((digit->integer . G5084)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G5113 '(mosh string) '() '() '() '() '((print . G508b) (format . G508a) (call-with-string-input-port . G5083) (call-with-string-io . G5082) (string-split . G5081) (string->regexp . G507f)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G5114 '(mosh list) '() '() '() '() '((assoc-ref . G508d)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G5115 '(mosh regexp) '() '() '() '() '((rxmatch . G507e) (regexp-replace-all . G507d)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G5116 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G507c)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G5117 '(system) '() '() '() '() '((readdir . G507b) (get-environment-variables . G507a) (get-environment-variable . G5079)) '() values values '#f '#f '#f '#f) (G2bd7@G2a6a@install-library 'G5118 '(srfi :1) '() '() '() '() '((dotted-list? . G50ab) (circular-list? . G50aa) (proper-list? . G50a9) (circular-list . G50a8) (last . G50a7) (last-pair . G50a6) (not-pair? . G50a5) (split-at! . G50a4) (split-at . G50a3) (list= . G50a2) (list-copy . G50a1) (list-tabulate . G50a0) (make-list . G509f) (xcons . G509e) (tenth . G509d) (ninth . G509c) (eighth . G509b) (seventh . G509a) (sixth . G5099) (fifth . G5098) (drop-right! . G5097) (drop-right . G5096) (take-right . G5095) (take! . G5094) (drop . G5093) (take . G5092) (car+cdr . G5091) (third . G5090) (second . G508f) (first . G508e) (alist-cons . G508c)) '() values values '#f '#f '#f '#f))
((lambda (G4d52@for-each-with-index G4d54@repl G4d56@trace-printer G4d58@command-line G4d5a@local-library-path G4d5c@load/args G4d5e@load G4d60@ironscheme-build G4d62@eval-top-level G4d64@compile-system-libraries G4d66@compile G4d68@compile->closure G4d6a@load-r6rs-top-level G4d6c@write-record) (begin (set! G4d52@for-each-with-index (lambda (G4d81@proc G4d82@lst) (letrec ((G4d85@loop (lambda (G4d87@i G4d88@lst) (if (null? G4d88@lst) (if '#f '#f (void)) (begin (G4d81@proc G4d87@i (car G4d88@lst)) (G4d85@loop (+ G4d87@i '1) (cdr G4d88@lst))))))) (G4d85@loop '1 G4d82@lst)))) (set! G4d54@repl (lambda G4d8b@x ((lambda (G4d8e@rec) (begin (set! G4d8e@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4d90@G4d8f) (with-exception-handler (lambda (G4d92@e) (G4d90@G4d8f (if '#t (G4d52@for-each-with-index (lambda (G4d94@i G4d95@x) ((lambda (G4d98@rtd) (begin (format '#t '"   ~d. ~a" G4d94@i (record-type-name G4d98@rtd)) ((lambda (G4d9a@v) ((lambda (G4d9c@t) (if (memv G4d9c@t '(0)) (newline) (if (memv G4d9c@t '(1)) (begin (display '": ") (write ((record-accessor G4d98@rtd '0) G4d95@x)) (newline)) (begin (display '":\n") ((letrec ((G4d9e@f (lambda (G4da0@i) (if (not (= G4da0@i (vector-length G4d9a@v))) (begin (display '"       ") (display (vector-ref G4d9a@v G4da0@i)) (display '": ") (write ((record-accessor G4d98@rtd G4da0@i) G4d95@x)) (newline) (G4d9e@f (+ G4da0@i '1))) (void))))) G4d9e@f) '0))))) (vector-length G4d9a@v))) (record-type-field-names G4d98@rtd)))) (record-rtd G4d95@x))) (simple-conditions G4d92@e)) (raise G4d92@e)))) (lambda () (begin '#f ((lambda (G4da2@line) (if (eof-object? G4da2@line) (exit) (write (G4d62@eval-top-level (call-with-port (open-string-input-port G4da2@line) read))))) (get-line (current-input-port)))))))) (newline) (G4d8e@rec)))) (G4d8e@rec))) '#f))) (set! G4d56@trace-printer (G2936@G2869@make-parameter write)) (set! G4d58@command-line (G2936@G2869@make-parameter (get-command-line))) (set! G4d5a@local-library-path (lambda (G4da4@filename) (cons '"." (G2bc7@G2a4a@library-path)))) (set! G4d5c@load/args (lambda (G4da6@filename . G4da8@args) (begin (apply G4d6a@load-r6rs-top-level G4da6@filename 'load G4da8@args) (void)))) (set! G4d5e@load (lambda (G4daa@filename) (begin (apply G4d6a@load-r6rs-top-level G4daa@filename 'load (G4d58@command-line)) (void)))) (set! G4d60@ironscheme-build (lambda () (G4d5e@load '"ironscheme-buildscript.ss"))) (set! G4d62@eval-top-level (lambda (G4dac@x) (G4a4d@G30f8@eval G4dac@x (G4a64@G3126@interaction-environment)))) (set! G4d64@compile-system-libraries (lambda () (G4d62@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d66@compile (lambda (G4dae@filename) (G4d6a@load-r6rs-top-level G4dae@filename 'compile))) (set! G4d68@compile->closure (lambda (G4db0@filename) (G4d6a@load-r6rs-top-level G4db0@filename 'closure))) (set! G4d6a@load-r6rs-top-level (lambda (G4db2@filename G4db3@how . G4db6@args) ((lambda (G4dba@G4db8@library-path G4dbb@G4db9@library-path) ((lambda (G4dbe@swap) (dynamic-wind G4dbe@swap (lambda () ((lambda (G4dc0@x*) ((lambda (G4dc2@t) (if (memv G4dc2@t '(closure)) (G4a63@G3124@pre-compile-r6rs-top-level G4dc0@x*) (if (memv G4dc2@t '(load)) ((lambda (G4dc6@G4dc4@command-line G4dc7@G4dc5@command-line) ((lambda (G4dca@swap) (dynamic-wind G4dca@swap (lambda () ((G4a62@G3122@compile-r6rs-top-level G4dc0@x*))) G4dca@swap)) (lambda () ((lambda (G4dcc@t) (begin (G4dc6@G4dc4@command-line G4dc7@G4dc5@command-line) (set! G4dc7@G4dc5@command-line G4dcc@t))) (G4dc6@G4dc4@command-line))))) G4d58@command-line (cons G4db2@filename (car G4db6@args))) (if (memv G4dc2@t '(compile)) (begin (G4a62@G3122@compile-r6rs-top-level G4dc0@x*) (G2bcb@G2a52@serialize-all G2931@G285f@serialize-library G299b@G2944@compile-core-expr)) (if '#f '#f (void)))))) G4db3@how)) (with-input-from-file G4db2@filename (lambda () ((letrec ((G4dce@f (lambda () ((lambda (G4dd0@x) (if (eof-object? G4dd0@x) '() (cons G4dd0@x (G4dce@f)))) (G292c@G2855@read-annotated))))) G4dce@f)))))) G4dbe@swap)) (lambda () ((lambda (G4dd2@t) (begin (G4dba@G4db8@library-path G4dbb@G4db9@library-path) (set! G4dbb@G4db9@library-path G4dd2@t))) (G4dba@G4db8@library-path))))) G2bc7@G2a4a@library-path (G4d5a@local-library-path G4db2@filename)))) (set! G4d6c@write-record (lambda (G4dd4@record G4dd5@port) ((lambda (G4dd8@rtd) (begin (format G4dd5@port '"    ~a" (record-type-name G4dd8@rtd)) ((lambda (G4dda@v) ((lambda (G4ddc@t) (if (memv G4ddc@t '(0)) (newline) (if (memv G4ddc@t '(1)) (begin (display '": " G4dd5@port) (write ((record-accessor G4dd8@rtd '0) G4dd4@record) G4dd5@port) (newline G4dd5@port)) (begin (display '":\n") ((letrec ((G4dde@f (lambda (G4de0@i) (if (not (= G4de0@i (vector-length G4dda@v))) (begin (display '"       " G4dd5@port) (display (vector-ref G4dda@v G4de0@i) G4dd5@port) (display '": " G4dd5@port) (write ((record-accessor G4dd8@rtd G4de0@i) G4dd4@record) G4dd5@port) (newline G4dd5@port) (G4dde@f (+ G4de0@i '1))) (void))))) G4dde@f) '0))))) (vector-length G4dda@v))) (record-type-field-names G4dd8@rtd)))) (record-rtd G4dd4@record)))) (begin (set! G4def@G4d6c@write-record G4d6c@write-record) (set! G4dee@G4d6a@load-r6rs-top-level G4d6a@load-r6rs-top-level) (set! G4ded@G4d68@compile->closure G4d68@compile->closure) (set! G4dec@G4d66@compile G4d66@compile) (set! G4deb@G4d64@compile-system-libraries G4d64@compile-system-libraries) (set! G4dea@G4d62@eval-top-level G4d62@eval-top-level) (set! G4de9@G4d60@ironscheme-build G4d60@ironscheme-build) (set! G4de8@G4d5e@load G4d5e@load) (set! G4de7@G4d5c@load/args G4d5c@load/args) (set! G4de6@G4d5a@local-library-path G4d5a@local-library-path) (set! G4de5@G4d58@command-line G4d58@command-line) (set! G4de4@G4d56@trace-printer G4d56@trace-printer) (set! G4de3@G4d54@repl G4d54@repl) (set! G4de2@G4d52@for-each-with-index G4d52@for-each-with-index) (G2bcc@G2a54@current-precompiled-library-loader G2932@G2861@load-serialized-library) (set-symbol-value! 'load G4d5e@load) (set-symbol-value! 'eval-r6rs G4d62@eval-top-level) (set-symbol-value! 'int-env-syms G4a44@G30e6@interaction-environment-symbols) (set-symbol-value! 'expanded2core G299a@G2942@expanded->core) (set-symbol-value! 'trace-printer G4d56@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2bc7@G2a4a@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4d6d@args G4d6e@port) (with-exception-handler (lambda (G4d71@c) (begin (display '" Condition components:\n" G4d6e@port) (G4d52@for-each-with-index (lambda (G4d73@i G4d74@x) ((lambda (G4d77@rtd) (begin (format G4d6e@port '"   ~d. ~a" G4d73@i (record-type-name G4d77@rtd)) ((lambda (G4d79@v) ((lambda (G4d7b@t) (if (memv G4d7b@t '(0)) (newline) (if (memv G4d7b@t '(1)) (begin (display '": ") (write ((record-accessor G4d77@rtd '0) G4d74@x)) (newline)) (begin (display '":\n") ((letrec ((G4d7d@f (lambda (G4d7f@i) (if (not (= G4d7f@i (vector-length G4d79@v))) (begin (display '"       ") (display (vector-ref G4d79@v G4d7f@i)) (display '": ") (write ((record-accessor G4d77@rtd G4d7f@i) G4d74@x)) (newline) (G4d7d@f (+ G4d7f@i '1))) (void))))) G4d7d@f) '0))))) (vector-length G4d79@v))) (record-type-field-names G4d77@rtd)))) (record-rtd G4d74@x))) (simple-conditions G4d71@c)))) (lambda () (if (null? G4d6d@args) (G4d54@repl) (G4d6a@load-r6rs-top-level (car G4d6d@args) 'load (cdr G4d6d@args)))))) (G4d58@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
