;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2808@read-annotated G280a@annotation-stripped G280c@annotation? G280e@annotation-source G2810@annotation-expression G2812@scm->fasl G2814@fasl-save G2816@fasl-load G2818@serialize-library G281a@load-serialized-library G281c@make-record-printer G281e@compile-core G2820@read-library-source-file G2822@make-parameter G288e@file-options-spec) (begin (set! G2808@read-annotated read) (set! G280a@annotation-stripped (lambda (G288f@x) (G2810@annotation-expression G288f@x))) (set! G280c@annotation? (lambda (G2891@x) (source-info G2891@x))) (set! G280e@annotation-source (lambda (G2893@x) (source-info G2893@x))) (set! G2810@annotation-expression (lambda (G2895@x) (if (pair? G2895@x) (cons (car G2895@x) (cdr G2895@x)) (display '"line:46\n")))) (set! G2812@scm->fasl (lambda (G2897@filename) (string-append G2897@filename '".fasl"))) (set! G2814@fasl-save (lambda (G2899@filename G289a@obj) (call-with-port (open-file-output-port G2899@filename) (lambda (G289d@port) ((symbol-value 'fasl-write!) G289a@obj G289d@port))))) (set! G2816@fasl-load (lambda (G289f@filename) (call-with-port (open-file-input-port G289f@filename) (symbol-value 'fasl-read!)))) (set! G2818@serialize-library (lambda (G28a1@filename G28a2@obj) (begin (format '#t '"serialize-library ~a\n..." G28a1@filename) ((lambda (G28a5@fasl-file) (begin (if (file-exists? G28a5@fasl-file) (delete-file G28a5@fasl-file) (void)) ((call/cc (lambda (G28a9@G28a7) (lambda () (with-exception-handler (lambda (G28ab@c) ((call/cc (lambda (G28ad@G28a8) (G28a9@G28a7 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28a1@filename) (if (file-exists? G28a5@fasl-file) (delete-file G28a5@fasl-file) (void)) '#f) (G28ad@G28a8 (lambda () (raise-continuable G28ab@c)))))))))) (lambda () (begin (G2814@fasl-save G28a5@fasl-file G28a2@obj) (display '"OK\n")))))))))) (G2812@scm->fasl G28a1@filename))))) (set! G281a@load-serialized-library (lambda (G28af@filename G28b0@obj) ((lambda (G28b3@fasl-file) (if (and (file-exists? G28b3@fasl-file) ((symbol-value 'file-newer?) G28b3@fasl-file G28af@filename)) ((lambda (G28b5@expanded2core) ((lambda (G28b7@code) ((lambda (G28b9@pivot) ((lambda (G28bb@visit) ((lambda (G28bd@visit-proc) ((lambda () (begin (set-car! G28b9@pivot G28bd@visit-proc) ((lambda (G28bf@pivot) ((lambda (G28c1@invoke) ((lambda () (begin (set-car! G28bf@pivot (lambda () (eval-core G28c1@invoke))) (apply G28b0@obj G28b7@code))))) (G28b5@expanded2core (car G28bf@pivot)))) (cdr G28b9@pivot)) '#t)))) (lambda () (eval-core G28bb@visit)))) (G28b5@expanded2core (car G28b9@pivot)))) (cddddr (cddddr G28b7@code)))) (G2816@fasl-load G28b3@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2812@scm->fasl G28af@filename)))) (set! G281c@make-record-printer (lambda (G28c3@name G28c4@printer) (lambda G28c7@x (begin (display '"record printer") (for-each display G28c7@x))))) (set! G281e@compile-core (lambda G28c9@x (apply error 'comile-core '"not implementated" G28c9@x))) (set! G2820@read-library-source-file (lambda (G28cb@file-name) (with-input-from-file G28cb@file-name G2808@read-annotated))) (set! G2822@make-parameter (lambda G28db ((lambda (G28dc) (if (= G28dc '1) (apply (lambda (G28cd@x) (G2822@make-parameter G28cd@x (lambda (G28cf@x) G28cf@x))) G28db) (if (= G28dc '2) (apply (lambda (G28d1@x G28d2@fender) ((lambda (G28d5@x) (lambda G28d9 ((lambda (G28da) (if (= G28da '0) (apply (lambda () G28d5@x) G28d9) (if (= G28da '1) (apply (lambda (G28d7@v) (set! G28d5@x (G28d2@fender G28d7@v))) G28d9) (error 'apply '"invalid arg count")))) (length G28d9)))) (G28d2@fender G28d1@x))) G28db) (error 'apply '"invalid arg count")))) (length G28db)))) (set! G288e@file-options-spec (lambda (G28dd@x) G28dd@x)) (begin (set! G28ed@G288e@file-options-spec G288e@file-options-spec) (set! G28ec@G2822@make-parameter G2822@make-parameter) (set! G28eb@G2820@read-library-source-file G2820@read-library-source-file) (set! G28ea@G281e@compile-core G281e@compile-core) (set! G28e9@G281c@make-record-printer G281c@make-record-printer) (set! G28e8@G281a@load-serialized-library G281a@load-serialized-library) (set! G28e7@G2818@serialize-library G2818@serialize-library) (set! G28e6@G2816@fasl-load G2816@fasl-load) (set! G28e5@G2814@fasl-save G2814@fasl-save) (set! G28e4@G2812@scm->fasl G2812@scm->fasl) (set! G28e3@G2810@annotation-expression G2810@annotation-expression) (set! G28e2@G280e@annotation-source G280e@annotation-source) (set! G28e1@G280c@annotation? G280c@annotation?) (set! G28e0@G280a@annotation-stripped G280a@annotation-stripped) (set! G28df@G2808@read-annotated G2808@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28f2@current-primitive-locations G28f4@mutable? G28f6@rewriter G28f8@expanded->core G28fa@compile-core-expr G28fc@pretty-print G28fe@compile-core-expr-to-port) (begin (set! G28f2@current-primitive-locations (G28ec@G2822@make-parameter (lambda (G28ff@x) '#f) (lambda (G2901@p) G2901@p))) (set! G28f4@mutable? (lambda (G2903@x) (or (pair? G2903@x) (vector? G2903@x) (hashtable? G2903@x)))) (set! G28f6@rewriter (lambda (G2905@quote-hack?) ((lambda (G2908@f) (begin (set! G2908@f (lambda (G2909@x) (if (pair? G2909@x) ((lambda (G290b@t) (if (memv G290b@t '(quote)) (if (and G2905@quote-hack? (G28f4@mutable? (cadr G2909@x))) ((lambda (G290d@g) (begin (set-symbol-value! G290d@g (cadr G2909@x)) G290d@g)) (gensym)) G2909@x) (if (memv G290b@t '(case-lambda)) (cons 'case-lambda (map (lambda (G290f@x) (cons (car G290f@x) (map G2908@f (cdr G290f@x)))) (cdr G2909@x))) (if (memv G290b@t '(lambda)) (cons* 'lambda (cadr G2909@x) (map G2908@f (cddr G2909@x))) (if (memv G290b@t '(letrec)) ((lambda (G2911@bindings G2912@body*) ((lambda (G2915@lhs* G2916@rhs*) (cons* 'letrec (map list G2915@lhs* (map G2908@f G2916@rhs*)) (map G2908@f G2912@body*))) (map car G2911@bindings) (map cadr G2911@bindings))) (cadr G2909@x) (cddr G2909@x)) (if (memv G290b@t '(letrec*)) ((lambda (G2919@bindings G291a@body*) ((lambda (G291d@lhs* G291e@rhs*) (cons* 'letrec* (map list G291d@lhs* (map G2908@f G291e@rhs*)) (map G2908@f G291a@body*))) (map car G2919@bindings) (map cadr G2919@bindings))) (cadr G2909@x) (cddr G2909@x)) (if (memv G290b@t '(library-letrec*)) ((lambda (G2921@name G2922@x) ((lambda (G2925@bindings G2926@body*) ((lambda (G2929@lhs* G292a@lhs** G292b@rhs*) (cons* 'library-letrec* G2921@name (map list G2929@lhs* G292a@lhs** (map G2908@f G292b@rhs*)) (map G2908@f G2926@body*))) (map car G2925@bindings) (map cadr G2925@bindings) (map caddr G2925@bindings))) (cadr G2922@x) (cddr G2922@x))) (cadr G2909@x) (cdr G2909@x)) (if (memv G290b@t '(begin)) (cons 'begin (map G2908@f (cdr G2909@x))) (if (memv G290b@t '(set!)) (list 'set! (cadr G2909@x) (G2908@f (caddr G2909@x))) (if (memv G290b@t '(primitive)) ((lambda (G292f@op) ((lambda (G2931@t) (if G2931@t ((lambda (G2933@loc) G2933@loc) G2931@t) G292f@op)) ((G28f2@current-primitive-locations) G292f@op))) (cadr G2909@x)) (if (memv G290b@t '(define)) G2909@x (if (list? G2909@x) (map G2908@f G2909@x) (error 'rewrite '"invalid form ~s ~s" G2909@x (list? G2909@x)))))))))))))) (car G2909@x)) G2909@x))) G2908@f)) '#f))) (set! G28f8@expanded->core (lambda (G2935@x) ((G28f6@rewriter '#t) G2935@x))) (set! G28fa@compile-core-expr (lambda (G2937@x) ((G28f6@rewriter '#f) G2937@x))) (set! G28fc@pretty-print write) (set! G28fe@compile-core-expr-to-port (lambda (G2939@x G293a@p) (G28fc@pretty-print ((G28f6@rewriter '#f) G2939@x) G293a@p))) (begin (set! G2943@G28fe@compile-core-expr-to-port G28fe@compile-core-expr-to-port) (set! G2942@G28fc@pretty-print G28fc@pretty-print) (set! G2941@G28fa@compile-core-expr G28fa@compile-core-expr) (set! G2940@G28f8@expanded->core G28f8@expanded->core) (set! G293f@G28f6@rewriter G28f6@rewriter) (set! G293e@G28f4@mutable? G28f4@mutable?) (set! G293d@G28f2@current-primitive-locations G28f2@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2999@make-collection G299b@current-library-collection G29a1@G299c G29a3@G299e G29a5@G299d G29a8@library? G29aa@make-library G29ac@library-id G29ae@library-name G29b0@library-version G29b2@library-imp* G29b4@library-vis* G29b6@library-inv* G29b8@library-subst G29ba@library-env G29bc@library-visit-state G29be@library-invoke-state G29c0@library-visit-code G29c2@library-invoke-code G29c4@library-visible? G29c6@library-source-file-name G29c8@set-library-id! G29ca@set-library-name! G29cc@set-library-version! G29ce@set-library-imp*! G29d0@set-library-vis*! G29d2@set-library-inv*! G29d4@set-library-subst! G29d6@set-library-env! G29d8@set-library-visit-state! G29da@set-library-invoke-state! G29dc@set-library-visit-code! G29de@set-library-invoke-code! G29e0@set-library-visible?! G29e2@set-library-source-file-name! G29e4@rp G29e6@find-dependencies G29e8@find-library-by G29ea@library-path G29ec@library-extensions G29ee@library-name->file-name G29f0@file-locator G29f2@serialize-all G29f4@current-precompiled-library-loader G29f6@try-load-from-file G29f8@library-loader G29fa@current-library-expander G29fc@external-pending-libraries G29fe@find-external-library G2a00@find-library-by-name G2a02@library-exists? G2a04@find-library-by-spec/die G2a06@label->binding-table G2a08@install-library-record G2a0a@install-library G2a0c@imported-label->binding G2a0e@invoke-library G2a10@visit-library G2a12@invoke-library-by-spec G2a14@installed-libraries G2a16@library-spec) (begin (set! G2999@make-collection (lambda () ((lambda (G2a17@set) ((lambda (G2a1a@set-cons) (begin (set! G2a1a@set-cons (lambda (G2a1f@x G2a20@ls) (if (memq G2a1f@x G2a20@ls) G2a20@ls (cons G2a1f@x G2a20@ls)))) (lambda G2a1d ((lambda (G2a1e) (if (= G2a1e '0) (apply (lambda () G2a17@set) G2a1d) (if (= G2a1e '1) (apply (lambda (G2a1b@x) (set! G2a17@set (G2a1a@set-cons G2a1b@x G2a17@set))) G2a1d) (error 'apply '"invalid arg count")))) (length G2a1d))))) '#f)) '()))) (set! G299b@current-library-collection (G28ec@G2822@make-parameter (G2999@make-collection) (lambda (G2a23@x) (begin (if (not (procedure? G2a23@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a23@x) (void)) G2a23@x)))) (set! G29a1@G299c (make-record-type-descriptor 'library '#f 'G299f '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29a3@G299e '#f) (set! G29a5@G299d (make-record-constructor-descriptor G29a1@G299c '#f G29a3@G299e)) (set! G29a8@library? (record-predicate G29a1@G299c)) (set! G29aa@make-library (record-constructor G29a5@G299d)) (set! G29ac@library-id (record-accessor G29a1@G299c '0)) (set! G29ae@library-name (record-accessor G29a1@G299c '1)) (set! G29b0@library-version (record-accessor G29a1@G299c '2)) (set! G29b2@library-imp* (record-accessor G29a1@G299c '3)) (set! G29b4@library-vis* (record-accessor G29a1@G299c '4)) (set! G29b6@library-inv* (record-accessor G29a1@G299c '5)) (set! G29b8@library-subst (record-accessor G29a1@G299c '6)) (set! G29ba@library-env (record-accessor G29a1@G299c '7)) (set! G29bc@library-visit-state (record-accessor G29a1@G299c '8)) (set! G29be@library-invoke-state (record-accessor G29a1@G299c '9)) (set! G29c0@library-visit-code (record-accessor G29a1@G299c '10)) (set! G29c2@library-invoke-code (record-accessor G29a1@G299c '11)) (set! G29c4@library-visible? (record-accessor G29a1@G299c '12)) (set! G29c6@library-source-file-name (record-accessor G29a1@G299c '13)) (set! G29c8@set-library-id! (record-mutator G29a1@G299c '0)) (set! G29ca@set-library-name! (record-mutator G29a1@G299c '1)) (set! G29cc@set-library-version! (record-mutator G29a1@G299c '2)) (set! G29ce@set-library-imp*! (record-mutator G29a1@G299c '3)) (set! G29d0@set-library-vis*! (record-mutator G29a1@G299c '4)) (set! G29d2@set-library-inv*! (record-mutator G29a1@G299c '5)) (set! G29d4@set-library-subst! (record-mutator G29a1@G299c '6)) (set! G29d6@set-library-env! (record-mutator G29a1@G299c '7)) (set! G29d8@set-library-visit-state! (record-mutator G29a1@G299c '8)) (set! G29da@set-library-invoke-state! (record-mutator G29a1@G299c '9)) (set! G29dc@set-library-visit-code! (record-mutator G29a1@G299c '10)) (set! G29de@set-library-invoke-code! (record-mutator G29a1@G299c '11)) (set! G29e0@set-library-visible?! (record-mutator G29a1@G299c '12)) (set! G29e2@set-library-source-file-name! (record-mutator G29a1@G299c '13)) (set! G29e4@rp (G28e9@G281c@make-record-printer 'library (lambda (G2a25@x G2a26@p G2a27@wr) (begin (if (not (G29a8@library? G2a25@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29b0@library-version G2a25@x)) (G29ae@library-name G2a25@x) (append (G29ae@library-name G2a25@x) (list (G29b0@library-version G2a25@x))))) G2a26@p))))) (set! G29e6@find-dependencies (lambda (G2a2b@ls) (if (null? G2a2b@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29e8@find-library-by (lambda (G2a2d@pred) ((letrec ((G2a2f@f (lambda (G2a31@ls) (if (null? G2a31@ls) '#f (if (G2a2d@pred (car G2a31@ls)) (car G2a31@ls) (G2a2f@f (cdr G2a31@ls))))))) G2a2f@f) ((G299b@current-library-collection))))) (set! G29ea@library-path (G28ec@G2822@make-parameter '(".") (lambda (G2a33@x) (if (and (list? G2a33@x) (for-all string? G2a33@x)) (map (lambda (G2a35@x) G2a35@x) G2a33@x) (assertion-violation 'library-path '"not a list of strings" G2a33@x))))) (set! G29ec@library-extensions (G28ec@G2822@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a37@x) (if (and (list? G2a37@x) (for-all string? G2a37@x)) (map (lambda (G2a39@x) G2a39@x) G2a37@x) (assertion-violation 'library-extensions '"not a list of strings" G2a37@x))))) (set! G29ee@library-name->file-name (lambda (G2a3b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a3f@G2a3d G2a40@G2a3e) ((lambda (G2a43@extract G2a44@p) ((lambda (G2a48@display-hex) (begin (set! G2a48@display-hex (lambda (G2a51@n) (if (<= '0 G2a51@n '9) (display G2a51@n G2a44@p) (display (integer->char (+ (char->integer '#\A) (- G2a51@n '10))) G2a44@p)))) (begin ((letrec ((G2a49@f (lambda (G2a4b@ls) (if (not (null? G2a4b@ls)) (begin (display '"/" G2a44@p) (for-each (lambda (G2a4d@c) (if (or (char<=? '#\a G2a4d@c '#\z) (char<=? '#\A G2a4d@c '#\Z) (char<=? '#\0 G2a4d@c '#\9) (memv G2a4d@c '(#\- #\. #\_ #\~))) (display G2a4d@c G2a44@p) (begin (display '"%" G2a44@p) ((lambda (G2a4f@n) (begin (G2a48@display-hex (quotient G2a4f@n '16)) (G2a48@display-hex (remainder G2a4f@n '16)))) (char->integer G2a4d@c))))) (string->list (symbol->string (car G2a4b@ls)))) (G2a49@f (cdr G2a4b@ls))) (void))))) G2a49@f) G2a3b@x) (G2a43@extract)))) '#f)) G2a40@G2a3e G2a3f@G2a3d))))) (set! G29f0@file-locator (G28ec@G2822@make-parameter (lambda (G2a53@x) ((lambda (G2a55@str) ((letrec ((G2a57@f (lambda (G2a59@ls G2a5a@exts G2a5b@failed-list) (if (null? G2a59@ls) ((lambda () ((lambda (G2a67@G2a62 G2a69@G2a64 G2a6b@G2a63 G2a6e@G2a61 G2a70@make-library-resolution-condition G2a72@G2a5f G2a74@G2a60 G2a76@library-resolution-condition? G2a78@condition-library G2a7a@condition-files) (begin (set! G2a67@G2a62 (make-record-type-descriptor '&library-resolution G4c02@G4953@&condition-rtd 'G2a65 '#f '#f '#((immutable library) (immutable files)))) (set! G2a69@G2a64 '#f) (set! G2a6b@G2a63 (make-record-constructor-descriptor G2a67@G2a62 G4c03@G4955@&condition-rcd G2a69@G2a64)) (set! G2a6e@G2a61 (record-predicate G2a67@G2a62)) (set! G2a70@make-library-resolution-condition (record-constructor G2a6b@G2a63)) (set! G2a72@G2a5f (record-accessor G2a67@G2a62 '0)) (set! G2a74@G2a60 (record-accessor G2a67@G2a62 '1)) (set! G2a76@library-resolution-condition? (condition-predicate G2a67@G2a62)) (set! G2a78@condition-library (condition-accessor G2a67@G2a62 G2a72@G2a5f)) (set! G2a7a@condition-files (condition-accessor G2a67@G2a62 G2a74@G2a60)) (raise (condition (G4c22@G49eb@make-error) (G4c44@G4a45@make-who-condition 'expander) (G4c08@G49a8@make-message-condition '"cannot locate library in library-path") (G2a70@make-library-resolution-condition G2a53@x (reverse G2a5b@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a5a@exts) (G2a57@f (cdr G2a59@ls) (G29ec@library-extensions) G2a5b@failed-list) ((lambda (G2a7b@name) (if (file-exists? G2a7b@name) G2a7b@name (G2a57@f G2a59@ls (cdr G2a5a@exts) (cons G2a7b@name G2a5b@failed-list)))) (string-append (car G2a59@ls) G2a55@str (car G2a5a@exts)))))))) G2a57@f) (G29ea@library-path) (G29ec@library-extensions) '())) (G29ee@library-name->file-name G2a53@x))) (lambda (G2a7d@f) (if (procedure? G2a7d@f) G2a7d@f (assertion-violation 'file-locator '"not a procedure" G2a7d@f))))) (set! G29f2@serialize-all (lambda (G2a7f@serialize G2a80@compile) ((lambda (G2a84@library-desc) (begin (set! G2a84@library-desc (lambda (G2a87@x) (list (G29ac@library-id G2a87@x) (G29ae@library-name G2a87@x)))) (for-each (lambda (G2a85@x) (if (G29c6@library-source-file-name G2a85@x) (G2a7f@serialize (G29c6@library-source-file-name G2a85@x) (list (G29ac@library-id G2a85@x) (G29ae@library-name G2a85@x) (G29b0@library-version G2a85@x) (map G2a84@library-desc (G29b2@library-imp* G2a85@x)) (map G2a84@library-desc (G29b4@library-vis* G2a85@x)) (map G2a84@library-desc (G29b6@library-inv* G2a85@x)) (G29b8@library-subst G2a85@x) (G29ba@library-env G2a85@x) (G2a80@compile (G29c0@library-visit-code G2a85@x)) (G2a80@compile (G29c2@library-invoke-code G2a85@x)) (G29c4@library-visible? G2a85@x))) (void))) ((G299b@current-library-collection))))) '#f))) (set! G29f4@current-precompiled-library-loader (G28ec@G2822@make-parameter (lambda (G2a89@filename G2a8a@sk) '#f))) (set! G29f6@try-load-from-file (lambda (G2a8d@filename) ((G29f4@current-precompiled-library-loader) G2a8d@filename (lambda G2ab3 ((lambda (G2ab4) (if (= G2ab4 '11) (apply (lambda (G2a8f@id G2a90@name G2a91@ver G2a92@imp* G2a93@vis* G2a94@inv* G2a95@exp-subst G2a96@exp-env G2a97@visit-proc G2a98@invoke-proc G2a99@visible?) ((letrec ((G2aa5@f (lambda (G2aa7@deps) (if (null? G2aa7@deps) (begin (G2a0a@install-library G2a8f@id G2a90@name G2a91@ver G2a92@imp* G2a93@vis* G2a94@inv* G2a95@exp-subst G2a96@exp-env G2a97@visit-proc G2a98@invoke-proc '#f '#f G2a99@visible? '#f) '#t) ((lambda (G2aa9@d) ((lambda (G2aab@label G2aac@dname) ((lambda (G2aaf@l) (if (and (G29a8@library? G2aaf@l) (eq? G2aab@label (G29ac@library-id G2aaf@l))) (G2aa5@f (cdr G2aa7@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2a90@name G2aac@dname G2a8d@filename G2aaf@l G2aab@label (G29ac@library-id G2aaf@l)) '#f))) (G2a00@find-library-by-name G2aac@dname))) (car G2aa9@d) (cadr G2aa9@d))) (car G2aa7@deps)))))) G2aa5@f) (append G2a92@imp* G2a93@vis* G2a94@inv*))) G2ab3) (if (>= G2ab4 '0) (apply (lambda G2ab1@others '#f) G2ab3) (error 'apply '"invalid arg count")))) (length G2ab3)))))) (set! G29f8@library-loader (G28ec@G2822@make-parameter (lambda (G2ab5@x) ((lambda (G2ab7@file-name) (if (not G2ab7@file-name) (assertion-violation '#f '"cannot file library" G2ab5@x) (or (G29f6@try-load-from-file G2ab7@file-name) ((G29fa@current-library-expander) (G28eb@G2820@read-library-source-file G2ab7@file-name) G2ab7@file-name (lambda (G2ab9@name) (if (not (fast-equal? G2ab9@name G2ab5@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2abd@G2abb G2abe@G2abc) ((lambda (G2ac1@e G2ac2@p) (begin (display '"expected to find library " G2ac2@p) (write G2ab5@x G2ac2@p) (display '" in file " G2ac2@p) (display G2ab7@file-name G2ac2@p) (display '", found " G2ac2@p) (write G2ab9@name G2ac2@p) (display '" instead" G2ac2@p) (G2ac1@e))) G2abe@G2abc G2abd@G2abb)))) (void))))))) ((G29f0@file-locator) G2ab5@x))) (lambda (G2ac5@f) (if (procedure? G2ac5@f) G2ac5@f (assertion-violation 'library-locator '"not a procedure" G2ac5@f))))) (set! G29fa@current-library-expander (G28ec@G2822@make-parameter (lambda (G2ac7@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ac9@f) (if (procedure? G2ac9@f) G2ac9@f (assertion-violation 'library-expander '"not a procedure" G2ac9@f))))) (set! G29fc@external-pending-libraries (G28ec@G2822@make-parameter '())) (set! G29fe@find-external-library (lambda (G2acb@name) (begin (if (member G2acb@name (G29fc@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2acb@name) (void)) ((lambda (G2acf@G2acd G2ad0@G2ace) ((lambda (G2ad3@swap) (dynamic-wind G2ad3@swap (lambda () (begin ((G29f8@library-loader) G2acb@name) (or (G29e8@find-library-by (lambda (G2ad5@x) (fast-equal? (G29ae@library-name G2ad5@x) G2acb@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2acb@name)))) G2ad3@swap)) (lambda () ((lambda (G2ad7@t) (begin (G2acf@G2acd G2ad0@G2ace) (set! G2ad0@G2ace G2ad7@t))) (G2acf@G2acd))))) G29fc@external-pending-libraries (cons G2acb@name (G29fc@external-pending-libraries)))))) (set! G2a00@find-library-by-name (lambda (G2ad9@name) (or (G29e8@find-library-by (lambda (G2adb@x) (fast-equal? (G29ae@library-name G2adb@x) G2ad9@name))) (G29fe@find-external-library G2ad9@name)))) (set! G2a02@library-exists? (lambda (G2add@name) (and (G29e8@find-library-by (lambda (G2adf@x) (fast-equal? (G29ae@library-name G2adf@x) G2add@name))) '#t))) (set! G2a04@find-library-by-spec/die (lambda (G2ae1@spec) ((lambda (G2ae3@id) (or (G29e8@find-library-by (lambda (G2ae5@x) (eq? G2ae3@id (G29ac@library-id G2ae5@x)))) (assertion-violation '#f '"cannot find library with required spec" G2ae1@spec))) (car G2ae1@spec)))) (set! G2a06@label->binding-table (make-eq-hashtable)) (set! G2a08@install-library-record (lambda (G2ae7@lib) (begin ((lambda (G2ae9@exp-env) (for-each (lambda (G2aeb@x) ((lambda (G2aed@label G2aee@binding) ((lambda (G2af1@binding) (hashtable-set! G2a06@label->binding-table G2aed@label G2af1@binding)) ((lambda (G2af3@t) (if (memv G2af3@t '(global)) (cons 'global (cons G2ae7@lib (cdr G2aee@binding))) (if (memv G2af3@t '(global-macro)) (cons 'global-macro (cons G2ae7@lib (cdr G2aee@binding))) (if (memv G2af3@t '(global-macro!)) (cons 'global-macro! (cons G2ae7@lib (cdr G2aee@binding))) G2aee@binding)))) (car G2aee@binding)))) (car G2aeb@x) (cdr G2aeb@x))) G2ae9@exp-env)) (G29ba@library-env G2ae7@lib)) ((G299b@current-library-collection) G2ae7@lib)))) (set! G2a0a@install-library (lambda (G2af5@id G2af6@name G2af7@ver G2af8@imp* G2af9@vis* G2afa@inv* G2afb@exp-subst G2afc@exp-env G2afd@visit-proc G2afe@invoke-proc G2aff@visit-code G2b00@invoke-code G2b01@visible? G2b02@source-file-name) ((lambda (G2b11@imp-lib* G2b12@vis-lib* G2b13@inv-lib*) (begin (if (not (and (symbol? G2af5@id) (list? G2af6@name) (list? G2af7@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2af5@id G2af6@name G2af7@ver) (void)) (if (G2a02@library-exists? G2af6@name) (assertion-violation 'install-library '"library is already installed" G2af6@name) (void)) ((lambda (G2b17@lib) (G2a08@install-library-record G2b17@lib)) (G29aa@make-library G2af5@id G2af6@name G2af7@ver G2b11@imp-lib* G2b12@vis-lib* G2b13@inv-lib* G2afb@exp-subst G2afc@exp-env G2afd@visit-proc G2afe@invoke-proc G2aff@visit-code G2b00@invoke-code G2b01@visible? G2b02@source-file-name)))) (map G2a04@find-library-by-spec/die G2af8@imp*) (map G2a04@find-library-by-spec/die G2af9@vis*) (map G2a04@find-library-by-spec/die G2afa@inv*)))) (set! G2a0c@imported-label->binding (lambda (G2b19@lab) (hashtable-ref G2a06@label->binding-table G2b19@lab '#f))) (set! G2a0e@invoke-library (lambda (G2b1b@lib) ((lambda (G2b1d@invoke) (if (procedure? G2b1d@invoke) (begin (G29da@set-library-invoke-state! G2b1b@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b1b@lib))) (for-each G2a0e@invoke-library (G29b6@library-inv* G2b1b@lib)) (G29da@set-library-invoke-state! G2b1b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b1b@lib))) (G2b1d@invoke) (G29da@set-library-invoke-state! G2b1b@lib '#t)) (void))) (G29be@library-invoke-state G2b1b@lib)))) (set! G2a10@visit-library (lambda (G2b1f@lib) ((lambda (G2b21@visit) (if (procedure? G2b21@visit) (begin (G29d8@set-library-visit-state! G2b1f@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b1f@lib))) (for-each G2a0e@invoke-library (G29b4@library-vis* G2b1f@lib)) (G29d8@set-library-visit-state! G2b1f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b1f@lib))) (G2b21@visit) (G29d8@set-library-visit-state! G2b1f@lib '#t)) (void))) (G29bc@library-visit-state G2b1f@lib)))) (set! G2a12@invoke-library-by-spec (lambda (G2b23@spec) (G2a0e@invoke-library (G2a04@find-library-by-spec/die G2b23@spec)))) (set! G2a14@installed-libraries (lambda G2b2b ((lambda (G2b2c) (if (= G2b2c '1) (apply (lambda (G2b25@all?) ((letrec ((G2b27@f (lambda (G2b29@ls) (if (null? G2b29@ls) '() (if (or G2b25@all? (G29c4@library-visible? (car G2b29@ls))) (cons (car G2b29@ls) (G2b27@f (cdr G2b29@ls))) (G2b27@f (cdr G2b29@ls))))))) G2b27@f) ((G299b@current-library-collection)))) G2b2b) (if (= G2b2c '0) (apply (lambda () (G2a14@installed-libraries '#f)) G2b2b) (error 'apply '"invalid arg count")))) (length G2b2b)))) (set! G2a16@library-spec (lambda (G2b2d@x) (begin (if (not (G29a8@library? G2b2d@x)) (assertion-violation 'library-spec '"not a library" G2b2d@x) (void)) (list (G29ac@library-id G2b2d@x) (G29ae@library-name G2b2d@x) (G29b0@library-version G2b2d@x))))) (begin (set! G2b6b@G2a16@library-spec G2a16@library-spec) (set! G2b6a@G2a14@installed-libraries G2a14@installed-libraries) (set! G2b69@G2a12@invoke-library-by-spec G2a12@invoke-library-by-spec) (set! G2b68@G2a10@visit-library G2a10@visit-library) (set! G2b67@G2a0e@invoke-library G2a0e@invoke-library) (set! G2b66@G2a0c@imported-label->binding G2a0c@imported-label->binding) (set! G2b65@G2a0a@install-library G2a0a@install-library) (set! G2b64@G2a08@install-library-record G2a08@install-library-record) (set! G2b63@G2a06@label->binding-table G2a06@label->binding-table) (set! G2b62@G2a04@find-library-by-spec/die G2a04@find-library-by-spec/die) (set! G2b61@G2a02@library-exists? G2a02@library-exists?) (set! G2b60@G2a00@find-library-by-name G2a00@find-library-by-name) (set! G2b5f@G29fe@find-external-library G29fe@find-external-library) (set! G2b5e@G29fc@external-pending-libraries G29fc@external-pending-libraries) (set! G2b5d@G29fa@current-library-expander G29fa@current-library-expander) (set! G2b5c@G29f8@library-loader G29f8@library-loader) (set! G2b5b@G29f6@try-load-from-file G29f6@try-load-from-file) (set! G2b5a@G29f4@current-precompiled-library-loader G29f4@current-precompiled-library-loader) (set! G2b59@G29f2@serialize-all G29f2@serialize-all) (set! G2b58@G29f0@file-locator G29f0@file-locator) (set! G2b57@G29ee@library-name->file-name G29ee@library-name->file-name) (set! G2b56@G29ec@library-extensions G29ec@library-extensions) (set! G2b55@G29ea@library-path G29ea@library-path) (set! G2b54@G29e8@find-library-by G29e8@find-library-by) (set! G2b53@G29e6@find-dependencies G29e6@find-dependencies) (set! G2b52@G29e4@rp G29e4@rp) (set! G2b51@G29e2@set-library-source-file-name! G29e2@set-library-source-file-name!) (set! G2b50@G29e0@set-library-visible?! G29e0@set-library-visible?!) (set! G2b4f@G29de@set-library-invoke-code! G29de@set-library-invoke-code!) (set! G2b4e@G29dc@set-library-visit-code! G29dc@set-library-visit-code!) (set! G2b4d@G29da@set-library-invoke-state! G29da@set-library-invoke-state!) (set! G2b4c@G29d8@set-library-visit-state! G29d8@set-library-visit-state!) (set! G2b4b@G29d6@set-library-env! G29d6@set-library-env!) (set! G2b4a@G29d4@set-library-subst! G29d4@set-library-subst!) (set! G2b49@G29d2@set-library-inv*! G29d2@set-library-inv*!) (set! G2b48@G29d0@set-library-vis*! G29d0@set-library-vis*!) (set! G2b47@G29ce@set-library-imp*! G29ce@set-library-imp*!) (set! G2b46@G29cc@set-library-version! G29cc@set-library-version!) (set! G2b45@G29ca@set-library-name! G29ca@set-library-name!) (set! G2b44@G29c8@set-library-id! G29c8@set-library-id!) (set! G2b43@G29c6@library-source-file-name G29c6@library-source-file-name) (set! G2b42@G29c4@library-visible? G29c4@library-visible?) (set! G2b41@G29c2@library-invoke-code G29c2@library-invoke-code) (set! G2b40@G29c0@library-visit-code G29c0@library-visit-code) (set! G2b3f@G29be@library-invoke-state G29be@library-invoke-state) (set! G2b3e@G29bc@library-visit-state G29bc@library-visit-state) (set! G2b3d@G29ba@library-env G29ba@library-env) (set! G2b3c@G29b8@library-subst G29b8@library-subst) (set! G2b3b@G29b6@library-inv* G29b6@library-inv*) (set! G2b3a@G29b4@library-vis* G29b4@library-vis*) (set! G2b39@G29b2@library-imp* G29b2@library-imp*) (set! G2b38@G29b0@library-version G29b0@library-version) (set! G2b37@G29ae@library-name G29ae@library-name) (set! G2b36@G29ac@library-id G29ac@library-id) (set! G2b35@G29aa@make-library G29aa@make-library) (set! G2b34@G29a8@library? G29a8@library?) (set! G2b33@G29a5@G299d G29a5@G299d) (set! G2b32@G29a3@G299e G29a3@G299e) (set! G2b31@G29a1@G299c G29a1@G299c) (set! G2b30@G299b@current-library-collection G299b@current-library-collection) (set! G2b2f@G2999@make-collection G2999@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b6e@build-global-define G2be8@build-lambda G2bea@build-case-lambda G2bec@build-let G2c1e@build-sequence G2c20@build-void G2c22@build-letrec G2c24@build-letrec* G2c26@build-library-letrec* G2c28@build-receive) (begin (set! G2b6e@build-global-define (lambda (G2c29@x) (G2c20@build-void))) (set! G2be8@build-lambda (lambda (G2c2b@ae G2c2c@vars G2c2d@exp) (list 'lambda G2c2c@vars G2c2d@exp))) (set! G2bea@build-case-lambda (lambda (G2c31@ae G2c32@vars* G2c33@exp*) ((lambda (G2c38@build-error G2c3a@build-pred G2c3c@build-apply G2c3e@expand-case-lambda) (begin (set! G2c38@build-error (lambda (G2c6d@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c3a@build-pred (lambda (G2c57@ae G2c58@n G2c59@vars) (call-with-values (lambda () ((letrec ((G2c5f@f (lambda (G2c61@vars G2c62@count) (if (pair? G2c61@vars) (G2c5f@f (cdr G2c61@vars) (+ G2c62@count '1)) (if (null? G2c61@vars) (values G2c62@count '=) (values G2c62@count '>=)))))) G2c5f@f) G2c59@vars '0)) (lambda (G2c65@G2c5d G2c66@G2c5e) ((lambda (G2c69@pred G2c6a@count) (list (list 'primitive G2c69@pred) G2c58@n (list 'quote G2c6a@count))) G2c66@G2c5e G2c65@G2c5d))))) (set! G2c3c@build-apply (lambda (G2c4f@ae G2c50@g G2c51@vars G2c52@exp) (list '(primitive apply) (G2be8@build-lambda G2c4f@ae G2c51@vars G2c52@exp) G2c50@g))) (set! G2c3e@expand-case-lambda (lambda (G2c3f@ae G2c40@vars G2c41@exp*) ((lambda (G2c45@g G2c46@n) (list 'lambda G2c45@g (G2bec@build-let G2c3f@ae (list G2c46@n) (list (list '(primitive length) G2c45@g)) ((letrec ((G2c49@f (lambda (G2c4b@vars* G2c4c@exp*) (if (null? G2c4b@vars*) (G2c38@build-error G2c3f@ae) (list 'if (G2c3a@build-pred G2c3f@ae G2c46@n (car G2c4b@vars*)) (G2c3c@build-apply G2c3f@ae G2c45@g (car G2c4b@vars*) (car G2c4c@exp*)) (G2c49@f (cdr G2c4b@vars*) (cdr G2c4c@exp*))))))) G2c49@f) G2c32@vars* G2c41@exp*)))) (gensym) (gensym)))) (if (= (length G2c33@exp*) '1) (G2be8@build-lambda G2c31@ae (car G2c32@vars*) (car G2c33@exp*)) (G2c3e@expand-case-lambda G2c31@ae G2c32@vars* G2c33@exp*)))) '#f '#f '#f '#f))) (set! G2bec@build-let (lambda (G2c6f@ae G2c70@lhs* G2c71@rhs* G2c72@body) (cons (G2be8@build-lambda G2c6f@ae G2c70@lhs* G2c72@body) G2c71@rhs*))) (set! G2c1e@build-sequence (lambda (G2c77@ae G2c78@exps) ((letrec ((G2c7b@loop (lambda (G2c7d@exps) (if (null? (cdr G2c7d@exps)) (car G2c7d@exps) (if (equal? (car G2c7d@exps) (G2c20@build-void)) (G2c7b@loop (cdr G2c7d@exps)) (cons 'begin G2c7d@exps)))))) G2c7b@loop) G2c78@exps))) (set! G2c20@build-void (lambda () '((primitive void)))) (set! G2c22@build-letrec (lambda (G2c7f@ae G2c80@vars G2c81@val-exps G2c82@body-exp) (if (null? G2c80@vars) G2c82@body-exp (list 'letrec (map list G2c80@vars G2c81@val-exps) G2c82@body-exp)))) (set! G2c24@build-letrec* (lambda (G2c87@ae G2c88@vars G2c89@val-exps G2c8a@body-exp) (if (null? G2c88@vars) G2c8a@body-exp (G2bec@build-let G2c87@ae G2c88@vars (map (lambda (G2c8f@x) (list 'quote '#f)) G2c88@vars) (G2c1e@build-sequence G2c87@ae (append (map (lambda (G2c91@lhs G2c92@rhs) (list 'set! G2c91@lhs G2c92@rhs)) G2c88@vars G2c89@val-exps) (list G2c8a@body-exp))))))) (set! G2c26@build-library-letrec* (lambda (G2c95@ae G2c96@name G2c97@vars G2c98@locs G2c99@val-exps G2c9a@body-exp) (list 'library-letrec* G2c96@name (map list G2c97@vars G2c98@locs G2c99@val-exps) G2c9a@body-exp))) (set! G2c28@build-receive (lambda (G2ca1@ae G2ca2@vars G2ca3@producer G2ca4@body*) (begin (display '"************** in ") (cons 'receive (cons G2ca2@vars (cons G2ca3@producer G2ca4@body*)))))) (begin (set! G2cb2@G2c28@build-receive G2c28@build-receive) (set! G2cb1@G2c26@build-library-letrec* G2c26@build-library-letrec*) (set! G2cb0@G2c24@build-letrec* G2c24@build-letrec*) (set! G2caf@G2c22@build-letrec G2c22@build-letrec) (set! G2cae@G2c20@build-void G2c20@build-void) (set! G2cad@G2c1e@build-sequence G2c1e@build-sequence) (set! G2cac@G2bec@build-let G2bec@build-let) (set! G2cab@G2bea@build-case-lambda G2bea@build-case-lambda) (set! G2caa@G2be8@build-lambda G2be8@build-lambda) (set! G2ca9@G2b6e@build-global-define G2b6e@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cc1@set-cons G2cc3@set-union G2cc8@top-mark* G2cca@top-marked? G2ccc@gen-lexical G2cce@gen-global G2cd0@gen-label G2cd2@gen-top-level-label G2cd4@gen-define-label+loc G2cd6@gen-define-label G2cdc@G2cd7 G2cde@G2cd9 G2ce0@G2cd8 G2ce3@rib? G2ce5@make-rib G2ce7@rib-sym* G2ce9@rib-mark** G2ceb@rib-label* G2ced@rib-sealed/freq G2cef@rib-cache G2cf1@set-rib-sym*! G2cf3@set-rib-mark**! G2cf5@set-rib-label*! G2cf7@set-rib-sealed/freq! G2cf9@set-rib-cache! G2cfb@make-empty-rib G2cfd@make-cache-rib G2cff@find-label G2d01@extend-rib! G2d03@extend-rib/nc! G2d05@make-rib-map G2d07@seal-rib! G2d09@unseal-rib! G2d0b@make-full-rib G2d11@G2d0c G2d13@G2d0e G2d15@G2d0d G2d18@stx? G2d1a@make-stx G2d1c@stx-expr G2d1e@stx-mark* G2d20@stx-subst* G2d22@stx-ae* G2d24@set-stx-expr! G2d26@set-stx-mark*! G2d28@set-stx-subst*! G2d2a@set-stx-ae*! G2d2c@rp G2d2e@datum->stx G2d30@gen-mark G2d32@anti-mark G2d34@anti-mark? G2d36@join-wraps G2d38@mkstx G2d3a@add-mark G2d3c@add-subst G2d3e@syntax-kind? G2d40@syntax-vector->list G2d42@syntax-pair? G2d44@syntax-vector? G2d46@syntax-null? G2d48@syntax-list? G2d4a@syntax-car G2d4c@syntax-cdr G2d4e@syntax->list G2d50@id? G2d52@id->sym G2d54@same-marks? G2d56@bound-id=? G2d58@free-id=? G2d5a@valid-bound-ids? G2d5c@distinct-bound-ids? G2d5e@bound-id-member? G2d60@self-evaluating? G2d62@strip-annotations G2d64@strip G2d66@stx->datum G2d68@same-marks*? G2d6a@id->label G2d6c@id->real-label G2d6e@label->binding G2d70@make-binding G2d72@binding-type G2d74@binding-value G2d76@raise-unbound-error G2d78@syntax-type G2d88@sanitize-binding G2d8a@make-variable-transformer G2d8c@variable-transformer? G2d8e@variable-transformer-procedure G2d90@make-eval-transformer G2ed3@parse-define G2ed5@parse-define-syntax G2ed7@scheme-stx-hashtable G2ed9@scheme-stx G2edb@lexical-var G2edd@lexical-mutable? G2edf@set-lexical-mutable! G2ee1@add-lexical G2ee3@add-lexicals G2ee5@letrec-helper G2ee7@letrec-transformer G2ee9@letrec*-transformer G2eeb@fluid-let-syntax-transformer G2eed@type-descriptor-transformer G2eef@record-type-descriptor-transformer G2ef1@record-constructor-descriptor-transformer G2ef3@when-macro G2ef5@unless-macro G2ef7@if-transformer G2ef9@and-transformer G2efb@or-transformer G2efd@case-macro G2eff@quote-transformer G2f01@case-lambda-transformer G2f03@lambda-transformer G2f05@bless G2f07@with-syntax-macro G2f09@invalid-fmls-error G2f0b@let-macro G2f0d@let-values-macro G2f0f@let*-values-macro G2f11@trace-lambda-macro G2f13@trace-define-macro G2f15@trace-define-syntax-macro G2f17@trace-let/rec-syntax G2f19@trace-let-syntax-macro G2f1b@trace-letrec-syntax-macro G2f1d@guard-macro G2f1f@define-enumeration-macro G2f21@time-macro G2f23@delay-macro G2f25@assert-macro G2f27@endianness-macro G2f29@identifier-syntax-macro G2f2b@do-macro G2f2d@let*-macro G2f2f@or-macro G2f31@and-macro G2f33@cond-macro G2f35@do-include G2f37@include-macro G2f39@include-into-macro G2f3b@syntax-rules-macro G2f3d@quasiquote-macro G2f3f@quasisyntax-macro G2f41@define-struct-macro G2f43@define-record-type-macro G2f45@define-condition-type-macro G2f47@incorrect-usage-macro G2f49@parameterize-macro G2f4b@foreign-call-transformer G2f4d@convert-pattern G2f4f@syntax-dispatch G2f51@ellipsis? G2f53@underscore? G2f55@verify-literals G2f57@syntax-case-transformer G2f59@ellipsis-map G2f5b@syntax-transformer G2f5d@core-macro-transformer G2f5f@file-options-macro G2f61@symbol-macro G2f63@macro-transformer G2f65@local-macro-transformer G2f67@do-macro-call G2f69@chi-macro G2f6b@chi-local-macro G2f6d@chi-global-macro G2f6f@chi-expr* G2f71@chi-application G2f73@chi-expr G2f75@chi-set! G2f77@verify-formals G2f79@chi-lambda-clause G2f7b@chi-lambda-clause* G2f7d@chi-defun G2f7f@chi-rhs G2f81@expand-interaction-rhs*/init* G2f83@chi-rhs* G2f85@find-bound=? G2f87@find-dups G2f89@chi-internal G2f8b@parse-module G2f91@G2f8c G2f93@G2f8e G2f95@G2f8d G2f98@module-interface? G2f9a@make-module-interface G2f9c@module-interface-first-mark G2f9e@module-interface-exp-id-vec G2fa0@module-interface-exp-lab-vec G2fa2@set-module-interface-first-mark! G2fa4@set-module-interface-exp-id-vec! G2fa6@set-module-interface-exp-lab-vec! G2fa8@module-interface-exp-id* G2faa@chi-internal-module G2fac@chi-body* G2fae@expand-transformer G2fb0@parse-exports G2fb2@parse-library-name G2fb4@parse-library G2fb6@parse-import-spec* G2fb8@make-top-rib G2fba@make-collector G2fbc@inv-collector G2fbe@vis-collector G2fc0@imp-collector G2fc2@chi-library-internal G2fc4@chi-interaction-expr G2fc6@library-body-expander G2fc8@core-library-expander G2fca@parse-top-level-program G2fcc@top-level-expander G2fd2@G2fcd G2fd4@G2fcf G2fd6@G2fce G2fd9@env? G2fdb@make-env G2fdd@env-names G2fdf@env-labels G2fe1@env-itc G2fe3@set-env-names! G2fe5@set-env-labels! G2fe7@set-env-itc! G2fe9@rp G2fef@G2fea G2ff1@G2fec G2ff3@G2feb G2ff6@interaction-env? G2ff8@make-interaction-env G2ffa@interaction-env-rib G2ffc@interaction-env-r G2ffe@interaction-env-locs G3000@set-interaction-env-rib! G3002@set-interaction-env-r! G3004@set-interaction-env-locs! G3006@rp G3008@interaction-environment-symbols G300a@environment-bindings G300c@parse-binding G300e@environment? G3010@environment-symbols G3012@environment G3014@null-environment G3016@scheme-report-environment G3018@expand G301a@eval G301c@library-expander G301e@boot-library-expand G3020@rev-map-append G3022@build-exports G3024@make-export-subst G3026@make-export-env/macros G3028@generate-temporaries G302a@free-identifier=? G302c@bound-identifier=? G302e@make-source-condition G3030@extract-position-condition G3032@expression-position G3034@assertion-error G3036@syntax-error G3038@syntax-violation* G303a@syntax-violation G303c@identifier? G303e@datum->syntax G3040@syntax->datum G3042@compile-r6rs-top-level G3044@pre-compile-r6rs-top-level G3046@interaction-environment G3048@top-level-context) (begin (set! G2cc1@set-cons (lambda (G3049@x G304a@ls) (if (memq G3049@x G304a@ls) G304a@ls (cons G3049@x G304a@ls)))) (set! G2cc3@set-union (lambda (G304d@ls1 G304e@ls2) (if (null? G304d@ls1) G304e@ls2 (if (memq (car G304d@ls1) G304e@ls2) (G2cc3@set-union (cdr G304d@ls1) G304e@ls2) (cons (car G304d@ls1) (G2cc3@set-union (cdr G304d@ls1) G304e@ls2)))))) (set! G2cc8@top-mark* '(top)) (set! G2cca@top-marked? (lambda (G3051@m*) (memq 'top G3051@m*))) (set! G2ccc@gen-lexical (lambda (G3053@sym) (if (symbol? G3053@sym) (gensym G3053@sym) (if (G2d18@stx? G3053@sym) (G2ccc@gen-lexical (G2d52@id->sym G3053@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3053@sym))))) (set! G2cce@gen-global (lambda (G3055@x) (G2ccc@gen-lexical G3055@x))) (set! G2cd0@gen-label (lambda (G3057@_) (gensym))) (set! G2cd2@gen-top-level-label (lambda (G3059@id G305a@rib) ((lambda (G305e@find) (begin (set! G305e@find (lambda (G3069@sym G306a@mark* G306b@sym* G306c@mark** G306d@label*) (and (pair? G306b@sym*) (if (and (eq? G3069@sym (car G306b@sym*)) (G2d54@same-marks? G306a@mark* (car G306c@mark**))) (car G306d@label*) (G305e@find G3069@sym G306a@mark* (cdr G306b@sym*) (cdr G306c@mark**) (cdr G306d@label*)))))) ((lambda (G305f@sym G3060@mark*) ((lambda (G3063@sym*) ((lambda (G3065@t) (if G3065@t ((lambda (G3067@label) (if (G2b66@G2a0c@imported-label->binding G3067@label) (gensym) G3067@label)) G3065@t) (gensym))) (and (memq G305f@sym (G2ce7@rib-sym* G305a@rib)) (G305e@find G305f@sym G3060@mark* G3063@sym* (G2ce9@rib-mark** G305a@rib) (G2ceb@rib-label* G305a@rib))))) (G2ce7@rib-sym* G305a@rib))) (G2d52@id->sym G3059@id) (G2d1e@stx-mark* G3059@id)))) '#f))) (set! G2cd4@gen-define-label+loc (lambda (G3073@id G3074@rib) ((lambda (G3077@t) (if G3077@t ((lambda (G3079@env) ((lambda (G307b@label G307c@locs) (values G307b@label ((lambda (G307f@t) (if G307f@t (cdr G307f@t) ((lambda (G3081@loc) (begin (G3004@set-interaction-env-locs! G3079@env (cons (cons G307b@label G3081@loc) G307c@locs)) G3081@loc)) (G2ccc@gen-lexical G3073@id)))) (assq G307b@label G307c@locs)))) (G2cd2@gen-top-level-label G3073@id G3074@rib) (G2ffe@interaction-env-locs G3079@env))) G3077@t) (values (gensym) (G2ccc@gen-lexical G3073@id)))) (G3048@top-level-context)))) (set! G2cd6@gen-define-label (lambda (G3083@id G3084@rib) (if (G3048@top-level-context) (G2cd2@gen-top-level-label G3083@id G3084@rib) (gensym)))) (set! G2cdc@G2cd7 (make-record-type-descriptor 'rib '#f 'G2cda '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cde@G2cd9 '#f) (set! G2ce0@G2cd8 (make-record-constructor-descriptor G2cdc@G2cd7 '#f G2cde@G2cd9)) (set! G2ce3@rib? (record-predicate G2cdc@G2cd7)) (set! G2ce5@make-rib (record-constructor G2ce0@G2cd8)) (set! G2ce7@rib-sym* (record-accessor G2cdc@G2cd7 '0)) (set! G2ce9@rib-mark** (record-accessor G2cdc@G2cd7 '1)) (set! G2ceb@rib-label* (record-accessor G2cdc@G2cd7 '2)) (set! G2ced@rib-sealed/freq (record-accessor G2cdc@G2cd7 '3)) (set! G2cef@rib-cache (record-accessor G2cdc@G2cd7 '4)) (set! G2cf1@set-rib-sym*! (record-mutator G2cdc@G2cd7 '0)) (set! G2cf3@set-rib-mark**! (record-mutator G2cdc@G2cd7 '1)) (set! G2cf5@set-rib-label*! (record-mutator G2cdc@G2cd7 '2)) (set! G2cf7@set-rib-sealed/freq! (record-mutator G2cdc@G2cd7 '3)) (set! G2cf9@set-rib-cache! (record-mutator G2cdc@G2cd7 '4)) (set! G2cfb@make-empty-rib (lambda () (G2ce5@make-rib '() '() '() '#f '#f))) (set! G2cfd@make-cache-rib (lambda () (G2ce5@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2cff@find-label (lambda (G3087@rib G3088@sym G3089@mark*) ((lambda (G308d@ht) (and G308d@ht ((lambda (G308f@cv) ((lambda (G3091@t) (if G3091@t (cdr G3091@t) '#f)) (and G308f@cv (assp (lambda (G3093@m) (G2d54@same-marks? G3089@mark* G3093@m)) G308f@cv)))) (hashtable-ref G308d@ht G3088@sym '#f)))) (G2cef@rib-cache G3087@rib)))) (set! G2d01@extend-rib! (lambda (G3095@rib G3096@id G3097@label) ((lambda (G309c@find) (begin (set! G309c@find (lambda (G30ad@sym G30ae@mark* G30af@sym* G30b0@mark** G30b1@label*) (and (pair? G30af@sym*) (if (and (eq? G30ad@sym (car G30af@sym*)) (G2d54@same-marks? G30ae@mark* (car G30b0@mark**))) G30b1@label* (G309c@find G30ad@sym G30ae@mark* (cdr G30af@sym*) (cdr G30b0@mark**) (cdr G30b1@label*)))))) (begin (if (G2ced@rib-sealed/freq G3095@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G3095@rib) (void)) ((lambda (G309d@sym G309e@mark*) ((lambda (G30a1@sym*) ((lambda (G30a3@t) (if G30a3@t ((lambda (G30a5@p) (if (not (eq? G3097@label G30a5@p)) (G303a@syntax-violation '#f '"multiple definitions of identifier" G3096@id) (void))) G30a3@t) ((lambda (G30a7@t) (if G30a7@t ((lambda (G30a9@p) (if (not (eq? G3097@label (car G30a9@p))) (if (G3048@top-level-context) (set-car! G30a9@p G3097@label) (G303a@syntax-violation '#f '"multiple definitions of identifier" G3096@id)) (void))) G30a7@t) (begin (if (G2cef@rib-cache G3095@rib) (hashtable-update! (G2cef@rib-cache G3095@rib) G309d@sym (lambda (G30ab@e) (cons (cons G309e@mark* G3097@label) G30ab@e)) '()) (void)) (G2cf1@set-rib-sym*! G3095@rib (cons G309d@sym G30a1@sym*)) (G2cf3@set-rib-mark**! G3095@rib (cons G309e@mark* (G2ce9@rib-mark** G3095@rib))) (G2cf5@set-rib-label*! G3095@rib (cons G3097@label (G2ceb@rib-label* G3095@rib)))))) (and (memq G309d@sym (G2ce7@rib-sym* G3095@rib)) (G309c@find G309d@sym G309e@mark* G30a1@sym* (G2ce9@rib-mark** G3095@rib) (G2ceb@rib-label* G3095@rib)))))) (G2cff@find-label G3095@rib G309d@sym G309e@mark*))) (G2ce7@rib-sym* G3095@rib))) (G2d52@id->sym G3096@id) (G2d1e@stx-mark* G3096@id))))) '#f))) (set! G2d03@extend-rib/nc! (lambda (G30b7@rib G30b8@id G30b9@label) ((lambda (G30bd@sym G30be@mark*) ((lambda (G30c1@sym*) (begin (if (G2cef@rib-cache G30b7@rib) (hashtable-update! (G2cef@rib-cache G30b7@rib) G30bd@sym (lambda (G30c3@e) (cons (cons G30be@mark* G30b9@label) G30c3@e)) '()) (void)) (G2cf1@set-rib-sym*! G30b7@rib (cons G30bd@sym G30c1@sym*)) (G2cf3@set-rib-mark**! G30b7@rib (cons G30be@mark* (G2ce9@rib-mark** G30b7@rib))) (G2cf5@set-rib-label*! G30b7@rib (cons G30b9@label (G2ceb@rib-label* G30b7@rib))))) (G2ce7@rib-sym* G30b7@rib))) (G2d52@id->sym G30b8@id) (G2d1e@stx-mark* G30b8@id)))) (set! G2d05@make-rib-map (lambda (G30c5@sym*) ((lambda (G30c7@ht) ((letrec ((G30c9@f (lambda (G30cb@i G30cc@sym*) (if (null? G30cc@sym*) G30c7@ht (begin (hashtable-update! G30c7@ht (car G30cc@sym*) (lambda (G30cf@x) (cons G30cb@i G30cf@x)) '()) (G30c9@f (+ G30cb@i '1) (cdr G30cc@sym*))))))) G30c9@f) '0 G30c5@sym*)) (make-eq-hashtable)))) (set! G2d07@seal-rib! (lambda (G30d1@rib) ((lambda (G30d3@sym*) (if (not (null? G30d3@sym*)) (begin (G2cf1@set-rib-sym*! G30d1@rib (list->vector G30d3@sym*)) (G2cf3@set-rib-mark**! G30d1@rib (list->vector (G2ce9@rib-mark** G30d1@rib))) (G2cf5@set-rib-label*! G30d1@rib (list->vector (G2ceb@rib-label* G30d1@rib))) (G2cf7@set-rib-sealed/freq! G30d1@rib (G2d05@make-rib-map G30d3@sym*))) (void))) (G2ce7@rib-sym* G30d1@rib)))) (set! G2d09@unseal-rib! (lambda (G30d5@rib) (if (G2ced@rib-sealed/freq G30d5@rib) (begin (G2cf7@set-rib-sealed/freq! G30d5@rib '#f) (G2cf1@set-rib-sym*! G30d5@rib (vector->list (G2ce7@rib-sym* G30d5@rib))) (G2cf3@set-rib-mark**! G30d5@rib (vector->list (G2ce9@rib-mark** G30d5@rib))) (G2cf5@set-rib-label*! G30d5@rib (vector->list (G2ceb@rib-label* G30d5@rib)))) (void)))) (set! G2d0b@make-full-rib (lambda (G30d7@id* G30d8@label*) ((lambda (G30db@r) (begin (G2d07@seal-rib! G30db@r) G30db@r)) (G2ce5@make-rib (map G2d52@id->sym G30d7@id*) (map G2d1e@stx-mark* G30d7@id*) G30d8@label* '#f '#f)))) (set! G2d11@G2d0c (make-record-type-descriptor 'stx '#f 'G2d0f '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d13@G2d0e '#f) (set! G2d15@G2d0d (make-record-constructor-descriptor G2d11@G2d0c '#f G2d13@G2d0e)) (set! G2d18@stx? (record-predicate G2d11@G2d0c)) (set! G2d1a@make-stx (record-constructor G2d15@G2d0d)) (set! G2d1c@stx-expr (record-accessor G2d11@G2d0c '0)) (set! G2d1e@stx-mark* (record-accessor G2d11@G2d0c '1)) (set! G2d20@stx-subst* (record-accessor G2d11@G2d0c '2)) (set! G2d22@stx-ae* (record-accessor G2d11@G2d0c '3)) (set! G2d24@set-stx-expr! (record-mutator G2d11@G2d0c '0)) (set! G2d26@set-stx-mark*! (record-mutator G2d11@G2d0c '1)) (set! G2d28@set-stx-subst*! (record-mutator G2d11@G2d0c '2)) (set! G2d2a@set-stx-ae*! (record-mutator G2d11@G2d0c '3)) (set! G2d2c@rp (G28e9@G281c@make-record-printer 'stx (lambda (G30dd@x G30de@p G30df@wr) (begin (display '"#<syntax " G30de@p) (write (G2d66@stx->datum G30dd@x) G30de@p) ((lambda (G30e3@expr) (if (G28e1@G280c@annotation? G30e3@expr) ((lambda (G30e5@src) (if (pair? G30e5@src) (begin (display '" [" G30de@p) (display (cdr G30e5@src) G30de@p) (display '" of " G30de@p) (display (car G30e5@src) G30de@p) (display '"]" G30de@p)) (void))) (G28e2@G280e@annotation-source G30e3@expr)) (void))) (G2d1c@stx-expr G30dd@x)) (display '">" G30de@p))))) (set! G2d2e@datum->stx (lambda (G30e7@id G30e8@datum) (G2d1a@make-stx G30e8@datum (G2d1e@stx-mark* G30e7@id) (G2d20@stx-subst* G30e7@id) (G2d22@stx-ae* G30e7@id)))) (set! G2d30@gen-mark (lambda () (string '#\m))) (set! G2d32@anti-mark '#f) (set! G2d34@anti-mark? not) (set! G2d36@join-wraps (lambda (G30eb@m1* G30ec@s1* G30ed@ae1* G30ee@e) ((lambda (G30f4@cancel) (begin (set! G30f4@cancel (lambda (G30fb@ls1 G30fc@ls2) ((letrec ((G30ff@f (lambda (G3101@x G3102@ls1) (if (null? G3102@ls1) (cdr G30fc@ls2) (cons G3101@x (G30ff@f (car G3102@ls1) (cdr G3102@ls1))))))) G30ff@f) (car G30fb@ls1) (cdr G30fb@ls1)))) ((lambda (G30f5@m2* G30f6@s2* G30f7@ae2*) (if (and (not (null? G30eb@m1*)) (not (null? G30f5@m2*)) (G2d34@anti-mark? (car G30f5@m2*))) (values (G30f4@cancel G30eb@m1* G30f5@m2*) (G30f4@cancel G30ec@s1* G30f6@s2*) (G30f4@cancel G30ed@ae1* G30f7@ae2*)) (values (append G30eb@m1* G30f5@m2*) (append G30ec@s1* G30f6@s2*) (append G30ed@ae1* G30f7@ae2*)))) (G2d1e@stx-mark* G30ee@e) (G2d20@stx-subst* G30ee@e) (G2d22@stx-ae* G30ee@e)))) '#f))) (set! G2d38@mkstx (lambda (G3105@e G3106@m* G3107@s* G3108@ae*) (if (and (G2d18@stx? G3105@e) (not (G2cca@top-marked? G3106@m*))) (call-with-values (lambda () (G2d36@join-wraps G3106@m* G3107@s* G3108@ae* G3105@e)) (lambda (G3110@G310d G3111@G310e G3112@G310f) ((lambda (G3116@ae* G3117@s* G3118@m*) (G2d1a@make-stx (G2d1c@stx-expr G3105@e) G3118@m* G3117@s* G3116@ae*)) G3112@G310f G3111@G310e G3110@G310d))) (G2d1a@make-stx G3105@e G3106@m* G3107@s* G3108@ae*)))) (set! G2d3a@add-mark (lambda (G311c@m G311d@e G311e@ae) (G2d38@mkstx G311d@e (list G311c@m) '(shift) (list G311e@ae)))) (set! G2d3c@add-subst (lambda (G3122@subst G3123@e) (G2d38@mkstx G3123@e '() (list G3122@subst) '()))) (set! G2d3e@syntax-kind? (lambda (G3126@x G3127@p?) (if (G2d18@stx? G3126@x) (G2d3e@syntax-kind? (G2d1c@stx-expr G3126@x) G3127@p?) (if (G28e1@G280c@annotation? G3126@x) (G2d3e@syntax-kind? (G28e3@G2810@annotation-expression G3126@x) G3127@p?) (G3127@p? G3126@x))))) (set! G2d40@syntax-vector->list (lambda (G312a@x) (if (G2d18@stx? G312a@x) ((lambda (G312c@ls G312d@m* G312e@s* G312f@ae*) (map (lambda (G3134@x) (G2d38@mkstx G3134@x G312d@m* G312e@s* G312f@ae*)) G312c@ls)) (G2d40@syntax-vector->list (G2d1c@stx-expr G312a@x)) (G2d1e@stx-mark* G312a@x) (G2d20@stx-subst* G312a@x) (G2d22@stx-ae* G312a@x)) (if (G28e1@G280c@annotation? G312a@x) (G2d40@syntax-vector->list (G28e3@G2810@annotation-expression G312a@x)) (if (vector? G312a@x) (vector->list G312a@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G312a@x)))))) (set! G2d42@syntax-pair? (lambda (G3136@x) (G2d3e@syntax-kind? G3136@x pair?))) (set! G2d44@syntax-vector? (lambda (G3138@x) (G2d3e@syntax-kind? G3138@x vector?))) (set! G2d46@syntax-null? (lambda (G313a@x) (G2d3e@syntax-kind? G313a@x null?))) (set! G2d48@syntax-list? (lambda (G313c@x) (or (G2d46@syntax-null? G313c@x) (and (G2d42@syntax-pair? G313c@x) (G2d48@syntax-list? (G2d4c@syntax-cdr G313c@x)))))) (set! G2d4a@syntax-car (lambda (G313e@x) (if (G2d18@stx? G313e@x) (G2d38@mkstx (G2d4a@syntax-car (G2d1c@stx-expr G313e@x)) (G2d1e@stx-mark* G313e@x) (G2d20@stx-subst* G313e@x) (G2d22@stx-ae* G313e@x)) (if (G28e1@G280c@annotation? G313e@x) (G2d4a@syntax-car (G28e3@G2810@annotation-expression G313e@x)) (if (pair? G313e@x) (car G313e@x) (assertion-violation 'syntax-car '"BUG: not a pair" G313e@x)))))) (set! G2d4c@syntax-cdr (lambda (G3140@x) (if (G2d18@stx? G3140@x) (G2d38@mkstx (G2d4c@syntax-cdr (G2d1c@stx-expr G3140@x)) (G2d1e@stx-mark* G3140@x) (G2d20@stx-subst* G3140@x) (G2d22@stx-ae* G3140@x)) (if (G28e1@G280c@annotation? G3140@x) (G2d4c@syntax-cdr (G28e3@G2810@annotation-expression G3140@x)) (if (pair? G3140@x) (cdr G3140@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3140@x)))))) (set! G2d4e@syntax->list (lambda (G3142@x) (if (G2d42@syntax-pair? G3142@x) (cons (G2d4a@syntax-car G3142@x) (G2d4e@syntax->list (G2d4c@syntax-cdr G3142@x))) (if (G2d46@syntax-null? G3142@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3142@x))))) (set! G2d50@id? (lambda (G3144@x) (and (G2d18@stx? G3144@x) ((lambda (G3146@expr) (symbol? (if (G28e1@G280c@annotation? G3146@expr) (G28e0@G280a@annotation-stripped G3146@expr) G3146@expr))) (G2d1c@stx-expr G3144@x))))) (set! G2d52@id->sym (lambda (G3148@x) (begin (if (not (G2d18@stx? G3148@x)) (error 'id->sym '"BUG in ikarus: not an id" G3148@x) (void)) ((lambda (G314a@expr) ((lambda (G314c@sym) (if (symbol? G314c@sym) G314c@sym (error 'id->sym '"BUG in ikarus: not an id" G3148@x))) (if (G28e1@G280c@annotation? G314a@expr) (G28e0@G280a@annotation-stripped G314a@expr) G314a@expr))) (G2d1c@stx-expr G3148@x))))) (set! G2d54@same-marks? (lambda (G314e@x G314f@y) (or (and (null? G314e@x) (null? G314f@y)) (and (pair? G314e@x) (pair? G314f@y) (eq? (car G314e@x) (car G314f@y)) (G2d54@same-marks? (cdr G314e@x) (cdr G314f@y)))))) (set! G2d56@bound-id=? (lambda (G3152@x G3153@y) (and (eq? (G2d52@id->sym G3152@x) (G2d52@id->sym G3153@y)) (G2d54@same-marks? (G2d1e@stx-mark* G3152@x) (G2d1e@stx-mark* G3153@y))))) (set! G2d58@free-id=? (lambda (G3156@i G3157@j) ((lambda (G315a@t0 G315b@t1) (if (or G315a@t0 G315b@t1) (eq? G315a@t0 G315b@t1) (eq? (G2d52@id->sym G3156@i) (G2d52@id->sym G3157@j)))) (G2d6c@id->real-label G3156@i) (G2d6c@id->real-label G3157@j)))) (set! G2d5a@valid-bound-ids? (lambda (G315e@id*) (and (for-all G2d50@id? G315e@id*) (G2d5c@distinct-bound-ids? G315e@id*)))) (set! G2d5c@distinct-bound-ids? (lambda (G3160@id*) (or (null? G3160@id*) (and (not (G2d5e@bound-id-member? (car G3160@id*) (cdr G3160@id*))) (G2d5c@distinct-bound-ids? (cdr G3160@id*)))))) (set! G2d5e@bound-id-member? (lambda (G3162@id G3163@id*) (and (pair? G3163@id*) (or (G2d56@bound-id=? G3162@id (car G3163@id*)) (G2d5e@bound-id-member? G3162@id (cdr G3163@id*)))))) (set! G2d60@self-evaluating? (lambda (G3166@x) (or (number? G3166@x) (string? G3166@x) (char? G3166@x) (boolean? G3166@x) (regexp? G3166@x) (bytevector? G3166@x)))) (set! G2d62@strip-annotations (lambda (G3168@x) (if (pair? G3168@x) (cons (G2d62@strip-annotations (car G3168@x)) (G2d62@strip-annotations (cdr G3168@x))) (if (vector? G3168@x) (vector-map G2d62@strip-annotations G3168@x) (if (G28e1@G280c@annotation? G3168@x) (G28e0@G280a@annotation-stripped G3168@x) G3168@x))))) (set! G2d64@strip (lambda (G316a@x G316b@m*) (if (G2cca@top-marked? G316b@m*) (if (or (G28e1@G280c@annotation? G316a@x) (and (pair? G316a@x) (G28e1@G280c@annotation? (car G316a@x))) (and (vector? G316a@x) (> (vector-length G316a@x) '0) (G28e1@G280c@annotation? (vector-ref G316a@x '0)))) (G2d62@strip-annotations G316a@x) G316a@x) ((letrec ((G316e@f (lambda (G3170@x) (if (G2d18@stx? G3170@x) (G2d64@strip (G2d1c@stx-expr G3170@x) (G2d1e@stx-mark* G3170@x)) (if (G28e1@G280c@annotation? G3170@x) (G28e0@G280a@annotation-stripped G3170@x) (if (pair? G3170@x) ((lambda (G3172@a G3173@d) (if (and (eq? G3172@a (car G3170@x)) (eq? G3173@d (cdr G3170@x))) G3170@x (cons G3172@a G3173@d))) (G316e@f (car G3170@x)) (G316e@f (cdr G3170@x))) (if (vector? G3170@x) ((lambda (G3176@old) ((lambda (G3178@new) (if (for-all eq? G3176@old G3178@new) G3170@x (list->vector G3178@new))) (map G316e@f G3176@old))) (vector->list G3170@x)) G3170@x))))))) G316e@f) G316a@x)))) (set! G2d66@stx->datum (lambda (G317a@x) (G2d64@strip G317a@x '()))) (set! G2d68@same-marks*? (lambda (G317c@mark* G317d@mark** G317e@si) (if (null? G317e@si) '#f (if (G2d54@same-marks? G317c@mark* (vector-ref G317d@mark** (car G317e@si))) (car G317e@si) (G2d68@same-marks*? G317c@mark* G317d@mark** (cdr G317e@si)))))) (set! G2d6a@id->label (lambda (G3182@id) (or (G2d6c@id->real-label G3182@id) ((lambda (G3184@t) (if G3184@t ((lambda (G3186@env) ((lambda (G3188@rib) (call-with-values (lambda () (G2cd4@gen-define-label+loc G3182@id G3188@rib)) (lambda (G318c@G318a G318d@G318b) ((lambda (G3190@loc_ G3191@lab) (begin (G2d01@extend-rib! G3188@rib G3182@id G3191@lab) G3191@lab)) G318d@G318b G318c@G318a)))) (G2ffa@interaction-env-rib G3186@env))) G3184@t) '#f)) (G3048@top-level-context))))) (set! G2d6c@id->real-label (lambda (G3194@id) ((lambda (G3196@sym) ((letrec ((G3198@search (lambda (G319a@subst* G319b@mark*) (if (null? G319a@subst*) '#f (if (eq? (car G319a@subst*) 'shift) (G3198@search (cdr G319a@subst*) (cdr G319b@mark*)) ((lambda (G319e@rib) ((lambda (G31a0@t) (if G31a0@t ((lambda (G31a2@ht) ((lambda (G31a4@si) ((lambda (G31a6@i) (if G31a6@i (vector-ref (G2ceb@rib-label* G319e@rib) G31a6@i) (G3198@search (cdr G319a@subst*) G319b@mark*))) (and G31a4@si (G2d68@same-marks*? G319b@mark* (G2ce9@rib-mark** G319e@rib) (reverse G31a4@si))))) (hashtable-ref G31a2@ht G3196@sym '#f))) G31a0@t) (or (G2cff@find-label G319e@rib G3196@sym G319b@mark*) ((letrec ((G31a8@f (lambda (G31aa@sym* G31ab@mark** G31ac@label*) (if (null? G31aa@sym*) (G3198@search (cdr G319a@subst*) G319b@mark*) (if (and (eq? (car G31aa@sym*) G3196@sym) (G2d54@same-marks? (car G31ab@mark**) G319b@mark*)) (car G31ac@label*) (G31a8@f (cdr G31aa@sym*) (cdr G31ab@mark**) (cdr G31ac@label*))))))) G31a8@f) (G2ce7@rib-sym* G319e@rib) (G2ce9@rib-mark** G319e@rib) (G2ceb@rib-label* G319e@rib))))) (G2ced@rib-sealed/freq G319e@rib))) (car G319a@subst*))))))) G3198@search) (G2d20@stx-subst* G3194@id) (G2d1e@stx-mark* G3194@id))) (G2d52@id->sym G3194@id)))) (set! G2d6e@label->binding (lambda (G31b0@x G31b1@r) ((lambda (G31b4@t) (if G31b4@t ((lambda (G31b6@b) (if (and (pair? G31b6@b) (eq? (car G31b6@b) '$core-rtd)) (cons '$rtd (map G2f05@bless (cdr G31b6@b))) (if (and (pair? G31b6@b) (eq? (car G31b6@b) 'global-rtd)) ((lambda (G31b8@lib G31b9@loc) (cons '$rtd (symbol-value G31b9@loc))) (cadr G31b6@b) (cddr G31b6@b)) G31b6@b))) G31b4@t) ((lambda (G31bc@t) (if G31bc@t (cdr G31bc@t) ((lambda (G31be@t) (if G31be@t ((lambda (G31c0@env) ((lambda (G31c2@t) (if G31c2@t ((lambda (G31c4@p) (cons* 'lexical (cdr G31c4@p) '#f)) G31c2@t) '(displaced-lexical . #f))) (assq G31b0@x (G2ffe@interaction-env-locs G31c0@env)))) G31be@t) '(displaced-lexical . #f))) (G3048@top-level-context)))) (assq G31b0@x G31b1@r)))) (G2b66@G2a0c@imported-label->binding G31b0@x)))) (set! G2d70@make-binding cons) (set! G2d72@binding-type car) (set! G2d74@binding-value cdr) (set! G2d76@raise-unbound-error (lambda (G31c6@id) (G3038@syntax-violation* '#f '"unbound identifier" G31c6@id (G4c72@G4abc@make-undefined-violation)))) (set! G2d78@syntax-type (lambda (G31c8@e G31c9@r) (if (G2d50@id? G31c8@e) ((lambda (G31cc@id) ((lambda (G31ce@label) ((lambda (G31d0@b) ((lambda (G31d2@type) ((lambda () (begin (if (not G31ce@label) (G2d76@raise-unbound-error G31cc@id) (void)) ((lambda (G31d4@t) (if (memv G31d4@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31d2@type (G2d74@binding-value G31d0@b) G31cc@id) (values 'other '#f '#f))) G31d2@type))))) (G2d72@binding-type G31d0@b))) (G2d6e@label->binding G31ce@label G31c9@r))) (G2d6a@id->label G31cc@id))) G31c8@e) (if (G2d42@syntax-pair? G31c8@e) ((lambda (G31d6@id) (if (G2d50@id? G31d6@id) ((lambda (G31d8@label) ((lambda (G31da@b) ((lambda (G31dc@type) ((lambda () (begin (if (not G31d8@label) (G2d76@raise-unbound-error G31d6@id) (void)) ((lambda (G31de@t) (if (memv G31de@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31dc@type (G2d74@binding-value G31da@b) G31d6@id) (values 'call '#f '#f))) G31dc@type))))) (G2d72@binding-type G31da@b))) (G2d6e@label->binding G31d8@label G31c9@r))) (G2d6a@id->label G31d6@id)) (values 'call '#f '#f))) (G2d4a@syntax-car G31c8@e)) ((lambda (G31e0@d) (if (G2d60@self-evaluating? G31e0@d) (values 'constant G31e0@d '#f) (values 'other '#f '#f))) (G2d66@stx->datum G31c8@e)))))) (set! G2d88@sanitize-binding (lambda (G31e2@x G31e3@src) (if (procedure? G31e2@x) (cons* 'local-macro G31e2@x G31e3@src) (if (and (pair? G31e2@x) (eq? (car G31e2@x) 'macro!) (procedure? (cdr G31e2@x))) (cons* 'local-macro! (cdr G31e2@x) G31e3@src) (if (and (pair? G31e2@x) (eq? (car G31e2@x) '$rtd)) G31e2@x (assertion-violation 'expand '"invalid transformer" G31e2@x)))))) (set! G2d8a@make-variable-transformer (lambda (G31e6@x) (if (procedure? G31e6@x) (cons 'macro! G31e6@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31e6@x)))) (set! G2d8c@variable-transformer? (lambda (G31e8@x) (and (pair? G31e8@x) (eq? (car G31e8@x) 'macro!) (procedure? (cdr G31e8@x))))) (set! G2d8e@variable-transformer-procedure (lambda (G31ea@x) (if (G2d8c@variable-transformer? G31ea@x) (cdr G31ea@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31ea@x)))) (set! G2d90@make-eval-transformer (lambda (G31ec@x) (G2d88@sanitize-binding (eval-core (G2940@G28f8@expanded->core G31ec@x)) G31ec@x))) (set! G2ed3@parse-define (lambda (G31ee@x) ((lambda (G31f0@t) ((lambda (G31f2@ls/false) (if (and G31f2@ls/false (apply (lambda (G31f4@id G31f5@fmls G31f6@b G31f7@b*) (G2d50@id? G31f4@id)) G31f2@ls/false)) (apply (lambda (G31fc@id G31fd@fmls G31fe@b G31ff@b*) (begin (G2f77@verify-formals G31fd@fmls G31ee@x) (values G31fc@id (cons 'defun (cons G31fd@fmls (cons G31fe@b G31ff@b*)))))) G31f2@ls/false) ((lambda (G3204@t) ((lambda (G3206@ls/false) (if (and G3206@ls/false (apply (lambda (G3208@id G3209@val) (G2d50@id? G3208@id)) G3206@ls/false)) (apply (lambda (G320c@id G320d@val) (values G320c@id (cons 'expr G320d@val))) G3206@ls/false) ((lambda (G3210@t) ((lambda (G3212@ls/false) (if (and G3212@ls/false (apply (lambda (G3214@id) (G2d50@id? G3214@id)) G3212@ls/false)) (apply (lambda (G3216@id) (values G3216@id (cons 'expr (G2f05@bless '(void))))) G3212@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3210@t))) (G2f4f@syntax-dispatch G3210@t '(_ any)))) G3204@t))) (G2f4f@syntax-dispatch G3204@t '(_ any any)))) G31f0@t))) (G2f4f@syntax-dispatch G31f0@t '(_ (any . any) any . each-any)))) G31ee@x))) (set! G2ed5@parse-define-syntax (lambda (G3218@x) ((lambda (G321a@t) ((lambda (G321c@ls/false) (if (and G321c@ls/false (apply (lambda (G321e@id G321f@val) (G2d50@id? G321e@id)) G321c@ls/false)) (apply (lambda (G3222@id G3223@val) (values G3222@id G3223@val)) G321c@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G321a@t))) (G2f4f@syntax-dispatch G321a@t '(_ any any)))) G3218@x))) (set! G2ed7@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ed9@scheme-stx (lambda (G3226@sym) (or (hashtable-ref G2ed7@scheme-stx-hashtable G3226@sym '#f) ((lambda (G3228@subst) ((lambda (G322a@stx) ((lambda (G322c@stx) ((lambda () (begin (hashtable-set! G2ed7@scheme-stx-hashtable G3226@sym G322c@stx) G322c@stx)))) ((lambda (G322e@t) (if G322e@t ((lambda (G3230@x) ((lambda (G3232@name G3233@label) (G2d3c@add-subst (G2ce5@make-rib (list G3232@name) (list G2cc8@top-mark*) (list G3233@label) '#f '#f) G322a@stx)) (car G3230@x) (cdr G3230@x))) G322e@t) G322a@stx)) (assq G3226@sym G3228@subst)))) (G2d1a@make-stx G3226@sym G2cc8@top-mark* '() '()))) (G2b3c@G29b8@library-subst (G2b60@G2a00@find-library-by-name '(psyntax system $all))))))) (set! G2edb@lexical-var car) (set! G2edd@lexical-mutable? cdr) (set! G2edf@set-lexical-mutable! set-cdr!) (set! G2ee1@add-lexical (lambda (G3236@lab G3237@lex G3238@r) (cons (cons* G3236@lab 'lexical G3237@lex '#f) G3238@r))) (set! G2ee3@add-lexicals (lambda (G323c@lab* G323d@lex* G323e@r) (if (null? G323c@lab*) G323e@r (G2ee3@add-lexicals (cdr G323c@lab*) (cdr G323d@lex*) (G2ee1@add-lexical (car G323c@lab*) (car G323d@lex*) G323e@r))))) (set! G2ee5@letrec-helper (lambda (G3242@e G3243@r G3244@mr G3245@build) ((lambda (G324a@t) ((lambda (G324c@ls/false) (if G324c@ls/false (apply (lambda (G324e@lhs* G324f@rhs* G3250@b G3251@b*) (if (not (G2d5a@valid-bound-ids? G324e@lhs*)) (G2f09@invalid-fmls-error G3242@e G324e@lhs*) ((lambda (G3256@lex* G3257@lab*) ((lambda (G325a@rib G325b@r) ((lambda (G325e@body G325f@rhs*) (G3245@build '#f G3256@lex* G325f@rhs* G325e@body)) (G2f89@chi-internal (G2d3c@add-subst G325a@rib (cons G3250@b G3251@b*)) G325b@r G3244@mr) (G2f6f@chi-expr* (map (lambda (G3262@x) (G2d3c@add-subst G325a@rib G3262@x)) G324f@rhs*) G325b@r G3244@mr))) (G2d0b@make-full-rib G324e@lhs* G3257@lab*) (G2ee3@add-lexicals G3257@lab* G3256@lex* G3243@r))) (map G2ccc@gen-lexical G324e@lhs*) (map G2cd0@gen-label G324e@lhs*)))) G324c@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G324a@t))) (G2f4f@syntax-dispatch G324a@t '(_ #(each (any any)) any . each-any)))) G3242@e))) (set! G2ee7@letrec-transformer (lambda (G3264@e G3265@r G3266@mr) (G2ee5@letrec-helper G3264@e G3265@r G3266@mr G2caf@G2c22@build-letrec))) (set! G2ee9@letrec*-transformer (lambda (G326a@e G326b@r G326c@mr) (G2ee5@letrec-helper G326a@e G326b@r G326c@mr G2cb0@G2c24@build-letrec*))) (set! G2eeb@fluid-let-syntax-transformer (lambda (G3270@e G3271@r G3272@mr) ((lambda (G3277@lookup) (begin (set! G3277@lookup (lambda (G328a@x) (or (G2d6a@id->label G328a@x) (G303a@syntax-violation '#f '"unbound identifier" G3270@e G328a@x)))) ((lambda (G3278@t) ((lambda (G327a@ls/false) (if G327a@ls/false (apply (lambda (G327c@lhs* G327d@rhs* G327e@b G327f@b*) (if (not (G2d5a@valid-bound-ids? G327c@lhs*)) (G2f09@invalid-fmls-error G3270@e G327c@lhs*) ((lambda (G3284@lab* G3285@rhs*) (G2f89@chi-internal (cons G327e@b G327f@b*) (append (map cons G3284@lab* G3285@rhs*) G3271@r) (append (map cons G3284@lab* G3285@rhs*) G3272@mr))) (map G3277@lookup G327c@lhs*) (map (lambda (G3288@x) (G2d90@make-eval-transformer (G2fae@expand-transformer G3288@x G3272@mr))) G327d@rhs*)))) G327a@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3278@t))) (G2f4f@syntax-dispatch G3278@t '(_ #(each (any any)) any . each-any)))) G3270@e))) '#f))) (set! G2eed@type-descriptor-transformer (lambda (G328c@e G328d@r G328e@mr) ((lambda (G3292@t) ((lambda (G3294@ls/false) (if (and G3294@ls/false (apply (lambda (G3296@id) (G2d50@id? G3296@id)) G3294@ls/false)) (apply (lambda (G3298@id) ((lambda (G329a@lab) ((lambda (G329c@b) ((lambda (G329e@type) ((lambda () (begin (if (not G329a@lab) (G2d76@raise-unbound-error G3298@id) (void)) (if (not (and (eq? G329e@type '$rtd) (not (list? (G2d74@binding-value G329c@b))))) (G303a@syntax-violation '#f '"not a record type" G328c@e) (void)) (list 'quote (G2d74@binding-value G329c@b)))))) (G2d72@binding-type G329c@b))) (G2d6e@label->binding G329a@lab G328d@r))) (G2d6a@id->label G3298@id))) G3294@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3292@t))) (G2f4f@syntax-dispatch G3292@t '(_ any)))) G328c@e))) (set! G2eef@record-type-descriptor-transformer (lambda (G32a0@e G32a1@r G32a2@mr) ((lambda (G32a6@t) ((lambda (G32a8@ls/false) (if (and G32a8@ls/false (apply (lambda (G32aa@id) (G2d50@id? G32aa@id)) G32a8@ls/false)) (apply (lambda (G32ac@id) ((lambda (G32ae@lab) ((lambda (G32b0@b) ((lambda (G32b2@type) ((lambda () (begin (if (not G32ae@lab) (G2d76@raise-unbound-error G32ac@id) (void)) (if (not (and (eq? G32b2@type '$rtd) (list? (G2d74@binding-value G32b0@b)))) (G303a@syntax-violation '#f '"not a record type" G32a0@e) (void)) (G2f73@chi-expr (car (G2d74@binding-value G32b0@b)) G32a1@r G32a2@mr))))) (G2d72@binding-type G32b0@b))) (G2d6e@label->binding G32ae@lab G32a1@r))) (G2d6a@id->label G32ac@id))) G32a8@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G32a6@t))) (G2f4f@syntax-dispatch G32a6@t '(_ any)))) G32a0@e))) (set! G2ef1@record-constructor-descriptor-transformer (lambda (G32b4@e G32b5@r G32b6@mr) ((lambda (G32ba@t) ((lambda (G32bc@ls/false) (if (and G32bc@ls/false (apply (lambda (G32be@id) (G2d50@id? G32be@id)) G32bc@ls/false)) (apply (lambda (G32c0@id) ((lambda (G32c2@lab) ((lambda (G32c4@b) ((lambda (G32c6@type) ((lambda () (begin (if (not G32c2@lab) (G2d76@raise-unbound-error G32c0@id) (void)) (if (not (and (eq? G32c6@type '$rtd) (list? (G2d74@binding-value G32c4@b)))) (G303a@syntax-violation '#f '"invalid type" G32b4@e) (void)) (G2f73@chi-expr (cadr (G2d74@binding-value G32c4@b)) G32b5@r G32b6@mr))))) (G2d72@binding-type G32c4@b))) (G2d6e@label->binding G32c2@lab G32b5@r))) (G2d6a@id->label G32c0@id))) G32bc@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G32ba@t))) (G2f4f@syntax-dispatch G32ba@t '(_ any)))) G32b4@e))) (set! G2ef3@when-macro (lambda (G32c8@e) ((lambda (G32ca@t) ((lambda (G32cc@ls/false) (if G32cc@ls/false (apply (lambda (G32ce@test G32cf@e G32d0@e*) (G2f05@bless (list 'if G32ce@test (cons 'begin (cons G32cf@e G32d0@e*))))) G32cc@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G32ca@t))) (G2f4f@syntax-dispatch G32ca@t '(_ any any . each-any)))) G32c8@e))) (set! G2ef5@unless-macro (lambda (G32d4@e) ((lambda (G32d6@t) ((lambda (G32d8@ls/false) (if G32d8@ls/false (apply (lambda (G32da@test G32db@e G32dc@e*) (G2f05@bless (list 'if (list 'not G32da@test) (cons 'begin (cons G32db@e G32dc@e*))))) G32d8@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G32d6@t))) (G2f4f@syntax-dispatch G32d6@t '(_ any any . each-any)))) G32d4@e))) (set! G2ef7@if-transformer (lambda (G32e0@e G32e1@r G32e2@mr) ((lambda (G32e6@t) ((lambda (G32e8@ls/false) (if G32e8@ls/false (apply (lambda (G32ea@e0 G32eb@e1 G32ec@e2) (list 'if (G2f73@chi-expr G32ea@e0 G32e1@r G32e2@mr) (G2f73@chi-expr G32eb@e1 G32e1@r G32e2@mr) (G2f73@chi-expr G32ec@e2 G32e1@r G32e2@mr))) G32e8@ls/false) ((lambda (G32f0@t) ((lambda (G32f2@ls/false) (if G32f2@ls/false (apply (lambda (G32f4@e0 G32f5@e1) (list 'if (G2f73@chi-expr G32f4@e0 G32e1@r G32e2@mr) (G2f73@chi-expr G32f5@e1 G32e1@r G32e2@mr) (G2cae@G2c20@build-void))) G32f2@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G32f0@t))) (G2f4f@syntax-dispatch G32f0@t '(_ any any)))) G32e6@t))) (G2f4f@syntax-dispatch G32e6@t '(_ any any any)))) G32e0@e))) (set! G2ef9@and-transformer (lambda (G32f8@e G32f9@r G32fa@mr) ((lambda (G32fe@t) ((lambda (G3300@ls/false) (if G3300@ls/false (apply (lambda (G3302@e*) (cons 'and (G2f6f@chi-expr* G3302@e* G32f9@r G32fa@mr))) G3300@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G32fe@t))) (G2f4f@syntax-dispatch G32fe@t '(_ . each-any)))) G32f8@e))) (set! G2efb@or-transformer (lambda (G3304@e G3305@r G3306@mr) ((lambda (G330a@t) ((lambda (G330c@ls/false) (if G330c@ls/false (apply (lambda (G330e@e*) (cons 'or (G2f6f@chi-expr* G330e@e* G3305@r G3306@mr))) G330c@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G330a@t))) (G2f4f@syntax-dispatch G330a@t '(_ . each-any)))) G3304@e))) (set! G2efd@case-macro (lambda (G3310@e) ((lambda (G3313@build-last G3315@build-one) (begin (set! G3313@build-last (lambda (G333a@cls) ((lambda (G333c@t) ((lambda (G333e@ls/false) (if G333e@ls/false (apply (lambda (G3340@e G3341@e*) (cons 'begin (cons G3340@e G3341@e*))) G333e@ls/false) ((lambda (G3344@t) ((lambda (G3346@ls/false) (if G3346@ls/false (apply (lambda () (G3315@build-one G333a@cls '(if #f #f))) G3346@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3344@t))) (G2f4f@syntax-dispatch G3344@t '_))) G333c@t))) (G2f4f@syntax-dispatch G333c@t '(#(scheme-id else) any . each-any)))) G333a@cls))) (set! G3315@build-one (lambda (G332c@cls G332d@k) ((lambda (G3330@t) ((lambda (G3332@ls/false) (if G3332@ls/false (apply (lambda (G3334@d* G3335@e G3336@e*) (list 'if (list 'memv 't (list 'quote G3334@d*)) (cons 'begin (cons G3335@e G3336@e*)) G332d@k)) G3332@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3330@t))) (G2f4f@syntax-dispatch G3330@t '(each-any any . each-any)))) G332c@cls))) ((lambda (G3316@t) ((lambda (G3318@ls/false) (if G3318@ls/false (apply (lambda (G331a@expr) (G2f05@bless (cons 'let (cons (list (list 't G331a@expr)) '((if #f #f)))))) G3318@ls/false) ((lambda (G331c@t) ((lambda (G331e@ls/false) (if G331e@ls/false (apply (lambda (G3320@expr G3321@cls G3322@cls*) (G2f05@bless (list 'let (list (list 't G3320@expr)) ((letrec ((G3326@f (lambda (G3328@cls G3329@cls*) (if (null? G3329@cls*) (G3313@build-last G3328@cls) (G3315@build-one G3328@cls (G3326@f (car G3329@cls*) (cdr G3329@cls*))))))) G3326@f) G3321@cls G3322@cls*)))) G331e@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G331c@t))) (G2f4f@syntax-dispatch G331c@t '(_ any any . each-any)))) G3316@t))) (G2f4f@syntax-dispatch G3316@t '(_ any)))) G3310@e))) '#f '#f))) (set! G2eff@quote-transformer (lambda (G3348@e G3349@r G334a@mr) ((lambda (G334e@t) ((lambda (G3350@ls/false) (if G3350@ls/false (apply (lambda (G3352@datum) (list 'quote (G2d66@stx->datum G3352@datum))) G3350@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G334e@t))) (G2f4f@syntax-dispatch G334e@t '(_ any)))) G3348@e))) (set! G2f01@case-lambda-transformer (lambda (G3354@e G3355@r G3356@mr) ((lambda (G335a@t) ((lambda (G335c@ls/false) (if G335c@ls/false (apply (lambda (G335e@fmls* G335f@b* G3360@b**) (call-with-values (lambda () (G2f7b@chi-lambda-clause* G3354@e G335e@fmls* (map cons G335f@b* G3360@b**) G3355@r G3356@mr)) (lambda (G3366@G3364 G3367@G3365) ((lambda (G336a@body* G336b@fmls*) (G2cab@G2bea@build-case-lambda '#f G336b@fmls* G336a@body*)) G3367@G3365 G3366@G3364)))) G335c@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G335a@t))) (G2f4f@syntax-dispatch G335a@t '(_ . #(each (any any . each-any)))))) G3354@e))) (set! G2f03@lambda-transformer (lambda (G336e@e G336f@r G3370@mr) ((lambda (G3374@t) ((lambda (G3376@ls/false) (if G3376@ls/false (apply (lambda (G3378@fmls G3379@b G337a@b*) (call-with-values (lambda () (G2f79@chi-lambda-clause G336e@e G3378@fmls (cons G3379@b G337a@b*) G336f@r G3370@mr)) (lambda (G3380@G337e G3381@G337f) ((lambda (G3384@body G3385@fmls) (G2caa@G2be8@build-lambda '#f G3385@fmls G3384@body)) G3381@G337f G3380@G337e)))) G3376@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3374@t))) (G2f4f@syntax-dispatch G3374@t '(_ any any . each-any)))) G336e@e))) (set! G2f05@bless (lambda (G3388@x) (G2d38@mkstx ((letrec ((G338a@f (lambda (G338c@x) (if (G2d18@stx? G338c@x) G338c@x (if (pair? G338c@x) (cons (G338a@f (car G338c@x)) (G338a@f (cdr G338c@x))) (if (symbol? G338c@x) (G2ed9@scheme-stx G338c@x) (if (vector? G338c@x) (vector-map G338a@f G338c@x) G338c@x))))))) G338a@f) G3388@x) '() '() '()))) (set! G2f07@with-syntax-macro (lambda (G338e@e) ((lambda (G3390@t) ((lambda (G3392@ls/false) (if G3392@ls/false (apply (lambda (G3394@pat* G3395@expr* G3396@b G3397@b*) ((lambda (G339c@idn*) (begin (G2f77@verify-formals (map car G339c@idn*) G338e@e) ((lambda (G339e@t*) (G2f05@bless (list 'let (map list G339e@t* G3395@expr*) ((letrec ((G33a0@f (lambda (G33a2@pat* G33a3@t*) (if (null? G33a2@pat*) (cons 'begin (cons '#f (cons G3396@b G3397@b*))) (list 'syntax-case (car G33a3@t*) '() (list (car G33a2@pat*) (G33a0@f (cdr G33a2@pat*) (cdr G33a3@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33a2@pat*)) (car G33a3@t*)))))))) G33a0@f) G3394@pat* G339e@t*)))) (G3028@generate-temporaries G3395@expr*)))) ((letrec ((G33a6@f (lambda (G33a8@pat*) (if (null? G33a8@pat*) '() (call-with-values (lambda () (G2f4d@convert-pattern (car G33a8@pat*) '())) (lambda (G33ac@G33aa G33ad@G33ab) ((lambda (G33b0@idn* G33b1@pat) (append G33b0@idn* (G33a6@f (cdr G33a8@pat*)))) G33ad@G33ab G33ac@G33aa))))))) G33a6@f) G3394@pat*))) G3392@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3390@t))) (G2f4f@syntax-dispatch G3390@t '(_ #(each (any any)) any . each-any)))) G338e@e))) (set! G2f09@invalid-fmls-error (lambda (G33b4@stx G33b5@fmls) ((lambda (G33b8@t) ((lambda (G33ba@ls/false) (if G33ba@ls/false (apply (lambda (G33bc@id* G33bd@last) ((letrec ((G33c0@f (lambda (G33c2@id*) (if (null? G33c2@id*) (values) (if (not (G2d50@id? (car G33c2@id*))) (G303a@syntax-violation '#f '"not an identifier" G33b4@stx (car G33c2@id*)) (begin (G33c0@f (cdr G33c2@id*)) (if (G2d5e@bound-id-member? (car G33c2@id*) (cdr G33c2@id*)) (G303a@syntax-violation '#f '"duplicate binding" G33b4@stx (car G33c2@id*)) (void)))))))) G33c0@f) (if (G2d50@id? G33bd@last) (cons G33bd@last G33bc@id*) (if (G2d46@syntax-null? G33bd@last) G33bc@id* (G303a@syntax-violation '#f '"not an identifier" G33b4@stx G33bd@last))))) G33ba@ls/false) ((lambda (G33c4@t) ((lambda (G33c6@ls/false) (if G33c6@ls/false (apply (lambda () (G303a@syntax-violation '#f '"malformed binding form" G33b4@stx G33b5@fmls)) G33c6@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G33c4@t))) (G2f4f@syntax-dispatch G33c4@t '_))) G33b8@t))) (G2f4f@syntax-dispatch G33b8@t '#(each+ any () any)))) G33b5@fmls))) (set! G2f0b@let-macro (lambda (G33c8@stx) ((lambda (G33ca@t) ((lambda (G33cc@ls/false) (if G33cc@ls/false (apply (lambda (G33ce@lhs* G33cf@rhs* G33d0@b G33d1@b*) (if (G2d5a@valid-bound-ids? G33ce@lhs*) (G2f05@bless (cons (cons 'lambda (cons G33ce@lhs* (cons G33d0@b G33d1@b*))) G33cf@rhs*)) (G2f09@invalid-fmls-error G33c8@stx G33ce@lhs*))) G33cc@ls/false) ((lambda (G33d6@t) ((lambda (G33d8@ls/false) (if (and G33d8@ls/false (apply (lambda (G33da@f G33db@lhs* G33dc@rhs* G33dd@b G33de@b*) (G2d50@id? G33da@f)) G33d8@ls/false)) (apply (lambda (G33e4@f G33e5@lhs* G33e6@rhs* G33e7@b G33e8@b*) (if (G2d5a@valid-bound-ids? G33e5@lhs*) (G2f05@bless (cons (list 'letrec (list (list G33e4@f (cons 'lambda (cons G33e5@lhs* (cons G33e7@b G33e8@b*))))) G33e4@f) G33e6@rhs*)) (G2f09@invalid-fmls-error G33c8@stx G33e5@lhs*))) G33d8@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G33d6@t))) (G2f4f@syntax-dispatch G33d6@t '(_ any #(each (any any)) any . each-any)))) G33ca@t))) (G2f4f@syntax-dispatch G33ca@t '(_ #(each (any any)) any . each-any)))) G33c8@stx))) (set! G2f0d@let-values-macro (lambda (G33ee@stx) ((lambda (G33f1@rename G33f3@rename*) (begin (set! G33f1@rename (lambda (G3453@x G3454@old* G3455@new*) (begin (if (not (G2d50@id? G3453@x)) (G303a@syntax-violation '#f '"not an indentifier" G33ee@stx G3453@x) (void)) (if (G2d5e@bound-id-member? G3453@x G3454@old*) (G303a@syntax-violation '#f '"duplicate binding" G33ee@stx G3453@x) (void)) ((lambda (G3459@y) (values G3459@y (cons G3453@x G3454@old*) (cons G3459@y G3455@new*))) (gensym (G3040@syntax->datum G3453@x)))))) (set! G33f3@rename* (lambda (G3441@x* G3442@old* G3443@new*) (if (null? G3441@x*) (values '() G3442@old* G3443@new*) (call-with-values (lambda () (G33f1@rename (car G3441@x*) G3442@old* G3443@new*)) (lambda (G3447@x G3448@old* G3449@new*) (call-with-values (lambda () (G33f3@rename* (cdr G3441@x*) G3448@old* G3449@new*)) (lambda (G344d@x* G344e@old* G344f@new*) (values (cons G3447@x G344d@x*) G344e@old* G344f@new*)))))))) ((lambda (G33f4@t) ((lambda (G33f6@ls/false) (if G33f6@ls/false (apply (lambda (G33f8@b G33f9@b*) (cons* (G2f05@bless 'let) '() G33f8@b G33f9@b*)) G33f6@ls/false) ((lambda (G33fc@t) ((lambda (G33fe@ls/false) (if G33fe@ls/false (apply (lambda (G3400@lhs* G3401@rhs* G3402@b G3403@b*) (G2f05@bless ((letrec ((G3408@f (lambda (G340a@lhs* G340b@rhs* G340c@old* G340d@new*) (if (null? G340a@lhs*) (cons 'let (cons (map list G340c@old* G340d@new*) (cons G3402@b G3403@b*))) ((lambda (G3412@t) ((lambda (G3414@ls/false) (if G3414@ls/false (apply (lambda (G3416@x*) (call-with-values (lambda () (G33f3@rename* G3416@x* G340c@old* G340d@new*)) (lambda (G341b@G3418 G341c@G3419 G341d@G341a) ((lambda (G3421@new* G3422@old* G3423@y*) (list 'call-with-values (list 'lambda '() (car G340b@rhs*)) (list 'lambda G3423@y* (G3408@f (cdr G340a@lhs*) (cdr G340b@rhs*) G3422@old* G3421@new*)))) G341d@G341a G341c@G3419 G341b@G3418)))) G3414@ls/false) ((lambda (G3427@t) ((lambda (G3429@ls/false) (if G3429@ls/false (apply (lambda (G342b@x* G342c@x) (call-with-values (lambda () (G33f1@rename G342c@x G340c@old* G340d@new*)) (lambda (G342f@y G3430@old* G3431@new*) (call-with-values (lambda () (G33f3@rename* G342b@x* G3430@old* G3431@new*)) (lambda (G3435@y* G3436@old* G3437@new*) (list 'call-with-values (list 'lambda '() (car G340b@rhs*)) (list 'lambda (append G3435@y* G342f@y) (G3408@f (cdr G340a@lhs*) (cdr G340b@rhs*) G3436@old* G3437@new*)))))))) G3429@ls/false) ((lambda (G343b@t) ((lambda (G343d@ls/false) (if G343d@ls/false (apply (lambda (G343f@others) (G303a@syntax-violation '#f '"malformed bindings" G33ee@stx G343f@others)) G343d@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G343b@t))) (G2f4f@syntax-dispatch G343b@t 'any))) G3427@t))) (G2f4f@syntax-dispatch G3427@t '#(each+ any () any)))) G3412@t))) (G2f4f@syntax-dispatch G3412@t 'each-any))) (car G340a@lhs*)))))) G3408@f) G3400@lhs* G3401@rhs* '() '()))) G33fe@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G33fc@t))) (G2f4f@syntax-dispatch G33fc@t '(_ #(each (any any)) any . each-any)))) G33f4@t))) (G2f4f@syntax-dispatch G33f4@t '(_ () any . each-any)))) G33ee@stx))) '#f '#f))) (set! G2f0f@let*-values-macro (lambda (G345b@stx) ((lambda (G345e@check) (begin (set! G345e@check (lambda (G348d@x*) (if (not (null? G348d@x*)) ((lambda (G348f@x) (begin (if (not (G2d50@id? G348f@x)) (G303a@syntax-violation '#f '"not an identifier" G345b@stx G348f@x) (void)) (G345e@check (cdr G348d@x*)) (if (G2d5e@bound-id-member? G348f@x (cdr G348d@x*)) (G303a@syntax-violation '#f '"duplicate identifier" G345b@stx G348f@x) (void)))) (car G348d@x*)) (void)))) ((lambda (G345f@t) ((lambda (G3461@ls/false) (if G3461@ls/false (apply (lambda (G3463@b G3464@b*) (cons* (G2f05@bless 'let) '() G3463@b G3464@b*)) G3461@ls/false) ((lambda (G3467@t) ((lambda (G3469@ls/false) (if G3469@ls/false (apply (lambda (G346b@lhs* G346c@rhs* G346d@b G346e@b*) (G2f05@bless ((letrec ((G3473@f (lambda (G3475@lhs* G3476@rhs*) (if (null? G3475@lhs*) (cons 'begin (cons G346d@b G346e@b*)) ((lambda (G3479@t) ((lambda (G347b@ls/false) (if G347b@ls/false (apply (lambda (G347d@x*) (begin (G345e@check G347d@x*) (list 'call-with-values (list 'lambda '() (car G3476@rhs*)) (list 'lambda G347d@x* (G3473@f (cdr G3475@lhs*) (cdr G3476@rhs*)))))) G347b@ls/false) ((lambda (G347f@t) ((lambda (G3481@ls/false) (if G3481@ls/false (apply (lambda (G3483@x* G3484@x) (begin (G345e@check (cons G3484@x G3483@x*)) (list 'call-with-values (list 'lambda '() (car G3476@rhs*)) (list 'lambda (append G3483@x* G3484@x) (G3473@f (cdr G3475@lhs*) (cdr G3476@rhs*)))))) G3481@ls/false) ((lambda (G3487@t) ((lambda (G3489@ls/false) (if G3489@ls/false (apply (lambda (G348b@others) (G303a@syntax-violation '#f '"malformed bindings" G345b@stx G348b@others)) G3489@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3487@t))) (G2f4f@syntax-dispatch G3487@t 'any))) G347f@t))) (G2f4f@syntax-dispatch G347f@t '#(each+ any () any)))) G3479@t))) (G2f4f@syntax-dispatch G3479@t 'each-any))) (car G3475@lhs*)))))) G3473@f) G346b@lhs* G346c@rhs*))) G3469@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3467@t))) (G2f4f@syntax-dispatch G3467@t '(_ #(each (any any)) any . each-any)))) G345f@t))) (G2f4f@syntax-dispatch G345f@t '(_ () any . each-any)))) G345b@stx))) '#f))) (set! G2f11@trace-lambda-macro (lambda (G3491@stx) ((lambda (G3493@t) ((lambda (G3495@ls/false) (if G3495@ls/false (apply (lambda (G3497@who G3498@fmls G3499@b G349a@b*) (if (G2d5a@valid-bound-ids? G3498@fmls) (G2f05@bless (list 'make-traced-procedure (list 'quote G3497@who) (cons 'lambda (cons G3498@fmls (cons G3499@b G349a@b*))))) (G2f09@invalid-fmls-error G3491@stx G3498@fmls))) G3495@ls/false) ((lambda (G349f@t) ((lambda (G34a1@ls/false) (if G34a1@ls/false (apply (lambda (G34a3@who G34a4@fmls G34a5@last G34a6@b G34a7@b*) (if (G2d5a@valid-bound-ids? (cons G34a5@last G34a4@fmls)) (G2f05@bless (list 'make-traced-procedure (list 'quote G34a3@who) (cons 'lambda (cons (append G34a4@fmls G34a5@last) (cons G34a6@b G34a7@b*))))) (G2f09@invalid-fmls-error G3491@stx (append G34a4@fmls G34a5@last)))) G34a1@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G349f@t))) (G2f4f@syntax-dispatch G349f@t '(_ any #(each+ any () any) any . each-any)))) G3493@t))) (G2f4f@syntax-dispatch G3493@t '(_ any each-any any . each-any)))) G3491@stx))) (set! G2f13@trace-define-macro (lambda (G34ad@stx) ((lambda (G34af@t) ((lambda (G34b1@ls/false) (if G34b1@ls/false (apply (lambda (G34b3@who G34b4@fmls G34b5@b G34b6@b*) (if (G2d5a@valid-bound-ids? G34b4@fmls) (G2f05@bless (list 'define G34b3@who (list 'make-traced-procedure (list 'quote G34b3@who) (cons 'lambda (cons G34b4@fmls (cons G34b5@b G34b6@b*)))))) (G2f09@invalid-fmls-error G34ad@stx G34b4@fmls))) G34b1@ls/false) ((lambda (G34bb@t) ((lambda (G34bd@ls/false) (if G34bd@ls/false (apply (lambda (G34bf@who G34c0@fmls G34c1@last G34c2@b G34c3@b*) (if (G2d5a@valid-bound-ids? (cons G34c1@last G34c0@fmls)) (G2f05@bless (list 'define G34bf@who (list 'make-traced-procedure (list 'quote G34bf@who) (cons 'lambda (cons (append G34c0@fmls G34c1@last) (cons G34c2@b G34c3@b*)))))) (G2f09@invalid-fmls-error G34ad@stx (append G34c0@fmls G34c1@last)))) G34bd@ls/false) ((lambda (G34c9@t) ((lambda (G34cb@ls/false) (if G34cb@ls/false (apply (lambda (G34cd@who G34ce@expr) (if (G2d50@id? G34cd@who) (G2f05@bless (list 'define G34cd@who (list 'let (list (list 'v G34ce@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34cd@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G303a@syntax-violation '#f '"invalid name" G34ad@stx))) G34cb@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G34c9@t))) (G2f4f@syntax-dispatch G34c9@t '(_ any any)))) G34bb@t))) (G2f4f@syntax-dispatch G34bb@t '(_ (any . #(each+ any () any)) any . each-any)))) G34af@t))) (G2f4f@syntax-dispatch G34af@t '(_ (any . each-any) any . each-any)))) G34ad@stx))) (set! G2f15@trace-define-syntax-macro (lambda (G34d1@stx) ((lambda (G34d3@t) ((lambda (G34d5@ls/false) (if G34d5@ls/false (apply (lambda (G34d7@who G34d8@expr) (if (G2d50@id? G34d7@who) (G2f05@bless (list 'define-syntax G34d7@who (list 'make-traced-macro (list 'quote G34d7@who) G34d8@expr))) (G303a@syntax-violation '#f '"invalid name" G34d1@stx))) G34d5@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G34d3@t))) (G2f4f@syntax-dispatch G34d3@t '(_ any any)))) G34d1@stx))) (set! G2f17@trace-let/rec-syntax (lambda (G34db@who) (lambda (G34dd@stx) ((lambda (G34df@t) ((lambda (G34e1@ls/false) (if G34e1@ls/false (apply (lambda (G34e3@lhs* G34e4@rhs* G34e5@b G34e6@b*) (if (G2d5a@valid-bound-ids? G34e3@lhs*) ((lambda (G34eb@rhs*) (G2f05@bless (cons G34db@who (cons (map list G34e3@lhs* G34eb@rhs*) (cons G34e5@b G34e6@b*))))) (map (lambda (G34ed@lhs G34ee@rhs) (list 'make-traced-macro (list 'quote G34ed@lhs) G34ee@rhs)) G34e3@lhs* G34e4@rhs*)) (G2f09@invalid-fmls-error G34dd@stx G34e3@lhs*))) G34e1@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G34df@t))) (G2f4f@syntax-dispatch G34df@t '(_ #(each (any any)) any . each-any)))) G34dd@stx)))) (set! G2f19@trace-let-syntax-macro (G2f17@trace-let/rec-syntax 'let-syntax)) (set! G2f1b@trace-letrec-syntax-macro (G2f17@trace-let/rec-syntax 'letrec-syntax)) (set! G2f1d@guard-macro (lambda (G34f1@x) ((lambda (G34f4@gen-clauses) (begin (set! G34f4@gen-clauses (lambda (G350b@con G350c@outerk G350d@clause*) ((lambda (G3512@f G3514@f*) (begin (set! G3512@f (lambda (G3547@x G3548@k) ((lambda (G354b@t) ((lambda (G354d@ls/false) (if G354d@ls/false (apply (lambda (G354f@e G3550@p) ((lambda (G3553@t) (list 'let (list (list G3553@t G354f@e)) (list 'if G3553@t (list G3550@p G3553@t) G3548@k))) (gensym))) G354d@ls/false) ((lambda (G3555@t) ((lambda (G3557@ls/false) (if G3557@ls/false (apply (lambda (G3559@e) ((lambda (G355b@t) (list 'let (list (list G355b@t G3559@e)) (list 'if G355b@t G355b@t G3548@k))) (gensym))) G3557@ls/false) ((lambda (G355d@t) ((lambda (G355f@ls/false) (if G355f@ls/false (apply (lambda (G3561@e G3562@v G3563@v*) (list 'if G3561@e (cons 'begin (cons G3562@v G3563@v*)) G3548@k)) G355f@ls/false) ((lambda (G3567@t) ((lambda (G3569@ls/false) (if G3569@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid guard clause" G3547@x)) G3569@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3567@t))) (G2f4f@syntax-dispatch G3567@t '_))) G355d@t))) (G2f4f@syntax-dispatch G355d@t '(any any . each-any)))) G3555@t))) (G2f4f@syntax-dispatch G3555@t '(any)))) G354b@t))) (G2f4f@syntax-dispatch G354b@t '(any #(scheme-id =>) any)))) G3547@x))) (set! G3514@f* (lambda (G351f@x*) ((lambda (G3521@t) ((lambda (G3523@ls/false) (if G3523@ls/false (apply (lambda () ((lambda (G3525@g) (values (list G3525@g (list 'lambda '() (list 'raise-continuable G350b@con))) G3525@g)) (gensym))) G3523@ls/false) ((lambda (G3527@t) ((lambda (G3529@ls/false) (if G3529@ls/false (apply (lambda (G352b@e G352c@e*) (values (cons 'begin (cons G352b@e G352c@e*)) '#f)) G3529@ls/false) ((lambda (G352f@t) ((lambda (G3531@ls/false) (if G3531@ls/false (apply (lambda (G3533@cls G3534@cls*) (call-with-values (lambda () (G3514@f* G3534@cls*)) (lambda (G3539@G3537 G353a@G3538) ((lambda (G353d@g G353e@e) (values (G3512@f G3533@cls G353e@e) G353d@g)) G353a@G3538 G3539@G3537)))) G3531@ls/false) ((lambda (G3541@t) ((lambda (G3543@ls/false) (if G3543@ls/false (apply (lambda (G3545@others) (G303a@syntax-violation '#f '"invalid guard clause" G3545@others)) G3543@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3541@t))) (G2f4f@syntax-dispatch G3541@t 'any))) G352f@t))) (G2f4f@syntax-dispatch G352f@t '(any . any)))) G3527@t))) (G2f4f@syntax-dispatch G3527@t '((#(scheme-id else) any . each-any))))) G3521@t))) (G2f4f@syntax-dispatch G3521@t '()))) G351f@x*))) (call-with-values (lambda () (G3514@f* G350d@clause*)) (lambda (G3517@G3515 G3518@G3516) ((lambda (G351b@raisek G351c@code) (if G351b@raisek (list (list 'call/cc (list 'lambda (list G351b@raisek) (list G350c@outerk (list 'lambda '() G351c@code))))) (list G350c@outerk (list 'lambda '() G351c@code)))) G3518@G3516 G3517@G3515))))) '#f '#f))) ((lambda (G34f5@t) ((lambda (G34f7@ls/false) (if (and G34f7@ls/false (apply (lambda (G34f9@con G34fa@clause* G34fb@b G34fc@b*) (G2d50@id? G34f9@con)) G34f7@ls/false)) (apply (lambda (G3501@con G3502@clause* G3503@b G3504@b*) ((lambda (G3509@outerk) (G2f05@bless (list (list 'call/cc (list 'lambda (list G3509@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3501@con) (G34f4@gen-clauses G3501@con G3509@outerk G3502@clause*)) (cons 'lambda (cons '() (cons G3503@b G3504@b*)))))))))) (gensym))) G34f7@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G34f5@t))) (G2f4f@syntax-dispatch G34f5@t '(_ (any . each-any) any . each-any)))) G34f1@x))) '#f))) (set! G2f1f@define-enumeration-macro (lambda (G356b@stx) ((lambda (G356e@set? G3570@remove-dups) (begin (set! G356e@set? (lambda (G3587@x) (or (null? G3587@x) (and (not (memq (car G3587@x) (cdr G3587@x))) (G356e@set? (cdr G3587@x)))))) (set! G3570@remove-dups (lambda (G3585@ls) (if (null? G3585@ls) '() (cons (car G3585@ls) (G3570@remove-dups (remq (car G3585@ls) (cdr G3585@ls))))))) ((lambda (G3571@t) ((lambda (G3573@ls/false) (if (and G3573@ls/false (apply (lambda (G3575@name G3576@id* G3577@maker) (and (G2d50@id? G3575@name) (G2d50@id? G3577@maker) (for-all G2d50@id? G3576@id*))) G3573@ls/false)) (apply (lambda (G357b@name G357c@id* G357d@maker) ((lambda (G3581@name* G3582@mk) (G2f05@bless (list 'begin (list 'define G3582@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3581@name*)))) (list 'define-syntax G357b@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3581@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G357b@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G357d@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G357d@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3581@name*)) (cons 'syntax-violation (cons (list 'quote G357d@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3582@mk '('(n* ...)))))))))))) (G3570@remove-dups (G3040@syntax->datum G357c@id*)) (gensym))) G3573@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3571@t))) (G2f4f@syntax-dispatch G3571@t '(_ any each-any any)))) G356b@stx))) '#f '#f))) (set! G2f21@time-macro (lambda (G3589@stx) ((lambda (G358b@t) ((lambda (G358d@ls/false) (if G358d@ls/false (apply (lambda (G358f@expr) ((lambda (G3591@str) (G2f05@bless (list 'time-it G3591@str (list 'lambda '() G358f@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3595@G3593 G3596@G3594) ((lambda (G3599@e G359a@p) (begin (write (G3040@syntax->datum G358f@expr) G359a@p) (G3599@e))) G3596@G3594 G3595@G3593))))) G358d@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G358b@t))) (G2f4f@syntax-dispatch G358b@t '(_ any)))) G3589@stx))) (set! G2f23@delay-macro (lambda (G359d@stx) ((lambda (G359f@t) ((lambda (G35a1@ls/false) (if G35a1@ls/false (apply (lambda (G35a3@expr) (G2f05@bless (list 'make-promise (list 'lambda '() G35a3@expr)))) G35a1@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G359f@t))) (G2f4f@syntax-dispatch G359f@t '(_ any)))) G359d@stx))) (set! G2f25@assert-macro (lambda (G35a5@stx) ((lambda (G35a7@t) ((lambda (G35a9@ls/false) (if G35a9@ls/false (apply (lambda (G35ab@expr) ((lambda (G35ad@pos) (G2f05@bless (list 'unless G35ab@expr (list 'assertion-error (list 'quote G35ab@expr) (list 'quote G35ad@pos))))) (or (G3032@expression-position G35a5@stx) (G3032@expression-position G35ab@expr)))) G35a9@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G35a7@t))) (G2f4f@syntax-dispatch G35a7@t '(_ any)))) G35a5@stx))) (set! G2f27@endianness-macro (lambda (G35af@stx) ((lambda (G35b1@t) ((lambda (G35b3@ls/false) (if G35b3@ls/false (apply (lambda (G35b5@e) ((lambda (G35b7@t) (if (memv G35b7@t '(little)) (G2f05@bless ''little) (if (memv G35b7@t '(big)) (G2f05@bless ''big) (G303a@syntax-violation '#f '"endianness must be big or little" G35af@stx)))) (G3040@syntax->datum G35b5@e))) G35b3@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G35b1@t))) (G2f4f@syntax-dispatch G35b1@t '(_ any)))) G35af@stx))) (set! G2f29@identifier-syntax-macro (lambda (G35b9@stx) ((lambda (G35bb@t) ((lambda (G35bd@ls/false) (if G35bd@ls/false (apply (lambda (G35bf@expr) (G2f05@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35bf@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35bf@expr) '((syntax (e* ...)))))))))) G35bd@ls/false) ((lambda (G35c1@t) ((lambda (G35c3@ls/false) (if (and G35c3@ls/false (apply (lambda (G35c5@id1 G35c6@expr1 G35c7@id2 G35c8@expr2 G35c9@expr3) (and (G2d50@id? G35c5@id1) (G2d50@id? G35c7@id2) (G2d50@id? G35c8@expr2))) G35c3@ls/false)) (apply (lambda (G35cf@id1 G35d0@expr1 G35d1@id2 G35d2@expr2 G35d3@expr3) (G2f05@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35d0@expr1)) (list (list 'set! 'id G35d2@expr2) (list 'syntax G35d3@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35d0@expr1 '(e* ...))))))))) G35c3@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G35c1@t))) (G2f4f@syntax-dispatch G35c1@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35bb@t))) (G2f4f@syntax-dispatch G35bb@t '(_ any)))) G35b9@stx))) (set! G2f2b@do-macro (lambda (G35d9@stx) ((lambda (G35dc@bind) (begin (set! G35dc@bind (lambda (G35f3@x) ((lambda (G35f5@t) ((lambda (G35f7@ls/false) (if G35f7@ls/false (apply (lambda (G35f9@x G35fa@init) (list G35f9@x G35fa@init G35f9@x)) G35f7@ls/false) ((lambda (G35fd@t) ((lambda (G35ff@ls/false) (if G35ff@ls/false (apply (lambda (G3601@x G3602@init G3603@step) (list G3601@x G3602@init G3603@step)) G35ff@ls/false) ((lambda (G3607@t) ((lambda (G3609@ls/false) (if G3609@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid binding" G35d9@stx)) G3609@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3607@t))) (G2f4f@syntax-dispatch G3607@t '_))) G35fd@t))) (G2f4f@syntax-dispatch G35fd@t '(any any any)))) G35f5@t))) (G2f4f@syntax-dispatch G35f5@t '(any any)))) G35f3@x))) ((lambda (G35dd@t) ((lambda (G35df@ls/false) (if G35df@ls/false (apply (lambda (G35e1@binding* G35e2@test G35e3@expr* G35e4@command*) ((lambda (G35e9@t) ((lambda (G35eb@ls/false) (if G35eb@ls/false (apply (lambda (G35ed@x* G35ee@init* G35ef@step*) (if (G2d5a@valid-bound-ids? G35ed@x*) (G2f05@bless (list 'letrec (list (list 'loop (list 'lambda G35ed@x* (list 'if G35e2@test (cons 'begin (cons '(if #f #f) G35e3@expr*)) (cons 'begin (append G35e4@command* (list (cons 'loop G35ef@step*)))))))) (cons 'loop G35ee@init*))) (G303a@syntax-violation '#f '"invalid bindings" G35d9@stx))) G35eb@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G35e9@t))) (G2f4f@syntax-dispatch G35e9@t '#(each (any any any))))) (map G35dc@bind G35e1@binding*))) G35df@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G35dd@t))) (G2f4f@syntax-dispatch G35dd@t '(_ each-any (any . each-any) . each-any)))) G35d9@stx))) '#f))) (set! G2f2d@let*-macro (lambda (G360b@stx) ((lambda (G360d@t) ((lambda (G360f@ls/false) (if (and G360f@ls/false (apply (lambda (G3611@lhs* G3612@rhs* G3613@b G3614@b*) (for-all G2d50@id? G3611@lhs*)) G360f@ls/false)) (apply (lambda (G3619@lhs* G361a@rhs* G361b@b G361c@b*) (G2f05@bless ((letrec ((G3621@f (lambda (G3623@x*) (if (null? G3623@x*) (cons 'let (cons '() (cons G361b@b G361c@b*))) (list 'let (list (car G3623@x*)) (G3621@f (cdr G3623@x*))))))) G3621@f) (map list G3619@lhs* G361a@rhs*)))) G360f@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G360d@t))) (G2f4f@syntax-dispatch G360d@t '(_ #(each (any any)) any . each-any)))) G360b@stx))) (set! G2f2f@or-macro (lambda (G3625@stx) ((lambda (G3627@t) ((lambda (G3629@ls/false) (if G3629@ls/false (apply (lambda () '#f) G3629@ls/false) ((lambda (G362b@t) ((lambda (G362d@ls/false) (if G362d@ls/false (apply (lambda (G362f@e G3630@e*) (G2f05@bless ((letrec ((G3633@f (lambda (G3635@e G3636@e*) (if (null? G3636@e*) (list 'begin '#f G3635@e) (list 'let (list (list 't G3635@e)) (list 'if 't 't (G3633@f (car G3636@e*) (cdr G3636@e*)))))))) G3633@f) G362f@e G3630@e*))) G362d@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G362b@t))) (G2f4f@syntax-dispatch G362b@t '(_ any . each-any)))) G3627@t))) (G2f4f@syntax-dispatch G3627@t '(_)))) G3625@stx))) (set! G2f31@and-macro (lambda (G3639@stx) ((lambda (G363b@t) ((lambda (G363d@ls/false) (if G363d@ls/false (apply (lambda () '#t) G363d@ls/false) ((lambda (G363f@t) ((lambda (G3641@ls/false) (if G3641@ls/false (apply (lambda (G3643@e G3644@e*) (G2f05@bless ((letrec ((G3647@f (lambda (G3649@e G364a@e*) (if (null? G364a@e*) (list 'begin '#f G3649@e) (cons 'if (cons G3649@e (cons (G3647@f (car G364a@e*) (cdr G364a@e*)) '(#f)))))))) G3647@f) G3643@e G3644@e*))) G3641@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G363f@t))) (G2f4f@syntax-dispatch G363f@t '(_ any . each-any)))) G363b@t))) (G2f4f@syntax-dispatch G363b@t '(_)))) G3639@stx))) (set! G2f33@cond-macro (lambda (G364d@stx) ((lambda (G364f@t) ((lambda (G3651@ls/false) (if G3651@ls/false (apply (lambda (G3653@cls G3654@cls*) (G2f05@bless ((letrec ((G3657@f (lambda (G3659@cls G365a@cls*) (if (null? G365a@cls*) ((lambda (G365d@t) ((lambda (G365f@ls/false) (if G365f@ls/false (apply (lambda (G3661@e G3662@e*) (cons 'begin (cons G3661@e G3662@e*))) G365f@ls/false) ((lambda (G3665@t) ((lambda (G3667@ls/false) (if G3667@ls/false (apply (lambda (G3669@e G366a@p) (list 'let (list (list 't G3669@e)) (list 'if 't (cons G366a@p '(t))))) G3667@ls/false) ((lambda (G366d@t) ((lambda (G366f@ls/false) (if G366f@ls/false (apply (lambda (G3671@e) (cons 'or (cons G3671@e '((if #f #f))))) G366f@ls/false) ((lambda (G3673@t) ((lambda (G3675@ls/false) (if G3675@ls/false (apply (lambda (G3677@e G3678@e*) (list 'if G3677@e (cons 'begin G3678@e*))) G3675@ls/false) ((lambda (G367b@t) ((lambda (G367d@ls/false) (if G367d@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid last clause" G364d@stx)) G367d@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G367b@t))) (G2f4f@syntax-dispatch G367b@t '_))) G3673@t))) (G2f4f@syntax-dispatch G3673@t '(any . each-any)))) G366d@t))) (G2f4f@syntax-dispatch G366d@t '(any)))) G3665@t))) (G2f4f@syntax-dispatch G3665@t '(any #(scheme-id =>) any)))) G365d@t))) (G2f4f@syntax-dispatch G365d@t '(#(scheme-id else) any . each-any)))) G3659@cls) ((lambda (G367f@t) ((lambda (G3681@ls/false) (if G3681@ls/false (apply (lambda (G3683@e G3684@e*) (G303a@syntax-violation '#f '"incorrect position of keyword else" G364d@stx)) G3681@ls/false) ((lambda (G3687@t) ((lambda (G3689@ls/false) (if G3689@ls/false (apply (lambda (G368b@e G368c@p) (list 'let (list (list 't G368b@e)) (list 'if 't (cons G368c@p '(t)) (G3657@f (car G365a@cls*) (cdr G365a@cls*))))) G3689@ls/false) ((lambda (G368f@t) ((lambda (G3691@ls/false) (if G3691@ls/false (apply (lambda (G3693@e) (list 'or G3693@e (G3657@f (car G365a@cls*) (cdr G365a@cls*)))) G3691@ls/false) ((lambda (G3695@t) ((lambda (G3697@ls/false) (if G3697@ls/false (apply (lambda (G3699@e G369a@e*) (list 'if G3699@e (cons 'begin G369a@e*) (G3657@f (car G365a@cls*) (cdr G365a@cls*)))) G3697@ls/false) ((lambda (G369d@t) ((lambda (G369f@ls/false) (if G369f@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid last clause" G364d@stx)) G369f@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G369d@t))) (G2f4f@syntax-dispatch G369d@t '_))) G3695@t))) (G2f4f@syntax-dispatch G3695@t '(any . each-any)))) G368f@t))) (G2f4f@syntax-dispatch G368f@t '(any)))) G3687@t))) (G2f4f@syntax-dispatch G3687@t '(any #(scheme-id =>) any)))) G367f@t))) (G2f4f@syntax-dispatch G367f@t '(#(scheme-id else) any . each-any)))) G3659@cls))))) G3657@f) G3653@cls G3654@cls*))) G3651@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G364f@t))) (G2f4f@syntax-dispatch G364f@t '(_ any . each-any)))) G364d@stx))) (set! G2f35@do-include (lambda (G36a1@stx G36a2@id G36a3@filename) ((lambda (G36a7@filename) (begin (if (not (and (string? G36a7@filename) (G2d50@id? G36a2@id))) (G303a@syntax-violation '#f '"invalid syntax" G36a1@stx) (void)) (cons (G2f05@bless 'begin) (with-input-from-file G36a7@filename (lambda () ((letrec ((G36a9@f (lambda (G36ab@ls) ((lambda (G36ad@x) (if (eof-object? G36ad@x) (reverse G36ab@ls) (G36a9@f (cons (G2d2e@datum->stx G36a2@id G36ad@x) G36ab@ls)))) (G28df@G2808@read-annotated))))) G36a9@f) '())))))) (G2d66@stx->datum G36a3@filename)))) (set! G2f37@include-macro (lambda (G36af@e) ((lambda (G36b1@t) ((lambda (G36b3@ls/false) (if G36b3@ls/false (apply (lambda (G36b5@id G36b6@filename) (G2f35@do-include G36af@e G36b5@id G36b6@filename)) G36b3@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G36b1@t))) (G2f4f@syntax-dispatch G36b1@t '(any any)))) G36af@e))) (set! G2f39@include-into-macro (lambda (G36b9@e) ((lambda (G36bb@t) ((lambda (G36bd@ls/false) (if G36bd@ls/false (apply (lambda (G36bf@id G36c0@filename) (G2f35@do-include G36b9@e G36bf@id G36c0@filename)) G36bd@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G36bb@t))) (G2f4f@syntax-dispatch G36bb@t '(_ any any)))) G36b9@e))) (set! G2f3b@syntax-rules-macro (lambda (G36c3@e) ((lambda (G36c5@t) ((lambda (G36c7@ls/false) (if G36c7@ls/false (apply (lambda (G36c9@lits G36ca@pat* G36cb@tmp*) (begin (G2f55@verify-literals G36c9@lits G36c3@e) (G2f05@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36c9@lits (map (lambda (G36cf@pat G36d0@tmp) ((lambda (G36d3@t) ((lambda (G36d5@ls/false) (if G36d5@ls/false (apply (lambda (G36d7@rest) (list (cons 'g G36d7@rest) (list 'syntax G36d0@tmp))) G36d5@ls/false) ((lambda (G36d9@t) ((lambda (G36db@ls/false) (if G36db@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid syntax-rules pattern" G36c3@e G36cf@pat)) G36db@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G36d9@t))) (G2f4f@syntax-dispatch G36d9@t '_))) G36d3@t))) (G2f4f@syntax-dispatch G36d3@t '(_ . any)))) G36cf@pat)) G36ca@pat* G36cb@tmp*)))))))) G36c7@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G36c5@t))) (G2f4f@syntax-dispatch G36c5@t '(_ each-any . #(each (any any)))))) G36c3@e))) (set! G2f3d@quasiquote-macro ((lambda () ((lambda (G36de@datum G36fc@quasicons* G36fe@quasicons G3700@quasiappend G3702@quasivector G3704@vquasi G3706@quasi) (begin (set! G36de@datum (lambda (G37e1@x) (list (G2ed9@scheme-stx 'quote) (G2d38@mkstx G37e1@x '() '() '())))) (set! G36fc@quasicons* (lambda (G37d9@x G37da@y) ((letrec ((G37dd@f (lambda (G37df@x) (if (null? G37df@x) G37da@y (G36fe@quasicons (car G37df@x) (G37dd@f (cdr G37df@x))))))) G37dd@f) G37d9@x))) (set! G36fe@quasicons (lambda (G37b3@x G37b4@y) ((lambda (G37b7@t) ((lambda (G37b9@ls/false) (if G37b9@ls/false (apply (lambda (G37bb@dy) ((lambda (G37bd@t) ((lambda (G37bf@ls/false) (if G37bf@ls/false (apply (lambda (G37c1@dx) (list (G2ed9@scheme-stx 'quote) (cons G37c1@dx G37bb@dy))) G37bf@ls/false) ((lambda (G37c3@t) ((lambda (G37c5@ls/false) (if G37c5@ls/false (apply (lambda () ((lambda (G37c7@t) ((lambda (G37c9@ls/false) (if G37c9@ls/false (apply (lambda () (list (G2ed9@scheme-stx 'list) G37b3@x)) G37c9@ls/false) ((lambda (G37cb@t) ((lambda (G37cd@ls/false) (if G37cd@ls/false (apply (lambda () (list (G2ed9@scheme-stx 'cons) G37b3@x G37b4@y)) G37cd@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G37cb@t))) (G2f4f@syntax-dispatch G37cb@t '_))) G37c7@t))) (G2f4f@syntax-dispatch G37c7@t '()))) G37bb@dy)) G37c5@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G37c3@t))) (G2f4f@syntax-dispatch G37c3@t '_))) G37bd@t))) (G2f4f@syntax-dispatch G37bd@t '(#(scheme-id quote) any)))) G37b3@x)) G37b9@ls/false) ((lambda (G37cf@t) ((lambda (G37d1@ls/false) (if G37d1@ls/false (apply (lambda (G37d3@stuff) (cons* (G2ed9@scheme-stx 'list) G37b3@x G37d3@stuff)) G37d1@ls/false) ((lambda (G37d5@t) ((lambda (G37d7@ls/false) (if G37d7@ls/false (apply (lambda () (list (G2ed9@scheme-stx 'cons) G37b3@x G37b4@y)) G37d7@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G37d5@t))) (G2f4f@syntax-dispatch G37d5@t '_))) G37cf@t))) (G2f4f@syntax-dispatch G37cf@t '(#(scheme-id list) . each-any)))) G37b7@t))) (G2f4f@syntax-dispatch G37b7@t '(#(scheme-id quote) any)))) G37b4@y))) (set! G3700@quasiappend (lambda (G3799@x G379a@y) ((lambda (G379d@ls) (if (null? G379d@ls) (list (G2ed9@scheme-stx 'quote) '()) (if (null? (cdr G379d@ls)) (car G379d@ls) (cons* (G2ed9@scheme-stx 'append) G379d@ls)))) ((letrec ((G379f@f (lambda (G37a1@x) (if (null? G37a1@x) ((lambda (G37a3@t) ((lambda (G37a5@ls/false) (if G37a5@ls/false (apply (lambda () '()) G37a5@ls/false) ((lambda (G37a7@t) ((lambda (G37a9@ls/false) (if G37a9@ls/false (apply (lambda () (list G379a@y)) G37a9@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G37a7@t))) (G2f4f@syntax-dispatch G37a7@t '_))) G37a3@t))) (G2f4f@syntax-dispatch G37a3@t '(#(scheme-id quote) ())))) G379a@y) ((lambda (G37ab@t) ((lambda (G37ad@ls/false) (if G37ad@ls/false (apply (lambda () (G379f@f (cdr G37a1@x))) G37ad@ls/false) ((lambda (G37af@t) ((lambda (G37b1@ls/false) (if G37b1@ls/false (apply (lambda () (cons (car G37a1@x) (G379f@f (cdr G37a1@x)))) G37b1@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G37af@t))) (G2f4f@syntax-dispatch G37af@t '_))) G37ab@t))) (G2f4f@syntax-dispatch G37ab@t '(#(scheme-id quote) ())))) (car G37a1@x)))))) G379f@f) G3799@x)))) (set! G3702@quasivector (lambda (G3767@x) ((lambda (G3769@pat-x) ((lambda (G376b@t) ((lambda (G376d@ls/false) (if G376d@ls/false (apply (lambda (G376f@x*) (list (G2ed9@scheme-stx 'quote) (list->vector G376f@x*))) G376d@ls/false) ((lambda (G3771@t) ((lambda (G3773@ls/false) (if G3773@ls/false (apply (lambda () ((letrec ((G3775@f (lambda (G3777@x G3778@k) ((lambda (G377b@t) ((lambda (G377d@ls/false) (if G377d@ls/false (apply (lambda (G377f@x*) (G3778@k (map (lambda (G3781@x) (list (G2ed9@scheme-stx 'quote) G3781@x)) G377f@x*))) G377d@ls/false) ((lambda (G3783@t) ((lambda (G3785@ls/false) (if G3785@ls/false (apply (lambda (G3787@x*) (G3778@k G3787@x*)) G3785@ls/false) ((lambda (G3789@t) ((lambda (G378b@ls/false) (if G378b@ls/false (apply (lambda (G378d@x G378e@y) (G3775@f G378e@y (lambda (G3791@ls) (G3778@k (cons G378d@x G3791@ls))))) G378b@ls/false) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda () (list (G2ed9@scheme-stx 'list->vector) G3769@pat-x)) G3795@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3793@t))) (G2f4f@syntax-dispatch G3793@t '_))) G3789@t))) (G2f4f@syntax-dispatch G3789@t '(#(scheme-id cons) any any)))) G3783@t))) (G2f4f@syntax-dispatch G3783@t '(#(scheme-id list) . each-any)))) G377b@t))) (G2f4f@syntax-dispatch G377b@t '(#(scheme-id quote) each-any)))) G3777@x)))) G3775@f) G3767@x (lambda (G3797@ls) (cons* (G2ed9@scheme-stx 'vector) G3797@ls)))) G3773@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3771@t))) (G2f4f@syntax-dispatch G3771@t '_))) G376b@t))) (G2f4f@syntax-dispatch G376b@t '(#(scheme-id quote) each-any)))) G3769@pat-x)) G3767@x))) (set! G3704@vquasi (lambda (G3745@p G3746@lev) ((lambda (G3749@t) ((lambda (G374b@ls/false) (if G374b@ls/false (apply (lambda (G374d@p G374e@q) ((lambda (G3751@t) ((lambda (G3753@ls/false) (if G3753@ls/false (apply (lambda (G3755@p) (if (= G3746@lev '0) (G36fc@quasicons* G3755@p (G3704@vquasi G374e@q G3746@lev)) (G36fe@quasicons (G36fe@quasicons (G36de@datum 'unquote) (G3706@quasi G3755@p (- G3746@lev '1))) (G3704@vquasi G374e@q G3746@lev)))) G3753@ls/false) ((lambda (G3757@t) ((lambda (G3759@ls/false) (if G3759@ls/false (apply (lambda (G375b@p) (if (= G3746@lev '0) (G3700@quasiappend G375b@p (G3704@vquasi G374e@q G3746@lev)) (G36fe@quasicons (G36fe@quasicons (G36de@datum 'unquote-splicing) (G3706@quasi G375b@p (- G3746@lev '1))) (G3704@vquasi G374e@q G3746@lev)))) G3759@ls/false) ((lambda (G375d@t) ((lambda (G375f@ls/false) (if G375f@ls/false (apply (lambda (G3761@p) (G36fe@quasicons (G3706@quasi G3761@p G3746@lev) (G3704@vquasi G374e@q G3746@lev))) G375f@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G375d@t))) (G2f4f@syntax-dispatch G375d@t 'any))) G3757@t))) (G2f4f@syntax-dispatch G3757@t '(#(scheme-id unquote-splicing) . each-any)))) G3751@t))) (G2f4f@syntax-dispatch G3751@t '(#(scheme-id unquote) . each-any)))) G374d@p)) G374b@ls/false) ((lambda (G3763@t) ((lambda (G3765@ls/false) (if G3765@ls/false (apply (lambda () (list (G2ed9@scheme-stx 'quote) '())) G3765@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3763@t))) (G2f4f@syntax-dispatch G3763@t '()))) G3749@t))) (G2f4f@syntax-dispatch G3749@t '(any . any)))) G3745@p))) (set! G3706@quasi (lambda (G370f@p G3710@lev) ((lambda (G3713@t) ((lambda (G3715@ls/false) (if G3715@ls/false (apply (lambda (G3717@p) (if (= G3710@lev '0) G3717@p (G36fe@quasicons (G36de@datum 'unquote) (G3706@quasi (list G3717@p) (- G3710@lev '1))))) G3715@ls/false) ((lambda (G3719@t) ((lambda (G371b@ls/false) (if G371b@ls/false (apply (lambda (G371d@p G371e@q) (if (= G3710@lev '0) (G36fc@quasicons* G371d@p (G3706@quasi G371e@q G3710@lev)) (G36fe@quasicons (G36fe@quasicons (G36de@datum 'unquote) (G3706@quasi G371d@p (- G3710@lev '1))) (G3706@quasi G371e@q G3710@lev)))) G371b@ls/false) ((lambda (G3721@t) ((lambda (G3723@ls/false) (if G3723@ls/false (apply (lambda (G3725@p G3726@q) (if (= G3710@lev '0) (G3700@quasiappend G3725@p (G3706@quasi G3726@q G3710@lev)) (G36fe@quasicons (G36fe@quasicons (G36de@datum 'unquote-splicing) (G3706@quasi G3725@p (- G3710@lev '1))) (G3706@quasi G3726@q G3710@lev)))) G3723@ls/false) ((lambda (G3729@t) ((lambda (G372b@ls/false) (if G372b@ls/false (apply (lambda (G372d@p) (G36fe@quasicons (G36de@datum 'quasiquote) (G3706@quasi (list G372d@p) (+ G3710@lev '1)))) G372b@ls/false) ((lambda (G372f@t) ((lambda (G3731@ls/false) (if G3731@ls/false (apply (lambda (G3733@p G3734@q) (G36fe@quasicons (G3706@quasi G3733@p G3710@lev) (G3706@quasi G3734@q G3710@lev))) G3731@ls/false) ((lambda (G3737@t) ((lambda (G3739@ls/false) (if (and G3739@ls/false (apply (lambda (G373b@x) (not (G2d18@stx? G373b@x))) G3739@ls/false)) (apply (lambda (G373d@x) (G3702@quasivector (G3704@vquasi G373d@x G3710@lev))) G3739@ls/false) ((lambda (G373f@t) ((lambda (G3741@ls/false) (if G3741@ls/false (apply (lambda (G3743@p) (list (G2ed9@scheme-stx 'quote) G3743@p)) G3741@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G373f@t))) (G2f4f@syntax-dispatch G373f@t 'any))) G3737@t))) (G2f4f@syntax-dispatch G3737@t '#(vector each-any)))) G372f@t))) (G2f4f@syntax-dispatch G372f@t '(any . any)))) G3729@t))) (G2f4f@syntax-dispatch G3729@t '(#(scheme-id quasiquote) any)))) G3721@t))) (G2f4f@syntax-dispatch G3721@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3719@t))) (G2f4f@syntax-dispatch G3719@t '((#(scheme-id unquote) . each-any) . any)))) G3713@t))) (G2f4f@syntax-dispatch G3713@t '(#(scheme-id unquote) any)))) G370f@p))) (lambda (G3707@x) ((lambda (G3709@t) ((lambda (G370b@ls/false) (if G370b@ls/false (apply (lambda (G370d@e) (G3706@quasi G370d@e '0)) G370b@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3709@t))) (G2f4f@syntax-dispatch G3709@t '(_ any)))) G3707@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f3f@quasisyntax-macro ((lambda () ((lambda (G37e4@quasi) (begin (set! G37e4@quasi (lambda (G37fc@p G37fd@lev) ((lambda (G3800@t) ((lambda (G3802@ls/false) (if G3802@ls/false (apply (lambda (G3804@p) (if (= G37fd@lev '0) ((lambda (G3806@g) (values (list G3806@g) (list G3804@p) G3806@g)) (gensym)) (call-with-values (lambda () (G37e4@quasi G3804@p (- G37fd@lev '1))) (lambda (G380b@G3808 G380c@G3809 G380d@G380a) ((lambda (G3811@p G3812@rhs* G3813@lhs*) (values G3813@lhs* G3812@rhs* (list 'unsyntax G3811@p))) G380d@G380a G380c@G3809 G380b@G3808))))) G3802@ls/false) ((lambda (G3817@t) ((lambda (G3819@ls/false) (if (and G3819@ls/false (apply (lambda () (= G37fd@lev '0)) G3819@ls/false)) (apply (lambda () (G303a@syntax-violation '#f '"incorrect use of unsyntax" G37fc@p)) G3819@ls/false) ((lambda (G381b@t) ((lambda (G381d@ls/false) (if G381d@ls/false (apply (lambda (G381f@p* G3820@q) (call-with-values (lambda () (G37e4@quasi G3820@q G37fd@lev)) (lambda (G3826@G3823 G3827@G3824 G3828@G3825) ((lambda (G382c@q G382d@rhs* G382e@lhs*) (if (= G37fd@lev '0) ((lambda (G3832@g*) (values (append G3832@g* G382e@lhs*) (append G381f@p* G382d@rhs*) (append G3832@g* G382c@q))) (map (lambda (G3834@x) (gensym)) G381f@p*)) (call-with-values (lambda () (G37e4@quasi G381f@p* (- G37fd@lev '1))) (lambda (G3839@G3836 G383a@G3837 G383b@G3838) ((lambda (G383f@p* G3840@rhs2* G3841@lhs2*) (values (append G3841@lhs2* G382e@lhs*) (append G3840@rhs2* G382d@rhs*) (cons (cons 'unsyntax G383f@p*) G382c@q))) G383b@G3838 G383a@G3837 G3839@G3836))))) G3828@G3825 G3827@G3824 G3826@G3823)))) G381d@ls/false) ((lambda (G3845@t) ((lambda (G3847@ls/false) (if G3847@ls/false (apply (lambda (G3849@p* G384a@q) (call-with-values (lambda () (G37e4@quasi G384a@q G37fd@lev)) (lambda (G3850@G384d G3851@G384e G3852@G384f) ((lambda (G3856@q G3857@rhs* G3858@lhs*) (if (= G37fd@lev '0) ((lambda (G385c@g*) (values (append (map (lambda (G385e@g) (cons G385e@g '(...))) G385c@g*) G3858@lhs*) (append G3849@p* G3857@rhs*) (append (apply append (map (lambda (G3860@g) (cons G3860@g '(...))) G385c@g*)) G3856@q))) (map (lambda (G3862@x) (gensym)) G3849@p*)) (call-with-values (lambda () (G37e4@quasi G3849@p* (- G37fd@lev '1))) (lambda (G3867@G3864 G3868@G3865 G3869@G3866) ((lambda (G386d@p* G386e@rhs2* G386f@lhs2*) (values (append G386f@lhs2* G3858@lhs*) (append G386e@rhs2* G3857@rhs*) (cons (cons 'unsyntax-splicing G386d@p*) G3856@q))) G3869@G3866 G3868@G3865 G3867@G3864))))) G3852@G384f G3851@G384e G3850@G384d)))) G3847@ls/false) ((lambda (G3873@t) ((lambda (G3875@ls/false) (if (and G3875@ls/false (apply (lambda () (= G37fd@lev '0)) G3875@ls/false)) (apply (lambda () (G303a@syntax-violation '#f '"incorrect use of unsyntax-splicing" G37fc@p)) G3875@ls/false) ((lambda (G3877@t) ((lambda (G3879@ls/false) (if G3879@ls/false (apply (lambda (G387b@p) (call-with-values (lambda () (G37e4@quasi G387b@p (+ G37fd@lev '1))) (lambda (G3880@G387d G3881@G387e G3882@G387f) ((lambda (G3886@p G3887@rhs* G3888@lhs*) (values G3888@lhs* G3887@rhs* (list 'quasisyntax G3886@p))) G3882@G387f G3881@G387e G3880@G387d)))) G3879@ls/false) ((lambda (G388c@t) ((lambda (G388e@ls/false) (if G388e@ls/false (apply (lambda (G3890@p G3891@q) (call-with-values (lambda () (G37e4@quasi G3890@p G37fd@lev)) (lambda (G389a@G3894 G389b@G3895 G389c@G3896) (call-with-values (lambda () (G37e4@quasi G3891@q G37fd@lev)) (lambda (G38a0@G3897 G38a1@G3898 G38a2@G3899) ((lambda (G38a6@q G38a7@rhs2* G38a8@lhs2* G38a9@p G38aa@rhs* G38ab@lhs*) (values (append G38a8@lhs2* G38ab@lhs*) (append G38a7@rhs2* G38aa@rhs*) (cons G38a9@p G38a6@q))) G38a2@G3899 G38a1@G3898 G38a0@G3897 G389c@G3896 G389b@G3895 G389a@G3894)))))) G388e@ls/false) ((lambda (G38b2@t) ((lambda (G38b4@ls/false) (if G38b4@ls/false (apply (lambda (G38b6@x*) (call-with-values (lambda () (G37e4@quasi G38b6@x* G37fd@lev)) (lambda (G38bb@G38b8 G38bc@G38b9 G38bd@G38ba) ((lambda (G38c1@x* G38c2@rhs* G38c3@lhs*) (values G38c3@lhs* G38c2@rhs* (list->vector G38c1@x*))) G38bd@G38ba G38bc@G38b9 G38bb@G38b8)))) G38b4@ls/false) ((lambda (G38c7@t) ((lambda (G38c9@ls/false) (if G38c9@ls/false (apply (lambda () (values '() '() G37fc@p)) G38c9@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G38c7@t))) (G2f4f@syntax-dispatch G38c7@t '_))) G38b2@t))) (G2f4f@syntax-dispatch G38b2@t '#(vector each-any)))) G388c@t))) (G2f4f@syntax-dispatch G388c@t '(any . any)))) G3877@t))) (G2f4f@syntax-dispatch G3877@t '(#(scheme-id quasisyntax) any)))) G3873@t))) (G2f4f@syntax-dispatch G3873@t '#(scheme-id unsyntax-splicing)))) G3845@t))) (G2f4f@syntax-dispatch G3845@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G381b@t))) (G2f4f@syntax-dispatch G381b@t '((#(scheme-id unsyntax) . each-any) . any)))) G3817@t))) (G2f4f@syntax-dispatch G3817@t '#(scheme-id unsyntax)))) G3800@t))) (G2f4f@syntax-dispatch G3800@t '(#(scheme-id unsyntax) any)))) G37fc@p))) (lambda (G37e5@x) ((lambda (G37e7@t) ((lambda (G37e9@ls/false) (if G37e9@ls/false (apply (lambda (G37eb@e) (call-with-values (lambda () (G37e4@quasi G37eb@e '0)) (lambda (G37f0@G37ed G37f1@G37ee G37f2@G37ef) ((lambda (G37f6@v G37f7@rhs* G37f8@lhs*) (G2f05@bless (list 'syntax-case (cons 'list G37f7@rhs*) '() (list G37f8@lhs* (list 'syntax G37f6@v))))) G37f2@G37ef G37f1@G37ee G37f0@G37ed)))) G37e9@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G37e7@t))) (G2f4f@syntax-dispatch G37e7@t '(_ any)))) G37e5@x)))) '#f)))) (set! G2f41@define-struct-macro (lambda (G38cb@stx) (G303a@syntax-violation '#f '"define-struct not supported" G38cb@stx))) (set! G2f43@define-record-type-macro (lambda (G38cd@x) ((lambda (G38d0@id G38d2@get-record-name G38d4@get-record-constructor-name G38d6@get-record-predicate-name G38d8@get-clause G38da@foo-rtd-code G38dc@parent-rtd-code G38de@parent-rcd-code G38e0@foo-rcd-code G38e2@get-protocol-code G38e4@get-fields G38e6@get-mutator-indices G38e8@get-mutators G38ea@get-accessors G38ec@enumerate G38ee@do-define-record G38f0@verify-clauses) (begin (set! G38d0@id (lambda (G3ac3@ctxt . G3ac5@str*) (G303e@datum->syntax G3ac3@ctxt (string->symbol (apply string-append (map (lambda (G3ac7@x) (if (symbol? G3ac7@x) (symbol->string G3ac7@x) (if (string? G3ac7@x) G3ac7@x (assertion-violation 'define-record-type '"BUG")))) G3ac5@str*)))))) (set! G38d2@get-record-name (lambda (G3ab1@spec) ((lambda (G3ab3@t) ((lambda (G3ab5@ls/false) (if G3ab5@ls/false (apply (lambda (G3ab7@foo G3ab8@make-foo G3ab9@foo?) G3ab7@foo) G3ab5@ls/false) ((lambda (G3abd@t) ((lambda (G3abf@ls/false) (if G3abf@ls/false (apply (lambda (G3ac1@foo) G3ac1@foo) G3abf@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3abd@t))) (G2f4f@syntax-dispatch G3abd@t 'any))) G3ab3@t))) (G2f4f@syntax-dispatch G3ab3@t '(any any any)))) G3ab1@spec))) (set! G38d4@get-record-constructor-name (lambda (G3a9d@spec) ((lambda (G3a9f@t) ((lambda (G3aa1@ls/false) (if G3aa1@ls/false (apply (lambda (G3aa3@foo G3aa4@make-foo G3aa5@foo?) G3aa4@make-foo) G3aa1@ls/false) ((lambda (G3aa9@t) ((lambda (G3aab@ls/false) (if (and G3aab@ls/false (apply (lambda (G3aad@foo) (G2d50@id? G3aad@foo)) G3aab@ls/false)) (apply (lambda (G3aaf@foo) (G38d0@id G3aaf@foo '"make-" (G2d66@stx->datum G3aaf@foo))) G3aab@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3aa9@t))) (G2f4f@syntax-dispatch G3aa9@t 'any))) G3a9f@t))) (G2f4f@syntax-dispatch G3a9f@t '(any any any)))) G3a9d@spec))) (set! G38d6@get-record-predicate-name (lambda (G3a89@spec) ((lambda (G3a8b@t) ((lambda (G3a8d@ls/false) (if G3a8d@ls/false (apply (lambda (G3a8f@foo G3a90@make-foo G3a91@foo?) G3a91@foo?) G3a8d@ls/false) ((lambda (G3a95@t) ((lambda (G3a97@ls/false) (if (and G3a97@ls/false (apply (lambda (G3a99@foo) (G2d50@id? G3a99@foo)) G3a97@ls/false)) (apply (lambda (G3a9b@foo) (G38d0@id G3a9b@foo (G2d66@stx->datum G3a9b@foo) '"?")) G3a97@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a95@t))) (G2f4f@syntax-dispatch G3a95@t 'any))) G3a8b@t))) (G2f4f@syntax-dispatch G3a8b@t '(any any any)))) G3a89@spec))) (set! G38d8@get-clause (lambda (G3a77@id G3a78@ls) ((lambda (G3a7b@t) ((lambda (G3a7d@ls/false) (if G3a7d@ls/false (apply (lambda () '#f) G3a7d@ls/false) ((lambda (G3a7f@t) ((lambda (G3a81@ls/false) (if G3a81@ls/false (apply (lambda (G3a83@x G3a84@rest G3a85@ls) (if (G2d58@free-id=? (G2f05@bless G3a77@id) G3a83@x) (cons G3a83@x G3a84@rest) (G38d8@get-clause G3a77@id G3a85@ls))) G3a81@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a7f@t))) (G2f4f@syntax-dispatch G3a7f@t '((any . any) . any)))) G3a7b@t))) (G2f4f@syntax-dispatch G3a7b@t '()))) G3a78@ls))) (set! G38da@foo-rtd-code (lambda (G3a25@name G3a26@clause* G3a27@parent-rtd-code) ((lambda (G3a2c@convert-field-spec*) (begin (set! G3a2c@convert-field-spec* (lambda (G3a5d@ls) (list->vector (map (lambda (G3a5f@x) ((lambda (G3a61@t) ((lambda (G3a63@ls/false) (if G3a63@ls/false (apply (lambda (G3a65@name G3a66@rest) (list 'mutable G3a65@name)) G3a63@ls/false) ((lambda (G3a69@t) ((lambda (G3a6b@ls/false) (if G3a6b@ls/false (apply (lambda (G3a6d@name G3a6e@rest) (list 'immutable G3a6d@name)) G3a6b@ls/false) ((lambda (G3a71@t) ((lambda (G3a73@ls/false) (if G3a73@ls/false (apply (lambda (G3a75@name) (list 'immutable G3a75@name)) G3a73@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a71@t))) (G2f4f@syntax-dispatch G3a71@t 'any))) G3a69@t))) (G2f4f@syntax-dispatch G3a69@t '(#(scheme-id immutable) any . any)))) G3a61@t))) (G2f4f@syntax-dispatch G3a61@t '(#(scheme-id mutable) any . any)))) G3a5f@x)) G3a5d@ls)))) ((lambda (G3a2d@uid-code G3a2e@sealed? G3a2f@opaque? G3a30@fields) (G2f05@bless (list 'make-record-type-descriptor (list 'quote G3a25@name) G3a27@parent-rtd-code G3a2d@uid-code G3a2e@sealed? G3a2f@opaque? G3a30@fields))) ((lambda (G3a35@t) ((lambda (G3a37@ls/false) (if G3a37@ls/false (apply (lambda () (list 'quote (gensym))) G3a37@ls/false) ((lambda (G3a39@t) ((lambda (G3a3b@ls/false) (if G3a3b@ls/false (apply (lambda (G3a3d@uid) (list 'quote G3a3d@uid)) G3a3b@ls/false) ((lambda (G3a3f@t) ((lambda (G3a41@ls/false) (if G3a41@ls/false (apply (lambda () '#f) G3a41@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a3f@t))) (G2f4f@syntax-dispatch G3a3f@t '_))) G3a39@t))) (G2f4f@syntax-dispatch G3a39@t '(_ any)))) G3a35@t))) (G2f4f@syntax-dispatch G3a35@t '(_)))) (G38d8@get-clause 'nongenerative G3a26@clause*)) ((lambda (G3a43@t) ((lambda (G3a45@ls/false) (if G3a45@ls/false (apply (lambda () '#t) G3a45@ls/false) ((lambda (G3a47@t) ((lambda (G3a49@ls/false) (if G3a49@ls/false (apply (lambda () '#f) G3a49@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a47@t))) (G2f4f@syntax-dispatch G3a47@t '_))) G3a43@t))) (G2f4f@syntax-dispatch G3a43@t '(_ #(atom #t))))) (G38d8@get-clause 'sealed G3a26@clause*)) ((lambda (G3a4b@t) ((lambda (G3a4d@ls/false) (if G3a4d@ls/false (apply (lambda () '#t) G3a4d@ls/false) ((lambda (G3a4f@t) ((lambda (G3a51@ls/false) (if G3a51@ls/false (apply (lambda () '#f) G3a51@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a4f@t))) (G2f4f@syntax-dispatch G3a4f@t '_))) G3a4b@t))) (G2f4f@syntax-dispatch G3a4b@t '(_ #(atom #t))))) (G38d8@get-clause 'opaque G3a26@clause*)) ((lambda (G3a53@t) ((lambda (G3a55@ls/false) (if G3a55@ls/false (apply (lambda (G3a57@field-spec*) (list 'quote (G3a2c@convert-field-spec* G3a57@field-spec*))) G3a55@ls/false) ((lambda (G3a59@t) ((lambda (G3a5b@ls/false) (if G3a5b@ls/false (apply (lambda () ''#()) G3a5b@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a59@t))) (G2f4f@syntax-dispatch G3a59@t '_))) G3a53@t))) (G2f4f@syntax-dispatch G3a53@t '(_ . each-any)))) (G38d8@get-clause 'fields G3a26@clause*))))) '#f))) (set! G38dc@parent-rtd-code (lambda (G3a0d@clause*) ((lambda (G3a0f@t) ((lambda (G3a11@ls/false) (if G3a11@ls/false (apply (lambda (G3a13@name) (list 'record-type-descriptor G3a13@name)) G3a11@ls/false) ((lambda (G3a15@t) ((lambda (G3a17@ls/false) (if G3a17@ls/false (apply (lambda () ((lambda (G3a19@t) ((lambda (G3a1b@ls/false) (if G3a1b@ls/false (apply (lambda (G3a1d@rtd G3a1e@rcd) G3a1d@rtd) G3a1b@ls/false) ((lambda (G3a21@t) ((lambda (G3a23@ls/false) (if G3a23@ls/false (apply (lambda () '#f) G3a23@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a21@t))) (G2f4f@syntax-dispatch G3a21@t '#(atom #f)))) G3a19@t))) (G2f4f@syntax-dispatch G3a19@t '(_ any any)))) (G38d8@get-clause 'parent-rtd G3a0d@clause*))) G3a17@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a15@t))) (G2f4f@syntax-dispatch G3a15@t '#(atom #f)))) G3a0f@t))) (G2f4f@syntax-dispatch G3a0f@t '(_ any)))) (G38d8@get-clause 'parent G3a0d@clause*)))) (set! G38de@parent-rcd-code (lambda (G39f5@clause*) ((lambda (G39f7@t) ((lambda (G39f9@ls/false) (if G39f9@ls/false (apply (lambda (G39fb@name) (list 'record-constructor-descriptor G39fb@name)) G39f9@ls/false) ((lambda (G39fd@t) ((lambda (G39ff@ls/false) (if G39ff@ls/false (apply (lambda () ((lambda (G3a01@t) ((lambda (G3a03@ls/false) (if G3a03@ls/false (apply (lambda (G3a05@rtd G3a06@rcd) G3a06@rcd) G3a03@ls/false) ((lambda (G3a09@t) ((lambda (G3a0b@ls/false) (if G3a0b@ls/false (apply (lambda () '#f) G3a0b@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3a09@t))) (G2f4f@syntax-dispatch G3a09@t '#(atom #f)))) G3a01@t))) (G2f4f@syntax-dispatch G3a01@t '(_ any any)))) (G38d8@get-clause 'parent-rtd G39f5@clause*))) G39ff@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G39fd@t))) (G2f4f@syntax-dispatch G39fd@t '#(atom #f)))) G39f7@t))) (G2f4f@syntax-dispatch G39f7@t '(_ any)))) (G38d8@get-clause 'parent G39f5@clause*)))) (set! G38e0@foo-rcd-code (lambda (G39ed@clause* G39ee@foo-rtd G39ef@protocol G39f0@parent-rcd-code) (list 'make-record-constructor-descriptor G39ee@foo-rtd G39f0@parent-rcd-code G39ef@protocol))) (set! G38e2@get-protocol-code (lambda (G39e1@clause*) ((lambda (G39e3@t) ((lambda (G39e5@ls/false) (if G39e5@ls/false (apply (lambda (G39e7@expr) G39e7@expr) G39e5@ls/false) ((lambda (G39e9@t) ((lambda (G39eb@ls/false) (if G39eb@ls/false (apply (lambda () '#f) G39eb@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G39e9@t))) (G2f4f@syntax-dispatch G39e9@t '_))) G39e3@t))) (G2f4f@syntax-dispatch G39e3@t '(_ any)))) (G38d8@get-clause 'protocol G39e1@clause*)))) (set! G38e4@get-fields (lambda (G39cf@clause*) ((lambda (G39d1@t) ((lambda (G39d3@ls/false) (if G39d3@ls/false (apply (lambda () '()) G39d3@ls/false) ((lambda (G39d5@t) ((lambda (G39d7@ls/false) (if G39d7@ls/false (apply (lambda (G39d9@f*) G39d9@f*) G39d7@ls/false) ((lambda (G39db@t) ((lambda (G39dd@ls/false) (if G39dd@ls/false (apply (lambda (G39df@rest) (G38e4@get-fields G39df@rest)) G39dd@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G39db@t))) (G2f4f@syntax-dispatch G39db@t '(_ . any)))) G39d5@t))) (G2f4f@syntax-dispatch G39d5@t '((#(scheme-id fields) . each-any) . _)))) G39d1@t))) (G2f4f@syntax-dispatch G39d1@t '()))) G39cf@clause*))) (set! G38e6@get-mutator-indices (lambda (G39b7@fields) ((letrec ((G39b9@f (lambda (G39bb@fields G39bc@i) ((lambda (G39bf@t) ((lambda (G39c1@ls/false) (if G39c1@ls/false (apply (lambda () '()) G39c1@ls/false) ((lambda (G39c3@t) ((lambda (G39c5@ls/false) (if G39c5@ls/false (apply (lambda (G39c7@rest) (cons G39bc@i (G39b9@f G39c7@rest (+ G39bc@i '1)))) G39c5@ls/false) ((lambda (G39c9@t) ((lambda (G39cb@ls/false) (if G39cb@ls/false (apply (lambda (G39cd@rest) (G39b9@f G39cd@rest (+ G39bc@i '1))) G39cb@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G39c9@t))) (G2f4f@syntax-dispatch G39c9@t '(_ . any)))) G39c3@t))) (G2f4f@syntax-dispatch G39c3@t '((#(scheme-id mutable) . _) . any)))) G39bf@t))) (G2f4f@syntax-dispatch G39bf@t '()))) G39bb@fields)))) G39b9@f) G39b7@fields '0))) (set! G38e8@get-mutators (lambda (G398d@foo G398e@fields) ((lambda (G3992@gen-name) (begin (set! G3992@gen-name (lambda (G39b5@x) (G303e@datum->syntax G398d@foo (string->symbol (string-append (symbol->string (G3040@syntax->datum G398d@foo)) '"-" (symbol->string (G3040@syntax->datum G39b5@x)) '"-set!"))))) ((letrec ((G3993@f (lambda (G3995@fields) ((lambda (G3997@t) ((lambda (G3999@ls/false) (if G3999@ls/false (apply (lambda () '()) G3999@ls/false) ((lambda (G399b@t) ((lambda (G399d@ls/false) (if G399d@ls/false (apply (lambda (G399f@name G39a0@accessor G39a1@mutator G39a2@rest) (cons G39a1@mutator (G3993@f G39a2@rest))) G399d@ls/false) ((lambda (G39a7@t) ((lambda (G39a9@ls/false) (if G39a9@ls/false (apply (lambda (G39ab@name G39ac@rest) (cons (G3992@gen-name G39ab@name) (G3993@f G39ac@rest))) G39a9@ls/false) ((lambda (G39af@t) ((lambda (G39b1@ls/false) (if G39b1@ls/false (apply (lambda (G39b3@rest) (G3993@f G39b3@rest)) G39b1@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G39af@t))) (G2f4f@syntax-dispatch G39af@t '(_ . any)))) G39a7@t))) (G2f4f@syntax-dispatch G39a7@t '((#(scheme-id mutable) any) . any)))) G399b@t))) (G2f4f@syntax-dispatch G399b@t '((#(scheme-id mutable) any any any) . any)))) G3997@t))) (G2f4f@syntax-dispatch G3997@t '()))) G3995@fields)))) G3993@f) G398e@fields))) '#f))) (set! G38ea@get-accessors (lambda (G3949@foo G394a@fields) ((lambda (G394e@gen-name) (begin (set! G394e@gen-name (lambda (G398b@x) (G303e@datum->syntax G3949@foo (string->symbol (string-append (symbol->string (G3040@syntax->datum G3949@foo)) '"-" (symbol->string (G3040@syntax->datum G398b@x))))))) (map (lambda (G394f@field) ((lambda (G3951@t) ((lambda (G3953@ls/false) (if (and G3953@ls/false (apply (lambda (G3955@name G3956@accessor G3957@mutator) (G2d50@id? G3956@accessor)) G3953@ls/false)) (apply (lambda (G395b@name G395c@accessor G395d@mutator) G395c@accessor) G3953@ls/false) ((lambda (G3961@t) ((lambda (G3963@ls/false) (if (and G3963@ls/false (apply (lambda (G3965@name G3966@accessor) (G2d50@id? G3966@accessor)) G3963@ls/false)) (apply (lambda (G3969@name G396a@accessor) G396a@accessor) G3963@ls/false) ((lambda (G396d@t) ((lambda (G396f@ls/false) (if (and G396f@ls/false (apply (lambda (G3971@name) (G2d50@id? G3971@name)) G396f@ls/false)) (apply (lambda (G3973@name) (G394e@gen-name G3973@name)) G396f@ls/false) ((lambda (G3975@t) ((lambda (G3977@ls/false) (if (and G3977@ls/false (apply (lambda (G3979@name) (G2d50@id? G3979@name)) G3977@ls/false)) (apply (lambda (G397b@name) (G394e@gen-name G397b@name)) G3977@ls/false) ((lambda (G397d@t) ((lambda (G397f@ls/false) (if (and G397f@ls/false (apply (lambda (G3981@name) (G2d50@id? G3981@name)) G397f@ls/false)) (apply (lambda (G3983@name) (G394e@gen-name G3983@name)) G397f@ls/false) ((lambda (G3985@t) ((lambda (G3987@ls/false) (if G3987@ls/false (apply (lambda (G3989@others) (G303a@syntax-violation '#f '"invalid field spec" G394f@field)) G3987@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3985@t))) (G2f4f@syntax-dispatch G3985@t 'any))) G397d@t))) (G2f4f@syntax-dispatch G397d@t 'any))) G3975@t))) (G2f4f@syntax-dispatch G3975@t '(#(scheme-id immutable) any)))) G396d@t))) (G2f4f@syntax-dispatch G396d@t '(#(scheme-id mutable) any)))) G3961@t))) (G2f4f@syntax-dispatch G3961@t '(#(scheme-id immutable) any any)))) G3951@t))) (G2f4f@syntax-dispatch G3951@t '(#(scheme-id mutable) any any any)))) G394f@field)) G394a@fields))) '#f))) (set! G38ec@enumerate (lambda (G3941@ls) ((letrec ((G3943@f (lambda (G3945@ls G3946@i) (if (null? G3945@ls) '() (cons G3946@i (G3943@f (cdr G3945@ls) (+ G3946@i '1))))))) G3943@f) G3941@ls '0))) (set! G38ee@do-define-record (lambda (G3919@namespec G391a@clause*) ((lambda (G391d@foo) ((lambda (G391f@foo-rtd) ((lambda (G3921@foo-rcd) ((lambda (G3923@protocol) ((lambda (G3925@make-foo) ((lambda (G3927@fields) ((lambda (G3929@idx*) ((lambda (G392b@foo-x*) ((lambda (G392d@set-foo-x!*) ((lambda (G392f@set-foo-idx*) ((lambda (G3931@foo?) ((lambda (G3933@foo-rtd-code) ((lambda (G3935@foo-rcd-code) ((lambda (G3937@protocol-code) ((lambda () (G2f05@bless (cons 'begin (cons (list 'define G391f@foo-rtd G3933@foo-rtd-code) (cons (list 'define G3923@protocol G3937@protocol-code) (cons (list 'define G3921@foo-rcd G3935@foo-rcd-code) (cons (list 'define-syntax G391d@foo (list 'list ''$rtd (list 'syntax G391f@foo-rtd) (list 'syntax G3921@foo-rcd))) (cons (list 'define G3931@foo? (list 'record-predicate G391f@foo-rtd)) (cons (list 'define G3925@make-foo (list 'record-constructor G3921@foo-rcd)) (append (map (lambda (G3939@foo-x G393a@idx) (list 'define G3939@foo-x (list 'record-accessor G391f@foo-rtd G393a@idx))) G392b@foo-x* G3929@idx*) (map (lambda (G393d@set-foo-x! G393e@idx) (list 'define G393d@set-foo-x! (list 'record-mutator G391f@foo-rtd G393e@idx))) G392d@set-foo-x!* G392f@set-foo-idx*))))))))))))) (G38e2@get-protocol-code G391a@clause*))) (G38e0@foo-rcd-code G391a@clause* G391f@foo-rtd G3923@protocol (G38de@parent-rcd-code G391a@clause*)))) (G38da@foo-rtd-code G391d@foo G391a@clause* (G38dc@parent-rtd-code G391a@clause*)))) (G38d6@get-record-predicate-name G3919@namespec))) (G38e6@get-mutator-indices G3927@fields))) (G38e8@get-mutators G391d@foo G3927@fields))) (G38ea@get-accessors G391d@foo G3927@fields))) (G38ec@enumerate G3927@fields))) (G38e4@get-fields G391a@clause*))) (G38d4@get-record-constructor-name G3919@namespec))) (gensym))) (gensym))) (gensym))) (G38d2@get-record-name G3919@namespec)))) (set! G38f0@verify-clauses (lambda (G38f9@x G38fa@cls*) ((lambda (G38fe@valid-kwds G3900@free-id-member?) (begin (set! G38fe@valid-kwds (map G2f05@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3900@free-id-member? (lambda (G3915@x G3916@ls) (and (pair? G3916@ls) (or (G2d58@free-id=? G3915@x (car G3916@ls)) (G3900@free-id-member? G3915@x (cdr G3916@ls)))))) ((letrec ((G3901@f (lambda (G3903@cls* G3904@seen*) (if (not (null? G3903@cls*)) ((lambda (G3907@t) ((lambda (G3909@ls/false) (if G3909@ls/false (apply (lambda (G390b@kwd G390c@rest) (if (or (not (G2d50@id? G390b@kwd)) (not (G3900@free-id-member? G390b@kwd G38fe@valid-kwds))) (G303a@syntax-violation '#f '"not a valid define-record-type keyword" G390b@kwd) (if (G2d5e@bound-id-member? G390b@kwd G3904@seen*) (G303a@syntax-violation '#f '"duplicate use of keyword " G38f9@x G390b@kwd) (G3901@f (cdr G3903@cls*) (cons G390b@kwd G3904@seen*))))) G3909@ls/false) ((lambda (G390f@t) ((lambda (G3911@ls/false) (if G3911@ls/false (apply (lambda (G3913@cls) (G303a@syntax-violation '#f '"malformed define-record-type clause" G3913@cls)) G3911@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G390f@t))) (G2f4f@syntax-dispatch G390f@t 'any))) G3907@t))) (G2f4f@syntax-dispatch G3907@t '(any . any)))) (car G3903@cls*)) (void))))) G3901@f) G38fa@cls* '()))) '#f '#f))) ((lambda (G38f1@t) ((lambda (G38f3@ls/false) (if G38f3@ls/false (apply (lambda (G38f5@namespec G38f6@clause*) (begin (G38f0@verify-clauses G38cd@x G38f6@clause*) (G38ee@do-define-record G38f5@namespec G38f6@clause*))) G38f3@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G38f1@t))) (G2f4f@syntax-dispatch G38f1@t '(_ any . each-any)))) G38cd@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f45@define-condition-type-macro (lambda (G3ac9@x) ((lambda (G3acc@mkname) (begin (set! G3acc@mkname (lambda (G3af9@name G3afa@suffix) (G303e@datum->syntax G3af9@name (string->symbol (string-append (symbol->string (G3040@syntax->datum G3af9@name)) G3afa@suffix))))) ((lambda (G3acd@t) ((lambda (G3acf@ls/false) (if (and G3acf@ls/false (apply (lambda (G3ad1@ctxt G3ad2@name G3ad3@super G3ad4@constructor G3ad5@predicate G3ad6@field* G3ad7@accessor*) (and (G2d50@id? G3ad2@name) (G2d50@id? G3ad3@super) (G2d50@id? G3ad4@constructor) (G2d50@id? G3ad5@predicate) (for-all G2d50@id? G3ad6@field*) (for-all G2d50@id? G3ad7@accessor*))) G3acf@ls/false)) (apply (lambda (G3adf@ctxt G3ae0@name G3ae1@super G3ae2@constructor G3ae3@predicate G3ae4@field* G3ae5@accessor*) ((lambda (G3aed@aux-accessor*) (G2f05@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3ae0@name G3ae2@constructor (gensym)) (cons (list 'parent G3ae1@super) (cons (cons 'fields (map (lambda (G3aef@field G3af0@aux) (list 'immutable G3aef@field G3af0@aux)) G3ae4@field* G3aed@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3ae3@predicate (list 'condition-predicate (list 'record-type-descriptor G3ae0@name))) (map (lambda (G3af3@accessor G3af4@aux) (list 'define G3af3@accessor (list 'condition-accessor (list 'record-type-descriptor G3ae0@name) G3af4@aux))) G3ae5@accessor* G3aed@aux-accessor*)))))) (map (lambda (G3af7@x) (gensym)) G3ae5@accessor*))) G3acf@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3acd@t))) (G2f4f@syntax-dispatch G3acd@t '(any any any any any . #(each (any any)))))) G3ac9@x))) '#f))) (set! G2f47@incorrect-usage-macro (lambda (G3afd@e) (G303a@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3afd@e))) (set! G2f49@parameterize-macro (lambda (G3aff@e) ((lambda (G3b01@t) ((lambda (G3b03@ls/false) (if G3b03@ls/false (apply (lambda (G3b05@b G3b06@b*) (G2f05@bless (cons 'let (cons '() (cons G3b05@b G3b06@b*))))) G3b03@ls/false) ((lambda (G3b09@t) ((lambda (G3b0b@ls/false) (if G3b0b@ls/false (apply (lambda (G3b0d@olhs* G3b0e@orhs* G3b0f@b G3b10@b*) ((lambda (G3b15@lhs* G3b16@rhs*) (G2f05@bless (cons (list 'lambda (append G3b15@lhs* G3b16@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b19@lhs G3b1a@rhs) (list 'let (list (list 't (list G3b19@lhs))) (list G3b19@lhs G3b1a@rhs) (cons 'set! (cons G3b1a@rhs '(t))))) G3b15@lhs* G3b16@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b0f@b G3b10@b*))) '(swap)))))) (append G3b0d@olhs* G3b0e@orhs*)))) (G3028@generate-temporaries G3b0d@olhs*) (G3028@generate-temporaries G3b0e@orhs*))) G3b0b@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3b09@t))) (G2f4f@syntax-dispatch G3b09@t '(_ #(each (any any)) any . each-any)))) G3b01@t))) (G2f4f@syntax-dispatch G3b01@t '(_ () any . each-any)))) G3aff@e))) (set! G2f4b@foreign-call-transformer (lambda (G3b1d@e G3b1e@r G3b1f@mr) ((lambda (G3b23@t) ((lambda (G3b25@ls/false) (if G3b25@ls/false (apply (lambda (G3b27@name G3b28@arg*) (cons 'foreign-call (cons (G2f73@chi-expr G3b27@name G3b1e@r G3b1f@mr) (G2f6f@chi-expr* G3b28@arg* G3b1e@r G3b1f@mr)))) G3b25@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3b23@t))) (G2f4f@syntax-dispatch G3b23@t '(_ any . each-any)))) G3b1d@e))) (set! G2f4d@convert-pattern (lambda (G3b2b@pattern G3b2c@keys) ((lambda (G3b30@cvt* G3b32@cvt) (begin (set! G3b30@cvt* (lambda (G3bc1@p* G3bc2@n G3bc3@ids) (if (null? G3bc1@p*) (values '() G3bc3@ids) (call-with-values (lambda () (G3b30@cvt* (cdr G3bc1@p*) G3bc2@n G3bc3@ids)) (lambda (G3bc9@G3bc7 G3bca@G3bc8) ((lambda (G3bcd@ids G3bce@y) (call-with-values (lambda () (G3b32@cvt (car G3bc1@p*) G3bc2@n G3bcd@ids)) (lambda (G3bd3@G3bd1 G3bd4@G3bd2) ((lambda (G3bd7@ids G3bd8@x) (values (cons G3bd8@x G3bce@y) G3bd7@ids)) G3bd4@G3bd2 G3bd3@G3bd1)))) G3bca@G3bc8 G3bc9@G3bc7)))))) (set! G3b32@cvt (lambda (G3b33@p G3b34@n G3b35@ids) ((lambda (G3b39@t) ((lambda (G3b3b@ls/false) (if (and G3b3b@ls/false (apply (lambda (G3b3d@id) (G2d50@id? G3b3d@id)) G3b3b@ls/false)) (apply (lambda (G3b3f@id) (if (G2d5e@bound-id-member? G3b33@p G3b2c@keys) (values (vector 'free-id G3b33@p) G3b35@ids) (if (G2d58@free-id=? G3b33@p (G2ed9@scheme-stx '_)) (values '_ G3b35@ids) (values 'any (cons (cons G3b33@p G3b34@n) G3b35@ids))))) G3b3b@ls/false) ((lambda (G3b41@t) ((lambda (G3b43@ls/false) (if (and G3b43@ls/false (apply (lambda (G3b45@p G3b46@dots) (G2f51@ellipsis? G3b46@dots)) G3b43@ls/false)) (apply (lambda (G3b49@p G3b4a@dots) (call-with-values (lambda () (G3b32@cvt G3b49@p (+ G3b34@n '1) G3b35@ids)) (lambda (G3b4f@G3b4d G3b50@G3b4e) ((lambda (G3b53@ids G3b54@p) (values (if (eq? G3b54@p 'any) 'each-any (vector 'each G3b54@p)) G3b53@ids)) G3b50@G3b4e G3b4f@G3b4d)))) G3b43@ls/false) ((lambda (G3b57@t) ((lambda (G3b59@ls/false) (if (and G3b59@ls/false (apply (lambda (G3b5b@x G3b5c@dots G3b5d@ys G3b5e@z) (G2f51@ellipsis? G3b5c@dots)) G3b59@ls/false)) (apply (lambda (G3b63@x G3b64@dots G3b65@ys G3b66@z) (call-with-values (lambda () (G3b32@cvt G3b66@z G3b34@n G3b35@ids)) (lambda (G3b6d@G3b6b G3b6e@G3b6c) ((lambda (G3b71@ids G3b72@z) (call-with-values (lambda () (G3b30@cvt* G3b65@ys G3b34@n G3b71@ids)) (lambda (G3b77@G3b75 G3b78@G3b76) ((lambda (G3b7b@ids G3b7c@ys) (call-with-values (lambda () (G3b32@cvt G3b63@x (+ G3b34@n '1) G3b7b@ids)) (lambda (G3b81@G3b7f G3b82@G3b80) ((lambda (G3b85@ids G3b86@x) (values (vector 'each+ G3b86@x (reverse G3b7c@ys) G3b72@z) G3b85@ids)) G3b82@G3b80 G3b81@G3b7f)))) G3b78@G3b76 G3b77@G3b75)))) G3b6e@G3b6c G3b6d@G3b6b)))) G3b59@ls/false) ((lambda (G3b89@t) ((lambda (G3b8b@ls/false) (if G3b8b@ls/false (apply (lambda (G3b8d@x G3b8e@y) (call-with-values (lambda () (G3b32@cvt G3b8e@y G3b34@n G3b35@ids)) (lambda (G3b93@G3b91 G3b94@G3b92) ((lambda (G3b97@ids G3b98@y) (call-with-values (lambda () (G3b32@cvt G3b8d@x G3b34@n G3b97@ids)) (lambda (G3b9d@G3b9b G3b9e@G3b9c) ((lambda (G3ba1@ids G3ba2@x) (values (cons G3ba2@x G3b98@y) G3ba1@ids)) G3b9e@G3b9c G3b9d@G3b9b)))) G3b94@G3b92 G3b93@G3b91)))) G3b8b@ls/false) ((lambda (G3ba5@t) ((lambda (G3ba7@ls/false) (if G3ba7@ls/false (apply (lambda () (values '() G3b35@ids)) G3ba7@ls/false) ((lambda (G3ba9@t) ((lambda (G3bab@ls/false) (if (and G3bab@ls/false (apply (lambda (G3bad@p) (not (G2d18@stx? G3bad@p))) G3bab@ls/false)) (apply (lambda (G3baf@p) (call-with-values (lambda () (G3b32@cvt G3baf@p G3b34@n G3b35@ids)) (lambda (G3bb3@G3bb1 G3bb4@G3bb2) ((lambda (G3bb7@ids G3bb8@p) (values (vector 'vector G3bb8@p) G3bb7@ids)) G3bb4@G3bb2 G3bb3@G3bb1)))) G3bab@ls/false) ((lambda (G3bbb@t) ((lambda (G3bbd@ls/false) (if G3bbd@ls/false (apply (lambda (G3bbf@datum) (values (vector 'atom (G2d66@stx->datum G3bbf@datum)) G3b35@ids)) G3bbd@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3bbb@t))) (G2f4f@syntax-dispatch G3bbb@t 'any))) G3ba9@t))) (G2f4f@syntax-dispatch G3ba9@t '#(vector each-any)))) G3ba5@t))) (G2f4f@syntax-dispatch G3ba5@t '()))) G3b89@t))) (G2f4f@syntax-dispatch G3b89@t '(any . any)))) G3b57@t))) (G2f4f@syntax-dispatch G3b57@t '(any any . #(each+ any () any))))) G3b41@t))) (G2f4f@syntax-dispatch G3b41@t '(any any)))) G3b39@t))) (G2f4f@syntax-dispatch G3b39@t 'any))) G3b33@p))) (G3b32@cvt G3b2b@pattern '0 '()))) '#f '#f))) (set! G2f4f@syntax-dispatch ((lambda () ((lambda (G3bdc@stx^ G3bde@match-each G3be0@match-each+ G3be2@match-each-any G3be4@match-empty G3be6@combine G3be8@match* G3bea@match) (begin (set! G3bdc@stx^ (lambda (G3ca5@e G3ca6@m* G3ca7@s* G3ca8@ae*) (if (and (null? G3ca6@m*) (null? G3ca7@s*) (null? G3ca8@ae*)) G3ca5@e (G2d38@mkstx G3ca5@e G3ca6@m* G3ca7@s* G3ca8@ae*)))) (set! G3bde@match-each (lambda (G3c88@e G3c89@p G3c8a@m* G3c8b@s* G3c8c@ae*) (if (pair? G3c88@e) ((lambda (G3c92@first) (and G3c92@first ((lambda (G3c94@rest) (and G3c94@rest (cons G3c92@first G3c94@rest))) (G3bde@match-each (cdr G3c88@e) G3c89@p G3c8a@m* G3c8b@s* G3c8c@ae*)))) (G3bea@match (car G3c88@e) G3c89@p G3c8a@m* G3c8b@s* G3c8c@ae* '())) (if (null? G3c88@e) '() (if (G2d18@stx? G3c88@e) (and (not (G2cca@top-marked? G3c8a@m*)) (call-with-values (lambda () (G2d36@join-wraps G3c8a@m* G3c8b@s* G3c8c@ae* G3c88@e)) (lambda (G3c99@G3c96 G3c9a@G3c97 G3c9b@G3c98) ((lambda (G3c9f@ae* G3ca0@s* G3ca1@m*) (G3bde@match-each (G2d1c@stx-expr G3c88@e) G3c89@p G3ca1@m* G3ca0@s* G3c9f@ae*)) G3c9b@G3c98 G3c9a@G3c97 G3c99@G3c96)))) (if (G28e1@G280c@annotation? G3c88@e) (G3bde@match-each (G28e3@G2810@annotation-expression G3c88@e) G3c89@p G3c8a@m* G3c8b@s* G3c8c@ae*) '#f)))))) (set! G3be0@match-each+ (lambda (G3c4e@e G3c4f@x-pat G3c50@y-pat G3c51@z-pat G3c52@m* G3c53@s* G3c54@ae* G3c55@r) ((letrec ((G3c5e@f (lambda (G3c60@e G3c61@m* G3c62@s* G3c63@ae*) (if (pair? G3c60@e) (call-with-values (lambda () (G3c5e@f (cdr G3c60@e) G3c61@m* G3c62@s* G3c63@ae*)) (lambda (G3c6b@G3c68 G3c6c@G3c69 G3c6d@G3c6a) ((lambda (G3c71@r G3c72@y-pat G3c73@xr*) (if G3c71@r (if (null? G3c72@y-pat) ((lambda (G3c77@xr) (if G3c77@xr (values (cons G3c77@xr G3c73@xr*) G3c72@y-pat G3c71@r) (values '#f '#f '#f))) (G3bea@match (car G3c60@e) G3c4f@x-pat G3c61@m* G3c62@s* G3c63@ae* '())) (values '() (cdr G3c72@y-pat) (G3bea@match (car G3c60@e) (car G3c72@y-pat) G3c61@m* G3c62@s* G3c63@ae* G3c71@r))) (values '#f '#f '#f))) G3c6d@G3c6a G3c6c@G3c69 G3c6b@G3c68))) (if (G2d18@stx? G3c60@e) (if (G2cca@top-marked? G3c61@m*) (values '() G3c50@y-pat (G3bea@match G3c60@e G3c51@z-pat G3c61@m* G3c62@s* G3c63@ae* G3c55@r)) (call-with-values (lambda () (G2d36@join-wraps G3c61@m* G3c62@s* G3c63@ae* G3c60@e)) (lambda (G3c7c@G3c79 G3c7d@G3c7a G3c7e@G3c7b) ((lambda (G3c82@ae* G3c83@s* G3c84@m*) (G3c5e@f (G2d1c@stx-expr G3c60@e) G3c84@m* G3c83@s* G3c82@ae*)) G3c7e@G3c7b G3c7d@G3c7a G3c7c@G3c79)))) (if (G28e1@G280c@annotation? G3c60@e) (G3c5e@f (G28e3@G2810@annotation-expression G3c60@e) G3c61@m* G3c62@s* G3c63@ae*) (values '() G3c50@y-pat (G3bea@match G3c60@e G3c51@z-pat G3c61@m* G3c62@s* G3c63@ae* G3c55@r)))))))) G3c5e@f) G3c4e@e G3c52@m* G3c53@s* G3c54@ae*))) (set! G3be2@match-each-any (lambda (G3c35@e G3c36@m* G3c37@s* G3c38@ae*) (if (pair? G3c35@e) ((lambda (G3c3d@l) (and G3c3d@l (cons (G3bdc@stx^ (car G3c35@e) G3c36@m* G3c37@s* G3c38@ae*) G3c3d@l))) (G3be2@match-each-any (cdr G3c35@e) G3c36@m* G3c37@s* G3c38@ae*)) (if (null? G3c35@e) '() (if (G2d18@stx? G3c35@e) (and (not (G2cca@top-marked? G3c36@m*)) (call-with-values (lambda () (G2d36@join-wraps G3c36@m* G3c37@s* G3c38@ae* G3c35@e)) (lambda (G3c42@G3c3f G3c43@G3c40 G3c44@G3c41) ((lambda (G3c48@ae* G3c49@s* G3c4a@m*) (G3be2@match-each-any (G2d1c@stx-expr G3c35@e) G3c4a@m* G3c49@s* G3c48@ae*)) G3c44@G3c41 G3c43@G3c40 G3c42@G3c3f)))) (if (G28e1@G280c@annotation? G3c35@e) (G3be2@match-each-any (G28e3@G2810@annotation-expression G3c35@e) G3c36@m* G3c37@s* G3c38@ae*) '#f)))))) (set! G3be4@match-empty (lambda (G3c2f@p G3c30@r) (if (null? G3c2f@p) G3c30@r (if (eq? G3c2f@p '_) G3c30@r (if (eq? G3c2f@p 'any) (cons '() G3c30@r) (if (pair? G3c2f@p) (G3be4@match-empty (car G3c2f@p) (G3be4@match-empty (cdr G3c2f@p) G3c30@r)) (if (eq? G3c2f@p 'each-any) (cons '() G3c30@r) ((lambda (G3c33@t) (if (memv G3c33@t '(each)) (G3be4@match-empty (vector-ref G3c2f@p '1) G3c30@r) (if (memv G3c33@t '(each+)) (G3be4@match-empty (vector-ref G3c2f@p '1) (G3be4@match-empty (reverse (vector-ref G3c2f@p '2)) (G3be4@match-empty (vector-ref G3c2f@p '3) G3c30@r))) (if (memv G3c33@t '(free-id atom)) G3c30@r (if (memv G3c33@t '(scheme-id atom)) G3c30@r (if (memv G3c33@t '(vector)) (G3be4@match-empty (vector-ref G3c2f@p '1) G3c30@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c2f@p))))))) (vector-ref G3c2f@p '0))))))))) (set! G3be6@combine (lambda (G3c2b@r* G3c2c@r) (if (null? (car G3c2b@r*)) G3c2c@r (cons (map car G3c2b@r*) (G3be6@combine (map cdr G3c2b@r*) G3c2c@r))))) (set! G3be8@match* (lambda (G3c0a@e G3c0b@p G3c0c@m* G3c0d@s* G3c0e@ae* G3c0f@r) (if (null? G3c0b@p) (and (null? G3c0a@e) G3c0f@r) (if (pair? G3c0b@p) (and (pair? G3c0a@e) (G3bea@match (car G3c0a@e) (car G3c0b@p) G3c0c@m* G3c0d@s* G3c0e@ae* (G3bea@match (cdr G3c0a@e) (cdr G3c0b@p) G3c0c@m* G3c0d@s* G3c0e@ae* G3c0f@r))) (if (eq? G3c0b@p 'each-any) ((lambda (G3c16@l) (and G3c16@l (cons G3c16@l G3c0f@r))) (G3be2@match-each-any G3c0a@e G3c0c@m* G3c0d@s* G3c0e@ae*)) ((lambda (G3c18@t) (if (memv G3c18@t '(each)) (if (null? G3c0a@e) (G3be4@match-empty (vector-ref G3c0b@p '1) G3c0f@r) ((lambda (G3c1a@r*) (and G3c1a@r* (G3be6@combine G3c1a@r* G3c0f@r))) (G3bde@match-each G3c0a@e (vector-ref G3c0b@p '1) G3c0c@m* G3c0d@s* G3c0e@ae*))) (if (memv G3c18@t '(free-id)) (and (symbol? G3c0a@e) (G2cca@top-marked? G3c0c@m*) (G2d58@free-id=? (G3bdc@stx^ G3c0a@e G3c0c@m* G3c0d@s* G3c0e@ae*) (vector-ref G3c0b@p '1)) G3c0f@r) (if (memv G3c18@t '(scheme-id)) (and (symbol? G3c0a@e) (G2cca@top-marked? G3c0c@m*) (G2d58@free-id=? (G3bdc@stx^ G3c0a@e G3c0c@m* G3c0d@s* G3c0e@ae*) (G2ed9@scheme-stx (vector-ref G3c0b@p '1))) G3c0f@r) (if (memv G3c18@t '(each+)) (call-with-values (lambda () (G3be0@match-each+ G3c0a@e (vector-ref G3c0b@p '1) (vector-ref G3c0b@p '2) (vector-ref G3c0b@p '3) G3c0c@m* G3c0d@s* G3c0e@ae* G3c0f@r)) (lambda (G3c1f@G3c1c G3c20@G3c1d G3c21@G3c1e) ((lambda (G3c25@r G3c26@y-pat G3c27@xr*) (and G3c25@r (null? G3c26@y-pat) (if (null? G3c27@xr*) (G3be4@match-empty (vector-ref G3c0b@p '1) G3c25@r) (G3be6@combine G3c27@xr* G3c25@r)))) G3c21@G3c1e G3c20@G3c1d G3c1f@G3c1c))) (if (memv G3c18@t '(atom)) (and (fast-equal? (vector-ref G3c0b@p '1) (G2d64@strip G3c0a@e G3c0c@m*)) G3c0f@r) (if (memv G3c18@t '(vector)) (and (vector? G3c0a@e) (G3bea@match (vector->list G3c0a@e) (vector-ref G3c0b@p '1) G3c0c@m* G3c0d@s* G3c0e@ae* G3c0f@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c0b@p)))))))) (vector-ref G3c0b@p '0))))))) (set! G3bea@match (lambda (G3bef@e G3bf0@p G3bf1@m* G3bf2@s* G3bf3@ae* G3bf4@r) (if (not G3bf4@r) '#f (if (eq? G3bf0@p '_) G3bf4@r (if (eq? G3bf0@p 'any) (cons (G3bdc@stx^ G3bef@e G3bf1@m* G3bf2@s* G3bf3@ae*) G3bf4@r) (if (G2d18@stx? G3bef@e) (and (not (G2cca@top-marked? G3bf1@m*)) (call-with-values (lambda () (G2d36@join-wraps G3bf1@m* G3bf2@s* G3bf3@ae* G3bef@e)) (lambda (G3bfe@G3bfb G3bff@G3bfc G3c00@G3bfd) ((lambda (G3c04@ae* G3c05@s* G3c06@m*) (G3bea@match (G2d1c@stx-expr G3bef@e) G3bf0@p G3c06@m* G3c05@s* G3c04@ae* G3bf4@r)) G3c00@G3bfd G3bff@G3bfc G3bfe@G3bfb)))) (if (G28e1@G280c@annotation? G3bef@e) (G3bea@match (G28e3@G2810@annotation-expression G3bef@e) G3bf0@p G3bf1@m* G3bf2@s* G3bf3@ae* G3bf4@r) (G3be8@match* G3bef@e G3bf0@p G3bf1@m* G3bf2@s* G3bf3@ae* G3bf4@r)))))))) (lambda (G3beb@e G3bec@p) (G3bea@match G3beb@e G3bec@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f51@ellipsis? (lambda (G3cad@x) (and (G2d50@id? G3cad@x) (G2d58@free-id=? G3cad@x (G2ed9@scheme-stx '...))))) (set! G2f53@underscore? (lambda (G3caf@x) (and (G2d50@id? G3caf@x) (G2d58@free-id=? G3caf@x (G2ed9@scheme-stx '_))))) (set! G2f55@verify-literals (lambda (G3cb1@lits G3cb2@expr) (for-each (lambda (G3cb5@x) (if (or (not (G2d50@id? G3cb5@x)) (G2f51@ellipsis? G3cb5@x) (G2f53@underscore? G3cb5@x)) (G303a@syntax-violation '#f '"invalid literal" G3cb2@expr G3cb5@x) (void))) G3cb1@lits))) (set! G2f57@syntax-case-transformer ((lambda () ((lambda (G3cb8@build-dispatch-call G3cba@invalid-ids-error G3cbc@gen-clause G3cbe@gen-syntax-case) (begin (set! G3cb8@build-dispatch-call (lambda (G3d27@pvars G3d28@expr G3d29@y G3d2a@r G3d2b@mr) ((lambda (G3d31@ids G3d32@levels) ((lambda (G3d35@labels G3d36@new-vars) ((lambda (G3d39@body) (list '(primitive apply) (G2caa@G2be8@build-lambda '#f G3d36@new-vars G3d39@body) G3d29@y)) (G2f73@chi-expr (G2d3c@add-subst (G2d0b@make-full-rib G3d31@ids G3d35@labels) G3d28@expr) (append (map (lambda (G3d3b@label G3d3c@var G3d3d@level) (cons G3d3b@label (G2d70@make-binding 'syntax (cons G3d3c@var G3d3d@level)))) G3d35@labels G3d36@new-vars (map cdr G3d27@pvars)) G3d2a@r) G3d2b@mr))) (map G2cd0@gen-label G3d31@ids) (map G2ccc@gen-lexical G3d31@ids))) (map car G3d27@pvars) (map cdr G3d27@pvars)))) (set! G3cba@invalid-ids-error (lambda (G3d1b@id* G3d1c@e G3d1d@class) ((letrec ((G3d21@find (lambda (G3d23@id* G3d24@ok*) (if (null? G3d23@id*) (G303a@syntax-violation '#f '"invalid syntax" G3d1c@e) (if (G2d50@id? (car G3d23@id*)) (if (G2d5e@bound-id-member? (car G3d23@id*) G3d24@ok*) (G3036@syntax-error (car G3d23@id*) '"duplicate " G3d1d@class) (G3d21@find (cdr G3d23@id*) (cons (car G3d23@id*) G3d24@ok*))) (G3036@syntax-error (car G3d23@id*) '"invalid " G3d1d@class)))))) G3d21@find) G3d1b@id* '()))) (set! G3cbc@gen-clause (lambda (G3cf5@x G3cf6@keys G3cf7@clauses G3cf8@r G3cf9@mr G3cfa@pat G3cfb@fender G3cfc@expr) (call-with-values (lambda () (G2f4d@convert-pattern G3cfa@pat G3cf6@keys)) (lambda (G3d07@G3d05 G3d08@G3d06) ((lambda (G3d0b@pvars G3d0c@p) (if (not (G2d5c@distinct-bound-ids? (map car G3d0b@pvars))) (G3cba@invalid-ids-error (map car G3d0b@pvars) G3cfa@pat '"pattern variable") (if (not (for-all (lambda (G3d0f@x) (not (G2f51@ellipsis? (car G3d0f@x)))) G3d0b@pvars)) (G303a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3cfa@pat) ((lambda (G3d11@y) ((lambda (G3d13@test) ((lambda (G3d15@conseq) ((lambda (G3d17@altern) (list (G2caa@G2be8@build-lambda '#f (list G3d11@y) (list 'if G3d13@test G3d15@conseq G3d17@altern)) (list '(primitive syntax-dispatch) G3cf5@x (list 'quote G3d0c@p)))) (G3cbe@gen-syntax-case G3cf5@x G3cf6@keys G3cf7@clauses G3cf8@r G3cf9@mr))) (G3cb8@build-dispatch-call G3d0b@pvars G3cfc@expr G3d11@y G3cf8@r G3cf9@mr))) (if (eq? G3cfb@fender '#t) G3d11@y ((lambda (G3d19@call) (list 'if G3d11@y G3d19@call (list 'quote '#f))) (G3cb8@build-dispatch-call G3d0b@pvars G3cfb@fender G3d11@y G3cf8@r G3cf9@mr))))) (G2ccc@gen-lexical 'tmp))))) G3d08@G3d06 G3d07@G3d05))))) (set! G3cbe@gen-syntax-case (lambda (G3cd3@x G3cd4@keys G3cd5@clauses G3cd6@r G3cd7@mr) (if (null? G3cd5@clauses) (list '(primitive syntax-error) G3cd3@x) ((lambda (G3cdd@t) ((lambda (G3cdf@ls/false) (if G3cdf@ls/false (apply (lambda (G3ce1@pat G3ce2@expr) (if (and (G2d50@id? G3ce1@pat) (not (G2d5e@bound-id-member? G3ce1@pat G3cd4@keys)) (not (G2f51@ellipsis? G3ce1@pat))) (if (G2d58@free-id=? G3ce1@pat (G2ed9@scheme-stx '_)) (G2f73@chi-expr G3ce2@expr G3cd6@r G3cd7@mr) ((lambda (G3ce5@lab G3ce6@lex) ((lambda (G3ce9@body) (list (G2caa@G2be8@build-lambda '#f (list G3ce6@lex) G3ce9@body) G3cd3@x)) (G2f73@chi-expr (G2d3c@add-subst (G2d0b@make-full-rib (list G3ce1@pat) (list G3ce5@lab)) G3ce2@expr) (cons (cons G3ce5@lab (G2d70@make-binding 'syntax (cons G3ce6@lex '0))) G3cd6@r) G3cd7@mr))) (G2cd0@gen-label G3ce1@pat) (G2ccc@gen-lexical G3ce1@pat))) (G3cbc@gen-clause G3cd3@x G3cd4@keys (cdr G3cd5@clauses) G3cd6@r G3cd7@mr G3ce1@pat '#t G3ce2@expr))) G3cdf@ls/false) ((lambda (G3ceb@t) ((lambda (G3ced@ls/false) (if G3ced@ls/false (apply (lambda (G3cef@pat G3cf0@fender G3cf1@expr) (G3cbc@gen-clause G3cd3@x G3cd4@keys (cdr G3cd5@clauses) G3cd6@r G3cd7@mr G3cef@pat G3cf0@fender G3cf1@expr)) G3ced@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3ceb@t))) (G2f4f@syntax-dispatch G3ceb@t '(any any any)))) G3cdd@t))) (G2f4f@syntax-dispatch G3cdd@t '(any any)))) (car G3cd5@clauses))))) (lambda (G3cbf@e G3cc0@r G3cc1@mr) ((lambda (G3cc5@t) ((lambda (G3cc7@ls/false) (if G3cc7@ls/false (apply (lambda (G3cc9@expr G3cca@keys G3ccb@clauses) (begin (G2f55@verify-literals G3cca@keys G3cbf@e) ((lambda (G3ccf@x) ((lambda (G3cd1@body) (list (G2caa@G2be8@build-lambda '#f (list G3ccf@x) G3cd1@body) (G2f73@chi-expr G3cc9@expr G3cc0@r G3cc1@mr))) (G3cbe@gen-syntax-case G3ccf@x G3cca@keys G3ccb@clauses G3cc0@r G3cc1@mr))) (G2ccc@gen-lexical 'tmp)))) G3cc7@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3cc5@t))) (G2f4f@syntax-dispatch G3cc5@t '(_ any each-any . each-any)))) G3cbf@e)))) '#f '#f '#f '#f)))) (set! G2f59@ellipsis-map (lambda (G3d41@proc G3d42@ls . G3d45@ls*) ((lambda (G3d48@who) (begin (set! G3d48@who '...) (begin (if (not (list? G3d42@ls)) (assertion-violation G3d48@who '"not a list" G3d42@ls) (void)) (if (not (null? G3d45@ls*)) ((lambda (G3d49@n) (for-each (lambda (G3d4b@x) (begin (if (not (list? G3d4b@x)) (assertion-violation G3d48@who '"not a list" G3d4b@x) (void)) (if (not (= (length G3d4b@x) G3d49@n)) (assertion-violation G3d48@who '"length mismatch" G3d42@ls G3d4b@x) (void)))) G3d45@ls*)) (length G3d42@ls)) (void)) (apply map G3d41@proc G3d42@ls G3d45@ls*)))) '#f))) (set! G2f5b@syntax-transformer ((lambda () ((lambda (G3d4e@gen-syntax G3d50@gen-ref G3d52@gen-append G3d54@gen-mappend G3d56@gen-map G3d58@gen-cons G3d5a@gen-vector G3d5c@regen) (begin (set! G3d4e@gen-syntax (lambda (G3dc1@src G3dc2@e G3dc3@r G3dc4@maps G3dc5@ellipsis? G3dc6@vec?) ((lambda (G3dcd@t) ((lambda (G3dcf@ls/false) (if (and G3dcf@ls/false (apply (lambda (G3dd1@dots) (G3dc5@ellipsis? G3dd1@dots)) G3dcf@ls/false)) (apply (lambda (G3dd3@dots) (G303a@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc1@src)) G3dcf@ls/false) ((lambda (G3dd5@t) ((lambda (G3dd7@ls/false) (if (and G3dd7@ls/false (apply (lambda (G3dd9@id) (G2d50@id? G3dd9@id)) G3dd7@ls/false)) (apply (lambda (G3ddb@id) ((lambda (G3ddd@label) ((lambda (G3ddf@b) ((lambda () (if (eq? (G2d72@binding-type G3ddf@b) 'syntax) (call-with-values (lambda () ((lambda (G3de3@var.lev) (G3d50@gen-ref G3dc1@src (car G3de3@var.lev) (cdr G3de3@var.lev) G3dc4@maps)) (G2d74@binding-value G3ddf@b))) (lambda (G3de5@G3de1 G3de6@G3de2) ((lambda (G3de9@maps G3dea@var) (values (list 'ref G3dea@var) G3de9@maps)) G3de6@G3de2 G3de5@G3de1))) (values (list 'quote G3dc2@e) G3dc4@maps))))) (G2d6e@label->binding G3ddd@label G3dc3@r))) (G2d6a@id->label G3dc2@e))) G3dd7@ls/false) ((lambda (G3ded@t) ((lambda (G3def@ls/false) (if (and G3def@ls/false (apply (lambda (G3df1@dots G3df2@e) (G3dc5@ellipsis? G3df1@dots)) G3def@ls/false)) (apply (lambda (G3df5@dots G3df6@e) (if G3dc6@vec? (G303a@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc1@src) (G3d4e@gen-syntax G3dc1@src G3df6@e G3dc3@r G3dc4@maps (lambda (G3df9@x) '#f) '#f))) G3def@ls/false) ((lambda (G3dfb@t) ((lambda (G3dfd@ls/false) (if (and G3dfd@ls/false (apply (lambda (G3dff@x G3e00@dots G3e01@y) (G3dc5@ellipsis? G3e00@dots)) G3dfd@ls/false)) (apply (lambda (G3e05@x G3e06@dots G3e07@y) ((letrec ((G3e0b@f (lambda (G3e0d@y G3e0e@k) ((lambda (G3e11@t) ((lambda (G3e13@ls/false) (if G3e13@ls/false (apply (lambda () (G3e0e@k G3dc4@maps)) G3e13@ls/false) ((lambda (G3e15@t) ((lambda (G3e17@ls/false) (if (and G3e17@ls/false (apply (lambda (G3e19@dots G3e1a@y) (G3dc5@ellipsis? G3e19@dots)) G3e17@ls/false)) (apply (lambda (G3e1d@dots G3e1e@y) (G3e0b@f G3e1e@y (lambda (G3e21@maps) (call-with-values (lambda () (G3e0e@k (cons '() G3e21@maps))) (lambda (G3e25@G3e23 G3e26@G3e24) ((lambda (G3e29@maps G3e2a@x) (if (null? (car G3e29@maps)) (G303a@syntax-violation '#f '"extra ellipsis in syntax form" G3dc1@src) (values (G3d54@gen-mappend G3e2a@x (car G3e29@maps)) (cdr G3e29@maps)))) G3e26@G3e24 G3e25@G3e23)))))) G3e17@ls/false) ((lambda (G3e2d@t) ((lambda (G3e2f@ls/false) (if G3e2f@ls/false (apply (lambda () (call-with-values (lambda () (G3d4e@gen-syntax G3dc1@src G3e0d@y G3dc3@r G3dc4@maps G3dc5@ellipsis? G3dc6@vec?)) (lambda (G3e33@G3e31 G3e34@G3e32) ((lambda (G3e37@maps G3e38@y) (call-with-values (lambda () (G3e0e@k G3e37@maps)) (lambda (G3e3d@G3e3b G3e3e@G3e3c) ((lambda (G3e41@maps G3e42@x) (values (G3d52@gen-append G3e42@x G3e38@y) G3e41@maps)) G3e3e@G3e3c G3e3d@G3e3b)))) G3e34@G3e32 G3e33@G3e31)))) G3e2f@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3e2d@t))) (G2f4f@syntax-dispatch G3e2d@t '_))) G3e15@t))) (G2f4f@syntax-dispatch G3e15@t '(any . any)))) G3e11@t))) (G2f4f@syntax-dispatch G3e11@t '()))) G3e0d@y)))) G3e0b@f) G3e07@y (lambda (G3e45@maps) (call-with-values (lambda () (G3d4e@gen-syntax G3dc1@src G3e05@x G3dc3@r (cons '() G3e45@maps) G3dc5@ellipsis? '#f)) (lambda (G3e49@G3e47 G3e4a@G3e48) ((lambda (G3e4d@maps G3e4e@x) (if (null? (car G3e4d@maps)) (G303a@syntax-violation '#f '"extra ellipsis in syntax form" G3dc1@src) (values (G3d56@gen-map G3e4e@x (car G3e4d@maps)) (cdr G3e4d@maps)))) G3e4a@G3e48 G3e49@G3e47)))))) G3dfd@ls/false) ((lambda (G3e51@t) ((lambda (G3e53@ls/false) (if G3e53@ls/false (apply (lambda (G3e55@x G3e56@y) (call-with-values (lambda () (G3d4e@gen-syntax G3dc1@src G3e55@x G3dc3@r G3dc4@maps G3dc5@ellipsis? '#f)) (lambda (G3e5b@G3e59 G3e5c@G3e5a) ((lambda (G3e5f@maps G3e60@xnew) (call-with-values (lambda () (G3d4e@gen-syntax G3dc1@src G3e56@y G3dc3@r G3e5f@maps G3dc5@ellipsis? G3dc6@vec?)) (lambda (G3e65@G3e63 G3e66@G3e64) ((lambda (G3e69@maps G3e6a@ynew) (values (G3d58@gen-cons G3dc2@e G3e55@x G3e56@y G3e60@xnew G3e6a@ynew) G3e69@maps)) G3e66@G3e64 G3e65@G3e63)))) G3e5c@G3e5a G3e5b@G3e59)))) G3e53@ls/false) ((lambda (G3e6d@t) ((lambda (G3e6f@ls/false) (if G3e6f@ls/false (apply (lambda (G3e71@ls) (call-with-values (lambda () (G3d4e@gen-syntax G3dc1@src G3e71@ls G3dc3@r G3dc4@maps G3dc5@ellipsis? '#t)) (lambda (G3e75@G3e73 G3e76@G3e74) ((lambda (G3e79@maps G3e7a@lsnew) (values (G3d5a@gen-vector G3dc2@e G3e71@ls G3e7a@lsnew) G3e79@maps)) G3e76@G3e74 G3e75@G3e73)))) G3e6f@ls/false) ((lambda (G3e7d@t) ((lambda (G3e7f@ls/false) (if G3e7f@ls/false (apply (lambda () (values (list 'quote G3dc2@e) G3dc4@maps)) G3e7f@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3e7d@t))) (G2f4f@syntax-dispatch G3e7d@t '_))) G3e6d@t))) (G2f4f@syntax-dispatch G3e6d@t '#(vector each-any)))) G3e51@t))) (G2f4f@syntax-dispatch G3e51@t '(any . any)))) G3dfb@t))) (G2f4f@syntax-dispatch G3dfb@t '(any any . any)))) G3ded@t))) (G2f4f@syntax-dispatch G3ded@t '(any any)))) G3dd5@t))) (G2f4f@syntax-dispatch G3dd5@t 'any))) G3dcd@t))) (G2f4f@syntax-dispatch G3dcd@t 'any))) G3dc2@e))) (set! G3d50@gen-ref (lambda (G3da9@src G3daa@var G3dab@level G3dac@maps) (if (= G3dab@level '0) (values G3daa@var G3dac@maps) (if (null? G3dac@maps) (G303a@syntax-violation '#f '"missing ellipsis in syntax form" G3da9@src) (call-with-values (lambda () (G3d50@gen-ref G3da9@src G3daa@var (- G3dab@level '1) (cdr G3dac@maps))) (lambda (G3db3@G3db1 G3db4@G3db2) ((lambda (G3db7@outer-maps G3db8@outer-var) ((lambda (G3dbb@t) (if G3dbb@t ((lambda (G3dbd@b) (values (cdr G3dbd@b) G3dac@maps)) G3dbb@t) ((lambda (G3dbf@inner-var) (values G3dbf@inner-var (cons (cons (cons G3db8@outer-var G3dbf@inner-var) (car G3dac@maps)) G3db7@outer-maps))) (G2ccc@gen-lexical 'tmp)))) (assq G3db8@outer-var (car G3dac@maps)))) G3db4@G3db2 G3db3@G3db1))))))) (set! G3d52@gen-append (lambda (G3da5@x G3da6@y) (if (fast-equal? G3da6@y ''()) G3da5@x (list 'append G3da5@x G3da6@y)))) (set! G3d54@gen-mappend (lambda (G3da1@e G3da2@map-env) (list 'apply '(primitive append) (G3d56@gen-map G3da1@e G3da2@map-env)))) (set! G3d56@gen-map (lambda (G3d8f@e G3d90@map-env) ((lambda (G3d93@formals G3d94@actuals) (if (eq? (car G3d8f@e) 'ref) (car G3d94@actuals) (if (for-all (lambda (G3d97@x) (and (eq? (car G3d97@x) 'ref) (memq (cadr G3d97@x) G3d93@formals))) (cdr G3d8f@e)) ((lambda (G3d99@args) (cons 'map (cons (list 'primitive (car G3d8f@e)) G3d99@args))) (map ((lambda (G3d9b@r) (lambda (G3d9d@x) (cdr (assq (cadr G3d9d@x) G3d9b@r)))) (map cons G3d93@formals G3d94@actuals)) (cdr G3d8f@e))) (cons* 'map (list 'lambda G3d93@formals G3d8f@e) G3d94@actuals)))) (map cdr G3d90@map-env) (map (lambda (G3d9f@x) (list 'ref (car G3d9f@x))) G3d90@map-env)))) (set! G3d58@gen-cons (lambda (G3d7f@e G3d80@x G3d81@y G3d82@xnew G3d83@ynew) ((lambda (G3d89@t) (if (memv G3d89@t '(quote)) (if (eq? (car G3d82@xnew) 'quote) ((lambda (G3d8b@xnew G3d8c@ynew) (if (and (eq? G3d8b@xnew G3d80@x) (eq? G3d8c@ynew G3d81@y)) (list 'quote G3d7f@e) (list 'quote (cons G3d8b@xnew G3d8c@ynew)))) (cadr G3d82@xnew) (cadr G3d83@ynew)) (if (null? (cadr G3d83@ynew)) (list 'list G3d82@xnew) (list 'cons G3d82@xnew G3d83@ynew))) (if (memv G3d89@t '(list)) (cons 'list (cons G3d82@xnew (cdr G3d83@ynew))) (list 'cons G3d82@xnew G3d83@ynew)))) (car G3d83@ynew)))) (set! G3d5a@gen-vector (lambda (G3d79@e G3d7a@ls G3d7b@lsnew) (if (eq? (car G3d7b@lsnew) 'quote) (if (eq? (cadr G3d7b@lsnew) G3d7a@ls) (list 'quote G3d79@e) (list 'quote (list->vector (cadr G3d7b@lsnew)))) (if (eq? (car G3d7b@lsnew) 'list) (cons 'vector (cdr G3d7b@lsnew)) (list 'list->vector G3d7b@lsnew))))) (set! G3d5c@regen (lambda (G3d73@x) ((lambda (G3d75@t) (if (memv G3d75@t '(ref)) (cadr G3d73@x) (if (memv G3d75@t '(primitive)) (list 'primitive (cadr G3d73@x)) (if (memv G3d75@t '(quote)) (list 'quote (cadr G3d73@x)) (if (memv G3d75@t '(lambda)) (G2caa@G2be8@build-lambda '#f (cadr G3d73@x) (G3d5c@regen (caddr G3d73@x))) (if (memv G3d75@t '(map)) ((lambda (G3d77@ls) (cons '(primitive ellipsis-map) G3d77@ls)) (map G3d5c@regen (cdr G3d73@x))) (cons (list 'primitive (car G3d73@x)) (map G3d5c@regen (cdr G3d73@x))))))))) (car G3d73@x)))) (lambda (G3d5d@e G3d5e@r G3d5f@mr) ((lambda (G3d63@t) ((lambda (G3d65@ls/false) (if G3d65@ls/false (apply (lambda (G3d67@x) (call-with-values (lambda () (G3d4e@gen-syntax G3d5d@e G3d67@x G3d5e@r '() G2f51@ellipsis? '#f)) (lambda (G3d6b@G3d69 G3d6c@G3d6a) ((lambda (G3d6f@maps G3d70@e) (G3d5c@regen G3d70@e)) G3d6c@G3d6a G3d6b@G3d69)))) G3d65@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3d63@t))) (G2f4f@syntax-dispatch G3d63@t '(_ any)))) G3d5d@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f5d@core-macro-transformer (lambda (G3e81@name) ((lambda (G3e83@t) (if (memv G3e83@t '(quote)) G2eff@quote-transformer (if (memv G3e83@t '(lambda)) G2f03@lambda-transformer (if (memv G3e83@t '(case-lambda)) G2f01@case-lambda-transformer (if (memv G3e83@t '(letrec)) G2ee7@letrec-transformer (if (memv G3e83@t '(letrec*)) G2ee9@letrec*-transformer (if (memv G3e83@t '(if)) G2ef7@if-transformer (if (memv G3e83@t '(and)) G2ef9@and-transformer (if (memv G3e83@t '(or)) G2efb@or-transformer (if (memv G3e83@t '(foreign-call)) G2f4b@foreign-call-transformer (if (memv G3e83@t '(syntax-case)) G2f57@syntax-case-transformer (if (memv G3e83@t '(syntax)) G2f5b@syntax-transformer (if (memv G3e83@t '(type-descriptor)) G2eed@type-descriptor-transformer (if (memv G3e83@t '(record-type-descriptor)) G2eef@record-type-descriptor-transformer (if (memv G3e83@t '(record-constructor-descriptor)) G2ef1@record-constructor-descriptor-transformer (if (memv G3e83@t '(fluid-let-syntax)) G2eeb@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e81@name))))))))))))))))) G3e81@name))) (set! G2f5f@file-options-macro (lambda (G3e85@x) ((lambda (G3e88@valid-option?) (begin (set! G3e88@valid-option? (lambda (G3e91@x) (and (G2d50@id? G3e91@x) (memq (G2d52@id->sym G3e91@x) '(no-fail no-create no-truncate))))) ((lambda (G3e89@t) ((lambda (G3e8b@ls/false) (if (and G3e8b@ls/false (apply (lambda (G3e8d@opt*) (and (for-all G3e88@valid-option? G3e8d@opt*) (G28ed@G288e@file-options-spec (map G2d52@id->sym G3e8d@opt*)))) G3e8b@ls/false)) (apply (lambda (G3e8f@opt*) (G2f05@bless (list 'quote (G28ed@G288e@file-options-spec (map G2d52@id->sym G3e8f@opt*))))) G3e8b@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3e89@t))) (G2f4f@syntax-dispatch G3e89@t '(_ . each-any)))) G3e85@x))) '#f))) (set! G2f61@symbol-macro (lambda (G3e93@x G3e94@set) ((lambda (G3e97@t) ((lambda (G3e99@ls/false) (if (and G3e99@ls/false (apply (lambda (G3e9b@name) (and (G2d50@id? G3e9b@name) (memq (G2d52@id->sym G3e9b@name) G3e94@set))) G3e99@ls/false)) (apply (lambda (G3e9d@name) (G2f05@bless (list 'quote G3e9d@name))) G3e99@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3e97@t))) (G2f4f@syntax-dispatch G3e97@t '(_ any)))) G3e93@x))) (set! G2f63@macro-transformer (lambda (G3e9f@x) (if (procedure? G3e9f@x) G3e9f@x (if (symbol? G3e9f@x) ((lambda (G3ea1@t) (if (memv G3ea1@t '(define-record-type)) G2f43@define-record-type-macro (if (memv G3ea1@t '(define-struct)) G2f41@define-struct-macro (if (memv G3ea1@t '(include)) G2f37@include-macro (if (memv G3ea1@t '(cond)) G2f33@cond-macro (if (memv G3ea1@t '(let)) G2f0b@let-macro (if (memv G3ea1@t '(do)) G2f2b@do-macro (if (memv G3ea1@t '(or)) G2f2f@or-macro (if (memv G3ea1@t '(and)) G2f31@and-macro (if (memv G3ea1@t '(let*)) G2f2d@let*-macro (if (memv G3ea1@t '(let-values)) G2f0d@let-values-macro (if (memv G3ea1@t '(let*-values)) G2f0f@let*-values-macro (if (memv G3ea1@t '(syntax-rules)) G2f3b@syntax-rules-macro (if (memv G3ea1@t '(quasiquote)) G2f3d@quasiquote-macro (if (memv G3ea1@t '(quasisyntax)) G2f3f@quasisyntax-macro (if (memv G3ea1@t '(with-syntax)) G2f07@with-syntax-macro (if (memv G3ea1@t '(when)) G2ef3@when-macro (if (memv G3ea1@t '(unless)) G2ef5@unless-macro (if (memv G3ea1@t '(case)) G2efd@case-macro (if (memv G3ea1@t '(identifier-syntax)) G2f29@identifier-syntax-macro (if (memv G3ea1@t '(time)) G2f21@time-macro (if (memv G3ea1@t '(delay)) G2f23@delay-macro (if (memv G3ea1@t '(assert)) G2f25@assert-macro (if (memv G3ea1@t '(endianness)) G2f27@endianness-macro (if (memv G3ea1@t '(guard)) G2f1d@guard-macro (if (memv G3ea1@t '(define-enumeration)) G2f1f@define-enumeration-macro (if (memv G3ea1@t '(trace-lambda)) G2f11@trace-lambda-macro (if (memv G3ea1@t '(trace-define)) G2f13@trace-define-macro (if (memv G3ea1@t '(trace-define-syntax)) G2f15@trace-define-syntax-macro (if (memv G3ea1@t '(trace-let-syntax)) G2f19@trace-let-syntax-macro (if (memv G3ea1@t '(trace-letrec-syntax)) G2f1b@trace-letrec-syntax-macro (if (memv G3ea1@t '(define-condition-type)) G2f45@define-condition-type-macro (if (memv G3ea1@t '(parameterize)) G2f49@parameterize-macro (if (memv G3ea1@t '(include-into)) G2f39@include-into-macro (if (memv G3ea1@t '(eol-style)) (lambda (G3ea3@x) (G2f61@symbol-macro G3ea3@x '(none lf cr crlf nel crnel ls))) (if (memv G3ea1@t '(error-handling-mode)) (lambda (G3ea5@x) (G2f61@symbol-macro G3ea5@x '(ignore raise replace))) (if (memv G3ea1@t '(buffer-mode)) (lambda (G3ea7@x) (G2f61@symbol-macro G3ea7@x '(none line block))) (if (memv G3ea1@t '(file-options)) G2f5f@file-options-macro (if (memv G3ea1@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f47@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3e9f@x)))))))))))))))))))))))))))))))))))))))) G3e9f@x) (error 'core-macro-transformer '"BUG: invalid macro" G3e9f@x))))) (set! G2f65@local-macro-transformer (lambda (G3ea9@x) (car G3ea9@x))) (set! G2f67@do-macro-call (lambda (G3eab@transformer G3eac@expr) ((lambda (G3eaf@out) (begin ((letrec ((G3eb1@f (lambda (G3eb3@x) (if (not (G2d18@stx? G3eb3@x)) (if (pair? G3eb3@x) (begin (G3eb1@f (car G3eb3@x)) (G3eb1@f (cdr G3eb3@x))) (if (vector? G3eb3@x) (vector-for-each G3eb1@f G3eb3@x) (if (symbol? G3eb3@x) (G303a@syntax-violation '#f '"raw symbol encountered in output of macro" G3eac@expr G3eb3@x) (void)))) (void))))) G3eb1@f) G3eaf@out) (G2d3a@add-mark (G2d30@gen-mark) G3eaf@out G3eac@expr))) (G3eab@transformer (G2d3a@add-mark G2d32@anti-mark G3eac@expr '#f))))) (set! G2f69@chi-macro (lambda (G3eb5@p G3eb6@e) (G2f67@do-macro-call (G2f63@macro-transformer G3eb5@p) G3eb6@e))) (set! G2f6b@chi-local-macro (lambda (G3eb9@p G3eba@e) (G2f67@do-macro-call (G2f65@local-macro-transformer G3eb9@p) G3eba@e))) (set! G2f6d@chi-global-macro (lambda (G3ebd@p G3ebe@e) ((lambda (G3ec1@lib G3ec2@loc) (begin (G2b68@G2a10@visit-library G3ec1@lib) ((lambda (G3ec5@x) ((lambda (G3ec7@transformer) (G2f67@do-macro-call G3ec7@transformer G3ebe@e)) (if (procedure? G3ec5@x) G3ec5@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ec5@x)))) (symbol-value G3ec2@loc)))) (car G3ebd@p) (cdr G3ebd@p)))) (set! G2f6f@chi-expr* (lambda (G3ec9@e* G3eca@r G3ecb@mr) (if (null? G3ec9@e*) '() ((lambda (G3ecf@e) (cons G3ecf@e (G2f6f@chi-expr* (cdr G3ec9@e*) G3eca@r G3ecb@mr))) (G2f73@chi-expr (car G3ec9@e*) G3eca@r G3ecb@mr))))) (set! G2f71@chi-application (lambda (G3ed1@e G3ed2@r G3ed3@mr) ((lambda (G3ed7@t) ((lambda (G3ed9@ls/false) (if G3ed9@ls/false (apply (lambda (G3edb@rator G3edc@rands) ((lambda (G3edf@rator) (cons G3edf@rator (G2f6f@chi-expr* G3edc@rands G3ed2@r G3ed3@mr))) (G2f73@chi-expr G3edb@rator G3ed2@r G3ed3@mr))) G3ed9@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3ed7@t))) (G2f4f@syntax-dispatch G3ed7@t '(any . each-any)))) G3ed1@e))) (set! G2f73@chi-expr (lambda (G3ee1@e G3ee2@r G3ee3@mr) (call-with-values (lambda () (G2d78@syntax-type G3ee1@e G3ee2@r)) (lambda (G3eea@G3ee7 G3eeb@G3ee8 G3eec@G3ee9) ((lambda (G3ef0@kwd G3ef1@value G3ef2@type) ((lambda (G3ef6@t) (if (memv G3ef6@t '(core-macro)) ((lambda (G3ef8@transformer) (G3ef8@transformer G3ee1@e G3ee2@r G3ee3@mr)) (G2f5d@core-macro-transformer G3ef1@value)) (if (memv G3ef6@t '(global)) ((lambda (G3efa@lib) ((lambda (G3efc@loc) ((lambda () (begin ((G2fbc@inv-collector) G3efa@lib) G3efc@loc)))) (cdr G3ef1@value))) (car G3ef1@value)) (if (memv G3ef6@t '(core-prim)) ((lambda (G3efe@name) (list 'primitive G3efe@name)) G3ef1@value) (if (memv G3ef6@t '(call)) (G2f71@chi-application G3ee1@e G3ee2@r G3ee3@mr) (if (memv G3ef6@t '(lexical)) ((lambda (G3f00@lex) G3f00@lex) (G2edb@lexical-var G3ef1@value)) (if (memv G3ef6@t '(global-macro global-macro!)) (G2f73@chi-expr (G2f6d@chi-global-macro G3ef1@value G3ee1@e) G3ee2@r G3ee3@mr) (if (memv G3ef6@t '(local-macro local-macro!)) (G2f73@chi-expr (G2f6b@chi-local-macro G3ef1@value G3ee1@e) G3ee2@r G3ee3@mr) (if (memv G3ef6@t '(macro macro!)) (G2f73@chi-expr (G2f69@chi-macro G3ef1@value G3ee1@e) G3ee2@r G3ee3@mr) (if (memv G3ef6@t '(constant)) ((lambda (G3f02@datum) (list 'quote G3f02@datum)) G3ef1@value) (if (memv G3ef6@t '(set!)) (G2f75@chi-set! G3ee1@e G3ee2@r G3ee3@mr) (if (memv G3ef6@t '(begin)) ((lambda (G3f04@t) ((lambda (G3f06@ls/false) (if G3f06@ls/false (apply (lambda (G3f08@x G3f09@x*) (G2cad@G2c1e@build-sequence '#f (G2f6f@chi-expr* (cons G3f08@x G3f09@x*) G3ee2@r G3ee3@mr))) G3f06@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3f04@t))) (G2f4f@syntax-dispatch G3f04@t '(_ any . each-any)))) G3ee1@e) (if (memv G3ef6@t '(let-syntax letrec-syntax)) ((lambda (G3f0c@t) ((lambda (G3f0e@ls/false) (if (and G3f0e@ls/false (apply (lambda (G3f10@xlhs* G3f11@xrhs* G3f12@xbody G3f13@xbody*) (if (not (G2d5a@valid-bound-ids? G3f10@xlhs*)) (G303a@syntax-violation '#f '"invalid identifiers" G3ee1@e) (void))) G3f0e@ls/false)) (apply (lambda (G3f18@xlhs* G3f19@xrhs* G3f1a@xbody G3f1b@xbody*) ((lambda (G3f20@xlab*) ((lambda (G3f22@xrib) ((lambda (G3f24@xb*) ((lambda () (G2cad@G2c1e@build-sequence '#f (G2f6f@chi-expr* (map (lambda (G3f26@x) (G2d3c@add-subst G3f22@xrib G3f26@x)) (cons G3f1a@xbody G3f1b@xbody*)) (append (map cons G3f20@xlab* G3f24@xb*) G3ee2@r) (append (map cons G3f20@xlab* G3f24@xb*) G3ee3@mr)))))) (map (lambda (G3f28@x) (G2d90@make-eval-transformer (G2fae@expand-transformer (if (eq? G3ef2@type 'let-syntax) G3f28@x (G2d3c@add-subst G3f22@xrib G3f28@x)) G3ee3@mr))) G3f19@xrhs*))) (G2d0b@make-full-rib G3f18@xlhs* G3f20@xlab*))) (map G2cd0@gen-label G3f18@xlhs*))) G3f0e@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3f0c@t))) (G2f4f@syntax-dispatch G3f0c@t '(_ #(each (any any)) any . each-any)))) G3ee1@e) (if (memv G3ef6@t '(displaced-lexical)) (G303a@syntax-violation '#f '"identifier out of context" G3ee1@e) (if (memv G3ef6@t '(syntax)) (G303a@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ee1@e) (if (memv G3ef6@t '(define define-syntax module import library)) (G303a@syntax-violation '#f (string-append ((lambda (G3f2a@t) (if (memv G3f2a@t '(define)) '"a definition" (if (memv G3f2a@t '(define-syntax)) '"a define-syntax" (if (memv G3f2a@t '(module)) '"a module definition" (if (memv G3f2a@t '(library)) '"a library definition" (if (memv G3f2a@t '(import)) '"an import declaration" (if (memv G3f2a@t '(export)) '"an export declaration" '"a non-expression"))))))) G3ef2@type) '" was found where an expression was expected") G3ee1@e) (if (memv G3ef6@t '(mutable)) (G303a@syntax-violation '#f '"attempt to reference an unexportable variable" G3ee1@e) (G303a@syntax-violation '#f '"invalid expression" G3ee1@e)))))))))))))))))) G3ef2@type)) G3eec@G3ee9 G3eeb@G3ee8 G3eea@G3ee7))))) (set! G2f75@chi-set! (lambda (G3f2c@e G3f2d@r G3f2e@mr) ((lambda (G3f32@t) ((lambda (G3f34@ls/false) (if (and G3f34@ls/false (apply (lambda (G3f36@x G3f37@v) (G2d50@id? G3f36@x)) G3f34@ls/false)) (apply (lambda (G3f3a@x G3f3b@v) (call-with-values (lambda () (G2d78@syntax-type G3f3a@x G3f2d@r)) (lambda (G3f41@G3f3e G3f42@G3f3f G3f43@G3f40) ((lambda (G3f47@kwd G3f48@value G3f49@type) ((lambda (G3f4d@t) (if (memv G3f4d@t '(lexical)) (begin (G2edf@set-lexical-mutable! G3f48@value '#t) (list 'set! (G2edb@lexical-var G3f48@value) (G2f73@chi-expr G3f3b@v G3f2d@r G3f2e@mr))) (if (memv G3f4d@t '(core-prim)) (G303a@syntax-violation '#f '"cannot modify imported core primitive" G3f2c@e) (if (memv G3f4d@t '(global)) (G303a@syntax-violation '#f '"attempt to modify imported binding" G3f2c@e) (if (memv G3f4d@t '(global-macro!)) (G2f73@chi-expr (G2f6d@chi-global-macro G3f48@value G3f2c@e) G3f2d@r G3f2e@mr) (if (memv G3f4d@t '(local-macro!)) (G2f73@chi-expr (G2f6b@chi-local-macro G3f48@value G3f2c@e) G3f2d@r G3f2e@mr) (if (memv G3f4d@t '(mutable)) (G303a@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f2c@e) (G303a@syntax-violation '#f '"invalid syntax" G3f2c@e)))))))) G3f49@type)) G3f43@G3f40 G3f42@G3f3f G3f41@G3f3e)))) G3f34@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3f32@t))) (G2f4f@syntax-dispatch G3f32@t '(_ any any)))) G3f2c@e))) (set! G2f77@verify-formals (lambda (G3f4f@fmls G3f50@stx) ((lambda (G3f53@t) ((lambda (G3f55@ls/false) (if G3f55@ls/false (apply (lambda (G3f57@x*) (if (not (G2d5a@valid-bound-ids? G3f57@x*)) (G2f09@invalid-fmls-error G3f50@stx G3f4f@fmls) (void))) G3f55@ls/false) ((lambda (G3f59@t) ((lambda (G3f5b@ls/false) (if G3f5b@ls/false (apply (lambda (G3f5d@x* G3f5e@x) (if (not (G2d5a@valid-bound-ids? (cons G3f5e@x G3f5d@x*))) (G2f09@invalid-fmls-error G3f50@stx G3f4f@fmls) (void))) G3f5b@ls/false) ((lambda (G3f61@t) ((lambda (G3f63@ls/false) (if G3f63@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid syntax" G3f50@stx)) G3f63@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3f61@t))) (G2f4f@syntax-dispatch G3f61@t '_))) G3f59@t))) (G2f4f@syntax-dispatch G3f59@t '#(each+ any () any)))) G3f53@t))) (G2f4f@syntax-dispatch G3f53@t 'each-any))) G3f4f@fmls))) (set! G2f79@chi-lambda-clause (lambda (G3f65@stx G3f66@fmls G3f67@body* G3f68@r G3f69@mr) ((lambda (G3f6f@t) ((lambda (G3f71@ls/false) (if G3f71@ls/false (apply (lambda (G3f73@x*) (begin (G2f77@verify-formals G3f66@fmls G3f65@stx) ((lambda (G3f75@lex* G3f76@lab*) (values G3f75@lex* (G2f89@chi-internal (G2d3c@add-subst (G2d0b@make-full-rib G3f73@x* G3f76@lab*) G3f67@body*) (G2ee3@add-lexicals G3f76@lab* G3f75@lex* G3f68@r) G3f69@mr))) (map G2ccc@gen-lexical G3f73@x*) (map G2cd0@gen-label G3f73@x*)))) G3f71@ls/false) ((lambda (G3f79@t) ((lambda (G3f7b@ls/false) (if G3f7b@ls/false (apply (lambda (G3f7d@x* G3f7e@x) (begin (G2f77@verify-formals G3f66@fmls G3f65@stx) ((lambda (G3f81@lex* G3f82@lab* G3f83@lex G3f84@lab) (values (append G3f81@lex* G3f83@lex) (G2f89@chi-internal (G2d3c@add-subst (G2d0b@make-full-rib (cons G3f7e@x G3f7d@x*) (cons G3f84@lab G3f82@lab*)) G3f67@body*) (G2ee3@add-lexicals (cons G3f84@lab G3f82@lab*) (cons G3f83@lex G3f81@lex*) G3f68@r) G3f69@mr))) (map G2ccc@gen-lexical G3f7d@x*) (map G2cd0@gen-label G3f7d@x*) (G2ccc@gen-lexical G3f7e@x) (G2cd0@gen-label G3f7e@x)))) G3f7b@ls/false) ((lambda (G3f89@t) ((lambda (G3f8b@ls/false) (if G3f8b@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid syntax" G3f66@fmls)) G3f8b@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G3f89@t))) (G2f4f@syntax-dispatch G3f89@t '_))) G3f79@t))) (G2f4f@syntax-dispatch G3f79@t '#(each+ any () any)))) G3f6f@t))) (G2f4f@syntax-dispatch G3f6f@t 'each-any))) G3f66@fmls))) (set! G2f7b@chi-lambda-clause* (lambda (G3f8d@stx G3f8e@fmls* G3f8f@body** G3f90@r G3f91@mr) (if (null? G3f8e@fmls*) (values '() '()) (call-with-values (lambda () (G2f79@chi-lambda-clause G3f8d@stx (car G3f8e@fmls*) (car G3f8f@body**) G3f90@r G3f91@mr)) (lambda (G3f99@G3f97 G3f9a@G3f98) ((lambda (G3f9d@b G3f9e@a) (call-with-values (lambda () (G2f7b@chi-lambda-clause* G3f8d@stx (cdr G3f8e@fmls*) (cdr G3f8f@body**) G3f90@r G3f91@mr)) (lambda (G3fa3@G3fa1 G3fa4@G3fa2) ((lambda (G3fa7@b* G3fa8@a*) (values (cons G3f9e@a G3fa8@a*) (cons G3f9d@b G3fa7@b*))) G3fa4@G3fa2 G3fa3@G3fa1)))) G3f9a@G3f98 G3f99@G3f97)))))) (set! G2f7d@chi-defun (lambda (G3fab@x G3fac@r G3fad@mr) ((lambda (G3fb1@fmls G3fb2@body*) (call-with-values (lambda () (G2f79@chi-lambda-clause G3fb1@fmls G3fb1@fmls G3fb2@body* G3fac@r G3fad@mr)) (lambda (G3fb7@G3fb5 G3fb8@G3fb6) ((lambda (G3fbb@body G3fbc@fmls) (G2caa@G2be8@build-lambda '#f G3fbc@fmls G3fbb@body)) G3fb8@G3fb6 G3fb7@G3fb5)))) (car G3fab@x) (cdr G3fab@x)))) (set! G2f7f@chi-rhs (lambda (G3fbf@rhs G3fc0@r G3fc1@mr) ((lambda (G3fc5@t) (if (memv G3fc5@t '(defun)) (G2f7d@chi-defun (cdr G3fbf@rhs) G3fc0@r G3fc1@mr) (if (memv G3fc5@t '(expr)) ((lambda (G3fc7@expr) (G2f73@chi-expr G3fc7@expr G3fc0@r G3fc1@mr)) (cdr G3fbf@rhs)) (if (memv G3fc5@t '(top-expr)) ((lambda (G3fc9@expr) (G2cad@G2c1e@build-sequence '#f (list (G2f73@chi-expr G3fc9@expr G3fc0@r G3fc1@mr) (G2cae@G2c20@build-void)))) (cdr G3fbf@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fbf@rhs))))) (car G3fbf@rhs)))) (set! G2f81@expand-interaction-rhs*/init* (lambda (G3fcb@lhs* G3fcc@rhs* G3fcd@init* G3fce@r G3fcf@mr) ((letrec ((G3fd5@f (lambda (G3fd7@lhs* G3fd8@rhs*) (if (null? G3fd7@lhs*) (map (lambda (G3fdb@x) (G2f73@chi-expr G3fdb@x G3fce@r G3fcf@mr)) G3fcd@init*) ((lambda (G3fdd@lhs G3fde@rhs) ((lambda (G3fe1@t) (if (memv G3fe1@t '(defun)) ((lambda (G3fe3@rhs) (cons (list 'set! G3fdd@lhs G3fe3@rhs) (G3fd5@f (cdr G3fd7@lhs*) (cdr G3fd8@rhs*)))) (G2f7d@chi-defun (cdr G3fde@rhs) G3fce@r G3fcf@mr)) (if (memv G3fe1@t '(expr)) ((lambda (G3fe5@rhs) (cons (list 'set! G3fdd@lhs G3fe5@rhs) (G3fd5@f (cdr G3fd7@lhs*) (cdr G3fd8@rhs*)))) (G2f73@chi-expr (cdr G3fde@rhs) G3fce@r G3fcf@mr)) (if (memv G3fe1@t '(top-expr)) ((lambda (G3fe7@e) (cons G3fe7@e (G3fd5@f (cdr G3fd7@lhs*) (cdr G3fd8@rhs*)))) (G2f73@chi-expr (cdr G3fde@rhs) G3fce@r G3fcf@mr)) (error 'expand-interaction '"invallid" G3fde@rhs))))) (car G3fde@rhs))) (car G3fd7@lhs*) (car G3fd8@rhs*)))))) G3fd5@f) G3fcb@lhs* G3fcc@rhs*))) (set! G2f83@chi-rhs* (lambda (G3fe9@rhs* G3fea@r G3feb@mr) ((letrec ((G3fef@f (lambda (G3ff1@ls) (if (null? G3ff1@ls) '() ((lambda (G3ff3@a) (cons G3ff3@a (G3fef@f (cdr G3ff1@ls)))) (G2f7f@chi-rhs (car G3ff1@ls) G3fea@r G3feb@mr)))))) G3fef@f) G3fe9@rhs*))) (set! G2f85@find-bound=? (lambda (G3ff5@x G3ff6@lhs* G3ff7@rhs*) (if (null? G3ff6@lhs*) '#f (if (G2d56@bound-id=? G3ff5@x (car G3ff6@lhs*)) (car G3ff7@rhs*) (G2f85@find-bound=? G3ff5@x (cdr G3ff6@lhs*) (cdr G3ff7@rhs*)))))) (set! G2f87@find-dups (lambda (G3ffb@ls) ((letrec ((G3ffd@f (lambda (G3fff@ls G4000@dups) (if (null? G3fff@ls) G4000@dups ((lambda (G4003@t) (if G4003@t ((lambda (G4005@x) (G3ffd@f (cdr G3fff@ls) (cons (list (car G3fff@ls) G4005@x) G4000@dups))) G4003@t) (G3ffd@f (cdr G3fff@ls) G4000@dups))) (G2f85@find-bound=? (car G3fff@ls) (cdr G3fff@ls) (cdr G3fff@ls))))))) G3ffd@f) G3ffb@ls '()))) (set! G2f89@chi-internal (lambda (G4007@e* G4008@r G4009@mr) ((lambda (G400d@rib) (call-with-values (lambda () (G2fac@chi-body* (map (lambda (G4017@x) (G2d3c@add-subst G400d@rib G4017@x)) (G2d4e@syntax->list G4007@e*)) G4008@r G4009@mr '() '() '() '() '() G400d@rib '#f)) (lambda (G4019@G400f G401a@G4010 G401b@G4011 G401c@G4012 G401d@G4013 G401e@G4014 G401f@G4015 G4020@G4016) ((lambda (G4029@_exp* G402a@kwd* G402b@mod** G402c@rhs* G402d@lex* G402e@mr G402f@r G4030@e*) (begin (if (null? G4030@e*) (G303a@syntax-violation '#f '"no expression in body" G4030@e*) (void)) ((lambda (G4039@init*) ((lambda (G403b@rhs*) ((lambda () (G2cb0@G2c24@build-letrec* '#f (reverse G402d@lex*) (reverse G403b@rhs*) (G2cad@G2c1e@build-sequence '#f G4039@init*))))) (G2f83@chi-rhs* G402c@rhs* G402f@r G402e@mr))) (G2f6f@chi-expr* (append (apply append (reverse G402b@mod**)) G4030@e*) G402f@r G402e@mr)))) G4020@G4016 G401f@G4015 G401e@G4014 G401d@G4013 G401c@G4012 G401b@G4011 G401a@G4010 G4019@G400f)))) (G2cfb@make-empty-rib)))) (set! G2f8b@parse-module (lambda (G403d@e) ((lambda (G403f@t) ((lambda (G4041@ls/false) (if G4041@ls/false (apply (lambda (G4043@export* G4044@b*) (begin (if (not (for-all G2d50@id? G4043@export*)) (G303a@syntax-violation '#f '"module exports must be identifiers" G403d@e) (void)) (values '#f (list->vector G4043@export*) G4044@b*))) G4041@ls/false) ((lambda (G4047@t) ((lambda (G4049@ls/false) (if G4049@ls/false (apply (lambda (G404b@name G404c@export* G404d@b*) (begin (if (not (G2d50@id? G404b@name)) (G303a@syntax-violation '#f '"module name must be an identifier" G403d@e) (void)) (if (not (for-all G2d50@id? G404c@export*)) (G303a@syntax-violation '#f '"module exports must be identifiers" G403d@e) (void)) (values G404b@name (list->vector G404c@export*) G404d@b*))) G4049@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G4047@t))) (G2f4f@syntax-dispatch G4047@t '(_ any each-any . each-any)))) G403f@t))) (G2f4f@syntax-dispatch G403f@t '(_ each-any . each-any)))) G403d@e))) (set! G2f91@G2f8c (make-record-type-descriptor 'module-interface '#f 'G2f8f '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2f93@G2f8e '#f) (set! G2f95@G2f8d (make-record-constructor-descriptor G2f91@G2f8c '#f G2f93@G2f8e)) (set! G2f98@module-interface? (record-predicate G2f91@G2f8c)) (set! G2f9a@make-module-interface (record-constructor G2f95@G2f8d)) (set! G2f9c@module-interface-first-mark (record-accessor G2f91@G2f8c '0)) (set! G2f9e@module-interface-exp-id-vec (record-accessor G2f91@G2f8c '1)) (set! G2fa0@module-interface-exp-lab-vec (record-accessor G2f91@G2f8c '2)) (set! G2fa2@set-module-interface-first-mark! (record-mutator G2f91@G2f8c '0)) (set! G2fa4@set-module-interface-exp-id-vec! (record-mutator G2f91@G2f8c '1)) (set! G2fa6@set-module-interface-exp-lab-vec! (record-mutator G2f91@G2f8c '2)) (set! G2fa8@module-interface-exp-id* (lambda (G4051@iface G4052@id) ((lambda (G4056@diff-marks) (begin (set! G4056@diff-marks (lambda (G405d@ls G405e@x) (begin (if (null? G405d@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4061@a) (if (eq? G4061@a G405e@x) '() (cons G4061@a (G4056@diff-marks (cdr G405d@ls) G405e@x)))) (car G405d@ls))))) ((lambda (G4057@diff G4058@id-vec) (if (null? G4057@diff) G4058@id-vec (vector-map (lambda (G405b@x) (G2d1a@make-stx (G2d1c@stx-expr G405b@x) (append G4057@diff (G2d1e@stx-mark* G405b@x)) '() '())) G4058@id-vec))) (G4056@diff-marks (G2d1e@stx-mark* G4052@id) (G2f9c@module-interface-first-mark G4051@iface)) (G2f9e@module-interface-exp-id-vec G4051@iface)))) '#f))) (set! G2faa@chi-internal-module (lambda (G4063@e G4064@r G4065@mr G4066@lex* G4067@rhs* G4068@mod** G4069@kwd*) (call-with-values (lambda () (G2f8b@parse-module G4063@e)) (lambda (G4074@G4071 G4075@G4072 G4076@G4073) ((lambda (G407a@e* G407b@exp-id* G407c@name) ((lambda (G4080@rib) ((lambda (G4082@e*) ((lambda () (call-with-values (lambda () (G2fac@chi-body* G4082@e* G4064@r G4065@mr G4066@lex* G4067@rhs* G4068@mod** G4069@kwd* '() G4080@rib '#f)) (lambda (G408c@G4084 G408d@G4085 G408e@G4086 G408f@G4087 G4090@G4088 G4091@G4089 G4092@G408a G4093@G408b) ((lambda (G409c@_exp* G409d@kwd* G409e@mod** G409f@rhs* G40a0@lex* G40a1@mr G40a2@r G40a3@e*) ((lambda (G40ac@exp-lab* G40ad@mod**) (if (not G407c@name) (values G40a0@lex* G409f@rhs* G407b@exp-id* G40ac@exp-lab* G40a2@r G40a1@mr G40ad@mod** G409d@kwd*) ((lambda (G40b0@lab G40b1@iface) (values G40a0@lex* G409f@rhs* (vector G407c@name) (vector G40b0@lab) (cons (cons G40b0@lab (cons '$module G40b1@iface)) G40a2@r) (cons (cons G40b0@lab (cons '$module G40b1@iface)) G40a1@mr) G40ad@mod** G409d@kwd*)) (G2cd0@gen-label 'module) (G2f9a@make-module-interface (car (G2d1e@stx-mark* G407c@name)) (vector-map (lambda (G40b4@x) (G2d1a@make-stx (G2d1c@stx-expr G40b4@x) (G2d1e@stx-mark* G40b4@x) '() '())) G407b@exp-id*) G40ac@exp-lab*)))) (vector-map (lambda (G40b6@x) (or (G2d6a@id->label (G2d1a@make-stx (G2d52@id->sym G40b6@x) (G2d1e@stx-mark* G40b6@x) (list G4080@rib) '())) (G303a@syntax-violation '#f '"cannot find module export" G40b6@x))) G407b@exp-id*) (cons G40a3@e* G409e@mod**))) G4093@G408b G4092@G408a G4091@G4089 G4090@G4088 G408f@G4087 G408e@G4086 G408d@G4085 G408c@G4084)))))) (map (lambda (G40b8@x) (G2d3c@add-subst G4080@rib G40b8@x)) (G2d4e@syntax->list G407a@e*)))) (G2cfb@make-empty-rib))) G4076@G4073 G4075@G4072 G4074@G4071))))) (set! G2fac@chi-body* (lambda (G40ba@e* G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40c0@kwd* G40c1@exp* G40c2@rib G40c3@top?) (if (null? G40ba@e*) (values G40ba@e* G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40c0@kwd* G40c1@exp*) ((lambda (G40ce@e) (call-with-values (lambda () (G2d78@syntax-type G40ce@e G40bb@r)) (lambda (G40d3@G40d0 G40d4@G40d1 G40d5@G40d2) ((lambda (G40d9@kwd G40da@value G40db@type) ((lambda (G40df@kwd*) ((lambda (G40e1@t) (if (memv G40e1@t '(define)) (call-with-values (lambda () (G2ed3@parse-define G40ce@e)) (lambda (G40e5@G40e3 G40e6@G40e4) ((lambda (G40e9@rhs G40ea@id) (begin (if (G2d5e@bound-id-member? G40ea@id G40df@kwd*) (G303a@syntax-violation '#f '"cannot redefine keyword" G40ce@e) (void)) (call-with-values (lambda () (G2cd4@gen-define-label+loc G40ea@id G40c2@rib)) (lambda (G40ef@G40ed G40f0@G40ee) ((lambda (G40f3@lex G40f4@lab) (begin (G2d01@extend-rib! G40c2@rib G40ea@id G40f4@lab) (G2fac@chi-body* (cdr G40ba@e*) (G2ee1@add-lexical G40f4@lab G40f3@lex G40bb@r) G40bc@mr (cons G40f3@lex G40bd@lex*) (cons G40e9@rhs G40be@rhs*) G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?))) G40f0@G40ee G40ef@G40ed))))) G40e6@G40e4 G40e5@G40e3))) (if (memv G40e1@t '(define-syntax)) (call-with-values (lambda () (G2ed5@parse-define-syntax G40ce@e)) (lambda (G40f9@G40f7 G40fa@G40f8) ((lambda (G40fd@rhs G40fe@id) (begin (if (G2d5e@bound-id-member? G40fe@id G40df@kwd*) (G303a@syntax-violation '#f '"cannot redefine keyword" G40ce@e) (void)) ((lambda (G4101@lab G4102@expanded-rhs) (begin (G2d01@extend-rib! G40c2@rib G40fe@id G4101@lab) ((lambda (G4105@b) (G2fac@chi-body* (cdr G40ba@e*) (cons (cons G4101@lab G4105@b) G40bb@r) (cons (cons G4101@lab G4105@b) G40bc@mr) G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?)) (G2d90@make-eval-transformer G4102@expanded-rhs)))) (G2cd6@gen-define-label G40fe@id G40c2@rib) (G2fae@expand-transformer G40fd@rhs G40bc@mr)))) G40fa@G40f8 G40f9@G40f7))) (if (memv G40e1@t '(let-syntax letrec-syntax)) ((lambda (G4107@t) ((lambda (G4109@ls/false) (if (and G4109@ls/false (apply (lambda (G410b@xlhs* G410c@xrhs* G410d@xbody*) (if (not (G2d5a@valid-bound-ids? G410b@xlhs*)) (G303a@syntax-violation '#f '"invalid identifiers" G40ce@e) (void))) G4109@ls/false)) (apply (lambda (G4111@xlhs* G4112@xrhs* G4113@xbody*) ((lambda (G4117@xlab*) ((lambda (G4119@xrib) ((lambda (G411b@xb*) ((lambda () (G2fac@chi-body* (append (map (lambda (G411d@x) (G2d3c@add-subst G4119@xrib G411d@x)) G4113@xbody*) (cdr G40ba@e*)) (append (map cons G4117@xlab* G411b@xb*) G40bb@r) (append (map cons G4117@xlab* G411b@xb*) G40bc@mr) G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?)))) (map (lambda (G411f@x) (G2d90@make-eval-transformer (G2fae@expand-transformer (if (eq? G40db@type 'let-syntax) G411f@x (G2d3c@add-subst G4119@xrib G411f@x)) G40bc@mr))) G4112@xrhs*))) (G2d0b@make-full-rib G4111@xlhs* G4117@xlab*))) (map G2cd0@gen-label G4111@xlhs*))) G4109@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G4107@t))) (G2f4f@syntax-dispatch G4107@t '(_ #(each (any any)) . each-any)))) G40ce@e) (if (memv G40e1@t '(begin)) ((lambda (G4121@t) ((lambda (G4123@ls/false) (if G4123@ls/false (apply (lambda (G4125@x*) (G2fac@chi-body* (append G4125@x* (cdr G40ba@e*)) G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?)) G4123@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G4121@t))) (G2f4f@syntax-dispatch G4121@t '(_ . each-any)))) G40ce@e) (if (memv G40e1@t '(global-macro global-macro!)) (G2fac@chi-body* (cons (G2d3c@add-subst G40c2@rib (G2f6d@chi-global-macro G40da@value G40ce@e)) (cdr G40ba@e*)) G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?) (if (memv G40e1@t '(local-macro local-macro!)) (G2fac@chi-body* (cons (G2d3c@add-subst G40c2@rib (G2f6b@chi-local-macro G40da@value G40ce@e)) (cdr G40ba@e*)) G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?) (if (memv G40e1@t '(macro macro!)) (G2fac@chi-body* (cons (G2d3c@add-subst G40c2@rib (G2f69@chi-macro G40da@value G40ce@e)) (cdr G40ba@e*)) G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?) (if (memv G40e1@t '(module)) (call-with-values (lambda () (G2faa@chi-internal-module G40ce@e G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd*)) (lambda (G412f@G4127 G4130@G4128 G4131@G4129 G4132@G412a G4133@G412b G4134@G412c G4135@G412d G4136@G412e) ((lambda (G413f@kwd* G4140@mod** G4141@mr G4142@r G4143@m-exp-lab* G4144@m-exp-id* G4145@rhs* G4146@lex*) (begin (vector-for-each (lambda (G414f@id G4150@lab) (G2d01@extend-rib! G40c2@rib G414f@id G4150@lab)) G4144@m-exp-id* G4143@m-exp-lab*) (G2fac@chi-body* (cdr G40ba@e*) G4142@r G4141@mr G4146@lex* G4145@rhs* G4140@mod** G413f@kwd* G40c1@exp* G40c2@rib G40c3@top?))) G4136@G412e G4135@G412d G4134@G412c G4133@G412b G4132@G412a G4131@G4129 G4130@G4128 G412f@G4127))) (if (memv G40e1@t '(library)) (begin (G301c@library-expander (G2d66@stx->datum G40ce@e)) (G2fac@chi-body* (cdr G40ba@e*) G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?)) (if (memv G40e1@t '(export)) ((lambda (G4153@t) ((lambda (G4155@ls/false) (if G4155@ls/false (apply (lambda (G4157@exp-decl*) (G2fac@chi-body* (cdr G40ba@e*) G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* (append G4157@exp-decl* G40c1@exp*) G40c2@rib G40c3@top?)) G4155@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G4153@t))) (G2f4f@syntax-dispatch G4153@t '(_ . each-any)))) G40ce@e) (if (memv G40e1@t '(import)) ((lambda () ((lambda (G415a@module-import? G415c@module-import G415e@library-import) (begin (set! G415a@module-import? (lambda (G41a6@e) ((lambda (G41a8@t) ((lambda (G41aa@ls/false) (if (and G41aa@ls/false (apply (lambda (G41ac@id) (G2d50@id? G41ac@id)) G41aa@ls/false)) (apply (lambda (G41ae@id) '#t) G41aa@ls/false) ((lambda (G41b0@t) ((lambda (G41b2@ls/false) (if G41b2@ls/false (apply (lambda (G41b4@imp*) '#f) G41b2@ls/false) ((lambda (G41b6@t) ((lambda (G41b8@ls/false) (if G41b8@ls/false (apply (lambda () (G303a@syntax-violation '#f '"malformed import form" G41a6@e)) G41b8@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G41b6@t))) (G2f4f@syntax-dispatch G41b6@t '_))) G41b0@t))) (G2f4f@syntax-dispatch G41b0@t '(_ . each-any)))) G41a8@t))) (G2f4f@syntax-dispatch G41a8@t '(_ any)))) G41a6@e))) (set! G415c@module-import (lambda (G4187@e G4188@r) ((lambda (G418b@t) ((lambda (G418d@ls/false) (if (and G418d@ls/false (apply (lambda (G418f@id) (G2d50@id? G418f@id)) G418d@ls/false)) (apply (lambda (G4191@id) (call-with-values (lambda () (G2d78@syntax-type G4191@id G4188@r)) (lambda (G4196@G4193 G4197@G4194 G4198@G4195) ((lambda (G419c@kwd G419d@value G419e@type) ((lambda (G41a2@t) (if (memv G41a2@t '($module)) ((lambda (G41a4@iface) (values (G2fa8@module-interface-exp-id* G41a4@iface G4191@id) (G2fa0@module-interface-exp-lab-vec G41a4@iface))) G419d@value) (G303a@syntax-violation '#f '"invalid import" G4187@e))) G419e@type)) G4198@G4195 G4197@G4194 G4196@G4193)))) G418d@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G418b@t))) (G2f4f@syntax-dispatch G418b@t '(_ any)))) G4187@e))) (set! G415e@library-import (lambda (G416d@e) ((lambda (G416f@t) ((lambda (G4171@ls/false) (if G4171@ls/false (apply (lambda (G4173@ctxt G4174@imp*) (call-with-values (lambda () (G2fb6@parse-import-spec* (G3040@syntax->datum G4174@imp*))) (lambda (G4179@G4177 G417a@G4178) ((lambda (G417d@subst-labels G417e@subst-names) (values (vector-map (lambda (G4181@name) (G2d2e@datum->stx G4173@ctxt G4181@name)) G417e@subst-names) G417d@subst-labels)) G417a@G4178 G4179@G4177)))) G4171@ls/false) ((lambda (G4183@t) ((lambda (G4185@ls/false) (if G4185@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid import form" G416d@e)) G4185@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G4183@t))) (G2f4f@syntax-dispatch G4183@t '_))) G416f@t))) (G2f4f@syntax-dispatch G416f@t '(any . each-any)))) G416d@e))) (begin (call-with-values (lambda () (if (G415a@module-import? G40ce@e) (G415c@module-import G40ce@e G40bb@r) (G415e@library-import G40ce@e))) (lambda (G4161@G415f G4162@G4160) ((lambda (G4165@lab* G4166@id*) (vector-for-each (lambda (G4169@id G416a@lab) (G2d01@extend-rib! G40c2@rib G4169@id G416a@lab)) G4166@id* G4165@lab*)) G4162@G4160 G4161@G415f))) (G2fac@chi-body* (cdr G40ba@e*) G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?)))) '#f '#f '#f))) (if G40c3@top? (G2fac@chi-body* (cdr G40ba@e*) G40bb@r G40bc@mr (cons (G2ccc@gen-lexical 'dummy) G40bd@lex*) (cons (cons 'top-expr G40ce@e) G40be@rhs*) G40bf@mod** G40df@kwd* G40c1@exp* G40c2@rib G40c3@top?) (values G40ba@e* G40bb@r G40bc@mr G40bd@lex* G40be@rhs* G40bf@mod** G40df@kwd* G40c1@exp*)))))))))))))) G40db@type)) (if (G2d50@id? G40d9@kwd) (cons G40d9@kwd G40c0@kwd*) G40c0@kwd*))) G40d5@G40d2 G40d4@G40d1 G40d3@G40d0)))) (car G40ba@e*))))) (set! G2fae@expand-transformer (lambda (G41ba@expr G41bb@r) ((lambda (G41be@rtc) ((lambda (G41c0@expanded-rhs) (begin (for-each ((lambda (G41c2@mark-visit) (lambda (G41c4@x) (begin (G2b67@G2a0e@invoke-library G41c4@x) (G41c2@mark-visit G41c4@x)))) (G2fbe@vis-collector)) (G41be@rtc)) G41c0@expanded-rhs)) ((lambda (G41ca@G41c6 G41cb@G41c7 G41cc@G41c8 G41cd@G41c9) ((lambda (G41d2@swap) (dynamic-wind G41d2@swap (lambda () (G2f73@chi-expr G41ba@expr G41bb@r G41bb@r)) G41d2@swap)) (lambda () (begin ((lambda (G41d4@t) (begin (G41ca@G41c6 G41cc@G41c8) (set! G41cc@G41c8 G41d4@t))) (G41ca@G41c6)) ((lambda (G41d6@t) (begin (G41cb@G41c7 G41cd@G41c9) (set! G41cd@G41c9 G41d6@t))) (G41cb@G41c7)))))) G2fbc@inv-collector G2fbe@vis-collector G41be@rtc (lambda (G41d8@x) (values))))) (G2fba@make-collector)))) (set! G2fb0@parse-exports (lambda (G41da@exp*) ((letrec ((G41dc@f (lambda (G41de@exp* G41df@int* G41e0@ext*) (if (null? G41de@exp*) (begin (if (not (G2d5a@valid-bound-ids? G41e0@ext*)) (G303a@syntax-violation 'export '"invalid exports" (G2f87@find-dups G41e0@ext*)) (void)) (values (map G3040@syntax->datum G41e0@ext*) G41df@int*)) ((lambda (G41e4@t) ((lambda (G41e6@ls/false) (if G41e6@ls/false (apply (lambda (G41e8@rename G41e9@i* G41ea@e*) (begin (if (not (and (eq? (G3040@syntax->datum G41e8@rename) 'rename) (for-all G2d50@id? G41e9@i*) (for-all G2d50@id? G41ea@e*))) (G303a@syntax-violation 'export '"invalid export specifier" (car G41de@exp*)) (void)) (G41dc@f (cdr G41de@exp*) (append G41e9@i* G41df@int*) (append G41ea@e* G41e0@ext*)))) G41e6@ls/false) ((lambda (G41ee@t) ((lambda (G41f0@ls/false) (if G41f0@ls/false (apply (lambda (G41f2@ie) (begin (if (not (G2d50@id? G41f2@ie)) (G303a@syntax-violation 'export '"invalid export" G41f2@ie) (void)) (G41dc@f (cdr G41de@exp*) (cons G41f2@ie G41df@int*) (cons G41f2@ie G41e0@ext*)))) G41f0@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G41ee@t))) (G2f4f@syntax-dispatch G41ee@t 'any))) G41e4@t))) (G2f4f@syntax-dispatch G41e4@t '(any . #(each (any any)))))) (car G41de@exp*)))))) G41dc@f) G41da@exp* '() '()))) (set! G2fb2@parse-library-name (lambda (G41f4@spec) ((lambda (G41f7@parse) (begin (set! G41f7@parse (lambda (G4202@x) ((lambda (G4204@t) ((lambda (G4206@ls/false) (if (and G4206@ls/false (apply (lambda (G4208@v*) (for-all (lambda (G420a@x) ((lambda (G420c@x) (and (integer? G420c@x) (exact? G420c@x))) (G3040@syntax->datum G420a@x))) G4208@v*)) G4206@ls/false)) (apply (lambda (G420e@v*) (values '() (map G3040@syntax->datum G420e@v*))) G4206@ls/false) ((lambda (G4210@t) ((lambda (G4212@ls/false) (if (and G4212@ls/false (apply (lambda (G4214@x G4215@rest) (symbol? (G3040@syntax->datum G4214@x))) G4212@ls/false)) (apply (lambda (G4218@x G4219@rest) (call-with-values (lambda () (G41f7@parse G4219@rest)) (lambda (G421e@G421c G421f@G421d) ((lambda (G4222@v* G4223@x*) (values (cons (G3040@syntax->datum G4218@x) G4223@x*) G4222@v*)) G421f@G421d G421e@G421c)))) G4212@ls/false) ((lambda (G4226@t) ((lambda (G4228@ls/false) (if G4228@ls/false (apply (lambda () (values '() '())) G4228@ls/false) ((lambda (G422a@t) ((lambda (G422c@ls/false) (if G422c@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid library name" G41f4@spec)) G422c@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G422a@t))) (G2f4f@syntax-dispatch G422a@t '_))) G4226@t))) (G2f4f@syntax-dispatch G4226@t '()))) G4210@t))) (G2f4f@syntax-dispatch G4210@t '(any . any)))) G4204@t))) (G2f4f@syntax-dispatch G4204@t '(each-any)))) G4202@x))) (call-with-values (lambda () (G41f7@parse G41f4@spec)) (lambda (G41fa@G41f8 G41fb@G41f9) ((lambda (G41fe@ver* G41ff@name*) (begin (if (null? G41ff@name*) (G303a@syntax-violation '#f '"empty library name" G41f4@spec) (void)) (values G41ff@name* G41fe@ver*))) G41fb@G41f9 G41fa@G41f8))))) '#f))) (set! G2fb4@parse-library (lambda (G422e@e) ((lambda (G4230@t) ((lambda (G4232@ls/false) (if (and G4232@ls/false (apply (lambda (G4234@library G4235@name* G4236@export G4237@exp* G4238@import G4239@imp* G423a@b*) (and (eq? (G3040@syntax->datum G4236@export) 'export) (eq? (G3040@syntax->datum G4238@import) 'import) (eq? (G3040@syntax->datum G4234@library) 'library))) G4232@ls/false)) (apply (lambda (G4242@library G4243@name* G4244@export G4245@exp* G4246@import G4247@imp* G4248@b*) (values G4243@name* G4245@exp* G4247@imp* G4248@b*)) G4232@ls/false) ((lambda (G4250@t) ((lambda (G4252@ls/false) (if G4252@ls/false (apply (lambda () (G303a@syntax-violation '#f '"malformed library" G422e@e)) G4252@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G4250@t))) (G2f4f@syntax-dispatch G4250@t '_))) G4230@t))) (G2f4f@syntax-dispatch G4230@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G422e@e))) (set! G2fb6@parse-import-spec* ((lambda () ((lambda (G4255@idsyn? G4257@dup-error G4259@merge-substs G425b@exclude* G425d@find* G425f@rem* G4261@remove-dups G4263@parse-library-name G4265@import-library G4267@get-import G4269@add-imports!) (begin (set! G4255@idsyn? (lambda (G4454@x) (symbol? (G3040@syntax->datum G4454@x)))) (set! G4257@dup-error (lambda (G4452@name) (G303a@syntax-violation 'import '"two imports with different bindings" G4452@name))) (set! G4259@merge-substs (lambda (G4440@s G4441@subst) ((lambda (G4445@insert-to-subst) (begin (set! G4445@insert-to-subst (lambda (G4446@a G4447@subst) ((lambda (G444a@name G444b@label) ((lambda (G444e@t) (if G444e@t ((lambda (G4450@x) (if (eq? (cdr G4450@x) G444b@label) G4447@subst (G4257@dup-error G444a@name))) G444e@t) (cons G4446@a G4447@subst))) (assq G444a@name G4447@subst))) (car G4446@a) (cdr G4446@a)))) (if (null? G4440@s) G4441@subst (G4445@insert-to-subst (car G4440@s) (G4259@merge-substs (cdr G4440@s) G4441@subst))))) '#f))) (set! G425b@exclude* (lambda (G4416@sym* G4417@subst) ((lambda (G441b@exclude) (begin (set! G441b@exclude (lambda (G4430@sym G4431@subst) (if (null? G4431@subst) (G303a@syntax-violation 'import '"cannot rename unbound identifier" G4430@sym) (if (eq? G4430@sym (caar G4431@subst)) (values (cdar G4431@subst) (cdr G4431@subst)) ((lambda (G4434@a) (call-with-values (lambda () (G441b@exclude G4430@sym (cdr G4431@subst))) (lambda (G4438@G4436 G4439@G4437) ((lambda (G443c@subst G443d@old) (values G443d@old (cons G4434@a G443c@subst))) G4439@G4437 G4438@G4436)))) (car G4431@subst)))))) (if (null? G4416@sym*) (values '() G4417@subst) (call-with-values (lambda () (G441b@exclude (car G4416@sym*) G4417@subst)) (lambda (G441e@G441c G441f@G441d) ((lambda (G4422@subst G4423@old) (call-with-values (lambda () (G425b@exclude* (cdr G4416@sym*) G4422@subst)) (lambda (G4428@G4426 G4429@G4427) ((lambda (G442c@subst G442d@old*) (values (cons G4423@old G442d@old*) G442c@subst)) G4429@G4427 G4428@G4426)))) G441f@G441d G441e@G441c)))))) '#f))) (set! G425d@find* (lambda (G440e@sym* G440f@subst) (map (lambda (G4412@x) ((lambda (G4414@t) (if G4414@t (cdr G4414@t) (G303a@syntax-violation 'import '"cannot find identifier" G4412@x))) (assq G4412@x G440f@subst))) G440e@sym*))) (set! G425f@rem* (lambda (G4406@sym* G4407@subst) ((letrec ((G440a@f (lambda (G440c@subst) (if (null? G440c@subst) '() (if (memq (caar G440c@subst) G4406@sym*) (G440a@f (cdr G440c@subst)) (cons (car G440c@subst) (G440a@f (cdr G440c@subst)))))))) G440a@f) G4407@subst))) (set! G4261@remove-dups (lambda (G4404@ls) (if (null? G4404@ls) '() (if (memq (car G4404@ls) (cdr G4404@ls)) (G4261@remove-dups (cdr G4404@ls)) (cons (car G4404@ls) (G4261@remove-dups (cdr G4404@ls))))))) (set! G4263@parse-library-name (lambda (G431e@spec) ((lambda (G4321@subversion? G4323@subversion-pred G4325@version-pred) (begin (set! G4321@subversion? (lambda (G4400@x) ((lambda (G4402@x) (and (integer? G4402@x) (exact? G4402@x) (>= G4402@x '0))) (G3040@syntax->datum G4400@x)))) (set! G4323@subversion-pred (lambda (G43a0@x*) ((lambda (G43a2@t) ((lambda (G43a4@ls/false) (if (and G43a4@ls/false (apply (lambda (G43a6@n) (G4321@subversion? G43a6@n)) G43a4@ls/false)) (apply (lambda (G43a8@n) (lambda (G43aa@x) (= G43aa@x (G3040@syntax->datum G43a8@n)))) G43a4@ls/false) ((lambda (G43ac@t) ((lambda (G43ae@ls/false) (if (and G43ae@ls/false (apply (lambda (G43b0@p? G43b1@sub*) (eq? (G3040@syntax->datum G43b0@p?) 'and)) G43ae@ls/false)) (apply (lambda (G43b4@p? G43b5@sub*) ((lambda (G43b8@p*) (lambda (G43ba@x) (for-all (lambda (G43bc@p) (G43bc@p G43ba@x)) G43b8@p*))) (map G4323@subversion-pred G43b5@sub*))) G43ae@ls/false) ((lambda (G43be@t) ((lambda (G43c0@ls/false) (if (and G43c0@ls/false (apply (lambda (G43c2@p? G43c3@sub*) (eq? (G3040@syntax->datum G43c2@p?) 'or)) G43c0@ls/false)) (apply (lambda (G43c6@p? G43c7@sub*) ((lambda (G43ca@p*) (lambda (G43cc@x) (exists (lambda (G43ce@p) (G43ce@p G43cc@x)) G43ca@p*))) (map G4323@subversion-pred G43c7@sub*))) G43c0@ls/false) ((lambda (G43d0@t) ((lambda (G43d2@ls/false) (if (and G43d2@ls/false (apply (lambda (G43d4@p? G43d5@sub) (eq? (G3040@syntax->datum G43d4@p?) 'not)) G43d2@ls/false)) (apply (lambda (G43d8@p? G43d9@sub) ((lambda (G43dc@p) (lambda (G43de@x) (not (G43dc@p G43de@x)))) (G4323@subversion-pred G43d9@sub))) G43d2@ls/false) ((lambda (G43e0@t) ((lambda (G43e2@ls/false) (if (and G43e2@ls/false (apply (lambda (G43e4@p? G43e5@n) (and (eq? (G3040@syntax->datum G43e4@p?) '<=) (G4321@subversion? G43e5@n))) G43e2@ls/false)) (apply (lambda (G43e8@p? G43e9@n) (lambda (G43ec@x) (<= G43ec@x (G3040@syntax->datum G43e9@n)))) G43e2@ls/false) ((lambda (G43ee@t) ((lambda (G43f0@ls/false) (if (and G43f0@ls/false (apply (lambda (G43f2@p? G43f3@n) (and (eq? (G3040@syntax->datum G43f2@p?) '>=) (G4321@subversion? G43f3@n))) G43f0@ls/false)) (apply (lambda (G43f6@p? G43f7@n) (lambda (G43fa@x) (>= G43fa@x (G3040@syntax->datum G43f7@n)))) G43f0@ls/false) ((lambda (G43fc@t) ((lambda (G43fe@ls/false) (if G43fe@ls/false (apply (lambda () (G303a@syntax-violation 'import '"invalid sub-version spec" G431e@spec G43a0@x*)) G43fe@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G43fc@t))) (G2f4f@syntax-dispatch G43fc@t '_))) G43ee@t))) (G2f4f@syntax-dispatch G43ee@t '(any any)))) G43e0@t))) (G2f4f@syntax-dispatch G43e0@t '(any any)))) G43d0@t))) (G2f4f@syntax-dispatch G43d0@t '(any any)))) G43be@t))) (G2f4f@syntax-dispatch G43be@t '(any . each-any)))) G43ac@t))) (G2f4f@syntax-dispatch G43ac@t '(any . each-any)))) G43a2@t))) (G2f4f@syntax-dispatch G43a2@t 'any))) G43a0@x*))) (set! G4325@version-pred (lambda (G4350@x*) ((lambda (G4352@t) ((lambda (G4354@ls/false) (if G4354@ls/false (apply (lambda () (lambda (G4356@x) '#t)) G4354@ls/false) ((lambda (G4358@t) ((lambda (G435a@ls/false) (if (and G435a@ls/false (apply (lambda (G435c@c G435d@ver*) (eq? (G3040@syntax->datum G435c@c) 'and)) G435a@ls/false)) (apply (lambda (G4360@c G4361@ver*) ((lambda (G4364@p*) (lambda (G4366@x) (for-all (lambda (G4368@p) (G4368@p G4366@x)) G4364@p*))) (map G4325@version-pred G4361@ver*))) G435a@ls/false) ((lambda (G436a@t) ((lambda (G436c@ls/false) (if (and G436c@ls/false (apply (lambda (G436e@c G436f@ver*) (eq? (G3040@syntax->datum G436e@c) 'or)) G436c@ls/false)) (apply (lambda (G4372@c G4373@ver*) ((lambda (G4376@p*) (lambda (G4378@x) (exists (lambda (G437a@p) (G437a@p G4378@x)) G4376@p*))) (map G4325@version-pred G4373@ver*))) G436c@ls/false) ((lambda (G437c@t) ((lambda (G437e@ls/false) (if (and G437e@ls/false (apply (lambda (G4380@c G4381@ver) (eq? (G3040@syntax->datum G4380@c) 'not)) G437e@ls/false)) (apply (lambda (G4384@c G4385@ver) ((lambda (G4388@p) (lambda (G438a@x) (not (G4388@p G438a@x)))) (G4325@version-pred G4385@ver))) G437e@ls/false) ((lambda (G438c@t) ((lambda (G438e@ls/false) (if G438e@ls/false (apply (lambda (G4390@sub*) ((lambda (G4392@p*) (lambda (G4394@x) ((letrec ((G4396@f (lambda (G4398@p* G4399@x) (if (null? G4398@p*) '#t (if (null? G4399@x) '#f (and ((car G4398@p*) (car G4399@x)) (G4396@f (cdr G4398@p*) (cdr G4399@x)))))))) G4396@f) G4392@p* G4394@x))) (map G4323@subversion-pred G4390@sub*))) G438e@ls/false) ((lambda (G439c@t) ((lambda (G439e@ls/false) (if G439e@ls/false (apply (lambda () (G303a@syntax-violation 'import '"invalid version spec" G431e@spec G4350@x*)) G439e@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G439c@t))) (G2f4f@syntax-dispatch G439c@t '_))) G438c@t))) (G2f4f@syntax-dispatch G438c@t 'each-any))) G437c@t))) (G2f4f@syntax-dispatch G437c@t '(any any)))) G436a@t))) (G2f4f@syntax-dispatch G436a@t '(any . each-any)))) G4358@t))) (G2f4f@syntax-dispatch G4358@t '(any . each-any)))) G4352@t))) (G2f4f@syntax-dispatch G4352@t '()))) G4350@x*))) ((letrec ((G4326@f (lambda (G4328@x) ((lambda (G432a@t) ((lambda (G432c@ls/false) (if G432c@ls/false (apply (lambda (G432e@version-spec*) (values '() (G4325@version-pred G432e@version-spec*))) G432c@ls/false) ((lambda (G4330@t) ((lambda (G4332@ls/false) (if (and G4332@ls/false (apply (lambda (G4334@x G4335@x*) (G4255@idsyn? G4334@x)) G4332@ls/false)) (apply (lambda (G4338@x G4339@x*) (call-with-values (lambda () (G4326@f G4339@x*)) (lambda (G433e@G433c G433f@G433d) ((lambda (G4342@pred G4343@name) (values (cons (G3040@syntax->datum G4338@x) G4343@name) G4342@pred)) G433f@G433d G433e@G433c)))) G4332@ls/false) ((lambda (G4346@t) ((lambda (G4348@ls/false) (if G4348@ls/false (apply (lambda () (values '() (lambda (G434a@x) '#t))) G4348@ls/false) ((lambda (G434c@t) ((lambda (G434e@ls/false) (if G434e@ls/false (apply (lambda () (G303a@syntax-violation '#f '"invalid import spec" G431e@spec)) G434e@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G434c@t))) (G2f4f@syntax-dispatch G434c@t '_))) G4346@t))) (G2f4f@syntax-dispatch G4346@t '()))) G4330@t))) (G2f4f@syntax-dispatch G4330@t '(any . any)))) G432a@t))) (G2f4f@syntax-dispatch G432a@t '(each-any)))) G4328@x)))) G4326@f) G431e@spec))) '#f '#f '#f))) (set! G4265@import-library (lambda (G4310@spec*) (call-with-values (lambda () (G4263@parse-library-name G4310@spec*)) (lambda (G4314@G4312 G4315@G4313) ((lambda (G4318@pred G4319@name) (begin (if (null? G4319@name) (G303a@syntax-violation 'import '"empty library name" G4310@spec*) (void)) ((lambda (G431c@lib) (begin (if (not G431c@lib) (G303a@syntax-violation 'import '"cannot find library with required name" G4319@name) (void)) (if (not (G4318@pred (G2b38@G29b0@library-version G431c@lib))) (G303a@syntax-violation 'import '"library does not satisfy version specification" G4310@spec* G431c@lib) (void)) ((G2fc0@imp-collector) G431c@lib) (G2b3c@G29b8@library-subst G431c@lib))) (G2b60@G2a00@find-library-by-name G4319@name)))) G4315@G4313 G4314@G4312))))) (set! G4267@get-import (lambda (G4282@spec) ((lambda (G4284@t) ((lambda (G4286@ls/false) (if (and G4286@ls/false (apply (lambda (G4288@x G4289@x*) (not (memq (G3040@syntax->datum G4288@x) '(for rename except only prefix library)))) G4286@ls/false)) (apply (lambda (G428c@x G428d@x*) (G4265@import-library (cons G428c@x G428d@x*))) G4286@ls/false) ((lambda (G4290@t) ((lambda (G4292@ls/false) (if (and G4292@ls/false (apply (lambda (G4294@rename G4295@isp G4296@old* G4297@new*) (and (eq? (G3040@syntax->datum G4294@rename) 'rename) (for-all G4255@idsyn? G4296@old*) (for-all G4255@idsyn? G4297@new*))) G4292@ls/false)) (apply (lambda (G429c@rename G429d@isp G429e@old* G429f@new*) ((lambda (G42a4@subst G42a5@old* G42a6@new*) ((lambda (G42aa@old-label*) ((lambda (G42ac@subst) (G4259@merge-substs (map cons G42a6@new* G42aa@old-label*) G42ac@subst)) (G425f@rem* G42a5@old* G42a4@subst))) (G425d@find* G42a5@old* G42a4@subst))) (G4267@get-import G429d@isp) (map G3040@syntax->datum G429e@old*) (map G3040@syntax->datum G429f@new*))) G4292@ls/false) ((lambda (G42ae@t) ((lambda (G42b0@ls/false) (if (and G42b0@ls/false (apply (lambda (G42b2@except G42b3@isp G42b4@sym*) (and (eq? (G3040@syntax->datum G42b2@except) 'except) (for-all G4255@idsyn? G42b4@sym*))) G42b0@ls/false)) (apply (lambda (G42b8@except G42b9@isp G42ba@sym*) ((lambda (G42be@subst) (G425f@rem* (map G3040@syntax->datum G42ba@sym*) G42be@subst)) (G4267@get-import G42b9@isp))) G42b0@ls/false) ((lambda (G42c0@t) ((lambda (G42c2@ls/false) (if (and G42c2@ls/false (apply (lambda (G42c4@only G42c5@isp G42c6@sym*) (and (eq? (G3040@syntax->datum G42c4@only) 'only) (for-all G4255@idsyn? G42c6@sym*))) G42c2@ls/false)) (apply (lambda (G42ca@only G42cb@isp G42cc@sym*) ((lambda (G42d0@subst G42d1@sym*) ((lambda (G42d4@sym*) ((lambda (G42d6@lab*) (map cons G42d4@sym* G42d6@lab*)) (G425d@find* G42d4@sym* G42d0@subst))) (G4261@remove-dups G42d1@sym*))) (G4267@get-import G42cb@isp) (map G3040@syntax->datum G42cc@sym*))) G42c2@ls/false) ((lambda (G42d8@t) ((lambda (G42da@ls/false) (if (and G42da@ls/false (apply (lambda (G42dc@prefix G42dd@isp G42de@p) (and (eq? (G3040@syntax->datum G42dc@prefix) 'prefix) (G4255@idsyn? G42de@p))) G42da@ls/false)) (apply (lambda (G42e2@prefix G42e3@isp G42e4@p) ((lambda (G42e8@subst G42e9@prefix) (map (lambda (G42ec@x) (cons (string->symbol (string-append G42e9@prefix (symbol->string (car G42ec@x)))) (cdr G42ec@x))) G42e8@subst)) (G4267@get-import G42e3@isp) (symbol->string (G3040@syntax->datum G42e4@p)))) G42da@ls/false) ((lambda (G42ee@t) ((lambda (G42f0@ls/false) (if (and G42f0@ls/false (apply (lambda (G42f2@library G42f3@spec*) (eq? (G3040@syntax->datum G42f2@library) 'library)) G42f0@ls/false)) (apply (lambda (G42f6@library G42f7@spec*) (G4265@import-library G42f7@spec*)) G42f0@ls/false) ((lambda (G42fa@t) ((lambda (G42fc@ls/false) (if (and G42fc@ls/false (apply (lambda (G42fe@for G42ff@isp G4300@rest) (eq? (G3040@syntax->datum G42fe@for) 'for)) G42fc@ls/false)) (apply (lambda (G4304@for G4305@isp G4306@rest) (G4267@get-import G4305@isp)) G42fc@ls/false) ((lambda (G430a@t) ((lambda (G430c@ls/false) (if G430c@ls/false (apply (lambda (G430e@spec) (G303a@syntax-violation 'import '"invalid import spec" G430e@spec)) G430c@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G430a@t))) (G2f4f@syntax-dispatch G430a@t 'any))) G42fa@t))) (G2f4f@syntax-dispatch G42fa@t '(any any . any)))) G42ee@t))) (G2f4f@syntax-dispatch G42ee@t '(any each-any)))) G42d8@t))) (G2f4f@syntax-dispatch G42d8@t '(any any any)))) G42c0@t))) (G2f4f@syntax-dispatch G42c0@t '(any any . each-any)))) G42ae@t))) (G2f4f@syntax-dispatch G42ae@t '(any any . each-any)))) G4290@t))) (G2f4f@syntax-dispatch G4290@t '(any any . #(each (any any)))))) G4284@t))) (G2f4f@syntax-dispatch G4284@t '(any . each-any)))) G4282@spec))) (set! G4269@add-imports! (lambda (G4272@imp G4273@h) ((lambda (G4276@subst) (for-each (lambda (G4278@x) ((lambda (G427a@name G427b@label) ((lambda (G427e@t) (if G427e@t ((lambda (G4280@l) (if (not (eq? G4280@l G427b@label)) (G4257@dup-error G427a@name) (void))) G427e@t) (hashtable-set! G4273@h G427a@name G427b@label))) (hashtable-ref G4273@h G427a@name '#f))) (car G4278@x) (cdr G4278@x))) G4276@subst)) (G4267@get-import G4272@imp)))) (lambda (G426a@imp*) ((letrec ((G426c@f (lambda (G426e@imp* G426f@h) (if (null? G426e@imp*) (hashtable-entries G426f@h) (begin (G4269@add-imports! (car G426e@imp*) G426f@h) (G426c@f (cdr G426e@imp*) G426f@h)))))) G426c@f) G426a@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fb8@make-top-rib (lambda (G4456@names G4457@labels) ((lambda (G445a@rib) (begin (vector-for-each (lambda (G445c@name G445d@label) (begin (if (not (symbol? G445c@name)) (error 'make-top-rib '"BUG: not a symbol" G445c@name) (void)) (G2d03@extend-rib/nc! G445a@rib (G2d1a@make-stx G445c@name G2cc8@top-mark* '() '()) G445d@label))) G4456@names G4457@labels) G445a@rib)) (G2cfd@make-cache-rib)))) (set! G2fba@make-collector (lambda () ((lambda (G4460@ls) (lambda G4464 ((lambda (G4465) (if (= G4465 '0) (apply (lambda () G4460@ls) G4464) (if (= G4465 '1) (apply (lambda (G4462@x) (set! G4460@ls (G2cc1@set-cons G4462@x G4460@ls))) G4464) (error 'apply '"invalid arg count")))) (length G4464)))) '()))) (set! G2fbc@inv-collector (G28ec@G2822@make-parameter (lambda G4466@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4468@x) (begin (if (not (procedure? G4468@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4468@x) (void)) G4468@x)))) (set! G2fbe@vis-collector (G28ec@G2822@make-parameter (lambda G446a@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G446c@x) (begin (if (not (procedure? G446c@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G446c@x) (void)) G446c@x)))) (set! G2fc0@imp-collector (G28ec@G2822@make-parameter (lambda G446e@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4470@x) (begin (if (not (procedure? G4470@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4470@x) (void)) G4470@x)))) (set! G2fc2@chi-library-internal (lambda (G4472@e* G4473@rib G4474@top?) (call-with-values (lambda () (G2fac@chi-body* G4472@e* '() '() '() '() '() '() '() G4473@rib G4474@top?)) (lambda (G4480@G4478 G4481@G4479 G4482@G447a G4483@G447b G4484@G447c G4485@G447d G4486@G447e G4487@G447f) ((lambda (G4490@exp* G4491@_kwd* G4492@mod** G4493@rhs* G4494@lex* G4495@mr G4496@r G4497@e*) (values (append (apply append (reverse G4492@mod**)) G4497@e*) G4496@r G4495@mr (reverse G4494@lex*) (reverse G4493@rhs*) G4490@exp*)) G4487@G447f G4486@G447e G4485@G447d G4484@G447c G4483@G447b G4482@G447a G4481@G4479 G4480@G4478))))) (set! G2fc4@chi-interaction-expr (lambda (G44a0@e G44a1@rib G44a2@r) (call-with-values (lambda () (G2fac@chi-body* (list G44a0@e) G44a2@r G44a2@r '() '() '() '() '() G44a1@rib '#t)) (lambda (G44ae@G44a6 G44af@G44a7 G44b0@G44a8 G44b1@G44a9 G44b2@G44aa G44b3@G44ab G44b4@G44ac G44b5@G44ad) ((lambda (G44be@_exp* G44bf@_kwd* G44c0@mod** G44c1@rhs* G44c2@lex* G44c3@mr G44c4@r G44c5@e*) ((lambda (G44ce@e*) ((lambda (G44d0@e) (values G44d0@e G44c4@r)) (if (null? G44ce@e*) (G2cae@G2c20@build-void) (if (null? (cdr G44ce@e*)) (car G44ce@e*) (G2cad@G2c1e@build-sequence '#f G44ce@e*))))) (G2f81@expand-interaction-rhs*/init* (reverse G44c2@lex*) (reverse G44c1@rhs*) (append (apply append (reverse G44c0@mod**)) G44c5@e*) G44c4@r G44c3@mr))) G44b5@G44ad G44b4@G44ac G44b3@G44ab G44b2@G44aa G44b1@G44a9 G44b0@G44a8 G44af@G44a7 G44ae@G44a6))))) (set! G2fc6@library-body-expander (lambda (G44d2@name G44d3@main-exp* G44d4@imp* G44d5@b* G44d6@top?) ((lambda (G44dd@itc) (begin (set! G44dd@itc (G2fba@make-collector)) ((lambda (G44e2@G44de G44e3@G44df G44e4@G44e0 G44e5@G44e1) ((lambda (G44ea@swap) (dynamic-wind G44ea@swap (lambda () (call-with-values (lambda () (G2fb6@parse-import-spec* G44d4@imp*)) (lambda (G44ee@G44ec G44ef@G44ed) ((lambda (G44f2@subst-labels G44f3@subst-names) ((lambda (G44f6@rib) ((lambda (G44f9@wrap) (begin (set! G44f9@wrap (lambda (G4565@x) (G2d1a@make-stx G4565@x G2cc8@top-mark* (list G44f6@rib) '()))) ((lambda (G44fa@b* G44fb@main-exp* G44fc@rtc G44fd@vtc) ((lambda (G4506@G4502 G4507@G4503 G4508@G4504 G4509@G4505) ((lambda (G450e@swap) (dynamic-wind G450e@swap (lambda () (call-with-values (lambda () (G2fc2@chi-library-internal G44fa@b* G44f6@rib G44d6@top?)) (lambda (G4516@G4510 G4517@G4511 G4518@G4512 G4519@G4513 G451a@G4514 G451b@G4515) ((lambda (G4522@internal-exp* G4523@rhs* G4524@lex* G4525@mr G4526@r G4527@init*) (call-with-values (lambda () (G2fb0@parse-exports (append G44fb@main-exp* G4522@internal-exp*))) (lambda (G4530@G452e G4531@G452f) ((lambda (G4534@exp-id* G4535@exp-name*) (begin (G2d07@seal-rib! G44f6@rib) ((lambda (G4538@init*) ((lambda (G453a@rhs*) ((lambda () (begin (G2d09@unseal-rib! G44f6@rib) ((lambda (G453c@loc* G453d@export-subst) ((lambda (G4541@errstr) (begin (set! G4541@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3026@make-export-env/macros G4524@lex* G453c@loc* G4526@r)) (lambda (G4545@G4542 G4546@G4543 G4547@G4544) ((lambda (G454b@macro* G454c@global* G454d@export-env) (begin (for-each (lambda (G4551@s) ((lambda (G4553@name G4554@label) ((lambda (G4557@p) (if G4557@p ((lambda (G4559@b) ((lambda (G455b@type) (if (eq? G455b@type 'mutable) (G303a@syntax-violation 'export G4541@errstr G4553@name) (void))) (car G4559@b))) (cdr G4557@p)) (void))) (assq G4554@label G454d@export-env))) (car G4551@s) (cdr G4551@s))) G453d@export-subst) ((lambda (G455d@invoke-body G455e@invoke-definitions) (values (G44dd@itc) (G44fc@rtc) (G44fd@vtc) (G2cad@G2c1e@build-sequence '#f (append G455e@invoke-definitions (list G455d@invoke-body))) G454b@macro* G453d@export-subst G454d@export-env)) (G2cb0@G2c24@build-letrec* '#f G4524@lex* G453a@rhs* (G3022@build-exports G454c@global* G4538@init*)) (map G2ca9@G2b6e@build-global-define (map cdr G454c@global*))))) G4547@G4544 G4546@G4543 G4545@G4542))))) '#f)) (map G2cce@gen-global G4524@lex*) (G3024@make-export-subst G4535@exp-name* G4534@exp-id*)))))) (G2f83@chi-rhs* G4523@rhs* G4526@r G4525@mr))) (G2f6f@chi-expr* G4527@init* G4526@r G4525@mr)))) G4531@G452f G4530@G452e)))) G451b@G4515 G451a@G4514 G4519@G4513 G4518@G4512 G4517@G4511 G4516@G4510)))) G450e@swap)) (lambda () (begin ((lambda (G4561@t) (begin (G4506@G4502 G4508@G4504) (set! G4508@G4504 G4561@t))) (G4506@G4502)) ((lambda (G4563@t) (begin (G4507@G4503 G4509@G4505) (set! G4509@G4505 G4563@t))) (G4507@G4503)))))) G2fbc@inv-collector G2fbe@vis-collector G44fc@rtc G44fd@vtc)) (map G44f9@wrap G44d5@b*) (map G44f9@wrap G44d3@main-exp*) (G2fba@make-collector) (G2fba@make-collector)))) '#f)) (G2fb8@make-top-rib G44f3@subst-names G44f2@subst-labels))) G44ef@G44ed G44ee@G44ec)))) G44ea@swap)) (lambda () (begin ((lambda (G4567@t) (begin (G44e2@G44de G44e4@G44e0) (set! G44e4@G44e0 G4567@t))) (G44e2@G44de)) ((lambda (G4569@t) (begin (G44e3@G44df G44e5@G44e1) (set! G44e5@G44e1 G4569@t))) (G44e3@G44df)))))) G2fc0@imp-collector G3048@top-level-context G44dd@itc '#f))) '#f))) (set! G2fc8@core-library-expander (lambda (G456b@e G456c@verify-name) (call-with-values (lambda () (G2fb4@parse-library G456b@e)) (lambda (G4573@G456f G4574@G4570 G4575@G4571 G4576@G4572) ((lambda (G457b@b* G457c@imp* G457d@exp* G457e@name*) (call-with-values (lambda () (G2fb2@parse-library-name G457e@name*)) (lambda (G4585@G4583 G4586@G4584) ((lambda (G4589@ver G458a@name) (begin (G456c@verify-name G458a@name) (call-with-values (lambda () (G2fc6@library-body-expander G458a@name G457d@exp* G457c@imp* G457b@b* '#f)) (lambda (G4594@G458d G4595@G458e G4596@G458f G4597@G4590 G4598@G4591 G4599@G4592 G459a@G4593) ((lambda (G45a2@export-env G45a3@export-subst G45a4@visit-code G45a5@invoke-code G45a6@visit-req* G45a7@invoke-req* G45a8@imp*) (values G458a@name G4589@ver G45a8@imp* G45a7@invoke-req* G45a6@visit-req* G45a5@invoke-code G45a4@visit-code G45a3@export-subst G45a2@export-env)) G459a@G4593 G4599@G4592 G4598@G4591 G4597@G4590 G4596@G458f G4595@G458e G4594@G458d))))) G4586@G4584 G4585@G4583)))) G4576@G4572 G4575@G4571 G4574@G4570 G4573@G456f))))) (set! G2fca@parse-top-level-program (lambda (G45b0@e*) ((lambda (G45b2@t) ((lambda (G45b4@ls/false) (if (and G45b4@ls/false (apply (lambda (G45b6@import G45b7@imp* G45b8@b*) (eq? (G3040@syntax->datum G45b6@import) 'import)) G45b4@ls/false)) (apply (lambda (G45bc@import G45bd@imp* G45be@b*) (values G45bd@imp* G45be@b*)) G45b4@ls/false) ((lambda (G45c2@t) ((lambda (G45c4@ls/false) (if (and G45c4@ls/false (apply (lambda (G45c6@import G45c7@x G45c8@y) (eq? (G3040@syntax->datum G45c6@import) 'import)) G45c4@ls/false)) (apply (lambda (G45cc@import G45cd@x G45ce@y) (G303a@syntax-violation 'expander '"invalid syntax of top-level program" (G2d4a@syntax-car G45b0@e*))) G45c4@ls/false) ((lambda (G45d2@t) ((lambda (G45d4@ls/false) (if G45d4@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45d4@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G45d2@t))) (G2f4f@syntax-dispatch G45d2@t '_))) G45c2@t))) (G2f4f@syntax-dispatch G45c2@t '((any . any) . any)))) G45b2@t))) (G2f4f@syntax-dispatch G45b2@t '((any . each-any) . each-any)))) G45b0@e*))) (set! G2fcc@top-level-expander (lambda (G45d6@e*) (call-with-values (lambda () (G2fca@parse-top-level-program G45d6@e*)) (lambda (G45da@G45d8 G45db@G45d9) ((lambda (G45de@b* G45df@imp*) (call-with-values (lambda () (G2fc6@library-body-expander '() '() G45df@imp* G45de@b* '#t)) (lambda (G45e9@G45e2 G45ea@G45e3 G45eb@G45e4 G45ec@G45e5 G45ed@G45e6 G45ee@G45e7 G45ef@G45e8) ((lambda (G45f7@export-env G45f8@export-subst G45f9@visit-code G45fa@invoke-code G45fb@visit-req* G45fc@invoke-req* G45fd@imp*) (values G45fc@invoke-req* G45fa@invoke-code)) G45ef@G45e8 G45ee@G45e7 G45ed@G45e6 G45ec@G45e5 G45eb@G45e4 G45ea@G45e3 G45e9@G45e2)))) G45db@G45d9 G45da@G45d8))))) (set! G2fd2@G2fcd (make-record-type-descriptor 'env '#f 'G2fd0 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fd4@G2fcf '#f) (set! G2fd6@G2fce (make-record-constructor-descriptor G2fd2@G2fcd '#f G2fd4@G2fcf)) (set! G2fd9@env? (record-predicate G2fd2@G2fcd)) (set! G2fdb@make-env (record-constructor G2fd6@G2fce)) (set! G2fdd@env-names (record-accessor G2fd2@G2fcd '0)) (set! G2fdf@env-labels (record-accessor G2fd2@G2fcd '1)) (set! G2fe1@env-itc (record-accessor G2fd2@G2fcd '2)) (set! G2fe3@set-env-names! (record-mutator G2fd2@G2fcd '0)) (set! G2fe5@set-env-labels! (record-mutator G2fd2@G2fcd '1)) (set! G2fe7@set-env-itc! (record-mutator G2fd2@G2fcd '2)) (set! G2fe9@rp (G28e9@G281c@make-record-printer 'env (lambda (G4605@x G4606@p G4607@wr) (display '"#<environment>" G4606@p)))) (set! G2fef@G2fea (make-record-type-descriptor 'interaction-env '#f 'G2fed '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2ff1@G2fec '#f) (set! G2ff3@G2feb (make-record-constructor-descriptor G2fef@G2fea '#f G2ff1@G2fec)) (set! G2ff6@interaction-env? (record-predicate G2fef@G2fea)) (set! G2ff8@make-interaction-env (record-constructor G2ff3@G2feb)) (set! G2ffa@interaction-env-rib (record-accessor G2fef@G2fea '0)) (set! G2ffc@interaction-env-r (record-accessor G2fef@G2fea '1)) (set! G2ffe@interaction-env-locs (record-accessor G2fef@G2fea '2)) (set! G3000@set-interaction-env-rib! (record-mutator G2fef@G2fea '0)) (set! G3002@set-interaction-env-r! (record-mutator G2fef@G2fea '1)) (set! G3004@set-interaction-env-locs! (record-mutator G2fef@G2fea '2)) (set! G3006@rp (G28e9@G281c@make-record-printer 'interaction-env (lambda (G460b@x G460c@p G460d@wr) (display '"#<environment>" G460c@p)))) (set! G3008@interaction-environment-symbols (lambda () (G3010@environment-symbols (G3046@interaction-environment)))) (set! G300a@environment-bindings (lambda (G4611@e) (vector->list (vector-map (lambda (G4613@name G4614@label) (G300c@parse-binding (cons G4613@name (G2b66@G2a0c@imported-label->binding G4614@label)))) (G2fdd@env-names G4611@e) (G2fdf@env-labels G4611@e))))) (set! G300c@parse-binding (lambda (G4617@b) (cons (car G4617@b) ((lambda (G4619@t) (if (memv G4619@t '(core-prim global)) 'procedure (if (memv G4619@t '(core-macro macro global-macro)) 'syntax (if (memv G4619@t '($core-rtd)) 'record (if (eq? (car G4617@b) (cadr G4617@b)) 'syntax 'unknown))))) (cadr G4617@b))))) (set! G300e@environment? (lambda (G461b@x) (or (G2fd9@env? G461b@x) (G2ff6@interaction-env? G461b@x)))) (set! G3010@environment-symbols (lambda (G461d@x) (if (G2fd9@env? G461d@x) (vector->list (G2fdd@env-names G461d@x)) (if (G2ff6@interaction-env? G461d@x) (map values (G2ce7@rib-sym* (G2ffa@interaction-env-rib G461d@x))) (assertion-violation 'environment-symbols '"not an environment" G461d@x))))) (set! G3012@environment (lambda G461f@imp* ((lambda (G4621@itc) ((lambda (G4625@G4623 G4626@G4624) ((lambda (G4629@swap) (dynamic-wind G4629@swap (lambda () (call-with-values (lambda () (G2fb6@parse-import-spec* G461f@imp*)) (lambda (G462d@G462b G462e@G462c) ((lambda (G4631@subst-labels G4632@subst-names) (G2fdb@make-env G4632@subst-names G4631@subst-labels G4621@itc)) G462e@G462c G462d@G462b)))) G4629@swap)) (lambda () ((lambda (G4635@t) (begin (G4625@G4623 G4626@G4624) (set! G4626@G4624 G4635@t))) (G4625@G4623))))) G2fc0@imp-collector G4621@itc)) (G2fba@make-collector)))) (set! G3014@null-environment (lambda (G4637@n) (begin (if (not (eqv? G4637@n '5)) (assertion-violation 'null-environment '"not 5" G4637@n) (void)) (G3012@environment '(psyntax null-environment-5))))) (set! G3016@scheme-report-environment (lambda (G4639@n) (begin (if (not (eqv? G4639@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4639@n) (void)) (G3012@environment '(psyntax scheme-report-environment-5))))) (set! G3018@expand (lambda (G463b@x G463c@env) (if (G2fd9@env? G463c@env) ((lambda (G463f@rib) ((lambda (G4641@x G4642@itc G4643@rtc G4644@vtc) ((lambda (G4649@x) (begin (G2d07@seal-rib! G463f@rib) (values G4649@x (G4643@rtc)))) ((lambda (G4653@G464b G4654@G464c G4655@G464d G4656@G464e G4657@G464f G4658@G4650 G4659@G4651 G465a@G4652) ((lambda (G4663@swap) (dynamic-wind G4663@swap (lambda () (G2f73@chi-expr G4641@x '() '())) G4663@swap)) (lambda () (begin ((lambda (G4665@t) (begin (G4653@G464b G4657@G464f) (set! G4657@G464f G4665@t))) (G4653@G464b)) ((lambda (G4667@t) (begin (G4654@G464c G4658@G4650) (set! G4658@G4650 G4667@t))) (G4654@G464c)) ((lambda (G4669@t) (begin (G4655@G464d G4659@G4651) (set! G4659@G4651 G4669@t))) (G4655@G464d)) ((lambda (G466b@t) (begin (G4656@G464e G465a@G4652) (set! G465a@G4652 G466b@t))) (G4656@G464e)))))) G3048@top-level-context G2fbc@inv-collector G2fbe@vis-collector G2fc0@imp-collector '#f G4643@rtc G4644@vtc G4642@itc))) (G2d1a@make-stx G463b@x G2cc8@top-mark* (list G463f@rib) '()) (G2fe1@env-itc G463c@env) (G2fba@make-collector) (G2fba@make-collector))) (G2fb8@make-top-rib (G2fdd@env-names G463c@env) (G2fdf@env-labels G463c@env))) (if (G2ff6@interaction-env? G463c@env) ((lambda (G466d@rib G466e@r G466f@rtc) ((lambda (G4673@x) (call-with-values (lambda () ((lambda (G467f@G4677 G4680@G4678 G4681@G4679 G4682@G467a G4683@G467b G4684@G467c G4685@G467d G4686@G467e) ((lambda (G468f@swap) (dynamic-wind G468f@swap (lambda () (G2fc4@chi-interaction-expr G4673@x G466d@rib G466e@r)) G468f@swap)) (lambda () (begin ((lambda (G4691@t) (begin (G467f@G4677 G4683@G467b) (set! G4683@G467b G4691@t))) (G467f@G4677)) ((lambda (G4693@t) (begin (G4680@G4678 G4684@G467c) (set! G4684@G467c G4693@t))) (G4680@G4678)) ((lambda (G4695@t) (begin (G4681@G4679 G4685@G467d) (set! G4685@G467d G4695@t))) (G4681@G4679)) ((lambda (G4697@t) (begin (G4682@G467a G4686@G467e) (set! G4686@G467e G4697@t))) (G4682@G467a)))))) G3048@top-level-context G2fbc@inv-collector G2fbe@vis-collector G2fc0@imp-collector G463c@env G466f@rtc (G2fba@make-collector) (G2fba@make-collector))) (lambda (G4699@G4675 G469a@G4676) ((lambda (G469d@r^ G469e@e) (begin (G3002@set-interaction-env-r! G463c@env G469d@r^) (values G469e@e (G466f@rtc)))) G469a@G4676 G4699@G4675)))) (G2d1a@make-stx G463b@x G2cc8@top-mark* (list G466d@rib) '()))) (G2ffa@interaction-env-rib G463c@env) (G2ffc@interaction-env-r G463c@env) (G2fba@make-collector)) (assertion-violation 'expand '"not an environment" G463c@env))))) (set! G301a@eval (lambda (G46a1@x G46a2@env) (begin (if (not (G300e@environment? G46a2@env)) (error 'eval '"not an environment" G46a2@env) (void)) (call-with-values (lambda () (G3018@expand G46a1@x G46a2@env)) (lambda (G46a7@G46a5 G46a8@G46a6) ((lambda (G46ab@invoke-req* G46ac@x) (begin (for-each G2b67@G2a0e@invoke-library G46ab@invoke-req*) (eval-core (G2940@G28f8@expanded->core G46ac@x)))) G46a8@G46a6 G46a7@G46a5)))))) (set! G301c@library-expander (lambda G4714 ((lambda (G4715) (if (= G4715 '3) (apply (lambda (G46af@x G46b0@filename G46b1@verify-name) ((lambda (G46b6@build-visit-code G46b8@visit!) (begin (set! G46b6@build-visit-code (lambda (G4702@macro*) (if (null? G4702@macro*) (G2cae@G2c20@build-void) (G2cad@G2c1e@build-sequence '#f (map (lambda (G4704@x) ((lambda (G4706@loc G4707@src) (list 'set! G4706@loc G4707@src)) (car G4704@x) (cddr G4704@x))) G4702@macro*))))) (set! G46b8@visit! (lambda (G46fa@macro*) (for-each (lambda (G46fc@x) ((lambda (G46fe@loc G46ff@proc) (set-symbol-value! G46fe@loc G46ff@proc)) (car G46fc@x) (cadr G46fc@x))) G46fa@macro*))) (call-with-values (lambda () (G2fc8@core-library-expander G46af@x G46b1@verify-name)) (lambda (G46c2@G46b9 G46c3@G46ba G46c4@G46bb G46c5@G46bc G46c6@G46bd G46c7@G46be G46c8@G46bf G46c9@G46c0 G46ca@G46c1) ((lambda (G46d4@export-env G46d5@export-subst G46d6@macro* G46d7@invoke-code G46d8@vis* G46d9@inv* G46da@imp* G46db@ver G46dc@name) ((lambda (G46e6@id G46e7@name G46e8@ver G46e9@imp* G46ea@vis* G46eb@inv* G46ec@visit-proc G46ed@invoke-proc G46ee@visit-code G46ef@invoke-code) (begin (G2b65@G2a0a@install-library G46e6@id G46e7@name G46e8@ver G46e9@imp* G46ea@vis* G46eb@inv* G46d5@export-subst G46d4@export-env G46ec@visit-proc G46ed@invoke-proc G46ee@visit-code G46ef@invoke-code '#t G46b0@filename) (values G46e6@id G46e7@name G46e8@ver G46e9@imp* G46ea@vis* G46eb@inv* G46ef@invoke-code G46ee@visit-code G46d5@export-subst G46d4@export-env))) (gensym) G46dc@name G46db@ver (map G2b6b@G2a16@library-spec G46da@imp*) (map G2b6b@G2a16@library-spec G46d8@vis*) (map G2b6b@G2a16@library-spec G46d9@inv*) (lambda () (G46b8@visit! G46d6@macro*)) (lambda () (eval-core (G2940@G28f8@expanded->core G46d7@invoke-code))) (G46b6@build-visit-code G46d6@macro*) G46d7@invoke-code)) G46ca@G46c1 G46c9@G46c0 G46c8@G46bf G46c7@G46be G46c6@G46bd G46c5@G46bc G46c4@G46bb G46c3@G46ba G46c2@G46b9))))) '#f '#f)) G4714) (if (= G4715 '2) (apply (lambda (G470a@x G470b@filename) (G301c@library-expander G470a@x G470b@filename (lambda (G470e@x) (values)))) G4714) (if (= G4715 '1) (apply (lambda (G4710@x) (G301c@library-expander G4710@x '#f (lambda (G4712@x) (values)))) G4714) (error 'apply '"invalid arg count"))))) (length G4714)))) (set! G301e@boot-library-expand (lambda (G4716@x) (call-with-values (lambda () (G301c@library-expander G4716@x)) (lambda (G4722@G4718 G4723@G4719 G4724@G471a G4725@G471b G4726@G471c G4727@G471d G4728@G471e G4729@G471f G472a@G4720 G472b@G4721) ((lambda (G4736@export-env G4737@export-subst G4738@visit-code G4739@invoke-code G473a@inv* G473b@vis* G473c@imp* G473d@ver G473e@name G473f@id) (values G473e@name G4739@invoke-code G4737@export-subst G4736@export-env)) G472b@G4721 G472a@G4720 G4729@G471f G4728@G471e G4727@G471d G4726@G471c G4725@G471b G4724@G471a G4723@G4719 G4722@G4718))))) (set! G3020@rev-map-append (lambda (G474a@f G474b@ls G474c@ac) (if (null? G474b@ls) G474c@ac (G3020@rev-map-append G474a@f (cdr G474b@ls) (cons (G474a@f (car G474b@ls)) G474c@ac))))) (set! G3022@build-exports (lambda (G4750@lex*+loc* G4751@init*) (G2cad@G2c1e@build-sequence '#f (cons (G2cae@G2c20@build-void) (G3020@rev-map-append (lambda (G4754@x) (list 'set! (cdr G4754@x) (car G4754@x))) G4750@lex*+loc* G4751@init*))))) (set! G3024@make-export-subst (lambda (G4756@name* G4757@id*) (map (lambda (G475a@name G475b@id) ((lambda (G475e@label) (begin (if (not G475e@label) (G303a@syntax-violation '#f '"cannot export unbound identifier" G475b@id) (void)) (cons G475a@name G475e@label))) (G2d6a@id->label G475b@id))) G4756@name* G4757@id*))) (set! G3026@make-export-env/macros (lambda (G4760@lex* G4761@loc* G4762@r) ((lambda (G4767@lookup) (begin (set! G4767@lookup (lambda (G4784@x) ((letrec ((G4786@f (lambda (G4788@x G4789@lex* G478a@loc*) (if (pair? G4789@lex*) (if (eq? G4788@x (car G4789@lex*)) (car G478a@loc*) (G4786@f G4788@x (cdr G4789@lex*) (cdr G478a@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4786@f) G4784@x G4760@lex* G4761@loc*))) ((letrec ((G4768@f (lambda (G476a@r G476b@env G476c@global* G476d@macro*) (if (null? G476a@r) (values G476b@env G476c@global* G476d@macro*) ((lambda (G4772@x) ((lambda (G4774@label G4775@b) ((lambda (G4778@t) (if (memv G4778@t '(lexical)) ((lambda (G477a@v) ((lambda (G477c@loc G477d@type) (G4768@f (cdr G476a@r) (cons (cons* G4774@label G477d@type G477c@loc) G476b@env) (cons (cons (G2edb@lexical-var G477a@v) G477c@loc) G476c@global*) G476d@macro*)) (G4767@lookup (G2edb@lexical-var G477a@v)) (if (G2edd@lexical-mutable? G477a@v) 'mutable 'global))) (G2d74@binding-value G4775@b)) (if (memv G4778@t '(local-macro)) ((lambda (G4780@loc) (G4768@f (cdr G476a@r) (cons (cons* G4774@label 'global-macro G4780@loc) G476b@env) G476c@global* (cons (cons G4780@loc (G2d74@binding-value G4775@b)) G476d@macro*))) (gensym)) (if (memv G4778@t '(local-macro!)) ((lambda (G4782@loc) (G4768@f (cdr G476a@r) (cons (cons* G4774@label 'global-macro! G4782@loc) G476b@env) G476c@global* (cons (cons G4782@loc (G2d74@binding-value G4775@b)) G476d@macro*))) (gensym)) (if (memv G4778@t '($rtd $module)) (G4768@f (cdr G476a@r) (cons G4772@x G476b@env) G476c@global* G476d@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d72@binding-type G4775@b) (G2d74@binding-value G4775@b))))))) (G2d72@binding-type G4775@b))) (car G4772@x) (cdr G4772@x))) (car G476a@r)))))) G4768@f) G4762@r '() '() '()))) '#f))) (set! G3028@generate-temporaries (lambda (G478e@ls) ((lambda (G4790@t) ((lambda (G4792@ls/false) (if G4792@ls/false (apply (lambda (G4794@ls) (map (lambda (G4796@x) (G2d1a@make-stx ((lambda (G4798@x) (if (or (symbol? G4798@x) (string? G4798@x)) (gensym G4798@x) (gensym 't))) (G3040@syntax->datum G4796@x)) G2cc8@top-mark* '() '())) G4794@ls)) G4792@ls/false) ((lambda (G479a@t) ((lambda (G479c@ls/false) (if G479c@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G479c@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G479a@t))) (G2f4f@syntax-dispatch G479a@t '_))) G4790@t))) (G2f4f@syntax-dispatch G4790@t 'each-any))) G478e@ls))) (set! G302a@free-identifier=? (lambda (G479e@x G479f@y) (if (G2d50@id? G479e@x) (if (G2d50@id? G479f@y) (G2d58@free-id=? G479e@x G479f@y) (assertion-violation 'free-identifier=? '"not an identifier" G479f@y)) (assertion-violation 'free-identifier=? '"not an identifier" G479e@x)))) (set! G302c@bound-identifier=? (lambda (G47a2@x G47a3@y) (if (G2d50@id? G47a2@x) (if (G2d50@id? G47a3@y) (G2d56@bound-id=? G47a2@x G47a3@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47a3@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47a2@x)))) (set! G302e@make-source-condition (lambda (G47a6@x) ((lambda (G47b0@G47ab G47b2@G47ad G47b4@G47ac G47b7@G47aa G47b9@make-source-condition G47bb@G47a8 G47bd@G47a9 G47bf@source-condition? G47c1@source-filename G47c3@source-character) (begin (set! G47b0@G47ab (make-record-type-descriptor '&source-information G4c02@G4953@&condition-rtd 'G47ae '#f '#f '#((immutable file-name) (immutable character)))) (set! G47b2@G47ad '#f) (set! G47b4@G47ac (make-record-constructor-descriptor G47b0@G47ab G4c03@G4955@&condition-rcd G47b2@G47ad)) (set! G47b7@G47aa (record-predicate G47b0@G47ab)) (set! G47b9@make-source-condition (record-constructor G47b4@G47ac)) (set! G47bb@G47a8 (record-accessor G47b0@G47ab '0)) (set! G47bd@G47a9 (record-accessor G47b0@G47ab '1)) (set! G47bf@source-condition? (condition-predicate G47b0@G47ab)) (set! G47c1@source-filename (condition-accessor G47b0@G47ab G47bb@G47a8)) (set! G47c3@source-character (condition-accessor G47b0@G47ab G47bd@G47a9)) (if (pair? G47a6@x) (G47b9@make-source-condition (car G47a6@x) (cdr G47a6@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3030@extract-position-condition (lambda (G47c4@x) (G302e@make-source-condition (G3032@expression-position G47c4@x)))) (set! G3032@expression-position (lambda (G47c6@x) (and (G2d18@stx? G47c6@x) ((lambda (G47c8@x) (and (G28e1@G280c@annotation? G47c8@x) (G28e2@G280e@annotation-source G47c8@x))) (G2d1c@stx-expr G47c6@x))))) (set! G3034@assertion-error (lambda (G47ca@expr G47cb@pos) (raise (condition (G4c32@G4a15@make-assertion-violation) (G4c44@G4a45@make-who-condition 'assert) (G4c08@G49a8@make-message-condition '"assertion failed") (G4c3a@G4a2b@make-irritants-condition (list G47ca@expr)) (G302e@make-source-condition G47cb@pos))))) (set! G3036@syntax-error (lambda (G47ce@x . G47d0@args) (begin (if (not (for-all string? G47d0@args)) (assertion-violation 'syntax-error '"invalid argument" G47d0@args) (void)) (raise (condition (G4c08@G49a8@make-message-condition (if (null? G47d0@args) '"invalid syntax" (apply string-append G47d0@args))) (G4c66@G4a9f@make-syntax-violation (G3040@syntax->datum G47ce@x) '#f) (G3030@extract-position-condition G47ce@x)))))) (set! G3038@syntax-violation* (lambda (G47d2@who G47d3@msg G47d4@form G47d5@condition-object) (begin (if (not (string? G47d3@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47d3@msg) (void)) ((lambda (G47da@who) (raise (condition (if G47da@who (G4c44@G4a45@make-who-condition G47da@who) (condition)) (G4c08@G49a8@make-message-condition G47d3@msg) G47d5@condition-object (G3030@extract-position-condition G47d4@form)))) (if (or (string? G47d2@who) (symbol? G47d2@who)) G47d2@who (if (not G47d2@who) ((lambda (G47dc@t) ((lambda (G47de@ls/false) (if (and G47de@ls/false (apply (lambda (G47e0@id) (G2d50@id? G47e0@id)) G47de@ls/false)) (apply (lambda (G47e2@id) (G3040@syntax->datum G47e2@id)) G47de@ls/false) ((lambda (G47e4@t) ((lambda (G47e6@ls/false) (if (and G47e6@ls/false (apply (lambda (G47e8@id G47e9@rest) (G2d50@id? G47e8@id)) G47e6@ls/false)) (apply (lambda (G47ec@id G47ed@rest) (G3040@syntax->datum G47ec@id)) G47e6@ls/false) ((lambda (G47f0@t) ((lambda (G47f2@ls/false) (if G47f2@ls/false (apply (lambda () '#f) G47f2@ls/false) (G303a@syntax-violation '#f '"invalid syntax" G47f0@t))) (G2f4f@syntax-dispatch G47f0@t '_))) G47e4@t))) (G2f4f@syntax-dispatch G47e4@t '(any . any)))) G47dc@t))) (G2f4f@syntax-dispatch G47dc@t 'any))) G47d4@form) (assertion-violation 'syntax-violation '"invalid who argument" G47d2@who))))))) (set! G303a@syntax-violation (lambda G4802 ((lambda (G4803) (if (= G4803 '3) (apply (lambda (G47f4@who G47f5@msg G47f6@form) (G303a@syntax-violation G47f4@who G47f5@msg G47f6@form '#f)) G4802) (if (= G4803 '4) (apply (lambda (G47fa@who G47fb@msg G47fc@form G47fd@subform) (G3038@syntax-violation* G47fa@who G47fb@msg G47fc@form (G4c66@G4a9f@make-syntax-violation (G3040@syntax->datum G47fc@form) (G3040@syntax->datum G47fd@subform)))) G4802) (error 'apply '"invalid arg count")))) (length G4802)))) (set! G303c@identifier? (lambda (G4804@x) (G2d50@id? G4804@x))) (set! G303e@datum->syntax (lambda (G4806@id G4807@datum) (if (G2d50@id? G4806@id) (G2d2e@datum->stx G4806@id G4807@datum) (assertion-violation 'datum->syntax '"not an identifier" G4806@id)))) (set! G3040@syntax->datum (lambda (G480a@x) (G2d66@stx->datum G480a@x))) (set! G3042@compile-r6rs-top-level (lambda (G480c@x*) (call-with-values (lambda () (G2fcc@top-level-expander G480c@x*)) (lambda (G4810@G480e G4811@G480f) ((lambda (G4814@invoke-code G4815@lib*) (lambda () (begin (for-each G2b67@G2a0e@invoke-library G4815@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2940@G28f8@expanded->core G4814@invoke-code)) (void)) (eval-core (G2940@G28f8@expanded->core G4814@invoke-code))))) G4811@G480f G4810@G480e))))) (set! G3044@pre-compile-r6rs-top-level (lambda (G4818@x*) (call-with-values (lambda () (G2fcc@top-level-expander G4818@x*)) (lambda (G481c@G481a G481d@G481b) ((lambda (G4820@invoke-code G4821@lib*) (begin (for-each G2b67@G2a0e@invoke-library G4821@lib*) (G28ea@G281e@compile-core (G2940@G28f8@expanded->core G4820@invoke-code)))) G481d@G481b G481c@G481a))))) (set! G3046@interaction-environment ((lambda (G4824@the-env) (lambda () (or G4824@the-env ((lambda (G4826@lib G4827@rib) (begin ((lambda (G482a@subst) (begin (G2cf1@set-rib-sym*! G4827@rib (map car G482a@subst)) (G2cf3@set-rib-mark**! G4827@rib (map (lambda (G482c@x) G2cc8@top-mark*) G482a@subst)) (G2cf5@set-rib-label*! G4827@rib (map cdr G482a@subst)))) (G2b3c@G29b8@library-subst G4826@lib)) ((lambda (G482e@env) (begin (set! G4824@the-env G482e@env) G482e@env)) (G2ff8@make-interaction-env G4827@rib '() '())))) (G2b60@G2a00@find-library-by-name '(mosh interaction)) (G2cfd@make-cache-rib))))) '#f)) (set! G3048@top-level-context (G28ec@G2822@make-parameter '#f)) (begin (set! G493e@G3048@top-level-context G3048@top-level-context) (set! G493d@G3046@interaction-environment G3046@interaction-environment) (set! G493c@G3044@pre-compile-r6rs-top-level G3044@pre-compile-r6rs-top-level) (set! G493b@G3042@compile-r6rs-top-level G3042@compile-r6rs-top-level) (set! G493a@G3040@syntax->datum G3040@syntax->datum) (set! G4939@G303e@datum->syntax G303e@datum->syntax) (set! G4938@G303c@identifier? G303c@identifier?) (set! G4937@G303a@syntax-violation G303a@syntax-violation) (set! G4936@G3038@syntax-violation* G3038@syntax-violation*) (set! G4935@G3036@syntax-error G3036@syntax-error) (set! G4934@G3034@assertion-error G3034@assertion-error) (set! G4933@G3032@expression-position G3032@expression-position) (set! G4932@G3030@extract-position-condition G3030@extract-position-condition) (set! G4931@G302e@make-source-condition G302e@make-source-condition) (set! G4930@G302c@bound-identifier=? G302c@bound-identifier=?) (set! G492f@G302a@free-identifier=? G302a@free-identifier=?) (set! G492e@G3028@generate-temporaries G3028@generate-temporaries) (set! G492d@G3026@make-export-env/macros G3026@make-export-env/macros) (set! G492c@G3024@make-export-subst G3024@make-export-subst) (set! G492b@G3022@build-exports G3022@build-exports) (set! G492a@G3020@rev-map-append G3020@rev-map-append) (set! G4929@G301e@boot-library-expand G301e@boot-library-expand) (set! G4928@G301c@library-expander G301c@library-expander) (set! G4927@G301a@eval G301a@eval) (set! G4926@G3018@expand G3018@expand) (set! G4925@G3016@scheme-report-environment G3016@scheme-report-environment) (set! G4924@G3014@null-environment G3014@null-environment) (set! G4923@G3012@environment G3012@environment) (set! G4922@G3010@environment-symbols G3010@environment-symbols) (set! G4921@G300e@environment? G300e@environment?) (set! G4920@G300c@parse-binding G300c@parse-binding) (set! G491f@G300a@environment-bindings G300a@environment-bindings) (set! G491e@G3008@interaction-environment-symbols G3008@interaction-environment-symbols) (set! G491d@G3006@rp G3006@rp) (set! G491c@G3004@set-interaction-env-locs! G3004@set-interaction-env-locs!) (set! G491b@G3002@set-interaction-env-r! G3002@set-interaction-env-r!) (set! G491a@G3000@set-interaction-env-rib! G3000@set-interaction-env-rib!) (set! G4919@G2ffe@interaction-env-locs G2ffe@interaction-env-locs) (set! G4918@G2ffc@interaction-env-r G2ffc@interaction-env-r) (set! G4917@G2ffa@interaction-env-rib G2ffa@interaction-env-rib) (set! G4916@G2ff8@make-interaction-env G2ff8@make-interaction-env) (set! G4915@G2ff6@interaction-env? G2ff6@interaction-env?) (set! G4914@G2ff3@G2feb G2ff3@G2feb) (set! G4913@G2ff1@G2fec G2ff1@G2fec) (set! G4912@G2fef@G2fea G2fef@G2fea) (set! G4911@G2fe9@rp G2fe9@rp) (set! G4910@G2fe7@set-env-itc! G2fe7@set-env-itc!) (set! G490f@G2fe5@set-env-labels! G2fe5@set-env-labels!) (set! G490e@G2fe3@set-env-names! G2fe3@set-env-names!) (set! G490d@G2fe1@env-itc G2fe1@env-itc) (set! G490c@G2fdf@env-labels G2fdf@env-labels) (set! G490b@G2fdd@env-names G2fdd@env-names) (set! G490a@G2fdb@make-env G2fdb@make-env) (set! G4909@G2fd9@env? G2fd9@env?) (set! G4908@G2fd6@G2fce G2fd6@G2fce) (set! G4907@G2fd4@G2fcf G2fd4@G2fcf) (set! G4906@G2fd2@G2fcd G2fd2@G2fcd) (set! G4905@G2fcc@top-level-expander G2fcc@top-level-expander) (set! G4904@G2fca@parse-top-level-program G2fca@parse-top-level-program) (set! G4903@G2fc8@core-library-expander G2fc8@core-library-expander) (set! G4902@G2fc6@library-body-expander G2fc6@library-body-expander) (set! G4901@G2fc4@chi-interaction-expr G2fc4@chi-interaction-expr) (set! G4900@G2fc2@chi-library-internal G2fc2@chi-library-internal) (set! G48ff@G2fc0@imp-collector G2fc0@imp-collector) (set! G48fe@G2fbe@vis-collector G2fbe@vis-collector) (set! G48fd@G2fbc@inv-collector G2fbc@inv-collector) (set! G48fc@G2fba@make-collector G2fba@make-collector) (set! G48fb@G2fb8@make-top-rib G2fb8@make-top-rib) (set! G48fa@G2fb6@parse-import-spec* G2fb6@parse-import-spec*) (set! G48f9@G2fb4@parse-library G2fb4@parse-library) (set! G48f8@G2fb2@parse-library-name G2fb2@parse-library-name) (set! G48f7@G2fb0@parse-exports G2fb0@parse-exports) (set! G48f6@G2fae@expand-transformer G2fae@expand-transformer) (set! G48f5@G2fac@chi-body* G2fac@chi-body*) (set! G48f4@G2faa@chi-internal-module G2faa@chi-internal-module) (set! G48f3@G2fa8@module-interface-exp-id* G2fa8@module-interface-exp-id*) (set! G48f2@G2fa6@set-module-interface-exp-lab-vec! G2fa6@set-module-interface-exp-lab-vec!) (set! G48f1@G2fa4@set-module-interface-exp-id-vec! G2fa4@set-module-interface-exp-id-vec!) (set! G48f0@G2fa2@set-module-interface-first-mark! G2fa2@set-module-interface-first-mark!) (set! G48ef@G2fa0@module-interface-exp-lab-vec G2fa0@module-interface-exp-lab-vec) (set! G48ee@G2f9e@module-interface-exp-id-vec G2f9e@module-interface-exp-id-vec) (set! G48ed@G2f9c@module-interface-first-mark G2f9c@module-interface-first-mark) (set! G48ec@G2f9a@make-module-interface G2f9a@make-module-interface) (set! G48eb@G2f98@module-interface? G2f98@module-interface?) (set! G48ea@G2f95@G2f8d G2f95@G2f8d) (set! G48e9@G2f93@G2f8e G2f93@G2f8e) (set! G48e8@G2f91@G2f8c G2f91@G2f8c) (set! G48e7@G2f8b@parse-module G2f8b@parse-module) (set! G48e6@G2f89@chi-internal G2f89@chi-internal) (set! G48e5@G2f87@find-dups G2f87@find-dups) (set! G48e4@G2f85@find-bound=? G2f85@find-bound=?) (set! G48e3@G2f83@chi-rhs* G2f83@chi-rhs*) (set! G48e2@G2f81@expand-interaction-rhs*/init* G2f81@expand-interaction-rhs*/init*) (set! G48e1@G2f7f@chi-rhs G2f7f@chi-rhs) (set! G48e0@G2f7d@chi-defun G2f7d@chi-defun) (set! G48df@G2f7b@chi-lambda-clause* G2f7b@chi-lambda-clause*) (set! G48de@G2f79@chi-lambda-clause G2f79@chi-lambda-clause) (set! G48dd@G2f77@verify-formals G2f77@verify-formals) (set! G48dc@G2f75@chi-set! G2f75@chi-set!) (set! G48db@G2f73@chi-expr G2f73@chi-expr) (set! G48da@G2f71@chi-application G2f71@chi-application) (set! G48d9@G2f6f@chi-expr* G2f6f@chi-expr*) (set! G48d8@G2f6d@chi-global-macro G2f6d@chi-global-macro) (set! G48d7@G2f6b@chi-local-macro G2f6b@chi-local-macro) (set! G48d6@G2f69@chi-macro G2f69@chi-macro) (set! G48d5@G2f67@do-macro-call G2f67@do-macro-call) (set! G48d4@G2f65@local-macro-transformer G2f65@local-macro-transformer) (set! G48d3@G2f63@macro-transformer G2f63@macro-transformer) (set! G48d2@G2f61@symbol-macro G2f61@symbol-macro) (set! G48d1@G2f5f@file-options-macro G2f5f@file-options-macro) (set! G48d0@G2f5d@core-macro-transformer G2f5d@core-macro-transformer) (set! G48cf@G2f5b@syntax-transformer G2f5b@syntax-transformer) (set! G48ce@G2f59@ellipsis-map G2f59@ellipsis-map) (set! G48cd@G2f57@syntax-case-transformer G2f57@syntax-case-transformer) (set! G48cc@G2f55@verify-literals G2f55@verify-literals) (set! G48cb@G2f53@underscore? G2f53@underscore?) (set! G48ca@G2f51@ellipsis? G2f51@ellipsis?) (set! G48c9@G2f4f@syntax-dispatch G2f4f@syntax-dispatch) (set! G48c8@G2f4d@convert-pattern G2f4d@convert-pattern) (set! G48c7@G2f4b@foreign-call-transformer G2f4b@foreign-call-transformer) (set! G48c6@G2f49@parameterize-macro G2f49@parameterize-macro) (set! G48c5@G2f47@incorrect-usage-macro G2f47@incorrect-usage-macro) (set! G48c4@G2f45@define-condition-type-macro G2f45@define-condition-type-macro) (set! G48c3@G2f43@define-record-type-macro G2f43@define-record-type-macro) (set! G48c2@G2f41@define-struct-macro G2f41@define-struct-macro) (set! G48c1@G2f3f@quasisyntax-macro G2f3f@quasisyntax-macro) (set! G48c0@G2f3d@quasiquote-macro G2f3d@quasiquote-macro) (set! G48bf@G2f3b@syntax-rules-macro G2f3b@syntax-rules-macro) (set! G48be@G2f39@include-into-macro G2f39@include-into-macro) (set! G48bd@G2f37@include-macro G2f37@include-macro) (set! G48bc@G2f35@do-include G2f35@do-include) (set! G48bb@G2f33@cond-macro G2f33@cond-macro) (set! G48ba@G2f31@and-macro G2f31@and-macro) (set! G48b9@G2f2f@or-macro G2f2f@or-macro) (set! G48b8@G2f2d@let*-macro G2f2d@let*-macro) (set! G48b7@G2f2b@do-macro G2f2b@do-macro) (set! G48b6@G2f29@identifier-syntax-macro G2f29@identifier-syntax-macro) (set! G48b5@G2f27@endianness-macro G2f27@endianness-macro) (set! G48b4@G2f25@assert-macro G2f25@assert-macro) (set! G48b3@G2f23@delay-macro G2f23@delay-macro) (set! G48b2@G2f21@time-macro G2f21@time-macro) (set! G48b1@G2f1f@define-enumeration-macro G2f1f@define-enumeration-macro) (set! G48b0@G2f1d@guard-macro G2f1d@guard-macro) (set! G48af@G2f1b@trace-letrec-syntax-macro G2f1b@trace-letrec-syntax-macro) (set! G48ae@G2f19@trace-let-syntax-macro G2f19@trace-let-syntax-macro) (set! G48ad@G2f17@trace-let/rec-syntax G2f17@trace-let/rec-syntax) (set! G48ac@G2f15@trace-define-syntax-macro G2f15@trace-define-syntax-macro) (set! G48ab@G2f13@trace-define-macro G2f13@trace-define-macro) (set! G48aa@G2f11@trace-lambda-macro G2f11@trace-lambda-macro) (set! G48a9@G2f0f@let*-values-macro G2f0f@let*-values-macro) (set! G48a8@G2f0d@let-values-macro G2f0d@let-values-macro) (set! G48a7@G2f0b@let-macro G2f0b@let-macro) (set! G48a6@G2f09@invalid-fmls-error G2f09@invalid-fmls-error) (set! G48a5@G2f07@with-syntax-macro G2f07@with-syntax-macro) (set! G48a4@G2f05@bless G2f05@bless) (set! G48a3@G2f03@lambda-transformer G2f03@lambda-transformer) (set! G48a2@G2f01@case-lambda-transformer G2f01@case-lambda-transformer) (set! G48a1@G2eff@quote-transformer G2eff@quote-transformer) (set! G48a0@G2efd@case-macro G2efd@case-macro) (set! G489f@G2efb@or-transformer G2efb@or-transformer) (set! G489e@G2ef9@and-transformer G2ef9@and-transformer) (set! G489d@G2ef7@if-transformer G2ef7@if-transformer) (set! G489c@G2ef5@unless-macro G2ef5@unless-macro) (set! G489b@G2ef3@when-macro G2ef3@when-macro) (set! G489a@G2ef1@record-constructor-descriptor-transformer G2ef1@record-constructor-descriptor-transformer) (set! G4899@G2eef@record-type-descriptor-transformer G2eef@record-type-descriptor-transformer) (set! G4898@G2eed@type-descriptor-transformer G2eed@type-descriptor-transformer) (set! G4897@G2eeb@fluid-let-syntax-transformer G2eeb@fluid-let-syntax-transformer) (set! G4896@G2ee9@letrec*-transformer G2ee9@letrec*-transformer) (set! G4895@G2ee7@letrec-transformer G2ee7@letrec-transformer) (set! G4894@G2ee5@letrec-helper G2ee5@letrec-helper) (set! G4893@G2ee3@add-lexicals G2ee3@add-lexicals) (set! G4892@G2ee1@add-lexical G2ee1@add-lexical) (set! G4891@G2edf@set-lexical-mutable! G2edf@set-lexical-mutable!) (set! G4890@G2edd@lexical-mutable? G2edd@lexical-mutable?) (set! G488f@G2edb@lexical-var G2edb@lexical-var) (set! G488e@G2ed9@scheme-stx G2ed9@scheme-stx) (set! G488d@G2ed7@scheme-stx-hashtable G2ed7@scheme-stx-hashtable) (set! G488c@G2ed5@parse-define-syntax G2ed5@parse-define-syntax) (set! G488b@G2ed3@parse-define G2ed3@parse-define) (set! G488a@G2d90@make-eval-transformer G2d90@make-eval-transformer) (set! G4889@G2d8e@variable-transformer-procedure G2d8e@variable-transformer-procedure) (set! G4888@G2d8c@variable-transformer? G2d8c@variable-transformer?) (set! G4887@G2d8a@make-variable-transformer G2d8a@make-variable-transformer) (set! G4886@G2d88@sanitize-binding G2d88@sanitize-binding) (set! G4885@G2d78@syntax-type G2d78@syntax-type) (set! G4884@G2d76@raise-unbound-error G2d76@raise-unbound-error) (set! G4883@G2d74@binding-value G2d74@binding-value) (set! G4882@G2d72@binding-type G2d72@binding-type) (set! G4881@G2d70@make-binding G2d70@make-binding) (set! G4880@G2d6e@label->binding G2d6e@label->binding) (set! G487f@G2d6c@id->real-label G2d6c@id->real-label) (set! G487e@G2d6a@id->label G2d6a@id->label) (set! G487d@G2d68@same-marks*? G2d68@same-marks*?) (set! G487c@G2d66@stx->datum G2d66@stx->datum) (set! G487b@G2d64@strip G2d64@strip) (set! G487a@G2d62@strip-annotations G2d62@strip-annotations) (set! G4879@G2d60@self-evaluating? G2d60@self-evaluating?) (set! G4878@G2d5e@bound-id-member? G2d5e@bound-id-member?) (set! G4877@G2d5c@distinct-bound-ids? G2d5c@distinct-bound-ids?) (set! G4876@G2d5a@valid-bound-ids? G2d5a@valid-bound-ids?) (set! G4875@G2d58@free-id=? G2d58@free-id=?) (set! G4874@G2d56@bound-id=? G2d56@bound-id=?) (set! G4873@G2d54@same-marks? G2d54@same-marks?) (set! G4872@G2d52@id->sym G2d52@id->sym) (set! G4871@G2d50@id? G2d50@id?) (set! G4870@G2d4e@syntax->list G2d4e@syntax->list) (set! G486f@G2d4c@syntax-cdr G2d4c@syntax-cdr) (set! G486e@G2d4a@syntax-car G2d4a@syntax-car) (set! G486d@G2d48@syntax-list? G2d48@syntax-list?) (set! G486c@G2d46@syntax-null? G2d46@syntax-null?) (set! G486b@G2d44@syntax-vector? G2d44@syntax-vector?) (set! G486a@G2d42@syntax-pair? G2d42@syntax-pair?) (set! G4869@G2d40@syntax-vector->list G2d40@syntax-vector->list) (set! G4868@G2d3e@syntax-kind? G2d3e@syntax-kind?) (set! G4867@G2d3c@add-subst G2d3c@add-subst) (set! G4866@G2d3a@add-mark G2d3a@add-mark) (set! G4865@G2d38@mkstx G2d38@mkstx) (set! G4864@G2d36@join-wraps G2d36@join-wraps) (set! G4863@G2d34@anti-mark? G2d34@anti-mark?) (set! G4862@G2d32@anti-mark G2d32@anti-mark) (set! G4861@G2d30@gen-mark G2d30@gen-mark) (set! G4860@G2d2e@datum->stx G2d2e@datum->stx) (set! G485f@G2d2c@rp G2d2c@rp) (set! G485e@G2d2a@set-stx-ae*! G2d2a@set-stx-ae*!) (set! G485d@G2d28@set-stx-subst*! G2d28@set-stx-subst*!) (set! G485c@G2d26@set-stx-mark*! G2d26@set-stx-mark*!) (set! G485b@G2d24@set-stx-expr! G2d24@set-stx-expr!) (set! G485a@G2d22@stx-ae* G2d22@stx-ae*) (set! G4859@G2d20@stx-subst* G2d20@stx-subst*) (set! G4858@G2d1e@stx-mark* G2d1e@stx-mark*) (set! G4857@G2d1c@stx-expr G2d1c@stx-expr) (set! G4856@G2d1a@make-stx G2d1a@make-stx) (set! G4855@G2d18@stx? G2d18@stx?) (set! G4854@G2d15@G2d0d G2d15@G2d0d) (set! G4853@G2d13@G2d0e G2d13@G2d0e) (set! G4852@G2d11@G2d0c G2d11@G2d0c) (set! G4851@G2d0b@make-full-rib G2d0b@make-full-rib) (set! G4850@G2d09@unseal-rib! G2d09@unseal-rib!) (set! G484f@G2d07@seal-rib! G2d07@seal-rib!) (set! G484e@G2d05@make-rib-map G2d05@make-rib-map) (set! G484d@G2d03@extend-rib/nc! G2d03@extend-rib/nc!) (set! G484c@G2d01@extend-rib! G2d01@extend-rib!) (set! G484b@G2cff@find-label G2cff@find-label) (set! G484a@G2cfd@make-cache-rib G2cfd@make-cache-rib) (set! G4849@G2cfb@make-empty-rib G2cfb@make-empty-rib) (set! G4848@G2cf9@set-rib-cache! G2cf9@set-rib-cache!) (set! G4847@G2cf7@set-rib-sealed/freq! G2cf7@set-rib-sealed/freq!) (set! G4846@G2cf5@set-rib-label*! G2cf5@set-rib-label*!) (set! G4845@G2cf3@set-rib-mark**! G2cf3@set-rib-mark**!) (set! G4844@G2cf1@set-rib-sym*! G2cf1@set-rib-sym*!) (set! G4843@G2cef@rib-cache G2cef@rib-cache) (set! G4842@G2ced@rib-sealed/freq G2ced@rib-sealed/freq) (set! G4841@G2ceb@rib-label* G2ceb@rib-label*) (set! G4840@G2ce9@rib-mark** G2ce9@rib-mark**) (set! G483f@G2ce7@rib-sym* G2ce7@rib-sym*) (set! G483e@G2ce5@make-rib G2ce5@make-rib) (set! G483d@G2ce3@rib? G2ce3@rib?) (set! G483c@G2ce0@G2cd8 G2ce0@G2cd8) (set! G483b@G2cde@G2cd9 G2cde@G2cd9) (set! G483a@G2cdc@G2cd7 G2cdc@G2cd7) (set! G4839@G2cd6@gen-define-label G2cd6@gen-define-label) (set! G4838@G2cd4@gen-define-label+loc G2cd4@gen-define-label+loc) (set! G4837@G2cd2@gen-top-level-label G2cd2@gen-top-level-label) (set! G4836@G2cd0@gen-label G2cd0@gen-label) (set! G4835@G2cce@gen-global G2cce@gen-global) (set! G4834@G2ccc@gen-lexical G2ccc@gen-lexical) (set! G4833@G2cca@top-marked? G2cca@top-marked?) (set! G4832@G2cc8@top-mark* G2cc8@top-mark*) (set! G4831@G2cc3@set-union G2cc3@set-union) (set! G4830@G2cc1@set-cons G2cc1@set-cons) (G2b5d@G29fa@current-library-expander G301c@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4948@G4943 G494a@G4945 G494c@G4944 G494f@&condition? G4951@make-&condition G4953@&condition-rtd G4955@&condition-rcd G499f@G499a G49a1@G499c G49a3@G499b G49a6@p? G49a8@make-message-condition G49aa@G4999 G49ac@message-condition? G49ae@condition-message G49b0@&message-rtd G49b2@&message-rcd G49b8@G49b3 G49ba@G49b5 G49bc@G49b4 G49bf@p? G49c1@make-warning G49c3@warning? G49c5@&warning-rtd G49c7@&warning-rcd G49cd@G49c8 G49cf@G49ca G49d1@G49c9 G49d4@p? G49d6@make-serious-condition G49d8@serious-condition? G49da@&serious-rtd G49dc@&serious-rcd G49e2@G49dd G49e4@G49df G49e6@G49de G49e9@p? G49eb@make-error G49ed@error? G49ef@&error-rtd G49f1@&error-rcd G49f7@G49f2 G49f9@G49f4 G49fb@G49f3 G49fe@p? G4a00@make-violation G4a02@violation? G4a04@&violation-rtd G4a06@&violation-rcd G4a0c@G4a07 G4a0e@G4a09 G4a10@G4a08 G4a13@p? G4a15@make-assertion-violation G4a17@assertion-violation? G4a19@&assertion-rtd G4a1b@&assertion-rcd G4a22@G4a1d G4a24@G4a1f G4a26@G4a1e G4a29@p? G4a2b@make-irritants-condition G4a2d@G4a1c G4a2f@irritants-condition? G4a31@condition-irritants G4a33@&irritants-rtd G4a35@&irritants-rcd G4a3c@G4a37 G4a3e@G4a39 G4a40@G4a38 G4a43@p? G4a45@make-who-condition G4a47@G4a36 G4a49@who-condition? G4a4b@condition-who G4a4d@&who-rtd G4a4f@&who-rcd G4a55@G4a50 G4a57@G4a52 G4a59@G4a51 G4a5c@p? G4a5e@make-non-continuable-violation G4a60@non-continuable-violation? G4a62@&non-continuable-rtd G4a64@&non-continuable-rcd G4a6a@G4a65 G4a6c@G4a67 G4a6e@G4a66 G4a71@p? G4a73@make-implementation-restriction-violation G4a75@implementation-restriction-violation? G4a77@&implementation-restriction-rtd G4a79@&implementation-restriction-rcd G4a7f@G4a7a G4a81@G4a7c G4a83@G4a7b G4a86@p? G4a88@make-lexical-violation G4a8a@lexical-violation? G4a8c@&lexical-rtd G4a8e@&lexical-rcd G4a96@G4a91 G4a98@G4a93 G4a9a@G4a92 G4a9d@p? G4a9f@make-syntax-violation G4aa1@G4a8f G4aa3@G4a90 G4aa5@syntax-violation? G4aa7@syntax-violation-form G4aa9@syntax-violation-subform G4aab@&syntax-rtd G4aad@&syntax-rcd G4ab3@G4aae G4ab5@G4ab0 G4ab7@G4aaf G4aba@p? G4abc@make-undefined-violation G4abe@undefined-violation? G4ac0@&undefined-rtd G4ac2@&undefined-rcd G4ac8@G4ac3 G4aca@G4ac5 G4acc@G4ac4 G4acf@p? G4ad1@make-i/o-error G4ad3@i/o-error? G4ad5@&i/o-rtd G4ad7@&i/o-rcd G4add@G4ad8 G4adf@G4ada G4ae1@G4ad9 G4ae4@p? G4ae6@make-i/o-read-error G4ae8@i/o-read-error? G4aea@&i/o-read-rtd G4aec@&i/o-read-rcd G4af2@G4aed G4af4@G4aef G4af6@G4aee G4af9@p? G4afb@make-i/o-write-error G4afd@i/o-write-error? G4aff@&i/o-write-rtd G4b01@&i/o-write-rcd G4b08@G4b03 G4b0a@G4b05 G4b0c@G4b04 G4b0f@p? G4b11@make-i/o-invalid-position-error G4b13@G4b02 G4b15@i/o-invalid-position-error? G4b17@i/o-error-position G4b19@&i/o-invalid-position-rtd G4b1b@&i/o-invalid-position-rcd G4b22@G4b1d G4b24@G4b1f G4b26@G4b1e G4b29@p? G4b2b@make-i/o-filename-error G4b2d@G4b1c G4b2f@i/o-filename-error? G4b31@i/o-error-filename G4b33@&i/o-filename-rtd G4b35@&i/o-filename-rcd G4b3b@G4b36 G4b3d@G4b38 G4b3f@G4b37 G4b42@p? G4b44@make-i/o-file-protection-error G4b46@i/o-file-protection-error? G4b48@&i/o-file-protection-rtd G4b4a@&i/o-file-protection-rcd G4b50@G4b4b G4b52@G4b4d G4b54@G4b4c G4b57@p? G4b59@make-i/o-file-is-read-only-error G4b5b@i/o-file-is-read-only-error? G4b5d@&i/o-file-is-read-only-rtd G4b5f@&i/o-file-is-read-only-rcd G4b65@G4b60 G4b67@G4b62 G4b69@G4b61 G4b6c@p? G4b6e@make-i/o-file-already-exists-error G4b70@i/o-file-already-exists-error? G4b72@&i/o-file-already-exists-rtd G4b74@&i/o-file-already-exists-rcd G4b7a@G4b75 G4b7c@G4b77 G4b7e@G4b76 G4b81@p? G4b83@make-i/o-file-does-not-exist-error G4b85@i/o-file-does-not-exist-error? G4b87@&i/o-file-does-not-exist-rtd G4b89@&i/o-file-does-not-exist-rcd G4b90@G4b8b G4b92@G4b8d G4b94@G4b8c G4b97@p? G4b99@make-i/o-port-error G4b9b@G4b8a G4b9d@i/o-port-error? G4b9f@i/o-error-port G4ba1@&i/o-port-rtd G4ba3@&i/o-port-rcd G4ba9@G4ba4 G4bab@G4ba6 G4bad@G4ba5 G4bb0@p? G4bb2@make-i/o-decoding-error G4bb4@i/o-decoding-error? G4bb6@&i/o-decoding-rtd G4bb8@&i/o-decoding-rcd G4bbf@G4bba G4bc1@G4bbc G4bc3@G4bbb G4bc6@p? G4bc8@make-i/o-encoding-error G4bca@G4bb9 G4bcc@i/o-encoding-error? G4bce@i/o-encoding-error-char G4bd0@&i/o-encoding-rtd G4bd2@&i/o-encoding-rcd G4bd8@G4bd3 G4bda@G4bd5 G4bdc@G4bd4 G4bdf@p? G4be1@make-no-infinities-violation G4be3@no-infinities-violation? G4be5@&no-infinities-rtd G4be7@&no-infinities-rcd G4bed@G4be8 G4bef@G4bea G4bf1@G4be9 G4bf4@p? G4bf6@make-no-nans-violation G4bf8@no-nans-violation? G4bfa@&no-nans-rtd G4bfc@&no-nans-rcd) (begin (set! G4948@G4943 (make-record-type-descriptor '&condition '#f 'G4946 '#f '#f '#())) (set! G494a@G4945 '#f) (set! G494c@G4944 (make-record-constructor-descriptor G4948@G4943 '#f G494a@G4945)) (set! G494f@&condition? (record-predicate G4948@G4943)) (set! G4951@make-&condition (record-constructor G494c@G4944)) (set! G4953@&condition-rtd G4948@G4943) (set! G4955@&condition-rcd G494c@G4944) (set! G499f@G499a (make-record-type-descriptor '&message G4948@G4943 'G499d '#f '#f '#((immutable message)))) (set! G49a1@G499c '#f) (set! G49a3@G499b (make-record-constructor-descriptor G499f@G499a G494c@G4944 G49a1@G499c)) (set! G49a6@p? (record-predicate G499f@G499a)) (set! G49a8@make-message-condition (record-constructor G49a3@G499b)) (set! G49aa@G4999 (record-accessor G499f@G499a '0)) (set! G49ac@message-condition? (condition-predicate G499f@G499a)) (set! G49ae@condition-message (condition-accessor G499f@G499a G49aa@G4999)) (set! G49b0@&message-rtd G499f@G499a) (set! G49b2@&message-rcd G49a3@G499b) (set! G49b8@G49b3 (make-record-type-descriptor '&warning G4948@G4943 'G49b6 '#f '#f '#())) (set! G49ba@G49b5 '#f) (set! G49bc@G49b4 (make-record-constructor-descriptor G49b8@G49b3 G494c@G4944 G49ba@G49b5)) (set! G49bf@p? (record-predicate G49b8@G49b3)) (set! G49c1@make-warning (record-constructor G49bc@G49b4)) (set! G49c3@warning? (condition-predicate G49b8@G49b3)) (set! G49c5@&warning-rtd G49b8@G49b3) (set! G49c7@&warning-rcd G49bc@G49b4) (set! G49cd@G49c8 (make-record-type-descriptor '&serious G4948@G4943 'G49cb '#f '#f '#())) (set! G49cf@G49ca '#f) (set! G49d1@G49c9 (make-record-constructor-descriptor G49cd@G49c8 G494c@G4944 G49cf@G49ca)) (set! G49d4@p? (record-predicate G49cd@G49c8)) (set! G49d6@make-serious-condition (record-constructor G49d1@G49c9)) (set! G49d8@serious-condition? (condition-predicate G49cd@G49c8)) (set! G49da@&serious-rtd G49cd@G49c8) (set! G49dc@&serious-rcd G49d1@G49c9) (set! G49e2@G49dd (make-record-type-descriptor '&error G49cd@G49c8 'G49e0 '#f '#f '#())) (set! G49e4@G49df '#f) (set! G49e6@G49de (make-record-constructor-descriptor G49e2@G49dd G49d1@G49c9 G49e4@G49df)) (set! G49e9@p? (record-predicate G49e2@G49dd)) (set! G49eb@make-error (record-constructor G49e6@G49de)) (set! G49ed@error? (condition-predicate G49e2@G49dd)) (set! G49ef@&error-rtd G49e2@G49dd) (set! G49f1@&error-rcd G49e6@G49de) (set! G49f7@G49f2 (make-record-type-descriptor '&violation G49cd@G49c8 'G49f5 '#f '#f '#())) (set! G49f9@G49f4 '#f) (set! G49fb@G49f3 (make-record-constructor-descriptor G49f7@G49f2 G49d1@G49c9 G49f9@G49f4)) (set! G49fe@p? (record-predicate G49f7@G49f2)) (set! G4a00@make-violation (record-constructor G49fb@G49f3)) (set! G4a02@violation? (condition-predicate G49f7@G49f2)) (set! G4a04@&violation-rtd G49f7@G49f2) (set! G4a06@&violation-rcd G49fb@G49f3) (set! G4a0c@G4a07 (make-record-type-descriptor '&assertion G49f7@G49f2 'G4a0a '#f '#f '#())) (set! G4a0e@G4a09 '#f) (set! G4a10@G4a08 (make-record-constructor-descriptor G4a0c@G4a07 G49fb@G49f3 G4a0e@G4a09)) (set! G4a13@p? (record-predicate G4a0c@G4a07)) (set! G4a15@make-assertion-violation (record-constructor G4a10@G4a08)) (set! G4a17@assertion-violation? (condition-predicate G4a0c@G4a07)) (set! G4a19@&assertion-rtd G4a0c@G4a07) (set! G4a1b@&assertion-rcd G4a10@G4a08) (set! G4a22@G4a1d (make-record-type-descriptor '&irritants G4948@G4943 'G4a20 '#f '#f '#((immutable irritants)))) (set! G4a24@G4a1f '#f) (set! G4a26@G4a1e (make-record-constructor-descriptor G4a22@G4a1d G494c@G4944 G4a24@G4a1f)) (set! G4a29@p? (record-predicate G4a22@G4a1d)) (set! G4a2b@make-irritants-condition (record-constructor G4a26@G4a1e)) (set! G4a2d@G4a1c (record-accessor G4a22@G4a1d '0)) (set! G4a2f@irritants-condition? (condition-predicate G4a22@G4a1d)) (set! G4a31@condition-irritants (condition-accessor G4a22@G4a1d G4a2d@G4a1c)) (set! G4a33@&irritants-rtd G4a22@G4a1d) (set! G4a35@&irritants-rcd G4a26@G4a1e) (set! G4a3c@G4a37 (make-record-type-descriptor '&who G4948@G4943 'G4a3a '#f '#f '#((immutable who)))) (set! G4a3e@G4a39 '#f) (set! G4a40@G4a38 (make-record-constructor-descriptor G4a3c@G4a37 G494c@G4944 G4a3e@G4a39)) (set! G4a43@p? (record-predicate G4a3c@G4a37)) (set! G4a45@make-who-condition (record-constructor G4a40@G4a38)) (set! G4a47@G4a36 (record-accessor G4a3c@G4a37 '0)) (set! G4a49@who-condition? (condition-predicate G4a3c@G4a37)) (set! G4a4b@condition-who (condition-accessor G4a3c@G4a37 G4a47@G4a36)) (set! G4a4d@&who-rtd G4a3c@G4a37) (set! G4a4f@&who-rcd G4a40@G4a38) (set! G4a55@G4a50 (make-record-type-descriptor '&non-continuable G49f7@G49f2 'G4a53 '#f '#f '#())) (set! G4a57@G4a52 '#f) (set! G4a59@G4a51 (make-record-constructor-descriptor G4a55@G4a50 G49fb@G49f3 G4a57@G4a52)) (set! G4a5c@p? (record-predicate G4a55@G4a50)) (set! G4a5e@make-non-continuable-violation (record-constructor G4a59@G4a51)) (set! G4a60@non-continuable-violation? (condition-predicate G4a55@G4a50)) (set! G4a62@&non-continuable-rtd G4a55@G4a50) (set! G4a64@&non-continuable-rcd G4a59@G4a51) (set! G4a6a@G4a65 (make-record-type-descriptor '&implementation-restriction G49f7@G49f2 'G4a68 '#f '#f '#())) (set! G4a6c@G4a67 '#f) (set! G4a6e@G4a66 (make-record-constructor-descriptor G4a6a@G4a65 G49fb@G49f3 G4a6c@G4a67)) (set! G4a71@p? (record-predicate G4a6a@G4a65)) (set! G4a73@make-implementation-restriction-violation (record-constructor G4a6e@G4a66)) (set! G4a75@implementation-restriction-violation? (condition-predicate G4a6a@G4a65)) (set! G4a77@&implementation-restriction-rtd G4a6a@G4a65) (set! G4a79@&implementation-restriction-rcd G4a6e@G4a66) (set! G4a7f@G4a7a (make-record-type-descriptor '&lexical G49f7@G49f2 'G4a7d '#f '#f '#())) (set! G4a81@G4a7c '#f) (set! G4a83@G4a7b (make-record-constructor-descriptor G4a7f@G4a7a G49fb@G49f3 G4a81@G4a7c)) (set! G4a86@p? (record-predicate G4a7f@G4a7a)) (set! G4a88@make-lexical-violation (record-constructor G4a83@G4a7b)) (set! G4a8a@lexical-violation? (condition-predicate G4a7f@G4a7a)) (set! G4a8c@&lexical-rtd G4a7f@G4a7a) (set! G4a8e@&lexical-rcd G4a83@G4a7b) (set! G4a96@G4a91 (make-record-type-descriptor '&syntax G49f7@G49f2 'G4a94 '#f '#f '#((immutable form) (immutable subform)))) (set! G4a98@G4a93 '#f) (set! G4a9a@G4a92 (make-record-constructor-descriptor G4a96@G4a91 G49fb@G49f3 G4a98@G4a93)) (set! G4a9d@p? (record-predicate G4a96@G4a91)) (set! G4a9f@make-syntax-violation (record-constructor G4a9a@G4a92)) (set! G4aa1@G4a8f (record-accessor G4a96@G4a91 '0)) (set! G4aa3@G4a90 (record-accessor G4a96@G4a91 '1)) (set! G4aa5@syntax-violation? (condition-predicate G4a96@G4a91)) (set! G4aa7@syntax-violation-form (condition-accessor G4a96@G4a91 G4aa1@G4a8f)) (set! G4aa9@syntax-violation-subform (condition-accessor G4a96@G4a91 G4aa3@G4a90)) (set! G4aab@&syntax-rtd G4a96@G4a91) (set! G4aad@&syntax-rcd G4a9a@G4a92) (set! G4ab3@G4aae (make-record-type-descriptor '&undefined G49f7@G49f2 'G4ab1 '#f '#f '#())) (set! G4ab5@G4ab0 '#f) (set! G4ab7@G4aaf (make-record-constructor-descriptor G4ab3@G4aae G49fb@G49f3 G4ab5@G4ab0)) (set! G4aba@p? (record-predicate G4ab3@G4aae)) (set! G4abc@make-undefined-violation (record-constructor G4ab7@G4aaf)) (set! G4abe@undefined-violation? (condition-predicate G4ab3@G4aae)) (set! G4ac0@&undefined-rtd G4ab3@G4aae) (set! G4ac2@&undefined-rcd G4ab7@G4aaf) (set! G4ac8@G4ac3 (make-record-type-descriptor '&i/o G49e2@G49dd 'G4ac6 '#f '#f '#())) (set! G4aca@G4ac5 '#f) (set! G4acc@G4ac4 (make-record-constructor-descriptor G4ac8@G4ac3 G49e6@G49de G4aca@G4ac5)) (set! G4acf@p? (record-predicate G4ac8@G4ac3)) (set! G4ad1@make-i/o-error (record-constructor G4acc@G4ac4)) (set! G4ad3@i/o-error? (condition-predicate G4ac8@G4ac3)) (set! G4ad5@&i/o-rtd G4ac8@G4ac3) (set! G4ad7@&i/o-rcd G4acc@G4ac4) (set! G4add@G4ad8 (make-record-type-descriptor '&i/o-read G4ac8@G4ac3 'G4adb '#f '#f '#())) (set! G4adf@G4ada '#f) (set! G4ae1@G4ad9 (make-record-constructor-descriptor G4add@G4ad8 G4acc@G4ac4 G4adf@G4ada)) (set! G4ae4@p? (record-predicate G4add@G4ad8)) (set! G4ae6@make-i/o-read-error (record-constructor G4ae1@G4ad9)) (set! G4ae8@i/o-read-error? (condition-predicate G4add@G4ad8)) (set! G4aea@&i/o-read-rtd G4add@G4ad8) (set! G4aec@&i/o-read-rcd G4ae1@G4ad9) (set! G4af2@G4aed (make-record-type-descriptor '&i/o-write G4ac8@G4ac3 'G4af0 '#f '#f '#())) (set! G4af4@G4aef '#f) (set! G4af6@G4aee (make-record-constructor-descriptor G4af2@G4aed G4acc@G4ac4 G4af4@G4aef)) (set! G4af9@p? (record-predicate G4af2@G4aed)) (set! G4afb@make-i/o-write-error (record-constructor G4af6@G4aee)) (set! G4afd@i/o-write-error? (condition-predicate G4af2@G4aed)) (set! G4aff@&i/o-write-rtd G4af2@G4aed) (set! G4b01@&i/o-write-rcd G4af6@G4aee) (set! G4b08@G4b03 (make-record-type-descriptor '&i/o-invalid-position G4ac8@G4ac3 'G4b06 '#f '#f '#((immutable position)))) (set! G4b0a@G4b05 '#f) (set! G4b0c@G4b04 (make-record-constructor-descriptor G4b08@G4b03 G4acc@G4ac4 G4b0a@G4b05)) (set! G4b0f@p? (record-predicate G4b08@G4b03)) (set! G4b11@make-i/o-invalid-position-error (record-constructor G4b0c@G4b04)) (set! G4b13@G4b02 (record-accessor G4b08@G4b03 '0)) (set! G4b15@i/o-invalid-position-error? (condition-predicate G4b08@G4b03)) (set! G4b17@i/o-error-position (condition-accessor G4b08@G4b03 G4b13@G4b02)) (set! G4b19@&i/o-invalid-position-rtd G4b08@G4b03) (set! G4b1b@&i/o-invalid-position-rcd G4b0c@G4b04) (set! G4b22@G4b1d (make-record-type-descriptor '&i/o-filename G4ac8@G4ac3 'G4b20 '#f '#f '#((immutable filename)))) (set! G4b24@G4b1f '#f) (set! G4b26@G4b1e (make-record-constructor-descriptor G4b22@G4b1d G4acc@G4ac4 G4b24@G4b1f)) (set! G4b29@p? (record-predicate G4b22@G4b1d)) (set! G4b2b@make-i/o-filename-error (record-constructor G4b26@G4b1e)) (set! G4b2d@G4b1c (record-accessor G4b22@G4b1d '0)) (set! G4b2f@i/o-filename-error? (condition-predicate G4b22@G4b1d)) (set! G4b31@i/o-error-filename (condition-accessor G4b22@G4b1d G4b2d@G4b1c)) (set! G4b33@&i/o-filename-rtd G4b22@G4b1d) (set! G4b35@&i/o-filename-rcd G4b26@G4b1e) (set! G4b3b@G4b36 (make-record-type-descriptor '&i/o-file-protection G4b22@G4b1d 'G4b39 '#f '#f '#())) (set! G4b3d@G4b38 '#f) (set! G4b3f@G4b37 (make-record-constructor-descriptor G4b3b@G4b36 G4b26@G4b1e G4b3d@G4b38)) (set! G4b42@p? (record-predicate G4b3b@G4b36)) (set! G4b44@make-i/o-file-protection-error (record-constructor G4b3f@G4b37)) (set! G4b46@i/o-file-protection-error? (condition-predicate G4b3b@G4b36)) (set! G4b48@&i/o-file-protection-rtd G4b3b@G4b36) (set! G4b4a@&i/o-file-protection-rcd G4b3f@G4b37) (set! G4b50@G4b4b (make-record-type-descriptor '&i/o-file-is-read-only G4b3b@G4b36 'G4b4e '#f '#f '#())) (set! G4b52@G4b4d '#f) (set! G4b54@G4b4c (make-record-constructor-descriptor G4b50@G4b4b G4b3f@G4b37 G4b52@G4b4d)) (set! G4b57@p? (record-predicate G4b50@G4b4b)) (set! G4b59@make-i/o-file-is-read-only-error (record-constructor G4b54@G4b4c)) (set! G4b5b@i/o-file-is-read-only-error? (condition-predicate G4b50@G4b4b)) (set! G4b5d@&i/o-file-is-read-only-rtd G4b50@G4b4b) (set! G4b5f@&i/o-file-is-read-only-rcd G4b54@G4b4c) (set! G4b65@G4b60 (make-record-type-descriptor '&i/o-file-already-exists G4b22@G4b1d 'G4b63 '#f '#f '#())) (set! G4b67@G4b62 '#f) (set! G4b69@G4b61 (make-record-constructor-descriptor G4b65@G4b60 G4b26@G4b1e G4b67@G4b62)) (set! G4b6c@p? (record-predicate G4b65@G4b60)) (set! G4b6e@make-i/o-file-already-exists-error (record-constructor G4b69@G4b61)) (set! G4b70@i/o-file-already-exists-error? (condition-predicate G4b65@G4b60)) (set! G4b72@&i/o-file-already-exists-rtd G4b65@G4b60) (set! G4b74@&i/o-file-already-exists-rcd G4b69@G4b61) (set! G4b7a@G4b75 (make-record-type-descriptor '&i/o-file-does-not-exist G4b22@G4b1d 'G4b78 '#f '#f '#())) (set! G4b7c@G4b77 '#f) (set! G4b7e@G4b76 (make-record-constructor-descriptor G4b7a@G4b75 G4b26@G4b1e G4b7c@G4b77)) (set! G4b81@p? (record-predicate G4b7a@G4b75)) (set! G4b83@make-i/o-file-does-not-exist-error (record-constructor G4b7e@G4b76)) (set! G4b85@i/o-file-does-not-exist-error? (condition-predicate G4b7a@G4b75)) (set! G4b87@&i/o-file-does-not-exist-rtd G4b7a@G4b75) (set! G4b89@&i/o-file-does-not-exist-rcd G4b7e@G4b76) (set! G4b90@G4b8b (make-record-type-descriptor '&i/o-port G4ac8@G4ac3 'G4b8e '#f '#f '#((immutable port)))) (set! G4b92@G4b8d '#f) (set! G4b94@G4b8c (make-record-constructor-descriptor G4b90@G4b8b G4acc@G4ac4 G4b92@G4b8d)) (set! G4b97@p? (record-predicate G4b90@G4b8b)) (set! G4b99@make-i/o-port-error (record-constructor G4b94@G4b8c)) (set! G4b9b@G4b8a (record-accessor G4b90@G4b8b '0)) (set! G4b9d@i/o-port-error? (condition-predicate G4b90@G4b8b)) (set! G4b9f@i/o-error-port (condition-accessor G4b90@G4b8b G4b9b@G4b8a)) (set! G4ba1@&i/o-port-rtd G4b90@G4b8b) (set! G4ba3@&i/o-port-rcd G4b94@G4b8c) (set! G4ba9@G4ba4 (make-record-type-descriptor '&i/o-decoding G4b90@G4b8b 'G4ba7 '#f '#f '#())) (set! G4bab@G4ba6 '#f) (set! G4bad@G4ba5 (make-record-constructor-descriptor G4ba9@G4ba4 G4b94@G4b8c G4bab@G4ba6)) (set! G4bb0@p? (record-predicate G4ba9@G4ba4)) (set! G4bb2@make-i/o-decoding-error (record-constructor G4bad@G4ba5)) (set! G4bb4@i/o-decoding-error? (condition-predicate G4ba9@G4ba4)) (set! G4bb6@&i/o-decoding-rtd G4ba9@G4ba4) (set! G4bb8@&i/o-decoding-rcd G4bad@G4ba5) (set! G4bbf@G4bba (make-record-type-descriptor '&i/o-encoding G4b90@G4b8b 'G4bbd '#f '#f '#((immutable char)))) (set! G4bc1@G4bbc '#f) (set! G4bc3@G4bbb (make-record-constructor-descriptor G4bbf@G4bba G4b94@G4b8c G4bc1@G4bbc)) (set! G4bc6@p? (record-predicate G4bbf@G4bba)) (set! G4bc8@make-i/o-encoding-error (record-constructor G4bc3@G4bbb)) (set! G4bca@G4bb9 (record-accessor G4bbf@G4bba '0)) (set! G4bcc@i/o-encoding-error? (condition-predicate G4bbf@G4bba)) (set! G4bce@i/o-encoding-error-char (condition-accessor G4bbf@G4bba G4bca@G4bb9)) (set! G4bd0@&i/o-encoding-rtd G4bbf@G4bba) (set! G4bd2@&i/o-encoding-rcd G4bc3@G4bbb) (set! G4bd8@G4bd3 (make-record-type-descriptor '&no-infinities G4a6a@G4a65 'G4bd6 '#f '#f '#())) (set! G4bda@G4bd5 '#f) (set! G4bdc@G4bd4 (make-record-constructor-descriptor G4bd8@G4bd3 G4a6e@G4a66 G4bda@G4bd5)) (set! G4bdf@p? (record-predicate G4bd8@G4bd3)) (set! G4be1@make-no-infinities-violation (record-constructor G4bdc@G4bd4)) (set! G4be3@no-infinities-violation? (condition-predicate G4bd8@G4bd3)) (set! G4be5@&no-infinities-rtd G4bd8@G4bd3) (set! G4be7@&no-infinities-rcd G4bdc@G4bd4) (set! G4bed@G4be8 (make-record-type-descriptor '&no-nans G4a6a@G4a65 'G4beb '#f '#f '#())) (set! G4bef@G4bea '#f) (set! G4bf1@G4be9 (make-record-constructor-descriptor G4bed@G4be8 G4a6e@G4a66 G4bef@G4bea)) (set! G4bf4@p? (record-predicate G4bed@G4be8)) (set! G4bf6@make-no-nans-violation (record-constructor G4bf1@G4be9)) (set! G4bf8@no-nans-violation? (condition-predicate G4bed@G4be8)) (set! G4bfa@&no-nans-rtd G4bed@G4be8) (set! G4bfc@&no-nans-rcd G4bf1@G4be9) (begin (set! G4ced@G4bfc@&no-nans-rcd G4bfc@&no-nans-rcd) (set! G4cec@G4bfa@&no-nans-rtd G4bfa@&no-nans-rtd) (set! G4ceb@G4bf8@no-nans-violation? G4bf8@no-nans-violation?) (set! G4cea@G4bf6@make-no-nans-violation G4bf6@make-no-nans-violation) (set! G4ce9@G4bf4@p? G4bf4@p?) (set! G4ce8@G4bf1@G4be9 G4bf1@G4be9) (set! G4ce7@G4bef@G4bea G4bef@G4bea) (set! G4ce6@G4bed@G4be8 G4bed@G4be8) (set! G4ce5@G4be7@&no-infinities-rcd G4be7@&no-infinities-rcd) (set! G4ce4@G4be5@&no-infinities-rtd G4be5@&no-infinities-rtd) (set! G4ce3@G4be3@no-infinities-violation? G4be3@no-infinities-violation?) (set! G4ce2@G4be1@make-no-infinities-violation G4be1@make-no-infinities-violation) (set! G4ce1@G4bdf@p? G4bdf@p?) (set! G4ce0@G4bdc@G4bd4 G4bdc@G4bd4) (set! G4cdf@G4bda@G4bd5 G4bda@G4bd5) (set! G4cde@G4bd8@G4bd3 G4bd8@G4bd3) (set! G4cdd@G4bd2@&i/o-encoding-rcd G4bd2@&i/o-encoding-rcd) (set! G4cdc@G4bd0@&i/o-encoding-rtd G4bd0@&i/o-encoding-rtd) (set! G4cdb@G4bce@i/o-encoding-error-char G4bce@i/o-encoding-error-char) (set! G4cda@G4bcc@i/o-encoding-error? G4bcc@i/o-encoding-error?) (set! G4cd9@G4bca@G4bb9 G4bca@G4bb9) (set! G4cd8@G4bc8@make-i/o-encoding-error G4bc8@make-i/o-encoding-error) (set! G4cd7@G4bc6@p? G4bc6@p?) (set! G4cd6@G4bc3@G4bbb G4bc3@G4bbb) (set! G4cd5@G4bc1@G4bbc G4bc1@G4bbc) (set! G4cd4@G4bbf@G4bba G4bbf@G4bba) (set! G4cd3@G4bb8@&i/o-decoding-rcd G4bb8@&i/o-decoding-rcd) (set! G4cd2@G4bb6@&i/o-decoding-rtd G4bb6@&i/o-decoding-rtd) (set! G4cd1@G4bb4@i/o-decoding-error? G4bb4@i/o-decoding-error?) (set! G4cd0@G4bb2@make-i/o-decoding-error G4bb2@make-i/o-decoding-error) (set! G4ccf@G4bb0@p? G4bb0@p?) (set! G4cce@G4bad@G4ba5 G4bad@G4ba5) (set! G4ccd@G4bab@G4ba6 G4bab@G4ba6) (set! G4ccc@G4ba9@G4ba4 G4ba9@G4ba4) (set! G4ccb@G4ba3@&i/o-port-rcd G4ba3@&i/o-port-rcd) (set! G4cca@G4ba1@&i/o-port-rtd G4ba1@&i/o-port-rtd) (set! G4cc9@G4b9f@i/o-error-port G4b9f@i/o-error-port) (set! G4cc8@G4b9d@i/o-port-error? G4b9d@i/o-port-error?) (set! G4cc7@G4b9b@G4b8a G4b9b@G4b8a) (set! G4cc6@G4b99@make-i/o-port-error G4b99@make-i/o-port-error) (set! G4cc5@G4b97@p? G4b97@p?) (set! G4cc4@G4b94@G4b8c G4b94@G4b8c) (set! G4cc3@G4b92@G4b8d G4b92@G4b8d) (set! G4cc2@G4b90@G4b8b G4b90@G4b8b) (set! G4cc1@G4b89@&i/o-file-does-not-exist-rcd G4b89@&i/o-file-does-not-exist-rcd) (set! G4cc0@G4b87@&i/o-file-does-not-exist-rtd G4b87@&i/o-file-does-not-exist-rtd) (set! G4cbf@G4b85@i/o-file-does-not-exist-error? G4b85@i/o-file-does-not-exist-error?) (set! G4cbe@G4b83@make-i/o-file-does-not-exist-error G4b83@make-i/o-file-does-not-exist-error) (set! G4cbd@G4b81@p? G4b81@p?) (set! G4cbc@G4b7e@G4b76 G4b7e@G4b76) (set! G4cbb@G4b7c@G4b77 G4b7c@G4b77) (set! G4cba@G4b7a@G4b75 G4b7a@G4b75) (set! G4cb9@G4b74@&i/o-file-already-exists-rcd G4b74@&i/o-file-already-exists-rcd) (set! G4cb8@G4b72@&i/o-file-already-exists-rtd G4b72@&i/o-file-already-exists-rtd) (set! G4cb7@G4b70@i/o-file-already-exists-error? G4b70@i/o-file-already-exists-error?) (set! G4cb6@G4b6e@make-i/o-file-already-exists-error G4b6e@make-i/o-file-already-exists-error) (set! G4cb5@G4b6c@p? G4b6c@p?) (set! G4cb4@G4b69@G4b61 G4b69@G4b61) (set! G4cb3@G4b67@G4b62 G4b67@G4b62) (set! G4cb2@G4b65@G4b60 G4b65@G4b60) (set! G4cb1@G4b5f@&i/o-file-is-read-only-rcd G4b5f@&i/o-file-is-read-only-rcd) (set! G4cb0@G4b5d@&i/o-file-is-read-only-rtd G4b5d@&i/o-file-is-read-only-rtd) (set! G4caf@G4b5b@i/o-file-is-read-only-error? G4b5b@i/o-file-is-read-only-error?) (set! G4cae@G4b59@make-i/o-file-is-read-only-error G4b59@make-i/o-file-is-read-only-error) (set! G4cad@G4b57@p? G4b57@p?) (set! G4cac@G4b54@G4b4c G4b54@G4b4c) (set! G4cab@G4b52@G4b4d G4b52@G4b4d) (set! G4caa@G4b50@G4b4b G4b50@G4b4b) (set! G4ca9@G4b4a@&i/o-file-protection-rcd G4b4a@&i/o-file-protection-rcd) (set! G4ca8@G4b48@&i/o-file-protection-rtd G4b48@&i/o-file-protection-rtd) (set! G4ca7@G4b46@i/o-file-protection-error? G4b46@i/o-file-protection-error?) (set! G4ca6@G4b44@make-i/o-file-protection-error G4b44@make-i/o-file-protection-error) (set! G4ca5@G4b42@p? G4b42@p?) (set! G4ca4@G4b3f@G4b37 G4b3f@G4b37) (set! G4ca3@G4b3d@G4b38 G4b3d@G4b38) (set! G4ca2@G4b3b@G4b36 G4b3b@G4b36) (set! G4ca1@G4b35@&i/o-filename-rcd G4b35@&i/o-filename-rcd) (set! G4ca0@G4b33@&i/o-filename-rtd G4b33@&i/o-filename-rtd) (set! G4c9f@G4b31@i/o-error-filename G4b31@i/o-error-filename) (set! G4c9e@G4b2f@i/o-filename-error? G4b2f@i/o-filename-error?) (set! G4c9d@G4b2d@G4b1c G4b2d@G4b1c) (set! G4c9c@G4b2b@make-i/o-filename-error G4b2b@make-i/o-filename-error) (set! G4c9b@G4b29@p? G4b29@p?) (set! G4c9a@G4b26@G4b1e G4b26@G4b1e) (set! G4c99@G4b24@G4b1f G4b24@G4b1f) (set! G4c98@G4b22@G4b1d G4b22@G4b1d) (set! G4c97@G4b1b@&i/o-invalid-position-rcd G4b1b@&i/o-invalid-position-rcd) (set! G4c96@G4b19@&i/o-invalid-position-rtd G4b19@&i/o-invalid-position-rtd) (set! G4c95@G4b17@i/o-error-position G4b17@i/o-error-position) (set! G4c94@G4b15@i/o-invalid-position-error? G4b15@i/o-invalid-position-error?) (set! G4c93@G4b13@G4b02 G4b13@G4b02) (set! G4c92@G4b11@make-i/o-invalid-position-error G4b11@make-i/o-invalid-position-error) (set! G4c91@G4b0f@p? G4b0f@p?) (set! G4c90@G4b0c@G4b04 G4b0c@G4b04) (set! G4c8f@G4b0a@G4b05 G4b0a@G4b05) (set! G4c8e@G4b08@G4b03 G4b08@G4b03) (set! G4c8d@G4b01@&i/o-write-rcd G4b01@&i/o-write-rcd) (set! G4c8c@G4aff@&i/o-write-rtd G4aff@&i/o-write-rtd) (set! G4c8b@G4afd@i/o-write-error? G4afd@i/o-write-error?) (set! G4c8a@G4afb@make-i/o-write-error G4afb@make-i/o-write-error) (set! G4c89@G4af9@p? G4af9@p?) (set! G4c88@G4af6@G4aee G4af6@G4aee) (set! G4c87@G4af4@G4aef G4af4@G4aef) (set! G4c86@G4af2@G4aed G4af2@G4aed) (set! G4c85@G4aec@&i/o-read-rcd G4aec@&i/o-read-rcd) (set! G4c84@G4aea@&i/o-read-rtd G4aea@&i/o-read-rtd) (set! G4c83@G4ae8@i/o-read-error? G4ae8@i/o-read-error?) (set! G4c82@G4ae6@make-i/o-read-error G4ae6@make-i/o-read-error) (set! G4c81@G4ae4@p? G4ae4@p?) (set! G4c80@G4ae1@G4ad9 G4ae1@G4ad9) (set! G4c7f@G4adf@G4ada G4adf@G4ada) (set! G4c7e@G4add@G4ad8 G4add@G4ad8) (set! G4c7d@G4ad7@&i/o-rcd G4ad7@&i/o-rcd) (set! G4c7c@G4ad5@&i/o-rtd G4ad5@&i/o-rtd) (set! G4c7b@G4ad3@i/o-error? G4ad3@i/o-error?) (set! G4c7a@G4ad1@make-i/o-error G4ad1@make-i/o-error) (set! G4c79@G4acf@p? G4acf@p?) (set! G4c78@G4acc@G4ac4 G4acc@G4ac4) (set! G4c77@G4aca@G4ac5 G4aca@G4ac5) (set! G4c76@G4ac8@G4ac3 G4ac8@G4ac3) (set! G4c75@G4ac2@&undefined-rcd G4ac2@&undefined-rcd) (set! G4c74@G4ac0@&undefined-rtd G4ac0@&undefined-rtd) (set! G4c73@G4abe@undefined-violation? G4abe@undefined-violation?) (set! G4c72@G4abc@make-undefined-violation G4abc@make-undefined-violation) (set! G4c71@G4aba@p? G4aba@p?) (set! G4c70@G4ab7@G4aaf G4ab7@G4aaf) (set! G4c6f@G4ab5@G4ab0 G4ab5@G4ab0) (set! G4c6e@G4ab3@G4aae G4ab3@G4aae) (set! G4c6d@G4aad@&syntax-rcd G4aad@&syntax-rcd) (set! G4c6c@G4aab@&syntax-rtd G4aab@&syntax-rtd) (set! G4c6b@G4aa9@syntax-violation-subform G4aa9@syntax-violation-subform) (set! G4c6a@G4aa7@syntax-violation-form G4aa7@syntax-violation-form) (set! G4c69@G4aa5@syntax-violation? G4aa5@syntax-violation?) (set! G4c68@G4aa3@G4a90 G4aa3@G4a90) (set! G4c67@G4aa1@G4a8f G4aa1@G4a8f) (set! G4c66@G4a9f@make-syntax-violation G4a9f@make-syntax-violation) (set! G4c65@G4a9d@p? G4a9d@p?) (set! G4c64@G4a9a@G4a92 G4a9a@G4a92) (set! G4c63@G4a98@G4a93 G4a98@G4a93) (set! G4c62@G4a96@G4a91 G4a96@G4a91) (set! G4c61@G4a8e@&lexical-rcd G4a8e@&lexical-rcd) (set! G4c60@G4a8c@&lexical-rtd G4a8c@&lexical-rtd) (set! G4c5f@G4a8a@lexical-violation? G4a8a@lexical-violation?) (set! G4c5e@G4a88@make-lexical-violation G4a88@make-lexical-violation) (set! G4c5d@G4a86@p? G4a86@p?) (set! G4c5c@G4a83@G4a7b G4a83@G4a7b) (set! G4c5b@G4a81@G4a7c G4a81@G4a7c) (set! G4c5a@G4a7f@G4a7a G4a7f@G4a7a) (set! G4c59@G4a79@&implementation-restriction-rcd G4a79@&implementation-restriction-rcd) (set! G4c58@G4a77@&implementation-restriction-rtd G4a77@&implementation-restriction-rtd) (set! G4c57@G4a75@implementation-restriction-violation? G4a75@implementation-restriction-violation?) (set! G4c56@G4a73@make-implementation-restriction-violation G4a73@make-implementation-restriction-violation) (set! G4c55@G4a71@p? G4a71@p?) (set! G4c54@G4a6e@G4a66 G4a6e@G4a66) (set! G4c53@G4a6c@G4a67 G4a6c@G4a67) (set! G4c52@G4a6a@G4a65 G4a6a@G4a65) (set! G4c51@G4a64@&non-continuable-rcd G4a64@&non-continuable-rcd) (set! G4c50@G4a62@&non-continuable-rtd G4a62@&non-continuable-rtd) (set! G4c4f@G4a60@non-continuable-violation? G4a60@non-continuable-violation?) (set! G4c4e@G4a5e@make-non-continuable-violation G4a5e@make-non-continuable-violation) (set! G4c4d@G4a5c@p? G4a5c@p?) (set! G4c4c@G4a59@G4a51 G4a59@G4a51) (set! G4c4b@G4a57@G4a52 G4a57@G4a52) (set! G4c4a@G4a55@G4a50 G4a55@G4a50) (set! G4c49@G4a4f@&who-rcd G4a4f@&who-rcd) (set! G4c48@G4a4d@&who-rtd G4a4d@&who-rtd) (set! G4c47@G4a4b@condition-who G4a4b@condition-who) (set! G4c46@G4a49@who-condition? G4a49@who-condition?) (set! G4c45@G4a47@G4a36 G4a47@G4a36) (set! G4c44@G4a45@make-who-condition G4a45@make-who-condition) (set! G4c43@G4a43@p? G4a43@p?) (set! G4c42@G4a40@G4a38 G4a40@G4a38) (set! G4c41@G4a3e@G4a39 G4a3e@G4a39) (set! G4c40@G4a3c@G4a37 G4a3c@G4a37) (set! G4c3f@G4a35@&irritants-rcd G4a35@&irritants-rcd) (set! G4c3e@G4a33@&irritants-rtd G4a33@&irritants-rtd) (set! G4c3d@G4a31@condition-irritants G4a31@condition-irritants) (set! G4c3c@G4a2f@irritants-condition? G4a2f@irritants-condition?) (set! G4c3b@G4a2d@G4a1c G4a2d@G4a1c) (set! G4c3a@G4a2b@make-irritants-condition G4a2b@make-irritants-condition) (set! G4c39@G4a29@p? G4a29@p?) (set! G4c38@G4a26@G4a1e G4a26@G4a1e) (set! G4c37@G4a24@G4a1f G4a24@G4a1f) (set! G4c36@G4a22@G4a1d G4a22@G4a1d) (set! G4c35@G4a1b@&assertion-rcd G4a1b@&assertion-rcd) (set! G4c34@G4a19@&assertion-rtd G4a19@&assertion-rtd) (set! G4c33@G4a17@assertion-violation? G4a17@assertion-violation?) (set! G4c32@G4a15@make-assertion-violation G4a15@make-assertion-violation) (set! G4c31@G4a13@p? G4a13@p?) (set! G4c30@G4a10@G4a08 G4a10@G4a08) (set! G4c2f@G4a0e@G4a09 G4a0e@G4a09) (set! G4c2e@G4a0c@G4a07 G4a0c@G4a07) (set! G4c2d@G4a06@&violation-rcd G4a06@&violation-rcd) (set! G4c2c@G4a04@&violation-rtd G4a04@&violation-rtd) (set! G4c2b@G4a02@violation? G4a02@violation?) (set! G4c2a@G4a00@make-violation G4a00@make-violation) (set! G4c29@G49fe@p? G49fe@p?) (set! G4c28@G49fb@G49f3 G49fb@G49f3) (set! G4c27@G49f9@G49f4 G49f9@G49f4) (set! G4c26@G49f7@G49f2 G49f7@G49f2) (set! G4c25@G49f1@&error-rcd G49f1@&error-rcd) (set! G4c24@G49ef@&error-rtd G49ef@&error-rtd) (set! G4c23@G49ed@error? G49ed@error?) (set! G4c22@G49eb@make-error G49eb@make-error) (set! G4c21@G49e9@p? G49e9@p?) (set! G4c20@G49e6@G49de G49e6@G49de) (set! G4c1f@G49e4@G49df G49e4@G49df) (set! G4c1e@G49e2@G49dd G49e2@G49dd) (set! G4c1d@G49dc@&serious-rcd G49dc@&serious-rcd) (set! G4c1c@G49da@&serious-rtd G49da@&serious-rtd) (set! G4c1b@G49d8@serious-condition? G49d8@serious-condition?) (set! G4c1a@G49d6@make-serious-condition G49d6@make-serious-condition) (set! G4c19@G49d4@p? G49d4@p?) (set! G4c18@G49d1@G49c9 G49d1@G49c9) (set! G4c17@G49cf@G49ca G49cf@G49ca) (set! G4c16@G49cd@G49c8 G49cd@G49c8) (set! G4c15@G49c7@&warning-rcd G49c7@&warning-rcd) (set! G4c14@G49c5@&warning-rtd G49c5@&warning-rtd) (set! G4c13@G49c3@warning? G49c3@warning?) (set! G4c12@G49c1@make-warning G49c1@make-warning) (set! G4c11@G49bf@p? G49bf@p?) (set! G4c10@G49bc@G49b4 G49bc@G49b4) (set! G4c0f@G49ba@G49b5 G49ba@G49b5) (set! G4c0e@G49b8@G49b3 G49b8@G49b3) (set! G4c0d@G49b2@&message-rcd G49b2@&message-rcd) (set! G4c0c@G49b0@&message-rtd G49b0@&message-rtd) (set! G4c0b@G49ae@condition-message G49ae@condition-message) (set! G4c0a@G49ac@message-condition? G49ac@message-condition?) (set! G4c09@G49aa@G4999 G49aa@G4999) (set! G4c08@G49a8@make-message-condition G49a8@make-message-condition) (set! G4c07@G49a6@p? G49a6@p?) (set! G4c06@G49a3@G499b G49a3@G499b) (set! G4c05@G49a1@G499c G49a1@G499c) (set! G4c04@G499f@G499a G499f@G499a) (set! G4c03@G4955@&condition-rcd G4955@&condition-rcd) (set! G4c02@G4953@&condition-rtd G4953@&condition-rtd) (set! G4c01@G4951@make-&condition G4951@make-&condition) (set! G4c00@G494f@&condition? G494f@&condition?) (set! G4bff@G494c@G4944 G494c@G4944) (set! G4bfe@G494a@G4945 G494a@G4945) (set! G4bfd@G4948@G4943 G4948@G4943)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G293d@G28f2@current-primitive-locations (lambda (G50af@x) ((lambda (G50b1@t) (if G50b1@t (cdr G50b1@t) '#f)) (assq G50af@x '((&no-nans-rcd . G4ced@G4bfc@&no-nans-rcd) (&no-nans-rtd . G4cec@G4bfa@&no-nans-rtd) (&no-infinities-rcd . G4ce5@G4be7@&no-infinities-rcd) (&no-infinities-rtd . G4ce4@G4be5@&no-infinities-rtd) (&i/o-encoding-rcd . G4cdd@G4bd2@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4cdc@G4bd0@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4cd3@G4bb8@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4cd2@G4bb6@&i/o-decoding-rtd) (&i/o-port-rcd . G4ccb@G4ba3@&i/o-port-rcd) (&i/o-port-rtd . G4cca@G4ba1@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cc1@G4b89@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cc0@G4b87@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cb9@G4b74@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cb8@G4b72@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cb1@G4b5f@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cb0@G4b5d@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4ca9@G4b4a@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4ca8@G4b48@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4ca1@G4b35@&i/o-filename-rcd) (&i/o-filename-rtd . G4ca0@G4b33@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4c97@G4b1b@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4c96@G4b19@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c8d@G4b01@&i/o-write-rcd) (&i/o-write-rtd . G4c8c@G4aff@&i/o-write-rtd) (&i/o-read-rcd . G4c85@G4aec@&i/o-read-rcd) (&i/o-read-rtd . G4c84@G4aea@&i/o-read-rtd) (&i/o-rcd . G4c7d@G4ad7@&i/o-rcd) (&i/o-rtd . G4c7c@G4ad5@&i/o-rtd) (&undefined-rcd . G4c75@G4ac2@&undefined-rcd) (&undefined-rtd . G4c74@G4ac0@&undefined-rtd) (&syntax-rcd . G4c6d@G4aad@&syntax-rcd) (&syntax-rtd . G4c6c@G4aab@&syntax-rtd) (&lexical-rcd . G4c61@G4a8e@&lexical-rcd) (&lexical-rtd . G4c60@G4a8c@&lexical-rtd) (&implementation-restriction-rcd . G4c59@G4a79@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c58@G4a77@&implementation-restriction-rtd) (&non-continuable-rcd . G4c51@G4a64@&non-continuable-rcd) (&non-continuable-rtd . G4c50@G4a62@&non-continuable-rtd) (&who-rcd . G4c49@G4a4f@&who-rcd) (&who-rtd . G4c48@G4a4d@&who-rtd) (&irritants-rcd . G4c3f@G4a35@&irritants-rcd) (&irritants-rtd . G4c3e@G4a33@&irritants-rtd) (&assertion-rcd . G4c35@G4a1b@&assertion-rcd) (&assertion-rtd . G4c34@G4a19@&assertion-rtd) (&violation-rcd . G4c2d@G4a06@&violation-rcd) (&violation-rtd . G4c2c@G4a04@&violation-rtd) (&error-rcd . G4c25@G49f1@&error-rcd) (&error-rtd . G4c24@G49ef@&error-rtd) (&serious-rcd . G4c1d@G49dc@&serious-rcd) (&serious-rtd . G4c1c@G49da@&serious-rtd) (&warning-rcd . G4c15@G49c7@&warning-rcd) (&warning-rtd . G4c14@G49c5@&warning-rtd) (&message-rcd . G4c0d@G49b2@&message-rcd) (&message-rtd . G4c0c@G49b0@&message-rtd) (&condition-rcd . G4c03@G4955@&condition-rcd) (&condition-rtd . G4c02@G4953@&condition-rtd) (syntax-error . G4935@G3036@syntax-error) (syntax-dispatch . G48c9@G2f4f@syntax-dispatch) (load . G4dab@G4cff@load) (interaction-environment . G493d@G3046@interaction-environment) (make-parameter . G28ec@G2822@make-parameter) (make-variable-transformer . G4887@G2d8a@make-variable-transformer) (identifier? . G4938@G303c@identifier?) (generate-temporaries . G492e@G3028@generate-temporaries) (free-identifier=? . G492f@G302a@free-identifier=?) (syntax->datum . G493a@G3040@syntax->datum) (datum->syntax . G4939@G303e@datum->syntax) (bound-identifier=? . G4930@G302c@bound-identifier=?) (make-i/o-write-error . G4c8a@G4afb@make-i/o-write-error) (make-i/o-read-error . G4c82@G4ae6@make-i/o-read-error) (make-i/o-port-error . G4cc6@G4b99@make-i/o-port-error) (make-i/o-invalid-position-error . G4c92@G4b11@make-i/o-invalid-position-error) (make-i/o-filename-error . G4c9c@G4b2b@make-i/o-filename-error) (make-i/o-file-protection-error . G4ca6@G4b44@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cae@G4b59@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cbe@G4b83@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cb6@G4b6e@make-i/o-file-already-exists-error) (make-i/o-error . G4c7a@G4ad1@make-i/o-error) (make-i/o-encoding-error . G4cd8@G4bc8@make-i/o-encoding-error) (make-i/o-decoding-error . G4cd0@G4bb2@make-i/o-decoding-error) (i/o-write-error? . G4c8b@G4afd@i/o-write-error?) (i/o-read-error? . G4c83@G4ae8@i/o-read-error?) (i/o-port-error? . G4cc8@G4b9d@i/o-port-error?) (i/o-invalid-position-error? . G4c94@G4b15@i/o-invalid-position-error?) (i/o-filename-error? . G4c9e@G4b2f@i/o-filename-error?) (i/o-file-protection-error? . G4ca7@G4b46@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4caf@G4b5b@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cbf@G4b85@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cb7@G4b70@i/o-file-already-exists-error?) (i/o-error? . G4c7b@G4ad3@i/o-error?) (i/o-error-position . G4c95@G4b17@i/o-error-position) (i/o-error-port . G4cc9@G4b9f@i/o-error-port) (i/o-error-filename . G4c9f@G4b31@i/o-error-filename) (i/o-encoding-error? . G4cda@G4bcc@i/o-encoding-error?) (i/o-encoding-error-char . G4cdb@G4bce@i/o-encoding-error-char) (i/o-decoding-error? . G4cd1@G4bb4@i/o-decoding-error?) (scheme-report-environment . G4925@G3016@scheme-report-environment) (null-environment . G4924@G3014@null-environment) (command-line . G4da8@G4cf9@command-line) (eval . G4927@G301a@eval) (environment . G4923@G3012@environment) (who-condition? . G4c46@G4a49@who-condition?) (warning? . G4c13@G49c3@warning?) (violation? . G4c2b@G4a02@violation?) (undefined-violation? . G4c73@G4abe@undefined-violation?) (syntax-violation? . G4c69@G4aa5@syntax-violation?) (syntax-violation-subform . G4c6b@G4aa9@syntax-violation-subform) (syntax-violation-form . G4c6a@G4aa7@syntax-violation-form) (syntax-violation . G4937@G303a@syntax-violation) (serious-condition? . G4c1b@G49d8@serious-condition?) (non-continuable-violation? . G4c4f@G4a60@non-continuable-violation?) (message-condition? . G4c0a@G49ac@message-condition?) (make-who-condition . G4c44@G4a45@make-who-condition) (make-warning . G4c12@G49c1@make-warning) (make-violation . G4c2a@G4a00@make-violation) (make-undefined-violation . G4c72@G4abc@make-undefined-violation) (make-syntax-violation . G4c66@G4a9f@make-syntax-violation) (make-serious-condition . G4c1a@G49d6@make-serious-condition) (make-non-continuable-violation . G4c4e@G4a5e@make-non-continuable-violation) (make-message-condition . G4c08@G49a8@make-message-condition) (make-lexical-violation . G4c5e@G4a88@make-lexical-violation) (make-irritants-condition . G4c3a@G4a2b@make-irritants-condition) (make-implementation-restriction-violation . G4c56@G4a73@make-implementation-restriction-violation) (make-error . G4c22@G49eb@make-error) (make-assertion-violation . G4c32@G4a15@make-assertion-violation) (lexical-violation? . G4c5f@G4a8a@lexical-violation?) (irritants-condition? . G4c3c@G4a2f@irritants-condition?) (implementation-restriction-violation? . G4c57@G4a75@implementation-restriction-violation?) (error? . G4c23@G49ed@error?) (condition-who . G4c47@G4a4b@condition-who) (condition-message . G4c0b@G49ae@condition-message) (condition-irritants . G4c3d@G4a31@condition-irritants) (assertion-violation? . G4c33@G4a17@assertion-violation?) (no-nans-violation? . G4ceb@G4bf8@no-nans-violation?) (no-infinities-violation? . G4ce3@G4be3@no-infinities-violation?) (make-no-nans-violation . G4cea@G4bf6@make-no-nans-violation) (make-no-infinities-violation . G4ce2@G4be1@make-no-infinities-violation)))))) (G2b65@G2a0a@install-library 'G5082 '(mosh interaction) '() '() '() '() '((string-upcase . G5032) (string-titlecase . G5031) (string-normalize-nfkd . G5030) (string-normalize-nfkc . G502f) (string-normalize-nfd . G502e) (string-normalize-nfc . G502d) (string-foldcase . G502c) (string-downcase . G502b) (string-ci>? . G502a) (string-ci>=? . G5029) (string-ci=? . G5028) (string-ci<? . G5027) (string-ci<=? . G5026) (char-whitespace? . G5025) (char-upper-case? . G5024) (char-title-case? . G5023) (char-numeric? . G5022) (char-lower-case? . G5021) (char-general-category . G5020) (char-upcase . G501f) (char-titlecase . G501e) (char-foldcase . G501d) (char-downcase . G501c) (char-ci>? . G501b) (char-ci>=? . G501a) (char-ci=? . G5019) (char-ci<? . G5018) (char-ci<=? . G5017) (char-alphabetic? . G5016) (make-variable-transformer . G2d89) (identifier? . G303b) (generate-temporaries . G3027) (free-identifier=? . G3029) (syntax->datum . G303f) (datum->syntax . G303d) (bound-identifier=? . G302b) (record-type-descriptor? . G5015) (record-predicate . G5014) (record-mutator . G5013) (record-constructor . G5012) (record-accessor . G5011) (make-record-type-descriptor . G5010) (make-record-constructor-descriptor . G500f) (record? . G500e) (record-type-uid . G500d) (record-type-sealed? . G500c) (record-type-parent . G500b) (record-type-opaque? . G500a) (record-type-name . G5009) (record-type-generative? . G5008) (record-type-field-names . G5007) (record-rtd . G5006) (record-field-mutable? . G5005) (delete-file . G5004) (file-exists? . G5003) (vector-sort! . G5002) (vector-sort . G5001) (list-sort . G5000) (symbol-hash . G4fff) (string-ci-hash . G4ffe) (string-hash . G4ffd) (equal-hash . G4ffc) (hashtable-equivalence-function . G4ffb) (make-hashtable . G4ffa) (hashtable-hash-function . G4ff9) (make-eqv-hashtable . G4ff8) (make-eq-hashtable . G4ff7) (hashtable? . G4ff6) (hashtable-update! . G4ff5) (hashtable-size . G4ff4) (hashtable-set! . G4ff3) (hashtable-ref . G4ff2) (hashtable-mutable? . G4ff1) (hashtable-keys . G4ff0) (hashtable-entries . G4fef) (hashtable-delete! . G4fee) (hashtable-copy . G4fed) (hashtable-contains? . G4fec) (hashtable-clear! . G4feb) (call-with-output-file . G4fea) (call-with-input-file . G4fe9) (write-char . G4fe8) (write . G4fe7) (with-output-to-file . G4fe6) (with-input-from-file . G4fe5) (read-char . G4fe4) (read . G4fe3) (peek-char . G4fe2) (open-output-file . G4fe1) (open-input-file . G4fe0) (newline . G4fdf) (display . G4fde) (close-output-port . G4fdd) (close-input-port . G4fdc) (eof-object? . G4fdb) (eof-object . G4fda) (current-error-port . G4fd9) (current-output-port . G4fd8) (current-input-port . G4fd7) (output-port? . G4fd6) (input-port? . G4fd5) (utf-8-codec . G4fd4) (utf-16-codec . G4fd3) (transcoder-error-handling-mode . G4fd2) (transcoder-eol-style . G4fd1) (transcoder-codec . G4fd0) (transcoded-port . G4fcf) (textual-port? . G4fce) (string->bytevector . G4fcd) (standard-output-port . G4fcc) (standard-input-port . G4fcb) (standard-error-port . G4fca) (set-port-position! . G4fc9) (put-u8 . G4fc8) (put-string . G4fc7) (put-datum . G4fc6) (put-char . G4fc5) (put-bytevector . G4fc4) (port? . G4fc3) (port-transcoder . G4fc2) (port-position . G4fc1) (port-has-set-port-position!? . G4fc0) (port-has-port-position? . G4fbf) (port-eof? . G4fbe) (output-port-buffer-mode . G4fbd) (open-string-output-port . G4fbc) (open-string-input-port . G4fbb) (open-file-output-port . G4fba) (open-file-input/output-port . G4fb9) (open-file-input-port . G4fb8) (open-bytevector-output-port . G4fb7) (open-bytevector-input-port . G4fb6) (native-transcoder . G4fb5) (native-eol-style . G4fb4) (make-transcoder . G4fb3) (latin-1-codec . G4fb2) (make-i/o-write-error . G4afa) (make-i/o-read-error . G4ae5) (make-i/o-port-error . G4b98) (make-i/o-invalid-position-error . G4b10) (make-i/o-filename-error . G4b2a) (make-i/o-file-protection-error . G4b43) (make-i/o-file-is-read-only-error . G4b58) (make-i/o-file-does-not-exist-error . G4b82) (make-i/o-file-already-exists-error . G4b6d) (make-i/o-error . G4ad0) (make-i/o-encoding-error . G4bc7) (make-i/o-decoding-error . G4bb1) (make-custom-textual-output-port . G4fb1) (make-custom-textual-input/output-port . G4fb0) (make-custom-textual-input-port . G4faf) (make-custom-binary-output-port . G4fae) (make-custom-binary-input/output-port . G4fad) (make-custom-binary-input-port . G4fac) (make-bytevector . G4fab) (lookahead-u8 . G4faa) (lookahead-char . G4fa9) (i/o-write-error? . G4afc) (i/o-read-error? . G4ae7) (i/o-port-error? . G4b9c) (i/o-invalid-position-error? . G4b14) (i/o-filename-error? . G4b2e) (i/o-file-protection-error? . G4b45) (i/o-file-is-read-only-error? . G4b5a) (i/o-file-does-not-exist-error? . G4b84) (i/o-file-already-exists-error? . G4b6f) (i/o-error? . G4ad2) (i/o-error-position . G4b16) (i/o-error-port . G4b9e) (i/o-error-filename . G4b30) (i/o-encoding-error? . G4bcb) (i/o-encoding-error-char . G4bcd) (i/o-decoding-error? . G4bb3) (get-u8 . G4fa8) (get-string-n! . G4fa7) (get-string-n . G4fa6) (get-string-all . G4fa5) (get-line . G4fa4) (get-datum . G4fa3) (get-char . G4fa2) (get-bytevector-some . G4fa1) (get-bytevector-n! . G4fa0) (get-bytevector-n . G4f9f) (get-bytevector-all . G4f9e) (flush-output-port . G4f9d) (close-port . G4f9c) (exit . G4f94) (command-line . G4cf8) (string-fill! . G4f93) (string-set! . G4f92) (set-cdr! . G4f91) (set-car! . G4f90) (remove . G4f8f) (remv . G4f8e) (remp . G4f8d) (remq . G4f8c) (partition . G4f8b) (memv . G4f8a) (memq . G4f89) (memp . G4f88) (member . G4f87) (exists . G4f86) (for-all . G4f85) (fold-right . G4f84) (fold-left . G4f83) (find . G4f82) (filter . G4f81) (cons* . G4f80) (assv . G4f7f) (assq . G4f7e) (assp . G4f7d) (assoc . G4f7c) (call-with-string-output-port . G4f7b) (call-with-port . G4f7a) (call-with-bytevector-output-port . G4f79) (bytevector->string . G4f78) (buffer-mode? . G4f77) (binary-port? . G4f76) (with-exception-handler . G4f75) (raise-continuable . G4f74) (raise . G4f73) (eval . G3019) (environment . G3011) (make-enumeration . G4f72) (enum-set=? . G4f71) (enum-set-universe . G4f70) (enum-set-union . G4f6f) (enum-set-subset? . G4f6e) (enum-set-projection . G4f6d) (enum-set-member? . G4f6c) (enum-set-intersection . G4f6b) (enum-set-indexer . G4f6a) (enum-set-difference . G4f69) (enum-set-constructor . G4f68) (enum-set-complement . G4f67) (enum-set->list . G4f66) (who-condition? . G4a48) (warning? . G49c2) (violation? . G4a01) (undefined-violation? . G4abd) (syntax-violation? . G4aa4) (syntax-violation-subform . G4aa8) (syntax-violation-form . G4aa6) (syntax-violation . G3039) (simple-conditions . G4f65) (serious-condition? . G49d7) (non-continuable-violation? . G4a5f) (message-condition? . G49ab) (make-who-condition . G4a44) (make-warning . G49c0) (make-violation . G49ff) (make-undefined-violation . G4abb) (make-syntax-violation . G4a9e) (make-serious-condition . G49d5) (make-non-continuable-violation . G4a5d) (make-message-condition . G49a7) (make-lexical-violation . G4a87) (make-irritants-condition . G4a2a) (make-implementation-restriction-violation . G4a72) (make-error . G49ea) (make-assertion-violation . G4a14) (lexical-violation? . G4a89) (irritants-condition? . G4a2e) (implementation-restriction-violation? . G4a74) (error? . G49ec) (condition-who . G4a4a) (condition-predicate . G4f64) (condition-message . G49ad) (condition-irritants . G4a30) (condition-accessor . G4f63) (condition . G4f62) (assertion-violation? . G4a16) (condition? . G4f61) (utf32->string . G4f60) (utf16->string . G4f5f) (utf8->string . G4f5e) (uint-list->bytevector . G4f5d) (u8-list->bytevector . G4f5c) (string->utf8 . G4f5b) (string->utf32 . G4f5a) (string->utf16 . G4f59) (sint-list->bytevector . G4f58) (native-endianness . G4f57) (bytevector? . G4f56) (bytevector=? . G4f55) (bytevector-uint-set! . G4f54) (bytevector-uint-ref . G4f53) (bytevector-u8-set! . G4f52) (bytevector-u8-ref . G4f51) (bytevector-u64-set! . G4f50) (bytevector-u64-ref . G4f4f) (bytevector-u64-native-set! . G4f4e) (bytevector-u64-native-ref . G4f4d) (bytevector-u32-set! . G4f4c) (bytevector-u32-ref . G4f4b) (bytevector-u32-native-set! . G4f4a) (bytevector-u32-native-ref . G4f49) (bytevector-u16-set! . G4f48) (bytevector-u16-ref . G4f47) (bytevector-u16-native-set! . G4f46) (bytevector-u16-native-ref . G4f45) (bytevector-sint-set! . G4f44) (bytevector-sint-ref . G4f43) (bytevector-s8-set! . G4f42) (bytevector-s8-ref . G4f41) (bytevector-s64-set! . G4f40) (bytevector-s64-ref . G4f3f) (bytevector-s64-native-set! . G4f3e) (bytevector-s64-native-ref . G4f3d) (bytevector-s32-set! . G4f3c) (bytevector-s32-ref . G4f3b) (bytevector-s32-native-set! . G4f3a) (bytevector-s32-native-ref . G4f39) (bytevector-s16-set! . G4f38) (bytevector-s16-ref . G4f37) (bytevector-s16-native-set! . G4f36) (bytevector-s16-native-ref . G4f35) (bytevector-length . G4f34) (bytevector-ieee-single-ref . G4f33) (bytevector-ieee-single-set! . G4f32) (bytevector-ieee-single-native-set! . G4f31) (bytevector-ieee-single-native-ref . G4f30) (bytevector-ieee-double-set! . G4f2f) (bytevector-ieee-double-ref . G4f2e) (bytevector-ieee-double-native-set! . G4f2d) (bytevector-ieee-double-native-ref . G4f2c) (bytevector-fill! . G4f2b) (bytevector-copy! . G4f2a) (bytevector-copy . G4f29) (bytevector->uint-list . G4f28) (bytevector->u8-list . G4f27) (bytevector->sint-list . G4f26) (no-nans-violation? . G4bf7) (no-infinities-violation? . G4be2) (make-no-nans-violation . G4bf5) (make-no-infinities-violation . G4be0) (real->flonum . G4f25) (flzero? . G4f24) (fltruncate . G4f23) (fltan . G4f22) (flsqrt . G4f21) (flsin . G4f20) (flround . G4f1f) (flpositive? . G4f1e) (flonum? . G4f1d) (flodd? . G4f1c) (flnumerator . G4f1b) (flnegative? . G4f1a) (flnan? . G4f19) (flmod0 . G4f18) (flmod . G4f17) (flmin . G4f16) (flmax . G4f15) (fllog . G4f14) (flinteger? . G4f13) (flinfinite? . G4f12) (flfloor . G4f11) (flfinite? . G4f10) (flexpt . G4f0f) (flexp . G4f0e) (fleven? . G4f0d) (fldiv0-and-mod0 . G4f0c) (fldiv0 . G4f0b) (fldiv-and-mod . G4f0a) (fldiv . G4f09) (fldenominator . G4f08) (flcos . G4f07) (flceiling . G4f06) (flatan . G4f05) (flasin . G4f04) (flacos . G4f03) (flabs . G4f02) (fl>? . G4f01) (fl>=? . G4f00) (fl=? . G4eff) (fl<? . G4efe) (fl<=? . G4efd) (fl/ . G4efc) (fl- . G4efb) (fl+ . G4efa) (fl* . G4ef9) (fixnum->flonum . G4ef8) (fxzero? . G4ef7) (fxxor . G4ef6) (fxrotate-bit-field . G4ef5) (fxreverse-bit-field . G4ef4) (fxpositive? . G4ef3) (fxodd? . G4ef2) (fxnot . G4ef1) (fxnegative? . G4ef0) (fxmod0 . G4eef) (fxmod . G4eee) (fxmin . G4eed) (fxmax . G4eec) (fxlength . G4eeb) (fxior . G4eea) (fxif . G4ee9) (fxfirst-bit-set . G4ee8) (fxeven? . G4ee7) (fxdiv0-and-mod0 . G4ee6) (fxdiv0 . G4ee5) (fxdiv-and-mod . G4ee4) (fxdiv . G4ee3) (fxcopy-bit-field . G4ee2) (fxcopy-bit . G4ee1) (fxbit-set? . G4ee0) (fxbit-field . G4edf) (fxbit-count . G4ede) (fxarithmetic-shift-right . G4edd) (fxarithmetic-shift-left . G4edc) (fxarithmetic-shift . G4edb) (fxand . G4eda) (fx>? . G4ed9) (fx>=? . G4ed8) (fx=? . G4ed7) (fx<? . G4ed6) (fx<=? . G4ed5) (fx-/carry . G4ed4) (fx- . G4ed3) (fx+/carry . G4ed2) (fx+ . G4ed1) (fx*/carry . G4ed0) (fx* . G4ecf) (greatest-fixnum . G4ece) (least-fixnum . G4ecd) (fixnum-width . G4ecc) (fixnum? . G4ecb) (bitwise-rotate-bit-field . G4eca) (bitwise-reverse-bit-field . G4ec9) (bitwise-length . G4ec8) (bitwise-if . G4ec7) (bitwise-first-bit-set . G4ec6) (bitwise-copy-bit-field . G4ec5) (bitwise-copy-bit . G4ec4) (bitwise-bit-set? . G4ec3) (bitwise-bit-field . G4ec2) (bitwise-bit-count . G4ec1) (bitwise-xor . G4ec0) (bitwise-ior . G4ebf) (bitwise-and . G4ebe) (bitwise-not . G4ebd) (bitwise-arithmetic-shift-right . G4ebc) (bitwise-arithmetic-shift-left . G4ebb) (bitwise-arithmetic-shift . G4eba) (zero? . G4eb9) (vector? . G4eb8) (vector-set! . G4eb7) (vector-ref . G4eb6) (vector-map . G4eb5) (vector-length . G4eb4) (vector-for-each . G4eb3) (vector-fill! . G4eb2) (vector->list . G4eb1) (vector . G4eb0) (values . G4eaf) (truncate . G4eae) (tan . G4ead) (symbol? . G4eac) (symbol=? . G4eab) (symbol->string . G4eaa) (substring . G4ea9) (string? . G4ea8) (string>? . G4ea7) (string>=? . G4ea6) (string=? . G4ea5) (string<? . G4ea4) (string<=? . G4ea3) (string-ref . G4ea2) (string-length . G4ea1) (string-for-each . G4ea0) (string-copy . G4e9f) (string-append . G4e9e) (string->symbol . G4e9d) (string->number . G4e9c) (string->list . G4e9b) (string . G4e9a) (sqrt . G4e99) (sin . G4e98) (round . G4e97) (reverse . G4e96) (real? . G4e95) (real-valued? . G4e94) (real-part . G4e93) (rationalize . G4e92) (rational? . G4e91) (rational-valued? . G4e90) (procedure? . G4e8f) (positive? . G4e8e) (pair? . G4e8d) (odd? . G4e8c) (numerator . G4e8b) (number? . G4e8a) (number->string . G4e89) (null? . G4e88) (not . G4e87) (negative? . G4e86) (nan? . G4e85) (min . G4e84) (max . G4e83) (map . G4e82) (make-vector . G4e81) (make-string . G4e80) (make-rectangular . G4e7f) (make-polar . G4e7e) (magnitude . G4e7d) (log . G4e7c) (list? . G4e7b) (list-tail . G4e7a) (list-ref . G4e79) (list->vector . G4e78) (list->string . G4e77) (list . G4e76) (length . G4e75) (lcm . G4e74) (integer? . G4e73) (integer-valued? . G4e72) (integer->char . G4e71) (infinite? . G4e70) (inexact? . G4e6f) (inexact . G4e6e) (imag-part . G4e6d) (gcd . G4e6c) (for-each . G4e6b) (floor . G4e6a) (finite? . G4e69) (expt . G4e68) (exp . G4e67) (exact? . G4e66) (exact-integer-sqrt . G4e65) (exact . G4e64) (even? . G4e63) (error . G4e62) (eqv? . G4e61) (equal? . G4e60) (eq? . G4e5f) (dynamic-wind . G4e5e) (div0-and-mod0 . G4e5d) (mod0 . G4e5c) (div0 . G4e5b) (div-and-mod . G4e5a) (mod . G4e59) (div . G4e58) (denominator . G4e57) (cos . G4e56) (cons . G4e55) (complex? . G4e54) (char? . G4e53) (char>? . G4e52) (char>=? . G4e51) (char=? . G4e50) (char<? . G4e4f) (char<=? . G4e4e) (char->integer . G4e4d) (ceiling . G4e4c) (call-with-values . G4e4b) (call/cc . G4e4a) (call-with-current-continuation . G4e49) (cddddr . G4e48) (cdddar . G4e47) (cddadr . G4e46) (cddaar . G4e45) (cdaddr . G4e44) (cdadar . G4e43) (cdaadr . G4e42) (cdaaar . G4e41) (cadddr . G4e40) (caddar . G4e3f) (cadadr . G4e3e) (cadaar . G4e3d) (caaddr . G4e3c) (caadar . G4e3b) (caaadr . G4e3a) (caaaar . G4e39) (cdddr . G4e38) (cddar . G4e37) (cdadr . G4e36) (cdaar . G4e35) (caddr . G4e34) (cadar . G4e33) (caadr . G4e32) (caaar . G4e31) (cddr . G4e30) (cdar . G4e2f) (cadr . G4e2e) (caar . G4e2d) (cdr . G4e2c) (car . G4e2b) (boolean? . G4e2a) (boolean=? . G4e29) (atan . G4e28) (assertion-violation . G4e27) (asin . G4e26) (apply . G4e25) (append . G4e24) (angle . G4e23) (acos . G4e22) (abs . G4e21) (/ . G4e20) (* . G4e1f) (- . G4e1e) (+ . G4e1d) (>= . G4e1c) (> . G4e1b) (= . G4e1a) (<= . G4e19) (< . G4e18) (library . G4e17) (export . G4e16) (&no-nans . G4e15) (&no-infinities . G4e14) (&i/o-encoding . G4e13) (&i/o-decoding . G4e12) (&i/o-port . G4e11) (&i/o-file-does-not-exist . G4e10) (&i/o-file-already-exists . G4e0f) (&i/o-file-is-read-only . G4e0e) (&i/o-file-protection . G4e0d) (&i/o-filename . G4e0c) (&i/o-invalid-position . G4e0b) (&i/o-write . G4e0a) (&i/o-read . G4e09) (&i/o . G4e08) (&undefined . G4e07) (&syntax . G4e06) (&lexical . G4e05) (&implementation-restriction . G4e04) (&non-continuable . G4e03) (&who . G4e02) (&irritants . G4e01) (&assertion . G4e00) (&violation . G4dff) (&error . G4dfe) (&serious . G4dfd) (&warning . G4dfc) (&message . G4dfb) (&condition . G4dfa) (define-condition-type . G4df9) (define-enumeration . G4df8) (define-record-type . G4df7) (parent-rtd . G4df6) (nongenerative . G4df5) (opaque . G4df4) (sealed . G4df3) (protocol . G4df2) (parent . G4df1) (immutable . G4df0) (mutable . G4def) (fields . G4dee) (error-handling-mode . G4ded) (file-options . G4dec) (buffer-mode . G4deb) (eol-style . G4dea) (guard . G4de9) (unsyntax-splicing . G4de6) (unsyntax . G4de5) (unquote-splicing . G4de4) (unquote . G4de3) (assert . G4dde) (endianness . G4ddd) (do . G4dda) (cond . G4dd9) (let* . G4dd8) (let . G4dd7) (let*-values . G4dd6) (let-values . G4dd5) (identifier-syntax . G4dd4) (with-syntax . G4dd3) (quasisyntax . G4dd2) (quasiquote . G4dd1) (syntax-rules . G4dd0) (include . G4dcf) (record-constructor-descriptor . G4dcd) (record-type-descriptor . G4dcc) (case . G4dcb) (unless . G4dc9) (when . G4dc8) (or . G4dc7) (and . G4dc6) (if . G4dc5) (letrec* . G4dc4) (letrec . G4dc3) (case-lambda . G4dc1) (lambda . G4dc0) (syntax . G4dbf) (syntax-case . G4dbe) (quote . G4dbd) (letrec-syntax . G4dbb) (let-syntax . G4dba) (set! . G4db9) (import . G4db8) (begin . G4db7) (define-syntax . G4db5) (define . G4db4)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5083 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4f95) (unquote-splicing . G4de4) (unquote . G4de3) (_ . G4de2) (else . G4de1) (=> . G4de0) (... . G4ddf) (delay . G4ddc) (do . G4dda) (cond . G4dd9) (let* . G4dd8) (let . G4dd7) (quasiquote . G4dd1) (syntax-rules . G4dd0) (case . G4dcb) (or . G4dc7) (and . G4dc6) (if . G4dc5) (letrec . G4dc3) (lambda . G4dc0) (quote . G4dbd) (letrec-syntax . G4dbb) (let-syntax . G4dba) (set! . G4db9) (begin . G4db7) (define-syntax . G4db5) (define . G4db4)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5084 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G502a) (string-ci>=? . G5029) (string-ci=? . G5028) (string-ci<? . G5027) (string-ci<=? . G5026) (char-whitespace? . G5025) (char-upper-case? . G5024) (char-numeric? . G5022) (char-lower-case? . G5021) (char-upcase . G501f) (char-downcase . G501c) (char-ci>? . G501b) (char-ci>=? . G501a) (char-ci=? . G5019) (char-ci<? . G5018) (char-ci<=? . G5017) (char-alphabetic? . G5016) (call-with-output-file . G4fea) (call-with-input-file . G4fe9) (write-char . G4fe8) (write . G4fe7) (with-output-to-file . G4fe6) (with-input-from-file . G4fe5) (read-char . G4fe4) (read . G4fe3) (peek-char . G4fe2) (open-output-file . G4fe1) (open-input-file . G4fe0) (newline . G4fdf) (display . G4fde) (close-output-port . G4fdd) (close-input-port . G4fdc) (eof-object . G4fda) (current-output-port . G4fd8) (current-input-port . G4fd7) (output-port? . G4fd6) (input-port? . G4fd5) (scheme-report-environment . G3015) (quotient . G4f9b) (null-environment . G3013) (remainder . G4f9a) (modulo . G4f99) (inexact->exact . G4f98) (force . G4f97) (exact->inexact . G4f96) (make-promise . G4f95) (string-fill! . G4f93) (string-set! . G4f92) (set-cdr! . G4f91) (set-car! . G4f90) (memv . G4f8a) (memq . G4f89) (member . G4f87) (assv . G4f7f) (assq . G4f7e) (assoc . G4f7c) (eval . G3019) (zero? . G4eb9) (vector? . G4eb8) (vector-set! . G4eb7) (vector-ref . G4eb6) (vector-length . G4eb4) (vector-fill! . G4eb2) (vector->list . G4eb1) (vector . G4eb0) (values . G4eaf) (truncate . G4eae) (tan . G4ead) (symbol? . G4eac) (symbol->string . G4eaa) (substring . G4ea9) (string? . G4ea8) (string>? . G4ea7) (string>=? . G4ea6) (string=? . G4ea5) (string<? . G4ea4) (string<=? . G4ea3) (string-ref . G4ea2) (string-length . G4ea1) (string-copy . G4e9f) (string-append . G4e9e) (string->symbol . G4e9d) (string->number . G4e9c) (string->list . G4e9b) (string . G4e9a) (sqrt . G4e99) (sin . G4e98) (round . G4e97) (reverse . G4e96) (real? . G4e95) (real-part . G4e93) (rationalize . G4e92) (rational? . G4e91) (procedure? . G4e8f) (positive? . G4e8e) (pair? . G4e8d) (odd? . G4e8c) (numerator . G4e8b) (number? . G4e8a) (number->string . G4e89) (not . G4e87) (negative? . G4e86) (min . G4e84) (max . G4e83) (map . G4e82) (make-vector . G4e81) (make-string . G4e80) (make-rectangular . G4e7f) (make-polar . G4e7e) (magnitude . G4e7d) (log . G4e7c) (list? . G4e7b) (list-tail . G4e7a) (list-ref . G4e79) (list->vector . G4e78) (list->string . G4e77) (list . G4e76) (length . G4e75) (lcm . G4e74) (integer? . G4e73) (integer->char . G4e71) (inexact? . G4e6f) (imag-part . G4e6d) (gcd . G4e6c) (for-each . G4e6b) (floor . G4e6a) (expt . G4e68) (exp . G4e67) (exact? . G4e66) (even? . G4e63) (eqv? . G4e61) (equal? . G4e60) (eq? . G4e5f) (dynamic-wind . G4e5e) (denominator . G4e57) (cos . G4e56) (cons . G4e55) (complex? . G4e54) (char? . G4e53) (char>? . G4e52) (char>=? . G4e51) (char=? . G4e50) (char<? . G4e4f) (char<=? . G4e4e) (char->integer . G4e4d) (ceiling . G4e4c) (call-with-values . G4e4b) (call-with-current-continuation . G4e49) (cddddr . G4e48) (cdddar . G4e47) (cddadr . G4e46) (cddaar . G4e45) (cdaddr . G4e44) (cdadar . G4e43) (cdaadr . G4e42) (cdaaar . G4e41) (cadddr . G4e40) (caddar . G4e3f) (cadadr . G4e3e) (cadaar . G4e3d) (caaddr . G4e3c) (caadar . G4e3b) (caaadr . G4e3a) (caaaar . G4e39) (cdddr . G4e38) (cddar . G4e37) (cdadr . G4e36) (cdaar . G4e35) (caddr . G4e34) (cadar . G4e33) (caadr . G4e32) (caaar . G4e31) (cddr . G4e30) (cdar . G4e2f) (cadr . G4e2e) (caar . G4e2d) (cdr . G4e2c) (car . G4e2b) (boolean? . G4e2a) (atan . G4e28) (asin . G4e26) (apply . G4e25) (append . G4e24) (angle . G4e23) (acos . G4e22) (abs . G4e21) (/ . G4e20) (* . G4e1f) (- . G4e1e) (+ . G4e1d) (>= . G4e1c) (> . G4e1b) (= . G4e1a) (<= . G4e19) (< . G4e18) (unquote-splicing . G4de4) (unquote . G4de3) (else . G4de1) (=> . G4de0) (... . G4ddf) (delay . G4ddc) (do . G4dda) (cond . G4dd9) (let* . G4dd8) (let . G4dd7) (quasiquote . G4dd1) (syntax-rules . G4dd0) (case . G4dcb) (or . G4dc7) (and . G4dc6) (if . G4dc5) (letrec . G4dc3) (lambda . G4dc0) (quote . G4dbd) (letrec-syntax . G4dbb) (let-syntax . G4dba) (set! . G4db9) (begin . G4db7) (define-syntax . G4db5) (define . G4db4)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5085 '(psyntax modules) '() '() '() '() '((module . G4db6)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5086 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5087 '(rnrs) '(6) '() '() '() '((regexp? . G507a) (string-upcase . G5032) (string-titlecase . G5031) (string-normalize-nfkd . G5030) (string-normalize-nfkc . G502f) (string-normalize-nfd . G502e) (string-normalize-nfc . G502d) (string-foldcase . G502c) (string-downcase . G502b) (string-ci>? . G502a) (string-ci>=? . G5029) (string-ci=? . G5028) (string-ci<? . G5027) (string-ci<=? . G5026) (char-whitespace? . G5025) (char-upper-case? . G5024) (char-title-case? . G5023) (char-numeric? . G5022) (char-lower-case? . G5021) (char-general-category . G5020) (char-upcase . G501f) (char-titlecase . G501e) (char-foldcase . G501d) (char-downcase . G501c) (char-ci>? . G501b) (char-ci>=? . G501a) (char-ci=? . G5019) (char-ci<? . G5018) (char-ci<=? . G5017) (char-alphabetic? . G5016) (make-variable-transformer . G2d89) (identifier? . G303b) (generate-temporaries . G3027) (free-identifier=? . G3029) (syntax->datum . G303f) (datum->syntax . G303d) (bound-identifier=? . G302b) (record-type-descriptor? . G5015) (record-predicate . G5014) (record-mutator . G5013) (record-constructor . G5012) (record-accessor . G5011) (make-record-type-descriptor . G5010) (make-record-constructor-descriptor . G500f) (record? . G500e) (record-type-uid . G500d) (record-type-sealed? . G500c) (record-type-parent . G500b) (record-type-opaque? . G500a) (record-type-name . G5009) (record-type-generative? . G5008) (record-type-field-names . G5007) (record-rtd . G5006) (record-field-mutable? . G5005) (delete-file . G5004) (file-exists? . G5003) (vector-sort! . G5002) (vector-sort . G5001) (list-sort . G5000) (symbol-hash . G4fff) (string-ci-hash . G4ffe) (string-hash . G4ffd) (equal-hash . G4ffc) (hashtable-equivalence-function . G4ffb) (make-hashtable . G4ffa) (hashtable-hash-function . G4ff9) (make-eqv-hashtable . G4ff8) (make-eq-hashtable . G4ff7) (hashtable? . G4ff6) (hashtable-update! . G4ff5) (hashtable-size . G4ff4) (hashtable-set! . G4ff3) (hashtable-ref . G4ff2) (hashtable-mutable? . G4ff1) (hashtable-keys . G4ff0) (hashtable-entries . G4fef) (hashtable-delete! . G4fee) (hashtable-copy . G4fed) (hashtable-contains? . G4fec) (hashtable-clear! . G4feb) (call-with-output-file . G4fea) (call-with-input-file . G4fe9) (write-char . G4fe8) (write . G4fe7) (with-output-to-file . G4fe6) (with-input-from-file . G4fe5) (read-char . G4fe4) (read . G4fe3) (peek-char . G4fe2) (open-output-file . G4fe1) (open-input-file . G4fe0) (newline . G4fdf) (display . G4fde) (close-output-port . G4fdd) (close-input-port . G4fdc) (eof-object? . G4fdb) (eof-object . G4fda) (current-error-port . G4fd9) (current-output-port . G4fd8) (current-input-port . G4fd7) (output-port? . G4fd6) (input-port? . G4fd5) (utf-8-codec . G4fd4) (utf-16-codec . G4fd3) (transcoder-error-handling-mode . G4fd2) (transcoder-eol-style . G4fd1) (transcoder-codec . G4fd0) (transcoded-port . G4fcf) (textual-port? . G4fce) (string->bytevector . G4fcd) (standard-output-port . G4fcc) (standard-input-port . G4fcb) (standard-error-port . G4fca) (set-port-position! . G4fc9) (put-u8 . G4fc8) (put-string . G4fc7) (put-datum . G4fc6) (put-char . G4fc5) (put-bytevector . G4fc4) (port? . G4fc3) (port-transcoder . G4fc2) (port-position . G4fc1) (port-has-set-port-position!? . G4fc0) (port-has-port-position? . G4fbf) (port-eof? . G4fbe) (output-port-buffer-mode . G4fbd) (open-string-output-port . G4fbc) (open-string-input-port . G4fbb) (open-file-output-port . G4fba) (open-file-input/output-port . G4fb9) (open-file-input-port . G4fb8) (open-bytevector-output-port . G4fb7) (open-bytevector-input-port . G4fb6) (native-transcoder . G4fb5) (native-eol-style . G4fb4) (make-transcoder . G4fb3) (latin-1-codec . G4fb2) (make-i/o-write-error . G4afa) (make-i/o-read-error . G4ae5) (make-i/o-port-error . G4b98) (make-i/o-invalid-position-error . G4b10) (make-i/o-filename-error . G4b2a) (make-i/o-file-protection-error . G4b43) (make-i/o-file-is-read-only-error . G4b58) (make-i/o-file-does-not-exist-error . G4b82) (make-i/o-file-already-exists-error . G4b6d) (make-i/o-error . G4ad0) (make-i/o-encoding-error . G4bc7) (make-i/o-decoding-error . G4bb1) (make-custom-textual-output-port . G4fb1) (make-custom-textual-input/output-port . G4fb0) (make-custom-textual-input-port . G4faf) (make-custom-binary-output-port . G4fae) (make-custom-binary-input/output-port . G4fad) (make-custom-binary-input-port . G4fac) (make-bytevector . G4fab) (lookahead-u8 . G4faa) (lookahead-char . G4fa9) (i/o-write-error? . G4afc) (i/o-read-error? . G4ae7) (i/o-port-error? . G4b9c) (i/o-invalid-position-error? . G4b14) (i/o-filename-error? . G4b2e) (i/o-file-protection-error? . G4b45) (i/o-file-is-read-only-error? . G4b5a) (i/o-file-does-not-exist-error? . G4b84) (i/o-file-already-exists-error? . G4b6f) (i/o-error? . G4ad2) (i/o-error-position . G4b16) (i/o-error-port . G4b9e) (i/o-error-filename . G4b30) (i/o-encoding-error? . G4bcb) (i/o-encoding-error-char . G4bcd) (i/o-decoding-error? . G4bb3) (get-u8 . G4fa8) (get-string-n! . G4fa7) (get-string-n . G4fa6) (get-string-all . G4fa5) (get-line . G4fa4) (get-datum . G4fa3) (get-char . G4fa2) (get-bytevector-some . G4fa1) (get-bytevector-n! . G4fa0) (get-bytevector-n . G4f9f) (get-bytevector-all . G4f9e) (flush-output-port . G4f9d) (close-port . G4f9c) (exit . G4f94) (command-line . G4cf8) (remove . G4f8f) (remv . G4f8e) (remp . G4f8d) (remq . G4f8c) (partition . G4f8b) (memv . G4f8a) (memq . G4f89) (memp . G4f88) (member . G4f87) (exists . G4f86) (for-all . G4f85) (fold-right . G4f84) (fold-left . G4f83) (find . G4f82) (filter . G4f81) (cons* . G4f80) (assv . G4f7f) (assq . G4f7e) (assp . G4f7d) (assoc . G4f7c) (call-with-string-output-port . G4f7b) (call-with-port . G4f7a) (call-with-bytevector-output-port . G4f79) (bytevector->string . G4f78) (buffer-mode? . G4f77) (binary-port? . G4f76) (with-exception-handler . G4f75) (raise-continuable . G4f74) (raise . G4f73) (make-enumeration . G4f72) (enum-set=? . G4f71) (enum-set-universe . G4f70) (enum-set-union . G4f6f) (enum-set-subset? . G4f6e) (enum-set-projection . G4f6d) (enum-set-member? . G4f6c) (enum-set-intersection . G4f6b) (enum-set-indexer . G4f6a) (enum-set-difference . G4f69) (enum-set-constructor . G4f68) (enum-set-complement . G4f67) (enum-set->list . G4f66) (who-condition? . G4a48) (warning? . G49c2) (violation? . G4a01) (undefined-violation? . G4abd) (syntax-violation? . G4aa4) (syntax-violation-subform . G4aa8) (syntax-violation-form . G4aa6) (syntax-violation . G3039) (simple-conditions . G4f65) (serious-condition? . G49d7) (non-continuable-violation? . G4a5f) (message-condition? . G49ab) (make-who-condition . G4a44) (make-warning . G49c0) (make-violation . G49ff) (make-undefined-violation . G4abb) (make-syntax-violation . G4a9e) (make-serious-condition . G49d5) (make-non-continuable-violation . G4a5d) (make-message-condition . G49a7) (make-lexical-violation . G4a87) (make-irritants-condition . G4a2a) (make-implementation-restriction-violation . G4a72) (make-error . G49ea) (make-assertion-violation . G4a14) (lexical-violation? . G4a89) (irritants-condition? . G4a2e) (implementation-restriction-violation? . G4a74) (error? . G49ec) (condition-who . G4a4a) (condition-predicate . G4f64) (condition-message . G49ad) (condition-irritants . G4a30) (condition-accessor . G4f63) (condition . G4f62) (assertion-violation? . G4a16) (condition? . G4f61) (utf32->string . G4f60) (utf16->string . G4f5f) (utf8->string . G4f5e) (uint-list->bytevector . G4f5d) (u8-list->bytevector . G4f5c) (string->utf8 . G4f5b) (string->utf32 . G4f5a) (string->utf16 . G4f59) (sint-list->bytevector . G4f58) (native-endianness . G4f57) (bytevector? . G4f56) (bytevector=? . G4f55) (bytevector-uint-set! . G4f54) (bytevector-uint-ref . G4f53) (bytevector-u8-set! . G4f52) (bytevector-u8-ref . G4f51) (bytevector-u64-set! . G4f50) (bytevector-u64-ref . G4f4f) (bytevector-u64-native-set! . G4f4e) (bytevector-u64-native-ref . G4f4d) (bytevector-u32-set! . G4f4c) (bytevector-u32-ref . G4f4b) (bytevector-u32-native-set! . G4f4a) (bytevector-u32-native-ref . G4f49) (bytevector-u16-set! . G4f48) (bytevector-u16-ref . G4f47) (bytevector-u16-native-set! . G4f46) (bytevector-u16-native-ref . G4f45) (bytevector-sint-set! . G4f44) (bytevector-sint-ref . G4f43) (bytevector-s8-set! . G4f42) (bytevector-s8-ref . G4f41) (bytevector-s64-set! . G4f40) (bytevector-s64-ref . G4f3f) (bytevector-s64-native-set! . G4f3e) (bytevector-s64-native-ref . G4f3d) (bytevector-s32-set! . G4f3c) (bytevector-s32-ref . G4f3b) (bytevector-s32-native-set! . G4f3a) (bytevector-s32-native-ref . G4f39) (bytevector-s16-set! . G4f38) (bytevector-s16-ref . G4f37) (bytevector-s16-native-set! . G4f36) (bytevector-s16-native-ref . G4f35) (bytevector-length . G4f34) (bytevector-ieee-single-ref . G4f33) (bytevector-ieee-single-set! . G4f32) (bytevector-ieee-single-native-set! . G4f31) (bytevector-ieee-single-native-ref . G4f30) (bytevector-ieee-double-set! . G4f2f) (bytevector-ieee-double-ref . G4f2e) (bytevector-ieee-double-native-set! . G4f2d) (bytevector-ieee-double-native-ref . G4f2c) (bytevector-fill! . G4f2b) (bytevector-copy! . G4f2a) (bytevector-copy . G4f29) (bytevector->uint-list . G4f28) (bytevector->u8-list . G4f27) (bytevector->sint-list . G4f26) (no-nans-violation? . G4bf7) (no-infinities-violation? . G4be2) (make-no-nans-violation . G4bf5) (make-no-infinities-violation . G4be0) (real->flonum . G4f25) (flzero? . G4f24) (fltruncate . G4f23) (fltan . G4f22) (flsqrt . G4f21) (flsin . G4f20) (flround . G4f1f) (flpositive? . G4f1e) (flonum? . G4f1d) (flodd? . G4f1c) (flnumerator . G4f1b) (flnegative? . G4f1a) (flnan? . G4f19) (flmod0 . G4f18) (flmod . G4f17) (flmin . G4f16) (flmax . G4f15) (fllog . G4f14) (flinteger? . G4f13) (flinfinite? . G4f12) (flfloor . G4f11) (flfinite? . G4f10) (flexpt . G4f0f) (flexp . G4f0e) (fleven? . G4f0d) (fldiv0-and-mod0 . G4f0c) (fldiv0 . G4f0b) (fldiv-and-mod . G4f0a) (fldiv . G4f09) (fldenominator . G4f08) (flcos . G4f07) (flceiling . G4f06) (flatan . G4f05) (flasin . G4f04) (flacos . G4f03) (flabs . G4f02) (fl>? . G4f01) (fl>=? . G4f00) (fl=? . G4eff) (fl<? . G4efe) (fl<=? . G4efd) (fl/ . G4efc) (fl- . G4efb) (fl+ . G4efa) (fl* . G4ef9) (fixnum->flonum . G4ef8) (fxzero? . G4ef7) (fxxor . G4ef6) (fxrotate-bit-field . G4ef5) (fxreverse-bit-field . G4ef4) (fxpositive? . G4ef3) (fxodd? . G4ef2) (fxnot . G4ef1) (fxnegative? . G4ef0) (fxmod0 . G4eef) (fxmod . G4eee) (fxmin . G4eed) (fxmax . G4eec) (fxlength . G4eeb) (fxior . G4eea) (fxif . G4ee9) (fxfirst-bit-set . G4ee8) (fxeven? . G4ee7) (fxdiv0-and-mod0 . G4ee6) (fxdiv0 . G4ee5) (fxdiv-and-mod . G4ee4) (fxdiv . G4ee3) (fxcopy-bit-field . G4ee2) (fxcopy-bit . G4ee1) (fxbit-set? . G4ee0) (fxbit-field . G4edf) (fxbit-count . G4ede) (fxarithmetic-shift-right . G4edd) (fxarithmetic-shift-left . G4edc) (fxarithmetic-shift . G4edb) (fxand . G4eda) (fx>? . G4ed9) (fx>=? . G4ed8) (fx=? . G4ed7) (fx<? . G4ed6) (fx<=? . G4ed5) (fx-/carry . G4ed4) (fx- . G4ed3) (fx+/carry . G4ed2) (fx+ . G4ed1) (fx*/carry . G4ed0) (fx* . G4ecf) (greatest-fixnum . G4ece) (least-fixnum . G4ecd) (fixnum-width . G4ecc) (fixnum? . G4ecb) (bitwise-rotate-bit-field . G4eca) (bitwise-reverse-bit-field . G4ec9) (bitwise-length . G4ec8) (bitwise-if . G4ec7) (bitwise-first-bit-set . G4ec6) (bitwise-copy-bit-field . G4ec5) (bitwise-copy-bit . G4ec4) (bitwise-bit-set? . G4ec3) (bitwise-bit-field . G4ec2) (bitwise-bit-count . G4ec1) (bitwise-xor . G4ec0) (bitwise-ior . G4ebf) (bitwise-and . G4ebe) (bitwise-not . G4ebd) (bitwise-arithmetic-shift-right . G4ebc) (bitwise-arithmetic-shift-left . G4ebb) (bitwise-arithmetic-shift . G4eba) (zero? . G4eb9) (vector? . G4eb8) (vector-set! . G4eb7) (vector-ref . G4eb6) (vector-map . G4eb5) (vector-length . G4eb4) (vector-for-each . G4eb3) (vector-fill! . G4eb2) (vector->list . G4eb1) (vector . G4eb0) (values . G4eaf) (truncate . G4eae) (tan . G4ead) (symbol? . G4eac) (symbol=? . G4eab) (symbol->string . G4eaa) (substring . G4ea9) (string? . G4ea8) (string>? . G4ea7) (string>=? . G4ea6) (string=? . G4ea5) (string<? . G4ea4) (string<=? . G4ea3) (string-ref . G4ea2) (string-length . G4ea1) (string-for-each . G4ea0) (string-copy . G4e9f) (string-append . G4e9e) (string->symbol . G4e9d) (string->number . G4e9c) (string->list . G4e9b) (string . G4e9a) (sqrt . G4e99) (sin . G4e98) (round . G4e97) (reverse . G4e96) (real? . G4e95) (real-valued? . G4e94) (real-part . G4e93) (rationalize . G4e92) (rational? . G4e91) (rational-valued? . G4e90) (procedure? . G4e8f) (positive? . G4e8e) (pair? . G4e8d) (odd? . G4e8c) (numerator . G4e8b) (number? . G4e8a) (number->string . G4e89) (null? . G4e88) (not . G4e87) (negative? . G4e86) (nan? . G4e85) (min . G4e84) (max . G4e83) (map . G4e82) (make-vector . G4e81) (make-string . G4e80) (make-rectangular . G4e7f) (make-polar . G4e7e) (magnitude . G4e7d) (log . G4e7c) (list? . G4e7b) (list-tail . G4e7a) (list-ref . G4e79) (list->vector . G4e78) (list->string . G4e77) (list . G4e76) (length . G4e75) (lcm . G4e74) (integer? . G4e73) (integer-valued? . G4e72) (integer->char . G4e71) (infinite? . G4e70) (inexact? . G4e6f) (inexact . G4e6e) (imag-part . G4e6d) (gcd . G4e6c) (for-each . G4e6b) (floor . G4e6a) (finite? . G4e69) (expt . G4e68) (exp . G4e67) (exact? . G4e66) (exact-integer-sqrt . G4e65) (exact . G4e64) (even? . G4e63) (error . G4e62) (eqv? . G4e61) (equal? . G4e60) (eq? . G4e5f) (dynamic-wind . G4e5e) (div0-and-mod0 . G4e5d) (mod0 . G4e5c) (div0 . G4e5b) (div-and-mod . G4e5a) (mod . G4e59) (div . G4e58) (denominator . G4e57) (cos . G4e56) (cons . G4e55) (complex? . G4e54) (char? . G4e53) (char>? . G4e52) (char>=? . G4e51) (char=? . G4e50) (char<? . G4e4f) (char<=? . G4e4e) (char->integer . G4e4d) (ceiling . G4e4c) (call-with-values . G4e4b) (call/cc . G4e4a) (call-with-current-continuation . G4e49) (cddddr . G4e48) (cdddar . G4e47) (cddadr . G4e46) (cddaar . G4e45) (cdaddr . G4e44) (cdadar . G4e43) (cdaadr . G4e42) (cdaaar . G4e41) (cadddr . G4e40) (caddar . G4e3f) (cadadr . G4e3e) (cadaar . G4e3d) (caaddr . G4e3c) (caadar . G4e3b) (caaadr . G4e3a) (caaaar . G4e39) (cdddr . G4e38) (cddar . G4e37) (cdadr . G4e36) (cdaar . G4e35) (caddr . G4e34) (cadar . G4e33) (caadr . G4e32) (caaar . G4e31) (cddr . G4e30) (cdar . G4e2f) (cadr . G4e2e) (caar . G4e2d) (cdr . G4e2c) (car . G4e2b) (boolean? . G4e2a) (boolean=? . G4e29) (atan . G4e28) (assertion-violation . G4e27) (asin . G4e26) (apply . G4e25) (append . G4e24) (angle . G4e23) (acos . G4e22) (abs . G4e21) (/ . G4e20) (* . G4e1f) (- . G4e1e) (+ . G4e1d) (>= . G4e1c) (> . G4e1b) (= . G4e1a) (<= . G4e19) (< . G4e18) (&no-nans . G4e15) (&no-infinities . G4e14) (&i/o-encoding . G4e13) (&i/o-decoding . G4e12) (&i/o-port . G4e11) (&i/o-file-does-not-exist . G4e10) (&i/o-file-already-exists . G4e0f) (&i/o-file-is-read-only . G4e0e) (&i/o-file-protection . G4e0d) (&i/o-filename . G4e0c) (&i/o-invalid-position . G4e0b) (&i/o-write . G4e0a) (&i/o-read . G4e09) (&i/o . G4e08) (&undefined . G4e07) (&syntax . G4e06) (&lexical . G4e05) (&implementation-restriction . G4e04) (&non-continuable . G4e03) (&who . G4e02) (&irritants . G4e01) (&assertion . G4e00) (&violation . G4dff) (&error . G4dfe) (&serious . G4dfd) (&warning . G4dfc) (&message . G4dfb) (&condition . G4dfa) (define-condition-type . G4df9) (define-enumeration . G4df8) (define-record-type . G4df7) (parent-rtd . G4df6) (nongenerative . G4df5) (opaque . G4df4) (sealed . G4df3) (protocol . G4df2) (parent . G4df1) (immutable . G4df0) (mutable . G4def) (fields . G4dee) (error-handling-mode . G4ded) (file-options . G4dec) (buffer-mode . G4deb) (eol-style . G4dea) (guard . G4de9) (unsyntax-splicing . G4de6) (unsyntax . G4de5) (unquote-splicing . G4de4) (unquote . G4de3) (_ . G4de2) (else . G4de1) (=> . G4de0) (... . G4ddf) (assert . G4dde) (endianness . G4ddd) (do . G4dda) (cond . G4dd9) (let* . G4dd8) (let . G4dd7) (let*-values . G4dd6) (let-values . G4dd5) (identifier-syntax . G4dd4) (with-syntax . G4dd3) (quasisyntax . G4dd2) (quasiquote . G4dd1) (syntax-rules . G4dd0) (record-constructor-descriptor . G4dcd) (record-type-descriptor . G4dcc) (case . G4dcb) (unless . G4dc9) (when . G4dc8) (or . G4dc7) (and . G4dc6) (if . G4dc5) (letrec* . G4dc4) (letrec . G4dc3) (case-lambda . G4dc1) (lambda . G4dc0) (syntax . G4dbf) (syntax-case . G4dbe) (quote . G4dbd) (letrec-syntax . G4dbb) (let-syntax . G4dba) (set! . G4db9) (begin . G4db7) (define-syntax . G4db5) (define . G4db4)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5088 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3015) (quotient . G4f9b) (null-environment . G3013) (remainder . G4f9a) (modulo . G4f99) (inexact->exact . G4f98) (force . G4f97) (exact->inexact . G4f96) (make-promise . G4f95) (delay . G4ddc)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5089 '(rnrs control) '(6) '() '() '() '((do . G4dda) (unless . G4dc9) (when . G4dc8) (case-lambda . G4dc1)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G508a '(rnrs eval) '(6) '() '() '() '((eval . G3019) (environment . G3011)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G508b '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4f91) (set-car! . G4f90)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G508c '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4f93) (string-set! . G4f92)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G508d '(rnrs programs) '(6) '() '() '() '((exit . G4f94) (command-line . G4cf8)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G508e '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d89) (identifier? . G303b) (generate-temporaries . G3027) (free-identifier=? . G3029) (syntax->datum . G303f) (datum->syntax . G303d) (bound-identifier=? . G302b) (syntax-violation . G3039) (unsyntax-splicing . G4de6) (unsyntax . G4de5) (_ . G4de2) (... . G4ddf) (with-syntax . G4dd3) (quasisyntax . G4dd2) (syntax . G4dbf) (syntax-case . G4dbe)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G508f '(rnrs files) '(6) '() '() '() '((delete-file . G5004) (file-exists? . G5003) (make-i/o-write-error . G4afa) (make-i/o-read-error . G4ae5) (make-i/o-port-error . G4b98) (make-i/o-invalid-position-error . G4b10) (make-i/o-filename-error . G4b2a) (make-i/o-file-protection-error . G4b43) (make-i/o-file-is-read-only-error . G4b58) (make-i/o-file-does-not-exist-error . G4b82) (make-i/o-file-already-exists-error . G4b6d) (make-i/o-error . G4ad0) (i/o-write-error? . G4afc) (i/o-read-error? . G4ae7) (i/o-port-error? . G4b9c) (i/o-invalid-position-error? . G4b14) (i/o-filename-error? . G4b2e) (i/o-file-protection-error? . G4b45) (i/o-file-is-read-only-error? . G4b5a) (i/o-file-does-not-exist-error? . G4b84) (i/o-file-already-exists-error? . G4b6f) (i/o-error? . G4ad2) (i/o-error-position . G4b16) (i/o-error-port . G4b9e) (i/o-error-filename . G4b30) (&i/o-port . G4e11) (&i/o-file-does-not-exist . G4e10) (&i/o-file-already-exists . G4e0f) (&i/o-file-is-read-only . G4e0e) (&i/o-file-protection . G4e0d) (&i/o-filename . G4e0c) (&i/o-invalid-position . G4e0b) (&i/o-write . G4e0a) (&i/o-read . G4e09) (&i/o . G4e08)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5090 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5002) (vector-sort . G5001) (list-sort . G5000)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5091 '(rnrs base) '(6) '() '() '() '((zero? . G4eb9) (vector? . G4eb8) (vector-set! . G4eb7) (vector-ref . G4eb6) (vector-map . G4eb5) (vector-length . G4eb4) (vector-for-each . G4eb3) (vector-fill! . G4eb2) (vector->list . G4eb1) (vector . G4eb0) (values . G4eaf) (truncate . G4eae) (tan . G4ead) (symbol? . G4eac) (symbol=? . G4eab) (symbol->string . G4eaa) (substring . G4ea9) (string? . G4ea8) (string>? . G4ea7) (string>=? . G4ea6) (string=? . G4ea5) (string<? . G4ea4) (string<=? . G4ea3) (string-ref . G4ea2) (string-length . G4ea1) (string-for-each . G4ea0) (string-copy . G4e9f) (string-append . G4e9e) (string->symbol . G4e9d) (string->number . G4e9c) (string->list . G4e9b) (string . G4e9a) (sqrt . G4e99) (sin . G4e98) (round . G4e97) (reverse . G4e96) (real? . G4e95) (real-valued? . G4e94) (real-part . G4e93) (rationalize . G4e92) (rational? . G4e91) (rational-valued? . G4e90) (procedure? . G4e8f) (positive? . G4e8e) (pair? . G4e8d) (odd? . G4e8c) (numerator . G4e8b) (number? . G4e8a) (number->string . G4e89) (null? . G4e88) (not . G4e87) (negative? . G4e86) (nan? . G4e85) (min . G4e84) (max . G4e83) (map . G4e82) (make-vector . G4e81) (make-string . G4e80) (make-rectangular . G4e7f) (make-polar . G4e7e) (magnitude . G4e7d) (log . G4e7c) (list? . G4e7b) (list-tail . G4e7a) (list-ref . G4e79) (list->vector . G4e78) (list->string . G4e77) (list . G4e76) (length . G4e75) (lcm . G4e74) (integer? . G4e73) (integer-valued? . G4e72) (integer->char . G4e71) (infinite? . G4e70) (inexact? . G4e6f) (inexact . G4e6e) (imag-part . G4e6d) (gcd . G4e6c) (for-each . G4e6b) (floor . G4e6a) (finite? . G4e69) (expt . G4e68) (exp . G4e67) (exact? . G4e66) (exact-integer-sqrt . G4e65) (exact . G4e64) (even? . G4e63) (error . G4e62) (eqv? . G4e61) (equal? . G4e60) (eq? . G4e5f) (dynamic-wind . G4e5e) (div0-and-mod0 . G4e5d) (mod0 . G4e5c) (div0 . G4e5b) (div-and-mod . G4e5a) (mod . G4e59) (div . G4e58) (denominator . G4e57) (cos . G4e56) (cons . G4e55) (complex? . G4e54) (char? . G4e53) (char>? . G4e52) (char>=? . G4e51) (char=? . G4e50) (char<? . G4e4f) (char<=? . G4e4e) (char->integer . G4e4d) (ceiling . G4e4c) (call-with-values . G4e4b) (call/cc . G4e4a) (call-with-current-continuation . G4e49) (cddddr . G4e48) (cdddar . G4e47) (cddadr . G4e46) (cddaar . G4e45) (cdaddr . G4e44) (cdadar . G4e43) (cdaadr . G4e42) (cdaaar . G4e41) (cadddr . G4e40) (caddar . G4e3f) (cadadr . G4e3e) (cadaar . G4e3d) (caaddr . G4e3c) (caadar . G4e3b) (caaadr . G4e3a) (caaaar . G4e39) (cdddr . G4e38) (cddar . G4e37) (cdadr . G4e36) (cdaar . G4e35) (caddr . G4e34) (cadar . G4e33) (caadr . G4e32) (caaar . G4e31) (cddr . G4e30) (cdar . G4e2f) (cadr . G4e2e) (caar . G4e2d) (cdr . G4e2c) (car . G4e2b) (boolean? . G4e2a) (boolean=? . G4e29) (atan . G4e28) (assertion-violation . G4e27) (asin . G4e26) (apply . G4e25) (append . G4e24) (angle . G4e23) (acos . G4e22) (abs . G4e21) (/ . G4e20) (* . G4e1f) (- . G4e1e) (+ . G4e1d) (>= . G4e1c) (> . G4e1b) (= . G4e1a) (<= . G4e19) (< . G4e18) (unquote-splicing . G4de4) (unquote . G4de3) (_ . G4de2) (else . G4de1) (=> . G4de0) (... . G4ddf) (assert . G4dde) (cond . G4dd9) (let* . G4dd8) (let . G4dd7) (let*-values . G4dd6) (let-values . G4dd5) (identifier-syntax . G4dd4) (quasiquote . G4dd1) (syntax-rules . G4dd0) (case . G4dcb) (or . G4dc7) (and . G4dc6) (if . G4dc5) (letrec* . G4dc4) (letrec . G4dc3) (lambda . G4dc0) (quote . G4dbd) (letrec-syntax . G4dbb) (let-syntax . G4dba) (set! . G4db9) (begin . G4db7) (define-syntax . G4db5) (define . G4db4)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5092 '(rnrs lists) '(6) '() '() '() '((remove . G4f8f) (remv . G4f8e) (remp . G4f8d) (remq . G4f8c) (partition . G4f8b) (memv . G4f8a) (memq . G4f89) (memp . G4f88) (member . G4f87) (exists . G4f86) (for-all . G4f85) (fold-right . G4f84) (fold-left . G4f83) (find . G4f82) (filter . G4f81) (cons* . G4f80) (assv . G4f7f) (assq . G4f7e) (assp . G4f7d) (assoc . G4f7c)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5093 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4fea) (call-with-input-file . G4fe9) (write-char . G4fe8) (write . G4fe7) (with-output-to-file . G4fe6) (with-input-from-file . G4fe5) (read-char . G4fe4) (read . G4fe3) (peek-char . G4fe2) (open-output-file . G4fe1) (open-input-file . G4fe0) (newline . G4fdf) (display . G4fde) (close-output-port . G4fdd) (close-input-port . G4fdc) (eof-object? . G4fdb) (eof-object . G4fda) (current-error-port . G4fd9) (current-output-port . G4fd8) (current-input-port . G4fd7) (output-port? . G4fd6) (input-port? . G4fd5) (make-i/o-write-error . G4afa) (make-i/o-read-error . G4ae5) (make-i/o-port-error . G4b98) (make-i/o-invalid-position-error . G4b10) (make-i/o-filename-error . G4b2a) (make-i/o-file-protection-error . G4b43) (make-i/o-file-is-read-only-error . G4b58) (make-i/o-file-does-not-exist-error . G4b82) (make-i/o-file-already-exists-error . G4b6d) (make-i/o-error . G4ad0) (i/o-write-error? . G4afc) (i/o-read-error? . G4ae7) (i/o-port-error? . G4b9c) (i/o-invalid-position-error? . G4b14) (i/o-filename-error? . G4b2e) (i/o-file-protection-error? . G4b45) (i/o-file-is-read-only-error? . G4b5a) (i/o-file-does-not-exist-error? . G4b84) (i/o-file-already-exists-error? . G4b6f) (i/o-error? . G4ad2) (i/o-error-position . G4b16) (i/o-error-port . G4b9e) (i/o-error-filename . G4b30) (&i/o-port . G4e11) (&i/o-file-does-not-exist . G4e10) (&i/o-file-already-exists . G4e0f) (&i/o-file-is-read-only . G4e0e) (&i/o-file-protection . G4e0d) (&i/o-filename . G4e0c) (&i/o-invalid-position . G4e0b) (&i/o-write . G4e0a) (&i/o-read . G4e09) (&i/o . G4e08)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5094 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fab) (utf32->string . G4f60) (utf16->string . G4f5f) (utf8->string . G4f5e) (uint-list->bytevector . G4f5d) (u8-list->bytevector . G4f5c) (string->utf8 . G4f5b) (string->utf32 . G4f5a) (string->utf16 . G4f59) (sint-list->bytevector . G4f58) (native-endianness . G4f57) (bytevector? . G4f56) (bytevector=? . G4f55) (bytevector-uint-set! . G4f54) (bytevector-uint-ref . G4f53) (bytevector-u8-set! . G4f52) (bytevector-u8-ref . G4f51) (bytevector-u64-set! . G4f50) (bytevector-u64-ref . G4f4f) (bytevector-u64-native-set! . G4f4e) (bytevector-u64-native-ref . G4f4d) (bytevector-u32-set! . G4f4c) (bytevector-u32-ref . G4f4b) (bytevector-u32-native-set! . G4f4a) (bytevector-u32-native-ref . G4f49) (bytevector-u16-set! . G4f48) (bytevector-u16-ref . G4f47) (bytevector-u16-native-set! . G4f46) (bytevector-u16-native-ref . G4f45) (bytevector-sint-set! . G4f44) (bytevector-sint-ref . G4f43) (bytevector-s8-set! . G4f42) (bytevector-s8-ref . G4f41) (bytevector-s64-set! . G4f40) (bytevector-s64-ref . G4f3f) (bytevector-s64-native-set! . G4f3e) (bytevector-s64-native-ref . G4f3d) (bytevector-s32-set! . G4f3c) (bytevector-s32-ref . G4f3b) (bytevector-s32-native-set! . G4f3a) (bytevector-s32-native-ref . G4f39) (bytevector-s16-set! . G4f38) (bytevector-s16-ref . G4f37) (bytevector-s16-native-set! . G4f36) (bytevector-s16-native-ref . G4f35) (bytevector-length . G4f34) (bytevector-ieee-single-ref . G4f33) (bytevector-ieee-single-set! . G4f32) (bytevector-ieee-single-native-set! . G4f31) (bytevector-ieee-single-native-ref . G4f30) (bytevector-ieee-double-set! . G4f2f) (bytevector-ieee-double-ref . G4f2e) (bytevector-ieee-double-native-set! . G4f2d) (bytevector-ieee-double-native-ref . G4f2c) (bytevector-fill! . G4f2b) (bytevector-copy! . G4f2a) (bytevector-copy . G4f29) (bytevector->uint-list . G4f28) (bytevector->u8-list . G4f27) (bytevector->sint-list . G4f26) (endianness . G4ddd)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5095 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5032) (string-titlecase . G5031) (string-normalize-nfkd . G5030) (string-normalize-nfkc . G502f) (string-normalize-nfd . G502e) (string-normalize-nfc . G502d) (string-foldcase . G502c) (string-downcase . G502b) (string-ci>? . G502a) (string-ci>=? . G5029) (string-ci=? . G5028) (string-ci<? . G5027) (string-ci<=? . G5026) (char-whitespace? . G5025) (char-upper-case? . G5024) (char-title-case? . G5023) (char-numeric? . G5022) (char-lower-case? . G5021) (char-general-category . G5020) (char-upcase . G501f) (char-titlecase . G501e) (char-foldcase . G501d) (char-downcase . G501c) (char-ci>? . G501b) (char-ci>=? . G501a) (char-ci=? . G5019) (char-ci<? . G5018) (char-ci<=? . G5017) (char-alphabetic? . G5016)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5096 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f75) (raise-continuable . G4f74) (raise . G4f73) (guard . G4de9) (else . G4de1) (=> . G4de0)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5097 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4eca) (bitwise-reverse-bit-field . G4ec9) (bitwise-length . G4ec8) (bitwise-if . G4ec7) (bitwise-first-bit-set . G4ec6) (bitwise-copy-bit-field . G4ec5) (bitwise-copy-bit . G4ec4) (bitwise-bit-set? . G4ec3) (bitwise-bit-field . G4ec2) (bitwise-bit-count . G4ec1) (bitwise-xor . G4ec0) (bitwise-ior . G4ebf) (bitwise-and . G4ebe) (bitwise-not . G4ebd) (bitwise-arithmetic-shift-right . G4ebc) (bitwise-arithmetic-shift-left . G4ebb) (bitwise-arithmetic-shift . G4eba)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5098 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4ef7) (fxxor . G4ef6) (fxrotate-bit-field . G4ef5) (fxreverse-bit-field . G4ef4) (fxpositive? . G4ef3) (fxodd? . G4ef2) (fxnot . G4ef1) (fxnegative? . G4ef0) (fxmod0 . G4eef) (fxmod . G4eee) (fxmin . G4eed) (fxmax . G4eec) (fxlength . G4eeb) (fxior . G4eea) (fxif . G4ee9) (fxfirst-bit-set . G4ee8) (fxeven? . G4ee7) (fxdiv0-and-mod0 . G4ee6) (fxdiv0 . G4ee5) (fxdiv-and-mod . G4ee4) (fxdiv . G4ee3) (fxcopy-bit-field . G4ee2) (fxcopy-bit . G4ee1) (fxbit-set? . G4ee0) (fxbit-field . G4edf) (fxbit-count . G4ede) (fxarithmetic-shift-right . G4edd) (fxarithmetic-shift-left . G4edc) (fxarithmetic-shift . G4edb) (fxand . G4eda) (fx>? . G4ed9) (fx>=? . G4ed8) (fx=? . G4ed7) (fx<? . G4ed6) (fx<=? . G4ed5) (fx-/carry . G4ed4) (fx- . G4ed3) (fx+/carry . G4ed2) (fx+ . G4ed1) (fx*/carry . G4ed0) (fx* . G4ecf) (greatest-fixnum . G4ece) (least-fixnum . G4ecd) (fixnum-width . G4ecc) (fixnum? . G4ecb)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G5099 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4bf7) (no-infinities-violation? . G4be2) (make-no-nans-violation . G4bf5) (make-no-infinities-violation . G4be0) (real->flonum . G4f25) (flzero? . G4f24) (fltruncate . G4f23) (fltan . G4f22) (flsqrt . G4f21) (flsin . G4f20) (flround . G4f1f) (flpositive? . G4f1e) (flonum? . G4f1d) (flodd? . G4f1c) (flnumerator . G4f1b) (flnegative? . G4f1a) (flnan? . G4f19) (flmod0 . G4f18) (flmod . G4f17) (flmin . G4f16) (flmax . G4f15) (fllog . G4f14) (flinteger? . G4f13) (flinfinite? . G4f12) (flfloor . G4f11) (flfinite? . G4f10) (flexpt . G4f0f) (flexp . G4f0e) (fleven? . G4f0d) (fldiv0-and-mod0 . G4f0c) (fldiv0 . G4f0b) (fldiv-and-mod . G4f0a) (fldiv . G4f09) (fldenominator . G4f08) (flcos . G4f07) (flceiling . G4f06) (flatan . G4f05) (flasin . G4f04) (flacos . G4f03) (flabs . G4f02) (fl>? . G4f01) (fl>=? . G4f00) (fl=? . G4eff) (fl<? . G4efe) (fl<=? . G4efd) (fl/ . G4efc) (fl- . G4efb) (fl+ . G4efa) (fl* . G4ef9) (fixnum->flonum . G4ef8) (&no-nans . G4e15) (&no-infinities . G4e14)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G509a '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4fff) (string-ci-hash . G4ffe) (string-hash . G4ffd) (equal-hash . G4ffc) (hashtable-equivalence-function . G4ffb) (make-hashtable . G4ffa) (hashtable-hash-function . G4ff9) (make-eqv-hashtable . G4ff8) (make-eq-hashtable . G4ff7) (hashtable? . G4ff6) (hashtable-update! . G4ff5) (hashtable-size . G4ff4) (hashtable-set! . G4ff3) (hashtable-ref . G4ff2) (hashtable-mutable? . G4ff1) (hashtable-keys . G4ff0) (hashtable-entries . G4fef) (hashtable-delete! . G4fee) (hashtable-copy . G4fed) (hashtable-contains? . G4fec) (hashtable-clear! . G4feb)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G509b '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4fdb) (eof-object . G4fda) (current-error-port . G4fd9) (current-output-port . G4fd8) (current-input-port . G4fd7) (output-port? . G4fd6) (input-port? . G4fd5) (utf-8-codec . G4fd4) (utf-16-codec . G4fd3) (transcoder-error-handling-mode . G4fd2) (transcoder-eol-style . G4fd1) (transcoder-codec . G4fd0) (transcoded-port . G4fcf) (textual-port? . G4fce) (string->bytevector . G4fcd) (standard-output-port . G4fcc) (standard-input-port . G4fcb) (standard-error-port . G4fca) (set-port-position! . G4fc9) (put-u8 . G4fc8) (put-string . G4fc7) (put-datum . G4fc6) (put-char . G4fc5) (put-bytevector . G4fc4) (port? . G4fc3) (port-transcoder . G4fc2) (port-position . G4fc1) (port-has-set-port-position!? . G4fc0) (port-has-port-position? . G4fbf) (port-eof? . G4fbe) (output-port-buffer-mode . G4fbd) (open-string-output-port . G4fbc) (open-string-input-port . G4fbb) (open-file-output-port . G4fba) (open-file-input/output-port . G4fb9) (open-file-input-port . G4fb8) (open-bytevector-output-port . G4fb7) (open-bytevector-input-port . G4fb6) (native-transcoder . G4fb5) (native-eol-style . G4fb4) (make-transcoder . G4fb3) (latin-1-codec . G4fb2) (make-i/o-write-error . G4afa) (make-i/o-read-error . G4ae5) (make-i/o-port-error . G4b98) (make-i/o-invalid-position-error . G4b10) (make-i/o-filename-error . G4b2a) (make-i/o-file-protection-error . G4b43) (make-i/o-file-is-read-only-error . G4b58) (make-i/o-file-does-not-exist-error . G4b82) (make-i/o-file-already-exists-error . G4b6d) (make-i/o-error . G4ad0) (make-i/o-encoding-error . G4bc7) (make-i/o-decoding-error . G4bb1) (make-custom-textual-output-port . G4fb1) (make-custom-textual-input/output-port . G4fb0) (make-custom-textual-input-port . G4faf) (make-custom-binary-output-port . G4fae) (make-custom-binary-input/output-port . G4fad) (make-custom-binary-input-port . G4fac) (lookahead-u8 . G4faa) (lookahead-char . G4fa9) (i/o-write-error? . G4afc) (i/o-read-error? . G4ae7) (i/o-port-error? . G4b9c) (i/o-invalid-position-error? . G4b14) (i/o-filename-error? . G4b2e) (i/o-file-protection-error? . G4b45) (i/o-file-is-read-only-error? . G4b5a) (i/o-file-does-not-exist-error? . G4b84) (i/o-file-already-exists-error? . G4b6f) (i/o-error? . G4ad2) (i/o-error-position . G4b16) (i/o-error-port . G4b9e) (i/o-error-filename . G4b30) (i/o-encoding-error? . G4bcb) (i/o-encoding-error-char . G4bcd) (i/o-decoding-error? . G4bb3) (get-u8 . G4fa8) (get-string-n! . G4fa7) (get-string-n . G4fa6) (get-string-all . G4fa5) (get-line . G4fa4) (get-datum . G4fa3) (get-char . G4fa2) (get-bytevector-some . G4fa1) (get-bytevector-n! . G4fa0) (get-bytevector-n . G4f9f) (get-bytevector-all . G4f9e) (flush-output-port . G4f9d) (close-port . G4f9c) (call-with-string-output-port . G4f7b) (call-with-port . G4f7a) (call-with-bytevector-output-port . G4f79) (bytevector->string . G4f78) (buffer-mode? . G4f77) (binary-port? . G4f76) (&i/o-encoding . G4e13) (&i/o-decoding . G4e12) (&i/o-port . G4e11) (&i/o-file-does-not-exist . G4e10) (&i/o-file-already-exists . G4e0f) (&i/o-file-is-read-only . G4e0e) (&i/o-file-protection . G4e0d) (&i/o-filename . G4e0c) (&i/o-invalid-position . G4e0b) (&i/o-write . G4e0a) (&i/o-read . G4e09) (&i/o . G4e08) (error-handling-mode . G4ded) (file-options . G4dec) (buffer-mode . G4deb) (eol-style . G4dea)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G509c '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f72) (enum-set=? . G4f71) (enum-set-universe . G4f70) (enum-set-union . G4f6f) (enum-set-subset? . G4f6e) (enum-set-projection . G4f6d) (enum-set-member? . G4f6c) (enum-set-intersection . G4f6b) (enum-set-indexer . G4f6a) (enum-set-difference . G4f69) (enum-set-constructor . G4f68) (enum-set-complement . G4f67) (enum-set->list . G4f66) (define-enumeration . G4df8)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G509d '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a48) (warning? . G49c2) (violation? . G4a01) (undefined-violation? . G4abd) (syntax-violation? . G4aa4) (syntax-violation-subform . G4aa8) (syntax-violation-form . G4aa6) (syntax-violation . G3039) (simple-conditions . G4f65) (serious-condition? . G49d7) (non-continuable-violation? . G4a5f) (message-condition? . G49ab) (make-who-condition . G4a44) (make-warning . G49c0) (make-violation . G49ff) (make-undefined-violation . G4abb) (make-syntax-violation . G4a9e) (make-serious-condition . G49d5) (make-non-continuable-violation . G4a5d) (make-message-condition . G49a7) (make-lexical-violation . G4a87) (make-irritants-condition . G4a2a) (make-implementation-restriction-violation . G4a72) (make-error . G49ea) (make-assertion-violation . G4a14) (lexical-violation? . G4a89) (irritants-condition? . G4a2e) (implementation-restriction-violation? . G4a74) (error? . G49ec) (condition-who . G4a4a) (condition-predicate . G4f64) (condition-message . G49ad) (condition-irritants . G4a30) (condition-accessor . G4f63) (condition . G4f62) (assertion-violation? . G4a16) (condition? . G4f61) (&undefined . G4e07) (&syntax . G4e06) (&lexical . G4e05) (&implementation-restriction . G4e04) (&non-continuable . G4e03) (&who . G4e02) (&irritants . G4e01) (&assertion . G4e00) (&violation . G4dff) (&error . G4dfe) (&serious . G4dfd) (&warning . G4dfc) (&message . G4dfb) (&condition . G4dfa) (define-condition-type . G4df9)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G509e '(rnrs records inspection) '(6) '() '() '() '((record? . G500e) (record-type-uid . G500d) (record-type-sealed? . G500c) (record-type-parent . G500b) (record-type-opaque? . G500a) (record-type-name . G5009) (record-type-generative? . G5008) (record-type-field-names . G5007) (record-rtd . G5006) (record-field-mutable? . G5005)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G509f '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5015) (record-predicate . G5014) (record-mutator . G5013) (record-constructor . G5012) (record-accessor . G5011) (make-record-type-descriptor . G5010) (make-record-constructor-descriptor . G500f)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G50a0 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4df7) (parent-rtd . G4df6) (nongenerative . G4df5) (opaque . G4df4) (sealed . G4df3) (protocol . G4df2) (parent . G4df1) (immutable . G4df0) (mutable . G4def) (fields . G4dee) (record-constructor-descriptor . G4dcd) (record-type-descriptor . G4dcc)) '() values values '#f '#f '#t '#f) (G2b65@G2a0a@install-library 'G50a1 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4bfb) (&no-nans-rtd . G4bf9) (&no-infinities-rcd . G4be6) (&no-infinities-rtd . G4be4) (&i/o-encoding-rcd . G4bd1) (&i/o-encoding-rtd . G4bcf) (&i/o-decoding-rcd . G4bb7) (&i/o-decoding-rtd . G4bb5) (&i/o-port-rcd . G4ba2) (&i/o-port-rtd . G4ba0) (&i/o-file-does-not-exist-rcd . G4b88) (&i/o-file-does-not-exist-rtd . G4b86) (&i/o-file-already-exists-rcd . G4b73) (&i/o-file-already-exists-rtd . G4b71) (&i/o-file-is-read-only-rcd . G4b5e) (&i/o-file-is-read-only-rtd . G4b5c) (&i/o-file-protection-rcd . G4b49) (&i/o-file-protection-rtd . G4b47) (&i/o-filename-rcd . G4b34) (&i/o-filename-rtd . G4b32) (&i/o-invalid-position-rcd . G4b1a) (&i/o-invalid-position-rtd . G4b18) (&i/o-write-rcd . G4b00) (&i/o-write-rtd . G4afe) (&i/o-read-rcd . G4aeb) (&i/o-read-rtd . G4ae9) (&i/o-rcd . G4ad6) (&i/o-rtd . G4ad4) (&undefined-rcd . G4ac1) (&undefined-rtd . G4abf) (&syntax-rcd . G4aac) (&syntax-rtd . G4aaa) (&lexical-rcd . G4a8d) (&lexical-rtd . G4a8b) (&implementation-restriction-rcd . G4a78) (&implementation-restriction-rtd . G4a76) (&non-continuable-rcd . G4a63) (&non-continuable-rtd . G4a61) (&who-rcd . G4a4e) (&who-rtd . G4a4c) (&irritants-rcd . G4a34) (&irritants-rtd . G4a32) (&assertion-rcd . G4a1a) (&assertion-rtd . G4a18) (&violation-rcd . G4a05) (&violation-rtd . G4a03) (&error-rcd . G49f0) (&error-rtd . G49ee) (&serious-rcd . G49db) (&serious-rtd . G49d9) (&warning-rcd . G49c6) (&warning-rtd . G49c4) (&message-rcd . G49b1) (&message-rtd . G49af) (&condition-rcd . G4954) (&condition-rtd . G4952) (syntax-error . G3035) (syntax-dispatch . G2f4e) (pretty-print . G5081) (eval-core . G5080) (set-symbol-value! . G507f) (symbol-value . G507e) (gensym . G507d) (void . G507c) (load . G4cfe) (interaction-environment . G3045) (char-ready? . G507b) (regexp? . G507a) (read-line . G5079) (dotted-list? . G5078) (circular-list? . G5077) (proper-list? . G5076) (circular-list . G5075) (last . G5074) (last-pair . G5073) (not-pair? . G5072) (split-at! . G5071) (split-at . G5070) (list= . G506f) (list-copy . G506e) (list-tabulate . G506d) (make-list . G506c) (xcons . G506b) (tenth . G506a) (ninth . G5069) (eighth . G5068) (seventh . G5067) (sixth . G5066) (fifth . G5065) (drop-right! . G5064) (drop-right . G5063) (take-right . G5062) (take! . G5061) (drop . G5060) (take . G505f) (car+cdr . G505e) (third . G505d) (second . G505c) (first . G505b) (iota . G505a) (every . G5059) (ungensym . G5058) (assoc-ref . G5057) (alist-cons . G5056) (append-map . G5055) (print . G5054) (format . G5053) (standard-library-path . G5052) (file-newer? . G5051) (stat-mtime . G5050) (current-directory . G504f) (write-to-file . G504e) (file->list . G504d) (file->string . G504c) (digit->integer . G504b) (call-with-string-input-port . G504a) (call-with-string-io . G5049) (string-split . G5048) (bytevector-for-each . G5047) (string->regexp . G5046) (rxmatch . G5045) (regexp-replace-all . G5044) (hashtable-for-each . G5043) (readdir . G5042) (get-environment-variables . G5041) (get-environment-variable . G5040) (get-timeofday . G503f) (get-command-line . G503e) (sys-display . G503d) (source-info . G503c) (make-compiler-instruction . G503b) (make-instruction . G503a) (set-source-info! . G5039) (bignum? . G5038) (make-complex . G5037) (fast-equal? . G5036) (fasl-read . G5035) (fasl-write . G5034) (receive . G5033) (make-parameter . G2821) (string-upcase . G5032) (string-titlecase . G5031) (string-normalize-nfkd . G5030) (string-normalize-nfkc . G502f) (string-normalize-nfd . G502e) (string-normalize-nfc . G502d) (string-foldcase . G502c) (string-downcase . G502b) (string-ci>? . G502a) (string-ci>=? . G5029) (string-ci=? . G5028) (string-ci<? . G5027) (string-ci<=? . G5026) (char-whitespace? . G5025) (char-upper-case? . G5024) (char-title-case? . G5023) (char-numeric? . G5022) (char-lower-case? . G5021) (char-general-category . G5020) (char-upcase . G501f) (char-titlecase . G501e) (char-foldcase . G501d) (char-downcase . G501c) (char-ci>? . G501b) (char-ci>=? . G501a) (char-ci=? . G5019) (char-ci<? . G5018) (char-ci<=? . G5017) (char-alphabetic? . G5016) (make-variable-transformer . G2d89) (identifier? . G303b) (generate-temporaries . G3027) (free-identifier=? . G3029) (syntax->datum . G303f) (datum->syntax . G303d) (bound-identifier=? . G302b) (record-type-descriptor? . G5015) (record-predicate . G5014) (record-mutator . G5013) (record-constructor . G5012) (record-accessor . G5011) (make-record-type-descriptor . G5010) (make-record-constructor-descriptor . G500f) (record? . G500e) (record-type-uid . G500d) (record-type-sealed? . G500c) (record-type-parent . G500b) (record-type-opaque? . G500a) (record-type-name . G5009) (record-type-generative? . G5008) (record-type-field-names . G5007) (record-rtd . G5006) (record-field-mutable? . G5005) (delete-file . G5004) (file-exists? . G5003) (vector-sort! . G5002) (vector-sort . G5001) (list-sort . G5000) (symbol-hash . G4fff) (string-ci-hash . G4ffe) (string-hash . G4ffd) (equal-hash . G4ffc) (hashtable-equivalence-function . G4ffb) (make-hashtable . G4ffa) (hashtable-hash-function . G4ff9) (make-eqv-hashtable . G4ff8) (make-eq-hashtable . G4ff7) (hashtable? . G4ff6) (hashtable-update! . G4ff5) (hashtable-size . G4ff4) (hashtable-set! . G4ff3) (hashtable-ref . G4ff2) (hashtable-mutable? . G4ff1) (hashtable-keys . G4ff0) (hashtable-entries . G4fef) (hashtable-delete! . G4fee) (hashtable-copy . G4fed) (hashtable-contains? . G4fec) (hashtable-clear! . G4feb) (call-with-output-file . G4fea) (call-with-input-file . G4fe9) (write-char . G4fe8) (write . G4fe7) (with-output-to-file . G4fe6) (with-input-from-file . G4fe5) (read-char . G4fe4) (read . G4fe3) (peek-char . G4fe2) (open-output-file . G4fe1) (open-input-file . G4fe0) (newline . G4fdf) (display . G4fde) (close-output-port . G4fdd) (close-input-port . G4fdc) (eof-object? . G4fdb) (eof-object . G4fda) (current-error-port . G4fd9) (current-output-port . G4fd8) (current-input-port . G4fd7) (output-port? . G4fd6) (input-port? . G4fd5) (utf-8-codec . G4fd4) (utf-16-codec . G4fd3) (transcoder-error-handling-mode . G4fd2) (transcoder-eol-style . G4fd1) (transcoder-codec . G4fd0) (transcoded-port . G4fcf) (textual-port? . G4fce) (string->bytevector . G4fcd) (standard-output-port . G4fcc) (standard-input-port . G4fcb) (standard-error-port . G4fca) (set-port-position! . G4fc9) (put-u8 . G4fc8) (put-string . G4fc7) (put-datum . G4fc6) (put-char . G4fc5) (put-bytevector . G4fc4) (port? . G4fc3) (port-transcoder . G4fc2) (port-position . G4fc1) (port-has-set-port-position!? . G4fc0) (port-has-port-position? . G4fbf) (port-eof? . G4fbe) (output-port-buffer-mode . G4fbd) (open-string-output-port . G4fbc) (open-string-input-port . G4fbb) (open-file-output-port . G4fba) (open-file-input/output-port . G4fb9) (open-file-input-port . G4fb8) (open-bytevector-output-port . G4fb7) (open-bytevector-input-port . G4fb6) (native-transcoder . G4fb5) (native-eol-style . G4fb4) (make-transcoder . G4fb3) (latin-1-codec . G4fb2) (make-i/o-write-error . G4afa) (make-i/o-read-error . G4ae5) (make-i/o-port-error . G4b98) (make-i/o-invalid-position-error . G4b10) (make-i/o-filename-error . G4b2a) (make-i/o-file-protection-error . G4b43) (make-i/o-file-is-read-only-error . G4b58) (make-i/o-file-does-not-exist-error . G4b82) (make-i/o-file-already-exists-error . G4b6d) (make-i/o-error . G4ad0) (make-i/o-encoding-error . G4bc7) (make-i/o-decoding-error . G4bb1) (make-custom-textual-output-port . G4fb1) (make-custom-textual-input/output-port . G4fb0) (make-custom-textual-input-port . G4faf) (make-custom-binary-output-port . G4fae) (make-custom-binary-input/output-port . G4fad) (make-custom-binary-input-port . G4fac) (make-bytevector . G4fab) (lookahead-u8 . G4faa) (lookahead-char . G4fa9) (i/o-write-error? . G4afc) (i/o-read-error? . G4ae7) (i/o-port-error? . G4b9c) (i/o-invalid-position-error? . G4b14) (i/o-filename-error? . G4b2e) (i/o-file-protection-error? . G4b45) (i/o-file-is-read-only-error? . G4b5a) (i/o-file-does-not-exist-error? . G4b84) (i/o-file-already-exists-error? . G4b6f) (i/o-error? . G4ad2) (i/o-error-position . G4b16) (i/o-error-port . G4b9e) (i/o-error-filename . G4b30) (i/o-encoding-error? . G4bcb) (i/o-encoding-error-char . G4bcd) (i/o-decoding-error? . G4bb3) (get-u8 . G4fa8) (get-string-n! . G4fa7) (get-string-n . G4fa6) (get-string-all . G4fa5) (get-line . G4fa4) (get-datum . G4fa3) (get-char . G4fa2) (get-bytevector-some . G4fa1) (get-bytevector-n! . G4fa0) (get-bytevector-n . G4f9f) (get-bytevector-all . G4f9e) (flush-output-port . G4f9d) (close-port . G4f9c) (scheme-report-environment . G3015) (quotient . G4f9b) (null-environment . G3013) (remainder . G4f9a) (modulo . G4f99) (inexact->exact . G4f98) (force . G4f97) (exact->inexact . G4f96) (make-promise . G4f95) (exit . G4f94) (command-line . G4cf8) (string-fill! . G4f93) (string-set! . G4f92) (set-cdr! . G4f91) (set-car! . G4f90) (remove . G4f8f) (remv . G4f8e) (remp . G4f8d) (remq . G4f8c) (partition . G4f8b) (memv . G4f8a) (memq . G4f89) (memp . G4f88) (member . G4f87) (exists . G4f86) (for-all . G4f85) (fold-right . G4f84) (fold-left . G4f83) (find . G4f82) (filter . G4f81) (cons* . G4f80) (assv . G4f7f) (assq . G4f7e) (assp . G4f7d) (assoc . G4f7c) (call-with-string-output-port . G4f7b) (call-with-port . G4f7a) (call-with-bytevector-output-port . G4f79) (bytevector->string . G4f78) (buffer-mode? . G4f77) (binary-port? . G4f76) (with-exception-handler . G4f75) (raise-continuable . G4f74) (raise . G4f73) (eval . G3019) (environment . G3011) (make-enumeration . G4f72) (enum-set=? . G4f71) (enum-set-universe . G4f70) (enum-set-union . G4f6f) (enum-set-subset? . G4f6e) (enum-set-projection . G4f6d) (enum-set-member? . G4f6c) (enum-set-intersection . G4f6b) (enum-set-indexer . G4f6a) (enum-set-difference . G4f69) (enum-set-constructor . G4f68) (enum-set-complement . G4f67) (enum-set->list . G4f66) (who-condition? . G4a48) (warning? . G49c2) (violation? . G4a01) (undefined-violation? . G4abd) (syntax-violation? . G4aa4) (syntax-violation-subform . G4aa8) (syntax-violation-form . G4aa6) (syntax-violation . G3039) (simple-conditions . G4f65) (serious-condition? . G49d7) (non-continuable-violation? . G4a5f) (message-condition? . G49ab) (make-who-condition . G4a44) (make-warning . G49c0) (make-violation . G49ff) (make-undefined-violation . G4abb) (make-syntax-violation . G4a9e) (make-serious-condition . G49d5) (make-non-continuable-violation . G4a5d) (make-message-condition . G49a7) (make-lexical-violation . G4a87) (make-irritants-condition . G4a2a) (make-implementation-restriction-violation . G4a72) (make-error . G49ea) (make-assertion-violation . G4a14) (lexical-violation? . G4a89) (irritants-condition? . G4a2e) (implementation-restriction-violation? . G4a74) (error? . G49ec) (condition-who . G4a4a) (condition-predicate . G4f64) (condition-message . G49ad) (condition-irritants . G4a30) (condition-accessor . G4f63) (condition . G4f62) (assertion-violation? . G4a16) (condition? . G4f61) (utf32->string . G4f60) (utf16->string . G4f5f) (utf8->string . G4f5e) (uint-list->bytevector . G4f5d) (u8-list->bytevector . G4f5c) (string->utf8 . G4f5b) (string->utf32 . G4f5a) (string->utf16 . G4f59) (sint-list->bytevector . G4f58) (native-endianness . G4f57) (bytevector? . G4f56) (bytevector=? . G4f55) (bytevector-uint-set! . G4f54) (bytevector-uint-ref . G4f53) (bytevector-u8-set! . G4f52) (bytevector-u8-ref . G4f51) (bytevector-u64-set! . G4f50) (bytevector-u64-ref . G4f4f) (bytevector-u64-native-set! . G4f4e) (bytevector-u64-native-ref . G4f4d) (bytevector-u32-set! . G4f4c) (bytevector-u32-ref . G4f4b) (bytevector-u32-native-set! . G4f4a) (bytevector-u32-native-ref . G4f49) (bytevector-u16-set! . G4f48) (bytevector-u16-ref . G4f47) (bytevector-u16-native-set! . G4f46) (bytevector-u16-native-ref . G4f45) (bytevector-sint-set! . G4f44) (bytevector-sint-ref . G4f43) (bytevector-s8-set! . G4f42) (bytevector-s8-ref . G4f41) (bytevector-s64-set! . G4f40) (bytevector-s64-ref . G4f3f) (bytevector-s64-native-set! . G4f3e) (bytevector-s64-native-ref . G4f3d) (bytevector-s32-set! . G4f3c) (bytevector-s32-ref . G4f3b) (bytevector-s32-native-set! . G4f3a) (bytevector-s32-native-ref . G4f39) (bytevector-s16-set! . G4f38) (bytevector-s16-ref . G4f37) (bytevector-s16-native-set! . G4f36) (bytevector-s16-native-ref . G4f35) (bytevector-length . G4f34) (bytevector-ieee-single-ref . G4f33) (bytevector-ieee-single-set! . G4f32) (bytevector-ieee-single-native-set! . G4f31) (bytevector-ieee-single-native-ref . G4f30) (bytevector-ieee-double-set! . G4f2f) (bytevector-ieee-double-ref . G4f2e) (bytevector-ieee-double-native-set! . G4f2d) (bytevector-ieee-double-native-ref . G4f2c) (bytevector-fill! . G4f2b) (bytevector-copy! . G4f2a) (bytevector-copy . G4f29) (bytevector->uint-list . G4f28) (bytevector->u8-list . G4f27) (bytevector->sint-list . G4f26) (no-nans-violation? . G4bf7) (no-infinities-violation? . G4be2) (make-no-nans-violation . G4bf5) (make-no-infinities-violation . G4be0) (real->flonum . G4f25) (flzero? . G4f24) (fltruncate . G4f23) (fltan . G4f22) (flsqrt . G4f21) (flsin . G4f20) (flround . G4f1f) (flpositive? . G4f1e) (flonum? . G4f1d) (flodd? . G4f1c) (flnumerator . G4f1b) (flnegative? . G4f1a) (flnan? . G4f19) (flmod0 . G4f18) (flmod . G4f17) (flmin . G4f16) (flmax . G4f15) (fllog . G4f14) (flinteger? . G4f13) (flinfinite? . G4f12) (flfloor . G4f11) (flfinite? . G4f10) (flexpt . G4f0f) (flexp . G4f0e) (fleven? . G4f0d) (fldiv0-and-mod0 . G4f0c) (fldiv0 . G4f0b) (fldiv-and-mod . G4f0a) (fldiv . G4f09) (fldenominator . G4f08) (flcos . G4f07) (flceiling . G4f06) (flatan . G4f05) (flasin . G4f04) (flacos . G4f03) (flabs . G4f02) (fl>? . G4f01) (fl>=? . G4f00) (fl=? . G4eff) (fl<? . G4efe) (fl<=? . G4efd) (fl/ . G4efc) (fl- . G4efb) (fl+ . G4efa) (fl* . G4ef9) (fixnum->flonum . G4ef8) (fxzero? . G4ef7) (fxxor . G4ef6) (fxrotate-bit-field . G4ef5) (fxreverse-bit-field . G4ef4) (fxpositive? . G4ef3) (fxodd? . G4ef2) (fxnot . G4ef1) (fxnegative? . G4ef0) (fxmod0 . G4eef) (fxmod . G4eee) (fxmin . G4eed) (fxmax . G4eec) (fxlength . G4eeb) (fxior . G4eea) (fxif . G4ee9) (fxfirst-bit-set . G4ee8) (fxeven? . G4ee7) (fxdiv0-and-mod0 . G4ee6) (fxdiv0 . G4ee5) (fxdiv-and-mod . G4ee4) (fxdiv . G4ee3) (fxcopy-bit-field . G4ee2) (fxcopy-bit . G4ee1) (fxbit-set? . G4ee0) (fxbit-field . G4edf) (fxbit-count . G4ede) (fxarithmetic-shift-right . G4edd) (fxarithmetic-shift-left . G4edc) (fxarithmetic-shift . G4edb) (fxand . G4eda) (fx>? . G4ed9) (fx>=? . G4ed8) (fx=? . G4ed7) (fx<? . G4ed6) (fx<=? . G4ed5) (fx-/carry . G4ed4) (fx- . G4ed3) (fx+/carry . G4ed2) (fx+ . G4ed1) (fx*/carry . G4ed0) (fx* . G4ecf) (greatest-fixnum . G4ece) (least-fixnum . G4ecd) (fixnum-width . G4ecc) (fixnum? . G4ecb) (bitwise-rotate-bit-field . G4eca) (bitwise-reverse-bit-field . G4ec9) (bitwise-length . G4ec8) (bitwise-if . G4ec7) (bitwise-first-bit-set . G4ec6) (bitwise-copy-bit-field . G4ec5) (bitwise-copy-bit . G4ec4) (bitwise-bit-set? . G4ec3) (bitwise-bit-field . G4ec2) (bitwise-bit-count . G4ec1) (bitwise-xor . G4ec0) (bitwise-ior . G4ebf) (bitwise-and . G4ebe) (bitwise-not . G4ebd) (bitwise-arithmetic-shift-right . G4ebc) (bitwise-arithmetic-shift-left . G4ebb) (bitwise-arithmetic-shift . G4eba) (zero? . G4eb9) (vector? . G4eb8) (vector-set! . G4eb7) (vector-ref . G4eb6) (vector-map . G4eb5) (vector-length . G4eb4) (vector-for-each . G4eb3) (vector-fill! . G4eb2) (vector->list . G4eb1) (vector . G4eb0) (values . G4eaf) (truncate . G4eae) (tan . G4ead) (symbol? . G4eac) (symbol=? . G4eab) (symbol->string . G4eaa) (substring . G4ea9) (string? . G4ea8) (string>? . G4ea7) (string>=? . G4ea6) (string=? . G4ea5) (string<? . G4ea4) (string<=? . G4ea3) (string-ref . G4ea2) (string-length . G4ea1) (string-for-each . G4ea0) (string-copy . G4e9f) (string-append . G4e9e) (string->symbol . G4e9d) (string->number . G4e9c) (string->list . G4e9b) (string . G4e9a) (sqrt . G4e99) (sin . G4e98) (round . G4e97) (reverse . G4e96) (real? . G4e95) (real-valued? . G4e94) (real-part . G4e93) (rationalize . G4e92) (rational? . G4e91) (rational-valued? . G4e90) (procedure? . G4e8f) (positive? . G4e8e) (pair? . G4e8d) (odd? . G4e8c) (numerator . G4e8b) (number? . G4e8a) (number->string . G4e89) (null? . G4e88) (not . G4e87) (negative? . G4e86) (nan? . G4e85) (min . G4e84) (max . G4e83) (map . G4e82) (make-vector . G4e81) (make-string . G4e80) (make-rectangular . G4e7f) (make-polar . G4e7e) (magnitude . G4e7d) (log . G4e7c) (list? . G4e7b) (list-tail . G4e7a) (list-ref . G4e79) (list->vector . G4e78) (list->string . G4e77) (list . G4e76) (length . G4e75) (lcm . G4e74) (integer? . G4e73) (integer-valued? . G4e72) (integer->char . G4e71) (infinite? . G4e70) (inexact? . G4e6f) (inexact . G4e6e) (imag-part . G4e6d) (gcd . G4e6c) (for-each . G4e6b) (floor . G4e6a) (finite? . G4e69) (expt . G4e68) (exp . G4e67) (exact? . G4e66) (exact-integer-sqrt . G4e65) (exact . G4e64) (even? . G4e63) (error . G4e62) (eqv? . G4e61) (equal? . G4e60) (eq? . G4e5f) (dynamic-wind . G4e5e) (div0-and-mod0 . G4e5d) (mod0 . G4e5c) (div0 . G4e5b) (div-and-mod . G4e5a) (mod . G4e59) (div . G4e58) (denominator . G4e57) (cos . G4e56) (cons . G4e55) (complex? . G4e54) (char? . G4e53) (char>? . G4e52) (char>=? . G4e51) (char=? . G4e50) (char<? . G4e4f) (char<=? . G4e4e) (char->integer . G4e4d) (ceiling . G4e4c) (call-with-values . G4e4b) (call/cc . G4e4a) (call-with-current-continuation . G4e49) (cddddr . G4e48) (cdddar . G4e47) (cddadr . G4e46) (cddaar . G4e45) (cdaddr . G4e44) (cdadar . G4e43) (cdaadr . G4e42) (cdaaar . G4e41) (cadddr . G4e40) (caddar . G4e3f) (cadadr . G4e3e) (cadaar . G4e3d) (caaddr . G4e3c) (caadar . G4e3b) (caaadr . G4e3a) (caaaar . G4e39) (cdddr . G4e38) (cddar . G4e37) (cdadr . G4e36) (cdaar . G4e35) (caddr . G4e34) (cadar . G4e33) (caadr . G4e32) (caaar . G4e31) (cddr . G4e30) (cdar . G4e2f) (cadr . G4e2e) (caar . G4e2d) (cdr . G4e2c) (car . G4e2b) (boolean? . G4e2a) (boolean=? . G4e29) (atan . G4e28) (assertion-violation . G4e27) (asin . G4e26) (apply . G4e25) (append . G4e24) (angle . G4e23) (acos . G4e22) (abs . G4e21) (/ . G4e20) (* . G4e1f) (- . G4e1e) (+ . G4e1d) (>= . G4e1c) (> . G4e1b) (= . G4e1a) (<= . G4e19) (< . G4e18) (library . G4e17) (export . G4e16) (&no-nans . G4e15) (&no-infinities . G4e14) (&i/o-encoding . G4e13) (&i/o-decoding . G4e12) (&i/o-port . G4e11) (&i/o-file-does-not-exist . G4e10) (&i/o-file-already-exists . G4e0f) (&i/o-file-is-read-only . G4e0e) (&i/o-file-protection . G4e0d) (&i/o-filename . G4e0c) (&i/o-invalid-position . G4e0b) (&i/o-write . G4e0a) (&i/o-read . G4e09) (&i/o . G4e08) (&undefined . G4e07) (&syntax . G4e06) (&lexical . G4e05) (&implementation-restriction . G4e04) (&non-continuable . G4e03) (&who . G4e02) (&irritants . G4e01) (&assertion . G4e00) (&violation . G4dff) (&error . G4dfe) (&serious . G4dfd) (&warning . G4dfc) (&message . G4dfb) (&condition . G4dfa) (define-condition-type . G4df9) (define-enumeration . G4df8) (define-record-type . G4df7) (parent-rtd . G4df6) (nongenerative . G4df5) (opaque . G4df4) (sealed . G4df3) (protocol . G4df2) (parent . G4df1) (immutable . G4df0) (mutable . G4def) (fields . G4dee) (error-handling-mode . G4ded) (file-options . G4dec) (buffer-mode . G4deb) (eol-style . G4dea) (guard . G4de9) (trace-define . G4de8) (trace-lambda . G4de7) (unsyntax-splicing . G4de6) (unsyntax . G4de5) (unquote-splicing . G4de4) (unquote . G4de3) (_ . G4de2) (else . G4de1) (=> . G4de0) (... . G4ddf) (assert . G4dde) (endianness . G4ddd) (delay . G4ddc) (time . G4ddb) (do . G4dda) (cond . G4dd9) (let* . G4dd8) (let . G4dd7) (let*-values . G4dd6) (let-values . G4dd5) (identifier-syntax . G4dd4) (with-syntax . G4dd3) (quasisyntax . G4dd2) (quasiquote . G4dd1) (syntax-rules . G4dd0) (include . G4dcf) (define-struct . G4dce) (record-constructor-descriptor . G4dcd) (record-type-descriptor . G4dcc) (case . G4dcb) (parameterize . G4dca) (unless . G4dc9) (when . G4dc8) (or . G4dc7) (and . G4dc6) (if . G4dc5) (letrec* . G4dc4) (letrec . G4dc3) (type-descriptor . G4dc2) (case-lambda . G4dc1) (lambda . G4dc0) (syntax . G4dbf) (syntax-case . G4dbe) (quote . G4dbd) (foreign-call . G4dbc) (letrec-syntax . G4dbb) (let-syntax . G4dba) (set! . G4db9) (import . G4db8) (begin . G4db7) (module . G4db6) (define-syntax . G4db5) (define . G4db4)) '((G4bfb core-prim . &no-nans-rcd) (G4bf9 core-prim . &no-nans-rtd) (G4be6 core-prim . &no-infinities-rcd) (G4be4 core-prim . &no-infinities-rtd) (G4bd1 core-prim . &i/o-encoding-rcd) (G4bcf core-prim . &i/o-encoding-rtd) (G4bb7 core-prim . &i/o-decoding-rcd) (G4bb5 core-prim . &i/o-decoding-rtd) (G4ba2 core-prim . &i/o-port-rcd) (G4ba0 core-prim . &i/o-port-rtd) (G4b88 core-prim . &i/o-file-does-not-exist-rcd) (G4b86 core-prim . &i/o-file-does-not-exist-rtd) (G4b73 core-prim . &i/o-file-already-exists-rcd) (G4b71 core-prim . &i/o-file-already-exists-rtd) (G4b5e core-prim . &i/o-file-is-read-only-rcd) (G4b5c core-prim . &i/o-file-is-read-only-rtd) (G4b49 core-prim . &i/o-file-protection-rcd) (G4b47 core-prim . &i/o-file-protection-rtd) (G4b34 core-prim . &i/o-filename-rcd) (G4b32 core-prim . &i/o-filename-rtd) (G4b1a core-prim . &i/o-invalid-position-rcd) (G4b18 core-prim . &i/o-invalid-position-rtd) (G4b00 core-prim . &i/o-write-rcd) (G4afe core-prim . &i/o-write-rtd) (G4aeb core-prim . &i/o-read-rcd) (G4ae9 core-prim . &i/o-read-rtd) (G4ad6 core-prim . &i/o-rcd) (G4ad4 core-prim . &i/o-rtd) (G4ac1 core-prim . &undefined-rcd) (G4abf core-prim . &undefined-rtd) (G4aac core-prim . &syntax-rcd) (G4aaa core-prim . &syntax-rtd) (G4a8d core-prim . &lexical-rcd) (G4a8b core-prim . &lexical-rtd) (G4a78 core-prim . &implementation-restriction-rcd) (G4a76 core-prim . &implementation-restriction-rtd) (G4a63 core-prim . &non-continuable-rcd) (G4a61 core-prim . &non-continuable-rtd) (G4a4e core-prim . &who-rcd) (G4a4c core-prim . &who-rtd) (G4a34 core-prim . &irritants-rcd) (G4a32 core-prim . &irritants-rtd) (G4a1a core-prim . &assertion-rcd) (G4a18 core-prim . &assertion-rtd) (G4a05 core-prim . &violation-rcd) (G4a03 core-prim . &violation-rtd) (G49f0 core-prim . &error-rcd) (G49ee core-prim . &error-rtd) (G49db core-prim . &serious-rcd) (G49d9 core-prim . &serious-rtd) (G49c6 core-prim . &warning-rcd) (G49c4 core-prim . &warning-rtd) (G49b1 core-prim . &message-rcd) (G49af core-prim . &message-rtd) (G4954 core-prim . &condition-rcd) (G4952 core-prim . &condition-rtd) (G3035 core-prim . syntax-error) (G2f4e core-prim . syntax-dispatch) (G5081 core-prim . pretty-print) (G5080 core-prim . eval-core) (G507f core-prim . set-symbol-value!) (G507e core-prim . symbol-value) (G507d core-prim . gensym) (G507c core-prim . void) (G4cfe core-prim . load) (G3045 core-prim . interaction-environment) (G507b core-prim . char-ready?) (G507a core-prim . regexp?) (G5079 core-prim . read-line) (G5078 core-prim . dotted-list?) (G5077 core-prim . circular-list?) (G5076 core-prim . proper-list?) (G5075 core-prim . circular-list) (G5074 core-prim . last) (G5073 core-prim . last-pair) (G5072 core-prim . not-pair?) (G5071 core-prim . split-at!) (G5070 core-prim . split-at) (G506f core-prim . list=) (G506e core-prim . list-copy) (G506d core-prim . list-tabulate) (G506c core-prim . make-list) (G506b core-prim . xcons) (G506a core-prim . tenth) (G5069 core-prim . ninth) (G5068 core-prim . eighth) (G5067 core-prim . seventh) (G5066 core-prim . sixth) (G5065 core-prim . fifth) (G5064 core-prim . drop-right!) (G5063 core-prim . drop-right) (G5062 core-prim . take-right) (G5061 core-prim . take!) (G5060 core-prim . drop) (G505f core-prim . take) (G505e core-prim . car+cdr) (G505d core-prim . third) (G505c core-prim . second) (G505b core-prim . first) (G505a core-prim . iota) (G5059 core-prim . every) (G5058 core-prim . ungensym) (G5057 core-prim . assoc-ref) (G5056 core-prim . alist-cons) (G5055 core-prim . append-map) (G5054 core-prim . print) (G5053 core-prim . format) (G5052 core-prim . standard-library-path) (G5051 core-prim . file-newer?) (G5050 core-prim . stat-mtime) (G504f core-prim . current-directory) (G504e core-prim . write-to-file) (G504d core-prim . file->list) (G504c core-prim . file->string) (G504b core-prim . digit->integer) (G504a core-prim . call-with-string-input-port) (G5049 core-prim . call-with-string-io) (G5048 core-prim . string-split) (G5047 core-prim . bytevector-for-each) (G5046 core-prim . string->regexp) (G5045 core-prim . rxmatch) (G5044 core-prim . regexp-replace-all) (G5043 core-prim . hashtable-for-each) (G5042 core-prim . readdir) (G5041 core-prim . get-environment-variables) (G5040 core-prim . get-environment-variable) (G503f core-prim . get-timeofday) (G503e core-prim . get-command-line) (G503d core-prim . sys-display) (G503c core-prim . source-info) (G503b core-prim . make-compiler-instruction) (G503a core-prim . make-instruction) (G5039 core-prim . set-source-info!) (G5038 core-prim . bignum?) (G5037 core-prim . make-complex) (G5036 core-prim . fast-equal?) (G5035 core-prim . fasl-read) (G5034 core-prim . fasl-write) (G5033 core-prim . receive) (G2821 core-prim . make-parameter) (G5032 core-prim . string-upcase) (G5031 core-prim . string-titlecase) (G5030 core-prim . string-normalize-nfkd) (G502f core-prim . string-normalize-nfkc) (G502e core-prim . string-normalize-nfd) (G502d core-prim . string-normalize-nfc) (G502c core-prim . string-foldcase) (G502b core-prim . string-downcase) (G502a core-prim . string-ci>?) (G5029 core-prim . string-ci>=?) (G5028 core-prim . string-ci=?) (G5027 core-prim . string-ci<?) (G5026 core-prim . string-ci<=?) (G5025 core-prim . char-whitespace?) (G5024 core-prim . char-upper-case?) (G5023 core-prim . char-title-case?) (G5022 core-prim . char-numeric?) (G5021 core-prim . char-lower-case?) (G5020 core-prim . char-general-category) (G501f core-prim . char-upcase) (G501e core-prim . char-titlecase) (G501d core-prim . char-foldcase) (G501c core-prim . char-downcase) (G501b core-prim . char-ci>?) (G501a core-prim . char-ci>=?) (G5019 core-prim . char-ci=?) (G5018 core-prim . char-ci<?) (G5017 core-prim . char-ci<=?) (G5016 core-prim . char-alphabetic?) (G2d89 core-prim . make-variable-transformer) (G303b core-prim . identifier?) (G3027 core-prim . generate-temporaries) (G3029 core-prim . free-identifier=?) (G303f core-prim . syntax->datum) (G303d core-prim . datum->syntax) (G302b core-prim . bound-identifier=?) (G5015 core-prim . record-type-descriptor?) (G5014 core-prim . record-predicate) (G5013 core-prim . record-mutator) (G5012 core-prim . record-constructor) (G5011 core-prim . record-accessor) (G5010 core-prim . make-record-type-descriptor) (G500f core-prim . make-record-constructor-descriptor) (G500e core-prim . record?) (G500d core-prim . record-type-uid) (G500c core-prim . record-type-sealed?) (G500b core-prim . record-type-parent) (G500a core-prim . record-type-opaque?) (G5009 core-prim . record-type-name) (G5008 core-prim . record-type-generative?) (G5007 core-prim . record-type-field-names) (G5006 core-prim . record-rtd) (G5005 core-prim . record-field-mutable?) (G5004 core-prim . delete-file) (G5003 core-prim . file-exists?) (G5002 core-prim . vector-sort!) (G5001 core-prim . vector-sort) (G5000 core-prim . list-sort) (G4fff core-prim . symbol-hash) (G4ffe core-prim . string-ci-hash) (G4ffd core-prim . string-hash) (G4ffc core-prim . equal-hash) (G4ffb core-prim . hashtable-equivalence-function) (G4ffa core-prim . make-hashtable) (G4ff9 core-prim . hashtable-hash-function) (G4ff8 core-prim . make-eqv-hashtable) (G4ff7 core-prim . make-eq-hashtable) (G4ff6 core-prim . hashtable?) (G4ff5 core-prim . hashtable-update!) (G4ff4 core-prim . hashtable-size) (G4ff3 core-prim . hashtable-set!) (G4ff2 core-prim . hashtable-ref) (G4ff1 core-prim . hashtable-mutable?) (G4ff0 core-prim . hashtable-keys) (G4fef core-prim . hashtable-entries) (G4fee core-prim . hashtable-delete!) (G4fed core-prim . hashtable-copy) (G4fec core-prim . hashtable-contains?) (G4feb core-prim . hashtable-clear!) (G4fea core-prim . call-with-output-file) (G4fe9 core-prim . call-with-input-file) (G4fe8 core-prim . write-char) (G4fe7 core-prim . write) (G4fe6 core-prim . with-output-to-file) (G4fe5 core-prim . with-input-from-file) (G4fe4 core-prim . read-char) (G4fe3 core-prim . read) (G4fe2 core-prim . peek-char) (G4fe1 core-prim . open-output-file) (G4fe0 core-prim . open-input-file) (G4fdf core-prim . newline) (G4fde core-prim . display) (G4fdd core-prim . close-output-port) (G4fdc core-prim . close-input-port) (G4fdb core-prim . eof-object?) (G4fda core-prim . eof-object) (G4fd9 core-prim . current-error-port) (G4fd8 core-prim . current-output-port) (G4fd7 core-prim . current-input-port) (G4fd6 core-prim . output-port?) (G4fd5 core-prim . input-port?) (G4fd4 core-prim . utf-8-codec) (G4fd3 core-prim . utf-16-codec) (G4fd2 core-prim . transcoder-error-handling-mode) (G4fd1 core-prim . transcoder-eol-style) (G4fd0 core-prim . transcoder-codec) (G4fcf core-prim . transcoded-port) (G4fce core-prim . textual-port?) (G4fcd core-prim . string->bytevector) (G4fcc core-prim . standard-output-port) (G4fcb core-prim . standard-input-port) (G4fca core-prim . standard-error-port) (G4fc9 core-prim . set-port-position!) (G4fc8 core-prim . put-u8) (G4fc7 core-prim . put-string) (G4fc6 core-prim . put-datum) (G4fc5 core-prim . put-char) (G4fc4 core-prim . put-bytevector) (G4fc3 core-prim . port?) (G4fc2 core-prim . port-transcoder) (G4fc1 core-prim . port-position) (G4fc0 core-prim . port-has-set-port-position!?) (G4fbf core-prim . port-has-port-position?) (G4fbe core-prim . port-eof?) (G4fbd core-prim . output-port-buffer-mode) (G4fbc core-prim . open-string-output-port) (G4fbb core-prim . open-string-input-port) (G4fba core-prim . open-file-output-port) (G4fb9 core-prim . open-file-input/output-port) (G4fb8 core-prim . open-file-input-port) (G4fb7 core-prim . open-bytevector-output-port) (G4fb6 core-prim . open-bytevector-input-port) (G4fb5 core-prim . native-transcoder) (G4fb4 core-prim . native-eol-style) (G4fb3 core-prim . make-transcoder) (G4fb2 core-prim . latin-1-codec) (G4afa core-prim . make-i/o-write-error) (G4ae5 core-prim . make-i/o-read-error) (G4b98 core-prim . make-i/o-port-error) (G4b10 core-prim . make-i/o-invalid-position-error) (G4b2a core-prim . make-i/o-filename-error) (G4b43 core-prim . make-i/o-file-protection-error) (G4b58 core-prim . make-i/o-file-is-read-only-error) (G4b82 core-prim . make-i/o-file-does-not-exist-error) (G4b6d core-prim . make-i/o-file-already-exists-error) (G4ad0 core-prim . make-i/o-error) (G4bc7 core-prim . make-i/o-encoding-error) (G4bb1 core-prim . make-i/o-decoding-error) (G4fb1 core-prim . make-custom-textual-output-port) (G4fb0 core-prim . make-custom-textual-input/output-port) (G4faf core-prim . make-custom-textual-input-port) (G4fae core-prim . make-custom-binary-output-port) (G4fad core-prim . make-custom-binary-input/output-port) (G4fac core-prim . make-custom-binary-input-port) (G4fab core-prim . make-bytevector) (G4faa core-prim . lookahead-u8) (G4fa9 core-prim . lookahead-char) (G4afc core-prim . i/o-write-error?) (G4ae7 core-prim . i/o-read-error?) (G4b9c core-prim . i/o-port-error?) (G4b14 core-prim . i/o-invalid-position-error?) (G4b2e core-prim . i/o-filename-error?) (G4b45 core-prim . i/o-file-protection-error?) (G4b5a core-prim . i/o-file-is-read-only-error?) (G4b84 core-prim . i/o-file-does-not-exist-error?) (G4b6f core-prim . i/o-file-already-exists-error?) (G4ad2 core-prim . i/o-error?) (G4b16 core-prim . i/o-error-position) (G4b9e core-prim . i/o-error-port) (G4b30 core-prim . i/o-error-filename) (G4bcb core-prim . i/o-encoding-error?) (G4bcd core-prim . i/o-encoding-error-char) (G4bb3 core-prim . i/o-decoding-error?) (G4fa8 core-prim . get-u8) (G4fa7 core-prim . get-string-n!) (G4fa6 core-prim . get-string-n) (G4fa5 core-prim . get-string-all) (G4fa4 core-prim . get-line) (G4fa3 core-prim . get-datum) (G4fa2 core-prim . get-char) (G4fa1 core-prim . get-bytevector-some) (G4fa0 core-prim . get-bytevector-n!) (G4f9f core-prim . get-bytevector-n) (G4f9e core-prim . get-bytevector-all) (G4f9d core-prim . flush-output-port) (G4f9c core-prim . close-port) (G3015 core-prim . scheme-report-environment) (G4f9b core-prim . quotient) (G3013 core-prim . null-environment) (G4f9a core-prim . remainder) (G4f99 core-prim . modulo) (G4f98 core-prim . inexact->exact) (G4f97 core-prim . force) (G4f96 core-prim . exact->inexact) (G4f95 core-prim . make-promise) (G4f94 core-prim . exit) (G4cf8 core-prim . command-line) (G4f93 core-prim . string-fill!) (G4f92 core-prim . string-set!) (G4f91 core-prim . set-cdr!) (G4f90 core-prim . set-car!) (G4f8f core-prim . remove) (G4f8e core-prim . remv) (G4f8d core-prim . remp) (G4f8c core-prim . remq) (G4f8b core-prim . partition) (G4f8a core-prim . memv) (G4f89 core-prim . memq) (G4f88 core-prim . memp) (G4f87 core-prim . member) (G4f86 core-prim . exists) (G4f85 core-prim . for-all) (G4f84 core-prim . fold-right) (G4f83 core-prim . fold-left) (G4f82 core-prim . find) (G4f81 core-prim . filter) (G4f80 core-prim . cons*) (G4f7f core-prim . assv) (G4f7e core-prim . assq) (G4f7d core-prim . assp) (G4f7c core-prim . assoc) (G4f7b core-prim . call-with-string-output-port) (G4f7a core-prim . call-with-port) (G4f79 core-prim . call-with-bytevector-output-port) (G4f78 core-prim . bytevector->string) (G4f77 core-prim . buffer-mode?) (G4f76 core-prim . binary-port?) (G4f75 core-prim . with-exception-handler) (G4f74 core-prim . raise-continuable) (G4f73 core-prim . raise) (G3019 core-prim . eval) (G3011 core-prim . environment) (G4f72 core-prim . make-enumeration) (G4f71 core-prim . enum-set=?) (G4f70 core-prim . enum-set-universe) (G4f6f core-prim . enum-set-union) (G4f6e core-prim . enum-set-subset?) (G4f6d core-prim . enum-set-projection) (G4f6c core-prim . enum-set-member?) (G4f6b core-prim . enum-set-intersection) (G4f6a core-prim . enum-set-indexer) (G4f69 core-prim . enum-set-difference) (G4f68 core-prim . enum-set-constructor) (G4f67 core-prim . enum-set-complement) (G4f66 core-prim . enum-set->list) (G4a48 core-prim . who-condition?) (G49c2 core-prim . warning?) (G4a01 core-prim . violation?) (G4abd core-prim . undefined-violation?) (G4aa4 core-prim . syntax-violation?) (G4aa8 core-prim . syntax-violation-subform) (G4aa6 core-prim . syntax-violation-form) (G3039 core-prim . syntax-violation) (G4f65 core-prim . simple-conditions) (G49d7 core-prim . serious-condition?) (G4a5f core-prim . non-continuable-violation?) (G49ab core-prim . message-condition?) (G4a44 core-prim . make-who-condition) (G49c0 core-prim . make-warning) (G49ff core-prim . make-violation) (G4abb core-prim . make-undefined-violation) (G4a9e core-prim . make-syntax-violation) (G49d5 core-prim . make-serious-condition) (G4a5d core-prim . make-non-continuable-violation) (G49a7 core-prim . make-message-condition) (G4a87 core-prim . make-lexical-violation) (G4a2a core-prim . make-irritants-condition) (G4a72 core-prim . make-implementation-restriction-violation) (G49ea core-prim . make-error) (G4a14 core-prim . make-assertion-violation) (G4a89 core-prim . lexical-violation?) (G4a2e core-prim . irritants-condition?) (G4a74 core-prim . implementation-restriction-violation?) (G49ec core-prim . error?) (G4a4a core-prim . condition-who) (G4f64 core-prim . condition-predicate) (G49ad core-prim . condition-message) (G4a30 core-prim . condition-irritants) (G4f63 core-prim . condition-accessor) (G4f62 core-prim . condition) (G4a16 core-prim . assertion-violation?) (G4f61 core-prim . condition?) (G4f60 core-prim . utf32->string) (G4f5f core-prim . utf16->string) (G4f5e core-prim . utf8->string) (G4f5d core-prim . uint-list->bytevector) (G4f5c core-prim . u8-list->bytevector) (G4f5b core-prim . string->utf8) (G4f5a core-prim . string->utf32) (G4f59 core-prim . string->utf16) (G4f58 core-prim . sint-list->bytevector) (G4f57 core-prim . native-endianness) (G4f56 core-prim . bytevector?) (G4f55 core-prim . bytevector=?) (G4f54 core-prim . bytevector-uint-set!) (G4f53 core-prim . bytevector-uint-ref) (G4f52 core-prim . bytevector-u8-set!) (G4f51 core-prim . bytevector-u8-ref) (G4f50 core-prim . bytevector-u64-set!) (G4f4f core-prim . bytevector-u64-ref) (G4f4e core-prim . bytevector-u64-native-set!) (G4f4d core-prim . bytevector-u64-native-ref) (G4f4c core-prim . bytevector-u32-set!) (G4f4b core-prim . bytevector-u32-ref) (G4f4a core-prim . bytevector-u32-native-set!) (G4f49 core-prim . bytevector-u32-native-ref) (G4f48 core-prim . bytevector-u16-set!) (G4f47 core-prim . bytevector-u16-ref) (G4f46 core-prim . bytevector-u16-native-set!) (G4f45 core-prim . bytevector-u16-native-ref) (G4f44 core-prim . bytevector-sint-set!) (G4f43 core-prim . bytevector-sint-ref) (G4f42 core-prim . bytevector-s8-set!) (G4f41 core-prim . bytevector-s8-ref) (G4f40 core-prim . bytevector-s64-set!) (G4f3f core-prim . bytevector-s64-ref) (G4f3e core-prim . bytevector-s64-native-set!) (G4f3d core-prim . bytevector-s64-native-ref) (G4f3c core-prim . bytevector-s32-set!) (G4f3b core-prim . bytevector-s32-ref) (G4f3a core-prim . bytevector-s32-native-set!) (G4f39 core-prim . bytevector-s32-native-ref) (G4f38 core-prim . bytevector-s16-set!) (G4f37 core-prim . bytevector-s16-ref) (G4f36 core-prim . bytevector-s16-native-set!) (G4f35 core-prim . bytevector-s16-native-ref) (G4f34 core-prim . bytevector-length) (G4f33 core-prim . bytevector-ieee-single-ref) (G4f32 core-prim . bytevector-ieee-single-set!) (G4f31 core-prim . bytevector-ieee-single-native-set!) (G4f30 core-prim . bytevector-ieee-single-native-ref) (G4f2f core-prim . bytevector-ieee-double-set!) (G4f2e core-prim . bytevector-ieee-double-ref) (G4f2d core-prim . bytevector-ieee-double-native-set!) (G4f2c core-prim . bytevector-ieee-double-native-ref) (G4f2b core-prim . bytevector-fill!) (G4f2a core-prim . bytevector-copy!) (G4f29 core-prim . bytevector-copy) (G4f28 core-prim . bytevector->uint-list) (G4f27 core-prim . bytevector->u8-list) (G4f26 core-prim . bytevector->sint-list) (G4bf7 core-prim . no-nans-violation?) (G4be2 core-prim . no-infinities-violation?) (G4bf5 core-prim . make-no-nans-violation) (G4be0 core-prim . make-no-infinities-violation) (G4f25 core-prim . real->flonum) (G4f24 core-prim . flzero?) (G4f23 core-prim . fltruncate) (G4f22 core-prim . fltan) (G4f21 core-prim . flsqrt) (G4f20 core-prim . flsin) (G4f1f core-prim . flround) (G4f1e core-prim . flpositive?) (G4f1d core-prim . flonum?) (G4f1c core-prim . flodd?) (G4f1b core-prim . flnumerator) (G4f1a core-prim . flnegative?) (G4f19 core-prim . flnan?) (G4f18 core-prim . flmod0) (G4f17 core-prim . flmod) (G4f16 core-prim . flmin) (G4f15 core-prim . flmax) (G4f14 core-prim . fllog) (G4f13 core-prim . flinteger?) (G4f12 core-prim . flinfinite?) (G4f11 core-prim . flfloor) (G4f10 core-prim . flfinite?) (G4f0f core-prim . flexpt) (G4f0e core-prim . flexp) (G4f0d core-prim . fleven?) (G4f0c core-prim . fldiv0-and-mod0) (G4f0b core-prim . fldiv0) (G4f0a core-prim . fldiv-and-mod) (G4f09 core-prim . fldiv) (G4f08 core-prim . fldenominator) (G4f07 core-prim . flcos) (G4f06 core-prim . flceiling) (G4f05 core-prim . flatan) (G4f04 core-prim . flasin) (G4f03 core-prim . flacos) (G4f02 core-prim . flabs) (G4f01 core-prim . fl>?) (G4f00 core-prim . fl>=?) (G4eff core-prim . fl=?) (G4efe core-prim . fl<?) (G4efd core-prim . fl<=?) (G4efc core-prim . fl/) (G4efb core-prim . fl-) (G4efa core-prim . fl+) (G4ef9 core-prim . fl*) (G4ef8 core-prim . fixnum->flonum) (G4ef7 core-prim . fxzero?) (G4ef6 core-prim . fxxor) (G4ef5 core-prim . fxrotate-bit-field) (G4ef4 core-prim . fxreverse-bit-field) (G4ef3 core-prim . fxpositive?) (G4ef2 core-prim . fxodd?) (G4ef1 core-prim . fxnot) (G4ef0 core-prim . fxnegative?) (G4eef core-prim . fxmod0) (G4eee core-prim . fxmod) (G4eed core-prim . fxmin) (G4eec core-prim . fxmax) (G4eeb core-prim . fxlength) (G4eea core-prim . fxior) (G4ee9 core-prim . fxif) (G4ee8 core-prim . fxfirst-bit-set) (G4ee7 core-prim . fxeven?) (G4ee6 core-prim . fxdiv0-and-mod0) (G4ee5 core-prim . fxdiv0) (G4ee4 core-prim . fxdiv-and-mod) (G4ee3 core-prim . fxdiv) (G4ee2 core-prim . fxcopy-bit-field) (G4ee1 core-prim . fxcopy-bit) (G4ee0 core-prim . fxbit-set?) (G4edf core-prim . fxbit-field) (G4ede core-prim . fxbit-count) (G4edd core-prim . fxarithmetic-shift-right) (G4edc core-prim . fxarithmetic-shift-left) (G4edb core-prim . fxarithmetic-shift) (G4eda core-prim . fxand) (G4ed9 core-prim . fx>?) (G4ed8 core-prim . fx>=?) (G4ed7 core-prim . fx=?) (G4ed6 core-prim . fx<?) (G4ed5 core-prim . fx<=?) (G4ed4 core-prim . fx-/carry) (G4ed3 core-prim . fx-) (G4ed2 core-prim . fx+/carry) (G4ed1 core-prim . fx+) (G4ed0 core-prim . fx*/carry) (G4ecf core-prim . fx*) (G4ece core-prim . greatest-fixnum) (G4ecd core-prim . least-fixnum) (G4ecc core-prim . fixnum-width) (G4ecb core-prim . fixnum?) (G4eca core-prim . bitwise-rotate-bit-field) (G4ec9 core-prim . bitwise-reverse-bit-field) (G4ec8 core-prim . bitwise-length) (G4ec7 core-prim . bitwise-if) (G4ec6 core-prim . bitwise-first-bit-set) (G4ec5 core-prim . bitwise-copy-bit-field) (G4ec4 core-prim . bitwise-copy-bit) (G4ec3 core-prim . bitwise-bit-set?) (G4ec2 core-prim . bitwise-bit-field) (G4ec1 core-prim . bitwise-bit-count) (G4ec0 core-prim . bitwise-xor) (G4ebf core-prim . bitwise-ior) (G4ebe core-prim . bitwise-and) (G4ebd core-prim . bitwise-not) (G4ebc core-prim . bitwise-arithmetic-shift-right) (G4ebb core-prim . bitwise-arithmetic-shift-left) (G4eba core-prim . bitwise-arithmetic-shift) (G4eb9 core-prim . zero?) (G4eb8 core-prim . vector?) (G4eb7 core-prim . vector-set!) (G4eb6 core-prim . vector-ref) (G4eb5 core-prim . vector-map) (G4eb4 core-prim . vector-length) (G4eb3 core-prim . vector-for-each) (G4eb2 core-prim . vector-fill!) (G4eb1 core-prim . vector->list) (G4eb0 core-prim . vector) (G4eaf core-prim . values) (G4eae core-prim . truncate) (G4ead core-prim . tan) (G4eac core-prim . symbol?) (G4eab core-prim . symbol=?) (G4eaa core-prim . symbol->string) (G4ea9 core-prim . substring) (G4ea8 core-prim . string?) (G4ea7 core-prim . string>?) (G4ea6 core-prim . string>=?) (G4ea5 core-prim . string=?) (G4ea4 core-prim . string<?) (G4ea3 core-prim . string<=?) (G4ea2 core-prim . string-ref) (G4ea1 core-prim . string-length) (G4ea0 core-prim . string-for-each) (G4e9f core-prim . string-copy) (G4e9e core-prim . string-append) (G4e9d core-prim . string->symbol) (G4e9c core-prim . string->number) (G4e9b core-prim . string->list) (G4e9a core-prim . string) (G4e99 core-prim . sqrt) (G4e98 core-prim . sin) (G4e97 core-prim . round) (G4e96 core-prim . reverse) (G4e95 core-prim . real?) (G4e94 core-prim . real-valued?) (G4e93 core-prim . real-part) (G4e92 core-prim . rationalize) (G4e91 core-prim . rational?) (G4e90 core-prim . rational-valued?) (G4e8f core-prim . procedure?) (G4e8e core-prim . positive?) (G4e8d core-prim . pair?) (G4e8c core-prim . odd?) (G4e8b core-prim . numerator) (G4e8a core-prim . number?) (G4e89 core-prim . number->string) (G4e88 core-prim . null?) (G4e87 core-prim . not) (G4e86 core-prim . negative?) (G4e85 core-prim . nan?) (G4e84 core-prim . min) (G4e83 core-prim . max) (G4e82 core-prim . map) (G4e81 core-prim . make-vector) (G4e80 core-prim . make-string) (G4e7f core-prim . make-rectangular) (G4e7e core-prim . make-polar) (G4e7d core-prim . magnitude) (G4e7c core-prim . log) (G4e7b core-prim . list?) (G4e7a core-prim . list-tail) (G4e79 core-prim . list-ref) (G4e78 core-prim . list->vector) (G4e77 core-prim . list->string) (G4e76 core-prim . list) (G4e75 core-prim . length) (G4e74 core-prim . lcm) (G4e73 core-prim . integer?) (G4e72 core-prim . integer-valued?) (G4e71 core-prim . integer->char) (G4e70 core-prim . infinite?) (G4e6f core-prim . inexact?) (G4e6e core-prim . inexact) (G4e6d core-prim . imag-part) (G4e6c core-prim . gcd) (G4e6b core-prim . for-each) (G4e6a core-prim . floor) (G4e69 core-prim . finite?) (G4e68 core-prim . expt) (G4e67 core-prim . exp) (G4e66 core-prim . exact?) (G4e65 core-prim . exact-integer-sqrt) (G4e64 core-prim . exact) (G4e63 core-prim . even?) (G4e62 core-prim . error) (G4e61 core-prim . eqv?) (G4e60 core-prim . equal?) (G4e5f core-prim . eq?) (G4e5e core-prim . dynamic-wind) (G4e5d core-prim . div0-and-mod0) (G4e5c core-prim . mod0) (G4e5b core-prim . div0) (G4e5a core-prim . div-and-mod) (G4e59 core-prim . mod) (G4e58 core-prim . div) (G4e57 core-prim . denominator) (G4e56 core-prim . cos) (G4e55 core-prim . cons) (G4e54 core-prim . complex?) (G4e53 core-prim . char?) (G4e52 core-prim . char>?) (G4e51 core-prim . char>=?) (G4e50 core-prim . char=?) (G4e4f core-prim . char<?) (G4e4e core-prim . char<=?) (G4e4d core-prim . char->integer) (G4e4c core-prim . ceiling) (G4e4b core-prim . call-with-values) (G4e4a core-prim . call/cc) (G4e49 core-prim . call-with-current-continuation) (G4e48 core-prim . cddddr) (G4e47 core-prim . cdddar) (G4e46 core-prim . cddadr) (G4e45 core-prim . cddaar) (G4e44 core-prim . cdaddr) (G4e43 core-prim . cdadar) (G4e42 core-prim . cdaadr) (G4e41 core-prim . cdaaar) (G4e40 core-prim . cadddr) (G4e3f core-prim . caddar) (G4e3e core-prim . cadadr) (G4e3d core-prim . cadaar) (G4e3c core-prim . caaddr) (G4e3b core-prim . caadar) (G4e3a core-prim . caaadr) (G4e39 core-prim . caaaar) (G4e38 core-prim . cdddr) (G4e37 core-prim . cddar) (G4e36 core-prim . cdadr) (G4e35 core-prim . cdaar) (G4e34 core-prim . caddr) (G4e33 core-prim . cadar) (G4e32 core-prim . caadr) (G4e31 core-prim . caaar) (G4e30 core-prim . cddr) (G4e2f core-prim . cdar) (G4e2e core-prim . cadr) (G4e2d core-prim . caar) (G4e2c core-prim . cdr) (G4e2b core-prim . car) (G4e2a core-prim . boolean?) (G4e29 core-prim . boolean=?) (G4e28 core-prim . atan) (G4e27 core-prim . assertion-violation) (G4e26 core-prim . asin) (G4e25 core-prim . apply) (G4e24 core-prim . append) (G4e23 core-prim . angle) (G4e22 core-prim . acos) (G4e21 core-prim . abs) (G4e20 core-prim . /) (G4e1f core-prim . *) (G4e1e core-prim . -) (G4e1d core-prim . +) (G4e1c core-prim . >=) (G4e1b core-prim . >) (G4e1a core-prim . =) (G4e19 core-prim . <=) (G4e18 core-prim . <) (G4e17 core-prim . library) (G4e16 core-prim . export) (G4e15 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e14 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e13 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e12 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e11 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e10 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e0f $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e0e $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e0d $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e0c $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e0b $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e0a $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e09 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e08 $core-rtd &i/o-rtd &i/o-rcd) (G4e07 $core-rtd &undefined-rtd &undefined-rcd) (G4e06 $core-rtd &syntax-rtd &syntax-rcd) (G4e05 $core-rtd &lexical-rtd &lexical-rcd) (G4e04 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e03 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e02 $core-rtd &who-rtd &who-rcd) (G4e01 $core-rtd &irritants-rtd &irritants-rcd) (G4e00 $core-rtd &assertion-rtd &assertion-rcd) (G4dff $core-rtd &violation-rtd &violation-rcd) (G4dfe $core-rtd &error-rtd &error-rcd) (G4dfd $core-rtd &serious-rtd &serious-rcd) (G4dfc $core-rtd &warning-rtd &warning-rcd) (G4dfb $core-rtd &message-rtd &message-rcd) (G4dfa $core-rtd &condition-rtd &condition-rcd) (G4df9 macro . define-condition-type) (G4df8 macro . define-enumeration) (G4df7 macro . define-record-type) (G4df6 macro . parent-rtd) (G4df5 macro . nongenerative) (G4df4 macro . opaque) (G4df3 macro . sealed) (G4df2 macro . protocol) (G4df1 macro . parent) (G4df0 macro . immutable) (G4def macro . mutable) (G4dee macro . fields) (G4ded macro . error-handling-mode) (G4dec macro . file-options) (G4deb macro . buffer-mode) (G4dea macro . eol-style) (G4de9 macro . guard) (G4de8 macro . trace-define) (G4de7 macro . trace-lambda) (G4de6 macro . unsyntax-splicing) (G4de5 macro . unsyntax) (G4de4 macro . unquote-splicing) (G4de3 macro . unquote) (G4de2 macro . _) (G4de1 macro . else) (G4de0 macro . =>) (G4ddf macro . ...) (G4dde macro . assert) (G4ddd macro . endianness) (G4ddc macro . delay) (G4ddb macro . time) (G4dda macro . do) (G4dd9 macro . cond) (G4dd8 macro . let*) (G4dd7 macro . let) (G4dd6 macro . let*-values) (G4dd5 macro . let-values) (G4dd4 macro . identifier-syntax) (G4dd3 macro . with-syntax) (G4dd2 macro . quasisyntax) (G4dd1 macro . quasiquote) (G4dd0 macro . syntax-rules) (G4dcf macro . include) (G4dce macro . define-struct) (G4dcd core-macro . record-constructor-descriptor) (G4dcc core-macro . record-type-descriptor) (G4dcb macro . case) (G4dca macro . parameterize) (G4dc9 macro . unless) (G4dc8 macro . when) (G4dc7 core-macro . or) (G4dc6 core-macro . and) (G4dc5 core-macro . if) (G4dc4 core-macro . letrec*) (G4dc3 core-macro . letrec) (G4dc2 core-macro . type-descriptor) (G4dc1 core-macro . case-lambda) (G4dc0 core-macro . lambda) (G4dbf core-macro . syntax) (G4dbe core-macro . syntax-case) (G4dbd core-macro . quote) (G4dbc core-macro . foreign-call) (G4dbb letrec-syntax) (G4dba let-syntax) (G4db9 set!) (G4db8 import) (G4db7 begin) (G4db6 module) (G4db5 define-syntax) (G4db4 define)) values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50a2 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5081) (eval-core . G5080) (set-symbol-value! . G507f) (symbol-value . G507e) (gensym . G507d) (void . G507c)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50a3 '(mosh) '() '() '() '() '((set-symbol-value! . G507f) (symbol-value . G507e) (ungensym . G5058) (assoc-ref . G5057) (alist-cons . G5056) (print . G5054) (format . G5053) (standard-library-path . G5052) (file-newer? . G5051) (stat-mtime . G5050) (current-directory . G504f) (write-to-file . G504e) (file->list . G504d) (file->string . G504c) (digit->integer . G504b) (call-with-string-input-port . G504a) (call-with-string-io . G5049) (string-split . G5048) (bytevector-for-each . G5047) (string->regexp . G5046) (rxmatch . G5045) (regexp-replace-all . G5044) (hashtable-for-each . G5043) (get-timeofday . G503f) (get-command-line . G503e) (sys-display . G503d) (source-info . G503c) (make-compiler-instruction . G503b) (make-instruction . G503a) (set-source-info! . G5039) (bignum? . G5038) (make-complex . G5037) (fast-equal? . G5036) (fasl-read . G5035) (fasl-write . G5034) (include . G4dcf)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50a4 '(mosh backend) '() '() '() '() '((receive . G5033)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50a5 '(mosh file) '() '() '() '() '((read-line . G5079) (file-newer? . G5051) (stat-mtime . G5050) (current-directory . G504f) (write-to-file . G504e) (file->list . G504d) (file->string . G504c)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50a6 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5047)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50a7 '(mosh number) '() '() '() '() '((digit->integer . G504b)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50a8 '(mosh string) '() '() '() '() '((print . G5054) (format . G5053) (call-with-string-input-port . G504a) (call-with-string-io . G5049) (string-split . G5048) (string->regexp . G5046)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50a9 '(mosh list) '() '() '() '() '((assoc-ref . G5057)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50aa '(mosh regexp) '() '() '() '() '((rxmatch . G5045) (regexp-replace-all . G5044)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50ab '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5043)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50ac '(mosh parameters) '() '() '() '() '((make-parameter . G2821) (parameterize . G4dca)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50ad '(system) '() '() '() '() '((readdir . G5042) (get-environment-variables . G5041) (get-environment-variable . G5040)) '() values values '#f '#f '#f '#f) (G2b65@G2a0a@install-library 'G50ae '(srfi :1) '() '() '() '() '((dotted-list? . G5078) (circular-list? . G5077) (proper-list? . G5076) (circular-list . G5075) (last . G5074) (last-pair . G5073) (not-pair? . G5072) (split-at! . G5071) (split-at . G5070) (list= . G506f) (list-copy . G506e) (list-tabulate . G506d) (make-list . G506c) (xcons . G506b) (tenth . G506a) (ninth . G5069) (eighth . G5068) (seventh . G5067) (sixth . G5066) (fifth . G5065) (drop-right! . G5064) (drop-right . G5063) (take-right . G5062) (take! . G5061) (drop . G5060) (take . G505f) (car+cdr . G505e) (third . G505d) (second . G505c) (first . G505b) (iota . G505a) (every . G5059) (alist-cons . G5056) (append-map . G5055)) '() values values '#f '#f '#f '#f))
((lambda (G4cf1@for-each-with-index G4cf3@conditioon-printer G4cf5@repl G4cf7@trace-printer G4cf9@command-line G4cfb@local-library-path G4cfd@load/args G4cff@load G4d01@ironscheme-build G4d03@eval-top-level G4d05@compile-system-libraries G4d07@compile G4d09@compile->closure G4d0b@pre-compile-r6rs-file G4d0d@load-r6rs-top-level) (begin (set! G4cf1@for-each-with-index (lambda (G4d26@proc G4d27@lst) (letrec ((G4d2a@loop (lambda (G4d2c@i G4d2d@lst) (if (null? G4d2d@lst) (if '#f '#f (void)) (begin (G4d26@proc G4d2c@i (car G4d2d@lst)) (G4d2a@loop (+ G4d2c@i '1) (cdr G4d2d@lst))))))) (G4d2a@loop '1 G4d27@lst)))) (set! G4cf3@conditioon-printer (lambda (G4d30@e G4d31@port) ((lambda (G4d35@ref) (begin (set! G4d35@ref (lambda (G4d44@rtd G4d45@i G4d46@x) ((lambda (G4d4a@val) (if (symbol? G4d4a@val) (ungensym G4d4a@val) G4d4a@val)) ((record-accessor G4d44@rtd G4d45@i) G4d46@x)))) (begin (display '" Condition components:\n" G4d31@port) (G4cf1@for-each-with-index (lambda (G4d36@i G4d37@x) ((lambda (G4d3a@rtd) (begin (format G4d31@port '"   ~d. ~a" G4d36@i (record-type-name G4d3a@rtd)) ((lambda (G4d3c@v) ((lambda (G4d3e@t) (if (memv G4d3e@t '(0)) (newline G4d31@port) (if (memv G4d3e@t '(1)) (begin (display '": " G4d31@port) (write (G4d35@ref G4d3a@rtd '0 G4d37@x) G4d31@port) (newline G4d31@port)) (begin (display '":\n" G4d31@port) ((letrec ((G4d40@f (lambda (G4d42@i) (if (not (= G4d42@i (vector-length G4d3c@v))) (begin (display '"       " G4d31@port) (display (vector-ref G4d3c@v G4d42@i) G4d31@port) (display '": " G4d31@port) (write (G4d35@ref G4d3a@rtd G4d42@i G4d37@x) G4d31@port) (newline G4d31@port) (G4d40@f (+ G4d42@i '1))) (void))))) G4d40@f) '0))))) (vector-length G4d3c@v))) (record-type-field-names G4d3a@rtd)))) (record-rtd G4d37@x))) (simple-conditions G4d30@e))))) '#f))) (set! G4cf5@repl (lambda G4d4c@x ((lambda (G4d4f@rec) (begin (set! G4d4f@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d52@G4d50) (lambda () (with-exception-handler (lambda (G4d54@e) ((call/cc (lambda (G4d56@G4d51) (G4d52@G4d50 (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4cf3@conditioon-printer G4d54@e (current-error-port))) (G4d56@G4d51 (lambda () (raise-continuable G4d54@e)))))))))) (lambda () ((letrec ((G4d58@loop (lambda (G4d5a@line G4d5b@accum) ((lambda (G4d5f@parentheses-ok? G4d61@eval-string-print) (begin (set! G4d5f@parentheses-ok? (lambda (G4d66@text) ((letrec ((G4d68@loop (lambda (G4d6a@chars G4d6b@p0 G4d6c@p1) (if (null? G4d6a@chars) (= '0 G4d6b@p0 G4d6c@p1) ((lambda (G4d70@t) (if (memv G4d70@t '(#\()) (G4d68@loop (cdr G4d6a@chars) (+ G4d6b@p0 '1) G4d6c@p1) (if (memv G4d70@t '(#\))) (G4d68@loop (cdr G4d6a@chars) (- G4d6b@p0 '1) G4d6c@p1) (if (memv G4d70@t '(#\[)) (G4d68@loop (cdr G4d6a@chars) G4d6b@p0 (+ G4d6c@p1 '1)) (if (memv G4d70@t '(#\])) (G4d68@loop (cdr G4d6a@chars) G4d6b@p0 (- G4d6c@p1 '1)) (G4d68@loop (cdr G4d6a@chars) G4d6b@p0 G4d6c@p1)))))) (car G4d6a@chars)))))) G4d68@loop) (string->list G4d66@text) '0 '0))) (set! G4d61@eval-string-print (lambda (G4d64@text) (if (not (= '0 (string-length G4d64@text))) (write (G4d03@eval-top-level (call-with-port (open-string-input-port G4d64@text) read))) (void)))) (if (eof-object? G4d5a@line) (begin (G4d61@eval-string-print G4d5b@accum) (exit)) ((lambda (G4d62@current) (if (G4d5f@parentheses-ok? G4d62@current) (G4d61@eval-string-print G4d62@current) (G4d58@loop (get-line (current-input-port)) G4d62@current))) (string-append G4d5b@accum G4d5a@line))))) '#f '#f)))) G4d58@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d4f@rec)))) (G4d4f@rec))) '#f))) (set! G4cf7@trace-printer (G28ec@G2822@make-parameter write)) (set! G4cf9@command-line (G28ec@G2822@make-parameter (get-command-line))) (set! G4cfb@local-library-path (lambda (G4d72@filename) (cons '"." (G2b55@G29ea@library-path)))) (set! G4cfd@load/args (lambda (G4d74@filename . G4d76@args) (begin (apply G4d0d@load-r6rs-top-level G4d74@filename 'load G4d76@args) (void)))) (set! G4cff@load (lambda (G4d78@filename) (begin (apply G4d0d@load-r6rs-top-level G4d78@filename 'load (G4cf9@command-line)) (void)))) (set! G4d01@ironscheme-build (lambda () (G4cff@load '"ironscheme-buildscript.ss"))) (set! G4d03@eval-top-level (lambda (G4d7a@x) (G4927@G301a@eval G4d7a@x (G493d@G3046@interaction-environment)))) (set! G4d05@compile-system-libraries (lambda () (G4d03@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d07@compile (lambda (G4d7c@filename) (G4d0d@load-r6rs-top-level G4d7c@filename 'compile))) (set! G4d09@compile->closure (lambda (G4d7e@filename) (G4d0d@load-r6rs-top-level G4d7e@filename 'closure))) (set! G4d0b@pre-compile-r6rs-file (lambda (G4d80@filename) (G4d0d@load-r6rs-top-level G4d80@filename 'compile))) (set! G4d0d@load-r6rs-top-level (lambda (G4d82@filename G4d83@how . G4d86@args) ((lambda (G4d8a@G4d88 G4d8b@G4d89) ((lambda (G4d8e@swap) (dynamic-wind G4d8e@swap (lambda () ((lambda (G4d90@x*) ((lambda (G4d92@t) (if (memv G4d92@t '(closure)) (G493c@G3044@pre-compile-r6rs-top-level G4d90@x*) (if (memv G4d92@t '(load)) ((lambda (G4d96@G4d94 G4d97@G4d95) ((lambda (G4d9a@swap) (dynamic-wind G4d9a@swap (lambda () ((G493b@G3042@compile-r6rs-top-level G4d90@x*))) G4d9a@swap)) (lambda () ((lambda (G4d9c@t) (begin (G4d96@G4d94 G4d97@G4d95) (set! G4d97@G4d95 G4d9c@t))) (G4d96@G4d94))))) G4cf9@command-line (cons G4d82@filename (car G4d86@args))) (if (memv G4d92@t '(compile)) (begin (G493b@G3042@compile-r6rs-top-level G4d90@x*) (G2b59@G29f2@serialize-all G28e7@G2818@serialize-library G2941@G28fa@compile-core-expr)) (if '#f '#f (void)))))) G4d83@how)) (with-input-from-file G4d82@filename (lambda () ((letrec ((G4d9e@f (lambda () ((lambda (G4da0@x) (if (eof-object? G4da0@x) '() (cons G4da0@x (G4d9e@f)))) (G28df@G2808@read-annotated))))) G4d9e@f)))))) G4d8e@swap)) (lambda () ((lambda (G4da2@t) (begin (G4d8a@G4d88 G4d8b@G4d89) (set! G4d8b@G4d89 G4da2@t))) (G4d8a@G4d88))))) G2b55@G29ea@library-path (G4cfb@local-library-path G4d82@filename)))) (begin (set! G4db2@G4d0d@load-r6rs-top-level G4d0d@load-r6rs-top-level) (set! G4db1@G4d0b@pre-compile-r6rs-file G4d0b@pre-compile-r6rs-file) (set! G4db0@G4d09@compile->closure G4d09@compile->closure) (set! G4daf@G4d07@compile G4d07@compile) (set! G4dae@G4d05@compile-system-libraries G4d05@compile-system-libraries) (set! G4dad@G4d03@eval-top-level G4d03@eval-top-level) (set! G4dac@G4d01@ironscheme-build G4d01@ironscheme-build) (set! G4dab@G4cff@load G4cff@load) (set! G4daa@G4cfd@load/args G4cfd@load/args) (set! G4da9@G4cfb@local-library-path G4cfb@local-library-path) (set! G4da8@G4cf9@command-line G4cf9@command-line) (set! G4da7@G4cf7@trace-printer G4cf7@trace-printer) (set! G4da6@G4cf5@repl G4cf5@repl) (set! G4da5@G4cf3@conditioon-printer G4cf3@conditioon-printer) (set! G4da4@G4cf1@for-each-with-index G4cf1@for-each-with-index) (G2b5a@G29f4@current-precompiled-library-loader G28e8@G281a@load-serialized-library) (set-symbol-value! 'load G4cff@load) (set-symbol-value! 'pre-compile-r6rs-file G4d0b@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d03@eval-top-level) (set-symbol-value! 'int-env-syms G491e@G3008@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2940@G28f8@expanded->core) (set-symbol-value! 'trace-printer G4cf7@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d0e@c) (condition (G4c4e@G4a5e@make-non-continuable-violation) (G4c44@G4a45@make-who-condition 'raise) (G4c08@G49a8@make-message-condition '"returned from non-continuable exception") (G4c3a@G4a2b@make-irritants-condition (list G4d0e@c))))) ((lambda (G4d10@t) (if G4d10@t ((lambda (G4d12@paths) (for-each (lambda (G4d14@path) (if (file-exists? G4d14@path) (G2b55@G29ea@library-path (append (G2b55@G29ea@library-path) (list G4d14@path))) (format (current-error-port) '"** ERROR in environment variable 'MOSH_LOADPATH': directory ~s not exist~%" G4d14@path))) (reverse (string-split G4d12@paths '#\:)))) G4d10@t) (void))) (get-environment-variable '"MOSH_LOADPATH")) (G2b55@G29ea@library-path (append (G2b55@G29ea@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) (display (G2b55@G29ea@library-path) (current-error-port)) ((lambda (G4d16@args G4d17@port) ((lambda (G4d1b@ref) (begin (set! G4d1b@ref (lambda (G4d1e@rtd G4d1f@i G4d20@x) ((lambda (G4d24@val) (if (symbol? G4d24@val) (ungensym G4d24@val) G4d24@val)) ((record-accessor G4d1e@rtd G4d1f@i) G4d20@x)))) (with-exception-handler (lambda (G4d1c@c) (G4cf3@conditioon-printer G4d1c@c (current-error-port))) (lambda () (if (null? G4d16@args) (G4cf5@repl) (G4d0d@load-r6rs-top-level (car G4d16@args) 'load (cdr G4d16@args))))))) '#f)) (G4cf9@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
