;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2604@read-annotated G2606@annotation-stripped G2608@annotation? G260a@annotation-source G260c@annotation-expression G260e@scm->fasl G2610@fasl-save G2612@fasl-load G2614@serialize-library G2616@load-serialized-library G2618@make-record-printer G261a@compile-core G261c@read-library-source-file G261e@make-parameter G2682@file-options-spec) (begin (set! G2604@read-annotated read) (set! G2606@annotation-stripped (lambda (G2683@x) (G260c@annotation-expression G2683@x))) (set! G2608@annotation? (lambda (G2685@x) (source-info G2685@x))) (set! G260a@annotation-source (lambda (G2687@x) (source-info G2687@x))) (set! G260c@annotation-expression (lambda (G2689@x) (if (pair? G2689@x) (cons (car G2689@x) (cdr G2689@x)) (display '"line:46\n")))) (set! G260e@scm->fasl (lambda (G268b@filename) (string-append G268b@filename '".fasl"))) (set! G2610@fasl-save (lambda (G268d@filename G268e@obj) (call-with-port (open-file-output-port G268d@filename) (lambda (G2691@port) ((symbol-value 'fasl-write!) G268e@obj G2691@port))))) (set! G2612@fasl-load (lambda (G2693@filename) (call-with-port (open-file-input-port G2693@filename) (symbol-value 'fasl-read!)))) (set! G2614@serialize-library (lambda (G2695@filename G2696@obj) (begin (format '#t '"serialize-library ~a\n..." G2695@filename) ((lambda (G2699@expanded2core) ((lambda (G269b@compile) ((lambda (G269d@code) ((lambda (G269f@pivot) ((lambda (G26a1@visit) ((lambda () (begin (set-car! G269f@pivot G26a1@visit) ((lambda (G26a3@pivot) ((lambda (G26a5@invoke) ((lambda () (set-car! G26a3@pivot G26a5@invoke)))) (G269b@compile (G2699@expanded2core (car G26a3@pivot))))) (cdr G269f@pivot)))))) (G269b@compile (G2699@expanded2core (car G269f@pivot))))) (cddddr (cddddr G269d@code)))) G2696@obj)) (symbol-value 'compile-w/o-halt))) (symbol-value 'expanded2core)) ((lambda (G26a7@fasl-file) (begin (if (file-exists? G26a7@fasl-file) (delete-file G26a7@fasl-file) (void)) ((call/cc (lambda (G26ab@G26a9) (lambda () (with-exception-handler (lambda (G26ad@c) ((call/cc (lambda (G26af@G26aa) (G26ab@G26a9 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G2695@filename) (if (file-exists? G26a7@fasl-file) (delete-file G26a7@fasl-file) (void)) '#f) (G26af@G26aa (lambda () (raise-continuable G26ad@c)))))))))) (lambda () (begin (G2610@fasl-save G26a7@fasl-file G2696@obj) (display '"OK\n")))))))))) (G260e@scm->fasl G2695@filename))))) (set! G2616@load-serialized-library (lambda (G26b1@filename G26b2@obj) ((lambda (G26b5@fasl-file) (if (and (file-exists? G26b5@fasl-file) ((symbol-value 'file-newer?) G26b5@fasl-file G26b1@filename)) ((lambda (G26b7@expanded2core) ((lambda (G26b9@eval-compiled-core) ((lambda (G26bb@code) ((lambda (G26bd@pivot) ((lambda (G26bf@visit) ((lambda (G26c1@visit-proc) ((lambda () (begin (set-car! G26bd@pivot G26c1@visit-proc) ((lambda (G26c3@pivot) ((lambda (G26c5@invoke) ((lambda () (begin (set-car! G26c3@pivot (lambda () (G26b9@eval-compiled-core G26c5@invoke))) (apply G26b2@obj G26bb@code))))) (car G26c3@pivot))) (cdr G26bd@pivot)) '#t)))) (lambda () (G26b9@eval-compiled-core G26bf@visit)))) (car G26bd@pivot))) (cddddr (cddddr G26bb@code)))) (G2612@fasl-load G26b5@fasl-file))) (symbol-value 'eval-compiled!))) (symbol-value 'expanded2core)) '#f)) (G260e@scm->fasl G26b1@filename)))) (set! G2618@make-record-printer (lambda (G26c7@name G26c8@printer) (lambda G26cb@x (begin (display '"record printer") (for-each display G26cb@x))))) (set! G261a@compile-core (lambda G26cd@x (apply error 'comile-core '"not implementated" G26cd@x))) (set! G261c@read-library-source-file (lambda (G26cf@file-name) (with-input-from-file G26cf@file-name G2604@read-annotated))) (set! G261e@make-parameter (lambda G26df ((lambda (G26e0) (if (= G26e0 '1) (apply (lambda (G26d1@x) (G261e@make-parameter G26d1@x (lambda (G26d3@x) G26d3@x))) G26df) (if (= G26e0 '2) (apply (lambda (G26d5@x G26d6@fender) ((lambda (G26d9@x) (lambda G26dd ((lambda (G26de) (if (= G26de '0) (apply (lambda () G26d9@x) G26dd) (if (= G26de '1) (apply (lambda (G26db@v) (set! G26d9@x (G26d6@fender G26db@v))) G26dd) (error 'apply '"invalid arg count")))) (length G26dd)))) (G26d6@fender G26d5@x))) G26df) (error 'apply '"invalid arg count")))) (length G26df)))) (set! G2682@file-options-spec (lambda (G26e1@x) G26e1@x)) (begin (set! G26f1@G2682@file-options-spec G2682@file-options-spec) (set! G26f0@G261e@make-parameter G261e@make-parameter) (set! G26ef@G261c@read-library-source-file G261c@read-library-source-file) (set! G26ee@G261a@compile-core G261a@compile-core) (set! G26ed@G2618@make-record-printer G2618@make-record-printer) (set! G26ec@G2616@load-serialized-library G2616@load-serialized-library) (set! G26eb@G2614@serialize-library G2614@serialize-library) (set! G26ea@G2612@fasl-load G2612@fasl-load) (set! G26e9@G2610@fasl-save G2610@fasl-save) (set! G26e8@G260e@scm->fasl G260e@scm->fasl) (set! G26e7@G260c@annotation-expression G260c@annotation-expression) (set! G26e6@G260a@annotation-source G260a@annotation-source) (set! G26e5@G2608@annotation? G2608@annotation?) (set! G26e4@G2606@annotation-stripped G2606@annotation-stripped) (set! G26e3@G2604@read-annotated G2604@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G26f6@current-primitive-locations G26f8@mutable? G26fa@rewriter G26fc@expanded->core G26fe@compile-core-expr G2700@pretty-print G2702@compile-core-expr-to-port) (begin (set! G26f6@current-primitive-locations (G26f0@G261e@make-parameter (lambda (G2703@x) '#f) (lambda (G2705@p) G2705@p))) (set! G26f8@mutable? (lambda (G2707@x) (or (pair? G2707@x) (vector? G2707@x) (hashtable? G2707@x)))) (set! G26fa@rewriter (lambda (G2709@quote-hack?) ((lambda (G270c@f) (begin (set! G270c@f (lambda (G270d@x) (if (pair? G270d@x) ((lambda (G270f@t) (if (memv G270f@t '(quote)) (if (and G2709@quote-hack? (G26f8@mutable? (cadr G270d@x))) ((lambda (G2711@g) (begin (set-symbol-value! G2711@g (cadr G270d@x)) G2711@g)) (gensym)) G270d@x) (if (memv G270f@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2713@x) (cons (car G2713@x) (map G270c@f (cdr G2713@x)))) (cdr G270d@x))) (if (memv G270f@t '(lambda)) (cons* 'lambda (cadr G270d@x) (map G270c@f (cddr G270d@x))) (if (memv G270f@t '(letrec)) ((lambda (G2715@bindings G2716@body*) ((lambda (G2719@lhs* G271a@rhs*) (cons* 'letrec (map list G2719@lhs* (map G270c@f G271a@rhs*)) (map G270c@f G2716@body*))) (map car G2715@bindings) (map cadr G2715@bindings))) (cadr G270d@x) (cddr G270d@x)) (if (memv G270f@t '(letrec*)) ((lambda (G271d@bindings G271e@body*) ((lambda (G2721@lhs* G2722@rhs*) (cons* 'letrec* (map list G2721@lhs* (map G270c@f G2722@rhs*)) (map G270c@f G271e@body*))) (map car G271d@bindings) (map cadr G271d@bindings))) (cadr G270d@x) (cddr G270d@x)) (if (memv G270f@t '(library-letrec*)) ((lambda (G2725@name G2726@x) ((lambda (G2729@bindings G272a@body*) ((lambda (G272d@lhs* G272e@lhs** G272f@rhs*) (cons* 'library-letrec* G2725@name (map list G272d@lhs* G272e@lhs** (map G270c@f G272f@rhs*)) (map G270c@f G272a@body*))) (map car G2729@bindings) (map cadr G2729@bindings) (map caddr G2729@bindings))) (cadr G2726@x) (cddr G2726@x))) (cadr G270d@x) (cdr G270d@x)) (if (memv G270f@t '(begin)) (cons 'begin (map G270c@f (cdr G270d@x))) (if (memv G270f@t '(set!)) (list 'set! (cadr G270d@x) (G270c@f (caddr G270d@x))) (if (memv G270f@t '(primitive)) ((lambda (G2733@op) ((lambda (G2735@t) (if G2735@t ((lambda (G2737@loc) G2737@loc) G2735@t) G2733@op)) ((G26f6@current-primitive-locations) G2733@op))) (cadr G270d@x)) (if (memv G270f@t '(define)) G270d@x (if (list? G270d@x) (map G270c@f G270d@x) (error 'rewrite '"invalid form ~s ~s" G270d@x (list? G270d@x)))))))))))))) (car G270d@x)) G270d@x))) G270c@f)) '#f))) (set! G26fc@expanded->core (lambda (G2739@x) ((G26fa@rewriter '#f) G2739@x))) (set! G26fe@compile-core-expr (lambda (G273b@x) ((G26fa@rewriter '#f) G273b@x))) (set! G2700@pretty-print write) (set! G2702@compile-core-expr-to-port (lambda (G273d@x G273e@p) (G2700@pretty-print ((G26fa@rewriter '#f) G273d@x) G273e@p))) (begin (set! G2747@G2702@compile-core-expr-to-port G2702@compile-core-expr-to-port) (set! G2746@G2700@pretty-print G2700@pretty-print) (set! G2745@G26fe@compile-core-expr G26fe@compile-core-expr) (set! G2744@G26fc@expanded->core G26fc@expanded->core) (set! G2743@G26fa@rewriter G26fa@rewriter) (set! G2742@G26f8@mutable? G26f8@mutable?) (set! G2741@G26f6@current-primitive-locations G26f6@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2796@make-collection G2798@current-library-collection G279e@G2799 G27a0@G279b G27a2@G279a G27a5@library? G27a7@make-library G27a9@library-id G27ab@library-name G27ad@library-version G27af@library-imp* G27b1@library-vis* G27b3@library-inv* G27b5@library-subst G27b7@library-env G27b9@library-visit-state G27bb@library-invoke-state G27bd@library-visit-code G27bf@library-invoke-code G27c1@library-visible? G27c3@library-source-file-name G27c5@set-library-id! G27c7@set-library-name! G27c9@set-library-version! G27cb@set-library-imp*! G27cd@set-library-vis*! G27cf@set-library-inv*! G27d1@set-library-subst! G27d3@set-library-env! G27d5@set-library-visit-state! G27d7@set-library-invoke-state! G27d9@set-library-visit-code! G27db@set-library-invoke-code! G27dd@set-library-visible?! G27df@set-library-source-file-name! G27e1@rp G27e3@find-dependencies G27e5@find-library-by G27e7@library-path G27e9@library-extensions G27eb@library-name->file-name G27ed@file-locator G27ef@serialize-all G27f1@current-precompiled-library-loader G27f3@try-load-from-file G27f5@library-loader G27f7@current-library-expander G27f9@external-pending-libraries G27fb@find-external-library G27fd@find-library-by-name G27ff@library-exists? G2801@find-library-by-spec/die G2803@label->binding-table G2805@install-library-record G2807@install-library G2809@imported-label->binding G280b@invoke-library G280d@visit-library G280f@invoke-library-by-spec G2811@installed-libraries G2813@library-spec) (begin (set! G2796@make-collection (lambda () ((lambda (G2814@set) ((lambda (G2817@set-cons) (begin (set! G2817@set-cons (lambda (G281c@x G281d@ls) (if (memq G281c@x G281d@ls) G281d@ls (cons G281c@x G281d@ls)))) (lambda G281a ((lambda (G281b) (if (= G281b '0) (apply (lambda () G2814@set) G281a) (if (= G281b '1) (apply (lambda (G2818@x) (set! G2814@set (G2817@set-cons G2818@x G2814@set))) G281a) (error 'apply '"invalid arg count")))) (length G281a))))) '#f)) '()))) (set! G2798@current-library-collection (G26f0@G261e@make-parameter (G2796@make-collection) (lambda (G2820@x) (begin (if (not (procedure? G2820@x)) (assertion-violation 'current-library-collection '"not a procedure" G2820@x) (void)) G2820@x)))) (set! G279e@G2799 (make-record-type-descriptor 'library '#f 'G279c '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G27a0@G279b '#f) (set! G27a2@G279a (make-record-constructor-descriptor G279e@G2799 '#f G27a0@G279b)) (set! G27a5@library? (record-predicate G279e@G2799)) (set! G27a7@make-library (record-constructor G27a2@G279a)) (set! G27a9@library-id (record-accessor G279e@G2799 '0)) (set! G27ab@library-name (record-accessor G279e@G2799 '1)) (set! G27ad@library-version (record-accessor G279e@G2799 '2)) (set! G27af@library-imp* (record-accessor G279e@G2799 '3)) (set! G27b1@library-vis* (record-accessor G279e@G2799 '4)) (set! G27b3@library-inv* (record-accessor G279e@G2799 '5)) (set! G27b5@library-subst (record-accessor G279e@G2799 '6)) (set! G27b7@library-env (record-accessor G279e@G2799 '7)) (set! G27b9@library-visit-state (record-accessor G279e@G2799 '8)) (set! G27bb@library-invoke-state (record-accessor G279e@G2799 '9)) (set! G27bd@library-visit-code (record-accessor G279e@G2799 '10)) (set! G27bf@library-invoke-code (record-accessor G279e@G2799 '11)) (set! G27c1@library-visible? (record-accessor G279e@G2799 '12)) (set! G27c3@library-source-file-name (record-accessor G279e@G2799 '13)) (set! G27c5@set-library-id! (record-mutator G279e@G2799 '0)) (set! G27c7@set-library-name! (record-mutator G279e@G2799 '1)) (set! G27c9@set-library-version! (record-mutator G279e@G2799 '2)) (set! G27cb@set-library-imp*! (record-mutator G279e@G2799 '3)) (set! G27cd@set-library-vis*! (record-mutator G279e@G2799 '4)) (set! G27cf@set-library-inv*! (record-mutator G279e@G2799 '5)) (set! G27d1@set-library-subst! (record-mutator G279e@G2799 '6)) (set! G27d3@set-library-env! (record-mutator G279e@G2799 '7)) (set! G27d5@set-library-visit-state! (record-mutator G279e@G2799 '8)) (set! G27d7@set-library-invoke-state! (record-mutator G279e@G2799 '9)) (set! G27d9@set-library-visit-code! (record-mutator G279e@G2799 '10)) (set! G27db@set-library-invoke-code! (record-mutator G279e@G2799 '11)) (set! G27dd@set-library-visible?! (record-mutator G279e@G2799 '12)) (set! G27df@set-library-source-file-name! (record-mutator G279e@G2799 '13)) (set! G27e1@rp (G26ed@G2618@make-record-printer 'library (lambda (G2822@x G2823@p G2824@wr) (begin (if (not (G27a5@library? G2822@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G27ad@library-version G2822@x)) (G27ab@library-name G2822@x) (append (G27ab@library-name G2822@x) (list (G27ad@library-version G2822@x))))) G2823@p))))) (set! G27e3@find-dependencies (lambda (G2828@ls) (if (null? G2828@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G27e5@find-library-by (lambda (G282a@pred) ((letrec ((G282c@f (lambda (G282e@ls) (if (null? G282e@ls) '#f (if (G282a@pred (car G282e@ls)) (car G282e@ls) (G282c@f (cdr G282e@ls))))))) G282c@f) ((G2798@current-library-collection))))) (set! G27e7@library-path (G26f0@G261e@make-parameter '(".") (lambda (G2830@x) (if (and (list? G2830@x) (for-all string? G2830@x)) (map (lambda (G2832@x) G2832@x) G2830@x) (assertion-violation 'library-path '"not a list of strings" G2830@x))))) (set! G27e9@library-extensions (G26f0@G261e@make-parameter '(".sls" ".ss" ".scm") (lambda (G2834@x) (if (and (list? G2834@x) (for-all string? G2834@x)) (map (lambda (G2836@x) G2836@x) G2834@x) (assertion-violation 'library-extensions '"not a list of strings" G2834@x))))) (set! G27eb@library-name->file-name (lambda (G2838@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G283c@G283a G283d@G283b) ((lambda (G2840@extract G2841@p) ((lambda (G2845@display-hex) (begin (set! G2845@display-hex (lambda (G284e@n) (if (<= '0 G284e@n '9) (display G284e@n G2841@p) (display (integer->char (+ (char->integer '#\A) (- G284e@n '10))) G2841@p)))) (begin ((letrec ((G2846@f (lambda (G2848@ls) (if (not (null? G2848@ls)) (begin (display '"/" G2841@p) (for-each (lambda (G284a@c) (if (or (char<=? '#\a G284a@c '#\z) (char<=? '#\A G284a@c '#\Z) (char<=? '#\0 G284a@c '#\9) (memv G284a@c '(#\- #\. #\_ #\~))) (display G284a@c G2841@p) (begin (display '"%" G2841@p) ((lambda (G284c@n) (begin (G2845@display-hex (quotient G284c@n '16)) (G2845@display-hex (remainder G284c@n '16)))) (char->integer G284a@c))))) (string->list (symbol->string (car G2848@ls)))) (G2846@f (cdr G2848@ls))) (void))))) G2846@f) G2838@x) (G2840@extract)))) '#f)) G283d@G283b G283c@G283a))))) (set! G27ed@file-locator (G26f0@G261e@make-parameter (lambda (G2850@x) ((lambda (G2852@str) ((letrec ((G2854@f (lambda (G2856@ls G2857@exts G2858@failed-list) (if (null? G2856@ls) ((lambda () ((lambda (G2864@G285f G2866@G2861 G2868@G2860 G286b@G285e G286d@make-library-resolution-condition G286f@G285c G2871@G285d G2873@library-resolution-condition? G2875@condition-library G2877@condition-files) (begin (set! G2864@G285f (make-record-type-descriptor '&library-resolution G49c8@G471b@&condition-rtd 'G2862 '#f '#f '#((immutable library) (immutable files)))) (set! G2866@G2861 '#f) (set! G2868@G2860 (make-record-constructor-descriptor G2864@G285f G49c9@G471d@&condition-rcd G2866@G2861)) (set! G286b@G285e (record-predicate G2864@G285f)) (set! G286d@make-library-resolution-condition (record-constructor G2868@G2860)) (set! G286f@G285c (record-accessor G2864@G285f '0)) (set! G2871@G285d (record-accessor G2864@G285f '1)) (set! G2873@library-resolution-condition? (condition-predicate G2864@G285f)) (set! G2875@condition-library (condition-accessor G2864@G285f G286f@G285c)) (set! G2877@condition-files (condition-accessor G2864@G285f G2871@G285d)) (raise (condition (G49e8@G47b1@make-error) (G4a0a@G480b@make-who-condition 'expander) (G49ce@G476e@make-message-condition '"cannot locate library in library-path") (G286d@make-library-resolution-condition G2850@x (reverse G2858@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2857@exts) (G2854@f (cdr G2856@ls) (G27e9@library-extensions) G2858@failed-list) ((lambda (G2878@name) (if (file-exists? G2878@name) G2878@name (G2854@f G2856@ls (cdr G2857@exts) (cons G2878@name G2858@failed-list)))) (string-append (car G2856@ls) G2852@str (car G2857@exts)))))))) G2854@f) (G27e7@library-path) (G27e9@library-extensions) '())) (G27eb@library-name->file-name G2850@x))) (lambda (G287a@f) (if (procedure? G287a@f) G287a@f (assertion-violation 'file-locator '"not a procedure" G287a@f))))) (set! G27ef@serialize-all (lambda (G287c@serialize G287d@compile) ((lambda (G2881@library-desc) (begin (set! G2881@library-desc (lambda (G2884@x) (list (G27a9@library-id G2884@x) (G27ab@library-name G2884@x)))) (for-each (lambda (G2882@x) (if (G27c3@library-source-file-name G2882@x) (G287c@serialize (G27c3@library-source-file-name G2882@x) (list (G27a9@library-id G2882@x) (G27ab@library-name G2882@x) (G27ad@library-version G2882@x) (map G2881@library-desc (G27af@library-imp* G2882@x)) (map G2881@library-desc (G27b1@library-vis* G2882@x)) (map G2881@library-desc (G27b3@library-inv* G2882@x)) (G27b5@library-subst G2882@x) (G27b7@library-env G2882@x) (G287d@compile (G27bd@library-visit-code G2882@x)) (G287d@compile (G27bf@library-invoke-code G2882@x)) (G27c1@library-visible? G2882@x))) (void))) ((G2798@current-library-collection))))) '#f))) (set! G27f1@current-precompiled-library-loader (G26f0@G261e@make-parameter (lambda (G2886@filename G2887@sk) '#f))) (set! G27f3@try-load-from-file (lambda (G288a@filename) ((G27f1@current-precompiled-library-loader) G288a@filename (lambda G28b0 ((lambda (G28b1) (if (= G28b1 '11) (apply (lambda (G288c@id G288d@name G288e@ver G288f@imp* G2890@vis* G2891@inv* G2892@exp-subst G2893@exp-env G2894@visit-proc G2895@invoke-proc G2896@visible?) ((letrec ((G28a2@f (lambda (G28a4@deps) (if (null? G28a4@deps) (begin (G2807@install-library G288c@id G288d@name G288e@ver G288f@imp* G2890@vis* G2891@inv* G2892@exp-subst G2893@exp-env G2894@visit-proc G2895@invoke-proc '#f '#f G2896@visible? '#f) '#t) ((lambda (G28a6@d) ((lambda (G28a8@label G28a9@dname) ((lambda (G28ac@l) (if (and (G27a5@library? G28ac@l) (eq? G28a8@label (G27a9@library-id G28ac@l))) (G28a2@f (cdr G28a4@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G288d@name G28a9@dname G288a@filename G28ac@l G28a8@label (G27a9@library-id G28ac@l)) '#f))) (G27fd@find-library-by-name G28a9@dname))) (car G28a6@d) (cadr G28a6@d))) (car G28a4@deps)))))) G28a2@f) (append G288f@imp* G2890@vis* G2891@inv*))) G28b0) (if (>= G28b1 '0) (apply (lambda G28ae@others '#f) G28b0) (error 'apply '"invalid arg count")))) (length G28b0)))))) (set! G27f5@library-loader (G26f0@G261e@make-parameter (lambda (G28b2@x) ((lambda (G28b4@file-name) (if (not G28b4@file-name) (assertion-violation '#f '"cannot file library" G28b2@x) (or (G27f3@try-load-from-file G28b4@file-name) ((G27f7@current-library-expander) (G26ef@G261c@read-library-source-file G28b4@file-name) G28b4@file-name (lambda (G28b6@name) (if (not (fast-equal? G28b6@name G28b2@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G28ba@G28b8 G28bb@G28b9) ((lambda (G28be@e G28bf@p) (begin (display '"expected to find library " G28bf@p) (write G28b2@x G28bf@p) (display '" in file " G28bf@p) (display G28b4@file-name G28bf@p) (display '", found " G28bf@p) (write G28b6@name G28bf@p) (display '" instead" G28bf@p) (G28be@e))) G28bb@G28b9 G28ba@G28b8)))) (void))))))) ((G27ed@file-locator) G28b2@x))) (lambda (G28c2@f) (if (procedure? G28c2@f) G28c2@f (assertion-violation 'library-locator '"not a procedure" G28c2@f))))) (set! G27f7@current-library-expander (G26f0@G261e@make-parameter (lambda (G28c4@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G28c6@f) (if (procedure? G28c6@f) G28c6@f (assertion-violation 'library-expander '"not a procedure" G28c6@f))))) (set! G27f9@external-pending-libraries (G26f0@G261e@make-parameter '())) (set! G27fb@find-external-library (lambda (G28c8@name) (begin (if (member G28c8@name (G27f9@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G28c8@name) (void)) ((lambda (G28cc@G28ca G28cd@G28cb) ((lambda (G28d0@swap) (dynamic-wind G28d0@swap (lambda () (begin ((G27f5@library-loader) G28c8@name) (or (G27e5@find-library-by (lambda (G28d2@x) (fast-equal? (G27ab@library-name G28d2@x) G28c8@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G28c8@name)))) G28d0@swap)) (lambda () ((lambda (G28d4@t) (begin (G28cc@G28ca G28cd@G28cb) (set! G28cd@G28cb G28d4@t))) (G28cc@G28ca))))) G27f9@external-pending-libraries (cons G28c8@name (G27f9@external-pending-libraries)))))) (set! G27fd@find-library-by-name (lambda (G28d6@name) (or (G27e5@find-library-by (lambda (G28d8@x) (fast-equal? (G27ab@library-name G28d8@x) G28d6@name))) (G27fb@find-external-library G28d6@name)))) (set! G27ff@library-exists? (lambda (G28da@name) (and (G27e5@find-library-by (lambda (G28dc@x) (fast-equal? (G27ab@library-name G28dc@x) G28da@name))) '#t))) (set! G2801@find-library-by-spec/die (lambda (G28de@spec) ((lambda (G28e0@id) (or (G27e5@find-library-by (lambda (G28e2@x) (eq? G28e0@id (G27a9@library-id G28e2@x)))) (assertion-violation '#f '"cannot find library with required spec" G28de@spec))) (car G28de@spec)))) (set! G2803@label->binding-table (make-eq-hashtable)) (set! G2805@install-library-record (lambda (G28e4@lib) (begin ((lambda (G28e6@exp-env) (for-each (lambda (G28e8@x) ((lambda (G28ea@label G28eb@binding) ((lambda (G28ee@binding) (hashtable-set! G2803@label->binding-table G28ea@label G28ee@binding)) ((lambda (G28f0@t) (if (memv G28f0@t '(global)) (cons 'global (cons G28e4@lib (cdr G28eb@binding))) (if (memv G28f0@t '(global-macro)) (cons 'global-macro (cons G28e4@lib (cdr G28eb@binding))) (if (memv G28f0@t '(global-macro!)) (cons 'global-macro! (cons G28e4@lib (cdr G28eb@binding))) G28eb@binding)))) (car G28eb@binding)))) (car G28e8@x) (cdr G28e8@x))) G28e6@exp-env)) (G27b7@library-env G28e4@lib)) ((G2798@current-library-collection) G28e4@lib)))) (set! G2807@install-library (lambda (G28f2@id G28f3@name G28f4@ver G28f5@imp* G28f6@vis* G28f7@inv* G28f8@exp-subst G28f9@exp-env G28fa@visit-proc G28fb@invoke-proc G28fc@visit-code G28fd@invoke-code G28fe@visible? G28ff@source-file-name) ((lambda (G290e@imp-lib* G290f@vis-lib* G2910@inv-lib*) (begin (if (not (and (symbol? G28f2@id) (list? G28f3@name) (list? G28f4@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G28f2@id G28f3@name G28f4@ver) (void)) (if (G27ff@library-exists? G28f3@name) (assertion-violation 'install-library '"library is already installed" G28f3@name) (void)) ((lambda (G2914@lib) (G2805@install-library-record G2914@lib)) (G27a7@make-library G28f2@id G28f3@name G28f4@ver G290e@imp-lib* G290f@vis-lib* G2910@inv-lib* G28f8@exp-subst G28f9@exp-env G28fa@visit-proc G28fb@invoke-proc G28fc@visit-code G28fd@invoke-code G28fe@visible? G28ff@source-file-name)))) (map G2801@find-library-by-spec/die G28f5@imp*) (map G2801@find-library-by-spec/die G28f6@vis*) (map G2801@find-library-by-spec/die G28f7@inv*)))) (set! G2809@imported-label->binding (lambda (G2916@lab) (hashtable-ref G2803@label->binding-table G2916@lab '#f))) (set! G280b@invoke-library (lambda (G2918@lib) ((lambda (G291a@invoke) (if (procedure? G291a@invoke) (begin (G27d7@set-library-invoke-state! G2918@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2918@lib))) (for-each G280b@invoke-library (G27b3@library-inv* G2918@lib)) (G27d7@set-library-invoke-state! G2918@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2918@lib))) (G291a@invoke) (G27d7@set-library-invoke-state! G2918@lib '#t)) (void))) (G27bb@library-invoke-state G2918@lib)))) (set! G280d@visit-library (lambda (G291c@lib) ((lambda (G291e@visit) (if (procedure? G291e@visit) (begin (G27d5@set-library-visit-state! G291c@lib (lambda () (assertion-violation 'visit '"circularity detected" G291c@lib))) (for-each G280b@invoke-library (G27b1@library-vis* G291c@lib)) (G27d5@set-library-visit-state! G291c@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G291c@lib))) (G291e@visit) (G27d5@set-library-visit-state! G291c@lib '#t)) (void))) (G27b9@library-visit-state G291c@lib)))) (set! G280f@invoke-library-by-spec (lambda (G2920@spec) (G280b@invoke-library (G2801@find-library-by-spec/die G2920@spec)))) (set! G2811@installed-libraries (lambda G2928 ((lambda (G2929) (if (= G2929 '1) (apply (lambda (G2922@all?) ((letrec ((G2924@f (lambda (G2926@ls) (if (null? G2926@ls) '() (if (or G2922@all? (G27c1@library-visible? (car G2926@ls))) (cons (car G2926@ls) (G2924@f (cdr G2926@ls))) (G2924@f (cdr G2926@ls))))))) G2924@f) ((G2798@current-library-collection)))) G2928) (if (= G2929 '0) (apply (lambda () (G2811@installed-libraries '#f)) G2928) (error 'apply '"invalid arg count")))) (length G2928)))) (set! G2813@library-spec (lambda (G292a@x) (begin (if (not (G27a5@library? G292a@x)) (assertion-violation 'library-spec '"not a library" G292a@x) (void)) (list (G27a9@library-id G292a@x) (G27ab@library-name G292a@x) (G27ad@library-version G292a@x))))) (begin (set! G2968@G2813@library-spec G2813@library-spec) (set! G2967@G2811@installed-libraries G2811@installed-libraries) (set! G2966@G280f@invoke-library-by-spec G280f@invoke-library-by-spec) (set! G2965@G280d@visit-library G280d@visit-library) (set! G2964@G280b@invoke-library G280b@invoke-library) (set! G2963@G2809@imported-label->binding G2809@imported-label->binding) (set! G2962@G2807@install-library G2807@install-library) (set! G2961@G2805@install-library-record G2805@install-library-record) (set! G2960@G2803@label->binding-table G2803@label->binding-table) (set! G295f@G2801@find-library-by-spec/die G2801@find-library-by-spec/die) (set! G295e@G27ff@library-exists? G27ff@library-exists?) (set! G295d@G27fd@find-library-by-name G27fd@find-library-by-name) (set! G295c@G27fb@find-external-library G27fb@find-external-library) (set! G295b@G27f9@external-pending-libraries G27f9@external-pending-libraries) (set! G295a@G27f7@current-library-expander G27f7@current-library-expander) (set! G2959@G27f5@library-loader G27f5@library-loader) (set! G2958@G27f3@try-load-from-file G27f3@try-load-from-file) (set! G2957@G27f1@current-precompiled-library-loader G27f1@current-precompiled-library-loader) (set! G2956@G27ef@serialize-all G27ef@serialize-all) (set! G2955@G27ed@file-locator G27ed@file-locator) (set! G2954@G27eb@library-name->file-name G27eb@library-name->file-name) (set! G2953@G27e9@library-extensions G27e9@library-extensions) (set! G2952@G27e7@library-path G27e7@library-path) (set! G2951@G27e5@find-library-by G27e5@find-library-by) (set! G2950@G27e3@find-dependencies G27e3@find-dependencies) (set! G294f@G27e1@rp G27e1@rp) (set! G294e@G27df@set-library-source-file-name! G27df@set-library-source-file-name!) (set! G294d@G27dd@set-library-visible?! G27dd@set-library-visible?!) (set! G294c@G27db@set-library-invoke-code! G27db@set-library-invoke-code!) (set! G294b@G27d9@set-library-visit-code! G27d9@set-library-visit-code!) (set! G294a@G27d7@set-library-invoke-state! G27d7@set-library-invoke-state!) (set! G2949@G27d5@set-library-visit-state! G27d5@set-library-visit-state!) (set! G2948@G27d3@set-library-env! G27d3@set-library-env!) (set! G2947@G27d1@set-library-subst! G27d1@set-library-subst!) (set! G2946@G27cf@set-library-inv*! G27cf@set-library-inv*!) (set! G2945@G27cd@set-library-vis*! G27cd@set-library-vis*!) (set! G2944@G27cb@set-library-imp*! G27cb@set-library-imp*!) (set! G2943@G27c9@set-library-version! G27c9@set-library-version!) (set! G2942@G27c7@set-library-name! G27c7@set-library-name!) (set! G2941@G27c5@set-library-id! G27c5@set-library-id!) (set! G2940@G27c3@library-source-file-name G27c3@library-source-file-name) (set! G293f@G27c1@library-visible? G27c1@library-visible?) (set! G293e@G27bf@library-invoke-code G27bf@library-invoke-code) (set! G293d@G27bd@library-visit-code G27bd@library-visit-code) (set! G293c@G27bb@library-invoke-state G27bb@library-invoke-state) (set! G293b@G27b9@library-visit-state G27b9@library-visit-state) (set! G293a@G27b7@library-env G27b7@library-env) (set! G2939@G27b5@library-subst G27b5@library-subst) (set! G2938@G27b3@library-inv* G27b3@library-inv*) (set! G2937@G27b1@library-vis* G27b1@library-vis*) (set! G2936@G27af@library-imp* G27af@library-imp*) (set! G2935@G27ad@library-version G27ad@library-version) (set! G2934@G27ab@library-name G27ab@library-name) (set! G2933@G27a9@library-id G27a9@library-id) (set! G2932@G27a7@make-library G27a7@make-library) (set! G2931@G27a5@library? G27a5@library?) (set! G2930@G27a2@G279a G27a2@G279a) (set! G292f@G27a0@G279b G27a0@G279b) (set! G292e@G279e@G2799 G279e@G2799) (set! G292d@G2798@current-library-collection G2798@current-library-collection) (set! G292c@G2796@make-collection G2796@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G296b@build-global-define G29dc@build-lambda G29de@build-case-lambda G29e0@build-let G2a0e@build-sequence G2a10@build-void G2a12@build-letrec G2a14@build-letrec* G2a16@build-library-letrec* G2a18@build-receive) (begin (set! G296b@build-global-define (lambda (G2a19@x) (G2a10@build-void))) (set! G29dc@build-lambda (lambda (G2a1b@ae G2a1c@vars G2a1d@exp) (list 'lambda G2a1c@vars G2a1d@exp))) (set! G29de@build-case-lambda (lambda (G2a21@ae G2a22@vars* G2a23@exp*) ((lambda (G2a28@build-error G2a2a@build-pred G2a2c@build-apply G2a2e@expand-case-lambda) (begin (set! G2a28@build-error (lambda (G2a5d@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2a2a@build-pred (lambda (G2a47@ae G2a48@n G2a49@vars) (call-with-values (lambda () ((letrec ((G2a4f@f (lambda (G2a51@vars G2a52@count) (if (pair? G2a51@vars) (G2a4f@f (cdr G2a51@vars) (+ G2a52@count '1)) (if (null? G2a51@vars) (values G2a52@count '=) (values G2a52@count '>=)))))) G2a4f@f) G2a49@vars '0)) (lambda (G2a55@G2a4d G2a56@G2a4e) ((lambda (G2a59@pred G2a5a@count) (list (list 'primitive G2a59@pred) G2a48@n (list 'quote G2a5a@count))) G2a56@G2a4e G2a55@G2a4d))))) (set! G2a2c@build-apply (lambda (G2a3f@ae G2a40@g G2a41@vars G2a42@exp) (list '(primitive apply) (G29dc@build-lambda G2a3f@ae G2a41@vars G2a42@exp) G2a40@g))) (set! G2a2e@expand-case-lambda (lambda (G2a2f@ae G2a30@vars G2a31@exp*) ((lambda (G2a35@g G2a36@n) (list 'lambda G2a35@g (G29e0@build-let G2a2f@ae (list G2a36@n) (list (list '(primitive length) G2a35@g)) ((letrec ((G2a39@f (lambda (G2a3b@vars* G2a3c@exp*) (if (null? G2a3b@vars*) (G2a28@build-error G2a2f@ae) (list 'if (G2a2a@build-pred G2a2f@ae G2a36@n (car G2a3b@vars*)) (G2a2c@build-apply G2a2f@ae G2a35@g (car G2a3b@vars*) (car G2a3c@exp*)) (G2a39@f (cdr G2a3b@vars*) (cdr G2a3c@exp*))))))) G2a39@f) G2a22@vars* G2a31@exp*)))) (gensym) (gensym)))) (if (= (length G2a23@exp*) '1) (G29dc@build-lambda G2a21@ae (car G2a22@vars*) (car G2a23@exp*)) (G2a2e@expand-case-lambda G2a21@ae G2a22@vars* G2a23@exp*)))) '#f '#f '#f '#f))) (set! G29e0@build-let (lambda (G2a5f@ae G2a60@lhs* G2a61@rhs* G2a62@body) (cons (G29dc@build-lambda G2a5f@ae G2a60@lhs* G2a62@body) G2a61@rhs*))) (set! G2a0e@build-sequence (lambda (G2a67@ae G2a68@exps) ((letrec ((G2a6b@loop (lambda (G2a6d@exps) (if (null? (cdr G2a6d@exps)) (car G2a6d@exps) (if (equal? (car G2a6d@exps) (G2a10@build-void)) (G2a6b@loop (cdr G2a6d@exps)) (cons 'begin G2a6d@exps)))))) G2a6b@loop) G2a68@exps))) (set! G2a10@build-void (lambda () '((primitive void)))) (set! G2a12@build-letrec (lambda (G2a6f@ae G2a70@vars G2a71@val-exps G2a72@body-exp) (if (null? G2a70@vars) G2a72@body-exp (list 'letrec (map list G2a70@vars G2a71@val-exps) G2a72@body-exp)))) (set! G2a14@build-letrec* (lambda (G2a77@ae G2a78@vars G2a79@val-exps G2a7a@body-exp) (if (null? G2a78@vars) G2a7a@body-exp (G29e0@build-let G2a77@ae G2a78@vars (map (lambda (G2a7f@x) (list 'quote '#f)) G2a78@vars) (G2a0e@build-sequence G2a77@ae (append (map (lambda (G2a81@lhs G2a82@rhs) (list 'set! G2a81@lhs G2a82@rhs)) G2a78@vars G2a79@val-exps) (list G2a7a@body-exp))))))) (set! G2a16@build-library-letrec* (lambda (G2a85@ae G2a86@name G2a87@vars G2a88@locs G2a89@val-exps G2a8a@body-exp) (list 'library-letrec* G2a86@name (map list G2a87@vars G2a88@locs G2a89@val-exps) G2a8a@body-exp))) (set! G2a18@build-receive (lambda (G2a91@ae G2a92@vars G2a93@producer G2a94@body*) (begin (display '"************** in ") (cons 'receive (cons G2a92@vars (cons G2a93@producer G2a94@body*)))))) (begin (set! G2aa2@G2a18@build-receive G2a18@build-receive) (set! G2aa1@G2a16@build-library-letrec* G2a16@build-library-letrec*) (set! G2aa0@G2a14@build-letrec* G2a14@build-letrec*) (set! G2a9f@G2a12@build-letrec G2a12@build-letrec) (set! G2a9e@G2a10@build-void G2a10@build-void) (set! G2a9d@G2a0e@build-sequence G2a0e@build-sequence) (set! G2a9c@G29e0@build-let G29e0@build-let) (set! G2a9b@G29de@build-case-lambda G29de@build-case-lambda) (set! G2a9a@G29dc@build-lambda G29dc@build-lambda) (set! G2a99@G296b@build-global-define G296b@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2ab1@set-cons G2ab3@set-union G2ab8@top-mark* G2aba@top-marked? G2abc@gen-lexical G2abe@gen-global G2ac0@gen-label G2ac2@gen-top-level-label G2ac4@gen-define-label+loc G2ac6@gen-define-label G2acc@G2ac7 G2ace@G2ac9 G2ad0@G2ac8 G2ad3@rib? G2ad5@make-rib G2ad7@rib-sym* G2ad9@rib-mark** G2adb@rib-label* G2add@rib-sealed/freq G2adf@rib-cache G2ae1@set-rib-sym*! G2ae3@set-rib-mark**! G2ae5@set-rib-label*! G2ae7@set-rib-sealed/freq! G2ae9@set-rib-cache! G2aeb@make-empty-rib G2aed@extend-rib! G2aef@extend-rib/nc! G2af1@make-rib-map G2af3@seal-rib! G2af5@unseal-rib! G2af7@make-full-rib G2afd@G2af8 G2aff@G2afa G2b01@G2af9 G2b04@stx? G2b06@make-stx G2b08@stx-expr G2b0a@stx-mark* G2b0c@stx-subst* G2b0e@stx-ae* G2b10@set-stx-expr! G2b12@set-stx-mark*! G2b14@set-stx-subst*! G2b16@set-stx-ae*! G2b18@rp G2b1a@datum->stx G2b1c@gen-mark G2b1e@anti-mark G2b20@anti-mark? G2b22@join-wraps G2b24@mkstx G2b26@add-mark G2b28@add-subst G2b2a@syntax-kind? G2b2c@syntax-vector->list G2b2e@syntax-pair? G2b30@syntax-vector? G2b32@syntax-null? G2b34@syntax-list? G2b36@syntax-car G2b38@syntax-cdr G2b3a@syntax->list G2b3c@id? G2b3e@id->sym G2b40@same-marks? G2b42@bound-id=? G2b44@free-id=? G2b46@valid-bound-ids? G2b48@distinct-bound-ids? G2b4a@bound-id-member? G2b4c@self-evaluating? G2b4e@strip-annotations G2b50@strip G2b52@stx->datum G2b54@same-marks*? G2b56@id->label G2b58@id->real-label G2b5a@label->binding G2b5c@make-binding G2b5e@binding-type G2b60@binding-value G2b62@raise-unbound-error G2b64@syntax-type G2b72@sanitize-binding G2b74@make-variable-transformer G2b76@variable-transformer? G2b78@variable-transformer-procedure G2b7a@make-eval-transformer G2cb1@parse-define G2cb3@parse-define-syntax G2cb5@scheme-stx-hashtable G2cb7@scheme-stx G2cb9@lexical-var G2cbb@lexical-mutable? G2cbd@set-lexical-mutable! G2cbf@add-lexical G2cc1@add-lexicals G2cc3@letrec-helper G2cc5@letrec-transformer G2cc7@letrec*-transformer G2cc9@fluid-let-syntax-transformer G2ccb@type-descriptor-transformer G2ccd@record-type-descriptor-transformer G2ccf@record-constructor-descriptor-transformer G2cd1@when-macro G2cd3@unless-macro G2cd5@if-transformer G2cd7@and-transformer G2cd9@or-transformer G2cdb@case-macro G2cdd@quote-transformer G2cdf@case-lambda-transformer G2ce1@lambda-transformer G2ce3@bless G2ce5@with-syntax-macro G2ce7@invalid-fmls-error G2ce9@let-macro G2ceb@let-values-macro G2ced@let*-values-macro G2cef@trace-lambda-macro G2cf1@trace-define-macro G2cf3@trace-define-syntax-macro G2cf5@trace-let/rec-syntax G2cf7@trace-let-syntax-macro G2cf9@trace-letrec-syntax-macro G2cfb@guard-macro G2cfd@define-enumeration-macro G2cff@time-macro G2d01@delay-macro G2d03@assert-macro G2d05@endianness-macro G2d07@identifier-syntax-macro G2d09@do-macro G2d0b@let*-macro G2d0d@or-macro G2d0f@and-macro G2d11@cond-macro G2d13@do-include G2d15@include-macro G2d17@include-into-macro G2d19@syntax-rules-macro G2d1b@quasiquote-macro G2d1d@quasisyntax-macro G2d1f@define-struct-macro G2d21@define-record-type-macro G2d23@define-condition-type-macro G2d25@incorrect-usage-macro G2d27@parameterize-macro G2d29@foreign-call-transformer G2d2b@convert-pattern G2d2d@syntax-dispatch G2d2f@ellipsis? G2d31@underscore? G2d33@verify-literals G2d35@syntax-case-transformer G2d37@ellipsis-map G2d39@syntax-transformer G2d3b@core-macro-transformer G2d3d@file-options-macro G2d3f@symbol-macro G2d41@macro-transformer G2d43@local-macro-transformer G2d45@do-macro-call G2d47@chi-macro G2d49@chi-local-macro G2d4b@chi-global-macro G2d4d@chi-expr* G2d4f@chi-application G2d51@chi-expr G2d53@chi-set! G2d55@verify-formals G2d57@chi-lambda-clause G2d59@chi-lambda-clause* G2d5b@chi-defun G2d5d@chi-rhs G2d5f@expand-interaction-rhs*/init* G2d61@chi-rhs* G2d63@find-bound=? G2d65@find-dups G2d67@chi-internal G2d69@parse-module G2d6f@G2d6a G2d71@G2d6c G2d73@G2d6b G2d76@module-interface? G2d78@make-module-interface G2d7a@module-interface-first-mark G2d7c@module-interface-exp-id-vec G2d7e@module-interface-exp-lab-vec G2d80@set-module-interface-first-mark! G2d82@set-module-interface-exp-id-vec! G2d84@set-module-interface-exp-lab-vec! G2d86@module-interface-exp-id* G2d88@chi-internal-module G2d8a@chi-body* G2d8c@expand-transformer G2d8e@parse-exports G2d90@parse-library-name G2d92@parse-library G2d94@parse-import-spec* G2d96@make-top-rib G2d98@make-collector G2d9a@inv-collector G2d9c@vis-collector G2d9e@imp-collector G2da0@chi-library-internal G2da2@chi-interaction-expr G2da4@library-body-expander G2da6@core-library-expander G2da8@parse-top-level-program G2daa@top-level-expander G2db0@G2dab G2db2@G2dad G2db4@G2dac G2db7@env? G2db9@make-env G2dbb@env-names G2dbd@env-labels G2dbf@env-itc G2dc1@set-env-names! G2dc3@set-env-labels! G2dc5@set-env-itc! G2dc7@rp G2dcd@G2dc8 G2dcf@G2dca G2dd1@G2dc9 G2dd4@interaction-env? G2dd6@make-interaction-env G2dd8@interaction-env-rib G2dda@interaction-env-r G2ddc@interaction-env-locs G2dde@set-interaction-env-rib! G2de0@set-interaction-env-r! G2de2@set-interaction-env-locs! G2de4@rp G2de6@interaction-environment-symbols G2de8@environment-bindings G2dea@parse-binding G2dec@environment? G2dee@environment-symbols G2df0@environment G2df2@null-environment G2df4@scheme-report-environment G2df6@expand G2df8@eval G2dfa@library-expander G2dfc@boot-library-expand G2dfe@rev-map-append G2e00@build-exports G2e02@make-export-subst G2e04@make-export-env/macros G2e06@generate-temporaries G2e08@free-identifier=? G2e0a@bound-identifier=? G2e0c@make-source-condition G2e0e@extract-position-condition G2e10@expression-position G2e12@assertion-error G2e14@syntax-error G2e16@syntax-violation* G2e18@syntax-violation G2e1a@identifier? G2e1c@datum->syntax G2e1e@syntax->datum G2e20@compile-r6rs-top-level G2e22@pre-compile-r6rs-top-level G2e24@interaction-environment G2e26@top-level-context) (begin (set! G2ab1@set-cons (lambda (G2e27@x G2e28@ls) (if (memq G2e27@x G2e28@ls) G2e28@ls (cons G2e27@x G2e28@ls)))) (set! G2ab3@set-union (lambda (G2e2b@ls1 G2e2c@ls2) (if (null? G2e2b@ls1) G2e2c@ls2 (if (memq (car G2e2b@ls1) G2e2c@ls2) (G2ab3@set-union (cdr G2e2b@ls1) G2e2c@ls2) (cons (car G2e2b@ls1) (G2ab3@set-union (cdr G2e2b@ls1) G2e2c@ls2)))))) (set! G2ab8@top-mark* '(top)) (set! G2aba@top-marked? (lambda (G2e2f@m*) (memq 'top G2e2f@m*))) (set! G2abc@gen-lexical (lambda (G2e31@sym) (if (symbol? G2e31@sym) (gensym G2e31@sym) (if (G2b04@stx? G2e31@sym) (G2abc@gen-lexical (G2b3e@id->sym G2e31@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G2e31@sym))))) (set! G2abe@gen-global (lambda (G2e33@x) (G2abc@gen-lexical G2e33@x))) (set! G2ac0@gen-label (lambda (G2e35@_) (gensym))) (set! G2ac2@gen-top-level-label (lambda (G2e37@id G2e38@rib) ((lambda (G2e3c@find) (begin (set! G2e3c@find (lambda (G2e47@sym G2e48@mark* G2e49@sym* G2e4a@mark** G2e4b@label*) (and (pair? G2e49@sym*) (if (and (eq? G2e47@sym (car G2e49@sym*)) (G2b40@same-marks? G2e48@mark* (car G2e4a@mark**))) (car G2e4b@label*) (G2e3c@find G2e47@sym G2e48@mark* (cdr G2e49@sym*) (cdr G2e4a@mark**) (cdr G2e4b@label*)))))) ((lambda (G2e3d@sym G2e3e@mark*) ((lambda (G2e41@sym*) ((lambda (G2e43@t) (if G2e43@t ((lambda (G2e45@label) (if (G2963@G2809@imported-label->binding G2e45@label) (gensym) G2e45@label)) G2e43@t) (gensym))) (and (memq G2e3d@sym (G2ad7@rib-sym* G2e38@rib)) (G2e3c@find G2e3d@sym G2e3e@mark* G2e41@sym* (G2ad9@rib-mark** G2e38@rib) (G2adb@rib-label* G2e38@rib))))) (G2ad7@rib-sym* G2e38@rib))) (G2b3e@id->sym G2e37@id) (G2b0a@stx-mark* G2e37@id)))) '#f))) (set! G2ac4@gen-define-label+loc (lambda (G2e51@id G2e52@rib) ((lambda (G2e55@t) (if G2e55@t ((lambda (G2e57@env) ((lambda (G2e59@label G2e5a@locs) (values G2e59@label ((lambda (G2e5d@t) (if G2e5d@t (cdr G2e5d@t) ((lambda (G2e5f@loc) (begin (G2de2@set-interaction-env-locs! G2e57@env (cons (cons G2e59@label G2e5f@loc) G2e5a@locs)) G2e5f@loc)) (G2abc@gen-lexical G2e51@id)))) (assq G2e59@label G2e5a@locs)))) (G2ac2@gen-top-level-label G2e51@id G2e52@rib) (G2ddc@interaction-env-locs G2e57@env))) G2e55@t) (values (gensym) (G2abc@gen-lexical G2e51@id)))) (G2e26@top-level-context)))) (set! G2ac6@gen-define-label (lambda (G2e61@id G2e62@rib) (if (G2e26@top-level-context) (G2ac2@gen-top-level-label G2e61@id G2e62@rib) (gensym)))) (set! G2acc@G2ac7 (make-record-type-descriptor 'rib '#f 'G2aca '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ace@G2ac9 '#f) (set! G2ad0@G2ac8 (make-record-constructor-descriptor G2acc@G2ac7 '#f G2ace@G2ac9)) (set! G2ad3@rib? (record-predicate G2acc@G2ac7)) (set! G2ad5@make-rib (record-constructor G2ad0@G2ac8)) (set! G2ad7@rib-sym* (record-accessor G2acc@G2ac7 '0)) (set! G2ad9@rib-mark** (record-accessor G2acc@G2ac7 '1)) (set! G2adb@rib-label* (record-accessor G2acc@G2ac7 '2)) (set! G2add@rib-sealed/freq (record-accessor G2acc@G2ac7 '3)) (set! G2adf@rib-cache (record-accessor G2acc@G2ac7 '4)) (set! G2ae1@set-rib-sym*! (record-mutator G2acc@G2ac7 '0)) (set! G2ae3@set-rib-mark**! (record-mutator G2acc@G2ac7 '1)) (set! G2ae5@set-rib-label*! (record-mutator G2acc@G2ac7 '2)) (set! G2ae7@set-rib-sealed/freq! (record-mutator G2acc@G2ac7 '3)) (set! G2ae9@set-rib-cache! (record-mutator G2acc@G2ac7 '4)) (set! G2aeb@make-empty-rib (lambda () (G2ad5@make-rib '() '() '() '#f '#f))) (set! G2aed@extend-rib! (lambda (G2e65@rib G2e66@id G2e67@label) ((lambda (G2e6c@find) (begin (set! G2e6c@find (lambda (G2e79@sym G2e7a@mark* G2e7b@sym* G2e7c@mark** G2e7d@label*) (and (pair? G2e7b@sym*) (if (and (eq? G2e79@sym (car G2e7b@sym*)) (G2b40@same-marks? G2e7a@mark* (car G2e7c@mark**))) G2e7d@label* (G2e6c@find G2e79@sym G2e7a@mark* (cdr G2e7b@sym*) (cdr G2e7c@mark**) (cdr G2e7d@label*)))))) (begin (if (G2add@rib-sealed/freq G2e65@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G2e65@rib) (void)) ((lambda (G2e6d@sym G2e6e@mark*) ((lambda (G2e71@sym*) ((lambda (G2e73@t) (if G2e73@t ((lambda (G2e75@p) (if (not (eq? G2e67@label (car G2e75@p))) (if (G2e26@top-level-context) (set-car! G2e75@p G2e67@label) (G2e18@syntax-violation '#f '"multiple definitions of identifier" G2e66@id)) (void))) G2e73@t) (begin (if (G2adf@rib-cache G2e65@rib) (hashtable-update! (G2adf@rib-cache G2e65@rib) G2e6d@sym (lambda (G2e77@e) (cons (cons G2e6e@mark* G2e67@label) G2e77@e)) '()) (void)) (G2ae1@set-rib-sym*! G2e65@rib (cons G2e6d@sym G2e71@sym*)) (G2ae3@set-rib-mark**! G2e65@rib (cons G2e6e@mark* (G2ad9@rib-mark** G2e65@rib))) (G2ae5@set-rib-label*! G2e65@rib (cons G2e67@label (G2adb@rib-label* G2e65@rib)))))) (and (memq G2e6d@sym (G2ad7@rib-sym* G2e65@rib)) (G2e6c@find G2e6d@sym G2e6e@mark* G2e71@sym* (G2ad9@rib-mark** G2e65@rib) (G2adb@rib-label* G2e65@rib))))) (G2ad7@rib-sym* G2e65@rib))) (G2b3e@id->sym G2e66@id) (G2b0a@stx-mark* G2e66@id))))) '#f))) (set! G2aef@extend-rib/nc! (lambda (G2e83@rib G2e84@id G2e85@label) ((lambda (G2e89@sym G2e8a@mark*) ((lambda (G2e8d@sym*) (begin (if (G2adf@rib-cache G2e83@rib) (hashtable-update! (G2adf@rib-cache G2e83@rib) G2e89@sym (lambda (G2e8f@e) (cons (cons G2e8a@mark* G2e85@label) G2e8f@e)) '()) (void)) (G2ae1@set-rib-sym*! G2e83@rib (cons G2e89@sym G2e8d@sym*)) (G2ae3@set-rib-mark**! G2e83@rib (cons G2e8a@mark* (G2ad9@rib-mark** G2e83@rib))) (G2ae5@set-rib-label*! G2e83@rib (cons G2e85@label (G2adb@rib-label* G2e83@rib))))) (G2ad7@rib-sym* G2e83@rib))) (G2b3e@id->sym G2e84@id) (G2b0a@stx-mark* G2e84@id)))) (set! G2af1@make-rib-map (lambda (G2e91@sym*) ((lambda (G2e93@ht) ((letrec ((G2e95@f (lambda (G2e97@i G2e98@sym*) (if (null? G2e98@sym*) G2e93@ht (begin (hashtable-update! G2e93@ht (car G2e98@sym*) (lambda (G2e9b@x) (cons G2e97@i G2e9b@x)) '()) (G2e95@f (+ G2e97@i '1) (cdr G2e98@sym*))))))) G2e95@f) '0 G2e91@sym*)) (make-eq-hashtable)))) (set! G2af3@seal-rib! (lambda (G2e9d@rib) ((lambda (G2e9f@sym*) (if (not (null? G2e9f@sym*)) (begin (G2ae1@set-rib-sym*! G2e9d@rib (list->vector G2e9f@sym*)) (G2ae3@set-rib-mark**! G2e9d@rib (list->vector (G2ad9@rib-mark** G2e9d@rib))) (G2ae5@set-rib-label*! G2e9d@rib (list->vector (G2adb@rib-label* G2e9d@rib))) (G2ae7@set-rib-sealed/freq! G2e9d@rib (G2af1@make-rib-map G2e9f@sym*))) (void))) (G2ad7@rib-sym* G2e9d@rib)))) (set! G2af5@unseal-rib! (lambda (G2ea1@rib) (if (G2add@rib-sealed/freq G2ea1@rib) (begin (G2ae7@set-rib-sealed/freq! G2ea1@rib '#f) (G2ae1@set-rib-sym*! G2ea1@rib (vector->list (G2ad7@rib-sym* G2ea1@rib))) (G2ae3@set-rib-mark**! G2ea1@rib (vector->list (G2ad9@rib-mark** G2ea1@rib))) (G2ae5@set-rib-label*! G2ea1@rib (vector->list (G2adb@rib-label* G2ea1@rib)))) (void)))) (set! G2af7@make-full-rib (lambda (G2ea3@id* G2ea4@label*) ((lambda (G2ea7@r) (begin (G2af3@seal-rib! G2ea7@r) G2ea7@r)) (G2ad5@make-rib (map G2b3e@id->sym G2ea3@id*) (map G2b0a@stx-mark* G2ea3@id*) G2ea4@label* '#f '#f)))) (set! G2afd@G2af8 (make-record-type-descriptor 'stx '#f 'G2afb '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2aff@G2afa '#f) (set! G2b01@G2af9 (make-record-constructor-descriptor G2afd@G2af8 '#f G2aff@G2afa)) (set! G2b04@stx? (record-predicate G2afd@G2af8)) (set! G2b06@make-stx (record-constructor G2b01@G2af9)) (set! G2b08@stx-expr (record-accessor G2afd@G2af8 '0)) (set! G2b0a@stx-mark* (record-accessor G2afd@G2af8 '1)) (set! G2b0c@stx-subst* (record-accessor G2afd@G2af8 '2)) (set! G2b0e@stx-ae* (record-accessor G2afd@G2af8 '3)) (set! G2b10@set-stx-expr! (record-mutator G2afd@G2af8 '0)) (set! G2b12@set-stx-mark*! (record-mutator G2afd@G2af8 '1)) (set! G2b14@set-stx-subst*! (record-mutator G2afd@G2af8 '2)) (set! G2b16@set-stx-ae*! (record-mutator G2afd@G2af8 '3)) (set! G2b18@rp (G26ed@G2618@make-record-printer 'stx (lambda (G2ea9@x G2eaa@p G2eab@wr) (begin (display '"#<syntax " G2eaa@p) (write (G2b52@stx->datum G2ea9@x) G2eaa@p) ((lambda (G2eaf@expr) (if (G26e5@G2608@annotation? G2eaf@expr) ((lambda (G2eb1@src) (if (pair? G2eb1@src) (begin (display '" [" G2eaa@p) (display (cdr G2eb1@src) G2eaa@p) (display '" of " G2eaa@p) (display (car G2eb1@src) G2eaa@p) (display '"]" G2eaa@p)) (void))) (G26e6@G260a@annotation-source G2eaf@expr)) (void))) (G2b08@stx-expr G2ea9@x)) (display '">" G2eaa@p))))) (set! G2b1a@datum->stx (lambda (G2eb3@id G2eb4@datum) (G2b06@make-stx G2eb4@datum (G2b0a@stx-mark* G2eb3@id) (G2b0c@stx-subst* G2eb3@id) (G2b0e@stx-ae* G2eb3@id)))) (set! G2b1c@gen-mark (lambda () (string '#\m))) (set! G2b1e@anti-mark '#f) (set! G2b20@anti-mark? not) (set! G2b22@join-wraps (lambda (G2eb7@m1* G2eb8@s1* G2eb9@ae1* G2eba@e) ((lambda (G2ec0@cancel) (begin (set! G2ec0@cancel (lambda (G2ec7@ls1 G2ec8@ls2) ((letrec ((G2ecb@f (lambda (G2ecd@x G2ece@ls1) (if (null? G2ece@ls1) (cdr G2ec8@ls2) (cons G2ecd@x (G2ecb@f (car G2ece@ls1) (cdr G2ece@ls1))))))) G2ecb@f) (car G2ec7@ls1) (cdr G2ec7@ls1)))) ((lambda (G2ec1@m2* G2ec2@s2* G2ec3@ae2*) (if (and (not (null? G2eb7@m1*)) (not (null? G2ec1@m2*)) (G2b20@anti-mark? (car G2ec1@m2*))) (values (G2ec0@cancel G2eb7@m1* G2ec1@m2*) (G2ec0@cancel G2eb8@s1* G2ec2@s2*) (G2ec0@cancel G2eb9@ae1* G2ec3@ae2*)) (values (append G2eb7@m1* G2ec1@m2*) (append G2eb8@s1* G2ec2@s2*) (append G2eb9@ae1* G2ec3@ae2*)))) (G2b0a@stx-mark* G2eba@e) (G2b0c@stx-subst* G2eba@e) (G2b0e@stx-ae* G2eba@e)))) '#f))) (set! G2b24@mkstx (lambda (G2ed1@e G2ed2@m* G2ed3@s* G2ed4@ae*) (if (and (G2b04@stx? G2ed1@e) (not (G2aba@top-marked? G2ed2@m*))) (call-with-values (lambda () (G2b22@join-wraps G2ed2@m* G2ed3@s* G2ed4@ae* G2ed1@e)) (lambda (G2edc@G2ed9 G2edd@G2eda G2ede@G2edb) ((lambda (G2ee2@ae* G2ee3@s* G2ee4@m*) (G2b06@make-stx (G2b08@stx-expr G2ed1@e) G2ee4@m* G2ee3@s* G2ee2@ae*)) G2ede@G2edb G2edd@G2eda G2edc@G2ed9))) (G2b06@make-stx G2ed1@e G2ed2@m* G2ed3@s* G2ed4@ae*)))) (set! G2b26@add-mark (lambda (G2ee8@m G2ee9@e G2eea@ae) (G2b24@mkstx G2ee9@e (list G2ee8@m) '(shift) (list G2eea@ae)))) (set! G2b28@add-subst (lambda (G2eee@subst G2eef@e) (G2b24@mkstx G2eef@e '() (list G2eee@subst) '()))) (set! G2b2a@syntax-kind? (lambda (G2ef2@x G2ef3@p?) (if (G2b04@stx? G2ef2@x) (G2b2a@syntax-kind? (G2b08@stx-expr G2ef2@x) G2ef3@p?) (if (G26e5@G2608@annotation? G2ef2@x) (G2b2a@syntax-kind? (G26e7@G260c@annotation-expression G2ef2@x) G2ef3@p?) (G2ef3@p? G2ef2@x))))) (set! G2b2c@syntax-vector->list (lambda (G2ef6@x) (if (G2b04@stx? G2ef6@x) ((lambda (G2ef8@ls G2ef9@m* G2efa@s* G2efb@ae*) (map (lambda (G2f00@x) (G2b24@mkstx G2f00@x G2ef9@m* G2efa@s* G2efb@ae*)) G2ef8@ls)) (G2b2c@syntax-vector->list (G2b08@stx-expr G2ef6@x)) (G2b0a@stx-mark* G2ef6@x) (G2b0c@stx-subst* G2ef6@x) (G2b0e@stx-ae* G2ef6@x)) (if (G26e5@G2608@annotation? G2ef6@x) (G2b2c@syntax-vector->list (G26e7@G260c@annotation-expression G2ef6@x)) (if (vector? G2ef6@x) (vector->list G2ef6@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G2ef6@x)))))) (set! G2b2e@syntax-pair? (lambda (G2f02@x) (G2b2a@syntax-kind? G2f02@x pair?))) (set! G2b30@syntax-vector? (lambda (G2f04@x) (G2b2a@syntax-kind? G2f04@x vector?))) (set! G2b32@syntax-null? (lambda (G2f06@x) (G2b2a@syntax-kind? G2f06@x null?))) (set! G2b34@syntax-list? (lambda (G2f08@x) (or (G2b32@syntax-null? G2f08@x) (and (G2b2e@syntax-pair? G2f08@x) (G2b34@syntax-list? (G2b38@syntax-cdr G2f08@x)))))) (set! G2b36@syntax-car (lambda (G2f0a@x) (if (G2b04@stx? G2f0a@x) (G2b24@mkstx (G2b36@syntax-car (G2b08@stx-expr G2f0a@x)) (G2b0a@stx-mark* G2f0a@x) (G2b0c@stx-subst* G2f0a@x) (G2b0e@stx-ae* G2f0a@x)) (if (G26e5@G2608@annotation? G2f0a@x) (G2b36@syntax-car (G26e7@G260c@annotation-expression G2f0a@x)) (if (pair? G2f0a@x) (car G2f0a@x) (assertion-violation 'syntax-car '"BUG: not a pair" G2f0a@x)))))) (set! G2b38@syntax-cdr (lambda (G2f0c@x) (if (G2b04@stx? G2f0c@x) (G2b24@mkstx (G2b38@syntax-cdr (G2b08@stx-expr G2f0c@x)) (G2b0a@stx-mark* G2f0c@x) (G2b0c@stx-subst* G2f0c@x) (G2b0e@stx-ae* G2f0c@x)) (if (G26e5@G2608@annotation? G2f0c@x) (G2b38@syntax-cdr (G26e7@G260c@annotation-expression G2f0c@x)) (if (pair? G2f0c@x) (cdr G2f0c@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G2f0c@x)))))) (set! G2b3a@syntax->list (lambda (G2f0e@x) (if (G2b2e@syntax-pair? G2f0e@x) (cons (G2b36@syntax-car G2f0e@x) (G2b3a@syntax->list (G2b38@syntax-cdr G2f0e@x))) (if (G2b32@syntax-null? G2f0e@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G2f0e@x))))) (set! G2b3c@id? (lambda (G2f10@x) (and (G2b04@stx? G2f10@x) ((lambda (G2f12@expr) (symbol? (if (G26e5@G2608@annotation? G2f12@expr) (G26e4@G2606@annotation-stripped G2f12@expr) G2f12@expr))) (G2b08@stx-expr G2f10@x))))) (set! G2b3e@id->sym (lambda (G2f14@x) (begin (if (not (G2b04@stx? G2f14@x)) (error 'id->sym '"BUG in ikarus: not an id" G2f14@x) (void)) ((lambda (G2f16@expr) ((lambda (G2f18@sym) (if (symbol? G2f18@sym) G2f18@sym (error 'id->sym '"BUG in ikarus: not an id" G2f14@x))) (if (G26e5@G2608@annotation? G2f16@expr) (G26e4@G2606@annotation-stripped G2f16@expr) G2f16@expr))) (G2b08@stx-expr G2f14@x))))) (set! G2b40@same-marks? (lambda (G2f1a@x G2f1b@y) (or (and (null? G2f1a@x) (null? G2f1b@y)) (and (pair? G2f1a@x) (pair? G2f1b@y) (eq? (car G2f1a@x) (car G2f1b@y)) (G2b40@same-marks? (cdr G2f1a@x) (cdr G2f1b@y)))))) (set! G2b42@bound-id=? (lambda (G2f1e@x G2f1f@y) (and (eq? (G2b3e@id->sym G2f1e@x) (G2b3e@id->sym G2f1f@y)) (G2b40@same-marks? (G2b0a@stx-mark* G2f1e@x) (G2b0a@stx-mark* G2f1f@y))))) (set! G2b44@free-id=? (lambda (G2f22@i G2f23@j) ((lambda (G2f26@t0 G2f27@t1) (if (or G2f26@t0 G2f27@t1) (eq? G2f26@t0 G2f27@t1) (eq? (G2b3e@id->sym G2f22@i) (G2b3e@id->sym G2f23@j)))) (G2b58@id->real-label G2f22@i) (G2b58@id->real-label G2f23@j)))) (set! G2b46@valid-bound-ids? (lambda (G2f2a@id*) (and (for-all G2b3c@id? G2f2a@id*) (G2b48@distinct-bound-ids? G2f2a@id*)))) (set! G2b48@distinct-bound-ids? (lambda (G2f2c@id*) (or (null? G2f2c@id*) (and (not (G2b4a@bound-id-member? (car G2f2c@id*) (cdr G2f2c@id*))) (G2b48@distinct-bound-ids? (cdr G2f2c@id*)))))) (set! G2b4a@bound-id-member? (lambda (G2f2e@id G2f2f@id*) (and (pair? G2f2f@id*) (or (G2b42@bound-id=? G2f2e@id (car G2f2f@id*)) (G2b4a@bound-id-member? G2f2e@id (cdr G2f2f@id*)))))) (set! G2b4c@self-evaluating? (lambda (G2f32@x) (or (number? G2f32@x) (string? G2f32@x) (char? G2f32@x) (boolean? G2f32@x) (regexp? G2f32@x) (bytevector? G2f32@x)))) (set! G2b4e@strip-annotations (lambda (G2f34@x) (if (pair? G2f34@x) (cons (G2b4e@strip-annotations (car G2f34@x)) (G2b4e@strip-annotations (cdr G2f34@x))) (if (vector? G2f34@x) (vector-map G2b4e@strip-annotations G2f34@x) (if (G26e5@G2608@annotation? G2f34@x) (G26e4@G2606@annotation-stripped G2f34@x) G2f34@x))))) (set! G2b50@strip (lambda (G2f36@x G2f37@m*) (if (G2aba@top-marked? G2f37@m*) (if (or (G26e5@G2608@annotation? G2f36@x) (and (pair? G2f36@x) (G26e5@G2608@annotation? (car G2f36@x))) (and (vector? G2f36@x) (> (vector-length G2f36@x) '0) (G26e5@G2608@annotation? (vector-ref G2f36@x '0)))) (G2b4e@strip-annotations G2f36@x) G2f36@x) ((letrec ((G2f3a@f (lambda (G2f3c@x) (if (G2b04@stx? G2f3c@x) (G2b50@strip (G2b08@stx-expr G2f3c@x) (G2b0a@stx-mark* G2f3c@x)) (if (G26e5@G2608@annotation? G2f3c@x) (G26e4@G2606@annotation-stripped G2f3c@x) (if (pair? G2f3c@x) ((lambda (G2f3e@a G2f3f@d) (if (and (eq? G2f3e@a (car G2f3c@x)) (eq? G2f3f@d (cdr G2f3c@x))) G2f3c@x (cons G2f3e@a G2f3f@d))) (G2f3a@f (car G2f3c@x)) (G2f3a@f (cdr G2f3c@x))) (if (vector? G2f3c@x) ((lambda (G2f42@old) ((lambda (G2f44@new) (if (for-all eq? G2f42@old G2f44@new) G2f3c@x (list->vector G2f44@new))) (map G2f3a@f G2f42@old))) (vector->list G2f3c@x)) G2f3c@x))))))) G2f3a@f) G2f36@x)))) (set! G2b52@stx->datum (lambda (G2f46@x) (G2b50@strip G2f46@x '()))) (set! G2b54@same-marks*? (lambda (G2f48@mark* G2f49@mark** G2f4a@si) (if (null? G2f4a@si) '#f (if (G2b40@same-marks? G2f48@mark* (vector-ref G2f49@mark** (car G2f4a@si))) (car G2f4a@si) (G2b54@same-marks*? G2f48@mark* G2f49@mark** (cdr G2f4a@si)))))) (set! G2b56@id->label (lambda (G2f4e@id) (or (G2b58@id->real-label G2f4e@id) ((lambda (G2f50@t) (if G2f50@t ((lambda (G2f52@env) ((lambda (G2f54@rib) (call-with-values (lambda () (G2ac4@gen-define-label+loc G2f4e@id G2f54@rib)) (lambda (G2f58@G2f56 G2f59@G2f57) ((lambda (G2f5c@loc_ G2f5d@lab) (begin (G2aed@extend-rib! G2f54@rib G2f4e@id G2f5d@lab) G2f5d@lab)) G2f59@G2f57 G2f58@G2f56)))) (G2dd8@interaction-env-rib G2f52@env))) G2f50@t) '#f)) (G2e26@top-level-context))))) (set! G2b58@id->real-label (lambda (G2f60@id) ((lambda (G2f62@sym) ((letrec ((G2f64@search (lambda (G2f66@subst* G2f67@mark*) (if (null? G2f66@subst*) '#f (if (eq? (car G2f66@subst*) 'shift) (G2f64@search (cdr G2f66@subst*) (cdr G2f67@mark*)) ((lambda (G2f6a@rib) ((lambda (G2f6c@t) (if G2f6c@t ((lambda (G2f6e@ht) ((lambda (G2f70@si) ((lambda (G2f72@i) (if G2f72@i (vector-ref (G2adb@rib-label* G2f6a@rib) G2f72@i) (G2f64@search (cdr G2f66@subst*) G2f67@mark*))) (and G2f70@si (G2b54@same-marks*? G2f67@mark* (G2ad9@rib-mark** G2f6a@rib) (reverse G2f70@si))))) (hashtable-ref G2f6e@ht G2f62@sym '#f))) G2f6c@t) ((letrec ((G2f74@f (lambda (G2f76@sym* G2f77@mark** G2f78@label*) (if (null? G2f76@sym*) (G2f64@search (cdr G2f66@subst*) G2f67@mark*) (if (and (eq? (car G2f76@sym*) G2f62@sym) (G2b40@same-marks? (car G2f77@mark**) G2f67@mark*)) (car G2f78@label*) (G2f74@f (cdr G2f76@sym*) (cdr G2f77@mark**) (cdr G2f78@label*))))))) G2f74@f) (G2ad7@rib-sym* G2f6a@rib) (G2ad9@rib-mark** G2f6a@rib) (G2adb@rib-label* G2f6a@rib)))) (G2add@rib-sealed/freq G2f6a@rib))) (car G2f66@subst*))))))) G2f64@search) (G2b0c@stx-subst* G2f60@id) (G2b0a@stx-mark* G2f60@id))) (G2b3e@id->sym G2f60@id)))) (set! G2b5a@label->binding (lambda (G2f7c@x G2f7d@r) ((lambda (G2f80@t) (if G2f80@t ((lambda (G2f82@b) (if (and (pair? G2f82@b) (eq? (car G2f82@b) '$core-rtd)) (cons '$rtd (map G2ce3@bless (cdr G2f82@b))) (if (and (pair? G2f82@b) (eq? (car G2f82@b) 'global-rtd)) ((lambda (G2f84@lib G2f85@loc) (cons '$rtd (symbol-value G2f85@loc))) (cadr G2f82@b) (cddr G2f82@b)) G2f82@b))) G2f80@t) ((lambda (G2f88@t) (if G2f88@t (cdr G2f88@t) ((lambda (G2f8a@t) (if G2f8a@t ((lambda (G2f8c@env) ((lambda (G2f8e@t) (if G2f8e@t ((lambda (G2f90@p) (cons* 'lexical (cdr G2f90@p) '#f)) G2f8e@t) '(displaced-lexical . #f))) (assq G2f7c@x (G2ddc@interaction-env-locs G2f8c@env)))) G2f8a@t) '(displaced-lexical . #f))) (G2e26@top-level-context)))) (assq G2f7c@x G2f7d@r)))) (G2963@G2809@imported-label->binding G2f7c@x)))) (set! G2b5c@make-binding cons) (set! G2b5e@binding-type car) (set! G2b60@binding-value cdr) (set! G2b62@raise-unbound-error (lambda (G2f92@id) (G2e16@syntax-violation* '#f '"unbound identifier" G2f92@id (G4a38@G4882@make-undefined-violation)))) (set! G2b64@syntax-type (lambda (G2f94@e G2f95@r) (if (G2b3c@id? G2f94@e) ((lambda (G2f98@id) ((lambda (G2f9a@label) ((lambda (G2f9c@b) ((lambda (G2f9e@type) ((lambda () (begin (if (not G2f9a@label) (G2b62@raise-unbound-error G2f98@id) (void)) ((lambda (G2fa0@t) (if (memv G2fa0@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G2f9e@type (G2b60@binding-value G2f9c@b) G2f98@id) (values 'other '#f '#f))) G2f9e@type))))) (G2b5e@binding-type G2f9c@b))) (G2b5a@label->binding G2f9a@label G2f95@r))) (G2b56@id->label G2f98@id))) G2f94@e) (if (G2b2e@syntax-pair? G2f94@e) ((lambda (G2fa2@id) (if (G2b3c@id? G2fa2@id) ((lambda (G2fa4@label) ((lambda (G2fa6@b) ((lambda (G2fa8@type) ((lambda () (begin (if (not G2fa4@label) (G2b62@raise-unbound-error G2fa2@id) (void)) ((lambda (G2faa@t) (if (memv G2faa@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G2fa8@type (G2b60@binding-value G2fa6@b) G2fa2@id) (values 'call '#f '#f))) G2fa8@type))))) (G2b5e@binding-type G2fa6@b))) (G2b5a@label->binding G2fa4@label G2f95@r))) (G2b56@id->label G2fa2@id)) (values 'call '#f '#f))) (G2b36@syntax-car G2f94@e)) ((lambda (G2fac@d) (if (G2b4c@self-evaluating? G2fac@d) (values 'constant G2fac@d '#f) (values 'other '#f '#f))) (G2b52@stx->datum G2f94@e)))))) (set! G2b72@sanitize-binding (lambda (G2fae@x G2faf@src) (if (procedure? G2fae@x) (cons* 'local-macro G2fae@x G2faf@src) (if (and (pair? G2fae@x) (eq? (car G2fae@x) 'macro!) (procedure? (cdr G2fae@x))) (cons* 'local-macro! (cdr G2fae@x) G2faf@src) (if (and (pair? G2fae@x) (eq? (car G2fae@x) '$rtd)) G2fae@x (assertion-violation 'expand '"invalid transformer" G2fae@x)))))) (set! G2b74@make-variable-transformer (lambda (G2fb2@x) (if (procedure? G2fb2@x) (cons 'macro! G2fb2@x) (assertion-violation 'make-variable-transformer '"not a procedure" G2fb2@x)))) (set! G2b76@variable-transformer? (lambda (G2fb4@x) (and (pair? G2fb4@x) (eq? (car G2fb4@x) 'macro!) (procedure? (cdr G2fb4@x))))) (set! G2b78@variable-transformer-procedure (lambda (G2fb6@x) (if (G2b76@variable-transformer? G2fb6@x) (cdr G2fb6@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G2fb6@x)))) (set! G2b7a@make-eval-transformer (lambda (G2fb8@x) (G2b72@sanitize-binding (eval-core (G2744@G26fc@expanded->core G2fb8@x)) G2fb8@x))) (set! G2cb1@parse-define (lambda (G2fba@x) ((lambda (G2fbc@t) ((lambda (G2fbe@ls/false) (if (and G2fbe@ls/false (apply (lambda (G2fc0@id G2fc1@fmls G2fc2@b G2fc3@b*) (G2b3c@id? G2fc0@id)) G2fbe@ls/false)) (apply (lambda (G2fc8@id G2fc9@fmls G2fca@b G2fcb@b*) (begin (G2d55@verify-formals G2fc9@fmls G2fba@x) (values G2fc8@id (cons 'defun (cons G2fc9@fmls (cons G2fca@b G2fcb@b*)))))) G2fbe@ls/false) ((lambda (G2fd0@t) ((lambda (G2fd2@ls/false) (if (and G2fd2@ls/false (apply (lambda (G2fd4@id G2fd5@val) (G2b3c@id? G2fd4@id)) G2fd2@ls/false)) (apply (lambda (G2fd8@id G2fd9@val) (values G2fd8@id (cons 'expr G2fd9@val))) G2fd2@ls/false) ((lambda (G2fdc@t) ((lambda (G2fde@ls/false) (if (and G2fde@ls/false (apply (lambda (G2fe0@id) (G2b3c@id? G2fe0@id)) G2fde@ls/false)) (apply (lambda (G2fe2@id) (values G2fe2@id (cons 'expr (G2ce3@bless '(void))))) G2fde@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G2fdc@t))) (G2d2d@syntax-dispatch G2fdc@t '(_ any)))) G2fd0@t))) (G2d2d@syntax-dispatch G2fd0@t '(_ any any)))) G2fbc@t))) (G2d2d@syntax-dispatch G2fbc@t '(_ (any . any) any . each-any)))) G2fba@x))) (set! G2cb3@parse-define-syntax (lambda (G2fe4@x) ((lambda (G2fe6@t) ((lambda (G2fe8@ls/false) (if (and G2fe8@ls/false (apply (lambda (G2fea@id G2feb@val) (G2b3c@id? G2fea@id)) G2fe8@ls/false)) (apply (lambda (G2fee@id G2fef@val) (values G2fee@id G2fef@val)) G2fe8@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G2fe6@t))) (G2d2d@syntax-dispatch G2fe6@t '(_ any any)))) G2fe4@x))) (set! G2cb5@scheme-stx-hashtable (make-eq-hashtable)) (set! G2cb7@scheme-stx (lambda (G2ff2@sym) (or (hashtable-ref G2cb5@scheme-stx-hashtable G2ff2@sym '#f) ((lambda (G2ff4@subst) ((lambda (G2ff6@stx) ((lambda (G2ff8@stx) ((lambda () (begin (hashtable-set! G2cb5@scheme-stx-hashtable G2ff2@sym G2ff8@stx) G2ff8@stx)))) ((lambda (G2ffa@t) (if G2ffa@t ((lambda (G2ffc@x) ((lambda (G2ffe@name G2fff@label) (G2b28@add-subst (G2ad5@make-rib (list G2ffe@name) (list G2ab8@top-mark*) (list G2fff@label) '#f '#f) G2ff6@stx)) (car G2ffc@x) (cdr G2ffc@x))) G2ffa@t) G2ff6@stx)) (assq G2ff2@sym G2ff4@subst)))) (G2b06@make-stx G2ff2@sym G2ab8@top-mark* '() '()))) (G2939@G27b5@library-subst (G295d@G27fd@find-library-by-name '(psyntax system $all))))))) (set! G2cb9@lexical-var car) (set! G2cbb@lexical-mutable? cdr) (set! G2cbd@set-lexical-mutable! set-cdr!) (set! G2cbf@add-lexical (lambda (G3002@lab G3003@lex G3004@r) (cons (cons* G3002@lab 'lexical G3003@lex '#f) G3004@r))) (set! G2cc1@add-lexicals (lambda (G3008@lab* G3009@lex* G300a@r) (if (null? G3008@lab*) G300a@r (G2cc1@add-lexicals (cdr G3008@lab*) (cdr G3009@lex*) (G2cbf@add-lexical (car G3008@lab*) (car G3009@lex*) G300a@r))))) (set! G2cc3@letrec-helper (lambda (G300e@e G300f@r G3010@mr G3011@build) ((lambda (G3016@t) ((lambda (G3018@ls/false) (if G3018@ls/false (apply (lambda (G301a@lhs* G301b@rhs* G301c@b G301d@b*) (if (not (G2b46@valid-bound-ids? G301a@lhs*)) (G2ce7@invalid-fmls-error G300e@e G301a@lhs*) ((lambda (G3022@lex* G3023@lab*) ((lambda (G3026@rib G3027@r) ((lambda (G302a@body G302b@rhs*) (G3011@build '#f G3022@lex* G302b@rhs* G302a@body)) (G2d67@chi-internal (G2b28@add-subst G3026@rib (cons G301c@b G301d@b*)) G3027@r G3010@mr) (G2d4d@chi-expr* (map (lambda (G302e@x) (G2b28@add-subst G3026@rib G302e@x)) G301b@rhs*) G3027@r G3010@mr))) (G2af7@make-full-rib G301a@lhs* G3023@lab*) (G2cc1@add-lexicals G3023@lab* G3022@lex* G300f@r))) (map G2abc@gen-lexical G301a@lhs*) (map G2ac0@gen-label G301a@lhs*)))) G3018@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3016@t))) (G2d2d@syntax-dispatch G3016@t '(_ #(each (any any)) any . each-any)))) G300e@e))) (set! G2cc5@letrec-transformer (lambda (G3030@e G3031@r G3032@mr) (G2cc3@letrec-helper G3030@e G3031@r G3032@mr G2a9f@G2a12@build-letrec))) (set! G2cc7@letrec*-transformer (lambda (G3036@e G3037@r G3038@mr) (G2cc3@letrec-helper G3036@e G3037@r G3038@mr G2aa0@G2a14@build-letrec*))) (set! G2cc9@fluid-let-syntax-transformer (lambda (G303c@e G303d@r G303e@mr) ((lambda (G3043@lookup) (begin (set! G3043@lookup (lambda (G3056@x) (or (G2b56@id->label G3056@x) (G2e18@syntax-violation '#f '"unbound identifier" G303c@e G3056@x)))) ((lambda (G3044@t) ((lambda (G3046@ls/false) (if G3046@ls/false (apply (lambda (G3048@lhs* G3049@rhs* G304a@b G304b@b*) (if (not (G2b46@valid-bound-ids? G3048@lhs*)) (G2ce7@invalid-fmls-error G303c@e G3048@lhs*) ((lambda (G3050@lab* G3051@rhs*) (G2d67@chi-internal (cons G304a@b G304b@b*) (append (map cons G3050@lab* G3051@rhs*) G303d@r) (append (map cons G3050@lab* G3051@rhs*) G303e@mr))) (map G3043@lookup G3048@lhs*) (map (lambda (G3054@x) (G2b7a@make-eval-transformer (G2d8c@expand-transformer G3054@x G303e@mr))) G3049@rhs*)))) G3046@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3044@t))) (G2d2d@syntax-dispatch G3044@t '(_ #(each (any any)) any . each-any)))) G303c@e))) '#f))) (set! G2ccb@type-descriptor-transformer (lambda (G3058@e G3059@r G305a@mr) ((lambda (G305e@t) ((lambda (G3060@ls/false) (if (and G3060@ls/false (apply (lambda (G3062@id) (G2b3c@id? G3062@id)) G3060@ls/false)) (apply (lambda (G3064@id) ((lambda (G3066@lab) ((lambda (G3068@b) ((lambda (G306a@type) ((lambda () (begin (if (not G3066@lab) (G2b62@raise-unbound-error G3064@id) (void)) (if (not (and (eq? G306a@type '$rtd) (not (list? (G2b60@binding-value G3068@b))))) (G2e18@syntax-violation '#f '"not a record type" G3058@e) (void)) (list 'quote (G2b60@binding-value G3068@b)))))) (G2b5e@binding-type G3068@b))) (G2b5a@label->binding G3066@lab G3059@r))) (G2b56@id->label G3064@id))) G3060@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G305e@t))) (G2d2d@syntax-dispatch G305e@t '(_ any)))) G3058@e))) (set! G2ccd@record-type-descriptor-transformer (lambda (G306c@e G306d@r G306e@mr) ((lambda (G3072@t) ((lambda (G3074@ls/false) (if (and G3074@ls/false (apply (lambda (G3076@id) (G2b3c@id? G3076@id)) G3074@ls/false)) (apply (lambda (G3078@id) ((lambda (G307a@lab) ((lambda (G307c@b) ((lambda (G307e@type) ((lambda () (begin (if (not G307a@lab) (G2b62@raise-unbound-error G3078@id) (void)) (if (not (and (eq? G307e@type '$rtd) (list? (G2b60@binding-value G307c@b)))) (G2e18@syntax-violation '#f '"not a record type" G306c@e) (void)) (G2d51@chi-expr (car (G2b60@binding-value G307c@b)) G306d@r G306e@mr))))) (G2b5e@binding-type G307c@b))) (G2b5a@label->binding G307a@lab G306d@r))) (G2b56@id->label G3078@id))) G3074@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3072@t))) (G2d2d@syntax-dispatch G3072@t '(_ any)))) G306c@e))) (set! G2ccf@record-constructor-descriptor-transformer (lambda (G3080@e G3081@r G3082@mr) ((lambda (G3086@t) ((lambda (G3088@ls/false) (if (and G3088@ls/false (apply (lambda (G308a@id) (G2b3c@id? G308a@id)) G3088@ls/false)) (apply (lambda (G308c@id) ((lambda (G308e@lab) ((lambda (G3090@b) ((lambda (G3092@type) ((lambda () (begin (if (not G308e@lab) (G2b62@raise-unbound-error G308c@id) (void)) (if (not (and (eq? G3092@type '$rtd) (list? (G2b60@binding-value G3090@b)))) (G2e18@syntax-violation '#f '"invalid type" G3080@e) (void)) (G2d51@chi-expr (cadr (G2b60@binding-value G3090@b)) G3081@r G3082@mr))))) (G2b5e@binding-type G3090@b))) (G2b5a@label->binding G308e@lab G3081@r))) (G2b56@id->label G308c@id))) G3088@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3086@t))) (G2d2d@syntax-dispatch G3086@t '(_ any)))) G3080@e))) (set! G2cd1@when-macro (lambda (G3094@e) ((lambda (G3096@t) ((lambda (G3098@ls/false) (if G3098@ls/false (apply (lambda (G309a@test G309b@e G309c@e*) (G2ce3@bless (list 'if G309a@test (cons 'begin (cons G309b@e G309c@e*))))) G3098@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3096@t))) (G2d2d@syntax-dispatch G3096@t '(_ any any . each-any)))) G3094@e))) (set! G2cd3@unless-macro (lambda (G30a0@e) ((lambda (G30a2@t) ((lambda (G30a4@ls/false) (if G30a4@ls/false (apply (lambda (G30a6@test G30a7@e G30a8@e*) (G2ce3@bless (list 'if (list 'not G30a6@test) (cons 'begin (cons G30a7@e G30a8@e*))))) G30a4@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G30a2@t))) (G2d2d@syntax-dispatch G30a2@t '(_ any any . each-any)))) G30a0@e))) (set! G2cd5@if-transformer (lambda (G30ac@e G30ad@r G30ae@mr) ((lambda (G30b2@t) ((lambda (G30b4@ls/false) (if G30b4@ls/false (apply (lambda (G30b6@e0 G30b7@e1 G30b8@e2) (list 'if (G2d51@chi-expr G30b6@e0 G30ad@r G30ae@mr) (G2d51@chi-expr G30b7@e1 G30ad@r G30ae@mr) (G2d51@chi-expr G30b8@e2 G30ad@r G30ae@mr))) G30b4@ls/false) ((lambda (G30bc@t) ((lambda (G30be@ls/false) (if G30be@ls/false (apply (lambda (G30c0@e0 G30c1@e1) (list 'if (G2d51@chi-expr G30c0@e0 G30ad@r G30ae@mr) (G2d51@chi-expr G30c1@e1 G30ad@r G30ae@mr) (G2a9e@G2a10@build-void))) G30be@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G30bc@t))) (G2d2d@syntax-dispatch G30bc@t '(_ any any)))) G30b2@t))) (G2d2d@syntax-dispatch G30b2@t '(_ any any any)))) G30ac@e))) (set! G2cd7@and-transformer (lambda (G30c4@e G30c5@r G30c6@mr) ((lambda (G30ca@t) ((lambda (G30cc@ls/false) (if G30cc@ls/false (apply (lambda (G30ce@e*) (cons 'and (G2d4d@chi-expr* G30ce@e* G30c5@r G30c6@mr))) G30cc@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G30ca@t))) (G2d2d@syntax-dispatch G30ca@t '(_ . each-any)))) G30c4@e))) (set! G2cd9@or-transformer (lambda (G30d0@e G30d1@r G30d2@mr) ((lambda (G30d6@t) ((lambda (G30d8@ls/false) (if G30d8@ls/false (apply (lambda (G30da@e*) (cons 'or (G2d4d@chi-expr* G30da@e* G30d1@r G30d2@mr))) G30d8@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G30d6@t))) (G2d2d@syntax-dispatch G30d6@t '(_ . each-any)))) G30d0@e))) (set! G2cdb@case-macro (lambda (G30dc@e) ((lambda (G30df@build-last G30e1@build-one) (begin (set! G30df@build-last (lambda (G3106@cls) ((lambda (G3108@t) ((lambda (G310a@ls/false) (if G310a@ls/false (apply (lambda (G310c@e G310d@e*) (cons 'begin (cons G310c@e G310d@e*))) G310a@ls/false) ((lambda (G3110@t) ((lambda (G3112@ls/false) (if G3112@ls/false (apply (lambda () (G30e1@build-one G3106@cls '(if #f #f))) G3112@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3110@t))) (G2d2d@syntax-dispatch G3110@t '_))) G3108@t))) (G2d2d@syntax-dispatch G3108@t '(#(scheme-id else) any . each-any)))) G3106@cls))) (set! G30e1@build-one (lambda (G30f8@cls G30f9@k) ((lambda (G30fc@t) ((lambda (G30fe@ls/false) (if G30fe@ls/false (apply (lambda (G3100@d* G3101@e G3102@e*) (list 'if (list 'memv 't (list 'quote G3100@d*)) (cons 'begin (cons G3101@e G3102@e*)) G30f9@k)) G30fe@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G30fc@t))) (G2d2d@syntax-dispatch G30fc@t '(each-any any . each-any)))) G30f8@cls))) ((lambda (G30e2@t) ((lambda (G30e4@ls/false) (if G30e4@ls/false (apply (lambda (G30e6@expr) (G2ce3@bless (cons 'let (cons (list (list 't G30e6@expr)) '((if #f #f)))))) G30e4@ls/false) ((lambda (G30e8@t) ((lambda (G30ea@ls/false) (if G30ea@ls/false (apply (lambda (G30ec@expr G30ed@cls G30ee@cls*) (G2ce3@bless (list 'let (list (list 't G30ec@expr)) ((letrec ((G30f2@f (lambda (G30f4@cls G30f5@cls*) (if (null? G30f5@cls*) (G30df@build-last G30f4@cls) (G30e1@build-one G30f4@cls (G30f2@f (car G30f5@cls*) (cdr G30f5@cls*))))))) G30f2@f) G30ed@cls G30ee@cls*)))) G30ea@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G30e8@t))) (G2d2d@syntax-dispatch G30e8@t '(_ any any . each-any)))) G30e2@t))) (G2d2d@syntax-dispatch G30e2@t '(_ any)))) G30dc@e))) '#f '#f))) (set! G2cdd@quote-transformer (lambda (G3114@e G3115@r G3116@mr) ((lambda (G311a@t) ((lambda (G311c@ls/false) (if G311c@ls/false (apply (lambda (G311e@datum) (list 'quote (G2b52@stx->datum G311e@datum))) G311c@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G311a@t))) (G2d2d@syntax-dispatch G311a@t '(_ any)))) G3114@e))) (set! G2cdf@case-lambda-transformer (lambda (G3120@e G3121@r G3122@mr) ((lambda (G3126@t) ((lambda (G3128@ls/false) (if G3128@ls/false (apply (lambda (G312a@fmls* G312b@b* G312c@b**) (call-with-values (lambda () (G2d59@chi-lambda-clause* G3120@e G312a@fmls* (map cons G312b@b* G312c@b**) G3121@r G3122@mr)) (lambda (G3132@G3130 G3133@G3131) ((lambda (G3136@body* G3137@fmls*) (G2a9b@G29de@build-case-lambda '#f G3137@fmls* G3136@body*)) G3133@G3131 G3132@G3130)))) G3128@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3126@t))) (G2d2d@syntax-dispatch G3126@t '(_ . #(each (any any . each-any)))))) G3120@e))) (set! G2ce1@lambda-transformer (lambda (G313a@e G313b@r G313c@mr) ((lambda (G3140@t) ((lambda (G3142@ls/false) (if G3142@ls/false (apply (lambda (G3144@fmls G3145@b G3146@b*) (call-with-values (lambda () (G2d57@chi-lambda-clause G313a@e G3144@fmls (cons G3145@b G3146@b*) G313b@r G313c@mr)) (lambda (G314c@G314a G314d@G314b) ((lambda (G3150@body G3151@fmls) (G2a9a@G29dc@build-lambda '#f G3151@fmls G3150@body)) G314d@G314b G314c@G314a)))) G3142@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3140@t))) (G2d2d@syntax-dispatch G3140@t '(_ any any . each-any)))) G313a@e))) (set! G2ce3@bless (lambda (G3154@x) (G2b24@mkstx ((letrec ((G3156@f (lambda (G3158@x) (if (G2b04@stx? G3158@x) G3158@x (if (pair? G3158@x) (cons (G3156@f (car G3158@x)) (G3156@f (cdr G3158@x))) (if (symbol? G3158@x) (G2cb7@scheme-stx G3158@x) (if (vector? G3158@x) (vector-map G3156@f G3158@x) G3158@x))))))) G3156@f) G3154@x) '() '() '()))) (set! G2ce5@with-syntax-macro (lambda (G315a@e) ((lambda (G315c@t) ((lambda (G315e@ls/false) (if G315e@ls/false (apply (lambda (G3160@pat* G3161@expr* G3162@b G3163@b*) ((lambda (G3168@idn*) (begin (G2d55@verify-formals (map car G3168@idn*) G315a@e) ((lambda (G316a@t*) (G2ce3@bless (list 'let (map list G316a@t* G3161@expr*) ((letrec ((G316c@f (lambda (G316e@pat* G316f@t*) (if (null? G316e@pat*) (cons 'begin (cons '#f (cons G3162@b G3163@b*))) (list 'syntax-case (car G316f@t*) '() (list (car G316e@pat*) (G316c@f (cdr G316e@pat*) (cdr G316f@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G316e@pat*)) (car G316f@t*)))))))) G316c@f) G3160@pat* G316a@t*)))) (G2e06@generate-temporaries G3161@expr*)))) ((letrec ((G3172@f (lambda (G3174@pat*) (if (null? G3174@pat*) '() (call-with-values (lambda () (G2d2b@convert-pattern (car G3174@pat*) '())) (lambda (G3178@G3176 G3179@G3177) ((lambda (G317c@idn* G317d@pat) (append G317c@idn* (G3172@f (cdr G3174@pat*)))) G3179@G3177 G3178@G3176))))))) G3172@f) G3160@pat*))) G315e@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G315c@t))) (G2d2d@syntax-dispatch G315c@t '(_ #(each (any any)) any . each-any)))) G315a@e))) (set! G2ce7@invalid-fmls-error (lambda (G3180@stx G3181@fmls) ((lambda (G3184@t) ((lambda (G3186@ls/false) (if G3186@ls/false (apply (lambda (G3188@id* G3189@last) ((letrec ((G318c@f (lambda (G318e@id*) (if (null? G318e@id*) (values) (if (not (G2b3c@id? (car G318e@id*))) (G2e18@syntax-violation '#f '"not an identifier" G3180@stx (car G318e@id*)) (begin (G318c@f (cdr G318e@id*)) (if (G2b4a@bound-id-member? (car G318e@id*) (cdr G318e@id*)) (G2e18@syntax-violation '#f '"duplicate binding" G3180@stx (car G318e@id*)) (void)))))))) G318c@f) (if (G2b3c@id? G3189@last) (cons G3189@last G3188@id*) (if (G2b32@syntax-null? G3189@last) G3188@id* (G2e18@syntax-violation '#f '"not an identifier" G3180@stx G3189@last))))) G3186@ls/false) ((lambda (G3190@t) ((lambda (G3192@ls/false) (if G3192@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"malformed binding form" G3180@stx G3181@fmls)) G3192@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3190@t))) (G2d2d@syntax-dispatch G3190@t '_))) G3184@t))) (G2d2d@syntax-dispatch G3184@t '#(each+ any () any)))) G3181@fmls))) (set! G2ce9@let-macro (lambda (G3194@stx) ((lambda (G3196@t) ((lambda (G3198@ls/false) (if G3198@ls/false (apply (lambda (G319a@lhs* G319b@rhs* G319c@b G319d@b*) (if (G2b46@valid-bound-ids? G319a@lhs*) (G2ce3@bless (cons (cons 'lambda (cons G319a@lhs* (cons G319c@b G319d@b*))) G319b@rhs*)) (G2ce7@invalid-fmls-error G3194@stx G319a@lhs*))) G3198@ls/false) ((lambda (G31a2@t) ((lambda (G31a4@ls/false) (if (and G31a4@ls/false (apply (lambda (G31a6@f G31a7@lhs* G31a8@rhs* G31a9@b G31aa@b*) (G2b3c@id? G31a6@f)) G31a4@ls/false)) (apply (lambda (G31b0@f G31b1@lhs* G31b2@rhs* G31b3@b G31b4@b*) (if (G2b46@valid-bound-ids? G31b1@lhs*) (G2ce3@bless (cons (list 'letrec (list (list G31b0@f (cons 'lambda (cons G31b1@lhs* (cons G31b3@b G31b4@b*))))) G31b0@f) G31b2@rhs*)) (G2ce7@invalid-fmls-error G3194@stx G31b1@lhs*))) G31a4@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G31a2@t))) (G2d2d@syntax-dispatch G31a2@t '(_ any #(each (any any)) any . each-any)))) G3196@t))) (G2d2d@syntax-dispatch G3196@t '(_ #(each (any any)) any . each-any)))) G3194@stx))) (set! G2ceb@let-values-macro (lambda (G31ba@stx) ((lambda (G31bd@rename G31bf@rename*) (begin (set! G31bd@rename (lambda (G321f@x G3220@old* G3221@new*) (begin (if (not (G2b3c@id? G321f@x)) (G2e18@syntax-violation '#f '"not an indentifier" G31ba@stx G321f@x) (void)) (if (G2b4a@bound-id-member? G321f@x G3220@old*) (G2e18@syntax-violation '#f '"duplicate binding" G31ba@stx G321f@x) (void)) ((lambda (G3225@y) (values G3225@y (cons G321f@x G3220@old*) (cons G3225@y G3221@new*))) (gensym (G2e1e@syntax->datum G321f@x)))))) (set! G31bf@rename* (lambda (G320d@x* G320e@old* G320f@new*) (if (null? G320d@x*) (values '() G320e@old* G320f@new*) (call-with-values (lambda () (G31bd@rename (car G320d@x*) G320e@old* G320f@new*)) (lambda (G3213@x G3214@old* G3215@new*) (call-with-values (lambda () (G31bf@rename* (cdr G320d@x*) G3214@old* G3215@new*)) (lambda (G3219@x* G321a@old* G321b@new*) (values (cons G3213@x G3219@x*) G321a@old* G321b@new*)))))))) ((lambda (G31c0@t) ((lambda (G31c2@ls/false) (if G31c2@ls/false (apply (lambda (G31c4@b G31c5@b*) (cons* (G2ce3@bless 'let) '() G31c4@b G31c5@b*)) G31c2@ls/false) ((lambda (G31c8@t) ((lambda (G31ca@ls/false) (if G31ca@ls/false (apply (lambda (G31cc@lhs* G31cd@rhs* G31ce@b G31cf@b*) (G2ce3@bless ((letrec ((G31d4@f (lambda (G31d6@lhs* G31d7@rhs* G31d8@old* G31d9@new*) (if (null? G31d6@lhs*) (cons 'let (cons (map list G31d8@old* G31d9@new*) (cons G31ce@b G31cf@b*))) ((lambda (G31de@t) ((lambda (G31e0@ls/false) (if G31e0@ls/false (apply (lambda (G31e2@x*) (call-with-values (lambda () (G31bf@rename* G31e2@x* G31d8@old* G31d9@new*)) (lambda (G31e7@G31e4 G31e8@G31e5 G31e9@G31e6) ((lambda (G31ed@new* G31ee@old* G31ef@y*) (list 'call-with-values (list 'lambda '() (car G31d7@rhs*)) (list 'lambda G31ef@y* (G31d4@f (cdr G31d6@lhs*) (cdr G31d7@rhs*) G31ee@old* G31ed@new*)))) G31e9@G31e6 G31e8@G31e5 G31e7@G31e4)))) G31e0@ls/false) ((lambda (G31f3@t) ((lambda (G31f5@ls/false) (if G31f5@ls/false (apply (lambda (G31f7@x* G31f8@x) (call-with-values (lambda () (G31bd@rename G31f8@x G31d8@old* G31d9@new*)) (lambda (G31fb@y G31fc@old* G31fd@new*) (call-with-values (lambda () (G31bf@rename* G31f7@x* G31fc@old* G31fd@new*)) (lambda (G3201@y* G3202@old* G3203@new*) (list 'call-with-values (list 'lambda '() (car G31d7@rhs*)) (list 'lambda (append G3201@y* G31fb@y) (G31d4@f (cdr G31d6@lhs*) (cdr G31d7@rhs*) G3202@old* G3203@new*)))))))) G31f5@ls/false) ((lambda (G3207@t) ((lambda (G3209@ls/false) (if G3209@ls/false (apply (lambda (G320b@others) (G2e18@syntax-violation '#f '"malformed bindings" G31ba@stx G320b@others)) G3209@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3207@t))) (G2d2d@syntax-dispatch G3207@t 'any))) G31f3@t))) (G2d2d@syntax-dispatch G31f3@t '#(each+ any () any)))) G31de@t))) (G2d2d@syntax-dispatch G31de@t 'each-any))) (car G31d6@lhs*)))))) G31d4@f) G31cc@lhs* G31cd@rhs* '() '()))) G31ca@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G31c8@t))) (G2d2d@syntax-dispatch G31c8@t '(_ #(each (any any)) any . each-any)))) G31c0@t))) (G2d2d@syntax-dispatch G31c0@t '(_ () any . each-any)))) G31ba@stx))) '#f '#f))) (set! G2ced@let*-values-macro (lambda (G3227@stx) ((lambda (G322a@check) (begin (set! G322a@check (lambda (G3259@x*) (if (not (null? G3259@x*)) ((lambda (G325b@x) (begin (if (not (G2b3c@id? G325b@x)) (G2e18@syntax-violation '#f '"not an identifier" G3227@stx G325b@x) (void)) (G322a@check (cdr G3259@x*)) (if (G2b4a@bound-id-member? G325b@x (cdr G3259@x*)) (G2e18@syntax-violation '#f '"duplicate identifier" G3227@stx G325b@x) (void)))) (car G3259@x*)) (void)))) ((lambda (G322b@t) ((lambda (G322d@ls/false) (if G322d@ls/false (apply (lambda (G322f@b G3230@b*) (cons* (G2ce3@bless 'let) '() G322f@b G3230@b*)) G322d@ls/false) ((lambda (G3233@t) ((lambda (G3235@ls/false) (if G3235@ls/false (apply (lambda (G3237@lhs* G3238@rhs* G3239@b G323a@b*) (G2ce3@bless ((letrec ((G323f@f (lambda (G3241@lhs* G3242@rhs*) (if (null? G3241@lhs*) (cons 'begin (cons G3239@b G323a@b*)) ((lambda (G3245@t) ((lambda (G3247@ls/false) (if G3247@ls/false (apply (lambda (G3249@x*) (begin (G322a@check G3249@x*) (list 'call-with-values (list 'lambda '() (car G3242@rhs*)) (list 'lambda G3249@x* (G323f@f (cdr G3241@lhs*) (cdr G3242@rhs*)))))) G3247@ls/false) ((lambda (G324b@t) ((lambda (G324d@ls/false) (if G324d@ls/false (apply (lambda (G324f@x* G3250@x) (begin (G322a@check (cons G3250@x G324f@x*)) (list 'call-with-values (list 'lambda '() (car G3242@rhs*)) (list 'lambda (append G324f@x* G3250@x) (G323f@f (cdr G3241@lhs*) (cdr G3242@rhs*)))))) G324d@ls/false) ((lambda (G3253@t) ((lambda (G3255@ls/false) (if G3255@ls/false (apply (lambda (G3257@others) (G2e18@syntax-violation '#f '"malformed bindings" G3227@stx G3257@others)) G3255@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3253@t))) (G2d2d@syntax-dispatch G3253@t 'any))) G324b@t))) (G2d2d@syntax-dispatch G324b@t '#(each+ any () any)))) G3245@t))) (G2d2d@syntax-dispatch G3245@t 'each-any))) (car G3241@lhs*)))))) G323f@f) G3237@lhs* G3238@rhs*))) G3235@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3233@t))) (G2d2d@syntax-dispatch G3233@t '(_ #(each (any any)) any . each-any)))) G322b@t))) (G2d2d@syntax-dispatch G322b@t '(_ () any . each-any)))) G3227@stx))) '#f))) (set! G2cef@trace-lambda-macro (lambda (G325d@stx) ((lambda (G325f@t) ((lambda (G3261@ls/false) (if G3261@ls/false (apply (lambda (G3263@who G3264@fmls G3265@b G3266@b*) (if (G2b46@valid-bound-ids? G3264@fmls) (G2ce3@bless (list 'make-traced-procedure (list 'quote G3263@who) (cons 'lambda (cons G3264@fmls (cons G3265@b G3266@b*))))) (G2ce7@invalid-fmls-error G325d@stx G3264@fmls))) G3261@ls/false) ((lambda (G326b@t) ((lambda (G326d@ls/false) (if G326d@ls/false (apply (lambda (G326f@who G3270@fmls G3271@last G3272@b G3273@b*) (if (G2b46@valid-bound-ids? (cons G3271@last G3270@fmls)) (G2ce3@bless (list 'make-traced-procedure (list 'quote G326f@who) (cons 'lambda (cons (append G3270@fmls G3271@last) (cons G3272@b G3273@b*))))) (G2ce7@invalid-fmls-error G325d@stx (append G3270@fmls G3271@last)))) G326d@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G326b@t))) (G2d2d@syntax-dispatch G326b@t '(_ any #(each+ any () any) any . each-any)))) G325f@t))) (G2d2d@syntax-dispatch G325f@t '(_ any each-any any . each-any)))) G325d@stx))) (set! G2cf1@trace-define-macro (lambda (G3279@stx) ((lambda (G327b@t) ((lambda (G327d@ls/false) (if G327d@ls/false (apply (lambda (G327f@who G3280@fmls G3281@b G3282@b*) (if (G2b46@valid-bound-ids? G3280@fmls) (G2ce3@bless (list 'define G327f@who (list 'make-traced-procedure (list 'quote G327f@who) (cons 'lambda (cons G3280@fmls (cons G3281@b G3282@b*)))))) (G2ce7@invalid-fmls-error G3279@stx G3280@fmls))) G327d@ls/false) ((lambda (G3287@t) ((lambda (G3289@ls/false) (if G3289@ls/false (apply (lambda (G328b@who G328c@fmls G328d@last G328e@b G328f@b*) (if (G2b46@valid-bound-ids? (cons G328d@last G328c@fmls)) (G2ce3@bless (list 'define G328b@who (list 'make-traced-procedure (list 'quote G328b@who) (cons 'lambda (cons (append G328c@fmls G328d@last) (cons G328e@b G328f@b*)))))) (G2ce7@invalid-fmls-error G3279@stx (append G328c@fmls G328d@last)))) G3289@ls/false) ((lambda (G3295@t) ((lambda (G3297@ls/false) (if G3297@ls/false (apply (lambda (G3299@who G329a@expr) (if (G2b3c@id? G3299@who) (G2ce3@bless (list 'define G3299@who (list 'let (list (list 'v G329a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G3299@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G2e18@syntax-violation '#f '"invalid name" G3279@stx))) G3297@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3295@t))) (G2d2d@syntax-dispatch G3295@t '(_ any any)))) G3287@t))) (G2d2d@syntax-dispatch G3287@t '(_ (any . #(each+ any () any)) any . each-any)))) G327b@t))) (G2d2d@syntax-dispatch G327b@t '(_ (any . each-any) any . each-any)))) G3279@stx))) (set! G2cf3@trace-define-syntax-macro (lambda (G329d@stx) ((lambda (G329f@t) ((lambda (G32a1@ls/false) (if G32a1@ls/false (apply (lambda (G32a3@who G32a4@expr) (if (G2b3c@id? G32a3@who) (G2ce3@bless (list 'define-syntax G32a3@who (list 'make-traced-macro (list 'quote G32a3@who) G32a4@expr))) (G2e18@syntax-violation '#f '"invalid name" G329d@stx))) G32a1@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G329f@t))) (G2d2d@syntax-dispatch G329f@t '(_ any any)))) G329d@stx))) (set! G2cf5@trace-let/rec-syntax (lambda (G32a7@who) (lambda (G32a9@stx) ((lambda (G32ab@t) ((lambda (G32ad@ls/false) (if G32ad@ls/false (apply (lambda (G32af@lhs* G32b0@rhs* G32b1@b G32b2@b*) (if (G2b46@valid-bound-ids? G32af@lhs*) ((lambda (G32b7@rhs*) (G2ce3@bless (cons G32a7@who (cons (map list G32af@lhs* G32b7@rhs*) (cons G32b1@b G32b2@b*))))) (map (lambda (G32b9@lhs G32ba@rhs) (list 'make-traced-macro (list 'quote G32b9@lhs) G32ba@rhs)) G32af@lhs* G32b0@rhs*)) (G2ce7@invalid-fmls-error G32a9@stx G32af@lhs*))) G32ad@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G32ab@t))) (G2d2d@syntax-dispatch G32ab@t '(_ #(each (any any)) any . each-any)))) G32a9@stx)))) (set! G2cf7@trace-let-syntax-macro (G2cf5@trace-let/rec-syntax 'let-syntax)) (set! G2cf9@trace-letrec-syntax-macro (G2cf5@trace-let/rec-syntax 'letrec-syntax)) (set! G2cfb@guard-macro (lambda (G32bd@x) ((lambda (G32c0@gen-clauses) (begin (set! G32c0@gen-clauses (lambda (G32d7@con G32d8@outerk G32d9@clause*) ((lambda (G32de@f G32e0@f*) (begin (set! G32de@f (lambda (G3313@x G3314@k) ((lambda (G3317@t) ((lambda (G3319@ls/false) (if G3319@ls/false (apply (lambda (G331b@e G331c@p) ((lambda (G331f@t) (list 'let (list (list G331f@t G331b@e)) (list 'if G331f@t (list G331c@p G331f@t) G3314@k))) (gensym))) G3319@ls/false) ((lambda (G3321@t) ((lambda (G3323@ls/false) (if G3323@ls/false (apply (lambda (G3325@e) ((lambda (G3327@t) (list 'let (list (list G3327@t G3325@e)) (list 'if G3327@t G3327@t G3314@k))) (gensym))) G3323@ls/false) ((lambda (G3329@t) ((lambda (G332b@ls/false) (if G332b@ls/false (apply (lambda (G332d@e G332e@v G332f@v*) (list 'if G332d@e (cons 'begin (cons G332e@v G332f@v*)) G3314@k)) G332b@ls/false) ((lambda (G3333@t) ((lambda (G3335@ls/false) (if G3335@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid guard clause" G3313@x)) G3335@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3333@t))) (G2d2d@syntax-dispatch G3333@t '_))) G3329@t))) (G2d2d@syntax-dispatch G3329@t '(any any . each-any)))) G3321@t))) (G2d2d@syntax-dispatch G3321@t '(any)))) G3317@t))) (G2d2d@syntax-dispatch G3317@t '(any #(scheme-id =>) any)))) G3313@x))) (set! G32e0@f* (lambda (G32eb@x*) ((lambda (G32ed@t) ((lambda (G32ef@ls/false) (if G32ef@ls/false (apply (lambda () ((lambda (G32f1@g) (values (list G32f1@g (list 'lambda '() (list 'raise-continuable G32d7@con))) G32f1@g)) (gensym))) G32ef@ls/false) ((lambda (G32f3@t) ((lambda (G32f5@ls/false) (if G32f5@ls/false (apply (lambda (G32f7@e G32f8@e*) (values (cons 'begin (cons G32f7@e G32f8@e*)) '#f)) G32f5@ls/false) ((lambda (G32fb@t) ((lambda (G32fd@ls/false) (if G32fd@ls/false (apply (lambda (G32ff@cls G3300@cls*) (call-with-values (lambda () (G32e0@f* G3300@cls*)) (lambda (G3305@G3303 G3306@G3304) ((lambda (G3309@g G330a@e) (values (G32de@f G32ff@cls G330a@e) G3309@g)) G3306@G3304 G3305@G3303)))) G32fd@ls/false) ((lambda (G330d@t) ((lambda (G330f@ls/false) (if G330f@ls/false (apply (lambda (G3311@others) (G2e18@syntax-violation '#f '"invalid guard clause" G3311@others)) G330f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G330d@t))) (G2d2d@syntax-dispatch G330d@t 'any))) G32fb@t))) (G2d2d@syntax-dispatch G32fb@t '(any . any)))) G32f3@t))) (G2d2d@syntax-dispatch G32f3@t '((#(scheme-id else) any . each-any))))) G32ed@t))) (G2d2d@syntax-dispatch G32ed@t '()))) G32eb@x*))) (call-with-values (lambda () (G32e0@f* G32d9@clause*)) (lambda (G32e3@G32e1 G32e4@G32e2) ((lambda (G32e7@raisek G32e8@code) (if G32e7@raisek (list (list 'call/cc (list 'lambda (list G32e7@raisek) (list G32d8@outerk (list 'lambda '() G32e8@code))))) (list G32d8@outerk (list 'lambda '() G32e8@code)))) G32e4@G32e2 G32e3@G32e1))))) '#f '#f))) ((lambda (G32c1@t) ((lambda (G32c3@ls/false) (if (and G32c3@ls/false (apply (lambda (G32c5@con G32c6@clause* G32c7@b G32c8@b*) (G2b3c@id? G32c5@con)) G32c3@ls/false)) (apply (lambda (G32cd@con G32ce@clause* G32cf@b G32d0@b*) ((lambda (G32d5@outerk) (G2ce3@bless (list (list 'call/cc (list 'lambda (list G32d5@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G32cd@con) (G32c0@gen-clauses G32cd@con G32d5@outerk G32ce@clause*)) (cons 'lambda (cons '() (cons G32cf@b G32d0@b*)))))))))) (gensym))) G32c3@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G32c1@t))) (G2d2d@syntax-dispatch G32c1@t '(_ (any . each-any) any . each-any)))) G32bd@x))) '#f))) (set! G2cfd@define-enumeration-macro (lambda (G3337@stx) ((lambda (G333a@set? G333c@remove-dups) (begin (set! G333a@set? (lambda (G3353@x) (or (null? G3353@x) (and (not (memq (car G3353@x) (cdr G3353@x))) (G333a@set? (cdr G3353@x)))))) (set! G333c@remove-dups (lambda (G3351@ls) (if (null? G3351@ls) '() (cons (car G3351@ls) (G333c@remove-dups (remq (car G3351@ls) (cdr G3351@ls))))))) ((lambda (G333d@t) ((lambda (G333f@ls/false) (if (and G333f@ls/false (apply (lambda (G3341@name G3342@id* G3343@maker) (and (G2b3c@id? G3341@name) (G2b3c@id? G3343@maker) (for-all G2b3c@id? G3342@id*))) G333f@ls/false)) (apply (lambda (G3347@name G3348@id* G3349@maker) ((lambda (G334d@name* G334e@mk) (G2ce3@bless (list 'begin (list 'define G334e@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G334d@name*)))) (list 'define-syntax G3347@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G334d@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3347@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3349@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3349@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G334d@name*)) (cons 'syntax-violation (cons (list 'quote G3349@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G334e@mk '('(n* ...)))))))))))) (G333c@remove-dups (G2e1e@syntax->datum G3348@id*)) (gensym))) G333f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G333d@t))) (G2d2d@syntax-dispatch G333d@t '(_ any each-any any)))) G3337@stx))) '#f '#f))) (set! G2cff@time-macro (lambda (G3355@stx) ((lambda (G3357@t) ((lambda (G3359@ls/false) (if G3359@ls/false (apply (lambda (G335b@expr) ((lambda (G335d@str) (G2ce3@bless (list 'time-it G335d@str (list 'lambda '() G335b@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3361@G335f G3362@G3360) ((lambda (G3365@e G3366@p) (begin (write (G2e1e@syntax->datum G335b@expr) G3366@p) (G3365@e))) G3362@G3360 G3361@G335f))))) G3359@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3357@t))) (G2d2d@syntax-dispatch G3357@t '(_ any)))) G3355@stx))) (set! G2d01@delay-macro (lambda (G3369@stx) ((lambda (G336b@t) ((lambda (G336d@ls/false) (if G336d@ls/false (apply (lambda (G336f@expr) (G2ce3@bless (list 'make-promise (list 'lambda '() G336f@expr)))) G336d@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G336b@t))) (G2d2d@syntax-dispatch G336b@t '(_ any)))) G3369@stx))) (set! G2d03@assert-macro (lambda (G3371@stx) ((lambda (G3373@t) ((lambda (G3375@ls/false) (if G3375@ls/false (apply (lambda (G3377@expr) ((lambda (G3379@pos) (G2ce3@bless (list 'unless G3377@expr (list 'assertion-error (list 'quote G3377@expr) (list 'quote G3379@pos))))) (or (G2e10@expression-position G3371@stx) (G2e10@expression-position G3377@expr)))) G3375@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3373@t))) (G2d2d@syntax-dispatch G3373@t '(_ any)))) G3371@stx))) (set! G2d05@endianness-macro (lambda (G337b@stx) ((lambda (G337d@t) ((lambda (G337f@ls/false) (if G337f@ls/false (apply (lambda (G3381@e) ((lambda (G3383@t) (if (memv G3383@t '(little)) (G2ce3@bless ''little) (if (memv G3383@t '(big)) (G2ce3@bless ''big) (G2e18@syntax-violation '#f '"endianness must be big or little" G337b@stx)))) (G2e1e@syntax->datum G3381@e))) G337f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G337d@t))) (G2d2d@syntax-dispatch G337d@t '(_ any)))) G337b@stx))) (set! G2d07@identifier-syntax-macro (lambda (G3385@stx) ((lambda (G3387@t) ((lambda (G3389@ls/false) (if G3389@ls/false (apply (lambda (G338b@expr) (G2ce3@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G338b@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G338b@expr) '((syntax (e* ...)))))))))) G3389@ls/false) ((lambda (G338d@t) ((lambda (G338f@ls/false) (if (and G338f@ls/false (apply (lambda (G3391@id1 G3392@expr1 G3393@id2 G3394@expr2 G3395@expr3) (and (G2b3c@id? G3391@id1) (G2b3c@id? G3393@id2) (G2b3c@id? G3394@expr2))) G338f@ls/false)) (apply (lambda (G339b@id1 G339c@expr1 G339d@id2 G339e@expr2 G339f@expr3) (G2ce3@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G339c@expr1)) (list (list 'set! 'id G339e@expr2) (list 'syntax G339f@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G339c@expr1 '(e* ...))))))))) G338f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G338d@t))) (G2d2d@syntax-dispatch G338d@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3387@t))) (G2d2d@syntax-dispatch G3387@t '(_ any)))) G3385@stx))) (set! G2d09@do-macro (lambda (G33a5@stx) ((lambda (G33a8@bind) (begin (set! G33a8@bind (lambda (G33bf@x) ((lambda (G33c1@t) ((lambda (G33c3@ls/false) (if G33c3@ls/false (apply (lambda (G33c5@x G33c6@init) (list G33c5@x G33c6@init G33c5@x)) G33c3@ls/false) ((lambda (G33c9@t) ((lambda (G33cb@ls/false) (if G33cb@ls/false (apply (lambda (G33cd@x G33ce@init G33cf@step) (list G33cd@x G33ce@init G33cf@step)) G33cb@ls/false) ((lambda (G33d3@t) ((lambda (G33d5@ls/false) (if G33d5@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid binding" G33a5@stx)) G33d5@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G33d3@t))) (G2d2d@syntax-dispatch G33d3@t '_))) G33c9@t))) (G2d2d@syntax-dispatch G33c9@t '(any any any)))) G33c1@t))) (G2d2d@syntax-dispatch G33c1@t '(any any)))) G33bf@x))) ((lambda (G33a9@t) ((lambda (G33ab@ls/false) (if G33ab@ls/false (apply (lambda (G33ad@binding* G33ae@test G33af@expr* G33b0@command*) ((lambda (G33b5@t) ((lambda (G33b7@ls/false) (if G33b7@ls/false (apply (lambda (G33b9@x* G33ba@init* G33bb@step*) (if (G2b46@valid-bound-ids? G33b9@x*) (G2ce3@bless (list 'letrec (list (list 'loop (list 'lambda G33b9@x* (list 'if G33ae@test (cons 'begin (cons '(if #f #f) G33af@expr*)) (cons 'begin (append G33b0@command* (list (cons 'loop G33bb@step*)))))))) (cons 'loop G33ba@init*))) (G2e18@syntax-violation '#f '"invalid bindings" G33a5@stx))) G33b7@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G33b5@t))) (G2d2d@syntax-dispatch G33b5@t '#(each (any any any))))) (map G33a8@bind G33ad@binding*))) G33ab@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G33a9@t))) (G2d2d@syntax-dispatch G33a9@t '(_ each-any (any . each-any) . each-any)))) G33a5@stx))) '#f))) (set! G2d0b@let*-macro (lambda (G33d7@stx) ((lambda (G33d9@t) ((lambda (G33db@ls/false) (if (and G33db@ls/false (apply (lambda (G33dd@lhs* G33de@rhs* G33df@b G33e0@b*) (for-all G2b3c@id? G33dd@lhs*)) G33db@ls/false)) (apply (lambda (G33e5@lhs* G33e6@rhs* G33e7@b G33e8@b*) (G2ce3@bless ((letrec ((G33ed@f (lambda (G33ef@x*) (if (null? G33ef@x*) (cons 'let (cons '() (cons G33e7@b G33e8@b*))) (list 'let (list (car G33ef@x*)) (G33ed@f (cdr G33ef@x*))))))) G33ed@f) (map list G33e5@lhs* G33e6@rhs*)))) G33db@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G33d9@t))) (G2d2d@syntax-dispatch G33d9@t '(_ #(each (any any)) any . each-any)))) G33d7@stx))) (set! G2d0d@or-macro (lambda (G33f1@stx) ((lambda (G33f3@t) ((lambda (G33f5@ls/false) (if G33f5@ls/false (apply (lambda () '#f) G33f5@ls/false) ((lambda (G33f7@t) ((lambda (G33f9@ls/false) (if G33f9@ls/false (apply (lambda (G33fb@e G33fc@e*) (G2ce3@bless ((letrec ((G33ff@f (lambda (G3401@e G3402@e*) (if (null? G3402@e*) (list 'begin '#f G3401@e) (list 'let (list (list 't G3401@e)) (list 'if 't 't (G33ff@f (car G3402@e*) (cdr G3402@e*)))))))) G33ff@f) G33fb@e G33fc@e*))) G33f9@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G33f7@t))) (G2d2d@syntax-dispatch G33f7@t '(_ any . each-any)))) G33f3@t))) (G2d2d@syntax-dispatch G33f3@t '(_)))) G33f1@stx))) (set! G2d0f@and-macro (lambda (G3405@stx) ((lambda (G3407@t) ((lambda (G3409@ls/false) (if G3409@ls/false (apply (lambda () '#t) G3409@ls/false) ((lambda (G340b@t) ((lambda (G340d@ls/false) (if G340d@ls/false (apply (lambda (G340f@e G3410@e*) (G2ce3@bless ((letrec ((G3413@f (lambda (G3415@e G3416@e*) (if (null? G3416@e*) (list 'begin '#f G3415@e) (cons 'if (cons G3415@e (cons (G3413@f (car G3416@e*) (cdr G3416@e*)) '(#f)))))))) G3413@f) G340f@e G3410@e*))) G340d@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G340b@t))) (G2d2d@syntax-dispatch G340b@t '(_ any . each-any)))) G3407@t))) (G2d2d@syntax-dispatch G3407@t '(_)))) G3405@stx))) (set! G2d11@cond-macro (lambda (G3419@stx) ((lambda (G341b@t) ((lambda (G341d@ls/false) (if G341d@ls/false (apply (lambda (G341f@cls G3420@cls*) (G2ce3@bless ((letrec ((G3423@f (lambda (G3425@cls G3426@cls*) (if (null? G3426@cls*) ((lambda (G3429@t) ((lambda (G342b@ls/false) (if G342b@ls/false (apply (lambda (G342d@e G342e@e*) (cons 'begin (cons G342d@e G342e@e*))) G342b@ls/false) ((lambda (G3431@t) ((lambda (G3433@ls/false) (if G3433@ls/false (apply (lambda (G3435@e G3436@p) (list 'let (list (list 't G3435@e)) (list 'if 't (cons G3436@p '(t))))) G3433@ls/false) ((lambda (G3439@t) ((lambda (G343b@ls/false) (if G343b@ls/false (apply (lambda (G343d@e) (cons 'or (cons G343d@e '((if #f #f))))) G343b@ls/false) ((lambda (G343f@t) ((lambda (G3441@ls/false) (if G3441@ls/false (apply (lambda (G3443@e G3444@e*) (list 'if G3443@e (cons 'begin G3444@e*))) G3441@ls/false) ((lambda (G3447@t) ((lambda (G3449@ls/false) (if G3449@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid last clause" G3419@stx)) G3449@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3447@t))) (G2d2d@syntax-dispatch G3447@t '_))) G343f@t))) (G2d2d@syntax-dispatch G343f@t '(any . each-any)))) G3439@t))) (G2d2d@syntax-dispatch G3439@t '(any)))) G3431@t))) (G2d2d@syntax-dispatch G3431@t '(any #(scheme-id =>) any)))) G3429@t))) (G2d2d@syntax-dispatch G3429@t '(#(scheme-id else) any . each-any)))) G3425@cls) ((lambda (G344b@t) ((lambda (G344d@ls/false) (if G344d@ls/false (apply (lambda (G344f@e G3450@e*) (G2e18@syntax-violation '#f '"incorrect position of keyword else" G3419@stx)) G344d@ls/false) ((lambda (G3453@t) ((lambda (G3455@ls/false) (if G3455@ls/false (apply (lambda (G3457@e G3458@p) (list 'let (list (list 't G3457@e)) (list 'if 't (cons G3458@p '(t)) (G3423@f (car G3426@cls*) (cdr G3426@cls*))))) G3455@ls/false) ((lambda (G345b@t) ((lambda (G345d@ls/false) (if G345d@ls/false (apply (lambda (G345f@e) (list 'or G345f@e (G3423@f (car G3426@cls*) (cdr G3426@cls*)))) G345d@ls/false) ((lambda (G3461@t) ((lambda (G3463@ls/false) (if G3463@ls/false (apply (lambda (G3465@e G3466@e*) (list 'if G3465@e (cons 'begin G3466@e*) (G3423@f (car G3426@cls*) (cdr G3426@cls*)))) G3463@ls/false) ((lambda (G3469@t) ((lambda (G346b@ls/false) (if G346b@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid last clause" G3419@stx)) G346b@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3469@t))) (G2d2d@syntax-dispatch G3469@t '_))) G3461@t))) (G2d2d@syntax-dispatch G3461@t '(any . each-any)))) G345b@t))) (G2d2d@syntax-dispatch G345b@t '(any)))) G3453@t))) (G2d2d@syntax-dispatch G3453@t '(any #(scheme-id =>) any)))) G344b@t))) (G2d2d@syntax-dispatch G344b@t '(#(scheme-id else) any . each-any)))) G3425@cls))))) G3423@f) G341f@cls G3420@cls*))) G341d@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G341b@t))) (G2d2d@syntax-dispatch G341b@t '(_ any . each-any)))) G3419@stx))) (set! G2d13@do-include (lambda (G346d@stx G346e@id G346f@filename) ((lambda (G3473@filename) (begin (if (not (and (string? G3473@filename) (G2b3c@id? G346e@id))) (G2e18@syntax-violation '#f '"invalid syntax" G346d@stx) (void)) (cons (G2ce3@bless 'begin) (with-input-from-file G3473@filename (lambda () ((letrec ((G3475@f (lambda (G3477@ls) ((lambda (G3479@x) (if (eof-object? G3479@x) (reverse G3477@ls) (G3475@f (cons (G2b1a@datum->stx G346e@id G3479@x) G3477@ls)))) (G26e3@G2604@read-annotated))))) G3475@f) '())))))) (G2b52@stx->datum G346f@filename)))) (set! G2d15@include-macro (lambda (G347b@e) ((lambda (G347d@t) ((lambda (G347f@ls/false) (if G347f@ls/false (apply (lambda (G3481@id G3482@filename) (G2d13@do-include G347b@e G3481@id G3482@filename)) G347f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G347d@t))) (G2d2d@syntax-dispatch G347d@t '(any any)))) G347b@e))) (set! G2d17@include-into-macro (lambda (G3485@e) ((lambda (G3487@t) ((lambda (G3489@ls/false) (if G3489@ls/false (apply (lambda (G348b@id G348c@filename) (G2d13@do-include G3485@e G348b@id G348c@filename)) G3489@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3487@t))) (G2d2d@syntax-dispatch G3487@t '(_ any any)))) G3485@e))) (set! G2d19@syntax-rules-macro (lambda (G348f@e) ((lambda (G3491@t) ((lambda (G3493@ls/false) (if G3493@ls/false (apply (lambda (G3495@lits G3496@pat* G3497@tmp*) (begin (G2d33@verify-literals G3495@lits G348f@e) (G2ce3@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3495@lits (map (lambda (G349b@pat G349c@tmp) ((lambda (G349f@t) ((lambda (G34a1@ls/false) (if G34a1@ls/false (apply (lambda (G34a3@rest) (list (cons 'g G34a3@rest) (list 'syntax G349c@tmp))) G34a1@ls/false) ((lambda (G34a5@t) ((lambda (G34a7@ls/false) (if G34a7@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid syntax-rules pattern" G348f@e G349b@pat)) G34a7@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G34a5@t))) (G2d2d@syntax-dispatch G34a5@t '_))) G349f@t))) (G2d2d@syntax-dispatch G349f@t '(_ . any)))) G349b@pat)) G3496@pat* G3497@tmp*)))))))) G3493@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3491@t))) (G2d2d@syntax-dispatch G3491@t '(_ each-any . #(each (any any)))))) G348f@e))) (set! G2d1b@quasiquote-macro ((lambda () ((lambda (G34aa@datum G34c6@quasicons* G34c8@quasicons G34ca@quasiappend G34cc@quasivector G34ce@vquasi G34d0@quasi) (begin (set! G34aa@datum (lambda (G35ab@x) (list (G2cb7@scheme-stx 'quote) (G2b24@mkstx G35ab@x '() '() '())))) (set! G34c6@quasicons* (lambda (G35a3@x G35a4@y) ((letrec ((G35a7@f (lambda (G35a9@x) (if (null? G35a9@x) G35a4@y (G34c8@quasicons (car G35a9@x) (G35a7@f (cdr G35a9@x))))))) G35a7@f) G35a3@x))) (set! G34c8@quasicons (lambda (G357d@x G357e@y) ((lambda (G3581@t) ((lambda (G3583@ls/false) (if G3583@ls/false (apply (lambda (G3585@dy) ((lambda (G3587@t) ((lambda (G3589@ls/false) (if G3589@ls/false (apply (lambda (G358b@dx) (list (G2cb7@scheme-stx 'quote) (cons G358b@dx G3585@dy))) G3589@ls/false) ((lambda (G358d@t) ((lambda (G358f@ls/false) (if G358f@ls/false (apply (lambda () ((lambda (G3591@t) ((lambda (G3593@ls/false) (if G3593@ls/false (apply (lambda () (list (G2cb7@scheme-stx 'list) G357d@x)) G3593@ls/false) ((lambda (G3595@t) ((lambda (G3597@ls/false) (if G3597@ls/false (apply (lambda () (list (G2cb7@scheme-stx 'cons) G357d@x G357e@y)) G3597@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3595@t))) (G2d2d@syntax-dispatch G3595@t '_))) G3591@t))) (G2d2d@syntax-dispatch G3591@t '()))) G3585@dy)) G358f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G358d@t))) (G2d2d@syntax-dispatch G358d@t '_))) G3587@t))) (G2d2d@syntax-dispatch G3587@t '(#(scheme-id quote) any)))) G357d@x)) G3583@ls/false) ((lambda (G3599@t) ((lambda (G359b@ls/false) (if G359b@ls/false (apply (lambda (G359d@stuff) (cons* (G2cb7@scheme-stx 'list) G357d@x G359d@stuff)) G359b@ls/false) ((lambda (G359f@t) ((lambda (G35a1@ls/false) (if G35a1@ls/false (apply (lambda () (list (G2cb7@scheme-stx 'cons) G357d@x G357e@y)) G35a1@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G359f@t))) (G2d2d@syntax-dispatch G359f@t '_))) G3599@t))) (G2d2d@syntax-dispatch G3599@t '(#(scheme-id list) . each-any)))) G3581@t))) (G2d2d@syntax-dispatch G3581@t '(#(scheme-id quote) any)))) G357e@y))) (set! G34ca@quasiappend (lambda (G3563@x G3564@y) ((lambda (G3567@ls) (if (null? G3567@ls) (list (G2cb7@scheme-stx 'quote) '()) (if (null? (cdr G3567@ls)) (car G3567@ls) (cons* (G2cb7@scheme-stx 'append) G3567@ls)))) ((letrec ((G3569@f (lambda (G356b@x) (if (null? G356b@x) ((lambda (G356d@t) ((lambda (G356f@ls/false) (if G356f@ls/false (apply (lambda () '()) G356f@ls/false) ((lambda (G3571@t) ((lambda (G3573@ls/false) (if G3573@ls/false (apply (lambda () (list G3564@y)) G3573@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3571@t))) (G2d2d@syntax-dispatch G3571@t '_))) G356d@t))) (G2d2d@syntax-dispatch G356d@t '(#(scheme-id quote) ())))) G3564@y) ((lambda (G3575@t) ((lambda (G3577@ls/false) (if G3577@ls/false (apply (lambda () (G3569@f (cdr G356b@x))) G3577@ls/false) ((lambda (G3579@t) ((lambda (G357b@ls/false) (if G357b@ls/false (apply (lambda () (cons (car G356b@x) (G3569@f (cdr G356b@x)))) G357b@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3579@t))) (G2d2d@syntax-dispatch G3579@t '_))) G3575@t))) (G2d2d@syntax-dispatch G3575@t '(#(scheme-id quote) ())))) (car G356b@x)))))) G3569@f) G3563@x)))) (set! G34cc@quasivector (lambda (G3531@x) ((lambda (G3533@pat-x) ((lambda (G3535@t) ((lambda (G3537@ls/false) (if G3537@ls/false (apply (lambda (G3539@x*) (list (G2cb7@scheme-stx 'quote) (list->vector G3539@x*))) G3537@ls/false) ((lambda (G353b@t) ((lambda (G353d@ls/false) (if G353d@ls/false (apply (lambda () ((letrec ((G353f@f (lambda (G3541@x G3542@k) ((lambda (G3545@t) ((lambda (G3547@ls/false) (if G3547@ls/false (apply (lambda (G3549@x*) (G3542@k (map (lambda (G354b@x) (list (G2cb7@scheme-stx 'quote) G354b@x)) G3549@x*))) G3547@ls/false) ((lambda (G354d@t) ((lambda (G354f@ls/false) (if G354f@ls/false (apply (lambda (G3551@x*) (G3542@k G3551@x*)) G354f@ls/false) ((lambda (G3553@t) ((lambda (G3555@ls/false) (if G3555@ls/false (apply (lambda (G3557@x G3558@y) (G353f@f G3558@y (lambda (G355b@ls) (G3542@k (cons G3557@x G355b@ls))))) G3555@ls/false) ((lambda (G355d@t) ((lambda (G355f@ls/false) (if G355f@ls/false (apply (lambda () (list (G2cb7@scheme-stx 'list->vector) G3533@pat-x)) G355f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G355d@t))) (G2d2d@syntax-dispatch G355d@t '_))) G3553@t))) (G2d2d@syntax-dispatch G3553@t '(#(scheme-id cons) any any)))) G354d@t))) (G2d2d@syntax-dispatch G354d@t '(#(scheme-id list) . each-any)))) G3545@t))) (G2d2d@syntax-dispatch G3545@t '(#(scheme-id quote) each-any)))) G3541@x)))) G353f@f) G3531@x (lambda (G3561@ls) (cons* (G2cb7@scheme-stx 'vector) G3561@ls)))) G353d@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G353b@t))) (G2d2d@syntax-dispatch G353b@t '_))) G3535@t))) (G2d2d@syntax-dispatch G3535@t '(#(scheme-id quote) each-any)))) G3533@pat-x)) G3531@x))) (set! G34ce@vquasi (lambda (G350f@p G3510@lev) ((lambda (G3513@t) ((lambda (G3515@ls/false) (if G3515@ls/false (apply (lambda (G3517@p G3518@q) ((lambda (G351b@t) ((lambda (G351d@ls/false) (if G351d@ls/false (apply (lambda (G351f@p) (if (= G3510@lev '0) (G34c6@quasicons* G351f@p (G34ce@vquasi G3518@q G3510@lev)) (G34c8@quasicons (G34c8@quasicons (G34aa@datum 'unquote) (G34d0@quasi G351f@p (- G3510@lev '1))) (G34ce@vquasi G3518@q G3510@lev)))) G351d@ls/false) ((lambda (G3521@t) ((lambda (G3523@ls/false) (if G3523@ls/false (apply (lambda (G3525@p) (if (= G3510@lev '0) (G34ca@quasiappend G3525@p (G34ce@vquasi G3518@q G3510@lev)) (G34c8@quasicons (G34c8@quasicons (G34aa@datum 'unquote-splicing) (G34d0@quasi G3525@p (- G3510@lev '1))) (G34ce@vquasi G3518@q G3510@lev)))) G3523@ls/false) ((lambda (G3527@t) ((lambda (G3529@ls/false) (if G3529@ls/false (apply (lambda (G352b@p) (G34c8@quasicons (G34d0@quasi G352b@p G3510@lev) (G34ce@vquasi G3518@q G3510@lev))) G3529@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3527@t))) (G2d2d@syntax-dispatch G3527@t 'any))) G3521@t))) (G2d2d@syntax-dispatch G3521@t '(#(scheme-id unquote-splicing) . each-any)))) G351b@t))) (G2d2d@syntax-dispatch G351b@t '(#(scheme-id unquote) . each-any)))) G3517@p)) G3515@ls/false) ((lambda (G352d@t) ((lambda (G352f@ls/false) (if G352f@ls/false (apply (lambda () (list (G2cb7@scheme-stx 'quote) '())) G352f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G352d@t))) (G2d2d@syntax-dispatch G352d@t '()))) G3513@t))) (G2d2d@syntax-dispatch G3513@t '(any . any)))) G350f@p))) (set! G34d0@quasi (lambda (G34d9@p G34da@lev) ((lambda (G34dd@t) ((lambda (G34df@ls/false) (if G34df@ls/false (apply (lambda (G34e1@p) (if (= G34da@lev '0) G34e1@p (G34c8@quasicons (G34aa@datum 'unquote) (G34d0@quasi (list G34e1@p) (- G34da@lev '1))))) G34df@ls/false) ((lambda (G34e3@t) ((lambda (G34e5@ls/false) (if G34e5@ls/false (apply (lambda (G34e7@p G34e8@q) (if (= G34da@lev '0) (G34c6@quasicons* G34e7@p (G34d0@quasi G34e8@q G34da@lev)) (G34c8@quasicons (G34c8@quasicons (G34aa@datum 'unquote) (G34d0@quasi G34e7@p (- G34da@lev '1))) (G34d0@quasi G34e8@q G34da@lev)))) G34e5@ls/false) ((lambda (G34eb@t) ((lambda (G34ed@ls/false) (if G34ed@ls/false (apply (lambda (G34ef@p G34f0@q) (if (= G34da@lev '0) (G34ca@quasiappend G34ef@p (G34d0@quasi G34f0@q G34da@lev)) (G34c8@quasicons (G34c8@quasicons (G34aa@datum 'unquote-splicing) (G34d0@quasi G34ef@p (- G34da@lev '1))) (G34d0@quasi G34f0@q G34da@lev)))) G34ed@ls/false) ((lambda (G34f3@t) ((lambda (G34f5@ls/false) (if G34f5@ls/false (apply (lambda (G34f7@p) (G34c8@quasicons (G34aa@datum 'quasiquote) (G34d0@quasi (list G34f7@p) (+ G34da@lev '1)))) G34f5@ls/false) ((lambda (G34f9@t) ((lambda (G34fb@ls/false) (if G34fb@ls/false (apply (lambda (G34fd@p G34fe@q) (G34c8@quasicons (G34d0@quasi G34fd@p G34da@lev) (G34d0@quasi G34fe@q G34da@lev))) G34fb@ls/false) ((lambda (G3501@t) ((lambda (G3503@ls/false) (if (and G3503@ls/false (apply (lambda (G3505@x) (not (G2b04@stx? G3505@x))) G3503@ls/false)) (apply (lambda (G3507@x) (G34cc@quasivector (G34ce@vquasi G3507@x G34da@lev))) G3503@ls/false) ((lambda (G3509@t) ((lambda (G350b@ls/false) (if G350b@ls/false (apply (lambda (G350d@p) (list (G2cb7@scheme-stx 'quote) G350d@p)) G350b@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3509@t))) (G2d2d@syntax-dispatch G3509@t 'any))) G3501@t))) (G2d2d@syntax-dispatch G3501@t '#(vector each-any)))) G34f9@t))) (G2d2d@syntax-dispatch G34f9@t '(any . any)))) G34f3@t))) (G2d2d@syntax-dispatch G34f3@t '(#(scheme-id quasiquote) any)))) G34eb@t))) (G2d2d@syntax-dispatch G34eb@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G34e3@t))) (G2d2d@syntax-dispatch G34e3@t '((#(scheme-id unquote) . each-any) . any)))) G34dd@t))) (G2d2d@syntax-dispatch G34dd@t '(#(scheme-id unquote) any)))) G34d9@p))) (lambda (G34d1@x) ((lambda (G34d3@t) ((lambda (G34d5@ls/false) (if G34d5@ls/false (apply (lambda (G34d7@e) (G34d0@quasi G34d7@e '0)) G34d5@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G34d3@t))) (G2d2d@syntax-dispatch G34d3@t '(_ any)))) G34d1@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d1d@quasisyntax-macro ((lambda () ((lambda (G35ae@quasi) (begin (set! G35ae@quasi (lambda (G35c6@p G35c7@lev) ((lambda (G35ca@t) ((lambda (G35cc@ls/false) (if G35cc@ls/false (apply (lambda (G35ce@p) (if (= G35c7@lev '0) ((lambda (G35d0@g) (values (list G35d0@g) (list G35ce@p) G35d0@g)) (gensym)) (call-with-values (lambda () (G35ae@quasi G35ce@p (- G35c7@lev '1))) (lambda (G35d5@G35d2 G35d6@G35d3 G35d7@G35d4) ((lambda (G35db@p G35dc@rhs* G35dd@lhs*) (values G35dd@lhs* G35dc@rhs* (list 'unsyntax G35db@p))) G35d7@G35d4 G35d6@G35d3 G35d5@G35d2))))) G35cc@ls/false) ((lambda (G35e1@t) ((lambda (G35e3@ls/false) (if (and G35e3@ls/false (apply (lambda () (= G35c7@lev '0)) G35e3@ls/false)) (apply (lambda () (G2e18@syntax-violation '#f '"incorrect use of unsyntax" G35c6@p)) G35e3@ls/false) ((lambda (G35e5@t) ((lambda (G35e7@ls/false) (if G35e7@ls/false (apply (lambda (G35e9@p* G35ea@q) (call-with-values (lambda () (G35ae@quasi G35ea@q G35c7@lev)) (lambda (G35f0@G35ed G35f1@G35ee G35f2@G35ef) ((lambda (G35f6@q G35f7@rhs* G35f8@lhs*) (if (= G35c7@lev '0) ((lambda (G35fc@g*) (values (append G35fc@g* G35f8@lhs*) (append G35e9@p* G35f7@rhs*) (append G35fc@g* G35f6@q))) (map (lambda (G35fe@x) (gensym)) G35e9@p*)) (call-with-values (lambda () (G35ae@quasi G35e9@p* (- G35c7@lev '1))) (lambda (G3603@G3600 G3604@G3601 G3605@G3602) ((lambda (G3609@p* G360a@rhs2* G360b@lhs2*) (values (append G360b@lhs2* G35f8@lhs*) (append G360a@rhs2* G35f7@rhs*) (cons (cons 'unsyntax G3609@p*) G35f6@q))) G3605@G3602 G3604@G3601 G3603@G3600))))) G35f2@G35ef G35f1@G35ee G35f0@G35ed)))) G35e7@ls/false) ((lambda (G360f@t) ((lambda (G3611@ls/false) (if G3611@ls/false (apply (lambda (G3613@p* G3614@q) (call-with-values (lambda () (G35ae@quasi G3614@q G35c7@lev)) (lambda (G361a@G3617 G361b@G3618 G361c@G3619) ((lambda (G3620@q G3621@rhs* G3622@lhs*) (if (= G35c7@lev '0) ((lambda (G3626@g*) (values (append (map (lambda (G3628@g) (cons G3628@g '(...))) G3626@g*) G3622@lhs*) (append G3613@p* G3621@rhs*) (append (apply append (map (lambda (G362a@g) (cons G362a@g '(...))) G3626@g*)) G3620@q))) (map (lambda (G362c@x) (gensym)) G3613@p*)) (call-with-values (lambda () (G35ae@quasi G3613@p* (- G35c7@lev '1))) (lambda (G3631@G362e G3632@G362f G3633@G3630) ((lambda (G3637@p* G3638@rhs2* G3639@lhs2*) (values (append G3639@lhs2* G3622@lhs*) (append G3638@rhs2* G3621@rhs*) (cons (cons 'unsyntax-splicing G3637@p*) G3620@q))) G3633@G3630 G3632@G362f G3631@G362e))))) G361c@G3619 G361b@G3618 G361a@G3617)))) G3611@ls/false) ((lambda (G363d@t) ((lambda (G363f@ls/false) (if (and G363f@ls/false (apply (lambda () (= G35c7@lev '0)) G363f@ls/false)) (apply (lambda () (G2e18@syntax-violation '#f '"incorrect use of unsyntax-splicing" G35c6@p)) G363f@ls/false) ((lambda (G3641@t) ((lambda (G3643@ls/false) (if G3643@ls/false (apply (lambda (G3645@p) (call-with-values (lambda () (G35ae@quasi G3645@p (+ G35c7@lev '1))) (lambda (G364a@G3647 G364b@G3648 G364c@G3649) ((lambda (G3650@p G3651@rhs* G3652@lhs*) (values G3652@lhs* G3651@rhs* (list 'quasisyntax G3650@p))) G364c@G3649 G364b@G3648 G364a@G3647)))) G3643@ls/false) ((lambda (G3656@t) ((lambda (G3658@ls/false) (if G3658@ls/false (apply (lambda (G365a@p G365b@q) (call-with-values (lambda () (G35ae@quasi G365a@p G35c7@lev)) (lambda (G3664@G365e G3665@G365f G3666@G3660) (call-with-values (lambda () (G35ae@quasi G365b@q G35c7@lev)) (lambda (G366a@G3661 G366b@G3662 G366c@G3663) ((lambda (G3670@q G3671@rhs2* G3672@lhs2* G3673@p G3674@rhs* G3675@lhs*) (values (append G3672@lhs2* G3675@lhs*) (append G3671@rhs2* G3674@rhs*) (cons G3673@p G3670@q))) G366c@G3663 G366b@G3662 G366a@G3661 G3666@G3660 G3665@G365f G3664@G365e)))))) G3658@ls/false) ((lambda (G367c@t) ((lambda (G367e@ls/false) (if G367e@ls/false (apply (lambda (G3680@x*) (call-with-values (lambda () (G35ae@quasi G3680@x* G35c7@lev)) (lambda (G3685@G3682 G3686@G3683 G3687@G3684) ((lambda (G368b@x* G368c@rhs* G368d@lhs*) (values G368d@lhs* G368c@rhs* (list->vector G368b@x*))) G3687@G3684 G3686@G3683 G3685@G3682)))) G367e@ls/false) ((lambda (G3691@t) ((lambda (G3693@ls/false) (if G3693@ls/false (apply (lambda () (values '() '() G35c6@p)) G3693@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3691@t))) (G2d2d@syntax-dispatch G3691@t '_))) G367c@t))) (G2d2d@syntax-dispatch G367c@t '#(vector each-any)))) G3656@t))) (G2d2d@syntax-dispatch G3656@t '(any . any)))) G3641@t))) (G2d2d@syntax-dispatch G3641@t '(#(scheme-id quasisyntax) any)))) G363d@t))) (G2d2d@syntax-dispatch G363d@t '#(scheme-id unsyntax-splicing)))) G360f@t))) (G2d2d@syntax-dispatch G360f@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G35e5@t))) (G2d2d@syntax-dispatch G35e5@t '((#(scheme-id unsyntax) . each-any) . any)))) G35e1@t))) (G2d2d@syntax-dispatch G35e1@t '#(scheme-id unsyntax)))) G35ca@t))) (G2d2d@syntax-dispatch G35ca@t '(#(scheme-id unsyntax) any)))) G35c6@p))) (lambda (G35af@x) ((lambda (G35b1@t) ((lambda (G35b3@ls/false) (if G35b3@ls/false (apply (lambda (G35b5@e) (call-with-values (lambda () (G35ae@quasi G35b5@e '0)) (lambda (G35ba@G35b7 G35bb@G35b8 G35bc@G35b9) ((lambda (G35c0@v G35c1@rhs* G35c2@lhs*) (G2ce3@bless (list 'syntax-case (cons 'list G35c1@rhs*) '() (list G35c2@lhs* (list 'syntax G35c0@v))))) G35bc@G35b9 G35bb@G35b8 G35ba@G35b7)))) G35b3@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G35b1@t))) (G2d2d@syntax-dispatch G35b1@t '(_ any)))) G35af@x)))) '#f)))) (set! G2d1f@define-struct-macro (lambda (G3695@stx) (G2e18@syntax-violation '#f '"define-struct not supported" G3695@stx))) (set! G2d21@define-record-type-macro (lambda (G3697@x) ((lambda (G369a@id G369c@get-record-name G369e@get-record-constructor-name G36a0@get-record-predicate-name G36a2@get-clause G36a4@foo-rtd-code G36a6@parent-rtd-code G36a8@parent-rcd-code G36aa@foo-rcd-code G36ac@get-protocol-code G36ae@get-fields G36b0@get-mutator-indices G36b2@get-mutators G36b4@get-accessors G36b6@enumerate G36b8@do-define-record G36ba@verify-clauses) (begin (set! G369a@id (lambda (G388d@ctxt . G388f@str*) (G2e1c@datum->syntax G388d@ctxt (string->symbol (apply string-append (map (lambda (G3891@x) (if (symbol? G3891@x) (symbol->string G3891@x) (if (string? G3891@x) G3891@x (assertion-violation 'define-record-type '"BUG")))) G388f@str*)))))) (set! G369c@get-record-name (lambda (G387b@spec) ((lambda (G387d@t) ((lambda (G387f@ls/false) (if G387f@ls/false (apply (lambda (G3881@foo G3882@make-foo G3883@foo?) G3881@foo) G387f@ls/false) ((lambda (G3887@t) ((lambda (G3889@ls/false) (if G3889@ls/false (apply (lambda (G388b@foo) G388b@foo) G3889@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3887@t))) (G2d2d@syntax-dispatch G3887@t 'any))) G387d@t))) (G2d2d@syntax-dispatch G387d@t '(any any any)))) G387b@spec))) (set! G369e@get-record-constructor-name (lambda (G3867@spec) ((lambda (G3869@t) ((lambda (G386b@ls/false) (if G386b@ls/false (apply (lambda (G386d@foo G386e@make-foo G386f@foo?) G386e@make-foo) G386b@ls/false) ((lambda (G3873@t) ((lambda (G3875@ls/false) (if (and G3875@ls/false (apply (lambda (G3877@foo) (G2b3c@id? G3877@foo)) G3875@ls/false)) (apply (lambda (G3879@foo) (G369a@id G3879@foo '"make-" (G2b52@stx->datum G3879@foo))) G3875@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3873@t))) (G2d2d@syntax-dispatch G3873@t 'any))) G3869@t))) (G2d2d@syntax-dispatch G3869@t '(any any any)))) G3867@spec))) (set! G36a0@get-record-predicate-name (lambda (G3853@spec) ((lambda (G3855@t) ((lambda (G3857@ls/false) (if G3857@ls/false (apply (lambda (G3859@foo G385a@make-foo G385b@foo?) G385b@foo?) G3857@ls/false) ((lambda (G385f@t) ((lambda (G3861@ls/false) (if (and G3861@ls/false (apply (lambda (G3863@foo) (G2b3c@id? G3863@foo)) G3861@ls/false)) (apply (lambda (G3865@foo) (G369a@id G3865@foo (G2b52@stx->datum G3865@foo) '"?")) G3861@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G385f@t))) (G2d2d@syntax-dispatch G385f@t 'any))) G3855@t))) (G2d2d@syntax-dispatch G3855@t '(any any any)))) G3853@spec))) (set! G36a2@get-clause (lambda (G3841@id G3842@ls) ((lambda (G3845@t) ((lambda (G3847@ls/false) (if G3847@ls/false (apply (lambda () '#f) G3847@ls/false) ((lambda (G3849@t) ((lambda (G384b@ls/false) (if G384b@ls/false (apply (lambda (G384d@x G384e@rest G384f@ls) (if (G2b44@free-id=? (G2ce3@bless G3841@id) G384d@x) (cons G384d@x G384e@rest) (G36a2@get-clause G3841@id G384f@ls))) G384b@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3849@t))) (G2d2d@syntax-dispatch G3849@t '((any . any) . any)))) G3845@t))) (G2d2d@syntax-dispatch G3845@t '()))) G3842@ls))) (set! G36a4@foo-rtd-code (lambda (G37ef@name G37f0@clause* G37f1@parent-rtd-code) ((lambda (G37f6@convert-field-spec*) (begin (set! G37f6@convert-field-spec* (lambda (G3827@ls) (list->vector (map (lambda (G3829@x) ((lambda (G382b@t) ((lambda (G382d@ls/false) (if G382d@ls/false (apply (lambda (G382f@name G3830@rest) (list 'mutable G382f@name)) G382d@ls/false) ((lambda (G3833@t) ((lambda (G3835@ls/false) (if G3835@ls/false (apply (lambda (G3837@name G3838@rest) (list 'immutable G3837@name)) G3835@ls/false) ((lambda (G383b@t) ((lambda (G383d@ls/false) (if G383d@ls/false (apply (lambda (G383f@name) (list 'immutable G383f@name)) G383d@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G383b@t))) (G2d2d@syntax-dispatch G383b@t 'any))) G3833@t))) (G2d2d@syntax-dispatch G3833@t '(#(scheme-id immutable) any . any)))) G382b@t))) (G2d2d@syntax-dispatch G382b@t '(#(scheme-id mutable) any . any)))) G3829@x)) G3827@ls)))) ((lambda (G37f7@uid-code G37f8@sealed? G37f9@opaque? G37fa@fields) (G2ce3@bless (list 'make-record-type-descriptor (list 'quote G37ef@name) G37f1@parent-rtd-code G37f7@uid-code G37f8@sealed? G37f9@opaque? G37fa@fields))) ((lambda (G37ff@t) ((lambda (G3801@ls/false) (if G3801@ls/false (apply (lambda () (list 'quote (gensym))) G3801@ls/false) ((lambda (G3803@t) ((lambda (G3805@ls/false) (if G3805@ls/false (apply (lambda (G3807@uid) (list 'quote G3807@uid)) G3805@ls/false) ((lambda (G3809@t) ((lambda (G380b@ls/false) (if G380b@ls/false (apply (lambda () '#f) G380b@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3809@t))) (G2d2d@syntax-dispatch G3809@t '_))) G3803@t))) (G2d2d@syntax-dispatch G3803@t '(_ any)))) G37ff@t))) (G2d2d@syntax-dispatch G37ff@t '(_)))) (G36a2@get-clause 'nongenerative G37f0@clause*)) ((lambda (G380d@t) ((lambda (G380f@ls/false) (if G380f@ls/false (apply (lambda () '#t) G380f@ls/false) ((lambda (G3811@t) ((lambda (G3813@ls/false) (if G3813@ls/false (apply (lambda () '#f) G3813@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3811@t))) (G2d2d@syntax-dispatch G3811@t '_))) G380d@t))) (G2d2d@syntax-dispatch G380d@t '(_ #(atom #t))))) (G36a2@get-clause 'sealed G37f0@clause*)) ((lambda (G3815@t) ((lambda (G3817@ls/false) (if G3817@ls/false (apply (lambda () '#t) G3817@ls/false) ((lambda (G3819@t) ((lambda (G381b@ls/false) (if G381b@ls/false (apply (lambda () '#f) G381b@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3819@t))) (G2d2d@syntax-dispatch G3819@t '_))) G3815@t))) (G2d2d@syntax-dispatch G3815@t '(_ #(atom #t))))) (G36a2@get-clause 'opaque G37f0@clause*)) ((lambda (G381d@t) ((lambda (G381f@ls/false) (if G381f@ls/false (apply (lambda (G3821@field-spec*) (list 'quote (G37f6@convert-field-spec* G3821@field-spec*))) G381f@ls/false) ((lambda (G3823@t) ((lambda (G3825@ls/false) (if G3825@ls/false (apply (lambda () ''#()) G3825@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3823@t))) (G2d2d@syntax-dispatch G3823@t '_))) G381d@t))) (G2d2d@syntax-dispatch G381d@t '(_ . each-any)))) (G36a2@get-clause 'fields G37f0@clause*))))) '#f))) (set! G36a6@parent-rtd-code (lambda (G37d7@clause*) ((lambda (G37d9@t) ((lambda (G37db@ls/false) (if G37db@ls/false (apply (lambda (G37dd@name) (list 'record-type-descriptor G37dd@name)) G37db@ls/false) ((lambda (G37df@t) ((lambda (G37e1@ls/false) (if G37e1@ls/false (apply (lambda () ((lambda (G37e3@t) ((lambda (G37e5@ls/false) (if G37e5@ls/false (apply (lambda (G37e7@rtd G37e8@rcd) G37e7@rtd) G37e5@ls/false) ((lambda (G37eb@t) ((lambda (G37ed@ls/false) (if G37ed@ls/false (apply (lambda () '#f) G37ed@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G37eb@t))) (G2d2d@syntax-dispatch G37eb@t '#(atom #f)))) G37e3@t))) (G2d2d@syntax-dispatch G37e3@t '(_ any any)))) (G36a2@get-clause 'parent-rtd G37d7@clause*))) G37e1@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G37df@t))) (G2d2d@syntax-dispatch G37df@t '#(atom #f)))) G37d9@t))) (G2d2d@syntax-dispatch G37d9@t '(_ any)))) (G36a2@get-clause 'parent G37d7@clause*)))) (set! G36a8@parent-rcd-code (lambda (G37bf@clause*) ((lambda (G37c1@t) ((lambda (G37c3@ls/false) (if G37c3@ls/false (apply (lambda (G37c5@name) (list 'record-constructor-descriptor G37c5@name)) G37c3@ls/false) ((lambda (G37c7@t) ((lambda (G37c9@ls/false) (if G37c9@ls/false (apply (lambda () ((lambda (G37cb@t) ((lambda (G37cd@ls/false) (if G37cd@ls/false (apply (lambda (G37cf@rtd G37d0@rcd) G37d0@rcd) G37cd@ls/false) ((lambda (G37d3@t) ((lambda (G37d5@ls/false) (if G37d5@ls/false (apply (lambda () '#f) G37d5@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G37d3@t))) (G2d2d@syntax-dispatch G37d3@t '#(atom #f)))) G37cb@t))) (G2d2d@syntax-dispatch G37cb@t '(_ any any)))) (G36a2@get-clause 'parent-rtd G37bf@clause*))) G37c9@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G37c7@t))) (G2d2d@syntax-dispatch G37c7@t '#(atom #f)))) G37c1@t))) (G2d2d@syntax-dispatch G37c1@t '(_ any)))) (G36a2@get-clause 'parent G37bf@clause*)))) (set! G36aa@foo-rcd-code (lambda (G37b7@clause* G37b8@foo-rtd G37b9@protocol G37ba@parent-rcd-code) (list 'make-record-constructor-descriptor G37b8@foo-rtd G37ba@parent-rcd-code G37b9@protocol))) (set! G36ac@get-protocol-code (lambda (G37ab@clause*) ((lambda (G37ad@t) ((lambda (G37af@ls/false) (if G37af@ls/false (apply (lambda (G37b1@expr) G37b1@expr) G37af@ls/false) ((lambda (G37b3@t) ((lambda (G37b5@ls/false) (if G37b5@ls/false (apply (lambda () '#f) G37b5@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G37b3@t))) (G2d2d@syntax-dispatch G37b3@t '_))) G37ad@t))) (G2d2d@syntax-dispatch G37ad@t '(_ any)))) (G36a2@get-clause 'protocol G37ab@clause*)))) (set! G36ae@get-fields (lambda (G3799@clause*) ((lambda (G379b@t) ((lambda (G379d@ls/false) (if G379d@ls/false (apply (lambda () '()) G379d@ls/false) ((lambda (G379f@t) ((lambda (G37a1@ls/false) (if G37a1@ls/false (apply (lambda (G37a3@f*) G37a3@f*) G37a1@ls/false) ((lambda (G37a5@t) ((lambda (G37a7@ls/false) (if G37a7@ls/false (apply (lambda (G37a9@rest) (G36ae@get-fields G37a9@rest)) G37a7@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G37a5@t))) (G2d2d@syntax-dispatch G37a5@t '(_ . any)))) G379f@t))) (G2d2d@syntax-dispatch G379f@t '((#(scheme-id fields) . each-any) . _)))) G379b@t))) (G2d2d@syntax-dispatch G379b@t '()))) G3799@clause*))) (set! G36b0@get-mutator-indices (lambda (G3781@fields) ((letrec ((G3783@f (lambda (G3785@fields G3786@i) ((lambda (G3789@t) ((lambda (G378b@ls/false) (if G378b@ls/false (apply (lambda () '()) G378b@ls/false) ((lambda (G378d@t) ((lambda (G378f@ls/false) (if G378f@ls/false (apply (lambda (G3791@rest) (cons G3786@i (G3783@f G3791@rest (+ G3786@i '1)))) G378f@ls/false) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda (G3797@rest) (G3783@f G3797@rest (+ G3786@i '1))) G3795@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3793@t))) (G2d2d@syntax-dispatch G3793@t '(_ . any)))) G378d@t))) (G2d2d@syntax-dispatch G378d@t '((#(scheme-id mutable) . _) . any)))) G3789@t))) (G2d2d@syntax-dispatch G3789@t '()))) G3785@fields)))) G3783@f) G3781@fields '0))) (set! G36b2@get-mutators (lambda (G3757@foo G3758@fields) ((lambda (G375c@gen-name) (begin (set! G375c@gen-name (lambda (G377f@x) (G2e1c@datum->syntax G3757@foo (string->symbol (string-append (symbol->string (G2e1e@syntax->datum G3757@foo)) '"-" (symbol->string (G2e1e@syntax->datum G377f@x)) '"-set!"))))) ((letrec ((G375d@f (lambda (G375f@fields) ((lambda (G3761@t) ((lambda (G3763@ls/false) (if G3763@ls/false (apply (lambda () '()) G3763@ls/false) ((lambda (G3765@t) ((lambda (G3767@ls/false) (if G3767@ls/false (apply (lambda (G3769@name G376a@accessor G376b@mutator G376c@rest) (cons G376b@mutator (G375d@f G376c@rest))) G3767@ls/false) ((lambda (G3771@t) ((lambda (G3773@ls/false) (if G3773@ls/false (apply (lambda (G3775@name G3776@rest) (cons (G375c@gen-name G3775@name) (G375d@f G3776@rest))) G3773@ls/false) ((lambda (G3779@t) ((lambda (G377b@ls/false) (if G377b@ls/false (apply (lambda (G377d@rest) (G375d@f G377d@rest)) G377b@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3779@t))) (G2d2d@syntax-dispatch G3779@t '(_ . any)))) G3771@t))) (G2d2d@syntax-dispatch G3771@t '((#(scheme-id mutable) any) . any)))) G3765@t))) (G2d2d@syntax-dispatch G3765@t '((#(scheme-id mutable) any any any) . any)))) G3761@t))) (G2d2d@syntax-dispatch G3761@t '()))) G375f@fields)))) G375d@f) G3758@fields))) '#f))) (set! G36b4@get-accessors (lambda (G3713@foo G3714@fields) ((lambda (G3718@gen-name) (begin (set! G3718@gen-name (lambda (G3755@x) (G2e1c@datum->syntax G3713@foo (string->symbol (string-append (symbol->string (G2e1e@syntax->datum G3713@foo)) '"-" (symbol->string (G2e1e@syntax->datum G3755@x))))))) (map (lambda (G3719@field) ((lambda (G371b@t) ((lambda (G371d@ls/false) (if (and G371d@ls/false (apply (lambda (G371f@name G3720@accessor G3721@mutator) (G2b3c@id? G3720@accessor)) G371d@ls/false)) (apply (lambda (G3725@name G3726@accessor G3727@mutator) G3726@accessor) G371d@ls/false) ((lambda (G372b@t) ((lambda (G372d@ls/false) (if (and G372d@ls/false (apply (lambda (G372f@name G3730@accessor) (G2b3c@id? G3730@accessor)) G372d@ls/false)) (apply (lambda (G3733@name G3734@accessor) G3734@accessor) G372d@ls/false) ((lambda (G3737@t) ((lambda (G3739@ls/false) (if (and G3739@ls/false (apply (lambda (G373b@name) (G2b3c@id? G373b@name)) G3739@ls/false)) (apply (lambda (G373d@name) (G3718@gen-name G373d@name)) G3739@ls/false) ((lambda (G373f@t) ((lambda (G3741@ls/false) (if (and G3741@ls/false (apply (lambda (G3743@name) (G2b3c@id? G3743@name)) G3741@ls/false)) (apply (lambda (G3745@name) (G3718@gen-name G3745@name)) G3741@ls/false) ((lambda (G3747@t) ((lambda (G3749@ls/false) (if (and G3749@ls/false (apply (lambda (G374b@name) (G2b3c@id? G374b@name)) G3749@ls/false)) (apply (lambda (G374d@name) (G3718@gen-name G374d@name)) G3749@ls/false) ((lambda (G374f@t) ((lambda (G3751@ls/false) (if G3751@ls/false (apply (lambda (G3753@others) (G2e18@syntax-violation '#f '"invalid field spec" G3719@field)) G3751@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G374f@t))) (G2d2d@syntax-dispatch G374f@t 'any))) G3747@t))) (G2d2d@syntax-dispatch G3747@t 'any))) G373f@t))) (G2d2d@syntax-dispatch G373f@t '(#(scheme-id immutable) any)))) G3737@t))) (G2d2d@syntax-dispatch G3737@t '(#(scheme-id mutable) any)))) G372b@t))) (G2d2d@syntax-dispatch G372b@t '(#(scheme-id immutable) any any)))) G371b@t))) (G2d2d@syntax-dispatch G371b@t '(#(scheme-id mutable) any any any)))) G3719@field)) G3714@fields))) '#f))) (set! G36b6@enumerate (lambda (G370b@ls) ((letrec ((G370d@f (lambda (G370f@ls G3710@i) (if (null? G370f@ls) '() (cons G3710@i (G370d@f (cdr G370f@ls) (+ G3710@i '1))))))) G370d@f) G370b@ls '0))) (set! G36b8@do-define-record (lambda (G36e3@namespec G36e4@clause*) ((lambda (G36e7@foo) ((lambda (G36e9@foo-rtd) ((lambda (G36eb@foo-rcd) ((lambda (G36ed@protocol) ((lambda (G36ef@make-foo) ((lambda (G36f1@fields) ((lambda (G36f3@idx*) ((lambda (G36f5@foo-x*) ((lambda (G36f7@set-foo-x!*) ((lambda (G36f9@set-foo-idx*) ((lambda (G36fb@foo?) ((lambda (G36fd@foo-rtd-code) ((lambda (G36ff@foo-rcd-code) ((lambda (G3701@protocol-code) ((lambda () (G2ce3@bless (cons 'begin (cons (list 'define G36e9@foo-rtd G36fd@foo-rtd-code) (cons (list 'define G36ed@protocol G3701@protocol-code) (cons (list 'define G36eb@foo-rcd G36ff@foo-rcd-code) (cons (list 'define-syntax G36e7@foo (list 'list ''$rtd (list 'syntax G36e9@foo-rtd) (list 'syntax G36eb@foo-rcd))) (cons (list 'define G36fb@foo? (list 'record-predicate G36e9@foo-rtd)) (cons (list 'define G36ef@make-foo (list 'record-constructor G36eb@foo-rcd)) (append (map (lambda (G3703@foo-x G3704@idx) (list 'define G3703@foo-x (list 'record-accessor G36e9@foo-rtd G3704@idx))) G36f5@foo-x* G36f3@idx*) (map (lambda (G3707@set-foo-x! G3708@idx) (list 'define G3707@set-foo-x! (list 'record-mutator G36e9@foo-rtd G3708@idx))) G36f7@set-foo-x!* G36f9@set-foo-idx*))))))))))))) (G36ac@get-protocol-code G36e4@clause*))) (G36aa@foo-rcd-code G36e4@clause* G36e9@foo-rtd G36ed@protocol (G36a8@parent-rcd-code G36e4@clause*)))) (G36a4@foo-rtd-code G36e7@foo G36e4@clause* (G36a6@parent-rtd-code G36e4@clause*)))) (G36a0@get-record-predicate-name G36e3@namespec))) (G36b0@get-mutator-indices G36f1@fields))) (G36b2@get-mutators G36e7@foo G36f1@fields))) (G36b4@get-accessors G36e7@foo G36f1@fields))) (G36b6@enumerate G36f1@fields))) (G36ae@get-fields G36e4@clause*))) (G369e@get-record-constructor-name G36e3@namespec))) (gensym))) (gensym))) (gensym))) (G369c@get-record-name G36e3@namespec)))) (set! G36ba@verify-clauses (lambda (G36c3@x G36c4@cls*) ((lambda (G36c8@valid-kwds G36ca@free-id-member?) (begin (set! G36c8@valid-kwds (map G2ce3@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G36ca@free-id-member? (lambda (G36df@x G36e0@ls) (and (pair? G36e0@ls) (or (G2b44@free-id=? G36df@x (car G36e0@ls)) (G36ca@free-id-member? G36df@x (cdr G36e0@ls)))))) ((letrec ((G36cb@f (lambda (G36cd@cls* G36ce@seen*) (if (not (null? G36cd@cls*)) ((lambda (G36d1@t) ((lambda (G36d3@ls/false) (if G36d3@ls/false (apply (lambda (G36d5@kwd G36d6@rest) (if (or (not (G2b3c@id? G36d5@kwd)) (not (G36ca@free-id-member? G36d5@kwd G36c8@valid-kwds))) (G2e18@syntax-violation '#f '"not a valid define-record-type keyword" G36d5@kwd) (if (G2b4a@bound-id-member? G36d5@kwd G36ce@seen*) (G2e18@syntax-violation '#f '"duplicate use of keyword " G36c3@x G36d5@kwd) (G36cb@f (cdr G36cd@cls*) (cons G36d5@kwd G36ce@seen*))))) G36d3@ls/false) ((lambda (G36d9@t) ((lambda (G36db@ls/false) (if G36db@ls/false (apply (lambda (G36dd@cls) (G2e18@syntax-violation '#f '"malformed define-record-type clause" G36dd@cls)) G36db@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G36d9@t))) (G2d2d@syntax-dispatch G36d9@t 'any))) G36d1@t))) (G2d2d@syntax-dispatch G36d1@t '(any . any)))) (car G36cd@cls*)) (void))))) G36cb@f) G36c4@cls* '()))) '#f '#f))) ((lambda (G36bb@t) ((lambda (G36bd@ls/false) (if G36bd@ls/false (apply (lambda (G36bf@namespec G36c0@clause*) (begin (G36ba@verify-clauses G3697@x G36c0@clause*) (G36b8@do-define-record G36bf@namespec G36c0@clause*))) G36bd@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G36bb@t))) (G2d2d@syntax-dispatch G36bb@t '(_ any . each-any)))) G3697@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2d23@define-condition-type-macro (lambda (G3893@x) ((lambda (G3896@mkname) (begin (set! G3896@mkname (lambda (G38c3@name G38c4@suffix) (G2e1c@datum->syntax G38c3@name (string->symbol (string-append (symbol->string (G2e1e@syntax->datum G38c3@name)) G38c4@suffix))))) ((lambda (G3897@t) ((lambda (G3899@ls/false) (if (and G3899@ls/false (apply (lambda (G389b@ctxt G389c@name G389d@super G389e@constructor G389f@predicate G38a0@field* G38a1@accessor*) (and (G2b3c@id? G389c@name) (G2b3c@id? G389d@super) (G2b3c@id? G389e@constructor) (G2b3c@id? G389f@predicate) (for-all G2b3c@id? G38a0@field*) (for-all G2b3c@id? G38a1@accessor*))) G3899@ls/false)) (apply (lambda (G38a9@ctxt G38aa@name G38ab@super G38ac@constructor G38ad@predicate G38ae@field* G38af@accessor*) ((lambda (G38b7@aux-accessor*) (G2ce3@bless (cons 'begin (cons (cons 'define-record-type (cons (list G38aa@name G38ac@constructor (gensym)) (cons (list 'parent G38ab@super) (cons (cons 'fields (map (lambda (G38b9@field G38ba@aux) (list 'immutable G38b9@field G38ba@aux)) G38ae@field* G38b7@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G38ad@predicate (list 'condition-predicate (list 'record-type-descriptor G38aa@name))) (map (lambda (G38bd@accessor G38be@aux) (list 'define G38bd@accessor (list 'condition-accessor (list 'record-type-descriptor G38aa@name) G38be@aux))) G38af@accessor* G38b7@aux-accessor*)))))) (map (lambda (G38c1@x) (gensym)) G38af@accessor*))) G3899@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3897@t))) (G2d2d@syntax-dispatch G3897@t '(any any any any any . #(each (any any)))))) G3893@x))) '#f))) (set! G2d25@incorrect-usage-macro (lambda (G38c7@e) (G2e18@syntax-violation '#f '"incorrect usage of auxiliary keyword" G38c7@e))) (set! G2d27@parameterize-macro (lambda (G38c9@e) ((lambda (G38cb@t) ((lambda (G38cd@ls/false) (if G38cd@ls/false (apply (lambda (G38cf@b G38d0@b*) (G2ce3@bless (cons 'let (cons '() (cons G38cf@b G38d0@b*))))) G38cd@ls/false) ((lambda (G38d3@t) ((lambda (G38d5@ls/false) (if G38d5@ls/false (apply (lambda (G38d7@olhs* G38d8@orhs* G38d9@b G38da@b*) ((lambda (G38df@lhs* G38e0@rhs*) (G2ce3@bless (cons (list 'lambda (append G38df@lhs* G38e0@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G38e3@lhs G38e4@rhs) (list 'let (list (list 't (list G38e3@lhs))) (list G38e3@lhs G38e4@rhs) (cons 'set! (cons G38e4@rhs '(t))))) G38df@lhs* G38e0@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G38d9@b G38da@b*))) '(swap)))))) (append G38d7@olhs* G38d8@orhs*)))) (G2e06@generate-temporaries G38d7@olhs*) (G2e06@generate-temporaries G38d8@orhs*))) G38d5@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G38d3@t))) (G2d2d@syntax-dispatch G38d3@t '(_ #(each (any any)) any . each-any)))) G38cb@t))) (G2d2d@syntax-dispatch G38cb@t '(_ () any . each-any)))) G38c9@e))) (set! G2d29@foreign-call-transformer (lambda (G38e7@e G38e8@r G38e9@mr) ((lambda (G38ed@t) ((lambda (G38ef@ls/false) (if G38ef@ls/false (apply (lambda (G38f1@name G38f2@arg*) (cons 'foreign-call (cons (G2d51@chi-expr G38f1@name G38e8@r G38e9@mr) (G2d4d@chi-expr* G38f2@arg* G38e8@r G38e9@mr)))) G38ef@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G38ed@t))) (G2d2d@syntax-dispatch G38ed@t '(_ any . each-any)))) G38e7@e))) (set! G2d2b@convert-pattern (lambda (G38f5@pattern G38f6@keys) ((lambda (G38fa@cvt* G38fc@cvt) (begin (set! G38fa@cvt* (lambda (G398b@p* G398c@n G398d@ids) (if (null? G398b@p*) (values '() G398d@ids) (call-with-values (lambda () (G38fa@cvt* (cdr G398b@p*) G398c@n G398d@ids)) (lambda (G3993@G3991 G3994@G3992) ((lambda (G3997@ids G3998@y) (call-with-values (lambda () (G38fc@cvt (car G398b@p*) G398c@n G3997@ids)) (lambda (G399d@G399b G399e@G399c) ((lambda (G39a1@ids G39a2@x) (values (cons G39a2@x G3998@y) G39a1@ids)) G399e@G399c G399d@G399b)))) G3994@G3992 G3993@G3991)))))) (set! G38fc@cvt (lambda (G38fd@p G38fe@n G38ff@ids) ((lambda (G3903@t) ((lambda (G3905@ls/false) (if (and G3905@ls/false (apply (lambda (G3907@id) (G2b3c@id? G3907@id)) G3905@ls/false)) (apply (lambda (G3909@id) (if (G2b4a@bound-id-member? G38fd@p G38f6@keys) (values (vector 'free-id G38fd@p) G38ff@ids) (if (G2b44@free-id=? G38fd@p (G2cb7@scheme-stx '_)) (values '_ G38ff@ids) (values 'any (cons (cons G38fd@p G38fe@n) G38ff@ids))))) G3905@ls/false) ((lambda (G390b@t) ((lambda (G390d@ls/false) (if (and G390d@ls/false (apply (lambda (G390f@p G3910@dots) (G2d2f@ellipsis? G3910@dots)) G390d@ls/false)) (apply (lambda (G3913@p G3914@dots) (call-with-values (lambda () (G38fc@cvt G3913@p (+ G38fe@n '1) G38ff@ids)) (lambda (G3919@G3917 G391a@G3918) ((lambda (G391d@ids G391e@p) (values (if (eq? G391e@p 'any) 'each-any (vector 'each G391e@p)) G391d@ids)) G391a@G3918 G3919@G3917)))) G390d@ls/false) ((lambda (G3921@t) ((lambda (G3923@ls/false) (if (and G3923@ls/false (apply (lambda (G3925@x G3926@dots G3927@ys G3928@z) (G2d2f@ellipsis? G3926@dots)) G3923@ls/false)) (apply (lambda (G392d@x G392e@dots G392f@ys G3930@z) (call-with-values (lambda () (G38fc@cvt G3930@z G38fe@n G38ff@ids)) (lambda (G3937@G3935 G3938@G3936) ((lambda (G393b@ids G393c@z) (call-with-values (lambda () (G38fa@cvt* G392f@ys G38fe@n G393b@ids)) (lambda (G3941@G393f G3942@G3940) ((lambda (G3945@ids G3946@ys) (call-with-values (lambda () (G38fc@cvt G392d@x (+ G38fe@n '1) G3945@ids)) (lambda (G394b@G3949 G394c@G394a) ((lambda (G394f@ids G3950@x) (values (vector 'each+ G3950@x (reverse G3946@ys) G393c@z) G394f@ids)) G394c@G394a G394b@G3949)))) G3942@G3940 G3941@G393f)))) G3938@G3936 G3937@G3935)))) G3923@ls/false) ((lambda (G3953@t) ((lambda (G3955@ls/false) (if G3955@ls/false (apply (lambda (G3957@x G3958@y) (call-with-values (lambda () (G38fc@cvt G3958@y G38fe@n G38ff@ids)) (lambda (G395d@G395b G395e@G395c) ((lambda (G3961@ids G3962@y) (call-with-values (lambda () (G38fc@cvt G3957@x G38fe@n G3961@ids)) (lambda (G3967@G3965 G3968@G3966) ((lambda (G396b@ids G396c@x) (values (cons G396c@x G3962@y) G396b@ids)) G3968@G3966 G3967@G3965)))) G395e@G395c G395d@G395b)))) G3955@ls/false) ((lambda (G396f@t) ((lambda (G3971@ls/false) (if G3971@ls/false (apply (lambda () (values '() G38ff@ids)) G3971@ls/false) ((lambda (G3973@t) ((lambda (G3975@ls/false) (if (and G3975@ls/false (apply (lambda (G3977@p) (not (G2b04@stx? G3977@p))) G3975@ls/false)) (apply (lambda (G3979@p) (call-with-values (lambda () (G38fc@cvt G3979@p G38fe@n G38ff@ids)) (lambda (G397d@G397b G397e@G397c) ((lambda (G3981@ids G3982@p) (values (vector 'vector G3982@p) G3981@ids)) G397e@G397c G397d@G397b)))) G3975@ls/false) ((lambda (G3985@t) ((lambda (G3987@ls/false) (if G3987@ls/false (apply (lambda (G3989@datum) (values (vector 'atom (G2b52@stx->datum G3989@datum)) G38ff@ids)) G3987@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3985@t))) (G2d2d@syntax-dispatch G3985@t 'any))) G3973@t))) (G2d2d@syntax-dispatch G3973@t '#(vector each-any)))) G396f@t))) (G2d2d@syntax-dispatch G396f@t '()))) G3953@t))) (G2d2d@syntax-dispatch G3953@t '(any . any)))) G3921@t))) (G2d2d@syntax-dispatch G3921@t '(any any . #(each+ any () any))))) G390b@t))) (G2d2d@syntax-dispatch G390b@t '(any any)))) G3903@t))) (G2d2d@syntax-dispatch G3903@t 'any))) G38fd@p))) (G38fc@cvt G38f5@pattern '0 '()))) '#f '#f))) (set! G2d2d@syntax-dispatch ((lambda () ((lambda (G39a6@stx^ G39a8@match-each G39aa@match-each+ G39ac@match-each-any G39ae@match-empty G39b0@combine G39b2@match* G39b4@match) (begin (set! G39a6@stx^ (lambda (G3a6f@e G3a70@m* G3a71@s* G3a72@ae*) (if (and (null? G3a70@m*) (null? G3a71@s*) (null? G3a72@ae*)) G3a6f@e (G2b24@mkstx G3a6f@e G3a70@m* G3a71@s* G3a72@ae*)))) (set! G39a8@match-each (lambda (G3a52@e G3a53@p G3a54@m* G3a55@s* G3a56@ae*) (if (pair? G3a52@e) ((lambda (G3a5c@first) (and G3a5c@first ((lambda (G3a5e@rest) (and G3a5e@rest (cons G3a5c@first G3a5e@rest))) (G39a8@match-each (cdr G3a52@e) G3a53@p G3a54@m* G3a55@s* G3a56@ae*)))) (G39b4@match (car G3a52@e) G3a53@p G3a54@m* G3a55@s* G3a56@ae* '())) (if (null? G3a52@e) '() (if (G2b04@stx? G3a52@e) (and (not (G2aba@top-marked? G3a54@m*)) (call-with-values (lambda () (G2b22@join-wraps G3a54@m* G3a55@s* G3a56@ae* G3a52@e)) (lambda (G3a63@G3a60 G3a64@G3a61 G3a65@G3a62) ((lambda (G3a69@ae* G3a6a@s* G3a6b@m*) (G39a8@match-each (G2b08@stx-expr G3a52@e) G3a53@p G3a6b@m* G3a6a@s* G3a69@ae*)) G3a65@G3a62 G3a64@G3a61 G3a63@G3a60)))) (if (G26e5@G2608@annotation? G3a52@e) (G39a8@match-each (G26e7@G260c@annotation-expression G3a52@e) G3a53@p G3a54@m* G3a55@s* G3a56@ae*) '#f)))))) (set! G39aa@match-each+ (lambda (G3a18@e G3a19@x-pat G3a1a@y-pat G3a1b@z-pat G3a1c@m* G3a1d@s* G3a1e@ae* G3a1f@r) ((letrec ((G3a28@f (lambda (G3a2a@e G3a2b@m* G3a2c@s* G3a2d@ae*) (if (pair? G3a2a@e) (call-with-values (lambda () (G3a28@f (cdr G3a2a@e) G3a2b@m* G3a2c@s* G3a2d@ae*)) (lambda (G3a35@G3a32 G3a36@G3a33 G3a37@G3a34) ((lambda (G3a3b@r G3a3c@y-pat G3a3d@xr*) (if G3a3b@r (if (null? G3a3c@y-pat) ((lambda (G3a41@xr) (if G3a41@xr (values (cons G3a41@xr G3a3d@xr*) G3a3c@y-pat G3a3b@r) (values '#f '#f '#f))) (G39b4@match (car G3a2a@e) G3a19@x-pat G3a2b@m* G3a2c@s* G3a2d@ae* '())) (values '() (cdr G3a3c@y-pat) (G39b4@match (car G3a2a@e) (car G3a3c@y-pat) G3a2b@m* G3a2c@s* G3a2d@ae* G3a3b@r))) (values '#f '#f '#f))) G3a37@G3a34 G3a36@G3a33 G3a35@G3a32))) (if (G2b04@stx? G3a2a@e) (if (G2aba@top-marked? G3a2b@m*) (values '() G3a1a@y-pat (G39b4@match G3a2a@e G3a1b@z-pat G3a2b@m* G3a2c@s* G3a2d@ae* G3a1f@r)) (call-with-values (lambda () (G2b22@join-wraps G3a2b@m* G3a2c@s* G3a2d@ae* G3a2a@e)) (lambda (G3a46@G3a43 G3a47@G3a44 G3a48@G3a45) ((lambda (G3a4c@ae* G3a4d@s* G3a4e@m*) (G3a28@f (G2b08@stx-expr G3a2a@e) G3a4e@m* G3a4d@s* G3a4c@ae*)) G3a48@G3a45 G3a47@G3a44 G3a46@G3a43)))) (if (G26e5@G2608@annotation? G3a2a@e) (G3a28@f (G26e7@G260c@annotation-expression G3a2a@e) G3a2b@m* G3a2c@s* G3a2d@ae*) (values '() G3a1a@y-pat (G39b4@match G3a2a@e G3a1b@z-pat G3a2b@m* G3a2c@s* G3a2d@ae* G3a1f@r)))))))) G3a28@f) G3a18@e G3a1c@m* G3a1d@s* G3a1e@ae*))) (set! G39ac@match-each-any (lambda (G39ff@e G3a00@m* G3a01@s* G3a02@ae*) (if (pair? G39ff@e) ((lambda (G3a07@l) (and G3a07@l (cons (G39a6@stx^ (car G39ff@e) G3a00@m* G3a01@s* G3a02@ae*) G3a07@l))) (G39ac@match-each-any (cdr G39ff@e) G3a00@m* G3a01@s* G3a02@ae*)) (if (null? G39ff@e) '() (if (G2b04@stx? G39ff@e) (and (not (G2aba@top-marked? G3a00@m*)) (call-with-values (lambda () (G2b22@join-wraps G3a00@m* G3a01@s* G3a02@ae* G39ff@e)) (lambda (G3a0c@G3a09 G3a0d@G3a0a G3a0e@G3a0b) ((lambda (G3a12@ae* G3a13@s* G3a14@m*) (G39ac@match-each-any (G2b08@stx-expr G39ff@e) G3a14@m* G3a13@s* G3a12@ae*)) G3a0e@G3a0b G3a0d@G3a0a G3a0c@G3a09)))) (if (G26e5@G2608@annotation? G39ff@e) (G39ac@match-each-any (G26e7@G260c@annotation-expression G39ff@e) G3a00@m* G3a01@s* G3a02@ae*) '#f)))))) (set! G39ae@match-empty (lambda (G39f9@p G39fa@r) (if (null? G39f9@p) G39fa@r (if (eq? G39f9@p '_) G39fa@r (if (eq? G39f9@p 'any) (cons '() G39fa@r) (if (pair? G39f9@p) (G39ae@match-empty (car G39f9@p) (G39ae@match-empty (cdr G39f9@p) G39fa@r)) (if (eq? G39f9@p 'each-any) (cons '() G39fa@r) ((lambda (G39fd@t) (if (memv G39fd@t '(each)) (G39ae@match-empty (vector-ref G39f9@p '1) G39fa@r) (if (memv G39fd@t '(each+)) (G39ae@match-empty (vector-ref G39f9@p '1) (G39ae@match-empty (reverse (vector-ref G39f9@p '2)) (G39ae@match-empty (vector-ref G39f9@p '3) G39fa@r))) (if (memv G39fd@t '(free-id atom)) G39fa@r (if (memv G39fd@t '(scheme-id atom)) G39fa@r (if (memv G39fd@t '(vector)) (G39ae@match-empty (vector-ref G39f9@p '1) G39fa@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G39f9@p))))))) (vector-ref G39f9@p '0))))))))) (set! G39b0@combine (lambda (G39f5@r* G39f6@r) (if (null? (car G39f5@r*)) G39f6@r (cons (map car G39f5@r*) (G39b0@combine (map cdr G39f5@r*) G39f6@r))))) (set! G39b2@match* (lambda (G39d4@e G39d5@p G39d6@m* G39d7@s* G39d8@ae* G39d9@r) (if (null? G39d5@p) (and (null? G39d4@e) G39d9@r) (if (pair? G39d5@p) (and (pair? G39d4@e) (G39b4@match (car G39d4@e) (car G39d5@p) G39d6@m* G39d7@s* G39d8@ae* (G39b4@match (cdr G39d4@e) (cdr G39d5@p) G39d6@m* G39d7@s* G39d8@ae* G39d9@r))) (if (eq? G39d5@p 'each-any) ((lambda (G39e0@l) (and G39e0@l (cons G39e0@l G39d9@r))) (G39ac@match-each-any G39d4@e G39d6@m* G39d7@s* G39d8@ae*)) ((lambda (G39e2@t) (if (memv G39e2@t '(each)) (if (null? G39d4@e) (G39ae@match-empty (vector-ref G39d5@p '1) G39d9@r) ((lambda (G39e4@r*) (and G39e4@r* (G39b0@combine G39e4@r* G39d9@r))) (G39a8@match-each G39d4@e (vector-ref G39d5@p '1) G39d6@m* G39d7@s* G39d8@ae*))) (if (memv G39e2@t '(free-id)) (and (symbol? G39d4@e) (G2aba@top-marked? G39d6@m*) (G2b44@free-id=? (G39a6@stx^ G39d4@e G39d6@m* G39d7@s* G39d8@ae*) (vector-ref G39d5@p '1)) G39d9@r) (if (memv G39e2@t '(scheme-id)) (and (symbol? G39d4@e) (G2aba@top-marked? G39d6@m*) (G2b44@free-id=? (G39a6@stx^ G39d4@e G39d6@m* G39d7@s* G39d8@ae*) (G2cb7@scheme-stx (vector-ref G39d5@p '1))) G39d9@r) (if (memv G39e2@t '(each+)) (call-with-values (lambda () (G39aa@match-each+ G39d4@e (vector-ref G39d5@p '1) (vector-ref G39d5@p '2) (vector-ref G39d5@p '3) G39d6@m* G39d7@s* G39d8@ae* G39d9@r)) (lambda (G39e9@G39e6 G39ea@G39e7 G39eb@G39e8) ((lambda (G39ef@r G39f0@y-pat G39f1@xr*) (and G39ef@r (null? G39f0@y-pat) (if (null? G39f1@xr*) (G39ae@match-empty (vector-ref G39d5@p '1) G39ef@r) (G39b0@combine G39f1@xr* G39ef@r)))) G39eb@G39e8 G39ea@G39e7 G39e9@G39e6))) (if (memv G39e2@t '(atom)) (and (fast-equal? (vector-ref G39d5@p '1) (G2b50@strip G39d4@e G39d6@m*)) G39d9@r) (if (memv G39e2@t '(vector)) (and (vector? G39d4@e) (G39b4@match (vector->list G39d4@e) (vector-ref G39d5@p '1) G39d6@m* G39d7@s* G39d8@ae* G39d9@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G39d5@p)))))))) (vector-ref G39d5@p '0))))))) (set! G39b4@match (lambda (G39b9@e G39ba@p G39bb@m* G39bc@s* G39bd@ae* G39be@r) (if (not G39be@r) '#f (if (eq? G39ba@p '_) G39be@r (if (eq? G39ba@p 'any) (cons (G39a6@stx^ G39b9@e G39bb@m* G39bc@s* G39bd@ae*) G39be@r) (if (G2b04@stx? G39b9@e) (and (not (G2aba@top-marked? G39bb@m*)) (call-with-values (lambda () (G2b22@join-wraps G39bb@m* G39bc@s* G39bd@ae* G39b9@e)) (lambda (G39c8@G39c5 G39c9@G39c6 G39ca@G39c7) ((lambda (G39ce@ae* G39cf@s* G39d0@m*) (G39b4@match (G2b08@stx-expr G39b9@e) G39ba@p G39d0@m* G39cf@s* G39ce@ae* G39be@r)) G39ca@G39c7 G39c9@G39c6 G39c8@G39c5)))) (if (G26e5@G2608@annotation? G39b9@e) (G39b4@match (G26e7@G260c@annotation-expression G39b9@e) G39ba@p G39bb@m* G39bc@s* G39bd@ae* G39be@r) (G39b2@match* G39b9@e G39ba@p G39bb@m* G39bc@s* G39bd@ae* G39be@r)))))))) (lambda (G39b5@e G39b6@p) (G39b4@match G39b5@e G39b6@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d2f@ellipsis? (lambda (G3a77@x) (and (G2b3c@id? G3a77@x) (G2b44@free-id=? G3a77@x (G2cb7@scheme-stx '...))))) (set! G2d31@underscore? (lambda (G3a79@x) (and (G2b3c@id? G3a79@x) (G2b44@free-id=? G3a79@x (G2cb7@scheme-stx '_))))) (set! G2d33@verify-literals (lambda (G3a7b@lits G3a7c@expr) (for-each (lambda (G3a7f@x) (if (or (not (G2b3c@id? G3a7f@x)) (G2d2f@ellipsis? G3a7f@x) (G2d31@underscore? G3a7f@x)) (G2e18@syntax-violation '#f '"invalid literal" G3a7c@expr G3a7f@x) (void))) G3a7b@lits))) (set! G2d35@syntax-case-transformer ((lambda () ((lambda (G3a82@build-dispatch-call G3a84@invalid-ids-error G3a86@gen-clause G3a88@gen-syntax-case) (begin (set! G3a82@build-dispatch-call (lambda (G3af1@pvars G3af2@expr G3af3@y G3af4@r G3af5@mr) ((lambda (G3afb@ids G3afc@levels) ((lambda (G3aff@labels G3b00@new-vars) ((lambda (G3b03@body) (list '(primitive apply) (G2a9a@G29dc@build-lambda '#f G3b00@new-vars G3b03@body) G3af3@y)) (G2d51@chi-expr (G2b28@add-subst (G2af7@make-full-rib G3afb@ids G3aff@labels) G3af2@expr) (append (map (lambda (G3b05@label G3b06@var G3b07@level) (cons G3b05@label (G2b5c@make-binding 'syntax (cons G3b06@var G3b07@level)))) G3aff@labels G3b00@new-vars (map cdr G3af1@pvars)) G3af4@r) G3af5@mr))) (map G2ac0@gen-label G3afb@ids) (map G2abc@gen-lexical G3afb@ids))) (map car G3af1@pvars) (map cdr G3af1@pvars)))) (set! G3a84@invalid-ids-error (lambda (G3ae5@id* G3ae6@e G3ae7@class) ((letrec ((G3aeb@find (lambda (G3aed@id* G3aee@ok*) (if (null? G3aed@id*) (G2e18@syntax-violation '#f '"invalid syntax" G3ae6@e) (if (G2b3c@id? (car G3aed@id*)) (if (G2b4a@bound-id-member? (car G3aed@id*) G3aee@ok*) (G2e14@syntax-error (car G3aed@id*) '"duplicate " G3ae7@class) (G3aeb@find (cdr G3aed@id*) (cons (car G3aed@id*) G3aee@ok*))) (G2e14@syntax-error (car G3aed@id*) '"invalid " G3ae7@class)))))) G3aeb@find) G3ae5@id* '()))) (set! G3a86@gen-clause (lambda (G3abf@x G3ac0@keys G3ac1@clauses G3ac2@r G3ac3@mr G3ac4@pat G3ac5@fender G3ac6@expr) (call-with-values (lambda () (G2d2b@convert-pattern G3ac4@pat G3ac0@keys)) (lambda (G3ad1@G3acf G3ad2@G3ad0) ((lambda (G3ad5@pvars G3ad6@p) (if (not (G2b48@distinct-bound-ids? (map car G3ad5@pvars))) (G3a84@invalid-ids-error (map car G3ad5@pvars) G3ac4@pat '"pattern variable") (if (not (for-all (lambda (G3ad9@x) (not (G2d2f@ellipsis? (car G3ad9@x)))) G3ad5@pvars)) (G2e18@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3ac4@pat) ((lambda (G3adb@y) ((lambda (G3add@test) ((lambda (G3adf@conseq) ((lambda (G3ae1@altern) (list (G2a9a@G29dc@build-lambda '#f (list G3adb@y) (list 'if G3add@test G3adf@conseq G3ae1@altern)) (list '(primitive syntax-dispatch) G3abf@x (list 'quote G3ad6@p)))) (G3a88@gen-syntax-case G3abf@x G3ac0@keys G3ac1@clauses G3ac2@r G3ac3@mr))) (G3a82@build-dispatch-call G3ad5@pvars G3ac6@expr G3adb@y G3ac2@r G3ac3@mr))) (if (eq? G3ac5@fender '#t) G3adb@y ((lambda (G3ae3@call) (list 'if G3adb@y G3ae3@call (list 'quote '#f))) (G3a82@build-dispatch-call G3ad5@pvars G3ac5@fender G3adb@y G3ac2@r G3ac3@mr))))) (G2abc@gen-lexical 'tmp))))) G3ad2@G3ad0 G3ad1@G3acf))))) (set! G3a88@gen-syntax-case (lambda (G3a9d@x G3a9e@keys G3a9f@clauses G3aa0@r G3aa1@mr) (if (null? G3a9f@clauses) (list '(primitive syntax-error) G3a9d@x) ((lambda (G3aa7@t) ((lambda (G3aa9@ls/false) (if G3aa9@ls/false (apply (lambda (G3aab@pat G3aac@expr) (if (and (G2b3c@id? G3aab@pat) (not (G2b4a@bound-id-member? G3aab@pat G3a9e@keys)) (not (G2d2f@ellipsis? G3aab@pat))) (if (G2b44@free-id=? G3aab@pat (G2cb7@scheme-stx '_)) (G2d51@chi-expr G3aac@expr G3aa0@r G3aa1@mr) ((lambda (G3aaf@lab G3ab0@lex) ((lambda (G3ab3@body) (list (G2a9a@G29dc@build-lambda '#f (list G3ab0@lex) G3ab3@body) G3a9d@x)) (G2d51@chi-expr (G2b28@add-subst (G2af7@make-full-rib (list G3aab@pat) (list G3aaf@lab)) G3aac@expr) (cons (cons G3aaf@lab (G2b5c@make-binding 'syntax (cons G3ab0@lex '0))) G3aa0@r) G3aa1@mr))) (G2ac0@gen-label G3aab@pat) (G2abc@gen-lexical G3aab@pat))) (G3a86@gen-clause G3a9d@x G3a9e@keys (cdr G3a9f@clauses) G3aa0@r G3aa1@mr G3aab@pat '#t G3aac@expr))) G3aa9@ls/false) ((lambda (G3ab5@t) ((lambda (G3ab7@ls/false) (if G3ab7@ls/false (apply (lambda (G3ab9@pat G3aba@fender G3abb@expr) (G3a86@gen-clause G3a9d@x G3a9e@keys (cdr G3a9f@clauses) G3aa0@r G3aa1@mr G3ab9@pat G3aba@fender G3abb@expr)) G3ab7@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3ab5@t))) (G2d2d@syntax-dispatch G3ab5@t '(any any any)))) G3aa7@t))) (G2d2d@syntax-dispatch G3aa7@t '(any any)))) (car G3a9f@clauses))))) (lambda (G3a89@e G3a8a@r G3a8b@mr) ((lambda (G3a8f@t) ((lambda (G3a91@ls/false) (if G3a91@ls/false (apply (lambda (G3a93@expr G3a94@keys G3a95@clauses) (begin (G2d33@verify-literals G3a94@keys G3a89@e) ((lambda (G3a99@x) ((lambda (G3a9b@body) (list (G2a9a@G29dc@build-lambda '#f (list G3a99@x) G3a9b@body) (G2d51@chi-expr G3a93@expr G3a8a@r G3a8b@mr))) (G3a88@gen-syntax-case G3a99@x G3a94@keys G3a95@clauses G3a8a@r G3a8b@mr))) (G2abc@gen-lexical 'tmp)))) G3a91@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3a8f@t))) (G2d2d@syntax-dispatch G3a8f@t '(_ any each-any . each-any)))) G3a89@e)))) '#f '#f '#f '#f)))) (set! G2d37@ellipsis-map (lambda (G3b0b@proc G3b0c@ls . G3b0f@ls*) ((lambda (G3b12@who) (begin (set! G3b12@who '...) (begin (if (not (list? G3b0c@ls)) (assertion-violation G3b12@who '"not a list" G3b0c@ls) (void)) (if (not (null? G3b0f@ls*)) ((lambda (G3b13@n) (for-each (lambda (G3b15@x) (begin (if (not (list? G3b15@x)) (assertion-violation G3b12@who '"not a list" G3b15@x) (void)) (if (not (= (length G3b15@x) G3b13@n)) (assertion-violation G3b12@who '"length mismatch" G3b0c@ls G3b15@x) (void)))) G3b0f@ls*)) (length G3b0c@ls)) (void)) (apply map G3b0b@proc G3b0c@ls G3b0f@ls*)))) '#f))) (set! G2d39@syntax-transformer ((lambda () ((lambda (G3b18@gen-syntax G3b1a@gen-ref G3b1c@gen-append G3b1e@gen-mappend G3b20@gen-map G3b22@gen-cons G3b24@gen-vector G3b26@regen) (begin (set! G3b18@gen-syntax (lambda (G3b8b@src G3b8c@e G3b8d@r G3b8e@maps G3b8f@ellipsis? G3b90@vec?) ((lambda (G3b97@t) ((lambda (G3b99@ls/false) (if (and G3b99@ls/false (apply (lambda (G3b9b@dots) (G3b8f@ellipsis? G3b9b@dots)) G3b99@ls/false)) (apply (lambda (G3b9d@dots) (G2e18@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b8b@src)) G3b99@ls/false) ((lambda (G3b9f@t) ((lambda (G3ba1@ls/false) (if (and G3ba1@ls/false (apply (lambda (G3ba3@id) (G2b3c@id? G3ba3@id)) G3ba1@ls/false)) (apply (lambda (G3ba5@id) ((lambda (G3ba7@label) ((lambda (G3ba9@b) ((lambda () (if (eq? (G2b5e@binding-type G3ba9@b) 'syntax) (call-with-values (lambda () ((lambda (G3bad@var.lev) (G3b1a@gen-ref G3b8b@src (car G3bad@var.lev) (cdr G3bad@var.lev) G3b8e@maps)) (G2b60@binding-value G3ba9@b))) (lambda (G3baf@G3bab G3bb0@G3bac) ((lambda (G3bb3@maps G3bb4@var) (values (list 'ref G3bb4@var) G3bb3@maps)) G3bb0@G3bac G3baf@G3bab))) (values (list 'quote G3b8c@e) G3b8e@maps))))) (G2b5a@label->binding G3ba7@label G3b8d@r))) (G2b56@id->label G3b8c@e))) G3ba1@ls/false) ((lambda (G3bb7@t) ((lambda (G3bb9@ls/false) (if (and G3bb9@ls/false (apply (lambda (G3bbb@dots G3bbc@e) (G3b8f@ellipsis? G3bbb@dots)) G3bb9@ls/false)) (apply (lambda (G3bbf@dots G3bc0@e) (if G3b90@vec? (G2e18@syntax-violation '#f '"misplaced ellipsis in syntax form" G3b8b@src) (G3b18@gen-syntax G3b8b@src G3bc0@e G3b8d@r G3b8e@maps (lambda (G3bc3@x) '#f) '#f))) G3bb9@ls/false) ((lambda (G3bc5@t) ((lambda (G3bc7@ls/false) (if (and G3bc7@ls/false (apply (lambda (G3bc9@x G3bca@dots G3bcb@y) (G3b8f@ellipsis? G3bca@dots)) G3bc7@ls/false)) (apply (lambda (G3bcf@x G3bd0@dots G3bd1@y) ((letrec ((G3bd5@f (lambda (G3bd7@y G3bd8@k) ((lambda (G3bdb@t) ((lambda (G3bdd@ls/false) (if G3bdd@ls/false (apply (lambda () (G3bd8@k G3b8e@maps)) G3bdd@ls/false) ((lambda (G3bdf@t) ((lambda (G3be1@ls/false) (if (and G3be1@ls/false (apply (lambda (G3be3@dots G3be4@y) (G3b8f@ellipsis? G3be3@dots)) G3be1@ls/false)) (apply (lambda (G3be7@dots G3be8@y) (G3bd5@f G3be8@y (lambda (G3beb@maps) (call-with-values (lambda () (G3bd8@k (cons '() G3beb@maps))) (lambda (G3bef@G3bed G3bf0@G3bee) ((lambda (G3bf3@maps G3bf4@x) (if (null? (car G3bf3@maps)) (G2e18@syntax-violation '#f '"extra ellipsis in syntax form" G3b8b@src) (values (G3b1e@gen-mappend G3bf4@x (car G3bf3@maps)) (cdr G3bf3@maps)))) G3bf0@G3bee G3bef@G3bed)))))) G3be1@ls/false) ((lambda (G3bf7@t) ((lambda (G3bf9@ls/false) (if G3bf9@ls/false (apply (lambda () (call-with-values (lambda () (G3b18@gen-syntax G3b8b@src G3bd7@y G3b8d@r G3b8e@maps G3b8f@ellipsis? G3b90@vec?)) (lambda (G3bfd@G3bfb G3bfe@G3bfc) ((lambda (G3c01@maps G3c02@y) (call-with-values (lambda () (G3bd8@k G3c01@maps)) (lambda (G3c07@G3c05 G3c08@G3c06) ((lambda (G3c0b@maps G3c0c@x) (values (G3b1c@gen-append G3c0c@x G3c02@y) G3c0b@maps)) G3c08@G3c06 G3c07@G3c05)))) G3bfe@G3bfc G3bfd@G3bfb)))) G3bf9@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3bf7@t))) (G2d2d@syntax-dispatch G3bf7@t '_))) G3bdf@t))) (G2d2d@syntax-dispatch G3bdf@t '(any . any)))) G3bdb@t))) (G2d2d@syntax-dispatch G3bdb@t '()))) G3bd7@y)))) G3bd5@f) G3bd1@y (lambda (G3c0f@maps) (call-with-values (lambda () (G3b18@gen-syntax G3b8b@src G3bcf@x G3b8d@r (cons '() G3c0f@maps) G3b8f@ellipsis? '#f)) (lambda (G3c13@G3c11 G3c14@G3c12) ((lambda (G3c17@maps G3c18@x) (if (null? (car G3c17@maps)) (G2e18@syntax-violation '#f '"extra ellipsis in syntax form" G3b8b@src) (values (G3b20@gen-map G3c18@x (car G3c17@maps)) (cdr G3c17@maps)))) G3c14@G3c12 G3c13@G3c11)))))) G3bc7@ls/false) ((lambda (G3c1b@t) ((lambda (G3c1d@ls/false) (if G3c1d@ls/false (apply (lambda (G3c1f@x G3c20@y) (call-with-values (lambda () (G3b18@gen-syntax G3b8b@src G3c1f@x G3b8d@r G3b8e@maps G3b8f@ellipsis? '#f)) (lambda (G3c25@G3c23 G3c26@G3c24) ((lambda (G3c29@maps G3c2a@xnew) (call-with-values (lambda () (G3b18@gen-syntax G3b8b@src G3c20@y G3b8d@r G3c29@maps G3b8f@ellipsis? G3b90@vec?)) (lambda (G3c2f@G3c2d G3c30@G3c2e) ((lambda (G3c33@maps G3c34@ynew) (values (G3b22@gen-cons G3b8c@e G3c1f@x G3c20@y G3c2a@xnew G3c34@ynew) G3c33@maps)) G3c30@G3c2e G3c2f@G3c2d)))) G3c26@G3c24 G3c25@G3c23)))) G3c1d@ls/false) ((lambda (G3c37@t) ((lambda (G3c39@ls/false) (if G3c39@ls/false (apply (lambda (G3c3b@ls) (call-with-values (lambda () (G3b18@gen-syntax G3b8b@src G3c3b@ls G3b8d@r G3b8e@maps G3b8f@ellipsis? '#t)) (lambda (G3c3f@G3c3d G3c40@G3c3e) ((lambda (G3c43@maps G3c44@lsnew) (values (G3b24@gen-vector G3b8c@e G3c3b@ls G3c44@lsnew) G3c43@maps)) G3c40@G3c3e G3c3f@G3c3d)))) G3c39@ls/false) ((lambda (G3c47@t) ((lambda (G3c49@ls/false) (if G3c49@ls/false (apply (lambda () (values (list 'quote G3b8c@e) G3b8e@maps)) G3c49@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3c47@t))) (G2d2d@syntax-dispatch G3c47@t '_))) G3c37@t))) (G2d2d@syntax-dispatch G3c37@t '#(vector each-any)))) G3c1b@t))) (G2d2d@syntax-dispatch G3c1b@t '(any . any)))) G3bc5@t))) (G2d2d@syntax-dispatch G3bc5@t '(any any . any)))) G3bb7@t))) (G2d2d@syntax-dispatch G3bb7@t '(any any)))) G3b9f@t))) (G2d2d@syntax-dispatch G3b9f@t 'any))) G3b97@t))) (G2d2d@syntax-dispatch G3b97@t 'any))) G3b8c@e))) (set! G3b1a@gen-ref (lambda (G3b73@src G3b74@var G3b75@level G3b76@maps) (if (= G3b75@level '0) (values G3b74@var G3b76@maps) (if (null? G3b76@maps) (G2e18@syntax-violation '#f '"missing ellipsis in syntax form" G3b73@src) (call-with-values (lambda () (G3b1a@gen-ref G3b73@src G3b74@var (- G3b75@level '1) (cdr G3b76@maps))) (lambda (G3b7d@G3b7b G3b7e@G3b7c) ((lambda (G3b81@outer-maps G3b82@outer-var) ((lambda (G3b85@t) (if G3b85@t ((lambda (G3b87@b) (values (cdr G3b87@b) G3b76@maps)) G3b85@t) ((lambda (G3b89@inner-var) (values G3b89@inner-var (cons (cons (cons G3b82@outer-var G3b89@inner-var) (car G3b76@maps)) G3b81@outer-maps))) (G2abc@gen-lexical 'tmp)))) (assq G3b82@outer-var (car G3b76@maps)))) G3b7e@G3b7c G3b7d@G3b7b))))))) (set! G3b1c@gen-append (lambda (G3b6f@x G3b70@y) (if (fast-equal? G3b70@y ''()) G3b6f@x (list 'append G3b6f@x G3b70@y)))) (set! G3b1e@gen-mappend (lambda (G3b6b@e G3b6c@map-env) (list 'apply '(primitive append) (G3b20@gen-map G3b6b@e G3b6c@map-env)))) (set! G3b20@gen-map (lambda (G3b59@e G3b5a@map-env) ((lambda (G3b5d@formals G3b5e@actuals) (if (eq? (car G3b59@e) 'ref) (car G3b5e@actuals) (if (for-all (lambda (G3b61@x) (and (eq? (car G3b61@x) 'ref) (memq (cadr G3b61@x) G3b5d@formals))) (cdr G3b59@e)) ((lambda (G3b63@args) (cons 'map (cons (list 'primitive (car G3b59@e)) G3b63@args))) (map ((lambda (G3b65@r) (lambda (G3b67@x) (cdr (assq (cadr G3b67@x) G3b65@r)))) (map cons G3b5d@formals G3b5e@actuals)) (cdr G3b59@e))) (cons* 'map (list 'lambda G3b5d@formals G3b59@e) G3b5e@actuals)))) (map cdr G3b5a@map-env) (map (lambda (G3b69@x) (list 'ref (car G3b69@x))) G3b5a@map-env)))) (set! G3b22@gen-cons (lambda (G3b49@e G3b4a@x G3b4b@y G3b4c@xnew G3b4d@ynew) ((lambda (G3b53@t) (if (memv G3b53@t '(quote)) (if (eq? (car G3b4c@xnew) 'quote) ((lambda (G3b55@xnew G3b56@ynew) (if (and (eq? G3b55@xnew G3b4a@x) (eq? G3b56@ynew G3b4b@y)) (list 'quote G3b49@e) (list 'quote (cons G3b55@xnew G3b56@ynew)))) (cadr G3b4c@xnew) (cadr G3b4d@ynew)) (if (null? (cadr G3b4d@ynew)) (list 'list G3b4c@xnew) (list 'cons G3b4c@xnew G3b4d@ynew))) (if (memv G3b53@t '(list)) (cons 'list (cons G3b4c@xnew (cdr G3b4d@ynew))) (list 'cons G3b4c@xnew G3b4d@ynew)))) (car G3b4d@ynew)))) (set! G3b24@gen-vector (lambda (G3b43@e G3b44@ls G3b45@lsnew) (if (eq? (car G3b45@lsnew) 'quote) (if (eq? (cadr G3b45@lsnew) G3b44@ls) (list 'quote G3b43@e) (list 'quote (list->vector (cadr G3b45@lsnew)))) (if (eq? (car G3b45@lsnew) 'list) (cons 'vector (cdr G3b45@lsnew)) (list 'list->vector G3b45@lsnew))))) (set! G3b26@regen (lambda (G3b3d@x) ((lambda (G3b3f@t) (if (memv G3b3f@t '(ref)) (cadr G3b3d@x) (if (memv G3b3f@t '(primitive)) (list 'primitive (cadr G3b3d@x)) (if (memv G3b3f@t '(quote)) (list 'quote (cadr G3b3d@x)) (if (memv G3b3f@t '(lambda)) (G2a9a@G29dc@build-lambda '#f (cadr G3b3d@x) (G3b26@regen (caddr G3b3d@x))) (if (memv G3b3f@t '(map)) ((lambda (G3b41@ls) (cons '(primitive ellipsis-map) G3b41@ls)) (map G3b26@regen (cdr G3b3d@x))) (cons (list 'primitive (car G3b3d@x)) (map G3b26@regen (cdr G3b3d@x))))))))) (car G3b3d@x)))) (lambda (G3b27@e G3b28@r G3b29@mr) ((lambda (G3b2d@t) ((lambda (G3b2f@ls/false) (if G3b2f@ls/false (apply (lambda (G3b31@x) (call-with-values (lambda () (G3b18@gen-syntax G3b27@e G3b31@x G3b28@r '() G2d2f@ellipsis? '#f)) (lambda (G3b35@G3b33 G3b36@G3b34) ((lambda (G3b39@maps G3b3a@e) (G3b26@regen G3b3a@e)) G3b36@G3b34 G3b35@G3b33)))) G3b2f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3b2d@t))) (G2d2d@syntax-dispatch G3b2d@t '(_ any)))) G3b27@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d3b@core-macro-transformer (lambda (G3c4b@name) ((lambda (G3c4d@t) (if (memv G3c4d@t '(quote)) G2cdd@quote-transformer (if (memv G3c4d@t '(lambda)) G2ce1@lambda-transformer (if (memv G3c4d@t '(case-lambda)) G2cdf@case-lambda-transformer (if (memv G3c4d@t '(letrec)) G2cc5@letrec-transformer (if (memv G3c4d@t '(letrec*)) G2cc7@letrec*-transformer (if (memv G3c4d@t '(if)) G2cd5@if-transformer (if (memv G3c4d@t '(and)) G2cd7@and-transformer (if (memv G3c4d@t '(or)) G2cd9@or-transformer (if (memv G3c4d@t '(foreign-call)) G2d29@foreign-call-transformer (if (memv G3c4d@t '(syntax-case)) G2d35@syntax-case-transformer (if (memv G3c4d@t '(syntax)) G2d39@syntax-transformer (if (memv G3c4d@t '(type-descriptor)) G2ccb@type-descriptor-transformer (if (memv G3c4d@t '(record-type-descriptor)) G2ccd@record-type-descriptor-transformer (if (memv G3c4d@t '(record-constructor-descriptor)) G2ccf@record-constructor-descriptor-transformer (if (memv G3c4d@t '(fluid-let-syntax)) G2cc9@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3c4b@name))))))))))))))))) G3c4b@name))) (set! G2d3d@file-options-macro (lambda (G3c4f@x) ((lambda (G3c52@valid-option?) (begin (set! G3c52@valid-option? (lambda (G3c5b@x) (and (G2b3c@id? G3c5b@x) (memq (G2b3e@id->sym G3c5b@x) '(no-fail no-create no-truncate))))) ((lambda (G3c53@t) ((lambda (G3c55@ls/false) (if (and G3c55@ls/false (apply (lambda (G3c57@opt*) (and (for-all G3c52@valid-option? G3c57@opt*) (G26f1@G2682@file-options-spec (map G2b3e@id->sym G3c57@opt*)))) G3c55@ls/false)) (apply (lambda (G3c59@opt*) (G2ce3@bless (list 'quote (G26f1@G2682@file-options-spec (map G2b3e@id->sym G3c59@opt*))))) G3c55@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3c53@t))) (G2d2d@syntax-dispatch G3c53@t '(_ . each-any)))) G3c4f@x))) '#f))) (set! G2d3f@symbol-macro (lambda (G3c5d@x G3c5e@set) ((lambda (G3c61@t) ((lambda (G3c63@ls/false) (if (and G3c63@ls/false (apply (lambda (G3c65@name) (and (G2b3c@id? G3c65@name) (memq (G2b3e@id->sym G3c65@name) G3c5e@set))) G3c63@ls/false)) (apply (lambda (G3c67@name) (G2ce3@bless (list 'quote G3c67@name))) G3c63@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3c61@t))) (G2d2d@syntax-dispatch G3c61@t '(_ any)))) G3c5d@x))) (set! G2d41@macro-transformer (lambda (G3c69@x) (if (procedure? G3c69@x) G3c69@x (if (symbol? G3c69@x) ((lambda (G3c6b@t) (if (memv G3c6b@t '(define-record-type)) G2d21@define-record-type-macro (if (memv G3c6b@t '(define-struct)) G2d1f@define-struct-macro (if (memv G3c6b@t '(include)) G2d15@include-macro (if (memv G3c6b@t '(cond)) G2d11@cond-macro (if (memv G3c6b@t '(let)) G2ce9@let-macro (if (memv G3c6b@t '(do)) G2d09@do-macro (if (memv G3c6b@t '(or)) G2d0d@or-macro (if (memv G3c6b@t '(and)) G2d0f@and-macro (if (memv G3c6b@t '(let*)) G2d0b@let*-macro (if (memv G3c6b@t '(let-values)) G2ceb@let-values-macro (if (memv G3c6b@t '(let*-values)) G2ced@let*-values-macro (if (memv G3c6b@t '(syntax-rules)) G2d19@syntax-rules-macro (if (memv G3c6b@t '(quasiquote)) G2d1b@quasiquote-macro (if (memv G3c6b@t '(quasisyntax)) G2d1d@quasisyntax-macro (if (memv G3c6b@t '(with-syntax)) G2ce5@with-syntax-macro (if (memv G3c6b@t '(when)) G2cd1@when-macro (if (memv G3c6b@t '(unless)) G2cd3@unless-macro (if (memv G3c6b@t '(case)) G2cdb@case-macro (if (memv G3c6b@t '(identifier-syntax)) G2d07@identifier-syntax-macro (if (memv G3c6b@t '(time)) G2cff@time-macro (if (memv G3c6b@t '(delay)) G2d01@delay-macro (if (memv G3c6b@t '(assert)) G2d03@assert-macro (if (memv G3c6b@t '(endianness)) G2d05@endianness-macro (if (memv G3c6b@t '(guard)) G2cfb@guard-macro (if (memv G3c6b@t '(define-enumeration)) G2cfd@define-enumeration-macro (if (memv G3c6b@t '(trace-lambda)) G2cef@trace-lambda-macro (if (memv G3c6b@t '(trace-define)) G2cf1@trace-define-macro (if (memv G3c6b@t '(trace-define-syntax)) G2cf3@trace-define-syntax-macro (if (memv G3c6b@t '(trace-let-syntax)) G2cf7@trace-let-syntax-macro (if (memv G3c6b@t '(trace-letrec-syntax)) G2cf9@trace-letrec-syntax-macro (if (memv G3c6b@t '(define-condition-type)) G2d23@define-condition-type-macro (if (memv G3c6b@t '(parameterize)) G2d27@parameterize-macro (if (memv G3c6b@t '(include-into)) G2d17@include-into-macro (if (memv G3c6b@t '(eol-style)) (lambda (G3c6d@x) (G2d3f@symbol-macro G3c6d@x '(none lf cr crlf nel crnel ls))) (if (memv G3c6b@t '(error-handling-mode)) (lambda (G3c6f@x) (G2d3f@symbol-macro G3c6f@x '(ignore raise replace))) (if (memv G3c6b@t '(buffer-mode)) (lambda (G3c71@x) (G2d3f@symbol-macro G3c71@x '(none line block))) (if (memv G3c6b@t '(file-options)) G2d3d@file-options-macro (if (memv G3c6b@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2d25@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3c69@x)))))))))))))))))))))))))))))))))))))))) G3c69@x) (error 'core-macro-transformer '"BUG: invalid macro" G3c69@x))))) (set! G2d43@local-macro-transformer (lambda (G3c73@x) (car G3c73@x))) (set! G2d45@do-macro-call (lambda (G3c75@transformer G3c76@expr) ((lambda (G3c79@out) (begin ((letrec ((G3c7b@f (lambda (G3c7d@x) (if (not (G2b04@stx? G3c7d@x)) (if (pair? G3c7d@x) (begin (G3c7b@f (car G3c7d@x)) (G3c7b@f (cdr G3c7d@x))) (if (vector? G3c7d@x) (vector-for-each G3c7b@f G3c7d@x) (if (symbol? G3c7d@x) (G2e18@syntax-violation '#f '"raw symbol encountered in output of macro" G3c76@expr G3c7d@x) (void)))) (void))))) G3c7b@f) G3c79@out) (G2b26@add-mark (G2b1c@gen-mark) G3c79@out G3c76@expr))) (G3c75@transformer (G2b26@add-mark G2b1e@anti-mark G3c76@expr '#f))))) (set! G2d47@chi-macro (lambda (G3c7f@p G3c80@e) (G2d45@do-macro-call (G2d41@macro-transformer G3c7f@p) G3c80@e))) (set! G2d49@chi-local-macro (lambda (G3c83@p G3c84@e) (G2d45@do-macro-call (G2d43@local-macro-transformer G3c83@p) G3c84@e))) (set! G2d4b@chi-global-macro (lambda (G3c87@p G3c88@e) ((lambda (G3c8b@lib G3c8c@loc) (begin (G2965@G280d@visit-library G3c8b@lib) ((lambda (G3c8f@x) ((lambda (G3c91@transformer) (G2d45@do-macro-call G3c91@transformer G3c88@e)) (if (procedure? G3c8f@x) G3c8f@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3c8f@x)))) (symbol-value G3c8c@loc)))) (car G3c87@p) (cdr G3c87@p)))) (set! G2d4d@chi-expr* (lambda (G3c93@e* G3c94@r G3c95@mr) (if (null? G3c93@e*) '() ((lambda (G3c99@e) (cons G3c99@e (G2d4d@chi-expr* (cdr G3c93@e*) G3c94@r G3c95@mr))) (G2d51@chi-expr (car G3c93@e*) G3c94@r G3c95@mr))))) (set! G2d4f@chi-application (lambda (G3c9b@e G3c9c@r G3c9d@mr) ((lambda (G3ca1@t) ((lambda (G3ca3@ls/false) (if G3ca3@ls/false (apply (lambda (G3ca5@rator G3ca6@rands) ((lambda (G3ca9@rator) (cons G3ca9@rator (G2d4d@chi-expr* G3ca6@rands G3c9c@r G3c9d@mr))) (G2d51@chi-expr G3ca5@rator G3c9c@r G3c9d@mr))) G3ca3@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3ca1@t))) (G2d2d@syntax-dispatch G3ca1@t '(any . each-any)))) G3c9b@e))) (set! G2d51@chi-expr (lambda (G3cab@e G3cac@r G3cad@mr) (call-with-values (lambda () (G2b64@syntax-type G3cab@e G3cac@r)) (lambda (G3cb4@G3cb1 G3cb5@G3cb2 G3cb6@G3cb3) ((lambda (G3cba@kwd G3cbb@value G3cbc@type) ((lambda (G3cc0@t) (if (memv G3cc0@t '(core-macro)) ((lambda (G3cc2@transformer) (G3cc2@transformer G3cab@e G3cac@r G3cad@mr)) (G2d3b@core-macro-transformer G3cbb@value)) (if (memv G3cc0@t '(global)) ((lambda (G3cc4@lib) ((lambda (G3cc6@loc) ((lambda () (begin ((G2d9a@inv-collector) G3cc4@lib) G3cc6@loc)))) (cdr G3cbb@value))) (car G3cbb@value)) (if (memv G3cc0@t '(core-prim)) ((lambda (G3cc8@name) (list 'primitive G3cc8@name)) G3cbb@value) (if (memv G3cc0@t '(call)) (G2d4f@chi-application G3cab@e G3cac@r G3cad@mr) (if (memv G3cc0@t '(lexical)) ((lambda (G3cca@lex) G3cca@lex) (G2cb9@lexical-var G3cbb@value)) (if (memv G3cc0@t '(global-macro global-macro!)) (G2d51@chi-expr (G2d4b@chi-global-macro G3cbb@value G3cab@e) G3cac@r G3cad@mr) (if (memv G3cc0@t '(local-macro local-macro!)) (G2d51@chi-expr (G2d49@chi-local-macro G3cbb@value G3cab@e) G3cac@r G3cad@mr) (if (memv G3cc0@t '(macro macro!)) (G2d51@chi-expr (G2d47@chi-macro G3cbb@value G3cab@e) G3cac@r G3cad@mr) (if (memv G3cc0@t '(constant)) ((lambda (G3ccc@datum) (list 'quote G3ccc@datum)) G3cbb@value) (if (memv G3cc0@t '(set!)) (G2d53@chi-set! G3cab@e G3cac@r G3cad@mr) (if (memv G3cc0@t '(begin)) ((lambda (G3cce@t) ((lambda (G3cd0@ls/false) (if G3cd0@ls/false (apply (lambda (G3cd2@x G3cd3@x*) (G2a9d@G2a0e@build-sequence '#f (G2d4d@chi-expr* (cons G3cd2@x G3cd3@x*) G3cac@r G3cad@mr))) G3cd0@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3cce@t))) (G2d2d@syntax-dispatch G3cce@t '(_ any . each-any)))) G3cab@e) (if (memv G3cc0@t '(let-syntax letrec-syntax)) ((lambda (G3cd6@t) ((lambda (G3cd8@ls/false) (if (and G3cd8@ls/false (apply (lambda (G3cda@xlhs* G3cdb@xrhs* G3cdc@xbody G3cdd@xbody*) (if (not (G2b46@valid-bound-ids? G3cda@xlhs*)) (G2e18@syntax-violation '#f '"invalid identifiers" G3cab@e) (void))) G3cd8@ls/false)) (apply (lambda (G3ce2@xlhs* G3ce3@xrhs* G3ce4@xbody G3ce5@xbody*) ((lambda (G3cea@xlab*) ((lambda (G3cec@xrib) ((lambda (G3cee@xb*) ((lambda () (G2a9d@G2a0e@build-sequence '#f (G2d4d@chi-expr* (map (lambda (G3cf0@x) (G2b28@add-subst G3cec@xrib G3cf0@x)) (cons G3ce4@xbody G3ce5@xbody*)) (append (map cons G3cea@xlab* G3cee@xb*) G3cac@r) (append (map cons G3cea@xlab* G3cee@xb*) G3cad@mr)))))) (map (lambda (G3cf2@x) (G2b7a@make-eval-transformer (G2d8c@expand-transformer (if (eq? G3cbc@type 'let-syntax) G3cf2@x (G2b28@add-subst G3cec@xrib G3cf2@x)) G3cad@mr))) G3ce3@xrhs*))) (G2af7@make-full-rib G3ce2@xlhs* G3cea@xlab*))) (map G2ac0@gen-label G3ce2@xlhs*))) G3cd8@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3cd6@t))) (G2d2d@syntax-dispatch G3cd6@t '(_ #(each (any any)) any . each-any)))) G3cab@e) (if (memv G3cc0@t '(displaced-lexical)) (G2e18@syntax-violation '#f '"identifier out of context" G3cab@e) (if (memv G3cc0@t '(syntax)) (G2e18@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3cab@e) (if (memv G3cc0@t '(define define-syntax module import library)) (G2e18@syntax-violation '#f (string-append ((lambda (G3cf4@t) (if (memv G3cf4@t '(define)) '"a definition" (if (memv G3cf4@t '(define-syntax)) '"a define-syntax" (if (memv G3cf4@t '(module)) '"a module definition" (if (memv G3cf4@t '(library)) '"a library definition" (if (memv G3cf4@t '(import)) '"an import declaration" (if (memv G3cf4@t '(export)) '"an export declaration" '"a non-expression"))))))) G3cbc@type) '" was found where an expression was expected") G3cab@e) (if (memv G3cc0@t '(mutable)) (G2e18@syntax-violation '#f '"attempt to reference an unexportable variable" G3cab@e) (G2e18@syntax-violation '#f '"invalid expression" G3cab@e)))))))))))))))))) G3cbc@type)) G3cb6@G3cb3 G3cb5@G3cb2 G3cb4@G3cb1))))) (set! G2d53@chi-set! (lambda (G3cf6@e G3cf7@r G3cf8@mr) ((lambda (G3cfc@t) ((lambda (G3cfe@ls/false) (if (and G3cfe@ls/false (apply (lambda (G3d00@x G3d01@v) (G2b3c@id? G3d00@x)) G3cfe@ls/false)) (apply (lambda (G3d04@x G3d05@v) (call-with-values (lambda () (G2b64@syntax-type G3d04@x G3cf7@r)) (lambda (G3d0b@G3d08 G3d0c@G3d09 G3d0d@G3d0a) ((lambda (G3d11@kwd G3d12@value G3d13@type) ((lambda (G3d17@t) (if (memv G3d17@t '(lexical)) (begin (G2cbd@set-lexical-mutable! G3d12@value '#t) (list 'set! (G2cb9@lexical-var G3d12@value) (G2d51@chi-expr G3d05@v G3cf7@r G3cf8@mr))) (if (memv G3d17@t '(core-prim)) (G2e18@syntax-violation '#f '"cannot modify imported core primitive" G3cf6@e) (if (memv G3d17@t '(global)) (G2e18@syntax-violation '#f '"attempt to modify imported binding" G3cf6@e) (if (memv G3d17@t '(global-macro!)) (G2d51@chi-expr (G2d4b@chi-global-macro G3d12@value G3cf6@e) G3cf7@r G3cf8@mr) (if (memv G3d17@t '(local-macro!)) (G2d51@chi-expr (G2d49@chi-local-macro G3d12@value G3cf6@e) G3cf7@r G3cf8@mr) (if (memv G3d17@t '(mutable)) (G2e18@syntax-violation '#f '"attempt to assign to an unexportable variable" G3cf6@e) (G2e18@syntax-violation '#f '"invalid syntax" G3cf6@e)))))))) G3d13@type)) G3d0d@G3d0a G3d0c@G3d09 G3d0b@G3d08)))) G3cfe@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3cfc@t))) (G2d2d@syntax-dispatch G3cfc@t '(_ any any)))) G3cf6@e))) (set! G2d55@verify-formals (lambda (G3d19@fmls G3d1a@stx) ((lambda (G3d1d@t) ((lambda (G3d1f@ls/false) (if G3d1f@ls/false (apply (lambda (G3d21@x*) (if (not (G2b46@valid-bound-ids? G3d21@x*)) (G2ce7@invalid-fmls-error G3d1a@stx G3d19@fmls) (void))) G3d1f@ls/false) ((lambda (G3d23@t) ((lambda (G3d25@ls/false) (if G3d25@ls/false (apply (lambda (G3d27@x* G3d28@x) (if (not (G2b46@valid-bound-ids? (cons G3d28@x G3d27@x*))) (G2ce7@invalid-fmls-error G3d1a@stx G3d19@fmls) (void))) G3d25@ls/false) ((lambda (G3d2b@t) ((lambda (G3d2d@ls/false) (if G3d2d@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid syntax" G3d1a@stx)) G3d2d@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3d2b@t))) (G2d2d@syntax-dispatch G3d2b@t '_))) G3d23@t))) (G2d2d@syntax-dispatch G3d23@t '#(each+ any () any)))) G3d1d@t))) (G2d2d@syntax-dispatch G3d1d@t 'each-any))) G3d19@fmls))) (set! G2d57@chi-lambda-clause (lambda (G3d2f@stx G3d30@fmls G3d31@body* G3d32@r G3d33@mr) ((lambda (G3d39@t) ((lambda (G3d3b@ls/false) (if G3d3b@ls/false (apply (lambda (G3d3d@x*) (begin (G2d55@verify-formals G3d30@fmls G3d2f@stx) ((lambda (G3d3f@lex* G3d40@lab*) (values G3d3f@lex* (G2d67@chi-internal (G2b28@add-subst (G2af7@make-full-rib G3d3d@x* G3d40@lab*) G3d31@body*) (G2cc1@add-lexicals G3d40@lab* G3d3f@lex* G3d32@r) G3d33@mr))) (map G2abc@gen-lexical G3d3d@x*) (map G2ac0@gen-label G3d3d@x*)))) G3d3b@ls/false) ((lambda (G3d43@t) ((lambda (G3d45@ls/false) (if G3d45@ls/false (apply (lambda (G3d47@x* G3d48@x) (begin (G2d55@verify-formals G3d30@fmls G3d2f@stx) ((lambda (G3d4b@lex* G3d4c@lab* G3d4d@lex G3d4e@lab) (values (append G3d4b@lex* G3d4d@lex) (G2d67@chi-internal (G2b28@add-subst (G2af7@make-full-rib (cons G3d48@x G3d47@x*) (cons G3d4e@lab G3d4c@lab*)) G3d31@body*) (G2cc1@add-lexicals (cons G3d4e@lab G3d4c@lab*) (cons G3d4d@lex G3d4b@lex*) G3d32@r) G3d33@mr))) (map G2abc@gen-lexical G3d47@x*) (map G2ac0@gen-label G3d47@x*) (G2abc@gen-lexical G3d48@x) (G2ac0@gen-label G3d48@x)))) G3d45@ls/false) ((lambda (G3d53@t) ((lambda (G3d55@ls/false) (if G3d55@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid syntax" G3d30@fmls)) G3d55@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3d53@t))) (G2d2d@syntax-dispatch G3d53@t '_))) G3d43@t))) (G2d2d@syntax-dispatch G3d43@t '#(each+ any () any)))) G3d39@t))) (G2d2d@syntax-dispatch G3d39@t 'each-any))) G3d30@fmls))) (set! G2d59@chi-lambda-clause* (lambda (G3d57@stx G3d58@fmls* G3d59@body** G3d5a@r G3d5b@mr) (if (null? G3d58@fmls*) (values '() '()) (call-with-values (lambda () (G2d57@chi-lambda-clause G3d57@stx (car G3d58@fmls*) (car G3d59@body**) G3d5a@r G3d5b@mr)) (lambda (G3d63@G3d61 G3d64@G3d62) ((lambda (G3d67@b G3d68@a) (call-with-values (lambda () (G2d59@chi-lambda-clause* G3d57@stx (cdr G3d58@fmls*) (cdr G3d59@body**) G3d5a@r G3d5b@mr)) (lambda (G3d6d@G3d6b G3d6e@G3d6c) ((lambda (G3d71@b* G3d72@a*) (values (cons G3d68@a G3d72@a*) (cons G3d67@b G3d71@b*))) G3d6e@G3d6c G3d6d@G3d6b)))) G3d64@G3d62 G3d63@G3d61)))))) (set! G2d5b@chi-defun (lambda (G3d75@x G3d76@r G3d77@mr) ((lambda (G3d7b@fmls G3d7c@body*) (call-with-values (lambda () (G2d57@chi-lambda-clause G3d7b@fmls G3d7b@fmls G3d7c@body* G3d76@r G3d77@mr)) (lambda (G3d81@G3d7f G3d82@G3d80) ((lambda (G3d85@body G3d86@fmls) (G2a9a@G29dc@build-lambda '#f G3d86@fmls G3d85@body)) G3d82@G3d80 G3d81@G3d7f)))) (car G3d75@x) (cdr G3d75@x)))) (set! G2d5d@chi-rhs (lambda (G3d89@rhs G3d8a@r G3d8b@mr) ((lambda (G3d8f@t) (if (memv G3d8f@t '(defun)) (G2d5b@chi-defun (cdr G3d89@rhs) G3d8a@r G3d8b@mr) (if (memv G3d8f@t '(expr)) ((lambda (G3d91@expr) (G2d51@chi-expr G3d91@expr G3d8a@r G3d8b@mr)) (cdr G3d89@rhs)) (if (memv G3d8f@t '(top-expr)) ((lambda (G3d93@expr) (G2a9d@G2a0e@build-sequence '#f (list (G2d51@chi-expr G3d93@expr G3d8a@r G3d8b@mr) (G2a9e@G2a10@build-void)))) (cdr G3d89@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3d89@rhs))))) (car G3d89@rhs)))) (set! G2d5f@expand-interaction-rhs*/init* (lambda (G3d95@lhs* G3d96@rhs* G3d97@init* G3d98@r G3d99@mr) ((letrec ((G3d9f@f (lambda (G3da1@lhs* G3da2@rhs*) (if (null? G3da1@lhs*) (map (lambda (G3da5@x) (G2d51@chi-expr G3da5@x G3d98@r G3d99@mr)) G3d97@init*) ((lambda (G3da7@lhs G3da8@rhs) ((lambda (G3dab@t) (if (memv G3dab@t '(defun)) ((lambda (G3dad@rhs) (cons (list 'set! G3da7@lhs G3dad@rhs) (G3d9f@f (cdr G3da1@lhs*) (cdr G3da2@rhs*)))) (G2d5b@chi-defun (cdr G3da8@rhs) G3d98@r G3d99@mr)) (if (memv G3dab@t '(expr)) ((lambda (G3daf@rhs) (cons (list 'set! G3da7@lhs G3daf@rhs) (G3d9f@f (cdr G3da1@lhs*) (cdr G3da2@rhs*)))) (G2d51@chi-expr (cdr G3da8@rhs) G3d98@r G3d99@mr)) (if (memv G3dab@t '(top-expr)) ((lambda (G3db1@e) (cons G3db1@e (G3d9f@f (cdr G3da1@lhs*) (cdr G3da2@rhs*)))) (G2d51@chi-expr (cdr G3da8@rhs) G3d98@r G3d99@mr)) (error 'expand-interaction '"invallid" G3da8@rhs))))) (car G3da8@rhs))) (car G3da1@lhs*) (car G3da2@rhs*)))))) G3d9f@f) G3d95@lhs* G3d96@rhs*))) (set! G2d61@chi-rhs* (lambda (G3db3@rhs* G3db4@r G3db5@mr) ((letrec ((G3db9@f (lambda (G3dbb@ls) (if (null? G3dbb@ls) '() ((lambda (G3dbd@a) (cons G3dbd@a (G3db9@f (cdr G3dbb@ls)))) (G2d5d@chi-rhs (car G3dbb@ls) G3db4@r G3db5@mr)))))) G3db9@f) G3db3@rhs*))) (set! G2d63@find-bound=? (lambda (G3dbf@x G3dc0@lhs* G3dc1@rhs*) (if (null? G3dc0@lhs*) '#f (if (G2b42@bound-id=? G3dbf@x (car G3dc0@lhs*)) (car G3dc1@rhs*) (G2d63@find-bound=? G3dbf@x (cdr G3dc0@lhs*) (cdr G3dc1@rhs*)))))) (set! G2d65@find-dups (lambda (G3dc5@ls) ((letrec ((G3dc7@f (lambda (G3dc9@ls G3dca@dups) (if (null? G3dc9@ls) G3dca@dups ((lambda (G3dcd@t) (if G3dcd@t ((lambda (G3dcf@x) (G3dc7@f (cdr G3dc9@ls) (cons (list (car G3dc9@ls) G3dcf@x) G3dca@dups))) G3dcd@t) (G3dc7@f (cdr G3dc9@ls) G3dca@dups))) (G2d63@find-bound=? (car G3dc9@ls) (cdr G3dc9@ls) (cdr G3dc9@ls))))))) G3dc7@f) G3dc5@ls '()))) (set! G2d67@chi-internal (lambda (G3dd1@e* G3dd2@r G3dd3@mr) ((lambda (G3dd7@rib) (call-with-values (lambda () (G2d8a@chi-body* (map (lambda (G3de1@x) (G2b28@add-subst G3dd7@rib G3de1@x)) (G2b3a@syntax->list G3dd1@e*)) G3dd2@r G3dd3@mr '() '() '() '() '() G3dd7@rib '#f)) (lambda (G3de3@G3dd9 G3de4@G3dda G3de5@G3ddb G3de6@G3ddc G3de7@G3ddd G3de8@G3dde G3de9@G3ddf G3dea@G3de0) ((lambda (G3df3@_exp* G3df4@kwd* G3df5@mod** G3df6@rhs* G3df7@lex* G3df8@mr G3df9@r G3dfa@e*) (begin (if (null? G3dfa@e*) (G2e18@syntax-violation '#f '"no expression in body" G3dfa@e*) (void)) ((lambda (G3e03@init*) ((lambda (G3e05@rhs*) ((lambda () (G2aa0@G2a14@build-letrec* '#f (reverse G3df7@lex*) (reverse G3e05@rhs*) (G2a9d@G2a0e@build-sequence '#f G3e03@init*))))) (G2d61@chi-rhs* G3df6@rhs* G3df9@r G3df8@mr))) (G2d4d@chi-expr* (append (apply append (reverse G3df5@mod**)) G3dfa@e*) G3df9@r G3df8@mr)))) G3dea@G3de0 G3de9@G3ddf G3de8@G3dde G3de7@G3ddd G3de6@G3ddc G3de5@G3ddb G3de4@G3dda G3de3@G3dd9)))) (G2aeb@make-empty-rib)))) (set! G2d69@parse-module (lambda (G3e07@e) ((lambda (G3e09@t) ((lambda (G3e0b@ls/false) (if G3e0b@ls/false (apply (lambda (G3e0d@export* G3e0e@b*) (begin (if (not (for-all G2b3c@id? G3e0d@export*)) (G2e18@syntax-violation '#f '"module exports must be identifiers" G3e07@e) (void)) (values '#f (list->vector G3e0d@export*) G3e0e@b*))) G3e0b@ls/false) ((lambda (G3e11@t) ((lambda (G3e13@ls/false) (if G3e13@ls/false (apply (lambda (G3e15@name G3e16@export* G3e17@b*) (begin (if (not (G2b3c@id? G3e15@name)) (G2e18@syntax-violation '#f '"module name must be an identifier" G3e07@e) (void)) (if (not (for-all G2b3c@id? G3e16@export*)) (G2e18@syntax-violation '#f '"module exports must be identifiers" G3e07@e) (void)) (values G3e15@name (list->vector G3e16@export*) G3e17@b*))) G3e13@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3e11@t))) (G2d2d@syntax-dispatch G3e11@t '(_ any each-any . each-any)))) G3e09@t))) (G2d2d@syntax-dispatch G3e09@t '(_ each-any . each-any)))) G3e07@e))) (set! G2d6f@G2d6a (make-record-type-descriptor 'module-interface '#f 'G2d6d '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2d71@G2d6c '#f) (set! G2d73@G2d6b (make-record-constructor-descriptor G2d6f@G2d6a '#f G2d71@G2d6c)) (set! G2d76@module-interface? (record-predicate G2d6f@G2d6a)) (set! G2d78@make-module-interface (record-constructor G2d73@G2d6b)) (set! G2d7a@module-interface-first-mark (record-accessor G2d6f@G2d6a '0)) (set! G2d7c@module-interface-exp-id-vec (record-accessor G2d6f@G2d6a '1)) (set! G2d7e@module-interface-exp-lab-vec (record-accessor G2d6f@G2d6a '2)) (set! G2d80@set-module-interface-first-mark! (record-mutator G2d6f@G2d6a '0)) (set! G2d82@set-module-interface-exp-id-vec! (record-mutator G2d6f@G2d6a '1)) (set! G2d84@set-module-interface-exp-lab-vec! (record-mutator G2d6f@G2d6a '2)) (set! G2d86@module-interface-exp-id* (lambda (G3e1b@iface G3e1c@id) ((lambda (G3e20@diff-marks) (begin (set! G3e20@diff-marks (lambda (G3e27@ls G3e28@x) (begin (if (null? G3e27@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G3e2b@a) (if (eq? G3e2b@a G3e28@x) '() (cons G3e2b@a (G3e20@diff-marks (cdr G3e27@ls) G3e28@x)))) (car G3e27@ls))))) ((lambda (G3e21@diff G3e22@id-vec) (if (null? G3e21@diff) G3e22@id-vec (vector-map (lambda (G3e25@x) (G2b06@make-stx (G2b08@stx-expr G3e25@x) (append G3e21@diff (G2b0a@stx-mark* G3e25@x)) '() '())) G3e22@id-vec))) (G3e20@diff-marks (G2b0a@stx-mark* G3e1c@id) (G2d7a@module-interface-first-mark G3e1b@iface)) (G2d7c@module-interface-exp-id-vec G3e1b@iface)))) '#f))) (set! G2d88@chi-internal-module (lambda (G3e2d@e G3e2e@r G3e2f@mr G3e30@lex* G3e31@rhs* G3e32@mod** G3e33@kwd*) (call-with-values (lambda () (G2d69@parse-module G3e2d@e)) (lambda (G3e3e@G3e3b G3e3f@G3e3c G3e40@G3e3d) ((lambda (G3e44@e* G3e45@exp-id* G3e46@name) ((lambda (G3e4a@rib) ((lambda (G3e4c@e*) ((lambda () (call-with-values (lambda () (G2d8a@chi-body* G3e4c@e* G3e2e@r G3e2f@mr G3e30@lex* G3e31@rhs* G3e32@mod** G3e33@kwd* '() G3e4a@rib '#f)) (lambda (G3e56@G3e4e G3e57@G3e4f G3e58@G3e50 G3e59@G3e51 G3e5a@G3e52 G3e5b@G3e53 G3e5c@G3e54 G3e5d@G3e55) ((lambda (G3e66@_exp* G3e67@kwd* G3e68@mod** G3e69@rhs* G3e6a@lex* G3e6b@mr G3e6c@r G3e6d@e*) ((lambda (G3e76@exp-lab* G3e77@mod**) (if (not G3e46@name) (values G3e6a@lex* G3e69@rhs* G3e45@exp-id* G3e76@exp-lab* G3e6c@r G3e6b@mr G3e77@mod** G3e67@kwd*) ((lambda (G3e7a@lab G3e7b@iface) (values G3e6a@lex* G3e69@rhs* (vector G3e46@name) (vector G3e7a@lab) (cons (cons G3e7a@lab (cons '$module G3e7b@iface)) G3e6c@r) (cons (cons G3e7a@lab (cons '$module G3e7b@iface)) G3e6b@mr) G3e77@mod** G3e67@kwd*)) (G2ac0@gen-label 'module) (G2d78@make-module-interface (car (G2b0a@stx-mark* G3e46@name)) (vector-map (lambda (G3e7e@x) (G2b06@make-stx (G2b08@stx-expr G3e7e@x) (G2b0a@stx-mark* G3e7e@x) '() '())) G3e45@exp-id*) G3e76@exp-lab*)))) (vector-map (lambda (G3e80@x) (or (G2b56@id->label (G2b06@make-stx (G2b3e@id->sym G3e80@x) (G2b0a@stx-mark* G3e80@x) (list G3e4a@rib) '())) (G2e18@syntax-violation '#f '"cannot find module export" G3e80@x))) G3e45@exp-id*) (cons G3e6d@e* G3e68@mod**))) G3e5d@G3e55 G3e5c@G3e54 G3e5b@G3e53 G3e5a@G3e52 G3e59@G3e51 G3e58@G3e50 G3e57@G3e4f G3e56@G3e4e)))))) (map (lambda (G3e82@x) (G2b28@add-subst G3e4a@rib G3e82@x)) (G2b3a@syntax->list G3e44@e*)))) (G2aeb@make-empty-rib))) G3e40@G3e3d G3e3f@G3e3c G3e3e@G3e3b))))) (set! G2d8a@chi-body* (lambda (G3e84@e* G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3e8a@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?) (if (null? G3e84@e*) (values G3e84@e* G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3e8a@kwd* G3e8b@exp*) ((lambda (G3e98@e) (call-with-values (lambda () (G2b64@syntax-type G3e98@e G3e85@r)) (lambda (G3e9d@G3e9a G3e9e@G3e9b G3e9f@G3e9c) ((lambda (G3ea3@kwd G3ea4@value G3ea5@type) ((lambda (G3ea9@kwd*) ((lambda (G3eab@t) (if (memv G3eab@t '(define)) (call-with-values (lambda () (G2cb1@parse-define G3e98@e)) (lambda (G3eaf@G3ead G3eb0@G3eae) ((lambda (G3eb3@rhs G3eb4@id) (begin (if (G2b4a@bound-id-member? G3eb4@id G3ea9@kwd*) (G2e18@syntax-violation '#f '"cannot redefine keyword" G3e98@e) (void)) (call-with-values (lambda () (G2ac4@gen-define-label+loc G3eb4@id G3e8c@rib)) (lambda (G3eb9@G3eb7 G3eba@G3eb8) ((lambda (G3ebd@lex G3ebe@lab) (begin (G2aed@extend-rib! G3e8c@rib G3eb4@id G3ebe@lab) (G2d8a@chi-body* (cdr G3e84@e*) (G2cbf@add-lexical G3ebe@lab G3ebd@lex G3e85@r) G3e86@mr (cons G3ebd@lex G3e87@lex*) (cons G3eb3@rhs G3e88@rhs*) G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?))) G3eba@G3eb8 G3eb9@G3eb7))))) G3eb0@G3eae G3eaf@G3ead))) (if (memv G3eab@t '(define-syntax)) (call-with-values (lambda () (G2cb3@parse-define-syntax G3e98@e)) (lambda (G3ec3@G3ec1 G3ec4@G3ec2) ((lambda (G3ec7@rhs G3ec8@id) (begin (if (G2b4a@bound-id-member? G3ec8@id G3ea9@kwd*) (G2e18@syntax-violation '#f '"cannot redefine keyword" G3e98@e) (void)) ((lambda (G3ecb@lab G3ecc@expanded-rhs) (begin (G2aed@extend-rib! G3e8c@rib G3ec8@id G3ecb@lab) ((lambda (G3ecf@b) (G2d8a@chi-body* (cdr G3e84@e*) (cons (cons G3ecb@lab G3ecf@b) G3e85@r) (cons (cons G3ecb@lab G3ecf@b) G3e86@mr) G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?)) (G2b7a@make-eval-transformer G3ecc@expanded-rhs)))) (G2ac6@gen-define-label G3ec8@id G3e8c@rib) (G2d8c@expand-transformer G3ec7@rhs G3e86@mr)))) G3ec4@G3ec2 G3ec3@G3ec1))) (if (memv G3eab@t '(let-syntax letrec-syntax)) ((lambda (G3ed1@t) ((lambda (G3ed3@ls/false) (if (and G3ed3@ls/false (apply (lambda (G3ed5@xlhs* G3ed6@xrhs* G3ed7@xbody*) (if (not (G2b46@valid-bound-ids? G3ed5@xlhs*)) (G2e18@syntax-violation '#f '"invalid identifiers" G3e98@e) (void))) G3ed3@ls/false)) (apply (lambda (G3edb@xlhs* G3edc@xrhs* G3edd@xbody*) ((lambda (G3ee1@xlab*) ((lambda (G3ee3@xrib) ((lambda (G3ee5@xb*) ((lambda () (G2d8a@chi-body* (append (map (lambda (G3ee7@x) (G2b28@add-subst G3ee3@xrib G3ee7@x)) G3edd@xbody*) (cdr G3e84@e*)) (append (map cons G3ee1@xlab* G3ee5@xb*) G3e85@r) (append (map cons G3ee1@xlab* G3ee5@xb*) G3e86@mr) G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?)))) (map (lambda (G3ee9@x) (G2b7a@make-eval-transformer (G2d8c@expand-transformer (if (eq? G3ea5@type 'let-syntax) G3ee9@x (G2b28@add-subst G3ee3@xrib G3ee9@x)) G3e86@mr))) G3edc@xrhs*))) (G2af7@make-full-rib G3edb@xlhs* G3ee1@xlab*))) (map G2ac0@gen-label G3edb@xlhs*))) G3ed3@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3ed1@t))) (G2d2d@syntax-dispatch G3ed1@t '(_ #(each (any any)) . each-any)))) G3e98@e) (if (memv G3eab@t '(begin)) ((lambda (G3eeb@t) ((lambda (G3eed@ls/false) (if G3eed@ls/false (apply (lambda (G3eef@x*) (G2d8a@chi-body* (append G3eef@x* (cdr G3e84@e*)) G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?)) G3eed@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3eeb@t))) (G2d2d@syntax-dispatch G3eeb@t '(_ . each-any)))) G3e98@e) (if (memv G3eab@t '(global-macro global-macro!)) (G2d8a@chi-body* (cons (G2b28@add-subst G3e8c@rib (G2d4b@chi-global-macro G3ea4@value G3e98@e)) (cdr G3e84@e*)) G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?) (if (memv G3eab@t '(local-macro local-macro!)) (G2d8a@chi-body* (cons (G2b28@add-subst G3e8c@rib (G2d49@chi-local-macro G3ea4@value G3e98@e)) (cdr G3e84@e*)) G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?) (if (memv G3eab@t '(macro macro!)) (G2d8a@chi-body* (cons (G2b28@add-subst G3e8c@rib (G2d47@chi-macro G3ea4@value G3e98@e)) (cdr G3e84@e*)) G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?) (if (memv G3eab@t '(module)) (call-with-values (lambda () (G2d88@chi-internal-module G3e98@e G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd*)) (lambda (G3ef9@G3ef1 G3efa@G3ef2 G3efb@G3ef3 G3efc@G3ef4 G3efd@G3ef5 G3efe@G3ef6 G3eff@G3ef7 G3f00@G3ef8) ((lambda (G3f09@kwd* G3f0a@mod** G3f0b@mr G3f0c@r G3f0d@m-exp-lab* G3f0e@m-exp-id* G3f0f@rhs* G3f10@lex*) (begin (vector-for-each (lambda (G3f19@id G3f1a@lab) (G2aed@extend-rib! G3e8c@rib G3f19@id G3f1a@lab)) G3f0e@m-exp-id* G3f0d@m-exp-lab*) (G2d8a@chi-body* (cdr G3e84@e*) G3f0c@r G3f0b@mr G3f10@lex* G3f0f@rhs* G3f0a@mod** G3f09@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?))) G3f00@G3ef8 G3eff@G3ef7 G3efe@G3ef6 G3efd@G3ef5 G3efc@G3ef4 G3efb@G3ef3 G3efa@G3ef2 G3ef9@G3ef1))) (if (memv G3eab@t '(library)) (begin (G2dfa@library-expander (G2b52@stx->datum G3e98@e)) (G2d8a@chi-body* (cdr G3e84@e*) G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?)) (if (memv G3eab@t '(export)) ((lambda (G3f1d@t) ((lambda (G3f1f@ls/false) (if G3f1f@ls/false (apply (lambda (G3f21@exp-decl*) (G2d8a@chi-body* (cdr G3e84@e*) G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* (append G3f21@exp-decl* G3e8b@exp*) G3e8c@rib G3e8d@top?)) G3f1f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3f1d@t))) (G2d2d@syntax-dispatch G3f1d@t '(_ . each-any)))) G3e98@e) (if (memv G3eab@t '(import)) ((lambda () ((lambda (G3f24@module-import? G3f26@module-import G3f28@library-import) (begin (set! G3f24@module-import? (lambda (G3f70@e) ((lambda (G3f72@t) ((lambda (G3f74@ls/false) (if (and G3f74@ls/false (apply (lambda (G3f76@id) (G2b3c@id? G3f76@id)) G3f74@ls/false)) (apply (lambda (G3f78@id) '#t) G3f74@ls/false) ((lambda (G3f7a@t) ((lambda (G3f7c@ls/false) (if G3f7c@ls/false (apply (lambda (G3f7e@imp*) '#f) G3f7c@ls/false) ((lambda (G3f80@t) ((lambda (G3f82@ls/false) (if G3f82@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"malformed import form" G3f70@e)) G3f82@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3f80@t))) (G2d2d@syntax-dispatch G3f80@t '_))) G3f7a@t))) (G2d2d@syntax-dispatch G3f7a@t '(_ . each-any)))) G3f72@t))) (G2d2d@syntax-dispatch G3f72@t '(_ any)))) G3f70@e))) (set! G3f26@module-import (lambda (G3f51@e G3f52@r) ((lambda (G3f55@t) ((lambda (G3f57@ls/false) (if (and G3f57@ls/false (apply (lambda (G3f59@id) (G2b3c@id? G3f59@id)) G3f57@ls/false)) (apply (lambda (G3f5b@id) (call-with-values (lambda () (G2b64@syntax-type G3f5b@id G3f52@r)) (lambda (G3f60@G3f5d G3f61@G3f5e G3f62@G3f5f) ((lambda (G3f66@kwd G3f67@value G3f68@type) ((lambda (G3f6c@t) (if (memv G3f6c@t '($module)) ((lambda (G3f6e@iface) (values (G2d86@module-interface-exp-id* G3f6e@iface G3f5b@id) (G2d7e@module-interface-exp-lab-vec G3f6e@iface))) G3f67@value) (G2e18@syntax-violation '#f '"invalid import" G3f51@e))) G3f68@type)) G3f62@G3f5f G3f61@G3f5e G3f60@G3f5d)))) G3f57@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3f55@t))) (G2d2d@syntax-dispatch G3f55@t '(_ any)))) G3f51@e))) (set! G3f28@library-import (lambda (G3f37@e) ((lambda (G3f39@t) ((lambda (G3f3b@ls/false) (if G3f3b@ls/false (apply (lambda (G3f3d@ctxt G3f3e@imp*) (call-with-values (lambda () (G2d94@parse-import-spec* (G2e1e@syntax->datum G3f3e@imp*))) (lambda (G3f43@G3f41 G3f44@G3f42) ((lambda (G3f47@subst-labels G3f48@subst-names) (values (vector-map (lambda (G3f4b@name) (G2b1a@datum->stx G3f3d@ctxt G3f4b@name)) G3f48@subst-names) G3f47@subst-labels)) G3f44@G3f42 G3f43@G3f41)))) G3f3b@ls/false) ((lambda (G3f4d@t) ((lambda (G3f4f@ls/false) (if G3f4f@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid import form" G3f37@e)) G3f4f@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3f4d@t))) (G2d2d@syntax-dispatch G3f4d@t '_))) G3f39@t))) (G2d2d@syntax-dispatch G3f39@t '(any . each-any)))) G3f37@e))) (begin (call-with-values (lambda () (if (G3f24@module-import? G3e98@e) (G3f26@module-import G3e98@e G3e85@r) (G3f28@library-import G3e98@e))) (lambda (G3f2b@G3f29 G3f2c@G3f2a) ((lambda (G3f2f@lab* G3f30@id*) (vector-for-each (lambda (G3f33@id G3f34@lab) (G2aed@extend-rib! G3e8c@rib G3f33@id G3f34@lab)) G3f30@id* G3f2f@lab*)) G3f2c@G3f2a G3f2b@G3f29))) (G2d8a@chi-body* (cdr G3e84@e*) G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?)))) '#f '#f '#f))) (if G3e8d@top? (G2d8a@chi-body* (cdr G3e84@e*) G3e85@r G3e86@mr (cons (G2abc@gen-lexical 'dummy) G3e87@lex*) (cons (cons 'top-expr G3e98@e) G3e88@rhs*) G3e89@mod** G3ea9@kwd* G3e8b@exp* G3e8c@rib G3e8d@top?) (values G3e84@e* G3e85@r G3e86@mr G3e87@lex* G3e88@rhs* G3e89@mod** G3ea9@kwd* G3e8b@exp*)))))))))))))) G3ea5@type)) (if (G2b3c@id? G3ea3@kwd) (cons G3ea3@kwd G3e8a@kwd*) G3e8a@kwd*))) G3e9f@G3e9c G3e9e@G3e9b G3e9d@G3e9a)))) (car G3e84@e*))))) (set! G2d8c@expand-transformer (lambda (G3f84@expr G3f85@r) ((lambda (G3f88@rtc) ((lambda (G3f8a@expanded-rhs) (begin (for-each ((lambda (G3f8c@mark-visit) (lambda (G3f8e@x) (begin (G2964@G280b@invoke-library G3f8e@x) (G3f8c@mark-visit G3f8e@x)))) (G2d9c@vis-collector)) (G3f88@rtc)) G3f8a@expanded-rhs)) ((lambda (G3f94@G3f90 G3f95@G3f91 G3f96@G3f92 G3f97@G3f93) ((lambda (G3f9c@swap) (dynamic-wind G3f9c@swap (lambda () (G2d51@chi-expr G3f84@expr G3f85@r G3f85@r)) G3f9c@swap)) (lambda () (begin ((lambda (G3f9e@t) (begin (G3f94@G3f90 G3f96@G3f92) (set! G3f96@G3f92 G3f9e@t))) (G3f94@G3f90)) ((lambda (G3fa0@t) (begin (G3f95@G3f91 G3f97@G3f93) (set! G3f97@G3f93 G3fa0@t))) (G3f95@G3f91)))))) G2d9a@inv-collector G2d9c@vis-collector G3f88@rtc (lambda (G3fa2@x) (values))))) (G2d98@make-collector)))) (set! G2d8e@parse-exports (lambda (G3fa4@exp*) ((letrec ((G3fa6@f (lambda (G3fa8@exp* G3fa9@int* G3faa@ext*) (if (null? G3fa8@exp*) (begin (if (not (G2b46@valid-bound-ids? G3faa@ext*)) (G2e18@syntax-violation 'export '"invalid exports" (G2d65@find-dups G3faa@ext*)) (void)) (values (map G2e1e@syntax->datum G3faa@ext*) G3fa9@int*)) ((lambda (G3fae@t) ((lambda (G3fb0@ls/false) (if G3fb0@ls/false (apply (lambda (G3fb2@rename G3fb3@i* G3fb4@e*) (begin (if (not (and (eq? (G2e1e@syntax->datum G3fb2@rename) 'rename) (for-all G2b3c@id? G3fb3@i*) (for-all G2b3c@id? G3fb4@e*))) (G2e18@syntax-violation 'export '"invalid export specifier" (car G3fa8@exp*)) (void)) (G3fa6@f (cdr G3fa8@exp*) (append G3fb3@i* G3fa9@int*) (append G3fb4@e* G3faa@ext*)))) G3fb0@ls/false) ((lambda (G3fb8@t) ((lambda (G3fba@ls/false) (if G3fba@ls/false (apply (lambda (G3fbc@ie) (begin (if (not (G2b3c@id? G3fbc@ie)) (G2e18@syntax-violation 'export '"invalid export" G3fbc@ie) (void)) (G3fa6@f (cdr G3fa8@exp*) (cons G3fbc@ie G3fa9@int*) (cons G3fbc@ie G3faa@ext*)))) G3fba@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3fb8@t))) (G2d2d@syntax-dispatch G3fb8@t 'any))) G3fae@t))) (G2d2d@syntax-dispatch G3fae@t '(any . #(each (any any)))))) (car G3fa8@exp*)))))) G3fa6@f) G3fa4@exp* '() '()))) (set! G2d90@parse-library-name (lambda (G3fbe@spec) ((lambda (G3fc1@parse) (begin (set! G3fc1@parse (lambda (G3fcc@x) ((lambda (G3fce@t) ((lambda (G3fd0@ls/false) (if (and G3fd0@ls/false (apply (lambda (G3fd2@v*) (for-all (lambda (G3fd4@x) ((lambda (G3fd6@x) (and (integer? G3fd6@x) (exact? G3fd6@x))) (G2e1e@syntax->datum G3fd4@x))) G3fd2@v*)) G3fd0@ls/false)) (apply (lambda (G3fd8@v*) (values '() (map G2e1e@syntax->datum G3fd8@v*))) G3fd0@ls/false) ((lambda (G3fda@t) ((lambda (G3fdc@ls/false) (if (and G3fdc@ls/false (apply (lambda (G3fde@x G3fdf@rest) (symbol? (G2e1e@syntax->datum G3fde@x))) G3fdc@ls/false)) (apply (lambda (G3fe2@x G3fe3@rest) (call-with-values (lambda () (G3fc1@parse G3fe3@rest)) (lambda (G3fe8@G3fe6 G3fe9@G3fe7) ((lambda (G3fec@v* G3fed@x*) (values (cons (G2e1e@syntax->datum G3fe2@x) G3fed@x*) G3fec@v*)) G3fe9@G3fe7 G3fe8@G3fe6)))) G3fdc@ls/false) ((lambda (G3ff0@t) ((lambda (G3ff2@ls/false) (if G3ff2@ls/false (apply (lambda () (values '() '())) G3ff2@ls/false) ((lambda (G3ff4@t) ((lambda (G3ff6@ls/false) (if G3ff6@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid library name" G3fbe@spec)) G3ff6@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G3ff4@t))) (G2d2d@syntax-dispatch G3ff4@t '_))) G3ff0@t))) (G2d2d@syntax-dispatch G3ff0@t '()))) G3fda@t))) (G2d2d@syntax-dispatch G3fda@t '(any . any)))) G3fce@t))) (G2d2d@syntax-dispatch G3fce@t '(each-any)))) G3fcc@x))) (call-with-values (lambda () (G3fc1@parse G3fbe@spec)) (lambda (G3fc4@G3fc2 G3fc5@G3fc3) ((lambda (G3fc8@ver* G3fc9@name*) (begin (if (null? G3fc9@name*) (G2e18@syntax-violation '#f '"empty library name" G3fbe@spec) (void)) (values G3fc9@name* G3fc8@ver*))) G3fc5@G3fc3 G3fc4@G3fc2))))) '#f))) (set! G2d92@parse-library (lambda (G3ff8@e) ((lambda (G3ffa@t) ((lambda (G3ffc@ls/false) (if (and G3ffc@ls/false (apply (lambda (G3ffe@library G3fff@name* G4000@export G4001@exp* G4002@import G4003@imp* G4004@b*) (and (eq? (G2e1e@syntax->datum G4000@export) 'export) (eq? (G2e1e@syntax->datum G4002@import) 'import) (eq? (G2e1e@syntax->datum G3ffe@library) 'library))) G3ffc@ls/false)) (apply (lambda (G400c@library G400d@name* G400e@export G400f@exp* G4010@import G4011@imp* G4012@b*) (values G400d@name* G400f@exp* G4011@imp* G4012@b*)) G3ffc@ls/false) ((lambda (G401a@t) ((lambda (G401c@ls/false) (if G401c@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"malformed library" G3ff8@e)) G401c@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G401a@t))) (G2d2d@syntax-dispatch G401a@t '_))) G3ffa@t))) (G2d2d@syntax-dispatch G3ffa@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G3ff8@e))) (set! G2d94@parse-import-spec* ((lambda () ((lambda (G401f@idsyn? G4021@dup-error G4023@merge-substs G4025@exclude* G4027@find* G4029@rem* G402b@remove-dups G402d@parse-library-name G402f@import-library G4031@get-import G4033@add-imports!) (begin (set! G401f@idsyn? (lambda (G421e@x) (symbol? (G2e1e@syntax->datum G421e@x)))) (set! G4021@dup-error (lambda (G421c@name) (G2e18@syntax-violation 'import '"two imports with different bindings" G421c@name))) (set! G4023@merge-substs (lambda (G420a@s G420b@subst) ((lambda (G420f@insert-to-subst) (begin (set! G420f@insert-to-subst (lambda (G4210@a G4211@subst) ((lambda (G4214@name G4215@label) ((lambda (G4218@t) (if G4218@t ((lambda (G421a@x) (if (eq? (cdr G421a@x) G4215@label) G4211@subst (G4021@dup-error G4214@name))) G4218@t) (cons G4210@a G4211@subst))) (assq G4214@name G4211@subst))) (car G4210@a) (cdr G4210@a)))) (if (null? G420a@s) G420b@subst (G420f@insert-to-subst (car G420a@s) (G4023@merge-substs (cdr G420a@s) G420b@subst))))) '#f))) (set! G4025@exclude* (lambda (G41e0@sym* G41e1@subst) ((lambda (G41e5@exclude) (begin (set! G41e5@exclude (lambda (G41fa@sym G41fb@subst) (if (null? G41fb@subst) (G2e18@syntax-violation 'import '"cannot rename unbound identifier" G41fa@sym) (if (eq? G41fa@sym (caar G41fb@subst)) (values (cdar G41fb@subst) (cdr G41fb@subst)) ((lambda (G41fe@a) (call-with-values (lambda () (G41e5@exclude G41fa@sym (cdr G41fb@subst))) (lambda (G4202@G4200 G4203@G4201) ((lambda (G4206@subst G4207@old) (values G4207@old (cons G41fe@a G4206@subst))) G4203@G4201 G4202@G4200)))) (car G41fb@subst)))))) (if (null? G41e0@sym*) (values '() G41e1@subst) (call-with-values (lambda () (G41e5@exclude (car G41e0@sym*) G41e1@subst)) (lambda (G41e8@G41e6 G41e9@G41e7) ((lambda (G41ec@subst G41ed@old) (call-with-values (lambda () (G4025@exclude* (cdr G41e0@sym*) G41ec@subst)) (lambda (G41f2@G41f0 G41f3@G41f1) ((lambda (G41f6@subst G41f7@old*) (values (cons G41ed@old G41f7@old*) G41f6@subst)) G41f3@G41f1 G41f2@G41f0)))) G41e9@G41e7 G41e8@G41e6)))))) '#f))) (set! G4027@find* (lambda (G41d8@sym* G41d9@subst) (map (lambda (G41dc@x) ((lambda (G41de@t) (if G41de@t (cdr G41de@t) (G2e18@syntax-violation 'import '"cannot find identifier" G41dc@x))) (assq G41dc@x G41d9@subst))) G41d8@sym*))) (set! G4029@rem* (lambda (G41d0@sym* G41d1@subst) ((letrec ((G41d4@f (lambda (G41d6@subst) (if (null? G41d6@subst) '() (if (memq (caar G41d6@subst) G41d0@sym*) (G41d4@f (cdr G41d6@subst)) (cons (car G41d6@subst) (G41d4@f (cdr G41d6@subst)))))))) G41d4@f) G41d1@subst))) (set! G402b@remove-dups (lambda (G41ce@ls) (if (null? G41ce@ls) '() (if (memq (car G41ce@ls) (cdr G41ce@ls)) (G402b@remove-dups (cdr G41ce@ls)) (cons (car G41ce@ls) (G402b@remove-dups (cdr G41ce@ls))))))) (set! G402d@parse-library-name (lambda (G40e8@spec) ((lambda (G40eb@subversion? G40ed@subversion-pred G40ef@version-pred) (begin (set! G40eb@subversion? (lambda (G41ca@x) ((lambda (G41cc@x) (and (integer? G41cc@x) (exact? G41cc@x) (>= G41cc@x '0))) (G2e1e@syntax->datum G41ca@x)))) (set! G40ed@subversion-pred (lambda (G416a@x*) ((lambda (G416c@t) ((lambda (G416e@ls/false) (if (and G416e@ls/false (apply (lambda (G4170@n) (G40eb@subversion? G4170@n)) G416e@ls/false)) (apply (lambda (G4172@n) (lambda (G4174@x) (= G4174@x (G2e1e@syntax->datum G4172@n)))) G416e@ls/false) ((lambda (G4176@t) ((lambda (G4178@ls/false) (if (and G4178@ls/false (apply (lambda (G417a@p? G417b@sub*) (eq? (G2e1e@syntax->datum G417a@p?) 'and)) G4178@ls/false)) (apply (lambda (G417e@p? G417f@sub*) ((lambda (G4182@p*) (lambda (G4184@x) (for-all (lambda (G4186@p) (G4186@p G4184@x)) G4182@p*))) (map G40ed@subversion-pred G417f@sub*))) G4178@ls/false) ((lambda (G4188@t) ((lambda (G418a@ls/false) (if (and G418a@ls/false (apply (lambda (G418c@p? G418d@sub*) (eq? (G2e1e@syntax->datum G418c@p?) 'or)) G418a@ls/false)) (apply (lambda (G4190@p? G4191@sub*) ((lambda (G4194@p*) (lambda (G4196@x) (exists (lambda (G4198@p) (G4198@p G4196@x)) G4194@p*))) (map G40ed@subversion-pred G4191@sub*))) G418a@ls/false) ((lambda (G419a@t) ((lambda (G419c@ls/false) (if (and G419c@ls/false (apply (lambda (G419e@p? G419f@sub) (eq? (G2e1e@syntax->datum G419e@p?) 'not)) G419c@ls/false)) (apply (lambda (G41a2@p? G41a3@sub) ((lambda (G41a6@p) (lambda (G41a8@x) (not (G41a6@p G41a8@x)))) (G40ed@subversion-pred G41a3@sub))) G419c@ls/false) ((lambda (G41aa@t) ((lambda (G41ac@ls/false) (if (and G41ac@ls/false (apply (lambda (G41ae@p? G41af@n) (and (eq? (G2e1e@syntax->datum G41ae@p?) '<=) (G40eb@subversion? G41af@n))) G41ac@ls/false)) (apply (lambda (G41b2@p? G41b3@n) (lambda (G41b6@x) (<= G41b6@x (G2e1e@syntax->datum G41b3@n)))) G41ac@ls/false) ((lambda (G41b8@t) ((lambda (G41ba@ls/false) (if (and G41ba@ls/false (apply (lambda (G41bc@p? G41bd@n) (and (eq? (G2e1e@syntax->datum G41bc@p?) '>=) (G40eb@subversion? G41bd@n))) G41ba@ls/false)) (apply (lambda (G41c0@p? G41c1@n) (lambda (G41c4@x) (>= G41c4@x (G2e1e@syntax->datum G41c1@n)))) G41ba@ls/false) ((lambda (G41c6@t) ((lambda (G41c8@ls/false) (if G41c8@ls/false (apply (lambda () (G2e18@syntax-violation 'import '"invalid sub-version spec" G40e8@spec G416a@x*)) G41c8@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G41c6@t))) (G2d2d@syntax-dispatch G41c6@t '_))) G41b8@t))) (G2d2d@syntax-dispatch G41b8@t '(any any)))) G41aa@t))) (G2d2d@syntax-dispatch G41aa@t '(any any)))) G419a@t))) (G2d2d@syntax-dispatch G419a@t '(any any)))) G4188@t))) (G2d2d@syntax-dispatch G4188@t '(any . each-any)))) G4176@t))) (G2d2d@syntax-dispatch G4176@t '(any . each-any)))) G416c@t))) (G2d2d@syntax-dispatch G416c@t 'any))) G416a@x*))) (set! G40ef@version-pred (lambda (G411a@x*) ((lambda (G411c@t) ((lambda (G411e@ls/false) (if G411e@ls/false (apply (lambda () (lambda (G4120@x) '#t)) G411e@ls/false) ((lambda (G4122@t) ((lambda (G4124@ls/false) (if (and G4124@ls/false (apply (lambda (G4126@c G4127@ver*) (eq? (G2e1e@syntax->datum G4126@c) 'and)) G4124@ls/false)) (apply (lambda (G412a@c G412b@ver*) ((lambda (G412e@p*) (lambda (G4130@x) (for-all (lambda (G4132@p) (G4132@p G4130@x)) G412e@p*))) (map G40ef@version-pred G412b@ver*))) G4124@ls/false) ((lambda (G4134@t) ((lambda (G4136@ls/false) (if (and G4136@ls/false (apply (lambda (G4138@c G4139@ver*) (eq? (G2e1e@syntax->datum G4138@c) 'or)) G4136@ls/false)) (apply (lambda (G413c@c G413d@ver*) ((lambda (G4140@p*) (lambda (G4142@x) (exists (lambda (G4144@p) (G4144@p G4142@x)) G4140@p*))) (map G40ef@version-pred G413d@ver*))) G4136@ls/false) ((lambda (G4146@t) ((lambda (G4148@ls/false) (if (and G4148@ls/false (apply (lambda (G414a@c G414b@ver) (eq? (G2e1e@syntax->datum G414a@c) 'not)) G4148@ls/false)) (apply (lambda (G414e@c G414f@ver) ((lambda (G4152@p) (lambda (G4154@x) (not (G4152@p G4154@x)))) (G40ef@version-pred G414f@ver))) G4148@ls/false) ((lambda (G4156@t) ((lambda (G4158@ls/false) (if G4158@ls/false (apply (lambda (G415a@sub*) ((lambda (G415c@p*) (lambda (G415e@x) ((letrec ((G4160@f (lambda (G4162@p* G4163@x) (if (null? G4162@p*) '#t (if (null? G4163@x) '#f (and ((car G4162@p*) (car G4163@x)) (G4160@f (cdr G4162@p*) (cdr G4163@x)))))))) G4160@f) G415c@p* G415e@x))) (map G40ed@subversion-pred G415a@sub*))) G4158@ls/false) ((lambda (G4166@t) ((lambda (G4168@ls/false) (if G4168@ls/false (apply (lambda () (G2e18@syntax-violation 'import '"invalid version spec" G40e8@spec G411a@x*)) G4168@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G4166@t))) (G2d2d@syntax-dispatch G4166@t '_))) G4156@t))) (G2d2d@syntax-dispatch G4156@t 'each-any))) G4146@t))) (G2d2d@syntax-dispatch G4146@t '(any any)))) G4134@t))) (G2d2d@syntax-dispatch G4134@t '(any . each-any)))) G4122@t))) (G2d2d@syntax-dispatch G4122@t '(any . each-any)))) G411c@t))) (G2d2d@syntax-dispatch G411c@t '()))) G411a@x*))) ((letrec ((G40f0@f (lambda (G40f2@x) ((lambda (G40f4@t) ((lambda (G40f6@ls/false) (if G40f6@ls/false (apply (lambda (G40f8@version-spec*) (values '() (G40ef@version-pred G40f8@version-spec*))) G40f6@ls/false) ((lambda (G40fa@t) ((lambda (G40fc@ls/false) (if (and G40fc@ls/false (apply (lambda (G40fe@x G40ff@x*) (G401f@idsyn? G40fe@x)) G40fc@ls/false)) (apply (lambda (G4102@x G4103@x*) (call-with-values (lambda () (G40f0@f G4103@x*)) (lambda (G4108@G4106 G4109@G4107) ((lambda (G410c@pred G410d@name) (values (cons (G2e1e@syntax->datum G4102@x) G410d@name) G410c@pred)) G4109@G4107 G4108@G4106)))) G40fc@ls/false) ((lambda (G4110@t) ((lambda (G4112@ls/false) (if G4112@ls/false (apply (lambda () (values '() (lambda (G4114@x) '#t))) G4112@ls/false) ((lambda (G4116@t) ((lambda (G4118@ls/false) (if G4118@ls/false (apply (lambda () (G2e18@syntax-violation '#f '"invalid import spec" G40e8@spec)) G4118@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G4116@t))) (G2d2d@syntax-dispatch G4116@t '_))) G4110@t))) (G2d2d@syntax-dispatch G4110@t '()))) G40fa@t))) (G2d2d@syntax-dispatch G40fa@t '(any . any)))) G40f4@t))) (G2d2d@syntax-dispatch G40f4@t '(each-any)))) G40f2@x)))) G40f0@f) G40e8@spec))) '#f '#f '#f))) (set! G402f@import-library (lambda (G40da@spec*) (call-with-values (lambda () (G402d@parse-library-name G40da@spec*)) (lambda (G40de@G40dc G40df@G40dd) ((lambda (G40e2@pred G40e3@name) (begin (if (null? G40e3@name) (G2e18@syntax-violation 'import '"empty library name" G40da@spec*) (void)) ((lambda (G40e6@lib) (begin (if (not G40e6@lib) (G2e18@syntax-violation 'import '"cannot find library with required name" G40e3@name) (void)) (if (not (G40e2@pred (G2935@G27ad@library-version G40e6@lib))) (G2e18@syntax-violation 'import '"library does not satisfy version specification" G40da@spec* G40e6@lib) (void)) ((G2d9e@imp-collector) G40e6@lib) (G2939@G27b5@library-subst G40e6@lib))) (G295d@G27fd@find-library-by-name G40e3@name)))) G40df@G40dd G40de@G40dc))))) (set! G4031@get-import (lambda (G404c@spec) ((lambda (G404e@t) ((lambda (G4050@ls/false) (if (and G4050@ls/false (apply (lambda (G4052@x G4053@x*) (not (memq (G2e1e@syntax->datum G4052@x) '(for rename except only prefix library)))) G4050@ls/false)) (apply (lambda (G4056@x G4057@x*) (G402f@import-library (cons G4056@x G4057@x*))) G4050@ls/false) ((lambda (G405a@t) ((lambda (G405c@ls/false) (if (and G405c@ls/false (apply (lambda (G405e@rename G405f@isp G4060@old* G4061@new*) (and (eq? (G2e1e@syntax->datum G405e@rename) 'rename) (for-all G401f@idsyn? G4060@old*) (for-all G401f@idsyn? G4061@new*))) G405c@ls/false)) (apply (lambda (G4066@rename G4067@isp G4068@old* G4069@new*) ((lambda (G406e@subst G406f@old* G4070@new*) ((lambda (G4074@old-label*) ((lambda (G4076@subst) (G4023@merge-substs (map cons G4070@new* G4074@old-label*) G4076@subst)) (G4029@rem* G406f@old* G406e@subst))) (G4027@find* G406f@old* G406e@subst))) (G4031@get-import G4067@isp) (map G2e1e@syntax->datum G4068@old*) (map G2e1e@syntax->datum G4069@new*))) G405c@ls/false) ((lambda (G4078@t) ((lambda (G407a@ls/false) (if (and G407a@ls/false (apply (lambda (G407c@except G407d@isp G407e@sym*) (and (eq? (G2e1e@syntax->datum G407c@except) 'except) (for-all G401f@idsyn? G407e@sym*))) G407a@ls/false)) (apply (lambda (G4082@except G4083@isp G4084@sym*) ((lambda (G4088@subst) (G4029@rem* (map G2e1e@syntax->datum G4084@sym*) G4088@subst)) (G4031@get-import G4083@isp))) G407a@ls/false) ((lambda (G408a@t) ((lambda (G408c@ls/false) (if (and G408c@ls/false (apply (lambda (G408e@only G408f@isp G4090@sym*) (and (eq? (G2e1e@syntax->datum G408e@only) 'only) (for-all G401f@idsyn? G4090@sym*))) G408c@ls/false)) (apply (lambda (G4094@only G4095@isp G4096@sym*) ((lambda (G409a@subst G409b@sym*) ((lambda (G409e@sym*) ((lambda (G40a0@lab*) (map cons G409e@sym* G40a0@lab*)) (G4027@find* G409e@sym* G409a@subst))) (G402b@remove-dups G409b@sym*))) (G4031@get-import G4095@isp) (map G2e1e@syntax->datum G4096@sym*))) G408c@ls/false) ((lambda (G40a2@t) ((lambda (G40a4@ls/false) (if (and G40a4@ls/false (apply (lambda (G40a6@prefix G40a7@isp G40a8@p) (and (eq? (G2e1e@syntax->datum G40a6@prefix) 'prefix) (G401f@idsyn? G40a8@p))) G40a4@ls/false)) (apply (lambda (G40ac@prefix G40ad@isp G40ae@p) ((lambda (G40b2@subst G40b3@prefix) (map (lambda (G40b6@x) (cons (string->symbol (string-append G40b3@prefix (symbol->string (car G40b6@x)))) (cdr G40b6@x))) G40b2@subst)) (G4031@get-import G40ad@isp) (symbol->string (G2e1e@syntax->datum G40ae@p)))) G40a4@ls/false) ((lambda (G40b8@t) ((lambda (G40ba@ls/false) (if (and G40ba@ls/false (apply (lambda (G40bc@library G40bd@spec*) (eq? (G2e1e@syntax->datum G40bc@library) 'library)) G40ba@ls/false)) (apply (lambda (G40c0@library G40c1@spec*) (G402f@import-library G40c1@spec*)) G40ba@ls/false) ((lambda (G40c4@t) ((lambda (G40c6@ls/false) (if (and G40c6@ls/false (apply (lambda (G40c8@for G40c9@isp G40ca@rest) (eq? (G2e1e@syntax->datum G40c8@for) 'for)) G40c6@ls/false)) (apply (lambda (G40ce@for G40cf@isp G40d0@rest) (G4031@get-import G40cf@isp)) G40c6@ls/false) ((lambda (G40d4@t) ((lambda (G40d6@ls/false) (if G40d6@ls/false (apply (lambda (G40d8@spec) (G2e18@syntax-violation 'import '"invalid import spec" G40d8@spec)) G40d6@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G40d4@t))) (G2d2d@syntax-dispatch G40d4@t 'any))) G40c4@t))) (G2d2d@syntax-dispatch G40c4@t '(any any . any)))) G40b8@t))) (G2d2d@syntax-dispatch G40b8@t '(any each-any)))) G40a2@t))) (G2d2d@syntax-dispatch G40a2@t '(any any any)))) G408a@t))) (G2d2d@syntax-dispatch G408a@t '(any any . each-any)))) G4078@t))) (G2d2d@syntax-dispatch G4078@t '(any any . each-any)))) G405a@t))) (G2d2d@syntax-dispatch G405a@t '(any any . #(each (any any)))))) G404e@t))) (G2d2d@syntax-dispatch G404e@t '(any . each-any)))) G404c@spec))) (set! G4033@add-imports! (lambda (G403c@imp G403d@h) ((lambda (G4040@subst) (for-each (lambda (G4042@x) ((lambda (G4044@name G4045@label) ((lambda (G4048@t) (if G4048@t ((lambda (G404a@l) (if (not (eq? G404a@l G4045@label)) (G4021@dup-error G4044@name) (void))) G4048@t) (hashtable-set! G403d@h G4044@name G4045@label))) (hashtable-ref G403d@h G4044@name '#f))) (car G4042@x) (cdr G4042@x))) G4040@subst)) (G4031@get-import G403c@imp)))) (lambda (G4034@imp*) ((letrec ((G4036@f (lambda (G4038@imp* G4039@h) (if (null? G4038@imp*) (hashtable-entries G4039@h) (begin (G4033@add-imports! (car G4038@imp*) G4039@h) (G4036@f (cdr G4038@imp*) G4039@h)))))) G4036@f) G4034@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2d96@make-top-rib (lambda (G4220@names G4221@labels) ((lambda (G4224@rib) (begin (vector-for-each (lambda (G4226@name G4227@label) (begin (if (not (symbol? G4226@name)) (error 'make-top-rib '"BUG: not a symbol" G4226@name) (void)) (G2aef@extend-rib/nc! G4224@rib (G2b06@make-stx G4226@name G2ab8@top-mark* '() '()) G4227@label))) G4220@names G4221@labels) G4224@rib)) (G2aeb@make-empty-rib)))) (set! G2d98@make-collector (lambda () ((lambda (G422a@ls) (lambda G422e ((lambda (G422f) (if (= G422f '0) (apply (lambda () G422a@ls) G422e) (if (= G422f '1) (apply (lambda (G422c@x) (set! G422a@ls (G2ab1@set-cons G422c@x G422a@ls))) G422e) (error 'apply '"invalid arg count")))) (length G422e)))) '()))) (set! G2d9a@inv-collector (G26f0@G261e@make-parameter (lambda G4230@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4232@x) (begin (if (not (procedure? G4232@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4232@x) (void)) G4232@x)))) (set! G2d9c@vis-collector (G26f0@G261e@make-parameter (lambda G4234@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4236@x) (begin (if (not (procedure? G4236@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4236@x) (void)) G4236@x)))) (set! G2d9e@imp-collector (G26f0@G261e@make-parameter (lambda G4238@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G423a@x) (begin (if (not (procedure? G423a@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G423a@x) (void)) G423a@x)))) (set! G2da0@chi-library-internal (lambda (G423c@e* G423d@rib G423e@top?) (call-with-values (lambda () (G2d8a@chi-body* G423c@e* '() '() '() '() '() '() '() G423d@rib G423e@top?)) (lambda (G424a@G4242 G424b@G4243 G424c@G4244 G424d@G4245 G424e@G4246 G424f@G4247 G4250@G4248 G4251@G4249) ((lambda (G425a@exp* G425b@_kwd* G425c@mod** G425d@rhs* G425e@lex* G425f@mr G4260@r G4261@e*) (values (append (apply append (reverse G425c@mod**)) G4261@e*) G4260@r G425f@mr (reverse G425e@lex*) (reverse G425d@rhs*) G425a@exp*)) G4251@G4249 G4250@G4248 G424f@G4247 G424e@G4246 G424d@G4245 G424c@G4244 G424b@G4243 G424a@G4242))))) (set! G2da2@chi-interaction-expr (lambda (G426a@e G426b@rib G426c@r) (call-with-values (lambda () (G2d8a@chi-body* (list G426a@e) G426c@r G426c@r '() '() '() '() '() G426b@rib '#t)) (lambda (G4278@G4270 G4279@G4271 G427a@G4272 G427b@G4273 G427c@G4274 G427d@G4275 G427e@G4276 G427f@G4277) ((lambda (G4288@_exp* G4289@_kwd* G428a@mod** G428b@rhs* G428c@lex* G428d@mr G428e@r G428f@e*) ((lambda (G4298@e*) ((lambda (G429a@e) (values G429a@e G428e@r)) (if (null? G4298@e*) (G2a9e@G2a10@build-void) (if (null? (cdr G4298@e*)) (car G4298@e*) (G2a9d@G2a0e@build-sequence '#f G4298@e*))))) (G2d5f@expand-interaction-rhs*/init* (reverse G428c@lex*) (reverse G428b@rhs*) (append (apply append (reverse G428a@mod**)) G428f@e*) G428e@r G428d@mr))) G427f@G4277 G427e@G4276 G427d@G4275 G427c@G4274 G427b@G4273 G427a@G4272 G4279@G4271 G4278@G4270))))) (set! G2da4@library-body-expander (lambda (G429c@name G429d@main-exp* G429e@imp* G429f@b* G42a0@top?) ((lambda (G42a7@itc) (begin (set! G42a7@itc (G2d98@make-collector)) ((lambda (G42ac@G42a8 G42ad@G42a9 G42ae@G42aa G42af@G42ab) ((lambda (G42b4@swap) (dynamic-wind G42b4@swap (lambda () (call-with-values (lambda () (G2d94@parse-import-spec* G429e@imp*)) (lambda (G42b8@G42b6 G42b9@G42b7) ((lambda (G42bc@subst-labels G42bd@subst-names) ((lambda (G42c0@rib) ((lambda (G42c3@wrap) (begin (set! G42c3@wrap (lambda (G432f@x) (G2b06@make-stx G432f@x G2ab8@top-mark* (list G42c0@rib) '()))) ((lambda (G42c4@b* G42c5@main-exp* G42c6@rtc G42c7@vtc) ((lambda (G42d0@G42cc G42d1@G42cd G42d2@G42ce G42d3@G42cf) ((lambda (G42d8@swap) (dynamic-wind G42d8@swap (lambda () (call-with-values (lambda () (G2da0@chi-library-internal G42c4@b* G42c0@rib G42a0@top?)) (lambda (G42e0@G42da G42e1@G42db G42e2@G42dc G42e3@G42dd G42e4@G42de G42e5@G42df) ((lambda (G42ec@internal-exp* G42ed@rhs* G42ee@lex* G42ef@mr G42f0@r G42f1@init*) (call-with-values (lambda () (G2d8e@parse-exports (append G42c5@main-exp* G42ec@internal-exp*))) (lambda (G42fa@G42f8 G42fb@G42f9) ((lambda (G42fe@exp-id* G42ff@exp-name*) (begin (G2af3@seal-rib! G42c0@rib) ((lambda (G4302@init*) ((lambda (G4304@rhs*) ((lambda () (begin (G2af5@unseal-rib! G42c0@rib) ((lambda (G4306@loc* G4307@export-subst) ((lambda (G430b@errstr) (begin (set! G430b@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G2e04@make-export-env/macros G42ee@lex* G4306@loc* G42f0@r)) (lambda (G430f@G430c G4310@G430d G4311@G430e) ((lambda (G4315@macro* G4316@global* G4317@export-env) (begin (for-each (lambda (G431b@s) ((lambda (G431d@name G431e@label) ((lambda (G4321@p) (if G4321@p ((lambda (G4323@b) ((lambda (G4325@type) (if (eq? G4325@type 'mutable) (G2e18@syntax-violation 'export G430b@errstr G431d@name) (void))) (car G4323@b))) (cdr G4321@p)) (void))) (assq G431e@label G4317@export-env))) (car G431b@s) (cdr G431b@s))) G4307@export-subst) ((lambda (G4327@invoke-body G4328@invoke-definitions) (values (G42a7@itc) (G42c6@rtc) (G42c7@vtc) (G2a9d@G2a0e@build-sequence '#f (append G4328@invoke-definitions (list G4327@invoke-body))) G4315@macro* G4307@export-subst G4317@export-env)) (G2aa0@G2a14@build-letrec* '#f G42ee@lex* G4304@rhs* (G2e00@build-exports G4316@global* G4302@init*)) (map G2a99@G296b@build-global-define (map cdr G4316@global*))))) G4311@G430e G4310@G430d G430f@G430c))))) '#f)) (map G2abe@gen-global G42ee@lex*) (G2e02@make-export-subst G42ff@exp-name* G42fe@exp-id*)))))) (G2d61@chi-rhs* G42ed@rhs* G42f0@r G42ef@mr))) (G2d4d@chi-expr* G42f1@init* G42f0@r G42ef@mr)))) G42fb@G42f9 G42fa@G42f8)))) G42e5@G42df G42e4@G42de G42e3@G42dd G42e2@G42dc G42e1@G42db G42e0@G42da)))) G42d8@swap)) (lambda () (begin ((lambda (G432b@t) (begin (G42d0@G42cc G42d2@G42ce) (set! G42d2@G42ce G432b@t))) (G42d0@G42cc)) ((lambda (G432d@t) (begin (G42d1@G42cd G42d3@G42cf) (set! G42d3@G42cf G432d@t))) (G42d1@G42cd)))))) G2d9a@inv-collector G2d9c@vis-collector G42c6@rtc G42c7@vtc)) (map G42c3@wrap G429f@b*) (map G42c3@wrap G429d@main-exp*) (G2d98@make-collector) (G2d98@make-collector)))) '#f)) (G2d96@make-top-rib G42bd@subst-names G42bc@subst-labels))) G42b9@G42b7 G42b8@G42b6)))) G42b4@swap)) (lambda () (begin ((lambda (G4331@t) (begin (G42ac@G42a8 G42ae@G42aa) (set! G42ae@G42aa G4331@t))) (G42ac@G42a8)) ((lambda (G4333@t) (begin (G42ad@G42a9 G42af@G42ab) (set! G42af@G42ab G4333@t))) (G42ad@G42a9)))))) G2d9e@imp-collector G2e26@top-level-context G42a7@itc '#f))) '#f))) (set! G2da6@core-library-expander (lambda (G4335@e G4336@verify-name) (call-with-values (lambda () (G2d92@parse-library G4335@e)) (lambda (G433d@G4339 G433e@G433a G433f@G433b G4340@G433c) ((lambda (G4345@b* G4346@imp* G4347@exp* G4348@name*) (call-with-values (lambda () (G2d90@parse-library-name G4348@name*)) (lambda (G434f@G434d G4350@G434e) ((lambda (G4353@ver G4354@name) (begin (G4336@verify-name G4354@name) (call-with-values (lambda () (G2da4@library-body-expander G4354@name G4347@exp* G4346@imp* G4345@b* '#f)) (lambda (G435e@G4357 G435f@G4358 G4360@G4359 G4361@G435a G4362@G435b G4363@G435c G4364@G435d) ((lambda (G436c@export-env G436d@export-subst G436e@visit-code G436f@invoke-code G4370@visit-req* G4371@invoke-req* G4372@imp*) (values G4354@name G4353@ver G4372@imp* G4371@invoke-req* G4370@visit-req* G436f@invoke-code G436e@visit-code G436d@export-subst G436c@export-env)) G4364@G435d G4363@G435c G4362@G435b G4361@G435a G4360@G4359 G435f@G4358 G435e@G4357))))) G4350@G434e G434f@G434d)))) G4340@G433c G433f@G433b G433e@G433a G433d@G4339))))) (set! G2da8@parse-top-level-program (lambda (G437a@e*) ((lambda (G437c@t) ((lambda (G437e@ls/false) (if (and G437e@ls/false (apply (lambda (G4380@import G4381@imp* G4382@b*) (eq? (G2e1e@syntax->datum G4380@import) 'import)) G437e@ls/false)) (apply (lambda (G4386@import G4387@imp* G4388@b*) (values G4387@imp* G4388@b*)) G437e@ls/false) ((lambda (G438c@t) ((lambda (G438e@ls/false) (if (and G438e@ls/false (apply (lambda (G4390@import G4391@x G4392@y) (eq? (G2e1e@syntax->datum G4390@import) 'import)) G438e@ls/false)) (apply (lambda (G4396@import G4397@x G4398@y) (G2e18@syntax-violation 'expander '"invalid syntax of top-level program" (G2b36@syntax-car G437a@e*))) G438e@ls/false) ((lambda (G439c@t) ((lambda (G439e@ls/false) (if G439e@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G439e@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G439c@t))) (G2d2d@syntax-dispatch G439c@t '_))) G438c@t))) (G2d2d@syntax-dispatch G438c@t '((any . any) . any)))) G437c@t))) (G2d2d@syntax-dispatch G437c@t '((any . each-any) . each-any)))) G437a@e*))) (set! G2daa@top-level-expander (lambda (G43a0@e*) (call-with-values (lambda () (G2da8@parse-top-level-program G43a0@e*)) (lambda (G43a4@G43a2 G43a5@G43a3) ((lambda (G43a8@b* G43a9@imp*) (call-with-values (lambda () (G2da4@library-body-expander '() '() G43a9@imp* G43a8@b* '#t)) (lambda (G43b3@G43ac G43b4@G43ad G43b5@G43ae G43b6@G43af G43b7@G43b0 G43b8@G43b1 G43b9@G43b2) ((lambda (G43c1@export-env G43c2@export-subst G43c3@visit-code G43c4@invoke-code G43c5@visit-req* G43c6@invoke-req* G43c7@imp*) (values G43c6@invoke-req* G43c4@invoke-code)) G43b9@G43b2 G43b8@G43b1 G43b7@G43b0 G43b6@G43af G43b5@G43ae G43b4@G43ad G43b3@G43ac)))) G43a5@G43a3 G43a4@G43a2))))) (set! G2db0@G2dab (make-record-type-descriptor 'env '#f 'G2dae '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2db2@G2dad '#f) (set! G2db4@G2dac (make-record-constructor-descriptor G2db0@G2dab '#f G2db2@G2dad)) (set! G2db7@env? (record-predicate G2db0@G2dab)) (set! G2db9@make-env (record-constructor G2db4@G2dac)) (set! G2dbb@env-names (record-accessor G2db0@G2dab '0)) (set! G2dbd@env-labels (record-accessor G2db0@G2dab '1)) (set! G2dbf@env-itc (record-accessor G2db0@G2dab '2)) (set! G2dc1@set-env-names! (record-mutator G2db0@G2dab '0)) (set! G2dc3@set-env-labels! (record-mutator G2db0@G2dab '1)) (set! G2dc5@set-env-itc! (record-mutator G2db0@G2dab '2)) (set! G2dc7@rp (G26ed@G2618@make-record-printer 'env (lambda (G43cf@x G43d0@p G43d1@wr) (display '"#<environment>" G43d0@p)))) (set! G2dcd@G2dc8 (make-record-type-descriptor 'interaction-env '#f 'G2dcb '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2dcf@G2dca '#f) (set! G2dd1@G2dc9 (make-record-constructor-descriptor G2dcd@G2dc8 '#f G2dcf@G2dca)) (set! G2dd4@interaction-env? (record-predicate G2dcd@G2dc8)) (set! G2dd6@make-interaction-env (record-constructor G2dd1@G2dc9)) (set! G2dd8@interaction-env-rib (record-accessor G2dcd@G2dc8 '0)) (set! G2dda@interaction-env-r (record-accessor G2dcd@G2dc8 '1)) (set! G2ddc@interaction-env-locs (record-accessor G2dcd@G2dc8 '2)) (set! G2dde@set-interaction-env-rib! (record-mutator G2dcd@G2dc8 '0)) (set! G2de0@set-interaction-env-r! (record-mutator G2dcd@G2dc8 '1)) (set! G2de2@set-interaction-env-locs! (record-mutator G2dcd@G2dc8 '2)) (set! G2de4@rp (G26ed@G2618@make-record-printer 'interaction-env (lambda (G43d5@x G43d6@p G43d7@wr) (display '"#<environment>" G43d6@p)))) (set! G2de6@interaction-environment-symbols (lambda () (G2dee@environment-symbols (G2e24@interaction-environment)))) (set! G2de8@environment-bindings (lambda (G43db@e) (vector->list (vector-map (lambda (G43dd@name G43de@label) (G2dea@parse-binding (cons G43dd@name (G2963@G2809@imported-label->binding G43de@label)))) (G2dbb@env-names G43db@e) (G2dbd@env-labels G43db@e))))) (set! G2dea@parse-binding (lambda (G43e1@b) (cons (car G43e1@b) ((lambda (G43e3@t) (if (memv G43e3@t '(core-prim global)) 'procedure (if (memv G43e3@t '(core-macro macro global-macro)) 'syntax (if (memv G43e3@t '($core-rtd)) 'record (if (eq? (car G43e1@b) (cadr G43e1@b)) 'syntax 'unknown))))) (cadr G43e1@b))))) (set! G2dec@environment? (lambda (G43e5@x) (or (G2db7@env? G43e5@x) (G2dd4@interaction-env? G43e5@x)))) (set! G2dee@environment-symbols (lambda (G43e7@x) (if (G2db7@env? G43e7@x) (vector->list (G2dbb@env-names G43e7@x)) (if (G2dd4@interaction-env? G43e7@x) (map values (G2ad7@rib-sym* (G2dd8@interaction-env-rib G43e7@x))) (assertion-violation 'environment-symbols '"not an environment" G43e7@x))))) (set! G2df0@environment (lambda G43e9@imp* ((lambda (G43eb@itc) ((lambda (G43ef@G43ed G43f0@G43ee) ((lambda (G43f3@swap) (dynamic-wind G43f3@swap (lambda () (call-with-values (lambda () (G2d94@parse-import-spec* G43e9@imp*)) (lambda (G43f7@G43f5 G43f8@G43f6) ((lambda (G43fb@subst-labels G43fc@subst-names) (G2db9@make-env G43fc@subst-names G43fb@subst-labels G43eb@itc)) G43f8@G43f6 G43f7@G43f5)))) G43f3@swap)) (lambda () ((lambda (G43ff@t) (begin (G43ef@G43ed G43f0@G43ee) (set! G43f0@G43ee G43ff@t))) (G43ef@G43ed))))) G2d9e@imp-collector G43eb@itc)) (G2d98@make-collector)))) (set! G2df2@null-environment (lambda (G4401@n) (begin (if (not (eqv? G4401@n '5)) (assertion-violation 'null-environment '"not 5" G4401@n) (void)) (G2df0@environment '(psyntax null-environment-5))))) (set! G2df4@scheme-report-environment (lambda (G4403@n) (begin (if (not (eqv? G4403@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4403@n) (void)) (G2df0@environment '(psyntax scheme-report-environment-5))))) (set! G2df6@expand (lambda (G4405@x G4406@env) (if (G2db7@env? G4406@env) ((lambda (G4409@rib) ((lambda (G440b@x G440c@itc G440d@rtc G440e@vtc) ((lambda (G4413@x) (begin (G2af3@seal-rib! G4409@rib) (values G4413@x (G440d@rtc)))) ((lambda (G441d@G4415 G441e@G4416 G441f@G4417 G4420@G4418 G4421@G4419 G4422@G441a G4423@G441b G4424@G441c) ((lambda (G442d@swap) (dynamic-wind G442d@swap (lambda () (G2d51@chi-expr G440b@x '() '())) G442d@swap)) (lambda () (begin ((lambda (G442f@t) (begin (G441d@G4415 G4421@G4419) (set! G4421@G4419 G442f@t))) (G441d@G4415)) ((lambda (G4431@t) (begin (G441e@G4416 G4422@G441a) (set! G4422@G441a G4431@t))) (G441e@G4416)) ((lambda (G4433@t) (begin (G441f@G4417 G4423@G441b) (set! G4423@G441b G4433@t))) (G441f@G4417)) ((lambda (G4435@t) (begin (G4420@G4418 G4424@G441c) (set! G4424@G441c G4435@t))) (G4420@G4418)))))) G2e26@top-level-context G2d9a@inv-collector G2d9c@vis-collector G2d9e@imp-collector '#f G440d@rtc G440e@vtc G440c@itc))) (G2b06@make-stx G4405@x G2ab8@top-mark* (list G4409@rib) '()) (G2dbf@env-itc G4406@env) (G2d98@make-collector) (G2d98@make-collector))) (G2d96@make-top-rib (G2dbb@env-names G4406@env) (G2dbd@env-labels G4406@env))) (if (G2dd4@interaction-env? G4406@env) ((lambda (G4437@rib G4438@r G4439@rtc) ((lambda (G443d@x) (call-with-values (lambda () ((lambda (G4449@G4441 G444a@G4442 G444b@G4443 G444c@G4444 G444d@G4445 G444e@G4446 G444f@G4447 G4450@G4448) ((lambda (G4459@swap) (dynamic-wind G4459@swap (lambda () (G2da2@chi-interaction-expr G443d@x G4437@rib G4438@r)) G4459@swap)) (lambda () (begin ((lambda (G445b@t) (begin (G4449@G4441 G444d@G4445) (set! G444d@G4445 G445b@t))) (G4449@G4441)) ((lambda (G445d@t) (begin (G444a@G4442 G444e@G4446) (set! G444e@G4446 G445d@t))) (G444a@G4442)) ((lambda (G445f@t) (begin (G444b@G4443 G444f@G4447) (set! G444f@G4447 G445f@t))) (G444b@G4443)) ((lambda (G4461@t) (begin (G444c@G4444 G4450@G4448) (set! G4450@G4448 G4461@t))) (G444c@G4444)))))) G2e26@top-level-context G2d9a@inv-collector G2d9c@vis-collector G2d9e@imp-collector G4406@env G4439@rtc (G2d98@make-collector) (G2d98@make-collector))) (lambda (G4463@G443f G4464@G4440) ((lambda (G4467@r^ G4468@e) (begin (G2de0@set-interaction-env-r! G4406@env G4467@r^) (values G4468@e (G4439@rtc)))) G4464@G4440 G4463@G443f)))) (G2b06@make-stx G4405@x G2ab8@top-mark* (list G4437@rib) '()))) (G2dd8@interaction-env-rib G4406@env) (G2dda@interaction-env-r G4406@env) (G2d98@make-collector)) (assertion-violation 'expand '"not an environment" G4406@env))))) (set! G2df8@eval (lambda (G446b@x G446c@env) (begin (if (not (G2dec@environment? G446c@env)) (error 'eval '"not an environment" G446c@env) (void)) (call-with-values (lambda () (G2df6@expand G446b@x G446c@env)) (lambda (G4471@G446f G4472@G4470) ((lambda (G4475@invoke-req* G4476@x) (begin (for-each G2964@G280b@invoke-library G4475@invoke-req*) (eval-core (G2744@G26fc@expanded->core G4476@x)))) G4472@G4470 G4471@G446f)))))) (set! G2dfa@library-expander (lambda G44de ((lambda (G44df) (if (= G44df '3) (apply (lambda (G4479@x G447a@filename G447b@verify-name) ((lambda (G4480@build-visit-code G4482@visit!) (begin (set! G4480@build-visit-code (lambda (G44cc@macro*) (if (null? G44cc@macro*) (G2a9e@G2a10@build-void) (G2a9d@G2a0e@build-sequence '#f (map (lambda (G44ce@x) ((lambda (G44d0@loc G44d1@src) (list 'set! G44d0@loc G44d1@src)) (car G44ce@x) (cddr G44ce@x))) G44cc@macro*))))) (set! G4482@visit! (lambda (G44c4@macro*) (for-each (lambda (G44c6@x) ((lambda (G44c8@loc G44c9@proc) (set-symbol-value! G44c8@loc G44c9@proc)) (car G44c6@x) (cadr G44c6@x))) G44c4@macro*))) (call-with-values (lambda () (G2da6@core-library-expander G4479@x G447b@verify-name)) (lambda (G448c@G4483 G448d@G4484 G448e@G4485 G448f@G4486 G4490@G4487 G4491@G4488 G4492@G4489 G4493@G448a G4494@G448b) ((lambda (G449e@export-env G449f@export-subst G44a0@macro* G44a1@invoke-code G44a2@vis* G44a3@inv* G44a4@imp* G44a5@ver G44a6@name) ((lambda (G44b0@id G44b1@name G44b2@ver G44b3@imp* G44b4@vis* G44b5@inv* G44b6@visit-proc G44b7@invoke-proc G44b8@visit-code G44b9@invoke-code) (begin (G2962@G2807@install-library G44b0@id G44b1@name G44b2@ver G44b3@imp* G44b4@vis* G44b5@inv* G449f@export-subst G449e@export-env G44b6@visit-proc G44b7@invoke-proc G44b8@visit-code G44b9@invoke-code '#t G447a@filename) (values G44b0@id G44b1@name G44b2@ver G44b3@imp* G44b4@vis* G44b5@inv* G44b9@invoke-code G44b8@visit-code G449f@export-subst G449e@export-env))) (gensym) G44a6@name G44a5@ver (map G2968@G2813@library-spec G44a4@imp*) (map G2968@G2813@library-spec G44a2@vis*) (map G2968@G2813@library-spec G44a3@inv*) (lambda () (G4482@visit! G44a0@macro*)) (lambda () (eval-core (G2744@G26fc@expanded->core G44a1@invoke-code))) (G4480@build-visit-code G44a0@macro*) G44a1@invoke-code)) G4494@G448b G4493@G448a G4492@G4489 G4491@G4488 G4490@G4487 G448f@G4486 G448e@G4485 G448d@G4484 G448c@G4483))))) '#f '#f)) G44de) (if (= G44df '2) (apply (lambda (G44d4@x G44d5@filename) (G2dfa@library-expander G44d4@x G44d5@filename (lambda (G44d8@x) (values)))) G44de) (if (= G44df '1) (apply (lambda (G44da@x) (G2dfa@library-expander G44da@x '#f (lambda (G44dc@x) (values)))) G44de) (error 'apply '"invalid arg count"))))) (length G44de)))) (set! G2dfc@boot-library-expand (lambda (G44e0@x) (call-with-values (lambda () (G2dfa@library-expander G44e0@x)) (lambda (G44ec@G44e2 G44ed@G44e3 G44ee@G44e4 G44ef@G44e5 G44f0@G44e6 G44f1@G44e7 G44f2@G44e8 G44f3@G44e9 G44f4@G44ea G44f5@G44eb) ((lambda (G4500@export-env G4501@export-subst G4502@visit-code G4503@invoke-code G4504@inv* G4505@vis* G4506@imp* G4507@ver G4508@name G4509@id) (values G4508@name G4503@invoke-code G4501@export-subst G4500@export-env)) G44f5@G44eb G44f4@G44ea G44f3@G44e9 G44f2@G44e8 G44f1@G44e7 G44f0@G44e6 G44ef@G44e5 G44ee@G44e4 G44ed@G44e3 G44ec@G44e2))))) (set! G2dfe@rev-map-append (lambda (G4514@f G4515@ls G4516@ac) (if (null? G4515@ls) G4516@ac (G2dfe@rev-map-append G4514@f (cdr G4515@ls) (cons (G4514@f (car G4515@ls)) G4516@ac))))) (set! G2e00@build-exports (lambda (G451a@lex*+loc* G451b@init*) (G2a9d@G2a0e@build-sequence '#f (cons (G2a9e@G2a10@build-void) (G2dfe@rev-map-append (lambda (G451e@x) (list 'set! (cdr G451e@x) (car G451e@x))) G451a@lex*+loc* G451b@init*))))) (set! G2e02@make-export-subst (lambda (G4520@name* G4521@id*) (map (lambda (G4524@name G4525@id) ((lambda (G4528@label) (begin (if (not G4528@label) (G2e18@syntax-violation '#f '"cannot export unbound identifier" G4525@id) (void)) (cons G4524@name G4528@label))) (G2b56@id->label G4525@id))) G4520@name* G4521@id*))) (set! G2e04@make-export-env/macros (lambda (G452a@lex* G452b@loc* G452c@r) ((lambda (G4531@lookup) (begin (set! G4531@lookup (lambda (G454e@x) ((letrec ((G4550@f (lambda (G4552@x G4553@lex* G4554@loc*) (if (pair? G4553@lex*) (if (eq? G4552@x (car G4553@lex*)) (car G4554@loc*) (G4550@f G4552@x (cdr G4553@lex*) (cdr G4554@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4550@f) G454e@x G452a@lex* G452b@loc*))) ((letrec ((G4532@f (lambda (G4534@r G4535@env G4536@global* G4537@macro*) (if (null? G4534@r) (values G4535@env G4536@global* G4537@macro*) ((lambda (G453c@x) ((lambda (G453e@label G453f@b) ((lambda (G4542@t) (if (memv G4542@t '(lexical)) ((lambda (G4544@v) ((lambda (G4546@loc G4547@type) (G4532@f (cdr G4534@r) (cons (cons* G453e@label G4547@type G4546@loc) G4535@env) (cons (cons (G2cb9@lexical-var G4544@v) G4546@loc) G4536@global*) G4537@macro*)) (G4531@lookup (G2cb9@lexical-var G4544@v)) (if (G2cbb@lexical-mutable? G4544@v) 'mutable 'global))) (G2b60@binding-value G453f@b)) (if (memv G4542@t '(local-macro)) ((lambda (G454a@loc) (G4532@f (cdr G4534@r) (cons (cons* G453e@label 'global-macro G454a@loc) G4535@env) G4536@global* (cons (cons G454a@loc (G2b60@binding-value G453f@b)) G4537@macro*))) (gensym)) (if (memv G4542@t '(local-macro!)) ((lambda (G454c@loc) (G4532@f (cdr G4534@r) (cons (cons* G453e@label 'global-macro! G454c@loc) G4535@env) G4536@global* (cons (cons G454c@loc (G2b60@binding-value G453f@b)) G4537@macro*))) (gensym)) (if (memv G4542@t '($rtd $module)) (G4532@f (cdr G4534@r) (cons G453c@x G4535@env) G4536@global* G4537@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2b5e@binding-type G453f@b) (G2b60@binding-value G453f@b))))))) (G2b5e@binding-type G453f@b))) (car G453c@x) (cdr G453c@x))) (car G4534@r)))))) G4532@f) G452c@r '() '() '()))) '#f))) (set! G2e06@generate-temporaries (lambda (G4558@ls) ((lambda (G455a@t) ((lambda (G455c@ls/false) (if G455c@ls/false (apply (lambda (G455e@ls) (map (lambda (G4560@x) (G2b06@make-stx ((lambda (G4562@x) (if (or (symbol? G4562@x) (string? G4562@x)) (gensym G4562@x) (gensym 't))) (G2e1e@syntax->datum G4560@x)) G2ab8@top-mark* '() '())) G455e@ls)) G455c@ls/false) ((lambda (G4564@t) ((lambda (G4566@ls/false) (if G4566@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4566@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G4564@t))) (G2d2d@syntax-dispatch G4564@t '_))) G455a@t))) (G2d2d@syntax-dispatch G455a@t 'each-any))) G4558@ls))) (set! G2e08@free-identifier=? (lambda (G4568@x G4569@y) (if (G2b3c@id? G4568@x) (if (G2b3c@id? G4569@y) (G2b44@free-id=? G4568@x G4569@y) (assertion-violation 'free-identifier=? '"not an identifier" G4569@y)) (assertion-violation 'free-identifier=? '"not an identifier" G4568@x)))) (set! G2e0a@bound-identifier=? (lambda (G456c@x G456d@y) (if (G2b3c@id? G456c@x) (if (G2b3c@id? G456d@y) (G2b42@bound-id=? G456c@x G456d@y) (assertion-violation 'bound-identifier=? '"not an identifier" G456d@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G456c@x)))) (set! G2e0c@make-source-condition (lambda (G4570@x) ((lambda (G457a@G4575 G457c@G4577 G457e@G4576 G4581@G4574 G4583@make-source-condition G4585@G4572 G4587@G4573 G4589@source-condition? G458b@source-filename G458d@source-character) (begin (set! G457a@G4575 (make-record-type-descriptor '&source-information G49c8@G471b@&condition-rtd 'G4578 '#f '#f '#((immutable file-name) (immutable character)))) (set! G457c@G4577 '#f) (set! G457e@G4576 (make-record-constructor-descriptor G457a@G4575 G49c9@G471d@&condition-rcd G457c@G4577)) (set! G4581@G4574 (record-predicate G457a@G4575)) (set! G4583@make-source-condition (record-constructor G457e@G4576)) (set! G4585@G4572 (record-accessor G457a@G4575 '0)) (set! G4587@G4573 (record-accessor G457a@G4575 '1)) (set! G4589@source-condition? (condition-predicate G457a@G4575)) (set! G458b@source-filename (condition-accessor G457a@G4575 G4585@G4572)) (set! G458d@source-character (condition-accessor G457a@G4575 G4587@G4573)) (if (pair? G4570@x) (G4583@make-source-condition (car G4570@x) (cdr G4570@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2e0e@extract-position-condition (lambda (G458e@x) (G2e0c@make-source-condition (G2e10@expression-position G458e@x)))) (set! G2e10@expression-position (lambda (G4590@x) (and (G2b04@stx? G4590@x) ((lambda (G4592@x) (and (G26e5@G2608@annotation? G4592@x) (G26e6@G260a@annotation-source G4592@x))) (G2b08@stx-expr G4590@x))))) (set! G2e12@assertion-error (lambda (G4594@expr G4595@pos) (raise (condition (G49f8@G47db@make-assertion-violation) (G4a0a@G480b@make-who-condition 'assert) (G49ce@G476e@make-message-condition '"assertion failed") (G4a00@G47f1@make-irritants-condition (list G4594@expr)) (G2e0c@make-source-condition G4595@pos))))) (set! G2e14@syntax-error (lambda (G4598@x . G459a@args) (begin (if (not (for-all string? G459a@args)) (assertion-violation 'syntax-error '"invalid argument" G459a@args) (void)) (raise (condition (G49ce@G476e@make-message-condition (if (null? G459a@args) '"invalid syntax" (apply string-append G459a@args))) (G4a2c@G4865@make-syntax-violation (G2e1e@syntax->datum G4598@x) '#f) (G2e0e@extract-position-condition G4598@x)))))) (set! G2e16@syntax-violation* (lambda (G459c@who G459d@msg G459e@form G459f@condition-object) (begin (if (not (string? G459d@msg)) (assertion-violation 'syntax-violation '"message is not a string" G459d@msg) (void)) ((lambda (G45a4@who) (raise (condition (if G45a4@who (G4a0a@G480b@make-who-condition G45a4@who) (condition)) (G49ce@G476e@make-message-condition G459d@msg) G459f@condition-object (G2e0e@extract-position-condition G459e@form)))) (if (or (string? G459c@who) (symbol? G459c@who)) G459c@who (if (not G459c@who) ((lambda (G45a6@t) ((lambda (G45a8@ls/false) (if (and G45a8@ls/false (apply (lambda (G45aa@id) (G2b3c@id? G45aa@id)) G45a8@ls/false)) (apply (lambda (G45ac@id) (G2e1e@syntax->datum G45ac@id)) G45a8@ls/false) ((lambda (G45ae@t) ((lambda (G45b0@ls/false) (if (and G45b0@ls/false (apply (lambda (G45b2@id G45b3@rest) (G2b3c@id? G45b2@id)) G45b0@ls/false)) (apply (lambda (G45b6@id G45b7@rest) (G2e1e@syntax->datum G45b6@id)) G45b0@ls/false) ((lambda (G45ba@t) ((lambda (G45bc@ls/false) (if G45bc@ls/false (apply (lambda () '#f) G45bc@ls/false) (G2e18@syntax-violation '#f '"invalid syntax" G45ba@t))) (G2d2d@syntax-dispatch G45ba@t '_))) G45ae@t))) (G2d2d@syntax-dispatch G45ae@t '(any . any)))) G45a6@t))) (G2d2d@syntax-dispatch G45a6@t 'any))) G459e@form) (assertion-violation 'syntax-violation '"invalid who argument" G459c@who))))))) (set! G2e18@syntax-violation (lambda G45cc ((lambda (G45cd) (if (= G45cd '3) (apply (lambda (G45be@who G45bf@msg G45c0@form) (G2e18@syntax-violation G45be@who G45bf@msg G45c0@form '#f)) G45cc) (if (= G45cd '4) (apply (lambda (G45c4@who G45c5@msg G45c6@form G45c7@subform) (G2e16@syntax-violation* G45c4@who G45c5@msg G45c6@form (G4a2c@G4865@make-syntax-violation (G2e1e@syntax->datum G45c6@form) (G2e1e@syntax->datum G45c7@subform)))) G45cc) (error 'apply '"invalid arg count")))) (length G45cc)))) (set! G2e1a@identifier? (lambda (G45ce@x) (G2b3c@id? G45ce@x))) (set! G2e1c@datum->syntax (lambda (G45d0@id G45d1@datum) (if (G2b3c@id? G45d0@id) (G2b1a@datum->stx G45d0@id G45d1@datum) (assertion-violation 'datum->syntax '"not an identifier" G45d0@id)))) (set! G2e1e@syntax->datum (lambda (G45d4@x) (G2b52@stx->datum G45d4@x))) (set! G2e20@compile-r6rs-top-level (lambda (G45d6@x*) (call-with-values (lambda () (G2daa@top-level-expander G45d6@x*)) (lambda (G45da@G45d8 G45db@G45d9) ((lambda (G45de@invoke-code G45df@lib*) (lambda () (begin (for-each G2964@G280b@invoke-library G45df@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2744@G26fc@expanded->core G45de@invoke-code)) (void)) (eval-core (G2744@G26fc@expanded->core G45de@invoke-code))))) G45db@G45d9 G45da@G45d8))))) (set! G2e22@pre-compile-r6rs-top-level (lambda (G45e2@x*) (call-with-values (lambda () (G2daa@top-level-expander G45e2@x*)) (lambda (G45e6@G45e4 G45e7@G45e5) ((lambda (G45ea@invoke-code G45eb@lib*) (begin (for-each G2964@G280b@invoke-library G45eb@lib*) (G26ee@G261a@compile-core (G2744@G26fc@expanded->core G45ea@invoke-code)))) G45e7@G45e5 G45e6@G45e4))))) (set! G2e24@interaction-environment ((lambda (G45ee@the-env) (lambda () (or G45ee@the-env ((lambda (G45f0@lib G45f1@rib) (begin ((lambda (G45f4@subst) (begin (G2ae1@set-rib-sym*! G45f1@rib (map car G45f4@subst)) (G2ae3@set-rib-mark**! G45f1@rib (map (lambda (G45f6@x) G2ab8@top-mark*) G45f4@subst)) (G2ae5@set-rib-label*! G45f1@rib (map cdr G45f4@subst)))) (G2939@G27b5@library-subst G45f0@lib)) ((lambda (G45f8@env) (begin (set! G45ee@the-env G45f8@env) G45f8@env)) (G2dd6@make-interaction-env G45f1@rib '() '())))) (G295d@G27fd@find-library-by-name '(mosh interaction)) (G2aeb@make-empty-rib))))) '#f)) (set! G2e26@top-level-context (G26f0@G261e@make-parameter '#f)) (begin (set! G4706@G2e26@top-level-context G2e26@top-level-context) (set! G4705@G2e24@interaction-environment G2e24@interaction-environment) (set! G4704@G2e22@pre-compile-r6rs-top-level G2e22@pre-compile-r6rs-top-level) (set! G4703@G2e20@compile-r6rs-top-level G2e20@compile-r6rs-top-level) (set! G4702@G2e1e@syntax->datum G2e1e@syntax->datum) (set! G4701@G2e1c@datum->syntax G2e1c@datum->syntax) (set! G4700@G2e1a@identifier? G2e1a@identifier?) (set! G46ff@G2e18@syntax-violation G2e18@syntax-violation) (set! G46fe@G2e16@syntax-violation* G2e16@syntax-violation*) (set! G46fd@G2e14@syntax-error G2e14@syntax-error) (set! G46fc@G2e12@assertion-error G2e12@assertion-error) (set! G46fb@G2e10@expression-position G2e10@expression-position) (set! G46fa@G2e0e@extract-position-condition G2e0e@extract-position-condition) (set! G46f9@G2e0c@make-source-condition G2e0c@make-source-condition) (set! G46f8@G2e0a@bound-identifier=? G2e0a@bound-identifier=?) (set! G46f7@G2e08@free-identifier=? G2e08@free-identifier=?) (set! G46f6@G2e06@generate-temporaries G2e06@generate-temporaries) (set! G46f5@G2e04@make-export-env/macros G2e04@make-export-env/macros) (set! G46f4@G2e02@make-export-subst G2e02@make-export-subst) (set! G46f3@G2e00@build-exports G2e00@build-exports) (set! G46f2@G2dfe@rev-map-append G2dfe@rev-map-append) (set! G46f1@G2dfc@boot-library-expand G2dfc@boot-library-expand) (set! G46f0@G2dfa@library-expander G2dfa@library-expander) (set! G46ef@G2df8@eval G2df8@eval) (set! G46ee@G2df6@expand G2df6@expand) (set! G46ed@G2df4@scheme-report-environment G2df4@scheme-report-environment) (set! G46ec@G2df2@null-environment G2df2@null-environment) (set! G46eb@G2df0@environment G2df0@environment) (set! G46ea@G2dee@environment-symbols G2dee@environment-symbols) (set! G46e9@G2dec@environment? G2dec@environment?) (set! G46e8@G2dea@parse-binding G2dea@parse-binding) (set! G46e7@G2de8@environment-bindings G2de8@environment-bindings) (set! G46e6@G2de6@interaction-environment-symbols G2de6@interaction-environment-symbols) (set! G46e5@G2de4@rp G2de4@rp) (set! G46e4@G2de2@set-interaction-env-locs! G2de2@set-interaction-env-locs!) (set! G46e3@G2de0@set-interaction-env-r! G2de0@set-interaction-env-r!) (set! G46e2@G2dde@set-interaction-env-rib! G2dde@set-interaction-env-rib!) (set! G46e1@G2ddc@interaction-env-locs G2ddc@interaction-env-locs) (set! G46e0@G2dda@interaction-env-r G2dda@interaction-env-r) (set! G46df@G2dd8@interaction-env-rib G2dd8@interaction-env-rib) (set! G46de@G2dd6@make-interaction-env G2dd6@make-interaction-env) (set! G46dd@G2dd4@interaction-env? G2dd4@interaction-env?) (set! G46dc@G2dd1@G2dc9 G2dd1@G2dc9) (set! G46db@G2dcf@G2dca G2dcf@G2dca) (set! G46da@G2dcd@G2dc8 G2dcd@G2dc8) (set! G46d9@G2dc7@rp G2dc7@rp) (set! G46d8@G2dc5@set-env-itc! G2dc5@set-env-itc!) (set! G46d7@G2dc3@set-env-labels! G2dc3@set-env-labels!) (set! G46d6@G2dc1@set-env-names! G2dc1@set-env-names!) (set! G46d5@G2dbf@env-itc G2dbf@env-itc) (set! G46d4@G2dbd@env-labels G2dbd@env-labels) (set! G46d3@G2dbb@env-names G2dbb@env-names) (set! G46d2@G2db9@make-env G2db9@make-env) (set! G46d1@G2db7@env? G2db7@env?) (set! G46d0@G2db4@G2dac G2db4@G2dac) (set! G46cf@G2db2@G2dad G2db2@G2dad) (set! G46ce@G2db0@G2dab G2db0@G2dab) (set! G46cd@G2daa@top-level-expander G2daa@top-level-expander) (set! G46cc@G2da8@parse-top-level-program G2da8@parse-top-level-program) (set! G46cb@G2da6@core-library-expander G2da6@core-library-expander) (set! G46ca@G2da4@library-body-expander G2da4@library-body-expander) (set! G46c9@G2da2@chi-interaction-expr G2da2@chi-interaction-expr) (set! G46c8@G2da0@chi-library-internal G2da0@chi-library-internal) (set! G46c7@G2d9e@imp-collector G2d9e@imp-collector) (set! G46c6@G2d9c@vis-collector G2d9c@vis-collector) (set! G46c5@G2d9a@inv-collector G2d9a@inv-collector) (set! G46c4@G2d98@make-collector G2d98@make-collector) (set! G46c3@G2d96@make-top-rib G2d96@make-top-rib) (set! G46c2@G2d94@parse-import-spec* G2d94@parse-import-spec*) (set! G46c1@G2d92@parse-library G2d92@parse-library) (set! G46c0@G2d90@parse-library-name G2d90@parse-library-name) (set! G46bf@G2d8e@parse-exports G2d8e@parse-exports) (set! G46be@G2d8c@expand-transformer G2d8c@expand-transformer) (set! G46bd@G2d8a@chi-body* G2d8a@chi-body*) (set! G46bc@G2d88@chi-internal-module G2d88@chi-internal-module) (set! G46bb@G2d86@module-interface-exp-id* G2d86@module-interface-exp-id*) (set! G46ba@G2d84@set-module-interface-exp-lab-vec! G2d84@set-module-interface-exp-lab-vec!) (set! G46b9@G2d82@set-module-interface-exp-id-vec! G2d82@set-module-interface-exp-id-vec!) (set! G46b8@G2d80@set-module-interface-first-mark! G2d80@set-module-interface-first-mark!) (set! G46b7@G2d7e@module-interface-exp-lab-vec G2d7e@module-interface-exp-lab-vec) (set! G46b6@G2d7c@module-interface-exp-id-vec G2d7c@module-interface-exp-id-vec) (set! G46b5@G2d7a@module-interface-first-mark G2d7a@module-interface-first-mark) (set! G46b4@G2d78@make-module-interface G2d78@make-module-interface) (set! G46b3@G2d76@module-interface? G2d76@module-interface?) (set! G46b2@G2d73@G2d6b G2d73@G2d6b) (set! G46b1@G2d71@G2d6c G2d71@G2d6c) (set! G46b0@G2d6f@G2d6a G2d6f@G2d6a) (set! G46af@G2d69@parse-module G2d69@parse-module) (set! G46ae@G2d67@chi-internal G2d67@chi-internal) (set! G46ad@G2d65@find-dups G2d65@find-dups) (set! G46ac@G2d63@find-bound=? G2d63@find-bound=?) (set! G46ab@G2d61@chi-rhs* G2d61@chi-rhs*) (set! G46aa@G2d5f@expand-interaction-rhs*/init* G2d5f@expand-interaction-rhs*/init*) (set! G46a9@G2d5d@chi-rhs G2d5d@chi-rhs) (set! G46a8@G2d5b@chi-defun G2d5b@chi-defun) (set! G46a7@G2d59@chi-lambda-clause* G2d59@chi-lambda-clause*) (set! G46a6@G2d57@chi-lambda-clause G2d57@chi-lambda-clause) (set! G46a5@G2d55@verify-formals G2d55@verify-formals) (set! G46a4@G2d53@chi-set! G2d53@chi-set!) (set! G46a3@G2d51@chi-expr G2d51@chi-expr) (set! G46a2@G2d4f@chi-application G2d4f@chi-application) (set! G46a1@G2d4d@chi-expr* G2d4d@chi-expr*) (set! G46a0@G2d4b@chi-global-macro G2d4b@chi-global-macro) (set! G469f@G2d49@chi-local-macro G2d49@chi-local-macro) (set! G469e@G2d47@chi-macro G2d47@chi-macro) (set! G469d@G2d45@do-macro-call G2d45@do-macro-call) (set! G469c@G2d43@local-macro-transformer G2d43@local-macro-transformer) (set! G469b@G2d41@macro-transformer G2d41@macro-transformer) (set! G469a@G2d3f@symbol-macro G2d3f@symbol-macro) (set! G4699@G2d3d@file-options-macro G2d3d@file-options-macro) (set! G4698@G2d3b@core-macro-transformer G2d3b@core-macro-transformer) (set! G4697@G2d39@syntax-transformer G2d39@syntax-transformer) (set! G4696@G2d37@ellipsis-map G2d37@ellipsis-map) (set! G4695@G2d35@syntax-case-transformer G2d35@syntax-case-transformer) (set! G4694@G2d33@verify-literals G2d33@verify-literals) (set! G4693@G2d31@underscore? G2d31@underscore?) (set! G4692@G2d2f@ellipsis? G2d2f@ellipsis?) (set! G4691@G2d2d@syntax-dispatch G2d2d@syntax-dispatch) (set! G4690@G2d2b@convert-pattern G2d2b@convert-pattern) (set! G468f@G2d29@foreign-call-transformer G2d29@foreign-call-transformer) (set! G468e@G2d27@parameterize-macro G2d27@parameterize-macro) (set! G468d@G2d25@incorrect-usage-macro G2d25@incorrect-usage-macro) (set! G468c@G2d23@define-condition-type-macro G2d23@define-condition-type-macro) (set! G468b@G2d21@define-record-type-macro G2d21@define-record-type-macro) (set! G468a@G2d1f@define-struct-macro G2d1f@define-struct-macro) (set! G4689@G2d1d@quasisyntax-macro G2d1d@quasisyntax-macro) (set! G4688@G2d1b@quasiquote-macro G2d1b@quasiquote-macro) (set! G4687@G2d19@syntax-rules-macro G2d19@syntax-rules-macro) (set! G4686@G2d17@include-into-macro G2d17@include-into-macro) (set! G4685@G2d15@include-macro G2d15@include-macro) (set! G4684@G2d13@do-include G2d13@do-include) (set! G4683@G2d11@cond-macro G2d11@cond-macro) (set! G4682@G2d0f@and-macro G2d0f@and-macro) (set! G4681@G2d0d@or-macro G2d0d@or-macro) (set! G4680@G2d0b@let*-macro G2d0b@let*-macro) (set! G467f@G2d09@do-macro G2d09@do-macro) (set! G467e@G2d07@identifier-syntax-macro G2d07@identifier-syntax-macro) (set! G467d@G2d05@endianness-macro G2d05@endianness-macro) (set! G467c@G2d03@assert-macro G2d03@assert-macro) (set! G467b@G2d01@delay-macro G2d01@delay-macro) (set! G467a@G2cff@time-macro G2cff@time-macro) (set! G4679@G2cfd@define-enumeration-macro G2cfd@define-enumeration-macro) (set! G4678@G2cfb@guard-macro G2cfb@guard-macro) (set! G4677@G2cf9@trace-letrec-syntax-macro G2cf9@trace-letrec-syntax-macro) (set! G4676@G2cf7@trace-let-syntax-macro G2cf7@trace-let-syntax-macro) (set! G4675@G2cf5@trace-let/rec-syntax G2cf5@trace-let/rec-syntax) (set! G4674@G2cf3@trace-define-syntax-macro G2cf3@trace-define-syntax-macro) (set! G4673@G2cf1@trace-define-macro G2cf1@trace-define-macro) (set! G4672@G2cef@trace-lambda-macro G2cef@trace-lambda-macro) (set! G4671@G2ced@let*-values-macro G2ced@let*-values-macro) (set! G4670@G2ceb@let-values-macro G2ceb@let-values-macro) (set! G466f@G2ce9@let-macro G2ce9@let-macro) (set! G466e@G2ce7@invalid-fmls-error G2ce7@invalid-fmls-error) (set! G466d@G2ce5@with-syntax-macro G2ce5@with-syntax-macro) (set! G466c@G2ce3@bless G2ce3@bless) (set! G466b@G2ce1@lambda-transformer G2ce1@lambda-transformer) (set! G466a@G2cdf@case-lambda-transformer G2cdf@case-lambda-transformer) (set! G4669@G2cdd@quote-transformer G2cdd@quote-transformer) (set! G4668@G2cdb@case-macro G2cdb@case-macro) (set! G4667@G2cd9@or-transformer G2cd9@or-transformer) (set! G4666@G2cd7@and-transformer G2cd7@and-transformer) (set! G4665@G2cd5@if-transformer G2cd5@if-transformer) (set! G4664@G2cd3@unless-macro G2cd3@unless-macro) (set! G4663@G2cd1@when-macro G2cd1@when-macro) (set! G4662@G2ccf@record-constructor-descriptor-transformer G2ccf@record-constructor-descriptor-transformer) (set! G4661@G2ccd@record-type-descriptor-transformer G2ccd@record-type-descriptor-transformer) (set! G4660@G2ccb@type-descriptor-transformer G2ccb@type-descriptor-transformer) (set! G465f@G2cc9@fluid-let-syntax-transformer G2cc9@fluid-let-syntax-transformer) (set! G465e@G2cc7@letrec*-transformer G2cc7@letrec*-transformer) (set! G465d@G2cc5@letrec-transformer G2cc5@letrec-transformer) (set! G465c@G2cc3@letrec-helper G2cc3@letrec-helper) (set! G465b@G2cc1@add-lexicals G2cc1@add-lexicals) (set! G465a@G2cbf@add-lexical G2cbf@add-lexical) (set! G4659@G2cbd@set-lexical-mutable! G2cbd@set-lexical-mutable!) (set! G4658@G2cbb@lexical-mutable? G2cbb@lexical-mutable?) (set! G4657@G2cb9@lexical-var G2cb9@lexical-var) (set! G4656@G2cb7@scheme-stx G2cb7@scheme-stx) (set! G4655@G2cb5@scheme-stx-hashtable G2cb5@scheme-stx-hashtable) (set! G4654@G2cb3@parse-define-syntax G2cb3@parse-define-syntax) (set! G4653@G2cb1@parse-define G2cb1@parse-define) (set! G4652@G2b7a@make-eval-transformer G2b7a@make-eval-transformer) (set! G4651@G2b78@variable-transformer-procedure G2b78@variable-transformer-procedure) (set! G4650@G2b76@variable-transformer? G2b76@variable-transformer?) (set! G464f@G2b74@make-variable-transformer G2b74@make-variable-transformer) (set! G464e@G2b72@sanitize-binding G2b72@sanitize-binding) (set! G464d@G2b64@syntax-type G2b64@syntax-type) (set! G464c@G2b62@raise-unbound-error G2b62@raise-unbound-error) (set! G464b@G2b60@binding-value G2b60@binding-value) (set! G464a@G2b5e@binding-type G2b5e@binding-type) (set! G4649@G2b5c@make-binding G2b5c@make-binding) (set! G4648@G2b5a@label->binding G2b5a@label->binding) (set! G4647@G2b58@id->real-label G2b58@id->real-label) (set! G4646@G2b56@id->label G2b56@id->label) (set! G4645@G2b54@same-marks*? G2b54@same-marks*?) (set! G4644@G2b52@stx->datum G2b52@stx->datum) (set! G4643@G2b50@strip G2b50@strip) (set! G4642@G2b4e@strip-annotations G2b4e@strip-annotations) (set! G4641@G2b4c@self-evaluating? G2b4c@self-evaluating?) (set! G4640@G2b4a@bound-id-member? G2b4a@bound-id-member?) (set! G463f@G2b48@distinct-bound-ids? G2b48@distinct-bound-ids?) (set! G463e@G2b46@valid-bound-ids? G2b46@valid-bound-ids?) (set! G463d@G2b44@free-id=? G2b44@free-id=?) (set! G463c@G2b42@bound-id=? G2b42@bound-id=?) (set! G463b@G2b40@same-marks? G2b40@same-marks?) (set! G463a@G2b3e@id->sym G2b3e@id->sym) (set! G4639@G2b3c@id? G2b3c@id?) (set! G4638@G2b3a@syntax->list G2b3a@syntax->list) (set! G4637@G2b38@syntax-cdr G2b38@syntax-cdr) (set! G4636@G2b36@syntax-car G2b36@syntax-car) (set! G4635@G2b34@syntax-list? G2b34@syntax-list?) (set! G4634@G2b32@syntax-null? G2b32@syntax-null?) (set! G4633@G2b30@syntax-vector? G2b30@syntax-vector?) (set! G4632@G2b2e@syntax-pair? G2b2e@syntax-pair?) (set! G4631@G2b2c@syntax-vector->list G2b2c@syntax-vector->list) (set! G4630@G2b2a@syntax-kind? G2b2a@syntax-kind?) (set! G462f@G2b28@add-subst G2b28@add-subst) (set! G462e@G2b26@add-mark G2b26@add-mark) (set! G462d@G2b24@mkstx G2b24@mkstx) (set! G462c@G2b22@join-wraps G2b22@join-wraps) (set! G462b@G2b20@anti-mark? G2b20@anti-mark?) (set! G462a@G2b1e@anti-mark G2b1e@anti-mark) (set! G4629@G2b1c@gen-mark G2b1c@gen-mark) (set! G4628@G2b1a@datum->stx G2b1a@datum->stx) (set! G4627@G2b18@rp G2b18@rp) (set! G4626@G2b16@set-stx-ae*! G2b16@set-stx-ae*!) (set! G4625@G2b14@set-stx-subst*! G2b14@set-stx-subst*!) (set! G4624@G2b12@set-stx-mark*! G2b12@set-stx-mark*!) (set! G4623@G2b10@set-stx-expr! G2b10@set-stx-expr!) (set! G4622@G2b0e@stx-ae* G2b0e@stx-ae*) (set! G4621@G2b0c@stx-subst* G2b0c@stx-subst*) (set! G4620@G2b0a@stx-mark* G2b0a@stx-mark*) (set! G461f@G2b08@stx-expr G2b08@stx-expr) (set! G461e@G2b06@make-stx G2b06@make-stx) (set! G461d@G2b04@stx? G2b04@stx?) (set! G461c@G2b01@G2af9 G2b01@G2af9) (set! G461b@G2aff@G2afa G2aff@G2afa) (set! G461a@G2afd@G2af8 G2afd@G2af8) (set! G4619@G2af7@make-full-rib G2af7@make-full-rib) (set! G4618@G2af5@unseal-rib! G2af5@unseal-rib!) (set! G4617@G2af3@seal-rib! G2af3@seal-rib!) (set! G4616@G2af1@make-rib-map G2af1@make-rib-map) (set! G4615@G2aef@extend-rib/nc! G2aef@extend-rib/nc!) (set! G4614@G2aed@extend-rib! G2aed@extend-rib!) (set! G4613@G2aeb@make-empty-rib G2aeb@make-empty-rib) (set! G4612@G2ae9@set-rib-cache! G2ae9@set-rib-cache!) (set! G4611@G2ae7@set-rib-sealed/freq! G2ae7@set-rib-sealed/freq!) (set! G4610@G2ae5@set-rib-label*! G2ae5@set-rib-label*!) (set! G460f@G2ae3@set-rib-mark**! G2ae3@set-rib-mark**!) (set! G460e@G2ae1@set-rib-sym*! G2ae1@set-rib-sym*!) (set! G460d@G2adf@rib-cache G2adf@rib-cache) (set! G460c@G2add@rib-sealed/freq G2add@rib-sealed/freq) (set! G460b@G2adb@rib-label* G2adb@rib-label*) (set! G460a@G2ad9@rib-mark** G2ad9@rib-mark**) (set! G4609@G2ad7@rib-sym* G2ad7@rib-sym*) (set! G4608@G2ad5@make-rib G2ad5@make-rib) (set! G4607@G2ad3@rib? G2ad3@rib?) (set! G4606@G2ad0@G2ac8 G2ad0@G2ac8) (set! G4605@G2ace@G2ac9 G2ace@G2ac9) (set! G4604@G2acc@G2ac7 G2acc@G2ac7) (set! G4603@G2ac6@gen-define-label G2ac6@gen-define-label) (set! G4602@G2ac4@gen-define-label+loc G2ac4@gen-define-label+loc) (set! G4601@G2ac2@gen-top-level-label G2ac2@gen-top-level-label) (set! G4600@G2ac0@gen-label G2ac0@gen-label) (set! G45ff@G2abe@gen-global G2abe@gen-global) (set! G45fe@G2abc@gen-lexical G2abc@gen-lexical) (set! G45fd@G2aba@top-marked? G2aba@top-marked?) (set! G45fc@G2ab8@top-mark* G2ab8@top-mark*) (set! G45fb@G2ab3@set-union G2ab3@set-union) (set! G45fa@G2ab1@set-cons G2ab1@set-cons) (G295a@G27f7@current-library-expander G2dfa@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4710@G470b G4712@G470d G4714@G470c G4717@&condition? G4719@make-&condition G471b@&condition-rtd G471d@&condition-rcd G4765@G4760 G4767@G4762 G4769@G4761 G476c@p? G476e@make-message-condition G4770@G475f G4772@message-condition? G4774@condition-message G4776@&message-rtd G4778@&message-rcd G477e@G4779 G4780@G477b G4782@G477a G4785@p? G4787@make-warning G4789@warning? G478b@&warning-rtd G478d@&warning-rcd G4793@G478e G4795@G4790 G4797@G478f G479a@p? G479c@make-serious-condition G479e@serious-condition? G47a0@&serious-rtd G47a2@&serious-rcd G47a8@G47a3 G47aa@G47a5 G47ac@G47a4 G47af@p? G47b1@make-error G47b3@error? G47b5@&error-rtd G47b7@&error-rcd G47bd@G47b8 G47bf@G47ba G47c1@G47b9 G47c4@p? G47c6@make-violation G47c8@violation? G47ca@&violation-rtd G47cc@&violation-rcd G47d2@G47cd G47d4@G47cf G47d6@G47ce G47d9@p? G47db@make-assertion-violation G47dd@assertion-violation? G47df@&assertion-rtd G47e1@&assertion-rcd G47e8@G47e3 G47ea@G47e5 G47ec@G47e4 G47ef@p? G47f1@make-irritants-condition G47f3@G47e2 G47f5@irritants-condition? G47f7@condition-irritants G47f9@&irritants-rtd G47fb@&irritants-rcd G4802@G47fd G4804@G47ff G4806@G47fe G4809@p? G480b@make-who-condition G480d@G47fc G480f@who-condition? G4811@condition-who G4813@&who-rtd G4815@&who-rcd G481b@G4816 G481d@G4818 G481f@G4817 G4822@p? G4824@make-non-continuable-violation G4826@non-continuable-violation? G4828@&non-continuable-rtd G482a@&non-continuable-rcd G4830@G482b G4832@G482d G4834@G482c G4837@p? G4839@make-implementation-restriction-violation G483b@implementation-restriction-violation? G483d@&implementation-restriction-rtd G483f@&implementation-restriction-rcd G4845@G4840 G4847@G4842 G4849@G4841 G484c@p? G484e@make-lexical-violation G4850@lexical-violation? G4852@&lexical-rtd G4854@&lexical-rcd G485c@G4857 G485e@G4859 G4860@G4858 G4863@p? G4865@make-syntax-violation G4867@G4855 G4869@G4856 G486b@syntax-violation? G486d@syntax-violation-form G486f@syntax-violation-subform G4871@&syntax-rtd G4873@&syntax-rcd G4879@G4874 G487b@G4876 G487d@G4875 G4880@p? G4882@make-undefined-violation G4884@undefined-violation? G4886@&undefined-rtd G4888@&undefined-rcd G488e@G4889 G4890@G488b G4892@G488a G4895@p? G4897@make-i/o-error G4899@i/o-error? G489b@&i/o-rtd G489d@&i/o-rcd G48a3@G489e G48a5@G48a0 G48a7@G489f G48aa@p? G48ac@make-i/o-read-error G48ae@i/o-read-error? G48b0@&i/o-read-rtd G48b2@&i/o-read-rcd G48b8@G48b3 G48ba@G48b5 G48bc@G48b4 G48bf@p? G48c1@make-i/o-write-error G48c3@i/o-write-error? G48c5@&i/o-write-rtd G48c7@&i/o-write-rcd G48ce@G48c9 G48d0@G48cb G48d2@G48ca G48d5@p? G48d7@make-i/o-invalid-position-error G48d9@G48c8 G48db@i/o-invalid-position-error? G48dd@i/o-error-position G48df@&i/o-invalid-position-rtd G48e1@&i/o-invalid-position-rcd G48e8@G48e3 G48ea@G48e5 G48ec@G48e4 G48ef@p? G48f1@make-i/o-filename-error G48f3@G48e2 G48f5@i/o-filename-error? G48f7@i/o-error-filename G48f9@&i/o-filename-rtd G48fb@&i/o-filename-rcd G4901@G48fc G4903@G48fe G4905@G48fd G4908@p? G490a@make-i/o-file-protection-error G490c@i/o-file-protection-error? G490e@&i/o-file-protection-rtd G4910@&i/o-file-protection-rcd G4916@G4911 G4918@G4913 G491a@G4912 G491d@p? G491f@make-i/o-file-is-read-only-error G4921@i/o-file-is-read-only-error? G4923@&i/o-file-is-read-only-rtd G4925@&i/o-file-is-read-only-rcd G492b@G4926 G492d@G4928 G492f@G4927 G4932@p? G4934@make-i/o-file-already-exists-error G4936@i/o-file-already-exists-error? G4938@&i/o-file-already-exists-rtd G493a@&i/o-file-already-exists-rcd G4940@G493b G4942@G493d G4944@G493c G4947@p? G4949@make-i/o-file-does-not-exist-error G494b@i/o-file-does-not-exist-error? G494d@&i/o-file-does-not-exist-rtd G494f@&i/o-file-does-not-exist-rcd G4956@G4951 G4958@G4953 G495a@G4952 G495d@p? G495f@make-i/o-port-error G4961@G4950 G4963@i/o-port-error? G4965@i/o-error-port G4967@&i/o-port-rtd G4969@&i/o-port-rcd G496f@G496a G4971@G496c G4973@G496b G4976@p? G4978@make-i/o-decoding-error G497a@i/o-decoding-error? G497c@&i/o-decoding-rtd G497e@&i/o-decoding-rcd G4985@G4980 G4987@G4982 G4989@G4981 G498c@p? G498e@make-i/o-encoding-error G4990@G497f G4992@i/o-encoding-error? G4994@i/o-encoding-error-char G4996@&i/o-encoding-rtd G4998@&i/o-encoding-rcd G499e@G4999 G49a0@G499b G49a2@G499a G49a5@p? G49a7@make-no-infinities-violation G49a9@no-infinities-violation? G49ab@&no-infinities-rtd G49ad@&no-infinities-rcd G49b3@G49ae G49b5@G49b0 G49b7@G49af G49ba@p? G49bc@make-no-nans-violation G49be@no-nans-violation? G49c0@&no-nans-rtd G49c2@&no-nans-rcd) (begin (set! G4710@G470b (make-record-type-descriptor '&condition '#f 'G470e '#f '#f '#())) (set! G4712@G470d '#f) (set! G4714@G470c (make-record-constructor-descriptor G4710@G470b '#f G4712@G470d)) (set! G4717@&condition? (record-predicate G4710@G470b)) (set! G4719@make-&condition (record-constructor G4714@G470c)) (set! G471b@&condition-rtd G4710@G470b) (set! G471d@&condition-rcd G4714@G470c) (set! G4765@G4760 (make-record-type-descriptor '&message G4710@G470b 'G4763 '#f '#f '#((immutable message)))) (set! G4767@G4762 '#f) (set! G4769@G4761 (make-record-constructor-descriptor G4765@G4760 G4714@G470c G4767@G4762)) (set! G476c@p? (record-predicate G4765@G4760)) (set! G476e@make-message-condition (record-constructor G4769@G4761)) (set! G4770@G475f (record-accessor G4765@G4760 '0)) (set! G4772@message-condition? (condition-predicate G4765@G4760)) (set! G4774@condition-message (condition-accessor G4765@G4760 G4770@G475f)) (set! G4776@&message-rtd G4765@G4760) (set! G4778@&message-rcd G4769@G4761) (set! G477e@G4779 (make-record-type-descriptor '&warning G4710@G470b 'G477c '#f '#f '#())) (set! G4780@G477b '#f) (set! G4782@G477a (make-record-constructor-descriptor G477e@G4779 G4714@G470c G4780@G477b)) (set! G4785@p? (record-predicate G477e@G4779)) (set! G4787@make-warning (record-constructor G4782@G477a)) (set! G4789@warning? (condition-predicate G477e@G4779)) (set! G478b@&warning-rtd G477e@G4779) (set! G478d@&warning-rcd G4782@G477a) (set! G4793@G478e (make-record-type-descriptor '&serious G4710@G470b 'G4791 '#f '#f '#())) (set! G4795@G4790 '#f) (set! G4797@G478f (make-record-constructor-descriptor G4793@G478e G4714@G470c G4795@G4790)) (set! G479a@p? (record-predicate G4793@G478e)) (set! G479c@make-serious-condition (record-constructor G4797@G478f)) (set! G479e@serious-condition? (condition-predicate G4793@G478e)) (set! G47a0@&serious-rtd G4793@G478e) (set! G47a2@&serious-rcd G4797@G478f) (set! G47a8@G47a3 (make-record-type-descriptor '&error G4793@G478e 'G47a6 '#f '#f '#())) (set! G47aa@G47a5 '#f) (set! G47ac@G47a4 (make-record-constructor-descriptor G47a8@G47a3 G4797@G478f G47aa@G47a5)) (set! G47af@p? (record-predicate G47a8@G47a3)) (set! G47b1@make-error (record-constructor G47ac@G47a4)) (set! G47b3@error? (condition-predicate G47a8@G47a3)) (set! G47b5@&error-rtd G47a8@G47a3) (set! G47b7@&error-rcd G47ac@G47a4) (set! G47bd@G47b8 (make-record-type-descriptor '&violation G4793@G478e 'G47bb '#f '#f '#())) (set! G47bf@G47ba '#f) (set! G47c1@G47b9 (make-record-constructor-descriptor G47bd@G47b8 G4797@G478f G47bf@G47ba)) (set! G47c4@p? (record-predicate G47bd@G47b8)) (set! G47c6@make-violation (record-constructor G47c1@G47b9)) (set! G47c8@violation? (condition-predicate G47bd@G47b8)) (set! G47ca@&violation-rtd G47bd@G47b8) (set! G47cc@&violation-rcd G47c1@G47b9) (set! G47d2@G47cd (make-record-type-descriptor '&assertion G47bd@G47b8 'G47d0 '#f '#f '#())) (set! G47d4@G47cf '#f) (set! G47d6@G47ce (make-record-constructor-descriptor G47d2@G47cd G47c1@G47b9 G47d4@G47cf)) (set! G47d9@p? (record-predicate G47d2@G47cd)) (set! G47db@make-assertion-violation (record-constructor G47d6@G47ce)) (set! G47dd@assertion-violation? (condition-predicate G47d2@G47cd)) (set! G47df@&assertion-rtd G47d2@G47cd) (set! G47e1@&assertion-rcd G47d6@G47ce) (set! G47e8@G47e3 (make-record-type-descriptor '&irritants G4710@G470b 'G47e6 '#f '#f '#((immutable irritants)))) (set! G47ea@G47e5 '#f) (set! G47ec@G47e4 (make-record-constructor-descriptor G47e8@G47e3 G4714@G470c G47ea@G47e5)) (set! G47ef@p? (record-predicate G47e8@G47e3)) (set! G47f1@make-irritants-condition (record-constructor G47ec@G47e4)) (set! G47f3@G47e2 (record-accessor G47e8@G47e3 '0)) (set! G47f5@irritants-condition? (condition-predicate G47e8@G47e3)) (set! G47f7@condition-irritants (condition-accessor G47e8@G47e3 G47f3@G47e2)) (set! G47f9@&irritants-rtd G47e8@G47e3) (set! G47fb@&irritants-rcd G47ec@G47e4) (set! G4802@G47fd (make-record-type-descriptor '&who G4710@G470b 'G4800 '#f '#f '#((immutable who)))) (set! G4804@G47ff '#f) (set! G4806@G47fe (make-record-constructor-descriptor G4802@G47fd G4714@G470c G4804@G47ff)) (set! G4809@p? (record-predicate G4802@G47fd)) (set! G480b@make-who-condition (record-constructor G4806@G47fe)) (set! G480d@G47fc (record-accessor G4802@G47fd '0)) (set! G480f@who-condition? (condition-predicate G4802@G47fd)) (set! G4811@condition-who (condition-accessor G4802@G47fd G480d@G47fc)) (set! G4813@&who-rtd G4802@G47fd) (set! G4815@&who-rcd G4806@G47fe) (set! G481b@G4816 (make-record-type-descriptor '&non-continuable G47bd@G47b8 'G4819 '#f '#f '#())) (set! G481d@G4818 '#f) (set! G481f@G4817 (make-record-constructor-descriptor G481b@G4816 G47c1@G47b9 G481d@G4818)) (set! G4822@p? (record-predicate G481b@G4816)) (set! G4824@make-non-continuable-violation (record-constructor G481f@G4817)) (set! G4826@non-continuable-violation? (condition-predicate G481b@G4816)) (set! G4828@&non-continuable-rtd G481b@G4816) (set! G482a@&non-continuable-rcd G481f@G4817) (set! G4830@G482b (make-record-type-descriptor '&implementation-restriction G47bd@G47b8 'G482e '#f '#f '#())) (set! G4832@G482d '#f) (set! G4834@G482c (make-record-constructor-descriptor G4830@G482b G47c1@G47b9 G4832@G482d)) (set! G4837@p? (record-predicate G4830@G482b)) (set! G4839@make-implementation-restriction-violation (record-constructor G4834@G482c)) (set! G483b@implementation-restriction-violation? (condition-predicate G4830@G482b)) (set! G483d@&implementation-restriction-rtd G4830@G482b) (set! G483f@&implementation-restriction-rcd G4834@G482c) (set! G4845@G4840 (make-record-type-descriptor '&lexical G47bd@G47b8 'G4843 '#f '#f '#())) (set! G4847@G4842 '#f) (set! G4849@G4841 (make-record-constructor-descriptor G4845@G4840 G47c1@G47b9 G4847@G4842)) (set! G484c@p? (record-predicate G4845@G4840)) (set! G484e@make-lexical-violation (record-constructor G4849@G4841)) (set! G4850@lexical-violation? (condition-predicate G4845@G4840)) (set! G4852@&lexical-rtd G4845@G4840) (set! G4854@&lexical-rcd G4849@G4841) (set! G485c@G4857 (make-record-type-descriptor '&syntax G47bd@G47b8 'G485a '#f '#f '#((immutable form) (immutable subform)))) (set! G485e@G4859 '#f) (set! G4860@G4858 (make-record-constructor-descriptor G485c@G4857 G47c1@G47b9 G485e@G4859)) (set! G4863@p? (record-predicate G485c@G4857)) (set! G4865@make-syntax-violation (record-constructor G4860@G4858)) (set! G4867@G4855 (record-accessor G485c@G4857 '0)) (set! G4869@G4856 (record-accessor G485c@G4857 '1)) (set! G486b@syntax-violation? (condition-predicate G485c@G4857)) (set! G486d@syntax-violation-form (condition-accessor G485c@G4857 G4867@G4855)) (set! G486f@syntax-violation-subform (condition-accessor G485c@G4857 G4869@G4856)) (set! G4871@&syntax-rtd G485c@G4857) (set! G4873@&syntax-rcd G4860@G4858) (set! G4879@G4874 (make-record-type-descriptor '&undefined G47bd@G47b8 'G4877 '#f '#f '#())) (set! G487b@G4876 '#f) (set! G487d@G4875 (make-record-constructor-descriptor G4879@G4874 G47c1@G47b9 G487b@G4876)) (set! G4880@p? (record-predicate G4879@G4874)) (set! G4882@make-undefined-violation (record-constructor G487d@G4875)) (set! G4884@undefined-violation? (condition-predicate G4879@G4874)) (set! G4886@&undefined-rtd G4879@G4874) (set! G4888@&undefined-rcd G487d@G4875) (set! G488e@G4889 (make-record-type-descriptor '&i/o G47a8@G47a3 'G488c '#f '#f '#())) (set! G4890@G488b '#f) (set! G4892@G488a (make-record-constructor-descriptor G488e@G4889 G47ac@G47a4 G4890@G488b)) (set! G4895@p? (record-predicate G488e@G4889)) (set! G4897@make-i/o-error (record-constructor G4892@G488a)) (set! G4899@i/o-error? (condition-predicate G488e@G4889)) (set! G489b@&i/o-rtd G488e@G4889) (set! G489d@&i/o-rcd G4892@G488a) (set! G48a3@G489e (make-record-type-descriptor '&i/o-read G488e@G4889 'G48a1 '#f '#f '#())) (set! G48a5@G48a0 '#f) (set! G48a7@G489f (make-record-constructor-descriptor G48a3@G489e G4892@G488a G48a5@G48a0)) (set! G48aa@p? (record-predicate G48a3@G489e)) (set! G48ac@make-i/o-read-error (record-constructor G48a7@G489f)) (set! G48ae@i/o-read-error? (condition-predicate G48a3@G489e)) (set! G48b0@&i/o-read-rtd G48a3@G489e) (set! G48b2@&i/o-read-rcd G48a7@G489f) (set! G48b8@G48b3 (make-record-type-descriptor '&i/o-write G488e@G4889 'G48b6 '#f '#f '#())) (set! G48ba@G48b5 '#f) (set! G48bc@G48b4 (make-record-constructor-descriptor G48b8@G48b3 G4892@G488a G48ba@G48b5)) (set! G48bf@p? (record-predicate G48b8@G48b3)) (set! G48c1@make-i/o-write-error (record-constructor G48bc@G48b4)) (set! G48c3@i/o-write-error? (condition-predicate G48b8@G48b3)) (set! G48c5@&i/o-write-rtd G48b8@G48b3) (set! G48c7@&i/o-write-rcd G48bc@G48b4) (set! G48ce@G48c9 (make-record-type-descriptor '&i/o-invalid-position G488e@G4889 'G48cc '#f '#f '#((immutable position)))) (set! G48d0@G48cb '#f) (set! G48d2@G48ca (make-record-constructor-descriptor G48ce@G48c9 G4892@G488a G48d0@G48cb)) (set! G48d5@p? (record-predicate G48ce@G48c9)) (set! G48d7@make-i/o-invalid-position-error (record-constructor G48d2@G48ca)) (set! G48d9@G48c8 (record-accessor G48ce@G48c9 '0)) (set! G48db@i/o-invalid-position-error? (condition-predicate G48ce@G48c9)) (set! G48dd@i/o-error-position (condition-accessor G48ce@G48c9 G48d9@G48c8)) (set! G48df@&i/o-invalid-position-rtd G48ce@G48c9) (set! G48e1@&i/o-invalid-position-rcd G48d2@G48ca) (set! G48e8@G48e3 (make-record-type-descriptor '&i/o-filename G488e@G4889 'G48e6 '#f '#f '#((immutable filename)))) (set! G48ea@G48e5 '#f) (set! G48ec@G48e4 (make-record-constructor-descriptor G48e8@G48e3 G4892@G488a G48ea@G48e5)) (set! G48ef@p? (record-predicate G48e8@G48e3)) (set! G48f1@make-i/o-filename-error (record-constructor G48ec@G48e4)) (set! G48f3@G48e2 (record-accessor G48e8@G48e3 '0)) (set! G48f5@i/o-filename-error? (condition-predicate G48e8@G48e3)) (set! G48f7@i/o-error-filename (condition-accessor G48e8@G48e3 G48f3@G48e2)) (set! G48f9@&i/o-filename-rtd G48e8@G48e3) (set! G48fb@&i/o-filename-rcd G48ec@G48e4) (set! G4901@G48fc (make-record-type-descriptor '&i/o-file-protection G48e8@G48e3 'G48ff '#f '#f '#())) (set! G4903@G48fe '#f) (set! G4905@G48fd (make-record-constructor-descriptor G4901@G48fc G48ec@G48e4 G4903@G48fe)) (set! G4908@p? (record-predicate G4901@G48fc)) (set! G490a@make-i/o-file-protection-error (record-constructor G4905@G48fd)) (set! G490c@i/o-file-protection-error? (condition-predicate G4901@G48fc)) (set! G490e@&i/o-file-protection-rtd G4901@G48fc) (set! G4910@&i/o-file-protection-rcd G4905@G48fd) (set! G4916@G4911 (make-record-type-descriptor '&i/o-file-is-read-only G4901@G48fc 'G4914 '#f '#f '#())) (set! G4918@G4913 '#f) (set! G491a@G4912 (make-record-constructor-descriptor G4916@G4911 G4905@G48fd G4918@G4913)) (set! G491d@p? (record-predicate G4916@G4911)) (set! G491f@make-i/o-file-is-read-only-error (record-constructor G491a@G4912)) (set! G4921@i/o-file-is-read-only-error? (condition-predicate G4916@G4911)) (set! G4923@&i/o-file-is-read-only-rtd G4916@G4911) (set! G4925@&i/o-file-is-read-only-rcd G491a@G4912) (set! G492b@G4926 (make-record-type-descriptor '&i/o-file-already-exists G48e8@G48e3 'G4929 '#f '#f '#())) (set! G492d@G4928 '#f) (set! G492f@G4927 (make-record-constructor-descriptor G492b@G4926 G48ec@G48e4 G492d@G4928)) (set! G4932@p? (record-predicate G492b@G4926)) (set! G4934@make-i/o-file-already-exists-error (record-constructor G492f@G4927)) (set! G4936@i/o-file-already-exists-error? (condition-predicate G492b@G4926)) (set! G4938@&i/o-file-already-exists-rtd G492b@G4926) (set! G493a@&i/o-file-already-exists-rcd G492f@G4927) (set! G4940@G493b (make-record-type-descriptor '&i/o-file-does-not-exist G48e8@G48e3 'G493e '#f '#f '#())) (set! G4942@G493d '#f) (set! G4944@G493c (make-record-constructor-descriptor G4940@G493b G48ec@G48e4 G4942@G493d)) (set! G4947@p? (record-predicate G4940@G493b)) (set! G4949@make-i/o-file-does-not-exist-error (record-constructor G4944@G493c)) (set! G494b@i/o-file-does-not-exist-error? (condition-predicate G4940@G493b)) (set! G494d@&i/o-file-does-not-exist-rtd G4940@G493b) (set! G494f@&i/o-file-does-not-exist-rcd G4944@G493c) (set! G4956@G4951 (make-record-type-descriptor '&i/o-port G488e@G4889 'G4954 '#f '#f '#((immutable port)))) (set! G4958@G4953 '#f) (set! G495a@G4952 (make-record-constructor-descriptor G4956@G4951 G4892@G488a G4958@G4953)) (set! G495d@p? (record-predicate G4956@G4951)) (set! G495f@make-i/o-port-error (record-constructor G495a@G4952)) (set! G4961@G4950 (record-accessor G4956@G4951 '0)) (set! G4963@i/o-port-error? (condition-predicate G4956@G4951)) (set! G4965@i/o-error-port (condition-accessor G4956@G4951 G4961@G4950)) (set! G4967@&i/o-port-rtd G4956@G4951) (set! G4969@&i/o-port-rcd G495a@G4952) (set! G496f@G496a (make-record-type-descriptor '&i/o-decoding G4956@G4951 'G496d '#f '#f '#())) (set! G4971@G496c '#f) (set! G4973@G496b (make-record-constructor-descriptor G496f@G496a G495a@G4952 G4971@G496c)) (set! G4976@p? (record-predicate G496f@G496a)) (set! G4978@make-i/o-decoding-error (record-constructor G4973@G496b)) (set! G497a@i/o-decoding-error? (condition-predicate G496f@G496a)) (set! G497c@&i/o-decoding-rtd G496f@G496a) (set! G497e@&i/o-decoding-rcd G4973@G496b) (set! G4985@G4980 (make-record-type-descriptor '&i/o-encoding G4956@G4951 'G4983 '#f '#f '#((immutable char)))) (set! G4987@G4982 '#f) (set! G4989@G4981 (make-record-constructor-descriptor G4985@G4980 G495a@G4952 G4987@G4982)) (set! G498c@p? (record-predicate G4985@G4980)) (set! G498e@make-i/o-encoding-error (record-constructor G4989@G4981)) (set! G4990@G497f (record-accessor G4985@G4980 '0)) (set! G4992@i/o-encoding-error? (condition-predicate G4985@G4980)) (set! G4994@i/o-encoding-error-char (condition-accessor G4985@G4980 G4990@G497f)) (set! G4996@&i/o-encoding-rtd G4985@G4980) (set! G4998@&i/o-encoding-rcd G4989@G4981) (set! G499e@G4999 (make-record-type-descriptor '&no-infinities G4830@G482b 'G499c '#f '#f '#())) (set! G49a0@G499b '#f) (set! G49a2@G499a (make-record-constructor-descriptor G499e@G4999 G4834@G482c G49a0@G499b)) (set! G49a5@p? (record-predicate G499e@G4999)) (set! G49a7@make-no-infinities-violation (record-constructor G49a2@G499a)) (set! G49a9@no-infinities-violation? (condition-predicate G499e@G4999)) (set! G49ab@&no-infinities-rtd G499e@G4999) (set! G49ad@&no-infinities-rcd G49a2@G499a) (set! G49b3@G49ae (make-record-type-descriptor '&no-nans G4830@G482b 'G49b1 '#f '#f '#())) (set! G49b5@G49b0 '#f) (set! G49b7@G49af (make-record-constructor-descriptor G49b3@G49ae G4834@G482c G49b5@G49b0)) (set! G49ba@p? (record-predicate G49b3@G49ae)) (set! G49bc@make-no-nans-violation (record-constructor G49b7@G49af)) (set! G49be@no-nans-violation? (condition-predicate G49b3@G49ae)) (set! G49c0@&no-nans-rtd G49b3@G49ae) (set! G49c2@&no-nans-rcd G49b7@G49af) (begin (set! G4ab3@G49c2@&no-nans-rcd G49c2@&no-nans-rcd) (set! G4ab2@G49c0@&no-nans-rtd G49c0@&no-nans-rtd) (set! G4ab1@G49be@no-nans-violation? G49be@no-nans-violation?) (set! G4ab0@G49bc@make-no-nans-violation G49bc@make-no-nans-violation) (set! G4aaf@G49ba@p? G49ba@p?) (set! G4aae@G49b7@G49af G49b7@G49af) (set! G4aad@G49b5@G49b0 G49b5@G49b0) (set! G4aac@G49b3@G49ae G49b3@G49ae) (set! G4aab@G49ad@&no-infinities-rcd G49ad@&no-infinities-rcd) (set! G4aaa@G49ab@&no-infinities-rtd G49ab@&no-infinities-rtd) (set! G4aa9@G49a9@no-infinities-violation? G49a9@no-infinities-violation?) (set! G4aa8@G49a7@make-no-infinities-violation G49a7@make-no-infinities-violation) (set! G4aa7@G49a5@p? G49a5@p?) (set! G4aa6@G49a2@G499a G49a2@G499a) (set! G4aa5@G49a0@G499b G49a0@G499b) (set! G4aa4@G499e@G4999 G499e@G4999) (set! G4aa3@G4998@&i/o-encoding-rcd G4998@&i/o-encoding-rcd) (set! G4aa2@G4996@&i/o-encoding-rtd G4996@&i/o-encoding-rtd) (set! G4aa1@G4994@i/o-encoding-error-char G4994@i/o-encoding-error-char) (set! G4aa0@G4992@i/o-encoding-error? G4992@i/o-encoding-error?) (set! G4a9f@G4990@G497f G4990@G497f) (set! G4a9e@G498e@make-i/o-encoding-error G498e@make-i/o-encoding-error) (set! G4a9d@G498c@p? G498c@p?) (set! G4a9c@G4989@G4981 G4989@G4981) (set! G4a9b@G4987@G4982 G4987@G4982) (set! G4a9a@G4985@G4980 G4985@G4980) (set! G4a99@G497e@&i/o-decoding-rcd G497e@&i/o-decoding-rcd) (set! G4a98@G497c@&i/o-decoding-rtd G497c@&i/o-decoding-rtd) (set! G4a97@G497a@i/o-decoding-error? G497a@i/o-decoding-error?) (set! G4a96@G4978@make-i/o-decoding-error G4978@make-i/o-decoding-error) (set! G4a95@G4976@p? G4976@p?) (set! G4a94@G4973@G496b G4973@G496b) (set! G4a93@G4971@G496c G4971@G496c) (set! G4a92@G496f@G496a G496f@G496a) (set! G4a91@G4969@&i/o-port-rcd G4969@&i/o-port-rcd) (set! G4a90@G4967@&i/o-port-rtd G4967@&i/o-port-rtd) (set! G4a8f@G4965@i/o-error-port G4965@i/o-error-port) (set! G4a8e@G4963@i/o-port-error? G4963@i/o-port-error?) (set! G4a8d@G4961@G4950 G4961@G4950) (set! G4a8c@G495f@make-i/o-port-error G495f@make-i/o-port-error) (set! G4a8b@G495d@p? G495d@p?) (set! G4a8a@G495a@G4952 G495a@G4952) (set! G4a89@G4958@G4953 G4958@G4953) (set! G4a88@G4956@G4951 G4956@G4951) (set! G4a87@G494f@&i/o-file-does-not-exist-rcd G494f@&i/o-file-does-not-exist-rcd) (set! G4a86@G494d@&i/o-file-does-not-exist-rtd G494d@&i/o-file-does-not-exist-rtd) (set! G4a85@G494b@i/o-file-does-not-exist-error? G494b@i/o-file-does-not-exist-error?) (set! G4a84@G4949@make-i/o-file-does-not-exist-error G4949@make-i/o-file-does-not-exist-error) (set! G4a83@G4947@p? G4947@p?) (set! G4a82@G4944@G493c G4944@G493c) (set! G4a81@G4942@G493d G4942@G493d) (set! G4a80@G4940@G493b G4940@G493b) (set! G4a7f@G493a@&i/o-file-already-exists-rcd G493a@&i/o-file-already-exists-rcd) (set! G4a7e@G4938@&i/o-file-already-exists-rtd G4938@&i/o-file-already-exists-rtd) (set! G4a7d@G4936@i/o-file-already-exists-error? G4936@i/o-file-already-exists-error?) (set! G4a7c@G4934@make-i/o-file-already-exists-error G4934@make-i/o-file-already-exists-error) (set! G4a7b@G4932@p? G4932@p?) (set! G4a7a@G492f@G4927 G492f@G4927) (set! G4a79@G492d@G4928 G492d@G4928) (set! G4a78@G492b@G4926 G492b@G4926) (set! G4a77@G4925@&i/o-file-is-read-only-rcd G4925@&i/o-file-is-read-only-rcd) (set! G4a76@G4923@&i/o-file-is-read-only-rtd G4923@&i/o-file-is-read-only-rtd) (set! G4a75@G4921@i/o-file-is-read-only-error? G4921@i/o-file-is-read-only-error?) (set! G4a74@G491f@make-i/o-file-is-read-only-error G491f@make-i/o-file-is-read-only-error) (set! G4a73@G491d@p? G491d@p?) (set! G4a72@G491a@G4912 G491a@G4912) (set! G4a71@G4918@G4913 G4918@G4913) (set! G4a70@G4916@G4911 G4916@G4911) (set! G4a6f@G4910@&i/o-file-protection-rcd G4910@&i/o-file-protection-rcd) (set! G4a6e@G490e@&i/o-file-protection-rtd G490e@&i/o-file-protection-rtd) (set! G4a6d@G490c@i/o-file-protection-error? G490c@i/o-file-protection-error?) (set! G4a6c@G490a@make-i/o-file-protection-error G490a@make-i/o-file-protection-error) (set! G4a6b@G4908@p? G4908@p?) (set! G4a6a@G4905@G48fd G4905@G48fd) (set! G4a69@G4903@G48fe G4903@G48fe) (set! G4a68@G4901@G48fc G4901@G48fc) (set! G4a67@G48fb@&i/o-filename-rcd G48fb@&i/o-filename-rcd) (set! G4a66@G48f9@&i/o-filename-rtd G48f9@&i/o-filename-rtd) (set! G4a65@G48f7@i/o-error-filename G48f7@i/o-error-filename) (set! G4a64@G48f5@i/o-filename-error? G48f5@i/o-filename-error?) (set! G4a63@G48f3@G48e2 G48f3@G48e2) (set! G4a62@G48f1@make-i/o-filename-error G48f1@make-i/o-filename-error) (set! G4a61@G48ef@p? G48ef@p?) (set! G4a60@G48ec@G48e4 G48ec@G48e4) (set! G4a5f@G48ea@G48e5 G48ea@G48e5) (set! G4a5e@G48e8@G48e3 G48e8@G48e3) (set! G4a5d@G48e1@&i/o-invalid-position-rcd G48e1@&i/o-invalid-position-rcd) (set! G4a5c@G48df@&i/o-invalid-position-rtd G48df@&i/o-invalid-position-rtd) (set! G4a5b@G48dd@i/o-error-position G48dd@i/o-error-position) (set! G4a5a@G48db@i/o-invalid-position-error? G48db@i/o-invalid-position-error?) (set! G4a59@G48d9@G48c8 G48d9@G48c8) (set! G4a58@G48d7@make-i/o-invalid-position-error G48d7@make-i/o-invalid-position-error) (set! G4a57@G48d5@p? G48d5@p?) (set! G4a56@G48d2@G48ca G48d2@G48ca) (set! G4a55@G48d0@G48cb G48d0@G48cb) (set! G4a54@G48ce@G48c9 G48ce@G48c9) (set! G4a53@G48c7@&i/o-write-rcd G48c7@&i/o-write-rcd) (set! G4a52@G48c5@&i/o-write-rtd G48c5@&i/o-write-rtd) (set! G4a51@G48c3@i/o-write-error? G48c3@i/o-write-error?) (set! G4a50@G48c1@make-i/o-write-error G48c1@make-i/o-write-error) (set! G4a4f@G48bf@p? G48bf@p?) (set! G4a4e@G48bc@G48b4 G48bc@G48b4) (set! G4a4d@G48ba@G48b5 G48ba@G48b5) (set! G4a4c@G48b8@G48b3 G48b8@G48b3) (set! G4a4b@G48b2@&i/o-read-rcd G48b2@&i/o-read-rcd) (set! G4a4a@G48b0@&i/o-read-rtd G48b0@&i/o-read-rtd) (set! G4a49@G48ae@i/o-read-error? G48ae@i/o-read-error?) (set! G4a48@G48ac@make-i/o-read-error G48ac@make-i/o-read-error) (set! G4a47@G48aa@p? G48aa@p?) (set! G4a46@G48a7@G489f G48a7@G489f) (set! G4a45@G48a5@G48a0 G48a5@G48a0) (set! G4a44@G48a3@G489e G48a3@G489e) (set! G4a43@G489d@&i/o-rcd G489d@&i/o-rcd) (set! G4a42@G489b@&i/o-rtd G489b@&i/o-rtd) (set! G4a41@G4899@i/o-error? G4899@i/o-error?) (set! G4a40@G4897@make-i/o-error G4897@make-i/o-error) (set! G4a3f@G4895@p? G4895@p?) (set! G4a3e@G4892@G488a G4892@G488a) (set! G4a3d@G4890@G488b G4890@G488b) (set! G4a3c@G488e@G4889 G488e@G4889) (set! G4a3b@G4888@&undefined-rcd G4888@&undefined-rcd) (set! G4a3a@G4886@&undefined-rtd G4886@&undefined-rtd) (set! G4a39@G4884@undefined-violation? G4884@undefined-violation?) (set! G4a38@G4882@make-undefined-violation G4882@make-undefined-violation) (set! G4a37@G4880@p? G4880@p?) (set! G4a36@G487d@G4875 G487d@G4875) (set! G4a35@G487b@G4876 G487b@G4876) (set! G4a34@G4879@G4874 G4879@G4874) (set! G4a33@G4873@&syntax-rcd G4873@&syntax-rcd) (set! G4a32@G4871@&syntax-rtd G4871@&syntax-rtd) (set! G4a31@G486f@syntax-violation-subform G486f@syntax-violation-subform) (set! G4a30@G486d@syntax-violation-form G486d@syntax-violation-form) (set! G4a2f@G486b@syntax-violation? G486b@syntax-violation?) (set! G4a2e@G4869@G4856 G4869@G4856) (set! G4a2d@G4867@G4855 G4867@G4855) (set! G4a2c@G4865@make-syntax-violation G4865@make-syntax-violation) (set! G4a2b@G4863@p? G4863@p?) (set! G4a2a@G4860@G4858 G4860@G4858) (set! G4a29@G485e@G4859 G485e@G4859) (set! G4a28@G485c@G4857 G485c@G4857) (set! G4a27@G4854@&lexical-rcd G4854@&lexical-rcd) (set! G4a26@G4852@&lexical-rtd G4852@&lexical-rtd) (set! G4a25@G4850@lexical-violation? G4850@lexical-violation?) (set! G4a24@G484e@make-lexical-violation G484e@make-lexical-violation) (set! G4a23@G484c@p? G484c@p?) (set! G4a22@G4849@G4841 G4849@G4841) (set! G4a21@G4847@G4842 G4847@G4842) (set! G4a20@G4845@G4840 G4845@G4840) (set! G4a1f@G483f@&implementation-restriction-rcd G483f@&implementation-restriction-rcd) (set! G4a1e@G483d@&implementation-restriction-rtd G483d@&implementation-restriction-rtd) (set! G4a1d@G483b@implementation-restriction-violation? G483b@implementation-restriction-violation?) (set! G4a1c@G4839@make-implementation-restriction-violation G4839@make-implementation-restriction-violation) (set! G4a1b@G4837@p? G4837@p?) (set! G4a1a@G4834@G482c G4834@G482c) (set! G4a19@G4832@G482d G4832@G482d) (set! G4a18@G4830@G482b G4830@G482b) (set! G4a17@G482a@&non-continuable-rcd G482a@&non-continuable-rcd) (set! G4a16@G4828@&non-continuable-rtd G4828@&non-continuable-rtd) (set! G4a15@G4826@non-continuable-violation? G4826@non-continuable-violation?) (set! G4a14@G4824@make-non-continuable-violation G4824@make-non-continuable-violation) (set! G4a13@G4822@p? G4822@p?) (set! G4a12@G481f@G4817 G481f@G4817) (set! G4a11@G481d@G4818 G481d@G4818) (set! G4a10@G481b@G4816 G481b@G4816) (set! G4a0f@G4815@&who-rcd G4815@&who-rcd) (set! G4a0e@G4813@&who-rtd G4813@&who-rtd) (set! G4a0d@G4811@condition-who G4811@condition-who) (set! G4a0c@G480f@who-condition? G480f@who-condition?) (set! G4a0b@G480d@G47fc G480d@G47fc) (set! G4a0a@G480b@make-who-condition G480b@make-who-condition) (set! G4a09@G4809@p? G4809@p?) (set! G4a08@G4806@G47fe G4806@G47fe) (set! G4a07@G4804@G47ff G4804@G47ff) (set! G4a06@G4802@G47fd G4802@G47fd) (set! G4a05@G47fb@&irritants-rcd G47fb@&irritants-rcd) (set! G4a04@G47f9@&irritants-rtd G47f9@&irritants-rtd) (set! G4a03@G47f7@condition-irritants G47f7@condition-irritants) (set! G4a02@G47f5@irritants-condition? G47f5@irritants-condition?) (set! G4a01@G47f3@G47e2 G47f3@G47e2) (set! G4a00@G47f1@make-irritants-condition G47f1@make-irritants-condition) (set! G49ff@G47ef@p? G47ef@p?) (set! G49fe@G47ec@G47e4 G47ec@G47e4) (set! G49fd@G47ea@G47e5 G47ea@G47e5) (set! G49fc@G47e8@G47e3 G47e8@G47e3) (set! G49fb@G47e1@&assertion-rcd G47e1@&assertion-rcd) (set! G49fa@G47df@&assertion-rtd G47df@&assertion-rtd) (set! G49f9@G47dd@assertion-violation? G47dd@assertion-violation?) (set! G49f8@G47db@make-assertion-violation G47db@make-assertion-violation) (set! G49f7@G47d9@p? G47d9@p?) (set! G49f6@G47d6@G47ce G47d6@G47ce) (set! G49f5@G47d4@G47cf G47d4@G47cf) (set! G49f4@G47d2@G47cd G47d2@G47cd) (set! G49f3@G47cc@&violation-rcd G47cc@&violation-rcd) (set! G49f2@G47ca@&violation-rtd G47ca@&violation-rtd) (set! G49f1@G47c8@violation? G47c8@violation?) (set! G49f0@G47c6@make-violation G47c6@make-violation) (set! G49ef@G47c4@p? G47c4@p?) (set! G49ee@G47c1@G47b9 G47c1@G47b9) (set! G49ed@G47bf@G47ba G47bf@G47ba) (set! G49ec@G47bd@G47b8 G47bd@G47b8) (set! G49eb@G47b7@&error-rcd G47b7@&error-rcd) (set! G49ea@G47b5@&error-rtd G47b5@&error-rtd) (set! G49e9@G47b3@error? G47b3@error?) (set! G49e8@G47b1@make-error G47b1@make-error) (set! G49e7@G47af@p? G47af@p?) (set! G49e6@G47ac@G47a4 G47ac@G47a4) (set! G49e5@G47aa@G47a5 G47aa@G47a5) (set! G49e4@G47a8@G47a3 G47a8@G47a3) (set! G49e3@G47a2@&serious-rcd G47a2@&serious-rcd) (set! G49e2@G47a0@&serious-rtd G47a0@&serious-rtd) (set! G49e1@G479e@serious-condition? G479e@serious-condition?) (set! G49e0@G479c@make-serious-condition G479c@make-serious-condition) (set! G49df@G479a@p? G479a@p?) (set! G49de@G4797@G478f G4797@G478f) (set! G49dd@G4795@G4790 G4795@G4790) (set! G49dc@G4793@G478e G4793@G478e) (set! G49db@G478d@&warning-rcd G478d@&warning-rcd) (set! G49da@G478b@&warning-rtd G478b@&warning-rtd) (set! G49d9@G4789@warning? G4789@warning?) (set! G49d8@G4787@make-warning G4787@make-warning) (set! G49d7@G4785@p? G4785@p?) (set! G49d6@G4782@G477a G4782@G477a) (set! G49d5@G4780@G477b G4780@G477b) (set! G49d4@G477e@G4779 G477e@G4779) (set! G49d3@G4778@&message-rcd G4778@&message-rcd) (set! G49d2@G4776@&message-rtd G4776@&message-rtd) (set! G49d1@G4774@condition-message G4774@condition-message) (set! G49d0@G4772@message-condition? G4772@message-condition?) (set! G49cf@G4770@G475f G4770@G475f) (set! G49ce@G476e@make-message-condition G476e@make-message-condition) (set! G49cd@G476c@p? G476c@p?) (set! G49cc@G4769@G4761 G4769@G4761) (set! G49cb@G4767@G4762 G4767@G4762) (set! G49ca@G4765@G4760 G4765@G4760) (set! G49c9@G471d@&condition-rcd G471d@&condition-rcd) (set! G49c8@G471b@&condition-rtd G471b@&condition-rtd) (set! G49c7@G4719@make-&condition G4719@make-&condition) (set! G49c6@G4717@&condition? G4717@&condition?) (set! G49c5@G4714@G470c G4714@G470c) (set! G49c4@G4712@G470d G4712@G470d) (set! G49c3@G4710@G470b G4710@G470b)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2741@G26f6@current-primitive-locations (lambda (G4e70@x) ((lambda (G4e72@t) (if G4e72@t (cdr G4e72@t) '#f)) (assq G4e70@x '((&no-nans-rcd . G4ab3@G49c2@&no-nans-rcd) (&no-nans-rtd . G4ab2@G49c0@&no-nans-rtd) (&no-infinities-rcd . G4aab@G49ad@&no-infinities-rcd) (&no-infinities-rtd . G4aaa@G49ab@&no-infinities-rtd) (&i/o-encoding-rcd . G4aa3@G4998@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4aa2@G4996@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4a99@G497e@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4a98@G497c@&i/o-decoding-rtd) (&i/o-port-rcd . G4a91@G4969@&i/o-port-rcd) (&i/o-port-rtd . G4a90@G4967@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4a87@G494f@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4a86@G494d@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4a7f@G493a@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4a7e@G4938@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4a77@G4925@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4a76@G4923@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4a6f@G4910@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4a6e@G490e@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4a67@G48fb@&i/o-filename-rcd) (&i/o-filename-rtd . G4a66@G48f9@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4a5d@G48e1@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4a5c@G48df@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4a53@G48c7@&i/o-write-rcd) (&i/o-write-rtd . G4a52@G48c5@&i/o-write-rtd) (&i/o-read-rcd . G4a4b@G48b2@&i/o-read-rcd) (&i/o-read-rtd . G4a4a@G48b0@&i/o-read-rtd) (&i/o-rcd . G4a43@G489d@&i/o-rcd) (&i/o-rtd . G4a42@G489b@&i/o-rtd) (&undefined-rcd . G4a3b@G4888@&undefined-rcd) (&undefined-rtd . G4a3a@G4886@&undefined-rtd) (&syntax-rcd . G4a33@G4873@&syntax-rcd) (&syntax-rtd . G4a32@G4871@&syntax-rtd) (&lexical-rcd . G4a27@G4854@&lexical-rcd) (&lexical-rtd . G4a26@G4852@&lexical-rtd) (&implementation-restriction-rcd . G4a1f@G483f@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4a1e@G483d@&implementation-restriction-rtd) (&non-continuable-rcd . G4a17@G482a@&non-continuable-rcd) (&non-continuable-rtd . G4a16@G4828@&non-continuable-rtd) (&who-rcd . G4a0f@G4815@&who-rcd) (&who-rtd . G4a0e@G4813@&who-rtd) (&irritants-rcd . G4a05@G47fb@&irritants-rcd) (&irritants-rtd . G4a04@G47f9@&irritants-rtd) (&assertion-rcd . G49fb@G47e1@&assertion-rcd) (&assertion-rtd . G49fa@G47df@&assertion-rtd) (&violation-rcd . G49f3@G47cc@&violation-rcd) (&violation-rtd . G49f2@G47ca@&violation-rtd) (&error-rcd . G49eb@G47b7@&error-rcd) (&error-rtd . G49ea@G47b5@&error-rtd) (&serious-rcd . G49e3@G47a2@&serious-rcd) (&serious-rtd . G49e2@G47a0@&serious-rtd) (&warning-rcd . G49db@G478d@&warning-rcd) (&warning-rtd . G49da@G478b@&warning-rtd) (&message-rcd . G49d3@G4778@&message-rcd) (&message-rtd . G49d2@G4776@&message-rtd) (&condition-rcd . G49c9@G471d@&condition-rcd) (&condition-rtd . G49c8@G471b@&condition-rtd) (syntax-error . G46fd@G2e14@syntax-error) (syntax-dispatch . G4691@G2d2d@syntax-dispatch) (load . G4b85@G4ac9@load) (interaction-environment . G4705@G2e24@interaction-environment) (library-path . G2952@G27e7@library-path) (make-parameter . G26f0@G261e@make-parameter) (make-variable-transformer . G464f@G2b74@make-variable-transformer) (identifier? . G4700@G2e1a@identifier?) (generate-temporaries . G46f6@G2e06@generate-temporaries) (free-identifier=? . G46f7@G2e08@free-identifier=?) (syntax->datum . G4702@G2e1e@syntax->datum) (datum->syntax . G4701@G2e1c@datum->syntax) (bound-identifier=? . G46f8@G2e0a@bound-identifier=?) (make-i/o-write-error . G4a50@G48c1@make-i/o-write-error) (make-i/o-read-error . G4a48@G48ac@make-i/o-read-error) (make-i/o-port-error . G4a8c@G495f@make-i/o-port-error) (make-i/o-invalid-position-error . G4a58@G48d7@make-i/o-invalid-position-error) (make-i/o-filename-error . G4a62@G48f1@make-i/o-filename-error) (make-i/o-file-protection-error . G4a6c@G490a@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4a74@G491f@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4a84@G4949@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4a7c@G4934@make-i/o-file-already-exists-error) (make-i/o-error . G4a40@G4897@make-i/o-error) (make-i/o-encoding-error . G4a9e@G498e@make-i/o-encoding-error) (make-i/o-decoding-error . G4a96@G4978@make-i/o-decoding-error) (i/o-write-error? . G4a51@G48c3@i/o-write-error?) (i/o-read-error? . G4a49@G48ae@i/o-read-error?) (i/o-port-error? . G4a8e@G4963@i/o-port-error?) (i/o-invalid-position-error? . G4a5a@G48db@i/o-invalid-position-error?) (i/o-filename-error? . G4a64@G48f5@i/o-filename-error?) (i/o-file-protection-error? . G4a6d@G490c@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4a75@G4921@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4a85@G494b@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4a7d@G4936@i/o-file-already-exists-error?) (i/o-error? . G4a41@G4899@i/o-error?) (i/o-error-position . G4a5b@G48dd@i/o-error-position) (i/o-error-port . G4a8f@G4965@i/o-error-port) (i/o-error-filename . G4a65@G48f7@i/o-error-filename) (i/o-encoding-error? . G4aa0@G4992@i/o-encoding-error?) (i/o-encoding-error-char . G4aa1@G4994@i/o-encoding-error-char) (i/o-decoding-error? . G4a97@G497a@i/o-decoding-error?) (scheme-report-environment . G46ed@G2df4@scheme-report-environment) (null-environment . G46ec@G2df2@null-environment) (command-line . G4b82@G4ac3@command-line) (eval . G46ef@G2df8@eval) (environment . G46eb@G2df0@environment) (who-condition? . G4a0c@G480f@who-condition?) (warning? . G49d9@G4789@warning?) (violation? . G49f1@G47c8@violation?) (undefined-violation? . G4a39@G4884@undefined-violation?) (syntax-violation? . G4a2f@G486b@syntax-violation?) (syntax-violation-subform . G4a31@G486f@syntax-violation-subform) (syntax-violation-form . G4a30@G486d@syntax-violation-form) (syntax-violation . G46ff@G2e18@syntax-violation) (serious-condition? . G49e1@G479e@serious-condition?) (non-continuable-violation? . G4a15@G4826@non-continuable-violation?) (message-condition? . G49d0@G4772@message-condition?) (make-who-condition . G4a0a@G480b@make-who-condition) (make-warning . G49d8@G4787@make-warning) (make-violation . G49f0@G47c6@make-violation) (make-undefined-violation . G4a38@G4882@make-undefined-violation) (make-syntax-violation . G4a2c@G4865@make-syntax-violation) (make-serious-condition . G49e0@G479c@make-serious-condition) (make-non-continuable-violation . G4a14@G4824@make-non-continuable-violation) (make-message-condition . G49ce@G476e@make-message-condition) (make-lexical-violation . G4a24@G484e@make-lexical-violation) (make-irritants-condition . G4a00@G47f1@make-irritants-condition) (make-implementation-restriction-violation . G4a1c@G4839@make-implementation-restriction-violation) (make-error . G49e8@G47b1@make-error) (make-assertion-violation . G49f8@G47db@make-assertion-violation) (lexical-violation? . G4a25@G4850@lexical-violation?) (irritants-condition? . G4a02@G47f5@irritants-condition?) (implementation-restriction-violation? . G4a1d@G483b@implementation-restriction-violation?) (error? . G49e9@G47b3@error?) (condition-who . G4a0d@G4811@condition-who) (condition-message . G49d1@G4774@condition-message) (condition-irritants . G4a03@G47f7@condition-irritants) (assertion-violation? . G49f9@G47dd@assertion-violation?) (no-nans-violation? . G4ab1@G49be@no-nans-violation?) (no-infinities-violation? . G4aa9@G49a9@no-infinities-violation?) (make-no-nans-violation . G4ab0@G49bc@make-no-nans-violation) (make-no-infinities-violation . G4aa8@G49a7@make-no-infinities-violation)))))) (G2962@G2807@install-library 'G4e4d '(mosh interaction) '() '() '() '() '((alist->eq-hash-table . G4e42) (format . G4e3f) (string-split . G4e34) (call-process . G4e2e) (set-current-directory! . G4e2a) (expand-path . G4e29) (current-directory . G4e28) (%spawn . G4e27) (%waitpid . G4e26) (%ffi-supported? . G4e25) (%ffi-pointer-ref . G4e24) (%ffi-pointer->string . G4e23) (%ffi-call->string-or-zero . G4e22) (%ffi-call->double . G4e21) (%ffi-call->void* . G4e20) (%ffi-call->void . G4e1f) (%ffi-call->int . G4e1e) (%ffi-lookup . G4e1d) (%ffi-open . G4e1c) (%fork . G4e1b) (%pipe . G4e1a) (p . G4e19) (string-upcase . G4e0b) (string-titlecase . G4e0a) (string-normalize-nfkd . G4e09) (string-normalize-nfkc . G4e08) (string-normalize-nfd . G4e07) (string-normalize-nfc . G4e06) (string-foldcase . G4e05) (string-downcase . G4e04) (string-ci>? . G4e03) (string-ci>=? . G4e02) (string-ci=? . G4e01) (string-ci<? . G4e00) (string-ci<=? . G4dff) (char-whitespace? . G4dfe) (char-upper-case? . G4dfd) (char-title-case? . G4dfc) (char-numeric? . G4dfb) (char-lower-case? . G4dfa) (char-general-category . G4df9) (char-upcase . G4df8) (char-titlecase . G4df7) (char-foldcase . G4df6) (char-downcase . G4df5) (char-ci>? . G4df4) (char-ci>=? . G4df3) (char-ci=? . G4df2) (char-ci<? . G4df1) (char-ci<=? . G4df0) (char-alphabetic? . G4def) (make-variable-transformer . G2b73) (identifier? . G2e19) (generate-temporaries . G2e05) (free-identifier=? . G2e07) (syntax->datum . G2e1d) (datum->syntax . G2e1b) (bound-identifier=? . G2e09) (record-type-descriptor? . G4dee) (record-predicate . G4ded) (record-mutator . G4dec) (record-constructor . G4deb) (record-accessor . G4dea) (make-record-type-descriptor . G4de9) (make-record-constructor-descriptor . G4de8) (record? . G4de7) (record-type-uid . G4de6) (record-type-sealed? . G4de5) (record-type-parent . G4de4) (record-type-opaque? . G4de3) (record-type-name . G4de2) (record-type-generative? . G4de1) (record-type-field-names . G4de0) (record-rtd . G4ddf) (record-field-mutable? . G4dde) (delete-file . G4ddd) (file-exists? . G4ddc) (vector-sort! . G4ddb) (vector-sort . G4dda) (list-sort . G4dd9) (symbol-hash . G4dd8) (string-ci-hash . G4dd7) (string-hash . G4dd6) (equal-hash . G4dd5) (hashtable-equivalence-function . G4dd4) (make-hashtable . G4dd3) (hashtable-hash-function . G4dd2) (make-eqv-hashtable . G4dd1) (make-eq-hashtable . G4dd0) (hashtable? . G4dcf) (hashtable-update! . G4dce) (hashtable-size . G4dcd) (hashtable-set! . G4dcc) (hashtable-ref . G4dcb) (hashtable-mutable? . G4dca) (hashtable-keys . G4dc9) (hashtable-entries . G4dc8) (hashtable-delete! . G4dc7) (hashtable-copy . G4dc6) (hashtable-contains? . G4dc5) (hashtable-clear! . G4dc4) (call-with-output-file . G4dc3) (call-with-input-file . G4dc2) (write-char . G4dc1) (write . G4dc0) (with-output-to-file . G4dbf) (with-input-from-file . G4dbe) (read-char . G4dbd) (read . G4dbc) (peek-char . G4dbb) (open-output-file . G4dba) (open-input-file . G4db9) (newline . G4db8) (display . G4db7) (close-output-port . G4db6) (close-input-port . G4db5) (eof-object? . G4db4) (eof-object . G4db3) (current-error-port . G4db2) (current-output-port . G4db1) (current-input-port . G4db0) (output-port? . G4daf) (input-port? . G4dae) (utf-8-codec . G4dad) (utf-16-codec . G4dac) (transcoder-error-handling-mode . G4dab) (transcoder-eol-style . G4daa) (transcoder-codec . G4da9) (transcoded-port . G4da8) (textual-port? . G4da7) (string->bytevector . G4da6) (standard-output-port . G4da5) (standard-input-port . G4da4) (standard-error-port . G4da3) (set-port-position! . G4da2) (put-u8 . G4da1) (put-string . G4da0) (put-datum . G4d9f) (put-char . G4d9e) (put-bytevector . G4d9d) (port? . G4d9c) (port-transcoder . G4d9b) (port-position . G4d9a) (port-has-set-port-position!? . G4d99) (port-has-port-position? . G4d98) (port-eof? . G4d97) (output-port-buffer-mode . G4d96) (open-string-output-port . G4d95) (open-string-input-port . G4d94) (open-file-output-port . G4d93) (open-file-input/output-port . G4d92) (open-file-input-port . G4d91) (open-bytevector-output-port . G4d90) (open-bytevector-input-port . G4d8f) (native-transcoder . G4d8e) (native-eol-style . G4d8d) (make-transcoder . G4d8c) (latin-1-codec . G4d8b) (make-i/o-write-error . G48c0) (make-i/o-read-error . G48ab) (make-i/o-port-error . G495e) (make-i/o-invalid-position-error . G48d6) (make-i/o-filename-error . G48f0) (make-i/o-file-protection-error . G4909) (make-i/o-file-is-read-only-error . G491e) (make-i/o-file-does-not-exist-error . G4948) (make-i/o-file-already-exists-error . G4933) (make-i/o-error . G4896) (make-i/o-encoding-error . G498d) (make-i/o-decoding-error . G4977) (make-custom-textual-output-port . G4d8a) (make-custom-textual-input/output-port . G4d89) (make-custom-textual-input-port . G4d88) (make-custom-binary-output-port . G4d87) (make-custom-binary-input/output-port . G4d86) (make-custom-binary-input-port . G4d85) (make-bytevector . G4d84) (lookahead-u8 . G4d83) (lookahead-char . G4d82) (i/o-write-error? . G48c2) (i/o-read-error? . G48ad) (i/o-port-error? . G4962) (i/o-invalid-position-error? . G48da) (i/o-filename-error? . G48f4) (i/o-file-protection-error? . G490b) (i/o-file-is-read-only-error? . G4920) (i/o-file-does-not-exist-error? . G494a) (i/o-file-already-exists-error? . G4935) (i/o-error? . G4898) (i/o-error-position . G48dc) (i/o-error-port . G4964) (i/o-error-filename . G48f6) (i/o-encoding-error? . G4991) (i/o-encoding-error-char . G4993) (i/o-decoding-error? . G4979) (get-u8 . G4d81) (get-string-n! . G4d80) (get-string-n . G4d7f) (get-string-all . G4d7e) (get-line . G4d7d) (get-datum . G4d7c) (get-char . G4d7b) (get-bytevector-some . G4d7a) (get-bytevector-n! . G4d79) (get-bytevector-n . G4d78) (get-bytevector-all . G4d77) (flush-output-port . G4d76) (close-port . G4d75) (exit . G4d6d) (command-line . G4ac2) (string-fill! . G4d6c) (string-set! . G4d6b) (set-cdr! . G4d6a) (set-car! . G4d69) (remove . G4d68) (remv . G4d67) (remp . G4d66) (remq . G4d65) (partition . G4d64) (memv . G4d63) (memq . G4d62) (memp . G4d61) (member . G4d60) (exists . G4d5f) (for-all . G4d5e) (fold-right . G4d5d) (fold-left . G4d5c) (find . G4d5b) (filter . G4d5a) (cons* . G4d59) (assv . G4d58) (assq . G4d57) (assp . G4d56) (assoc . G4d55) (call-with-string-output-port . G4d54) (call-with-port . G4d53) (call-with-bytevector-output-port . G4d52) (bytevector->string . G4d51) (buffer-mode? . G4d50) (binary-port? . G4d4f) (with-exception-handler . G4d4e) (raise-continuable . G4d4d) (raise . G4d4c) (eval . G2df7) (environment . G2def) (make-enumeration . G4d4b) (enum-set=? . G4d4a) (enum-set-universe . G4d49) (enum-set-union . G4d48) (enum-set-subset? . G4d47) (enum-set-projection . G4d46) (enum-set-member? . G4d45) (enum-set-intersection . G4d44) (enum-set-indexer . G4d43) (enum-set-difference . G4d42) (enum-set-constructor . G4d41) (enum-set-complement . G4d40) (enum-set->list . G4d3f) (who-condition? . G480e) (warning? . G4788) (violation? . G47c7) (undefined-violation? . G4883) (syntax-violation? . G486a) (syntax-violation-subform . G486e) (syntax-violation-form . G486c) (syntax-violation . G2e17) (simple-conditions . G4d3e) (serious-condition? . G479d) (non-continuable-violation? . G4825) (message-condition? . G4771) (make-who-condition . G480a) (make-warning . G4786) (make-violation . G47c5) (make-undefined-violation . G4881) (make-syntax-violation . G4864) (make-serious-condition . G479b) (make-non-continuable-violation . G4823) (make-message-condition . G476d) (make-lexical-violation . G484d) (make-irritants-condition . G47f0) (make-implementation-restriction-violation . G4838) (make-error . G47b0) (make-assertion-violation . G47da) (lexical-violation? . G484f) (irritants-condition? . G47f4) (implementation-restriction-violation? . G483a) (error? . G47b2) (condition-who . G4810) (condition-predicate . G4d3d) (condition-message . G4773) (condition-irritants . G47f6) (condition-accessor . G4d3c) (condition . G4d3b) (assertion-violation? . G47dc) (condition? . G4d3a) (utf32->string . G4d39) (utf16->string . G4d38) (utf8->string . G4d37) (uint-list->bytevector . G4d36) (u8-list->bytevector . G4d35) (string->utf8 . G4d34) (string->utf32 . G4d33) (string->utf16 . G4d32) (sint-list->bytevector . G4d31) (native-endianness . G4d30) (bytevector? . G4d2f) (bytevector=? . G4d2e) (bytevector-uint-set! . G4d2d) (bytevector-uint-ref . G4d2c) (bytevector-u8-set! . G4d2b) (bytevector-u8-ref . G4d2a) (bytevector-u64-set! . G4d29) (bytevector-u64-ref . G4d28) (bytevector-u64-native-set! . G4d27) (bytevector-u64-native-ref . G4d26) (bytevector-u32-set! . G4d25) (bytevector-u32-ref . G4d24) (bytevector-u32-native-set! . G4d23) (bytevector-u32-native-ref . G4d22) (bytevector-u16-set! . G4d21) (bytevector-u16-ref . G4d20) (bytevector-u16-native-set! . G4d1f) (bytevector-u16-native-ref . G4d1e) (bytevector-sint-set! . G4d1d) (bytevector-sint-ref . G4d1c) (bytevector-s8-set! . G4d1b) (bytevector-s8-ref . G4d1a) (bytevector-s64-set! . G4d19) (bytevector-s64-ref . G4d18) (bytevector-s64-native-set! . G4d17) (bytevector-s64-native-ref . G4d16) (bytevector-s32-set! . G4d15) (bytevector-s32-ref . G4d14) (bytevector-s32-native-set! . G4d13) (bytevector-s32-native-ref . G4d12) (bytevector-s16-set! . G4d11) (bytevector-s16-ref . G4d10) (bytevector-s16-native-set! . G4d0f) (bytevector-s16-native-ref . G4d0e) (bytevector-length . G4d0d) (bytevector-ieee-single-ref . G4d0c) (bytevector-ieee-single-set! . G4d0b) (bytevector-ieee-single-native-set! . G4d0a) (bytevector-ieee-single-native-ref . G4d09) (bytevector-ieee-double-set! . G4d08) (bytevector-ieee-double-ref . G4d07) (bytevector-ieee-double-native-set! . G4d06) (bytevector-ieee-double-native-ref . G4d05) (bytevector-fill! . G4d04) (bytevector-copy! . G4d03) (bytevector-copy . G4d02) (bytevector->uint-list . G4d01) (bytevector->u8-list . G4d00) (bytevector->sint-list . G4cff) (no-nans-violation? . G49bd) (no-infinities-violation? . G49a8) (make-no-nans-violation . G49bb) (make-no-infinities-violation . G49a6) (real->flonum . G4cfe) (flzero? . G4cfd) (fltruncate . G4cfc) (fltan . G4cfb) (flsqrt . G4cfa) (flsin . G4cf9) (flround . G4cf8) (flpositive? . G4cf7) (flonum? . G4cf6) (flodd? . G4cf5) (flnumerator . G4cf4) (flnegative? . G4cf3) (flnan? . G4cf2) (flmod0 . G4cf1) (flmod . G4cf0) (flmin . G4cef) (flmax . G4cee) (fllog . G4ced) (flinteger? . G4cec) (flinfinite? . G4ceb) (flfloor . G4cea) (flfinite? . G4ce9) (flexpt . G4ce8) (flexp . G4ce7) (fleven? . G4ce6) (fldiv0-and-mod0 . G4ce5) (fldiv0 . G4ce4) (fldiv-and-mod . G4ce3) (fldiv . G4ce2) (fldenominator . G4ce1) (flcos . G4ce0) (flceiling . G4cdf) (flatan . G4cde) (flasin . G4cdd) (flacos . G4cdc) (flabs . G4cdb) (fl>? . G4cda) (fl>=? . G4cd9) (fl=? . G4cd8) (fl<? . G4cd7) (fl<=? . G4cd6) (fl/ . G4cd5) (fl- . G4cd4) (fl+ . G4cd3) (fl* . G4cd2) (fixnum->flonum . G4cd1) (fxzero? . G4cd0) (fxxor . G4ccf) (fxrotate-bit-field . G4cce) (fxreverse-bit-field . G4ccd) (fxpositive? . G4ccc) (fxodd? . G4ccb) (fxnot . G4cca) (fxnegative? . G4cc9) (fxmod0 . G4cc8) (fxmod . G4cc7) (fxmin . G4cc6) (fxmax . G4cc5) (fxlength . G4cc4) (fxior . G4cc3) (fxif . G4cc2) (fxfirst-bit-set . G4cc1) (fxeven? . G4cc0) (fxdiv0-and-mod0 . G4cbf) (fxdiv0 . G4cbe) (fxdiv-and-mod . G4cbd) (fxdiv . G4cbc) (fxcopy-bit-field . G4cbb) (fxcopy-bit . G4cba) (fxbit-set? . G4cb9) (fxbit-field . G4cb8) (fxbit-count . G4cb7) (fxarithmetic-shift-right . G4cb6) (fxarithmetic-shift-left . G4cb5) (fxarithmetic-shift . G4cb4) (fxand . G4cb3) (fx>? . G4cb2) (fx>=? . G4cb1) (fx=? . G4cb0) (fx<? . G4caf) (fx<=? . G4cae) (fx-/carry . G4cad) (fx- . G4cac) (fx+/carry . G4cab) (fx+ . G4caa) (fx*/carry . G4ca9) (fx* . G4ca8) (greatest-fixnum . G4ca7) (least-fixnum . G4ca6) (fixnum-width . G4ca5) (fixnum? . G4ca4) (bitwise-rotate-bit-field . G4ca3) (bitwise-reverse-bit-field . G4ca2) (bitwise-length . G4ca1) (bitwise-if . G4ca0) (bitwise-first-bit-set . G4c9f) (bitwise-copy-bit-field . G4c9e) (bitwise-copy-bit . G4c9d) (bitwise-bit-set? . G4c9c) (bitwise-bit-field . G4c9b) (bitwise-bit-count . G4c9a) (bitwise-xor . G4c99) (bitwise-ior . G4c98) (bitwise-and . G4c97) (bitwise-not . G4c96) (bitwise-arithmetic-shift-right . G4c95) (bitwise-arithmetic-shift-left . G4c94) (bitwise-arithmetic-shift . G4c93) (zero? . G4c92) (vector? . G4c91) (vector-set! . G4c90) (vector-ref . G4c8f) (vector-map . G4c8e) (vector-length . G4c8d) (vector-for-each . G4c8c) (vector-fill! . G4c8b) (vector->list . G4c8a) (vector . G4c89) (values . G4c88) (truncate . G4c87) (tan . G4c86) (symbol? . G4c85) (symbol=? . G4c84) (symbol->string . G4c83) (substring . G4c82) (string? . G4c81) (string>? . G4c80) (string>=? . G4c7f) (string=? . G4c7e) (string<? . G4c7d) (string<=? . G4c7c) (string-ref . G4c7b) (string-length . G4c7a) (string-for-each . G4c79) (string-copy . G4c78) (string-append . G4c77) (string->symbol . G4c76) (string->number . G4c75) (string->list . G4c74) (string . G4c73) (sqrt . G4c72) (sin . G4c71) (round . G4c70) (reverse . G4c6f) (real? . G4c6e) (real-valued? . G4c6d) (real-part . G4c6c) (rationalize . G4c6b) (rational? . G4c6a) (rational-valued? . G4c69) (procedure? . G4c68) (positive? . G4c67) (pair? . G4c66) (odd? . G4c65) (numerator . G4c64) (number? . G4c63) (number->string . G4c62) (null? . G4c61) (not . G4c60) (negative? . G4c5f) (nan? . G4c5e) (min . G4c5d) (max . G4c5c) (map . G4c5b) (make-vector . G4c5a) (make-string . G4c59) (make-rectangular . G4c58) (make-polar . G4c57) (magnitude . G4c56) (log . G4c55) (list? . G4c54) (list-tail . G4c53) (list-ref . G4c52) (list->vector . G4c51) (list->string . G4c50) (list . G4c4f) (length . G4c4e) (lcm . G4c4d) (integer? . G4c4c) (integer-valued? . G4c4b) (integer->char . G4c4a) (infinite? . G4c49) (inexact? . G4c48) (inexact . G4c47) (imag-part . G4c46) (gcd . G4c45) (for-each . G4c44) (floor . G4c43) (finite? . G4c42) (expt . G4c41) (exp . G4c40) (exact? . G4c3f) (exact-integer-sqrt . G4c3e) (exact . G4c3d) (even? . G4c3c) (error . G4c3b) (eqv? . G4c3a) (equal? . G4c39) (eq? . G4c38) (dynamic-wind . G4c37) (div0-and-mod0 . G4c36) (mod0 . G4c35) (div0 . G4c34) (div-and-mod . G4c33) (mod . G4c32) (div . G4c31) (denominator . G4c30) (cos . G4c2f) (cons . G4c2e) (complex? . G4c2d) (char? . G4c2c) (char>? . G4c2b) (char>=? . G4c2a) (char=? . G4c29) (char<? . G4c28) (char<=? . G4c27) (char->integer . G4c26) (ceiling . G4c25) (call-with-values . G4c24) (call/cc . G4c23) (call-with-current-continuation . G4c22) (cddddr . G4c21) (cdddar . G4c20) (cddadr . G4c1f) (cddaar . G4c1e) (cdaddr . G4c1d) (cdadar . G4c1c) (cdaadr . G4c1b) (cdaaar . G4c1a) (cadddr . G4c19) (caddar . G4c18) (cadadr . G4c17) (cadaar . G4c16) (caaddr . G4c15) (caadar . G4c14) (caaadr . G4c13) (caaaar . G4c12) (cdddr . G4c11) (cddar . G4c10) (cdadr . G4c0f) (cdaar . G4c0e) (caddr . G4c0d) (cadar . G4c0c) (caadr . G4c0b) (caaar . G4c0a) (cddr . G4c09) (cdar . G4c08) (cadr . G4c07) (caar . G4c06) (cdr . G4c05) (car . G4c04) (boolean? . G4c03) (boolean=? . G4c02) (atan . G4c01) (assertion-violation . G4c00) (asin . G4bff) (apply . G4bfe) (append . G4bfd) (angle . G4bfc) (acos . G4bfb) (abs . G4bfa) (/ . G4bf9) (* . G4bf8) (- . G4bf7) (+ . G4bf6) (>= . G4bf5) (> . G4bf4) (= . G4bf3) (<= . G4bf2) (< . G4bf1) (library . G4bf0) (&no-nans . G4bef) (&no-infinities . G4bee) (&i/o-encoding . G4bed) (&i/o-decoding . G4bec) (&i/o-port . G4beb) (&i/o-file-does-not-exist . G4bea) (&i/o-file-already-exists . G4be9) (&i/o-file-is-read-only . G4be8) (&i/o-file-protection . G4be7) (&i/o-filename . G4be6) (&i/o-invalid-position . G4be5) (&i/o-write . G4be4) (&i/o-read . G4be3) (&i/o . G4be2) (&undefined . G4be1) (&syntax . G4be0) (&lexical . G4bdf) (&implementation-restriction . G4bde) (&non-continuable . G4bdd) (&who . G4bdc) (&irritants . G4bdb) (&assertion . G4bda) (&violation . G4bd9) (&error . G4bd8) (&serious . G4bd7) (&warning . G4bd6) (&message . G4bd5) (&condition . G4bd4) (define-condition-type . G4bd3) (define-enumeration . G4bd2) (define-record-type . G4bd1) (parent-rtd . G4bd0) (nongenerative . G4bcf) (opaque . G4bce) (sealed . G4bcd) (protocol . G4bcc) (parent . G4bcb) (immutable . G4bca) (mutable . G4bc9) (fields . G4bc8) (error-handling-mode . G4bc7) (file-options . G4bc6) (buffer-mode . G4bc5) (eol-style . G4bc4) (guard . G4bc3) (unsyntax-splicing . G4bc0) (unsyntax . G4bbf) (unquote-splicing . G4bbe) (unquote . G4bbd) (_ . G4bbc) (else . G4bbb) (=> . G4bba) (... . G4bb9) (assert . G4bb8) (endianness . G4bb7) (do . G4bb4) (cond . G4bb3) (let* . G4bb2) (let . G4bb1) (let*-values . G4bb0) (let-values . G4baf) (identifier-syntax . G4bae) (with-syntax . G4bad) (quasisyntax . G4bac) (quasiquote . G4bab) (syntax-rules . G4baa) (include . G4ba9) (record-constructor-descriptor . G4ba7) (record-type-descriptor . G4ba6) (case . G4ba5) (unless . G4ba3) (when . G4ba2) (or . G4ba1) (and . G4ba0) (if . G4b9f) (letrec* . G4b9e) (letrec . G4b9d) (case-lambda . G4b9b) (lambda . G4b9a) (syntax . G4b99) (syntax-case . G4b98) (quote . G4b97) (letrec-syntax . G4b95) (let-syntax . G4b94) (set! . G4b93) (import . G4b92) (begin . G4b91) (define-syntax . G4b8f) (define . G4b8e)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e4e '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4d6e) (unquote-splicing . G4bbe) (unquote . G4bbd) (_ . G4bbc) (else . G4bbb) (=> . G4bba) (... . G4bb9) (delay . G4bb6) (do . G4bb4) (cond . G4bb3) (let* . G4bb2) (let . G4bb1) (quasiquote . G4bab) (syntax-rules . G4baa) (case . G4ba5) (or . G4ba1) (and . G4ba0) (if . G4b9f) (letrec . G4b9d) (lambda . G4b9a) (quote . G4b97) (letrec-syntax . G4b95) (let-syntax . G4b94) (set! . G4b93) (begin . G4b91) (define-syntax . G4b8f) (define . G4b8e)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e4f '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4e03) (string-ci>=? . G4e02) (string-ci=? . G4e01) (string-ci<? . G4e00) (string-ci<=? . G4dff) (char-whitespace? . G4dfe) (char-upper-case? . G4dfd) (char-numeric? . G4dfb) (char-lower-case? . G4dfa) (char-upcase . G4df8) (char-downcase . G4df5) (char-ci>? . G4df4) (char-ci>=? . G4df3) (char-ci=? . G4df2) (char-ci<? . G4df1) (char-ci<=? . G4df0) (char-alphabetic? . G4def) (call-with-output-file . G4dc3) (call-with-input-file . G4dc2) (write-char . G4dc1) (write . G4dc0) (with-output-to-file . G4dbf) (with-input-from-file . G4dbe) (read-char . G4dbd) (read . G4dbc) (peek-char . G4dbb) (open-output-file . G4dba) (open-input-file . G4db9) (newline . G4db8) (display . G4db7) (close-output-port . G4db6) (close-input-port . G4db5) (eof-object . G4db3) (current-output-port . G4db1) (current-input-port . G4db0) (output-port? . G4daf) (input-port? . G4dae) (scheme-report-environment . G2df3) (quotient . G4d74) (null-environment . G2df1) (remainder . G4d73) (modulo . G4d72) (inexact->exact . G4d71) (force . G4d70) (exact->inexact . G4d6f) (make-promise . G4d6e) (string-fill! . G4d6c) (string-set! . G4d6b) (set-cdr! . G4d6a) (set-car! . G4d69) (memv . G4d63) (memq . G4d62) (member . G4d60) (assv . G4d58) (assq . G4d57) (assoc . G4d55) (eval . G2df7) (zero? . G4c92) (vector? . G4c91) (vector-set! . G4c90) (vector-ref . G4c8f) (vector-length . G4c8d) (vector-fill! . G4c8b) (vector->list . G4c8a) (vector . G4c89) (values . G4c88) (truncate . G4c87) (tan . G4c86) (symbol? . G4c85) (symbol->string . G4c83) (substring . G4c82) (string? . G4c81) (string>? . G4c80) (string>=? . G4c7f) (string=? . G4c7e) (string<? . G4c7d) (string<=? . G4c7c) (string-ref . G4c7b) (string-length . G4c7a) (string-copy . G4c78) (string-append . G4c77) (string->symbol . G4c76) (string->number . G4c75) (string->list . G4c74) (string . G4c73) (sqrt . G4c72) (sin . G4c71) (round . G4c70) (reverse . G4c6f) (real? . G4c6e) (real-part . G4c6c) (rationalize . G4c6b) (rational? . G4c6a) (procedure? . G4c68) (positive? . G4c67) (pair? . G4c66) (odd? . G4c65) (numerator . G4c64) (number? . G4c63) (number->string . G4c62) (not . G4c60) (negative? . G4c5f) (min . G4c5d) (max . G4c5c) (map . G4c5b) (make-vector . G4c5a) (make-string . G4c59) (make-rectangular . G4c58) (make-polar . G4c57) (magnitude . G4c56) (log . G4c55) (list? . G4c54) (list-tail . G4c53) (list-ref . G4c52) (list->vector . G4c51) (list->string . G4c50) (list . G4c4f) (length . G4c4e) (lcm . G4c4d) (integer? . G4c4c) (integer->char . G4c4a) (inexact? . G4c48) (imag-part . G4c46) (gcd . G4c45) (for-each . G4c44) (floor . G4c43) (expt . G4c41) (exp . G4c40) (exact? . G4c3f) (even? . G4c3c) (eqv? . G4c3a) (equal? . G4c39) (eq? . G4c38) (dynamic-wind . G4c37) (denominator . G4c30) (cos . G4c2f) (cons . G4c2e) (complex? . G4c2d) (char? . G4c2c) (char>? . G4c2b) (char>=? . G4c2a) (char=? . G4c29) (char<? . G4c28) (char<=? . G4c27) (char->integer . G4c26) (ceiling . G4c25) (call-with-values . G4c24) (call-with-current-continuation . G4c22) (cddddr . G4c21) (cdddar . G4c20) (cddadr . G4c1f) (cddaar . G4c1e) (cdaddr . G4c1d) (cdadar . G4c1c) (cdaadr . G4c1b) (cdaaar . G4c1a) (cadddr . G4c19) (caddar . G4c18) (cadadr . G4c17) (cadaar . G4c16) (caaddr . G4c15) (caadar . G4c14) (caaadr . G4c13) (caaaar . G4c12) (cdddr . G4c11) (cddar . G4c10) (cdadr . G4c0f) (cdaar . G4c0e) (caddr . G4c0d) (cadar . G4c0c) (caadr . G4c0b) (caaar . G4c0a) (cddr . G4c09) (cdar . G4c08) (cadr . G4c07) (caar . G4c06) (cdr . G4c05) (car . G4c04) (boolean? . G4c03) (atan . G4c01) (asin . G4bff) (apply . G4bfe) (append . G4bfd) (angle . G4bfc) (acos . G4bfb) (abs . G4bfa) (/ . G4bf9) (* . G4bf8) (- . G4bf7) (+ . G4bf6) (>= . G4bf5) (> . G4bf4) (= . G4bf3) (<= . G4bf2) (< . G4bf1) (unquote-splicing . G4bbe) (unquote . G4bbd) (else . G4bbb) (=> . G4bba) (... . G4bb9) (delay . G4bb6) (do . G4bb4) (cond . G4bb3) (let* . G4bb2) (let . G4bb1) (quasiquote . G4bab) (syntax-rules . G4baa) (case . G4ba5) (or . G4ba1) (and . G4ba0) (if . G4b9f) (letrec . G4b9d) (lambda . G4b9a) (quote . G4b97) (letrec-syntax . G4b95) (let-syntax . G4b94) (set! . G4b93) (begin . G4b91) (define-syntax . G4b8f) (define . G4b8e)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e50 '(psyntax modules) '() '() '() '() '((module . G4b90)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e51 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e52 '(rnrs) '(6) '() '() '() '((regexp? . G4e45) (string-upcase . G4e0b) (string-titlecase . G4e0a) (string-normalize-nfkd . G4e09) (string-normalize-nfkc . G4e08) (string-normalize-nfd . G4e07) (string-normalize-nfc . G4e06) (string-foldcase . G4e05) (string-downcase . G4e04) (string-ci>? . G4e03) (string-ci>=? . G4e02) (string-ci=? . G4e01) (string-ci<? . G4e00) (string-ci<=? . G4dff) (char-whitespace? . G4dfe) (char-upper-case? . G4dfd) (char-title-case? . G4dfc) (char-numeric? . G4dfb) (char-lower-case? . G4dfa) (char-general-category . G4df9) (char-upcase . G4df8) (char-titlecase . G4df7) (char-foldcase . G4df6) (char-downcase . G4df5) (char-ci>? . G4df4) (char-ci>=? . G4df3) (char-ci=? . G4df2) (char-ci<? . G4df1) (char-ci<=? . G4df0) (char-alphabetic? . G4def) (make-variable-transformer . G2b73) (identifier? . G2e19) (generate-temporaries . G2e05) (free-identifier=? . G2e07) (syntax->datum . G2e1d) (datum->syntax . G2e1b) (bound-identifier=? . G2e09) (record-type-descriptor? . G4dee) (record-predicate . G4ded) (record-mutator . G4dec) (record-constructor . G4deb) (record-accessor . G4dea) (make-record-type-descriptor . G4de9) (make-record-constructor-descriptor . G4de8) (record? . G4de7) (record-type-uid . G4de6) (record-type-sealed? . G4de5) (record-type-parent . G4de4) (record-type-opaque? . G4de3) (record-type-name . G4de2) (record-type-generative? . G4de1) (record-type-field-names . G4de0) (record-rtd . G4ddf) (record-field-mutable? . G4dde) (delete-file . G4ddd) (file-exists? . G4ddc) (vector-sort! . G4ddb) (vector-sort . G4dda) (list-sort . G4dd9) (symbol-hash . G4dd8) (string-ci-hash . G4dd7) (string-hash . G4dd6) (equal-hash . G4dd5) (hashtable-equivalence-function . G4dd4) (make-hashtable . G4dd3) (hashtable-hash-function . G4dd2) (make-eqv-hashtable . G4dd1) (make-eq-hashtable . G4dd0) (hashtable? . G4dcf) (hashtable-update! . G4dce) (hashtable-size . G4dcd) (hashtable-set! . G4dcc) (hashtable-ref . G4dcb) (hashtable-mutable? . G4dca) (hashtable-keys . G4dc9) (hashtable-entries . G4dc8) (hashtable-delete! . G4dc7) (hashtable-copy . G4dc6) (hashtable-contains? . G4dc5) (hashtable-clear! . G4dc4) (call-with-output-file . G4dc3) (call-with-input-file . G4dc2) (write-char . G4dc1) (write . G4dc0) (with-output-to-file . G4dbf) (with-input-from-file . G4dbe) (read-char . G4dbd) (read . G4dbc) (peek-char . G4dbb) (open-output-file . G4dba) (open-input-file . G4db9) (newline . G4db8) (display . G4db7) (close-output-port . G4db6) (close-input-port . G4db5) (eof-object? . G4db4) (eof-object . G4db3) (current-error-port . G4db2) (current-output-port . G4db1) (current-input-port . G4db0) (output-port? . G4daf) (input-port? . G4dae) (utf-8-codec . G4dad) (utf-16-codec . G4dac) (transcoder-error-handling-mode . G4dab) (transcoder-eol-style . G4daa) (transcoder-codec . G4da9) (transcoded-port . G4da8) (textual-port? . G4da7) (string->bytevector . G4da6) (standard-output-port . G4da5) (standard-input-port . G4da4) (standard-error-port . G4da3) (set-port-position! . G4da2) (put-u8 . G4da1) (put-string . G4da0) (put-datum . G4d9f) (put-char . G4d9e) (put-bytevector . G4d9d) (port? . G4d9c) (port-transcoder . G4d9b) (port-position . G4d9a) (port-has-set-port-position!? . G4d99) (port-has-port-position? . G4d98) (port-eof? . G4d97) (output-port-buffer-mode . G4d96) (open-string-output-port . G4d95) (open-string-input-port . G4d94) (open-file-output-port . G4d93) (open-file-input/output-port . G4d92) (open-file-input-port . G4d91) (open-bytevector-output-port . G4d90) (open-bytevector-input-port . G4d8f) (native-transcoder . G4d8e) (native-eol-style . G4d8d) (make-transcoder . G4d8c) (latin-1-codec . G4d8b) (make-i/o-write-error . G48c0) (make-i/o-read-error . G48ab) (make-i/o-port-error . G495e) (make-i/o-invalid-position-error . G48d6) (make-i/o-filename-error . G48f0) (make-i/o-file-protection-error . G4909) (make-i/o-file-is-read-only-error . G491e) (make-i/o-file-does-not-exist-error . G4948) (make-i/o-file-already-exists-error . G4933) (make-i/o-error . G4896) (make-i/o-encoding-error . G498d) (make-i/o-decoding-error . G4977) (make-custom-textual-output-port . G4d8a) (make-custom-textual-input/output-port . G4d89) (make-custom-textual-input-port . G4d88) (make-custom-binary-output-port . G4d87) (make-custom-binary-input/output-port . G4d86) (make-custom-binary-input-port . G4d85) (make-bytevector . G4d84) (lookahead-u8 . G4d83) (lookahead-char . G4d82) (i/o-write-error? . G48c2) (i/o-read-error? . G48ad) (i/o-port-error? . G4962) (i/o-invalid-position-error? . G48da) (i/o-filename-error? . G48f4) (i/o-file-protection-error? . G490b) (i/o-file-is-read-only-error? . G4920) (i/o-file-does-not-exist-error? . G494a) (i/o-file-already-exists-error? . G4935) (i/o-error? . G4898) (i/o-error-position . G48dc) (i/o-error-port . G4964) (i/o-error-filename . G48f6) (i/o-encoding-error? . G4991) (i/o-encoding-error-char . G4993) (i/o-decoding-error? . G4979) (get-u8 . G4d81) (get-string-n! . G4d80) (get-string-n . G4d7f) (get-string-all . G4d7e) (get-line . G4d7d) (get-datum . G4d7c) (get-char . G4d7b) (get-bytevector-some . G4d7a) (get-bytevector-n! . G4d79) (get-bytevector-n . G4d78) (get-bytevector-all . G4d77) (flush-output-port . G4d76) (close-port . G4d75) (exit . G4d6d) (command-line . G4ac2) (remove . G4d68) (remv . G4d67) (remp . G4d66) (remq . G4d65) (partition . G4d64) (memv . G4d63) (memq . G4d62) (memp . G4d61) (member . G4d60) (exists . G4d5f) (for-all . G4d5e) (fold-right . G4d5d) (fold-left . G4d5c) (find . G4d5b) (filter . G4d5a) (cons* . G4d59) (assv . G4d58) (assq . G4d57) (assp . G4d56) (assoc . G4d55) (call-with-string-output-port . G4d54) (call-with-port . G4d53) (call-with-bytevector-output-port . G4d52) (bytevector->string . G4d51) (buffer-mode? . G4d50) (binary-port? . G4d4f) (with-exception-handler . G4d4e) (raise-continuable . G4d4d) (raise . G4d4c) (make-enumeration . G4d4b) (enum-set=? . G4d4a) (enum-set-universe . G4d49) (enum-set-union . G4d48) (enum-set-subset? . G4d47) (enum-set-projection . G4d46) (enum-set-member? . G4d45) (enum-set-intersection . G4d44) (enum-set-indexer . G4d43) (enum-set-difference . G4d42) (enum-set-constructor . G4d41) (enum-set-complement . G4d40) (enum-set->list . G4d3f) (who-condition? . G480e) (warning? . G4788) (violation? . G47c7) (undefined-violation? . G4883) (syntax-violation? . G486a) (syntax-violation-subform . G486e) (syntax-violation-form . G486c) (syntax-violation . G2e17) (simple-conditions . G4d3e) (serious-condition? . G479d) (non-continuable-violation? . G4825) (message-condition? . G4771) (make-who-condition . G480a) (make-warning . G4786) (make-violation . G47c5) (make-undefined-violation . G4881) (make-syntax-violation . G4864) (make-serious-condition . G479b) (make-non-continuable-violation . G4823) (make-message-condition . G476d) (make-lexical-violation . G484d) (make-irritants-condition . G47f0) (make-implementation-restriction-violation . G4838) (make-error . G47b0) (make-assertion-violation . G47da) (lexical-violation? . G484f) (irritants-condition? . G47f4) (implementation-restriction-violation? . G483a) (error? . G47b2) (condition-who . G4810) (condition-predicate . G4d3d) (condition-message . G4773) (condition-irritants . G47f6) (condition-accessor . G4d3c) (condition . G4d3b) (assertion-violation? . G47dc) (condition? . G4d3a) (utf32->string . G4d39) (utf16->string . G4d38) (utf8->string . G4d37) (uint-list->bytevector . G4d36) (u8-list->bytevector . G4d35) (string->utf8 . G4d34) (string->utf32 . G4d33) (string->utf16 . G4d32) (sint-list->bytevector . G4d31) (native-endianness . G4d30) (bytevector? . G4d2f) (bytevector=? . G4d2e) (bytevector-uint-set! . G4d2d) (bytevector-uint-ref . G4d2c) (bytevector-u8-set! . G4d2b) (bytevector-u8-ref . G4d2a) (bytevector-u64-set! . G4d29) (bytevector-u64-ref . G4d28) (bytevector-u64-native-set! . G4d27) (bytevector-u64-native-ref . G4d26) (bytevector-u32-set! . G4d25) (bytevector-u32-ref . G4d24) (bytevector-u32-native-set! . G4d23) (bytevector-u32-native-ref . G4d22) (bytevector-u16-set! . G4d21) (bytevector-u16-ref . G4d20) (bytevector-u16-native-set! . G4d1f) (bytevector-u16-native-ref . G4d1e) (bytevector-sint-set! . G4d1d) (bytevector-sint-ref . G4d1c) (bytevector-s8-set! . G4d1b) (bytevector-s8-ref . G4d1a) (bytevector-s64-set! . G4d19) (bytevector-s64-ref . G4d18) (bytevector-s64-native-set! . G4d17) (bytevector-s64-native-ref . G4d16) (bytevector-s32-set! . G4d15) (bytevector-s32-ref . G4d14) (bytevector-s32-native-set! . G4d13) (bytevector-s32-native-ref . G4d12) (bytevector-s16-set! . G4d11) (bytevector-s16-ref . G4d10) (bytevector-s16-native-set! . G4d0f) (bytevector-s16-native-ref . G4d0e) (bytevector-length . G4d0d) (bytevector-ieee-single-ref . G4d0c) (bytevector-ieee-single-set! . G4d0b) (bytevector-ieee-single-native-set! . G4d0a) (bytevector-ieee-single-native-ref . G4d09) (bytevector-ieee-double-set! . G4d08) (bytevector-ieee-double-ref . G4d07) (bytevector-ieee-double-native-set! . G4d06) (bytevector-ieee-double-native-ref . G4d05) (bytevector-fill! . G4d04) (bytevector-copy! . G4d03) (bytevector-copy . G4d02) (bytevector->uint-list . G4d01) (bytevector->u8-list . G4d00) (bytevector->sint-list . G4cff) (no-nans-violation? . G49bd) (no-infinities-violation? . G49a8) (make-no-nans-violation . G49bb) (make-no-infinities-violation . G49a6) (real->flonum . G4cfe) (flzero? . G4cfd) (fltruncate . G4cfc) (fltan . G4cfb) (flsqrt . G4cfa) (flsin . G4cf9) (flround . G4cf8) (flpositive? . G4cf7) (flonum? . G4cf6) (flodd? . G4cf5) (flnumerator . G4cf4) (flnegative? . G4cf3) (flnan? . G4cf2) (flmod0 . G4cf1) (flmod . G4cf0) (flmin . G4cef) (flmax . G4cee) (fllog . G4ced) (flinteger? . G4cec) (flinfinite? . G4ceb) (flfloor . G4cea) (flfinite? . G4ce9) (flexpt . G4ce8) (flexp . G4ce7) (fleven? . G4ce6) (fldiv0-and-mod0 . G4ce5) (fldiv0 . G4ce4) (fldiv-and-mod . G4ce3) (fldiv . G4ce2) (fldenominator . G4ce1) (flcos . G4ce0) (flceiling . G4cdf) (flatan . G4cde) (flasin . G4cdd) (flacos . G4cdc) (flabs . G4cdb) (fl>? . G4cda) (fl>=? . G4cd9) (fl=? . G4cd8) (fl<? . G4cd7) (fl<=? . G4cd6) (fl/ . G4cd5) (fl- . G4cd4) (fl+ . G4cd3) (fl* . G4cd2) (fixnum->flonum . G4cd1) (fxzero? . G4cd0) (fxxor . G4ccf) (fxrotate-bit-field . G4cce) (fxreverse-bit-field . G4ccd) (fxpositive? . G4ccc) (fxodd? . G4ccb) (fxnot . G4cca) (fxnegative? . G4cc9) (fxmod0 . G4cc8) (fxmod . G4cc7) (fxmin . G4cc6) (fxmax . G4cc5) (fxlength . G4cc4) (fxior . G4cc3) (fxif . G4cc2) (fxfirst-bit-set . G4cc1) (fxeven? . G4cc0) (fxdiv0-and-mod0 . G4cbf) (fxdiv0 . G4cbe) (fxdiv-and-mod . G4cbd) (fxdiv . G4cbc) (fxcopy-bit-field . G4cbb) (fxcopy-bit . G4cba) (fxbit-set? . G4cb9) (fxbit-field . G4cb8) (fxbit-count . G4cb7) (fxarithmetic-shift-right . G4cb6) (fxarithmetic-shift-left . G4cb5) (fxarithmetic-shift . G4cb4) (fxand . G4cb3) (fx>? . G4cb2) (fx>=? . G4cb1) (fx=? . G4cb0) (fx<? . G4caf) (fx<=? . G4cae) (fx-/carry . G4cad) (fx- . G4cac) (fx+/carry . G4cab) (fx+ . G4caa) (fx*/carry . G4ca9) (fx* . G4ca8) (greatest-fixnum . G4ca7) (least-fixnum . G4ca6) (fixnum-width . G4ca5) (fixnum? . G4ca4) (bitwise-rotate-bit-field . G4ca3) (bitwise-reverse-bit-field . G4ca2) (bitwise-length . G4ca1) (bitwise-if . G4ca0) (bitwise-first-bit-set . G4c9f) (bitwise-copy-bit-field . G4c9e) (bitwise-copy-bit . G4c9d) (bitwise-bit-set? . G4c9c) (bitwise-bit-field . G4c9b) (bitwise-bit-count . G4c9a) (bitwise-xor . G4c99) (bitwise-ior . G4c98) (bitwise-and . G4c97) (bitwise-not . G4c96) (bitwise-arithmetic-shift-right . G4c95) (bitwise-arithmetic-shift-left . G4c94) (bitwise-arithmetic-shift . G4c93) (zero? . G4c92) (vector? . G4c91) (vector-set! . G4c90) (vector-ref . G4c8f) (vector-map . G4c8e) (vector-length . G4c8d) (vector-for-each . G4c8c) (vector-fill! . G4c8b) (vector->list . G4c8a) (vector . G4c89) (values . G4c88) (truncate . G4c87) (tan . G4c86) (symbol? . G4c85) (symbol=? . G4c84) (symbol->string . G4c83) (substring . G4c82) (string? . G4c81) (string>? . G4c80) (string>=? . G4c7f) (string=? . G4c7e) (string<? . G4c7d) (string<=? . G4c7c) (string-ref . G4c7b) (string-length . G4c7a) (string-for-each . G4c79) (string-copy . G4c78) (string-append . G4c77) (string->symbol . G4c76) (string->number . G4c75) (string->list . G4c74) (string . G4c73) (sqrt . G4c72) (sin . G4c71) (round . G4c70) (reverse . G4c6f) (real? . G4c6e) (real-valued? . G4c6d) (real-part . G4c6c) (rationalize . G4c6b) (rational? . G4c6a) (rational-valued? . G4c69) (procedure? . G4c68) (positive? . G4c67) (pair? . G4c66) (odd? . G4c65) (numerator . G4c64) (number? . G4c63) (number->string . G4c62) (null? . G4c61) (not . G4c60) (negative? . G4c5f) (nan? . G4c5e) (min . G4c5d) (max . G4c5c) (map . G4c5b) (make-vector . G4c5a) (make-string . G4c59) (make-rectangular . G4c58) (make-polar . G4c57) (magnitude . G4c56) (log . G4c55) (list? . G4c54) (list-tail . G4c53) (list-ref . G4c52) (list->vector . G4c51) (list->string . G4c50) (list . G4c4f) (length . G4c4e) (lcm . G4c4d) (integer? . G4c4c) (integer-valued? . G4c4b) (integer->char . G4c4a) (infinite? . G4c49) (inexact? . G4c48) (inexact . G4c47) (imag-part . G4c46) (gcd . G4c45) (for-each . G4c44) (floor . G4c43) (finite? . G4c42) (expt . G4c41) (exp . G4c40) (exact? . G4c3f) (exact-integer-sqrt . G4c3e) (exact . G4c3d) (even? . G4c3c) (error . G4c3b) (eqv? . G4c3a) (equal? . G4c39) (eq? . G4c38) (dynamic-wind . G4c37) (div0-and-mod0 . G4c36) (mod0 . G4c35) (div0 . G4c34) (div-and-mod . G4c33) (mod . G4c32) (div . G4c31) (denominator . G4c30) (cos . G4c2f) (cons . G4c2e) (complex? . G4c2d) (char? . G4c2c) (char>? . G4c2b) (char>=? . G4c2a) (char=? . G4c29) (char<? . G4c28) (char<=? . G4c27) (char->integer . G4c26) (ceiling . G4c25) (call-with-values . G4c24) (call/cc . G4c23) (call-with-current-continuation . G4c22) (cddddr . G4c21) (cdddar . G4c20) (cddadr . G4c1f) (cddaar . G4c1e) (cdaddr . G4c1d) (cdadar . G4c1c) (cdaadr . G4c1b) (cdaaar . G4c1a) (cadddr . G4c19) (caddar . G4c18) (cadadr . G4c17) (cadaar . G4c16) (caaddr . G4c15) (caadar . G4c14) (caaadr . G4c13) (caaaar . G4c12) (cdddr . G4c11) (cddar . G4c10) (cdadr . G4c0f) (cdaar . G4c0e) (caddr . G4c0d) (cadar . G4c0c) (caadr . G4c0b) (caaar . G4c0a) (cddr . G4c09) (cdar . G4c08) (cadr . G4c07) (caar . G4c06) (cdr . G4c05) (car . G4c04) (boolean? . G4c03) (boolean=? . G4c02) (atan . G4c01) (assertion-violation . G4c00) (asin . G4bff) (apply . G4bfe) (append . G4bfd) (angle . G4bfc) (acos . G4bfb) (abs . G4bfa) (/ . G4bf9) (* . G4bf8) (- . G4bf7) (+ . G4bf6) (>= . G4bf5) (> . G4bf4) (= . G4bf3) (<= . G4bf2) (< . G4bf1) (&no-nans . G4bef) (&no-infinities . G4bee) (&i/o-encoding . G4bed) (&i/o-decoding . G4bec) (&i/o-port . G4beb) (&i/o-file-does-not-exist . G4bea) (&i/o-file-already-exists . G4be9) (&i/o-file-is-read-only . G4be8) (&i/o-file-protection . G4be7) (&i/o-filename . G4be6) (&i/o-invalid-position . G4be5) (&i/o-write . G4be4) (&i/o-read . G4be3) (&i/o . G4be2) (&undefined . G4be1) (&syntax . G4be0) (&lexical . G4bdf) (&implementation-restriction . G4bde) (&non-continuable . G4bdd) (&who . G4bdc) (&irritants . G4bdb) (&assertion . G4bda) (&violation . G4bd9) (&error . G4bd8) (&serious . G4bd7) (&warning . G4bd6) (&message . G4bd5) (&condition . G4bd4) (define-condition-type . G4bd3) (define-enumeration . G4bd2) (define-record-type . G4bd1) (parent-rtd . G4bd0) (nongenerative . G4bcf) (opaque . G4bce) (sealed . G4bcd) (protocol . G4bcc) (parent . G4bcb) (immutable . G4bca) (mutable . G4bc9) (fields . G4bc8) (error-handling-mode . G4bc7) (file-options . G4bc6) (buffer-mode . G4bc5) (eol-style . G4bc4) (guard . G4bc3) (unsyntax-splicing . G4bc0) (unsyntax . G4bbf) (unquote-splicing . G4bbe) (unquote . G4bbd) (_ . G4bbc) (else . G4bbb) (=> . G4bba) (... . G4bb9) (assert . G4bb8) (endianness . G4bb7) (do . G4bb4) (cond . G4bb3) (let* . G4bb2) (let . G4bb1) (let*-values . G4bb0) (let-values . G4baf) (identifier-syntax . G4bae) (with-syntax . G4bad) (quasisyntax . G4bac) (quasiquote . G4bab) (syntax-rules . G4baa) (record-constructor-descriptor . G4ba7) (record-type-descriptor . G4ba6) (case . G4ba5) (unless . G4ba3) (when . G4ba2) (or . G4ba1) (and . G4ba0) (if . G4b9f) (letrec* . G4b9e) (letrec . G4b9d) (case-lambda . G4b9b) (lambda . G4b9a) (syntax . G4b99) (syntax-case . G4b98) (quote . G4b97) (letrec-syntax . G4b95) (let-syntax . G4b94) (set! . G4b93) (begin . G4b91) (define-syntax . G4b8f) (define . G4b8e)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e53 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G2df3) (quotient . G4d74) (null-environment . G2df1) (remainder . G4d73) (modulo . G4d72) (inexact->exact . G4d71) (force . G4d70) (exact->inexact . G4d6f) (make-promise . G4d6e) (delay . G4bb6)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e54 '(rnrs control) '(6) '() '() '() '((do . G4bb4) (unless . G4ba3) (when . G4ba2) (case-lambda . G4b9b)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e55 '(rnrs eval) '(6) '() '() '() '((eval . G2df7) (environment . G2def)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e56 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4d6a) (set-car! . G4d69)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e57 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4d6c) (string-set! . G4d6b)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e58 '(rnrs programs) '(6) '() '() '() '((exit . G4d6d) (command-line . G4ac2)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e59 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2b73) (identifier? . G2e19) (generate-temporaries . G2e05) (free-identifier=? . G2e07) (syntax->datum . G2e1d) (datum->syntax . G2e1b) (bound-identifier=? . G2e09) (syntax-violation . G2e17) (unsyntax-splicing . G4bc0) (unsyntax . G4bbf) (_ . G4bbc) (... . G4bb9) (with-syntax . G4bad) (quasisyntax . G4bac) (syntax . G4b99) (syntax-case . G4b98)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e5a '(rnrs files) '(6) '() '() '() '((delete-file . G4ddd) (file-exists? . G4ddc) (make-i/o-write-error . G48c0) (make-i/o-read-error . G48ab) (make-i/o-port-error . G495e) (make-i/o-invalid-position-error . G48d6) (make-i/o-filename-error . G48f0) (make-i/o-file-protection-error . G4909) (make-i/o-file-is-read-only-error . G491e) (make-i/o-file-does-not-exist-error . G4948) (make-i/o-file-already-exists-error . G4933) (make-i/o-error . G4896) (i/o-write-error? . G48c2) (i/o-read-error? . G48ad) (i/o-port-error? . G4962) (i/o-invalid-position-error? . G48da) (i/o-filename-error? . G48f4) (i/o-file-protection-error? . G490b) (i/o-file-is-read-only-error? . G4920) (i/o-file-does-not-exist-error? . G494a) (i/o-file-already-exists-error? . G4935) (i/o-error? . G4898) (i/o-error-position . G48dc) (i/o-error-port . G4964) (i/o-error-filename . G48f6) (&i/o-port . G4beb) (&i/o-file-does-not-exist . G4bea) (&i/o-file-already-exists . G4be9) (&i/o-file-is-read-only . G4be8) (&i/o-file-protection . G4be7) (&i/o-filename . G4be6) (&i/o-invalid-position . G4be5) (&i/o-write . G4be4) (&i/o-read . G4be3) (&i/o . G4be2)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e5b '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4ddb) (vector-sort . G4dda) (list-sort . G4dd9)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e5c '(rnrs base) '(6) '() '() '() '((zero? . G4c92) (vector? . G4c91) (vector-set! . G4c90) (vector-ref . G4c8f) (vector-map . G4c8e) (vector-length . G4c8d) (vector-for-each . G4c8c) (vector-fill! . G4c8b) (vector->list . G4c8a) (vector . G4c89) (values . G4c88) (truncate . G4c87) (tan . G4c86) (symbol? . G4c85) (symbol=? . G4c84) (symbol->string . G4c83) (substring . G4c82) (string? . G4c81) (string>? . G4c80) (string>=? . G4c7f) (string=? . G4c7e) (string<? . G4c7d) (string<=? . G4c7c) (string-ref . G4c7b) (string-length . G4c7a) (string-for-each . G4c79) (string-copy . G4c78) (string-append . G4c77) (string->symbol . G4c76) (string->number . G4c75) (string->list . G4c74) (string . G4c73) (sqrt . G4c72) (sin . G4c71) (round . G4c70) (reverse . G4c6f) (real? . G4c6e) (real-valued? . G4c6d) (real-part . G4c6c) (rationalize . G4c6b) (rational? . G4c6a) (rational-valued? . G4c69) (procedure? . G4c68) (positive? . G4c67) (pair? . G4c66) (odd? . G4c65) (numerator . G4c64) (number? . G4c63) (number->string . G4c62) (null? . G4c61) (not . G4c60) (negative? . G4c5f) (nan? . G4c5e) (min . G4c5d) (max . G4c5c) (map . G4c5b) (make-vector . G4c5a) (make-string . G4c59) (make-rectangular . G4c58) (make-polar . G4c57) (magnitude . G4c56) (log . G4c55) (list? . G4c54) (list-tail . G4c53) (list-ref . G4c52) (list->vector . G4c51) (list->string . G4c50) (list . G4c4f) (length . G4c4e) (lcm . G4c4d) (integer? . G4c4c) (integer-valued? . G4c4b) (integer->char . G4c4a) (infinite? . G4c49) (inexact? . G4c48) (inexact . G4c47) (imag-part . G4c46) (gcd . G4c45) (for-each . G4c44) (floor . G4c43) (finite? . G4c42) (expt . G4c41) (exp . G4c40) (exact? . G4c3f) (exact-integer-sqrt . G4c3e) (exact . G4c3d) (even? . G4c3c) (error . G4c3b) (eqv? . G4c3a) (equal? . G4c39) (eq? . G4c38) (dynamic-wind . G4c37) (div0-and-mod0 . G4c36) (mod0 . G4c35) (div0 . G4c34) (div-and-mod . G4c33) (mod . G4c32) (div . G4c31) (denominator . G4c30) (cos . G4c2f) (cons . G4c2e) (complex? . G4c2d) (char? . G4c2c) (char>? . G4c2b) (char>=? . G4c2a) (char=? . G4c29) (char<? . G4c28) (char<=? . G4c27) (char->integer . G4c26) (ceiling . G4c25) (call-with-values . G4c24) (call/cc . G4c23) (call-with-current-continuation . G4c22) (cddddr . G4c21) (cdddar . G4c20) (cddadr . G4c1f) (cddaar . G4c1e) (cdaddr . G4c1d) (cdadar . G4c1c) (cdaadr . G4c1b) (cdaaar . G4c1a) (cadddr . G4c19) (caddar . G4c18) (cadadr . G4c17) (cadaar . G4c16) (caaddr . G4c15) (caadar . G4c14) (caaadr . G4c13) (caaaar . G4c12) (cdddr . G4c11) (cddar . G4c10) (cdadr . G4c0f) (cdaar . G4c0e) (caddr . G4c0d) (cadar . G4c0c) (caadr . G4c0b) (caaar . G4c0a) (cddr . G4c09) (cdar . G4c08) (cadr . G4c07) (caar . G4c06) (cdr . G4c05) (car . G4c04) (boolean? . G4c03) (boolean=? . G4c02) (atan . G4c01) (assertion-violation . G4c00) (asin . G4bff) (apply . G4bfe) (append . G4bfd) (angle . G4bfc) (acos . G4bfb) (abs . G4bfa) (/ . G4bf9) (* . G4bf8) (- . G4bf7) (+ . G4bf6) (>= . G4bf5) (> . G4bf4) (= . G4bf3) (<= . G4bf2) (< . G4bf1) (unquote-splicing . G4bbe) (unquote . G4bbd) (_ . G4bbc) (else . G4bbb) (=> . G4bba) (... . G4bb9) (assert . G4bb8) (cond . G4bb3) (let* . G4bb2) (let . G4bb1) (let*-values . G4bb0) (let-values . G4baf) (identifier-syntax . G4bae) (quasiquote . G4bab) (syntax-rules . G4baa) (case . G4ba5) (or . G4ba1) (and . G4ba0) (if . G4b9f) (letrec* . G4b9e) (letrec . G4b9d) (lambda . G4b9a) (quote . G4b97) (letrec-syntax . G4b95) (let-syntax . G4b94) (set! . G4b93) (begin . G4b91) (define-syntax . G4b8f) (define . G4b8e)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e5d '(rnrs lists) '(6) '() '() '() '((remove . G4d68) (remv . G4d67) (remp . G4d66) (remq . G4d65) (partition . G4d64) (memv . G4d63) (memq . G4d62) (memp . G4d61) (member . G4d60) (exists . G4d5f) (for-all . G4d5e) (fold-right . G4d5d) (fold-left . G4d5c) (find . G4d5b) (filter . G4d5a) (cons* . G4d59) (assv . G4d58) (assq . G4d57) (assp . G4d56) (assoc . G4d55)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e5e '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4dc3) (call-with-input-file . G4dc2) (write-char . G4dc1) (write . G4dc0) (with-output-to-file . G4dbf) (with-input-from-file . G4dbe) (read-char . G4dbd) (read . G4dbc) (peek-char . G4dbb) (open-output-file . G4dba) (open-input-file . G4db9) (newline . G4db8) (display . G4db7) (close-output-port . G4db6) (close-input-port . G4db5) (eof-object? . G4db4) (eof-object . G4db3) (current-error-port . G4db2) (current-output-port . G4db1) (current-input-port . G4db0) (output-port? . G4daf) (input-port? . G4dae) (make-i/o-write-error . G48c0) (make-i/o-read-error . G48ab) (make-i/o-port-error . G495e) (make-i/o-invalid-position-error . G48d6) (make-i/o-filename-error . G48f0) (make-i/o-file-protection-error . G4909) (make-i/o-file-is-read-only-error . G491e) (make-i/o-file-does-not-exist-error . G4948) (make-i/o-file-already-exists-error . G4933) (make-i/o-error . G4896) (i/o-write-error? . G48c2) (i/o-read-error? . G48ad) (i/o-port-error? . G4962) (i/o-invalid-position-error? . G48da) (i/o-filename-error? . G48f4) (i/o-file-protection-error? . G490b) (i/o-file-is-read-only-error? . G4920) (i/o-file-does-not-exist-error? . G494a) (i/o-file-already-exists-error? . G4935) (i/o-error? . G4898) (i/o-error-position . G48dc) (i/o-error-port . G4964) (i/o-error-filename . G48f6) (&i/o-port . G4beb) (&i/o-file-does-not-exist . G4bea) (&i/o-file-already-exists . G4be9) (&i/o-file-is-read-only . G4be8) (&i/o-file-protection . G4be7) (&i/o-filename . G4be6) (&i/o-invalid-position . G4be5) (&i/o-write . G4be4) (&i/o-read . G4be3) (&i/o . G4be2)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e5f '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4d84) (utf32->string . G4d39) (utf16->string . G4d38) (utf8->string . G4d37) (uint-list->bytevector . G4d36) (u8-list->bytevector . G4d35) (string->utf8 . G4d34) (string->utf32 . G4d33) (string->utf16 . G4d32) (sint-list->bytevector . G4d31) (native-endianness . G4d30) (bytevector? . G4d2f) (bytevector=? . G4d2e) (bytevector-uint-set! . G4d2d) (bytevector-uint-ref . G4d2c) (bytevector-u8-set! . G4d2b) (bytevector-u8-ref . G4d2a) (bytevector-u64-set! . G4d29) (bytevector-u64-ref . G4d28) (bytevector-u64-native-set! . G4d27) (bytevector-u64-native-ref . G4d26) (bytevector-u32-set! . G4d25) (bytevector-u32-ref . G4d24) (bytevector-u32-native-set! . G4d23) (bytevector-u32-native-ref . G4d22) (bytevector-u16-set! . G4d21) (bytevector-u16-ref . G4d20) (bytevector-u16-native-set! . G4d1f) (bytevector-u16-native-ref . G4d1e) (bytevector-sint-set! . G4d1d) (bytevector-sint-ref . G4d1c) (bytevector-s8-set! . G4d1b) (bytevector-s8-ref . G4d1a) (bytevector-s64-set! . G4d19) (bytevector-s64-ref . G4d18) (bytevector-s64-native-set! . G4d17) (bytevector-s64-native-ref . G4d16) (bytevector-s32-set! . G4d15) (bytevector-s32-ref . G4d14) (bytevector-s32-native-set! . G4d13) (bytevector-s32-native-ref . G4d12) (bytevector-s16-set! . G4d11) (bytevector-s16-ref . G4d10) (bytevector-s16-native-set! . G4d0f) (bytevector-s16-native-ref . G4d0e) (bytevector-length . G4d0d) (bytevector-ieee-single-ref . G4d0c) (bytevector-ieee-single-set! . G4d0b) (bytevector-ieee-single-native-set! . G4d0a) (bytevector-ieee-single-native-ref . G4d09) (bytevector-ieee-double-set! . G4d08) (bytevector-ieee-double-ref . G4d07) (bytevector-ieee-double-native-set! . G4d06) (bytevector-ieee-double-native-ref . G4d05) (bytevector-fill! . G4d04) (bytevector-copy! . G4d03) (bytevector-copy . G4d02) (bytevector->uint-list . G4d01) (bytevector->u8-list . G4d00) (bytevector->sint-list . G4cff) (endianness . G4bb7)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e60 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4e0b) (string-titlecase . G4e0a) (string-normalize-nfkd . G4e09) (string-normalize-nfkc . G4e08) (string-normalize-nfd . G4e07) (string-normalize-nfc . G4e06) (string-foldcase . G4e05) (string-downcase . G4e04) (string-ci>? . G4e03) (string-ci>=? . G4e02) (string-ci=? . G4e01) (string-ci<? . G4e00) (string-ci<=? . G4dff) (char-whitespace? . G4dfe) (char-upper-case? . G4dfd) (char-title-case? . G4dfc) (char-numeric? . G4dfb) (char-lower-case? . G4dfa) (char-general-category . G4df9) (char-upcase . G4df8) (char-titlecase . G4df7) (char-foldcase . G4df6) (char-downcase . G4df5) (char-ci>? . G4df4) (char-ci>=? . G4df3) (char-ci=? . G4df2) (char-ci<? . G4df1) (char-ci<=? . G4df0) (char-alphabetic? . G4def)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e61 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4d4e) (raise-continuable . G4d4d) (raise . G4d4c) (guard . G4bc3) (else . G4bbb) (=> . G4bba)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e62 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ca3) (bitwise-reverse-bit-field . G4ca2) (bitwise-length . G4ca1) (bitwise-if . G4ca0) (bitwise-first-bit-set . G4c9f) (bitwise-copy-bit-field . G4c9e) (bitwise-copy-bit . G4c9d) (bitwise-bit-set? . G4c9c) (bitwise-bit-field . G4c9b) (bitwise-bit-count . G4c9a) (bitwise-xor . G4c99) (bitwise-ior . G4c98) (bitwise-and . G4c97) (bitwise-not . G4c96) (bitwise-arithmetic-shift-right . G4c95) (bitwise-arithmetic-shift-left . G4c94) (bitwise-arithmetic-shift . G4c93)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e63 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4cd0) (fxxor . G4ccf) (fxrotate-bit-field . G4cce) (fxreverse-bit-field . G4ccd) (fxpositive? . G4ccc) (fxodd? . G4ccb) (fxnot . G4cca) (fxnegative? . G4cc9) (fxmod0 . G4cc8) (fxmod . G4cc7) (fxmin . G4cc6) (fxmax . G4cc5) (fxlength . G4cc4) (fxior . G4cc3) (fxif . G4cc2) (fxfirst-bit-set . G4cc1) (fxeven? . G4cc0) (fxdiv0-and-mod0 . G4cbf) (fxdiv0 . G4cbe) (fxdiv-and-mod . G4cbd) (fxdiv . G4cbc) (fxcopy-bit-field . G4cbb) (fxcopy-bit . G4cba) (fxbit-set? . G4cb9) (fxbit-field . G4cb8) (fxbit-count . G4cb7) (fxarithmetic-shift-right . G4cb6) (fxarithmetic-shift-left . G4cb5) (fxarithmetic-shift . G4cb4) (fxand . G4cb3) (fx>? . G4cb2) (fx>=? . G4cb1) (fx=? . G4cb0) (fx<? . G4caf) (fx<=? . G4cae) (fx-/carry . G4cad) (fx- . G4cac) (fx+/carry . G4cab) (fx+ . G4caa) (fx*/carry . G4ca9) (fx* . G4ca8) (greatest-fixnum . G4ca7) (least-fixnum . G4ca6) (fixnum-width . G4ca5) (fixnum? . G4ca4)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e64 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G49bd) (no-infinities-violation? . G49a8) (make-no-nans-violation . G49bb) (make-no-infinities-violation . G49a6) (real->flonum . G4cfe) (flzero? . G4cfd) (fltruncate . G4cfc) (fltan . G4cfb) (flsqrt . G4cfa) (flsin . G4cf9) (flround . G4cf8) (flpositive? . G4cf7) (flonum? . G4cf6) (flodd? . G4cf5) (flnumerator . G4cf4) (flnegative? . G4cf3) (flnan? . G4cf2) (flmod0 . G4cf1) (flmod . G4cf0) (flmin . G4cef) (flmax . G4cee) (fllog . G4ced) (flinteger? . G4cec) (flinfinite? . G4ceb) (flfloor . G4cea) (flfinite? . G4ce9) (flexpt . G4ce8) (flexp . G4ce7) (fleven? . G4ce6) (fldiv0-and-mod0 . G4ce5) (fldiv0 . G4ce4) (fldiv-and-mod . G4ce3) (fldiv . G4ce2) (fldenominator . G4ce1) (flcos . G4ce0) (flceiling . G4cdf) (flatan . G4cde) (flasin . G4cdd) (flacos . G4cdc) (flabs . G4cdb) (fl>? . G4cda) (fl>=? . G4cd9) (fl=? . G4cd8) (fl<? . G4cd7) (fl<=? . G4cd6) (fl/ . G4cd5) (fl- . G4cd4) (fl+ . G4cd3) (fl* . G4cd2) (fixnum->flonum . G4cd1) (&no-nans . G4bef) (&no-infinities . G4bee)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e65 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4dd8) (string-ci-hash . G4dd7) (string-hash . G4dd6) (equal-hash . G4dd5) (hashtable-equivalence-function . G4dd4) (make-hashtable . G4dd3) (hashtable-hash-function . G4dd2) (make-eqv-hashtable . G4dd1) (make-eq-hashtable . G4dd0) (hashtable? . G4dcf) (hashtable-update! . G4dce) (hashtable-size . G4dcd) (hashtable-set! . G4dcc) (hashtable-ref . G4dcb) (hashtable-mutable? . G4dca) (hashtable-keys . G4dc9) (hashtable-entries . G4dc8) (hashtable-delete! . G4dc7) (hashtable-copy . G4dc6) (hashtable-contains? . G4dc5) (hashtable-clear! . G4dc4)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e66 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4db4) (eof-object . G4db3) (current-error-port . G4db2) (current-output-port . G4db1) (current-input-port . G4db0) (output-port? . G4daf) (input-port? . G4dae) (utf-8-codec . G4dad) (utf-16-codec . G4dac) (transcoder-error-handling-mode . G4dab) (transcoder-eol-style . G4daa) (transcoder-codec . G4da9) (transcoded-port . G4da8) (textual-port? . G4da7) (string->bytevector . G4da6) (standard-output-port . G4da5) (standard-input-port . G4da4) (standard-error-port . G4da3) (set-port-position! . G4da2) (put-u8 . G4da1) (put-string . G4da0) (put-datum . G4d9f) (put-char . G4d9e) (put-bytevector . G4d9d) (port? . G4d9c) (port-transcoder . G4d9b) (port-position . G4d9a) (port-has-set-port-position!? . G4d99) (port-has-port-position? . G4d98) (port-eof? . G4d97) (output-port-buffer-mode . G4d96) (open-string-output-port . G4d95) (open-string-input-port . G4d94) (open-file-output-port . G4d93) (open-file-input/output-port . G4d92) (open-file-input-port . G4d91) (open-bytevector-output-port . G4d90) (open-bytevector-input-port . G4d8f) (native-transcoder . G4d8e) (native-eol-style . G4d8d) (make-transcoder . G4d8c) (latin-1-codec . G4d8b) (make-i/o-write-error . G48c0) (make-i/o-read-error . G48ab) (make-i/o-port-error . G495e) (make-i/o-invalid-position-error . G48d6) (make-i/o-filename-error . G48f0) (make-i/o-file-protection-error . G4909) (make-i/o-file-is-read-only-error . G491e) (make-i/o-file-does-not-exist-error . G4948) (make-i/o-file-already-exists-error . G4933) (make-i/o-error . G4896) (make-i/o-encoding-error . G498d) (make-i/o-decoding-error . G4977) (make-custom-textual-output-port . G4d8a) (make-custom-textual-input/output-port . G4d89) (make-custom-textual-input-port . G4d88) (make-custom-binary-output-port . G4d87) (make-custom-binary-input/output-port . G4d86) (make-custom-binary-input-port . G4d85) (lookahead-u8 . G4d83) (lookahead-char . G4d82) (i/o-write-error? . G48c2) (i/o-read-error? . G48ad) (i/o-port-error? . G4962) (i/o-invalid-position-error? . G48da) (i/o-filename-error? . G48f4) (i/o-file-protection-error? . G490b) (i/o-file-is-read-only-error? . G4920) (i/o-file-does-not-exist-error? . G494a) (i/o-file-already-exists-error? . G4935) (i/o-error? . G4898) (i/o-error-position . G48dc) (i/o-error-port . G4964) (i/o-error-filename . G48f6) (i/o-encoding-error? . G4991) (i/o-encoding-error-char . G4993) (i/o-decoding-error? . G4979) (get-u8 . G4d81) (get-string-n! . G4d80) (get-string-n . G4d7f) (get-string-all . G4d7e) (get-line . G4d7d) (get-datum . G4d7c) (get-char . G4d7b) (get-bytevector-some . G4d7a) (get-bytevector-n! . G4d79) (get-bytevector-n . G4d78) (get-bytevector-all . G4d77) (flush-output-port . G4d76) (close-port . G4d75) (call-with-string-output-port . G4d54) (call-with-port . G4d53) (call-with-bytevector-output-port . G4d52) (bytevector->string . G4d51) (buffer-mode? . G4d50) (binary-port? . G4d4f) (&i/o-encoding . G4bed) (&i/o-decoding . G4bec) (&i/o-port . G4beb) (&i/o-file-does-not-exist . G4bea) (&i/o-file-already-exists . G4be9) (&i/o-file-is-read-only . G4be8) (&i/o-file-protection . G4be7) (&i/o-filename . G4be6) (&i/o-invalid-position . G4be5) (&i/o-write . G4be4) (&i/o-read . G4be3) (&i/o . G4be2) (error-handling-mode . G4bc7) (file-options . G4bc6) (buffer-mode . G4bc5) (eol-style . G4bc4)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e67 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4d4b) (enum-set=? . G4d4a) (enum-set-universe . G4d49) (enum-set-union . G4d48) (enum-set-subset? . G4d47) (enum-set-projection . G4d46) (enum-set-member? . G4d45) (enum-set-intersection . G4d44) (enum-set-indexer . G4d43) (enum-set-difference . G4d42) (enum-set-constructor . G4d41) (enum-set-complement . G4d40) (enum-set->list . G4d3f) (define-enumeration . G4bd2)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e68 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G480e) (warning? . G4788) (violation? . G47c7) (undefined-violation? . G4883) (syntax-violation? . G486a) (syntax-violation-subform . G486e) (syntax-violation-form . G486c) (syntax-violation . G2e17) (simple-conditions . G4d3e) (serious-condition? . G479d) (non-continuable-violation? . G4825) (message-condition? . G4771) (make-who-condition . G480a) (make-warning . G4786) (make-violation . G47c5) (make-undefined-violation . G4881) (make-syntax-violation . G4864) (make-serious-condition . G479b) (make-non-continuable-violation . G4823) (make-message-condition . G476d) (make-lexical-violation . G484d) (make-irritants-condition . G47f0) (make-implementation-restriction-violation . G4838) (make-error . G47b0) (make-assertion-violation . G47da) (lexical-violation? . G484f) (irritants-condition? . G47f4) (implementation-restriction-violation? . G483a) (error? . G47b2) (condition-who . G4810) (condition-predicate . G4d3d) (condition-message . G4773) (condition-irritants . G47f6) (condition-accessor . G4d3c) (condition . G4d3b) (assertion-violation? . G47dc) (condition? . G4d3a) (&undefined . G4be1) (&syntax . G4be0) (&lexical . G4bdf) (&implementation-restriction . G4bde) (&non-continuable . G4bdd) (&who . G4bdc) (&irritants . G4bdb) (&assertion . G4bda) (&violation . G4bd9) (&error . G4bd8) (&serious . G4bd7) (&warning . G4bd6) (&message . G4bd5) (&condition . G4bd4) (define-condition-type . G4bd3)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e69 '(rnrs records inspection) '(6) '() '() '() '((record? . G4de7) (record-type-uid . G4de6) (record-type-sealed? . G4de5) (record-type-parent . G4de4) (record-type-opaque? . G4de3) (record-type-name . G4de2) (record-type-generative? . G4de1) (record-type-field-names . G4de0) (record-rtd . G4ddf) (record-field-mutable? . G4dde)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e6a '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4dee) (record-predicate . G4ded) (record-mutator . G4dec) (record-constructor . G4deb) (record-accessor . G4dea) (make-record-type-descriptor . G4de9) (make-record-constructor-descriptor . G4de8)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e6b '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4bd1) (parent-rtd . G4bd0) (nongenerative . G4bcf) (opaque . G4bce) (sealed . G4bcd) (protocol . G4bcc) (parent . G4bcb) (immutable . G4bca) (mutable . G4bc9) (fields . G4bc8) (record-constructor-descriptor . G4ba7) (record-type-descriptor . G4ba6)) '() values values '#f '#f '#t '#f) (G2962@G2807@install-library 'G4e6c '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G49c1) (&no-nans-rtd . G49bf) (&no-infinities-rcd . G49ac) (&no-infinities-rtd . G49aa) (&i/o-encoding-rcd . G4997) (&i/o-encoding-rtd . G4995) (&i/o-decoding-rcd . G497d) (&i/o-decoding-rtd . G497b) (&i/o-port-rcd . G4968) (&i/o-port-rtd . G4966) (&i/o-file-does-not-exist-rcd . G494e) (&i/o-file-does-not-exist-rtd . G494c) (&i/o-file-already-exists-rcd . G4939) (&i/o-file-already-exists-rtd . G4937) (&i/o-file-is-read-only-rcd . G4924) (&i/o-file-is-read-only-rtd . G4922) (&i/o-file-protection-rcd . G490f) (&i/o-file-protection-rtd . G490d) (&i/o-filename-rcd . G48fa) (&i/o-filename-rtd . G48f8) (&i/o-invalid-position-rcd . G48e0) (&i/o-invalid-position-rtd . G48de) (&i/o-write-rcd . G48c6) (&i/o-write-rtd . G48c4) (&i/o-read-rcd . G48b1) (&i/o-read-rtd . G48af) (&i/o-rcd . G489c) (&i/o-rtd . G489a) (&undefined-rcd . G4887) (&undefined-rtd . G4885) (&syntax-rcd . G4872) (&syntax-rtd . G4870) (&lexical-rcd . G4853) (&lexical-rtd . G4851) (&implementation-restriction-rcd . G483e) (&implementation-restriction-rtd . G483c) (&non-continuable-rcd . G4829) (&non-continuable-rtd . G4827) (&who-rcd . G4814) (&who-rtd . G4812) (&irritants-rcd . G47fa) (&irritants-rtd . G47f8) (&assertion-rcd . G47e0) (&assertion-rtd . G47de) (&violation-rcd . G47cb) (&violation-rtd . G47c9) (&error-rcd . G47b6) (&error-rtd . G47b4) (&serious-rcd . G47a1) (&serious-rtd . G479f) (&warning-rcd . G478c) (&warning-rtd . G478a) (&message-rcd . G4777) (&message-rtd . G4775) (&condition-rcd . G471c) (&condition-rtd . G471a) (syntax-error . G2e13) (syntax-dispatch . G2d2c) (pretty-print . G4e4c) (eval-core . G4e4b) (set-symbol-value! . G4e4a) (symbol-value . G4e49) (gensym . G4e48) (void . G4e47) (load . G4ac8) (interaction-environment . G2e23) (char-ready? . G4e46) (regexp? . G4e45) (read-line . G4e44) (ungensym . G4e43) (alist->eq-hash-table . G4e42) (assoc-ref . G4e41) (print . G4e40) (format . G4e3f) (host-os . G4e3e) (library-path . G27e6) (standard-library-path . G4e3d) (file-newer? . G4e3c) (stat-mtime . G4e3b) (write-to-file . G4e3a) (file->list . G4e39) (file->string . G4e38) (digit->integer . G4e37) (call-with-string-input-port . G4e36) (call-with-string-io . G4e35) (string-split . G4e34) (bytevector-for-each . G4e33) (string->regexp . G4e32) (rxmatch . G4e31) (regexp-replace-all . G4e30) (hashtable-for-each . G4e2f) (call-process . G4e2e) (local-tz-offset . G4e2d) (microseconds . G4e2c) (readdir . G4e2b) (set-current-directory! . G4e2a) (expand-path . G4e29) (current-directory . G4e28) (%spawn . G4e27) (%waitpid . G4e26) (%ffi-supported? . G4e25) (%ffi-pointer-ref . G4e24) (%ffi-pointer->string . G4e23) (%ffi-call->string-or-zero . G4e22) (%ffi-call->double . G4e21) (%ffi-call->void* . G4e20) (%ffi-call->void . G4e1f) (%ffi-call->int . G4e1e) (%ffi-lookup . G4e1d) (%ffi-open . G4e1c) (%fork . G4e1b) (%pipe . G4e1a) (p . G4e19) (get-environment-variables . G4e18) (get-environment-variable . G4e17) (get-timeofday . G4e16) (get-command-line . G4e15) (sys-display . G4e14) (source-info . G4e13) (make-compiler-instruction . G4e12) (make-instruction . G4e11) (set-source-info! . G4e10) (bignum? . G4e0f) (fast-equal? . G4e0e) (fasl-read . G4e0d) (fasl-write . G4e0c) (make-parameter . G261d) (string-upcase . G4e0b) (string-titlecase . G4e0a) (string-normalize-nfkd . G4e09) (string-normalize-nfkc . G4e08) (string-normalize-nfd . G4e07) (string-normalize-nfc . G4e06) (string-foldcase . G4e05) (string-downcase . G4e04) (string-ci>? . G4e03) (string-ci>=? . G4e02) (string-ci=? . G4e01) (string-ci<? . G4e00) (string-ci<=? . G4dff) (char-whitespace? . G4dfe) (char-upper-case? . G4dfd) (char-title-case? . G4dfc) (char-numeric? . G4dfb) (char-lower-case? . G4dfa) (char-general-category . G4df9) (char-upcase . G4df8) (char-titlecase . G4df7) (char-foldcase . G4df6) (char-downcase . G4df5) (char-ci>? . G4df4) (char-ci>=? . G4df3) (char-ci=? . G4df2) (char-ci<? . G4df1) (char-ci<=? . G4df0) (char-alphabetic? . G4def) (make-variable-transformer . G2b73) (identifier? . G2e19) (generate-temporaries . G2e05) (free-identifier=? . G2e07) (syntax->datum . G2e1d) (datum->syntax . G2e1b) (bound-identifier=? . G2e09) (record-type-descriptor? . G4dee) (record-predicate . G4ded) (record-mutator . G4dec) (record-constructor . G4deb) (record-accessor . G4dea) (make-record-type-descriptor . G4de9) (make-record-constructor-descriptor . G4de8) (record? . G4de7) (record-type-uid . G4de6) (record-type-sealed? . G4de5) (record-type-parent . G4de4) (record-type-opaque? . G4de3) (record-type-name . G4de2) (record-type-generative? . G4de1) (record-type-field-names . G4de0) (record-rtd . G4ddf) (record-field-mutable? . G4dde) (delete-file . G4ddd) (file-exists? . G4ddc) (vector-sort! . G4ddb) (vector-sort . G4dda) (list-sort . G4dd9) (symbol-hash . G4dd8) (string-ci-hash . G4dd7) (string-hash . G4dd6) (equal-hash . G4dd5) (hashtable-equivalence-function . G4dd4) (make-hashtable . G4dd3) (hashtable-hash-function . G4dd2) (make-eqv-hashtable . G4dd1) (make-eq-hashtable . G4dd0) (hashtable? . G4dcf) (hashtable-update! . G4dce) (hashtable-size . G4dcd) (hashtable-set! . G4dcc) (hashtable-ref . G4dcb) (hashtable-mutable? . G4dca) (hashtable-keys . G4dc9) (hashtable-entries . G4dc8) (hashtable-delete! . G4dc7) (hashtable-copy . G4dc6) (hashtable-contains? . G4dc5) (hashtable-clear! . G4dc4) (call-with-output-file . G4dc3) (call-with-input-file . G4dc2) (write-char . G4dc1) (write . G4dc0) (with-output-to-file . G4dbf) (with-input-from-file . G4dbe) (read-char . G4dbd) (read . G4dbc) (peek-char . G4dbb) (open-output-file . G4dba) (open-input-file . G4db9) (newline . G4db8) (display . G4db7) (close-output-port . G4db6) (close-input-port . G4db5) (eof-object? . G4db4) (eof-object . G4db3) (current-error-port . G4db2) (current-output-port . G4db1) (current-input-port . G4db0) (output-port? . G4daf) (input-port? . G4dae) (utf-8-codec . G4dad) (utf-16-codec . G4dac) (transcoder-error-handling-mode . G4dab) (transcoder-eol-style . G4daa) (transcoder-codec . G4da9) (transcoded-port . G4da8) (textual-port? . G4da7) (string->bytevector . G4da6) (standard-output-port . G4da5) (standard-input-port . G4da4) (standard-error-port . G4da3) (set-port-position! . G4da2) (put-u8 . G4da1) (put-string . G4da0) (put-datum . G4d9f) (put-char . G4d9e) (put-bytevector . G4d9d) (port? . G4d9c) (port-transcoder . G4d9b) (port-position . G4d9a) (port-has-set-port-position!? . G4d99) (port-has-port-position? . G4d98) (port-eof? . G4d97) (output-port-buffer-mode . G4d96) (open-string-output-port . G4d95) (open-string-input-port . G4d94) (open-file-output-port . G4d93) (open-file-input/output-port . G4d92) (open-file-input-port . G4d91) (open-bytevector-output-port . G4d90) (open-bytevector-input-port . G4d8f) (native-transcoder . G4d8e) (native-eol-style . G4d8d) (make-transcoder . G4d8c) (latin-1-codec . G4d8b) (make-i/o-write-error . G48c0) (make-i/o-read-error . G48ab) (make-i/o-port-error . G495e) (make-i/o-invalid-position-error . G48d6) (make-i/o-filename-error . G48f0) (make-i/o-file-protection-error . G4909) (make-i/o-file-is-read-only-error . G491e) (make-i/o-file-does-not-exist-error . G4948) (make-i/o-file-already-exists-error . G4933) (make-i/o-error . G4896) (make-i/o-encoding-error . G498d) (make-i/o-decoding-error . G4977) (make-custom-textual-output-port . G4d8a) (make-custom-textual-input/output-port . G4d89) (make-custom-textual-input-port . G4d88) (make-custom-binary-output-port . G4d87) (make-custom-binary-input/output-port . G4d86) (make-custom-binary-input-port . G4d85) (make-bytevector . G4d84) (lookahead-u8 . G4d83) (lookahead-char . G4d82) (i/o-write-error? . G48c2) (i/o-read-error? . G48ad) (i/o-port-error? . G4962) (i/o-invalid-position-error? . G48da) (i/o-filename-error? . G48f4) (i/o-file-protection-error? . G490b) (i/o-file-is-read-only-error? . G4920) (i/o-file-does-not-exist-error? . G494a) (i/o-file-already-exists-error? . G4935) (i/o-error? . G4898) (i/o-error-position . G48dc) (i/o-error-port . G4964) (i/o-error-filename . G48f6) (i/o-encoding-error? . G4991) (i/o-encoding-error-char . G4993) (i/o-decoding-error? . G4979) (get-u8 . G4d81) (get-string-n! . G4d80) (get-string-n . G4d7f) (get-string-all . G4d7e) (get-line . G4d7d) (get-datum . G4d7c) (get-char . G4d7b) (get-bytevector-some . G4d7a) (get-bytevector-n! . G4d79) (get-bytevector-n . G4d78) (get-bytevector-all . G4d77) (flush-output-port . G4d76) (close-port . G4d75) (scheme-report-environment . G2df3) (quotient . G4d74) (null-environment . G2df1) (remainder . G4d73) (modulo . G4d72) (inexact->exact . G4d71) (force . G4d70) (exact->inexact . G4d6f) (make-promise . G4d6e) (exit . G4d6d) (command-line . G4ac2) (string-fill! . G4d6c) (string-set! . G4d6b) (set-cdr! . G4d6a) (set-car! . G4d69) (remove . G4d68) (remv . G4d67) (remp . G4d66) (remq . G4d65) (partition . G4d64) (memv . G4d63) (memq . G4d62) (memp . G4d61) (member . G4d60) (exists . G4d5f) (for-all . G4d5e) (fold-right . G4d5d) (fold-left . G4d5c) (find . G4d5b) (filter . G4d5a) (cons* . G4d59) (assv . G4d58) (assq . G4d57) (assp . G4d56) (assoc . G4d55) (call-with-string-output-port . G4d54) (call-with-port . G4d53) (call-with-bytevector-output-port . G4d52) (bytevector->string . G4d51) (buffer-mode? . G4d50) (binary-port? . G4d4f) (with-exception-handler . G4d4e) (raise-continuable . G4d4d) (raise . G4d4c) (eval . G2df7) (environment . G2def) (make-enumeration . G4d4b) (enum-set=? . G4d4a) (enum-set-universe . G4d49) (enum-set-union . G4d48) (enum-set-subset? . G4d47) (enum-set-projection . G4d46) (enum-set-member? . G4d45) (enum-set-intersection . G4d44) (enum-set-indexer . G4d43) (enum-set-difference . G4d42) (enum-set-constructor . G4d41) (enum-set-complement . G4d40) (enum-set->list . G4d3f) (who-condition? . G480e) (warning? . G4788) (violation? . G47c7) (undefined-violation? . G4883) (syntax-violation? . G486a) (syntax-violation-subform . G486e) (syntax-violation-form . G486c) (syntax-violation . G2e17) (simple-conditions . G4d3e) (serious-condition? . G479d) (non-continuable-violation? . G4825) (message-condition? . G4771) (make-who-condition . G480a) (make-warning . G4786) (make-violation . G47c5) (make-undefined-violation . G4881) (make-syntax-violation . G4864) (make-serious-condition . G479b) (make-non-continuable-violation . G4823) (make-message-condition . G476d) (make-lexical-violation . G484d) (make-irritants-condition . G47f0) (make-implementation-restriction-violation . G4838) (make-error . G47b0) (make-assertion-violation . G47da) (lexical-violation? . G484f) (irritants-condition? . G47f4) (implementation-restriction-violation? . G483a) (error? . G47b2) (condition-who . G4810) (condition-predicate . G4d3d) (condition-message . G4773) (condition-irritants . G47f6) (condition-accessor . G4d3c) (condition . G4d3b) (assertion-violation? . G47dc) (condition? . G4d3a) (utf32->string . G4d39) (utf16->string . G4d38) (utf8->string . G4d37) (uint-list->bytevector . G4d36) (u8-list->bytevector . G4d35) (string->utf8 . G4d34) (string->utf32 . G4d33) (string->utf16 . G4d32) (sint-list->bytevector . G4d31) (native-endianness . G4d30) (bytevector? . G4d2f) (bytevector=? . G4d2e) (bytevector-uint-set! . G4d2d) (bytevector-uint-ref . G4d2c) (bytevector-u8-set! . G4d2b) (bytevector-u8-ref . G4d2a) (bytevector-u64-set! . G4d29) (bytevector-u64-ref . G4d28) (bytevector-u64-native-set! . G4d27) (bytevector-u64-native-ref . G4d26) (bytevector-u32-set! . G4d25) (bytevector-u32-ref . G4d24) (bytevector-u32-native-set! . G4d23) (bytevector-u32-native-ref . G4d22) (bytevector-u16-set! . G4d21) (bytevector-u16-ref . G4d20) (bytevector-u16-native-set! . G4d1f) (bytevector-u16-native-ref . G4d1e) (bytevector-sint-set! . G4d1d) (bytevector-sint-ref . G4d1c) (bytevector-s8-set! . G4d1b) (bytevector-s8-ref . G4d1a) (bytevector-s64-set! . G4d19) (bytevector-s64-ref . G4d18) (bytevector-s64-native-set! . G4d17) (bytevector-s64-native-ref . G4d16) (bytevector-s32-set! . G4d15) (bytevector-s32-ref . G4d14) (bytevector-s32-native-set! . G4d13) (bytevector-s32-native-ref . G4d12) (bytevector-s16-set! . G4d11) (bytevector-s16-ref . G4d10) (bytevector-s16-native-set! . G4d0f) (bytevector-s16-native-ref . G4d0e) (bytevector-length . G4d0d) (bytevector-ieee-single-ref . G4d0c) (bytevector-ieee-single-set! . G4d0b) (bytevector-ieee-single-native-set! . G4d0a) (bytevector-ieee-single-native-ref . G4d09) (bytevector-ieee-double-set! . G4d08) (bytevector-ieee-double-ref . G4d07) (bytevector-ieee-double-native-set! . G4d06) (bytevector-ieee-double-native-ref . G4d05) (bytevector-fill! . G4d04) (bytevector-copy! . G4d03) (bytevector-copy . G4d02) (bytevector->uint-list . G4d01) (bytevector->u8-list . G4d00) (bytevector->sint-list . G4cff) (no-nans-violation? . G49bd) (no-infinities-violation? . G49a8) (make-no-nans-violation . G49bb) (make-no-infinities-violation . G49a6) (real->flonum . G4cfe) (flzero? . G4cfd) (fltruncate . G4cfc) (fltan . G4cfb) (flsqrt . G4cfa) (flsin . G4cf9) (flround . G4cf8) (flpositive? . G4cf7) (flonum? . G4cf6) (flodd? . G4cf5) (flnumerator . G4cf4) (flnegative? . G4cf3) (flnan? . G4cf2) (flmod0 . G4cf1) (flmod . G4cf0) (flmin . G4cef) (flmax . G4cee) (fllog . G4ced) (flinteger? . G4cec) (flinfinite? . G4ceb) (flfloor . G4cea) (flfinite? . G4ce9) (flexpt . G4ce8) (flexp . G4ce7) (fleven? . G4ce6) (fldiv0-and-mod0 . G4ce5) (fldiv0 . G4ce4) (fldiv-and-mod . G4ce3) (fldiv . G4ce2) (fldenominator . G4ce1) (flcos . G4ce0) (flceiling . G4cdf) (flatan . G4cde) (flasin . G4cdd) (flacos . G4cdc) (flabs . G4cdb) (fl>? . G4cda) (fl>=? . G4cd9) (fl=? . G4cd8) (fl<? . G4cd7) (fl<=? . G4cd6) (fl/ . G4cd5) (fl- . G4cd4) (fl+ . G4cd3) (fl* . G4cd2) (fixnum->flonum . G4cd1) (fxzero? . G4cd0) (fxxor . G4ccf) (fxrotate-bit-field . G4cce) (fxreverse-bit-field . G4ccd) (fxpositive? . G4ccc) (fxodd? . G4ccb) (fxnot . G4cca) (fxnegative? . G4cc9) (fxmod0 . G4cc8) (fxmod . G4cc7) (fxmin . G4cc6) (fxmax . G4cc5) (fxlength . G4cc4) (fxior . G4cc3) (fxif . G4cc2) (fxfirst-bit-set . G4cc1) (fxeven? . G4cc0) (fxdiv0-and-mod0 . G4cbf) (fxdiv0 . G4cbe) (fxdiv-and-mod . G4cbd) (fxdiv . G4cbc) (fxcopy-bit-field . G4cbb) (fxcopy-bit . G4cba) (fxbit-set? . G4cb9) (fxbit-field . G4cb8) (fxbit-count . G4cb7) (fxarithmetic-shift-right . G4cb6) (fxarithmetic-shift-left . G4cb5) (fxarithmetic-shift . G4cb4) (fxand . G4cb3) (fx>? . G4cb2) (fx>=? . G4cb1) (fx=? . G4cb0) (fx<? . G4caf) (fx<=? . G4cae) (fx-/carry . G4cad) (fx- . G4cac) (fx+/carry . G4cab) (fx+ . G4caa) (fx*/carry . G4ca9) (fx* . G4ca8) (greatest-fixnum . G4ca7) (least-fixnum . G4ca6) (fixnum-width . G4ca5) (fixnum? . G4ca4) (bitwise-rotate-bit-field . G4ca3) (bitwise-reverse-bit-field . G4ca2) (bitwise-length . G4ca1) (bitwise-if . G4ca0) (bitwise-first-bit-set . G4c9f) (bitwise-copy-bit-field . G4c9e) (bitwise-copy-bit . G4c9d) (bitwise-bit-set? . G4c9c) (bitwise-bit-field . G4c9b) (bitwise-bit-count . G4c9a) (bitwise-xor . G4c99) (bitwise-ior . G4c98) (bitwise-and . G4c97) (bitwise-not . G4c96) (bitwise-arithmetic-shift-right . G4c95) (bitwise-arithmetic-shift-left . G4c94) (bitwise-arithmetic-shift . G4c93) (zero? . G4c92) (vector? . G4c91) (vector-set! . G4c90) (vector-ref . G4c8f) (vector-map . G4c8e) (vector-length . G4c8d) (vector-for-each . G4c8c) (vector-fill! . G4c8b) (vector->list . G4c8a) (vector . G4c89) (values . G4c88) (truncate . G4c87) (tan . G4c86) (symbol? . G4c85) (symbol=? . G4c84) (symbol->string . G4c83) (substring . G4c82) (string? . G4c81) (string>? . G4c80) (string>=? . G4c7f) (string=? . G4c7e) (string<? . G4c7d) (string<=? . G4c7c) (string-ref . G4c7b) (string-length . G4c7a) (string-for-each . G4c79) (string-copy . G4c78) (string-append . G4c77) (string->symbol . G4c76) (string->number . G4c75) (string->list . G4c74) (string . G4c73) (sqrt . G4c72) (sin . G4c71) (round . G4c70) (reverse . G4c6f) (real? . G4c6e) (real-valued? . G4c6d) (real-part . G4c6c) (rationalize . G4c6b) (rational? . G4c6a) (rational-valued? . G4c69) (procedure? . G4c68) (positive? . G4c67) (pair? . G4c66) (odd? . G4c65) (numerator . G4c64) (number? . G4c63) (number->string . G4c62) (null? . G4c61) (not . G4c60) (negative? . G4c5f) (nan? . G4c5e) (min . G4c5d) (max . G4c5c) (map . G4c5b) (make-vector . G4c5a) (make-string . G4c59) (make-rectangular . G4c58) (make-polar . G4c57) (magnitude . G4c56) (log . G4c55) (list? . G4c54) (list-tail . G4c53) (list-ref . G4c52) (list->vector . G4c51) (list->string . G4c50) (list . G4c4f) (length . G4c4e) (lcm . G4c4d) (integer? . G4c4c) (integer-valued? . G4c4b) (integer->char . G4c4a) (infinite? . G4c49) (inexact? . G4c48) (inexact . G4c47) (imag-part . G4c46) (gcd . G4c45) (for-each . G4c44) (floor . G4c43) (finite? . G4c42) (expt . G4c41) (exp . G4c40) (exact? . G4c3f) (exact-integer-sqrt . G4c3e) (exact . G4c3d) (even? . G4c3c) (error . G4c3b) (eqv? . G4c3a) (equal? . G4c39) (eq? . G4c38) (dynamic-wind . G4c37) (div0-and-mod0 . G4c36) (mod0 . G4c35) (div0 . G4c34) (div-and-mod . G4c33) (mod . G4c32) (div . G4c31) (denominator . G4c30) (cos . G4c2f) (cons . G4c2e) (complex? . G4c2d) (char? . G4c2c) (char>? . G4c2b) (char>=? . G4c2a) (char=? . G4c29) (char<? . G4c28) (char<=? . G4c27) (char->integer . G4c26) (ceiling . G4c25) (call-with-values . G4c24) (call/cc . G4c23) (call-with-current-continuation . G4c22) (cddddr . G4c21) (cdddar . G4c20) (cddadr . G4c1f) (cddaar . G4c1e) (cdaddr . G4c1d) (cdadar . G4c1c) (cdaadr . G4c1b) (cdaaar . G4c1a) (cadddr . G4c19) (caddar . G4c18) (cadadr . G4c17) (cadaar . G4c16) (caaddr . G4c15) (caadar . G4c14) (caaadr . G4c13) (caaaar . G4c12) (cdddr . G4c11) (cddar . G4c10) (cdadr . G4c0f) (cdaar . G4c0e) (caddr . G4c0d) (cadar . G4c0c) (caadr . G4c0b) (caaar . G4c0a) (cddr . G4c09) (cdar . G4c08) (cadr . G4c07) (caar . G4c06) (cdr . G4c05) (car . G4c04) (boolean? . G4c03) (boolean=? . G4c02) (atan . G4c01) (assertion-violation . G4c00) (asin . G4bff) (apply . G4bfe) (append . G4bfd) (angle . G4bfc) (acos . G4bfb) (abs . G4bfa) (/ . G4bf9) (* . G4bf8) (- . G4bf7) (+ . G4bf6) (>= . G4bf5) (> . G4bf4) (= . G4bf3) (<= . G4bf2) (< . G4bf1) (library . G4bf0) (&no-nans . G4bef) (&no-infinities . G4bee) (&i/o-encoding . G4bed) (&i/o-decoding . G4bec) (&i/o-port . G4beb) (&i/o-file-does-not-exist . G4bea) (&i/o-file-already-exists . G4be9) (&i/o-file-is-read-only . G4be8) (&i/o-file-protection . G4be7) (&i/o-filename . G4be6) (&i/o-invalid-position . G4be5) (&i/o-write . G4be4) (&i/o-read . G4be3) (&i/o . G4be2) (&undefined . G4be1) (&syntax . G4be0) (&lexical . G4bdf) (&implementation-restriction . G4bde) (&non-continuable . G4bdd) (&who . G4bdc) (&irritants . G4bdb) (&assertion . G4bda) (&violation . G4bd9) (&error . G4bd8) (&serious . G4bd7) (&warning . G4bd6) (&message . G4bd5) (&condition . G4bd4) (define-condition-type . G4bd3) (define-enumeration . G4bd2) (define-record-type . G4bd1) (parent-rtd . G4bd0) (nongenerative . G4bcf) (opaque . G4bce) (sealed . G4bcd) (protocol . G4bcc) (parent . G4bcb) (immutable . G4bca) (mutable . G4bc9) (fields . G4bc8) (error-handling-mode . G4bc7) (file-options . G4bc6) (buffer-mode . G4bc5) (eol-style . G4bc4) (guard . G4bc3) (trace-define . G4bc2) (trace-lambda . G4bc1) (unsyntax-splicing . G4bc0) (unsyntax . G4bbf) (unquote-splicing . G4bbe) (unquote . G4bbd) (_ . G4bbc) (else . G4bbb) (=> . G4bba) (... . G4bb9) (assert . G4bb8) (endianness . G4bb7) (delay . G4bb6) (time . G4bb5) (do . G4bb4) (cond . G4bb3) (let* . G4bb2) (let . G4bb1) (let*-values . G4bb0) (let-values . G4baf) (identifier-syntax . G4bae) (with-syntax . G4bad) (quasisyntax . G4bac) (quasiquote . G4bab) (syntax-rules . G4baa) (include . G4ba9) (define-struct . G4ba8) (record-constructor-descriptor . G4ba7) (record-type-descriptor . G4ba6) (case . G4ba5) (parameterize . G4ba4) (unless . G4ba3) (when . G4ba2) (or . G4ba1) (and . G4ba0) (if . G4b9f) (letrec* . G4b9e) (letrec . G4b9d) (type-descriptor . G4b9c) (case-lambda . G4b9b) (lambda . G4b9a) (syntax . G4b99) (syntax-case . G4b98) (quote . G4b97) (foreign-call . G4b96) (letrec-syntax . G4b95) (let-syntax . G4b94) (set! . G4b93) (import . G4b92) (begin . G4b91) (module . G4b90) (define-syntax . G4b8f) (define . G4b8e)) '((G49c1 core-prim . &no-nans-rcd) (G49bf core-prim . &no-nans-rtd) (G49ac core-prim . &no-infinities-rcd) (G49aa core-prim . &no-infinities-rtd) (G4997 core-prim . &i/o-encoding-rcd) (G4995 core-prim . &i/o-encoding-rtd) (G497d core-prim . &i/o-decoding-rcd) (G497b core-prim . &i/o-decoding-rtd) (G4968 core-prim . &i/o-port-rcd) (G4966 core-prim . &i/o-port-rtd) (G494e core-prim . &i/o-file-does-not-exist-rcd) (G494c core-prim . &i/o-file-does-not-exist-rtd) (G4939 core-prim . &i/o-file-already-exists-rcd) (G4937 core-prim . &i/o-file-already-exists-rtd) (G4924 core-prim . &i/o-file-is-read-only-rcd) (G4922 core-prim . &i/o-file-is-read-only-rtd) (G490f core-prim . &i/o-file-protection-rcd) (G490d core-prim . &i/o-file-protection-rtd) (G48fa core-prim . &i/o-filename-rcd) (G48f8 core-prim . &i/o-filename-rtd) (G48e0 core-prim . &i/o-invalid-position-rcd) (G48de core-prim . &i/o-invalid-position-rtd) (G48c6 core-prim . &i/o-write-rcd) (G48c4 core-prim . &i/o-write-rtd) (G48b1 core-prim . &i/o-read-rcd) (G48af core-prim . &i/o-read-rtd) (G489c core-prim . &i/o-rcd) (G489a core-prim . &i/o-rtd) (G4887 core-prim . &undefined-rcd) (G4885 core-prim . &undefined-rtd) (G4872 core-prim . &syntax-rcd) (G4870 core-prim . &syntax-rtd) (G4853 core-prim . &lexical-rcd) (G4851 core-prim . &lexical-rtd) (G483e core-prim . &implementation-restriction-rcd) (G483c core-prim . &implementation-restriction-rtd) (G4829 core-prim . &non-continuable-rcd) (G4827 core-prim . &non-continuable-rtd) (G4814 core-prim . &who-rcd) (G4812 core-prim . &who-rtd) (G47fa core-prim . &irritants-rcd) (G47f8 core-prim . &irritants-rtd) (G47e0 core-prim . &assertion-rcd) (G47de core-prim . &assertion-rtd) (G47cb core-prim . &violation-rcd) (G47c9 core-prim . &violation-rtd) (G47b6 core-prim . &error-rcd) (G47b4 core-prim . &error-rtd) (G47a1 core-prim . &serious-rcd) (G479f core-prim . &serious-rtd) (G478c core-prim . &warning-rcd) (G478a core-prim . &warning-rtd) (G4777 core-prim . &message-rcd) (G4775 core-prim . &message-rtd) (G471c core-prim . &condition-rcd) (G471a core-prim . &condition-rtd) (G2e13 core-prim . syntax-error) (G2d2c core-prim . syntax-dispatch) (G4e4c core-prim . pretty-print) (G4e4b core-prim . eval-core) (G4e4a core-prim . set-symbol-value!) (G4e49 core-prim . symbol-value) (G4e48 core-prim . gensym) (G4e47 core-prim . void) (G4ac8 core-prim . load) (G2e23 core-prim . interaction-environment) (G4e46 core-prim . char-ready?) (G4e45 core-prim . regexp?) (G4e44 core-prim . read-line) (G4e43 core-prim . ungensym) (G4e42 core-prim . alist->eq-hash-table) (G4e41 core-prim . assoc-ref) (G4e40 core-prim . print) (G4e3f core-prim . format) (G4e3e core-prim . host-os) (G27e6 core-prim . library-path) (G4e3d core-prim . standard-library-path) (G4e3c core-prim . file-newer?) (G4e3b core-prim . stat-mtime) (G4e3a core-prim . write-to-file) (G4e39 core-prim . file->list) (G4e38 core-prim . file->string) (G4e37 core-prim . digit->integer) (G4e36 core-prim . call-with-string-input-port) (G4e35 core-prim . call-with-string-io) (G4e34 core-prim . string-split) (G4e33 core-prim . bytevector-for-each) (G4e32 core-prim . string->regexp) (G4e31 core-prim . rxmatch) (G4e30 core-prim . regexp-replace-all) (G4e2f core-prim . hashtable-for-each) (G4e2e core-prim . call-process) (G4e2d core-prim . local-tz-offset) (G4e2c core-prim . microseconds) (G4e2b core-prim . readdir) (G4e2a core-prim . set-current-directory!) (G4e29 core-prim . expand-path) (G4e28 core-prim . current-directory) (G4e27 core-prim . %spawn) (G4e26 core-prim . %waitpid) (G4e25 core-prim . %ffi-supported?) (G4e24 core-prim . %ffi-pointer-ref) (G4e23 core-prim . %ffi-pointer->string) (G4e22 core-prim . %ffi-call->string-or-zero) (G4e21 core-prim . %ffi-call->double) (G4e20 core-prim . %ffi-call->void*) (G4e1f core-prim . %ffi-call->void) (G4e1e core-prim . %ffi-call->int) (G4e1d core-prim . %ffi-lookup) (G4e1c core-prim . %ffi-open) (G4e1b core-prim . %fork) (G4e1a core-prim . %pipe) (G4e19 core-prim . p) (G4e18 core-prim . get-environment-variables) (G4e17 core-prim . get-environment-variable) (G4e16 core-prim . get-timeofday) (G4e15 core-prim . get-command-line) (G4e14 core-prim . sys-display) (G4e13 core-prim . source-info) (G4e12 core-prim . make-compiler-instruction) (G4e11 core-prim . make-instruction) (G4e10 core-prim . set-source-info!) (G4e0f core-prim . bignum?) (G4e0e core-prim . fast-equal?) (G4e0d core-prim . fasl-read) (G4e0c core-prim . fasl-write) (G261d core-prim . make-parameter) (G4e0b core-prim . string-upcase) (G4e0a core-prim . string-titlecase) (G4e09 core-prim . string-normalize-nfkd) (G4e08 core-prim . string-normalize-nfkc) (G4e07 core-prim . string-normalize-nfd) (G4e06 core-prim . string-normalize-nfc) (G4e05 core-prim . string-foldcase) (G4e04 core-prim . string-downcase) (G4e03 core-prim . string-ci>?) (G4e02 core-prim . string-ci>=?) (G4e01 core-prim . string-ci=?) (G4e00 core-prim . string-ci<?) (G4dff core-prim . string-ci<=?) (G4dfe core-prim . char-whitespace?) (G4dfd core-prim . char-upper-case?) (G4dfc core-prim . char-title-case?) (G4dfb core-prim . char-numeric?) (G4dfa core-prim . char-lower-case?) (G4df9 core-prim . char-general-category) (G4df8 core-prim . char-upcase) (G4df7 core-prim . char-titlecase) (G4df6 core-prim . char-foldcase) (G4df5 core-prim . char-downcase) (G4df4 core-prim . char-ci>?) (G4df3 core-prim . char-ci>=?) (G4df2 core-prim . char-ci=?) (G4df1 core-prim . char-ci<?) (G4df0 core-prim . char-ci<=?) (G4def core-prim . char-alphabetic?) (G2b73 core-prim . make-variable-transformer) (G2e19 core-prim . identifier?) (G2e05 core-prim . generate-temporaries) (G2e07 core-prim . free-identifier=?) (G2e1d core-prim . syntax->datum) (G2e1b core-prim . datum->syntax) (G2e09 core-prim . bound-identifier=?) (G4dee core-prim . record-type-descriptor?) (G4ded core-prim . record-predicate) (G4dec core-prim . record-mutator) (G4deb core-prim . record-constructor) (G4dea core-prim . record-accessor) (G4de9 core-prim . make-record-type-descriptor) (G4de8 core-prim . make-record-constructor-descriptor) (G4de7 core-prim . record?) (G4de6 core-prim . record-type-uid) (G4de5 core-prim . record-type-sealed?) (G4de4 core-prim . record-type-parent) (G4de3 core-prim . record-type-opaque?) (G4de2 core-prim . record-type-name) (G4de1 core-prim . record-type-generative?) (G4de0 core-prim . record-type-field-names) (G4ddf core-prim . record-rtd) (G4dde core-prim . record-field-mutable?) (G4ddd core-prim . delete-file) (G4ddc core-prim . file-exists?) (G4ddb core-prim . vector-sort!) (G4dda core-prim . vector-sort) (G4dd9 core-prim . list-sort) (G4dd8 core-prim . symbol-hash) (G4dd7 core-prim . string-ci-hash) (G4dd6 core-prim . string-hash) (G4dd5 core-prim . equal-hash) (G4dd4 core-prim . hashtable-equivalence-function) (G4dd3 core-prim . make-hashtable) (G4dd2 core-prim . hashtable-hash-function) (G4dd1 core-prim . make-eqv-hashtable) (G4dd0 core-prim . make-eq-hashtable) (G4dcf core-prim . hashtable?) (G4dce core-prim . hashtable-update!) (G4dcd core-prim . hashtable-size) (G4dcc core-prim . hashtable-set!) (G4dcb core-prim . hashtable-ref) (G4dca core-prim . hashtable-mutable?) (G4dc9 core-prim . hashtable-keys) (G4dc8 core-prim . hashtable-entries) (G4dc7 core-prim . hashtable-delete!) (G4dc6 core-prim . hashtable-copy) (G4dc5 core-prim . hashtable-contains?) (G4dc4 core-prim . hashtable-clear!) (G4dc3 core-prim . call-with-output-file) (G4dc2 core-prim . call-with-input-file) (G4dc1 core-prim . write-char) (G4dc0 core-prim . write) (G4dbf core-prim . with-output-to-file) (G4dbe core-prim . with-input-from-file) (G4dbd core-prim . read-char) (G4dbc core-prim . read) (G4dbb core-prim . peek-char) (G4dba core-prim . open-output-file) (G4db9 core-prim . open-input-file) (G4db8 core-prim . newline) (G4db7 core-prim . display) (G4db6 core-prim . close-output-port) (G4db5 core-prim . close-input-port) (G4db4 core-prim . eof-object?) (G4db3 core-prim . eof-object) (G4db2 core-prim . current-error-port) (G4db1 core-prim . current-output-port) (G4db0 core-prim . current-input-port) (G4daf core-prim . output-port?) (G4dae core-prim . input-port?) (G4dad core-prim . utf-8-codec) (G4dac core-prim . utf-16-codec) (G4dab core-prim . transcoder-error-handling-mode) (G4daa core-prim . transcoder-eol-style) (G4da9 core-prim . transcoder-codec) (G4da8 core-prim . transcoded-port) (G4da7 core-prim . textual-port?) (G4da6 core-prim . string->bytevector) (G4da5 core-prim . standard-output-port) (G4da4 core-prim . standard-input-port) (G4da3 core-prim . standard-error-port) (G4da2 core-prim . set-port-position!) (G4da1 core-prim . put-u8) (G4da0 core-prim . put-string) (G4d9f core-prim . put-datum) (G4d9e core-prim . put-char) (G4d9d core-prim . put-bytevector) (G4d9c core-prim . port?) (G4d9b core-prim . port-transcoder) (G4d9a core-prim . port-position) (G4d99 core-prim . port-has-set-port-position!?) (G4d98 core-prim . port-has-port-position?) (G4d97 core-prim . port-eof?) (G4d96 core-prim . output-port-buffer-mode) (G4d95 core-prim . open-string-output-port) (G4d94 core-prim . open-string-input-port) (G4d93 core-prim . open-file-output-port) (G4d92 core-prim . open-file-input/output-port) (G4d91 core-prim . open-file-input-port) (G4d90 core-prim . open-bytevector-output-port) (G4d8f core-prim . open-bytevector-input-port) (G4d8e core-prim . native-transcoder) (G4d8d core-prim . native-eol-style) (G4d8c core-prim . make-transcoder) (G4d8b core-prim . latin-1-codec) (G48c0 core-prim . make-i/o-write-error) (G48ab core-prim . make-i/o-read-error) (G495e core-prim . make-i/o-port-error) (G48d6 core-prim . make-i/o-invalid-position-error) (G48f0 core-prim . make-i/o-filename-error) (G4909 core-prim . make-i/o-file-protection-error) (G491e core-prim . make-i/o-file-is-read-only-error) (G4948 core-prim . make-i/o-file-does-not-exist-error) (G4933 core-prim . make-i/o-file-already-exists-error) (G4896 core-prim . make-i/o-error) (G498d core-prim . make-i/o-encoding-error) (G4977 core-prim . make-i/o-decoding-error) (G4d8a core-prim . make-custom-textual-output-port) (G4d89 core-prim . make-custom-textual-input/output-port) (G4d88 core-prim . make-custom-textual-input-port) (G4d87 core-prim . make-custom-binary-output-port) (G4d86 core-prim . make-custom-binary-input/output-port) (G4d85 core-prim . make-custom-binary-input-port) (G4d84 core-prim . make-bytevector) (G4d83 core-prim . lookahead-u8) (G4d82 core-prim . lookahead-char) (G48c2 core-prim . i/o-write-error?) (G48ad core-prim . i/o-read-error?) (G4962 core-prim . i/o-port-error?) (G48da core-prim . i/o-invalid-position-error?) (G48f4 core-prim . i/o-filename-error?) (G490b core-prim . i/o-file-protection-error?) (G4920 core-prim . i/o-file-is-read-only-error?) (G494a core-prim . i/o-file-does-not-exist-error?) (G4935 core-prim . i/o-file-already-exists-error?) (G4898 core-prim . i/o-error?) (G48dc core-prim . i/o-error-position) (G4964 core-prim . i/o-error-port) (G48f6 core-prim . i/o-error-filename) (G4991 core-prim . i/o-encoding-error?) (G4993 core-prim . i/o-encoding-error-char) (G4979 core-prim . i/o-decoding-error?) (G4d81 core-prim . get-u8) (G4d80 core-prim . get-string-n!) (G4d7f core-prim . get-string-n) (G4d7e core-prim . get-string-all) (G4d7d core-prim . get-line) (G4d7c core-prim . get-datum) (G4d7b core-prim . get-char) (G4d7a core-prim . get-bytevector-some) (G4d79 core-prim . get-bytevector-n!) (G4d78 core-prim . get-bytevector-n) (G4d77 core-prim . get-bytevector-all) (G4d76 core-prim . flush-output-port) (G4d75 core-prim . close-port) (G2df3 core-prim . scheme-report-environment) (G4d74 core-prim . quotient) (G2df1 core-prim . null-environment) (G4d73 core-prim . remainder) (G4d72 core-prim . modulo) (G4d71 core-prim . inexact->exact) (G4d70 core-prim . force) (G4d6f core-prim . exact->inexact) (G4d6e core-prim . make-promise) (G4d6d core-prim . exit) (G4ac2 core-prim . command-line) (G4d6c core-prim . string-fill!) (G4d6b core-prim . string-set!) (G4d6a core-prim . set-cdr!) (G4d69 core-prim . set-car!) (G4d68 core-prim . remove) (G4d67 core-prim . remv) (G4d66 core-prim . remp) (G4d65 core-prim . remq) (G4d64 core-prim . partition) (G4d63 core-prim . memv) (G4d62 core-prim . memq) (G4d61 core-prim . memp) (G4d60 core-prim . member) (G4d5f core-prim . exists) (G4d5e core-prim . for-all) (G4d5d core-prim . fold-right) (G4d5c core-prim . fold-left) (G4d5b core-prim . find) (G4d5a core-prim . filter) (G4d59 core-prim . cons*) (G4d58 core-prim . assv) (G4d57 core-prim . assq) (G4d56 core-prim . assp) (G4d55 core-prim . assoc) (G4d54 core-prim . call-with-string-output-port) (G4d53 core-prim . call-with-port) (G4d52 core-prim . call-with-bytevector-output-port) (G4d51 core-prim . bytevector->string) (G4d50 core-prim . buffer-mode?) (G4d4f core-prim . binary-port?) (G4d4e core-prim . with-exception-handler) (G4d4d core-prim . raise-continuable) (G4d4c core-prim . raise) (G2df7 core-prim . eval) (G2def core-prim . environment) (G4d4b core-prim . make-enumeration) (G4d4a core-prim . enum-set=?) (G4d49 core-prim . enum-set-universe) (G4d48 core-prim . enum-set-union) (G4d47 core-prim . enum-set-subset?) (G4d46 core-prim . enum-set-projection) (G4d45 core-prim . enum-set-member?) (G4d44 core-prim . enum-set-intersection) (G4d43 core-prim . enum-set-indexer) (G4d42 core-prim . enum-set-difference) (G4d41 core-prim . enum-set-constructor) (G4d40 core-prim . enum-set-complement) (G4d3f core-prim . enum-set->list) (G480e core-prim . who-condition?) (G4788 core-prim . warning?) (G47c7 core-prim . violation?) (G4883 core-prim . undefined-violation?) (G486a core-prim . syntax-violation?) (G486e core-prim . syntax-violation-subform) (G486c core-prim . syntax-violation-form) (G2e17 core-prim . syntax-violation) (G4d3e core-prim . simple-conditions) (G479d core-prim . serious-condition?) (G4825 core-prim . non-continuable-violation?) (G4771 core-prim . message-condition?) (G480a core-prim . make-who-condition) (G4786 core-prim . make-warning) (G47c5 core-prim . make-violation) (G4881 core-prim . make-undefined-violation) (G4864 core-prim . make-syntax-violation) (G479b core-prim . make-serious-condition) (G4823 core-prim . make-non-continuable-violation) (G476d core-prim . make-message-condition) (G484d core-prim . make-lexical-violation) (G47f0 core-prim . make-irritants-condition) (G4838 core-prim . make-implementation-restriction-violation) (G47b0 core-prim . make-error) (G47da core-prim . make-assertion-violation) (G484f core-prim . lexical-violation?) (G47f4 core-prim . irritants-condition?) (G483a core-prim . implementation-restriction-violation?) (G47b2 core-prim . error?) (G4810 core-prim . condition-who) (G4d3d core-prim . condition-predicate) (G4773 core-prim . condition-message) (G47f6 core-prim . condition-irritants) (G4d3c core-prim . condition-accessor) (G4d3b core-prim . condition) (G47dc core-prim . assertion-violation?) (G4d3a core-prim . condition?) (G4d39 core-prim . utf32->string) (G4d38 core-prim . utf16->string) (G4d37 core-prim . utf8->string) (G4d36 core-prim . uint-list->bytevector) (G4d35 core-prim . u8-list->bytevector) (G4d34 core-prim . string->utf8) (G4d33 core-prim . string->utf32) (G4d32 core-prim . string->utf16) (G4d31 core-prim . sint-list->bytevector) (G4d30 core-prim . native-endianness) (G4d2f core-prim . bytevector?) (G4d2e core-prim . bytevector=?) (G4d2d core-prim . bytevector-uint-set!) (G4d2c core-prim . bytevector-uint-ref) (G4d2b core-prim . bytevector-u8-set!) (G4d2a core-prim . bytevector-u8-ref) (G4d29 core-prim . bytevector-u64-set!) (G4d28 core-prim . bytevector-u64-ref) (G4d27 core-prim . bytevector-u64-native-set!) (G4d26 core-prim . bytevector-u64-native-ref) (G4d25 core-prim . bytevector-u32-set!) (G4d24 core-prim . bytevector-u32-ref) (G4d23 core-prim . bytevector-u32-native-set!) (G4d22 core-prim . bytevector-u32-native-ref) (G4d21 core-prim . bytevector-u16-set!) (G4d20 core-prim . bytevector-u16-ref) (G4d1f core-prim . bytevector-u16-native-set!) (G4d1e core-prim . bytevector-u16-native-ref) (G4d1d core-prim . bytevector-sint-set!) (G4d1c core-prim . bytevector-sint-ref) (G4d1b core-prim . bytevector-s8-set!) (G4d1a core-prim . bytevector-s8-ref) (G4d19 core-prim . bytevector-s64-set!) (G4d18 core-prim . bytevector-s64-ref) (G4d17 core-prim . bytevector-s64-native-set!) (G4d16 core-prim . bytevector-s64-native-ref) (G4d15 core-prim . bytevector-s32-set!) (G4d14 core-prim . bytevector-s32-ref) (G4d13 core-prim . bytevector-s32-native-set!) (G4d12 core-prim . bytevector-s32-native-ref) (G4d11 core-prim . bytevector-s16-set!) (G4d10 core-prim . bytevector-s16-ref) (G4d0f core-prim . bytevector-s16-native-set!) (G4d0e core-prim . bytevector-s16-native-ref) (G4d0d core-prim . bytevector-length) (G4d0c core-prim . bytevector-ieee-single-ref) (G4d0b core-prim . bytevector-ieee-single-set!) (G4d0a core-prim . bytevector-ieee-single-native-set!) (G4d09 core-prim . bytevector-ieee-single-native-ref) (G4d08 core-prim . bytevector-ieee-double-set!) (G4d07 core-prim . bytevector-ieee-double-ref) (G4d06 core-prim . bytevector-ieee-double-native-set!) (G4d05 core-prim . bytevector-ieee-double-native-ref) (G4d04 core-prim . bytevector-fill!) (G4d03 core-prim . bytevector-copy!) (G4d02 core-prim . bytevector-copy) (G4d01 core-prim . bytevector->uint-list) (G4d00 core-prim . bytevector->u8-list) (G4cff core-prim . bytevector->sint-list) (G49bd core-prim . no-nans-violation?) (G49a8 core-prim . no-infinities-violation?) (G49bb core-prim . make-no-nans-violation) (G49a6 core-prim . make-no-infinities-violation) (G4cfe core-prim . real->flonum) (G4cfd core-prim . flzero?) (G4cfc core-prim . fltruncate) (G4cfb core-prim . fltan) (G4cfa core-prim . flsqrt) (G4cf9 core-prim . flsin) (G4cf8 core-prim . flround) (G4cf7 core-prim . flpositive?) (G4cf6 core-prim . flonum?) (G4cf5 core-prim . flodd?) (G4cf4 core-prim . flnumerator) (G4cf3 core-prim . flnegative?) (G4cf2 core-prim . flnan?) (G4cf1 core-prim . flmod0) (G4cf0 core-prim . flmod) (G4cef core-prim . flmin) (G4cee core-prim . flmax) (G4ced core-prim . fllog) (G4cec core-prim . flinteger?) (G4ceb core-prim . flinfinite?) (G4cea core-prim . flfloor) (G4ce9 core-prim . flfinite?) (G4ce8 core-prim . flexpt) (G4ce7 core-prim . flexp) (G4ce6 core-prim . fleven?) (G4ce5 core-prim . fldiv0-and-mod0) (G4ce4 core-prim . fldiv0) (G4ce3 core-prim . fldiv-and-mod) (G4ce2 core-prim . fldiv) (G4ce1 core-prim . fldenominator) (G4ce0 core-prim . flcos) (G4cdf core-prim . flceiling) (G4cde core-prim . flatan) (G4cdd core-prim . flasin) (G4cdc core-prim . flacos) (G4cdb core-prim . flabs) (G4cda core-prim . fl>?) (G4cd9 core-prim . fl>=?) (G4cd8 core-prim . fl=?) (G4cd7 core-prim . fl<?) (G4cd6 core-prim . fl<=?) (G4cd5 core-prim . fl/) (G4cd4 core-prim . fl-) (G4cd3 core-prim . fl+) (G4cd2 core-prim . fl*) (G4cd1 core-prim . fixnum->flonum) (G4cd0 core-prim . fxzero?) (G4ccf core-prim . fxxor) (G4cce core-prim . fxrotate-bit-field) (G4ccd core-prim . fxreverse-bit-field) (G4ccc core-prim . fxpositive?) (G4ccb core-prim . fxodd?) (G4cca core-prim . fxnot) (G4cc9 core-prim . fxnegative?) (G4cc8 core-prim . fxmod0) (G4cc7 core-prim . fxmod) (G4cc6 core-prim . fxmin) (G4cc5 core-prim . fxmax) (G4cc4 core-prim . fxlength) (G4cc3 core-prim . fxior) (G4cc2 core-prim . fxif) (G4cc1 core-prim . fxfirst-bit-set) (G4cc0 core-prim . fxeven?) (G4cbf core-prim . fxdiv0-and-mod0) (G4cbe core-prim . fxdiv0) (G4cbd core-prim . fxdiv-and-mod) (G4cbc core-prim . fxdiv) (G4cbb core-prim . fxcopy-bit-field) (G4cba core-prim . fxcopy-bit) (G4cb9 core-prim . fxbit-set?) (G4cb8 core-prim . fxbit-field) (G4cb7 core-prim . fxbit-count) (G4cb6 core-prim . fxarithmetic-shift-right) (G4cb5 core-prim . fxarithmetic-shift-left) (G4cb4 core-prim . fxarithmetic-shift) (G4cb3 core-prim . fxand) (G4cb2 core-prim . fx>?) (G4cb1 core-prim . fx>=?) (G4cb0 core-prim . fx=?) (G4caf core-prim . fx<?) (G4cae core-prim . fx<=?) (G4cad core-prim . fx-/carry) (G4cac core-prim . fx-) (G4cab core-prim . fx+/carry) (G4caa core-prim . fx+) (G4ca9 core-prim . fx*/carry) (G4ca8 core-prim . fx*) (G4ca7 core-prim . greatest-fixnum) (G4ca6 core-prim . least-fixnum) (G4ca5 core-prim . fixnum-width) (G4ca4 core-prim . fixnum?) (G4ca3 core-prim . bitwise-rotate-bit-field) (G4ca2 core-prim . bitwise-reverse-bit-field) (G4ca1 core-prim . bitwise-length) (G4ca0 core-prim . bitwise-if) (G4c9f core-prim . bitwise-first-bit-set) (G4c9e core-prim . bitwise-copy-bit-field) (G4c9d core-prim . bitwise-copy-bit) (G4c9c core-prim . bitwise-bit-set?) (G4c9b core-prim . bitwise-bit-field) (G4c9a core-prim . bitwise-bit-count) (G4c99 core-prim . bitwise-xor) (G4c98 core-prim . bitwise-ior) (G4c97 core-prim . bitwise-and) (G4c96 core-prim . bitwise-not) (G4c95 core-prim . bitwise-arithmetic-shift-right) (G4c94 core-prim . bitwise-arithmetic-shift-left) (G4c93 core-prim . bitwise-arithmetic-shift) (G4c92 core-prim . zero?) (G4c91 core-prim . vector?) (G4c90 core-prim . vector-set!) (G4c8f core-prim . vector-ref) (G4c8e core-prim . vector-map) (G4c8d core-prim . vector-length) (G4c8c core-prim . vector-for-each) (G4c8b core-prim . vector-fill!) (G4c8a core-prim . vector->list) (G4c89 core-prim . vector) (G4c88 core-prim . values) (G4c87 core-prim . truncate) (G4c86 core-prim . tan) (G4c85 core-prim . symbol?) (G4c84 core-prim . symbol=?) (G4c83 core-prim . symbol->string) (G4c82 core-prim . substring) (G4c81 core-prim . string?) (G4c80 core-prim . string>?) (G4c7f core-prim . string>=?) (G4c7e core-prim . string=?) (G4c7d core-prim . string<?) (G4c7c core-prim . string<=?) (G4c7b core-prim . string-ref) (G4c7a core-prim . string-length) (G4c79 core-prim . string-for-each) (G4c78 core-prim . string-copy) (G4c77 core-prim . string-append) (G4c76 core-prim . string->symbol) (G4c75 core-prim . string->number) (G4c74 core-prim . string->list) (G4c73 core-prim . string) (G4c72 core-prim . sqrt) (G4c71 core-prim . sin) (G4c70 core-prim . round) (G4c6f core-prim . reverse) (G4c6e core-prim . real?) (G4c6d core-prim . real-valued?) (G4c6c core-prim . real-part) (G4c6b core-prim . rationalize) (G4c6a core-prim . rational?) (G4c69 core-prim . rational-valued?) (G4c68 core-prim . procedure?) (G4c67 core-prim . positive?) (G4c66 core-prim . pair?) (G4c65 core-prim . odd?) (G4c64 core-prim . numerator) (G4c63 core-prim . number?) (G4c62 core-prim . number->string) (G4c61 core-prim . null?) (G4c60 core-prim . not) (G4c5f core-prim . negative?) (G4c5e core-prim . nan?) (G4c5d core-prim . min) (G4c5c core-prim . max) (G4c5b core-prim . map) (G4c5a core-prim . make-vector) (G4c59 core-prim . make-string) (G4c58 core-prim . make-rectangular) (G4c57 core-prim . make-polar) (G4c56 core-prim . magnitude) (G4c55 core-prim . log) (G4c54 core-prim . list?) (G4c53 core-prim . list-tail) (G4c52 core-prim . list-ref) (G4c51 core-prim . list->vector) (G4c50 core-prim . list->string) (G4c4f core-prim . list) (G4c4e core-prim . length) (G4c4d core-prim . lcm) (G4c4c core-prim . integer?) (G4c4b core-prim . integer-valued?) (G4c4a core-prim . integer->char) (G4c49 core-prim . infinite?) (G4c48 core-prim . inexact?) (G4c47 core-prim . inexact) (G4c46 core-prim . imag-part) (G4c45 core-prim . gcd) (G4c44 core-prim . for-each) (G4c43 core-prim . floor) (G4c42 core-prim . finite?) (G4c41 core-prim . expt) (G4c40 core-prim . exp) (G4c3f core-prim . exact?) (G4c3e core-prim . exact-integer-sqrt) (G4c3d core-prim . exact) (G4c3c core-prim . even?) (G4c3b core-prim . error) (G4c3a core-prim . eqv?) (G4c39 core-prim . equal?) (G4c38 core-prim . eq?) (G4c37 core-prim . dynamic-wind) (G4c36 core-prim . div0-and-mod0) (G4c35 core-prim . mod0) (G4c34 core-prim . div0) (G4c33 core-prim . div-and-mod) (G4c32 core-prim . mod) (G4c31 core-prim . div) (G4c30 core-prim . denominator) (G4c2f core-prim . cos) (G4c2e core-prim . cons) (G4c2d core-prim . complex?) (G4c2c core-prim . char?) (G4c2b core-prim . char>?) (G4c2a core-prim . char>=?) (G4c29 core-prim . char=?) (G4c28 core-prim . char<?) (G4c27 core-prim . char<=?) (G4c26 core-prim . char->integer) (G4c25 core-prim . ceiling) (G4c24 core-prim . call-with-values) (G4c23 core-prim . call/cc) (G4c22 core-prim . call-with-current-continuation) (G4c21 core-prim . cddddr) (G4c20 core-prim . cdddar) (G4c1f core-prim . cddadr) (G4c1e core-prim . cddaar) (G4c1d core-prim . cdaddr) (G4c1c core-prim . cdadar) (G4c1b core-prim . cdaadr) (G4c1a core-prim . cdaaar) (G4c19 core-prim . cadddr) (G4c18 core-prim . caddar) (G4c17 core-prim . cadadr) (G4c16 core-prim . cadaar) (G4c15 core-prim . caaddr) (G4c14 core-prim . caadar) (G4c13 core-prim . caaadr) (G4c12 core-prim . caaaar) (G4c11 core-prim . cdddr) (G4c10 core-prim . cddar) (G4c0f core-prim . cdadr) (G4c0e core-prim . cdaar) (G4c0d core-prim . caddr) (G4c0c core-prim . cadar) (G4c0b core-prim . caadr) (G4c0a core-prim . caaar) (G4c09 core-prim . cddr) (G4c08 core-prim . cdar) (G4c07 core-prim . cadr) (G4c06 core-prim . caar) (G4c05 core-prim . cdr) (G4c04 core-prim . car) (G4c03 core-prim . boolean?) (G4c02 core-prim . boolean=?) (G4c01 core-prim . atan) (G4c00 core-prim . assertion-violation) (G4bff core-prim . asin) (G4bfe core-prim . apply) (G4bfd core-prim . append) (G4bfc core-prim . angle) (G4bfb core-prim . acos) (G4bfa core-prim . abs) (G4bf9 core-prim . /) (G4bf8 core-prim . *) (G4bf7 core-prim . -) (G4bf6 core-prim . +) (G4bf5 core-prim . >=) (G4bf4 core-prim . >) (G4bf3 core-prim . =) (G4bf2 core-prim . <=) (G4bf1 core-prim . <) (G4bf0 core-prim . library) (G4bef $core-rtd &no-nans-rtd &no-nans-rcd) (G4bee $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4bed $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4bec $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4beb $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4bea $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4be9 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4be8 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4be7 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4be6 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4be5 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4be4 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4be3 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4be2 $core-rtd &i/o-rtd &i/o-rcd) (G4be1 $core-rtd &undefined-rtd &undefined-rcd) (G4be0 $core-rtd &syntax-rtd &syntax-rcd) (G4bdf $core-rtd &lexical-rtd &lexical-rcd) (G4bde $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4bdd $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4bdc $core-rtd &who-rtd &who-rcd) (G4bdb $core-rtd &irritants-rtd &irritants-rcd) (G4bda $core-rtd &assertion-rtd &assertion-rcd) (G4bd9 $core-rtd &violation-rtd &violation-rcd) (G4bd8 $core-rtd &error-rtd &error-rcd) (G4bd7 $core-rtd &serious-rtd &serious-rcd) (G4bd6 $core-rtd &warning-rtd &warning-rcd) (G4bd5 $core-rtd &message-rtd &message-rcd) (G4bd4 $core-rtd &condition-rtd &condition-rcd) (G4bd3 macro . define-condition-type) (G4bd2 macro . define-enumeration) (G4bd1 macro . define-record-type) (G4bd0 macro . parent-rtd) (G4bcf macro . nongenerative) (G4bce macro . opaque) (G4bcd macro . sealed) (G4bcc macro . protocol) (G4bcb macro . parent) (G4bca macro . immutable) (G4bc9 macro . mutable) (G4bc8 macro . fields) (G4bc7 macro . error-handling-mode) (G4bc6 macro . file-options) (G4bc5 macro . buffer-mode) (G4bc4 macro . eol-style) (G4bc3 macro . guard) (G4bc2 macro . trace-define) (G4bc1 macro . trace-lambda) (G4bc0 macro . unsyntax-splicing) (G4bbf macro . unsyntax) (G4bbe macro . unquote-splicing) (G4bbd macro . unquote) (G4bbc macro . _) (G4bbb macro . else) (G4bba macro . =>) (G4bb9 macro . ...) (G4bb8 macro . assert) (G4bb7 macro . endianness) (G4bb6 macro . delay) (G4bb5 macro . time) (G4bb4 macro . do) (G4bb3 macro . cond) (G4bb2 macro . let*) (G4bb1 macro . let) (G4bb0 macro . let*-values) (G4baf macro . let-values) (G4bae macro . identifier-syntax) (G4bad macro . with-syntax) (G4bac macro . quasisyntax) (G4bab macro . quasiquote) (G4baa macro . syntax-rules) (G4ba9 macro . include) (G4ba8 macro . define-struct) (G4ba7 core-macro . record-constructor-descriptor) (G4ba6 core-macro . record-type-descriptor) (G4ba5 macro . case) (G4ba4 macro . parameterize) (G4ba3 macro . unless) (G4ba2 macro . when) (G4ba1 core-macro . or) (G4ba0 core-macro . and) (G4b9f core-macro . if) (G4b9e core-macro . letrec*) (G4b9d core-macro . letrec) (G4b9c core-macro . type-descriptor) (G4b9b core-macro . case-lambda) (G4b9a core-macro . lambda) (G4b99 core-macro . syntax) (G4b98 core-macro . syntax-case) (G4b97 core-macro . quote) (G4b96 core-macro . foreign-call) (G4b95 letrec-syntax) (G4b94 let-syntax) (G4b93 set!) (G4b92 import) (G4b91 begin) (G4b90 module) (G4b8f define-syntax) (G4b8e define)) values values '#f '#f '#f '#f) (G2962@G2807@install-library 'G4e6d '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G4e4c) (eval-core . G4e4b) (set-symbol-value! . G4e4a) (symbol-value . G4e49) (gensym . G4e48) (void . G4e47)) '() values values '#f '#f '#f '#f) (G2962@G2807@install-library 'G4e6e '(mosh) '() '() '() '() '((set-symbol-value! . G4e4a) (symbol-value . G4e49) (read-line . G4e44) (ungensym . G4e43) (alist->eq-hash-table . G4e42) (assoc-ref . G4e41) (print . G4e40) (format . G4e3f) (host-os . G4e3e) (library-path . G27e6) (standard-library-path . G4e3d) (file-newer? . G4e3c) (stat-mtime . G4e3b) (write-to-file . G4e3a) (file->list . G4e39) (file->string . G4e38) (digit->integer . G4e37) (call-with-string-input-port . G4e36) (call-with-string-io . G4e35) (string-split . G4e34) (bytevector-for-each . G4e33) (string->regexp . G4e32) (rxmatch . G4e31) (regexp-replace-all . G4e30) (hashtable-for-each . G4e2f) (readdir . G4e2b) (set-current-directory! . G4e2a) (expand-path . G4e29) (current-directory . G4e28) (p . G4e19) (get-timeofday . G4e16) (get-command-line . G4e15) (sys-display . G4e14) (source-info . G4e13) (make-compiler-instruction . G4e12) (make-instruction . G4e11) (set-source-info! . G4e10) (bignum? . G4e0f) (fast-equal? . G4e0e) (fasl-read . G4e0d) (fasl-write . G4e0c) (include . G4ba9)) '() values values '#f '#f '#f '#f) (G2962@G2807@install-library 'G4e6f '(system) '() '() '() '() '((call-process . G4e2e) (local-tz-offset . G4e2d) (microseconds . G4e2c) (expand-path . G4e29) (%spawn . G4e27) (%waitpid . G4e26) (%ffi-supported? . G4e25) (%ffi-pointer-ref . G4e24) (%ffi-pointer->string . G4e23) (%ffi-call->string-or-zero . G4e22) (%ffi-call->double . G4e21) (%ffi-call->void* . G4e20) (%ffi-call->void . G4e1f) (%ffi-call->int . G4e1e) (%ffi-lookup . G4e1d) (%ffi-open . G4e1c) (%fork . G4e1b) (%pipe . G4e1a) (get-environment-variables . G4e18) (get-environment-variable . G4e17) (make-parameter . G261d) (parameterize . G4ba4)) '() values values '#f '#f '#f '#f))
((lambda (G4ab7@add-library-path! G4ab9@parse-and-add-library-path G4abb@for-each-with-index G4abd@conditioon-printer G4abf@repl G4ac1@trace-printer G4ac3@command-line G4ac5@local-library-path G4ac7@load/args G4ac9@load G4acb@ironscheme-build G4acd@eval-top-level G4acf@compile-system-libraries G4ad1@compile G4ad3@compile->closure G4ad5@pre-compile-r6rs-file G4ad7@load-r6rs-top-level) (begin (set! G4ab7@add-library-path! (lambda (G4af2@path) (G2952@G27e7@library-path (append (G2952@G27e7@library-path) (list G4af2@path))))) (set! G4ab9@parse-and-add-library-path (lambda (G4af4@paths G4af5@message) ((lambda (G4af8@t) (if G4af8@t ((lambda (G4afa@paths) (for-each (lambda (G4afc@path) (if (file-exists? G4afc@path) (G4ab7@add-library-path! (expand-path G4afc@path)) (format (current-error-port) G4af5@message G4afc@path))) (reverse (string-split G4afa@paths '#\:)))) G4af8@t) (void))) G4af4@paths))) (set! G4abb@for-each-with-index (lambda (G4afe@proc G4aff@lst) (letrec ((G4b02@loop (lambda (G4b04@i G4b05@lst) (if (null? G4b05@lst) (if '#f '#f (void)) (begin (G4afe@proc G4b04@i (car G4b05@lst)) (G4b02@loop (+ G4b04@i '1) (cdr G4b05@lst))))))) (G4b02@loop '1 G4aff@lst)))) (set! G4abd@conditioon-printer (lambda (G4b08@e G4b09@port) ((lambda (G4b0d@ref) (begin (set! G4b0d@ref (lambda (G4b1c@rtd G4b1d@i G4b1e@x) ((lambda (G4b22@val) (if (symbol? G4b22@val) (ungensym G4b22@val) G4b22@val)) ((record-accessor G4b1c@rtd G4b1d@i) G4b1e@x)))) (begin (display '" Condition components:\n" G4b09@port) (G4abb@for-each-with-index (lambda (G4b0e@i G4b0f@x) ((lambda (G4b12@rtd) (begin (format G4b09@port '"   ~d. ~a" G4b0e@i (record-type-name G4b12@rtd)) ((lambda (G4b14@v) ((lambda (G4b16@t) (if (memv G4b16@t '(0)) (newline G4b09@port) (if (memv G4b16@t '(1)) (begin (display '": " G4b09@port) (write (G4b0d@ref G4b12@rtd '0 G4b0f@x) G4b09@port) (newline G4b09@port)) (begin (display '":\n" G4b09@port) ((letrec ((G4b18@f (lambda (G4b1a@i) (if (not (= G4b1a@i (vector-length G4b14@v))) (begin (display '"       " G4b09@port) (display (vector-ref G4b14@v G4b1a@i) G4b09@port) (display '": " G4b09@port) (write (G4b0d@ref G4b12@rtd G4b1a@i G4b0f@x) G4b09@port) (newline G4b09@port) (G4b18@f (+ G4b1a@i '1))) (void))))) G4b18@f) '0))))) (vector-length G4b14@v))) (record-type-field-names G4b12@rtd)))) (record-rtd G4b0f@x))) (simple-conditions G4b08@e))))) '#f))) (set! G4abf@repl (lambda G4b24@x ((lambda (G4b27@rec) (begin (set! G4b27@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4b2a@G4b28) (lambda () (with-exception-handler (lambda (G4b2c@e) ((call/cc (lambda (G4b2e@G4b29) (G4b2a@G4b28 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? G4b2c@e) (G4abd@conditioon-printer G4b2c@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" G4b2c@e))) (G4b2e@G4b29 (lambda () (raise-continuable G4b2c@e)))))))))) (lambda () ((letrec ((G4b30@loop (lambda (G4b32@line G4b33@accum) ((lambda (G4b37@parentheses-ok? G4b39@eval-string-print) (begin (set! G4b37@parentheses-ok? (lambda (G4b3e@text) ((letrec ((G4b40@loop (lambda (G4b42@chars G4b43@p0 G4b44@p1) (if (null? G4b42@chars) (= '0 G4b43@p0 G4b44@p1) ((lambda (G4b48@t) (if (memv G4b48@t '(#\()) (G4b40@loop (cdr G4b42@chars) (+ G4b43@p0 '1) G4b44@p1) (if (memv G4b48@t '(#\))) (G4b40@loop (cdr G4b42@chars) (- G4b43@p0 '1) G4b44@p1) (if (memv G4b48@t '(#\[)) (G4b40@loop (cdr G4b42@chars) G4b43@p0 (+ G4b44@p1 '1)) (if (memv G4b48@t '(#\])) (G4b40@loop (cdr G4b42@chars) G4b43@p0 (- G4b44@p1 '1)) (G4b40@loop (cdr G4b42@chars) G4b43@p0 G4b44@p1)))))) (car G4b42@chars)))))) G4b40@loop) (string->list G4b3e@text) '0 '0))) (set! G4b39@eval-string-print (lambda (G4b3c@text) (if (not (or (string=? '"\n" G4b3c@text) (= '0 (string-length G4b3c@text)))) (write (G4acd@eval-top-level (call-with-port (open-string-input-port G4b3c@text) read))) (void)))) (if (eof-object? G4b32@line) (begin (G4b39@eval-string-print G4b33@accum) (exit)) ((lambda (G4b3a@current) (if (G4b37@parentheses-ok? G4b3a@current) (G4b39@eval-string-print G4b3a@current) (G4b30@loop (get-line (current-input-port)) G4b3a@current))) (string-append G4b33@accum G4b32@line))))) '#f '#f)))) G4b30@loop) (get-line (current-input-port)) '""))))))) (newline) (G4b27@rec)))) (G4b27@rec))) '#f))) (set! G4ac1@trace-printer (G26f0@G261e@make-parameter write)) (set! G4ac3@command-line (G26f0@G261e@make-parameter (get-command-line))) (set! G4ac5@local-library-path (lambda (G4b4a@filename) (cons (expand-path '".") (G2952@G27e7@library-path)))) (set! G4ac7@load/args (lambda (G4b4c@filename . G4b4e@args) (begin (apply G4ad7@load-r6rs-top-level G4b4c@filename 'load G4b4e@args) (void)))) (set! G4ac9@load (lambda (G4b50@filename) (begin (apply G4ad7@load-r6rs-top-level G4b50@filename 'load (G4ac3@command-line)) (void)))) (set! G4acb@ironscheme-build (lambda () (G4ac9@load '"ironscheme-buildscript.ss"))) (set! G4acd@eval-top-level (lambda (G4b52@x) (G46ef@G2df8@eval G4b52@x (G4705@G2e24@interaction-environment)))) (set! G4acf@compile-system-libraries (lambda () (G4acd@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4ad1@compile (lambda (G4b54@filename) (G4ad7@load-r6rs-top-level G4b54@filename 'compile))) (set! G4ad3@compile->closure (lambda (G4b56@filename) (G4ad7@load-r6rs-top-level G4b56@filename 'closure))) (set! G4ad5@pre-compile-r6rs-file (lambda (G4b58@filename) (G4ad7@load-r6rs-top-level G4b58@filename 'compile))) (set! G4ad7@load-r6rs-top-level (lambda (G4b5a@filename G4b5b@how . G4b5e@args) ((lambda (G4b62@G4b60 G4b63@G4b61) ((lambda (G4b66@swap) (dynamic-wind G4b66@swap (lambda () ((lambda (G4b68@x*) ((lambda (G4b6a@t) (if (memv G4b6a@t '(closure)) (G4704@G2e22@pre-compile-r6rs-top-level G4b68@x*) (if (memv G4b6a@t '(load)) ((lambda (G4b6e@G4b6c G4b6f@G4b6d) ((lambda (G4b72@swap) (dynamic-wind G4b72@swap (lambda () ((G4703@G2e20@compile-r6rs-top-level G4b68@x*))) G4b72@swap)) (lambda () ((lambda (G4b74@t) (begin (G4b6e@G4b6c G4b6f@G4b6d) (set! G4b6f@G4b6d G4b74@t))) (G4b6e@G4b6c))))) G4ac3@command-line (cons G4b5a@filename (car G4b5e@args))) (if (memv G4b6a@t '(compile)) (begin (G4703@G2e20@compile-r6rs-top-level G4b68@x*) (G2956@G27ef@serialize-all G26eb@G2614@serialize-library G2745@G26fe@compile-core-expr)) (if '#f '#f (void)))))) G4b5b@how)) (with-input-from-file G4b5a@filename (lambda () ((letrec ((G4b76@f (lambda () ((lambda (G4b78@x) (if (eof-object? G4b78@x) '() (cons G4b78@x (G4b76@f)))) (G26e3@G2604@read-annotated))))) G4b76@f)))))) G4b66@swap)) (lambda () ((lambda (G4b7a@t) (begin (G4b62@G4b60 G4b63@G4b61) (set! G4b63@G4b61 G4b7a@t))) (G4b62@G4b60))))) G2952@G27e7@library-path (G4ac5@local-library-path G4b5a@filename)))) (begin (set! G4b8c@G4ad7@load-r6rs-top-level G4ad7@load-r6rs-top-level) (set! G4b8b@G4ad5@pre-compile-r6rs-file G4ad5@pre-compile-r6rs-file) (set! G4b8a@G4ad3@compile->closure G4ad3@compile->closure) (set! G4b89@G4ad1@compile G4ad1@compile) (set! G4b88@G4acf@compile-system-libraries G4acf@compile-system-libraries) (set! G4b87@G4acd@eval-top-level G4acd@eval-top-level) (set! G4b86@G4acb@ironscheme-build G4acb@ironscheme-build) (set! G4b85@G4ac9@load G4ac9@load) (set! G4b84@G4ac7@load/args G4ac7@load/args) (set! G4b83@G4ac5@local-library-path G4ac5@local-library-path) (set! G4b82@G4ac3@command-line G4ac3@command-line) (set! G4b81@G4ac1@trace-printer G4ac1@trace-printer) (set! G4b80@G4abf@repl G4abf@repl) (set! G4b7f@G4abd@conditioon-printer G4abd@conditioon-printer) (set! G4b7e@G4abb@for-each-with-index G4abb@for-each-with-index) (set! G4b7d@G4ab9@parse-and-add-library-path G4ab9@parse-and-add-library-path) (set! G4b7c@G4ab7@add-library-path! G4ab7@add-library-path!) (G2957@G27f1@current-precompiled-library-loader G26ec@G2616@load-serialized-library) (set-symbol-value! 'load G4ac9@load) (set-symbol-value! 'pre-compile-r6rs-file G4ad5@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4acd@eval-top-level) (set-symbol-value! 'int-env-syms G46e6@G2de6@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2744@G26fc@expanded->core) (set-symbol-value! 'trace-printer G4ac1@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4ad8@c) (condition (G4a14@G4824@make-non-continuable-violation) (G4a0a@G480b@make-who-condition 'raise) (G49ce@G476e@make-message-condition '"returned from non-continuable exception") (G4a00@G47f1@make-irritants-condition (list G4ad8@c))))) (G4ab9@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4ab9@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2952@G27e7@library-path (append (G2952@G27e7@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4ada@prefix) (G2953@G27e9@library-extensions (G4ada@prefix '".mosh" (G2953@G27e9@library-extensions)))) (lambda (G4adc@ext G4add@ls) (append (map (lambda (G4ae0@x) (string-append G4adc@ext G4ae0@x)) G4add@ls) G4add@ls))) ((lambda (G4ae2@args G4ae3@port) ((lambda (G4ae7@ref) (begin (set! G4ae7@ref (lambda (G4aea@rtd G4aeb@i G4aec@x) ((lambda (G4af0@val) (if (symbol? G4af0@val) (ungensym G4af0@val) G4af0@val)) ((record-accessor G4aea@rtd G4aeb@i) G4aec@x)))) (with-exception-handler (lambda (G4ae8@c) (if (condition? G4ae8@c) (G4abd@conditioon-printer G4ae8@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" G4ae8@c))) (lambda () (if (null? G4ae2@args) (G4abf@repl) (G4ad7@load-r6rs-top-level (car G4ae2@args) 'load (cdr G4ae2@args))))))) '#f)) (G4ac3@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
