;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2821@read-annotated G2823@annotation-stripped G2825@annotation? G2827@annotation-source G2829@annotation-expression G282b@scm->fasl G282d@fasl-save G282f@fasl-load G2831@serialize-library G2833@load-serialized-library G2835@make-record-printer G2837@compile-core G2839@read-library-source-file G283b@make-parameter G28a7@file-options-spec) (begin (set! G2821@read-annotated read) (set! G2823@annotation-stripped (lambda (G28a8@x) (G2829@annotation-expression G28a8@x))) (set! G2825@annotation? (lambda (G28aa@x) (source-info G28aa@x))) (set! G2827@annotation-source (lambda (G28ac@x) (source-info G28ac@x))) (set! G2829@annotation-expression (lambda (G28ae@x) (if (pair? G28ae@x) (cons (car G28ae@x) (cdr G28ae@x)) (display '"line:46\n")))) (set! G282b@scm->fasl (lambda (G28b0@filename) (string-append G28b0@filename '".fasl"))) (set! G282d@fasl-save (lambda (G28b2@filename G28b3@obj) (call-with-port (open-file-output-port G28b2@filename) (lambda (G28b6@port) ((symbol-value 'fasl-write!) G28b3@obj G28b6@port))))) (set! G282f@fasl-load (lambda (G28b8@filename) (call-with-port (open-file-input-port G28b8@filename) (symbol-value 'fasl-read!)))) (set! G2831@serialize-library (lambda (G28ba@filename G28bb@obj) (begin (format '#t '"serialize-library ~a\n..." G28ba@filename) ((lambda (G28be@fasl-file) (begin (if (file-exists? G28be@fasl-file) (delete-file G28be@fasl-file) (void)) (call/cc (lambda (G28c1@G28c0) (with-exception-handler (lambda (G28c3@c) (G28c1@G28c0 (if '#t (begin (format '#t '"Warning:serialize-library failed " G28ba@filename) (if (file-exists? G28be@fasl-file) (delete-file G28be@fasl-file) (void)) '#f) (raise G28c3@c)))) (lambda () (begin '#f (G282d@fasl-save G28be@fasl-file G28bb@obj) (display '"OK\n")))))))) (G282b@scm->fasl G28ba@filename))))) (set! G2833@load-serialized-library (lambda (G28c5@filename G28c6@obj) ((lambda (G28c9@fasl-file) (if (and (file-exists? G28c9@fasl-file) ((symbol-value 'file-newer?) G28c9@fasl-file G28c5@filename)) ((lambda (G28cb@expanded2core) ((lambda (G28cd@code) ((lambda (G28cf@pivot) ((lambda (G28d1@visit) ((lambda (G28d3@visit-proc) ((lambda () (begin (set-car! G28cf@pivot G28d3@visit-proc) ((lambda (G28d5@pivot) ((lambda (G28d7@invoke) ((lambda () (begin (set-car! G28d5@pivot (lambda () (eval-core G28d7@invoke))) (apply G28c6@obj G28cd@code))))) (G28cb@expanded2core (car G28d5@pivot)))) (cdr G28cf@pivot)) '#t)))) (lambda () (eval-core G28d1@visit)))) (G28cb@expanded2core (car G28cf@pivot)))) (cddddr (cddddr G28cd@code)))) (G282f@fasl-load G28c9@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G282b@scm->fasl G28c5@filename)))) (set! G2835@make-record-printer (lambda (G28d9@name G28da@printer) (lambda G28dd@x (begin (display '"record printer") (for-each display G28dd@x))))) (set! G2837@compile-core (lambda G28df@x (apply error 'comile-core '"not implementated" G28df@x))) (set! G2839@read-library-source-file (lambda (G28e1@file-name) (with-input-from-file G28e1@file-name G2821@read-annotated))) (set! G283b@make-parameter (lambda G28f1 ((lambda (G28f2) (if (= G28f2 '1) (apply (lambda (G28e3@x) (G283b@make-parameter G28e3@x (lambda (G28e5@x) G28e5@x))) G28f1) (if (= G28f2 '2) (apply (lambda (G28e7@x G28e8@fender) ((lambda (G28eb@x) (lambda G28ef ((lambda (G28f0) (if (= G28f0 '0) (apply (lambda () G28eb@x) G28ef) (if (= G28f0 '1) (apply (lambda (G28ed@v) (set! G28eb@x (G28e8@fender G28ed@v))) G28ef) (error 'apply '"invalid arg count")))) (length G28ef)))) (G28e8@fender G28e7@x))) G28f1) (error 'apply '"invalid arg count")))) (length G28f1)))) (set! G28a7@file-options-spec (lambda (G28f3@x) G28f3@x)) (begin (set! G2903@G28a7@file-options-spec G28a7@file-options-spec) (set! G2902@G283b@make-parameter G283b@make-parameter) (set! G2901@G2839@read-library-source-file G2839@read-library-source-file) (set! G2900@G2837@compile-core G2837@compile-core) (set! G28ff@G2835@make-record-printer G2835@make-record-printer) (set! G28fe@G2833@load-serialized-library G2833@load-serialized-library) (set! G28fd@G2831@serialize-library G2831@serialize-library) (set! G28fc@G282f@fasl-load G282f@fasl-load) (set! G28fb@G282d@fasl-save G282d@fasl-save) (set! G28fa@G282b@scm->fasl G282b@scm->fasl) (set! G28f9@G2829@annotation-expression G2829@annotation-expression) (set! G28f8@G2827@annotation-source G2827@annotation-source) (set! G28f7@G2825@annotation? G2825@annotation?) (set! G28f6@G2823@annotation-stripped G2823@annotation-stripped) (set! G28f5@G2821@read-annotated G2821@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2908@current-primitive-locations G290a@mutable? G290c@rewriter G290e@expanded->core G2910@compile-core-expr G2912@pretty-print G2914@compile-core-expr-to-port) (begin (set! G2908@current-primitive-locations (G2902@G283b@make-parameter (lambda (G2915@x) '#f) (lambda (G2917@p) G2917@p))) (set! G290a@mutable? (lambda (G2919@x) (or (pair? G2919@x) (vector? G2919@x) (hashtable? G2919@x)))) (set! G290c@rewriter (lambda (G291b@quote-hack?) ((lambda (G291e@f) (begin (set! G291e@f (lambda (G291f@x) (if (pair? G291f@x) ((lambda (G2921@t) (if (memv G2921@t '(quote)) (if (and G291b@quote-hack? (G290a@mutable? (cadr G291f@x))) ((lambda (G2923@g) (begin (set-symbol-value! G2923@g (cadr G291f@x)) G2923@g)) (gensym)) G291f@x) (if (memv G2921@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2925@x) (cons (car G2925@x) (map G291e@f (cdr G2925@x)))) (cdr G291f@x))) (if (memv G2921@t '(lambda)) (cons* 'lambda (cadr G291f@x) (map G291e@f (cddr G291f@x))) (if (memv G2921@t '(letrec)) ((lambda (G2927@bindings G2928@body*) ((lambda (G292b@lhs* G292c@rhs*) (cons* 'letrec (map list G292b@lhs* (map G291e@f G292c@rhs*)) (map G291e@f G2928@body*))) (map car G2927@bindings) (map cadr G2927@bindings))) (cadr G291f@x) (cddr G291f@x)) (if (memv G2921@t '(letrec*)) ((lambda (G292f@bindings G2930@body*) ((lambda (G2933@lhs* G2934@rhs*) (cons* 'letrec* (map list G2933@lhs* (map G291e@f G2934@rhs*)) (map G291e@f G2930@body*))) (map car G292f@bindings) (map cadr G292f@bindings))) (cadr G291f@x) (cddr G291f@x)) (if (memv G2921@t '(library-letrec*)) ((lambda (G2937@name G2938@x) ((lambda (G293b@bindings G293c@body*) ((lambda (G293f@lhs* G2940@lhs** G2941@rhs*) (cons* 'library-letrec* G2937@name (map list G293f@lhs* G2940@lhs** (map G291e@f G2941@rhs*)) (map G291e@f G293c@body*))) (map car G293b@bindings) (map cadr G293b@bindings) (map caddr G293b@bindings))) (cadr G2938@x) (cddr G2938@x))) (cadr G291f@x) (cdr G291f@x)) (if (memv G2921@t '(begin)) (cons 'begin (map G291e@f (cdr G291f@x))) (if (memv G2921@t '(set!)) (list 'set! (cadr G291f@x) (G291e@f (caddr G291f@x))) (if (memv G2921@t '(primitive)) ((lambda (G2945@op) ((lambda (G2947@t) (if G2947@t ((lambda (G2949@loc) G2949@loc) G2947@t) G2945@op)) ((G2908@current-primitive-locations) G2945@op))) (cadr G291f@x)) (if (memv G2921@t '(define)) G291f@x (if (list? G291f@x) (map G291e@f G291f@x) (error 'rewrite '"invalid form ~s ~s" G291f@x (list? G291f@x)))))))))))))) (car G291f@x)) G291f@x))) G291e@f)) '#f))) (set! G290e@expanded->core (lambda (G294b@x) ((G290c@rewriter '#t) G294b@x))) (set! G2910@compile-core-expr (lambda (G294d@x) ((G290c@rewriter '#f) G294d@x))) (set! G2912@pretty-print write) (set! G2914@compile-core-expr-to-port (lambda (G294f@x G2950@p) (G2912@pretty-print ((G290c@rewriter '#f) G294f@x) G2950@p))) (begin (set! G2959@G2914@compile-core-expr-to-port G2914@compile-core-expr-to-port) (set! G2958@G2912@pretty-print G2912@pretty-print) (set! G2957@G2910@compile-core-expr G2910@compile-core-expr) (set! G2956@G290e@expanded->core G290e@expanded->core) (set! G2955@G290c@rewriter G290c@rewriter) (set! G2954@G290a@mutable? G290a@mutable?) (set! G2953@G2908@current-primitive-locations G2908@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29af@make-collection G29b1@current-library-collection G29b7@G29b2 G29b9@G29b4 G29bb@G29b3 G29be@library? G29c0@make-library G29c2@library-id G29c4@library-name G29c6@library-version G29c8@library-imp* G29ca@library-vis* G29cc@library-inv* G29ce@library-subst G29d0@library-env G29d2@library-visit-state G29d4@library-invoke-state G29d6@library-visit-code G29d8@library-invoke-code G29da@library-visible? G29dc@library-source-file-name G29de@set-library-id! G29e0@set-library-name! G29e2@set-library-version! G29e4@set-library-imp*! G29e6@set-library-vis*! G29e8@set-library-inv*! G29ea@set-library-subst! G29ec@set-library-env! G29ee@set-library-visit-state! G29f0@set-library-invoke-state! G29f2@set-library-visit-code! G29f4@set-library-invoke-code! G29f6@set-library-visible?! G29f8@set-library-source-file-name! G29fa@rp G29fc@find-dependencies G29fe@find-library-by G2a00@library-path G2a02@library-extensions G2a04@library-name->file-name G2a06@file-locator G2a08@serialize-all G2a0a@current-precompiled-library-loader G2a0c@try-load-from-file G2a0e@library-loader G2a10@current-library-expander G2a12@external-pending-libraries G2a14@find-external-library G2a16@find-library-by-name G2a18@library-exists? G2a1a@find-library-by-spec/die G2a1c@label->binding-table G2a1e@install-library-record G2a20@install-library G2a22@imported-label->binding G2a24@invoke-library G2a26@visit-library G2a28@invoke-library-by-spec G2a2a@installed-libraries G2a2c@library-spec) (begin (set! G29af@make-collection (lambda () ((lambda (G2a2d@set) ((lambda (G2a30@set-cons) (begin (set! G2a30@set-cons (lambda (G2a35@x G2a36@ls) (if (memq G2a35@x G2a36@ls) G2a36@ls (cons G2a35@x G2a36@ls)))) (lambda G2a33 ((lambda (G2a34) (if (= G2a34 '0) (apply (lambda () G2a2d@set) G2a33) (if (= G2a34 '1) (apply (lambda (G2a31@x) (set! G2a2d@set (G2a30@set-cons G2a31@x G2a2d@set))) G2a33) (error 'apply '"invalid arg count")))) (length G2a33))))) '#f)) '()))) (set! G29b1@current-library-collection (G2902@G283b@make-parameter (G29af@make-collection) (lambda (G2a39@x) (begin (if (not (procedure? G2a39@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a39@x) (void)) G2a39@x)))) (set! G29b7@G29b2 (make-record-type-descriptor 'library '#f 'G29b5 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29b9@G29b4 '#f) (set! G29bb@G29b3 (make-record-constructor-descriptor G29b7@G29b2 '#f G29b9@G29b4)) (set! G29be@library? (record-predicate G29b7@G29b2)) (set! G29c0@make-library (record-constructor G29bb@G29b3)) (set! G29c2@library-id (record-accessor G29b7@G29b2 '0)) (set! G29c4@library-name (record-accessor G29b7@G29b2 '1)) (set! G29c6@library-version (record-accessor G29b7@G29b2 '2)) (set! G29c8@library-imp* (record-accessor G29b7@G29b2 '3)) (set! G29ca@library-vis* (record-accessor G29b7@G29b2 '4)) (set! G29cc@library-inv* (record-accessor G29b7@G29b2 '5)) (set! G29ce@library-subst (record-accessor G29b7@G29b2 '6)) (set! G29d0@library-env (record-accessor G29b7@G29b2 '7)) (set! G29d2@library-visit-state (record-accessor G29b7@G29b2 '8)) (set! G29d4@library-invoke-state (record-accessor G29b7@G29b2 '9)) (set! G29d6@library-visit-code (record-accessor G29b7@G29b2 '10)) (set! G29d8@library-invoke-code (record-accessor G29b7@G29b2 '11)) (set! G29da@library-visible? (record-accessor G29b7@G29b2 '12)) (set! G29dc@library-source-file-name (record-accessor G29b7@G29b2 '13)) (set! G29de@set-library-id! (record-mutator G29b7@G29b2 '0)) (set! G29e0@set-library-name! (record-mutator G29b7@G29b2 '1)) (set! G29e2@set-library-version! (record-mutator G29b7@G29b2 '2)) (set! G29e4@set-library-imp*! (record-mutator G29b7@G29b2 '3)) (set! G29e6@set-library-vis*! (record-mutator G29b7@G29b2 '4)) (set! G29e8@set-library-inv*! (record-mutator G29b7@G29b2 '5)) (set! G29ea@set-library-subst! (record-mutator G29b7@G29b2 '6)) (set! G29ec@set-library-env! (record-mutator G29b7@G29b2 '7)) (set! G29ee@set-library-visit-state! (record-mutator G29b7@G29b2 '8)) (set! G29f0@set-library-invoke-state! (record-mutator G29b7@G29b2 '9)) (set! G29f2@set-library-visit-code! (record-mutator G29b7@G29b2 '10)) (set! G29f4@set-library-invoke-code! (record-mutator G29b7@G29b2 '11)) (set! G29f6@set-library-visible?! (record-mutator G29b7@G29b2 '12)) (set! G29f8@set-library-source-file-name! (record-mutator G29b7@G29b2 '13)) (set! G29fa@rp (G28ff@G2835@make-record-printer 'library (lambda (G2a3b@x G2a3c@p G2a3d@wr) (begin (if (not (G29be@library? G2a3b@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29c6@library-version G2a3b@x)) (G29c4@library-name G2a3b@x) (append (G29c4@library-name G2a3b@x) (list (G29c6@library-version G2a3b@x))))) G2a3c@p))))) (set! G29fc@find-dependencies (lambda (G2a41@ls) (if (null? G2a41@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29fe@find-library-by (lambda (G2a43@pred) ((letrec ((G2a45@f (lambda (G2a47@ls) (if (null? G2a47@ls) '#f (if (G2a43@pred (car G2a47@ls)) (car G2a47@ls) (G2a45@f (cdr G2a47@ls))))))) G2a45@f) ((G29b1@current-library-collection))))) (set! G2a00@library-path (G2902@G283b@make-parameter '(".") (lambda (G2a49@x) (if (and (list? G2a49@x) (for-all string? G2a49@x)) (map (lambda (G2a4b@x) G2a4b@x) G2a49@x) (assertion-violation 'library-path '"not a list of strings" G2a49@x))))) (set! G2a02@library-extensions (G2902@G283b@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a4d@x) (if (and (list? G2a4d@x) (for-all string? G2a4d@x)) (map (lambda (G2a4f@x) G2a4f@x) G2a4d@x) (assertion-violation 'library-extensions '"not a list of strings" G2a4d@x))))) (set! G2a04@library-name->file-name (lambda (G2a51@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a55@G2a53 G2a56@G2a54) ((lambda (G2a59@extract G2a5a@p) ((lambda (G2a5e@display-hex) (begin (set! G2a5e@display-hex (lambda (G2a67@n) (if (<= '0 G2a67@n '9) (display G2a67@n G2a5a@p) (display (integer->char (+ (char->integer '#\A) (- G2a67@n '10))) G2a5a@p)))) (begin ((letrec ((G2a5f@f (lambda (G2a61@ls) (if (not (null? G2a61@ls)) (begin (display '"/" G2a5a@p) (for-each (lambda (G2a63@c) (if (or (char<=? '#\a G2a63@c '#\z) (char<=? '#\A G2a63@c '#\Z) (char<=? '#\nul G2a63@c '#\9) (memv G2a63@c '(#\- #\. #\_ #\~))) (display G2a63@c G2a5a@p) (begin (display '"%" G2a5a@p) ((lambda (G2a65@n) (begin (G2a5e@display-hex (quotient G2a65@n '16)) (G2a5e@display-hex (remainder G2a65@n '16)))) (char->integer G2a63@c))))) (string->list (symbol->string (car G2a61@ls)))) (G2a5f@f (cdr G2a61@ls))) (void))))) G2a5f@f) G2a51@x) (G2a59@extract)))) '#f)) G2a56@G2a54 G2a55@G2a53))))) (set! G2a06@file-locator (G2902@G283b@make-parameter (lambda (G2a69@x) ((lambda (G2a6b@str) ((letrec ((G2a6d@f (lambda (G2a6f@ls G2a70@exts G2a71@failed-list) (if (null? G2a6f@ls) ((lambda () ((lambda (G2a7d@G2a78 G2a7f@G2a7a G2a81@G2a79 G2a84@G2a77 G2a86@make-library-resolution-condition G2a88@G2a75 G2a8a@G2a76 G2a8c@library-resolution-condition? G2a8e@condition-library G2a90@condition-files) (begin (set! G2a7d@G2a78 (make-record-type-descriptor '&library-resolution G4c36@G4987@&condition-rtd 'G2a7b '#f '#f '#((immutable library) (immutable files)))) (set! G2a7f@G2a7a '#f) (set! G2a81@G2a79 (make-record-constructor-descriptor G2a7d@G2a78 G4c37@G4989@&condition-rcd G2a7f@G2a7a)) (set! G2a84@G2a77 (record-predicate G2a7d@G2a78)) (set! G2a86@make-library-resolution-condition (record-constructor G2a81@G2a79)) (set! G2a88@G2a75 (record-accessor G2a7d@G2a78 '0)) (set! G2a8a@G2a76 (record-accessor G2a7d@G2a78 '1)) (set! G2a8c@library-resolution-condition? (condition-predicate G2a7d@G2a78)) (set! G2a8e@condition-library (condition-accessor G2a7d@G2a78 G2a88@G2a75)) (set! G2a90@condition-files (condition-accessor G2a7d@G2a78 G2a8a@G2a76)) (raise (condition (G4c56@G4a1f@make-error) (G4c78@G4a79@make-who-condition 'expander) (G4c3c@G49dc@make-message-condition '"cannot locate library in library-path") (G2a86@make-library-resolution-condition G2a69@x (reverse G2a71@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a70@exts) (G2a6d@f (cdr G2a6f@ls) (G2a02@library-extensions) G2a71@failed-list) ((lambda (G2a91@name) (if (file-exists? G2a91@name) G2a91@name (G2a6d@f G2a6f@ls (cdr G2a70@exts) (cons G2a91@name G2a71@failed-list)))) (string-append (car G2a6f@ls) G2a6b@str (car G2a70@exts)))))))) G2a6d@f) (G2a00@library-path) (G2a02@library-extensions) '())) (G2a04@library-name->file-name G2a69@x))) (lambda (G2a93@f) (if (procedure? G2a93@f) G2a93@f (assertion-violation 'file-locator '"not a procedure" G2a93@f))))) (set! G2a08@serialize-all (lambda (G2a95@serialize G2a96@compile) ((lambda (G2a9a@library-desc) (begin (set! G2a9a@library-desc (lambda (G2a9d@x) (list (G29c2@library-id G2a9d@x) (G29c4@library-name G2a9d@x)))) (for-each (lambda (G2a9b@x) (if (G29dc@library-source-file-name G2a9b@x) (G2a95@serialize (G29dc@library-source-file-name G2a9b@x) (list (G29c2@library-id G2a9b@x) (G29c4@library-name G2a9b@x) (G29c6@library-version G2a9b@x) (map G2a9a@library-desc (G29c8@library-imp* G2a9b@x)) (map G2a9a@library-desc (G29ca@library-vis* G2a9b@x)) (map G2a9a@library-desc (G29cc@library-inv* G2a9b@x)) (G29ce@library-subst G2a9b@x) (G29d0@library-env G2a9b@x) (G2a96@compile (G29d6@library-visit-code G2a9b@x)) (G2a96@compile (G29d8@library-invoke-code G2a9b@x)) (G29da@library-visible? G2a9b@x))) (void))) ((G29b1@current-library-collection))))) '#f))) (set! G2a0a@current-precompiled-library-loader (G2902@G283b@make-parameter (lambda (G2a9f@filename G2aa0@sk) '#f))) (set! G2a0c@try-load-from-file (lambda (G2aa3@filename) ((G2a0a@current-precompiled-library-loader) G2aa3@filename (lambda G2ac9 ((lambda (G2aca) (if (= G2aca '11) (apply (lambda (G2aa5@id G2aa6@name G2aa7@ver G2aa8@imp* G2aa9@vis* G2aaa@inv* G2aab@exp-subst G2aac@exp-env G2aad@visit-proc G2aae@invoke-proc G2aaf@visible?) ((letrec ((G2abb@f (lambda (G2abd@deps) (if (null? G2abd@deps) (begin (G2a20@install-library G2aa5@id G2aa6@name G2aa7@ver G2aa8@imp* G2aa9@vis* G2aaa@inv* G2aab@exp-subst G2aac@exp-env G2aad@visit-proc G2aae@invoke-proc '#f '#f G2aaf@visible? '#f) '#t) ((lambda (G2abf@d) ((lambda (G2ac1@label G2ac2@dname) ((lambda (G2ac5@l) (if (and (G29be@library? G2ac5@l) (eq? G2ac1@label (G29c2@library-id G2ac5@l))) (G2abb@f (cdr G2abd@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2aa6@name G2ac2@dname G2aa3@filename G2ac5@l G2ac1@label (G29c2@library-id G2ac5@l)) '#f))) (G2a16@find-library-by-name G2ac2@dname))) (car G2abf@d) (cadr G2abf@d))) (car G2abd@deps)))))) G2abb@f) (append G2aa8@imp* G2aa9@vis* G2aaa@inv*))) G2ac9) (if (>= G2aca '0) (apply (lambda G2ac7@others '#f) G2ac9) (error 'apply '"invalid arg count")))) (length G2ac9)))))) (set! G2a0e@library-loader (G2902@G283b@make-parameter (lambda (G2acb@x) ((lambda (G2acd@file-name) (if (not G2acd@file-name) (assertion-violation '#f '"cannot file library" G2acb@x) (or (G2a0c@try-load-from-file G2acd@file-name) ((G2a10@current-library-expander) (G2901@G2839@read-library-source-file G2acd@file-name) G2acd@file-name (lambda (G2acf@name) (if (not (equal? G2acf@name G2acb@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ad3@G2ad1 G2ad4@G2ad2) ((lambda (G2ad7@e G2ad8@p) (begin (display '"expected to find library " G2ad8@p) (write G2acb@x G2ad8@p) (display '" in file " G2ad8@p) (display G2acd@file-name G2ad8@p) (display '", found " G2ad8@p) (write G2acf@name G2ad8@p) (display '" instead" G2ad8@p) (G2ad7@e))) G2ad4@G2ad2 G2ad3@G2ad1)))) (void))))))) ((G2a06@file-locator) G2acb@x))) (lambda (G2adb@f) (if (procedure? G2adb@f) G2adb@f (assertion-violation 'library-locator '"not a procedure" G2adb@f))))) (set! G2a10@current-library-expander (G2902@G283b@make-parameter (lambda (G2add@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2adf@f) (if (procedure? G2adf@f) G2adf@f (assertion-violation 'library-expander '"not a procedure" G2adf@f))))) (set! G2a12@external-pending-libraries (G2902@G283b@make-parameter '())) (set! G2a14@find-external-library (lambda (G2ae1@name) (begin (if (member G2ae1@name (G2a12@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ae1@name) (void)) ((lambda (G2ae5@G2ae3@external-pending-libraries G2ae6@G2ae4@external-pending-libraries) ((lambda (G2ae9@swap) (dynamic-wind G2ae9@swap (lambda () (begin ((G2a0e@library-loader) G2ae1@name) (or (G29fe@find-library-by (lambda (G2aeb@x) (equal? (G29c4@library-name G2aeb@x) G2ae1@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ae1@name)))) G2ae9@swap)) (lambda () ((lambda (G2aed@t) (begin (G2ae5@G2ae3@external-pending-libraries G2ae6@G2ae4@external-pending-libraries) (set! G2ae6@G2ae4@external-pending-libraries G2aed@t))) (G2ae5@G2ae3@external-pending-libraries))))) G2a12@external-pending-libraries (cons G2ae1@name (G2a12@external-pending-libraries)))))) (set! G2a16@find-library-by-name (lambda (G2aef@name) (or (G29fe@find-library-by (lambda (G2af1@x) (equal? (G29c4@library-name G2af1@x) G2aef@name))) (G2a14@find-external-library G2aef@name)))) (set! G2a18@library-exists? (lambda (G2af3@name) (and (G29fe@find-library-by (lambda (G2af5@x) (equal? (G29c4@library-name G2af5@x) G2af3@name))) '#t))) (set! G2a1a@find-library-by-spec/die (lambda (G2af7@spec) ((lambda (G2af9@id) (or (G29fe@find-library-by (lambda (G2afb@x) (eq? G2af9@id (G29c2@library-id G2afb@x)))) (assertion-violation '#f '"cannot find library with required spec" G2af7@spec))) (car G2af7@spec)))) (set! G2a1c@label->binding-table (make-eq-hashtable)) (set! G2a1e@install-library-record (lambda (G2afd@lib) (begin ((lambda (G2aff@exp-env) (for-each (lambda (G2b01@x) ((lambda (G2b03@label G2b04@binding) ((lambda (G2b07@binding) (hashtable-set! G2a1c@label->binding-table G2b03@label G2b07@binding)) ((lambda (G2b09@t) (if (memv G2b09@t '(global)) (cons 'global (cons G2afd@lib (cdr G2b04@binding))) (if (memv G2b09@t '(global-macro)) (cons 'global-macro (cons G2afd@lib (cdr G2b04@binding))) (if (memv G2b09@t '(global-macro!)) (cons 'global-macro! (cons G2afd@lib (cdr G2b04@binding))) G2b04@binding)))) (car G2b04@binding)))) (car G2b01@x) (cdr G2b01@x))) G2aff@exp-env)) (G29d0@library-env G2afd@lib)) ((G29b1@current-library-collection) G2afd@lib)))) (set! G2a20@install-library (lambda (G2b0b@id G2b0c@name G2b0d@ver G2b0e@imp* G2b0f@vis* G2b10@inv* G2b11@exp-subst G2b12@exp-env G2b13@visit-proc G2b14@invoke-proc G2b15@visit-code G2b16@invoke-code G2b17@visible? G2b18@source-file-name) ((lambda (G2b27@imp-lib* G2b28@vis-lib* G2b29@inv-lib*) (begin (if (not (and (symbol? G2b0b@id) (list? G2b0c@name) (list? G2b0d@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b0b@id G2b0c@name G2b0d@ver) (void)) (if (G2a18@library-exists? G2b0c@name) (assertion-violation 'install-library '"library is already installed" G2b0c@name) (void)) ((lambda (G2b2d@lib) (G2a1e@install-library-record G2b2d@lib)) (G29c0@make-library G2b0b@id G2b0c@name G2b0d@ver G2b27@imp-lib* G2b28@vis-lib* G2b29@inv-lib* G2b11@exp-subst G2b12@exp-env G2b13@visit-proc G2b14@invoke-proc G2b15@visit-code G2b16@invoke-code G2b17@visible? G2b18@source-file-name)))) (map G2a1a@find-library-by-spec/die G2b0e@imp*) (map G2a1a@find-library-by-spec/die G2b0f@vis*) (map G2a1a@find-library-by-spec/die G2b10@inv*)))) (set! G2a22@imported-label->binding (lambda (G2b2f@lab) (hashtable-ref G2a1c@label->binding-table G2b2f@lab '#f))) (set! G2a24@invoke-library (lambda (G2b31@lib) ((lambda (G2b33@invoke) (if (procedure? G2b33@invoke) (begin (G29f0@set-library-invoke-state! G2b31@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b31@lib))) (for-each G2a24@invoke-library (G29cc@library-inv* G2b31@lib)) (G29f0@set-library-invoke-state! G2b31@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b31@lib))) (G2b33@invoke) (G29f0@set-library-invoke-state! G2b31@lib '#t)) (void))) (G29d4@library-invoke-state G2b31@lib)))) (set! G2a26@visit-library (lambda (G2b35@lib) ((lambda (G2b37@visit) (if (procedure? G2b37@visit) (begin (G29ee@set-library-visit-state! G2b35@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b35@lib))) (for-each G2a24@invoke-library (G29ca@library-vis* G2b35@lib)) (G29ee@set-library-visit-state! G2b35@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b35@lib))) (G2b37@visit) (G29ee@set-library-visit-state! G2b35@lib '#t)) (void))) (G29d2@library-visit-state G2b35@lib)))) (set! G2a28@invoke-library-by-spec (lambda (G2b39@spec) (G2a24@invoke-library (G2a1a@find-library-by-spec/die G2b39@spec)))) (set! G2a2a@installed-libraries (lambda G2b41 ((lambda (G2b42) (if (= G2b42 '1) (apply (lambda (G2b3b@all?) ((letrec ((G2b3d@f (lambda (G2b3f@ls) (if (null? G2b3f@ls) '() (if (or G2b3b@all? (G29da@library-visible? (car G2b3f@ls))) (cons (car G2b3f@ls) (G2b3d@f (cdr G2b3f@ls))) (G2b3d@f (cdr G2b3f@ls))))))) G2b3d@f) ((G29b1@current-library-collection)))) G2b41) (if (= G2b42 '0) (apply (lambda () (G2a2a@installed-libraries '#f)) G2b41) (error 'apply '"invalid arg count")))) (length G2b41)))) (set! G2a2c@library-spec (lambda (G2b43@x) (begin (if (not (G29be@library? G2b43@x)) (assertion-violation 'library-spec '"not a library" G2b43@x) (void)) (list (G29c2@library-id G2b43@x) (G29c4@library-name G2b43@x) (G29c6@library-version G2b43@x))))) (begin (set! G2b81@G2a2c@library-spec G2a2c@library-spec) (set! G2b80@G2a2a@installed-libraries G2a2a@installed-libraries) (set! G2b7f@G2a28@invoke-library-by-spec G2a28@invoke-library-by-spec) (set! G2b7e@G2a26@visit-library G2a26@visit-library) (set! G2b7d@G2a24@invoke-library G2a24@invoke-library) (set! G2b7c@G2a22@imported-label->binding G2a22@imported-label->binding) (set! G2b7b@G2a20@install-library G2a20@install-library) (set! G2b7a@G2a1e@install-library-record G2a1e@install-library-record) (set! G2b79@G2a1c@label->binding-table G2a1c@label->binding-table) (set! G2b78@G2a1a@find-library-by-spec/die G2a1a@find-library-by-spec/die) (set! G2b77@G2a18@library-exists? G2a18@library-exists?) (set! G2b76@G2a16@find-library-by-name G2a16@find-library-by-name) (set! G2b75@G2a14@find-external-library G2a14@find-external-library) (set! G2b74@G2a12@external-pending-libraries G2a12@external-pending-libraries) (set! G2b73@G2a10@current-library-expander G2a10@current-library-expander) (set! G2b72@G2a0e@library-loader G2a0e@library-loader) (set! G2b71@G2a0c@try-load-from-file G2a0c@try-load-from-file) (set! G2b70@G2a0a@current-precompiled-library-loader G2a0a@current-precompiled-library-loader) (set! G2b6f@G2a08@serialize-all G2a08@serialize-all) (set! G2b6e@G2a06@file-locator G2a06@file-locator) (set! G2b6d@G2a04@library-name->file-name G2a04@library-name->file-name) (set! G2b6c@G2a02@library-extensions G2a02@library-extensions) (set! G2b6b@G2a00@library-path G2a00@library-path) (set! G2b6a@G29fe@find-library-by G29fe@find-library-by) (set! G2b69@G29fc@find-dependencies G29fc@find-dependencies) (set! G2b68@G29fa@rp G29fa@rp) (set! G2b67@G29f8@set-library-source-file-name! G29f8@set-library-source-file-name!) (set! G2b66@G29f6@set-library-visible?! G29f6@set-library-visible?!) (set! G2b65@G29f4@set-library-invoke-code! G29f4@set-library-invoke-code!) (set! G2b64@G29f2@set-library-visit-code! G29f2@set-library-visit-code!) (set! G2b63@G29f0@set-library-invoke-state! G29f0@set-library-invoke-state!) (set! G2b62@G29ee@set-library-visit-state! G29ee@set-library-visit-state!) (set! G2b61@G29ec@set-library-env! G29ec@set-library-env!) (set! G2b60@G29ea@set-library-subst! G29ea@set-library-subst!) (set! G2b5f@G29e8@set-library-inv*! G29e8@set-library-inv*!) (set! G2b5e@G29e6@set-library-vis*! G29e6@set-library-vis*!) (set! G2b5d@G29e4@set-library-imp*! G29e4@set-library-imp*!) (set! G2b5c@G29e2@set-library-version! G29e2@set-library-version!) (set! G2b5b@G29e0@set-library-name! G29e0@set-library-name!) (set! G2b5a@G29de@set-library-id! G29de@set-library-id!) (set! G2b59@G29dc@library-source-file-name G29dc@library-source-file-name) (set! G2b58@G29da@library-visible? G29da@library-visible?) (set! G2b57@G29d8@library-invoke-code G29d8@library-invoke-code) (set! G2b56@G29d6@library-visit-code G29d6@library-visit-code) (set! G2b55@G29d4@library-invoke-state G29d4@library-invoke-state) (set! G2b54@G29d2@library-visit-state G29d2@library-visit-state) (set! G2b53@G29d0@library-env G29d0@library-env) (set! G2b52@G29ce@library-subst G29ce@library-subst) (set! G2b51@G29cc@library-inv* G29cc@library-inv*) (set! G2b50@G29ca@library-vis* G29ca@library-vis*) (set! G2b4f@G29c8@library-imp* G29c8@library-imp*) (set! G2b4e@G29c6@library-version G29c6@library-version) (set! G2b4d@G29c4@library-name G29c4@library-name) (set! G2b4c@G29c2@library-id G29c2@library-id) (set! G2b4b@G29c0@make-library G29c0@make-library) (set! G2b4a@G29be@library? G29be@library?) (set! G2b49@G29bb@G29b3 G29bb@G29b3) (set! G2b48@G29b9@G29b4 G29b9@G29b4) (set! G2b47@G29b7@G29b2 G29b7@G29b2) (set! G2b46@G29b1@current-library-collection G29b1@current-library-collection) (set! G2b45@G29af@make-collection G29af@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b84@build-global-define G2bfe@build-lambda G2c00@build-case-lambda G2c02@build-let G2c34@build-sequence G2c36@build-void G2c38@build-letrec G2c3a@build-letrec* G2c3c@build-library-letrec* G2c3e@build-receive) (begin (set! G2b84@build-global-define (lambda (G2c3f@x) (G2c36@build-void))) (set! G2bfe@build-lambda (lambda (G2c41@ae G2c42@vars G2c43@exp) (list 'lambda G2c42@vars G2c43@exp))) (set! G2c00@build-case-lambda (lambda (G2c47@ae G2c48@vars* G2c49@exp*) ((lambda (G2c4e@build-error G2c50@build-pred G2c52@build-apply G2c54@expand-case-lambda) (begin (set! G2c4e@build-error (lambda (G2c83@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c50@build-pred (lambda (G2c6d@ae G2c6e@n G2c6f@vars) (call-with-values (lambda () ((letrec ((G2c75@f (lambda (G2c77@vars G2c78@count) (if (pair? G2c77@vars) (G2c75@f (cdr G2c77@vars) (+ G2c78@count '1)) (if (null? G2c77@vars) (values G2c78@count '=) (values G2c78@count '>=)))))) G2c75@f) G2c6f@vars '0)) (lambda (G2c7b@G2c73 G2c7c@G2c74) ((lambda (G2c7f@pred G2c80@count) (list (list 'primitive G2c7f@pred) G2c6e@n (list 'quote G2c80@count))) G2c7c@G2c74 G2c7b@G2c73))))) (set! G2c52@build-apply (lambda (G2c65@ae G2c66@g G2c67@vars G2c68@exp) (list '(primitive apply) (G2bfe@build-lambda G2c65@ae G2c67@vars G2c68@exp) G2c66@g))) (set! G2c54@expand-case-lambda (lambda (G2c55@ae G2c56@vars G2c57@exp*) ((lambda (G2c5b@g G2c5c@n) (list 'lambda G2c5b@g (G2c02@build-let G2c55@ae (list G2c5c@n) (list (list '(primitive length) G2c5b@g)) ((letrec ((G2c5f@f (lambda (G2c61@vars* G2c62@exp*) (if (null? G2c61@vars*) (G2c4e@build-error G2c55@ae) (list 'if (G2c50@build-pred G2c55@ae G2c5c@n (car G2c61@vars*)) (G2c52@build-apply G2c55@ae G2c5b@g (car G2c61@vars*) (car G2c62@exp*)) (G2c5f@f (cdr G2c61@vars*) (cdr G2c62@exp*))))))) G2c5f@f) G2c48@vars* G2c57@exp*)))) (gensym) (gensym)))) (if (= (length G2c49@exp*) '1) (G2bfe@build-lambda G2c47@ae (car G2c48@vars*) (car G2c49@exp*)) (G2c54@expand-case-lambda G2c47@ae G2c48@vars* G2c49@exp*)))) '#f '#f '#f '#f))) (set! G2c02@build-let (lambda (G2c85@ae G2c86@lhs* G2c87@rhs* G2c88@body) (cons (G2bfe@build-lambda G2c85@ae G2c86@lhs* G2c88@body) G2c87@rhs*))) (set! G2c34@build-sequence (lambda (G2c8d@ae G2c8e@exps) ((letrec ((G2c91@loop (lambda (G2c93@exps) (if (null? (cdr G2c93@exps)) (car G2c93@exps) (if (equal? (car G2c93@exps) (G2c36@build-void)) (G2c91@loop (cdr G2c93@exps)) (cons 'begin G2c93@exps)))))) G2c91@loop) G2c8e@exps))) (set! G2c36@build-void (lambda () '((primitive void)))) (set! G2c38@build-letrec (lambda (G2c95@ae G2c96@vars G2c97@val-exps G2c98@body-exp) (if (null? G2c96@vars) G2c98@body-exp (list 'letrec (map list G2c96@vars G2c97@val-exps) G2c98@body-exp)))) (set! G2c3a@build-letrec* (lambda (G2c9d@ae G2c9e@vars G2c9f@val-exps G2ca0@body-exp) (if (null? G2c9e@vars) G2ca0@body-exp (G2c02@build-let G2c9d@ae G2c9e@vars (map (lambda (G2ca5@x) (list 'quote '#f)) G2c9e@vars) (G2c34@build-sequence G2c9d@ae (append (map (lambda (G2ca7@lhs G2ca8@rhs) (list 'set! G2ca7@lhs G2ca8@rhs)) G2c9e@vars G2c9f@val-exps) (list G2ca0@body-exp))))))) (set! G2c3c@build-library-letrec* (lambda (G2cab@ae G2cac@name G2cad@vars G2cae@locs G2caf@val-exps G2cb0@body-exp) (list 'library-letrec* G2cac@name (map list G2cad@vars G2cae@locs G2caf@val-exps) G2cb0@body-exp))) (set! G2c3e@build-receive (lambda (G2cb7@ae G2cb8@vars G2cb9@producer G2cba@body*) (begin (display '"************** in ") (cons 'receive (cons G2cb8@vars (cons G2cb9@producer G2cba@body*)))))) (begin (set! G2cc8@G2c3e@build-receive G2c3e@build-receive) (set! G2cc7@G2c3c@build-library-letrec* G2c3c@build-library-letrec*) (set! G2cc6@G2c3a@build-letrec* G2c3a@build-letrec*) (set! G2cc5@G2c38@build-letrec G2c38@build-letrec) (set! G2cc4@G2c36@build-void G2c36@build-void) (set! G2cc3@G2c34@build-sequence G2c34@build-sequence) (set! G2cc2@G2c02@build-let G2c02@build-let) (set! G2cc1@G2c00@build-case-lambda G2c00@build-case-lambda) (set! G2cc0@G2bfe@build-lambda G2bfe@build-lambda) (set! G2cbf@G2b84@build-global-define G2b84@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cd7@set-cons G2cd9@set-union G2cde@top-mark* G2ce0@top-marked? G2ce2@gen-lexical G2ce4@gen-global G2ce6@gen-label G2ce8@gen-top-level-label G2cea@gen-define-label+loc G2cec@gen-define-label G2cf2@G2ced G2cf4@G2cef G2cf6@G2cee G2cf9@rib? G2cfb@make-rib G2cfd@rib-sym* G2cff@rib-mark** G2d01@rib-label* G2d03@rib-sealed/freq G2d05@rib-cache G2d07@set-rib-sym*! G2d09@set-rib-mark**! G2d0b@set-rib-label*! G2d0d@set-rib-sealed/freq! G2d0f@set-rib-cache! G2d11@make-empty-rib G2d13@make-cache-rib G2d15@find-label G2d17@extend-rib! G2d19@extend-rib/nc! G2d1b@make-rib-map G2d1d@seal-rib! G2d1f@unseal-rib! G2d21@make-full-rib G2d27@G2d22 G2d29@G2d24 G2d2b@G2d23 G2d2e@stx? G2d30@make-stx G2d32@stx-expr G2d34@stx-mark* G2d36@stx-subst* G2d38@stx-ae* G2d3a@set-stx-expr! G2d3c@set-stx-mark*! G2d3e@set-stx-subst*! G2d40@set-stx-ae*! G2d42@rp G2d44@datum->stx G2d46@gen-mark G2d48@anti-mark G2d4a@anti-mark? G2d4c@join-wraps G2d4e@mkstx G2d50@add-mark G2d52@add-subst G2d54@syntax-kind? G2d56@syntax-vector->list G2d58@syntax-pair? G2d5a@syntax-vector? G2d5c@syntax-null? G2d5e@syntax-list? G2d60@syntax-car G2d62@syntax-cdr G2d64@syntax->list G2d66@id? G2d68@id->sym G2d6a@same-marks? G2d6c@bound-id=? G2d6e@free-id=? G2d70@valid-bound-ids? G2d72@distinct-bound-ids? G2d74@bound-id-member? G2d76@self-evaluating? G2d78@strip-annotations G2d7a@strip G2d7c@stx->datum G2d7e@same-marks*? G2d80@id->label G2d82@id->real-label G2d84@label->binding G2d86@make-binding G2d88@binding-type G2d8a@binding-value G2d8c@raise-unbound-error G2d8e@syntax-type G2d9e@sanitize-binding G2da0@make-variable-transformer G2da2@variable-transformer? G2da4@variable-transformer-procedure G2da6@make-eval-transformer G2ee9@parse-define G2eeb@parse-define-syntax G2eed@scheme-stx-hashtable G2eef@scheme-stx G2ef1@lexical-var G2ef3@lexical-mutable? G2ef5@set-lexical-mutable! G2ef7@add-lexical G2ef9@add-lexicals G2efb@letrec-helper G2efd@letrec-transformer G2eff@letrec*-transformer G2f01@fluid-let-syntax-transformer G2f03@type-descriptor-transformer G2f05@record-type-descriptor-transformer G2f07@record-constructor-descriptor-transformer G2f09@when-macro G2f0b@unless-macro G2f0d@if-transformer G2f0f@and-transformer G2f11@or-transformer G2f13@case-macro G2f15@quote-transformer G2f17@case-lambda-transformer G2f19@lambda-transformer G2f1b@bless G2f1d@with-syntax-macro G2f1f@invalid-fmls-error G2f21@let-macro G2f23@let-values-macro G2f25@let*-values-macro G2f27@trace-lambda-macro G2f29@trace-define-macro G2f2b@trace-define-syntax-macro G2f2d@trace-let/rec-syntax G2f2f@trace-let-syntax-macro G2f31@trace-letrec-syntax-macro G2f33@guard-macro G2f35@define-enumeration-macro G2f37@time-macro G2f39@delay-macro G2f3b@assert-macro G2f3d@endianness-macro G2f3f@identifier-syntax-macro G2f41@do-macro G2f43@let*-macro G2f45@or-macro G2f47@and-macro G2f49@cond-macro G2f4b@do-include G2f4d@include-macro G2f4f@include-into-macro G2f51@syntax-rules-macro G2f53@quasiquote-macro G2f55@quasisyntax-macro G2f57@define-struct-macro G2f59@define-record-type-macro G2f5b@define-condition-type-macro G2f5d@incorrect-usage-macro G2f5f@parameterize-macro G2f61@foreign-call-transformer G2f63@convert-pattern G2f65@syntax-dispatch G2f67@ellipsis? G2f69@underscore? G2f6b@verify-literals G2f6d@syntax-case-transformer G2f6f@ellipsis-map G2f71@syntax-transformer G2f73@core-macro-transformer G2f75@file-options-macro G2f77@symbol-macro G2f79@macro-transformer G2f7b@local-macro-transformer G2f7d@do-macro-call G2f7f@chi-macro G2f81@chi-local-macro G2f83@chi-global-macro G2f85@chi-expr* G2f87@chi-application G2f89@chi-expr G2f8b@chi-set! G2f8d@verify-formals G2f8f@chi-lambda-clause G2f91@chi-lambda-clause* G2f93@chi-defun G2f95@chi-rhs G2f97@expand-interaction-rhs*/init* G2f99@chi-rhs* G2f9b@find-bound=? G2f9d@find-dups G2f9f@chi-internal G2fa1@parse-module G2fa7@G2fa2 G2fa9@G2fa4 G2fab@G2fa3 G2fae@module-interface? G2fb0@make-module-interface G2fb2@module-interface-first-mark G2fb4@module-interface-exp-id-vec G2fb6@module-interface-exp-lab-vec G2fb8@set-module-interface-first-mark! G2fba@set-module-interface-exp-id-vec! G2fbc@set-module-interface-exp-lab-vec! G2fbe@module-interface-exp-id* G2fc0@chi-internal-module G2fc2@chi-body* G2fc4@expand-transformer G2fc6@parse-exports G2fc8@parse-library-name G2fca@parse-library G2fcc@parse-import-spec* G2fce@make-top-rib G2fd0@make-collector G2fd2@inv-collector G2fd4@vis-collector G2fd6@imp-collector G2fd8@chi-library-internal G2fda@chi-interaction-expr G2fdc@library-body-expander G2fde@core-library-expander G2fe0@parse-top-level-program G2fe2@top-level-expander G2fe8@G2fe3 G2fea@G2fe5 G2fec@G2fe4 G2fef@env? G2ff1@make-env G2ff3@env-names G2ff5@env-labels G2ff7@env-itc G2ff9@set-env-names! G2ffb@set-env-labels! G2ffd@set-env-itc! G2fff@rp G3005@G3000 G3007@G3002 G3009@G3001 G300c@interaction-env? G300e@make-interaction-env G3010@interaction-env-rib G3012@interaction-env-r G3014@interaction-env-locs G3016@set-interaction-env-rib! G3018@set-interaction-env-r! G301a@set-interaction-env-locs! G301c@rp G301e@interaction-environment-symbols G3020@environment-bindings G3022@parse-binding G3024@environment? G3026@environment-symbols G3028@environment G302a@null-environment G302c@scheme-report-environment G302e@expand G3030@eval G3032@library-expander G3034@boot-library-expand G3036@rev-map-append G3038@build-exports G303a@make-export-subst G303c@make-export-env/macros G303e@generate-temporaries G3040@free-identifier=? G3042@bound-identifier=? G3044@make-source-condition G3046@extract-position-condition G3048@expression-position G304a@assertion-error G304c@syntax-error G304e@extract-trace G3050@syntax-violation* G3052@syntax-violation G3054@identifier? G3056@datum->syntax G3058@syntax->datum G305a@compile-r6rs-top-level G305c@pre-compile-r6rs-top-level G305e@interaction-environment G3060@top-level-context) (begin (set! G2cd7@set-cons (lambda (G3061@x G3062@ls) (if (memq G3061@x G3062@ls) G3062@ls (cons G3061@x G3062@ls)))) (set! G2cd9@set-union (lambda (G3065@ls1 G3066@ls2) (if (null? G3065@ls1) G3066@ls2 (if (memq (car G3065@ls1) G3066@ls2) (G2cd9@set-union (cdr G3065@ls1) G3066@ls2) (cons (car G3065@ls1) (G2cd9@set-union (cdr G3065@ls1) G3066@ls2)))))) (set! G2cde@top-mark* '(top)) (set! G2ce0@top-marked? (lambda (G3069@m*) (memq 'top G3069@m*))) (set! G2ce2@gen-lexical (lambda (G306b@sym) (if (symbol? G306b@sym) (gensym G306b@sym) (if (G2d2e@stx? G306b@sym) (G2ce2@gen-lexical (G2d68@id->sym G306b@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G306b@sym))))) (set! G2ce4@gen-global (lambda (G306d@x) (G2ce2@gen-lexical G306d@x))) (set! G2ce6@gen-label (lambda (G306f@_) (gensym))) (set! G2ce8@gen-top-level-label (lambda (G3071@id G3072@rib) ((lambda (G3076@find) (begin (set! G3076@find (lambda (G3081@sym G3082@mark* G3083@sym* G3084@mark** G3085@label*) (and (pair? G3083@sym*) (if (and (eq? G3081@sym (car G3083@sym*)) (G2d6a@same-marks? G3082@mark* (car G3084@mark**))) (car G3085@label*) (G3076@find G3081@sym G3082@mark* (cdr G3083@sym*) (cdr G3084@mark**) (cdr G3085@label*)))))) ((lambda (G3077@sym G3078@mark*) ((lambda (G307b@sym*) ((lambda (G307d@t) (if G307d@t ((lambda (G307f@label) (if (G2b7c@G2a22@imported-label->binding G307f@label) (gensym) G307f@label)) G307d@t) (gensym))) (and (memq G3077@sym (G2cfd@rib-sym* G3072@rib)) (G3076@find G3077@sym G3078@mark* G307b@sym* (G2cff@rib-mark** G3072@rib) (G2d01@rib-label* G3072@rib))))) (G2cfd@rib-sym* G3072@rib))) (G2d68@id->sym G3071@id) (G2d34@stx-mark* G3071@id)))) '#f))) (set! G2cea@gen-define-label+loc (lambda (G308b@id G308c@rib) ((lambda (G308f@t) (if G308f@t ((lambda (G3091@env) ((lambda (G3093@label G3094@locs) (values G3093@label ((lambda (G3097@t) (if G3097@t (cdr G3097@t) ((lambda (G3099@loc) (begin (G301a@set-interaction-env-locs! G3091@env (cons (cons G3093@label G3099@loc) G3094@locs)) G3099@loc)) (G2ce2@gen-lexical G308b@id)))) (assq G3093@label G3094@locs)))) (G2ce8@gen-top-level-label G308b@id G308c@rib) (G3014@interaction-env-locs G3091@env))) G308f@t) (values (gensym) (G2ce2@gen-lexical G308b@id)))) (G3060@top-level-context)))) (set! G2cec@gen-define-label (lambda (G309b@id G309c@rib) (if (G3060@top-level-context) (G2ce8@gen-top-level-label G309b@id G309c@rib) (gensym)))) (set! G2cf2@G2ced (make-record-type-descriptor 'rib '#f 'G2cf0 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cf4@G2cef '#f) (set! G2cf6@G2cee (make-record-constructor-descriptor G2cf2@G2ced '#f G2cf4@G2cef)) (set! G2cf9@rib? (record-predicate G2cf2@G2ced)) (set! G2cfb@make-rib (record-constructor G2cf6@G2cee)) (set! G2cfd@rib-sym* (record-accessor G2cf2@G2ced '0)) (set! G2cff@rib-mark** (record-accessor G2cf2@G2ced '1)) (set! G2d01@rib-label* (record-accessor G2cf2@G2ced '2)) (set! G2d03@rib-sealed/freq (record-accessor G2cf2@G2ced '3)) (set! G2d05@rib-cache (record-accessor G2cf2@G2ced '4)) (set! G2d07@set-rib-sym*! (record-mutator G2cf2@G2ced '0)) (set! G2d09@set-rib-mark**! (record-mutator G2cf2@G2ced '1)) (set! G2d0b@set-rib-label*! (record-mutator G2cf2@G2ced '2)) (set! G2d0d@set-rib-sealed/freq! (record-mutator G2cf2@G2ced '3)) (set! G2d0f@set-rib-cache! (record-mutator G2cf2@G2ced '4)) (set! G2d11@make-empty-rib (lambda () (G2cfb@make-rib '() '() '() '#f '#f))) (set! G2d13@make-cache-rib (lambda () (G2cfb@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d15@find-label (lambda (G309f@rib G30a0@sym G30a1@mark*) ((lambda (G30a5@ht) (and G30a5@ht ((lambda (G30a7@cv) ((lambda (G30a9@t) (if G30a9@t (cdr G30a9@t) '#f)) (and G30a7@cv (assp (lambda (G30ab@m) (G2d6a@same-marks? G30a1@mark* G30ab@m)) G30a7@cv)))) (hashtable-ref G30a5@ht G30a0@sym '#f)))) (G2d05@rib-cache G309f@rib)))) (set! G2d17@extend-rib! (lambda (G30ad@rib G30ae@id G30af@label) ((lambda (G30b4@find) (begin (set! G30b4@find (lambda (G30c5@sym G30c6@mark* G30c7@sym* G30c8@mark** G30c9@label*) (and (pair? G30c7@sym*) (if (and (eq? G30c5@sym (car G30c7@sym*)) (G2d6a@same-marks? G30c6@mark* (car G30c8@mark**))) G30c9@label* (G30b4@find G30c5@sym G30c6@mark* (cdr G30c7@sym*) (cdr G30c8@mark**) (cdr G30c9@label*)))))) (begin (if (G2d03@rib-sealed/freq G30ad@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30ad@rib) (void)) ((lambda (G30b5@sym G30b6@mark*) ((lambda (G30b9@sym*) ((lambda (G30bb@t) (if G30bb@t ((lambda (G30bd@p) (if (not (eq? G30af@label G30bd@p)) (G3052@syntax-violation '#f '"multiple definitions of identifier" G30ae@id) (void))) G30bb@t) ((lambda (G30bf@t) (if G30bf@t ((lambda (G30c1@p) (if (not (eq? G30af@label (car G30c1@p))) (if (G3060@top-level-context) (set-car! G30c1@p G30af@label) (G3052@syntax-violation '#f '"multiple definitions of identifier" G30ae@id)) (void))) G30bf@t) (begin (if (G2d05@rib-cache G30ad@rib) (hashtable-update! (G2d05@rib-cache G30ad@rib) G30b5@sym (lambda (G30c3@e) (cons (cons G30b6@mark* G30af@label) G30c3@e)) '()) (void)) (G2d07@set-rib-sym*! G30ad@rib (cons G30b5@sym G30b9@sym*)) (G2d09@set-rib-mark**! G30ad@rib (cons G30b6@mark* (G2cff@rib-mark** G30ad@rib))) (G2d0b@set-rib-label*! G30ad@rib (cons G30af@label (G2d01@rib-label* G30ad@rib)))))) (and (memq G30b5@sym (G2cfd@rib-sym* G30ad@rib)) (G30b4@find G30b5@sym G30b6@mark* G30b9@sym* (G2cff@rib-mark** G30ad@rib) (G2d01@rib-label* G30ad@rib)))))) (G2d15@find-label G30ad@rib G30b5@sym G30b6@mark*))) (G2cfd@rib-sym* G30ad@rib))) (G2d68@id->sym G30ae@id) (G2d34@stx-mark* G30ae@id))))) '#f))) (set! G2d19@extend-rib/nc! (lambda (G30cf@rib G30d0@id G30d1@label) ((lambda (G30d5@sym G30d6@mark*) ((lambda (G30d9@sym*) (begin (if (G2d05@rib-cache G30cf@rib) (hashtable-update! (G2d05@rib-cache G30cf@rib) G30d5@sym (lambda (G30db@e) (cons (cons G30d6@mark* G30d1@label) G30db@e)) '()) (void)) (G2d07@set-rib-sym*! G30cf@rib (cons G30d5@sym G30d9@sym*)) (G2d09@set-rib-mark**! G30cf@rib (cons G30d6@mark* (G2cff@rib-mark** G30cf@rib))) (G2d0b@set-rib-label*! G30cf@rib (cons G30d1@label (G2d01@rib-label* G30cf@rib))))) (G2cfd@rib-sym* G30cf@rib))) (G2d68@id->sym G30d0@id) (G2d34@stx-mark* G30d0@id)))) (set! G2d1b@make-rib-map (lambda (G30dd@sym*) ((lambda (G30df@ht) ((letrec ((G30e1@f (lambda (G30e3@i G30e4@sym*) (if (null? G30e4@sym*) G30df@ht (begin (hashtable-update! G30df@ht (car G30e4@sym*) (lambda (G30e7@x) (cons G30e3@i G30e7@x)) '()) (G30e1@f (+ G30e3@i '1) (cdr G30e4@sym*))))))) G30e1@f) '0 G30dd@sym*)) (make-eq-hashtable)))) (set! G2d1d@seal-rib! (lambda (G30e9@rib) ((lambda (G30eb@sym*) (if (not (null? G30eb@sym*)) (begin (G2d07@set-rib-sym*! G30e9@rib (list->vector G30eb@sym*)) (G2d09@set-rib-mark**! G30e9@rib (list->vector (G2cff@rib-mark** G30e9@rib))) (G2d0b@set-rib-label*! G30e9@rib (list->vector (G2d01@rib-label* G30e9@rib))) (G2d0d@set-rib-sealed/freq! G30e9@rib (G2d1b@make-rib-map G30eb@sym*))) (void))) (G2cfd@rib-sym* G30e9@rib)))) (set! G2d1f@unseal-rib! (lambda (G30ed@rib) (if (G2d03@rib-sealed/freq G30ed@rib) (begin (G2d0d@set-rib-sealed/freq! G30ed@rib '#f) (G2d07@set-rib-sym*! G30ed@rib (vector->list (G2cfd@rib-sym* G30ed@rib))) (G2d09@set-rib-mark**! G30ed@rib (vector->list (G2cff@rib-mark** G30ed@rib))) (G2d0b@set-rib-label*! G30ed@rib (vector->list (G2d01@rib-label* G30ed@rib)))) (void)))) (set! G2d21@make-full-rib (lambda (G30ef@id* G30f0@label*) ((lambda (G30f3@r) (begin (G2d1d@seal-rib! G30f3@r) G30f3@r)) (G2cfb@make-rib (map G2d68@id->sym G30ef@id*) (map G2d34@stx-mark* G30ef@id*) G30f0@label* '#f '#f)))) (set! G2d27@G2d22 (make-record-type-descriptor 'stx '#f 'G2d25 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d29@G2d24 '#f) (set! G2d2b@G2d23 (make-record-constructor-descriptor G2d27@G2d22 '#f G2d29@G2d24)) (set! G2d2e@stx? (record-predicate G2d27@G2d22)) (set! G2d30@make-stx (record-constructor G2d2b@G2d23)) (set! G2d32@stx-expr (record-accessor G2d27@G2d22 '0)) (set! G2d34@stx-mark* (record-accessor G2d27@G2d22 '1)) (set! G2d36@stx-subst* (record-accessor G2d27@G2d22 '2)) (set! G2d38@stx-ae* (record-accessor G2d27@G2d22 '3)) (set! G2d3a@set-stx-expr! (record-mutator G2d27@G2d22 '0)) (set! G2d3c@set-stx-mark*! (record-mutator G2d27@G2d22 '1)) (set! G2d3e@set-stx-subst*! (record-mutator G2d27@G2d22 '2)) (set! G2d40@set-stx-ae*! (record-mutator G2d27@G2d22 '3)) (set! G2d42@rp (G28ff@G2835@make-record-printer 'stx (lambda (G30f5@x G30f6@p G30f7@wr) (begin (display '"#<syntax " G30f6@p) (write (G2d7c@stx->datum G30f5@x) G30f6@p) ((lambda (G30fb@expr) (if (G28f7@G2825@annotation? G30fb@expr) ((lambda (G30fd@src) (if (pair? G30fd@src) (begin (display '" [" G30f6@p) (display (cdr G30fd@src) G30f6@p) (display '" of " G30f6@p) (display (car G30fd@src) G30f6@p) (display '"]" G30f6@p)) (void))) (G28f8@G2827@annotation-source G30fb@expr)) (void))) (G2d32@stx-expr G30f5@x)) (display '">" G30f6@p))))) (set! G2d44@datum->stx (lambda (G30ff@id G3100@datum) (G2d30@make-stx G3100@datum (G2d34@stx-mark* G30ff@id) (G2d36@stx-subst* G30ff@id) (G2d38@stx-ae* G30ff@id)))) (set! G2d46@gen-mark (lambda () (string '#\m))) (set! G2d48@anti-mark '#f) (set! G2d4a@anti-mark? not) (set! G2d4c@join-wraps (lambda (G3103@m1* G3104@s1* G3105@ae1* G3106@e) ((lambda (G310c@cancel) (begin (set! G310c@cancel (lambda (G3113@ls1 G3114@ls2) ((letrec ((G3117@f (lambda (G3119@x G311a@ls1) (if (null? G311a@ls1) (cdr G3114@ls2) (cons G3119@x (G3117@f (car G311a@ls1) (cdr G311a@ls1))))))) G3117@f) (car G3113@ls1) (cdr G3113@ls1)))) ((lambda (G310d@m2* G310e@s2* G310f@ae2*) (if (and (not (null? G3103@m1*)) (not (null? G310d@m2*)) (G2d4a@anti-mark? (car G310d@m2*))) (values (G310c@cancel G3103@m1* G310d@m2*) (G310c@cancel G3104@s1* G310e@s2*) (G310c@cancel G3105@ae1* G310f@ae2*)) (values (append G3103@m1* G310d@m2*) (append G3104@s1* G310e@s2*) (append G3105@ae1* G310f@ae2*)))) (G2d34@stx-mark* G3106@e) (G2d36@stx-subst* G3106@e) (G2d38@stx-ae* G3106@e)))) '#f))) (set! G2d4e@mkstx (lambda (G311d@e G311e@m* G311f@s* G3120@ae*) (if (and (G2d2e@stx? G311d@e) (not (G2ce0@top-marked? G311e@m*))) (call-with-values (lambda () (G2d4c@join-wraps G311e@m* G311f@s* G3120@ae* G311d@e)) (lambda (G3128@G3125 G3129@G3126 G312a@G3127) ((lambda (G312e@ae* G312f@s* G3130@m*) (G2d30@make-stx (G2d32@stx-expr G311d@e) G3130@m* G312f@s* G312e@ae*)) G312a@G3127 G3129@G3126 G3128@G3125))) (G2d30@make-stx G311d@e G311e@m* G311f@s* G3120@ae*)))) (set! G2d50@add-mark (lambda (G3134@m G3135@e G3136@ae) (G2d4e@mkstx G3135@e (list G3134@m) '(shift) (list G3136@ae)))) (set! G2d52@add-subst (lambda (G313a@subst G313b@e) (G2d4e@mkstx G313b@e '() (list G313a@subst) '()))) (set! G2d54@syntax-kind? (lambda (G313e@x G313f@p?) (if (G2d2e@stx? G313e@x) (G2d54@syntax-kind? (G2d32@stx-expr G313e@x) G313f@p?) (if (G28f7@G2825@annotation? G313e@x) (G2d54@syntax-kind? (G28f9@G2829@annotation-expression G313e@x) G313f@p?) (G313f@p? G313e@x))))) (set! G2d56@syntax-vector->list (lambda (G3142@x) (if (G2d2e@stx? G3142@x) ((lambda (G3144@ls G3145@m* G3146@s* G3147@ae*) (map (lambda (G314c@x) (G2d4e@mkstx G314c@x G3145@m* G3146@s* G3147@ae*)) G3144@ls)) (G2d56@syntax-vector->list (G2d32@stx-expr G3142@x)) (G2d34@stx-mark* G3142@x) (G2d36@stx-subst* G3142@x) (G2d38@stx-ae* G3142@x)) (if (G28f7@G2825@annotation? G3142@x) (G2d56@syntax-vector->list (G28f9@G2829@annotation-expression G3142@x)) (if (vector? G3142@x) (vector->list G3142@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3142@x)))))) (set! G2d58@syntax-pair? (lambda (G314e@x) (G2d54@syntax-kind? G314e@x pair?))) (set! G2d5a@syntax-vector? (lambda (G3150@x) (G2d54@syntax-kind? G3150@x vector?))) (set! G2d5c@syntax-null? (lambda (G3152@x) (G2d54@syntax-kind? G3152@x null?))) (set! G2d5e@syntax-list? (lambda (G3154@x) (or (G2d5c@syntax-null? G3154@x) (and (G2d58@syntax-pair? G3154@x) (G2d5e@syntax-list? (G2d62@syntax-cdr G3154@x)))))) (set! G2d60@syntax-car (lambda (G3156@x) (if (G2d2e@stx? G3156@x) (G2d4e@mkstx (G2d60@syntax-car (G2d32@stx-expr G3156@x)) (G2d34@stx-mark* G3156@x) (G2d36@stx-subst* G3156@x) (G2d38@stx-ae* G3156@x)) (if (G28f7@G2825@annotation? G3156@x) (G2d60@syntax-car (G28f9@G2829@annotation-expression G3156@x)) (if (pair? G3156@x) (car G3156@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3156@x)))))) (set! G2d62@syntax-cdr (lambda (G3158@x) (if (G2d2e@stx? G3158@x) (G2d4e@mkstx (G2d62@syntax-cdr (G2d32@stx-expr G3158@x)) (G2d34@stx-mark* G3158@x) (G2d36@stx-subst* G3158@x) (G2d38@stx-ae* G3158@x)) (if (G28f7@G2825@annotation? G3158@x) (G2d62@syntax-cdr (G28f9@G2829@annotation-expression G3158@x)) (if (pair? G3158@x) (cdr G3158@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3158@x)))))) (set! G2d64@syntax->list (lambda (G315a@x) (if (G2d58@syntax-pair? G315a@x) (cons (G2d60@syntax-car G315a@x) (G2d64@syntax->list (G2d62@syntax-cdr G315a@x))) (if (G2d5c@syntax-null? G315a@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G315a@x))))) (set! G2d66@id? (lambda (G315c@x) (and (G2d2e@stx? G315c@x) ((lambda (G315e@expr) (symbol? (if (G28f7@G2825@annotation? G315e@expr) (G28f6@G2823@annotation-stripped G315e@expr) G315e@expr))) (G2d32@stx-expr G315c@x))))) (set! G2d68@id->sym (lambda (G3160@x) (begin (if (not (G2d2e@stx? G3160@x)) (error 'id->sym '"BUG in ikarus: not an id" G3160@x) (void)) ((lambda (G3162@expr) ((lambda (G3164@sym) (if (symbol? G3164@sym) G3164@sym (error 'id->sym '"BUG in ikarus: not an id" G3160@x))) (if (G28f7@G2825@annotation? G3162@expr) (G28f6@G2823@annotation-stripped G3162@expr) G3162@expr))) (G2d32@stx-expr G3160@x))))) (set! G2d6a@same-marks? (lambda (G3166@x G3167@y) (or (and (null? G3166@x) (null? G3167@y)) (and (pair? G3166@x) (pair? G3167@y) (eq? (car G3166@x) (car G3167@y)) (G2d6a@same-marks? (cdr G3166@x) (cdr G3167@y)))))) (set! G2d6c@bound-id=? (lambda (G316a@x G316b@y) (and (eq? (G2d68@id->sym G316a@x) (G2d68@id->sym G316b@y)) (G2d6a@same-marks? (G2d34@stx-mark* G316a@x) (G2d34@stx-mark* G316b@y))))) (set! G2d6e@free-id=? (lambda (G316e@i G316f@j) ((lambda (G3172@t0 G3173@t1) (if (or G3172@t0 G3173@t1) (eq? G3172@t0 G3173@t1) (eq? (G2d68@id->sym G316e@i) (G2d68@id->sym G316f@j)))) (G2d82@id->real-label G316e@i) (G2d82@id->real-label G316f@j)))) (set! G2d70@valid-bound-ids? (lambda (G3176@id*) (and (for-all G2d66@id? G3176@id*) (G2d72@distinct-bound-ids? G3176@id*)))) (set! G2d72@distinct-bound-ids? (lambda (G3178@id*) (or (null? G3178@id*) (and (not (G2d74@bound-id-member? (car G3178@id*) (cdr G3178@id*))) (G2d72@distinct-bound-ids? (cdr G3178@id*)))))) (set! G2d74@bound-id-member? (lambda (G317a@id G317b@id*) (and (pair? G317b@id*) (or (G2d6c@bound-id=? G317a@id (car G317b@id*)) (G2d74@bound-id-member? G317a@id (cdr G317b@id*)))))) (set! G2d76@self-evaluating? (lambda (G317e@x) (or (number? G317e@x) (string? G317e@x) (char? G317e@x) (boolean? G317e@x) (regexp? G317e@x) (bytevector? G317e@x)))) (set! G2d78@strip-annotations (lambda (G3180@x) (if (pair? G3180@x) (cons (G2d78@strip-annotations (car G3180@x)) (G2d78@strip-annotations (cdr G3180@x))) (if (vector? G3180@x) (vector-map G2d78@strip-annotations G3180@x) (if (G28f7@G2825@annotation? G3180@x) (G28f6@G2823@annotation-stripped G3180@x) G3180@x))))) (set! G2d7a@strip (lambda (G3182@x G3183@m*) (if (G2ce0@top-marked? G3183@m*) (if (or (G28f7@G2825@annotation? G3182@x) (and (pair? G3182@x) (G28f7@G2825@annotation? (car G3182@x))) (and (vector? G3182@x) (> (vector-length G3182@x) '0) (G28f7@G2825@annotation? (vector-ref G3182@x '0)))) (G2d78@strip-annotations G3182@x) G3182@x) ((letrec ((G3186@f (lambda (G3188@x) (if (G2d2e@stx? G3188@x) (G2d7a@strip (G2d32@stx-expr G3188@x) (G2d34@stx-mark* G3188@x)) (if (G28f7@G2825@annotation? G3188@x) (G28f6@G2823@annotation-stripped G3188@x) (if (pair? G3188@x) ((lambda (G318a@a G318b@d) (if (and (eq? G318a@a (car G3188@x)) (eq? G318b@d (cdr G3188@x))) G3188@x (cons G318a@a G318b@d))) (G3186@f (car G3188@x)) (G3186@f (cdr G3188@x))) (if (vector? G3188@x) ((lambda (G318e@old) ((lambda (G3190@new) (if (for-all eq? G318e@old G3190@new) G3188@x (list->vector G3190@new))) (map G3186@f G318e@old))) (vector->list G3188@x)) G3188@x))))))) G3186@f) G3182@x)))) (set! G2d7c@stx->datum (lambda (G3192@x) (G2d7a@strip G3192@x '()))) (set! G2d7e@same-marks*? (lambda (G3194@mark* G3195@mark** G3196@si) (if (null? G3196@si) '#f (if (G2d6a@same-marks? G3194@mark* (vector-ref G3195@mark** (car G3196@si))) (car G3196@si) (G2d7e@same-marks*? G3194@mark* G3195@mark** (cdr G3196@si)))))) (set! G2d80@id->label (lambda (G319a@id) (or (G2d82@id->real-label G319a@id) ((lambda (G319c@t) (if G319c@t ((lambda (G319e@env) ((lambda (G31a0@rib) (call-with-values (lambda () (G2cea@gen-define-label+loc G319a@id G31a0@rib)) (lambda (G31a4@G31a2 G31a5@G31a3) ((lambda (G31a8@loc_ G31a9@lab) (begin (G2d17@extend-rib! G31a0@rib G319a@id G31a9@lab) G31a9@lab)) G31a5@G31a3 G31a4@G31a2)))) (G3010@interaction-env-rib G319e@env))) G319c@t) '#f)) (G3060@top-level-context))))) (set! G2d82@id->real-label (lambda (G31ac@id) ((lambda (G31ae@sym) ((letrec ((G31b0@search (lambda (G31b2@subst* G31b3@mark*) (if (null? G31b2@subst*) '#f (if (eq? (car G31b2@subst*) 'shift) (G31b0@search (cdr G31b2@subst*) (cdr G31b3@mark*)) ((lambda (G31b6@rib) ((lambda (G31b8@t) (if G31b8@t ((lambda (G31ba@ht) ((lambda (G31bc@si) ((lambda (G31be@i) (if G31be@i (vector-ref (G2d01@rib-label* G31b6@rib) G31be@i) (G31b0@search (cdr G31b2@subst*) G31b3@mark*))) (and G31bc@si (G2d7e@same-marks*? G31b3@mark* (G2cff@rib-mark** G31b6@rib) (reverse G31bc@si))))) (hashtable-ref G31ba@ht G31ae@sym '#f))) G31b8@t) (or (G2d15@find-label G31b6@rib G31ae@sym G31b3@mark*) ((letrec ((G31c0@f (lambda (G31c2@sym* G31c3@mark** G31c4@label*) (if (null? G31c2@sym*) (G31b0@search (cdr G31b2@subst*) G31b3@mark*) (if (and (eq? (car G31c2@sym*) G31ae@sym) (G2d6a@same-marks? (car G31c3@mark**) G31b3@mark*)) (car G31c4@label*) (G31c0@f (cdr G31c2@sym*) (cdr G31c3@mark**) (cdr G31c4@label*))))))) G31c0@f) (G2cfd@rib-sym* G31b6@rib) (G2cff@rib-mark** G31b6@rib) (G2d01@rib-label* G31b6@rib))))) (G2d03@rib-sealed/freq G31b6@rib))) (car G31b2@subst*))))))) G31b0@search) (G2d36@stx-subst* G31ac@id) (G2d34@stx-mark* G31ac@id))) (G2d68@id->sym G31ac@id)))) (set! G2d84@label->binding (lambda (G31c8@x G31c9@r) ((lambda (G31cc@t) (if G31cc@t ((lambda (G31ce@b) (if (and (pair? G31ce@b) (eq? (car G31ce@b) '$core-rtd)) (cons '$rtd (map G2f1b@bless (cdr G31ce@b))) (if (and (pair? G31ce@b) (eq? (car G31ce@b) 'global-rtd)) ((lambda (G31d0@lib G31d1@loc) (cons '$rtd (symbol-value G31d1@loc))) (cadr G31ce@b) (cddr G31ce@b)) G31ce@b))) G31cc@t) ((lambda (G31d4@t) (if G31d4@t (cdr G31d4@t) ((lambda (G31d6@t) (if G31d6@t ((lambda (G31d8@env) ((lambda (G31da@t) (if G31da@t ((lambda (G31dc@p) (cons* 'lexical (cdr G31dc@p) '#f)) G31da@t) '(displaced-lexical . #f))) (assq G31c8@x (G3014@interaction-env-locs G31d8@env)))) G31d6@t) '(displaced-lexical . #f))) (G3060@top-level-context)))) (assq G31c8@x G31c9@r)))) (G2b7c@G2a22@imported-label->binding G31c8@x)))) (set! G2d86@make-binding cons) (set! G2d88@binding-type car) (set! G2d8a@binding-value cdr) (set! G2d8c@raise-unbound-error (lambda (G31de@id) (G3050@syntax-violation* '#f '"unbound identifier" G31de@id (G4ca6@G4af0@make-undefined-violation)))) (set! G2d8e@syntax-type (lambda (G31e0@e G31e1@r) (if (G2d66@id? G31e0@e) ((lambda (G31e4@id) ((lambda (G31e6@label) ((lambda (G31e8@b) ((lambda (G31ea@type) ((lambda () (begin (if (not G31e6@label) (G2d8c@raise-unbound-error G31e4@id) (void)) ((lambda (G31ec@t) (if (memv G31ec@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31ea@type (G2d8a@binding-value G31e8@b) G31e4@id) (values 'other '#f '#f))) G31ea@type))))) (G2d88@binding-type G31e8@b))) (G2d84@label->binding G31e6@label G31e1@r))) (G2d80@id->label G31e4@id))) G31e0@e) (if (G2d58@syntax-pair? G31e0@e) ((lambda (G31ee@id) (if (G2d66@id? G31ee@id) ((lambda (G31f0@label) ((lambda (G31f2@b) ((lambda (G31f4@type) ((lambda () (begin (if (not G31f0@label) (G2d8c@raise-unbound-error G31ee@id) (void)) ((lambda (G31f6@t) (if (memv G31f6@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31f4@type (G2d8a@binding-value G31f2@b) G31ee@id) (values 'call '#f '#f))) G31f4@type))))) (G2d88@binding-type G31f2@b))) (G2d84@label->binding G31f0@label G31e1@r))) (G2d80@id->label G31ee@id)) (values 'call '#f '#f))) (G2d60@syntax-car G31e0@e)) ((lambda (G31f8@d) (if (G2d76@self-evaluating? G31f8@d) (values 'constant G31f8@d '#f) (values 'other '#f '#f))) (G2d7c@stx->datum G31e0@e)))))) (set! G2d9e@sanitize-binding (lambda (G31fa@x G31fb@src) (if (procedure? G31fa@x) (cons* 'local-macro G31fa@x G31fb@src) (if (and (pair? G31fa@x) (eq? (car G31fa@x) 'macro!) (procedure? (cdr G31fa@x))) (cons* 'local-macro! (cdr G31fa@x) G31fb@src) (if (and (pair? G31fa@x) (eq? (car G31fa@x) '$rtd)) G31fa@x (assertion-violation 'expand '"invalid transformer" G31fa@x)))))) (set! G2da0@make-variable-transformer (lambda (G31fe@x) (if (procedure? G31fe@x) (cons 'macro! G31fe@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31fe@x)))) (set! G2da2@variable-transformer? (lambda (G3200@x) (and (pair? G3200@x) (eq? (car G3200@x) 'macro!) (procedure? (cdr G3200@x))))) (set! G2da4@variable-transformer-procedure (lambda (G3202@x) (if (G2da2@variable-transformer? G3202@x) (cdr G3202@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G3202@x)))) (set! G2da6@make-eval-transformer (lambda (G3204@x) (G2d9e@sanitize-binding (eval-core (G2956@G290e@expanded->core G3204@x)) G3204@x))) (set! G2ee9@parse-define (lambda (G3206@x) ((lambda (G3208@t) ((lambda (G320a@ls/false) (if (and G320a@ls/false (apply (lambda (G320c@id G320d@fmls G320e@b G320f@b*) (G2d66@id? G320c@id)) G320a@ls/false)) (apply (lambda (G3214@id G3215@fmls G3216@b G3217@b*) (begin (G2f8d@verify-formals G3215@fmls G3206@x) (values G3214@id (cons 'defun (cons G3215@fmls (cons G3216@b G3217@b*)))))) G320a@ls/false) ((lambda (G321c@t) ((lambda (G321e@ls/false) (if (and G321e@ls/false (apply (lambda (G3220@id G3221@val) (G2d66@id? G3220@id)) G321e@ls/false)) (apply (lambda (G3224@id G3225@val) (values G3224@id (cons 'expr G3225@val))) G321e@ls/false) ((lambda (G3228@t) ((lambda (G322a@ls/false) (if (and G322a@ls/false (apply (lambda (G322c@id) (G2d66@id? G322c@id)) G322a@ls/false)) (apply (lambda (G322e@id) (values G322e@id (cons 'expr (G2f1b@bless '(void))))) G322a@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3228@t))) (G2f65@syntax-dispatch G3228@t '(_ any)))) G321c@t))) (G2f65@syntax-dispatch G321c@t '(_ any any)))) G3208@t))) (G2f65@syntax-dispatch G3208@t '(_ (any . any) any . each-any)))) G3206@x))) (set! G2eeb@parse-define-syntax (lambda (G3230@x) ((lambda (G3232@t) ((lambda (G3234@ls/false) (if (and G3234@ls/false (apply (lambda (G3236@id G3237@val) (G2d66@id? G3236@id)) G3234@ls/false)) (apply (lambda (G323a@id G323b@val) (values G323a@id G323b@val)) G3234@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3232@t))) (G2f65@syntax-dispatch G3232@t '(_ any any)))) G3230@x))) (set! G2eed@scheme-stx-hashtable (make-eq-hashtable)) (set! G2eef@scheme-stx (lambda (G323e@sym) (or (hashtable-ref G2eed@scheme-stx-hashtable G323e@sym '#f) ((lambda (G3240@subst) ((lambda (G3242@stx) ((lambda (G3244@stx) ((lambda () (begin (hashtable-set! G2eed@scheme-stx-hashtable G323e@sym G3244@stx) G3244@stx)))) ((lambda (G3246@t) (if G3246@t ((lambda (G3248@x) ((lambda (G324a@name G324b@label) (G2d52@add-subst (G2cfb@make-rib (list G324a@name) (list G2cde@top-mark*) (list G324b@label) '#f '#f) G3242@stx)) (car G3248@x) (cdr G3248@x))) G3246@t) G3242@stx)) (assq G323e@sym G3240@subst)))) (G2d30@make-stx G323e@sym G2cde@top-mark* '() '()))) (G2b52@G29ce@library-subst (G2b76@G2a16@find-library-by-name '(psyntax system $all))))))) (set! G2ef1@lexical-var car) (set! G2ef3@lexical-mutable? cdr) (set! G2ef5@set-lexical-mutable! set-cdr!) (set! G2ef7@add-lexical (lambda (G324e@lab G324f@lex G3250@r) (cons (cons* G324e@lab 'lexical G324f@lex '#f) G3250@r))) (set! G2ef9@add-lexicals (lambda (G3254@lab* G3255@lex* G3256@r) (if (null? G3254@lab*) G3256@r (G2ef9@add-lexicals (cdr G3254@lab*) (cdr G3255@lex*) (G2ef7@add-lexical (car G3254@lab*) (car G3255@lex*) G3256@r))))) (set! G2efb@letrec-helper (lambda (G325a@e G325b@r G325c@mr G325d@build) ((lambda (G3262@t) ((lambda (G3264@ls/false) (if G3264@ls/false (apply (lambda (G3266@lhs* G3267@rhs* G3268@b G3269@b*) (if (not (G2d70@valid-bound-ids? G3266@lhs*)) (G2f1f@invalid-fmls-error G325a@e G3266@lhs*) ((lambda (G326e@lex* G326f@lab*) ((lambda (G3272@rib G3273@r) ((lambda (G3276@body G3277@rhs*) (G325d@build '#f G326e@lex* G3277@rhs* G3276@body)) (G2f9f@chi-internal (G2d52@add-subst G3272@rib (cons G3268@b G3269@b*)) G3273@r G325c@mr) (G2f85@chi-expr* (map (lambda (G327a@x) (G2d52@add-subst G3272@rib G327a@x)) G3267@rhs*) G3273@r G325c@mr))) (G2d21@make-full-rib G3266@lhs* G326f@lab*) (G2ef9@add-lexicals G326f@lab* G326e@lex* G325b@r))) (map G2ce2@gen-lexical G3266@lhs*) (map G2ce6@gen-label G3266@lhs*)))) G3264@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3262@t))) (G2f65@syntax-dispatch G3262@t '(_ #(each (any any)) any . each-any)))) G325a@e))) (set! G2efd@letrec-transformer (lambda (G327c@e G327d@r G327e@mr) (G2efb@letrec-helper G327c@e G327d@r G327e@mr G2cc5@G2c38@build-letrec))) (set! G2eff@letrec*-transformer (lambda (G3282@e G3283@r G3284@mr) (G2efb@letrec-helper G3282@e G3283@r G3284@mr G2cc6@G2c3a@build-letrec*))) (set! G2f01@fluid-let-syntax-transformer (lambda (G3288@e G3289@r G328a@mr) ((lambda (G328f@lookup) (begin (set! G328f@lookup (lambda (G32a2@x) (or (G2d80@id->label G32a2@x) (G3052@syntax-violation '#f '"unbound identifier" G3288@e G32a2@x)))) ((lambda (G3290@t) ((lambda (G3292@ls/false) (if G3292@ls/false (apply (lambda (G3294@lhs* G3295@rhs* G3296@b G3297@b*) (if (not (G2d70@valid-bound-ids? G3294@lhs*)) (G2f1f@invalid-fmls-error G3288@e G3294@lhs*) ((lambda (G329c@lab* G329d@rhs*) (G2f9f@chi-internal (cons G3296@b G3297@b*) (append (map cons G329c@lab* G329d@rhs*) G3289@r) (append (map cons G329c@lab* G329d@rhs*) G328a@mr))) (map G328f@lookup G3294@lhs*) (map (lambda (G32a0@x) (G2da6@make-eval-transformer (G2fc4@expand-transformer G32a0@x G328a@mr))) G3295@rhs*)))) G3292@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3290@t))) (G2f65@syntax-dispatch G3290@t '(_ #(each (any any)) any . each-any)))) G3288@e))) '#f))) (set! G2f03@type-descriptor-transformer (lambda (G32a4@e G32a5@r G32a6@mr) ((lambda (G32aa@t) ((lambda (G32ac@ls/false) (if (and G32ac@ls/false (apply (lambda (G32ae@id) (G2d66@id? G32ae@id)) G32ac@ls/false)) (apply (lambda (G32b0@id) ((lambda (G32b2@lab) ((lambda (G32b4@b) ((lambda (G32b6@type) ((lambda () (begin (if (not G32b2@lab) (G2d8c@raise-unbound-error G32b0@id) (void)) (if (not (and (eq? G32b6@type '$rtd) (not (list? (G2d8a@binding-value G32b4@b))))) (G3052@syntax-violation '#f '"not a record type" G32a4@e) (void)) (list 'quote (G2d8a@binding-value G32b4@b)))))) (G2d88@binding-type G32b4@b))) (G2d84@label->binding G32b2@lab G32a5@r))) (G2d80@id->label G32b0@id))) G32ac@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G32aa@t))) (G2f65@syntax-dispatch G32aa@t '(_ any)))) G32a4@e))) (set! G2f05@record-type-descriptor-transformer (lambda (G32b8@e G32b9@r G32ba@mr) ((lambda (G32be@t) ((lambda (G32c0@ls/false) (if (and G32c0@ls/false (apply (lambda (G32c2@id) (G2d66@id? G32c2@id)) G32c0@ls/false)) (apply (lambda (G32c4@id) ((lambda (G32c6@lab) ((lambda (G32c8@b) ((lambda (G32ca@type) ((lambda () (begin (if (not G32c6@lab) (G2d8c@raise-unbound-error G32c4@id) (void)) (if (not (and (eq? G32ca@type '$rtd) (list? (G2d8a@binding-value G32c8@b)))) (G3052@syntax-violation '#f '"not a record type" G32b8@e) (void)) (G2f89@chi-expr (car (G2d8a@binding-value G32c8@b)) G32b9@r G32ba@mr))))) (G2d88@binding-type G32c8@b))) (G2d84@label->binding G32c6@lab G32b9@r))) (G2d80@id->label G32c4@id))) G32c0@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G32be@t))) (G2f65@syntax-dispatch G32be@t '(_ any)))) G32b8@e))) (set! G2f07@record-constructor-descriptor-transformer (lambda (G32cc@e G32cd@r G32ce@mr) ((lambda (G32d2@t) ((lambda (G32d4@ls/false) (if (and G32d4@ls/false (apply (lambda (G32d6@id) (G2d66@id? G32d6@id)) G32d4@ls/false)) (apply (lambda (G32d8@id) ((lambda (G32da@lab) ((lambda (G32dc@b) ((lambda (G32de@type) ((lambda () (begin (if (not G32da@lab) (G2d8c@raise-unbound-error G32d8@id) (void)) (if (not (and (eq? G32de@type '$rtd) (list? (G2d8a@binding-value G32dc@b)))) (G3052@syntax-violation '#f '"invalid type" G32cc@e) (void)) (G2f89@chi-expr (cadr (G2d8a@binding-value G32dc@b)) G32cd@r G32ce@mr))))) (G2d88@binding-type G32dc@b))) (G2d84@label->binding G32da@lab G32cd@r))) (G2d80@id->label G32d8@id))) G32d4@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G32d2@t))) (G2f65@syntax-dispatch G32d2@t '(_ any)))) G32cc@e))) (set! G2f09@when-macro (lambda (G32e0@e) ((lambda (G32e2@t) ((lambda (G32e4@ls/false) (if G32e4@ls/false (apply (lambda (G32e6@test G32e7@e G32e8@e*) (G2f1b@bless (list 'if G32e6@test (cons 'begin (cons G32e7@e G32e8@e*))))) G32e4@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G32e2@t))) (G2f65@syntax-dispatch G32e2@t '(_ any any . each-any)))) G32e0@e))) (set! G2f0b@unless-macro (lambda (G32ec@e) ((lambda (G32ee@t) ((lambda (G32f0@ls/false) (if G32f0@ls/false (apply (lambda (G32f2@test G32f3@e G32f4@e*) (G2f1b@bless (list 'if (list 'not G32f2@test) (cons 'begin (cons G32f3@e G32f4@e*))))) G32f0@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G32ee@t))) (G2f65@syntax-dispatch G32ee@t '(_ any any . each-any)))) G32ec@e))) (set! G2f0d@if-transformer (lambda (G32f8@e G32f9@r G32fa@mr) ((lambda (G32fe@t) ((lambda (G3300@ls/false) (if G3300@ls/false (apply (lambda (G3302@e0 G3303@e1 G3304@e2) (list 'if (G2f89@chi-expr G3302@e0 G32f9@r G32fa@mr) (G2f89@chi-expr G3303@e1 G32f9@r G32fa@mr) (G2f89@chi-expr G3304@e2 G32f9@r G32fa@mr))) G3300@ls/false) ((lambda (G3308@t) ((lambda (G330a@ls/false) (if G330a@ls/false (apply (lambda (G330c@e0 G330d@e1) (list 'if (G2f89@chi-expr G330c@e0 G32f9@r G32fa@mr) (G2f89@chi-expr G330d@e1 G32f9@r G32fa@mr) (G2cc4@G2c36@build-void))) G330a@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3308@t))) (G2f65@syntax-dispatch G3308@t '(_ any any)))) G32fe@t))) (G2f65@syntax-dispatch G32fe@t '(_ any any any)))) G32f8@e))) (set! G2f0f@and-transformer (lambda (G3310@e G3311@r G3312@mr) ((lambda (G3316@t) ((lambda (G3318@ls/false) (if G3318@ls/false (apply (lambda (G331a@e*) (cons 'and (G2f85@chi-expr* G331a@e* G3311@r G3312@mr))) G3318@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3316@t))) (G2f65@syntax-dispatch G3316@t '(_ . each-any)))) G3310@e))) (set! G2f11@or-transformer (lambda (G331c@e G331d@r G331e@mr) ((lambda (G3322@t) ((lambda (G3324@ls/false) (if G3324@ls/false (apply (lambda (G3326@e*) (cons 'or (G2f85@chi-expr* G3326@e* G331d@r G331e@mr))) G3324@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3322@t))) (G2f65@syntax-dispatch G3322@t '(_ . each-any)))) G331c@e))) (set! G2f13@case-macro (lambda (G3328@e) ((lambda (G332b@build-last G332d@build-one) (begin (set! G332b@build-last (lambda (G3352@cls) ((lambda (G3354@t) ((lambda (G3356@ls/false) (if G3356@ls/false (apply (lambda (G3358@e G3359@e*) (cons 'begin (cons G3358@e G3359@e*))) G3356@ls/false) ((lambda (G335c@t) ((lambda (G335e@ls/false) (if G335e@ls/false (apply (lambda () (G332d@build-one G3352@cls '(if #f #f))) G335e@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G335c@t))) (G2f65@syntax-dispatch G335c@t '_))) G3354@t))) (G2f65@syntax-dispatch G3354@t '(#(scheme-id else) any . each-any)))) G3352@cls))) (set! G332d@build-one (lambda (G3344@cls G3345@k) ((lambda (G3348@t) ((lambda (G334a@ls/false) (if G334a@ls/false (apply (lambda (G334c@d* G334d@e G334e@e*) (list 'if (list 'memv 't (list 'quote G334c@d*)) (cons 'begin (cons G334d@e G334e@e*)) G3345@k)) G334a@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3348@t))) (G2f65@syntax-dispatch G3348@t '(each-any any . each-any)))) G3344@cls))) ((lambda (G332e@t) ((lambda (G3330@ls/false) (if G3330@ls/false (apply (lambda (G3332@expr) (G2f1b@bless (cons 'let (cons (list (list 't G3332@expr)) '((if #f #f)))))) G3330@ls/false) ((lambda (G3334@t) ((lambda (G3336@ls/false) (if G3336@ls/false (apply (lambda (G3338@expr G3339@cls G333a@cls*) (G2f1b@bless (list 'let (list (list 't G3338@expr)) ((letrec ((G333e@f (lambda (G3340@cls G3341@cls*) (if (null? G3341@cls*) (G332b@build-last G3340@cls) (G332d@build-one G3340@cls (G333e@f (car G3341@cls*) (cdr G3341@cls*))))))) G333e@f) G3339@cls G333a@cls*)))) G3336@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3334@t))) (G2f65@syntax-dispatch G3334@t '(_ any any . each-any)))) G332e@t))) (G2f65@syntax-dispatch G332e@t '(_ any)))) G3328@e))) '#f '#f))) (set! G2f15@quote-transformer (lambda (G3360@e G3361@r G3362@mr) ((lambda (G3366@t) ((lambda (G3368@ls/false) (if G3368@ls/false (apply (lambda (G336a@datum) (list 'quote (G2d7c@stx->datum G336a@datum))) G3368@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3366@t))) (G2f65@syntax-dispatch G3366@t '(_ any)))) G3360@e))) (set! G2f17@case-lambda-transformer (lambda (G336c@e G336d@r G336e@mr) ((lambda (G3372@t) ((lambda (G3374@ls/false) (if G3374@ls/false (apply (lambda (G3376@fmls* G3377@b* G3378@b**) (call-with-values (lambda () (G2f91@chi-lambda-clause* G336c@e G3376@fmls* (map cons G3377@b* G3378@b**) G336d@r G336e@mr)) (lambda (G337e@G337c G337f@G337d) ((lambda (G3382@body* G3383@fmls*) (G2cc1@G2c00@build-case-lambda '#f G3383@fmls* G3382@body*)) G337f@G337d G337e@G337c)))) G3374@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3372@t))) (G2f65@syntax-dispatch G3372@t '(_ . #(each (any any . each-any)))))) G336c@e))) (set! G2f19@lambda-transformer (lambda (G3386@e G3387@r G3388@mr) ((lambda (G338c@t) ((lambda (G338e@ls/false) (if G338e@ls/false (apply (lambda (G3390@fmls G3391@b G3392@b*) (call-with-values (lambda () (G2f8f@chi-lambda-clause G3386@e G3390@fmls (cons G3391@b G3392@b*) G3387@r G3388@mr)) (lambda (G3398@G3396 G3399@G3397) ((lambda (G339c@body G339d@fmls) (G2cc0@G2bfe@build-lambda '#f G339d@fmls G339c@body)) G3399@G3397 G3398@G3396)))) G338e@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G338c@t))) (G2f65@syntax-dispatch G338c@t '(_ any any . each-any)))) G3386@e))) (set! G2f1b@bless (lambda (G33a0@x) (G2d4e@mkstx ((letrec ((G33a2@f (lambda (G33a4@x) (if (G2d2e@stx? G33a4@x) G33a4@x (if (pair? G33a4@x) (cons (G33a2@f (car G33a4@x)) (G33a2@f (cdr G33a4@x))) (if (symbol? G33a4@x) (G2eef@scheme-stx G33a4@x) (if (vector? G33a4@x) (vector-map G33a2@f G33a4@x) G33a4@x))))))) G33a2@f) G33a0@x) '() '() '()))) (set! G2f1d@with-syntax-macro (lambda (G33a6@e) ((lambda (G33a8@t) ((lambda (G33aa@ls/false) (if G33aa@ls/false (apply (lambda (G33ac@pat* G33ad@expr* G33ae@b G33af@b*) ((lambda (G33b4@idn*) (begin (G2f8d@verify-formals (map car G33b4@idn*) G33a6@e) ((lambda (G33b6@t*) (G2f1b@bless (list 'let (map list G33b6@t* G33ad@expr*) ((letrec ((G33b8@f (lambda (G33ba@pat* G33bb@t*) (if (null? G33ba@pat*) (cons 'begin (cons '#f (cons G33ae@b G33af@b*))) (list 'syntax-case (car G33bb@t*) '() (list (car G33ba@pat*) (G33b8@f (cdr G33ba@pat*) (cdr G33bb@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33ba@pat*)) (car G33bb@t*)))))))) G33b8@f) G33ac@pat* G33b6@t*)))) (G303e@generate-temporaries G33ad@expr*)))) ((letrec ((G33be@f (lambda (G33c0@pat*) (if (null? G33c0@pat*) '() (call-with-values (lambda () (G2f63@convert-pattern (car G33c0@pat*) '())) (lambda (G33c4@G33c2 G33c5@G33c3) ((lambda (G33c8@idn* G33c9@pat) (append G33c8@idn* (G33be@f (cdr G33c0@pat*)))) G33c5@G33c3 G33c4@G33c2))))))) G33be@f) G33ac@pat*))) G33aa@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G33a8@t))) (G2f65@syntax-dispatch G33a8@t '(_ #(each (any any)) any . each-any)))) G33a6@e))) (set! G2f1f@invalid-fmls-error (lambda (G33cc@stx G33cd@fmls) ((lambda (G33d0@t) ((lambda (G33d2@ls/false) (if G33d2@ls/false (apply (lambda (G33d4@id* G33d5@last) ((letrec ((G33d8@f (lambda (G33da@id*) (if (null? G33da@id*) (values) (if (not (G2d66@id? (car G33da@id*))) (G3052@syntax-violation '#f '"not an identifier" G33cc@stx (car G33da@id*)) (begin (G33d8@f (cdr G33da@id*)) (if (G2d74@bound-id-member? (car G33da@id*) (cdr G33da@id*)) (G3052@syntax-violation '#f '"duplicate binding" G33cc@stx (car G33da@id*)) (void)))))))) G33d8@f) (if (G2d66@id? G33d5@last) (cons G33d5@last G33d4@id*) (if (G2d5c@syntax-null? G33d5@last) G33d4@id* (G3052@syntax-violation '#f '"not an identifier" G33cc@stx G33d5@last))))) G33d2@ls/false) ((lambda (G33dc@t) ((lambda (G33de@ls/false) (if G33de@ls/false (apply (lambda () (G3052@syntax-violation '#f '"malformed binding form" G33cc@stx G33cd@fmls)) G33de@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G33dc@t))) (G2f65@syntax-dispatch G33dc@t '_))) G33d0@t))) (G2f65@syntax-dispatch G33d0@t '#(each+ any () any)))) G33cd@fmls))) (set! G2f21@let-macro (lambda (G33e0@stx) ((lambda (G33e2@t) ((lambda (G33e4@ls/false) (if G33e4@ls/false (apply (lambda (G33e6@lhs* G33e7@rhs* G33e8@b G33e9@b*) (if (G2d70@valid-bound-ids? G33e6@lhs*) (G2f1b@bless (cons (cons 'lambda (cons G33e6@lhs* (cons G33e8@b G33e9@b*))) G33e7@rhs*)) (G2f1f@invalid-fmls-error G33e0@stx G33e6@lhs*))) G33e4@ls/false) ((lambda (G33ee@t) ((lambda (G33f0@ls/false) (if (and G33f0@ls/false (apply (lambda (G33f2@f G33f3@lhs* G33f4@rhs* G33f5@b G33f6@b*) (G2d66@id? G33f2@f)) G33f0@ls/false)) (apply (lambda (G33fc@f G33fd@lhs* G33fe@rhs* G33ff@b G3400@b*) (if (G2d70@valid-bound-ids? G33fd@lhs*) (G2f1b@bless (cons (list 'letrec (list (list G33fc@f (cons 'lambda (cons G33fd@lhs* (cons G33ff@b G3400@b*))))) G33fc@f) G33fe@rhs*)) (G2f1f@invalid-fmls-error G33e0@stx G33fd@lhs*))) G33f0@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G33ee@t))) (G2f65@syntax-dispatch G33ee@t '(_ any #(each (any any)) any . each-any)))) G33e2@t))) (G2f65@syntax-dispatch G33e2@t '(_ #(each (any any)) any . each-any)))) G33e0@stx))) (set! G2f23@let-values-macro (lambda (G3406@stx) ((lambda (G3409@rename G340b@rename*) (begin (set! G3409@rename (lambda (G346b@x G346c@old* G346d@new*) (begin (if (not (G2d66@id? G346b@x)) (G3052@syntax-violation '#f '"not an indentifier" G3406@stx G346b@x) (void)) (if (G2d74@bound-id-member? G346b@x G346c@old*) (G3052@syntax-violation '#f '"duplicate binding" G3406@stx G346b@x) (void)) ((lambda (G3471@y) (values G3471@y (cons G346b@x G346c@old*) (cons G3471@y G346d@new*))) (gensym (G3058@syntax->datum G346b@x)))))) (set! G340b@rename* (lambda (G3459@x* G345a@old* G345b@new*) (if (null? G3459@x*) (values '() G345a@old* G345b@new*) (call-with-values (lambda () (G3409@rename (car G3459@x*) G345a@old* G345b@new*)) (lambda (G345f@x G3460@old* G3461@new*) (call-with-values (lambda () (G340b@rename* (cdr G3459@x*) G3460@old* G3461@new*)) (lambda (G3465@x* G3466@old* G3467@new*) (values (cons G345f@x G3465@x*) G3466@old* G3467@new*)))))))) ((lambda (G340c@t) ((lambda (G340e@ls/false) (if G340e@ls/false (apply (lambda (G3410@b G3411@b*) (cons* (G2f1b@bless 'let) '() G3410@b G3411@b*)) G340e@ls/false) ((lambda (G3414@t) ((lambda (G3416@ls/false) (if G3416@ls/false (apply (lambda (G3418@lhs* G3419@rhs* G341a@b G341b@b*) (G2f1b@bless ((letrec ((G3420@f (lambda (G3422@lhs* G3423@rhs* G3424@old* G3425@new*) (if (null? G3422@lhs*) (cons 'let (cons (map list G3424@old* G3425@new*) (cons G341a@b G341b@b*))) ((lambda (G342a@t) ((lambda (G342c@ls/false) (if G342c@ls/false (apply (lambda (G342e@x*) (call-with-values (lambda () (G340b@rename* G342e@x* G3424@old* G3425@new*)) (lambda (G3433@G3430 G3434@G3431 G3435@G3432) ((lambda (G3439@new* G343a@old* G343b@y*) (list 'call-with-values (list 'lambda '() (car G3423@rhs*)) (list 'lambda G343b@y* (G3420@f (cdr G3422@lhs*) (cdr G3423@rhs*) G343a@old* G3439@new*)))) G3435@G3432 G3434@G3431 G3433@G3430)))) G342c@ls/false) ((lambda (G343f@t) ((lambda (G3441@ls/false) (if G3441@ls/false (apply (lambda (G3443@x* G3444@x) (call-with-values (lambda () (G3409@rename G3444@x G3424@old* G3425@new*)) (lambda (G3447@y G3448@old* G3449@new*) (call-with-values (lambda () (G340b@rename* G3443@x* G3448@old* G3449@new*)) (lambda (G344d@y* G344e@old* G344f@new*) (list 'call-with-values (list 'lambda '() (car G3423@rhs*)) (list 'lambda (append G344d@y* G3447@y) (G3420@f (cdr G3422@lhs*) (cdr G3423@rhs*) G344e@old* G344f@new*)))))))) G3441@ls/false) ((lambda (G3453@t) ((lambda (G3455@ls/false) (if G3455@ls/false (apply (lambda (G3457@others) (G3052@syntax-violation '#f '"malformed bindings" G3406@stx G3457@others)) G3455@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3453@t))) (G2f65@syntax-dispatch G3453@t 'any))) G343f@t))) (G2f65@syntax-dispatch G343f@t '#(each+ any () any)))) G342a@t))) (G2f65@syntax-dispatch G342a@t 'each-any))) (car G3422@lhs*)))))) G3420@f) G3418@lhs* G3419@rhs* '() '()))) G3416@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3414@t))) (G2f65@syntax-dispatch G3414@t '(_ #(each (any any)) any . each-any)))) G340c@t))) (G2f65@syntax-dispatch G340c@t '(_ () any . each-any)))) G3406@stx))) '#f '#f))) (set! G2f25@let*-values-macro (lambda (G3473@stx) ((lambda (G3476@check) (begin (set! G3476@check (lambda (G34a5@x*) (if (not (null? G34a5@x*)) ((lambda (G34a7@x) (begin (if (not (G2d66@id? G34a7@x)) (G3052@syntax-violation '#f '"not an identifier" G3473@stx G34a7@x) (void)) (G3476@check (cdr G34a5@x*)) (if (G2d74@bound-id-member? G34a7@x (cdr G34a5@x*)) (G3052@syntax-violation '#f '"duplicate identifier" G3473@stx G34a7@x) (void)))) (car G34a5@x*)) (void)))) ((lambda (G3477@t) ((lambda (G3479@ls/false) (if G3479@ls/false (apply (lambda (G347b@b G347c@b*) (cons* (G2f1b@bless 'let) '() G347b@b G347c@b*)) G3479@ls/false) ((lambda (G347f@t) ((lambda (G3481@ls/false) (if G3481@ls/false (apply (lambda (G3483@lhs* G3484@rhs* G3485@b G3486@b*) (G2f1b@bless ((letrec ((G348b@f (lambda (G348d@lhs* G348e@rhs*) (if (null? G348d@lhs*) (cons 'begin (cons G3485@b G3486@b*)) ((lambda (G3491@t) ((lambda (G3493@ls/false) (if G3493@ls/false (apply (lambda (G3495@x*) (begin (G3476@check G3495@x*) (list 'call-with-values (list 'lambda '() (car G348e@rhs*)) (list 'lambda G3495@x* (G348b@f (cdr G348d@lhs*) (cdr G348e@rhs*)))))) G3493@ls/false) ((lambda (G3497@t) ((lambda (G3499@ls/false) (if G3499@ls/false (apply (lambda (G349b@x* G349c@x) (begin (G3476@check (cons G349c@x G349b@x*)) (list 'call-with-values (list 'lambda '() (car G348e@rhs*)) (list 'lambda (append G349b@x* G349c@x) (G348b@f (cdr G348d@lhs*) (cdr G348e@rhs*)))))) G3499@ls/false) ((lambda (G349f@t) ((lambda (G34a1@ls/false) (if G34a1@ls/false (apply (lambda (G34a3@others) (G3052@syntax-violation '#f '"malformed bindings" G3473@stx G34a3@others)) G34a1@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G349f@t))) (G2f65@syntax-dispatch G349f@t 'any))) G3497@t))) (G2f65@syntax-dispatch G3497@t '#(each+ any () any)))) G3491@t))) (G2f65@syntax-dispatch G3491@t 'each-any))) (car G348d@lhs*)))))) G348b@f) G3483@lhs* G3484@rhs*))) G3481@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G347f@t))) (G2f65@syntax-dispatch G347f@t '(_ #(each (any any)) any . each-any)))) G3477@t))) (G2f65@syntax-dispatch G3477@t '(_ () any . each-any)))) G3473@stx))) '#f))) (set! G2f27@trace-lambda-macro (lambda (G34a9@stx) ((lambda (G34ab@t) ((lambda (G34ad@ls/false) (if G34ad@ls/false (apply (lambda (G34af@who G34b0@fmls G34b1@b G34b2@b*) (if (G2d70@valid-bound-ids? G34b0@fmls) (G2f1b@bless (list 'make-traced-procedure (list 'quote G34af@who) (cons 'lambda (cons G34b0@fmls (cons G34b1@b G34b2@b*))))) (G2f1f@invalid-fmls-error G34a9@stx G34b0@fmls))) G34ad@ls/false) ((lambda (G34b7@t) ((lambda (G34b9@ls/false) (if G34b9@ls/false (apply (lambda (G34bb@who G34bc@fmls G34bd@last G34be@b G34bf@b*) (if (G2d70@valid-bound-ids? (cons G34bd@last G34bc@fmls)) (G2f1b@bless (list 'make-traced-procedure (list 'quote G34bb@who) (cons 'lambda (cons (append G34bc@fmls G34bd@last) (cons G34be@b G34bf@b*))))) (G2f1f@invalid-fmls-error G34a9@stx (append G34bc@fmls G34bd@last)))) G34b9@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G34b7@t))) (G2f65@syntax-dispatch G34b7@t '(_ any #(each+ any () any) any . each-any)))) G34ab@t))) (G2f65@syntax-dispatch G34ab@t '(_ any each-any any . each-any)))) G34a9@stx))) (set! G2f29@trace-define-macro (lambda (G34c5@stx) ((lambda (G34c7@t) ((lambda (G34c9@ls/false) (if G34c9@ls/false (apply (lambda (G34cb@who G34cc@fmls G34cd@b G34ce@b*) (if (G2d70@valid-bound-ids? G34cc@fmls) (G2f1b@bless (list 'define G34cb@who (list 'make-traced-procedure (list 'quote G34cb@who) (cons 'lambda (cons G34cc@fmls (cons G34cd@b G34ce@b*)))))) (G2f1f@invalid-fmls-error G34c5@stx G34cc@fmls))) G34c9@ls/false) ((lambda (G34d3@t) ((lambda (G34d5@ls/false) (if G34d5@ls/false (apply (lambda (G34d7@who G34d8@fmls G34d9@last G34da@b G34db@b*) (if (G2d70@valid-bound-ids? (cons G34d9@last G34d8@fmls)) (G2f1b@bless (list 'define G34d7@who (list 'make-traced-procedure (list 'quote G34d7@who) (cons 'lambda (cons (append G34d8@fmls G34d9@last) (cons G34da@b G34db@b*)))))) (G2f1f@invalid-fmls-error G34c5@stx (append G34d8@fmls G34d9@last)))) G34d5@ls/false) ((lambda (G34e1@t) ((lambda (G34e3@ls/false) (if G34e3@ls/false (apply (lambda (G34e5@who G34e6@expr) (if (G2d66@id? G34e5@who) (G2f1b@bless (list 'define G34e5@who (list 'let (list (list 'v G34e6@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34e5@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3052@syntax-violation '#f '"invalid name" G34c5@stx))) G34e3@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G34e1@t))) (G2f65@syntax-dispatch G34e1@t '(_ any any)))) G34d3@t))) (G2f65@syntax-dispatch G34d3@t '(_ (any . #(each+ any () any)) any . each-any)))) G34c7@t))) (G2f65@syntax-dispatch G34c7@t '(_ (any . each-any) any . each-any)))) G34c5@stx))) (set! G2f2b@trace-define-syntax-macro (lambda (G34e9@stx) ((lambda (G34eb@t) ((lambda (G34ed@ls/false) (if G34ed@ls/false (apply (lambda (G34ef@who G34f0@expr) (if (G2d66@id? G34ef@who) (G2f1b@bless (list 'define-syntax G34ef@who (list 'make-traced-macro (list 'quote G34ef@who) G34f0@expr))) (G3052@syntax-violation '#f '"invalid name" G34e9@stx))) G34ed@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G34eb@t))) (G2f65@syntax-dispatch G34eb@t '(_ any any)))) G34e9@stx))) (set! G2f2d@trace-let/rec-syntax (lambda (G34f3@who) (lambda (G34f5@stx) ((lambda (G34f7@t) ((lambda (G34f9@ls/false) (if G34f9@ls/false (apply (lambda (G34fb@lhs* G34fc@rhs* G34fd@b G34fe@b*) (if (G2d70@valid-bound-ids? G34fb@lhs*) ((lambda (G3503@rhs*) (G2f1b@bless (cons G34f3@who (cons (map list G34fb@lhs* G3503@rhs*) (cons G34fd@b G34fe@b*))))) (map (lambda (G3505@lhs G3506@rhs) (list 'make-traced-macro (list 'quote G3505@lhs) G3506@rhs)) G34fb@lhs* G34fc@rhs*)) (G2f1f@invalid-fmls-error G34f5@stx G34fb@lhs*))) G34f9@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G34f7@t))) (G2f65@syntax-dispatch G34f7@t '(_ #(each (any any)) any . each-any)))) G34f5@stx)))) (set! G2f2f@trace-let-syntax-macro (G2f2d@trace-let/rec-syntax 'let-syntax)) (set! G2f31@trace-letrec-syntax-macro (G2f2d@trace-let/rec-syntax 'letrec-syntax)) (set! G2f33@guard-macro (lambda (G3509@x) ((lambda (G350c@gen-clauses) (begin (set! G350c@gen-clauses (lambda (G3523@con G3524@outerk G3525@clause*) ((lambda (G352a@f G352c@f*) (begin (set! G352a@f (lambda (G355d@x G355e@k) ((lambda (G3561@t) ((lambda (G3563@ls/false) (if G3563@ls/false (apply (lambda (G3565@e G3566@p) ((lambda (G3569@t) (list 'let (list (list G3569@t G3565@e)) (list 'if G3569@t (list G3566@p G3569@t) G355e@k))) (gensym))) G3563@ls/false) ((lambda (G356b@t) ((lambda (G356d@ls/false) (if G356d@ls/false (apply (lambda (G356f@e) ((lambda (G3571@t) (list 'let (list (list G3571@t G356f@e)) (list 'if G3571@t G3571@t G355e@k))) (gensym))) G356d@ls/false) ((lambda (G3573@t) ((lambda (G3575@ls/false) (if G3575@ls/false (apply (lambda (G3577@e G3578@v G3579@v*) (list 'if G3577@e (cons 'begin (cons G3578@v G3579@v*)) G355e@k)) G3575@ls/false) ((lambda (G357d@t) ((lambda (G357f@ls/false) (if G357f@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid guard clause" G355d@x)) G357f@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G357d@t))) (G2f65@syntax-dispatch G357d@t '_))) G3573@t))) (G2f65@syntax-dispatch G3573@t '(any any . each-any)))) G356b@t))) (G2f65@syntax-dispatch G356b@t '(any)))) G3561@t))) (G2f65@syntax-dispatch G3561@t '(any #(scheme-id =>) any)))) G355d@x))) (set! G352c@f* (lambda (G3537@x*) ((lambda (G3539@t) ((lambda (G353b@ls/false) (if G353b@ls/false (apply (lambda () (values (list 'raise G3523@con) '#t)) G353b@ls/false) ((lambda (G353d@t) ((lambda (G353f@ls/false) (if G353f@ls/false (apply (lambda (G3541@e G3542@e*) (values (cons 'begin (cons G3541@e G3542@e*)) '#f)) G353f@ls/false) ((lambda (G3545@t) ((lambda (G3547@ls/false) (if G3547@ls/false (apply (lambda (G3549@cls G354a@cls*) (call-with-values (lambda () (G352c@f* G354a@cls*)) (lambda (G354f@G354d G3550@G354e) ((lambda (G3553@g G3554@e) (values (G352a@f G3549@cls G3554@e) G3553@g)) G3550@G354e G354f@G354d)))) G3547@ls/false) ((lambda (G3557@t) ((lambda (G3559@ls/false) (if G3559@ls/false (apply (lambda (G355b@others) (G3052@syntax-violation '#f '"invalid guard clause" G355b@others)) G3559@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3557@t))) (G2f65@syntax-dispatch G3557@t 'any))) G3545@t))) (G2f65@syntax-dispatch G3545@t '(any . any)))) G353d@t))) (G2f65@syntax-dispatch G353d@t '((#(scheme-id else) any . each-any))))) G3539@t))) (G2f65@syntax-dispatch G3539@t '()))) G3537@x*))) (call-with-values (lambda () (G352c@f* G3525@clause*)) (lambda (G352f@G352d G3530@G352e) ((lambda (G3533@raisek G3534@code) (if G3533@raisek (list G3524@outerk G3534@code) G3534@code)) G3530@G352e G352f@G352d))))) '#f '#f))) ((lambda (G350d@t) ((lambda (G350f@ls/false) (if (and G350f@ls/false (apply (lambda (G3511@con G3512@clause* G3513@b G3514@b*) (G2d66@id? G3511@con)) G350f@ls/false)) (apply (lambda (G3519@con G351a@clause* G351b@b G351c@b*) ((lambda (G3521@outerk) (G2f1b@bless (list 'call/cc (list 'lambda (list G3521@outerk) (list 'with-exception-handler (list 'lambda (list G3519@con) (G350c@gen-clauses G3519@con G3521@outerk G351a@clause*)) (cons 'lambda (cons '() (cons '#f (cons G351b@b G351c@b*))))))))) (gensym))) G350f@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G350d@t))) (G2f65@syntax-dispatch G350d@t '(_ (any . each-any) any . each-any)))) G3509@x))) '#f))) (set! G2f35@define-enumeration-macro (lambda (G3581@stx) ((lambda (G3584@set? G3586@remove-dups) (begin (set! G3584@set? (lambda (G359d@x) (or (null? G359d@x) (and (not (memq (car G359d@x) (cdr G359d@x))) (G3584@set? (cdr G359d@x)))))) (set! G3586@remove-dups (lambda (G359b@ls) (if (null? G359b@ls) '() (cons (car G359b@ls) (G3586@remove-dups (remq (car G359b@ls) (cdr G359b@ls))))))) ((lambda (G3587@t) ((lambda (G3589@ls/false) (if (and G3589@ls/false (apply (lambda (G358b@name G358c@id* G358d@maker) (and (G2d66@id? G358b@name) (G2d66@id? G358d@maker) (for-all G2d66@id? G358c@id*))) G3589@ls/false)) (apply (lambda (G3591@name G3592@id* G3593@maker) ((lambda (G3597@name* G3598@mk) (G2f1b@bless (list 'begin (list 'define G3598@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3597@name*)))) (list 'define-syntax G3591@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3597@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3591@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3593@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3593@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3597@name*)) (cons 'syntax-violation (cons (list 'quote G3593@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3598@mk '('(n* ...)))))))))))) (G3586@remove-dups (G3058@syntax->datum G3592@id*)) (gensym))) G3589@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3587@t))) (G2f65@syntax-dispatch G3587@t '(_ any each-any any)))) G3581@stx))) '#f '#f))) (set! G2f37@time-macro (lambda (G359f@stx) ((lambda (G35a1@t) ((lambda (G35a3@ls/false) (if G35a3@ls/false (apply (lambda (G35a5@expr) ((lambda (G35a7@str) (G2f1b@bless (list 'time-it G35a7@str (list 'lambda '() G35a5@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G35ab@G35a9 G35ac@G35aa) ((lambda (G35af@e G35b0@p) (begin (write (G3058@syntax->datum G35a5@expr) G35b0@p) (G35af@e))) G35ac@G35aa G35ab@G35a9))))) G35a3@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G35a1@t))) (G2f65@syntax-dispatch G35a1@t '(_ any)))) G359f@stx))) (set! G2f39@delay-macro (lambda (G35b3@stx) ((lambda (G35b5@t) ((lambda (G35b7@ls/false) (if G35b7@ls/false (apply (lambda (G35b9@expr) (G2f1b@bless (list 'make-promise (list 'lambda '() G35b9@expr)))) G35b7@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G35b5@t))) (G2f65@syntax-dispatch G35b5@t '(_ any)))) G35b3@stx))) (set! G2f3b@assert-macro (lambda (G35bb@stx) ((lambda (G35bd@t) ((lambda (G35bf@ls/false) (if G35bf@ls/false (apply (lambda (G35c1@expr) ((lambda (G35c3@pos) (G2f1b@bless (list 'unless G35c1@expr (list 'assertion-error (list 'quote G35c1@expr) (list 'quote G35c3@pos))))) (or (G3048@expression-position G35bb@stx) (G3048@expression-position G35c1@expr)))) G35bf@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G35bd@t))) (G2f65@syntax-dispatch G35bd@t '(_ any)))) G35bb@stx))) (set! G2f3d@endianness-macro (lambda (G35c5@stx) ((lambda (G35c7@t) ((lambda (G35c9@ls/false) (if G35c9@ls/false (apply (lambda (G35cb@e) ((lambda (G35cd@t) (if (memv G35cd@t '(little)) (G2f1b@bless ''little) (if (memv G35cd@t '(big)) (G2f1b@bless ''big) (G3052@syntax-violation '#f '"endianness must be big or little" G35c5@stx)))) (G3058@syntax->datum G35cb@e))) G35c9@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G35c7@t))) (G2f65@syntax-dispatch G35c7@t '(_ any)))) G35c5@stx))) (set! G2f3f@identifier-syntax-macro (lambda (G35cf@stx) ((lambda (G35d1@t) ((lambda (G35d3@ls/false) (if G35d3@ls/false (apply (lambda (G35d5@expr) (G2f1b@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35d5@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35d5@expr) '((syntax (e* ...)))))))))) G35d3@ls/false) ((lambda (G35d7@t) ((lambda (G35d9@ls/false) (if (and G35d9@ls/false (apply (lambda (G35db@id1 G35dc@expr1 G35dd@id2 G35de@expr2 G35df@expr3) (and (G2d66@id? G35db@id1) (G2d66@id? G35dd@id2) (G2d66@id? G35de@expr2))) G35d9@ls/false)) (apply (lambda (G35e5@id1 G35e6@expr1 G35e7@id2 G35e8@expr2 G35e9@expr3) (G2f1b@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35e6@expr1)) (list (list 'set! 'id G35e8@expr2) (list 'syntax G35e9@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35e6@expr1 '(e* ...))))))))) G35d9@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G35d7@t))) (G2f65@syntax-dispatch G35d7@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35d1@t))) (G2f65@syntax-dispatch G35d1@t '(_ any)))) G35cf@stx))) (set! G2f41@do-macro (lambda (G35ef@stx) ((lambda (G35f2@bind) (begin (set! G35f2@bind (lambda (G3609@x) ((lambda (G360b@t) ((lambda (G360d@ls/false) (if G360d@ls/false (apply (lambda (G360f@x G3610@init) (list G360f@x G3610@init G360f@x)) G360d@ls/false) ((lambda (G3613@t) ((lambda (G3615@ls/false) (if G3615@ls/false (apply (lambda (G3617@x G3618@init G3619@step) (list G3617@x G3618@init G3619@step)) G3615@ls/false) ((lambda (G361d@t) ((lambda (G361f@ls/false) (if G361f@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid binding" G35ef@stx)) G361f@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G361d@t))) (G2f65@syntax-dispatch G361d@t '_))) G3613@t))) (G2f65@syntax-dispatch G3613@t '(any any any)))) G360b@t))) (G2f65@syntax-dispatch G360b@t '(any any)))) G3609@x))) ((lambda (G35f3@t) ((lambda (G35f5@ls/false) (if G35f5@ls/false (apply (lambda (G35f7@binding* G35f8@test G35f9@expr* G35fa@command*) ((lambda (G35ff@t) ((lambda (G3601@ls/false) (if G3601@ls/false (apply (lambda (G3603@x* G3604@init* G3605@step*) (if (G2d70@valid-bound-ids? G3603@x*) (G2f1b@bless (list 'letrec (list (list 'loop (list 'lambda G3603@x* (list 'if G35f8@test (cons 'begin (cons '(if #f #f) G35f9@expr*)) (cons 'begin (append G35fa@command* (list (cons 'loop G3605@step*)))))))) (cons 'loop G3604@init*))) (G3052@syntax-violation '#f '"invalid bindings" G35ef@stx))) G3601@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G35ff@t))) (G2f65@syntax-dispatch G35ff@t '#(each (any any any))))) (map G35f2@bind G35f7@binding*))) G35f5@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G35f3@t))) (G2f65@syntax-dispatch G35f3@t '(_ each-any (any . each-any) . each-any)))) G35ef@stx))) '#f))) (set! G2f43@let*-macro (lambda (G3621@stx) ((lambda (G3623@t) ((lambda (G3625@ls/false) (if (and G3625@ls/false (apply (lambda (G3627@lhs* G3628@rhs* G3629@b G362a@b*) (for-all G2d66@id? G3627@lhs*)) G3625@ls/false)) (apply (lambda (G362f@lhs* G3630@rhs* G3631@b G3632@b*) (G2f1b@bless ((letrec ((G3637@f (lambda (G3639@x*) (if (null? G3639@x*) (cons 'let (cons '() (cons G3631@b G3632@b*))) (list 'let (list (car G3639@x*)) (G3637@f (cdr G3639@x*))))))) G3637@f) (map list G362f@lhs* G3630@rhs*)))) G3625@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3623@t))) (G2f65@syntax-dispatch G3623@t '(_ #(each (any any)) any . each-any)))) G3621@stx))) (set! G2f45@or-macro (lambda (G363b@stx) ((lambda (G363d@t) ((lambda (G363f@ls/false) (if G363f@ls/false (apply (lambda () '#f) G363f@ls/false) ((lambda (G3641@t) ((lambda (G3643@ls/false) (if G3643@ls/false (apply (lambda (G3645@e G3646@e*) (G2f1b@bless ((letrec ((G3649@f (lambda (G364b@e G364c@e*) (if (null? G364c@e*) (list 'begin '#f G364b@e) (list 'let (list (list 't G364b@e)) (list 'if 't 't (G3649@f (car G364c@e*) (cdr G364c@e*)))))))) G3649@f) G3645@e G3646@e*))) G3643@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3641@t))) (G2f65@syntax-dispatch G3641@t '(_ any . each-any)))) G363d@t))) (G2f65@syntax-dispatch G363d@t '(_)))) G363b@stx))) (set! G2f47@and-macro (lambda (G364f@stx) ((lambda (G3651@t) ((lambda (G3653@ls/false) (if G3653@ls/false (apply (lambda () '#t) G3653@ls/false) ((lambda (G3655@t) ((lambda (G3657@ls/false) (if G3657@ls/false (apply (lambda (G3659@e G365a@e*) (G2f1b@bless ((letrec ((G365d@f (lambda (G365f@e G3660@e*) (if (null? G3660@e*) (list 'begin '#f G365f@e) (cons 'if (cons G365f@e (cons (G365d@f (car G3660@e*) (cdr G3660@e*)) '(#f)))))))) G365d@f) G3659@e G365a@e*))) G3657@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3655@t))) (G2f65@syntax-dispatch G3655@t '(_ any . each-any)))) G3651@t))) (G2f65@syntax-dispatch G3651@t '(_)))) G364f@stx))) (set! G2f49@cond-macro (lambda (G3663@stx) ((lambda (G3665@t) ((lambda (G3667@ls/false) (if G3667@ls/false (apply (lambda (G3669@cls G366a@cls*) (G2f1b@bless ((letrec ((G366d@f (lambda (G366f@cls G3670@cls*) (if (null? G3670@cls*) ((lambda (G3673@t) ((lambda (G3675@ls/false) (if G3675@ls/false (apply (lambda (G3677@e G3678@e*) (cons 'begin (cons G3677@e G3678@e*))) G3675@ls/false) ((lambda (G367b@t) ((lambda (G367d@ls/false) (if G367d@ls/false (apply (lambda (G367f@e G3680@p) (list 'let (list (list 't G367f@e)) (list 'if 't (cons G3680@p '(t))))) G367d@ls/false) ((lambda (G3683@t) ((lambda (G3685@ls/false) (if G3685@ls/false (apply (lambda (G3687@e) (cons 'or (cons G3687@e '((if #f #f))))) G3685@ls/false) ((lambda (G3689@t) ((lambda (G368b@ls/false) (if G368b@ls/false (apply (lambda (G368d@e G368e@e*) (list 'if G368d@e (cons 'begin G368e@e*))) G368b@ls/false) ((lambda (G3691@t) ((lambda (G3693@ls/false) (if G3693@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid last clause" G3663@stx)) G3693@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3691@t))) (G2f65@syntax-dispatch G3691@t '_))) G3689@t))) (G2f65@syntax-dispatch G3689@t '(any . each-any)))) G3683@t))) (G2f65@syntax-dispatch G3683@t '(any)))) G367b@t))) (G2f65@syntax-dispatch G367b@t '(any #(scheme-id =>) any)))) G3673@t))) (G2f65@syntax-dispatch G3673@t '(#(scheme-id else) any . each-any)))) G366f@cls) ((lambda (G3695@t) ((lambda (G3697@ls/false) (if G3697@ls/false (apply (lambda (G3699@e G369a@e*) (G3052@syntax-violation '#f '"incorrect position of keyword else" G3663@stx)) G3697@ls/false) ((lambda (G369d@t) ((lambda (G369f@ls/false) (if G369f@ls/false (apply (lambda (G36a1@e G36a2@p) (list 'let (list (list 't G36a1@e)) (list 'if 't (cons G36a2@p '(t)) (G366d@f (car G3670@cls*) (cdr G3670@cls*))))) G369f@ls/false) ((lambda (G36a5@t) ((lambda (G36a7@ls/false) (if G36a7@ls/false (apply (lambda (G36a9@e) (list 'or G36a9@e (G366d@f (car G3670@cls*) (cdr G3670@cls*)))) G36a7@ls/false) ((lambda (G36ab@t) ((lambda (G36ad@ls/false) (if G36ad@ls/false (apply (lambda (G36af@e G36b0@e*) (list 'if G36af@e (cons 'begin G36b0@e*) (G366d@f (car G3670@cls*) (cdr G3670@cls*)))) G36ad@ls/false) ((lambda (G36b3@t) ((lambda (G36b5@ls/false) (if G36b5@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid last clause" G3663@stx)) G36b5@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G36b3@t))) (G2f65@syntax-dispatch G36b3@t '_))) G36ab@t))) (G2f65@syntax-dispatch G36ab@t '(any . each-any)))) G36a5@t))) (G2f65@syntax-dispatch G36a5@t '(any)))) G369d@t))) (G2f65@syntax-dispatch G369d@t '(any #(scheme-id =>) any)))) G3695@t))) (G2f65@syntax-dispatch G3695@t '(#(scheme-id else) any . each-any)))) G366f@cls))))) G366d@f) G3669@cls G366a@cls*))) G3667@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3665@t))) (G2f65@syntax-dispatch G3665@t '(_ any . each-any)))) G3663@stx))) (set! G2f4b@do-include (lambda (G36b7@stx G36b8@id G36b9@filename) ((lambda (G36bd@filename) (begin (if (not (and (string? G36bd@filename) (G2d66@id? G36b8@id))) (G3052@syntax-violation '#f '"invalid syntax" G36b7@stx) (void)) (cons (G2f1b@bless 'begin) (with-input-from-file G36bd@filename (lambda () ((letrec ((G36bf@f (lambda (G36c1@ls) ((lambda (G36c3@x) (if (eof-object? G36c3@x) (reverse G36c1@ls) (G36bf@f (cons (G2d44@datum->stx G36b8@id G36c3@x) G36c1@ls)))) (G28f5@G2821@read-annotated))))) G36bf@f) '())))))) (G2d7c@stx->datum G36b9@filename)))) (set! G2f4d@include-macro (lambda (G36c5@e) ((lambda (G36c7@t) ((lambda (G36c9@ls/false) (if G36c9@ls/false (apply (lambda (G36cb@id G36cc@filename) (G2f4b@do-include G36c5@e G36cb@id G36cc@filename)) G36c9@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G36c7@t))) (G2f65@syntax-dispatch G36c7@t '(any any)))) G36c5@e))) (set! G2f4f@include-into-macro (lambda (G36cf@e) ((lambda (G36d1@t) ((lambda (G36d3@ls/false) (if G36d3@ls/false (apply (lambda (G36d5@id G36d6@filename) (G2f4b@do-include G36cf@e G36d5@id G36d6@filename)) G36d3@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G36d1@t))) (G2f65@syntax-dispatch G36d1@t '(_ any any)))) G36cf@e))) (set! G2f51@syntax-rules-macro (lambda (G36d9@e) ((lambda (G36db@t) ((lambda (G36dd@ls/false) (if G36dd@ls/false (apply (lambda (G36df@lits G36e0@pat* G36e1@tmp*) (begin (G2f6b@verify-literals G36df@lits G36d9@e) (G2f1b@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36df@lits (map (lambda (G36e5@pat G36e6@tmp) ((lambda (G36e9@t) ((lambda (G36eb@ls/false) (if G36eb@ls/false (apply (lambda (G36ed@rest) (list (cons 'g G36ed@rest) (list 'syntax G36e6@tmp))) G36eb@ls/false) ((lambda (G36ef@t) ((lambda (G36f1@ls/false) (if G36f1@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid syntax-rules pattern" G36d9@e G36e5@pat)) G36f1@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G36ef@t))) (G2f65@syntax-dispatch G36ef@t '_))) G36e9@t))) (G2f65@syntax-dispatch G36e9@t '(_ . any)))) G36e5@pat)) G36e0@pat* G36e1@tmp*)))))))) G36dd@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G36db@t))) (G2f65@syntax-dispatch G36db@t '(_ each-any . #(each (any any)))))) G36d9@e))) (set! G2f53@quasiquote-macro ((lambda () ((lambda (G36f4@datum G3712@quasicons* G3714@quasicons G3716@quasiappend G3718@quasivector G371a@vquasi G371c@quasi) (begin (set! G36f4@datum (lambda (G37f7@x) (list (G2eef@scheme-stx 'quote) (G2d4e@mkstx G37f7@x '() '() '())))) (set! G3712@quasicons* (lambda (G37ef@x G37f0@y) ((letrec ((G37f3@f (lambda (G37f5@x) (if (null? G37f5@x) G37f0@y (G3714@quasicons (car G37f5@x) (G37f3@f (cdr G37f5@x))))))) G37f3@f) G37ef@x))) (set! G3714@quasicons (lambda (G37c9@x G37ca@y) ((lambda (G37cd@t) ((lambda (G37cf@ls/false) (if G37cf@ls/false (apply (lambda (G37d1@dy) ((lambda (G37d3@t) ((lambda (G37d5@ls/false) (if G37d5@ls/false (apply (lambda (G37d7@dx) (list (G2eef@scheme-stx 'quote) (cons G37d7@dx G37d1@dy))) G37d5@ls/false) ((lambda (G37d9@t) ((lambda (G37db@ls/false) (if G37db@ls/false (apply (lambda () ((lambda (G37dd@t) ((lambda (G37df@ls/false) (if G37df@ls/false (apply (lambda () (list (G2eef@scheme-stx 'list) G37c9@x)) G37df@ls/false) ((lambda (G37e1@t) ((lambda (G37e3@ls/false) (if G37e3@ls/false (apply (lambda () (list (G2eef@scheme-stx 'cons) G37c9@x G37ca@y)) G37e3@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G37e1@t))) (G2f65@syntax-dispatch G37e1@t '_))) G37dd@t))) (G2f65@syntax-dispatch G37dd@t '()))) G37d1@dy)) G37db@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G37d9@t))) (G2f65@syntax-dispatch G37d9@t '_))) G37d3@t))) (G2f65@syntax-dispatch G37d3@t '(#(scheme-id quote) any)))) G37c9@x)) G37cf@ls/false) ((lambda (G37e5@t) ((lambda (G37e7@ls/false) (if G37e7@ls/false (apply (lambda (G37e9@stuff) (cons* (G2eef@scheme-stx 'list) G37c9@x G37e9@stuff)) G37e7@ls/false) ((lambda (G37eb@t) ((lambda (G37ed@ls/false) (if G37ed@ls/false (apply (lambda () (list (G2eef@scheme-stx 'cons) G37c9@x G37ca@y)) G37ed@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G37eb@t))) (G2f65@syntax-dispatch G37eb@t '_))) G37e5@t))) (G2f65@syntax-dispatch G37e5@t '(#(scheme-id list) . each-any)))) G37cd@t))) (G2f65@syntax-dispatch G37cd@t '(#(scheme-id quote) any)))) G37ca@y))) (set! G3716@quasiappend (lambda (G37af@x G37b0@y) ((lambda (G37b3@ls) (if (null? G37b3@ls) (list (G2eef@scheme-stx 'quote) '()) (if (null? (cdr G37b3@ls)) (car G37b3@ls) (cons* (G2eef@scheme-stx 'append) G37b3@ls)))) ((letrec ((G37b5@f (lambda (G37b7@x) (if (null? G37b7@x) ((lambda (G37b9@t) ((lambda (G37bb@ls/false) (if G37bb@ls/false (apply (lambda () '()) G37bb@ls/false) ((lambda (G37bd@t) ((lambda (G37bf@ls/false) (if G37bf@ls/false (apply (lambda () (list G37b0@y)) G37bf@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G37bd@t))) (G2f65@syntax-dispatch G37bd@t '_))) G37b9@t))) (G2f65@syntax-dispatch G37b9@t '(#(scheme-id quote) ())))) G37b0@y) ((lambda (G37c1@t) ((lambda (G37c3@ls/false) (if G37c3@ls/false (apply (lambda () (G37b5@f (cdr G37b7@x))) G37c3@ls/false) ((lambda (G37c5@t) ((lambda (G37c7@ls/false) (if G37c7@ls/false (apply (lambda () (cons (car G37b7@x) (G37b5@f (cdr G37b7@x)))) G37c7@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G37c5@t))) (G2f65@syntax-dispatch G37c5@t '_))) G37c1@t))) (G2f65@syntax-dispatch G37c1@t '(#(scheme-id quote) ())))) (car G37b7@x)))))) G37b5@f) G37af@x)))) (set! G3718@quasivector (lambda (G377d@x) ((lambda (G377f@pat-x) ((lambda (G3781@t) ((lambda (G3783@ls/false) (if G3783@ls/false (apply (lambda (G3785@x*) (list (G2eef@scheme-stx 'quote) (list->vector G3785@x*))) G3783@ls/false) ((lambda (G3787@t) ((lambda (G3789@ls/false) (if G3789@ls/false (apply (lambda () ((letrec ((G378b@f (lambda (G378d@x G378e@k) ((lambda (G3791@t) ((lambda (G3793@ls/false) (if G3793@ls/false (apply (lambda (G3795@x*) (G378e@k (map (lambda (G3797@x) (list (G2eef@scheme-stx 'quote) G3797@x)) G3795@x*))) G3793@ls/false) ((lambda (G3799@t) ((lambda (G379b@ls/false) (if G379b@ls/false (apply (lambda (G379d@x*) (G378e@k G379d@x*)) G379b@ls/false) ((lambda (G379f@t) ((lambda (G37a1@ls/false) (if G37a1@ls/false (apply (lambda (G37a3@x G37a4@y) (G378b@f G37a4@y (lambda (G37a7@ls) (G378e@k (cons G37a3@x G37a7@ls))))) G37a1@ls/false) ((lambda (G37a9@t) ((lambda (G37ab@ls/false) (if G37ab@ls/false (apply (lambda () (list (G2eef@scheme-stx 'list->vector) G377f@pat-x)) G37ab@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G37a9@t))) (G2f65@syntax-dispatch G37a9@t '_))) G379f@t))) (G2f65@syntax-dispatch G379f@t '(#(scheme-id cons) any any)))) G3799@t))) (G2f65@syntax-dispatch G3799@t '(#(scheme-id list) . each-any)))) G3791@t))) (G2f65@syntax-dispatch G3791@t '(#(scheme-id quote) each-any)))) G378d@x)))) G378b@f) G377d@x (lambda (G37ad@ls) (cons* (G2eef@scheme-stx 'vector) G37ad@ls)))) G3789@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3787@t))) (G2f65@syntax-dispatch G3787@t '_))) G3781@t))) (G2f65@syntax-dispatch G3781@t '(#(scheme-id quote) each-any)))) G377f@pat-x)) G377d@x))) (set! G371a@vquasi (lambda (G375b@p G375c@lev) ((lambda (G375f@t) ((lambda (G3761@ls/false) (if G3761@ls/false (apply (lambda (G3763@p G3764@q) ((lambda (G3767@t) ((lambda (G3769@ls/false) (if G3769@ls/false (apply (lambda (G376b@p) (if (= G375c@lev '0) (G3712@quasicons* G376b@p (G371a@vquasi G3764@q G375c@lev)) (G3714@quasicons (G3714@quasicons (G36f4@datum 'unquote) (G371c@quasi G376b@p (- G375c@lev '1))) (G371a@vquasi G3764@q G375c@lev)))) G3769@ls/false) ((lambda (G376d@t) ((lambda (G376f@ls/false) (if G376f@ls/false (apply (lambda (G3771@p) (if (= G375c@lev '0) (G3716@quasiappend G3771@p (G371a@vquasi G3764@q G375c@lev)) (G3714@quasicons (G3714@quasicons (G36f4@datum 'unquote-splicing) (G371c@quasi G3771@p (- G375c@lev '1))) (G371a@vquasi G3764@q G375c@lev)))) G376f@ls/false) ((lambda (G3773@t) ((lambda (G3775@ls/false) (if G3775@ls/false (apply (lambda (G3777@p) (G3714@quasicons (G371c@quasi G3777@p G375c@lev) (G371a@vquasi G3764@q G375c@lev))) G3775@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3773@t))) (G2f65@syntax-dispatch G3773@t 'any))) G376d@t))) (G2f65@syntax-dispatch G376d@t '(#(scheme-id unquote-splicing) . each-any)))) G3767@t))) (G2f65@syntax-dispatch G3767@t '(#(scheme-id unquote) . each-any)))) G3763@p)) G3761@ls/false) ((lambda (G3779@t) ((lambda (G377b@ls/false) (if G377b@ls/false (apply (lambda () (list (G2eef@scheme-stx 'quote) '())) G377b@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3779@t))) (G2f65@syntax-dispatch G3779@t '()))) G375f@t))) (G2f65@syntax-dispatch G375f@t '(any . any)))) G375b@p))) (set! G371c@quasi (lambda (G3725@p G3726@lev) ((lambda (G3729@t) ((lambda (G372b@ls/false) (if G372b@ls/false (apply (lambda (G372d@p) (if (= G3726@lev '0) G372d@p (G3714@quasicons (G36f4@datum 'unquote) (G371c@quasi (list G372d@p) (- G3726@lev '1))))) G372b@ls/false) ((lambda (G372f@t) ((lambda (G3731@ls/false) (if G3731@ls/false (apply (lambda (G3733@p G3734@q) (if (= G3726@lev '0) (G3712@quasicons* G3733@p (G371c@quasi G3734@q G3726@lev)) (G3714@quasicons (G3714@quasicons (G36f4@datum 'unquote) (G371c@quasi G3733@p (- G3726@lev '1))) (G371c@quasi G3734@q G3726@lev)))) G3731@ls/false) ((lambda (G3737@t) ((lambda (G3739@ls/false) (if G3739@ls/false (apply (lambda (G373b@p G373c@q) (if (= G3726@lev '0) (G3716@quasiappend G373b@p (G371c@quasi G373c@q G3726@lev)) (G3714@quasicons (G3714@quasicons (G36f4@datum 'unquote-splicing) (G371c@quasi G373b@p (- G3726@lev '1))) (G371c@quasi G373c@q G3726@lev)))) G3739@ls/false) ((lambda (G373f@t) ((lambda (G3741@ls/false) (if G3741@ls/false (apply (lambda (G3743@p) (G3714@quasicons (G36f4@datum 'quasiquote) (G371c@quasi (list G3743@p) (+ G3726@lev '1)))) G3741@ls/false) ((lambda (G3745@t) ((lambda (G3747@ls/false) (if G3747@ls/false (apply (lambda (G3749@p G374a@q) (G3714@quasicons (G371c@quasi G3749@p G3726@lev) (G371c@quasi G374a@q G3726@lev))) G3747@ls/false) ((lambda (G374d@t) ((lambda (G374f@ls/false) (if (and G374f@ls/false (apply (lambda (G3751@x) (not (G2d2e@stx? G3751@x))) G374f@ls/false)) (apply (lambda (G3753@x) (G3718@quasivector (G371a@vquasi G3753@x G3726@lev))) G374f@ls/false) ((lambda (G3755@t) ((lambda (G3757@ls/false) (if G3757@ls/false (apply (lambda (G3759@p) (list (G2eef@scheme-stx 'quote) G3759@p)) G3757@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3755@t))) (G2f65@syntax-dispatch G3755@t 'any))) G374d@t))) (G2f65@syntax-dispatch G374d@t '#(vector each-any)))) G3745@t))) (G2f65@syntax-dispatch G3745@t '(any . any)))) G373f@t))) (G2f65@syntax-dispatch G373f@t '(#(scheme-id quasiquote) any)))) G3737@t))) (G2f65@syntax-dispatch G3737@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G372f@t))) (G2f65@syntax-dispatch G372f@t '((#(scheme-id unquote) . each-any) . any)))) G3729@t))) (G2f65@syntax-dispatch G3729@t '(#(scheme-id unquote) any)))) G3725@p))) (lambda (G371d@x) ((lambda (G371f@t) ((lambda (G3721@ls/false) (if G3721@ls/false (apply (lambda (G3723@e) (G371c@quasi G3723@e '0)) G3721@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G371f@t))) (G2f65@syntax-dispatch G371f@t '(_ any)))) G371d@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f55@quasisyntax-macro ((lambda () ((lambda (G37fa@quasi) (begin (set! G37fa@quasi (lambda (G3812@p G3813@lev) ((lambda (G3816@t) ((lambda (G3818@ls/false) (if G3818@ls/false (apply (lambda (G381a@p) (if (= G3813@lev '0) ((lambda (G381c@g) (values (list G381c@g) (list G381a@p) G381c@g)) (gensym)) (call-with-values (lambda () (G37fa@quasi G381a@p (- G3813@lev '1))) (lambda (G3821@G381e G3822@G381f G3823@G3820) ((lambda (G3827@p G3828@rhs* G3829@lhs*) (values G3829@lhs* G3828@rhs* (list 'unsyntax G3827@p))) G3823@G3820 G3822@G381f G3821@G381e))))) G3818@ls/false) ((lambda (G382d@t) ((lambda (G382f@ls/false) (if (and G382f@ls/false (apply (lambda () (= G3813@lev '0)) G382f@ls/false)) (apply (lambda () (G3052@syntax-violation '#f '"incorrect use of unsyntax" G3812@p)) G382f@ls/false) ((lambda (G3831@t) ((lambda (G3833@ls/false) (if G3833@ls/false (apply (lambda (G3835@p* G3836@q) (call-with-values (lambda () (G37fa@quasi G3836@q G3813@lev)) (lambda (G383c@G3839 G383d@G383a G383e@G383b) ((lambda (G3842@q G3843@rhs* G3844@lhs*) (if (= G3813@lev '0) ((lambda (G3848@g*) (values (append G3848@g* G3844@lhs*) (append G3835@p* G3843@rhs*) (append G3848@g* G3842@q))) (map (lambda (G384a@x) (gensym)) G3835@p*)) (call-with-values (lambda () (G37fa@quasi G3835@p* (- G3813@lev '1))) (lambda (G384f@G384c G3850@G384d G3851@G384e) ((lambda (G3855@p* G3856@rhs2* G3857@lhs2*) (values (append G3857@lhs2* G3844@lhs*) (append G3856@rhs2* G3843@rhs*) (cons (cons 'unsyntax G3855@p*) G3842@q))) G3851@G384e G3850@G384d G384f@G384c))))) G383e@G383b G383d@G383a G383c@G3839)))) G3833@ls/false) ((lambda (G385b@t) ((lambda (G385d@ls/false) (if G385d@ls/false (apply (lambda (G385f@p* G3860@q) (call-with-values (lambda () (G37fa@quasi G3860@q G3813@lev)) (lambda (G3866@G3863 G3867@G3864 G3868@G3865) ((lambda (G386c@q G386d@rhs* G386e@lhs*) (if (= G3813@lev '0) ((lambda (G3872@g*) (values (append (map (lambda (G3874@g) (cons G3874@g '(...))) G3872@g*) G386e@lhs*) (append G385f@p* G386d@rhs*) (append (apply append (map (lambda (G3876@g) (cons G3876@g '(...))) G3872@g*)) G386c@q))) (map (lambda (G3878@x) (gensym)) G385f@p*)) (call-with-values (lambda () (G37fa@quasi G385f@p* (- G3813@lev '1))) (lambda (G387d@G387a G387e@G387b G387f@G387c) ((lambda (G3883@p* G3884@rhs2* G3885@lhs2*) (values (append G3885@lhs2* G386e@lhs*) (append G3884@rhs2* G386d@rhs*) (cons (cons 'unsyntax-splicing G3883@p*) G386c@q))) G387f@G387c G387e@G387b G387d@G387a))))) G3868@G3865 G3867@G3864 G3866@G3863)))) G385d@ls/false) ((lambda (G3889@t) ((lambda (G388b@ls/false) (if (and G388b@ls/false (apply (lambda () (= G3813@lev '0)) G388b@ls/false)) (apply (lambda () (G3052@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3812@p)) G388b@ls/false) ((lambda (G388d@t) ((lambda (G388f@ls/false) (if G388f@ls/false (apply (lambda (G3891@p) (call-with-values (lambda () (G37fa@quasi G3891@p (+ G3813@lev '1))) (lambda (G3896@G3893 G3897@G3894 G3898@G3895) ((lambda (G389c@p G389d@rhs* G389e@lhs*) (values G389e@lhs* G389d@rhs* (list 'quasisyntax G389c@p))) G3898@G3895 G3897@G3894 G3896@G3893)))) G388f@ls/false) ((lambda (G38a2@t) ((lambda (G38a4@ls/false) (if G38a4@ls/false (apply (lambda (G38a6@p G38a7@q) (call-with-values (lambda () (G37fa@quasi G38a6@p G3813@lev)) (lambda (G38b0@G38aa G38b1@G38ab G38b2@G38ac) (call-with-values (lambda () (G37fa@quasi G38a7@q G3813@lev)) (lambda (G38b6@G38ad G38b7@G38ae G38b8@G38af) ((lambda (G38bc@q G38bd@rhs2* G38be@lhs2* G38bf@p G38c0@rhs* G38c1@lhs*) (values (append G38be@lhs2* G38c1@lhs*) (append G38bd@rhs2* G38c0@rhs*) (cons G38bf@p G38bc@q))) G38b8@G38af G38b7@G38ae G38b6@G38ad G38b2@G38ac G38b1@G38ab G38b0@G38aa)))))) G38a4@ls/false) ((lambda (G38c8@t) ((lambda (G38ca@ls/false) (if G38ca@ls/false (apply (lambda (G38cc@x*) (call-with-values (lambda () (G37fa@quasi G38cc@x* G3813@lev)) (lambda (G38d1@G38ce G38d2@G38cf G38d3@G38d0) ((lambda (G38d7@x* G38d8@rhs* G38d9@lhs*) (values G38d9@lhs* G38d8@rhs* (list->vector G38d7@x*))) G38d3@G38d0 G38d2@G38cf G38d1@G38ce)))) G38ca@ls/false) ((lambda (G38dd@t) ((lambda (G38df@ls/false) (if G38df@ls/false (apply (lambda () (values '() '() G3812@p)) G38df@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G38dd@t))) (G2f65@syntax-dispatch G38dd@t '_))) G38c8@t))) (G2f65@syntax-dispatch G38c8@t '#(vector each-any)))) G38a2@t))) (G2f65@syntax-dispatch G38a2@t '(any . any)))) G388d@t))) (G2f65@syntax-dispatch G388d@t '(#(scheme-id quasisyntax) any)))) G3889@t))) (G2f65@syntax-dispatch G3889@t '#(scheme-id unsyntax-splicing)))) G385b@t))) (G2f65@syntax-dispatch G385b@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3831@t))) (G2f65@syntax-dispatch G3831@t '((#(scheme-id unsyntax) . each-any) . any)))) G382d@t))) (G2f65@syntax-dispatch G382d@t '#(scheme-id unsyntax)))) G3816@t))) (G2f65@syntax-dispatch G3816@t '(#(scheme-id unsyntax) any)))) G3812@p))) (lambda (G37fb@x) ((lambda (G37fd@t) ((lambda (G37ff@ls/false) (if G37ff@ls/false (apply (lambda (G3801@e) (call-with-values (lambda () (G37fa@quasi G3801@e '0)) (lambda (G3806@G3803 G3807@G3804 G3808@G3805) ((lambda (G380c@v G380d@rhs* G380e@lhs*) (G2f1b@bless (list 'syntax-case (cons 'list G380d@rhs*) '() (list G380e@lhs* (list 'syntax G380c@v))))) G3808@G3805 G3807@G3804 G3806@G3803)))) G37ff@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G37fd@t))) (G2f65@syntax-dispatch G37fd@t '(_ any)))) G37fb@x)))) '#f)))) (set! G2f57@define-struct-macro (lambda (G38e1@stx) (G3052@syntax-violation '#f '"define-struct not supported" G38e1@stx))) (set! G2f59@define-record-type-macro (lambda (G38e3@x) ((lambda (G38e6@id G38e8@get-record-name G38ea@get-record-constructor-name G38ec@get-record-predicate-name G38ee@get-clause G38f0@foo-rtd-code G38f2@parent-rtd-code G38f4@parent-rcd-code G38f6@foo-rcd-code G38f8@get-protocol-code G38fa@get-fields G38fc@get-mutator-indices G38fe@get-mutators G3900@get-accessors G3902@enumerate G3904@do-define-record G3906@verify-clauses) (begin (set! G38e6@id (lambda (G3ad9@ctxt . G3adb@str*) (G3056@datum->syntax G3ad9@ctxt (string->symbol (apply string-append (map (lambda (G3add@x) (if (symbol? G3add@x) (symbol->string G3add@x) (if (string? G3add@x) G3add@x (assertion-violation 'define-record-type '"BUG")))) G3adb@str*)))))) (set! G38e8@get-record-name (lambda (G3ac7@spec) ((lambda (G3ac9@t) ((lambda (G3acb@ls/false) (if G3acb@ls/false (apply (lambda (G3acd@foo G3ace@make-foo G3acf@foo?) G3acd@foo) G3acb@ls/false) ((lambda (G3ad3@t) ((lambda (G3ad5@ls/false) (if G3ad5@ls/false (apply (lambda (G3ad7@foo) G3ad7@foo) G3ad5@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3ad3@t))) (G2f65@syntax-dispatch G3ad3@t 'any))) G3ac9@t))) (G2f65@syntax-dispatch G3ac9@t '(any any any)))) G3ac7@spec))) (set! G38ea@get-record-constructor-name (lambda (G3ab3@spec) ((lambda (G3ab5@t) ((lambda (G3ab7@ls/false) (if G3ab7@ls/false (apply (lambda (G3ab9@foo G3aba@make-foo G3abb@foo?) G3aba@make-foo) G3ab7@ls/false) ((lambda (G3abf@t) ((lambda (G3ac1@ls/false) (if (and G3ac1@ls/false (apply (lambda (G3ac3@foo) (G2d66@id? G3ac3@foo)) G3ac1@ls/false)) (apply (lambda (G3ac5@foo) (G38e6@id G3ac5@foo '"make-" (G2d7c@stx->datum G3ac5@foo))) G3ac1@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3abf@t))) (G2f65@syntax-dispatch G3abf@t 'any))) G3ab5@t))) (G2f65@syntax-dispatch G3ab5@t '(any any any)))) G3ab3@spec))) (set! G38ec@get-record-predicate-name (lambda (G3a9f@spec) ((lambda (G3aa1@t) ((lambda (G3aa3@ls/false) (if G3aa3@ls/false (apply (lambda (G3aa5@foo G3aa6@make-foo G3aa7@foo?) G3aa7@foo?) G3aa3@ls/false) ((lambda (G3aab@t) ((lambda (G3aad@ls/false) (if (and G3aad@ls/false (apply (lambda (G3aaf@foo) (G2d66@id? G3aaf@foo)) G3aad@ls/false)) (apply (lambda (G3ab1@foo) (G38e6@id G3ab1@foo (G2d7c@stx->datum G3ab1@foo) '"?")) G3aad@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3aab@t))) (G2f65@syntax-dispatch G3aab@t 'any))) G3aa1@t))) (G2f65@syntax-dispatch G3aa1@t '(any any any)))) G3a9f@spec))) (set! G38ee@get-clause (lambda (G3a8d@id G3a8e@ls) ((lambda (G3a91@t) ((lambda (G3a93@ls/false) (if G3a93@ls/false (apply (lambda () '#f) G3a93@ls/false) ((lambda (G3a95@t) ((lambda (G3a97@ls/false) (if G3a97@ls/false (apply (lambda (G3a99@x G3a9a@rest G3a9b@ls) (if (G2d6e@free-id=? (G2f1b@bless G3a8d@id) G3a99@x) (cons G3a99@x G3a9a@rest) (G38ee@get-clause G3a8d@id G3a9b@ls))) G3a97@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a95@t))) (G2f65@syntax-dispatch G3a95@t '((any . any) . any)))) G3a91@t))) (G2f65@syntax-dispatch G3a91@t '()))) G3a8e@ls))) (set! G38f0@foo-rtd-code (lambda (G3a3b@name G3a3c@clause* G3a3d@parent-rtd-code) ((lambda (G3a42@convert-field-spec*) (begin (set! G3a42@convert-field-spec* (lambda (G3a73@ls) (list->vector (map (lambda (G3a75@x) ((lambda (G3a77@t) ((lambda (G3a79@ls/false) (if G3a79@ls/false (apply (lambda (G3a7b@name G3a7c@rest) (list 'mutable G3a7b@name)) G3a79@ls/false) ((lambda (G3a7f@t) ((lambda (G3a81@ls/false) (if G3a81@ls/false (apply (lambda (G3a83@name G3a84@rest) (list 'immutable G3a83@name)) G3a81@ls/false) ((lambda (G3a87@t) ((lambda (G3a89@ls/false) (if G3a89@ls/false (apply (lambda (G3a8b@name) (list 'immutable G3a8b@name)) G3a89@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a87@t))) (G2f65@syntax-dispatch G3a87@t 'any))) G3a7f@t))) (G2f65@syntax-dispatch G3a7f@t '(#(scheme-id immutable) any . any)))) G3a77@t))) (G2f65@syntax-dispatch G3a77@t '(#(scheme-id mutable) any . any)))) G3a75@x)) G3a73@ls)))) ((lambda (G3a43@uid-code G3a44@sealed? G3a45@opaque? G3a46@fields) (G2f1b@bless (list 'make-record-type-descriptor (list 'quote G3a3b@name) G3a3d@parent-rtd-code G3a43@uid-code G3a44@sealed? G3a45@opaque? G3a46@fields))) ((lambda (G3a4b@t) ((lambda (G3a4d@ls/false) (if G3a4d@ls/false (apply (lambda () (list 'quote (gensym))) G3a4d@ls/false) ((lambda (G3a4f@t) ((lambda (G3a51@ls/false) (if G3a51@ls/false (apply (lambda (G3a53@uid) (list 'quote G3a53@uid)) G3a51@ls/false) ((lambda (G3a55@t) ((lambda (G3a57@ls/false) (if G3a57@ls/false (apply (lambda () '#f) G3a57@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a55@t))) (G2f65@syntax-dispatch G3a55@t '_))) G3a4f@t))) (G2f65@syntax-dispatch G3a4f@t '(_ any)))) G3a4b@t))) (G2f65@syntax-dispatch G3a4b@t '(_)))) (G38ee@get-clause 'nongenerative G3a3c@clause*)) ((lambda (G3a59@t) ((lambda (G3a5b@ls/false) (if G3a5b@ls/false (apply (lambda () '#t) G3a5b@ls/false) ((lambda (G3a5d@t) ((lambda (G3a5f@ls/false) (if G3a5f@ls/false (apply (lambda () '#f) G3a5f@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a5d@t))) (G2f65@syntax-dispatch G3a5d@t '_))) G3a59@t))) (G2f65@syntax-dispatch G3a59@t '(_ #(atom #t))))) (G38ee@get-clause 'sealed G3a3c@clause*)) ((lambda (G3a61@t) ((lambda (G3a63@ls/false) (if G3a63@ls/false (apply (lambda () '#t) G3a63@ls/false) ((lambda (G3a65@t) ((lambda (G3a67@ls/false) (if G3a67@ls/false (apply (lambda () '#f) G3a67@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a65@t))) (G2f65@syntax-dispatch G3a65@t '_))) G3a61@t))) (G2f65@syntax-dispatch G3a61@t '(_ #(atom #t))))) (G38ee@get-clause 'opaque G3a3c@clause*)) ((lambda (G3a69@t) ((lambda (G3a6b@ls/false) (if G3a6b@ls/false (apply (lambda (G3a6d@field-spec*) (list 'quote (G3a42@convert-field-spec* G3a6d@field-spec*))) G3a6b@ls/false) ((lambda (G3a6f@t) ((lambda (G3a71@ls/false) (if G3a71@ls/false (apply (lambda () ''#()) G3a71@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a6f@t))) (G2f65@syntax-dispatch G3a6f@t '_))) G3a69@t))) (G2f65@syntax-dispatch G3a69@t '(_ . each-any)))) (G38ee@get-clause 'fields G3a3c@clause*))))) '#f))) (set! G38f2@parent-rtd-code (lambda (G3a23@clause*) ((lambda (G3a25@t) ((lambda (G3a27@ls/false) (if G3a27@ls/false (apply (lambda (G3a29@name) (list 'record-type-descriptor G3a29@name)) G3a27@ls/false) ((lambda (G3a2b@t) ((lambda (G3a2d@ls/false) (if G3a2d@ls/false (apply (lambda () ((lambda (G3a2f@t) ((lambda (G3a31@ls/false) (if G3a31@ls/false (apply (lambda (G3a33@rtd G3a34@rcd) G3a33@rtd) G3a31@ls/false) ((lambda (G3a37@t) ((lambda (G3a39@ls/false) (if G3a39@ls/false (apply (lambda () '#f) G3a39@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a37@t))) (G2f65@syntax-dispatch G3a37@t '#(atom #f)))) G3a2f@t))) (G2f65@syntax-dispatch G3a2f@t '(_ any any)))) (G38ee@get-clause 'parent-rtd G3a23@clause*))) G3a2d@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a2b@t))) (G2f65@syntax-dispatch G3a2b@t '#(atom #f)))) G3a25@t))) (G2f65@syntax-dispatch G3a25@t '(_ any)))) (G38ee@get-clause 'parent G3a23@clause*)))) (set! G38f4@parent-rcd-code (lambda (G3a0b@clause*) ((lambda (G3a0d@t) ((lambda (G3a0f@ls/false) (if G3a0f@ls/false (apply (lambda (G3a11@name) (list 'record-constructor-descriptor G3a11@name)) G3a0f@ls/false) ((lambda (G3a13@t) ((lambda (G3a15@ls/false) (if G3a15@ls/false (apply (lambda () ((lambda (G3a17@t) ((lambda (G3a19@ls/false) (if G3a19@ls/false (apply (lambda (G3a1b@rtd G3a1c@rcd) G3a1c@rcd) G3a19@ls/false) ((lambda (G3a1f@t) ((lambda (G3a21@ls/false) (if G3a21@ls/false (apply (lambda () '#f) G3a21@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a1f@t))) (G2f65@syntax-dispatch G3a1f@t '#(atom #f)))) G3a17@t))) (G2f65@syntax-dispatch G3a17@t '(_ any any)))) (G38ee@get-clause 'parent-rtd G3a0b@clause*))) G3a15@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3a13@t))) (G2f65@syntax-dispatch G3a13@t '#(atom #f)))) G3a0d@t))) (G2f65@syntax-dispatch G3a0d@t '(_ any)))) (G38ee@get-clause 'parent G3a0b@clause*)))) (set! G38f6@foo-rcd-code (lambda (G3a03@clause* G3a04@foo-rtd G3a05@protocol G3a06@parent-rcd-code) (list 'make-record-constructor-descriptor G3a04@foo-rtd G3a06@parent-rcd-code G3a05@protocol))) (set! G38f8@get-protocol-code (lambda (G39f7@clause*) ((lambda (G39f9@t) ((lambda (G39fb@ls/false) (if G39fb@ls/false (apply (lambda (G39fd@expr) G39fd@expr) G39fb@ls/false) ((lambda (G39ff@t) ((lambda (G3a01@ls/false) (if G3a01@ls/false (apply (lambda () '#f) G3a01@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G39ff@t))) (G2f65@syntax-dispatch G39ff@t '_))) G39f9@t))) (G2f65@syntax-dispatch G39f9@t '(_ any)))) (G38ee@get-clause 'protocol G39f7@clause*)))) (set! G38fa@get-fields (lambda (G39e5@clause*) ((lambda (G39e7@t) ((lambda (G39e9@ls/false) (if G39e9@ls/false (apply (lambda () '()) G39e9@ls/false) ((lambda (G39eb@t) ((lambda (G39ed@ls/false) (if G39ed@ls/false (apply (lambda (G39ef@f*) G39ef@f*) G39ed@ls/false) ((lambda (G39f1@t) ((lambda (G39f3@ls/false) (if G39f3@ls/false (apply (lambda (G39f5@rest) (G38fa@get-fields G39f5@rest)) G39f3@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G39f1@t))) (G2f65@syntax-dispatch G39f1@t '(_ . any)))) G39eb@t))) (G2f65@syntax-dispatch G39eb@t '((#(scheme-id fields) . each-any) . _)))) G39e7@t))) (G2f65@syntax-dispatch G39e7@t '()))) G39e5@clause*))) (set! G38fc@get-mutator-indices (lambda (G39cd@fields) ((letrec ((G39cf@f (lambda (G39d1@fields G39d2@i) ((lambda (G39d5@t) ((lambda (G39d7@ls/false) (if G39d7@ls/false (apply (lambda () '()) G39d7@ls/false) ((lambda (G39d9@t) ((lambda (G39db@ls/false) (if G39db@ls/false (apply (lambda (G39dd@rest) (cons G39d2@i (G39cf@f G39dd@rest (+ G39d2@i '1)))) G39db@ls/false) ((lambda (G39df@t) ((lambda (G39e1@ls/false) (if G39e1@ls/false (apply (lambda (G39e3@rest) (G39cf@f G39e3@rest (+ G39d2@i '1))) G39e1@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G39df@t))) (G2f65@syntax-dispatch G39df@t '(_ . any)))) G39d9@t))) (G2f65@syntax-dispatch G39d9@t '((#(scheme-id mutable) . _) . any)))) G39d5@t))) (G2f65@syntax-dispatch G39d5@t '()))) G39d1@fields)))) G39cf@f) G39cd@fields '0))) (set! G38fe@get-mutators (lambda (G39a3@foo G39a4@fields) ((lambda (G39a8@gen-name) (begin (set! G39a8@gen-name (lambda (G39cb@x) (G3056@datum->syntax G39a3@foo (string->symbol (string-append (symbol->string (G3058@syntax->datum G39a3@foo)) '"-" (symbol->string (G3058@syntax->datum G39cb@x)) '"-set!"))))) ((letrec ((G39a9@f (lambda (G39ab@fields) ((lambda (G39ad@t) ((lambda (G39af@ls/false) (if G39af@ls/false (apply (lambda () '()) G39af@ls/false) ((lambda (G39b1@t) ((lambda (G39b3@ls/false) (if G39b3@ls/false (apply (lambda (G39b5@name G39b6@accessor G39b7@mutator G39b8@rest) (cons G39b7@mutator (G39a9@f G39b8@rest))) G39b3@ls/false) ((lambda (G39bd@t) ((lambda (G39bf@ls/false) (if G39bf@ls/false (apply (lambda (G39c1@name G39c2@rest) (cons (G39a8@gen-name G39c1@name) (G39a9@f G39c2@rest))) G39bf@ls/false) ((lambda (G39c5@t) ((lambda (G39c7@ls/false) (if G39c7@ls/false (apply (lambda (G39c9@rest) (G39a9@f G39c9@rest)) G39c7@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G39c5@t))) (G2f65@syntax-dispatch G39c5@t '(_ . any)))) G39bd@t))) (G2f65@syntax-dispatch G39bd@t '((#(scheme-id mutable) any) . any)))) G39b1@t))) (G2f65@syntax-dispatch G39b1@t '((#(scheme-id mutable) any any any) . any)))) G39ad@t))) (G2f65@syntax-dispatch G39ad@t '()))) G39ab@fields)))) G39a9@f) G39a4@fields))) '#f))) (set! G3900@get-accessors (lambda (G395f@foo G3960@fields) ((lambda (G3964@gen-name) (begin (set! G3964@gen-name (lambda (G39a1@x) (G3056@datum->syntax G395f@foo (string->symbol (string-append (symbol->string (G3058@syntax->datum G395f@foo)) '"-" (symbol->string (G3058@syntax->datum G39a1@x))))))) (map (lambda (G3965@field) ((lambda (G3967@t) ((lambda (G3969@ls/false) (if (and G3969@ls/false (apply (lambda (G396b@name G396c@accessor G396d@mutator) (G2d66@id? G396c@accessor)) G3969@ls/false)) (apply (lambda (G3971@name G3972@accessor G3973@mutator) G3972@accessor) G3969@ls/false) ((lambda (G3977@t) ((lambda (G3979@ls/false) (if (and G3979@ls/false (apply (lambda (G397b@name G397c@accessor) (G2d66@id? G397c@accessor)) G3979@ls/false)) (apply (lambda (G397f@name G3980@accessor) G3980@accessor) G3979@ls/false) ((lambda (G3983@t) ((lambda (G3985@ls/false) (if (and G3985@ls/false (apply (lambda (G3987@name) (G2d66@id? G3987@name)) G3985@ls/false)) (apply (lambda (G3989@name) (G3964@gen-name G3989@name)) G3985@ls/false) ((lambda (G398b@t) ((lambda (G398d@ls/false) (if (and G398d@ls/false (apply (lambda (G398f@name) (G2d66@id? G398f@name)) G398d@ls/false)) (apply (lambda (G3991@name) (G3964@gen-name G3991@name)) G398d@ls/false) ((lambda (G3993@t) ((lambda (G3995@ls/false) (if (and G3995@ls/false (apply (lambda (G3997@name) (G2d66@id? G3997@name)) G3995@ls/false)) (apply (lambda (G3999@name) (G3964@gen-name G3999@name)) G3995@ls/false) ((lambda (G399b@t) ((lambda (G399d@ls/false) (if G399d@ls/false (apply (lambda (G399f@others) (G3052@syntax-violation '#f '"invalid field spec" G3965@field)) G399d@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G399b@t))) (G2f65@syntax-dispatch G399b@t 'any))) G3993@t))) (G2f65@syntax-dispatch G3993@t 'any))) G398b@t))) (G2f65@syntax-dispatch G398b@t '(#(scheme-id immutable) any)))) G3983@t))) (G2f65@syntax-dispatch G3983@t '(#(scheme-id mutable) any)))) G3977@t))) (G2f65@syntax-dispatch G3977@t '(#(scheme-id immutable) any any)))) G3967@t))) (G2f65@syntax-dispatch G3967@t '(#(scheme-id mutable) any any any)))) G3965@field)) G3960@fields))) '#f))) (set! G3902@enumerate (lambda (G3957@ls) ((letrec ((G3959@f (lambda (G395b@ls G395c@i) (if (null? G395b@ls) '() (cons G395c@i (G3959@f (cdr G395b@ls) (+ G395c@i '1))))))) G3959@f) G3957@ls '0))) (set! G3904@do-define-record (lambda (G392f@namespec G3930@clause*) ((lambda (G3933@foo) ((lambda (G3935@foo-rtd) ((lambda (G3937@foo-rcd) ((lambda (G3939@protocol) ((lambda (G393b@make-foo) ((lambda (G393d@fields) ((lambda (G393f@idx*) ((lambda (G3941@foo-x*) ((lambda (G3943@set-foo-x!*) ((lambda (G3945@set-foo-idx*) ((lambda (G3947@foo?) ((lambda (G3949@foo-rtd-code) ((lambda (G394b@foo-rcd-code) ((lambda (G394d@protocol-code) ((lambda () (G2f1b@bless (cons 'begin (cons (list 'define G3935@foo-rtd G3949@foo-rtd-code) (cons (list 'define G3939@protocol G394d@protocol-code) (cons (list 'define G3937@foo-rcd G394b@foo-rcd-code) (cons (list 'define-syntax G3933@foo (list 'list ''$rtd (list 'syntax G3935@foo-rtd) (list 'syntax G3937@foo-rcd))) (cons (list 'define G3947@foo? (list 'record-predicate G3935@foo-rtd)) (cons (list 'define G393b@make-foo (list 'record-constructor G3937@foo-rcd)) (append (map (lambda (G394f@foo-x G3950@idx) (list 'define G394f@foo-x (list 'record-accessor G3935@foo-rtd G3950@idx))) G3941@foo-x* G393f@idx*) (map (lambda (G3953@set-foo-x! G3954@idx) (list 'define G3953@set-foo-x! (list 'record-mutator G3935@foo-rtd G3954@idx))) G3943@set-foo-x!* G3945@set-foo-idx*))))))))))))) (G38f8@get-protocol-code G3930@clause*))) (G38f6@foo-rcd-code G3930@clause* G3935@foo-rtd G3939@protocol (G38f4@parent-rcd-code G3930@clause*)))) (G38f0@foo-rtd-code G3933@foo G3930@clause* (G38f2@parent-rtd-code G3930@clause*)))) (G38ec@get-record-predicate-name G392f@namespec))) (G38fc@get-mutator-indices G393d@fields))) (G38fe@get-mutators G3933@foo G393d@fields))) (G3900@get-accessors G3933@foo G393d@fields))) (G3902@enumerate G393d@fields))) (G38fa@get-fields G3930@clause*))) (G38ea@get-record-constructor-name G392f@namespec))) (gensym))) (gensym))) (gensym))) (G38e8@get-record-name G392f@namespec)))) (set! G3906@verify-clauses (lambda (G390f@x G3910@cls*) ((lambda (G3914@valid-kwds G3916@free-id-member?) (begin (set! G3914@valid-kwds (map G2f1b@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3916@free-id-member? (lambda (G392b@x G392c@ls) (and (pair? G392c@ls) (or (G2d6e@free-id=? G392b@x (car G392c@ls)) (G3916@free-id-member? G392b@x (cdr G392c@ls)))))) ((letrec ((G3917@f (lambda (G3919@cls* G391a@seen*) (if (not (null? G3919@cls*)) ((lambda (G391d@t) ((lambda (G391f@ls/false) (if G391f@ls/false (apply (lambda (G3921@kwd G3922@rest) (if (or (not (G2d66@id? G3921@kwd)) (not (G3916@free-id-member? G3921@kwd G3914@valid-kwds))) (G3052@syntax-violation '#f '"not a valid define-record-type keyword" G3921@kwd) (if (G2d74@bound-id-member? G3921@kwd G391a@seen*) (G3052@syntax-violation '#f '"duplicate use of keyword " G390f@x G3921@kwd) (G3917@f (cdr G3919@cls*) (cons G3921@kwd G391a@seen*))))) G391f@ls/false) ((lambda (G3925@t) ((lambda (G3927@ls/false) (if G3927@ls/false (apply (lambda (G3929@cls) (G3052@syntax-violation '#f '"malformed define-record-type clause" G3929@cls)) G3927@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3925@t))) (G2f65@syntax-dispatch G3925@t 'any))) G391d@t))) (G2f65@syntax-dispatch G391d@t '(any . any)))) (car G3919@cls*)) (void))))) G3917@f) G3910@cls* '()))) '#f '#f))) ((lambda (G3907@t) ((lambda (G3909@ls/false) (if G3909@ls/false (apply (lambda (G390b@namespec G390c@clause*) (begin (G3906@verify-clauses G38e3@x G390c@clause*) (G3904@do-define-record G390b@namespec G390c@clause*))) G3909@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3907@t))) (G2f65@syntax-dispatch G3907@t '(_ any . each-any)))) G38e3@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f5b@define-condition-type-macro (lambda (G3adf@x) ((lambda (G3ae2@mkname) (begin (set! G3ae2@mkname (lambda (G3b0f@name G3b10@suffix) (G3056@datum->syntax G3b0f@name (string->symbol (string-append (symbol->string (G3058@syntax->datum G3b0f@name)) G3b10@suffix))))) ((lambda (G3ae3@t) ((lambda (G3ae5@ls/false) (if (and G3ae5@ls/false (apply (lambda (G3ae7@ctxt G3ae8@name G3ae9@super G3aea@constructor G3aeb@predicate G3aec@field* G3aed@accessor*) (and (G2d66@id? G3ae8@name) (G2d66@id? G3ae9@super) (G2d66@id? G3aea@constructor) (G2d66@id? G3aeb@predicate) (for-all G2d66@id? G3aec@field*) (for-all G2d66@id? G3aed@accessor*))) G3ae5@ls/false)) (apply (lambda (G3af5@ctxt G3af6@name G3af7@super G3af8@constructor G3af9@predicate G3afa@field* G3afb@accessor*) ((lambda (G3b03@aux-accessor*) (G2f1b@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3af6@name G3af8@constructor (gensym)) (cons (list 'parent G3af7@super) (cons (cons 'fields (map (lambda (G3b05@field G3b06@aux) (list 'immutable G3b05@field G3b06@aux)) G3afa@field* G3b03@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3af9@predicate (list 'condition-predicate (list 'record-type-descriptor G3af6@name))) (map (lambda (G3b09@accessor G3b0a@aux) (list 'define G3b09@accessor (list 'condition-accessor (list 'record-type-descriptor G3af6@name) G3b0a@aux))) G3afb@accessor* G3b03@aux-accessor*)))))) (map (lambda (G3b0d@x) (gensym)) G3afb@accessor*))) G3ae5@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3ae3@t))) (G2f65@syntax-dispatch G3ae3@t '(any any any any any . #(each (any any)))))) G3adf@x))) '#f))) (set! G2f5d@incorrect-usage-macro (lambda (G3b13@e) (G3052@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b13@e))) (set! G2f5f@parameterize-macro (lambda (G3b15@e) ((lambda (G3b17@t) ((lambda (G3b19@ls/false) (if G3b19@ls/false (apply (lambda (G3b1b@b G3b1c@b*) (G2f1b@bless (cons 'let (cons '() (cons G3b1b@b G3b1c@b*))))) G3b19@ls/false) ((lambda (G3b1f@t) ((lambda (G3b21@ls/false) (if G3b21@ls/false (apply (lambda (G3b23@olhs* G3b24@orhs* G3b25@b G3b26@b*) ((lambda (G3b2b@lhs* G3b2c@rhs*) (G2f1b@bless (cons (list 'lambda (append G3b2b@lhs* G3b2c@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b2f@lhs G3b30@rhs) (list 'let (list (list 't (list G3b2f@lhs))) (list G3b2f@lhs G3b30@rhs) (cons 'set! (cons G3b30@rhs '(t))))) G3b2b@lhs* G3b2c@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b25@b G3b26@b*))) '(swap)))))) (append G3b23@olhs* G3b24@orhs*)))) (G303e@generate-temporaries G3b23@olhs*) (G303e@generate-temporaries G3b24@orhs*))) G3b21@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3b1f@t))) (G2f65@syntax-dispatch G3b1f@t '(_ #(each (any any)) any . each-any)))) G3b17@t))) (G2f65@syntax-dispatch G3b17@t '(_ () any . each-any)))) G3b15@e))) (set! G2f61@foreign-call-transformer (lambda (G3b33@e G3b34@r G3b35@mr) ((lambda (G3b39@t) ((lambda (G3b3b@ls/false) (if G3b3b@ls/false (apply (lambda (G3b3d@name G3b3e@arg*) (cons 'foreign-call (cons (G2f89@chi-expr G3b3d@name G3b34@r G3b35@mr) (G2f85@chi-expr* G3b3e@arg* G3b34@r G3b35@mr)))) G3b3b@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3b39@t))) (G2f65@syntax-dispatch G3b39@t '(_ any . each-any)))) G3b33@e))) (set! G2f63@convert-pattern (lambda (G3b41@pattern G3b42@keys) ((lambda (G3b46@cvt* G3b48@cvt) (begin (set! G3b46@cvt* (lambda (G3bd7@p* G3bd8@n G3bd9@ids) (if (null? G3bd7@p*) (values '() G3bd9@ids) (call-with-values (lambda () (G3b46@cvt* (cdr G3bd7@p*) G3bd8@n G3bd9@ids)) (lambda (G3bdf@G3bdd G3be0@G3bde) ((lambda (G3be3@ids G3be4@y) (call-with-values (lambda () (G3b48@cvt (car G3bd7@p*) G3bd8@n G3be3@ids)) (lambda (G3be9@G3be7 G3bea@G3be8) ((lambda (G3bed@ids G3bee@x) (values (cons G3bee@x G3be4@y) G3bed@ids)) G3bea@G3be8 G3be9@G3be7)))) G3be0@G3bde G3bdf@G3bdd)))))) (set! G3b48@cvt (lambda (G3b49@p G3b4a@n G3b4b@ids) ((lambda (G3b4f@t) ((lambda (G3b51@ls/false) (if (and G3b51@ls/false (apply (lambda (G3b53@id) (G2d66@id? G3b53@id)) G3b51@ls/false)) (apply (lambda (G3b55@id) (if (G2d74@bound-id-member? G3b49@p G3b42@keys) (values (vector 'free-id G3b49@p) G3b4b@ids) (if (G2d6e@free-id=? G3b49@p (G2eef@scheme-stx '_)) (values '_ G3b4b@ids) (values 'any (cons (cons G3b49@p G3b4a@n) G3b4b@ids))))) G3b51@ls/false) ((lambda (G3b57@t) ((lambda (G3b59@ls/false) (if (and G3b59@ls/false (apply (lambda (G3b5b@p G3b5c@dots) (G2f67@ellipsis? G3b5c@dots)) G3b59@ls/false)) (apply (lambda (G3b5f@p G3b60@dots) (call-with-values (lambda () (G3b48@cvt G3b5f@p (+ G3b4a@n '1) G3b4b@ids)) (lambda (G3b65@G3b63 G3b66@G3b64) ((lambda (G3b69@ids G3b6a@p) (values (if (eq? G3b6a@p 'any) 'each-any (vector 'each G3b6a@p)) G3b69@ids)) G3b66@G3b64 G3b65@G3b63)))) G3b59@ls/false) ((lambda (G3b6d@t) ((lambda (G3b6f@ls/false) (if (and G3b6f@ls/false (apply (lambda (G3b71@x G3b72@dots G3b73@ys G3b74@z) (G2f67@ellipsis? G3b72@dots)) G3b6f@ls/false)) (apply (lambda (G3b79@x G3b7a@dots G3b7b@ys G3b7c@z) (call-with-values (lambda () (G3b48@cvt G3b7c@z G3b4a@n G3b4b@ids)) (lambda (G3b83@G3b81 G3b84@G3b82) ((lambda (G3b87@ids G3b88@z) (call-with-values (lambda () (G3b46@cvt* G3b7b@ys G3b4a@n G3b87@ids)) (lambda (G3b8d@G3b8b G3b8e@G3b8c) ((lambda (G3b91@ids G3b92@ys) (call-with-values (lambda () (G3b48@cvt G3b79@x (+ G3b4a@n '1) G3b91@ids)) (lambda (G3b97@G3b95 G3b98@G3b96) ((lambda (G3b9b@ids G3b9c@x) (values (vector 'each+ G3b9c@x (reverse G3b92@ys) G3b88@z) G3b9b@ids)) G3b98@G3b96 G3b97@G3b95)))) G3b8e@G3b8c G3b8d@G3b8b)))) G3b84@G3b82 G3b83@G3b81)))) G3b6f@ls/false) ((lambda (G3b9f@t) ((lambda (G3ba1@ls/false) (if G3ba1@ls/false (apply (lambda (G3ba3@x G3ba4@y) (call-with-values (lambda () (G3b48@cvt G3ba4@y G3b4a@n G3b4b@ids)) (lambda (G3ba9@G3ba7 G3baa@G3ba8) ((lambda (G3bad@ids G3bae@y) (call-with-values (lambda () (G3b48@cvt G3ba3@x G3b4a@n G3bad@ids)) (lambda (G3bb3@G3bb1 G3bb4@G3bb2) ((lambda (G3bb7@ids G3bb8@x) (values (cons G3bb8@x G3bae@y) G3bb7@ids)) G3bb4@G3bb2 G3bb3@G3bb1)))) G3baa@G3ba8 G3ba9@G3ba7)))) G3ba1@ls/false) ((lambda (G3bbb@t) ((lambda (G3bbd@ls/false) (if G3bbd@ls/false (apply (lambda () (values '() G3b4b@ids)) G3bbd@ls/false) ((lambda (G3bbf@t) ((lambda (G3bc1@ls/false) (if (and G3bc1@ls/false (apply (lambda (G3bc3@p) (not (G2d2e@stx? G3bc3@p))) G3bc1@ls/false)) (apply (lambda (G3bc5@p) (call-with-values (lambda () (G3b48@cvt G3bc5@p G3b4a@n G3b4b@ids)) (lambda (G3bc9@G3bc7 G3bca@G3bc8) ((lambda (G3bcd@ids G3bce@p) (values (vector 'vector G3bce@p) G3bcd@ids)) G3bca@G3bc8 G3bc9@G3bc7)))) G3bc1@ls/false) ((lambda (G3bd1@t) ((lambda (G3bd3@ls/false) (if G3bd3@ls/false (apply (lambda (G3bd5@datum) (values (vector 'atom (G2d7c@stx->datum G3bd5@datum)) G3b4b@ids)) G3bd3@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3bd1@t))) (G2f65@syntax-dispatch G3bd1@t 'any))) G3bbf@t))) (G2f65@syntax-dispatch G3bbf@t '#(vector each-any)))) G3bbb@t))) (G2f65@syntax-dispatch G3bbb@t '()))) G3b9f@t))) (G2f65@syntax-dispatch G3b9f@t '(any . any)))) G3b6d@t))) (G2f65@syntax-dispatch G3b6d@t '(any any . #(each+ any () any))))) G3b57@t))) (G2f65@syntax-dispatch G3b57@t '(any any)))) G3b4f@t))) (G2f65@syntax-dispatch G3b4f@t 'any))) G3b49@p))) (G3b48@cvt G3b41@pattern '0 '()))) '#f '#f))) (set! G2f65@syntax-dispatch ((lambda () ((lambda (G3bf2@stx^ G3bf4@match-each G3bf6@match-each+ G3bf8@match-each-any G3bfa@match-empty G3bfc@combine G3bfe@match* G3c00@match) (begin (set! G3bf2@stx^ (lambda (G3cbb@e G3cbc@m* G3cbd@s* G3cbe@ae*) (if (and (null? G3cbc@m*) (null? G3cbd@s*) (null? G3cbe@ae*)) G3cbb@e (G2d4e@mkstx G3cbb@e G3cbc@m* G3cbd@s* G3cbe@ae*)))) (set! G3bf4@match-each (lambda (G3c9e@e G3c9f@p G3ca0@m* G3ca1@s* G3ca2@ae*) (if (pair? G3c9e@e) ((lambda (G3ca8@first) (and G3ca8@first ((lambda (G3caa@rest) (and G3caa@rest (cons G3ca8@first G3caa@rest))) (G3bf4@match-each (cdr G3c9e@e) G3c9f@p G3ca0@m* G3ca1@s* G3ca2@ae*)))) (G3c00@match (car G3c9e@e) G3c9f@p G3ca0@m* G3ca1@s* G3ca2@ae* '())) (if (null? G3c9e@e) '() (if (G2d2e@stx? G3c9e@e) (and (not (G2ce0@top-marked? G3ca0@m*)) (call-with-values (lambda () (G2d4c@join-wraps G3ca0@m* G3ca1@s* G3ca2@ae* G3c9e@e)) (lambda (G3caf@G3cac G3cb0@G3cad G3cb1@G3cae) ((lambda (G3cb5@ae* G3cb6@s* G3cb7@m*) (G3bf4@match-each (G2d32@stx-expr G3c9e@e) G3c9f@p G3cb7@m* G3cb6@s* G3cb5@ae*)) G3cb1@G3cae G3cb0@G3cad G3caf@G3cac)))) (if (G28f7@G2825@annotation? G3c9e@e) (G3bf4@match-each (G28f9@G2829@annotation-expression G3c9e@e) G3c9f@p G3ca0@m* G3ca1@s* G3ca2@ae*) '#f)))))) (set! G3bf6@match-each+ (lambda (G3c64@e G3c65@x-pat G3c66@y-pat G3c67@z-pat G3c68@m* G3c69@s* G3c6a@ae* G3c6b@r) ((letrec ((G3c74@f (lambda (G3c76@e G3c77@m* G3c78@s* G3c79@ae*) (if (pair? G3c76@e) (call-with-values (lambda () (G3c74@f (cdr G3c76@e) G3c77@m* G3c78@s* G3c79@ae*)) (lambda (G3c81@G3c7e G3c82@G3c7f G3c83@G3c80) ((lambda (G3c87@r G3c88@y-pat G3c89@xr*) (if G3c87@r (if (null? G3c88@y-pat) ((lambda (G3c8d@xr) (if G3c8d@xr (values (cons G3c8d@xr G3c89@xr*) G3c88@y-pat G3c87@r) (values '#f '#f '#f))) (G3c00@match (car G3c76@e) G3c65@x-pat G3c77@m* G3c78@s* G3c79@ae* '())) (values '() (cdr G3c88@y-pat) (G3c00@match (car G3c76@e) (car G3c88@y-pat) G3c77@m* G3c78@s* G3c79@ae* G3c87@r))) (values '#f '#f '#f))) G3c83@G3c80 G3c82@G3c7f G3c81@G3c7e))) (if (G2d2e@stx? G3c76@e) (if (G2ce0@top-marked? G3c77@m*) (values '() G3c66@y-pat (G3c00@match G3c76@e G3c67@z-pat G3c77@m* G3c78@s* G3c79@ae* G3c6b@r)) (call-with-values (lambda () (G2d4c@join-wraps G3c77@m* G3c78@s* G3c79@ae* G3c76@e)) (lambda (G3c92@G3c8f G3c93@G3c90 G3c94@G3c91) ((lambda (G3c98@ae* G3c99@s* G3c9a@m*) (G3c74@f (G2d32@stx-expr G3c76@e) G3c9a@m* G3c99@s* G3c98@ae*)) G3c94@G3c91 G3c93@G3c90 G3c92@G3c8f)))) (if (G28f7@G2825@annotation? G3c76@e) (G3c74@f (G28f9@G2829@annotation-expression G3c76@e) G3c77@m* G3c78@s* G3c79@ae*) (values '() G3c66@y-pat (G3c00@match G3c76@e G3c67@z-pat G3c77@m* G3c78@s* G3c79@ae* G3c6b@r)))))))) G3c74@f) G3c64@e G3c68@m* G3c69@s* G3c6a@ae*))) (set! G3bf8@match-each-any (lambda (G3c4b@e G3c4c@m* G3c4d@s* G3c4e@ae*) (if (pair? G3c4b@e) ((lambda (G3c53@l) (and G3c53@l (cons (G3bf2@stx^ (car G3c4b@e) G3c4c@m* G3c4d@s* G3c4e@ae*) G3c53@l))) (G3bf8@match-each-any (cdr G3c4b@e) G3c4c@m* G3c4d@s* G3c4e@ae*)) (if (null? G3c4b@e) '() (if (G2d2e@stx? G3c4b@e) (and (not (G2ce0@top-marked? G3c4c@m*)) (call-with-values (lambda () (G2d4c@join-wraps G3c4c@m* G3c4d@s* G3c4e@ae* G3c4b@e)) (lambda (G3c58@G3c55 G3c59@G3c56 G3c5a@G3c57) ((lambda (G3c5e@ae* G3c5f@s* G3c60@m*) (G3bf8@match-each-any (G2d32@stx-expr G3c4b@e) G3c60@m* G3c5f@s* G3c5e@ae*)) G3c5a@G3c57 G3c59@G3c56 G3c58@G3c55)))) (if (G28f7@G2825@annotation? G3c4b@e) (G3bf8@match-each-any (G28f9@G2829@annotation-expression G3c4b@e) G3c4c@m* G3c4d@s* G3c4e@ae*) '#f)))))) (set! G3bfa@match-empty (lambda (G3c45@p G3c46@r) (if (null? G3c45@p) G3c46@r (if (eq? G3c45@p '_) G3c46@r (if (eq? G3c45@p 'any) (cons '() G3c46@r) (if (pair? G3c45@p) (G3bfa@match-empty (car G3c45@p) (G3bfa@match-empty (cdr G3c45@p) G3c46@r)) (if (eq? G3c45@p 'each-any) (cons '() G3c46@r) ((lambda (G3c49@t) (if (memv G3c49@t '(each)) (G3bfa@match-empty (vector-ref G3c45@p '1) G3c46@r) (if (memv G3c49@t '(each+)) (G3bfa@match-empty (vector-ref G3c45@p '1) (G3bfa@match-empty (reverse (vector-ref G3c45@p '2)) (G3bfa@match-empty (vector-ref G3c45@p '3) G3c46@r))) (if (memv G3c49@t '(free-id atom)) G3c46@r (if (memv G3c49@t '(scheme-id atom)) G3c46@r (if (memv G3c49@t '(vector)) (G3bfa@match-empty (vector-ref G3c45@p '1) G3c46@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c45@p))))))) (vector-ref G3c45@p '0))))))))) (set! G3bfc@combine (lambda (G3c41@r* G3c42@r) (if (null? (car G3c41@r*)) G3c42@r (cons (map car G3c41@r*) (G3bfc@combine (map cdr G3c41@r*) G3c42@r))))) (set! G3bfe@match* (lambda (G3c20@e G3c21@p G3c22@m* G3c23@s* G3c24@ae* G3c25@r) (if (null? G3c21@p) (and (null? G3c20@e) G3c25@r) (if (pair? G3c21@p) (and (pair? G3c20@e) (G3c00@match (car G3c20@e) (car G3c21@p) G3c22@m* G3c23@s* G3c24@ae* (G3c00@match (cdr G3c20@e) (cdr G3c21@p) G3c22@m* G3c23@s* G3c24@ae* G3c25@r))) (if (eq? G3c21@p 'each-any) ((lambda (G3c2c@l) (and G3c2c@l (cons G3c2c@l G3c25@r))) (G3bf8@match-each-any G3c20@e G3c22@m* G3c23@s* G3c24@ae*)) ((lambda (G3c2e@t) (if (memv G3c2e@t '(each)) (if (null? G3c20@e) (G3bfa@match-empty (vector-ref G3c21@p '1) G3c25@r) ((lambda (G3c30@r*) (and G3c30@r* (G3bfc@combine G3c30@r* G3c25@r))) (G3bf4@match-each G3c20@e (vector-ref G3c21@p '1) G3c22@m* G3c23@s* G3c24@ae*))) (if (memv G3c2e@t '(free-id)) (and (symbol? G3c20@e) (G2ce0@top-marked? G3c22@m*) (G2d6e@free-id=? (G3bf2@stx^ G3c20@e G3c22@m* G3c23@s* G3c24@ae*) (vector-ref G3c21@p '1)) G3c25@r) (if (memv G3c2e@t '(scheme-id)) (and (symbol? G3c20@e) (G2ce0@top-marked? G3c22@m*) (G2d6e@free-id=? (G3bf2@stx^ G3c20@e G3c22@m* G3c23@s* G3c24@ae*) (G2eef@scheme-stx (vector-ref G3c21@p '1))) G3c25@r) (if (memv G3c2e@t '(each+)) (call-with-values (lambda () (G3bf6@match-each+ G3c20@e (vector-ref G3c21@p '1) (vector-ref G3c21@p '2) (vector-ref G3c21@p '3) G3c22@m* G3c23@s* G3c24@ae* G3c25@r)) (lambda (G3c35@G3c32 G3c36@G3c33 G3c37@G3c34) ((lambda (G3c3b@r G3c3c@y-pat G3c3d@xr*) (and G3c3b@r (null? G3c3c@y-pat) (if (null? G3c3d@xr*) (G3bfa@match-empty (vector-ref G3c21@p '1) G3c3b@r) (G3bfc@combine G3c3d@xr* G3c3b@r)))) G3c37@G3c34 G3c36@G3c33 G3c35@G3c32))) (if (memv G3c2e@t '(atom)) (and (equal? (vector-ref G3c21@p '1) (G2d7a@strip G3c20@e G3c22@m*)) G3c25@r) (if (memv G3c2e@t '(vector)) (and (vector? G3c20@e) (G3c00@match (vector->list G3c20@e) (vector-ref G3c21@p '1) G3c22@m* G3c23@s* G3c24@ae* G3c25@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c21@p)))))))) (vector-ref G3c21@p '0))))))) (set! G3c00@match (lambda (G3c05@e G3c06@p G3c07@m* G3c08@s* G3c09@ae* G3c0a@r) (if (not G3c0a@r) '#f (if (eq? G3c06@p '_) G3c0a@r (if (eq? G3c06@p 'any) (cons (G3bf2@stx^ G3c05@e G3c07@m* G3c08@s* G3c09@ae*) G3c0a@r) (if (G2d2e@stx? G3c05@e) (and (not (G2ce0@top-marked? G3c07@m*)) (call-with-values (lambda () (G2d4c@join-wraps G3c07@m* G3c08@s* G3c09@ae* G3c05@e)) (lambda (G3c14@G3c11 G3c15@G3c12 G3c16@G3c13) ((lambda (G3c1a@ae* G3c1b@s* G3c1c@m*) (G3c00@match (G2d32@stx-expr G3c05@e) G3c06@p G3c1c@m* G3c1b@s* G3c1a@ae* G3c0a@r)) G3c16@G3c13 G3c15@G3c12 G3c14@G3c11)))) (if (G28f7@G2825@annotation? G3c05@e) (G3c00@match (G28f9@G2829@annotation-expression G3c05@e) G3c06@p G3c07@m* G3c08@s* G3c09@ae* G3c0a@r) (G3bfe@match* G3c05@e G3c06@p G3c07@m* G3c08@s* G3c09@ae* G3c0a@r)))))))) (lambda (G3c01@e G3c02@p) (G3c00@match G3c01@e G3c02@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f67@ellipsis? (lambda (G3cc3@x) (and (G2d66@id? G3cc3@x) (G2d6e@free-id=? G3cc3@x (G2eef@scheme-stx '...))))) (set! G2f69@underscore? (lambda (G3cc5@x) (and (G2d66@id? G3cc5@x) (G2d6e@free-id=? G3cc5@x (G2eef@scheme-stx '_))))) (set! G2f6b@verify-literals (lambda (G3cc7@lits G3cc8@expr) (for-each (lambda (G3ccb@x) (if (or (not (G2d66@id? G3ccb@x)) (G2f67@ellipsis? G3ccb@x) (G2f69@underscore? G3ccb@x)) (G3052@syntax-violation '#f '"invalid literal" G3cc8@expr G3ccb@x) (void))) G3cc7@lits))) (set! G2f6d@syntax-case-transformer ((lambda () ((lambda (G3cce@build-dispatch-call G3cd0@invalid-ids-error G3cd2@gen-clause G3cd4@gen-syntax-case) (begin (set! G3cce@build-dispatch-call (lambda (G3d3d@pvars G3d3e@expr G3d3f@y G3d40@r G3d41@mr) ((lambda (G3d47@ids G3d48@levels) ((lambda (G3d4b@labels G3d4c@new-vars) ((lambda (G3d4f@body) (list '(primitive apply) (G2cc0@G2bfe@build-lambda '#f G3d4c@new-vars G3d4f@body) G3d3f@y)) (G2f89@chi-expr (G2d52@add-subst (G2d21@make-full-rib G3d47@ids G3d4b@labels) G3d3e@expr) (append (map (lambda (G3d51@label G3d52@var G3d53@level) (cons G3d51@label (G2d86@make-binding 'syntax (cons G3d52@var G3d53@level)))) G3d4b@labels G3d4c@new-vars (map cdr G3d3d@pvars)) G3d40@r) G3d41@mr))) (map G2ce6@gen-label G3d47@ids) (map G2ce2@gen-lexical G3d47@ids))) (map car G3d3d@pvars) (map cdr G3d3d@pvars)))) (set! G3cd0@invalid-ids-error (lambda (G3d31@id* G3d32@e G3d33@class) ((letrec ((G3d37@find (lambda (G3d39@id* G3d3a@ok*) (if (null? G3d39@id*) (G3052@syntax-violation '#f '"invalid syntax" G3d32@e) (if (G2d66@id? (car G3d39@id*)) (if (G2d74@bound-id-member? (car G3d39@id*) G3d3a@ok*) (G304c@syntax-error (car G3d39@id*) '"duplicate " G3d33@class) (G3d37@find (cdr G3d39@id*) (cons (car G3d39@id*) G3d3a@ok*))) (G304c@syntax-error (car G3d39@id*) '"invalid " G3d33@class)))))) G3d37@find) G3d31@id* '()))) (set! G3cd2@gen-clause (lambda (G3d0b@x G3d0c@keys G3d0d@clauses G3d0e@r G3d0f@mr G3d10@pat G3d11@fender G3d12@expr) (call-with-values (lambda () (G2f63@convert-pattern G3d10@pat G3d0c@keys)) (lambda (G3d1d@G3d1b G3d1e@G3d1c) ((lambda (G3d21@pvars G3d22@p) (if (not (G2d72@distinct-bound-ids? (map car G3d21@pvars))) (G3cd0@invalid-ids-error (map car G3d21@pvars) G3d10@pat '"pattern variable") (if (not (for-all (lambda (G3d25@x) (not (G2f67@ellipsis? (car G3d25@x)))) G3d21@pvars)) (G3052@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d10@pat) ((lambda (G3d27@y) ((lambda (G3d29@test) ((lambda (G3d2b@conseq) ((lambda (G3d2d@altern) (list (G2cc0@G2bfe@build-lambda '#f (list G3d27@y) (list 'if G3d29@test G3d2b@conseq G3d2d@altern)) (list '(primitive syntax-dispatch) G3d0b@x (list 'quote G3d22@p)))) (G3cd4@gen-syntax-case G3d0b@x G3d0c@keys G3d0d@clauses G3d0e@r G3d0f@mr))) (G3cce@build-dispatch-call G3d21@pvars G3d12@expr G3d27@y G3d0e@r G3d0f@mr))) (if (eq? G3d11@fender '#t) G3d27@y ((lambda (G3d2f@call) (list 'if G3d27@y G3d2f@call (list 'quote '#f))) (G3cce@build-dispatch-call G3d21@pvars G3d11@fender G3d27@y G3d0e@r G3d0f@mr))))) (G2ce2@gen-lexical 'tmp))))) G3d1e@G3d1c G3d1d@G3d1b))))) (set! G3cd4@gen-syntax-case (lambda (G3ce9@x G3cea@keys G3ceb@clauses G3cec@r G3ced@mr) (if (null? G3ceb@clauses) (list '(primitive syntax-error) G3ce9@x) ((lambda (G3cf3@t) ((lambda (G3cf5@ls/false) (if G3cf5@ls/false (apply (lambda (G3cf7@pat G3cf8@expr) (if (and (G2d66@id? G3cf7@pat) (not (G2d74@bound-id-member? G3cf7@pat G3cea@keys)) (not (G2f67@ellipsis? G3cf7@pat))) (if (G2d6e@free-id=? G3cf7@pat (G2eef@scheme-stx '_)) (G2f89@chi-expr G3cf8@expr G3cec@r G3ced@mr) ((lambda (G3cfb@lab G3cfc@lex) ((lambda (G3cff@body) (list (G2cc0@G2bfe@build-lambda '#f (list G3cfc@lex) G3cff@body) G3ce9@x)) (G2f89@chi-expr (G2d52@add-subst (G2d21@make-full-rib (list G3cf7@pat) (list G3cfb@lab)) G3cf8@expr) (cons (cons G3cfb@lab (G2d86@make-binding 'syntax (cons G3cfc@lex '0))) G3cec@r) G3ced@mr))) (G2ce6@gen-label G3cf7@pat) (G2ce2@gen-lexical G3cf7@pat))) (G3cd2@gen-clause G3ce9@x G3cea@keys (cdr G3ceb@clauses) G3cec@r G3ced@mr G3cf7@pat '#t G3cf8@expr))) G3cf5@ls/false) ((lambda (G3d01@t) ((lambda (G3d03@ls/false) (if G3d03@ls/false (apply (lambda (G3d05@pat G3d06@fender G3d07@expr) (G3cd2@gen-clause G3ce9@x G3cea@keys (cdr G3ceb@clauses) G3cec@r G3ced@mr G3d05@pat G3d06@fender G3d07@expr)) G3d03@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3d01@t))) (G2f65@syntax-dispatch G3d01@t '(any any any)))) G3cf3@t))) (G2f65@syntax-dispatch G3cf3@t '(any any)))) (car G3ceb@clauses))))) (lambda (G3cd5@e G3cd6@r G3cd7@mr) ((lambda (G3cdb@t) ((lambda (G3cdd@ls/false) (if G3cdd@ls/false (apply (lambda (G3cdf@expr G3ce0@keys G3ce1@clauses) (begin (G2f6b@verify-literals G3ce0@keys G3cd5@e) ((lambda (G3ce5@x) ((lambda (G3ce7@body) (list (G2cc0@G2bfe@build-lambda '#f (list G3ce5@x) G3ce7@body) (G2f89@chi-expr G3cdf@expr G3cd6@r G3cd7@mr))) (G3cd4@gen-syntax-case G3ce5@x G3ce0@keys G3ce1@clauses G3cd6@r G3cd7@mr))) (G2ce2@gen-lexical 'tmp)))) G3cdd@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3cdb@t))) (G2f65@syntax-dispatch G3cdb@t '(_ any each-any . each-any)))) G3cd5@e)))) '#f '#f '#f '#f)))) (set! G2f6f@ellipsis-map (lambda (G3d57@proc G3d58@ls . G3d5b@ls*) ((lambda (G3d5e@who) (begin (set! G3d5e@who '...) (begin (if (not (list? G3d58@ls)) (assertion-violation G3d5e@who '"not a list" G3d58@ls) (void)) (if (not (null? G3d5b@ls*)) ((lambda (G3d5f@n) (for-each (lambda (G3d61@x) (begin (if (not (list? G3d61@x)) (assertion-violation G3d5e@who '"not a list" G3d61@x) (void)) (if (not (= (length G3d61@x) G3d5f@n)) (assertion-violation G3d5e@who '"length mismatch" G3d58@ls G3d61@x) (void)))) G3d5b@ls*)) (length G3d58@ls)) (void)) (apply map G3d57@proc G3d58@ls G3d5b@ls*)))) '#f))) (set! G2f71@syntax-transformer ((lambda () ((lambda (G3d64@gen-syntax G3d66@gen-ref G3d68@gen-append G3d6a@gen-mappend G3d6c@gen-map G3d6e@gen-cons G3d70@gen-vector G3d72@regen) (begin (set! G3d64@gen-syntax (lambda (G3dd7@src G3dd8@e G3dd9@r G3dda@maps G3ddb@ellipsis? G3ddc@vec?) ((lambda (G3de3@t) ((lambda (G3de5@ls/false) (if (and G3de5@ls/false (apply (lambda (G3de7@dots) (G3ddb@ellipsis? G3de7@dots)) G3de5@ls/false)) (apply (lambda (G3de9@dots) (G3052@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd7@src)) G3de5@ls/false) ((lambda (G3deb@t) ((lambda (G3ded@ls/false) (if (and G3ded@ls/false (apply (lambda (G3def@id) (G2d66@id? G3def@id)) G3ded@ls/false)) (apply (lambda (G3df1@id) ((lambda (G3df3@label) ((lambda (G3df5@b) ((lambda () (if (eq? (G2d88@binding-type G3df5@b) 'syntax) (call-with-values (lambda () ((lambda (G3df9@var.lev) (G3d66@gen-ref G3dd7@src (car G3df9@var.lev) (cdr G3df9@var.lev) G3dda@maps)) (G2d8a@binding-value G3df5@b))) (lambda (G3dfb@G3df7 G3dfc@G3df8) ((lambda (G3dff@maps G3e00@var) (values (list 'ref G3e00@var) G3dff@maps)) G3dfc@G3df8 G3dfb@G3df7))) (values (list 'quote G3dd8@e) G3dda@maps))))) (G2d84@label->binding G3df3@label G3dd9@r))) (G2d80@id->label G3dd8@e))) G3ded@ls/false) ((lambda (G3e03@t) ((lambda (G3e05@ls/false) (if (and G3e05@ls/false (apply (lambda (G3e07@dots G3e08@e) (G3ddb@ellipsis? G3e07@dots)) G3e05@ls/false)) (apply (lambda (G3e0b@dots G3e0c@e) (if G3ddc@vec? (G3052@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd7@src) (G3d64@gen-syntax G3dd7@src G3e0c@e G3dd9@r G3dda@maps (lambda (G3e0f@x) '#f) '#f))) G3e05@ls/false) ((lambda (G3e11@t) ((lambda (G3e13@ls/false) (if (and G3e13@ls/false (apply (lambda (G3e15@x G3e16@dots G3e17@y) (G3ddb@ellipsis? G3e16@dots)) G3e13@ls/false)) (apply (lambda (G3e1b@x G3e1c@dots G3e1d@y) ((letrec ((G3e21@f (lambda (G3e23@y G3e24@k) ((lambda (G3e27@t) ((lambda (G3e29@ls/false) (if G3e29@ls/false (apply (lambda () (G3e24@k G3dda@maps)) G3e29@ls/false) ((lambda (G3e2b@t) ((lambda (G3e2d@ls/false) (if (and G3e2d@ls/false (apply (lambda (G3e2f@dots G3e30@y) (G3ddb@ellipsis? G3e2f@dots)) G3e2d@ls/false)) (apply (lambda (G3e33@dots G3e34@y) (G3e21@f G3e34@y (lambda (G3e37@maps) (call-with-values (lambda () (G3e24@k (cons '() G3e37@maps))) (lambda (G3e3b@G3e39 G3e3c@G3e3a) ((lambda (G3e3f@maps G3e40@x) (if (null? (car G3e3f@maps)) (G3052@syntax-violation '#f '"extra ellipsis in syntax form" G3dd7@src) (values (G3d6a@gen-mappend G3e40@x (car G3e3f@maps)) (cdr G3e3f@maps)))) G3e3c@G3e3a G3e3b@G3e39)))))) G3e2d@ls/false) ((lambda (G3e43@t) ((lambda (G3e45@ls/false) (if G3e45@ls/false (apply (lambda () (call-with-values (lambda () (G3d64@gen-syntax G3dd7@src G3e23@y G3dd9@r G3dda@maps G3ddb@ellipsis? G3ddc@vec?)) (lambda (G3e49@G3e47 G3e4a@G3e48) ((lambda (G3e4d@maps G3e4e@y) (call-with-values (lambda () (G3e24@k G3e4d@maps)) (lambda (G3e53@G3e51 G3e54@G3e52) ((lambda (G3e57@maps G3e58@x) (values (G3d68@gen-append G3e58@x G3e4e@y) G3e57@maps)) G3e54@G3e52 G3e53@G3e51)))) G3e4a@G3e48 G3e49@G3e47)))) G3e45@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3e43@t))) (G2f65@syntax-dispatch G3e43@t '_))) G3e2b@t))) (G2f65@syntax-dispatch G3e2b@t '(any . any)))) G3e27@t))) (G2f65@syntax-dispatch G3e27@t '()))) G3e23@y)))) G3e21@f) G3e1d@y (lambda (G3e5b@maps) (call-with-values (lambda () (G3d64@gen-syntax G3dd7@src G3e1b@x G3dd9@r (cons '() G3e5b@maps) G3ddb@ellipsis? '#f)) (lambda (G3e5f@G3e5d G3e60@G3e5e) ((lambda (G3e63@maps G3e64@x) (if (null? (car G3e63@maps)) (G3052@syntax-violation '#f '"extra ellipsis in syntax form" G3dd7@src) (values (G3d6c@gen-map G3e64@x (car G3e63@maps)) (cdr G3e63@maps)))) G3e60@G3e5e G3e5f@G3e5d)))))) G3e13@ls/false) ((lambda (G3e67@t) ((lambda (G3e69@ls/false) (if G3e69@ls/false (apply (lambda (G3e6b@x G3e6c@y) (call-with-values (lambda () (G3d64@gen-syntax G3dd7@src G3e6b@x G3dd9@r G3dda@maps G3ddb@ellipsis? '#f)) (lambda (G3e71@G3e6f G3e72@G3e70) ((lambda (G3e75@maps G3e76@xnew) (call-with-values (lambda () (G3d64@gen-syntax G3dd7@src G3e6c@y G3dd9@r G3e75@maps G3ddb@ellipsis? G3ddc@vec?)) (lambda (G3e7b@G3e79 G3e7c@G3e7a) ((lambda (G3e7f@maps G3e80@ynew) (values (G3d6e@gen-cons G3dd8@e G3e6b@x G3e6c@y G3e76@xnew G3e80@ynew) G3e7f@maps)) G3e7c@G3e7a G3e7b@G3e79)))) G3e72@G3e70 G3e71@G3e6f)))) G3e69@ls/false) ((lambda (G3e83@t) ((lambda (G3e85@ls/false) (if G3e85@ls/false (apply (lambda (G3e87@ls) (call-with-values (lambda () (G3d64@gen-syntax G3dd7@src G3e87@ls G3dd9@r G3dda@maps G3ddb@ellipsis? '#t)) (lambda (G3e8b@G3e89 G3e8c@G3e8a) ((lambda (G3e8f@maps G3e90@lsnew) (values (G3d70@gen-vector G3dd8@e G3e87@ls G3e90@lsnew) G3e8f@maps)) G3e8c@G3e8a G3e8b@G3e89)))) G3e85@ls/false) ((lambda (G3e93@t) ((lambda (G3e95@ls/false) (if G3e95@ls/false (apply (lambda () (values (list 'quote G3dd8@e) G3dda@maps)) G3e95@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3e93@t))) (G2f65@syntax-dispatch G3e93@t '_))) G3e83@t))) (G2f65@syntax-dispatch G3e83@t '#(vector each-any)))) G3e67@t))) (G2f65@syntax-dispatch G3e67@t '(any . any)))) G3e11@t))) (G2f65@syntax-dispatch G3e11@t '(any any . any)))) G3e03@t))) (G2f65@syntax-dispatch G3e03@t '(any any)))) G3deb@t))) (G2f65@syntax-dispatch G3deb@t 'any))) G3de3@t))) (G2f65@syntax-dispatch G3de3@t 'any))) G3dd8@e))) (set! G3d66@gen-ref (lambda (G3dbf@src G3dc0@var G3dc1@level G3dc2@maps) (if (= G3dc1@level '0) (values G3dc0@var G3dc2@maps) (if (null? G3dc2@maps) (G3052@syntax-violation '#f '"missing ellipsis in syntax form" G3dbf@src) (call-with-values (lambda () (G3d66@gen-ref G3dbf@src G3dc0@var (- G3dc1@level '1) (cdr G3dc2@maps))) (lambda (G3dc9@G3dc7 G3dca@G3dc8) ((lambda (G3dcd@outer-maps G3dce@outer-var) ((lambda (G3dd1@t) (if G3dd1@t ((lambda (G3dd3@b) (values (cdr G3dd3@b) G3dc2@maps)) G3dd1@t) ((lambda (G3dd5@inner-var) (values G3dd5@inner-var (cons (cons (cons G3dce@outer-var G3dd5@inner-var) (car G3dc2@maps)) G3dcd@outer-maps))) (G2ce2@gen-lexical 'tmp)))) (assq G3dce@outer-var (car G3dc2@maps)))) G3dca@G3dc8 G3dc9@G3dc7))))))) (set! G3d68@gen-append (lambda (G3dbb@x G3dbc@y) (if (equal? G3dbc@y ''()) G3dbb@x (list 'append G3dbb@x G3dbc@y)))) (set! G3d6a@gen-mappend (lambda (G3db7@e G3db8@map-env) (list 'apply '(primitive append) (G3d6c@gen-map G3db7@e G3db8@map-env)))) (set! G3d6c@gen-map (lambda (G3da5@e G3da6@map-env) ((lambda (G3da9@formals G3daa@actuals) (if (eq? (car G3da5@e) 'ref) (car G3daa@actuals) (if (for-all (lambda (G3dad@x) (and (eq? (car G3dad@x) 'ref) (memq (cadr G3dad@x) G3da9@formals))) (cdr G3da5@e)) ((lambda (G3daf@args) (cons 'map (cons (list 'primitive (car G3da5@e)) G3daf@args))) (map ((lambda (G3db1@r) (lambda (G3db3@x) (cdr (assq (cadr G3db3@x) G3db1@r)))) (map cons G3da9@formals G3daa@actuals)) (cdr G3da5@e))) (cons* 'map (list 'lambda G3da9@formals G3da5@e) G3daa@actuals)))) (map cdr G3da6@map-env) (map (lambda (G3db5@x) (list 'ref (car G3db5@x))) G3da6@map-env)))) (set! G3d6e@gen-cons (lambda (G3d95@e G3d96@x G3d97@y G3d98@xnew G3d99@ynew) ((lambda (G3d9f@t) (if (memv G3d9f@t '(quote)) (if (eq? (car G3d98@xnew) 'quote) ((lambda (G3da1@xnew G3da2@ynew) (if (and (eq? G3da1@xnew G3d96@x) (eq? G3da2@ynew G3d97@y)) (list 'quote G3d95@e) (list 'quote (cons G3da1@xnew G3da2@ynew)))) (cadr G3d98@xnew) (cadr G3d99@ynew)) (if (null? (cadr G3d99@ynew)) (list 'list G3d98@xnew) (list 'cons G3d98@xnew G3d99@ynew))) (if (memv G3d9f@t '(list)) (cons 'list (cons G3d98@xnew (cdr G3d99@ynew))) (list 'cons G3d98@xnew G3d99@ynew)))) (car G3d99@ynew)))) (set! G3d70@gen-vector (lambda (G3d8f@e G3d90@ls G3d91@lsnew) (if (eq? (car G3d91@lsnew) 'quote) (if (eq? (cadr G3d91@lsnew) G3d90@ls) (list 'quote G3d8f@e) (list 'quote (list->vector (cadr G3d91@lsnew)))) (if (eq? (car G3d91@lsnew) 'list) (cons 'vector (cdr G3d91@lsnew)) (list 'list->vector G3d91@lsnew))))) (set! G3d72@regen (lambda (G3d89@x) ((lambda (G3d8b@t) (if (memv G3d8b@t '(ref)) (cadr G3d89@x) (if (memv G3d8b@t '(primitive)) (list 'primitive (cadr G3d89@x)) (if (memv G3d8b@t '(quote)) (list 'quote (cadr G3d89@x)) (if (memv G3d8b@t '(lambda)) (G2cc0@G2bfe@build-lambda '#f (cadr G3d89@x) (G3d72@regen (caddr G3d89@x))) (if (memv G3d8b@t '(map)) ((lambda (G3d8d@ls) (cons '(primitive ellipsis-map) G3d8d@ls)) (map G3d72@regen (cdr G3d89@x))) (cons (list 'primitive (car G3d89@x)) (map G3d72@regen (cdr G3d89@x))))))))) (car G3d89@x)))) (lambda (G3d73@e G3d74@r G3d75@mr) ((lambda (G3d79@t) ((lambda (G3d7b@ls/false) (if G3d7b@ls/false (apply (lambda (G3d7d@x) (call-with-values (lambda () (G3d64@gen-syntax G3d73@e G3d7d@x G3d74@r '() G2f67@ellipsis? '#f)) (lambda (G3d81@G3d7f G3d82@G3d80) ((lambda (G3d85@maps G3d86@e) (G3d72@regen G3d86@e)) G3d82@G3d80 G3d81@G3d7f)))) G3d7b@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3d79@t))) (G2f65@syntax-dispatch G3d79@t '(_ any)))) G3d73@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f73@core-macro-transformer (lambda (G3e97@name) ((lambda (G3e99@t) (if (memv G3e99@t '(quote)) G2f15@quote-transformer (if (memv G3e99@t '(lambda)) G2f19@lambda-transformer (if (memv G3e99@t '(case-lambda)) G2f17@case-lambda-transformer (if (memv G3e99@t '(letrec)) G2efd@letrec-transformer (if (memv G3e99@t '(letrec*)) G2eff@letrec*-transformer (if (memv G3e99@t '(if)) G2f0d@if-transformer (if (memv G3e99@t '(and)) G2f0f@and-transformer (if (memv G3e99@t '(or)) G2f11@or-transformer (if (memv G3e99@t '(foreign-call)) G2f61@foreign-call-transformer (if (memv G3e99@t '(syntax-case)) G2f6d@syntax-case-transformer (if (memv G3e99@t '(syntax)) G2f71@syntax-transformer (if (memv G3e99@t '(type-descriptor)) G2f03@type-descriptor-transformer (if (memv G3e99@t '(record-type-descriptor)) G2f05@record-type-descriptor-transformer (if (memv G3e99@t '(record-constructor-descriptor)) G2f07@record-constructor-descriptor-transformer (if (memv G3e99@t '(fluid-let-syntax)) G2f01@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e97@name))))))))))))))))) G3e97@name))) (set! G2f75@file-options-macro (lambda (G3e9b@x) ((lambda (G3e9e@valid-option?) (begin (set! G3e9e@valid-option? (lambda (G3ea7@x) (and (G2d66@id? G3ea7@x) (memq (G2d68@id->sym G3ea7@x) '(no-fail no-create no-truncate))))) ((lambda (G3e9f@t) ((lambda (G3ea1@ls/false) (if (and G3ea1@ls/false (apply (lambda (G3ea3@opt*) (and (for-all G3e9e@valid-option? G3ea3@opt*) (G2903@G28a7@file-options-spec (map G2d68@id->sym G3ea3@opt*)))) G3ea1@ls/false)) (apply (lambda (G3ea5@opt*) (G2f1b@bless (list 'quote (G2903@G28a7@file-options-spec (map G2d68@id->sym G3ea5@opt*))))) G3ea1@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3e9f@t))) (G2f65@syntax-dispatch G3e9f@t '(_ . each-any)))) G3e9b@x))) '#f))) (set! G2f77@symbol-macro (lambda (G3ea9@x G3eaa@set) ((lambda (G3ead@t) ((lambda (G3eaf@ls/false) (if (and G3eaf@ls/false (apply (lambda (G3eb1@name) (and (G2d66@id? G3eb1@name) (memq (G2d68@id->sym G3eb1@name) G3eaa@set))) G3eaf@ls/false)) (apply (lambda (G3eb3@name) (G2f1b@bless (list 'quote G3eb3@name))) G3eaf@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3ead@t))) (G2f65@syntax-dispatch G3ead@t '(_ any)))) G3ea9@x))) (set! G2f79@macro-transformer (lambda (G3eb5@x) (if (procedure? G3eb5@x) G3eb5@x (if (symbol? G3eb5@x) ((lambda (G3eb7@t) (if (memv G3eb7@t '(define-record-type)) G2f59@define-record-type-macro (if (memv G3eb7@t '(define-struct)) G2f57@define-struct-macro (if (memv G3eb7@t '(include)) G2f4d@include-macro (if (memv G3eb7@t '(cond)) G2f49@cond-macro (if (memv G3eb7@t '(let)) G2f21@let-macro (if (memv G3eb7@t '(do)) G2f41@do-macro (if (memv G3eb7@t '(or)) G2f45@or-macro (if (memv G3eb7@t '(and)) G2f47@and-macro (if (memv G3eb7@t '(let*)) G2f43@let*-macro (if (memv G3eb7@t '(let-values)) G2f23@let-values-macro (if (memv G3eb7@t '(let*-values)) G2f25@let*-values-macro (if (memv G3eb7@t '(syntax-rules)) G2f51@syntax-rules-macro (if (memv G3eb7@t '(quasiquote)) G2f53@quasiquote-macro (if (memv G3eb7@t '(quasisyntax)) G2f55@quasisyntax-macro (if (memv G3eb7@t '(with-syntax)) G2f1d@with-syntax-macro (if (memv G3eb7@t '(when)) G2f09@when-macro (if (memv G3eb7@t '(unless)) G2f0b@unless-macro (if (memv G3eb7@t '(case)) G2f13@case-macro (if (memv G3eb7@t '(identifier-syntax)) G2f3f@identifier-syntax-macro (if (memv G3eb7@t '(time)) G2f37@time-macro (if (memv G3eb7@t '(delay)) G2f39@delay-macro (if (memv G3eb7@t '(assert)) G2f3b@assert-macro (if (memv G3eb7@t '(endianness)) G2f3d@endianness-macro (if (memv G3eb7@t '(guard)) G2f33@guard-macro (if (memv G3eb7@t '(define-enumeration)) G2f35@define-enumeration-macro (if (memv G3eb7@t '(trace-lambda)) G2f27@trace-lambda-macro (if (memv G3eb7@t '(trace-define)) G2f29@trace-define-macro (if (memv G3eb7@t '(trace-define-syntax)) G2f2b@trace-define-syntax-macro (if (memv G3eb7@t '(trace-let-syntax)) G2f2f@trace-let-syntax-macro (if (memv G3eb7@t '(trace-letrec-syntax)) G2f31@trace-letrec-syntax-macro (if (memv G3eb7@t '(define-condition-type)) G2f5b@define-condition-type-macro (if (memv G3eb7@t '(parameterize)) G2f5f@parameterize-macro (if (memv G3eb7@t '(include-into)) G2f4f@include-into-macro (if (memv G3eb7@t '(eol-style)) (lambda (G3eb9@x) (G2f77@symbol-macro G3eb9@x '(none lf cr crlf nel crnel ls))) (if (memv G3eb7@t '(error-handling-mode)) (lambda (G3ebb@x) (G2f77@symbol-macro G3ebb@x '(ignore raise replace))) (if (memv G3eb7@t '(buffer-mode)) (lambda (G3ebd@x) (G2f77@symbol-macro G3ebd@x '(none line block))) (if (memv G3eb7@t '(file-options)) G2f75@file-options-macro (if (memv G3eb7@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f5d@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3eb5@x)))))))))))))))))))))))))))))))))))))))) G3eb5@x) (error 'core-macro-transformer '"BUG: invalid macro" G3eb5@x))))) (set! G2f7b@local-macro-transformer (lambda (G3ebf@x) (car G3ebf@x))) (set! G2f7d@do-macro-call (lambda (G3ec1@transformer G3ec2@expr) ((lambda (G3ec5@out) (begin ((letrec ((G3ec7@f (lambda (G3ec9@x) (if (not (G2d2e@stx? G3ec9@x)) (if (pair? G3ec9@x) (begin (G3ec7@f (car G3ec9@x)) (G3ec7@f (cdr G3ec9@x))) (if (vector? G3ec9@x) (vector-for-each G3ec7@f G3ec9@x) (if (symbol? G3ec9@x) (G3052@syntax-violation '#f '"raw symbol encountered in output of macro" G3ec2@expr G3ec9@x) (void)))) (void))))) G3ec7@f) G3ec5@out) (G2d50@add-mark (G2d46@gen-mark) G3ec5@out G3ec2@expr))) (G3ec1@transformer (G2d50@add-mark G2d48@anti-mark G3ec2@expr '#f))))) (set! G2f7f@chi-macro (lambda (G3ecb@p G3ecc@e) (G2f7d@do-macro-call (G2f79@macro-transformer G3ecb@p) G3ecc@e))) (set! G2f81@chi-local-macro (lambda (G3ecf@p G3ed0@e) (G2f7d@do-macro-call (G2f7b@local-macro-transformer G3ecf@p) G3ed0@e))) (set! G2f83@chi-global-macro (lambda (G3ed3@p G3ed4@e) ((lambda (G3ed7@lib G3ed8@loc) (begin (G2b7e@G2a26@visit-library G3ed7@lib) ((lambda (G3edb@x) ((lambda (G3edd@transformer) (G2f7d@do-macro-call G3edd@transformer G3ed4@e)) (if (procedure? G3edb@x) G3edb@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3edb@x)))) (symbol-value G3ed8@loc)))) (car G3ed3@p) (cdr G3ed3@p)))) (set! G2f85@chi-expr* (lambda (G3edf@e* G3ee0@r G3ee1@mr) (if (null? G3edf@e*) '() ((lambda (G3ee5@e) (cons G3ee5@e (G2f85@chi-expr* (cdr G3edf@e*) G3ee0@r G3ee1@mr))) (G2f89@chi-expr (car G3edf@e*) G3ee0@r G3ee1@mr))))) (set! G2f87@chi-application (lambda (G3ee7@e G3ee8@r G3ee9@mr) ((lambda (G3eed@t) ((lambda (G3eef@ls/false) (if G3eef@ls/false (apply (lambda (G3ef1@rator G3ef2@rands) ((lambda (G3ef5@rator) (cons G3ef5@rator (G2f85@chi-expr* G3ef2@rands G3ee8@r G3ee9@mr))) (G2f89@chi-expr G3ef1@rator G3ee8@r G3ee9@mr))) G3eef@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3eed@t))) (G2f65@syntax-dispatch G3eed@t '(any . each-any)))) G3ee7@e))) (set! G2f89@chi-expr (lambda (G3ef7@e G3ef8@r G3ef9@mr) (call-with-values (lambda () (G2d8e@syntax-type G3ef7@e G3ef8@r)) (lambda (G3f00@G3efd G3f01@G3efe G3f02@G3eff) ((lambda (G3f06@kwd G3f07@value G3f08@type) ((lambda (G3f0c@t) (if (memv G3f0c@t '(core-macro)) ((lambda (G3f0e@transformer) (G3f0e@transformer G3ef7@e G3ef8@r G3ef9@mr)) (G2f73@core-macro-transformer G3f07@value)) (if (memv G3f0c@t '(global)) ((lambda (G3f10@lib) ((lambda (G3f12@loc) ((lambda () (begin ((G2fd2@inv-collector) G3f10@lib) G3f12@loc)))) (cdr G3f07@value))) (car G3f07@value)) (if (memv G3f0c@t '(core-prim)) ((lambda (G3f14@name) (list 'primitive G3f14@name)) G3f07@value) (if (memv G3f0c@t '(call)) (G2f87@chi-application G3ef7@e G3ef8@r G3ef9@mr) (if (memv G3f0c@t '(lexical)) ((lambda (G3f16@lex) G3f16@lex) (G2ef1@lexical-var G3f07@value)) (if (memv G3f0c@t '(global-macro global-macro!)) (G2f89@chi-expr (G2f83@chi-global-macro G3f07@value G3ef7@e) G3ef8@r G3ef9@mr) (if (memv G3f0c@t '(local-macro local-macro!)) (G2f89@chi-expr (G2f81@chi-local-macro G3f07@value G3ef7@e) G3ef8@r G3ef9@mr) (if (memv G3f0c@t '(macro macro!)) (G2f89@chi-expr (G2f7f@chi-macro G3f07@value G3ef7@e) G3ef8@r G3ef9@mr) (if (memv G3f0c@t '(constant)) ((lambda (G3f18@datum) (list 'quote G3f18@datum)) G3f07@value) (if (memv G3f0c@t '(set!)) (G2f8b@chi-set! G3ef7@e G3ef8@r G3ef9@mr) (if (memv G3f0c@t '(begin)) ((lambda (G3f1a@t) ((lambda (G3f1c@ls/false) (if G3f1c@ls/false (apply (lambda (G3f1e@x G3f1f@x*) (G2cc3@G2c34@build-sequence '#f (G2f85@chi-expr* (cons G3f1e@x G3f1f@x*) G3ef8@r G3ef9@mr))) G3f1c@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3f1a@t))) (G2f65@syntax-dispatch G3f1a@t '(_ any . each-any)))) G3ef7@e) (if (memv G3f0c@t '(let-syntax letrec-syntax)) ((lambda (G3f22@t) ((lambda (G3f24@ls/false) (if (and G3f24@ls/false (apply (lambda (G3f26@xlhs* G3f27@xrhs* G3f28@xbody G3f29@xbody*) (if (not (G2d70@valid-bound-ids? G3f26@xlhs*)) (G3052@syntax-violation '#f '"invalid identifiers" G3ef7@e) (void))) G3f24@ls/false)) (apply (lambda (G3f2e@xlhs* G3f2f@xrhs* G3f30@xbody G3f31@xbody*) ((lambda (G3f36@xlab*) ((lambda (G3f38@xrib) ((lambda (G3f3a@xb*) ((lambda () (G2cc3@G2c34@build-sequence '#f (G2f85@chi-expr* (map (lambda (G3f3c@x) (G2d52@add-subst G3f38@xrib G3f3c@x)) (cons G3f30@xbody G3f31@xbody*)) (append (map cons G3f36@xlab* G3f3a@xb*) G3ef8@r) (append (map cons G3f36@xlab* G3f3a@xb*) G3ef9@mr)))))) (map (lambda (G3f3e@x) (G2da6@make-eval-transformer (G2fc4@expand-transformer (if (eq? G3f08@type 'let-syntax) G3f3e@x (G2d52@add-subst G3f38@xrib G3f3e@x)) G3ef9@mr))) G3f2f@xrhs*))) (G2d21@make-full-rib G3f2e@xlhs* G3f36@xlab*))) (map G2ce6@gen-label G3f2e@xlhs*))) G3f24@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3f22@t))) (G2f65@syntax-dispatch G3f22@t '(_ #(each (any any)) any . each-any)))) G3ef7@e) (if (memv G3f0c@t '(displaced-lexical)) (G3052@syntax-violation '#f '"identifier out of context" G3ef7@e) (if (memv G3f0c@t '(syntax)) (G3052@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ef7@e) (if (memv G3f0c@t '(define define-syntax module import library)) (G3052@syntax-violation '#f (string-append ((lambda (G3f40@t) (if (memv G3f40@t '(define)) '"a definition" (if (memv G3f40@t '(define-syntax)) '"a define-syntax" (if (memv G3f40@t '(module)) '"a module definition" (if (memv G3f40@t '(library)) '"a library definition" (if (memv G3f40@t '(import)) '"an import declaration" (if (memv G3f40@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f08@type) '" was found where an expression was expected") G3ef7@e) (if (memv G3f0c@t '(mutable)) (G3052@syntax-violation '#f '"attempt to reference an unexportable variable" G3ef7@e) (G3052@syntax-violation '#f '"invalid expression" G3ef7@e)))))))))))))))))) G3f08@type)) G3f02@G3eff G3f01@G3efe G3f00@G3efd))))) (set! G2f8b@chi-set! (lambda (G3f42@e G3f43@r G3f44@mr) ((lambda (G3f48@t) ((lambda (G3f4a@ls/false) (if (and G3f4a@ls/false (apply (lambda (G3f4c@x G3f4d@v) (G2d66@id? G3f4c@x)) G3f4a@ls/false)) (apply (lambda (G3f50@x G3f51@v) (call-with-values (lambda () (G2d8e@syntax-type G3f50@x G3f43@r)) (lambda (G3f57@G3f54 G3f58@G3f55 G3f59@G3f56) ((lambda (G3f5d@kwd G3f5e@value G3f5f@type) ((lambda (G3f63@t) (if (memv G3f63@t '(lexical)) (begin (G2ef5@set-lexical-mutable! G3f5e@value '#t) (list 'set! (G2ef1@lexical-var G3f5e@value) (G2f89@chi-expr G3f51@v G3f43@r G3f44@mr))) (if (memv G3f63@t '(core-prim)) (G3052@syntax-violation '#f '"cannot modify imported core primitive" G3f42@e) (if (memv G3f63@t '(global)) (G3052@syntax-violation '#f '"attempt to modify imported binding" G3f42@e) (if (memv G3f63@t '(global-macro!)) (G2f89@chi-expr (G2f83@chi-global-macro G3f5e@value G3f42@e) G3f43@r G3f44@mr) (if (memv G3f63@t '(local-macro!)) (G2f89@chi-expr (G2f81@chi-local-macro G3f5e@value G3f42@e) G3f43@r G3f44@mr) (if (memv G3f63@t '(mutable)) (G3052@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f42@e) (G3052@syntax-violation '#f '"invalid syntax" G3f42@e)))))))) G3f5f@type)) G3f59@G3f56 G3f58@G3f55 G3f57@G3f54)))) G3f4a@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3f48@t))) (G2f65@syntax-dispatch G3f48@t '(_ any any)))) G3f42@e))) (set! G2f8d@verify-formals (lambda (G3f65@fmls G3f66@stx) ((lambda (G3f69@t) ((lambda (G3f6b@ls/false) (if G3f6b@ls/false (apply (lambda (G3f6d@x*) (if (not (G2d70@valid-bound-ids? G3f6d@x*)) (G2f1f@invalid-fmls-error G3f66@stx G3f65@fmls) (void))) G3f6b@ls/false) ((lambda (G3f6f@t) ((lambda (G3f71@ls/false) (if G3f71@ls/false (apply (lambda (G3f73@x* G3f74@x) (if (not (G2d70@valid-bound-ids? (cons G3f74@x G3f73@x*))) (G2f1f@invalid-fmls-error G3f66@stx G3f65@fmls) (void))) G3f71@ls/false) ((lambda (G3f77@t) ((lambda (G3f79@ls/false) (if G3f79@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid syntax" G3f66@stx)) G3f79@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3f77@t))) (G2f65@syntax-dispatch G3f77@t '_))) G3f6f@t))) (G2f65@syntax-dispatch G3f6f@t '#(each+ any () any)))) G3f69@t))) (G2f65@syntax-dispatch G3f69@t 'each-any))) G3f65@fmls))) (set! G2f8f@chi-lambda-clause (lambda (G3f7b@stx G3f7c@fmls G3f7d@body* G3f7e@r G3f7f@mr) ((lambda (G3f85@t) ((lambda (G3f87@ls/false) (if G3f87@ls/false (apply (lambda (G3f89@x*) (begin (G2f8d@verify-formals G3f7c@fmls G3f7b@stx) ((lambda (G3f8b@lex* G3f8c@lab*) (values G3f8b@lex* (G2f9f@chi-internal (G2d52@add-subst (G2d21@make-full-rib G3f89@x* G3f8c@lab*) G3f7d@body*) (G2ef9@add-lexicals G3f8c@lab* G3f8b@lex* G3f7e@r) G3f7f@mr))) (map G2ce2@gen-lexical G3f89@x*) (map G2ce6@gen-label G3f89@x*)))) G3f87@ls/false) ((lambda (G3f8f@t) ((lambda (G3f91@ls/false) (if G3f91@ls/false (apply (lambda (G3f93@x* G3f94@x) (begin (G2f8d@verify-formals G3f7c@fmls G3f7b@stx) ((lambda (G3f97@lex* G3f98@lab* G3f99@lex G3f9a@lab) (values (append G3f97@lex* G3f99@lex) (G2f9f@chi-internal (G2d52@add-subst (G2d21@make-full-rib (cons G3f94@x G3f93@x*) (cons G3f9a@lab G3f98@lab*)) G3f7d@body*) (G2ef9@add-lexicals (cons G3f9a@lab G3f98@lab*) (cons G3f99@lex G3f97@lex*) G3f7e@r) G3f7f@mr))) (map G2ce2@gen-lexical G3f93@x*) (map G2ce6@gen-label G3f93@x*) (G2ce2@gen-lexical G3f94@x) (G2ce6@gen-label G3f94@x)))) G3f91@ls/false) ((lambda (G3f9f@t) ((lambda (G3fa1@ls/false) (if G3fa1@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid syntax" G3f7c@fmls)) G3fa1@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G3f9f@t))) (G2f65@syntax-dispatch G3f9f@t '_))) G3f8f@t))) (G2f65@syntax-dispatch G3f8f@t '#(each+ any () any)))) G3f85@t))) (G2f65@syntax-dispatch G3f85@t 'each-any))) G3f7c@fmls))) (set! G2f91@chi-lambda-clause* (lambda (G3fa3@stx G3fa4@fmls* G3fa5@body** G3fa6@r G3fa7@mr) (if (null? G3fa4@fmls*) (values '() '()) (call-with-values (lambda () (G2f8f@chi-lambda-clause G3fa3@stx (car G3fa4@fmls*) (car G3fa5@body**) G3fa6@r G3fa7@mr)) (lambda (G3faf@G3fad G3fb0@G3fae) ((lambda (G3fb3@b G3fb4@a) (call-with-values (lambda () (G2f91@chi-lambda-clause* G3fa3@stx (cdr G3fa4@fmls*) (cdr G3fa5@body**) G3fa6@r G3fa7@mr)) (lambda (G3fb9@G3fb7 G3fba@G3fb8) ((lambda (G3fbd@b* G3fbe@a*) (values (cons G3fb4@a G3fbe@a*) (cons G3fb3@b G3fbd@b*))) G3fba@G3fb8 G3fb9@G3fb7)))) G3fb0@G3fae G3faf@G3fad)))))) (set! G2f93@chi-defun (lambda (G3fc1@x G3fc2@r G3fc3@mr) ((lambda (G3fc7@fmls G3fc8@body*) (call-with-values (lambda () (G2f8f@chi-lambda-clause G3fc7@fmls G3fc7@fmls G3fc8@body* G3fc2@r G3fc3@mr)) (lambda (G3fcd@G3fcb G3fce@G3fcc) ((lambda (G3fd1@body G3fd2@fmls) (G2cc0@G2bfe@build-lambda '#f G3fd2@fmls G3fd1@body)) G3fce@G3fcc G3fcd@G3fcb)))) (car G3fc1@x) (cdr G3fc1@x)))) (set! G2f95@chi-rhs (lambda (G3fd5@rhs G3fd6@r G3fd7@mr) ((lambda (G3fdb@t) (if (memv G3fdb@t '(defun)) (G2f93@chi-defun (cdr G3fd5@rhs) G3fd6@r G3fd7@mr) (if (memv G3fdb@t '(expr)) ((lambda (G3fdd@expr) (G2f89@chi-expr G3fdd@expr G3fd6@r G3fd7@mr)) (cdr G3fd5@rhs)) (if (memv G3fdb@t '(top-expr)) ((lambda (G3fdf@expr) (G2cc3@G2c34@build-sequence '#f (list (G2f89@chi-expr G3fdf@expr G3fd6@r G3fd7@mr) (G2cc4@G2c36@build-void)))) (cdr G3fd5@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fd5@rhs))))) (car G3fd5@rhs)))) (set! G2f97@expand-interaction-rhs*/init* (lambda (G3fe1@lhs* G3fe2@rhs* G3fe3@init* G3fe4@r G3fe5@mr) ((letrec ((G3feb@f (lambda (G3fed@lhs* G3fee@rhs*) (if (null? G3fed@lhs*) (map (lambda (G3ff1@x) (G2f89@chi-expr G3ff1@x G3fe4@r G3fe5@mr)) G3fe3@init*) ((lambda (G3ff3@lhs G3ff4@rhs) ((lambda (G3ff7@t) (if (memv G3ff7@t '(defun)) ((lambda (G3ff9@rhs) (cons (list 'set! G3ff3@lhs G3ff9@rhs) (G3feb@f (cdr G3fed@lhs*) (cdr G3fee@rhs*)))) (G2f93@chi-defun (cdr G3ff4@rhs) G3fe4@r G3fe5@mr)) (if (memv G3ff7@t '(expr)) ((lambda (G3ffb@rhs) (cons (list 'set! G3ff3@lhs G3ffb@rhs) (G3feb@f (cdr G3fed@lhs*) (cdr G3fee@rhs*)))) (G2f89@chi-expr (cdr G3ff4@rhs) G3fe4@r G3fe5@mr)) (if (memv G3ff7@t '(top-expr)) ((lambda (G3ffd@e) (cons G3ffd@e (G3feb@f (cdr G3fed@lhs*) (cdr G3fee@rhs*)))) (G2f89@chi-expr (cdr G3ff4@rhs) G3fe4@r G3fe5@mr)) (error 'expand-interaction '"invallid" G3ff4@rhs))))) (car G3ff4@rhs))) (car G3fed@lhs*) (car G3fee@rhs*)))))) G3feb@f) G3fe1@lhs* G3fe2@rhs*))) (set! G2f99@chi-rhs* (lambda (G3fff@rhs* G4000@r G4001@mr) ((letrec ((G4005@f (lambda (G4007@ls) (if (null? G4007@ls) '() ((lambda (G4009@a) (cons G4009@a (G4005@f (cdr G4007@ls)))) (G2f95@chi-rhs (car G4007@ls) G4000@r G4001@mr)))))) G4005@f) G3fff@rhs*))) (set! G2f9b@find-bound=? (lambda (G400b@x G400c@lhs* G400d@rhs*) (if (null? G400c@lhs*) '#f (if (G2d6c@bound-id=? G400b@x (car G400c@lhs*)) (car G400d@rhs*) (G2f9b@find-bound=? G400b@x (cdr G400c@lhs*) (cdr G400d@rhs*)))))) (set! G2f9d@find-dups (lambda (G4011@ls) ((letrec ((G4013@f (lambda (G4015@ls G4016@dups) (if (null? G4015@ls) G4016@dups ((lambda (G4019@t) (if G4019@t ((lambda (G401b@x) (G4013@f (cdr G4015@ls) (cons (list (car G4015@ls) G401b@x) G4016@dups))) G4019@t) (G4013@f (cdr G4015@ls) G4016@dups))) (G2f9b@find-bound=? (car G4015@ls) (cdr G4015@ls) (cdr G4015@ls))))))) G4013@f) G4011@ls '()))) (set! G2f9f@chi-internal (lambda (G401d@e* G401e@r G401f@mr) ((lambda (G4023@rib) (call-with-values (lambda () (G2fc2@chi-body* (map (lambda (G402d@x) (G2d52@add-subst G4023@rib G402d@x)) (G2d64@syntax->list G401d@e*)) G401e@r G401f@mr '() '() '() '() '() G4023@rib '#f)) (lambda (G402f@G4025 G4030@G4026 G4031@G4027 G4032@G4028 G4033@G4029 G4034@G402a G4035@G402b G4036@G402c) ((lambda (G403f@_exp* G4040@kwd* G4041@mod** G4042@rhs* G4043@lex* G4044@mr G4045@r G4046@e*) (begin (if (null? G4046@e*) (G3052@syntax-violation '#f '"no expression in body" G4046@e*) (void)) ((lambda (G404f@init*) ((lambda (G4051@rhs*) ((lambda () (G2cc6@G2c3a@build-letrec* '#f (reverse G4043@lex*) (reverse G4051@rhs*) (G2cc3@G2c34@build-sequence '#f G404f@init*))))) (G2f99@chi-rhs* G4042@rhs* G4045@r G4044@mr))) (G2f85@chi-expr* (append (apply append (reverse G4041@mod**)) G4046@e*) G4045@r G4044@mr)))) G4036@G402c G4035@G402b G4034@G402a G4033@G4029 G4032@G4028 G4031@G4027 G4030@G4026 G402f@G4025)))) (G2d11@make-empty-rib)))) (set! G2fa1@parse-module (lambda (G4053@e) ((lambda (G4055@t) ((lambda (G4057@ls/false) (if G4057@ls/false (apply (lambda (G4059@export* G405a@b*) (begin (if (not (for-all G2d66@id? G4059@export*)) (G3052@syntax-violation '#f '"module exports must be identifiers" G4053@e) (void)) (values '#f (list->vector G4059@export*) G405a@b*))) G4057@ls/false) ((lambda (G405d@t) ((lambda (G405f@ls/false) (if G405f@ls/false (apply (lambda (G4061@name G4062@export* G4063@b*) (begin (if (not (G2d66@id? G4061@name)) (G3052@syntax-violation '#f '"module name must be an identifier" G4053@e) (void)) (if (not (for-all G2d66@id? G4062@export*)) (G3052@syntax-violation '#f '"module exports must be identifiers" G4053@e) (void)) (values G4061@name (list->vector G4062@export*) G4063@b*))) G405f@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G405d@t))) (G2f65@syntax-dispatch G405d@t '(_ any each-any . each-any)))) G4055@t))) (G2f65@syntax-dispatch G4055@t '(_ each-any . each-any)))) G4053@e))) (set! G2fa7@G2fa2 (make-record-type-descriptor 'module-interface '#f 'G2fa5 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2fa9@G2fa4 '#f) (set! G2fab@G2fa3 (make-record-constructor-descriptor G2fa7@G2fa2 '#f G2fa9@G2fa4)) (set! G2fae@module-interface? (record-predicate G2fa7@G2fa2)) (set! G2fb0@make-module-interface (record-constructor G2fab@G2fa3)) (set! G2fb2@module-interface-first-mark (record-accessor G2fa7@G2fa2 '0)) (set! G2fb4@module-interface-exp-id-vec (record-accessor G2fa7@G2fa2 '1)) (set! G2fb6@module-interface-exp-lab-vec (record-accessor G2fa7@G2fa2 '2)) (set! G2fb8@set-module-interface-first-mark! (record-mutator G2fa7@G2fa2 '0)) (set! G2fba@set-module-interface-exp-id-vec! (record-mutator G2fa7@G2fa2 '1)) (set! G2fbc@set-module-interface-exp-lab-vec! (record-mutator G2fa7@G2fa2 '2)) (set! G2fbe@module-interface-exp-id* (lambda (G4067@iface G4068@id) ((lambda (G406c@diff-marks) (begin (set! G406c@diff-marks (lambda (G4073@ls G4074@x) (begin (if (null? G4073@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4077@a) (if (eq? G4077@a G4074@x) '() (cons G4077@a (G406c@diff-marks (cdr G4073@ls) G4074@x)))) (car G4073@ls))))) ((lambda (G406d@diff G406e@id-vec) (if (null? G406d@diff) G406e@id-vec (vector-map (lambda (G4071@x) (G2d30@make-stx (G2d32@stx-expr G4071@x) (append G406d@diff (G2d34@stx-mark* G4071@x)) '() '())) G406e@id-vec))) (G406c@diff-marks (G2d34@stx-mark* G4068@id) (G2fb2@module-interface-first-mark G4067@iface)) (G2fb4@module-interface-exp-id-vec G4067@iface)))) '#f))) (set! G2fc0@chi-internal-module (lambda (G4079@e G407a@r G407b@mr G407c@lex* G407d@rhs* G407e@mod** G407f@kwd*) (call-with-values (lambda () (G2fa1@parse-module G4079@e)) (lambda (G408a@G4087 G408b@G4088 G408c@G4089) ((lambda (G4090@e* G4091@exp-id* G4092@name) ((lambda (G4096@rib) ((lambda (G4098@e*) ((lambda () (call-with-values (lambda () (G2fc2@chi-body* G4098@e* G407a@r G407b@mr G407c@lex* G407d@rhs* G407e@mod** G407f@kwd* '() G4096@rib '#f)) (lambda (G40a2@G409a G40a3@G409b G40a4@G409c G40a5@G409d G40a6@G409e G40a7@G409f G40a8@G40a0 G40a9@G40a1) ((lambda (G40b2@_exp* G40b3@kwd* G40b4@mod** G40b5@rhs* G40b6@lex* G40b7@mr G40b8@r G40b9@e*) ((lambda (G40c2@exp-lab* G40c3@mod**) (if (not G4092@name) (values G40b6@lex* G40b5@rhs* G4091@exp-id* G40c2@exp-lab* G40b8@r G40b7@mr G40c3@mod** G40b3@kwd*) ((lambda (G40c6@lab G40c7@iface) (values G40b6@lex* G40b5@rhs* (vector G4092@name) (vector G40c6@lab) (cons (cons G40c6@lab (cons '$module G40c7@iface)) G40b8@r) (cons (cons G40c6@lab (cons '$module G40c7@iface)) G40b7@mr) G40c3@mod** G40b3@kwd*)) (G2ce6@gen-label 'module) (G2fb0@make-module-interface (car (G2d34@stx-mark* G4092@name)) (vector-map (lambda (G40ca@x) (G2d30@make-stx (G2d32@stx-expr G40ca@x) (G2d34@stx-mark* G40ca@x) '() '())) G4091@exp-id*) G40c2@exp-lab*)))) (vector-map (lambda (G40cc@x) (or (G2d80@id->label (G2d30@make-stx (G2d68@id->sym G40cc@x) (G2d34@stx-mark* G40cc@x) (list G4096@rib) '())) (G3052@syntax-violation '#f '"cannot find module export" G40cc@x))) G4091@exp-id*) (cons G40b9@e* G40b4@mod**))) G40a9@G40a1 G40a8@G40a0 G40a7@G409f G40a6@G409e G40a5@G409d G40a4@G409c G40a3@G409b G40a2@G409a)))))) (map (lambda (G40ce@x) (G2d52@add-subst G4096@rib G40ce@x)) (G2d64@syntax->list G4090@e*)))) (G2d11@make-empty-rib))) G408c@G4089 G408b@G4088 G408a@G4087))))) (set! G2fc2@chi-body* (lambda (G40d0@e* G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40d6@kwd* G40d7@exp* G40d8@rib G40d9@top?) (if (null? G40d0@e*) (values G40d0@e* G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40d6@kwd* G40d7@exp*) ((lambda (G40e4@e) (call-with-values (lambda () (G2d8e@syntax-type G40e4@e G40d1@r)) (lambda (G40e9@G40e6 G40ea@G40e7 G40eb@G40e8) ((lambda (G40ef@kwd G40f0@value G40f1@type) ((lambda (G40f5@kwd*) ((lambda (G40f7@t) (if (memv G40f7@t '(define)) (call-with-values (lambda () (G2ee9@parse-define G40e4@e)) (lambda (G40fb@G40f9 G40fc@G40fa) ((lambda (G40ff@rhs G4100@id) (begin (if (G2d74@bound-id-member? G4100@id G40f5@kwd*) (G3052@syntax-violation '#f '"cannot redefine keyword" G40e4@e) (void)) (call-with-values (lambda () (G2cea@gen-define-label+loc G4100@id G40d8@rib)) (lambda (G4105@G4103 G4106@G4104) ((lambda (G4109@lex G410a@lab) (begin (G2d17@extend-rib! G40d8@rib G4100@id G410a@lab) (G2fc2@chi-body* (cdr G40d0@e*) (G2ef7@add-lexical G410a@lab G4109@lex G40d1@r) G40d2@mr (cons G4109@lex G40d3@lex*) (cons G40ff@rhs G40d4@rhs*) G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?))) G4106@G4104 G4105@G4103))))) G40fc@G40fa G40fb@G40f9))) (if (memv G40f7@t '(define-syntax)) (call-with-values (lambda () (G2eeb@parse-define-syntax G40e4@e)) (lambda (G410f@G410d G4110@G410e) ((lambda (G4113@rhs G4114@id) (begin (if (G2d74@bound-id-member? G4114@id G40f5@kwd*) (G3052@syntax-violation '#f '"cannot redefine keyword" G40e4@e) (void)) ((lambda (G4117@lab G4118@expanded-rhs) (begin (G2d17@extend-rib! G40d8@rib G4114@id G4117@lab) ((lambda (G411b@b) (G2fc2@chi-body* (cdr G40d0@e*) (cons (cons G4117@lab G411b@b) G40d1@r) (cons (cons G4117@lab G411b@b) G40d2@mr) G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?)) (G2da6@make-eval-transformer G4118@expanded-rhs)))) (G2cec@gen-define-label G4114@id G40d8@rib) (G2fc4@expand-transformer G4113@rhs G40d2@mr)))) G4110@G410e G410f@G410d))) (if (memv G40f7@t '(let-syntax letrec-syntax)) ((lambda (G411d@t) ((lambda (G411f@ls/false) (if (and G411f@ls/false (apply (lambda (G4121@xlhs* G4122@xrhs* G4123@xbody*) (if (not (G2d70@valid-bound-ids? G4121@xlhs*)) (G3052@syntax-violation '#f '"invalid identifiers" G40e4@e) (void))) G411f@ls/false)) (apply (lambda (G4127@xlhs* G4128@xrhs* G4129@xbody*) ((lambda (G412d@xlab*) ((lambda (G412f@xrib) ((lambda (G4131@xb*) ((lambda () (G2fc2@chi-body* (append (map (lambda (G4133@x) (G2d52@add-subst G412f@xrib G4133@x)) G4129@xbody*) (cdr G40d0@e*)) (append (map cons G412d@xlab* G4131@xb*) G40d1@r) (append (map cons G412d@xlab* G4131@xb*) G40d2@mr) G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?)))) (map (lambda (G4135@x) (G2da6@make-eval-transformer (G2fc4@expand-transformer (if (eq? G40f1@type 'let-syntax) G4135@x (G2d52@add-subst G412f@xrib G4135@x)) G40d2@mr))) G4128@xrhs*))) (G2d21@make-full-rib G4127@xlhs* G412d@xlab*))) (map G2ce6@gen-label G4127@xlhs*))) G411f@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G411d@t))) (G2f65@syntax-dispatch G411d@t '(_ #(each (any any)) . each-any)))) G40e4@e) (if (memv G40f7@t '(begin)) ((lambda (G4137@t) ((lambda (G4139@ls/false) (if G4139@ls/false (apply (lambda (G413b@x*) (G2fc2@chi-body* (append G413b@x* (cdr G40d0@e*)) G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?)) G4139@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4137@t))) (G2f65@syntax-dispatch G4137@t '(_ . each-any)))) G40e4@e) (if (memv G40f7@t '(global-macro global-macro!)) (G2fc2@chi-body* (cons (G2d52@add-subst G40d8@rib (G2f83@chi-global-macro G40f0@value G40e4@e)) (cdr G40d0@e*)) G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?) (if (memv G40f7@t '(local-macro local-macro!)) (G2fc2@chi-body* (cons (G2d52@add-subst G40d8@rib (G2f81@chi-local-macro G40f0@value G40e4@e)) (cdr G40d0@e*)) G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?) (if (memv G40f7@t '(macro macro!)) (G2fc2@chi-body* (cons (G2d52@add-subst G40d8@rib (G2f7f@chi-macro G40f0@value G40e4@e)) (cdr G40d0@e*)) G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?) (if (memv G40f7@t '(module)) (call-with-values (lambda () (G2fc0@chi-internal-module G40e4@e G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd*)) (lambda (G4145@G413d G4146@G413e G4147@G413f G4148@G4140 G4149@G4141 G414a@G4142 G414b@G4143 G414c@G4144) ((lambda (G4155@kwd* G4156@mod** G4157@mr G4158@r G4159@m-exp-lab* G415a@m-exp-id* G415b@rhs* G415c@lex*) (begin (vector-for-each (lambda (G4165@id G4166@lab) (G2d17@extend-rib! G40d8@rib G4165@id G4166@lab)) G415a@m-exp-id* G4159@m-exp-lab*) (G2fc2@chi-body* (cdr G40d0@e*) G4158@r G4157@mr G415c@lex* G415b@rhs* G4156@mod** G4155@kwd* G40d7@exp* G40d8@rib G40d9@top?))) G414c@G4144 G414b@G4143 G414a@G4142 G4149@G4141 G4148@G4140 G4147@G413f G4146@G413e G4145@G413d))) (if (memv G40f7@t '(library)) (begin (G3032@library-expander (G2d7c@stx->datum G40e4@e)) (G2fc2@chi-body* (cdr G40d0@e*) G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?)) (if (memv G40f7@t '(export)) ((lambda (G4169@t) ((lambda (G416b@ls/false) (if G416b@ls/false (apply (lambda (G416d@exp-decl*) (G2fc2@chi-body* (cdr G40d0@e*) G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* (append G416d@exp-decl* G40d7@exp*) G40d8@rib G40d9@top?)) G416b@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4169@t))) (G2f65@syntax-dispatch G4169@t '(_ . each-any)))) G40e4@e) (if (memv G40f7@t '(import)) ((lambda () ((lambda (G4170@module-import? G4172@module-import G4174@library-import) (begin (set! G4170@module-import? (lambda (G41bc@e) ((lambda (G41be@t) ((lambda (G41c0@ls/false) (if (and G41c0@ls/false (apply (lambda (G41c2@id) (G2d66@id? G41c2@id)) G41c0@ls/false)) (apply (lambda (G41c4@id) '#t) G41c0@ls/false) ((lambda (G41c6@t) ((lambda (G41c8@ls/false) (if G41c8@ls/false (apply (lambda (G41ca@imp*) '#f) G41c8@ls/false) ((lambda (G41cc@t) ((lambda (G41ce@ls/false) (if G41ce@ls/false (apply (lambda () (G3052@syntax-violation '#f '"malformed import form" G41bc@e)) G41ce@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G41cc@t))) (G2f65@syntax-dispatch G41cc@t '_))) G41c6@t))) (G2f65@syntax-dispatch G41c6@t '(_ . each-any)))) G41be@t))) (G2f65@syntax-dispatch G41be@t '(_ any)))) G41bc@e))) (set! G4172@module-import (lambda (G419d@e G419e@r) ((lambda (G41a1@t) ((lambda (G41a3@ls/false) (if (and G41a3@ls/false (apply (lambda (G41a5@id) (G2d66@id? G41a5@id)) G41a3@ls/false)) (apply (lambda (G41a7@id) (call-with-values (lambda () (G2d8e@syntax-type G41a7@id G419e@r)) (lambda (G41ac@G41a9 G41ad@G41aa G41ae@G41ab) ((lambda (G41b2@kwd G41b3@value G41b4@type) ((lambda (G41b8@t) (if (memv G41b8@t '($module)) ((lambda (G41ba@iface) (values (G2fbe@module-interface-exp-id* G41ba@iface G41a7@id) (G2fb6@module-interface-exp-lab-vec G41ba@iface))) G41b3@value) (G3052@syntax-violation '#f '"invalid import" G419d@e))) G41b4@type)) G41ae@G41ab G41ad@G41aa G41ac@G41a9)))) G41a3@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G41a1@t))) (G2f65@syntax-dispatch G41a1@t '(_ any)))) G419d@e))) (set! G4174@library-import (lambda (G4183@e) ((lambda (G4185@t) ((lambda (G4187@ls/false) (if G4187@ls/false (apply (lambda (G4189@ctxt G418a@imp*) (call-with-values (lambda () (G2fcc@parse-import-spec* (G3058@syntax->datum G418a@imp*))) (lambda (G418f@G418d G4190@G418e) ((lambda (G4193@subst-labels G4194@subst-names) (values (vector-map (lambda (G4197@name) (G2d44@datum->stx G4189@ctxt G4197@name)) G4194@subst-names) G4193@subst-labels)) G4190@G418e G418f@G418d)))) G4187@ls/false) ((lambda (G4199@t) ((lambda (G419b@ls/false) (if G419b@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid import form" G4183@e)) G419b@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4199@t))) (G2f65@syntax-dispatch G4199@t '_))) G4185@t))) (G2f65@syntax-dispatch G4185@t '(any . each-any)))) G4183@e))) (begin (call-with-values (lambda () (if (G4170@module-import? G40e4@e) (G4172@module-import G40e4@e G40d1@r) (G4174@library-import G40e4@e))) (lambda (G4177@G4175 G4178@G4176) ((lambda (G417b@lab* G417c@id*) (vector-for-each (lambda (G417f@id G4180@lab) (G2d17@extend-rib! G40d8@rib G417f@id G4180@lab)) G417c@id* G417b@lab*)) G4178@G4176 G4177@G4175))) (G2fc2@chi-body* (cdr G40d0@e*) G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?)))) '#f '#f '#f))) (if G40d9@top? (G2fc2@chi-body* (cdr G40d0@e*) G40d1@r G40d2@mr (cons (G2ce2@gen-lexical 'dummy) G40d3@lex*) (cons (cons 'top-expr G40e4@e) G40d4@rhs*) G40d5@mod** G40f5@kwd* G40d7@exp* G40d8@rib G40d9@top?) (values G40d0@e* G40d1@r G40d2@mr G40d3@lex* G40d4@rhs* G40d5@mod** G40f5@kwd* G40d7@exp*)))))))))))))) G40f1@type)) (if (G2d66@id? G40ef@kwd) (cons G40ef@kwd G40d6@kwd*) G40d6@kwd*))) G40eb@G40e8 G40ea@G40e7 G40e9@G40e6)))) (car G40d0@e*))))) (set! G2fc4@expand-transformer (lambda (G41d0@expr G41d1@r) ((lambda (G41d4@rtc) ((lambda (G41d6@expanded-rhs) (begin (for-each ((lambda (G41d8@mark-visit) (lambda (G41da@x) (begin (G2b7d@G2a24@invoke-library G41da@x) (G41d8@mark-visit G41da@x)))) (G2fd4@vis-collector)) (G41d4@rtc)) G41d6@expanded-rhs)) ((lambda (G41e0@G41dc@inv-collector G41e1@G41dd@vis-collector G41e2@G41de@inv-collector G41e3@G41df@vis-collector) ((lambda (G41e8@swap) (dynamic-wind G41e8@swap (lambda () (G2f89@chi-expr G41d0@expr G41d1@r G41d1@r)) G41e8@swap)) (lambda () (begin ((lambda (G41ea@t) (begin (G41e0@G41dc@inv-collector G41e2@G41de@inv-collector) (set! G41e2@G41de@inv-collector G41ea@t))) (G41e0@G41dc@inv-collector)) ((lambda (G41ec@t) (begin (G41e1@G41dd@vis-collector G41e3@G41df@vis-collector) (set! G41e3@G41df@vis-collector G41ec@t))) (G41e1@G41dd@vis-collector)))))) G2fd2@inv-collector G2fd4@vis-collector G41d4@rtc (lambda (G41ee@x) (values))))) (G2fd0@make-collector)))) (set! G2fc6@parse-exports (lambda (G41f0@exp*) ((letrec ((G41f2@f (lambda (G41f4@exp* G41f5@int* G41f6@ext*) (if (null? G41f4@exp*) (begin (if (not (G2d70@valid-bound-ids? G41f6@ext*)) (G3052@syntax-violation 'export '"invalid exports" (G2f9d@find-dups G41f6@ext*)) (void)) (values (map G3058@syntax->datum G41f6@ext*) G41f5@int*)) ((lambda (G41fa@t) ((lambda (G41fc@ls/false) (if G41fc@ls/false (apply (lambda (G41fe@rename G41ff@i* G4200@e*) (begin (if (not (and (eq? (G3058@syntax->datum G41fe@rename) 'rename) (for-all G2d66@id? G41ff@i*) (for-all G2d66@id? G4200@e*))) (G3052@syntax-violation 'export '"invalid export specifier" (car G41f4@exp*)) (void)) (G41f2@f (cdr G41f4@exp*) (append G41ff@i* G41f5@int*) (append G4200@e* G41f6@ext*)))) G41fc@ls/false) ((lambda (G4204@t) ((lambda (G4206@ls/false) (if G4206@ls/false (apply (lambda (G4208@ie) (begin (if (not (G2d66@id? G4208@ie)) (G3052@syntax-violation 'export '"invalid export" G4208@ie) (void)) (G41f2@f (cdr G41f4@exp*) (cons G4208@ie G41f5@int*) (cons G4208@ie G41f6@ext*)))) G4206@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4204@t))) (G2f65@syntax-dispatch G4204@t 'any))) G41fa@t))) (G2f65@syntax-dispatch G41fa@t '(any . #(each (any any)))))) (car G41f4@exp*)))))) G41f2@f) G41f0@exp* '() '()))) (set! G2fc8@parse-library-name (lambda (G420a@spec) ((lambda (G420d@parse) (begin (set! G420d@parse (lambda (G4218@x) ((lambda (G421a@t) ((lambda (G421c@ls/false) (if (and G421c@ls/false (apply (lambda (G421e@v*) (for-all (lambda (G4220@x) ((lambda (G4222@x) (and (integer? G4222@x) (exact? G4222@x))) (G3058@syntax->datum G4220@x))) G421e@v*)) G421c@ls/false)) (apply (lambda (G4224@v*) (values '() (map G3058@syntax->datum G4224@v*))) G421c@ls/false) ((lambda (G4226@t) ((lambda (G4228@ls/false) (if (and G4228@ls/false (apply (lambda (G422a@x G422b@rest) (symbol? (G3058@syntax->datum G422a@x))) G4228@ls/false)) (apply (lambda (G422e@x G422f@rest) (call-with-values (lambda () (G420d@parse G422f@rest)) (lambda (G4234@G4232 G4235@G4233) ((lambda (G4238@v* G4239@x*) (values (cons (G3058@syntax->datum G422e@x) G4239@x*) G4238@v*)) G4235@G4233 G4234@G4232)))) G4228@ls/false) ((lambda (G423c@t) ((lambda (G423e@ls/false) (if G423e@ls/false (apply (lambda () (values '() '())) G423e@ls/false) ((lambda (G4240@t) ((lambda (G4242@ls/false) (if G4242@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid library name" G420a@spec)) G4242@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4240@t))) (G2f65@syntax-dispatch G4240@t '_))) G423c@t))) (G2f65@syntax-dispatch G423c@t '()))) G4226@t))) (G2f65@syntax-dispatch G4226@t '(any . any)))) G421a@t))) (G2f65@syntax-dispatch G421a@t '(each-any)))) G4218@x))) (call-with-values (lambda () (G420d@parse G420a@spec)) (lambda (G4210@G420e G4211@G420f) ((lambda (G4214@ver* G4215@name*) (begin (if (null? G4215@name*) (G3052@syntax-violation '#f '"empty library name" G420a@spec) (void)) (values G4215@name* G4214@ver*))) G4211@G420f G4210@G420e))))) '#f))) (set! G2fca@parse-library (lambda (G4244@e) ((lambda (G4246@t) ((lambda (G4248@ls/false) (if (and G4248@ls/false (apply (lambda (G424a@library G424b@name* G424c@export G424d@exp* G424e@import G424f@imp* G4250@b*) (and (eq? (G3058@syntax->datum G424c@export) 'export) (eq? (G3058@syntax->datum G424e@import) 'import) (eq? (G3058@syntax->datum G424a@library) 'library))) G4248@ls/false)) (apply (lambda (G4258@library G4259@name* G425a@export G425b@exp* G425c@import G425d@imp* G425e@b*) (values G4259@name* G425b@exp* G425d@imp* G425e@b*)) G4248@ls/false) ((lambda (G4266@t) ((lambda (G4268@ls/false) (if G4268@ls/false (apply (lambda () (G3052@syntax-violation '#f '"malformed library" G4244@e)) G4268@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4266@t))) (G2f65@syntax-dispatch G4266@t '_))) G4246@t))) (G2f65@syntax-dispatch G4246@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4244@e))) (set! G2fcc@parse-import-spec* ((lambda () ((lambda (G426b@idsyn? G426d@dup-error G426f@merge-substs G4271@exclude* G4273@find* G4275@rem* G4277@remove-dups G4279@parse-library-name G427b@import-library G427d@get-import G427f@add-imports!) (begin (set! G426b@idsyn? (lambda (G446a@x) (symbol? (G3058@syntax->datum G446a@x)))) (set! G426d@dup-error (lambda (G4468@name) (G3052@syntax-violation 'import '"two imports with different bindings" G4468@name))) (set! G426f@merge-substs (lambda (G4456@s G4457@subst) ((lambda (G445b@insert-to-subst) (begin (set! G445b@insert-to-subst (lambda (G445c@a G445d@subst) ((lambda (G4460@name G4461@label) ((lambda (G4464@t) (if G4464@t ((lambda (G4466@x) (if (eq? (cdr G4466@x) G4461@label) G445d@subst (G426d@dup-error G4460@name))) G4464@t) (cons G445c@a G445d@subst))) (assq G4460@name G445d@subst))) (car G445c@a) (cdr G445c@a)))) (if (null? G4456@s) G4457@subst (G445b@insert-to-subst (car G4456@s) (G426f@merge-substs (cdr G4456@s) G4457@subst))))) '#f))) (set! G4271@exclude* (lambda (G442c@sym* G442d@subst) ((lambda (G4431@exclude) (begin (set! G4431@exclude (lambda (G4446@sym G4447@subst) (if (null? G4447@subst) (G3052@syntax-violation 'import '"cannot rename unbound identifier" G4446@sym) (if (eq? G4446@sym (caar G4447@subst)) (values (cdar G4447@subst) (cdr G4447@subst)) ((lambda (G444a@a) (call-with-values (lambda () (G4431@exclude G4446@sym (cdr G4447@subst))) (lambda (G444e@G444c G444f@G444d) ((lambda (G4452@subst G4453@old) (values G4453@old (cons G444a@a G4452@subst))) G444f@G444d G444e@G444c)))) (car G4447@subst)))))) (if (null? G442c@sym*) (values '() G442d@subst) (call-with-values (lambda () (G4431@exclude (car G442c@sym*) G442d@subst)) (lambda (G4434@G4432 G4435@G4433) ((lambda (G4438@subst G4439@old) (call-with-values (lambda () (G4271@exclude* (cdr G442c@sym*) G4438@subst)) (lambda (G443e@G443c G443f@G443d) ((lambda (G4442@subst G4443@old*) (values (cons G4439@old G4443@old*) G4442@subst)) G443f@G443d G443e@G443c)))) G4435@G4433 G4434@G4432)))))) '#f))) (set! G4273@find* (lambda (G4424@sym* G4425@subst) (map (lambda (G4428@x) ((lambda (G442a@t) (if G442a@t (cdr G442a@t) (G3052@syntax-violation 'import '"cannot find identifier" G4428@x))) (assq G4428@x G4425@subst))) G4424@sym*))) (set! G4275@rem* (lambda (G441c@sym* G441d@subst) ((letrec ((G4420@f (lambda (G4422@subst) (if (null? G4422@subst) '() (if (memq (caar G4422@subst) G441c@sym*) (G4420@f (cdr G4422@subst)) (cons (car G4422@subst) (G4420@f (cdr G4422@subst)))))))) G4420@f) G441d@subst))) (set! G4277@remove-dups (lambda (G441a@ls) (if (null? G441a@ls) '() (if (memq (car G441a@ls) (cdr G441a@ls)) (G4277@remove-dups (cdr G441a@ls)) (cons (car G441a@ls) (G4277@remove-dups (cdr G441a@ls))))))) (set! G4279@parse-library-name (lambda (G4334@spec) ((lambda (G4337@subversion? G4339@subversion-pred G433b@version-pred) (begin (set! G4337@subversion? (lambda (G4416@x) ((lambda (G4418@x) (and (integer? G4418@x) (exact? G4418@x) (>= G4418@x '0))) (G3058@syntax->datum G4416@x)))) (set! G4339@subversion-pred (lambda (G43b6@x*) ((lambda (G43b8@t) ((lambda (G43ba@ls/false) (if (and G43ba@ls/false (apply (lambda (G43bc@n) (G4337@subversion? G43bc@n)) G43ba@ls/false)) (apply (lambda (G43be@n) (lambda (G43c0@x) (= G43c0@x (G3058@syntax->datum G43be@n)))) G43ba@ls/false) ((lambda (G43c2@t) ((lambda (G43c4@ls/false) (if (and G43c4@ls/false (apply (lambda (G43c6@p? G43c7@sub*) (eq? (G3058@syntax->datum G43c6@p?) 'and)) G43c4@ls/false)) (apply (lambda (G43ca@p? G43cb@sub*) ((lambda (G43ce@p*) (lambda (G43d0@x) (for-all (lambda (G43d2@p) (G43d2@p G43d0@x)) G43ce@p*))) (map G4339@subversion-pred G43cb@sub*))) G43c4@ls/false) ((lambda (G43d4@t) ((lambda (G43d6@ls/false) (if (and G43d6@ls/false (apply (lambda (G43d8@p? G43d9@sub*) (eq? (G3058@syntax->datum G43d8@p?) 'or)) G43d6@ls/false)) (apply (lambda (G43dc@p? G43dd@sub*) ((lambda (G43e0@p*) (lambda (G43e2@x) (exists (lambda (G43e4@p) (G43e4@p G43e2@x)) G43e0@p*))) (map G4339@subversion-pred G43dd@sub*))) G43d6@ls/false) ((lambda (G43e6@t) ((lambda (G43e8@ls/false) (if (and G43e8@ls/false (apply (lambda (G43ea@p? G43eb@sub) (eq? (G3058@syntax->datum G43ea@p?) 'not)) G43e8@ls/false)) (apply (lambda (G43ee@p? G43ef@sub) ((lambda (G43f2@p) (lambda (G43f4@x) (not (G43f2@p G43f4@x)))) (G4339@subversion-pred G43ef@sub))) G43e8@ls/false) ((lambda (G43f6@t) ((lambda (G43f8@ls/false) (if (and G43f8@ls/false (apply (lambda (G43fa@p? G43fb@n) (and (eq? (G3058@syntax->datum G43fa@p?) '<=) (G4337@subversion? G43fb@n))) G43f8@ls/false)) (apply (lambda (G43fe@p? G43ff@n) (lambda (G4402@x) (<= G4402@x (G3058@syntax->datum G43ff@n)))) G43f8@ls/false) ((lambda (G4404@t) ((lambda (G4406@ls/false) (if (and G4406@ls/false (apply (lambda (G4408@p? G4409@n) (and (eq? (G3058@syntax->datum G4408@p?) '>=) (G4337@subversion? G4409@n))) G4406@ls/false)) (apply (lambda (G440c@p? G440d@n) (lambda (G4410@x) (>= G4410@x (G3058@syntax->datum G440d@n)))) G4406@ls/false) ((lambda (G4412@t) ((lambda (G4414@ls/false) (if G4414@ls/false (apply (lambda () (G3052@syntax-violation 'import '"invalid sub-version spec" G4334@spec G43b6@x*)) G4414@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4412@t))) (G2f65@syntax-dispatch G4412@t '_))) G4404@t))) (G2f65@syntax-dispatch G4404@t '(any any)))) G43f6@t))) (G2f65@syntax-dispatch G43f6@t '(any any)))) G43e6@t))) (G2f65@syntax-dispatch G43e6@t '(any any)))) G43d4@t))) (G2f65@syntax-dispatch G43d4@t '(any . each-any)))) G43c2@t))) (G2f65@syntax-dispatch G43c2@t '(any . each-any)))) G43b8@t))) (G2f65@syntax-dispatch G43b8@t 'any))) G43b6@x*))) (set! G433b@version-pred (lambda (G4366@x*) ((lambda (G4368@t) ((lambda (G436a@ls/false) (if G436a@ls/false (apply (lambda () (lambda (G436c@x) '#t)) G436a@ls/false) ((lambda (G436e@t) ((lambda (G4370@ls/false) (if (and G4370@ls/false (apply (lambda (G4372@c G4373@ver*) (eq? (G3058@syntax->datum G4372@c) 'and)) G4370@ls/false)) (apply (lambda (G4376@c G4377@ver*) ((lambda (G437a@p*) (lambda (G437c@x) (for-all (lambda (G437e@p) (G437e@p G437c@x)) G437a@p*))) (map G433b@version-pred G4377@ver*))) G4370@ls/false) ((lambda (G4380@t) ((lambda (G4382@ls/false) (if (and G4382@ls/false (apply (lambda (G4384@c G4385@ver*) (eq? (G3058@syntax->datum G4384@c) 'or)) G4382@ls/false)) (apply (lambda (G4388@c G4389@ver*) ((lambda (G438c@p*) (lambda (G438e@x) (exists (lambda (G4390@p) (G4390@p G438e@x)) G438c@p*))) (map G433b@version-pred G4389@ver*))) G4382@ls/false) ((lambda (G4392@t) ((lambda (G4394@ls/false) (if (and G4394@ls/false (apply (lambda (G4396@c G4397@ver) (eq? (G3058@syntax->datum G4396@c) 'not)) G4394@ls/false)) (apply (lambda (G439a@c G439b@ver) ((lambda (G439e@p) (lambda (G43a0@x) (not (G439e@p G43a0@x)))) (G433b@version-pred G439b@ver))) G4394@ls/false) ((lambda (G43a2@t) ((lambda (G43a4@ls/false) (if G43a4@ls/false (apply (lambda (G43a6@sub*) ((lambda (G43a8@p*) (lambda (G43aa@x) ((letrec ((G43ac@f (lambda (G43ae@p* G43af@x) (if (null? G43ae@p*) '#t (if (null? G43af@x) '#f (and ((car G43ae@p*) (car G43af@x)) (G43ac@f (cdr G43ae@p*) (cdr G43af@x)))))))) G43ac@f) G43a8@p* G43aa@x))) (map G4339@subversion-pred G43a6@sub*))) G43a4@ls/false) ((lambda (G43b2@t) ((lambda (G43b4@ls/false) (if G43b4@ls/false (apply (lambda () (G3052@syntax-violation 'import '"invalid version spec" G4334@spec G4366@x*)) G43b4@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G43b2@t))) (G2f65@syntax-dispatch G43b2@t '_))) G43a2@t))) (G2f65@syntax-dispatch G43a2@t 'each-any))) G4392@t))) (G2f65@syntax-dispatch G4392@t '(any any)))) G4380@t))) (G2f65@syntax-dispatch G4380@t '(any . each-any)))) G436e@t))) (G2f65@syntax-dispatch G436e@t '(any . each-any)))) G4368@t))) (G2f65@syntax-dispatch G4368@t '()))) G4366@x*))) ((letrec ((G433c@f (lambda (G433e@x) ((lambda (G4340@t) ((lambda (G4342@ls/false) (if G4342@ls/false (apply (lambda (G4344@version-spec*) (values '() (G433b@version-pred G4344@version-spec*))) G4342@ls/false) ((lambda (G4346@t) ((lambda (G4348@ls/false) (if (and G4348@ls/false (apply (lambda (G434a@x G434b@x*) (G426b@idsyn? G434a@x)) G4348@ls/false)) (apply (lambda (G434e@x G434f@x*) (call-with-values (lambda () (G433c@f G434f@x*)) (lambda (G4354@G4352 G4355@G4353) ((lambda (G4358@pred G4359@name) (values (cons (G3058@syntax->datum G434e@x) G4359@name) G4358@pred)) G4355@G4353 G4354@G4352)))) G4348@ls/false) ((lambda (G435c@t) ((lambda (G435e@ls/false) (if G435e@ls/false (apply (lambda () (values '() (lambda (G4360@x) '#t))) G435e@ls/false) ((lambda (G4362@t) ((lambda (G4364@ls/false) (if G4364@ls/false (apply (lambda () (G3052@syntax-violation '#f '"invalid import spec" G4334@spec)) G4364@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4362@t))) (G2f65@syntax-dispatch G4362@t '_))) G435c@t))) (G2f65@syntax-dispatch G435c@t '()))) G4346@t))) (G2f65@syntax-dispatch G4346@t '(any . any)))) G4340@t))) (G2f65@syntax-dispatch G4340@t '(each-any)))) G433e@x)))) G433c@f) G4334@spec))) '#f '#f '#f))) (set! G427b@import-library (lambda (G4326@spec*) (call-with-values (lambda () (G4279@parse-library-name G4326@spec*)) (lambda (G432a@G4328 G432b@G4329) ((lambda (G432e@pred G432f@name) (begin (if (null? G432f@name) (G3052@syntax-violation 'import '"empty library name" G4326@spec*) (void)) ((lambda (G4332@lib) (begin (if (not G4332@lib) (G3052@syntax-violation 'import '"cannot find library with required name" G432f@name) (void)) (if (not (G432e@pred (G2b4e@G29c6@library-version G4332@lib))) (G3052@syntax-violation 'import '"library does not satisfy version specification" G4326@spec* G4332@lib) (void)) ((G2fd6@imp-collector) G4332@lib) (G2b52@G29ce@library-subst G4332@lib))) (G2b76@G2a16@find-library-by-name G432f@name)))) G432b@G4329 G432a@G4328))))) (set! G427d@get-import (lambda (G4298@spec) ((lambda (G429a@t) ((lambda (G429c@ls/false) (if (and G429c@ls/false (apply (lambda (G429e@x G429f@x*) (not (memq (G3058@syntax->datum G429e@x) '(for rename except only prefix library)))) G429c@ls/false)) (apply (lambda (G42a2@x G42a3@x*) (G427b@import-library (cons G42a2@x G42a3@x*))) G429c@ls/false) ((lambda (G42a6@t) ((lambda (G42a8@ls/false) (if (and G42a8@ls/false (apply (lambda (G42aa@rename G42ab@isp G42ac@old* G42ad@new*) (and (eq? (G3058@syntax->datum G42aa@rename) 'rename) (for-all G426b@idsyn? G42ac@old*) (for-all G426b@idsyn? G42ad@new*))) G42a8@ls/false)) (apply (lambda (G42b2@rename G42b3@isp G42b4@old* G42b5@new*) ((lambda (G42ba@subst G42bb@old* G42bc@new*) ((lambda (G42c0@old-label*) ((lambda (G42c2@subst) (G426f@merge-substs (map cons G42bc@new* G42c0@old-label*) G42c2@subst)) (G4275@rem* G42bb@old* G42ba@subst))) (G4273@find* G42bb@old* G42ba@subst))) (G427d@get-import G42b3@isp) (map G3058@syntax->datum G42b4@old*) (map G3058@syntax->datum G42b5@new*))) G42a8@ls/false) ((lambda (G42c4@t) ((lambda (G42c6@ls/false) (if (and G42c6@ls/false (apply (lambda (G42c8@except G42c9@isp G42ca@sym*) (and (eq? (G3058@syntax->datum G42c8@except) 'except) (for-all G426b@idsyn? G42ca@sym*))) G42c6@ls/false)) (apply (lambda (G42ce@except G42cf@isp G42d0@sym*) ((lambda (G42d4@subst) (G4275@rem* (map G3058@syntax->datum G42d0@sym*) G42d4@subst)) (G427d@get-import G42cf@isp))) G42c6@ls/false) ((lambda (G42d6@t) ((lambda (G42d8@ls/false) (if (and G42d8@ls/false (apply (lambda (G42da@only G42db@isp G42dc@sym*) (and (eq? (G3058@syntax->datum G42da@only) 'only) (for-all G426b@idsyn? G42dc@sym*))) G42d8@ls/false)) (apply (lambda (G42e0@only G42e1@isp G42e2@sym*) ((lambda (G42e6@subst G42e7@sym*) ((lambda (G42ea@sym*) ((lambda (G42ec@lab*) (map cons G42ea@sym* G42ec@lab*)) (G4273@find* G42ea@sym* G42e6@subst))) (G4277@remove-dups G42e7@sym*))) (G427d@get-import G42e1@isp) (map G3058@syntax->datum G42e2@sym*))) G42d8@ls/false) ((lambda (G42ee@t) ((lambda (G42f0@ls/false) (if (and G42f0@ls/false (apply (lambda (G42f2@prefix G42f3@isp G42f4@p) (and (eq? (G3058@syntax->datum G42f2@prefix) 'prefix) (G426b@idsyn? G42f4@p))) G42f0@ls/false)) (apply (lambda (G42f8@prefix G42f9@isp G42fa@p) ((lambda (G42fe@subst G42ff@prefix) (map (lambda (G4302@x) (cons (string->symbol (string-append G42ff@prefix (symbol->string (car G4302@x)))) (cdr G4302@x))) G42fe@subst)) (G427d@get-import G42f9@isp) (symbol->string (G3058@syntax->datum G42fa@p)))) G42f0@ls/false) ((lambda (G4304@t) ((lambda (G4306@ls/false) (if (and G4306@ls/false (apply (lambda (G4308@library G4309@spec*) (eq? (G3058@syntax->datum G4308@library) 'library)) G4306@ls/false)) (apply (lambda (G430c@library G430d@spec*) (G427b@import-library G430d@spec*)) G4306@ls/false) ((lambda (G4310@t) ((lambda (G4312@ls/false) (if (and G4312@ls/false (apply (lambda (G4314@for G4315@isp G4316@rest) (eq? (G3058@syntax->datum G4314@for) 'for)) G4312@ls/false)) (apply (lambda (G431a@for G431b@isp G431c@rest) (G427d@get-import G431b@isp)) G4312@ls/false) ((lambda (G4320@t) ((lambda (G4322@ls/false) (if G4322@ls/false (apply (lambda (G4324@spec) (G3052@syntax-violation 'import '"invalid import spec" G4324@spec)) G4322@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4320@t))) (G2f65@syntax-dispatch G4320@t 'any))) G4310@t))) (G2f65@syntax-dispatch G4310@t '(any any . any)))) G4304@t))) (G2f65@syntax-dispatch G4304@t '(any each-any)))) G42ee@t))) (G2f65@syntax-dispatch G42ee@t '(any any any)))) G42d6@t))) (G2f65@syntax-dispatch G42d6@t '(any any . each-any)))) G42c4@t))) (G2f65@syntax-dispatch G42c4@t '(any any . each-any)))) G42a6@t))) (G2f65@syntax-dispatch G42a6@t '(any any . #(each (any any)))))) G429a@t))) (G2f65@syntax-dispatch G429a@t '(any . each-any)))) G4298@spec))) (set! G427f@add-imports! (lambda (G4288@imp G4289@h) ((lambda (G428c@subst) (for-each (lambda (G428e@x) ((lambda (G4290@name G4291@label) ((lambda (G4294@t) (if G4294@t ((lambda (G4296@l) (if (not (eq? G4296@l G4291@label)) (G426d@dup-error G4290@name) (void))) G4294@t) (hashtable-set! G4289@h G4290@name G4291@label))) (hashtable-ref G4289@h G4290@name '#f))) (car G428e@x) (cdr G428e@x))) G428c@subst)) (G427d@get-import G4288@imp)))) (lambda (G4280@imp*) ((letrec ((G4282@f (lambda (G4284@imp* G4285@h) (if (null? G4284@imp*) (hashtable-entries G4285@h) (begin (G427f@add-imports! (car G4284@imp*) G4285@h) (G4282@f (cdr G4284@imp*) G4285@h)))))) G4282@f) G4280@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fce@make-top-rib (lambda (G446c@names G446d@labels) ((lambda (G4470@rib) (begin (vector-for-each (lambda (G4472@name G4473@label) (begin (if (not (symbol? G4472@name)) (error 'make-top-rib '"BUG: not a symbol" G4472@name) (void)) (G2d19@extend-rib/nc! G4470@rib (G2d30@make-stx G4472@name G2cde@top-mark* '() '()) G4473@label))) G446c@names G446d@labels) G4470@rib)) (G2d13@make-cache-rib)))) (set! G2fd0@make-collector (lambda () ((lambda (G4476@ls) (lambda G447a ((lambda (G447b) (if (= G447b '0) (apply (lambda () G4476@ls) G447a) (if (= G447b '1) (apply (lambda (G4478@x) (set! G4476@ls (G2cd7@set-cons G4478@x G4476@ls))) G447a) (error 'apply '"invalid arg count")))) (length G447a)))) '()))) (set! G2fd2@inv-collector (G2902@G283b@make-parameter (lambda G447c@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G447e@x) (begin (if (not (procedure? G447e@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G447e@x) (void)) G447e@x)))) (set! G2fd4@vis-collector (G2902@G283b@make-parameter (lambda G4480@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4482@x) (begin (if (not (procedure? G4482@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4482@x) (void)) G4482@x)))) (set! G2fd6@imp-collector (G2902@G283b@make-parameter (lambda G4484@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4486@x) (begin (if (not (procedure? G4486@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4486@x) (void)) G4486@x)))) (set! G2fd8@chi-library-internal (lambda (G4488@e* G4489@rib G448a@top?) (call-with-values (lambda () (G2fc2@chi-body* G4488@e* '() '() '() '() '() '() '() G4489@rib G448a@top?)) (lambda (G4496@G448e G4497@G448f G4498@G4490 G4499@G4491 G449a@G4492 G449b@G4493 G449c@G4494 G449d@G4495) ((lambda (G44a6@exp* G44a7@_kwd* G44a8@mod** G44a9@rhs* G44aa@lex* G44ab@mr G44ac@r G44ad@e*) (values (append (apply append (reverse G44a8@mod**)) G44ad@e*) G44ac@r G44ab@mr (reverse G44aa@lex*) (reverse G44a9@rhs*) G44a6@exp*)) G449d@G4495 G449c@G4494 G449b@G4493 G449a@G4492 G4499@G4491 G4498@G4490 G4497@G448f G4496@G448e))))) (set! G2fda@chi-interaction-expr (lambda (G44b6@e G44b7@rib G44b8@r) (call-with-values (lambda () (G2fc2@chi-body* (list G44b6@e) G44b8@r G44b8@r '() '() '() '() '() G44b7@rib '#t)) (lambda (G44c4@G44bc G44c5@G44bd G44c6@G44be G44c7@G44bf G44c8@G44c0 G44c9@G44c1 G44ca@G44c2 G44cb@G44c3) ((lambda (G44d4@_exp* G44d5@_kwd* G44d6@mod** G44d7@rhs* G44d8@lex* G44d9@mr G44da@r G44db@e*) ((lambda (G44e4@e*) ((lambda (G44e6@e) (values G44e6@e G44da@r)) (if (null? G44e4@e*) (G2cc4@G2c36@build-void) (if (null? (cdr G44e4@e*)) (car G44e4@e*) (G2cc3@G2c34@build-sequence '#f G44e4@e*))))) (G2f97@expand-interaction-rhs*/init* (reverse G44d8@lex*) (reverse G44d7@rhs*) (append (apply append (reverse G44d6@mod**)) G44db@e*) G44da@r G44d9@mr))) G44cb@G44c3 G44ca@G44c2 G44c9@G44c1 G44c8@G44c0 G44c7@G44bf G44c6@G44be G44c5@G44bd G44c4@G44bc))))) (set! G2fdc@library-body-expander (lambda (G44e8@name G44e9@main-exp* G44ea@imp* G44eb@b* G44ec@top?) ((lambda (G44f3@itc) (begin (set! G44f3@itc (G2fd0@make-collector)) ((lambda (G44f8@G44f4@imp-collector G44f9@G44f5@top-level-context G44fa@G44f6@imp-collector G44fb@G44f7@top-level-context) ((lambda (G4500@swap) (dynamic-wind G4500@swap (lambda () (call-with-values (lambda () (G2fcc@parse-import-spec* G44ea@imp*)) (lambda (G4504@G4502 G4505@G4503) ((lambda (G4508@subst-labels G4509@subst-names) ((lambda (G450c@rib) ((lambda (G450f@wrap) (begin (set! G450f@wrap (lambda (G457b@x) (G2d30@make-stx G457b@x G2cde@top-mark* (list G450c@rib) '()))) ((lambda (G4510@b* G4511@main-exp* G4512@rtc G4513@vtc) ((lambda (G451c@G4518@inv-collector G451d@G4519@vis-collector G451e@G451a@inv-collector G451f@G451b@vis-collector) ((lambda (G4524@swap) (dynamic-wind G4524@swap (lambda () (call-with-values (lambda () (G2fd8@chi-library-internal G4510@b* G450c@rib G44ec@top?)) (lambda (G452c@G4526 G452d@G4527 G452e@G4528 G452f@G4529 G4530@G452a G4531@G452b) ((lambda (G4538@internal-exp* G4539@rhs* G453a@lex* G453b@mr G453c@r G453d@init*) (call-with-values (lambda () (G2fc6@parse-exports (append G4511@main-exp* G4538@internal-exp*))) (lambda (G4546@G4544 G4547@G4545) ((lambda (G454a@exp-id* G454b@exp-name*) (begin (G2d1d@seal-rib! G450c@rib) ((lambda (G454e@init*) ((lambda (G4550@rhs*) ((lambda () (begin (G2d1f@unseal-rib! G450c@rib) ((lambda (G4552@loc* G4553@export-subst) ((lambda (G4557@errstr) (begin (set! G4557@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G303c@make-export-env/macros G453a@lex* G4552@loc* G453c@r)) (lambda (G455b@G4558 G455c@G4559 G455d@G455a) ((lambda (G4561@macro* G4562@global* G4563@export-env) (begin (for-each (lambda (G4567@s) ((lambda (G4569@name G456a@label) ((lambda (G456d@p) (if G456d@p ((lambda (G456f@b) ((lambda (G4571@type) (if (eq? G4571@type 'mutable) (G3052@syntax-violation 'export G4557@errstr G4569@name) (void))) (car G456f@b))) (cdr G456d@p)) (void))) (assq G456a@label G4563@export-env))) (car G4567@s) (cdr G4567@s))) G4553@export-subst) ((lambda (G4573@invoke-body G4574@invoke-definitions) (values (G44f3@itc) (G4512@rtc) (G4513@vtc) (G2cc3@G2c34@build-sequence '#f (append G4574@invoke-definitions (list G4573@invoke-body))) G4561@macro* G4553@export-subst G4563@export-env)) (G2cc6@G2c3a@build-letrec* '#f G453a@lex* G4550@rhs* (G3038@build-exports G4562@global* G454e@init*)) (map G2cbf@G2b84@build-global-define (map cdr G4562@global*))))) G455d@G455a G455c@G4559 G455b@G4558))))) '#f)) (map G2ce4@gen-global G453a@lex*) (G303a@make-export-subst G454b@exp-name* G454a@exp-id*)))))) (G2f99@chi-rhs* G4539@rhs* G453c@r G453b@mr))) (G2f85@chi-expr* G453d@init* G453c@r G453b@mr)))) G4547@G4545 G4546@G4544)))) G4531@G452b G4530@G452a G452f@G4529 G452e@G4528 G452d@G4527 G452c@G4526)))) G4524@swap)) (lambda () (begin ((lambda (G4577@t) (begin (G451c@G4518@inv-collector G451e@G451a@inv-collector) (set! G451e@G451a@inv-collector G4577@t))) (G451c@G4518@inv-collector)) ((lambda (G4579@t) (begin (G451d@G4519@vis-collector G451f@G451b@vis-collector) (set! G451f@G451b@vis-collector G4579@t))) (G451d@G4519@vis-collector)))))) G2fd2@inv-collector G2fd4@vis-collector G4512@rtc G4513@vtc)) (map G450f@wrap G44eb@b*) (map G450f@wrap G44e9@main-exp*) (G2fd0@make-collector) (G2fd0@make-collector)))) '#f)) (G2fce@make-top-rib G4509@subst-names G4508@subst-labels))) G4505@G4503 G4504@G4502)))) G4500@swap)) (lambda () (begin ((lambda (G457d@t) (begin (G44f8@G44f4@imp-collector G44fa@G44f6@imp-collector) (set! G44fa@G44f6@imp-collector G457d@t))) (G44f8@G44f4@imp-collector)) ((lambda (G457f@t) (begin (G44f9@G44f5@top-level-context G44fb@G44f7@top-level-context) (set! G44fb@G44f7@top-level-context G457f@t))) (G44f9@G44f5@top-level-context)))))) G2fd6@imp-collector G3060@top-level-context G44f3@itc '#f))) '#f))) (set! G2fde@core-library-expander (lambda (G4581@e G4582@verify-name) (call-with-values (lambda () (G2fca@parse-library G4581@e)) (lambda (G4589@G4585 G458a@G4586 G458b@G4587 G458c@G4588) ((lambda (G4591@b* G4592@imp* G4593@exp* G4594@name*) (call-with-values (lambda () (G2fc8@parse-library-name G4594@name*)) (lambda (G459b@G4599 G459c@G459a) ((lambda (G459f@ver G45a0@name) (begin (G4582@verify-name G45a0@name) (call-with-values (lambda () (G2fdc@library-body-expander G45a0@name G4593@exp* G4592@imp* G4591@b* '#f)) (lambda (G45aa@G45a3 G45ab@G45a4 G45ac@G45a5 G45ad@G45a6 G45ae@G45a7 G45af@G45a8 G45b0@G45a9) ((lambda (G45b8@export-env G45b9@export-subst G45ba@visit-code G45bb@invoke-code G45bc@visit-req* G45bd@invoke-req* G45be@imp*) (values G45a0@name G459f@ver G45be@imp* G45bd@invoke-req* G45bc@visit-req* G45bb@invoke-code G45ba@visit-code G45b9@export-subst G45b8@export-env)) G45b0@G45a9 G45af@G45a8 G45ae@G45a7 G45ad@G45a6 G45ac@G45a5 G45ab@G45a4 G45aa@G45a3))))) G459c@G459a G459b@G4599)))) G458c@G4588 G458b@G4587 G458a@G4586 G4589@G4585))))) (set! G2fe0@parse-top-level-program (lambda (G45c6@e*) ((lambda (G45c8@t) ((lambda (G45ca@ls/false) (if (and G45ca@ls/false (apply (lambda (G45cc@import G45cd@imp* G45ce@b*) (eq? (G3058@syntax->datum G45cc@import) 'import)) G45ca@ls/false)) (apply (lambda (G45d2@import G45d3@imp* G45d4@b*) (values G45d3@imp* G45d4@b*)) G45ca@ls/false) ((lambda (G45d8@t) ((lambda (G45da@ls/false) (if (and G45da@ls/false (apply (lambda (G45dc@import G45dd@x G45de@y) (eq? (G3058@syntax->datum G45dc@import) 'import)) G45da@ls/false)) (apply (lambda (G45e2@import G45e3@x G45e4@y) (G3052@syntax-violation 'expander '"invalid syntax of top-level program" (G2d60@syntax-car G45c6@e*))) G45da@ls/false) ((lambda (G45e8@t) ((lambda (G45ea@ls/false) (if G45ea@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45ea@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G45e8@t))) (G2f65@syntax-dispatch G45e8@t '_))) G45d8@t))) (G2f65@syntax-dispatch G45d8@t '((any . any) . any)))) G45c8@t))) (G2f65@syntax-dispatch G45c8@t '((any . each-any) . each-any)))) G45c6@e*))) (set! G2fe2@top-level-expander (lambda (G45ec@e*) (call-with-values (lambda () (G2fe0@parse-top-level-program G45ec@e*)) (lambda (G45f0@G45ee G45f1@G45ef) ((lambda (G45f4@b* G45f5@imp*) (call-with-values (lambda () (G2fdc@library-body-expander '() '() G45f5@imp* G45f4@b* '#t)) (lambda (G45ff@G45f8 G4600@G45f9 G4601@G45fa G4602@G45fb G4603@G45fc G4604@G45fd G4605@G45fe) ((lambda (G460d@export-env G460e@export-subst G460f@visit-code G4610@invoke-code G4611@visit-req* G4612@invoke-req* G4613@imp*) (values G4612@invoke-req* G4610@invoke-code)) G4605@G45fe G4604@G45fd G4603@G45fc G4602@G45fb G4601@G45fa G4600@G45f9 G45ff@G45f8)))) G45f1@G45ef G45f0@G45ee))))) (set! G2fe8@G2fe3 (make-record-type-descriptor 'env '#f 'G2fe6 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fea@G2fe5 '#f) (set! G2fec@G2fe4 (make-record-constructor-descriptor G2fe8@G2fe3 '#f G2fea@G2fe5)) (set! G2fef@env? (record-predicate G2fe8@G2fe3)) (set! G2ff1@make-env (record-constructor G2fec@G2fe4)) (set! G2ff3@env-names (record-accessor G2fe8@G2fe3 '0)) (set! G2ff5@env-labels (record-accessor G2fe8@G2fe3 '1)) (set! G2ff7@env-itc (record-accessor G2fe8@G2fe3 '2)) (set! G2ff9@set-env-names! (record-mutator G2fe8@G2fe3 '0)) (set! G2ffb@set-env-labels! (record-mutator G2fe8@G2fe3 '1)) (set! G2ffd@set-env-itc! (record-mutator G2fe8@G2fe3 '2)) (set! G2fff@rp (G28ff@G2835@make-record-printer 'env (lambda (G461b@x G461c@p G461d@wr) (display '"#<environment>" G461c@p)))) (set! G3005@G3000 (make-record-type-descriptor 'interaction-env '#f 'G3003 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3007@G3002 '#f) (set! G3009@G3001 (make-record-constructor-descriptor G3005@G3000 '#f G3007@G3002)) (set! G300c@interaction-env? (record-predicate G3005@G3000)) (set! G300e@make-interaction-env (record-constructor G3009@G3001)) (set! G3010@interaction-env-rib (record-accessor G3005@G3000 '0)) (set! G3012@interaction-env-r (record-accessor G3005@G3000 '1)) (set! G3014@interaction-env-locs (record-accessor G3005@G3000 '2)) (set! G3016@set-interaction-env-rib! (record-mutator G3005@G3000 '0)) (set! G3018@set-interaction-env-r! (record-mutator G3005@G3000 '1)) (set! G301a@set-interaction-env-locs! (record-mutator G3005@G3000 '2)) (set! G301c@rp (G28ff@G2835@make-record-printer 'interaction-env (lambda (G4621@x G4622@p G4623@wr) (display '"#<environment>" G4622@p)))) (set! G301e@interaction-environment-symbols (lambda () (G3026@environment-symbols (G305e@interaction-environment)))) (set! G3020@environment-bindings (lambda (G4627@e) (vector->list (vector-map (lambda (G4629@name G462a@label) (G3022@parse-binding (cons G4629@name (G2b7c@G2a22@imported-label->binding G462a@label)))) (G2ff3@env-names G4627@e) (G2ff5@env-labels G4627@e))))) (set! G3022@parse-binding (lambda (G462d@b) (cons (car G462d@b) ((lambda (G462f@t) (if (memv G462f@t '(core-prim global)) 'procedure (if (memv G462f@t '(core-macro macro global-macro)) 'syntax (if (memv G462f@t '($core-rtd)) 'record (if (eq? (car G462d@b) (cadr G462d@b)) 'syntax 'unknown))))) (cadr G462d@b))))) (set! G3024@environment? (lambda (G4631@x) (or (G2fef@env? G4631@x) (G300c@interaction-env? G4631@x)))) (set! G3026@environment-symbols (lambda (G4633@x) (if (G2fef@env? G4633@x) (vector->list (G2ff3@env-names G4633@x)) (if (G300c@interaction-env? G4633@x) (map values (G2cfd@rib-sym* (G3010@interaction-env-rib G4633@x))) (assertion-violation 'environment-symbols '"not an environment" G4633@x))))) (set! G3028@environment (lambda G4635@imp* ((lambda (G4637@itc) ((lambda (G463b@G4639@imp-collector G463c@G463a@imp-collector) ((lambda (G463f@swap) (dynamic-wind G463f@swap (lambda () (call-with-values (lambda () (G2fcc@parse-import-spec* G4635@imp*)) (lambda (G4643@G4641 G4644@G4642) ((lambda (G4647@subst-labels G4648@subst-names) (G2ff1@make-env G4648@subst-names G4647@subst-labels G4637@itc)) G4644@G4642 G4643@G4641)))) G463f@swap)) (lambda () ((lambda (G464b@t) (begin (G463b@G4639@imp-collector G463c@G463a@imp-collector) (set! G463c@G463a@imp-collector G464b@t))) (G463b@G4639@imp-collector))))) G2fd6@imp-collector G4637@itc)) (G2fd0@make-collector)))) (set! G302a@null-environment (lambda (G464d@n) (begin (if (not (eqv? G464d@n '5)) (assertion-violation 'null-environment '"not 5" G464d@n) (void)) (G3028@environment '(psyntax null-environment-5))))) (set! G302c@scheme-report-environment (lambda (G464f@n) (begin (if (not (eqv? G464f@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G464f@n) (void)) (G3028@environment '(psyntax scheme-report-environment-5))))) (set! G302e@expand (lambda (G4651@x G4652@env) (if (G2fef@env? G4652@env) ((lambda (G4655@rib) ((lambda (G4657@x G4658@itc G4659@rtc G465a@vtc) ((lambda (G465f@x) (begin (G2d1d@seal-rib! G4655@rib) (values G465f@x (G4659@rtc)))) ((lambda (G4669@G4661@top-level-context G466a@G4662@inv-collector G466b@G4663@vis-collector G466c@G4664@imp-collector G466d@G4665@top-level-context G466e@G4666@inv-collector G466f@G4667@vis-collector G4670@G4668@imp-collector) ((lambda (G4679@swap) (dynamic-wind G4679@swap (lambda () (G2f89@chi-expr G4657@x '() '())) G4679@swap)) (lambda () (begin ((lambda (G467b@t) (begin (G4669@G4661@top-level-context G466d@G4665@top-level-context) (set! G466d@G4665@top-level-context G467b@t))) (G4669@G4661@top-level-context)) ((lambda (G467d@t) (begin (G466a@G4662@inv-collector G466e@G4666@inv-collector) (set! G466e@G4666@inv-collector G467d@t))) (G466a@G4662@inv-collector)) ((lambda (G467f@t) (begin (G466b@G4663@vis-collector G466f@G4667@vis-collector) (set! G466f@G4667@vis-collector G467f@t))) (G466b@G4663@vis-collector)) ((lambda (G4681@t) (begin (G466c@G4664@imp-collector G4670@G4668@imp-collector) (set! G4670@G4668@imp-collector G4681@t))) (G466c@G4664@imp-collector)))))) G3060@top-level-context G2fd2@inv-collector G2fd4@vis-collector G2fd6@imp-collector '#f G4659@rtc G465a@vtc G4658@itc))) (G2d30@make-stx G4651@x G2cde@top-mark* (list G4655@rib) '()) (G2ff7@env-itc G4652@env) (G2fd0@make-collector) (G2fd0@make-collector))) (G2fce@make-top-rib (G2ff3@env-names G4652@env) (G2ff5@env-labels G4652@env))) (if (G300c@interaction-env? G4652@env) ((lambda (G4683@rib G4684@r G4685@rtc) ((lambda (G4689@x) (call-with-values (lambda () ((lambda (G4695@G468d@top-level-context G4696@G468e@inv-collector G4697@G468f@vis-collector G4698@G4690@imp-collector G4699@G4691@top-level-context G469a@G4692@inv-collector G469b@G4693@vis-collector G469c@G4694@imp-collector) ((lambda (G46a5@swap) (dynamic-wind G46a5@swap (lambda () (G2fda@chi-interaction-expr G4689@x G4683@rib G4684@r)) G46a5@swap)) (lambda () (begin ((lambda (G46a7@t) (begin (G4695@G468d@top-level-context G4699@G4691@top-level-context) (set! G4699@G4691@top-level-context G46a7@t))) (G4695@G468d@top-level-context)) ((lambda (G46a9@t) (begin (G4696@G468e@inv-collector G469a@G4692@inv-collector) (set! G469a@G4692@inv-collector G46a9@t))) (G4696@G468e@inv-collector)) ((lambda (G46ab@t) (begin (G4697@G468f@vis-collector G469b@G4693@vis-collector) (set! G469b@G4693@vis-collector G46ab@t))) (G4697@G468f@vis-collector)) ((lambda (G46ad@t) (begin (G4698@G4690@imp-collector G469c@G4694@imp-collector) (set! G469c@G4694@imp-collector G46ad@t))) (G4698@G4690@imp-collector)))))) G3060@top-level-context G2fd2@inv-collector G2fd4@vis-collector G2fd6@imp-collector G4652@env G4685@rtc (G2fd0@make-collector) (G2fd0@make-collector))) (lambda (G46af@G468b G46b0@G468c) ((lambda (G46b3@r^ G46b4@e) (begin (G3018@set-interaction-env-r! G4652@env G46b3@r^) (values G46b4@e (G4685@rtc)))) G46b0@G468c G46af@G468b)))) (G2d30@make-stx G4651@x G2cde@top-mark* (list G4683@rib) '()))) (G3010@interaction-env-rib G4652@env) (G3012@interaction-env-r G4652@env) (G2fd0@make-collector)) (assertion-violation 'expand '"not an environment" G4652@env))))) (set! G3030@eval (lambda (G46b7@x G46b8@env) (begin (if (not (G3024@environment? G46b8@env)) (error 'eval '"not an environment" G46b8@env) (void)) (call-with-values (lambda () (G302e@expand G46b7@x G46b8@env)) (lambda (G46bd@G46bb G46be@G46bc) ((lambda (G46c1@invoke-req* G46c2@x) (begin (for-each G2b7d@G2a24@invoke-library G46c1@invoke-req*) (eval-core (G2956@G290e@expanded->core G46c2@x)))) G46be@G46bc G46bd@G46bb)))))) (set! G3032@library-expander (lambda G472a ((lambda (G472b) (if (= G472b '3) (apply (lambda (G46c5@x G46c6@filename G46c7@verify-name) ((lambda (G46cc@build-visit-code G46ce@visit!) (begin (set! G46cc@build-visit-code (lambda (G4718@macro*) (if (null? G4718@macro*) (G2cc4@G2c36@build-void) (G2cc3@G2c34@build-sequence '#f (map (lambda (G471a@x) ((lambda (G471c@loc G471d@src) (list 'set! G471c@loc G471d@src)) (car G471a@x) (cddr G471a@x))) G4718@macro*))))) (set! G46ce@visit! (lambda (G4710@macro*) (for-each (lambda (G4712@x) ((lambda (G4714@loc G4715@proc) (set-symbol-value! G4714@loc G4715@proc)) (car G4712@x) (cadr G4712@x))) G4710@macro*))) (call-with-values (lambda () (G2fde@core-library-expander G46c5@x G46c7@verify-name)) (lambda (G46d8@G46cf G46d9@G46d0 G46da@G46d1 G46db@G46d2 G46dc@G46d3 G46dd@G46d4 G46de@G46d5 G46df@G46d6 G46e0@G46d7) ((lambda (G46ea@export-env G46eb@export-subst G46ec@macro* G46ed@invoke-code G46ee@vis* G46ef@inv* G46f0@imp* G46f1@ver G46f2@name) ((lambda (G46fc@id G46fd@name G46fe@ver G46ff@imp* G4700@vis* G4701@inv* G4702@visit-proc G4703@invoke-proc G4704@visit-code G4705@invoke-code) (begin (G2b7b@G2a20@install-library G46fc@id G46fd@name G46fe@ver G46ff@imp* G4700@vis* G4701@inv* G46eb@export-subst G46ea@export-env G4702@visit-proc G4703@invoke-proc G4704@visit-code G4705@invoke-code '#t G46c6@filename) (values G46fc@id G46fd@name G46fe@ver G46ff@imp* G4700@vis* G4701@inv* G4705@invoke-code G4704@visit-code G46eb@export-subst G46ea@export-env))) (gensym) G46f2@name G46f1@ver (map G2b81@G2a2c@library-spec G46f0@imp*) (map G2b81@G2a2c@library-spec G46ee@vis*) (map G2b81@G2a2c@library-spec G46ef@inv*) (lambda () (G46ce@visit! G46ec@macro*)) (lambda () (eval-core (G2956@G290e@expanded->core G46ed@invoke-code))) (G46cc@build-visit-code G46ec@macro*) G46ed@invoke-code)) G46e0@G46d7 G46df@G46d6 G46de@G46d5 G46dd@G46d4 G46dc@G46d3 G46db@G46d2 G46da@G46d1 G46d9@G46d0 G46d8@G46cf))))) '#f '#f)) G472a) (if (= G472b '2) (apply (lambda (G4720@x G4721@filename) (G3032@library-expander G4720@x G4721@filename (lambda (G4724@x) (values)))) G472a) (if (= G472b '1) (apply (lambda (G4726@x) (G3032@library-expander G4726@x '#f (lambda (G4728@x) (values)))) G472a) (error 'apply '"invalid arg count"))))) (length G472a)))) (set! G3034@boot-library-expand (lambda (G472c@x) (call-with-values (lambda () (G3032@library-expander G472c@x)) (lambda (G4738@G472e G4739@G472f G473a@G4730 G473b@G4731 G473c@G4732 G473d@G4733 G473e@G4734 G473f@G4735 G4740@G4736 G4741@G4737) ((lambda (G474c@export-env G474d@export-subst G474e@visit-code G474f@invoke-code G4750@inv* G4751@vis* G4752@imp* G4753@ver G4754@name G4755@id) (values G4754@name G474f@invoke-code G474d@export-subst G474c@export-env)) G4741@G4737 G4740@G4736 G473f@G4735 G473e@G4734 G473d@G4733 G473c@G4732 G473b@G4731 G473a@G4730 G4739@G472f G4738@G472e))))) (set! G3036@rev-map-append (lambda (G4760@f G4761@ls G4762@ac) (if (null? G4761@ls) G4762@ac (G3036@rev-map-append G4760@f (cdr G4761@ls) (cons (G4760@f (car G4761@ls)) G4762@ac))))) (set! G3038@build-exports (lambda (G4766@lex*+loc* G4767@init*) (G2cc3@G2c34@build-sequence '#f (cons (G2cc4@G2c36@build-void) (G3036@rev-map-append (lambda (G476a@x) (list 'set! (cdr G476a@x) (car G476a@x))) G4766@lex*+loc* G4767@init*))))) (set! G303a@make-export-subst (lambda (G476c@name* G476d@id*) (map (lambda (G4770@name G4771@id) ((lambda (G4774@label) (begin (if (not G4774@label) (G3052@syntax-violation '#f '"cannot export unbound identifier" G4771@id) (void)) (cons G4770@name G4774@label))) (G2d80@id->label G4771@id))) G476c@name* G476d@id*))) (set! G303c@make-export-env/macros (lambda (G4776@lex* G4777@loc* G4778@r) ((lambda (G477d@lookup) (begin (set! G477d@lookup (lambda (G479a@x) ((letrec ((G479c@f (lambda (G479e@x G479f@lex* G47a0@loc*) (if (pair? G479f@lex*) (if (eq? G479e@x (car G479f@lex*)) (car G47a0@loc*) (G479c@f G479e@x (cdr G479f@lex*) (cdr G47a0@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G479c@f) G479a@x G4776@lex* G4777@loc*))) ((letrec ((G477e@f (lambda (G4780@r G4781@env G4782@global* G4783@macro*) (if (null? G4780@r) (values G4781@env G4782@global* G4783@macro*) ((lambda (G4788@x) ((lambda (G478a@label G478b@b) ((lambda (G478e@t) (if (memv G478e@t '(lexical)) ((lambda (G4790@v) ((lambda (G4792@loc G4793@type) (G477e@f (cdr G4780@r) (cons (cons* G478a@label G4793@type G4792@loc) G4781@env) (cons (cons (G2ef1@lexical-var G4790@v) G4792@loc) G4782@global*) G4783@macro*)) (G477d@lookup (G2ef1@lexical-var G4790@v)) (if (G2ef3@lexical-mutable? G4790@v) 'mutable 'global))) (G2d8a@binding-value G478b@b)) (if (memv G478e@t '(local-macro)) ((lambda (G4796@loc) (G477e@f (cdr G4780@r) (cons (cons* G478a@label 'global-macro G4796@loc) G4781@env) G4782@global* (cons (cons G4796@loc (G2d8a@binding-value G478b@b)) G4783@macro*))) (gensym)) (if (memv G478e@t '(local-macro!)) ((lambda (G4798@loc) (G477e@f (cdr G4780@r) (cons (cons* G478a@label 'global-macro! G4798@loc) G4781@env) G4782@global* (cons (cons G4798@loc (G2d8a@binding-value G478b@b)) G4783@macro*))) (gensym)) (if (memv G478e@t '($rtd $module)) (G477e@f (cdr G4780@r) (cons G4788@x G4781@env) G4782@global* G4783@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d88@binding-type G478b@b) (G2d8a@binding-value G478b@b))))))) (G2d88@binding-type G478b@b))) (car G4788@x) (cdr G4788@x))) (car G4780@r)))))) G477e@f) G4778@r '() '() '()))) '#f))) (set! G303e@generate-temporaries (lambda (G47a4@ls) ((lambda (G47a6@t) ((lambda (G47a8@ls/false) (if G47a8@ls/false (apply (lambda (G47aa@ls) (map (lambda (G47ac@x) (G2d30@make-stx ((lambda (G47ae@x) (if (or (symbol? G47ae@x) (string? G47ae@x)) (gensym G47ae@x) (gensym 't))) (G3058@syntax->datum G47ac@x)) G2cde@top-mark* '() '())) G47aa@ls)) G47a8@ls/false) ((lambda (G47b0@t) ((lambda (G47b2@ls/false) (if G47b2@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47b2@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G47b0@t))) (G2f65@syntax-dispatch G47b0@t '_))) G47a6@t))) (G2f65@syntax-dispatch G47a6@t 'each-any))) G47a4@ls))) (set! G3040@free-identifier=? (lambda (G47b4@x G47b5@y) (if (G2d66@id? G47b4@x) (if (G2d66@id? G47b5@y) (G2d6e@free-id=? G47b4@x G47b5@y) (assertion-violation 'free-identifier=? '"not an identifier" G47b5@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47b4@x)))) (set! G3042@bound-identifier=? (lambda (G47b8@x G47b9@y) (if (G2d66@id? G47b8@x) (if (G2d66@id? G47b9@y) (G2d6c@bound-id=? G47b8@x G47b9@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47b9@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47b8@x)))) (set! G3044@make-source-condition (lambda (G47bc@x) ((lambda (G47c6@G47c1 G47c8@G47c3 G47ca@G47c2 G47cd@G47c0 G47cf@make-source-condition G47d1@G47be G47d3@G47bf G47d5@source-condition? G47d7@source-filename G47d9@source-character) (begin (set! G47c6@G47c1 (make-record-type-descriptor '&source-information G4c36@G4987@&condition-rtd 'G47c4 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47c8@G47c3 '#f) (set! G47ca@G47c2 (make-record-constructor-descriptor G47c6@G47c1 G4c37@G4989@&condition-rcd G47c8@G47c3)) (set! G47cd@G47c0 (record-predicate G47c6@G47c1)) (set! G47cf@make-source-condition (record-constructor G47ca@G47c2)) (set! G47d1@G47be (record-accessor G47c6@G47c1 '0)) (set! G47d3@G47bf (record-accessor G47c6@G47c1 '1)) (set! G47d5@source-condition? (condition-predicate G47c6@G47c1)) (set! G47d7@source-filename (condition-accessor G47c6@G47c1 G47d1@G47be)) (set! G47d9@source-character (condition-accessor G47c6@G47c1 G47d3@G47bf)) (if (pair? G47bc@x) (G47cf@make-source-condition (car G47bc@x) (cdr G47bc@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3046@extract-position-condition (lambda (G47da@x) (G3044@make-source-condition (G3048@expression-position G47da@x)))) (set! G3048@expression-position (lambda (G47dc@x) (and (G2d2e@stx? G47dc@x) ((lambda (G47de@x) (and (G28f7@G2825@annotation? G47de@x) (G28f8@G2827@annotation-source G47de@x))) (G2d32@stx-expr G47dc@x))))) (set! G304a@assertion-error (lambda (G47e0@expr G47e1@pos) (raise (condition (G4c66@G4a49@make-assertion-violation) (G4c78@G4a79@make-who-condition 'assert) (G4c3c@G49dc@make-message-condition '"assertion failed") (G4c6e@G4a5f@make-irritants-condition (list G47e0@expr)) (G3044@make-source-condition G47e1@pos))))) (set! G304c@syntax-error (lambda (G47e4@x . G47e6@args) (begin (if (not (for-all string? G47e6@args)) (assertion-violation 'syntax-error '"invalid argument" G47e6@args) (void)) (raise (condition (G4c3c@G49dc@make-message-condition (if (null? G47e6@args) '"invalid syntax" (apply string-append G47e6@args))) (G4c9a@G4ad3@make-syntax-violation (G3058@syntax->datum G47e4@x) '#f) (G3046@extract-position-condition G47e4@x) (G304e@extract-trace G47e4@x)))))) (set! G304e@extract-trace (lambda (G47e8@x) ((lambda (G47f1@G47ec G47f3@G47ee G47f5@G47ed G47f8@G47eb G47fa@make-trace G47fc@G47ea G47fe@trace? G4800@trace-form) (begin (set! G47f1@G47ec (make-record-type-descriptor '&trace G4c36@G4987@&condition-rtd 'G47ef '#f '#f '#((immutable form)))) (set! G47f3@G47ee '#f) (set! G47f5@G47ed (make-record-constructor-descriptor G47f1@G47ec G4c37@G4989@&condition-rcd G47f3@G47ee)) (set! G47f8@G47eb (record-predicate G47f1@G47ec)) (set! G47fa@make-trace (record-constructor G47f5@G47ed)) (set! G47fc@G47ea (record-accessor G47f1@G47ec '0)) (set! G47fe@trace? (condition-predicate G47f1@G47ec)) (set! G4800@trace-form (condition-accessor G47f1@G47ec G47fc@G47ea)) ((letrec ((G4801@f (lambda (G4803@x) (if (G2d2e@stx? G4803@x) (apply condition (G47fa@make-trace G4803@x) (map G4801@f (G2d38@stx-ae* G4803@x))) (if (G28f7@G2825@annotation? G4803@x) (G47fa@make-trace (G2d30@make-stx G4803@x '() '() '())) (condition)))))) G4801@f) G47e8@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3050@syntax-violation* (lambda (G4805@who G4806@msg G4807@form G4808@condition-object) (begin (if (not (string? G4806@msg)) (assertion-violation 'syntax-violation '"message is not a string" G4806@msg) (void)) ((lambda (G480d@who) (raise (condition (if G480d@who (G4c78@G4a79@make-who-condition G480d@who) (condition)) (G4c3c@G49dc@make-message-condition G4806@msg) G4808@condition-object (G3046@extract-position-condition G4807@form) (G304e@extract-trace G4807@form)))) (if (or (string? G4805@who) (symbol? G4805@who)) G4805@who (if (not G4805@who) ((lambda (G480f@t) ((lambda (G4811@ls/false) (if (and G4811@ls/false (apply (lambda (G4813@id) (G2d66@id? G4813@id)) G4811@ls/false)) (apply (lambda (G4815@id) (G3058@syntax->datum G4815@id)) G4811@ls/false) ((lambda (G4817@t) ((lambda (G4819@ls/false) (if (and G4819@ls/false (apply (lambda (G481b@id G481c@rest) (G2d66@id? G481b@id)) G4819@ls/false)) (apply (lambda (G481f@id G4820@rest) (G3058@syntax->datum G481f@id)) G4819@ls/false) ((lambda (G4823@t) ((lambda (G4825@ls/false) (if G4825@ls/false (apply (lambda () '#f) G4825@ls/false) (G3052@syntax-violation '#f '"invalid syntax" G4823@t))) (G2f65@syntax-dispatch G4823@t '_))) G4817@t))) (G2f65@syntax-dispatch G4817@t '(any . any)))) G480f@t))) (G2f65@syntax-dispatch G480f@t 'any))) G4807@form) (assertion-violation 'syntax-violation '"invalid who argument" G4805@who))))))) (set! G3052@syntax-violation (lambda G4835 ((lambda (G4836) (if (= G4836 '3) (apply (lambda (G4827@who G4828@msg G4829@form) (G3052@syntax-violation G4827@who G4828@msg G4829@form '#f)) G4835) (if (= G4836 '4) (apply (lambda (G482d@who G482e@msg G482f@form G4830@subform) (G3050@syntax-violation* G482d@who G482e@msg G482f@form (G4c9a@G4ad3@make-syntax-violation (G3058@syntax->datum G482f@form) (G3058@syntax->datum G4830@subform)))) G4835) (error 'apply '"invalid arg count")))) (length G4835)))) (set! G3054@identifier? (lambda (G4837@x) (G2d66@id? G4837@x))) (set! G3056@datum->syntax (lambda (G4839@id G483a@datum) (if (G2d66@id? G4839@id) (G2d44@datum->stx G4839@id G483a@datum) (assertion-violation 'datum->syntax '"not an identifier" G4839@id)))) (set! G3058@syntax->datum (lambda (G483d@x) (G2d7c@stx->datum G483d@x))) (set! G305a@compile-r6rs-top-level (lambda (G483f@x*) (call-with-values (lambda () (G2fe2@top-level-expander G483f@x*)) (lambda (G4843@G4841 G4844@G4842) ((lambda (G4847@invoke-code G4848@lib*) (lambda () (begin (for-each G2b7d@G2a24@invoke-library G4848@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2956@G290e@expanded->core G4847@invoke-code)) (void)) (eval-core (G2956@G290e@expanded->core G4847@invoke-code))))) G4844@G4842 G4843@G4841))))) (set! G305c@pre-compile-r6rs-top-level (lambda (G484b@x*) (call-with-values (lambda () (G2fe2@top-level-expander G484b@x*)) (lambda (G484f@G484d G4850@G484e) ((lambda (G4853@invoke-code G4854@lib*) (begin (for-each G2b7d@G2a24@invoke-library G4854@lib*) (G2900@G2837@compile-core (G2956@G290e@expanded->core G4853@invoke-code)))) G4850@G484e G484f@G484d))))) (set! G305e@interaction-environment ((lambda (G4857@the-env) (lambda () (or G4857@the-env ((lambda (G4859@lib G485a@rib) (begin ((lambda (G485d@subst) (begin (G2d07@set-rib-sym*! G485a@rib (map car G485d@subst)) (G2d09@set-rib-mark**! G485a@rib (map (lambda (G485f@x) G2cde@top-mark*) G485d@subst)) (G2d0b@set-rib-label*! G485a@rib (map cdr G485d@subst)))) (G2b52@G29ce@library-subst G4859@lib)) ((lambda (G4861@env) (begin (set! G4857@the-env G4861@env) G4861@env)) (G300e@make-interaction-env G485a@rib '() '())))) (G2b76@G2a16@find-library-by-name '(mosh interaction)) (G2d13@make-cache-rib))))) '#f)) (set! G3060@top-level-context (G2902@G283b@make-parameter '#f)) (begin (set! G4972@G3060@top-level-context G3060@top-level-context) (set! G4971@G305e@interaction-environment G305e@interaction-environment) (set! G4970@G305c@pre-compile-r6rs-top-level G305c@pre-compile-r6rs-top-level) (set! G496f@G305a@compile-r6rs-top-level G305a@compile-r6rs-top-level) (set! G496e@G3058@syntax->datum G3058@syntax->datum) (set! G496d@G3056@datum->syntax G3056@datum->syntax) (set! G496c@G3054@identifier? G3054@identifier?) (set! G496b@G3052@syntax-violation G3052@syntax-violation) (set! G496a@G3050@syntax-violation* G3050@syntax-violation*) (set! G4969@G304e@extract-trace G304e@extract-trace) (set! G4968@G304c@syntax-error G304c@syntax-error) (set! G4967@G304a@assertion-error G304a@assertion-error) (set! G4966@G3048@expression-position G3048@expression-position) (set! G4965@G3046@extract-position-condition G3046@extract-position-condition) (set! G4964@G3044@make-source-condition G3044@make-source-condition) (set! G4963@G3042@bound-identifier=? G3042@bound-identifier=?) (set! G4962@G3040@free-identifier=? G3040@free-identifier=?) (set! G4961@G303e@generate-temporaries G303e@generate-temporaries) (set! G4960@G303c@make-export-env/macros G303c@make-export-env/macros) (set! G495f@G303a@make-export-subst G303a@make-export-subst) (set! G495e@G3038@build-exports G3038@build-exports) (set! G495d@G3036@rev-map-append G3036@rev-map-append) (set! G495c@G3034@boot-library-expand G3034@boot-library-expand) (set! G495b@G3032@library-expander G3032@library-expander) (set! G495a@G3030@eval G3030@eval) (set! G4959@G302e@expand G302e@expand) (set! G4958@G302c@scheme-report-environment G302c@scheme-report-environment) (set! G4957@G302a@null-environment G302a@null-environment) (set! G4956@G3028@environment G3028@environment) (set! G4955@G3026@environment-symbols G3026@environment-symbols) (set! G4954@G3024@environment? G3024@environment?) (set! G4953@G3022@parse-binding G3022@parse-binding) (set! G4952@G3020@environment-bindings G3020@environment-bindings) (set! G4951@G301e@interaction-environment-symbols G301e@interaction-environment-symbols) (set! G4950@G301c@rp G301c@rp) (set! G494f@G301a@set-interaction-env-locs! G301a@set-interaction-env-locs!) (set! G494e@G3018@set-interaction-env-r! G3018@set-interaction-env-r!) (set! G494d@G3016@set-interaction-env-rib! G3016@set-interaction-env-rib!) (set! G494c@G3014@interaction-env-locs G3014@interaction-env-locs) (set! G494b@G3012@interaction-env-r G3012@interaction-env-r) (set! G494a@G3010@interaction-env-rib G3010@interaction-env-rib) (set! G4949@G300e@make-interaction-env G300e@make-interaction-env) (set! G4948@G300c@interaction-env? G300c@interaction-env?) (set! G4947@G3009@G3001 G3009@G3001) (set! G4946@G3007@G3002 G3007@G3002) (set! G4945@G3005@G3000 G3005@G3000) (set! G4944@G2fff@rp G2fff@rp) (set! G4943@G2ffd@set-env-itc! G2ffd@set-env-itc!) (set! G4942@G2ffb@set-env-labels! G2ffb@set-env-labels!) (set! G4941@G2ff9@set-env-names! G2ff9@set-env-names!) (set! G4940@G2ff7@env-itc G2ff7@env-itc) (set! G493f@G2ff5@env-labels G2ff5@env-labels) (set! G493e@G2ff3@env-names G2ff3@env-names) (set! G493d@G2ff1@make-env G2ff1@make-env) (set! G493c@G2fef@env? G2fef@env?) (set! G493b@G2fec@G2fe4 G2fec@G2fe4) (set! G493a@G2fea@G2fe5 G2fea@G2fe5) (set! G4939@G2fe8@G2fe3 G2fe8@G2fe3) (set! G4938@G2fe2@top-level-expander G2fe2@top-level-expander) (set! G4937@G2fe0@parse-top-level-program G2fe0@parse-top-level-program) (set! G4936@G2fde@core-library-expander G2fde@core-library-expander) (set! G4935@G2fdc@library-body-expander G2fdc@library-body-expander) (set! G4934@G2fda@chi-interaction-expr G2fda@chi-interaction-expr) (set! G4933@G2fd8@chi-library-internal G2fd8@chi-library-internal) (set! G4932@G2fd6@imp-collector G2fd6@imp-collector) (set! G4931@G2fd4@vis-collector G2fd4@vis-collector) (set! G4930@G2fd2@inv-collector G2fd2@inv-collector) (set! G492f@G2fd0@make-collector G2fd0@make-collector) (set! G492e@G2fce@make-top-rib G2fce@make-top-rib) (set! G492d@G2fcc@parse-import-spec* G2fcc@parse-import-spec*) (set! G492c@G2fca@parse-library G2fca@parse-library) (set! G492b@G2fc8@parse-library-name G2fc8@parse-library-name) (set! G492a@G2fc6@parse-exports G2fc6@parse-exports) (set! G4929@G2fc4@expand-transformer G2fc4@expand-transformer) (set! G4928@G2fc2@chi-body* G2fc2@chi-body*) (set! G4927@G2fc0@chi-internal-module G2fc0@chi-internal-module) (set! G4926@G2fbe@module-interface-exp-id* G2fbe@module-interface-exp-id*) (set! G4925@G2fbc@set-module-interface-exp-lab-vec! G2fbc@set-module-interface-exp-lab-vec!) (set! G4924@G2fba@set-module-interface-exp-id-vec! G2fba@set-module-interface-exp-id-vec!) (set! G4923@G2fb8@set-module-interface-first-mark! G2fb8@set-module-interface-first-mark!) (set! G4922@G2fb6@module-interface-exp-lab-vec G2fb6@module-interface-exp-lab-vec) (set! G4921@G2fb4@module-interface-exp-id-vec G2fb4@module-interface-exp-id-vec) (set! G4920@G2fb2@module-interface-first-mark G2fb2@module-interface-first-mark) (set! G491f@G2fb0@make-module-interface G2fb0@make-module-interface) (set! G491e@G2fae@module-interface? G2fae@module-interface?) (set! G491d@G2fab@G2fa3 G2fab@G2fa3) (set! G491c@G2fa9@G2fa4 G2fa9@G2fa4) (set! G491b@G2fa7@G2fa2 G2fa7@G2fa2) (set! G491a@G2fa1@parse-module G2fa1@parse-module) (set! G4919@G2f9f@chi-internal G2f9f@chi-internal) (set! G4918@G2f9d@find-dups G2f9d@find-dups) (set! G4917@G2f9b@find-bound=? G2f9b@find-bound=?) (set! G4916@G2f99@chi-rhs* G2f99@chi-rhs*) (set! G4915@G2f97@expand-interaction-rhs*/init* G2f97@expand-interaction-rhs*/init*) (set! G4914@G2f95@chi-rhs G2f95@chi-rhs) (set! G4913@G2f93@chi-defun G2f93@chi-defun) (set! G4912@G2f91@chi-lambda-clause* G2f91@chi-lambda-clause*) (set! G4911@G2f8f@chi-lambda-clause G2f8f@chi-lambda-clause) (set! G4910@G2f8d@verify-formals G2f8d@verify-formals) (set! G490f@G2f8b@chi-set! G2f8b@chi-set!) (set! G490e@G2f89@chi-expr G2f89@chi-expr) (set! G490d@G2f87@chi-application G2f87@chi-application) (set! G490c@G2f85@chi-expr* G2f85@chi-expr*) (set! G490b@G2f83@chi-global-macro G2f83@chi-global-macro) (set! G490a@G2f81@chi-local-macro G2f81@chi-local-macro) (set! G4909@G2f7f@chi-macro G2f7f@chi-macro) (set! G4908@G2f7d@do-macro-call G2f7d@do-macro-call) (set! G4907@G2f7b@local-macro-transformer G2f7b@local-macro-transformer) (set! G4906@G2f79@macro-transformer G2f79@macro-transformer) (set! G4905@G2f77@symbol-macro G2f77@symbol-macro) (set! G4904@G2f75@file-options-macro G2f75@file-options-macro) (set! G4903@G2f73@core-macro-transformer G2f73@core-macro-transformer) (set! G4902@G2f71@syntax-transformer G2f71@syntax-transformer) (set! G4901@G2f6f@ellipsis-map G2f6f@ellipsis-map) (set! G4900@G2f6d@syntax-case-transformer G2f6d@syntax-case-transformer) (set! G48ff@G2f6b@verify-literals G2f6b@verify-literals) (set! G48fe@G2f69@underscore? G2f69@underscore?) (set! G48fd@G2f67@ellipsis? G2f67@ellipsis?) (set! G48fc@G2f65@syntax-dispatch G2f65@syntax-dispatch) (set! G48fb@G2f63@convert-pattern G2f63@convert-pattern) (set! G48fa@G2f61@foreign-call-transformer G2f61@foreign-call-transformer) (set! G48f9@G2f5f@parameterize-macro G2f5f@parameterize-macro) (set! G48f8@G2f5d@incorrect-usage-macro G2f5d@incorrect-usage-macro) (set! G48f7@G2f5b@define-condition-type-macro G2f5b@define-condition-type-macro) (set! G48f6@G2f59@define-record-type-macro G2f59@define-record-type-macro) (set! G48f5@G2f57@define-struct-macro G2f57@define-struct-macro) (set! G48f4@G2f55@quasisyntax-macro G2f55@quasisyntax-macro) (set! G48f3@G2f53@quasiquote-macro G2f53@quasiquote-macro) (set! G48f2@G2f51@syntax-rules-macro G2f51@syntax-rules-macro) (set! G48f1@G2f4f@include-into-macro G2f4f@include-into-macro) (set! G48f0@G2f4d@include-macro G2f4d@include-macro) (set! G48ef@G2f4b@do-include G2f4b@do-include) (set! G48ee@G2f49@cond-macro G2f49@cond-macro) (set! G48ed@G2f47@and-macro G2f47@and-macro) (set! G48ec@G2f45@or-macro G2f45@or-macro) (set! G48eb@G2f43@let*-macro G2f43@let*-macro) (set! G48ea@G2f41@do-macro G2f41@do-macro) (set! G48e9@G2f3f@identifier-syntax-macro G2f3f@identifier-syntax-macro) (set! G48e8@G2f3d@endianness-macro G2f3d@endianness-macro) (set! G48e7@G2f3b@assert-macro G2f3b@assert-macro) (set! G48e6@G2f39@delay-macro G2f39@delay-macro) (set! G48e5@G2f37@time-macro G2f37@time-macro) (set! G48e4@G2f35@define-enumeration-macro G2f35@define-enumeration-macro) (set! G48e3@G2f33@guard-macro G2f33@guard-macro) (set! G48e2@G2f31@trace-letrec-syntax-macro G2f31@trace-letrec-syntax-macro) (set! G48e1@G2f2f@trace-let-syntax-macro G2f2f@trace-let-syntax-macro) (set! G48e0@G2f2d@trace-let/rec-syntax G2f2d@trace-let/rec-syntax) (set! G48df@G2f2b@trace-define-syntax-macro G2f2b@trace-define-syntax-macro) (set! G48de@G2f29@trace-define-macro G2f29@trace-define-macro) (set! G48dd@G2f27@trace-lambda-macro G2f27@trace-lambda-macro) (set! G48dc@G2f25@let*-values-macro G2f25@let*-values-macro) (set! G48db@G2f23@let-values-macro G2f23@let-values-macro) (set! G48da@G2f21@let-macro G2f21@let-macro) (set! G48d9@G2f1f@invalid-fmls-error G2f1f@invalid-fmls-error) (set! G48d8@G2f1d@with-syntax-macro G2f1d@with-syntax-macro) (set! G48d7@G2f1b@bless G2f1b@bless) (set! G48d6@G2f19@lambda-transformer G2f19@lambda-transformer) (set! G48d5@G2f17@case-lambda-transformer G2f17@case-lambda-transformer) (set! G48d4@G2f15@quote-transformer G2f15@quote-transformer) (set! G48d3@G2f13@case-macro G2f13@case-macro) (set! G48d2@G2f11@or-transformer G2f11@or-transformer) (set! G48d1@G2f0f@and-transformer G2f0f@and-transformer) (set! G48d0@G2f0d@if-transformer G2f0d@if-transformer) (set! G48cf@G2f0b@unless-macro G2f0b@unless-macro) (set! G48ce@G2f09@when-macro G2f09@when-macro) (set! G48cd@G2f07@record-constructor-descriptor-transformer G2f07@record-constructor-descriptor-transformer) (set! G48cc@G2f05@record-type-descriptor-transformer G2f05@record-type-descriptor-transformer) (set! G48cb@G2f03@type-descriptor-transformer G2f03@type-descriptor-transformer) (set! G48ca@G2f01@fluid-let-syntax-transformer G2f01@fluid-let-syntax-transformer) (set! G48c9@G2eff@letrec*-transformer G2eff@letrec*-transformer) (set! G48c8@G2efd@letrec-transformer G2efd@letrec-transformer) (set! G48c7@G2efb@letrec-helper G2efb@letrec-helper) (set! G48c6@G2ef9@add-lexicals G2ef9@add-lexicals) (set! G48c5@G2ef7@add-lexical G2ef7@add-lexical) (set! G48c4@G2ef5@set-lexical-mutable! G2ef5@set-lexical-mutable!) (set! G48c3@G2ef3@lexical-mutable? G2ef3@lexical-mutable?) (set! G48c2@G2ef1@lexical-var G2ef1@lexical-var) (set! G48c1@G2eef@scheme-stx G2eef@scheme-stx) (set! G48c0@G2eed@scheme-stx-hashtable G2eed@scheme-stx-hashtable) (set! G48bf@G2eeb@parse-define-syntax G2eeb@parse-define-syntax) (set! G48be@G2ee9@parse-define G2ee9@parse-define) (set! G48bd@G2da6@make-eval-transformer G2da6@make-eval-transformer) (set! G48bc@G2da4@variable-transformer-procedure G2da4@variable-transformer-procedure) (set! G48bb@G2da2@variable-transformer? G2da2@variable-transformer?) (set! G48ba@G2da0@make-variable-transformer G2da0@make-variable-transformer) (set! G48b9@G2d9e@sanitize-binding G2d9e@sanitize-binding) (set! G48b8@G2d8e@syntax-type G2d8e@syntax-type) (set! G48b7@G2d8c@raise-unbound-error G2d8c@raise-unbound-error) (set! G48b6@G2d8a@binding-value G2d8a@binding-value) (set! G48b5@G2d88@binding-type G2d88@binding-type) (set! G48b4@G2d86@make-binding G2d86@make-binding) (set! G48b3@G2d84@label->binding G2d84@label->binding) (set! G48b2@G2d82@id->real-label G2d82@id->real-label) (set! G48b1@G2d80@id->label G2d80@id->label) (set! G48b0@G2d7e@same-marks*? G2d7e@same-marks*?) (set! G48af@G2d7c@stx->datum G2d7c@stx->datum) (set! G48ae@G2d7a@strip G2d7a@strip) (set! G48ad@G2d78@strip-annotations G2d78@strip-annotations) (set! G48ac@G2d76@self-evaluating? G2d76@self-evaluating?) (set! G48ab@G2d74@bound-id-member? G2d74@bound-id-member?) (set! G48aa@G2d72@distinct-bound-ids? G2d72@distinct-bound-ids?) (set! G48a9@G2d70@valid-bound-ids? G2d70@valid-bound-ids?) (set! G48a8@G2d6e@free-id=? G2d6e@free-id=?) (set! G48a7@G2d6c@bound-id=? G2d6c@bound-id=?) (set! G48a6@G2d6a@same-marks? G2d6a@same-marks?) (set! G48a5@G2d68@id->sym G2d68@id->sym) (set! G48a4@G2d66@id? G2d66@id?) (set! G48a3@G2d64@syntax->list G2d64@syntax->list) (set! G48a2@G2d62@syntax-cdr G2d62@syntax-cdr) (set! G48a1@G2d60@syntax-car G2d60@syntax-car) (set! G48a0@G2d5e@syntax-list? G2d5e@syntax-list?) (set! G489f@G2d5c@syntax-null? G2d5c@syntax-null?) (set! G489e@G2d5a@syntax-vector? G2d5a@syntax-vector?) (set! G489d@G2d58@syntax-pair? G2d58@syntax-pair?) (set! G489c@G2d56@syntax-vector->list G2d56@syntax-vector->list) (set! G489b@G2d54@syntax-kind? G2d54@syntax-kind?) (set! G489a@G2d52@add-subst G2d52@add-subst) (set! G4899@G2d50@add-mark G2d50@add-mark) (set! G4898@G2d4e@mkstx G2d4e@mkstx) (set! G4897@G2d4c@join-wraps G2d4c@join-wraps) (set! G4896@G2d4a@anti-mark? G2d4a@anti-mark?) (set! G4895@G2d48@anti-mark G2d48@anti-mark) (set! G4894@G2d46@gen-mark G2d46@gen-mark) (set! G4893@G2d44@datum->stx G2d44@datum->stx) (set! G4892@G2d42@rp G2d42@rp) (set! G4891@G2d40@set-stx-ae*! G2d40@set-stx-ae*!) (set! G4890@G2d3e@set-stx-subst*! G2d3e@set-stx-subst*!) (set! G488f@G2d3c@set-stx-mark*! G2d3c@set-stx-mark*!) (set! G488e@G2d3a@set-stx-expr! G2d3a@set-stx-expr!) (set! G488d@G2d38@stx-ae* G2d38@stx-ae*) (set! G488c@G2d36@stx-subst* G2d36@stx-subst*) (set! G488b@G2d34@stx-mark* G2d34@stx-mark*) (set! G488a@G2d32@stx-expr G2d32@stx-expr) (set! G4889@G2d30@make-stx G2d30@make-stx) (set! G4888@G2d2e@stx? G2d2e@stx?) (set! G4887@G2d2b@G2d23 G2d2b@G2d23) (set! G4886@G2d29@G2d24 G2d29@G2d24) (set! G4885@G2d27@G2d22 G2d27@G2d22) (set! G4884@G2d21@make-full-rib G2d21@make-full-rib) (set! G4883@G2d1f@unseal-rib! G2d1f@unseal-rib!) (set! G4882@G2d1d@seal-rib! G2d1d@seal-rib!) (set! G4881@G2d1b@make-rib-map G2d1b@make-rib-map) (set! G4880@G2d19@extend-rib/nc! G2d19@extend-rib/nc!) (set! G487f@G2d17@extend-rib! G2d17@extend-rib!) (set! G487e@G2d15@find-label G2d15@find-label) (set! G487d@G2d13@make-cache-rib G2d13@make-cache-rib) (set! G487c@G2d11@make-empty-rib G2d11@make-empty-rib) (set! G487b@G2d0f@set-rib-cache! G2d0f@set-rib-cache!) (set! G487a@G2d0d@set-rib-sealed/freq! G2d0d@set-rib-sealed/freq!) (set! G4879@G2d0b@set-rib-label*! G2d0b@set-rib-label*!) (set! G4878@G2d09@set-rib-mark**! G2d09@set-rib-mark**!) (set! G4877@G2d07@set-rib-sym*! G2d07@set-rib-sym*!) (set! G4876@G2d05@rib-cache G2d05@rib-cache) (set! G4875@G2d03@rib-sealed/freq G2d03@rib-sealed/freq) (set! G4874@G2d01@rib-label* G2d01@rib-label*) (set! G4873@G2cff@rib-mark** G2cff@rib-mark**) (set! G4872@G2cfd@rib-sym* G2cfd@rib-sym*) (set! G4871@G2cfb@make-rib G2cfb@make-rib) (set! G4870@G2cf9@rib? G2cf9@rib?) (set! G486f@G2cf6@G2cee G2cf6@G2cee) (set! G486e@G2cf4@G2cef G2cf4@G2cef) (set! G486d@G2cf2@G2ced G2cf2@G2ced) (set! G486c@G2cec@gen-define-label G2cec@gen-define-label) (set! G486b@G2cea@gen-define-label+loc G2cea@gen-define-label+loc) (set! G486a@G2ce8@gen-top-level-label G2ce8@gen-top-level-label) (set! G4869@G2ce6@gen-label G2ce6@gen-label) (set! G4868@G2ce4@gen-global G2ce4@gen-global) (set! G4867@G2ce2@gen-lexical G2ce2@gen-lexical) (set! G4866@G2ce0@top-marked? G2ce0@top-marked?) (set! G4865@G2cde@top-mark* G2cde@top-mark*) (set! G4864@G2cd9@set-union G2cd9@set-union) (set! G4863@G2cd7@set-cons G2cd7@set-cons) (G2b73@G2a10@current-library-expander G3032@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G497c@G4977 G497e@G4979 G4980@G4978 G4983@&condition? G4985@make-&condition G4987@&condition-rtd G4989@&condition-rcd G49d3@G49ce G49d5@G49d0 G49d7@G49cf G49da@p? G49dc@make-message-condition G49de@G49cd@condition-message G49e0@message-condition? G49e2@condition-message G49e4@&message-rtd G49e6@&message-rcd G49ec@G49e7 G49ee@G49e9 G49f0@G49e8 G49f3@p? G49f5@make-warning G49f7@warning? G49f9@&warning-rtd G49fb@&warning-rcd G4a01@G49fc G4a03@G49fe G4a05@G49fd G4a08@p? G4a0a@make-serious-condition G4a0c@serious-condition? G4a0e@&serious-rtd G4a10@&serious-rcd G4a16@G4a11 G4a18@G4a13 G4a1a@G4a12 G4a1d@p? G4a1f@make-error G4a21@error? G4a23@&error-rtd G4a25@&error-rcd G4a2b@G4a26 G4a2d@G4a28 G4a2f@G4a27 G4a32@p? G4a34@make-violation G4a36@violation? G4a38@&violation-rtd G4a3a@&violation-rcd G4a40@G4a3b G4a42@G4a3d G4a44@G4a3c G4a47@p? G4a49@make-assertion-violation G4a4b@assertion-violation? G4a4d@&assertion-rtd G4a4f@&assertion-rcd G4a56@G4a51 G4a58@G4a53 G4a5a@G4a52 G4a5d@p? G4a5f@make-irritants-condition G4a61@G4a50@condition-irritants G4a63@irritants-condition? G4a65@condition-irritants G4a67@&irritants-rtd G4a69@&irritants-rcd G4a70@G4a6b G4a72@G4a6d G4a74@G4a6c G4a77@p? G4a79@make-who-condition G4a7b@G4a6a@condition-who G4a7d@who-condition? G4a7f@condition-who G4a81@&who-rtd G4a83@&who-rcd G4a89@G4a84 G4a8b@G4a86 G4a8d@G4a85 G4a90@p? G4a92@make-non-continuable-violation G4a94@non-continuable-violation? G4a96@&non-continuable-rtd G4a98@&non-continuable-rcd G4a9e@G4a99 G4aa0@G4a9b G4aa2@G4a9a G4aa5@p? G4aa7@make-implementation-restriction-violation G4aa9@implementation-restriction-violation? G4aab@&implementation-restriction-rtd G4aad@&implementation-restriction-rcd G4ab3@G4aae G4ab5@G4ab0 G4ab7@G4aaf G4aba@p? G4abc@make-lexical-violation G4abe@lexical-violation? G4ac0@&lexical-rtd G4ac2@&lexical-rcd G4aca@G4ac5 G4acc@G4ac7 G4ace@G4ac6 G4ad1@p? G4ad3@make-syntax-violation G4ad5@G4ac3@syntax-violation-form G4ad7@G4ac4@syntax-violation-subform G4ad9@syntax-violation? G4adb@syntax-violation-form G4add@syntax-violation-subform G4adf@&syntax-rtd G4ae1@&syntax-rcd G4ae7@G4ae2 G4ae9@G4ae4 G4aeb@G4ae3 G4aee@p? G4af0@make-undefined-violation G4af2@undefined-violation? G4af4@&undefined-rtd G4af6@&undefined-rcd G4afc@G4af7 G4afe@G4af9 G4b00@G4af8 G4b03@p? G4b05@make-i/o-error G4b07@i/o-error? G4b09@&i/o-rtd G4b0b@&i/o-rcd G4b11@G4b0c G4b13@G4b0e G4b15@G4b0d G4b18@p? G4b1a@make-i/o-read-error G4b1c@i/o-read-error? G4b1e@&i/o-read-rtd G4b20@&i/o-read-rcd G4b26@G4b21 G4b28@G4b23 G4b2a@G4b22 G4b2d@p? G4b2f@make-i/o-write-error G4b31@i/o-write-error? G4b33@&i/o-write-rtd G4b35@&i/o-write-rcd G4b3c@G4b37 G4b3e@G4b39 G4b40@G4b38 G4b43@p? G4b45@make-i/o-invalid-position-error G4b47@G4b36@i/o-error-position G4b49@i/o-invalid-position-error? G4b4b@i/o-error-position G4b4d@&i/o-invalid-position-rtd G4b4f@&i/o-invalid-position-rcd G4b56@G4b51 G4b58@G4b53 G4b5a@G4b52 G4b5d@p? G4b5f@make-i/o-filename-error G4b61@G4b50@i/o-error-filename G4b63@i/o-filename-error? G4b65@i/o-error-filename G4b67@&i/o-filename-rtd G4b69@&i/o-filename-rcd G4b6f@G4b6a G4b71@G4b6c G4b73@G4b6b G4b76@p? G4b78@make-i/o-file-protection-error G4b7a@i/o-file-protection-error? G4b7c@&i/o-file-protection-rtd G4b7e@&i/o-file-protection-rcd G4b84@G4b7f G4b86@G4b81 G4b88@G4b80 G4b8b@p? G4b8d@make-i/o-file-is-read-only-error G4b8f@i/o-file-is-read-only-error? G4b91@&i/o-file-is-read-only-rtd G4b93@&i/o-file-is-read-only-rcd G4b99@G4b94 G4b9b@G4b96 G4b9d@G4b95 G4ba0@p? G4ba2@make-i/o-file-already-exists-error G4ba4@i/o-file-already-exists-error? G4ba6@&i/o-file-already-exists-rtd G4ba8@&i/o-file-already-exists-rcd G4bae@G4ba9 G4bb0@G4bab G4bb2@G4baa G4bb5@p? G4bb7@make-i/o-file-does-not-exist-error G4bb9@i/o-file-does-not-exist-error? G4bbb@&i/o-file-does-not-exist-rtd G4bbd@&i/o-file-does-not-exist-rcd G4bc4@G4bbf G4bc6@G4bc1 G4bc8@G4bc0 G4bcb@p? G4bcd@make-i/o-port-error G4bcf@G4bbe@i/o-error-port G4bd1@i/o-port-error? G4bd3@i/o-error-port G4bd5@&i/o-port-rtd G4bd7@&i/o-port-rcd G4bdd@G4bd8 G4bdf@G4bda G4be1@G4bd9 G4be4@p? G4be6@make-i/o-decoding-error G4be8@i/o-decoding-error? G4bea@&i/o-decoding-rtd G4bec@&i/o-decoding-rcd G4bf3@G4bee G4bf5@G4bf0 G4bf7@G4bef G4bfa@p? G4bfc@make-i/o-encoding-error G4bfe@G4bed@i/o-encoding-error-char G4c00@i/o-encoding-error? G4c02@i/o-encoding-error-char G4c04@&i/o-encoding-rtd G4c06@&i/o-encoding-rcd G4c0c@G4c07 G4c0e@G4c09 G4c10@G4c08 G4c13@p? G4c15@make-no-infinities-violation G4c17@no-infinities-violation? G4c19@&no-infinities-rtd G4c1b@&no-infinities-rcd G4c21@G4c1c G4c23@G4c1e G4c25@G4c1d G4c28@p? G4c2a@make-no-nans-violation G4c2c@no-nans-violation? G4c2e@&no-nans-rtd G4c30@&no-nans-rcd) (begin (set! G497c@G4977 (make-record-type-descriptor '&condition '#f 'G497a '#f '#f '#())) (set! G497e@G4979 '#f) (set! G4980@G4978 (make-record-constructor-descriptor G497c@G4977 '#f G497e@G4979)) (set! G4983@&condition? (record-predicate G497c@G4977)) (set! G4985@make-&condition (record-constructor G4980@G4978)) (set! G4987@&condition-rtd G497c@G4977) (set! G4989@&condition-rcd G4980@G4978) (set! G49d3@G49ce (make-record-type-descriptor '&message G497c@G4977 'G49d1 '#f '#f '#((immutable message)))) (set! G49d5@G49d0 '#f) (set! G49d7@G49cf (make-record-constructor-descriptor G49d3@G49ce G4980@G4978 G49d5@G49d0)) (set! G49da@p? (record-predicate G49d3@G49ce)) (set! G49dc@make-message-condition (record-constructor G49d7@G49cf)) (set! G49de@G49cd@condition-message (record-accessor G49d3@G49ce '0)) (set! G49e0@message-condition? (condition-predicate G49d3@G49ce)) (set! G49e2@condition-message (condition-accessor G49d3@G49ce G49de@G49cd@condition-message)) (set! G49e4@&message-rtd G49d3@G49ce) (set! G49e6@&message-rcd G49d7@G49cf) (set! G49ec@G49e7 (make-record-type-descriptor '&warning G497c@G4977 'G49ea '#f '#f '#())) (set! G49ee@G49e9 '#f) (set! G49f0@G49e8 (make-record-constructor-descriptor G49ec@G49e7 G4980@G4978 G49ee@G49e9)) (set! G49f3@p? (record-predicate G49ec@G49e7)) (set! G49f5@make-warning (record-constructor G49f0@G49e8)) (set! G49f7@warning? (condition-predicate G49ec@G49e7)) (set! G49f9@&warning-rtd G49ec@G49e7) (set! G49fb@&warning-rcd G49f0@G49e8) (set! G4a01@G49fc (make-record-type-descriptor '&serious G497c@G4977 'G49ff '#f '#f '#())) (set! G4a03@G49fe '#f) (set! G4a05@G49fd (make-record-constructor-descriptor G4a01@G49fc G4980@G4978 G4a03@G49fe)) (set! G4a08@p? (record-predicate G4a01@G49fc)) (set! G4a0a@make-serious-condition (record-constructor G4a05@G49fd)) (set! G4a0c@serious-condition? (condition-predicate G4a01@G49fc)) (set! G4a0e@&serious-rtd G4a01@G49fc) (set! G4a10@&serious-rcd G4a05@G49fd) (set! G4a16@G4a11 (make-record-type-descriptor '&error G4a01@G49fc 'G4a14 '#f '#f '#())) (set! G4a18@G4a13 '#f) (set! G4a1a@G4a12 (make-record-constructor-descriptor G4a16@G4a11 G4a05@G49fd G4a18@G4a13)) (set! G4a1d@p? (record-predicate G4a16@G4a11)) (set! G4a1f@make-error (record-constructor G4a1a@G4a12)) (set! G4a21@error? (condition-predicate G4a16@G4a11)) (set! G4a23@&error-rtd G4a16@G4a11) (set! G4a25@&error-rcd G4a1a@G4a12) (set! G4a2b@G4a26 (make-record-type-descriptor '&violation G4a01@G49fc 'G4a29 '#f '#f '#())) (set! G4a2d@G4a28 '#f) (set! G4a2f@G4a27 (make-record-constructor-descriptor G4a2b@G4a26 G4a05@G49fd G4a2d@G4a28)) (set! G4a32@p? (record-predicate G4a2b@G4a26)) (set! G4a34@make-violation (record-constructor G4a2f@G4a27)) (set! G4a36@violation? (condition-predicate G4a2b@G4a26)) (set! G4a38@&violation-rtd G4a2b@G4a26) (set! G4a3a@&violation-rcd G4a2f@G4a27) (set! G4a40@G4a3b (make-record-type-descriptor '&assertion G4a2b@G4a26 'G4a3e '#f '#f '#())) (set! G4a42@G4a3d '#f) (set! G4a44@G4a3c (make-record-constructor-descriptor G4a40@G4a3b G4a2f@G4a27 G4a42@G4a3d)) (set! G4a47@p? (record-predicate G4a40@G4a3b)) (set! G4a49@make-assertion-violation (record-constructor G4a44@G4a3c)) (set! G4a4b@assertion-violation? (condition-predicate G4a40@G4a3b)) (set! G4a4d@&assertion-rtd G4a40@G4a3b) (set! G4a4f@&assertion-rcd G4a44@G4a3c) (set! G4a56@G4a51 (make-record-type-descriptor '&irritants G497c@G4977 'G4a54 '#f '#f '#((immutable irritants)))) (set! G4a58@G4a53 '#f) (set! G4a5a@G4a52 (make-record-constructor-descriptor G4a56@G4a51 G4980@G4978 G4a58@G4a53)) (set! G4a5d@p? (record-predicate G4a56@G4a51)) (set! G4a5f@make-irritants-condition (record-constructor G4a5a@G4a52)) (set! G4a61@G4a50@condition-irritants (record-accessor G4a56@G4a51 '0)) (set! G4a63@irritants-condition? (condition-predicate G4a56@G4a51)) (set! G4a65@condition-irritants (condition-accessor G4a56@G4a51 G4a61@G4a50@condition-irritants)) (set! G4a67@&irritants-rtd G4a56@G4a51) (set! G4a69@&irritants-rcd G4a5a@G4a52) (set! G4a70@G4a6b (make-record-type-descriptor '&who G497c@G4977 'G4a6e '#f '#f '#((immutable who)))) (set! G4a72@G4a6d '#f) (set! G4a74@G4a6c (make-record-constructor-descriptor G4a70@G4a6b G4980@G4978 G4a72@G4a6d)) (set! G4a77@p? (record-predicate G4a70@G4a6b)) (set! G4a79@make-who-condition (record-constructor G4a74@G4a6c)) (set! G4a7b@G4a6a@condition-who (record-accessor G4a70@G4a6b '0)) (set! G4a7d@who-condition? (condition-predicate G4a70@G4a6b)) (set! G4a7f@condition-who (condition-accessor G4a70@G4a6b G4a7b@G4a6a@condition-who)) (set! G4a81@&who-rtd G4a70@G4a6b) (set! G4a83@&who-rcd G4a74@G4a6c) (set! G4a89@G4a84 (make-record-type-descriptor '&non-continuable G4a2b@G4a26 'G4a87 '#f '#f '#())) (set! G4a8b@G4a86 '#f) (set! G4a8d@G4a85 (make-record-constructor-descriptor G4a89@G4a84 G4a2f@G4a27 G4a8b@G4a86)) (set! G4a90@p? (record-predicate G4a89@G4a84)) (set! G4a92@make-non-continuable-violation (record-constructor G4a8d@G4a85)) (set! G4a94@non-continuable-violation? (condition-predicate G4a89@G4a84)) (set! G4a96@&non-continuable-rtd G4a89@G4a84) (set! G4a98@&non-continuable-rcd G4a8d@G4a85) (set! G4a9e@G4a99 (make-record-type-descriptor '&implementation-restriction G4a2b@G4a26 'G4a9c '#f '#f '#())) (set! G4aa0@G4a9b '#f) (set! G4aa2@G4a9a (make-record-constructor-descriptor G4a9e@G4a99 G4a2f@G4a27 G4aa0@G4a9b)) (set! G4aa5@p? (record-predicate G4a9e@G4a99)) (set! G4aa7@make-implementation-restriction-violation (record-constructor G4aa2@G4a9a)) (set! G4aa9@implementation-restriction-violation? (condition-predicate G4a9e@G4a99)) (set! G4aab@&implementation-restriction-rtd G4a9e@G4a99) (set! G4aad@&implementation-restriction-rcd G4aa2@G4a9a) (set! G4ab3@G4aae (make-record-type-descriptor '&lexical G4a2b@G4a26 'G4ab1 '#f '#f '#())) (set! G4ab5@G4ab0 '#f) (set! G4ab7@G4aaf (make-record-constructor-descriptor G4ab3@G4aae G4a2f@G4a27 G4ab5@G4ab0)) (set! G4aba@p? (record-predicate G4ab3@G4aae)) (set! G4abc@make-lexical-violation (record-constructor G4ab7@G4aaf)) (set! G4abe@lexical-violation? (condition-predicate G4ab3@G4aae)) (set! G4ac0@&lexical-rtd G4ab3@G4aae) (set! G4ac2@&lexical-rcd G4ab7@G4aaf) (set! G4aca@G4ac5 (make-record-type-descriptor '&syntax G4a2b@G4a26 'G4ac8 '#f '#f '#((immutable form) (immutable subform)))) (set! G4acc@G4ac7 '#f) (set! G4ace@G4ac6 (make-record-constructor-descriptor G4aca@G4ac5 G4a2f@G4a27 G4acc@G4ac7)) (set! G4ad1@p? (record-predicate G4aca@G4ac5)) (set! G4ad3@make-syntax-violation (record-constructor G4ace@G4ac6)) (set! G4ad5@G4ac3@syntax-violation-form (record-accessor G4aca@G4ac5 '0)) (set! G4ad7@G4ac4@syntax-violation-subform (record-accessor G4aca@G4ac5 '1)) (set! G4ad9@syntax-violation? (condition-predicate G4aca@G4ac5)) (set! G4adb@syntax-violation-form (condition-accessor G4aca@G4ac5 G4ad5@G4ac3@syntax-violation-form)) (set! G4add@syntax-violation-subform (condition-accessor G4aca@G4ac5 G4ad7@G4ac4@syntax-violation-subform)) (set! G4adf@&syntax-rtd G4aca@G4ac5) (set! G4ae1@&syntax-rcd G4ace@G4ac6) (set! G4ae7@G4ae2 (make-record-type-descriptor '&undefined G4a2b@G4a26 'G4ae5 '#f '#f '#())) (set! G4ae9@G4ae4 '#f) (set! G4aeb@G4ae3 (make-record-constructor-descriptor G4ae7@G4ae2 G4a2f@G4a27 G4ae9@G4ae4)) (set! G4aee@p? (record-predicate G4ae7@G4ae2)) (set! G4af0@make-undefined-violation (record-constructor G4aeb@G4ae3)) (set! G4af2@undefined-violation? (condition-predicate G4ae7@G4ae2)) (set! G4af4@&undefined-rtd G4ae7@G4ae2) (set! G4af6@&undefined-rcd G4aeb@G4ae3) (set! G4afc@G4af7 (make-record-type-descriptor '&i/o G4a16@G4a11 'G4afa '#f '#f '#())) (set! G4afe@G4af9 '#f) (set! G4b00@G4af8 (make-record-constructor-descriptor G4afc@G4af7 G4a1a@G4a12 G4afe@G4af9)) (set! G4b03@p? (record-predicate G4afc@G4af7)) (set! G4b05@make-i/o-error (record-constructor G4b00@G4af8)) (set! G4b07@i/o-error? (condition-predicate G4afc@G4af7)) (set! G4b09@&i/o-rtd G4afc@G4af7) (set! G4b0b@&i/o-rcd G4b00@G4af8) (set! G4b11@G4b0c (make-record-type-descriptor '&i/o-read G4afc@G4af7 'G4b0f '#f '#f '#())) (set! G4b13@G4b0e '#f) (set! G4b15@G4b0d (make-record-constructor-descriptor G4b11@G4b0c G4b00@G4af8 G4b13@G4b0e)) (set! G4b18@p? (record-predicate G4b11@G4b0c)) (set! G4b1a@make-i/o-read-error (record-constructor G4b15@G4b0d)) (set! G4b1c@i/o-read-error? (condition-predicate G4b11@G4b0c)) (set! G4b1e@&i/o-read-rtd G4b11@G4b0c) (set! G4b20@&i/o-read-rcd G4b15@G4b0d) (set! G4b26@G4b21 (make-record-type-descriptor '&i/o-write G4afc@G4af7 'G4b24 '#f '#f '#())) (set! G4b28@G4b23 '#f) (set! G4b2a@G4b22 (make-record-constructor-descriptor G4b26@G4b21 G4b00@G4af8 G4b28@G4b23)) (set! G4b2d@p? (record-predicate G4b26@G4b21)) (set! G4b2f@make-i/o-write-error (record-constructor G4b2a@G4b22)) (set! G4b31@i/o-write-error? (condition-predicate G4b26@G4b21)) (set! G4b33@&i/o-write-rtd G4b26@G4b21) (set! G4b35@&i/o-write-rcd G4b2a@G4b22) (set! G4b3c@G4b37 (make-record-type-descriptor '&i/o-invalid-position G4afc@G4af7 'G4b3a '#f '#f '#((immutable position)))) (set! G4b3e@G4b39 '#f) (set! G4b40@G4b38 (make-record-constructor-descriptor G4b3c@G4b37 G4b00@G4af8 G4b3e@G4b39)) (set! G4b43@p? (record-predicate G4b3c@G4b37)) (set! G4b45@make-i/o-invalid-position-error (record-constructor G4b40@G4b38)) (set! G4b47@G4b36@i/o-error-position (record-accessor G4b3c@G4b37 '0)) (set! G4b49@i/o-invalid-position-error? (condition-predicate G4b3c@G4b37)) (set! G4b4b@i/o-error-position (condition-accessor G4b3c@G4b37 G4b47@G4b36@i/o-error-position)) (set! G4b4d@&i/o-invalid-position-rtd G4b3c@G4b37) (set! G4b4f@&i/o-invalid-position-rcd G4b40@G4b38) (set! G4b56@G4b51 (make-record-type-descriptor '&i/o-filename G4afc@G4af7 'G4b54 '#f '#f '#((immutable filename)))) (set! G4b58@G4b53 '#f) (set! G4b5a@G4b52 (make-record-constructor-descriptor G4b56@G4b51 G4b00@G4af8 G4b58@G4b53)) (set! G4b5d@p? (record-predicate G4b56@G4b51)) (set! G4b5f@make-i/o-filename-error (record-constructor G4b5a@G4b52)) (set! G4b61@G4b50@i/o-error-filename (record-accessor G4b56@G4b51 '0)) (set! G4b63@i/o-filename-error? (condition-predicate G4b56@G4b51)) (set! G4b65@i/o-error-filename (condition-accessor G4b56@G4b51 G4b61@G4b50@i/o-error-filename)) (set! G4b67@&i/o-filename-rtd G4b56@G4b51) (set! G4b69@&i/o-filename-rcd G4b5a@G4b52) (set! G4b6f@G4b6a (make-record-type-descriptor '&i/o-file-protection G4b56@G4b51 'G4b6d '#f '#f '#())) (set! G4b71@G4b6c '#f) (set! G4b73@G4b6b (make-record-constructor-descriptor G4b6f@G4b6a G4b5a@G4b52 G4b71@G4b6c)) (set! G4b76@p? (record-predicate G4b6f@G4b6a)) (set! G4b78@make-i/o-file-protection-error (record-constructor G4b73@G4b6b)) (set! G4b7a@i/o-file-protection-error? (condition-predicate G4b6f@G4b6a)) (set! G4b7c@&i/o-file-protection-rtd G4b6f@G4b6a) (set! G4b7e@&i/o-file-protection-rcd G4b73@G4b6b) (set! G4b84@G4b7f (make-record-type-descriptor '&i/o-file-is-read-only G4b6f@G4b6a 'G4b82 '#f '#f '#())) (set! G4b86@G4b81 '#f) (set! G4b88@G4b80 (make-record-constructor-descriptor G4b84@G4b7f G4b73@G4b6b G4b86@G4b81)) (set! G4b8b@p? (record-predicate G4b84@G4b7f)) (set! G4b8d@make-i/o-file-is-read-only-error (record-constructor G4b88@G4b80)) (set! G4b8f@i/o-file-is-read-only-error? (condition-predicate G4b84@G4b7f)) (set! G4b91@&i/o-file-is-read-only-rtd G4b84@G4b7f) (set! G4b93@&i/o-file-is-read-only-rcd G4b88@G4b80) (set! G4b99@G4b94 (make-record-type-descriptor '&i/o-file-already-exists G4b56@G4b51 'G4b97 '#f '#f '#())) (set! G4b9b@G4b96 '#f) (set! G4b9d@G4b95 (make-record-constructor-descriptor G4b99@G4b94 G4b5a@G4b52 G4b9b@G4b96)) (set! G4ba0@p? (record-predicate G4b99@G4b94)) (set! G4ba2@make-i/o-file-already-exists-error (record-constructor G4b9d@G4b95)) (set! G4ba4@i/o-file-already-exists-error? (condition-predicate G4b99@G4b94)) (set! G4ba6@&i/o-file-already-exists-rtd G4b99@G4b94) (set! G4ba8@&i/o-file-already-exists-rcd G4b9d@G4b95) (set! G4bae@G4ba9 (make-record-type-descriptor '&i/o-file-does-not-exist G4b56@G4b51 'G4bac '#f '#f '#())) (set! G4bb0@G4bab '#f) (set! G4bb2@G4baa (make-record-constructor-descriptor G4bae@G4ba9 G4b5a@G4b52 G4bb0@G4bab)) (set! G4bb5@p? (record-predicate G4bae@G4ba9)) (set! G4bb7@make-i/o-file-does-not-exist-error (record-constructor G4bb2@G4baa)) (set! G4bb9@i/o-file-does-not-exist-error? (condition-predicate G4bae@G4ba9)) (set! G4bbb@&i/o-file-does-not-exist-rtd G4bae@G4ba9) (set! G4bbd@&i/o-file-does-not-exist-rcd G4bb2@G4baa) (set! G4bc4@G4bbf (make-record-type-descriptor '&i/o-port G4afc@G4af7 'G4bc2 '#f '#f '#((immutable port)))) (set! G4bc6@G4bc1 '#f) (set! G4bc8@G4bc0 (make-record-constructor-descriptor G4bc4@G4bbf G4b00@G4af8 G4bc6@G4bc1)) (set! G4bcb@p? (record-predicate G4bc4@G4bbf)) (set! G4bcd@make-i/o-port-error (record-constructor G4bc8@G4bc0)) (set! G4bcf@G4bbe@i/o-error-port (record-accessor G4bc4@G4bbf '0)) (set! G4bd1@i/o-port-error? (condition-predicate G4bc4@G4bbf)) (set! G4bd3@i/o-error-port (condition-accessor G4bc4@G4bbf G4bcf@G4bbe@i/o-error-port)) (set! G4bd5@&i/o-port-rtd G4bc4@G4bbf) (set! G4bd7@&i/o-port-rcd G4bc8@G4bc0) (set! G4bdd@G4bd8 (make-record-type-descriptor '&i/o-decoding G4bc4@G4bbf 'G4bdb '#f '#f '#())) (set! G4bdf@G4bda '#f) (set! G4be1@G4bd9 (make-record-constructor-descriptor G4bdd@G4bd8 G4bc8@G4bc0 G4bdf@G4bda)) (set! G4be4@p? (record-predicate G4bdd@G4bd8)) (set! G4be6@make-i/o-decoding-error (record-constructor G4be1@G4bd9)) (set! G4be8@i/o-decoding-error? (condition-predicate G4bdd@G4bd8)) (set! G4bea@&i/o-decoding-rtd G4bdd@G4bd8) (set! G4bec@&i/o-decoding-rcd G4be1@G4bd9) (set! G4bf3@G4bee (make-record-type-descriptor '&i/o-encoding G4bc4@G4bbf 'G4bf1 '#f '#f '#((immutable char)))) (set! G4bf5@G4bf0 '#f) (set! G4bf7@G4bef (make-record-constructor-descriptor G4bf3@G4bee G4bc8@G4bc0 G4bf5@G4bf0)) (set! G4bfa@p? (record-predicate G4bf3@G4bee)) (set! G4bfc@make-i/o-encoding-error (record-constructor G4bf7@G4bef)) (set! G4bfe@G4bed@i/o-encoding-error-char (record-accessor G4bf3@G4bee '0)) (set! G4c00@i/o-encoding-error? (condition-predicate G4bf3@G4bee)) (set! G4c02@i/o-encoding-error-char (condition-accessor G4bf3@G4bee G4bfe@G4bed@i/o-encoding-error-char)) (set! G4c04@&i/o-encoding-rtd G4bf3@G4bee) (set! G4c06@&i/o-encoding-rcd G4bf7@G4bef) (set! G4c0c@G4c07 (make-record-type-descriptor '&no-infinities G4a9e@G4a99 'G4c0a '#f '#f '#())) (set! G4c0e@G4c09 '#f) (set! G4c10@G4c08 (make-record-constructor-descriptor G4c0c@G4c07 G4aa2@G4a9a G4c0e@G4c09)) (set! G4c13@p? (record-predicate G4c0c@G4c07)) (set! G4c15@make-no-infinities-violation (record-constructor G4c10@G4c08)) (set! G4c17@no-infinities-violation? (condition-predicate G4c0c@G4c07)) (set! G4c19@&no-infinities-rtd G4c0c@G4c07) (set! G4c1b@&no-infinities-rcd G4c10@G4c08) (set! G4c21@G4c1c (make-record-type-descriptor '&no-nans G4a9e@G4a99 'G4c1f '#f '#f '#())) (set! G4c23@G4c1e '#f) (set! G4c25@G4c1d (make-record-constructor-descriptor G4c21@G4c1c G4aa2@G4a9a G4c23@G4c1e)) (set! G4c28@p? (record-predicate G4c21@G4c1c)) (set! G4c2a@make-no-nans-violation (record-constructor G4c25@G4c1d)) (set! G4c2c@no-nans-violation? (condition-predicate G4c21@G4c1c)) (set! G4c2e@&no-nans-rtd G4c21@G4c1c) (set! G4c30@&no-nans-rcd G4c25@G4c1d) (begin (set! G4d21@G4c30@&no-nans-rcd G4c30@&no-nans-rcd) (set! G4d20@G4c2e@&no-nans-rtd G4c2e@&no-nans-rtd) (set! G4d1f@G4c2c@no-nans-violation? G4c2c@no-nans-violation?) (set! G4d1e@G4c2a@make-no-nans-violation G4c2a@make-no-nans-violation) (set! G4d1d@G4c28@p? G4c28@p?) (set! G4d1c@G4c25@G4c1d G4c25@G4c1d) (set! G4d1b@G4c23@G4c1e G4c23@G4c1e) (set! G4d1a@G4c21@G4c1c G4c21@G4c1c) (set! G4d19@G4c1b@&no-infinities-rcd G4c1b@&no-infinities-rcd) (set! G4d18@G4c19@&no-infinities-rtd G4c19@&no-infinities-rtd) (set! G4d17@G4c17@no-infinities-violation? G4c17@no-infinities-violation?) (set! G4d16@G4c15@make-no-infinities-violation G4c15@make-no-infinities-violation) (set! G4d15@G4c13@p? G4c13@p?) (set! G4d14@G4c10@G4c08 G4c10@G4c08) (set! G4d13@G4c0e@G4c09 G4c0e@G4c09) (set! G4d12@G4c0c@G4c07 G4c0c@G4c07) (set! G4d11@G4c06@&i/o-encoding-rcd G4c06@&i/o-encoding-rcd) (set! G4d10@G4c04@&i/o-encoding-rtd G4c04@&i/o-encoding-rtd) (set! G4d0f@G4c02@i/o-encoding-error-char G4c02@i/o-encoding-error-char) (set! G4d0e@G4c00@i/o-encoding-error? G4c00@i/o-encoding-error?) (set! G4d0d@G4bfe@G4bed@i/o-encoding-error-char G4bfe@G4bed@i/o-encoding-error-char) (set! G4d0c@G4bfc@make-i/o-encoding-error G4bfc@make-i/o-encoding-error) (set! G4d0b@G4bfa@p? G4bfa@p?) (set! G4d0a@G4bf7@G4bef G4bf7@G4bef) (set! G4d09@G4bf5@G4bf0 G4bf5@G4bf0) (set! G4d08@G4bf3@G4bee G4bf3@G4bee) (set! G4d07@G4bec@&i/o-decoding-rcd G4bec@&i/o-decoding-rcd) (set! G4d06@G4bea@&i/o-decoding-rtd G4bea@&i/o-decoding-rtd) (set! G4d05@G4be8@i/o-decoding-error? G4be8@i/o-decoding-error?) (set! G4d04@G4be6@make-i/o-decoding-error G4be6@make-i/o-decoding-error) (set! G4d03@G4be4@p? G4be4@p?) (set! G4d02@G4be1@G4bd9 G4be1@G4bd9) (set! G4d01@G4bdf@G4bda G4bdf@G4bda) (set! G4d00@G4bdd@G4bd8 G4bdd@G4bd8) (set! G4cff@G4bd7@&i/o-port-rcd G4bd7@&i/o-port-rcd) (set! G4cfe@G4bd5@&i/o-port-rtd G4bd5@&i/o-port-rtd) (set! G4cfd@G4bd3@i/o-error-port G4bd3@i/o-error-port) (set! G4cfc@G4bd1@i/o-port-error? G4bd1@i/o-port-error?) (set! G4cfb@G4bcf@G4bbe@i/o-error-port G4bcf@G4bbe@i/o-error-port) (set! G4cfa@G4bcd@make-i/o-port-error G4bcd@make-i/o-port-error) (set! G4cf9@G4bcb@p? G4bcb@p?) (set! G4cf8@G4bc8@G4bc0 G4bc8@G4bc0) (set! G4cf7@G4bc6@G4bc1 G4bc6@G4bc1) (set! G4cf6@G4bc4@G4bbf G4bc4@G4bbf) (set! G4cf5@G4bbd@&i/o-file-does-not-exist-rcd G4bbd@&i/o-file-does-not-exist-rcd) (set! G4cf4@G4bbb@&i/o-file-does-not-exist-rtd G4bbb@&i/o-file-does-not-exist-rtd) (set! G4cf3@G4bb9@i/o-file-does-not-exist-error? G4bb9@i/o-file-does-not-exist-error?) (set! G4cf2@G4bb7@make-i/o-file-does-not-exist-error G4bb7@make-i/o-file-does-not-exist-error) (set! G4cf1@G4bb5@p? G4bb5@p?) (set! G4cf0@G4bb2@G4baa G4bb2@G4baa) (set! G4cef@G4bb0@G4bab G4bb0@G4bab) (set! G4cee@G4bae@G4ba9 G4bae@G4ba9) (set! G4ced@G4ba8@&i/o-file-already-exists-rcd G4ba8@&i/o-file-already-exists-rcd) (set! G4cec@G4ba6@&i/o-file-already-exists-rtd G4ba6@&i/o-file-already-exists-rtd) (set! G4ceb@G4ba4@i/o-file-already-exists-error? G4ba4@i/o-file-already-exists-error?) (set! G4cea@G4ba2@make-i/o-file-already-exists-error G4ba2@make-i/o-file-already-exists-error) (set! G4ce9@G4ba0@p? G4ba0@p?) (set! G4ce8@G4b9d@G4b95 G4b9d@G4b95) (set! G4ce7@G4b9b@G4b96 G4b9b@G4b96) (set! G4ce6@G4b99@G4b94 G4b99@G4b94) (set! G4ce5@G4b93@&i/o-file-is-read-only-rcd G4b93@&i/o-file-is-read-only-rcd) (set! G4ce4@G4b91@&i/o-file-is-read-only-rtd G4b91@&i/o-file-is-read-only-rtd) (set! G4ce3@G4b8f@i/o-file-is-read-only-error? G4b8f@i/o-file-is-read-only-error?) (set! G4ce2@G4b8d@make-i/o-file-is-read-only-error G4b8d@make-i/o-file-is-read-only-error) (set! G4ce1@G4b8b@p? G4b8b@p?) (set! G4ce0@G4b88@G4b80 G4b88@G4b80) (set! G4cdf@G4b86@G4b81 G4b86@G4b81) (set! G4cde@G4b84@G4b7f G4b84@G4b7f) (set! G4cdd@G4b7e@&i/o-file-protection-rcd G4b7e@&i/o-file-protection-rcd) (set! G4cdc@G4b7c@&i/o-file-protection-rtd G4b7c@&i/o-file-protection-rtd) (set! G4cdb@G4b7a@i/o-file-protection-error? G4b7a@i/o-file-protection-error?) (set! G4cda@G4b78@make-i/o-file-protection-error G4b78@make-i/o-file-protection-error) (set! G4cd9@G4b76@p? G4b76@p?) (set! G4cd8@G4b73@G4b6b G4b73@G4b6b) (set! G4cd7@G4b71@G4b6c G4b71@G4b6c) (set! G4cd6@G4b6f@G4b6a G4b6f@G4b6a) (set! G4cd5@G4b69@&i/o-filename-rcd G4b69@&i/o-filename-rcd) (set! G4cd4@G4b67@&i/o-filename-rtd G4b67@&i/o-filename-rtd) (set! G4cd3@G4b65@i/o-error-filename G4b65@i/o-error-filename) (set! G4cd2@G4b63@i/o-filename-error? G4b63@i/o-filename-error?) (set! G4cd1@G4b61@G4b50@i/o-error-filename G4b61@G4b50@i/o-error-filename) (set! G4cd0@G4b5f@make-i/o-filename-error G4b5f@make-i/o-filename-error) (set! G4ccf@G4b5d@p? G4b5d@p?) (set! G4cce@G4b5a@G4b52 G4b5a@G4b52) (set! G4ccd@G4b58@G4b53 G4b58@G4b53) (set! G4ccc@G4b56@G4b51 G4b56@G4b51) (set! G4ccb@G4b4f@&i/o-invalid-position-rcd G4b4f@&i/o-invalid-position-rcd) (set! G4cca@G4b4d@&i/o-invalid-position-rtd G4b4d@&i/o-invalid-position-rtd) (set! G4cc9@G4b4b@i/o-error-position G4b4b@i/o-error-position) (set! G4cc8@G4b49@i/o-invalid-position-error? G4b49@i/o-invalid-position-error?) (set! G4cc7@G4b47@G4b36@i/o-error-position G4b47@G4b36@i/o-error-position) (set! G4cc6@G4b45@make-i/o-invalid-position-error G4b45@make-i/o-invalid-position-error) (set! G4cc5@G4b43@p? G4b43@p?) (set! G4cc4@G4b40@G4b38 G4b40@G4b38) (set! G4cc3@G4b3e@G4b39 G4b3e@G4b39) (set! G4cc2@G4b3c@G4b37 G4b3c@G4b37) (set! G4cc1@G4b35@&i/o-write-rcd G4b35@&i/o-write-rcd) (set! G4cc0@G4b33@&i/o-write-rtd G4b33@&i/o-write-rtd) (set! G4cbf@G4b31@i/o-write-error? G4b31@i/o-write-error?) (set! G4cbe@G4b2f@make-i/o-write-error G4b2f@make-i/o-write-error) (set! G4cbd@G4b2d@p? G4b2d@p?) (set! G4cbc@G4b2a@G4b22 G4b2a@G4b22) (set! G4cbb@G4b28@G4b23 G4b28@G4b23) (set! G4cba@G4b26@G4b21 G4b26@G4b21) (set! G4cb9@G4b20@&i/o-read-rcd G4b20@&i/o-read-rcd) (set! G4cb8@G4b1e@&i/o-read-rtd G4b1e@&i/o-read-rtd) (set! G4cb7@G4b1c@i/o-read-error? G4b1c@i/o-read-error?) (set! G4cb6@G4b1a@make-i/o-read-error G4b1a@make-i/o-read-error) (set! G4cb5@G4b18@p? G4b18@p?) (set! G4cb4@G4b15@G4b0d G4b15@G4b0d) (set! G4cb3@G4b13@G4b0e G4b13@G4b0e) (set! G4cb2@G4b11@G4b0c G4b11@G4b0c) (set! G4cb1@G4b0b@&i/o-rcd G4b0b@&i/o-rcd) (set! G4cb0@G4b09@&i/o-rtd G4b09@&i/o-rtd) (set! G4caf@G4b07@i/o-error? G4b07@i/o-error?) (set! G4cae@G4b05@make-i/o-error G4b05@make-i/o-error) (set! G4cad@G4b03@p? G4b03@p?) (set! G4cac@G4b00@G4af8 G4b00@G4af8) (set! G4cab@G4afe@G4af9 G4afe@G4af9) (set! G4caa@G4afc@G4af7 G4afc@G4af7) (set! G4ca9@G4af6@&undefined-rcd G4af6@&undefined-rcd) (set! G4ca8@G4af4@&undefined-rtd G4af4@&undefined-rtd) (set! G4ca7@G4af2@undefined-violation? G4af2@undefined-violation?) (set! G4ca6@G4af0@make-undefined-violation G4af0@make-undefined-violation) (set! G4ca5@G4aee@p? G4aee@p?) (set! G4ca4@G4aeb@G4ae3 G4aeb@G4ae3) (set! G4ca3@G4ae9@G4ae4 G4ae9@G4ae4) (set! G4ca2@G4ae7@G4ae2 G4ae7@G4ae2) (set! G4ca1@G4ae1@&syntax-rcd G4ae1@&syntax-rcd) (set! G4ca0@G4adf@&syntax-rtd G4adf@&syntax-rtd) (set! G4c9f@G4add@syntax-violation-subform G4add@syntax-violation-subform) (set! G4c9e@G4adb@syntax-violation-form G4adb@syntax-violation-form) (set! G4c9d@G4ad9@syntax-violation? G4ad9@syntax-violation?) (set! G4c9c@G4ad7@G4ac4@syntax-violation-subform G4ad7@G4ac4@syntax-violation-subform) (set! G4c9b@G4ad5@G4ac3@syntax-violation-form G4ad5@G4ac3@syntax-violation-form) (set! G4c9a@G4ad3@make-syntax-violation G4ad3@make-syntax-violation) (set! G4c99@G4ad1@p? G4ad1@p?) (set! G4c98@G4ace@G4ac6 G4ace@G4ac6) (set! G4c97@G4acc@G4ac7 G4acc@G4ac7) (set! G4c96@G4aca@G4ac5 G4aca@G4ac5) (set! G4c95@G4ac2@&lexical-rcd G4ac2@&lexical-rcd) (set! G4c94@G4ac0@&lexical-rtd G4ac0@&lexical-rtd) (set! G4c93@G4abe@lexical-violation? G4abe@lexical-violation?) (set! G4c92@G4abc@make-lexical-violation G4abc@make-lexical-violation) (set! G4c91@G4aba@p? G4aba@p?) (set! G4c90@G4ab7@G4aaf G4ab7@G4aaf) (set! G4c8f@G4ab5@G4ab0 G4ab5@G4ab0) (set! G4c8e@G4ab3@G4aae G4ab3@G4aae) (set! G4c8d@G4aad@&implementation-restriction-rcd G4aad@&implementation-restriction-rcd) (set! G4c8c@G4aab@&implementation-restriction-rtd G4aab@&implementation-restriction-rtd) (set! G4c8b@G4aa9@implementation-restriction-violation? G4aa9@implementation-restriction-violation?) (set! G4c8a@G4aa7@make-implementation-restriction-violation G4aa7@make-implementation-restriction-violation) (set! G4c89@G4aa5@p? G4aa5@p?) (set! G4c88@G4aa2@G4a9a G4aa2@G4a9a) (set! G4c87@G4aa0@G4a9b G4aa0@G4a9b) (set! G4c86@G4a9e@G4a99 G4a9e@G4a99) (set! G4c85@G4a98@&non-continuable-rcd G4a98@&non-continuable-rcd) (set! G4c84@G4a96@&non-continuable-rtd G4a96@&non-continuable-rtd) (set! G4c83@G4a94@non-continuable-violation? G4a94@non-continuable-violation?) (set! G4c82@G4a92@make-non-continuable-violation G4a92@make-non-continuable-violation) (set! G4c81@G4a90@p? G4a90@p?) (set! G4c80@G4a8d@G4a85 G4a8d@G4a85) (set! G4c7f@G4a8b@G4a86 G4a8b@G4a86) (set! G4c7e@G4a89@G4a84 G4a89@G4a84) (set! G4c7d@G4a83@&who-rcd G4a83@&who-rcd) (set! G4c7c@G4a81@&who-rtd G4a81@&who-rtd) (set! G4c7b@G4a7f@condition-who G4a7f@condition-who) (set! G4c7a@G4a7d@who-condition? G4a7d@who-condition?) (set! G4c79@G4a7b@G4a6a@condition-who G4a7b@G4a6a@condition-who) (set! G4c78@G4a79@make-who-condition G4a79@make-who-condition) (set! G4c77@G4a77@p? G4a77@p?) (set! G4c76@G4a74@G4a6c G4a74@G4a6c) (set! G4c75@G4a72@G4a6d G4a72@G4a6d) (set! G4c74@G4a70@G4a6b G4a70@G4a6b) (set! G4c73@G4a69@&irritants-rcd G4a69@&irritants-rcd) (set! G4c72@G4a67@&irritants-rtd G4a67@&irritants-rtd) (set! G4c71@G4a65@condition-irritants G4a65@condition-irritants) (set! G4c70@G4a63@irritants-condition? G4a63@irritants-condition?) (set! G4c6f@G4a61@G4a50@condition-irritants G4a61@G4a50@condition-irritants) (set! G4c6e@G4a5f@make-irritants-condition G4a5f@make-irritants-condition) (set! G4c6d@G4a5d@p? G4a5d@p?) (set! G4c6c@G4a5a@G4a52 G4a5a@G4a52) (set! G4c6b@G4a58@G4a53 G4a58@G4a53) (set! G4c6a@G4a56@G4a51 G4a56@G4a51) (set! G4c69@G4a4f@&assertion-rcd G4a4f@&assertion-rcd) (set! G4c68@G4a4d@&assertion-rtd G4a4d@&assertion-rtd) (set! G4c67@G4a4b@assertion-violation? G4a4b@assertion-violation?) (set! G4c66@G4a49@make-assertion-violation G4a49@make-assertion-violation) (set! G4c65@G4a47@p? G4a47@p?) (set! G4c64@G4a44@G4a3c G4a44@G4a3c) (set! G4c63@G4a42@G4a3d G4a42@G4a3d) (set! G4c62@G4a40@G4a3b G4a40@G4a3b) (set! G4c61@G4a3a@&violation-rcd G4a3a@&violation-rcd) (set! G4c60@G4a38@&violation-rtd G4a38@&violation-rtd) (set! G4c5f@G4a36@violation? G4a36@violation?) (set! G4c5e@G4a34@make-violation G4a34@make-violation) (set! G4c5d@G4a32@p? G4a32@p?) (set! G4c5c@G4a2f@G4a27 G4a2f@G4a27) (set! G4c5b@G4a2d@G4a28 G4a2d@G4a28) (set! G4c5a@G4a2b@G4a26 G4a2b@G4a26) (set! G4c59@G4a25@&error-rcd G4a25@&error-rcd) (set! G4c58@G4a23@&error-rtd G4a23@&error-rtd) (set! G4c57@G4a21@error? G4a21@error?) (set! G4c56@G4a1f@make-error G4a1f@make-error) (set! G4c55@G4a1d@p? G4a1d@p?) (set! G4c54@G4a1a@G4a12 G4a1a@G4a12) (set! G4c53@G4a18@G4a13 G4a18@G4a13) (set! G4c52@G4a16@G4a11 G4a16@G4a11) (set! G4c51@G4a10@&serious-rcd G4a10@&serious-rcd) (set! G4c50@G4a0e@&serious-rtd G4a0e@&serious-rtd) (set! G4c4f@G4a0c@serious-condition? G4a0c@serious-condition?) (set! G4c4e@G4a0a@make-serious-condition G4a0a@make-serious-condition) (set! G4c4d@G4a08@p? G4a08@p?) (set! G4c4c@G4a05@G49fd G4a05@G49fd) (set! G4c4b@G4a03@G49fe G4a03@G49fe) (set! G4c4a@G4a01@G49fc G4a01@G49fc) (set! G4c49@G49fb@&warning-rcd G49fb@&warning-rcd) (set! G4c48@G49f9@&warning-rtd G49f9@&warning-rtd) (set! G4c47@G49f7@warning? G49f7@warning?) (set! G4c46@G49f5@make-warning G49f5@make-warning) (set! G4c45@G49f3@p? G49f3@p?) (set! G4c44@G49f0@G49e8 G49f0@G49e8) (set! G4c43@G49ee@G49e9 G49ee@G49e9) (set! G4c42@G49ec@G49e7 G49ec@G49e7) (set! G4c41@G49e6@&message-rcd G49e6@&message-rcd) (set! G4c40@G49e4@&message-rtd G49e4@&message-rtd) (set! G4c3f@G49e2@condition-message G49e2@condition-message) (set! G4c3e@G49e0@message-condition? G49e0@message-condition?) (set! G4c3d@G49de@G49cd@condition-message G49de@G49cd@condition-message) (set! G4c3c@G49dc@make-message-condition G49dc@make-message-condition) (set! G4c3b@G49da@p? G49da@p?) (set! G4c3a@G49d7@G49cf G49d7@G49cf) (set! G4c39@G49d5@G49d0 G49d5@G49d0) (set! G4c38@G49d3@G49ce G49d3@G49ce) (set! G4c37@G4989@&condition-rcd G4989@&condition-rcd) (set! G4c36@G4987@&condition-rtd G4987@&condition-rtd) (set! G4c35@G4985@make-&condition G4985@make-&condition) (set! G4c34@G4983@&condition? G4983@&condition?) (set! G4c33@G4980@G4978 G4980@G4978) (set! G4c32@G497e@G4979 G497e@G4979) (set! G4c31@G497c@G4977 G497c@G4977)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2953@G2908@current-primitive-locations (lambda (G50c2@x) ((lambda (G50c4@t) (if G50c4@t (cdr G50c4@t) '#f)) (assq G50c2@x '((&no-nans-rcd . G4d21@G4c30@&no-nans-rcd) (&no-nans-rtd . G4d20@G4c2e@&no-nans-rtd) (&no-infinities-rcd . G4d19@G4c1b@&no-infinities-rcd) (&no-infinities-rtd . G4d18@G4c19@&no-infinities-rtd) (&i/o-encoding-rcd . G4d11@G4c06@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4d10@G4c04@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4d07@G4bec@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4d06@G4bea@&i/o-decoding-rtd) (&i/o-port-rcd . G4cff@G4bd7@&i/o-port-rcd) (&i/o-port-rtd . G4cfe@G4bd5@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cf5@G4bbd@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cf4@G4bbb@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4ced@G4ba8@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cec@G4ba6@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4ce5@G4b93@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4ce4@G4b91@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cdd@G4b7e@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cdc@G4b7c@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4cd5@G4b69@&i/o-filename-rcd) (&i/o-filename-rtd . G4cd4@G4b67@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4ccb@G4b4f@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4cca@G4b4d@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4cc1@G4b35@&i/o-write-rcd) (&i/o-write-rtd . G4cc0@G4b33@&i/o-write-rtd) (&i/o-read-rcd . G4cb9@G4b20@&i/o-read-rcd) (&i/o-read-rtd . G4cb8@G4b1e@&i/o-read-rtd) (&i/o-rcd . G4cb1@G4b0b@&i/o-rcd) (&i/o-rtd . G4cb0@G4b09@&i/o-rtd) (&undefined-rcd . G4ca9@G4af6@&undefined-rcd) (&undefined-rtd . G4ca8@G4af4@&undefined-rtd) (&syntax-rcd . G4ca1@G4ae1@&syntax-rcd) (&syntax-rtd . G4ca0@G4adf@&syntax-rtd) (&lexical-rcd . G4c95@G4ac2@&lexical-rcd) (&lexical-rtd . G4c94@G4ac0@&lexical-rtd) (&implementation-restriction-rcd . G4c8d@G4aad@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c8c@G4aab@&implementation-restriction-rtd) (&non-continuable-rcd . G4c85@G4a98@&non-continuable-rcd) (&non-continuable-rtd . G4c84@G4a96@&non-continuable-rtd) (&who-rcd . G4c7d@G4a83@&who-rcd) (&who-rtd . G4c7c@G4a81@&who-rtd) (&irritants-rcd . G4c73@G4a69@&irritants-rcd) (&irritants-rtd . G4c72@G4a67@&irritants-rtd) (&assertion-rcd . G4c69@G4a4f@&assertion-rcd) (&assertion-rtd . G4c68@G4a4d@&assertion-rtd) (&violation-rcd . G4c61@G4a3a@&violation-rcd) (&violation-rtd . G4c60@G4a38@&violation-rtd) (&error-rcd . G4c59@G4a25@&error-rcd) (&error-rtd . G4c58@G4a23@&error-rtd) (&serious-rcd . G4c51@G4a10@&serious-rcd) (&serious-rtd . G4c50@G4a0e@&serious-rtd) (&warning-rcd . G4c49@G49fb@&warning-rcd) (&warning-rtd . G4c48@G49f9@&warning-rtd) (&message-rcd . G4c41@G49e6@&message-rcd) (&message-rtd . G4c40@G49e4@&message-rtd) (&condition-rcd . G4c37@G4989@&condition-rcd) (&condition-rtd . G4c36@G4987@&condition-rtd) (syntax-error . G4968@G304c@syntax-error) (syntax-dispatch . G48fc@G2f65@syntax-dispatch) (load . G4dbf@G4d31@load) (interaction-environment . G4971@G305e@interaction-environment) (make-parameter . G2902@G283b@make-parameter) (make-variable-transformer . G48ba@G2da0@make-variable-transformer) (identifier? . G496c@G3054@identifier?) (generate-temporaries . G4961@G303e@generate-temporaries) (free-identifier=? . G4962@G3040@free-identifier=?) (syntax->datum . G496e@G3058@syntax->datum) (datum->syntax . G496d@G3056@datum->syntax) (bound-identifier=? . G4963@G3042@bound-identifier=?) (make-i/o-write-error . G4cbe@G4b2f@make-i/o-write-error) (make-i/o-read-error . G4cb6@G4b1a@make-i/o-read-error) (make-i/o-port-error . G4cfa@G4bcd@make-i/o-port-error) (make-i/o-invalid-position-error . G4cc6@G4b45@make-i/o-invalid-position-error) (make-i/o-filename-error . G4cd0@G4b5f@make-i/o-filename-error) (make-i/o-file-protection-error . G4cda@G4b78@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4ce2@G4b8d@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cf2@G4bb7@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cea@G4ba2@make-i/o-file-already-exists-error) (make-i/o-error . G4cae@G4b05@make-i/o-error) (make-i/o-encoding-error . G4d0c@G4bfc@make-i/o-encoding-error) (make-i/o-decoding-error . G4d04@G4be6@make-i/o-decoding-error) (i/o-write-error? . G4cbf@G4b31@i/o-write-error?) (i/o-read-error? . G4cb7@G4b1c@i/o-read-error?) (i/o-port-error? . G4cfc@G4bd1@i/o-port-error?) (i/o-invalid-position-error? . G4cc8@G4b49@i/o-invalid-position-error?) (i/o-filename-error? . G4cd2@G4b63@i/o-filename-error?) (i/o-file-protection-error? . G4cdb@G4b7a@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4ce3@G4b8f@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cf3@G4bb9@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4ceb@G4ba4@i/o-file-already-exists-error?) (i/o-error? . G4caf@G4b07@i/o-error?) (i/o-error-port . G4cfd@G4bd3@i/o-error-port) (i/o-error-filename . G4cd3@G4b65@i/o-error-filename) (i/o-encoding-error? . G4d0e@G4c00@i/o-encoding-error?) (i/o-encoding-error-char . G4d0f@G4c02@i/o-encoding-error-char) (i/o-decoding-error? . G4d05@G4be8@i/o-decoding-error?) (scheme-report-environment . G4958@G302c@scheme-report-environment) (null-environment . G4957@G302a@null-environment) (command-line . G4dbc@G4d2b@command-line) (eval . G495a@G3030@eval) (environment . G4956@G3028@environment) (who-condition? . G4c7a@G4a7d@who-condition?) (warning? . G4c47@G49f7@warning?) (violation? . G4c5f@G4a36@violation?) (undefined-violation? . G4ca7@G4af2@undefined-violation?) (syntax-violation? . G4c9d@G4ad9@syntax-violation?) (syntax-violation-subform . G4c9f@G4add@syntax-violation-subform) (syntax-violation-form . G4c9e@G4adb@syntax-violation-form) (syntax-violation . G496b@G3052@syntax-violation) (serious-condition? . G4c4f@G4a0c@serious-condition?) (non-continuable-violation? . G4c83@G4a94@non-continuable-violation?) (message-condition? . G4c3e@G49e0@message-condition?) (make-who-condition . G4c78@G4a79@make-who-condition) (make-warning . G4c46@G49f5@make-warning) (make-violation . G4c5e@G4a34@make-violation) (make-undefined-violation . G4ca6@G4af0@make-undefined-violation) (make-syntax-violation . G4c9a@G4ad3@make-syntax-violation) (make-serious-condition . G4c4e@G4a0a@make-serious-condition) (make-non-continuable-violation . G4c82@G4a92@make-non-continuable-violation) (make-message-condition . G4c3c@G49dc@make-message-condition) (make-lexical-violation . G4c92@G4abc@make-lexical-violation) (make-irritants-condition . G4c6e@G4a5f@make-irritants-condition) (make-implementation-restriction-violation . G4c8a@G4aa7@make-implementation-restriction-violation) (make-error . G4c56@G4a1f@make-error) (make-assertion-violation . G4c66@G4a49@make-assertion-violation) (lexical-violation? . G4c93@G4abe@lexical-violation?) (irritants-condition? . G4c70@G4a63@irritants-condition?) (implementation-restriction-violation? . G4c8b@G4aa9@implementation-restriction-violation?) (error? . G4c57@G4a21@error?) (condition-who . G4c7b@G4a7f@condition-who) (condition-message . G4c3f@G49e2@condition-message) (condition-irritants . G4c71@G4a65@condition-irritants) (assertion-violation? . G4c67@G4a4b@assertion-violation?) (no-nans-violation? . G4d1f@G4c2c@no-nans-violation?) (no-infinities-violation? . G4d17@G4c17@no-infinities-violation?) (make-no-nans-violation . G4d1e@G4c2a@make-no-nans-violation) (make-no-infinities-violation . G4d16@G4c15@make-no-infinities-violation)))))) (G2b7b@G2a20@install-library 'G5095 '(mosh interaction) '() '() '() '() '((string-upcase . G5047) (string-titlecase . G5046) (string-normalize-nfkd . G5045) (string-normalize-nfkc . G5044) (string-normalize-nfd . G5043) (string-normalize-nfc . G5042) (string-foldcase . G5041) (string-downcase . G5040) (string-ci>? . G503f) (string-ci>=? . G503e) (string-ci=? . G503d) (string-ci<? . G503c) (string-ci<=? . G503b) (char-whitespace? . G503a) (char-upper-case? . G5039) (char-title-case? . G5038) (char-numeric? . G5037) (char-lower-case? . G5036) (char-general-category . G5035) (char-upcase . G5034) (char-titlecase . G5033) (char-foldcase . G5032) (char-downcase . G5031) (char-ci>? . G5030) (char-ci>=? . G502f) (char-ci=? . G502e) (char-ci<? . G502d) (char-ci<=? . G502c) (char-alphabetic? . G502b) (make-variable-transformer . G2d9f) (identifier? . G3053) (generate-temporaries . G303d) (free-identifier=? . G303f) (syntax->datum . G3057) (datum->syntax . G3055) (bound-identifier=? . G3041) (record-type-descriptor? . G502a) (record-predicate . G5029) (record-mutator . G5028) (record-constructor . G5027) (record-accessor . G5026) (make-record-type-descriptor . G5025) (make-record-constructor-descriptor . G5024) (record? . G5023) (record-type-uid . G5022) (record-type-sealed? . G5021) (record-type-parent . G5020) (record-type-opaque? . G501f) (record-type-name . G501e) (record-type-generative? . G501d) (record-type-field-names . G501c) (record-rtd . G501b) (record-field-mutable? . G501a) (delete-file . G5019) (file-exists? . G5018) (vector-sort! . G5017) (vector-sort . G5016) (list-sort . G5015) (symbol-hash . G5014) (string-ci-hash . G5013) (string-hash . G5012) (equal-hash . G5011) (hashtable-equivalence-function . G5010) (make-hashtable . G500f) (hashtable-hash-function . G500e) (make-eqv-hashtable . G500d) (make-eq-hashtable . G500c) (hashtable? . G500b) (hashtable-update! . G500a) (hashtable-size . G5009) (hashtable-set! . G5008) (hashtable-ref . G5007) (hashtable-mutable? . G5006) (hashtable-keys . G5005) (hashtable-entries . G5004) (hashtable-delete! . G5003) (hashtable-copy . G5002) (hashtable-contains? . G5001) (hashtable-clear! . G5000) (call-with-output-file . G4fff) (call-with-input-file . G4ffe) (write-char . G4ffd) (write . G4ffc) (with-output-to-file . G4ffb) (with-input-from-file . G4ffa) (read-char . G4ff9) (read . G4ff8) (peek-char . G4ff7) (open-output-file . G4ff6) (open-input-file . G4ff5) (newline . G4ff4) (display . G4ff3) (close-output-port . G4ff2) (close-input-port . G4ff1) (eof-object? . G4ff0) (eof-object . G4fef) (current-error-port . G4fee) (current-output-port . G4fed) (current-input-port . G4fec) (output-port? . G4feb) (input-port? . G4fea) (utf-8-codec . G4fe9) (utf-16-codec . G4fe8) (transcoder-error-handling-mode . G4fe7) (transcoder-eol-style . G4fe6) (transcoder-codec . G4fe5) (transcoded-port . G4fe4) (textual-port? . G4fe3) (string->bytevector . G4fe2) (standard-output-port . G4fe1) (standard-input-port . G4fe0) (standard-error-port . G4fdf) (set-port-position! . G4fde) (put-u8 . G4fdd) (put-string . G4fdc) (put-datum . G4fdb) (put-char . G4fda) (put-bytevector . G4fd9) (port? . G4fd8) (port-transcoder . G4fd7) (port-position . G4fd6) (port-has-set-port-position!? . G4fd5) (port-has-port-position? . G4fd4) (port-eof? . G4fd3) (output-port-buffer-mode . G4fd2) (open-string-output-port . G4fd1) (open-string-input-port . G4fd0) (open-file-output-port . G4fcf) (open-file-input/output-port . G4fce) (open-file-input-port . G4fcd) (open-bytevector-output-port . G4fcc) (open-bytevector-input-port . G4fcb) (native-transcoder . G4fca) (native-eol-style . G4fc9) (make-transcoder . G4fc8) (latin-1-codec . G4fc7) (make-i/o-write-error . G4b2e) (make-i/o-read-error . G4b19) (make-i/o-port-error . G4bcc) (make-i/o-invalid-position-error . G4b44) (make-i/o-filename-error . G4b5e) (make-i/o-file-protection-error . G4b77) (make-i/o-file-is-read-only-error . G4b8c) (make-i/o-file-does-not-exist-error . G4bb6) (make-i/o-file-already-exists-error . G4ba1) (make-i/o-error . G4b04) (make-i/o-encoding-error . G4bfb) (make-i/o-decoding-error . G4be5) (make-custom-textual-output-port . G4fc6) (make-custom-textual-input/output-port . G4fc5) (make-custom-textual-input-port . G4fc4) (make-custom-binary-output-port . G4fc3) (make-custom-binary-input/output-port . G4fc2) (make-custom-binary-input-port . G4fc1) (make-bytevector . G4fc0) (lookahead-u8 . G4fbf) (lookahead-char . G4fbe) (i/o-write-error? . G4b30) (i/o-read-error? . G4b1b) (i/o-port-error? . G4bd0) (i/o-invalid-position-error? . G4b48) (i/o-filename-error? . G4b62) (i/o-file-protection-error? . G4b79) (i/o-file-is-read-only-error? . G4b8e) (i/o-file-does-not-exist-error? . G4bb8) (i/o-file-already-exists-error? . G4ba3) (i/o-error? . G4b06) (i/o-error-port . G4bd2) (i/o-error-filename . G4b64) (i/o-encoding-error? . G4bff) (i/o-encoding-error-char . G4c01) (i/o-decoding-error? . G4be7) (get-u8 . G4fbd) (get-string-n! . G4fbc) (get-string-n . G4fbb) (get-string-all . G4fba) (get-line . G4fb9) (get-datum . G4fb8) (get-char . G4fb7) (get-bytevector-some . G4fb6) (get-bytevector-n! . G4fb5) (get-bytevector-n . G4fb4) (get-bytevector-all . G4fb3) (flush-output-port . G4fb2) (close-port . G4fb1) (exit . G4fa9) (command-line . G4d2a) (string-fill! . G4fa8) (string-set! . G4fa7) (set-cdr! . G4fa6) (set-car! . G4fa5) (remove . G4fa4) (remv . G4fa3) (remp . G4fa2) (remq . G4fa1) (partition . G4fa0) (memv . G4f9f) (memq . G4f9e) (memp . G4f9d) (member . G4f9c) (exists . G4f9b) (for-all . G4f9a) (fold-right . G4f99) (fold-left . G4f98) (find . G4f97) (filter . G4f96) (cons* . G4f95) (assv . G4f94) (assq . G4f93) (assp . G4f92) (assoc . G4f91) (call-with-string-output-port . G4f90) (call-with-port . G4f8f) (call-with-bytevector-output-port . G4f8e) (bytevector->string . G4f8d) (buffer-mode? . G4f8c) (binary-port? . G4f8b) (with-exception-handler . G4f8a) (raise-continuable . G4f89) (raise . G4f88) (eval . G302f) (environment . G3027) (make-enumeration . G4f87) (enum-set=? . G4f86) (enum-set-universe . G4f85) (enum-set-union . G4f84) (enum-set-subset? . G4f83) (enum-set-projection . G4f82) (enum-set-member? . G4f81) (enum-set-intersection . G4f80) (enum-set-indexer . G4f7f) (enum-set-difference . G4f7e) (enum-set-constructor . G4f7d) (enum-set-complement . G4f7c) (enum-set->list . G4f7b) (who-condition? . G4a7c) (warning? . G49f6) (violation? . G4a35) (undefined-violation? . G4af1) (syntax-violation? . G4ad8) (syntax-violation-subform . G4adc) (syntax-violation-form . G4ada) (syntax-violation . G3051) (simple-conditions . G4f7a) (serious-condition? . G4a0b) (non-continuable-violation? . G4a93) (message-condition? . G49df) (make-who-condition . G4a78) (make-warning . G49f4) (make-violation . G4a33) (make-undefined-violation . G4aef) (make-syntax-violation . G4ad2) (make-serious-condition . G4a09) (make-non-continuable-violation . G4a91) (make-message-condition . G49db) (make-lexical-violation . G4abb) (make-irritants-condition . G4a5e) (make-implementation-restriction-violation . G4aa6) (make-error . G4a1e) (make-assertion-violation . G4a48) (lexical-violation? . G4abd) (irritants-condition? . G4a62) (implementation-restriction-violation? . G4aa8) (error? . G4a20) (condition-who . G4a7e) (condition-predicate . G4f79) (condition-message . G49e1) (condition-irritants . G4a64) (condition-accessor . G4f78) (condition . G4f77) (assertion-violation? . G4a4a) (condition? . G4f76) (utf32->string . G4f75) (utf16->string . G4f74) (utf8->string . G4f73) (uint-list->bytevector . G4f72) (u8-list->bytevector . G4f71) (string->utf8 . G4f70) (string->utf32 . G4f6f) (string->utf16 . G4f6e) (sint-list->bytevector . G4f6d) (native-endianness . G4f6c) (bytevector? . G4f6b) (bytevector=? . G4f6a) (bytevector-uint-set! . G4f69) (bytevector-uint-ref . G4f68) (bytevector-u8-set! . G4f67) (bytevector-u8-ref . G4f66) (bytevector-u64-set! . G4f65) (bytevector-u64-ref . G4f64) (bytevector-u64-native-set! . G4f63) (bytevector-u64-native-ref . G4f62) (bytevector-u32-set! . G4f61) (bytevector-u32-ref . G4f60) (bytevector-u32-native-set! . G4f5f) (bytevector-u32-native-ref . G4f5e) (bytevector-u16-set! . G4f5d) (bytevector-u16-ref . G4f5c) (bytevector-u16-native-set! . G4f5b) (bytevector-u16-native-ref . G4f5a) (bytevector-sint-set! . G4f59) (bytevector-sint-ref . G4f58) (bytevector-s8-set! . G4f57) (bytevector-s8-ref . G4f56) (bytevector-s64-set! . G4f55) (bytevector-s64-ref . G4f54) (bytevector-s64-native-set! . G4f53) (bytevector-s64-native-ref . G4f52) (bytevector-s32-set! . G4f51) (bytevector-s32-ref . G4f50) (bytevector-s32-native-set! . G4f4f) (bytevector-s32-native-ref . G4f4e) (bytevector-s16-set! . G4f4d) (bytevector-s16-ref . G4f4c) (bytevector-s16-native-set! . G4f4b) (bytevector-s16-native-ref . G4f4a) (bytevector-length . G4f49) (bytevector-ieee-single-ref . G4f48) (bytevector-ieee-single-set! . G4f47) (bytevector-ieee-single-native-set! . G4f46) (bytevector-ieee-single-native-ref . G4f45) (bytevector-ieee-double-set! . G4f44) (bytevector-ieee-double-ref . G4f43) (bytevector-ieee-double-native-set! . G4f42) (bytevector-ieee-double-native-ref . G4f41) (bytevector-fill! . G4f40) (bytevector-copy! . G4f3f) (bytevector-copy . G4f3e) (bytevector->uint-list . G4f3d) (bytevector->u8-list . G4f3c) (bytevector->sint-list . G4f3b) (no-nans-violation? . G4c2b) (no-infinities-violation? . G4c16) (make-no-nans-violation . G4c29) (make-no-infinities-violation . G4c14) (real->flonum . G4f3a) (flzero? . G4f39) (fltruncate . G4f38) (fltan . G4f37) (flsqrt . G4f36) (flsin . G4f35) (flround . G4f34) (flpositive? . G4f33) (flonum? . G4f32) (flodd? . G4f31) (flnumerator . G4f30) (flnegative? . G4f2f) (flnan? . G4f2e) (flmod0 . G4f2d) (flmod . G4f2c) (flmin . G4f2b) (flmax . G4f2a) (fllog . G4f29) (flinteger? . G4f28) (flinfinite? . G4f27) (flfloor . G4f26) (flfinite? . G4f25) (flexpt . G4f24) (flexp . G4f23) (fleven? . G4f22) (fldiv0-and-mod0 . G4f21) (fldiv0 . G4f20) (fldiv-and-mod . G4f1f) (fldiv . G4f1e) (fldenominator . G4f1d) (flcos . G4f1c) (flceiling . G4f1b) (flatan . G4f1a) (flasin . G4f19) (flacos . G4f18) (flabs . G4f17) (fl>? . G4f16) (fl>=? . G4f15) (fl=? . G4f14) (fl<? . G4f13) (fl<=? . G4f12) (fl/ . G4f11) (fl- . G4f10) (fl+ . G4f0f) (fl* . G4f0e) (fixnum->flonum . G4f0d) (fxzero? . G4f0c) (fxxor . G4f0b) (fxrotate-bit-field . G4f0a) (fxreverse-bit-field . G4f09) (fxpositive? . G4f08) (fxodd? . G4f07) (fxnot . G4f06) (fxnegative? . G4f05) (fxmod0 . G4f04) (fxmod . G4f03) (fxmin . G4f02) (fxmax . G4f01) (fxlength . G4f00) (fxior . G4eff) (fxif . G4efe) (fxfirst-bit-set . G4efd) (fxeven? . G4efc) (fxdiv0-and-mod0 . G4efb) (fxdiv0 . G4efa) (fxdiv-and-mod . G4ef9) (fxdiv . G4ef8) (fxcopy-bit-field . G4ef7) (fxcopy-bit . G4ef6) (fxbit-set? . G4ef5) (fxbit-field . G4ef4) (fxbit-count . G4ef3) (fxarithmetic-shift-right . G4ef2) (fxarithmetic-shift-left . G4ef1) (fxarithmetic-shift . G4ef0) (fxand . G4eef) (fx>? . G4eee) (fx>=? . G4eed) (fx=? . G4eec) (fx<? . G4eeb) (fx<=? . G4eea) (fx-/carry . G4ee9) (fx- . G4ee8) (fx+/carry . G4ee7) (fx+ . G4ee6) (fx*/carry . G4ee5) (fx* . G4ee4) (greatest-fixnum . G4ee3) (least-fixnum . G4ee2) (fixnum-width . G4ee1) (fixnum? . G4ee0) (bitwise-rotate-bit-field . G4edf) (bitwise-reverse-bit-field . G4ede) (bitwise-length . G4edd) (bitwise-if . G4edc) (bitwise-first-bit-set . G4edb) (bitwise-copy-bit-field . G4eda) (bitwise-copy-bit . G4ed9) (bitwise-bit-set? . G4ed8) (bitwise-bit-field . G4ed7) (bitwise-bit-count . G4ed6) (bitwise-xor . G4ed5) (bitwise-ior . G4ed4) (bitwise-and . G4ed3) (bitwise-not . G4ed2) (bitwise-arithmetic-shift-right . G4ed1) (bitwise-arithmetic-shift-left . G4ed0) (bitwise-arithmetic-shift . G4ecf) (zero? . G4ece) (vector? . G4ecd) (vector-set! . G4ecc) (vector-ref . G4ecb) (vector-map . G4eca) (vector-length . G4ec9) (vector-for-each . G4ec8) (vector-fill! . G4ec7) (vector->list . G4ec6) (vector . G4ec5) (values . G4ec4) (truncate . G4ec3) (tan . G4ec2) (symbol? . G4ec1) (symbol=? . G4ec0) (symbol->string . G4ebf) (substring . G4ebe) (string? . G4ebd) (string>? . G4ebc) (string>=? . G4ebb) (string=? . G4eba) (string<? . G4eb9) (string<=? . G4eb8) (string-ref . G4eb7) (string-length . G4eb6) (string-for-each . G4eb5) (string-copy . G4eb4) (string-append . G4eb3) (string->symbol . G4eb2) (string->number . G4eb1) (string->list . G4eb0) (string . G4eaf) (sqrt . G4eae) (sin . G4ead) (round . G4eac) (reverse . G4eab) (real? . G4eaa) (real-valued? . G4ea9) (real-part . G4ea8) (rationalize . G4ea7) (rational? . G4ea6) (rational-valued? . G4ea5) (procedure? . G4ea4) (positive? . G4ea3) (pair? . G4ea2) (odd? . G4ea1) (numerator . G4ea0) (number? . G4e9f) (number->string . G4e9e) (null? . G4e9d) (not . G4e9c) (negative? . G4e9b) (nan? . G4e9a) (min . G4e99) (max . G4e98) (map . G4e97) (make-vector . G4e96) (make-string . G4e95) (make-rectangular . G4e94) (make-polar . G4e93) (magnitude . G4e92) (log . G4e91) (list? . G4e90) (list-tail . G4e8f) (list-ref . G4e8e) (list->vector . G4e8d) (list->string . G4e8c) (list . G4e8b) (length . G4e8a) (lcm . G4e89) (integer? . G4e88) (integer-valued? . G4e87) (integer->char . G4e86) (infinite? . G4e85) (inexact? . G4e84) (inexact . G4e83) (imag-part . G4e82) (gcd . G4e81) (for-each . G4e80) (floor . G4e7f) (finite? . G4e7e) (expt . G4e7d) (exp . G4e7c) (exact? . G4e7b) (exact-integer-sqrt . G4e7a) (exact . G4e79) (even? . G4e78) (error . G4e77) (eqv? . G4e76) (equal? . G4e75) (eq? . G4e74) (dynamic-wind . G4e73) (div0-and-mod0 . G4e72) (mod0 . G4e71) (div0 . G4e70) (div-and-mod . G4e6f) (mod . G4e6e) (div . G4e6d) (denominator . G4e6c) (cos . G4e6b) (cons . G4e6a) (complex? . G4e69) (char? . G4e68) (char>? . G4e67) (char>=? . G4e66) (char=? . G4e65) (char<? . G4e64) (char<=? . G4e63) (char->integer . G4e62) (ceiling . G4e61) (call-with-values . G4e60) (call/cc . G4e5f) (call-with-current-continuation . G4e5e) (cddddr . G4e5d) (cdddar . G4e5c) (cddadr . G4e5b) (cddaar . G4e5a) (cdaddr . G4e59) (cdadar . G4e58) (cdaadr . G4e57) (cdaaar . G4e56) (cadddr . G4e55) (caddar . G4e54) (cadadr . G4e53) (cadaar . G4e52) (caaddr . G4e51) (caadar . G4e50) (caaadr . G4e4f) (caaaar . G4e4e) (cdddr . G4e4d) (cddar . G4e4c) (cdadr . G4e4b) (cdaar . G4e4a) (caddr . G4e49) (cadar . G4e48) (caadr . G4e47) (caaar . G4e46) (cddr . G4e45) (cdar . G4e44) (cadr . G4e43) (caar . G4e42) (cdr . G4e41) (car . G4e40) (boolean? . G4e3f) (boolean=? . G4e3e) (atan . G4e3d) (assertion-violation . G4e3c) (asin . G4e3b) (apply . G4e3a) (append . G4e39) (angle . G4e38) (acos . G4e37) (abs . G4e36) (/ . G4e35) (* . G4e34) (- . G4e33) (+ . G4e32) (>= . G4e31) (> . G4e30) (= . G4e2f) (<= . G4e2e) (< . G4e2d) (library . G4e2c) (export . G4e2b) (&no-nans . G4e2a) (&no-infinities . G4e29) (&i/o-encoding . G4e28) (&i/o-decoding . G4e27) (&i/o-port . G4e26) (&i/o-file-does-not-exist . G4e25) (&i/o-file-already-exists . G4e24) (&i/o-file-is-read-only . G4e23) (&i/o-file-protection . G4e22) (&i/o-filename . G4e21) (&i/o-invalid-position . G4e20) (&i/o-write . G4e1f) (&i/o-read . G4e1e) (&i/o . G4e1d) (&undefined . G4e1c) (&syntax . G4e1b) (&lexical . G4e1a) (&implementation-restriction . G4e19) (&non-continuable . G4e18) (&who . G4e17) (&irritants . G4e16) (&assertion . G4e15) (&violation . G4e14) (&error . G4e13) (&serious . G4e12) (&warning . G4e11) (&message . G4e10) (&condition . G4e0f) (define-condition-type . G4e0e) (define-enumeration . G4e0d) (define-record-type . G4e0c) (parent-rtd . G4e0b) (nongenerative . G4e0a) (opaque . G4e09) (sealed . G4e08) (protocol . G4e07) (parent . G4e06) (immutable . G4e05) (mutable . G4e04) (fields . G4e03) (error-handling-mode . G4e02) (file-options . G4e01) (buffer-mode . G4e00) (eol-style . G4dff) (guard . G4dfe) (unsyntax-splicing . G4dfb) (unsyntax . G4dfa) (unquote-splicing . G4df9) (unquote . G4df8) (_ . G4df7) (else . G4df6) (=> . G4df5) (... . G4df4) (assert . G4df3) (endianness . G4df2) (do . G4def) (cond . G4dee) (let* . G4ded) (let . G4dec) (let*-values . G4deb) (let-values . G4dea) (identifier-syntax . G4de9) (with-syntax . G4de8) (quasisyntax . G4de7) (quasiquote . G4de6) (syntax-rules . G4de5) (include . G4de4) (record-constructor-descriptor . G4de2) (record-type-descriptor . G4de1) (case . G4de0) (unless . G4dde) (when . G4ddd) (or . G4ddc) (and . G4ddb) (if . G4dda) (letrec* . G4dd9) (letrec . G4dd8) (case-lambda . G4dd6) (lambda . G4dd5) (syntax . G4dd4) (syntax-case . G4dd3) (quote . G4dd2) (letrec-syntax . G4dd0) (let-syntax . G4dcf) (set! . G4dce) (import . G4dcd) (begin . G4dcc) (define-syntax . G4dca) (define . G4dc9)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G5096 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4faa) (unquote-splicing . G4df9) (unquote . G4df8) (delay . G4df1) (do . G4def) (cond . G4dee) (let* . G4ded) (let . G4dec) (quasiquote . G4de6) (syntax-rules . G4de5) (case . G4de0) (or . G4ddc) (and . G4ddb) (if . G4dda) (letrec . G4dd8) (lambda . G4dd5) (quote . G4dd2) (letrec-syntax . G4dd0) (let-syntax . G4dcf) (set! . G4dce) (begin . G4dcc) (define-syntax . G4dca) (define . G4dc9)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G5097 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G503f) (string-ci>=? . G503e) (string-ci=? . G503d) (string-ci<? . G503c) (string-ci<=? . G503b) (char-whitespace? . G503a) (char-upper-case? . G5039) (char-numeric? . G5037) (char-lower-case? . G5036) (char-upcase . G5034) (char-downcase . G5031) (char-ci>? . G5030) (char-ci>=? . G502f) (char-ci=? . G502e) (char-ci<? . G502d) (char-ci<=? . G502c) (char-alphabetic? . G502b) (call-with-output-file . G4fff) (call-with-input-file . G4ffe) (write-char . G4ffd) (write . G4ffc) (with-output-to-file . G4ffb) (with-input-from-file . G4ffa) (read-char . G4ff9) (read . G4ff8) (peek-char . G4ff7) (open-output-file . G4ff6) (open-input-file . G4ff5) (newline . G4ff4) (display . G4ff3) (close-output-port . G4ff2) (close-input-port . G4ff1) (eof-object . G4fef) (current-output-port . G4fed) (current-input-port . G4fec) (output-port? . G4feb) (input-port? . G4fea) (scheme-report-environment . G302b) (quotient . G4fb0) (null-environment . G3029) (remainder . G4faf) (modulo . G4fae) (inexact->exact . G4fad) (force . G4fac) (exact->inexact . G4fab) (make-promise . G4faa) (string-fill! . G4fa8) (string-set! . G4fa7) (set-cdr! . G4fa6) (set-car! . G4fa5) (memv . G4f9f) (memq . G4f9e) (member . G4f9c) (assv . G4f94) (assq . G4f93) (assoc . G4f91) (eval . G302f) (zero? . G4ece) (vector? . G4ecd) (vector-set! . G4ecc) (vector-ref . G4ecb) (vector-length . G4ec9) (vector-fill! . G4ec7) (vector->list . G4ec6) (vector . G4ec5) (values . G4ec4) (truncate . G4ec3) (tan . G4ec2) (symbol? . G4ec1) (symbol->string . G4ebf) (substring . G4ebe) (string? . G4ebd) (string>? . G4ebc) (string>=? . G4ebb) (string=? . G4eba) (string<? . G4eb9) (string<=? . G4eb8) (string-ref . G4eb7) (string-length . G4eb6) (string-copy . G4eb4) (string-append . G4eb3) (string->symbol . G4eb2) (string->number . G4eb1) (string->list . G4eb0) (string . G4eaf) (sqrt . G4eae) (sin . G4ead) (round . G4eac) (reverse . G4eab) (real? . G4eaa) (real-part . G4ea8) (rationalize . G4ea7) (rational? . G4ea6) (procedure? . G4ea4) (positive? . G4ea3) (pair? . G4ea2) (odd? . G4ea1) (numerator . G4ea0) (number? . G4e9f) (number->string . G4e9e) (not . G4e9c) (negative? . G4e9b) (min . G4e99) (max . G4e98) (map . G4e97) (make-vector . G4e96) (make-string . G4e95) (make-rectangular . G4e94) (make-polar . G4e93) (magnitude . G4e92) (log . G4e91) (list? . G4e90) (list-tail . G4e8f) (list-ref . G4e8e) (list->vector . G4e8d) (list->string . G4e8c) (list . G4e8b) (length . G4e8a) (lcm . G4e89) (integer? . G4e88) (integer->char . G4e86) (inexact? . G4e84) (imag-part . G4e82) (gcd . G4e81) (for-each . G4e80) (floor . G4e7f) (expt . G4e7d) (exp . G4e7c) (exact? . G4e7b) (even? . G4e78) (eqv? . G4e76) (equal? . G4e75) (eq? . G4e74) (dynamic-wind . G4e73) (denominator . G4e6c) (cos . G4e6b) (cons . G4e6a) (complex? . G4e69) (char? . G4e68) (char>? . G4e67) (char>=? . G4e66) (char=? . G4e65) (char<? . G4e64) (char<=? . G4e63) (char->integer . G4e62) (ceiling . G4e61) (call-with-values . G4e60) (call-with-current-continuation . G4e5e) (cddddr . G4e5d) (cdddar . G4e5c) (cddadr . G4e5b) (cddaar . G4e5a) (cdaddr . G4e59) (cdadar . G4e58) (cdaadr . G4e57) (cdaaar . G4e56) (cadddr . G4e55) (caddar . G4e54) (cadadr . G4e53) (cadaar . G4e52) (caaddr . G4e51) (caadar . G4e50) (caaadr . G4e4f) (caaaar . G4e4e) (cdddr . G4e4d) (cddar . G4e4c) (cdadr . G4e4b) (cdaar . G4e4a) (caddr . G4e49) (cadar . G4e48) (caadr . G4e47) (caaar . G4e46) (cddr . G4e45) (cdar . G4e44) (cadr . G4e43) (caar . G4e42) (cdr . G4e41) (car . G4e40) (boolean? . G4e3f) (atan . G4e3d) (asin . G4e3b) (apply . G4e3a) (append . G4e39) (angle . G4e38) (acos . G4e37) (abs . G4e36) (/ . G4e35) (* . G4e34) (- . G4e33) (+ . G4e32) (>= . G4e31) (> . G4e30) (= . G4e2f) (<= . G4e2e) (< . G4e2d) (unquote-splicing . G4df9) (unquote . G4df8) (delay . G4df1) (do . G4def) (cond . G4dee) (let* . G4ded) (let . G4dec) (quasiquote . G4de6) (syntax-rules . G4de5) (case . G4de0) (or . G4ddc) (and . G4ddb) (if . G4dda) (letrec . G4dd8) (lambda . G4dd5) (quote . G4dd2) (letrec-syntax . G4dd0) (let-syntax . G4dcf) (set! . G4dce) (begin . G4dcc) (define-syntax . G4dca) (define . G4dc9)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G5098 '(psyntax modules) '() '() '() '() '((module . G4dcb)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G5099 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G509a '(rnrs) '(6) '() '() '() '((regexp? . G508d) (string-upcase . G5047) (string-titlecase . G5046) (string-normalize-nfkd . G5045) (string-normalize-nfkc . G5044) (string-normalize-nfd . G5043) (string-normalize-nfc . G5042) (string-foldcase . G5041) (string-downcase . G5040) (string-ci>? . G503f) (string-ci>=? . G503e) (string-ci=? . G503d) (string-ci<? . G503c) (string-ci<=? . G503b) (char-whitespace? . G503a) (char-upper-case? . G5039) (char-title-case? . G5038) (char-numeric? . G5037) (char-lower-case? . G5036) (char-general-category . G5035) (char-upcase . G5034) (char-titlecase . G5033) (char-foldcase . G5032) (char-downcase . G5031) (char-ci>? . G5030) (char-ci>=? . G502f) (char-ci=? . G502e) (char-ci<? . G502d) (char-ci<=? . G502c) (char-alphabetic? . G502b) (make-variable-transformer . G2d9f) (identifier? . G3053) (generate-temporaries . G303d) (free-identifier=? . G303f) (syntax->datum . G3057) (datum->syntax . G3055) (bound-identifier=? . G3041) (record-type-descriptor? . G502a) (record-predicate . G5029) (record-mutator . G5028) (record-constructor . G5027) (record-accessor . G5026) (make-record-type-descriptor . G5025) (make-record-constructor-descriptor . G5024) (record? . G5023) (record-type-uid . G5022) (record-type-sealed? . G5021) (record-type-parent . G5020) (record-type-opaque? . G501f) (record-type-name . G501e) (record-type-generative? . G501d) (record-type-field-names . G501c) (record-rtd . G501b) (record-field-mutable? . G501a) (delete-file . G5019) (file-exists? . G5018) (vector-sort! . G5017) (vector-sort . G5016) (list-sort . G5015) (symbol-hash . G5014) (string-ci-hash . G5013) (string-hash . G5012) (equal-hash . G5011) (hashtable-equivalence-function . G5010) (make-hashtable . G500f) (hashtable-hash-function . G500e) (make-eqv-hashtable . G500d) (make-eq-hashtable . G500c) (hashtable? . G500b) (hashtable-update! . G500a) (hashtable-size . G5009) (hashtable-set! . G5008) (hashtable-ref . G5007) (hashtable-mutable? . G5006) (hashtable-keys . G5005) (hashtable-entries . G5004) (hashtable-delete! . G5003) (hashtable-copy . G5002) (hashtable-contains? . G5001) (hashtable-clear! . G5000) (call-with-output-file . G4fff) (call-with-input-file . G4ffe) (write-char . G4ffd) (write . G4ffc) (with-output-to-file . G4ffb) (with-input-from-file . G4ffa) (read-char . G4ff9) (read . G4ff8) (peek-char . G4ff7) (open-output-file . G4ff6) (open-input-file . G4ff5) (newline . G4ff4) (display . G4ff3) (close-output-port . G4ff2) (close-input-port . G4ff1) (eof-object? . G4ff0) (eof-object . G4fef) (current-error-port . G4fee) (current-output-port . G4fed) (current-input-port . G4fec) (output-port? . G4feb) (input-port? . G4fea) (utf-8-codec . G4fe9) (utf-16-codec . G4fe8) (transcoder-error-handling-mode . G4fe7) (transcoder-eol-style . G4fe6) (transcoder-codec . G4fe5) (transcoded-port . G4fe4) (textual-port? . G4fe3) (string->bytevector . G4fe2) (standard-output-port . G4fe1) (standard-input-port . G4fe0) (standard-error-port . G4fdf) (set-port-position! . G4fde) (put-u8 . G4fdd) (put-string . G4fdc) (put-datum . G4fdb) (put-char . G4fda) (put-bytevector . G4fd9) (port? . G4fd8) (port-transcoder . G4fd7) (port-position . G4fd6) (port-has-set-port-position!? . G4fd5) (port-has-port-position? . G4fd4) (port-eof? . G4fd3) (output-port-buffer-mode . G4fd2) (open-string-output-port . G4fd1) (open-string-input-port . G4fd0) (open-file-output-port . G4fcf) (open-file-input/output-port . G4fce) (open-file-input-port . G4fcd) (open-bytevector-output-port . G4fcc) (open-bytevector-input-port . G4fcb) (native-transcoder . G4fca) (native-eol-style . G4fc9) (make-transcoder . G4fc8) (latin-1-codec . G4fc7) (make-i/o-write-error . G4b2e) (make-i/o-read-error . G4b19) (make-i/o-port-error . G4bcc) (make-i/o-invalid-position-error . G4b44) (make-i/o-filename-error . G4b5e) (make-i/o-file-protection-error . G4b77) (make-i/o-file-is-read-only-error . G4b8c) (make-i/o-file-does-not-exist-error . G4bb6) (make-i/o-file-already-exists-error . G4ba1) (make-i/o-error . G4b04) (make-i/o-encoding-error . G4bfb) (make-i/o-decoding-error . G4be5) (make-custom-textual-output-port . G4fc6) (make-custom-textual-input/output-port . G4fc5) (make-custom-textual-input-port . G4fc4) (make-custom-binary-output-port . G4fc3) (make-custom-binary-input/output-port . G4fc2) (make-custom-binary-input-port . G4fc1) (make-bytevector . G4fc0) (lookahead-u8 . G4fbf) (lookahead-char . G4fbe) (i/o-write-error? . G4b30) (i/o-read-error? . G4b1b) (i/o-port-error? . G4bd0) (i/o-invalid-position-error? . G4b48) (i/o-filename-error? . G4b62) (i/o-file-protection-error? . G4b79) (i/o-file-is-read-only-error? . G4b8e) (i/o-file-does-not-exist-error? . G4bb8) (i/o-file-already-exists-error? . G4ba3) (i/o-error? . G4b06) (i/o-error-port . G4bd2) (i/o-error-filename . G4b64) (i/o-encoding-error? . G4bff) (i/o-encoding-error-char . G4c01) (i/o-decoding-error? . G4be7) (get-u8 . G4fbd) (get-string-n! . G4fbc) (get-string-n . G4fbb) (get-string-all . G4fba) (get-line . G4fb9) (get-datum . G4fb8) (get-char . G4fb7) (get-bytevector-some . G4fb6) (get-bytevector-n! . G4fb5) (get-bytevector-n . G4fb4) (get-bytevector-all . G4fb3) (flush-output-port . G4fb2) (close-port . G4fb1) (exit . G4fa9) (command-line . G4d2a) (remove . G4fa4) (remv . G4fa3) (remp . G4fa2) (remq . G4fa1) (partition . G4fa0) (memv . G4f9f) (memq . G4f9e) (memp . G4f9d) (member . G4f9c) (exists . G4f9b) (for-all . G4f9a) (fold-right . G4f99) (fold-left . G4f98) (find . G4f97) (filter . G4f96) (cons* . G4f95) (assv . G4f94) (assq . G4f93) (assp . G4f92) (assoc . G4f91) (call-with-string-output-port . G4f90) (call-with-port . G4f8f) (call-with-bytevector-output-port . G4f8e) (bytevector->string . G4f8d) (buffer-mode? . G4f8c) (binary-port? . G4f8b) (with-exception-handler . G4f8a) (raise-continuable . G4f89) (raise . G4f88) (make-enumeration . G4f87) (enum-set=? . G4f86) (enum-set-universe . G4f85) (enum-set-union . G4f84) (enum-set-subset? . G4f83) (enum-set-projection . G4f82) (enum-set-member? . G4f81) (enum-set-intersection . G4f80) (enum-set-indexer . G4f7f) (enum-set-difference . G4f7e) (enum-set-constructor . G4f7d) (enum-set-complement . G4f7c) (enum-set->list . G4f7b) (who-condition? . G4a7c) (warning? . G49f6) (violation? . G4a35) (undefined-violation? . G4af1) (syntax-violation? . G4ad8) (syntax-violation-subform . G4adc) (syntax-violation-form . G4ada) (syntax-violation . G3051) (simple-conditions . G4f7a) (serious-condition? . G4a0b) (non-continuable-violation? . G4a93) (message-condition? . G49df) (make-who-condition . G4a78) (make-warning . G49f4) (make-violation . G4a33) (make-undefined-violation . G4aef) (make-syntax-violation . G4ad2) (make-serious-condition . G4a09) (make-non-continuable-violation . G4a91) (make-message-condition . G49db) (make-lexical-violation . G4abb) (make-irritants-condition . G4a5e) (make-implementation-restriction-violation . G4aa6) (make-error . G4a1e) (make-assertion-violation . G4a48) (lexical-violation? . G4abd) (irritants-condition? . G4a62) (implementation-restriction-violation? . G4aa8) (error? . G4a20) (condition-who . G4a7e) (condition-predicate . G4f79) (condition-message . G49e1) (condition-irritants . G4a64) (condition-accessor . G4f78) (condition . G4f77) (assertion-violation? . G4a4a) (condition? . G4f76) (utf32->string . G4f75) (utf16->string . G4f74) (utf8->string . G4f73) (uint-list->bytevector . G4f72) (u8-list->bytevector . G4f71) (string->utf8 . G4f70) (string->utf32 . G4f6f) (string->utf16 . G4f6e) (sint-list->bytevector . G4f6d) (native-endianness . G4f6c) (bytevector? . G4f6b) (bytevector=? . G4f6a) (bytevector-uint-set! . G4f69) (bytevector-uint-ref . G4f68) (bytevector-u8-set! . G4f67) (bytevector-u8-ref . G4f66) (bytevector-u64-set! . G4f65) (bytevector-u64-ref . G4f64) (bytevector-u64-native-set! . G4f63) (bytevector-u64-native-ref . G4f62) (bytevector-u32-set! . G4f61) (bytevector-u32-ref . G4f60) (bytevector-u32-native-set! . G4f5f) (bytevector-u32-native-ref . G4f5e) (bytevector-u16-set! . G4f5d) (bytevector-u16-ref . G4f5c) (bytevector-u16-native-set! . G4f5b) (bytevector-u16-native-ref . G4f5a) (bytevector-sint-set! . G4f59) (bytevector-sint-ref . G4f58) (bytevector-s8-set! . G4f57) (bytevector-s8-ref . G4f56) (bytevector-s64-set! . G4f55) (bytevector-s64-ref . G4f54) (bytevector-s64-native-set! . G4f53) (bytevector-s64-native-ref . G4f52) (bytevector-s32-set! . G4f51) (bytevector-s32-ref . G4f50) (bytevector-s32-native-set! . G4f4f) (bytevector-s32-native-ref . G4f4e) (bytevector-s16-set! . G4f4d) (bytevector-s16-ref . G4f4c) (bytevector-s16-native-set! . G4f4b) (bytevector-s16-native-ref . G4f4a) (bytevector-length . G4f49) (bytevector-ieee-single-ref . G4f48) (bytevector-ieee-single-set! . G4f47) (bytevector-ieee-single-native-set! . G4f46) (bytevector-ieee-single-native-ref . G4f45) (bytevector-ieee-double-set! . G4f44) (bytevector-ieee-double-ref . G4f43) (bytevector-ieee-double-native-set! . G4f42) (bytevector-ieee-double-native-ref . G4f41) (bytevector-fill! . G4f40) (bytevector-copy! . G4f3f) (bytevector-copy . G4f3e) (bytevector->uint-list . G4f3d) (bytevector->u8-list . G4f3c) (bytevector->sint-list . G4f3b) (no-nans-violation? . G4c2b) (no-infinities-violation? . G4c16) (make-no-nans-violation . G4c29) (make-no-infinities-violation . G4c14) (real->flonum . G4f3a) (flzero? . G4f39) (fltruncate . G4f38) (fltan . G4f37) (flsqrt . G4f36) (flsin . G4f35) (flround . G4f34) (flpositive? . G4f33) (flonum? . G4f32) (flodd? . G4f31) (flnumerator . G4f30) (flnegative? . G4f2f) (flnan? . G4f2e) (flmod0 . G4f2d) (flmod . G4f2c) (flmin . G4f2b) (flmax . G4f2a) (fllog . G4f29) (flinteger? . G4f28) (flinfinite? . G4f27) (flfloor . G4f26) (flfinite? . G4f25) (flexpt . G4f24) (flexp . G4f23) (fleven? . G4f22) (fldiv0-and-mod0 . G4f21) (fldiv0 . G4f20) (fldiv-and-mod . G4f1f) (fldiv . G4f1e) (fldenominator . G4f1d) (flcos . G4f1c) (flceiling . G4f1b) (flatan . G4f1a) (flasin . G4f19) (flacos . G4f18) (flabs . G4f17) (fl>? . G4f16) (fl>=? . G4f15) (fl=? . G4f14) (fl<? . G4f13) (fl<=? . G4f12) (fl/ . G4f11) (fl- . G4f10) (fl+ . G4f0f) (fl* . G4f0e) (fixnum->flonum . G4f0d) (fxzero? . G4f0c) (fxxor . G4f0b) (fxrotate-bit-field . G4f0a) (fxreverse-bit-field . G4f09) (fxpositive? . G4f08) (fxodd? . G4f07) (fxnot . G4f06) (fxnegative? . G4f05) (fxmod0 . G4f04) (fxmod . G4f03) (fxmin . G4f02) (fxmax . G4f01) (fxlength . G4f00) (fxior . G4eff) (fxif . G4efe) (fxfirst-bit-set . G4efd) (fxeven? . G4efc) (fxdiv0-and-mod0 . G4efb) (fxdiv0 . G4efa) (fxdiv-and-mod . G4ef9) (fxdiv . G4ef8) (fxcopy-bit-field . G4ef7) (fxcopy-bit . G4ef6) (fxbit-set? . G4ef5) (fxbit-field . G4ef4) (fxbit-count . G4ef3) (fxarithmetic-shift-right . G4ef2) (fxarithmetic-shift-left . G4ef1) (fxarithmetic-shift . G4ef0) (fxand . G4eef) (fx>? . G4eee) (fx>=? . G4eed) (fx=? . G4eec) (fx<? . G4eeb) (fx<=? . G4eea) (fx-/carry . G4ee9) (fx- . G4ee8) (fx+/carry . G4ee7) (fx+ . G4ee6) (fx*/carry . G4ee5) (fx* . G4ee4) (greatest-fixnum . G4ee3) (least-fixnum . G4ee2) (fixnum-width . G4ee1) (fixnum? . G4ee0) (bitwise-rotate-bit-field . G4edf) (bitwise-reverse-bit-field . G4ede) (bitwise-length . G4edd) (bitwise-if . G4edc) (bitwise-first-bit-set . G4edb) (bitwise-copy-bit-field . G4eda) (bitwise-copy-bit . G4ed9) (bitwise-bit-set? . G4ed8) (bitwise-bit-field . G4ed7) (bitwise-bit-count . G4ed6) (bitwise-xor . G4ed5) (bitwise-ior . G4ed4) (bitwise-and . G4ed3) (bitwise-not . G4ed2) (bitwise-arithmetic-shift-right . G4ed1) (bitwise-arithmetic-shift-left . G4ed0) (bitwise-arithmetic-shift . G4ecf) (zero? . G4ece) (vector? . G4ecd) (vector-set! . G4ecc) (vector-ref . G4ecb) (vector-map . G4eca) (vector-length . G4ec9) (vector-for-each . G4ec8) (vector-fill! . G4ec7) (vector->list . G4ec6) (vector . G4ec5) (values . G4ec4) (truncate . G4ec3) (tan . G4ec2) (symbol? . G4ec1) (symbol=? . G4ec0) (symbol->string . G4ebf) (substring . G4ebe) (string? . G4ebd) (string>? . G4ebc) (string>=? . G4ebb) (string=? . G4eba) (string<? . G4eb9) (string<=? . G4eb8) (string-ref . G4eb7) (string-length . G4eb6) (string-for-each . G4eb5) (string-copy . G4eb4) (string-append . G4eb3) (string->symbol . G4eb2) (string->number . G4eb1) (string->list . G4eb0) (string . G4eaf) (sqrt . G4eae) (sin . G4ead) (round . G4eac) (reverse . G4eab) (real? . G4eaa) (real-valued? . G4ea9) (real-part . G4ea8) (rationalize . G4ea7) (rational? . G4ea6) (rational-valued? . G4ea5) (procedure? . G4ea4) (positive? . G4ea3) (pair? . G4ea2) (odd? . G4ea1) (numerator . G4ea0) (number? . G4e9f) (number->string . G4e9e) (null? . G4e9d) (not . G4e9c) (negative? . G4e9b) (nan? . G4e9a) (min . G4e99) (max . G4e98) (map . G4e97) (make-vector . G4e96) (make-string . G4e95) (make-rectangular . G4e94) (make-polar . G4e93) (magnitude . G4e92) (log . G4e91) (list? . G4e90) (list-tail . G4e8f) (list-ref . G4e8e) (list->vector . G4e8d) (list->string . G4e8c) (list . G4e8b) (length . G4e8a) (lcm . G4e89) (integer? . G4e88) (integer-valued? . G4e87) (integer->char . G4e86) (infinite? . G4e85) (inexact? . G4e84) (inexact . G4e83) (imag-part . G4e82) (gcd . G4e81) (for-each . G4e80) (floor . G4e7f) (finite? . G4e7e) (expt . G4e7d) (exp . G4e7c) (exact? . G4e7b) (exact-integer-sqrt . G4e7a) (exact . G4e79) (even? . G4e78) (error . G4e77) (eqv? . G4e76) (equal? . G4e75) (eq? . G4e74) (dynamic-wind . G4e73) (div0-and-mod0 . G4e72) (mod0 . G4e71) (div0 . G4e70) (div-and-mod . G4e6f) (mod . G4e6e) (div . G4e6d) (denominator . G4e6c) (cos . G4e6b) (cons . G4e6a) (complex? . G4e69) (char? . G4e68) (char>? . G4e67) (char>=? . G4e66) (char=? . G4e65) (char<? . G4e64) (char<=? . G4e63) (char->integer . G4e62) (ceiling . G4e61) (call-with-values . G4e60) (call/cc . G4e5f) (call-with-current-continuation . G4e5e) (cddddr . G4e5d) (cdddar . G4e5c) (cddadr . G4e5b) (cddaar . G4e5a) (cdaddr . G4e59) (cdadar . G4e58) (cdaadr . G4e57) (cdaaar . G4e56) (cadddr . G4e55) (caddar . G4e54) (cadadr . G4e53) (cadaar . G4e52) (caaddr . G4e51) (caadar . G4e50) (caaadr . G4e4f) (caaaar . G4e4e) (cdddr . G4e4d) (cddar . G4e4c) (cdadr . G4e4b) (cdaar . G4e4a) (caddr . G4e49) (cadar . G4e48) (caadr . G4e47) (caaar . G4e46) (cddr . G4e45) (cdar . G4e44) (cadr . G4e43) (caar . G4e42) (cdr . G4e41) (car . G4e40) (boolean? . G4e3f) (boolean=? . G4e3e) (atan . G4e3d) (assertion-violation . G4e3c) (asin . G4e3b) (apply . G4e3a) (append . G4e39) (angle . G4e38) (acos . G4e37) (abs . G4e36) (/ . G4e35) (* . G4e34) (- . G4e33) (+ . G4e32) (>= . G4e31) (> . G4e30) (= . G4e2f) (<= . G4e2e) (< . G4e2d) (&no-nans . G4e2a) (&no-infinities . G4e29) (&i/o-encoding . G4e28) (&i/o-decoding . G4e27) (&i/o-port . G4e26) (&i/o-file-does-not-exist . G4e25) (&i/o-file-already-exists . G4e24) (&i/o-file-is-read-only . G4e23) (&i/o-file-protection . G4e22) (&i/o-filename . G4e21) (&i/o-invalid-position . G4e20) (&i/o-write . G4e1f) (&i/o-read . G4e1e) (&i/o . G4e1d) (&undefined . G4e1c) (&syntax . G4e1b) (&lexical . G4e1a) (&implementation-restriction . G4e19) (&non-continuable . G4e18) (&who . G4e17) (&irritants . G4e16) (&assertion . G4e15) (&violation . G4e14) (&error . G4e13) (&serious . G4e12) (&warning . G4e11) (&message . G4e10) (&condition . G4e0f) (define-condition-type . G4e0e) (define-enumeration . G4e0d) (define-record-type . G4e0c) (parent-rtd . G4e0b) (nongenerative . G4e0a) (opaque . G4e09) (sealed . G4e08) (protocol . G4e07) (parent . G4e06) (immutable . G4e05) (mutable . G4e04) (fields . G4e03) (error-handling-mode . G4e02) (file-options . G4e01) (buffer-mode . G4e00) (eol-style . G4dff) (guard . G4dfe) (unsyntax-splicing . G4dfb) (unsyntax . G4dfa) (unquote-splicing . G4df9) (unquote . G4df8) (_ . G4df7) (else . G4df6) (=> . G4df5) (... . G4df4) (assert . G4df3) (endianness . G4df2) (do . G4def) (cond . G4dee) (let* . G4ded) (let . G4dec) (let*-values . G4deb) (let-values . G4dea) (identifier-syntax . G4de9) (with-syntax . G4de8) (quasisyntax . G4de7) (quasiquote . G4de6) (syntax-rules . G4de5) (record-constructor-descriptor . G4de2) (record-type-descriptor . G4de1) (case . G4de0) (unless . G4dde) (when . G4ddd) (or . G4ddc) (and . G4ddb) (if . G4dda) (letrec* . G4dd9) (letrec . G4dd8) (case-lambda . G4dd6) (lambda . G4dd5) (syntax . G4dd4) (syntax-case . G4dd3) (quote . G4dd2) (letrec-syntax . G4dd0) (let-syntax . G4dcf) (set! . G4dce) (begin . G4dcc) (define-syntax . G4dca) (define . G4dc9)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G509b '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G302b) (quotient . G4fb0) (null-environment . G3029) (remainder . G4faf) (modulo . G4fae) (inexact->exact . G4fad) (force . G4fac) (exact->inexact . G4fab) (make-promise . G4faa) (delay . G4df1)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G509c '(rnrs control) '(6) '() '() '() '((do . G4def) (unless . G4dde) (when . G4ddd) (case-lambda . G4dd6)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G509d '(rnrs eval) '(6) '() '() '() '((eval . G302f) (environment . G3027)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G509e '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fa6) (set-car! . G4fa5)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G509f '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fa8) (string-set! . G4fa7)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a0 '(rnrs programs) '(6) '() '() '() '((exit . G4fa9) (command-line . G4d2a)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a1 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d9f) (identifier? . G3053) (generate-temporaries . G303d) (free-identifier=? . G303f) (syntax->datum . G3057) (datum->syntax . G3055) (bound-identifier=? . G3041) (syntax-violation . G3051) (unsyntax-splicing . G4dfb) (unsyntax . G4dfa) (_ . G4df7) (... . G4df4) (with-syntax . G4de8) (quasisyntax . G4de7) (syntax . G4dd4) (syntax-case . G4dd3)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a2 '(rnrs files) '(6) '() '() '() '((delete-file . G5019) (file-exists? . G5018) (make-i/o-write-error . G4b2e) (make-i/o-read-error . G4b19) (make-i/o-port-error . G4bcc) (make-i/o-invalid-position-error . G4b44) (make-i/o-filename-error . G4b5e) (make-i/o-file-protection-error . G4b77) (make-i/o-file-is-read-only-error . G4b8c) (make-i/o-file-does-not-exist-error . G4bb6) (make-i/o-file-already-exists-error . G4ba1) (make-i/o-error . G4b04) (i/o-write-error? . G4b30) (i/o-read-error? . G4b1b) (i/o-port-error? . G4bd0) (i/o-invalid-position-error? . G4b48) (i/o-filename-error? . G4b62) (i/o-file-protection-error? . G4b79) (i/o-file-is-read-only-error? . G4b8e) (i/o-file-does-not-exist-error? . G4bb8) (i/o-file-already-exists-error? . G4ba3) (i/o-error? . G4b06) (i/o-error-port . G4bd2) (i/o-error-filename . G4b64) (&i/o-port . G4e26) (&i/o-file-does-not-exist . G4e25) (&i/o-file-already-exists . G4e24) (&i/o-file-is-read-only . G4e23) (&i/o-file-protection . G4e22) (&i/o-filename . G4e21) (&i/o-invalid-position . G4e20) (&i/o-write . G4e1f) (&i/o-read . G4e1e) (&i/o . G4e1d)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a3 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5017) (vector-sort . G5016) (list-sort . G5015)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a4 '(rnrs base) '(6) '() '() '() '((zero? . G4ece) (vector? . G4ecd) (vector-set! . G4ecc) (vector-ref . G4ecb) (vector-map . G4eca) (vector-length . G4ec9) (vector-for-each . G4ec8) (vector-fill! . G4ec7) (vector->list . G4ec6) (vector . G4ec5) (values . G4ec4) (truncate . G4ec3) (tan . G4ec2) (symbol? . G4ec1) (symbol=? . G4ec0) (symbol->string . G4ebf) (substring . G4ebe) (string? . G4ebd) (string>? . G4ebc) (string>=? . G4ebb) (string=? . G4eba) (string<? . G4eb9) (string<=? . G4eb8) (string-ref . G4eb7) (string-length . G4eb6) (string-for-each . G4eb5) (string-copy . G4eb4) (string-append . G4eb3) (string->symbol . G4eb2) (string->number . G4eb1) (string->list . G4eb0) (string . G4eaf) (sqrt . G4eae) (sin . G4ead) (round . G4eac) (reverse . G4eab) (real? . G4eaa) (real-valued? . G4ea9) (real-part . G4ea8) (rationalize . G4ea7) (rational? . G4ea6) (rational-valued? . G4ea5) (procedure? . G4ea4) (positive? . G4ea3) (pair? . G4ea2) (odd? . G4ea1) (numerator . G4ea0) (number? . G4e9f) (number->string . G4e9e) (null? . G4e9d) (not . G4e9c) (negative? . G4e9b) (nan? . G4e9a) (min . G4e99) (max . G4e98) (map . G4e97) (make-vector . G4e96) (make-string . G4e95) (make-rectangular . G4e94) (make-polar . G4e93) (magnitude . G4e92) (log . G4e91) (list? . G4e90) (list-tail . G4e8f) (list-ref . G4e8e) (list->vector . G4e8d) (list->string . G4e8c) (list . G4e8b) (length . G4e8a) (lcm . G4e89) (integer? . G4e88) (integer-valued? . G4e87) (integer->char . G4e86) (infinite? . G4e85) (inexact? . G4e84) (inexact . G4e83) (imag-part . G4e82) (gcd . G4e81) (for-each . G4e80) (floor . G4e7f) (finite? . G4e7e) (expt . G4e7d) (exp . G4e7c) (exact? . G4e7b) (exact-integer-sqrt . G4e7a) (exact . G4e79) (even? . G4e78) (error . G4e77) (eqv? . G4e76) (equal? . G4e75) (eq? . G4e74) (dynamic-wind . G4e73) (div0-and-mod0 . G4e72) (mod0 . G4e71) (div0 . G4e70) (div-and-mod . G4e6f) (mod . G4e6e) (div . G4e6d) (denominator . G4e6c) (cos . G4e6b) (cons . G4e6a) (complex? . G4e69) (char? . G4e68) (char>? . G4e67) (char>=? . G4e66) (char=? . G4e65) (char<? . G4e64) (char<=? . G4e63) (char->integer . G4e62) (ceiling . G4e61) (call-with-values . G4e60) (call/cc . G4e5f) (call-with-current-continuation . G4e5e) (cddddr . G4e5d) (cdddar . G4e5c) (cddadr . G4e5b) (cddaar . G4e5a) (cdaddr . G4e59) (cdadar . G4e58) (cdaadr . G4e57) (cdaaar . G4e56) (cadddr . G4e55) (caddar . G4e54) (cadadr . G4e53) (cadaar . G4e52) (caaddr . G4e51) (caadar . G4e50) (caaadr . G4e4f) (caaaar . G4e4e) (cdddr . G4e4d) (cddar . G4e4c) (cdadr . G4e4b) (cdaar . G4e4a) (caddr . G4e49) (cadar . G4e48) (caadr . G4e47) (caaar . G4e46) (cddr . G4e45) (cdar . G4e44) (cadr . G4e43) (caar . G4e42) (cdr . G4e41) (car . G4e40) (boolean? . G4e3f) (boolean=? . G4e3e) (atan . G4e3d) (assertion-violation . G4e3c) (asin . G4e3b) (apply . G4e3a) (append . G4e39) (angle . G4e38) (acos . G4e37) (abs . G4e36) (/ . G4e35) (* . G4e34) (- . G4e33) (+ . G4e32) (>= . G4e31) (> . G4e30) (= . G4e2f) (<= . G4e2e) (< . G4e2d) (unquote-splicing . G4df9) (unquote . G4df8) (_ . G4df7) (else . G4df6) (=> . G4df5) (... . G4df4) (assert . G4df3) (cond . G4dee) (let* . G4ded) (let . G4dec) (let*-values . G4deb) (let-values . G4dea) (identifier-syntax . G4de9) (quasiquote . G4de6) (syntax-rules . G4de5) (case . G4de0) (or . G4ddc) (and . G4ddb) (if . G4dda) (letrec* . G4dd9) (letrec . G4dd8) (lambda . G4dd5) (quote . G4dd2) (letrec-syntax . G4dd0) (let-syntax . G4dcf) (set! . G4dce) (begin . G4dcc) (define-syntax . G4dca) (define . G4dc9)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a5 '(rnrs lists) '(6) '() '() '() '((remove . G4fa4) (remv . G4fa3) (remp . G4fa2) (remq . G4fa1) (partition . G4fa0) (memv . G4f9f) (memq . G4f9e) (memp . G4f9d) (member . G4f9c) (exists . G4f9b) (for-all . G4f9a) (fold-right . G4f99) (fold-left . G4f98) (find . G4f97) (filter . G4f96) (cons* . G4f95) (assv . G4f94) (assq . G4f93) (assp . G4f92) (assoc . G4f91)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a6 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4fff) (call-with-input-file . G4ffe) (write-char . G4ffd) (write . G4ffc) (with-output-to-file . G4ffb) (with-input-from-file . G4ffa) (read-char . G4ff9) (read . G4ff8) (peek-char . G4ff7) (open-output-file . G4ff6) (open-input-file . G4ff5) (newline . G4ff4) (display . G4ff3) (close-output-port . G4ff2) (close-input-port . G4ff1) (eof-object? . G4ff0) (eof-object . G4fef) (current-error-port . G4fee) (current-output-port . G4fed) (current-input-port . G4fec) (output-port? . G4feb) (input-port? . G4fea) (make-i/o-write-error . G4b2e) (make-i/o-read-error . G4b19) (make-i/o-port-error . G4bcc) (make-i/o-invalid-position-error . G4b44) (make-i/o-filename-error . G4b5e) (make-i/o-file-protection-error . G4b77) (make-i/o-file-is-read-only-error . G4b8c) (make-i/o-file-does-not-exist-error . G4bb6) (make-i/o-file-already-exists-error . G4ba1) (make-i/o-error . G4b04) (i/o-write-error? . G4b30) (i/o-read-error? . G4b1b) (i/o-port-error? . G4bd0) (i/o-invalid-position-error? . G4b48) (i/o-filename-error? . G4b62) (i/o-file-protection-error? . G4b79) (i/o-file-is-read-only-error? . G4b8e) (i/o-file-does-not-exist-error? . G4bb8) (i/o-file-already-exists-error? . G4ba3) (i/o-error? . G4b06) (i/o-error-port . G4bd2) (i/o-error-filename . G4b64) (&i/o-port . G4e26) (&i/o-file-does-not-exist . G4e25) (&i/o-file-already-exists . G4e24) (&i/o-file-is-read-only . G4e23) (&i/o-file-protection . G4e22) (&i/o-filename . G4e21) (&i/o-invalid-position . G4e20) (&i/o-write . G4e1f) (&i/o-read . G4e1e) (&i/o . G4e1d)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a7 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fc0) (utf32->string . G4f75) (utf16->string . G4f74) (utf8->string . G4f73) (uint-list->bytevector . G4f72) (u8-list->bytevector . G4f71) (string->utf8 . G4f70) (string->utf32 . G4f6f) (string->utf16 . G4f6e) (sint-list->bytevector . G4f6d) (native-endianness . G4f6c) (bytevector? . G4f6b) (bytevector=? . G4f6a) (bytevector-uint-set! . G4f69) (bytevector-uint-ref . G4f68) (bytevector-u8-set! . G4f67) (bytevector-u8-ref . G4f66) (bytevector-u64-set! . G4f65) (bytevector-u64-ref . G4f64) (bytevector-u64-native-set! . G4f63) (bytevector-u64-native-ref . G4f62) (bytevector-u32-set! . G4f61) (bytevector-u32-ref . G4f60) (bytevector-u32-native-set! . G4f5f) (bytevector-u32-native-ref . G4f5e) (bytevector-u16-set! . G4f5d) (bytevector-u16-ref . G4f5c) (bytevector-u16-native-set! . G4f5b) (bytevector-u16-native-ref . G4f5a) (bytevector-sint-set! . G4f59) (bytevector-sint-ref . G4f58) (bytevector-s8-set! . G4f57) (bytevector-s8-ref . G4f56) (bytevector-s64-set! . G4f55) (bytevector-s64-ref . G4f54) (bytevector-s64-native-set! . G4f53) (bytevector-s64-native-ref . G4f52) (bytevector-s32-set! . G4f51) (bytevector-s32-ref . G4f50) (bytevector-s32-native-set! . G4f4f) (bytevector-s32-native-ref . G4f4e) (bytevector-s16-set! . G4f4d) (bytevector-s16-ref . G4f4c) (bytevector-s16-native-set! . G4f4b) (bytevector-s16-native-ref . G4f4a) (bytevector-length . G4f49) (bytevector-ieee-single-ref . G4f48) (bytevector-ieee-single-set! . G4f47) (bytevector-ieee-single-native-set! . G4f46) (bytevector-ieee-single-native-ref . G4f45) (bytevector-ieee-double-set! . G4f44) (bytevector-ieee-double-ref . G4f43) (bytevector-ieee-double-native-set! . G4f42) (bytevector-ieee-double-native-ref . G4f41) (bytevector-fill! . G4f40) (bytevector-copy! . G4f3f) (bytevector-copy . G4f3e) (bytevector->uint-list . G4f3d) (bytevector->u8-list . G4f3c) (bytevector->sint-list . G4f3b) (endianness . G4df2)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a8 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5047) (string-titlecase . G5046) (string-normalize-nfkd . G5045) (string-normalize-nfkc . G5044) (string-normalize-nfd . G5043) (string-normalize-nfc . G5042) (string-foldcase . G5041) (string-downcase . G5040) (string-ci>? . G503f) (string-ci>=? . G503e) (string-ci=? . G503d) (string-ci<? . G503c) (string-ci<=? . G503b) (char-whitespace? . G503a) (char-upper-case? . G5039) (char-title-case? . G5038) (char-numeric? . G5037) (char-lower-case? . G5036) (char-general-category . G5035) (char-upcase . G5034) (char-titlecase . G5033) (char-foldcase . G5032) (char-downcase . G5031) (char-ci>? . G5030) (char-ci>=? . G502f) (char-ci=? . G502e) (char-ci<? . G502d) (char-ci<=? . G502c) (char-alphabetic? . G502b)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50a9 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f8a) (raise-continuable . G4f89) (raise . G4f88) (guard . G4dfe) (else . G4df6) (=> . G4df5)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50aa '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4edf) (bitwise-reverse-bit-field . G4ede) (bitwise-length . G4edd) (bitwise-if . G4edc) (bitwise-first-bit-set . G4edb) (bitwise-copy-bit-field . G4eda) (bitwise-copy-bit . G4ed9) (bitwise-bit-set? . G4ed8) (bitwise-bit-field . G4ed7) (bitwise-bit-count . G4ed6) (bitwise-xor . G4ed5) (bitwise-ior . G4ed4) (bitwise-and . G4ed3) (bitwise-not . G4ed2) (bitwise-arithmetic-shift-right . G4ed1) (bitwise-arithmetic-shift-left . G4ed0) (bitwise-arithmetic-shift . G4ecf)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50ab '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f0c) (fxxor . G4f0b) (fxrotate-bit-field . G4f0a) (fxreverse-bit-field . G4f09) (fxpositive? . G4f08) (fxodd? . G4f07) (fxnot . G4f06) (fxnegative? . G4f05) (fxmod0 . G4f04) (fxmod . G4f03) (fxmin . G4f02) (fxmax . G4f01) (fxlength . G4f00) (fxior . G4eff) (fxif . G4efe) (fxfirst-bit-set . G4efd) (fxeven? . G4efc) (fxdiv0-and-mod0 . G4efb) (fxdiv0 . G4efa) (fxdiv-and-mod . G4ef9) (fxdiv . G4ef8) (fxcopy-bit-field . G4ef7) (fxcopy-bit . G4ef6) (fxbit-set? . G4ef5) (fxbit-field . G4ef4) (fxbit-count . G4ef3) (fxarithmetic-shift-right . G4ef2) (fxarithmetic-shift-left . G4ef1) (fxarithmetic-shift . G4ef0) (fxand . G4eef) (fx>? . G4eee) (fx>=? . G4eed) (fx=? . G4eec) (fx<? . G4eeb) (fx<=? . G4eea) (fx-/carry . G4ee9) (fx- . G4ee8) (fx+/carry . G4ee7) (fx+ . G4ee6) (fx*/carry . G4ee5) (fx* . G4ee4) (greatest-fixnum . G4ee3) (least-fixnum . G4ee2) (fixnum-width . G4ee1) (fixnum? . G4ee0)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50ac '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c2b) (no-infinities-violation? . G4c16) (make-no-nans-violation . G4c29) (make-no-infinities-violation . G4c14) (real->flonum . G4f3a) (flzero? . G4f39) (fltruncate . G4f38) (fltan . G4f37) (flsqrt . G4f36) (flsin . G4f35) (flround . G4f34) (flpositive? . G4f33) (flonum? . G4f32) (flodd? . G4f31) (flnumerator . G4f30) (flnegative? . G4f2f) (flnan? . G4f2e) (flmod0 . G4f2d) (flmod . G4f2c) (flmin . G4f2b) (flmax . G4f2a) (fllog . G4f29) (flinteger? . G4f28) (flinfinite? . G4f27) (flfloor . G4f26) (flfinite? . G4f25) (flexpt . G4f24) (flexp . G4f23) (fleven? . G4f22) (fldiv0-and-mod0 . G4f21) (fldiv0 . G4f20) (fldiv-and-mod . G4f1f) (fldiv . G4f1e) (fldenominator . G4f1d) (flcos . G4f1c) (flceiling . G4f1b) (flatan . G4f1a) (flasin . G4f19) (flacos . G4f18) (flabs . G4f17) (fl>? . G4f16) (fl>=? . G4f15) (fl=? . G4f14) (fl<? . G4f13) (fl<=? . G4f12) (fl/ . G4f11) (fl- . G4f10) (fl+ . G4f0f) (fl* . G4f0e) (fixnum->flonum . G4f0d) (&no-nans . G4e2a) (&no-infinities . G4e29)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50ad '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5014) (string-ci-hash . G5013) (string-hash . G5012) (equal-hash . G5011) (hashtable-equivalence-function . G5010) (make-hashtable . G500f) (hashtable-hash-function . G500e) (make-eqv-hashtable . G500d) (make-eq-hashtable . G500c) (hashtable? . G500b) (hashtable-update! . G500a) (hashtable-size . G5009) (hashtable-set! . G5008) (hashtable-ref . G5007) (hashtable-mutable? . G5006) (hashtable-keys . G5005) (hashtable-entries . G5004) (hashtable-delete! . G5003) (hashtable-copy . G5002) (hashtable-contains? . G5001) (hashtable-clear! . G5000)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50ae '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ff0) (eof-object . G4fef) (current-error-port . G4fee) (current-output-port . G4fed) (current-input-port . G4fec) (output-port? . G4feb) (input-port? . G4fea) (utf-8-codec . G4fe9) (utf-16-codec . G4fe8) (transcoder-error-handling-mode . G4fe7) (transcoder-eol-style . G4fe6) (transcoder-codec . G4fe5) (transcoded-port . G4fe4) (textual-port? . G4fe3) (string->bytevector . G4fe2) (standard-output-port . G4fe1) (standard-input-port . G4fe0) (standard-error-port . G4fdf) (set-port-position! . G4fde) (put-u8 . G4fdd) (put-string . G4fdc) (put-datum . G4fdb) (put-char . G4fda) (put-bytevector . G4fd9) (port? . G4fd8) (port-transcoder . G4fd7) (port-position . G4fd6) (port-has-set-port-position!? . G4fd5) (port-has-port-position? . G4fd4) (port-eof? . G4fd3) (output-port-buffer-mode . G4fd2) (open-string-output-port . G4fd1) (open-string-input-port . G4fd0) (open-file-output-port . G4fcf) (open-file-input/output-port . G4fce) (open-file-input-port . G4fcd) (open-bytevector-output-port . G4fcc) (open-bytevector-input-port . G4fcb) (native-transcoder . G4fca) (native-eol-style . G4fc9) (make-transcoder . G4fc8) (latin-1-codec . G4fc7) (make-i/o-write-error . G4b2e) (make-i/o-read-error . G4b19) (make-i/o-port-error . G4bcc) (make-i/o-invalid-position-error . G4b44) (make-i/o-filename-error . G4b5e) (make-i/o-file-protection-error . G4b77) (make-i/o-file-is-read-only-error . G4b8c) (make-i/o-file-does-not-exist-error . G4bb6) (make-i/o-file-already-exists-error . G4ba1) (make-i/o-error . G4b04) (make-i/o-encoding-error . G4bfb) (make-i/o-decoding-error . G4be5) (make-custom-textual-output-port . G4fc6) (make-custom-textual-input/output-port . G4fc5) (make-custom-textual-input-port . G4fc4) (make-custom-binary-output-port . G4fc3) (make-custom-binary-input/output-port . G4fc2) (make-custom-binary-input-port . G4fc1) (lookahead-u8 . G4fbf) (lookahead-char . G4fbe) (i/o-write-error? . G4b30) (i/o-read-error? . G4b1b) (i/o-port-error? . G4bd0) (i/o-invalid-position-error? . G4b48) (i/o-filename-error? . G4b62) (i/o-file-protection-error? . G4b79) (i/o-file-is-read-only-error? . G4b8e) (i/o-file-does-not-exist-error? . G4bb8) (i/o-file-already-exists-error? . G4ba3) (i/o-error? . G4b06) (i/o-error-port . G4bd2) (i/o-error-filename . G4b64) (i/o-encoding-error? . G4bff) (i/o-encoding-error-char . G4c01) (i/o-decoding-error? . G4be7) (get-u8 . G4fbd) (get-string-n! . G4fbc) (get-string-n . G4fbb) (get-string-all . G4fba) (get-line . G4fb9) (get-datum . G4fb8) (get-char . G4fb7) (get-bytevector-some . G4fb6) (get-bytevector-n! . G4fb5) (get-bytevector-n . G4fb4) (get-bytevector-all . G4fb3) (flush-output-port . G4fb2) (close-port . G4fb1) (call-with-string-output-port . G4f90) (call-with-port . G4f8f) (call-with-bytevector-output-port . G4f8e) (bytevector->string . G4f8d) (buffer-mode? . G4f8c) (binary-port? . G4f8b) (&i/o-encoding . G4e28) (&i/o-decoding . G4e27) (&i/o-port . G4e26) (&i/o-file-does-not-exist . G4e25) (&i/o-file-already-exists . G4e24) (&i/o-file-is-read-only . G4e23) (&i/o-file-protection . G4e22) (&i/o-filename . G4e21) (&i/o-invalid-position . G4e20) (&i/o-write . G4e1f) (&i/o-read . G4e1e) (&i/o . G4e1d) (error-handling-mode . G4e02) (file-options . G4e01) (buffer-mode . G4e00) (eol-style . G4dff)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50af '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f87) (enum-set=? . G4f86) (enum-set-universe . G4f85) (enum-set-union . G4f84) (enum-set-subset? . G4f83) (enum-set-projection . G4f82) (enum-set-member? . G4f81) (enum-set-intersection . G4f80) (enum-set-indexer . G4f7f) (enum-set-difference . G4f7e) (enum-set-constructor . G4f7d) (enum-set-complement . G4f7c) (enum-set->list . G4f7b) (define-enumeration . G4e0d)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50b0 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a7c) (warning? . G49f6) (violation? . G4a35) (undefined-violation? . G4af1) (syntax-violation? . G4ad8) (syntax-violation-subform . G4adc) (syntax-violation-form . G4ada) (syntax-violation . G3051) (simple-conditions . G4f7a) (serious-condition? . G4a0b) (non-continuable-violation? . G4a93) (message-condition? . G49df) (make-who-condition . G4a78) (make-warning . G49f4) (make-violation . G4a33) (make-undefined-violation . G4aef) (make-syntax-violation . G4ad2) (make-serious-condition . G4a09) (make-non-continuable-violation . G4a91) (make-message-condition . G49db) (make-lexical-violation . G4abb) (make-irritants-condition . G4a5e) (make-implementation-restriction-violation . G4aa6) (make-error . G4a1e) (make-assertion-violation . G4a48) (lexical-violation? . G4abd) (irritants-condition? . G4a62) (implementation-restriction-violation? . G4aa8) (error? . G4a20) (condition-who . G4a7e) (condition-predicate . G4f79) (condition-message . G49e1) (condition-irritants . G4a64) (condition-accessor . G4f78) (condition . G4f77) (assertion-violation? . G4a4a) (condition? . G4f76) (&undefined . G4e1c) (&syntax . G4e1b) (&lexical . G4e1a) (&implementation-restriction . G4e19) (&non-continuable . G4e18) (&who . G4e17) (&irritants . G4e16) (&assertion . G4e15) (&violation . G4e14) (&error . G4e13) (&serious . G4e12) (&warning . G4e11) (&message . G4e10) (&condition . G4e0f) (define-condition-type . G4e0e)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50b1 '(rnrs records inspection) '(6) '() '() '() '((record? . G5023) (record-type-uid . G5022) (record-type-sealed? . G5021) (record-type-parent . G5020) (record-type-opaque? . G501f) (record-type-name . G501e) (record-type-generative? . G501d) (record-type-field-names . G501c) (record-rtd . G501b) (record-field-mutable? . G501a)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50b2 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G502a) (record-predicate . G5029) (record-mutator . G5028) (record-constructor . G5027) (record-accessor . G5026) (make-record-type-descriptor . G5025) (make-record-constructor-descriptor . G5024)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50b3 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e0c) (parent-rtd . G4e0b) (nongenerative . G4e0a) (opaque . G4e09) (sealed . G4e08) (protocol . G4e07) (parent . G4e06) (immutable . G4e05) (mutable . G4e04) (fields . G4e03) (record-constructor-descriptor . G4de2) (record-type-descriptor . G4de1)) '() values values '#f '#f '#t '#f) (G2b7b@G2a20@install-library 'G50b4 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c2f) (&no-nans-rtd . G4c2d) (&no-infinities-rcd . G4c1a) (&no-infinities-rtd . G4c18) (&i/o-encoding-rcd . G4c05) (&i/o-encoding-rtd . G4c03) (&i/o-decoding-rcd . G4beb) (&i/o-decoding-rtd . G4be9) (&i/o-port-rcd . G4bd6) (&i/o-port-rtd . G4bd4) (&i/o-file-does-not-exist-rcd . G4bbc) (&i/o-file-does-not-exist-rtd . G4bba) (&i/o-file-already-exists-rcd . G4ba7) (&i/o-file-already-exists-rtd . G4ba5) (&i/o-file-is-read-only-rcd . G4b92) (&i/o-file-is-read-only-rtd . G4b90) (&i/o-file-protection-rcd . G4b7d) (&i/o-file-protection-rtd . G4b7b) (&i/o-filename-rcd . G4b68) (&i/o-filename-rtd . G4b66) (&i/o-invalid-position-rcd . G4b4e) (&i/o-invalid-position-rtd . G4b4c) (&i/o-write-rcd . G4b34) (&i/o-write-rtd . G4b32) (&i/o-read-rcd . G4b1f) (&i/o-read-rtd . G4b1d) (&i/o-rcd . G4b0a) (&i/o-rtd . G4b08) (&undefined-rcd . G4af5) (&undefined-rtd . G4af3) (&syntax-rcd . G4ae0) (&syntax-rtd . G4ade) (&lexical-rcd . G4ac1) (&lexical-rtd . G4abf) (&implementation-restriction-rcd . G4aac) (&implementation-restriction-rtd . G4aaa) (&non-continuable-rcd . G4a97) (&non-continuable-rtd . G4a95) (&who-rcd . G4a82) (&who-rtd . G4a80) (&irritants-rcd . G4a68) (&irritants-rtd . G4a66) (&assertion-rcd . G4a4e) (&assertion-rtd . G4a4c) (&violation-rcd . G4a39) (&violation-rtd . G4a37) (&error-rcd . G4a24) (&error-rtd . G4a22) (&serious-rcd . G4a0f) (&serious-rtd . G4a0d) (&warning-rcd . G49fa) (&warning-rtd . G49f8) (&message-rcd . G49e5) (&message-rtd . G49e3) (&condition-rcd . G4988) (&condition-rtd . G4986) (syntax-error . G304b) (syntax-dispatch . G2f64) (pretty-print . G5094) (eval-core . G5093) (set-symbol-value! . G5092) (symbol-value . G5091) (gensym . G5090) (void . G508f) (load . G4d30) (interaction-environment . G305d) (char-ready? . G508e) (regexp? . G508d) (read-line . G508c) (dotted-list? . G508b) (circular-list? . G508a) (proper-list? . G5089) (circular-list . G5088) (last . G5087) (last-pair . G5086) (not-pair? . G5085) (split-at! . G5084) (split-at . G5083) (list= . G5082) (list-copy . G5081) (list-tabulate . G5080) (make-list . G507f) (xcons . G507e) (tenth . G507d) (ninth . G507c) (eighth . G507b) (seventh . G507a) (sixth . G5079) (fifth . G5078) (drop-right! . G5077) (drop-right . G5076) (take-right . G5075) (take! . G5074) (drop . G5073) (take . G5072) (car+cdr . G5071) (third . G5070) (second . G506f) (first . G506e) (iota . G506d) (every . G506c) (assoc-ref . G506b) (alist-cons . G506a) (append-map . G5069) (print . G5068) (format . G5067) (standard-library-path . G5066) (file-newer? . G5065) (stat-mtime . G5064) (current-directory . G5063) (write-to-file . G5062) (file->list . G5061) (file->string . G5060) (digit->integer . G505f) (call-with-string-input-port . G505e) (call-with-string-io . G505d) (string-split . G505c) (bytevector-for-each . G505b) (string->regexp . G505a) (rxmatch . G5059) (regexp-replace-all . G5058) (hashtable-for-each . G5057) (readdir . G5056) (get-environment-variables . G5055) (get-environment-variable . G5054) (get-timeofday . G5053) (get-command-line . G5052) (sys-display . G5051) (source-info . G5050) (make-compiler-instruction . G504f) (make-instruction . G504e) (set-source-info! . G504d) (bignum? . G504c) (make-complex . G504b) (fasl-read . G504a) (fasl-write . G5049) (receive . G5048) (make-parameter . G283a) (string-upcase . G5047) (string-titlecase . G5046) (string-normalize-nfkd . G5045) (string-normalize-nfkc . G5044) (string-normalize-nfd . G5043) (string-normalize-nfc . G5042) (string-foldcase . G5041) (string-downcase . G5040) (string-ci>? . G503f) (string-ci>=? . G503e) (string-ci=? . G503d) (string-ci<? . G503c) (string-ci<=? . G503b) (char-whitespace? . G503a) (char-upper-case? . G5039) (char-title-case? . G5038) (char-numeric? . G5037) (char-lower-case? . G5036) (char-general-category . G5035) (char-upcase . G5034) (char-titlecase . G5033) (char-foldcase . G5032) (char-downcase . G5031) (char-ci>? . G5030) (char-ci>=? . G502f) (char-ci=? . G502e) (char-ci<? . G502d) (char-ci<=? . G502c) (char-alphabetic? . G502b) (make-variable-transformer . G2d9f) (identifier? . G3053) (generate-temporaries . G303d) (free-identifier=? . G303f) (syntax->datum . G3057) (datum->syntax . G3055) (bound-identifier=? . G3041) (record-type-descriptor? . G502a) (record-predicate . G5029) (record-mutator . G5028) (record-constructor . G5027) (record-accessor . G5026) (make-record-type-descriptor . G5025) (make-record-constructor-descriptor . G5024) (record? . G5023) (record-type-uid . G5022) (record-type-sealed? . G5021) (record-type-parent . G5020) (record-type-opaque? . G501f) (record-type-name . G501e) (record-type-generative? . G501d) (record-type-field-names . G501c) (record-rtd . G501b) (record-field-mutable? . G501a) (delete-file . G5019) (file-exists? . G5018) (vector-sort! . G5017) (vector-sort . G5016) (list-sort . G5015) (symbol-hash . G5014) (string-ci-hash . G5013) (string-hash . G5012) (equal-hash . G5011) (hashtable-equivalence-function . G5010) (make-hashtable . G500f) (hashtable-hash-function . G500e) (make-eqv-hashtable . G500d) (make-eq-hashtable . G500c) (hashtable? . G500b) (hashtable-update! . G500a) (hashtable-size . G5009) (hashtable-set! . G5008) (hashtable-ref . G5007) (hashtable-mutable? . G5006) (hashtable-keys . G5005) (hashtable-entries . G5004) (hashtable-delete! . G5003) (hashtable-copy . G5002) (hashtable-contains? . G5001) (hashtable-clear! . G5000) (call-with-output-file . G4fff) (call-with-input-file . G4ffe) (write-char . G4ffd) (write . G4ffc) (with-output-to-file . G4ffb) (with-input-from-file . G4ffa) (read-char . G4ff9) (read . G4ff8) (peek-char . G4ff7) (open-output-file . G4ff6) (open-input-file . G4ff5) (newline . G4ff4) (display . G4ff3) (close-output-port . G4ff2) (close-input-port . G4ff1) (eof-object? . G4ff0) (eof-object . G4fef) (current-error-port . G4fee) (current-output-port . G4fed) (current-input-port . G4fec) (output-port? . G4feb) (input-port? . G4fea) (utf-8-codec . G4fe9) (utf-16-codec . G4fe8) (transcoder-error-handling-mode . G4fe7) (transcoder-eol-style . G4fe6) (transcoder-codec . G4fe5) (transcoded-port . G4fe4) (textual-port? . G4fe3) (string->bytevector . G4fe2) (standard-output-port . G4fe1) (standard-input-port . G4fe0) (standard-error-port . G4fdf) (set-port-position! . G4fde) (put-u8 . G4fdd) (put-string . G4fdc) (put-datum . G4fdb) (put-char . G4fda) (put-bytevector . G4fd9) (port? . G4fd8) (port-transcoder . G4fd7) (port-position . G4fd6) (port-has-set-port-position!? . G4fd5) (port-has-port-position? . G4fd4) (port-eof? . G4fd3) (output-port-buffer-mode . G4fd2) (open-string-output-port . G4fd1) (open-string-input-port . G4fd0) (open-file-output-port . G4fcf) (open-file-input/output-port . G4fce) (open-file-input-port . G4fcd) (open-bytevector-output-port . G4fcc) (open-bytevector-input-port . G4fcb) (native-transcoder . G4fca) (native-eol-style . G4fc9) (make-transcoder . G4fc8) (latin-1-codec . G4fc7) (make-i/o-write-error . G4b2e) (make-i/o-read-error . G4b19) (make-i/o-port-error . G4bcc) (make-i/o-invalid-position-error . G4b44) (make-i/o-filename-error . G4b5e) (make-i/o-file-protection-error . G4b77) (make-i/o-file-is-read-only-error . G4b8c) (make-i/o-file-does-not-exist-error . G4bb6) (make-i/o-file-already-exists-error . G4ba1) (make-i/o-error . G4b04) (make-i/o-encoding-error . G4bfb) (make-i/o-decoding-error . G4be5) (make-custom-textual-output-port . G4fc6) (make-custom-textual-input/output-port . G4fc5) (make-custom-textual-input-port . G4fc4) (make-custom-binary-output-port . G4fc3) (make-custom-binary-input/output-port . G4fc2) (make-custom-binary-input-port . G4fc1) (make-bytevector . G4fc0) (lookahead-u8 . G4fbf) (lookahead-char . G4fbe) (i/o-write-error? . G4b30) (i/o-read-error? . G4b1b) (i/o-port-error? . G4bd0) (i/o-invalid-position-error? . G4b48) (i/o-filename-error? . G4b62) (i/o-file-protection-error? . G4b79) (i/o-file-is-read-only-error? . G4b8e) (i/o-file-does-not-exist-error? . G4bb8) (i/o-file-already-exists-error? . G4ba3) (i/o-error? . G4b06) (i/o-error-port . G4bd2) (i/o-error-filename . G4b64) (i/o-encoding-error? . G4bff) (i/o-encoding-error-char . G4c01) (i/o-decoding-error? . G4be7) (get-u8 . G4fbd) (get-string-n! . G4fbc) (get-string-n . G4fbb) (get-string-all . G4fba) (get-line . G4fb9) (get-datum . G4fb8) (get-char . G4fb7) (get-bytevector-some . G4fb6) (get-bytevector-n! . G4fb5) (get-bytevector-n . G4fb4) (get-bytevector-all . G4fb3) (flush-output-port . G4fb2) (close-port . G4fb1) (scheme-report-environment . G302b) (quotient . G4fb0) (null-environment . G3029) (remainder . G4faf) (modulo . G4fae) (inexact->exact . G4fad) (force . G4fac) (exact->inexact . G4fab) (make-promise . G4faa) (exit . G4fa9) (command-line . G4d2a) (string-fill! . G4fa8) (string-set! . G4fa7) (set-cdr! . G4fa6) (set-car! . G4fa5) (remove . G4fa4) (remv . G4fa3) (remp . G4fa2) (remq . G4fa1) (partition . G4fa0) (memv . G4f9f) (memq . G4f9e) (memp . G4f9d) (member . G4f9c) (exists . G4f9b) (for-all . G4f9a) (fold-right . G4f99) (fold-left . G4f98) (find . G4f97) (filter . G4f96) (cons* . G4f95) (assv . G4f94) (assq . G4f93) (assp . G4f92) (assoc . G4f91) (call-with-string-output-port . G4f90) (call-with-port . G4f8f) (call-with-bytevector-output-port . G4f8e) (bytevector->string . G4f8d) (buffer-mode? . G4f8c) (binary-port? . G4f8b) (with-exception-handler . G4f8a) (raise-continuable . G4f89) (raise . G4f88) (eval . G302f) (environment . G3027) (make-enumeration . G4f87) (enum-set=? . G4f86) (enum-set-universe . G4f85) (enum-set-union . G4f84) (enum-set-subset? . G4f83) (enum-set-projection . G4f82) (enum-set-member? . G4f81) (enum-set-intersection . G4f80) (enum-set-indexer . G4f7f) (enum-set-difference . G4f7e) (enum-set-constructor . G4f7d) (enum-set-complement . G4f7c) (enum-set->list . G4f7b) (who-condition? . G4a7c) (warning? . G49f6) (violation? . G4a35) (undefined-violation? . G4af1) (syntax-violation? . G4ad8) (syntax-violation-subform . G4adc) (syntax-violation-form . G4ada) (syntax-violation . G3051) (simple-conditions . G4f7a) (serious-condition? . G4a0b) (non-continuable-violation? . G4a93) (message-condition? . G49df) (make-who-condition . G4a78) (make-warning . G49f4) (make-violation . G4a33) (make-undefined-violation . G4aef) (make-syntax-violation . G4ad2) (make-serious-condition . G4a09) (make-non-continuable-violation . G4a91) (make-message-condition . G49db) (make-lexical-violation . G4abb) (make-irritants-condition . G4a5e) (make-implementation-restriction-violation . G4aa6) (make-error . G4a1e) (make-assertion-violation . G4a48) (lexical-violation? . G4abd) (irritants-condition? . G4a62) (implementation-restriction-violation? . G4aa8) (error? . G4a20) (condition-who . G4a7e) (condition-predicate . G4f79) (condition-message . G49e1) (condition-irritants . G4a64) (condition-accessor . G4f78) (condition . G4f77) (assertion-violation? . G4a4a) (condition? . G4f76) (utf32->string . G4f75) (utf16->string . G4f74) (utf8->string . G4f73) (uint-list->bytevector . G4f72) (u8-list->bytevector . G4f71) (string->utf8 . G4f70) (string->utf32 . G4f6f) (string->utf16 . G4f6e) (sint-list->bytevector . G4f6d) (native-endianness . G4f6c) (bytevector? . G4f6b) (bytevector=? . G4f6a) (bytevector-uint-set! . G4f69) (bytevector-uint-ref . G4f68) (bytevector-u8-set! . G4f67) (bytevector-u8-ref . G4f66) (bytevector-u64-set! . G4f65) (bytevector-u64-ref . G4f64) (bytevector-u64-native-set! . G4f63) (bytevector-u64-native-ref . G4f62) (bytevector-u32-set! . G4f61) (bytevector-u32-ref . G4f60) (bytevector-u32-native-set! . G4f5f) (bytevector-u32-native-ref . G4f5e) (bytevector-u16-set! . G4f5d) (bytevector-u16-ref . G4f5c) (bytevector-u16-native-set! . G4f5b) (bytevector-u16-native-ref . G4f5a) (bytevector-sint-set! . G4f59) (bytevector-sint-ref . G4f58) (bytevector-s8-set! . G4f57) (bytevector-s8-ref . G4f56) (bytevector-s64-set! . G4f55) (bytevector-s64-ref . G4f54) (bytevector-s64-native-set! . G4f53) (bytevector-s64-native-ref . G4f52) (bytevector-s32-set! . G4f51) (bytevector-s32-ref . G4f50) (bytevector-s32-native-set! . G4f4f) (bytevector-s32-native-ref . G4f4e) (bytevector-s16-set! . G4f4d) (bytevector-s16-ref . G4f4c) (bytevector-s16-native-set! . G4f4b) (bytevector-s16-native-ref . G4f4a) (bytevector-length . G4f49) (bytevector-ieee-single-ref . G4f48) (bytevector-ieee-single-set! . G4f47) (bytevector-ieee-single-native-set! . G4f46) (bytevector-ieee-single-native-ref . G4f45) (bytevector-ieee-double-set! . G4f44) (bytevector-ieee-double-ref . G4f43) (bytevector-ieee-double-native-set! . G4f42) (bytevector-ieee-double-native-ref . G4f41) (bytevector-fill! . G4f40) (bytevector-copy! . G4f3f) (bytevector-copy . G4f3e) (bytevector->uint-list . G4f3d) (bytevector->u8-list . G4f3c) (bytevector->sint-list . G4f3b) (no-nans-violation? . G4c2b) (no-infinities-violation? . G4c16) (make-no-nans-violation . G4c29) (make-no-infinities-violation . G4c14) (real->flonum . G4f3a) (flzero? . G4f39) (fltruncate . G4f38) (fltan . G4f37) (flsqrt . G4f36) (flsin . G4f35) (flround . G4f34) (flpositive? . G4f33) (flonum? . G4f32) (flodd? . G4f31) (flnumerator . G4f30) (flnegative? . G4f2f) (flnan? . G4f2e) (flmod0 . G4f2d) (flmod . G4f2c) (flmin . G4f2b) (flmax . G4f2a) (fllog . G4f29) (flinteger? . G4f28) (flinfinite? . G4f27) (flfloor . G4f26) (flfinite? . G4f25) (flexpt . G4f24) (flexp . G4f23) (fleven? . G4f22) (fldiv0-and-mod0 . G4f21) (fldiv0 . G4f20) (fldiv-and-mod . G4f1f) (fldiv . G4f1e) (fldenominator . G4f1d) (flcos . G4f1c) (flceiling . G4f1b) (flatan . G4f1a) (flasin . G4f19) (flacos . G4f18) (flabs . G4f17) (fl>? . G4f16) (fl>=? . G4f15) (fl=? . G4f14) (fl<? . G4f13) (fl<=? . G4f12) (fl/ . G4f11) (fl- . G4f10) (fl+ . G4f0f) (fl* . G4f0e) (fixnum->flonum . G4f0d) (fxzero? . G4f0c) (fxxor . G4f0b) (fxrotate-bit-field . G4f0a) (fxreverse-bit-field . G4f09) (fxpositive? . G4f08) (fxodd? . G4f07) (fxnot . G4f06) (fxnegative? . G4f05) (fxmod0 . G4f04) (fxmod . G4f03) (fxmin . G4f02) (fxmax . G4f01) (fxlength . G4f00) (fxior . G4eff) (fxif . G4efe) (fxfirst-bit-set . G4efd) (fxeven? . G4efc) (fxdiv0-and-mod0 . G4efb) (fxdiv0 . G4efa) (fxdiv-and-mod . G4ef9) (fxdiv . G4ef8) (fxcopy-bit-field . G4ef7) (fxcopy-bit . G4ef6) (fxbit-set? . G4ef5) (fxbit-field . G4ef4) (fxbit-count . G4ef3) (fxarithmetic-shift-right . G4ef2) (fxarithmetic-shift-left . G4ef1) (fxarithmetic-shift . G4ef0) (fxand . G4eef) (fx>? . G4eee) (fx>=? . G4eed) (fx=? . G4eec) (fx<? . G4eeb) (fx<=? . G4eea) (fx-/carry . G4ee9) (fx- . G4ee8) (fx+/carry . G4ee7) (fx+ . G4ee6) (fx*/carry . G4ee5) (fx* . G4ee4) (greatest-fixnum . G4ee3) (least-fixnum . G4ee2) (fixnum-width . G4ee1) (fixnum? . G4ee0) (bitwise-rotate-bit-field . G4edf) (bitwise-reverse-bit-field . G4ede) (bitwise-length . G4edd) (bitwise-if . G4edc) (bitwise-first-bit-set . G4edb) (bitwise-copy-bit-field . G4eda) (bitwise-copy-bit . G4ed9) (bitwise-bit-set? . G4ed8) (bitwise-bit-field . G4ed7) (bitwise-bit-count . G4ed6) (bitwise-xor . G4ed5) (bitwise-ior . G4ed4) (bitwise-and . G4ed3) (bitwise-not . G4ed2) (bitwise-arithmetic-shift-right . G4ed1) (bitwise-arithmetic-shift-left . G4ed0) (bitwise-arithmetic-shift . G4ecf) (zero? . G4ece) (vector? . G4ecd) (vector-set! . G4ecc) (vector-ref . G4ecb) (vector-map . G4eca) (vector-length . G4ec9) (vector-for-each . G4ec8) (vector-fill! . G4ec7) (vector->list . G4ec6) (vector . G4ec5) (values . G4ec4) (truncate . G4ec3) (tan . G4ec2) (symbol? . G4ec1) (symbol=? . G4ec0) (symbol->string . G4ebf) (substring . G4ebe) (string? . G4ebd) (string>? . G4ebc) (string>=? . G4ebb) (string=? . G4eba) (string<? . G4eb9) (string<=? . G4eb8) (string-ref . G4eb7) (string-length . G4eb6) (string-for-each . G4eb5) (string-copy . G4eb4) (string-append . G4eb3) (string->symbol . G4eb2) (string->number . G4eb1) (string->list . G4eb0) (string . G4eaf) (sqrt . G4eae) (sin . G4ead) (round . G4eac) (reverse . G4eab) (real? . G4eaa) (real-valued? . G4ea9) (real-part . G4ea8) (rationalize . G4ea7) (rational? . G4ea6) (rational-valued? . G4ea5) (procedure? . G4ea4) (positive? . G4ea3) (pair? . G4ea2) (odd? . G4ea1) (numerator . G4ea0) (number? . G4e9f) (number->string . G4e9e) (null? . G4e9d) (not . G4e9c) (negative? . G4e9b) (nan? . G4e9a) (min . G4e99) (max . G4e98) (map . G4e97) (make-vector . G4e96) (make-string . G4e95) (make-rectangular . G4e94) (make-polar . G4e93) (magnitude . G4e92) (log . G4e91) (list? . G4e90) (list-tail . G4e8f) (list-ref . G4e8e) (list->vector . G4e8d) (list->string . G4e8c) (list . G4e8b) (length . G4e8a) (lcm . G4e89) (integer? . G4e88) (integer-valued? . G4e87) (integer->char . G4e86) (infinite? . G4e85) (inexact? . G4e84) (inexact . G4e83) (imag-part . G4e82) (gcd . G4e81) (for-each . G4e80) (floor . G4e7f) (finite? . G4e7e) (expt . G4e7d) (exp . G4e7c) (exact? . G4e7b) (exact-integer-sqrt . G4e7a) (exact . G4e79) (even? . G4e78) (error . G4e77) (eqv? . G4e76) (equal? . G4e75) (eq? . G4e74) (dynamic-wind . G4e73) (div0-and-mod0 . G4e72) (mod0 . G4e71) (div0 . G4e70) (div-and-mod . G4e6f) (mod . G4e6e) (div . G4e6d) (denominator . G4e6c) (cos . G4e6b) (cons . G4e6a) (complex? . G4e69) (char? . G4e68) (char>? . G4e67) (char>=? . G4e66) (char=? . G4e65) (char<? . G4e64) (char<=? . G4e63) (char->integer . G4e62) (ceiling . G4e61) (call-with-values . G4e60) (call/cc . G4e5f) (call-with-current-continuation . G4e5e) (cddddr . G4e5d) (cdddar . G4e5c) (cddadr . G4e5b) (cddaar . G4e5a) (cdaddr . G4e59) (cdadar . G4e58) (cdaadr . G4e57) (cdaaar . G4e56) (cadddr . G4e55) (caddar . G4e54) (cadadr . G4e53) (cadaar . G4e52) (caaddr . G4e51) (caadar . G4e50) (caaadr . G4e4f) (caaaar . G4e4e) (cdddr . G4e4d) (cddar . G4e4c) (cdadr . G4e4b) (cdaar . G4e4a) (caddr . G4e49) (cadar . G4e48) (caadr . G4e47) (caaar . G4e46) (cddr . G4e45) (cdar . G4e44) (cadr . G4e43) (caar . G4e42) (cdr . G4e41) (car . G4e40) (boolean? . G4e3f) (boolean=? . G4e3e) (atan . G4e3d) (assertion-violation . G4e3c) (asin . G4e3b) (apply . G4e3a) (append . G4e39) (angle . G4e38) (acos . G4e37) (abs . G4e36) (/ . G4e35) (* . G4e34) (- . G4e33) (+ . G4e32) (>= . G4e31) (> . G4e30) (= . G4e2f) (<= . G4e2e) (< . G4e2d) (library . G4e2c) (export . G4e2b) (&no-nans . G4e2a) (&no-infinities . G4e29) (&i/o-encoding . G4e28) (&i/o-decoding . G4e27) (&i/o-port . G4e26) (&i/o-file-does-not-exist . G4e25) (&i/o-file-already-exists . G4e24) (&i/o-file-is-read-only . G4e23) (&i/o-file-protection . G4e22) (&i/o-filename . G4e21) (&i/o-invalid-position . G4e20) (&i/o-write . G4e1f) (&i/o-read . G4e1e) (&i/o . G4e1d) (&undefined . G4e1c) (&syntax . G4e1b) (&lexical . G4e1a) (&implementation-restriction . G4e19) (&non-continuable . G4e18) (&who . G4e17) (&irritants . G4e16) (&assertion . G4e15) (&violation . G4e14) (&error . G4e13) (&serious . G4e12) (&warning . G4e11) (&message . G4e10) (&condition . G4e0f) (define-condition-type . G4e0e) (define-enumeration . G4e0d) (define-record-type . G4e0c) (parent-rtd . G4e0b) (nongenerative . G4e0a) (opaque . G4e09) (sealed . G4e08) (protocol . G4e07) (parent . G4e06) (immutable . G4e05) (mutable . G4e04) (fields . G4e03) (error-handling-mode . G4e02) (file-options . G4e01) (buffer-mode . G4e00) (eol-style . G4dff) (guard . G4dfe) (trace-define . G4dfd) (trace-lambda . G4dfc) (unsyntax-splicing . G4dfb) (unsyntax . G4dfa) (unquote-splicing . G4df9) (unquote . G4df8) (_ . G4df7) (else . G4df6) (=> . G4df5) (... . G4df4) (assert . G4df3) (endianness . G4df2) (delay . G4df1) (time . G4df0) (do . G4def) (cond . G4dee) (let* . G4ded) (let . G4dec) (let*-values . G4deb) (let-values . G4dea) (identifier-syntax . G4de9) (with-syntax . G4de8) (quasisyntax . G4de7) (quasiquote . G4de6) (syntax-rules . G4de5) (include . G4de4) (define-struct . G4de3) (record-constructor-descriptor . G4de2) (record-type-descriptor . G4de1) (case . G4de0) (parameterize . G4ddf) (unless . G4dde) (when . G4ddd) (or . G4ddc) (and . G4ddb) (if . G4dda) (letrec* . G4dd9) (letrec . G4dd8) (type-descriptor . G4dd7) (case-lambda . G4dd6) (lambda . G4dd5) (syntax . G4dd4) (syntax-case . G4dd3) (quote . G4dd2) (foreign-call . G4dd1) (letrec-syntax . G4dd0) (let-syntax . G4dcf) (set! . G4dce) (import . G4dcd) (begin . G4dcc) (module . G4dcb) (define-syntax . G4dca) (define . G4dc9)) '((G4c2f core-prim . &no-nans-rcd) (G4c2d core-prim . &no-nans-rtd) (G4c1a core-prim . &no-infinities-rcd) (G4c18 core-prim . &no-infinities-rtd) (G4c05 core-prim . &i/o-encoding-rcd) (G4c03 core-prim . &i/o-encoding-rtd) (G4beb core-prim . &i/o-decoding-rcd) (G4be9 core-prim . &i/o-decoding-rtd) (G4bd6 core-prim . &i/o-port-rcd) (G4bd4 core-prim . &i/o-port-rtd) (G4bbc core-prim . &i/o-file-does-not-exist-rcd) (G4bba core-prim . &i/o-file-does-not-exist-rtd) (G4ba7 core-prim . &i/o-file-already-exists-rcd) (G4ba5 core-prim . &i/o-file-already-exists-rtd) (G4b92 core-prim . &i/o-file-is-read-only-rcd) (G4b90 core-prim . &i/o-file-is-read-only-rtd) (G4b7d core-prim . &i/o-file-protection-rcd) (G4b7b core-prim . &i/o-file-protection-rtd) (G4b68 core-prim . &i/o-filename-rcd) (G4b66 core-prim . &i/o-filename-rtd) (G4b4e core-prim . &i/o-invalid-position-rcd) (G4b4c core-prim . &i/o-invalid-position-rtd) (G4b34 core-prim . &i/o-write-rcd) (G4b32 core-prim . &i/o-write-rtd) (G4b1f core-prim . &i/o-read-rcd) (G4b1d core-prim . &i/o-read-rtd) (G4b0a core-prim . &i/o-rcd) (G4b08 core-prim . &i/o-rtd) (G4af5 core-prim . &undefined-rcd) (G4af3 core-prim . &undefined-rtd) (G4ae0 core-prim . &syntax-rcd) (G4ade core-prim . &syntax-rtd) (G4ac1 core-prim . &lexical-rcd) (G4abf core-prim . &lexical-rtd) (G4aac core-prim . &implementation-restriction-rcd) (G4aaa core-prim . &implementation-restriction-rtd) (G4a97 core-prim . &non-continuable-rcd) (G4a95 core-prim . &non-continuable-rtd) (G4a82 core-prim . &who-rcd) (G4a80 core-prim . &who-rtd) (G4a68 core-prim . &irritants-rcd) (G4a66 core-prim . &irritants-rtd) (G4a4e core-prim . &assertion-rcd) (G4a4c core-prim . &assertion-rtd) (G4a39 core-prim . &violation-rcd) (G4a37 core-prim . &violation-rtd) (G4a24 core-prim . &error-rcd) (G4a22 core-prim . &error-rtd) (G4a0f core-prim . &serious-rcd) (G4a0d core-prim . &serious-rtd) (G49fa core-prim . &warning-rcd) (G49f8 core-prim . &warning-rtd) (G49e5 core-prim . &message-rcd) (G49e3 core-prim . &message-rtd) (G4988 core-prim . &condition-rcd) (G4986 core-prim . &condition-rtd) (G304b core-prim . syntax-error) (G2f64 core-prim . syntax-dispatch) (G5094 core-prim . pretty-print) (G5093 core-prim . eval-core) (G5092 core-prim . set-symbol-value!) (G5091 core-prim . symbol-value) (G5090 core-prim . gensym) (G508f core-prim . void) (G4d30 core-prim . load) (G305d core-prim . interaction-environment) (G508e core-prim . char-ready?) (G508d core-prim . regexp?) (G508c core-prim . read-line) (G508b core-prim . dotted-list?) (G508a core-prim . circular-list?) (G5089 core-prim . proper-list?) (G5088 core-prim . circular-list) (G5087 core-prim . last) (G5086 core-prim . last-pair) (G5085 core-prim . not-pair?) (G5084 core-prim . split-at!) (G5083 core-prim . split-at) (G5082 core-prim . list=) (G5081 core-prim . list-copy) (G5080 core-prim . list-tabulate) (G507f core-prim . make-list) (G507e core-prim . xcons) (G507d core-prim . tenth) (G507c core-prim . ninth) (G507b core-prim . eighth) (G507a core-prim . seventh) (G5079 core-prim . sixth) (G5078 core-prim . fifth) (G5077 core-prim . drop-right!) (G5076 core-prim . drop-right) (G5075 core-prim . take-right) (G5074 core-prim . take!) (G5073 core-prim . drop) (G5072 core-prim . take) (G5071 core-prim . car+cdr) (G5070 core-prim . third) (G506f core-prim . second) (G506e core-prim . first) (G506d core-prim . iota) (G506c core-prim . every) (G506b core-prim . assoc-ref) (G506a core-prim . alist-cons) (G5069 core-prim . append-map) (G5068 core-prim . print) (G5067 core-prim . format) (G5066 core-prim . standard-library-path) (G5065 core-prim . file-newer?) (G5064 core-prim . stat-mtime) (G5063 core-prim . current-directory) (G5062 core-prim . write-to-file) (G5061 core-prim . file->list) (G5060 core-prim . file->string) (G505f core-prim . digit->integer) (G505e core-prim . call-with-string-input-port) (G505d core-prim . call-with-string-io) (G505c core-prim . string-split) (G505b core-prim . bytevector-for-each) (G505a core-prim . string->regexp) (G5059 core-prim . rxmatch) (G5058 core-prim . regexp-replace-all) (G5057 core-prim . hashtable-for-each) (G5056 core-prim . readdir) (G5055 core-prim . get-environment-variables) (G5054 core-prim . get-environment-variable) (G5053 core-prim . get-timeofday) (G5052 core-prim . get-command-line) (G5051 core-prim . sys-display) (G5050 core-prim . source-info) (G504f core-prim . make-compiler-instruction) (G504e core-prim . make-instruction) (G504d core-prim . set-source-info!) (G504c core-prim . bignum?) (G504b core-prim . make-complex) (G504a core-prim . fasl-read) (G5049 core-prim . fasl-write) (G5048 core-prim . receive) (G283a core-prim . make-parameter) (G5047 core-prim . string-upcase) (G5046 core-prim . string-titlecase) (G5045 core-prim . string-normalize-nfkd) (G5044 core-prim . string-normalize-nfkc) (G5043 core-prim . string-normalize-nfd) (G5042 core-prim . string-normalize-nfc) (G5041 core-prim . string-foldcase) (G5040 core-prim . string-downcase) (G503f core-prim . string-ci>?) (G503e core-prim . string-ci>=?) (G503d core-prim . string-ci=?) (G503c core-prim . string-ci<?) (G503b core-prim . string-ci<=?) (G503a core-prim . char-whitespace?) (G5039 core-prim . char-upper-case?) (G5038 core-prim . char-title-case?) (G5037 core-prim . char-numeric?) (G5036 core-prim . char-lower-case?) (G5035 core-prim . char-general-category) (G5034 core-prim . char-upcase) (G5033 core-prim . char-titlecase) (G5032 core-prim . char-foldcase) (G5031 core-prim . char-downcase) (G5030 core-prim . char-ci>?) (G502f core-prim . char-ci>=?) (G502e core-prim . char-ci=?) (G502d core-prim . char-ci<?) (G502c core-prim . char-ci<=?) (G502b core-prim . char-alphabetic?) (G2d9f core-prim . make-variable-transformer) (G3053 core-prim . identifier?) (G303d core-prim . generate-temporaries) (G303f core-prim . free-identifier=?) (G3057 core-prim . syntax->datum) (G3055 core-prim . datum->syntax) (G3041 core-prim . bound-identifier=?) (G502a core-prim . record-type-descriptor?) (G5029 core-prim . record-predicate) (G5028 core-prim . record-mutator) (G5027 core-prim . record-constructor) (G5026 core-prim . record-accessor) (G5025 core-prim . make-record-type-descriptor) (G5024 core-prim . make-record-constructor-descriptor) (G5023 core-prim . record?) (G5022 core-prim . record-type-uid) (G5021 core-prim . record-type-sealed?) (G5020 core-prim . record-type-parent) (G501f core-prim . record-type-opaque?) (G501e core-prim . record-type-name) (G501d core-prim . record-type-generative?) (G501c core-prim . record-type-field-names) (G501b core-prim . record-rtd) (G501a core-prim . record-field-mutable?) (G5019 core-prim . delete-file) (G5018 core-prim . file-exists?) (G5017 core-prim . vector-sort!) (G5016 core-prim . vector-sort) (G5015 core-prim . list-sort) (G5014 core-prim . symbol-hash) (G5013 core-prim . string-ci-hash) (G5012 core-prim . string-hash) (G5011 core-prim . equal-hash) (G5010 core-prim . hashtable-equivalence-function) (G500f core-prim . make-hashtable) (G500e core-prim . hashtable-hash-function) (G500d core-prim . make-eqv-hashtable) (G500c core-prim . make-eq-hashtable) (G500b core-prim . hashtable?) (G500a core-prim . hashtable-update!) (G5009 core-prim . hashtable-size) (G5008 core-prim . hashtable-set!) (G5007 core-prim . hashtable-ref) (G5006 core-prim . hashtable-mutable?) (G5005 core-prim . hashtable-keys) (G5004 core-prim . hashtable-entries) (G5003 core-prim . hashtable-delete!) (G5002 core-prim . hashtable-copy) (G5001 core-prim . hashtable-contains?) (G5000 core-prim . hashtable-clear!) (G4fff core-prim . call-with-output-file) (G4ffe core-prim . call-with-input-file) (G4ffd core-prim . write-char) (G4ffc core-prim . write) (G4ffb core-prim . with-output-to-file) (G4ffa core-prim . with-input-from-file) (G4ff9 core-prim . read-char) (G4ff8 core-prim . read) (G4ff7 core-prim . peek-char) (G4ff6 core-prim . open-output-file) (G4ff5 core-prim . open-input-file) (G4ff4 core-prim . newline) (G4ff3 core-prim . display) (G4ff2 core-prim . close-output-port) (G4ff1 core-prim . close-input-port) (G4ff0 core-prim . eof-object?) (G4fef core-prim . eof-object) (G4fee core-prim . current-error-port) (G4fed core-prim . current-output-port) (G4fec core-prim . current-input-port) (G4feb core-prim . output-port?) (G4fea core-prim . input-port?) (G4fe9 core-prim . utf-8-codec) (G4fe8 core-prim . utf-16-codec) (G4fe7 core-prim . transcoder-error-handling-mode) (G4fe6 core-prim . transcoder-eol-style) (G4fe5 core-prim . transcoder-codec) (G4fe4 core-prim . transcoded-port) (G4fe3 core-prim . textual-port?) (G4fe2 core-prim . string->bytevector) (G4fe1 core-prim . standard-output-port) (G4fe0 core-prim . standard-input-port) (G4fdf core-prim . standard-error-port) (G4fde core-prim . set-port-position!) (G4fdd core-prim . put-u8) (G4fdc core-prim . put-string) (G4fdb core-prim . put-datum) (G4fda core-prim . put-char) (G4fd9 core-prim . put-bytevector) (G4fd8 core-prim . port?) (G4fd7 core-prim . port-transcoder) (G4fd6 core-prim . port-position) (G4fd5 core-prim . port-has-set-port-position!?) (G4fd4 core-prim . port-has-port-position?) (G4fd3 core-prim . port-eof?) (G4fd2 core-prim . output-port-buffer-mode) (G4fd1 core-prim . open-string-output-port) (G4fd0 core-prim . open-string-input-port) (G4fcf core-prim . open-file-output-port) (G4fce core-prim . open-file-input/output-port) (G4fcd core-prim . open-file-input-port) (G4fcc core-prim . open-bytevector-output-port) (G4fcb core-prim . open-bytevector-input-port) (G4fca core-prim . native-transcoder) (G4fc9 core-prim . native-eol-style) (G4fc8 core-prim . make-transcoder) (G4fc7 core-prim . latin-1-codec) (G4b2e core-prim . make-i/o-write-error) (G4b19 core-prim . make-i/o-read-error) (G4bcc core-prim . make-i/o-port-error) (G4b44 core-prim . make-i/o-invalid-position-error) (G4b5e core-prim . make-i/o-filename-error) (G4b77 core-prim . make-i/o-file-protection-error) (G4b8c core-prim . make-i/o-file-is-read-only-error) (G4bb6 core-prim . make-i/o-file-does-not-exist-error) (G4ba1 core-prim . make-i/o-file-already-exists-error) (G4b04 core-prim . make-i/o-error) (G4bfb core-prim . make-i/o-encoding-error) (G4be5 core-prim . make-i/o-decoding-error) (G4fc6 core-prim . make-custom-textual-output-port) (G4fc5 core-prim . make-custom-textual-input/output-port) (G4fc4 core-prim . make-custom-textual-input-port) (G4fc3 core-prim . make-custom-binary-output-port) (G4fc2 core-prim . make-custom-binary-input/output-port) (G4fc1 core-prim . make-custom-binary-input-port) (G4fc0 core-prim . make-bytevector) (G4fbf core-prim . lookahead-u8) (G4fbe core-prim . lookahead-char) (G4b30 core-prim . i/o-write-error?) (G4b1b core-prim . i/o-read-error?) (G4bd0 core-prim . i/o-port-error?) (G4b48 core-prim . i/o-invalid-position-error?) (G4b62 core-prim . i/o-filename-error?) (G4b79 core-prim . i/o-file-protection-error?) (G4b8e core-prim . i/o-file-is-read-only-error?) (G4bb8 core-prim . i/o-file-does-not-exist-error?) (G4ba3 core-prim . i/o-file-already-exists-error?) (G4b06 core-prim . i/o-error?) (G4bd2 core-prim . i/o-error-port) (G4b64 core-prim . i/o-error-filename) (G4bff core-prim . i/o-encoding-error?) (G4c01 core-prim . i/o-encoding-error-char) (G4be7 core-prim . i/o-decoding-error?) (G4fbd core-prim . get-u8) (G4fbc core-prim . get-string-n!) (G4fbb core-prim . get-string-n) (G4fba core-prim . get-string-all) (G4fb9 core-prim . get-line) (G4fb8 core-prim . get-datum) (G4fb7 core-prim . get-char) (G4fb6 core-prim . get-bytevector-some) (G4fb5 core-prim . get-bytevector-n!) (G4fb4 core-prim . get-bytevector-n) (G4fb3 core-prim . get-bytevector-all) (G4fb2 core-prim . flush-output-port) (G4fb1 core-prim . close-port) (G302b core-prim . scheme-report-environment) (G4fb0 core-prim . quotient) (G3029 core-prim . null-environment) (G4faf core-prim . remainder) (G4fae core-prim . modulo) (G4fad core-prim . inexact->exact) (G4fac core-prim . force) (G4fab core-prim . exact->inexact) (G4faa core-prim . make-promise) (G4fa9 core-prim . exit) (G4d2a core-prim . command-line) (G4fa8 core-prim . string-fill!) (G4fa7 core-prim . string-set!) (G4fa6 core-prim . set-cdr!) (G4fa5 core-prim . set-car!) (G4fa4 core-prim . remove) (G4fa3 core-prim . remv) (G4fa2 core-prim . remp) (G4fa1 core-prim . remq) (G4fa0 core-prim . partition) (G4f9f core-prim . memv) (G4f9e core-prim . memq) (G4f9d core-prim . memp) (G4f9c core-prim . member) (G4f9b core-prim . exists) (G4f9a core-prim . for-all) (G4f99 core-prim . fold-right) (G4f98 core-prim . fold-left) (G4f97 core-prim . find) (G4f96 core-prim . filter) (G4f95 core-prim . cons*) (G4f94 core-prim . assv) (G4f93 core-prim . assq) (G4f92 core-prim . assp) (G4f91 core-prim . assoc) (G4f90 core-prim . call-with-string-output-port) (G4f8f core-prim . call-with-port) (G4f8e core-prim . call-with-bytevector-output-port) (G4f8d core-prim . bytevector->string) (G4f8c core-prim . buffer-mode?) (G4f8b core-prim . binary-port?) (G4f8a core-prim . with-exception-handler) (G4f89 core-prim . raise-continuable) (G4f88 core-prim . raise) (G302f core-prim . eval) (G3027 core-prim . environment) (G4f87 core-prim . make-enumeration) (G4f86 core-prim . enum-set=?) (G4f85 core-prim . enum-set-universe) (G4f84 core-prim . enum-set-union) (G4f83 core-prim . enum-set-subset?) (G4f82 core-prim . enum-set-projection) (G4f81 core-prim . enum-set-member?) (G4f80 core-prim . enum-set-intersection) (G4f7f core-prim . enum-set-indexer) (G4f7e core-prim . enum-set-difference) (G4f7d core-prim . enum-set-constructor) (G4f7c core-prim . enum-set-complement) (G4f7b core-prim . enum-set->list) (G4a7c core-prim . who-condition?) (G49f6 core-prim . warning?) (G4a35 core-prim . violation?) (G4af1 core-prim . undefined-violation?) (G4ad8 core-prim . syntax-violation?) (G4adc core-prim . syntax-violation-subform) (G4ada core-prim . syntax-violation-form) (G3051 core-prim . syntax-violation) (G4f7a core-prim . simple-conditions) (G4a0b core-prim . serious-condition?) (G4a93 core-prim . non-continuable-violation?) (G49df core-prim . message-condition?) (G4a78 core-prim . make-who-condition) (G49f4 core-prim . make-warning) (G4a33 core-prim . make-violation) (G4aef core-prim . make-undefined-violation) (G4ad2 core-prim . make-syntax-violation) (G4a09 core-prim . make-serious-condition) (G4a91 core-prim . make-non-continuable-violation) (G49db core-prim . make-message-condition) (G4abb core-prim . make-lexical-violation) (G4a5e core-prim . make-irritants-condition) (G4aa6 core-prim . make-implementation-restriction-violation) (G4a1e core-prim . make-error) (G4a48 core-prim . make-assertion-violation) (G4abd core-prim . lexical-violation?) (G4a62 core-prim . irritants-condition?) (G4aa8 core-prim . implementation-restriction-violation?) (G4a20 core-prim . error?) (G4a7e core-prim . condition-who) (G4f79 core-prim . condition-predicate) (G49e1 core-prim . condition-message) (G4a64 core-prim . condition-irritants) (G4f78 core-prim . condition-accessor) (G4f77 core-prim . condition) (G4a4a core-prim . assertion-violation?) (G4f76 core-prim . condition?) (G4f75 core-prim . utf32->string) (G4f74 core-prim . utf16->string) (G4f73 core-prim . utf8->string) (G4f72 core-prim . uint-list->bytevector) (G4f71 core-prim . u8-list->bytevector) (G4f70 core-prim . string->utf8) (G4f6f core-prim . string->utf32) (G4f6e core-prim . string->utf16) (G4f6d core-prim . sint-list->bytevector) (G4f6c core-prim . native-endianness) (G4f6b core-prim . bytevector?) (G4f6a core-prim . bytevector=?) (G4f69 core-prim . bytevector-uint-set!) (G4f68 core-prim . bytevector-uint-ref) (G4f67 core-prim . bytevector-u8-set!) (G4f66 core-prim . bytevector-u8-ref) (G4f65 core-prim . bytevector-u64-set!) (G4f64 core-prim . bytevector-u64-ref) (G4f63 core-prim . bytevector-u64-native-set!) (G4f62 core-prim . bytevector-u64-native-ref) (G4f61 core-prim . bytevector-u32-set!) (G4f60 core-prim . bytevector-u32-ref) (G4f5f core-prim . bytevector-u32-native-set!) (G4f5e core-prim . bytevector-u32-native-ref) (G4f5d core-prim . bytevector-u16-set!) (G4f5c core-prim . bytevector-u16-ref) (G4f5b core-prim . bytevector-u16-native-set!) (G4f5a core-prim . bytevector-u16-native-ref) (G4f59 core-prim . bytevector-sint-set!) (G4f58 core-prim . bytevector-sint-ref) (G4f57 core-prim . bytevector-s8-set!) (G4f56 core-prim . bytevector-s8-ref) (G4f55 core-prim . bytevector-s64-set!) (G4f54 core-prim . bytevector-s64-ref) (G4f53 core-prim . bytevector-s64-native-set!) (G4f52 core-prim . bytevector-s64-native-ref) (G4f51 core-prim . bytevector-s32-set!) (G4f50 core-prim . bytevector-s32-ref) (G4f4f core-prim . bytevector-s32-native-set!) (G4f4e core-prim . bytevector-s32-native-ref) (G4f4d core-prim . bytevector-s16-set!) (G4f4c core-prim . bytevector-s16-ref) (G4f4b core-prim . bytevector-s16-native-set!) (G4f4a core-prim . bytevector-s16-native-ref) (G4f49 core-prim . bytevector-length) (G4f48 core-prim . bytevector-ieee-single-ref) (G4f47 core-prim . bytevector-ieee-single-set!) (G4f46 core-prim . bytevector-ieee-single-native-set!) (G4f45 core-prim . bytevector-ieee-single-native-ref) (G4f44 core-prim . bytevector-ieee-double-set!) (G4f43 core-prim . bytevector-ieee-double-ref) (G4f42 core-prim . bytevector-ieee-double-native-set!) (G4f41 core-prim . bytevector-ieee-double-native-ref) (G4f40 core-prim . bytevector-fill!) (G4f3f core-prim . bytevector-copy!) (G4f3e core-prim . bytevector-copy) (G4f3d core-prim . bytevector->uint-list) (G4f3c core-prim . bytevector->u8-list) (G4f3b core-prim . bytevector->sint-list) (G4c2b core-prim . no-nans-violation?) (G4c16 core-prim . no-infinities-violation?) (G4c29 core-prim . make-no-nans-violation) (G4c14 core-prim . make-no-infinities-violation) (G4f3a core-prim . real->flonum) (G4f39 core-prim . flzero?) (G4f38 core-prim . fltruncate) (G4f37 core-prim . fltan) (G4f36 core-prim . flsqrt) (G4f35 core-prim . flsin) (G4f34 core-prim . flround) (G4f33 core-prim . flpositive?) (G4f32 core-prim . flonum?) (G4f31 core-prim . flodd?) (G4f30 core-prim . flnumerator) (G4f2f core-prim . flnegative?) (G4f2e core-prim . flnan?) (G4f2d core-prim . flmod0) (G4f2c core-prim . flmod) (G4f2b core-prim . flmin) (G4f2a core-prim . flmax) (G4f29 core-prim . fllog) (G4f28 core-prim . flinteger?) (G4f27 core-prim . flinfinite?) (G4f26 core-prim . flfloor) (G4f25 core-prim . flfinite?) (G4f24 core-prim . flexpt) (G4f23 core-prim . flexp) (G4f22 core-prim . fleven?) (G4f21 core-prim . fldiv0-and-mod0) (G4f20 core-prim . fldiv0) (G4f1f core-prim . fldiv-and-mod) (G4f1e core-prim . fldiv) (G4f1d core-prim . fldenominator) (G4f1c core-prim . flcos) (G4f1b core-prim . flceiling) (G4f1a core-prim . flatan) (G4f19 core-prim . flasin) (G4f18 core-prim . flacos) (G4f17 core-prim . flabs) (G4f16 core-prim . fl>?) (G4f15 core-prim . fl>=?) (G4f14 core-prim . fl=?) (G4f13 core-prim . fl<?) (G4f12 core-prim . fl<=?) (G4f11 core-prim . fl/) (G4f10 core-prim . fl-) (G4f0f core-prim . fl+) (G4f0e core-prim . fl*) (G4f0d core-prim . fixnum->flonum) (G4f0c core-prim . fxzero?) (G4f0b core-prim . fxxor) (G4f0a core-prim . fxrotate-bit-field) (G4f09 core-prim . fxreverse-bit-field) (G4f08 core-prim . fxpositive?) (G4f07 core-prim . fxodd?) (G4f06 core-prim . fxnot) (G4f05 core-prim . fxnegative?) (G4f04 core-prim . fxmod0) (G4f03 core-prim . fxmod) (G4f02 core-prim . fxmin) (G4f01 core-prim . fxmax) (G4f00 core-prim . fxlength) (G4eff core-prim . fxior) (G4efe core-prim . fxif) (G4efd core-prim . fxfirst-bit-set) (G4efc core-prim . fxeven?) (G4efb core-prim . fxdiv0-and-mod0) (G4efa core-prim . fxdiv0) (G4ef9 core-prim . fxdiv-and-mod) (G4ef8 core-prim . fxdiv) (G4ef7 core-prim . fxcopy-bit-field) (G4ef6 core-prim . fxcopy-bit) (G4ef5 core-prim . fxbit-set?) (G4ef4 core-prim . fxbit-field) (G4ef3 core-prim . fxbit-count) (G4ef2 core-prim . fxarithmetic-shift-right) (G4ef1 core-prim . fxarithmetic-shift-left) (G4ef0 core-prim . fxarithmetic-shift) (G4eef core-prim . fxand) (G4eee core-prim . fx>?) (G4eed core-prim . fx>=?) (G4eec core-prim . fx=?) (G4eeb core-prim . fx<?) (G4eea core-prim . fx<=?) (G4ee9 core-prim . fx-/carry) (G4ee8 core-prim . fx-) (G4ee7 core-prim . fx+/carry) (G4ee6 core-prim . fx+) (G4ee5 core-prim . fx*/carry) (G4ee4 core-prim . fx*) (G4ee3 core-prim . greatest-fixnum) (G4ee2 core-prim . least-fixnum) (G4ee1 core-prim . fixnum-width) (G4ee0 core-prim . fixnum?) (G4edf core-prim . bitwise-rotate-bit-field) (G4ede core-prim . bitwise-reverse-bit-field) (G4edd core-prim . bitwise-length) (G4edc core-prim . bitwise-if) (G4edb core-prim . bitwise-first-bit-set) (G4eda core-prim . bitwise-copy-bit-field) (G4ed9 core-prim . bitwise-copy-bit) (G4ed8 core-prim . bitwise-bit-set?) (G4ed7 core-prim . bitwise-bit-field) (G4ed6 core-prim . bitwise-bit-count) (G4ed5 core-prim . bitwise-xor) (G4ed4 core-prim . bitwise-ior) (G4ed3 core-prim . bitwise-and) (G4ed2 core-prim . bitwise-not) (G4ed1 core-prim . bitwise-arithmetic-shift-right) (G4ed0 core-prim . bitwise-arithmetic-shift-left) (G4ecf core-prim . bitwise-arithmetic-shift) (G4ece core-prim . zero?) (G4ecd core-prim . vector?) (G4ecc core-prim . vector-set!) (G4ecb core-prim . vector-ref) (G4eca core-prim . vector-map) (G4ec9 core-prim . vector-length) (G4ec8 core-prim . vector-for-each) (G4ec7 core-prim . vector-fill!) (G4ec6 core-prim . vector->list) (G4ec5 core-prim . vector) (G4ec4 core-prim . values) (G4ec3 core-prim . truncate) (G4ec2 core-prim . tan) (G4ec1 core-prim . symbol?) (G4ec0 core-prim . symbol=?) (G4ebf core-prim . symbol->string) (G4ebe core-prim . substring) (G4ebd core-prim . string?) (G4ebc core-prim . string>?) (G4ebb core-prim . string>=?) (G4eba core-prim . string=?) (G4eb9 core-prim . string<?) (G4eb8 core-prim . string<=?) (G4eb7 core-prim . string-ref) (G4eb6 core-prim . string-length) (G4eb5 core-prim . string-for-each) (G4eb4 core-prim . string-copy) (G4eb3 core-prim . string-append) (G4eb2 core-prim . string->symbol) (G4eb1 core-prim . string->number) (G4eb0 core-prim . string->list) (G4eaf core-prim . string) (G4eae core-prim . sqrt) (G4ead core-prim . sin) (G4eac core-prim . round) (G4eab core-prim . reverse) (G4eaa core-prim . real?) (G4ea9 core-prim . real-valued?) (G4ea8 core-prim . real-part) (G4ea7 core-prim . rationalize) (G4ea6 core-prim . rational?) (G4ea5 core-prim . rational-valued?) (G4ea4 core-prim . procedure?) (G4ea3 core-prim . positive?) (G4ea2 core-prim . pair?) (G4ea1 core-prim . odd?) (G4ea0 core-prim . numerator) (G4e9f core-prim . number?) (G4e9e core-prim . number->string) (G4e9d core-prim . null?) (G4e9c core-prim . not) (G4e9b core-prim . negative?) (G4e9a core-prim . nan?) (G4e99 core-prim . min) (G4e98 core-prim . max) (G4e97 core-prim . map) (G4e96 core-prim . make-vector) (G4e95 core-prim . make-string) (G4e94 core-prim . make-rectangular) (G4e93 core-prim . make-polar) (G4e92 core-prim . magnitude) (G4e91 core-prim . log) (G4e90 core-prim . list?) (G4e8f core-prim . list-tail) (G4e8e core-prim . list-ref) (G4e8d core-prim . list->vector) (G4e8c core-prim . list->string) (G4e8b core-prim . list) (G4e8a core-prim . length) (G4e89 core-prim . lcm) (G4e88 core-prim . integer?) (G4e87 core-prim . integer-valued?) (G4e86 core-prim . integer->char) (G4e85 core-prim . infinite?) (G4e84 core-prim . inexact?) (G4e83 core-prim . inexact) (G4e82 core-prim . imag-part) (G4e81 core-prim . gcd) (G4e80 core-prim . for-each) (G4e7f core-prim . floor) (G4e7e core-prim . finite?) (G4e7d core-prim . expt) (G4e7c core-prim . exp) (G4e7b core-prim . exact?) (G4e7a core-prim . exact-integer-sqrt) (G4e79 core-prim . exact) (G4e78 core-prim . even?) (G4e77 core-prim . error) (G4e76 core-prim . eqv?) (G4e75 core-prim . equal?) (G4e74 core-prim . eq?) (G4e73 core-prim . dynamic-wind) (G4e72 core-prim . div0-and-mod0) (G4e71 core-prim . mod0) (G4e70 core-prim . div0) (G4e6f core-prim . div-and-mod) (G4e6e core-prim . mod) (G4e6d core-prim . div) (G4e6c core-prim . denominator) (G4e6b core-prim . cos) (G4e6a core-prim . cons) (G4e69 core-prim . complex?) (G4e68 core-prim . char?) (G4e67 core-prim . char>?) (G4e66 core-prim . char>=?) (G4e65 core-prim . char=?) (G4e64 core-prim . char<?) (G4e63 core-prim . char<=?) (G4e62 core-prim . char->integer) (G4e61 core-prim . ceiling) (G4e60 core-prim . call-with-values) (G4e5f core-prim . call/cc) (G4e5e core-prim . call-with-current-continuation) (G4e5d core-prim . cddddr) (G4e5c core-prim . cdddar) (G4e5b core-prim . cddadr) (G4e5a core-prim . cddaar) (G4e59 core-prim . cdaddr) (G4e58 core-prim . cdadar) (G4e57 core-prim . cdaadr) (G4e56 core-prim . cdaaar) (G4e55 core-prim . cadddr) (G4e54 core-prim . caddar) (G4e53 core-prim . cadadr) (G4e52 core-prim . cadaar) (G4e51 core-prim . caaddr) (G4e50 core-prim . caadar) (G4e4f core-prim . caaadr) (G4e4e core-prim . caaaar) (G4e4d core-prim . cdddr) (G4e4c core-prim . cddar) (G4e4b core-prim . cdadr) (G4e4a core-prim . cdaar) (G4e49 core-prim . caddr) (G4e48 core-prim . cadar) (G4e47 core-prim . caadr) (G4e46 core-prim . caaar) (G4e45 core-prim . cddr) (G4e44 core-prim . cdar) (G4e43 core-prim . cadr) (G4e42 core-prim . caar) (G4e41 core-prim . cdr) (G4e40 core-prim . car) (G4e3f core-prim . boolean?) (G4e3e core-prim . boolean=?) (G4e3d core-prim . atan) (G4e3c core-prim . assertion-violation) (G4e3b core-prim . asin) (G4e3a core-prim . apply) (G4e39 core-prim . append) (G4e38 core-prim . angle) (G4e37 core-prim . acos) (G4e36 core-prim . abs) (G4e35 core-prim . /) (G4e34 core-prim . *) (G4e33 core-prim . -) (G4e32 core-prim . +) (G4e31 core-prim . >=) (G4e30 core-prim . >) (G4e2f core-prim . =) (G4e2e core-prim . <=) (G4e2d core-prim . <) (G4e2c core-prim . library) (G4e2b core-prim . export) (G4e2a $core-rtd &no-nans-rtd &no-nans-rcd) (G4e29 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e28 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e27 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e26 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e25 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e24 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e23 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e22 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e21 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e20 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e1f $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e1e $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e1d $core-rtd &i/o-rtd &i/o-rcd) (G4e1c $core-rtd &undefined-rtd &undefined-rcd) (G4e1b $core-rtd &syntax-rtd &syntax-rcd) (G4e1a $core-rtd &lexical-rtd &lexical-rcd) (G4e19 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e18 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e17 $core-rtd &who-rtd &who-rcd) (G4e16 $core-rtd &irritants-rtd &irritants-rcd) (G4e15 $core-rtd &assertion-rtd &assertion-rcd) (G4e14 $core-rtd &violation-rtd &violation-rcd) (G4e13 $core-rtd &error-rtd &error-rcd) (G4e12 $core-rtd &serious-rtd &serious-rcd) (G4e11 $core-rtd &warning-rtd &warning-rcd) (G4e10 $core-rtd &message-rtd &message-rcd) (G4e0f $core-rtd &condition-rtd &condition-rcd) (G4e0e macro . define-condition-type) (G4e0d macro . define-enumeration) (G4e0c macro . define-record-type) (G4e0b macro . parent-rtd) (G4e0a macro . nongenerative) (G4e09 macro . opaque) (G4e08 macro . sealed) (G4e07 macro . protocol) (G4e06 macro . parent) (G4e05 macro . immutable) (G4e04 macro . mutable) (G4e03 macro . fields) (G4e02 macro . error-handling-mode) (G4e01 macro . file-options) (G4e00 macro . buffer-mode) (G4dff macro . eol-style) (G4dfe macro . guard) (G4dfd macro . trace-define) (G4dfc macro . trace-lambda) (G4dfb macro . unsyntax-splicing) (G4dfa macro . unsyntax) (G4df9 macro . unquote-splicing) (G4df8 macro . unquote) (G4df7 macro . _) (G4df6 macro . else) (G4df5 macro . =>) (G4df4 macro . ...) (G4df3 macro . assert) (G4df2 macro . endianness) (G4df1 macro . delay) (G4df0 macro . time) (G4def macro . do) (G4dee macro . cond) (G4ded macro . let*) (G4dec macro . let) (G4deb macro . let*-values) (G4dea macro . let-values) (G4de9 macro . identifier-syntax) (G4de8 macro . with-syntax) (G4de7 macro . quasisyntax) (G4de6 macro . quasiquote) (G4de5 macro . syntax-rules) (G4de4 macro . include) (G4de3 macro . define-struct) (G4de2 core-macro . record-constructor-descriptor) (G4de1 core-macro . record-type-descriptor) (G4de0 macro . case) (G4ddf macro . parameterize) (G4dde macro . unless) (G4ddd macro . when) (G4ddc core-macro . or) (G4ddb core-macro . and) (G4dda core-macro . if) (G4dd9 core-macro . letrec*) (G4dd8 core-macro . letrec) (G4dd7 core-macro . type-descriptor) (G4dd6 core-macro . case-lambda) (G4dd5 core-macro . lambda) (G4dd4 core-macro . syntax) (G4dd3 core-macro . syntax-case) (G4dd2 core-macro . quote) (G4dd1 core-macro . foreign-call) (G4dd0 letrec-syntax) (G4dcf let-syntax) (G4dce set!) (G4dcd import) (G4dcc begin) (G4dcb module) (G4dca define-syntax) (G4dc9 define)) values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50b5 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5094) (eval-core . G5093) (set-symbol-value! . G5092) (symbol-value . G5091) (gensym . G5090) (void . G508f)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50b6 '(mosh) '() '() '() '() '((set-symbol-value! . G5092) (symbol-value . G5091) (assoc-ref . G506b) (alist-cons . G506a) (print . G5068) (format . G5067) (standard-library-path . G5066) (file-newer? . G5065) (stat-mtime . G5064) (current-directory . G5063) (write-to-file . G5062) (file->list . G5061) (file->string . G5060) (digit->integer . G505f) (call-with-string-input-port . G505e) (call-with-string-io . G505d) (string-split . G505c) (bytevector-for-each . G505b) (string->regexp . G505a) (rxmatch . G5059) (regexp-replace-all . G5058) (hashtable-for-each . G5057) (get-timeofday . G5053) (get-command-line . G5052) (sys-display . G5051) (source-info . G5050) (make-compiler-instruction . G504f) (make-instruction . G504e) (set-source-info! . G504d) (bignum? . G504c) (make-complex . G504b) (fasl-read . G504a) (fasl-write . G5049) (include . G4de4)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50b7 '(mosh backend) '() '() '() '() '((receive . G5048)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50b8 '(mosh file) '() '() '() '() '((read-line . G508c) (file-newer? . G5065) (stat-mtime . G5064) (current-directory . G5063) (write-to-file . G5062) (file->list . G5061) (file->string . G5060)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50b9 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G505b)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50ba '(mosh number) '() '() '() '() '((digit->integer . G505f)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50bb '(mosh string) '() '() '() '() '((print . G5068) (format . G5067) (call-with-string-input-port . G505e) (call-with-string-io . G505d) (string-split . G505c) (string->regexp . G505a)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50bc '(mosh list) '() '() '() '() '((assoc-ref . G506b)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50bd '(mosh regexp) '() '() '() '() '((rxmatch . G5059) (regexp-replace-all . G5058)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50be '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5057)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50bf '(mosh parameters) '() '() '() '() '((make-parameter . G283a) (parameterize . G4ddf)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50c0 '(system) '() '() '() '() '((readdir . G5056) (get-environment-variables . G5055) (get-environment-variable . G5054)) '() values values '#f '#f '#f '#f) (G2b7b@G2a20@install-library 'G50c1 '(srfi :1) '() '() '() '() '((dotted-list? . G508b) (circular-list? . G508a) (proper-list? . G5089) (circular-list . G5088) (last . G5087) (last-pair . G5086) (not-pair? . G5085) (split-at! . G5084) (split-at . G5083) (list= . G5082) (list-copy . G5081) (list-tabulate . G5080) (make-list . G507f) (xcons . G507e) (tenth . G507d) (ninth . G507c) (eighth . G507b) (seventh . G507a) (sixth . G5079) (fifth . G5078) (drop-right! . G5077) (drop-right . G5076) (take-right . G5075) (take! . G5074) (drop . G5073) (take . G5072) (car+cdr . G5071) (third . G5070) (second . G506f) (first . G506e) (iota . G506d) (every . G506c) (alist-cons . G506a) (append-map . G5069)) '() values values '#f '#f '#f '#f))
((lambda (G4d25@for-each-with-index G4d27@repl G4d29@trace-printer G4d2b@command-line G4d2d@local-library-path G4d2f@load/args G4d31@load G4d33@ironscheme-build G4d35@eval-top-level G4d37@compile-system-libraries G4d39@compile G4d3b@compile->closure G4d3d@pre-compile-r6rs-file G4d3f@load-r6rs-top-level G4d41@write-record) (begin (set! G4d25@for-each-with-index (lambda (G4d56@proc G4d57@lst) (letrec ((G4d5a@loop (lambda (G4d5c@i G4d5d@lst) (if (null? G4d5d@lst) (if '#f '#f (void)) (begin (G4d56@proc G4d5c@i (car G4d5d@lst)) (G4d5a@loop (+ G4d5c@i '1) (cdr G4d5d@lst))))))) (G4d5a@loop '1 G4d57@lst)))) (set! G4d27@repl (lambda G4d60@x ((lambda (G4d63@rec) (begin (set! G4d63@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4d65@G4d64) (with-exception-handler (lambda (G4d67@e) (G4d65@G4d64 (if '#t (G4d25@for-each-with-index (lambda (G4d69@i G4d6a@x) ((lambda (G4d6d@rtd) (begin (format '#t '"   ~d. ~a" G4d69@i (record-type-name G4d6d@rtd)) ((lambda (G4d6f@v) ((lambda (G4d71@t) (if (memv G4d71@t '(0)) (newline) (if (memv G4d71@t '(1)) (begin (display '": ") (write ((record-accessor G4d6d@rtd '0) G4d6a@x)) (newline)) (begin (display '":\n") ((letrec ((G4d73@f (lambda (G4d75@i) (if (not (= G4d75@i (vector-length G4d6f@v))) (begin (display '"       ") (display (vector-ref G4d6f@v G4d75@i)) (display '": ") (write ((record-accessor G4d6d@rtd G4d75@i) G4d6a@x)) (newline) (G4d73@f (+ G4d75@i '1))) (void))))) G4d73@f) '0))))) (vector-length G4d6f@v))) (record-type-field-names G4d6d@rtd)))) (record-rtd G4d6a@x))) (simple-conditions G4d67@e)) (raise G4d67@e)))) (lambda () (begin '#f ((lambda (G4d77@line) (if (eof-object? G4d77@line) (exit) (write (G4d35@eval-top-level (call-with-port (open-string-input-port G4d77@line) read))))) (get-line (current-input-port)))))))) (newline) (G4d63@rec)))) (G4d63@rec))) '#f))) (set! G4d29@trace-printer (G2902@G283b@make-parameter write)) (set! G4d2b@command-line (G2902@G283b@make-parameter (get-command-line))) (set! G4d2d@local-library-path (lambda (G4d79@filename) (cons '"." (G2b6b@G2a00@library-path)))) (set! G4d2f@load/args (lambda (G4d7b@filename . G4d7d@args) (begin (apply G4d3f@load-r6rs-top-level G4d7b@filename 'load G4d7d@args) (void)))) (set! G4d31@load (lambda (G4d7f@filename) (begin (apply G4d3f@load-r6rs-top-level G4d7f@filename 'load (G4d2b@command-line)) (void)))) (set! G4d33@ironscheme-build (lambda () (G4d31@load '"ironscheme-buildscript.ss"))) (set! G4d35@eval-top-level (lambda (G4d81@x) (G495a@G3030@eval G4d81@x (G4971@G305e@interaction-environment)))) (set! G4d37@compile-system-libraries (lambda () (G4d35@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d39@compile (lambda (G4d83@filename) (G4d3f@load-r6rs-top-level G4d83@filename 'compile))) (set! G4d3b@compile->closure (lambda (G4d85@filename) (G4d3f@load-r6rs-top-level G4d85@filename 'closure))) (set! G4d3d@pre-compile-r6rs-file (lambda (G4d87@filename) (G4d3f@load-r6rs-top-level G4d87@filename 'compile))) (set! G4d3f@load-r6rs-top-level (lambda (G4d89@filename G4d8a@how . G4d8d@args) ((lambda (G4d91@G4d8f@library-path G4d92@G4d90@library-path) ((lambda (G4d95@swap) (dynamic-wind G4d95@swap (lambda () ((lambda (G4d97@x*) ((lambda (G4d99@t) (if (memv G4d99@t '(closure)) (G4970@G305c@pre-compile-r6rs-top-level G4d97@x*) (if (memv G4d99@t '(load)) ((lambda (G4d9d@G4d9b@command-line G4d9e@G4d9c@command-line) ((lambda (G4da1@swap) (dynamic-wind G4da1@swap (lambda () ((G496f@G305a@compile-r6rs-top-level G4d97@x*))) G4da1@swap)) (lambda () ((lambda (G4da3@t) (begin (G4d9d@G4d9b@command-line G4d9e@G4d9c@command-line) (set! G4d9e@G4d9c@command-line G4da3@t))) (G4d9d@G4d9b@command-line))))) G4d2b@command-line (cons G4d89@filename (car G4d8d@args))) (if (memv G4d99@t '(compile)) (begin (G496f@G305a@compile-r6rs-top-level G4d97@x*) (G2b6f@G2a08@serialize-all G28fd@G2831@serialize-library G2957@G2910@compile-core-expr)) (if '#f '#f (void)))))) G4d8a@how)) (with-input-from-file G4d89@filename (lambda () ((letrec ((G4da5@f (lambda () ((lambda (G4da7@x) (if (eof-object? G4da7@x) '() (cons G4da7@x (G4da5@f)))) (G28f5@G2821@read-annotated))))) G4da5@f)))))) G4d95@swap)) (lambda () ((lambda (G4da9@t) (begin (G4d91@G4d8f@library-path G4d92@G4d90@library-path) (set! G4d92@G4d90@library-path G4da9@t))) (G4d91@G4d8f@library-path))))) G2b6b@G2a00@library-path (G4d2d@local-library-path G4d89@filename)))) (set! G4d41@write-record (lambda (G4dab@record G4dac@port) ((lambda (G4daf@rtd) (begin (format G4dac@port '"    ~a" (record-type-name G4daf@rtd)) ((lambda (G4db1@v) ((lambda (G4db3@t) (if (memv G4db3@t '(0)) (newline) (if (memv G4db3@t '(1)) (begin (display '": " G4dac@port) (write ((record-accessor G4daf@rtd '0) G4dab@record) G4dac@port) (newline G4dac@port)) (begin (display '":\n") ((letrec ((G4db5@f (lambda (G4db7@i) (if (not (= G4db7@i (vector-length G4db1@v))) (begin (display '"       " G4dac@port) (display (vector-ref G4db1@v G4db7@i) G4dac@port) (display '": " G4dac@port) (write ((record-accessor G4daf@rtd G4db7@i) G4dab@record) G4dac@port) (newline G4dac@port) (G4db5@f (+ G4db7@i '1))) (void))))) G4db5@f) '0))))) (vector-length G4db1@v))) (record-type-field-names G4daf@rtd)))) (record-rtd G4dab@record)))) (begin (set! G4dc7@G4d41@write-record G4d41@write-record) (set! G4dc6@G4d3f@load-r6rs-top-level G4d3f@load-r6rs-top-level) (set! G4dc5@G4d3d@pre-compile-r6rs-file G4d3d@pre-compile-r6rs-file) (set! G4dc4@G4d3b@compile->closure G4d3b@compile->closure) (set! G4dc3@G4d39@compile G4d39@compile) (set! G4dc2@G4d37@compile-system-libraries G4d37@compile-system-libraries) (set! G4dc1@G4d35@eval-top-level G4d35@eval-top-level) (set! G4dc0@G4d33@ironscheme-build G4d33@ironscheme-build) (set! G4dbf@G4d31@load G4d31@load) (set! G4dbe@G4d2f@load/args G4d2f@load/args) (set! G4dbd@G4d2d@local-library-path G4d2d@local-library-path) (set! G4dbc@G4d2b@command-line G4d2b@command-line) (set! G4dbb@G4d29@trace-printer G4d29@trace-printer) (set! G4dba@G4d27@repl G4d27@repl) (set! G4db9@G4d25@for-each-with-index G4d25@for-each-with-index) (G2b70@G2a0a@current-precompiled-library-loader G28fe@G2833@load-serialized-library) (set-symbol-value! 'load G4d31@load) (set-symbol-value! 'pre-compile-r6rs-file G4d3d@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d35@eval-top-level) (set-symbol-value! 'int-env-syms G4951@G301e@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2956@G290e@expanded->core) (set-symbol-value! 'trace-printer G4d29@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2b6b@G2a00@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4d42@args G4d43@port) (with-exception-handler (lambda (G4d46@c) (begin (display '" Condition components:\n" G4d43@port) (G4d25@for-each-with-index (lambda (G4d48@i G4d49@x) ((lambda (G4d4c@rtd) (begin (format G4d43@port '"   ~d. ~a" G4d48@i (record-type-name G4d4c@rtd)) ((lambda (G4d4e@v) ((lambda (G4d50@t) (if (memv G4d50@t '(0)) (newline) (if (memv G4d50@t '(1)) (begin (display '": ") (write ((record-accessor G4d4c@rtd '0) G4d49@x)) (newline)) (begin (display '":\n") ((letrec ((G4d52@f (lambda (G4d54@i) (if (not (= G4d54@i (vector-length G4d4e@v))) (begin (display '"       ") (display (vector-ref G4d4e@v G4d54@i)) (display '": ") (write ((record-accessor G4d4c@rtd G4d54@i) G4d49@x)) (newline) (G4d52@f (+ G4d54@i '1))) (void))))) G4d52@f) '0))))) (vector-length G4d4e@v))) (record-type-field-names G4d4c@rtd)))) (record-rtd G4d49@x))) (simple-conditions G4d46@c)))) (lambda () (if (null? G4d42@args) (G4d27@repl) (G4d3f@load-r6rs-top-level (car G4d42@args) 'load (cdr G4d42@args)))))) (G4d2b@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
