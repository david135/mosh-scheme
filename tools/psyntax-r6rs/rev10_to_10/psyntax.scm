;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G280f@read-annotated G2811@annotation-stripped G2813@annotation? G2815@annotation-source G2817@annotation-expression G2819@scm->fasl G281b@fasl-save G281d@fasl-load G281f@serialize-library G2821@load-serialized-library G2823@make-record-printer G2825@compile-core G2827@read-library-source-file G2829@make-parameter G2895@file-options-spec) (begin (set! G280f@read-annotated read) (set! G2811@annotation-stripped (lambda (G2896@x) (G2817@annotation-expression G2896@x))) (set! G2813@annotation? (lambda (G2898@x) (source-info G2898@x))) (set! G2815@annotation-source (lambda (G289a@x) (source-info G289a@x))) (set! G2817@annotation-expression (lambda (G289c@x) (if (pair? G289c@x) (cons (car G289c@x) (cdr G289c@x)) (display '"line:46\n")))) (set! G2819@scm->fasl (lambda (G289e@filename) (string-append G289e@filename '".fasl"))) (set! G281b@fasl-save (lambda (G28a0@filename G28a1@obj) (call-with-port (open-file-output-port G28a0@filename) (lambda (G28a4@port) ((symbol-value 'fasl-write!) G28a1@obj G28a4@port))))) (set! G281d@fasl-load (lambda (G28a6@filename) (call-with-port (open-file-input-port G28a6@filename) (symbol-value 'fasl-read!)))) (set! G281f@serialize-library (lambda (G28a8@filename G28a9@obj) (begin (format '#t '"serialize-library ~a\n..." G28a8@filename) ((lambda (G28ac@fasl-file) (begin (if (file-exists? G28ac@fasl-file) (delete-file G28ac@fasl-file) (void)) ((call/cc (lambda (G28b0@G28ae) (lambda () (with-exception-handler (lambda (G28b2@c) ((call/cc (lambda (G28b4@G28af) (G28b0@G28ae (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28a8@filename) (if (file-exists? G28ac@fasl-file) (delete-file G28ac@fasl-file) (void)) '#f) (G28b4@G28af (lambda () (raise-continuable G28b2@c)))))))))) (lambda () (begin (G281b@fasl-save G28ac@fasl-file G28a9@obj) (display '"OK\n")))))))))) (G2819@scm->fasl G28a8@filename))))) (set! G2821@load-serialized-library (lambda (G28b6@filename G28b7@obj) ((lambda (G28ba@fasl-file) (if (and (file-exists? G28ba@fasl-file) ((symbol-value 'file-newer?) G28ba@fasl-file G28b6@filename)) ((lambda (G28bc@expanded2core) ((lambda (G28be@code) ((lambda (G28c0@pivot) ((lambda (G28c2@visit) ((lambda (G28c4@visit-proc) ((lambda () (begin (set-car! G28c0@pivot G28c4@visit-proc) ((lambda (G28c6@pivot) ((lambda (G28c8@invoke) ((lambda () (begin (set-car! G28c6@pivot (lambda () (eval-core G28c8@invoke))) (apply G28b7@obj G28be@code))))) (G28bc@expanded2core (car G28c6@pivot)))) (cdr G28c0@pivot)) '#t)))) (lambda () (eval-core G28c2@visit)))) (G28bc@expanded2core (car G28c0@pivot)))) (cddddr (cddddr G28be@code)))) (G281d@fasl-load G28ba@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2819@scm->fasl G28b6@filename)))) (set! G2823@make-record-printer (lambda (G28ca@name G28cb@printer) (lambda G28ce@x (begin (display '"record printer") (for-each display G28ce@x))))) (set! G2825@compile-core (lambda G28d0@x (apply error 'comile-core '"not implementated" G28d0@x))) (set! G2827@read-library-source-file (lambda (G28d2@file-name) (with-input-from-file G28d2@file-name G280f@read-annotated))) (set! G2829@make-parameter (lambda G28e2 ((lambda (G28e3) (if (= G28e3 '1) (apply (lambda (G28d4@x) (G2829@make-parameter G28d4@x (lambda (G28d6@x) G28d6@x))) G28e2) (if (= G28e3 '2) (apply (lambda (G28d8@x G28d9@fender) ((lambda (G28dc@x) (lambda G28e0 ((lambda (G28e1) (if (= G28e1 '0) (apply (lambda () G28dc@x) G28e0) (if (= G28e1 '1) (apply (lambda (G28de@v) (set! G28dc@x (G28d9@fender G28de@v))) G28e0) (error 'apply '"invalid arg count")))) (length G28e0)))) (G28d9@fender G28d8@x))) G28e2) (error 'apply '"invalid arg count")))) (length G28e2)))) (set! G2895@file-options-spec (lambda (G28e4@x) G28e4@x)) (begin (set! G28f4@G2895@file-options-spec G2895@file-options-spec) (set! G28f3@G2829@make-parameter G2829@make-parameter) (set! G28f2@G2827@read-library-source-file G2827@read-library-source-file) (set! G28f1@G2825@compile-core G2825@compile-core) (set! G28f0@G2823@make-record-printer G2823@make-record-printer) (set! G28ef@G2821@load-serialized-library G2821@load-serialized-library) (set! G28ee@G281f@serialize-library G281f@serialize-library) (set! G28ed@G281d@fasl-load G281d@fasl-load) (set! G28ec@G281b@fasl-save G281b@fasl-save) (set! G28eb@G2819@scm->fasl G2819@scm->fasl) (set! G28ea@G2817@annotation-expression G2817@annotation-expression) (set! G28e9@G2815@annotation-source G2815@annotation-source) (set! G28e8@G2813@annotation? G2813@annotation?) (set! G28e7@G2811@annotation-stripped G2811@annotation-stripped) (set! G28e6@G280f@read-annotated G280f@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28f9@current-primitive-locations G28fb@mutable? G28fd@rewriter G28ff@expanded->core G2901@compile-core-expr G2903@pretty-print G2905@compile-core-expr-to-port) (begin (set! G28f9@current-primitive-locations (G28f3@G2829@make-parameter (lambda (G2906@x) '#f) (lambda (G2908@p) G2908@p))) (set! G28fb@mutable? (lambda (G290a@x) (or (pair? G290a@x) (vector? G290a@x) (hashtable? G290a@x)))) (set! G28fd@rewriter (lambda (G290c@quote-hack?) ((lambda (G290f@f) (begin (set! G290f@f (lambda (G2910@x) (if (pair? G2910@x) ((lambda (G2912@t) (if (memv G2912@t '(quote)) (if (and G290c@quote-hack? (G28fb@mutable? (cadr G2910@x))) ((lambda (G2914@g) (begin (set-symbol-value! G2914@g (cadr G2910@x)) G2914@g)) (gensym)) G2910@x) (if (memv G2912@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2916@x) (cons (car G2916@x) (map G290f@f (cdr G2916@x)))) (cdr G2910@x))) (if (memv G2912@t '(lambda)) (cons* 'lambda (cadr G2910@x) (map G290f@f (cddr G2910@x))) (if (memv G2912@t '(letrec)) ((lambda (G2918@bindings G2919@body*) ((lambda (G291c@lhs* G291d@rhs*) (cons* 'letrec (map list G291c@lhs* (map G290f@f G291d@rhs*)) (map G290f@f G2919@body*))) (map car G2918@bindings) (map cadr G2918@bindings))) (cadr G2910@x) (cddr G2910@x)) (if (memv G2912@t '(letrec*)) ((lambda (G2920@bindings G2921@body*) ((lambda (G2924@lhs* G2925@rhs*) (cons* 'letrec* (map list G2924@lhs* (map G290f@f G2925@rhs*)) (map G290f@f G2921@body*))) (map car G2920@bindings) (map cadr G2920@bindings))) (cadr G2910@x) (cddr G2910@x)) (if (memv G2912@t '(library-letrec*)) ((lambda (G2928@name G2929@x) ((lambda (G292c@bindings G292d@body*) ((lambda (G2930@lhs* G2931@lhs** G2932@rhs*) (cons* 'library-letrec* G2928@name (map list G2930@lhs* G2931@lhs** (map G290f@f G2932@rhs*)) (map G290f@f G292d@body*))) (map car G292c@bindings) (map cadr G292c@bindings) (map caddr G292c@bindings))) (cadr G2929@x) (cddr G2929@x))) (cadr G2910@x) (cdr G2910@x)) (if (memv G2912@t '(begin)) (cons 'begin (map G290f@f (cdr G2910@x))) (if (memv G2912@t '(set!)) (list 'set! (cadr G2910@x) (G290f@f (caddr G2910@x))) (if (memv G2912@t '(primitive)) ((lambda (G2936@op) ((lambda (G2938@t) (if G2938@t ((lambda (G293a@loc) G293a@loc) G2938@t) G2936@op)) ((G28f9@current-primitive-locations) G2936@op))) (cadr G2910@x)) (if (memv G2912@t '(define)) G2910@x (if (list? G2910@x) (map G290f@f G2910@x) (error 'rewrite '"invalid form ~s ~s" G2910@x (list? G2910@x)))))))))))))) (car G2910@x)) G2910@x))) G290f@f)) '#f))) (set! G28ff@expanded->core (lambda (G293c@x) ((G28fd@rewriter '#t) G293c@x))) (set! G2901@compile-core-expr (lambda (G293e@x) ((G28fd@rewriter '#f) G293e@x))) (set! G2903@pretty-print write) (set! G2905@compile-core-expr-to-port (lambda (G2940@x G2941@p) (G2903@pretty-print ((G28fd@rewriter '#f) G2940@x) G2941@p))) (begin (set! G294a@G2905@compile-core-expr-to-port G2905@compile-core-expr-to-port) (set! G2949@G2903@pretty-print G2903@pretty-print) (set! G2948@G2901@compile-core-expr G2901@compile-core-expr) (set! G2947@G28ff@expanded->core G28ff@expanded->core) (set! G2946@G28fd@rewriter G28fd@rewriter) (set! G2945@G28fb@mutable? G28fb@mutable?) (set! G2944@G28f9@current-primitive-locations G28f9@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29a0@make-collection G29a2@current-library-collection G29a8@G29a3 G29aa@G29a5 G29ac@G29a4 G29af@library? G29b1@make-library G29b3@library-id G29b5@library-name G29b7@library-version G29b9@library-imp* G29bb@library-vis* G29bd@library-inv* G29bf@library-subst G29c1@library-env G29c3@library-visit-state G29c5@library-invoke-state G29c7@library-visit-code G29c9@library-invoke-code G29cb@library-visible? G29cd@library-source-file-name G29cf@set-library-id! G29d1@set-library-name! G29d3@set-library-version! G29d5@set-library-imp*! G29d7@set-library-vis*! G29d9@set-library-inv*! G29db@set-library-subst! G29dd@set-library-env! G29df@set-library-visit-state! G29e1@set-library-invoke-state! G29e3@set-library-visit-code! G29e5@set-library-invoke-code! G29e7@set-library-visible?! G29e9@set-library-source-file-name! G29eb@rp G29ed@find-dependencies G29ef@find-library-by G29f1@library-path G29f3@library-extensions G29f5@library-name->file-name G29f7@file-locator G29f9@serialize-all G29fb@current-precompiled-library-loader G29fd@try-load-from-file G29ff@library-loader G2a01@current-library-expander G2a03@external-pending-libraries G2a05@find-external-library G2a07@find-library-by-name G2a09@library-exists? G2a0b@find-library-by-spec/die G2a0d@label->binding-table G2a0f@install-library-record G2a11@install-library G2a13@imported-label->binding G2a15@invoke-library G2a17@visit-library G2a19@invoke-library-by-spec G2a1b@installed-libraries G2a1d@library-spec) (begin (set! G29a0@make-collection (lambda () ((lambda (G2a1e@set) ((lambda (G2a21@set-cons) (begin (set! G2a21@set-cons (lambda (G2a26@x G2a27@ls) (if (memq G2a26@x G2a27@ls) G2a27@ls (cons G2a26@x G2a27@ls)))) (lambda G2a24 ((lambda (G2a25) (if (= G2a25 '0) (apply (lambda () G2a1e@set) G2a24) (if (= G2a25 '1) (apply (lambda (G2a22@x) (set! G2a1e@set (G2a21@set-cons G2a22@x G2a1e@set))) G2a24) (error 'apply '"invalid arg count")))) (length G2a24))))) '#f)) '()))) (set! G29a2@current-library-collection (G28f3@G2829@make-parameter (G29a0@make-collection) (lambda (G2a2a@x) (begin (if (not (procedure? G2a2a@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a2a@x) (void)) G2a2a@x)))) (set! G29a8@G29a3 (make-record-type-descriptor 'library '#f 'G29a6 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29aa@G29a5 '#f) (set! G29ac@G29a4 (make-record-constructor-descriptor G29a8@G29a3 '#f G29aa@G29a5)) (set! G29af@library? (record-predicate G29a8@G29a3)) (set! G29b1@make-library (record-constructor G29ac@G29a4)) (set! G29b3@library-id (record-accessor G29a8@G29a3 '0)) (set! G29b5@library-name (record-accessor G29a8@G29a3 '1)) (set! G29b7@library-version (record-accessor G29a8@G29a3 '2)) (set! G29b9@library-imp* (record-accessor G29a8@G29a3 '3)) (set! G29bb@library-vis* (record-accessor G29a8@G29a3 '4)) (set! G29bd@library-inv* (record-accessor G29a8@G29a3 '5)) (set! G29bf@library-subst (record-accessor G29a8@G29a3 '6)) (set! G29c1@library-env (record-accessor G29a8@G29a3 '7)) (set! G29c3@library-visit-state (record-accessor G29a8@G29a3 '8)) (set! G29c5@library-invoke-state (record-accessor G29a8@G29a3 '9)) (set! G29c7@library-visit-code (record-accessor G29a8@G29a3 '10)) (set! G29c9@library-invoke-code (record-accessor G29a8@G29a3 '11)) (set! G29cb@library-visible? (record-accessor G29a8@G29a3 '12)) (set! G29cd@library-source-file-name (record-accessor G29a8@G29a3 '13)) (set! G29cf@set-library-id! (record-mutator G29a8@G29a3 '0)) (set! G29d1@set-library-name! (record-mutator G29a8@G29a3 '1)) (set! G29d3@set-library-version! (record-mutator G29a8@G29a3 '2)) (set! G29d5@set-library-imp*! (record-mutator G29a8@G29a3 '3)) (set! G29d7@set-library-vis*! (record-mutator G29a8@G29a3 '4)) (set! G29d9@set-library-inv*! (record-mutator G29a8@G29a3 '5)) (set! G29db@set-library-subst! (record-mutator G29a8@G29a3 '6)) (set! G29dd@set-library-env! (record-mutator G29a8@G29a3 '7)) (set! G29df@set-library-visit-state! (record-mutator G29a8@G29a3 '8)) (set! G29e1@set-library-invoke-state! (record-mutator G29a8@G29a3 '9)) (set! G29e3@set-library-visit-code! (record-mutator G29a8@G29a3 '10)) (set! G29e5@set-library-invoke-code! (record-mutator G29a8@G29a3 '11)) (set! G29e7@set-library-visible?! (record-mutator G29a8@G29a3 '12)) (set! G29e9@set-library-source-file-name! (record-mutator G29a8@G29a3 '13)) (set! G29eb@rp (G28f0@G2823@make-record-printer 'library (lambda (G2a2c@x G2a2d@p G2a2e@wr) (begin (if (not (G29af@library? G2a2c@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29b7@library-version G2a2c@x)) (G29b5@library-name G2a2c@x) (append (G29b5@library-name G2a2c@x) (list (G29b7@library-version G2a2c@x))))) G2a2d@p))))) (set! G29ed@find-dependencies (lambda (G2a32@ls) (if (null? G2a32@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29ef@find-library-by (lambda (G2a34@pred) ((letrec ((G2a36@f (lambda (G2a38@ls) (if (null? G2a38@ls) '#f (if (G2a34@pred (car G2a38@ls)) (car G2a38@ls) (G2a36@f (cdr G2a38@ls))))))) G2a36@f) ((G29a2@current-library-collection))))) (set! G29f1@library-path (G28f3@G2829@make-parameter '(".") (lambda (G2a3a@x) (if (and (list? G2a3a@x) (for-all string? G2a3a@x)) (map (lambda (G2a3c@x) G2a3c@x) G2a3a@x) (assertion-violation 'library-path '"not a list of strings" G2a3a@x))))) (set! G29f3@library-extensions (G28f3@G2829@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a3e@x) (if (and (list? G2a3e@x) (for-all string? G2a3e@x)) (map (lambda (G2a40@x) G2a40@x) G2a3e@x) (assertion-violation 'library-extensions '"not a list of strings" G2a3e@x))))) (set! G29f5@library-name->file-name (lambda (G2a42@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a46@G2a44 G2a47@G2a45) ((lambda (G2a4a@extract G2a4b@p) ((lambda (G2a4f@display-hex) (begin (set! G2a4f@display-hex (lambda (G2a58@n) (if (<= '0 G2a58@n '9) (display G2a58@n G2a4b@p) (display (integer->char (+ (char->integer '#\A) (- G2a58@n '10))) G2a4b@p)))) (begin ((letrec ((G2a50@f (lambda (G2a52@ls) (if (not (null? G2a52@ls)) (begin (display '"/" G2a4b@p) (for-each (lambda (G2a54@c) (if (or (char<=? '#\a G2a54@c '#\z) (char<=? '#\A G2a54@c '#\Z) (char<=? '#\0 G2a54@c '#\9) (memv G2a54@c '(#\- #\. #\_ #\~))) (display G2a54@c G2a4b@p) (begin (display '"%" G2a4b@p) ((lambda (G2a56@n) (begin (G2a4f@display-hex (quotient G2a56@n '16)) (G2a4f@display-hex (remainder G2a56@n '16)))) (char->integer G2a54@c))))) (string->list (symbol->string (car G2a52@ls)))) (G2a50@f (cdr G2a52@ls))) (void))))) G2a50@f) G2a42@x) (G2a4a@extract)))) '#f)) G2a47@G2a45 G2a46@G2a44))))) (set! G29f7@file-locator (G28f3@G2829@make-parameter (lambda (G2a5a@x) ((lambda (G2a5c@str) ((letrec ((G2a5e@f (lambda (G2a60@ls G2a61@exts G2a62@failed-list) (if (null? G2a60@ls) ((lambda () ((lambda (G2a6e@G2a69 G2a70@G2a6b G2a72@G2a6a G2a75@G2a68 G2a77@make-library-resolution-condition G2a79@G2a66 G2a7b@G2a67 G2a7d@library-resolution-condition? G2a7f@condition-library G2a81@condition-files) (begin (set! G2a6e@G2a69 (make-record-type-descriptor '&library-resolution G4c09@G495a@&condition-rtd 'G2a6c '#f '#f '#((immutable library) (immutable files)))) (set! G2a70@G2a6b '#f) (set! G2a72@G2a6a (make-record-constructor-descriptor G2a6e@G2a69 G4c0a@G495c@&condition-rcd G2a70@G2a6b)) (set! G2a75@G2a68 (record-predicate G2a6e@G2a69)) (set! G2a77@make-library-resolution-condition (record-constructor G2a72@G2a6a)) (set! G2a79@G2a66 (record-accessor G2a6e@G2a69 '0)) (set! G2a7b@G2a67 (record-accessor G2a6e@G2a69 '1)) (set! G2a7d@library-resolution-condition? (condition-predicate G2a6e@G2a69)) (set! G2a7f@condition-library (condition-accessor G2a6e@G2a69 G2a79@G2a66)) (set! G2a81@condition-files (condition-accessor G2a6e@G2a69 G2a7b@G2a67)) (raise (condition (G4c29@G49f2@make-error) (G4c4b@G4a4c@make-who-condition 'expander) (G4c0f@G49af@make-message-condition '"cannot locate library in library-path") (G2a77@make-library-resolution-condition G2a5a@x (reverse G2a62@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a61@exts) (G2a5e@f (cdr G2a60@ls) (G29f3@library-extensions) G2a62@failed-list) ((lambda (G2a82@name) (if (file-exists? G2a82@name) G2a82@name (G2a5e@f G2a60@ls (cdr G2a61@exts) (cons G2a82@name G2a62@failed-list)))) (string-append (car G2a60@ls) G2a5c@str (car G2a61@exts)))))))) G2a5e@f) (G29f1@library-path) (G29f3@library-extensions) '())) (G29f5@library-name->file-name G2a5a@x))) (lambda (G2a84@f) (if (procedure? G2a84@f) G2a84@f (assertion-violation 'file-locator '"not a procedure" G2a84@f))))) (set! G29f9@serialize-all (lambda (G2a86@serialize G2a87@compile) ((lambda (G2a8b@library-desc) (begin (set! G2a8b@library-desc (lambda (G2a8e@x) (list (G29b3@library-id G2a8e@x) (G29b5@library-name G2a8e@x)))) (for-each (lambda (G2a8c@x) (if (G29cd@library-source-file-name G2a8c@x) (G2a86@serialize (G29cd@library-source-file-name G2a8c@x) (list (G29b3@library-id G2a8c@x) (G29b5@library-name G2a8c@x) (G29b7@library-version G2a8c@x) (map G2a8b@library-desc (G29b9@library-imp* G2a8c@x)) (map G2a8b@library-desc (G29bb@library-vis* G2a8c@x)) (map G2a8b@library-desc (G29bd@library-inv* G2a8c@x)) (G29bf@library-subst G2a8c@x) (G29c1@library-env G2a8c@x) (G2a87@compile (G29c7@library-visit-code G2a8c@x)) (G2a87@compile (G29c9@library-invoke-code G2a8c@x)) (G29cb@library-visible? G2a8c@x))) (void))) ((G29a2@current-library-collection))))) '#f))) (set! G29fb@current-precompiled-library-loader (G28f3@G2829@make-parameter (lambda (G2a90@filename G2a91@sk) '#f))) (set! G29fd@try-load-from-file (lambda (G2a94@filename) ((G29fb@current-precompiled-library-loader) G2a94@filename (lambda G2aba ((lambda (G2abb) (if (= G2abb '11) (apply (lambda (G2a96@id G2a97@name G2a98@ver G2a99@imp* G2a9a@vis* G2a9b@inv* G2a9c@exp-subst G2a9d@exp-env G2a9e@visit-proc G2a9f@invoke-proc G2aa0@visible?) ((letrec ((G2aac@f (lambda (G2aae@deps) (if (null? G2aae@deps) (begin (G2a11@install-library G2a96@id G2a97@name G2a98@ver G2a99@imp* G2a9a@vis* G2a9b@inv* G2a9c@exp-subst G2a9d@exp-env G2a9e@visit-proc G2a9f@invoke-proc '#f '#f G2aa0@visible? '#f) '#t) ((lambda (G2ab0@d) ((lambda (G2ab2@label G2ab3@dname) ((lambda (G2ab6@l) (if (and (G29af@library? G2ab6@l) (eq? G2ab2@label (G29b3@library-id G2ab6@l))) (G2aac@f (cdr G2aae@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2a97@name G2ab3@dname G2a94@filename G2ab6@l G2ab2@label (G29b3@library-id G2ab6@l)) '#f))) (G2a07@find-library-by-name G2ab3@dname))) (car G2ab0@d) (cadr G2ab0@d))) (car G2aae@deps)))))) G2aac@f) (append G2a99@imp* G2a9a@vis* G2a9b@inv*))) G2aba) (if (>= G2abb '0) (apply (lambda G2ab8@others '#f) G2aba) (error 'apply '"invalid arg count")))) (length G2aba)))))) (set! G29ff@library-loader (G28f3@G2829@make-parameter (lambda (G2abc@x) ((lambda (G2abe@file-name) (if (not G2abe@file-name) (assertion-violation '#f '"cannot file library" G2abc@x) (or (G29fd@try-load-from-file G2abe@file-name) ((G2a01@current-library-expander) (G28f2@G2827@read-library-source-file G2abe@file-name) G2abe@file-name (lambda (G2ac0@name) (if (not (fast-equal? G2ac0@name G2abc@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ac4@G2ac2 G2ac5@G2ac3) ((lambda (G2ac8@e G2ac9@p) (begin (display '"expected to find library " G2ac9@p) (write G2abc@x G2ac9@p) (display '" in file " G2ac9@p) (display G2abe@file-name G2ac9@p) (display '", found " G2ac9@p) (write G2ac0@name G2ac9@p) (display '" instead" G2ac9@p) (G2ac8@e))) G2ac5@G2ac3 G2ac4@G2ac2)))) (void))))))) ((G29f7@file-locator) G2abc@x))) (lambda (G2acc@f) (if (procedure? G2acc@f) G2acc@f (assertion-violation 'library-locator '"not a procedure" G2acc@f))))) (set! G2a01@current-library-expander (G28f3@G2829@make-parameter (lambda (G2ace@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ad0@f) (if (procedure? G2ad0@f) G2ad0@f (assertion-violation 'library-expander '"not a procedure" G2ad0@f))))) (set! G2a03@external-pending-libraries (G28f3@G2829@make-parameter '())) (set! G2a05@find-external-library (lambda (G2ad2@name) (begin (if (member G2ad2@name (G2a03@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ad2@name) (void)) ((lambda (G2ad6@G2ad4 G2ad7@G2ad5) ((lambda (G2ada@swap) (dynamic-wind G2ada@swap (lambda () (begin ((G29ff@library-loader) G2ad2@name) (or (G29ef@find-library-by (lambda (G2adc@x) (fast-equal? (G29b5@library-name G2adc@x) G2ad2@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ad2@name)))) G2ada@swap)) (lambda () ((lambda (G2ade@t) (begin (G2ad6@G2ad4 G2ad7@G2ad5) (set! G2ad7@G2ad5 G2ade@t))) (G2ad6@G2ad4))))) G2a03@external-pending-libraries (cons G2ad2@name (G2a03@external-pending-libraries)))))) (set! G2a07@find-library-by-name (lambda (G2ae0@name) (or (G29ef@find-library-by (lambda (G2ae2@x) (fast-equal? (G29b5@library-name G2ae2@x) G2ae0@name))) (G2a05@find-external-library G2ae0@name)))) (set! G2a09@library-exists? (lambda (G2ae4@name) (and (G29ef@find-library-by (lambda (G2ae6@x) (fast-equal? (G29b5@library-name G2ae6@x) G2ae4@name))) '#t))) (set! G2a0b@find-library-by-spec/die (lambda (G2ae8@spec) ((lambda (G2aea@id) (or (G29ef@find-library-by (lambda (G2aec@x) (eq? G2aea@id (G29b3@library-id G2aec@x)))) (assertion-violation '#f '"cannot find library with required spec" G2ae8@spec))) (car G2ae8@spec)))) (set! G2a0d@label->binding-table (make-eq-hashtable)) (set! G2a0f@install-library-record (lambda (G2aee@lib) (begin ((lambda (G2af0@exp-env) (for-each (lambda (G2af2@x) ((lambda (G2af4@label G2af5@binding) ((lambda (G2af8@binding) (hashtable-set! G2a0d@label->binding-table G2af4@label G2af8@binding)) ((lambda (G2afa@t) (if (memv G2afa@t '(global)) (cons 'global (cons G2aee@lib (cdr G2af5@binding))) (if (memv G2afa@t '(global-macro)) (cons 'global-macro (cons G2aee@lib (cdr G2af5@binding))) (if (memv G2afa@t '(global-macro!)) (cons 'global-macro! (cons G2aee@lib (cdr G2af5@binding))) G2af5@binding)))) (car G2af5@binding)))) (car G2af2@x) (cdr G2af2@x))) G2af0@exp-env)) (G29c1@library-env G2aee@lib)) ((G29a2@current-library-collection) G2aee@lib)))) (set! G2a11@install-library (lambda (G2afc@id G2afd@name G2afe@ver G2aff@imp* G2b00@vis* G2b01@inv* G2b02@exp-subst G2b03@exp-env G2b04@visit-proc G2b05@invoke-proc G2b06@visit-code G2b07@invoke-code G2b08@visible? G2b09@source-file-name) ((lambda (G2b18@imp-lib* G2b19@vis-lib* G2b1a@inv-lib*) (begin (if (not (and (symbol? G2afc@id) (list? G2afd@name) (list? G2afe@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2afc@id G2afd@name G2afe@ver) (void)) (if (G2a09@library-exists? G2afd@name) (assertion-violation 'install-library '"library is already installed" G2afd@name) (void)) ((lambda (G2b1e@lib) (G2a0f@install-library-record G2b1e@lib)) (G29b1@make-library G2afc@id G2afd@name G2afe@ver G2b18@imp-lib* G2b19@vis-lib* G2b1a@inv-lib* G2b02@exp-subst G2b03@exp-env G2b04@visit-proc G2b05@invoke-proc G2b06@visit-code G2b07@invoke-code G2b08@visible? G2b09@source-file-name)))) (map G2a0b@find-library-by-spec/die G2aff@imp*) (map G2a0b@find-library-by-spec/die G2b00@vis*) (map G2a0b@find-library-by-spec/die G2b01@inv*)))) (set! G2a13@imported-label->binding (lambda (G2b20@lab) (hashtable-ref G2a0d@label->binding-table G2b20@lab '#f))) (set! G2a15@invoke-library (lambda (G2b22@lib) ((lambda (G2b24@invoke) (if (procedure? G2b24@invoke) (begin (G29e1@set-library-invoke-state! G2b22@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b22@lib))) (for-each G2a15@invoke-library (G29bd@library-inv* G2b22@lib)) (G29e1@set-library-invoke-state! G2b22@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b22@lib))) (G2b24@invoke) (G29e1@set-library-invoke-state! G2b22@lib '#t)) (void))) (G29c5@library-invoke-state G2b22@lib)))) (set! G2a17@visit-library (lambda (G2b26@lib) ((lambda (G2b28@visit) (if (procedure? G2b28@visit) (begin (G29df@set-library-visit-state! G2b26@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b26@lib))) (for-each G2a15@invoke-library (G29bb@library-vis* G2b26@lib)) (G29df@set-library-visit-state! G2b26@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b26@lib))) (G2b28@visit) (G29df@set-library-visit-state! G2b26@lib '#t)) (void))) (G29c3@library-visit-state G2b26@lib)))) (set! G2a19@invoke-library-by-spec (lambda (G2b2a@spec) (G2a15@invoke-library (G2a0b@find-library-by-spec/die G2b2a@spec)))) (set! G2a1b@installed-libraries (lambda G2b32 ((lambda (G2b33) (if (= G2b33 '1) (apply (lambda (G2b2c@all?) ((letrec ((G2b2e@f (lambda (G2b30@ls) (if (null? G2b30@ls) '() (if (or G2b2c@all? (G29cb@library-visible? (car G2b30@ls))) (cons (car G2b30@ls) (G2b2e@f (cdr G2b30@ls))) (G2b2e@f (cdr G2b30@ls))))))) G2b2e@f) ((G29a2@current-library-collection)))) G2b32) (if (= G2b33 '0) (apply (lambda () (G2a1b@installed-libraries '#f)) G2b32) (error 'apply '"invalid arg count")))) (length G2b32)))) (set! G2a1d@library-spec (lambda (G2b34@x) (begin (if (not (G29af@library? G2b34@x)) (assertion-violation 'library-spec '"not a library" G2b34@x) (void)) (list (G29b3@library-id G2b34@x) (G29b5@library-name G2b34@x) (G29b7@library-version G2b34@x))))) (begin (set! G2b72@G2a1d@library-spec G2a1d@library-spec) (set! G2b71@G2a1b@installed-libraries G2a1b@installed-libraries) (set! G2b70@G2a19@invoke-library-by-spec G2a19@invoke-library-by-spec) (set! G2b6f@G2a17@visit-library G2a17@visit-library) (set! G2b6e@G2a15@invoke-library G2a15@invoke-library) (set! G2b6d@G2a13@imported-label->binding G2a13@imported-label->binding) (set! G2b6c@G2a11@install-library G2a11@install-library) (set! G2b6b@G2a0f@install-library-record G2a0f@install-library-record) (set! G2b6a@G2a0d@label->binding-table G2a0d@label->binding-table) (set! G2b69@G2a0b@find-library-by-spec/die G2a0b@find-library-by-spec/die) (set! G2b68@G2a09@library-exists? G2a09@library-exists?) (set! G2b67@G2a07@find-library-by-name G2a07@find-library-by-name) (set! G2b66@G2a05@find-external-library G2a05@find-external-library) (set! G2b65@G2a03@external-pending-libraries G2a03@external-pending-libraries) (set! G2b64@G2a01@current-library-expander G2a01@current-library-expander) (set! G2b63@G29ff@library-loader G29ff@library-loader) (set! G2b62@G29fd@try-load-from-file G29fd@try-load-from-file) (set! G2b61@G29fb@current-precompiled-library-loader G29fb@current-precompiled-library-loader) (set! G2b60@G29f9@serialize-all G29f9@serialize-all) (set! G2b5f@G29f7@file-locator G29f7@file-locator) (set! G2b5e@G29f5@library-name->file-name G29f5@library-name->file-name) (set! G2b5d@G29f3@library-extensions G29f3@library-extensions) (set! G2b5c@G29f1@library-path G29f1@library-path) (set! G2b5b@G29ef@find-library-by G29ef@find-library-by) (set! G2b5a@G29ed@find-dependencies G29ed@find-dependencies) (set! G2b59@G29eb@rp G29eb@rp) (set! G2b58@G29e9@set-library-source-file-name! G29e9@set-library-source-file-name!) (set! G2b57@G29e7@set-library-visible?! G29e7@set-library-visible?!) (set! G2b56@G29e5@set-library-invoke-code! G29e5@set-library-invoke-code!) (set! G2b55@G29e3@set-library-visit-code! G29e3@set-library-visit-code!) (set! G2b54@G29e1@set-library-invoke-state! G29e1@set-library-invoke-state!) (set! G2b53@G29df@set-library-visit-state! G29df@set-library-visit-state!) (set! G2b52@G29dd@set-library-env! G29dd@set-library-env!) (set! G2b51@G29db@set-library-subst! G29db@set-library-subst!) (set! G2b50@G29d9@set-library-inv*! G29d9@set-library-inv*!) (set! G2b4f@G29d7@set-library-vis*! G29d7@set-library-vis*!) (set! G2b4e@G29d5@set-library-imp*! G29d5@set-library-imp*!) (set! G2b4d@G29d3@set-library-version! G29d3@set-library-version!) (set! G2b4c@G29d1@set-library-name! G29d1@set-library-name!) (set! G2b4b@G29cf@set-library-id! G29cf@set-library-id!) (set! G2b4a@G29cd@library-source-file-name G29cd@library-source-file-name) (set! G2b49@G29cb@library-visible? G29cb@library-visible?) (set! G2b48@G29c9@library-invoke-code G29c9@library-invoke-code) (set! G2b47@G29c7@library-visit-code G29c7@library-visit-code) (set! G2b46@G29c5@library-invoke-state G29c5@library-invoke-state) (set! G2b45@G29c3@library-visit-state G29c3@library-visit-state) (set! G2b44@G29c1@library-env G29c1@library-env) (set! G2b43@G29bf@library-subst G29bf@library-subst) (set! G2b42@G29bd@library-inv* G29bd@library-inv*) (set! G2b41@G29bb@library-vis* G29bb@library-vis*) (set! G2b40@G29b9@library-imp* G29b9@library-imp*) (set! G2b3f@G29b7@library-version G29b7@library-version) (set! G2b3e@G29b5@library-name G29b5@library-name) (set! G2b3d@G29b3@library-id G29b3@library-id) (set! G2b3c@G29b1@make-library G29b1@make-library) (set! G2b3b@G29af@library? G29af@library?) (set! G2b3a@G29ac@G29a4 G29ac@G29a4) (set! G2b39@G29aa@G29a5 G29aa@G29a5) (set! G2b38@G29a8@G29a3 G29a8@G29a3) (set! G2b37@G29a2@current-library-collection G29a2@current-library-collection) (set! G2b36@G29a0@make-collection G29a0@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b75@build-global-define G2bef@build-lambda G2bf1@build-case-lambda G2bf3@build-let G2c25@build-sequence G2c27@build-void G2c29@build-letrec G2c2b@build-letrec* G2c2d@build-library-letrec* G2c2f@build-receive) (begin (set! G2b75@build-global-define (lambda (G2c30@x) (G2c27@build-void))) (set! G2bef@build-lambda (lambda (G2c32@ae G2c33@vars G2c34@exp) (list 'lambda G2c33@vars G2c34@exp))) (set! G2bf1@build-case-lambda (lambda (G2c38@ae G2c39@vars* G2c3a@exp*) ((lambda (G2c3f@build-error G2c41@build-pred G2c43@build-apply G2c45@expand-case-lambda) (begin (set! G2c3f@build-error (lambda (G2c74@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c41@build-pred (lambda (G2c5e@ae G2c5f@n G2c60@vars) (call-with-values (lambda () ((letrec ((G2c66@f (lambda (G2c68@vars G2c69@count) (if (pair? G2c68@vars) (G2c66@f (cdr G2c68@vars) (+ G2c69@count '1)) (if (null? G2c68@vars) (values G2c69@count '=) (values G2c69@count '>=)))))) G2c66@f) G2c60@vars '0)) (lambda (G2c6c@G2c64 G2c6d@G2c65) ((lambda (G2c70@pred G2c71@count) (list (list 'primitive G2c70@pred) G2c5f@n (list 'quote G2c71@count))) G2c6d@G2c65 G2c6c@G2c64))))) (set! G2c43@build-apply (lambda (G2c56@ae G2c57@g G2c58@vars G2c59@exp) (list '(primitive apply) (G2bef@build-lambda G2c56@ae G2c58@vars G2c59@exp) G2c57@g))) (set! G2c45@expand-case-lambda (lambda (G2c46@ae G2c47@vars G2c48@exp*) ((lambda (G2c4c@g G2c4d@n) (list 'lambda G2c4c@g (G2bf3@build-let G2c46@ae (list G2c4d@n) (list (list '(primitive length) G2c4c@g)) ((letrec ((G2c50@f (lambda (G2c52@vars* G2c53@exp*) (if (null? G2c52@vars*) (G2c3f@build-error G2c46@ae) (list 'if (G2c41@build-pred G2c46@ae G2c4d@n (car G2c52@vars*)) (G2c43@build-apply G2c46@ae G2c4c@g (car G2c52@vars*) (car G2c53@exp*)) (G2c50@f (cdr G2c52@vars*) (cdr G2c53@exp*))))))) G2c50@f) G2c39@vars* G2c48@exp*)))) (gensym) (gensym)))) (if (= (length G2c3a@exp*) '1) (G2bef@build-lambda G2c38@ae (car G2c39@vars*) (car G2c3a@exp*)) (G2c45@expand-case-lambda G2c38@ae G2c39@vars* G2c3a@exp*)))) '#f '#f '#f '#f))) (set! G2bf3@build-let (lambda (G2c76@ae G2c77@lhs* G2c78@rhs* G2c79@body) (cons (G2bef@build-lambda G2c76@ae G2c77@lhs* G2c79@body) G2c78@rhs*))) (set! G2c25@build-sequence (lambda (G2c7e@ae G2c7f@exps) ((letrec ((G2c82@loop (lambda (G2c84@exps) (if (null? (cdr G2c84@exps)) (car G2c84@exps) (if (equal? (car G2c84@exps) (G2c27@build-void)) (G2c82@loop (cdr G2c84@exps)) (cons 'begin G2c84@exps)))))) G2c82@loop) G2c7f@exps))) (set! G2c27@build-void (lambda () '((primitive void)))) (set! G2c29@build-letrec (lambda (G2c86@ae G2c87@vars G2c88@val-exps G2c89@body-exp) (if (null? G2c87@vars) G2c89@body-exp (list 'letrec (map list G2c87@vars G2c88@val-exps) G2c89@body-exp)))) (set! G2c2b@build-letrec* (lambda (G2c8e@ae G2c8f@vars G2c90@val-exps G2c91@body-exp) (if (null? G2c8f@vars) G2c91@body-exp (G2bf3@build-let G2c8e@ae G2c8f@vars (map (lambda (G2c96@x) (list 'quote '#f)) G2c8f@vars) (G2c25@build-sequence G2c8e@ae (append (map (lambda (G2c98@lhs G2c99@rhs) (list 'set! G2c98@lhs G2c99@rhs)) G2c8f@vars G2c90@val-exps) (list G2c91@body-exp))))))) (set! G2c2d@build-library-letrec* (lambda (G2c9c@ae G2c9d@name G2c9e@vars G2c9f@locs G2ca0@val-exps G2ca1@body-exp) (list 'library-letrec* G2c9d@name (map list G2c9e@vars G2c9f@locs G2ca0@val-exps) G2ca1@body-exp))) (set! G2c2f@build-receive (lambda (G2ca8@ae G2ca9@vars G2caa@producer G2cab@body*) (begin (display '"************** in ") (cons 'receive (cons G2ca9@vars (cons G2caa@producer G2cab@body*)))))) (begin (set! G2cb9@G2c2f@build-receive G2c2f@build-receive) (set! G2cb8@G2c2d@build-library-letrec* G2c2d@build-library-letrec*) (set! G2cb7@G2c2b@build-letrec* G2c2b@build-letrec*) (set! G2cb6@G2c29@build-letrec G2c29@build-letrec) (set! G2cb5@G2c27@build-void G2c27@build-void) (set! G2cb4@G2c25@build-sequence G2c25@build-sequence) (set! G2cb3@G2bf3@build-let G2bf3@build-let) (set! G2cb2@G2bf1@build-case-lambda G2bf1@build-case-lambda) (set! G2cb1@G2bef@build-lambda G2bef@build-lambda) (set! G2cb0@G2b75@build-global-define G2b75@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cc8@set-cons G2cca@set-union G2ccf@top-mark* G2cd1@top-marked? G2cd3@gen-lexical G2cd5@gen-global G2cd7@gen-label G2cd9@gen-top-level-label G2cdb@gen-define-label+loc G2cdd@gen-define-label G2ce3@G2cde G2ce5@G2ce0 G2ce7@G2cdf G2cea@rib? G2cec@make-rib G2cee@rib-sym* G2cf0@rib-mark** G2cf2@rib-label* G2cf4@rib-sealed/freq G2cf6@rib-cache G2cf8@set-rib-sym*! G2cfa@set-rib-mark**! G2cfc@set-rib-label*! G2cfe@set-rib-sealed/freq! G2d00@set-rib-cache! G2d02@make-empty-rib G2d04@make-cache-rib G2d06@find-label G2d08@extend-rib! G2d0a@extend-rib/nc! G2d0c@make-rib-map G2d0e@seal-rib! G2d10@unseal-rib! G2d12@make-full-rib G2d18@G2d13 G2d1a@G2d15 G2d1c@G2d14 G2d1f@stx? G2d21@make-stx G2d23@stx-expr G2d25@stx-mark* G2d27@stx-subst* G2d29@stx-ae* G2d2b@set-stx-expr! G2d2d@set-stx-mark*! G2d2f@set-stx-subst*! G2d31@set-stx-ae*! G2d33@rp G2d35@datum->stx G2d37@gen-mark G2d39@anti-mark G2d3b@anti-mark? G2d3d@join-wraps G2d3f@mkstx G2d41@add-mark G2d43@add-subst G2d45@syntax-kind? G2d47@syntax-vector->list G2d49@syntax-pair? G2d4b@syntax-vector? G2d4d@syntax-null? G2d4f@syntax-list? G2d51@syntax-car G2d53@syntax-cdr G2d55@syntax->list G2d57@id? G2d59@id->sym G2d5b@same-marks? G2d5d@bound-id=? G2d5f@free-id=? G2d61@valid-bound-ids? G2d63@distinct-bound-ids? G2d65@bound-id-member? G2d67@self-evaluating? G2d69@strip-annotations G2d6b@strip G2d6d@stx->datum G2d6f@same-marks*? G2d71@id->label G2d73@id->real-label G2d75@label->binding G2d77@make-binding G2d79@binding-type G2d7b@binding-value G2d7d@raise-unbound-error G2d7f@syntax-type G2d8f@sanitize-binding G2d91@make-variable-transformer G2d93@variable-transformer? G2d95@variable-transformer-procedure G2d97@make-eval-transformer G2eda@parse-define G2edc@parse-define-syntax G2ede@scheme-stx-hashtable G2ee0@scheme-stx G2ee2@lexical-var G2ee4@lexical-mutable? G2ee6@set-lexical-mutable! G2ee8@add-lexical G2eea@add-lexicals G2eec@letrec-helper G2eee@letrec-transformer G2ef0@letrec*-transformer G2ef2@fluid-let-syntax-transformer G2ef4@type-descriptor-transformer G2ef6@record-type-descriptor-transformer G2ef8@record-constructor-descriptor-transformer G2efa@when-macro G2efc@unless-macro G2efe@if-transformer G2f00@and-transformer G2f02@or-transformer G2f04@case-macro G2f06@quote-transformer G2f08@case-lambda-transformer G2f0a@lambda-transformer G2f0c@bless G2f0e@with-syntax-macro G2f10@invalid-fmls-error G2f12@let-macro G2f14@let-values-macro G2f16@let*-values-macro G2f18@trace-lambda-macro G2f1a@trace-define-macro G2f1c@trace-define-syntax-macro G2f1e@trace-let/rec-syntax G2f20@trace-let-syntax-macro G2f22@trace-letrec-syntax-macro G2f24@guard-macro G2f26@define-enumeration-macro G2f28@time-macro G2f2a@delay-macro G2f2c@assert-macro G2f2e@endianness-macro G2f30@identifier-syntax-macro G2f32@do-macro G2f34@let*-macro G2f36@or-macro G2f38@and-macro G2f3a@cond-macro G2f3c@do-include G2f3e@include-macro G2f40@include-into-macro G2f42@syntax-rules-macro G2f44@quasiquote-macro G2f46@quasisyntax-macro G2f48@define-struct-macro G2f4a@define-record-type-macro G2f4c@define-condition-type-macro G2f4e@incorrect-usage-macro G2f50@parameterize-macro G2f52@foreign-call-transformer G2f54@convert-pattern G2f56@syntax-dispatch G2f58@ellipsis? G2f5a@underscore? G2f5c@verify-literals G2f5e@syntax-case-transformer G2f60@ellipsis-map G2f62@syntax-transformer G2f64@core-macro-transformer G2f66@file-options-macro G2f68@symbol-macro G2f6a@macro-transformer G2f6c@local-macro-transformer G2f6e@do-macro-call G2f70@chi-macro G2f72@chi-local-macro G2f74@chi-global-macro G2f76@chi-expr* G2f78@chi-application G2f7a@chi-expr G2f7c@chi-set! G2f7e@verify-formals G2f80@chi-lambda-clause G2f82@chi-lambda-clause* G2f84@chi-defun G2f86@chi-rhs G2f88@expand-interaction-rhs*/init* G2f8a@chi-rhs* G2f8c@find-bound=? G2f8e@find-dups G2f90@chi-internal G2f92@parse-module G2f98@G2f93 G2f9a@G2f95 G2f9c@G2f94 G2f9f@module-interface? G2fa1@make-module-interface G2fa3@module-interface-first-mark G2fa5@module-interface-exp-id-vec G2fa7@module-interface-exp-lab-vec G2fa9@set-module-interface-first-mark! G2fab@set-module-interface-exp-id-vec! G2fad@set-module-interface-exp-lab-vec! G2faf@module-interface-exp-id* G2fb1@chi-internal-module G2fb3@chi-body* G2fb5@expand-transformer G2fb7@parse-exports G2fb9@parse-library-name G2fbb@parse-library G2fbd@parse-import-spec* G2fbf@make-top-rib G2fc1@make-collector G2fc3@inv-collector G2fc5@vis-collector G2fc7@imp-collector G2fc9@chi-library-internal G2fcb@chi-interaction-expr G2fcd@library-body-expander G2fcf@core-library-expander G2fd1@parse-top-level-program G2fd3@top-level-expander G2fd9@G2fd4 G2fdb@G2fd6 G2fdd@G2fd5 G2fe0@env? G2fe2@make-env G2fe4@env-names G2fe6@env-labels G2fe8@env-itc G2fea@set-env-names! G2fec@set-env-labels! G2fee@set-env-itc! G2ff0@rp G2ff6@G2ff1 G2ff8@G2ff3 G2ffa@G2ff2 G2ffd@interaction-env? G2fff@make-interaction-env G3001@interaction-env-rib G3003@interaction-env-r G3005@interaction-env-locs G3007@set-interaction-env-rib! G3009@set-interaction-env-r! G300b@set-interaction-env-locs! G300d@rp G300f@interaction-environment-symbols G3011@environment-bindings G3013@parse-binding G3015@environment? G3017@environment-symbols G3019@environment G301b@null-environment G301d@scheme-report-environment G301f@expand G3021@eval G3023@library-expander G3025@boot-library-expand G3027@rev-map-append G3029@build-exports G302b@make-export-subst G302d@make-export-env/macros G302f@generate-temporaries G3031@free-identifier=? G3033@bound-identifier=? G3035@make-source-condition G3037@extract-position-condition G3039@expression-position G303b@assertion-error G303d@syntax-error G303f@syntax-violation* G3041@syntax-violation G3043@identifier? G3045@datum->syntax G3047@syntax->datum G3049@compile-r6rs-top-level G304b@pre-compile-r6rs-top-level G304d@interaction-environment G304f@top-level-context) (begin (set! G2cc8@set-cons (lambda (G3050@x G3051@ls) (if (memq G3050@x G3051@ls) G3051@ls (cons G3050@x G3051@ls)))) (set! G2cca@set-union (lambda (G3054@ls1 G3055@ls2) (if (null? G3054@ls1) G3055@ls2 (if (memq (car G3054@ls1) G3055@ls2) (G2cca@set-union (cdr G3054@ls1) G3055@ls2) (cons (car G3054@ls1) (G2cca@set-union (cdr G3054@ls1) G3055@ls2)))))) (set! G2ccf@top-mark* '(top)) (set! G2cd1@top-marked? (lambda (G3058@m*) (memq 'top G3058@m*))) (set! G2cd3@gen-lexical (lambda (G305a@sym) (if (symbol? G305a@sym) (gensym G305a@sym) (if (G2d1f@stx? G305a@sym) (G2cd3@gen-lexical (G2d59@id->sym G305a@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G305a@sym))))) (set! G2cd5@gen-global (lambda (G305c@x) (G2cd3@gen-lexical G305c@x))) (set! G2cd7@gen-label (lambda (G305e@_) (gensym))) (set! G2cd9@gen-top-level-label (lambda (G3060@id G3061@rib) ((lambda (G3065@find) (begin (set! G3065@find (lambda (G3070@sym G3071@mark* G3072@sym* G3073@mark** G3074@label*) (and (pair? G3072@sym*) (if (and (eq? G3070@sym (car G3072@sym*)) (G2d5b@same-marks? G3071@mark* (car G3073@mark**))) (car G3074@label*) (G3065@find G3070@sym G3071@mark* (cdr G3072@sym*) (cdr G3073@mark**) (cdr G3074@label*)))))) ((lambda (G3066@sym G3067@mark*) ((lambda (G306a@sym*) ((lambda (G306c@t) (if G306c@t ((lambda (G306e@label) (if (G2b6d@G2a13@imported-label->binding G306e@label) (gensym) G306e@label)) G306c@t) (gensym))) (and (memq G3066@sym (G2cee@rib-sym* G3061@rib)) (G3065@find G3066@sym G3067@mark* G306a@sym* (G2cf0@rib-mark** G3061@rib) (G2cf2@rib-label* G3061@rib))))) (G2cee@rib-sym* G3061@rib))) (G2d59@id->sym G3060@id) (G2d25@stx-mark* G3060@id)))) '#f))) (set! G2cdb@gen-define-label+loc (lambda (G307a@id G307b@rib) ((lambda (G307e@t) (if G307e@t ((lambda (G3080@env) ((lambda (G3082@label G3083@locs) (values G3082@label ((lambda (G3086@t) (if G3086@t (cdr G3086@t) ((lambda (G3088@loc) (begin (G300b@set-interaction-env-locs! G3080@env (cons (cons G3082@label G3088@loc) G3083@locs)) G3088@loc)) (G2cd3@gen-lexical G307a@id)))) (assq G3082@label G3083@locs)))) (G2cd9@gen-top-level-label G307a@id G307b@rib) (G3005@interaction-env-locs G3080@env))) G307e@t) (values (gensym) (G2cd3@gen-lexical G307a@id)))) (G304f@top-level-context)))) (set! G2cdd@gen-define-label (lambda (G308a@id G308b@rib) (if (G304f@top-level-context) (G2cd9@gen-top-level-label G308a@id G308b@rib) (gensym)))) (set! G2ce3@G2cde (make-record-type-descriptor 'rib '#f 'G2ce1 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ce5@G2ce0 '#f) (set! G2ce7@G2cdf (make-record-constructor-descriptor G2ce3@G2cde '#f G2ce5@G2ce0)) (set! G2cea@rib? (record-predicate G2ce3@G2cde)) (set! G2cec@make-rib (record-constructor G2ce7@G2cdf)) (set! G2cee@rib-sym* (record-accessor G2ce3@G2cde '0)) (set! G2cf0@rib-mark** (record-accessor G2ce3@G2cde '1)) (set! G2cf2@rib-label* (record-accessor G2ce3@G2cde '2)) (set! G2cf4@rib-sealed/freq (record-accessor G2ce3@G2cde '3)) (set! G2cf6@rib-cache (record-accessor G2ce3@G2cde '4)) (set! G2cf8@set-rib-sym*! (record-mutator G2ce3@G2cde '0)) (set! G2cfa@set-rib-mark**! (record-mutator G2ce3@G2cde '1)) (set! G2cfc@set-rib-label*! (record-mutator G2ce3@G2cde '2)) (set! G2cfe@set-rib-sealed/freq! (record-mutator G2ce3@G2cde '3)) (set! G2d00@set-rib-cache! (record-mutator G2ce3@G2cde '4)) (set! G2d02@make-empty-rib (lambda () (G2cec@make-rib '() '() '() '#f '#f))) (set! G2d04@make-cache-rib (lambda () (G2cec@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d06@find-label (lambda (G308e@rib G308f@sym G3090@mark*) ((lambda (G3094@ht) (and G3094@ht ((lambda (G3096@cv) ((lambda (G3098@t) (if G3098@t (cdr G3098@t) '#f)) (and G3096@cv (assp (lambda (G309a@m) (G2d5b@same-marks? G3090@mark* G309a@m)) G3096@cv)))) (hashtable-ref G3094@ht G308f@sym '#f)))) (G2cf6@rib-cache G308e@rib)))) (set! G2d08@extend-rib! (lambda (G309c@rib G309d@id G309e@label) ((lambda (G30a3@find) (begin (set! G30a3@find (lambda (G30b4@sym G30b5@mark* G30b6@sym* G30b7@mark** G30b8@label*) (and (pair? G30b6@sym*) (if (and (eq? G30b4@sym (car G30b6@sym*)) (G2d5b@same-marks? G30b5@mark* (car G30b7@mark**))) G30b8@label* (G30a3@find G30b4@sym G30b5@mark* (cdr G30b6@sym*) (cdr G30b7@mark**) (cdr G30b8@label*)))))) (begin (if (G2cf4@rib-sealed/freq G309c@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G309c@rib) (void)) ((lambda (G30a4@sym G30a5@mark*) ((lambda (G30a8@sym*) ((lambda (G30aa@t) (if G30aa@t ((lambda (G30ac@p) (if (not (eq? G309e@label G30ac@p)) (G3041@syntax-violation '#f '"multiple definitions of identifier" G309d@id) (void))) G30aa@t) ((lambda (G30ae@t) (if G30ae@t ((lambda (G30b0@p) (if (not (eq? G309e@label (car G30b0@p))) (if (G304f@top-level-context) (set-car! G30b0@p G309e@label) (G3041@syntax-violation '#f '"multiple definitions of identifier" G309d@id)) (void))) G30ae@t) (begin (if (G2cf6@rib-cache G309c@rib) (hashtable-update! (G2cf6@rib-cache G309c@rib) G30a4@sym (lambda (G30b2@e) (cons (cons G30a5@mark* G309e@label) G30b2@e)) '()) (void)) (G2cf8@set-rib-sym*! G309c@rib (cons G30a4@sym G30a8@sym*)) (G2cfa@set-rib-mark**! G309c@rib (cons G30a5@mark* (G2cf0@rib-mark** G309c@rib))) (G2cfc@set-rib-label*! G309c@rib (cons G309e@label (G2cf2@rib-label* G309c@rib)))))) (and (memq G30a4@sym (G2cee@rib-sym* G309c@rib)) (G30a3@find G30a4@sym G30a5@mark* G30a8@sym* (G2cf0@rib-mark** G309c@rib) (G2cf2@rib-label* G309c@rib)))))) (G2d06@find-label G309c@rib G30a4@sym G30a5@mark*))) (G2cee@rib-sym* G309c@rib))) (G2d59@id->sym G309d@id) (G2d25@stx-mark* G309d@id))))) '#f))) (set! G2d0a@extend-rib/nc! (lambda (G30be@rib G30bf@id G30c0@label) ((lambda (G30c4@sym G30c5@mark*) ((lambda (G30c8@sym*) (begin (if (G2cf6@rib-cache G30be@rib) (hashtable-update! (G2cf6@rib-cache G30be@rib) G30c4@sym (lambda (G30ca@e) (cons (cons G30c5@mark* G30c0@label) G30ca@e)) '()) (void)) (G2cf8@set-rib-sym*! G30be@rib (cons G30c4@sym G30c8@sym*)) (G2cfa@set-rib-mark**! G30be@rib (cons G30c5@mark* (G2cf0@rib-mark** G30be@rib))) (G2cfc@set-rib-label*! G30be@rib (cons G30c0@label (G2cf2@rib-label* G30be@rib))))) (G2cee@rib-sym* G30be@rib))) (G2d59@id->sym G30bf@id) (G2d25@stx-mark* G30bf@id)))) (set! G2d0c@make-rib-map (lambda (G30cc@sym*) ((lambda (G30ce@ht) ((letrec ((G30d0@f (lambda (G30d2@i G30d3@sym*) (if (null? G30d3@sym*) G30ce@ht (begin (hashtable-update! G30ce@ht (car G30d3@sym*) (lambda (G30d6@x) (cons G30d2@i G30d6@x)) '()) (G30d0@f (+ G30d2@i '1) (cdr G30d3@sym*))))))) G30d0@f) '0 G30cc@sym*)) (make-eq-hashtable)))) (set! G2d0e@seal-rib! (lambda (G30d8@rib) ((lambda (G30da@sym*) (if (not (null? G30da@sym*)) (begin (G2cf8@set-rib-sym*! G30d8@rib (list->vector G30da@sym*)) (G2cfa@set-rib-mark**! G30d8@rib (list->vector (G2cf0@rib-mark** G30d8@rib))) (G2cfc@set-rib-label*! G30d8@rib (list->vector (G2cf2@rib-label* G30d8@rib))) (G2cfe@set-rib-sealed/freq! G30d8@rib (G2d0c@make-rib-map G30da@sym*))) (void))) (G2cee@rib-sym* G30d8@rib)))) (set! G2d10@unseal-rib! (lambda (G30dc@rib) (if (G2cf4@rib-sealed/freq G30dc@rib) (begin (G2cfe@set-rib-sealed/freq! G30dc@rib '#f) (G2cf8@set-rib-sym*! G30dc@rib (vector->list (G2cee@rib-sym* G30dc@rib))) (G2cfa@set-rib-mark**! G30dc@rib (vector->list (G2cf0@rib-mark** G30dc@rib))) (G2cfc@set-rib-label*! G30dc@rib (vector->list (G2cf2@rib-label* G30dc@rib)))) (void)))) (set! G2d12@make-full-rib (lambda (G30de@id* G30df@label*) ((lambda (G30e2@r) (begin (G2d0e@seal-rib! G30e2@r) G30e2@r)) (G2cec@make-rib (map G2d59@id->sym G30de@id*) (map G2d25@stx-mark* G30de@id*) G30df@label* '#f '#f)))) (set! G2d18@G2d13 (make-record-type-descriptor 'stx '#f 'G2d16 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d1a@G2d15 '#f) (set! G2d1c@G2d14 (make-record-constructor-descriptor G2d18@G2d13 '#f G2d1a@G2d15)) (set! G2d1f@stx? (record-predicate G2d18@G2d13)) (set! G2d21@make-stx (record-constructor G2d1c@G2d14)) (set! G2d23@stx-expr (record-accessor G2d18@G2d13 '0)) (set! G2d25@stx-mark* (record-accessor G2d18@G2d13 '1)) (set! G2d27@stx-subst* (record-accessor G2d18@G2d13 '2)) (set! G2d29@stx-ae* (record-accessor G2d18@G2d13 '3)) (set! G2d2b@set-stx-expr! (record-mutator G2d18@G2d13 '0)) (set! G2d2d@set-stx-mark*! (record-mutator G2d18@G2d13 '1)) (set! G2d2f@set-stx-subst*! (record-mutator G2d18@G2d13 '2)) (set! G2d31@set-stx-ae*! (record-mutator G2d18@G2d13 '3)) (set! G2d33@rp (G28f0@G2823@make-record-printer 'stx (lambda (G30e4@x G30e5@p G30e6@wr) (begin (display '"#<syntax " G30e5@p) (write (G2d6d@stx->datum G30e4@x) G30e5@p) ((lambda (G30ea@expr) (if (G28e8@G2813@annotation? G30ea@expr) ((lambda (G30ec@src) (if (pair? G30ec@src) (begin (display '" [" G30e5@p) (display (cdr G30ec@src) G30e5@p) (display '" of " G30e5@p) (display (car G30ec@src) G30e5@p) (display '"]" G30e5@p)) (void))) (G28e9@G2815@annotation-source G30ea@expr)) (void))) (G2d23@stx-expr G30e4@x)) (display '">" G30e5@p))))) (set! G2d35@datum->stx (lambda (G30ee@id G30ef@datum) (G2d21@make-stx G30ef@datum (G2d25@stx-mark* G30ee@id) (G2d27@stx-subst* G30ee@id) (G2d29@stx-ae* G30ee@id)))) (set! G2d37@gen-mark (lambda () (string '#\m))) (set! G2d39@anti-mark '#f) (set! G2d3b@anti-mark? not) (set! G2d3d@join-wraps (lambda (G30f2@m1* G30f3@s1* G30f4@ae1* G30f5@e) ((lambda (G30fb@cancel) (begin (set! G30fb@cancel (lambda (G3102@ls1 G3103@ls2) ((letrec ((G3106@f (lambda (G3108@x G3109@ls1) (if (null? G3109@ls1) (cdr G3103@ls2) (cons G3108@x (G3106@f (car G3109@ls1) (cdr G3109@ls1))))))) G3106@f) (car G3102@ls1) (cdr G3102@ls1)))) ((lambda (G30fc@m2* G30fd@s2* G30fe@ae2*) (if (and (not (null? G30f2@m1*)) (not (null? G30fc@m2*)) (G2d3b@anti-mark? (car G30fc@m2*))) (values (G30fb@cancel G30f2@m1* G30fc@m2*) (G30fb@cancel G30f3@s1* G30fd@s2*) (G30fb@cancel G30f4@ae1* G30fe@ae2*)) (values (append G30f2@m1* G30fc@m2*) (append G30f3@s1* G30fd@s2*) (append G30f4@ae1* G30fe@ae2*)))) (G2d25@stx-mark* G30f5@e) (G2d27@stx-subst* G30f5@e) (G2d29@stx-ae* G30f5@e)))) '#f))) (set! G2d3f@mkstx (lambda (G310c@e G310d@m* G310e@s* G310f@ae*) (if (and (G2d1f@stx? G310c@e) (not (G2cd1@top-marked? G310d@m*))) (call-with-values (lambda () (G2d3d@join-wraps G310d@m* G310e@s* G310f@ae* G310c@e)) (lambda (G3117@G3114 G3118@G3115 G3119@G3116) ((lambda (G311d@ae* G311e@s* G311f@m*) (G2d21@make-stx (G2d23@stx-expr G310c@e) G311f@m* G311e@s* G311d@ae*)) G3119@G3116 G3118@G3115 G3117@G3114))) (G2d21@make-stx G310c@e G310d@m* G310e@s* G310f@ae*)))) (set! G2d41@add-mark (lambda (G3123@m G3124@e G3125@ae) (G2d3f@mkstx G3124@e (list G3123@m) '(shift) (list G3125@ae)))) (set! G2d43@add-subst (lambda (G3129@subst G312a@e) (G2d3f@mkstx G312a@e '() (list G3129@subst) '()))) (set! G2d45@syntax-kind? (lambda (G312d@x G312e@p?) (if (G2d1f@stx? G312d@x) (G2d45@syntax-kind? (G2d23@stx-expr G312d@x) G312e@p?) (if (G28e8@G2813@annotation? G312d@x) (G2d45@syntax-kind? (G28ea@G2817@annotation-expression G312d@x) G312e@p?) (G312e@p? G312d@x))))) (set! G2d47@syntax-vector->list (lambda (G3131@x) (if (G2d1f@stx? G3131@x) ((lambda (G3133@ls G3134@m* G3135@s* G3136@ae*) (map (lambda (G313b@x) (G2d3f@mkstx G313b@x G3134@m* G3135@s* G3136@ae*)) G3133@ls)) (G2d47@syntax-vector->list (G2d23@stx-expr G3131@x)) (G2d25@stx-mark* G3131@x) (G2d27@stx-subst* G3131@x) (G2d29@stx-ae* G3131@x)) (if (G28e8@G2813@annotation? G3131@x) (G2d47@syntax-vector->list (G28ea@G2817@annotation-expression G3131@x)) (if (vector? G3131@x) (vector->list G3131@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3131@x)))))) (set! G2d49@syntax-pair? (lambda (G313d@x) (G2d45@syntax-kind? G313d@x pair?))) (set! G2d4b@syntax-vector? (lambda (G313f@x) (G2d45@syntax-kind? G313f@x vector?))) (set! G2d4d@syntax-null? (lambda (G3141@x) (G2d45@syntax-kind? G3141@x null?))) (set! G2d4f@syntax-list? (lambda (G3143@x) (or (G2d4d@syntax-null? G3143@x) (and (G2d49@syntax-pair? G3143@x) (G2d4f@syntax-list? (G2d53@syntax-cdr G3143@x)))))) (set! G2d51@syntax-car (lambda (G3145@x) (if (G2d1f@stx? G3145@x) (G2d3f@mkstx (G2d51@syntax-car (G2d23@stx-expr G3145@x)) (G2d25@stx-mark* G3145@x) (G2d27@stx-subst* G3145@x) (G2d29@stx-ae* G3145@x)) (if (G28e8@G2813@annotation? G3145@x) (G2d51@syntax-car (G28ea@G2817@annotation-expression G3145@x)) (if (pair? G3145@x) (car G3145@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3145@x)))))) (set! G2d53@syntax-cdr (lambda (G3147@x) (if (G2d1f@stx? G3147@x) (G2d3f@mkstx (G2d53@syntax-cdr (G2d23@stx-expr G3147@x)) (G2d25@stx-mark* G3147@x) (G2d27@stx-subst* G3147@x) (G2d29@stx-ae* G3147@x)) (if (G28e8@G2813@annotation? G3147@x) (G2d53@syntax-cdr (G28ea@G2817@annotation-expression G3147@x)) (if (pair? G3147@x) (cdr G3147@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3147@x)))))) (set! G2d55@syntax->list (lambda (G3149@x) (if (G2d49@syntax-pair? G3149@x) (cons (G2d51@syntax-car G3149@x) (G2d55@syntax->list (G2d53@syntax-cdr G3149@x))) (if (G2d4d@syntax-null? G3149@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3149@x))))) (set! G2d57@id? (lambda (G314b@x) (and (G2d1f@stx? G314b@x) ((lambda (G314d@expr) (symbol? (if (G28e8@G2813@annotation? G314d@expr) (G28e7@G2811@annotation-stripped G314d@expr) G314d@expr))) (G2d23@stx-expr G314b@x))))) (set! G2d59@id->sym (lambda (G314f@x) (begin (if (not (G2d1f@stx? G314f@x)) (error 'id->sym '"BUG in ikarus: not an id" G314f@x) (void)) ((lambda (G3151@expr) ((lambda (G3153@sym) (if (symbol? G3153@sym) G3153@sym (error 'id->sym '"BUG in ikarus: not an id" G314f@x))) (if (G28e8@G2813@annotation? G3151@expr) (G28e7@G2811@annotation-stripped G3151@expr) G3151@expr))) (G2d23@stx-expr G314f@x))))) (set! G2d5b@same-marks? (lambda (G3155@x G3156@y) (or (and (null? G3155@x) (null? G3156@y)) (and (pair? G3155@x) (pair? G3156@y) (eq? (car G3155@x) (car G3156@y)) (G2d5b@same-marks? (cdr G3155@x) (cdr G3156@y)))))) (set! G2d5d@bound-id=? (lambda (G3159@x G315a@y) (and (eq? (G2d59@id->sym G3159@x) (G2d59@id->sym G315a@y)) (G2d5b@same-marks? (G2d25@stx-mark* G3159@x) (G2d25@stx-mark* G315a@y))))) (set! G2d5f@free-id=? (lambda (G315d@i G315e@j) ((lambda (G3161@t0 G3162@t1) (if (or G3161@t0 G3162@t1) (eq? G3161@t0 G3162@t1) (eq? (G2d59@id->sym G315d@i) (G2d59@id->sym G315e@j)))) (G2d73@id->real-label G315d@i) (G2d73@id->real-label G315e@j)))) (set! G2d61@valid-bound-ids? (lambda (G3165@id*) (and (for-all G2d57@id? G3165@id*) (G2d63@distinct-bound-ids? G3165@id*)))) (set! G2d63@distinct-bound-ids? (lambda (G3167@id*) (or (null? G3167@id*) (and (not (G2d65@bound-id-member? (car G3167@id*) (cdr G3167@id*))) (G2d63@distinct-bound-ids? (cdr G3167@id*)))))) (set! G2d65@bound-id-member? (lambda (G3169@id G316a@id*) (and (pair? G316a@id*) (or (G2d5d@bound-id=? G3169@id (car G316a@id*)) (G2d65@bound-id-member? G3169@id (cdr G316a@id*)))))) (set! G2d67@self-evaluating? (lambda (G316d@x) (or (number? G316d@x) (string? G316d@x) (char? G316d@x) (boolean? G316d@x) (regexp? G316d@x) (bytevector? G316d@x)))) (set! G2d69@strip-annotations (lambda (G316f@x) (if (pair? G316f@x) (cons (G2d69@strip-annotations (car G316f@x)) (G2d69@strip-annotations (cdr G316f@x))) (if (vector? G316f@x) (vector-map G2d69@strip-annotations G316f@x) (if (G28e8@G2813@annotation? G316f@x) (G28e7@G2811@annotation-stripped G316f@x) G316f@x))))) (set! G2d6b@strip (lambda (G3171@x G3172@m*) (if (G2cd1@top-marked? G3172@m*) (if (or (G28e8@G2813@annotation? G3171@x) (and (pair? G3171@x) (G28e8@G2813@annotation? (car G3171@x))) (and (vector? G3171@x) (> (vector-length G3171@x) '0) (G28e8@G2813@annotation? (vector-ref G3171@x '0)))) (G2d69@strip-annotations G3171@x) G3171@x) ((letrec ((G3175@f (lambda (G3177@x) (if (G2d1f@stx? G3177@x) (G2d6b@strip (G2d23@stx-expr G3177@x) (G2d25@stx-mark* G3177@x)) (if (G28e8@G2813@annotation? G3177@x) (G28e7@G2811@annotation-stripped G3177@x) (if (pair? G3177@x) ((lambda (G3179@a G317a@d) (if (and (eq? G3179@a (car G3177@x)) (eq? G317a@d (cdr G3177@x))) G3177@x (cons G3179@a G317a@d))) (G3175@f (car G3177@x)) (G3175@f (cdr G3177@x))) (if (vector? G3177@x) ((lambda (G317d@old) ((lambda (G317f@new) (if (for-all eq? G317d@old G317f@new) G3177@x (list->vector G317f@new))) (map G3175@f G317d@old))) (vector->list G3177@x)) G3177@x))))))) G3175@f) G3171@x)))) (set! G2d6d@stx->datum (lambda (G3181@x) (G2d6b@strip G3181@x '()))) (set! G2d6f@same-marks*? (lambda (G3183@mark* G3184@mark** G3185@si) (if (null? G3185@si) '#f (if (G2d5b@same-marks? G3183@mark* (vector-ref G3184@mark** (car G3185@si))) (car G3185@si) (G2d6f@same-marks*? G3183@mark* G3184@mark** (cdr G3185@si)))))) (set! G2d71@id->label (lambda (G3189@id) (or (G2d73@id->real-label G3189@id) ((lambda (G318b@t) (if G318b@t ((lambda (G318d@env) ((lambda (G318f@rib) (call-with-values (lambda () (G2cdb@gen-define-label+loc G3189@id G318f@rib)) (lambda (G3193@G3191 G3194@G3192) ((lambda (G3197@loc_ G3198@lab) (begin (G2d08@extend-rib! G318f@rib G3189@id G3198@lab) G3198@lab)) G3194@G3192 G3193@G3191)))) (G3001@interaction-env-rib G318d@env))) G318b@t) '#f)) (G304f@top-level-context))))) (set! G2d73@id->real-label (lambda (G319b@id) ((lambda (G319d@sym) ((letrec ((G319f@search (lambda (G31a1@subst* G31a2@mark*) (if (null? G31a1@subst*) '#f (if (eq? (car G31a1@subst*) 'shift) (G319f@search (cdr G31a1@subst*) (cdr G31a2@mark*)) ((lambda (G31a5@rib) ((lambda (G31a7@t) (if G31a7@t ((lambda (G31a9@ht) ((lambda (G31ab@si) ((lambda (G31ad@i) (if G31ad@i (vector-ref (G2cf2@rib-label* G31a5@rib) G31ad@i) (G319f@search (cdr G31a1@subst*) G31a2@mark*))) (and G31ab@si (G2d6f@same-marks*? G31a2@mark* (G2cf0@rib-mark** G31a5@rib) (reverse G31ab@si))))) (hashtable-ref G31a9@ht G319d@sym '#f))) G31a7@t) (or (G2d06@find-label G31a5@rib G319d@sym G31a2@mark*) ((letrec ((G31af@f (lambda (G31b1@sym* G31b2@mark** G31b3@label*) (if (null? G31b1@sym*) (G319f@search (cdr G31a1@subst*) G31a2@mark*) (if (and (eq? (car G31b1@sym*) G319d@sym) (G2d5b@same-marks? (car G31b2@mark**) G31a2@mark*)) (car G31b3@label*) (G31af@f (cdr G31b1@sym*) (cdr G31b2@mark**) (cdr G31b3@label*))))))) G31af@f) (G2cee@rib-sym* G31a5@rib) (G2cf0@rib-mark** G31a5@rib) (G2cf2@rib-label* G31a5@rib))))) (G2cf4@rib-sealed/freq G31a5@rib))) (car G31a1@subst*))))))) G319f@search) (G2d27@stx-subst* G319b@id) (G2d25@stx-mark* G319b@id))) (G2d59@id->sym G319b@id)))) (set! G2d75@label->binding (lambda (G31b7@x G31b8@r) ((lambda (G31bb@t) (if G31bb@t ((lambda (G31bd@b) (if (and (pair? G31bd@b) (eq? (car G31bd@b) '$core-rtd)) (cons '$rtd (map G2f0c@bless (cdr G31bd@b))) (if (and (pair? G31bd@b) (eq? (car G31bd@b) 'global-rtd)) ((lambda (G31bf@lib G31c0@loc) (cons '$rtd (symbol-value G31c0@loc))) (cadr G31bd@b) (cddr G31bd@b)) G31bd@b))) G31bb@t) ((lambda (G31c3@t) (if G31c3@t (cdr G31c3@t) ((lambda (G31c5@t) (if G31c5@t ((lambda (G31c7@env) ((lambda (G31c9@t) (if G31c9@t ((lambda (G31cb@p) (cons* 'lexical (cdr G31cb@p) '#f)) G31c9@t) '(displaced-lexical . #f))) (assq G31b7@x (G3005@interaction-env-locs G31c7@env)))) G31c5@t) '(displaced-lexical . #f))) (G304f@top-level-context)))) (assq G31b7@x G31b8@r)))) (G2b6d@G2a13@imported-label->binding G31b7@x)))) (set! G2d77@make-binding cons) (set! G2d79@binding-type car) (set! G2d7b@binding-value cdr) (set! G2d7d@raise-unbound-error (lambda (G31cd@id) (G303f@syntax-violation* '#f '"unbound identifier" G31cd@id (G4c79@G4ac3@make-undefined-violation)))) (set! G2d7f@syntax-type (lambda (G31cf@e G31d0@r) (if (G2d57@id? G31cf@e) ((lambda (G31d3@id) ((lambda (G31d5@label) ((lambda (G31d7@b) ((lambda (G31d9@type) ((lambda () (begin (if (not G31d5@label) (G2d7d@raise-unbound-error G31d3@id) (void)) ((lambda (G31db@t) (if (memv G31db@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31d9@type (G2d7b@binding-value G31d7@b) G31d3@id) (values 'other '#f '#f))) G31d9@type))))) (G2d79@binding-type G31d7@b))) (G2d75@label->binding G31d5@label G31d0@r))) (G2d71@id->label G31d3@id))) G31cf@e) (if (G2d49@syntax-pair? G31cf@e) ((lambda (G31dd@id) (if (G2d57@id? G31dd@id) ((lambda (G31df@label) ((lambda (G31e1@b) ((lambda (G31e3@type) ((lambda () (begin (if (not G31df@label) (G2d7d@raise-unbound-error G31dd@id) (void)) ((lambda (G31e5@t) (if (memv G31e5@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31e3@type (G2d7b@binding-value G31e1@b) G31dd@id) (values 'call '#f '#f))) G31e3@type))))) (G2d79@binding-type G31e1@b))) (G2d75@label->binding G31df@label G31d0@r))) (G2d71@id->label G31dd@id)) (values 'call '#f '#f))) (G2d51@syntax-car G31cf@e)) ((lambda (G31e7@d) (if (G2d67@self-evaluating? G31e7@d) (values 'constant G31e7@d '#f) (values 'other '#f '#f))) (G2d6d@stx->datum G31cf@e)))))) (set! G2d8f@sanitize-binding (lambda (G31e9@x G31ea@src) (if (procedure? G31e9@x) (cons* 'local-macro G31e9@x G31ea@src) (if (and (pair? G31e9@x) (eq? (car G31e9@x) 'macro!) (procedure? (cdr G31e9@x))) (cons* 'local-macro! (cdr G31e9@x) G31ea@src) (if (and (pair? G31e9@x) (eq? (car G31e9@x) '$rtd)) G31e9@x (assertion-violation 'expand '"invalid transformer" G31e9@x)))))) (set! G2d91@make-variable-transformer (lambda (G31ed@x) (if (procedure? G31ed@x) (cons 'macro! G31ed@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31ed@x)))) (set! G2d93@variable-transformer? (lambda (G31ef@x) (and (pair? G31ef@x) (eq? (car G31ef@x) 'macro!) (procedure? (cdr G31ef@x))))) (set! G2d95@variable-transformer-procedure (lambda (G31f1@x) (if (G2d93@variable-transformer? G31f1@x) (cdr G31f1@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31f1@x)))) (set! G2d97@make-eval-transformer (lambda (G31f3@x) (G2d8f@sanitize-binding (eval-core (G2947@G28ff@expanded->core G31f3@x)) G31f3@x))) (set! G2eda@parse-define (lambda (G31f5@x) ((lambda (G31f7@t) ((lambda (G31f9@ls/false) (if (and G31f9@ls/false (apply (lambda (G31fb@id G31fc@fmls G31fd@b G31fe@b*) (G2d57@id? G31fb@id)) G31f9@ls/false)) (apply (lambda (G3203@id G3204@fmls G3205@b G3206@b*) (begin (G2f7e@verify-formals G3204@fmls G31f5@x) (values G3203@id (cons 'defun (cons G3204@fmls (cons G3205@b G3206@b*)))))) G31f9@ls/false) ((lambda (G320b@t) ((lambda (G320d@ls/false) (if (and G320d@ls/false (apply (lambda (G320f@id G3210@val) (G2d57@id? G320f@id)) G320d@ls/false)) (apply (lambda (G3213@id G3214@val) (values G3213@id (cons 'expr G3214@val))) G320d@ls/false) ((lambda (G3217@t) ((lambda (G3219@ls/false) (if (and G3219@ls/false (apply (lambda (G321b@id) (G2d57@id? G321b@id)) G3219@ls/false)) (apply (lambda (G321d@id) (values G321d@id (cons 'expr (G2f0c@bless '(void))))) G3219@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3217@t))) (G2f56@syntax-dispatch G3217@t '(_ any)))) G320b@t))) (G2f56@syntax-dispatch G320b@t '(_ any any)))) G31f7@t))) (G2f56@syntax-dispatch G31f7@t '(_ (any . any) any . each-any)))) G31f5@x))) (set! G2edc@parse-define-syntax (lambda (G321f@x) ((lambda (G3221@t) ((lambda (G3223@ls/false) (if (and G3223@ls/false (apply (lambda (G3225@id G3226@val) (G2d57@id? G3225@id)) G3223@ls/false)) (apply (lambda (G3229@id G322a@val) (values G3229@id G322a@val)) G3223@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3221@t))) (G2f56@syntax-dispatch G3221@t '(_ any any)))) G321f@x))) (set! G2ede@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ee0@scheme-stx (lambda (G322d@sym) (or (hashtable-ref G2ede@scheme-stx-hashtable G322d@sym '#f) ((lambda (G322f@subst) ((lambda (G3231@stx) ((lambda (G3233@stx) ((lambda () (begin (hashtable-set! G2ede@scheme-stx-hashtable G322d@sym G3233@stx) G3233@stx)))) ((lambda (G3235@t) (if G3235@t ((lambda (G3237@x) ((lambda (G3239@name G323a@label) (G2d43@add-subst (G2cec@make-rib (list G3239@name) (list G2ccf@top-mark*) (list G323a@label) '#f '#f) G3231@stx)) (car G3237@x) (cdr G3237@x))) G3235@t) G3231@stx)) (assq G322d@sym G322f@subst)))) (G2d21@make-stx G322d@sym G2ccf@top-mark* '() '()))) (G2b43@G29bf@library-subst (G2b67@G2a07@find-library-by-name '(psyntax system $all))))))) (set! G2ee2@lexical-var car) (set! G2ee4@lexical-mutable? cdr) (set! G2ee6@set-lexical-mutable! set-cdr!) (set! G2ee8@add-lexical (lambda (G323d@lab G323e@lex G323f@r) (cons (cons* G323d@lab 'lexical G323e@lex '#f) G323f@r))) (set! G2eea@add-lexicals (lambda (G3243@lab* G3244@lex* G3245@r) (if (null? G3243@lab*) G3245@r (G2eea@add-lexicals (cdr G3243@lab*) (cdr G3244@lex*) (G2ee8@add-lexical (car G3243@lab*) (car G3244@lex*) G3245@r))))) (set! G2eec@letrec-helper (lambda (G3249@e G324a@r G324b@mr G324c@build) ((lambda (G3251@t) ((lambda (G3253@ls/false) (if G3253@ls/false (apply (lambda (G3255@lhs* G3256@rhs* G3257@b G3258@b*) (if (not (G2d61@valid-bound-ids? G3255@lhs*)) (G2f10@invalid-fmls-error G3249@e G3255@lhs*) ((lambda (G325d@lex* G325e@lab*) ((lambda (G3261@rib G3262@r) ((lambda (G3265@body G3266@rhs*) (G324c@build '#f G325d@lex* G3266@rhs* G3265@body)) (G2f90@chi-internal (G2d43@add-subst G3261@rib (cons G3257@b G3258@b*)) G3262@r G324b@mr) (G2f76@chi-expr* (map (lambda (G3269@x) (G2d43@add-subst G3261@rib G3269@x)) G3256@rhs*) G3262@r G324b@mr))) (G2d12@make-full-rib G3255@lhs* G325e@lab*) (G2eea@add-lexicals G325e@lab* G325d@lex* G324a@r))) (map G2cd3@gen-lexical G3255@lhs*) (map G2cd7@gen-label G3255@lhs*)))) G3253@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3251@t))) (G2f56@syntax-dispatch G3251@t '(_ #(each (any any)) any . each-any)))) G3249@e))) (set! G2eee@letrec-transformer (lambda (G326b@e G326c@r G326d@mr) (G2eec@letrec-helper G326b@e G326c@r G326d@mr G2cb6@G2c29@build-letrec))) (set! G2ef0@letrec*-transformer (lambda (G3271@e G3272@r G3273@mr) (G2eec@letrec-helper G3271@e G3272@r G3273@mr G2cb7@G2c2b@build-letrec*))) (set! G2ef2@fluid-let-syntax-transformer (lambda (G3277@e G3278@r G3279@mr) ((lambda (G327e@lookup) (begin (set! G327e@lookup (lambda (G3291@x) (or (G2d71@id->label G3291@x) (G3041@syntax-violation '#f '"unbound identifier" G3277@e G3291@x)))) ((lambda (G327f@t) ((lambda (G3281@ls/false) (if G3281@ls/false (apply (lambda (G3283@lhs* G3284@rhs* G3285@b G3286@b*) (if (not (G2d61@valid-bound-ids? G3283@lhs*)) (G2f10@invalid-fmls-error G3277@e G3283@lhs*) ((lambda (G328b@lab* G328c@rhs*) (G2f90@chi-internal (cons G3285@b G3286@b*) (append (map cons G328b@lab* G328c@rhs*) G3278@r) (append (map cons G328b@lab* G328c@rhs*) G3279@mr))) (map G327e@lookup G3283@lhs*) (map (lambda (G328f@x) (G2d97@make-eval-transformer (G2fb5@expand-transformer G328f@x G3279@mr))) G3284@rhs*)))) G3281@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G327f@t))) (G2f56@syntax-dispatch G327f@t '(_ #(each (any any)) any . each-any)))) G3277@e))) '#f))) (set! G2ef4@type-descriptor-transformer (lambda (G3293@e G3294@r G3295@mr) ((lambda (G3299@t) ((lambda (G329b@ls/false) (if (and G329b@ls/false (apply (lambda (G329d@id) (G2d57@id? G329d@id)) G329b@ls/false)) (apply (lambda (G329f@id) ((lambda (G32a1@lab) ((lambda (G32a3@b) ((lambda (G32a5@type) ((lambda () (begin (if (not G32a1@lab) (G2d7d@raise-unbound-error G329f@id) (void)) (if (not (and (eq? G32a5@type '$rtd) (not (list? (G2d7b@binding-value G32a3@b))))) (G3041@syntax-violation '#f '"not a record type" G3293@e) (void)) (list 'quote (G2d7b@binding-value G32a3@b)))))) (G2d79@binding-type G32a3@b))) (G2d75@label->binding G32a1@lab G3294@r))) (G2d71@id->label G329f@id))) G329b@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3299@t))) (G2f56@syntax-dispatch G3299@t '(_ any)))) G3293@e))) (set! G2ef6@record-type-descriptor-transformer (lambda (G32a7@e G32a8@r G32a9@mr) ((lambda (G32ad@t) ((lambda (G32af@ls/false) (if (and G32af@ls/false (apply (lambda (G32b1@id) (G2d57@id? G32b1@id)) G32af@ls/false)) (apply (lambda (G32b3@id) ((lambda (G32b5@lab) ((lambda (G32b7@b) ((lambda (G32b9@type) ((lambda () (begin (if (not G32b5@lab) (G2d7d@raise-unbound-error G32b3@id) (void)) (if (not (and (eq? G32b9@type '$rtd) (list? (G2d7b@binding-value G32b7@b)))) (G3041@syntax-violation '#f '"not a record type" G32a7@e) (void)) (G2f7a@chi-expr (car (G2d7b@binding-value G32b7@b)) G32a8@r G32a9@mr))))) (G2d79@binding-type G32b7@b))) (G2d75@label->binding G32b5@lab G32a8@r))) (G2d71@id->label G32b3@id))) G32af@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G32ad@t))) (G2f56@syntax-dispatch G32ad@t '(_ any)))) G32a7@e))) (set! G2ef8@record-constructor-descriptor-transformer (lambda (G32bb@e G32bc@r G32bd@mr) ((lambda (G32c1@t) ((lambda (G32c3@ls/false) (if (and G32c3@ls/false (apply (lambda (G32c5@id) (G2d57@id? G32c5@id)) G32c3@ls/false)) (apply (lambda (G32c7@id) ((lambda (G32c9@lab) ((lambda (G32cb@b) ((lambda (G32cd@type) ((lambda () (begin (if (not G32c9@lab) (G2d7d@raise-unbound-error G32c7@id) (void)) (if (not (and (eq? G32cd@type '$rtd) (list? (G2d7b@binding-value G32cb@b)))) (G3041@syntax-violation '#f '"invalid type" G32bb@e) (void)) (G2f7a@chi-expr (cadr (G2d7b@binding-value G32cb@b)) G32bc@r G32bd@mr))))) (G2d79@binding-type G32cb@b))) (G2d75@label->binding G32c9@lab G32bc@r))) (G2d71@id->label G32c7@id))) G32c3@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G32c1@t))) (G2f56@syntax-dispatch G32c1@t '(_ any)))) G32bb@e))) (set! G2efa@when-macro (lambda (G32cf@e) ((lambda (G32d1@t) ((lambda (G32d3@ls/false) (if G32d3@ls/false (apply (lambda (G32d5@test G32d6@e G32d7@e*) (G2f0c@bless (list 'if G32d5@test (cons 'begin (cons G32d6@e G32d7@e*))))) G32d3@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G32d1@t))) (G2f56@syntax-dispatch G32d1@t '(_ any any . each-any)))) G32cf@e))) (set! G2efc@unless-macro (lambda (G32db@e) ((lambda (G32dd@t) ((lambda (G32df@ls/false) (if G32df@ls/false (apply (lambda (G32e1@test G32e2@e G32e3@e*) (G2f0c@bless (list 'if (list 'not G32e1@test) (cons 'begin (cons G32e2@e G32e3@e*))))) G32df@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G32dd@t))) (G2f56@syntax-dispatch G32dd@t '(_ any any . each-any)))) G32db@e))) (set! G2efe@if-transformer (lambda (G32e7@e G32e8@r G32e9@mr) ((lambda (G32ed@t) ((lambda (G32ef@ls/false) (if G32ef@ls/false (apply (lambda (G32f1@e0 G32f2@e1 G32f3@e2) (list 'if (G2f7a@chi-expr G32f1@e0 G32e8@r G32e9@mr) (G2f7a@chi-expr G32f2@e1 G32e8@r G32e9@mr) (G2f7a@chi-expr G32f3@e2 G32e8@r G32e9@mr))) G32ef@ls/false) ((lambda (G32f7@t) ((lambda (G32f9@ls/false) (if G32f9@ls/false (apply (lambda (G32fb@e0 G32fc@e1) (list 'if (G2f7a@chi-expr G32fb@e0 G32e8@r G32e9@mr) (G2f7a@chi-expr G32fc@e1 G32e8@r G32e9@mr) (G2cb5@G2c27@build-void))) G32f9@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G32f7@t))) (G2f56@syntax-dispatch G32f7@t '(_ any any)))) G32ed@t))) (G2f56@syntax-dispatch G32ed@t '(_ any any any)))) G32e7@e))) (set! G2f00@and-transformer (lambda (G32ff@e G3300@r G3301@mr) ((lambda (G3305@t) ((lambda (G3307@ls/false) (if G3307@ls/false (apply (lambda (G3309@e*) (cons 'and (G2f76@chi-expr* G3309@e* G3300@r G3301@mr))) G3307@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3305@t))) (G2f56@syntax-dispatch G3305@t '(_ . each-any)))) G32ff@e))) (set! G2f02@or-transformer (lambda (G330b@e G330c@r G330d@mr) ((lambda (G3311@t) ((lambda (G3313@ls/false) (if G3313@ls/false (apply (lambda (G3315@e*) (cons 'or (G2f76@chi-expr* G3315@e* G330c@r G330d@mr))) G3313@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3311@t))) (G2f56@syntax-dispatch G3311@t '(_ . each-any)))) G330b@e))) (set! G2f04@case-macro (lambda (G3317@e) ((lambda (G331a@build-last G331c@build-one) (begin (set! G331a@build-last (lambda (G3341@cls) ((lambda (G3343@t) ((lambda (G3345@ls/false) (if G3345@ls/false (apply (lambda (G3347@e G3348@e*) (cons 'begin (cons G3347@e G3348@e*))) G3345@ls/false) ((lambda (G334b@t) ((lambda (G334d@ls/false) (if G334d@ls/false (apply (lambda () (G331c@build-one G3341@cls '(if #f #f))) G334d@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G334b@t))) (G2f56@syntax-dispatch G334b@t '_))) G3343@t))) (G2f56@syntax-dispatch G3343@t '(#(scheme-id else) any . each-any)))) G3341@cls))) (set! G331c@build-one (lambda (G3333@cls G3334@k) ((lambda (G3337@t) ((lambda (G3339@ls/false) (if G3339@ls/false (apply (lambda (G333b@d* G333c@e G333d@e*) (list 'if (list 'memv 't (list 'quote G333b@d*)) (cons 'begin (cons G333c@e G333d@e*)) G3334@k)) G3339@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3337@t))) (G2f56@syntax-dispatch G3337@t '(each-any any . each-any)))) G3333@cls))) ((lambda (G331d@t) ((lambda (G331f@ls/false) (if G331f@ls/false (apply (lambda (G3321@expr) (G2f0c@bless (cons 'let (cons (list (list 't G3321@expr)) '((if #f #f)))))) G331f@ls/false) ((lambda (G3323@t) ((lambda (G3325@ls/false) (if G3325@ls/false (apply (lambda (G3327@expr G3328@cls G3329@cls*) (G2f0c@bless (list 'let (list (list 't G3327@expr)) ((letrec ((G332d@f (lambda (G332f@cls G3330@cls*) (if (null? G3330@cls*) (G331a@build-last G332f@cls) (G331c@build-one G332f@cls (G332d@f (car G3330@cls*) (cdr G3330@cls*))))))) G332d@f) G3328@cls G3329@cls*)))) G3325@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3323@t))) (G2f56@syntax-dispatch G3323@t '(_ any any . each-any)))) G331d@t))) (G2f56@syntax-dispatch G331d@t '(_ any)))) G3317@e))) '#f '#f))) (set! G2f06@quote-transformer (lambda (G334f@e G3350@r G3351@mr) ((lambda (G3355@t) ((lambda (G3357@ls/false) (if G3357@ls/false (apply (lambda (G3359@datum) (list 'quote (G2d6d@stx->datum G3359@datum))) G3357@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3355@t))) (G2f56@syntax-dispatch G3355@t '(_ any)))) G334f@e))) (set! G2f08@case-lambda-transformer (lambda (G335b@e G335c@r G335d@mr) ((lambda (G3361@t) ((lambda (G3363@ls/false) (if G3363@ls/false (apply (lambda (G3365@fmls* G3366@b* G3367@b**) (call-with-values (lambda () (G2f82@chi-lambda-clause* G335b@e G3365@fmls* (map cons G3366@b* G3367@b**) G335c@r G335d@mr)) (lambda (G336d@G336b G336e@G336c) ((lambda (G3371@body* G3372@fmls*) (G2cb2@G2bf1@build-case-lambda '#f G3372@fmls* G3371@body*)) G336e@G336c G336d@G336b)))) G3363@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3361@t))) (G2f56@syntax-dispatch G3361@t '(_ . #(each (any any . each-any)))))) G335b@e))) (set! G2f0a@lambda-transformer (lambda (G3375@e G3376@r G3377@mr) ((lambda (G337b@t) ((lambda (G337d@ls/false) (if G337d@ls/false (apply (lambda (G337f@fmls G3380@b G3381@b*) (call-with-values (lambda () (G2f80@chi-lambda-clause G3375@e G337f@fmls (cons G3380@b G3381@b*) G3376@r G3377@mr)) (lambda (G3387@G3385 G3388@G3386) ((lambda (G338b@body G338c@fmls) (G2cb1@G2bef@build-lambda '#f G338c@fmls G338b@body)) G3388@G3386 G3387@G3385)))) G337d@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G337b@t))) (G2f56@syntax-dispatch G337b@t '(_ any any . each-any)))) G3375@e))) (set! G2f0c@bless (lambda (G338f@x) (G2d3f@mkstx ((letrec ((G3391@f (lambda (G3393@x) (if (G2d1f@stx? G3393@x) G3393@x (if (pair? G3393@x) (cons (G3391@f (car G3393@x)) (G3391@f (cdr G3393@x))) (if (symbol? G3393@x) (G2ee0@scheme-stx G3393@x) (if (vector? G3393@x) (vector-map G3391@f G3393@x) G3393@x))))))) G3391@f) G338f@x) '() '() '()))) (set! G2f0e@with-syntax-macro (lambda (G3395@e) ((lambda (G3397@t) ((lambda (G3399@ls/false) (if G3399@ls/false (apply (lambda (G339b@pat* G339c@expr* G339d@b G339e@b*) ((lambda (G33a3@idn*) (begin (G2f7e@verify-formals (map car G33a3@idn*) G3395@e) ((lambda (G33a5@t*) (G2f0c@bless (list 'let (map list G33a5@t* G339c@expr*) ((letrec ((G33a7@f (lambda (G33a9@pat* G33aa@t*) (if (null? G33a9@pat*) (cons 'begin (cons '#f (cons G339d@b G339e@b*))) (list 'syntax-case (car G33aa@t*) '() (list (car G33a9@pat*) (G33a7@f (cdr G33a9@pat*) (cdr G33aa@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33a9@pat*)) (car G33aa@t*)))))))) G33a7@f) G339b@pat* G33a5@t*)))) (G302f@generate-temporaries G339c@expr*)))) ((letrec ((G33ad@f (lambda (G33af@pat*) (if (null? G33af@pat*) '() (call-with-values (lambda () (G2f54@convert-pattern (car G33af@pat*) '())) (lambda (G33b3@G33b1 G33b4@G33b2) ((lambda (G33b7@idn* G33b8@pat) (append G33b7@idn* (G33ad@f (cdr G33af@pat*)))) G33b4@G33b2 G33b3@G33b1))))))) G33ad@f) G339b@pat*))) G3399@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3397@t))) (G2f56@syntax-dispatch G3397@t '(_ #(each (any any)) any . each-any)))) G3395@e))) (set! G2f10@invalid-fmls-error (lambda (G33bb@stx G33bc@fmls) ((lambda (G33bf@t) ((lambda (G33c1@ls/false) (if G33c1@ls/false (apply (lambda (G33c3@id* G33c4@last) ((letrec ((G33c7@f (lambda (G33c9@id*) (if (null? G33c9@id*) (values) (if (not (G2d57@id? (car G33c9@id*))) (G3041@syntax-violation '#f '"not an identifier" G33bb@stx (car G33c9@id*)) (begin (G33c7@f (cdr G33c9@id*)) (if (G2d65@bound-id-member? (car G33c9@id*) (cdr G33c9@id*)) (G3041@syntax-violation '#f '"duplicate binding" G33bb@stx (car G33c9@id*)) (void)))))))) G33c7@f) (if (G2d57@id? G33c4@last) (cons G33c4@last G33c3@id*) (if (G2d4d@syntax-null? G33c4@last) G33c3@id* (G3041@syntax-violation '#f '"not an identifier" G33bb@stx G33c4@last))))) G33c1@ls/false) ((lambda (G33cb@t) ((lambda (G33cd@ls/false) (if G33cd@ls/false (apply (lambda () (G3041@syntax-violation '#f '"malformed binding form" G33bb@stx G33bc@fmls)) G33cd@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G33cb@t))) (G2f56@syntax-dispatch G33cb@t '_))) G33bf@t))) (G2f56@syntax-dispatch G33bf@t '#(each+ any () any)))) G33bc@fmls))) (set! G2f12@let-macro (lambda (G33cf@stx) ((lambda (G33d1@t) ((lambda (G33d3@ls/false) (if G33d3@ls/false (apply (lambda (G33d5@lhs* G33d6@rhs* G33d7@b G33d8@b*) (if (G2d61@valid-bound-ids? G33d5@lhs*) (G2f0c@bless (cons (cons 'lambda (cons G33d5@lhs* (cons G33d7@b G33d8@b*))) G33d6@rhs*)) (G2f10@invalid-fmls-error G33cf@stx G33d5@lhs*))) G33d3@ls/false) ((lambda (G33dd@t) ((lambda (G33df@ls/false) (if (and G33df@ls/false (apply (lambda (G33e1@f G33e2@lhs* G33e3@rhs* G33e4@b G33e5@b*) (G2d57@id? G33e1@f)) G33df@ls/false)) (apply (lambda (G33eb@f G33ec@lhs* G33ed@rhs* G33ee@b G33ef@b*) (if (G2d61@valid-bound-ids? G33ec@lhs*) (G2f0c@bless (cons (list 'letrec (list (list G33eb@f (cons 'lambda (cons G33ec@lhs* (cons G33ee@b G33ef@b*))))) G33eb@f) G33ed@rhs*)) (G2f10@invalid-fmls-error G33cf@stx G33ec@lhs*))) G33df@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G33dd@t))) (G2f56@syntax-dispatch G33dd@t '(_ any #(each (any any)) any . each-any)))) G33d1@t))) (G2f56@syntax-dispatch G33d1@t '(_ #(each (any any)) any . each-any)))) G33cf@stx))) (set! G2f14@let-values-macro (lambda (G33f5@stx) ((lambda (G33f8@rename G33fa@rename*) (begin (set! G33f8@rename (lambda (G345a@x G345b@old* G345c@new*) (begin (if (not (G2d57@id? G345a@x)) (G3041@syntax-violation '#f '"not an indentifier" G33f5@stx G345a@x) (void)) (if (G2d65@bound-id-member? G345a@x G345b@old*) (G3041@syntax-violation '#f '"duplicate binding" G33f5@stx G345a@x) (void)) ((lambda (G3460@y) (values G3460@y (cons G345a@x G345b@old*) (cons G3460@y G345c@new*))) (gensym (G3047@syntax->datum G345a@x)))))) (set! G33fa@rename* (lambda (G3448@x* G3449@old* G344a@new*) (if (null? G3448@x*) (values '() G3449@old* G344a@new*) (call-with-values (lambda () (G33f8@rename (car G3448@x*) G3449@old* G344a@new*)) (lambda (G344e@x G344f@old* G3450@new*) (call-with-values (lambda () (G33fa@rename* (cdr G3448@x*) G344f@old* G3450@new*)) (lambda (G3454@x* G3455@old* G3456@new*) (values (cons G344e@x G3454@x*) G3455@old* G3456@new*)))))))) ((lambda (G33fb@t) ((lambda (G33fd@ls/false) (if G33fd@ls/false (apply (lambda (G33ff@b G3400@b*) (cons* (G2f0c@bless 'let) '() G33ff@b G3400@b*)) G33fd@ls/false) ((lambda (G3403@t) ((lambda (G3405@ls/false) (if G3405@ls/false (apply (lambda (G3407@lhs* G3408@rhs* G3409@b G340a@b*) (G2f0c@bless ((letrec ((G340f@f (lambda (G3411@lhs* G3412@rhs* G3413@old* G3414@new*) (if (null? G3411@lhs*) (cons 'let (cons (map list G3413@old* G3414@new*) (cons G3409@b G340a@b*))) ((lambda (G3419@t) ((lambda (G341b@ls/false) (if G341b@ls/false (apply (lambda (G341d@x*) (call-with-values (lambda () (G33fa@rename* G341d@x* G3413@old* G3414@new*)) (lambda (G3422@G341f G3423@G3420 G3424@G3421) ((lambda (G3428@new* G3429@old* G342a@y*) (list 'call-with-values (list 'lambda '() (car G3412@rhs*)) (list 'lambda G342a@y* (G340f@f (cdr G3411@lhs*) (cdr G3412@rhs*) G3429@old* G3428@new*)))) G3424@G3421 G3423@G3420 G3422@G341f)))) G341b@ls/false) ((lambda (G342e@t) ((lambda (G3430@ls/false) (if G3430@ls/false (apply (lambda (G3432@x* G3433@x) (call-with-values (lambda () (G33f8@rename G3433@x G3413@old* G3414@new*)) (lambda (G3436@y G3437@old* G3438@new*) (call-with-values (lambda () (G33fa@rename* G3432@x* G3437@old* G3438@new*)) (lambda (G343c@y* G343d@old* G343e@new*) (list 'call-with-values (list 'lambda '() (car G3412@rhs*)) (list 'lambda (append G343c@y* G3436@y) (G340f@f (cdr G3411@lhs*) (cdr G3412@rhs*) G343d@old* G343e@new*)))))))) G3430@ls/false) ((lambda (G3442@t) ((lambda (G3444@ls/false) (if G3444@ls/false (apply (lambda (G3446@others) (G3041@syntax-violation '#f '"malformed bindings" G33f5@stx G3446@others)) G3444@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3442@t))) (G2f56@syntax-dispatch G3442@t 'any))) G342e@t))) (G2f56@syntax-dispatch G342e@t '#(each+ any () any)))) G3419@t))) (G2f56@syntax-dispatch G3419@t 'each-any))) (car G3411@lhs*)))))) G340f@f) G3407@lhs* G3408@rhs* '() '()))) G3405@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3403@t))) (G2f56@syntax-dispatch G3403@t '(_ #(each (any any)) any . each-any)))) G33fb@t))) (G2f56@syntax-dispatch G33fb@t '(_ () any . each-any)))) G33f5@stx))) '#f '#f))) (set! G2f16@let*-values-macro (lambda (G3462@stx) ((lambda (G3465@check) (begin (set! G3465@check (lambda (G3494@x*) (if (not (null? G3494@x*)) ((lambda (G3496@x) (begin (if (not (G2d57@id? G3496@x)) (G3041@syntax-violation '#f '"not an identifier" G3462@stx G3496@x) (void)) (G3465@check (cdr G3494@x*)) (if (G2d65@bound-id-member? G3496@x (cdr G3494@x*)) (G3041@syntax-violation '#f '"duplicate identifier" G3462@stx G3496@x) (void)))) (car G3494@x*)) (void)))) ((lambda (G3466@t) ((lambda (G3468@ls/false) (if G3468@ls/false (apply (lambda (G346a@b G346b@b*) (cons* (G2f0c@bless 'let) '() G346a@b G346b@b*)) G3468@ls/false) ((lambda (G346e@t) ((lambda (G3470@ls/false) (if G3470@ls/false (apply (lambda (G3472@lhs* G3473@rhs* G3474@b G3475@b*) (G2f0c@bless ((letrec ((G347a@f (lambda (G347c@lhs* G347d@rhs*) (if (null? G347c@lhs*) (cons 'begin (cons G3474@b G3475@b*)) ((lambda (G3480@t) ((lambda (G3482@ls/false) (if G3482@ls/false (apply (lambda (G3484@x*) (begin (G3465@check G3484@x*) (list 'call-with-values (list 'lambda '() (car G347d@rhs*)) (list 'lambda G3484@x* (G347a@f (cdr G347c@lhs*) (cdr G347d@rhs*)))))) G3482@ls/false) ((lambda (G3486@t) ((lambda (G3488@ls/false) (if G3488@ls/false (apply (lambda (G348a@x* G348b@x) (begin (G3465@check (cons G348b@x G348a@x*)) (list 'call-with-values (list 'lambda '() (car G347d@rhs*)) (list 'lambda (append G348a@x* G348b@x) (G347a@f (cdr G347c@lhs*) (cdr G347d@rhs*)))))) G3488@ls/false) ((lambda (G348e@t) ((lambda (G3490@ls/false) (if G3490@ls/false (apply (lambda (G3492@others) (G3041@syntax-violation '#f '"malformed bindings" G3462@stx G3492@others)) G3490@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G348e@t))) (G2f56@syntax-dispatch G348e@t 'any))) G3486@t))) (G2f56@syntax-dispatch G3486@t '#(each+ any () any)))) G3480@t))) (G2f56@syntax-dispatch G3480@t 'each-any))) (car G347c@lhs*)))))) G347a@f) G3472@lhs* G3473@rhs*))) G3470@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G346e@t))) (G2f56@syntax-dispatch G346e@t '(_ #(each (any any)) any . each-any)))) G3466@t))) (G2f56@syntax-dispatch G3466@t '(_ () any . each-any)))) G3462@stx))) '#f))) (set! G2f18@trace-lambda-macro (lambda (G3498@stx) ((lambda (G349a@t) ((lambda (G349c@ls/false) (if G349c@ls/false (apply (lambda (G349e@who G349f@fmls G34a0@b G34a1@b*) (if (G2d61@valid-bound-ids? G349f@fmls) (G2f0c@bless (list 'make-traced-procedure (list 'quote G349e@who) (cons 'lambda (cons G349f@fmls (cons G34a0@b G34a1@b*))))) (G2f10@invalid-fmls-error G3498@stx G349f@fmls))) G349c@ls/false) ((lambda (G34a6@t) ((lambda (G34a8@ls/false) (if G34a8@ls/false (apply (lambda (G34aa@who G34ab@fmls G34ac@last G34ad@b G34ae@b*) (if (G2d61@valid-bound-ids? (cons G34ac@last G34ab@fmls)) (G2f0c@bless (list 'make-traced-procedure (list 'quote G34aa@who) (cons 'lambda (cons (append G34ab@fmls G34ac@last) (cons G34ad@b G34ae@b*))))) (G2f10@invalid-fmls-error G3498@stx (append G34ab@fmls G34ac@last)))) G34a8@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G34a6@t))) (G2f56@syntax-dispatch G34a6@t '(_ any #(each+ any () any) any . each-any)))) G349a@t))) (G2f56@syntax-dispatch G349a@t '(_ any each-any any . each-any)))) G3498@stx))) (set! G2f1a@trace-define-macro (lambda (G34b4@stx) ((lambda (G34b6@t) ((lambda (G34b8@ls/false) (if G34b8@ls/false (apply (lambda (G34ba@who G34bb@fmls G34bc@b G34bd@b*) (if (G2d61@valid-bound-ids? G34bb@fmls) (G2f0c@bless (list 'define G34ba@who (list 'make-traced-procedure (list 'quote G34ba@who) (cons 'lambda (cons G34bb@fmls (cons G34bc@b G34bd@b*)))))) (G2f10@invalid-fmls-error G34b4@stx G34bb@fmls))) G34b8@ls/false) ((lambda (G34c2@t) ((lambda (G34c4@ls/false) (if G34c4@ls/false (apply (lambda (G34c6@who G34c7@fmls G34c8@last G34c9@b G34ca@b*) (if (G2d61@valid-bound-ids? (cons G34c8@last G34c7@fmls)) (G2f0c@bless (list 'define G34c6@who (list 'make-traced-procedure (list 'quote G34c6@who) (cons 'lambda (cons (append G34c7@fmls G34c8@last) (cons G34c9@b G34ca@b*)))))) (G2f10@invalid-fmls-error G34b4@stx (append G34c7@fmls G34c8@last)))) G34c4@ls/false) ((lambda (G34d0@t) ((lambda (G34d2@ls/false) (if G34d2@ls/false (apply (lambda (G34d4@who G34d5@expr) (if (G2d57@id? G34d4@who) (G2f0c@bless (list 'define G34d4@who (list 'let (list (list 'v G34d5@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34d4@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3041@syntax-violation '#f '"invalid name" G34b4@stx))) G34d2@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G34d0@t))) (G2f56@syntax-dispatch G34d0@t '(_ any any)))) G34c2@t))) (G2f56@syntax-dispatch G34c2@t '(_ (any . #(each+ any () any)) any . each-any)))) G34b6@t))) (G2f56@syntax-dispatch G34b6@t '(_ (any . each-any) any . each-any)))) G34b4@stx))) (set! G2f1c@trace-define-syntax-macro (lambda (G34d8@stx) ((lambda (G34da@t) ((lambda (G34dc@ls/false) (if G34dc@ls/false (apply (lambda (G34de@who G34df@expr) (if (G2d57@id? G34de@who) (G2f0c@bless (list 'define-syntax G34de@who (list 'make-traced-macro (list 'quote G34de@who) G34df@expr))) (G3041@syntax-violation '#f '"invalid name" G34d8@stx))) G34dc@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G34da@t))) (G2f56@syntax-dispatch G34da@t '(_ any any)))) G34d8@stx))) (set! G2f1e@trace-let/rec-syntax (lambda (G34e2@who) (lambda (G34e4@stx) ((lambda (G34e6@t) ((lambda (G34e8@ls/false) (if G34e8@ls/false (apply (lambda (G34ea@lhs* G34eb@rhs* G34ec@b G34ed@b*) (if (G2d61@valid-bound-ids? G34ea@lhs*) ((lambda (G34f2@rhs*) (G2f0c@bless (cons G34e2@who (cons (map list G34ea@lhs* G34f2@rhs*) (cons G34ec@b G34ed@b*))))) (map (lambda (G34f4@lhs G34f5@rhs) (list 'make-traced-macro (list 'quote G34f4@lhs) G34f5@rhs)) G34ea@lhs* G34eb@rhs*)) (G2f10@invalid-fmls-error G34e4@stx G34ea@lhs*))) G34e8@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G34e6@t))) (G2f56@syntax-dispatch G34e6@t '(_ #(each (any any)) any . each-any)))) G34e4@stx)))) (set! G2f20@trace-let-syntax-macro (G2f1e@trace-let/rec-syntax 'let-syntax)) (set! G2f22@trace-letrec-syntax-macro (G2f1e@trace-let/rec-syntax 'letrec-syntax)) (set! G2f24@guard-macro (lambda (G34f8@x) ((lambda (G34fb@gen-clauses) (begin (set! G34fb@gen-clauses (lambda (G3512@con G3513@outerk G3514@clause*) ((lambda (G3519@f G351b@f*) (begin (set! G3519@f (lambda (G354e@x G354f@k) ((lambda (G3552@t) ((lambda (G3554@ls/false) (if G3554@ls/false (apply (lambda (G3556@e G3557@p) ((lambda (G355a@t) (list 'let (list (list G355a@t G3556@e)) (list 'if G355a@t (list G3557@p G355a@t) G354f@k))) (gensym))) G3554@ls/false) ((lambda (G355c@t) ((lambda (G355e@ls/false) (if G355e@ls/false (apply (lambda (G3560@e) ((lambda (G3562@t) (list 'let (list (list G3562@t G3560@e)) (list 'if G3562@t G3562@t G354f@k))) (gensym))) G355e@ls/false) ((lambda (G3564@t) ((lambda (G3566@ls/false) (if G3566@ls/false (apply (lambda (G3568@e G3569@v G356a@v*) (list 'if G3568@e (cons 'begin (cons G3569@v G356a@v*)) G354f@k)) G3566@ls/false) ((lambda (G356e@t) ((lambda (G3570@ls/false) (if G3570@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid guard clause" G354e@x)) G3570@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G356e@t))) (G2f56@syntax-dispatch G356e@t '_))) G3564@t))) (G2f56@syntax-dispatch G3564@t '(any any . each-any)))) G355c@t))) (G2f56@syntax-dispatch G355c@t '(any)))) G3552@t))) (G2f56@syntax-dispatch G3552@t '(any #(scheme-id =>) any)))) G354e@x))) (set! G351b@f* (lambda (G3526@x*) ((lambda (G3528@t) ((lambda (G352a@ls/false) (if G352a@ls/false (apply (lambda () ((lambda (G352c@g) (values (list G352c@g (list 'lambda '() (list 'raise-continuable G3512@con))) G352c@g)) (gensym))) G352a@ls/false) ((lambda (G352e@t) ((lambda (G3530@ls/false) (if G3530@ls/false (apply (lambda (G3532@e G3533@e*) (values (cons 'begin (cons G3532@e G3533@e*)) '#f)) G3530@ls/false) ((lambda (G3536@t) ((lambda (G3538@ls/false) (if G3538@ls/false (apply (lambda (G353a@cls G353b@cls*) (call-with-values (lambda () (G351b@f* G353b@cls*)) (lambda (G3540@G353e G3541@G353f) ((lambda (G3544@g G3545@e) (values (G3519@f G353a@cls G3545@e) G3544@g)) G3541@G353f G3540@G353e)))) G3538@ls/false) ((lambda (G3548@t) ((lambda (G354a@ls/false) (if G354a@ls/false (apply (lambda (G354c@others) (G3041@syntax-violation '#f '"invalid guard clause" G354c@others)) G354a@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3548@t))) (G2f56@syntax-dispatch G3548@t 'any))) G3536@t))) (G2f56@syntax-dispatch G3536@t '(any . any)))) G352e@t))) (G2f56@syntax-dispatch G352e@t '((#(scheme-id else) any . each-any))))) G3528@t))) (G2f56@syntax-dispatch G3528@t '()))) G3526@x*))) (call-with-values (lambda () (G351b@f* G3514@clause*)) (lambda (G351e@G351c G351f@G351d) ((lambda (G3522@raisek G3523@code) (if G3522@raisek (list (list 'call/cc (list 'lambda (list G3522@raisek) (list G3513@outerk (list 'lambda '() G3523@code))))) (list G3513@outerk (list 'lambda '() G3523@code)))) G351f@G351d G351e@G351c))))) '#f '#f))) ((lambda (G34fc@t) ((lambda (G34fe@ls/false) (if (and G34fe@ls/false (apply (lambda (G3500@con G3501@clause* G3502@b G3503@b*) (G2d57@id? G3500@con)) G34fe@ls/false)) (apply (lambda (G3508@con G3509@clause* G350a@b G350b@b*) ((lambda (G3510@outerk) (G2f0c@bless (list (list 'call/cc (list 'lambda (list G3510@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3508@con) (G34fb@gen-clauses G3508@con G3510@outerk G3509@clause*)) (cons 'lambda (cons '() (cons G350a@b G350b@b*)))))))))) (gensym))) G34fe@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G34fc@t))) (G2f56@syntax-dispatch G34fc@t '(_ (any . each-any) any . each-any)))) G34f8@x))) '#f))) (set! G2f26@define-enumeration-macro (lambda (G3572@stx) ((lambda (G3575@set? G3577@remove-dups) (begin (set! G3575@set? (lambda (G358e@x) (or (null? G358e@x) (and (not (memq (car G358e@x) (cdr G358e@x))) (G3575@set? (cdr G358e@x)))))) (set! G3577@remove-dups (lambda (G358c@ls) (if (null? G358c@ls) '() (cons (car G358c@ls) (G3577@remove-dups (remq (car G358c@ls) (cdr G358c@ls))))))) ((lambda (G3578@t) ((lambda (G357a@ls/false) (if (and G357a@ls/false (apply (lambda (G357c@name G357d@id* G357e@maker) (and (G2d57@id? G357c@name) (G2d57@id? G357e@maker) (for-all G2d57@id? G357d@id*))) G357a@ls/false)) (apply (lambda (G3582@name G3583@id* G3584@maker) ((lambda (G3588@name* G3589@mk) (G2f0c@bless (list 'begin (list 'define G3589@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3588@name*)))) (list 'define-syntax G3582@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3588@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3582@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3584@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3584@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3588@name*)) (cons 'syntax-violation (cons (list 'quote G3584@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3589@mk '('(n* ...)))))))))))) (G3577@remove-dups (G3047@syntax->datum G3583@id*)) (gensym))) G357a@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3578@t))) (G2f56@syntax-dispatch G3578@t '(_ any each-any any)))) G3572@stx))) '#f '#f))) (set! G2f28@time-macro (lambda (G3590@stx) ((lambda (G3592@t) ((lambda (G3594@ls/false) (if G3594@ls/false (apply (lambda (G3596@expr) ((lambda (G3598@str) (G2f0c@bless (list 'time-it G3598@str (list 'lambda '() G3596@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G359c@G359a G359d@G359b) ((lambda (G35a0@e G35a1@p) (begin (write (G3047@syntax->datum G3596@expr) G35a1@p) (G35a0@e))) G359d@G359b G359c@G359a))))) G3594@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3592@t))) (G2f56@syntax-dispatch G3592@t '(_ any)))) G3590@stx))) (set! G2f2a@delay-macro (lambda (G35a4@stx) ((lambda (G35a6@t) ((lambda (G35a8@ls/false) (if G35a8@ls/false (apply (lambda (G35aa@expr) (G2f0c@bless (list 'make-promise (list 'lambda '() G35aa@expr)))) G35a8@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G35a6@t))) (G2f56@syntax-dispatch G35a6@t '(_ any)))) G35a4@stx))) (set! G2f2c@assert-macro (lambda (G35ac@stx) ((lambda (G35ae@t) ((lambda (G35b0@ls/false) (if G35b0@ls/false (apply (lambda (G35b2@expr) ((lambda (G35b4@pos) (G2f0c@bless (list 'unless G35b2@expr (list 'assertion-error (list 'quote G35b2@expr) (list 'quote G35b4@pos))))) (or (G3039@expression-position G35ac@stx) (G3039@expression-position G35b2@expr)))) G35b0@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G35ae@t))) (G2f56@syntax-dispatch G35ae@t '(_ any)))) G35ac@stx))) (set! G2f2e@endianness-macro (lambda (G35b6@stx) ((lambda (G35b8@t) ((lambda (G35ba@ls/false) (if G35ba@ls/false (apply (lambda (G35bc@e) ((lambda (G35be@t) (if (memv G35be@t '(little)) (G2f0c@bless ''little) (if (memv G35be@t '(big)) (G2f0c@bless ''big) (G3041@syntax-violation '#f '"endianness must be big or little" G35b6@stx)))) (G3047@syntax->datum G35bc@e))) G35ba@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G35b8@t))) (G2f56@syntax-dispatch G35b8@t '(_ any)))) G35b6@stx))) (set! G2f30@identifier-syntax-macro (lambda (G35c0@stx) ((lambda (G35c2@t) ((lambda (G35c4@ls/false) (if G35c4@ls/false (apply (lambda (G35c6@expr) (G2f0c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35c6@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35c6@expr) '((syntax (e* ...)))))))))) G35c4@ls/false) ((lambda (G35c8@t) ((lambda (G35ca@ls/false) (if (and G35ca@ls/false (apply (lambda (G35cc@id1 G35cd@expr1 G35ce@id2 G35cf@expr2 G35d0@expr3) (and (G2d57@id? G35cc@id1) (G2d57@id? G35ce@id2) (G2d57@id? G35cf@expr2))) G35ca@ls/false)) (apply (lambda (G35d6@id1 G35d7@expr1 G35d8@id2 G35d9@expr2 G35da@expr3) (G2f0c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35d7@expr1)) (list (list 'set! 'id G35d9@expr2) (list 'syntax G35da@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35d7@expr1 '(e* ...))))))))) G35ca@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G35c8@t))) (G2f56@syntax-dispatch G35c8@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35c2@t))) (G2f56@syntax-dispatch G35c2@t '(_ any)))) G35c0@stx))) (set! G2f32@do-macro (lambda (G35e0@stx) ((lambda (G35e3@bind) (begin (set! G35e3@bind (lambda (G35fa@x) ((lambda (G35fc@t) ((lambda (G35fe@ls/false) (if G35fe@ls/false (apply (lambda (G3600@x G3601@init) (list G3600@x G3601@init G3600@x)) G35fe@ls/false) ((lambda (G3604@t) ((lambda (G3606@ls/false) (if G3606@ls/false (apply (lambda (G3608@x G3609@init G360a@step) (list G3608@x G3609@init G360a@step)) G3606@ls/false) ((lambda (G360e@t) ((lambda (G3610@ls/false) (if G3610@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid binding" G35e0@stx)) G3610@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G360e@t))) (G2f56@syntax-dispatch G360e@t '_))) G3604@t))) (G2f56@syntax-dispatch G3604@t '(any any any)))) G35fc@t))) (G2f56@syntax-dispatch G35fc@t '(any any)))) G35fa@x))) ((lambda (G35e4@t) ((lambda (G35e6@ls/false) (if G35e6@ls/false (apply (lambda (G35e8@binding* G35e9@test G35ea@expr* G35eb@command*) ((lambda (G35f0@t) ((lambda (G35f2@ls/false) (if G35f2@ls/false (apply (lambda (G35f4@x* G35f5@init* G35f6@step*) (if (G2d61@valid-bound-ids? G35f4@x*) (G2f0c@bless (list 'letrec (list (list 'loop (list 'lambda G35f4@x* (list 'if G35e9@test (cons 'begin (cons '(if #f #f) G35ea@expr*)) (cons 'begin (append G35eb@command* (list (cons 'loop G35f6@step*)))))))) (cons 'loop G35f5@init*))) (G3041@syntax-violation '#f '"invalid bindings" G35e0@stx))) G35f2@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G35f0@t))) (G2f56@syntax-dispatch G35f0@t '#(each (any any any))))) (map G35e3@bind G35e8@binding*))) G35e6@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G35e4@t))) (G2f56@syntax-dispatch G35e4@t '(_ each-any (any . each-any) . each-any)))) G35e0@stx))) '#f))) (set! G2f34@let*-macro (lambda (G3612@stx) ((lambda (G3614@t) ((lambda (G3616@ls/false) (if (and G3616@ls/false (apply (lambda (G3618@lhs* G3619@rhs* G361a@b G361b@b*) (for-all G2d57@id? G3618@lhs*)) G3616@ls/false)) (apply (lambda (G3620@lhs* G3621@rhs* G3622@b G3623@b*) (G2f0c@bless ((letrec ((G3628@f (lambda (G362a@x*) (if (null? G362a@x*) (cons 'let (cons '() (cons G3622@b G3623@b*))) (list 'let (list (car G362a@x*)) (G3628@f (cdr G362a@x*))))))) G3628@f) (map list G3620@lhs* G3621@rhs*)))) G3616@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3614@t))) (G2f56@syntax-dispatch G3614@t '(_ #(each (any any)) any . each-any)))) G3612@stx))) (set! G2f36@or-macro (lambda (G362c@stx) ((lambda (G362e@t) ((lambda (G3630@ls/false) (if G3630@ls/false (apply (lambda () '#f) G3630@ls/false) ((lambda (G3632@t) ((lambda (G3634@ls/false) (if G3634@ls/false (apply (lambda (G3636@e G3637@e*) (G2f0c@bless ((letrec ((G363a@f (lambda (G363c@e G363d@e*) (if (null? G363d@e*) (list 'begin '#f G363c@e) (list 'let (list (list 't G363c@e)) (list 'if 't 't (G363a@f (car G363d@e*) (cdr G363d@e*)))))))) G363a@f) G3636@e G3637@e*))) G3634@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3632@t))) (G2f56@syntax-dispatch G3632@t '(_ any . each-any)))) G362e@t))) (G2f56@syntax-dispatch G362e@t '(_)))) G362c@stx))) (set! G2f38@and-macro (lambda (G3640@stx) ((lambda (G3642@t) ((lambda (G3644@ls/false) (if G3644@ls/false (apply (lambda () '#t) G3644@ls/false) ((lambda (G3646@t) ((lambda (G3648@ls/false) (if G3648@ls/false (apply (lambda (G364a@e G364b@e*) (G2f0c@bless ((letrec ((G364e@f (lambda (G3650@e G3651@e*) (if (null? G3651@e*) (list 'begin '#f G3650@e) (cons 'if (cons G3650@e (cons (G364e@f (car G3651@e*) (cdr G3651@e*)) '(#f)))))))) G364e@f) G364a@e G364b@e*))) G3648@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3646@t))) (G2f56@syntax-dispatch G3646@t '(_ any . each-any)))) G3642@t))) (G2f56@syntax-dispatch G3642@t '(_)))) G3640@stx))) (set! G2f3a@cond-macro (lambda (G3654@stx) ((lambda (G3656@t) ((lambda (G3658@ls/false) (if G3658@ls/false (apply (lambda (G365a@cls G365b@cls*) (G2f0c@bless ((letrec ((G365e@f (lambda (G3660@cls G3661@cls*) (if (null? G3661@cls*) ((lambda (G3664@t) ((lambda (G3666@ls/false) (if G3666@ls/false (apply (lambda (G3668@e G3669@e*) (cons 'begin (cons G3668@e G3669@e*))) G3666@ls/false) ((lambda (G366c@t) ((lambda (G366e@ls/false) (if G366e@ls/false (apply (lambda (G3670@e G3671@p) (list 'let (list (list 't G3670@e)) (list 'if 't (cons G3671@p '(t))))) G366e@ls/false) ((lambda (G3674@t) ((lambda (G3676@ls/false) (if G3676@ls/false (apply (lambda (G3678@e) (cons 'or (cons G3678@e '((if #f #f))))) G3676@ls/false) ((lambda (G367a@t) ((lambda (G367c@ls/false) (if G367c@ls/false (apply (lambda (G367e@e G367f@e*) (list 'if G367e@e (cons 'begin G367f@e*))) G367c@ls/false) ((lambda (G3682@t) ((lambda (G3684@ls/false) (if G3684@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid last clause" G3654@stx)) G3684@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3682@t))) (G2f56@syntax-dispatch G3682@t '_))) G367a@t))) (G2f56@syntax-dispatch G367a@t '(any . each-any)))) G3674@t))) (G2f56@syntax-dispatch G3674@t '(any)))) G366c@t))) (G2f56@syntax-dispatch G366c@t '(any #(scheme-id =>) any)))) G3664@t))) (G2f56@syntax-dispatch G3664@t '(#(scheme-id else) any . each-any)))) G3660@cls) ((lambda (G3686@t) ((lambda (G3688@ls/false) (if G3688@ls/false (apply (lambda (G368a@e G368b@e*) (G3041@syntax-violation '#f '"incorrect position of keyword else" G3654@stx)) G3688@ls/false) ((lambda (G368e@t) ((lambda (G3690@ls/false) (if G3690@ls/false (apply (lambda (G3692@e G3693@p) (list 'let (list (list 't G3692@e)) (list 'if 't (cons G3693@p '(t)) (G365e@f (car G3661@cls*) (cdr G3661@cls*))))) G3690@ls/false) ((lambda (G3696@t) ((lambda (G3698@ls/false) (if G3698@ls/false (apply (lambda (G369a@e) (list 'or G369a@e (G365e@f (car G3661@cls*) (cdr G3661@cls*)))) G3698@ls/false) ((lambda (G369c@t) ((lambda (G369e@ls/false) (if G369e@ls/false (apply (lambda (G36a0@e G36a1@e*) (list 'if G36a0@e (cons 'begin G36a1@e*) (G365e@f (car G3661@cls*) (cdr G3661@cls*)))) G369e@ls/false) ((lambda (G36a4@t) ((lambda (G36a6@ls/false) (if G36a6@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid last clause" G3654@stx)) G36a6@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G36a4@t))) (G2f56@syntax-dispatch G36a4@t '_))) G369c@t))) (G2f56@syntax-dispatch G369c@t '(any . each-any)))) G3696@t))) (G2f56@syntax-dispatch G3696@t '(any)))) G368e@t))) (G2f56@syntax-dispatch G368e@t '(any #(scheme-id =>) any)))) G3686@t))) (G2f56@syntax-dispatch G3686@t '(#(scheme-id else) any . each-any)))) G3660@cls))))) G365e@f) G365a@cls G365b@cls*))) G3658@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3656@t))) (G2f56@syntax-dispatch G3656@t '(_ any . each-any)))) G3654@stx))) (set! G2f3c@do-include (lambda (G36a8@stx G36a9@id G36aa@filename) ((lambda (G36ae@filename) (begin (if (not (and (string? G36ae@filename) (G2d57@id? G36a9@id))) (G3041@syntax-violation '#f '"invalid syntax" G36a8@stx) (void)) (cons (G2f0c@bless 'begin) (with-input-from-file G36ae@filename (lambda () ((letrec ((G36b0@f (lambda (G36b2@ls) ((lambda (G36b4@x) (if (eof-object? G36b4@x) (reverse G36b2@ls) (G36b0@f (cons (G2d35@datum->stx G36a9@id G36b4@x) G36b2@ls)))) (G28e6@G280f@read-annotated))))) G36b0@f) '())))))) (G2d6d@stx->datum G36aa@filename)))) (set! G2f3e@include-macro (lambda (G36b6@e) ((lambda (G36b8@t) ((lambda (G36ba@ls/false) (if G36ba@ls/false (apply (lambda (G36bc@id G36bd@filename) (G2f3c@do-include G36b6@e G36bc@id G36bd@filename)) G36ba@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G36b8@t))) (G2f56@syntax-dispatch G36b8@t '(any any)))) G36b6@e))) (set! G2f40@include-into-macro (lambda (G36c0@e) ((lambda (G36c2@t) ((lambda (G36c4@ls/false) (if G36c4@ls/false (apply (lambda (G36c6@id G36c7@filename) (G2f3c@do-include G36c0@e G36c6@id G36c7@filename)) G36c4@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G36c2@t))) (G2f56@syntax-dispatch G36c2@t '(_ any any)))) G36c0@e))) (set! G2f42@syntax-rules-macro (lambda (G36ca@e) ((lambda (G36cc@t) ((lambda (G36ce@ls/false) (if G36ce@ls/false (apply (lambda (G36d0@lits G36d1@pat* G36d2@tmp*) (begin (G2f5c@verify-literals G36d0@lits G36ca@e) (G2f0c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36d0@lits (map (lambda (G36d6@pat G36d7@tmp) ((lambda (G36da@t) ((lambda (G36dc@ls/false) (if G36dc@ls/false (apply (lambda (G36de@rest) (list (cons 'g G36de@rest) (list 'syntax G36d7@tmp))) G36dc@ls/false) ((lambda (G36e0@t) ((lambda (G36e2@ls/false) (if G36e2@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid syntax-rules pattern" G36ca@e G36d6@pat)) G36e2@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G36e0@t))) (G2f56@syntax-dispatch G36e0@t '_))) G36da@t))) (G2f56@syntax-dispatch G36da@t '(_ . any)))) G36d6@pat)) G36d1@pat* G36d2@tmp*)))))))) G36ce@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G36cc@t))) (G2f56@syntax-dispatch G36cc@t '(_ each-any . #(each (any any)))))) G36ca@e))) (set! G2f44@quasiquote-macro ((lambda () ((lambda (G36e5@datum G3703@quasicons* G3705@quasicons G3707@quasiappend G3709@quasivector G370b@vquasi G370d@quasi) (begin (set! G36e5@datum (lambda (G37e8@x) (list (G2ee0@scheme-stx 'quote) (G2d3f@mkstx G37e8@x '() '() '())))) (set! G3703@quasicons* (lambda (G37e0@x G37e1@y) ((letrec ((G37e4@f (lambda (G37e6@x) (if (null? G37e6@x) G37e1@y (G3705@quasicons (car G37e6@x) (G37e4@f (cdr G37e6@x))))))) G37e4@f) G37e0@x))) (set! G3705@quasicons (lambda (G37ba@x G37bb@y) ((lambda (G37be@t) ((lambda (G37c0@ls/false) (if G37c0@ls/false (apply (lambda (G37c2@dy) ((lambda (G37c4@t) ((lambda (G37c6@ls/false) (if G37c6@ls/false (apply (lambda (G37c8@dx) (list (G2ee0@scheme-stx 'quote) (cons G37c8@dx G37c2@dy))) G37c6@ls/false) ((lambda (G37ca@t) ((lambda (G37cc@ls/false) (if G37cc@ls/false (apply (lambda () ((lambda (G37ce@t) ((lambda (G37d0@ls/false) (if G37d0@ls/false (apply (lambda () (list (G2ee0@scheme-stx 'list) G37ba@x)) G37d0@ls/false) ((lambda (G37d2@t) ((lambda (G37d4@ls/false) (if G37d4@ls/false (apply (lambda () (list (G2ee0@scheme-stx 'cons) G37ba@x G37bb@y)) G37d4@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G37d2@t))) (G2f56@syntax-dispatch G37d2@t '_))) G37ce@t))) (G2f56@syntax-dispatch G37ce@t '()))) G37c2@dy)) G37cc@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G37ca@t))) (G2f56@syntax-dispatch G37ca@t '_))) G37c4@t))) (G2f56@syntax-dispatch G37c4@t '(#(scheme-id quote) any)))) G37ba@x)) G37c0@ls/false) ((lambda (G37d6@t) ((lambda (G37d8@ls/false) (if G37d8@ls/false (apply (lambda (G37da@stuff) (cons* (G2ee0@scheme-stx 'list) G37ba@x G37da@stuff)) G37d8@ls/false) ((lambda (G37dc@t) ((lambda (G37de@ls/false) (if G37de@ls/false (apply (lambda () (list (G2ee0@scheme-stx 'cons) G37ba@x G37bb@y)) G37de@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G37dc@t))) (G2f56@syntax-dispatch G37dc@t '_))) G37d6@t))) (G2f56@syntax-dispatch G37d6@t '(#(scheme-id list) . each-any)))) G37be@t))) (G2f56@syntax-dispatch G37be@t '(#(scheme-id quote) any)))) G37bb@y))) (set! G3707@quasiappend (lambda (G37a0@x G37a1@y) ((lambda (G37a4@ls) (if (null? G37a4@ls) (list (G2ee0@scheme-stx 'quote) '()) (if (null? (cdr G37a4@ls)) (car G37a4@ls) (cons* (G2ee0@scheme-stx 'append) G37a4@ls)))) ((letrec ((G37a6@f (lambda (G37a8@x) (if (null? G37a8@x) ((lambda (G37aa@t) ((lambda (G37ac@ls/false) (if G37ac@ls/false (apply (lambda () '()) G37ac@ls/false) ((lambda (G37ae@t) ((lambda (G37b0@ls/false) (if G37b0@ls/false (apply (lambda () (list G37a1@y)) G37b0@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G37ae@t))) (G2f56@syntax-dispatch G37ae@t '_))) G37aa@t))) (G2f56@syntax-dispatch G37aa@t '(#(scheme-id quote) ())))) G37a1@y) ((lambda (G37b2@t) ((lambda (G37b4@ls/false) (if G37b4@ls/false (apply (lambda () (G37a6@f (cdr G37a8@x))) G37b4@ls/false) ((lambda (G37b6@t) ((lambda (G37b8@ls/false) (if G37b8@ls/false (apply (lambda () (cons (car G37a8@x) (G37a6@f (cdr G37a8@x)))) G37b8@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G37b6@t))) (G2f56@syntax-dispatch G37b6@t '_))) G37b2@t))) (G2f56@syntax-dispatch G37b2@t '(#(scheme-id quote) ())))) (car G37a8@x)))))) G37a6@f) G37a0@x)))) (set! G3709@quasivector (lambda (G376e@x) ((lambda (G3770@pat-x) ((lambda (G3772@t) ((lambda (G3774@ls/false) (if G3774@ls/false (apply (lambda (G3776@x*) (list (G2ee0@scheme-stx 'quote) (list->vector G3776@x*))) G3774@ls/false) ((lambda (G3778@t) ((lambda (G377a@ls/false) (if G377a@ls/false (apply (lambda () ((letrec ((G377c@f (lambda (G377e@x G377f@k) ((lambda (G3782@t) ((lambda (G3784@ls/false) (if G3784@ls/false (apply (lambda (G3786@x*) (G377f@k (map (lambda (G3788@x) (list (G2ee0@scheme-stx 'quote) G3788@x)) G3786@x*))) G3784@ls/false) ((lambda (G378a@t) ((lambda (G378c@ls/false) (if G378c@ls/false (apply (lambda (G378e@x*) (G377f@k G378e@x*)) G378c@ls/false) ((lambda (G3790@t) ((lambda (G3792@ls/false) (if G3792@ls/false (apply (lambda (G3794@x G3795@y) (G377c@f G3795@y (lambda (G3798@ls) (G377f@k (cons G3794@x G3798@ls))))) G3792@ls/false) ((lambda (G379a@t) ((lambda (G379c@ls/false) (if G379c@ls/false (apply (lambda () (list (G2ee0@scheme-stx 'list->vector) G3770@pat-x)) G379c@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G379a@t))) (G2f56@syntax-dispatch G379a@t '_))) G3790@t))) (G2f56@syntax-dispatch G3790@t '(#(scheme-id cons) any any)))) G378a@t))) (G2f56@syntax-dispatch G378a@t '(#(scheme-id list) . each-any)))) G3782@t))) (G2f56@syntax-dispatch G3782@t '(#(scheme-id quote) each-any)))) G377e@x)))) G377c@f) G376e@x (lambda (G379e@ls) (cons* (G2ee0@scheme-stx 'vector) G379e@ls)))) G377a@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3778@t))) (G2f56@syntax-dispatch G3778@t '_))) G3772@t))) (G2f56@syntax-dispatch G3772@t '(#(scheme-id quote) each-any)))) G3770@pat-x)) G376e@x))) (set! G370b@vquasi (lambda (G374c@p G374d@lev) ((lambda (G3750@t) ((lambda (G3752@ls/false) (if G3752@ls/false (apply (lambda (G3754@p G3755@q) ((lambda (G3758@t) ((lambda (G375a@ls/false) (if G375a@ls/false (apply (lambda (G375c@p) (if (= G374d@lev '0) (G3703@quasicons* G375c@p (G370b@vquasi G3755@q G374d@lev)) (G3705@quasicons (G3705@quasicons (G36e5@datum 'unquote) (G370d@quasi G375c@p (- G374d@lev '1))) (G370b@vquasi G3755@q G374d@lev)))) G375a@ls/false) ((lambda (G375e@t) ((lambda (G3760@ls/false) (if G3760@ls/false (apply (lambda (G3762@p) (if (= G374d@lev '0) (G3707@quasiappend G3762@p (G370b@vquasi G3755@q G374d@lev)) (G3705@quasicons (G3705@quasicons (G36e5@datum 'unquote-splicing) (G370d@quasi G3762@p (- G374d@lev '1))) (G370b@vquasi G3755@q G374d@lev)))) G3760@ls/false) ((lambda (G3764@t) ((lambda (G3766@ls/false) (if G3766@ls/false (apply (lambda (G3768@p) (G3705@quasicons (G370d@quasi G3768@p G374d@lev) (G370b@vquasi G3755@q G374d@lev))) G3766@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3764@t))) (G2f56@syntax-dispatch G3764@t 'any))) G375e@t))) (G2f56@syntax-dispatch G375e@t '(#(scheme-id unquote-splicing) . each-any)))) G3758@t))) (G2f56@syntax-dispatch G3758@t '(#(scheme-id unquote) . each-any)))) G3754@p)) G3752@ls/false) ((lambda (G376a@t) ((lambda (G376c@ls/false) (if G376c@ls/false (apply (lambda () (list (G2ee0@scheme-stx 'quote) '())) G376c@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G376a@t))) (G2f56@syntax-dispatch G376a@t '()))) G3750@t))) (G2f56@syntax-dispatch G3750@t '(any . any)))) G374c@p))) (set! G370d@quasi (lambda (G3716@p G3717@lev) ((lambda (G371a@t) ((lambda (G371c@ls/false) (if G371c@ls/false (apply (lambda (G371e@p) (if (= G3717@lev '0) G371e@p (G3705@quasicons (G36e5@datum 'unquote) (G370d@quasi (list G371e@p) (- G3717@lev '1))))) G371c@ls/false) ((lambda (G3720@t) ((lambda (G3722@ls/false) (if G3722@ls/false (apply (lambda (G3724@p G3725@q) (if (= G3717@lev '0) (G3703@quasicons* G3724@p (G370d@quasi G3725@q G3717@lev)) (G3705@quasicons (G3705@quasicons (G36e5@datum 'unquote) (G370d@quasi G3724@p (- G3717@lev '1))) (G370d@quasi G3725@q G3717@lev)))) G3722@ls/false) ((lambda (G3728@t) ((lambda (G372a@ls/false) (if G372a@ls/false (apply (lambda (G372c@p G372d@q) (if (= G3717@lev '0) (G3707@quasiappend G372c@p (G370d@quasi G372d@q G3717@lev)) (G3705@quasicons (G3705@quasicons (G36e5@datum 'unquote-splicing) (G370d@quasi G372c@p (- G3717@lev '1))) (G370d@quasi G372d@q G3717@lev)))) G372a@ls/false) ((lambda (G3730@t) ((lambda (G3732@ls/false) (if G3732@ls/false (apply (lambda (G3734@p) (G3705@quasicons (G36e5@datum 'quasiquote) (G370d@quasi (list G3734@p) (+ G3717@lev '1)))) G3732@ls/false) ((lambda (G3736@t) ((lambda (G3738@ls/false) (if G3738@ls/false (apply (lambda (G373a@p G373b@q) (G3705@quasicons (G370d@quasi G373a@p G3717@lev) (G370d@quasi G373b@q G3717@lev))) G3738@ls/false) ((lambda (G373e@t) ((lambda (G3740@ls/false) (if (and G3740@ls/false (apply (lambda (G3742@x) (not (G2d1f@stx? G3742@x))) G3740@ls/false)) (apply (lambda (G3744@x) (G3709@quasivector (G370b@vquasi G3744@x G3717@lev))) G3740@ls/false) ((lambda (G3746@t) ((lambda (G3748@ls/false) (if G3748@ls/false (apply (lambda (G374a@p) (list (G2ee0@scheme-stx 'quote) G374a@p)) G3748@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3746@t))) (G2f56@syntax-dispatch G3746@t 'any))) G373e@t))) (G2f56@syntax-dispatch G373e@t '#(vector each-any)))) G3736@t))) (G2f56@syntax-dispatch G3736@t '(any . any)))) G3730@t))) (G2f56@syntax-dispatch G3730@t '(#(scheme-id quasiquote) any)))) G3728@t))) (G2f56@syntax-dispatch G3728@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3720@t))) (G2f56@syntax-dispatch G3720@t '((#(scheme-id unquote) . each-any) . any)))) G371a@t))) (G2f56@syntax-dispatch G371a@t '(#(scheme-id unquote) any)))) G3716@p))) (lambda (G370e@x) ((lambda (G3710@t) ((lambda (G3712@ls/false) (if G3712@ls/false (apply (lambda (G3714@e) (G370d@quasi G3714@e '0)) G3712@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3710@t))) (G2f56@syntax-dispatch G3710@t '(_ any)))) G370e@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f46@quasisyntax-macro ((lambda () ((lambda (G37eb@quasi) (begin (set! G37eb@quasi (lambda (G3803@p G3804@lev) ((lambda (G3807@t) ((lambda (G3809@ls/false) (if G3809@ls/false (apply (lambda (G380b@p) (if (= G3804@lev '0) ((lambda (G380d@g) (values (list G380d@g) (list G380b@p) G380d@g)) (gensym)) (call-with-values (lambda () (G37eb@quasi G380b@p (- G3804@lev '1))) (lambda (G3812@G380f G3813@G3810 G3814@G3811) ((lambda (G3818@p G3819@rhs* G381a@lhs*) (values G381a@lhs* G3819@rhs* (list 'unsyntax G3818@p))) G3814@G3811 G3813@G3810 G3812@G380f))))) G3809@ls/false) ((lambda (G381e@t) ((lambda (G3820@ls/false) (if (and G3820@ls/false (apply (lambda () (= G3804@lev '0)) G3820@ls/false)) (apply (lambda () (G3041@syntax-violation '#f '"incorrect use of unsyntax" G3803@p)) G3820@ls/false) ((lambda (G3822@t) ((lambda (G3824@ls/false) (if G3824@ls/false (apply (lambda (G3826@p* G3827@q) (call-with-values (lambda () (G37eb@quasi G3827@q G3804@lev)) (lambda (G382d@G382a G382e@G382b G382f@G382c) ((lambda (G3833@q G3834@rhs* G3835@lhs*) (if (= G3804@lev '0) ((lambda (G3839@g*) (values (append G3839@g* G3835@lhs*) (append G3826@p* G3834@rhs*) (append G3839@g* G3833@q))) (map (lambda (G383b@x) (gensym)) G3826@p*)) (call-with-values (lambda () (G37eb@quasi G3826@p* (- G3804@lev '1))) (lambda (G3840@G383d G3841@G383e G3842@G383f) ((lambda (G3846@p* G3847@rhs2* G3848@lhs2*) (values (append G3848@lhs2* G3835@lhs*) (append G3847@rhs2* G3834@rhs*) (cons (cons 'unsyntax G3846@p*) G3833@q))) G3842@G383f G3841@G383e G3840@G383d))))) G382f@G382c G382e@G382b G382d@G382a)))) G3824@ls/false) ((lambda (G384c@t) ((lambda (G384e@ls/false) (if G384e@ls/false (apply (lambda (G3850@p* G3851@q) (call-with-values (lambda () (G37eb@quasi G3851@q G3804@lev)) (lambda (G3857@G3854 G3858@G3855 G3859@G3856) ((lambda (G385d@q G385e@rhs* G385f@lhs*) (if (= G3804@lev '0) ((lambda (G3863@g*) (values (append (map (lambda (G3865@g) (cons G3865@g '(...))) G3863@g*) G385f@lhs*) (append G3850@p* G385e@rhs*) (append (apply append (map (lambda (G3867@g) (cons G3867@g '(...))) G3863@g*)) G385d@q))) (map (lambda (G3869@x) (gensym)) G3850@p*)) (call-with-values (lambda () (G37eb@quasi G3850@p* (- G3804@lev '1))) (lambda (G386e@G386b G386f@G386c G3870@G386d) ((lambda (G3874@p* G3875@rhs2* G3876@lhs2*) (values (append G3876@lhs2* G385f@lhs*) (append G3875@rhs2* G385e@rhs*) (cons (cons 'unsyntax-splicing G3874@p*) G385d@q))) G3870@G386d G386f@G386c G386e@G386b))))) G3859@G3856 G3858@G3855 G3857@G3854)))) G384e@ls/false) ((lambda (G387a@t) ((lambda (G387c@ls/false) (if (and G387c@ls/false (apply (lambda () (= G3804@lev '0)) G387c@ls/false)) (apply (lambda () (G3041@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3803@p)) G387c@ls/false) ((lambda (G387e@t) ((lambda (G3880@ls/false) (if G3880@ls/false (apply (lambda (G3882@p) (call-with-values (lambda () (G37eb@quasi G3882@p (+ G3804@lev '1))) (lambda (G3887@G3884 G3888@G3885 G3889@G3886) ((lambda (G388d@p G388e@rhs* G388f@lhs*) (values G388f@lhs* G388e@rhs* (list 'quasisyntax G388d@p))) G3889@G3886 G3888@G3885 G3887@G3884)))) G3880@ls/false) ((lambda (G3893@t) ((lambda (G3895@ls/false) (if G3895@ls/false (apply (lambda (G3897@p G3898@q) (call-with-values (lambda () (G37eb@quasi G3897@p G3804@lev)) (lambda (G38a1@G389b G38a2@G389c G38a3@G389d) (call-with-values (lambda () (G37eb@quasi G3898@q G3804@lev)) (lambda (G38a7@G389e G38a8@G389f G38a9@G38a0) ((lambda (G38ad@q G38ae@rhs2* G38af@lhs2* G38b0@p G38b1@rhs* G38b2@lhs*) (values (append G38af@lhs2* G38b2@lhs*) (append G38ae@rhs2* G38b1@rhs*) (cons G38b0@p G38ad@q))) G38a9@G38a0 G38a8@G389f G38a7@G389e G38a3@G389d G38a2@G389c G38a1@G389b)))))) G3895@ls/false) ((lambda (G38b9@t) ((lambda (G38bb@ls/false) (if G38bb@ls/false (apply (lambda (G38bd@x*) (call-with-values (lambda () (G37eb@quasi G38bd@x* G3804@lev)) (lambda (G38c2@G38bf G38c3@G38c0 G38c4@G38c1) ((lambda (G38c8@x* G38c9@rhs* G38ca@lhs*) (values G38ca@lhs* G38c9@rhs* (list->vector G38c8@x*))) G38c4@G38c1 G38c3@G38c0 G38c2@G38bf)))) G38bb@ls/false) ((lambda (G38ce@t) ((lambda (G38d0@ls/false) (if G38d0@ls/false (apply (lambda () (values '() '() G3803@p)) G38d0@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G38ce@t))) (G2f56@syntax-dispatch G38ce@t '_))) G38b9@t))) (G2f56@syntax-dispatch G38b9@t '#(vector each-any)))) G3893@t))) (G2f56@syntax-dispatch G3893@t '(any . any)))) G387e@t))) (G2f56@syntax-dispatch G387e@t '(#(scheme-id quasisyntax) any)))) G387a@t))) (G2f56@syntax-dispatch G387a@t '#(scheme-id unsyntax-splicing)))) G384c@t))) (G2f56@syntax-dispatch G384c@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3822@t))) (G2f56@syntax-dispatch G3822@t '((#(scheme-id unsyntax) . each-any) . any)))) G381e@t))) (G2f56@syntax-dispatch G381e@t '#(scheme-id unsyntax)))) G3807@t))) (G2f56@syntax-dispatch G3807@t '(#(scheme-id unsyntax) any)))) G3803@p))) (lambda (G37ec@x) ((lambda (G37ee@t) ((lambda (G37f0@ls/false) (if G37f0@ls/false (apply (lambda (G37f2@e) (call-with-values (lambda () (G37eb@quasi G37f2@e '0)) (lambda (G37f7@G37f4 G37f8@G37f5 G37f9@G37f6) ((lambda (G37fd@v G37fe@rhs* G37ff@lhs*) (G2f0c@bless (list 'syntax-case (cons 'list G37fe@rhs*) '() (list G37ff@lhs* (list 'syntax G37fd@v))))) G37f9@G37f6 G37f8@G37f5 G37f7@G37f4)))) G37f0@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G37ee@t))) (G2f56@syntax-dispatch G37ee@t '(_ any)))) G37ec@x)))) '#f)))) (set! G2f48@define-struct-macro (lambda (G38d2@stx) (G3041@syntax-violation '#f '"define-struct not supported" G38d2@stx))) (set! G2f4a@define-record-type-macro (lambda (G38d4@x) ((lambda (G38d7@id G38d9@get-record-name G38db@get-record-constructor-name G38dd@get-record-predicate-name G38df@get-clause G38e1@foo-rtd-code G38e3@parent-rtd-code G38e5@parent-rcd-code G38e7@foo-rcd-code G38e9@get-protocol-code G38eb@get-fields G38ed@get-mutator-indices G38ef@get-mutators G38f1@get-accessors G38f3@enumerate G38f5@do-define-record G38f7@verify-clauses) (begin (set! G38d7@id (lambda (G3aca@ctxt . G3acc@str*) (G3045@datum->syntax G3aca@ctxt (string->symbol (apply string-append (map (lambda (G3ace@x) (if (symbol? G3ace@x) (symbol->string G3ace@x) (if (string? G3ace@x) G3ace@x (assertion-violation 'define-record-type '"BUG")))) G3acc@str*)))))) (set! G38d9@get-record-name (lambda (G3ab8@spec) ((lambda (G3aba@t) ((lambda (G3abc@ls/false) (if G3abc@ls/false (apply (lambda (G3abe@foo G3abf@make-foo G3ac0@foo?) G3abe@foo) G3abc@ls/false) ((lambda (G3ac4@t) ((lambda (G3ac6@ls/false) (if G3ac6@ls/false (apply (lambda (G3ac8@foo) G3ac8@foo) G3ac6@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3ac4@t))) (G2f56@syntax-dispatch G3ac4@t 'any))) G3aba@t))) (G2f56@syntax-dispatch G3aba@t '(any any any)))) G3ab8@spec))) (set! G38db@get-record-constructor-name (lambda (G3aa4@spec) ((lambda (G3aa6@t) ((lambda (G3aa8@ls/false) (if G3aa8@ls/false (apply (lambda (G3aaa@foo G3aab@make-foo G3aac@foo?) G3aab@make-foo) G3aa8@ls/false) ((lambda (G3ab0@t) ((lambda (G3ab2@ls/false) (if (and G3ab2@ls/false (apply (lambda (G3ab4@foo) (G2d57@id? G3ab4@foo)) G3ab2@ls/false)) (apply (lambda (G3ab6@foo) (G38d7@id G3ab6@foo '"make-" (G2d6d@stx->datum G3ab6@foo))) G3ab2@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3ab0@t))) (G2f56@syntax-dispatch G3ab0@t 'any))) G3aa6@t))) (G2f56@syntax-dispatch G3aa6@t '(any any any)))) G3aa4@spec))) (set! G38dd@get-record-predicate-name (lambda (G3a90@spec) ((lambda (G3a92@t) ((lambda (G3a94@ls/false) (if G3a94@ls/false (apply (lambda (G3a96@foo G3a97@make-foo G3a98@foo?) G3a98@foo?) G3a94@ls/false) ((lambda (G3a9c@t) ((lambda (G3a9e@ls/false) (if (and G3a9e@ls/false (apply (lambda (G3aa0@foo) (G2d57@id? G3aa0@foo)) G3a9e@ls/false)) (apply (lambda (G3aa2@foo) (G38d7@id G3aa2@foo (G2d6d@stx->datum G3aa2@foo) '"?")) G3a9e@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a9c@t))) (G2f56@syntax-dispatch G3a9c@t 'any))) G3a92@t))) (G2f56@syntax-dispatch G3a92@t '(any any any)))) G3a90@spec))) (set! G38df@get-clause (lambda (G3a7e@id G3a7f@ls) ((lambda (G3a82@t) ((lambda (G3a84@ls/false) (if G3a84@ls/false (apply (lambda () '#f) G3a84@ls/false) ((lambda (G3a86@t) ((lambda (G3a88@ls/false) (if G3a88@ls/false (apply (lambda (G3a8a@x G3a8b@rest G3a8c@ls) (if (G2d5f@free-id=? (G2f0c@bless G3a7e@id) G3a8a@x) (cons G3a8a@x G3a8b@rest) (G38df@get-clause G3a7e@id G3a8c@ls))) G3a88@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a86@t))) (G2f56@syntax-dispatch G3a86@t '((any . any) . any)))) G3a82@t))) (G2f56@syntax-dispatch G3a82@t '()))) G3a7f@ls))) (set! G38e1@foo-rtd-code (lambda (G3a2c@name G3a2d@clause* G3a2e@parent-rtd-code) ((lambda (G3a33@convert-field-spec*) (begin (set! G3a33@convert-field-spec* (lambda (G3a64@ls) (list->vector (map (lambda (G3a66@x) ((lambda (G3a68@t) ((lambda (G3a6a@ls/false) (if G3a6a@ls/false (apply (lambda (G3a6c@name G3a6d@rest) (list 'mutable G3a6c@name)) G3a6a@ls/false) ((lambda (G3a70@t) ((lambda (G3a72@ls/false) (if G3a72@ls/false (apply (lambda (G3a74@name G3a75@rest) (list 'immutable G3a74@name)) G3a72@ls/false) ((lambda (G3a78@t) ((lambda (G3a7a@ls/false) (if G3a7a@ls/false (apply (lambda (G3a7c@name) (list 'immutable G3a7c@name)) G3a7a@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a78@t))) (G2f56@syntax-dispatch G3a78@t 'any))) G3a70@t))) (G2f56@syntax-dispatch G3a70@t '(#(scheme-id immutable) any . any)))) G3a68@t))) (G2f56@syntax-dispatch G3a68@t '(#(scheme-id mutable) any . any)))) G3a66@x)) G3a64@ls)))) ((lambda (G3a34@uid-code G3a35@sealed? G3a36@opaque? G3a37@fields) (G2f0c@bless (list 'make-record-type-descriptor (list 'quote G3a2c@name) G3a2e@parent-rtd-code G3a34@uid-code G3a35@sealed? G3a36@opaque? G3a37@fields))) ((lambda (G3a3c@t) ((lambda (G3a3e@ls/false) (if G3a3e@ls/false (apply (lambda () (list 'quote (gensym))) G3a3e@ls/false) ((lambda (G3a40@t) ((lambda (G3a42@ls/false) (if G3a42@ls/false (apply (lambda (G3a44@uid) (list 'quote G3a44@uid)) G3a42@ls/false) ((lambda (G3a46@t) ((lambda (G3a48@ls/false) (if G3a48@ls/false (apply (lambda () '#f) G3a48@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a46@t))) (G2f56@syntax-dispatch G3a46@t '_))) G3a40@t))) (G2f56@syntax-dispatch G3a40@t '(_ any)))) G3a3c@t))) (G2f56@syntax-dispatch G3a3c@t '(_)))) (G38df@get-clause 'nongenerative G3a2d@clause*)) ((lambda (G3a4a@t) ((lambda (G3a4c@ls/false) (if G3a4c@ls/false (apply (lambda () '#t) G3a4c@ls/false) ((lambda (G3a4e@t) ((lambda (G3a50@ls/false) (if G3a50@ls/false (apply (lambda () '#f) G3a50@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a4e@t))) (G2f56@syntax-dispatch G3a4e@t '_))) G3a4a@t))) (G2f56@syntax-dispatch G3a4a@t '(_ #(atom #t))))) (G38df@get-clause 'sealed G3a2d@clause*)) ((lambda (G3a52@t) ((lambda (G3a54@ls/false) (if G3a54@ls/false (apply (lambda () '#t) G3a54@ls/false) ((lambda (G3a56@t) ((lambda (G3a58@ls/false) (if G3a58@ls/false (apply (lambda () '#f) G3a58@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a56@t))) (G2f56@syntax-dispatch G3a56@t '_))) G3a52@t))) (G2f56@syntax-dispatch G3a52@t '(_ #(atom #t))))) (G38df@get-clause 'opaque G3a2d@clause*)) ((lambda (G3a5a@t) ((lambda (G3a5c@ls/false) (if G3a5c@ls/false (apply (lambda (G3a5e@field-spec*) (list 'quote (G3a33@convert-field-spec* G3a5e@field-spec*))) G3a5c@ls/false) ((lambda (G3a60@t) ((lambda (G3a62@ls/false) (if G3a62@ls/false (apply (lambda () ''#()) G3a62@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a60@t))) (G2f56@syntax-dispatch G3a60@t '_))) G3a5a@t))) (G2f56@syntax-dispatch G3a5a@t '(_ . each-any)))) (G38df@get-clause 'fields G3a2d@clause*))))) '#f))) (set! G38e3@parent-rtd-code (lambda (G3a14@clause*) ((lambda (G3a16@t) ((lambda (G3a18@ls/false) (if G3a18@ls/false (apply (lambda (G3a1a@name) (list 'record-type-descriptor G3a1a@name)) G3a18@ls/false) ((lambda (G3a1c@t) ((lambda (G3a1e@ls/false) (if G3a1e@ls/false (apply (lambda () ((lambda (G3a20@t) ((lambda (G3a22@ls/false) (if G3a22@ls/false (apply (lambda (G3a24@rtd G3a25@rcd) G3a24@rtd) G3a22@ls/false) ((lambda (G3a28@t) ((lambda (G3a2a@ls/false) (if G3a2a@ls/false (apply (lambda () '#f) G3a2a@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a28@t))) (G2f56@syntax-dispatch G3a28@t '#(atom #f)))) G3a20@t))) (G2f56@syntax-dispatch G3a20@t '(_ any any)))) (G38df@get-clause 'parent-rtd G3a14@clause*))) G3a1e@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a1c@t))) (G2f56@syntax-dispatch G3a1c@t '#(atom #f)))) G3a16@t))) (G2f56@syntax-dispatch G3a16@t '(_ any)))) (G38df@get-clause 'parent G3a14@clause*)))) (set! G38e5@parent-rcd-code (lambda (G39fc@clause*) ((lambda (G39fe@t) ((lambda (G3a00@ls/false) (if G3a00@ls/false (apply (lambda (G3a02@name) (list 'record-constructor-descriptor G3a02@name)) G3a00@ls/false) ((lambda (G3a04@t) ((lambda (G3a06@ls/false) (if G3a06@ls/false (apply (lambda () ((lambda (G3a08@t) ((lambda (G3a0a@ls/false) (if G3a0a@ls/false (apply (lambda (G3a0c@rtd G3a0d@rcd) G3a0d@rcd) G3a0a@ls/false) ((lambda (G3a10@t) ((lambda (G3a12@ls/false) (if G3a12@ls/false (apply (lambda () '#f) G3a12@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a10@t))) (G2f56@syntax-dispatch G3a10@t '#(atom #f)))) G3a08@t))) (G2f56@syntax-dispatch G3a08@t '(_ any any)))) (G38df@get-clause 'parent-rtd G39fc@clause*))) G3a06@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3a04@t))) (G2f56@syntax-dispatch G3a04@t '#(atom #f)))) G39fe@t))) (G2f56@syntax-dispatch G39fe@t '(_ any)))) (G38df@get-clause 'parent G39fc@clause*)))) (set! G38e7@foo-rcd-code (lambda (G39f4@clause* G39f5@foo-rtd G39f6@protocol G39f7@parent-rcd-code) (list 'make-record-constructor-descriptor G39f5@foo-rtd G39f7@parent-rcd-code G39f6@protocol))) (set! G38e9@get-protocol-code (lambda (G39e8@clause*) ((lambda (G39ea@t) ((lambda (G39ec@ls/false) (if G39ec@ls/false (apply (lambda (G39ee@expr) G39ee@expr) G39ec@ls/false) ((lambda (G39f0@t) ((lambda (G39f2@ls/false) (if G39f2@ls/false (apply (lambda () '#f) G39f2@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G39f0@t))) (G2f56@syntax-dispatch G39f0@t '_))) G39ea@t))) (G2f56@syntax-dispatch G39ea@t '(_ any)))) (G38df@get-clause 'protocol G39e8@clause*)))) (set! G38eb@get-fields (lambda (G39d6@clause*) ((lambda (G39d8@t) ((lambda (G39da@ls/false) (if G39da@ls/false (apply (lambda () '()) G39da@ls/false) ((lambda (G39dc@t) ((lambda (G39de@ls/false) (if G39de@ls/false (apply (lambda (G39e0@f*) G39e0@f*) G39de@ls/false) ((lambda (G39e2@t) ((lambda (G39e4@ls/false) (if G39e4@ls/false (apply (lambda (G39e6@rest) (G38eb@get-fields G39e6@rest)) G39e4@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G39e2@t))) (G2f56@syntax-dispatch G39e2@t '(_ . any)))) G39dc@t))) (G2f56@syntax-dispatch G39dc@t '((#(scheme-id fields) . each-any) . _)))) G39d8@t))) (G2f56@syntax-dispatch G39d8@t '()))) G39d6@clause*))) (set! G38ed@get-mutator-indices (lambda (G39be@fields) ((letrec ((G39c0@f (lambda (G39c2@fields G39c3@i) ((lambda (G39c6@t) ((lambda (G39c8@ls/false) (if G39c8@ls/false (apply (lambda () '()) G39c8@ls/false) ((lambda (G39ca@t) ((lambda (G39cc@ls/false) (if G39cc@ls/false (apply (lambda (G39ce@rest) (cons G39c3@i (G39c0@f G39ce@rest (+ G39c3@i '1)))) G39cc@ls/false) ((lambda (G39d0@t) ((lambda (G39d2@ls/false) (if G39d2@ls/false (apply (lambda (G39d4@rest) (G39c0@f G39d4@rest (+ G39c3@i '1))) G39d2@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G39d0@t))) (G2f56@syntax-dispatch G39d0@t '(_ . any)))) G39ca@t))) (G2f56@syntax-dispatch G39ca@t '((#(scheme-id mutable) . _) . any)))) G39c6@t))) (G2f56@syntax-dispatch G39c6@t '()))) G39c2@fields)))) G39c0@f) G39be@fields '0))) (set! G38ef@get-mutators (lambda (G3994@foo G3995@fields) ((lambda (G3999@gen-name) (begin (set! G3999@gen-name (lambda (G39bc@x) (G3045@datum->syntax G3994@foo (string->symbol (string-append (symbol->string (G3047@syntax->datum G3994@foo)) '"-" (symbol->string (G3047@syntax->datum G39bc@x)) '"-set!"))))) ((letrec ((G399a@f (lambda (G399c@fields) ((lambda (G399e@t) ((lambda (G39a0@ls/false) (if G39a0@ls/false (apply (lambda () '()) G39a0@ls/false) ((lambda (G39a2@t) ((lambda (G39a4@ls/false) (if G39a4@ls/false (apply (lambda (G39a6@name G39a7@accessor G39a8@mutator G39a9@rest) (cons G39a8@mutator (G399a@f G39a9@rest))) G39a4@ls/false) ((lambda (G39ae@t) ((lambda (G39b0@ls/false) (if G39b0@ls/false (apply (lambda (G39b2@name G39b3@rest) (cons (G3999@gen-name G39b2@name) (G399a@f G39b3@rest))) G39b0@ls/false) ((lambda (G39b6@t) ((lambda (G39b8@ls/false) (if G39b8@ls/false (apply (lambda (G39ba@rest) (G399a@f G39ba@rest)) G39b8@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G39b6@t))) (G2f56@syntax-dispatch G39b6@t '(_ . any)))) G39ae@t))) (G2f56@syntax-dispatch G39ae@t '((#(scheme-id mutable) any) . any)))) G39a2@t))) (G2f56@syntax-dispatch G39a2@t '((#(scheme-id mutable) any any any) . any)))) G399e@t))) (G2f56@syntax-dispatch G399e@t '()))) G399c@fields)))) G399a@f) G3995@fields))) '#f))) (set! G38f1@get-accessors (lambda (G3950@foo G3951@fields) ((lambda (G3955@gen-name) (begin (set! G3955@gen-name (lambda (G3992@x) (G3045@datum->syntax G3950@foo (string->symbol (string-append (symbol->string (G3047@syntax->datum G3950@foo)) '"-" (symbol->string (G3047@syntax->datum G3992@x))))))) (map (lambda (G3956@field) ((lambda (G3958@t) ((lambda (G395a@ls/false) (if (and G395a@ls/false (apply (lambda (G395c@name G395d@accessor G395e@mutator) (G2d57@id? G395d@accessor)) G395a@ls/false)) (apply (lambda (G3962@name G3963@accessor G3964@mutator) G3963@accessor) G395a@ls/false) ((lambda (G3968@t) ((lambda (G396a@ls/false) (if (and G396a@ls/false (apply (lambda (G396c@name G396d@accessor) (G2d57@id? G396d@accessor)) G396a@ls/false)) (apply (lambda (G3970@name G3971@accessor) G3971@accessor) G396a@ls/false) ((lambda (G3974@t) ((lambda (G3976@ls/false) (if (and G3976@ls/false (apply (lambda (G3978@name) (G2d57@id? G3978@name)) G3976@ls/false)) (apply (lambda (G397a@name) (G3955@gen-name G397a@name)) G3976@ls/false) ((lambda (G397c@t) ((lambda (G397e@ls/false) (if (and G397e@ls/false (apply (lambda (G3980@name) (G2d57@id? G3980@name)) G397e@ls/false)) (apply (lambda (G3982@name) (G3955@gen-name G3982@name)) G397e@ls/false) ((lambda (G3984@t) ((lambda (G3986@ls/false) (if (and G3986@ls/false (apply (lambda (G3988@name) (G2d57@id? G3988@name)) G3986@ls/false)) (apply (lambda (G398a@name) (G3955@gen-name G398a@name)) G3986@ls/false) ((lambda (G398c@t) ((lambda (G398e@ls/false) (if G398e@ls/false (apply (lambda (G3990@others) (G3041@syntax-violation '#f '"invalid field spec" G3956@field)) G398e@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G398c@t))) (G2f56@syntax-dispatch G398c@t 'any))) G3984@t))) (G2f56@syntax-dispatch G3984@t 'any))) G397c@t))) (G2f56@syntax-dispatch G397c@t '(#(scheme-id immutable) any)))) G3974@t))) (G2f56@syntax-dispatch G3974@t '(#(scheme-id mutable) any)))) G3968@t))) (G2f56@syntax-dispatch G3968@t '(#(scheme-id immutable) any any)))) G3958@t))) (G2f56@syntax-dispatch G3958@t '(#(scheme-id mutable) any any any)))) G3956@field)) G3951@fields))) '#f))) (set! G38f3@enumerate (lambda (G3948@ls) ((letrec ((G394a@f (lambda (G394c@ls G394d@i) (if (null? G394c@ls) '() (cons G394d@i (G394a@f (cdr G394c@ls) (+ G394d@i '1))))))) G394a@f) G3948@ls '0))) (set! G38f5@do-define-record (lambda (G3920@namespec G3921@clause*) ((lambda (G3924@foo) ((lambda (G3926@foo-rtd) ((lambda (G3928@foo-rcd) ((lambda (G392a@protocol) ((lambda (G392c@make-foo) ((lambda (G392e@fields) ((lambda (G3930@idx*) ((lambda (G3932@foo-x*) ((lambda (G3934@set-foo-x!*) ((lambda (G3936@set-foo-idx*) ((lambda (G3938@foo?) ((lambda (G393a@foo-rtd-code) ((lambda (G393c@foo-rcd-code) ((lambda (G393e@protocol-code) ((lambda () (G2f0c@bless (cons 'begin (cons (list 'define G3926@foo-rtd G393a@foo-rtd-code) (cons (list 'define G392a@protocol G393e@protocol-code) (cons (list 'define G3928@foo-rcd G393c@foo-rcd-code) (cons (list 'define-syntax G3924@foo (list 'list ''$rtd (list 'syntax G3926@foo-rtd) (list 'syntax G3928@foo-rcd))) (cons (list 'define G3938@foo? (list 'record-predicate G3926@foo-rtd)) (cons (list 'define G392c@make-foo (list 'record-constructor G3928@foo-rcd)) (append (map (lambda (G3940@foo-x G3941@idx) (list 'define G3940@foo-x (list 'record-accessor G3926@foo-rtd G3941@idx))) G3932@foo-x* G3930@idx*) (map (lambda (G3944@set-foo-x! G3945@idx) (list 'define G3944@set-foo-x! (list 'record-mutator G3926@foo-rtd G3945@idx))) G3934@set-foo-x!* G3936@set-foo-idx*))))))))))))) (G38e9@get-protocol-code G3921@clause*))) (G38e7@foo-rcd-code G3921@clause* G3926@foo-rtd G392a@protocol (G38e5@parent-rcd-code G3921@clause*)))) (G38e1@foo-rtd-code G3924@foo G3921@clause* (G38e3@parent-rtd-code G3921@clause*)))) (G38dd@get-record-predicate-name G3920@namespec))) (G38ed@get-mutator-indices G392e@fields))) (G38ef@get-mutators G3924@foo G392e@fields))) (G38f1@get-accessors G3924@foo G392e@fields))) (G38f3@enumerate G392e@fields))) (G38eb@get-fields G3921@clause*))) (G38db@get-record-constructor-name G3920@namespec))) (gensym))) (gensym))) (gensym))) (G38d9@get-record-name G3920@namespec)))) (set! G38f7@verify-clauses (lambda (G3900@x G3901@cls*) ((lambda (G3905@valid-kwds G3907@free-id-member?) (begin (set! G3905@valid-kwds (map G2f0c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3907@free-id-member? (lambda (G391c@x G391d@ls) (and (pair? G391d@ls) (or (G2d5f@free-id=? G391c@x (car G391d@ls)) (G3907@free-id-member? G391c@x (cdr G391d@ls)))))) ((letrec ((G3908@f (lambda (G390a@cls* G390b@seen*) (if (not (null? G390a@cls*)) ((lambda (G390e@t) ((lambda (G3910@ls/false) (if G3910@ls/false (apply (lambda (G3912@kwd G3913@rest) (if (or (not (G2d57@id? G3912@kwd)) (not (G3907@free-id-member? G3912@kwd G3905@valid-kwds))) (G3041@syntax-violation '#f '"not a valid define-record-type keyword" G3912@kwd) (if (G2d65@bound-id-member? G3912@kwd G390b@seen*) (G3041@syntax-violation '#f '"duplicate use of keyword " G3900@x G3912@kwd) (G3908@f (cdr G390a@cls*) (cons G3912@kwd G390b@seen*))))) G3910@ls/false) ((lambda (G3916@t) ((lambda (G3918@ls/false) (if G3918@ls/false (apply (lambda (G391a@cls) (G3041@syntax-violation '#f '"malformed define-record-type clause" G391a@cls)) G3918@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3916@t))) (G2f56@syntax-dispatch G3916@t 'any))) G390e@t))) (G2f56@syntax-dispatch G390e@t '(any . any)))) (car G390a@cls*)) (void))))) G3908@f) G3901@cls* '()))) '#f '#f))) ((lambda (G38f8@t) ((lambda (G38fa@ls/false) (if G38fa@ls/false (apply (lambda (G38fc@namespec G38fd@clause*) (begin (G38f7@verify-clauses G38d4@x G38fd@clause*) (G38f5@do-define-record G38fc@namespec G38fd@clause*))) G38fa@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G38f8@t))) (G2f56@syntax-dispatch G38f8@t '(_ any . each-any)))) G38d4@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f4c@define-condition-type-macro (lambda (G3ad0@x) ((lambda (G3ad3@mkname) (begin (set! G3ad3@mkname (lambda (G3b00@name G3b01@suffix) (G3045@datum->syntax G3b00@name (string->symbol (string-append (symbol->string (G3047@syntax->datum G3b00@name)) G3b01@suffix))))) ((lambda (G3ad4@t) ((lambda (G3ad6@ls/false) (if (and G3ad6@ls/false (apply (lambda (G3ad8@ctxt G3ad9@name G3ada@super G3adb@constructor G3adc@predicate G3add@field* G3ade@accessor*) (and (G2d57@id? G3ad9@name) (G2d57@id? G3ada@super) (G2d57@id? G3adb@constructor) (G2d57@id? G3adc@predicate) (for-all G2d57@id? G3add@field*) (for-all G2d57@id? G3ade@accessor*))) G3ad6@ls/false)) (apply (lambda (G3ae6@ctxt G3ae7@name G3ae8@super G3ae9@constructor G3aea@predicate G3aeb@field* G3aec@accessor*) ((lambda (G3af4@aux-accessor*) (G2f0c@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3ae7@name G3ae9@constructor (gensym)) (cons (list 'parent G3ae8@super) (cons (cons 'fields (map (lambda (G3af6@field G3af7@aux) (list 'immutable G3af6@field G3af7@aux)) G3aeb@field* G3af4@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3aea@predicate (list 'condition-predicate (list 'record-type-descriptor G3ae7@name))) (map (lambda (G3afa@accessor G3afb@aux) (list 'define G3afa@accessor (list 'condition-accessor (list 'record-type-descriptor G3ae7@name) G3afb@aux))) G3aec@accessor* G3af4@aux-accessor*)))))) (map (lambda (G3afe@x) (gensym)) G3aec@accessor*))) G3ad6@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3ad4@t))) (G2f56@syntax-dispatch G3ad4@t '(any any any any any . #(each (any any)))))) G3ad0@x))) '#f))) (set! G2f4e@incorrect-usage-macro (lambda (G3b04@e) (G3041@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b04@e))) (set! G2f50@parameterize-macro (lambda (G3b06@e) ((lambda (G3b08@t) ((lambda (G3b0a@ls/false) (if G3b0a@ls/false (apply (lambda (G3b0c@b G3b0d@b*) (G2f0c@bless (cons 'let (cons '() (cons G3b0c@b G3b0d@b*))))) G3b0a@ls/false) ((lambda (G3b10@t) ((lambda (G3b12@ls/false) (if G3b12@ls/false (apply (lambda (G3b14@olhs* G3b15@orhs* G3b16@b G3b17@b*) ((lambda (G3b1c@lhs* G3b1d@rhs*) (G2f0c@bless (cons (list 'lambda (append G3b1c@lhs* G3b1d@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b20@lhs G3b21@rhs) (list 'let (list (list 't (list G3b20@lhs))) (list G3b20@lhs G3b21@rhs) (cons 'set! (cons G3b21@rhs '(t))))) G3b1c@lhs* G3b1d@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b16@b G3b17@b*))) '(swap)))))) (append G3b14@olhs* G3b15@orhs*)))) (G302f@generate-temporaries G3b14@olhs*) (G302f@generate-temporaries G3b15@orhs*))) G3b12@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3b10@t))) (G2f56@syntax-dispatch G3b10@t '(_ #(each (any any)) any . each-any)))) G3b08@t))) (G2f56@syntax-dispatch G3b08@t '(_ () any . each-any)))) G3b06@e))) (set! G2f52@foreign-call-transformer (lambda (G3b24@e G3b25@r G3b26@mr) ((lambda (G3b2a@t) ((lambda (G3b2c@ls/false) (if G3b2c@ls/false (apply (lambda (G3b2e@name G3b2f@arg*) (cons 'foreign-call (cons (G2f7a@chi-expr G3b2e@name G3b25@r G3b26@mr) (G2f76@chi-expr* G3b2f@arg* G3b25@r G3b26@mr)))) G3b2c@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3b2a@t))) (G2f56@syntax-dispatch G3b2a@t '(_ any . each-any)))) G3b24@e))) (set! G2f54@convert-pattern (lambda (G3b32@pattern G3b33@keys) ((lambda (G3b37@cvt* G3b39@cvt) (begin (set! G3b37@cvt* (lambda (G3bc8@p* G3bc9@n G3bca@ids) (if (null? G3bc8@p*) (values '() G3bca@ids) (call-with-values (lambda () (G3b37@cvt* (cdr G3bc8@p*) G3bc9@n G3bca@ids)) (lambda (G3bd0@G3bce G3bd1@G3bcf) ((lambda (G3bd4@ids G3bd5@y) (call-with-values (lambda () (G3b39@cvt (car G3bc8@p*) G3bc9@n G3bd4@ids)) (lambda (G3bda@G3bd8 G3bdb@G3bd9) ((lambda (G3bde@ids G3bdf@x) (values (cons G3bdf@x G3bd5@y) G3bde@ids)) G3bdb@G3bd9 G3bda@G3bd8)))) G3bd1@G3bcf G3bd0@G3bce)))))) (set! G3b39@cvt (lambda (G3b3a@p G3b3b@n G3b3c@ids) ((lambda (G3b40@t) ((lambda (G3b42@ls/false) (if (and G3b42@ls/false (apply (lambda (G3b44@id) (G2d57@id? G3b44@id)) G3b42@ls/false)) (apply (lambda (G3b46@id) (if (G2d65@bound-id-member? G3b3a@p G3b33@keys) (values (vector 'free-id G3b3a@p) G3b3c@ids) (if (G2d5f@free-id=? G3b3a@p (G2ee0@scheme-stx '_)) (values '_ G3b3c@ids) (values 'any (cons (cons G3b3a@p G3b3b@n) G3b3c@ids))))) G3b42@ls/false) ((lambda (G3b48@t) ((lambda (G3b4a@ls/false) (if (and G3b4a@ls/false (apply (lambda (G3b4c@p G3b4d@dots) (G2f58@ellipsis? G3b4d@dots)) G3b4a@ls/false)) (apply (lambda (G3b50@p G3b51@dots) (call-with-values (lambda () (G3b39@cvt G3b50@p (+ G3b3b@n '1) G3b3c@ids)) (lambda (G3b56@G3b54 G3b57@G3b55) ((lambda (G3b5a@ids G3b5b@p) (values (if (eq? G3b5b@p 'any) 'each-any (vector 'each G3b5b@p)) G3b5a@ids)) G3b57@G3b55 G3b56@G3b54)))) G3b4a@ls/false) ((lambda (G3b5e@t) ((lambda (G3b60@ls/false) (if (and G3b60@ls/false (apply (lambda (G3b62@x G3b63@dots G3b64@ys G3b65@z) (G2f58@ellipsis? G3b63@dots)) G3b60@ls/false)) (apply (lambda (G3b6a@x G3b6b@dots G3b6c@ys G3b6d@z) (call-with-values (lambda () (G3b39@cvt G3b6d@z G3b3b@n G3b3c@ids)) (lambda (G3b74@G3b72 G3b75@G3b73) ((lambda (G3b78@ids G3b79@z) (call-with-values (lambda () (G3b37@cvt* G3b6c@ys G3b3b@n G3b78@ids)) (lambda (G3b7e@G3b7c G3b7f@G3b7d) ((lambda (G3b82@ids G3b83@ys) (call-with-values (lambda () (G3b39@cvt G3b6a@x (+ G3b3b@n '1) G3b82@ids)) (lambda (G3b88@G3b86 G3b89@G3b87) ((lambda (G3b8c@ids G3b8d@x) (values (vector 'each+ G3b8d@x (reverse G3b83@ys) G3b79@z) G3b8c@ids)) G3b89@G3b87 G3b88@G3b86)))) G3b7f@G3b7d G3b7e@G3b7c)))) G3b75@G3b73 G3b74@G3b72)))) G3b60@ls/false) ((lambda (G3b90@t) ((lambda (G3b92@ls/false) (if G3b92@ls/false (apply (lambda (G3b94@x G3b95@y) (call-with-values (lambda () (G3b39@cvt G3b95@y G3b3b@n G3b3c@ids)) (lambda (G3b9a@G3b98 G3b9b@G3b99) ((lambda (G3b9e@ids G3b9f@y) (call-with-values (lambda () (G3b39@cvt G3b94@x G3b3b@n G3b9e@ids)) (lambda (G3ba4@G3ba2 G3ba5@G3ba3) ((lambda (G3ba8@ids G3ba9@x) (values (cons G3ba9@x G3b9f@y) G3ba8@ids)) G3ba5@G3ba3 G3ba4@G3ba2)))) G3b9b@G3b99 G3b9a@G3b98)))) G3b92@ls/false) ((lambda (G3bac@t) ((lambda (G3bae@ls/false) (if G3bae@ls/false (apply (lambda () (values '() G3b3c@ids)) G3bae@ls/false) ((lambda (G3bb0@t) ((lambda (G3bb2@ls/false) (if (and G3bb2@ls/false (apply (lambda (G3bb4@p) (not (G2d1f@stx? G3bb4@p))) G3bb2@ls/false)) (apply (lambda (G3bb6@p) (call-with-values (lambda () (G3b39@cvt G3bb6@p G3b3b@n G3b3c@ids)) (lambda (G3bba@G3bb8 G3bbb@G3bb9) ((lambda (G3bbe@ids G3bbf@p) (values (vector 'vector G3bbf@p) G3bbe@ids)) G3bbb@G3bb9 G3bba@G3bb8)))) G3bb2@ls/false) ((lambda (G3bc2@t) ((lambda (G3bc4@ls/false) (if G3bc4@ls/false (apply (lambda (G3bc6@datum) (values (vector 'atom (G2d6d@stx->datum G3bc6@datum)) G3b3c@ids)) G3bc4@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3bc2@t))) (G2f56@syntax-dispatch G3bc2@t 'any))) G3bb0@t))) (G2f56@syntax-dispatch G3bb0@t '#(vector each-any)))) G3bac@t))) (G2f56@syntax-dispatch G3bac@t '()))) G3b90@t))) (G2f56@syntax-dispatch G3b90@t '(any . any)))) G3b5e@t))) (G2f56@syntax-dispatch G3b5e@t '(any any . #(each+ any () any))))) G3b48@t))) (G2f56@syntax-dispatch G3b48@t '(any any)))) G3b40@t))) (G2f56@syntax-dispatch G3b40@t 'any))) G3b3a@p))) (G3b39@cvt G3b32@pattern '0 '()))) '#f '#f))) (set! G2f56@syntax-dispatch ((lambda () ((lambda (G3be3@stx^ G3be5@match-each G3be7@match-each+ G3be9@match-each-any G3beb@match-empty G3bed@combine G3bef@match* G3bf1@match) (begin (set! G3be3@stx^ (lambda (G3cac@e G3cad@m* G3cae@s* G3caf@ae*) (if (and (null? G3cad@m*) (null? G3cae@s*) (null? G3caf@ae*)) G3cac@e (G2d3f@mkstx G3cac@e G3cad@m* G3cae@s* G3caf@ae*)))) (set! G3be5@match-each (lambda (G3c8f@e G3c90@p G3c91@m* G3c92@s* G3c93@ae*) (if (pair? G3c8f@e) ((lambda (G3c99@first) (and G3c99@first ((lambda (G3c9b@rest) (and G3c9b@rest (cons G3c99@first G3c9b@rest))) (G3be5@match-each (cdr G3c8f@e) G3c90@p G3c91@m* G3c92@s* G3c93@ae*)))) (G3bf1@match (car G3c8f@e) G3c90@p G3c91@m* G3c92@s* G3c93@ae* '())) (if (null? G3c8f@e) '() (if (G2d1f@stx? G3c8f@e) (and (not (G2cd1@top-marked? G3c91@m*)) (call-with-values (lambda () (G2d3d@join-wraps G3c91@m* G3c92@s* G3c93@ae* G3c8f@e)) (lambda (G3ca0@G3c9d G3ca1@G3c9e G3ca2@G3c9f) ((lambda (G3ca6@ae* G3ca7@s* G3ca8@m*) (G3be5@match-each (G2d23@stx-expr G3c8f@e) G3c90@p G3ca8@m* G3ca7@s* G3ca6@ae*)) G3ca2@G3c9f G3ca1@G3c9e G3ca0@G3c9d)))) (if (G28e8@G2813@annotation? G3c8f@e) (G3be5@match-each (G28ea@G2817@annotation-expression G3c8f@e) G3c90@p G3c91@m* G3c92@s* G3c93@ae*) '#f)))))) (set! G3be7@match-each+ (lambda (G3c55@e G3c56@x-pat G3c57@y-pat G3c58@z-pat G3c59@m* G3c5a@s* G3c5b@ae* G3c5c@r) ((letrec ((G3c65@f (lambda (G3c67@e G3c68@m* G3c69@s* G3c6a@ae*) (if (pair? G3c67@e) (call-with-values (lambda () (G3c65@f (cdr G3c67@e) G3c68@m* G3c69@s* G3c6a@ae*)) (lambda (G3c72@G3c6f G3c73@G3c70 G3c74@G3c71) ((lambda (G3c78@r G3c79@y-pat G3c7a@xr*) (if G3c78@r (if (null? G3c79@y-pat) ((lambda (G3c7e@xr) (if G3c7e@xr (values (cons G3c7e@xr G3c7a@xr*) G3c79@y-pat G3c78@r) (values '#f '#f '#f))) (G3bf1@match (car G3c67@e) G3c56@x-pat G3c68@m* G3c69@s* G3c6a@ae* '())) (values '() (cdr G3c79@y-pat) (G3bf1@match (car G3c67@e) (car G3c79@y-pat) G3c68@m* G3c69@s* G3c6a@ae* G3c78@r))) (values '#f '#f '#f))) G3c74@G3c71 G3c73@G3c70 G3c72@G3c6f))) (if (G2d1f@stx? G3c67@e) (if (G2cd1@top-marked? G3c68@m*) (values '() G3c57@y-pat (G3bf1@match G3c67@e G3c58@z-pat G3c68@m* G3c69@s* G3c6a@ae* G3c5c@r)) (call-with-values (lambda () (G2d3d@join-wraps G3c68@m* G3c69@s* G3c6a@ae* G3c67@e)) (lambda (G3c83@G3c80 G3c84@G3c81 G3c85@G3c82) ((lambda (G3c89@ae* G3c8a@s* G3c8b@m*) (G3c65@f (G2d23@stx-expr G3c67@e) G3c8b@m* G3c8a@s* G3c89@ae*)) G3c85@G3c82 G3c84@G3c81 G3c83@G3c80)))) (if (G28e8@G2813@annotation? G3c67@e) (G3c65@f (G28ea@G2817@annotation-expression G3c67@e) G3c68@m* G3c69@s* G3c6a@ae*) (values '() G3c57@y-pat (G3bf1@match G3c67@e G3c58@z-pat G3c68@m* G3c69@s* G3c6a@ae* G3c5c@r)))))))) G3c65@f) G3c55@e G3c59@m* G3c5a@s* G3c5b@ae*))) (set! G3be9@match-each-any (lambda (G3c3c@e G3c3d@m* G3c3e@s* G3c3f@ae*) (if (pair? G3c3c@e) ((lambda (G3c44@l) (and G3c44@l (cons (G3be3@stx^ (car G3c3c@e) G3c3d@m* G3c3e@s* G3c3f@ae*) G3c44@l))) (G3be9@match-each-any (cdr G3c3c@e) G3c3d@m* G3c3e@s* G3c3f@ae*)) (if (null? G3c3c@e) '() (if (G2d1f@stx? G3c3c@e) (and (not (G2cd1@top-marked? G3c3d@m*)) (call-with-values (lambda () (G2d3d@join-wraps G3c3d@m* G3c3e@s* G3c3f@ae* G3c3c@e)) (lambda (G3c49@G3c46 G3c4a@G3c47 G3c4b@G3c48) ((lambda (G3c4f@ae* G3c50@s* G3c51@m*) (G3be9@match-each-any (G2d23@stx-expr G3c3c@e) G3c51@m* G3c50@s* G3c4f@ae*)) G3c4b@G3c48 G3c4a@G3c47 G3c49@G3c46)))) (if (G28e8@G2813@annotation? G3c3c@e) (G3be9@match-each-any (G28ea@G2817@annotation-expression G3c3c@e) G3c3d@m* G3c3e@s* G3c3f@ae*) '#f)))))) (set! G3beb@match-empty (lambda (G3c36@p G3c37@r) (if (null? G3c36@p) G3c37@r (if (eq? G3c36@p '_) G3c37@r (if (eq? G3c36@p 'any) (cons '() G3c37@r) (if (pair? G3c36@p) (G3beb@match-empty (car G3c36@p) (G3beb@match-empty (cdr G3c36@p) G3c37@r)) (if (eq? G3c36@p 'each-any) (cons '() G3c37@r) ((lambda (G3c3a@t) (if (memv G3c3a@t '(each)) (G3beb@match-empty (vector-ref G3c36@p '1) G3c37@r) (if (memv G3c3a@t '(each+)) (G3beb@match-empty (vector-ref G3c36@p '1) (G3beb@match-empty (reverse (vector-ref G3c36@p '2)) (G3beb@match-empty (vector-ref G3c36@p '3) G3c37@r))) (if (memv G3c3a@t '(free-id atom)) G3c37@r (if (memv G3c3a@t '(scheme-id atom)) G3c37@r (if (memv G3c3a@t '(vector)) (G3beb@match-empty (vector-ref G3c36@p '1) G3c37@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c36@p))))))) (vector-ref G3c36@p '0))))))))) (set! G3bed@combine (lambda (G3c32@r* G3c33@r) (if (null? (car G3c32@r*)) G3c33@r (cons (map car G3c32@r*) (G3bed@combine (map cdr G3c32@r*) G3c33@r))))) (set! G3bef@match* (lambda (G3c11@e G3c12@p G3c13@m* G3c14@s* G3c15@ae* G3c16@r) (if (null? G3c12@p) (and (null? G3c11@e) G3c16@r) (if (pair? G3c12@p) (and (pair? G3c11@e) (G3bf1@match (car G3c11@e) (car G3c12@p) G3c13@m* G3c14@s* G3c15@ae* (G3bf1@match (cdr G3c11@e) (cdr G3c12@p) G3c13@m* G3c14@s* G3c15@ae* G3c16@r))) (if (eq? G3c12@p 'each-any) ((lambda (G3c1d@l) (and G3c1d@l (cons G3c1d@l G3c16@r))) (G3be9@match-each-any G3c11@e G3c13@m* G3c14@s* G3c15@ae*)) ((lambda (G3c1f@t) (if (memv G3c1f@t '(each)) (if (null? G3c11@e) (G3beb@match-empty (vector-ref G3c12@p '1) G3c16@r) ((lambda (G3c21@r*) (and G3c21@r* (G3bed@combine G3c21@r* G3c16@r))) (G3be5@match-each G3c11@e (vector-ref G3c12@p '1) G3c13@m* G3c14@s* G3c15@ae*))) (if (memv G3c1f@t '(free-id)) (and (symbol? G3c11@e) (G2cd1@top-marked? G3c13@m*) (G2d5f@free-id=? (G3be3@stx^ G3c11@e G3c13@m* G3c14@s* G3c15@ae*) (vector-ref G3c12@p '1)) G3c16@r) (if (memv G3c1f@t '(scheme-id)) (and (symbol? G3c11@e) (G2cd1@top-marked? G3c13@m*) (G2d5f@free-id=? (G3be3@stx^ G3c11@e G3c13@m* G3c14@s* G3c15@ae*) (G2ee0@scheme-stx (vector-ref G3c12@p '1))) G3c16@r) (if (memv G3c1f@t '(each+)) (call-with-values (lambda () (G3be7@match-each+ G3c11@e (vector-ref G3c12@p '1) (vector-ref G3c12@p '2) (vector-ref G3c12@p '3) G3c13@m* G3c14@s* G3c15@ae* G3c16@r)) (lambda (G3c26@G3c23 G3c27@G3c24 G3c28@G3c25) ((lambda (G3c2c@r G3c2d@y-pat G3c2e@xr*) (and G3c2c@r (null? G3c2d@y-pat) (if (null? G3c2e@xr*) (G3beb@match-empty (vector-ref G3c12@p '1) G3c2c@r) (G3bed@combine G3c2e@xr* G3c2c@r)))) G3c28@G3c25 G3c27@G3c24 G3c26@G3c23))) (if (memv G3c1f@t '(atom)) (and (fast-equal? (vector-ref G3c12@p '1) (G2d6b@strip G3c11@e G3c13@m*)) G3c16@r) (if (memv G3c1f@t '(vector)) (and (vector? G3c11@e) (G3bf1@match (vector->list G3c11@e) (vector-ref G3c12@p '1) G3c13@m* G3c14@s* G3c15@ae* G3c16@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c12@p)))))))) (vector-ref G3c12@p '0))))))) (set! G3bf1@match (lambda (G3bf6@e G3bf7@p G3bf8@m* G3bf9@s* G3bfa@ae* G3bfb@r) (if (not G3bfb@r) '#f (if (eq? G3bf7@p '_) G3bfb@r (if (eq? G3bf7@p 'any) (cons (G3be3@stx^ G3bf6@e G3bf8@m* G3bf9@s* G3bfa@ae*) G3bfb@r) (if (G2d1f@stx? G3bf6@e) (and (not (G2cd1@top-marked? G3bf8@m*)) (call-with-values (lambda () (G2d3d@join-wraps G3bf8@m* G3bf9@s* G3bfa@ae* G3bf6@e)) (lambda (G3c05@G3c02 G3c06@G3c03 G3c07@G3c04) ((lambda (G3c0b@ae* G3c0c@s* G3c0d@m*) (G3bf1@match (G2d23@stx-expr G3bf6@e) G3bf7@p G3c0d@m* G3c0c@s* G3c0b@ae* G3bfb@r)) G3c07@G3c04 G3c06@G3c03 G3c05@G3c02)))) (if (G28e8@G2813@annotation? G3bf6@e) (G3bf1@match (G28ea@G2817@annotation-expression G3bf6@e) G3bf7@p G3bf8@m* G3bf9@s* G3bfa@ae* G3bfb@r) (G3bef@match* G3bf6@e G3bf7@p G3bf8@m* G3bf9@s* G3bfa@ae* G3bfb@r)))))))) (lambda (G3bf2@e G3bf3@p) (G3bf1@match G3bf2@e G3bf3@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f58@ellipsis? (lambda (G3cb4@x) (and (G2d57@id? G3cb4@x) (G2d5f@free-id=? G3cb4@x (G2ee0@scheme-stx '...))))) (set! G2f5a@underscore? (lambda (G3cb6@x) (and (G2d57@id? G3cb6@x) (G2d5f@free-id=? G3cb6@x (G2ee0@scheme-stx '_))))) (set! G2f5c@verify-literals (lambda (G3cb8@lits G3cb9@expr) (for-each (lambda (G3cbc@x) (if (or (not (G2d57@id? G3cbc@x)) (G2f58@ellipsis? G3cbc@x) (G2f5a@underscore? G3cbc@x)) (G3041@syntax-violation '#f '"invalid literal" G3cb9@expr G3cbc@x) (void))) G3cb8@lits))) (set! G2f5e@syntax-case-transformer ((lambda () ((lambda (G3cbf@build-dispatch-call G3cc1@invalid-ids-error G3cc3@gen-clause G3cc5@gen-syntax-case) (begin (set! G3cbf@build-dispatch-call (lambda (G3d2e@pvars G3d2f@expr G3d30@y G3d31@r G3d32@mr) ((lambda (G3d38@ids G3d39@levels) ((lambda (G3d3c@labels G3d3d@new-vars) ((lambda (G3d40@body) (list '(primitive apply) (G2cb1@G2bef@build-lambda '#f G3d3d@new-vars G3d40@body) G3d30@y)) (G2f7a@chi-expr (G2d43@add-subst (G2d12@make-full-rib G3d38@ids G3d3c@labels) G3d2f@expr) (append (map (lambda (G3d42@label G3d43@var G3d44@level) (cons G3d42@label (G2d77@make-binding 'syntax (cons G3d43@var G3d44@level)))) G3d3c@labels G3d3d@new-vars (map cdr G3d2e@pvars)) G3d31@r) G3d32@mr))) (map G2cd7@gen-label G3d38@ids) (map G2cd3@gen-lexical G3d38@ids))) (map car G3d2e@pvars) (map cdr G3d2e@pvars)))) (set! G3cc1@invalid-ids-error (lambda (G3d22@id* G3d23@e G3d24@class) ((letrec ((G3d28@find (lambda (G3d2a@id* G3d2b@ok*) (if (null? G3d2a@id*) (G3041@syntax-violation '#f '"invalid syntax" G3d23@e) (if (G2d57@id? (car G3d2a@id*)) (if (G2d65@bound-id-member? (car G3d2a@id*) G3d2b@ok*) (G303d@syntax-error (car G3d2a@id*) '"duplicate " G3d24@class) (G3d28@find (cdr G3d2a@id*) (cons (car G3d2a@id*) G3d2b@ok*))) (G303d@syntax-error (car G3d2a@id*) '"invalid " G3d24@class)))))) G3d28@find) G3d22@id* '()))) (set! G3cc3@gen-clause (lambda (G3cfc@x G3cfd@keys G3cfe@clauses G3cff@r G3d00@mr G3d01@pat G3d02@fender G3d03@expr) (call-with-values (lambda () (G2f54@convert-pattern G3d01@pat G3cfd@keys)) (lambda (G3d0e@G3d0c G3d0f@G3d0d) ((lambda (G3d12@pvars G3d13@p) (if (not (G2d63@distinct-bound-ids? (map car G3d12@pvars))) (G3cc1@invalid-ids-error (map car G3d12@pvars) G3d01@pat '"pattern variable") (if (not (for-all (lambda (G3d16@x) (not (G2f58@ellipsis? (car G3d16@x)))) G3d12@pvars)) (G3041@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d01@pat) ((lambda (G3d18@y) ((lambda (G3d1a@test) ((lambda (G3d1c@conseq) ((lambda (G3d1e@altern) (list (G2cb1@G2bef@build-lambda '#f (list G3d18@y) (list 'if G3d1a@test G3d1c@conseq G3d1e@altern)) (list '(primitive syntax-dispatch) G3cfc@x (list 'quote G3d13@p)))) (G3cc5@gen-syntax-case G3cfc@x G3cfd@keys G3cfe@clauses G3cff@r G3d00@mr))) (G3cbf@build-dispatch-call G3d12@pvars G3d03@expr G3d18@y G3cff@r G3d00@mr))) (if (eq? G3d02@fender '#t) G3d18@y ((lambda (G3d20@call) (list 'if G3d18@y G3d20@call (list 'quote '#f))) (G3cbf@build-dispatch-call G3d12@pvars G3d02@fender G3d18@y G3cff@r G3d00@mr))))) (G2cd3@gen-lexical 'tmp))))) G3d0f@G3d0d G3d0e@G3d0c))))) (set! G3cc5@gen-syntax-case (lambda (G3cda@x G3cdb@keys G3cdc@clauses G3cdd@r G3cde@mr) (if (null? G3cdc@clauses) (list '(primitive syntax-error) G3cda@x) ((lambda (G3ce4@t) ((lambda (G3ce6@ls/false) (if G3ce6@ls/false (apply (lambda (G3ce8@pat G3ce9@expr) (if (and (G2d57@id? G3ce8@pat) (not (G2d65@bound-id-member? G3ce8@pat G3cdb@keys)) (not (G2f58@ellipsis? G3ce8@pat))) (if (G2d5f@free-id=? G3ce8@pat (G2ee0@scheme-stx '_)) (G2f7a@chi-expr G3ce9@expr G3cdd@r G3cde@mr) ((lambda (G3cec@lab G3ced@lex) ((lambda (G3cf0@body) (list (G2cb1@G2bef@build-lambda '#f (list G3ced@lex) G3cf0@body) G3cda@x)) (G2f7a@chi-expr (G2d43@add-subst (G2d12@make-full-rib (list G3ce8@pat) (list G3cec@lab)) G3ce9@expr) (cons (cons G3cec@lab (G2d77@make-binding 'syntax (cons G3ced@lex '0))) G3cdd@r) G3cde@mr))) (G2cd7@gen-label G3ce8@pat) (G2cd3@gen-lexical G3ce8@pat))) (G3cc3@gen-clause G3cda@x G3cdb@keys (cdr G3cdc@clauses) G3cdd@r G3cde@mr G3ce8@pat '#t G3ce9@expr))) G3ce6@ls/false) ((lambda (G3cf2@t) ((lambda (G3cf4@ls/false) (if G3cf4@ls/false (apply (lambda (G3cf6@pat G3cf7@fender G3cf8@expr) (G3cc3@gen-clause G3cda@x G3cdb@keys (cdr G3cdc@clauses) G3cdd@r G3cde@mr G3cf6@pat G3cf7@fender G3cf8@expr)) G3cf4@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3cf2@t))) (G2f56@syntax-dispatch G3cf2@t '(any any any)))) G3ce4@t))) (G2f56@syntax-dispatch G3ce4@t '(any any)))) (car G3cdc@clauses))))) (lambda (G3cc6@e G3cc7@r G3cc8@mr) ((lambda (G3ccc@t) ((lambda (G3cce@ls/false) (if G3cce@ls/false (apply (lambda (G3cd0@expr G3cd1@keys G3cd2@clauses) (begin (G2f5c@verify-literals G3cd1@keys G3cc6@e) ((lambda (G3cd6@x) ((lambda (G3cd8@body) (list (G2cb1@G2bef@build-lambda '#f (list G3cd6@x) G3cd8@body) (G2f7a@chi-expr G3cd0@expr G3cc7@r G3cc8@mr))) (G3cc5@gen-syntax-case G3cd6@x G3cd1@keys G3cd2@clauses G3cc7@r G3cc8@mr))) (G2cd3@gen-lexical 'tmp)))) G3cce@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3ccc@t))) (G2f56@syntax-dispatch G3ccc@t '(_ any each-any . each-any)))) G3cc6@e)))) '#f '#f '#f '#f)))) (set! G2f60@ellipsis-map (lambda (G3d48@proc G3d49@ls . G3d4c@ls*) ((lambda (G3d4f@who) (begin (set! G3d4f@who '...) (begin (if (not (list? G3d49@ls)) (assertion-violation G3d4f@who '"not a list" G3d49@ls) (void)) (if (not (null? G3d4c@ls*)) ((lambda (G3d50@n) (for-each (lambda (G3d52@x) (begin (if (not (list? G3d52@x)) (assertion-violation G3d4f@who '"not a list" G3d52@x) (void)) (if (not (= (length G3d52@x) G3d50@n)) (assertion-violation G3d4f@who '"length mismatch" G3d49@ls G3d52@x) (void)))) G3d4c@ls*)) (length G3d49@ls)) (void)) (apply map G3d48@proc G3d49@ls G3d4c@ls*)))) '#f))) (set! G2f62@syntax-transformer ((lambda () ((lambda (G3d55@gen-syntax G3d57@gen-ref G3d59@gen-append G3d5b@gen-mappend G3d5d@gen-map G3d5f@gen-cons G3d61@gen-vector G3d63@regen) (begin (set! G3d55@gen-syntax (lambda (G3dc8@src G3dc9@e G3dca@r G3dcb@maps G3dcc@ellipsis? G3dcd@vec?) ((lambda (G3dd4@t) ((lambda (G3dd6@ls/false) (if (and G3dd6@ls/false (apply (lambda (G3dd8@dots) (G3dcc@ellipsis? G3dd8@dots)) G3dd6@ls/false)) (apply (lambda (G3dda@dots) (G3041@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc8@src)) G3dd6@ls/false) ((lambda (G3ddc@t) ((lambda (G3dde@ls/false) (if (and G3dde@ls/false (apply (lambda (G3de0@id) (G2d57@id? G3de0@id)) G3dde@ls/false)) (apply (lambda (G3de2@id) ((lambda (G3de4@label) ((lambda (G3de6@b) ((lambda () (if (eq? (G2d79@binding-type G3de6@b) 'syntax) (call-with-values (lambda () ((lambda (G3dea@var.lev) (G3d57@gen-ref G3dc8@src (car G3dea@var.lev) (cdr G3dea@var.lev) G3dcb@maps)) (G2d7b@binding-value G3de6@b))) (lambda (G3dec@G3de8 G3ded@G3de9) ((lambda (G3df0@maps G3df1@var) (values (list 'ref G3df1@var) G3df0@maps)) G3ded@G3de9 G3dec@G3de8))) (values (list 'quote G3dc9@e) G3dcb@maps))))) (G2d75@label->binding G3de4@label G3dca@r))) (G2d71@id->label G3dc9@e))) G3dde@ls/false) ((lambda (G3df4@t) ((lambda (G3df6@ls/false) (if (and G3df6@ls/false (apply (lambda (G3df8@dots G3df9@e) (G3dcc@ellipsis? G3df8@dots)) G3df6@ls/false)) (apply (lambda (G3dfc@dots G3dfd@e) (if G3dcd@vec? (G3041@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc8@src) (G3d55@gen-syntax G3dc8@src G3dfd@e G3dca@r G3dcb@maps (lambda (G3e00@x) '#f) '#f))) G3df6@ls/false) ((lambda (G3e02@t) ((lambda (G3e04@ls/false) (if (and G3e04@ls/false (apply (lambda (G3e06@x G3e07@dots G3e08@y) (G3dcc@ellipsis? G3e07@dots)) G3e04@ls/false)) (apply (lambda (G3e0c@x G3e0d@dots G3e0e@y) ((letrec ((G3e12@f (lambda (G3e14@y G3e15@k) ((lambda (G3e18@t) ((lambda (G3e1a@ls/false) (if G3e1a@ls/false (apply (lambda () (G3e15@k G3dcb@maps)) G3e1a@ls/false) ((lambda (G3e1c@t) ((lambda (G3e1e@ls/false) (if (and G3e1e@ls/false (apply (lambda (G3e20@dots G3e21@y) (G3dcc@ellipsis? G3e20@dots)) G3e1e@ls/false)) (apply (lambda (G3e24@dots G3e25@y) (G3e12@f G3e25@y (lambda (G3e28@maps) (call-with-values (lambda () (G3e15@k (cons '() G3e28@maps))) (lambda (G3e2c@G3e2a G3e2d@G3e2b) ((lambda (G3e30@maps G3e31@x) (if (null? (car G3e30@maps)) (G3041@syntax-violation '#f '"extra ellipsis in syntax form" G3dc8@src) (values (G3d5b@gen-mappend G3e31@x (car G3e30@maps)) (cdr G3e30@maps)))) G3e2d@G3e2b G3e2c@G3e2a)))))) G3e1e@ls/false) ((lambda (G3e34@t) ((lambda (G3e36@ls/false) (if G3e36@ls/false (apply (lambda () (call-with-values (lambda () (G3d55@gen-syntax G3dc8@src G3e14@y G3dca@r G3dcb@maps G3dcc@ellipsis? G3dcd@vec?)) (lambda (G3e3a@G3e38 G3e3b@G3e39) ((lambda (G3e3e@maps G3e3f@y) (call-with-values (lambda () (G3e15@k G3e3e@maps)) (lambda (G3e44@G3e42 G3e45@G3e43) ((lambda (G3e48@maps G3e49@x) (values (G3d59@gen-append G3e49@x G3e3f@y) G3e48@maps)) G3e45@G3e43 G3e44@G3e42)))) G3e3b@G3e39 G3e3a@G3e38)))) G3e36@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3e34@t))) (G2f56@syntax-dispatch G3e34@t '_))) G3e1c@t))) (G2f56@syntax-dispatch G3e1c@t '(any . any)))) G3e18@t))) (G2f56@syntax-dispatch G3e18@t '()))) G3e14@y)))) G3e12@f) G3e0e@y (lambda (G3e4c@maps) (call-with-values (lambda () (G3d55@gen-syntax G3dc8@src G3e0c@x G3dca@r (cons '() G3e4c@maps) G3dcc@ellipsis? '#f)) (lambda (G3e50@G3e4e G3e51@G3e4f) ((lambda (G3e54@maps G3e55@x) (if (null? (car G3e54@maps)) (G3041@syntax-violation '#f '"extra ellipsis in syntax form" G3dc8@src) (values (G3d5d@gen-map G3e55@x (car G3e54@maps)) (cdr G3e54@maps)))) G3e51@G3e4f G3e50@G3e4e)))))) G3e04@ls/false) ((lambda (G3e58@t) ((lambda (G3e5a@ls/false) (if G3e5a@ls/false (apply (lambda (G3e5c@x G3e5d@y) (call-with-values (lambda () (G3d55@gen-syntax G3dc8@src G3e5c@x G3dca@r G3dcb@maps G3dcc@ellipsis? '#f)) (lambda (G3e62@G3e60 G3e63@G3e61) ((lambda (G3e66@maps G3e67@xnew) (call-with-values (lambda () (G3d55@gen-syntax G3dc8@src G3e5d@y G3dca@r G3e66@maps G3dcc@ellipsis? G3dcd@vec?)) (lambda (G3e6c@G3e6a G3e6d@G3e6b) ((lambda (G3e70@maps G3e71@ynew) (values (G3d5f@gen-cons G3dc9@e G3e5c@x G3e5d@y G3e67@xnew G3e71@ynew) G3e70@maps)) G3e6d@G3e6b G3e6c@G3e6a)))) G3e63@G3e61 G3e62@G3e60)))) G3e5a@ls/false) ((lambda (G3e74@t) ((lambda (G3e76@ls/false) (if G3e76@ls/false (apply (lambda (G3e78@ls) (call-with-values (lambda () (G3d55@gen-syntax G3dc8@src G3e78@ls G3dca@r G3dcb@maps G3dcc@ellipsis? '#t)) (lambda (G3e7c@G3e7a G3e7d@G3e7b) ((lambda (G3e80@maps G3e81@lsnew) (values (G3d61@gen-vector G3dc9@e G3e78@ls G3e81@lsnew) G3e80@maps)) G3e7d@G3e7b G3e7c@G3e7a)))) G3e76@ls/false) ((lambda (G3e84@t) ((lambda (G3e86@ls/false) (if G3e86@ls/false (apply (lambda () (values (list 'quote G3dc9@e) G3dcb@maps)) G3e86@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3e84@t))) (G2f56@syntax-dispatch G3e84@t '_))) G3e74@t))) (G2f56@syntax-dispatch G3e74@t '#(vector each-any)))) G3e58@t))) (G2f56@syntax-dispatch G3e58@t '(any . any)))) G3e02@t))) (G2f56@syntax-dispatch G3e02@t '(any any . any)))) G3df4@t))) (G2f56@syntax-dispatch G3df4@t '(any any)))) G3ddc@t))) (G2f56@syntax-dispatch G3ddc@t 'any))) G3dd4@t))) (G2f56@syntax-dispatch G3dd4@t 'any))) G3dc9@e))) (set! G3d57@gen-ref (lambda (G3db0@src G3db1@var G3db2@level G3db3@maps) (if (= G3db2@level '0) (values G3db1@var G3db3@maps) (if (null? G3db3@maps) (G3041@syntax-violation '#f '"missing ellipsis in syntax form" G3db0@src) (call-with-values (lambda () (G3d57@gen-ref G3db0@src G3db1@var (- G3db2@level '1) (cdr G3db3@maps))) (lambda (G3dba@G3db8 G3dbb@G3db9) ((lambda (G3dbe@outer-maps G3dbf@outer-var) ((lambda (G3dc2@t) (if G3dc2@t ((lambda (G3dc4@b) (values (cdr G3dc4@b) G3db3@maps)) G3dc2@t) ((lambda (G3dc6@inner-var) (values G3dc6@inner-var (cons (cons (cons G3dbf@outer-var G3dc6@inner-var) (car G3db3@maps)) G3dbe@outer-maps))) (G2cd3@gen-lexical 'tmp)))) (assq G3dbf@outer-var (car G3db3@maps)))) G3dbb@G3db9 G3dba@G3db8))))))) (set! G3d59@gen-append (lambda (G3dac@x G3dad@y) (if (fast-equal? G3dad@y ''()) G3dac@x (list 'append G3dac@x G3dad@y)))) (set! G3d5b@gen-mappend (lambda (G3da8@e G3da9@map-env) (list 'apply '(primitive append) (G3d5d@gen-map G3da8@e G3da9@map-env)))) (set! G3d5d@gen-map (lambda (G3d96@e G3d97@map-env) ((lambda (G3d9a@formals G3d9b@actuals) (if (eq? (car G3d96@e) 'ref) (car G3d9b@actuals) (if (for-all (lambda (G3d9e@x) (and (eq? (car G3d9e@x) 'ref) (memq (cadr G3d9e@x) G3d9a@formals))) (cdr G3d96@e)) ((lambda (G3da0@args) (cons 'map (cons (list 'primitive (car G3d96@e)) G3da0@args))) (map ((lambda (G3da2@r) (lambda (G3da4@x) (cdr (assq (cadr G3da4@x) G3da2@r)))) (map cons G3d9a@formals G3d9b@actuals)) (cdr G3d96@e))) (cons* 'map (list 'lambda G3d9a@formals G3d96@e) G3d9b@actuals)))) (map cdr G3d97@map-env) (map (lambda (G3da6@x) (list 'ref (car G3da6@x))) G3d97@map-env)))) (set! G3d5f@gen-cons (lambda (G3d86@e G3d87@x G3d88@y G3d89@xnew G3d8a@ynew) ((lambda (G3d90@t) (if (memv G3d90@t '(quote)) (if (eq? (car G3d89@xnew) 'quote) ((lambda (G3d92@xnew G3d93@ynew) (if (and (eq? G3d92@xnew G3d87@x) (eq? G3d93@ynew G3d88@y)) (list 'quote G3d86@e) (list 'quote (cons G3d92@xnew G3d93@ynew)))) (cadr G3d89@xnew) (cadr G3d8a@ynew)) (if (null? (cadr G3d8a@ynew)) (list 'list G3d89@xnew) (list 'cons G3d89@xnew G3d8a@ynew))) (if (memv G3d90@t '(list)) (cons 'list (cons G3d89@xnew (cdr G3d8a@ynew))) (list 'cons G3d89@xnew G3d8a@ynew)))) (car G3d8a@ynew)))) (set! G3d61@gen-vector (lambda (G3d80@e G3d81@ls G3d82@lsnew) (if (eq? (car G3d82@lsnew) 'quote) (if (eq? (cadr G3d82@lsnew) G3d81@ls) (list 'quote G3d80@e) (list 'quote (list->vector (cadr G3d82@lsnew)))) (if (eq? (car G3d82@lsnew) 'list) (cons 'vector (cdr G3d82@lsnew)) (list 'list->vector G3d82@lsnew))))) (set! G3d63@regen (lambda (G3d7a@x) ((lambda (G3d7c@t) (if (memv G3d7c@t '(ref)) (cadr G3d7a@x) (if (memv G3d7c@t '(primitive)) (list 'primitive (cadr G3d7a@x)) (if (memv G3d7c@t '(quote)) (list 'quote (cadr G3d7a@x)) (if (memv G3d7c@t '(lambda)) (G2cb1@G2bef@build-lambda '#f (cadr G3d7a@x) (G3d63@regen (caddr G3d7a@x))) (if (memv G3d7c@t '(map)) ((lambda (G3d7e@ls) (cons '(primitive ellipsis-map) G3d7e@ls)) (map G3d63@regen (cdr G3d7a@x))) (cons (list 'primitive (car G3d7a@x)) (map G3d63@regen (cdr G3d7a@x))))))))) (car G3d7a@x)))) (lambda (G3d64@e G3d65@r G3d66@mr) ((lambda (G3d6a@t) ((lambda (G3d6c@ls/false) (if G3d6c@ls/false (apply (lambda (G3d6e@x) (call-with-values (lambda () (G3d55@gen-syntax G3d64@e G3d6e@x G3d65@r '() G2f58@ellipsis? '#f)) (lambda (G3d72@G3d70 G3d73@G3d71) ((lambda (G3d76@maps G3d77@e) (G3d63@regen G3d77@e)) G3d73@G3d71 G3d72@G3d70)))) G3d6c@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3d6a@t))) (G2f56@syntax-dispatch G3d6a@t '(_ any)))) G3d64@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f64@core-macro-transformer (lambda (G3e88@name) ((lambda (G3e8a@t) (if (memv G3e8a@t '(quote)) G2f06@quote-transformer (if (memv G3e8a@t '(lambda)) G2f0a@lambda-transformer (if (memv G3e8a@t '(case-lambda)) G2f08@case-lambda-transformer (if (memv G3e8a@t '(letrec)) G2eee@letrec-transformer (if (memv G3e8a@t '(letrec*)) G2ef0@letrec*-transformer (if (memv G3e8a@t '(if)) G2efe@if-transformer (if (memv G3e8a@t '(and)) G2f00@and-transformer (if (memv G3e8a@t '(or)) G2f02@or-transformer (if (memv G3e8a@t '(foreign-call)) G2f52@foreign-call-transformer (if (memv G3e8a@t '(syntax-case)) G2f5e@syntax-case-transformer (if (memv G3e8a@t '(syntax)) G2f62@syntax-transformer (if (memv G3e8a@t '(type-descriptor)) G2ef4@type-descriptor-transformer (if (memv G3e8a@t '(record-type-descriptor)) G2ef6@record-type-descriptor-transformer (if (memv G3e8a@t '(record-constructor-descriptor)) G2ef8@record-constructor-descriptor-transformer (if (memv G3e8a@t '(fluid-let-syntax)) G2ef2@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e88@name))))))))))))))))) G3e88@name))) (set! G2f66@file-options-macro (lambda (G3e8c@x) ((lambda (G3e8f@valid-option?) (begin (set! G3e8f@valid-option? (lambda (G3e98@x) (and (G2d57@id? G3e98@x) (memq (G2d59@id->sym G3e98@x) '(no-fail no-create no-truncate))))) ((lambda (G3e90@t) ((lambda (G3e92@ls/false) (if (and G3e92@ls/false (apply (lambda (G3e94@opt*) (and (for-all G3e8f@valid-option? G3e94@opt*) (G28f4@G2895@file-options-spec (map G2d59@id->sym G3e94@opt*)))) G3e92@ls/false)) (apply (lambda (G3e96@opt*) (G2f0c@bless (list 'quote (G28f4@G2895@file-options-spec (map G2d59@id->sym G3e96@opt*))))) G3e92@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3e90@t))) (G2f56@syntax-dispatch G3e90@t '(_ . each-any)))) G3e8c@x))) '#f))) (set! G2f68@symbol-macro (lambda (G3e9a@x G3e9b@set) ((lambda (G3e9e@t) ((lambda (G3ea0@ls/false) (if (and G3ea0@ls/false (apply (lambda (G3ea2@name) (and (G2d57@id? G3ea2@name) (memq (G2d59@id->sym G3ea2@name) G3e9b@set))) G3ea0@ls/false)) (apply (lambda (G3ea4@name) (G2f0c@bless (list 'quote G3ea4@name))) G3ea0@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3e9e@t))) (G2f56@syntax-dispatch G3e9e@t '(_ any)))) G3e9a@x))) (set! G2f6a@macro-transformer (lambda (G3ea6@x) (if (procedure? G3ea6@x) G3ea6@x (if (symbol? G3ea6@x) ((lambda (G3ea8@t) (if (memv G3ea8@t '(define-record-type)) G2f4a@define-record-type-macro (if (memv G3ea8@t '(define-struct)) G2f48@define-struct-macro (if (memv G3ea8@t '(include)) G2f3e@include-macro (if (memv G3ea8@t '(cond)) G2f3a@cond-macro (if (memv G3ea8@t '(let)) G2f12@let-macro (if (memv G3ea8@t '(do)) G2f32@do-macro (if (memv G3ea8@t '(or)) G2f36@or-macro (if (memv G3ea8@t '(and)) G2f38@and-macro (if (memv G3ea8@t '(let*)) G2f34@let*-macro (if (memv G3ea8@t '(let-values)) G2f14@let-values-macro (if (memv G3ea8@t '(let*-values)) G2f16@let*-values-macro (if (memv G3ea8@t '(syntax-rules)) G2f42@syntax-rules-macro (if (memv G3ea8@t '(quasiquote)) G2f44@quasiquote-macro (if (memv G3ea8@t '(quasisyntax)) G2f46@quasisyntax-macro (if (memv G3ea8@t '(with-syntax)) G2f0e@with-syntax-macro (if (memv G3ea8@t '(when)) G2efa@when-macro (if (memv G3ea8@t '(unless)) G2efc@unless-macro (if (memv G3ea8@t '(case)) G2f04@case-macro (if (memv G3ea8@t '(identifier-syntax)) G2f30@identifier-syntax-macro (if (memv G3ea8@t '(time)) G2f28@time-macro (if (memv G3ea8@t '(delay)) G2f2a@delay-macro (if (memv G3ea8@t '(assert)) G2f2c@assert-macro (if (memv G3ea8@t '(endianness)) G2f2e@endianness-macro (if (memv G3ea8@t '(guard)) G2f24@guard-macro (if (memv G3ea8@t '(define-enumeration)) G2f26@define-enumeration-macro (if (memv G3ea8@t '(trace-lambda)) G2f18@trace-lambda-macro (if (memv G3ea8@t '(trace-define)) G2f1a@trace-define-macro (if (memv G3ea8@t '(trace-define-syntax)) G2f1c@trace-define-syntax-macro (if (memv G3ea8@t '(trace-let-syntax)) G2f20@trace-let-syntax-macro (if (memv G3ea8@t '(trace-letrec-syntax)) G2f22@trace-letrec-syntax-macro (if (memv G3ea8@t '(define-condition-type)) G2f4c@define-condition-type-macro (if (memv G3ea8@t '(parameterize)) G2f50@parameterize-macro (if (memv G3ea8@t '(include-into)) G2f40@include-into-macro (if (memv G3ea8@t '(eol-style)) (lambda (G3eaa@x) (G2f68@symbol-macro G3eaa@x '(none lf cr crlf nel crnel ls))) (if (memv G3ea8@t '(error-handling-mode)) (lambda (G3eac@x) (G2f68@symbol-macro G3eac@x '(ignore raise replace))) (if (memv G3ea8@t '(buffer-mode)) (lambda (G3eae@x) (G2f68@symbol-macro G3eae@x '(none line block))) (if (memv G3ea8@t '(file-options)) G2f66@file-options-macro (if (memv G3ea8@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f4e@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ea6@x)))))))))))))))))))))))))))))))))))))))) G3ea6@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ea6@x))))) (set! G2f6c@local-macro-transformer (lambda (G3eb0@x) (car G3eb0@x))) (set! G2f6e@do-macro-call (lambda (G3eb2@transformer G3eb3@expr) ((lambda (G3eb6@out) (begin ((letrec ((G3eb8@f (lambda (G3eba@x) (if (not (G2d1f@stx? G3eba@x)) (if (pair? G3eba@x) (begin (G3eb8@f (car G3eba@x)) (G3eb8@f (cdr G3eba@x))) (if (vector? G3eba@x) (vector-for-each G3eb8@f G3eba@x) (if (symbol? G3eba@x) (G3041@syntax-violation '#f '"raw symbol encountered in output of macro" G3eb3@expr G3eba@x) (void)))) (void))))) G3eb8@f) G3eb6@out) (G2d41@add-mark (G2d37@gen-mark) G3eb6@out G3eb3@expr))) (G3eb2@transformer (G2d41@add-mark G2d39@anti-mark G3eb3@expr '#f))))) (set! G2f70@chi-macro (lambda (G3ebc@p G3ebd@e) (G2f6e@do-macro-call (G2f6a@macro-transformer G3ebc@p) G3ebd@e))) (set! G2f72@chi-local-macro (lambda (G3ec0@p G3ec1@e) (G2f6e@do-macro-call (G2f6c@local-macro-transformer G3ec0@p) G3ec1@e))) (set! G2f74@chi-global-macro (lambda (G3ec4@p G3ec5@e) ((lambda (G3ec8@lib G3ec9@loc) (begin (G2b6f@G2a17@visit-library G3ec8@lib) ((lambda (G3ecc@x) ((lambda (G3ece@transformer) (G2f6e@do-macro-call G3ece@transformer G3ec5@e)) (if (procedure? G3ecc@x) G3ecc@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ecc@x)))) (symbol-value G3ec9@loc)))) (car G3ec4@p) (cdr G3ec4@p)))) (set! G2f76@chi-expr* (lambda (G3ed0@e* G3ed1@r G3ed2@mr) (if (null? G3ed0@e*) '() ((lambda (G3ed6@e) (cons G3ed6@e (G2f76@chi-expr* (cdr G3ed0@e*) G3ed1@r G3ed2@mr))) (G2f7a@chi-expr (car G3ed0@e*) G3ed1@r G3ed2@mr))))) (set! G2f78@chi-application (lambda (G3ed8@e G3ed9@r G3eda@mr) ((lambda (G3ede@t) ((lambda (G3ee0@ls/false) (if G3ee0@ls/false (apply (lambda (G3ee2@rator G3ee3@rands) ((lambda (G3ee6@rator) (cons G3ee6@rator (G2f76@chi-expr* G3ee3@rands G3ed9@r G3eda@mr))) (G2f7a@chi-expr G3ee2@rator G3ed9@r G3eda@mr))) G3ee0@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3ede@t))) (G2f56@syntax-dispatch G3ede@t '(any . each-any)))) G3ed8@e))) (set! G2f7a@chi-expr (lambda (G3ee8@e G3ee9@r G3eea@mr) (call-with-values (lambda () (G2d7f@syntax-type G3ee8@e G3ee9@r)) (lambda (G3ef1@G3eee G3ef2@G3eef G3ef3@G3ef0) ((lambda (G3ef7@kwd G3ef8@value G3ef9@type) ((lambda (G3efd@t) (if (memv G3efd@t '(core-macro)) ((lambda (G3eff@transformer) (G3eff@transformer G3ee8@e G3ee9@r G3eea@mr)) (G2f64@core-macro-transformer G3ef8@value)) (if (memv G3efd@t '(global)) ((lambda (G3f01@lib) ((lambda (G3f03@loc) ((lambda () (begin ((G2fc3@inv-collector) G3f01@lib) G3f03@loc)))) (cdr G3ef8@value))) (car G3ef8@value)) (if (memv G3efd@t '(core-prim)) ((lambda (G3f05@name) (list 'primitive G3f05@name)) G3ef8@value) (if (memv G3efd@t '(call)) (G2f78@chi-application G3ee8@e G3ee9@r G3eea@mr) (if (memv G3efd@t '(lexical)) ((lambda (G3f07@lex) G3f07@lex) (G2ee2@lexical-var G3ef8@value)) (if (memv G3efd@t '(global-macro global-macro!)) (G2f7a@chi-expr (G2f74@chi-global-macro G3ef8@value G3ee8@e) G3ee9@r G3eea@mr) (if (memv G3efd@t '(local-macro local-macro!)) (G2f7a@chi-expr (G2f72@chi-local-macro G3ef8@value G3ee8@e) G3ee9@r G3eea@mr) (if (memv G3efd@t '(macro macro!)) (G2f7a@chi-expr (G2f70@chi-macro G3ef8@value G3ee8@e) G3ee9@r G3eea@mr) (if (memv G3efd@t '(constant)) ((lambda (G3f09@datum) (list 'quote G3f09@datum)) G3ef8@value) (if (memv G3efd@t '(set!)) (G2f7c@chi-set! G3ee8@e G3ee9@r G3eea@mr) (if (memv G3efd@t '(begin)) ((lambda (G3f0b@t) ((lambda (G3f0d@ls/false) (if G3f0d@ls/false (apply (lambda (G3f0f@x G3f10@x*) (G2cb4@G2c25@build-sequence '#f (G2f76@chi-expr* (cons G3f0f@x G3f10@x*) G3ee9@r G3eea@mr))) G3f0d@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3f0b@t))) (G2f56@syntax-dispatch G3f0b@t '(_ any . each-any)))) G3ee8@e) (if (memv G3efd@t '(let-syntax letrec-syntax)) ((lambda (G3f13@t) ((lambda (G3f15@ls/false) (if (and G3f15@ls/false (apply (lambda (G3f17@xlhs* G3f18@xrhs* G3f19@xbody G3f1a@xbody*) (if (not (G2d61@valid-bound-ids? G3f17@xlhs*)) (G3041@syntax-violation '#f '"invalid identifiers" G3ee8@e) (void))) G3f15@ls/false)) (apply (lambda (G3f1f@xlhs* G3f20@xrhs* G3f21@xbody G3f22@xbody*) ((lambda (G3f27@xlab*) ((lambda (G3f29@xrib) ((lambda (G3f2b@xb*) ((lambda () (G2cb4@G2c25@build-sequence '#f (G2f76@chi-expr* (map (lambda (G3f2d@x) (G2d43@add-subst G3f29@xrib G3f2d@x)) (cons G3f21@xbody G3f22@xbody*)) (append (map cons G3f27@xlab* G3f2b@xb*) G3ee9@r) (append (map cons G3f27@xlab* G3f2b@xb*) G3eea@mr)))))) (map (lambda (G3f2f@x) (G2d97@make-eval-transformer (G2fb5@expand-transformer (if (eq? G3ef9@type 'let-syntax) G3f2f@x (G2d43@add-subst G3f29@xrib G3f2f@x)) G3eea@mr))) G3f20@xrhs*))) (G2d12@make-full-rib G3f1f@xlhs* G3f27@xlab*))) (map G2cd7@gen-label G3f1f@xlhs*))) G3f15@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3f13@t))) (G2f56@syntax-dispatch G3f13@t '(_ #(each (any any)) any . each-any)))) G3ee8@e) (if (memv G3efd@t '(displaced-lexical)) (G3041@syntax-violation '#f '"identifier out of context" G3ee8@e) (if (memv G3efd@t '(syntax)) (G3041@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ee8@e) (if (memv G3efd@t '(define define-syntax module import library)) (G3041@syntax-violation '#f (string-append ((lambda (G3f31@t) (if (memv G3f31@t '(define)) '"a definition" (if (memv G3f31@t '(define-syntax)) '"a define-syntax" (if (memv G3f31@t '(module)) '"a module definition" (if (memv G3f31@t '(library)) '"a library definition" (if (memv G3f31@t '(import)) '"an import declaration" (if (memv G3f31@t '(export)) '"an export declaration" '"a non-expression"))))))) G3ef9@type) '" was found where an expression was expected") G3ee8@e) (if (memv G3efd@t '(mutable)) (G3041@syntax-violation '#f '"attempt to reference an unexportable variable" G3ee8@e) (G3041@syntax-violation '#f '"invalid expression" G3ee8@e)))))))))))))))))) G3ef9@type)) G3ef3@G3ef0 G3ef2@G3eef G3ef1@G3eee))))) (set! G2f7c@chi-set! (lambda (G3f33@e G3f34@r G3f35@mr) ((lambda (G3f39@t) ((lambda (G3f3b@ls/false) (if (and G3f3b@ls/false (apply (lambda (G3f3d@x G3f3e@v) (G2d57@id? G3f3d@x)) G3f3b@ls/false)) (apply (lambda (G3f41@x G3f42@v) (call-with-values (lambda () (G2d7f@syntax-type G3f41@x G3f34@r)) (lambda (G3f48@G3f45 G3f49@G3f46 G3f4a@G3f47) ((lambda (G3f4e@kwd G3f4f@value G3f50@type) ((lambda (G3f54@t) (if (memv G3f54@t '(lexical)) (begin (G2ee6@set-lexical-mutable! G3f4f@value '#t) (list 'set! (G2ee2@lexical-var G3f4f@value) (G2f7a@chi-expr G3f42@v G3f34@r G3f35@mr))) (if (memv G3f54@t '(core-prim)) (G3041@syntax-violation '#f '"cannot modify imported core primitive" G3f33@e) (if (memv G3f54@t '(global)) (G3041@syntax-violation '#f '"attempt to modify imported binding" G3f33@e) (if (memv G3f54@t '(global-macro!)) (G2f7a@chi-expr (G2f74@chi-global-macro G3f4f@value G3f33@e) G3f34@r G3f35@mr) (if (memv G3f54@t '(local-macro!)) (G2f7a@chi-expr (G2f72@chi-local-macro G3f4f@value G3f33@e) G3f34@r G3f35@mr) (if (memv G3f54@t '(mutable)) (G3041@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f33@e) (G3041@syntax-violation '#f '"invalid syntax" G3f33@e)))))))) G3f50@type)) G3f4a@G3f47 G3f49@G3f46 G3f48@G3f45)))) G3f3b@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3f39@t))) (G2f56@syntax-dispatch G3f39@t '(_ any any)))) G3f33@e))) (set! G2f7e@verify-formals (lambda (G3f56@fmls G3f57@stx) ((lambda (G3f5a@t) ((lambda (G3f5c@ls/false) (if G3f5c@ls/false (apply (lambda (G3f5e@x*) (if (not (G2d61@valid-bound-ids? G3f5e@x*)) (G2f10@invalid-fmls-error G3f57@stx G3f56@fmls) (void))) G3f5c@ls/false) ((lambda (G3f60@t) ((lambda (G3f62@ls/false) (if G3f62@ls/false (apply (lambda (G3f64@x* G3f65@x) (if (not (G2d61@valid-bound-ids? (cons G3f65@x G3f64@x*))) (G2f10@invalid-fmls-error G3f57@stx G3f56@fmls) (void))) G3f62@ls/false) ((lambda (G3f68@t) ((lambda (G3f6a@ls/false) (if G3f6a@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid syntax" G3f57@stx)) G3f6a@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3f68@t))) (G2f56@syntax-dispatch G3f68@t '_))) G3f60@t))) (G2f56@syntax-dispatch G3f60@t '#(each+ any () any)))) G3f5a@t))) (G2f56@syntax-dispatch G3f5a@t 'each-any))) G3f56@fmls))) (set! G2f80@chi-lambda-clause (lambda (G3f6c@stx G3f6d@fmls G3f6e@body* G3f6f@r G3f70@mr) ((lambda (G3f76@t) ((lambda (G3f78@ls/false) (if G3f78@ls/false (apply (lambda (G3f7a@x*) (begin (G2f7e@verify-formals G3f6d@fmls G3f6c@stx) ((lambda (G3f7c@lex* G3f7d@lab*) (values G3f7c@lex* (G2f90@chi-internal (G2d43@add-subst (G2d12@make-full-rib G3f7a@x* G3f7d@lab*) G3f6e@body*) (G2eea@add-lexicals G3f7d@lab* G3f7c@lex* G3f6f@r) G3f70@mr))) (map G2cd3@gen-lexical G3f7a@x*) (map G2cd7@gen-label G3f7a@x*)))) G3f78@ls/false) ((lambda (G3f80@t) ((lambda (G3f82@ls/false) (if G3f82@ls/false (apply (lambda (G3f84@x* G3f85@x) (begin (G2f7e@verify-formals G3f6d@fmls G3f6c@stx) ((lambda (G3f88@lex* G3f89@lab* G3f8a@lex G3f8b@lab) (values (append G3f88@lex* G3f8a@lex) (G2f90@chi-internal (G2d43@add-subst (G2d12@make-full-rib (cons G3f85@x G3f84@x*) (cons G3f8b@lab G3f89@lab*)) G3f6e@body*) (G2eea@add-lexicals (cons G3f8b@lab G3f89@lab*) (cons G3f8a@lex G3f88@lex*) G3f6f@r) G3f70@mr))) (map G2cd3@gen-lexical G3f84@x*) (map G2cd7@gen-label G3f84@x*) (G2cd3@gen-lexical G3f85@x) (G2cd7@gen-label G3f85@x)))) G3f82@ls/false) ((lambda (G3f90@t) ((lambda (G3f92@ls/false) (if G3f92@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid syntax" G3f6d@fmls)) G3f92@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G3f90@t))) (G2f56@syntax-dispatch G3f90@t '_))) G3f80@t))) (G2f56@syntax-dispatch G3f80@t '#(each+ any () any)))) G3f76@t))) (G2f56@syntax-dispatch G3f76@t 'each-any))) G3f6d@fmls))) (set! G2f82@chi-lambda-clause* (lambda (G3f94@stx G3f95@fmls* G3f96@body** G3f97@r G3f98@mr) (if (null? G3f95@fmls*) (values '() '()) (call-with-values (lambda () (G2f80@chi-lambda-clause G3f94@stx (car G3f95@fmls*) (car G3f96@body**) G3f97@r G3f98@mr)) (lambda (G3fa0@G3f9e G3fa1@G3f9f) ((lambda (G3fa4@b G3fa5@a) (call-with-values (lambda () (G2f82@chi-lambda-clause* G3f94@stx (cdr G3f95@fmls*) (cdr G3f96@body**) G3f97@r G3f98@mr)) (lambda (G3faa@G3fa8 G3fab@G3fa9) ((lambda (G3fae@b* G3faf@a*) (values (cons G3fa5@a G3faf@a*) (cons G3fa4@b G3fae@b*))) G3fab@G3fa9 G3faa@G3fa8)))) G3fa1@G3f9f G3fa0@G3f9e)))))) (set! G2f84@chi-defun (lambda (G3fb2@x G3fb3@r G3fb4@mr) ((lambda (G3fb8@fmls G3fb9@body*) (call-with-values (lambda () (G2f80@chi-lambda-clause G3fb8@fmls G3fb8@fmls G3fb9@body* G3fb3@r G3fb4@mr)) (lambda (G3fbe@G3fbc G3fbf@G3fbd) ((lambda (G3fc2@body G3fc3@fmls) (G2cb1@G2bef@build-lambda '#f G3fc3@fmls G3fc2@body)) G3fbf@G3fbd G3fbe@G3fbc)))) (car G3fb2@x) (cdr G3fb2@x)))) (set! G2f86@chi-rhs (lambda (G3fc6@rhs G3fc7@r G3fc8@mr) ((lambda (G3fcc@t) (if (memv G3fcc@t '(defun)) (G2f84@chi-defun (cdr G3fc6@rhs) G3fc7@r G3fc8@mr) (if (memv G3fcc@t '(expr)) ((lambda (G3fce@expr) (G2f7a@chi-expr G3fce@expr G3fc7@r G3fc8@mr)) (cdr G3fc6@rhs)) (if (memv G3fcc@t '(top-expr)) ((lambda (G3fd0@expr) (G2cb4@G2c25@build-sequence '#f (list (G2f7a@chi-expr G3fd0@expr G3fc7@r G3fc8@mr) (G2cb5@G2c27@build-void)))) (cdr G3fc6@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fc6@rhs))))) (car G3fc6@rhs)))) (set! G2f88@expand-interaction-rhs*/init* (lambda (G3fd2@lhs* G3fd3@rhs* G3fd4@init* G3fd5@r G3fd6@mr) ((letrec ((G3fdc@f (lambda (G3fde@lhs* G3fdf@rhs*) (if (null? G3fde@lhs*) (map (lambda (G3fe2@x) (G2f7a@chi-expr G3fe2@x G3fd5@r G3fd6@mr)) G3fd4@init*) ((lambda (G3fe4@lhs G3fe5@rhs) ((lambda (G3fe8@t) (if (memv G3fe8@t '(defun)) ((lambda (G3fea@rhs) (cons (list 'set! G3fe4@lhs G3fea@rhs) (G3fdc@f (cdr G3fde@lhs*) (cdr G3fdf@rhs*)))) (G2f84@chi-defun (cdr G3fe5@rhs) G3fd5@r G3fd6@mr)) (if (memv G3fe8@t '(expr)) ((lambda (G3fec@rhs) (cons (list 'set! G3fe4@lhs G3fec@rhs) (G3fdc@f (cdr G3fde@lhs*) (cdr G3fdf@rhs*)))) (G2f7a@chi-expr (cdr G3fe5@rhs) G3fd5@r G3fd6@mr)) (if (memv G3fe8@t '(top-expr)) ((lambda (G3fee@e) (cons G3fee@e (G3fdc@f (cdr G3fde@lhs*) (cdr G3fdf@rhs*)))) (G2f7a@chi-expr (cdr G3fe5@rhs) G3fd5@r G3fd6@mr)) (error 'expand-interaction '"invallid" G3fe5@rhs))))) (car G3fe5@rhs))) (car G3fde@lhs*) (car G3fdf@rhs*)))))) G3fdc@f) G3fd2@lhs* G3fd3@rhs*))) (set! G2f8a@chi-rhs* (lambda (G3ff0@rhs* G3ff1@r G3ff2@mr) ((letrec ((G3ff6@f (lambda (G3ff8@ls) (if (null? G3ff8@ls) '() ((lambda (G3ffa@a) (cons G3ffa@a (G3ff6@f (cdr G3ff8@ls)))) (G2f86@chi-rhs (car G3ff8@ls) G3ff1@r G3ff2@mr)))))) G3ff6@f) G3ff0@rhs*))) (set! G2f8c@find-bound=? (lambda (G3ffc@x G3ffd@lhs* G3ffe@rhs*) (if (null? G3ffd@lhs*) '#f (if (G2d5d@bound-id=? G3ffc@x (car G3ffd@lhs*)) (car G3ffe@rhs*) (G2f8c@find-bound=? G3ffc@x (cdr G3ffd@lhs*) (cdr G3ffe@rhs*)))))) (set! G2f8e@find-dups (lambda (G4002@ls) ((letrec ((G4004@f (lambda (G4006@ls G4007@dups) (if (null? G4006@ls) G4007@dups ((lambda (G400a@t) (if G400a@t ((lambda (G400c@x) (G4004@f (cdr G4006@ls) (cons (list (car G4006@ls) G400c@x) G4007@dups))) G400a@t) (G4004@f (cdr G4006@ls) G4007@dups))) (G2f8c@find-bound=? (car G4006@ls) (cdr G4006@ls) (cdr G4006@ls))))))) G4004@f) G4002@ls '()))) (set! G2f90@chi-internal (lambda (G400e@e* G400f@r G4010@mr) ((lambda (G4014@rib) (call-with-values (lambda () (G2fb3@chi-body* (map (lambda (G401e@x) (G2d43@add-subst G4014@rib G401e@x)) (G2d55@syntax->list G400e@e*)) G400f@r G4010@mr '() '() '() '() '() G4014@rib '#f)) (lambda (G4020@G4016 G4021@G4017 G4022@G4018 G4023@G4019 G4024@G401a G4025@G401b G4026@G401c G4027@G401d) ((lambda (G4030@_exp* G4031@kwd* G4032@mod** G4033@rhs* G4034@lex* G4035@mr G4036@r G4037@e*) (begin (if (null? G4037@e*) (G3041@syntax-violation '#f '"no expression in body" G4037@e*) (void)) ((lambda (G4040@init*) ((lambda (G4042@rhs*) ((lambda () (G2cb7@G2c2b@build-letrec* '#f (reverse G4034@lex*) (reverse G4042@rhs*) (G2cb4@G2c25@build-sequence '#f G4040@init*))))) (G2f8a@chi-rhs* G4033@rhs* G4036@r G4035@mr))) (G2f76@chi-expr* (append (apply append (reverse G4032@mod**)) G4037@e*) G4036@r G4035@mr)))) G4027@G401d G4026@G401c G4025@G401b G4024@G401a G4023@G4019 G4022@G4018 G4021@G4017 G4020@G4016)))) (G2d02@make-empty-rib)))) (set! G2f92@parse-module (lambda (G4044@e) ((lambda (G4046@t) ((lambda (G4048@ls/false) (if G4048@ls/false (apply (lambda (G404a@export* G404b@b*) (begin (if (not (for-all G2d57@id? G404a@export*)) (G3041@syntax-violation '#f '"module exports must be identifiers" G4044@e) (void)) (values '#f (list->vector G404a@export*) G404b@b*))) G4048@ls/false) ((lambda (G404e@t) ((lambda (G4050@ls/false) (if G4050@ls/false (apply (lambda (G4052@name G4053@export* G4054@b*) (begin (if (not (G2d57@id? G4052@name)) (G3041@syntax-violation '#f '"module name must be an identifier" G4044@e) (void)) (if (not (for-all G2d57@id? G4053@export*)) (G3041@syntax-violation '#f '"module exports must be identifiers" G4044@e) (void)) (values G4052@name (list->vector G4053@export*) G4054@b*))) G4050@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G404e@t))) (G2f56@syntax-dispatch G404e@t '(_ any each-any . each-any)))) G4046@t))) (G2f56@syntax-dispatch G4046@t '(_ each-any . each-any)))) G4044@e))) (set! G2f98@G2f93 (make-record-type-descriptor 'module-interface '#f 'G2f96 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2f9a@G2f95 '#f) (set! G2f9c@G2f94 (make-record-constructor-descriptor G2f98@G2f93 '#f G2f9a@G2f95)) (set! G2f9f@module-interface? (record-predicate G2f98@G2f93)) (set! G2fa1@make-module-interface (record-constructor G2f9c@G2f94)) (set! G2fa3@module-interface-first-mark (record-accessor G2f98@G2f93 '0)) (set! G2fa5@module-interface-exp-id-vec (record-accessor G2f98@G2f93 '1)) (set! G2fa7@module-interface-exp-lab-vec (record-accessor G2f98@G2f93 '2)) (set! G2fa9@set-module-interface-first-mark! (record-mutator G2f98@G2f93 '0)) (set! G2fab@set-module-interface-exp-id-vec! (record-mutator G2f98@G2f93 '1)) (set! G2fad@set-module-interface-exp-lab-vec! (record-mutator G2f98@G2f93 '2)) (set! G2faf@module-interface-exp-id* (lambda (G4058@iface G4059@id) ((lambda (G405d@diff-marks) (begin (set! G405d@diff-marks (lambda (G4064@ls G4065@x) (begin (if (null? G4064@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4068@a) (if (eq? G4068@a G4065@x) '() (cons G4068@a (G405d@diff-marks (cdr G4064@ls) G4065@x)))) (car G4064@ls))))) ((lambda (G405e@diff G405f@id-vec) (if (null? G405e@diff) G405f@id-vec (vector-map (lambda (G4062@x) (G2d21@make-stx (G2d23@stx-expr G4062@x) (append G405e@diff (G2d25@stx-mark* G4062@x)) '() '())) G405f@id-vec))) (G405d@diff-marks (G2d25@stx-mark* G4059@id) (G2fa3@module-interface-first-mark G4058@iface)) (G2fa5@module-interface-exp-id-vec G4058@iface)))) '#f))) (set! G2fb1@chi-internal-module (lambda (G406a@e G406b@r G406c@mr G406d@lex* G406e@rhs* G406f@mod** G4070@kwd*) (call-with-values (lambda () (G2f92@parse-module G406a@e)) (lambda (G407b@G4078 G407c@G4079 G407d@G407a) ((lambda (G4081@e* G4082@exp-id* G4083@name) ((lambda (G4087@rib) ((lambda (G4089@e*) ((lambda () (call-with-values (lambda () (G2fb3@chi-body* G4089@e* G406b@r G406c@mr G406d@lex* G406e@rhs* G406f@mod** G4070@kwd* '() G4087@rib '#f)) (lambda (G4093@G408b G4094@G408c G4095@G408d G4096@G408e G4097@G408f G4098@G4090 G4099@G4091 G409a@G4092) ((lambda (G40a3@_exp* G40a4@kwd* G40a5@mod** G40a6@rhs* G40a7@lex* G40a8@mr G40a9@r G40aa@e*) ((lambda (G40b3@exp-lab* G40b4@mod**) (if (not G4083@name) (values G40a7@lex* G40a6@rhs* G4082@exp-id* G40b3@exp-lab* G40a9@r G40a8@mr G40b4@mod** G40a4@kwd*) ((lambda (G40b7@lab G40b8@iface) (values G40a7@lex* G40a6@rhs* (vector G4083@name) (vector G40b7@lab) (cons (cons G40b7@lab (cons '$module G40b8@iface)) G40a9@r) (cons (cons G40b7@lab (cons '$module G40b8@iface)) G40a8@mr) G40b4@mod** G40a4@kwd*)) (G2cd7@gen-label 'module) (G2fa1@make-module-interface (car (G2d25@stx-mark* G4083@name)) (vector-map (lambda (G40bb@x) (G2d21@make-stx (G2d23@stx-expr G40bb@x) (G2d25@stx-mark* G40bb@x) '() '())) G4082@exp-id*) G40b3@exp-lab*)))) (vector-map (lambda (G40bd@x) (or (G2d71@id->label (G2d21@make-stx (G2d59@id->sym G40bd@x) (G2d25@stx-mark* G40bd@x) (list G4087@rib) '())) (G3041@syntax-violation '#f '"cannot find module export" G40bd@x))) G4082@exp-id*) (cons G40aa@e* G40a5@mod**))) G409a@G4092 G4099@G4091 G4098@G4090 G4097@G408f G4096@G408e G4095@G408d G4094@G408c G4093@G408b)))))) (map (lambda (G40bf@x) (G2d43@add-subst G4087@rib G40bf@x)) (G2d55@syntax->list G4081@e*)))) (G2d02@make-empty-rib))) G407d@G407a G407c@G4079 G407b@G4078))))) (set! G2fb3@chi-body* (lambda (G40c1@e* G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40c7@kwd* G40c8@exp* G40c9@rib G40ca@top?) (if (null? G40c1@e*) (values G40c1@e* G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40c7@kwd* G40c8@exp*) ((lambda (G40d5@e) (call-with-values (lambda () (G2d7f@syntax-type G40d5@e G40c2@r)) (lambda (G40da@G40d7 G40db@G40d8 G40dc@G40d9) ((lambda (G40e0@kwd G40e1@value G40e2@type) ((lambda (G40e6@kwd*) ((lambda (G40e8@t) (if (memv G40e8@t '(define)) (call-with-values (lambda () (G2eda@parse-define G40d5@e)) (lambda (G40ec@G40ea G40ed@G40eb) ((lambda (G40f0@rhs G40f1@id) (begin (if (G2d65@bound-id-member? G40f1@id G40e6@kwd*) (G3041@syntax-violation '#f '"cannot redefine keyword" G40d5@e) (void)) (call-with-values (lambda () (G2cdb@gen-define-label+loc G40f1@id G40c9@rib)) (lambda (G40f6@G40f4 G40f7@G40f5) ((lambda (G40fa@lex G40fb@lab) (begin (G2d08@extend-rib! G40c9@rib G40f1@id G40fb@lab) (G2fb3@chi-body* (cdr G40c1@e*) (G2ee8@add-lexical G40fb@lab G40fa@lex G40c2@r) G40c3@mr (cons G40fa@lex G40c4@lex*) (cons G40f0@rhs G40c5@rhs*) G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?))) G40f7@G40f5 G40f6@G40f4))))) G40ed@G40eb G40ec@G40ea))) (if (memv G40e8@t '(define-syntax)) (call-with-values (lambda () (G2edc@parse-define-syntax G40d5@e)) (lambda (G4100@G40fe G4101@G40ff) ((lambda (G4104@rhs G4105@id) (begin (if (G2d65@bound-id-member? G4105@id G40e6@kwd*) (G3041@syntax-violation '#f '"cannot redefine keyword" G40d5@e) (void)) ((lambda (G4108@lab G4109@expanded-rhs) (begin (G2d08@extend-rib! G40c9@rib G4105@id G4108@lab) ((lambda (G410c@b) (G2fb3@chi-body* (cdr G40c1@e*) (cons (cons G4108@lab G410c@b) G40c2@r) (cons (cons G4108@lab G410c@b) G40c3@mr) G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?)) (G2d97@make-eval-transformer G4109@expanded-rhs)))) (G2cdd@gen-define-label G4105@id G40c9@rib) (G2fb5@expand-transformer G4104@rhs G40c3@mr)))) G4101@G40ff G4100@G40fe))) (if (memv G40e8@t '(let-syntax letrec-syntax)) ((lambda (G410e@t) ((lambda (G4110@ls/false) (if (and G4110@ls/false (apply (lambda (G4112@xlhs* G4113@xrhs* G4114@xbody*) (if (not (G2d61@valid-bound-ids? G4112@xlhs*)) (G3041@syntax-violation '#f '"invalid identifiers" G40d5@e) (void))) G4110@ls/false)) (apply (lambda (G4118@xlhs* G4119@xrhs* G411a@xbody*) ((lambda (G411e@xlab*) ((lambda (G4120@xrib) ((lambda (G4122@xb*) ((lambda () (G2fb3@chi-body* (append (map (lambda (G4124@x) (G2d43@add-subst G4120@xrib G4124@x)) G411a@xbody*) (cdr G40c1@e*)) (append (map cons G411e@xlab* G4122@xb*) G40c2@r) (append (map cons G411e@xlab* G4122@xb*) G40c3@mr) G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?)))) (map (lambda (G4126@x) (G2d97@make-eval-transformer (G2fb5@expand-transformer (if (eq? G40e2@type 'let-syntax) G4126@x (G2d43@add-subst G4120@xrib G4126@x)) G40c3@mr))) G4119@xrhs*))) (G2d12@make-full-rib G4118@xlhs* G411e@xlab*))) (map G2cd7@gen-label G4118@xlhs*))) G4110@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G410e@t))) (G2f56@syntax-dispatch G410e@t '(_ #(each (any any)) . each-any)))) G40d5@e) (if (memv G40e8@t '(begin)) ((lambda (G4128@t) ((lambda (G412a@ls/false) (if G412a@ls/false (apply (lambda (G412c@x*) (G2fb3@chi-body* (append G412c@x* (cdr G40c1@e*)) G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?)) G412a@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G4128@t))) (G2f56@syntax-dispatch G4128@t '(_ . each-any)))) G40d5@e) (if (memv G40e8@t '(global-macro global-macro!)) (G2fb3@chi-body* (cons (G2d43@add-subst G40c9@rib (G2f74@chi-global-macro G40e1@value G40d5@e)) (cdr G40c1@e*)) G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?) (if (memv G40e8@t '(local-macro local-macro!)) (G2fb3@chi-body* (cons (G2d43@add-subst G40c9@rib (G2f72@chi-local-macro G40e1@value G40d5@e)) (cdr G40c1@e*)) G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?) (if (memv G40e8@t '(macro macro!)) (G2fb3@chi-body* (cons (G2d43@add-subst G40c9@rib (G2f70@chi-macro G40e1@value G40d5@e)) (cdr G40c1@e*)) G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?) (if (memv G40e8@t '(module)) (call-with-values (lambda () (G2fb1@chi-internal-module G40d5@e G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd*)) (lambda (G4136@G412e G4137@G412f G4138@G4130 G4139@G4131 G413a@G4132 G413b@G4133 G413c@G4134 G413d@G4135) ((lambda (G4146@kwd* G4147@mod** G4148@mr G4149@r G414a@m-exp-lab* G414b@m-exp-id* G414c@rhs* G414d@lex*) (begin (vector-for-each (lambda (G4156@id G4157@lab) (G2d08@extend-rib! G40c9@rib G4156@id G4157@lab)) G414b@m-exp-id* G414a@m-exp-lab*) (G2fb3@chi-body* (cdr G40c1@e*) G4149@r G4148@mr G414d@lex* G414c@rhs* G4147@mod** G4146@kwd* G40c8@exp* G40c9@rib G40ca@top?))) G413d@G4135 G413c@G4134 G413b@G4133 G413a@G4132 G4139@G4131 G4138@G4130 G4137@G412f G4136@G412e))) (if (memv G40e8@t '(library)) (begin (G3023@library-expander (G2d6d@stx->datum G40d5@e)) (G2fb3@chi-body* (cdr G40c1@e*) G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?)) (if (memv G40e8@t '(export)) ((lambda (G415a@t) ((lambda (G415c@ls/false) (if G415c@ls/false (apply (lambda (G415e@exp-decl*) (G2fb3@chi-body* (cdr G40c1@e*) G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* (append G415e@exp-decl* G40c8@exp*) G40c9@rib G40ca@top?)) G415c@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G415a@t))) (G2f56@syntax-dispatch G415a@t '(_ . each-any)))) G40d5@e) (if (memv G40e8@t '(import)) ((lambda () ((lambda (G4161@module-import? G4163@module-import G4165@library-import) (begin (set! G4161@module-import? (lambda (G41ad@e) ((lambda (G41af@t) ((lambda (G41b1@ls/false) (if (and G41b1@ls/false (apply (lambda (G41b3@id) (G2d57@id? G41b3@id)) G41b1@ls/false)) (apply (lambda (G41b5@id) '#t) G41b1@ls/false) ((lambda (G41b7@t) ((lambda (G41b9@ls/false) (if G41b9@ls/false (apply (lambda (G41bb@imp*) '#f) G41b9@ls/false) ((lambda (G41bd@t) ((lambda (G41bf@ls/false) (if G41bf@ls/false (apply (lambda () (G3041@syntax-violation '#f '"malformed import form" G41ad@e)) G41bf@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G41bd@t))) (G2f56@syntax-dispatch G41bd@t '_))) G41b7@t))) (G2f56@syntax-dispatch G41b7@t '(_ . each-any)))) G41af@t))) (G2f56@syntax-dispatch G41af@t '(_ any)))) G41ad@e))) (set! G4163@module-import (lambda (G418e@e G418f@r) ((lambda (G4192@t) ((lambda (G4194@ls/false) (if (and G4194@ls/false (apply (lambda (G4196@id) (G2d57@id? G4196@id)) G4194@ls/false)) (apply (lambda (G4198@id) (call-with-values (lambda () (G2d7f@syntax-type G4198@id G418f@r)) (lambda (G419d@G419a G419e@G419b G419f@G419c) ((lambda (G41a3@kwd G41a4@value G41a5@type) ((lambda (G41a9@t) (if (memv G41a9@t '($module)) ((lambda (G41ab@iface) (values (G2faf@module-interface-exp-id* G41ab@iface G4198@id) (G2fa7@module-interface-exp-lab-vec G41ab@iface))) G41a4@value) (G3041@syntax-violation '#f '"invalid import" G418e@e))) G41a5@type)) G419f@G419c G419e@G419b G419d@G419a)))) G4194@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G4192@t))) (G2f56@syntax-dispatch G4192@t '(_ any)))) G418e@e))) (set! G4165@library-import (lambda (G4174@e) ((lambda (G4176@t) ((lambda (G4178@ls/false) (if G4178@ls/false (apply (lambda (G417a@ctxt G417b@imp*) (call-with-values (lambda () (G2fbd@parse-import-spec* (G3047@syntax->datum G417b@imp*))) (lambda (G4180@G417e G4181@G417f) ((lambda (G4184@subst-labels G4185@subst-names) (values (vector-map (lambda (G4188@name) (G2d35@datum->stx G417a@ctxt G4188@name)) G4185@subst-names) G4184@subst-labels)) G4181@G417f G4180@G417e)))) G4178@ls/false) ((lambda (G418a@t) ((lambda (G418c@ls/false) (if G418c@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid import form" G4174@e)) G418c@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G418a@t))) (G2f56@syntax-dispatch G418a@t '_))) G4176@t))) (G2f56@syntax-dispatch G4176@t '(any . each-any)))) G4174@e))) (begin (call-with-values (lambda () (if (G4161@module-import? G40d5@e) (G4163@module-import G40d5@e G40c2@r) (G4165@library-import G40d5@e))) (lambda (G4168@G4166 G4169@G4167) ((lambda (G416c@lab* G416d@id*) (vector-for-each (lambda (G4170@id G4171@lab) (G2d08@extend-rib! G40c9@rib G4170@id G4171@lab)) G416d@id* G416c@lab*)) G4169@G4167 G4168@G4166))) (G2fb3@chi-body* (cdr G40c1@e*) G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?)))) '#f '#f '#f))) (if G40ca@top? (G2fb3@chi-body* (cdr G40c1@e*) G40c2@r G40c3@mr (cons (G2cd3@gen-lexical 'dummy) G40c4@lex*) (cons (cons 'top-expr G40d5@e) G40c5@rhs*) G40c6@mod** G40e6@kwd* G40c8@exp* G40c9@rib G40ca@top?) (values G40c1@e* G40c2@r G40c3@mr G40c4@lex* G40c5@rhs* G40c6@mod** G40e6@kwd* G40c8@exp*)))))))))))))) G40e2@type)) (if (G2d57@id? G40e0@kwd) (cons G40e0@kwd G40c7@kwd*) G40c7@kwd*))) G40dc@G40d9 G40db@G40d8 G40da@G40d7)))) (car G40c1@e*))))) (set! G2fb5@expand-transformer (lambda (G41c1@expr G41c2@r) ((lambda (G41c5@rtc) ((lambda (G41c7@expanded-rhs) (begin (for-each ((lambda (G41c9@mark-visit) (lambda (G41cb@x) (begin (G2b6e@G2a15@invoke-library G41cb@x) (G41c9@mark-visit G41cb@x)))) (G2fc5@vis-collector)) (G41c5@rtc)) G41c7@expanded-rhs)) ((lambda (G41d1@G41cd G41d2@G41ce G41d3@G41cf G41d4@G41d0) ((lambda (G41d9@swap) (dynamic-wind G41d9@swap (lambda () (G2f7a@chi-expr G41c1@expr G41c2@r G41c2@r)) G41d9@swap)) (lambda () (begin ((lambda (G41db@t) (begin (G41d1@G41cd G41d3@G41cf) (set! G41d3@G41cf G41db@t))) (G41d1@G41cd)) ((lambda (G41dd@t) (begin (G41d2@G41ce G41d4@G41d0) (set! G41d4@G41d0 G41dd@t))) (G41d2@G41ce)))))) G2fc3@inv-collector G2fc5@vis-collector G41c5@rtc (lambda (G41df@x) (values))))) (G2fc1@make-collector)))) (set! G2fb7@parse-exports (lambda (G41e1@exp*) ((letrec ((G41e3@f (lambda (G41e5@exp* G41e6@int* G41e7@ext*) (if (null? G41e5@exp*) (begin (if (not (G2d61@valid-bound-ids? G41e7@ext*)) (G3041@syntax-violation 'export '"invalid exports" (G2f8e@find-dups G41e7@ext*)) (void)) (values (map G3047@syntax->datum G41e7@ext*) G41e6@int*)) ((lambda (G41eb@t) ((lambda (G41ed@ls/false) (if G41ed@ls/false (apply (lambda (G41ef@rename G41f0@i* G41f1@e*) (begin (if (not (and (eq? (G3047@syntax->datum G41ef@rename) 'rename) (for-all G2d57@id? G41f0@i*) (for-all G2d57@id? G41f1@e*))) (G3041@syntax-violation 'export '"invalid export specifier" (car G41e5@exp*)) (void)) (G41e3@f (cdr G41e5@exp*) (append G41f0@i* G41e6@int*) (append G41f1@e* G41e7@ext*)))) G41ed@ls/false) ((lambda (G41f5@t) ((lambda (G41f7@ls/false) (if G41f7@ls/false (apply (lambda (G41f9@ie) (begin (if (not (G2d57@id? G41f9@ie)) (G3041@syntax-violation 'export '"invalid export" G41f9@ie) (void)) (G41e3@f (cdr G41e5@exp*) (cons G41f9@ie G41e6@int*) (cons G41f9@ie G41e7@ext*)))) G41f7@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G41f5@t))) (G2f56@syntax-dispatch G41f5@t 'any))) G41eb@t))) (G2f56@syntax-dispatch G41eb@t '(any . #(each (any any)))))) (car G41e5@exp*)))))) G41e3@f) G41e1@exp* '() '()))) (set! G2fb9@parse-library-name (lambda (G41fb@spec) ((lambda (G41fe@parse) (begin (set! G41fe@parse (lambda (G4209@x) ((lambda (G420b@t) ((lambda (G420d@ls/false) (if (and G420d@ls/false (apply (lambda (G420f@v*) (for-all (lambda (G4211@x) ((lambda (G4213@x) (and (integer? G4213@x) (exact? G4213@x))) (G3047@syntax->datum G4211@x))) G420f@v*)) G420d@ls/false)) (apply (lambda (G4215@v*) (values '() (map G3047@syntax->datum G4215@v*))) G420d@ls/false) ((lambda (G4217@t) ((lambda (G4219@ls/false) (if (and G4219@ls/false (apply (lambda (G421b@x G421c@rest) (symbol? (G3047@syntax->datum G421b@x))) G4219@ls/false)) (apply (lambda (G421f@x G4220@rest) (call-with-values (lambda () (G41fe@parse G4220@rest)) (lambda (G4225@G4223 G4226@G4224) ((lambda (G4229@v* G422a@x*) (values (cons (G3047@syntax->datum G421f@x) G422a@x*) G4229@v*)) G4226@G4224 G4225@G4223)))) G4219@ls/false) ((lambda (G422d@t) ((lambda (G422f@ls/false) (if G422f@ls/false (apply (lambda () (values '() '())) G422f@ls/false) ((lambda (G4231@t) ((lambda (G4233@ls/false) (if G4233@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid library name" G41fb@spec)) G4233@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G4231@t))) (G2f56@syntax-dispatch G4231@t '_))) G422d@t))) (G2f56@syntax-dispatch G422d@t '()))) G4217@t))) (G2f56@syntax-dispatch G4217@t '(any . any)))) G420b@t))) (G2f56@syntax-dispatch G420b@t '(each-any)))) G4209@x))) (call-with-values (lambda () (G41fe@parse G41fb@spec)) (lambda (G4201@G41ff G4202@G4200) ((lambda (G4205@ver* G4206@name*) (begin (if (null? G4206@name*) (G3041@syntax-violation '#f '"empty library name" G41fb@spec) (void)) (values G4206@name* G4205@ver*))) G4202@G4200 G4201@G41ff))))) '#f))) (set! G2fbb@parse-library (lambda (G4235@e) ((lambda (G4237@t) ((lambda (G4239@ls/false) (if (and G4239@ls/false (apply (lambda (G423b@library G423c@name* G423d@export G423e@exp* G423f@import G4240@imp* G4241@b*) (and (eq? (G3047@syntax->datum G423d@export) 'export) (eq? (G3047@syntax->datum G423f@import) 'import) (eq? (G3047@syntax->datum G423b@library) 'library))) G4239@ls/false)) (apply (lambda (G4249@library G424a@name* G424b@export G424c@exp* G424d@import G424e@imp* G424f@b*) (values G424a@name* G424c@exp* G424e@imp* G424f@b*)) G4239@ls/false) ((lambda (G4257@t) ((lambda (G4259@ls/false) (if G4259@ls/false (apply (lambda () (G3041@syntax-violation '#f '"malformed library" G4235@e)) G4259@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G4257@t))) (G2f56@syntax-dispatch G4257@t '_))) G4237@t))) (G2f56@syntax-dispatch G4237@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4235@e))) (set! G2fbd@parse-import-spec* ((lambda () ((lambda (G425c@idsyn? G425e@dup-error G4260@merge-substs G4262@exclude* G4264@find* G4266@rem* G4268@remove-dups G426a@parse-library-name G426c@import-library G426e@get-import G4270@add-imports!) (begin (set! G425c@idsyn? (lambda (G445b@x) (symbol? (G3047@syntax->datum G445b@x)))) (set! G425e@dup-error (lambda (G4459@name) (G3041@syntax-violation 'import '"two imports with different bindings" G4459@name))) (set! G4260@merge-substs (lambda (G4447@s G4448@subst) ((lambda (G444c@insert-to-subst) (begin (set! G444c@insert-to-subst (lambda (G444d@a G444e@subst) ((lambda (G4451@name G4452@label) ((lambda (G4455@t) (if G4455@t ((lambda (G4457@x) (if (eq? (cdr G4457@x) G4452@label) G444e@subst (G425e@dup-error G4451@name))) G4455@t) (cons G444d@a G444e@subst))) (assq G4451@name G444e@subst))) (car G444d@a) (cdr G444d@a)))) (if (null? G4447@s) G4448@subst (G444c@insert-to-subst (car G4447@s) (G4260@merge-substs (cdr G4447@s) G4448@subst))))) '#f))) (set! G4262@exclude* (lambda (G441d@sym* G441e@subst) ((lambda (G4422@exclude) (begin (set! G4422@exclude (lambda (G4437@sym G4438@subst) (if (null? G4438@subst) (G3041@syntax-violation 'import '"cannot rename unbound identifier" G4437@sym) (if (eq? G4437@sym (caar G4438@subst)) (values (cdar G4438@subst) (cdr G4438@subst)) ((lambda (G443b@a) (call-with-values (lambda () (G4422@exclude G4437@sym (cdr G4438@subst))) (lambda (G443f@G443d G4440@G443e) ((lambda (G4443@subst G4444@old) (values G4444@old (cons G443b@a G4443@subst))) G4440@G443e G443f@G443d)))) (car G4438@subst)))))) (if (null? G441d@sym*) (values '() G441e@subst) (call-with-values (lambda () (G4422@exclude (car G441d@sym*) G441e@subst)) (lambda (G4425@G4423 G4426@G4424) ((lambda (G4429@subst G442a@old) (call-with-values (lambda () (G4262@exclude* (cdr G441d@sym*) G4429@subst)) (lambda (G442f@G442d G4430@G442e) ((lambda (G4433@subst G4434@old*) (values (cons G442a@old G4434@old*) G4433@subst)) G4430@G442e G442f@G442d)))) G4426@G4424 G4425@G4423)))))) '#f))) (set! G4264@find* (lambda (G4415@sym* G4416@subst) (map (lambda (G4419@x) ((lambda (G441b@t) (if G441b@t (cdr G441b@t) (G3041@syntax-violation 'import '"cannot find identifier" G4419@x))) (assq G4419@x G4416@subst))) G4415@sym*))) (set! G4266@rem* (lambda (G440d@sym* G440e@subst) ((letrec ((G4411@f (lambda (G4413@subst) (if (null? G4413@subst) '() (if (memq (caar G4413@subst) G440d@sym*) (G4411@f (cdr G4413@subst)) (cons (car G4413@subst) (G4411@f (cdr G4413@subst)))))))) G4411@f) G440e@subst))) (set! G4268@remove-dups (lambda (G440b@ls) (if (null? G440b@ls) '() (if (memq (car G440b@ls) (cdr G440b@ls)) (G4268@remove-dups (cdr G440b@ls)) (cons (car G440b@ls) (G4268@remove-dups (cdr G440b@ls))))))) (set! G426a@parse-library-name (lambda (G4325@spec) ((lambda (G4328@subversion? G432a@subversion-pred G432c@version-pred) (begin (set! G4328@subversion? (lambda (G4407@x) ((lambda (G4409@x) (and (integer? G4409@x) (exact? G4409@x) (>= G4409@x '0))) (G3047@syntax->datum G4407@x)))) (set! G432a@subversion-pred (lambda (G43a7@x*) ((lambda (G43a9@t) ((lambda (G43ab@ls/false) (if (and G43ab@ls/false (apply (lambda (G43ad@n) (G4328@subversion? G43ad@n)) G43ab@ls/false)) (apply (lambda (G43af@n) (lambda (G43b1@x) (= G43b1@x (G3047@syntax->datum G43af@n)))) G43ab@ls/false) ((lambda (G43b3@t) ((lambda (G43b5@ls/false) (if (and G43b5@ls/false (apply (lambda (G43b7@p? G43b8@sub*) (eq? (G3047@syntax->datum G43b7@p?) 'and)) G43b5@ls/false)) (apply (lambda (G43bb@p? G43bc@sub*) ((lambda (G43bf@p*) (lambda (G43c1@x) (for-all (lambda (G43c3@p) (G43c3@p G43c1@x)) G43bf@p*))) (map G432a@subversion-pred G43bc@sub*))) G43b5@ls/false) ((lambda (G43c5@t) ((lambda (G43c7@ls/false) (if (and G43c7@ls/false (apply (lambda (G43c9@p? G43ca@sub*) (eq? (G3047@syntax->datum G43c9@p?) 'or)) G43c7@ls/false)) (apply (lambda (G43cd@p? G43ce@sub*) ((lambda (G43d1@p*) (lambda (G43d3@x) (exists (lambda (G43d5@p) (G43d5@p G43d3@x)) G43d1@p*))) (map G432a@subversion-pred G43ce@sub*))) G43c7@ls/false) ((lambda (G43d7@t) ((lambda (G43d9@ls/false) (if (and G43d9@ls/false (apply (lambda (G43db@p? G43dc@sub) (eq? (G3047@syntax->datum G43db@p?) 'not)) G43d9@ls/false)) (apply (lambda (G43df@p? G43e0@sub) ((lambda (G43e3@p) (lambda (G43e5@x) (not (G43e3@p G43e5@x)))) (G432a@subversion-pred G43e0@sub))) G43d9@ls/false) ((lambda (G43e7@t) ((lambda (G43e9@ls/false) (if (and G43e9@ls/false (apply (lambda (G43eb@p? G43ec@n) (and (eq? (G3047@syntax->datum G43eb@p?) '<=) (G4328@subversion? G43ec@n))) G43e9@ls/false)) (apply (lambda (G43ef@p? G43f0@n) (lambda (G43f3@x) (<= G43f3@x (G3047@syntax->datum G43f0@n)))) G43e9@ls/false) ((lambda (G43f5@t) ((lambda (G43f7@ls/false) (if (and G43f7@ls/false (apply (lambda (G43f9@p? G43fa@n) (and (eq? (G3047@syntax->datum G43f9@p?) '>=) (G4328@subversion? G43fa@n))) G43f7@ls/false)) (apply (lambda (G43fd@p? G43fe@n) (lambda (G4401@x) (>= G4401@x (G3047@syntax->datum G43fe@n)))) G43f7@ls/false) ((lambda (G4403@t) ((lambda (G4405@ls/false) (if G4405@ls/false (apply (lambda () (G3041@syntax-violation 'import '"invalid sub-version spec" G4325@spec G43a7@x*)) G4405@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G4403@t))) (G2f56@syntax-dispatch G4403@t '_))) G43f5@t))) (G2f56@syntax-dispatch G43f5@t '(any any)))) G43e7@t))) (G2f56@syntax-dispatch G43e7@t '(any any)))) G43d7@t))) (G2f56@syntax-dispatch G43d7@t '(any any)))) G43c5@t))) (G2f56@syntax-dispatch G43c5@t '(any . each-any)))) G43b3@t))) (G2f56@syntax-dispatch G43b3@t '(any . each-any)))) G43a9@t))) (G2f56@syntax-dispatch G43a9@t 'any))) G43a7@x*))) (set! G432c@version-pred (lambda (G4357@x*) ((lambda (G4359@t) ((lambda (G435b@ls/false) (if G435b@ls/false (apply (lambda () (lambda (G435d@x) '#t)) G435b@ls/false) ((lambda (G435f@t) ((lambda (G4361@ls/false) (if (and G4361@ls/false (apply (lambda (G4363@c G4364@ver*) (eq? (G3047@syntax->datum G4363@c) 'and)) G4361@ls/false)) (apply (lambda (G4367@c G4368@ver*) ((lambda (G436b@p*) (lambda (G436d@x) (for-all (lambda (G436f@p) (G436f@p G436d@x)) G436b@p*))) (map G432c@version-pred G4368@ver*))) G4361@ls/false) ((lambda (G4371@t) ((lambda (G4373@ls/false) (if (and G4373@ls/false (apply (lambda (G4375@c G4376@ver*) (eq? (G3047@syntax->datum G4375@c) 'or)) G4373@ls/false)) (apply (lambda (G4379@c G437a@ver*) ((lambda (G437d@p*) (lambda (G437f@x) (exists (lambda (G4381@p) (G4381@p G437f@x)) G437d@p*))) (map G432c@version-pred G437a@ver*))) G4373@ls/false) ((lambda (G4383@t) ((lambda (G4385@ls/false) (if (and G4385@ls/false (apply (lambda (G4387@c G4388@ver) (eq? (G3047@syntax->datum G4387@c) 'not)) G4385@ls/false)) (apply (lambda (G438b@c G438c@ver) ((lambda (G438f@p) (lambda (G4391@x) (not (G438f@p G4391@x)))) (G432c@version-pred G438c@ver))) G4385@ls/false) ((lambda (G4393@t) ((lambda (G4395@ls/false) (if G4395@ls/false (apply (lambda (G4397@sub*) ((lambda (G4399@p*) (lambda (G439b@x) ((letrec ((G439d@f (lambda (G439f@p* G43a0@x) (if (null? G439f@p*) '#t (if (null? G43a0@x) '#f (and ((car G439f@p*) (car G43a0@x)) (G439d@f (cdr G439f@p*) (cdr G43a0@x)))))))) G439d@f) G4399@p* G439b@x))) (map G432a@subversion-pred G4397@sub*))) G4395@ls/false) ((lambda (G43a3@t) ((lambda (G43a5@ls/false) (if G43a5@ls/false (apply (lambda () (G3041@syntax-violation 'import '"invalid version spec" G4325@spec G4357@x*)) G43a5@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G43a3@t))) (G2f56@syntax-dispatch G43a3@t '_))) G4393@t))) (G2f56@syntax-dispatch G4393@t 'each-any))) G4383@t))) (G2f56@syntax-dispatch G4383@t '(any any)))) G4371@t))) (G2f56@syntax-dispatch G4371@t '(any . each-any)))) G435f@t))) (G2f56@syntax-dispatch G435f@t '(any . each-any)))) G4359@t))) (G2f56@syntax-dispatch G4359@t '()))) G4357@x*))) ((letrec ((G432d@f (lambda (G432f@x) ((lambda (G4331@t) ((lambda (G4333@ls/false) (if G4333@ls/false (apply (lambda (G4335@version-spec*) (values '() (G432c@version-pred G4335@version-spec*))) G4333@ls/false) ((lambda (G4337@t) ((lambda (G4339@ls/false) (if (and G4339@ls/false (apply (lambda (G433b@x G433c@x*) (G425c@idsyn? G433b@x)) G4339@ls/false)) (apply (lambda (G433f@x G4340@x*) (call-with-values (lambda () (G432d@f G4340@x*)) (lambda (G4345@G4343 G4346@G4344) ((lambda (G4349@pred G434a@name) (values (cons (G3047@syntax->datum G433f@x) G434a@name) G4349@pred)) G4346@G4344 G4345@G4343)))) G4339@ls/false) ((lambda (G434d@t) ((lambda (G434f@ls/false) (if G434f@ls/false (apply (lambda () (values '() (lambda (G4351@x) '#t))) G434f@ls/false) ((lambda (G4353@t) ((lambda (G4355@ls/false) (if G4355@ls/false (apply (lambda () (G3041@syntax-violation '#f '"invalid import spec" G4325@spec)) G4355@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G4353@t))) (G2f56@syntax-dispatch G4353@t '_))) G434d@t))) (G2f56@syntax-dispatch G434d@t '()))) G4337@t))) (G2f56@syntax-dispatch G4337@t '(any . any)))) G4331@t))) (G2f56@syntax-dispatch G4331@t '(each-any)))) G432f@x)))) G432d@f) G4325@spec))) '#f '#f '#f))) (set! G426c@import-library (lambda (G4317@spec*) (call-with-values (lambda () (G426a@parse-library-name G4317@spec*)) (lambda (G431b@G4319 G431c@G431a) ((lambda (G431f@pred G4320@name) (begin (if (null? G4320@name) (G3041@syntax-violation 'import '"empty library name" G4317@spec*) (void)) ((lambda (G4323@lib) (begin (if (not G4323@lib) (G3041@syntax-violation 'import '"cannot find library with required name" G4320@name) (void)) (if (not (G431f@pred (G2b3f@G29b7@library-version G4323@lib))) (G3041@syntax-violation 'import '"library does not satisfy version specification" G4317@spec* G4323@lib) (void)) ((G2fc7@imp-collector) G4323@lib) (G2b43@G29bf@library-subst G4323@lib))) (G2b67@G2a07@find-library-by-name G4320@name)))) G431c@G431a G431b@G4319))))) (set! G426e@get-import (lambda (G4289@spec) ((lambda (G428b@t) ((lambda (G428d@ls/false) (if (and G428d@ls/false (apply (lambda (G428f@x G4290@x*) (not (memq (G3047@syntax->datum G428f@x) '(for rename except only prefix library)))) G428d@ls/false)) (apply (lambda (G4293@x G4294@x*) (G426c@import-library (cons G4293@x G4294@x*))) G428d@ls/false) ((lambda (G4297@t) ((lambda (G4299@ls/false) (if (and G4299@ls/false (apply (lambda (G429b@rename G429c@isp G429d@old* G429e@new*) (and (eq? (G3047@syntax->datum G429b@rename) 'rename) (for-all G425c@idsyn? G429d@old*) (for-all G425c@idsyn? G429e@new*))) G4299@ls/false)) (apply (lambda (G42a3@rename G42a4@isp G42a5@old* G42a6@new*) ((lambda (G42ab@subst G42ac@old* G42ad@new*) ((lambda (G42b1@old-label*) ((lambda (G42b3@subst) (G4260@merge-substs (map cons G42ad@new* G42b1@old-label*) G42b3@subst)) (G4266@rem* G42ac@old* G42ab@subst))) (G4264@find* G42ac@old* G42ab@subst))) (G426e@get-import G42a4@isp) (map G3047@syntax->datum G42a5@old*) (map G3047@syntax->datum G42a6@new*))) G4299@ls/false) ((lambda (G42b5@t) ((lambda (G42b7@ls/false) (if (and G42b7@ls/false (apply (lambda (G42b9@except G42ba@isp G42bb@sym*) (and (eq? (G3047@syntax->datum G42b9@except) 'except) (for-all G425c@idsyn? G42bb@sym*))) G42b7@ls/false)) (apply (lambda (G42bf@except G42c0@isp G42c1@sym*) ((lambda (G42c5@subst) (G4266@rem* (map G3047@syntax->datum G42c1@sym*) G42c5@subst)) (G426e@get-import G42c0@isp))) G42b7@ls/false) ((lambda (G42c7@t) ((lambda (G42c9@ls/false) (if (and G42c9@ls/false (apply (lambda (G42cb@only G42cc@isp G42cd@sym*) (and (eq? (G3047@syntax->datum G42cb@only) 'only) (for-all G425c@idsyn? G42cd@sym*))) G42c9@ls/false)) (apply (lambda (G42d1@only G42d2@isp G42d3@sym*) ((lambda (G42d7@subst G42d8@sym*) ((lambda (G42db@sym*) ((lambda (G42dd@lab*) (map cons G42db@sym* G42dd@lab*)) (G4264@find* G42db@sym* G42d7@subst))) (G4268@remove-dups G42d8@sym*))) (G426e@get-import G42d2@isp) (map G3047@syntax->datum G42d3@sym*))) G42c9@ls/false) ((lambda (G42df@t) ((lambda (G42e1@ls/false) (if (and G42e1@ls/false (apply (lambda (G42e3@prefix G42e4@isp G42e5@p) (and (eq? (G3047@syntax->datum G42e3@prefix) 'prefix) (G425c@idsyn? G42e5@p))) G42e1@ls/false)) (apply (lambda (G42e9@prefix G42ea@isp G42eb@p) ((lambda (G42ef@subst G42f0@prefix) (map (lambda (G42f3@x) (cons (string->symbol (string-append G42f0@prefix (symbol->string (car G42f3@x)))) (cdr G42f3@x))) G42ef@subst)) (G426e@get-import G42ea@isp) (symbol->string (G3047@syntax->datum G42eb@p)))) G42e1@ls/false) ((lambda (G42f5@t) ((lambda (G42f7@ls/false) (if (and G42f7@ls/false (apply (lambda (G42f9@library G42fa@spec*) (eq? (G3047@syntax->datum G42f9@library) 'library)) G42f7@ls/false)) (apply (lambda (G42fd@library G42fe@spec*) (G426c@import-library G42fe@spec*)) G42f7@ls/false) ((lambda (G4301@t) ((lambda (G4303@ls/false) (if (and G4303@ls/false (apply (lambda (G4305@for G4306@isp G4307@rest) (eq? (G3047@syntax->datum G4305@for) 'for)) G4303@ls/false)) (apply (lambda (G430b@for G430c@isp G430d@rest) (G426e@get-import G430c@isp)) G4303@ls/false) ((lambda (G4311@t) ((lambda (G4313@ls/false) (if G4313@ls/false (apply (lambda (G4315@spec) (G3041@syntax-violation 'import '"invalid import spec" G4315@spec)) G4313@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G4311@t))) (G2f56@syntax-dispatch G4311@t 'any))) G4301@t))) (G2f56@syntax-dispatch G4301@t '(any any . any)))) G42f5@t))) (G2f56@syntax-dispatch G42f5@t '(any each-any)))) G42df@t))) (G2f56@syntax-dispatch G42df@t '(any any any)))) G42c7@t))) (G2f56@syntax-dispatch G42c7@t '(any any . each-any)))) G42b5@t))) (G2f56@syntax-dispatch G42b5@t '(any any . each-any)))) G4297@t))) (G2f56@syntax-dispatch G4297@t '(any any . #(each (any any)))))) G428b@t))) (G2f56@syntax-dispatch G428b@t '(any . each-any)))) G4289@spec))) (set! G4270@add-imports! (lambda (G4279@imp G427a@h) ((lambda (G427d@subst) (for-each (lambda (G427f@x) ((lambda (G4281@name G4282@label) ((lambda (G4285@t) (if G4285@t ((lambda (G4287@l) (if (not (eq? G4287@l G4282@label)) (G425e@dup-error G4281@name) (void))) G4285@t) (hashtable-set! G427a@h G4281@name G4282@label))) (hashtable-ref G427a@h G4281@name '#f))) (car G427f@x) (cdr G427f@x))) G427d@subst)) (G426e@get-import G4279@imp)))) (lambda (G4271@imp*) ((letrec ((G4273@f (lambda (G4275@imp* G4276@h) (if (null? G4275@imp*) (hashtable-entries G4276@h) (begin (G4270@add-imports! (car G4275@imp*) G4276@h) (G4273@f (cdr G4275@imp*) G4276@h)))))) G4273@f) G4271@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fbf@make-top-rib (lambda (G445d@names G445e@labels) ((lambda (G4461@rib) (begin (vector-for-each (lambda (G4463@name G4464@label) (begin (if (not (symbol? G4463@name)) (error 'make-top-rib '"BUG: not a symbol" G4463@name) (void)) (G2d0a@extend-rib/nc! G4461@rib (G2d21@make-stx G4463@name G2ccf@top-mark* '() '()) G4464@label))) G445d@names G445e@labels) G4461@rib)) (G2d04@make-cache-rib)))) (set! G2fc1@make-collector (lambda () ((lambda (G4467@ls) (lambda G446b ((lambda (G446c) (if (= G446c '0) (apply (lambda () G4467@ls) G446b) (if (= G446c '1) (apply (lambda (G4469@x) (set! G4467@ls (G2cc8@set-cons G4469@x G4467@ls))) G446b) (error 'apply '"invalid arg count")))) (length G446b)))) '()))) (set! G2fc3@inv-collector (G28f3@G2829@make-parameter (lambda G446d@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G446f@x) (begin (if (not (procedure? G446f@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G446f@x) (void)) G446f@x)))) (set! G2fc5@vis-collector (G28f3@G2829@make-parameter (lambda G4471@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4473@x) (begin (if (not (procedure? G4473@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4473@x) (void)) G4473@x)))) (set! G2fc7@imp-collector (G28f3@G2829@make-parameter (lambda G4475@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4477@x) (begin (if (not (procedure? G4477@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4477@x) (void)) G4477@x)))) (set! G2fc9@chi-library-internal (lambda (G4479@e* G447a@rib G447b@top?) (call-with-values (lambda () (G2fb3@chi-body* G4479@e* '() '() '() '() '() '() '() G447a@rib G447b@top?)) (lambda (G4487@G447f G4488@G4480 G4489@G4481 G448a@G4482 G448b@G4483 G448c@G4484 G448d@G4485 G448e@G4486) ((lambda (G4497@exp* G4498@_kwd* G4499@mod** G449a@rhs* G449b@lex* G449c@mr G449d@r G449e@e*) (values (append (apply append (reverse G4499@mod**)) G449e@e*) G449d@r G449c@mr (reverse G449b@lex*) (reverse G449a@rhs*) G4497@exp*)) G448e@G4486 G448d@G4485 G448c@G4484 G448b@G4483 G448a@G4482 G4489@G4481 G4488@G4480 G4487@G447f))))) (set! G2fcb@chi-interaction-expr (lambda (G44a7@e G44a8@rib G44a9@r) (call-with-values (lambda () (G2fb3@chi-body* (list G44a7@e) G44a9@r G44a9@r '() '() '() '() '() G44a8@rib '#t)) (lambda (G44b5@G44ad G44b6@G44ae G44b7@G44af G44b8@G44b0 G44b9@G44b1 G44ba@G44b2 G44bb@G44b3 G44bc@G44b4) ((lambda (G44c5@_exp* G44c6@_kwd* G44c7@mod** G44c8@rhs* G44c9@lex* G44ca@mr G44cb@r G44cc@e*) ((lambda (G44d5@e*) ((lambda (G44d7@e) (values G44d7@e G44cb@r)) (if (null? G44d5@e*) (G2cb5@G2c27@build-void) (if (null? (cdr G44d5@e*)) (car G44d5@e*) (G2cb4@G2c25@build-sequence '#f G44d5@e*))))) (G2f88@expand-interaction-rhs*/init* (reverse G44c9@lex*) (reverse G44c8@rhs*) (append (apply append (reverse G44c7@mod**)) G44cc@e*) G44cb@r G44ca@mr))) G44bc@G44b4 G44bb@G44b3 G44ba@G44b2 G44b9@G44b1 G44b8@G44b0 G44b7@G44af G44b6@G44ae G44b5@G44ad))))) (set! G2fcd@library-body-expander (lambda (G44d9@name G44da@main-exp* G44db@imp* G44dc@b* G44dd@top?) ((lambda (G44e4@itc) (begin (set! G44e4@itc (G2fc1@make-collector)) ((lambda (G44e9@G44e5 G44ea@G44e6 G44eb@G44e7 G44ec@G44e8) ((lambda (G44f1@swap) (dynamic-wind G44f1@swap (lambda () (call-with-values (lambda () (G2fbd@parse-import-spec* G44db@imp*)) (lambda (G44f5@G44f3 G44f6@G44f4) ((lambda (G44f9@subst-labels G44fa@subst-names) ((lambda (G44fd@rib) ((lambda (G4500@wrap) (begin (set! G4500@wrap (lambda (G456c@x) (G2d21@make-stx G456c@x G2ccf@top-mark* (list G44fd@rib) '()))) ((lambda (G4501@b* G4502@main-exp* G4503@rtc G4504@vtc) ((lambda (G450d@G4509 G450e@G450a G450f@G450b G4510@G450c) ((lambda (G4515@swap) (dynamic-wind G4515@swap (lambda () (call-with-values (lambda () (G2fc9@chi-library-internal G4501@b* G44fd@rib G44dd@top?)) (lambda (G451d@G4517 G451e@G4518 G451f@G4519 G4520@G451a G4521@G451b G4522@G451c) ((lambda (G4529@internal-exp* G452a@rhs* G452b@lex* G452c@mr G452d@r G452e@init*) (call-with-values (lambda () (G2fb7@parse-exports (append G4502@main-exp* G4529@internal-exp*))) (lambda (G4537@G4535 G4538@G4536) ((lambda (G453b@exp-id* G453c@exp-name*) (begin (G2d0e@seal-rib! G44fd@rib) ((lambda (G453f@init*) ((lambda (G4541@rhs*) ((lambda () (begin (G2d10@unseal-rib! G44fd@rib) ((lambda (G4543@loc* G4544@export-subst) ((lambda (G4548@errstr) (begin (set! G4548@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G302d@make-export-env/macros G452b@lex* G4543@loc* G452d@r)) (lambda (G454c@G4549 G454d@G454a G454e@G454b) ((lambda (G4552@macro* G4553@global* G4554@export-env) (begin (for-each (lambda (G4558@s) ((lambda (G455a@name G455b@label) ((lambda (G455e@p) (if G455e@p ((lambda (G4560@b) ((lambda (G4562@type) (if (eq? G4562@type 'mutable) (G3041@syntax-violation 'export G4548@errstr G455a@name) (void))) (car G4560@b))) (cdr G455e@p)) (void))) (assq G455b@label G4554@export-env))) (car G4558@s) (cdr G4558@s))) G4544@export-subst) ((lambda (G4564@invoke-body G4565@invoke-definitions) (values (G44e4@itc) (G4503@rtc) (G4504@vtc) (G2cb4@G2c25@build-sequence '#f (append G4565@invoke-definitions (list G4564@invoke-body))) G4552@macro* G4544@export-subst G4554@export-env)) (G2cb7@G2c2b@build-letrec* '#f G452b@lex* G4541@rhs* (G3029@build-exports G4553@global* G453f@init*)) (map G2cb0@G2b75@build-global-define (map cdr G4553@global*))))) G454e@G454b G454d@G454a G454c@G4549))))) '#f)) (map G2cd5@gen-global G452b@lex*) (G302b@make-export-subst G453c@exp-name* G453b@exp-id*)))))) (G2f8a@chi-rhs* G452a@rhs* G452d@r G452c@mr))) (G2f76@chi-expr* G452e@init* G452d@r G452c@mr)))) G4538@G4536 G4537@G4535)))) G4522@G451c G4521@G451b G4520@G451a G451f@G4519 G451e@G4518 G451d@G4517)))) G4515@swap)) (lambda () (begin ((lambda (G4568@t) (begin (G450d@G4509 G450f@G450b) (set! G450f@G450b G4568@t))) (G450d@G4509)) ((lambda (G456a@t) (begin (G450e@G450a G4510@G450c) (set! G4510@G450c G456a@t))) (G450e@G450a)))))) G2fc3@inv-collector G2fc5@vis-collector G4503@rtc G4504@vtc)) (map G4500@wrap G44dc@b*) (map G4500@wrap G44da@main-exp*) (G2fc1@make-collector) (G2fc1@make-collector)))) '#f)) (G2fbf@make-top-rib G44fa@subst-names G44f9@subst-labels))) G44f6@G44f4 G44f5@G44f3)))) G44f1@swap)) (lambda () (begin ((lambda (G456e@t) (begin (G44e9@G44e5 G44eb@G44e7) (set! G44eb@G44e7 G456e@t))) (G44e9@G44e5)) ((lambda (G4570@t) (begin (G44ea@G44e6 G44ec@G44e8) (set! G44ec@G44e8 G4570@t))) (G44ea@G44e6)))))) G2fc7@imp-collector G304f@top-level-context G44e4@itc '#f))) '#f))) (set! G2fcf@core-library-expander (lambda (G4572@e G4573@verify-name) (call-with-values (lambda () (G2fbb@parse-library G4572@e)) (lambda (G457a@G4576 G457b@G4577 G457c@G4578 G457d@G4579) ((lambda (G4582@b* G4583@imp* G4584@exp* G4585@name*) (call-with-values (lambda () (G2fb9@parse-library-name G4585@name*)) (lambda (G458c@G458a G458d@G458b) ((lambda (G4590@ver G4591@name) (begin (G4573@verify-name G4591@name) (call-with-values (lambda () (G2fcd@library-body-expander G4591@name G4584@exp* G4583@imp* G4582@b* '#f)) (lambda (G459b@G4594 G459c@G4595 G459d@G4596 G459e@G4597 G459f@G4598 G45a0@G4599 G45a1@G459a) ((lambda (G45a9@export-env G45aa@export-subst G45ab@visit-code G45ac@invoke-code G45ad@visit-req* G45ae@invoke-req* G45af@imp*) (values G4591@name G4590@ver G45af@imp* G45ae@invoke-req* G45ad@visit-req* G45ac@invoke-code G45ab@visit-code G45aa@export-subst G45a9@export-env)) G45a1@G459a G45a0@G4599 G459f@G4598 G459e@G4597 G459d@G4596 G459c@G4595 G459b@G4594))))) G458d@G458b G458c@G458a)))) G457d@G4579 G457c@G4578 G457b@G4577 G457a@G4576))))) (set! G2fd1@parse-top-level-program (lambda (G45b7@e*) ((lambda (G45b9@t) ((lambda (G45bb@ls/false) (if (and G45bb@ls/false (apply (lambda (G45bd@import G45be@imp* G45bf@b*) (eq? (G3047@syntax->datum G45bd@import) 'import)) G45bb@ls/false)) (apply (lambda (G45c3@import G45c4@imp* G45c5@b*) (values G45c4@imp* G45c5@b*)) G45bb@ls/false) ((lambda (G45c9@t) ((lambda (G45cb@ls/false) (if (and G45cb@ls/false (apply (lambda (G45cd@import G45ce@x G45cf@y) (eq? (G3047@syntax->datum G45cd@import) 'import)) G45cb@ls/false)) (apply (lambda (G45d3@import G45d4@x G45d5@y) (G3041@syntax-violation 'expander '"invalid syntax of top-level program" (G2d51@syntax-car G45b7@e*))) G45cb@ls/false) ((lambda (G45d9@t) ((lambda (G45db@ls/false) (if G45db@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45db@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G45d9@t))) (G2f56@syntax-dispatch G45d9@t '_))) G45c9@t))) (G2f56@syntax-dispatch G45c9@t '((any . any) . any)))) G45b9@t))) (G2f56@syntax-dispatch G45b9@t '((any . each-any) . each-any)))) G45b7@e*))) (set! G2fd3@top-level-expander (lambda (G45dd@e*) (call-with-values (lambda () (G2fd1@parse-top-level-program G45dd@e*)) (lambda (G45e1@G45df G45e2@G45e0) ((lambda (G45e5@b* G45e6@imp*) (call-with-values (lambda () (G2fcd@library-body-expander '() '() G45e6@imp* G45e5@b* '#t)) (lambda (G45f0@G45e9 G45f1@G45ea G45f2@G45eb G45f3@G45ec G45f4@G45ed G45f5@G45ee G45f6@G45ef) ((lambda (G45fe@export-env G45ff@export-subst G4600@visit-code G4601@invoke-code G4602@visit-req* G4603@invoke-req* G4604@imp*) (values G4603@invoke-req* G4601@invoke-code)) G45f6@G45ef G45f5@G45ee G45f4@G45ed G45f3@G45ec G45f2@G45eb G45f1@G45ea G45f0@G45e9)))) G45e2@G45e0 G45e1@G45df))))) (set! G2fd9@G2fd4 (make-record-type-descriptor 'env '#f 'G2fd7 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fdb@G2fd6 '#f) (set! G2fdd@G2fd5 (make-record-constructor-descriptor G2fd9@G2fd4 '#f G2fdb@G2fd6)) (set! G2fe0@env? (record-predicate G2fd9@G2fd4)) (set! G2fe2@make-env (record-constructor G2fdd@G2fd5)) (set! G2fe4@env-names (record-accessor G2fd9@G2fd4 '0)) (set! G2fe6@env-labels (record-accessor G2fd9@G2fd4 '1)) (set! G2fe8@env-itc (record-accessor G2fd9@G2fd4 '2)) (set! G2fea@set-env-names! (record-mutator G2fd9@G2fd4 '0)) (set! G2fec@set-env-labels! (record-mutator G2fd9@G2fd4 '1)) (set! G2fee@set-env-itc! (record-mutator G2fd9@G2fd4 '2)) (set! G2ff0@rp (G28f0@G2823@make-record-printer 'env (lambda (G460c@x G460d@p G460e@wr) (display '"#<environment>" G460d@p)))) (set! G2ff6@G2ff1 (make-record-type-descriptor 'interaction-env '#f 'G2ff4 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2ff8@G2ff3 '#f) (set! G2ffa@G2ff2 (make-record-constructor-descriptor G2ff6@G2ff1 '#f G2ff8@G2ff3)) (set! G2ffd@interaction-env? (record-predicate G2ff6@G2ff1)) (set! G2fff@make-interaction-env (record-constructor G2ffa@G2ff2)) (set! G3001@interaction-env-rib (record-accessor G2ff6@G2ff1 '0)) (set! G3003@interaction-env-r (record-accessor G2ff6@G2ff1 '1)) (set! G3005@interaction-env-locs (record-accessor G2ff6@G2ff1 '2)) (set! G3007@set-interaction-env-rib! (record-mutator G2ff6@G2ff1 '0)) (set! G3009@set-interaction-env-r! (record-mutator G2ff6@G2ff1 '1)) (set! G300b@set-interaction-env-locs! (record-mutator G2ff6@G2ff1 '2)) (set! G300d@rp (G28f0@G2823@make-record-printer 'interaction-env (lambda (G4612@x G4613@p G4614@wr) (display '"#<environment>" G4613@p)))) (set! G300f@interaction-environment-symbols (lambda () (G3017@environment-symbols (G304d@interaction-environment)))) (set! G3011@environment-bindings (lambda (G4618@e) (vector->list (vector-map (lambda (G461a@name G461b@label) (G3013@parse-binding (cons G461a@name (G2b6d@G2a13@imported-label->binding G461b@label)))) (G2fe4@env-names G4618@e) (G2fe6@env-labels G4618@e))))) (set! G3013@parse-binding (lambda (G461e@b) (cons (car G461e@b) ((lambda (G4620@t) (if (memv G4620@t '(core-prim global)) 'procedure (if (memv G4620@t '(core-macro macro global-macro)) 'syntax (if (memv G4620@t '($core-rtd)) 'record (if (eq? (car G461e@b) (cadr G461e@b)) 'syntax 'unknown))))) (cadr G461e@b))))) (set! G3015@environment? (lambda (G4622@x) (or (G2fe0@env? G4622@x) (G2ffd@interaction-env? G4622@x)))) (set! G3017@environment-symbols (lambda (G4624@x) (if (G2fe0@env? G4624@x) (vector->list (G2fe4@env-names G4624@x)) (if (G2ffd@interaction-env? G4624@x) (map values (G2cee@rib-sym* (G3001@interaction-env-rib G4624@x))) (assertion-violation 'environment-symbols '"not an environment" G4624@x))))) (set! G3019@environment (lambda G4626@imp* ((lambda (G4628@itc) ((lambda (G462c@G462a G462d@G462b) ((lambda (G4630@swap) (dynamic-wind G4630@swap (lambda () (call-with-values (lambda () (G2fbd@parse-import-spec* G4626@imp*)) (lambda (G4634@G4632 G4635@G4633) ((lambda (G4638@subst-labels G4639@subst-names) (G2fe2@make-env G4639@subst-names G4638@subst-labels G4628@itc)) G4635@G4633 G4634@G4632)))) G4630@swap)) (lambda () ((lambda (G463c@t) (begin (G462c@G462a G462d@G462b) (set! G462d@G462b G463c@t))) (G462c@G462a))))) G2fc7@imp-collector G4628@itc)) (G2fc1@make-collector)))) (set! G301b@null-environment (lambda (G463e@n) (begin (if (not (eqv? G463e@n '5)) (assertion-violation 'null-environment '"not 5" G463e@n) (void)) (G3019@environment '(psyntax null-environment-5))))) (set! G301d@scheme-report-environment (lambda (G4640@n) (begin (if (not (eqv? G4640@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4640@n) (void)) (G3019@environment '(psyntax scheme-report-environment-5))))) (set! G301f@expand (lambda (G4642@x G4643@env) (if (G2fe0@env? G4643@env) ((lambda (G4646@rib) ((lambda (G4648@x G4649@itc G464a@rtc G464b@vtc) ((lambda (G4650@x) (begin (G2d0e@seal-rib! G4646@rib) (values G4650@x (G464a@rtc)))) ((lambda (G465a@G4652 G465b@G4653 G465c@G4654 G465d@G4655 G465e@G4656 G465f@G4657 G4660@G4658 G4661@G4659) ((lambda (G466a@swap) (dynamic-wind G466a@swap (lambda () (G2f7a@chi-expr G4648@x '() '())) G466a@swap)) (lambda () (begin ((lambda (G466c@t) (begin (G465a@G4652 G465e@G4656) (set! G465e@G4656 G466c@t))) (G465a@G4652)) ((lambda (G466e@t) (begin (G465b@G4653 G465f@G4657) (set! G465f@G4657 G466e@t))) (G465b@G4653)) ((lambda (G4670@t) (begin (G465c@G4654 G4660@G4658) (set! G4660@G4658 G4670@t))) (G465c@G4654)) ((lambda (G4672@t) (begin (G465d@G4655 G4661@G4659) (set! G4661@G4659 G4672@t))) (G465d@G4655)))))) G304f@top-level-context G2fc3@inv-collector G2fc5@vis-collector G2fc7@imp-collector '#f G464a@rtc G464b@vtc G4649@itc))) (G2d21@make-stx G4642@x G2ccf@top-mark* (list G4646@rib) '()) (G2fe8@env-itc G4643@env) (G2fc1@make-collector) (G2fc1@make-collector))) (G2fbf@make-top-rib (G2fe4@env-names G4643@env) (G2fe6@env-labels G4643@env))) (if (G2ffd@interaction-env? G4643@env) ((lambda (G4674@rib G4675@r G4676@rtc) ((lambda (G467a@x) (call-with-values (lambda () ((lambda (G4686@G467e G4687@G467f G4688@G4680 G4689@G4681 G468a@G4682 G468b@G4683 G468c@G4684 G468d@G4685) ((lambda (G4696@swap) (dynamic-wind G4696@swap (lambda () (G2fcb@chi-interaction-expr G467a@x G4674@rib G4675@r)) G4696@swap)) (lambda () (begin ((lambda (G4698@t) (begin (G4686@G467e G468a@G4682) (set! G468a@G4682 G4698@t))) (G4686@G467e)) ((lambda (G469a@t) (begin (G4687@G467f G468b@G4683) (set! G468b@G4683 G469a@t))) (G4687@G467f)) ((lambda (G469c@t) (begin (G4688@G4680 G468c@G4684) (set! G468c@G4684 G469c@t))) (G4688@G4680)) ((lambda (G469e@t) (begin (G4689@G4681 G468d@G4685) (set! G468d@G4685 G469e@t))) (G4689@G4681)))))) G304f@top-level-context G2fc3@inv-collector G2fc5@vis-collector G2fc7@imp-collector G4643@env G4676@rtc (G2fc1@make-collector) (G2fc1@make-collector))) (lambda (G46a0@G467c G46a1@G467d) ((lambda (G46a4@r^ G46a5@e) (begin (G3009@set-interaction-env-r! G4643@env G46a4@r^) (values G46a5@e (G4676@rtc)))) G46a1@G467d G46a0@G467c)))) (G2d21@make-stx G4642@x G2ccf@top-mark* (list G4674@rib) '()))) (G3001@interaction-env-rib G4643@env) (G3003@interaction-env-r G4643@env) (G2fc1@make-collector)) (assertion-violation 'expand '"not an environment" G4643@env))))) (set! G3021@eval (lambda (G46a8@x G46a9@env) (begin (if (not (G3015@environment? G46a9@env)) (error 'eval '"not an environment" G46a9@env) (void)) (call-with-values (lambda () (G301f@expand G46a8@x G46a9@env)) (lambda (G46ae@G46ac G46af@G46ad) ((lambda (G46b2@invoke-req* G46b3@x) (begin (for-each G2b6e@G2a15@invoke-library G46b2@invoke-req*) (eval-core (G2947@G28ff@expanded->core G46b3@x)))) G46af@G46ad G46ae@G46ac)))))) (set! G3023@library-expander (lambda G471b ((lambda (G471c) (if (= G471c '3) (apply (lambda (G46b6@x G46b7@filename G46b8@verify-name) ((lambda (G46bd@build-visit-code G46bf@visit!) (begin (set! G46bd@build-visit-code (lambda (G4709@macro*) (if (null? G4709@macro*) (G2cb5@G2c27@build-void) (G2cb4@G2c25@build-sequence '#f (map (lambda (G470b@x) ((lambda (G470d@loc G470e@src) (list 'set! G470d@loc G470e@src)) (car G470b@x) (cddr G470b@x))) G4709@macro*))))) (set! G46bf@visit! (lambda (G4701@macro*) (for-each (lambda (G4703@x) ((lambda (G4705@loc G4706@proc) (set-symbol-value! G4705@loc G4706@proc)) (car G4703@x) (cadr G4703@x))) G4701@macro*))) (call-with-values (lambda () (G2fcf@core-library-expander G46b6@x G46b8@verify-name)) (lambda (G46c9@G46c0 G46ca@G46c1 G46cb@G46c2 G46cc@G46c3 G46cd@G46c4 G46ce@G46c5 G46cf@G46c6 G46d0@G46c7 G46d1@G46c8) ((lambda (G46db@export-env G46dc@export-subst G46dd@macro* G46de@invoke-code G46df@vis* G46e0@inv* G46e1@imp* G46e2@ver G46e3@name) ((lambda (G46ed@id G46ee@name G46ef@ver G46f0@imp* G46f1@vis* G46f2@inv* G46f3@visit-proc G46f4@invoke-proc G46f5@visit-code G46f6@invoke-code) (begin (G2b6c@G2a11@install-library G46ed@id G46ee@name G46ef@ver G46f0@imp* G46f1@vis* G46f2@inv* G46dc@export-subst G46db@export-env G46f3@visit-proc G46f4@invoke-proc G46f5@visit-code G46f6@invoke-code '#t G46b7@filename) (values G46ed@id G46ee@name G46ef@ver G46f0@imp* G46f1@vis* G46f2@inv* G46f6@invoke-code G46f5@visit-code G46dc@export-subst G46db@export-env))) (gensym) G46e3@name G46e2@ver (map G2b72@G2a1d@library-spec G46e1@imp*) (map G2b72@G2a1d@library-spec G46df@vis*) (map G2b72@G2a1d@library-spec G46e0@inv*) (lambda () (G46bf@visit! G46dd@macro*)) (lambda () (eval-core (G2947@G28ff@expanded->core G46de@invoke-code))) (G46bd@build-visit-code G46dd@macro*) G46de@invoke-code)) G46d1@G46c8 G46d0@G46c7 G46cf@G46c6 G46ce@G46c5 G46cd@G46c4 G46cc@G46c3 G46cb@G46c2 G46ca@G46c1 G46c9@G46c0))))) '#f '#f)) G471b) (if (= G471c '2) (apply (lambda (G4711@x G4712@filename) (G3023@library-expander G4711@x G4712@filename (lambda (G4715@x) (values)))) G471b) (if (= G471c '1) (apply (lambda (G4717@x) (G3023@library-expander G4717@x '#f (lambda (G4719@x) (values)))) G471b) (error 'apply '"invalid arg count"))))) (length G471b)))) (set! G3025@boot-library-expand (lambda (G471d@x) (call-with-values (lambda () (G3023@library-expander G471d@x)) (lambda (G4729@G471f G472a@G4720 G472b@G4721 G472c@G4722 G472d@G4723 G472e@G4724 G472f@G4725 G4730@G4726 G4731@G4727 G4732@G4728) ((lambda (G473d@export-env G473e@export-subst G473f@visit-code G4740@invoke-code G4741@inv* G4742@vis* G4743@imp* G4744@ver G4745@name G4746@id) (values G4745@name G4740@invoke-code G473e@export-subst G473d@export-env)) G4732@G4728 G4731@G4727 G4730@G4726 G472f@G4725 G472e@G4724 G472d@G4723 G472c@G4722 G472b@G4721 G472a@G4720 G4729@G471f))))) (set! G3027@rev-map-append (lambda (G4751@f G4752@ls G4753@ac) (if (null? G4752@ls) G4753@ac (G3027@rev-map-append G4751@f (cdr G4752@ls) (cons (G4751@f (car G4752@ls)) G4753@ac))))) (set! G3029@build-exports (lambda (G4757@lex*+loc* G4758@init*) (G2cb4@G2c25@build-sequence '#f (cons (G2cb5@G2c27@build-void) (G3027@rev-map-append (lambda (G475b@x) (list 'set! (cdr G475b@x) (car G475b@x))) G4757@lex*+loc* G4758@init*))))) (set! G302b@make-export-subst (lambda (G475d@name* G475e@id*) (map (lambda (G4761@name G4762@id) ((lambda (G4765@label) (begin (if (not G4765@label) (G3041@syntax-violation '#f '"cannot export unbound identifier" G4762@id) (void)) (cons G4761@name G4765@label))) (G2d71@id->label G4762@id))) G475d@name* G475e@id*))) (set! G302d@make-export-env/macros (lambda (G4767@lex* G4768@loc* G4769@r) ((lambda (G476e@lookup) (begin (set! G476e@lookup (lambda (G478b@x) ((letrec ((G478d@f (lambda (G478f@x G4790@lex* G4791@loc*) (if (pair? G4790@lex*) (if (eq? G478f@x (car G4790@lex*)) (car G4791@loc*) (G478d@f G478f@x (cdr G4790@lex*) (cdr G4791@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G478d@f) G478b@x G4767@lex* G4768@loc*))) ((letrec ((G476f@f (lambda (G4771@r G4772@env G4773@global* G4774@macro*) (if (null? G4771@r) (values G4772@env G4773@global* G4774@macro*) ((lambda (G4779@x) ((lambda (G477b@label G477c@b) ((lambda (G477f@t) (if (memv G477f@t '(lexical)) ((lambda (G4781@v) ((lambda (G4783@loc G4784@type) (G476f@f (cdr G4771@r) (cons (cons* G477b@label G4784@type G4783@loc) G4772@env) (cons (cons (G2ee2@lexical-var G4781@v) G4783@loc) G4773@global*) G4774@macro*)) (G476e@lookup (G2ee2@lexical-var G4781@v)) (if (G2ee4@lexical-mutable? G4781@v) 'mutable 'global))) (G2d7b@binding-value G477c@b)) (if (memv G477f@t '(local-macro)) ((lambda (G4787@loc) (G476f@f (cdr G4771@r) (cons (cons* G477b@label 'global-macro G4787@loc) G4772@env) G4773@global* (cons (cons G4787@loc (G2d7b@binding-value G477c@b)) G4774@macro*))) (gensym)) (if (memv G477f@t '(local-macro!)) ((lambda (G4789@loc) (G476f@f (cdr G4771@r) (cons (cons* G477b@label 'global-macro! G4789@loc) G4772@env) G4773@global* (cons (cons G4789@loc (G2d7b@binding-value G477c@b)) G4774@macro*))) (gensym)) (if (memv G477f@t '($rtd $module)) (G476f@f (cdr G4771@r) (cons G4779@x G4772@env) G4773@global* G4774@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d79@binding-type G477c@b) (G2d7b@binding-value G477c@b))))))) (G2d79@binding-type G477c@b))) (car G4779@x) (cdr G4779@x))) (car G4771@r)))))) G476f@f) G4769@r '() '() '()))) '#f))) (set! G302f@generate-temporaries (lambda (G4795@ls) ((lambda (G4797@t) ((lambda (G4799@ls/false) (if G4799@ls/false (apply (lambda (G479b@ls) (map (lambda (G479d@x) (G2d21@make-stx ((lambda (G479f@x) (if (or (symbol? G479f@x) (string? G479f@x)) (gensym G479f@x) (gensym 't))) (G3047@syntax->datum G479d@x)) G2ccf@top-mark* '() '())) G479b@ls)) G4799@ls/false) ((lambda (G47a1@t) ((lambda (G47a3@ls/false) (if G47a3@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47a3@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G47a1@t))) (G2f56@syntax-dispatch G47a1@t '_))) G4797@t))) (G2f56@syntax-dispatch G4797@t 'each-any))) G4795@ls))) (set! G3031@free-identifier=? (lambda (G47a5@x G47a6@y) (if (G2d57@id? G47a5@x) (if (G2d57@id? G47a6@y) (G2d5f@free-id=? G47a5@x G47a6@y) (assertion-violation 'free-identifier=? '"not an identifier" G47a6@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47a5@x)))) (set! G3033@bound-identifier=? (lambda (G47a9@x G47aa@y) (if (G2d57@id? G47a9@x) (if (G2d57@id? G47aa@y) (G2d5d@bound-id=? G47a9@x G47aa@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47aa@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47a9@x)))) (set! G3035@make-source-condition (lambda (G47ad@x) ((lambda (G47b7@G47b2 G47b9@G47b4 G47bb@G47b3 G47be@G47b1 G47c0@make-source-condition G47c2@G47af G47c4@G47b0 G47c6@source-condition? G47c8@source-filename G47ca@source-character) (begin (set! G47b7@G47b2 (make-record-type-descriptor '&source-information G4c09@G495a@&condition-rtd 'G47b5 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47b9@G47b4 '#f) (set! G47bb@G47b3 (make-record-constructor-descriptor G47b7@G47b2 G4c0a@G495c@&condition-rcd G47b9@G47b4)) (set! G47be@G47b1 (record-predicate G47b7@G47b2)) (set! G47c0@make-source-condition (record-constructor G47bb@G47b3)) (set! G47c2@G47af (record-accessor G47b7@G47b2 '0)) (set! G47c4@G47b0 (record-accessor G47b7@G47b2 '1)) (set! G47c6@source-condition? (condition-predicate G47b7@G47b2)) (set! G47c8@source-filename (condition-accessor G47b7@G47b2 G47c2@G47af)) (set! G47ca@source-character (condition-accessor G47b7@G47b2 G47c4@G47b0)) (if (pair? G47ad@x) (G47c0@make-source-condition (car G47ad@x) (cdr G47ad@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3037@extract-position-condition (lambda (G47cb@x) (G3035@make-source-condition (G3039@expression-position G47cb@x)))) (set! G3039@expression-position (lambda (G47cd@x) (and (G2d1f@stx? G47cd@x) ((lambda (G47cf@x) (and (G28e8@G2813@annotation? G47cf@x) (G28e9@G2815@annotation-source G47cf@x))) (G2d23@stx-expr G47cd@x))))) (set! G303b@assertion-error (lambda (G47d1@expr G47d2@pos) (raise (condition (G4c39@G4a1c@make-assertion-violation) (G4c4b@G4a4c@make-who-condition 'assert) (G4c0f@G49af@make-message-condition '"assertion failed") (G4c41@G4a32@make-irritants-condition (list G47d1@expr)) (G3035@make-source-condition G47d2@pos))))) (set! G303d@syntax-error (lambda (G47d5@x . G47d7@args) (begin (if (not (for-all string? G47d7@args)) (assertion-violation 'syntax-error '"invalid argument" G47d7@args) (void)) (raise (condition (G4c0f@G49af@make-message-condition (if (null? G47d7@args) '"invalid syntax" (apply string-append G47d7@args))) (G4c6d@G4aa6@make-syntax-violation (G3047@syntax->datum G47d5@x) '#f) (G3037@extract-position-condition G47d5@x)))))) (set! G303f@syntax-violation* (lambda (G47d9@who G47da@msg G47db@form G47dc@condition-object) (begin (if (not (string? G47da@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47da@msg) (void)) ((lambda (G47e1@who) (raise (condition (if G47e1@who (G4c4b@G4a4c@make-who-condition G47e1@who) (condition)) (G4c0f@G49af@make-message-condition G47da@msg) G47dc@condition-object (G3037@extract-position-condition G47db@form)))) (if (or (string? G47d9@who) (symbol? G47d9@who)) G47d9@who (if (not G47d9@who) ((lambda (G47e3@t) ((lambda (G47e5@ls/false) (if (and G47e5@ls/false (apply (lambda (G47e7@id) (G2d57@id? G47e7@id)) G47e5@ls/false)) (apply (lambda (G47e9@id) (G3047@syntax->datum G47e9@id)) G47e5@ls/false) ((lambda (G47eb@t) ((lambda (G47ed@ls/false) (if (and G47ed@ls/false (apply (lambda (G47ef@id G47f0@rest) (G2d57@id? G47ef@id)) G47ed@ls/false)) (apply (lambda (G47f3@id G47f4@rest) (G3047@syntax->datum G47f3@id)) G47ed@ls/false) ((lambda (G47f7@t) ((lambda (G47f9@ls/false) (if G47f9@ls/false (apply (lambda () '#f) G47f9@ls/false) (G3041@syntax-violation '#f '"invalid syntax" G47f7@t))) (G2f56@syntax-dispatch G47f7@t '_))) G47eb@t))) (G2f56@syntax-dispatch G47eb@t '(any . any)))) G47e3@t))) (G2f56@syntax-dispatch G47e3@t 'any))) G47db@form) (assertion-violation 'syntax-violation '"invalid who argument" G47d9@who))))))) (set! G3041@syntax-violation (lambda G4809 ((lambda (G480a) (if (= G480a '3) (apply (lambda (G47fb@who G47fc@msg G47fd@form) (G3041@syntax-violation G47fb@who G47fc@msg G47fd@form '#f)) G4809) (if (= G480a '4) (apply (lambda (G4801@who G4802@msg G4803@form G4804@subform) (G303f@syntax-violation* G4801@who G4802@msg G4803@form (G4c6d@G4aa6@make-syntax-violation (G3047@syntax->datum G4803@form) (G3047@syntax->datum G4804@subform)))) G4809) (error 'apply '"invalid arg count")))) (length G4809)))) (set! G3043@identifier? (lambda (G480b@x) (G2d57@id? G480b@x))) (set! G3045@datum->syntax (lambda (G480d@id G480e@datum) (if (G2d57@id? G480d@id) (G2d35@datum->stx G480d@id G480e@datum) (assertion-violation 'datum->syntax '"not an identifier" G480d@id)))) (set! G3047@syntax->datum (lambda (G4811@x) (G2d6d@stx->datum G4811@x))) (set! G3049@compile-r6rs-top-level (lambda (G4813@x*) (call-with-values (lambda () (G2fd3@top-level-expander G4813@x*)) (lambda (G4817@G4815 G4818@G4816) ((lambda (G481b@invoke-code G481c@lib*) (lambda () (begin (for-each G2b6e@G2a15@invoke-library G481c@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2947@G28ff@expanded->core G481b@invoke-code)) (void)) (eval-core (G2947@G28ff@expanded->core G481b@invoke-code))))) G4818@G4816 G4817@G4815))))) (set! G304b@pre-compile-r6rs-top-level (lambda (G481f@x*) (call-with-values (lambda () (G2fd3@top-level-expander G481f@x*)) (lambda (G4823@G4821 G4824@G4822) ((lambda (G4827@invoke-code G4828@lib*) (begin (for-each G2b6e@G2a15@invoke-library G4828@lib*) (G28f1@G2825@compile-core (G2947@G28ff@expanded->core G4827@invoke-code)))) G4824@G4822 G4823@G4821))))) (set! G304d@interaction-environment ((lambda (G482b@the-env) (lambda () (or G482b@the-env ((lambda (G482d@lib G482e@rib) (begin ((lambda (G4831@subst) (begin (G2cf8@set-rib-sym*! G482e@rib (map car G4831@subst)) (G2cfa@set-rib-mark**! G482e@rib (map (lambda (G4833@x) G2ccf@top-mark*) G4831@subst)) (G2cfc@set-rib-label*! G482e@rib (map cdr G4831@subst)))) (G2b43@G29bf@library-subst G482d@lib)) ((lambda (G4835@env) (begin (set! G482b@the-env G4835@env) G4835@env)) (G2fff@make-interaction-env G482e@rib '() '())))) (G2b67@G2a07@find-library-by-name '(mosh interaction)) (G2d04@make-cache-rib))))) '#f)) (set! G304f@top-level-context (G28f3@G2829@make-parameter '#f)) (begin (set! G4945@G304f@top-level-context G304f@top-level-context) (set! G4944@G304d@interaction-environment G304d@interaction-environment) (set! G4943@G304b@pre-compile-r6rs-top-level G304b@pre-compile-r6rs-top-level) (set! G4942@G3049@compile-r6rs-top-level G3049@compile-r6rs-top-level) (set! G4941@G3047@syntax->datum G3047@syntax->datum) (set! G4940@G3045@datum->syntax G3045@datum->syntax) (set! G493f@G3043@identifier? G3043@identifier?) (set! G493e@G3041@syntax-violation G3041@syntax-violation) (set! G493d@G303f@syntax-violation* G303f@syntax-violation*) (set! G493c@G303d@syntax-error G303d@syntax-error) (set! G493b@G303b@assertion-error G303b@assertion-error) (set! G493a@G3039@expression-position G3039@expression-position) (set! G4939@G3037@extract-position-condition G3037@extract-position-condition) (set! G4938@G3035@make-source-condition G3035@make-source-condition) (set! G4937@G3033@bound-identifier=? G3033@bound-identifier=?) (set! G4936@G3031@free-identifier=? G3031@free-identifier=?) (set! G4935@G302f@generate-temporaries G302f@generate-temporaries) (set! G4934@G302d@make-export-env/macros G302d@make-export-env/macros) (set! G4933@G302b@make-export-subst G302b@make-export-subst) (set! G4932@G3029@build-exports G3029@build-exports) (set! G4931@G3027@rev-map-append G3027@rev-map-append) (set! G4930@G3025@boot-library-expand G3025@boot-library-expand) (set! G492f@G3023@library-expander G3023@library-expander) (set! G492e@G3021@eval G3021@eval) (set! G492d@G301f@expand G301f@expand) (set! G492c@G301d@scheme-report-environment G301d@scheme-report-environment) (set! G492b@G301b@null-environment G301b@null-environment) (set! G492a@G3019@environment G3019@environment) (set! G4929@G3017@environment-symbols G3017@environment-symbols) (set! G4928@G3015@environment? G3015@environment?) (set! G4927@G3013@parse-binding G3013@parse-binding) (set! G4926@G3011@environment-bindings G3011@environment-bindings) (set! G4925@G300f@interaction-environment-symbols G300f@interaction-environment-symbols) (set! G4924@G300d@rp G300d@rp) (set! G4923@G300b@set-interaction-env-locs! G300b@set-interaction-env-locs!) (set! G4922@G3009@set-interaction-env-r! G3009@set-interaction-env-r!) (set! G4921@G3007@set-interaction-env-rib! G3007@set-interaction-env-rib!) (set! G4920@G3005@interaction-env-locs G3005@interaction-env-locs) (set! G491f@G3003@interaction-env-r G3003@interaction-env-r) (set! G491e@G3001@interaction-env-rib G3001@interaction-env-rib) (set! G491d@G2fff@make-interaction-env G2fff@make-interaction-env) (set! G491c@G2ffd@interaction-env? G2ffd@interaction-env?) (set! G491b@G2ffa@G2ff2 G2ffa@G2ff2) (set! G491a@G2ff8@G2ff3 G2ff8@G2ff3) (set! G4919@G2ff6@G2ff1 G2ff6@G2ff1) (set! G4918@G2ff0@rp G2ff0@rp) (set! G4917@G2fee@set-env-itc! G2fee@set-env-itc!) (set! G4916@G2fec@set-env-labels! G2fec@set-env-labels!) (set! G4915@G2fea@set-env-names! G2fea@set-env-names!) (set! G4914@G2fe8@env-itc G2fe8@env-itc) (set! G4913@G2fe6@env-labels G2fe6@env-labels) (set! G4912@G2fe4@env-names G2fe4@env-names) (set! G4911@G2fe2@make-env G2fe2@make-env) (set! G4910@G2fe0@env? G2fe0@env?) (set! G490f@G2fdd@G2fd5 G2fdd@G2fd5) (set! G490e@G2fdb@G2fd6 G2fdb@G2fd6) (set! G490d@G2fd9@G2fd4 G2fd9@G2fd4) (set! G490c@G2fd3@top-level-expander G2fd3@top-level-expander) (set! G490b@G2fd1@parse-top-level-program G2fd1@parse-top-level-program) (set! G490a@G2fcf@core-library-expander G2fcf@core-library-expander) (set! G4909@G2fcd@library-body-expander G2fcd@library-body-expander) (set! G4908@G2fcb@chi-interaction-expr G2fcb@chi-interaction-expr) (set! G4907@G2fc9@chi-library-internal G2fc9@chi-library-internal) (set! G4906@G2fc7@imp-collector G2fc7@imp-collector) (set! G4905@G2fc5@vis-collector G2fc5@vis-collector) (set! G4904@G2fc3@inv-collector G2fc3@inv-collector) (set! G4903@G2fc1@make-collector G2fc1@make-collector) (set! G4902@G2fbf@make-top-rib G2fbf@make-top-rib) (set! G4901@G2fbd@parse-import-spec* G2fbd@parse-import-spec*) (set! G4900@G2fbb@parse-library G2fbb@parse-library) (set! G48ff@G2fb9@parse-library-name G2fb9@parse-library-name) (set! G48fe@G2fb7@parse-exports G2fb7@parse-exports) (set! G48fd@G2fb5@expand-transformer G2fb5@expand-transformer) (set! G48fc@G2fb3@chi-body* G2fb3@chi-body*) (set! G48fb@G2fb1@chi-internal-module G2fb1@chi-internal-module) (set! G48fa@G2faf@module-interface-exp-id* G2faf@module-interface-exp-id*) (set! G48f9@G2fad@set-module-interface-exp-lab-vec! G2fad@set-module-interface-exp-lab-vec!) (set! G48f8@G2fab@set-module-interface-exp-id-vec! G2fab@set-module-interface-exp-id-vec!) (set! G48f7@G2fa9@set-module-interface-first-mark! G2fa9@set-module-interface-first-mark!) (set! G48f6@G2fa7@module-interface-exp-lab-vec G2fa7@module-interface-exp-lab-vec) (set! G48f5@G2fa5@module-interface-exp-id-vec G2fa5@module-interface-exp-id-vec) (set! G48f4@G2fa3@module-interface-first-mark G2fa3@module-interface-first-mark) (set! G48f3@G2fa1@make-module-interface G2fa1@make-module-interface) (set! G48f2@G2f9f@module-interface? G2f9f@module-interface?) (set! G48f1@G2f9c@G2f94 G2f9c@G2f94) (set! G48f0@G2f9a@G2f95 G2f9a@G2f95) (set! G48ef@G2f98@G2f93 G2f98@G2f93) (set! G48ee@G2f92@parse-module G2f92@parse-module) (set! G48ed@G2f90@chi-internal G2f90@chi-internal) (set! G48ec@G2f8e@find-dups G2f8e@find-dups) (set! G48eb@G2f8c@find-bound=? G2f8c@find-bound=?) (set! G48ea@G2f8a@chi-rhs* G2f8a@chi-rhs*) (set! G48e9@G2f88@expand-interaction-rhs*/init* G2f88@expand-interaction-rhs*/init*) (set! G48e8@G2f86@chi-rhs G2f86@chi-rhs) (set! G48e7@G2f84@chi-defun G2f84@chi-defun) (set! G48e6@G2f82@chi-lambda-clause* G2f82@chi-lambda-clause*) (set! G48e5@G2f80@chi-lambda-clause G2f80@chi-lambda-clause) (set! G48e4@G2f7e@verify-formals G2f7e@verify-formals) (set! G48e3@G2f7c@chi-set! G2f7c@chi-set!) (set! G48e2@G2f7a@chi-expr G2f7a@chi-expr) (set! G48e1@G2f78@chi-application G2f78@chi-application) (set! G48e0@G2f76@chi-expr* G2f76@chi-expr*) (set! G48df@G2f74@chi-global-macro G2f74@chi-global-macro) (set! G48de@G2f72@chi-local-macro G2f72@chi-local-macro) (set! G48dd@G2f70@chi-macro G2f70@chi-macro) (set! G48dc@G2f6e@do-macro-call G2f6e@do-macro-call) (set! G48db@G2f6c@local-macro-transformer G2f6c@local-macro-transformer) (set! G48da@G2f6a@macro-transformer G2f6a@macro-transformer) (set! G48d9@G2f68@symbol-macro G2f68@symbol-macro) (set! G48d8@G2f66@file-options-macro G2f66@file-options-macro) (set! G48d7@G2f64@core-macro-transformer G2f64@core-macro-transformer) (set! G48d6@G2f62@syntax-transformer G2f62@syntax-transformer) (set! G48d5@G2f60@ellipsis-map G2f60@ellipsis-map) (set! G48d4@G2f5e@syntax-case-transformer G2f5e@syntax-case-transformer) (set! G48d3@G2f5c@verify-literals G2f5c@verify-literals) (set! G48d2@G2f5a@underscore? G2f5a@underscore?) (set! G48d1@G2f58@ellipsis? G2f58@ellipsis?) (set! G48d0@G2f56@syntax-dispatch G2f56@syntax-dispatch) (set! G48cf@G2f54@convert-pattern G2f54@convert-pattern) (set! G48ce@G2f52@foreign-call-transformer G2f52@foreign-call-transformer) (set! G48cd@G2f50@parameterize-macro G2f50@parameterize-macro) (set! G48cc@G2f4e@incorrect-usage-macro G2f4e@incorrect-usage-macro) (set! G48cb@G2f4c@define-condition-type-macro G2f4c@define-condition-type-macro) (set! G48ca@G2f4a@define-record-type-macro G2f4a@define-record-type-macro) (set! G48c9@G2f48@define-struct-macro G2f48@define-struct-macro) (set! G48c8@G2f46@quasisyntax-macro G2f46@quasisyntax-macro) (set! G48c7@G2f44@quasiquote-macro G2f44@quasiquote-macro) (set! G48c6@G2f42@syntax-rules-macro G2f42@syntax-rules-macro) (set! G48c5@G2f40@include-into-macro G2f40@include-into-macro) (set! G48c4@G2f3e@include-macro G2f3e@include-macro) (set! G48c3@G2f3c@do-include G2f3c@do-include) (set! G48c2@G2f3a@cond-macro G2f3a@cond-macro) (set! G48c1@G2f38@and-macro G2f38@and-macro) (set! G48c0@G2f36@or-macro G2f36@or-macro) (set! G48bf@G2f34@let*-macro G2f34@let*-macro) (set! G48be@G2f32@do-macro G2f32@do-macro) (set! G48bd@G2f30@identifier-syntax-macro G2f30@identifier-syntax-macro) (set! G48bc@G2f2e@endianness-macro G2f2e@endianness-macro) (set! G48bb@G2f2c@assert-macro G2f2c@assert-macro) (set! G48ba@G2f2a@delay-macro G2f2a@delay-macro) (set! G48b9@G2f28@time-macro G2f28@time-macro) (set! G48b8@G2f26@define-enumeration-macro G2f26@define-enumeration-macro) (set! G48b7@G2f24@guard-macro G2f24@guard-macro) (set! G48b6@G2f22@trace-letrec-syntax-macro G2f22@trace-letrec-syntax-macro) (set! G48b5@G2f20@trace-let-syntax-macro G2f20@trace-let-syntax-macro) (set! G48b4@G2f1e@trace-let/rec-syntax G2f1e@trace-let/rec-syntax) (set! G48b3@G2f1c@trace-define-syntax-macro G2f1c@trace-define-syntax-macro) (set! G48b2@G2f1a@trace-define-macro G2f1a@trace-define-macro) (set! G48b1@G2f18@trace-lambda-macro G2f18@trace-lambda-macro) (set! G48b0@G2f16@let*-values-macro G2f16@let*-values-macro) (set! G48af@G2f14@let-values-macro G2f14@let-values-macro) (set! G48ae@G2f12@let-macro G2f12@let-macro) (set! G48ad@G2f10@invalid-fmls-error G2f10@invalid-fmls-error) (set! G48ac@G2f0e@with-syntax-macro G2f0e@with-syntax-macro) (set! G48ab@G2f0c@bless G2f0c@bless) (set! G48aa@G2f0a@lambda-transformer G2f0a@lambda-transformer) (set! G48a9@G2f08@case-lambda-transformer G2f08@case-lambda-transformer) (set! G48a8@G2f06@quote-transformer G2f06@quote-transformer) (set! G48a7@G2f04@case-macro G2f04@case-macro) (set! G48a6@G2f02@or-transformer G2f02@or-transformer) (set! G48a5@G2f00@and-transformer G2f00@and-transformer) (set! G48a4@G2efe@if-transformer G2efe@if-transformer) (set! G48a3@G2efc@unless-macro G2efc@unless-macro) (set! G48a2@G2efa@when-macro G2efa@when-macro) (set! G48a1@G2ef8@record-constructor-descriptor-transformer G2ef8@record-constructor-descriptor-transformer) (set! G48a0@G2ef6@record-type-descriptor-transformer G2ef6@record-type-descriptor-transformer) (set! G489f@G2ef4@type-descriptor-transformer G2ef4@type-descriptor-transformer) (set! G489e@G2ef2@fluid-let-syntax-transformer G2ef2@fluid-let-syntax-transformer) (set! G489d@G2ef0@letrec*-transformer G2ef0@letrec*-transformer) (set! G489c@G2eee@letrec-transformer G2eee@letrec-transformer) (set! G489b@G2eec@letrec-helper G2eec@letrec-helper) (set! G489a@G2eea@add-lexicals G2eea@add-lexicals) (set! G4899@G2ee8@add-lexical G2ee8@add-lexical) (set! G4898@G2ee6@set-lexical-mutable! G2ee6@set-lexical-mutable!) (set! G4897@G2ee4@lexical-mutable? G2ee4@lexical-mutable?) (set! G4896@G2ee2@lexical-var G2ee2@lexical-var) (set! G4895@G2ee0@scheme-stx G2ee0@scheme-stx) (set! G4894@G2ede@scheme-stx-hashtable G2ede@scheme-stx-hashtable) (set! G4893@G2edc@parse-define-syntax G2edc@parse-define-syntax) (set! G4892@G2eda@parse-define G2eda@parse-define) (set! G4891@G2d97@make-eval-transformer G2d97@make-eval-transformer) (set! G4890@G2d95@variable-transformer-procedure G2d95@variable-transformer-procedure) (set! G488f@G2d93@variable-transformer? G2d93@variable-transformer?) (set! G488e@G2d91@make-variable-transformer G2d91@make-variable-transformer) (set! G488d@G2d8f@sanitize-binding G2d8f@sanitize-binding) (set! G488c@G2d7f@syntax-type G2d7f@syntax-type) (set! G488b@G2d7d@raise-unbound-error G2d7d@raise-unbound-error) (set! G488a@G2d7b@binding-value G2d7b@binding-value) (set! G4889@G2d79@binding-type G2d79@binding-type) (set! G4888@G2d77@make-binding G2d77@make-binding) (set! G4887@G2d75@label->binding G2d75@label->binding) (set! G4886@G2d73@id->real-label G2d73@id->real-label) (set! G4885@G2d71@id->label G2d71@id->label) (set! G4884@G2d6f@same-marks*? G2d6f@same-marks*?) (set! G4883@G2d6d@stx->datum G2d6d@stx->datum) (set! G4882@G2d6b@strip G2d6b@strip) (set! G4881@G2d69@strip-annotations G2d69@strip-annotations) (set! G4880@G2d67@self-evaluating? G2d67@self-evaluating?) (set! G487f@G2d65@bound-id-member? G2d65@bound-id-member?) (set! G487e@G2d63@distinct-bound-ids? G2d63@distinct-bound-ids?) (set! G487d@G2d61@valid-bound-ids? G2d61@valid-bound-ids?) (set! G487c@G2d5f@free-id=? G2d5f@free-id=?) (set! G487b@G2d5d@bound-id=? G2d5d@bound-id=?) (set! G487a@G2d5b@same-marks? G2d5b@same-marks?) (set! G4879@G2d59@id->sym G2d59@id->sym) (set! G4878@G2d57@id? G2d57@id?) (set! G4877@G2d55@syntax->list G2d55@syntax->list) (set! G4876@G2d53@syntax-cdr G2d53@syntax-cdr) (set! G4875@G2d51@syntax-car G2d51@syntax-car) (set! G4874@G2d4f@syntax-list? G2d4f@syntax-list?) (set! G4873@G2d4d@syntax-null? G2d4d@syntax-null?) (set! G4872@G2d4b@syntax-vector? G2d4b@syntax-vector?) (set! G4871@G2d49@syntax-pair? G2d49@syntax-pair?) (set! G4870@G2d47@syntax-vector->list G2d47@syntax-vector->list) (set! G486f@G2d45@syntax-kind? G2d45@syntax-kind?) (set! G486e@G2d43@add-subst G2d43@add-subst) (set! G486d@G2d41@add-mark G2d41@add-mark) (set! G486c@G2d3f@mkstx G2d3f@mkstx) (set! G486b@G2d3d@join-wraps G2d3d@join-wraps) (set! G486a@G2d3b@anti-mark? G2d3b@anti-mark?) (set! G4869@G2d39@anti-mark G2d39@anti-mark) (set! G4868@G2d37@gen-mark G2d37@gen-mark) (set! G4867@G2d35@datum->stx G2d35@datum->stx) (set! G4866@G2d33@rp G2d33@rp) (set! G4865@G2d31@set-stx-ae*! G2d31@set-stx-ae*!) (set! G4864@G2d2f@set-stx-subst*! G2d2f@set-stx-subst*!) (set! G4863@G2d2d@set-stx-mark*! G2d2d@set-stx-mark*!) (set! G4862@G2d2b@set-stx-expr! G2d2b@set-stx-expr!) (set! G4861@G2d29@stx-ae* G2d29@stx-ae*) (set! G4860@G2d27@stx-subst* G2d27@stx-subst*) (set! G485f@G2d25@stx-mark* G2d25@stx-mark*) (set! G485e@G2d23@stx-expr G2d23@stx-expr) (set! G485d@G2d21@make-stx G2d21@make-stx) (set! G485c@G2d1f@stx? G2d1f@stx?) (set! G485b@G2d1c@G2d14 G2d1c@G2d14) (set! G485a@G2d1a@G2d15 G2d1a@G2d15) (set! G4859@G2d18@G2d13 G2d18@G2d13) (set! G4858@G2d12@make-full-rib G2d12@make-full-rib) (set! G4857@G2d10@unseal-rib! G2d10@unseal-rib!) (set! G4856@G2d0e@seal-rib! G2d0e@seal-rib!) (set! G4855@G2d0c@make-rib-map G2d0c@make-rib-map) (set! G4854@G2d0a@extend-rib/nc! G2d0a@extend-rib/nc!) (set! G4853@G2d08@extend-rib! G2d08@extend-rib!) (set! G4852@G2d06@find-label G2d06@find-label) (set! G4851@G2d04@make-cache-rib G2d04@make-cache-rib) (set! G4850@G2d02@make-empty-rib G2d02@make-empty-rib) (set! G484f@G2d00@set-rib-cache! G2d00@set-rib-cache!) (set! G484e@G2cfe@set-rib-sealed/freq! G2cfe@set-rib-sealed/freq!) (set! G484d@G2cfc@set-rib-label*! G2cfc@set-rib-label*!) (set! G484c@G2cfa@set-rib-mark**! G2cfa@set-rib-mark**!) (set! G484b@G2cf8@set-rib-sym*! G2cf8@set-rib-sym*!) (set! G484a@G2cf6@rib-cache G2cf6@rib-cache) (set! G4849@G2cf4@rib-sealed/freq G2cf4@rib-sealed/freq) (set! G4848@G2cf2@rib-label* G2cf2@rib-label*) (set! G4847@G2cf0@rib-mark** G2cf0@rib-mark**) (set! G4846@G2cee@rib-sym* G2cee@rib-sym*) (set! G4845@G2cec@make-rib G2cec@make-rib) (set! G4844@G2cea@rib? G2cea@rib?) (set! G4843@G2ce7@G2cdf G2ce7@G2cdf) (set! G4842@G2ce5@G2ce0 G2ce5@G2ce0) (set! G4841@G2ce3@G2cde G2ce3@G2cde) (set! G4840@G2cdd@gen-define-label G2cdd@gen-define-label) (set! G483f@G2cdb@gen-define-label+loc G2cdb@gen-define-label+loc) (set! G483e@G2cd9@gen-top-level-label G2cd9@gen-top-level-label) (set! G483d@G2cd7@gen-label G2cd7@gen-label) (set! G483c@G2cd5@gen-global G2cd5@gen-global) (set! G483b@G2cd3@gen-lexical G2cd3@gen-lexical) (set! G483a@G2cd1@top-marked? G2cd1@top-marked?) (set! G4839@G2ccf@top-mark* G2ccf@top-mark*) (set! G4838@G2cca@set-union G2cca@set-union) (set! G4837@G2cc8@set-cons G2cc8@set-cons) (G2b64@G2a01@current-library-expander G3023@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G494f@G494a G4951@G494c G4953@G494b G4956@&condition? G4958@make-&condition G495a@&condition-rtd G495c@&condition-rcd G49a6@G49a1 G49a8@G49a3 G49aa@G49a2 G49ad@p? G49af@make-message-condition G49b1@G49a0 G49b3@message-condition? G49b5@condition-message G49b7@&message-rtd G49b9@&message-rcd G49bf@G49ba G49c1@G49bc G49c3@G49bb G49c6@p? G49c8@make-warning G49ca@warning? G49cc@&warning-rtd G49ce@&warning-rcd G49d4@G49cf G49d6@G49d1 G49d8@G49d0 G49db@p? G49dd@make-serious-condition G49df@serious-condition? G49e1@&serious-rtd G49e3@&serious-rcd G49e9@G49e4 G49eb@G49e6 G49ed@G49e5 G49f0@p? G49f2@make-error G49f4@error? G49f6@&error-rtd G49f8@&error-rcd G49fe@G49f9 G4a00@G49fb G4a02@G49fa G4a05@p? G4a07@make-violation G4a09@violation? G4a0b@&violation-rtd G4a0d@&violation-rcd G4a13@G4a0e G4a15@G4a10 G4a17@G4a0f G4a1a@p? G4a1c@make-assertion-violation G4a1e@assertion-violation? G4a20@&assertion-rtd G4a22@&assertion-rcd G4a29@G4a24 G4a2b@G4a26 G4a2d@G4a25 G4a30@p? G4a32@make-irritants-condition G4a34@G4a23 G4a36@irritants-condition? G4a38@condition-irritants G4a3a@&irritants-rtd G4a3c@&irritants-rcd G4a43@G4a3e G4a45@G4a40 G4a47@G4a3f G4a4a@p? G4a4c@make-who-condition G4a4e@G4a3d G4a50@who-condition? G4a52@condition-who G4a54@&who-rtd G4a56@&who-rcd G4a5c@G4a57 G4a5e@G4a59 G4a60@G4a58 G4a63@p? G4a65@make-non-continuable-violation G4a67@non-continuable-violation? G4a69@&non-continuable-rtd G4a6b@&non-continuable-rcd G4a71@G4a6c G4a73@G4a6e G4a75@G4a6d G4a78@p? G4a7a@make-implementation-restriction-violation G4a7c@implementation-restriction-violation? G4a7e@&implementation-restriction-rtd G4a80@&implementation-restriction-rcd G4a86@G4a81 G4a88@G4a83 G4a8a@G4a82 G4a8d@p? G4a8f@make-lexical-violation G4a91@lexical-violation? G4a93@&lexical-rtd G4a95@&lexical-rcd G4a9d@G4a98 G4a9f@G4a9a G4aa1@G4a99 G4aa4@p? G4aa6@make-syntax-violation G4aa8@G4a96 G4aaa@G4a97 G4aac@syntax-violation? G4aae@syntax-violation-form G4ab0@syntax-violation-subform G4ab2@&syntax-rtd G4ab4@&syntax-rcd G4aba@G4ab5 G4abc@G4ab7 G4abe@G4ab6 G4ac1@p? G4ac3@make-undefined-violation G4ac5@undefined-violation? G4ac7@&undefined-rtd G4ac9@&undefined-rcd G4acf@G4aca G4ad1@G4acc G4ad3@G4acb G4ad6@p? G4ad8@make-i/o-error G4ada@i/o-error? G4adc@&i/o-rtd G4ade@&i/o-rcd G4ae4@G4adf G4ae6@G4ae1 G4ae8@G4ae0 G4aeb@p? G4aed@make-i/o-read-error G4aef@i/o-read-error? G4af1@&i/o-read-rtd G4af3@&i/o-read-rcd G4af9@G4af4 G4afb@G4af6 G4afd@G4af5 G4b00@p? G4b02@make-i/o-write-error G4b04@i/o-write-error? G4b06@&i/o-write-rtd G4b08@&i/o-write-rcd G4b0f@G4b0a G4b11@G4b0c G4b13@G4b0b G4b16@p? G4b18@make-i/o-invalid-position-error G4b1a@G4b09 G4b1c@i/o-invalid-position-error? G4b1e@i/o-error-position G4b20@&i/o-invalid-position-rtd G4b22@&i/o-invalid-position-rcd G4b29@G4b24 G4b2b@G4b26 G4b2d@G4b25 G4b30@p? G4b32@make-i/o-filename-error G4b34@G4b23 G4b36@i/o-filename-error? G4b38@i/o-error-filename G4b3a@&i/o-filename-rtd G4b3c@&i/o-filename-rcd G4b42@G4b3d G4b44@G4b3f G4b46@G4b3e G4b49@p? G4b4b@make-i/o-file-protection-error G4b4d@i/o-file-protection-error? G4b4f@&i/o-file-protection-rtd G4b51@&i/o-file-protection-rcd G4b57@G4b52 G4b59@G4b54 G4b5b@G4b53 G4b5e@p? G4b60@make-i/o-file-is-read-only-error G4b62@i/o-file-is-read-only-error? G4b64@&i/o-file-is-read-only-rtd G4b66@&i/o-file-is-read-only-rcd G4b6c@G4b67 G4b6e@G4b69 G4b70@G4b68 G4b73@p? G4b75@make-i/o-file-already-exists-error G4b77@i/o-file-already-exists-error? G4b79@&i/o-file-already-exists-rtd G4b7b@&i/o-file-already-exists-rcd G4b81@G4b7c G4b83@G4b7e G4b85@G4b7d G4b88@p? G4b8a@make-i/o-file-does-not-exist-error G4b8c@i/o-file-does-not-exist-error? G4b8e@&i/o-file-does-not-exist-rtd G4b90@&i/o-file-does-not-exist-rcd G4b97@G4b92 G4b99@G4b94 G4b9b@G4b93 G4b9e@p? G4ba0@make-i/o-port-error G4ba2@G4b91 G4ba4@i/o-port-error? G4ba6@i/o-error-port G4ba8@&i/o-port-rtd G4baa@&i/o-port-rcd G4bb0@G4bab G4bb2@G4bad G4bb4@G4bac G4bb7@p? G4bb9@make-i/o-decoding-error G4bbb@i/o-decoding-error? G4bbd@&i/o-decoding-rtd G4bbf@&i/o-decoding-rcd G4bc6@G4bc1 G4bc8@G4bc3 G4bca@G4bc2 G4bcd@p? G4bcf@make-i/o-encoding-error G4bd1@G4bc0 G4bd3@i/o-encoding-error? G4bd5@i/o-encoding-error-char G4bd7@&i/o-encoding-rtd G4bd9@&i/o-encoding-rcd G4bdf@G4bda G4be1@G4bdc G4be3@G4bdb G4be6@p? G4be8@make-no-infinities-violation G4bea@no-infinities-violation? G4bec@&no-infinities-rtd G4bee@&no-infinities-rcd G4bf4@G4bef G4bf6@G4bf1 G4bf8@G4bf0 G4bfb@p? G4bfd@make-no-nans-violation G4bff@no-nans-violation? G4c01@&no-nans-rtd G4c03@&no-nans-rcd) (begin (set! G494f@G494a (make-record-type-descriptor '&condition '#f 'G494d '#f '#f '#())) (set! G4951@G494c '#f) (set! G4953@G494b (make-record-constructor-descriptor G494f@G494a '#f G4951@G494c)) (set! G4956@&condition? (record-predicate G494f@G494a)) (set! G4958@make-&condition (record-constructor G4953@G494b)) (set! G495a@&condition-rtd G494f@G494a) (set! G495c@&condition-rcd G4953@G494b) (set! G49a6@G49a1 (make-record-type-descriptor '&message G494f@G494a 'G49a4 '#f '#f '#((immutable message)))) (set! G49a8@G49a3 '#f) (set! G49aa@G49a2 (make-record-constructor-descriptor G49a6@G49a1 G4953@G494b G49a8@G49a3)) (set! G49ad@p? (record-predicate G49a6@G49a1)) (set! G49af@make-message-condition (record-constructor G49aa@G49a2)) (set! G49b1@G49a0 (record-accessor G49a6@G49a1 '0)) (set! G49b3@message-condition? (condition-predicate G49a6@G49a1)) (set! G49b5@condition-message (condition-accessor G49a6@G49a1 G49b1@G49a0)) (set! G49b7@&message-rtd G49a6@G49a1) (set! G49b9@&message-rcd G49aa@G49a2) (set! G49bf@G49ba (make-record-type-descriptor '&warning G494f@G494a 'G49bd '#f '#f '#())) (set! G49c1@G49bc '#f) (set! G49c3@G49bb (make-record-constructor-descriptor G49bf@G49ba G4953@G494b G49c1@G49bc)) (set! G49c6@p? (record-predicate G49bf@G49ba)) (set! G49c8@make-warning (record-constructor G49c3@G49bb)) (set! G49ca@warning? (condition-predicate G49bf@G49ba)) (set! G49cc@&warning-rtd G49bf@G49ba) (set! G49ce@&warning-rcd G49c3@G49bb) (set! G49d4@G49cf (make-record-type-descriptor '&serious G494f@G494a 'G49d2 '#f '#f '#())) (set! G49d6@G49d1 '#f) (set! G49d8@G49d0 (make-record-constructor-descriptor G49d4@G49cf G4953@G494b G49d6@G49d1)) (set! G49db@p? (record-predicate G49d4@G49cf)) (set! G49dd@make-serious-condition (record-constructor G49d8@G49d0)) (set! G49df@serious-condition? (condition-predicate G49d4@G49cf)) (set! G49e1@&serious-rtd G49d4@G49cf) (set! G49e3@&serious-rcd G49d8@G49d0) (set! G49e9@G49e4 (make-record-type-descriptor '&error G49d4@G49cf 'G49e7 '#f '#f '#())) (set! G49eb@G49e6 '#f) (set! G49ed@G49e5 (make-record-constructor-descriptor G49e9@G49e4 G49d8@G49d0 G49eb@G49e6)) (set! G49f0@p? (record-predicate G49e9@G49e4)) (set! G49f2@make-error (record-constructor G49ed@G49e5)) (set! G49f4@error? (condition-predicate G49e9@G49e4)) (set! G49f6@&error-rtd G49e9@G49e4) (set! G49f8@&error-rcd G49ed@G49e5) (set! G49fe@G49f9 (make-record-type-descriptor '&violation G49d4@G49cf 'G49fc '#f '#f '#())) (set! G4a00@G49fb '#f) (set! G4a02@G49fa (make-record-constructor-descriptor G49fe@G49f9 G49d8@G49d0 G4a00@G49fb)) (set! G4a05@p? (record-predicate G49fe@G49f9)) (set! G4a07@make-violation (record-constructor G4a02@G49fa)) (set! G4a09@violation? (condition-predicate G49fe@G49f9)) (set! G4a0b@&violation-rtd G49fe@G49f9) (set! G4a0d@&violation-rcd G4a02@G49fa) (set! G4a13@G4a0e (make-record-type-descriptor '&assertion G49fe@G49f9 'G4a11 '#f '#f '#())) (set! G4a15@G4a10 '#f) (set! G4a17@G4a0f (make-record-constructor-descriptor G4a13@G4a0e G4a02@G49fa G4a15@G4a10)) (set! G4a1a@p? (record-predicate G4a13@G4a0e)) (set! G4a1c@make-assertion-violation (record-constructor G4a17@G4a0f)) (set! G4a1e@assertion-violation? (condition-predicate G4a13@G4a0e)) (set! G4a20@&assertion-rtd G4a13@G4a0e) (set! G4a22@&assertion-rcd G4a17@G4a0f) (set! G4a29@G4a24 (make-record-type-descriptor '&irritants G494f@G494a 'G4a27 '#f '#f '#((immutable irritants)))) (set! G4a2b@G4a26 '#f) (set! G4a2d@G4a25 (make-record-constructor-descriptor G4a29@G4a24 G4953@G494b G4a2b@G4a26)) (set! G4a30@p? (record-predicate G4a29@G4a24)) (set! G4a32@make-irritants-condition (record-constructor G4a2d@G4a25)) (set! G4a34@G4a23 (record-accessor G4a29@G4a24 '0)) (set! G4a36@irritants-condition? (condition-predicate G4a29@G4a24)) (set! G4a38@condition-irritants (condition-accessor G4a29@G4a24 G4a34@G4a23)) (set! G4a3a@&irritants-rtd G4a29@G4a24) (set! G4a3c@&irritants-rcd G4a2d@G4a25) (set! G4a43@G4a3e (make-record-type-descriptor '&who G494f@G494a 'G4a41 '#f '#f '#((immutable who)))) (set! G4a45@G4a40 '#f) (set! G4a47@G4a3f (make-record-constructor-descriptor G4a43@G4a3e G4953@G494b G4a45@G4a40)) (set! G4a4a@p? (record-predicate G4a43@G4a3e)) (set! G4a4c@make-who-condition (record-constructor G4a47@G4a3f)) (set! G4a4e@G4a3d (record-accessor G4a43@G4a3e '0)) (set! G4a50@who-condition? (condition-predicate G4a43@G4a3e)) (set! G4a52@condition-who (condition-accessor G4a43@G4a3e G4a4e@G4a3d)) (set! G4a54@&who-rtd G4a43@G4a3e) (set! G4a56@&who-rcd G4a47@G4a3f) (set! G4a5c@G4a57 (make-record-type-descriptor '&non-continuable G49fe@G49f9 'G4a5a '#f '#f '#())) (set! G4a5e@G4a59 '#f) (set! G4a60@G4a58 (make-record-constructor-descriptor G4a5c@G4a57 G4a02@G49fa G4a5e@G4a59)) (set! G4a63@p? (record-predicate G4a5c@G4a57)) (set! G4a65@make-non-continuable-violation (record-constructor G4a60@G4a58)) (set! G4a67@non-continuable-violation? (condition-predicate G4a5c@G4a57)) (set! G4a69@&non-continuable-rtd G4a5c@G4a57) (set! G4a6b@&non-continuable-rcd G4a60@G4a58) (set! G4a71@G4a6c (make-record-type-descriptor '&implementation-restriction G49fe@G49f9 'G4a6f '#f '#f '#())) (set! G4a73@G4a6e '#f) (set! G4a75@G4a6d (make-record-constructor-descriptor G4a71@G4a6c G4a02@G49fa G4a73@G4a6e)) (set! G4a78@p? (record-predicate G4a71@G4a6c)) (set! G4a7a@make-implementation-restriction-violation (record-constructor G4a75@G4a6d)) (set! G4a7c@implementation-restriction-violation? (condition-predicate G4a71@G4a6c)) (set! G4a7e@&implementation-restriction-rtd G4a71@G4a6c) (set! G4a80@&implementation-restriction-rcd G4a75@G4a6d) (set! G4a86@G4a81 (make-record-type-descriptor '&lexical G49fe@G49f9 'G4a84 '#f '#f '#())) (set! G4a88@G4a83 '#f) (set! G4a8a@G4a82 (make-record-constructor-descriptor G4a86@G4a81 G4a02@G49fa G4a88@G4a83)) (set! G4a8d@p? (record-predicate G4a86@G4a81)) (set! G4a8f@make-lexical-violation (record-constructor G4a8a@G4a82)) (set! G4a91@lexical-violation? (condition-predicate G4a86@G4a81)) (set! G4a93@&lexical-rtd G4a86@G4a81) (set! G4a95@&lexical-rcd G4a8a@G4a82) (set! G4a9d@G4a98 (make-record-type-descriptor '&syntax G49fe@G49f9 'G4a9b '#f '#f '#((immutable form) (immutable subform)))) (set! G4a9f@G4a9a '#f) (set! G4aa1@G4a99 (make-record-constructor-descriptor G4a9d@G4a98 G4a02@G49fa G4a9f@G4a9a)) (set! G4aa4@p? (record-predicate G4a9d@G4a98)) (set! G4aa6@make-syntax-violation (record-constructor G4aa1@G4a99)) (set! G4aa8@G4a96 (record-accessor G4a9d@G4a98 '0)) (set! G4aaa@G4a97 (record-accessor G4a9d@G4a98 '1)) (set! G4aac@syntax-violation? (condition-predicate G4a9d@G4a98)) (set! G4aae@syntax-violation-form (condition-accessor G4a9d@G4a98 G4aa8@G4a96)) (set! G4ab0@syntax-violation-subform (condition-accessor G4a9d@G4a98 G4aaa@G4a97)) (set! G4ab2@&syntax-rtd G4a9d@G4a98) (set! G4ab4@&syntax-rcd G4aa1@G4a99) (set! G4aba@G4ab5 (make-record-type-descriptor '&undefined G49fe@G49f9 'G4ab8 '#f '#f '#())) (set! G4abc@G4ab7 '#f) (set! G4abe@G4ab6 (make-record-constructor-descriptor G4aba@G4ab5 G4a02@G49fa G4abc@G4ab7)) (set! G4ac1@p? (record-predicate G4aba@G4ab5)) (set! G4ac3@make-undefined-violation (record-constructor G4abe@G4ab6)) (set! G4ac5@undefined-violation? (condition-predicate G4aba@G4ab5)) (set! G4ac7@&undefined-rtd G4aba@G4ab5) (set! G4ac9@&undefined-rcd G4abe@G4ab6) (set! G4acf@G4aca (make-record-type-descriptor '&i/o G49e9@G49e4 'G4acd '#f '#f '#())) (set! G4ad1@G4acc '#f) (set! G4ad3@G4acb (make-record-constructor-descriptor G4acf@G4aca G49ed@G49e5 G4ad1@G4acc)) (set! G4ad6@p? (record-predicate G4acf@G4aca)) (set! G4ad8@make-i/o-error (record-constructor G4ad3@G4acb)) (set! G4ada@i/o-error? (condition-predicate G4acf@G4aca)) (set! G4adc@&i/o-rtd G4acf@G4aca) (set! G4ade@&i/o-rcd G4ad3@G4acb) (set! G4ae4@G4adf (make-record-type-descriptor '&i/o-read G4acf@G4aca 'G4ae2 '#f '#f '#())) (set! G4ae6@G4ae1 '#f) (set! G4ae8@G4ae0 (make-record-constructor-descriptor G4ae4@G4adf G4ad3@G4acb G4ae6@G4ae1)) (set! G4aeb@p? (record-predicate G4ae4@G4adf)) (set! G4aed@make-i/o-read-error (record-constructor G4ae8@G4ae0)) (set! G4aef@i/o-read-error? (condition-predicate G4ae4@G4adf)) (set! G4af1@&i/o-read-rtd G4ae4@G4adf) (set! G4af3@&i/o-read-rcd G4ae8@G4ae0) (set! G4af9@G4af4 (make-record-type-descriptor '&i/o-write G4acf@G4aca 'G4af7 '#f '#f '#())) (set! G4afb@G4af6 '#f) (set! G4afd@G4af5 (make-record-constructor-descriptor G4af9@G4af4 G4ad3@G4acb G4afb@G4af6)) (set! G4b00@p? (record-predicate G4af9@G4af4)) (set! G4b02@make-i/o-write-error (record-constructor G4afd@G4af5)) (set! G4b04@i/o-write-error? (condition-predicate G4af9@G4af4)) (set! G4b06@&i/o-write-rtd G4af9@G4af4) (set! G4b08@&i/o-write-rcd G4afd@G4af5) (set! G4b0f@G4b0a (make-record-type-descriptor '&i/o-invalid-position G4acf@G4aca 'G4b0d '#f '#f '#((immutable position)))) (set! G4b11@G4b0c '#f) (set! G4b13@G4b0b (make-record-constructor-descriptor G4b0f@G4b0a G4ad3@G4acb G4b11@G4b0c)) (set! G4b16@p? (record-predicate G4b0f@G4b0a)) (set! G4b18@make-i/o-invalid-position-error (record-constructor G4b13@G4b0b)) (set! G4b1a@G4b09 (record-accessor G4b0f@G4b0a '0)) (set! G4b1c@i/o-invalid-position-error? (condition-predicate G4b0f@G4b0a)) (set! G4b1e@i/o-error-position (condition-accessor G4b0f@G4b0a G4b1a@G4b09)) (set! G4b20@&i/o-invalid-position-rtd G4b0f@G4b0a) (set! G4b22@&i/o-invalid-position-rcd G4b13@G4b0b) (set! G4b29@G4b24 (make-record-type-descriptor '&i/o-filename G4acf@G4aca 'G4b27 '#f '#f '#((immutable filename)))) (set! G4b2b@G4b26 '#f) (set! G4b2d@G4b25 (make-record-constructor-descriptor G4b29@G4b24 G4ad3@G4acb G4b2b@G4b26)) (set! G4b30@p? (record-predicate G4b29@G4b24)) (set! G4b32@make-i/o-filename-error (record-constructor G4b2d@G4b25)) (set! G4b34@G4b23 (record-accessor G4b29@G4b24 '0)) (set! G4b36@i/o-filename-error? (condition-predicate G4b29@G4b24)) (set! G4b38@i/o-error-filename (condition-accessor G4b29@G4b24 G4b34@G4b23)) (set! G4b3a@&i/o-filename-rtd G4b29@G4b24) (set! G4b3c@&i/o-filename-rcd G4b2d@G4b25) (set! G4b42@G4b3d (make-record-type-descriptor '&i/o-file-protection G4b29@G4b24 'G4b40 '#f '#f '#())) (set! G4b44@G4b3f '#f) (set! G4b46@G4b3e (make-record-constructor-descriptor G4b42@G4b3d G4b2d@G4b25 G4b44@G4b3f)) (set! G4b49@p? (record-predicate G4b42@G4b3d)) (set! G4b4b@make-i/o-file-protection-error (record-constructor G4b46@G4b3e)) (set! G4b4d@i/o-file-protection-error? (condition-predicate G4b42@G4b3d)) (set! G4b4f@&i/o-file-protection-rtd G4b42@G4b3d) (set! G4b51@&i/o-file-protection-rcd G4b46@G4b3e) (set! G4b57@G4b52 (make-record-type-descriptor '&i/o-file-is-read-only G4b42@G4b3d 'G4b55 '#f '#f '#())) (set! G4b59@G4b54 '#f) (set! G4b5b@G4b53 (make-record-constructor-descriptor G4b57@G4b52 G4b46@G4b3e G4b59@G4b54)) (set! G4b5e@p? (record-predicate G4b57@G4b52)) (set! G4b60@make-i/o-file-is-read-only-error (record-constructor G4b5b@G4b53)) (set! G4b62@i/o-file-is-read-only-error? (condition-predicate G4b57@G4b52)) (set! G4b64@&i/o-file-is-read-only-rtd G4b57@G4b52) (set! G4b66@&i/o-file-is-read-only-rcd G4b5b@G4b53) (set! G4b6c@G4b67 (make-record-type-descriptor '&i/o-file-already-exists G4b29@G4b24 'G4b6a '#f '#f '#())) (set! G4b6e@G4b69 '#f) (set! G4b70@G4b68 (make-record-constructor-descriptor G4b6c@G4b67 G4b2d@G4b25 G4b6e@G4b69)) (set! G4b73@p? (record-predicate G4b6c@G4b67)) (set! G4b75@make-i/o-file-already-exists-error (record-constructor G4b70@G4b68)) (set! G4b77@i/o-file-already-exists-error? (condition-predicate G4b6c@G4b67)) (set! G4b79@&i/o-file-already-exists-rtd G4b6c@G4b67) (set! G4b7b@&i/o-file-already-exists-rcd G4b70@G4b68) (set! G4b81@G4b7c (make-record-type-descriptor '&i/o-file-does-not-exist G4b29@G4b24 'G4b7f '#f '#f '#())) (set! G4b83@G4b7e '#f) (set! G4b85@G4b7d (make-record-constructor-descriptor G4b81@G4b7c G4b2d@G4b25 G4b83@G4b7e)) (set! G4b88@p? (record-predicate G4b81@G4b7c)) (set! G4b8a@make-i/o-file-does-not-exist-error (record-constructor G4b85@G4b7d)) (set! G4b8c@i/o-file-does-not-exist-error? (condition-predicate G4b81@G4b7c)) (set! G4b8e@&i/o-file-does-not-exist-rtd G4b81@G4b7c) (set! G4b90@&i/o-file-does-not-exist-rcd G4b85@G4b7d) (set! G4b97@G4b92 (make-record-type-descriptor '&i/o-port G4acf@G4aca 'G4b95 '#f '#f '#((immutable port)))) (set! G4b99@G4b94 '#f) (set! G4b9b@G4b93 (make-record-constructor-descriptor G4b97@G4b92 G4ad3@G4acb G4b99@G4b94)) (set! G4b9e@p? (record-predicate G4b97@G4b92)) (set! G4ba0@make-i/o-port-error (record-constructor G4b9b@G4b93)) (set! G4ba2@G4b91 (record-accessor G4b97@G4b92 '0)) (set! G4ba4@i/o-port-error? (condition-predicate G4b97@G4b92)) (set! G4ba6@i/o-error-port (condition-accessor G4b97@G4b92 G4ba2@G4b91)) (set! G4ba8@&i/o-port-rtd G4b97@G4b92) (set! G4baa@&i/o-port-rcd G4b9b@G4b93) (set! G4bb0@G4bab (make-record-type-descriptor '&i/o-decoding G4b97@G4b92 'G4bae '#f '#f '#())) (set! G4bb2@G4bad '#f) (set! G4bb4@G4bac (make-record-constructor-descriptor G4bb0@G4bab G4b9b@G4b93 G4bb2@G4bad)) (set! G4bb7@p? (record-predicate G4bb0@G4bab)) (set! G4bb9@make-i/o-decoding-error (record-constructor G4bb4@G4bac)) (set! G4bbb@i/o-decoding-error? (condition-predicate G4bb0@G4bab)) (set! G4bbd@&i/o-decoding-rtd G4bb0@G4bab) (set! G4bbf@&i/o-decoding-rcd G4bb4@G4bac) (set! G4bc6@G4bc1 (make-record-type-descriptor '&i/o-encoding G4b97@G4b92 'G4bc4 '#f '#f '#((immutable char)))) (set! G4bc8@G4bc3 '#f) (set! G4bca@G4bc2 (make-record-constructor-descriptor G4bc6@G4bc1 G4b9b@G4b93 G4bc8@G4bc3)) (set! G4bcd@p? (record-predicate G4bc6@G4bc1)) (set! G4bcf@make-i/o-encoding-error (record-constructor G4bca@G4bc2)) (set! G4bd1@G4bc0 (record-accessor G4bc6@G4bc1 '0)) (set! G4bd3@i/o-encoding-error? (condition-predicate G4bc6@G4bc1)) (set! G4bd5@i/o-encoding-error-char (condition-accessor G4bc6@G4bc1 G4bd1@G4bc0)) (set! G4bd7@&i/o-encoding-rtd G4bc6@G4bc1) (set! G4bd9@&i/o-encoding-rcd G4bca@G4bc2) (set! G4bdf@G4bda (make-record-type-descriptor '&no-infinities G4a71@G4a6c 'G4bdd '#f '#f '#())) (set! G4be1@G4bdc '#f) (set! G4be3@G4bdb (make-record-constructor-descriptor G4bdf@G4bda G4a75@G4a6d G4be1@G4bdc)) (set! G4be6@p? (record-predicate G4bdf@G4bda)) (set! G4be8@make-no-infinities-violation (record-constructor G4be3@G4bdb)) (set! G4bea@no-infinities-violation? (condition-predicate G4bdf@G4bda)) (set! G4bec@&no-infinities-rtd G4bdf@G4bda) (set! G4bee@&no-infinities-rcd G4be3@G4bdb) (set! G4bf4@G4bef (make-record-type-descriptor '&no-nans G4a71@G4a6c 'G4bf2 '#f '#f '#())) (set! G4bf6@G4bf1 '#f) (set! G4bf8@G4bf0 (make-record-constructor-descriptor G4bf4@G4bef G4a75@G4a6d G4bf6@G4bf1)) (set! G4bfb@p? (record-predicate G4bf4@G4bef)) (set! G4bfd@make-no-nans-violation (record-constructor G4bf8@G4bf0)) (set! G4bff@no-nans-violation? (condition-predicate G4bf4@G4bef)) (set! G4c01@&no-nans-rtd G4bf4@G4bef) (set! G4c03@&no-nans-rcd G4bf8@G4bf0) (begin (set! G4cf4@G4c03@&no-nans-rcd G4c03@&no-nans-rcd) (set! G4cf3@G4c01@&no-nans-rtd G4c01@&no-nans-rtd) (set! G4cf2@G4bff@no-nans-violation? G4bff@no-nans-violation?) (set! G4cf1@G4bfd@make-no-nans-violation G4bfd@make-no-nans-violation) (set! G4cf0@G4bfb@p? G4bfb@p?) (set! G4cef@G4bf8@G4bf0 G4bf8@G4bf0) (set! G4cee@G4bf6@G4bf1 G4bf6@G4bf1) (set! G4ced@G4bf4@G4bef G4bf4@G4bef) (set! G4cec@G4bee@&no-infinities-rcd G4bee@&no-infinities-rcd) (set! G4ceb@G4bec@&no-infinities-rtd G4bec@&no-infinities-rtd) (set! G4cea@G4bea@no-infinities-violation? G4bea@no-infinities-violation?) (set! G4ce9@G4be8@make-no-infinities-violation G4be8@make-no-infinities-violation) (set! G4ce8@G4be6@p? G4be6@p?) (set! G4ce7@G4be3@G4bdb G4be3@G4bdb) (set! G4ce6@G4be1@G4bdc G4be1@G4bdc) (set! G4ce5@G4bdf@G4bda G4bdf@G4bda) (set! G4ce4@G4bd9@&i/o-encoding-rcd G4bd9@&i/o-encoding-rcd) (set! G4ce3@G4bd7@&i/o-encoding-rtd G4bd7@&i/o-encoding-rtd) (set! G4ce2@G4bd5@i/o-encoding-error-char G4bd5@i/o-encoding-error-char) (set! G4ce1@G4bd3@i/o-encoding-error? G4bd3@i/o-encoding-error?) (set! G4ce0@G4bd1@G4bc0 G4bd1@G4bc0) (set! G4cdf@G4bcf@make-i/o-encoding-error G4bcf@make-i/o-encoding-error) (set! G4cde@G4bcd@p? G4bcd@p?) (set! G4cdd@G4bca@G4bc2 G4bca@G4bc2) (set! G4cdc@G4bc8@G4bc3 G4bc8@G4bc3) (set! G4cdb@G4bc6@G4bc1 G4bc6@G4bc1) (set! G4cda@G4bbf@&i/o-decoding-rcd G4bbf@&i/o-decoding-rcd) (set! G4cd9@G4bbd@&i/o-decoding-rtd G4bbd@&i/o-decoding-rtd) (set! G4cd8@G4bbb@i/o-decoding-error? G4bbb@i/o-decoding-error?) (set! G4cd7@G4bb9@make-i/o-decoding-error G4bb9@make-i/o-decoding-error) (set! G4cd6@G4bb7@p? G4bb7@p?) (set! G4cd5@G4bb4@G4bac G4bb4@G4bac) (set! G4cd4@G4bb2@G4bad G4bb2@G4bad) (set! G4cd3@G4bb0@G4bab G4bb0@G4bab) (set! G4cd2@G4baa@&i/o-port-rcd G4baa@&i/o-port-rcd) (set! G4cd1@G4ba8@&i/o-port-rtd G4ba8@&i/o-port-rtd) (set! G4cd0@G4ba6@i/o-error-port G4ba6@i/o-error-port) (set! G4ccf@G4ba4@i/o-port-error? G4ba4@i/o-port-error?) (set! G4cce@G4ba2@G4b91 G4ba2@G4b91) (set! G4ccd@G4ba0@make-i/o-port-error G4ba0@make-i/o-port-error) (set! G4ccc@G4b9e@p? G4b9e@p?) (set! G4ccb@G4b9b@G4b93 G4b9b@G4b93) (set! G4cca@G4b99@G4b94 G4b99@G4b94) (set! G4cc9@G4b97@G4b92 G4b97@G4b92) (set! G4cc8@G4b90@&i/o-file-does-not-exist-rcd G4b90@&i/o-file-does-not-exist-rcd) (set! G4cc7@G4b8e@&i/o-file-does-not-exist-rtd G4b8e@&i/o-file-does-not-exist-rtd) (set! G4cc6@G4b8c@i/o-file-does-not-exist-error? G4b8c@i/o-file-does-not-exist-error?) (set! G4cc5@G4b8a@make-i/o-file-does-not-exist-error G4b8a@make-i/o-file-does-not-exist-error) (set! G4cc4@G4b88@p? G4b88@p?) (set! G4cc3@G4b85@G4b7d G4b85@G4b7d) (set! G4cc2@G4b83@G4b7e G4b83@G4b7e) (set! G4cc1@G4b81@G4b7c G4b81@G4b7c) (set! G4cc0@G4b7b@&i/o-file-already-exists-rcd G4b7b@&i/o-file-already-exists-rcd) (set! G4cbf@G4b79@&i/o-file-already-exists-rtd G4b79@&i/o-file-already-exists-rtd) (set! G4cbe@G4b77@i/o-file-already-exists-error? G4b77@i/o-file-already-exists-error?) (set! G4cbd@G4b75@make-i/o-file-already-exists-error G4b75@make-i/o-file-already-exists-error) (set! G4cbc@G4b73@p? G4b73@p?) (set! G4cbb@G4b70@G4b68 G4b70@G4b68) (set! G4cba@G4b6e@G4b69 G4b6e@G4b69) (set! G4cb9@G4b6c@G4b67 G4b6c@G4b67) (set! G4cb8@G4b66@&i/o-file-is-read-only-rcd G4b66@&i/o-file-is-read-only-rcd) (set! G4cb7@G4b64@&i/o-file-is-read-only-rtd G4b64@&i/o-file-is-read-only-rtd) (set! G4cb6@G4b62@i/o-file-is-read-only-error? G4b62@i/o-file-is-read-only-error?) (set! G4cb5@G4b60@make-i/o-file-is-read-only-error G4b60@make-i/o-file-is-read-only-error) (set! G4cb4@G4b5e@p? G4b5e@p?) (set! G4cb3@G4b5b@G4b53 G4b5b@G4b53) (set! G4cb2@G4b59@G4b54 G4b59@G4b54) (set! G4cb1@G4b57@G4b52 G4b57@G4b52) (set! G4cb0@G4b51@&i/o-file-protection-rcd G4b51@&i/o-file-protection-rcd) (set! G4caf@G4b4f@&i/o-file-protection-rtd G4b4f@&i/o-file-protection-rtd) (set! G4cae@G4b4d@i/o-file-protection-error? G4b4d@i/o-file-protection-error?) (set! G4cad@G4b4b@make-i/o-file-protection-error G4b4b@make-i/o-file-protection-error) (set! G4cac@G4b49@p? G4b49@p?) (set! G4cab@G4b46@G4b3e G4b46@G4b3e) (set! G4caa@G4b44@G4b3f G4b44@G4b3f) (set! G4ca9@G4b42@G4b3d G4b42@G4b3d) (set! G4ca8@G4b3c@&i/o-filename-rcd G4b3c@&i/o-filename-rcd) (set! G4ca7@G4b3a@&i/o-filename-rtd G4b3a@&i/o-filename-rtd) (set! G4ca6@G4b38@i/o-error-filename G4b38@i/o-error-filename) (set! G4ca5@G4b36@i/o-filename-error? G4b36@i/o-filename-error?) (set! G4ca4@G4b34@G4b23 G4b34@G4b23) (set! G4ca3@G4b32@make-i/o-filename-error G4b32@make-i/o-filename-error) (set! G4ca2@G4b30@p? G4b30@p?) (set! G4ca1@G4b2d@G4b25 G4b2d@G4b25) (set! G4ca0@G4b2b@G4b26 G4b2b@G4b26) (set! G4c9f@G4b29@G4b24 G4b29@G4b24) (set! G4c9e@G4b22@&i/o-invalid-position-rcd G4b22@&i/o-invalid-position-rcd) (set! G4c9d@G4b20@&i/o-invalid-position-rtd G4b20@&i/o-invalid-position-rtd) (set! G4c9c@G4b1e@i/o-error-position G4b1e@i/o-error-position) (set! G4c9b@G4b1c@i/o-invalid-position-error? G4b1c@i/o-invalid-position-error?) (set! G4c9a@G4b1a@G4b09 G4b1a@G4b09) (set! G4c99@G4b18@make-i/o-invalid-position-error G4b18@make-i/o-invalid-position-error) (set! G4c98@G4b16@p? G4b16@p?) (set! G4c97@G4b13@G4b0b G4b13@G4b0b) (set! G4c96@G4b11@G4b0c G4b11@G4b0c) (set! G4c95@G4b0f@G4b0a G4b0f@G4b0a) (set! G4c94@G4b08@&i/o-write-rcd G4b08@&i/o-write-rcd) (set! G4c93@G4b06@&i/o-write-rtd G4b06@&i/o-write-rtd) (set! G4c92@G4b04@i/o-write-error? G4b04@i/o-write-error?) (set! G4c91@G4b02@make-i/o-write-error G4b02@make-i/o-write-error) (set! G4c90@G4b00@p? G4b00@p?) (set! G4c8f@G4afd@G4af5 G4afd@G4af5) (set! G4c8e@G4afb@G4af6 G4afb@G4af6) (set! G4c8d@G4af9@G4af4 G4af9@G4af4) (set! G4c8c@G4af3@&i/o-read-rcd G4af3@&i/o-read-rcd) (set! G4c8b@G4af1@&i/o-read-rtd G4af1@&i/o-read-rtd) (set! G4c8a@G4aef@i/o-read-error? G4aef@i/o-read-error?) (set! G4c89@G4aed@make-i/o-read-error G4aed@make-i/o-read-error) (set! G4c88@G4aeb@p? G4aeb@p?) (set! G4c87@G4ae8@G4ae0 G4ae8@G4ae0) (set! G4c86@G4ae6@G4ae1 G4ae6@G4ae1) (set! G4c85@G4ae4@G4adf G4ae4@G4adf) (set! G4c84@G4ade@&i/o-rcd G4ade@&i/o-rcd) (set! G4c83@G4adc@&i/o-rtd G4adc@&i/o-rtd) (set! G4c82@G4ada@i/o-error? G4ada@i/o-error?) (set! G4c81@G4ad8@make-i/o-error G4ad8@make-i/o-error) (set! G4c80@G4ad6@p? G4ad6@p?) (set! G4c7f@G4ad3@G4acb G4ad3@G4acb) (set! G4c7e@G4ad1@G4acc G4ad1@G4acc) (set! G4c7d@G4acf@G4aca G4acf@G4aca) (set! G4c7c@G4ac9@&undefined-rcd G4ac9@&undefined-rcd) (set! G4c7b@G4ac7@&undefined-rtd G4ac7@&undefined-rtd) (set! G4c7a@G4ac5@undefined-violation? G4ac5@undefined-violation?) (set! G4c79@G4ac3@make-undefined-violation G4ac3@make-undefined-violation) (set! G4c78@G4ac1@p? G4ac1@p?) (set! G4c77@G4abe@G4ab6 G4abe@G4ab6) (set! G4c76@G4abc@G4ab7 G4abc@G4ab7) (set! G4c75@G4aba@G4ab5 G4aba@G4ab5) (set! G4c74@G4ab4@&syntax-rcd G4ab4@&syntax-rcd) (set! G4c73@G4ab2@&syntax-rtd G4ab2@&syntax-rtd) (set! G4c72@G4ab0@syntax-violation-subform G4ab0@syntax-violation-subform) (set! G4c71@G4aae@syntax-violation-form G4aae@syntax-violation-form) (set! G4c70@G4aac@syntax-violation? G4aac@syntax-violation?) (set! G4c6f@G4aaa@G4a97 G4aaa@G4a97) (set! G4c6e@G4aa8@G4a96 G4aa8@G4a96) (set! G4c6d@G4aa6@make-syntax-violation G4aa6@make-syntax-violation) (set! G4c6c@G4aa4@p? G4aa4@p?) (set! G4c6b@G4aa1@G4a99 G4aa1@G4a99) (set! G4c6a@G4a9f@G4a9a G4a9f@G4a9a) (set! G4c69@G4a9d@G4a98 G4a9d@G4a98) (set! G4c68@G4a95@&lexical-rcd G4a95@&lexical-rcd) (set! G4c67@G4a93@&lexical-rtd G4a93@&lexical-rtd) (set! G4c66@G4a91@lexical-violation? G4a91@lexical-violation?) (set! G4c65@G4a8f@make-lexical-violation G4a8f@make-lexical-violation) (set! G4c64@G4a8d@p? G4a8d@p?) (set! G4c63@G4a8a@G4a82 G4a8a@G4a82) (set! G4c62@G4a88@G4a83 G4a88@G4a83) (set! G4c61@G4a86@G4a81 G4a86@G4a81) (set! G4c60@G4a80@&implementation-restriction-rcd G4a80@&implementation-restriction-rcd) (set! G4c5f@G4a7e@&implementation-restriction-rtd G4a7e@&implementation-restriction-rtd) (set! G4c5e@G4a7c@implementation-restriction-violation? G4a7c@implementation-restriction-violation?) (set! G4c5d@G4a7a@make-implementation-restriction-violation G4a7a@make-implementation-restriction-violation) (set! G4c5c@G4a78@p? G4a78@p?) (set! G4c5b@G4a75@G4a6d G4a75@G4a6d) (set! G4c5a@G4a73@G4a6e G4a73@G4a6e) (set! G4c59@G4a71@G4a6c G4a71@G4a6c) (set! G4c58@G4a6b@&non-continuable-rcd G4a6b@&non-continuable-rcd) (set! G4c57@G4a69@&non-continuable-rtd G4a69@&non-continuable-rtd) (set! G4c56@G4a67@non-continuable-violation? G4a67@non-continuable-violation?) (set! G4c55@G4a65@make-non-continuable-violation G4a65@make-non-continuable-violation) (set! G4c54@G4a63@p? G4a63@p?) (set! G4c53@G4a60@G4a58 G4a60@G4a58) (set! G4c52@G4a5e@G4a59 G4a5e@G4a59) (set! G4c51@G4a5c@G4a57 G4a5c@G4a57) (set! G4c50@G4a56@&who-rcd G4a56@&who-rcd) (set! G4c4f@G4a54@&who-rtd G4a54@&who-rtd) (set! G4c4e@G4a52@condition-who G4a52@condition-who) (set! G4c4d@G4a50@who-condition? G4a50@who-condition?) (set! G4c4c@G4a4e@G4a3d G4a4e@G4a3d) (set! G4c4b@G4a4c@make-who-condition G4a4c@make-who-condition) (set! G4c4a@G4a4a@p? G4a4a@p?) (set! G4c49@G4a47@G4a3f G4a47@G4a3f) (set! G4c48@G4a45@G4a40 G4a45@G4a40) (set! G4c47@G4a43@G4a3e G4a43@G4a3e) (set! G4c46@G4a3c@&irritants-rcd G4a3c@&irritants-rcd) (set! G4c45@G4a3a@&irritants-rtd G4a3a@&irritants-rtd) (set! G4c44@G4a38@condition-irritants G4a38@condition-irritants) (set! G4c43@G4a36@irritants-condition? G4a36@irritants-condition?) (set! G4c42@G4a34@G4a23 G4a34@G4a23) (set! G4c41@G4a32@make-irritants-condition G4a32@make-irritants-condition) (set! G4c40@G4a30@p? G4a30@p?) (set! G4c3f@G4a2d@G4a25 G4a2d@G4a25) (set! G4c3e@G4a2b@G4a26 G4a2b@G4a26) (set! G4c3d@G4a29@G4a24 G4a29@G4a24) (set! G4c3c@G4a22@&assertion-rcd G4a22@&assertion-rcd) (set! G4c3b@G4a20@&assertion-rtd G4a20@&assertion-rtd) (set! G4c3a@G4a1e@assertion-violation? G4a1e@assertion-violation?) (set! G4c39@G4a1c@make-assertion-violation G4a1c@make-assertion-violation) (set! G4c38@G4a1a@p? G4a1a@p?) (set! G4c37@G4a17@G4a0f G4a17@G4a0f) (set! G4c36@G4a15@G4a10 G4a15@G4a10) (set! G4c35@G4a13@G4a0e G4a13@G4a0e) (set! G4c34@G4a0d@&violation-rcd G4a0d@&violation-rcd) (set! G4c33@G4a0b@&violation-rtd G4a0b@&violation-rtd) (set! G4c32@G4a09@violation? G4a09@violation?) (set! G4c31@G4a07@make-violation G4a07@make-violation) (set! G4c30@G4a05@p? G4a05@p?) (set! G4c2f@G4a02@G49fa G4a02@G49fa) (set! G4c2e@G4a00@G49fb G4a00@G49fb) (set! G4c2d@G49fe@G49f9 G49fe@G49f9) (set! G4c2c@G49f8@&error-rcd G49f8@&error-rcd) (set! G4c2b@G49f6@&error-rtd G49f6@&error-rtd) (set! G4c2a@G49f4@error? G49f4@error?) (set! G4c29@G49f2@make-error G49f2@make-error) (set! G4c28@G49f0@p? G49f0@p?) (set! G4c27@G49ed@G49e5 G49ed@G49e5) (set! G4c26@G49eb@G49e6 G49eb@G49e6) (set! G4c25@G49e9@G49e4 G49e9@G49e4) (set! G4c24@G49e3@&serious-rcd G49e3@&serious-rcd) (set! G4c23@G49e1@&serious-rtd G49e1@&serious-rtd) (set! G4c22@G49df@serious-condition? G49df@serious-condition?) (set! G4c21@G49dd@make-serious-condition G49dd@make-serious-condition) (set! G4c20@G49db@p? G49db@p?) (set! G4c1f@G49d8@G49d0 G49d8@G49d0) (set! G4c1e@G49d6@G49d1 G49d6@G49d1) (set! G4c1d@G49d4@G49cf G49d4@G49cf) (set! G4c1c@G49ce@&warning-rcd G49ce@&warning-rcd) (set! G4c1b@G49cc@&warning-rtd G49cc@&warning-rtd) (set! G4c1a@G49ca@warning? G49ca@warning?) (set! G4c19@G49c8@make-warning G49c8@make-warning) (set! G4c18@G49c6@p? G49c6@p?) (set! G4c17@G49c3@G49bb G49c3@G49bb) (set! G4c16@G49c1@G49bc G49c1@G49bc) (set! G4c15@G49bf@G49ba G49bf@G49ba) (set! G4c14@G49b9@&message-rcd G49b9@&message-rcd) (set! G4c13@G49b7@&message-rtd G49b7@&message-rtd) (set! G4c12@G49b5@condition-message G49b5@condition-message) (set! G4c11@G49b3@message-condition? G49b3@message-condition?) (set! G4c10@G49b1@G49a0 G49b1@G49a0) (set! G4c0f@G49af@make-message-condition G49af@make-message-condition) (set! G4c0e@G49ad@p? G49ad@p?) (set! G4c0d@G49aa@G49a2 G49aa@G49a2) (set! G4c0c@G49a8@G49a3 G49a8@G49a3) (set! G4c0b@G49a6@G49a1 G49a6@G49a1) (set! G4c0a@G495c@&condition-rcd G495c@&condition-rcd) (set! G4c09@G495a@&condition-rtd G495a@&condition-rtd) (set! G4c08@G4958@make-&condition G4958@make-&condition) (set! G4c07@G4956@&condition? G4956@&condition?) (set! G4c06@G4953@G494b G4953@G494b) (set! G4c05@G4951@G494c G4951@G494c) (set! G4c04@G494f@G494a G494f@G494a)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2944@G28f9@current-primitive-locations (lambda (G50d1@x) ((lambda (G50d3@t) (if G50d3@t (cdr G50d3@t) '#f)) (assq G50d1@x '((&no-nans-rcd . G4cf4@G4c03@&no-nans-rcd) (&no-nans-rtd . G4cf3@G4c01@&no-nans-rtd) (&no-infinities-rcd . G4cec@G4bee@&no-infinities-rcd) (&no-infinities-rtd . G4ceb@G4bec@&no-infinities-rtd) (&i/o-encoding-rcd . G4ce4@G4bd9@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4ce3@G4bd7@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4cda@G4bbf@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4cd9@G4bbd@&i/o-decoding-rtd) (&i/o-port-rcd . G4cd2@G4baa@&i/o-port-rcd) (&i/o-port-rtd . G4cd1@G4ba8@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cc8@G4b90@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cc7@G4b8e@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cc0@G4b7b@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cbf@G4b79@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cb8@G4b66@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cb7@G4b64@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cb0@G4b51@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4caf@G4b4f@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4ca8@G4b3c@&i/o-filename-rcd) (&i/o-filename-rtd . G4ca7@G4b3a@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4c9e@G4b22@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4c9d@G4b20@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c94@G4b08@&i/o-write-rcd) (&i/o-write-rtd . G4c93@G4b06@&i/o-write-rtd) (&i/o-read-rcd . G4c8c@G4af3@&i/o-read-rcd) (&i/o-read-rtd . G4c8b@G4af1@&i/o-read-rtd) (&i/o-rcd . G4c84@G4ade@&i/o-rcd) (&i/o-rtd . G4c83@G4adc@&i/o-rtd) (&undefined-rcd . G4c7c@G4ac9@&undefined-rcd) (&undefined-rtd . G4c7b@G4ac7@&undefined-rtd) (&syntax-rcd . G4c74@G4ab4@&syntax-rcd) (&syntax-rtd . G4c73@G4ab2@&syntax-rtd) (&lexical-rcd . G4c68@G4a95@&lexical-rcd) (&lexical-rtd . G4c67@G4a93@&lexical-rtd) (&implementation-restriction-rcd . G4c60@G4a80@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c5f@G4a7e@&implementation-restriction-rtd) (&non-continuable-rcd . G4c58@G4a6b@&non-continuable-rcd) (&non-continuable-rtd . G4c57@G4a69@&non-continuable-rtd) (&who-rcd . G4c50@G4a56@&who-rcd) (&who-rtd . G4c4f@G4a54@&who-rtd) (&irritants-rcd . G4c46@G4a3c@&irritants-rcd) (&irritants-rtd . G4c45@G4a3a@&irritants-rtd) (&assertion-rcd . G4c3c@G4a22@&assertion-rcd) (&assertion-rtd . G4c3b@G4a20@&assertion-rtd) (&violation-rcd . G4c34@G4a0d@&violation-rcd) (&violation-rtd . G4c33@G4a0b@&violation-rtd) (&error-rcd . G4c2c@G49f8@&error-rcd) (&error-rtd . G4c2b@G49f6@&error-rtd) (&serious-rcd . G4c24@G49e3@&serious-rcd) (&serious-rtd . G4c23@G49e1@&serious-rtd) (&warning-rcd . G4c1c@G49ce@&warning-rcd) (&warning-rtd . G4c1b@G49cc@&warning-rtd) (&message-rcd . G4c14@G49b9@&message-rcd) (&message-rtd . G4c13@G49b7@&message-rtd) (&condition-rcd . G4c0a@G495c@&condition-rcd) (&condition-rtd . G4c09@G495a@&condition-rtd) (syntax-error . G493c@G303d@syntax-error) (syntax-dispatch . G48d0@G2f56@syntax-dispatch) (load . G4dc6@G4d0a@load) (interaction-environment . G4944@G304d@interaction-environment) (make-parameter . G28f3@G2829@make-parameter) (make-variable-transformer . G488e@G2d91@make-variable-transformer) (identifier? . G493f@G3043@identifier?) (generate-temporaries . G4935@G302f@generate-temporaries) (free-identifier=? . G4936@G3031@free-identifier=?) (syntax->datum . G4941@G3047@syntax->datum) (datum->syntax . G4940@G3045@datum->syntax) (bound-identifier=? . G4937@G3033@bound-identifier=?) (make-i/o-write-error . G4c91@G4b02@make-i/o-write-error) (make-i/o-read-error . G4c89@G4aed@make-i/o-read-error) (make-i/o-port-error . G4ccd@G4ba0@make-i/o-port-error) (make-i/o-invalid-position-error . G4c99@G4b18@make-i/o-invalid-position-error) (make-i/o-filename-error . G4ca3@G4b32@make-i/o-filename-error) (make-i/o-file-protection-error . G4cad@G4b4b@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cb5@G4b60@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cc5@G4b8a@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cbd@G4b75@make-i/o-file-already-exists-error) (make-i/o-error . G4c81@G4ad8@make-i/o-error) (make-i/o-encoding-error . G4cdf@G4bcf@make-i/o-encoding-error) (make-i/o-decoding-error . G4cd7@G4bb9@make-i/o-decoding-error) (i/o-write-error? . G4c92@G4b04@i/o-write-error?) (i/o-read-error? . G4c8a@G4aef@i/o-read-error?) (i/o-port-error? . G4ccf@G4ba4@i/o-port-error?) (i/o-invalid-position-error? . G4c9b@G4b1c@i/o-invalid-position-error?) (i/o-filename-error? . G4ca5@G4b36@i/o-filename-error?) (i/o-file-protection-error? . G4cae@G4b4d@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cb6@G4b62@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cc6@G4b8c@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cbe@G4b77@i/o-file-already-exists-error?) (i/o-error? . G4c82@G4ada@i/o-error?) (i/o-error-position . G4c9c@G4b1e@i/o-error-position) (i/o-error-port . G4cd0@G4ba6@i/o-error-port) (i/o-error-filename . G4ca6@G4b38@i/o-error-filename) (i/o-encoding-error? . G4ce1@G4bd3@i/o-encoding-error?) (i/o-encoding-error-char . G4ce2@G4bd5@i/o-encoding-error-char) (i/o-decoding-error? . G4cd8@G4bbb@i/o-decoding-error?) (scheme-report-environment . G492c@G301d@scheme-report-environment) (null-environment . G492b@G301b@null-environment) (command-line . G4dc3@G4d04@command-line) (eval . G492e@G3021@eval) (environment . G492a@G3019@environment) (who-condition? . G4c4d@G4a50@who-condition?) (warning? . G4c1a@G49ca@warning?) (violation? . G4c32@G4a09@violation?) (undefined-violation? . G4c7a@G4ac5@undefined-violation?) (syntax-violation? . G4c70@G4aac@syntax-violation?) (syntax-violation-subform . G4c72@G4ab0@syntax-violation-subform) (syntax-violation-form . G4c71@G4aae@syntax-violation-form) (syntax-violation . G493e@G3041@syntax-violation) (serious-condition? . G4c22@G49df@serious-condition?) (non-continuable-violation? . G4c56@G4a67@non-continuable-violation?) (message-condition? . G4c11@G49b3@message-condition?) (make-who-condition . G4c4b@G4a4c@make-who-condition) (make-warning . G4c19@G49c8@make-warning) (make-violation . G4c31@G4a07@make-violation) (make-undefined-violation . G4c79@G4ac3@make-undefined-violation) (make-syntax-violation . G4c6d@G4aa6@make-syntax-violation) (make-serious-condition . G4c21@G49dd@make-serious-condition) (make-non-continuable-violation . G4c55@G4a65@make-non-continuable-violation) (make-message-condition . G4c0f@G49af@make-message-condition) (make-lexical-violation . G4c65@G4a8f@make-lexical-violation) (make-irritants-condition . G4c41@G4a32@make-irritants-condition) (make-implementation-restriction-violation . G4c5d@G4a7a@make-implementation-restriction-violation) (make-error . G4c29@G49f2@make-error) (make-assertion-violation . G4c39@G4a1c@make-assertion-violation) (lexical-violation? . G4c66@G4a91@lexical-violation?) (irritants-condition? . G4c43@G4a36@irritants-condition?) (implementation-restriction-violation? . G4c5e@G4a7c@implementation-restriction-violation?) (error? . G4c2a@G49f4@error?) (condition-who . G4c4e@G4a52@condition-who) (condition-message . G4c12@G49b5@condition-message) (condition-irritants . G4c44@G4a38@condition-irritants) (assertion-violation? . G4c3a@G4a1e@assertion-violation?) (no-nans-violation? . G4cf2@G4bff@no-nans-violation?) (no-infinities-violation? . G4cea@G4bea@no-infinities-violation?) (make-no-nans-violation . G4cf1@G4bfd@make-no-nans-violation) (make-no-infinities-violation . G4ce9@G4be8@make-no-infinities-violation)))))) (G2b6c@G2a11@install-library 'G50a4 '(mosh interaction) '() '() '() '() '((format . G5075) (string-split . G506a) (call-process . G5064) (%spawn . G5060) (%waitpid . G505f) (%fork . G505e) (%pipe . G505d) (string-upcase . G504d) (string-titlecase . G504c) (string-normalize-nfkd . G504b) (string-normalize-nfkc . G504a) (string-normalize-nfd . G5049) (string-normalize-nfc . G5048) (string-foldcase . G5047) (string-downcase . G5046) (string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-title-case? . G503e) (char-numeric? . G503d) (char-lower-case? . G503c) (char-general-category . G503b) (char-upcase . G503a) (char-titlecase . G5039) (char-foldcase . G5038) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031) (make-variable-transformer . G2d90) (identifier? . G3042) (generate-temporaries . G302e) (free-identifier=? . G3030) (syntax->datum . G3046) (datum->syntax . G3044) (bound-identifier=? . G3032) (record-type-descriptor? . G5030) (record-predicate . G502f) (record-mutator . G502e) (record-constructor . G502d) (record-accessor . G502c) (make-record-type-descriptor . G502b) (make-record-constructor-descriptor . G502a) (record? . G5029) (record-type-uid . G5028) (record-type-sealed? . G5027) (record-type-parent . G5026) (record-type-opaque? . G5025) (record-type-name . G5024) (record-type-generative? . G5023) (record-type-field-names . G5022) (record-rtd . G5021) (record-field-mutable? . G5020) (delete-file . G501f) (file-exists? . G501e) (vector-sort! . G501d) (vector-sort . G501c) (list-sort . G501b) (symbol-hash . G501a) (string-ci-hash . G5019) (string-hash . G5018) (equal-hash . G5017) (hashtable-equivalence-function . G5016) (make-hashtable . G5015) (hashtable-hash-function . G5014) (make-eqv-hashtable . G5013) (make-eq-hashtable . G5012) (hashtable? . G5011) (hashtable-update! . G5010) (hashtable-size . G500f) (hashtable-set! . G500e) (hashtable-ref . G500d) (hashtable-mutable? . G500c) (hashtable-keys . G500b) (hashtable-entries . G500a) (hashtable-delete! . G5009) (hashtable-copy . G5008) (hashtable-contains? . G5007) (hashtable-clear! . G5006) (call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (utf-8-codec . G4fef) (utf-16-codec . G4fee) (transcoder-error-handling-mode . G4fed) (transcoder-eol-style . G4fec) (transcoder-codec . G4feb) (transcoded-port . G4fea) (textual-port? . G4fe9) (string->bytevector . G4fe8) (standard-output-port . G4fe7) (standard-input-port . G4fe6) (standard-error-port . G4fe5) (set-port-position! . G4fe4) (put-u8 . G4fe3) (put-string . G4fe2) (put-datum . G4fe1) (put-char . G4fe0) (put-bytevector . G4fdf) (port? . G4fde) (port-transcoder . G4fdd) (port-position . G4fdc) (port-has-set-port-position!? . G4fdb) (port-has-port-position? . G4fda) (port-eof? . G4fd9) (output-port-buffer-mode . G4fd8) (open-string-output-port . G4fd7) (open-string-input-port . G4fd6) (open-file-output-port . G4fd5) (open-file-input/output-port . G4fd4) (open-file-input-port . G4fd3) (open-bytevector-output-port . G4fd2) (open-bytevector-input-port . G4fd1) (native-transcoder . G4fd0) (native-eol-style . G4fcf) (make-transcoder . G4fce) (latin-1-codec . G4fcd) (make-i/o-write-error . G4b01) (make-i/o-read-error . G4aec) (make-i/o-port-error . G4b9f) (make-i/o-invalid-position-error . G4b17) (make-i/o-filename-error . G4b31) (make-i/o-file-protection-error . G4b4a) (make-i/o-file-is-read-only-error . G4b5f) (make-i/o-file-does-not-exist-error . G4b89) (make-i/o-file-already-exists-error . G4b74) (make-i/o-error . G4ad7) (make-i/o-encoding-error . G4bce) (make-i/o-decoding-error . G4bb8) (make-custom-textual-output-port . G4fcc) (make-custom-textual-input/output-port . G4fcb) (make-custom-textual-input-port . G4fca) (make-custom-binary-output-port . G4fc9) (make-custom-binary-input/output-port . G4fc8) (make-custom-binary-input-port . G4fc7) (make-bytevector . G4fc6) (lookahead-u8 . G4fc5) (lookahead-char . G4fc4) (i/o-write-error? . G4b03) (i/o-read-error? . G4aee) (i/o-port-error? . G4ba3) (i/o-invalid-position-error? . G4b1b) (i/o-filename-error? . G4b35) (i/o-file-protection-error? . G4b4c) (i/o-file-is-read-only-error? . G4b61) (i/o-file-does-not-exist-error? . G4b8b) (i/o-file-already-exists-error? . G4b76) (i/o-error? . G4ad9) (i/o-error-position . G4b1d) (i/o-error-port . G4ba5) (i/o-error-filename . G4b37) (i/o-encoding-error? . G4bd2) (i/o-encoding-error-char . G4bd4) (i/o-decoding-error? . G4bba) (get-u8 . G4fc3) (get-string-n! . G4fc2) (get-string-n . G4fc1) (get-string-all . G4fc0) (get-line . G4fbf) (get-datum . G4fbe) (get-char . G4fbd) (get-bytevector-some . G4fbc) (get-bytevector-n! . G4fbb) (get-bytevector-n . G4fba) (get-bytevector-all . G4fb9) (flush-output-port . G4fb8) (close-port . G4fb7) (exit . G4faf) (command-line . G4d03) (string-fill! . G4fae) (string-set! . G4fad) (set-cdr! . G4fac) (set-car! . G4fab) (remove . G4faa) (remv . G4fa9) (remp . G4fa8) (remq . G4fa7) (partition . G4fa6) (memv . G4fa5) (memq . G4fa4) (memp . G4fa3) (member . G4fa2) (exists . G4fa1) (for-all . G4fa0) (fold-right . G4f9f) (fold-left . G4f9e) (find . G4f9d) (filter . G4f9c) (cons* . G4f9b) (assv . G4f9a) (assq . G4f99) (assp . G4f98) (assoc . G4f97) (call-with-string-output-port . G4f96) (call-with-port . G4f95) (call-with-bytevector-output-port . G4f94) (bytevector->string . G4f93) (buffer-mode? . G4f92) (binary-port? . G4f91) (with-exception-handler . G4f90) (raise-continuable . G4f8f) (raise . G4f8e) (eval . G3020) (environment . G3018) (make-enumeration . G4f8d) (enum-set=? . G4f8c) (enum-set-universe . G4f8b) (enum-set-union . G4f8a) (enum-set-subset? . G4f89) (enum-set-projection . G4f88) (enum-set-member? . G4f87) (enum-set-intersection . G4f86) (enum-set-indexer . G4f85) (enum-set-difference . G4f84) (enum-set-constructor . G4f83) (enum-set-complement . G4f82) (enum-set->list . G4f81) (who-condition? . G4a4f) (warning? . G49c9) (violation? . G4a08) (undefined-violation? . G4ac4) (syntax-violation? . G4aab) (syntax-violation-subform . G4aaf) (syntax-violation-form . G4aad) (syntax-violation . G3040) (simple-conditions . G4f80) (serious-condition? . G49de) (non-continuable-violation? . G4a66) (message-condition? . G49b2) (make-who-condition . G4a4b) (make-warning . G49c7) (make-violation . G4a06) (make-undefined-violation . G4ac2) (make-syntax-violation . G4aa5) (make-serious-condition . G49dc) (make-non-continuable-violation . G4a64) (make-message-condition . G49ae) (make-lexical-violation . G4a8e) (make-irritants-condition . G4a31) (make-implementation-restriction-violation . G4a79) (make-error . G49f1) (make-assertion-violation . G4a1b) (lexical-violation? . G4a90) (irritants-condition? . G4a35) (implementation-restriction-violation? . G4a7b) (error? . G49f3) (condition-who . G4a51) (condition-predicate . G4f7f) (condition-message . G49b4) (condition-irritants . G4a37) (condition-accessor . G4f7e) (condition . G4f7d) (assertion-violation? . G4a1d) (condition? . G4f7c) (utf32->string . G4f7b) (utf16->string . G4f7a) (utf8->string . G4f79) (uint-list->bytevector . G4f78) (u8-list->bytevector . G4f77) (string->utf8 . G4f76) (string->utf32 . G4f75) (string->utf16 . G4f74) (sint-list->bytevector . G4f73) (native-endianness . G4f72) (bytevector? . G4f71) (bytevector=? . G4f70) (bytevector-uint-set! . G4f6f) (bytevector-uint-ref . G4f6e) (bytevector-u8-set! . G4f6d) (bytevector-u8-ref . G4f6c) (bytevector-u64-set! . G4f6b) (bytevector-u64-ref . G4f6a) (bytevector-u64-native-set! . G4f69) (bytevector-u64-native-ref . G4f68) (bytevector-u32-set! . G4f67) (bytevector-u32-ref . G4f66) (bytevector-u32-native-set! . G4f65) (bytevector-u32-native-ref . G4f64) (bytevector-u16-set! . G4f63) (bytevector-u16-ref . G4f62) (bytevector-u16-native-set! . G4f61) (bytevector-u16-native-ref . G4f60) (bytevector-sint-set! . G4f5f) (bytevector-sint-ref . G4f5e) (bytevector-s8-set! . G4f5d) (bytevector-s8-ref . G4f5c) (bytevector-s64-set! . G4f5b) (bytevector-s64-ref . G4f5a) (bytevector-s64-native-set! . G4f59) (bytevector-s64-native-ref . G4f58) (bytevector-s32-set! . G4f57) (bytevector-s32-ref . G4f56) (bytevector-s32-native-set! . G4f55) (bytevector-s32-native-ref . G4f54) (bytevector-s16-set! . G4f53) (bytevector-s16-ref . G4f52) (bytevector-s16-native-set! . G4f51) (bytevector-s16-native-ref . G4f50) (bytevector-length . G4f4f) (bytevector-ieee-single-ref . G4f4e) (bytevector-ieee-single-set! . G4f4d) (bytevector-ieee-single-native-set! . G4f4c) (bytevector-ieee-single-native-ref . G4f4b) (bytevector-ieee-double-set! . G4f4a) (bytevector-ieee-double-ref . G4f49) (bytevector-ieee-double-native-set! . G4f48) (bytevector-ieee-double-native-ref . G4f47) (bytevector-fill! . G4f46) (bytevector-copy! . G4f45) (bytevector-copy . G4f44) (bytevector->uint-list . G4f43) (bytevector->u8-list . G4f42) (bytevector->sint-list . G4f41) (no-nans-violation? . G4bfe) (no-infinities-violation? . G4be9) (make-no-nans-violation . G4bfc) (make-no-infinities-violation . G4be7) (real->flonum . G4f40) (flzero? . G4f3f) (fltruncate . G4f3e) (fltan . G4f3d) (flsqrt . G4f3c) (flsin . G4f3b) (flround . G4f3a) (flpositive? . G4f39) (flonum? . G4f38) (flodd? . G4f37) (flnumerator . G4f36) (flnegative? . G4f35) (flnan? . G4f34) (flmod0 . G4f33) (flmod . G4f32) (flmin . G4f31) (flmax . G4f30) (fllog . G4f2f) (flinteger? . G4f2e) (flinfinite? . G4f2d) (flfloor . G4f2c) (flfinite? . G4f2b) (flexpt . G4f2a) (flexp . G4f29) (fleven? . G4f28) (fldiv0-and-mod0 . G4f27) (fldiv0 . G4f26) (fldiv-and-mod . G4f25) (fldiv . G4f24) (fldenominator . G4f23) (flcos . G4f22) (flceiling . G4f21) (flatan . G4f20) (flasin . G4f1f) (flacos . G4f1e) (flabs . G4f1d) (fl>? . G4f1c) (fl>=? . G4f1b) (fl=? . G4f1a) (fl<? . G4f19) (fl<=? . G4f18) (fl/ . G4f17) (fl- . G4f16) (fl+ . G4f15) (fl* . G4f14) (fixnum->flonum . G4f13) (fxzero? . G4f12) (fxxor . G4f11) (fxrotate-bit-field . G4f10) (fxreverse-bit-field . G4f0f) (fxpositive? . G4f0e) (fxodd? . G4f0d) (fxnot . G4f0c) (fxnegative? . G4f0b) (fxmod0 . G4f0a) (fxmod . G4f09) (fxmin . G4f08) (fxmax . G4f07) (fxlength . G4f06) (fxior . G4f05) (fxif . G4f04) (fxfirst-bit-set . G4f03) (fxeven? . G4f02) (fxdiv0-and-mod0 . G4f01) (fxdiv0 . G4f00) (fxdiv-and-mod . G4eff) (fxdiv . G4efe) (fxcopy-bit-field . G4efd) (fxcopy-bit . G4efc) (fxbit-set? . G4efb) (fxbit-field . G4efa) (fxbit-count . G4ef9) (fxarithmetic-shift-right . G4ef8) (fxarithmetic-shift-left . G4ef7) (fxarithmetic-shift . G4ef6) (fxand . G4ef5) (fx>? . G4ef4) (fx>=? . G4ef3) (fx=? . G4ef2) (fx<? . G4ef1) (fx<=? . G4ef0) (fx-/carry . G4eef) (fx- . G4eee) (fx+/carry . G4eed) (fx+ . G4eec) (fx*/carry . G4eeb) (fx* . G4eea) (greatest-fixnum . G4ee9) (least-fixnum . G4ee8) (fixnum-width . G4ee7) (fixnum? . G4ee6) (bitwise-rotate-bit-field . G4ee5) (bitwise-reverse-bit-field . G4ee4) (bitwise-length . G4ee3) (bitwise-if . G4ee2) (bitwise-first-bit-set . G4ee1) (bitwise-copy-bit-field . G4ee0) (bitwise-copy-bit . G4edf) (bitwise-bit-set? . G4ede) (bitwise-bit-field . G4edd) (bitwise-bit-count . G4edc) (bitwise-xor . G4edb) (bitwise-ior . G4eda) (bitwise-and . G4ed9) (bitwise-not . G4ed8) (bitwise-arithmetic-shift-right . G4ed7) (bitwise-arithmetic-shift-left . G4ed6) (bitwise-arithmetic-shift . G4ed5) (zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-map . G4ed0) (vector-length . G4ecf) (vector-for-each . G4ece) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol=? . G4ec6) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-for-each . G4ebb) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-valued? . G4eaf) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (rational-valued? . G4eab) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (null? . G4ea3) (not . G4ea2) (negative? . G4ea1) (nan? . G4ea0) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer-valued? . G4e8d) (integer->char . G4e8c) (infinite? . G4e8b) (inexact? . G4e8a) (inexact . G4e89) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (finite? . G4e84) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (exact-integer-sqrt . G4e80) (exact . G4e7f) (even? . G4e7e) (error . G4e7d) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (div0-and-mod0 . G4e78) (mod0 . G4e77) (div0 . G4e76) (div-and-mod . G4e75) (mod . G4e74) (div . G4e73) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call/cc . G4e65) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (boolean=? . G4e44) (atan . G4e43) (assertion-violation . G4e42) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (library . G4e32) (export . G4e31) (&no-nans . G4e30) (&no-infinities . G4e2f) (&i/o-encoding . G4e2e) (&i/o-decoding . G4e2d) (&i/o-port . G4e2c) (&i/o-file-does-not-exist . G4e2b) (&i/o-file-already-exists . G4e2a) (&i/o-file-is-read-only . G4e29) (&i/o-file-protection . G4e28) (&i/o-filename . G4e27) (&i/o-invalid-position . G4e26) (&i/o-write . G4e25) (&i/o-read . G4e24) (&i/o . G4e23) (&undefined . G4e22) (&syntax . G4e21) (&lexical . G4e20) (&implementation-restriction . G4e1f) (&non-continuable . G4e1e) (&who . G4e1d) (&irritants . G4e1c) (&assertion . G4e1b) (&violation . G4e1a) (&error . G4e19) (&serious . G4e18) (&warning . G4e17) (&message . G4e16) (&condition . G4e15) (define-condition-type . G4e14) (define-enumeration . G4e13) (define-record-type . G4e12) (parent-rtd . G4e11) (nongenerative . G4e10) (opaque . G4e0f) (sealed . G4e0e) (protocol . G4e0d) (parent . G4e0c) (immutable . G4e0b) (mutable . G4e0a) (fields . G4e09) (error-handling-mode . G4e08) (file-options . G4e07) (buffer-mode . G4e06) (eol-style . G4e05) (guard . G4e04) (unsyntax-splicing . G4e01) (unsyntax . G4e00) (unquote-splicing . G4dff) (unquote . G4dfe) (_ . G4dfd) (else . G4dfc) (=> . G4dfb) (... . G4dfa) (assert . G4df9) (endianness . G4df8) (do . G4df5) (cond . G4df4) (let* . G4df3) (let . G4df2) (let*-values . G4df1) (let-values . G4df0) (identifier-syntax . G4def) (with-syntax . G4dee) (quasisyntax . G4ded) (quasiquote . G4dec) (syntax-rules . G4deb) (include . G4dea) (record-constructor-descriptor . G4de8) (record-type-descriptor . G4de7) (case . G4de6) (unless . G4de4) (when . G4de3) (or . G4de2) (and . G4de1) (if . G4de0) (letrec* . G4ddf) (letrec . G4dde) (case-lambda . G4ddc) (lambda . G4ddb) (syntax . G4dda) (syntax-case . G4dd9) (quote . G4dd8) (letrec-syntax . G4dd6) (let-syntax . G4dd5) (set! . G4dd4) (import . G4dd3) (begin . G4dd2) (define-syntax . G4dd0) (define . G4dcf)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50a5 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fb0) (unquote-splicing . G4dff) (unquote . G4dfe) (_ . G4dfd) (else . G4dfc) (=> . G4dfb) (... . G4dfa) (delay . G4df7) (do . G4df5) (cond . G4df4) (let* . G4df3) (let . G4df2) (quasiquote . G4dec) (syntax-rules . G4deb) (case . G4de6) (or . G4de2) (and . G4de1) (if . G4de0) (letrec . G4dde) (lambda . G4ddb) (quote . G4dd8) (letrec-syntax . G4dd6) (let-syntax . G4dd5) (set! . G4dd4) (begin . G4dd2) (define-syntax . G4dd0) (define . G4dcf)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50a6 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-numeric? . G503d) (char-lower-case? . G503c) (char-upcase . G503a) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031) (call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object . G4ff5) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (scheme-report-environment . G301c) (quotient . G4fb6) (null-environment . G301a) (remainder . G4fb5) (modulo . G4fb4) (inexact->exact . G4fb3) (force . G4fb2) (exact->inexact . G4fb1) (make-promise . G4fb0) (string-fill! . G4fae) (string-set! . G4fad) (set-cdr! . G4fac) (set-car! . G4fab) (memv . G4fa5) (memq . G4fa4) (member . G4fa2) (assv . G4f9a) (assq . G4f99) (assoc . G4f97) (eval . G3020) (zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-length . G4ecf) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (not . G4ea2) (negative? . G4ea1) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer->char . G4e8c) (inexact? . G4e8a) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (even? . G4e7e) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (atan . G4e43) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (unquote-splicing . G4dff) (unquote . G4dfe) (else . G4dfc) (=> . G4dfb) (... . G4dfa) (delay . G4df7) (do . G4df5) (cond . G4df4) (let* . G4df3) (let . G4df2) (quasiquote . G4dec) (syntax-rules . G4deb) (case . G4de6) (or . G4de2) (and . G4de1) (if . G4de0) (letrec . G4dde) (lambda . G4ddb) (quote . G4dd8) (letrec-syntax . G4dd6) (let-syntax . G4dd5) (set! . G4dd4) (begin . G4dd2) (define-syntax . G4dd0) (define . G4dcf)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50a7 '(psyntax modules) '() '() '() '() '((module . G4dd1)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50a8 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50a9 '(rnrs) '(6) '() '() '() '((regexp? . G509c) (string-upcase . G504d) (string-titlecase . G504c) (string-normalize-nfkd . G504b) (string-normalize-nfkc . G504a) (string-normalize-nfd . G5049) (string-normalize-nfc . G5048) (string-foldcase . G5047) (string-downcase . G5046) (string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-title-case? . G503e) (char-numeric? . G503d) (char-lower-case? . G503c) (char-general-category . G503b) (char-upcase . G503a) (char-titlecase . G5039) (char-foldcase . G5038) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031) (make-variable-transformer . G2d90) (identifier? . G3042) (generate-temporaries . G302e) (free-identifier=? . G3030) (syntax->datum . G3046) (datum->syntax . G3044) (bound-identifier=? . G3032) (record-type-descriptor? . G5030) (record-predicate . G502f) (record-mutator . G502e) (record-constructor . G502d) (record-accessor . G502c) (make-record-type-descriptor . G502b) (make-record-constructor-descriptor . G502a) (record? . G5029) (record-type-uid . G5028) (record-type-sealed? . G5027) (record-type-parent . G5026) (record-type-opaque? . G5025) (record-type-name . G5024) (record-type-generative? . G5023) (record-type-field-names . G5022) (record-rtd . G5021) (record-field-mutable? . G5020) (delete-file . G501f) (file-exists? . G501e) (vector-sort! . G501d) (vector-sort . G501c) (list-sort . G501b) (symbol-hash . G501a) (string-ci-hash . G5019) (string-hash . G5018) (equal-hash . G5017) (hashtable-equivalence-function . G5016) (make-hashtable . G5015) (hashtable-hash-function . G5014) (make-eqv-hashtable . G5013) (make-eq-hashtable . G5012) (hashtable? . G5011) (hashtable-update! . G5010) (hashtable-size . G500f) (hashtable-set! . G500e) (hashtable-ref . G500d) (hashtable-mutable? . G500c) (hashtable-keys . G500b) (hashtable-entries . G500a) (hashtable-delete! . G5009) (hashtable-copy . G5008) (hashtable-contains? . G5007) (hashtable-clear! . G5006) (call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (utf-8-codec . G4fef) (utf-16-codec . G4fee) (transcoder-error-handling-mode . G4fed) (transcoder-eol-style . G4fec) (transcoder-codec . G4feb) (transcoded-port . G4fea) (textual-port? . G4fe9) (string->bytevector . G4fe8) (standard-output-port . G4fe7) (standard-input-port . G4fe6) (standard-error-port . G4fe5) (set-port-position! . G4fe4) (put-u8 . G4fe3) (put-string . G4fe2) (put-datum . G4fe1) (put-char . G4fe0) (put-bytevector . G4fdf) (port? . G4fde) (port-transcoder . G4fdd) (port-position . G4fdc) (port-has-set-port-position!? . G4fdb) (port-has-port-position? . G4fda) (port-eof? . G4fd9) (output-port-buffer-mode . G4fd8) (open-string-output-port . G4fd7) (open-string-input-port . G4fd6) (open-file-output-port . G4fd5) (open-file-input/output-port . G4fd4) (open-file-input-port . G4fd3) (open-bytevector-output-port . G4fd2) (open-bytevector-input-port . G4fd1) (native-transcoder . G4fd0) (native-eol-style . G4fcf) (make-transcoder . G4fce) (latin-1-codec . G4fcd) (make-i/o-write-error . G4b01) (make-i/o-read-error . G4aec) (make-i/o-port-error . G4b9f) (make-i/o-invalid-position-error . G4b17) (make-i/o-filename-error . G4b31) (make-i/o-file-protection-error . G4b4a) (make-i/o-file-is-read-only-error . G4b5f) (make-i/o-file-does-not-exist-error . G4b89) (make-i/o-file-already-exists-error . G4b74) (make-i/o-error . G4ad7) (make-i/o-encoding-error . G4bce) (make-i/o-decoding-error . G4bb8) (make-custom-textual-output-port . G4fcc) (make-custom-textual-input/output-port . G4fcb) (make-custom-textual-input-port . G4fca) (make-custom-binary-output-port . G4fc9) (make-custom-binary-input/output-port . G4fc8) (make-custom-binary-input-port . G4fc7) (make-bytevector . G4fc6) (lookahead-u8 . G4fc5) (lookahead-char . G4fc4) (i/o-write-error? . G4b03) (i/o-read-error? . G4aee) (i/o-port-error? . G4ba3) (i/o-invalid-position-error? . G4b1b) (i/o-filename-error? . G4b35) (i/o-file-protection-error? . G4b4c) (i/o-file-is-read-only-error? . G4b61) (i/o-file-does-not-exist-error? . G4b8b) (i/o-file-already-exists-error? . G4b76) (i/o-error? . G4ad9) (i/o-error-position . G4b1d) (i/o-error-port . G4ba5) (i/o-error-filename . G4b37) (i/o-encoding-error? . G4bd2) (i/o-encoding-error-char . G4bd4) (i/o-decoding-error? . G4bba) (get-u8 . G4fc3) (get-string-n! . G4fc2) (get-string-n . G4fc1) (get-string-all . G4fc0) (get-line . G4fbf) (get-datum . G4fbe) (get-char . G4fbd) (get-bytevector-some . G4fbc) (get-bytevector-n! . G4fbb) (get-bytevector-n . G4fba) (get-bytevector-all . G4fb9) (flush-output-port . G4fb8) (close-port . G4fb7) (exit . G4faf) (command-line . G4d03) (remove . G4faa) (remv . G4fa9) (remp . G4fa8) (remq . G4fa7) (partition . G4fa6) (memv . G4fa5) (memq . G4fa4) (memp . G4fa3) (member . G4fa2) (exists . G4fa1) (for-all . G4fa0) (fold-right . G4f9f) (fold-left . G4f9e) (find . G4f9d) (filter . G4f9c) (cons* . G4f9b) (assv . G4f9a) (assq . G4f99) (assp . G4f98) (assoc . G4f97) (call-with-string-output-port . G4f96) (call-with-port . G4f95) (call-with-bytevector-output-port . G4f94) (bytevector->string . G4f93) (buffer-mode? . G4f92) (binary-port? . G4f91) (with-exception-handler . G4f90) (raise-continuable . G4f8f) (raise . G4f8e) (make-enumeration . G4f8d) (enum-set=? . G4f8c) (enum-set-universe . G4f8b) (enum-set-union . G4f8a) (enum-set-subset? . G4f89) (enum-set-projection . G4f88) (enum-set-member? . G4f87) (enum-set-intersection . G4f86) (enum-set-indexer . G4f85) (enum-set-difference . G4f84) (enum-set-constructor . G4f83) (enum-set-complement . G4f82) (enum-set->list . G4f81) (who-condition? . G4a4f) (warning? . G49c9) (violation? . G4a08) (undefined-violation? . G4ac4) (syntax-violation? . G4aab) (syntax-violation-subform . G4aaf) (syntax-violation-form . G4aad) (syntax-violation . G3040) (simple-conditions . G4f80) (serious-condition? . G49de) (non-continuable-violation? . G4a66) (message-condition? . G49b2) (make-who-condition . G4a4b) (make-warning . G49c7) (make-violation . G4a06) (make-undefined-violation . G4ac2) (make-syntax-violation . G4aa5) (make-serious-condition . G49dc) (make-non-continuable-violation . G4a64) (make-message-condition . G49ae) (make-lexical-violation . G4a8e) (make-irritants-condition . G4a31) (make-implementation-restriction-violation . G4a79) (make-error . G49f1) (make-assertion-violation . G4a1b) (lexical-violation? . G4a90) (irritants-condition? . G4a35) (implementation-restriction-violation? . G4a7b) (error? . G49f3) (condition-who . G4a51) (condition-predicate . G4f7f) (condition-message . G49b4) (condition-irritants . G4a37) (condition-accessor . G4f7e) (condition . G4f7d) (assertion-violation? . G4a1d) (condition? . G4f7c) (utf32->string . G4f7b) (utf16->string . G4f7a) (utf8->string . G4f79) (uint-list->bytevector . G4f78) (u8-list->bytevector . G4f77) (string->utf8 . G4f76) (string->utf32 . G4f75) (string->utf16 . G4f74) (sint-list->bytevector . G4f73) (native-endianness . G4f72) (bytevector? . G4f71) (bytevector=? . G4f70) (bytevector-uint-set! . G4f6f) (bytevector-uint-ref . G4f6e) (bytevector-u8-set! . G4f6d) (bytevector-u8-ref . G4f6c) (bytevector-u64-set! . G4f6b) (bytevector-u64-ref . G4f6a) (bytevector-u64-native-set! . G4f69) (bytevector-u64-native-ref . G4f68) (bytevector-u32-set! . G4f67) (bytevector-u32-ref . G4f66) (bytevector-u32-native-set! . G4f65) (bytevector-u32-native-ref . G4f64) (bytevector-u16-set! . G4f63) (bytevector-u16-ref . G4f62) (bytevector-u16-native-set! . G4f61) (bytevector-u16-native-ref . G4f60) (bytevector-sint-set! . G4f5f) (bytevector-sint-ref . G4f5e) (bytevector-s8-set! . G4f5d) (bytevector-s8-ref . G4f5c) (bytevector-s64-set! . G4f5b) (bytevector-s64-ref . G4f5a) (bytevector-s64-native-set! . G4f59) (bytevector-s64-native-ref . G4f58) (bytevector-s32-set! . G4f57) (bytevector-s32-ref . G4f56) (bytevector-s32-native-set! . G4f55) (bytevector-s32-native-ref . G4f54) (bytevector-s16-set! . G4f53) (bytevector-s16-ref . G4f52) (bytevector-s16-native-set! . G4f51) (bytevector-s16-native-ref . G4f50) (bytevector-length . G4f4f) (bytevector-ieee-single-ref . G4f4e) (bytevector-ieee-single-set! . G4f4d) (bytevector-ieee-single-native-set! . G4f4c) (bytevector-ieee-single-native-ref . G4f4b) (bytevector-ieee-double-set! . G4f4a) (bytevector-ieee-double-ref . G4f49) (bytevector-ieee-double-native-set! . G4f48) (bytevector-ieee-double-native-ref . G4f47) (bytevector-fill! . G4f46) (bytevector-copy! . G4f45) (bytevector-copy . G4f44) (bytevector->uint-list . G4f43) (bytevector->u8-list . G4f42) (bytevector->sint-list . G4f41) (no-nans-violation? . G4bfe) (no-infinities-violation? . G4be9) (make-no-nans-violation . G4bfc) (make-no-infinities-violation . G4be7) (real->flonum . G4f40) (flzero? . G4f3f) (fltruncate . G4f3e) (fltan . G4f3d) (flsqrt . G4f3c) (flsin . G4f3b) (flround . G4f3a) (flpositive? . G4f39) (flonum? . G4f38) (flodd? . G4f37) (flnumerator . G4f36) (flnegative? . G4f35) (flnan? . G4f34) (flmod0 . G4f33) (flmod . G4f32) (flmin . G4f31) (flmax . G4f30) (fllog . G4f2f) (flinteger? . G4f2e) (flinfinite? . G4f2d) (flfloor . G4f2c) (flfinite? . G4f2b) (flexpt . G4f2a) (flexp . G4f29) (fleven? . G4f28) (fldiv0-and-mod0 . G4f27) (fldiv0 . G4f26) (fldiv-and-mod . G4f25) (fldiv . G4f24) (fldenominator . G4f23) (flcos . G4f22) (flceiling . G4f21) (flatan . G4f20) (flasin . G4f1f) (flacos . G4f1e) (flabs . G4f1d) (fl>? . G4f1c) (fl>=? . G4f1b) (fl=? . G4f1a) (fl<? . G4f19) (fl<=? . G4f18) (fl/ . G4f17) (fl- . G4f16) (fl+ . G4f15) (fl* . G4f14) (fixnum->flonum . G4f13) (fxzero? . G4f12) (fxxor . G4f11) (fxrotate-bit-field . G4f10) (fxreverse-bit-field . G4f0f) (fxpositive? . G4f0e) (fxodd? . G4f0d) (fxnot . G4f0c) (fxnegative? . G4f0b) (fxmod0 . G4f0a) (fxmod . G4f09) (fxmin . G4f08) (fxmax . G4f07) (fxlength . G4f06) (fxior . G4f05) (fxif . G4f04) (fxfirst-bit-set . G4f03) (fxeven? . G4f02) (fxdiv0-and-mod0 . G4f01) (fxdiv0 . G4f00) (fxdiv-and-mod . G4eff) (fxdiv . G4efe) (fxcopy-bit-field . G4efd) (fxcopy-bit . G4efc) (fxbit-set? . G4efb) (fxbit-field . G4efa) (fxbit-count . G4ef9) (fxarithmetic-shift-right . G4ef8) (fxarithmetic-shift-left . G4ef7) (fxarithmetic-shift . G4ef6) (fxand . G4ef5) (fx>? . G4ef4) (fx>=? . G4ef3) (fx=? . G4ef2) (fx<? . G4ef1) (fx<=? . G4ef0) (fx-/carry . G4eef) (fx- . G4eee) (fx+/carry . G4eed) (fx+ . G4eec) (fx*/carry . G4eeb) (fx* . G4eea) (greatest-fixnum . G4ee9) (least-fixnum . G4ee8) (fixnum-width . G4ee7) (fixnum? . G4ee6) (bitwise-rotate-bit-field . G4ee5) (bitwise-reverse-bit-field . G4ee4) (bitwise-length . G4ee3) (bitwise-if . G4ee2) (bitwise-first-bit-set . G4ee1) (bitwise-copy-bit-field . G4ee0) (bitwise-copy-bit . G4edf) (bitwise-bit-set? . G4ede) (bitwise-bit-field . G4edd) (bitwise-bit-count . G4edc) (bitwise-xor . G4edb) (bitwise-ior . G4eda) (bitwise-and . G4ed9) (bitwise-not . G4ed8) (bitwise-arithmetic-shift-right . G4ed7) (bitwise-arithmetic-shift-left . G4ed6) (bitwise-arithmetic-shift . G4ed5) (zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-map . G4ed0) (vector-length . G4ecf) (vector-for-each . G4ece) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol=? . G4ec6) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-for-each . G4ebb) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-valued? . G4eaf) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (rational-valued? . G4eab) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (null? . G4ea3) (not . G4ea2) (negative? . G4ea1) (nan? . G4ea0) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer-valued? . G4e8d) (integer->char . G4e8c) (infinite? . G4e8b) (inexact? . G4e8a) (inexact . G4e89) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (finite? . G4e84) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (exact-integer-sqrt . G4e80) (exact . G4e7f) (even? . G4e7e) (error . G4e7d) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (div0-and-mod0 . G4e78) (mod0 . G4e77) (div0 . G4e76) (div-and-mod . G4e75) (mod . G4e74) (div . G4e73) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call/cc . G4e65) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (boolean=? . G4e44) (atan . G4e43) (assertion-violation . G4e42) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (&no-nans . G4e30) (&no-infinities . G4e2f) (&i/o-encoding . G4e2e) (&i/o-decoding . G4e2d) (&i/o-port . G4e2c) (&i/o-file-does-not-exist . G4e2b) (&i/o-file-already-exists . G4e2a) (&i/o-file-is-read-only . G4e29) (&i/o-file-protection . G4e28) (&i/o-filename . G4e27) (&i/o-invalid-position . G4e26) (&i/o-write . G4e25) (&i/o-read . G4e24) (&i/o . G4e23) (&undefined . G4e22) (&syntax . G4e21) (&lexical . G4e20) (&implementation-restriction . G4e1f) (&non-continuable . G4e1e) (&who . G4e1d) (&irritants . G4e1c) (&assertion . G4e1b) (&violation . G4e1a) (&error . G4e19) (&serious . G4e18) (&warning . G4e17) (&message . G4e16) (&condition . G4e15) (define-condition-type . G4e14) (define-enumeration . G4e13) (define-record-type . G4e12) (parent-rtd . G4e11) (nongenerative . G4e10) (opaque . G4e0f) (sealed . G4e0e) (protocol . G4e0d) (parent . G4e0c) (immutable . G4e0b) (mutable . G4e0a) (fields . G4e09) (error-handling-mode . G4e08) (file-options . G4e07) (buffer-mode . G4e06) (eol-style . G4e05) (guard . G4e04) (unsyntax-splicing . G4e01) (unsyntax . G4e00) (unquote-splicing . G4dff) (unquote . G4dfe) (_ . G4dfd) (else . G4dfc) (=> . G4dfb) (... . G4dfa) (assert . G4df9) (endianness . G4df8) (do . G4df5) (cond . G4df4) (let* . G4df3) (let . G4df2) (let*-values . G4df1) (let-values . G4df0) (identifier-syntax . G4def) (with-syntax . G4dee) (quasisyntax . G4ded) (quasiquote . G4dec) (syntax-rules . G4deb) (record-constructor-descriptor . G4de8) (record-type-descriptor . G4de7) (case . G4de6) (unless . G4de4) (when . G4de3) (or . G4de2) (and . G4de1) (if . G4de0) (letrec* . G4ddf) (letrec . G4dde) (case-lambda . G4ddc) (lambda . G4ddb) (syntax . G4dda) (syntax-case . G4dd9) (quote . G4dd8) (letrec-syntax . G4dd6) (let-syntax . G4dd5) (set! . G4dd4) (begin . G4dd2) (define-syntax . G4dd0) (define . G4dcf)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50aa '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G301c) (quotient . G4fb6) (null-environment . G301a) (remainder . G4fb5) (modulo . G4fb4) (inexact->exact . G4fb3) (force . G4fb2) (exact->inexact . G4fb1) (make-promise . G4fb0) (delay . G4df7)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50ab '(rnrs control) '(6) '() '() '() '((do . G4df5) (unless . G4de4) (when . G4de3) (case-lambda . G4ddc)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50ac '(rnrs eval) '(6) '() '() '() '((eval . G3020) (environment . G3018)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50ad '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fac) (set-car! . G4fab)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50ae '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fae) (string-set! . G4fad)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50af '(rnrs programs) '(6) '() '() '() '((exit . G4faf) (command-line . G4d03)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b0 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d90) (identifier? . G3042) (generate-temporaries . G302e) (free-identifier=? . G3030) (syntax->datum . G3046) (datum->syntax . G3044) (bound-identifier=? . G3032) (syntax-violation . G3040) (unsyntax-splicing . G4e01) (unsyntax . G4e00) (_ . G4dfd) (... . G4dfa) (with-syntax . G4dee) (quasisyntax . G4ded) (syntax . G4dda) (syntax-case . G4dd9)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b1 '(rnrs files) '(6) '() '() '() '((delete-file . G501f) (file-exists? . G501e) (make-i/o-write-error . G4b01) (make-i/o-read-error . G4aec) (make-i/o-port-error . G4b9f) (make-i/o-invalid-position-error . G4b17) (make-i/o-filename-error . G4b31) (make-i/o-file-protection-error . G4b4a) (make-i/o-file-is-read-only-error . G4b5f) (make-i/o-file-does-not-exist-error . G4b89) (make-i/o-file-already-exists-error . G4b74) (make-i/o-error . G4ad7) (i/o-write-error? . G4b03) (i/o-read-error? . G4aee) (i/o-port-error? . G4ba3) (i/o-invalid-position-error? . G4b1b) (i/o-filename-error? . G4b35) (i/o-file-protection-error? . G4b4c) (i/o-file-is-read-only-error? . G4b61) (i/o-file-does-not-exist-error? . G4b8b) (i/o-file-already-exists-error? . G4b76) (i/o-error? . G4ad9) (i/o-error-position . G4b1d) (i/o-error-port . G4ba5) (i/o-error-filename . G4b37) (&i/o-port . G4e2c) (&i/o-file-does-not-exist . G4e2b) (&i/o-file-already-exists . G4e2a) (&i/o-file-is-read-only . G4e29) (&i/o-file-protection . G4e28) (&i/o-filename . G4e27) (&i/o-invalid-position . G4e26) (&i/o-write . G4e25) (&i/o-read . G4e24) (&i/o . G4e23)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b2 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G501d) (vector-sort . G501c) (list-sort . G501b)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b3 '(rnrs base) '(6) '() '() '() '((zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-map . G4ed0) (vector-length . G4ecf) (vector-for-each . G4ece) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol=? . G4ec6) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-for-each . G4ebb) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-valued? . G4eaf) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (rational-valued? . G4eab) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (null? . G4ea3) (not . G4ea2) (negative? . G4ea1) (nan? . G4ea0) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer-valued? . G4e8d) (integer->char . G4e8c) (infinite? . G4e8b) (inexact? . G4e8a) (inexact . G4e89) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (finite? . G4e84) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (exact-integer-sqrt . G4e80) (exact . G4e7f) (even? . G4e7e) (error . G4e7d) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (div0-and-mod0 . G4e78) (mod0 . G4e77) (div0 . G4e76) (div-and-mod . G4e75) (mod . G4e74) (div . G4e73) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call/cc . G4e65) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (boolean=? . G4e44) (atan . G4e43) (assertion-violation . G4e42) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (unquote-splicing . G4dff) (unquote . G4dfe) (_ . G4dfd) (else . G4dfc) (=> . G4dfb) (... . G4dfa) (assert . G4df9) (cond . G4df4) (let* . G4df3) (let . G4df2) (let*-values . G4df1) (let-values . G4df0) (identifier-syntax . G4def) (quasiquote . G4dec) (syntax-rules . G4deb) (case . G4de6) (or . G4de2) (and . G4de1) (if . G4de0) (letrec* . G4ddf) (letrec . G4dde) (lambda . G4ddb) (quote . G4dd8) (letrec-syntax . G4dd6) (let-syntax . G4dd5) (set! . G4dd4) (begin . G4dd2) (define-syntax . G4dd0) (define . G4dcf)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b4 '(rnrs lists) '(6) '() '() '() '((remove . G4faa) (remv . G4fa9) (remp . G4fa8) (remq . G4fa7) (partition . G4fa6) (memv . G4fa5) (memq . G4fa4) (memp . G4fa3) (member . G4fa2) (exists . G4fa1) (for-all . G4fa0) (fold-right . G4f9f) (fold-left . G4f9e) (find . G4f9d) (filter . G4f9c) (cons* . G4f9b) (assv . G4f9a) (assq . G4f99) (assp . G4f98) (assoc . G4f97)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b5 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (make-i/o-write-error . G4b01) (make-i/o-read-error . G4aec) (make-i/o-port-error . G4b9f) (make-i/o-invalid-position-error . G4b17) (make-i/o-filename-error . G4b31) (make-i/o-file-protection-error . G4b4a) (make-i/o-file-is-read-only-error . G4b5f) (make-i/o-file-does-not-exist-error . G4b89) (make-i/o-file-already-exists-error . G4b74) (make-i/o-error . G4ad7) (i/o-write-error? . G4b03) (i/o-read-error? . G4aee) (i/o-port-error? . G4ba3) (i/o-invalid-position-error? . G4b1b) (i/o-filename-error? . G4b35) (i/o-file-protection-error? . G4b4c) (i/o-file-is-read-only-error? . G4b61) (i/o-file-does-not-exist-error? . G4b8b) (i/o-file-already-exists-error? . G4b76) (i/o-error? . G4ad9) (i/o-error-position . G4b1d) (i/o-error-port . G4ba5) (i/o-error-filename . G4b37) (&i/o-port . G4e2c) (&i/o-file-does-not-exist . G4e2b) (&i/o-file-already-exists . G4e2a) (&i/o-file-is-read-only . G4e29) (&i/o-file-protection . G4e28) (&i/o-filename . G4e27) (&i/o-invalid-position . G4e26) (&i/o-write . G4e25) (&i/o-read . G4e24) (&i/o . G4e23)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b6 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fc6) (utf32->string . G4f7b) (utf16->string . G4f7a) (utf8->string . G4f79) (uint-list->bytevector . G4f78) (u8-list->bytevector . G4f77) (string->utf8 . G4f76) (string->utf32 . G4f75) (string->utf16 . G4f74) (sint-list->bytevector . G4f73) (native-endianness . G4f72) (bytevector? . G4f71) (bytevector=? . G4f70) (bytevector-uint-set! . G4f6f) (bytevector-uint-ref . G4f6e) (bytevector-u8-set! . G4f6d) (bytevector-u8-ref . G4f6c) (bytevector-u64-set! . G4f6b) (bytevector-u64-ref . G4f6a) (bytevector-u64-native-set! . G4f69) (bytevector-u64-native-ref . G4f68) (bytevector-u32-set! . G4f67) (bytevector-u32-ref . G4f66) (bytevector-u32-native-set! . G4f65) (bytevector-u32-native-ref . G4f64) (bytevector-u16-set! . G4f63) (bytevector-u16-ref . G4f62) (bytevector-u16-native-set! . G4f61) (bytevector-u16-native-ref . G4f60) (bytevector-sint-set! . G4f5f) (bytevector-sint-ref . G4f5e) (bytevector-s8-set! . G4f5d) (bytevector-s8-ref . G4f5c) (bytevector-s64-set! . G4f5b) (bytevector-s64-ref . G4f5a) (bytevector-s64-native-set! . G4f59) (bytevector-s64-native-ref . G4f58) (bytevector-s32-set! . G4f57) (bytevector-s32-ref . G4f56) (bytevector-s32-native-set! . G4f55) (bytevector-s32-native-ref . G4f54) (bytevector-s16-set! . G4f53) (bytevector-s16-ref . G4f52) (bytevector-s16-native-set! . G4f51) (bytevector-s16-native-ref . G4f50) (bytevector-length . G4f4f) (bytevector-ieee-single-ref . G4f4e) (bytevector-ieee-single-set! . G4f4d) (bytevector-ieee-single-native-set! . G4f4c) (bytevector-ieee-single-native-ref . G4f4b) (bytevector-ieee-double-set! . G4f4a) (bytevector-ieee-double-ref . G4f49) (bytevector-ieee-double-native-set! . G4f48) (bytevector-ieee-double-native-ref . G4f47) (bytevector-fill! . G4f46) (bytevector-copy! . G4f45) (bytevector-copy . G4f44) (bytevector->uint-list . G4f43) (bytevector->u8-list . G4f42) (bytevector->sint-list . G4f41) (endianness . G4df8)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b7 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G504d) (string-titlecase . G504c) (string-normalize-nfkd . G504b) (string-normalize-nfkc . G504a) (string-normalize-nfd . G5049) (string-normalize-nfc . G5048) (string-foldcase . G5047) (string-downcase . G5046) (string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-title-case? . G503e) (char-numeric? . G503d) (char-lower-case? . G503c) (char-general-category . G503b) (char-upcase . G503a) (char-titlecase . G5039) (char-foldcase . G5038) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b8 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f90) (raise-continuable . G4f8f) (raise . G4f8e) (guard . G4e04) (else . G4dfc) (=> . G4dfb)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50b9 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ee5) (bitwise-reverse-bit-field . G4ee4) (bitwise-length . G4ee3) (bitwise-if . G4ee2) (bitwise-first-bit-set . G4ee1) (bitwise-copy-bit-field . G4ee0) (bitwise-copy-bit . G4edf) (bitwise-bit-set? . G4ede) (bitwise-bit-field . G4edd) (bitwise-bit-count . G4edc) (bitwise-xor . G4edb) (bitwise-ior . G4eda) (bitwise-and . G4ed9) (bitwise-not . G4ed8) (bitwise-arithmetic-shift-right . G4ed7) (bitwise-arithmetic-shift-left . G4ed6) (bitwise-arithmetic-shift . G4ed5)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50ba '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f12) (fxxor . G4f11) (fxrotate-bit-field . G4f10) (fxreverse-bit-field . G4f0f) (fxpositive? . G4f0e) (fxodd? . G4f0d) (fxnot . G4f0c) (fxnegative? . G4f0b) (fxmod0 . G4f0a) (fxmod . G4f09) (fxmin . G4f08) (fxmax . G4f07) (fxlength . G4f06) (fxior . G4f05) (fxif . G4f04) (fxfirst-bit-set . G4f03) (fxeven? . G4f02) (fxdiv0-and-mod0 . G4f01) (fxdiv0 . G4f00) (fxdiv-and-mod . G4eff) (fxdiv . G4efe) (fxcopy-bit-field . G4efd) (fxcopy-bit . G4efc) (fxbit-set? . G4efb) (fxbit-field . G4efa) (fxbit-count . G4ef9) (fxarithmetic-shift-right . G4ef8) (fxarithmetic-shift-left . G4ef7) (fxarithmetic-shift . G4ef6) (fxand . G4ef5) (fx>? . G4ef4) (fx>=? . G4ef3) (fx=? . G4ef2) (fx<? . G4ef1) (fx<=? . G4ef0) (fx-/carry . G4eef) (fx- . G4eee) (fx+/carry . G4eed) (fx+ . G4eec) (fx*/carry . G4eeb) (fx* . G4eea) (greatest-fixnum . G4ee9) (least-fixnum . G4ee8) (fixnum-width . G4ee7) (fixnum? . G4ee6)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50bb '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4bfe) (no-infinities-violation? . G4be9) (make-no-nans-violation . G4bfc) (make-no-infinities-violation . G4be7) (real->flonum . G4f40) (flzero? . G4f3f) (fltruncate . G4f3e) (fltan . G4f3d) (flsqrt . G4f3c) (flsin . G4f3b) (flround . G4f3a) (flpositive? . G4f39) (flonum? . G4f38) (flodd? . G4f37) (flnumerator . G4f36) (flnegative? . G4f35) (flnan? . G4f34) (flmod0 . G4f33) (flmod . G4f32) (flmin . G4f31) (flmax . G4f30) (fllog . G4f2f) (flinteger? . G4f2e) (flinfinite? . G4f2d) (flfloor . G4f2c) (flfinite? . G4f2b) (flexpt . G4f2a) (flexp . G4f29) (fleven? . G4f28) (fldiv0-and-mod0 . G4f27) (fldiv0 . G4f26) (fldiv-and-mod . G4f25) (fldiv . G4f24) (fldenominator . G4f23) (flcos . G4f22) (flceiling . G4f21) (flatan . G4f20) (flasin . G4f1f) (flacos . G4f1e) (flabs . G4f1d) (fl>? . G4f1c) (fl>=? . G4f1b) (fl=? . G4f1a) (fl<? . G4f19) (fl<=? . G4f18) (fl/ . G4f17) (fl- . G4f16) (fl+ . G4f15) (fl* . G4f14) (fixnum->flonum . G4f13) (&no-nans . G4e30) (&no-infinities . G4e2f)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50bc '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G501a) (string-ci-hash . G5019) (string-hash . G5018) (equal-hash . G5017) (hashtable-equivalence-function . G5016) (make-hashtable . G5015) (hashtable-hash-function . G5014) (make-eqv-hashtable . G5013) (make-eq-hashtable . G5012) (hashtable? . G5011) (hashtable-update! . G5010) (hashtable-size . G500f) (hashtable-set! . G500e) (hashtable-ref . G500d) (hashtable-mutable? . G500c) (hashtable-keys . G500b) (hashtable-entries . G500a) (hashtable-delete! . G5009) (hashtable-copy . G5008) (hashtable-contains? . G5007) (hashtable-clear! . G5006)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50bd '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (utf-8-codec . G4fef) (utf-16-codec . G4fee) (transcoder-error-handling-mode . G4fed) (transcoder-eol-style . G4fec) (transcoder-codec . G4feb) (transcoded-port . G4fea) (textual-port? . G4fe9) (string->bytevector . G4fe8) (standard-output-port . G4fe7) (standard-input-port . G4fe6) (standard-error-port . G4fe5) (set-port-position! . G4fe4) (put-u8 . G4fe3) (put-string . G4fe2) (put-datum . G4fe1) (put-char . G4fe0) (put-bytevector . G4fdf) (port? . G4fde) (port-transcoder . G4fdd) (port-position . G4fdc) (port-has-set-port-position!? . G4fdb) (port-has-port-position? . G4fda) (port-eof? . G4fd9) (output-port-buffer-mode . G4fd8) (open-string-output-port . G4fd7) (open-string-input-port . G4fd6) (open-file-output-port . G4fd5) (open-file-input/output-port . G4fd4) (open-file-input-port . G4fd3) (open-bytevector-output-port . G4fd2) (open-bytevector-input-port . G4fd1) (native-transcoder . G4fd0) (native-eol-style . G4fcf) (make-transcoder . G4fce) (latin-1-codec . G4fcd) (make-i/o-write-error . G4b01) (make-i/o-read-error . G4aec) (make-i/o-port-error . G4b9f) (make-i/o-invalid-position-error . G4b17) (make-i/o-filename-error . G4b31) (make-i/o-file-protection-error . G4b4a) (make-i/o-file-is-read-only-error . G4b5f) (make-i/o-file-does-not-exist-error . G4b89) (make-i/o-file-already-exists-error . G4b74) (make-i/o-error . G4ad7) (make-i/o-encoding-error . G4bce) (make-i/o-decoding-error . G4bb8) (make-custom-textual-output-port . G4fcc) (make-custom-textual-input/output-port . G4fcb) (make-custom-textual-input-port . G4fca) (make-custom-binary-output-port . G4fc9) (make-custom-binary-input/output-port . G4fc8) (make-custom-binary-input-port . G4fc7) (lookahead-u8 . G4fc5) (lookahead-char . G4fc4) (i/o-write-error? . G4b03) (i/o-read-error? . G4aee) (i/o-port-error? . G4ba3) (i/o-invalid-position-error? . G4b1b) (i/o-filename-error? . G4b35) (i/o-file-protection-error? . G4b4c) (i/o-file-is-read-only-error? . G4b61) (i/o-file-does-not-exist-error? . G4b8b) (i/o-file-already-exists-error? . G4b76) (i/o-error? . G4ad9) (i/o-error-position . G4b1d) (i/o-error-port . G4ba5) (i/o-error-filename . G4b37) (i/o-encoding-error? . G4bd2) (i/o-encoding-error-char . G4bd4) (i/o-decoding-error? . G4bba) (get-u8 . G4fc3) (get-string-n! . G4fc2) (get-string-n . G4fc1) (get-string-all . G4fc0) (get-line . G4fbf) (get-datum . G4fbe) (get-char . G4fbd) (get-bytevector-some . G4fbc) (get-bytevector-n! . G4fbb) (get-bytevector-n . G4fba) (get-bytevector-all . G4fb9) (flush-output-port . G4fb8) (close-port . G4fb7) (call-with-string-output-port . G4f96) (call-with-port . G4f95) (call-with-bytevector-output-port . G4f94) (bytevector->string . G4f93) (buffer-mode? . G4f92) (binary-port? . G4f91) (&i/o-encoding . G4e2e) (&i/o-decoding . G4e2d) (&i/o-port . G4e2c) (&i/o-file-does-not-exist . G4e2b) (&i/o-file-already-exists . G4e2a) (&i/o-file-is-read-only . G4e29) (&i/o-file-protection . G4e28) (&i/o-filename . G4e27) (&i/o-invalid-position . G4e26) (&i/o-write . G4e25) (&i/o-read . G4e24) (&i/o . G4e23) (error-handling-mode . G4e08) (file-options . G4e07) (buffer-mode . G4e06) (eol-style . G4e05)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50be '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f8d) (enum-set=? . G4f8c) (enum-set-universe . G4f8b) (enum-set-union . G4f8a) (enum-set-subset? . G4f89) (enum-set-projection . G4f88) (enum-set-member? . G4f87) (enum-set-intersection . G4f86) (enum-set-indexer . G4f85) (enum-set-difference . G4f84) (enum-set-constructor . G4f83) (enum-set-complement . G4f82) (enum-set->list . G4f81) (define-enumeration . G4e13)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50bf '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a4f) (warning? . G49c9) (violation? . G4a08) (undefined-violation? . G4ac4) (syntax-violation? . G4aab) (syntax-violation-subform . G4aaf) (syntax-violation-form . G4aad) (syntax-violation . G3040) (simple-conditions . G4f80) (serious-condition? . G49de) (non-continuable-violation? . G4a66) (message-condition? . G49b2) (make-who-condition . G4a4b) (make-warning . G49c7) (make-violation . G4a06) (make-undefined-violation . G4ac2) (make-syntax-violation . G4aa5) (make-serious-condition . G49dc) (make-non-continuable-violation . G4a64) (make-message-condition . G49ae) (make-lexical-violation . G4a8e) (make-irritants-condition . G4a31) (make-implementation-restriction-violation . G4a79) (make-error . G49f1) (make-assertion-violation . G4a1b) (lexical-violation? . G4a90) (irritants-condition? . G4a35) (implementation-restriction-violation? . G4a7b) (error? . G49f3) (condition-who . G4a51) (condition-predicate . G4f7f) (condition-message . G49b4) (condition-irritants . G4a37) (condition-accessor . G4f7e) (condition . G4f7d) (assertion-violation? . G4a1d) (condition? . G4f7c) (&undefined . G4e22) (&syntax . G4e21) (&lexical . G4e20) (&implementation-restriction . G4e1f) (&non-continuable . G4e1e) (&who . G4e1d) (&irritants . G4e1c) (&assertion . G4e1b) (&violation . G4e1a) (&error . G4e19) (&serious . G4e18) (&warning . G4e17) (&message . G4e16) (&condition . G4e15) (define-condition-type . G4e14)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50c0 '(rnrs records inspection) '(6) '() '() '() '((record? . G5029) (record-type-uid . G5028) (record-type-sealed? . G5027) (record-type-parent . G5026) (record-type-opaque? . G5025) (record-type-name . G5024) (record-type-generative? . G5023) (record-type-field-names . G5022) (record-rtd . G5021) (record-field-mutable? . G5020)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50c1 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5030) (record-predicate . G502f) (record-mutator . G502e) (record-constructor . G502d) (record-accessor . G502c) (make-record-type-descriptor . G502b) (make-record-constructor-descriptor . G502a)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50c2 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e12) (parent-rtd . G4e11) (nongenerative . G4e10) (opaque . G4e0f) (sealed . G4e0e) (protocol . G4e0d) (parent . G4e0c) (immutable . G4e0b) (mutable . G4e0a) (fields . G4e09) (record-constructor-descriptor . G4de8) (record-type-descriptor . G4de7)) '() values values '#f '#f '#t '#f) (G2b6c@G2a11@install-library 'G50c3 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c02) (&no-nans-rtd . G4c00) (&no-infinities-rcd . G4bed) (&no-infinities-rtd . G4beb) (&i/o-encoding-rcd . G4bd8) (&i/o-encoding-rtd . G4bd6) (&i/o-decoding-rcd . G4bbe) (&i/o-decoding-rtd . G4bbc) (&i/o-port-rcd . G4ba9) (&i/o-port-rtd . G4ba7) (&i/o-file-does-not-exist-rcd . G4b8f) (&i/o-file-does-not-exist-rtd . G4b8d) (&i/o-file-already-exists-rcd . G4b7a) (&i/o-file-already-exists-rtd . G4b78) (&i/o-file-is-read-only-rcd . G4b65) (&i/o-file-is-read-only-rtd . G4b63) (&i/o-file-protection-rcd . G4b50) (&i/o-file-protection-rtd . G4b4e) (&i/o-filename-rcd . G4b3b) (&i/o-filename-rtd . G4b39) (&i/o-invalid-position-rcd . G4b21) (&i/o-invalid-position-rtd . G4b1f) (&i/o-write-rcd . G4b07) (&i/o-write-rtd . G4b05) (&i/o-read-rcd . G4af2) (&i/o-read-rtd . G4af0) (&i/o-rcd . G4add) (&i/o-rtd . G4adb) (&undefined-rcd . G4ac8) (&undefined-rtd . G4ac6) (&syntax-rcd . G4ab3) (&syntax-rtd . G4ab1) (&lexical-rcd . G4a94) (&lexical-rtd . G4a92) (&implementation-restriction-rcd . G4a7f) (&implementation-restriction-rtd . G4a7d) (&non-continuable-rcd . G4a6a) (&non-continuable-rtd . G4a68) (&who-rcd . G4a55) (&who-rtd . G4a53) (&irritants-rcd . G4a3b) (&irritants-rtd . G4a39) (&assertion-rcd . G4a21) (&assertion-rtd . G4a1f) (&violation-rcd . G4a0c) (&violation-rtd . G4a0a) (&error-rcd . G49f7) (&error-rtd . G49f5) (&serious-rcd . G49e2) (&serious-rtd . G49e0) (&warning-rcd . G49cd) (&warning-rtd . G49cb) (&message-rcd . G49b8) (&message-rtd . G49b6) (&condition-rcd . G495b) (&condition-rtd . G4959) (syntax-error . G303c) (syntax-dispatch . G2f55) (pretty-print . G50a3) (eval-core . G50a2) (set-symbol-value! . G50a1) (symbol-value . G50a0) (gensym . G509f) (void . G509e) (load . G4d09) (interaction-environment . G304c) (char-ready? . G509d) (regexp? . G509c) (read-line . G509b) (dotted-list? . G509a) (circular-list? . G5099) (proper-list? . G5098) (circular-list . G5097) (last . G5096) (last-pair . G5095) (not-pair? . G5094) (split-at! . G5093) (split-at . G5092) (list= . G5091) (list-copy . G5090) (list-tabulate . G508f) (make-list . G508e) (xcons . G508d) (tenth . G508c) (ninth . G508b) (eighth . G508a) (seventh . G5089) (sixth . G5088) (fifth . G5087) (drop-right! . G5086) (drop-right . G5085) (take-right . G5084) (take! . G5083) (drop . G5082) (take . G5081) (car+cdr . G5080) (third . G507f) (second . G507e) (first . G507d) (iota . G507c) (every . G507b) (ungensym . G507a) (assoc-ref . G5079) (alist-cons . G5078) (append-map . G5077) (print . G5076) (format . G5075) (standard-library-path . G5074) (file-newer? . G5073) (stat-mtime . G5072) (current-directory . G5071) (write-to-file . G5070) (file->list . G506f) (file->string . G506e) (digit->integer . G506d) (call-with-string-input-port . G506c) (call-with-string-io . G506b) (string-split . G506a) (bytevector-for-each . G5069) (string->regexp . G5068) (rxmatch . G5067) (regexp-replace-all . G5066) (hashtable-for-each . G5065) (call-process . G5064) (local-tz-offset . G5063) (microseconds . G5062) (readdir . G5061) (%spawn . G5060) (%waitpid . G505f) (%fork . G505e) (%pipe . G505d) (get-environment-variables . G505c) (get-environment-variable . G505b) (get-timeofday . G505a) (get-command-line . G5059) (sys-display . G5058) (source-info . G5057) (make-compiler-instruction . G5056) (make-instruction . G5055) (set-source-info! . G5054) (bignum? . G5053) (make-complex . G5052) (fast-equal? . G5051) (fasl-read . G5050) (fasl-write . G504f) (receive . G504e) (make-parameter . G2828) (string-upcase . G504d) (string-titlecase . G504c) (string-normalize-nfkd . G504b) (string-normalize-nfkc . G504a) (string-normalize-nfd . G5049) (string-normalize-nfc . G5048) (string-foldcase . G5047) (string-downcase . G5046) (string-ci>? . G5045) (string-ci>=? . G5044) (string-ci=? . G5043) (string-ci<? . G5042) (string-ci<=? . G5041) (char-whitespace? . G5040) (char-upper-case? . G503f) (char-title-case? . G503e) (char-numeric? . G503d) (char-lower-case? . G503c) (char-general-category . G503b) (char-upcase . G503a) (char-titlecase . G5039) (char-foldcase . G5038) (char-downcase . G5037) (char-ci>? . G5036) (char-ci>=? . G5035) (char-ci=? . G5034) (char-ci<? . G5033) (char-ci<=? . G5032) (char-alphabetic? . G5031) (make-variable-transformer . G2d90) (identifier? . G3042) (generate-temporaries . G302e) (free-identifier=? . G3030) (syntax->datum . G3046) (datum->syntax . G3044) (bound-identifier=? . G3032) (record-type-descriptor? . G5030) (record-predicate . G502f) (record-mutator . G502e) (record-constructor . G502d) (record-accessor . G502c) (make-record-type-descriptor . G502b) (make-record-constructor-descriptor . G502a) (record? . G5029) (record-type-uid . G5028) (record-type-sealed? . G5027) (record-type-parent . G5026) (record-type-opaque? . G5025) (record-type-name . G5024) (record-type-generative? . G5023) (record-type-field-names . G5022) (record-rtd . G5021) (record-field-mutable? . G5020) (delete-file . G501f) (file-exists? . G501e) (vector-sort! . G501d) (vector-sort . G501c) (list-sort . G501b) (symbol-hash . G501a) (string-ci-hash . G5019) (string-hash . G5018) (equal-hash . G5017) (hashtable-equivalence-function . G5016) (make-hashtable . G5015) (hashtable-hash-function . G5014) (make-eqv-hashtable . G5013) (make-eq-hashtable . G5012) (hashtable? . G5011) (hashtable-update! . G5010) (hashtable-size . G500f) (hashtable-set! . G500e) (hashtable-ref . G500d) (hashtable-mutable? . G500c) (hashtable-keys . G500b) (hashtable-entries . G500a) (hashtable-delete! . G5009) (hashtable-copy . G5008) (hashtable-contains? . G5007) (hashtable-clear! . G5006) (call-with-output-file . G5005) (call-with-input-file . G5004) (write-char . G5003) (write . G5002) (with-output-to-file . G5001) (with-input-from-file . G5000) (read-char . G4fff) (read . G4ffe) (peek-char . G4ffd) (open-output-file . G4ffc) (open-input-file . G4ffb) (newline . G4ffa) (display . G4ff9) (close-output-port . G4ff8) (close-input-port . G4ff7) (eof-object? . G4ff6) (eof-object . G4ff5) (current-error-port . G4ff4) (current-output-port . G4ff3) (current-input-port . G4ff2) (output-port? . G4ff1) (input-port? . G4ff0) (utf-8-codec . G4fef) (utf-16-codec . G4fee) (transcoder-error-handling-mode . G4fed) (transcoder-eol-style . G4fec) (transcoder-codec . G4feb) (transcoded-port . G4fea) (textual-port? . G4fe9) (string->bytevector . G4fe8) (standard-output-port . G4fe7) (standard-input-port . G4fe6) (standard-error-port . G4fe5) (set-port-position! . G4fe4) (put-u8 . G4fe3) (put-string . G4fe2) (put-datum . G4fe1) (put-char . G4fe0) (put-bytevector . G4fdf) (port? . G4fde) (port-transcoder . G4fdd) (port-position . G4fdc) (port-has-set-port-position!? . G4fdb) (port-has-port-position? . G4fda) (port-eof? . G4fd9) (output-port-buffer-mode . G4fd8) (open-string-output-port . G4fd7) (open-string-input-port . G4fd6) (open-file-output-port . G4fd5) (open-file-input/output-port . G4fd4) (open-file-input-port . G4fd3) (open-bytevector-output-port . G4fd2) (open-bytevector-input-port . G4fd1) (native-transcoder . G4fd0) (native-eol-style . G4fcf) (make-transcoder . G4fce) (latin-1-codec . G4fcd) (make-i/o-write-error . G4b01) (make-i/o-read-error . G4aec) (make-i/o-port-error . G4b9f) (make-i/o-invalid-position-error . G4b17) (make-i/o-filename-error . G4b31) (make-i/o-file-protection-error . G4b4a) (make-i/o-file-is-read-only-error . G4b5f) (make-i/o-file-does-not-exist-error . G4b89) (make-i/o-file-already-exists-error . G4b74) (make-i/o-error . G4ad7) (make-i/o-encoding-error . G4bce) (make-i/o-decoding-error . G4bb8) (make-custom-textual-output-port . G4fcc) (make-custom-textual-input/output-port . G4fcb) (make-custom-textual-input-port . G4fca) (make-custom-binary-output-port . G4fc9) (make-custom-binary-input/output-port . G4fc8) (make-custom-binary-input-port . G4fc7) (make-bytevector . G4fc6) (lookahead-u8 . G4fc5) (lookahead-char . G4fc4) (i/o-write-error? . G4b03) (i/o-read-error? . G4aee) (i/o-port-error? . G4ba3) (i/o-invalid-position-error? . G4b1b) (i/o-filename-error? . G4b35) (i/o-file-protection-error? . G4b4c) (i/o-file-is-read-only-error? . G4b61) (i/o-file-does-not-exist-error? . G4b8b) (i/o-file-already-exists-error? . G4b76) (i/o-error? . G4ad9) (i/o-error-position . G4b1d) (i/o-error-port . G4ba5) (i/o-error-filename . G4b37) (i/o-encoding-error? . G4bd2) (i/o-encoding-error-char . G4bd4) (i/o-decoding-error? . G4bba) (get-u8 . G4fc3) (get-string-n! . G4fc2) (get-string-n . G4fc1) (get-string-all . G4fc0) (get-line . G4fbf) (get-datum . G4fbe) (get-char . G4fbd) (get-bytevector-some . G4fbc) (get-bytevector-n! . G4fbb) (get-bytevector-n . G4fba) (get-bytevector-all . G4fb9) (flush-output-port . G4fb8) (close-port . G4fb7) (scheme-report-environment . G301c) (quotient . G4fb6) (null-environment . G301a) (remainder . G4fb5) (modulo . G4fb4) (inexact->exact . G4fb3) (force . G4fb2) (exact->inexact . G4fb1) (make-promise . G4fb0) (exit . G4faf) (command-line . G4d03) (string-fill! . G4fae) (string-set! . G4fad) (set-cdr! . G4fac) (set-car! . G4fab) (remove . G4faa) (remv . G4fa9) (remp . G4fa8) (remq . G4fa7) (partition . G4fa6) (memv . G4fa5) (memq . G4fa4) (memp . G4fa3) (member . G4fa2) (exists . G4fa1) (for-all . G4fa0) (fold-right . G4f9f) (fold-left . G4f9e) (find . G4f9d) (filter . G4f9c) (cons* . G4f9b) (assv . G4f9a) (assq . G4f99) (assp . G4f98) (assoc . G4f97) (call-with-string-output-port . G4f96) (call-with-port . G4f95) (call-with-bytevector-output-port . G4f94) (bytevector->string . G4f93) (buffer-mode? . G4f92) (binary-port? . G4f91) (with-exception-handler . G4f90) (raise-continuable . G4f8f) (raise . G4f8e) (eval . G3020) (environment . G3018) (make-enumeration . G4f8d) (enum-set=? . G4f8c) (enum-set-universe . G4f8b) (enum-set-union . G4f8a) (enum-set-subset? . G4f89) (enum-set-projection . G4f88) (enum-set-member? . G4f87) (enum-set-intersection . G4f86) (enum-set-indexer . G4f85) (enum-set-difference . G4f84) (enum-set-constructor . G4f83) (enum-set-complement . G4f82) (enum-set->list . G4f81) (who-condition? . G4a4f) (warning? . G49c9) (violation? . G4a08) (undefined-violation? . G4ac4) (syntax-violation? . G4aab) (syntax-violation-subform . G4aaf) (syntax-violation-form . G4aad) (syntax-violation . G3040) (simple-conditions . G4f80) (serious-condition? . G49de) (non-continuable-violation? . G4a66) (message-condition? . G49b2) (make-who-condition . G4a4b) (make-warning . G49c7) (make-violation . G4a06) (make-undefined-violation . G4ac2) (make-syntax-violation . G4aa5) (make-serious-condition . G49dc) (make-non-continuable-violation . G4a64) (make-message-condition . G49ae) (make-lexical-violation . G4a8e) (make-irritants-condition . G4a31) (make-implementation-restriction-violation . G4a79) (make-error . G49f1) (make-assertion-violation . G4a1b) (lexical-violation? . G4a90) (irritants-condition? . G4a35) (implementation-restriction-violation? . G4a7b) (error? . G49f3) (condition-who . G4a51) (condition-predicate . G4f7f) (condition-message . G49b4) (condition-irritants . G4a37) (condition-accessor . G4f7e) (condition . G4f7d) (assertion-violation? . G4a1d) (condition? . G4f7c) (utf32->string . G4f7b) (utf16->string . G4f7a) (utf8->string . G4f79) (uint-list->bytevector . G4f78) (u8-list->bytevector . G4f77) (string->utf8 . G4f76) (string->utf32 . G4f75) (string->utf16 . G4f74) (sint-list->bytevector . G4f73) (native-endianness . G4f72) (bytevector? . G4f71) (bytevector=? . G4f70) (bytevector-uint-set! . G4f6f) (bytevector-uint-ref . G4f6e) (bytevector-u8-set! . G4f6d) (bytevector-u8-ref . G4f6c) (bytevector-u64-set! . G4f6b) (bytevector-u64-ref . G4f6a) (bytevector-u64-native-set! . G4f69) (bytevector-u64-native-ref . G4f68) (bytevector-u32-set! . G4f67) (bytevector-u32-ref . G4f66) (bytevector-u32-native-set! . G4f65) (bytevector-u32-native-ref . G4f64) (bytevector-u16-set! . G4f63) (bytevector-u16-ref . G4f62) (bytevector-u16-native-set! . G4f61) (bytevector-u16-native-ref . G4f60) (bytevector-sint-set! . G4f5f) (bytevector-sint-ref . G4f5e) (bytevector-s8-set! . G4f5d) (bytevector-s8-ref . G4f5c) (bytevector-s64-set! . G4f5b) (bytevector-s64-ref . G4f5a) (bytevector-s64-native-set! . G4f59) (bytevector-s64-native-ref . G4f58) (bytevector-s32-set! . G4f57) (bytevector-s32-ref . G4f56) (bytevector-s32-native-set! . G4f55) (bytevector-s32-native-ref . G4f54) (bytevector-s16-set! . G4f53) (bytevector-s16-ref . G4f52) (bytevector-s16-native-set! . G4f51) (bytevector-s16-native-ref . G4f50) (bytevector-length . G4f4f) (bytevector-ieee-single-ref . G4f4e) (bytevector-ieee-single-set! . G4f4d) (bytevector-ieee-single-native-set! . G4f4c) (bytevector-ieee-single-native-ref . G4f4b) (bytevector-ieee-double-set! . G4f4a) (bytevector-ieee-double-ref . G4f49) (bytevector-ieee-double-native-set! . G4f48) (bytevector-ieee-double-native-ref . G4f47) (bytevector-fill! . G4f46) (bytevector-copy! . G4f45) (bytevector-copy . G4f44) (bytevector->uint-list . G4f43) (bytevector->u8-list . G4f42) (bytevector->sint-list . G4f41) (no-nans-violation? . G4bfe) (no-infinities-violation? . G4be9) (make-no-nans-violation . G4bfc) (make-no-infinities-violation . G4be7) (real->flonum . G4f40) (flzero? . G4f3f) (fltruncate . G4f3e) (fltan . G4f3d) (flsqrt . G4f3c) (flsin . G4f3b) (flround . G4f3a) (flpositive? . G4f39) (flonum? . G4f38) (flodd? . G4f37) (flnumerator . G4f36) (flnegative? . G4f35) (flnan? . G4f34) (flmod0 . G4f33) (flmod . G4f32) (flmin . G4f31) (flmax . G4f30) (fllog . G4f2f) (flinteger? . G4f2e) (flinfinite? . G4f2d) (flfloor . G4f2c) (flfinite? . G4f2b) (flexpt . G4f2a) (flexp . G4f29) (fleven? . G4f28) (fldiv0-and-mod0 . G4f27) (fldiv0 . G4f26) (fldiv-and-mod . G4f25) (fldiv . G4f24) (fldenominator . G4f23) (flcos . G4f22) (flceiling . G4f21) (flatan . G4f20) (flasin . G4f1f) (flacos . G4f1e) (flabs . G4f1d) (fl>? . G4f1c) (fl>=? . G4f1b) (fl=? . G4f1a) (fl<? . G4f19) (fl<=? . G4f18) (fl/ . G4f17) (fl- . G4f16) (fl+ . G4f15) (fl* . G4f14) (fixnum->flonum . G4f13) (fxzero? . G4f12) (fxxor . G4f11) (fxrotate-bit-field . G4f10) (fxreverse-bit-field . G4f0f) (fxpositive? . G4f0e) (fxodd? . G4f0d) (fxnot . G4f0c) (fxnegative? . G4f0b) (fxmod0 . G4f0a) (fxmod . G4f09) (fxmin . G4f08) (fxmax . G4f07) (fxlength . G4f06) (fxior . G4f05) (fxif . G4f04) (fxfirst-bit-set . G4f03) (fxeven? . G4f02) (fxdiv0-and-mod0 . G4f01) (fxdiv0 . G4f00) (fxdiv-and-mod . G4eff) (fxdiv . G4efe) (fxcopy-bit-field . G4efd) (fxcopy-bit . G4efc) (fxbit-set? . G4efb) (fxbit-field . G4efa) (fxbit-count . G4ef9) (fxarithmetic-shift-right . G4ef8) (fxarithmetic-shift-left . G4ef7) (fxarithmetic-shift . G4ef6) (fxand . G4ef5) (fx>? . G4ef4) (fx>=? . G4ef3) (fx=? . G4ef2) (fx<? . G4ef1) (fx<=? . G4ef0) (fx-/carry . G4eef) (fx- . G4eee) (fx+/carry . G4eed) (fx+ . G4eec) (fx*/carry . G4eeb) (fx* . G4eea) (greatest-fixnum . G4ee9) (least-fixnum . G4ee8) (fixnum-width . G4ee7) (fixnum? . G4ee6) (bitwise-rotate-bit-field . G4ee5) (bitwise-reverse-bit-field . G4ee4) (bitwise-length . G4ee3) (bitwise-if . G4ee2) (bitwise-first-bit-set . G4ee1) (bitwise-copy-bit-field . G4ee0) (bitwise-copy-bit . G4edf) (bitwise-bit-set? . G4ede) (bitwise-bit-field . G4edd) (bitwise-bit-count . G4edc) (bitwise-xor . G4edb) (bitwise-ior . G4eda) (bitwise-and . G4ed9) (bitwise-not . G4ed8) (bitwise-arithmetic-shift-right . G4ed7) (bitwise-arithmetic-shift-left . G4ed6) (bitwise-arithmetic-shift . G4ed5) (zero? . G4ed4) (vector? . G4ed3) (vector-set! . G4ed2) (vector-ref . G4ed1) (vector-map . G4ed0) (vector-length . G4ecf) (vector-for-each . G4ece) (vector-fill! . G4ecd) (vector->list . G4ecc) (vector . G4ecb) (values . G4eca) (truncate . G4ec9) (tan . G4ec8) (symbol? . G4ec7) (symbol=? . G4ec6) (symbol->string . G4ec5) (substring . G4ec4) (string? . G4ec3) (string>? . G4ec2) (string>=? . G4ec1) (string=? . G4ec0) (string<? . G4ebf) (string<=? . G4ebe) (string-ref . G4ebd) (string-length . G4ebc) (string-for-each . G4ebb) (string-copy . G4eba) (string-append . G4eb9) (string->symbol . G4eb8) (string->number . G4eb7) (string->list . G4eb6) (string . G4eb5) (sqrt . G4eb4) (sin . G4eb3) (round . G4eb2) (reverse . G4eb1) (real? . G4eb0) (real-valued? . G4eaf) (real-part . G4eae) (rationalize . G4ead) (rational? . G4eac) (rational-valued? . G4eab) (procedure? . G4eaa) (positive? . G4ea9) (pair? . G4ea8) (odd? . G4ea7) (numerator . G4ea6) (number? . G4ea5) (number->string . G4ea4) (null? . G4ea3) (not . G4ea2) (negative? . G4ea1) (nan? . G4ea0) (min . G4e9f) (max . G4e9e) (map . G4e9d) (make-vector . G4e9c) (make-string . G4e9b) (make-rectangular . G4e9a) (make-polar . G4e99) (magnitude . G4e98) (log . G4e97) (list? . G4e96) (list-tail . G4e95) (list-ref . G4e94) (list->vector . G4e93) (list->string . G4e92) (list . G4e91) (length . G4e90) (lcm . G4e8f) (integer? . G4e8e) (integer-valued? . G4e8d) (integer->char . G4e8c) (infinite? . G4e8b) (inexact? . G4e8a) (inexact . G4e89) (imag-part . G4e88) (gcd . G4e87) (for-each . G4e86) (floor . G4e85) (finite? . G4e84) (expt . G4e83) (exp . G4e82) (exact? . G4e81) (exact-integer-sqrt . G4e80) (exact . G4e7f) (even? . G4e7e) (error . G4e7d) (eqv? . G4e7c) (equal? . G4e7b) (eq? . G4e7a) (dynamic-wind . G4e79) (div0-and-mod0 . G4e78) (mod0 . G4e77) (div0 . G4e76) (div-and-mod . G4e75) (mod . G4e74) (div . G4e73) (denominator . G4e72) (cos . G4e71) (cons . G4e70) (complex? . G4e6f) (char? . G4e6e) (char>? . G4e6d) (char>=? . G4e6c) (char=? . G4e6b) (char<? . G4e6a) (char<=? . G4e69) (char->integer . G4e68) (ceiling . G4e67) (call-with-values . G4e66) (call/cc . G4e65) (call-with-current-continuation . G4e64) (cddddr . G4e63) (cdddar . G4e62) (cddadr . G4e61) (cddaar . G4e60) (cdaddr . G4e5f) (cdadar . G4e5e) (cdaadr . G4e5d) (cdaaar . G4e5c) (cadddr . G4e5b) (caddar . G4e5a) (cadadr . G4e59) (cadaar . G4e58) (caaddr . G4e57) (caadar . G4e56) (caaadr . G4e55) (caaaar . G4e54) (cdddr . G4e53) (cddar . G4e52) (cdadr . G4e51) (cdaar . G4e50) (caddr . G4e4f) (cadar . G4e4e) (caadr . G4e4d) (caaar . G4e4c) (cddr . G4e4b) (cdar . G4e4a) (cadr . G4e49) (caar . G4e48) (cdr . G4e47) (car . G4e46) (boolean? . G4e45) (boolean=? . G4e44) (atan . G4e43) (assertion-violation . G4e42) (asin . G4e41) (apply . G4e40) (append . G4e3f) (angle . G4e3e) (acos . G4e3d) (abs . G4e3c) (/ . G4e3b) (* . G4e3a) (- . G4e39) (+ . G4e38) (>= . G4e37) (> . G4e36) (= . G4e35) (<= . G4e34) (< . G4e33) (library . G4e32) (export . G4e31) (&no-nans . G4e30) (&no-infinities . G4e2f) (&i/o-encoding . G4e2e) (&i/o-decoding . G4e2d) (&i/o-port . G4e2c) (&i/o-file-does-not-exist . G4e2b) (&i/o-file-already-exists . G4e2a) (&i/o-file-is-read-only . G4e29) (&i/o-file-protection . G4e28) (&i/o-filename . G4e27) (&i/o-invalid-position . G4e26) (&i/o-write . G4e25) (&i/o-read . G4e24) (&i/o . G4e23) (&undefined . G4e22) (&syntax . G4e21) (&lexical . G4e20) (&implementation-restriction . G4e1f) (&non-continuable . G4e1e) (&who . G4e1d) (&irritants . G4e1c) (&assertion . G4e1b) (&violation . G4e1a) (&error . G4e19) (&serious . G4e18) (&warning . G4e17) (&message . G4e16) (&condition . G4e15) (define-condition-type . G4e14) (define-enumeration . G4e13) (define-record-type . G4e12) (parent-rtd . G4e11) (nongenerative . G4e10) (opaque . G4e0f) (sealed . G4e0e) (protocol . G4e0d) (parent . G4e0c) (immutable . G4e0b) (mutable . G4e0a) (fields . G4e09) (error-handling-mode . G4e08) (file-options . G4e07) (buffer-mode . G4e06) (eol-style . G4e05) (guard . G4e04) (trace-define . G4e03) (trace-lambda . G4e02) (unsyntax-splicing . G4e01) (unsyntax . G4e00) (unquote-splicing . G4dff) (unquote . G4dfe) (_ . G4dfd) (else . G4dfc) (=> . G4dfb) (... . G4dfa) (assert . G4df9) (endianness . G4df8) (delay . G4df7) (time . G4df6) (do . G4df5) (cond . G4df4) (let* . G4df3) (let . G4df2) (let*-values . G4df1) (let-values . G4df0) (identifier-syntax . G4def) (with-syntax . G4dee) (quasisyntax . G4ded) (quasiquote . G4dec) (syntax-rules . G4deb) (include . G4dea) (define-struct . G4de9) (record-constructor-descriptor . G4de8) (record-type-descriptor . G4de7) (case . G4de6) (parameterize . G4de5) (unless . G4de4) (when . G4de3) (or . G4de2) (and . G4de1) (if . G4de0) (letrec* . G4ddf) (letrec . G4dde) (type-descriptor . G4ddd) (case-lambda . G4ddc) (lambda . G4ddb) (syntax . G4dda) (syntax-case . G4dd9) (quote . G4dd8) (foreign-call . G4dd7) (letrec-syntax . G4dd6) (let-syntax . G4dd5) (set! . G4dd4) (import . G4dd3) (begin . G4dd2) (module . G4dd1) (define-syntax . G4dd0) (define . G4dcf)) '((G4c02 core-prim . &no-nans-rcd) (G4c00 core-prim . &no-nans-rtd) (G4bed core-prim . &no-infinities-rcd) (G4beb core-prim . &no-infinities-rtd) (G4bd8 core-prim . &i/o-encoding-rcd) (G4bd6 core-prim . &i/o-encoding-rtd) (G4bbe core-prim . &i/o-decoding-rcd) (G4bbc core-prim . &i/o-decoding-rtd) (G4ba9 core-prim . &i/o-port-rcd) (G4ba7 core-prim . &i/o-port-rtd) (G4b8f core-prim . &i/o-file-does-not-exist-rcd) (G4b8d core-prim . &i/o-file-does-not-exist-rtd) (G4b7a core-prim . &i/o-file-already-exists-rcd) (G4b78 core-prim . &i/o-file-already-exists-rtd) (G4b65 core-prim . &i/o-file-is-read-only-rcd) (G4b63 core-prim . &i/o-file-is-read-only-rtd) (G4b50 core-prim . &i/o-file-protection-rcd) (G4b4e core-prim . &i/o-file-protection-rtd) (G4b3b core-prim . &i/o-filename-rcd) (G4b39 core-prim . &i/o-filename-rtd) (G4b21 core-prim . &i/o-invalid-position-rcd) (G4b1f core-prim . &i/o-invalid-position-rtd) (G4b07 core-prim . &i/o-write-rcd) (G4b05 core-prim . &i/o-write-rtd) (G4af2 core-prim . &i/o-read-rcd) (G4af0 core-prim . &i/o-read-rtd) (G4add core-prim . &i/o-rcd) (G4adb core-prim . &i/o-rtd) (G4ac8 core-prim . &undefined-rcd) (G4ac6 core-prim . &undefined-rtd) (G4ab3 core-prim . &syntax-rcd) (G4ab1 core-prim . &syntax-rtd) (G4a94 core-prim . &lexical-rcd) (G4a92 core-prim . &lexical-rtd) (G4a7f core-prim . &implementation-restriction-rcd) (G4a7d core-prim . &implementation-restriction-rtd) (G4a6a core-prim . &non-continuable-rcd) (G4a68 core-prim . &non-continuable-rtd) (G4a55 core-prim . &who-rcd) (G4a53 core-prim . &who-rtd) (G4a3b core-prim . &irritants-rcd) (G4a39 core-prim . &irritants-rtd) (G4a21 core-prim . &assertion-rcd) (G4a1f core-prim . &assertion-rtd) (G4a0c core-prim . &violation-rcd) (G4a0a core-prim . &violation-rtd) (G49f7 core-prim . &error-rcd) (G49f5 core-prim . &error-rtd) (G49e2 core-prim . &serious-rcd) (G49e0 core-prim . &serious-rtd) (G49cd core-prim . &warning-rcd) (G49cb core-prim . &warning-rtd) (G49b8 core-prim . &message-rcd) (G49b6 core-prim . &message-rtd) (G495b core-prim . &condition-rcd) (G4959 core-prim . &condition-rtd) (G303c core-prim . syntax-error) (G2f55 core-prim . syntax-dispatch) (G50a3 core-prim . pretty-print) (G50a2 core-prim . eval-core) (G50a1 core-prim . set-symbol-value!) (G50a0 core-prim . symbol-value) (G509f core-prim . gensym) (G509e core-prim . void) (G4d09 core-prim . load) (G304c core-prim . interaction-environment) (G509d core-prim . char-ready?) (G509c core-prim . regexp?) (G509b core-prim . read-line) (G509a core-prim . dotted-list?) (G5099 core-prim . circular-list?) (G5098 core-prim . proper-list?) (G5097 core-prim . circular-list) (G5096 core-prim . last) (G5095 core-prim . last-pair) (G5094 core-prim . not-pair?) (G5093 core-prim . split-at!) (G5092 core-prim . split-at) (G5091 core-prim . list=) (G5090 core-prim . list-copy) (G508f core-prim . list-tabulate) (G508e core-prim . make-list) (G508d core-prim . xcons) (G508c core-prim . tenth) (G508b core-prim . ninth) (G508a core-prim . eighth) (G5089 core-prim . seventh) (G5088 core-prim . sixth) (G5087 core-prim . fifth) (G5086 core-prim . drop-right!) (G5085 core-prim . drop-right) (G5084 core-prim . take-right) (G5083 core-prim . take!) (G5082 core-prim . drop) (G5081 core-prim . take) (G5080 core-prim . car+cdr) (G507f core-prim . third) (G507e core-prim . second) (G507d core-prim . first) (G507c core-prim . iota) (G507b core-prim . every) (G507a core-prim . ungensym) (G5079 core-prim . assoc-ref) (G5078 core-prim . alist-cons) (G5077 core-prim . append-map) (G5076 core-prim . print) (G5075 core-prim . format) (G5074 core-prim . standard-library-path) (G5073 core-prim . file-newer?) (G5072 core-prim . stat-mtime) (G5071 core-prim . current-directory) (G5070 core-prim . write-to-file) (G506f core-prim . file->list) (G506e core-prim . file->string) (G506d core-prim . digit->integer) (G506c core-prim . call-with-string-input-port) (G506b core-prim . call-with-string-io) (G506a core-prim . string-split) (G5069 core-prim . bytevector-for-each) (G5068 core-prim . string->regexp) (G5067 core-prim . rxmatch) (G5066 core-prim . regexp-replace-all) (G5065 core-prim . hashtable-for-each) (G5064 core-prim . call-process) (G5063 core-prim . local-tz-offset) (G5062 core-prim . microseconds) (G5061 core-prim . readdir) (G5060 core-prim . %spawn) (G505f core-prim . %waitpid) (G505e core-prim . %fork) (G505d core-prim . %pipe) (G505c core-prim . get-environment-variables) (G505b core-prim . get-environment-variable) (G505a core-prim . get-timeofday) (G5059 core-prim . get-command-line) (G5058 core-prim . sys-display) (G5057 core-prim . source-info) (G5056 core-prim . make-compiler-instruction) (G5055 core-prim . make-instruction) (G5054 core-prim . set-source-info!) (G5053 core-prim . bignum?) (G5052 core-prim . make-complex) (G5051 core-prim . fast-equal?) (G5050 core-prim . fasl-read) (G504f core-prim . fasl-write) (G504e core-prim . receive) (G2828 core-prim . make-parameter) (G504d core-prim . string-upcase) (G504c core-prim . string-titlecase) (G504b core-prim . string-normalize-nfkd) (G504a core-prim . string-normalize-nfkc) (G5049 core-prim . string-normalize-nfd) (G5048 core-prim . string-normalize-nfc) (G5047 core-prim . string-foldcase) (G5046 core-prim . string-downcase) (G5045 core-prim . string-ci>?) (G5044 core-prim . string-ci>=?) (G5043 core-prim . string-ci=?) (G5042 core-prim . string-ci<?) (G5041 core-prim . string-ci<=?) (G5040 core-prim . char-whitespace?) (G503f core-prim . char-upper-case?) (G503e core-prim . char-title-case?) (G503d core-prim . char-numeric?) (G503c core-prim . char-lower-case?) (G503b core-prim . char-general-category) (G503a core-prim . char-upcase) (G5039 core-prim . char-titlecase) (G5038 core-prim . char-foldcase) (G5037 core-prim . char-downcase) (G5036 core-prim . char-ci>?) (G5035 core-prim . char-ci>=?) (G5034 core-prim . char-ci=?) (G5033 core-prim . char-ci<?) (G5032 core-prim . char-ci<=?) (G5031 core-prim . char-alphabetic?) (G2d90 core-prim . make-variable-transformer) (G3042 core-prim . identifier?) (G302e core-prim . generate-temporaries) (G3030 core-prim . free-identifier=?) (G3046 core-prim . syntax->datum) (G3044 core-prim . datum->syntax) (G3032 core-prim . bound-identifier=?) (G5030 core-prim . record-type-descriptor?) (G502f core-prim . record-predicate) (G502e core-prim . record-mutator) (G502d core-prim . record-constructor) (G502c core-prim . record-accessor) (G502b core-prim . make-record-type-descriptor) (G502a core-prim . make-record-constructor-descriptor) (G5029 core-prim . record?) (G5028 core-prim . record-type-uid) (G5027 core-prim . record-type-sealed?) (G5026 core-prim . record-type-parent) (G5025 core-prim . record-type-opaque?) (G5024 core-prim . record-type-name) (G5023 core-prim . record-type-generative?) (G5022 core-prim . record-type-field-names) (G5021 core-prim . record-rtd) (G5020 core-prim . record-field-mutable?) (G501f core-prim . delete-file) (G501e core-prim . file-exists?) (G501d core-prim . vector-sort!) (G501c core-prim . vector-sort) (G501b core-prim . list-sort) (G501a core-prim . symbol-hash) (G5019 core-prim . string-ci-hash) (G5018 core-prim . string-hash) (G5017 core-prim . equal-hash) (G5016 core-prim . hashtable-equivalence-function) (G5015 core-prim . make-hashtable) (G5014 core-prim . hashtable-hash-function) (G5013 core-prim . make-eqv-hashtable) (G5012 core-prim . make-eq-hashtable) (G5011 core-prim . hashtable?) (G5010 core-prim . hashtable-update!) (G500f core-prim . hashtable-size) (G500e core-prim . hashtable-set!) (G500d core-prim . hashtable-ref) (G500c core-prim . hashtable-mutable?) (G500b core-prim . hashtable-keys) (G500a core-prim . hashtable-entries) (G5009 core-prim . hashtable-delete!) (G5008 core-prim . hashtable-copy) (G5007 core-prim . hashtable-contains?) (G5006 core-prim . hashtable-clear!) (G5005 core-prim . call-with-output-file) (G5004 core-prim . call-with-input-file) (G5003 core-prim . write-char) (G5002 core-prim . write) (G5001 core-prim . with-output-to-file) (G5000 core-prim . with-input-from-file) (G4fff core-prim . read-char) (G4ffe core-prim . read) (G4ffd core-prim . peek-char) (G4ffc core-prim . open-output-file) (G4ffb core-prim . open-input-file) (G4ffa core-prim . newline) (G4ff9 core-prim . display) (G4ff8 core-prim . close-output-port) (G4ff7 core-prim . close-input-port) (G4ff6 core-prim . eof-object?) (G4ff5 core-prim . eof-object) (G4ff4 core-prim . current-error-port) (G4ff3 core-prim . current-output-port) (G4ff2 core-prim . current-input-port) (G4ff1 core-prim . output-port?) (G4ff0 core-prim . input-port?) (G4fef core-prim . utf-8-codec) (G4fee core-prim . utf-16-codec) (G4fed core-prim . transcoder-error-handling-mode) (G4fec core-prim . transcoder-eol-style) (G4feb core-prim . transcoder-codec) (G4fea core-prim . transcoded-port) (G4fe9 core-prim . textual-port?) (G4fe8 core-prim . string->bytevector) (G4fe7 core-prim . standard-output-port) (G4fe6 core-prim . standard-input-port) (G4fe5 core-prim . standard-error-port) (G4fe4 core-prim . set-port-position!) (G4fe3 core-prim . put-u8) (G4fe2 core-prim . put-string) (G4fe1 core-prim . put-datum) (G4fe0 core-prim . put-char) (G4fdf core-prim . put-bytevector) (G4fde core-prim . port?) (G4fdd core-prim . port-transcoder) (G4fdc core-prim . port-position) (G4fdb core-prim . port-has-set-port-position!?) (G4fda core-prim . port-has-port-position?) (G4fd9 core-prim . port-eof?) (G4fd8 core-prim . output-port-buffer-mode) (G4fd7 core-prim . open-string-output-port) (G4fd6 core-prim . open-string-input-port) (G4fd5 core-prim . open-file-output-port) (G4fd4 core-prim . open-file-input/output-port) (G4fd3 core-prim . open-file-input-port) (G4fd2 core-prim . open-bytevector-output-port) (G4fd1 core-prim . open-bytevector-input-port) (G4fd0 core-prim . native-transcoder) (G4fcf core-prim . native-eol-style) (G4fce core-prim . make-transcoder) (G4fcd core-prim . latin-1-codec) (G4b01 core-prim . make-i/o-write-error) (G4aec core-prim . make-i/o-read-error) (G4b9f core-prim . make-i/o-port-error) (G4b17 core-prim . make-i/o-invalid-position-error) (G4b31 core-prim . make-i/o-filename-error) (G4b4a core-prim . make-i/o-file-protection-error) (G4b5f core-prim . make-i/o-file-is-read-only-error) (G4b89 core-prim . make-i/o-file-does-not-exist-error) (G4b74 core-prim . make-i/o-file-already-exists-error) (G4ad7 core-prim . make-i/o-error) (G4bce core-prim . make-i/o-encoding-error) (G4bb8 core-prim . make-i/o-decoding-error) (G4fcc core-prim . make-custom-textual-output-port) (G4fcb core-prim . make-custom-textual-input/output-port) (G4fca core-prim . make-custom-textual-input-port) (G4fc9 core-prim . make-custom-binary-output-port) (G4fc8 core-prim . make-custom-binary-input/output-port) (G4fc7 core-prim . make-custom-binary-input-port) (G4fc6 core-prim . make-bytevector) (G4fc5 core-prim . lookahead-u8) (G4fc4 core-prim . lookahead-char) (G4b03 core-prim . i/o-write-error?) (G4aee core-prim . i/o-read-error?) (G4ba3 core-prim . i/o-port-error?) (G4b1b core-prim . i/o-invalid-position-error?) (G4b35 core-prim . i/o-filename-error?) (G4b4c core-prim . i/o-file-protection-error?) (G4b61 core-prim . i/o-file-is-read-only-error?) (G4b8b core-prim . i/o-file-does-not-exist-error?) (G4b76 core-prim . i/o-file-already-exists-error?) (G4ad9 core-prim . i/o-error?) (G4b1d core-prim . i/o-error-position) (G4ba5 core-prim . i/o-error-port) (G4b37 core-prim . i/o-error-filename) (G4bd2 core-prim . i/o-encoding-error?) (G4bd4 core-prim . i/o-encoding-error-char) (G4bba core-prim . i/o-decoding-error?) (G4fc3 core-prim . get-u8) (G4fc2 core-prim . get-string-n!) (G4fc1 core-prim . get-string-n) (G4fc0 core-prim . get-string-all) (G4fbf core-prim . get-line) (G4fbe core-prim . get-datum) (G4fbd core-prim . get-char) (G4fbc core-prim . get-bytevector-some) (G4fbb core-prim . get-bytevector-n!) (G4fba core-prim . get-bytevector-n) (G4fb9 core-prim . get-bytevector-all) (G4fb8 core-prim . flush-output-port) (G4fb7 core-prim . close-port) (G301c core-prim . scheme-report-environment) (G4fb6 core-prim . quotient) (G301a core-prim . null-environment) (G4fb5 core-prim . remainder) (G4fb4 core-prim . modulo) (G4fb3 core-prim . inexact->exact) (G4fb2 core-prim . force) (G4fb1 core-prim . exact->inexact) (G4fb0 core-prim . make-promise) (G4faf core-prim . exit) (G4d03 core-prim . command-line) (G4fae core-prim . string-fill!) (G4fad core-prim . string-set!) (G4fac core-prim . set-cdr!) (G4fab core-prim . set-car!) (G4faa core-prim . remove) (G4fa9 core-prim . remv) (G4fa8 core-prim . remp) (G4fa7 core-prim . remq) (G4fa6 core-prim . partition) (G4fa5 core-prim . memv) (G4fa4 core-prim . memq) (G4fa3 core-prim . memp) (G4fa2 core-prim . member) (G4fa1 core-prim . exists) (G4fa0 core-prim . for-all) (G4f9f core-prim . fold-right) (G4f9e core-prim . fold-left) (G4f9d core-prim . find) (G4f9c core-prim . filter) (G4f9b core-prim . cons*) (G4f9a core-prim . assv) (G4f99 core-prim . assq) (G4f98 core-prim . assp) (G4f97 core-prim . assoc) (G4f96 core-prim . call-with-string-output-port) (G4f95 core-prim . call-with-port) (G4f94 core-prim . call-with-bytevector-output-port) (G4f93 core-prim . bytevector->string) (G4f92 core-prim . buffer-mode?) (G4f91 core-prim . binary-port?) (G4f90 core-prim . with-exception-handler) (G4f8f core-prim . raise-continuable) (G4f8e core-prim . raise) (G3020 core-prim . eval) (G3018 core-prim . environment) (G4f8d core-prim . make-enumeration) (G4f8c core-prim . enum-set=?) (G4f8b core-prim . enum-set-universe) (G4f8a core-prim . enum-set-union) (G4f89 core-prim . enum-set-subset?) (G4f88 core-prim . enum-set-projection) (G4f87 core-prim . enum-set-member?) (G4f86 core-prim . enum-set-intersection) (G4f85 core-prim . enum-set-indexer) (G4f84 core-prim . enum-set-difference) (G4f83 core-prim . enum-set-constructor) (G4f82 core-prim . enum-set-complement) (G4f81 core-prim . enum-set->list) (G4a4f core-prim . who-condition?) (G49c9 core-prim . warning?) (G4a08 core-prim . violation?) (G4ac4 core-prim . undefined-violation?) (G4aab core-prim . syntax-violation?) (G4aaf core-prim . syntax-violation-subform) (G4aad core-prim . syntax-violation-form) (G3040 core-prim . syntax-violation) (G4f80 core-prim . simple-conditions) (G49de core-prim . serious-condition?) (G4a66 core-prim . non-continuable-violation?) (G49b2 core-prim . message-condition?) (G4a4b core-prim . make-who-condition) (G49c7 core-prim . make-warning) (G4a06 core-prim . make-violation) (G4ac2 core-prim . make-undefined-violation) (G4aa5 core-prim . make-syntax-violation) (G49dc core-prim . make-serious-condition) (G4a64 core-prim . make-non-continuable-violation) (G49ae core-prim . make-message-condition) (G4a8e core-prim . make-lexical-violation) (G4a31 core-prim . make-irritants-condition) (G4a79 core-prim . make-implementation-restriction-violation) (G49f1 core-prim . make-error) (G4a1b core-prim . make-assertion-violation) (G4a90 core-prim . lexical-violation?) (G4a35 core-prim . irritants-condition?) (G4a7b core-prim . implementation-restriction-violation?) (G49f3 core-prim . error?) (G4a51 core-prim . condition-who) (G4f7f core-prim . condition-predicate) (G49b4 core-prim . condition-message) (G4a37 core-prim . condition-irritants) (G4f7e core-prim . condition-accessor) (G4f7d core-prim . condition) (G4a1d core-prim . assertion-violation?) (G4f7c core-prim . condition?) (G4f7b core-prim . utf32->string) (G4f7a core-prim . utf16->string) (G4f79 core-prim . utf8->string) (G4f78 core-prim . uint-list->bytevector) (G4f77 core-prim . u8-list->bytevector) (G4f76 core-prim . string->utf8) (G4f75 core-prim . string->utf32) (G4f74 core-prim . string->utf16) (G4f73 core-prim . sint-list->bytevector) (G4f72 core-prim . native-endianness) (G4f71 core-prim . bytevector?) (G4f70 core-prim . bytevector=?) (G4f6f core-prim . bytevector-uint-set!) (G4f6e core-prim . bytevector-uint-ref) (G4f6d core-prim . bytevector-u8-set!) (G4f6c core-prim . bytevector-u8-ref) (G4f6b core-prim . bytevector-u64-set!) (G4f6a core-prim . bytevector-u64-ref) (G4f69 core-prim . bytevector-u64-native-set!) (G4f68 core-prim . bytevector-u64-native-ref) (G4f67 core-prim . bytevector-u32-set!) (G4f66 core-prim . bytevector-u32-ref) (G4f65 core-prim . bytevector-u32-native-set!) (G4f64 core-prim . bytevector-u32-native-ref) (G4f63 core-prim . bytevector-u16-set!) (G4f62 core-prim . bytevector-u16-ref) (G4f61 core-prim . bytevector-u16-native-set!) (G4f60 core-prim . bytevector-u16-native-ref) (G4f5f core-prim . bytevector-sint-set!) (G4f5e core-prim . bytevector-sint-ref) (G4f5d core-prim . bytevector-s8-set!) (G4f5c core-prim . bytevector-s8-ref) (G4f5b core-prim . bytevector-s64-set!) (G4f5a core-prim . bytevector-s64-ref) (G4f59 core-prim . bytevector-s64-native-set!) (G4f58 core-prim . bytevector-s64-native-ref) (G4f57 core-prim . bytevector-s32-set!) (G4f56 core-prim . bytevector-s32-ref) (G4f55 core-prim . bytevector-s32-native-set!) (G4f54 core-prim . bytevector-s32-native-ref) (G4f53 core-prim . bytevector-s16-set!) (G4f52 core-prim . bytevector-s16-ref) (G4f51 core-prim . bytevector-s16-native-set!) (G4f50 core-prim . bytevector-s16-native-ref) (G4f4f core-prim . bytevector-length) (G4f4e core-prim . bytevector-ieee-single-ref) (G4f4d core-prim . bytevector-ieee-single-set!) (G4f4c core-prim . bytevector-ieee-single-native-set!) (G4f4b core-prim . bytevector-ieee-single-native-ref) (G4f4a core-prim . bytevector-ieee-double-set!) (G4f49 core-prim . bytevector-ieee-double-ref) (G4f48 core-prim . bytevector-ieee-double-native-set!) (G4f47 core-prim . bytevector-ieee-double-native-ref) (G4f46 core-prim . bytevector-fill!) (G4f45 core-prim . bytevector-copy!) (G4f44 core-prim . bytevector-copy) (G4f43 core-prim . bytevector->uint-list) (G4f42 core-prim . bytevector->u8-list) (G4f41 core-prim . bytevector->sint-list) (G4bfe core-prim . no-nans-violation?) (G4be9 core-prim . no-infinities-violation?) (G4bfc core-prim . make-no-nans-violation) (G4be7 core-prim . make-no-infinities-violation) (G4f40 core-prim . real->flonum) (G4f3f core-prim . flzero?) (G4f3e core-prim . fltruncate) (G4f3d core-prim . fltan) (G4f3c core-prim . flsqrt) (G4f3b core-prim . flsin) (G4f3a core-prim . flround) (G4f39 core-prim . flpositive?) (G4f38 core-prim . flonum?) (G4f37 core-prim . flodd?) (G4f36 core-prim . flnumerator) (G4f35 core-prim . flnegative?) (G4f34 core-prim . flnan?) (G4f33 core-prim . flmod0) (G4f32 core-prim . flmod) (G4f31 core-prim . flmin) (G4f30 core-prim . flmax) (G4f2f core-prim . fllog) (G4f2e core-prim . flinteger?) (G4f2d core-prim . flinfinite?) (G4f2c core-prim . flfloor) (G4f2b core-prim . flfinite?) (G4f2a core-prim . flexpt) (G4f29 core-prim . flexp) (G4f28 core-prim . fleven?) (G4f27 core-prim . fldiv0-and-mod0) (G4f26 core-prim . fldiv0) (G4f25 core-prim . fldiv-and-mod) (G4f24 core-prim . fldiv) (G4f23 core-prim . fldenominator) (G4f22 core-prim . flcos) (G4f21 core-prim . flceiling) (G4f20 core-prim . flatan) (G4f1f core-prim . flasin) (G4f1e core-prim . flacos) (G4f1d core-prim . flabs) (G4f1c core-prim . fl>?) (G4f1b core-prim . fl>=?) (G4f1a core-prim . fl=?) (G4f19 core-prim . fl<?) (G4f18 core-prim . fl<=?) (G4f17 core-prim . fl/) (G4f16 core-prim . fl-) (G4f15 core-prim . fl+) (G4f14 core-prim . fl*) (G4f13 core-prim . fixnum->flonum) (G4f12 core-prim . fxzero?) (G4f11 core-prim . fxxor) (G4f10 core-prim . fxrotate-bit-field) (G4f0f core-prim . fxreverse-bit-field) (G4f0e core-prim . fxpositive?) (G4f0d core-prim . fxodd?) (G4f0c core-prim . fxnot) (G4f0b core-prim . fxnegative?) (G4f0a core-prim . fxmod0) (G4f09 core-prim . fxmod) (G4f08 core-prim . fxmin) (G4f07 core-prim . fxmax) (G4f06 core-prim . fxlength) (G4f05 core-prim . fxior) (G4f04 core-prim . fxif) (G4f03 core-prim . fxfirst-bit-set) (G4f02 core-prim . fxeven?) (G4f01 core-prim . fxdiv0-and-mod0) (G4f00 core-prim . fxdiv0) (G4eff core-prim . fxdiv-and-mod) (G4efe core-prim . fxdiv) (G4efd core-prim . fxcopy-bit-field) (G4efc core-prim . fxcopy-bit) (G4efb core-prim . fxbit-set?) (G4efa core-prim . fxbit-field) (G4ef9 core-prim . fxbit-count) (G4ef8 core-prim . fxarithmetic-shift-right) (G4ef7 core-prim . fxarithmetic-shift-left) (G4ef6 core-prim . fxarithmetic-shift) (G4ef5 core-prim . fxand) (G4ef4 core-prim . fx>?) (G4ef3 core-prim . fx>=?) (G4ef2 core-prim . fx=?) (G4ef1 core-prim . fx<?) (G4ef0 core-prim . fx<=?) (G4eef core-prim . fx-/carry) (G4eee core-prim . fx-) (G4eed core-prim . fx+/carry) (G4eec core-prim . fx+) (G4eeb core-prim . fx*/carry) (G4eea core-prim . fx*) (G4ee9 core-prim . greatest-fixnum) (G4ee8 core-prim . least-fixnum) (G4ee7 core-prim . fixnum-width) (G4ee6 core-prim . fixnum?) (G4ee5 core-prim . bitwise-rotate-bit-field) (G4ee4 core-prim . bitwise-reverse-bit-field) (G4ee3 core-prim . bitwise-length) (G4ee2 core-prim . bitwise-if) (G4ee1 core-prim . bitwise-first-bit-set) (G4ee0 core-prim . bitwise-copy-bit-field) (G4edf core-prim . bitwise-copy-bit) (G4ede core-prim . bitwise-bit-set?) (G4edd core-prim . bitwise-bit-field) (G4edc core-prim . bitwise-bit-count) (G4edb core-prim . bitwise-xor) (G4eda core-prim . bitwise-ior) (G4ed9 core-prim . bitwise-and) (G4ed8 core-prim . bitwise-not) (G4ed7 core-prim . bitwise-arithmetic-shift-right) (G4ed6 core-prim . bitwise-arithmetic-shift-left) (G4ed5 core-prim . bitwise-arithmetic-shift) (G4ed4 core-prim . zero?) (G4ed3 core-prim . vector?) (G4ed2 core-prim . vector-set!) (G4ed1 core-prim . vector-ref) (G4ed0 core-prim . vector-map) (G4ecf core-prim . vector-length) (G4ece core-prim . vector-for-each) (G4ecd core-prim . vector-fill!) (G4ecc core-prim . vector->list) (G4ecb core-prim . vector) (G4eca core-prim . values) (G4ec9 core-prim . truncate) (G4ec8 core-prim . tan) (G4ec7 core-prim . symbol?) (G4ec6 core-prim . symbol=?) (G4ec5 core-prim . symbol->string) (G4ec4 core-prim . substring) (G4ec3 core-prim . string?) (G4ec2 core-prim . string>?) (G4ec1 core-prim . string>=?) (G4ec0 core-prim . string=?) (G4ebf core-prim . string<?) (G4ebe core-prim . string<=?) (G4ebd core-prim . string-ref) (G4ebc core-prim . string-length) (G4ebb core-prim . string-for-each) (G4eba core-prim . string-copy) (G4eb9 core-prim . string-append) (G4eb8 core-prim . string->symbol) (G4eb7 core-prim . string->number) (G4eb6 core-prim . string->list) (G4eb5 core-prim . string) (G4eb4 core-prim . sqrt) (G4eb3 core-prim . sin) (G4eb2 core-prim . round) (G4eb1 core-prim . reverse) (G4eb0 core-prim . real?) (G4eaf core-prim . real-valued?) (G4eae core-prim . real-part) (G4ead core-prim . rationalize) (G4eac core-prim . rational?) (G4eab core-prim . rational-valued?) (G4eaa core-prim . procedure?) (G4ea9 core-prim . positive?) (G4ea8 core-prim . pair?) (G4ea7 core-prim . odd?) (G4ea6 core-prim . numerator) (G4ea5 core-prim . number?) (G4ea4 core-prim . number->string) (G4ea3 core-prim . null?) (G4ea2 core-prim . not) (G4ea1 core-prim . negative?) (G4ea0 core-prim . nan?) (G4e9f core-prim . min) (G4e9e core-prim . max) (G4e9d core-prim . map) (G4e9c core-prim . make-vector) (G4e9b core-prim . make-string) (G4e9a core-prim . make-rectangular) (G4e99 core-prim . make-polar) (G4e98 core-prim . magnitude) (G4e97 core-prim . log) (G4e96 core-prim . list?) (G4e95 core-prim . list-tail) (G4e94 core-prim . list-ref) (G4e93 core-prim . list->vector) (G4e92 core-prim . list->string) (G4e91 core-prim . list) (G4e90 core-prim . length) (G4e8f core-prim . lcm) (G4e8e core-prim . integer?) (G4e8d core-prim . integer-valued?) (G4e8c core-prim . integer->char) (G4e8b core-prim . infinite?) (G4e8a core-prim . inexact?) (G4e89 core-prim . inexact) (G4e88 core-prim . imag-part) (G4e87 core-prim . gcd) (G4e86 core-prim . for-each) (G4e85 core-prim . floor) (G4e84 core-prim . finite?) (G4e83 core-prim . expt) (G4e82 core-prim . exp) (G4e81 core-prim . exact?) (G4e80 core-prim . exact-integer-sqrt) (G4e7f core-prim . exact) (G4e7e core-prim . even?) (G4e7d core-prim . error) (G4e7c core-prim . eqv?) (G4e7b core-prim . equal?) (G4e7a core-prim . eq?) (G4e79 core-prim . dynamic-wind) (G4e78 core-prim . div0-and-mod0) (G4e77 core-prim . mod0) (G4e76 core-prim . div0) (G4e75 core-prim . div-and-mod) (G4e74 core-prim . mod) (G4e73 core-prim . div) (G4e72 core-prim . denominator) (G4e71 core-prim . cos) (G4e70 core-prim . cons) (G4e6f core-prim . complex?) (G4e6e core-prim . char?) (G4e6d core-prim . char>?) (G4e6c core-prim . char>=?) (G4e6b core-prim . char=?) (G4e6a core-prim . char<?) (G4e69 core-prim . char<=?) (G4e68 core-prim . char->integer) (G4e67 core-prim . ceiling) (G4e66 core-prim . call-with-values) (G4e65 core-prim . call/cc) (G4e64 core-prim . call-with-current-continuation) (G4e63 core-prim . cddddr) (G4e62 core-prim . cdddar) (G4e61 core-prim . cddadr) (G4e60 core-prim . cddaar) (G4e5f core-prim . cdaddr) (G4e5e core-prim . cdadar) (G4e5d core-prim . cdaadr) (G4e5c core-prim . cdaaar) (G4e5b core-prim . cadddr) (G4e5a core-prim . caddar) (G4e59 core-prim . cadadr) (G4e58 core-prim . cadaar) (G4e57 core-prim . caaddr) (G4e56 core-prim . caadar) (G4e55 core-prim . caaadr) (G4e54 core-prim . caaaar) (G4e53 core-prim . cdddr) (G4e52 core-prim . cddar) (G4e51 core-prim . cdadr) (G4e50 core-prim . cdaar) (G4e4f core-prim . caddr) (G4e4e core-prim . cadar) (G4e4d core-prim . caadr) (G4e4c core-prim . caaar) (G4e4b core-prim . cddr) (G4e4a core-prim . cdar) (G4e49 core-prim . cadr) (G4e48 core-prim . caar) (G4e47 core-prim . cdr) (G4e46 core-prim . car) (G4e45 core-prim . boolean?) (G4e44 core-prim . boolean=?) (G4e43 core-prim . atan) (G4e42 core-prim . assertion-violation) (G4e41 core-prim . asin) (G4e40 core-prim . apply) (G4e3f core-prim . append) (G4e3e core-prim . angle) (G4e3d core-prim . acos) (G4e3c core-prim . abs) (G4e3b core-prim . /) (G4e3a core-prim . *) (G4e39 core-prim . -) (G4e38 core-prim . +) (G4e37 core-prim . >=) (G4e36 core-prim . >) (G4e35 core-prim . =) (G4e34 core-prim . <=) (G4e33 core-prim . <) (G4e32 core-prim . library) (G4e31 core-prim . export) (G4e30 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e2f $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e2e $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e2d $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e2c $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e2b $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e2a $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e29 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e28 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e27 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e26 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e25 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e24 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e23 $core-rtd &i/o-rtd &i/o-rcd) (G4e22 $core-rtd &undefined-rtd &undefined-rcd) (G4e21 $core-rtd &syntax-rtd &syntax-rcd) (G4e20 $core-rtd &lexical-rtd &lexical-rcd) (G4e1f $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e1e $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e1d $core-rtd &who-rtd &who-rcd) (G4e1c $core-rtd &irritants-rtd &irritants-rcd) (G4e1b $core-rtd &assertion-rtd &assertion-rcd) (G4e1a $core-rtd &violation-rtd &violation-rcd) (G4e19 $core-rtd &error-rtd &error-rcd) (G4e18 $core-rtd &serious-rtd &serious-rcd) (G4e17 $core-rtd &warning-rtd &warning-rcd) (G4e16 $core-rtd &message-rtd &message-rcd) (G4e15 $core-rtd &condition-rtd &condition-rcd) (G4e14 macro . define-condition-type) (G4e13 macro . define-enumeration) (G4e12 macro . define-record-type) (G4e11 macro . parent-rtd) (G4e10 macro . nongenerative) (G4e0f macro . opaque) (G4e0e macro . sealed) (G4e0d macro . protocol) (G4e0c macro . parent) (G4e0b macro . immutable) (G4e0a macro . mutable) (G4e09 macro . fields) (G4e08 macro . error-handling-mode) (G4e07 macro . file-options) (G4e06 macro . buffer-mode) (G4e05 macro . eol-style) (G4e04 macro . guard) (G4e03 macro . trace-define) (G4e02 macro . trace-lambda) (G4e01 macro . unsyntax-splicing) (G4e00 macro . unsyntax) (G4dff macro . unquote-splicing) (G4dfe macro . unquote) (G4dfd macro . _) (G4dfc macro . else) (G4dfb macro . =>) (G4dfa macro . ...) (G4df9 macro . assert) (G4df8 macro . endianness) (G4df7 macro . delay) (G4df6 macro . time) (G4df5 macro . do) (G4df4 macro . cond) (G4df3 macro . let*) (G4df2 macro . let) (G4df1 macro . let*-values) (G4df0 macro . let-values) (G4def macro . identifier-syntax) (G4dee macro . with-syntax) (G4ded macro . quasisyntax) (G4dec macro . quasiquote) (G4deb macro . syntax-rules) (G4dea macro . include) (G4de9 macro . define-struct) (G4de8 core-macro . record-constructor-descriptor) (G4de7 core-macro . record-type-descriptor) (G4de6 macro . case) (G4de5 macro . parameterize) (G4de4 macro . unless) (G4de3 macro . when) (G4de2 core-macro . or) (G4de1 core-macro . and) (G4de0 core-macro . if) (G4ddf core-macro . letrec*) (G4dde core-macro . letrec) (G4ddd core-macro . type-descriptor) (G4ddc core-macro . case-lambda) (G4ddb core-macro . lambda) (G4dda core-macro . syntax) (G4dd9 core-macro . syntax-case) (G4dd8 core-macro . quote) (G4dd7 core-macro . foreign-call) (G4dd6 letrec-syntax) (G4dd5 let-syntax) (G4dd4 set!) (G4dd3 import) (G4dd2 begin) (G4dd1 module) (G4dd0 define-syntax) (G4dcf define)) values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50c4 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50a3) (eval-core . G50a2) (set-symbol-value! . G50a1) (symbol-value . G50a0) (gensym . G509f) (void . G509e)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50c5 '(mosh) '() '() '() '() '((set-symbol-value! . G50a1) (symbol-value . G50a0) (ungensym . G507a) (assoc-ref . G5079) (alist-cons . G5078) (print . G5076) (format . G5075) (standard-library-path . G5074) (file-newer? . G5073) (stat-mtime . G5072) (current-directory . G5071) (write-to-file . G5070) (file->list . G506f) (file->string . G506e) (digit->integer . G506d) (call-with-string-input-port . G506c) (call-with-string-io . G506b) (string-split . G506a) (bytevector-for-each . G5069) (string->regexp . G5068) (rxmatch . G5067) (regexp-replace-all . G5066) (hashtable-for-each . G5065) (get-timeofday . G505a) (get-command-line . G5059) (sys-display . G5058) (source-info . G5057) (make-compiler-instruction . G5056) (make-instruction . G5055) (set-source-info! . G5054) (bignum? . G5053) (make-complex . G5052) (fast-equal? . G5051) (fasl-read . G5050) (fasl-write . G504f) (include . G4dea)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50c6 '(mosh backend) '() '() '() '() '((receive . G504e)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50c7 '(mosh file) '() '() '() '() '((read-line . G509b) (file-newer? . G5073) (stat-mtime . G5072) (current-directory . G5071) (write-to-file . G5070) (file->list . G506f) (file->string . G506e)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50c8 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5069)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50c9 '(mosh number) '() '() '() '() '((digit->integer . G506d)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50ca '(mosh string) '() '() '() '() '((print . G5076) (format . G5075) (call-with-string-input-port . G506c) (call-with-string-io . G506b) (string-split . G506a) (string->regexp . G5068)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50cb '(mosh list) '() '() '() '() '((assoc-ref . G5079)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50cc '(mosh regexp) '() '() '() '() '((rxmatch . G5067) (regexp-replace-all . G5066)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50cd '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5065)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50ce '(mosh parameters) '() '() '() '() '((make-parameter . G2828) (parameterize . G4de5)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50cf '(system) '() '() '() '() '((call-process . G5064) (local-tz-offset . G5063) (microseconds . G5062) (readdir . G5061) (%spawn . G5060) (%waitpid . G505f) (%fork . G505e) (%pipe . G505d) (get-environment-variables . G505c) (get-environment-variable . G505b)) '() values values '#f '#f '#f '#f) (G2b6c@G2a11@install-library 'G50d0 '(srfi :1) '() '() '() '() '((dotted-list? . G509a) (circular-list? . G5099) (proper-list? . G5098) (circular-list . G5097) (last . G5096) (last-pair . G5095) (not-pair? . G5094) (split-at! . G5093) (split-at . G5092) (list= . G5091) (list-copy . G5090) (list-tabulate . G508f) (make-list . G508e) (xcons . G508d) (tenth . G508c) (ninth . G508b) (eighth . G508a) (seventh . G5089) (sixth . G5088) (fifth . G5087) (drop-right! . G5086) (drop-right . G5085) (take-right . G5084) (take! . G5083) (drop . G5082) (take . G5081) (car+cdr . G5080) (third . G507f) (second . G507e) (first . G507d) (iota . G507c) (every . G507b) (alist-cons . G5078) (append-map . G5077)) '() values values '#f '#f '#f '#f))
((lambda (G4cf8@add-library-path! G4cfa@parse-and-add-library-path G4cfc@for-each-with-index G4cfe@conditioon-printer G4d00@repl G4d02@trace-printer G4d04@command-line G4d06@local-library-path G4d08@load/args G4d0a@load G4d0c@ironscheme-build G4d0e@eval-top-level G4d10@compile-system-libraries G4d12@compile G4d14@compile->closure G4d16@pre-compile-r6rs-file G4d18@load-r6rs-top-level) (begin (set! G4cf8@add-library-path! (lambda (G4d33@path) (G2b5c@G29f1@library-path (append (G2b5c@G29f1@library-path) (list G4d33@path))))) (set! G4cfa@parse-and-add-library-path (lambda (G4d35@paths G4d36@message) ((lambda (G4d39@t) (if G4d39@t ((lambda (G4d3b@paths) (for-each (lambda (G4d3d@path) (if (file-exists? G4d3d@path) (G4cf8@add-library-path! G4d3d@path) (format (current-error-port) G4d36@message G4d3d@path))) (reverse (string-split G4d3b@paths '#\:)))) G4d39@t) (void))) G4d35@paths))) (set! G4cfc@for-each-with-index (lambda (G4d3f@proc G4d40@lst) (letrec ((G4d43@loop (lambda (G4d45@i G4d46@lst) (if (null? G4d46@lst) (if '#f '#f (void)) (begin (G4d3f@proc G4d45@i (car G4d46@lst)) (G4d43@loop (+ G4d45@i '1) (cdr G4d46@lst))))))) (G4d43@loop '1 G4d40@lst)))) (set! G4cfe@conditioon-printer (lambda (G4d49@e G4d4a@port) ((lambda (G4d4e@ref) (begin (set! G4d4e@ref (lambda (G4d5d@rtd G4d5e@i G4d5f@x) ((lambda (G4d63@val) (if (symbol? G4d63@val) (ungensym G4d63@val) G4d63@val)) ((record-accessor G4d5d@rtd G4d5e@i) G4d5f@x)))) (begin (display '" Condition components:\n" G4d4a@port) (G4cfc@for-each-with-index (lambda (G4d4f@i G4d50@x) ((lambda (G4d53@rtd) (begin (format G4d4a@port '"   ~d. ~a" G4d4f@i (record-type-name G4d53@rtd)) ((lambda (G4d55@v) ((lambda (G4d57@t) (if (memv G4d57@t '(0)) (newline G4d4a@port) (if (memv G4d57@t '(1)) (begin (display '": " G4d4a@port) (write (G4d4e@ref G4d53@rtd '0 G4d50@x) G4d4a@port) (newline G4d4a@port)) (begin (display '":\n" G4d4a@port) ((letrec ((G4d59@f (lambda (G4d5b@i) (if (not (= G4d5b@i (vector-length G4d55@v))) (begin (display '"       " G4d4a@port) (display (vector-ref G4d55@v G4d5b@i) G4d4a@port) (display '": " G4d4a@port) (write (G4d4e@ref G4d53@rtd G4d5b@i G4d50@x) G4d4a@port) (newline G4d4a@port) (G4d59@f (+ G4d5b@i '1))) (void))))) G4d59@f) '0))))) (vector-length G4d55@v))) (record-type-field-names G4d53@rtd)))) (record-rtd G4d50@x))) (simple-conditions G4d49@e))))) '#f))) (set! G4d00@repl (lambda G4d65@x ((lambda (G4d68@rec) (begin (set! G4d68@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d6b@G4d69) (lambda () (with-exception-handler (lambda (G4d6d@e) ((call/cc (lambda (G4d6f@G4d6a) (G4d6b@G4d69 (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4cfe@conditioon-printer G4d6d@e (current-error-port))) (G4d6f@G4d6a (lambda () (raise-continuable G4d6d@e)))))))))) (lambda () ((letrec ((G4d71@loop (lambda (G4d73@line G4d74@accum) ((lambda (G4d78@parentheses-ok? G4d7a@eval-string-print) (begin (set! G4d78@parentheses-ok? (lambda (G4d7f@text) ((letrec ((G4d81@loop (lambda (G4d83@chars G4d84@p0 G4d85@p1) (if (null? G4d83@chars) (= '0 G4d84@p0 G4d85@p1) ((lambda (G4d89@t) (if (memv G4d89@t '(#\()) (G4d81@loop (cdr G4d83@chars) (+ G4d84@p0 '1) G4d85@p1) (if (memv G4d89@t '(#\))) (G4d81@loop (cdr G4d83@chars) (- G4d84@p0 '1) G4d85@p1) (if (memv G4d89@t '(#\[)) (G4d81@loop (cdr G4d83@chars) G4d84@p0 (+ G4d85@p1 '1)) (if (memv G4d89@t '(#\])) (G4d81@loop (cdr G4d83@chars) G4d84@p0 (- G4d85@p1 '1)) (G4d81@loop (cdr G4d83@chars) G4d84@p0 G4d85@p1)))))) (car G4d83@chars)))))) G4d81@loop) (string->list G4d7f@text) '0 '0))) (set! G4d7a@eval-string-print (lambda (G4d7d@text) (if (not (or (string=? '"\n" G4d7d@text) (= '0 (string-length G4d7d@text)))) (write (G4d0e@eval-top-level (call-with-port (open-string-input-port G4d7d@text) read))) (void)))) (if (eof-object? G4d73@line) (begin (G4d7a@eval-string-print G4d74@accum) (exit)) ((lambda (G4d7b@current) (if (G4d78@parentheses-ok? G4d7b@current) (G4d7a@eval-string-print G4d7b@current) (G4d71@loop (get-line (current-input-port)) G4d7b@current))) (string-append G4d74@accum G4d73@line))))) '#f '#f)))) G4d71@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d68@rec)))) (G4d68@rec))) '#f))) (set! G4d02@trace-printer (G28f3@G2829@make-parameter write)) (set! G4d04@command-line (G28f3@G2829@make-parameter (get-command-line))) (set! G4d06@local-library-path (lambda (G4d8b@filename) (cons '"." (G2b5c@G29f1@library-path)))) (set! G4d08@load/args (lambda (G4d8d@filename . G4d8f@args) (begin (apply G4d18@load-r6rs-top-level G4d8d@filename 'load G4d8f@args) (void)))) (set! G4d0a@load (lambda (G4d91@filename) (begin (apply G4d18@load-r6rs-top-level G4d91@filename 'load (G4d04@command-line)) (void)))) (set! G4d0c@ironscheme-build (lambda () (G4d0a@load '"ironscheme-buildscript.ss"))) (set! G4d0e@eval-top-level (lambda (G4d93@x) (G492e@G3021@eval G4d93@x (G4944@G304d@interaction-environment)))) (set! G4d10@compile-system-libraries (lambda () (G4d0e@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d12@compile (lambda (G4d95@filename) (G4d18@load-r6rs-top-level G4d95@filename 'compile))) (set! G4d14@compile->closure (lambda (G4d97@filename) (G4d18@load-r6rs-top-level G4d97@filename 'closure))) (set! G4d16@pre-compile-r6rs-file (lambda (G4d99@filename) (G4d18@load-r6rs-top-level G4d99@filename 'compile))) (set! G4d18@load-r6rs-top-level (lambda (G4d9b@filename G4d9c@how . G4d9f@args) ((lambda (G4da3@G4da1 G4da4@G4da2) ((lambda (G4da7@swap) (dynamic-wind G4da7@swap (lambda () ((lambda (G4da9@x*) ((lambda (G4dab@t) (if (memv G4dab@t '(closure)) (G4943@G304b@pre-compile-r6rs-top-level G4da9@x*) (if (memv G4dab@t '(load)) ((lambda (G4daf@G4dad G4db0@G4dae) ((lambda (G4db3@swap) (dynamic-wind G4db3@swap (lambda () ((G4942@G3049@compile-r6rs-top-level G4da9@x*))) G4db3@swap)) (lambda () ((lambda (G4db5@t) (begin (G4daf@G4dad G4db0@G4dae) (set! G4db0@G4dae G4db5@t))) (G4daf@G4dad))))) G4d04@command-line (cons G4d9b@filename (car G4d9f@args))) (if (memv G4dab@t '(compile)) (begin (G4942@G3049@compile-r6rs-top-level G4da9@x*) (G2b60@G29f9@serialize-all G28ee@G281f@serialize-library G2948@G2901@compile-core-expr)) (if '#f '#f (void)))))) G4d9c@how)) (with-input-from-file G4d9b@filename (lambda () ((letrec ((G4db7@f (lambda () ((lambda (G4db9@x) (if (eof-object? G4db9@x) '() (cons G4db9@x (G4db7@f)))) (G28e6@G280f@read-annotated))))) G4db7@f)))))) G4da7@swap)) (lambda () ((lambda (G4dbb@t) (begin (G4da3@G4da1 G4da4@G4da2) (set! G4da4@G4da2 G4dbb@t))) (G4da3@G4da1))))) G2b5c@G29f1@library-path (G4d06@local-library-path G4d9b@filename)))) (begin (set! G4dcd@G4d18@load-r6rs-top-level G4d18@load-r6rs-top-level) (set! G4dcc@G4d16@pre-compile-r6rs-file G4d16@pre-compile-r6rs-file) (set! G4dcb@G4d14@compile->closure G4d14@compile->closure) (set! G4dca@G4d12@compile G4d12@compile) (set! G4dc9@G4d10@compile-system-libraries G4d10@compile-system-libraries) (set! G4dc8@G4d0e@eval-top-level G4d0e@eval-top-level) (set! G4dc7@G4d0c@ironscheme-build G4d0c@ironscheme-build) (set! G4dc6@G4d0a@load G4d0a@load) (set! G4dc5@G4d08@load/args G4d08@load/args) (set! G4dc4@G4d06@local-library-path G4d06@local-library-path) (set! G4dc3@G4d04@command-line G4d04@command-line) (set! G4dc2@G4d02@trace-printer G4d02@trace-printer) (set! G4dc1@G4d00@repl G4d00@repl) (set! G4dc0@G4cfe@conditioon-printer G4cfe@conditioon-printer) (set! G4dbf@G4cfc@for-each-with-index G4cfc@for-each-with-index) (set! G4dbe@G4cfa@parse-and-add-library-path G4cfa@parse-and-add-library-path) (set! G4dbd@G4cf8@add-library-path! G4cf8@add-library-path!) (G2b61@G29fb@current-precompiled-library-loader G28ef@G2821@load-serialized-library) (set-symbol-value! 'load G4d0a@load) (set-symbol-value! 'pre-compile-r6rs-file G4d16@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d0e@eval-top-level) (set-symbol-value! 'int-env-syms G4925@G300f@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2947@G28ff@expanded->core) (set-symbol-value! 'trace-printer G4d02@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d19@c) (condition (G4c55@G4a65@make-non-continuable-violation) (G4c4b@G4a4c@make-who-condition 'raise) (G4c0f@G49af@make-message-condition '"returned from non-continuable exception") (G4c41@G4a32@make-irritants-condition (list G4d19@c))))) (G4cfa@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4cfa@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b5c@G29f1@library-path (append (G2b5c@G29f1@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4d1b@prefix) (G2b5d@G29f3@library-extensions (G4d1b@prefix '".mosh" (G2b5d@G29f3@library-extensions)))) (lambda (G4d1d@ext G4d1e@ls) (append (map (lambda (G4d21@x) (string-append G4d1d@ext G4d21@x)) G4d1e@ls) G4d1e@ls))) ((lambda (G4d23@args G4d24@port) ((lambda (G4d28@ref) (begin (set! G4d28@ref (lambda (G4d2b@rtd G4d2c@i G4d2d@x) ((lambda (G4d31@val) (if (symbol? G4d31@val) (ungensym G4d31@val) G4d31@val)) ((record-accessor G4d2b@rtd G4d2c@i) G4d2d@x)))) (with-exception-handler (lambda (G4d29@c) (G4cfe@conditioon-printer G4d29@c (current-error-port))) (lambda () (if (null? G4d23@args) (G4d00@repl) (G4d18@load-r6rs-top-level (car G4d23@args) 'load (cdr G4d23@args))))))) '#f)) (G4d04@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
