;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G288c@read-annotated G288e@annotation-stripped G2890@annotation? G2892@annotation-source G2894@annotation-expression G2896@scm->fasl G2898@fasl-save G289a@fasl-load G289c@serialize-library G289e@load-serialized-library G28a0@make-record-printer G28a2@compile-core G28a4@read-library-source-file G28a6@make-parameter G2940@file-options-spec) (begin (set! G288c@read-annotated read) (set! G288e@annotation-stripped (lambda (G2941@x) (G2894@annotation-expression G2941@x))) (set! G2890@annotation? (lambda (G2943@x) (source-info G2943@x))) (set! G2892@annotation-source (lambda (G2945@x) (source-info G2945@x))) (set! G2894@annotation-expression (lambda (G2947@x) (if (pair? G2947@x) (cons (car G2947@x) (cdr G2947@x)) (display '"line:46\n")))) (set! G2896@scm->fasl (lambda (G2949@filename) (string-append G2949@filename '".fasl"))) (set! G2898@fasl-save (lambda (G294b@filename G294c@obj) (call-with-port (open-file-output-port G294b@filename) (lambda (G294f@port) ((symbol-value 'fasl-write!) G294c@obj G294f@port))))) (set! G289a@fasl-load (lambda (G2951@filename) (call-with-port (open-file-input-port G2951@filename) (symbol-value 'fasl-read!)))) (set! G289c@serialize-library (lambda (G2953@filename G2954@obj) (begin (format '#t '"serialize-library ~a\n..." G2953@filename) ((lambda (G2957@fasl-file) (begin (if (file-exists? G2957@fasl-file) (delete-file G2957@fasl-file) (void)) (call/cc (lambda (G295a@G2959) (with-exception-handler (lambda (G295c@c) (G295a@G2959 (if '#t (begin (format '#t '"Warning:serialize-library failed " G2953@filename) (if (file-exists? G2957@fasl-file) (delete-file G2957@fasl-file) (void)) '#f) (raise G295c@c)))) (lambda () (begin '#f (G2898@fasl-save G2957@fasl-file G2954@obj) (display '"OK\n")))))))) (G2896@scm->fasl G2953@filename))))) (set! G289e@load-serialized-library (lambda (G295e@filename G295f@obj) ((lambda (G2962@fasl-file) (if (if (file-exists? G2962@fasl-file) (begin '#f ((symbol-value 'file-newer?) G2962@fasl-file G295e@filename)) '#f) ((lambda (G2964@expanded2core) ((lambda (G2966@code) ((lambda (G2968@pivot) ((lambda (G296a@visit) ((lambda (G296c@visit-proc) ((lambda () (begin (set-car! G2968@pivot G296c@visit-proc) ((lambda (G296e@pivot) ((lambda (G2970@invoke) ((lambda () (begin (set-car! G296e@pivot (lambda () (eval-core G2970@invoke))) (apply G295f@obj G2966@code))))) (G2964@expanded2core (car G296e@pivot)))) (cdr G2968@pivot)) '#t)))) (lambda () (eval-core G296a@visit)))) (G2964@expanded2core (car G2968@pivot)))) (cddddr (cddddr G2966@code)))) (G289a@fasl-load G2962@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2896@scm->fasl G295e@filename)))) (set! G28a0@make-record-printer (lambda (G2972@name G2973@printer) (lambda G2976@x (begin (display '"record printer") (for-each display G2976@x))))) (set! G28a2@compile-core (lambda G2978@x (apply error 'comile-core '"not implementated" G2978@x))) (set! G28a4@read-library-source-file (lambda (G297a@file-name) (with-input-from-file G297a@file-name G288c@read-annotated))) (set! G28a6@make-parameter (lambda G298a ((lambda (G298b) (if (= G298b '1) (apply (lambda (G297c@x) (G28a6@make-parameter G297c@x (lambda (G297e@x) G297e@x))) G298a) (if (= G298b '2) (apply (lambda (G2980@x G2981@fender) ((lambda (G2984@x) (lambda G2988 ((lambda (G2989) (if (= G2989 '0) (apply (lambda () G2984@x) G2988) (if (= G2989 '1) (apply (lambda (G2986@v) (set! G2984@x (G2981@fender G2986@v))) G2988) (error 'apply '"invalid arg count")))) (length G2988)))) (G2981@fender G2980@x))) G298a) (error 'apply '"invalid arg count")))) (length G298a)))) (set! G2940@file-options-spec (lambda (G298c@x) G298c@x)) (begin (set! G299c@G2940@file-options-spec G2940@file-options-spec) (set! G299b@G28a6@make-parameter G28a6@make-parameter) (set! G299a@G28a4@read-library-source-file G28a4@read-library-source-file) (set! G2999@G28a2@compile-core G28a2@compile-core) (set! G2998@G28a0@make-record-printer G28a0@make-record-printer) (set! G2997@G289e@load-serialized-library G289e@load-serialized-library) (set! G2996@G289c@serialize-library G289c@serialize-library) (set! G2995@G289a@fasl-load G289a@fasl-load) (set! G2994@G2898@fasl-save G2898@fasl-save) (set! G2993@G2896@scm->fasl G2896@scm->fasl) (set! G2992@G2894@annotation-expression G2894@annotation-expression) (set! G2991@G2892@annotation-source G2892@annotation-source) (set! G2990@G2890@annotation? G2890@annotation?) (set! G298f@G288e@annotation-stripped G288e@annotation-stripped) (set! G298e@G288c@read-annotated G288c@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G29a1@current-primitive-locations G29a3@mutable? G29a5@rewriter G29a7@expanded->core G29a9@compile-core-expr G29ab@pretty-print G29ad@compile-core-expr-to-port) (begin (set! G29a1@current-primitive-locations (G299b@G28a6@make-parameter (lambda (G29ae@x) '#f) (lambda (G29b0@p) G29b0@p))) (set! G29a3@mutable? (lambda (G29b2@x) ((lambda (G29b5@simple?) (begin (set! G29b5@simple? (lambda (G29b6@x) ((lambda (G29b8@t) (if G29b8@t G29b8@t ((lambda (G29ba@t) (if G29ba@t G29ba@t ((lambda (G29bc@t) (if G29bc@t G29bc@t ((lambda (G29be@t) (if G29be@t G29be@t ((lambda (G29c0@t) (if G29c0@t G29c0@t ((lambda (G29c2@t) (if G29c2@t G29c2@t (begin '#f (number? G29b6@x)))) (bytevector? G29b6@x)))) (string? G29b6@x)))) (boolean? G29b6@x)))) (symbol? G29b6@x)))) (char? G29b6@x)))) (null? G29b6@x)))) (not (G29b5@simple? G29b2@x)))) '#f))) (set! G29a5@rewriter (lambda (G29c4@quote-hack?) ((lambda (G29c7@f) (begin (set! G29c7@f (lambda (G29c8@x) (if (pair? G29c8@x) ((lambda (G29ca@t) (if (memv G29ca@t '(quote)) (if (if G29c4@quote-hack? (begin '#f (G29a3@mutable? (cadr G29c8@x))) '#f) ((lambda (G29cc@g) (begin (set-symbol-value! G29cc@g (cadr G29c8@x)) G29cc@g)) (gensym)) G29c8@x) (if (memv G29ca@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29ce@x) (cons (car G29ce@x) (map G29c7@f (cdr G29ce@x)))) (cdr G29c8@x))) (if (memv G29ca@t '(lambda)) (cons* 'lambda (cadr G29c8@x) (map G29c7@f (cddr G29c8@x))) (if (memv G29ca@t '(letrec)) ((lambda (G29d0@bindings G29d1@body*) ((lambda (G29d4@lhs* G29d5@rhs*) (cons* 'letrec (map list G29d4@lhs* (map G29c7@f G29d5@rhs*)) (map G29c7@f G29d1@body*))) (map car G29d0@bindings) (map cadr G29d0@bindings))) (cadr G29c8@x) (cddr G29c8@x)) (if (memv G29ca@t '(letrec*)) ((lambda (G29d8@bindings G29d9@body*) ((lambda (G29dc@lhs* G29dd@rhs*) (cons* 'letrec* (map list G29dc@lhs* (map G29c7@f G29dd@rhs*)) (map G29c7@f G29d9@body*))) (map car G29d8@bindings) (map cadr G29d8@bindings))) (cadr G29c8@x) (cddr G29c8@x)) (if (memv G29ca@t '(library-letrec*)) ((lambda (G29e0@name G29e1@x) ((lambda (G29e4@bindings G29e5@body*) ((lambda (G29e8@lhs* G29e9@lhs** G29ea@rhs*) (cons* 'library-letrec* G29e0@name (map list G29e8@lhs* G29e9@lhs** (map G29c7@f G29ea@rhs*)) (map G29c7@f G29e5@body*))) (map car G29e4@bindings) (map cadr G29e4@bindings) (map caddr G29e4@bindings))) (cadr G29e1@x) (cddr G29e1@x))) (cadr G29c8@x) (cdr G29c8@x)) (if (memv G29ca@t '(begin)) (cons 'begin (map G29c7@f (cdr G29c8@x))) (if (memv G29ca@t '(set!)) (list 'set! (cadr G29c8@x) (G29c7@f (caddr G29c8@x))) (if (memv G29ca@t '(primitive)) ((lambda (G29ee@op) ((lambda (G29f0@t) (if G29f0@t ((lambda (G29f2@loc) G29f2@loc) G29f0@t) G29ee@op)) ((G29a1@current-primitive-locations) G29ee@op))) (cadr G29c8@x)) (if (memv G29ca@t '(define)) G29c8@x (if (list? G29c8@x) (map G29c7@f G29c8@x) (error 'rewrite '"invalid form ~s ~s" G29c8@x (list? G29c8@x)))))))))))))) (car G29c8@x)) G29c8@x))) G29c7@f)) '#f))) (set! G29a7@expanded->core (lambda (G29f4@x) ((G29a5@rewriter '#t) G29f4@x))) (set! G29a9@compile-core-expr (lambda (G29f6@x) ((G29a5@rewriter '#f) G29f6@x))) (set! G29ab@pretty-print write) (set! G29ad@compile-core-expr-to-port (lambda (G29f8@x G29f9@p) (G29ab@pretty-print ((G29a5@rewriter '#f) G29f8@x) G29f9@p))) (begin (set! G2a02@G29ad@compile-core-expr-to-port G29ad@compile-core-expr-to-port) (set! G2a01@G29ab@pretty-print G29ab@pretty-print) (set! G2a00@G29a9@compile-core-expr G29a9@compile-core-expr) (set! G29ff@G29a7@expanded->core G29a7@expanded->core) (set! G29fe@G29a5@rewriter G29a5@rewriter) (set! G29fd@G29a3@mutable? G29a3@mutable?) (set! G29fc@G29a1@current-primitive-locations G29a1@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a5c@make-collection G2a5e@current-library-collection G2a64@G2a5f G2a66@G2a61 G2a68@G2a60 G2a6d@library? G2a6f@make-library G2a71@library-id G2a73@library-name G2a75@library-version G2a77@library-imp* G2a79@library-vis* G2a7b@library-inv* G2a7d@library-subst G2a7f@library-env G2a81@library-visit-state G2a83@library-invoke-state G2a85@library-visit-code G2a87@library-invoke-code G2a89@library-visible? G2a8b@library-source-file-name G2a8d@set-library-id! G2a8f@set-library-name! G2a91@set-library-version! G2a93@set-library-imp*! G2a95@set-library-vis*! G2a97@set-library-inv*! G2a99@set-library-subst! G2a9b@set-library-env! G2a9d@set-library-visit-state! G2a9f@set-library-invoke-state! G2aa1@set-library-visit-code! G2aa3@set-library-invoke-code! G2aa5@set-library-visible?! G2aa7@set-library-source-file-name! G2aa9@rp G2aab@find-dependencies G2aad@find-library-by G2aaf@library-path G2ab1@library-extensions G2ab3@library-name->file-name G2ab5@file-locator G2ab7@serialize-all G2ab9@current-precompiled-library-loader G2abb@try-load-from-file G2abd@library-loader G2abf@current-library-expander G2ac1@external-pending-libraries G2ac3@find-external-library G2ac5@find-library-by-name G2ac7@library-exists? G2ac9@find-library-by-spec/die G2acb@label->binding-table G2acd@install-library-record G2acf@install-library G2ad1@imported-label->binding G2ad3@invoke-library G2ad5@visit-library G2ad7@invoke-library-by-spec G2ad9@installed-libraries G2adb@library-spec) (begin (set! G2a5c@make-collection (lambda () ((lambda (G2adc@set) ((lambda (G2adf@set-cons) (begin (set! G2adf@set-cons (lambda (G2ae4@x G2ae5@ls) (if (memq G2ae4@x G2ae5@ls) G2ae5@ls (cons G2ae4@x G2ae5@ls)))) (lambda G2ae2 ((lambda (G2ae3) (if (= G2ae3 '0) (apply (lambda () G2adc@set) G2ae2) (if (= G2ae3 '1) (apply (lambda (G2ae0@x) (set! G2adc@set (G2adf@set-cons G2ae0@x G2adc@set))) G2ae2) (error 'apply '"invalid arg count")))) (length G2ae2))))) '#f)) '()))) (set! G2a5e@current-library-collection (G299b@G28a6@make-parameter (G2a5c@make-collection) (lambda (G2ae8@x) (begin (if (not (procedure? G2ae8@x)) (assertion-violation 'current-library-collection '"not a procedure" G2ae8@x) (void)) G2ae8@x)))) (set! G2a64@G2a5f (make-record-type-descriptor 'library '#f 'G2a62 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a66@G2a61 '#f) (set! G2a68@G2a60 (make-record-constructor-descriptor G2a64@G2a5f '#f G2a66@G2a61)) (set! G2a6d@library? (record-predicate G2a64@G2a5f)) (set! G2a6f@make-library (record-constructor G2a68@G2a60)) (set! G2a71@library-id (record-accessor G2a64@G2a5f '0)) (set! G2a73@library-name (record-accessor G2a64@G2a5f '1)) (set! G2a75@library-version (record-accessor G2a64@G2a5f '2)) (set! G2a77@library-imp* (record-accessor G2a64@G2a5f '3)) (set! G2a79@library-vis* (record-accessor G2a64@G2a5f '4)) (set! G2a7b@library-inv* (record-accessor G2a64@G2a5f '5)) (set! G2a7d@library-subst (record-accessor G2a64@G2a5f '6)) (set! G2a7f@library-env (record-accessor G2a64@G2a5f '7)) (set! G2a81@library-visit-state (record-accessor G2a64@G2a5f '8)) (set! G2a83@library-invoke-state (record-accessor G2a64@G2a5f '9)) (set! G2a85@library-visit-code (record-accessor G2a64@G2a5f '10)) (set! G2a87@library-invoke-code (record-accessor G2a64@G2a5f '11)) (set! G2a89@library-visible? (record-accessor G2a64@G2a5f '12)) (set! G2a8b@library-source-file-name (record-accessor G2a64@G2a5f '13)) (set! G2a8d@set-library-id! (record-mutator G2a64@G2a5f '0)) (set! G2a8f@set-library-name! (record-mutator G2a64@G2a5f '1)) (set! G2a91@set-library-version! (record-mutator G2a64@G2a5f '2)) (set! G2a93@set-library-imp*! (record-mutator G2a64@G2a5f '3)) (set! G2a95@set-library-vis*! (record-mutator G2a64@G2a5f '4)) (set! G2a97@set-library-inv*! (record-mutator G2a64@G2a5f '5)) (set! G2a99@set-library-subst! (record-mutator G2a64@G2a5f '6)) (set! G2a9b@set-library-env! (record-mutator G2a64@G2a5f '7)) (set! G2a9d@set-library-visit-state! (record-mutator G2a64@G2a5f '8)) (set! G2a9f@set-library-invoke-state! (record-mutator G2a64@G2a5f '9)) (set! G2aa1@set-library-visit-code! (record-mutator G2a64@G2a5f '10)) (set! G2aa3@set-library-invoke-code! (record-mutator G2a64@G2a5f '11)) (set! G2aa5@set-library-visible?! (record-mutator G2a64@G2a5f '12)) (set! G2aa7@set-library-source-file-name! (record-mutator G2a64@G2a5f '13)) (set! G2aa9@rp (G2998@G28a0@make-record-printer 'library (lambda (G2aea@x G2aeb@p G2aec@wr) (begin (if (not (G2a6d@library? G2aea@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a75@library-version G2aea@x)) (G2a73@library-name G2aea@x) (append (G2a73@library-name G2aea@x) (list (G2a75@library-version G2aea@x))))) G2aeb@p))))) (set! G2aab@find-dependencies (lambda (G2af0@ls) (if (null? G2af0@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2aad@find-library-by (lambda (G2af2@pred) ((letrec ((G2af4@f (lambda (G2af6@ls) (if (null? G2af6@ls) '#f (if (G2af2@pred (car G2af6@ls)) (car G2af6@ls) (G2af4@f (cdr G2af6@ls))))))) G2af4@f) ((G2a5e@current-library-collection))))) (set! G2aaf@library-path (G299b@G28a6@make-parameter '(".") (lambda (G2af8@x) (if (if (list? G2af8@x) (begin '#f (for-all string? G2af8@x)) '#f) (map (lambda (G2afa@x) G2afa@x) G2af8@x) (assertion-violation 'library-path '"not a list of strings" G2af8@x))))) (set! G2ab1@library-extensions (G299b@G28a6@make-parameter '(".sls" ".ss" ".scm") (lambda (G2afc@x) (if (if (list? G2afc@x) (begin '#f (for-all string? G2afc@x)) '#f) (map (lambda (G2afe@x) G2afe@x) G2afc@x) (assertion-violation 'library-extensions '"not a list of strings" G2afc@x))))) (set! G2ab3@library-name->file-name (lambda (G2b00@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2b04@G2b02 G2b05@G2b03) ((lambda (G2b08@extract G2b09@p) ((lambda (G2b0d@display-hex) (begin (set! G2b0d@display-hex (lambda (G2b1c@n) (if (<= '0 G2b1c@n '9) (display G2b1c@n G2b09@p) (display (integer->char (+ (char->integer '#\A) (- G2b1c@n '10))) G2b09@p)))) (begin ((letrec ((G2b0e@f (lambda (G2b10@ls) (if (not (null? G2b10@ls)) (begin (display '"/" G2b09@p) (for-each (lambda (G2b12@c) (if ((lambda (G2b14@t) (if G2b14@t G2b14@t ((lambda (G2b16@t) (if G2b16@t G2b16@t ((lambda (G2b18@t) (if G2b18@t G2b18@t (begin '#f (memv G2b12@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2b12@c '#\9)))) (char<=? '#\A G2b12@c '#\Z)))) (char<=? '#\a G2b12@c '#\z)) (display G2b12@c G2b09@p) (begin (display '"%" G2b09@p) ((lambda (G2b1a@n) (begin (G2b0d@display-hex (quotient G2b1a@n '16)) (G2b0d@display-hex (remainder G2b1a@n '16)))) (char->integer G2b12@c))))) (string->list (symbol->string (car G2b10@ls)))) (G2b0e@f (cdr G2b10@ls))) (void))))) G2b0e@f) G2b00@x) (G2b08@extract)))) '#f)) G2b05@G2b03 G2b04@G2b02))))) (set! G2ab5@file-locator (G299b@G28a6@make-parameter (lambda (G2b1e@x) ((lambda (G2b20@str) ((letrec ((G2b22@f (lambda (G2b24@ls G2b25@exts G2b26@failed-list) (if (null? G2b24@ls) ((lambda () ((lambda (G2b32@G2b2d G2b34@G2b2f G2b36@G2b2e G2b3b@G2b2c G2b3d@make-library-resolution-condition G2b3f@G2b2a G2b41@G2b2b G2b43@library-resolution-condition? G2b45@condition-library G2b47@condition-files) (begin (set! G2b32@G2b2d (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b30 '#f '#f '#((immutable library) (immutable files)))) (set! G2b34@G2b2f '#f) (set! G2b36@G2b2e (make-record-constructor-descriptor G2b32@G2b2d &condition-rcd G2b34@G2b2f)) (set! G2b3b@G2b2c (record-predicate G2b32@G2b2d)) (set! G2b3d@make-library-resolution-condition (record-constructor G2b36@G2b2e)) (set! G2b3f@G2b2a (record-accessor G2b32@G2b2d '0)) (set! G2b41@G2b2b (record-accessor G2b32@G2b2d '1)) (set! G2b43@library-resolution-condition? (condition-predicate G2b32@G2b2d)) (set! G2b45@condition-library (condition-accessor G2b32@G2b2d G2b3f@G2b2a)) (set! G2b47@condition-files (condition-accessor G2b32@G2b2d G2b41@G2b2b)) (raise (condition (G4c20@G4b36@make-error) (G4c3a@G4b8c@make-who-condition 'expander) (G4c0c@G4af6@make-message-condition '"cannot locate library in library-path") (G2b3d@make-library-resolution-condition G2b1e@x (reverse G2b26@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b25@exts) (G2b22@f (cdr G2b24@ls) (G2ab1@library-extensions) G2b26@failed-list) ((lambda (G2b48@name) (if (file-exists? G2b48@name) G2b48@name (G2b22@f G2b24@ls (cdr G2b25@exts) (cons G2b48@name G2b26@failed-list)))) (string-append (car G2b24@ls) G2b20@str (car G2b25@exts)))))))) G2b22@f) (G2aaf@library-path) (G2ab1@library-extensions) '())) (G2ab3@library-name->file-name G2b1e@x))) (lambda (G2b4a@f) (if (procedure? G2b4a@f) G2b4a@f (assertion-violation 'file-locator '"not a procedure" G2b4a@f))))) (set! G2ab7@serialize-all (lambda (G2b4c@serialize G2b4d@compile) ((lambda (G2b51@library-desc) (begin (set! G2b51@library-desc (lambda (G2b54@x) (list (G2a71@library-id G2b54@x) (G2a73@library-name G2b54@x)))) (for-each (lambda (G2b52@x) (if (G2a8b@library-source-file-name G2b52@x) (G2b4c@serialize (G2a8b@library-source-file-name G2b52@x) (list (G2a71@library-id G2b52@x) (G2a73@library-name G2b52@x) (G2a75@library-version G2b52@x) (map G2b51@library-desc (G2a77@library-imp* G2b52@x)) (map G2b51@library-desc (G2a79@library-vis* G2b52@x)) (map G2b51@library-desc (G2a7b@library-inv* G2b52@x)) (G2a7d@library-subst G2b52@x) (G2a7f@library-env G2b52@x) (G2b4d@compile (G2a85@library-visit-code G2b52@x)) (G2b4d@compile (G2a87@library-invoke-code G2b52@x)) (G2a89@library-visible? G2b52@x))) (void))) ((G2a5e@current-library-collection))))) '#f))) (set! G2ab9@current-precompiled-library-loader (G299b@G28a6@make-parameter (lambda (G2b56@filename G2b57@sk) '#f))) (set! G2abb@try-load-from-file (lambda (G2b5a@filename) ((G2ab9@current-precompiled-library-loader) G2b5a@filename (lambda G2b80 ((lambda (G2b81) (if (= G2b81 '11) (apply (lambda (G2b5c@id G2b5d@name G2b5e@ver G2b5f@imp* G2b60@vis* G2b61@inv* G2b62@exp-subst G2b63@exp-env G2b64@visit-proc G2b65@invoke-proc G2b66@visible?) ((letrec ((G2b72@f (lambda (G2b74@deps) (if (null? G2b74@deps) (begin (G2acf@install-library G2b5c@id G2b5d@name G2b5e@ver G2b5f@imp* G2b60@vis* G2b61@inv* G2b62@exp-subst G2b63@exp-env G2b64@visit-proc G2b65@invoke-proc '#f '#f G2b66@visible? '#f) '#t) ((lambda (G2b76@d) ((lambda (G2b78@label G2b79@dname) ((lambda (G2b7c@l) (if (if (G2a6d@library? G2b7c@l) (begin '#f (eq? G2b78@label (G2a71@library-id G2b7c@l))) '#f) (G2b72@f (cdr G2b74@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b5d@name G2b79@dname G2b5a@filename G2b7c@l G2b78@label (G2a71@library-id G2b7c@l)) '#f))) (G2ac5@find-library-by-name G2b79@dname))) (car G2b76@d) (cadr G2b76@d))) (car G2b74@deps)))))) G2b72@f) (append G2b5f@imp* G2b60@vis* G2b61@inv*))) G2b80) (if (>= G2b81 '0) (apply (lambda G2b7e@others '#f) G2b80) (error 'apply '"invalid arg count")))) (length G2b80)))))) (set! G2abd@library-loader (G299b@G28a6@make-parameter (lambda (G2b82@x) ((lambda (G2b84@file-name) (if (not G2b84@file-name) (assertion-violation '#f '"cannot file library" G2b82@x) ((lambda (G2b86@t) (if G2b86@t G2b86@t (begin '#f ((G2abf@current-library-expander) (G299a@G28a4@read-library-source-file G2b84@file-name) G2b84@file-name (lambda (G2b88@name) (if (not (equal? G2b88@name G2b82@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b8c@G2b8a G2b8d@G2b8b) ((lambda (G2b90@e G2b91@p) (begin (display '"expected to find library " G2b91@p) (write G2b82@x G2b91@p) (display '" in file " G2b91@p) (display G2b84@file-name G2b91@p) (display '", found " G2b91@p) (write G2b88@name G2b91@p) (display '" instead" G2b91@p) (G2b90@e))) G2b8d@G2b8b G2b8c@G2b8a)))) (void))))))) (G2abb@try-load-from-file G2b84@file-name)))) ((G2ab5@file-locator) G2b82@x))) (lambda (G2b94@f) (if (procedure? G2b94@f) G2b94@f (assertion-violation 'library-locator '"not a procedure" G2b94@f))))) (set! G2abf@current-library-expander (G299b@G28a6@make-parameter (lambda (G2b96@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b98@f) (if (procedure? G2b98@f) G2b98@f (assertion-violation 'library-expander '"not a procedure" G2b98@f))))) (set! G2ac1@external-pending-libraries (G299b@G28a6@make-parameter '())) (set! G2ac3@find-external-library (lambda (G2b9a@name) (begin (if (member G2b9a@name (G2ac1@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b9a@name) (void)) ((lambda (G2b9e@G2b9c@external-pending-libraries G2b9f@G2b9d@external-pending-libraries) ((lambda (G2ba2@swap) (dynamic-wind G2ba2@swap (lambda () (begin ((G2abd@library-loader) G2b9a@name) ((lambda (G2ba4@t) (if G2ba4@t G2ba4@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b9a@name)))) (G2aad@find-library-by (lambda (G2ba6@x) (equal? (G2a73@library-name G2ba6@x) G2b9a@name)))))) G2ba2@swap)) (lambda () ((lambda (G2ba8@t) (begin (G2b9e@G2b9c@external-pending-libraries G2b9f@G2b9d@external-pending-libraries) (set! G2b9f@G2b9d@external-pending-libraries G2ba8@t))) (G2b9e@G2b9c@external-pending-libraries))))) G2ac1@external-pending-libraries (cons G2b9a@name (G2ac1@external-pending-libraries)))))) (set! G2ac5@find-library-by-name (lambda (G2baa@name) ((lambda (G2bac@t) (if G2bac@t G2bac@t (begin '#f (G2ac3@find-external-library G2baa@name)))) (G2aad@find-library-by (lambda (G2bae@x) (equal? (G2a73@library-name G2bae@x) G2baa@name)))))) (set! G2ac7@library-exists? (lambda (G2bb0@name) (if (G2aad@find-library-by (lambda (G2bb2@x) (equal? (G2a73@library-name G2bb2@x) G2bb0@name))) (begin '#f '#t) '#f))) (set! G2ac9@find-library-by-spec/die (lambda (G2bb4@spec) ((lambda (G2bb6@id) ((lambda (G2bb8@t) (if G2bb8@t G2bb8@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2bb4@spec)))) (G2aad@find-library-by (lambda (G2bba@x) (eq? G2bb6@id (G2a71@library-id G2bba@x)))))) (car G2bb4@spec)))) (set! G2acb@label->binding-table (make-eq-hashtable)) (set! G2acd@install-library-record (lambda (G2bbc@lib) (begin ((lambda (G2bbe@exp-env) (for-each (lambda (G2bc0@x) ((lambda (G2bc2@label G2bc3@binding) ((lambda (G2bc6@binding) (hashtable-set! G2acb@label->binding-table G2bc2@label G2bc6@binding)) ((lambda (G2bc8@t) (if (memv G2bc8@t '(global)) (cons 'global (cons G2bbc@lib (cdr G2bc3@binding))) (if (memv G2bc8@t '(global-macro)) (cons 'global-macro (cons G2bbc@lib (cdr G2bc3@binding))) (if (memv G2bc8@t '(global-macro!)) (cons 'global-macro! (cons G2bbc@lib (cdr G2bc3@binding))) G2bc3@binding)))) (car G2bc3@binding)))) (car G2bc0@x) (cdr G2bc0@x))) G2bbe@exp-env)) (G2a7f@library-env G2bbc@lib)) ((G2a5e@current-library-collection) G2bbc@lib)))) (set! G2acf@install-library (lambda (G2bca@id G2bcb@name G2bcc@ver G2bcd@imp* G2bce@vis* G2bcf@inv* G2bd0@exp-subst G2bd1@exp-env G2bd2@visit-proc G2bd3@invoke-proc G2bd4@visit-code G2bd5@invoke-code G2bd6@visible? G2bd7@source-file-name) ((lambda (G2be6@imp-lib* G2be7@vis-lib* G2be8@inv-lib*) (begin (if (not (if (symbol? G2bca@id) (if (list? G2bcb@name) (begin '#f (list? G2bcc@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2bca@id G2bcb@name G2bcc@ver) (void)) (if (G2ac7@library-exists? G2bcb@name) (assertion-violation 'install-library '"library is already installed" G2bcb@name) (void)) ((lambda (G2bec@lib) (G2acd@install-library-record G2bec@lib)) (G2a6f@make-library G2bca@id G2bcb@name G2bcc@ver G2be6@imp-lib* G2be7@vis-lib* G2be8@inv-lib* G2bd0@exp-subst G2bd1@exp-env G2bd2@visit-proc G2bd3@invoke-proc G2bd4@visit-code G2bd5@invoke-code G2bd6@visible? G2bd7@source-file-name)))) (map G2ac9@find-library-by-spec/die G2bcd@imp*) (map G2ac9@find-library-by-spec/die G2bce@vis*) (map G2ac9@find-library-by-spec/die G2bcf@inv*)))) (set! G2ad1@imported-label->binding (lambda (G2bee@lab) (hashtable-ref G2acb@label->binding-table G2bee@lab '#f))) (set! G2ad3@invoke-library (lambda (G2bf0@lib) ((lambda (G2bf2@invoke) (if (procedure? G2bf2@invoke) (begin (G2a9f@set-library-invoke-state! G2bf0@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bf0@lib))) (for-each G2ad3@invoke-library (G2a7b@library-inv* G2bf0@lib)) (G2a9f@set-library-invoke-state! G2bf0@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bf0@lib))) (G2bf2@invoke) (G2a9f@set-library-invoke-state! G2bf0@lib '#t)) (void))) (G2a83@library-invoke-state G2bf0@lib)))) (set! G2ad5@visit-library (lambda (G2bf4@lib) ((lambda (G2bf6@visit) (if (procedure? G2bf6@visit) (begin (G2a9d@set-library-visit-state! G2bf4@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bf4@lib))) (for-each G2ad3@invoke-library (G2a79@library-vis* G2bf4@lib)) (G2a9d@set-library-visit-state! G2bf4@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bf4@lib))) (G2bf6@visit) (G2a9d@set-library-visit-state! G2bf4@lib '#t)) (void))) (G2a81@library-visit-state G2bf4@lib)))) (set! G2ad7@invoke-library-by-spec (lambda (G2bf8@spec) (G2ad3@invoke-library (G2ac9@find-library-by-spec/die G2bf8@spec)))) (set! G2ad9@installed-libraries (lambda G2c02 ((lambda (G2c03) (if (= G2c03 '1) (apply (lambda (G2bfa@all?) ((letrec ((G2bfc@f (lambda (G2bfe@ls) (if (null? G2bfe@ls) '() (if ((lambda (G2c00@t) (if G2c00@t G2c00@t (begin '#f (G2a89@library-visible? (car G2bfe@ls))))) G2bfa@all?) (cons (car G2bfe@ls) (G2bfc@f (cdr G2bfe@ls))) (G2bfc@f (cdr G2bfe@ls))))))) G2bfc@f) ((G2a5e@current-library-collection)))) G2c02) (if (= G2c03 '0) (apply (lambda () (G2ad9@installed-libraries '#f)) G2c02) (error 'apply '"invalid arg count")))) (length G2c02)))) (set! G2adb@library-spec (lambda (G2c04@x) (begin (if (not (G2a6d@library? G2c04@x)) (assertion-violation 'library-spec '"not a library" G2c04@x) (void)) (list (G2a71@library-id G2c04@x) (G2a73@library-name G2c04@x) (G2a75@library-version G2c04@x))))) (begin (set! G2c42@G2adb@library-spec G2adb@library-spec) (set! G2c41@G2ad9@installed-libraries G2ad9@installed-libraries) (set! G2c40@G2ad7@invoke-library-by-spec G2ad7@invoke-library-by-spec) (set! G2c3f@G2ad5@visit-library G2ad5@visit-library) (set! G2c3e@G2ad3@invoke-library G2ad3@invoke-library) (set! G2c3d@G2ad1@imported-label->binding G2ad1@imported-label->binding) (set! G2c3c@G2acf@install-library G2acf@install-library) (set! G2c3b@G2acd@install-library-record G2acd@install-library-record) (set! G2c3a@G2acb@label->binding-table G2acb@label->binding-table) (set! G2c39@G2ac9@find-library-by-spec/die G2ac9@find-library-by-spec/die) (set! G2c38@G2ac7@library-exists? G2ac7@library-exists?) (set! G2c37@G2ac5@find-library-by-name G2ac5@find-library-by-name) (set! G2c36@G2ac3@find-external-library G2ac3@find-external-library) (set! G2c35@G2ac1@external-pending-libraries G2ac1@external-pending-libraries) (set! G2c34@G2abf@current-library-expander G2abf@current-library-expander) (set! G2c33@G2abd@library-loader G2abd@library-loader) (set! G2c32@G2abb@try-load-from-file G2abb@try-load-from-file) (set! G2c31@G2ab9@current-precompiled-library-loader G2ab9@current-precompiled-library-loader) (set! G2c30@G2ab7@serialize-all G2ab7@serialize-all) (set! G2c2f@G2ab5@file-locator G2ab5@file-locator) (set! G2c2e@G2ab3@library-name->file-name G2ab3@library-name->file-name) (set! G2c2d@G2ab1@library-extensions G2ab1@library-extensions) (set! G2c2c@G2aaf@library-path G2aaf@library-path) (set! G2c2b@G2aad@find-library-by G2aad@find-library-by) (set! G2c2a@G2aab@find-dependencies G2aab@find-dependencies) (set! G2c29@G2aa9@rp G2aa9@rp) (set! G2c28@G2aa7@set-library-source-file-name! G2aa7@set-library-source-file-name!) (set! G2c27@G2aa5@set-library-visible?! G2aa5@set-library-visible?!) (set! G2c26@G2aa3@set-library-invoke-code! G2aa3@set-library-invoke-code!) (set! G2c25@G2aa1@set-library-visit-code! G2aa1@set-library-visit-code!) (set! G2c24@G2a9f@set-library-invoke-state! G2a9f@set-library-invoke-state!) (set! G2c23@G2a9d@set-library-visit-state! G2a9d@set-library-visit-state!) (set! G2c22@G2a9b@set-library-env! G2a9b@set-library-env!) (set! G2c21@G2a99@set-library-subst! G2a99@set-library-subst!) (set! G2c20@G2a97@set-library-inv*! G2a97@set-library-inv*!) (set! G2c1f@G2a95@set-library-vis*! G2a95@set-library-vis*!) (set! G2c1e@G2a93@set-library-imp*! G2a93@set-library-imp*!) (set! G2c1d@G2a91@set-library-version! G2a91@set-library-version!) (set! G2c1c@G2a8f@set-library-name! G2a8f@set-library-name!) (set! G2c1b@G2a8d@set-library-id! G2a8d@set-library-id!) (set! G2c1a@G2a8b@library-source-file-name G2a8b@library-source-file-name) (set! G2c19@G2a89@library-visible? G2a89@library-visible?) (set! G2c18@G2a87@library-invoke-code G2a87@library-invoke-code) (set! G2c17@G2a85@library-visit-code G2a85@library-visit-code) (set! G2c16@G2a83@library-invoke-state G2a83@library-invoke-state) (set! G2c15@G2a81@library-visit-state G2a81@library-visit-state) (set! G2c14@G2a7f@library-env G2a7f@library-env) (set! G2c13@G2a7d@library-subst G2a7d@library-subst) (set! G2c12@G2a7b@library-inv* G2a7b@library-inv*) (set! G2c11@G2a79@library-vis* G2a79@library-vis*) (set! G2c10@G2a77@library-imp* G2a77@library-imp*) (set! G2c0f@G2a75@library-version G2a75@library-version) (set! G2c0e@G2a73@library-name G2a73@library-name) (set! G2c0d@G2a71@library-id G2a71@library-id) (set! G2c0c@G2a6f@make-library G2a6f@make-library) (set! G2c0b@G2a6d@library? G2a6d@library?) (set! G2c0a@G2a68@G2a60 G2a68@G2a60) (set! G2c09@G2a66@G2a61 G2a66@G2a61) (set! G2c08@G2a64@G2a5f G2a64@G2a5f) (set! G2c07@G2a5e@current-library-collection G2a5e@current-library-collection) (set! G2c06@G2a5c@make-collection G2a5c@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c45@build-global-define G2cc9@build-lambda G2ccb@build-case-lambda G2ccd@build-let G2d15@build-sequence G2d17@build-void G2d19@build-letrec G2d1b@build-letrec* G2d1d@build-library-letrec* G2d1f@build-receive) (begin (set! G2c45@build-global-define (lambda (G2d20@x) (G2d17@build-void))) (set! G2cc9@build-lambda (lambda (G2d22@ae G2d23@vars G2d24@exp) (list 'lambda G2d23@vars G2d24@exp))) (set! G2ccb@build-case-lambda (lambda (G2d28@ae G2d29@vars* G2d2a@exp*) ((lambda (G2d2f@build-error G2d31@build-pred G2d33@build-apply G2d35@expand-case-lambda) (begin (set! G2d2f@build-error (lambda (G2d64@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d31@build-pred (lambda (G2d4e@ae G2d4f@n G2d50@vars) (call-with-values (lambda () ((letrec ((G2d56@f (lambda (G2d58@vars G2d59@count) (if (pair? G2d58@vars) (G2d56@f (cdr G2d58@vars) (+ G2d59@count '1)) (if (null? G2d58@vars) (values G2d59@count '=) (values G2d59@count '>=)))))) G2d56@f) G2d50@vars '0)) (lambda (G2d5c@G2d54 G2d5d@G2d55) ((lambda (G2d60@pred G2d61@count) (list (list 'primitive G2d60@pred) G2d4f@n (list 'quote G2d61@count))) G2d5d@G2d55 G2d5c@G2d54))))) (set! G2d33@build-apply (lambda (G2d46@ae G2d47@g G2d48@vars G2d49@exp) (list '(primitive apply) (G2cc9@build-lambda G2d46@ae G2d48@vars G2d49@exp) G2d47@g))) (set! G2d35@expand-case-lambda (lambda (G2d36@ae G2d37@vars G2d38@exp*) ((lambda (G2d3c@g G2d3d@n) (list 'lambda G2d3c@g (G2ccd@build-let G2d36@ae (list G2d3d@n) (list (list '(primitive length) G2d3c@g)) ((letrec ((G2d40@f (lambda (G2d42@vars* G2d43@exp*) (if (null? G2d42@vars*) (G2d2f@build-error G2d36@ae) (list 'if (G2d31@build-pred G2d36@ae G2d3d@n (car G2d42@vars*)) (G2d33@build-apply G2d36@ae G2d3c@g (car G2d42@vars*) (car G2d43@exp*)) (G2d40@f (cdr G2d42@vars*) (cdr G2d43@exp*))))))) G2d40@f) G2d29@vars* G2d38@exp*)))) (gensym) (gensym)))) (if (= (length G2d2a@exp*) '1) (G2cc9@build-lambda G2d28@ae (car G2d29@vars*) (car G2d2a@exp*)) (G2d35@expand-case-lambda G2d28@ae G2d29@vars* G2d2a@exp*)))) '#f '#f '#f '#f))) (set! G2ccd@build-let (lambda (G2d66@ae G2d67@lhs* G2d68@rhs* G2d69@body) (cons (G2cc9@build-lambda G2d66@ae G2d67@lhs* G2d69@body) G2d68@rhs*))) (set! G2d15@build-sequence (lambda (G2d6e@ae G2d6f@exps) ((letrec ((G2d72@loop (lambda (G2d74@exps) (if (null? (cdr G2d74@exps)) (car G2d74@exps) (if (equal? (car G2d74@exps) (G2d17@build-void)) (G2d72@loop (cdr G2d74@exps)) (cons 'begin G2d74@exps)))))) G2d72@loop) G2d6f@exps))) (set! G2d17@build-void (lambda () '((primitive void)))) (set! G2d19@build-letrec (lambda (G2d76@ae G2d77@vars G2d78@val-exps G2d79@body-exp) (if (null? G2d77@vars) G2d79@body-exp (list 'letrec (map list G2d77@vars G2d78@val-exps) G2d79@body-exp)))) (set! G2d1b@build-letrec* (lambda (G2d7e@ae G2d7f@vars G2d80@val-exps G2d81@body-exp) (if (null? G2d7f@vars) G2d81@body-exp (G2ccd@build-let G2d7e@ae G2d7f@vars (map (lambda (G2d86@x) (list 'quote '#f)) G2d7f@vars) (G2d15@build-sequence G2d7e@ae (append (map (lambda (G2d88@lhs G2d89@rhs) (list 'set! G2d88@lhs G2d89@rhs)) G2d7f@vars G2d80@val-exps) (list G2d81@body-exp))))))) (set! G2d1d@build-library-letrec* (lambda (G2d8c@ae G2d8d@name G2d8e@vars G2d8f@locs G2d90@val-exps G2d91@body-exp) (list 'library-letrec* G2d8d@name (map list G2d8e@vars G2d8f@locs G2d90@val-exps) G2d91@body-exp))) (set! G2d1f@build-receive (lambda (G2d98@ae G2d99@vars G2d9a@producer G2d9b@body*) (begin (display '"************** in ") (cons 'receive (cons G2d99@vars (cons G2d9a@producer G2d9b@body*)))))) (begin (set! G2da9@G2d1f@build-receive G2d1f@build-receive) (set! G2da8@G2d1d@build-library-letrec* G2d1d@build-library-letrec*) (set! G2da7@G2d1b@build-letrec* G2d1b@build-letrec*) (set! G2da6@G2d19@build-letrec G2d19@build-letrec) (set! G2da5@G2d17@build-void G2d17@build-void) (set! G2da4@G2d15@build-sequence G2d15@build-sequence) (set! G2da3@G2ccd@build-let G2ccd@build-let) (set! G2da2@G2ccb@build-case-lambda G2ccb@build-case-lambda) (set! G2da1@G2cc9@build-lambda G2cc9@build-lambda) (set! G2da0@G2c45@build-global-define G2c45@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2db6@set-cons G2db8@set-union G2dbd@top-mark* G2dbf@top-marked? G2dc1@gen-lexical G2dc3@gen-global G2dc5@gen-label G2dc7@gen-top-level-label G2dc9@gen-define-label+loc G2dcb@gen-define-label G2dd1@G2dcc G2dd3@G2dce G2dd5@G2dcd G2dda@rib? G2ddc@make-rib G2dde@rib-sym* G2de0@rib-mark** G2de2@rib-label* G2de4@rib-sealed/freq G2de6@rib-cache G2de8@set-rib-sym*! G2dea@set-rib-mark**! G2dec@set-rib-label*! G2dee@set-rib-sealed/freq! G2df0@set-rib-cache! G2df2@make-empty-rib G2df4@make-cache-rib G2df6@find-label G2df8@extend-rib! G2dfa@extend-rib/nc! G2dfc@make-rib-map G2dfe@seal-rib! G2e00@unseal-rib! G2e02@make-full-rib G2e08@G2e03 G2e0a@G2e05 G2e0c@G2e04 G2e11@stx? G2e13@make-stx G2e15@stx-expr G2e17@stx-mark* G2e19@stx-subst* G2e1b@stx-ae* G2e1d@set-stx-expr! G2e1f@set-stx-mark*! G2e21@set-stx-subst*! G2e23@set-stx-ae*! G2e25@rp G2e27@datum->stx G2e29@gen-mark G2e2b@anti-mark G2e2d@anti-mark? G2e2f@join-wraps G2e31@mkstx G2e33@add-mark G2e35@add-subst G2e37@syntax-kind? G2e39@syntax-vector->list G2e3b@syntax-pair? G2e3d@syntax-vector? G2e3f@syntax-null? G2e41@syntax-list? G2e43@syntax-car G2e45@syntax-cdr G2e47@syntax->list G2e49@id? G2e4b@id->sym G2e4d@same-marks? G2e4f@bound-id=? G2e51@free-id=? G2e53@valid-bound-ids? G2e55@distinct-bound-ids? G2e57@bound-id-member? G2e59@self-evaluating? G2e5b@strip-annotations G2e5d@strip G2e5f@stx->datum G2e61@same-marks*? G2e63@id->label G2e65@id->real-label G2e67@label->binding G2e69@make-binding G2e6b@binding-type G2e6d@binding-value G2e6f@raise-unbound-error G2e71@syntax-type G2e88@sanitize-binding G2e8a@make-variable-transformer G2e8c@variable-transformer? G2e8e@variable-transformer-procedure G2e90@make-eval-transformer G3014@parse-define G3016@parse-define-syntax G3018@scheme-stx-hashtable G301a@scheme-stx G301c@lexical-var G301e@lexical-mutable? G3020@set-lexical-mutable! G3022@add-lexical G3024@add-lexicals G3026@letrec-helper G3028@letrec-transformer G302a@letrec*-transformer G302c@fluid-let-syntax-transformer G302e@type-descriptor-transformer G3030@record-type-descriptor-transformer G3032@record-constructor-descriptor-transformer G3034@when-macro G3036@unless-macro G3038@if-transformer G303a@case-macro G303c@quote-transformer G303e@case-lambda-transformer G3040@lambda-transformer G3042@bless G3044@with-syntax-macro G3046@invalid-fmls-error G3048@let-macro G304a@let-values-macro G304c@let*-values-macro G304e@trace-lambda-macro G3050@trace-define-macro G3052@trace-define-syntax-macro G3054@trace-let/rec-syntax G3056@trace-let-syntax-macro G3058@trace-letrec-syntax-macro G305a@guard-macro G305c@define-enumeration-macro G305e@time-macro G3060@delay-macro G3062@assert-macro G3064@endianness-macro G3066@identifier-syntax-macro G3068@do-macro G306a@let*-macro G306c@or-macro G306e@and-macro G3070@cond-macro G3072@do-include G3074@include-macro G3076@include-into-macro G3078@syntax-rules-macro G307a@quasiquote-macro G307c@quasisyntax-macro G307e@define-struct-macro G3080@define-record-type-macro G3082@define-condition-type-macro G3084@incorrect-usage-macro G3086@parameterize-macro G3088@foreign-call-transformer G308a@convert-pattern G308c@syntax-dispatch G308e@ellipsis? G3090@underscore? G3092@verify-literals G3094@syntax-case-transformer G3096@ellipsis-map G3098@syntax-transformer G309a@core-macro-transformer G309c@file-options-macro G309e@symbol-macro G30a0@macro-transformer G30a2@local-macro-transformer G30a4@do-macro-call G30a6@chi-macro G30a8@chi-local-macro G30aa@chi-global-macro G30ac@chi-expr* G30ae@chi-application G30b0@chi-expr G30b2@chi-set! G30b4@verify-formals G30b6@chi-lambda-clause G30b8@chi-lambda-clause* G30ba@chi-defun G30bc@chi-rhs G30be@expand-interaction-rhs*/init* G30c0@chi-rhs* G30c2@find-bound=? G30c4@find-dups G30c6@chi-internal G30c8@parse-module G30ce@G30c9 G30d0@G30cb G30d2@G30ca G30d7@module-interface? G30d9@make-module-interface G30db@module-interface-first-mark G30dd@module-interface-exp-id-vec G30df@module-interface-exp-lab-vec G30e1@set-module-interface-first-mark! G30e3@set-module-interface-exp-id-vec! G30e5@set-module-interface-exp-lab-vec! G30e7@module-interface-exp-id* G30e9@chi-internal-module G30eb@chi-body* G30ed@expand-transformer G30ef@parse-exports G30f1@parse-library-name G30f3@parse-library G30f5@parse-import-spec* G30f7@make-top-rib G30f9@make-collector G30fb@inv-collector G30fd@vis-collector G30ff@imp-collector G3101@chi-library-internal G3103@chi-interaction-expr G3105@library-body-expander G3107@core-library-expander G3109@parse-top-level-program G310b@top-level-expander G3111@G310c G3113@G310e G3115@G310d G311a@env? G311c@make-env G311e@env-names G3120@env-labels G3122@env-itc G3124@set-env-names! G3126@set-env-labels! G3128@set-env-itc! G312a@rp G3130@G312b G3132@G312d G3134@G312c G3139@interaction-env? G313b@make-interaction-env G313d@interaction-env-rib G313f@interaction-env-r G3141@interaction-env-locs G3143@set-interaction-env-rib! G3145@set-interaction-env-r! G3147@set-interaction-env-locs! G3149@rp G314b@interaction-environment-symbols G314d@environment-bindings G314f@parse-binding G3151@environment? G3153@environment-symbols G3155@environment G3157@null-environment G3159@scheme-report-environment G315b@expand G315d@eval G315f@library-expander G3161@boot-library-expand G3163@rev-map-append G3165@build-exports G3167@make-export-subst G3169@make-export-env/macros G316b@generate-temporaries G316d@free-identifier=? G316f@bound-identifier=? G3171@make-source-condition G3173@extract-position-condition G3175@expression-position G3177@assertion-error G3179@syntax-error G317b@extract-trace G317d@syntax-violation* G317f@syntax-violation G3181@identifier? G3183@datum->syntax G3185@syntax->datum G3187@compile-r6rs-top-level G3189@pre-compile-r6rs-top-level G318b@interaction-environment G318d@top-level-context) (begin (set! G2db6@set-cons (lambda (G318e@x G318f@ls) (if (memq G318e@x G318f@ls) G318f@ls (cons G318e@x G318f@ls)))) (set! G2db8@set-union (lambda (G3192@ls1 G3193@ls2) (if (null? G3192@ls1) G3193@ls2 (if (memq (car G3192@ls1) G3193@ls2) (G2db8@set-union (cdr G3192@ls1) G3193@ls2) (cons (car G3192@ls1) (G2db8@set-union (cdr G3192@ls1) G3193@ls2)))))) (set! G2dbd@top-mark* '(top)) (set! G2dbf@top-marked? (lambda (G3196@m*) (memq 'top G3196@m*))) (set! G2dc1@gen-lexical (lambda (G3198@sym) (if (symbol? G3198@sym) (gensym G3198@sym) (if (G2e11@stx? G3198@sym) (G2dc1@gen-lexical (G2e4b@id->sym G3198@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3198@sym))))) (set! G2dc3@gen-global (lambda (G319a@x) (G2dc1@gen-lexical G319a@x))) (set! G2dc5@gen-label (lambda (G319c@_) (gensym))) (set! G2dc7@gen-top-level-label (lambda (G319e@id G319f@rib) ((lambda (G31a3@find) (begin (set! G31a3@find (lambda (G31ae@sym G31af@mark* G31b0@sym* G31b1@mark** G31b2@label*) (if (pair? G31b0@sym*) (begin '#f (if (if (eq? G31ae@sym (car G31b0@sym*)) (begin '#f (G2e4d@same-marks? G31af@mark* (car G31b1@mark**))) '#f) (car G31b2@label*) (G31a3@find G31ae@sym G31af@mark* (cdr G31b0@sym*) (cdr G31b1@mark**) (cdr G31b2@label*)))) '#f))) ((lambda (G31a4@sym G31a5@mark*) ((lambda (G31a8@sym*) ((lambda (G31aa@t) (if G31aa@t ((lambda (G31ac@label) (if (G2c3d@G2ad1@imported-label->binding G31ac@label) (gensym) G31ac@label)) G31aa@t) (gensym))) (if (memq G31a4@sym (G2dde@rib-sym* G319f@rib)) (begin '#f (G31a3@find G31a4@sym G31a5@mark* G31a8@sym* (G2de0@rib-mark** G319f@rib) (G2de2@rib-label* G319f@rib))) '#f))) (G2dde@rib-sym* G319f@rib))) (G2e4b@id->sym G319e@id) (G2e17@stx-mark* G319e@id)))) '#f))) (set! G2dc9@gen-define-label+loc (lambda (G31b8@id G31b9@rib) ((lambda (G31bc@t) (if G31bc@t ((lambda (G31be@env) ((lambda (G31c0@label G31c1@locs) (values G31c0@label ((lambda (G31c4@t) (if G31c4@t (cdr G31c4@t) ((lambda (G31c6@loc) (begin (G3147@set-interaction-env-locs! G31be@env (cons (cons G31c0@label G31c6@loc) G31c1@locs)) G31c6@loc)) (G2dc1@gen-lexical G31b8@id)))) (assq G31c0@label G31c1@locs)))) (G2dc7@gen-top-level-label G31b8@id G31b9@rib) (G3141@interaction-env-locs G31be@env))) G31bc@t) (values (gensym) (G2dc1@gen-lexical G31b8@id)))) (G318d@top-level-context)))) (set! G2dcb@gen-define-label (lambda (G31c8@id G31c9@rib) (if (G318d@top-level-context) (G2dc7@gen-top-level-label G31c8@id G31c9@rib) (gensym)))) (set! G2dd1@G2dcc (make-record-type-descriptor 'rib '#f 'G2dcf '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2dd3@G2dce '#f) (set! G2dd5@G2dcd (make-record-constructor-descriptor G2dd1@G2dcc '#f G2dd3@G2dce)) (set! G2dda@rib? (record-predicate G2dd1@G2dcc)) (set! G2ddc@make-rib (record-constructor G2dd5@G2dcd)) (set! G2dde@rib-sym* (record-accessor G2dd1@G2dcc '0)) (set! G2de0@rib-mark** (record-accessor G2dd1@G2dcc '1)) (set! G2de2@rib-label* (record-accessor G2dd1@G2dcc '2)) (set! G2de4@rib-sealed/freq (record-accessor G2dd1@G2dcc '3)) (set! G2de6@rib-cache (record-accessor G2dd1@G2dcc '4)) (set! G2de8@set-rib-sym*! (record-mutator G2dd1@G2dcc '0)) (set! G2dea@set-rib-mark**! (record-mutator G2dd1@G2dcc '1)) (set! G2dec@set-rib-label*! (record-mutator G2dd1@G2dcc '2)) (set! G2dee@set-rib-sealed/freq! (record-mutator G2dd1@G2dcc '3)) (set! G2df0@set-rib-cache! (record-mutator G2dd1@G2dcc '4)) (set! G2df2@make-empty-rib (lambda () (G2ddc@make-rib '() '() '() '#f '#f))) (set! G2df4@make-cache-rib (lambda () (G2ddc@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2df6@find-label (lambda (G31cc@rib G31cd@sym G31ce@mark*) ((lambda (G31d2@ht) (if G31d2@ht (begin '#f ((lambda (G31d4@cv) ((lambda (G31d6@t) (if G31d6@t (cdr G31d6@t) '#f)) (if G31d4@cv (begin '#f (assp (lambda (G31d8@m) (G2e4d@same-marks? G31ce@mark* G31d8@m)) G31d4@cv)) '#f))) (hashtable-ref G31d2@ht G31cd@sym '#f))) '#f)) (G2de6@rib-cache G31cc@rib)))) (set! G2df8@extend-rib! (lambda (G31da@rib G31db@id G31dc@label) ((lambda (G31e1@find) (begin (set! G31e1@find (lambda (G31f2@sym G31f3@mark* G31f4@sym* G31f5@mark** G31f6@label*) (if (pair? G31f4@sym*) (begin '#f (if (if (eq? G31f2@sym (car G31f4@sym*)) (begin '#f (G2e4d@same-marks? G31f3@mark* (car G31f5@mark**))) '#f) G31f6@label* (G31e1@find G31f2@sym G31f3@mark* (cdr G31f4@sym*) (cdr G31f5@mark**) (cdr G31f6@label*)))) '#f))) (begin (if (G2de4@rib-sealed/freq G31da@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31da@rib) (void)) ((lambda (G31e2@sym G31e3@mark*) ((lambda (G31e6@sym*) ((lambda (G31e8@t) (if G31e8@t ((lambda (G31ea@p) (if (not (eq? G31dc@label G31ea@p)) (G317f@syntax-violation '#f '"multiple definitions of identifier" G31db@id) (void))) G31e8@t) ((lambda (G31ec@t) (if G31ec@t ((lambda (G31ee@p) (if (not (eq? G31dc@label (car G31ee@p))) (if (G318d@top-level-context) (set-car! G31ee@p G31dc@label) (G317f@syntax-violation '#f '"multiple definitions of identifier" G31db@id)) (void))) G31ec@t) (begin (if (G2de6@rib-cache G31da@rib) (hashtable-update! (G2de6@rib-cache G31da@rib) G31e2@sym (lambda (G31f0@e) (cons (cons G31e3@mark* G31dc@label) G31f0@e)) '()) (void)) (G2de8@set-rib-sym*! G31da@rib (cons G31e2@sym G31e6@sym*)) (G2dea@set-rib-mark**! G31da@rib (cons G31e3@mark* (G2de0@rib-mark** G31da@rib))) (G2dec@set-rib-label*! G31da@rib (cons G31dc@label (G2de2@rib-label* G31da@rib)))))) (if (memq G31e2@sym (G2dde@rib-sym* G31da@rib)) (begin '#f (G31e1@find G31e2@sym G31e3@mark* G31e6@sym* (G2de0@rib-mark** G31da@rib) (G2de2@rib-label* G31da@rib))) '#f)))) (G2df6@find-label G31da@rib G31e2@sym G31e3@mark*))) (G2dde@rib-sym* G31da@rib))) (G2e4b@id->sym G31db@id) (G2e17@stx-mark* G31db@id))))) '#f))) (set! G2dfa@extend-rib/nc! (lambda (G31fc@rib G31fd@id G31fe@label) ((lambda (G3202@sym G3203@mark*) ((lambda (G3206@sym*) (begin (if (G2de6@rib-cache G31fc@rib) (hashtable-update! (G2de6@rib-cache G31fc@rib) G3202@sym (lambda (G3208@e) (cons (cons G3203@mark* G31fe@label) G3208@e)) '()) (void)) (G2de8@set-rib-sym*! G31fc@rib (cons G3202@sym G3206@sym*)) (G2dea@set-rib-mark**! G31fc@rib (cons G3203@mark* (G2de0@rib-mark** G31fc@rib))) (G2dec@set-rib-label*! G31fc@rib (cons G31fe@label (G2de2@rib-label* G31fc@rib))))) (G2dde@rib-sym* G31fc@rib))) (G2e4b@id->sym G31fd@id) (G2e17@stx-mark* G31fd@id)))) (set! G2dfc@make-rib-map (lambda (G320a@sym*) ((lambda (G320c@ht) ((letrec ((G320e@f (lambda (G3210@i G3211@sym*) (if (null? G3211@sym*) G320c@ht (begin (hashtable-update! G320c@ht (car G3211@sym*) (lambda (G3214@x) (cons G3210@i G3214@x)) '()) (G320e@f (+ G3210@i '1) (cdr G3211@sym*))))))) G320e@f) '0 G320a@sym*)) (make-eq-hashtable)))) (set! G2dfe@seal-rib! (lambda (G3216@rib) ((lambda (G3218@sym*) (if (not (null? G3218@sym*)) (begin (G2de8@set-rib-sym*! G3216@rib (list->vector G3218@sym*)) (G2dea@set-rib-mark**! G3216@rib (list->vector (G2de0@rib-mark** G3216@rib))) (G2dec@set-rib-label*! G3216@rib (list->vector (G2de2@rib-label* G3216@rib))) (G2dee@set-rib-sealed/freq! G3216@rib (G2dfc@make-rib-map G3218@sym*))) (void))) (G2dde@rib-sym* G3216@rib)))) (set! G2e00@unseal-rib! (lambda (G321a@rib) (if (G2de4@rib-sealed/freq G321a@rib) (begin (G2dee@set-rib-sealed/freq! G321a@rib '#f) (G2de8@set-rib-sym*! G321a@rib (vector->list (G2dde@rib-sym* G321a@rib))) (G2dea@set-rib-mark**! G321a@rib (vector->list (G2de0@rib-mark** G321a@rib))) (G2dec@set-rib-label*! G321a@rib (vector->list (G2de2@rib-label* G321a@rib)))) (void)))) (set! G2e02@make-full-rib (lambda (G321c@id* G321d@label*) ((lambda (G3220@r) (begin (G2dfe@seal-rib! G3220@r) G3220@r)) (G2ddc@make-rib (map G2e4b@id->sym G321c@id*) (map G2e17@stx-mark* G321c@id*) G321d@label* '#f '#f)))) (set! G2e08@G2e03 (make-record-type-descriptor 'stx '#f 'G2e06 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2e0a@G2e05 '#f) (set! G2e0c@G2e04 (make-record-constructor-descriptor G2e08@G2e03 '#f G2e0a@G2e05)) (set! G2e11@stx? (record-predicate G2e08@G2e03)) (set! G2e13@make-stx (record-constructor G2e0c@G2e04)) (set! G2e15@stx-expr (record-accessor G2e08@G2e03 '0)) (set! G2e17@stx-mark* (record-accessor G2e08@G2e03 '1)) (set! G2e19@stx-subst* (record-accessor G2e08@G2e03 '2)) (set! G2e1b@stx-ae* (record-accessor G2e08@G2e03 '3)) (set! G2e1d@set-stx-expr! (record-mutator G2e08@G2e03 '0)) (set! G2e1f@set-stx-mark*! (record-mutator G2e08@G2e03 '1)) (set! G2e21@set-stx-subst*! (record-mutator G2e08@G2e03 '2)) (set! G2e23@set-stx-ae*! (record-mutator G2e08@G2e03 '3)) (set! G2e25@rp (G2998@G28a0@make-record-printer 'stx (lambda (G3222@x G3223@p G3224@wr) (begin (display '"#<syntax " G3223@p) (write (G2e5f@stx->datum G3222@x) G3223@p) ((lambda (G3228@expr) (if (G2990@G2890@annotation? G3228@expr) ((lambda (G322a@src) (if (pair? G322a@src) (begin (display '" [" G3223@p) (display (cdr G322a@src) G3223@p) (display '" of " G3223@p) (display (car G322a@src) G3223@p) (display '"]" G3223@p)) (void))) (G2991@G2892@annotation-source G3228@expr)) (void))) (G2e15@stx-expr G3222@x)) (display '">" G3223@p))))) (set! G2e27@datum->stx (lambda (G322c@id G322d@datum) (G2e13@make-stx G322d@datum (G2e17@stx-mark* G322c@id) (G2e19@stx-subst* G322c@id) (G2e1b@stx-ae* G322c@id)))) (set! G2e29@gen-mark (lambda () (string '#\m))) (set! G2e2b@anti-mark '#f) (set! G2e2d@anti-mark? not) (set! G2e2f@join-wraps (lambda (G3230@m1* G3231@s1* G3232@ae1* G3233@e) ((lambda (G3239@cancel) (begin (set! G3239@cancel (lambda (G3240@ls1 G3241@ls2) ((letrec ((G3244@f (lambda (G3246@x G3247@ls1) (if (null? G3247@ls1) (cdr G3241@ls2) (cons G3246@x (G3244@f (car G3247@ls1) (cdr G3247@ls1))))))) G3244@f) (car G3240@ls1) (cdr G3240@ls1)))) ((lambda (G323a@m2* G323b@s2* G323c@ae2*) (if (if (not (null? G3230@m1*)) (if (not (null? G323a@m2*)) (begin '#f (G2e2d@anti-mark? (car G323a@m2*))) '#f) '#f) (values (G3239@cancel G3230@m1* G323a@m2*) (G3239@cancel G3231@s1* G323b@s2*) (G3239@cancel G3232@ae1* G323c@ae2*)) (values (append G3230@m1* G323a@m2*) (append G3231@s1* G323b@s2*) (append G3232@ae1* G323c@ae2*)))) (G2e17@stx-mark* G3233@e) (G2e19@stx-subst* G3233@e) (G2e1b@stx-ae* G3233@e)))) '#f))) (set! G2e31@mkstx (lambda (G324a@e G324b@m* G324c@s* G324d@ae*) (if (if (G2e11@stx? G324a@e) (begin '#f (not (G2dbf@top-marked? G324b@m*))) '#f) (call-with-values (lambda () (G2e2f@join-wraps G324b@m* G324c@s* G324d@ae* G324a@e)) (lambda (G3255@G3252 G3256@G3253 G3257@G3254) ((lambda (G325b@ae* G325c@s* G325d@m*) (G2e13@make-stx (G2e15@stx-expr G324a@e) G325d@m* G325c@s* G325b@ae*)) G3257@G3254 G3256@G3253 G3255@G3252))) (G2e13@make-stx G324a@e G324b@m* G324c@s* G324d@ae*)))) (set! G2e33@add-mark (lambda (G3261@m G3262@e G3263@ae) (G2e31@mkstx G3262@e (list G3261@m) '(shift) (list G3263@ae)))) (set! G2e35@add-subst (lambda (G3267@subst G3268@e) (G2e31@mkstx G3268@e '() (list G3267@subst) '()))) (set! G2e37@syntax-kind? (lambda (G326b@x G326c@p?) (if (G2e11@stx? G326b@x) (G2e37@syntax-kind? (G2e15@stx-expr G326b@x) G326c@p?) (if (G2990@G2890@annotation? G326b@x) (G2e37@syntax-kind? (G2992@G2894@annotation-expression G326b@x) G326c@p?) (G326c@p? G326b@x))))) (set! G2e39@syntax-vector->list (lambda (G326f@x) (if (G2e11@stx? G326f@x) ((lambda (G3271@ls G3272@m* G3273@s* G3274@ae*) (map (lambda (G3279@x) (G2e31@mkstx G3279@x G3272@m* G3273@s* G3274@ae*)) G3271@ls)) (G2e39@syntax-vector->list (G2e15@stx-expr G326f@x)) (G2e17@stx-mark* G326f@x) (G2e19@stx-subst* G326f@x) (G2e1b@stx-ae* G326f@x)) (if (G2990@G2890@annotation? G326f@x) (G2e39@syntax-vector->list (G2992@G2894@annotation-expression G326f@x)) (if (vector? G326f@x) (vector->list G326f@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G326f@x)))))) (set! G2e3b@syntax-pair? (lambda (G327b@x) (G2e37@syntax-kind? G327b@x pair?))) (set! G2e3d@syntax-vector? (lambda (G327d@x) (G2e37@syntax-kind? G327d@x vector?))) (set! G2e3f@syntax-null? (lambda (G327f@x) (G2e37@syntax-kind? G327f@x null?))) (set! G2e41@syntax-list? (lambda (G3281@x) ((lambda (G3283@t) (if G3283@t G3283@t (begin '#f (if (G2e3b@syntax-pair? G3281@x) (begin '#f (G2e41@syntax-list? (G2e45@syntax-cdr G3281@x))) '#f)))) (G2e3f@syntax-null? G3281@x)))) (set! G2e43@syntax-car (lambda (G3285@x) (if (G2e11@stx? G3285@x) (G2e31@mkstx (G2e43@syntax-car (G2e15@stx-expr G3285@x)) (G2e17@stx-mark* G3285@x) (G2e19@stx-subst* G3285@x) (G2e1b@stx-ae* G3285@x)) (if (G2990@G2890@annotation? G3285@x) (G2e43@syntax-car (G2992@G2894@annotation-expression G3285@x)) (if (pair? G3285@x) (car G3285@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3285@x)))))) (set! G2e45@syntax-cdr (lambda (G3287@x) (if (G2e11@stx? G3287@x) (G2e31@mkstx (G2e45@syntax-cdr (G2e15@stx-expr G3287@x)) (G2e17@stx-mark* G3287@x) (G2e19@stx-subst* G3287@x) (G2e1b@stx-ae* G3287@x)) (if (G2990@G2890@annotation? G3287@x) (G2e45@syntax-cdr (G2992@G2894@annotation-expression G3287@x)) (if (pair? G3287@x) (cdr G3287@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3287@x)))))) (set! G2e47@syntax->list (lambda (G3289@x) (if (G2e3b@syntax-pair? G3289@x) (cons (G2e43@syntax-car G3289@x) (G2e47@syntax->list (G2e45@syntax-cdr G3289@x))) (if (G2e3f@syntax-null? G3289@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3289@x))))) (set! G2e49@id? (lambda (G328b@x) (if (G2e11@stx? G328b@x) (begin '#f ((lambda (G328d@expr) (symbol? (if (G2990@G2890@annotation? G328d@expr) (G298f@G288e@annotation-stripped G328d@expr) G328d@expr))) (G2e15@stx-expr G328b@x))) '#f))) (set! G2e4b@id->sym (lambda (G328f@x) (begin (if (not (G2e11@stx? G328f@x)) (error 'id->sym '"BUG in ikarus: not an id" G328f@x) (void)) ((lambda (G3291@expr) ((lambda (G3293@sym) (if (symbol? G3293@sym) G3293@sym (error 'id->sym '"BUG in ikarus: not an id" G328f@x))) (if (G2990@G2890@annotation? G3291@expr) (G298f@G288e@annotation-stripped G3291@expr) G3291@expr))) (G2e15@stx-expr G328f@x))))) (set! G2e4d@same-marks? (lambda (G3295@x G3296@y) ((lambda (G3299@t) (if G3299@t G3299@t (begin '#f (if (pair? G3295@x) (if (pair? G3296@y) (if (eq? (car G3295@x) (car G3296@y)) (begin '#f (G2e4d@same-marks? (cdr G3295@x) (cdr G3296@y))) '#f) '#f) '#f)))) (if (null? G3295@x) (begin '#f (null? G3296@y)) '#f)))) (set! G2e4f@bound-id=? (lambda (G329b@x G329c@y) (if (eq? (G2e4b@id->sym G329b@x) (G2e4b@id->sym G329c@y)) (begin '#f (G2e4d@same-marks? (G2e17@stx-mark* G329b@x) (G2e17@stx-mark* G329c@y))) '#f))) (set! G2e51@free-id=? (lambda (G329f@i G32a0@j) ((lambda (G32a3@t0 G32a4@t1) (if ((lambda (G32a7@t) (if G32a7@t G32a7@t (begin '#f G32a4@t1))) G32a3@t0) (eq? G32a3@t0 G32a4@t1) (eq? (G2e4b@id->sym G329f@i) (G2e4b@id->sym G32a0@j)))) (G2e65@id->real-label G329f@i) (G2e65@id->real-label G32a0@j)))) (set! G2e53@valid-bound-ids? (lambda (G32a9@id*) (if (for-all G2e49@id? G32a9@id*) (begin '#f (G2e55@distinct-bound-ids? G32a9@id*)) '#f))) (set! G2e55@distinct-bound-ids? (lambda (G32ab@id*) ((lambda (G32ad@t) (if G32ad@t G32ad@t (begin '#f (if (not (G2e57@bound-id-member? (car G32ab@id*) (cdr G32ab@id*))) (begin '#f (G2e55@distinct-bound-ids? (cdr G32ab@id*))) '#f)))) (null? G32ab@id*)))) (set! G2e57@bound-id-member? (lambda (G32af@id G32b0@id*) (if (pair? G32b0@id*) (begin '#f ((lambda (G32b3@t) (if G32b3@t G32b3@t (begin '#f (G2e57@bound-id-member? G32af@id (cdr G32b0@id*))))) (G2e4f@bound-id=? G32af@id (car G32b0@id*)))) '#f))) (set! G2e59@self-evaluating? (lambda (G32b5@x) ((lambda (G32b7@t) (if G32b7@t G32b7@t ((lambda (G32b9@t) (if G32b9@t G32b9@t ((lambda (G32bb@t) (if G32bb@t G32bb@t ((lambda (G32bd@t) (if G32bd@t G32bd@t ((lambda (G32bf@t) (if G32bf@t G32bf@t (begin '#f (bytevector? G32b5@x)))) (regexp? G32b5@x)))) (boolean? G32b5@x)))) (char? G32b5@x)))) (string? G32b5@x)))) (number? G32b5@x)))) (set! G2e5b@strip-annotations (lambda (G32c1@x) (if (pair? G32c1@x) (cons (G2e5b@strip-annotations (car G32c1@x)) (G2e5b@strip-annotations (cdr G32c1@x))) (if (vector? G32c1@x) (vector-map G2e5b@strip-annotations G32c1@x) (if (G2990@G2890@annotation? G32c1@x) (G298f@G288e@annotation-stripped G32c1@x) G32c1@x))))) (set! G2e5d@strip (lambda (G32c3@x G32c4@m*) (if (G2dbf@top-marked? G32c4@m*) (if ((lambda (G32c7@t) (if G32c7@t G32c7@t ((lambda (G32c9@t) (if G32c9@t G32c9@t (begin '#f (if (vector? G32c3@x) (if (> (vector-length G32c3@x) '0) (begin '#f (G2990@G2890@annotation? (vector-ref G32c3@x '0))) '#f) '#f)))) (if (pair? G32c3@x) (begin '#f (G2990@G2890@annotation? (car G32c3@x))) '#f)))) (G2990@G2890@annotation? G32c3@x)) (G2e5b@strip-annotations G32c3@x) G32c3@x) ((letrec ((G32cb@f (lambda (G32cd@x) (if (G2e11@stx? G32cd@x) (G2e5d@strip (G2e15@stx-expr G32cd@x) (G2e17@stx-mark* G32cd@x)) (if (G2990@G2890@annotation? G32cd@x) (G298f@G288e@annotation-stripped G32cd@x) (if (pair? G32cd@x) ((lambda (G32cf@a G32d0@d) (if (if (eq? G32cf@a (car G32cd@x)) (begin '#f (eq? G32d0@d (cdr G32cd@x))) '#f) G32cd@x (cons G32cf@a G32d0@d))) (G32cb@f (car G32cd@x)) (G32cb@f (cdr G32cd@x))) (if (vector? G32cd@x) ((lambda (G32d3@old) ((lambda (G32d5@new) (if (for-all eq? G32d3@old G32d5@new) G32cd@x (list->vector G32d5@new))) (map G32cb@f G32d3@old))) (vector->list G32cd@x)) G32cd@x))))))) G32cb@f) G32c3@x)))) (set! G2e5f@stx->datum (lambda (G32d7@x) (G2e5d@strip G32d7@x '()))) (set! G2e61@same-marks*? (lambda (G32d9@mark* G32da@mark** G32db@si) (if (null? G32db@si) '#f (if (G2e4d@same-marks? G32d9@mark* (vector-ref G32da@mark** (car G32db@si))) (car G32db@si) (G2e61@same-marks*? G32d9@mark* G32da@mark** (cdr G32db@si)))))) (set! G2e63@id->label (lambda (G32df@id) ((lambda (G32e1@t) (if G32e1@t G32e1@t (begin '#f ((lambda (G32e3@t) (if G32e3@t ((lambda (G32e5@env) ((lambda (G32e7@rib) (call-with-values (lambda () (G2dc9@gen-define-label+loc G32df@id G32e7@rib)) (lambda (G32eb@G32e9 G32ec@G32ea) ((lambda (G32ef@loc_ G32f0@lab) (begin (G2df8@extend-rib! G32e7@rib G32df@id G32f0@lab) G32f0@lab)) G32ec@G32ea G32eb@G32e9)))) (G313d@interaction-env-rib G32e5@env))) G32e3@t) '#f)) (G318d@top-level-context))))) (G2e65@id->real-label G32df@id)))) (set! G2e65@id->real-label (lambda (G32f3@id) ((lambda (G32f5@sym) ((letrec ((G32f7@search (lambda (G32f9@subst* G32fa@mark*) (if (null? G32f9@subst*) '#f (if (eq? (car G32f9@subst*) 'shift) (G32f7@search (cdr G32f9@subst*) (cdr G32fa@mark*)) ((lambda (G32fd@rib) ((lambda (G32ff@t) (if G32ff@t ((lambda (G3301@ht) ((lambda (G3303@si) ((lambda (G3305@i) (if G3305@i (vector-ref (G2de2@rib-label* G32fd@rib) G3305@i) (G32f7@search (cdr G32f9@subst*) G32fa@mark*))) (if G3303@si (begin '#f (G2e61@same-marks*? G32fa@mark* (G2de0@rib-mark** G32fd@rib) (reverse G3303@si))) '#f))) (hashtable-ref G3301@ht G32f5@sym '#f))) G32ff@t) ((lambda (G3307@t) (if G3307@t G3307@t (begin '#f ((letrec ((G3309@f (lambda (G330b@sym* G330c@mark** G330d@label*) (if (null? G330b@sym*) (G32f7@search (cdr G32f9@subst*) G32fa@mark*) (if (if (eq? (car G330b@sym*) G32f5@sym) (begin '#f (G2e4d@same-marks? (car G330c@mark**) G32fa@mark*)) '#f) (car G330d@label*) (G3309@f (cdr G330b@sym*) (cdr G330c@mark**) (cdr G330d@label*))))))) G3309@f) (G2dde@rib-sym* G32fd@rib) (G2de0@rib-mark** G32fd@rib) (G2de2@rib-label* G32fd@rib))))) (G2df6@find-label G32fd@rib G32f5@sym G32fa@mark*)))) (G2de4@rib-sealed/freq G32fd@rib))) (car G32f9@subst*))))))) G32f7@search) (G2e19@stx-subst* G32f3@id) (G2e17@stx-mark* G32f3@id))) (G2e4b@id->sym G32f3@id)))) (set! G2e67@label->binding (lambda (G3311@x G3312@r) ((lambda (G3315@t) (if G3315@t ((lambda (G3317@b) (if (if (pair? G3317@b) (begin '#f (eq? (car G3317@b) '$core-rtd)) '#f) (cons '$rtd (map G3042@bless (cdr G3317@b))) (if (if (pair? G3317@b) (begin '#f (eq? (car G3317@b) 'global-rtd)) '#f) ((lambda (G3319@lib G331a@loc) (cons '$rtd (symbol-value G331a@loc))) (cadr G3317@b) (cddr G3317@b)) G3317@b))) G3315@t) ((lambda (G331d@t) (if G331d@t (cdr G331d@t) ((lambda (G331f@t) (if G331f@t ((lambda (G3321@env) ((lambda (G3323@t) (if G3323@t ((lambda (G3325@p) (cons* 'lexical (cdr G3325@p) '#f)) G3323@t) '(displaced-lexical . #f))) (assq G3311@x (G3141@interaction-env-locs G3321@env)))) G331f@t) '(displaced-lexical . #f))) (G318d@top-level-context)))) (assq G3311@x G3312@r)))) (G2c3d@G2ad1@imported-label->binding G3311@x)))) (set! G2e69@make-binding cons) (set! G2e6b@binding-type car) (set! G2e6d@binding-value cdr) (set! G2e6f@raise-unbound-error (lambda (G3327@id) (G317d@syntax-violation* '#f '"unbound identifier" G3327@id (G4c5e@G4bfe@make-undefined-violation)))) (set! G2e71@syntax-type (lambda (G3329@e G332a@r) (if (G2e49@id? G3329@e) ((lambda (G332d@id) ((lambda (G332f@label) ((lambda (G3331@b) ((lambda (G3333@type) ((lambda () (begin (if (not G332f@label) (G2e6f@raise-unbound-error G332d@id) (void)) ((lambda (G3335@t) (if (memv G3335@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3333@type (G2e6d@binding-value G3331@b) G332d@id) (values 'other '#f '#f))) G3333@type))))) (G2e6b@binding-type G3331@b))) (G2e67@label->binding G332f@label G332a@r))) (G2e63@id->label G332d@id))) G3329@e) (if (G2e3b@syntax-pair? G3329@e) ((lambda (G3337@id) (if (G2e49@id? G3337@id) ((lambda (G3339@label) ((lambda (G333b@b) ((lambda (G333d@type) ((lambda () (begin (if (not G3339@label) (G2e6f@raise-unbound-error G3337@id) (void)) ((lambda (G333f@t) (if (memv G333f@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G333d@type (G2e6d@binding-value G333b@b) G3337@id) (values 'call '#f '#f))) G333d@type))))) (G2e6b@binding-type G333b@b))) (G2e67@label->binding G3339@label G332a@r))) (G2e63@id->label G3337@id)) (values 'call '#f '#f))) (G2e43@syntax-car G3329@e)) ((lambda (G3341@d) (if (G2e59@self-evaluating? G3341@d) (values 'constant G3341@d '#f) (values 'other '#f '#f))) (G2e5f@stx->datum G3329@e)))))) (set! G2e88@sanitize-binding (lambda (G3343@x G3344@src) (if (procedure? G3343@x) (cons* 'local-macro G3343@x G3344@src) (if (if (pair? G3343@x) (if (eq? (car G3343@x) 'macro!) (begin '#f (procedure? (cdr G3343@x))) '#f) '#f) (cons* 'local-macro! (cdr G3343@x) G3344@src) (if (if (pair? G3343@x) (begin '#f (eq? (car G3343@x) '$rtd)) '#f) G3343@x (assertion-violation 'expand '"invalid transformer" G3343@x)))))) (set! G2e8a@make-variable-transformer (lambda (G3347@x) (if (procedure? G3347@x) (cons 'macro! G3347@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3347@x)))) (set! G2e8c@variable-transformer? (lambda (G3349@x) (if (pair? G3349@x) (if (eq? (car G3349@x) 'macro!) (begin '#f (procedure? (cdr G3349@x))) '#f) '#f))) (set! G2e8e@variable-transformer-procedure (lambda (G334b@x) (if (G2e8c@variable-transformer? G334b@x) (cdr G334b@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G334b@x)))) (set! G2e90@make-eval-transformer (lambda (G334d@x) (G2e88@sanitize-binding (eval-core (G29ff@G29a7@expanded->core G334d@x)) G334d@x))) (set! G3014@parse-define (lambda (G334f@x) ((lambda (G3351@t) ((lambda (G3353@ls/false) (if (if G3353@ls/false (begin '#f (apply (lambda (G3355@id G3356@fmls G3357@b G3358@b*) (G2e49@id? G3355@id)) G3353@ls/false)) '#f) (apply (lambda (G335d@id G335e@fmls G335f@b G3360@b*) (begin (G30b4@verify-formals G335e@fmls G334f@x) (values G335d@id (cons 'defun (cons G335e@fmls (cons G335f@b G3360@b*)))))) G3353@ls/false) ((lambda (G3365@t) ((lambda (G3367@ls/false) (if (if G3367@ls/false (begin '#f (apply (lambda (G3369@id G336a@val) (G2e49@id? G3369@id)) G3367@ls/false)) '#f) (apply (lambda (G336d@id G336e@val) (values G336d@id (cons 'expr G336e@val))) G3367@ls/false) ((lambda (G3371@t) ((lambda (G3373@ls/false) (if (if G3373@ls/false (begin '#f (apply (lambda (G3375@id) (G2e49@id? G3375@id)) G3373@ls/false)) '#f) (apply (lambda (G3377@id) (values G3377@id (cons 'expr (G3042@bless '(void))))) G3373@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3371@t))) (G308c@syntax-dispatch G3371@t '(_ any)))) G3365@t))) (G308c@syntax-dispatch G3365@t '(_ any any)))) G3351@t))) (G308c@syntax-dispatch G3351@t '(_ (any . any) any . each-any)))) G334f@x))) (set! G3016@parse-define-syntax (lambda (G3379@x) ((lambda (G337b@t) ((lambda (G337d@ls/false) (if (if G337d@ls/false (begin '#f (apply (lambda (G337f@id G3380@val) (G2e49@id? G337f@id)) G337d@ls/false)) '#f) (apply (lambda (G3383@id G3384@val) (values G3383@id G3384@val)) G337d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G337b@t))) (G308c@syntax-dispatch G337b@t '(_ any any)))) G3379@x))) (set! G3018@scheme-stx-hashtable (make-eq-hashtable)) (set! G301a@scheme-stx (lambda (G3387@sym) ((lambda (G3389@t) (if G3389@t G3389@t (begin '#f ((lambda (G338b@subst) ((lambda (G338d@stx) ((lambda (G338f@stx) ((lambda () (begin (hashtable-set! G3018@scheme-stx-hashtable G3387@sym G338f@stx) G338f@stx)))) ((lambda (G3391@t) (if G3391@t ((lambda (G3393@x) ((lambda (G3395@name G3396@label) (G2e35@add-subst (G2ddc@make-rib (list G3395@name) (list G2dbd@top-mark*) (list G3396@label) '#f '#f) G338d@stx)) (car G3393@x) (cdr G3393@x))) G3391@t) G338d@stx)) (assq G3387@sym G338b@subst)))) (G2e13@make-stx G3387@sym G2dbd@top-mark* '() '()))) (G2c13@G2a7d@library-subst (G2c37@G2ac5@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G3018@scheme-stx-hashtable G3387@sym '#f)))) (set! G301c@lexical-var car) (set! G301e@lexical-mutable? cdr) (set! G3020@set-lexical-mutable! set-cdr!) (set! G3022@add-lexical (lambda (G3399@lab G339a@lex G339b@r) (cons (cons* G3399@lab 'lexical G339a@lex '#f) G339b@r))) (set! G3024@add-lexicals (lambda (G339f@lab* G33a0@lex* G33a1@r) (if (null? G339f@lab*) G33a1@r (G3024@add-lexicals (cdr G339f@lab*) (cdr G33a0@lex*) (G3022@add-lexical (car G339f@lab*) (car G33a0@lex*) G33a1@r))))) (set! G3026@letrec-helper (lambda (G33a5@e G33a6@r G33a7@mr G33a8@build) ((lambda (G33ad@t) ((lambda (G33af@ls/false) (if G33af@ls/false (apply (lambda (G33b1@lhs* G33b2@rhs* G33b3@b G33b4@b*) (if (not (G2e53@valid-bound-ids? G33b1@lhs*)) (G3046@invalid-fmls-error G33a5@e G33b1@lhs*) ((lambda (G33b9@lex* G33ba@lab*) ((lambda (G33bd@rib G33be@r) ((lambda (G33c1@body G33c2@rhs*) (G33a8@build '#f G33b9@lex* G33c2@rhs* G33c1@body)) (G30c6@chi-internal (G2e35@add-subst G33bd@rib (cons G33b3@b G33b4@b*)) G33be@r G33a7@mr) (G30ac@chi-expr* (map (lambda (G33c5@x) (G2e35@add-subst G33bd@rib G33c5@x)) G33b2@rhs*) G33be@r G33a7@mr))) (G2e02@make-full-rib G33b1@lhs* G33ba@lab*) (G3024@add-lexicals G33ba@lab* G33b9@lex* G33a6@r))) (map G2dc1@gen-lexical G33b1@lhs*) (map G2dc5@gen-label G33b1@lhs*)))) G33af@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G33ad@t))) (G308c@syntax-dispatch G33ad@t '(_ #(each (any any)) any . each-any)))) G33a5@e))) (set! G3028@letrec-transformer (lambda (G33c7@e G33c8@r G33c9@mr) (G3026@letrec-helper G33c7@e G33c8@r G33c9@mr G2da6@G2d19@build-letrec))) (set! G302a@letrec*-transformer (lambda (G33cd@e G33ce@r G33cf@mr) (G3026@letrec-helper G33cd@e G33ce@r G33cf@mr G2da7@G2d1b@build-letrec*))) (set! G302c@fluid-let-syntax-transformer (lambda (G33d3@e G33d4@r G33d5@mr) ((lambda (G33da@lookup) (begin (set! G33da@lookup (lambda (G33ed@x) ((lambda (G33ef@t) (if G33ef@t G33ef@t (begin '#f (G317f@syntax-violation '#f '"unbound identifier" G33d3@e G33ed@x)))) (G2e63@id->label G33ed@x)))) ((lambda (G33db@t) ((lambda (G33dd@ls/false) (if G33dd@ls/false (apply (lambda (G33df@lhs* G33e0@rhs* G33e1@b G33e2@b*) (if (not (G2e53@valid-bound-ids? G33df@lhs*)) (G3046@invalid-fmls-error G33d3@e G33df@lhs*) ((lambda (G33e7@lab* G33e8@rhs*) (G30c6@chi-internal (cons G33e1@b G33e2@b*) (append (map cons G33e7@lab* G33e8@rhs*) G33d4@r) (append (map cons G33e7@lab* G33e8@rhs*) G33d5@mr))) (map G33da@lookup G33df@lhs*) (map (lambda (G33eb@x) (G2e90@make-eval-transformer (G30ed@expand-transformer G33eb@x G33d5@mr))) G33e0@rhs*)))) G33dd@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G33db@t))) (G308c@syntax-dispatch G33db@t '(_ #(each (any any)) any . each-any)))) G33d3@e))) '#f))) (set! G302e@type-descriptor-transformer (lambda (G33f1@e G33f2@r G33f3@mr) ((lambda (G33f7@t) ((lambda (G33f9@ls/false) (if (if G33f9@ls/false (begin '#f (apply (lambda (G33fb@id) (G2e49@id? G33fb@id)) G33f9@ls/false)) '#f) (apply (lambda (G33fd@id) ((lambda (G33ff@lab) ((lambda (G3401@b) ((lambda (G3403@type) ((lambda () (begin (if (not G33ff@lab) (G2e6f@raise-unbound-error G33fd@id) (void)) (if (not (if (eq? G3403@type '$rtd) (begin '#f (not (list? (G2e6d@binding-value G3401@b)))) '#f)) (G317f@syntax-violation '#f '"not a record type" G33f1@e) (void)) (list 'quote (G2e6d@binding-value G3401@b)))))) (G2e6b@binding-type G3401@b))) (G2e67@label->binding G33ff@lab G33f2@r))) (G2e63@id->label G33fd@id))) G33f9@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G33f7@t))) (G308c@syntax-dispatch G33f7@t '(_ any)))) G33f1@e))) (set! G3030@record-type-descriptor-transformer (lambda (G3405@e G3406@r G3407@mr) ((lambda (G340b@t) ((lambda (G340d@ls/false) (if (if G340d@ls/false (begin '#f (apply (lambda (G340f@id) (G2e49@id? G340f@id)) G340d@ls/false)) '#f) (apply (lambda (G3411@id) ((lambda (G3413@lab) ((lambda (G3415@b) ((lambda (G3417@type) ((lambda () (begin (if (not G3413@lab) (G2e6f@raise-unbound-error G3411@id) (void)) (if (not (if (eq? G3417@type '$rtd) (begin '#f (list? (G2e6d@binding-value G3415@b))) '#f)) (G317f@syntax-violation '#f '"not a record type" G3405@e) (void)) (G30b0@chi-expr (car (G2e6d@binding-value G3415@b)) G3406@r G3407@mr))))) (G2e6b@binding-type G3415@b))) (G2e67@label->binding G3413@lab G3406@r))) (G2e63@id->label G3411@id))) G340d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G340b@t))) (G308c@syntax-dispatch G340b@t '(_ any)))) G3405@e))) (set! G3032@record-constructor-descriptor-transformer (lambda (G3419@e G341a@r G341b@mr) ((lambda (G341f@t) ((lambda (G3421@ls/false) (if (if G3421@ls/false (begin '#f (apply (lambda (G3423@id) (G2e49@id? G3423@id)) G3421@ls/false)) '#f) (apply (lambda (G3425@id) ((lambda (G3427@lab) ((lambda (G3429@b) ((lambda (G342b@type) ((lambda () (begin (if (not G3427@lab) (G2e6f@raise-unbound-error G3425@id) (void)) (if (not (if (eq? G342b@type '$rtd) (begin '#f (list? (G2e6d@binding-value G3429@b))) '#f)) (G317f@syntax-violation '#f '"invalid type" G3419@e) (void)) (G30b0@chi-expr (cadr (G2e6d@binding-value G3429@b)) G341a@r G341b@mr))))) (G2e6b@binding-type G3429@b))) (G2e67@label->binding G3427@lab G341a@r))) (G2e63@id->label G3425@id))) G3421@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G341f@t))) (G308c@syntax-dispatch G341f@t '(_ any)))) G3419@e))) (set! G3034@when-macro (lambda (G342d@e) ((lambda (G342f@t) ((lambda (G3431@ls/false) (if G3431@ls/false (apply (lambda (G3433@test G3434@e G3435@e*) (G3042@bless (list 'if G3433@test (cons 'begin (cons G3434@e G3435@e*))))) G3431@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G342f@t))) (G308c@syntax-dispatch G342f@t '(_ any any . each-any)))) G342d@e))) (set! G3036@unless-macro (lambda (G3439@e) ((lambda (G343b@t) ((lambda (G343d@ls/false) (if G343d@ls/false (apply (lambda (G343f@test G3440@e G3441@e*) (G3042@bless (list 'if (list 'not G343f@test) (cons 'begin (cons G3440@e G3441@e*))))) G343d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G343b@t))) (G308c@syntax-dispatch G343b@t '(_ any any . each-any)))) G3439@e))) (set! G3038@if-transformer (lambda (G3445@e G3446@r G3447@mr) ((lambda (G344b@t) ((lambda (G344d@ls/false) (if G344d@ls/false (apply (lambda (G344f@e0 G3450@e1 G3451@e2) (list 'if (G30b0@chi-expr G344f@e0 G3446@r G3447@mr) (G30b0@chi-expr G3450@e1 G3446@r G3447@mr) (G30b0@chi-expr G3451@e2 G3446@r G3447@mr))) G344d@ls/false) ((lambda (G3455@t) ((lambda (G3457@ls/false) (if G3457@ls/false (apply (lambda (G3459@e0 G345a@e1) (list 'if (G30b0@chi-expr G3459@e0 G3446@r G3447@mr) (G30b0@chi-expr G345a@e1 G3446@r G3447@mr) (G2da5@G2d17@build-void))) G3457@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3455@t))) (G308c@syntax-dispatch G3455@t '(_ any any)))) G344b@t))) (G308c@syntax-dispatch G344b@t '(_ any any any)))) G3445@e))) (set! G303a@case-macro (lambda (G345d@e) ((lambda (G3460@build-last G3462@build-one) (begin (set! G3460@build-last (lambda (G3487@cls) ((lambda (G3489@t) ((lambda (G348b@ls/false) (if G348b@ls/false (apply (lambda (G348d@e G348e@e*) (cons 'begin (cons G348d@e G348e@e*))) G348b@ls/false) ((lambda (G3491@t) ((lambda (G3493@ls/false) (if G3493@ls/false (apply (lambda () (G3462@build-one G3487@cls '(if #f #f))) G3493@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3491@t))) (G308c@syntax-dispatch G3491@t '_))) G3489@t))) (G308c@syntax-dispatch G3489@t '(#(scheme-id else) any . each-any)))) G3487@cls))) (set! G3462@build-one (lambda (G3479@cls G347a@k) ((lambda (G347d@t) ((lambda (G347f@ls/false) (if G347f@ls/false (apply (lambda (G3481@d* G3482@e G3483@e*) (list 'if (list 'memv 't (list 'quote G3481@d*)) (cons 'begin (cons G3482@e G3483@e*)) G347a@k)) G347f@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G347d@t))) (G308c@syntax-dispatch G347d@t '(each-any any . each-any)))) G3479@cls))) ((lambda (G3463@t) ((lambda (G3465@ls/false) (if G3465@ls/false (apply (lambda (G3467@expr) (G3042@bless (cons 'let (cons (list (list 't G3467@expr)) '((if #f #f)))))) G3465@ls/false) ((lambda (G3469@t) ((lambda (G346b@ls/false) (if G346b@ls/false (apply (lambda (G346d@expr G346e@cls G346f@cls*) (G3042@bless (list 'let (list (list 't G346d@expr)) ((letrec ((G3473@f (lambda (G3475@cls G3476@cls*) (if (null? G3476@cls*) (G3460@build-last G3475@cls) (G3462@build-one G3475@cls (G3473@f (car G3476@cls*) (cdr G3476@cls*))))))) G3473@f) G346e@cls G346f@cls*)))) G346b@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3469@t))) (G308c@syntax-dispatch G3469@t '(_ any any . each-any)))) G3463@t))) (G308c@syntax-dispatch G3463@t '(_ any)))) G345d@e))) '#f '#f))) (set! G303c@quote-transformer (lambda (G3495@e G3496@r G3497@mr) ((lambda (G349b@t) ((lambda (G349d@ls/false) (if G349d@ls/false (apply (lambda (G349f@datum) (list 'quote (G2e5f@stx->datum G349f@datum))) G349d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G349b@t))) (G308c@syntax-dispatch G349b@t '(_ any)))) G3495@e))) (set! G303e@case-lambda-transformer (lambda (G34a1@e G34a2@r G34a3@mr) ((lambda (G34a7@t) ((lambda (G34a9@ls/false) (if G34a9@ls/false (apply (lambda (G34ab@fmls* G34ac@b* G34ad@b**) (call-with-values (lambda () (G30b8@chi-lambda-clause* G34a1@e G34ab@fmls* (map cons G34ac@b* G34ad@b**) G34a2@r G34a3@mr)) (lambda (G34b3@G34b1 G34b4@G34b2) ((lambda (G34b7@body* G34b8@fmls*) (G2da2@G2ccb@build-case-lambda '#f G34b8@fmls* G34b7@body*)) G34b4@G34b2 G34b3@G34b1)))) G34a9@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G34a7@t))) (G308c@syntax-dispatch G34a7@t '(_ . #(each (any any . each-any)))))) G34a1@e))) (set! G3040@lambda-transformer (lambda (G34bb@e G34bc@r G34bd@mr) ((lambda (G34c1@t) ((lambda (G34c3@ls/false) (if G34c3@ls/false (apply (lambda (G34c5@fmls G34c6@b G34c7@b*) (call-with-values (lambda () (G30b6@chi-lambda-clause G34bb@e G34c5@fmls (cons G34c6@b G34c7@b*) G34bc@r G34bd@mr)) (lambda (G34cd@G34cb G34ce@G34cc) ((lambda (G34d1@body G34d2@fmls) (G2da1@G2cc9@build-lambda '#f G34d2@fmls G34d1@body)) G34ce@G34cc G34cd@G34cb)))) G34c3@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G34c1@t))) (G308c@syntax-dispatch G34c1@t '(_ any any . each-any)))) G34bb@e))) (set! G3042@bless (lambda (G34d5@x) (G2e31@mkstx ((letrec ((G34d7@f (lambda (G34d9@x) (if (G2e11@stx? G34d9@x) G34d9@x (if (pair? G34d9@x) (cons (G34d7@f (car G34d9@x)) (G34d7@f (cdr G34d9@x))) (if (symbol? G34d9@x) (G301a@scheme-stx G34d9@x) (if (vector? G34d9@x) (vector-map G34d7@f G34d9@x) G34d9@x))))))) G34d7@f) G34d5@x) '() '() '()))) (set! G3044@with-syntax-macro (lambda (G34db@e) ((lambda (G34dd@t) ((lambda (G34df@ls/false) (if G34df@ls/false (apply (lambda (G34e1@pat* G34e2@expr* G34e3@b G34e4@b*) ((lambda (G34e9@idn*) (begin (G30b4@verify-formals (map car G34e9@idn*) G34db@e) ((lambda (G34eb@t*) (G3042@bless (list 'let (map list G34eb@t* G34e2@expr*) ((letrec ((G34ed@f (lambda (G34ef@pat* G34f0@t*) (if (null? G34ef@pat*) (cons 'begin (cons '#f (cons G34e3@b G34e4@b*))) (list 'syntax-case (car G34f0@t*) '() (list (car G34ef@pat*) (G34ed@f (cdr G34ef@pat*) (cdr G34f0@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34ef@pat*)) (car G34f0@t*)))))))) G34ed@f) G34e1@pat* G34eb@t*)))) (G316b@generate-temporaries G34e2@expr*)))) ((letrec ((G34f3@f (lambda (G34f5@pat*) (if (null? G34f5@pat*) '() (call-with-values (lambda () (G308a@convert-pattern (car G34f5@pat*) '())) (lambda (G34f9@G34f7 G34fa@G34f8) ((lambda (G34fd@idn* G34fe@pat) (append G34fd@idn* (G34f3@f (cdr G34f5@pat*)))) G34fa@G34f8 G34f9@G34f7))))))) G34f3@f) G34e1@pat*))) G34df@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G34dd@t))) (G308c@syntax-dispatch G34dd@t '(_ #(each (any any)) any . each-any)))) G34db@e))) (set! G3046@invalid-fmls-error (lambda (G3501@stx G3502@fmls) ((lambda (G3505@t) ((lambda (G3507@ls/false) (if G3507@ls/false (apply (lambda (G3509@id* G350a@last) ((letrec ((G350d@f (lambda (G350f@id*) (if (null? G350f@id*) (values) (if (not (G2e49@id? (car G350f@id*))) (G317f@syntax-violation '#f '"not an identifier" G3501@stx (car G350f@id*)) (begin (G350d@f (cdr G350f@id*)) (if (G2e57@bound-id-member? (car G350f@id*) (cdr G350f@id*)) (G317f@syntax-violation '#f '"duplicate binding" G3501@stx (car G350f@id*)) (void)))))))) G350d@f) (if (G2e49@id? G350a@last) (cons G350a@last G3509@id*) (if (G2e3f@syntax-null? G350a@last) G3509@id* (G317f@syntax-violation '#f '"not an identifier" G3501@stx G350a@last))))) G3507@ls/false) ((lambda (G3511@t) ((lambda (G3513@ls/false) (if G3513@ls/false (apply (lambda () (G317f@syntax-violation '#f '"malformed binding form" G3501@stx G3502@fmls)) G3513@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3511@t))) (G308c@syntax-dispatch G3511@t '_))) G3505@t))) (G308c@syntax-dispatch G3505@t '#(each+ any () any)))) G3502@fmls))) (set! G3048@let-macro (lambda (G3515@stx) ((lambda (G3517@t) ((lambda (G3519@ls/false) (if G3519@ls/false (apply (lambda (G351b@lhs* G351c@rhs* G351d@b G351e@b*) (if (G2e53@valid-bound-ids? G351b@lhs*) (G3042@bless (cons (cons 'lambda (cons G351b@lhs* (cons G351d@b G351e@b*))) G351c@rhs*)) (G3046@invalid-fmls-error G3515@stx G351b@lhs*))) G3519@ls/false) ((lambda (G3523@t) ((lambda (G3525@ls/false) (if (if G3525@ls/false (begin '#f (apply (lambda (G3527@f G3528@lhs* G3529@rhs* G352a@b G352b@b*) (G2e49@id? G3527@f)) G3525@ls/false)) '#f) (apply (lambda (G3531@f G3532@lhs* G3533@rhs* G3534@b G3535@b*) (if (G2e53@valid-bound-ids? G3532@lhs*) (G3042@bless (cons (list 'letrec (list (list G3531@f (cons 'lambda (cons G3532@lhs* (cons G3534@b G3535@b*))))) G3531@f) G3533@rhs*)) (G3046@invalid-fmls-error G3515@stx G3532@lhs*))) G3525@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3523@t))) (G308c@syntax-dispatch G3523@t '(_ any #(each (any any)) any . each-any)))) G3517@t))) (G308c@syntax-dispatch G3517@t '(_ #(each (any any)) any . each-any)))) G3515@stx))) (set! G304a@let-values-macro (lambda (G353b@stx) ((lambda (G353e@rename G3540@rename*) (begin (set! G353e@rename (lambda (G35a0@x G35a1@old* G35a2@new*) (begin (if (not (G2e49@id? G35a0@x)) (G317f@syntax-violation '#f '"not an indentifier" G353b@stx G35a0@x) (void)) (if (G2e57@bound-id-member? G35a0@x G35a1@old*) (G317f@syntax-violation '#f '"duplicate binding" G353b@stx G35a0@x) (void)) ((lambda (G35a6@y) (values G35a6@y (cons G35a0@x G35a1@old*) (cons G35a6@y G35a2@new*))) (gensym (G3185@syntax->datum G35a0@x)))))) (set! G3540@rename* (lambda (G358e@x* G358f@old* G3590@new*) (if (null? G358e@x*) (values '() G358f@old* G3590@new*) (call-with-values (lambda () (G353e@rename (car G358e@x*) G358f@old* G3590@new*)) (lambda (G3594@x G3595@old* G3596@new*) (call-with-values (lambda () (G3540@rename* (cdr G358e@x*) G3595@old* G3596@new*)) (lambda (G359a@x* G359b@old* G359c@new*) (values (cons G3594@x G359a@x*) G359b@old* G359c@new*)))))))) ((lambda (G3541@t) ((lambda (G3543@ls/false) (if G3543@ls/false (apply (lambda (G3545@b G3546@b*) (cons* (G3042@bless 'let) '() G3545@b G3546@b*)) G3543@ls/false) ((lambda (G3549@t) ((lambda (G354b@ls/false) (if G354b@ls/false (apply (lambda (G354d@lhs* G354e@rhs* G354f@b G3550@b*) (G3042@bless ((letrec ((G3555@f (lambda (G3557@lhs* G3558@rhs* G3559@old* G355a@new*) (if (null? G3557@lhs*) (cons 'let (cons (map list G3559@old* G355a@new*) (cons G354f@b G3550@b*))) ((lambda (G355f@t) ((lambda (G3561@ls/false) (if G3561@ls/false (apply (lambda (G3563@x*) (call-with-values (lambda () (G3540@rename* G3563@x* G3559@old* G355a@new*)) (lambda (G3568@G3565 G3569@G3566 G356a@G3567) ((lambda (G356e@new* G356f@old* G3570@y*) (list 'call-with-values (list 'lambda '() (car G3558@rhs*)) (list 'lambda G3570@y* (G3555@f (cdr G3557@lhs*) (cdr G3558@rhs*) G356f@old* G356e@new*)))) G356a@G3567 G3569@G3566 G3568@G3565)))) G3561@ls/false) ((lambda (G3574@t) ((lambda (G3576@ls/false) (if G3576@ls/false (apply (lambda (G3578@x* G3579@x) (call-with-values (lambda () (G353e@rename G3579@x G3559@old* G355a@new*)) (lambda (G357c@y G357d@old* G357e@new*) (call-with-values (lambda () (G3540@rename* G3578@x* G357d@old* G357e@new*)) (lambda (G3582@y* G3583@old* G3584@new*) (list 'call-with-values (list 'lambda '() (car G3558@rhs*)) (list 'lambda (append G3582@y* G357c@y) (G3555@f (cdr G3557@lhs*) (cdr G3558@rhs*) G3583@old* G3584@new*)))))))) G3576@ls/false) ((lambda (G3588@t) ((lambda (G358a@ls/false) (if G358a@ls/false (apply (lambda (G358c@others) (G317f@syntax-violation '#f '"malformed bindings" G353b@stx G358c@others)) G358a@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3588@t))) (G308c@syntax-dispatch G3588@t 'any))) G3574@t))) (G308c@syntax-dispatch G3574@t '#(each+ any () any)))) G355f@t))) (G308c@syntax-dispatch G355f@t 'each-any))) (car G3557@lhs*)))))) G3555@f) G354d@lhs* G354e@rhs* '() '()))) G354b@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3549@t))) (G308c@syntax-dispatch G3549@t '(_ #(each (any any)) any . each-any)))) G3541@t))) (G308c@syntax-dispatch G3541@t '(_ () any . each-any)))) G353b@stx))) '#f '#f))) (set! G304c@let*-values-macro (lambda (G35a8@stx) ((lambda (G35ab@check) (begin (set! G35ab@check (lambda (G35da@x*) (if (not (null? G35da@x*)) ((lambda (G35dc@x) (begin (if (not (G2e49@id? G35dc@x)) (G317f@syntax-violation '#f '"not an identifier" G35a8@stx G35dc@x) (void)) (G35ab@check (cdr G35da@x*)) (if (G2e57@bound-id-member? G35dc@x (cdr G35da@x*)) (G317f@syntax-violation '#f '"duplicate identifier" G35a8@stx G35dc@x) (void)))) (car G35da@x*)) (void)))) ((lambda (G35ac@t) ((lambda (G35ae@ls/false) (if G35ae@ls/false (apply (lambda (G35b0@b G35b1@b*) (cons* (G3042@bless 'let) '() G35b0@b G35b1@b*)) G35ae@ls/false) ((lambda (G35b4@t) ((lambda (G35b6@ls/false) (if G35b6@ls/false (apply (lambda (G35b8@lhs* G35b9@rhs* G35ba@b G35bb@b*) (G3042@bless ((letrec ((G35c0@f (lambda (G35c2@lhs* G35c3@rhs*) (if (null? G35c2@lhs*) (cons 'begin (cons G35ba@b G35bb@b*)) ((lambda (G35c6@t) ((lambda (G35c8@ls/false) (if G35c8@ls/false (apply (lambda (G35ca@x*) (begin (G35ab@check G35ca@x*) (list 'call-with-values (list 'lambda '() (car G35c3@rhs*)) (list 'lambda G35ca@x* (G35c0@f (cdr G35c2@lhs*) (cdr G35c3@rhs*)))))) G35c8@ls/false) ((lambda (G35cc@t) ((lambda (G35ce@ls/false) (if G35ce@ls/false (apply (lambda (G35d0@x* G35d1@x) (begin (G35ab@check (cons G35d1@x G35d0@x*)) (list 'call-with-values (list 'lambda '() (car G35c3@rhs*)) (list 'lambda (append G35d0@x* G35d1@x) (G35c0@f (cdr G35c2@lhs*) (cdr G35c3@rhs*)))))) G35ce@ls/false) ((lambda (G35d4@t) ((lambda (G35d6@ls/false) (if G35d6@ls/false (apply (lambda (G35d8@others) (G317f@syntax-violation '#f '"malformed bindings" G35a8@stx G35d8@others)) G35d6@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G35d4@t))) (G308c@syntax-dispatch G35d4@t 'any))) G35cc@t))) (G308c@syntax-dispatch G35cc@t '#(each+ any () any)))) G35c6@t))) (G308c@syntax-dispatch G35c6@t 'each-any))) (car G35c2@lhs*)))))) G35c0@f) G35b8@lhs* G35b9@rhs*))) G35b6@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G35b4@t))) (G308c@syntax-dispatch G35b4@t '(_ #(each (any any)) any . each-any)))) G35ac@t))) (G308c@syntax-dispatch G35ac@t '(_ () any . each-any)))) G35a8@stx))) '#f))) (set! G304e@trace-lambda-macro (lambda (G35de@stx) ((lambda (G35e0@t) ((lambda (G35e2@ls/false) (if G35e2@ls/false (apply (lambda (G35e4@who G35e5@fmls G35e6@b G35e7@b*) (if (G2e53@valid-bound-ids? G35e5@fmls) (G3042@bless (list 'make-traced-procedure (list 'quote G35e4@who) (cons 'lambda (cons G35e5@fmls (cons G35e6@b G35e7@b*))))) (G3046@invalid-fmls-error G35de@stx G35e5@fmls))) G35e2@ls/false) ((lambda (G35ec@t) ((lambda (G35ee@ls/false) (if G35ee@ls/false (apply (lambda (G35f0@who G35f1@fmls G35f2@last G35f3@b G35f4@b*) (if (G2e53@valid-bound-ids? (cons G35f2@last G35f1@fmls)) (G3042@bless (list 'make-traced-procedure (list 'quote G35f0@who) (cons 'lambda (cons (append G35f1@fmls G35f2@last) (cons G35f3@b G35f4@b*))))) (G3046@invalid-fmls-error G35de@stx (append G35f1@fmls G35f2@last)))) G35ee@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G35ec@t))) (G308c@syntax-dispatch G35ec@t '(_ any #(each+ any () any) any . each-any)))) G35e0@t))) (G308c@syntax-dispatch G35e0@t '(_ any each-any any . each-any)))) G35de@stx))) (set! G3050@trace-define-macro (lambda (G35fa@stx) ((lambda (G35fc@t) ((lambda (G35fe@ls/false) (if G35fe@ls/false (apply (lambda (G3600@who G3601@fmls G3602@b G3603@b*) (if (G2e53@valid-bound-ids? G3601@fmls) (G3042@bless (list 'define G3600@who (list 'make-traced-procedure (list 'quote G3600@who) (cons 'lambda (cons G3601@fmls (cons G3602@b G3603@b*)))))) (G3046@invalid-fmls-error G35fa@stx G3601@fmls))) G35fe@ls/false) ((lambda (G3608@t) ((lambda (G360a@ls/false) (if G360a@ls/false (apply (lambda (G360c@who G360d@fmls G360e@last G360f@b G3610@b*) (if (G2e53@valid-bound-ids? (cons G360e@last G360d@fmls)) (G3042@bless (list 'define G360c@who (list 'make-traced-procedure (list 'quote G360c@who) (cons 'lambda (cons (append G360d@fmls G360e@last) (cons G360f@b G3610@b*)))))) (G3046@invalid-fmls-error G35fa@stx (append G360d@fmls G360e@last)))) G360a@ls/false) ((lambda (G3616@t) ((lambda (G3618@ls/false) (if G3618@ls/false (apply (lambda (G361a@who G361b@expr) (if (G2e49@id? G361a@who) (G3042@bless (list 'define G361a@who (list 'let (list (list 'v G361b@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G361a@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G317f@syntax-violation '#f '"invalid name" G35fa@stx))) G3618@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3616@t))) (G308c@syntax-dispatch G3616@t '(_ any any)))) G3608@t))) (G308c@syntax-dispatch G3608@t '(_ (any . #(each+ any () any)) any . each-any)))) G35fc@t))) (G308c@syntax-dispatch G35fc@t '(_ (any . each-any) any . each-any)))) G35fa@stx))) (set! G3052@trace-define-syntax-macro (lambda (G361e@stx) ((lambda (G3620@t) ((lambda (G3622@ls/false) (if G3622@ls/false (apply (lambda (G3624@who G3625@expr) (if (G2e49@id? G3624@who) (G3042@bless (list 'define-syntax G3624@who (list 'make-traced-macro (list 'quote G3624@who) G3625@expr))) (G317f@syntax-violation '#f '"invalid name" G361e@stx))) G3622@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3620@t))) (G308c@syntax-dispatch G3620@t '(_ any any)))) G361e@stx))) (set! G3054@trace-let/rec-syntax (lambda (G3628@who) (lambda (G362a@stx) ((lambda (G362c@t) ((lambda (G362e@ls/false) (if G362e@ls/false (apply (lambda (G3630@lhs* G3631@rhs* G3632@b G3633@b*) (if (G2e53@valid-bound-ids? G3630@lhs*) ((lambda (G3638@rhs*) (G3042@bless (cons G3628@who (cons (map list G3630@lhs* G3638@rhs*) (cons G3632@b G3633@b*))))) (map (lambda (G363a@lhs G363b@rhs) (list 'make-traced-macro (list 'quote G363a@lhs) G363b@rhs)) G3630@lhs* G3631@rhs*)) (G3046@invalid-fmls-error G362a@stx G3630@lhs*))) G362e@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G362c@t))) (G308c@syntax-dispatch G362c@t '(_ #(each (any any)) any . each-any)))) G362a@stx)))) (set! G3056@trace-let-syntax-macro (G3054@trace-let/rec-syntax 'let-syntax)) (set! G3058@trace-letrec-syntax-macro (G3054@trace-let/rec-syntax 'letrec-syntax)) (set! G305a@guard-macro (lambda (G363e@x) ((lambda (G3641@gen-clauses) (begin (set! G3641@gen-clauses (lambda (G3658@con G3659@outerk G365a@clause*) ((lambda (G365f@f G3661@f*) (begin (set! G365f@f (lambda (G3692@x G3693@k) ((lambda (G3696@t) ((lambda (G3698@ls/false) (if G3698@ls/false (apply (lambda (G369a@e G369b@p) ((lambda (G369e@t) (list 'let (list (list G369e@t G369a@e)) (list 'if G369e@t (list G369b@p G369e@t) G3693@k))) (gensym))) G3698@ls/false) ((lambda (G36a0@t) ((lambda (G36a2@ls/false) (if G36a2@ls/false (apply (lambda (G36a4@e) ((lambda (G36a6@t) (list 'let (list (list G36a6@t G36a4@e)) (list 'if G36a6@t G36a6@t G3693@k))) (gensym))) G36a2@ls/false) ((lambda (G36a8@t) ((lambda (G36aa@ls/false) (if G36aa@ls/false (apply (lambda (G36ac@e G36ad@v G36ae@v*) (list 'if G36ac@e (cons 'begin (cons G36ad@v G36ae@v*)) G3693@k)) G36aa@ls/false) ((lambda (G36b2@t) ((lambda (G36b4@ls/false) (if G36b4@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid guard clause" G3692@x)) G36b4@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G36b2@t))) (G308c@syntax-dispatch G36b2@t '_))) G36a8@t))) (G308c@syntax-dispatch G36a8@t '(any any . each-any)))) G36a0@t))) (G308c@syntax-dispatch G36a0@t '(any)))) G3696@t))) (G308c@syntax-dispatch G3696@t '(any #(scheme-id =>) any)))) G3692@x))) (set! G3661@f* (lambda (G366c@x*) ((lambda (G366e@t) ((lambda (G3670@ls/false) (if G3670@ls/false (apply (lambda () (values (list 'raise G3658@con) '#t)) G3670@ls/false) ((lambda (G3672@t) ((lambda (G3674@ls/false) (if G3674@ls/false (apply (lambda (G3676@e G3677@e*) (values (cons 'begin (cons G3676@e G3677@e*)) '#f)) G3674@ls/false) ((lambda (G367a@t) ((lambda (G367c@ls/false) (if G367c@ls/false (apply (lambda (G367e@cls G367f@cls*) (call-with-values (lambda () (G3661@f* G367f@cls*)) (lambda (G3684@G3682 G3685@G3683) ((lambda (G3688@g G3689@e) (values (G365f@f G367e@cls G3689@e) G3688@g)) G3685@G3683 G3684@G3682)))) G367c@ls/false) ((lambda (G368c@t) ((lambda (G368e@ls/false) (if G368e@ls/false (apply (lambda (G3690@others) (G317f@syntax-violation '#f '"invalid guard clause" G3690@others)) G368e@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G368c@t))) (G308c@syntax-dispatch G368c@t 'any))) G367a@t))) (G308c@syntax-dispatch G367a@t '(any . any)))) G3672@t))) (G308c@syntax-dispatch G3672@t '((#(scheme-id else) any . each-any))))) G366e@t))) (G308c@syntax-dispatch G366e@t '()))) G366c@x*))) (call-with-values (lambda () (G3661@f* G365a@clause*)) (lambda (G3664@G3662 G3665@G3663) ((lambda (G3668@raisek G3669@code) (if G3668@raisek (list G3659@outerk G3669@code) G3669@code)) G3665@G3663 G3664@G3662))))) '#f '#f))) ((lambda (G3642@t) ((lambda (G3644@ls/false) (if (if G3644@ls/false (begin '#f (apply (lambda (G3646@con G3647@clause* G3648@b G3649@b*) (G2e49@id? G3646@con)) G3644@ls/false)) '#f) (apply (lambda (G364e@con G364f@clause* G3650@b G3651@b*) ((lambda (G3656@outerk) (G3042@bless (list 'call/cc (list 'lambda (list G3656@outerk) (list 'with-exception-handler (list 'lambda (list G364e@con) (G3641@gen-clauses G364e@con G3656@outerk G364f@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3650@b G3651@b*))))))))) (gensym))) G3644@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3642@t))) (G308c@syntax-dispatch G3642@t '(_ (any . each-any) any . each-any)))) G363e@x))) '#f))) (set! G305c@define-enumeration-macro (lambda (G36b6@stx) ((lambda (G36b9@set? G36bb@remove-dups) (begin (set! G36b9@set? (lambda (G36d2@x) ((lambda (G36d4@t) (if G36d4@t G36d4@t (begin '#f (if (not (memq (car G36d2@x) (cdr G36d2@x))) (begin '#f (G36b9@set? (cdr G36d2@x))) '#f)))) (null? G36d2@x)))) (set! G36bb@remove-dups (lambda (G36d0@ls) (if (null? G36d0@ls) '() (cons (car G36d0@ls) (G36bb@remove-dups (remq (car G36d0@ls) (cdr G36d0@ls))))))) ((lambda (G36bc@t) ((lambda (G36be@ls/false) (if (if G36be@ls/false (begin '#f (apply (lambda (G36c0@name G36c1@id* G36c2@maker) (if (G2e49@id? G36c0@name) (if (G2e49@id? G36c2@maker) (begin '#f (for-all G2e49@id? G36c1@id*)) '#f) '#f)) G36be@ls/false)) '#f) (apply (lambda (G36c6@name G36c7@id* G36c8@maker) ((lambda (G36cc@name* G36cd@mk) (G3042@bless (list 'begin (list 'define G36cd@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G36cc@name*)))) (list 'define-syntax G36c6@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G36cc@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G36c6@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G36c8@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G36c8@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G36cc@name*)) (cons 'syntax-violation (cons (list 'quote G36c8@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36cd@mk '('(n* ...)))))))))))) (G36bb@remove-dups (G3185@syntax->datum G36c7@id*)) (gensym))) G36be@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G36bc@t))) (G308c@syntax-dispatch G36bc@t '(_ any each-any any)))) G36b6@stx))) '#f '#f))) (set! G305e@time-macro (lambda (G36d6@stx) ((lambda (G36d8@t) ((lambda (G36da@ls/false) (if G36da@ls/false (apply (lambda (G36dc@expr) ((lambda (G36de@str) (G3042@bless (list 'time-it G36de@str (list 'lambda '() G36dc@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36e2@G36e0 G36e3@G36e1) ((lambda (G36e6@e G36e7@p) (begin (write (G3185@syntax->datum G36dc@expr) G36e7@p) (G36e6@e))) G36e3@G36e1 G36e2@G36e0))))) G36da@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G36d8@t))) (G308c@syntax-dispatch G36d8@t '(_ any)))) G36d6@stx))) (set! G3060@delay-macro (lambda (G36ea@stx) ((lambda (G36ec@t) ((lambda (G36ee@ls/false) (if G36ee@ls/false (apply (lambda (G36f0@expr) (G3042@bless (list 'make-promise (list 'lambda '() G36f0@expr)))) G36ee@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G36ec@t))) (G308c@syntax-dispatch G36ec@t '(_ any)))) G36ea@stx))) (set! G3062@assert-macro (lambda (G36f2@stx) ((lambda (G36f4@t) ((lambda (G36f6@ls/false) (if G36f6@ls/false (apply (lambda (G36f8@expr) ((lambda (G36fa@pos) (G3042@bless (list 'unless G36f8@expr (list 'assertion-error (list 'quote G36f8@expr) (list 'quote G36fa@pos))))) ((lambda (G36fc@t) (if G36fc@t G36fc@t (begin '#f (G3175@expression-position G36f8@expr)))) (G3175@expression-position G36f2@stx)))) G36f6@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G36f4@t))) (G308c@syntax-dispatch G36f4@t '(_ any)))) G36f2@stx))) (set! G3064@endianness-macro (lambda (G36fe@stx) ((lambda (G3700@t) ((lambda (G3702@ls/false) (if G3702@ls/false (apply (lambda (G3704@e) ((lambda (G3706@t) (if (memv G3706@t '(little)) (G3042@bless ''little) (if (memv G3706@t '(big)) (G3042@bless ''big) (G317f@syntax-violation '#f '"endianness must be big or little" G36fe@stx)))) (G3185@syntax->datum G3704@e))) G3702@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3700@t))) (G308c@syntax-dispatch G3700@t '(_ any)))) G36fe@stx))) (set! G3066@identifier-syntax-macro (lambda (G3708@stx) ((lambda (G370a@t) ((lambda (G370c@ls/false) (if G370c@ls/false (apply (lambda (G370e@expr) (G3042@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G370e@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G370e@expr) '((syntax (e* ...)))))))))) G370c@ls/false) ((lambda (G3710@t) ((lambda (G3712@ls/false) (if (if G3712@ls/false (begin '#f (apply (lambda (G3714@id1 G3715@expr1 G3716@id2 G3717@expr2 G3718@expr3) (if (G2e49@id? G3714@id1) (if (G2e49@id? G3716@id2) (begin '#f (G2e49@id? G3717@expr2)) '#f) '#f)) G3712@ls/false)) '#f) (apply (lambda (G371e@id1 G371f@expr1 G3720@id2 G3721@expr2 G3722@expr3) (G3042@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G371f@expr1)) (list (list 'set! 'id G3721@expr2) (list 'syntax G3722@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G371f@expr1 '(e* ...))))))))) G3712@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3710@t))) (G308c@syntax-dispatch G3710@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G370a@t))) (G308c@syntax-dispatch G370a@t '(_ any)))) G3708@stx))) (set! G3068@do-macro (lambda (G3728@stx) ((lambda (G372b@bind) (begin (set! G372b@bind (lambda (G3742@x) ((lambda (G3744@t) ((lambda (G3746@ls/false) (if G3746@ls/false (apply (lambda (G3748@x G3749@init) (list G3748@x G3749@init G3748@x)) G3746@ls/false) ((lambda (G374c@t) ((lambda (G374e@ls/false) (if G374e@ls/false (apply (lambda (G3750@x G3751@init G3752@step) (list G3750@x G3751@init G3752@step)) G374e@ls/false) ((lambda (G3756@t) ((lambda (G3758@ls/false) (if G3758@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid binding" G3728@stx)) G3758@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3756@t))) (G308c@syntax-dispatch G3756@t '_))) G374c@t))) (G308c@syntax-dispatch G374c@t '(any any any)))) G3744@t))) (G308c@syntax-dispatch G3744@t '(any any)))) G3742@x))) ((lambda (G372c@t) ((lambda (G372e@ls/false) (if G372e@ls/false (apply (lambda (G3730@binding* G3731@test G3732@expr* G3733@command*) ((lambda (G3738@t) ((lambda (G373a@ls/false) (if G373a@ls/false (apply (lambda (G373c@x* G373d@init* G373e@step*) (if (G2e53@valid-bound-ids? G373c@x*) (G3042@bless (list 'letrec (list (list 'loop (list 'lambda G373c@x* (list 'if G3731@test (cons 'begin (cons '(if #f #f) G3732@expr*)) (cons 'begin (append G3733@command* (list (cons 'loop G373e@step*)))))))) (cons 'loop G373d@init*))) (G317f@syntax-violation '#f '"invalid bindings" G3728@stx))) G373a@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3738@t))) (G308c@syntax-dispatch G3738@t '#(each (any any any))))) (map G372b@bind G3730@binding*))) G372e@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G372c@t))) (G308c@syntax-dispatch G372c@t '(_ each-any (any . each-any) . each-any)))) G3728@stx))) '#f))) (set! G306a@let*-macro (lambda (G375a@stx) ((lambda (G375c@t) ((lambda (G375e@ls/false) (if (if G375e@ls/false (begin '#f (apply (lambda (G3760@lhs* G3761@rhs* G3762@b G3763@b*) (for-all G2e49@id? G3760@lhs*)) G375e@ls/false)) '#f) (apply (lambda (G3768@lhs* G3769@rhs* G376a@b G376b@b*) (G3042@bless ((letrec ((G3770@f (lambda (G3772@x*) (if (null? G3772@x*) (cons 'let (cons '() (cons G376a@b G376b@b*))) (list 'let (list (car G3772@x*)) (G3770@f (cdr G3772@x*))))))) G3770@f) (map list G3768@lhs* G3769@rhs*)))) G375e@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G375c@t))) (G308c@syntax-dispatch G375c@t '(_ #(each (any any)) any . each-any)))) G375a@stx))) (set! G306c@or-macro (lambda (G3774@stx) ((lambda (G3776@t) ((lambda (G3778@ls/false) (if G3778@ls/false (apply (lambda () '#f) G3778@ls/false) ((lambda (G377a@t) ((lambda (G377c@ls/false) (if G377c@ls/false (apply (lambda (G377e@e G377f@e*) (G3042@bless ((letrec ((G3782@f (lambda (G3784@e G3785@e*) (if (null? G3785@e*) (list 'begin '#f G3784@e) (list 'let (list (list 't G3784@e)) (list 'if 't 't (G3782@f (car G3785@e*) (cdr G3785@e*)))))))) G3782@f) G377e@e G377f@e*))) G377c@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G377a@t))) (G308c@syntax-dispatch G377a@t '(_ any . each-any)))) G3776@t))) (G308c@syntax-dispatch G3776@t '(_)))) G3774@stx))) (set! G306e@and-macro (lambda (G3788@stx) ((lambda (G378a@t) ((lambda (G378c@ls/false) (if G378c@ls/false (apply (lambda () '#t) G378c@ls/false) ((lambda (G378e@t) ((lambda (G3790@ls/false) (if G3790@ls/false (apply (lambda (G3792@e G3793@e*) (G3042@bless ((letrec ((G3796@f (lambda (G3798@e G3799@e*) (if (null? G3799@e*) (list 'begin '#f G3798@e) (cons 'if (cons G3798@e (cons (G3796@f (car G3799@e*) (cdr G3799@e*)) '(#f)))))))) G3796@f) G3792@e G3793@e*))) G3790@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G378e@t))) (G308c@syntax-dispatch G378e@t '(_ any . each-any)))) G378a@t))) (G308c@syntax-dispatch G378a@t '(_)))) G3788@stx))) (set! G3070@cond-macro (lambda (G379c@stx) ((lambda (G379e@t) ((lambda (G37a0@ls/false) (if G37a0@ls/false (apply (lambda (G37a2@cls G37a3@cls*) (G3042@bless ((letrec ((G37a6@f (lambda (G37a8@cls G37a9@cls*) (if (null? G37a9@cls*) ((lambda (G37ac@t) ((lambda (G37ae@ls/false) (if G37ae@ls/false (apply (lambda (G37b0@e G37b1@e*) (cons 'begin (cons G37b0@e G37b1@e*))) G37ae@ls/false) ((lambda (G37b4@t) ((lambda (G37b6@ls/false) (if G37b6@ls/false (apply (lambda (G37b8@e G37b9@p) (list 'let (list (list 't G37b8@e)) (list 'if 't (cons G37b9@p '(t))))) G37b6@ls/false) ((lambda (G37bc@t) ((lambda (G37be@ls/false) (if G37be@ls/false (apply (lambda (G37c0@e) (cons 'or (cons G37c0@e '((if #f #f))))) G37be@ls/false) ((lambda (G37c2@t) ((lambda (G37c4@ls/false) (if G37c4@ls/false (apply (lambda (G37c6@e G37c7@e*) (list 'if G37c6@e (cons 'begin G37c7@e*))) G37c4@ls/false) ((lambda (G37ca@t) ((lambda (G37cc@ls/false) (if G37cc@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid last clause" G379c@stx)) G37cc@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G37ca@t))) (G308c@syntax-dispatch G37ca@t '_))) G37c2@t))) (G308c@syntax-dispatch G37c2@t '(any . each-any)))) G37bc@t))) (G308c@syntax-dispatch G37bc@t '(any)))) G37b4@t))) (G308c@syntax-dispatch G37b4@t '(any #(scheme-id =>) any)))) G37ac@t))) (G308c@syntax-dispatch G37ac@t '(#(scheme-id else) any . each-any)))) G37a8@cls) ((lambda (G37ce@t) ((lambda (G37d0@ls/false) (if G37d0@ls/false (apply (lambda (G37d2@e G37d3@e*) (G317f@syntax-violation '#f '"incorrect position of keyword else" G379c@stx)) G37d0@ls/false) ((lambda (G37d6@t) ((lambda (G37d8@ls/false) (if G37d8@ls/false (apply (lambda (G37da@e G37db@p) (list 'let (list (list 't G37da@e)) (list 'if 't (cons G37db@p '(t)) (G37a6@f (car G37a9@cls*) (cdr G37a9@cls*))))) G37d8@ls/false) ((lambda (G37de@t) ((lambda (G37e0@ls/false) (if G37e0@ls/false (apply (lambda (G37e2@e) (list 'or G37e2@e (G37a6@f (car G37a9@cls*) (cdr G37a9@cls*)))) G37e0@ls/false) ((lambda (G37e4@t) ((lambda (G37e6@ls/false) (if G37e6@ls/false (apply (lambda (G37e8@e G37e9@e*) (list 'if G37e8@e (cons 'begin G37e9@e*) (G37a6@f (car G37a9@cls*) (cdr G37a9@cls*)))) G37e6@ls/false) ((lambda (G37ec@t) ((lambda (G37ee@ls/false) (if G37ee@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid last clause" G379c@stx)) G37ee@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G37ec@t))) (G308c@syntax-dispatch G37ec@t '_))) G37e4@t))) (G308c@syntax-dispatch G37e4@t '(any . each-any)))) G37de@t))) (G308c@syntax-dispatch G37de@t '(any)))) G37d6@t))) (G308c@syntax-dispatch G37d6@t '(any #(scheme-id =>) any)))) G37ce@t))) (G308c@syntax-dispatch G37ce@t '(#(scheme-id else) any . each-any)))) G37a8@cls))))) G37a6@f) G37a2@cls G37a3@cls*))) G37a0@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G379e@t))) (G308c@syntax-dispatch G379e@t '(_ any . each-any)))) G379c@stx))) (set! G3072@do-include (lambda (G37f0@stx G37f1@id G37f2@filename) ((lambda (G37f6@filename) (begin (if (not (if (string? G37f6@filename) (begin '#f (G2e49@id? G37f1@id)) '#f)) (G317f@syntax-violation '#f '"invalid syntax" G37f0@stx) (void)) (cons (G3042@bless 'begin) (with-input-from-file G37f6@filename (lambda () ((letrec ((G37f8@f (lambda (G37fa@ls) ((lambda (G37fc@x) (if (eof-object? G37fc@x) (reverse G37fa@ls) (G37f8@f (cons (G2e27@datum->stx G37f1@id G37fc@x) G37fa@ls)))) (G298e@G288c@read-annotated))))) G37f8@f) '())))))) (G2e5f@stx->datum G37f2@filename)))) (set! G3074@include-macro (lambda (G37fe@e) ((lambda (G3800@t) ((lambda (G3802@ls/false) (if G3802@ls/false (apply (lambda (G3804@id G3805@filename) (G3072@do-include G37fe@e G3804@id G3805@filename)) G3802@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3800@t))) (G308c@syntax-dispatch G3800@t '(any any)))) G37fe@e))) (set! G3076@include-into-macro (lambda (G3808@e) ((lambda (G380a@t) ((lambda (G380c@ls/false) (if G380c@ls/false (apply (lambda (G380e@id G380f@filename) (G3072@do-include G3808@e G380e@id G380f@filename)) G380c@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G380a@t))) (G308c@syntax-dispatch G380a@t '(_ any any)))) G3808@e))) (set! G3078@syntax-rules-macro (lambda (G3812@e) ((lambda (G3814@t) ((lambda (G3816@ls/false) (if G3816@ls/false (apply (lambda (G3818@lits G3819@pat* G381a@tmp*) (begin (G3092@verify-literals G3818@lits G3812@e) (G3042@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3818@lits (map (lambda (G381e@pat G381f@tmp) ((lambda (G3822@t) ((lambda (G3824@ls/false) (if G3824@ls/false (apply (lambda (G3826@rest) (list (cons 'g G3826@rest) (list 'syntax G381f@tmp))) G3824@ls/false) ((lambda (G3828@t) ((lambda (G382a@ls/false) (if G382a@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid syntax-rules pattern" G3812@e G381e@pat)) G382a@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3828@t))) (G308c@syntax-dispatch G3828@t '_))) G3822@t))) (G308c@syntax-dispatch G3822@t '(_ . any)))) G381e@pat)) G3819@pat* G381a@tmp*)))))))) G3816@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3814@t))) (G308c@syntax-dispatch G3814@t '(_ each-any . #(each (any any)))))) G3812@e))) (set! G307a@quasiquote-macro ((lambda () ((lambda (G382d@datum G3856@quasicons* G3858@quasicons G385a@quasiappend G385c@quasivector G385e@vquasi G3860@quasi) (begin (set! G382d@datum (lambda (G393b@x) (list (G301a@scheme-stx 'quote) (G2e31@mkstx G393b@x '() '() '())))) (set! G3856@quasicons* (lambda (G3933@x G3934@y) ((letrec ((G3937@f (lambda (G3939@x) (if (null? G3939@x) G3934@y (G3858@quasicons (car G3939@x) (G3937@f (cdr G3939@x))))))) G3937@f) G3933@x))) (set! G3858@quasicons (lambda (G390d@x G390e@y) ((lambda (G3911@t) ((lambda (G3913@ls/false) (if G3913@ls/false (apply (lambda (G3915@dy) ((lambda (G3917@t) ((lambda (G3919@ls/false) (if G3919@ls/false (apply (lambda (G391b@dx) (list (G301a@scheme-stx 'quote) (cons G391b@dx G3915@dy))) G3919@ls/false) ((lambda (G391d@t) ((lambda (G391f@ls/false) (if G391f@ls/false (apply (lambda () ((lambda (G3921@t) ((lambda (G3923@ls/false) (if G3923@ls/false (apply (lambda () (list (G301a@scheme-stx 'list) G390d@x)) G3923@ls/false) ((lambda (G3925@t) ((lambda (G3927@ls/false) (if G3927@ls/false (apply (lambda () (list (G301a@scheme-stx 'cons) G390d@x G390e@y)) G3927@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3925@t))) (G308c@syntax-dispatch G3925@t '_))) G3921@t))) (G308c@syntax-dispatch G3921@t '()))) G3915@dy)) G391f@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G391d@t))) (G308c@syntax-dispatch G391d@t '_))) G3917@t))) (G308c@syntax-dispatch G3917@t '(#(scheme-id quote) any)))) G390d@x)) G3913@ls/false) ((lambda (G3929@t) ((lambda (G392b@ls/false) (if G392b@ls/false (apply (lambda (G392d@stuff) (cons* (G301a@scheme-stx 'list) G390d@x G392d@stuff)) G392b@ls/false) ((lambda (G392f@t) ((lambda (G3931@ls/false) (if G3931@ls/false (apply (lambda () (list (G301a@scheme-stx 'cons) G390d@x G390e@y)) G3931@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G392f@t))) (G308c@syntax-dispatch G392f@t '_))) G3929@t))) (G308c@syntax-dispatch G3929@t '(#(scheme-id list) . each-any)))) G3911@t))) (G308c@syntax-dispatch G3911@t '(#(scheme-id quote) any)))) G390e@y))) (set! G385a@quasiappend (lambda (G38f3@x G38f4@y) ((lambda (G38f7@ls) (if (null? G38f7@ls) (list (G301a@scheme-stx 'quote) '()) (if (null? (cdr G38f7@ls)) (car G38f7@ls) (cons* (G301a@scheme-stx 'append) G38f7@ls)))) ((letrec ((G38f9@f (lambda (G38fb@x) (if (null? G38fb@x) ((lambda (G38fd@t) ((lambda (G38ff@ls/false) (if G38ff@ls/false (apply (lambda () '()) G38ff@ls/false) ((lambda (G3901@t) ((lambda (G3903@ls/false) (if G3903@ls/false (apply (lambda () (list G38f4@y)) G3903@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3901@t))) (G308c@syntax-dispatch G3901@t '_))) G38fd@t))) (G308c@syntax-dispatch G38fd@t '(#(scheme-id quote) ())))) G38f4@y) ((lambda (G3905@t) ((lambda (G3907@ls/false) (if G3907@ls/false (apply (lambda () (G38f9@f (cdr G38fb@x))) G3907@ls/false) ((lambda (G3909@t) ((lambda (G390b@ls/false) (if G390b@ls/false (apply (lambda () (cons (car G38fb@x) (G38f9@f (cdr G38fb@x)))) G390b@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3909@t))) (G308c@syntax-dispatch G3909@t '_))) G3905@t))) (G308c@syntax-dispatch G3905@t '(#(scheme-id quote) ())))) (car G38fb@x)))))) G38f9@f) G38f3@x)))) (set! G385c@quasivector (lambda (G38c1@x) ((lambda (G38c3@pat-x) ((lambda (G38c5@t) ((lambda (G38c7@ls/false) (if G38c7@ls/false (apply (lambda (G38c9@x*) (list (G301a@scheme-stx 'quote) (list->vector G38c9@x*))) G38c7@ls/false) ((lambda (G38cb@t) ((lambda (G38cd@ls/false) (if G38cd@ls/false (apply (lambda () ((letrec ((G38cf@f (lambda (G38d1@x G38d2@k) ((lambda (G38d5@t) ((lambda (G38d7@ls/false) (if G38d7@ls/false (apply (lambda (G38d9@x*) (G38d2@k (map (lambda (G38db@x) (list (G301a@scheme-stx 'quote) G38db@x)) G38d9@x*))) G38d7@ls/false) ((lambda (G38dd@t) ((lambda (G38df@ls/false) (if G38df@ls/false (apply (lambda (G38e1@x*) (G38d2@k G38e1@x*)) G38df@ls/false) ((lambda (G38e3@t) ((lambda (G38e5@ls/false) (if G38e5@ls/false (apply (lambda (G38e7@x G38e8@y) (G38cf@f G38e8@y (lambda (G38eb@ls) (G38d2@k (cons G38e7@x G38eb@ls))))) G38e5@ls/false) ((lambda (G38ed@t) ((lambda (G38ef@ls/false) (if G38ef@ls/false (apply (lambda () (list (G301a@scheme-stx 'list->vector) G38c3@pat-x)) G38ef@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G38ed@t))) (G308c@syntax-dispatch G38ed@t '_))) G38e3@t))) (G308c@syntax-dispatch G38e3@t '(#(scheme-id cons) any any)))) G38dd@t))) (G308c@syntax-dispatch G38dd@t '(#(scheme-id list) . each-any)))) G38d5@t))) (G308c@syntax-dispatch G38d5@t '(#(scheme-id quote) each-any)))) G38d1@x)))) G38cf@f) G38c1@x (lambda (G38f1@ls) (cons* (G301a@scheme-stx 'vector) G38f1@ls)))) G38cd@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G38cb@t))) (G308c@syntax-dispatch G38cb@t '_))) G38c5@t))) (G308c@syntax-dispatch G38c5@t '(#(scheme-id quote) each-any)))) G38c3@pat-x)) G38c1@x))) (set! G385e@vquasi (lambda (G389f@p G38a0@lev) ((lambda (G38a3@t) ((lambda (G38a5@ls/false) (if G38a5@ls/false (apply (lambda (G38a7@p G38a8@q) ((lambda (G38ab@t) ((lambda (G38ad@ls/false) (if G38ad@ls/false (apply (lambda (G38af@p) (if (= G38a0@lev '0) (G3856@quasicons* G38af@p (G385e@vquasi G38a8@q G38a0@lev)) (G3858@quasicons (G3858@quasicons (G382d@datum 'unquote) (G3860@quasi G38af@p (- G38a0@lev '1))) (G385e@vquasi G38a8@q G38a0@lev)))) G38ad@ls/false) ((lambda (G38b1@t) ((lambda (G38b3@ls/false) (if G38b3@ls/false (apply (lambda (G38b5@p) (if (= G38a0@lev '0) (G385a@quasiappend G38b5@p (G385e@vquasi G38a8@q G38a0@lev)) (G3858@quasicons (G3858@quasicons (G382d@datum 'unquote-splicing) (G3860@quasi G38b5@p (- G38a0@lev '1))) (G385e@vquasi G38a8@q G38a0@lev)))) G38b3@ls/false) ((lambda (G38b7@t) ((lambda (G38b9@ls/false) (if G38b9@ls/false (apply (lambda (G38bb@p) (G3858@quasicons (G3860@quasi G38bb@p G38a0@lev) (G385e@vquasi G38a8@q G38a0@lev))) G38b9@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G38b7@t))) (G308c@syntax-dispatch G38b7@t 'any))) G38b1@t))) (G308c@syntax-dispatch G38b1@t '(#(scheme-id unquote-splicing) . each-any)))) G38ab@t))) (G308c@syntax-dispatch G38ab@t '(#(scheme-id unquote) . each-any)))) G38a7@p)) G38a5@ls/false) ((lambda (G38bd@t) ((lambda (G38bf@ls/false) (if G38bf@ls/false (apply (lambda () (list (G301a@scheme-stx 'quote) '())) G38bf@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G38bd@t))) (G308c@syntax-dispatch G38bd@t '()))) G38a3@t))) (G308c@syntax-dispatch G38a3@t '(any . any)))) G389f@p))) (set! G3860@quasi (lambda (G3869@p G386a@lev) ((lambda (G386d@t) ((lambda (G386f@ls/false) (if G386f@ls/false (apply (lambda (G3871@p) (if (= G386a@lev '0) G3871@p (G3858@quasicons (G382d@datum 'unquote) (G3860@quasi (list G3871@p) (- G386a@lev '1))))) G386f@ls/false) ((lambda (G3873@t) ((lambda (G3875@ls/false) (if G3875@ls/false (apply (lambda (G3877@p G3878@q) (if (= G386a@lev '0) (G3856@quasicons* G3877@p (G3860@quasi G3878@q G386a@lev)) (G3858@quasicons (G3858@quasicons (G382d@datum 'unquote) (G3860@quasi G3877@p (- G386a@lev '1))) (G3860@quasi G3878@q G386a@lev)))) G3875@ls/false) ((lambda (G387b@t) ((lambda (G387d@ls/false) (if G387d@ls/false (apply (lambda (G387f@p G3880@q) (if (= G386a@lev '0) (G385a@quasiappend G387f@p (G3860@quasi G3880@q G386a@lev)) (G3858@quasicons (G3858@quasicons (G382d@datum 'unquote-splicing) (G3860@quasi G387f@p (- G386a@lev '1))) (G3860@quasi G3880@q G386a@lev)))) G387d@ls/false) ((lambda (G3883@t) ((lambda (G3885@ls/false) (if G3885@ls/false (apply (lambda (G3887@p) (G3858@quasicons (G382d@datum 'quasiquote) (G3860@quasi (list G3887@p) (+ G386a@lev '1)))) G3885@ls/false) ((lambda (G3889@t) ((lambda (G388b@ls/false) (if G388b@ls/false (apply (lambda (G388d@p G388e@q) (G3858@quasicons (G3860@quasi G388d@p G386a@lev) (G3860@quasi G388e@q G386a@lev))) G388b@ls/false) ((lambda (G3891@t) ((lambda (G3893@ls/false) (if (if G3893@ls/false (begin '#f (apply (lambda (G3895@x) (not (G2e11@stx? G3895@x))) G3893@ls/false)) '#f) (apply (lambda (G3897@x) (G385c@quasivector (G385e@vquasi G3897@x G386a@lev))) G3893@ls/false) ((lambda (G3899@t) ((lambda (G389b@ls/false) (if G389b@ls/false (apply (lambda (G389d@p) (list (G301a@scheme-stx 'quote) G389d@p)) G389b@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3899@t))) (G308c@syntax-dispatch G3899@t 'any))) G3891@t))) (G308c@syntax-dispatch G3891@t '#(vector each-any)))) G3889@t))) (G308c@syntax-dispatch G3889@t '(any . any)))) G3883@t))) (G308c@syntax-dispatch G3883@t '(#(scheme-id quasiquote) any)))) G387b@t))) (G308c@syntax-dispatch G387b@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3873@t))) (G308c@syntax-dispatch G3873@t '((#(scheme-id unquote) . each-any) . any)))) G386d@t))) (G308c@syntax-dispatch G386d@t '(#(scheme-id unquote) any)))) G3869@p))) (lambda (G3861@x) ((lambda (G3863@t) ((lambda (G3865@ls/false) (if G3865@ls/false (apply (lambda (G3867@e) (G3860@quasi G3867@e '0)) G3865@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3863@t))) (G308c@syntax-dispatch G3863@t '(_ any)))) G3861@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G307c@quasisyntax-macro ((lambda () ((lambda (G393e@quasi) (begin (set! G393e@quasi (lambda (G3956@p G3957@lev) ((lambda (G395a@t) ((lambda (G395c@ls/false) (if G395c@ls/false (apply (lambda (G395e@p) (if (= G3957@lev '0) ((lambda (G3960@g) (values (list G3960@g) (list G395e@p) G3960@g)) (gensym)) (call-with-values (lambda () (G393e@quasi G395e@p (- G3957@lev '1))) (lambda (G3965@G3962 G3966@G3963 G3967@G3964) ((lambda (G396b@p G396c@rhs* G396d@lhs*) (values G396d@lhs* G396c@rhs* (list 'unsyntax G396b@p))) G3967@G3964 G3966@G3963 G3965@G3962))))) G395c@ls/false) ((lambda (G3971@t) ((lambda (G3973@ls/false) (if (if G3973@ls/false (begin '#f (apply (lambda () (= G3957@lev '0)) G3973@ls/false)) '#f) (apply (lambda () (G317f@syntax-violation '#f '"incorrect use of unsyntax" G3956@p)) G3973@ls/false) ((lambda (G3975@t) ((lambda (G3977@ls/false) (if G3977@ls/false (apply (lambda (G3979@p* G397a@q) (call-with-values (lambda () (G393e@quasi G397a@q G3957@lev)) (lambda (G3980@G397d G3981@G397e G3982@G397f) ((lambda (G3986@q G3987@rhs* G3988@lhs*) (if (= G3957@lev '0) ((lambda (G398c@g*) (values (append G398c@g* G3988@lhs*) (append G3979@p* G3987@rhs*) (append G398c@g* G3986@q))) (map (lambda (G398e@x) (gensym)) G3979@p*)) (call-with-values (lambda () (G393e@quasi G3979@p* (- G3957@lev '1))) (lambda (G3993@G3990 G3994@G3991 G3995@G3992) ((lambda (G3999@p* G399a@rhs2* G399b@lhs2*) (values (append G399b@lhs2* G3988@lhs*) (append G399a@rhs2* G3987@rhs*) (cons (cons 'unsyntax G3999@p*) G3986@q))) G3995@G3992 G3994@G3991 G3993@G3990))))) G3982@G397f G3981@G397e G3980@G397d)))) G3977@ls/false) ((lambda (G399f@t) ((lambda (G39a1@ls/false) (if G39a1@ls/false (apply (lambda (G39a3@p* G39a4@q) (call-with-values (lambda () (G393e@quasi G39a4@q G3957@lev)) (lambda (G39aa@G39a7 G39ab@G39a8 G39ac@G39a9) ((lambda (G39b0@q G39b1@rhs* G39b2@lhs*) (if (= G3957@lev '0) ((lambda (G39b6@g*) (values (append (map (lambda (G39b8@g) (cons G39b8@g '(...))) G39b6@g*) G39b2@lhs*) (append G39a3@p* G39b1@rhs*) (append (apply append (map (lambda (G39ba@g) (cons G39ba@g '(...))) G39b6@g*)) G39b0@q))) (map (lambda (G39bc@x) (gensym)) G39a3@p*)) (call-with-values (lambda () (G393e@quasi G39a3@p* (- G3957@lev '1))) (lambda (G39c1@G39be G39c2@G39bf G39c3@G39c0) ((lambda (G39c7@p* G39c8@rhs2* G39c9@lhs2*) (values (append G39c9@lhs2* G39b2@lhs*) (append G39c8@rhs2* G39b1@rhs*) (cons (cons 'unsyntax-splicing G39c7@p*) G39b0@q))) G39c3@G39c0 G39c2@G39bf G39c1@G39be))))) G39ac@G39a9 G39ab@G39a8 G39aa@G39a7)))) G39a1@ls/false) ((lambda (G39cd@t) ((lambda (G39cf@ls/false) (if (if G39cf@ls/false (begin '#f (apply (lambda () (= G3957@lev '0)) G39cf@ls/false)) '#f) (apply (lambda () (G317f@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3956@p)) G39cf@ls/false) ((lambda (G39d1@t) ((lambda (G39d3@ls/false) (if G39d3@ls/false (apply (lambda (G39d5@p) (call-with-values (lambda () (G393e@quasi G39d5@p (+ G3957@lev '1))) (lambda (G39da@G39d7 G39db@G39d8 G39dc@G39d9) ((lambda (G39e0@p G39e1@rhs* G39e2@lhs*) (values G39e2@lhs* G39e1@rhs* (list 'quasisyntax G39e0@p))) G39dc@G39d9 G39db@G39d8 G39da@G39d7)))) G39d3@ls/false) ((lambda (G39e6@t) ((lambda (G39e8@ls/false) (if G39e8@ls/false (apply (lambda (G39ea@p G39eb@q) (call-with-values (lambda () (G393e@quasi G39ea@p G3957@lev)) (lambda (G39f4@G39ee G39f5@G39ef G39f6@G39f0) (call-with-values (lambda () (G393e@quasi G39eb@q G3957@lev)) (lambda (G39fa@G39f1 G39fb@G39f2 G39fc@G39f3) ((lambda (G3a00@q G3a01@rhs2* G3a02@lhs2* G3a03@p G3a04@rhs* G3a05@lhs*) (values (append G3a02@lhs2* G3a05@lhs*) (append G3a01@rhs2* G3a04@rhs*) (cons G3a03@p G3a00@q))) G39fc@G39f3 G39fb@G39f2 G39fa@G39f1 G39f6@G39f0 G39f5@G39ef G39f4@G39ee)))))) G39e8@ls/false) ((lambda (G3a0c@t) ((lambda (G3a0e@ls/false) (if G3a0e@ls/false (apply (lambda (G3a10@x*) (call-with-values (lambda () (G393e@quasi G3a10@x* G3957@lev)) (lambda (G3a15@G3a12 G3a16@G3a13 G3a17@G3a14) ((lambda (G3a1b@x* G3a1c@rhs* G3a1d@lhs*) (values G3a1d@lhs* G3a1c@rhs* (list->vector G3a1b@x*))) G3a17@G3a14 G3a16@G3a13 G3a15@G3a12)))) G3a0e@ls/false) ((lambda (G3a21@t) ((lambda (G3a23@ls/false) (if G3a23@ls/false (apply (lambda () (values '() '() G3956@p)) G3a23@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3a21@t))) (G308c@syntax-dispatch G3a21@t '_))) G3a0c@t))) (G308c@syntax-dispatch G3a0c@t '#(vector each-any)))) G39e6@t))) (G308c@syntax-dispatch G39e6@t '(any . any)))) G39d1@t))) (G308c@syntax-dispatch G39d1@t '(#(scheme-id quasisyntax) any)))) G39cd@t))) (G308c@syntax-dispatch G39cd@t '#(scheme-id unsyntax-splicing)))) G399f@t))) (G308c@syntax-dispatch G399f@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3975@t))) (G308c@syntax-dispatch G3975@t '((#(scheme-id unsyntax) . each-any) . any)))) G3971@t))) (G308c@syntax-dispatch G3971@t '#(scheme-id unsyntax)))) G395a@t))) (G308c@syntax-dispatch G395a@t '(#(scheme-id unsyntax) any)))) G3956@p))) (lambda (G393f@x) ((lambda (G3941@t) ((lambda (G3943@ls/false) (if G3943@ls/false (apply (lambda (G3945@e) (call-with-values (lambda () (G393e@quasi G3945@e '0)) (lambda (G394a@G3947 G394b@G3948 G394c@G3949) ((lambda (G3950@v G3951@rhs* G3952@lhs*) (G3042@bless (list 'syntax-case (cons 'list G3951@rhs*) '() (list G3952@lhs* (list 'syntax G3950@v))))) G394c@G3949 G394b@G3948 G394a@G3947)))) G3943@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3941@t))) (G308c@syntax-dispatch G3941@t '(_ any)))) G393f@x)))) '#f)))) (set! G307e@define-struct-macro (lambda (G3a25@stx) (G317f@syntax-violation '#f '"define-struct not supported" G3a25@stx))) (set! G3080@define-record-type-macro (lambda (G3a27@x) ((lambda (G3a2a@id G3a2c@get-record-name G3a2e@get-record-constructor-name G3a30@get-record-predicate-name G3a32@get-clause G3a34@foo-rtd-code G3a36@parent-rtd-code G3a38@parent-rcd-code G3a3a@foo-rcd-code G3a3c@get-protocol-code G3a3e@get-fields G3a40@get-mutator-indices G3a42@get-mutators G3a44@get-accessors G3a46@enumerate G3a48@do-define-record G3a4a@verify-clauses) (begin (set! G3a2a@id (lambda (G3c21@ctxt . G3c23@str*) (G3183@datum->syntax G3c21@ctxt (string->symbol (apply string-append (map (lambda (G3c25@x) (if (symbol? G3c25@x) (symbol->string G3c25@x) (if (string? G3c25@x) G3c25@x (assertion-violation 'define-record-type '"BUG")))) G3c23@str*)))))) (set! G3a2c@get-record-name (lambda (G3c0f@spec) ((lambda (G3c11@t) ((lambda (G3c13@ls/false) (if G3c13@ls/false (apply (lambda (G3c15@foo G3c16@make-foo G3c17@foo?) G3c15@foo) G3c13@ls/false) ((lambda (G3c1b@t) ((lambda (G3c1d@ls/false) (if G3c1d@ls/false (apply (lambda (G3c1f@foo) G3c1f@foo) G3c1d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3c1b@t))) (G308c@syntax-dispatch G3c1b@t 'any))) G3c11@t))) (G308c@syntax-dispatch G3c11@t '(any any any)))) G3c0f@spec))) (set! G3a2e@get-record-constructor-name (lambda (G3bfb@spec) ((lambda (G3bfd@t) ((lambda (G3bff@ls/false) (if G3bff@ls/false (apply (lambda (G3c01@foo G3c02@make-foo G3c03@foo?) G3c02@make-foo) G3bff@ls/false) ((lambda (G3c07@t) ((lambda (G3c09@ls/false) (if (if G3c09@ls/false (begin '#f (apply (lambda (G3c0b@foo) (G2e49@id? G3c0b@foo)) G3c09@ls/false)) '#f) (apply (lambda (G3c0d@foo) (G3a2a@id G3c0d@foo '"make-" (G2e5f@stx->datum G3c0d@foo))) G3c09@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3c07@t))) (G308c@syntax-dispatch G3c07@t 'any))) G3bfd@t))) (G308c@syntax-dispatch G3bfd@t '(any any any)))) G3bfb@spec))) (set! G3a30@get-record-predicate-name (lambda (G3be7@spec) ((lambda (G3be9@t) ((lambda (G3beb@ls/false) (if G3beb@ls/false (apply (lambda (G3bed@foo G3bee@make-foo G3bef@foo?) G3bef@foo?) G3beb@ls/false) ((lambda (G3bf3@t) ((lambda (G3bf5@ls/false) (if (if G3bf5@ls/false (begin '#f (apply (lambda (G3bf7@foo) (G2e49@id? G3bf7@foo)) G3bf5@ls/false)) '#f) (apply (lambda (G3bf9@foo) (G3a2a@id G3bf9@foo (G2e5f@stx->datum G3bf9@foo) '"?")) G3bf5@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3bf3@t))) (G308c@syntax-dispatch G3bf3@t 'any))) G3be9@t))) (G308c@syntax-dispatch G3be9@t '(any any any)))) G3be7@spec))) (set! G3a32@get-clause (lambda (G3bd5@id G3bd6@ls) ((lambda (G3bd9@t) ((lambda (G3bdb@ls/false) (if G3bdb@ls/false (apply (lambda () '#f) G3bdb@ls/false) ((lambda (G3bdd@t) ((lambda (G3bdf@ls/false) (if G3bdf@ls/false (apply (lambda (G3be1@x G3be2@rest G3be3@ls) (if (G2e51@free-id=? (G3042@bless G3bd5@id) G3be1@x) (cons G3be1@x G3be2@rest) (G3a32@get-clause G3bd5@id G3be3@ls))) G3bdf@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3bdd@t))) (G308c@syntax-dispatch G3bdd@t '((any . any) . any)))) G3bd9@t))) (G308c@syntax-dispatch G3bd9@t '()))) G3bd6@ls))) (set! G3a34@foo-rtd-code (lambda (G3b83@name G3b84@clause* G3b85@parent-rtd-code) ((lambda (G3b8a@convert-field-spec*) (begin (set! G3b8a@convert-field-spec* (lambda (G3bbb@ls) (list->vector (map (lambda (G3bbd@x) ((lambda (G3bbf@t) ((lambda (G3bc1@ls/false) (if G3bc1@ls/false (apply (lambda (G3bc3@name G3bc4@rest) (list 'mutable G3bc3@name)) G3bc1@ls/false) ((lambda (G3bc7@t) ((lambda (G3bc9@ls/false) (if G3bc9@ls/false (apply (lambda (G3bcb@name G3bcc@rest) (list 'immutable G3bcb@name)) G3bc9@ls/false) ((lambda (G3bcf@t) ((lambda (G3bd1@ls/false) (if G3bd1@ls/false (apply (lambda (G3bd3@name) (list 'immutable G3bd3@name)) G3bd1@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3bcf@t))) (G308c@syntax-dispatch G3bcf@t 'any))) G3bc7@t))) (G308c@syntax-dispatch G3bc7@t '(#(scheme-id immutable) any . any)))) G3bbf@t))) (G308c@syntax-dispatch G3bbf@t '(#(scheme-id mutable) any . any)))) G3bbd@x)) G3bbb@ls)))) ((lambda (G3b8b@uid-code G3b8c@sealed? G3b8d@opaque? G3b8e@fields) (G3042@bless (list 'make-record-type-descriptor (list 'quote G3b83@name) G3b85@parent-rtd-code G3b8b@uid-code G3b8c@sealed? G3b8d@opaque? G3b8e@fields))) ((lambda (G3b93@t) ((lambda (G3b95@ls/false) (if G3b95@ls/false (apply (lambda () (list 'quote (gensym))) G3b95@ls/false) ((lambda (G3b97@t) ((lambda (G3b99@ls/false) (if G3b99@ls/false (apply (lambda (G3b9b@uid) (list 'quote G3b9b@uid)) G3b99@ls/false) ((lambda (G3b9d@t) ((lambda (G3b9f@ls/false) (if G3b9f@ls/false (apply (lambda () '#f) G3b9f@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3b9d@t))) (G308c@syntax-dispatch G3b9d@t '_))) G3b97@t))) (G308c@syntax-dispatch G3b97@t '(_ any)))) G3b93@t))) (G308c@syntax-dispatch G3b93@t '(_)))) (G3a32@get-clause 'nongenerative G3b84@clause*)) ((lambda (G3ba1@t) ((lambda (G3ba3@ls/false) (if G3ba3@ls/false (apply (lambda () '#t) G3ba3@ls/false) ((lambda (G3ba5@t) ((lambda (G3ba7@ls/false) (if G3ba7@ls/false (apply (lambda () '#f) G3ba7@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3ba5@t))) (G308c@syntax-dispatch G3ba5@t '_))) G3ba1@t))) (G308c@syntax-dispatch G3ba1@t '(_ #(atom #t))))) (G3a32@get-clause 'sealed G3b84@clause*)) ((lambda (G3ba9@t) ((lambda (G3bab@ls/false) (if G3bab@ls/false (apply (lambda () '#t) G3bab@ls/false) ((lambda (G3bad@t) ((lambda (G3baf@ls/false) (if G3baf@ls/false (apply (lambda () '#f) G3baf@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3bad@t))) (G308c@syntax-dispatch G3bad@t '_))) G3ba9@t))) (G308c@syntax-dispatch G3ba9@t '(_ #(atom #t))))) (G3a32@get-clause 'opaque G3b84@clause*)) ((lambda (G3bb1@t) ((lambda (G3bb3@ls/false) (if G3bb3@ls/false (apply (lambda (G3bb5@field-spec*) (list 'quote (G3b8a@convert-field-spec* G3bb5@field-spec*))) G3bb3@ls/false) ((lambda (G3bb7@t) ((lambda (G3bb9@ls/false) (if G3bb9@ls/false (apply (lambda () ''#()) G3bb9@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3bb7@t))) (G308c@syntax-dispatch G3bb7@t '_))) G3bb1@t))) (G308c@syntax-dispatch G3bb1@t '(_ . each-any)))) (G3a32@get-clause 'fields G3b84@clause*))))) '#f))) (set! G3a36@parent-rtd-code (lambda (G3b6b@clause*) ((lambda (G3b6d@t) ((lambda (G3b6f@ls/false) (if G3b6f@ls/false (apply (lambda (G3b71@name) (list 'record-type-descriptor G3b71@name)) G3b6f@ls/false) ((lambda (G3b73@t) ((lambda (G3b75@ls/false) (if G3b75@ls/false (apply (lambda () ((lambda (G3b77@t) ((lambda (G3b79@ls/false) (if G3b79@ls/false (apply (lambda (G3b7b@rtd G3b7c@rcd) G3b7b@rtd) G3b79@ls/false) ((lambda (G3b7f@t) ((lambda (G3b81@ls/false) (if G3b81@ls/false (apply (lambda () '#f) G3b81@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3b7f@t))) (G308c@syntax-dispatch G3b7f@t '#(atom #f)))) G3b77@t))) (G308c@syntax-dispatch G3b77@t '(_ any any)))) (G3a32@get-clause 'parent-rtd G3b6b@clause*))) G3b75@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3b73@t))) (G308c@syntax-dispatch G3b73@t '#(atom #f)))) G3b6d@t))) (G308c@syntax-dispatch G3b6d@t '(_ any)))) (G3a32@get-clause 'parent G3b6b@clause*)))) (set! G3a38@parent-rcd-code (lambda (G3b53@clause*) ((lambda (G3b55@t) ((lambda (G3b57@ls/false) (if G3b57@ls/false (apply (lambda (G3b59@name) (list 'record-constructor-descriptor G3b59@name)) G3b57@ls/false) ((lambda (G3b5b@t) ((lambda (G3b5d@ls/false) (if G3b5d@ls/false (apply (lambda () ((lambda (G3b5f@t) ((lambda (G3b61@ls/false) (if G3b61@ls/false (apply (lambda (G3b63@rtd G3b64@rcd) G3b64@rcd) G3b61@ls/false) ((lambda (G3b67@t) ((lambda (G3b69@ls/false) (if G3b69@ls/false (apply (lambda () '#f) G3b69@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3b67@t))) (G308c@syntax-dispatch G3b67@t '#(atom #f)))) G3b5f@t))) (G308c@syntax-dispatch G3b5f@t '(_ any any)))) (G3a32@get-clause 'parent-rtd G3b53@clause*))) G3b5d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3b5b@t))) (G308c@syntax-dispatch G3b5b@t '#(atom #f)))) G3b55@t))) (G308c@syntax-dispatch G3b55@t '(_ any)))) (G3a32@get-clause 'parent G3b53@clause*)))) (set! G3a3a@foo-rcd-code (lambda (G3b4b@clause* G3b4c@foo-rtd G3b4d@protocol G3b4e@parent-rcd-code) (list 'make-record-constructor-descriptor G3b4c@foo-rtd G3b4e@parent-rcd-code G3b4d@protocol))) (set! G3a3c@get-protocol-code (lambda (G3b3f@clause*) ((lambda (G3b41@t) ((lambda (G3b43@ls/false) (if G3b43@ls/false (apply (lambda (G3b45@expr) G3b45@expr) G3b43@ls/false) ((lambda (G3b47@t) ((lambda (G3b49@ls/false) (if G3b49@ls/false (apply (lambda () '#f) G3b49@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3b47@t))) (G308c@syntax-dispatch G3b47@t '_))) G3b41@t))) (G308c@syntax-dispatch G3b41@t '(_ any)))) (G3a32@get-clause 'protocol G3b3f@clause*)))) (set! G3a3e@get-fields (lambda (G3b2d@clause*) ((lambda (G3b2f@t) ((lambda (G3b31@ls/false) (if G3b31@ls/false (apply (lambda () '()) G3b31@ls/false) ((lambda (G3b33@t) ((lambda (G3b35@ls/false) (if G3b35@ls/false (apply (lambda (G3b37@f*) G3b37@f*) G3b35@ls/false) ((lambda (G3b39@t) ((lambda (G3b3b@ls/false) (if G3b3b@ls/false (apply (lambda (G3b3d@rest) (G3a3e@get-fields G3b3d@rest)) G3b3b@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3b39@t))) (G308c@syntax-dispatch G3b39@t '(_ . any)))) G3b33@t))) (G308c@syntax-dispatch G3b33@t '((#(scheme-id fields) . each-any) . _)))) G3b2f@t))) (G308c@syntax-dispatch G3b2f@t '()))) G3b2d@clause*))) (set! G3a40@get-mutator-indices (lambda (G3b15@fields) ((letrec ((G3b17@f (lambda (G3b19@fields G3b1a@i) ((lambda (G3b1d@t) ((lambda (G3b1f@ls/false) (if G3b1f@ls/false (apply (lambda () '()) G3b1f@ls/false) ((lambda (G3b21@t) ((lambda (G3b23@ls/false) (if G3b23@ls/false (apply (lambda (G3b25@rest) (cons G3b1a@i (G3b17@f G3b25@rest (+ G3b1a@i '1)))) G3b23@ls/false) ((lambda (G3b27@t) ((lambda (G3b29@ls/false) (if G3b29@ls/false (apply (lambda (G3b2b@rest) (G3b17@f G3b2b@rest (+ G3b1a@i '1))) G3b29@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3b27@t))) (G308c@syntax-dispatch G3b27@t '(_ . any)))) G3b21@t))) (G308c@syntax-dispatch G3b21@t '((#(scheme-id mutable) . _) . any)))) G3b1d@t))) (G308c@syntax-dispatch G3b1d@t '()))) G3b19@fields)))) G3b17@f) G3b15@fields '0))) (set! G3a42@get-mutators (lambda (G3aeb@foo G3aec@fields) ((lambda (G3af0@gen-name) (begin (set! G3af0@gen-name (lambda (G3b13@x) (G3183@datum->syntax G3aeb@foo (string->symbol (string-append (symbol->string (G3185@syntax->datum G3aeb@foo)) '"-" (symbol->string (G3185@syntax->datum G3b13@x)) '"-set!"))))) ((letrec ((G3af1@f (lambda (G3af3@fields) ((lambda (G3af5@t) ((lambda (G3af7@ls/false) (if G3af7@ls/false (apply (lambda () '()) G3af7@ls/false) ((lambda (G3af9@t) ((lambda (G3afb@ls/false) (if G3afb@ls/false (apply (lambda (G3afd@name G3afe@accessor G3aff@mutator G3b00@rest) (cons G3aff@mutator (G3af1@f G3b00@rest))) G3afb@ls/false) ((lambda (G3b05@t) ((lambda (G3b07@ls/false) (if G3b07@ls/false (apply (lambda (G3b09@name G3b0a@rest) (cons (G3af0@gen-name G3b09@name) (G3af1@f G3b0a@rest))) G3b07@ls/false) ((lambda (G3b0d@t) ((lambda (G3b0f@ls/false) (if G3b0f@ls/false (apply (lambda (G3b11@rest) (G3af1@f G3b11@rest)) G3b0f@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3b0d@t))) (G308c@syntax-dispatch G3b0d@t '(_ . any)))) G3b05@t))) (G308c@syntax-dispatch G3b05@t '((#(scheme-id mutable) any) . any)))) G3af9@t))) (G308c@syntax-dispatch G3af9@t '((#(scheme-id mutable) any any any) . any)))) G3af5@t))) (G308c@syntax-dispatch G3af5@t '()))) G3af3@fields)))) G3af1@f) G3aec@fields))) '#f))) (set! G3a44@get-accessors (lambda (G3aa7@foo G3aa8@fields) ((lambda (G3aac@gen-name) (begin (set! G3aac@gen-name (lambda (G3ae9@x) (G3183@datum->syntax G3aa7@foo (string->symbol (string-append (symbol->string (G3185@syntax->datum G3aa7@foo)) '"-" (symbol->string (G3185@syntax->datum G3ae9@x))))))) (map (lambda (G3aad@field) ((lambda (G3aaf@t) ((lambda (G3ab1@ls/false) (if (if G3ab1@ls/false (begin '#f (apply (lambda (G3ab3@name G3ab4@accessor G3ab5@mutator) (G2e49@id? G3ab4@accessor)) G3ab1@ls/false)) '#f) (apply (lambda (G3ab9@name G3aba@accessor G3abb@mutator) G3aba@accessor) G3ab1@ls/false) ((lambda (G3abf@t) ((lambda (G3ac1@ls/false) (if (if G3ac1@ls/false (begin '#f (apply (lambda (G3ac3@name G3ac4@accessor) (G2e49@id? G3ac4@accessor)) G3ac1@ls/false)) '#f) (apply (lambda (G3ac7@name G3ac8@accessor) G3ac8@accessor) G3ac1@ls/false) ((lambda (G3acb@t) ((lambda (G3acd@ls/false) (if (if G3acd@ls/false (begin '#f (apply (lambda (G3acf@name) (G2e49@id? G3acf@name)) G3acd@ls/false)) '#f) (apply (lambda (G3ad1@name) (G3aac@gen-name G3ad1@name)) G3acd@ls/false) ((lambda (G3ad3@t) ((lambda (G3ad5@ls/false) (if (if G3ad5@ls/false (begin '#f (apply (lambda (G3ad7@name) (G2e49@id? G3ad7@name)) G3ad5@ls/false)) '#f) (apply (lambda (G3ad9@name) (G3aac@gen-name G3ad9@name)) G3ad5@ls/false) ((lambda (G3adb@t) ((lambda (G3add@ls/false) (if (if G3add@ls/false (begin '#f (apply (lambda (G3adf@name) (G2e49@id? G3adf@name)) G3add@ls/false)) '#f) (apply (lambda (G3ae1@name) (G3aac@gen-name G3ae1@name)) G3add@ls/false) ((lambda (G3ae3@t) ((lambda (G3ae5@ls/false) (if G3ae5@ls/false (apply (lambda (G3ae7@others) (G317f@syntax-violation '#f '"invalid field spec" G3aad@field)) G3ae5@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3ae3@t))) (G308c@syntax-dispatch G3ae3@t 'any))) G3adb@t))) (G308c@syntax-dispatch G3adb@t 'any))) G3ad3@t))) (G308c@syntax-dispatch G3ad3@t '(#(scheme-id immutable) any)))) G3acb@t))) (G308c@syntax-dispatch G3acb@t '(#(scheme-id mutable) any)))) G3abf@t))) (G308c@syntax-dispatch G3abf@t '(#(scheme-id immutable) any any)))) G3aaf@t))) (G308c@syntax-dispatch G3aaf@t '(#(scheme-id mutable) any any any)))) G3aad@field)) G3aa8@fields))) '#f))) (set! G3a46@enumerate (lambda (G3a9f@ls) ((letrec ((G3aa1@f (lambda (G3aa3@ls G3aa4@i) (if (null? G3aa3@ls) '() (cons G3aa4@i (G3aa1@f (cdr G3aa3@ls) (+ G3aa4@i '1))))))) G3aa1@f) G3a9f@ls '0))) (set! G3a48@do-define-record (lambda (G3a77@namespec G3a78@clause*) ((lambda (G3a7b@foo) ((lambda (G3a7d@foo-rtd) ((lambda (G3a7f@foo-rcd) ((lambda (G3a81@protocol) ((lambda (G3a83@make-foo) ((lambda (G3a85@fields) ((lambda (G3a87@idx*) ((lambda (G3a89@foo-x*) ((lambda (G3a8b@set-foo-x!*) ((lambda (G3a8d@set-foo-idx*) ((lambda (G3a8f@foo?) ((lambda (G3a91@foo-rtd-code) ((lambda (G3a93@foo-rcd-code) ((lambda (G3a95@protocol-code) ((lambda () (G3042@bless (cons 'begin (cons (list 'define G3a7d@foo-rtd G3a91@foo-rtd-code) (cons (list 'define G3a81@protocol G3a95@protocol-code) (cons (list 'define G3a7f@foo-rcd G3a93@foo-rcd-code) (cons (list 'define-syntax G3a7b@foo (list 'list ''$rtd (list 'syntax G3a7d@foo-rtd) (list 'syntax G3a7f@foo-rcd))) (cons (list 'define G3a8f@foo? (list 'record-predicate G3a7d@foo-rtd)) (cons (list 'define G3a83@make-foo (list 'record-constructor G3a7f@foo-rcd)) (append (map (lambda (G3a97@foo-x G3a98@idx) (list 'define G3a97@foo-x (list 'record-accessor G3a7d@foo-rtd G3a98@idx))) G3a89@foo-x* G3a87@idx*) (map (lambda (G3a9b@set-foo-x! G3a9c@idx) (list 'define G3a9b@set-foo-x! (list 'record-mutator G3a7d@foo-rtd G3a9c@idx))) G3a8b@set-foo-x!* G3a8d@set-foo-idx*))))))))))))) (G3a3c@get-protocol-code G3a78@clause*))) (G3a3a@foo-rcd-code G3a78@clause* G3a7d@foo-rtd G3a81@protocol (G3a38@parent-rcd-code G3a78@clause*)))) (G3a34@foo-rtd-code G3a7b@foo G3a78@clause* (G3a36@parent-rtd-code G3a78@clause*)))) (G3a30@get-record-predicate-name G3a77@namespec))) (G3a40@get-mutator-indices G3a85@fields))) (G3a42@get-mutators G3a7b@foo G3a85@fields))) (G3a44@get-accessors G3a7b@foo G3a85@fields))) (G3a46@enumerate G3a85@fields))) (G3a3e@get-fields G3a78@clause*))) (G3a2e@get-record-constructor-name G3a77@namespec))) (gensym))) (gensym))) (gensym))) (G3a2c@get-record-name G3a77@namespec)))) (set! G3a4a@verify-clauses (lambda (G3a53@x G3a54@cls*) ((lambda (G3a58@valid-kwds G3a5a@free-id-member?) (begin (set! G3a58@valid-kwds (map G3042@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a5a@free-id-member? (lambda (G3a71@x G3a72@ls) (if (pair? G3a72@ls) (begin '#f ((lambda (G3a75@t) (if G3a75@t G3a75@t (begin '#f (G3a5a@free-id-member? G3a71@x (cdr G3a72@ls))))) (G2e51@free-id=? G3a71@x (car G3a72@ls)))) '#f))) ((letrec ((G3a5b@f (lambda (G3a5d@cls* G3a5e@seen*) (if (not (null? G3a5d@cls*)) ((lambda (G3a61@t) ((lambda (G3a63@ls/false) (if G3a63@ls/false (apply (lambda (G3a65@kwd G3a66@rest) (if ((lambda (G3a69@t) (if G3a69@t G3a69@t (begin '#f (not (G3a5a@free-id-member? G3a65@kwd G3a58@valid-kwds))))) (not (G2e49@id? G3a65@kwd))) (G317f@syntax-violation '#f '"not a valid define-record-type keyword" G3a65@kwd) (if (G2e57@bound-id-member? G3a65@kwd G3a5e@seen*) (G317f@syntax-violation '#f '"duplicate use of keyword " G3a53@x G3a65@kwd) (G3a5b@f (cdr G3a5d@cls*) (cons G3a65@kwd G3a5e@seen*))))) G3a63@ls/false) ((lambda (G3a6b@t) ((lambda (G3a6d@ls/false) (if G3a6d@ls/false (apply (lambda (G3a6f@cls) (G317f@syntax-violation '#f '"malformed define-record-type clause" G3a6f@cls)) G3a6d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3a6b@t))) (G308c@syntax-dispatch G3a6b@t 'any))) G3a61@t))) (G308c@syntax-dispatch G3a61@t '(any . any)))) (car G3a5d@cls*)) (void))))) G3a5b@f) G3a54@cls* '()))) '#f '#f))) ((lambda (G3a4b@t) ((lambda (G3a4d@ls/false) (if G3a4d@ls/false (apply (lambda (G3a4f@namespec G3a50@clause*) (begin (G3a4a@verify-clauses G3a27@x G3a50@clause*) (G3a48@do-define-record G3a4f@namespec G3a50@clause*))) G3a4d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3a4b@t))) (G308c@syntax-dispatch G3a4b@t '(_ any . each-any)))) G3a27@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3082@define-condition-type-macro (lambda (G3c27@x) ((lambda (G3c2a@mkname) (begin (set! G3c2a@mkname (lambda (G3c57@name G3c58@suffix) (G3183@datum->syntax G3c57@name (string->symbol (string-append (symbol->string (G3185@syntax->datum G3c57@name)) G3c58@suffix))))) ((lambda (G3c2b@t) ((lambda (G3c2d@ls/false) (if (if G3c2d@ls/false (begin '#f (apply (lambda (G3c2f@ctxt G3c30@name G3c31@super G3c32@constructor G3c33@predicate G3c34@field* G3c35@accessor*) (if (G2e49@id? G3c30@name) (if (G2e49@id? G3c31@super) (if (G2e49@id? G3c32@constructor) (if (G2e49@id? G3c33@predicate) (if (for-all G2e49@id? G3c34@field*) (begin '#f (for-all G2e49@id? G3c35@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c2d@ls/false)) '#f) (apply (lambda (G3c3d@ctxt G3c3e@name G3c3f@super G3c40@constructor G3c41@predicate G3c42@field* G3c43@accessor*) ((lambda (G3c4b@aux-accessor*) (G3042@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c3e@name G3c40@constructor (gensym)) (cons (list 'parent G3c3f@super) (cons (cons 'fields (map (lambda (G3c4d@field G3c4e@aux) (list 'immutable G3c4d@field G3c4e@aux)) G3c42@field* G3c4b@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c41@predicate (list 'condition-predicate (list 'record-type-descriptor G3c3e@name))) (map (lambda (G3c51@accessor G3c52@aux) (list 'define G3c51@accessor (list 'condition-accessor (list 'record-type-descriptor G3c3e@name) G3c52@aux))) G3c43@accessor* G3c4b@aux-accessor*)))))) (map (lambda (G3c55@x) (gensym)) G3c43@accessor*))) G3c2d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3c2b@t))) (G308c@syntax-dispatch G3c2b@t '(any any any any any . #(each (any any)))))) G3c27@x))) '#f))) (set! G3084@incorrect-usage-macro (lambda (G3c5b@e) (G317f@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c5b@e))) (set! G3086@parameterize-macro (lambda (G3c5d@e) ((lambda (G3c5f@t) ((lambda (G3c61@ls/false) (if G3c61@ls/false (apply (lambda (G3c63@b G3c64@b*) (G3042@bless (cons 'let (cons '() (cons G3c63@b G3c64@b*))))) G3c61@ls/false) ((lambda (G3c67@t) ((lambda (G3c69@ls/false) (if G3c69@ls/false (apply (lambda (G3c6b@olhs* G3c6c@orhs* G3c6d@b G3c6e@b*) ((lambda (G3c73@lhs* G3c74@rhs*) (G3042@bless (cons (list 'lambda (append G3c73@lhs* G3c74@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c77@lhs G3c78@rhs) (list 'let (list (list 't (list G3c77@lhs))) (list G3c77@lhs G3c78@rhs) (cons 'set! (cons G3c78@rhs '(t))))) G3c73@lhs* G3c74@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c6d@b G3c6e@b*))) '(swap)))))) (append G3c6b@olhs* G3c6c@orhs*)))) (G316b@generate-temporaries G3c6b@olhs*) (G316b@generate-temporaries G3c6c@orhs*))) G3c69@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3c67@t))) (G308c@syntax-dispatch G3c67@t '(_ #(each (any any)) any . each-any)))) G3c5f@t))) (G308c@syntax-dispatch G3c5f@t '(_ () any . each-any)))) G3c5d@e))) (set! G3088@foreign-call-transformer (lambda (G3c7b@e G3c7c@r G3c7d@mr) ((lambda (G3c81@t) ((lambda (G3c83@ls/false) (if G3c83@ls/false (apply (lambda (G3c85@name G3c86@arg*) (cons 'foreign-call (cons (G30b0@chi-expr G3c85@name G3c7c@r G3c7d@mr) (G30ac@chi-expr* G3c86@arg* G3c7c@r G3c7d@mr)))) G3c83@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3c81@t))) (G308c@syntax-dispatch G3c81@t '(_ any . each-any)))) G3c7b@e))) (set! G308a@convert-pattern (lambda (G3c89@pattern G3c8a@keys) ((lambda (G3c8e@cvt* G3c90@cvt) (begin (set! G3c8e@cvt* (lambda (G3d1f@p* G3d20@n G3d21@ids) (if (null? G3d1f@p*) (values '() G3d21@ids) (call-with-values (lambda () (G3c8e@cvt* (cdr G3d1f@p*) G3d20@n G3d21@ids)) (lambda (G3d27@G3d25 G3d28@G3d26) ((lambda (G3d2b@ids G3d2c@y) (call-with-values (lambda () (G3c90@cvt (car G3d1f@p*) G3d20@n G3d2b@ids)) (lambda (G3d31@G3d2f G3d32@G3d30) ((lambda (G3d35@ids G3d36@x) (values (cons G3d36@x G3d2c@y) G3d35@ids)) G3d32@G3d30 G3d31@G3d2f)))) G3d28@G3d26 G3d27@G3d25)))))) (set! G3c90@cvt (lambda (G3c91@p G3c92@n G3c93@ids) ((lambda (G3c97@t) ((lambda (G3c99@ls/false) (if (if G3c99@ls/false (begin '#f (apply (lambda (G3c9b@id) (G2e49@id? G3c9b@id)) G3c99@ls/false)) '#f) (apply (lambda (G3c9d@id) (if (G2e57@bound-id-member? G3c91@p G3c8a@keys) (values (vector 'free-id G3c91@p) G3c93@ids) (if (G2e51@free-id=? G3c91@p (G301a@scheme-stx '_)) (values '_ G3c93@ids) (values 'any (cons (cons G3c91@p G3c92@n) G3c93@ids))))) G3c99@ls/false) ((lambda (G3c9f@t) ((lambda (G3ca1@ls/false) (if (if G3ca1@ls/false (begin '#f (apply (lambda (G3ca3@p G3ca4@dots) (G308e@ellipsis? G3ca4@dots)) G3ca1@ls/false)) '#f) (apply (lambda (G3ca7@p G3ca8@dots) (call-with-values (lambda () (G3c90@cvt G3ca7@p (+ G3c92@n '1) G3c93@ids)) (lambda (G3cad@G3cab G3cae@G3cac) ((lambda (G3cb1@ids G3cb2@p) (values (if (eq? G3cb2@p 'any) 'each-any (vector 'each G3cb2@p)) G3cb1@ids)) G3cae@G3cac G3cad@G3cab)))) G3ca1@ls/false) ((lambda (G3cb5@t) ((lambda (G3cb7@ls/false) (if (if G3cb7@ls/false (begin '#f (apply (lambda (G3cb9@x G3cba@dots G3cbb@ys G3cbc@z) (G308e@ellipsis? G3cba@dots)) G3cb7@ls/false)) '#f) (apply (lambda (G3cc1@x G3cc2@dots G3cc3@ys G3cc4@z) (call-with-values (lambda () (G3c90@cvt G3cc4@z G3c92@n G3c93@ids)) (lambda (G3ccb@G3cc9 G3ccc@G3cca) ((lambda (G3ccf@ids G3cd0@z) (call-with-values (lambda () (G3c8e@cvt* G3cc3@ys G3c92@n G3ccf@ids)) (lambda (G3cd5@G3cd3 G3cd6@G3cd4) ((lambda (G3cd9@ids G3cda@ys) (call-with-values (lambda () (G3c90@cvt G3cc1@x (+ G3c92@n '1) G3cd9@ids)) (lambda (G3cdf@G3cdd G3ce0@G3cde) ((lambda (G3ce3@ids G3ce4@x) (values (vector 'each+ G3ce4@x (reverse G3cda@ys) G3cd0@z) G3ce3@ids)) G3ce0@G3cde G3cdf@G3cdd)))) G3cd6@G3cd4 G3cd5@G3cd3)))) G3ccc@G3cca G3ccb@G3cc9)))) G3cb7@ls/false) ((lambda (G3ce7@t) ((lambda (G3ce9@ls/false) (if G3ce9@ls/false (apply (lambda (G3ceb@x G3cec@y) (call-with-values (lambda () (G3c90@cvt G3cec@y G3c92@n G3c93@ids)) (lambda (G3cf1@G3cef G3cf2@G3cf0) ((lambda (G3cf5@ids G3cf6@y) (call-with-values (lambda () (G3c90@cvt G3ceb@x G3c92@n G3cf5@ids)) (lambda (G3cfb@G3cf9 G3cfc@G3cfa) ((lambda (G3cff@ids G3d00@x) (values (cons G3d00@x G3cf6@y) G3cff@ids)) G3cfc@G3cfa G3cfb@G3cf9)))) G3cf2@G3cf0 G3cf1@G3cef)))) G3ce9@ls/false) ((lambda (G3d03@t) ((lambda (G3d05@ls/false) (if G3d05@ls/false (apply (lambda () (values '() G3c93@ids)) G3d05@ls/false) ((lambda (G3d07@t) ((lambda (G3d09@ls/false) (if (if G3d09@ls/false (begin '#f (apply (lambda (G3d0b@p) (not (G2e11@stx? G3d0b@p))) G3d09@ls/false)) '#f) (apply (lambda (G3d0d@p) (call-with-values (lambda () (G3c90@cvt G3d0d@p G3c92@n G3c93@ids)) (lambda (G3d11@G3d0f G3d12@G3d10) ((lambda (G3d15@ids G3d16@p) (values (vector 'vector G3d16@p) G3d15@ids)) G3d12@G3d10 G3d11@G3d0f)))) G3d09@ls/false) ((lambda (G3d19@t) ((lambda (G3d1b@ls/false) (if G3d1b@ls/false (apply (lambda (G3d1d@datum) (values (vector 'atom (G2e5f@stx->datum G3d1d@datum)) G3c93@ids)) G3d1b@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3d19@t))) (G308c@syntax-dispatch G3d19@t 'any))) G3d07@t))) (G308c@syntax-dispatch G3d07@t '#(vector each-any)))) G3d03@t))) (G308c@syntax-dispatch G3d03@t '()))) G3ce7@t))) (G308c@syntax-dispatch G3ce7@t '(any . any)))) G3cb5@t))) (G308c@syntax-dispatch G3cb5@t '(any any . #(each+ any () any))))) G3c9f@t))) (G308c@syntax-dispatch G3c9f@t '(any any)))) G3c97@t))) (G308c@syntax-dispatch G3c97@t 'any))) G3c91@p))) (G3c90@cvt G3c89@pattern '0 '()))) '#f '#f))) (set! G308c@syntax-dispatch ((lambda () ((lambda (G3d3a@stx^ G3d3c@match-each G3d3e@match-each+ G3d40@match-each-any G3d42@match-empty G3d44@combine G3d46@match* G3d48@match) (begin (set! G3d3a@stx^ (lambda (G3e03@e G3e04@m* G3e05@s* G3e06@ae*) (if (if (null? G3e04@m*) (if (null? G3e05@s*) (begin '#f (null? G3e06@ae*)) '#f) '#f) G3e03@e (G2e31@mkstx G3e03@e G3e04@m* G3e05@s* G3e06@ae*)))) (set! G3d3c@match-each (lambda (G3de6@e G3de7@p G3de8@m* G3de9@s* G3dea@ae*) (if (pair? G3de6@e) ((lambda (G3df0@first) (if G3df0@first (begin '#f ((lambda (G3df2@rest) (if G3df2@rest (begin '#f (cons G3df0@first G3df2@rest)) '#f)) (G3d3c@match-each (cdr G3de6@e) G3de7@p G3de8@m* G3de9@s* G3dea@ae*))) '#f)) (G3d48@match (car G3de6@e) G3de7@p G3de8@m* G3de9@s* G3dea@ae* '())) (if (null? G3de6@e) '() (if (G2e11@stx? G3de6@e) (if (not (G2dbf@top-marked? G3de8@m*)) (begin '#f (call-with-values (lambda () (G2e2f@join-wraps G3de8@m* G3de9@s* G3dea@ae* G3de6@e)) (lambda (G3df7@G3df4 G3df8@G3df5 G3df9@G3df6) ((lambda (G3dfd@ae* G3dfe@s* G3dff@m*) (G3d3c@match-each (G2e15@stx-expr G3de6@e) G3de7@p G3dff@m* G3dfe@s* G3dfd@ae*)) G3df9@G3df6 G3df8@G3df5 G3df7@G3df4)))) '#f) (if (G2990@G2890@annotation? G3de6@e) (G3d3c@match-each (G2992@G2894@annotation-expression G3de6@e) G3de7@p G3de8@m* G3de9@s* G3dea@ae*) '#f)))))) (set! G3d3e@match-each+ (lambda (G3dac@e G3dad@x-pat G3dae@y-pat G3daf@z-pat G3db0@m* G3db1@s* G3db2@ae* G3db3@r) ((letrec ((G3dbc@f (lambda (G3dbe@e G3dbf@m* G3dc0@s* G3dc1@ae*) (if (pair? G3dbe@e) (call-with-values (lambda () (G3dbc@f (cdr G3dbe@e) G3dbf@m* G3dc0@s* G3dc1@ae*)) (lambda (G3dc9@G3dc6 G3dca@G3dc7 G3dcb@G3dc8) ((lambda (G3dcf@r G3dd0@y-pat G3dd1@xr*) (if G3dcf@r (if (null? G3dd0@y-pat) ((lambda (G3dd5@xr) (if G3dd5@xr (values (cons G3dd5@xr G3dd1@xr*) G3dd0@y-pat G3dcf@r) (values '#f '#f '#f))) (G3d48@match (car G3dbe@e) G3dad@x-pat G3dbf@m* G3dc0@s* G3dc1@ae* '())) (values '() (cdr G3dd0@y-pat) (G3d48@match (car G3dbe@e) (car G3dd0@y-pat) G3dbf@m* G3dc0@s* G3dc1@ae* G3dcf@r))) (values '#f '#f '#f))) G3dcb@G3dc8 G3dca@G3dc7 G3dc9@G3dc6))) (if (G2e11@stx? G3dbe@e) (if (G2dbf@top-marked? G3dbf@m*) (values '() G3dae@y-pat (G3d48@match G3dbe@e G3daf@z-pat G3dbf@m* G3dc0@s* G3dc1@ae* G3db3@r)) (call-with-values (lambda () (G2e2f@join-wraps G3dbf@m* G3dc0@s* G3dc1@ae* G3dbe@e)) (lambda (G3dda@G3dd7 G3ddb@G3dd8 G3ddc@G3dd9) ((lambda (G3de0@ae* G3de1@s* G3de2@m*) (G3dbc@f (G2e15@stx-expr G3dbe@e) G3de2@m* G3de1@s* G3de0@ae*)) G3ddc@G3dd9 G3ddb@G3dd8 G3dda@G3dd7)))) (if (G2990@G2890@annotation? G3dbe@e) (G3dbc@f (G2992@G2894@annotation-expression G3dbe@e) G3dbf@m* G3dc0@s* G3dc1@ae*) (values '() G3dae@y-pat (G3d48@match G3dbe@e G3daf@z-pat G3dbf@m* G3dc0@s* G3dc1@ae* G3db3@r)))))))) G3dbc@f) G3dac@e G3db0@m* G3db1@s* G3db2@ae*))) (set! G3d40@match-each-any (lambda (G3d93@e G3d94@m* G3d95@s* G3d96@ae*) (if (pair? G3d93@e) ((lambda (G3d9b@l) (if G3d9b@l (begin '#f (cons (G3d3a@stx^ (car G3d93@e) G3d94@m* G3d95@s* G3d96@ae*) G3d9b@l)) '#f)) (G3d40@match-each-any (cdr G3d93@e) G3d94@m* G3d95@s* G3d96@ae*)) (if (null? G3d93@e) '() (if (G2e11@stx? G3d93@e) (if (not (G2dbf@top-marked? G3d94@m*)) (begin '#f (call-with-values (lambda () (G2e2f@join-wraps G3d94@m* G3d95@s* G3d96@ae* G3d93@e)) (lambda (G3da0@G3d9d G3da1@G3d9e G3da2@G3d9f) ((lambda (G3da6@ae* G3da7@s* G3da8@m*) (G3d40@match-each-any (G2e15@stx-expr G3d93@e) G3da8@m* G3da7@s* G3da6@ae*)) G3da2@G3d9f G3da1@G3d9e G3da0@G3d9d)))) '#f) (if (G2990@G2890@annotation? G3d93@e) (G3d40@match-each-any (G2992@G2894@annotation-expression G3d93@e) G3d94@m* G3d95@s* G3d96@ae*) '#f)))))) (set! G3d42@match-empty (lambda (G3d8d@p G3d8e@r) (if (null? G3d8d@p) G3d8e@r (if (eq? G3d8d@p '_) G3d8e@r (if (eq? G3d8d@p 'any) (cons '() G3d8e@r) (if (pair? G3d8d@p) (G3d42@match-empty (car G3d8d@p) (G3d42@match-empty (cdr G3d8d@p) G3d8e@r)) (if (eq? G3d8d@p 'each-any) (cons '() G3d8e@r) ((lambda (G3d91@t) (if (memv G3d91@t '(each)) (G3d42@match-empty (vector-ref G3d8d@p '1) G3d8e@r) (if (memv G3d91@t '(each+)) (G3d42@match-empty (vector-ref G3d8d@p '1) (G3d42@match-empty (reverse (vector-ref G3d8d@p '2)) (G3d42@match-empty (vector-ref G3d8d@p '3) G3d8e@r))) (if (memv G3d91@t '(free-id atom)) G3d8e@r (if (memv G3d91@t '(scheme-id atom)) G3d8e@r (if (memv G3d91@t '(vector)) (G3d42@match-empty (vector-ref G3d8d@p '1) G3d8e@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d8d@p))))))) (vector-ref G3d8d@p '0))))))))) (set! G3d44@combine (lambda (G3d89@r* G3d8a@r) (if (null? (car G3d89@r*)) G3d8a@r (cons (map car G3d89@r*) (G3d44@combine (map cdr G3d89@r*) G3d8a@r))))) (set! G3d46@match* (lambda (G3d68@e G3d69@p G3d6a@m* G3d6b@s* G3d6c@ae* G3d6d@r) (if (null? G3d69@p) (if (null? G3d68@e) (begin '#f G3d6d@r) '#f) (if (pair? G3d69@p) (if (pair? G3d68@e) (begin '#f (G3d48@match (car G3d68@e) (car G3d69@p) G3d6a@m* G3d6b@s* G3d6c@ae* (G3d48@match (cdr G3d68@e) (cdr G3d69@p) G3d6a@m* G3d6b@s* G3d6c@ae* G3d6d@r))) '#f) (if (eq? G3d69@p 'each-any) ((lambda (G3d74@l) (if G3d74@l (begin '#f (cons G3d74@l G3d6d@r)) '#f)) (G3d40@match-each-any G3d68@e G3d6a@m* G3d6b@s* G3d6c@ae*)) ((lambda (G3d76@t) (if (memv G3d76@t '(each)) (if (null? G3d68@e) (G3d42@match-empty (vector-ref G3d69@p '1) G3d6d@r) ((lambda (G3d78@r*) (if G3d78@r* (begin '#f (G3d44@combine G3d78@r* G3d6d@r)) '#f)) (G3d3c@match-each G3d68@e (vector-ref G3d69@p '1) G3d6a@m* G3d6b@s* G3d6c@ae*))) (if (memv G3d76@t '(free-id)) (if (symbol? G3d68@e) (if (G2dbf@top-marked? G3d6a@m*) (if (G2e51@free-id=? (G3d3a@stx^ G3d68@e G3d6a@m* G3d6b@s* G3d6c@ae*) (vector-ref G3d69@p '1)) (begin '#f G3d6d@r) '#f) '#f) '#f) (if (memv G3d76@t '(scheme-id)) (if (symbol? G3d68@e) (if (G2dbf@top-marked? G3d6a@m*) (if (G2e51@free-id=? (G3d3a@stx^ G3d68@e G3d6a@m* G3d6b@s* G3d6c@ae*) (G301a@scheme-stx (vector-ref G3d69@p '1))) (begin '#f G3d6d@r) '#f) '#f) '#f) (if (memv G3d76@t '(each+)) (call-with-values (lambda () (G3d3e@match-each+ G3d68@e (vector-ref G3d69@p '1) (vector-ref G3d69@p '2) (vector-ref G3d69@p '3) G3d6a@m* G3d6b@s* G3d6c@ae* G3d6d@r)) (lambda (G3d7d@G3d7a G3d7e@G3d7b G3d7f@G3d7c) ((lambda (G3d83@r G3d84@y-pat G3d85@xr*) (if G3d83@r (if (null? G3d84@y-pat) (begin '#f (if (null? G3d85@xr*) (G3d42@match-empty (vector-ref G3d69@p '1) G3d83@r) (G3d44@combine G3d85@xr* G3d83@r))) '#f) '#f)) G3d7f@G3d7c G3d7e@G3d7b G3d7d@G3d7a))) (if (memv G3d76@t '(atom)) (if (equal? (vector-ref G3d69@p '1) (G2e5d@strip G3d68@e G3d6a@m*)) (begin '#f G3d6d@r) '#f) (if (memv G3d76@t '(vector)) (if (vector? G3d68@e) (begin '#f (G3d48@match (vector->list G3d68@e) (vector-ref G3d69@p '1) G3d6a@m* G3d6b@s* G3d6c@ae* G3d6d@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d69@p)))))))) (vector-ref G3d69@p '0))))))) (set! G3d48@match (lambda (G3d4d@e G3d4e@p G3d4f@m* G3d50@s* G3d51@ae* G3d52@r) (if (not G3d52@r) '#f (if (eq? G3d4e@p '_) G3d52@r (if (eq? G3d4e@p 'any) (cons (G3d3a@stx^ G3d4d@e G3d4f@m* G3d50@s* G3d51@ae*) G3d52@r) (if (G2e11@stx? G3d4d@e) (if (not (G2dbf@top-marked? G3d4f@m*)) (begin '#f (call-with-values (lambda () (G2e2f@join-wraps G3d4f@m* G3d50@s* G3d51@ae* G3d4d@e)) (lambda (G3d5c@G3d59 G3d5d@G3d5a G3d5e@G3d5b) ((lambda (G3d62@ae* G3d63@s* G3d64@m*) (G3d48@match (G2e15@stx-expr G3d4d@e) G3d4e@p G3d64@m* G3d63@s* G3d62@ae* G3d52@r)) G3d5e@G3d5b G3d5d@G3d5a G3d5c@G3d59)))) '#f) (if (G2990@G2890@annotation? G3d4d@e) (G3d48@match (G2992@G2894@annotation-expression G3d4d@e) G3d4e@p G3d4f@m* G3d50@s* G3d51@ae* G3d52@r) (G3d46@match* G3d4d@e G3d4e@p G3d4f@m* G3d50@s* G3d51@ae* G3d52@r)))))))) (lambda (G3d49@e G3d4a@p) (G3d48@match G3d49@e G3d4a@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G308e@ellipsis? (lambda (G3e0b@x) (if (G2e49@id? G3e0b@x) (begin '#f (G2e51@free-id=? G3e0b@x (G301a@scheme-stx '...))) '#f))) (set! G3090@underscore? (lambda (G3e0d@x) (if (G2e49@id? G3e0d@x) (begin '#f (G2e51@free-id=? G3e0d@x (G301a@scheme-stx '_))) '#f))) (set! G3092@verify-literals (lambda (G3e0f@lits G3e10@expr) (for-each (lambda (G3e13@x) (if ((lambda (G3e15@t) (if G3e15@t G3e15@t ((lambda (G3e17@t) (if G3e17@t G3e17@t (begin '#f (G3090@underscore? G3e13@x)))) (G308e@ellipsis? G3e13@x)))) (not (G2e49@id? G3e13@x))) (G317f@syntax-violation '#f '"invalid literal" G3e10@expr G3e13@x) (void))) G3e0f@lits))) (set! G3094@syntax-case-transformer ((lambda () ((lambda (G3e1a@build-dispatch-call G3e1c@invalid-ids-error G3e1e@gen-clause G3e20@gen-syntax-case) (begin (set! G3e1a@build-dispatch-call (lambda (G3e89@pvars G3e8a@expr G3e8b@y G3e8c@r G3e8d@mr) ((lambda (G3e93@ids G3e94@levels) ((lambda (G3e97@labels G3e98@new-vars) ((lambda (G3e9b@body) (list '(primitive apply) (G2da1@G2cc9@build-lambda '#f G3e98@new-vars G3e9b@body) G3e8b@y)) (G30b0@chi-expr (G2e35@add-subst (G2e02@make-full-rib G3e93@ids G3e97@labels) G3e8a@expr) (append (map (lambda (G3e9d@label G3e9e@var G3e9f@level) (cons G3e9d@label (G2e69@make-binding 'syntax (cons G3e9e@var G3e9f@level)))) G3e97@labels G3e98@new-vars (map cdr G3e89@pvars)) G3e8c@r) G3e8d@mr))) (map G2dc5@gen-label G3e93@ids) (map G2dc1@gen-lexical G3e93@ids))) (map car G3e89@pvars) (map cdr G3e89@pvars)))) (set! G3e1c@invalid-ids-error (lambda (G3e7d@id* G3e7e@e G3e7f@class) ((letrec ((G3e83@find (lambda (G3e85@id* G3e86@ok*) (if (null? G3e85@id*) (G317f@syntax-violation '#f '"invalid syntax" G3e7e@e) (if (G2e49@id? (car G3e85@id*)) (if (G2e57@bound-id-member? (car G3e85@id*) G3e86@ok*) (G3179@syntax-error (car G3e85@id*) '"duplicate " G3e7f@class) (G3e83@find (cdr G3e85@id*) (cons (car G3e85@id*) G3e86@ok*))) (G3179@syntax-error (car G3e85@id*) '"invalid " G3e7f@class)))))) G3e83@find) G3e7d@id* '()))) (set! G3e1e@gen-clause (lambda (G3e57@x G3e58@keys G3e59@clauses G3e5a@r G3e5b@mr G3e5c@pat G3e5d@fender G3e5e@expr) (call-with-values (lambda () (G308a@convert-pattern G3e5c@pat G3e58@keys)) (lambda (G3e69@G3e67 G3e6a@G3e68) ((lambda (G3e6d@pvars G3e6e@p) (if (not (G2e55@distinct-bound-ids? (map car G3e6d@pvars))) (G3e1c@invalid-ids-error (map car G3e6d@pvars) G3e5c@pat '"pattern variable") (if (not (for-all (lambda (G3e71@x) (not (G308e@ellipsis? (car G3e71@x)))) G3e6d@pvars)) (G317f@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e5c@pat) ((lambda (G3e73@y) ((lambda (G3e75@test) ((lambda (G3e77@conseq) ((lambda (G3e79@altern) (list (G2da1@G2cc9@build-lambda '#f (list G3e73@y) (list 'if G3e75@test G3e77@conseq G3e79@altern)) (list '(primitive syntax-dispatch) G3e57@x (list 'quote G3e6e@p)))) (G3e20@gen-syntax-case G3e57@x G3e58@keys G3e59@clauses G3e5a@r G3e5b@mr))) (G3e1a@build-dispatch-call G3e6d@pvars G3e5e@expr G3e73@y G3e5a@r G3e5b@mr))) (if (eq? G3e5d@fender '#t) G3e73@y ((lambda (G3e7b@call) (list 'if G3e73@y G3e7b@call (list 'quote '#f))) (G3e1a@build-dispatch-call G3e6d@pvars G3e5d@fender G3e73@y G3e5a@r G3e5b@mr))))) (G2dc1@gen-lexical 'tmp))))) G3e6a@G3e68 G3e69@G3e67))))) (set! G3e20@gen-syntax-case (lambda (G3e35@x G3e36@keys G3e37@clauses G3e38@r G3e39@mr) (if (null? G3e37@clauses) (list '(primitive syntax-error) G3e35@x) ((lambda (G3e3f@t) ((lambda (G3e41@ls/false) (if G3e41@ls/false (apply (lambda (G3e43@pat G3e44@expr) (if (if (G2e49@id? G3e43@pat) (if (not (G2e57@bound-id-member? G3e43@pat G3e36@keys)) (begin '#f (not (G308e@ellipsis? G3e43@pat))) '#f) '#f) (if (G2e51@free-id=? G3e43@pat (G301a@scheme-stx '_)) (G30b0@chi-expr G3e44@expr G3e38@r G3e39@mr) ((lambda (G3e47@lab G3e48@lex) ((lambda (G3e4b@body) (list (G2da1@G2cc9@build-lambda '#f (list G3e48@lex) G3e4b@body) G3e35@x)) (G30b0@chi-expr (G2e35@add-subst (G2e02@make-full-rib (list G3e43@pat) (list G3e47@lab)) G3e44@expr) (cons (cons G3e47@lab (G2e69@make-binding 'syntax (cons G3e48@lex '0))) G3e38@r) G3e39@mr))) (G2dc5@gen-label G3e43@pat) (G2dc1@gen-lexical G3e43@pat))) (G3e1e@gen-clause G3e35@x G3e36@keys (cdr G3e37@clauses) G3e38@r G3e39@mr G3e43@pat '#t G3e44@expr))) G3e41@ls/false) ((lambda (G3e4d@t) ((lambda (G3e4f@ls/false) (if G3e4f@ls/false (apply (lambda (G3e51@pat G3e52@fender G3e53@expr) (G3e1e@gen-clause G3e35@x G3e36@keys (cdr G3e37@clauses) G3e38@r G3e39@mr G3e51@pat G3e52@fender G3e53@expr)) G3e4f@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3e4d@t))) (G308c@syntax-dispatch G3e4d@t '(any any any)))) G3e3f@t))) (G308c@syntax-dispatch G3e3f@t '(any any)))) (car G3e37@clauses))))) (lambda (G3e21@e G3e22@r G3e23@mr) ((lambda (G3e27@t) ((lambda (G3e29@ls/false) (if G3e29@ls/false (apply (lambda (G3e2b@expr G3e2c@keys G3e2d@clauses) (begin (G3092@verify-literals G3e2c@keys G3e21@e) ((lambda (G3e31@x) ((lambda (G3e33@body) (list (G2da1@G2cc9@build-lambda '#f (list G3e31@x) G3e33@body) (G30b0@chi-expr G3e2b@expr G3e22@r G3e23@mr))) (G3e20@gen-syntax-case G3e31@x G3e2c@keys G3e2d@clauses G3e22@r G3e23@mr))) (G2dc1@gen-lexical 'tmp)))) G3e29@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3e27@t))) (G308c@syntax-dispatch G3e27@t '(_ any each-any . each-any)))) G3e21@e)))) '#f '#f '#f '#f)))) (set! G3096@ellipsis-map (lambda (G3ea3@proc G3ea4@ls . G3ea7@ls*) ((lambda (G3eaa@who) (begin (set! G3eaa@who '...) (begin (if (not (list? G3ea4@ls)) (assertion-violation G3eaa@who '"not a list" G3ea4@ls) (void)) (if (not (null? G3ea7@ls*)) ((lambda (G3eab@n) (for-each (lambda (G3ead@x) (begin (if (not (list? G3ead@x)) (assertion-violation G3eaa@who '"not a list" G3ead@x) (void)) (if (not (= (length G3ead@x) G3eab@n)) (assertion-violation G3eaa@who '"length mismatch" G3ea4@ls G3ead@x) (void)))) G3ea7@ls*)) (length G3ea4@ls)) (void)) (apply map G3ea3@proc G3ea4@ls G3ea7@ls*)))) '#f))) (set! G3098@syntax-transformer ((lambda () ((lambda (G3eb0@gen-syntax G3eb2@gen-ref G3eb4@gen-append G3eb6@gen-mappend G3eb8@gen-map G3eba@gen-cons G3ebc@gen-vector G3ebe@regen) (begin (set! G3eb0@gen-syntax (lambda (G3f23@src G3f24@e G3f25@r G3f26@maps G3f27@ellipsis? G3f28@vec?) ((lambda (G3f2f@t) ((lambda (G3f31@ls/false) (if (if G3f31@ls/false (begin '#f (apply (lambda (G3f33@dots) (G3f27@ellipsis? G3f33@dots)) G3f31@ls/false)) '#f) (apply (lambda (G3f35@dots) (G317f@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f23@src)) G3f31@ls/false) ((lambda (G3f37@t) ((lambda (G3f39@ls/false) (if (if G3f39@ls/false (begin '#f (apply (lambda (G3f3b@id) (G2e49@id? G3f3b@id)) G3f39@ls/false)) '#f) (apply (lambda (G3f3d@id) ((lambda (G3f3f@label) ((lambda (G3f41@b) ((lambda () (if (eq? (G2e6b@binding-type G3f41@b) 'syntax) (call-with-values (lambda () ((lambda (G3f45@var.lev) (G3eb2@gen-ref G3f23@src (car G3f45@var.lev) (cdr G3f45@var.lev) G3f26@maps)) (G2e6d@binding-value G3f41@b))) (lambda (G3f47@G3f43 G3f48@G3f44) ((lambda (G3f4b@maps G3f4c@var) (values (list 'ref G3f4c@var) G3f4b@maps)) G3f48@G3f44 G3f47@G3f43))) (values (list 'quote G3f24@e) G3f26@maps))))) (G2e67@label->binding G3f3f@label G3f25@r))) (G2e63@id->label G3f24@e))) G3f39@ls/false) ((lambda (G3f4f@t) ((lambda (G3f51@ls/false) (if (if G3f51@ls/false (begin '#f (apply (lambda (G3f53@dots G3f54@e) (G3f27@ellipsis? G3f53@dots)) G3f51@ls/false)) '#f) (apply (lambda (G3f57@dots G3f58@e) (if G3f28@vec? (G317f@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f23@src) (G3eb0@gen-syntax G3f23@src G3f58@e G3f25@r G3f26@maps (lambda (G3f5b@x) '#f) '#f))) G3f51@ls/false) ((lambda (G3f5d@t) ((lambda (G3f5f@ls/false) (if (if G3f5f@ls/false (begin '#f (apply (lambda (G3f61@x G3f62@dots G3f63@y) (G3f27@ellipsis? G3f62@dots)) G3f5f@ls/false)) '#f) (apply (lambda (G3f67@x G3f68@dots G3f69@y) ((letrec ((G3f6d@f (lambda (G3f6f@y G3f70@k) ((lambda (G3f73@t) ((lambda (G3f75@ls/false) (if G3f75@ls/false (apply (lambda () (G3f70@k G3f26@maps)) G3f75@ls/false) ((lambda (G3f77@t) ((lambda (G3f79@ls/false) (if (if G3f79@ls/false (begin '#f (apply (lambda (G3f7b@dots G3f7c@y) (G3f27@ellipsis? G3f7b@dots)) G3f79@ls/false)) '#f) (apply (lambda (G3f7f@dots G3f80@y) (G3f6d@f G3f80@y (lambda (G3f83@maps) (call-with-values (lambda () (G3f70@k (cons '() G3f83@maps))) (lambda (G3f87@G3f85 G3f88@G3f86) ((lambda (G3f8b@maps G3f8c@x) (if (null? (car G3f8b@maps)) (G317f@syntax-violation '#f '"extra ellipsis in syntax form" G3f23@src) (values (G3eb6@gen-mappend G3f8c@x (car G3f8b@maps)) (cdr G3f8b@maps)))) G3f88@G3f86 G3f87@G3f85)))))) G3f79@ls/false) ((lambda (G3f8f@t) ((lambda (G3f91@ls/false) (if G3f91@ls/false (apply (lambda () (call-with-values (lambda () (G3eb0@gen-syntax G3f23@src G3f6f@y G3f25@r G3f26@maps G3f27@ellipsis? G3f28@vec?)) (lambda (G3f95@G3f93 G3f96@G3f94) ((lambda (G3f99@maps G3f9a@y) (call-with-values (lambda () (G3f70@k G3f99@maps)) (lambda (G3f9f@G3f9d G3fa0@G3f9e) ((lambda (G3fa3@maps G3fa4@x) (values (G3eb4@gen-append G3fa4@x G3f9a@y) G3fa3@maps)) G3fa0@G3f9e G3f9f@G3f9d)))) G3f96@G3f94 G3f95@G3f93)))) G3f91@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3f8f@t))) (G308c@syntax-dispatch G3f8f@t '_))) G3f77@t))) (G308c@syntax-dispatch G3f77@t '(any . any)))) G3f73@t))) (G308c@syntax-dispatch G3f73@t '()))) G3f6f@y)))) G3f6d@f) G3f69@y (lambda (G3fa7@maps) (call-with-values (lambda () (G3eb0@gen-syntax G3f23@src G3f67@x G3f25@r (cons '() G3fa7@maps) G3f27@ellipsis? '#f)) (lambda (G3fab@G3fa9 G3fac@G3faa) ((lambda (G3faf@maps G3fb0@x) (if (null? (car G3faf@maps)) (G317f@syntax-violation '#f '"extra ellipsis in syntax form" G3f23@src) (values (G3eb8@gen-map G3fb0@x (car G3faf@maps)) (cdr G3faf@maps)))) G3fac@G3faa G3fab@G3fa9)))))) G3f5f@ls/false) ((lambda (G3fb3@t) ((lambda (G3fb5@ls/false) (if G3fb5@ls/false (apply (lambda (G3fb7@x G3fb8@y) (call-with-values (lambda () (G3eb0@gen-syntax G3f23@src G3fb7@x G3f25@r G3f26@maps G3f27@ellipsis? '#f)) (lambda (G3fbd@G3fbb G3fbe@G3fbc) ((lambda (G3fc1@maps G3fc2@xnew) (call-with-values (lambda () (G3eb0@gen-syntax G3f23@src G3fb8@y G3f25@r G3fc1@maps G3f27@ellipsis? G3f28@vec?)) (lambda (G3fc7@G3fc5 G3fc8@G3fc6) ((lambda (G3fcb@maps G3fcc@ynew) (values (G3eba@gen-cons G3f24@e G3fb7@x G3fb8@y G3fc2@xnew G3fcc@ynew) G3fcb@maps)) G3fc8@G3fc6 G3fc7@G3fc5)))) G3fbe@G3fbc G3fbd@G3fbb)))) G3fb5@ls/false) ((lambda (G3fcf@t) ((lambda (G3fd1@ls/false) (if G3fd1@ls/false (apply (lambda (G3fd3@ls) (call-with-values (lambda () (G3eb0@gen-syntax G3f23@src G3fd3@ls G3f25@r G3f26@maps G3f27@ellipsis? '#t)) (lambda (G3fd7@G3fd5 G3fd8@G3fd6) ((lambda (G3fdb@maps G3fdc@lsnew) (values (G3ebc@gen-vector G3f24@e G3fd3@ls G3fdc@lsnew) G3fdb@maps)) G3fd8@G3fd6 G3fd7@G3fd5)))) G3fd1@ls/false) ((lambda (G3fdf@t) ((lambda (G3fe1@ls/false) (if G3fe1@ls/false (apply (lambda () (values (list 'quote G3f24@e) G3f26@maps)) G3fe1@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3fdf@t))) (G308c@syntax-dispatch G3fdf@t '_))) G3fcf@t))) (G308c@syntax-dispatch G3fcf@t '#(vector each-any)))) G3fb3@t))) (G308c@syntax-dispatch G3fb3@t '(any . any)))) G3f5d@t))) (G308c@syntax-dispatch G3f5d@t '(any any . any)))) G3f4f@t))) (G308c@syntax-dispatch G3f4f@t '(any any)))) G3f37@t))) (G308c@syntax-dispatch G3f37@t 'any))) G3f2f@t))) (G308c@syntax-dispatch G3f2f@t 'any))) G3f24@e))) (set! G3eb2@gen-ref (lambda (G3f0b@src G3f0c@var G3f0d@level G3f0e@maps) (if (= G3f0d@level '0) (values G3f0c@var G3f0e@maps) (if (null? G3f0e@maps) (G317f@syntax-violation '#f '"missing ellipsis in syntax form" G3f0b@src) (call-with-values (lambda () (G3eb2@gen-ref G3f0b@src G3f0c@var (- G3f0d@level '1) (cdr G3f0e@maps))) (lambda (G3f15@G3f13 G3f16@G3f14) ((lambda (G3f19@outer-maps G3f1a@outer-var) ((lambda (G3f1d@t) (if G3f1d@t ((lambda (G3f1f@b) (values (cdr G3f1f@b) G3f0e@maps)) G3f1d@t) ((lambda (G3f21@inner-var) (values G3f21@inner-var (cons (cons (cons G3f1a@outer-var G3f21@inner-var) (car G3f0e@maps)) G3f19@outer-maps))) (G2dc1@gen-lexical 'tmp)))) (assq G3f1a@outer-var (car G3f0e@maps)))) G3f16@G3f14 G3f15@G3f13))))))) (set! G3eb4@gen-append (lambda (G3f07@x G3f08@y) (if (equal? G3f08@y ''()) G3f07@x (list 'append G3f07@x G3f08@y)))) (set! G3eb6@gen-mappend (lambda (G3f03@e G3f04@map-env) (list 'apply '(primitive append) (G3eb8@gen-map G3f03@e G3f04@map-env)))) (set! G3eb8@gen-map (lambda (G3ef1@e G3ef2@map-env) ((lambda (G3ef5@formals G3ef6@actuals) (if (eq? (car G3ef1@e) 'ref) (car G3ef6@actuals) (if (for-all (lambda (G3ef9@x) (if (eq? (car G3ef9@x) 'ref) (begin '#f (memq (cadr G3ef9@x) G3ef5@formals)) '#f)) (cdr G3ef1@e)) ((lambda (G3efb@args) (cons 'map (cons (list 'primitive (car G3ef1@e)) G3efb@args))) (map ((lambda (G3efd@r) (lambda (G3eff@x) (cdr (assq (cadr G3eff@x) G3efd@r)))) (map cons G3ef5@formals G3ef6@actuals)) (cdr G3ef1@e))) (cons* 'map (list 'lambda G3ef5@formals G3ef1@e) G3ef6@actuals)))) (map cdr G3ef2@map-env) (map (lambda (G3f01@x) (list 'ref (car G3f01@x))) G3ef2@map-env)))) (set! G3eba@gen-cons (lambda (G3ee1@e G3ee2@x G3ee3@y G3ee4@xnew G3ee5@ynew) ((lambda (G3eeb@t) (if (memv G3eeb@t '(quote)) (if (eq? (car G3ee4@xnew) 'quote) ((lambda (G3eed@xnew G3eee@ynew) (if (if (eq? G3eed@xnew G3ee2@x) (begin '#f (eq? G3eee@ynew G3ee3@y)) '#f) (list 'quote G3ee1@e) (list 'quote (cons G3eed@xnew G3eee@ynew)))) (cadr G3ee4@xnew) (cadr G3ee5@ynew)) (if (null? (cadr G3ee5@ynew)) (list 'list G3ee4@xnew) (list 'cons G3ee4@xnew G3ee5@ynew))) (if (memv G3eeb@t '(list)) (cons 'list (cons G3ee4@xnew (cdr G3ee5@ynew))) (list 'cons G3ee4@xnew G3ee5@ynew)))) (car G3ee5@ynew)))) (set! G3ebc@gen-vector (lambda (G3edb@e G3edc@ls G3edd@lsnew) (if (eq? (car G3edd@lsnew) 'quote) (if (eq? (cadr G3edd@lsnew) G3edc@ls) (list 'quote G3edb@e) (list 'quote (list->vector (cadr G3edd@lsnew)))) (if (eq? (car G3edd@lsnew) 'list) (cons 'vector (cdr G3edd@lsnew)) (list 'list->vector G3edd@lsnew))))) (set! G3ebe@regen (lambda (G3ed5@x) ((lambda (G3ed7@t) (if (memv G3ed7@t '(ref)) (cadr G3ed5@x) (if (memv G3ed7@t '(primitive)) (list 'primitive (cadr G3ed5@x)) (if (memv G3ed7@t '(quote)) (list 'quote (cadr G3ed5@x)) (if (memv G3ed7@t '(lambda)) (G2da1@G2cc9@build-lambda '#f (cadr G3ed5@x) (G3ebe@regen (caddr G3ed5@x))) (if (memv G3ed7@t '(map)) ((lambda (G3ed9@ls) (cons '(primitive ellipsis-map) G3ed9@ls)) (map G3ebe@regen (cdr G3ed5@x))) (cons (list 'primitive (car G3ed5@x)) (map G3ebe@regen (cdr G3ed5@x))))))))) (car G3ed5@x)))) (lambda (G3ebf@e G3ec0@r G3ec1@mr) ((lambda (G3ec5@t) ((lambda (G3ec7@ls/false) (if G3ec7@ls/false (apply (lambda (G3ec9@x) (call-with-values (lambda () (G3eb0@gen-syntax G3ebf@e G3ec9@x G3ec0@r '() G308e@ellipsis? '#f)) (lambda (G3ecd@G3ecb G3ece@G3ecc) ((lambda (G3ed1@maps G3ed2@e) (G3ebe@regen G3ed2@e)) G3ece@G3ecc G3ecd@G3ecb)))) G3ec7@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3ec5@t))) (G308c@syntax-dispatch G3ec5@t '(_ any)))) G3ebf@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G309a@core-macro-transformer (lambda (G3fe3@name) ((lambda (G3fe5@t) (if (memv G3fe5@t '(quote)) G303c@quote-transformer (if (memv G3fe5@t '(lambda)) G3040@lambda-transformer (if (memv G3fe5@t '(case-lambda)) G303e@case-lambda-transformer (if (memv G3fe5@t '(letrec)) G3028@letrec-transformer (if (memv G3fe5@t '(letrec*)) G302a@letrec*-transformer (if (memv G3fe5@t '(if)) G3038@if-transformer (if (memv G3fe5@t '(foreign-call)) G3088@foreign-call-transformer (if (memv G3fe5@t '(syntax-case)) G3094@syntax-case-transformer (if (memv G3fe5@t '(syntax)) G3098@syntax-transformer (if (memv G3fe5@t '(type-descriptor)) G302e@type-descriptor-transformer (if (memv G3fe5@t '(record-type-descriptor)) G3030@record-type-descriptor-transformer (if (memv G3fe5@t '(record-constructor-descriptor)) G3032@record-constructor-descriptor-transformer (if (memv G3fe5@t '(fluid-let-syntax)) G302c@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fe3@name))))))))))))))) G3fe3@name))) (set! G309c@file-options-macro (lambda (G3fe7@x) ((lambda (G3fea@valid-option?) (begin (set! G3fea@valid-option? (lambda (G3ff3@x) (if (G2e49@id? G3ff3@x) (begin '#f (memq (G2e4b@id->sym G3ff3@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3feb@t) ((lambda (G3fed@ls/false) (if (if G3fed@ls/false (begin '#f (apply (lambda (G3fef@opt*) (if (for-all G3fea@valid-option? G3fef@opt*) (begin '#f (G299c@G2940@file-options-spec (map G2e4b@id->sym G3fef@opt*))) '#f)) G3fed@ls/false)) '#f) (apply (lambda (G3ff1@opt*) (G3042@bless (list 'quote (G299c@G2940@file-options-spec (map G2e4b@id->sym G3ff1@opt*))))) G3fed@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3feb@t))) (G308c@syntax-dispatch G3feb@t '(_ . each-any)))) G3fe7@x))) '#f))) (set! G309e@symbol-macro (lambda (G3ff5@x G3ff6@set) ((lambda (G3ff9@t) ((lambda (G3ffb@ls/false) (if (if G3ffb@ls/false (begin '#f (apply (lambda (G3ffd@name) (if (G2e49@id? G3ffd@name) (begin '#f (memq (G2e4b@id->sym G3ffd@name) G3ff6@set)) '#f)) G3ffb@ls/false)) '#f) (apply (lambda (G3fff@name) (G3042@bless (list 'quote G3fff@name))) G3ffb@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G3ff9@t))) (G308c@syntax-dispatch G3ff9@t '(_ any)))) G3ff5@x))) (set! G30a0@macro-transformer (lambda (G4001@x) (if (procedure? G4001@x) G4001@x (if (symbol? G4001@x) ((lambda (G4003@t) (if (memv G4003@t '(define-record-type)) G3080@define-record-type-macro (if (memv G4003@t '(define-struct)) G307e@define-struct-macro (if (memv G4003@t '(include)) G3074@include-macro (if (memv G4003@t '(cond)) G3070@cond-macro (if (memv G4003@t '(let)) G3048@let-macro (if (memv G4003@t '(do)) G3068@do-macro (if (memv G4003@t '(or)) G306c@or-macro (if (memv G4003@t '(and)) G306e@and-macro (if (memv G4003@t '(let*)) G306a@let*-macro (if (memv G4003@t '(let-values)) G304a@let-values-macro (if (memv G4003@t '(let*-values)) G304c@let*-values-macro (if (memv G4003@t '(syntax-rules)) G3078@syntax-rules-macro (if (memv G4003@t '(quasiquote)) G307a@quasiquote-macro (if (memv G4003@t '(quasisyntax)) G307c@quasisyntax-macro (if (memv G4003@t '(with-syntax)) G3044@with-syntax-macro (if (memv G4003@t '(when)) G3034@when-macro (if (memv G4003@t '(unless)) G3036@unless-macro (if (memv G4003@t '(case)) G303a@case-macro (if (memv G4003@t '(identifier-syntax)) G3066@identifier-syntax-macro (if (memv G4003@t '(time)) G305e@time-macro (if (memv G4003@t '(delay)) G3060@delay-macro (if (memv G4003@t '(assert)) G3062@assert-macro (if (memv G4003@t '(endianness)) G3064@endianness-macro (if (memv G4003@t '(guard)) G305a@guard-macro (if (memv G4003@t '(define-enumeration)) G305c@define-enumeration-macro (if (memv G4003@t '(trace-lambda)) G304e@trace-lambda-macro (if (memv G4003@t '(trace-define)) G3050@trace-define-macro (if (memv G4003@t '(trace-define-syntax)) G3052@trace-define-syntax-macro (if (memv G4003@t '(trace-let-syntax)) G3056@trace-let-syntax-macro (if (memv G4003@t '(trace-letrec-syntax)) G3058@trace-letrec-syntax-macro (if (memv G4003@t '(define-condition-type)) G3082@define-condition-type-macro (if (memv G4003@t '(parameterize)) G3086@parameterize-macro (if (memv G4003@t '(include-into)) G3076@include-into-macro (if (memv G4003@t '(eol-style)) (lambda (G4005@x) (G309e@symbol-macro G4005@x '(none lf cr crlf nel crnel ls))) (if (memv G4003@t '(error-handling-mode)) (lambda (G4007@x) (G309e@symbol-macro G4007@x '(ignore raise replace))) (if (memv G4003@t '(buffer-mode)) (lambda (G4009@x) (G309e@symbol-macro G4009@x '(none line block))) (if (memv G4003@t '(file-options)) G309c@file-options-macro (if (memv G4003@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3084@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G4001@x)))))))))))))))))))))))))))))))))))))))) G4001@x) (error 'core-macro-transformer '"BUG: invalid macro" G4001@x))))) (set! G30a2@local-macro-transformer (lambda (G400b@x) (car G400b@x))) (set! G30a4@do-macro-call (lambda (G400d@transformer G400e@expr) ((lambda (G4011@out) (begin ((letrec ((G4013@f (lambda (G4015@x) (if (not (G2e11@stx? G4015@x)) (if (pair? G4015@x) (begin (G4013@f (car G4015@x)) (G4013@f (cdr G4015@x))) (if (vector? G4015@x) (vector-for-each G4013@f G4015@x) (if (symbol? G4015@x) (G317f@syntax-violation '#f '"raw symbol encountered in output of macro" G400e@expr G4015@x) (void)))) (void))))) G4013@f) G4011@out) (G2e33@add-mark (G2e29@gen-mark) G4011@out G400e@expr))) (G400d@transformer (G2e33@add-mark G2e2b@anti-mark G400e@expr '#f))))) (set! G30a6@chi-macro (lambda (G4017@p G4018@e) (G30a4@do-macro-call (G30a0@macro-transformer G4017@p) G4018@e))) (set! G30a8@chi-local-macro (lambda (G401b@p G401c@e) (G30a4@do-macro-call (G30a2@local-macro-transformer G401b@p) G401c@e))) (set! G30aa@chi-global-macro (lambda (G401f@p G4020@e) ((lambda (G4023@lib G4024@loc) (begin (G2c3f@G2ad5@visit-library G4023@lib) ((lambda (G4027@x) ((lambda (G4029@transformer) (G30a4@do-macro-call G4029@transformer G4020@e)) (if (procedure? G4027@x) G4027@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G4027@x)))) (symbol-value G4024@loc)))) (car G401f@p) (cdr G401f@p)))) (set! G30ac@chi-expr* (lambda (G402b@e* G402c@r G402d@mr) (if (null? G402b@e*) '() ((lambda (G4031@e) (cons G4031@e (G30ac@chi-expr* (cdr G402b@e*) G402c@r G402d@mr))) (G30b0@chi-expr (car G402b@e*) G402c@r G402d@mr))))) (set! G30ae@chi-application (lambda (G4033@e G4034@r G4035@mr) ((lambda (G4039@t) ((lambda (G403b@ls/false) (if G403b@ls/false (apply (lambda (G403d@rator G403e@rands) ((lambda (G4041@rator) (cons G4041@rator (G30ac@chi-expr* G403e@rands G4034@r G4035@mr))) (G30b0@chi-expr G403d@rator G4034@r G4035@mr))) G403b@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G4039@t))) (G308c@syntax-dispatch G4039@t '(any . each-any)))) G4033@e))) (set! G30b0@chi-expr (lambda (G4043@e G4044@r G4045@mr) (call-with-values (lambda () (G2e71@syntax-type G4043@e G4044@r)) (lambda (G404c@G4049 G404d@G404a G404e@G404b) ((lambda (G4052@kwd G4053@value G4054@type) ((lambda (G4058@t) (if (memv G4058@t '(core-macro)) ((lambda (G405a@transformer) (G405a@transformer G4043@e G4044@r G4045@mr)) (G309a@core-macro-transformer G4053@value)) (if (memv G4058@t '(global)) ((lambda (G405c@lib) ((lambda (G405e@loc) ((lambda () (begin ((G30fb@inv-collector) G405c@lib) G405e@loc)))) (cdr G4053@value))) (car G4053@value)) (if (memv G4058@t '(core-prim)) ((lambda (G4060@name) (list 'primitive G4060@name)) G4053@value) (if (memv G4058@t '(call)) (G30ae@chi-application G4043@e G4044@r G4045@mr) (if (memv G4058@t '(lexical)) ((lambda (G4062@lex) G4062@lex) (G301c@lexical-var G4053@value)) (if (memv G4058@t '(global-macro global-macro!)) (G30b0@chi-expr (G30aa@chi-global-macro G4053@value G4043@e) G4044@r G4045@mr) (if (memv G4058@t '(local-macro local-macro!)) (G30b0@chi-expr (G30a8@chi-local-macro G4053@value G4043@e) G4044@r G4045@mr) (if (memv G4058@t '(macro macro!)) (G30b0@chi-expr (G30a6@chi-macro G4053@value G4043@e) G4044@r G4045@mr) (if (memv G4058@t '(constant)) ((lambda (G4064@datum) (list 'quote G4064@datum)) G4053@value) (if (memv G4058@t '(set!)) (G30b2@chi-set! G4043@e G4044@r G4045@mr) (if (memv G4058@t '(begin)) ((lambda (G4066@t) ((lambda (G4068@ls/false) (if G4068@ls/false (apply (lambda (G406a@x G406b@x*) (G2da4@G2d15@build-sequence '#f (G30ac@chi-expr* (cons G406a@x G406b@x*) G4044@r G4045@mr))) G4068@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G4066@t))) (G308c@syntax-dispatch G4066@t '(_ any . each-any)))) G4043@e) (if (memv G4058@t '(let-syntax letrec-syntax)) ((lambda (G406e@t) ((lambda (G4070@ls/false) (if (if G4070@ls/false (begin '#f (apply (lambda (G4072@xlhs* G4073@xrhs* G4074@xbody G4075@xbody*) (if (not (G2e53@valid-bound-ids? G4072@xlhs*)) (G317f@syntax-violation '#f '"invalid identifiers" G4043@e) (void))) G4070@ls/false)) '#f) (apply (lambda (G407a@xlhs* G407b@xrhs* G407c@xbody G407d@xbody*) ((lambda (G4082@xlab*) ((lambda (G4084@xrib) ((lambda (G4086@xb*) ((lambda () (G2da4@G2d15@build-sequence '#f (G30ac@chi-expr* (map (lambda (G4088@x) (G2e35@add-subst G4084@xrib G4088@x)) (cons G407c@xbody G407d@xbody*)) (append (map cons G4082@xlab* G4086@xb*) G4044@r) (append (map cons G4082@xlab* G4086@xb*) G4045@mr)))))) (map (lambda (G408a@x) (G2e90@make-eval-transformer (G30ed@expand-transformer (if (eq? G4054@type 'let-syntax) G408a@x (G2e35@add-subst G4084@xrib G408a@x)) G4045@mr))) G407b@xrhs*))) (G2e02@make-full-rib G407a@xlhs* G4082@xlab*))) (map G2dc5@gen-label G407a@xlhs*))) G4070@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G406e@t))) (G308c@syntax-dispatch G406e@t '(_ #(each (any any)) any . each-any)))) G4043@e) (if (memv G4058@t '(displaced-lexical)) (G317f@syntax-violation '#f '"identifier out of context" G4043@e) (if (memv G4058@t '(syntax)) (G317f@syntax-violation '#f '"reference to pattern variable outside a syntax form" G4043@e) (if (memv G4058@t '(define define-syntax module import library)) (G317f@syntax-violation '#f (string-append ((lambda (G408c@t) (if (memv G408c@t '(define)) '"a definition" (if (memv G408c@t '(define-syntax)) '"a define-syntax" (if (memv G408c@t '(module)) '"a module definition" (if (memv G408c@t '(library)) '"a library definition" (if (memv G408c@t '(import)) '"an import declaration" (if (memv G408c@t '(export)) '"an export declaration" '"a non-expression"))))))) G4054@type) '" was found where an expression was expected") G4043@e) (if (memv G4058@t '(mutable)) (G317f@syntax-violation '#f '"attempt to reference an unexportable variable" G4043@e) (G317f@syntax-violation '#f '"invalid expression" G4043@e)))))))))))))))))) G4054@type)) G404e@G404b G404d@G404a G404c@G4049))))) (set! G30b2@chi-set! (lambda (G408e@e G408f@r G4090@mr) ((lambda (G4094@t) ((lambda (G4096@ls/false) (if (if G4096@ls/false (begin '#f (apply (lambda (G4098@x G4099@v) (G2e49@id? G4098@x)) G4096@ls/false)) '#f) (apply (lambda (G409c@x G409d@v) (call-with-values (lambda () (G2e71@syntax-type G409c@x G408f@r)) (lambda (G40a3@G40a0 G40a4@G40a1 G40a5@G40a2) ((lambda (G40a9@kwd G40aa@value G40ab@type) ((lambda (G40af@t) (if (memv G40af@t '(lexical)) (begin (G3020@set-lexical-mutable! G40aa@value '#t) (list 'set! (G301c@lexical-var G40aa@value) (G30b0@chi-expr G409d@v G408f@r G4090@mr))) (if (memv G40af@t '(core-prim)) (G317f@syntax-violation '#f '"cannot modify imported core primitive" G408e@e) (if (memv G40af@t '(global)) (G317f@syntax-violation '#f '"attempt to modify imported binding" G408e@e) (if (memv G40af@t '(global-macro!)) (G30b0@chi-expr (G30aa@chi-global-macro G40aa@value G408e@e) G408f@r G4090@mr) (if (memv G40af@t '(local-macro!)) (G30b0@chi-expr (G30a8@chi-local-macro G40aa@value G408e@e) G408f@r G4090@mr) (if (memv G40af@t '(mutable)) (G317f@syntax-violation '#f '"attempt to assign to an unexportable variable" G408e@e) (G317f@syntax-violation '#f '"invalid syntax" G408e@e)))))))) G40ab@type)) G40a5@G40a2 G40a4@G40a1 G40a3@G40a0)))) G4096@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G4094@t))) (G308c@syntax-dispatch G4094@t '(_ any any)))) G408e@e))) (set! G30b4@verify-formals (lambda (G40b1@fmls G40b2@stx) ((lambda (G40b5@t) ((lambda (G40b7@ls/false) (if G40b7@ls/false (apply (lambda (G40b9@x*) (if (not (G2e53@valid-bound-ids? G40b9@x*)) (G3046@invalid-fmls-error G40b2@stx G40b1@fmls) (void))) G40b7@ls/false) ((lambda (G40bb@t) ((lambda (G40bd@ls/false) (if G40bd@ls/false (apply (lambda (G40bf@x* G40c0@x) (if (not (G2e53@valid-bound-ids? (cons G40c0@x G40bf@x*))) (G3046@invalid-fmls-error G40b2@stx G40b1@fmls) (void))) G40bd@ls/false) ((lambda (G40c3@t) ((lambda (G40c5@ls/false) (if G40c5@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid syntax" G40b2@stx)) G40c5@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G40c3@t))) (G308c@syntax-dispatch G40c3@t '_))) G40bb@t))) (G308c@syntax-dispatch G40bb@t '#(each+ any () any)))) G40b5@t))) (G308c@syntax-dispatch G40b5@t 'each-any))) G40b1@fmls))) (set! G30b6@chi-lambda-clause (lambda (G40c7@stx G40c8@fmls G40c9@body* G40ca@r G40cb@mr) ((lambda (G40d1@t) ((lambda (G40d3@ls/false) (if G40d3@ls/false (apply (lambda (G40d5@x*) (begin (G30b4@verify-formals G40c8@fmls G40c7@stx) ((lambda (G40d7@lex* G40d8@lab*) (values G40d7@lex* (G30c6@chi-internal (G2e35@add-subst (G2e02@make-full-rib G40d5@x* G40d8@lab*) G40c9@body*) (G3024@add-lexicals G40d8@lab* G40d7@lex* G40ca@r) G40cb@mr))) (map G2dc1@gen-lexical G40d5@x*) (map G2dc5@gen-label G40d5@x*)))) G40d3@ls/false) ((lambda (G40db@t) ((lambda (G40dd@ls/false) (if G40dd@ls/false (apply (lambda (G40df@x* G40e0@x) (begin (G30b4@verify-formals G40c8@fmls G40c7@stx) ((lambda (G40e3@lex* G40e4@lab* G40e5@lex G40e6@lab) (values (append G40e3@lex* G40e5@lex) (G30c6@chi-internal (G2e35@add-subst (G2e02@make-full-rib (cons G40e0@x G40df@x*) (cons G40e6@lab G40e4@lab*)) G40c9@body*) (G3024@add-lexicals (cons G40e6@lab G40e4@lab*) (cons G40e5@lex G40e3@lex*) G40ca@r) G40cb@mr))) (map G2dc1@gen-lexical G40df@x*) (map G2dc5@gen-label G40df@x*) (G2dc1@gen-lexical G40e0@x) (G2dc5@gen-label G40e0@x)))) G40dd@ls/false) ((lambda (G40eb@t) ((lambda (G40ed@ls/false) (if G40ed@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid syntax" G40c8@fmls)) G40ed@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G40eb@t))) (G308c@syntax-dispatch G40eb@t '_))) G40db@t))) (G308c@syntax-dispatch G40db@t '#(each+ any () any)))) G40d1@t))) (G308c@syntax-dispatch G40d1@t 'each-any))) G40c8@fmls))) (set! G30b8@chi-lambda-clause* (lambda (G40ef@stx G40f0@fmls* G40f1@body** G40f2@r G40f3@mr) (if (null? G40f0@fmls*) (values '() '()) (call-with-values (lambda () (G30b6@chi-lambda-clause G40ef@stx (car G40f0@fmls*) (car G40f1@body**) G40f2@r G40f3@mr)) (lambda (G40fb@G40f9 G40fc@G40fa) ((lambda (G40ff@b G4100@a) (call-with-values (lambda () (G30b8@chi-lambda-clause* G40ef@stx (cdr G40f0@fmls*) (cdr G40f1@body**) G40f2@r G40f3@mr)) (lambda (G4105@G4103 G4106@G4104) ((lambda (G4109@b* G410a@a*) (values (cons G4100@a G410a@a*) (cons G40ff@b G4109@b*))) G4106@G4104 G4105@G4103)))) G40fc@G40fa G40fb@G40f9)))))) (set! G30ba@chi-defun (lambda (G410d@x G410e@r G410f@mr) ((lambda (G4113@fmls G4114@body*) (call-with-values (lambda () (G30b6@chi-lambda-clause G4113@fmls G4113@fmls G4114@body* G410e@r G410f@mr)) (lambda (G4119@G4117 G411a@G4118) ((lambda (G411d@body G411e@fmls) (G2da1@G2cc9@build-lambda '#f G411e@fmls G411d@body)) G411a@G4118 G4119@G4117)))) (car G410d@x) (cdr G410d@x)))) (set! G30bc@chi-rhs (lambda (G4121@rhs G4122@r G4123@mr) ((lambda (G4127@t) (if (memv G4127@t '(defun)) (G30ba@chi-defun (cdr G4121@rhs) G4122@r G4123@mr) (if (memv G4127@t '(expr)) ((lambda (G4129@expr) (G30b0@chi-expr G4129@expr G4122@r G4123@mr)) (cdr G4121@rhs)) (if (memv G4127@t '(top-expr)) ((lambda (G412b@expr) (G2da4@G2d15@build-sequence '#f (list (G30b0@chi-expr G412b@expr G4122@r G4123@mr) (G2da5@G2d17@build-void)))) (cdr G4121@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G4121@rhs))))) (car G4121@rhs)))) (set! G30be@expand-interaction-rhs*/init* (lambda (G412d@lhs* G412e@rhs* G412f@init* G4130@r G4131@mr) ((letrec ((G4137@f (lambda (G4139@lhs* G413a@rhs*) (if (null? G4139@lhs*) (map (lambda (G413d@x) (G30b0@chi-expr G413d@x G4130@r G4131@mr)) G412f@init*) ((lambda (G413f@lhs G4140@rhs) ((lambda (G4143@t) (if (memv G4143@t '(defun)) ((lambda (G4145@rhs) (cons (list 'set! G413f@lhs G4145@rhs) (G4137@f (cdr G4139@lhs*) (cdr G413a@rhs*)))) (G30ba@chi-defun (cdr G4140@rhs) G4130@r G4131@mr)) (if (memv G4143@t '(expr)) ((lambda (G4147@rhs) (cons (list 'set! G413f@lhs G4147@rhs) (G4137@f (cdr G4139@lhs*) (cdr G413a@rhs*)))) (G30b0@chi-expr (cdr G4140@rhs) G4130@r G4131@mr)) (if (memv G4143@t '(top-expr)) ((lambda (G4149@e) (cons G4149@e (G4137@f (cdr G4139@lhs*) (cdr G413a@rhs*)))) (G30b0@chi-expr (cdr G4140@rhs) G4130@r G4131@mr)) (error 'expand-interaction '"invallid" G4140@rhs))))) (car G4140@rhs))) (car G4139@lhs*) (car G413a@rhs*)))))) G4137@f) G412d@lhs* G412e@rhs*))) (set! G30c0@chi-rhs* (lambda (G414b@rhs* G414c@r G414d@mr) ((letrec ((G4151@f (lambda (G4153@ls) (if (null? G4153@ls) '() ((lambda (G4155@a) (cons G4155@a (G4151@f (cdr G4153@ls)))) (G30bc@chi-rhs (car G4153@ls) G414c@r G414d@mr)))))) G4151@f) G414b@rhs*))) (set! G30c2@find-bound=? (lambda (G4157@x G4158@lhs* G4159@rhs*) (if (null? G4158@lhs*) '#f (if (G2e4f@bound-id=? G4157@x (car G4158@lhs*)) (car G4159@rhs*) (G30c2@find-bound=? G4157@x (cdr G4158@lhs*) (cdr G4159@rhs*)))))) (set! G30c4@find-dups (lambda (G415d@ls) ((letrec ((G415f@f (lambda (G4161@ls G4162@dups) (if (null? G4161@ls) G4162@dups ((lambda (G4165@t) (if G4165@t ((lambda (G4167@x) (G415f@f (cdr G4161@ls) (cons (list (car G4161@ls) G4167@x) G4162@dups))) G4165@t) (G415f@f (cdr G4161@ls) G4162@dups))) (G30c2@find-bound=? (car G4161@ls) (cdr G4161@ls) (cdr G4161@ls))))))) G415f@f) G415d@ls '()))) (set! G30c6@chi-internal (lambda (G4169@e* G416a@r G416b@mr) ((lambda (G416f@rib) (call-with-values (lambda () (G30eb@chi-body* (map (lambda (G4179@x) (G2e35@add-subst G416f@rib G4179@x)) (G2e47@syntax->list G4169@e*)) G416a@r G416b@mr '() '() '() '() '() G416f@rib '#f)) (lambda (G417b@G4171 G417c@G4172 G417d@G4173 G417e@G4174 G417f@G4175 G4180@G4176 G4181@G4177 G4182@G4178) ((lambda (G418b@_exp* G418c@kwd* G418d@mod** G418e@rhs* G418f@lex* G4190@mr G4191@r G4192@e*) (begin (if (null? G4192@e*) (G317f@syntax-violation '#f '"no expression in body" G4192@e*) (void)) ((lambda (G419b@init*) ((lambda (G419d@rhs*) ((lambda () (G2da7@G2d1b@build-letrec* '#f (reverse G418f@lex*) (reverse G419d@rhs*) (G2da4@G2d15@build-sequence '#f G419b@init*))))) (G30c0@chi-rhs* G418e@rhs* G4191@r G4190@mr))) (G30ac@chi-expr* (append (apply append (reverse G418d@mod**)) G4192@e*) G4191@r G4190@mr)))) G4182@G4178 G4181@G4177 G4180@G4176 G417f@G4175 G417e@G4174 G417d@G4173 G417c@G4172 G417b@G4171)))) (G2df2@make-empty-rib)))) (set! G30c8@parse-module (lambda (G419f@e) ((lambda (G41a1@t) ((lambda (G41a3@ls/false) (if G41a3@ls/false (apply (lambda (G41a5@export* G41a6@b*) (begin (if (not (for-all G2e49@id? G41a5@export*)) (G317f@syntax-violation '#f '"module exports must be identifiers" G419f@e) (void)) (values '#f (list->vector G41a5@export*) G41a6@b*))) G41a3@ls/false) ((lambda (G41a9@t) ((lambda (G41ab@ls/false) (if G41ab@ls/false (apply (lambda (G41ad@name G41ae@export* G41af@b*) (begin (if (not (G2e49@id? G41ad@name)) (G317f@syntax-violation '#f '"module name must be an identifier" G419f@e) (void)) (if (not (for-all G2e49@id? G41ae@export*)) (G317f@syntax-violation '#f '"module exports must be identifiers" G419f@e) (void)) (values G41ad@name (list->vector G41ae@export*) G41af@b*))) G41ab@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G41a9@t))) (G308c@syntax-dispatch G41a9@t '(_ any each-any . each-any)))) G41a1@t))) (G308c@syntax-dispatch G41a1@t '(_ each-any . each-any)))) G419f@e))) (set! G30ce@G30c9 (make-record-type-descriptor 'module-interface '#f 'G30cc '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30d0@G30cb '#f) (set! G30d2@G30ca (make-record-constructor-descriptor G30ce@G30c9 '#f G30d0@G30cb)) (set! G30d7@module-interface? (record-predicate G30ce@G30c9)) (set! G30d9@make-module-interface (record-constructor G30d2@G30ca)) (set! G30db@module-interface-first-mark (record-accessor G30ce@G30c9 '0)) (set! G30dd@module-interface-exp-id-vec (record-accessor G30ce@G30c9 '1)) (set! G30df@module-interface-exp-lab-vec (record-accessor G30ce@G30c9 '2)) (set! G30e1@set-module-interface-first-mark! (record-mutator G30ce@G30c9 '0)) (set! G30e3@set-module-interface-exp-id-vec! (record-mutator G30ce@G30c9 '1)) (set! G30e5@set-module-interface-exp-lab-vec! (record-mutator G30ce@G30c9 '2)) (set! G30e7@module-interface-exp-id* (lambda (G41b3@iface G41b4@id) ((lambda (G41b8@diff-marks) (begin (set! G41b8@diff-marks (lambda (G41bf@ls G41c0@x) (begin (if (null? G41bf@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G41c3@a) (if (eq? G41c3@a G41c0@x) '() (cons G41c3@a (G41b8@diff-marks (cdr G41bf@ls) G41c0@x)))) (car G41bf@ls))))) ((lambda (G41b9@diff G41ba@id-vec) (if (null? G41b9@diff) G41ba@id-vec (vector-map (lambda (G41bd@x) (G2e13@make-stx (G2e15@stx-expr G41bd@x) (append G41b9@diff (G2e17@stx-mark* G41bd@x)) '() '())) G41ba@id-vec))) (G41b8@diff-marks (G2e17@stx-mark* G41b4@id) (G30db@module-interface-first-mark G41b3@iface)) (G30dd@module-interface-exp-id-vec G41b3@iface)))) '#f))) (set! G30e9@chi-internal-module (lambda (G41c5@e G41c6@r G41c7@mr G41c8@lex* G41c9@rhs* G41ca@mod** G41cb@kwd*) (call-with-values (lambda () (G30c8@parse-module G41c5@e)) (lambda (G41d6@G41d3 G41d7@G41d4 G41d8@G41d5) ((lambda (G41dc@e* G41dd@exp-id* G41de@name) ((lambda (G41e2@rib) ((lambda (G41e4@e*) ((lambda () (call-with-values (lambda () (G30eb@chi-body* G41e4@e* G41c6@r G41c7@mr G41c8@lex* G41c9@rhs* G41ca@mod** G41cb@kwd* '() G41e2@rib '#f)) (lambda (G41ee@G41e6 G41ef@G41e7 G41f0@G41e8 G41f1@G41e9 G41f2@G41ea G41f3@G41eb G41f4@G41ec G41f5@G41ed) ((lambda (G41fe@_exp* G41ff@kwd* G4200@mod** G4201@rhs* G4202@lex* G4203@mr G4204@r G4205@e*) ((lambda (G420e@exp-lab* G420f@mod**) (if (not G41de@name) (values G4202@lex* G4201@rhs* G41dd@exp-id* G420e@exp-lab* G4204@r G4203@mr G420f@mod** G41ff@kwd*) ((lambda (G4212@lab G4213@iface) (values G4202@lex* G4201@rhs* (vector G41de@name) (vector G4212@lab) (cons (cons G4212@lab (cons '$module G4213@iface)) G4204@r) (cons (cons G4212@lab (cons '$module G4213@iface)) G4203@mr) G420f@mod** G41ff@kwd*)) (G2dc5@gen-label 'module) (G30d9@make-module-interface (car (G2e17@stx-mark* G41de@name)) (vector-map (lambda (G4216@x) (G2e13@make-stx (G2e15@stx-expr G4216@x) (G2e17@stx-mark* G4216@x) '() '())) G41dd@exp-id*) G420e@exp-lab*)))) (vector-map (lambda (G4218@x) ((lambda (G421a@t) (if G421a@t G421a@t (begin '#f (G317f@syntax-violation '#f '"cannot find module export" G4218@x)))) (G2e63@id->label (G2e13@make-stx (G2e4b@id->sym G4218@x) (G2e17@stx-mark* G4218@x) (list G41e2@rib) '())))) G41dd@exp-id*) (cons G4205@e* G4200@mod**))) G41f5@G41ed G41f4@G41ec G41f3@G41eb G41f2@G41ea G41f1@G41e9 G41f0@G41e8 G41ef@G41e7 G41ee@G41e6)))))) (map (lambda (G421c@x) (G2e35@add-subst G41e2@rib G421c@x)) (G2e47@syntax->list G41dc@e*)))) (G2df2@make-empty-rib))) G41d8@G41d5 G41d7@G41d4 G41d6@G41d3))))) (set! G30eb@chi-body* (lambda (G421e@e* G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4224@kwd* G4225@exp* G4226@rib G4227@top?) (if (null? G421e@e*) (values G421e@e* G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4224@kwd* G4225@exp*) ((lambda (G4232@e) (call-with-values (lambda () (G2e71@syntax-type G4232@e G421f@r)) (lambda (G4237@G4234 G4238@G4235 G4239@G4236) ((lambda (G423d@kwd G423e@value G423f@type) ((lambda (G4243@kwd*) ((lambda (G4245@t) (if (memv G4245@t '(define)) (call-with-values (lambda () (G3014@parse-define G4232@e)) (lambda (G4249@G4247 G424a@G4248) ((lambda (G424d@rhs G424e@id) (begin (if (G2e57@bound-id-member? G424e@id G4243@kwd*) (G317f@syntax-violation '#f '"cannot redefine keyword" G4232@e) (void)) (call-with-values (lambda () (G2dc9@gen-define-label+loc G424e@id G4226@rib)) (lambda (G4253@G4251 G4254@G4252) ((lambda (G4257@lex G4258@lab) (begin (G2df8@extend-rib! G4226@rib G424e@id G4258@lab) (G30eb@chi-body* (cdr G421e@e*) (G3022@add-lexical G4258@lab G4257@lex G421f@r) G4220@mr (cons G4257@lex G4221@lex*) (cons G424d@rhs G4222@rhs*) G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?))) G4254@G4252 G4253@G4251))))) G424a@G4248 G4249@G4247))) (if (memv G4245@t '(define-syntax)) (call-with-values (lambda () (G3016@parse-define-syntax G4232@e)) (lambda (G425d@G425b G425e@G425c) ((lambda (G4261@rhs G4262@id) (begin (if (G2e57@bound-id-member? G4262@id G4243@kwd*) (G317f@syntax-violation '#f '"cannot redefine keyword" G4232@e) (void)) ((lambda (G4265@lab G4266@expanded-rhs) (begin (G2df8@extend-rib! G4226@rib G4262@id G4265@lab) ((lambda (G4269@b) (G30eb@chi-body* (cdr G421e@e*) (cons (cons G4265@lab G4269@b) G421f@r) (cons (cons G4265@lab G4269@b) G4220@mr) G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?)) (G2e90@make-eval-transformer G4266@expanded-rhs)))) (G2dcb@gen-define-label G4262@id G4226@rib) (G30ed@expand-transformer G4261@rhs G4220@mr)))) G425e@G425c G425d@G425b))) (if (memv G4245@t '(let-syntax letrec-syntax)) ((lambda (G426b@t) ((lambda (G426d@ls/false) (if (if G426d@ls/false (begin '#f (apply (lambda (G426f@xlhs* G4270@xrhs* G4271@xbody*) (if (not (G2e53@valid-bound-ids? G426f@xlhs*)) (G317f@syntax-violation '#f '"invalid identifiers" G4232@e) (void))) G426d@ls/false)) '#f) (apply (lambda (G4275@xlhs* G4276@xrhs* G4277@xbody*) ((lambda (G427b@xlab*) ((lambda (G427d@xrib) ((lambda (G427f@xb*) ((lambda () (G30eb@chi-body* (append (map (lambda (G4281@x) (G2e35@add-subst G427d@xrib G4281@x)) G4277@xbody*) (cdr G421e@e*)) (append (map cons G427b@xlab* G427f@xb*) G421f@r) (append (map cons G427b@xlab* G427f@xb*) G4220@mr) G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?)))) (map (lambda (G4283@x) (G2e90@make-eval-transformer (G30ed@expand-transformer (if (eq? G423f@type 'let-syntax) G4283@x (G2e35@add-subst G427d@xrib G4283@x)) G4220@mr))) G4276@xrhs*))) (G2e02@make-full-rib G4275@xlhs* G427b@xlab*))) (map G2dc5@gen-label G4275@xlhs*))) G426d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G426b@t))) (G308c@syntax-dispatch G426b@t '(_ #(each (any any)) . each-any)))) G4232@e) (if (memv G4245@t '(begin)) ((lambda (G4285@t) ((lambda (G4287@ls/false) (if G4287@ls/false (apply (lambda (G4289@x*) (G30eb@chi-body* (append G4289@x* (cdr G421e@e*)) G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?)) G4287@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G4285@t))) (G308c@syntax-dispatch G4285@t '(_ . each-any)))) G4232@e) (if (memv G4245@t '(global-macro global-macro!)) (G30eb@chi-body* (cons (G2e35@add-subst G4226@rib (G30aa@chi-global-macro G423e@value G4232@e)) (cdr G421e@e*)) G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?) (if (memv G4245@t '(local-macro local-macro!)) (G30eb@chi-body* (cons (G2e35@add-subst G4226@rib (G30a8@chi-local-macro G423e@value G4232@e)) (cdr G421e@e*)) G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?) (if (memv G4245@t '(macro macro!)) (G30eb@chi-body* (cons (G2e35@add-subst G4226@rib (G30a6@chi-macro G423e@value G4232@e)) (cdr G421e@e*)) G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?) (if (memv G4245@t '(module)) (call-with-values (lambda () (G30e9@chi-internal-module G4232@e G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4243@kwd*)) (lambda (G4293@G428b G4294@G428c G4295@G428d G4296@G428e G4297@G428f G4298@G4290 G4299@G4291 G429a@G4292) ((lambda (G42a3@kwd* G42a4@mod** G42a5@mr G42a6@r G42a7@m-exp-lab* G42a8@m-exp-id* G42a9@rhs* G42aa@lex*) (begin (vector-for-each (lambda (G42b3@id G42b4@lab) (G2df8@extend-rib! G4226@rib G42b3@id G42b4@lab)) G42a8@m-exp-id* G42a7@m-exp-lab*) (G30eb@chi-body* (cdr G421e@e*) G42a6@r G42a5@mr G42aa@lex* G42a9@rhs* G42a4@mod** G42a3@kwd* G4225@exp* G4226@rib G4227@top?))) G429a@G4292 G4299@G4291 G4298@G4290 G4297@G428f G4296@G428e G4295@G428d G4294@G428c G4293@G428b))) (if (memv G4245@t '(library)) (begin (G315f@library-expander (G2e5f@stx->datum G4232@e)) (G30eb@chi-body* (cdr G421e@e*) G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?)) (if (memv G4245@t '(export)) ((lambda (G42b7@t) ((lambda (G42b9@ls/false) (if G42b9@ls/false (apply (lambda (G42bb@exp-decl*) (G30eb@chi-body* (cdr G421e@e*) G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* (append G42bb@exp-decl* G4225@exp*) G4226@rib G4227@top?)) G42b9@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G42b7@t))) (G308c@syntax-dispatch G42b7@t '(_ . each-any)))) G4232@e) (if (memv G4245@t '(import)) ((lambda () ((lambda (G42be@module-import? G42c0@module-import G42c2@library-import) (begin (set! G42be@module-import? (lambda (G430a@e) ((lambda (G430c@t) ((lambda (G430e@ls/false) (if (if G430e@ls/false (begin '#f (apply (lambda (G4310@id) (G2e49@id? G4310@id)) G430e@ls/false)) '#f) (apply (lambda (G4312@id) '#t) G430e@ls/false) ((lambda (G4314@t) ((lambda (G4316@ls/false) (if G4316@ls/false (apply (lambda (G4318@imp*) '#f) G4316@ls/false) ((lambda (G431a@t) ((lambda (G431c@ls/false) (if G431c@ls/false (apply (lambda () (G317f@syntax-violation '#f '"malformed import form" G430a@e)) G431c@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G431a@t))) (G308c@syntax-dispatch G431a@t '_))) G4314@t))) (G308c@syntax-dispatch G4314@t '(_ . each-any)))) G430c@t))) (G308c@syntax-dispatch G430c@t '(_ any)))) G430a@e))) (set! G42c0@module-import (lambda (G42eb@e G42ec@r) ((lambda (G42ef@t) ((lambda (G42f1@ls/false) (if (if G42f1@ls/false (begin '#f (apply (lambda (G42f3@id) (G2e49@id? G42f3@id)) G42f1@ls/false)) '#f) (apply (lambda (G42f5@id) (call-with-values (lambda () (G2e71@syntax-type G42f5@id G42ec@r)) (lambda (G42fa@G42f7 G42fb@G42f8 G42fc@G42f9) ((lambda (G4300@kwd G4301@value G4302@type) ((lambda (G4306@t) (if (memv G4306@t '($module)) ((lambda (G4308@iface) (values (G30e7@module-interface-exp-id* G4308@iface G42f5@id) (G30df@module-interface-exp-lab-vec G4308@iface))) G4301@value) (G317f@syntax-violation '#f '"invalid import" G42eb@e))) G4302@type)) G42fc@G42f9 G42fb@G42f8 G42fa@G42f7)))) G42f1@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G42ef@t))) (G308c@syntax-dispatch G42ef@t '(_ any)))) G42eb@e))) (set! G42c2@library-import (lambda (G42d1@e) ((lambda (G42d3@t) ((lambda (G42d5@ls/false) (if G42d5@ls/false (apply (lambda (G42d7@ctxt G42d8@imp*) (call-with-values (lambda () (G30f5@parse-import-spec* (G3185@syntax->datum G42d8@imp*))) (lambda (G42dd@G42db G42de@G42dc) ((lambda (G42e1@subst-labels G42e2@subst-names) (values (vector-map (lambda (G42e5@name) (G2e27@datum->stx G42d7@ctxt G42e5@name)) G42e2@subst-names) G42e1@subst-labels)) G42de@G42dc G42dd@G42db)))) G42d5@ls/false) ((lambda (G42e7@t) ((lambda (G42e9@ls/false) (if G42e9@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid import form" G42d1@e)) G42e9@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G42e7@t))) (G308c@syntax-dispatch G42e7@t '_))) G42d3@t))) (G308c@syntax-dispatch G42d3@t '(any . each-any)))) G42d1@e))) (begin (call-with-values (lambda () (if (G42be@module-import? G4232@e) (G42c0@module-import G4232@e G421f@r) (G42c2@library-import G4232@e))) (lambda (G42c5@G42c3 G42c6@G42c4) ((lambda (G42c9@lab* G42ca@id*) (vector-for-each (lambda (G42cd@id G42ce@lab) (G2df8@extend-rib! G4226@rib G42cd@id G42ce@lab)) G42ca@id* G42c9@lab*)) G42c6@G42c4 G42c5@G42c3))) (G30eb@chi-body* (cdr G421e@e*) G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?)))) '#f '#f '#f))) (if G4227@top? (G30eb@chi-body* (cdr G421e@e*) G421f@r G4220@mr (cons (G2dc1@gen-lexical 'dummy) G4221@lex*) (cons (cons 'top-expr G4232@e) G4222@rhs*) G4223@mod** G4243@kwd* G4225@exp* G4226@rib G4227@top?) (values G421e@e* G421f@r G4220@mr G4221@lex* G4222@rhs* G4223@mod** G4243@kwd* G4225@exp*)))))))))))))) G423f@type)) (if (G2e49@id? G423d@kwd) (cons G423d@kwd G4224@kwd*) G4224@kwd*))) G4239@G4236 G4238@G4235 G4237@G4234)))) (car G421e@e*))))) (set! G30ed@expand-transformer (lambda (G431e@expr G431f@r) ((lambda (G4322@rtc) ((lambda (G4324@expanded-rhs) (begin (for-each ((lambda (G4326@mark-visit) (lambda (G4328@x) (begin (G2c3e@G2ad3@invoke-library G4328@x) (G4326@mark-visit G4328@x)))) (G30fd@vis-collector)) (G4322@rtc)) G4324@expanded-rhs)) ((lambda (G432e@G432a@inv-collector G432f@G432b@vis-collector G4330@G432c@inv-collector G4331@G432d@vis-collector) ((lambda (G4336@swap) (dynamic-wind G4336@swap (lambda () (G30b0@chi-expr G431e@expr G431f@r G431f@r)) G4336@swap)) (lambda () (begin ((lambda (G4338@t) (begin (G432e@G432a@inv-collector G4330@G432c@inv-collector) (set! G4330@G432c@inv-collector G4338@t))) (G432e@G432a@inv-collector)) ((lambda (G433a@t) (begin (G432f@G432b@vis-collector G4331@G432d@vis-collector) (set! G4331@G432d@vis-collector G433a@t))) (G432f@G432b@vis-collector)))))) G30fb@inv-collector G30fd@vis-collector G4322@rtc (lambda (G433c@x) (values))))) (G30f9@make-collector)))) (set! G30ef@parse-exports (lambda (G433e@exp*) ((letrec ((G4340@f (lambda (G4342@exp* G4343@int* G4344@ext*) (if (null? G4342@exp*) (begin (if (not (G2e53@valid-bound-ids? G4344@ext*)) (G317f@syntax-violation 'export '"invalid exports" (G30c4@find-dups G4344@ext*)) (void)) (values (map G3185@syntax->datum G4344@ext*) G4343@int*)) ((lambda (G4348@t) ((lambda (G434a@ls/false) (if G434a@ls/false (apply (lambda (G434c@rename G434d@i* G434e@e*) (begin (if (not (if (eq? (G3185@syntax->datum G434c@rename) 'rename) (if (for-all G2e49@id? G434d@i*) (begin '#f (for-all G2e49@id? G434e@e*)) '#f) '#f)) (G317f@syntax-violation 'export '"invalid export specifier" (car G4342@exp*)) (void)) (G4340@f (cdr G4342@exp*) (append G434d@i* G4343@int*) (append G434e@e* G4344@ext*)))) G434a@ls/false) ((lambda (G4352@t) ((lambda (G4354@ls/false) (if G4354@ls/false (apply (lambda (G4356@ie) (begin (if (not (G2e49@id? G4356@ie)) (G317f@syntax-violation 'export '"invalid export" G4356@ie) (void)) (G4340@f (cdr G4342@exp*) (cons G4356@ie G4343@int*) (cons G4356@ie G4344@ext*)))) G4354@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G4352@t))) (G308c@syntax-dispatch G4352@t 'any))) G4348@t))) (G308c@syntax-dispatch G4348@t '(any . #(each (any any)))))) (car G4342@exp*)))))) G4340@f) G433e@exp* '() '()))) (set! G30f1@parse-library-name (lambda (G4358@spec) ((lambda (G435b@parse) (begin (set! G435b@parse (lambda (G4366@x) ((lambda (G4368@t) ((lambda (G436a@ls/false) (if (if G436a@ls/false (begin '#f (apply (lambda (G436c@v*) (for-all (lambda (G436e@x) ((lambda (G4370@x) (if (integer? G4370@x) (begin '#f (exact? G4370@x)) '#f)) (G3185@syntax->datum G436e@x))) G436c@v*)) G436a@ls/false)) '#f) (apply (lambda (G4372@v*) (values '() (map G3185@syntax->datum G4372@v*))) G436a@ls/false) ((lambda (G4374@t) ((lambda (G4376@ls/false) (if (if G4376@ls/false (begin '#f (apply (lambda (G4378@x G4379@rest) (symbol? (G3185@syntax->datum G4378@x))) G4376@ls/false)) '#f) (apply (lambda (G437c@x G437d@rest) (call-with-values (lambda () (G435b@parse G437d@rest)) (lambda (G4382@G4380 G4383@G4381) ((lambda (G4386@v* G4387@x*) (values (cons (G3185@syntax->datum G437c@x) G4387@x*) G4386@v*)) G4383@G4381 G4382@G4380)))) G4376@ls/false) ((lambda (G438a@t) ((lambda (G438c@ls/false) (if G438c@ls/false (apply (lambda () (values '() '())) G438c@ls/false) ((lambda (G438e@t) ((lambda (G4390@ls/false) (if G4390@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid library name" G4358@spec)) G4390@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G438e@t))) (G308c@syntax-dispatch G438e@t '_))) G438a@t))) (G308c@syntax-dispatch G438a@t '()))) G4374@t))) (G308c@syntax-dispatch G4374@t '(any . any)))) G4368@t))) (G308c@syntax-dispatch G4368@t '(each-any)))) G4366@x))) (call-with-values (lambda () (G435b@parse G4358@spec)) (lambda (G435e@G435c G435f@G435d) ((lambda (G4362@ver* G4363@name*) (begin (if (null? G4363@name*) (G317f@syntax-violation '#f '"empty library name" G4358@spec) (void)) (values G4363@name* G4362@ver*))) G435f@G435d G435e@G435c))))) '#f))) (set! G30f3@parse-library (lambda (G4392@e) ((lambda (G4394@t) ((lambda (G4396@ls/false) (if (if G4396@ls/false (begin '#f (apply (lambda (G4398@library G4399@name* G439a@export G439b@exp* G439c@import G439d@imp* G439e@b*) (if (eq? (G3185@syntax->datum G439a@export) 'export) (if (eq? (G3185@syntax->datum G439c@import) 'import) (begin '#f (eq? (G3185@syntax->datum G4398@library) 'library)) '#f) '#f)) G4396@ls/false)) '#f) (apply (lambda (G43a6@library G43a7@name* G43a8@export G43a9@exp* G43aa@import G43ab@imp* G43ac@b*) (values G43a7@name* G43a9@exp* G43ab@imp* G43ac@b*)) G4396@ls/false) ((lambda (G43b4@t) ((lambda (G43b6@ls/false) (if G43b6@ls/false (apply (lambda () (G317f@syntax-violation '#f '"malformed library" G4392@e)) G43b6@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G43b4@t))) (G308c@syntax-dispatch G43b4@t '_))) G4394@t))) (G308c@syntax-dispatch G4394@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4392@e))) (set! G30f5@parse-import-spec* ((lambda () ((lambda (G43b9@idsyn? G43bb@dup-error G43bd@merge-substs G43bf@exclude* G43c1@find* G43c3@rem* G43c5@remove-dups G43c7@parse-library-name G43c9@import-library G43cb@get-import G43cd@add-imports!) (begin (set! G43b9@idsyn? (lambda (G45b8@x) (symbol? (G3185@syntax->datum G45b8@x)))) (set! G43bb@dup-error (lambda (G45b6@name) (G317f@syntax-violation 'import '"two imports with different bindings" G45b6@name))) (set! G43bd@merge-substs (lambda (G45a4@s G45a5@subst) ((lambda (G45a9@insert-to-subst) (begin (set! G45a9@insert-to-subst (lambda (G45aa@a G45ab@subst) ((lambda (G45ae@name G45af@label) ((lambda (G45b2@t) (if G45b2@t ((lambda (G45b4@x) (if (eq? (cdr G45b4@x) G45af@label) G45ab@subst (G43bb@dup-error G45ae@name))) G45b2@t) (cons G45aa@a G45ab@subst))) (assq G45ae@name G45ab@subst))) (car G45aa@a) (cdr G45aa@a)))) (if (null? G45a4@s) G45a5@subst (G45a9@insert-to-subst (car G45a4@s) (G43bd@merge-substs (cdr G45a4@s) G45a5@subst))))) '#f))) (set! G43bf@exclude* (lambda (G457a@sym* G457b@subst) ((lambda (G457f@exclude) (begin (set! G457f@exclude (lambda (G4594@sym G4595@subst) (if (null? G4595@subst) (G317f@syntax-violation 'import '"cannot rename unbound identifier" G4594@sym) (if (eq? G4594@sym (caar G4595@subst)) (values (cdar G4595@subst) (cdr G4595@subst)) ((lambda (G4598@a) (call-with-values (lambda () (G457f@exclude G4594@sym (cdr G4595@subst))) (lambda (G459c@G459a G459d@G459b) ((lambda (G45a0@subst G45a1@old) (values G45a1@old (cons G4598@a G45a0@subst))) G459d@G459b G459c@G459a)))) (car G4595@subst)))))) (if (null? G457a@sym*) (values '() G457b@subst) (call-with-values (lambda () (G457f@exclude (car G457a@sym*) G457b@subst)) (lambda (G4582@G4580 G4583@G4581) ((lambda (G4586@subst G4587@old) (call-with-values (lambda () (G43bf@exclude* (cdr G457a@sym*) G4586@subst)) (lambda (G458c@G458a G458d@G458b) ((lambda (G4590@subst G4591@old*) (values (cons G4587@old G4591@old*) G4590@subst)) G458d@G458b G458c@G458a)))) G4583@G4581 G4582@G4580)))))) '#f))) (set! G43c1@find* (lambda (G4572@sym* G4573@subst) (map (lambda (G4576@x) ((lambda (G4578@t) (if G4578@t (cdr G4578@t) (G317f@syntax-violation 'import '"cannot find identifier" G4576@x))) (assq G4576@x G4573@subst))) G4572@sym*))) (set! G43c3@rem* (lambda (G456a@sym* G456b@subst) ((letrec ((G456e@f (lambda (G4570@subst) (if (null? G4570@subst) '() (if (memq (caar G4570@subst) G456a@sym*) (G456e@f (cdr G4570@subst)) (cons (car G4570@subst) (G456e@f (cdr G4570@subst)))))))) G456e@f) G456b@subst))) (set! G43c5@remove-dups (lambda (G4568@ls) (if (null? G4568@ls) '() (if (memq (car G4568@ls) (cdr G4568@ls)) (G43c5@remove-dups (cdr G4568@ls)) (cons (car G4568@ls) (G43c5@remove-dups (cdr G4568@ls))))))) (set! G43c7@parse-library-name (lambda (G4482@spec) ((lambda (G4485@subversion? G4487@subversion-pred G4489@version-pred) (begin (set! G4485@subversion? (lambda (G4564@x) ((lambda (G4566@x) (if (integer? G4566@x) (if (exact? G4566@x) (begin '#f (>= G4566@x '0)) '#f) '#f)) (G3185@syntax->datum G4564@x)))) (set! G4487@subversion-pred (lambda (G4504@x*) ((lambda (G4506@t) ((lambda (G4508@ls/false) (if (if G4508@ls/false (begin '#f (apply (lambda (G450a@n) (G4485@subversion? G450a@n)) G4508@ls/false)) '#f) (apply (lambda (G450c@n) (lambda (G450e@x) (= G450e@x (G3185@syntax->datum G450c@n)))) G4508@ls/false) ((lambda (G4510@t) ((lambda (G4512@ls/false) (if (if G4512@ls/false (begin '#f (apply (lambda (G4514@p? G4515@sub*) (eq? (G3185@syntax->datum G4514@p?) 'and)) G4512@ls/false)) '#f) (apply (lambda (G4518@p? G4519@sub*) ((lambda (G451c@p*) (lambda (G451e@x) (for-all (lambda (G4520@p) (G4520@p G451e@x)) G451c@p*))) (map G4487@subversion-pred G4519@sub*))) G4512@ls/false) ((lambda (G4522@t) ((lambda (G4524@ls/false) (if (if G4524@ls/false (begin '#f (apply (lambda (G4526@p? G4527@sub*) (eq? (G3185@syntax->datum G4526@p?) 'or)) G4524@ls/false)) '#f) (apply (lambda (G452a@p? G452b@sub*) ((lambda (G452e@p*) (lambda (G4530@x) (exists (lambda (G4532@p) (G4532@p G4530@x)) G452e@p*))) (map G4487@subversion-pred G452b@sub*))) G4524@ls/false) ((lambda (G4534@t) ((lambda (G4536@ls/false) (if (if G4536@ls/false (begin '#f (apply (lambda (G4538@p? G4539@sub) (eq? (G3185@syntax->datum G4538@p?) 'not)) G4536@ls/false)) '#f) (apply (lambda (G453c@p? G453d@sub) ((lambda (G4540@p) (lambda (G4542@x) (not (G4540@p G4542@x)))) (G4487@subversion-pred G453d@sub))) G4536@ls/false) ((lambda (G4544@t) ((lambda (G4546@ls/false) (if (if G4546@ls/false (begin '#f (apply (lambda (G4548@p? G4549@n) (if (eq? (G3185@syntax->datum G4548@p?) '<=) (begin '#f (G4485@subversion? G4549@n)) '#f)) G4546@ls/false)) '#f) (apply (lambda (G454c@p? G454d@n) (lambda (G4550@x) (<= G4550@x (G3185@syntax->datum G454d@n)))) G4546@ls/false) ((lambda (G4552@t) ((lambda (G4554@ls/false) (if (if G4554@ls/false (begin '#f (apply (lambda (G4556@p? G4557@n) (if (eq? (G3185@syntax->datum G4556@p?) '>=) (begin '#f (G4485@subversion? G4557@n)) '#f)) G4554@ls/false)) '#f) (apply (lambda (G455a@p? G455b@n) (lambda (G455e@x) (>= G455e@x (G3185@syntax->datum G455b@n)))) G4554@ls/false) ((lambda (G4560@t) ((lambda (G4562@ls/false) (if G4562@ls/false (apply (lambda () (G317f@syntax-violation 'import '"invalid sub-version spec" G4482@spec G4504@x*)) G4562@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G4560@t))) (G308c@syntax-dispatch G4560@t '_))) G4552@t))) (G308c@syntax-dispatch G4552@t '(any any)))) G4544@t))) (G308c@syntax-dispatch G4544@t '(any any)))) G4534@t))) (G308c@syntax-dispatch G4534@t '(any any)))) G4522@t))) (G308c@syntax-dispatch G4522@t '(any . each-any)))) G4510@t))) (G308c@syntax-dispatch G4510@t '(any . each-any)))) G4506@t))) (G308c@syntax-dispatch G4506@t 'any))) G4504@x*))) (set! G4489@version-pred (lambda (G44b4@x*) ((lambda (G44b6@t) ((lambda (G44b8@ls/false) (if G44b8@ls/false (apply (lambda () (lambda (G44ba@x) '#t)) G44b8@ls/false) ((lambda (G44bc@t) ((lambda (G44be@ls/false) (if (if G44be@ls/false (begin '#f (apply (lambda (G44c0@c G44c1@ver*) (eq? (G3185@syntax->datum G44c0@c) 'and)) G44be@ls/false)) '#f) (apply (lambda (G44c4@c G44c5@ver*) ((lambda (G44c8@p*) (lambda (G44ca@x) (for-all (lambda (G44cc@p) (G44cc@p G44ca@x)) G44c8@p*))) (map G4489@version-pred G44c5@ver*))) G44be@ls/false) ((lambda (G44ce@t) ((lambda (G44d0@ls/false) (if (if G44d0@ls/false (begin '#f (apply (lambda (G44d2@c G44d3@ver*) (eq? (G3185@syntax->datum G44d2@c) 'or)) G44d0@ls/false)) '#f) (apply (lambda (G44d6@c G44d7@ver*) ((lambda (G44da@p*) (lambda (G44dc@x) (exists (lambda (G44de@p) (G44de@p G44dc@x)) G44da@p*))) (map G4489@version-pred G44d7@ver*))) G44d0@ls/false) ((lambda (G44e0@t) ((lambda (G44e2@ls/false) (if (if G44e2@ls/false (begin '#f (apply (lambda (G44e4@c G44e5@ver) (eq? (G3185@syntax->datum G44e4@c) 'not)) G44e2@ls/false)) '#f) (apply (lambda (G44e8@c G44e9@ver) ((lambda (G44ec@p) (lambda (G44ee@x) (not (G44ec@p G44ee@x)))) (G4489@version-pred G44e9@ver))) G44e2@ls/false) ((lambda (G44f0@t) ((lambda (G44f2@ls/false) (if G44f2@ls/false (apply (lambda (G44f4@sub*) ((lambda (G44f6@p*) (lambda (G44f8@x) ((letrec ((G44fa@f (lambda (G44fc@p* G44fd@x) (if (null? G44fc@p*) '#t (if (null? G44fd@x) '#f (if ((car G44fc@p*) (car G44fd@x)) (begin '#f (G44fa@f (cdr G44fc@p*) (cdr G44fd@x))) '#f)))))) G44fa@f) G44f6@p* G44f8@x))) (map G4487@subversion-pred G44f4@sub*))) G44f2@ls/false) ((lambda (G4500@t) ((lambda (G4502@ls/false) (if G4502@ls/false (apply (lambda () (G317f@syntax-violation 'import '"invalid version spec" G4482@spec G44b4@x*)) G4502@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G4500@t))) (G308c@syntax-dispatch G4500@t '_))) G44f0@t))) (G308c@syntax-dispatch G44f0@t 'each-any))) G44e0@t))) (G308c@syntax-dispatch G44e0@t '(any any)))) G44ce@t))) (G308c@syntax-dispatch G44ce@t '(any . each-any)))) G44bc@t))) (G308c@syntax-dispatch G44bc@t '(any . each-any)))) G44b6@t))) (G308c@syntax-dispatch G44b6@t '()))) G44b4@x*))) ((letrec ((G448a@f (lambda (G448c@x) ((lambda (G448e@t) ((lambda (G4490@ls/false) (if G4490@ls/false (apply (lambda (G4492@version-spec*) (values '() (G4489@version-pred G4492@version-spec*))) G4490@ls/false) ((lambda (G4494@t) ((lambda (G4496@ls/false) (if (if G4496@ls/false (begin '#f (apply (lambda (G4498@x G4499@x*) (G43b9@idsyn? G4498@x)) G4496@ls/false)) '#f) (apply (lambda (G449c@x G449d@x*) (call-with-values (lambda () (G448a@f G449d@x*)) (lambda (G44a2@G44a0 G44a3@G44a1) ((lambda (G44a6@pred G44a7@name) (values (cons (G3185@syntax->datum G449c@x) G44a7@name) G44a6@pred)) G44a3@G44a1 G44a2@G44a0)))) G4496@ls/false) ((lambda (G44aa@t) ((lambda (G44ac@ls/false) (if G44ac@ls/false (apply (lambda () (values '() (lambda (G44ae@x) '#t))) G44ac@ls/false) ((lambda (G44b0@t) ((lambda (G44b2@ls/false) (if G44b2@ls/false (apply (lambda () (G317f@syntax-violation '#f '"invalid import spec" G4482@spec)) G44b2@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G44b0@t))) (G308c@syntax-dispatch G44b0@t '_))) G44aa@t))) (G308c@syntax-dispatch G44aa@t '()))) G4494@t))) (G308c@syntax-dispatch G4494@t '(any . any)))) G448e@t))) (G308c@syntax-dispatch G448e@t '(each-any)))) G448c@x)))) G448a@f) G4482@spec))) '#f '#f '#f))) (set! G43c9@import-library (lambda (G4474@spec*) (call-with-values (lambda () (G43c7@parse-library-name G4474@spec*)) (lambda (G4478@G4476 G4479@G4477) ((lambda (G447c@pred G447d@name) (begin (if (null? G447d@name) (G317f@syntax-violation 'import '"empty library name" G4474@spec*) (void)) ((lambda (G4480@lib) (begin (if (not G4480@lib) (G317f@syntax-violation 'import '"cannot find library with required name" G447d@name) (void)) (if (not (G447c@pred (G2c0f@G2a75@library-version G4480@lib))) (G317f@syntax-violation 'import '"library does not satisfy version specification" G4474@spec* G4480@lib) (void)) ((G30ff@imp-collector) G4480@lib) (G2c13@G2a7d@library-subst G4480@lib))) (G2c37@G2ac5@find-library-by-name G447d@name)))) G4479@G4477 G4478@G4476))))) (set! G43cb@get-import (lambda (G43e6@spec) ((lambda (G43e8@t) ((lambda (G43ea@ls/false) (if (if G43ea@ls/false (begin '#f (apply (lambda (G43ec@x G43ed@x*) (not (memq (G3185@syntax->datum G43ec@x) '(for rename except only prefix library)))) G43ea@ls/false)) '#f) (apply (lambda (G43f0@x G43f1@x*) (G43c9@import-library (cons G43f0@x G43f1@x*))) G43ea@ls/false) ((lambda (G43f4@t) ((lambda (G43f6@ls/false) (if (if G43f6@ls/false (begin '#f (apply (lambda (G43f8@rename G43f9@isp G43fa@old* G43fb@new*) (if (eq? (G3185@syntax->datum G43f8@rename) 'rename) (if (for-all G43b9@idsyn? G43fa@old*) (begin '#f (for-all G43b9@idsyn? G43fb@new*)) '#f) '#f)) G43f6@ls/false)) '#f) (apply (lambda (G4400@rename G4401@isp G4402@old* G4403@new*) ((lambda (G4408@subst G4409@old* G440a@new*) ((lambda (G440e@old-label*) ((lambda (G4410@subst) (G43bd@merge-substs (map cons G440a@new* G440e@old-label*) G4410@subst)) (G43c3@rem* G4409@old* G4408@subst))) (G43c1@find* G4409@old* G4408@subst))) (G43cb@get-import G4401@isp) (map G3185@syntax->datum G4402@old*) (map G3185@syntax->datum G4403@new*))) G43f6@ls/false) ((lambda (G4412@t) ((lambda (G4414@ls/false) (if (if G4414@ls/false (begin '#f (apply (lambda (G4416@except G4417@isp G4418@sym*) (if (eq? (G3185@syntax->datum G4416@except) 'except) (begin '#f (for-all G43b9@idsyn? G4418@sym*)) '#f)) G4414@ls/false)) '#f) (apply (lambda (G441c@except G441d@isp G441e@sym*) ((lambda (G4422@subst) (G43c3@rem* (map G3185@syntax->datum G441e@sym*) G4422@subst)) (G43cb@get-import G441d@isp))) G4414@ls/false) ((lambda (G4424@t) ((lambda (G4426@ls/false) (if (if G4426@ls/false (begin '#f (apply (lambda (G4428@only G4429@isp G442a@sym*) (if (eq? (G3185@syntax->datum G4428@only) 'only) (begin '#f (for-all G43b9@idsyn? G442a@sym*)) '#f)) G4426@ls/false)) '#f) (apply (lambda (G442e@only G442f@isp G4430@sym*) ((lambda (G4434@subst G4435@sym*) ((lambda (G4438@sym*) ((lambda (G443a@lab*) (map cons G4438@sym* G443a@lab*)) (G43c1@find* G4438@sym* G4434@subst))) (G43c5@remove-dups G4435@sym*))) (G43cb@get-import G442f@isp) (map G3185@syntax->datum G4430@sym*))) G4426@ls/false) ((lambda (G443c@t) ((lambda (G443e@ls/false) (if (if G443e@ls/false (begin '#f (apply (lambda (G4440@prefix G4441@isp G4442@p) (if (eq? (G3185@syntax->datum G4440@prefix) 'prefix) (begin '#f (G43b9@idsyn? G4442@p)) '#f)) G443e@ls/false)) '#f) (apply (lambda (G4446@prefix G4447@isp G4448@p) ((lambda (G444c@subst G444d@prefix) (map (lambda (G4450@x) (cons (string->symbol (string-append G444d@prefix (symbol->string (car G4450@x)))) (cdr G4450@x))) G444c@subst)) (G43cb@get-import G4447@isp) (symbol->string (G3185@syntax->datum G4448@p)))) G443e@ls/false) ((lambda (G4452@t) ((lambda (G4454@ls/false) (if (if G4454@ls/false (begin '#f (apply (lambda (G4456@library G4457@spec*) (eq? (G3185@syntax->datum G4456@library) 'library)) G4454@ls/false)) '#f) (apply (lambda (G445a@library G445b@spec*) (G43c9@import-library G445b@spec*)) G4454@ls/false) ((lambda (G445e@t) ((lambda (G4460@ls/false) (if (if G4460@ls/false (begin '#f (apply (lambda (G4462@for G4463@isp G4464@rest) (eq? (G3185@syntax->datum G4462@for) 'for)) G4460@ls/false)) '#f) (apply (lambda (G4468@for G4469@isp G446a@rest) (G43cb@get-import G4469@isp)) G4460@ls/false) ((lambda (G446e@t) ((lambda (G4470@ls/false) (if G4470@ls/false (apply (lambda (G4472@spec) (G317f@syntax-violation 'import '"invalid import spec" G4472@spec)) G4470@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G446e@t))) (G308c@syntax-dispatch G446e@t 'any))) G445e@t))) (G308c@syntax-dispatch G445e@t '(any any . any)))) G4452@t))) (G308c@syntax-dispatch G4452@t '(any each-any)))) G443c@t))) (G308c@syntax-dispatch G443c@t '(any any any)))) G4424@t))) (G308c@syntax-dispatch G4424@t '(any any . each-any)))) G4412@t))) (G308c@syntax-dispatch G4412@t '(any any . each-any)))) G43f4@t))) (G308c@syntax-dispatch G43f4@t '(any any . #(each (any any)))))) G43e8@t))) (G308c@syntax-dispatch G43e8@t '(any . each-any)))) G43e6@spec))) (set! G43cd@add-imports! (lambda (G43d6@imp G43d7@h) ((lambda (G43da@subst) (for-each (lambda (G43dc@x) ((lambda (G43de@name G43df@label) ((lambda (G43e2@t) (if G43e2@t ((lambda (G43e4@l) (if (not (eq? G43e4@l G43df@label)) (G43bb@dup-error G43de@name) (void))) G43e2@t) (hashtable-set! G43d7@h G43de@name G43df@label))) (hashtable-ref G43d7@h G43de@name '#f))) (car G43dc@x) (cdr G43dc@x))) G43da@subst)) (G43cb@get-import G43d6@imp)))) (lambda (G43ce@imp*) ((letrec ((G43d0@f (lambda (G43d2@imp* G43d3@h) (if (null? G43d2@imp*) (hashtable-entries G43d3@h) (begin (G43cd@add-imports! (car G43d2@imp*) G43d3@h) (G43d0@f (cdr G43d2@imp*) G43d3@h)))))) G43d0@f) G43ce@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30f7@make-top-rib (lambda (G45ba@names G45bb@labels) ((lambda (G45be@rib) (begin (vector-for-each (lambda (G45c0@name G45c1@label) (begin (if (not (symbol? G45c0@name)) (error 'make-top-rib '"BUG: not a symbol" G45c0@name) (void)) (G2dfa@extend-rib/nc! G45be@rib (G2e13@make-stx G45c0@name G2dbd@top-mark* '() '()) G45c1@label))) G45ba@names G45bb@labels) G45be@rib)) (G2df4@make-cache-rib)))) (set! G30f9@make-collector (lambda () ((lambda (G45c4@ls) (lambda G45c8 ((lambda (G45c9) (if (= G45c9 '0) (apply (lambda () G45c4@ls) G45c8) (if (= G45c9 '1) (apply (lambda (G45c6@x) (set! G45c4@ls (G2db6@set-cons G45c6@x G45c4@ls))) G45c8) (error 'apply '"invalid arg count")))) (length G45c8)))) '()))) (set! G30fb@inv-collector (G299b@G28a6@make-parameter (lambda G45ca@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G45cc@x) (begin (if (not (procedure? G45cc@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G45cc@x) (void)) G45cc@x)))) (set! G30fd@vis-collector (G299b@G28a6@make-parameter (lambda G45ce@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45d0@x) (begin (if (not (procedure? G45d0@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45d0@x) (void)) G45d0@x)))) (set! G30ff@imp-collector (G299b@G28a6@make-parameter (lambda G45d2@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45d4@x) (begin (if (not (procedure? G45d4@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45d4@x) (void)) G45d4@x)))) (set! G3101@chi-library-internal (lambda (G45d6@e* G45d7@rib G45d8@top?) (call-with-values (lambda () (G30eb@chi-body* G45d6@e* '() '() '() '() '() '() '() G45d7@rib G45d8@top?)) (lambda (G45e4@G45dc G45e5@G45dd G45e6@G45de G45e7@G45df G45e8@G45e0 G45e9@G45e1 G45ea@G45e2 G45eb@G45e3) ((lambda (G45f4@exp* G45f5@_kwd* G45f6@mod** G45f7@rhs* G45f8@lex* G45f9@mr G45fa@r G45fb@e*) (values (append (apply append (reverse G45f6@mod**)) G45fb@e*) G45fa@r G45f9@mr (reverse G45f8@lex*) (reverse G45f7@rhs*) G45f4@exp*)) G45eb@G45e3 G45ea@G45e2 G45e9@G45e1 G45e8@G45e0 G45e7@G45df G45e6@G45de G45e5@G45dd G45e4@G45dc))))) (set! G3103@chi-interaction-expr (lambda (G4604@e G4605@rib G4606@r) (call-with-values (lambda () (G30eb@chi-body* (list G4604@e) G4606@r G4606@r '() '() '() '() '() G4605@rib '#t)) (lambda (G4612@G460a G4613@G460b G4614@G460c G4615@G460d G4616@G460e G4617@G460f G4618@G4610 G4619@G4611) ((lambda (G4622@_exp* G4623@_kwd* G4624@mod** G4625@rhs* G4626@lex* G4627@mr G4628@r G4629@e*) ((lambda (G4632@e*) ((lambda (G4634@e) (values G4634@e G4628@r)) (if (null? G4632@e*) (G2da5@G2d17@build-void) (if (null? (cdr G4632@e*)) (car G4632@e*) (G2da4@G2d15@build-sequence '#f G4632@e*))))) (G30be@expand-interaction-rhs*/init* (reverse G4626@lex*) (reverse G4625@rhs*) (append (apply append (reverse G4624@mod**)) G4629@e*) G4628@r G4627@mr))) G4619@G4611 G4618@G4610 G4617@G460f G4616@G460e G4615@G460d G4614@G460c G4613@G460b G4612@G460a))))) (set! G3105@library-body-expander (lambda (G4636@name G4637@main-exp* G4638@imp* G4639@b* G463a@top?) ((lambda (G4641@itc) (begin (set! G4641@itc (G30f9@make-collector)) ((lambda (G4646@G4642@imp-collector G4647@G4643@top-level-context G4648@G4644@imp-collector G4649@G4645@top-level-context) ((lambda (G464e@swap) (dynamic-wind G464e@swap (lambda () (call-with-values (lambda () (G30f5@parse-import-spec* G4638@imp*)) (lambda (G4652@G4650 G4653@G4651) ((lambda (G4656@subst-labels G4657@subst-names) ((lambda (G465a@rib) ((lambda (G465d@wrap) (begin (set! G465d@wrap (lambda (G46c9@x) (G2e13@make-stx G46c9@x G2dbd@top-mark* (list G465a@rib) '()))) ((lambda (G465e@b* G465f@main-exp* G4660@rtc G4661@vtc) ((lambda (G466a@G4666@inv-collector G466b@G4667@vis-collector G466c@G4668@inv-collector G466d@G4669@vis-collector) ((lambda (G4672@swap) (dynamic-wind G4672@swap (lambda () (call-with-values (lambda () (G3101@chi-library-internal G465e@b* G465a@rib G463a@top?)) (lambda (G467a@G4674 G467b@G4675 G467c@G4676 G467d@G4677 G467e@G4678 G467f@G4679) ((lambda (G4686@internal-exp* G4687@rhs* G4688@lex* G4689@mr G468a@r G468b@init*) (call-with-values (lambda () (G30ef@parse-exports (append G465f@main-exp* G4686@internal-exp*))) (lambda (G4694@G4692 G4695@G4693) ((lambda (G4698@exp-id* G4699@exp-name*) (begin (G2dfe@seal-rib! G465a@rib) ((lambda (G469c@init*) ((lambda (G469e@rhs*) ((lambda () (begin (G2e00@unseal-rib! G465a@rib) ((lambda (G46a0@loc* G46a1@export-subst) ((lambda (G46a5@errstr) (begin (set! G46a5@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3169@make-export-env/macros G4688@lex* G46a0@loc* G468a@r)) (lambda (G46a9@G46a6 G46aa@G46a7 G46ab@G46a8) ((lambda (G46af@macro* G46b0@global* G46b1@export-env) (begin (for-each (lambda (G46b5@s) ((lambda (G46b7@name G46b8@label) ((lambda (G46bb@p) (if G46bb@p ((lambda (G46bd@b) ((lambda (G46bf@type) (if (eq? G46bf@type 'mutable) (G317f@syntax-violation 'export G46a5@errstr G46b7@name) (void))) (car G46bd@b))) (cdr G46bb@p)) (void))) (assq G46b8@label G46b1@export-env))) (car G46b5@s) (cdr G46b5@s))) G46a1@export-subst) ((lambda (G46c1@invoke-body G46c2@invoke-definitions) (values (G4641@itc) (G4660@rtc) (G4661@vtc) (G2da4@G2d15@build-sequence '#f (append G46c2@invoke-definitions (list G46c1@invoke-body))) G46af@macro* G46a1@export-subst G46b1@export-env)) (G2da7@G2d1b@build-letrec* '#f G4688@lex* G469e@rhs* (G3165@build-exports G46b0@global* G469c@init*)) (map G2da0@G2c45@build-global-define (map cdr G46b0@global*))))) G46ab@G46a8 G46aa@G46a7 G46a9@G46a6))))) '#f)) (map G2dc3@gen-global G4688@lex*) (G3167@make-export-subst G4699@exp-name* G4698@exp-id*)))))) (G30c0@chi-rhs* G4687@rhs* G468a@r G4689@mr))) (G30ac@chi-expr* G468b@init* G468a@r G4689@mr)))) G4695@G4693 G4694@G4692)))) G467f@G4679 G467e@G4678 G467d@G4677 G467c@G4676 G467b@G4675 G467a@G4674)))) G4672@swap)) (lambda () (begin ((lambda (G46c5@t) (begin (G466a@G4666@inv-collector G466c@G4668@inv-collector) (set! G466c@G4668@inv-collector G46c5@t))) (G466a@G4666@inv-collector)) ((lambda (G46c7@t) (begin (G466b@G4667@vis-collector G466d@G4669@vis-collector) (set! G466d@G4669@vis-collector G46c7@t))) (G466b@G4667@vis-collector)))))) G30fb@inv-collector G30fd@vis-collector G4660@rtc G4661@vtc)) (map G465d@wrap G4639@b*) (map G465d@wrap G4637@main-exp*) (G30f9@make-collector) (G30f9@make-collector)))) '#f)) (G30f7@make-top-rib G4657@subst-names G4656@subst-labels))) G4653@G4651 G4652@G4650)))) G464e@swap)) (lambda () (begin ((lambda (G46cb@t) (begin (G4646@G4642@imp-collector G4648@G4644@imp-collector) (set! G4648@G4644@imp-collector G46cb@t))) (G4646@G4642@imp-collector)) ((lambda (G46cd@t) (begin (G4647@G4643@top-level-context G4649@G4645@top-level-context) (set! G4649@G4645@top-level-context G46cd@t))) (G4647@G4643@top-level-context)))))) G30ff@imp-collector G318d@top-level-context G4641@itc '#f))) '#f))) (set! G3107@core-library-expander (lambda (G46cf@e G46d0@verify-name) (call-with-values (lambda () (G30f3@parse-library G46cf@e)) (lambda (G46d7@G46d3 G46d8@G46d4 G46d9@G46d5 G46da@G46d6) ((lambda (G46df@b* G46e0@imp* G46e1@exp* G46e2@name*) (call-with-values (lambda () (G30f1@parse-library-name G46e2@name*)) (lambda (G46e9@G46e7 G46ea@G46e8) ((lambda (G46ed@ver G46ee@name) (begin (G46d0@verify-name G46ee@name) (call-with-values (lambda () (G3105@library-body-expander G46ee@name G46e1@exp* G46e0@imp* G46df@b* '#f)) (lambda (G46f8@G46f1 G46f9@G46f2 G46fa@G46f3 G46fb@G46f4 G46fc@G46f5 G46fd@G46f6 G46fe@G46f7) ((lambda (G4706@export-env G4707@export-subst G4708@visit-code G4709@invoke-code G470a@visit-req* G470b@invoke-req* G470c@imp*) (values G46ee@name G46ed@ver G470c@imp* G470b@invoke-req* G470a@visit-req* G4709@invoke-code G4708@visit-code G4707@export-subst G4706@export-env)) G46fe@G46f7 G46fd@G46f6 G46fc@G46f5 G46fb@G46f4 G46fa@G46f3 G46f9@G46f2 G46f8@G46f1))))) G46ea@G46e8 G46e9@G46e7)))) G46da@G46d6 G46d9@G46d5 G46d8@G46d4 G46d7@G46d3))))) (set! G3109@parse-top-level-program (lambda (G4714@e*) ((lambda (G4716@t) ((lambda (G4718@ls/false) (if (if G4718@ls/false (begin '#f (apply (lambda (G471a@import G471b@imp* G471c@b*) (eq? (G3185@syntax->datum G471a@import) 'import)) G4718@ls/false)) '#f) (apply (lambda (G4720@import G4721@imp* G4722@b*) (values G4721@imp* G4722@b*)) G4718@ls/false) ((lambda (G4726@t) ((lambda (G4728@ls/false) (if (if G4728@ls/false (begin '#f (apply (lambda (G472a@import G472b@x G472c@y) (eq? (G3185@syntax->datum G472a@import) 'import)) G4728@ls/false)) '#f) (apply (lambda (G4730@import G4731@x G4732@y) (G317f@syntax-violation 'expander '"invalid syntax of top-level program" (G2e43@syntax-car G4714@e*))) G4728@ls/false) ((lambda (G4736@t) ((lambda (G4738@ls/false) (if G4738@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G4738@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G4736@t))) (G308c@syntax-dispatch G4736@t '_))) G4726@t))) (G308c@syntax-dispatch G4726@t '((any . any) . any)))) G4716@t))) (G308c@syntax-dispatch G4716@t '((any . each-any) . each-any)))) G4714@e*))) (set! G310b@top-level-expander (lambda (G473a@e*) (call-with-values (lambda () (G3109@parse-top-level-program G473a@e*)) (lambda (G473e@G473c G473f@G473d) ((lambda (G4742@b* G4743@imp*) (call-with-values (lambda () (G3105@library-body-expander '() '() G4743@imp* G4742@b* '#t)) (lambda (G474d@G4746 G474e@G4747 G474f@G4748 G4750@G4749 G4751@G474a G4752@G474b G4753@G474c) ((lambda (G475b@export-env G475c@export-subst G475d@visit-code G475e@invoke-code G475f@visit-req* G4760@invoke-req* G4761@imp*) (values G4760@invoke-req* G475e@invoke-code)) G4753@G474c G4752@G474b G4751@G474a G4750@G4749 G474f@G4748 G474e@G4747 G474d@G4746)))) G473f@G473d G473e@G473c))))) (set! G3111@G310c (make-record-type-descriptor 'env '#f 'G310f '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G3113@G310e '#f) (set! G3115@G310d (make-record-constructor-descriptor G3111@G310c '#f G3113@G310e)) (set! G311a@env? (record-predicate G3111@G310c)) (set! G311c@make-env (record-constructor G3115@G310d)) (set! G311e@env-names (record-accessor G3111@G310c '0)) (set! G3120@env-labels (record-accessor G3111@G310c '1)) (set! G3122@env-itc (record-accessor G3111@G310c '2)) (set! G3124@set-env-names! (record-mutator G3111@G310c '0)) (set! G3126@set-env-labels! (record-mutator G3111@G310c '1)) (set! G3128@set-env-itc! (record-mutator G3111@G310c '2)) (set! G312a@rp (G2998@G28a0@make-record-printer 'env (lambda (G4769@x G476a@p G476b@wr) (display '"#<environment>" G476a@p)))) (set! G3130@G312b (make-record-type-descriptor 'interaction-env '#f 'G312e '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3132@G312d '#f) (set! G3134@G312c (make-record-constructor-descriptor G3130@G312b '#f G3132@G312d)) (set! G3139@interaction-env? (record-predicate G3130@G312b)) (set! G313b@make-interaction-env (record-constructor G3134@G312c)) (set! G313d@interaction-env-rib (record-accessor G3130@G312b '0)) (set! G313f@interaction-env-r (record-accessor G3130@G312b '1)) (set! G3141@interaction-env-locs (record-accessor G3130@G312b '2)) (set! G3143@set-interaction-env-rib! (record-mutator G3130@G312b '0)) (set! G3145@set-interaction-env-r! (record-mutator G3130@G312b '1)) (set! G3147@set-interaction-env-locs! (record-mutator G3130@G312b '2)) (set! G3149@rp (G2998@G28a0@make-record-printer 'interaction-env (lambda (G476f@x G4770@p G4771@wr) (display '"#<environment>" G4770@p)))) (set! G314b@interaction-environment-symbols (lambda () (G3153@environment-symbols (G318b@interaction-environment)))) (set! G314d@environment-bindings (lambda (G4775@e) (vector->list (vector-map (lambda (G4777@name G4778@label) (G314f@parse-binding (cons G4777@name (G2c3d@G2ad1@imported-label->binding G4778@label)))) (G311e@env-names G4775@e) (G3120@env-labels G4775@e))))) (set! G314f@parse-binding (lambda (G477b@b) (cons (car G477b@b) ((lambda (G477d@t) (if (memv G477d@t '(core-prim global)) 'procedure (if (memv G477d@t '(core-macro macro global-macro)) 'syntax (if (memv G477d@t '($core-rtd)) 'record (if (eq? (car G477b@b) (cadr G477b@b)) 'syntax 'unknown))))) (cadr G477b@b))))) (set! G3151@environment? (lambda (G477f@x) ((lambda (G4781@t) (if G4781@t G4781@t (begin '#f (G3139@interaction-env? G477f@x)))) (G311a@env? G477f@x)))) (set! G3153@environment-symbols (lambda (G4783@x) (if (G311a@env? G4783@x) (vector->list (G311e@env-names G4783@x)) (if (G3139@interaction-env? G4783@x) (map values (G2dde@rib-sym* (G313d@interaction-env-rib G4783@x))) (assertion-violation 'environment-symbols '"not an environment" G4783@x))))) (set! G3155@environment (lambda G4785@imp* ((lambda (G4787@itc) ((lambda (G478b@G4789@imp-collector G478c@G478a@imp-collector) ((lambda (G478f@swap) (dynamic-wind G478f@swap (lambda () (call-with-values (lambda () (G30f5@parse-import-spec* G4785@imp*)) (lambda (G4793@G4791 G4794@G4792) ((lambda (G4797@subst-labels G4798@subst-names) (G311c@make-env G4798@subst-names G4797@subst-labels G4787@itc)) G4794@G4792 G4793@G4791)))) G478f@swap)) (lambda () ((lambda (G479b@t) (begin (G478b@G4789@imp-collector G478c@G478a@imp-collector) (set! G478c@G478a@imp-collector G479b@t))) (G478b@G4789@imp-collector))))) G30ff@imp-collector G4787@itc)) (G30f9@make-collector)))) (set! G3157@null-environment (lambda (G479d@n) (begin (if (not (eqv? G479d@n '5)) (assertion-violation 'null-environment '"not 5" G479d@n) (void)) (G3155@environment '(psyntax null-environment-5))))) (set! G3159@scheme-report-environment (lambda (G479f@n) (begin (if (not (eqv? G479f@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G479f@n) (void)) (G3155@environment '(psyntax scheme-report-environment-5))))) (set! G315b@expand (lambda (G47a1@x G47a2@env) (if (G311a@env? G47a2@env) ((lambda (G47a5@rib) ((lambda (G47a7@x G47a8@itc G47a9@rtc G47aa@vtc) ((lambda (G47af@x) (begin (G2dfe@seal-rib! G47a5@rib) (values G47af@x (G47a9@rtc)))) ((lambda (G47b9@G47b1@top-level-context G47ba@G47b2@inv-collector G47bb@G47b3@vis-collector G47bc@G47b4@imp-collector G47bd@G47b5@top-level-context G47be@G47b6@inv-collector G47bf@G47b7@vis-collector G47c0@G47b8@imp-collector) ((lambda (G47c9@swap) (dynamic-wind G47c9@swap (lambda () (G30b0@chi-expr G47a7@x '() '())) G47c9@swap)) (lambda () (begin ((lambda (G47cb@t) (begin (G47b9@G47b1@top-level-context G47bd@G47b5@top-level-context) (set! G47bd@G47b5@top-level-context G47cb@t))) (G47b9@G47b1@top-level-context)) ((lambda (G47cd@t) (begin (G47ba@G47b2@inv-collector G47be@G47b6@inv-collector) (set! G47be@G47b6@inv-collector G47cd@t))) (G47ba@G47b2@inv-collector)) ((lambda (G47cf@t) (begin (G47bb@G47b3@vis-collector G47bf@G47b7@vis-collector) (set! G47bf@G47b7@vis-collector G47cf@t))) (G47bb@G47b3@vis-collector)) ((lambda (G47d1@t) (begin (G47bc@G47b4@imp-collector G47c0@G47b8@imp-collector) (set! G47c0@G47b8@imp-collector G47d1@t))) (G47bc@G47b4@imp-collector)))))) G318d@top-level-context G30fb@inv-collector G30fd@vis-collector G30ff@imp-collector '#f G47a9@rtc G47aa@vtc G47a8@itc))) (G2e13@make-stx G47a1@x G2dbd@top-mark* (list G47a5@rib) '()) (G3122@env-itc G47a2@env) (G30f9@make-collector) (G30f9@make-collector))) (G30f7@make-top-rib (G311e@env-names G47a2@env) (G3120@env-labels G47a2@env))) (if (G3139@interaction-env? G47a2@env) ((lambda (G47d3@rib G47d4@r G47d5@rtc) ((lambda (G47d9@x) (call-with-values (lambda () ((lambda (G47e5@G47dd@top-level-context G47e6@G47de@inv-collector G47e7@G47df@vis-collector G47e8@G47e0@imp-collector G47e9@G47e1@top-level-context G47ea@G47e2@inv-collector G47eb@G47e3@vis-collector G47ec@G47e4@imp-collector) ((lambda (G47f5@swap) (dynamic-wind G47f5@swap (lambda () (G3103@chi-interaction-expr G47d9@x G47d3@rib G47d4@r)) G47f5@swap)) (lambda () (begin ((lambda (G47f7@t) (begin (G47e5@G47dd@top-level-context G47e9@G47e1@top-level-context) (set! G47e9@G47e1@top-level-context G47f7@t))) (G47e5@G47dd@top-level-context)) ((lambda (G47f9@t) (begin (G47e6@G47de@inv-collector G47ea@G47e2@inv-collector) (set! G47ea@G47e2@inv-collector G47f9@t))) (G47e6@G47de@inv-collector)) ((lambda (G47fb@t) (begin (G47e7@G47df@vis-collector G47eb@G47e3@vis-collector) (set! G47eb@G47e3@vis-collector G47fb@t))) (G47e7@G47df@vis-collector)) ((lambda (G47fd@t) (begin (G47e8@G47e0@imp-collector G47ec@G47e4@imp-collector) (set! G47ec@G47e4@imp-collector G47fd@t))) (G47e8@G47e0@imp-collector)))))) G318d@top-level-context G30fb@inv-collector G30fd@vis-collector G30ff@imp-collector G47a2@env G47d5@rtc (G30f9@make-collector) (G30f9@make-collector))) (lambda (G47ff@G47db G4800@G47dc) ((lambda (G4803@r^ G4804@e) (begin (G3145@set-interaction-env-r! G47a2@env G4803@r^) (values G4804@e (G47d5@rtc)))) G4800@G47dc G47ff@G47db)))) (G2e13@make-stx G47a1@x G2dbd@top-mark* (list G47d3@rib) '()))) (G313d@interaction-env-rib G47a2@env) (G313f@interaction-env-r G47a2@env) (G30f9@make-collector)) (assertion-violation 'expand '"not an environment" G47a2@env))))) (set! G315d@eval (lambda (G4807@x G4808@env) (begin (if (not (G3151@environment? G4808@env)) (error 'eval '"not an environment" G4808@env) (void)) (call-with-values (lambda () (G315b@expand G4807@x G4808@env)) (lambda (G480d@G480b G480e@G480c) ((lambda (G4811@invoke-req* G4812@x) (begin (for-each G2c3e@G2ad3@invoke-library G4811@invoke-req*) (eval-core (G29ff@G29a7@expanded->core G4812@x)))) G480e@G480c G480d@G480b)))))) (set! G315f@library-expander (lambda G487a ((lambda (G487b) (if (= G487b '3) (apply (lambda (G4815@x G4816@filename G4817@verify-name) ((lambda (G481c@build-visit-code G481e@visit!) (begin (set! G481c@build-visit-code (lambda (G4868@macro*) (if (null? G4868@macro*) (G2da5@G2d17@build-void) (G2da4@G2d15@build-sequence '#f (map (lambda (G486a@x) ((lambda (G486c@loc G486d@src) (list 'set! G486c@loc G486d@src)) (car G486a@x) (cddr G486a@x))) G4868@macro*))))) (set! G481e@visit! (lambda (G4860@macro*) (for-each (lambda (G4862@x) ((lambda (G4864@loc G4865@proc) (set-symbol-value! G4864@loc G4865@proc)) (car G4862@x) (cadr G4862@x))) G4860@macro*))) (call-with-values (lambda () (G3107@core-library-expander G4815@x G4817@verify-name)) (lambda (G4828@G481f G4829@G4820 G482a@G4821 G482b@G4822 G482c@G4823 G482d@G4824 G482e@G4825 G482f@G4826 G4830@G4827) ((lambda (G483a@export-env G483b@export-subst G483c@macro* G483d@invoke-code G483e@vis* G483f@inv* G4840@imp* G4841@ver G4842@name) ((lambda (G484c@id G484d@name G484e@ver G484f@imp* G4850@vis* G4851@inv* G4852@visit-proc G4853@invoke-proc G4854@visit-code G4855@invoke-code) (begin (G2c3c@G2acf@install-library G484c@id G484d@name G484e@ver G484f@imp* G4850@vis* G4851@inv* G483b@export-subst G483a@export-env G4852@visit-proc G4853@invoke-proc G4854@visit-code G4855@invoke-code '#t G4816@filename) (values G484c@id G484d@name G484e@ver G484f@imp* G4850@vis* G4851@inv* G4855@invoke-code G4854@visit-code G483b@export-subst G483a@export-env))) (gensym) G4842@name G4841@ver (map G2c42@G2adb@library-spec G4840@imp*) (map G2c42@G2adb@library-spec G483e@vis*) (map G2c42@G2adb@library-spec G483f@inv*) (lambda () (G481e@visit! G483c@macro*)) (lambda () (eval-core (G29ff@G29a7@expanded->core G483d@invoke-code))) (G481c@build-visit-code G483c@macro*) G483d@invoke-code)) G4830@G4827 G482f@G4826 G482e@G4825 G482d@G4824 G482c@G4823 G482b@G4822 G482a@G4821 G4829@G4820 G4828@G481f))))) '#f '#f)) G487a) (if (= G487b '2) (apply (lambda (G4870@x G4871@filename) (G315f@library-expander G4870@x G4871@filename (lambda (G4874@x) (values)))) G487a) (if (= G487b '1) (apply (lambda (G4876@x) (G315f@library-expander G4876@x '#f (lambda (G4878@x) (values)))) G487a) (error 'apply '"invalid arg count"))))) (length G487a)))) (set! G3161@boot-library-expand (lambda (G487c@x) (call-with-values (lambda () (G315f@library-expander G487c@x)) (lambda (G4888@G487e G4889@G487f G488a@G4880 G488b@G4881 G488c@G4882 G488d@G4883 G488e@G4884 G488f@G4885 G4890@G4886 G4891@G4887) ((lambda (G489c@export-env G489d@export-subst G489e@visit-code G489f@invoke-code G48a0@inv* G48a1@vis* G48a2@imp* G48a3@ver G48a4@name G48a5@id) (values G48a4@name G489f@invoke-code G489d@export-subst G489c@export-env)) G4891@G4887 G4890@G4886 G488f@G4885 G488e@G4884 G488d@G4883 G488c@G4882 G488b@G4881 G488a@G4880 G4889@G487f G4888@G487e))))) (set! G3163@rev-map-append (lambda (G48b0@f G48b1@ls G48b2@ac) (if (null? G48b1@ls) G48b2@ac (G3163@rev-map-append G48b0@f (cdr G48b1@ls) (cons (G48b0@f (car G48b1@ls)) G48b2@ac))))) (set! G3165@build-exports (lambda (G48b6@lex*+loc* G48b7@init*) (G2da4@G2d15@build-sequence '#f (cons (G2da5@G2d17@build-void) (G3163@rev-map-append (lambda (G48ba@x) (list 'set! (cdr G48ba@x) (car G48ba@x))) G48b6@lex*+loc* G48b7@init*))))) (set! G3167@make-export-subst (lambda (G48bc@name* G48bd@id*) (map (lambda (G48c0@name G48c1@id) ((lambda (G48c4@label) (begin (if (not G48c4@label) (G317f@syntax-violation '#f '"cannot export unbound identifier" G48c1@id) (void)) (cons G48c0@name G48c4@label))) (G2e63@id->label G48c1@id))) G48bc@name* G48bd@id*))) (set! G3169@make-export-env/macros (lambda (G48c6@lex* G48c7@loc* G48c8@r) ((lambda (G48cd@lookup) (begin (set! G48cd@lookup (lambda (G48ea@x) ((letrec ((G48ec@f (lambda (G48ee@x G48ef@lex* G48f0@loc*) (if (pair? G48ef@lex*) (if (eq? G48ee@x (car G48ef@lex*)) (car G48f0@loc*) (G48ec@f G48ee@x (cdr G48ef@lex*) (cdr G48f0@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48ec@f) G48ea@x G48c6@lex* G48c7@loc*))) ((letrec ((G48ce@f (lambda (G48d0@r G48d1@env G48d2@global* G48d3@macro*) (if (null? G48d0@r) (values G48d1@env G48d2@global* G48d3@macro*) ((lambda (G48d8@x) ((lambda (G48da@label G48db@b) ((lambda (G48de@t) (if (memv G48de@t '(lexical)) ((lambda (G48e0@v) ((lambda (G48e2@loc G48e3@type) (G48ce@f (cdr G48d0@r) (cons (cons* G48da@label G48e3@type G48e2@loc) G48d1@env) (cons (cons (G301c@lexical-var G48e0@v) G48e2@loc) G48d2@global*) G48d3@macro*)) (G48cd@lookup (G301c@lexical-var G48e0@v)) (if (G301e@lexical-mutable? G48e0@v) 'mutable 'global))) (G2e6d@binding-value G48db@b)) (if (memv G48de@t '(local-macro)) ((lambda (G48e6@loc) (G48ce@f (cdr G48d0@r) (cons (cons* G48da@label 'global-macro G48e6@loc) G48d1@env) G48d2@global* (cons (cons G48e6@loc (G2e6d@binding-value G48db@b)) G48d3@macro*))) (gensym)) (if (memv G48de@t '(local-macro!)) ((lambda (G48e8@loc) (G48ce@f (cdr G48d0@r) (cons (cons* G48da@label 'global-macro! G48e8@loc) G48d1@env) G48d2@global* (cons (cons G48e8@loc (G2e6d@binding-value G48db@b)) G48d3@macro*))) (gensym)) (if (memv G48de@t '($rtd $module)) (G48ce@f (cdr G48d0@r) (cons G48d8@x G48d1@env) G48d2@global* G48d3@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e6b@binding-type G48db@b) (G2e6d@binding-value G48db@b))))))) (G2e6b@binding-type G48db@b))) (car G48d8@x) (cdr G48d8@x))) (car G48d0@r)))))) G48ce@f) G48c8@r '() '() '()))) '#f))) (set! G316b@generate-temporaries (lambda (G48f4@ls) ((lambda (G48f6@t) ((lambda (G48f8@ls/false) (if G48f8@ls/false (apply (lambda (G48fa@ls) (map (lambda (G48fc@x) (G2e13@make-stx ((lambda (G48fe@x) (if ((lambda (G4900@t) (if G4900@t G4900@t (begin '#f (string? G48fe@x)))) (symbol? G48fe@x)) (gensym G48fe@x) (gensym 't))) (G3185@syntax->datum G48fc@x)) G2dbd@top-mark* '() '())) G48fa@ls)) G48f8@ls/false) ((lambda (G4902@t) ((lambda (G4904@ls/false) (if G4904@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4904@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G4902@t))) (G308c@syntax-dispatch G4902@t '_))) G48f6@t))) (G308c@syntax-dispatch G48f6@t 'each-any))) G48f4@ls))) (set! G316d@free-identifier=? (lambda (G4906@x G4907@y) (if (G2e49@id? G4906@x) (if (G2e49@id? G4907@y) (G2e51@free-id=? G4906@x G4907@y) (assertion-violation 'free-identifier=? '"not an identifier" G4907@y)) (assertion-violation 'free-identifier=? '"not an identifier" G4906@x)))) (set! G316f@bound-identifier=? (lambda (G490a@x G490b@y) (if (G2e49@id? G490a@x) (if (G2e49@id? G490b@y) (G2e4f@bound-id=? G490a@x G490b@y) (assertion-violation 'bound-identifier=? '"not an identifier" G490b@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G490a@x)))) (set! G3171@make-source-condition (lambda (G490e@x) ((lambda (G4918@G4913 G491a@G4915 G491c@G4914 G4921@G4912 G4923@make-source-condition G4925@G4910 G4927@G4911 G4929@source-condition? G492b@source-filename G492d@source-character) (begin (set! G4918@G4913 (make-record-type-descriptor '&source-information &condition-rtd 'G4916 '#f '#f '#((immutable file-name) (immutable character)))) (set! G491a@G4915 '#f) (set! G491c@G4914 (make-record-constructor-descriptor G4918@G4913 &condition-rcd G491a@G4915)) (set! G4921@G4912 (record-predicate G4918@G4913)) (set! G4923@make-source-condition (record-constructor G491c@G4914)) (set! G4925@G4910 (record-accessor G4918@G4913 '0)) (set! G4927@G4911 (record-accessor G4918@G4913 '1)) (set! G4929@source-condition? (condition-predicate G4918@G4913)) (set! G492b@source-filename (condition-accessor G4918@G4913 G4925@G4910)) (set! G492d@source-character (condition-accessor G4918@G4913 G4927@G4911)) (if (pair? G490e@x) (G4923@make-source-condition (car G490e@x) (cdr G490e@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3173@extract-position-condition (lambda (G492e@x) (G3171@make-source-condition (G3175@expression-position G492e@x)))) (set! G3175@expression-position (lambda (G4930@x) (if (G2e11@stx? G4930@x) (begin '#f ((lambda (G4932@x) (if (G2990@G2890@annotation? G4932@x) (begin '#f (G2991@G2892@annotation-source G4932@x)) '#f)) (G2e15@stx-expr G4930@x))) '#f))) (set! G3177@assertion-error (lambda (G4934@expr G4935@pos) (raise (condition (G4c2c@G4b5e@make-assertion-violation) (G4c3a@G4b8c@make-who-condition 'assert) (G4c0c@G4af6@make-message-condition '"assertion failed") (G4c32@G4b73@make-irritants-condition (list G4934@expr)) (G3171@make-source-condition G4935@pos))))) (set! G3179@syntax-error (lambda (G4938@x . G493a@args) (begin (if (not (for-all string? G493a@args)) (assertion-violation 'syntax-error '"invalid argument" G493a@args) (void)) (raise (condition (G4c0c@G4af6@make-message-condition (if (null? G493a@args) '"invalid syntax" (apply string-append G493a@args))) (G4c54@G4be2@make-syntax-violation (G3185@syntax->datum G4938@x) '#f) (G3173@extract-position-condition G4938@x) (G317b@extract-trace G4938@x)))))) (set! G317b@extract-trace (lambda (G493c@x) ((lambda (G4945@G4940 G4947@G4942 G4949@G4941 G494e@G493f G4950@make-trace G4952@G493e G4954@trace? G4956@trace-form) (begin (set! G4945@G4940 (make-record-type-descriptor '&trace &condition-rtd 'G4943 '#f '#f '#((immutable form)))) (set! G4947@G4942 '#f) (set! G4949@G4941 (make-record-constructor-descriptor G4945@G4940 &condition-rcd G4947@G4942)) (set! G494e@G493f (record-predicate G4945@G4940)) (set! G4950@make-trace (record-constructor G4949@G4941)) (set! G4952@G493e (record-accessor G4945@G4940 '0)) (set! G4954@trace? (condition-predicate G4945@G4940)) (set! G4956@trace-form (condition-accessor G4945@G4940 G4952@G493e)) ((letrec ((G4957@f (lambda (G4959@x) (if (G2e11@stx? G4959@x) (apply condition (G4950@make-trace G4959@x) (map G4957@f (G2e1b@stx-ae* G4959@x))) (if (G2990@G2890@annotation? G4959@x) (G4950@make-trace (G2e13@make-stx G4959@x '() '() '())) (condition)))))) G4957@f) G493c@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G317d@syntax-violation* (lambda (G495b@who G495c@msg G495d@form G495e@condition-object) (begin (if (not (string? G495c@msg)) (assertion-violation 'syntax-violation '"message is not a string" G495c@msg) (void)) ((lambda (G4963@who) (raise (condition (if G4963@who (G4c3a@G4b8c@make-who-condition G4963@who) (condition)) (G4c0c@G4af6@make-message-condition G495c@msg) G495e@condition-object (G3173@extract-position-condition G495d@form) (G317b@extract-trace G495d@form)))) (if ((lambda (G4965@t) (if G4965@t G4965@t (begin '#f (symbol? G495b@who)))) (string? G495b@who)) G495b@who (if (not G495b@who) ((lambda (G4967@t) ((lambda (G4969@ls/false) (if (if G4969@ls/false (begin '#f (apply (lambda (G496b@id) (G2e49@id? G496b@id)) G4969@ls/false)) '#f) (apply (lambda (G496d@id) (G3185@syntax->datum G496d@id)) G4969@ls/false) ((lambda (G496f@t) ((lambda (G4971@ls/false) (if (if G4971@ls/false (begin '#f (apply (lambda (G4973@id G4974@rest) (G2e49@id? G4973@id)) G4971@ls/false)) '#f) (apply (lambda (G4977@id G4978@rest) (G3185@syntax->datum G4977@id)) G4971@ls/false) ((lambda (G497b@t) ((lambda (G497d@ls/false) (if G497d@ls/false (apply (lambda () '#f) G497d@ls/false) (G317f@syntax-violation '#f '"invalid syntax" G497b@t))) (G308c@syntax-dispatch G497b@t '_))) G496f@t))) (G308c@syntax-dispatch G496f@t '(any . any)))) G4967@t))) (G308c@syntax-dispatch G4967@t 'any))) G495d@form) (assertion-violation 'syntax-violation '"invalid who argument" G495b@who))))))) (set! G317f@syntax-violation (lambda G498d ((lambda (G498e) (if (= G498e '3) (apply (lambda (G497f@who G4980@msg G4981@form) (G317f@syntax-violation G497f@who G4980@msg G4981@form '#f)) G498d) (if (= G498e '4) (apply (lambda (G4985@who G4986@msg G4987@form G4988@subform) (G317d@syntax-violation* G4985@who G4986@msg G4987@form (G4c54@G4be2@make-syntax-violation (G3185@syntax->datum G4987@form) (G3185@syntax->datum G4988@subform)))) G498d) (error 'apply '"invalid arg count")))) (length G498d)))) (set! G3181@identifier? (lambda (G498f@x) (G2e49@id? G498f@x))) (set! G3183@datum->syntax (lambda (G4991@id G4992@datum) (if (G2e49@id? G4991@id) (G2e27@datum->stx G4991@id G4992@datum) (assertion-violation 'datum->syntax '"not an identifier" G4991@id)))) (set! G3185@syntax->datum (lambda (G4995@x) (G2e5f@stx->datum G4995@x))) (set! G3187@compile-r6rs-top-level (lambda (G4997@x*) (call-with-values (lambda () (G310b@top-level-expander G4997@x*)) (lambda (G499b@G4999 G499c@G499a) ((lambda (G499f@invoke-code G49a0@lib*) (lambda () (begin (for-each G2c3e@G2ad3@invoke-library G49a0@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29ff@G29a7@expanded->core G499f@invoke-code)) (void)) (eval-core (G29ff@G29a7@expanded->core G499f@invoke-code))))) G499c@G499a G499b@G4999))))) (set! G3189@pre-compile-r6rs-top-level (lambda (G49a3@x*) (call-with-values (lambda () (G310b@top-level-expander G49a3@x*)) (lambda (G49a7@G49a5 G49a8@G49a6) ((lambda (G49ab@invoke-code G49ac@lib*) (begin (for-each G2c3e@G2ad3@invoke-library G49ac@lib*) (G2999@G28a2@compile-core (G29ff@G29a7@expanded->core G49ab@invoke-code)))) G49a8@G49a6 G49a7@G49a5))))) (set! G318b@interaction-environment ((lambda (G49af@the-env) (lambda () ((lambda (G49b1@t) (if G49b1@t G49b1@t (begin '#f ((lambda (G49b3@lib G49b4@rib) (begin ((lambda (G49b7@subst) (begin (G2de8@set-rib-sym*! G49b4@rib (map car G49b7@subst)) (G2dea@set-rib-mark**! G49b4@rib (map (lambda (G49b9@x) G2dbd@top-mark*) G49b7@subst)) (G2dec@set-rib-label*! G49b4@rib (map cdr G49b7@subst)))) (G2c13@G2a7d@library-subst G49b3@lib)) ((lambda (G49bb@env) (begin (set! G49af@the-env G49bb@env) G49bb@env)) (G313b@make-interaction-env G49b4@rib '() '())))) (G2c37@G2ac5@find-library-by-name '(mosh interaction)) (G2df4@make-cache-rib))))) G49af@the-env))) '#f)) (set! G318d@top-level-context (G299b@G28a6@make-parameter '#f)) (begin (set! G4aca@G318d@top-level-context G318d@top-level-context) (set! G4ac9@G318b@interaction-environment G318b@interaction-environment) (set! G4ac8@G3189@pre-compile-r6rs-top-level G3189@pre-compile-r6rs-top-level) (set! G4ac7@G3187@compile-r6rs-top-level G3187@compile-r6rs-top-level) (set! G4ac6@G3185@syntax->datum G3185@syntax->datum) (set! G4ac5@G3183@datum->syntax G3183@datum->syntax) (set! G4ac4@G3181@identifier? G3181@identifier?) (set! G4ac3@G317f@syntax-violation G317f@syntax-violation) (set! G4ac2@G317d@syntax-violation* G317d@syntax-violation*) (set! G4ac1@G317b@extract-trace G317b@extract-trace) (set! G4ac0@G3179@syntax-error G3179@syntax-error) (set! G4abf@G3177@assertion-error G3177@assertion-error) (set! G4abe@G3175@expression-position G3175@expression-position) (set! G4abd@G3173@extract-position-condition G3173@extract-position-condition) (set! G4abc@G3171@make-source-condition G3171@make-source-condition) (set! G4abb@G316f@bound-identifier=? G316f@bound-identifier=?) (set! G4aba@G316d@free-identifier=? G316d@free-identifier=?) (set! G4ab9@G316b@generate-temporaries G316b@generate-temporaries) (set! G4ab8@G3169@make-export-env/macros G3169@make-export-env/macros) (set! G4ab7@G3167@make-export-subst G3167@make-export-subst) (set! G4ab6@G3165@build-exports G3165@build-exports) (set! G4ab5@G3163@rev-map-append G3163@rev-map-append) (set! G4ab4@G3161@boot-library-expand G3161@boot-library-expand) (set! G4ab3@G315f@library-expander G315f@library-expander) (set! G4ab2@G315d@eval G315d@eval) (set! G4ab1@G315b@expand G315b@expand) (set! G4ab0@G3159@scheme-report-environment G3159@scheme-report-environment) (set! G4aaf@G3157@null-environment G3157@null-environment) (set! G4aae@G3155@environment G3155@environment) (set! G4aad@G3153@environment-symbols G3153@environment-symbols) (set! G4aac@G3151@environment? G3151@environment?) (set! G4aab@G314f@parse-binding G314f@parse-binding) (set! G4aaa@G314d@environment-bindings G314d@environment-bindings) (set! G4aa9@G314b@interaction-environment-symbols G314b@interaction-environment-symbols) (set! G4aa8@G3149@rp G3149@rp) (set! G4aa7@G3147@set-interaction-env-locs! G3147@set-interaction-env-locs!) (set! G4aa6@G3145@set-interaction-env-r! G3145@set-interaction-env-r!) (set! G4aa5@G3143@set-interaction-env-rib! G3143@set-interaction-env-rib!) (set! G4aa4@G3141@interaction-env-locs G3141@interaction-env-locs) (set! G4aa3@G313f@interaction-env-r G313f@interaction-env-r) (set! G4aa2@G313d@interaction-env-rib G313d@interaction-env-rib) (set! G4aa1@G313b@make-interaction-env G313b@make-interaction-env) (set! G4aa0@G3139@interaction-env? G3139@interaction-env?) (set! G4a9f@G3134@G312c G3134@G312c) (set! G4a9e@G3132@G312d G3132@G312d) (set! G4a9d@G3130@G312b G3130@G312b) (set! G4a9c@G312a@rp G312a@rp) (set! G4a9b@G3128@set-env-itc! G3128@set-env-itc!) (set! G4a9a@G3126@set-env-labels! G3126@set-env-labels!) (set! G4a99@G3124@set-env-names! G3124@set-env-names!) (set! G4a98@G3122@env-itc G3122@env-itc) (set! G4a97@G3120@env-labels G3120@env-labels) (set! G4a96@G311e@env-names G311e@env-names) (set! G4a95@G311c@make-env G311c@make-env) (set! G4a94@G311a@env? G311a@env?) (set! G4a93@G3115@G310d G3115@G310d) (set! G4a92@G3113@G310e G3113@G310e) (set! G4a91@G3111@G310c G3111@G310c) (set! G4a90@G310b@top-level-expander G310b@top-level-expander) (set! G4a8f@G3109@parse-top-level-program G3109@parse-top-level-program) (set! G4a8e@G3107@core-library-expander G3107@core-library-expander) (set! G4a8d@G3105@library-body-expander G3105@library-body-expander) (set! G4a8c@G3103@chi-interaction-expr G3103@chi-interaction-expr) (set! G4a8b@G3101@chi-library-internal G3101@chi-library-internal) (set! G4a8a@G30ff@imp-collector G30ff@imp-collector) (set! G4a89@G30fd@vis-collector G30fd@vis-collector) (set! G4a88@G30fb@inv-collector G30fb@inv-collector) (set! G4a87@G30f9@make-collector G30f9@make-collector) (set! G4a86@G30f7@make-top-rib G30f7@make-top-rib) (set! G4a85@G30f5@parse-import-spec* G30f5@parse-import-spec*) (set! G4a84@G30f3@parse-library G30f3@parse-library) (set! G4a83@G30f1@parse-library-name G30f1@parse-library-name) (set! G4a82@G30ef@parse-exports G30ef@parse-exports) (set! G4a81@G30ed@expand-transformer G30ed@expand-transformer) (set! G4a80@G30eb@chi-body* G30eb@chi-body*) (set! G4a7f@G30e9@chi-internal-module G30e9@chi-internal-module) (set! G4a7e@G30e7@module-interface-exp-id* G30e7@module-interface-exp-id*) (set! G4a7d@G30e5@set-module-interface-exp-lab-vec! G30e5@set-module-interface-exp-lab-vec!) (set! G4a7c@G30e3@set-module-interface-exp-id-vec! G30e3@set-module-interface-exp-id-vec!) (set! G4a7b@G30e1@set-module-interface-first-mark! G30e1@set-module-interface-first-mark!) (set! G4a7a@G30df@module-interface-exp-lab-vec G30df@module-interface-exp-lab-vec) (set! G4a79@G30dd@module-interface-exp-id-vec G30dd@module-interface-exp-id-vec) (set! G4a78@G30db@module-interface-first-mark G30db@module-interface-first-mark) (set! G4a77@G30d9@make-module-interface G30d9@make-module-interface) (set! G4a76@G30d7@module-interface? G30d7@module-interface?) (set! G4a75@G30d2@G30ca G30d2@G30ca) (set! G4a74@G30d0@G30cb G30d0@G30cb) (set! G4a73@G30ce@G30c9 G30ce@G30c9) (set! G4a72@G30c8@parse-module G30c8@parse-module) (set! G4a71@G30c6@chi-internal G30c6@chi-internal) (set! G4a70@G30c4@find-dups G30c4@find-dups) (set! G4a6f@G30c2@find-bound=? G30c2@find-bound=?) (set! G4a6e@G30c0@chi-rhs* G30c0@chi-rhs*) (set! G4a6d@G30be@expand-interaction-rhs*/init* G30be@expand-interaction-rhs*/init*) (set! G4a6c@G30bc@chi-rhs G30bc@chi-rhs) (set! G4a6b@G30ba@chi-defun G30ba@chi-defun) (set! G4a6a@G30b8@chi-lambda-clause* G30b8@chi-lambda-clause*) (set! G4a69@G30b6@chi-lambda-clause G30b6@chi-lambda-clause) (set! G4a68@G30b4@verify-formals G30b4@verify-formals) (set! G4a67@G30b2@chi-set! G30b2@chi-set!) (set! G4a66@G30b0@chi-expr G30b0@chi-expr) (set! G4a65@G30ae@chi-application G30ae@chi-application) (set! G4a64@G30ac@chi-expr* G30ac@chi-expr*) (set! G4a63@G30aa@chi-global-macro G30aa@chi-global-macro) (set! G4a62@G30a8@chi-local-macro G30a8@chi-local-macro) (set! G4a61@G30a6@chi-macro G30a6@chi-macro) (set! G4a60@G30a4@do-macro-call G30a4@do-macro-call) (set! G4a5f@G30a2@local-macro-transformer G30a2@local-macro-transformer) (set! G4a5e@G30a0@macro-transformer G30a0@macro-transformer) (set! G4a5d@G309e@symbol-macro G309e@symbol-macro) (set! G4a5c@G309c@file-options-macro G309c@file-options-macro) (set! G4a5b@G309a@core-macro-transformer G309a@core-macro-transformer) (set! G4a5a@G3098@syntax-transformer G3098@syntax-transformer) (set! G4a59@G3096@ellipsis-map G3096@ellipsis-map) (set! G4a58@G3094@syntax-case-transformer G3094@syntax-case-transformer) (set! G4a57@G3092@verify-literals G3092@verify-literals) (set! G4a56@G3090@underscore? G3090@underscore?) (set! G4a55@G308e@ellipsis? G308e@ellipsis?) (set! G4a54@G308c@syntax-dispatch G308c@syntax-dispatch) (set! G4a53@G308a@convert-pattern G308a@convert-pattern) (set! G4a52@G3088@foreign-call-transformer G3088@foreign-call-transformer) (set! G4a51@G3086@parameterize-macro G3086@parameterize-macro) (set! G4a50@G3084@incorrect-usage-macro G3084@incorrect-usage-macro) (set! G4a4f@G3082@define-condition-type-macro G3082@define-condition-type-macro) (set! G4a4e@G3080@define-record-type-macro G3080@define-record-type-macro) (set! G4a4d@G307e@define-struct-macro G307e@define-struct-macro) (set! G4a4c@G307c@quasisyntax-macro G307c@quasisyntax-macro) (set! G4a4b@G307a@quasiquote-macro G307a@quasiquote-macro) (set! G4a4a@G3078@syntax-rules-macro G3078@syntax-rules-macro) (set! G4a49@G3076@include-into-macro G3076@include-into-macro) (set! G4a48@G3074@include-macro G3074@include-macro) (set! G4a47@G3072@do-include G3072@do-include) (set! G4a46@G3070@cond-macro G3070@cond-macro) (set! G4a45@G306e@and-macro G306e@and-macro) (set! G4a44@G306c@or-macro G306c@or-macro) (set! G4a43@G306a@let*-macro G306a@let*-macro) (set! G4a42@G3068@do-macro G3068@do-macro) (set! G4a41@G3066@identifier-syntax-macro G3066@identifier-syntax-macro) (set! G4a40@G3064@endianness-macro G3064@endianness-macro) (set! G4a3f@G3062@assert-macro G3062@assert-macro) (set! G4a3e@G3060@delay-macro G3060@delay-macro) (set! G4a3d@G305e@time-macro G305e@time-macro) (set! G4a3c@G305c@define-enumeration-macro G305c@define-enumeration-macro) (set! G4a3b@G305a@guard-macro G305a@guard-macro) (set! G4a3a@G3058@trace-letrec-syntax-macro G3058@trace-letrec-syntax-macro) (set! G4a39@G3056@trace-let-syntax-macro G3056@trace-let-syntax-macro) (set! G4a38@G3054@trace-let/rec-syntax G3054@trace-let/rec-syntax) (set! G4a37@G3052@trace-define-syntax-macro G3052@trace-define-syntax-macro) (set! G4a36@G3050@trace-define-macro G3050@trace-define-macro) (set! G4a35@G304e@trace-lambda-macro G304e@trace-lambda-macro) (set! G4a34@G304c@let*-values-macro G304c@let*-values-macro) (set! G4a33@G304a@let-values-macro G304a@let-values-macro) (set! G4a32@G3048@let-macro G3048@let-macro) (set! G4a31@G3046@invalid-fmls-error G3046@invalid-fmls-error) (set! G4a30@G3044@with-syntax-macro G3044@with-syntax-macro) (set! G4a2f@G3042@bless G3042@bless) (set! G4a2e@G3040@lambda-transformer G3040@lambda-transformer) (set! G4a2d@G303e@case-lambda-transformer G303e@case-lambda-transformer) (set! G4a2c@G303c@quote-transformer G303c@quote-transformer) (set! G4a2b@G303a@case-macro G303a@case-macro) (set! G4a2a@G3038@if-transformer G3038@if-transformer) (set! G4a29@G3036@unless-macro G3036@unless-macro) (set! G4a28@G3034@when-macro G3034@when-macro) (set! G4a27@G3032@record-constructor-descriptor-transformer G3032@record-constructor-descriptor-transformer) (set! G4a26@G3030@record-type-descriptor-transformer G3030@record-type-descriptor-transformer) (set! G4a25@G302e@type-descriptor-transformer G302e@type-descriptor-transformer) (set! G4a24@G302c@fluid-let-syntax-transformer G302c@fluid-let-syntax-transformer) (set! G4a23@G302a@letrec*-transformer G302a@letrec*-transformer) (set! G4a22@G3028@letrec-transformer G3028@letrec-transformer) (set! G4a21@G3026@letrec-helper G3026@letrec-helper) (set! G4a20@G3024@add-lexicals G3024@add-lexicals) (set! G4a1f@G3022@add-lexical G3022@add-lexical) (set! G4a1e@G3020@set-lexical-mutable! G3020@set-lexical-mutable!) (set! G4a1d@G301e@lexical-mutable? G301e@lexical-mutable?) (set! G4a1c@G301c@lexical-var G301c@lexical-var) (set! G4a1b@G301a@scheme-stx G301a@scheme-stx) (set! G4a1a@G3018@scheme-stx-hashtable G3018@scheme-stx-hashtable) (set! G4a19@G3016@parse-define-syntax G3016@parse-define-syntax) (set! G4a18@G3014@parse-define G3014@parse-define) (set! G4a17@G2e90@make-eval-transformer G2e90@make-eval-transformer) (set! G4a16@G2e8e@variable-transformer-procedure G2e8e@variable-transformer-procedure) (set! G4a15@G2e8c@variable-transformer? G2e8c@variable-transformer?) (set! G4a14@G2e8a@make-variable-transformer G2e8a@make-variable-transformer) (set! G4a13@G2e88@sanitize-binding G2e88@sanitize-binding) (set! G4a12@G2e71@syntax-type G2e71@syntax-type) (set! G4a11@G2e6f@raise-unbound-error G2e6f@raise-unbound-error) (set! G4a10@G2e6d@binding-value G2e6d@binding-value) (set! G4a0f@G2e6b@binding-type G2e6b@binding-type) (set! G4a0e@G2e69@make-binding G2e69@make-binding) (set! G4a0d@G2e67@label->binding G2e67@label->binding) (set! G4a0c@G2e65@id->real-label G2e65@id->real-label) (set! G4a0b@G2e63@id->label G2e63@id->label) (set! G4a0a@G2e61@same-marks*? G2e61@same-marks*?) (set! G4a09@G2e5f@stx->datum G2e5f@stx->datum) (set! G4a08@G2e5d@strip G2e5d@strip) (set! G4a07@G2e5b@strip-annotations G2e5b@strip-annotations) (set! G4a06@G2e59@self-evaluating? G2e59@self-evaluating?) (set! G4a05@G2e57@bound-id-member? G2e57@bound-id-member?) (set! G4a04@G2e55@distinct-bound-ids? G2e55@distinct-bound-ids?) (set! G4a03@G2e53@valid-bound-ids? G2e53@valid-bound-ids?) (set! G4a02@G2e51@free-id=? G2e51@free-id=?) (set! G4a01@G2e4f@bound-id=? G2e4f@bound-id=?) (set! G4a00@G2e4d@same-marks? G2e4d@same-marks?) (set! G49ff@G2e4b@id->sym G2e4b@id->sym) (set! G49fe@G2e49@id? G2e49@id?) (set! G49fd@G2e47@syntax->list G2e47@syntax->list) (set! G49fc@G2e45@syntax-cdr G2e45@syntax-cdr) (set! G49fb@G2e43@syntax-car G2e43@syntax-car) (set! G49fa@G2e41@syntax-list? G2e41@syntax-list?) (set! G49f9@G2e3f@syntax-null? G2e3f@syntax-null?) (set! G49f8@G2e3d@syntax-vector? G2e3d@syntax-vector?) (set! G49f7@G2e3b@syntax-pair? G2e3b@syntax-pair?) (set! G49f6@G2e39@syntax-vector->list G2e39@syntax-vector->list) (set! G49f5@G2e37@syntax-kind? G2e37@syntax-kind?) (set! G49f4@G2e35@add-subst G2e35@add-subst) (set! G49f3@G2e33@add-mark G2e33@add-mark) (set! G49f2@G2e31@mkstx G2e31@mkstx) (set! G49f1@G2e2f@join-wraps G2e2f@join-wraps) (set! G49f0@G2e2d@anti-mark? G2e2d@anti-mark?) (set! G49ef@G2e2b@anti-mark G2e2b@anti-mark) (set! G49ee@G2e29@gen-mark G2e29@gen-mark) (set! G49ed@G2e27@datum->stx G2e27@datum->stx) (set! G49ec@G2e25@rp G2e25@rp) (set! G49eb@G2e23@set-stx-ae*! G2e23@set-stx-ae*!) (set! G49ea@G2e21@set-stx-subst*! G2e21@set-stx-subst*!) (set! G49e9@G2e1f@set-stx-mark*! G2e1f@set-stx-mark*!) (set! G49e8@G2e1d@set-stx-expr! G2e1d@set-stx-expr!) (set! G49e7@G2e1b@stx-ae* G2e1b@stx-ae*) (set! G49e6@G2e19@stx-subst* G2e19@stx-subst*) (set! G49e5@G2e17@stx-mark* G2e17@stx-mark*) (set! G49e4@G2e15@stx-expr G2e15@stx-expr) (set! G49e3@G2e13@make-stx G2e13@make-stx) (set! G49e2@G2e11@stx? G2e11@stx?) (set! G49e1@G2e0c@G2e04 G2e0c@G2e04) (set! G49e0@G2e0a@G2e05 G2e0a@G2e05) (set! G49df@G2e08@G2e03 G2e08@G2e03) (set! G49de@G2e02@make-full-rib G2e02@make-full-rib) (set! G49dd@G2e00@unseal-rib! G2e00@unseal-rib!) (set! G49dc@G2dfe@seal-rib! G2dfe@seal-rib!) (set! G49db@G2dfc@make-rib-map G2dfc@make-rib-map) (set! G49da@G2dfa@extend-rib/nc! G2dfa@extend-rib/nc!) (set! G49d9@G2df8@extend-rib! G2df8@extend-rib!) (set! G49d8@G2df6@find-label G2df6@find-label) (set! G49d7@G2df4@make-cache-rib G2df4@make-cache-rib) (set! G49d6@G2df2@make-empty-rib G2df2@make-empty-rib) (set! G49d5@G2df0@set-rib-cache! G2df0@set-rib-cache!) (set! G49d4@G2dee@set-rib-sealed/freq! G2dee@set-rib-sealed/freq!) (set! G49d3@G2dec@set-rib-label*! G2dec@set-rib-label*!) (set! G49d2@G2dea@set-rib-mark**! G2dea@set-rib-mark**!) (set! G49d1@G2de8@set-rib-sym*! G2de8@set-rib-sym*!) (set! G49d0@G2de6@rib-cache G2de6@rib-cache) (set! G49cf@G2de4@rib-sealed/freq G2de4@rib-sealed/freq) (set! G49ce@G2de2@rib-label* G2de2@rib-label*) (set! G49cd@G2de0@rib-mark** G2de0@rib-mark**) (set! G49cc@G2dde@rib-sym* G2dde@rib-sym*) (set! G49cb@G2ddc@make-rib G2ddc@make-rib) (set! G49ca@G2dda@rib? G2dda@rib?) (set! G49c9@G2dd5@G2dcd G2dd5@G2dcd) (set! G49c8@G2dd3@G2dce G2dd3@G2dce) (set! G49c7@G2dd1@G2dcc G2dd1@G2dcc) (set! G49c6@G2dcb@gen-define-label G2dcb@gen-define-label) (set! G49c5@G2dc9@gen-define-label+loc G2dc9@gen-define-label+loc) (set! G49c4@G2dc7@gen-top-level-label G2dc7@gen-top-level-label) (set! G49c3@G2dc5@gen-label G2dc5@gen-label) (set! G49c2@G2dc3@gen-global G2dc3@gen-global) (set! G49c1@G2dc1@gen-lexical G2dc1@gen-lexical) (set! G49c0@G2dbf@top-marked? G2dbf@top-marked?) (set! G49bf@G2dbd@top-mark* G2dbd@top-mark*) (set! G49be@G2db8@set-union G2db8@set-union) (set! G49bd@G2db6@set-cons G2db6@set-cons) (G2c34@G2abf@current-library-expander G315f@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ad4@G4acf G4ad6@G4ad1 G4ad8@G4ad0 G4add@&condition? G4adf@make-&condition G4ae1@&condition-rtd G4ae3@&condition-rcd G4aeb@G4ae6 G4aed@G4ae8 G4aef@G4ae7 G4af4@G4ae5 G4af6@make-message-condition G4af8@G4ae4 G4afa@message-condition? G4afc@condition-message G4b03@G4afe G4b05@G4b00 G4b07@G4aff G4b0c@G4afd G4b0e@make-warning G4b10@warning? G4b17@G4b12 G4b19@G4b14 G4b1b@G4b13 G4b20@G4b11 G4b22@make-serious-condition G4b24@serious-condition? G4b2b@G4b26 G4b2d@G4b28 G4b2f@G4b27 G4b34@G4b25 G4b36@make-error G4b38@error? G4b3f@G4b3a G4b41@G4b3c G4b43@G4b3b G4b48@G4b39 G4b4a@make-violation G4b4c@violation? G4b53@G4b4e G4b55@G4b50 G4b57@G4b4f G4b5c@G4b4d G4b5e@make-assertion-violation G4b60@assertion-violation? G4b68@G4b63 G4b6a@G4b65 G4b6c@G4b64 G4b71@G4b62 G4b73@make-irritants-condition G4b75@G4b61 G4b77@irritants-condition? G4b79@condition-irritants G4b81@G4b7c G4b83@G4b7e G4b85@G4b7d G4b8a@G4b7b G4b8c@make-who-condition G4b8e@G4b7a G4b90@who-condition? G4b92@condition-who G4b99@G4b94 G4b9b@G4b96 G4b9d@G4b95 G4ba2@G4b93 G4ba4@make-non-continuable-violation G4ba6@non-continuable-violation? G4bad@G4ba8 G4baf@G4baa G4bb1@G4ba9 G4bb6@G4ba7 G4bb8@make-implementation-restriction-violation G4bba@implementation-restriction-violation? G4bc1@G4bbc G4bc3@G4bbe G4bc5@G4bbd G4bca@G4bbb G4bcc@make-lexical-violation G4bce@lexical-violation? G4bd7@G4bd2 G4bd9@G4bd4 G4bdb@G4bd3 G4be0@G4bd1 G4be2@make-syntax-violation G4be4@G4bcf G4be6@G4bd0 G4be8@syntax-violation? G4bea@syntax-violation-form G4bec@syntax-violation-subform G4bf3@G4bee G4bf5@G4bf0 G4bf7@G4bef G4bfc@G4bed G4bfe@make-undefined-violation G4c00@undefined-violation?) (begin (set! G4ad4@G4acf (make-record-type-descriptor '&condition '#f 'G4ad2 '#f '#f '#())) (set! G4ad6@G4ad1 '#f) (set! G4ad8@G4ad0 (make-record-constructor-descriptor G4ad4@G4acf '#f G4ad6@G4ad1)) (set! G4add@&condition? (record-predicate G4ad4@G4acf)) (set! G4adf@make-&condition (record-constructor G4ad8@G4ad0)) (set! G4ae1@&condition-rtd G4ad4@G4acf) (set! G4ae3@&condition-rcd G4ad8@G4ad0) (set! G4aeb@G4ae6 (make-record-type-descriptor '&message G4ad4@G4acf 'G4ae9 '#f '#f '#((immutable message)))) (set! G4aed@G4ae8 '#f) (set! G4aef@G4ae7 (make-record-constructor-descriptor G4aeb@G4ae6 G4ad8@G4ad0 G4aed@G4ae8)) (set! G4af4@G4ae5 (record-predicate G4aeb@G4ae6)) (set! G4af6@make-message-condition (record-constructor G4aef@G4ae7)) (set! G4af8@G4ae4 (record-accessor G4aeb@G4ae6 '0)) (set! G4afa@message-condition? (condition-predicate G4aeb@G4ae6)) (set! G4afc@condition-message (condition-accessor G4aeb@G4ae6 G4af8@G4ae4)) (set! G4b03@G4afe (make-record-type-descriptor '&warning G4ad4@G4acf 'G4b01 '#f '#f '#())) (set! G4b05@G4b00 '#f) (set! G4b07@G4aff (make-record-constructor-descriptor G4b03@G4afe G4ad8@G4ad0 G4b05@G4b00)) (set! G4b0c@G4afd (record-predicate G4b03@G4afe)) (set! G4b0e@make-warning (record-constructor G4b07@G4aff)) (set! G4b10@warning? (condition-predicate G4b03@G4afe)) (set! G4b17@G4b12 (make-record-type-descriptor '&serious G4ad4@G4acf 'G4b15 '#f '#f '#())) (set! G4b19@G4b14 '#f) (set! G4b1b@G4b13 (make-record-constructor-descriptor G4b17@G4b12 G4ad8@G4ad0 G4b19@G4b14)) (set! G4b20@G4b11 (record-predicate G4b17@G4b12)) (set! G4b22@make-serious-condition (record-constructor G4b1b@G4b13)) (set! G4b24@serious-condition? (condition-predicate G4b17@G4b12)) (set! G4b2b@G4b26 (make-record-type-descriptor '&error G4b17@G4b12 'G4b29 '#f '#f '#())) (set! G4b2d@G4b28 '#f) (set! G4b2f@G4b27 (make-record-constructor-descriptor G4b2b@G4b26 G4b1b@G4b13 G4b2d@G4b28)) (set! G4b34@G4b25 (record-predicate G4b2b@G4b26)) (set! G4b36@make-error (record-constructor G4b2f@G4b27)) (set! G4b38@error? (condition-predicate G4b2b@G4b26)) (set! G4b3f@G4b3a (make-record-type-descriptor '&violation G4b17@G4b12 'G4b3d '#f '#f '#())) (set! G4b41@G4b3c '#f) (set! G4b43@G4b3b (make-record-constructor-descriptor G4b3f@G4b3a G4b1b@G4b13 G4b41@G4b3c)) (set! G4b48@G4b39 (record-predicate G4b3f@G4b3a)) (set! G4b4a@make-violation (record-constructor G4b43@G4b3b)) (set! G4b4c@violation? (condition-predicate G4b3f@G4b3a)) (set! G4b53@G4b4e (make-record-type-descriptor '&assertion G4b3f@G4b3a 'G4b51 '#f '#f '#())) (set! G4b55@G4b50 '#f) (set! G4b57@G4b4f (make-record-constructor-descriptor G4b53@G4b4e G4b43@G4b3b G4b55@G4b50)) (set! G4b5c@G4b4d (record-predicate G4b53@G4b4e)) (set! G4b5e@make-assertion-violation (record-constructor G4b57@G4b4f)) (set! G4b60@assertion-violation? (condition-predicate G4b53@G4b4e)) (set! G4b68@G4b63 (make-record-type-descriptor '&irritants G4ad4@G4acf 'G4b66 '#f '#f '#((immutable irritants)))) (set! G4b6a@G4b65 '#f) (set! G4b6c@G4b64 (make-record-constructor-descriptor G4b68@G4b63 G4ad8@G4ad0 G4b6a@G4b65)) (set! G4b71@G4b62 (record-predicate G4b68@G4b63)) (set! G4b73@make-irritants-condition (record-constructor G4b6c@G4b64)) (set! G4b75@G4b61 (record-accessor G4b68@G4b63 '0)) (set! G4b77@irritants-condition? (condition-predicate G4b68@G4b63)) (set! G4b79@condition-irritants (condition-accessor G4b68@G4b63 G4b75@G4b61)) (set! G4b81@G4b7c (make-record-type-descriptor '&who G4ad4@G4acf 'G4b7f '#f '#f '#((immutable who)))) (set! G4b83@G4b7e '#f) (set! G4b85@G4b7d (make-record-constructor-descriptor G4b81@G4b7c G4ad8@G4ad0 G4b83@G4b7e)) (set! G4b8a@G4b7b (record-predicate G4b81@G4b7c)) (set! G4b8c@make-who-condition (record-constructor G4b85@G4b7d)) (set! G4b8e@G4b7a (record-accessor G4b81@G4b7c '0)) (set! G4b90@who-condition? (condition-predicate G4b81@G4b7c)) (set! G4b92@condition-who (condition-accessor G4b81@G4b7c G4b8e@G4b7a)) (set! G4b99@G4b94 (make-record-type-descriptor '&non-continuable G4b3f@G4b3a 'G4b97 '#f '#f '#())) (set! G4b9b@G4b96 '#f) (set! G4b9d@G4b95 (make-record-constructor-descriptor G4b99@G4b94 G4b43@G4b3b G4b9b@G4b96)) (set! G4ba2@G4b93 (record-predicate G4b99@G4b94)) (set! G4ba4@make-non-continuable-violation (record-constructor G4b9d@G4b95)) (set! G4ba6@non-continuable-violation? (condition-predicate G4b99@G4b94)) (set! G4bad@G4ba8 (make-record-type-descriptor '&implementation-restriction G4b3f@G4b3a 'G4bab '#f '#f '#())) (set! G4baf@G4baa '#f) (set! G4bb1@G4ba9 (make-record-constructor-descriptor G4bad@G4ba8 G4b43@G4b3b G4baf@G4baa)) (set! G4bb6@G4ba7 (record-predicate G4bad@G4ba8)) (set! G4bb8@make-implementation-restriction-violation (record-constructor G4bb1@G4ba9)) (set! G4bba@implementation-restriction-violation? (condition-predicate G4bad@G4ba8)) (set! G4bc1@G4bbc (make-record-type-descriptor '&lexical G4b3f@G4b3a 'G4bbf '#f '#f '#())) (set! G4bc3@G4bbe '#f) (set! G4bc5@G4bbd (make-record-constructor-descriptor G4bc1@G4bbc G4b43@G4b3b G4bc3@G4bbe)) (set! G4bca@G4bbb (record-predicate G4bc1@G4bbc)) (set! G4bcc@make-lexical-violation (record-constructor G4bc5@G4bbd)) (set! G4bce@lexical-violation? (condition-predicate G4bc1@G4bbc)) (set! G4bd7@G4bd2 (make-record-type-descriptor '&syntax G4b3f@G4b3a 'G4bd5 '#f '#f '#((immutable form) (immutable subform)))) (set! G4bd9@G4bd4 '#f) (set! G4bdb@G4bd3 (make-record-constructor-descriptor G4bd7@G4bd2 G4b43@G4b3b G4bd9@G4bd4)) (set! G4be0@G4bd1 (record-predicate G4bd7@G4bd2)) (set! G4be2@make-syntax-violation (record-constructor G4bdb@G4bd3)) (set! G4be4@G4bcf (record-accessor G4bd7@G4bd2 '0)) (set! G4be6@G4bd0 (record-accessor G4bd7@G4bd2 '1)) (set! G4be8@syntax-violation? (condition-predicate G4bd7@G4bd2)) (set! G4bea@syntax-violation-form (condition-accessor G4bd7@G4bd2 G4be4@G4bcf)) (set! G4bec@syntax-violation-subform (condition-accessor G4bd7@G4bd2 G4be6@G4bd0)) (set! G4bf3@G4bee (make-record-type-descriptor '&undefined G4b3f@G4b3a 'G4bf1 '#f '#f '#())) (set! G4bf5@G4bf0 '#f) (set! G4bf7@G4bef (make-record-constructor-descriptor G4bf3@G4bee G4b43@G4b3b G4bf5@G4bf0)) (set! G4bfc@G4bed (record-predicate G4bf3@G4bee)) (set! G4bfe@make-undefined-violation (record-constructor G4bf7@G4bef)) (set! G4c00@undefined-violation? (condition-predicate G4bf3@G4bee)) (begin (set! G4c5f@G4c00@undefined-violation? G4c00@undefined-violation?) (set! G4c5e@G4bfe@make-undefined-violation G4bfe@make-undefined-violation) (set! G4c5d@G4bfc@G4bed G4bfc@G4bed) (set! G4c5c@G4bf7@G4bef G4bf7@G4bef) (set! G4c5b@G4bf5@G4bf0 G4bf5@G4bf0) (set! G4c5a@G4bf3@G4bee G4bf3@G4bee) (set! G4c59@G4bec@syntax-violation-subform G4bec@syntax-violation-subform) (set! G4c58@G4bea@syntax-violation-form G4bea@syntax-violation-form) (set! G4c57@G4be8@syntax-violation? G4be8@syntax-violation?) (set! G4c56@G4be6@G4bd0 G4be6@G4bd0) (set! G4c55@G4be4@G4bcf G4be4@G4bcf) (set! G4c54@G4be2@make-syntax-violation G4be2@make-syntax-violation) (set! G4c53@G4be0@G4bd1 G4be0@G4bd1) (set! G4c52@G4bdb@G4bd3 G4bdb@G4bd3) (set! G4c51@G4bd9@G4bd4 G4bd9@G4bd4) (set! G4c50@G4bd7@G4bd2 G4bd7@G4bd2) (set! G4c4f@G4bce@lexical-violation? G4bce@lexical-violation?) (set! G4c4e@G4bcc@make-lexical-violation G4bcc@make-lexical-violation) (set! G4c4d@G4bca@G4bbb G4bca@G4bbb) (set! G4c4c@G4bc5@G4bbd G4bc5@G4bbd) (set! G4c4b@G4bc3@G4bbe G4bc3@G4bbe) (set! G4c4a@G4bc1@G4bbc G4bc1@G4bbc) (set! G4c49@G4bba@implementation-restriction-violation? G4bba@implementation-restriction-violation?) (set! G4c48@G4bb8@make-implementation-restriction-violation G4bb8@make-implementation-restriction-violation) (set! G4c47@G4bb6@G4ba7 G4bb6@G4ba7) (set! G4c46@G4bb1@G4ba9 G4bb1@G4ba9) (set! G4c45@G4baf@G4baa G4baf@G4baa) (set! G4c44@G4bad@G4ba8 G4bad@G4ba8) (set! G4c43@G4ba6@non-continuable-violation? G4ba6@non-continuable-violation?) (set! G4c42@G4ba4@make-non-continuable-violation G4ba4@make-non-continuable-violation) (set! G4c41@G4ba2@G4b93 G4ba2@G4b93) (set! G4c40@G4b9d@G4b95 G4b9d@G4b95) (set! G4c3f@G4b9b@G4b96 G4b9b@G4b96) (set! G4c3e@G4b99@G4b94 G4b99@G4b94) (set! G4c3d@G4b92@condition-who G4b92@condition-who) (set! G4c3c@G4b90@who-condition? G4b90@who-condition?) (set! G4c3b@G4b8e@G4b7a G4b8e@G4b7a) (set! G4c3a@G4b8c@make-who-condition G4b8c@make-who-condition) (set! G4c39@G4b8a@G4b7b G4b8a@G4b7b) (set! G4c38@G4b85@G4b7d G4b85@G4b7d) (set! G4c37@G4b83@G4b7e G4b83@G4b7e) (set! G4c36@G4b81@G4b7c G4b81@G4b7c) (set! G4c35@G4b79@condition-irritants G4b79@condition-irritants) (set! G4c34@G4b77@irritants-condition? G4b77@irritants-condition?) (set! G4c33@G4b75@G4b61 G4b75@G4b61) (set! G4c32@G4b73@make-irritants-condition G4b73@make-irritants-condition) (set! G4c31@G4b71@G4b62 G4b71@G4b62) (set! G4c30@G4b6c@G4b64 G4b6c@G4b64) (set! G4c2f@G4b6a@G4b65 G4b6a@G4b65) (set! G4c2e@G4b68@G4b63 G4b68@G4b63) (set! G4c2d@G4b60@assertion-violation? G4b60@assertion-violation?) (set! G4c2c@G4b5e@make-assertion-violation G4b5e@make-assertion-violation) (set! G4c2b@G4b5c@G4b4d G4b5c@G4b4d) (set! G4c2a@G4b57@G4b4f G4b57@G4b4f) (set! G4c29@G4b55@G4b50 G4b55@G4b50) (set! G4c28@G4b53@G4b4e G4b53@G4b4e) (set! G4c27@G4b4c@violation? G4b4c@violation?) (set! G4c26@G4b4a@make-violation G4b4a@make-violation) (set! G4c25@G4b48@G4b39 G4b48@G4b39) (set! G4c24@G4b43@G4b3b G4b43@G4b3b) (set! G4c23@G4b41@G4b3c G4b41@G4b3c) (set! G4c22@G4b3f@G4b3a G4b3f@G4b3a) (set! G4c21@G4b38@error? G4b38@error?) (set! G4c20@G4b36@make-error G4b36@make-error) (set! G4c1f@G4b34@G4b25 G4b34@G4b25) (set! G4c1e@G4b2f@G4b27 G4b2f@G4b27) (set! G4c1d@G4b2d@G4b28 G4b2d@G4b28) (set! G4c1c@G4b2b@G4b26 G4b2b@G4b26) (set! G4c1b@G4b24@serious-condition? G4b24@serious-condition?) (set! G4c1a@G4b22@make-serious-condition G4b22@make-serious-condition) (set! G4c19@G4b20@G4b11 G4b20@G4b11) (set! G4c18@G4b1b@G4b13 G4b1b@G4b13) (set! G4c17@G4b19@G4b14 G4b19@G4b14) (set! G4c16@G4b17@G4b12 G4b17@G4b12) (set! G4c15@G4b10@warning? G4b10@warning?) (set! G4c14@G4b0e@make-warning G4b0e@make-warning) (set! G4c13@G4b0c@G4afd G4b0c@G4afd) (set! G4c12@G4b07@G4aff G4b07@G4aff) (set! G4c11@G4b05@G4b00 G4b05@G4b00) (set! G4c10@G4b03@G4afe G4b03@G4afe) (set! G4c0f@G4afc@condition-message G4afc@condition-message) (set! G4c0e@G4afa@message-condition? G4afa@message-condition?) (set! G4c0d@G4af8@G4ae4 G4af8@G4ae4) (set! G4c0c@G4af6@make-message-condition G4af6@make-message-condition) (set! G4c0b@G4af4@G4ae5 G4af4@G4ae5) (set! G4c0a@G4aef@G4ae7 G4aef@G4ae7) (set! G4c09@G4aed@G4ae8 G4aed@G4ae8) (set! G4c08@G4aeb@G4ae6 G4aeb@G4ae6) (set! G4c07@G4ae3@&condition-rcd G4ae3@&condition-rcd) (set! G4c06@G4ae1@&condition-rtd G4ae1@&condition-rtd) (set! G4c05@G4adf@make-&condition G4adf@make-&condition) (set! G4c04@G4add@&condition? G4add@&condition?) (set! G4c03@G4ad8@G4ad0 G4ad8@G4ad0) (set! G4c02@G4ad6@G4ad1 G4ad6@G4ad1) (set! G4c01@G4ad4@G4acf G4ad4@G4acf)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c67@G4c62 G4c69@G4c64 G4c6b@G4c63 G4c70@G4c61 G4c72@make-i/o-error G4c74@i/o-error? G4c7b@G4c76 G4c7d@G4c78 G4c7f@G4c77 G4c84@G4c75 G4c86@make-i/o-read-error G4c88@i/o-read-error? G4c8f@G4c8a G4c91@G4c8c G4c93@G4c8b G4c98@G4c89 G4c9a@make-i/o-write-error G4c9c@i/o-write-error? G4ca4@G4c9f G4ca6@G4ca1 G4ca8@G4ca0 G4cad@G4c9e G4caf@make-i/o-invalid-position-error G4cb1@G4c9d G4cb3@i/o-invalid-position-error? G4cb5@i/o-error-position G4cbd@G4cb8 G4cbf@G4cba G4cc1@G4cb9 G4cc6@G4cb7 G4cc8@make-i/o-filename-error G4cca@G4cb6 G4ccc@i/o-filename-error? G4cce@i/o-error-filename G4cd5@G4cd0 G4cd7@G4cd2 G4cd9@G4cd1 G4cde@G4ccf G4ce0@make-i/o-file-protection-error G4ce2@i/o-file-protection-error? G4ce9@G4ce4 G4ceb@G4ce6 G4ced@G4ce5 G4cf2@G4ce3 G4cf4@make-i/o-file-is-read-only-error G4cf6@i/o-file-is-read-only-error? G4cfd@G4cf8 G4cff@G4cfa G4d01@G4cf9 G4d06@G4cf7 G4d08@make-i/o-file-already-exists-error G4d0a@i/o-file-already-exists-error? G4d11@G4d0c G4d13@G4d0e G4d15@G4d0d G4d1a@G4d0b G4d1c@make-i/o-file-does-not-exist-error G4d1e@i/o-file-does-not-exist-error? G4d26@G4d21 G4d28@G4d23 G4d2a@G4d22 G4d2f@G4d20 G4d31@make-i/o-port-error G4d33@G4d1f G4d35@i/o-port-error? G4d37@i/o-error-port G4d3e@G4d39 G4d40@G4d3b G4d42@G4d3a G4d47@G4d38 G4d49@make-i/o-decoding-error G4d4b@i/o-decoding-error? G4d53@G4d4e G4d55@G4d50 G4d57@G4d4f G4d5c@G4d4d G4d5e@make-i/o-encoding-error G4d60@G4d4c G4d62@i/o-encoding-error? G4d64@i/o-encoding-error-char) (begin (set! G4c67@G4c62 (make-record-type-descriptor '&i/o &error-rtd 'G4c65 '#f '#f '#())) (set! G4c69@G4c64 '#f) (set! G4c6b@G4c63 (make-record-constructor-descriptor G4c67@G4c62 &error-rcd G4c69@G4c64)) (set! G4c70@G4c61 (record-predicate G4c67@G4c62)) (set! G4c72@make-i/o-error (record-constructor G4c6b@G4c63)) (set! G4c74@i/o-error? (condition-predicate G4c67@G4c62)) (set! G4c7b@G4c76 (make-record-type-descriptor '&i/o-read G4c67@G4c62 'G4c79 '#f '#f '#())) (set! G4c7d@G4c78 '#f) (set! G4c7f@G4c77 (make-record-constructor-descriptor G4c7b@G4c76 G4c6b@G4c63 G4c7d@G4c78)) (set! G4c84@G4c75 (record-predicate G4c7b@G4c76)) (set! G4c86@make-i/o-read-error (record-constructor G4c7f@G4c77)) (set! G4c88@i/o-read-error? (condition-predicate G4c7b@G4c76)) (set! G4c8f@G4c8a (make-record-type-descriptor '&i/o-write G4c67@G4c62 'G4c8d '#f '#f '#())) (set! G4c91@G4c8c '#f) (set! G4c93@G4c8b (make-record-constructor-descriptor G4c8f@G4c8a G4c6b@G4c63 G4c91@G4c8c)) (set! G4c98@G4c89 (record-predicate G4c8f@G4c8a)) (set! G4c9a@make-i/o-write-error (record-constructor G4c93@G4c8b)) (set! G4c9c@i/o-write-error? (condition-predicate G4c8f@G4c8a)) (set! G4ca4@G4c9f (make-record-type-descriptor '&i/o-invalid-position G4c67@G4c62 'G4ca2 '#f '#f '#((immutable position)))) (set! G4ca6@G4ca1 '#f) (set! G4ca8@G4ca0 (make-record-constructor-descriptor G4ca4@G4c9f G4c6b@G4c63 G4ca6@G4ca1)) (set! G4cad@G4c9e (record-predicate G4ca4@G4c9f)) (set! G4caf@make-i/o-invalid-position-error (record-constructor G4ca8@G4ca0)) (set! G4cb1@G4c9d (record-accessor G4ca4@G4c9f '0)) (set! G4cb3@i/o-invalid-position-error? (condition-predicate G4ca4@G4c9f)) (set! G4cb5@i/o-error-position (condition-accessor G4ca4@G4c9f G4cb1@G4c9d)) (set! G4cbd@G4cb8 (make-record-type-descriptor '&i/o-filename G4c67@G4c62 'G4cbb '#f '#f '#((immutable filename)))) (set! G4cbf@G4cba '#f) (set! G4cc1@G4cb9 (make-record-constructor-descriptor G4cbd@G4cb8 G4c6b@G4c63 G4cbf@G4cba)) (set! G4cc6@G4cb7 (record-predicate G4cbd@G4cb8)) (set! G4cc8@make-i/o-filename-error (record-constructor G4cc1@G4cb9)) (set! G4cca@G4cb6 (record-accessor G4cbd@G4cb8 '0)) (set! G4ccc@i/o-filename-error? (condition-predicate G4cbd@G4cb8)) (set! G4cce@i/o-error-filename (condition-accessor G4cbd@G4cb8 G4cca@G4cb6)) (set! G4cd5@G4cd0 (make-record-type-descriptor '&i/o-file-protection G4c67@G4c62 'G4cd3 '#f '#f '#())) (set! G4cd7@G4cd2 '#f) (set! G4cd9@G4cd1 (make-record-constructor-descriptor G4cd5@G4cd0 G4c6b@G4c63 G4cd7@G4cd2)) (set! G4cde@G4ccf (record-predicate G4cd5@G4cd0)) (set! G4ce0@make-i/o-file-protection-error (record-constructor G4cd9@G4cd1)) (set! G4ce2@i/o-file-protection-error? (condition-predicate G4cd5@G4cd0)) (set! G4ce9@G4ce4 (make-record-type-descriptor '&i/o-file-is-read-only G4cd5@G4cd0 'G4ce7 '#f '#f '#())) (set! G4ceb@G4ce6 '#f) (set! G4ced@G4ce5 (make-record-constructor-descriptor G4ce9@G4ce4 G4cd9@G4cd1 G4ceb@G4ce6)) (set! G4cf2@G4ce3 (record-predicate G4ce9@G4ce4)) (set! G4cf4@make-i/o-file-is-read-only-error (record-constructor G4ced@G4ce5)) (set! G4cf6@i/o-file-is-read-only-error? (condition-predicate G4ce9@G4ce4)) (set! G4cfd@G4cf8 (make-record-type-descriptor '&i/o-file-already-exists G4cbd@G4cb8 'G4cfb '#f '#f '#())) (set! G4cff@G4cfa '#f) (set! G4d01@G4cf9 (make-record-constructor-descriptor G4cfd@G4cf8 G4cc1@G4cb9 G4cff@G4cfa)) (set! G4d06@G4cf7 (record-predicate G4cfd@G4cf8)) (set! G4d08@make-i/o-file-already-exists-error (record-constructor G4d01@G4cf9)) (set! G4d0a@i/o-file-already-exists-error? (condition-predicate G4cfd@G4cf8)) (set! G4d11@G4d0c (make-record-type-descriptor '&i/o-file-does-not-exist G4cbd@G4cb8 'G4d0f '#f '#f '#())) (set! G4d13@G4d0e '#f) (set! G4d15@G4d0d (make-record-constructor-descriptor G4d11@G4d0c G4cc1@G4cb9 G4d13@G4d0e)) (set! G4d1a@G4d0b (record-predicate G4d11@G4d0c)) (set! G4d1c@make-i/o-file-does-not-exist-error (record-constructor G4d15@G4d0d)) (set! G4d1e@i/o-file-does-not-exist-error? (condition-predicate G4d11@G4d0c)) (set! G4d26@G4d21 (make-record-type-descriptor '&i/o-port G4c67@G4c62 'G4d24 '#f '#f '#((immutable port)))) (set! G4d28@G4d23 '#f) (set! G4d2a@G4d22 (make-record-constructor-descriptor G4d26@G4d21 G4c6b@G4c63 G4d28@G4d23)) (set! G4d2f@G4d20 (record-predicate G4d26@G4d21)) (set! G4d31@make-i/o-port-error (record-constructor G4d2a@G4d22)) (set! G4d33@G4d1f (record-accessor G4d26@G4d21 '0)) (set! G4d35@i/o-port-error? (condition-predicate G4d26@G4d21)) (set! G4d37@i/o-error-port (condition-accessor G4d26@G4d21 G4d33@G4d1f)) (set! G4d3e@G4d39 (make-record-type-descriptor '&i/o-decoding G4d26@G4d21 'G4d3c '#f '#f '#())) (set! G4d40@G4d3b '#f) (set! G4d42@G4d3a (make-record-constructor-descriptor G4d3e@G4d39 G4d2a@G4d22 G4d40@G4d3b)) (set! G4d47@G4d38 (record-predicate G4d3e@G4d39)) (set! G4d49@make-i/o-decoding-error (record-constructor G4d42@G4d3a)) (set! G4d4b@i/o-decoding-error? (condition-predicate G4d3e@G4d39)) (set! G4d53@G4d4e (make-record-type-descriptor '&i/o-encoding G4d26@G4d21 'G4d51 '#f '#f '#((immutable char)))) (set! G4d55@G4d50 '#f) (set! G4d57@G4d4f (make-record-constructor-descriptor G4d53@G4d4e G4d2a@G4d22 G4d55@G4d50)) (set! G4d5c@G4d4d (record-predicate G4d53@G4d4e)) (set! G4d5e@make-i/o-encoding-error (record-constructor G4d57@G4d4f)) (set! G4d60@G4d4c (record-accessor G4d53@G4d4e '0)) (set! G4d62@i/o-encoding-error? (condition-predicate G4d53@G4d4e)) (set! G4d64@i/o-encoding-error-char (condition-accessor G4d53@G4d4e G4d60@G4d4c)) (begin (set! G4db4@G4d64@i/o-encoding-error-char G4d64@i/o-encoding-error-char) (set! G4db3@G4d62@i/o-encoding-error? G4d62@i/o-encoding-error?) (set! G4db2@G4d60@G4d4c G4d60@G4d4c) (set! G4db1@G4d5e@make-i/o-encoding-error G4d5e@make-i/o-encoding-error) (set! G4db0@G4d5c@G4d4d G4d5c@G4d4d) (set! G4daf@G4d57@G4d4f G4d57@G4d4f) (set! G4dae@G4d55@G4d50 G4d55@G4d50) (set! G4dad@G4d53@G4d4e G4d53@G4d4e) (set! G4dac@G4d4b@i/o-decoding-error? G4d4b@i/o-decoding-error?) (set! G4dab@G4d49@make-i/o-decoding-error G4d49@make-i/o-decoding-error) (set! G4daa@G4d47@G4d38 G4d47@G4d38) (set! G4da9@G4d42@G4d3a G4d42@G4d3a) (set! G4da8@G4d40@G4d3b G4d40@G4d3b) (set! G4da7@G4d3e@G4d39 G4d3e@G4d39) (set! G4da6@G4d37@i/o-error-port G4d37@i/o-error-port) (set! G4da5@G4d35@i/o-port-error? G4d35@i/o-port-error?) (set! G4da4@G4d33@G4d1f G4d33@G4d1f) (set! G4da3@G4d31@make-i/o-port-error G4d31@make-i/o-port-error) (set! G4da2@G4d2f@G4d20 G4d2f@G4d20) (set! G4da1@G4d2a@G4d22 G4d2a@G4d22) (set! G4da0@G4d28@G4d23 G4d28@G4d23) (set! G4d9f@G4d26@G4d21 G4d26@G4d21) (set! G4d9e@G4d1e@i/o-file-does-not-exist-error? G4d1e@i/o-file-does-not-exist-error?) (set! G4d9d@G4d1c@make-i/o-file-does-not-exist-error G4d1c@make-i/o-file-does-not-exist-error) (set! G4d9c@G4d1a@G4d0b G4d1a@G4d0b) (set! G4d9b@G4d15@G4d0d G4d15@G4d0d) (set! G4d9a@G4d13@G4d0e G4d13@G4d0e) (set! G4d99@G4d11@G4d0c G4d11@G4d0c) (set! G4d98@G4d0a@i/o-file-already-exists-error? G4d0a@i/o-file-already-exists-error?) (set! G4d97@G4d08@make-i/o-file-already-exists-error G4d08@make-i/o-file-already-exists-error) (set! G4d96@G4d06@G4cf7 G4d06@G4cf7) (set! G4d95@G4d01@G4cf9 G4d01@G4cf9) (set! G4d94@G4cff@G4cfa G4cff@G4cfa) (set! G4d93@G4cfd@G4cf8 G4cfd@G4cf8) (set! G4d92@G4cf6@i/o-file-is-read-only-error? G4cf6@i/o-file-is-read-only-error?) (set! G4d91@G4cf4@make-i/o-file-is-read-only-error G4cf4@make-i/o-file-is-read-only-error) (set! G4d90@G4cf2@G4ce3 G4cf2@G4ce3) (set! G4d8f@G4ced@G4ce5 G4ced@G4ce5) (set! G4d8e@G4ceb@G4ce6 G4ceb@G4ce6) (set! G4d8d@G4ce9@G4ce4 G4ce9@G4ce4) (set! G4d8c@G4ce2@i/o-file-protection-error? G4ce2@i/o-file-protection-error?) (set! G4d8b@G4ce0@make-i/o-file-protection-error G4ce0@make-i/o-file-protection-error) (set! G4d8a@G4cde@G4ccf G4cde@G4ccf) (set! G4d89@G4cd9@G4cd1 G4cd9@G4cd1) (set! G4d88@G4cd7@G4cd2 G4cd7@G4cd2) (set! G4d87@G4cd5@G4cd0 G4cd5@G4cd0) (set! G4d86@G4cce@i/o-error-filename G4cce@i/o-error-filename) (set! G4d85@G4ccc@i/o-filename-error? G4ccc@i/o-filename-error?) (set! G4d84@G4cca@G4cb6 G4cca@G4cb6) (set! G4d83@G4cc8@make-i/o-filename-error G4cc8@make-i/o-filename-error) (set! G4d82@G4cc6@G4cb7 G4cc6@G4cb7) (set! G4d81@G4cc1@G4cb9 G4cc1@G4cb9) (set! G4d80@G4cbf@G4cba G4cbf@G4cba) (set! G4d7f@G4cbd@G4cb8 G4cbd@G4cb8) (set! G4d7e@G4cb5@i/o-error-position G4cb5@i/o-error-position) (set! G4d7d@G4cb3@i/o-invalid-position-error? G4cb3@i/o-invalid-position-error?) (set! G4d7c@G4cb1@G4c9d G4cb1@G4c9d) (set! G4d7b@G4caf@make-i/o-invalid-position-error G4caf@make-i/o-invalid-position-error) (set! G4d7a@G4cad@G4c9e G4cad@G4c9e) (set! G4d79@G4ca8@G4ca0 G4ca8@G4ca0) (set! G4d78@G4ca6@G4ca1 G4ca6@G4ca1) (set! G4d77@G4ca4@G4c9f G4ca4@G4c9f) (set! G4d76@G4c9c@i/o-write-error? G4c9c@i/o-write-error?) (set! G4d75@G4c9a@make-i/o-write-error G4c9a@make-i/o-write-error) (set! G4d74@G4c98@G4c89 G4c98@G4c89) (set! G4d73@G4c93@G4c8b G4c93@G4c8b) (set! G4d72@G4c91@G4c8c G4c91@G4c8c) (set! G4d71@G4c8f@G4c8a G4c8f@G4c8a) (set! G4d70@G4c88@i/o-read-error? G4c88@i/o-read-error?) (set! G4d6f@G4c86@make-i/o-read-error G4c86@make-i/o-read-error) (set! G4d6e@G4c84@G4c75 G4c84@G4c75) (set! G4d6d@G4c7f@G4c77 G4c7f@G4c77) (set! G4d6c@G4c7d@G4c78 G4c7d@G4c78) (set! G4d6b@G4c7b@G4c76 G4c7b@G4c76) (set! G4d6a@G4c74@i/o-error? G4c74@i/o-error?) (set! G4d69@G4c72@make-i/o-error G4c72@make-i/o-error) (set! G4d68@G4c70@G4c61 G4c70@G4c61) (set! G4d67@G4c6b@G4c63 G4c6b@G4c63) (set! G4d66@G4c69@G4c64 G4c69@G4c64) (set! G4d65@G4c67@G4c62 G4c67@G4c62)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29fc@G29a1@current-primitive-locations (lambda (G518a@x) ((lambda (G518c@t) (if G518c@t (cdr G518c@t) '#f)) (assq G518a@x '((syntax-error . G4ac0@G3179@syntax-error) (syntax-dispatch . G4a54@G308c@syntax-dispatch) (load . G4e51@G4dc3@load) (interaction-environment . G4ac9@G318b@interaction-environment) (make-parameter . G299b@G28a6@make-parameter) (make-variable-transformer . G4a14@G2e8a@make-variable-transformer) (identifier? . G4ac4@G3181@identifier?) (generate-temporaries . G4ab9@G316b@generate-temporaries) (free-identifier=? . G4aba@G316d@free-identifier=?) (syntax->datum . G4ac6@G3185@syntax->datum) (datum->syntax . G4ac5@G3183@datum->syntax) (bound-identifier=? . G4abb@G316f@bound-identifier=?) (make-i/o-write-error . G4d75@G4c9a@make-i/o-write-error) (make-i/o-read-error . G4d6f@G4c86@make-i/o-read-error) (make-i/o-port-error . G4da3@G4d31@make-i/o-port-error) (make-i/o-invalid-position-error . G4d7b@G4caf@make-i/o-invalid-position-error) (make-i/o-filename-error . G4d83@G4cc8@make-i/o-filename-error) (make-i/o-file-protection-error . G4d8b@G4ce0@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4d91@G4cf4@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4d9d@G4d1c@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4d97@G4d08@make-i/o-file-already-exists-error) (make-i/o-error . G4d69@G4c72@make-i/o-error) (make-i/o-encoding-error . G4db1@G4d5e@make-i/o-encoding-error) (make-i/o-decoding-error . G4dab@G4d49@make-i/o-decoding-error) (i/o-write-error? . G4d76@G4c9c@i/o-write-error?) (i/o-read-error? . G4d70@G4c88@i/o-read-error?) (i/o-port-error? . G4da5@G4d35@i/o-port-error?) (i/o-invalid-position-error? . G4d7d@G4cb3@i/o-invalid-position-error?) (i/o-filename-error? . G4d85@G4ccc@i/o-filename-error?) (i/o-file-protection-error? . G4d8c@G4ce2@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4d92@G4cf6@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4d9e@G4d1e@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4d98@G4d0a@i/o-file-already-exists-error?) (i/o-error? . G4d6a@G4c74@i/o-error?) (i/o-error-port . G4da6@G4d37@i/o-error-port) (i/o-error-filename . G4d86@G4cce@i/o-error-filename) (i/o-encoding-error? . G4db3@G4d62@i/o-encoding-error?) (i/o-encoding-error-char . G4db4@G4d64@i/o-encoding-error-char) (i/o-decoding-error? . G4dac@G4d4b@i/o-decoding-error?) (scheme-report-environment . G4ab0@G3159@scheme-report-environment) (null-environment . G4aaf@G3157@null-environment) (command-line . G4e4e@G4dbd@command-line) (eval . G4ab2@G315d@eval) (environment . G4aae@G3155@environment) (who-condition? . G4c3c@G4b90@who-condition?) (warning? . G4c15@G4b10@warning?) (violation? . G4c27@G4b4c@violation?) (undefined-violation? . G4c5f@G4c00@undefined-violation?) (syntax-violation? . G4c57@G4be8@syntax-violation?) (syntax-violation-subform . G4c59@G4bec@syntax-violation-subform) (syntax-violation-form . G4c58@G4bea@syntax-violation-form) (syntax-violation . G4ac3@G317f@syntax-violation) (serious-condition? . G4c1b@G4b24@serious-condition?) (non-continuable-violation? . G4c43@G4ba6@non-continuable-violation?) (message-condition? . G4c0e@G4afa@message-condition?) (make-who-condition . G4c3a@G4b8c@make-who-condition) (make-warning . G4c14@G4b0e@make-warning) (make-violation . G4c26@G4b4a@make-violation) (make-undefined-violation . G4c5e@G4bfe@make-undefined-violation) (make-syntax-violation . G4c54@G4be2@make-syntax-violation) (make-serious-condition . G4c1a@G4b22@make-serious-condition) (make-non-continuable-violation . G4c42@G4ba4@make-non-continuable-violation) (make-message-condition . G4c0c@G4af6@make-message-condition) (make-lexical-violation . G4c4e@G4bcc@make-lexical-violation) (make-irritants-condition . G4c32@G4b73@make-irritants-condition) (make-implementation-restriction-violation . G4c48@G4bb8@make-implementation-restriction-violation) (make-error . G4c20@G4b36@make-error) (make-assertion-violation . G4c2c@G4b5e@make-assertion-violation) (lexical-violation? . G4c4f@G4bce@lexical-violation?) (irritants-condition? . G4c34@G4b77@irritants-condition?) (implementation-restriction-violation? . G4c49@G4bba@implementation-restriction-violation?) (error? . G4c21@G4b38@error?) (condition-who . G4c3d@G4b92@condition-who) (condition-message . G4c0f@G4afc@condition-message) (condition-irritants . G4c35@G4b79@condition-irritants) (assertion-violation? . G4c2d@G4b60@assertion-violation?)))))) (G2c3c@G2acf@install-library 'G515d '(mosh interaction) '() '() '() '() '((string-upcase . G50da) (string-titlecase . G50d9) (string-normalize-nfkd . G50d8) (string-normalize-nfkc . G50d7) (string-normalize-nfd . G50d6) (string-normalize-nfc . G50d5) (string-foldcase . G50d4) (string-downcase . G50d3) (string-ci>? . G50d2) (string-ci>=? . G50d1) (string-ci=? . G50d0) (string-ci<? . G50cf) (string-ci<=? . G50ce) (char-whitespace? . G50cd) (char-upper-case? . G50cc) (char-title-case? . G50cb) (char-numeric? . G50ca) (char-lower-case? . G50c9) (char-general-category . G50c8) (char-upcase . G50c7) (char-titlecase . G50c6) (char-foldcase . G50c5) (char-downcase . G50c4) (char-ci>? . G50c3) (char-ci>=? . G50c2) (char-ci=? . G50c1) (char-ci<? . G50c0) (char-ci<=? . G50bf) (char-alphabetic? . G50be) (make-variable-transformer . G2e89) (identifier? . G3180) (generate-temporaries . G316a) (free-identifier=? . G316c) (syntax->datum . G3184) (datum->syntax . G3182) (bound-identifier=? . G316e) (record-type-descriptor? . G50bd) (record-predicate . G50bc) (record-mutator . G50bb) (record-constructor . G50ba) (record-accessor . G50b9) (make-record-type-descriptor . G50b8) (make-record-constructor-descriptor . G50b7) (record? . G50b6) (record-type-uid . G50b5) (record-type-sealed? . G50b4) (record-type-parent . G50b3) (record-type-opaque? . G50b2) (record-type-name . G50b1) (record-type-generative? . G50b0) (record-type-field-names . G50af) (record-rtd . G50ae) (record-field-mutable? . G50ad) (delete-file . G50ac) (file-exists? . G50ab) (vector-sort! . G50aa) (vector-sort . G50a9) (list-sort . G50a8) (symbol-hash . G50a7) (string-ci-hash . G50a6) (string-hash . G50a5) (equal-hash . G50a4) (hashtable-equivalence-function . G50a3) (make-hashtable . G50a2) (hashtable-hash-function . G50a1) (make-eqv-hashtable . G50a0) (make-eq-hashtable . G509f) (hashtable? . G509e) (hashtable-update! . G509d) (hashtable-size . G509c) (hashtable-set! . G509b) (hashtable-ref . G509a) (hashtable-mutable? . G5099) (hashtable-keys . G5098) (hashtable-entries . G5097) (hashtable-delete! . G5096) (hashtable-copy . G5095) (hashtable-contains? . G5094) (hashtable-clear! . G5093) (call-with-output-file . G5092) (call-with-input-file . G5091) (write-char . G5090) (write . G508f) (with-output-to-file . G508e) (with-input-from-file . G508d) (read-char . G508c) (read . G508b) (peek-char . G508a) (open-output-file . G5089) (open-input-file . G5088) (newline . G5087) (display . G5086) (close-output-port . G5085) (close-input-port . G5084) (eof-object? . G5083) (eof-object . G5082) (current-error-port . G5081) (current-output-port . G5080) (current-input-port . G507f) (output-port? . G507e) (input-port? . G507d) (utf-8-codec . G507c) (utf-16-codec . G507b) (transcoder-error-handling-mode . G507a) (transcoder-eol-style . G5079) (transcoder-codec . G5078) (transcoded-port . G5077) (textual-port? . G5076) (string->bytevector . G5075) (standard-output-port . G5074) (standard-input-port . G5073) (standard-error-port . G5072) (set-port-position! . G5071) (put-u8 . G5070) (put-string . G506f) (put-datum . G506e) (put-char . G506d) (put-bytevector . G506c) (port? . G506b) (port-transcoder . G506a) (port-position . G5069) (port-has-set-port-position!? . G5068) (port-has-port-position? . G5067) (port-eof? . G5066) (output-port-buffer-mode . G5065) (open-string-output-port . G5064) (open-string-input-port . G5063) (open-file-output-port . G5062) (open-file-input/output-port . G5061) (open-file-input-port . G5060) (open-bytevector-output-port . G505f) (open-bytevector-input-port . G505e) (native-transcoder . G505d) (native-eol-style . G505c) (make-transcoder . G505b) (latin-1-codec . G505a) (make-i/o-write-error . G4c99) (make-i/o-read-error . G4c85) (make-i/o-port-error . G4d30) (make-i/o-invalid-position-error . G4cae) (make-i/o-filename-error . G4cc7) (make-i/o-file-protection-error . G4cdf) (make-i/o-file-is-read-only-error . G4cf3) (make-i/o-file-does-not-exist-error . G4d1b) (make-i/o-file-already-exists-error . G4d07) (make-i/o-error . G4c71) (make-i/o-encoding-error . G4d5d) (make-i/o-decoding-error . G4d48) (make-custom-textual-output-port . G5059) (make-custom-textual-input/output-port . G5058) (make-custom-textual-input-port . G5057) (make-custom-binary-output-port . G5056) (make-custom-binary-input/output-port . G5055) (make-custom-binary-input-port . G5054) (make-bytevector . G5053) (lookahead-u8 . G5052) (lookahead-char . G5051) (i/o-write-error? . G4c9b) (i/o-read-error? . G4c87) (i/o-port-error? . G4d34) (i/o-invalid-position-error? . G4cb2) (i/o-filename-error? . G4ccb) (i/o-file-protection-error? . G4ce1) (i/o-file-is-read-only-error? . G4cf5) (i/o-file-does-not-exist-error? . G4d1d) (i/o-file-already-exists-error? . G4d09) (i/o-error? . G4c73) (i/o-error-port . G4d36) (i/o-error-filename . G4ccd) (i/o-encoding-error? . G4d61) (i/o-encoding-error-char . G4d63) (i/o-decoding-error? . G4d4a) (get-u8 . G5050) (get-string-n! . G504f) (get-string-n . G504e) (get-string-all . G504d) (get-line . G504c) (get-datum . G504b) (get-char . G504a) (get-bytevector-some . G5049) (get-bytevector-n! . G5048) (get-bytevector-n . G5047) (get-bytevector-all . G5046) (flush-output-port . G5045) (close-port . G5044) (exit . G503d) (command-line . G4dbc) (string-fill! . G503c) (string-set! . G503b) (set-cdr! . G503a) (set-car! . G5039) (remove . G5038) (remv . G5037) (remp . G5036) (remq . G5035) (partition . G5034) (memv . G5033) (memq . G5032) (memp . G5031) (member . G5030) (exists . G502f) (for-all . G502e) (fold-right . G502d) (fold-left . G502c) (find . G502b) (filter . G502a) (cons* . G5029) (assv . G5028) (assq . G5027) (assp . G5026) (assoc . G5025) (call-with-string-output-port . G5024) (call-with-port . G5023) (call-with-bytevector-output-port . G5022) (bytevector->string . G5021) (buffer-mode? . G5020) (binary-port? . G501f) (with-exception-handler . G501e) (raise-continuable . G501d) (raise . G501c) (eval . G315c) (environment . G3154) (make-enumeration . G501b) (enum-set=? . G501a) (enum-set-universe . G5019) (enum-set-union . G5018) (enum-set-subset? . G5017) (enum-set-projection . G5016) (enum-set-member? . G5015) (enum-set-intersection . G5014) (enum-set-indexer . G5013) (enum-set-difference . G5012) (enum-set-constructor . G5011) (enum-set-complement . G5010) (enum-set->list . G500f) (who-condition? . G4b8f) (warning? . G4b0f) (violation? . G4b4b) (undefined-violation? . G4bff) (syntax-violation? . G4be7) (syntax-violation-subform . G4beb) (syntax-violation-form . G4be9) (syntax-violation . G317e) (simple-conditions . G500e) (serious-condition? . G4b23) (non-continuable-violation? . G4ba5) (message-condition? . G4af9) (make-who-condition . G4b8b) (make-warning . G4b0d) (make-violation . G4b49) (make-undefined-violation . G4bfd) (make-syntax-violation . G4be1) (make-serious-condition . G4b21) (make-non-continuable-violation . G4ba3) (make-message-condition . G4af5) (make-lexical-violation . G4bcb) (make-irritants-condition . G4b72) (make-implementation-restriction-violation . G4bb7) (make-error . G4b35) (make-assertion-violation . G4b5d) (lexical-violation? . G4bcd) (irritants-condition? . G4b76) (implementation-restriction-violation? . G4bb9) (error? . G4b37) (condition-who . G4b91) (condition-predicate . G500d) (condition-message . G4afb) (condition-irritants . G4b78) (condition-accessor . G500c) (condition . G500b) (assertion-violation? . G4b5f) (condition? . G500a) (utf32->string . G5009) (utf16->string . G5008) (utf8->string . G5007) (uint-list->bytevector . G5006) (u8-list->bytevector . G5005) (string->utf8 . G5004) (string->utf32 . G5003) (string->utf16 . G5002) (sint-list->bytevector . G5001) (native-endianness . G5000) (bytevector? . G4fff) (bytevector=? . G4ffe) (bytevector-uint-set! . G4ffd) (bytevector-uint-ref . G4ffc) (bytevector-u8-set! . G4ffb) (bytevector-u8-ref . G4ffa) (bytevector-u64-set! . G4ff9) (bytevector-u64-ref . G4ff8) (bytevector-u64-native-set! . G4ff7) (bytevector-u64-native-ref . G4ff6) (bytevector-u32-set! . G4ff5) (bytevector-u32-ref . G4ff4) (bytevector-u32-native-set! . G4ff3) (bytevector-u32-native-ref . G4ff2) (bytevector-u16-set! . G4ff1) (bytevector-u16-ref . G4ff0) (bytevector-u16-native-set! . G4fef) (bytevector-u16-native-ref . G4fee) (bytevector-sint-set! . G4fed) (bytevector-sint-ref . G4fec) (bytevector-s8-set! . G4feb) (bytevector-s8-ref . G4fea) (bytevector-s64-set! . G4fe9) (bytevector-s64-ref . G4fe8) (bytevector-s64-native-set! . G4fe7) (bytevector-s64-native-ref . G4fe6) (bytevector-s32-set! . G4fe5) (bytevector-s32-ref . G4fe4) (bytevector-s32-native-set! . G4fe3) (bytevector-s32-native-ref . G4fe2) (bytevector-s16-set! . G4fe1) (bytevector-s16-ref . G4fe0) (bytevector-s16-native-set! . G4fdf) (bytevector-s16-native-ref . G4fde) (bytevector-length . G4fdd) (bytevector-ieee-single-ref . G4fdc) (bytevector-ieee-single-native-set! . G4fdb) (bytevector-ieee-single-native-ref . G4fda) (bytevector-ieee-double-ref . G4fd9) (bytevector-ieee-double-native-set! . G4fd8) (bytevector-ieee-double-native-ref . G4fd7) (bytevector-fill! . G4fd6) (bytevector-copy! . G4fd5) (bytevector-copy . G4fd4) (bytevector->uint-list . G4fd3) (bytevector->u8-list . G4fd2) (bytevector->sint-list . G4fd1) (no-nans-violation? . G4fd0) (no-infinities-violation? . G4fcf) (make-no-nans-violation . G4fce) (make-no-infinities-violation . G4fcd) (real->flonum . G4fcc) (flzero? . G4fcb) (fltruncate . G4fca) (fltan . G4fc9) (flsqrt . G4fc8) (flsin . G4fc7) (flround . G4fc6) (flpositive? . G4fc5) (flonum? . G4fc4) (flodd? . G4fc3) (flnumerator . G4fc2) (flnegative? . G4fc1) (flnan? . G4fc0) (flmod0 . G4fbf) (flmod . G4fbe) (flmin . G4fbd) (flmax . G4fbc) (fllog . G4fbb) (flinteger? . G4fba) (flinfinite? . G4fb9) (flfloor . G4fb8) (flfinite? . G4fb7) (flexpt . G4fb6) (flexp . G4fb5) (fleven? . G4fb4) (fldiv0-and-mod0 . G4fb3) (fldiv0 . G4fb2) (fldiv-and-mod . G4fb1) (fldiv . G4fb0) (fldenominator . G4faf) (flcos . G4fae) (flceiling . G4fad) (flatan . G4fac) (flasin . G4fab) (flacos . G4faa) (flabs . G4fa9) (fl>? . G4fa8) (fl>=? . G4fa7) (fl=? . G4fa6) (fl<? . G4fa5) (fl<=? . G4fa4) (fl/ . G4fa3) (fl- . G4fa2) (fl+ . G4fa1) (fl* . G4fa0) (fixnum->flonum . G4f9f) (fxzero? . G4f9e) (fxxor . G4f9d) (fxrotate-bit-field . G4f9c) (fxreverse-bit-field . G4f9b) (fxpositive? . G4f9a) (fxodd? . G4f99) (fxnot . G4f98) (fxnegative? . G4f97) (fxmod0 . G4f96) (fxmod . G4f95) (fxmin . G4f94) (fxmax . G4f93) (fxlength . G4f92) (fxior . G4f91) (fxif . G4f90) (fxfirst-bit-set . G4f8f) (fxeven? . G4f8e) (fxdiv0-and-mod0 . G4f8d) (fxdiv0 . G4f8c) (fxdiv-and-mod . G4f8b) (fxdiv . G4f8a) (fxcopy-bit-field . G4f89) (fxcopy-bit . G4f88) (fxbit-set? . G4f87) (fxbit-field . G4f86) (fxbit-count . G4f85) (fxarithmetic-shift-right . G4f84) (fxarithmetic-shift-left . G4f83) (fxarithmetic-shift . G4f82) (fxand . G4f81) (fx>? . G4f80) (fx>=? . G4f7f) (fx=? . G4f7e) (fx<? . G4f7d) (fx<=? . G4f7c) (fx-/carry . G4f7b) (fx- . G4f7a) (fx+/carry . G4f79) (fx+ . G4f78) (fx*/carry . G4f77) (fx* . G4f76) (greatest-fixnum . G4f75) (least-fixnum . G4f74) (fixnum-width . G4f73) (fixnum? . G4f72) (bitwise-rotate-bit-field . G4f71) (bitwise-reverse-bit-field . G4f70) (bitwise-length . G4f6f) (bitwise-if . G4f6e) (bitwise-first-bit-set . G4f6d) (bitwise-copy-bit-field . G4f6c) (bitwise-copy-bit . G4f6b) (bitwise-bit-set? . G4f6a) (bitwise-bit-field . G4f69) (bitwise-bit-count . G4f68) (bitwise-xor . G4f67) (bitwise-ior . G4f66) (bitwise-and . G4f65) (bitwise-not . G4f64) (bitwise-arithmetic-shift-right . G4f63) (bitwise-arithmetic-shift-left . G4f62) (bitwise-arithmetic-shift . G4f61) (zero? . G4f60) (vector? . G4f5f) (vector-set! . G4f5e) (vector-ref . G4f5d) (vector-map . G4f5c) (vector-length . G4f5b) (vector-for-each . G4f5a) (vector-fill! . G4f59) (vector->list . G4f58) (vector . G4f57) (values . G4f56) (truncate . G4f55) (tan . G4f54) (symbol? . G4f53) (symbol=? . G4f52) (symbol->string . G4f51) (substring . G4f50) (string? . G4f4f) (string>? . G4f4e) (string>=? . G4f4d) (string=? . G4f4c) (string<? . G4f4b) (string<=? . G4f4a) (string-ref . G4f49) (string-length . G4f48) (string-for-each . G4f47) (string-copy . G4f46) (string-append . G4f45) (string->symbol . G4f44) (string->number . G4f43) (string->list . G4f42) (string . G4f41) (sqrt . G4f40) (sin . G4f3f) (round . G4f3e) (reverse . G4f3d) (real? . G4f3c) (real-valued? . G4f3b) (real-part . G4f3a) (rationalize . G4f39) (rational? . G4f38) (rational-valued? . G4f37) (procedure? . G4f36) (positive? . G4f35) (pair? . G4f34) (odd? . G4f33) (numerator . G4f32) (number? . G4f31) (number->string . G4f30) (null? . G4f2f) (not . G4f2e) (negative? . G4f2d) (nan? . G4f2c) (min . G4f2b) (max . G4f2a) (map . G4f29) (make-vector . G4f28) (make-string . G4f27) (make-rectangular . G4f26) (make-polar . G4f25) (magnitude . G4f24) (log . G4f23) (list? . G4f22) (list-tail . G4f21) (list-ref . G4f20) (list->vector . G4f1f) (list->string . G4f1e) (list . G4f1d) (length . G4f1c) (lcm . G4f1b) (integer? . G4f1a) (integer-valued? . G4f19) (integer->char . G4f18) (infinite? . G4f17) (inexact? . G4f16) (inexact . G4f15) (imag-part . G4f14) (gcd . G4f13) (for-each . G4f12) (floor . G4f11) (finite? . G4f10) (expt . G4f0f) (exp . G4f0e) (exact? . G4f0d) (exact-integer-sqrt . G4f0c) (exact . G4f0b) (even? . G4f0a) (error . G4f09) (eqv? . G4f08) (equal? . G4f07) (eq? . G4f06) (dynamic-wind . G4f05) (div0-and-mod0 . G4f04) (mod0 . G4f03) (div0 . G4f02) (div-and-mod . G4f01) (mod . G4f00) (div . G4eff) (denominator . G4efe) (cos . G4efd) (cons . G4efc) (complex? . G4efb) (char? . G4efa) (char>? . G4ef9) (char>=? . G4ef8) (char=? . G4ef7) (char<? . G4ef6) (char<=? . G4ef5) (char->integer . G4ef4) (ceiling . G4ef3) (call-with-values . G4ef2) (call/cc . G4ef1) (call-with-current-continuation . G4ef0) (cddddr . G4eef) (cdddar . G4eee) (cddadr . G4eed) (cddaar . G4eec) (cdaddr . G4eeb) (cdadar . G4eea) (cdaadr . G4ee9) (cdaaar . G4ee8) (cadddr . G4ee7) (caddar . G4ee6) (cadadr . G4ee5) (cadaar . G4ee4) (caaddr . G4ee3) (caadar . G4ee2) (caaadr . G4ee1) (caaaar . G4ee0) (cdddr . G4edf) (cddar . G4ede) (cdadr . G4edd) (cdaar . G4edc) (caddr . G4edb) (cadar . G4eda) (caadr . G4ed9) (caaar . G4ed8) (cddr . G4ed7) (cdar . G4ed6) (cadr . G4ed5) (caar . G4ed4) (cdr . G4ed3) (car . G4ed2) (boolean? . G4ed1) (boolean=? . G4ed0) (atan . G4ecf) (assertion-violation . G4ece) (asin . G4ecd) (apply . G4ecc) (append . G4ecb) (angle . G4eca) (acos . G4ec9) (abs . G4ec8) (/ . G4ec7) (* . G4ec6) (- . G4ec5) (+ . G4ec4) (>= . G4ec3) (> . G4ec2) (= . G4ec1) (<= . G4ec0) (< . G4ebf) (library . G4ebe) (export . G4ebd) (&no-nans . G4ebc) (&no-infinities . G4ebb) (&i/o-encoding . G4eba) (&i/o-decoding . G4eb9) (&i/o-port . G4eb8) (&i/o-file-does-not-exist . G4eb7) (&i/o-file-already-exists . G4eb6) (&i/o-file-is-read-only . G4eb5) (&i/o-file-protection . G4eb4) (&i/o-filename . G4eb3) (&i/o-invalid-position . G4eb2) (&i/o-write . G4eb1) (&i/o-read . G4eb0) (&i/o . G4eaf) (&undefined . G4eae) (&syntax . G4ead) (&lexical . G4eac) (&implementation-restriction . G4eab) (&non-continuable . G4eaa) (&who . G4ea9) (&irritants . G4ea8) (&assertion . G4ea7) (&violation . G4ea6) (&error . G4ea5) (&serious . G4ea4) (&warning . G4ea3) (&message . G4ea2) (&condition . G4ea1) (define-condition-type . G4ea0) (define-enumeration . G4e9f) (define-record-type . G4e9e) (parent-rtd . G4e9d) (nongenerative . G4e9c) (opaque . G4e9b) (sealed . G4e9a) (protocol . G4e99) (parent . G4e98) (immutable . G4e97) (mutable . G4e96) (fields . G4e95) (error-handling-mode . G4e94) (file-options . G4e93) (buffer-mode . G4e92) (eol-style . G4e91) (guard . G4e90) (unsyntax-splicing . G4e8d) (unsyntax . G4e8c) (unquote-splicing . G4e8b) (unquote . G4e8a) (_ . G4e89) (else . G4e88) (=> . G4e87) (... . G4e86) (assert . G4e85) (endianness . G4e84) (or . G4e81) (and . G4e80) (do . G4e7f) (cond . G4e7e) (let* . G4e7d) (let . G4e7c) (let*-values . G4e7b) (let-values . G4e7a) (identifier-syntax . G4e79) (with-syntax . G4e78) (quasisyntax . G4e77) (quasiquote . G4e76) (syntax-rules . G4e75) (include . G4e74) (record-constructor-descriptor . G4e72) (record-type-descriptor . G4e71) (case . G4e70) (unless . G4e6e) (when . G4e6d) (if . G4e6c) (letrec* . G4e6b) (letrec . G4e6a) (case-lambda . G4e68) (lambda . G4e67) (syntax . G4e66) (syntax-case . G4e65) (quote . G4e64) (letrec-syntax . G4e62) (let-syntax . G4e61) (set! . G4e60) (import . G4e5f) (begin . G4e5e) (define-syntax . G4e5c) (define . G4e5b)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G515e '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4e8b) (unquote . G4e8a) (delay . G4e83) (or . G4e81) (and . G4e80) (do . G4e7f) (cond . G4e7e) (let* . G4e7d) (let . G4e7c) (quasiquote . G4e76) (syntax-rules . G4e75) (case . G4e70) (if . G4e6c) (letrec . G4e6a) (lambda . G4e67) (quote . G4e64) (letrec-syntax . G4e62) (let-syntax . G4e61) (set! . G4e60) (begin . G4e5e) (define-syntax . G4e5c) (define . G4e5b)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G515f '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G50d2) (string-ci>=? . G50d1) (string-ci=? . G50d0) (string-ci<? . G50cf) (string-ci<=? . G50ce) (char-whitespace? . G50cd) (char-upper-case? . G50cc) (char-numeric? . G50ca) (char-lower-case? . G50c9) (char-upcase . G50c7) (char-downcase . G50c4) (char-ci>? . G50c3) (char-ci>=? . G50c2) (char-ci=? . G50c1) (char-ci<? . G50c0) (char-ci<=? . G50bf) (char-alphabetic? . G50be) (call-with-output-file . G5092) (call-with-input-file . G5091) (write-char . G5090) (write . G508f) (with-output-to-file . G508e) (with-input-from-file . G508d) (read-char . G508c) (read . G508b) (peek-char . G508a) (open-output-file . G5089) (open-input-file . G5088) (newline . G5087) (display . G5086) (close-output-port . G5085) (close-input-port . G5084) (eof-object . G5082) (current-output-port . G5080) (current-input-port . G507f) (output-port? . G507e) (input-port? . G507d) (scheme-report-environment . G3158) (quotient . G5043) (null-environment . G3156) (remainder . G5042) (modulo . G5041) (inexact->exact . G5040) (force . G503f) (exact->inexact . G503e) (string-fill! . G503c) (string-set! . G503b) (set-cdr! . G503a) (set-car! . G5039) (memv . G5033) (memq . G5032) (member . G5030) (assv . G5028) (assq . G5027) (assoc . G5025) (eval . G315c) (zero? . G4f60) (vector? . G4f5f) (vector-set! . G4f5e) (vector-ref . G4f5d) (vector-length . G4f5b) (vector-fill! . G4f59) (vector->list . G4f58) (vector . G4f57) (values . G4f56) (truncate . G4f55) (tan . G4f54) (symbol? . G4f53) (symbol->string . G4f51) (substring . G4f50) (string? . G4f4f) (string>? . G4f4e) (string>=? . G4f4d) (string=? . G4f4c) (string<? . G4f4b) (string<=? . G4f4a) (string-ref . G4f49) (string-length . G4f48) (string-copy . G4f46) (string-append . G4f45) (string->symbol . G4f44) (string->number . G4f43) (string->list . G4f42) (string . G4f41) (sqrt . G4f40) (sin . G4f3f) (round . G4f3e) (reverse . G4f3d) (real? . G4f3c) (real-part . G4f3a) (rationalize . G4f39) (rational? . G4f38) (procedure? . G4f36) (positive? . G4f35) (pair? . G4f34) (odd? . G4f33) (numerator . G4f32) (number? . G4f31) (number->string . G4f30) (not . G4f2e) (negative? . G4f2d) (min . G4f2b) (max . G4f2a) (map . G4f29) (make-vector . G4f28) (make-string . G4f27) (make-rectangular . G4f26) (make-polar . G4f25) (magnitude . G4f24) (log . G4f23) (list? . G4f22) (list-tail . G4f21) (list-ref . G4f20) (list->vector . G4f1f) (list->string . G4f1e) (list . G4f1d) (length . G4f1c) (lcm . G4f1b) (integer? . G4f1a) (integer->char . G4f18) (inexact? . G4f16) (imag-part . G4f14) (gcd . G4f13) (for-each . G4f12) (floor . G4f11) (expt . G4f0f) (exp . G4f0e) (exact? . G4f0d) (even? . G4f0a) (eqv? . G4f08) (equal? . G4f07) (eq? . G4f06) (dynamic-wind . G4f05) (denominator . G4efe) (cos . G4efd) (cons . G4efc) (complex? . G4efb) (char? . G4efa) (char>? . G4ef9) (char>=? . G4ef8) (char=? . G4ef7) (char<? . G4ef6) (char<=? . G4ef5) (char->integer . G4ef4) (ceiling . G4ef3) (call-with-values . G4ef2) (call-with-current-continuation . G4ef0) (cddddr . G4eef) (cdddar . G4eee) (cddadr . G4eed) (cddaar . G4eec) (cdaddr . G4eeb) (cdadar . G4eea) (cdaadr . G4ee9) (cdaaar . G4ee8) (cadddr . G4ee7) (caddar . G4ee6) (cadadr . G4ee5) (cadaar . G4ee4) (caaddr . G4ee3) (caadar . G4ee2) (caaadr . G4ee1) (caaaar . G4ee0) (cdddr . G4edf) (cddar . G4ede) (cdadr . G4edd) (cdaar . G4edc) (caddr . G4edb) (cadar . G4eda) (caadr . G4ed9) (caaar . G4ed8) (cddr . G4ed7) (cdar . G4ed6) (cadr . G4ed5) (caar . G4ed4) (cdr . G4ed3) (car . G4ed2) (boolean? . G4ed1) (atan . G4ecf) (asin . G4ecd) (apply . G4ecc) (append . G4ecb) (angle . G4eca) (acos . G4ec9) (abs . G4ec8) (/ . G4ec7) (* . G4ec6) (- . G4ec5) (+ . G4ec4) (>= . G4ec3) (> . G4ec2) (= . G4ec1) (<= . G4ec0) (< . G4ebf) (unquote-splicing . G4e8b) (unquote . G4e8a) (delay . G4e83) (or . G4e81) (and . G4e80) (do . G4e7f) (cond . G4e7e) (let* . G4e7d) (let . G4e7c) (quasiquote . G4e76) (syntax-rules . G4e75) (case . G4e70) (if . G4e6c) (letrec . G4e6a) (lambda . G4e67) (quote . G4e64) (letrec-syntax . G4e62) (let-syntax . G4e61) (set! . G4e60) (begin . G4e5e) (define-syntax . G4e5c) (define . G4e5b)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5160 '(psyntax modules) '() '() '() '() '((module . G4e5d)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5161 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5162 '(rnrs) '(6) '() '() '() '((regexp? . G511d) (string-upcase . G50da) (string-titlecase . G50d9) (string-normalize-nfkd . G50d8) (string-normalize-nfkc . G50d7) (string-normalize-nfd . G50d6) (string-normalize-nfc . G50d5) (string-foldcase . G50d4) (string-downcase . G50d3) (string-ci>? . G50d2) (string-ci>=? . G50d1) (string-ci=? . G50d0) (string-ci<? . G50cf) (string-ci<=? . G50ce) (char-whitespace? . G50cd) (char-upper-case? . G50cc) (char-title-case? . G50cb) (char-numeric? . G50ca) (char-lower-case? . G50c9) (char-general-category . G50c8) (char-upcase . G50c7) (char-titlecase . G50c6) (char-foldcase . G50c5) (char-downcase . G50c4) (char-ci>? . G50c3) (char-ci>=? . G50c2) (char-ci=? . G50c1) (char-ci<? . G50c0) (char-ci<=? . G50bf) (char-alphabetic? . G50be) (make-variable-transformer . G2e89) (identifier? . G3180) (generate-temporaries . G316a) (free-identifier=? . G316c) (syntax->datum . G3184) (datum->syntax . G3182) (bound-identifier=? . G316e) (record-type-descriptor? . G50bd) (record-predicate . G50bc) (record-mutator . G50bb) (record-constructor . G50ba) (record-accessor . G50b9) (make-record-type-descriptor . G50b8) (make-record-constructor-descriptor . G50b7) (record? . G50b6) (record-type-uid . G50b5) (record-type-sealed? . G50b4) (record-type-parent . G50b3) (record-type-opaque? . G50b2) (record-type-name . G50b1) (record-type-generative? . G50b0) (record-type-field-names . G50af) (record-rtd . G50ae) (record-field-mutable? . G50ad) (delete-file . G50ac) (file-exists? . G50ab) (vector-sort! . G50aa) (vector-sort . G50a9) (list-sort . G50a8) (symbol-hash . G50a7) (string-ci-hash . G50a6) (string-hash . G50a5) (equal-hash . G50a4) (hashtable-equivalence-function . G50a3) (make-hashtable . G50a2) (hashtable-hash-function . G50a1) (make-eqv-hashtable . G50a0) (make-eq-hashtable . G509f) (hashtable? . G509e) (hashtable-update! . G509d) (hashtable-size . G509c) (hashtable-set! . G509b) (hashtable-ref . G509a) (hashtable-mutable? . G5099) (hashtable-keys . G5098) (hashtable-entries . G5097) (hashtable-delete! . G5096) (hashtable-copy . G5095) (hashtable-contains? . G5094) (hashtable-clear! . G5093) (call-with-output-file . G5092) (call-with-input-file . G5091) (write-char . G5090) (write . G508f) (with-output-to-file . G508e) (with-input-from-file . G508d) (read-char . G508c) (read . G508b) (peek-char . G508a) (open-output-file . G5089) (open-input-file . G5088) (newline . G5087) (display . G5086) (close-output-port . G5085) (close-input-port . G5084) (eof-object? . G5083) (eof-object . G5082) (current-error-port . G5081) (current-output-port . G5080) (current-input-port . G507f) (output-port? . G507e) (input-port? . G507d) (utf-8-codec . G507c) (utf-16-codec . G507b) (transcoder-error-handling-mode . G507a) (transcoder-eol-style . G5079) (transcoder-codec . G5078) (transcoded-port . G5077) (textual-port? . G5076) (string->bytevector . G5075) (standard-output-port . G5074) (standard-input-port . G5073) (standard-error-port . G5072) (set-port-position! . G5071) (put-u8 . G5070) (put-string . G506f) (put-datum . G506e) (put-char . G506d) (put-bytevector . G506c) (port? . G506b) (port-transcoder . G506a) (port-position . G5069) (port-has-set-port-position!? . G5068) (port-has-port-position? . G5067) (port-eof? . G5066) (output-port-buffer-mode . G5065) (open-string-output-port . G5064) (open-string-input-port . G5063) (open-file-output-port . G5062) (open-file-input/output-port . G5061) (open-file-input-port . G5060) (open-bytevector-output-port . G505f) (open-bytevector-input-port . G505e) (native-transcoder . G505d) (native-eol-style . G505c) (make-transcoder . G505b) (latin-1-codec . G505a) (make-i/o-write-error . G4c99) (make-i/o-read-error . G4c85) (make-i/o-port-error . G4d30) (make-i/o-invalid-position-error . G4cae) (make-i/o-filename-error . G4cc7) (make-i/o-file-protection-error . G4cdf) (make-i/o-file-is-read-only-error . G4cf3) (make-i/o-file-does-not-exist-error . G4d1b) (make-i/o-file-already-exists-error . G4d07) (make-i/o-error . G4c71) (make-i/o-encoding-error . G4d5d) (make-i/o-decoding-error . G4d48) (make-custom-textual-output-port . G5059) (make-custom-textual-input/output-port . G5058) (make-custom-textual-input-port . G5057) (make-custom-binary-output-port . G5056) (make-custom-binary-input/output-port . G5055) (make-custom-binary-input-port . G5054) (make-bytevector . G5053) (lookahead-u8 . G5052) (lookahead-char . G5051) (i/o-write-error? . G4c9b) (i/o-read-error? . G4c87) (i/o-port-error? . G4d34) (i/o-invalid-position-error? . G4cb2) (i/o-filename-error? . G4ccb) (i/o-file-protection-error? . G4ce1) (i/o-file-is-read-only-error? . G4cf5) (i/o-file-does-not-exist-error? . G4d1d) (i/o-file-already-exists-error? . G4d09) (i/o-error? . G4c73) (i/o-error-port . G4d36) (i/o-error-filename . G4ccd) (i/o-encoding-error? . G4d61) (i/o-encoding-error-char . G4d63) (i/o-decoding-error? . G4d4a) (get-u8 . G5050) (get-string-n! . G504f) (get-string-n . G504e) (get-string-all . G504d) (get-line . G504c) (get-datum . G504b) (get-char . G504a) (get-bytevector-some . G5049) (get-bytevector-n! . G5048) (get-bytevector-n . G5047) (get-bytevector-all . G5046) (flush-output-port . G5045) (close-port . G5044) (exit . G503d) (command-line . G4dbc) (remove . G5038) (remv . G5037) (remp . G5036) (remq . G5035) (partition . G5034) (memv . G5033) (memq . G5032) (memp . G5031) (member . G5030) (exists . G502f) (for-all . G502e) (fold-right . G502d) (fold-left . G502c) (find . G502b) (filter . G502a) (cons* . G5029) (assv . G5028) (assq . G5027) (assp . G5026) (assoc . G5025) (call-with-string-output-port . G5024) (call-with-port . G5023) (call-with-bytevector-output-port . G5022) (bytevector->string . G5021) (buffer-mode? . G5020) (binary-port? . G501f) (with-exception-handler . G501e) (raise-continuable . G501d) (raise . G501c) (make-enumeration . G501b) (enum-set=? . G501a) (enum-set-universe . G5019) (enum-set-union . G5018) (enum-set-subset? . G5017) (enum-set-projection . G5016) (enum-set-member? . G5015) (enum-set-intersection . G5014) (enum-set-indexer . G5013) (enum-set-difference . G5012) (enum-set-constructor . G5011) (enum-set-complement . G5010) (enum-set->list . G500f) (who-condition? . G4b8f) (warning? . G4b0f) (violation? . G4b4b) (undefined-violation? . G4bff) (syntax-violation? . G4be7) (syntax-violation-subform . G4beb) (syntax-violation-form . G4be9) (syntax-violation . G317e) (simple-conditions . G500e) (serious-condition? . G4b23) (non-continuable-violation? . G4ba5) (message-condition? . G4af9) (make-who-condition . G4b8b) (make-warning . G4b0d) (make-violation . G4b49) (make-undefined-violation . G4bfd) (make-syntax-violation . G4be1) (make-serious-condition . G4b21) (make-non-continuable-violation . G4ba3) (make-message-condition . G4af5) (make-lexical-violation . G4bcb) (make-irritants-condition . G4b72) (make-implementation-restriction-violation . G4bb7) (make-error . G4b35) (make-assertion-violation . G4b5d) (lexical-violation? . G4bcd) (irritants-condition? . G4b76) (implementation-restriction-violation? . G4bb9) (error? . G4b37) (condition-who . G4b91) (condition-predicate . G500d) (condition-message . G4afb) (condition-irritants . G4b78) (condition-accessor . G500c) (condition . G500b) (assertion-violation? . G4b5f) (condition? . G500a) (utf32->string . G5009) (utf16->string . G5008) (utf8->string . G5007) (uint-list->bytevector . G5006) (u8-list->bytevector . G5005) (string->utf8 . G5004) (string->utf32 . G5003) (string->utf16 . G5002) (sint-list->bytevector . G5001) (native-endianness . G5000) (bytevector? . G4fff) (bytevector=? . G4ffe) (bytevector-uint-set! . G4ffd) (bytevector-uint-ref . G4ffc) (bytevector-u8-set! . G4ffb) (bytevector-u8-ref . G4ffa) (bytevector-u64-set! . G4ff9) (bytevector-u64-ref . G4ff8) (bytevector-u64-native-set! . G4ff7) (bytevector-u64-native-ref . G4ff6) (bytevector-u32-set! . G4ff5) (bytevector-u32-ref . G4ff4) (bytevector-u32-native-set! . G4ff3) (bytevector-u32-native-ref . G4ff2) (bytevector-u16-set! . G4ff1) (bytevector-u16-ref . G4ff0) (bytevector-u16-native-set! . G4fef) (bytevector-u16-native-ref . G4fee) (bytevector-sint-set! . G4fed) (bytevector-sint-ref . G4fec) (bytevector-s8-set! . G4feb) (bytevector-s8-ref . G4fea) (bytevector-s64-set! . G4fe9) (bytevector-s64-ref . G4fe8) (bytevector-s64-native-set! . G4fe7) (bytevector-s64-native-ref . G4fe6) (bytevector-s32-set! . G4fe5) (bytevector-s32-ref . G4fe4) (bytevector-s32-native-set! . G4fe3) (bytevector-s32-native-ref . G4fe2) (bytevector-s16-set! . G4fe1) (bytevector-s16-ref . G4fe0) (bytevector-s16-native-set! . G4fdf) (bytevector-s16-native-ref . G4fde) (bytevector-length . G4fdd) (bytevector-ieee-single-ref . G4fdc) (bytevector-ieee-single-native-set! . G4fdb) (bytevector-ieee-single-native-ref . G4fda) (bytevector-ieee-double-ref . G4fd9) (bytevector-ieee-double-native-set! . G4fd8) (bytevector-ieee-double-native-ref . G4fd7) (bytevector-fill! . G4fd6) (bytevector-copy! . G4fd5) (bytevector-copy . G4fd4) (bytevector->uint-list . G4fd3) (bytevector->u8-list . G4fd2) (bytevector->sint-list . G4fd1) (no-nans-violation? . G4fd0) (no-infinities-violation? . G4fcf) (make-no-nans-violation . G4fce) (make-no-infinities-violation . G4fcd) (real->flonum . G4fcc) (flzero? . G4fcb) (fltruncate . G4fca) (fltan . G4fc9) (flsqrt . G4fc8) (flsin . G4fc7) (flround . G4fc6) (flpositive? . G4fc5) (flonum? . G4fc4) (flodd? . G4fc3) (flnumerator . G4fc2) (flnegative? . G4fc1) (flnan? . G4fc0) (flmod0 . G4fbf) (flmod . G4fbe) (flmin . G4fbd) (flmax . G4fbc) (fllog . G4fbb) (flinteger? . G4fba) (flinfinite? . G4fb9) (flfloor . G4fb8) (flfinite? . G4fb7) (flexpt . G4fb6) (flexp . G4fb5) (fleven? . G4fb4) (fldiv0-and-mod0 . G4fb3) (fldiv0 . G4fb2) (fldiv-and-mod . G4fb1) (fldiv . G4fb0) (fldenominator . G4faf) (flcos . G4fae) (flceiling . G4fad) (flatan . G4fac) (flasin . G4fab) (flacos . G4faa) (flabs . G4fa9) (fl>? . G4fa8) (fl>=? . G4fa7) (fl=? . G4fa6) (fl<? . G4fa5) (fl<=? . G4fa4) (fl/ . G4fa3) (fl- . G4fa2) (fl+ . G4fa1) (fl* . G4fa0) (fixnum->flonum . G4f9f) (fxzero? . G4f9e) (fxxor . G4f9d) (fxrotate-bit-field . G4f9c) (fxreverse-bit-field . G4f9b) (fxpositive? . G4f9a) (fxodd? . G4f99) (fxnot . G4f98) (fxnegative? . G4f97) (fxmod0 . G4f96) (fxmod . G4f95) (fxmin . G4f94) (fxmax . G4f93) (fxlength . G4f92) (fxior . G4f91) (fxif . G4f90) (fxfirst-bit-set . G4f8f) (fxeven? . G4f8e) (fxdiv0-and-mod0 . G4f8d) (fxdiv0 . G4f8c) (fxdiv-and-mod . G4f8b) (fxdiv . G4f8a) (fxcopy-bit-field . G4f89) (fxcopy-bit . G4f88) (fxbit-set? . G4f87) (fxbit-field . G4f86) (fxbit-count . G4f85) (fxarithmetic-shift-right . G4f84) (fxarithmetic-shift-left . G4f83) (fxarithmetic-shift . G4f82) (fxand . G4f81) (fx>? . G4f80) (fx>=? . G4f7f) (fx=? . G4f7e) (fx<? . G4f7d) (fx<=? . G4f7c) (fx-/carry . G4f7b) (fx- . G4f7a) (fx+/carry . G4f79) (fx+ . G4f78) (fx*/carry . G4f77) (fx* . G4f76) (greatest-fixnum . G4f75) (least-fixnum . G4f74) (fixnum-width . G4f73) (fixnum? . G4f72) (bitwise-rotate-bit-field . G4f71) (bitwise-reverse-bit-field . G4f70) (bitwise-length . G4f6f) (bitwise-if . G4f6e) (bitwise-first-bit-set . G4f6d) (bitwise-copy-bit-field . G4f6c) (bitwise-copy-bit . G4f6b) (bitwise-bit-set? . G4f6a) (bitwise-bit-field . G4f69) (bitwise-bit-count . G4f68) (bitwise-xor . G4f67) (bitwise-ior . G4f66) (bitwise-and . G4f65) (bitwise-not . G4f64) (bitwise-arithmetic-shift-right . G4f63) (bitwise-arithmetic-shift-left . G4f62) (bitwise-arithmetic-shift . G4f61) (zero? . G4f60) (vector? . G4f5f) (vector-set! . G4f5e) (vector-ref . G4f5d) (vector-map . G4f5c) (vector-length . G4f5b) (vector-for-each . G4f5a) (vector-fill! . G4f59) (vector->list . G4f58) (vector . G4f57) (values . G4f56) (truncate . G4f55) (tan . G4f54) (symbol? . G4f53) (symbol=? . G4f52) (symbol->string . G4f51) (substring . G4f50) (string? . G4f4f) (string>? . G4f4e) (string>=? . G4f4d) (string=? . G4f4c) (string<? . G4f4b) (string<=? . G4f4a) (string-ref . G4f49) (string-length . G4f48) (string-for-each . G4f47) (string-copy . G4f46) (string-append . G4f45) (string->symbol . G4f44) (string->number . G4f43) (string->list . G4f42) (string . G4f41) (sqrt . G4f40) (sin . G4f3f) (round . G4f3e) (reverse . G4f3d) (real? . G4f3c) (real-valued? . G4f3b) (real-part . G4f3a) (rationalize . G4f39) (rational? . G4f38) (rational-valued? . G4f37) (procedure? . G4f36) (positive? . G4f35) (pair? . G4f34) (odd? . G4f33) (numerator . G4f32) (number? . G4f31) (number->string . G4f30) (null? . G4f2f) (not . G4f2e) (negative? . G4f2d) (nan? . G4f2c) (min . G4f2b) (max . G4f2a) (map . G4f29) (make-vector . G4f28) (make-string . G4f27) (make-rectangular . G4f26) (make-polar . G4f25) (magnitude . G4f24) (log . G4f23) (list? . G4f22) (list-tail . G4f21) (list-ref . G4f20) (list->vector . G4f1f) (list->string . G4f1e) (list . G4f1d) (length . G4f1c) (lcm . G4f1b) (integer? . G4f1a) (integer-valued? . G4f19) (integer->char . G4f18) (infinite? . G4f17) (inexact? . G4f16) (inexact . G4f15) (imag-part . G4f14) (gcd . G4f13) (for-each . G4f12) (floor . G4f11) (finite? . G4f10) (expt . G4f0f) (exp . G4f0e) (exact? . G4f0d) (exact-integer-sqrt . G4f0c) (exact . G4f0b) (even? . G4f0a) (error . G4f09) (eqv? . G4f08) (equal? . G4f07) (eq? . G4f06) (dynamic-wind . G4f05) (div0-and-mod0 . G4f04) (mod0 . G4f03) (div0 . G4f02) (div-and-mod . G4f01) (mod . G4f00) (div . G4eff) (denominator . G4efe) (cos . G4efd) (cons . G4efc) (complex? . G4efb) (char? . G4efa) (char>? . G4ef9) (char>=? . G4ef8) (char=? . G4ef7) (char<? . G4ef6) (char<=? . G4ef5) (char->integer . G4ef4) (ceiling . G4ef3) (call-with-values . G4ef2) (call/cc . G4ef1) (call-with-current-continuation . G4ef0) (cddddr . G4eef) (cdddar . G4eee) (cddadr . G4eed) (cddaar . G4eec) (cdaddr . G4eeb) (cdadar . G4eea) (cdaadr . G4ee9) (cdaaar . G4ee8) (cadddr . G4ee7) (caddar . G4ee6) (cadadr . G4ee5) (cadaar . G4ee4) (caaddr . G4ee3) (caadar . G4ee2) (caaadr . G4ee1) (caaaar . G4ee0) (cdddr . G4edf) (cddar . G4ede) (cdadr . G4edd) (cdaar . G4edc) (caddr . G4edb) (cadar . G4eda) (caadr . G4ed9) (caaar . G4ed8) (cddr . G4ed7) (cdar . G4ed6) (cadr . G4ed5) (caar . G4ed4) (cdr . G4ed3) (car . G4ed2) (boolean? . G4ed1) (boolean=? . G4ed0) (atan . G4ecf) (assertion-violation . G4ece) (asin . G4ecd) (apply . G4ecc) (append . G4ecb) (angle . G4eca) (acos . G4ec9) (abs . G4ec8) (/ . G4ec7) (* . G4ec6) (- . G4ec5) (+ . G4ec4) (>= . G4ec3) (> . G4ec2) (= . G4ec1) (<= . G4ec0) (< . G4ebf) (&no-nans . G4ebc) (&no-infinities . G4ebb) (&i/o-encoding . G4eba) (&i/o-decoding . G4eb9) (&i/o-port . G4eb8) (&i/o-file-does-not-exist . G4eb7) (&i/o-file-already-exists . G4eb6) (&i/o-file-is-read-only . G4eb5) (&i/o-file-protection . G4eb4) (&i/o-filename . G4eb3) (&i/o-invalid-position . G4eb2) (&i/o-write . G4eb1) (&i/o-read . G4eb0) (&i/o . G4eaf) (&undefined . G4eae) (&syntax . G4ead) (&lexical . G4eac) (&implementation-restriction . G4eab) (&non-continuable . G4eaa) (&who . G4ea9) (&irritants . G4ea8) (&assertion . G4ea7) (&violation . G4ea6) (&error . G4ea5) (&serious . G4ea4) (&warning . G4ea3) (&message . G4ea2) (&condition . G4ea1) (define-condition-type . G4ea0) (define-enumeration . G4e9f) (define-record-type . G4e9e) (parent-rtd . G4e9d) (nongenerative . G4e9c) (opaque . G4e9b) (sealed . G4e9a) (protocol . G4e99) (parent . G4e98) (immutable . G4e97) (mutable . G4e96) (fields . G4e95) (error-handling-mode . G4e94) (file-options . G4e93) (buffer-mode . G4e92) (eol-style . G4e91) (guard . G4e90) (unsyntax-splicing . G4e8d) (unsyntax . G4e8c) (unquote-splicing . G4e8b) (unquote . G4e8a) (_ . G4e89) (else . G4e88) (=> . G4e87) (... . G4e86) (assert . G4e85) (endianness . G4e84) (or . G4e81) (and . G4e80) (do . G4e7f) (cond . G4e7e) (let* . G4e7d) (let . G4e7c) (let*-values . G4e7b) (let-values . G4e7a) (identifier-syntax . G4e79) (with-syntax . G4e78) (quasisyntax . G4e77) (quasiquote . G4e76) (syntax-rules . G4e75) (record-constructor-descriptor . G4e72) (record-type-descriptor . G4e71) (case . G4e70) (unless . G4e6e) (when . G4e6d) (if . G4e6c) (letrec* . G4e6b) (letrec . G4e6a) (case-lambda . G4e68) (lambda . G4e67) (syntax . G4e66) (syntax-case . G4e65) (quote . G4e64) (letrec-syntax . G4e62) (let-syntax . G4e61) (set! . G4e60) (begin . G4e5e) (define-syntax . G4e5c) (define . G4e5b)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5163 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3158) (quotient . G5043) (null-environment . G3156) (remainder . G5042) (modulo . G5041) (inexact->exact . G5040) (force . G503f) (exact->inexact . G503e) (delay . G4e83)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5164 '(rnrs control) '(6) '() '() '() '((do . G4e7f) (unless . G4e6e) (when . G4e6d) (case-lambda . G4e68)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5165 '(rnrs eval) '(6) '() '() '() '((eval . G315c) (environment . G3154)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5166 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G503a) (set-car! . G5039)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5167 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G503c) (string-set! . G503b)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5168 '(rnrs programs) '(6) '() '() '() '((exit . G503d) (command-line . G4dbc)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5169 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e89) (identifier? . G3180) (generate-temporaries . G316a) (free-identifier=? . G316c) (syntax->datum . G3184) (datum->syntax . G3182) (bound-identifier=? . G316e) (syntax-violation . G317e) (unsyntax-splicing . G4e8d) (unsyntax . G4e8c) (_ . G4e89) (... . G4e86) (with-syntax . G4e78) (quasisyntax . G4e77) (syntax . G4e66) (syntax-case . G4e65)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G516a '(rnrs files) '(6) '() '() '() '((delete-file . G50ac) (file-exists? . G50ab) (make-i/o-write-error . G4c99) (make-i/o-read-error . G4c85) (make-i/o-port-error . G4d30) (make-i/o-invalid-position-error . G4cae) (make-i/o-filename-error . G4cc7) (make-i/o-file-protection-error . G4cdf) (make-i/o-file-is-read-only-error . G4cf3) (make-i/o-file-does-not-exist-error . G4d1b) (make-i/o-file-already-exists-error . G4d07) (make-i/o-error . G4c71) (i/o-write-error? . G4c9b) (i/o-read-error? . G4c87) (i/o-port-error? . G4d34) (i/o-invalid-position-error? . G4cb2) (i/o-filename-error? . G4ccb) (i/o-file-protection-error? . G4ce1) (i/o-file-is-read-only-error? . G4cf5) (i/o-file-does-not-exist-error? . G4d1d) (i/o-file-already-exists-error? . G4d09) (i/o-error? . G4c73) (i/o-error-port . G4d36) (i/o-error-filename . G4ccd) (&i/o-port . G4eb8) (&i/o-file-does-not-exist . G4eb7) (&i/o-file-already-exists . G4eb6) (&i/o-file-is-read-only . G4eb5) (&i/o-file-protection . G4eb4) (&i/o-filename . G4eb3) (&i/o-invalid-position . G4eb2) (&i/o-write . G4eb1) (&i/o-read . G4eb0) (&i/o . G4eaf)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G516b '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G50aa) (vector-sort . G50a9) (list-sort . G50a8)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G516c '(rnrs base) '(6) '() '() '() '((zero? . G4f60) (vector? . G4f5f) (vector-set! . G4f5e) (vector-ref . G4f5d) (vector-map . G4f5c) (vector-length . G4f5b) (vector-for-each . G4f5a) (vector-fill! . G4f59) (vector->list . G4f58) (vector . G4f57) (values . G4f56) (truncate . G4f55) (tan . G4f54) (symbol? . G4f53) (symbol=? . G4f52) (symbol->string . G4f51) (substring . G4f50) (string? . G4f4f) (string>? . G4f4e) (string>=? . G4f4d) (string=? . G4f4c) (string<? . G4f4b) (string<=? . G4f4a) (string-ref . G4f49) (string-length . G4f48) (string-for-each . G4f47) (string-copy . G4f46) (string-append . G4f45) (string->symbol . G4f44) (string->number . G4f43) (string->list . G4f42) (string . G4f41) (sqrt . G4f40) (sin . G4f3f) (round . G4f3e) (reverse . G4f3d) (real? . G4f3c) (real-valued? . G4f3b) (real-part . G4f3a) (rationalize . G4f39) (rational? . G4f38) (rational-valued? . G4f37) (procedure? . G4f36) (positive? . G4f35) (pair? . G4f34) (odd? . G4f33) (numerator . G4f32) (number? . G4f31) (number->string . G4f30) (null? . G4f2f) (not . G4f2e) (negative? . G4f2d) (nan? . G4f2c) (min . G4f2b) (max . G4f2a) (map . G4f29) (make-vector . G4f28) (make-string . G4f27) (make-rectangular . G4f26) (make-polar . G4f25) (magnitude . G4f24) (log . G4f23) (list? . G4f22) (list-tail . G4f21) (list-ref . G4f20) (list->vector . G4f1f) (list->string . G4f1e) (list . G4f1d) (length . G4f1c) (lcm . G4f1b) (integer? . G4f1a) (integer-valued? . G4f19) (integer->char . G4f18) (infinite? . G4f17) (inexact? . G4f16) (inexact . G4f15) (imag-part . G4f14) (gcd . G4f13) (for-each . G4f12) (floor . G4f11) (finite? . G4f10) (expt . G4f0f) (exp . G4f0e) (exact? . G4f0d) (exact-integer-sqrt . G4f0c) (exact . G4f0b) (even? . G4f0a) (error . G4f09) (eqv? . G4f08) (equal? . G4f07) (eq? . G4f06) (dynamic-wind . G4f05) (div0-and-mod0 . G4f04) (mod0 . G4f03) (div0 . G4f02) (div-and-mod . G4f01) (mod . G4f00) (div . G4eff) (denominator . G4efe) (cos . G4efd) (cons . G4efc) (complex? . G4efb) (char? . G4efa) (char>? . G4ef9) (char>=? . G4ef8) (char=? . G4ef7) (char<? . G4ef6) (char<=? . G4ef5) (char->integer . G4ef4) (ceiling . G4ef3) (call-with-values . G4ef2) (call/cc . G4ef1) (call-with-current-continuation . G4ef0) (cddddr . G4eef) (cdddar . G4eee) (cddadr . G4eed) (cddaar . G4eec) (cdaddr . G4eeb) (cdadar . G4eea) (cdaadr . G4ee9) (cdaaar . G4ee8) (cadddr . G4ee7) (caddar . G4ee6) (cadadr . G4ee5) (cadaar . G4ee4) (caaddr . G4ee3) (caadar . G4ee2) (caaadr . G4ee1) (caaaar . G4ee0) (cdddr . G4edf) (cddar . G4ede) (cdadr . G4edd) (cdaar . G4edc) (caddr . G4edb) (cadar . G4eda) (caadr . G4ed9) (caaar . G4ed8) (cddr . G4ed7) (cdar . G4ed6) (cadr . G4ed5) (caar . G4ed4) (cdr . G4ed3) (car . G4ed2) (boolean? . G4ed1) (boolean=? . G4ed0) (atan . G4ecf) (assertion-violation . G4ece) (asin . G4ecd) (apply . G4ecc) (append . G4ecb) (angle . G4eca) (acos . G4ec9) (abs . G4ec8) (/ . G4ec7) (* . G4ec6) (- . G4ec5) (+ . G4ec4) (>= . G4ec3) (> . G4ec2) (= . G4ec1) (<= . G4ec0) (< . G4ebf) (unquote-splicing . G4e8b) (unquote . G4e8a) (_ . G4e89) (else . G4e88) (=> . G4e87) (... . G4e86) (assert . G4e85) (or . G4e81) (and . G4e80) (cond . G4e7e) (let* . G4e7d) (let . G4e7c) (let*-values . G4e7b) (let-values . G4e7a) (identifier-syntax . G4e79) (quasiquote . G4e76) (syntax-rules . G4e75) (case . G4e70) (if . G4e6c) (letrec* . G4e6b) (letrec . G4e6a) (lambda . G4e67) (quote . G4e64) (letrec-syntax . G4e62) (let-syntax . G4e61) (set! . G4e60) (begin . G4e5e) (define-syntax . G4e5c) (define . G4e5b)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G516d '(rnrs lists) '(6) '() '() '() '((remove . G5038) (remv . G5037) (remp . G5036) (remq . G5035) (partition . G5034) (memv . G5033) (memq . G5032) (memp . G5031) (member . G5030) (exists . G502f) (for-all . G502e) (fold-right . G502d) (fold-left . G502c) (find . G502b) (filter . G502a) (cons* . G5029) (assv . G5028) (assq . G5027) (assp . G5026) (assoc . G5025)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G516e '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5092) (call-with-input-file . G5091) (write-char . G5090) (write . G508f) (with-output-to-file . G508e) (with-input-from-file . G508d) (read-char . G508c) (read . G508b) (peek-char . G508a) (open-output-file . G5089) (open-input-file . G5088) (newline . G5087) (display . G5086) (close-output-port . G5085) (close-input-port . G5084) (eof-object? . G5083) (eof-object . G5082) (current-error-port . G5081) (current-output-port . G5080) (current-input-port . G507f) (output-port? . G507e) (input-port? . G507d) (make-i/o-write-error . G4c99) (make-i/o-read-error . G4c85) (make-i/o-port-error . G4d30) (make-i/o-invalid-position-error . G4cae) (make-i/o-filename-error . G4cc7) (make-i/o-file-protection-error . G4cdf) (make-i/o-file-is-read-only-error . G4cf3) (make-i/o-file-does-not-exist-error . G4d1b) (make-i/o-file-already-exists-error . G4d07) (make-i/o-error . G4c71) (i/o-write-error? . G4c9b) (i/o-read-error? . G4c87) (i/o-port-error? . G4d34) (i/o-invalid-position-error? . G4cb2) (i/o-filename-error? . G4ccb) (i/o-file-protection-error? . G4ce1) (i/o-file-is-read-only-error? . G4cf5) (i/o-file-does-not-exist-error? . G4d1d) (i/o-file-already-exists-error? . G4d09) (i/o-error? . G4c73) (i/o-error-port . G4d36) (i/o-error-filename . G4ccd) (&i/o-port . G4eb8) (&i/o-file-does-not-exist . G4eb7) (&i/o-file-already-exists . G4eb6) (&i/o-file-is-read-only . G4eb5) (&i/o-file-protection . G4eb4) (&i/o-filename . G4eb3) (&i/o-invalid-position . G4eb2) (&i/o-write . G4eb1) (&i/o-read . G4eb0) (&i/o . G4eaf)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G516f '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G5053) (utf32->string . G5009) (utf16->string . G5008) (utf8->string . G5007) (uint-list->bytevector . G5006) (u8-list->bytevector . G5005) (string->utf8 . G5004) (string->utf32 . G5003) (string->utf16 . G5002) (sint-list->bytevector . G5001) (native-endianness . G5000) (bytevector? . G4fff) (bytevector=? . G4ffe) (bytevector-uint-set! . G4ffd) (bytevector-uint-ref . G4ffc) (bytevector-u8-set! . G4ffb) (bytevector-u8-ref . G4ffa) (bytevector-u64-set! . G4ff9) (bytevector-u64-ref . G4ff8) (bytevector-u64-native-set! . G4ff7) (bytevector-u64-native-ref . G4ff6) (bytevector-u32-set! . G4ff5) (bytevector-u32-ref . G4ff4) (bytevector-u32-native-set! . G4ff3) (bytevector-u32-native-ref . G4ff2) (bytevector-u16-set! . G4ff1) (bytevector-u16-ref . G4ff0) (bytevector-u16-native-set! . G4fef) (bytevector-u16-native-ref . G4fee) (bytevector-sint-set! . G4fed) (bytevector-sint-ref . G4fec) (bytevector-s8-set! . G4feb) (bytevector-s8-ref . G4fea) (bytevector-s64-set! . G4fe9) (bytevector-s64-ref . G4fe8) (bytevector-s64-native-set! . G4fe7) (bytevector-s64-native-ref . G4fe6) (bytevector-s32-set! . G4fe5) (bytevector-s32-ref . G4fe4) (bytevector-s32-native-set! . G4fe3) (bytevector-s32-native-ref . G4fe2) (bytevector-s16-set! . G4fe1) (bytevector-s16-ref . G4fe0) (bytevector-s16-native-set! . G4fdf) (bytevector-s16-native-ref . G4fde) (bytevector-length . G4fdd) (bytevector-ieee-single-ref . G4fdc) (bytevector-ieee-single-native-set! . G4fdb) (bytevector-ieee-single-native-ref . G4fda) (bytevector-ieee-double-ref . G4fd9) (bytevector-ieee-double-native-set! . G4fd8) (bytevector-ieee-double-native-ref . G4fd7) (bytevector-fill! . G4fd6) (bytevector-copy! . G4fd5) (bytevector-copy . G4fd4) (bytevector->uint-list . G4fd3) (bytevector->u8-list . G4fd2) (bytevector->sint-list . G4fd1) (endianness . G4e84)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5170 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G50da) (string-titlecase . G50d9) (string-normalize-nfkd . G50d8) (string-normalize-nfkc . G50d7) (string-normalize-nfd . G50d6) (string-normalize-nfc . G50d5) (string-foldcase . G50d4) (string-downcase . G50d3) (string-ci>? . G50d2) (string-ci>=? . G50d1) (string-ci=? . G50d0) (string-ci<? . G50cf) (string-ci<=? . G50ce) (char-whitespace? . G50cd) (char-upper-case? . G50cc) (char-title-case? . G50cb) (char-numeric? . G50ca) (char-lower-case? . G50c9) (char-general-category . G50c8) (char-upcase . G50c7) (char-titlecase . G50c6) (char-foldcase . G50c5) (char-downcase . G50c4) (char-ci>? . G50c3) (char-ci>=? . G50c2) (char-ci=? . G50c1) (char-ci<? . G50c0) (char-ci<=? . G50bf) (char-alphabetic? . G50be)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5171 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G501e) (raise-continuable . G501d) (raise . G501c) (guard . G4e90) (else . G4e88) (=> . G4e87)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5172 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4f71) (bitwise-reverse-bit-field . G4f70) (bitwise-length . G4f6f) (bitwise-if . G4f6e) (bitwise-first-bit-set . G4f6d) (bitwise-copy-bit-field . G4f6c) (bitwise-copy-bit . G4f6b) (bitwise-bit-set? . G4f6a) (bitwise-bit-field . G4f69) (bitwise-bit-count . G4f68) (bitwise-xor . G4f67) (bitwise-ior . G4f66) (bitwise-and . G4f65) (bitwise-not . G4f64) (bitwise-arithmetic-shift-right . G4f63) (bitwise-arithmetic-shift-left . G4f62) (bitwise-arithmetic-shift . G4f61)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5173 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f9e) (fxxor . G4f9d) (fxrotate-bit-field . G4f9c) (fxreverse-bit-field . G4f9b) (fxpositive? . G4f9a) (fxodd? . G4f99) (fxnot . G4f98) (fxnegative? . G4f97) (fxmod0 . G4f96) (fxmod . G4f95) (fxmin . G4f94) (fxmax . G4f93) (fxlength . G4f92) (fxior . G4f91) (fxif . G4f90) (fxfirst-bit-set . G4f8f) (fxeven? . G4f8e) (fxdiv0-and-mod0 . G4f8d) (fxdiv0 . G4f8c) (fxdiv-and-mod . G4f8b) (fxdiv . G4f8a) (fxcopy-bit-field . G4f89) (fxcopy-bit . G4f88) (fxbit-set? . G4f87) (fxbit-field . G4f86) (fxbit-count . G4f85) (fxarithmetic-shift-right . G4f84) (fxarithmetic-shift-left . G4f83) (fxarithmetic-shift . G4f82) (fxand . G4f81) (fx>? . G4f80) (fx>=? . G4f7f) (fx=? . G4f7e) (fx<? . G4f7d) (fx<=? . G4f7c) (fx-/carry . G4f7b) (fx- . G4f7a) (fx+/carry . G4f79) (fx+ . G4f78) (fx*/carry . G4f77) (fx* . G4f76) (greatest-fixnum . G4f75) (least-fixnum . G4f74) (fixnum-width . G4f73) (fixnum? . G4f72)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5174 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4fd0) (no-infinities-violation? . G4fcf) (make-no-nans-violation . G4fce) (make-no-infinities-violation . G4fcd) (real->flonum . G4fcc) (flzero? . G4fcb) (fltruncate . G4fca) (fltan . G4fc9) (flsqrt . G4fc8) (flsin . G4fc7) (flround . G4fc6) (flpositive? . G4fc5) (flonum? . G4fc4) (flodd? . G4fc3) (flnumerator . G4fc2) (flnegative? . G4fc1) (flnan? . G4fc0) (flmod0 . G4fbf) (flmod . G4fbe) (flmin . G4fbd) (flmax . G4fbc) (fllog . G4fbb) (flinteger? . G4fba) (flinfinite? . G4fb9) (flfloor . G4fb8) (flfinite? . G4fb7) (flexpt . G4fb6) (flexp . G4fb5) (fleven? . G4fb4) (fldiv0-and-mod0 . G4fb3) (fldiv0 . G4fb2) (fldiv-and-mod . G4fb1) (fldiv . G4fb0) (fldenominator . G4faf) (flcos . G4fae) (flceiling . G4fad) (flatan . G4fac) (flasin . G4fab) (flacos . G4faa) (flabs . G4fa9) (fl>? . G4fa8) (fl>=? . G4fa7) (fl=? . G4fa6) (fl<? . G4fa5) (fl<=? . G4fa4) (fl/ . G4fa3) (fl- . G4fa2) (fl+ . G4fa1) (fl* . G4fa0) (fixnum->flonum . G4f9f) (&no-nans . G4ebc) (&no-infinities . G4ebb)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5175 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G50a7) (string-ci-hash . G50a6) (string-hash . G50a5) (equal-hash . G50a4) (hashtable-equivalence-function . G50a3) (make-hashtable . G50a2) (hashtable-hash-function . G50a1) (make-eqv-hashtable . G50a0) (make-eq-hashtable . G509f) (hashtable? . G509e) (hashtable-update! . G509d) (hashtable-size . G509c) (hashtable-set! . G509b) (hashtable-ref . G509a) (hashtable-mutable? . G5099) (hashtable-keys . G5098) (hashtable-entries . G5097) (hashtable-delete! . G5096) (hashtable-copy . G5095) (hashtable-contains? . G5094) (hashtable-clear! . G5093)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5176 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5083) (eof-object . G5082) (current-error-port . G5081) (current-output-port . G5080) (current-input-port . G507f) (output-port? . G507e) (input-port? . G507d) (utf-8-codec . G507c) (utf-16-codec . G507b) (transcoder-error-handling-mode . G507a) (transcoder-eol-style . G5079) (transcoder-codec . G5078) (transcoded-port . G5077) (textual-port? . G5076) (string->bytevector . G5075) (standard-output-port . G5074) (standard-input-port . G5073) (standard-error-port . G5072) (set-port-position! . G5071) (put-u8 . G5070) (put-string . G506f) (put-datum . G506e) (put-char . G506d) (put-bytevector . G506c) (port? . G506b) (port-transcoder . G506a) (port-position . G5069) (port-has-set-port-position!? . G5068) (port-has-port-position? . G5067) (port-eof? . G5066) (output-port-buffer-mode . G5065) (open-string-output-port . G5064) (open-string-input-port . G5063) (open-file-output-port . G5062) (open-file-input/output-port . G5061) (open-file-input-port . G5060) (open-bytevector-output-port . G505f) (open-bytevector-input-port . G505e) (native-transcoder . G505d) (native-eol-style . G505c) (make-transcoder . G505b) (latin-1-codec . G505a) (make-i/o-write-error . G4c99) (make-i/o-read-error . G4c85) (make-i/o-port-error . G4d30) (make-i/o-invalid-position-error . G4cae) (make-i/o-filename-error . G4cc7) (make-i/o-file-protection-error . G4cdf) (make-i/o-file-is-read-only-error . G4cf3) (make-i/o-file-does-not-exist-error . G4d1b) (make-i/o-file-already-exists-error . G4d07) (make-i/o-error . G4c71) (make-i/o-encoding-error . G4d5d) (make-i/o-decoding-error . G4d48) (make-custom-textual-output-port . G5059) (make-custom-textual-input/output-port . G5058) (make-custom-textual-input-port . G5057) (make-custom-binary-output-port . G5056) (make-custom-binary-input/output-port . G5055) (make-custom-binary-input-port . G5054) (lookahead-u8 . G5052) (lookahead-char . G5051) (i/o-write-error? . G4c9b) (i/o-read-error? . G4c87) (i/o-port-error? . G4d34) (i/o-invalid-position-error? . G4cb2) (i/o-filename-error? . G4ccb) (i/o-file-protection-error? . G4ce1) (i/o-file-is-read-only-error? . G4cf5) (i/o-file-does-not-exist-error? . G4d1d) (i/o-file-already-exists-error? . G4d09) (i/o-error? . G4c73) (i/o-error-port . G4d36) (i/o-error-filename . G4ccd) (i/o-encoding-error? . G4d61) (i/o-encoding-error-char . G4d63) (i/o-decoding-error? . G4d4a) (get-u8 . G5050) (get-string-n! . G504f) (get-string-n . G504e) (get-string-all . G504d) (get-line . G504c) (get-datum . G504b) (get-char . G504a) (get-bytevector-some . G5049) (get-bytevector-n! . G5048) (get-bytevector-n . G5047) (get-bytevector-all . G5046) (flush-output-port . G5045) (close-port . G5044) (call-with-string-output-port . G5024) (call-with-port . G5023) (call-with-bytevector-output-port . G5022) (bytevector->string . G5021) (buffer-mode? . G5020) (binary-port? . G501f) (&i/o-encoding . G4eba) (&i/o-decoding . G4eb9) (&i/o-port . G4eb8) (&i/o-file-does-not-exist . G4eb7) (&i/o-file-already-exists . G4eb6) (&i/o-file-is-read-only . G4eb5) (&i/o-file-protection . G4eb4) (&i/o-filename . G4eb3) (&i/o-invalid-position . G4eb2) (&i/o-write . G4eb1) (&i/o-read . G4eb0) (&i/o . G4eaf) (error-handling-mode . G4e94) (file-options . G4e93) (buffer-mode . G4e92) (eol-style . G4e91)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5177 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G501b) (enum-set=? . G501a) (enum-set-universe . G5019) (enum-set-union . G5018) (enum-set-subset? . G5017) (enum-set-projection . G5016) (enum-set-member? . G5015) (enum-set-intersection . G5014) (enum-set-indexer . G5013) (enum-set-difference . G5012) (enum-set-constructor . G5011) (enum-set-complement . G5010) (enum-set->list . G500f) (define-enumeration . G4e9f)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5178 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b8f) (warning? . G4b0f) (violation? . G4b4b) (undefined-violation? . G4bff) (syntax-violation? . G4be7) (syntax-violation-subform . G4beb) (syntax-violation-form . G4be9) (syntax-violation . G317e) (simple-conditions . G500e) (serious-condition? . G4b23) (non-continuable-violation? . G4ba5) (message-condition? . G4af9) (make-who-condition . G4b8b) (make-warning . G4b0d) (make-violation . G4b49) (make-undefined-violation . G4bfd) (make-syntax-violation . G4be1) (make-serious-condition . G4b21) (make-non-continuable-violation . G4ba3) (make-message-condition . G4af5) (make-lexical-violation . G4bcb) (make-irritants-condition . G4b72) (make-implementation-restriction-violation . G4bb7) (make-error . G4b35) (make-assertion-violation . G4b5d) (lexical-violation? . G4bcd) (irritants-condition? . G4b76) (implementation-restriction-violation? . G4bb9) (error? . G4b37) (condition-who . G4b91) (condition-predicate . G500d) (condition-message . G4afb) (condition-irritants . G4b78) (condition-accessor . G500c) (condition . G500b) (assertion-violation? . G4b5f) (condition? . G500a) (&undefined . G4eae) (&syntax . G4ead) (&lexical . G4eac) (&implementation-restriction . G4eab) (&non-continuable . G4eaa) (&who . G4ea9) (&irritants . G4ea8) (&assertion . G4ea7) (&violation . G4ea6) (&error . G4ea5) (&serious . G4ea4) (&warning . G4ea3) (&message . G4ea2) (&condition . G4ea1) (define-condition-type . G4ea0)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G5179 '(rnrs records inspection) '(6) '() '() '() '((record? . G50b6) (record-type-uid . G50b5) (record-type-sealed? . G50b4) (record-type-parent . G50b3) (record-type-opaque? . G50b2) (record-type-name . G50b1) (record-type-generative? . G50b0) (record-type-field-names . G50af) (record-rtd . G50ae) (record-field-mutable? . G50ad)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G517a '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G50bd) (record-predicate . G50bc) (record-mutator . G50bb) (record-constructor . G50ba) (record-accessor . G50b9) (make-record-type-descriptor . G50b8) (make-record-constructor-descriptor . G50b7)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G517b '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e9e) (parent-rtd . G4e9d) (nongenerative . G4e9c) (opaque . G4e9b) (sealed . G4e9a) (protocol . G4e99) (parent . G4e98) (immutable . G4e97) (mutable . G4e96) (fields . G4e95) (record-constructor-descriptor . G4e72) (record-type-descriptor . G4e71)) '() values values '#f '#f '#t '#f) (G2c3c@G2acf@install-library 'G517c '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G515c) (&no-nans-rtd . G515b) (&no-infinities-rcd . G515a) (&no-infinities-rtd . G5159) (&i/o-encoding-rcd . G5158) (&i/o-encoding-rtd . G5157) (&i/o-decoding-rcd . G5156) (&i/o-decoding-rtd . G5155) (&i/o-port-rcd . G5154) (&i/o-port-rtd . G5153) (&i/o-file-does-not-exist-rcd . G5152) (&i/o-file-does-not-exist-rtd . G5151) (&i/o-file-already-exists-rcd . G5150) (&i/o-file-already-exists-rtd . G514f) (&i/o-file-is-read-only-rcd . G514e) (&i/o-file-is-read-only-rtd . G514d) (&i/o-file-protection-rcd . G514c) (&i/o-file-protection-rtd . G514b) (&i/o-filename-rcd . G514a) (&i/o-filename-rtd . G5149) (&i/o-invalid-position-rcd . G5148) (&i/o-invalid-position-rtd . G5147) (&i/o-write-rcd . G5146) (&i/o-write-rtd . G5145) (&i/o-read-rcd . G5144) (&i/o-read-rtd . G5143) (&i/o-rcd . G5142) (&i/o-rtd . G5141) (&undefined-rcd . G5140) (&undefined-rtd . G513f) (&syntax-rcd . G513e) (&syntax-rtd . G513d) (&lexical-rcd . G513c) (&lexical-rtd . G513b) (&implementation-restriction-rcd . G513a) (&implementation-restriction-rtd . G5139) (&non-continuable-rcd . G5138) (&non-continuable-rtd . G5137) (&who-rcd . G5136) (&who-rtd . G5135) (&irritants-rcd . G5134) (&irritants-rtd . G5133) (&assertion-rcd . G5132) (&assertion-rtd . G5131) (&violation-rcd . G5130) (&violation-rtd . G512f) (&error-rcd . G512e) (&error-rtd . G512d) (&serious-rcd . G512c) (&serious-rtd . G512b) (&warning-rcd . G512a) (&warning-rtd . G5129) (&message-rcd . G5128) (&message-rtd . G5127) (&condition-rcd . G5126) (&condition-rtd . G5125) (syntax-error . G3178) (syntax-dispatch . G308b) (pretty-print . G5124) (eval-core . G5123) (set-symbol-value! . G5122) (symbol-value . G5121) (gensym . G5120) (void . G511f) (load . G4dc2) (interaction-environment . G318a) (char-ready? . G511e) (regexp? . G511d) (read-line . G511c) (dotted-list? . G511b) (circular-list? . G511a) (proper-list? . G5119) (circular-list . G5118) (last . G5117) (last-pair . G5116) (not-pair? . G5115) (split-at! . G5114) (split-at . G5113) (list= . G5112) (list-copy . G5111) (list-tabulate . G5110) (make-list . G510f) (xcons . G510e) (tenth . G510d) (ninth . G510c) (eighth . G510b) (seventh . G510a) (sixth . G5109) (fifth . G5108) (drop-right! . G5107) (drop-right . G5106) (take-right . G5105) (take! . G5104) (drop . G5103) (take . G5102) (car+cdr . G5101) (third . G5100) (second . G50ff) (first . G50fe) (assoc-ref . G50fd) (alist-cons . G50fc) (print . G50fb) (format . G50fa) (standard-library-path . G50f9) (file-newer? . G50f8) (stat-mtime . G50f7) (current-directory . G50f6) (write-to-file . G50f5) (file->list . G50f4) (file->string . G50f3) (digit->integer . G50f2) (call-with-string-input-port . G50f1) (call-with-string-io . G50f0) (string-split . G50ef) (bytevector-for-each . G50ee) (string->regexp . G50ed) (rxmatch . G50ec) (regexp-replace-all . G50eb) (hashtable-for-each . G50ea) (readdir . G50e9) (get-environment-variables . G50e8) (get-environment-variable . G50e7) (get-timeofday . G50e6) (get-command-line . G50e5) (sys-display . G50e4) (source-info . G50e3) (make-compiler-instruction . G50e2) (make-instruction . G50e1) (set-source-info! . G50e0) (bignum? . G50df) (make-complex . G50de) (fasl-read . G50dd) (fasl-write . G50dc) (receive . G50db) (make-parameter . G28a5) (string-upcase . G50da) (string-titlecase . G50d9) (string-normalize-nfkd . G50d8) (string-normalize-nfkc . G50d7) (string-normalize-nfd . G50d6) (string-normalize-nfc . G50d5) (string-foldcase . G50d4) (string-downcase . G50d3) (string-ci>? . G50d2) (string-ci>=? . G50d1) (string-ci=? . G50d0) (string-ci<? . G50cf) (string-ci<=? . G50ce) (char-whitespace? . G50cd) (char-upper-case? . G50cc) (char-title-case? . G50cb) (char-numeric? . G50ca) (char-lower-case? . G50c9) (char-general-category . G50c8) (char-upcase . G50c7) (char-titlecase . G50c6) (char-foldcase . G50c5) (char-downcase . G50c4) (char-ci>? . G50c3) (char-ci>=? . G50c2) (char-ci=? . G50c1) (char-ci<? . G50c0) (char-ci<=? . G50bf) (char-alphabetic? . G50be) (make-variable-transformer . G2e89) (identifier? . G3180) (generate-temporaries . G316a) (free-identifier=? . G316c) (syntax->datum . G3184) (datum->syntax . G3182) (bound-identifier=? . G316e) (record-type-descriptor? . G50bd) (record-predicate . G50bc) (record-mutator . G50bb) (record-constructor . G50ba) (record-accessor . G50b9) (make-record-type-descriptor . G50b8) (make-record-constructor-descriptor . G50b7) (record? . G50b6) (record-type-uid . G50b5) (record-type-sealed? . G50b4) (record-type-parent . G50b3) (record-type-opaque? . G50b2) (record-type-name . G50b1) (record-type-generative? . G50b0) (record-type-field-names . G50af) (record-rtd . G50ae) (record-field-mutable? . G50ad) (delete-file . G50ac) (file-exists? . G50ab) (vector-sort! . G50aa) (vector-sort . G50a9) (list-sort . G50a8) (symbol-hash . G50a7) (string-ci-hash . G50a6) (string-hash . G50a5) (equal-hash . G50a4) (hashtable-equivalence-function . G50a3) (make-hashtable . G50a2) (hashtable-hash-function . G50a1) (make-eqv-hashtable . G50a0) (make-eq-hashtable . G509f) (hashtable? . G509e) (hashtable-update! . G509d) (hashtable-size . G509c) (hashtable-set! . G509b) (hashtable-ref . G509a) (hashtable-mutable? . G5099) (hashtable-keys . G5098) (hashtable-entries . G5097) (hashtable-delete! . G5096) (hashtable-copy . G5095) (hashtable-contains? . G5094) (hashtable-clear! . G5093) (call-with-output-file . G5092) (call-with-input-file . G5091) (write-char . G5090) (write . G508f) (with-output-to-file . G508e) (with-input-from-file . G508d) (read-char . G508c) (read . G508b) (peek-char . G508a) (open-output-file . G5089) (open-input-file . G5088) (newline . G5087) (display . G5086) (close-output-port . G5085) (close-input-port . G5084) (eof-object? . G5083) (eof-object . G5082) (current-error-port . G5081) (current-output-port . G5080) (current-input-port . G507f) (output-port? . G507e) (input-port? . G507d) (utf-8-codec . G507c) (utf-16-codec . G507b) (transcoder-error-handling-mode . G507a) (transcoder-eol-style . G5079) (transcoder-codec . G5078) (transcoded-port . G5077) (textual-port? . G5076) (string->bytevector . G5075) (standard-output-port . G5074) (standard-input-port . G5073) (standard-error-port . G5072) (set-port-position! . G5071) (put-u8 . G5070) (put-string . G506f) (put-datum . G506e) (put-char . G506d) (put-bytevector . G506c) (port? . G506b) (port-transcoder . G506a) (port-position . G5069) (port-has-set-port-position!? . G5068) (port-has-port-position? . G5067) (port-eof? . G5066) (output-port-buffer-mode . G5065) (open-string-output-port . G5064) (open-string-input-port . G5063) (open-file-output-port . G5062) (open-file-input/output-port . G5061) (open-file-input-port . G5060) (open-bytevector-output-port . G505f) (open-bytevector-input-port . G505e) (native-transcoder . G505d) (native-eol-style . G505c) (make-transcoder . G505b) (latin-1-codec . G505a) (make-i/o-write-error . G4c99) (make-i/o-read-error . G4c85) (make-i/o-port-error . G4d30) (make-i/o-invalid-position-error . G4cae) (make-i/o-filename-error . G4cc7) (make-i/o-file-protection-error . G4cdf) (make-i/o-file-is-read-only-error . G4cf3) (make-i/o-file-does-not-exist-error . G4d1b) (make-i/o-file-already-exists-error . G4d07) (make-i/o-error . G4c71) (make-i/o-encoding-error . G4d5d) (make-i/o-decoding-error . G4d48) (make-custom-textual-output-port . G5059) (make-custom-textual-input/output-port . G5058) (make-custom-textual-input-port . G5057) (make-custom-binary-output-port . G5056) (make-custom-binary-input/output-port . G5055) (make-custom-binary-input-port . G5054) (make-bytevector . G5053) (lookahead-u8 . G5052) (lookahead-char . G5051) (i/o-write-error? . G4c9b) (i/o-read-error? . G4c87) (i/o-port-error? . G4d34) (i/o-invalid-position-error? . G4cb2) (i/o-filename-error? . G4ccb) (i/o-file-protection-error? . G4ce1) (i/o-file-is-read-only-error? . G4cf5) (i/o-file-does-not-exist-error? . G4d1d) (i/o-file-already-exists-error? . G4d09) (i/o-error? . G4c73) (i/o-error-port . G4d36) (i/o-error-filename . G4ccd) (i/o-encoding-error? . G4d61) (i/o-encoding-error-char . G4d63) (i/o-decoding-error? . G4d4a) (get-u8 . G5050) (get-string-n! . G504f) (get-string-n . G504e) (get-string-all . G504d) (get-line . G504c) (get-datum . G504b) (get-char . G504a) (get-bytevector-some . G5049) (get-bytevector-n! . G5048) (get-bytevector-n . G5047) (get-bytevector-all . G5046) (flush-output-port . G5045) (close-port . G5044) (scheme-report-environment . G3158) (quotient . G5043) (null-environment . G3156) (remainder . G5042) (modulo . G5041) (inexact->exact . G5040) (force . G503f) (exact->inexact . G503e) (exit . G503d) (command-line . G4dbc) (string-fill! . G503c) (string-set! . G503b) (set-cdr! . G503a) (set-car! . G5039) (remove . G5038) (remv . G5037) (remp . G5036) (remq . G5035) (partition . G5034) (memv . G5033) (memq . G5032) (memp . G5031) (member . G5030) (exists . G502f) (for-all . G502e) (fold-right . G502d) (fold-left . G502c) (find . G502b) (filter . G502a) (cons* . G5029) (assv . G5028) (assq . G5027) (assp . G5026) (assoc . G5025) (call-with-string-output-port . G5024) (call-with-port . G5023) (call-with-bytevector-output-port . G5022) (bytevector->string . G5021) (buffer-mode? . G5020) (binary-port? . G501f) (with-exception-handler . G501e) (raise-continuable . G501d) (raise . G501c) (eval . G315c) (environment . G3154) (make-enumeration . G501b) (enum-set=? . G501a) (enum-set-universe . G5019) (enum-set-union . G5018) (enum-set-subset? . G5017) (enum-set-projection . G5016) (enum-set-member? . G5015) (enum-set-intersection . G5014) (enum-set-indexer . G5013) (enum-set-difference . G5012) (enum-set-constructor . G5011) (enum-set-complement . G5010) (enum-set->list . G500f) (who-condition? . G4b8f) (warning? . G4b0f) (violation? . G4b4b) (undefined-violation? . G4bff) (syntax-violation? . G4be7) (syntax-violation-subform . G4beb) (syntax-violation-form . G4be9) (syntax-violation . G317e) (simple-conditions . G500e) (serious-condition? . G4b23) (non-continuable-violation? . G4ba5) (message-condition? . G4af9) (make-who-condition . G4b8b) (make-warning . G4b0d) (make-violation . G4b49) (make-undefined-violation . G4bfd) (make-syntax-violation . G4be1) (make-serious-condition . G4b21) (make-non-continuable-violation . G4ba3) (make-message-condition . G4af5) (make-lexical-violation . G4bcb) (make-irritants-condition . G4b72) (make-implementation-restriction-violation . G4bb7) (make-error . G4b35) (make-assertion-violation . G4b5d) (lexical-violation? . G4bcd) (irritants-condition? . G4b76) (implementation-restriction-violation? . G4bb9) (error? . G4b37) (condition-who . G4b91) (condition-predicate . G500d) (condition-message . G4afb) (condition-irritants . G4b78) (condition-accessor . G500c) (condition . G500b) (assertion-violation? . G4b5f) (condition? . G500a) (utf32->string . G5009) (utf16->string . G5008) (utf8->string . G5007) (uint-list->bytevector . G5006) (u8-list->bytevector . G5005) (string->utf8 . G5004) (string->utf32 . G5003) (string->utf16 . G5002) (sint-list->bytevector . G5001) (native-endianness . G5000) (bytevector? . G4fff) (bytevector=? . G4ffe) (bytevector-uint-set! . G4ffd) (bytevector-uint-ref . G4ffc) (bytevector-u8-set! . G4ffb) (bytevector-u8-ref . G4ffa) (bytevector-u64-set! . G4ff9) (bytevector-u64-ref . G4ff8) (bytevector-u64-native-set! . G4ff7) (bytevector-u64-native-ref . G4ff6) (bytevector-u32-set! . G4ff5) (bytevector-u32-ref . G4ff4) (bytevector-u32-native-set! . G4ff3) (bytevector-u32-native-ref . G4ff2) (bytevector-u16-set! . G4ff1) (bytevector-u16-ref . G4ff0) (bytevector-u16-native-set! . G4fef) (bytevector-u16-native-ref . G4fee) (bytevector-sint-set! . G4fed) (bytevector-sint-ref . G4fec) (bytevector-s8-set! . G4feb) (bytevector-s8-ref . G4fea) (bytevector-s64-set! . G4fe9) (bytevector-s64-ref . G4fe8) (bytevector-s64-native-set! . G4fe7) (bytevector-s64-native-ref . G4fe6) (bytevector-s32-set! . G4fe5) (bytevector-s32-ref . G4fe4) (bytevector-s32-native-set! . G4fe3) (bytevector-s32-native-ref . G4fe2) (bytevector-s16-set! . G4fe1) (bytevector-s16-ref . G4fe0) (bytevector-s16-native-set! . G4fdf) (bytevector-s16-native-ref . G4fde) (bytevector-length . G4fdd) (bytevector-ieee-single-ref . G4fdc) (bytevector-ieee-single-native-set! . G4fdb) (bytevector-ieee-single-native-ref . G4fda) (bytevector-ieee-double-ref . G4fd9) (bytevector-ieee-double-native-set! . G4fd8) (bytevector-ieee-double-native-ref . G4fd7) (bytevector-fill! . G4fd6) (bytevector-copy! . G4fd5) (bytevector-copy . G4fd4) (bytevector->uint-list . G4fd3) (bytevector->u8-list . G4fd2) (bytevector->sint-list . G4fd1) (no-nans-violation? . G4fd0) (no-infinities-violation? . G4fcf) (make-no-nans-violation . G4fce) (make-no-infinities-violation . G4fcd) (real->flonum . G4fcc) (flzero? . G4fcb) (fltruncate . G4fca) (fltan . G4fc9) (flsqrt . G4fc8) (flsin . G4fc7) (flround . G4fc6) (flpositive? . G4fc5) (flonum? . G4fc4) (flodd? . G4fc3) (flnumerator . G4fc2) (flnegative? . G4fc1) (flnan? . G4fc0) (flmod0 . G4fbf) (flmod . G4fbe) (flmin . G4fbd) (flmax . G4fbc) (fllog . G4fbb) (flinteger? . G4fba) (flinfinite? . G4fb9) (flfloor . G4fb8) (flfinite? . G4fb7) (flexpt . G4fb6) (flexp . G4fb5) (fleven? . G4fb4) (fldiv0-and-mod0 . G4fb3) (fldiv0 . G4fb2) (fldiv-and-mod . G4fb1) (fldiv . G4fb0) (fldenominator . G4faf) (flcos . G4fae) (flceiling . G4fad) (flatan . G4fac) (flasin . G4fab) (flacos . G4faa) (flabs . G4fa9) (fl>? . G4fa8) (fl>=? . G4fa7) (fl=? . G4fa6) (fl<? . G4fa5) (fl<=? . G4fa4) (fl/ . G4fa3) (fl- . G4fa2) (fl+ . G4fa1) (fl* . G4fa0) (fixnum->flonum . G4f9f) (fxzero? . G4f9e) (fxxor . G4f9d) (fxrotate-bit-field . G4f9c) (fxreverse-bit-field . G4f9b) (fxpositive? . G4f9a) (fxodd? . G4f99) (fxnot . G4f98) (fxnegative? . G4f97) (fxmod0 . G4f96) (fxmod . G4f95) (fxmin . G4f94) (fxmax . G4f93) (fxlength . G4f92) (fxior . G4f91) (fxif . G4f90) (fxfirst-bit-set . G4f8f) (fxeven? . G4f8e) (fxdiv0-and-mod0 . G4f8d) (fxdiv0 . G4f8c) (fxdiv-and-mod . G4f8b) (fxdiv . G4f8a) (fxcopy-bit-field . G4f89) (fxcopy-bit . G4f88) (fxbit-set? . G4f87) (fxbit-field . G4f86) (fxbit-count . G4f85) (fxarithmetic-shift-right . G4f84) (fxarithmetic-shift-left . G4f83) (fxarithmetic-shift . G4f82) (fxand . G4f81) (fx>? . G4f80) (fx>=? . G4f7f) (fx=? . G4f7e) (fx<? . G4f7d) (fx<=? . G4f7c) (fx-/carry . G4f7b) (fx- . G4f7a) (fx+/carry . G4f79) (fx+ . G4f78) (fx*/carry . G4f77) (fx* . G4f76) (greatest-fixnum . G4f75) (least-fixnum . G4f74) (fixnum-width . G4f73) (fixnum? . G4f72) (bitwise-rotate-bit-field . G4f71) (bitwise-reverse-bit-field . G4f70) (bitwise-length . G4f6f) (bitwise-if . G4f6e) (bitwise-first-bit-set . G4f6d) (bitwise-copy-bit-field . G4f6c) (bitwise-copy-bit . G4f6b) (bitwise-bit-set? . G4f6a) (bitwise-bit-field . G4f69) (bitwise-bit-count . G4f68) (bitwise-xor . G4f67) (bitwise-ior . G4f66) (bitwise-and . G4f65) (bitwise-not . G4f64) (bitwise-arithmetic-shift-right . G4f63) (bitwise-arithmetic-shift-left . G4f62) (bitwise-arithmetic-shift . G4f61) (zero? . G4f60) (vector? . G4f5f) (vector-set! . G4f5e) (vector-ref . G4f5d) (vector-map . G4f5c) (vector-length . G4f5b) (vector-for-each . G4f5a) (vector-fill! . G4f59) (vector->list . G4f58) (vector . G4f57) (values . G4f56) (truncate . G4f55) (tan . G4f54) (symbol? . G4f53) (symbol=? . G4f52) (symbol->string . G4f51) (substring . G4f50) (string? . G4f4f) (string>? . G4f4e) (string>=? . G4f4d) (string=? . G4f4c) (string<? . G4f4b) (string<=? . G4f4a) (string-ref . G4f49) (string-length . G4f48) (string-for-each . G4f47) (string-copy . G4f46) (string-append . G4f45) (string->symbol . G4f44) (string->number . G4f43) (string->list . G4f42) (string . G4f41) (sqrt . G4f40) (sin . G4f3f) (round . G4f3e) (reverse . G4f3d) (real? . G4f3c) (real-valued? . G4f3b) (real-part . G4f3a) (rationalize . G4f39) (rational? . G4f38) (rational-valued? . G4f37) (procedure? . G4f36) (positive? . G4f35) (pair? . G4f34) (odd? . G4f33) (numerator . G4f32) (number? . G4f31) (number->string . G4f30) (null? . G4f2f) (not . G4f2e) (negative? . G4f2d) (nan? . G4f2c) (min . G4f2b) (max . G4f2a) (map . G4f29) (make-vector . G4f28) (make-string . G4f27) (make-rectangular . G4f26) (make-polar . G4f25) (magnitude . G4f24) (log . G4f23) (list? . G4f22) (list-tail . G4f21) (list-ref . G4f20) (list->vector . G4f1f) (list->string . G4f1e) (list . G4f1d) (length . G4f1c) (lcm . G4f1b) (integer? . G4f1a) (integer-valued? . G4f19) (integer->char . G4f18) (infinite? . G4f17) (inexact? . G4f16) (inexact . G4f15) (imag-part . G4f14) (gcd . G4f13) (for-each . G4f12) (floor . G4f11) (finite? . G4f10) (expt . G4f0f) (exp . G4f0e) (exact? . G4f0d) (exact-integer-sqrt . G4f0c) (exact . G4f0b) (even? . G4f0a) (error . G4f09) (eqv? . G4f08) (equal? . G4f07) (eq? . G4f06) (dynamic-wind . G4f05) (div0-and-mod0 . G4f04) (mod0 . G4f03) (div0 . G4f02) (div-and-mod . G4f01) (mod . G4f00) (div . G4eff) (denominator . G4efe) (cos . G4efd) (cons . G4efc) (complex? . G4efb) (char? . G4efa) (char>? . G4ef9) (char>=? . G4ef8) (char=? . G4ef7) (char<? . G4ef6) (char<=? . G4ef5) (char->integer . G4ef4) (ceiling . G4ef3) (call-with-values . G4ef2) (call/cc . G4ef1) (call-with-current-continuation . G4ef0) (cddddr . G4eef) (cdddar . G4eee) (cddadr . G4eed) (cddaar . G4eec) (cdaddr . G4eeb) (cdadar . G4eea) (cdaadr . G4ee9) (cdaaar . G4ee8) (cadddr . G4ee7) (caddar . G4ee6) (cadadr . G4ee5) (cadaar . G4ee4) (caaddr . G4ee3) (caadar . G4ee2) (caaadr . G4ee1) (caaaar . G4ee0) (cdddr . G4edf) (cddar . G4ede) (cdadr . G4edd) (cdaar . G4edc) (caddr . G4edb) (cadar . G4eda) (caadr . G4ed9) (caaar . G4ed8) (cddr . G4ed7) (cdar . G4ed6) (cadr . G4ed5) (caar . G4ed4) (cdr . G4ed3) (car . G4ed2) (boolean? . G4ed1) (boolean=? . G4ed0) (atan . G4ecf) (assertion-violation . G4ece) (asin . G4ecd) (apply . G4ecc) (append . G4ecb) (angle . G4eca) (acos . G4ec9) (abs . G4ec8) (/ . G4ec7) (* . G4ec6) (- . G4ec5) (+ . G4ec4) (>= . G4ec3) (> . G4ec2) (= . G4ec1) (<= . G4ec0) (< . G4ebf) (library . G4ebe) (export . G4ebd) (&no-nans . G4ebc) (&no-infinities . G4ebb) (&i/o-encoding . G4eba) (&i/o-decoding . G4eb9) (&i/o-port . G4eb8) (&i/o-file-does-not-exist . G4eb7) (&i/o-file-already-exists . G4eb6) (&i/o-file-is-read-only . G4eb5) (&i/o-file-protection . G4eb4) (&i/o-filename . G4eb3) (&i/o-invalid-position . G4eb2) (&i/o-write . G4eb1) (&i/o-read . G4eb0) (&i/o . G4eaf) (&undefined . G4eae) (&syntax . G4ead) (&lexical . G4eac) (&implementation-restriction . G4eab) (&non-continuable . G4eaa) (&who . G4ea9) (&irritants . G4ea8) (&assertion . G4ea7) (&violation . G4ea6) (&error . G4ea5) (&serious . G4ea4) (&warning . G4ea3) (&message . G4ea2) (&condition . G4ea1) (define-condition-type . G4ea0) (define-enumeration . G4e9f) (define-record-type . G4e9e) (parent-rtd . G4e9d) (nongenerative . G4e9c) (opaque . G4e9b) (sealed . G4e9a) (protocol . G4e99) (parent . G4e98) (immutable . G4e97) (mutable . G4e96) (fields . G4e95) (error-handling-mode . G4e94) (file-options . G4e93) (buffer-mode . G4e92) (eol-style . G4e91) (guard . G4e90) (trace-define . G4e8f) (trace-lambda . G4e8e) (unsyntax-splicing . G4e8d) (unsyntax . G4e8c) (unquote-splicing . G4e8b) (unquote . G4e8a) (_ . G4e89) (else . G4e88) (=> . G4e87) (... . G4e86) (assert . G4e85) (endianness . G4e84) (delay . G4e83) (time . G4e82) (or . G4e81) (and . G4e80) (do . G4e7f) (cond . G4e7e) (let* . G4e7d) (let . G4e7c) (let*-values . G4e7b) (let-values . G4e7a) (identifier-syntax . G4e79) (with-syntax . G4e78) (quasisyntax . G4e77) (quasiquote . G4e76) (syntax-rules . G4e75) (include . G4e74) (define-struct . G4e73) (record-constructor-descriptor . G4e72) (record-type-descriptor . G4e71) (case . G4e70) (parameterize . G4e6f) (unless . G4e6e) (when . G4e6d) (if . G4e6c) (letrec* . G4e6b) (letrec . G4e6a) (type-descriptor . G4e69) (case-lambda . G4e68) (lambda . G4e67) (syntax . G4e66) (syntax-case . G4e65) (quote . G4e64) (foreign-call . G4e63) (letrec-syntax . G4e62) (let-syntax . G4e61) (set! . G4e60) (import . G4e5f) (begin . G4e5e) (module . G4e5d) (define-syntax . G4e5c) (define . G4e5b)) '((G515c core-prim . &no-nans-rcd) (G515b core-prim . &no-nans-rtd) (G515a core-prim . &no-infinities-rcd) (G5159 core-prim . &no-infinities-rtd) (G5158 core-prim . &i/o-encoding-rcd) (G5157 core-prim . &i/o-encoding-rtd) (G5156 core-prim . &i/o-decoding-rcd) (G5155 core-prim . &i/o-decoding-rtd) (G5154 core-prim . &i/o-port-rcd) (G5153 core-prim . &i/o-port-rtd) (G5152 core-prim . &i/o-file-does-not-exist-rcd) (G5151 core-prim . &i/o-file-does-not-exist-rtd) (G5150 core-prim . &i/o-file-already-exists-rcd) (G514f core-prim . &i/o-file-already-exists-rtd) (G514e core-prim . &i/o-file-is-read-only-rcd) (G514d core-prim . &i/o-file-is-read-only-rtd) (G514c core-prim . &i/o-file-protection-rcd) (G514b core-prim . &i/o-file-protection-rtd) (G514a core-prim . &i/o-filename-rcd) (G5149 core-prim . &i/o-filename-rtd) (G5148 core-prim . &i/o-invalid-position-rcd) (G5147 core-prim . &i/o-invalid-position-rtd) (G5146 core-prim . &i/o-write-rcd) (G5145 core-prim . &i/o-write-rtd) (G5144 core-prim . &i/o-read-rcd) (G5143 core-prim . &i/o-read-rtd) (G5142 core-prim . &i/o-rcd) (G5141 core-prim . &i/o-rtd) (G5140 core-prim . &undefined-rcd) (G513f core-prim . &undefined-rtd) (G513e core-prim . &syntax-rcd) (G513d core-prim . &syntax-rtd) (G513c core-prim . &lexical-rcd) (G513b core-prim . &lexical-rtd) (G513a core-prim . &implementation-restriction-rcd) (G5139 core-prim . &implementation-restriction-rtd) (G5138 core-prim . &non-continuable-rcd) (G5137 core-prim . &non-continuable-rtd) (G5136 core-prim . &who-rcd) (G5135 core-prim . &who-rtd) (G5134 core-prim . &irritants-rcd) (G5133 core-prim . &irritants-rtd) (G5132 core-prim . &assertion-rcd) (G5131 core-prim . &assertion-rtd) (G5130 core-prim . &violation-rcd) (G512f core-prim . &violation-rtd) (G512e core-prim . &error-rcd) (G512d core-prim . &error-rtd) (G512c core-prim . &serious-rcd) (G512b core-prim . &serious-rtd) (G512a core-prim . &warning-rcd) (G5129 core-prim . &warning-rtd) (G5128 core-prim . &message-rcd) (G5127 core-prim . &message-rtd) (G5126 core-prim . &condition-rcd) (G5125 core-prim . &condition-rtd) (G3178 core-prim . syntax-error) (G308b core-prim . syntax-dispatch) (G5124 core-prim . pretty-print) (G5123 core-prim . eval-core) (G5122 core-prim . set-symbol-value!) (G5121 core-prim . symbol-value) (G5120 core-prim . gensym) (G511f core-prim . void) (G4dc2 core-prim . load) (G318a core-prim . interaction-environment) (G511e core-prim . char-ready?) (G511d core-prim . regexp?) (G511c core-prim . read-line) (G511b core-prim . dotted-list?) (G511a core-prim . circular-list?) (G5119 core-prim . proper-list?) (G5118 core-prim . circular-list) (G5117 core-prim . last) (G5116 core-prim . last-pair) (G5115 core-prim . not-pair?) (G5114 core-prim . split-at!) (G5113 core-prim . split-at) (G5112 core-prim . list=) (G5111 core-prim . list-copy) (G5110 core-prim . list-tabulate) (G510f core-prim . make-list) (G510e core-prim . xcons) (G510d core-prim . tenth) (G510c core-prim . ninth) (G510b core-prim . eighth) (G510a core-prim . seventh) (G5109 core-prim . sixth) (G5108 core-prim . fifth) (G5107 core-prim . drop-right!) (G5106 core-prim . drop-right) (G5105 core-prim . take-right) (G5104 core-prim . take!) (G5103 core-prim . drop) (G5102 core-prim . take) (G5101 core-prim . car+cdr) (G5100 core-prim . third) (G50ff core-prim . second) (G50fe core-prim . first) (G50fd core-prim . assoc-ref) (G50fc core-prim . alist-cons) (G50fb core-prim . print) (G50fa core-prim . format) (G50f9 core-prim . standard-library-path) (G50f8 core-prim . file-newer?) (G50f7 core-prim . stat-mtime) (G50f6 core-prim . current-directory) (G50f5 core-prim . write-to-file) (G50f4 core-prim . file->list) (G50f3 core-prim . file->string) (G50f2 core-prim . digit->integer) (G50f1 core-prim . call-with-string-input-port) (G50f0 core-prim . call-with-string-io) (G50ef core-prim . string-split) (G50ee core-prim . bytevector-for-each) (G50ed core-prim . string->regexp) (G50ec core-prim . rxmatch) (G50eb core-prim . regexp-replace-all) (G50ea core-prim . hashtable-for-each) (G50e9 core-prim . readdir) (G50e8 core-prim . get-environment-variables) (G50e7 core-prim . get-environment-variable) (G50e6 core-prim . get-timeofday) (G50e5 core-prim . get-command-line) (G50e4 core-prim . sys-display) (G50e3 core-prim . source-info) (G50e2 core-prim . make-compiler-instruction) (G50e1 core-prim . make-instruction) (G50e0 core-prim . set-source-info!) (G50df core-prim . bignum?) (G50de core-prim . make-complex) (G50dd core-prim . fasl-read) (G50dc core-prim . fasl-write) (G50db core-prim . receive) (G28a5 core-prim . make-parameter) (G50da core-prim . string-upcase) (G50d9 core-prim . string-titlecase) (G50d8 core-prim . string-normalize-nfkd) (G50d7 core-prim . string-normalize-nfkc) (G50d6 core-prim . string-normalize-nfd) (G50d5 core-prim . string-normalize-nfc) (G50d4 core-prim . string-foldcase) (G50d3 core-prim . string-downcase) (G50d2 core-prim . string-ci>?) (G50d1 core-prim . string-ci>=?) (G50d0 core-prim . string-ci=?) (G50cf core-prim . string-ci<?) (G50ce core-prim . string-ci<=?) (G50cd core-prim . char-whitespace?) (G50cc core-prim . char-upper-case?) (G50cb core-prim . char-title-case?) (G50ca core-prim . char-numeric?) (G50c9 core-prim . char-lower-case?) (G50c8 core-prim . char-general-category) (G50c7 core-prim . char-upcase) (G50c6 core-prim . char-titlecase) (G50c5 core-prim . char-foldcase) (G50c4 core-prim . char-downcase) (G50c3 core-prim . char-ci>?) (G50c2 core-prim . char-ci>=?) (G50c1 core-prim . char-ci=?) (G50c0 core-prim . char-ci<?) (G50bf core-prim . char-ci<=?) (G50be core-prim . char-alphabetic?) (G2e89 core-prim . make-variable-transformer) (G3180 core-prim . identifier?) (G316a core-prim . generate-temporaries) (G316c core-prim . free-identifier=?) (G3184 core-prim . syntax->datum) (G3182 core-prim . datum->syntax) (G316e core-prim . bound-identifier=?) (G50bd core-prim . record-type-descriptor?) (G50bc core-prim . record-predicate) (G50bb core-prim . record-mutator) (G50ba core-prim . record-constructor) (G50b9 core-prim . record-accessor) (G50b8 core-prim . make-record-type-descriptor) (G50b7 core-prim . make-record-constructor-descriptor) (G50b6 core-prim . record?) (G50b5 core-prim . record-type-uid) (G50b4 core-prim . record-type-sealed?) (G50b3 core-prim . record-type-parent) (G50b2 core-prim . record-type-opaque?) (G50b1 core-prim . record-type-name) (G50b0 core-prim . record-type-generative?) (G50af core-prim . record-type-field-names) (G50ae core-prim . record-rtd) (G50ad core-prim . record-field-mutable?) (G50ac core-prim . delete-file) (G50ab core-prim . file-exists?) (G50aa core-prim . vector-sort!) (G50a9 core-prim . vector-sort) (G50a8 core-prim . list-sort) (G50a7 core-prim . symbol-hash) (G50a6 core-prim . string-ci-hash) (G50a5 core-prim . string-hash) (G50a4 core-prim . equal-hash) (G50a3 core-prim . hashtable-equivalence-function) (G50a2 core-prim . make-hashtable) (G50a1 core-prim . hashtable-hash-function) (G50a0 core-prim . make-eqv-hashtable) (G509f core-prim . make-eq-hashtable) (G509e core-prim . hashtable?) (G509d core-prim . hashtable-update!) (G509c core-prim . hashtable-size) (G509b core-prim . hashtable-set!) (G509a core-prim . hashtable-ref) (G5099 core-prim . hashtable-mutable?) (G5098 core-prim . hashtable-keys) (G5097 core-prim . hashtable-entries) (G5096 core-prim . hashtable-delete!) (G5095 core-prim . hashtable-copy) (G5094 core-prim . hashtable-contains?) (G5093 core-prim . hashtable-clear!) (G5092 core-prim . call-with-output-file) (G5091 core-prim . call-with-input-file) (G5090 core-prim . write-char) (G508f core-prim . write) (G508e core-prim . with-output-to-file) (G508d core-prim . with-input-from-file) (G508c core-prim . read-char) (G508b core-prim . read) (G508a core-prim . peek-char) (G5089 core-prim . open-output-file) (G5088 core-prim . open-input-file) (G5087 core-prim . newline) (G5086 core-prim . display) (G5085 core-prim . close-output-port) (G5084 core-prim . close-input-port) (G5083 core-prim . eof-object?) (G5082 core-prim . eof-object) (G5081 core-prim . current-error-port) (G5080 core-prim . current-output-port) (G507f core-prim . current-input-port) (G507e core-prim . output-port?) (G507d core-prim . input-port?) (G507c core-prim . utf-8-codec) (G507b core-prim . utf-16-codec) (G507a core-prim . transcoder-error-handling-mode) (G5079 core-prim . transcoder-eol-style) (G5078 core-prim . transcoder-codec) (G5077 core-prim . transcoded-port) (G5076 core-prim . textual-port?) (G5075 core-prim . string->bytevector) (G5074 core-prim . standard-output-port) (G5073 core-prim . standard-input-port) (G5072 core-prim . standard-error-port) (G5071 core-prim . set-port-position!) (G5070 core-prim . put-u8) (G506f core-prim . put-string) (G506e core-prim . put-datum) (G506d core-prim . put-char) (G506c core-prim . put-bytevector) (G506b core-prim . port?) (G506a core-prim . port-transcoder) (G5069 core-prim . port-position) (G5068 core-prim . port-has-set-port-position!?) (G5067 core-prim . port-has-port-position?) (G5066 core-prim . port-eof?) (G5065 core-prim . output-port-buffer-mode) (G5064 core-prim . open-string-output-port) (G5063 core-prim . open-string-input-port) (G5062 core-prim . open-file-output-port) (G5061 core-prim . open-file-input/output-port) (G5060 core-prim . open-file-input-port) (G505f core-prim . open-bytevector-output-port) (G505e core-prim . open-bytevector-input-port) (G505d core-prim . native-transcoder) (G505c core-prim . native-eol-style) (G505b core-prim . make-transcoder) (G505a core-prim . latin-1-codec) (G4c99 core-prim . make-i/o-write-error) (G4c85 core-prim . make-i/o-read-error) (G4d30 core-prim . make-i/o-port-error) (G4cae core-prim . make-i/o-invalid-position-error) (G4cc7 core-prim . make-i/o-filename-error) (G4cdf core-prim . make-i/o-file-protection-error) (G4cf3 core-prim . make-i/o-file-is-read-only-error) (G4d1b core-prim . make-i/o-file-does-not-exist-error) (G4d07 core-prim . make-i/o-file-already-exists-error) (G4c71 core-prim . make-i/o-error) (G4d5d core-prim . make-i/o-encoding-error) (G4d48 core-prim . make-i/o-decoding-error) (G5059 core-prim . make-custom-textual-output-port) (G5058 core-prim . make-custom-textual-input/output-port) (G5057 core-prim . make-custom-textual-input-port) (G5056 core-prim . make-custom-binary-output-port) (G5055 core-prim . make-custom-binary-input/output-port) (G5054 core-prim . make-custom-binary-input-port) (G5053 core-prim . make-bytevector) (G5052 core-prim . lookahead-u8) (G5051 core-prim . lookahead-char) (G4c9b core-prim . i/o-write-error?) (G4c87 core-prim . i/o-read-error?) (G4d34 core-prim . i/o-port-error?) (G4cb2 core-prim . i/o-invalid-position-error?) (G4ccb core-prim . i/o-filename-error?) (G4ce1 core-prim . i/o-file-protection-error?) (G4cf5 core-prim . i/o-file-is-read-only-error?) (G4d1d core-prim . i/o-file-does-not-exist-error?) (G4d09 core-prim . i/o-file-already-exists-error?) (G4c73 core-prim . i/o-error?) (G4d36 core-prim . i/o-error-port) (G4ccd core-prim . i/o-error-filename) (G4d61 core-prim . i/o-encoding-error?) (G4d63 core-prim . i/o-encoding-error-char) (G4d4a core-prim . i/o-decoding-error?) (G5050 core-prim . get-u8) (G504f core-prim . get-string-n!) (G504e core-prim . get-string-n) (G504d core-prim . get-string-all) (G504c core-prim . get-line) (G504b core-prim . get-datum) (G504a core-prim . get-char) (G5049 core-prim . get-bytevector-some) (G5048 core-prim . get-bytevector-n!) (G5047 core-prim . get-bytevector-n) (G5046 core-prim . get-bytevector-all) (G5045 core-prim . flush-output-port) (G5044 core-prim . close-port) (G3158 core-prim . scheme-report-environment) (G5043 core-prim . quotient) (G3156 core-prim . null-environment) (G5042 core-prim . remainder) (G5041 core-prim . modulo) (G5040 core-prim . inexact->exact) (G503f core-prim . force) (G503e core-prim . exact->inexact) (G503d core-prim . exit) (G4dbc core-prim . command-line) (G503c core-prim . string-fill!) (G503b core-prim . string-set!) (G503a core-prim . set-cdr!) (G5039 core-prim . set-car!) (G5038 core-prim . remove) (G5037 core-prim . remv) (G5036 core-prim . remp) (G5035 core-prim . remq) (G5034 core-prim . partition) (G5033 core-prim . memv) (G5032 core-prim . memq) (G5031 core-prim . memp) (G5030 core-prim . member) (G502f core-prim . exists) (G502e core-prim . for-all) (G502d core-prim . fold-right) (G502c core-prim . fold-left) (G502b core-prim . find) (G502a core-prim . filter) (G5029 core-prim . cons*) (G5028 core-prim . assv) (G5027 core-prim . assq) (G5026 core-prim . assp) (G5025 core-prim . assoc) (G5024 core-prim . call-with-string-output-port) (G5023 core-prim . call-with-port) (G5022 core-prim . call-with-bytevector-output-port) (G5021 core-prim . bytevector->string) (G5020 core-prim . buffer-mode?) (G501f core-prim . binary-port?) (G501e core-prim . with-exception-handler) (G501d core-prim . raise-continuable) (G501c core-prim . raise) (G315c core-prim . eval) (G3154 core-prim . environment) (G501b core-prim . make-enumeration) (G501a core-prim . enum-set=?) (G5019 core-prim . enum-set-universe) (G5018 core-prim . enum-set-union) (G5017 core-prim . enum-set-subset?) (G5016 core-prim . enum-set-projection) (G5015 core-prim . enum-set-member?) (G5014 core-prim . enum-set-intersection) (G5013 core-prim . enum-set-indexer) (G5012 core-prim . enum-set-difference) (G5011 core-prim . enum-set-constructor) (G5010 core-prim . enum-set-complement) (G500f core-prim . enum-set->list) (G4b8f core-prim . who-condition?) (G4b0f core-prim . warning?) (G4b4b core-prim . violation?) (G4bff core-prim . undefined-violation?) (G4be7 core-prim . syntax-violation?) (G4beb core-prim . syntax-violation-subform) (G4be9 core-prim . syntax-violation-form) (G317e core-prim . syntax-violation) (G500e core-prim . simple-conditions) (G4b23 core-prim . serious-condition?) (G4ba5 core-prim . non-continuable-violation?) (G4af9 core-prim . message-condition?) (G4b8b core-prim . make-who-condition) (G4b0d core-prim . make-warning) (G4b49 core-prim . make-violation) (G4bfd core-prim . make-undefined-violation) (G4be1 core-prim . make-syntax-violation) (G4b21 core-prim . make-serious-condition) (G4ba3 core-prim . make-non-continuable-violation) (G4af5 core-prim . make-message-condition) (G4bcb core-prim . make-lexical-violation) (G4b72 core-prim . make-irritants-condition) (G4bb7 core-prim . make-implementation-restriction-violation) (G4b35 core-prim . make-error) (G4b5d core-prim . make-assertion-violation) (G4bcd core-prim . lexical-violation?) (G4b76 core-prim . irritants-condition?) (G4bb9 core-prim . implementation-restriction-violation?) (G4b37 core-prim . error?) (G4b91 core-prim . condition-who) (G500d core-prim . condition-predicate) (G4afb core-prim . condition-message) (G4b78 core-prim . condition-irritants) (G500c core-prim . condition-accessor) (G500b core-prim . condition) (G4b5f core-prim . assertion-violation?) (G500a core-prim . condition?) (G5009 core-prim . utf32->string) (G5008 core-prim . utf16->string) (G5007 core-prim . utf8->string) (G5006 core-prim . uint-list->bytevector) (G5005 core-prim . u8-list->bytevector) (G5004 core-prim . string->utf8) (G5003 core-prim . string->utf32) (G5002 core-prim . string->utf16) (G5001 core-prim . sint-list->bytevector) (G5000 core-prim . native-endianness) (G4fff core-prim . bytevector?) (G4ffe core-prim . bytevector=?) (G4ffd core-prim . bytevector-uint-set!) (G4ffc core-prim . bytevector-uint-ref) (G4ffb core-prim . bytevector-u8-set!) (G4ffa core-prim . bytevector-u8-ref) (G4ff9 core-prim . bytevector-u64-set!) (G4ff8 core-prim . bytevector-u64-ref) (G4ff7 core-prim . bytevector-u64-native-set!) (G4ff6 core-prim . bytevector-u64-native-ref) (G4ff5 core-prim . bytevector-u32-set!) (G4ff4 core-prim . bytevector-u32-ref) (G4ff3 core-prim . bytevector-u32-native-set!) (G4ff2 core-prim . bytevector-u32-native-ref) (G4ff1 core-prim . bytevector-u16-set!) (G4ff0 core-prim . bytevector-u16-ref) (G4fef core-prim . bytevector-u16-native-set!) (G4fee core-prim . bytevector-u16-native-ref) (G4fed core-prim . bytevector-sint-set!) (G4fec core-prim . bytevector-sint-ref) (G4feb core-prim . bytevector-s8-set!) (G4fea core-prim . bytevector-s8-ref) (G4fe9 core-prim . bytevector-s64-set!) (G4fe8 core-prim . bytevector-s64-ref) (G4fe7 core-prim . bytevector-s64-native-set!) (G4fe6 core-prim . bytevector-s64-native-ref) (G4fe5 core-prim . bytevector-s32-set!) (G4fe4 core-prim . bytevector-s32-ref) (G4fe3 core-prim . bytevector-s32-native-set!) (G4fe2 core-prim . bytevector-s32-native-ref) (G4fe1 core-prim . bytevector-s16-set!) (G4fe0 core-prim . bytevector-s16-ref) (G4fdf core-prim . bytevector-s16-native-set!) (G4fde core-prim . bytevector-s16-native-ref) (G4fdd core-prim . bytevector-length) (G4fdc core-prim . bytevector-ieee-single-ref) (G4fdb core-prim . bytevector-ieee-single-native-set!) (G4fda core-prim . bytevector-ieee-single-native-ref) (G4fd9 core-prim . bytevector-ieee-double-ref) (G4fd8 core-prim . bytevector-ieee-double-native-set!) (G4fd7 core-prim . bytevector-ieee-double-native-ref) (G4fd6 core-prim . bytevector-fill!) (G4fd5 core-prim . bytevector-copy!) (G4fd4 core-prim . bytevector-copy) (G4fd3 core-prim . bytevector->uint-list) (G4fd2 core-prim . bytevector->u8-list) (G4fd1 core-prim . bytevector->sint-list) (G4fd0 core-prim . no-nans-violation?) (G4fcf core-prim . no-infinities-violation?) (G4fce core-prim . make-no-nans-violation) (G4fcd core-prim . make-no-infinities-violation) (G4fcc core-prim . real->flonum) (G4fcb core-prim . flzero?) (G4fca core-prim . fltruncate) (G4fc9 core-prim . fltan) (G4fc8 core-prim . flsqrt) (G4fc7 core-prim . flsin) (G4fc6 core-prim . flround) (G4fc5 core-prim . flpositive?) (G4fc4 core-prim . flonum?) (G4fc3 core-prim . flodd?) (G4fc2 core-prim . flnumerator) (G4fc1 core-prim . flnegative?) (G4fc0 core-prim . flnan?) (G4fbf core-prim . flmod0) (G4fbe core-prim . flmod) (G4fbd core-prim . flmin) (G4fbc core-prim . flmax) (G4fbb core-prim . fllog) (G4fba core-prim . flinteger?) (G4fb9 core-prim . flinfinite?) (G4fb8 core-prim . flfloor) (G4fb7 core-prim . flfinite?) (G4fb6 core-prim . flexpt) (G4fb5 core-prim . flexp) (G4fb4 core-prim . fleven?) (G4fb3 core-prim . fldiv0-and-mod0) (G4fb2 core-prim . fldiv0) (G4fb1 core-prim . fldiv-and-mod) (G4fb0 core-prim . fldiv) (G4faf core-prim . fldenominator) (G4fae core-prim . flcos) (G4fad core-prim . flceiling) (G4fac core-prim . flatan) (G4fab core-prim . flasin) (G4faa core-prim . flacos) (G4fa9 core-prim . flabs) (G4fa8 core-prim . fl>?) (G4fa7 core-prim . fl>=?) (G4fa6 core-prim . fl=?) (G4fa5 core-prim . fl<?) (G4fa4 core-prim . fl<=?) (G4fa3 core-prim . fl/) (G4fa2 core-prim . fl-) (G4fa1 core-prim . fl+) (G4fa0 core-prim . fl*) (G4f9f core-prim . fixnum->flonum) (G4f9e core-prim . fxzero?) (G4f9d core-prim . fxxor) (G4f9c core-prim . fxrotate-bit-field) (G4f9b core-prim . fxreverse-bit-field) (G4f9a core-prim . fxpositive?) (G4f99 core-prim . fxodd?) (G4f98 core-prim . fxnot) (G4f97 core-prim . fxnegative?) (G4f96 core-prim . fxmod0) (G4f95 core-prim . fxmod) (G4f94 core-prim . fxmin) (G4f93 core-prim . fxmax) (G4f92 core-prim . fxlength) (G4f91 core-prim . fxior) (G4f90 core-prim . fxif) (G4f8f core-prim . fxfirst-bit-set) (G4f8e core-prim . fxeven?) (G4f8d core-prim . fxdiv0-and-mod0) (G4f8c core-prim . fxdiv0) (G4f8b core-prim . fxdiv-and-mod) (G4f8a core-prim . fxdiv) (G4f89 core-prim . fxcopy-bit-field) (G4f88 core-prim . fxcopy-bit) (G4f87 core-prim . fxbit-set?) (G4f86 core-prim . fxbit-field) (G4f85 core-prim . fxbit-count) (G4f84 core-prim . fxarithmetic-shift-right) (G4f83 core-prim . fxarithmetic-shift-left) (G4f82 core-prim . fxarithmetic-shift) (G4f81 core-prim . fxand) (G4f80 core-prim . fx>?) (G4f7f core-prim . fx>=?) (G4f7e core-prim . fx=?) (G4f7d core-prim . fx<?) (G4f7c core-prim . fx<=?) (G4f7b core-prim . fx-/carry) (G4f7a core-prim . fx-) (G4f79 core-prim . fx+/carry) (G4f78 core-prim . fx+) (G4f77 core-prim . fx*/carry) (G4f76 core-prim . fx*) (G4f75 core-prim . greatest-fixnum) (G4f74 core-prim . least-fixnum) (G4f73 core-prim . fixnum-width) (G4f72 core-prim . fixnum?) (G4f71 core-prim . bitwise-rotate-bit-field) (G4f70 core-prim . bitwise-reverse-bit-field) (G4f6f core-prim . bitwise-length) (G4f6e core-prim . bitwise-if) (G4f6d core-prim . bitwise-first-bit-set) (G4f6c core-prim . bitwise-copy-bit-field) (G4f6b core-prim . bitwise-copy-bit) (G4f6a core-prim . bitwise-bit-set?) (G4f69 core-prim . bitwise-bit-field) (G4f68 core-prim . bitwise-bit-count) (G4f67 core-prim . bitwise-xor) (G4f66 core-prim . bitwise-ior) (G4f65 core-prim . bitwise-and) (G4f64 core-prim . bitwise-not) (G4f63 core-prim . bitwise-arithmetic-shift-right) (G4f62 core-prim . bitwise-arithmetic-shift-left) (G4f61 core-prim . bitwise-arithmetic-shift) (G4f60 core-prim . zero?) (G4f5f core-prim . vector?) (G4f5e core-prim . vector-set!) (G4f5d core-prim . vector-ref) (G4f5c core-prim . vector-map) (G4f5b core-prim . vector-length) (G4f5a core-prim . vector-for-each) (G4f59 core-prim . vector-fill!) (G4f58 core-prim . vector->list) (G4f57 core-prim . vector) (G4f56 core-prim . values) (G4f55 core-prim . truncate) (G4f54 core-prim . tan) (G4f53 core-prim . symbol?) (G4f52 core-prim . symbol=?) (G4f51 core-prim . symbol->string) (G4f50 core-prim . substring) (G4f4f core-prim . string?) (G4f4e core-prim . string>?) (G4f4d core-prim . string>=?) (G4f4c core-prim . string=?) (G4f4b core-prim . string<?) (G4f4a core-prim . string<=?) (G4f49 core-prim . string-ref) (G4f48 core-prim . string-length) (G4f47 core-prim . string-for-each) (G4f46 core-prim . string-copy) (G4f45 core-prim . string-append) (G4f44 core-prim . string->symbol) (G4f43 core-prim . string->number) (G4f42 core-prim . string->list) (G4f41 core-prim . string) (G4f40 core-prim . sqrt) (G4f3f core-prim . sin) (G4f3e core-prim . round) (G4f3d core-prim . reverse) (G4f3c core-prim . real?) (G4f3b core-prim . real-valued?) (G4f3a core-prim . real-part) (G4f39 core-prim . rationalize) (G4f38 core-prim . rational?) (G4f37 core-prim . rational-valued?) (G4f36 core-prim . procedure?) (G4f35 core-prim . positive?) (G4f34 core-prim . pair?) (G4f33 core-prim . odd?) (G4f32 core-prim . numerator) (G4f31 core-prim . number?) (G4f30 core-prim . number->string) (G4f2f core-prim . null?) (G4f2e core-prim . not) (G4f2d core-prim . negative?) (G4f2c core-prim . nan?) (G4f2b core-prim . min) (G4f2a core-prim . max) (G4f29 core-prim . map) (G4f28 core-prim . make-vector) (G4f27 core-prim . make-string) (G4f26 core-prim . make-rectangular) (G4f25 core-prim . make-polar) (G4f24 core-prim . magnitude) (G4f23 core-prim . log) (G4f22 core-prim . list?) (G4f21 core-prim . list-tail) (G4f20 core-prim . list-ref) (G4f1f core-prim . list->vector) (G4f1e core-prim . list->string) (G4f1d core-prim . list) (G4f1c core-prim . length) (G4f1b core-prim . lcm) (G4f1a core-prim . integer?) (G4f19 core-prim . integer-valued?) (G4f18 core-prim . integer->char) (G4f17 core-prim . infinite?) (G4f16 core-prim . inexact?) (G4f15 core-prim . inexact) (G4f14 core-prim . imag-part) (G4f13 core-prim . gcd) (G4f12 core-prim . for-each) (G4f11 core-prim . floor) (G4f10 core-prim . finite?) (G4f0f core-prim . expt) (G4f0e core-prim . exp) (G4f0d core-prim . exact?) (G4f0c core-prim . exact-integer-sqrt) (G4f0b core-prim . exact) (G4f0a core-prim . even?) (G4f09 core-prim . error) (G4f08 core-prim . eqv?) (G4f07 core-prim . equal?) (G4f06 core-prim . eq?) (G4f05 core-prim . dynamic-wind) (G4f04 core-prim . div0-and-mod0) (G4f03 core-prim . mod0) (G4f02 core-prim . div0) (G4f01 core-prim . div-and-mod) (G4f00 core-prim . mod) (G4eff core-prim . div) (G4efe core-prim . denominator) (G4efd core-prim . cos) (G4efc core-prim . cons) (G4efb core-prim . complex?) (G4efa core-prim . char?) (G4ef9 core-prim . char>?) (G4ef8 core-prim . char>=?) (G4ef7 core-prim . char=?) (G4ef6 core-prim . char<?) (G4ef5 core-prim . char<=?) (G4ef4 core-prim . char->integer) (G4ef3 core-prim . ceiling) (G4ef2 core-prim . call-with-values) (G4ef1 core-prim . call/cc) (G4ef0 core-prim . call-with-current-continuation) (G4eef core-prim . cddddr) (G4eee core-prim . cdddar) (G4eed core-prim . cddadr) (G4eec core-prim . cddaar) (G4eeb core-prim . cdaddr) (G4eea core-prim . cdadar) (G4ee9 core-prim . cdaadr) (G4ee8 core-prim . cdaaar) (G4ee7 core-prim . cadddr) (G4ee6 core-prim . caddar) (G4ee5 core-prim . cadadr) (G4ee4 core-prim . cadaar) (G4ee3 core-prim . caaddr) (G4ee2 core-prim . caadar) (G4ee1 core-prim . caaadr) (G4ee0 core-prim . caaaar) (G4edf core-prim . cdddr) (G4ede core-prim . cddar) (G4edd core-prim . cdadr) (G4edc core-prim . cdaar) (G4edb core-prim . caddr) (G4eda core-prim . cadar) (G4ed9 core-prim . caadr) (G4ed8 core-prim . caaar) (G4ed7 core-prim . cddr) (G4ed6 core-prim . cdar) (G4ed5 core-prim . cadr) (G4ed4 core-prim . caar) (G4ed3 core-prim . cdr) (G4ed2 core-prim . car) (G4ed1 core-prim . boolean?) (G4ed0 core-prim . boolean=?) (G4ecf core-prim . atan) (G4ece core-prim . assertion-violation) (G4ecd core-prim . asin) (G4ecc core-prim . apply) (G4ecb core-prim . append) (G4eca core-prim . angle) (G4ec9 core-prim . acos) (G4ec8 core-prim . abs) (G4ec7 core-prim . /) (G4ec6 core-prim . *) (G4ec5 core-prim . -) (G4ec4 core-prim . +) (G4ec3 core-prim . >=) (G4ec2 core-prim . >) (G4ec1 core-prim . =) (G4ec0 core-prim . <=) (G4ebf core-prim . <) (G4ebe core-prim . library) (G4ebd core-prim . export) (G4ebc $core-rtd &no-nans-rtd &no-nans-rcd) (G4ebb $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4eba $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4eb9 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4eb8 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4eb7 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4eb6 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4eb5 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4eb4 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4eb3 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4eb2 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4eb1 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4eb0 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4eaf $core-rtd &i/o-rtd &i/o-rcd) (G4eae $core-rtd &undefined-rtd &undefined-rcd) (G4ead $core-rtd &syntax-rtd &syntax-rcd) (G4eac $core-rtd &lexical-rtd &lexical-rcd) (G4eab $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4eaa $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4ea9 $core-rtd &who-rtd &who-rcd) (G4ea8 $core-rtd &irritants-rtd &irritants-rcd) (G4ea7 $core-rtd &assertion-rtd &assertion-rcd) (G4ea6 $core-rtd &violation-rtd &violation-rcd) (G4ea5 $core-rtd &error-rtd &error-rcd) (G4ea4 $core-rtd &serious-rtd &serious-rcd) (G4ea3 $core-rtd &warning-rtd &warning-rcd) (G4ea2 $core-rtd &message-rtd &message-rcd) (G4ea1 $core-rtd &condition-rtd &condition-rcd) (G4ea0 macro . define-condition-type) (G4e9f macro . define-enumeration) (G4e9e macro . define-record-type) (G4e9d macro . parent-rtd) (G4e9c macro . nongenerative) (G4e9b macro . opaque) (G4e9a macro . sealed) (G4e99 macro . protocol) (G4e98 macro . parent) (G4e97 macro . immutable) (G4e96 macro . mutable) (G4e95 macro . fields) (G4e94 macro . error-handling-mode) (G4e93 macro . file-options) (G4e92 macro . buffer-mode) (G4e91 macro . eol-style) (G4e90 macro . guard) (G4e8f macro . trace-define) (G4e8e macro . trace-lambda) (G4e8d macro . unsyntax-splicing) (G4e8c macro . unsyntax) (G4e8b macro . unquote-splicing) (G4e8a macro . unquote) (G4e89 macro . _) (G4e88 macro . else) (G4e87 macro . =>) (G4e86 macro . ...) (G4e85 macro . assert) (G4e84 macro . endianness) (G4e83 macro . delay) (G4e82 macro . time) (G4e81 macro . or) (G4e80 macro . and) (G4e7f macro . do) (G4e7e macro . cond) (G4e7d macro . let*) (G4e7c macro . let) (G4e7b macro . let*-values) (G4e7a macro . let-values) (G4e79 macro . identifier-syntax) (G4e78 macro . with-syntax) (G4e77 macro . quasisyntax) (G4e76 macro . quasiquote) (G4e75 macro . syntax-rules) (G4e74 macro . include) (G4e73 macro . define-struct) (G4e72 core-macro . record-constructor-descriptor) (G4e71 core-macro . record-type-descriptor) (G4e70 macro . case) (G4e6f macro . parameterize) (G4e6e macro . unless) (G4e6d macro . when) (G4e6c core-macro . if) (G4e6b core-macro . letrec*) (G4e6a core-macro . letrec) (G4e69 core-macro . type-descriptor) (G4e68 core-macro . case-lambda) (G4e67 core-macro . lambda) (G4e66 core-macro . syntax) (G4e65 core-macro . syntax-case) (G4e64 core-macro . quote) (G4e63 core-macro . foreign-call) (G4e62 letrec-syntax) (G4e61 let-syntax) (G4e60 set!) (G4e5f import) (G4e5e begin) (G4e5d module) (G4e5c define-syntax) (G4e5b define)) values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G517d '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5124) (eval-core . G5123) (set-symbol-value! . G5122) (symbol-value . G5121) (gensym . G5120) (void . G511f)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G517e '(mosh) '() '() '() '() '((set-symbol-value! . G5122) (symbol-value . G5121) (assoc-ref . G50fd) (alist-cons . G50fc) (print . G50fb) (format . G50fa) (standard-library-path . G50f9) (file-newer? . G50f8) (stat-mtime . G50f7) (current-directory . G50f6) (write-to-file . G50f5) (file->list . G50f4) (file->string . G50f3) (digit->integer . G50f2) (call-with-string-input-port . G50f1) (call-with-string-io . G50f0) (string-split . G50ef) (bytevector-for-each . G50ee) (string->regexp . G50ed) (rxmatch . G50ec) (regexp-replace-all . G50eb) (hashtable-for-each . G50ea) (get-timeofday . G50e6) (get-command-line . G50e5) (sys-display . G50e4) (source-info . G50e3) (make-compiler-instruction . G50e2) (make-instruction . G50e1) (set-source-info! . G50e0) (bignum? . G50df) (make-complex . G50de) (fasl-read . G50dd) (fasl-write . G50dc) (include . G4e74)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G517f '(mosh backend) '() '() '() '() '((receive . G50db)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5180 '(mosh file) '() '() '() '() '((read-line . G511c) (file-newer? . G50f8) (stat-mtime . G50f7) (current-directory . G50f6) (write-to-file . G50f5) (file->list . G50f4) (file->string . G50f3)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5181 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G50ee)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5182 '(mosh number) '() '() '() '() '((digit->integer . G50f2)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5183 '(mosh string) '() '() '() '() '((print . G50fb) (format . G50fa) (call-with-string-input-port . G50f1) (call-with-string-io . G50f0) (string-split . G50ef) (string->regexp . G50ed)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5184 '(mosh list) '() '() '() '() '((assoc-ref . G50fd)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5185 '(mosh regexp) '() '() '() '() '((rxmatch . G50ec) (regexp-replace-all . G50eb)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5186 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G50ea)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5187 '(mosh parameters) '() '() '() '() '((make-parameter . G28a5) (parameterize . G4e6f)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5188 '(system) '() '() '() '() '((readdir . G50e9) (get-environment-variables . G50e8) (get-environment-variable . G50e7)) '() values values '#f '#f '#f '#f) (G2c3c@G2acf@install-library 'G5189 '(srfi :1) '() '() '() '() '((dotted-list? . G511b) (circular-list? . G511a) (proper-list? . G5119) (circular-list . G5118) (last . G5117) (last-pair . G5116) (not-pair? . G5115) (split-at! . G5114) (split-at . G5113) (list= . G5112) (list-copy . G5111) (list-tabulate . G5110) (make-list . G510f) (xcons . G510e) (tenth . G510d) (ninth . G510c) (eighth . G510b) (seventh . G510a) (sixth . G5109) (fifth . G5108) (drop-right! . G5107) (drop-right . G5106) (take-right . G5105) (take! . G5104) (drop . G5103) (take . G5102) (car+cdr . G5101) (third . G5100) (second . G50ff) (first . G50fe) (alist-cons . G50fc)) '() values values '#f '#f '#f '#f))
((lambda (G4db7@for-each-with-index G4db9@repl G4dbb@trace-printer G4dbd@command-line G4dbf@local-library-path G4dc1@load/args G4dc3@load G4dc5@ironscheme-build G4dc7@eval-top-level G4dc9@compile-system-libraries G4dcb@compile G4dcd@compile->closure G4dcf@pre-compile-r6rs-file G4dd1@load-r6rs-top-level G4dd3@write-record) (begin (set! G4db7@for-each-with-index (lambda (G4de8@proc G4de9@lst) (letrec ((G4dec@loop (lambda (G4dee@i G4def@lst) (if (null? G4def@lst) (if '#f '#f (void)) (begin (G4de8@proc G4dee@i (car G4def@lst)) (G4dec@loop (+ G4dee@i '1) (cdr G4def@lst))))))) (G4dec@loop '1 G4de9@lst)))) (set! G4db9@repl (lambda G4df2@x ((lambda (G4df5@rec) (begin (set! G4df5@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4df7@G4df6) (with-exception-handler (lambda (G4df9@e) (G4df7@G4df6 (if '#t (G4db7@for-each-with-index (lambda (G4dfb@i G4dfc@x) ((lambda (G4dff@rtd) (begin (format '#t '"   ~d. ~a" G4dfb@i (record-type-name G4dff@rtd)) ((lambda (G4e01@v) ((lambda (G4e03@t) (if (memv G4e03@t '(0)) (newline) (if (memv G4e03@t '(1)) (begin (display '": ") (write ((record-accessor G4dff@rtd '0) G4dfc@x)) (newline)) (begin (display '":\n") ((letrec ((G4e05@f (lambda (G4e07@i) (if (not (= G4e07@i (vector-length G4e01@v))) (begin (display '"       ") (display (vector-ref G4e01@v G4e07@i)) (display '": ") (write ((record-accessor G4dff@rtd G4e07@i) G4dfc@x)) (newline) (G4e05@f (+ G4e07@i '1))) (void))))) G4e05@f) '0))))) (vector-length G4e01@v))) (record-type-field-names G4dff@rtd)))) (record-rtd G4dfc@x))) (simple-conditions G4df9@e)) (raise G4df9@e)))) (lambda () (begin '#f ((lambda (G4e09@line) (if (eof-object? G4e09@line) (exit) (write (G4dc7@eval-top-level (call-with-port (open-string-input-port G4e09@line) read))))) (get-line (current-input-port)))))))) (newline) (G4df5@rec)))) (G4df5@rec))) '#f))) (set! G4dbb@trace-printer (G299b@G28a6@make-parameter write)) (set! G4dbd@command-line (G299b@G28a6@make-parameter (get-command-line))) (set! G4dbf@local-library-path (lambda (G4e0b@filename) (cons '"." (G2c2c@G2aaf@library-path)))) (set! G4dc1@load/args (lambda (G4e0d@filename . G4e0f@args) (begin (apply G4dd1@load-r6rs-top-level G4e0d@filename 'load G4e0f@args) (void)))) (set! G4dc3@load (lambda (G4e11@filename) (begin (apply G4dd1@load-r6rs-top-level G4e11@filename 'load (G4dbd@command-line)) (void)))) (set! G4dc5@ironscheme-build (lambda () (G4dc3@load '"ironscheme-buildscript.ss"))) (set! G4dc7@eval-top-level (lambda (G4e13@x) (G4ab2@G315d@eval G4e13@x (G4ac9@G318b@interaction-environment)))) (set! G4dc9@compile-system-libraries (lambda () (G4dc7@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4dcb@compile (lambda (G4e15@filename) (G4dd1@load-r6rs-top-level G4e15@filename 'compile))) (set! G4dcd@compile->closure (lambda (G4e17@filename) (G4dd1@load-r6rs-top-level G4e17@filename 'closure))) (set! G4dcf@pre-compile-r6rs-file (lambda (G4e19@filename) (G4dd1@load-r6rs-top-level G4e19@filename 'compile))) (set! G4dd1@load-r6rs-top-level (lambda (G4e1b@filename G4e1c@how . G4e1f@args) ((lambda (G4e23@G4e21@library-path G4e24@G4e22@library-path) ((lambda (G4e27@swap) (dynamic-wind G4e27@swap (lambda () ((lambda (G4e29@x*) ((lambda (G4e2b@t) (if (memv G4e2b@t '(closure)) (G4ac8@G3189@pre-compile-r6rs-top-level G4e29@x*) (if (memv G4e2b@t '(load)) ((lambda (G4e2f@G4e2d@command-line G4e30@G4e2e@command-line) ((lambda (G4e33@swap) (dynamic-wind G4e33@swap (lambda () ((G4ac7@G3187@compile-r6rs-top-level G4e29@x*))) G4e33@swap)) (lambda () ((lambda (G4e35@t) (begin (G4e2f@G4e2d@command-line G4e30@G4e2e@command-line) (set! G4e30@G4e2e@command-line G4e35@t))) (G4e2f@G4e2d@command-line))))) G4dbd@command-line (cons G4e1b@filename (car G4e1f@args))) (if (memv G4e2b@t '(compile)) (begin (G4ac7@G3187@compile-r6rs-top-level G4e29@x*) (G2c30@G2ab7@serialize-all G2996@G289c@serialize-library G2a00@G29a9@compile-core-expr)) (if '#f '#f (void)))))) G4e1c@how)) (with-input-from-file G4e1b@filename (lambda () ((letrec ((G4e37@f (lambda () ((lambda (G4e39@x) (if (eof-object? G4e39@x) '() (cons G4e39@x (G4e37@f)))) (G298e@G288c@read-annotated))))) G4e37@f)))))) G4e27@swap)) (lambda () ((lambda (G4e3b@t) (begin (G4e23@G4e21@library-path G4e24@G4e22@library-path) (set! G4e24@G4e22@library-path G4e3b@t))) (G4e23@G4e21@library-path))))) G2c2c@G2aaf@library-path (G4dbf@local-library-path G4e1b@filename)))) (set! G4dd3@write-record (lambda (G4e3d@record G4e3e@port) ((lambda (G4e41@rtd) (begin (format G4e3e@port '"    ~a" (record-type-name G4e41@rtd)) ((lambda (G4e43@v) ((lambda (G4e45@t) (if (memv G4e45@t '(0)) (newline) (if (memv G4e45@t '(1)) (begin (display '": " G4e3e@port) (write ((record-accessor G4e41@rtd '0) G4e3d@record) G4e3e@port) (newline G4e3e@port)) (begin (display '":\n") ((letrec ((G4e47@f (lambda (G4e49@i) (if (not (= G4e49@i (vector-length G4e43@v))) (begin (display '"       " G4e3e@port) (display (vector-ref G4e43@v G4e49@i) G4e3e@port) (display '": " G4e3e@port) (write ((record-accessor G4e41@rtd G4e49@i) G4e3d@record) G4e3e@port) (newline G4e3e@port) (G4e47@f (+ G4e49@i '1))) (void))))) G4e47@f) '0))))) (vector-length G4e43@v))) (record-type-field-names G4e41@rtd)))) (record-rtd G4e3d@record)))) (begin (set! G4e59@G4dd3@write-record G4dd3@write-record) (set! G4e58@G4dd1@load-r6rs-top-level G4dd1@load-r6rs-top-level) (set! G4e57@G4dcf@pre-compile-r6rs-file G4dcf@pre-compile-r6rs-file) (set! G4e56@G4dcd@compile->closure G4dcd@compile->closure) (set! G4e55@G4dcb@compile G4dcb@compile) (set! G4e54@G4dc9@compile-system-libraries G4dc9@compile-system-libraries) (set! G4e53@G4dc7@eval-top-level G4dc7@eval-top-level) (set! G4e52@G4dc5@ironscheme-build G4dc5@ironscheme-build) (set! G4e51@G4dc3@load G4dc3@load) (set! G4e50@G4dc1@load/args G4dc1@load/args) (set! G4e4f@G4dbf@local-library-path G4dbf@local-library-path) (set! G4e4e@G4dbd@command-line G4dbd@command-line) (set! G4e4d@G4dbb@trace-printer G4dbb@trace-printer) (set! G4e4c@G4db9@repl G4db9@repl) (set! G4e4b@G4db7@for-each-with-index G4db7@for-each-with-index) (G2c31@G2ab9@current-precompiled-library-loader G2997@G289e@load-serialized-library) (set-symbol-value! 'load G4dc3@load) (set-symbol-value! 'pre-compile-r6rs-file G4dcf@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4dc7@eval-top-level) (set-symbol-value! 'int-env-syms G4aa9@G314b@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29ff@G29a7@expanded->core) (set-symbol-value! 'trace-printer G4dbb@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c2c@G2aaf@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4dd4@args G4dd5@port) (with-exception-handler (lambda (G4dd8@c) (begin (display '" Condition components:\n" G4dd5@port) (G4db7@for-each-with-index (lambda (G4dda@i G4ddb@x) ((lambda (G4dde@rtd) (begin (format G4dd5@port '"   ~d. ~a" G4dda@i (record-type-name G4dde@rtd)) ((lambda (G4de0@v) ((lambda (G4de2@t) (if (memv G4de2@t '(0)) (newline) (if (memv G4de2@t '(1)) (begin (display '": ") (write ((record-accessor G4dde@rtd '0) G4ddb@x)) (newline)) (begin (display '":\n") ((letrec ((G4de4@f (lambda (G4de6@i) (if (not (= G4de6@i (vector-length G4de0@v))) (begin (display '"       ") (display (vector-ref G4de0@v G4de6@i)) (display '": ") (write ((record-accessor G4dde@rtd G4de6@i) G4ddb@x)) (newline) (G4de4@f (+ G4de6@i '1))) (void))))) G4de4@f) '0))))) (vector-length G4de0@v))) (record-type-field-names G4dde@rtd)))) (record-rtd G4ddb@x))) (simple-conditions G4dd8@c)))) (lambda () (if (null? G4dd4@args) (G4db9@repl) (G4dd1@load-r6rs-top-level (car G4dd4@args) 'load (cdr G4dd4@args)))))) (G4dbd@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
