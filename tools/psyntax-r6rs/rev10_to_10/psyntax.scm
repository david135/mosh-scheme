;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G280a@read-annotated G280c@annotation-stripped G280e@annotation? G2810@annotation-source G2812@annotation-expression G2814@scm->fasl G2816@fasl-save G2818@fasl-load G281a@serialize-library G281c@load-serialized-library G281e@make-record-printer G2820@compile-core G2822@read-library-source-file G2824@make-parameter G2890@file-options-spec) (begin (set! G280a@read-annotated read) (set! G280c@annotation-stripped (lambda (G2891@x) (G2812@annotation-expression G2891@x))) (set! G280e@annotation? (lambda (G2893@x) (source-info G2893@x))) (set! G2810@annotation-source (lambda (G2895@x) (source-info G2895@x))) (set! G2812@annotation-expression (lambda (G2897@x) (if (pair? G2897@x) (cons (car G2897@x) (cdr G2897@x)) (display '"line:46\n")))) (set! G2814@scm->fasl (lambda (G2899@filename) (string-append G2899@filename '".fasl"))) (set! G2816@fasl-save (lambda (G289b@filename G289c@obj) (call-with-port (open-file-output-port G289b@filename) (lambda (G289f@port) ((symbol-value 'fasl-write!) G289c@obj G289f@port))))) (set! G2818@fasl-load (lambda (G28a1@filename) (call-with-port (open-file-input-port G28a1@filename) (symbol-value 'fasl-read!)))) (set! G281a@serialize-library (lambda (G28a3@filename G28a4@obj) (begin (format '#t '"serialize-library ~a\n..." G28a3@filename) ((lambda (G28a7@fasl-file) (begin (if (file-exists? G28a7@fasl-file) (delete-file G28a7@fasl-file) (void)) ((call/cc (lambda (G28ab@G28a9) (lambda () (with-exception-handler (lambda (G28ad@c) ((call/cc (lambda (G28af@G28aa) (G28ab@G28a9 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28a3@filename) (if (file-exists? G28a7@fasl-file) (delete-file G28a7@fasl-file) (void)) '#f) (G28af@G28aa (lambda () (raise-continuable G28ad@c)))))))))) (lambda () (begin (G2816@fasl-save G28a7@fasl-file G28a4@obj) (display '"OK\n")))))))))) (G2814@scm->fasl G28a3@filename))))) (set! G281c@load-serialized-library (lambda (G28b1@filename G28b2@obj) ((lambda (G28b5@fasl-file) (if (and (file-exists? G28b5@fasl-file) ((symbol-value 'file-newer?) G28b5@fasl-file G28b1@filename)) ((lambda (G28b7@expanded2core) ((lambda (G28b9@code) ((lambda (G28bb@pivot) ((lambda (G28bd@visit) ((lambda (G28bf@visit-proc) ((lambda () (begin (set-car! G28bb@pivot G28bf@visit-proc) ((lambda (G28c1@pivot) ((lambda (G28c3@invoke) ((lambda () (begin (set-car! G28c1@pivot (lambda () (eval-core G28c3@invoke))) (apply G28b2@obj G28b9@code))))) (G28b7@expanded2core (car G28c1@pivot)))) (cdr G28bb@pivot)) '#t)))) (lambda () (eval-core G28bd@visit)))) (G28b7@expanded2core (car G28bb@pivot)))) (cddddr (cddddr G28b9@code)))) (G2818@fasl-load G28b5@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2814@scm->fasl G28b1@filename)))) (set! G281e@make-record-printer (lambda (G28c5@name G28c6@printer) (lambda G28c9@x (begin (display '"record printer") (for-each display G28c9@x))))) (set! G2820@compile-core (lambda G28cb@x (apply error 'comile-core '"not implementated" G28cb@x))) (set! G2822@read-library-source-file (lambda (G28cd@file-name) (with-input-from-file G28cd@file-name G280a@read-annotated))) (set! G2824@make-parameter (lambda G28dd ((lambda (G28de) (if (= G28de '1) (apply (lambda (G28cf@x) (G2824@make-parameter G28cf@x (lambda (G28d1@x) G28d1@x))) G28dd) (if (= G28de '2) (apply (lambda (G28d3@x G28d4@fender) ((lambda (G28d7@x) (lambda G28db ((lambda (G28dc) (if (= G28dc '0) (apply (lambda () G28d7@x) G28db) (if (= G28dc '1) (apply (lambda (G28d9@v) (set! G28d7@x (G28d4@fender G28d9@v))) G28db) (error 'apply '"invalid arg count")))) (length G28db)))) (G28d4@fender G28d3@x))) G28dd) (error 'apply '"invalid arg count")))) (length G28dd)))) (set! G2890@file-options-spec (lambda (G28df@x) G28df@x)) (begin (set! G28ef@G2890@file-options-spec G2890@file-options-spec) (set! G28ee@G2824@make-parameter G2824@make-parameter) (set! G28ed@G2822@read-library-source-file G2822@read-library-source-file) (set! G28ec@G2820@compile-core G2820@compile-core) (set! G28eb@G281e@make-record-printer G281e@make-record-printer) (set! G28ea@G281c@load-serialized-library G281c@load-serialized-library) (set! G28e9@G281a@serialize-library G281a@serialize-library) (set! G28e8@G2818@fasl-load G2818@fasl-load) (set! G28e7@G2816@fasl-save G2816@fasl-save) (set! G28e6@G2814@scm->fasl G2814@scm->fasl) (set! G28e5@G2812@annotation-expression G2812@annotation-expression) (set! G28e4@G2810@annotation-source G2810@annotation-source) (set! G28e3@G280e@annotation? G280e@annotation?) (set! G28e2@G280c@annotation-stripped G280c@annotation-stripped) (set! G28e1@G280a@read-annotated G280a@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28f4@current-primitive-locations G28f6@mutable? G28f8@rewriter G28fa@expanded->core G28fc@compile-core-expr G28fe@pretty-print G2900@compile-core-expr-to-port) (begin (set! G28f4@current-primitive-locations (G28ee@G2824@make-parameter (lambda (G2901@x) '#f) (lambda (G2903@p) G2903@p))) (set! G28f6@mutable? (lambda (G2905@x) (or (pair? G2905@x) (vector? G2905@x) (hashtable? G2905@x)))) (set! G28f8@rewriter (lambda (G2907@quote-hack?) ((lambda (G290a@f) (begin (set! G290a@f (lambda (G290b@x) (if (pair? G290b@x) ((lambda (G290d@t) (if (memv G290d@t '(quote)) (if (and G2907@quote-hack? (G28f6@mutable? (cadr G290b@x))) ((lambda (G290f@g) (begin (set-symbol-value! G290f@g (cadr G290b@x)) G290f@g)) (gensym)) G290b@x) (if (memv G290d@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2911@x) (cons (car G2911@x) (map G290a@f (cdr G2911@x)))) (cdr G290b@x))) (if (memv G290d@t '(lambda)) (cons* 'lambda (cadr G290b@x) (map G290a@f (cddr G290b@x))) (if (memv G290d@t '(letrec)) ((lambda (G2913@bindings G2914@body*) ((lambda (G2917@lhs* G2918@rhs*) (cons* 'letrec (map list G2917@lhs* (map G290a@f G2918@rhs*)) (map G290a@f G2914@body*))) (map car G2913@bindings) (map cadr G2913@bindings))) (cadr G290b@x) (cddr G290b@x)) (if (memv G290d@t '(letrec*)) ((lambda (G291b@bindings G291c@body*) ((lambda (G291f@lhs* G2920@rhs*) (cons* 'letrec* (map list G291f@lhs* (map G290a@f G2920@rhs*)) (map G290a@f G291c@body*))) (map car G291b@bindings) (map cadr G291b@bindings))) (cadr G290b@x) (cddr G290b@x)) (if (memv G290d@t '(library-letrec*)) ((lambda (G2923@name G2924@x) ((lambda (G2927@bindings G2928@body*) ((lambda (G292b@lhs* G292c@lhs** G292d@rhs*) (cons* 'library-letrec* G2923@name (map list G292b@lhs* G292c@lhs** (map G290a@f G292d@rhs*)) (map G290a@f G2928@body*))) (map car G2927@bindings) (map cadr G2927@bindings) (map caddr G2927@bindings))) (cadr G2924@x) (cddr G2924@x))) (cadr G290b@x) (cdr G290b@x)) (if (memv G290d@t '(begin)) (cons 'begin (map G290a@f (cdr G290b@x))) (if (memv G290d@t '(set!)) (list 'set! (cadr G290b@x) (G290a@f (caddr G290b@x))) (if (memv G290d@t '(primitive)) ((lambda (G2931@op) ((lambda (G2933@t) (if G2933@t ((lambda (G2935@loc) G2935@loc) G2933@t) G2931@op)) ((G28f4@current-primitive-locations) G2931@op))) (cadr G290b@x)) (if (memv G290d@t '(define)) G290b@x (if (list? G290b@x) (map G290a@f G290b@x) (error 'rewrite '"invalid form ~s ~s" G290b@x (list? G290b@x)))))))))))))) (car G290b@x)) G290b@x))) G290a@f)) '#f))) (set! G28fa@expanded->core (lambda (G2937@x) ((G28f8@rewriter '#t) G2937@x))) (set! G28fc@compile-core-expr (lambda (G2939@x) ((G28f8@rewriter '#f) G2939@x))) (set! G28fe@pretty-print write) (set! G2900@compile-core-expr-to-port (lambda (G293b@x G293c@p) (G28fe@pretty-print ((G28f8@rewriter '#f) G293b@x) G293c@p))) (begin (set! G2945@G2900@compile-core-expr-to-port G2900@compile-core-expr-to-port) (set! G2944@G28fe@pretty-print G28fe@pretty-print) (set! G2943@G28fc@compile-core-expr G28fc@compile-core-expr) (set! G2942@G28fa@expanded->core G28fa@expanded->core) (set! G2941@G28f8@rewriter G28f8@rewriter) (set! G2940@G28f6@mutable? G28f6@mutable?) (set! G293f@G28f4@current-primitive-locations G28f4@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G299b@make-collection G299d@current-library-collection G29a3@G299e G29a5@G29a0 G29a7@G299f G29aa@library? G29ac@make-library G29ae@library-id G29b0@library-name G29b2@library-version G29b4@library-imp* G29b6@library-vis* G29b8@library-inv* G29ba@library-subst G29bc@library-env G29be@library-visit-state G29c0@library-invoke-state G29c2@library-visit-code G29c4@library-invoke-code G29c6@library-visible? G29c8@library-source-file-name G29ca@set-library-id! G29cc@set-library-name! G29ce@set-library-version! G29d0@set-library-imp*! G29d2@set-library-vis*! G29d4@set-library-inv*! G29d6@set-library-subst! G29d8@set-library-env! G29da@set-library-visit-state! G29dc@set-library-invoke-state! G29de@set-library-visit-code! G29e0@set-library-invoke-code! G29e2@set-library-visible?! G29e4@set-library-source-file-name! G29e6@rp G29e8@find-dependencies G29ea@find-library-by G29ec@library-path G29ee@library-extensions G29f0@library-name->file-name G29f2@file-locator G29f4@serialize-all G29f6@current-precompiled-library-loader G29f8@try-load-from-file G29fa@library-loader G29fc@current-library-expander G29fe@external-pending-libraries G2a00@find-external-library G2a02@find-library-by-name G2a04@library-exists? G2a06@find-library-by-spec/die G2a08@label->binding-table G2a0a@install-library-record G2a0c@install-library G2a0e@imported-label->binding G2a10@invoke-library G2a12@visit-library G2a14@invoke-library-by-spec G2a16@installed-libraries G2a18@library-spec) (begin (set! G299b@make-collection (lambda () ((lambda (G2a19@set) ((lambda (G2a1c@set-cons) (begin (set! G2a1c@set-cons (lambda (G2a21@x G2a22@ls) (if (memq G2a21@x G2a22@ls) G2a22@ls (cons G2a21@x G2a22@ls)))) (lambda G2a1f ((lambda (G2a20) (if (= G2a20 '0) (apply (lambda () G2a19@set) G2a1f) (if (= G2a20 '1) (apply (lambda (G2a1d@x) (set! G2a19@set (G2a1c@set-cons G2a1d@x G2a19@set))) G2a1f) (error 'apply '"invalid arg count")))) (length G2a1f))))) '#f)) '()))) (set! G299d@current-library-collection (G28ee@G2824@make-parameter (G299b@make-collection) (lambda (G2a25@x) (begin (if (not (procedure? G2a25@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a25@x) (void)) G2a25@x)))) (set! G29a3@G299e (make-record-type-descriptor 'library '#f 'G29a1 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29a5@G29a0 '#f) (set! G29a7@G299f (make-record-constructor-descriptor G29a3@G299e '#f G29a5@G29a0)) (set! G29aa@library? (record-predicate G29a3@G299e)) (set! G29ac@make-library (record-constructor G29a7@G299f)) (set! G29ae@library-id (record-accessor G29a3@G299e '0)) (set! G29b0@library-name (record-accessor G29a3@G299e '1)) (set! G29b2@library-version (record-accessor G29a3@G299e '2)) (set! G29b4@library-imp* (record-accessor G29a3@G299e '3)) (set! G29b6@library-vis* (record-accessor G29a3@G299e '4)) (set! G29b8@library-inv* (record-accessor G29a3@G299e '5)) (set! G29ba@library-subst (record-accessor G29a3@G299e '6)) (set! G29bc@library-env (record-accessor G29a3@G299e '7)) (set! G29be@library-visit-state (record-accessor G29a3@G299e '8)) (set! G29c0@library-invoke-state (record-accessor G29a3@G299e '9)) (set! G29c2@library-visit-code (record-accessor G29a3@G299e '10)) (set! G29c4@library-invoke-code (record-accessor G29a3@G299e '11)) (set! G29c6@library-visible? (record-accessor G29a3@G299e '12)) (set! G29c8@library-source-file-name (record-accessor G29a3@G299e '13)) (set! G29ca@set-library-id! (record-mutator G29a3@G299e '0)) (set! G29cc@set-library-name! (record-mutator G29a3@G299e '1)) (set! G29ce@set-library-version! (record-mutator G29a3@G299e '2)) (set! G29d0@set-library-imp*! (record-mutator G29a3@G299e '3)) (set! G29d2@set-library-vis*! (record-mutator G29a3@G299e '4)) (set! G29d4@set-library-inv*! (record-mutator G29a3@G299e '5)) (set! G29d6@set-library-subst! (record-mutator G29a3@G299e '6)) (set! G29d8@set-library-env! (record-mutator G29a3@G299e '7)) (set! G29da@set-library-visit-state! (record-mutator G29a3@G299e '8)) (set! G29dc@set-library-invoke-state! (record-mutator G29a3@G299e '9)) (set! G29de@set-library-visit-code! (record-mutator G29a3@G299e '10)) (set! G29e0@set-library-invoke-code! (record-mutator G29a3@G299e '11)) (set! G29e2@set-library-visible?! (record-mutator G29a3@G299e '12)) (set! G29e4@set-library-source-file-name! (record-mutator G29a3@G299e '13)) (set! G29e6@rp (G28eb@G281e@make-record-printer 'library (lambda (G2a27@x G2a28@p G2a29@wr) (begin (if (not (G29aa@library? G2a27@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29b2@library-version G2a27@x)) (G29b0@library-name G2a27@x) (append (G29b0@library-name G2a27@x) (list (G29b2@library-version G2a27@x))))) G2a28@p))))) (set! G29e8@find-dependencies (lambda (G2a2d@ls) (if (null? G2a2d@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29ea@find-library-by (lambda (G2a2f@pred) ((letrec ((G2a31@f (lambda (G2a33@ls) (if (null? G2a33@ls) '#f (if (G2a2f@pred (car G2a33@ls)) (car G2a33@ls) (G2a31@f (cdr G2a33@ls))))))) G2a31@f) ((G299d@current-library-collection))))) (set! G29ec@library-path (G28ee@G2824@make-parameter '(".") (lambda (G2a35@x) (if (and (list? G2a35@x) (for-all string? G2a35@x)) (map (lambda (G2a37@x) G2a37@x) G2a35@x) (assertion-violation 'library-path '"not a list of strings" G2a35@x))))) (set! G29ee@library-extensions (G28ee@G2824@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a39@x) (if (and (list? G2a39@x) (for-all string? G2a39@x)) (map (lambda (G2a3b@x) G2a3b@x) G2a39@x) (assertion-violation 'library-extensions '"not a list of strings" G2a39@x))))) (set! G29f0@library-name->file-name (lambda (G2a3d@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a41@G2a3f G2a42@G2a40) ((lambda (G2a45@extract G2a46@p) ((lambda (G2a4a@display-hex) (begin (set! G2a4a@display-hex (lambda (G2a53@n) (if (<= '0 G2a53@n '9) (display G2a53@n G2a46@p) (display (integer->char (+ (char->integer '#\A) (- G2a53@n '10))) G2a46@p)))) (begin ((letrec ((G2a4b@f (lambda (G2a4d@ls) (if (not (null? G2a4d@ls)) (begin (display '"/" G2a46@p) (for-each (lambda (G2a4f@c) (if (or (char<=? '#\a G2a4f@c '#\z) (char<=? '#\A G2a4f@c '#\Z) (char<=? '#\0 G2a4f@c '#\9) (memv G2a4f@c '(#\- #\. #\_ #\~))) (display G2a4f@c G2a46@p) (begin (display '"%" G2a46@p) ((lambda (G2a51@n) (begin (G2a4a@display-hex (quotient G2a51@n '16)) (G2a4a@display-hex (remainder G2a51@n '16)))) (char->integer G2a4f@c))))) (string->list (symbol->string (car G2a4d@ls)))) (G2a4b@f (cdr G2a4d@ls))) (void))))) G2a4b@f) G2a3d@x) (G2a45@extract)))) '#f)) G2a42@G2a40 G2a41@G2a3f))))) (set! G29f2@file-locator (G28ee@G2824@make-parameter (lambda (G2a55@x) ((lambda (G2a57@str) ((letrec ((G2a59@f (lambda (G2a5b@ls G2a5c@exts G2a5d@failed-list) (if (null? G2a5b@ls) ((lambda () ((lambda (G2a69@G2a64 G2a6b@G2a66 G2a6d@G2a65 G2a70@G2a63 G2a72@make-library-resolution-condition G2a74@G2a61 G2a76@G2a62 G2a78@library-resolution-condition? G2a7a@condition-library G2a7c@condition-files) (begin (set! G2a69@G2a64 (make-record-type-descriptor '&library-resolution G4c04@G4955@&condition-rtd 'G2a67 '#f '#f '#((immutable library) (immutable files)))) (set! G2a6b@G2a66 '#f) (set! G2a6d@G2a65 (make-record-constructor-descriptor G2a69@G2a64 G4c05@G4957@&condition-rcd G2a6b@G2a66)) (set! G2a70@G2a63 (record-predicate G2a69@G2a64)) (set! G2a72@make-library-resolution-condition (record-constructor G2a6d@G2a65)) (set! G2a74@G2a61 (record-accessor G2a69@G2a64 '0)) (set! G2a76@G2a62 (record-accessor G2a69@G2a64 '1)) (set! G2a78@library-resolution-condition? (condition-predicate G2a69@G2a64)) (set! G2a7a@condition-library (condition-accessor G2a69@G2a64 G2a74@G2a61)) (set! G2a7c@condition-files (condition-accessor G2a69@G2a64 G2a76@G2a62)) (raise (condition (G4c24@G49ed@make-error) (G4c46@G4a47@make-who-condition 'expander) (G4c0a@G49aa@make-message-condition '"cannot locate library in library-path") (G2a72@make-library-resolution-condition G2a55@x (reverse G2a5d@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a5c@exts) (G2a59@f (cdr G2a5b@ls) (G29ee@library-extensions) G2a5d@failed-list) ((lambda (G2a7d@name) (if (file-exists? G2a7d@name) G2a7d@name (G2a59@f G2a5b@ls (cdr G2a5c@exts) (cons G2a7d@name G2a5d@failed-list)))) (string-append (car G2a5b@ls) G2a57@str (car G2a5c@exts)))))))) G2a59@f) (G29ec@library-path) (G29ee@library-extensions) '())) (G29f0@library-name->file-name G2a55@x))) (lambda (G2a7f@f) (if (procedure? G2a7f@f) G2a7f@f (assertion-violation 'file-locator '"not a procedure" G2a7f@f))))) (set! G29f4@serialize-all (lambda (G2a81@serialize G2a82@compile) ((lambda (G2a86@library-desc) (begin (set! G2a86@library-desc (lambda (G2a89@x) (list (G29ae@library-id G2a89@x) (G29b0@library-name G2a89@x)))) (for-each (lambda (G2a87@x) (if (G29c8@library-source-file-name G2a87@x) (G2a81@serialize (G29c8@library-source-file-name G2a87@x) (list (G29ae@library-id G2a87@x) (G29b0@library-name G2a87@x) (G29b2@library-version G2a87@x) (map G2a86@library-desc (G29b4@library-imp* G2a87@x)) (map G2a86@library-desc (G29b6@library-vis* G2a87@x)) (map G2a86@library-desc (G29b8@library-inv* G2a87@x)) (G29ba@library-subst G2a87@x) (G29bc@library-env G2a87@x) (G2a82@compile (G29c2@library-visit-code G2a87@x)) (G2a82@compile (G29c4@library-invoke-code G2a87@x)) (G29c6@library-visible? G2a87@x))) (void))) ((G299d@current-library-collection))))) '#f))) (set! G29f6@current-precompiled-library-loader (G28ee@G2824@make-parameter (lambda (G2a8b@filename G2a8c@sk) '#f))) (set! G29f8@try-load-from-file (lambda (G2a8f@filename) ((G29f6@current-precompiled-library-loader) G2a8f@filename (lambda G2ab5 ((lambda (G2ab6) (if (= G2ab6 '11) (apply (lambda (G2a91@id G2a92@name G2a93@ver G2a94@imp* G2a95@vis* G2a96@inv* G2a97@exp-subst G2a98@exp-env G2a99@visit-proc G2a9a@invoke-proc G2a9b@visible?) ((letrec ((G2aa7@f (lambda (G2aa9@deps) (if (null? G2aa9@deps) (begin (G2a0c@install-library G2a91@id G2a92@name G2a93@ver G2a94@imp* G2a95@vis* G2a96@inv* G2a97@exp-subst G2a98@exp-env G2a99@visit-proc G2a9a@invoke-proc '#f '#f G2a9b@visible? '#f) '#t) ((lambda (G2aab@d) ((lambda (G2aad@label G2aae@dname) ((lambda (G2ab1@l) (if (and (G29aa@library? G2ab1@l) (eq? G2aad@label (G29ae@library-id G2ab1@l))) (G2aa7@f (cdr G2aa9@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2a92@name G2aae@dname G2a8f@filename G2ab1@l G2aad@label (G29ae@library-id G2ab1@l)) '#f))) (G2a02@find-library-by-name G2aae@dname))) (car G2aab@d) (cadr G2aab@d))) (car G2aa9@deps)))))) G2aa7@f) (append G2a94@imp* G2a95@vis* G2a96@inv*))) G2ab5) (if (>= G2ab6 '0) (apply (lambda G2ab3@others '#f) G2ab5) (error 'apply '"invalid arg count")))) (length G2ab5)))))) (set! G29fa@library-loader (G28ee@G2824@make-parameter (lambda (G2ab7@x) ((lambda (G2ab9@file-name) (if (not G2ab9@file-name) (assertion-violation '#f '"cannot file library" G2ab7@x) (or (G29f8@try-load-from-file G2ab9@file-name) ((G29fc@current-library-expander) (G28ed@G2822@read-library-source-file G2ab9@file-name) G2ab9@file-name (lambda (G2abb@name) (if (not (fast-equal? G2abb@name G2ab7@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2abf@G2abd G2ac0@G2abe) ((lambda (G2ac3@e G2ac4@p) (begin (display '"expected to find library " G2ac4@p) (write G2ab7@x G2ac4@p) (display '" in file " G2ac4@p) (display G2ab9@file-name G2ac4@p) (display '", found " G2ac4@p) (write G2abb@name G2ac4@p) (display '" instead" G2ac4@p) (G2ac3@e))) G2ac0@G2abe G2abf@G2abd)))) (void))))))) ((G29f2@file-locator) G2ab7@x))) (lambda (G2ac7@f) (if (procedure? G2ac7@f) G2ac7@f (assertion-violation 'library-locator '"not a procedure" G2ac7@f))))) (set! G29fc@current-library-expander (G28ee@G2824@make-parameter (lambda (G2ac9@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2acb@f) (if (procedure? G2acb@f) G2acb@f (assertion-violation 'library-expander '"not a procedure" G2acb@f))))) (set! G29fe@external-pending-libraries (G28ee@G2824@make-parameter '())) (set! G2a00@find-external-library (lambda (G2acd@name) (begin (if (member G2acd@name (G29fe@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2acd@name) (void)) ((lambda (G2ad1@G2acf G2ad2@G2ad0) ((lambda (G2ad5@swap) (dynamic-wind G2ad5@swap (lambda () (begin ((G29fa@library-loader) G2acd@name) (or (G29ea@find-library-by (lambda (G2ad7@x) (fast-equal? (G29b0@library-name G2ad7@x) G2acd@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2acd@name)))) G2ad5@swap)) (lambda () ((lambda (G2ad9@t) (begin (G2ad1@G2acf G2ad2@G2ad0) (set! G2ad2@G2ad0 G2ad9@t))) (G2ad1@G2acf))))) G29fe@external-pending-libraries (cons G2acd@name (G29fe@external-pending-libraries)))))) (set! G2a02@find-library-by-name (lambda (G2adb@name) (or (G29ea@find-library-by (lambda (G2add@x) (fast-equal? (G29b0@library-name G2add@x) G2adb@name))) (G2a00@find-external-library G2adb@name)))) (set! G2a04@library-exists? (lambda (G2adf@name) (and (G29ea@find-library-by (lambda (G2ae1@x) (fast-equal? (G29b0@library-name G2ae1@x) G2adf@name))) '#t))) (set! G2a06@find-library-by-spec/die (lambda (G2ae3@spec) ((lambda (G2ae5@id) (or (G29ea@find-library-by (lambda (G2ae7@x) (eq? G2ae5@id (G29ae@library-id G2ae7@x)))) (assertion-violation '#f '"cannot find library with required spec" G2ae3@spec))) (car G2ae3@spec)))) (set! G2a08@label->binding-table (make-eq-hashtable)) (set! G2a0a@install-library-record (lambda (G2ae9@lib) (begin ((lambda (G2aeb@exp-env) (for-each (lambda (G2aed@x) ((lambda (G2aef@label G2af0@binding) ((lambda (G2af3@binding) (hashtable-set! G2a08@label->binding-table G2aef@label G2af3@binding)) ((lambda (G2af5@t) (if (memv G2af5@t '(global)) (cons 'global (cons G2ae9@lib (cdr G2af0@binding))) (if (memv G2af5@t '(global-macro)) (cons 'global-macro (cons G2ae9@lib (cdr G2af0@binding))) (if (memv G2af5@t '(global-macro!)) (cons 'global-macro! (cons G2ae9@lib (cdr G2af0@binding))) G2af0@binding)))) (car G2af0@binding)))) (car G2aed@x) (cdr G2aed@x))) G2aeb@exp-env)) (G29bc@library-env G2ae9@lib)) ((G299d@current-library-collection) G2ae9@lib)))) (set! G2a0c@install-library (lambda (G2af7@id G2af8@name G2af9@ver G2afa@imp* G2afb@vis* G2afc@inv* G2afd@exp-subst G2afe@exp-env G2aff@visit-proc G2b00@invoke-proc G2b01@visit-code G2b02@invoke-code G2b03@visible? G2b04@source-file-name) ((lambda (G2b13@imp-lib* G2b14@vis-lib* G2b15@inv-lib*) (begin (if (not (and (symbol? G2af7@id) (list? G2af8@name) (list? G2af9@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2af7@id G2af8@name G2af9@ver) (void)) (if (G2a04@library-exists? G2af8@name) (assertion-violation 'install-library '"library is already installed" G2af8@name) (void)) ((lambda (G2b19@lib) (G2a0a@install-library-record G2b19@lib)) (G29ac@make-library G2af7@id G2af8@name G2af9@ver G2b13@imp-lib* G2b14@vis-lib* G2b15@inv-lib* G2afd@exp-subst G2afe@exp-env G2aff@visit-proc G2b00@invoke-proc G2b01@visit-code G2b02@invoke-code G2b03@visible? G2b04@source-file-name)))) (map G2a06@find-library-by-spec/die G2afa@imp*) (map G2a06@find-library-by-spec/die G2afb@vis*) (map G2a06@find-library-by-spec/die G2afc@inv*)))) (set! G2a0e@imported-label->binding (lambda (G2b1b@lab) (hashtable-ref G2a08@label->binding-table G2b1b@lab '#f))) (set! G2a10@invoke-library (lambda (G2b1d@lib) ((lambda (G2b1f@invoke) (if (procedure? G2b1f@invoke) (begin (G29dc@set-library-invoke-state! G2b1d@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b1d@lib))) (for-each G2a10@invoke-library (G29b8@library-inv* G2b1d@lib)) (G29dc@set-library-invoke-state! G2b1d@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b1d@lib))) (G2b1f@invoke) (G29dc@set-library-invoke-state! G2b1d@lib '#t)) (void))) (G29c0@library-invoke-state G2b1d@lib)))) (set! G2a12@visit-library (lambda (G2b21@lib) ((lambda (G2b23@visit) (if (procedure? G2b23@visit) (begin (G29da@set-library-visit-state! G2b21@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b21@lib))) (for-each G2a10@invoke-library (G29b6@library-vis* G2b21@lib)) (G29da@set-library-visit-state! G2b21@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b21@lib))) (G2b23@visit) (G29da@set-library-visit-state! G2b21@lib '#t)) (void))) (G29be@library-visit-state G2b21@lib)))) (set! G2a14@invoke-library-by-spec (lambda (G2b25@spec) (G2a10@invoke-library (G2a06@find-library-by-spec/die G2b25@spec)))) (set! G2a16@installed-libraries (lambda G2b2d ((lambda (G2b2e) (if (= G2b2e '1) (apply (lambda (G2b27@all?) ((letrec ((G2b29@f (lambda (G2b2b@ls) (if (null? G2b2b@ls) '() (if (or G2b27@all? (G29c6@library-visible? (car G2b2b@ls))) (cons (car G2b2b@ls) (G2b29@f (cdr G2b2b@ls))) (G2b29@f (cdr G2b2b@ls))))))) G2b29@f) ((G299d@current-library-collection)))) G2b2d) (if (= G2b2e '0) (apply (lambda () (G2a16@installed-libraries '#f)) G2b2d) (error 'apply '"invalid arg count")))) (length G2b2d)))) (set! G2a18@library-spec (lambda (G2b2f@x) (begin (if (not (G29aa@library? G2b2f@x)) (assertion-violation 'library-spec '"not a library" G2b2f@x) (void)) (list (G29ae@library-id G2b2f@x) (G29b0@library-name G2b2f@x) (G29b2@library-version G2b2f@x))))) (begin (set! G2b6d@G2a18@library-spec G2a18@library-spec) (set! G2b6c@G2a16@installed-libraries G2a16@installed-libraries) (set! G2b6b@G2a14@invoke-library-by-spec G2a14@invoke-library-by-spec) (set! G2b6a@G2a12@visit-library G2a12@visit-library) (set! G2b69@G2a10@invoke-library G2a10@invoke-library) (set! G2b68@G2a0e@imported-label->binding G2a0e@imported-label->binding) (set! G2b67@G2a0c@install-library G2a0c@install-library) (set! G2b66@G2a0a@install-library-record G2a0a@install-library-record) (set! G2b65@G2a08@label->binding-table G2a08@label->binding-table) (set! G2b64@G2a06@find-library-by-spec/die G2a06@find-library-by-spec/die) (set! G2b63@G2a04@library-exists? G2a04@library-exists?) (set! G2b62@G2a02@find-library-by-name G2a02@find-library-by-name) (set! G2b61@G2a00@find-external-library G2a00@find-external-library) (set! G2b60@G29fe@external-pending-libraries G29fe@external-pending-libraries) (set! G2b5f@G29fc@current-library-expander G29fc@current-library-expander) (set! G2b5e@G29fa@library-loader G29fa@library-loader) (set! G2b5d@G29f8@try-load-from-file G29f8@try-load-from-file) (set! G2b5c@G29f6@current-precompiled-library-loader G29f6@current-precompiled-library-loader) (set! G2b5b@G29f4@serialize-all G29f4@serialize-all) (set! G2b5a@G29f2@file-locator G29f2@file-locator) (set! G2b59@G29f0@library-name->file-name G29f0@library-name->file-name) (set! G2b58@G29ee@library-extensions G29ee@library-extensions) (set! G2b57@G29ec@library-path G29ec@library-path) (set! G2b56@G29ea@find-library-by G29ea@find-library-by) (set! G2b55@G29e8@find-dependencies G29e8@find-dependencies) (set! G2b54@G29e6@rp G29e6@rp) (set! G2b53@G29e4@set-library-source-file-name! G29e4@set-library-source-file-name!) (set! G2b52@G29e2@set-library-visible?! G29e2@set-library-visible?!) (set! G2b51@G29e0@set-library-invoke-code! G29e0@set-library-invoke-code!) (set! G2b50@G29de@set-library-visit-code! G29de@set-library-visit-code!) (set! G2b4f@G29dc@set-library-invoke-state! G29dc@set-library-invoke-state!) (set! G2b4e@G29da@set-library-visit-state! G29da@set-library-visit-state!) (set! G2b4d@G29d8@set-library-env! G29d8@set-library-env!) (set! G2b4c@G29d6@set-library-subst! G29d6@set-library-subst!) (set! G2b4b@G29d4@set-library-inv*! G29d4@set-library-inv*!) (set! G2b4a@G29d2@set-library-vis*! G29d2@set-library-vis*!) (set! G2b49@G29d0@set-library-imp*! G29d0@set-library-imp*!) (set! G2b48@G29ce@set-library-version! G29ce@set-library-version!) (set! G2b47@G29cc@set-library-name! G29cc@set-library-name!) (set! G2b46@G29ca@set-library-id! G29ca@set-library-id!) (set! G2b45@G29c8@library-source-file-name G29c8@library-source-file-name) (set! G2b44@G29c6@library-visible? G29c6@library-visible?) (set! G2b43@G29c4@library-invoke-code G29c4@library-invoke-code) (set! G2b42@G29c2@library-visit-code G29c2@library-visit-code) (set! G2b41@G29c0@library-invoke-state G29c0@library-invoke-state) (set! G2b40@G29be@library-visit-state G29be@library-visit-state) (set! G2b3f@G29bc@library-env G29bc@library-env) (set! G2b3e@G29ba@library-subst G29ba@library-subst) (set! G2b3d@G29b8@library-inv* G29b8@library-inv*) (set! G2b3c@G29b6@library-vis* G29b6@library-vis*) (set! G2b3b@G29b4@library-imp* G29b4@library-imp*) (set! G2b3a@G29b2@library-version G29b2@library-version) (set! G2b39@G29b0@library-name G29b0@library-name) (set! G2b38@G29ae@library-id G29ae@library-id) (set! G2b37@G29ac@make-library G29ac@make-library) (set! G2b36@G29aa@library? G29aa@library?) (set! G2b35@G29a7@G299f G29a7@G299f) (set! G2b34@G29a5@G29a0 G29a5@G29a0) (set! G2b33@G29a3@G299e G29a3@G299e) (set! G2b32@G299d@current-library-collection G299d@current-library-collection) (set! G2b31@G299b@make-collection G299b@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b70@build-global-define G2bea@build-lambda G2bec@build-case-lambda G2bee@build-let G2c20@build-sequence G2c22@build-void G2c24@build-letrec G2c26@build-letrec* G2c28@build-library-letrec* G2c2a@build-receive) (begin (set! G2b70@build-global-define (lambda (G2c2b@x) (G2c22@build-void))) (set! G2bea@build-lambda (lambda (G2c2d@ae G2c2e@vars G2c2f@exp) (list 'lambda G2c2e@vars G2c2f@exp))) (set! G2bec@build-case-lambda (lambda (G2c33@ae G2c34@vars* G2c35@exp*) ((lambda (G2c3a@build-error G2c3c@build-pred G2c3e@build-apply G2c40@expand-case-lambda) (begin (set! G2c3a@build-error (lambda (G2c6f@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c3c@build-pred (lambda (G2c59@ae G2c5a@n G2c5b@vars) (call-with-values (lambda () ((letrec ((G2c61@f (lambda (G2c63@vars G2c64@count) (if (pair? G2c63@vars) (G2c61@f (cdr G2c63@vars) (+ G2c64@count '1)) (if (null? G2c63@vars) (values G2c64@count '=) (values G2c64@count '>=)))))) G2c61@f) G2c5b@vars '0)) (lambda (G2c67@G2c5f G2c68@G2c60) ((lambda (G2c6b@pred G2c6c@count) (list (list 'primitive G2c6b@pred) G2c5a@n (list 'quote G2c6c@count))) G2c68@G2c60 G2c67@G2c5f))))) (set! G2c3e@build-apply (lambda (G2c51@ae G2c52@g G2c53@vars G2c54@exp) (list '(primitive apply) (G2bea@build-lambda G2c51@ae G2c53@vars G2c54@exp) G2c52@g))) (set! G2c40@expand-case-lambda (lambda (G2c41@ae G2c42@vars G2c43@exp*) ((lambda (G2c47@g G2c48@n) (list 'lambda G2c47@g (G2bee@build-let G2c41@ae (list G2c48@n) (list (list '(primitive length) G2c47@g)) ((letrec ((G2c4b@f (lambda (G2c4d@vars* G2c4e@exp*) (if (null? G2c4d@vars*) (G2c3a@build-error G2c41@ae) (list 'if (G2c3c@build-pred G2c41@ae G2c48@n (car G2c4d@vars*)) (G2c3e@build-apply G2c41@ae G2c47@g (car G2c4d@vars*) (car G2c4e@exp*)) (G2c4b@f (cdr G2c4d@vars*) (cdr G2c4e@exp*))))))) G2c4b@f) G2c34@vars* G2c43@exp*)))) (gensym) (gensym)))) (if (= (length G2c35@exp*) '1) (G2bea@build-lambda G2c33@ae (car G2c34@vars*) (car G2c35@exp*)) (G2c40@expand-case-lambda G2c33@ae G2c34@vars* G2c35@exp*)))) '#f '#f '#f '#f))) (set! G2bee@build-let (lambda (G2c71@ae G2c72@lhs* G2c73@rhs* G2c74@body) (cons (G2bea@build-lambda G2c71@ae G2c72@lhs* G2c74@body) G2c73@rhs*))) (set! G2c20@build-sequence (lambda (G2c79@ae G2c7a@exps) ((letrec ((G2c7d@loop (lambda (G2c7f@exps) (if (null? (cdr G2c7f@exps)) (car G2c7f@exps) (if (equal? (car G2c7f@exps) (G2c22@build-void)) (G2c7d@loop (cdr G2c7f@exps)) (cons 'begin G2c7f@exps)))))) G2c7d@loop) G2c7a@exps))) (set! G2c22@build-void (lambda () '((primitive void)))) (set! G2c24@build-letrec (lambda (G2c81@ae G2c82@vars G2c83@val-exps G2c84@body-exp) (if (null? G2c82@vars) G2c84@body-exp (list 'letrec (map list G2c82@vars G2c83@val-exps) G2c84@body-exp)))) (set! G2c26@build-letrec* (lambda (G2c89@ae G2c8a@vars G2c8b@val-exps G2c8c@body-exp) (if (null? G2c8a@vars) G2c8c@body-exp (G2bee@build-let G2c89@ae G2c8a@vars (map (lambda (G2c91@x) (list 'quote '#f)) G2c8a@vars) (G2c20@build-sequence G2c89@ae (append (map (lambda (G2c93@lhs G2c94@rhs) (list 'set! G2c93@lhs G2c94@rhs)) G2c8a@vars G2c8b@val-exps) (list G2c8c@body-exp))))))) (set! G2c28@build-library-letrec* (lambda (G2c97@ae G2c98@name G2c99@vars G2c9a@locs G2c9b@val-exps G2c9c@body-exp) (list 'library-letrec* G2c98@name (map list G2c99@vars G2c9a@locs G2c9b@val-exps) G2c9c@body-exp))) (set! G2c2a@build-receive (lambda (G2ca3@ae G2ca4@vars G2ca5@producer G2ca6@body*) (begin (display '"************** in ") (cons 'receive (cons G2ca4@vars (cons G2ca5@producer G2ca6@body*)))))) (begin (set! G2cb4@G2c2a@build-receive G2c2a@build-receive) (set! G2cb3@G2c28@build-library-letrec* G2c28@build-library-letrec*) (set! G2cb2@G2c26@build-letrec* G2c26@build-letrec*) (set! G2cb1@G2c24@build-letrec G2c24@build-letrec) (set! G2cb0@G2c22@build-void G2c22@build-void) (set! G2caf@G2c20@build-sequence G2c20@build-sequence) (set! G2cae@G2bee@build-let G2bee@build-let) (set! G2cad@G2bec@build-case-lambda G2bec@build-case-lambda) (set! G2cac@G2bea@build-lambda G2bea@build-lambda) (set! G2cab@G2b70@build-global-define G2b70@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cc3@set-cons G2cc5@set-union G2cca@top-mark* G2ccc@top-marked? G2cce@gen-lexical G2cd0@gen-global G2cd2@gen-label G2cd4@gen-top-level-label G2cd6@gen-define-label+loc G2cd8@gen-define-label G2cde@G2cd9 G2ce0@G2cdb G2ce2@G2cda G2ce5@rib? G2ce7@make-rib G2ce9@rib-sym* G2ceb@rib-mark** G2ced@rib-label* G2cef@rib-sealed/freq G2cf1@rib-cache G2cf3@set-rib-sym*! G2cf5@set-rib-mark**! G2cf7@set-rib-label*! G2cf9@set-rib-sealed/freq! G2cfb@set-rib-cache! G2cfd@make-empty-rib G2cff@make-cache-rib G2d01@find-label G2d03@extend-rib! G2d05@extend-rib/nc! G2d07@make-rib-map G2d09@seal-rib! G2d0b@unseal-rib! G2d0d@make-full-rib G2d13@G2d0e G2d15@G2d10 G2d17@G2d0f G2d1a@stx? G2d1c@make-stx G2d1e@stx-expr G2d20@stx-mark* G2d22@stx-subst* G2d24@stx-ae* G2d26@set-stx-expr! G2d28@set-stx-mark*! G2d2a@set-stx-subst*! G2d2c@set-stx-ae*! G2d2e@rp G2d30@datum->stx G2d32@gen-mark G2d34@anti-mark G2d36@anti-mark? G2d38@join-wraps G2d3a@mkstx G2d3c@add-mark G2d3e@add-subst G2d40@syntax-kind? G2d42@syntax-vector->list G2d44@syntax-pair? G2d46@syntax-vector? G2d48@syntax-null? G2d4a@syntax-list? G2d4c@syntax-car G2d4e@syntax-cdr G2d50@syntax->list G2d52@id? G2d54@id->sym G2d56@same-marks? G2d58@bound-id=? G2d5a@free-id=? G2d5c@valid-bound-ids? G2d5e@distinct-bound-ids? G2d60@bound-id-member? G2d62@self-evaluating? G2d64@strip-annotations G2d66@strip G2d68@stx->datum G2d6a@same-marks*? G2d6c@id->label G2d6e@id->real-label G2d70@label->binding G2d72@make-binding G2d74@binding-type G2d76@binding-value G2d78@raise-unbound-error G2d7a@syntax-type G2d8a@sanitize-binding G2d8c@make-variable-transformer G2d8e@variable-transformer? G2d90@variable-transformer-procedure G2d92@make-eval-transformer G2ed5@parse-define G2ed7@parse-define-syntax G2ed9@scheme-stx-hashtable G2edb@scheme-stx G2edd@lexical-var G2edf@lexical-mutable? G2ee1@set-lexical-mutable! G2ee3@add-lexical G2ee5@add-lexicals G2ee7@letrec-helper G2ee9@letrec-transformer G2eeb@letrec*-transformer G2eed@fluid-let-syntax-transformer G2eef@type-descriptor-transformer G2ef1@record-type-descriptor-transformer G2ef3@record-constructor-descriptor-transformer G2ef5@when-macro G2ef7@unless-macro G2ef9@if-transformer G2efb@and-transformer G2efd@or-transformer G2eff@case-macro G2f01@quote-transformer G2f03@case-lambda-transformer G2f05@lambda-transformer G2f07@bless G2f09@with-syntax-macro G2f0b@invalid-fmls-error G2f0d@let-macro G2f0f@let-values-macro G2f11@let*-values-macro G2f13@trace-lambda-macro G2f15@trace-define-macro G2f17@trace-define-syntax-macro G2f19@trace-let/rec-syntax G2f1b@trace-let-syntax-macro G2f1d@trace-letrec-syntax-macro G2f1f@guard-macro G2f21@define-enumeration-macro G2f23@time-macro G2f25@delay-macro G2f27@assert-macro G2f29@endianness-macro G2f2b@identifier-syntax-macro G2f2d@do-macro G2f2f@let*-macro G2f31@or-macro G2f33@and-macro G2f35@cond-macro G2f37@do-include G2f39@include-macro G2f3b@include-into-macro G2f3d@syntax-rules-macro G2f3f@quasiquote-macro G2f41@quasisyntax-macro G2f43@define-struct-macro G2f45@define-record-type-macro G2f47@define-condition-type-macro G2f49@incorrect-usage-macro G2f4b@parameterize-macro G2f4d@foreign-call-transformer G2f4f@convert-pattern G2f51@syntax-dispatch G2f53@ellipsis? G2f55@underscore? G2f57@verify-literals G2f59@syntax-case-transformer G2f5b@ellipsis-map G2f5d@syntax-transformer G2f5f@core-macro-transformer G2f61@file-options-macro G2f63@symbol-macro G2f65@macro-transformer G2f67@local-macro-transformer G2f69@do-macro-call G2f6b@chi-macro G2f6d@chi-local-macro G2f6f@chi-global-macro G2f71@chi-expr* G2f73@chi-application G2f75@chi-expr G2f77@chi-set! G2f79@verify-formals G2f7b@chi-lambda-clause G2f7d@chi-lambda-clause* G2f7f@chi-defun G2f81@chi-rhs G2f83@expand-interaction-rhs*/init* G2f85@chi-rhs* G2f87@find-bound=? G2f89@find-dups G2f8b@chi-internal G2f8d@parse-module G2f93@G2f8e G2f95@G2f90 G2f97@G2f8f G2f9a@module-interface? G2f9c@make-module-interface G2f9e@module-interface-first-mark G2fa0@module-interface-exp-id-vec G2fa2@module-interface-exp-lab-vec G2fa4@set-module-interface-first-mark! G2fa6@set-module-interface-exp-id-vec! G2fa8@set-module-interface-exp-lab-vec! G2faa@module-interface-exp-id* G2fac@chi-internal-module G2fae@chi-body* G2fb0@expand-transformer G2fb2@parse-exports G2fb4@parse-library-name G2fb6@parse-library G2fb8@parse-import-spec* G2fba@make-top-rib G2fbc@make-collector G2fbe@inv-collector G2fc0@vis-collector G2fc2@imp-collector G2fc4@chi-library-internal G2fc6@chi-interaction-expr G2fc8@library-body-expander G2fca@core-library-expander G2fcc@parse-top-level-program G2fce@top-level-expander G2fd4@G2fcf G2fd6@G2fd1 G2fd8@G2fd0 G2fdb@env? G2fdd@make-env G2fdf@env-names G2fe1@env-labels G2fe3@env-itc G2fe5@set-env-names! G2fe7@set-env-labels! G2fe9@set-env-itc! G2feb@rp G2ff1@G2fec G2ff3@G2fee G2ff5@G2fed G2ff8@interaction-env? G2ffa@make-interaction-env G2ffc@interaction-env-rib G2ffe@interaction-env-r G3000@interaction-env-locs G3002@set-interaction-env-rib! G3004@set-interaction-env-r! G3006@set-interaction-env-locs! G3008@rp G300a@interaction-environment-symbols G300c@environment-bindings G300e@parse-binding G3010@environment? G3012@environment-symbols G3014@environment G3016@null-environment G3018@scheme-report-environment G301a@expand G301c@eval G301e@library-expander G3020@boot-library-expand G3022@rev-map-append G3024@build-exports G3026@make-export-subst G3028@make-export-env/macros G302a@generate-temporaries G302c@free-identifier=? G302e@bound-identifier=? G3030@make-source-condition G3032@extract-position-condition G3034@expression-position G3036@assertion-error G3038@syntax-error G303a@syntax-violation* G303c@syntax-violation G303e@identifier? G3040@datum->syntax G3042@syntax->datum G3044@compile-r6rs-top-level G3046@pre-compile-r6rs-top-level G3048@interaction-environment G304a@top-level-context) (begin (set! G2cc3@set-cons (lambda (G304b@x G304c@ls) (if (memq G304b@x G304c@ls) G304c@ls (cons G304b@x G304c@ls)))) (set! G2cc5@set-union (lambda (G304f@ls1 G3050@ls2) (if (null? G304f@ls1) G3050@ls2 (if (memq (car G304f@ls1) G3050@ls2) (G2cc5@set-union (cdr G304f@ls1) G3050@ls2) (cons (car G304f@ls1) (G2cc5@set-union (cdr G304f@ls1) G3050@ls2)))))) (set! G2cca@top-mark* '(top)) (set! G2ccc@top-marked? (lambda (G3053@m*) (memq 'top G3053@m*))) (set! G2cce@gen-lexical (lambda (G3055@sym) (if (symbol? G3055@sym) (gensym G3055@sym) (if (G2d1a@stx? G3055@sym) (G2cce@gen-lexical (G2d54@id->sym G3055@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3055@sym))))) (set! G2cd0@gen-global (lambda (G3057@x) (G2cce@gen-lexical G3057@x))) (set! G2cd2@gen-label (lambda (G3059@_) (gensym))) (set! G2cd4@gen-top-level-label (lambda (G305b@id G305c@rib) ((lambda (G3060@find) (begin (set! G3060@find (lambda (G306b@sym G306c@mark* G306d@sym* G306e@mark** G306f@label*) (and (pair? G306d@sym*) (if (and (eq? G306b@sym (car G306d@sym*)) (G2d56@same-marks? G306c@mark* (car G306e@mark**))) (car G306f@label*) (G3060@find G306b@sym G306c@mark* (cdr G306d@sym*) (cdr G306e@mark**) (cdr G306f@label*)))))) ((lambda (G3061@sym G3062@mark*) ((lambda (G3065@sym*) ((lambda (G3067@t) (if G3067@t ((lambda (G3069@label) (if (G2b68@G2a0e@imported-label->binding G3069@label) (gensym) G3069@label)) G3067@t) (gensym))) (and (memq G3061@sym (G2ce9@rib-sym* G305c@rib)) (G3060@find G3061@sym G3062@mark* G3065@sym* (G2ceb@rib-mark** G305c@rib) (G2ced@rib-label* G305c@rib))))) (G2ce9@rib-sym* G305c@rib))) (G2d54@id->sym G305b@id) (G2d20@stx-mark* G305b@id)))) '#f))) (set! G2cd6@gen-define-label+loc (lambda (G3075@id G3076@rib) ((lambda (G3079@t) (if G3079@t ((lambda (G307b@env) ((lambda (G307d@label G307e@locs) (values G307d@label ((lambda (G3081@t) (if G3081@t (cdr G3081@t) ((lambda (G3083@loc) (begin (G3006@set-interaction-env-locs! G307b@env (cons (cons G307d@label G3083@loc) G307e@locs)) G3083@loc)) (G2cce@gen-lexical G3075@id)))) (assq G307d@label G307e@locs)))) (G2cd4@gen-top-level-label G3075@id G3076@rib) (G3000@interaction-env-locs G307b@env))) G3079@t) (values (gensym) (G2cce@gen-lexical G3075@id)))) (G304a@top-level-context)))) (set! G2cd8@gen-define-label (lambda (G3085@id G3086@rib) (if (G304a@top-level-context) (G2cd4@gen-top-level-label G3085@id G3086@rib) (gensym)))) (set! G2cde@G2cd9 (make-record-type-descriptor 'rib '#f 'G2cdc '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ce0@G2cdb '#f) (set! G2ce2@G2cda (make-record-constructor-descriptor G2cde@G2cd9 '#f G2ce0@G2cdb)) (set! G2ce5@rib? (record-predicate G2cde@G2cd9)) (set! G2ce7@make-rib (record-constructor G2ce2@G2cda)) (set! G2ce9@rib-sym* (record-accessor G2cde@G2cd9 '0)) (set! G2ceb@rib-mark** (record-accessor G2cde@G2cd9 '1)) (set! G2ced@rib-label* (record-accessor G2cde@G2cd9 '2)) (set! G2cef@rib-sealed/freq (record-accessor G2cde@G2cd9 '3)) (set! G2cf1@rib-cache (record-accessor G2cde@G2cd9 '4)) (set! G2cf3@set-rib-sym*! (record-mutator G2cde@G2cd9 '0)) (set! G2cf5@set-rib-mark**! (record-mutator G2cde@G2cd9 '1)) (set! G2cf7@set-rib-label*! (record-mutator G2cde@G2cd9 '2)) (set! G2cf9@set-rib-sealed/freq! (record-mutator G2cde@G2cd9 '3)) (set! G2cfb@set-rib-cache! (record-mutator G2cde@G2cd9 '4)) (set! G2cfd@make-empty-rib (lambda () (G2ce7@make-rib '() '() '() '#f '#f))) (set! G2cff@make-cache-rib (lambda () (G2ce7@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d01@find-label (lambda (G3089@rib G308a@sym G308b@mark*) ((lambda (G308f@ht) (and G308f@ht ((lambda (G3091@cv) ((lambda (G3093@t) (if G3093@t (cdr G3093@t) '#f)) (and G3091@cv (assp (lambda (G3095@m) (G2d56@same-marks? G308b@mark* G3095@m)) G3091@cv)))) (hashtable-ref G308f@ht G308a@sym '#f)))) (G2cf1@rib-cache G3089@rib)))) (set! G2d03@extend-rib! (lambda (G3097@rib G3098@id G3099@label) ((lambda (G309e@find) (begin (set! G309e@find (lambda (G30af@sym G30b0@mark* G30b1@sym* G30b2@mark** G30b3@label*) (and (pair? G30b1@sym*) (if (and (eq? G30af@sym (car G30b1@sym*)) (G2d56@same-marks? G30b0@mark* (car G30b2@mark**))) G30b3@label* (G309e@find G30af@sym G30b0@mark* (cdr G30b1@sym*) (cdr G30b2@mark**) (cdr G30b3@label*)))))) (begin (if (G2cef@rib-sealed/freq G3097@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G3097@rib) (void)) ((lambda (G309f@sym G30a0@mark*) ((lambda (G30a3@sym*) ((lambda (G30a5@t) (if G30a5@t ((lambda (G30a7@p) (if (not (eq? G3099@label G30a7@p)) (G303c@syntax-violation '#f '"multiple definitions of identifier" G3098@id) (void))) G30a5@t) ((lambda (G30a9@t) (if G30a9@t ((lambda (G30ab@p) (if (not (eq? G3099@label (car G30ab@p))) (if (G304a@top-level-context) (set-car! G30ab@p G3099@label) (G303c@syntax-violation '#f '"multiple definitions of identifier" G3098@id)) (void))) G30a9@t) (begin (if (G2cf1@rib-cache G3097@rib) (hashtable-update! (G2cf1@rib-cache G3097@rib) G309f@sym (lambda (G30ad@e) (cons (cons G30a0@mark* G3099@label) G30ad@e)) '()) (void)) (G2cf3@set-rib-sym*! G3097@rib (cons G309f@sym G30a3@sym*)) (G2cf5@set-rib-mark**! G3097@rib (cons G30a0@mark* (G2ceb@rib-mark** G3097@rib))) (G2cf7@set-rib-label*! G3097@rib (cons G3099@label (G2ced@rib-label* G3097@rib)))))) (and (memq G309f@sym (G2ce9@rib-sym* G3097@rib)) (G309e@find G309f@sym G30a0@mark* G30a3@sym* (G2ceb@rib-mark** G3097@rib) (G2ced@rib-label* G3097@rib)))))) (G2d01@find-label G3097@rib G309f@sym G30a0@mark*))) (G2ce9@rib-sym* G3097@rib))) (G2d54@id->sym G3098@id) (G2d20@stx-mark* G3098@id))))) '#f))) (set! G2d05@extend-rib/nc! (lambda (G30b9@rib G30ba@id G30bb@label) ((lambda (G30bf@sym G30c0@mark*) ((lambda (G30c3@sym*) (begin (if (G2cf1@rib-cache G30b9@rib) (hashtable-update! (G2cf1@rib-cache G30b9@rib) G30bf@sym (lambda (G30c5@e) (cons (cons G30c0@mark* G30bb@label) G30c5@e)) '()) (void)) (G2cf3@set-rib-sym*! G30b9@rib (cons G30bf@sym G30c3@sym*)) (G2cf5@set-rib-mark**! G30b9@rib (cons G30c0@mark* (G2ceb@rib-mark** G30b9@rib))) (G2cf7@set-rib-label*! G30b9@rib (cons G30bb@label (G2ced@rib-label* G30b9@rib))))) (G2ce9@rib-sym* G30b9@rib))) (G2d54@id->sym G30ba@id) (G2d20@stx-mark* G30ba@id)))) (set! G2d07@make-rib-map (lambda (G30c7@sym*) ((lambda (G30c9@ht) ((letrec ((G30cb@f (lambda (G30cd@i G30ce@sym*) (if (null? G30ce@sym*) G30c9@ht (begin (hashtable-update! G30c9@ht (car G30ce@sym*) (lambda (G30d1@x) (cons G30cd@i G30d1@x)) '()) (G30cb@f (+ G30cd@i '1) (cdr G30ce@sym*))))))) G30cb@f) '0 G30c7@sym*)) (make-eq-hashtable)))) (set! G2d09@seal-rib! (lambda (G30d3@rib) ((lambda (G30d5@sym*) (if (not (null? G30d5@sym*)) (begin (G2cf3@set-rib-sym*! G30d3@rib (list->vector G30d5@sym*)) (G2cf5@set-rib-mark**! G30d3@rib (list->vector (G2ceb@rib-mark** G30d3@rib))) (G2cf7@set-rib-label*! G30d3@rib (list->vector (G2ced@rib-label* G30d3@rib))) (G2cf9@set-rib-sealed/freq! G30d3@rib (G2d07@make-rib-map G30d5@sym*))) (void))) (G2ce9@rib-sym* G30d3@rib)))) (set! G2d0b@unseal-rib! (lambda (G30d7@rib) (if (G2cef@rib-sealed/freq G30d7@rib) (begin (G2cf9@set-rib-sealed/freq! G30d7@rib '#f) (G2cf3@set-rib-sym*! G30d7@rib (vector->list (G2ce9@rib-sym* G30d7@rib))) (G2cf5@set-rib-mark**! G30d7@rib (vector->list (G2ceb@rib-mark** G30d7@rib))) (G2cf7@set-rib-label*! G30d7@rib (vector->list (G2ced@rib-label* G30d7@rib)))) (void)))) (set! G2d0d@make-full-rib (lambda (G30d9@id* G30da@label*) ((lambda (G30dd@r) (begin (G2d09@seal-rib! G30dd@r) G30dd@r)) (G2ce7@make-rib (map G2d54@id->sym G30d9@id*) (map G2d20@stx-mark* G30d9@id*) G30da@label* '#f '#f)))) (set! G2d13@G2d0e (make-record-type-descriptor 'stx '#f 'G2d11 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d15@G2d10 '#f) (set! G2d17@G2d0f (make-record-constructor-descriptor G2d13@G2d0e '#f G2d15@G2d10)) (set! G2d1a@stx? (record-predicate G2d13@G2d0e)) (set! G2d1c@make-stx (record-constructor G2d17@G2d0f)) (set! G2d1e@stx-expr (record-accessor G2d13@G2d0e '0)) (set! G2d20@stx-mark* (record-accessor G2d13@G2d0e '1)) (set! G2d22@stx-subst* (record-accessor G2d13@G2d0e '2)) (set! G2d24@stx-ae* (record-accessor G2d13@G2d0e '3)) (set! G2d26@set-stx-expr! (record-mutator G2d13@G2d0e '0)) (set! G2d28@set-stx-mark*! (record-mutator G2d13@G2d0e '1)) (set! G2d2a@set-stx-subst*! (record-mutator G2d13@G2d0e '2)) (set! G2d2c@set-stx-ae*! (record-mutator G2d13@G2d0e '3)) (set! G2d2e@rp (G28eb@G281e@make-record-printer 'stx (lambda (G30df@x G30e0@p G30e1@wr) (begin (display '"#<syntax " G30e0@p) (write (G2d68@stx->datum G30df@x) G30e0@p) ((lambda (G30e5@expr) (if (G28e3@G280e@annotation? G30e5@expr) ((lambda (G30e7@src) (if (pair? G30e7@src) (begin (display '" [" G30e0@p) (display (cdr G30e7@src) G30e0@p) (display '" of " G30e0@p) (display (car G30e7@src) G30e0@p) (display '"]" G30e0@p)) (void))) (G28e4@G2810@annotation-source G30e5@expr)) (void))) (G2d1e@stx-expr G30df@x)) (display '">" G30e0@p))))) (set! G2d30@datum->stx (lambda (G30e9@id G30ea@datum) (G2d1c@make-stx G30ea@datum (G2d20@stx-mark* G30e9@id) (G2d22@stx-subst* G30e9@id) (G2d24@stx-ae* G30e9@id)))) (set! G2d32@gen-mark (lambda () (string '#\m))) (set! G2d34@anti-mark '#f) (set! G2d36@anti-mark? not) (set! G2d38@join-wraps (lambda (G30ed@m1* G30ee@s1* G30ef@ae1* G30f0@e) ((lambda (G30f6@cancel) (begin (set! G30f6@cancel (lambda (G30fd@ls1 G30fe@ls2) ((letrec ((G3101@f (lambda (G3103@x G3104@ls1) (if (null? G3104@ls1) (cdr G30fe@ls2) (cons G3103@x (G3101@f (car G3104@ls1) (cdr G3104@ls1))))))) G3101@f) (car G30fd@ls1) (cdr G30fd@ls1)))) ((lambda (G30f7@m2* G30f8@s2* G30f9@ae2*) (if (and (not (null? G30ed@m1*)) (not (null? G30f7@m2*)) (G2d36@anti-mark? (car G30f7@m2*))) (values (G30f6@cancel G30ed@m1* G30f7@m2*) (G30f6@cancel G30ee@s1* G30f8@s2*) (G30f6@cancel G30ef@ae1* G30f9@ae2*)) (values (append G30ed@m1* G30f7@m2*) (append G30ee@s1* G30f8@s2*) (append G30ef@ae1* G30f9@ae2*)))) (G2d20@stx-mark* G30f0@e) (G2d22@stx-subst* G30f0@e) (G2d24@stx-ae* G30f0@e)))) '#f))) (set! G2d3a@mkstx (lambda (G3107@e G3108@m* G3109@s* G310a@ae*) (if (and (G2d1a@stx? G3107@e) (not (G2ccc@top-marked? G3108@m*))) (call-with-values (lambda () (G2d38@join-wraps G3108@m* G3109@s* G310a@ae* G3107@e)) (lambda (G3112@G310f G3113@G3110 G3114@G3111) ((lambda (G3118@ae* G3119@s* G311a@m*) (G2d1c@make-stx (G2d1e@stx-expr G3107@e) G311a@m* G3119@s* G3118@ae*)) G3114@G3111 G3113@G3110 G3112@G310f))) (G2d1c@make-stx G3107@e G3108@m* G3109@s* G310a@ae*)))) (set! G2d3c@add-mark (lambda (G311e@m G311f@e G3120@ae) (G2d3a@mkstx G311f@e (list G311e@m) '(shift) (list G3120@ae)))) (set! G2d3e@add-subst (lambda (G3124@subst G3125@e) (G2d3a@mkstx G3125@e '() (list G3124@subst) '()))) (set! G2d40@syntax-kind? (lambda (G3128@x G3129@p?) (if (G2d1a@stx? G3128@x) (G2d40@syntax-kind? (G2d1e@stx-expr G3128@x) G3129@p?) (if (G28e3@G280e@annotation? G3128@x) (G2d40@syntax-kind? (G28e5@G2812@annotation-expression G3128@x) G3129@p?) (G3129@p? G3128@x))))) (set! G2d42@syntax-vector->list (lambda (G312c@x) (if (G2d1a@stx? G312c@x) ((lambda (G312e@ls G312f@m* G3130@s* G3131@ae*) (map (lambda (G3136@x) (G2d3a@mkstx G3136@x G312f@m* G3130@s* G3131@ae*)) G312e@ls)) (G2d42@syntax-vector->list (G2d1e@stx-expr G312c@x)) (G2d20@stx-mark* G312c@x) (G2d22@stx-subst* G312c@x) (G2d24@stx-ae* G312c@x)) (if (G28e3@G280e@annotation? G312c@x) (G2d42@syntax-vector->list (G28e5@G2812@annotation-expression G312c@x)) (if (vector? G312c@x) (vector->list G312c@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G312c@x)))))) (set! G2d44@syntax-pair? (lambda (G3138@x) (G2d40@syntax-kind? G3138@x pair?))) (set! G2d46@syntax-vector? (lambda (G313a@x) (G2d40@syntax-kind? G313a@x vector?))) (set! G2d48@syntax-null? (lambda (G313c@x) (G2d40@syntax-kind? G313c@x null?))) (set! G2d4a@syntax-list? (lambda (G313e@x) (or (G2d48@syntax-null? G313e@x) (and (G2d44@syntax-pair? G313e@x) (G2d4a@syntax-list? (G2d4e@syntax-cdr G313e@x)))))) (set! G2d4c@syntax-car (lambda (G3140@x) (if (G2d1a@stx? G3140@x) (G2d3a@mkstx (G2d4c@syntax-car (G2d1e@stx-expr G3140@x)) (G2d20@stx-mark* G3140@x) (G2d22@stx-subst* G3140@x) (G2d24@stx-ae* G3140@x)) (if (G28e3@G280e@annotation? G3140@x) (G2d4c@syntax-car (G28e5@G2812@annotation-expression G3140@x)) (if (pair? G3140@x) (car G3140@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3140@x)))))) (set! G2d4e@syntax-cdr (lambda (G3142@x) (if (G2d1a@stx? G3142@x) (G2d3a@mkstx (G2d4e@syntax-cdr (G2d1e@stx-expr G3142@x)) (G2d20@stx-mark* G3142@x) (G2d22@stx-subst* G3142@x) (G2d24@stx-ae* G3142@x)) (if (G28e3@G280e@annotation? G3142@x) (G2d4e@syntax-cdr (G28e5@G2812@annotation-expression G3142@x)) (if (pair? G3142@x) (cdr G3142@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3142@x)))))) (set! G2d50@syntax->list (lambda (G3144@x) (if (G2d44@syntax-pair? G3144@x) (cons (G2d4c@syntax-car G3144@x) (G2d50@syntax->list (G2d4e@syntax-cdr G3144@x))) (if (G2d48@syntax-null? G3144@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3144@x))))) (set! G2d52@id? (lambda (G3146@x) (and (G2d1a@stx? G3146@x) ((lambda (G3148@expr) (symbol? (if (G28e3@G280e@annotation? G3148@expr) (G28e2@G280c@annotation-stripped G3148@expr) G3148@expr))) (G2d1e@stx-expr G3146@x))))) (set! G2d54@id->sym (lambda (G314a@x) (begin (if (not (G2d1a@stx? G314a@x)) (error 'id->sym '"BUG in ikarus: not an id" G314a@x) (void)) ((lambda (G314c@expr) ((lambda (G314e@sym) (if (symbol? G314e@sym) G314e@sym (error 'id->sym '"BUG in ikarus: not an id" G314a@x))) (if (G28e3@G280e@annotation? G314c@expr) (G28e2@G280c@annotation-stripped G314c@expr) G314c@expr))) (G2d1e@stx-expr G314a@x))))) (set! G2d56@same-marks? (lambda (G3150@x G3151@y) (or (and (null? G3150@x) (null? G3151@y)) (and (pair? G3150@x) (pair? G3151@y) (eq? (car G3150@x) (car G3151@y)) (G2d56@same-marks? (cdr G3150@x) (cdr G3151@y)))))) (set! G2d58@bound-id=? (lambda (G3154@x G3155@y) (and (eq? (G2d54@id->sym G3154@x) (G2d54@id->sym G3155@y)) (G2d56@same-marks? (G2d20@stx-mark* G3154@x) (G2d20@stx-mark* G3155@y))))) (set! G2d5a@free-id=? (lambda (G3158@i G3159@j) ((lambda (G315c@t0 G315d@t1) (if (or G315c@t0 G315d@t1) (eq? G315c@t0 G315d@t1) (eq? (G2d54@id->sym G3158@i) (G2d54@id->sym G3159@j)))) (G2d6e@id->real-label G3158@i) (G2d6e@id->real-label G3159@j)))) (set! G2d5c@valid-bound-ids? (lambda (G3160@id*) (and (for-all G2d52@id? G3160@id*) (G2d5e@distinct-bound-ids? G3160@id*)))) (set! G2d5e@distinct-bound-ids? (lambda (G3162@id*) (or (null? G3162@id*) (and (not (G2d60@bound-id-member? (car G3162@id*) (cdr G3162@id*))) (G2d5e@distinct-bound-ids? (cdr G3162@id*)))))) (set! G2d60@bound-id-member? (lambda (G3164@id G3165@id*) (and (pair? G3165@id*) (or (G2d58@bound-id=? G3164@id (car G3165@id*)) (G2d60@bound-id-member? G3164@id (cdr G3165@id*)))))) (set! G2d62@self-evaluating? (lambda (G3168@x) (or (number? G3168@x) (string? G3168@x) (char? G3168@x) (boolean? G3168@x) (regexp? G3168@x) (bytevector? G3168@x)))) (set! G2d64@strip-annotations (lambda (G316a@x) (if (pair? G316a@x) (cons (G2d64@strip-annotations (car G316a@x)) (G2d64@strip-annotations (cdr G316a@x))) (if (vector? G316a@x) (vector-map G2d64@strip-annotations G316a@x) (if (G28e3@G280e@annotation? G316a@x) (G28e2@G280c@annotation-stripped G316a@x) G316a@x))))) (set! G2d66@strip (lambda (G316c@x G316d@m*) (if (G2ccc@top-marked? G316d@m*) (if (or (G28e3@G280e@annotation? G316c@x) (and (pair? G316c@x) (G28e3@G280e@annotation? (car G316c@x))) (and (vector? G316c@x) (> (vector-length G316c@x) '0) (G28e3@G280e@annotation? (vector-ref G316c@x '0)))) (G2d64@strip-annotations G316c@x) G316c@x) ((letrec ((G3170@f (lambda (G3172@x) (if (G2d1a@stx? G3172@x) (G2d66@strip (G2d1e@stx-expr G3172@x) (G2d20@stx-mark* G3172@x)) (if (G28e3@G280e@annotation? G3172@x) (G28e2@G280c@annotation-stripped G3172@x) (if (pair? G3172@x) ((lambda (G3174@a G3175@d) (if (and (eq? G3174@a (car G3172@x)) (eq? G3175@d (cdr G3172@x))) G3172@x (cons G3174@a G3175@d))) (G3170@f (car G3172@x)) (G3170@f (cdr G3172@x))) (if (vector? G3172@x) ((lambda (G3178@old) ((lambda (G317a@new) (if (for-all eq? G3178@old G317a@new) G3172@x (list->vector G317a@new))) (map G3170@f G3178@old))) (vector->list G3172@x)) G3172@x))))))) G3170@f) G316c@x)))) (set! G2d68@stx->datum (lambda (G317c@x) (G2d66@strip G317c@x '()))) (set! G2d6a@same-marks*? (lambda (G317e@mark* G317f@mark** G3180@si) (if (null? G3180@si) '#f (if (G2d56@same-marks? G317e@mark* (vector-ref G317f@mark** (car G3180@si))) (car G3180@si) (G2d6a@same-marks*? G317e@mark* G317f@mark** (cdr G3180@si)))))) (set! G2d6c@id->label (lambda (G3184@id) (or (G2d6e@id->real-label G3184@id) ((lambda (G3186@t) (if G3186@t ((lambda (G3188@env) ((lambda (G318a@rib) (call-with-values (lambda () (G2cd6@gen-define-label+loc G3184@id G318a@rib)) (lambda (G318e@G318c G318f@G318d) ((lambda (G3192@loc_ G3193@lab) (begin (G2d03@extend-rib! G318a@rib G3184@id G3193@lab) G3193@lab)) G318f@G318d G318e@G318c)))) (G2ffc@interaction-env-rib G3188@env))) G3186@t) '#f)) (G304a@top-level-context))))) (set! G2d6e@id->real-label (lambda (G3196@id) ((lambda (G3198@sym) ((letrec ((G319a@search (lambda (G319c@subst* G319d@mark*) (if (null? G319c@subst*) '#f (if (eq? (car G319c@subst*) 'shift) (G319a@search (cdr G319c@subst*) (cdr G319d@mark*)) ((lambda (G31a0@rib) ((lambda (G31a2@t) (if G31a2@t ((lambda (G31a4@ht) ((lambda (G31a6@si) ((lambda (G31a8@i) (if G31a8@i (vector-ref (G2ced@rib-label* G31a0@rib) G31a8@i) (G319a@search (cdr G319c@subst*) G319d@mark*))) (and G31a6@si (G2d6a@same-marks*? G319d@mark* (G2ceb@rib-mark** G31a0@rib) (reverse G31a6@si))))) (hashtable-ref G31a4@ht G3198@sym '#f))) G31a2@t) (or (G2d01@find-label G31a0@rib G3198@sym G319d@mark*) ((letrec ((G31aa@f (lambda (G31ac@sym* G31ad@mark** G31ae@label*) (if (null? G31ac@sym*) (G319a@search (cdr G319c@subst*) G319d@mark*) (if (and (eq? (car G31ac@sym*) G3198@sym) (G2d56@same-marks? (car G31ad@mark**) G319d@mark*)) (car G31ae@label*) (G31aa@f (cdr G31ac@sym*) (cdr G31ad@mark**) (cdr G31ae@label*))))))) G31aa@f) (G2ce9@rib-sym* G31a0@rib) (G2ceb@rib-mark** G31a0@rib) (G2ced@rib-label* G31a0@rib))))) (G2cef@rib-sealed/freq G31a0@rib))) (car G319c@subst*))))))) G319a@search) (G2d22@stx-subst* G3196@id) (G2d20@stx-mark* G3196@id))) (G2d54@id->sym G3196@id)))) (set! G2d70@label->binding (lambda (G31b2@x G31b3@r) ((lambda (G31b6@t) (if G31b6@t ((lambda (G31b8@b) (if (and (pair? G31b8@b) (eq? (car G31b8@b) '$core-rtd)) (cons '$rtd (map G2f07@bless (cdr G31b8@b))) (if (and (pair? G31b8@b) (eq? (car G31b8@b) 'global-rtd)) ((lambda (G31ba@lib G31bb@loc) (cons '$rtd (symbol-value G31bb@loc))) (cadr G31b8@b) (cddr G31b8@b)) G31b8@b))) G31b6@t) ((lambda (G31be@t) (if G31be@t (cdr G31be@t) ((lambda (G31c0@t) (if G31c0@t ((lambda (G31c2@env) ((lambda (G31c4@t) (if G31c4@t ((lambda (G31c6@p) (cons* 'lexical (cdr G31c6@p) '#f)) G31c4@t) '(displaced-lexical . #f))) (assq G31b2@x (G3000@interaction-env-locs G31c2@env)))) G31c0@t) '(displaced-lexical . #f))) (G304a@top-level-context)))) (assq G31b2@x G31b3@r)))) (G2b68@G2a0e@imported-label->binding G31b2@x)))) (set! G2d72@make-binding cons) (set! G2d74@binding-type car) (set! G2d76@binding-value cdr) (set! G2d78@raise-unbound-error (lambda (G31c8@id) (G303a@syntax-violation* '#f '"unbound identifier" G31c8@id (G4c74@G4abe@make-undefined-violation)))) (set! G2d7a@syntax-type (lambda (G31ca@e G31cb@r) (if (G2d52@id? G31ca@e) ((lambda (G31ce@id) ((lambda (G31d0@label) ((lambda (G31d2@b) ((lambda (G31d4@type) ((lambda () (begin (if (not G31d0@label) (G2d78@raise-unbound-error G31ce@id) (void)) ((lambda (G31d6@t) (if (memv G31d6@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31d4@type (G2d76@binding-value G31d2@b) G31ce@id) (values 'other '#f '#f))) G31d4@type))))) (G2d74@binding-type G31d2@b))) (G2d70@label->binding G31d0@label G31cb@r))) (G2d6c@id->label G31ce@id))) G31ca@e) (if (G2d44@syntax-pair? G31ca@e) ((lambda (G31d8@id) (if (G2d52@id? G31d8@id) ((lambda (G31da@label) ((lambda (G31dc@b) ((lambda (G31de@type) ((lambda () (begin (if (not G31da@label) (G2d78@raise-unbound-error G31d8@id) (void)) ((lambda (G31e0@t) (if (memv G31e0@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31de@type (G2d76@binding-value G31dc@b) G31d8@id) (values 'call '#f '#f))) G31de@type))))) (G2d74@binding-type G31dc@b))) (G2d70@label->binding G31da@label G31cb@r))) (G2d6c@id->label G31d8@id)) (values 'call '#f '#f))) (G2d4c@syntax-car G31ca@e)) ((lambda (G31e2@d) (if (G2d62@self-evaluating? G31e2@d) (values 'constant G31e2@d '#f) (values 'other '#f '#f))) (G2d68@stx->datum G31ca@e)))))) (set! G2d8a@sanitize-binding (lambda (G31e4@x G31e5@src) (if (procedure? G31e4@x) (cons* 'local-macro G31e4@x G31e5@src) (if (and (pair? G31e4@x) (eq? (car G31e4@x) 'macro!) (procedure? (cdr G31e4@x))) (cons* 'local-macro! (cdr G31e4@x) G31e5@src) (if (and (pair? G31e4@x) (eq? (car G31e4@x) '$rtd)) G31e4@x (assertion-violation 'expand '"invalid transformer" G31e4@x)))))) (set! G2d8c@make-variable-transformer (lambda (G31e8@x) (if (procedure? G31e8@x) (cons 'macro! G31e8@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31e8@x)))) (set! G2d8e@variable-transformer? (lambda (G31ea@x) (and (pair? G31ea@x) (eq? (car G31ea@x) 'macro!) (procedure? (cdr G31ea@x))))) (set! G2d90@variable-transformer-procedure (lambda (G31ec@x) (if (G2d8e@variable-transformer? G31ec@x) (cdr G31ec@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31ec@x)))) (set! G2d92@make-eval-transformer (lambda (G31ee@x) (G2d8a@sanitize-binding (eval-core (G2942@G28fa@expanded->core G31ee@x)) G31ee@x))) (set! G2ed5@parse-define (lambda (G31f0@x) ((lambda (G31f2@t) ((lambda (G31f4@ls/false) (if (and G31f4@ls/false (apply (lambda (G31f6@id G31f7@fmls G31f8@b G31f9@b*) (G2d52@id? G31f6@id)) G31f4@ls/false)) (apply (lambda (G31fe@id G31ff@fmls G3200@b G3201@b*) (begin (G2f79@verify-formals G31ff@fmls G31f0@x) (values G31fe@id (cons 'defun (cons G31ff@fmls (cons G3200@b G3201@b*)))))) G31f4@ls/false) ((lambda (G3206@t) ((lambda (G3208@ls/false) (if (and G3208@ls/false (apply (lambda (G320a@id G320b@val) (G2d52@id? G320a@id)) G3208@ls/false)) (apply (lambda (G320e@id G320f@val) (values G320e@id (cons 'expr G320f@val))) G3208@ls/false) ((lambda (G3212@t) ((lambda (G3214@ls/false) (if (and G3214@ls/false (apply (lambda (G3216@id) (G2d52@id? G3216@id)) G3214@ls/false)) (apply (lambda (G3218@id) (values G3218@id (cons 'expr (G2f07@bless '(void))))) G3214@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3212@t))) (G2f51@syntax-dispatch G3212@t '(_ any)))) G3206@t))) (G2f51@syntax-dispatch G3206@t '(_ any any)))) G31f2@t))) (G2f51@syntax-dispatch G31f2@t '(_ (any . any) any . each-any)))) G31f0@x))) (set! G2ed7@parse-define-syntax (lambda (G321a@x) ((lambda (G321c@t) ((lambda (G321e@ls/false) (if (and G321e@ls/false (apply (lambda (G3220@id G3221@val) (G2d52@id? G3220@id)) G321e@ls/false)) (apply (lambda (G3224@id G3225@val) (values G3224@id G3225@val)) G321e@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G321c@t))) (G2f51@syntax-dispatch G321c@t '(_ any any)))) G321a@x))) (set! G2ed9@scheme-stx-hashtable (make-eq-hashtable)) (set! G2edb@scheme-stx (lambda (G3228@sym) (or (hashtable-ref G2ed9@scheme-stx-hashtable G3228@sym '#f) ((lambda (G322a@subst) ((lambda (G322c@stx) ((lambda (G322e@stx) ((lambda () (begin (hashtable-set! G2ed9@scheme-stx-hashtable G3228@sym G322e@stx) G322e@stx)))) ((lambda (G3230@t) (if G3230@t ((lambda (G3232@x) ((lambda (G3234@name G3235@label) (G2d3e@add-subst (G2ce7@make-rib (list G3234@name) (list G2cca@top-mark*) (list G3235@label) '#f '#f) G322c@stx)) (car G3232@x) (cdr G3232@x))) G3230@t) G322c@stx)) (assq G3228@sym G322a@subst)))) (G2d1c@make-stx G3228@sym G2cca@top-mark* '() '()))) (G2b3e@G29ba@library-subst (G2b62@G2a02@find-library-by-name '(psyntax system $all))))))) (set! G2edd@lexical-var car) (set! G2edf@lexical-mutable? cdr) (set! G2ee1@set-lexical-mutable! set-cdr!) (set! G2ee3@add-lexical (lambda (G3238@lab G3239@lex G323a@r) (cons (cons* G3238@lab 'lexical G3239@lex '#f) G323a@r))) (set! G2ee5@add-lexicals (lambda (G323e@lab* G323f@lex* G3240@r) (if (null? G323e@lab*) G3240@r (G2ee5@add-lexicals (cdr G323e@lab*) (cdr G323f@lex*) (G2ee3@add-lexical (car G323e@lab*) (car G323f@lex*) G3240@r))))) (set! G2ee7@letrec-helper (lambda (G3244@e G3245@r G3246@mr G3247@build) ((lambda (G324c@t) ((lambda (G324e@ls/false) (if G324e@ls/false (apply (lambda (G3250@lhs* G3251@rhs* G3252@b G3253@b*) (if (not (G2d5c@valid-bound-ids? G3250@lhs*)) (G2f0b@invalid-fmls-error G3244@e G3250@lhs*) ((lambda (G3258@lex* G3259@lab*) ((lambda (G325c@rib G325d@r) ((lambda (G3260@body G3261@rhs*) (G3247@build '#f G3258@lex* G3261@rhs* G3260@body)) (G2f8b@chi-internal (G2d3e@add-subst G325c@rib (cons G3252@b G3253@b*)) G325d@r G3246@mr) (G2f71@chi-expr* (map (lambda (G3264@x) (G2d3e@add-subst G325c@rib G3264@x)) G3251@rhs*) G325d@r G3246@mr))) (G2d0d@make-full-rib G3250@lhs* G3259@lab*) (G2ee5@add-lexicals G3259@lab* G3258@lex* G3245@r))) (map G2cce@gen-lexical G3250@lhs*) (map G2cd2@gen-label G3250@lhs*)))) G324e@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G324c@t))) (G2f51@syntax-dispatch G324c@t '(_ #(each (any any)) any . each-any)))) G3244@e))) (set! G2ee9@letrec-transformer (lambda (G3266@e G3267@r G3268@mr) (G2ee7@letrec-helper G3266@e G3267@r G3268@mr G2cb1@G2c24@build-letrec))) (set! G2eeb@letrec*-transformer (lambda (G326c@e G326d@r G326e@mr) (G2ee7@letrec-helper G326c@e G326d@r G326e@mr G2cb2@G2c26@build-letrec*))) (set! G2eed@fluid-let-syntax-transformer (lambda (G3272@e G3273@r G3274@mr) ((lambda (G3279@lookup) (begin (set! G3279@lookup (lambda (G328c@x) (or (G2d6c@id->label G328c@x) (G303c@syntax-violation '#f '"unbound identifier" G3272@e G328c@x)))) ((lambda (G327a@t) ((lambda (G327c@ls/false) (if G327c@ls/false (apply (lambda (G327e@lhs* G327f@rhs* G3280@b G3281@b*) (if (not (G2d5c@valid-bound-ids? G327e@lhs*)) (G2f0b@invalid-fmls-error G3272@e G327e@lhs*) ((lambda (G3286@lab* G3287@rhs*) (G2f8b@chi-internal (cons G3280@b G3281@b*) (append (map cons G3286@lab* G3287@rhs*) G3273@r) (append (map cons G3286@lab* G3287@rhs*) G3274@mr))) (map G3279@lookup G327e@lhs*) (map (lambda (G328a@x) (G2d92@make-eval-transformer (G2fb0@expand-transformer G328a@x G3274@mr))) G327f@rhs*)))) G327c@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G327a@t))) (G2f51@syntax-dispatch G327a@t '(_ #(each (any any)) any . each-any)))) G3272@e))) '#f))) (set! G2eef@type-descriptor-transformer (lambda (G328e@e G328f@r G3290@mr) ((lambda (G3294@t) ((lambda (G3296@ls/false) (if (and G3296@ls/false (apply (lambda (G3298@id) (G2d52@id? G3298@id)) G3296@ls/false)) (apply (lambda (G329a@id) ((lambda (G329c@lab) ((lambda (G329e@b) ((lambda (G32a0@type) ((lambda () (begin (if (not G329c@lab) (G2d78@raise-unbound-error G329a@id) (void)) (if (not (and (eq? G32a0@type '$rtd) (not (list? (G2d76@binding-value G329e@b))))) (G303c@syntax-violation '#f '"not a record type" G328e@e) (void)) (list 'quote (G2d76@binding-value G329e@b)))))) (G2d74@binding-type G329e@b))) (G2d70@label->binding G329c@lab G328f@r))) (G2d6c@id->label G329a@id))) G3296@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3294@t))) (G2f51@syntax-dispatch G3294@t '(_ any)))) G328e@e))) (set! G2ef1@record-type-descriptor-transformer (lambda (G32a2@e G32a3@r G32a4@mr) ((lambda (G32a8@t) ((lambda (G32aa@ls/false) (if (and G32aa@ls/false (apply (lambda (G32ac@id) (G2d52@id? G32ac@id)) G32aa@ls/false)) (apply (lambda (G32ae@id) ((lambda (G32b0@lab) ((lambda (G32b2@b) ((lambda (G32b4@type) ((lambda () (begin (if (not G32b0@lab) (G2d78@raise-unbound-error G32ae@id) (void)) (if (not (and (eq? G32b4@type '$rtd) (list? (G2d76@binding-value G32b2@b)))) (G303c@syntax-violation '#f '"not a record type" G32a2@e) (void)) (G2f75@chi-expr (car (G2d76@binding-value G32b2@b)) G32a3@r G32a4@mr))))) (G2d74@binding-type G32b2@b))) (G2d70@label->binding G32b0@lab G32a3@r))) (G2d6c@id->label G32ae@id))) G32aa@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G32a8@t))) (G2f51@syntax-dispatch G32a8@t '(_ any)))) G32a2@e))) (set! G2ef3@record-constructor-descriptor-transformer (lambda (G32b6@e G32b7@r G32b8@mr) ((lambda (G32bc@t) ((lambda (G32be@ls/false) (if (and G32be@ls/false (apply (lambda (G32c0@id) (G2d52@id? G32c0@id)) G32be@ls/false)) (apply (lambda (G32c2@id) ((lambda (G32c4@lab) ((lambda (G32c6@b) ((lambda (G32c8@type) ((lambda () (begin (if (not G32c4@lab) (G2d78@raise-unbound-error G32c2@id) (void)) (if (not (and (eq? G32c8@type '$rtd) (list? (G2d76@binding-value G32c6@b)))) (G303c@syntax-violation '#f '"invalid type" G32b6@e) (void)) (G2f75@chi-expr (cadr (G2d76@binding-value G32c6@b)) G32b7@r G32b8@mr))))) (G2d74@binding-type G32c6@b))) (G2d70@label->binding G32c4@lab G32b7@r))) (G2d6c@id->label G32c2@id))) G32be@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G32bc@t))) (G2f51@syntax-dispatch G32bc@t '(_ any)))) G32b6@e))) (set! G2ef5@when-macro (lambda (G32ca@e) ((lambda (G32cc@t) ((lambda (G32ce@ls/false) (if G32ce@ls/false (apply (lambda (G32d0@test G32d1@e G32d2@e*) (G2f07@bless (list 'if G32d0@test (cons 'begin (cons G32d1@e G32d2@e*))))) G32ce@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G32cc@t))) (G2f51@syntax-dispatch G32cc@t '(_ any any . each-any)))) G32ca@e))) (set! G2ef7@unless-macro (lambda (G32d6@e) ((lambda (G32d8@t) ((lambda (G32da@ls/false) (if G32da@ls/false (apply (lambda (G32dc@test G32dd@e G32de@e*) (G2f07@bless (list 'if (list 'not G32dc@test) (cons 'begin (cons G32dd@e G32de@e*))))) G32da@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G32d8@t))) (G2f51@syntax-dispatch G32d8@t '(_ any any . each-any)))) G32d6@e))) (set! G2ef9@if-transformer (lambda (G32e2@e G32e3@r G32e4@mr) ((lambda (G32e8@t) ((lambda (G32ea@ls/false) (if G32ea@ls/false (apply (lambda (G32ec@e0 G32ed@e1 G32ee@e2) (list 'if (G2f75@chi-expr G32ec@e0 G32e3@r G32e4@mr) (G2f75@chi-expr G32ed@e1 G32e3@r G32e4@mr) (G2f75@chi-expr G32ee@e2 G32e3@r G32e4@mr))) G32ea@ls/false) ((lambda (G32f2@t) ((lambda (G32f4@ls/false) (if G32f4@ls/false (apply (lambda (G32f6@e0 G32f7@e1) (list 'if (G2f75@chi-expr G32f6@e0 G32e3@r G32e4@mr) (G2f75@chi-expr G32f7@e1 G32e3@r G32e4@mr) (G2cb0@G2c22@build-void))) G32f4@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G32f2@t))) (G2f51@syntax-dispatch G32f2@t '(_ any any)))) G32e8@t))) (G2f51@syntax-dispatch G32e8@t '(_ any any any)))) G32e2@e))) (set! G2efb@and-transformer (lambda (G32fa@e G32fb@r G32fc@mr) ((lambda (G3300@t) ((lambda (G3302@ls/false) (if G3302@ls/false (apply (lambda (G3304@e*) (cons 'and (G2f71@chi-expr* G3304@e* G32fb@r G32fc@mr))) G3302@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3300@t))) (G2f51@syntax-dispatch G3300@t '(_ . each-any)))) G32fa@e))) (set! G2efd@or-transformer (lambda (G3306@e G3307@r G3308@mr) ((lambda (G330c@t) ((lambda (G330e@ls/false) (if G330e@ls/false (apply (lambda (G3310@e*) (cons 'or (G2f71@chi-expr* G3310@e* G3307@r G3308@mr))) G330e@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G330c@t))) (G2f51@syntax-dispatch G330c@t '(_ . each-any)))) G3306@e))) (set! G2eff@case-macro (lambda (G3312@e) ((lambda (G3315@build-last G3317@build-one) (begin (set! G3315@build-last (lambda (G333c@cls) ((lambda (G333e@t) ((lambda (G3340@ls/false) (if G3340@ls/false (apply (lambda (G3342@e G3343@e*) (cons 'begin (cons G3342@e G3343@e*))) G3340@ls/false) ((lambda (G3346@t) ((lambda (G3348@ls/false) (if G3348@ls/false (apply (lambda () (G3317@build-one G333c@cls '(if #f #f))) G3348@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3346@t))) (G2f51@syntax-dispatch G3346@t '_))) G333e@t))) (G2f51@syntax-dispatch G333e@t '(#(scheme-id else) any . each-any)))) G333c@cls))) (set! G3317@build-one (lambda (G332e@cls G332f@k) ((lambda (G3332@t) ((lambda (G3334@ls/false) (if G3334@ls/false (apply (lambda (G3336@d* G3337@e G3338@e*) (list 'if (list 'memv 't (list 'quote G3336@d*)) (cons 'begin (cons G3337@e G3338@e*)) G332f@k)) G3334@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3332@t))) (G2f51@syntax-dispatch G3332@t '(each-any any . each-any)))) G332e@cls))) ((lambda (G3318@t) ((lambda (G331a@ls/false) (if G331a@ls/false (apply (lambda (G331c@expr) (G2f07@bless (cons 'let (cons (list (list 't G331c@expr)) '((if #f #f)))))) G331a@ls/false) ((lambda (G331e@t) ((lambda (G3320@ls/false) (if G3320@ls/false (apply (lambda (G3322@expr G3323@cls G3324@cls*) (G2f07@bless (list 'let (list (list 't G3322@expr)) ((letrec ((G3328@f (lambda (G332a@cls G332b@cls*) (if (null? G332b@cls*) (G3315@build-last G332a@cls) (G3317@build-one G332a@cls (G3328@f (car G332b@cls*) (cdr G332b@cls*))))))) G3328@f) G3323@cls G3324@cls*)))) G3320@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G331e@t))) (G2f51@syntax-dispatch G331e@t '(_ any any . each-any)))) G3318@t))) (G2f51@syntax-dispatch G3318@t '(_ any)))) G3312@e))) '#f '#f))) (set! G2f01@quote-transformer (lambda (G334a@e G334b@r G334c@mr) ((lambda (G3350@t) ((lambda (G3352@ls/false) (if G3352@ls/false (apply (lambda (G3354@datum) (list 'quote (G2d68@stx->datum G3354@datum))) G3352@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3350@t))) (G2f51@syntax-dispatch G3350@t '(_ any)))) G334a@e))) (set! G2f03@case-lambda-transformer (lambda (G3356@e G3357@r G3358@mr) ((lambda (G335c@t) ((lambda (G335e@ls/false) (if G335e@ls/false (apply (lambda (G3360@fmls* G3361@b* G3362@b**) (call-with-values (lambda () (G2f7d@chi-lambda-clause* G3356@e G3360@fmls* (map cons G3361@b* G3362@b**) G3357@r G3358@mr)) (lambda (G3368@G3366 G3369@G3367) ((lambda (G336c@body* G336d@fmls*) (G2cad@G2bec@build-case-lambda '#f G336d@fmls* G336c@body*)) G3369@G3367 G3368@G3366)))) G335e@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G335c@t))) (G2f51@syntax-dispatch G335c@t '(_ . #(each (any any . each-any)))))) G3356@e))) (set! G2f05@lambda-transformer (lambda (G3370@e G3371@r G3372@mr) ((lambda (G3376@t) ((lambda (G3378@ls/false) (if G3378@ls/false (apply (lambda (G337a@fmls G337b@b G337c@b*) (call-with-values (lambda () (G2f7b@chi-lambda-clause G3370@e G337a@fmls (cons G337b@b G337c@b*) G3371@r G3372@mr)) (lambda (G3382@G3380 G3383@G3381) ((lambda (G3386@body G3387@fmls) (G2cac@G2bea@build-lambda '#f G3387@fmls G3386@body)) G3383@G3381 G3382@G3380)))) G3378@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3376@t))) (G2f51@syntax-dispatch G3376@t '(_ any any . each-any)))) G3370@e))) (set! G2f07@bless (lambda (G338a@x) (G2d3a@mkstx ((letrec ((G338c@f (lambda (G338e@x) (if (G2d1a@stx? G338e@x) G338e@x (if (pair? G338e@x) (cons (G338c@f (car G338e@x)) (G338c@f (cdr G338e@x))) (if (symbol? G338e@x) (G2edb@scheme-stx G338e@x) (if (vector? G338e@x) (vector-map G338c@f G338e@x) G338e@x))))))) G338c@f) G338a@x) '() '() '()))) (set! G2f09@with-syntax-macro (lambda (G3390@e) ((lambda (G3392@t) ((lambda (G3394@ls/false) (if G3394@ls/false (apply (lambda (G3396@pat* G3397@expr* G3398@b G3399@b*) ((lambda (G339e@idn*) (begin (G2f79@verify-formals (map car G339e@idn*) G3390@e) ((lambda (G33a0@t*) (G2f07@bless (list 'let (map list G33a0@t* G3397@expr*) ((letrec ((G33a2@f (lambda (G33a4@pat* G33a5@t*) (if (null? G33a4@pat*) (cons 'begin (cons '#f (cons G3398@b G3399@b*))) (list 'syntax-case (car G33a5@t*) '() (list (car G33a4@pat*) (G33a2@f (cdr G33a4@pat*) (cdr G33a5@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33a4@pat*)) (car G33a5@t*)))))))) G33a2@f) G3396@pat* G33a0@t*)))) (G302a@generate-temporaries G3397@expr*)))) ((letrec ((G33a8@f (lambda (G33aa@pat*) (if (null? G33aa@pat*) '() (call-with-values (lambda () (G2f4f@convert-pattern (car G33aa@pat*) '())) (lambda (G33ae@G33ac G33af@G33ad) ((lambda (G33b2@idn* G33b3@pat) (append G33b2@idn* (G33a8@f (cdr G33aa@pat*)))) G33af@G33ad G33ae@G33ac))))))) G33a8@f) G3396@pat*))) G3394@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3392@t))) (G2f51@syntax-dispatch G3392@t '(_ #(each (any any)) any . each-any)))) G3390@e))) (set! G2f0b@invalid-fmls-error (lambda (G33b6@stx G33b7@fmls) ((lambda (G33ba@t) ((lambda (G33bc@ls/false) (if G33bc@ls/false (apply (lambda (G33be@id* G33bf@last) ((letrec ((G33c2@f (lambda (G33c4@id*) (if (null? G33c4@id*) (values) (if (not (G2d52@id? (car G33c4@id*))) (G303c@syntax-violation '#f '"not an identifier" G33b6@stx (car G33c4@id*)) (begin (G33c2@f (cdr G33c4@id*)) (if (G2d60@bound-id-member? (car G33c4@id*) (cdr G33c4@id*)) (G303c@syntax-violation '#f '"duplicate binding" G33b6@stx (car G33c4@id*)) (void)))))))) G33c2@f) (if (G2d52@id? G33bf@last) (cons G33bf@last G33be@id*) (if (G2d48@syntax-null? G33bf@last) G33be@id* (G303c@syntax-violation '#f '"not an identifier" G33b6@stx G33bf@last))))) G33bc@ls/false) ((lambda (G33c6@t) ((lambda (G33c8@ls/false) (if G33c8@ls/false (apply (lambda () (G303c@syntax-violation '#f '"malformed binding form" G33b6@stx G33b7@fmls)) G33c8@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G33c6@t))) (G2f51@syntax-dispatch G33c6@t '_))) G33ba@t))) (G2f51@syntax-dispatch G33ba@t '#(each+ any () any)))) G33b7@fmls))) (set! G2f0d@let-macro (lambda (G33ca@stx) ((lambda (G33cc@t) ((lambda (G33ce@ls/false) (if G33ce@ls/false (apply (lambda (G33d0@lhs* G33d1@rhs* G33d2@b G33d3@b*) (if (G2d5c@valid-bound-ids? G33d0@lhs*) (G2f07@bless (cons (cons 'lambda (cons G33d0@lhs* (cons G33d2@b G33d3@b*))) G33d1@rhs*)) (G2f0b@invalid-fmls-error G33ca@stx G33d0@lhs*))) G33ce@ls/false) ((lambda (G33d8@t) ((lambda (G33da@ls/false) (if (and G33da@ls/false (apply (lambda (G33dc@f G33dd@lhs* G33de@rhs* G33df@b G33e0@b*) (G2d52@id? G33dc@f)) G33da@ls/false)) (apply (lambda (G33e6@f G33e7@lhs* G33e8@rhs* G33e9@b G33ea@b*) (if (G2d5c@valid-bound-ids? G33e7@lhs*) (G2f07@bless (cons (list 'letrec (list (list G33e6@f (cons 'lambda (cons G33e7@lhs* (cons G33e9@b G33ea@b*))))) G33e6@f) G33e8@rhs*)) (G2f0b@invalid-fmls-error G33ca@stx G33e7@lhs*))) G33da@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G33d8@t))) (G2f51@syntax-dispatch G33d8@t '(_ any #(each (any any)) any . each-any)))) G33cc@t))) (G2f51@syntax-dispatch G33cc@t '(_ #(each (any any)) any . each-any)))) G33ca@stx))) (set! G2f0f@let-values-macro (lambda (G33f0@stx) ((lambda (G33f3@rename G33f5@rename*) (begin (set! G33f3@rename (lambda (G3455@x G3456@old* G3457@new*) (begin (if (not (G2d52@id? G3455@x)) (G303c@syntax-violation '#f '"not an indentifier" G33f0@stx G3455@x) (void)) (if (G2d60@bound-id-member? G3455@x G3456@old*) (G303c@syntax-violation '#f '"duplicate binding" G33f0@stx G3455@x) (void)) ((lambda (G345b@y) (values G345b@y (cons G3455@x G3456@old*) (cons G345b@y G3457@new*))) (gensym (G3042@syntax->datum G3455@x)))))) (set! G33f5@rename* (lambda (G3443@x* G3444@old* G3445@new*) (if (null? G3443@x*) (values '() G3444@old* G3445@new*) (call-with-values (lambda () (G33f3@rename (car G3443@x*) G3444@old* G3445@new*)) (lambda (G3449@x G344a@old* G344b@new*) (call-with-values (lambda () (G33f5@rename* (cdr G3443@x*) G344a@old* G344b@new*)) (lambda (G344f@x* G3450@old* G3451@new*) (values (cons G3449@x G344f@x*) G3450@old* G3451@new*)))))))) ((lambda (G33f6@t) ((lambda (G33f8@ls/false) (if G33f8@ls/false (apply (lambda (G33fa@b G33fb@b*) (cons* (G2f07@bless 'let) '() G33fa@b G33fb@b*)) G33f8@ls/false) ((lambda (G33fe@t) ((lambda (G3400@ls/false) (if G3400@ls/false (apply (lambda (G3402@lhs* G3403@rhs* G3404@b G3405@b*) (G2f07@bless ((letrec ((G340a@f (lambda (G340c@lhs* G340d@rhs* G340e@old* G340f@new*) (if (null? G340c@lhs*) (cons 'let (cons (map list G340e@old* G340f@new*) (cons G3404@b G3405@b*))) ((lambda (G3414@t) ((lambda (G3416@ls/false) (if G3416@ls/false (apply (lambda (G3418@x*) (call-with-values (lambda () (G33f5@rename* G3418@x* G340e@old* G340f@new*)) (lambda (G341d@G341a G341e@G341b G341f@G341c) ((lambda (G3423@new* G3424@old* G3425@y*) (list 'call-with-values (list 'lambda '() (car G340d@rhs*)) (list 'lambda G3425@y* (G340a@f (cdr G340c@lhs*) (cdr G340d@rhs*) G3424@old* G3423@new*)))) G341f@G341c G341e@G341b G341d@G341a)))) G3416@ls/false) ((lambda (G3429@t) ((lambda (G342b@ls/false) (if G342b@ls/false (apply (lambda (G342d@x* G342e@x) (call-with-values (lambda () (G33f3@rename G342e@x G340e@old* G340f@new*)) (lambda (G3431@y G3432@old* G3433@new*) (call-with-values (lambda () (G33f5@rename* G342d@x* G3432@old* G3433@new*)) (lambda (G3437@y* G3438@old* G3439@new*) (list 'call-with-values (list 'lambda '() (car G340d@rhs*)) (list 'lambda (append G3437@y* G3431@y) (G340a@f (cdr G340c@lhs*) (cdr G340d@rhs*) G3438@old* G3439@new*)))))))) G342b@ls/false) ((lambda (G343d@t) ((lambda (G343f@ls/false) (if G343f@ls/false (apply (lambda (G3441@others) (G303c@syntax-violation '#f '"malformed bindings" G33f0@stx G3441@others)) G343f@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G343d@t))) (G2f51@syntax-dispatch G343d@t 'any))) G3429@t))) (G2f51@syntax-dispatch G3429@t '#(each+ any () any)))) G3414@t))) (G2f51@syntax-dispatch G3414@t 'each-any))) (car G340c@lhs*)))))) G340a@f) G3402@lhs* G3403@rhs* '() '()))) G3400@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G33fe@t))) (G2f51@syntax-dispatch G33fe@t '(_ #(each (any any)) any . each-any)))) G33f6@t))) (G2f51@syntax-dispatch G33f6@t '(_ () any . each-any)))) G33f0@stx))) '#f '#f))) (set! G2f11@let*-values-macro (lambda (G345d@stx) ((lambda (G3460@check) (begin (set! G3460@check (lambda (G348f@x*) (if (not (null? G348f@x*)) ((lambda (G3491@x) (begin (if (not (G2d52@id? G3491@x)) (G303c@syntax-violation '#f '"not an identifier" G345d@stx G3491@x) (void)) (G3460@check (cdr G348f@x*)) (if (G2d60@bound-id-member? G3491@x (cdr G348f@x*)) (G303c@syntax-violation '#f '"duplicate identifier" G345d@stx G3491@x) (void)))) (car G348f@x*)) (void)))) ((lambda (G3461@t) ((lambda (G3463@ls/false) (if G3463@ls/false (apply (lambda (G3465@b G3466@b*) (cons* (G2f07@bless 'let) '() G3465@b G3466@b*)) G3463@ls/false) ((lambda (G3469@t) ((lambda (G346b@ls/false) (if G346b@ls/false (apply (lambda (G346d@lhs* G346e@rhs* G346f@b G3470@b*) (G2f07@bless ((letrec ((G3475@f (lambda (G3477@lhs* G3478@rhs*) (if (null? G3477@lhs*) (cons 'begin (cons G346f@b G3470@b*)) ((lambda (G347b@t) ((lambda (G347d@ls/false) (if G347d@ls/false (apply (lambda (G347f@x*) (begin (G3460@check G347f@x*) (list 'call-with-values (list 'lambda '() (car G3478@rhs*)) (list 'lambda G347f@x* (G3475@f (cdr G3477@lhs*) (cdr G3478@rhs*)))))) G347d@ls/false) ((lambda (G3481@t) ((lambda (G3483@ls/false) (if G3483@ls/false (apply (lambda (G3485@x* G3486@x) (begin (G3460@check (cons G3486@x G3485@x*)) (list 'call-with-values (list 'lambda '() (car G3478@rhs*)) (list 'lambda (append G3485@x* G3486@x) (G3475@f (cdr G3477@lhs*) (cdr G3478@rhs*)))))) G3483@ls/false) ((lambda (G3489@t) ((lambda (G348b@ls/false) (if G348b@ls/false (apply (lambda (G348d@others) (G303c@syntax-violation '#f '"malformed bindings" G345d@stx G348d@others)) G348b@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3489@t))) (G2f51@syntax-dispatch G3489@t 'any))) G3481@t))) (G2f51@syntax-dispatch G3481@t '#(each+ any () any)))) G347b@t))) (G2f51@syntax-dispatch G347b@t 'each-any))) (car G3477@lhs*)))))) G3475@f) G346d@lhs* G346e@rhs*))) G346b@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3469@t))) (G2f51@syntax-dispatch G3469@t '(_ #(each (any any)) any . each-any)))) G3461@t))) (G2f51@syntax-dispatch G3461@t '(_ () any . each-any)))) G345d@stx))) '#f))) (set! G2f13@trace-lambda-macro (lambda (G3493@stx) ((lambda (G3495@t) ((lambda (G3497@ls/false) (if G3497@ls/false (apply (lambda (G3499@who G349a@fmls G349b@b G349c@b*) (if (G2d5c@valid-bound-ids? G349a@fmls) (G2f07@bless (list 'make-traced-procedure (list 'quote G3499@who) (cons 'lambda (cons G349a@fmls (cons G349b@b G349c@b*))))) (G2f0b@invalid-fmls-error G3493@stx G349a@fmls))) G3497@ls/false) ((lambda (G34a1@t) ((lambda (G34a3@ls/false) (if G34a3@ls/false (apply (lambda (G34a5@who G34a6@fmls G34a7@last G34a8@b G34a9@b*) (if (G2d5c@valid-bound-ids? (cons G34a7@last G34a6@fmls)) (G2f07@bless (list 'make-traced-procedure (list 'quote G34a5@who) (cons 'lambda (cons (append G34a6@fmls G34a7@last) (cons G34a8@b G34a9@b*))))) (G2f0b@invalid-fmls-error G3493@stx (append G34a6@fmls G34a7@last)))) G34a3@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G34a1@t))) (G2f51@syntax-dispatch G34a1@t '(_ any #(each+ any () any) any . each-any)))) G3495@t))) (G2f51@syntax-dispatch G3495@t '(_ any each-any any . each-any)))) G3493@stx))) (set! G2f15@trace-define-macro (lambda (G34af@stx) ((lambda (G34b1@t) ((lambda (G34b3@ls/false) (if G34b3@ls/false (apply (lambda (G34b5@who G34b6@fmls G34b7@b G34b8@b*) (if (G2d5c@valid-bound-ids? G34b6@fmls) (G2f07@bless (list 'define G34b5@who (list 'make-traced-procedure (list 'quote G34b5@who) (cons 'lambda (cons G34b6@fmls (cons G34b7@b G34b8@b*)))))) (G2f0b@invalid-fmls-error G34af@stx G34b6@fmls))) G34b3@ls/false) ((lambda (G34bd@t) ((lambda (G34bf@ls/false) (if G34bf@ls/false (apply (lambda (G34c1@who G34c2@fmls G34c3@last G34c4@b G34c5@b*) (if (G2d5c@valid-bound-ids? (cons G34c3@last G34c2@fmls)) (G2f07@bless (list 'define G34c1@who (list 'make-traced-procedure (list 'quote G34c1@who) (cons 'lambda (cons (append G34c2@fmls G34c3@last) (cons G34c4@b G34c5@b*)))))) (G2f0b@invalid-fmls-error G34af@stx (append G34c2@fmls G34c3@last)))) G34bf@ls/false) ((lambda (G34cb@t) ((lambda (G34cd@ls/false) (if G34cd@ls/false (apply (lambda (G34cf@who G34d0@expr) (if (G2d52@id? G34cf@who) (G2f07@bless (list 'define G34cf@who (list 'let (list (list 'v G34d0@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34cf@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G303c@syntax-violation '#f '"invalid name" G34af@stx))) G34cd@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G34cb@t))) (G2f51@syntax-dispatch G34cb@t '(_ any any)))) G34bd@t))) (G2f51@syntax-dispatch G34bd@t '(_ (any . #(each+ any () any)) any . each-any)))) G34b1@t))) (G2f51@syntax-dispatch G34b1@t '(_ (any . each-any) any . each-any)))) G34af@stx))) (set! G2f17@trace-define-syntax-macro (lambda (G34d3@stx) ((lambda (G34d5@t) ((lambda (G34d7@ls/false) (if G34d7@ls/false (apply (lambda (G34d9@who G34da@expr) (if (G2d52@id? G34d9@who) (G2f07@bless (list 'define-syntax G34d9@who (list 'make-traced-macro (list 'quote G34d9@who) G34da@expr))) (G303c@syntax-violation '#f '"invalid name" G34d3@stx))) G34d7@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G34d5@t))) (G2f51@syntax-dispatch G34d5@t '(_ any any)))) G34d3@stx))) (set! G2f19@trace-let/rec-syntax (lambda (G34dd@who) (lambda (G34df@stx) ((lambda (G34e1@t) ((lambda (G34e3@ls/false) (if G34e3@ls/false (apply (lambda (G34e5@lhs* G34e6@rhs* G34e7@b G34e8@b*) (if (G2d5c@valid-bound-ids? G34e5@lhs*) ((lambda (G34ed@rhs*) (G2f07@bless (cons G34dd@who (cons (map list G34e5@lhs* G34ed@rhs*) (cons G34e7@b G34e8@b*))))) (map (lambda (G34ef@lhs G34f0@rhs) (list 'make-traced-macro (list 'quote G34ef@lhs) G34f0@rhs)) G34e5@lhs* G34e6@rhs*)) (G2f0b@invalid-fmls-error G34df@stx G34e5@lhs*))) G34e3@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G34e1@t))) (G2f51@syntax-dispatch G34e1@t '(_ #(each (any any)) any . each-any)))) G34df@stx)))) (set! G2f1b@trace-let-syntax-macro (G2f19@trace-let/rec-syntax 'let-syntax)) (set! G2f1d@trace-letrec-syntax-macro (G2f19@trace-let/rec-syntax 'letrec-syntax)) (set! G2f1f@guard-macro (lambda (G34f3@x) ((lambda (G34f6@gen-clauses) (begin (set! G34f6@gen-clauses (lambda (G350d@con G350e@outerk G350f@clause*) ((lambda (G3514@f G3516@f*) (begin (set! G3514@f (lambda (G3549@x G354a@k) ((lambda (G354d@t) ((lambda (G354f@ls/false) (if G354f@ls/false (apply (lambda (G3551@e G3552@p) ((lambda (G3555@t) (list 'let (list (list G3555@t G3551@e)) (list 'if G3555@t (list G3552@p G3555@t) G354a@k))) (gensym))) G354f@ls/false) ((lambda (G3557@t) ((lambda (G3559@ls/false) (if G3559@ls/false (apply (lambda (G355b@e) ((lambda (G355d@t) (list 'let (list (list G355d@t G355b@e)) (list 'if G355d@t G355d@t G354a@k))) (gensym))) G3559@ls/false) ((lambda (G355f@t) ((lambda (G3561@ls/false) (if G3561@ls/false (apply (lambda (G3563@e G3564@v G3565@v*) (list 'if G3563@e (cons 'begin (cons G3564@v G3565@v*)) G354a@k)) G3561@ls/false) ((lambda (G3569@t) ((lambda (G356b@ls/false) (if G356b@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid guard clause" G3549@x)) G356b@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3569@t))) (G2f51@syntax-dispatch G3569@t '_))) G355f@t))) (G2f51@syntax-dispatch G355f@t '(any any . each-any)))) G3557@t))) (G2f51@syntax-dispatch G3557@t '(any)))) G354d@t))) (G2f51@syntax-dispatch G354d@t '(any #(scheme-id =>) any)))) G3549@x))) (set! G3516@f* (lambda (G3521@x*) ((lambda (G3523@t) ((lambda (G3525@ls/false) (if G3525@ls/false (apply (lambda () ((lambda (G3527@g) (values (list G3527@g (list 'lambda '() (list 'raise-continuable G350d@con))) G3527@g)) (gensym))) G3525@ls/false) ((lambda (G3529@t) ((lambda (G352b@ls/false) (if G352b@ls/false (apply (lambda (G352d@e G352e@e*) (values (cons 'begin (cons G352d@e G352e@e*)) '#f)) G352b@ls/false) ((lambda (G3531@t) ((lambda (G3533@ls/false) (if G3533@ls/false (apply (lambda (G3535@cls G3536@cls*) (call-with-values (lambda () (G3516@f* G3536@cls*)) (lambda (G353b@G3539 G353c@G353a) ((lambda (G353f@g G3540@e) (values (G3514@f G3535@cls G3540@e) G353f@g)) G353c@G353a G353b@G3539)))) G3533@ls/false) ((lambda (G3543@t) ((lambda (G3545@ls/false) (if G3545@ls/false (apply (lambda (G3547@others) (G303c@syntax-violation '#f '"invalid guard clause" G3547@others)) G3545@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3543@t))) (G2f51@syntax-dispatch G3543@t 'any))) G3531@t))) (G2f51@syntax-dispatch G3531@t '(any . any)))) G3529@t))) (G2f51@syntax-dispatch G3529@t '((#(scheme-id else) any . each-any))))) G3523@t))) (G2f51@syntax-dispatch G3523@t '()))) G3521@x*))) (call-with-values (lambda () (G3516@f* G350f@clause*)) (lambda (G3519@G3517 G351a@G3518) ((lambda (G351d@raisek G351e@code) (if G351d@raisek (list (list 'call/cc (list 'lambda (list G351d@raisek) (list G350e@outerk (list 'lambda '() G351e@code))))) (list G350e@outerk (list 'lambda '() G351e@code)))) G351a@G3518 G3519@G3517))))) '#f '#f))) ((lambda (G34f7@t) ((lambda (G34f9@ls/false) (if (and G34f9@ls/false (apply (lambda (G34fb@con G34fc@clause* G34fd@b G34fe@b*) (G2d52@id? G34fb@con)) G34f9@ls/false)) (apply (lambda (G3503@con G3504@clause* G3505@b G3506@b*) ((lambda (G350b@outerk) (G2f07@bless (list (list 'call/cc (list 'lambda (list G350b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3503@con) (G34f6@gen-clauses G3503@con G350b@outerk G3504@clause*)) (cons 'lambda (cons '() (cons G3505@b G3506@b*)))))))))) (gensym))) G34f9@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G34f7@t))) (G2f51@syntax-dispatch G34f7@t '(_ (any . each-any) any . each-any)))) G34f3@x))) '#f))) (set! G2f21@define-enumeration-macro (lambda (G356d@stx) ((lambda (G3570@set? G3572@remove-dups) (begin (set! G3570@set? (lambda (G3589@x) (or (null? G3589@x) (and (not (memq (car G3589@x) (cdr G3589@x))) (G3570@set? (cdr G3589@x)))))) (set! G3572@remove-dups (lambda (G3587@ls) (if (null? G3587@ls) '() (cons (car G3587@ls) (G3572@remove-dups (remq (car G3587@ls) (cdr G3587@ls))))))) ((lambda (G3573@t) ((lambda (G3575@ls/false) (if (and G3575@ls/false (apply (lambda (G3577@name G3578@id* G3579@maker) (and (G2d52@id? G3577@name) (G2d52@id? G3579@maker) (for-all G2d52@id? G3578@id*))) G3575@ls/false)) (apply (lambda (G357d@name G357e@id* G357f@maker) ((lambda (G3583@name* G3584@mk) (G2f07@bless (list 'begin (list 'define G3584@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3583@name*)))) (list 'define-syntax G357d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3583@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G357d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G357f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G357f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3583@name*)) (cons 'syntax-violation (cons (list 'quote G357f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3584@mk '('(n* ...)))))))))))) (G3572@remove-dups (G3042@syntax->datum G357e@id*)) (gensym))) G3575@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3573@t))) (G2f51@syntax-dispatch G3573@t '(_ any each-any any)))) G356d@stx))) '#f '#f))) (set! G2f23@time-macro (lambda (G358b@stx) ((lambda (G358d@t) ((lambda (G358f@ls/false) (if G358f@ls/false (apply (lambda (G3591@expr) ((lambda (G3593@str) (G2f07@bless (list 'time-it G3593@str (list 'lambda '() G3591@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3597@G3595 G3598@G3596) ((lambda (G359b@e G359c@p) (begin (write (G3042@syntax->datum G3591@expr) G359c@p) (G359b@e))) G3598@G3596 G3597@G3595))))) G358f@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G358d@t))) (G2f51@syntax-dispatch G358d@t '(_ any)))) G358b@stx))) (set! G2f25@delay-macro (lambda (G359f@stx) ((lambda (G35a1@t) ((lambda (G35a3@ls/false) (if G35a3@ls/false (apply (lambda (G35a5@expr) (G2f07@bless (list 'make-promise (list 'lambda '() G35a5@expr)))) G35a3@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G35a1@t))) (G2f51@syntax-dispatch G35a1@t '(_ any)))) G359f@stx))) (set! G2f27@assert-macro (lambda (G35a7@stx) ((lambda (G35a9@t) ((lambda (G35ab@ls/false) (if G35ab@ls/false (apply (lambda (G35ad@expr) ((lambda (G35af@pos) (G2f07@bless (list 'unless G35ad@expr (list 'assertion-error (list 'quote G35ad@expr) (list 'quote G35af@pos))))) (or (G3034@expression-position G35a7@stx) (G3034@expression-position G35ad@expr)))) G35ab@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G35a9@t))) (G2f51@syntax-dispatch G35a9@t '(_ any)))) G35a7@stx))) (set! G2f29@endianness-macro (lambda (G35b1@stx) ((lambda (G35b3@t) ((lambda (G35b5@ls/false) (if G35b5@ls/false (apply (lambda (G35b7@e) ((lambda (G35b9@t) (if (memv G35b9@t '(little)) (G2f07@bless ''little) (if (memv G35b9@t '(big)) (G2f07@bless ''big) (G303c@syntax-violation '#f '"endianness must be big or little" G35b1@stx)))) (G3042@syntax->datum G35b7@e))) G35b5@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G35b3@t))) (G2f51@syntax-dispatch G35b3@t '(_ any)))) G35b1@stx))) (set! G2f2b@identifier-syntax-macro (lambda (G35bb@stx) ((lambda (G35bd@t) ((lambda (G35bf@ls/false) (if G35bf@ls/false (apply (lambda (G35c1@expr) (G2f07@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35c1@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35c1@expr) '((syntax (e* ...)))))))))) G35bf@ls/false) ((lambda (G35c3@t) ((lambda (G35c5@ls/false) (if (and G35c5@ls/false (apply (lambda (G35c7@id1 G35c8@expr1 G35c9@id2 G35ca@expr2 G35cb@expr3) (and (G2d52@id? G35c7@id1) (G2d52@id? G35c9@id2) (G2d52@id? G35ca@expr2))) G35c5@ls/false)) (apply (lambda (G35d1@id1 G35d2@expr1 G35d3@id2 G35d4@expr2 G35d5@expr3) (G2f07@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35d2@expr1)) (list (list 'set! 'id G35d4@expr2) (list 'syntax G35d5@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35d2@expr1 '(e* ...))))))))) G35c5@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G35c3@t))) (G2f51@syntax-dispatch G35c3@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35bd@t))) (G2f51@syntax-dispatch G35bd@t '(_ any)))) G35bb@stx))) (set! G2f2d@do-macro (lambda (G35db@stx) ((lambda (G35de@bind) (begin (set! G35de@bind (lambda (G35f5@x) ((lambda (G35f7@t) ((lambda (G35f9@ls/false) (if G35f9@ls/false (apply (lambda (G35fb@x G35fc@init) (list G35fb@x G35fc@init G35fb@x)) G35f9@ls/false) ((lambda (G35ff@t) ((lambda (G3601@ls/false) (if G3601@ls/false (apply (lambda (G3603@x G3604@init G3605@step) (list G3603@x G3604@init G3605@step)) G3601@ls/false) ((lambda (G3609@t) ((lambda (G360b@ls/false) (if G360b@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid binding" G35db@stx)) G360b@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3609@t))) (G2f51@syntax-dispatch G3609@t '_))) G35ff@t))) (G2f51@syntax-dispatch G35ff@t '(any any any)))) G35f7@t))) (G2f51@syntax-dispatch G35f7@t '(any any)))) G35f5@x))) ((lambda (G35df@t) ((lambda (G35e1@ls/false) (if G35e1@ls/false (apply (lambda (G35e3@binding* G35e4@test G35e5@expr* G35e6@command*) ((lambda (G35eb@t) ((lambda (G35ed@ls/false) (if G35ed@ls/false (apply (lambda (G35ef@x* G35f0@init* G35f1@step*) (if (G2d5c@valid-bound-ids? G35ef@x*) (G2f07@bless (list 'letrec (list (list 'loop (list 'lambda G35ef@x* (list 'if G35e4@test (cons 'begin (cons '(if #f #f) G35e5@expr*)) (cons 'begin (append G35e6@command* (list (cons 'loop G35f1@step*)))))))) (cons 'loop G35f0@init*))) (G303c@syntax-violation '#f '"invalid bindings" G35db@stx))) G35ed@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G35eb@t))) (G2f51@syntax-dispatch G35eb@t '#(each (any any any))))) (map G35de@bind G35e3@binding*))) G35e1@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G35df@t))) (G2f51@syntax-dispatch G35df@t '(_ each-any (any . each-any) . each-any)))) G35db@stx))) '#f))) (set! G2f2f@let*-macro (lambda (G360d@stx) ((lambda (G360f@t) ((lambda (G3611@ls/false) (if (and G3611@ls/false (apply (lambda (G3613@lhs* G3614@rhs* G3615@b G3616@b*) (for-all G2d52@id? G3613@lhs*)) G3611@ls/false)) (apply (lambda (G361b@lhs* G361c@rhs* G361d@b G361e@b*) (G2f07@bless ((letrec ((G3623@f (lambda (G3625@x*) (if (null? G3625@x*) (cons 'let (cons '() (cons G361d@b G361e@b*))) (list 'let (list (car G3625@x*)) (G3623@f (cdr G3625@x*))))))) G3623@f) (map list G361b@lhs* G361c@rhs*)))) G3611@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G360f@t))) (G2f51@syntax-dispatch G360f@t '(_ #(each (any any)) any . each-any)))) G360d@stx))) (set! G2f31@or-macro (lambda (G3627@stx) ((lambda (G3629@t) ((lambda (G362b@ls/false) (if G362b@ls/false (apply (lambda () '#f) G362b@ls/false) ((lambda (G362d@t) ((lambda (G362f@ls/false) (if G362f@ls/false (apply (lambda (G3631@e G3632@e*) (G2f07@bless ((letrec ((G3635@f (lambda (G3637@e G3638@e*) (if (null? G3638@e*) (list 'begin '#f G3637@e) (list 'let (list (list 't G3637@e)) (list 'if 't 't (G3635@f (car G3638@e*) (cdr G3638@e*)))))))) G3635@f) G3631@e G3632@e*))) G362f@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G362d@t))) (G2f51@syntax-dispatch G362d@t '(_ any . each-any)))) G3629@t))) (G2f51@syntax-dispatch G3629@t '(_)))) G3627@stx))) (set! G2f33@and-macro (lambda (G363b@stx) ((lambda (G363d@t) ((lambda (G363f@ls/false) (if G363f@ls/false (apply (lambda () '#t) G363f@ls/false) ((lambda (G3641@t) ((lambda (G3643@ls/false) (if G3643@ls/false (apply (lambda (G3645@e G3646@e*) (G2f07@bless ((letrec ((G3649@f (lambda (G364b@e G364c@e*) (if (null? G364c@e*) (list 'begin '#f G364b@e) (cons 'if (cons G364b@e (cons (G3649@f (car G364c@e*) (cdr G364c@e*)) '(#f)))))))) G3649@f) G3645@e G3646@e*))) G3643@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3641@t))) (G2f51@syntax-dispatch G3641@t '(_ any . each-any)))) G363d@t))) (G2f51@syntax-dispatch G363d@t '(_)))) G363b@stx))) (set! G2f35@cond-macro (lambda (G364f@stx) ((lambda (G3651@t) ((lambda (G3653@ls/false) (if G3653@ls/false (apply (lambda (G3655@cls G3656@cls*) (G2f07@bless ((letrec ((G3659@f (lambda (G365b@cls G365c@cls*) (if (null? G365c@cls*) ((lambda (G365f@t) ((lambda (G3661@ls/false) (if G3661@ls/false (apply (lambda (G3663@e G3664@e*) (cons 'begin (cons G3663@e G3664@e*))) G3661@ls/false) ((lambda (G3667@t) ((lambda (G3669@ls/false) (if G3669@ls/false (apply (lambda (G366b@e G366c@p) (list 'let (list (list 't G366b@e)) (list 'if 't (cons G366c@p '(t))))) G3669@ls/false) ((lambda (G366f@t) ((lambda (G3671@ls/false) (if G3671@ls/false (apply (lambda (G3673@e) (cons 'or (cons G3673@e '((if #f #f))))) G3671@ls/false) ((lambda (G3675@t) ((lambda (G3677@ls/false) (if G3677@ls/false (apply (lambda (G3679@e G367a@e*) (list 'if G3679@e (cons 'begin G367a@e*))) G3677@ls/false) ((lambda (G367d@t) ((lambda (G367f@ls/false) (if G367f@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid last clause" G364f@stx)) G367f@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G367d@t))) (G2f51@syntax-dispatch G367d@t '_))) G3675@t))) (G2f51@syntax-dispatch G3675@t '(any . each-any)))) G366f@t))) (G2f51@syntax-dispatch G366f@t '(any)))) G3667@t))) (G2f51@syntax-dispatch G3667@t '(any #(scheme-id =>) any)))) G365f@t))) (G2f51@syntax-dispatch G365f@t '(#(scheme-id else) any . each-any)))) G365b@cls) ((lambda (G3681@t) ((lambda (G3683@ls/false) (if G3683@ls/false (apply (lambda (G3685@e G3686@e*) (G303c@syntax-violation '#f '"incorrect position of keyword else" G364f@stx)) G3683@ls/false) ((lambda (G3689@t) ((lambda (G368b@ls/false) (if G368b@ls/false (apply (lambda (G368d@e G368e@p) (list 'let (list (list 't G368d@e)) (list 'if 't (cons G368e@p '(t)) (G3659@f (car G365c@cls*) (cdr G365c@cls*))))) G368b@ls/false) ((lambda (G3691@t) ((lambda (G3693@ls/false) (if G3693@ls/false (apply (lambda (G3695@e) (list 'or G3695@e (G3659@f (car G365c@cls*) (cdr G365c@cls*)))) G3693@ls/false) ((lambda (G3697@t) ((lambda (G3699@ls/false) (if G3699@ls/false (apply (lambda (G369b@e G369c@e*) (list 'if G369b@e (cons 'begin G369c@e*) (G3659@f (car G365c@cls*) (cdr G365c@cls*)))) G3699@ls/false) ((lambda (G369f@t) ((lambda (G36a1@ls/false) (if G36a1@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid last clause" G364f@stx)) G36a1@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G369f@t))) (G2f51@syntax-dispatch G369f@t '_))) G3697@t))) (G2f51@syntax-dispatch G3697@t '(any . each-any)))) G3691@t))) (G2f51@syntax-dispatch G3691@t '(any)))) G3689@t))) (G2f51@syntax-dispatch G3689@t '(any #(scheme-id =>) any)))) G3681@t))) (G2f51@syntax-dispatch G3681@t '(#(scheme-id else) any . each-any)))) G365b@cls))))) G3659@f) G3655@cls G3656@cls*))) G3653@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3651@t))) (G2f51@syntax-dispatch G3651@t '(_ any . each-any)))) G364f@stx))) (set! G2f37@do-include (lambda (G36a3@stx G36a4@id G36a5@filename) ((lambda (G36a9@filename) (begin (if (not (and (string? G36a9@filename) (G2d52@id? G36a4@id))) (G303c@syntax-violation '#f '"invalid syntax" G36a3@stx) (void)) (cons (G2f07@bless 'begin) (with-input-from-file G36a9@filename (lambda () ((letrec ((G36ab@f (lambda (G36ad@ls) ((lambda (G36af@x) (if (eof-object? G36af@x) (reverse G36ad@ls) (G36ab@f (cons (G2d30@datum->stx G36a4@id G36af@x) G36ad@ls)))) (G28e1@G280a@read-annotated))))) G36ab@f) '())))))) (G2d68@stx->datum G36a5@filename)))) (set! G2f39@include-macro (lambda (G36b1@e) ((lambda (G36b3@t) ((lambda (G36b5@ls/false) (if G36b5@ls/false (apply (lambda (G36b7@id G36b8@filename) (G2f37@do-include G36b1@e G36b7@id G36b8@filename)) G36b5@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G36b3@t))) (G2f51@syntax-dispatch G36b3@t '(any any)))) G36b1@e))) (set! G2f3b@include-into-macro (lambda (G36bb@e) ((lambda (G36bd@t) ((lambda (G36bf@ls/false) (if G36bf@ls/false (apply (lambda (G36c1@id G36c2@filename) (G2f37@do-include G36bb@e G36c1@id G36c2@filename)) G36bf@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G36bd@t))) (G2f51@syntax-dispatch G36bd@t '(_ any any)))) G36bb@e))) (set! G2f3d@syntax-rules-macro (lambda (G36c5@e) ((lambda (G36c7@t) ((lambda (G36c9@ls/false) (if G36c9@ls/false (apply (lambda (G36cb@lits G36cc@pat* G36cd@tmp*) (begin (G2f57@verify-literals G36cb@lits G36c5@e) (G2f07@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36cb@lits (map (lambda (G36d1@pat G36d2@tmp) ((lambda (G36d5@t) ((lambda (G36d7@ls/false) (if G36d7@ls/false (apply (lambda (G36d9@rest) (list (cons 'g G36d9@rest) (list 'syntax G36d2@tmp))) G36d7@ls/false) ((lambda (G36db@t) ((lambda (G36dd@ls/false) (if G36dd@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid syntax-rules pattern" G36c5@e G36d1@pat)) G36dd@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G36db@t))) (G2f51@syntax-dispatch G36db@t '_))) G36d5@t))) (G2f51@syntax-dispatch G36d5@t '(_ . any)))) G36d1@pat)) G36cc@pat* G36cd@tmp*)))))))) G36c9@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G36c7@t))) (G2f51@syntax-dispatch G36c7@t '(_ each-any . #(each (any any)))))) G36c5@e))) (set! G2f3f@quasiquote-macro ((lambda () ((lambda (G36e0@datum G36fe@quasicons* G3700@quasicons G3702@quasiappend G3704@quasivector G3706@vquasi G3708@quasi) (begin (set! G36e0@datum (lambda (G37e3@x) (list (G2edb@scheme-stx 'quote) (G2d3a@mkstx G37e3@x '() '() '())))) (set! G36fe@quasicons* (lambda (G37db@x G37dc@y) ((letrec ((G37df@f (lambda (G37e1@x) (if (null? G37e1@x) G37dc@y (G3700@quasicons (car G37e1@x) (G37df@f (cdr G37e1@x))))))) G37df@f) G37db@x))) (set! G3700@quasicons (lambda (G37b5@x G37b6@y) ((lambda (G37b9@t) ((lambda (G37bb@ls/false) (if G37bb@ls/false (apply (lambda (G37bd@dy) ((lambda (G37bf@t) ((lambda (G37c1@ls/false) (if G37c1@ls/false (apply (lambda (G37c3@dx) (list (G2edb@scheme-stx 'quote) (cons G37c3@dx G37bd@dy))) G37c1@ls/false) ((lambda (G37c5@t) ((lambda (G37c7@ls/false) (if G37c7@ls/false (apply (lambda () ((lambda (G37c9@t) ((lambda (G37cb@ls/false) (if G37cb@ls/false (apply (lambda () (list (G2edb@scheme-stx 'list) G37b5@x)) G37cb@ls/false) ((lambda (G37cd@t) ((lambda (G37cf@ls/false) (if G37cf@ls/false (apply (lambda () (list (G2edb@scheme-stx 'cons) G37b5@x G37b6@y)) G37cf@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G37cd@t))) (G2f51@syntax-dispatch G37cd@t '_))) G37c9@t))) (G2f51@syntax-dispatch G37c9@t '()))) G37bd@dy)) G37c7@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G37c5@t))) (G2f51@syntax-dispatch G37c5@t '_))) G37bf@t))) (G2f51@syntax-dispatch G37bf@t '(#(scheme-id quote) any)))) G37b5@x)) G37bb@ls/false) ((lambda (G37d1@t) ((lambda (G37d3@ls/false) (if G37d3@ls/false (apply (lambda (G37d5@stuff) (cons* (G2edb@scheme-stx 'list) G37b5@x G37d5@stuff)) G37d3@ls/false) ((lambda (G37d7@t) ((lambda (G37d9@ls/false) (if G37d9@ls/false (apply (lambda () (list (G2edb@scheme-stx 'cons) G37b5@x G37b6@y)) G37d9@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G37d7@t))) (G2f51@syntax-dispatch G37d7@t '_))) G37d1@t))) (G2f51@syntax-dispatch G37d1@t '(#(scheme-id list) . each-any)))) G37b9@t))) (G2f51@syntax-dispatch G37b9@t '(#(scheme-id quote) any)))) G37b6@y))) (set! G3702@quasiappend (lambda (G379b@x G379c@y) ((lambda (G379f@ls) (if (null? G379f@ls) (list (G2edb@scheme-stx 'quote) '()) (if (null? (cdr G379f@ls)) (car G379f@ls) (cons* (G2edb@scheme-stx 'append) G379f@ls)))) ((letrec ((G37a1@f (lambda (G37a3@x) (if (null? G37a3@x) ((lambda (G37a5@t) ((lambda (G37a7@ls/false) (if G37a7@ls/false (apply (lambda () '()) G37a7@ls/false) ((lambda (G37a9@t) ((lambda (G37ab@ls/false) (if G37ab@ls/false (apply (lambda () (list G379c@y)) G37ab@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G37a9@t))) (G2f51@syntax-dispatch G37a9@t '_))) G37a5@t))) (G2f51@syntax-dispatch G37a5@t '(#(scheme-id quote) ())))) G379c@y) ((lambda (G37ad@t) ((lambda (G37af@ls/false) (if G37af@ls/false (apply (lambda () (G37a1@f (cdr G37a3@x))) G37af@ls/false) ((lambda (G37b1@t) ((lambda (G37b3@ls/false) (if G37b3@ls/false (apply (lambda () (cons (car G37a3@x) (G37a1@f (cdr G37a3@x)))) G37b3@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G37b1@t))) (G2f51@syntax-dispatch G37b1@t '_))) G37ad@t))) (G2f51@syntax-dispatch G37ad@t '(#(scheme-id quote) ())))) (car G37a3@x)))))) G37a1@f) G379b@x)))) (set! G3704@quasivector (lambda (G3769@x) ((lambda (G376b@pat-x) ((lambda (G376d@t) ((lambda (G376f@ls/false) (if G376f@ls/false (apply (lambda (G3771@x*) (list (G2edb@scheme-stx 'quote) (list->vector G3771@x*))) G376f@ls/false) ((lambda (G3773@t) ((lambda (G3775@ls/false) (if G3775@ls/false (apply (lambda () ((letrec ((G3777@f (lambda (G3779@x G377a@k) ((lambda (G377d@t) ((lambda (G377f@ls/false) (if G377f@ls/false (apply (lambda (G3781@x*) (G377a@k (map (lambda (G3783@x) (list (G2edb@scheme-stx 'quote) G3783@x)) G3781@x*))) G377f@ls/false) ((lambda (G3785@t) ((lambda (G3787@ls/false) (if G3787@ls/false (apply (lambda (G3789@x*) (G377a@k G3789@x*)) G3787@ls/false) ((lambda (G378b@t) ((lambda (G378d@ls/false) (if G378d@ls/false (apply (lambda (G378f@x G3790@y) (G3777@f G3790@y (lambda (G3793@ls) (G377a@k (cons G378f@x G3793@ls))))) G378d@ls/false) ((lambda (G3795@t) ((lambda (G3797@ls/false) (if G3797@ls/false (apply (lambda () (list (G2edb@scheme-stx 'list->vector) G376b@pat-x)) G3797@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3795@t))) (G2f51@syntax-dispatch G3795@t '_))) G378b@t))) (G2f51@syntax-dispatch G378b@t '(#(scheme-id cons) any any)))) G3785@t))) (G2f51@syntax-dispatch G3785@t '(#(scheme-id list) . each-any)))) G377d@t))) (G2f51@syntax-dispatch G377d@t '(#(scheme-id quote) each-any)))) G3779@x)))) G3777@f) G3769@x (lambda (G3799@ls) (cons* (G2edb@scheme-stx 'vector) G3799@ls)))) G3775@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3773@t))) (G2f51@syntax-dispatch G3773@t '_))) G376d@t))) (G2f51@syntax-dispatch G376d@t '(#(scheme-id quote) each-any)))) G376b@pat-x)) G3769@x))) (set! G3706@vquasi (lambda (G3747@p G3748@lev) ((lambda (G374b@t) ((lambda (G374d@ls/false) (if G374d@ls/false (apply (lambda (G374f@p G3750@q) ((lambda (G3753@t) ((lambda (G3755@ls/false) (if G3755@ls/false (apply (lambda (G3757@p) (if (= G3748@lev '0) (G36fe@quasicons* G3757@p (G3706@vquasi G3750@q G3748@lev)) (G3700@quasicons (G3700@quasicons (G36e0@datum 'unquote) (G3708@quasi G3757@p (- G3748@lev '1))) (G3706@vquasi G3750@q G3748@lev)))) G3755@ls/false) ((lambda (G3759@t) ((lambda (G375b@ls/false) (if G375b@ls/false (apply (lambda (G375d@p) (if (= G3748@lev '0) (G3702@quasiappend G375d@p (G3706@vquasi G3750@q G3748@lev)) (G3700@quasicons (G3700@quasicons (G36e0@datum 'unquote-splicing) (G3708@quasi G375d@p (- G3748@lev '1))) (G3706@vquasi G3750@q G3748@lev)))) G375b@ls/false) ((lambda (G375f@t) ((lambda (G3761@ls/false) (if G3761@ls/false (apply (lambda (G3763@p) (G3700@quasicons (G3708@quasi G3763@p G3748@lev) (G3706@vquasi G3750@q G3748@lev))) G3761@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G375f@t))) (G2f51@syntax-dispatch G375f@t 'any))) G3759@t))) (G2f51@syntax-dispatch G3759@t '(#(scheme-id unquote-splicing) . each-any)))) G3753@t))) (G2f51@syntax-dispatch G3753@t '(#(scheme-id unquote) . each-any)))) G374f@p)) G374d@ls/false) ((lambda (G3765@t) ((lambda (G3767@ls/false) (if G3767@ls/false (apply (lambda () (list (G2edb@scheme-stx 'quote) '())) G3767@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3765@t))) (G2f51@syntax-dispatch G3765@t '()))) G374b@t))) (G2f51@syntax-dispatch G374b@t '(any . any)))) G3747@p))) (set! G3708@quasi (lambda (G3711@p G3712@lev) ((lambda (G3715@t) ((lambda (G3717@ls/false) (if G3717@ls/false (apply (lambda (G3719@p) (if (= G3712@lev '0) G3719@p (G3700@quasicons (G36e0@datum 'unquote) (G3708@quasi (list G3719@p) (- G3712@lev '1))))) G3717@ls/false) ((lambda (G371b@t) ((lambda (G371d@ls/false) (if G371d@ls/false (apply (lambda (G371f@p G3720@q) (if (= G3712@lev '0) (G36fe@quasicons* G371f@p (G3708@quasi G3720@q G3712@lev)) (G3700@quasicons (G3700@quasicons (G36e0@datum 'unquote) (G3708@quasi G371f@p (- G3712@lev '1))) (G3708@quasi G3720@q G3712@lev)))) G371d@ls/false) ((lambda (G3723@t) ((lambda (G3725@ls/false) (if G3725@ls/false (apply (lambda (G3727@p G3728@q) (if (= G3712@lev '0) (G3702@quasiappend G3727@p (G3708@quasi G3728@q G3712@lev)) (G3700@quasicons (G3700@quasicons (G36e0@datum 'unquote-splicing) (G3708@quasi G3727@p (- G3712@lev '1))) (G3708@quasi G3728@q G3712@lev)))) G3725@ls/false) ((lambda (G372b@t) ((lambda (G372d@ls/false) (if G372d@ls/false (apply (lambda (G372f@p) (G3700@quasicons (G36e0@datum 'quasiquote) (G3708@quasi (list G372f@p) (+ G3712@lev '1)))) G372d@ls/false) ((lambda (G3731@t) ((lambda (G3733@ls/false) (if G3733@ls/false (apply (lambda (G3735@p G3736@q) (G3700@quasicons (G3708@quasi G3735@p G3712@lev) (G3708@quasi G3736@q G3712@lev))) G3733@ls/false) ((lambda (G3739@t) ((lambda (G373b@ls/false) (if (and G373b@ls/false (apply (lambda (G373d@x) (not (G2d1a@stx? G373d@x))) G373b@ls/false)) (apply (lambda (G373f@x) (G3704@quasivector (G3706@vquasi G373f@x G3712@lev))) G373b@ls/false) ((lambda (G3741@t) ((lambda (G3743@ls/false) (if G3743@ls/false (apply (lambda (G3745@p) (list (G2edb@scheme-stx 'quote) G3745@p)) G3743@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3741@t))) (G2f51@syntax-dispatch G3741@t 'any))) G3739@t))) (G2f51@syntax-dispatch G3739@t '#(vector each-any)))) G3731@t))) (G2f51@syntax-dispatch G3731@t '(any . any)))) G372b@t))) (G2f51@syntax-dispatch G372b@t '(#(scheme-id quasiquote) any)))) G3723@t))) (G2f51@syntax-dispatch G3723@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G371b@t))) (G2f51@syntax-dispatch G371b@t '((#(scheme-id unquote) . each-any) . any)))) G3715@t))) (G2f51@syntax-dispatch G3715@t '(#(scheme-id unquote) any)))) G3711@p))) (lambda (G3709@x) ((lambda (G370b@t) ((lambda (G370d@ls/false) (if G370d@ls/false (apply (lambda (G370f@e) (G3708@quasi G370f@e '0)) G370d@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G370b@t))) (G2f51@syntax-dispatch G370b@t '(_ any)))) G3709@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f41@quasisyntax-macro ((lambda () ((lambda (G37e6@quasi) (begin (set! G37e6@quasi (lambda (G37fe@p G37ff@lev) ((lambda (G3802@t) ((lambda (G3804@ls/false) (if G3804@ls/false (apply (lambda (G3806@p) (if (= G37ff@lev '0) ((lambda (G3808@g) (values (list G3808@g) (list G3806@p) G3808@g)) (gensym)) (call-with-values (lambda () (G37e6@quasi G3806@p (- G37ff@lev '1))) (lambda (G380d@G380a G380e@G380b G380f@G380c) ((lambda (G3813@p G3814@rhs* G3815@lhs*) (values G3815@lhs* G3814@rhs* (list 'unsyntax G3813@p))) G380f@G380c G380e@G380b G380d@G380a))))) G3804@ls/false) ((lambda (G3819@t) ((lambda (G381b@ls/false) (if (and G381b@ls/false (apply (lambda () (= G37ff@lev '0)) G381b@ls/false)) (apply (lambda () (G303c@syntax-violation '#f '"incorrect use of unsyntax" G37fe@p)) G381b@ls/false) ((lambda (G381d@t) ((lambda (G381f@ls/false) (if G381f@ls/false (apply (lambda (G3821@p* G3822@q) (call-with-values (lambda () (G37e6@quasi G3822@q G37ff@lev)) (lambda (G3828@G3825 G3829@G3826 G382a@G3827) ((lambda (G382e@q G382f@rhs* G3830@lhs*) (if (= G37ff@lev '0) ((lambda (G3834@g*) (values (append G3834@g* G3830@lhs*) (append G3821@p* G382f@rhs*) (append G3834@g* G382e@q))) (map (lambda (G3836@x) (gensym)) G3821@p*)) (call-with-values (lambda () (G37e6@quasi G3821@p* (- G37ff@lev '1))) (lambda (G383b@G3838 G383c@G3839 G383d@G383a) ((lambda (G3841@p* G3842@rhs2* G3843@lhs2*) (values (append G3843@lhs2* G3830@lhs*) (append G3842@rhs2* G382f@rhs*) (cons (cons 'unsyntax G3841@p*) G382e@q))) G383d@G383a G383c@G3839 G383b@G3838))))) G382a@G3827 G3829@G3826 G3828@G3825)))) G381f@ls/false) ((lambda (G3847@t) ((lambda (G3849@ls/false) (if G3849@ls/false (apply (lambda (G384b@p* G384c@q) (call-with-values (lambda () (G37e6@quasi G384c@q G37ff@lev)) (lambda (G3852@G384f G3853@G3850 G3854@G3851) ((lambda (G3858@q G3859@rhs* G385a@lhs*) (if (= G37ff@lev '0) ((lambda (G385e@g*) (values (append (map (lambda (G3860@g) (cons G3860@g '(...))) G385e@g*) G385a@lhs*) (append G384b@p* G3859@rhs*) (append (apply append (map (lambda (G3862@g) (cons G3862@g '(...))) G385e@g*)) G3858@q))) (map (lambda (G3864@x) (gensym)) G384b@p*)) (call-with-values (lambda () (G37e6@quasi G384b@p* (- G37ff@lev '1))) (lambda (G3869@G3866 G386a@G3867 G386b@G3868) ((lambda (G386f@p* G3870@rhs2* G3871@lhs2*) (values (append G3871@lhs2* G385a@lhs*) (append G3870@rhs2* G3859@rhs*) (cons (cons 'unsyntax-splicing G386f@p*) G3858@q))) G386b@G3868 G386a@G3867 G3869@G3866))))) G3854@G3851 G3853@G3850 G3852@G384f)))) G3849@ls/false) ((lambda (G3875@t) ((lambda (G3877@ls/false) (if (and G3877@ls/false (apply (lambda () (= G37ff@lev '0)) G3877@ls/false)) (apply (lambda () (G303c@syntax-violation '#f '"incorrect use of unsyntax-splicing" G37fe@p)) G3877@ls/false) ((lambda (G3879@t) ((lambda (G387b@ls/false) (if G387b@ls/false (apply (lambda (G387d@p) (call-with-values (lambda () (G37e6@quasi G387d@p (+ G37ff@lev '1))) (lambda (G3882@G387f G3883@G3880 G3884@G3881) ((lambda (G3888@p G3889@rhs* G388a@lhs*) (values G388a@lhs* G3889@rhs* (list 'quasisyntax G3888@p))) G3884@G3881 G3883@G3880 G3882@G387f)))) G387b@ls/false) ((lambda (G388e@t) ((lambda (G3890@ls/false) (if G3890@ls/false (apply (lambda (G3892@p G3893@q) (call-with-values (lambda () (G37e6@quasi G3892@p G37ff@lev)) (lambda (G389c@G3896 G389d@G3897 G389e@G3898) (call-with-values (lambda () (G37e6@quasi G3893@q G37ff@lev)) (lambda (G38a2@G3899 G38a3@G389a G38a4@G389b) ((lambda (G38a8@q G38a9@rhs2* G38aa@lhs2* G38ab@p G38ac@rhs* G38ad@lhs*) (values (append G38aa@lhs2* G38ad@lhs*) (append G38a9@rhs2* G38ac@rhs*) (cons G38ab@p G38a8@q))) G38a4@G389b G38a3@G389a G38a2@G3899 G389e@G3898 G389d@G3897 G389c@G3896)))))) G3890@ls/false) ((lambda (G38b4@t) ((lambda (G38b6@ls/false) (if G38b6@ls/false (apply (lambda (G38b8@x*) (call-with-values (lambda () (G37e6@quasi G38b8@x* G37ff@lev)) (lambda (G38bd@G38ba G38be@G38bb G38bf@G38bc) ((lambda (G38c3@x* G38c4@rhs* G38c5@lhs*) (values G38c5@lhs* G38c4@rhs* (list->vector G38c3@x*))) G38bf@G38bc G38be@G38bb G38bd@G38ba)))) G38b6@ls/false) ((lambda (G38c9@t) ((lambda (G38cb@ls/false) (if G38cb@ls/false (apply (lambda () (values '() '() G37fe@p)) G38cb@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G38c9@t))) (G2f51@syntax-dispatch G38c9@t '_))) G38b4@t))) (G2f51@syntax-dispatch G38b4@t '#(vector each-any)))) G388e@t))) (G2f51@syntax-dispatch G388e@t '(any . any)))) G3879@t))) (G2f51@syntax-dispatch G3879@t '(#(scheme-id quasisyntax) any)))) G3875@t))) (G2f51@syntax-dispatch G3875@t '#(scheme-id unsyntax-splicing)))) G3847@t))) (G2f51@syntax-dispatch G3847@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G381d@t))) (G2f51@syntax-dispatch G381d@t '((#(scheme-id unsyntax) . each-any) . any)))) G3819@t))) (G2f51@syntax-dispatch G3819@t '#(scheme-id unsyntax)))) G3802@t))) (G2f51@syntax-dispatch G3802@t '(#(scheme-id unsyntax) any)))) G37fe@p))) (lambda (G37e7@x) ((lambda (G37e9@t) ((lambda (G37eb@ls/false) (if G37eb@ls/false (apply (lambda (G37ed@e) (call-with-values (lambda () (G37e6@quasi G37ed@e '0)) (lambda (G37f2@G37ef G37f3@G37f0 G37f4@G37f1) ((lambda (G37f8@v G37f9@rhs* G37fa@lhs*) (G2f07@bless (list 'syntax-case (cons 'list G37f9@rhs*) '() (list G37fa@lhs* (list 'syntax G37f8@v))))) G37f4@G37f1 G37f3@G37f0 G37f2@G37ef)))) G37eb@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G37e9@t))) (G2f51@syntax-dispatch G37e9@t '(_ any)))) G37e7@x)))) '#f)))) (set! G2f43@define-struct-macro (lambda (G38cd@stx) (G303c@syntax-violation '#f '"define-struct not supported" G38cd@stx))) (set! G2f45@define-record-type-macro (lambda (G38cf@x) ((lambda (G38d2@id G38d4@get-record-name G38d6@get-record-constructor-name G38d8@get-record-predicate-name G38da@get-clause G38dc@foo-rtd-code G38de@parent-rtd-code G38e0@parent-rcd-code G38e2@foo-rcd-code G38e4@get-protocol-code G38e6@get-fields G38e8@get-mutator-indices G38ea@get-mutators G38ec@get-accessors G38ee@enumerate G38f0@do-define-record G38f2@verify-clauses) (begin (set! G38d2@id (lambda (G3ac5@ctxt . G3ac7@str*) (G3040@datum->syntax G3ac5@ctxt (string->symbol (apply string-append (map (lambda (G3ac9@x) (if (symbol? G3ac9@x) (symbol->string G3ac9@x) (if (string? G3ac9@x) G3ac9@x (assertion-violation 'define-record-type '"BUG")))) G3ac7@str*)))))) (set! G38d4@get-record-name (lambda (G3ab3@spec) ((lambda (G3ab5@t) ((lambda (G3ab7@ls/false) (if G3ab7@ls/false (apply (lambda (G3ab9@foo G3aba@make-foo G3abb@foo?) G3ab9@foo) G3ab7@ls/false) ((lambda (G3abf@t) ((lambda (G3ac1@ls/false) (if G3ac1@ls/false (apply (lambda (G3ac3@foo) G3ac3@foo) G3ac1@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3abf@t))) (G2f51@syntax-dispatch G3abf@t 'any))) G3ab5@t))) (G2f51@syntax-dispatch G3ab5@t '(any any any)))) G3ab3@spec))) (set! G38d6@get-record-constructor-name (lambda (G3a9f@spec) ((lambda (G3aa1@t) ((lambda (G3aa3@ls/false) (if G3aa3@ls/false (apply (lambda (G3aa5@foo G3aa6@make-foo G3aa7@foo?) G3aa6@make-foo) G3aa3@ls/false) ((lambda (G3aab@t) ((lambda (G3aad@ls/false) (if (and G3aad@ls/false (apply (lambda (G3aaf@foo) (G2d52@id? G3aaf@foo)) G3aad@ls/false)) (apply (lambda (G3ab1@foo) (G38d2@id G3ab1@foo '"make-" (G2d68@stx->datum G3ab1@foo))) G3aad@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3aab@t))) (G2f51@syntax-dispatch G3aab@t 'any))) G3aa1@t))) (G2f51@syntax-dispatch G3aa1@t '(any any any)))) G3a9f@spec))) (set! G38d8@get-record-predicate-name (lambda (G3a8b@spec) ((lambda (G3a8d@t) ((lambda (G3a8f@ls/false) (if G3a8f@ls/false (apply (lambda (G3a91@foo G3a92@make-foo G3a93@foo?) G3a93@foo?) G3a8f@ls/false) ((lambda (G3a97@t) ((lambda (G3a99@ls/false) (if (and G3a99@ls/false (apply (lambda (G3a9b@foo) (G2d52@id? G3a9b@foo)) G3a99@ls/false)) (apply (lambda (G3a9d@foo) (G38d2@id G3a9d@foo (G2d68@stx->datum G3a9d@foo) '"?")) G3a99@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a97@t))) (G2f51@syntax-dispatch G3a97@t 'any))) G3a8d@t))) (G2f51@syntax-dispatch G3a8d@t '(any any any)))) G3a8b@spec))) (set! G38da@get-clause (lambda (G3a79@id G3a7a@ls) ((lambda (G3a7d@t) ((lambda (G3a7f@ls/false) (if G3a7f@ls/false (apply (lambda () '#f) G3a7f@ls/false) ((lambda (G3a81@t) ((lambda (G3a83@ls/false) (if G3a83@ls/false (apply (lambda (G3a85@x G3a86@rest G3a87@ls) (if (G2d5a@free-id=? (G2f07@bless G3a79@id) G3a85@x) (cons G3a85@x G3a86@rest) (G38da@get-clause G3a79@id G3a87@ls))) G3a83@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a81@t))) (G2f51@syntax-dispatch G3a81@t '((any . any) . any)))) G3a7d@t))) (G2f51@syntax-dispatch G3a7d@t '()))) G3a7a@ls))) (set! G38dc@foo-rtd-code (lambda (G3a27@name G3a28@clause* G3a29@parent-rtd-code) ((lambda (G3a2e@convert-field-spec*) (begin (set! G3a2e@convert-field-spec* (lambda (G3a5f@ls) (list->vector (map (lambda (G3a61@x) ((lambda (G3a63@t) ((lambda (G3a65@ls/false) (if G3a65@ls/false (apply (lambda (G3a67@name G3a68@rest) (list 'mutable G3a67@name)) G3a65@ls/false) ((lambda (G3a6b@t) ((lambda (G3a6d@ls/false) (if G3a6d@ls/false (apply (lambda (G3a6f@name G3a70@rest) (list 'immutable G3a6f@name)) G3a6d@ls/false) ((lambda (G3a73@t) ((lambda (G3a75@ls/false) (if G3a75@ls/false (apply (lambda (G3a77@name) (list 'immutable G3a77@name)) G3a75@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a73@t))) (G2f51@syntax-dispatch G3a73@t 'any))) G3a6b@t))) (G2f51@syntax-dispatch G3a6b@t '(#(scheme-id immutable) any . any)))) G3a63@t))) (G2f51@syntax-dispatch G3a63@t '(#(scheme-id mutable) any . any)))) G3a61@x)) G3a5f@ls)))) ((lambda (G3a2f@uid-code G3a30@sealed? G3a31@opaque? G3a32@fields) (G2f07@bless (list 'make-record-type-descriptor (list 'quote G3a27@name) G3a29@parent-rtd-code G3a2f@uid-code G3a30@sealed? G3a31@opaque? G3a32@fields))) ((lambda (G3a37@t) ((lambda (G3a39@ls/false) (if G3a39@ls/false (apply (lambda () (list 'quote (gensym))) G3a39@ls/false) ((lambda (G3a3b@t) ((lambda (G3a3d@ls/false) (if G3a3d@ls/false (apply (lambda (G3a3f@uid) (list 'quote G3a3f@uid)) G3a3d@ls/false) ((lambda (G3a41@t) ((lambda (G3a43@ls/false) (if G3a43@ls/false (apply (lambda () '#f) G3a43@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a41@t))) (G2f51@syntax-dispatch G3a41@t '_))) G3a3b@t))) (G2f51@syntax-dispatch G3a3b@t '(_ any)))) G3a37@t))) (G2f51@syntax-dispatch G3a37@t '(_)))) (G38da@get-clause 'nongenerative G3a28@clause*)) ((lambda (G3a45@t) ((lambda (G3a47@ls/false) (if G3a47@ls/false (apply (lambda () '#t) G3a47@ls/false) ((lambda (G3a49@t) ((lambda (G3a4b@ls/false) (if G3a4b@ls/false (apply (lambda () '#f) G3a4b@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a49@t))) (G2f51@syntax-dispatch G3a49@t '_))) G3a45@t))) (G2f51@syntax-dispatch G3a45@t '(_ #(atom #t))))) (G38da@get-clause 'sealed G3a28@clause*)) ((lambda (G3a4d@t) ((lambda (G3a4f@ls/false) (if G3a4f@ls/false (apply (lambda () '#t) G3a4f@ls/false) ((lambda (G3a51@t) ((lambda (G3a53@ls/false) (if G3a53@ls/false (apply (lambda () '#f) G3a53@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a51@t))) (G2f51@syntax-dispatch G3a51@t '_))) G3a4d@t))) (G2f51@syntax-dispatch G3a4d@t '(_ #(atom #t))))) (G38da@get-clause 'opaque G3a28@clause*)) ((lambda (G3a55@t) ((lambda (G3a57@ls/false) (if G3a57@ls/false (apply (lambda (G3a59@field-spec*) (list 'quote (G3a2e@convert-field-spec* G3a59@field-spec*))) G3a57@ls/false) ((lambda (G3a5b@t) ((lambda (G3a5d@ls/false) (if G3a5d@ls/false (apply (lambda () ''#()) G3a5d@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a5b@t))) (G2f51@syntax-dispatch G3a5b@t '_))) G3a55@t))) (G2f51@syntax-dispatch G3a55@t '(_ . each-any)))) (G38da@get-clause 'fields G3a28@clause*))))) '#f))) (set! G38de@parent-rtd-code (lambda (G3a0f@clause*) ((lambda (G3a11@t) ((lambda (G3a13@ls/false) (if G3a13@ls/false (apply (lambda (G3a15@name) (list 'record-type-descriptor G3a15@name)) G3a13@ls/false) ((lambda (G3a17@t) ((lambda (G3a19@ls/false) (if G3a19@ls/false (apply (lambda () ((lambda (G3a1b@t) ((lambda (G3a1d@ls/false) (if G3a1d@ls/false (apply (lambda (G3a1f@rtd G3a20@rcd) G3a1f@rtd) G3a1d@ls/false) ((lambda (G3a23@t) ((lambda (G3a25@ls/false) (if G3a25@ls/false (apply (lambda () '#f) G3a25@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a23@t))) (G2f51@syntax-dispatch G3a23@t '#(atom #f)))) G3a1b@t))) (G2f51@syntax-dispatch G3a1b@t '(_ any any)))) (G38da@get-clause 'parent-rtd G3a0f@clause*))) G3a19@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a17@t))) (G2f51@syntax-dispatch G3a17@t '#(atom #f)))) G3a11@t))) (G2f51@syntax-dispatch G3a11@t '(_ any)))) (G38da@get-clause 'parent G3a0f@clause*)))) (set! G38e0@parent-rcd-code (lambda (G39f7@clause*) ((lambda (G39f9@t) ((lambda (G39fb@ls/false) (if G39fb@ls/false (apply (lambda (G39fd@name) (list 'record-constructor-descriptor G39fd@name)) G39fb@ls/false) ((lambda (G39ff@t) ((lambda (G3a01@ls/false) (if G3a01@ls/false (apply (lambda () ((lambda (G3a03@t) ((lambda (G3a05@ls/false) (if G3a05@ls/false (apply (lambda (G3a07@rtd G3a08@rcd) G3a08@rcd) G3a05@ls/false) ((lambda (G3a0b@t) ((lambda (G3a0d@ls/false) (if G3a0d@ls/false (apply (lambda () '#f) G3a0d@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3a0b@t))) (G2f51@syntax-dispatch G3a0b@t '#(atom #f)))) G3a03@t))) (G2f51@syntax-dispatch G3a03@t '(_ any any)))) (G38da@get-clause 'parent-rtd G39f7@clause*))) G3a01@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G39ff@t))) (G2f51@syntax-dispatch G39ff@t '#(atom #f)))) G39f9@t))) (G2f51@syntax-dispatch G39f9@t '(_ any)))) (G38da@get-clause 'parent G39f7@clause*)))) (set! G38e2@foo-rcd-code (lambda (G39ef@clause* G39f0@foo-rtd G39f1@protocol G39f2@parent-rcd-code) (list 'make-record-constructor-descriptor G39f0@foo-rtd G39f2@parent-rcd-code G39f1@protocol))) (set! G38e4@get-protocol-code (lambda (G39e3@clause*) ((lambda (G39e5@t) ((lambda (G39e7@ls/false) (if G39e7@ls/false (apply (lambda (G39e9@expr) G39e9@expr) G39e7@ls/false) ((lambda (G39eb@t) ((lambda (G39ed@ls/false) (if G39ed@ls/false (apply (lambda () '#f) G39ed@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G39eb@t))) (G2f51@syntax-dispatch G39eb@t '_))) G39e5@t))) (G2f51@syntax-dispatch G39e5@t '(_ any)))) (G38da@get-clause 'protocol G39e3@clause*)))) (set! G38e6@get-fields (lambda (G39d1@clause*) ((lambda (G39d3@t) ((lambda (G39d5@ls/false) (if G39d5@ls/false (apply (lambda () '()) G39d5@ls/false) ((lambda (G39d7@t) ((lambda (G39d9@ls/false) (if G39d9@ls/false (apply (lambda (G39db@f*) G39db@f*) G39d9@ls/false) ((lambda (G39dd@t) ((lambda (G39df@ls/false) (if G39df@ls/false (apply (lambda (G39e1@rest) (G38e6@get-fields G39e1@rest)) G39df@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G39dd@t))) (G2f51@syntax-dispatch G39dd@t '(_ . any)))) G39d7@t))) (G2f51@syntax-dispatch G39d7@t '((#(scheme-id fields) . each-any) . _)))) G39d3@t))) (G2f51@syntax-dispatch G39d3@t '()))) G39d1@clause*))) (set! G38e8@get-mutator-indices (lambda (G39b9@fields) ((letrec ((G39bb@f (lambda (G39bd@fields G39be@i) ((lambda (G39c1@t) ((lambda (G39c3@ls/false) (if G39c3@ls/false (apply (lambda () '()) G39c3@ls/false) ((lambda (G39c5@t) ((lambda (G39c7@ls/false) (if G39c7@ls/false (apply (lambda (G39c9@rest) (cons G39be@i (G39bb@f G39c9@rest (+ G39be@i '1)))) G39c7@ls/false) ((lambda (G39cb@t) ((lambda (G39cd@ls/false) (if G39cd@ls/false (apply (lambda (G39cf@rest) (G39bb@f G39cf@rest (+ G39be@i '1))) G39cd@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G39cb@t))) (G2f51@syntax-dispatch G39cb@t '(_ . any)))) G39c5@t))) (G2f51@syntax-dispatch G39c5@t '((#(scheme-id mutable) . _) . any)))) G39c1@t))) (G2f51@syntax-dispatch G39c1@t '()))) G39bd@fields)))) G39bb@f) G39b9@fields '0))) (set! G38ea@get-mutators (lambda (G398f@foo G3990@fields) ((lambda (G3994@gen-name) (begin (set! G3994@gen-name (lambda (G39b7@x) (G3040@datum->syntax G398f@foo (string->symbol (string-append (symbol->string (G3042@syntax->datum G398f@foo)) '"-" (symbol->string (G3042@syntax->datum G39b7@x)) '"-set!"))))) ((letrec ((G3995@f (lambda (G3997@fields) ((lambda (G3999@t) ((lambda (G399b@ls/false) (if G399b@ls/false (apply (lambda () '()) G399b@ls/false) ((lambda (G399d@t) ((lambda (G399f@ls/false) (if G399f@ls/false (apply (lambda (G39a1@name G39a2@accessor G39a3@mutator G39a4@rest) (cons G39a3@mutator (G3995@f G39a4@rest))) G399f@ls/false) ((lambda (G39a9@t) ((lambda (G39ab@ls/false) (if G39ab@ls/false (apply (lambda (G39ad@name G39ae@rest) (cons (G3994@gen-name G39ad@name) (G3995@f G39ae@rest))) G39ab@ls/false) ((lambda (G39b1@t) ((lambda (G39b3@ls/false) (if G39b3@ls/false (apply (lambda (G39b5@rest) (G3995@f G39b5@rest)) G39b3@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G39b1@t))) (G2f51@syntax-dispatch G39b1@t '(_ . any)))) G39a9@t))) (G2f51@syntax-dispatch G39a9@t '((#(scheme-id mutable) any) . any)))) G399d@t))) (G2f51@syntax-dispatch G399d@t '((#(scheme-id mutable) any any any) . any)))) G3999@t))) (G2f51@syntax-dispatch G3999@t '()))) G3997@fields)))) G3995@f) G3990@fields))) '#f))) (set! G38ec@get-accessors (lambda (G394b@foo G394c@fields) ((lambda (G3950@gen-name) (begin (set! G3950@gen-name (lambda (G398d@x) (G3040@datum->syntax G394b@foo (string->symbol (string-append (symbol->string (G3042@syntax->datum G394b@foo)) '"-" (symbol->string (G3042@syntax->datum G398d@x))))))) (map (lambda (G3951@field) ((lambda (G3953@t) ((lambda (G3955@ls/false) (if (and G3955@ls/false (apply (lambda (G3957@name G3958@accessor G3959@mutator) (G2d52@id? G3958@accessor)) G3955@ls/false)) (apply (lambda (G395d@name G395e@accessor G395f@mutator) G395e@accessor) G3955@ls/false) ((lambda (G3963@t) ((lambda (G3965@ls/false) (if (and G3965@ls/false (apply (lambda (G3967@name G3968@accessor) (G2d52@id? G3968@accessor)) G3965@ls/false)) (apply (lambda (G396b@name G396c@accessor) G396c@accessor) G3965@ls/false) ((lambda (G396f@t) ((lambda (G3971@ls/false) (if (and G3971@ls/false (apply (lambda (G3973@name) (G2d52@id? G3973@name)) G3971@ls/false)) (apply (lambda (G3975@name) (G3950@gen-name G3975@name)) G3971@ls/false) ((lambda (G3977@t) ((lambda (G3979@ls/false) (if (and G3979@ls/false (apply (lambda (G397b@name) (G2d52@id? G397b@name)) G3979@ls/false)) (apply (lambda (G397d@name) (G3950@gen-name G397d@name)) G3979@ls/false) ((lambda (G397f@t) ((lambda (G3981@ls/false) (if (and G3981@ls/false (apply (lambda (G3983@name) (G2d52@id? G3983@name)) G3981@ls/false)) (apply (lambda (G3985@name) (G3950@gen-name G3985@name)) G3981@ls/false) ((lambda (G3987@t) ((lambda (G3989@ls/false) (if G3989@ls/false (apply (lambda (G398b@others) (G303c@syntax-violation '#f '"invalid field spec" G3951@field)) G3989@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3987@t))) (G2f51@syntax-dispatch G3987@t 'any))) G397f@t))) (G2f51@syntax-dispatch G397f@t 'any))) G3977@t))) (G2f51@syntax-dispatch G3977@t '(#(scheme-id immutable) any)))) G396f@t))) (G2f51@syntax-dispatch G396f@t '(#(scheme-id mutable) any)))) G3963@t))) (G2f51@syntax-dispatch G3963@t '(#(scheme-id immutable) any any)))) G3953@t))) (G2f51@syntax-dispatch G3953@t '(#(scheme-id mutable) any any any)))) G3951@field)) G394c@fields))) '#f))) (set! G38ee@enumerate (lambda (G3943@ls) ((letrec ((G3945@f (lambda (G3947@ls G3948@i) (if (null? G3947@ls) '() (cons G3948@i (G3945@f (cdr G3947@ls) (+ G3948@i '1))))))) G3945@f) G3943@ls '0))) (set! G38f0@do-define-record (lambda (G391b@namespec G391c@clause*) ((lambda (G391f@foo) ((lambda (G3921@foo-rtd) ((lambda (G3923@foo-rcd) ((lambda (G3925@protocol) ((lambda (G3927@make-foo) ((lambda (G3929@fields) ((lambda (G392b@idx*) ((lambda (G392d@foo-x*) ((lambda (G392f@set-foo-x!*) ((lambda (G3931@set-foo-idx*) ((lambda (G3933@foo?) ((lambda (G3935@foo-rtd-code) ((lambda (G3937@foo-rcd-code) ((lambda (G3939@protocol-code) ((lambda () (G2f07@bless (cons 'begin (cons (list 'define G3921@foo-rtd G3935@foo-rtd-code) (cons (list 'define G3925@protocol G3939@protocol-code) (cons (list 'define G3923@foo-rcd G3937@foo-rcd-code) (cons (list 'define-syntax G391f@foo (list 'list ''$rtd (list 'syntax G3921@foo-rtd) (list 'syntax G3923@foo-rcd))) (cons (list 'define G3933@foo? (list 'record-predicate G3921@foo-rtd)) (cons (list 'define G3927@make-foo (list 'record-constructor G3923@foo-rcd)) (append (map (lambda (G393b@foo-x G393c@idx) (list 'define G393b@foo-x (list 'record-accessor G3921@foo-rtd G393c@idx))) G392d@foo-x* G392b@idx*) (map (lambda (G393f@set-foo-x! G3940@idx) (list 'define G393f@set-foo-x! (list 'record-mutator G3921@foo-rtd G3940@idx))) G392f@set-foo-x!* G3931@set-foo-idx*))))))))))))) (G38e4@get-protocol-code G391c@clause*))) (G38e2@foo-rcd-code G391c@clause* G3921@foo-rtd G3925@protocol (G38e0@parent-rcd-code G391c@clause*)))) (G38dc@foo-rtd-code G391f@foo G391c@clause* (G38de@parent-rtd-code G391c@clause*)))) (G38d8@get-record-predicate-name G391b@namespec))) (G38e8@get-mutator-indices G3929@fields))) (G38ea@get-mutators G391f@foo G3929@fields))) (G38ec@get-accessors G391f@foo G3929@fields))) (G38ee@enumerate G3929@fields))) (G38e6@get-fields G391c@clause*))) (G38d6@get-record-constructor-name G391b@namespec))) (gensym))) (gensym))) (gensym))) (G38d4@get-record-name G391b@namespec)))) (set! G38f2@verify-clauses (lambda (G38fb@x G38fc@cls*) ((lambda (G3900@valid-kwds G3902@free-id-member?) (begin (set! G3900@valid-kwds (map G2f07@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3902@free-id-member? (lambda (G3917@x G3918@ls) (and (pair? G3918@ls) (or (G2d5a@free-id=? G3917@x (car G3918@ls)) (G3902@free-id-member? G3917@x (cdr G3918@ls)))))) ((letrec ((G3903@f (lambda (G3905@cls* G3906@seen*) (if (not (null? G3905@cls*)) ((lambda (G3909@t) ((lambda (G390b@ls/false) (if G390b@ls/false (apply (lambda (G390d@kwd G390e@rest) (if (or (not (G2d52@id? G390d@kwd)) (not (G3902@free-id-member? G390d@kwd G3900@valid-kwds))) (G303c@syntax-violation '#f '"not a valid define-record-type keyword" G390d@kwd) (if (G2d60@bound-id-member? G390d@kwd G3906@seen*) (G303c@syntax-violation '#f '"duplicate use of keyword " G38fb@x G390d@kwd) (G3903@f (cdr G3905@cls*) (cons G390d@kwd G3906@seen*))))) G390b@ls/false) ((lambda (G3911@t) ((lambda (G3913@ls/false) (if G3913@ls/false (apply (lambda (G3915@cls) (G303c@syntax-violation '#f '"malformed define-record-type clause" G3915@cls)) G3913@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3911@t))) (G2f51@syntax-dispatch G3911@t 'any))) G3909@t))) (G2f51@syntax-dispatch G3909@t '(any . any)))) (car G3905@cls*)) (void))))) G3903@f) G38fc@cls* '()))) '#f '#f))) ((lambda (G38f3@t) ((lambda (G38f5@ls/false) (if G38f5@ls/false (apply (lambda (G38f7@namespec G38f8@clause*) (begin (G38f2@verify-clauses G38cf@x G38f8@clause*) (G38f0@do-define-record G38f7@namespec G38f8@clause*))) G38f5@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G38f3@t))) (G2f51@syntax-dispatch G38f3@t '(_ any . each-any)))) G38cf@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f47@define-condition-type-macro (lambda (G3acb@x) ((lambda (G3ace@mkname) (begin (set! G3ace@mkname (lambda (G3afb@name G3afc@suffix) (G3040@datum->syntax G3afb@name (string->symbol (string-append (symbol->string (G3042@syntax->datum G3afb@name)) G3afc@suffix))))) ((lambda (G3acf@t) ((lambda (G3ad1@ls/false) (if (and G3ad1@ls/false (apply (lambda (G3ad3@ctxt G3ad4@name G3ad5@super G3ad6@constructor G3ad7@predicate G3ad8@field* G3ad9@accessor*) (and (G2d52@id? G3ad4@name) (G2d52@id? G3ad5@super) (G2d52@id? G3ad6@constructor) (G2d52@id? G3ad7@predicate) (for-all G2d52@id? G3ad8@field*) (for-all G2d52@id? G3ad9@accessor*))) G3ad1@ls/false)) (apply (lambda (G3ae1@ctxt G3ae2@name G3ae3@super G3ae4@constructor G3ae5@predicate G3ae6@field* G3ae7@accessor*) ((lambda (G3aef@aux-accessor*) (G2f07@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3ae2@name G3ae4@constructor (gensym)) (cons (list 'parent G3ae3@super) (cons (cons 'fields (map (lambda (G3af1@field G3af2@aux) (list 'immutable G3af1@field G3af2@aux)) G3ae6@field* G3aef@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3ae5@predicate (list 'condition-predicate (list 'record-type-descriptor G3ae2@name))) (map (lambda (G3af5@accessor G3af6@aux) (list 'define G3af5@accessor (list 'condition-accessor (list 'record-type-descriptor G3ae2@name) G3af6@aux))) G3ae7@accessor* G3aef@aux-accessor*)))))) (map (lambda (G3af9@x) (gensym)) G3ae7@accessor*))) G3ad1@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3acf@t))) (G2f51@syntax-dispatch G3acf@t '(any any any any any . #(each (any any)))))) G3acb@x))) '#f))) (set! G2f49@incorrect-usage-macro (lambda (G3aff@e) (G303c@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3aff@e))) (set! G2f4b@parameterize-macro (lambda (G3b01@e) ((lambda (G3b03@t) ((lambda (G3b05@ls/false) (if G3b05@ls/false (apply (lambda (G3b07@b G3b08@b*) (G2f07@bless (cons 'let (cons '() (cons G3b07@b G3b08@b*))))) G3b05@ls/false) ((lambda (G3b0b@t) ((lambda (G3b0d@ls/false) (if G3b0d@ls/false (apply (lambda (G3b0f@olhs* G3b10@orhs* G3b11@b G3b12@b*) ((lambda (G3b17@lhs* G3b18@rhs*) (G2f07@bless (cons (list 'lambda (append G3b17@lhs* G3b18@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b1b@lhs G3b1c@rhs) (list 'let (list (list 't (list G3b1b@lhs))) (list G3b1b@lhs G3b1c@rhs) (cons 'set! (cons G3b1c@rhs '(t))))) G3b17@lhs* G3b18@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b11@b G3b12@b*))) '(swap)))))) (append G3b0f@olhs* G3b10@orhs*)))) (G302a@generate-temporaries G3b0f@olhs*) (G302a@generate-temporaries G3b10@orhs*))) G3b0d@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3b0b@t))) (G2f51@syntax-dispatch G3b0b@t '(_ #(each (any any)) any . each-any)))) G3b03@t))) (G2f51@syntax-dispatch G3b03@t '(_ () any . each-any)))) G3b01@e))) (set! G2f4d@foreign-call-transformer (lambda (G3b1f@e G3b20@r G3b21@mr) ((lambda (G3b25@t) ((lambda (G3b27@ls/false) (if G3b27@ls/false (apply (lambda (G3b29@name G3b2a@arg*) (cons 'foreign-call (cons (G2f75@chi-expr G3b29@name G3b20@r G3b21@mr) (G2f71@chi-expr* G3b2a@arg* G3b20@r G3b21@mr)))) G3b27@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3b25@t))) (G2f51@syntax-dispatch G3b25@t '(_ any . each-any)))) G3b1f@e))) (set! G2f4f@convert-pattern (lambda (G3b2d@pattern G3b2e@keys) ((lambda (G3b32@cvt* G3b34@cvt) (begin (set! G3b32@cvt* (lambda (G3bc3@p* G3bc4@n G3bc5@ids) (if (null? G3bc3@p*) (values '() G3bc5@ids) (call-with-values (lambda () (G3b32@cvt* (cdr G3bc3@p*) G3bc4@n G3bc5@ids)) (lambda (G3bcb@G3bc9 G3bcc@G3bca) ((lambda (G3bcf@ids G3bd0@y) (call-with-values (lambda () (G3b34@cvt (car G3bc3@p*) G3bc4@n G3bcf@ids)) (lambda (G3bd5@G3bd3 G3bd6@G3bd4) ((lambda (G3bd9@ids G3bda@x) (values (cons G3bda@x G3bd0@y) G3bd9@ids)) G3bd6@G3bd4 G3bd5@G3bd3)))) G3bcc@G3bca G3bcb@G3bc9)))))) (set! G3b34@cvt (lambda (G3b35@p G3b36@n G3b37@ids) ((lambda (G3b3b@t) ((lambda (G3b3d@ls/false) (if (and G3b3d@ls/false (apply (lambda (G3b3f@id) (G2d52@id? G3b3f@id)) G3b3d@ls/false)) (apply (lambda (G3b41@id) (if (G2d60@bound-id-member? G3b35@p G3b2e@keys) (values (vector 'free-id G3b35@p) G3b37@ids) (if (G2d5a@free-id=? G3b35@p (G2edb@scheme-stx '_)) (values '_ G3b37@ids) (values 'any (cons (cons G3b35@p G3b36@n) G3b37@ids))))) G3b3d@ls/false) ((lambda (G3b43@t) ((lambda (G3b45@ls/false) (if (and G3b45@ls/false (apply (lambda (G3b47@p G3b48@dots) (G2f53@ellipsis? G3b48@dots)) G3b45@ls/false)) (apply (lambda (G3b4b@p G3b4c@dots) (call-with-values (lambda () (G3b34@cvt G3b4b@p (+ G3b36@n '1) G3b37@ids)) (lambda (G3b51@G3b4f G3b52@G3b50) ((lambda (G3b55@ids G3b56@p) (values (if (eq? G3b56@p 'any) 'each-any (vector 'each G3b56@p)) G3b55@ids)) G3b52@G3b50 G3b51@G3b4f)))) G3b45@ls/false) ((lambda (G3b59@t) ((lambda (G3b5b@ls/false) (if (and G3b5b@ls/false (apply (lambda (G3b5d@x G3b5e@dots G3b5f@ys G3b60@z) (G2f53@ellipsis? G3b5e@dots)) G3b5b@ls/false)) (apply (lambda (G3b65@x G3b66@dots G3b67@ys G3b68@z) (call-with-values (lambda () (G3b34@cvt G3b68@z G3b36@n G3b37@ids)) (lambda (G3b6f@G3b6d G3b70@G3b6e) ((lambda (G3b73@ids G3b74@z) (call-with-values (lambda () (G3b32@cvt* G3b67@ys G3b36@n G3b73@ids)) (lambda (G3b79@G3b77 G3b7a@G3b78) ((lambda (G3b7d@ids G3b7e@ys) (call-with-values (lambda () (G3b34@cvt G3b65@x (+ G3b36@n '1) G3b7d@ids)) (lambda (G3b83@G3b81 G3b84@G3b82) ((lambda (G3b87@ids G3b88@x) (values (vector 'each+ G3b88@x (reverse G3b7e@ys) G3b74@z) G3b87@ids)) G3b84@G3b82 G3b83@G3b81)))) G3b7a@G3b78 G3b79@G3b77)))) G3b70@G3b6e G3b6f@G3b6d)))) G3b5b@ls/false) ((lambda (G3b8b@t) ((lambda (G3b8d@ls/false) (if G3b8d@ls/false (apply (lambda (G3b8f@x G3b90@y) (call-with-values (lambda () (G3b34@cvt G3b90@y G3b36@n G3b37@ids)) (lambda (G3b95@G3b93 G3b96@G3b94) ((lambda (G3b99@ids G3b9a@y) (call-with-values (lambda () (G3b34@cvt G3b8f@x G3b36@n G3b99@ids)) (lambda (G3b9f@G3b9d G3ba0@G3b9e) ((lambda (G3ba3@ids G3ba4@x) (values (cons G3ba4@x G3b9a@y) G3ba3@ids)) G3ba0@G3b9e G3b9f@G3b9d)))) G3b96@G3b94 G3b95@G3b93)))) G3b8d@ls/false) ((lambda (G3ba7@t) ((lambda (G3ba9@ls/false) (if G3ba9@ls/false (apply (lambda () (values '() G3b37@ids)) G3ba9@ls/false) ((lambda (G3bab@t) ((lambda (G3bad@ls/false) (if (and G3bad@ls/false (apply (lambda (G3baf@p) (not (G2d1a@stx? G3baf@p))) G3bad@ls/false)) (apply (lambda (G3bb1@p) (call-with-values (lambda () (G3b34@cvt G3bb1@p G3b36@n G3b37@ids)) (lambda (G3bb5@G3bb3 G3bb6@G3bb4) ((lambda (G3bb9@ids G3bba@p) (values (vector 'vector G3bba@p) G3bb9@ids)) G3bb6@G3bb4 G3bb5@G3bb3)))) G3bad@ls/false) ((lambda (G3bbd@t) ((lambda (G3bbf@ls/false) (if G3bbf@ls/false (apply (lambda (G3bc1@datum) (values (vector 'atom (G2d68@stx->datum G3bc1@datum)) G3b37@ids)) G3bbf@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3bbd@t))) (G2f51@syntax-dispatch G3bbd@t 'any))) G3bab@t))) (G2f51@syntax-dispatch G3bab@t '#(vector each-any)))) G3ba7@t))) (G2f51@syntax-dispatch G3ba7@t '()))) G3b8b@t))) (G2f51@syntax-dispatch G3b8b@t '(any . any)))) G3b59@t))) (G2f51@syntax-dispatch G3b59@t '(any any . #(each+ any () any))))) G3b43@t))) (G2f51@syntax-dispatch G3b43@t '(any any)))) G3b3b@t))) (G2f51@syntax-dispatch G3b3b@t 'any))) G3b35@p))) (G3b34@cvt G3b2d@pattern '0 '()))) '#f '#f))) (set! G2f51@syntax-dispatch ((lambda () ((lambda (G3bde@stx^ G3be0@match-each G3be2@match-each+ G3be4@match-each-any G3be6@match-empty G3be8@combine G3bea@match* G3bec@match) (begin (set! G3bde@stx^ (lambda (G3ca7@e G3ca8@m* G3ca9@s* G3caa@ae*) (if (and (null? G3ca8@m*) (null? G3ca9@s*) (null? G3caa@ae*)) G3ca7@e (G2d3a@mkstx G3ca7@e G3ca8@m* G3ca9@s* G3caa@ae*)))) (set! G3be0@match-each (lambda (G3c8a@e G3c8b@p G3c8c@m* G3c8d@s* G3c8e@ae*) (if (pair? G3c8a@e) ((lambda (G3c94@first) (and G3c94@first ((lambda (G3c96@rest) (and G3c96@rest (cons G3c94@first G3c96@rest))) (G3be0@match-each (cdr G3c8a@e) G3c8b@p G3c8c@m* G3c8d@s* G3c8e@ae*)))) (G3bec@match (car G3c8a@e) G3c8b@p G3c8c@m* G3c8d@s* G3c8e@ae* '())) (if (null? G3c8a@e) '() (if (G2d1a@stx? G3c8a@e) (and (not (G2ccc@top-marked? G3c8c@m*)) (call-with-values (lambda () (G2d38@join-wraps G3c8c@m* G3c8d@s* G3c8e@ae* G3c8a@e)) (lambda (G3c9b@G3c98 G3c9c@G3c99 G3c9d@G3c9a) ((lambda (G3ca1@ae* G3ca2@s* G3ca3@m*) (G3be0@match-each (G2d1e@stx-expr G3c8a@e) G3c8b@p G3ca3@m* G3ca2@s* G3ca1@ae*)) G3c9d@G3c9a G3c9c@G3c99 G3c9b@G3c98)))) (if (G28e3@G280e@annotation? G3c8a@e) (G3be0@match-each (G28e5@G2812@annotation-expression G3c8a@e) G3c8b@p G3c8c@m* G3c8d@s* G3c8e@ae*) '#f)))))) (set! G3be2@match-each+ (lambda (G3c50@e G3c51@x-pat G3c52@y-pat G3c53@z-pat G3c54@m* G3c55@s* G3c56@ae* G3c57@r) ((letrec ((G3c60@f (lambda (G3c62@e G3c63@m* G3c64@s* G3c65@ae*) (if (pair? G3c62@e) (call-with-values (lambda () (G3c60@f (cdr G3c62@e) G3c63@m* G3c64@s* G3c65@ae*)) (lambda (G3c6d@G3c6a G3c6e@G3c6b G3c6f@G3c6c) ((lambda (G3c73@r G3c74@y-pat G3c75@xr*) (if G3c73@r (if (null? G3c74@y-pat) ((lambda (G3c79@xr) (if G3c79@xr (values (cons G3c79@xr G3c75@xr*) G3c74@y-pat G3c73@r) (values '#f '#f '#f))) (G3bec@match (car G3c62@e) G3c51@x-pat G3c63@m* G3c64@s* G3c65@ae* '())) (values '() (cdr G3c74@y-pat) (G3bec@match (car G3c62@e) (car G3c74@y-pat) G3c63@m* G3c64@s* G3c65@ae* G3c73@r))) (values '#f '#f '#f))) G3c6f@G3c6c G3c6e@G3c6b G3c6d@G3c6a))) (if (G2d1a@stx? G3c62@e) (if (G2ccc@top-marked? G3c63@m*) (values '() G3c52@y-pat (G3bec@match G3c62@e G3c53@z-pat G3c63@m* G3c64@s* G3c65@ae* G3c57@r)) (call-with-values (lambda () (G2d38@join-wraps G3c63@m* G3c64@s* G3c65@ae* G3c62@e)) (lambda (G3c7e@G3c7b G3c7f@G3c7c G3c80@G3c7d) ((lambda (G3c84@ae* G3c85@s* G3c86@m*) (G3c60@f (G2d1e@stx-expr G3c62@e) G3c86@m* G3c85@s* G3c84@ae*)) G3c80@G3c7d G3c7f@G3c7c G3c7e@G3c7b)))) (if (G28e3@G280e@annotation? G3c62@e) (G3c60@f (G28e5@G2812@annotation-expression G3c62@e) G3c63@m* G3c64@s* G3c65@ae*) (values '() G3c52@y-pat (G3bec@match G3c62@e G3c53@z-pat G3c63@m* G3c64@s* G3c65@ae* G3c57@r)))))))) G3c60@f) G3c50@e G3c54@m* G3c55@s* G3c56@ae*))) (set! G3be4@match-each-any (lambda (G3c37@e G3c38@m* G3c39@s* G3c3a@ae*) (if (pair? G3c37@e) ((lambda (G3c3f@l) (and G3c3f@l (cons (G3bde@stx^ (car G3c37@e) G3c38@m* G3c39@s* G3c3a@ae*) G3c3f@l))) (G3be4@match-each-any (cdr G3c37@e) G3c38@m* G3c39@s* G3c3a@ae*)) (if (null? G3c37@e) '() (if (G2d1a@stx? G3c37@e) (and (not (G2ccc@top-marked? G3c38@m*)) (call-with-values (lambda () (G2d38@join-wraps G3c38@m* G3c39@s* G3c3a@ae* G3c37@e)) (lambda (G3c44@G3c41 G3c45@G3c42 G3c46@G3c43) ((lambda (G3c4a@ae* G3c4b@s* G3c4c@m*) (G3be4@match-each-any (G2d1e@stx-expr G3c37@e) G3c4c@m* G3c4b@s* G3c4a@ae*)) G3c46@G3c43 G3c45@G3c42 G3c44@G3c41)))) (if (G28e3@G280e@annotation? G3c37@e) (G3be4@match-each-any (G28e5@G2812@annotation-expression G3c37@e) G3c38@m* G3c39@s* G3c3a@ae*) '#f)))))) (set! G3be6@match-empty (lambda (G3c31@p G3c32@r) (if (null? G3c31@p) G3c32@r (if (eq? G3c31@p '_) G3c32@r (if (eq? G3c31@p 'any) (cons '() G3c32@r) (if (pair? G3c31@p) (G3be6@match-empty (car G3c31@p) (G3be6@match-empty (cdr G3c31@p) G3c32@r)) (if (eq? G3c31@p 'each-any) (cons '() G3c32@r) ((lambda (G3c35@t) (if (memv G3c35@t '(each)) (G3be6@match-empty (vector-ref G3c31@p '1) G3c32@r) (if (memv G3c35@t '(each+)) (G3be6@match-empty (vector-ref G3c31@p '1) (G3be6@match-empty (reverse (vector-ref G3c31@p '2)) (G3be6@match-empty (vector-ref G3c31@p '3) G3c32@r))) (if (memv G3c35@t '(free-id atom)) G3c32@r (if (memv G3c35@t '(scheme-id atom)) G3c32@r (if (memv G3c35@t '(vector)) (G3be6@match-empty (vector-ref G3c31@p '1) G3c32@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c31@p))))))) (vector-ref G3c31@p '0))))))))) (set! G3be8@combine (lambda (G3c2d@r* G3c2e@r) (if (null? (car G3c2d@r*)) G3c2e@r (cons (map car G3c2d@r*) (G3be8@combine (map cdr G3c2d@r*) G3c2e@r))))) (set! G3bea@match* (lambda (G3c0c@e G3c0d@p G3c0e@m* G3c0f@s* G3c10@ae* G3c11@r) (if (null? G3c0d@p) (and (null? G3c0c@e) G3c11@r) (if (pair? G3c0d@p) (and (pair? G3c0c@e) (G3bec@match (car G3c0c@e) (car G3c0d@p) G3c0e@m* G3c0f@s* G3c10@ae* (G3bec@match (cdr G3c0c@e) (cdr G3c0d@p) G3c0e@m* G3c0f@s* G3c10@ae* G3c11@r))) (if (eq? G3c0d@p 'each-any) ((lambda (G3c18@l) (and G3c18@l (cons G3c18@l G3c11@r))) (G3be4@match-each-any G3c0c@e G3c0e@m* G3c0f@s* G3c10@ae*)) ((lambda (G3c1a@t) (if (memv G3c1a@t '(each)) (if (null? G3c0c@e) (G3be6@match-empty (vector-ref G3c0d@p '1) G3c11@r) ((lambda (G3c1c@r*) (and G3c1c@r* (G3be8@combine G3c1c@r* G3c11@r))) (G3be0@match-each G3c0c@e (vector-ref G3c0d@p '1) G3c0e@m* G3c0f@s* G3c10@ae*))) (if (memv G3c1a@t '(free-id)) (and (symbol? G3c0c@e) (G2ccc@top-marked? G3c0e@m*) (G2d5a@free-id=? (G3bde@stx^ G3c0c@e G3c0e@m* G3c0f@s* G3c10@ae*) (vector-ref G3c0d@p '1)) G3c11@r) (if (memv G3c1a@t '(scheme-id)) (and (symbol? G3c0c@e) (G2ccc@top-marked? G3c0e@m*) (G2d5a@free-id=? (G3bde@stx^ G3c0c@e G3c0e@m* G3c0f@s* G3c10@ae*) (G2edb@scheme-stx (vector-ref G3c0d@p '1))) G3c11@r) (if (memv G3c1a@t '(each+)) (call-with-values (lambda () (G3be2@match-each+ G3c0c@e (vector-ref G3c0d@p '1) (vector-ref G3c0d@p '2) (vector-ref G3c0d@p '3) G3c0e@m* G3c0f@s* G3c10@ae* G3c11@r)) (lambda (G3c21@G3c1e G3c22@G3c1f G3c23@G3c20) ((lambda (G3c27@r G3c28@y-pat G3c29@xr*) (and G3c27@r (null? G3c28@y-pat) (if (null? G3c29@xr*) (G3be6@match-empty (vector-ref G3c0d@p '1) G3c27@r) (G3be8@combine G3c29@xr* G3c27@r)))) G3c23@G3c20 G3c22@G3c1f G3c21@G3c1e))) (if (memv G3c1a@t '(atom)) (and (fast-equal? (vector-ref G3c0d@p '1) (G2d66@strip G3c0c@e G3c0e@m*)) G3c11@r) (if (memv G3c1a@t '(vector)) (and (vector? G3c0c@e) (G3bec@match (vector->list G3c0c@e) (vector-ref G3c0d@p '1) G3c0e@m* G3c0f@s* G3c10@ae* G3c11@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c0d@p)))))))) (vector-ref G3c0d@p '0))))))) (set! G3bec@match (lambda (G3bf1@e G3bf2@p G3bf3@m* G3bf4@s* G3bf5@ae* G3bf6@r) (if (not G3bf6@r) '#f (if (eq? G3bf2@p '_) G3bf6@r (if (eq? G3bf2@p 'any) (cons (G3bde@stx^ G3bf1@e G3bf3@m* G3bf4@s* G3bf5@ae*) G3bf6@r) (if (G2d1a@stx? G3bf1@e) (and (not (G2ccc@top-marked? G3bf3@m*)) (call-with-values (lambda () (G2d38@join-wraps G3bf3@m* G3bf4@s* G3bf5@ae* G3bf1@e)) (lambda (G3c00@G3bfd G3c01@G3bfe G3c02@G3bff) ((lambda (G3c06@ae* G3c07@s* G3c08@m*) (G3bec@match (G2d1e@stx-expr G3bf1@e) G3bf2@p G3c08@m* G3c07@s* G3c06@ae* G3bf6@r)) G3c02@G3bff G3c01@G3bfe G3c00@G3bfd)))) (if (G28e3@G280e@annotation? G3bf1@e) (G3bec@match (G28e5@G2812@annotation-expression G3bf1@e) G3bf2@p G3bf3@m* G3bf4@s* G3bf5@ae* G3bf6@r) (G3bea@match* G3bf1@e G3bf2@p G3bf3@m* G3bf4@s* G3bf5@ae* G3bf6@r)))))))) (lambda (G3bed@e G3bee@p) (G3bec@match G3bed@e G3bee@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f53@ellipsis? (lambda (G3caf@x) (and (G2d52@id? G3caf@x) (G2d5a@free-id=? G3caf@x (G2edb@scheme-stx '...))))) (set! G2f55@underscore? (lambda (G3cb1@x) (and (G2d52@id? G3cb1@x) (G2d5a@free-id=? G3cb1@x (G2edb@scheme-stx '_))))) (set! G2f57@verify-literals (lambda (G3cb3@lits G3cb4@expr) (for-each (lambda (G3cb7@x) (if (or (not (G2d52@id? G3cb7@x)) (G2f53@ellipsis? G3cb7@x) (G2f55@underscore? G3cb7@x)) (G303c@syntax-violation '#f '"invalid literal" G3cb4@expr G3cb7@x) (void))) G3cb3@lits))) (set! G2f59@syntax-case-transformer ((lambda () ((lambda (G3cba@build-dispatch-call G3cbc@invalid-ids-error G3cbe@gen-clause G3cc0@gen-syntax-case) (begin (set! G3cba@build-dispatch-call (lambda (G3d29@pvars G3d2a@expr G3d2b@y G3d2c@r G3d2d@mr) ((lambda (G3d33@ids G3d34@levels) ((lambda (G3d37@labels G3d38@new-vars) ((lambda (G3d3b@body) (list '(primitive apply) (G2cac@G2bea@build-lambda '#f G3d38@new-vars G3d3b@body) G3d2b@y)) (G2f75@chi-expr (G2d3e@add-subst (G2d0d@make-full-rib G3d33@ids G3d37@labels) G3d2a@expr) (append (map (lambda (G3d3d@label G3d3e@var G3d3f@level) (cons G3d3d@label (G2d72@make-binding 'syntax (cons G3d3e@var G3d3f@level)))) G3d37@labels G3d38@new-vars (map cdr G3d29@pvars)) G3d2c@r) G3d2d@mr))) (map G2cd2@gen-label G3d33@ids) (map G2cce@gen-lexical G3d33@ids))) (map car G3d29@pvars) (map cdr G3d29@pvars)))) (set! G3cbc@invalid-ids-error (lambda (G3d1d@id* G3d1e@e G3d1f@class) ((letrec ((G3d23@find (lambda (G3d25@id* G3d26@ok*) (if (null? G3d25@id*) (G303c@syntax-violation '#f '"invalid syntax" G3d1e@e) (if (G2d52@id? (car G3d25@id*)) (if (G2d60@bound-id-member? (car G3d25@id*) G3d26@ok*) (G3038@syntax-error (car G3d25@id*) '"duplicate " G3d1f@class) (G3d23@find (cdr G3d25@id*) (cons (car G3d25@id*) G3d26@ok*))) (G3038@syntax-error (car G3d25@id*) '"invalid " G3d1f@class)))))) G3d23@find) G3d1d@id* '()))) (set! G3cbe@gen-clause (lambda (G3cf7@x G3cf8@keys G3cf9@clauses G3cfa@r G3cfb@mr G3cfc@pat G3cfd@fender G3cfe@expr) (call-with-values (lambda () (G2f4f@convert-pattern G3cfc@pat G3cf8@keys)) (lambda (G3d09@G3d07 G3d0a@G3d08) ((lambda (G3d0d@pvars G3d0e@p) (if (not (G2d5e@distinct-bound-ids? (map car G3d0d@pvars))) (G3cbc@invalid-ids-error (map car G3d0d@pvars) G3cfc@pat '"pattern variable") (if (not (for-all (lambda (G3d11@x) (not (G2f53@ellipsis? (car G3d11@x)))) G3d0d@pvars)) (G303c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3cfc@pat) ((lambda (G3d13@y) ((lambda (G3d15@test) ((lambda (G3d17@conseq) ((lambda (G3d19@altern) (list (G2cac@G2bea@build-lambda '#f (list G3d13@y) (list 'if G3d15@test G3d17@conseq G3d19@altern)) (list '(primitive syntax-dispatch) G3cf7@x (list 'quote G3d0e@p)))) (G3cc0@gen-syntax-case G3cf7@x G3cf8@keys G3cf9@clauses G3cfa@r G3cfb@mr))) (G3cba@build-dispatch-call G3d0d@pvars G3cfe@expr G3d13@y G3cfa@r G3cfb@mr))) (if (eq? G3cfd@fender '#t) G3d13@y ((lambda (G3d1b@call) (list 'if G3d13@y G3d1b@call (list 'quote '#f))) (G3cba@build-dispatch-call G3d0d@pvars G3cfd@fender G3d13@y G3cfa@r G3cfb@mr))))) (G2cce@gen-lexical 'tmp))))) G3d0a@G3d08 G3d09@G3d07))))) (set! G3cc0@gen-syntax-case (lambda (G3cd5@x G3cd6@keys G3cd7@clauses G3cd8@r G3cd9@mr) (if (null? G3cd7@clauses) (list '(primitive syntax-error) G3cd5@x) ((lambda (G3cdf@t) ((lambda (G3ce1@ls/false) (if G3ce1@ls/false (apply (lambda (G3ce3@pat G3ce4@expr) (if (and (G2d52@id? G3ce3@pat) (not (G2d60@bound-id-member? G3ce3@pat G3cd6@keys)) (not (G2f53@ellipsis? G3ce3@pat))) (if (G2d5a@free-id=? G3ce3@pat (G2edb@scheme-stx '_)) (G2f75@chi-expr G3ce4@expr G3cd8@r G3cd9@mr) ((lambda (G3ce7@lab G3ce8@lex) ((lambda (G3ceb@body) (list (G2cac@G2bea@build-lambda '#f (list G3ce8@lex) G3ceb@body) G3cd5@x)) (G2f75@chi-expr (G2d3e@add-subst (G2d0d@make-full-rib (list G3ce3@pat) (list G3ce7@lab)) G3ce4@expr) (cons (cons G3ce7@lab (G2d72@make-binding 'syntax (cons G3ce8@lex '0))) G3cd8@r) G3cd9@mr))) (G2cd2@gen-label G3ce3@pat) (G2cce@gen-lexical G3ce3@pat))) (G3cbe@gen-clause G3cd5@x G3cd6@keys (cdr G3cd7@clauses) G3cd8@r G3cd9@mr G3ce3@pat '#t G3ce4@expr))) G3ce1@ls/false) ((lambda (G3ced@t) ((lambda (G3cef@ls/false) (if G3cef@ls/false (apply (lambda (G3cf1@pat G3cf2@fender G3cf3@expr) (G3cbe@gen-clause G3cd5@x G3cd6@keys (cdr G3cd7@clauses) G3cd8@r G3cd9@mr G3cf1@pat G3cf2@fender G3cf3@expr)) G3cef@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3ced@t))) (G2f51@syntax-dispatch G3ced@t '(any any any)))) G3cdf@t))) (G2f51@syntax-dispatch G3cdf@t '(any any)))) (car G3cd7@clauses))))) (lambda (G3cc1@e G3cc2@r G3cc3@mr) ((lambda (G3cc7@t) ((lambda (G3cc9@ls/false) (if G3cc9@ls/false (apply (lambda (G3ccb@expr G3ccc@keys G3ccd@clauses) (begin (G2f57@verify-literals G3ccc@keys G3cc1@e) ((lambda (G3cd1@x) ((lambda (G3cd3@body) (list (G2cac@G2bea@build-lambda '#f (list G3cd1@x) G3cd3@body) (G2f75@chi-expr G3ccb@expr G3cc2@r G3cc3@mr))) (G3cc0@gen-syntax-case G3cd1@x G3ccc@keys G3ccd@clauses G3cc2@r G3cc3@mr))) (G2cce@gen-lexical 'tmp)))) G3cc9@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3cc7@t))) (G2f51@syntax-dispatch G3cc7@t '(_ any each-any . each-any)))) G3cc1@e)))) '#f '#f '#f '#f)))) (set! G2f5b@ellipsis-map (lambda (G3d43@proc G3d44@ls . G3d47@ls*) ((lambda (G3d4a@who) (begin (set! G3d4a@who '...) (begin (if (not (list? G3d44@ls)) (assertion-violation G3d4a@who '"not a list" G3d44@ls) (void)) (if (not (null? G3d47@ls*)) ((lambda (G3d4b@n) (for-each (lambda (G3d4d@x) (begin (if (not (list? G3d4d@x)) (assertion-violation G3d4a@who '"not a list" G3d4d@x) (void)) (if (not (= (length G3d4d@x) G3d4b@n)) (assertion-violation G3d4a@who '"length mismatch" G3d44@ls G3d4d@x) (void)))) G3d47@ls*)) (length G3d44@ls)) (void)) (apply map G3d43@proc G3d44@ls G3d47@ls*)))) '#f))) (set! G2f5d@syntax-transformer ((lambda () ((lambda (G3d50@gen-syntax G3d52@gen-ref G3d54@gen-append G3d56@gen-mappend G3d58@gen-map G3d5a@gen-cons G3d5c@gen-vector G3d5e@regen) (begin (set! G3d50@gen-syntax (lambda (G3dc3@src G3dc4@e G3dc5@r G3dc6@maps G3dc7@ellipsis? G3dc8@vec?) ((lambda (G3dcf@t) ((lambda (G3dd1@ls/false) (if (and G3dd1@ls/false (apply (lambda (G3dd3@dots) (G3dc7@ellipsis? G3dd3@dots)) G3dd1@ls/false)) (apply (lambda (G3dd5@dots) (G303c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc3@src)) G3dd1@ls/false) ((lambda (G3dd7@t) ((lambda (G3dd9@ls/false) (if (and G3dd9@ls/false (apply (lambda (G3ddb@id) (G2d52@id? G3ddb@id)) G3dd9@ls/false)) (apply (lambda (G3ddd@id) ((lambda (G3ddf@label) ((lambda (G3de1@b) ((lambda () (if (eq? (G2d74@binding-type G3de1@b) 'syntax) (call-with-values (lambda () ((lambda (G3de5@var.lev) (G3d52@gen-ref G3dc3@src (car G3de5@var.lev) (cdr G3de5@var.lev) G3dc6@maps)) (G2d76@binding-value G3de1@b))) (lambda (G3de7@G3de3 G3de8@G3de4) ((lambda (G3deb@maps G3dec@var) (values (list 'ref G3dec@var) G3deb@maps)) G3de8@G3de4 G3de7@G3de3))) (values (list 'quote G3dc4@e) G3dc6@maps))))) (G2d70@label->binding G3ddf@label G3dc5@r))) (G2d6c@id->label G3dc4@e))) G3dd9@ls/false) ((lambda (G3def@t) ((lambda (G3df1@ls/false) (if (and G3df1@ls/false (apply (lambda (G3df3@dots G3df4@e) (G3dc7@ellipsis? G3df3@dots)) G3df1@ls/false)) (apply (lambda (G3df7@dots G3df8@e) (if G3dc8@vec? (G303c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc3@src) (G3d50@gen-syntax G3dc3@src G3df8@e G3dc5@r G3dc6@maps (lambda (G3dfb@x) '#f) '#f))) G3df1@ls/false) ((lambda (G3dfd@t) ((lambda (G3dff@ls/false) (if (and G3dff@ls/false (apply (lambda (G3e01@x G3e02@dots G3e03@y) (G3dc7@ellipsis? G3e02@dots)) G3dff@ls/false)) (apply (lambda (G3e07@x G3e08@dots G3e09@y) ((letrec ((G3e0d@f (lambda (G3e0f@y G3e10@k) ((lambda (G3e13@t) ((lambda (G3e15@ls/false) (if G3e15@ls/false (apply (lambda () (G3e10@k G3dc6@maps)) G3e15@ls/false) ((lambda (G3e17@t) ((lambda (G3e19@ls/false) (if (and G3e19@ls/false (apply (lambda (G3e1b@dots G3e1c@y) (G3dc7@ellipsis? G3e1b@dots)) G3e19@ls/false)) (apply (lambda (G3e1f@dots G3e20@y) (G3e0d@f G3e20@y (lambda (G3e23@maps) (call-with-values (lambda () (G3e10@k (cons '() G3e23@maps))) (lambda (G3e27@G3e25 G3e28@G3e26) ((lambda (G3e2b@maps G3e2c@x) (if (null? (car G3e2b@maps)) (G303c@syntax-violation '#f '"extra ellipsis in syntax form" G3dc3@src) (values (G3d56@gen-mappend G3e2c@x (car G3e2b@maps)) (cdr G3e2b@maps)))) G3e28@G3e26 G3e27@G3e25)))))) G3e19@ls/false) ((lambda (G3e2f@t) ((lambda (G3e31@ls/false) (if G3e31@ls/false (apply (lambda () (call-with-values (lambda () (G3d50@gen-syntax G3dc3@src G3e0f@y G3dc5@r G3dc6@maps G3dc7@ellipsis? G3dc8@vec?)) (lambda (G3e35@G3e33 G3e36@G3e34) ((lambda (G3e39@maps G3e3a@y) (call-with-values (lambda () (G3e10@k G3e39@maps)) (lambda (G3e3f@G3e3d G3e40@G3e3e) ((lambda (G3e43@maps G3e44@x) (values (G3d54@gen-append G3e44@x G3e3a@y) G3e43@maps)) G3e40@G3e3e G3e3f@G3e3d)))) G3e36@G3e34 G3e35@G3e33)))) G3e31@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3e2f@t))) (G2f51@syntax-dispatch G3e2f@t '_))) G3e17@t))) (G2f51@syntax-dispatch G3e17@t '(any . any)))) G3e13@t))) (G2f51@syntax-dispatch G3e13@t '()))) G3e0f@y)))) G3e0d@f) G3e09@y (lambda (G3e47@maps) (call-with-values (lambda () (G3d50@gen-syntax G3dc3@src G3e07@x G3dc5@r (cons '() G3e47@maps) G3dc7@ellipsis? '#f)) (lambda (G3e4b@G3e49 G3e4c@G3e4a) ((lambda (G3e4f@maps G3e50@x) (if (null? (car G3e4f@maps)) (G303c@syntax-violation '#f '"extra ellipsis in syntax form" G3dc3@src) (values (G3d58@gen-map G3e50@x (car G3e4f@maps)) (cdr G3e4f@maps)))) G3e4c@G3e4a G3e4b@G3e49)))))) G3dff@ls/false) ((lambda (G3e53@t) ((lambda (G3e55@ls/false) (if G3e55@ls/false (apply (lambda (G3e57@x G3e58@y) (call-with-values (lambda () (G3d50@gen-syntax G3dc3@src G3e57@x G3dc5@r G3dc6@maps G3dc7@ellipsis? '#f)) (lambda (G3e5d@G3e5b G3e5e@G3e5c) ((lambda (G3e61@maps G3e62@xnew) (call-with-values (lambda () (G3d50@gen-syntax G3dc3@src G3e58@y G3dc5@r G3e61@maps G3dc7@ellipsis? G3dc8@vec?)) (lambda (G3e67@G3e65 G3e68@G3e66) ((lambda (G3e6b@maps G3e6c@ynew) (values (G3d5a@gen-cons G3dc4@e G3e57@x G3e58@y G3e62@xnew G3e6c@ynew) G3e6b@maps)) G3e68@G3e66 G3e67@G3e65)))) G3e5e@G3e5c G3e5d@G3e5b)))) G3e55@ls/false) ((lambda (G3e6f@t) ((lambda (G3e71@ls/false) (if G3e71@ls/false (apply (lambda (G3e73@ls) (call-with-values (lambda () (G3d50@gen-syntax G3dc3@src G3e73@ls G3dc5@r G3dc6@maps G3dc7@ellipsis? '#t)) (lambda (G3e77@G3e75 G3e78@G3e76) ((lambda (G3e7b@maps G3e7c@lsnew) (values (G3d5c@gen-vector G3dc4@e G3e73@ls G3e7c@lsnew) G3e7b@maps)) G3e78@G3e76 G3e77@G3e75)))) G3e71@ls/false) ((lambda (G3e7f@t) ((lambda (G3e81@ls/false) (if G3e81@ls/false (apply (lambda () (values (list 'quote G3dc4@e) G3dc6@maps)) G3e81@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3e7f@t))) (G2f51@syntax-dispatch G3e7f@t '_))) G3e6f@t))) (G2f51@syntax-dispatch G3e6f@t '#(vector each-any)))) G3e53@t))) (G2f51@syntax-dispatch G3e53@t '(any . any)))) G3dfd@t))) (G2f51@syntax-dispatch G3dfd@t '(any any . any)))) G3def@t))) (G2f51@syntax-dispatch G3def@t '(any any)))) G3dd7@t))) (G2f51@syntax-dispatch G3dd7@t 'any))) G3dcf@t))) (G2f51@syntax-dispatch G3dcf@t 'any))) G3dc4@e))) (set! G3d52@gen-ref (lambda (G3dab@src G3dac@var G3dad@level G3dae@maps) (if (= G3dad@level '0) (values G3dac@var G3dae@maps) (if (null? G3dae@maps) (G303c@syntax-violation '#f '"missing ellipsis in syntax form" G3dab@src) (call-with-values (lambda () (G3d52@gen-ref G3dab@src G3dac@var (- G3dad@level '1) (cdr G3dae@maps))) (lambda (G3db5@G3db3 G3db6@G3db4) ((lambda (G3db9@outer-maps G3dba@outer-var) ((lambda (G3dbd@t) (if G3dbd@t ((lambda (G3dbf@b) (values (cdr G3dbf@b) G3dae@maps)) G3dbd@t) ((lambda (G3dc1@inner-var) (values G3dc1@inner-var (cons (cons (cons G3dba@outer-var G3dc1@inner-var) (car G3dae@maps)) G3db9@outer-maps))) (G2cce@gen-lexical 'tmp)))) (assq G3dba@outer-var (car G3dae@maps)))) G3db6@G3db4 G3db5@G3db3))))))) (set! G3d54@gen-append (lambda (G3da7@x G3da8@y) (if (fast-equal? G3da8@y ''()) G3da7@x (list 'append G3da7@x G3da8@y)))) (set! G3d56@gen-mappend (lambda (G3da3@e G3da4@map-env) (list 'apply '(primitive append) (G3d58@gen-map G3da3@e G3da4@map-env)))) (set! G3d58@gen-map (lambda (G3d91@e G3d92@map-env) ((lambda (G3d95@formals G3d96@actuals) (if (eq? (car G3d91@e) 'ref) (car G3d96@actuals) (if (for-all (lambda (G3d99@x) (and (eq? (car G3d99@x) 'ref) (memq (cadr G3d99@x) G3d95@formals))) (cdr G3d91@e)) ((lambda (G3d9b@args) (cons 'map (cons (list 'primitive (car G3d91@e)) G3d9b@args))) (map ((lambda (G3d9d@r) (lambda (G3d9f@x) (cdr (assq (cadr G3d9f@x) G3d9d@r)))) (map cons G3d95@formals G3d96@actuals)) (cdr G3d91@e))) (cons* 'map (list 'lambda G3d95@formals G3d91@e) G3d96@actuals)))) (map cdr G3d92@map-env) (map (lambda (G3da1@x) (list 'ref (car G3da1@x))) G3d92@map-env)))) (set! G3d5a@gen-cons (lambda (G3d81@e G3d82@x G3d83@y G3d84@xnew G3d85@ynew) ((lambda (G3d8b@t) (if (memv G3d8b@t '(quote)) (if (eq? (car G3d84@xnew) 'quote) ((lambda (G3d8d@xnew G3d8e@ynew) (if (and (eq? G3d8d@xnew G3d82@x) (eq? G3d8e@ynew G3d83@y)) (list 'quote G3d81@e) (list 'quote (cons G3d8d@xnew G3d8e@ynew)))) (cadr G3d84@xnew) (cadr G3d85@ynew)) (if (null? (cadr G3d85@ynew)) (list 'list G3d84@xnew) (list 'cons G3d84@xnew G3d85@ynew))) (if (memv G3d8b@t '(list)) (cons 'list (cons G3d84@xnew (cdr G3d85@ynew))) (list 'cons G3d84@xnew G3d85@ynew)))) (car G3d85@ynew)))) (set! G3d5c@gen-vector (lambda (G3d7b@e G3d7c@ls G3d7d@lsnew) (if (eq? (car G3d7d@lsnew) 'quote) (if (eq? (cadr G3d7d@lsnew) G3d7c@ls) (list 'quote G3d7b@e) (list 'quote (list->vector (cadr G3d7d@lsnew)))) (if (eq? (car G3d7d@lsnew) 'list) (cons 'vector (cdr G3d7d@lsnew)) (list 'list->vector G3d7d@lsnew))))) (set! G3d5e@regen (lambda (G3d75@x) ((lambda (G3d77@t) (if (memv G3d77@t '(ref)) (cadr G3d75@x) (if (memv G3d77@t '(primitive)) (list 'primitive (cadr G3d75@x)) (if (memv G3d77@t '(quote)) (list 'quote (cadr G3d75@x)) (if (memv G3d77@t '(lambda)) (G2cac@G2bea@build-lambda '#f (cadr G3d75@x) (G3d5e@regen (caddr G3d75@x))) (if (memv G3d77@t '(map)) ((lambda (G3d79@ls) (cons '(primitive ellipsis-map) G3d79@ls)) (map G3d5e@regen (cdr G3d75@x))) (cons (list 'primitive (car G3d75@x)) (map G3d5e@regen (cdr G3d75@x))))))))) (car G3d75@x)))) (lambda (G3d5f@e G3d60@r G3d61@mr) ((lambda (G3d65@t) ((lambda (G3d67@ls/false) (if G3d67@ls/false (apply (lambda (G3d69@x) (call-with-values (lambda () (G3d50@gen-syntax G3d5f@e G3d69@x G3d60@r '() G2f53@ellipsis? '#f)) (lambda (G3d6d@G3d6b G3d6e@G3d6c) ((lambda (G3d71@maps G3d72@e) (G3d5e@regen G3d72@e)) G3d6e@G3d6c G3d6d@G3d6b)))) G3d67@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3d65@t))) (G2f51@syntax-dispatch G3d65@t '(_ any)))) G3d5f@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f5f@core-macro-transformer (lambda (G3e83@name) ((lambda (G3e85@t) (if (memv G3e85@t '(quote)) G2f01@quote-transformer (if (memv G3e85@t '(lambda)) G2f05@lambda-transformer (if (memv G3e85@t '(case-lambda)) G2f03@case-lambda-transformer (if (memv G3e85@t '(letrec)) G2ee9@letrec-transformer (if (memv G3e85@t '(letrec*)) G2eeb@letrec*-transformer (if (memv G3e85@t '(if)) G2ef9@if-transformer (if (memv G3e85@t '(and)) G2efb@and-transformer (if (memv G3e85@t '(or)) G2efd@or-transformer (if (memv G3e85@t '(foreign-call)) G2f4d@foreign-call-transformer (if (memv G3e85@t '(syntax-case)) G2f59@syntax-case-transformer (if (memv G3e85@t '(syntax)) G2f5d@syntax-transformer (if (memv G3e85@t '(type-descriptor)) G2eef@type-descriptor-transformer (if (memv G3e85@t '(record-type-descriptor)) G2ef1@record-type-descriptor-transformer (if (memv G3e85@t '(record-constructor-descriptor)) G2ef3@record-constructor-descriptor-transformer (if (memv G3e85@t '(fluid-let-syntax)) G2eed@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e83@name))))))))))))))))) G3e83@name))) (set! G2f61@file-options-macro (lambda (G3e87@x) ((lambda (G3e8a@valid-option?) (begin (set! G3e8a@valid-option? (lambda (G3e93@x) (and (G2d52@id? G3e93@x) (memq (G2d54@id->sym G3e93@x) '(no-fail no-create no-truncate))))) ((lambda (G3e8b@t) ((lambda (G3e8d@ls/false) (if (and G3e8d@ls/false (apply (lambda (G3e8f@opt*) (and (for-all G3e8a@valid-option? G3e8f@opt*) (G28ef@G2890@file-options-spec (map G2d54@id->sym G3e8f@opt*)))) G3e8d@ls/false)) (apply (lambda (G3e91@opt*) (G2f07@bless (list 'quote (G28ef@G2890@file-options-spec (map G2d54@id->sym G3e91@opt*))))) G3e8d@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3e8b@t))) (G2f51@syntax-dispatch G3e8b@t '(_ . each-any)))) G3e87@x))) '#f))) (set! G2f63@symbol-macro (lambda (G3e95@x G3e96@set) ((lambda (G3e99@t) ((lambda (G3e9b@ls/false) (if (and G3e9b@ls/false (apply (lambda (G3e9d@name) (and (G2d52@id? G3e9d@name) (memq (G2d54@id->sym G3e9d@name) G3e96@set))) G3e9b@ls/false)) (apply (lambda (G3e9f@name) (G2f07@bless (list 'quote G3e9f@name))) G3e9b@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3e99@t))) (G2f51@syntax-dispatch G3e99@t '(_ any)))) G3e95@x))) (set! G2f65@macro-transformer (lambda (G3ea1@x) (if (procedure? G3ea1@x) G3ea1@x (if (symbol? G3ea1@x) ((lambda (G3ea3@t) (if (memv G3ea3@t '(define-record-type)) G2f45@define-record-type-macro (if (memv G3ea3@t '(define-struct)) G2f43@define-struct-macro (if (memv G3ea3@t '(include)) G2f39@include-macro (if (memv G3ea3@t '(cond)) G2f35@cond-macro (if (memv G3ea3@t '(let)) G2f0d@let-macro (if (memv G3ea3@t '(do)) G2f2d@do-macro (if (memv G3ea3@t '(or)) G2f31@or-macro (if (memv G3ea3@t '(and)) G2f33@and-macro (if (memv G3ea3@t '(let*)) G2f2f@let*-macro (if (memv G3ea3@t '(let-values)) G2f0f@let-values-macro (if (memv G3ea3@t '(let*-values)) G2f11@let*-values-macro (if (memv G3ea3@t '(syntax-rules)) G2f3d@syntax-rules-macro (if (memv G3ea3@t '(quasiquote)) G2f3f@quasiquote-macro (if (memv G3ea3@t '(quasisyntax)) G2f41@quasisyntax-macro (if (memv G3ea3@t '(with-syntax)) G2f09@with-syntax-macro (if (memv G3ea3@t '(when)) G2ef5@when-macro (if (memv G3ea3@t '(unless)) G2ef7@unless-macro (if (memv G3ea3@t '(case)) G2eff@case-macro (if (memv G3ea3@t '(identifier-syntax)) G2f2b@identifier-syntax-macro (if (memv G3ea3@t '(time)) G2f23@time-macro (if (memv G3ea3@t '(delay)) G2f25@delay-macro (if (memv G3ea3@t '(assert)) G2f27@assert-macro (if (memv G3ea3@t '(endianness)) G2f29@endianness-macro (if (memv G3ea3@t '(guard)) G2f1f@guard-macro (if (memv G3ea3@t '(define-enumeration)) G2f21@define-enumeration-macro (if (memv G3ea3@t '(trace-lambda)) G2f13@trace-lambda-macro (if (memv G3ea3@t '(trace-define)) G2f15@trace-define-macro (if (memv G3ea3@t '(trace-define-syntax)) G2f17@trace-define-syntax-macro (if (memv G3ea3@t '(trace-let-syntax)) G2f1b@trace-let-syntax-macro (if (memv G3ea3@t '(trace-letrec-syntax)) G2f1d@trace-letrec-syntax-macro (if (memv G3ea3@t '(define-condition-type)) G2f47@define-condition-type-macro (if (memv G3ea3@t '(parameterize)) G2f4b@parameterize-macro (if (memv G3ea3@t '(include-into)) G2f3b@include-into-macro (if (memv G3ea3@t '(eol-style)) (lambda (G3ea5@x) (G2f63@symbol-macro G3ea5@x '(none lf cr crlf nel crnel ls))) (if (memv G3ea3@t '(error-handling-mode)) (lambda (G3ea7@x) (G2f63@symbol-macro G3ea7@x '(ignore raise replace))) (if (memv G3ea3@t '(buffer-mode)) (lambda (G3ea9@x) (G2f63@symbol-macro G3ea9@x '(none line block))) (if (memv G3ea3@t '(file-options)) G2f61@file-options-macro (if (memv G3ea3@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f49@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ea1@x)))))))))))))))))))))))))))))))))))))))) G3ea1@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ea1@x))))) (set! G2f67@local-macro-transformer (lambda (G3eab@x) (car G3eab@x))) (set! G2f69@do-macro-call (lambda (G3ead@transformer G3eae@expr) ((lambda (G3eb1@out) (begin ((letrec ((G3eb3@f (lambda (G3eb5@x) (if (not (G2d1a@stx? G3eb5@x)) (if (pair? G3eb5@x) (begin (G3eb3@f (car G3eb5@x)) (G3eb3@f (cdr G3eb5@x))) (if (vector? G3eb5@x) (vector-for-each G3eb3@f G3eb5@x) (if (symbol? G3eb5@x) (G303c@syntax-violation '#f '"raw symbol encountered in output of macro" G3eae@expr G3eb5@x) (void)))) (void))))) G3eb3@f) G3eb1@out) (G2d3c@add-mark (G2d32@gen-mark) G3eb1@out G3eae@expr))) (G3ead@transformer (G2d3c@add-mark G2d34@anti-mark G3eae@expr '#f))))) (set! G2f6b@chi-macro (lambda (G3eb7@p G3eb8@e) (G2f69@do-macro-call (G2f65@macro-transformer G3eb7@p) G3eb8@e))) (set! G2f6d@chi-local-macro (lambda (G3ebb@p G3ebc@e) (G2f69@do-macro-call (G2f67@local-macro-transformer G3ebb@p) G3ebc@e))) (set! G2f6f@chi-global-macro (lambda (G3ebf@p G3ec0@e) ((lambda (G3ec3@lib G3ec4@loc) (begin (G2b6a@G2a12@visit-library G3ec3@lib) ((lambda (G3ec7@x) ((lambda (G3ec9@transformer) (G2f69@do-macro-call G3ec9@transformer G3ec0@e)) (if (procedure? G3ec7@x) G3ec7@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ec7@x)))) (symbol-value G3ec4@loc)))) (car G3ebf@p) (cdr G3ebf@p)))) (set! G2f71@chi-expr* (lambda (G3ecb@e* G3ecc@r G3ecd@mr) (if (null? G3ecb@e*) '() ((lambda (G3ed1@e) (cons G3ed1@e (G2f71@chi-expr* (cdr G3ecb@e*) G3ecc@r G3ecd@mr))) (G2f75@chi-expr (car G3ecb@e*) G3ecc@r G3ecd@mr))))) (set! G2f73@chi-application (lambda (G3ed3@e G3ed4@r G3ed5@mr) ((lambda (G3ed9@t) ((lambda (G3edb@ls/false) (if G3edb@ls/false (apply (lambda (G3edd@rator G3ede@rands) ((lambda (G3ee1@rator) (cons G3ee1@rator (G2f71@chi-expr* G3ede@rands G3ed4@r G3ed5@mr))) (G2f75@chi-expr G3edd@rator G3ed4@r G3ed5@mr))) G3edb@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3ed9@t))) (G2f51@syntax-dispatch G3ed9@t '(any . each-any)))) G3ed3@e))) (set! G2f75@chi-expr (lambda (G3ee3@e G3ee4@r G3ee5@mr) (call-with-values (lambda () (G2d7a@syntax-type G3ee3@e G3ee4@r)) (lambda (G3eec@G3ee9 G3eed@G3eea G3eee@G3eeb) ((lambda (G3ef2@kwd G3ef3@value G3ef4@type) ((lambda (G3ef8@t) (if (memv G3ef8@t '(core-macro)) ((lambda (G3efa@transformer) (G3efa@transformer G3ee3@e G3ee4@r G3ee5@mr)) (G2f5f@core-macro-transformer G3ef3@value)) (if (memv G3ef8@t '(global)) ((lambda (G3efc@lib) ((lambda (G3efe@loc) ((lambda () (begin ((G2fbe@inv-collector) G3efc@lib) G3efe@loc)))) (cdr G3ef3@value))) (car G3ef3@value)) (if (memv G3ef8@t '(core-prim)) ((lambda (G3f00@name) (list 'primitive G3f00@name)) G3ef3@value) (if (memv G3ef8@t '(call)) (G2f73@chi-application G3ee3@e G3ee4@r G3ee5@mr) (if (memv G3ef8@t '(lexical)) ((lambda (G3f02@lex) G3f02@lex) (G2edd@lexical-var G3ef3@value)) (if (memv G3ef8@t '(global-macro global-macro!)) (G2f75@chi-expr (G2f6f@chi-global-macro G3ef3@value G3ee3@e) G3ee4@r G3ee5@mr) (if (memv G3ef8@t '(local-macro local-macro!)) (G2f75@chi-expr (G2f6d@chi-local-macro G3ef3@value G3ee3@e) G3ee4@r G3ee5@mr) (if (memv G3ef8@t '(macro macro!)) (G2f75@chi-expr (G2f6b@chi-macro G3ef3@value G3ee3@e) G3ee4@r G3ee5@mr) (if (memv G3ef8@t '(constant)) ((lambda (G3f04@datum) (list 'quote G3f04@datum)) G3ef3@value) (if (memv G3ef8@t '(set!)) (G2f77@chi-set! G3ee3@e G3ee4@r G3ee5@mr) (if (memv G3ef8@t '(begin)) ((lambda (G3f06@t) ((lambda (G3f08@ls/false) (if G3f08@ls/false (apply (lambda (G3f0a@x G3f0b@x*) (G2caf@G2c20@build-sequence '#f (G2f71@chi-expr* (cons G3f0a@x G3f0b@x*) G3ee4@r G3ee5@mr))) G3f08@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3f06@t))) (G2f51@syntax-dispatch G3f06@t '(_ any . each-any)))) G3ee3@e) (if (memv G3ef8@t '(let-syntax letrec-syntax)) ((lambda (G3f0e@t) ((lambda (G3f10@ls/false) (if (and G3f10@ls/false (apply (lambda (G3f12@xlhs* G3f13@xrhs* G3f14@xbody G3f15@xbody*) (if (not (G2d5c@valid-bound-ids? G3f12@xlhs*)) (G303c@syntax-violation '#f '"invalid identifiers" G3ee3@e) (void))) G3f10@ls/false)) (apply (lambda (G3f1a@xlhs* G3f1b@xrhs* G3f1c@xbody G3f1d@xbody*) ((lambda (G3f22@xlab*) ((lambda (G3f24@xrib) ((lambda (G3f26@xb*) ((lambda () (G2caf@G2c20@build-sequence '#f (G2f71@chi-expr* (map (lambda (G3f28@x) (G2d3e@add-subst G3f24@xrib G3f28@x)) (cons G3f1c@xbody G3f1d@xbody*)) (append (map cons G3f22@xlab* G3f26@xb*) G3ee4@r) (append (map cons G3f22@xlab* G3f26@xb*) G3ee5@mr)))))) (map (lambda (G3f2a@x) (G2d92@make-eval-transformer (G2fb0@expand-transformer (if (eq? G3ef4@type 'let-syntax) G3f2a@x (G2d3e@add-subst G3f24@xrib G3f2a@x)) G3ee5@mr))) G3f1b@xrhs*))) (G2d0d@make-full-rib G3f1a@xlhs* G3f22@xlab*))) (map G2cd2@gen-label G3f1a@xlhs*))) G3f10@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3f0e@t))) (G2f51@syntax-dispatch G3f0e@t '(_ #(each (any any)) any . each-any)))) G3ee3@e) (if (memv G3ef8@t '(displaced-lexical)) (G303c@syntax-violation '#f '"identifier out of context" G3ee3@e) (if (memv G3ef8@t '(syntax)) (G303c@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ee3@e) (if (memv G3ef8@t '(define define-syntax module import library)) (G303c@syntax-violation '#f (string-append ((lambda (G3f2c@t) (if (memv G3f2c@t '(define)) '"a definition" (if (memv G3f2c@t '(define-syntax)) '"a define-syntax" (if (memv G3f2c@t '(module)) '"a module definition" (if (memv G3f2c@t '(library)) '"a library definition" (if (memv G3f2c@t '(import)) '"an import declaration" (if (memv G3f2c@t '(export)) '"an export declaration" '"a non-expression"))))))) G3ef4@type) '" was found where an expression was expected") G3ee3@e) (if (memv G3ef8@t '(mutable)) (G303c@syntax-violation '#f '"attempt to reference an unexportable variable" G3ee3@e) (G303c@syntax-violation '#f '"invalid expression" G3ee3@e)))))))))))))))))) G3ef4@type)) G3eee@G3eeb G3eed@G3eea G3eec@G3ee9))))) (set! G2f77@chi-set! (lambda (G3f2e@e G3f2f@r G3f30@mr) ((lambda (G3f34@t) ((lambda (G3f36@ls/false) (if (and G3f36@ls/false (apply (lambda (G3f38@x G3f39@v) (G2d52@id? G3f38@x)) G3f36@ls/false)) (apply (lambda (G3f3c@x G3f3d@v) (call-with-values (lambda () (G2d7a@syntax-type G3f3c@x G3f2f@r)) (lambda (G3f43@G3f40 G3f44@G3f41 G3f45@G3f42) ((lambda (G3f49@kwd G3f4a@value G3f4b@type) ((lambda (G3f4f@t) (if (memv G3f4f@t '(lexical)) (begin (G2ee1@set-lexical-mutable! G3f4a@value '#t) (list 'set! (G2edd@lexical-var G3f4a@value) (G2f75@chi-expr G3f3d@v G3f2f@r G3f30@mr))) (if (memv G3f4f@t '(core-prim)) (G303c@syntax-violation '#f '"cannot modify imported core primitive" G3f2e@e) (if (memv G3f4f@t '(global)) (G303c@syntax-violation '#f '"attempt to modify imported binding" G3f2e@e) (if (memv G3f4f@t '(global-macro!)) (G2f75@chi-expr (G2f6f@chi-global-macro G3f4a@value G3f2e@e) G3f2f@r G3f30@mr) (if (memv G3f4f@t '(local-macro!)) (G2f75@chi-expr (G2f6d@chi-local-macro G3f4a@value G3f2e@e) G3f2f@r G3f30@mr) (if (memv G3f4f@t '(mutable)) (G303c@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f2e@e) (G303c@syntax-violation '#f '"invalid syntax" G3f2e@e)))))))) G3f4b@type)) G3f45@G3f42 G3f44@G3f41 G3f43@G3f40)))) G3f36@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3f34@t))) (G2f51@syntax-dispatch G3f34@t '(_ any any)))) G3f2e@e))) (set! G2f79@verify-formals (lambda (G3f51@fmls G3f52@stx) ((lambda (G3f55@t) ((lambda (G3f57@ls/false) (if G3f57@ls/false (apply (lambda (G3f59@x*) (if (not (G2d5c@valid-bound-ids? G3f59@x*)) (G2f0b@invalid-fmls-error G3f52@stx G3f51@fmls) (void))) G3f57@ls/false) ((lambda (G3f5b@t) ((lambda (G3f5d@ls/false) (if G3f5d@ls/false (apply (lambda (G3f5f@x* G3f60@x) (if (not (G2d5c@valid-bound-ids? (cons G3f60@x G3f5f@x*))) (G2f0b@invalid-fmls-error G3f52@stx G3f51@fmls) (void))) G3f5d@ls/false) ((lambda (G3f63@t) ((lambda (G3f65@ls/false) (if G3f65@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid syntax" G3f52@stx)) G3f65@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3f63@t))) (G2f51@syntax-dispatch G3f63@t '_))) G3f5b@t))) (G2f51@syntax-dispatch G3f5b@t '#(each+ any () any)))) G3f55@t))) (G2f51@syntax-dispatch G3f55@t 'each-any))) G3f51@fmls))) (set! G2f7b@chi-lambda-clause (lambda (G3f67@stx G3f68@fmls G3f69@body* G3f6a@r G3f6b@mr) ((lambda (G3f71@t) ((lambda (G3f73@ls/false) (if G3f73@ls/false (apply (lambda (G3f75@x*) (begin (G2f79@verify-formals G3f68@fmls G3f67@stx) ((lambda (G3f77@lex* G3f78@lab*) (values G3f77@lex* (G2f8b@chi-internal (G2d3e@add-subst (G2d0d@make-full-rib G3f75@x* G3f78@lab*) G3f69@body*) (G2ee5@add-lexicals G3f78@lab* G3f77@lex* G3f6a@r) G3f6b@mr))) (map G2cce@gen-lexical G3f75@x*) (map G2cd2@gen-label G3f75@x*)))) G3f73@ls/false) ((lambda (G3f7b@t) ((lambda (G3f7d@ls/false) (if G3f7d@ls/false (apply (lambda (G3f7f@x* G3f80@x) (begin (G2f79@verify-formals G3f68@fmls G3f67@stx) ((lambda (G3f83@lex* G3f84@lab* G3f85@lex G3f86@lab) (values (append G3f83@lex* G3f85@lex) (G2f8b@chi-internal (G2d3e@add-subst (G2d0d@make-full-rib (cons G3f80@x G3f7f@x*) (cons G3f86@lab G3f84@lab*)) G3f69@body*) (G2ee5@add-lexicals (cons G3f86@lab G3f84@lab*) (cons G3f85@lex G3f83@lex*) G3f6a@r) G3f6b@mr))) (map G2cce@gen-lexical G3f7f@x*) (map G2cd2@gen-label G3f7f@x*) (G2cce@gen-lexical G3f80@x) (G2cd2@gen-label G3f80@x)))) G3f7d@ls/false) ((lambda (G3f8b@t) ((lambda (G3f8d@ls/false) (if G3f8d@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid syntax" G3f68@fmls)) G3f8d@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G3f8b@t))) (G2f51@syntax-dispatch G3f8b@t '_))) G3f7b@t))) (G2f51@syntax-dispatch G3f7b@t '#(each+ any () any)))) G3f71@t))) (G2f51@syntax-dispatch G3f71@t 'each-any))) G3f68@fmls))) (set! G2f7d@chi-lambda-clause* (lambda (G3f8f@stx G3f90@fmls* G3f91@body** G3f92@r G3f93@mr) (if (null? G3f90@fmls*) (values '() '()) (call-with-values (lambda () (G2f7b@chi-lambda-clause G3f8f@stx (car G3f90@fmls*) (car G3f91@body**) G3f92@r G3f93@mr)) (lambda (G3f9b@G3f99 G3f9c@G3f9a) ((lambda (G3f9f@b G3fa0@a) (call-with-values (lambda () (G2f7d@chi-lambda-clause* G3f8f@stx (cdr G3f90@fmls*) (cdr G3f91@body**) G3f92@r G3f93@mr)) (lambda (G3fa5@G3fa3 G3fa6@G3fa4) ((lambda (G3fa9@b* G3faa@a*) (values (cons G3fa0@a G3faa@a*) (cons G3f9f@b G3fa9@b*))) G3fa6@G3fa4 G3fa5@G3fa3)))) G3f9c@G3f9a G3f9b@G3f99)))))) (set! G2f7f@chi-defun (lambda (G3fad@x G3fae@r G3faf@mr) ((lambda (G3fb3@fmls G3fb4@body*) (call-with-values (lambda () (G2f7b@chi-lambda-clause G3fb3@fmls G3fb3@fmls G3fb4@body* G3fae@r G3faf@mr)) (lambda (G3fb9@G3fb7 G3fba@G3fb8) ((lambda (G3fbd@body G3fbe@fmls) (G2cac@G2bea@build-lambda '#f G3fbe@fmls G3fbd@body)) G3fba@G3fb8 G3fb9@G3fb7)))) (car G3fad@x) (cdr G3fad@x)))) (set! G2f81@chi-rhs (lambda (G3fc1@rhs G3fc2@r G3fc3@mr) ((lambda (G3fc7@t) (if (memv G3fc7@t '(defun)) (G2f7f@chi-defun (cdr G3fc1@rhs) G3fc2@r G3fc3@mr) (if (memv G3fc7@t '(expr)) ((lambda (G3fc9@expr) (G2f75@chi-expr G3fc9@expr G3fc2@r G3fc3@mr)) (cdr G3fc1@rhs)) (if (memv G3fc7@t '(top-expr)) ((lambda (G3fcb@expr) (G2caf@G2c20@build-sequence '#f (list (G2f75@chi-expr G3fcb@expr G3fc2@r G3fc3@mr) (G2cb0@G2c22@build-void)))) (cdr G3fc1@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fc1@rhs))))) (car G3fc1@rhs)))) (set! G2f83@expand-interaction-rhs*/init* (lambda (G3fcd@lhs* G3fce@rhs* G3fcf@init* G3fd0@r G3fd1@mr) ((letrec ((G3fd7@f (lambda (G3fd9@lhs* G3fda@rhs*) (if (null? G3fd9@lhs*) (map (lambda (G3fdd@x) (G2f75@chi-expr G3fdd@x G3fd0@r G3fd1@mr)) G3fcf@init*) ((lambda (G3fdf@lhs G3fe0@rhs) ((lambda (G3fe3@t) (if (memv G3fe3@t '(defun)) ((lambda (G3fe5@rhs) (cons (list 'set! G3fdf@lhs G3fe5@rhs) (G3fd7@f (cdr G3fd9@lhs*) (cdr G3fda@rhs*)))) (G2f7f@chi-defun (cdr G3fe0@rhs) G3fd0@r G3fd1@mr)) (if (memv G3fe3@t '(expr)) ((lambda (G3fe7@rhs) (cons (list 'set! G3fdf@lhs G3fe7@rhs) (G3fd7@f (cdr G3fd9@lhs*) (cdr G3fda@rhs*)))) (G2f75@chi-expr (cdr G3fe0@rhs) G3fd0@r G3fd1@mr)) (if (memv G3fe3@t '(top-expr)) ((lambda (G3fe9@e) (cons G3fe9@e (G3fd7@f (cdr G3fd9@lhs*) (cdr G3fda@rhs*)))) (G2f75@chi-expr (cdr G3fe0@rhs) G3fd0@r G3fd1@mr)) (error 'expand-interaction '"invallid" G3fe0@rhs))))) (car G3fe0@rhs))) (car G3fd9@lhs*) (car G3fda@rhs*)))))) G3fd7@f) G3fcd@lhs* G3fce@rhs*))) (set! G2f85@chi-rhs* (lambda (G3feb@rhs* G3fec@r G3fed@mr) ((letrec ((G3ff1@f (lambda (G3ff3@ls) (if (null? G3ff3@ls) '() ((lambda (G3ff5@a) (cons G3ff5@a (G3ff1@f (cdr G3ff3@ls)))) (G2f81@chi-rhs (car G3ff3@ls) G3fec@r G3fed@mr)))))) G3ff1@f) G3feb@rhs*))) (set! G2f87@find-bound=? (lambda (G3ff7@x G3ff8@lhs* G3ff9@rhs*) (if (null? G3ff8@lhs*) '#f (if (G2d58@bound-id=? G3ff7@x (car G3ff8@lhs*)) (car G3ff9@rhs*) (G2f87@find-bound=? G3ff7@x (cdr G3ff8@lhs*) (cdr G3ff9@rhs*)))))) (set! G2f89@find-dups (lambda (G3ffd@ls) ((letrec ((G3fff@f (lambda (G4001@ls G4002@dups) (if (null? G4001@ls) G4002@dups ((lambda (G4005@t) (if G4005@t ((lambda (G4007@x) (G3fff@f (cdr G4001@ls) (cons (list (car G4001@ls) G4007@x) G4002@dups))) G4005@t) (G3fff@f (cdr G4001@ls) G4002@dups))) (G2f87@find-bound=? (car G4001@ls) (cdr G4001@ls) (cdr G4001@ls))))))) G3fff@f) G3ffd@ls '()))) (set! G2f8b@chi-internal (lambda (G4009@e* G400a@r G400b@mr) ((lambda (G400f@rib) (call-with-values (lambda () (G2fae@chi-body* (map (lambda (G4019@x) (G2d3e@add-subst G400f@rib G4019@x)) (G2d50@syntax->list G4009@e*)) G400a@r G400b@mr '() '() '() '() '() G400f@rib '#f)) (lambda (G401b@G4011 G401c@G4012 G401d@G4013 G401e@G4014 G401f@G4015 G4020@G4016 G4021@G4017 G4022@G4018) ((lambda (G402b@_exp* G402c@kwd* G402d@mod** G402e@rhs* G402f@lex* G4030@mr G4031@r G4032@e*) (begin (if (null? G4032@e*) (G303c@syntax-violation '#f '"no expression in body" G4032@e*) (void)) ((lambda (G403b@init*) ((lambda (G403d@rhs*) ((lambda () (G2cb2@G2c26@build-letrec* '#f (reverse G402f@lex*) (reverse G403d@rhs*) (G2caf@G2c20@build-sequence '#f G403b@init*))))) (G2f85@chi-rhs* G402e@rhs* G4031@r G4030@mr))) (G2f71@chi-expr* (append (apply append (reverse G402d@mod**)) G4032@e*) G4031@r G4030@mr)))) G4022@G4018 G4021@G4017 G4020@G4016 G401f@G4015 G401e@G4014 G401d@G4013 G401c@G4012 G401b@G4011)))) (G2cfd@make-empty-rib)))) (set! G2f8d@parse-module (lambda (G403f@e) ((lambda (G4041@t) ((lambda (G4043@ls/false) (if G4043@ls/false (apply (lambda (G4045@export* G4046@b*) (begin (if (not (for-all G2d52@id? G4045@export*)) (G303c@syntax-violation '#f '"module exports must be identifiers" G403f@e) (void)) (values '#f (list->vector G4045@export*) G4046@b*))) G4043@ls/false) ((lambda (G4049@t) ((lambda (G404b@ls/false) (if G404b@ls/false (apply (lambda (G404d@name G404e@export* G404f@b*) (begin (if (not (G2d52@id? G404d@name)) (G303c@syntax-violation '#f '"module name must be an identifier" G403f@e) (void)) (if (not (for-all G2d52@id? G404e@export*)) (G303c@syntax-violation '#f '"module exports must be identifiers" G403f@e) (void)) (values G404d@name (list->vector G404e@export*) G404f@b*))) G404b@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G4049@t))) (G2f51@syntax-dispatch G4049@t '(_ any each-any . each-any)))) G4041@t))) (G2f51@syntax-dispatch G4041@t '(_ each-any . each-any)))) G403f@e))) (set! G2f93@G2f8e (make-record-type-descriptor 'module-interface '#f 'G2f91 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2f95@G2f90 '#f) (set! G2f97@G2f8f (make-record-constructor-descriptor G2f93@G2f8e '#f G2f95@G2f90)) (set! G2f9a@module-interface? (record-predicate G2f93@G2f8e)) (set! G2f9c@make-module-interface (record-constructor G2f97@G2f8f)) (set! G2f9e@module-interface-first-mark (record-accessor G2f93@G2f8e '0)) (set! G2fa0@module-interface-exp-id-vec (record-accessor G2f93@G2f8e '1)) (set! G2fa2@module-interface-exp-lab-vec (record-accessor G2f93@G2f8e '2)) (set! G2fa4@set-module-interface-first-mark! (record-mutator G2f93@G2f8e '0)) (set! G2fa6@set-module-interface-exp-id-vec! (record-mutator G2f93@G2f8e '1)) (set! G2fa8@set-module-interface-exp-lab-vec! (record-mutator G2f93@G2f8e '2)) (set! G2faa@module-interface-exp-id* (lambda (G4053@iface G4054@id) ((lambda (G4058@diff-marks) (begin (set! G4058@diff-marks (lambda (G405f@ls G4060@x) (begin (if (null? G405f@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4063@a) (if (eq? G4063@a G4060@x) '() (cons G4063@a (G4058@diff-marks (cdr G405f@ls) G4060@x)))) (car G405f@ls))))) ((lambda (G4059@diff G405a@id-vec) (if (null? G4059@diff) G405a@id-vec (vector-map (lambda (G405d@x) (G2d1c@make-stx (G2d1e@stx-expr G405d@x) (append G4059@diff (G2d20@stx-mark* G405d@x)) '() '())) G405a@id-vec))) (G4058@diff-marks (G2d20@stx-mark* G4054@id) (G2f9e@module-interface-first-mark G4053@iface)) (G2fa0@module-interface-exp-id-vec G4053@iface)))) '#f))) (set! G2fac@chi-internal-module (lambda (G4065@e G4066@r G4067@mr G4068@lex* G4069@rhs* G406a@mod** G406b@kwd*) (call-with-values (lambda () (G2f8d@parse-module G4065@e)) (lambda (G4076@G4073 G4077@G4074 G4078@G4075) ((lambda (G407c@e* G407d@exp-id* G407e@name) ((lambda (G4082@rib) ((lambda (G4084@e*) ((lambda () (call-with-values (lambda () (G2fae@chi-body* G4084@e* G4066@r G4067@mr G4068@lex* G4069@rhs* G406a@mod** G406b@kwd* '() G4082@rib '#f)) (lambda (G408e@G4086 G408f@G4087 G4090@G4088 G4091@G4089 G4092@G408a G4093@G408b G4094@G408c G4095@G408d) ((lambda (G409e@_exp* G409f@kwd* G40a0@mod** G40a1@rhs* G40a2@lex* G40a3@mr G40a4@r G40a5@e*) ((lambda (G40ae@exp-lab* G40af@mod**) (if (not G407e@name) (values G40a2@lex* G40a1@rhs* G407d@exp-id* G40ae@exp-lab* G40a4@r G40a3@mr G40af@mod** G409f@kwd*) ((lambda (G40b2@lab G40b3@iface) (values G40a2@lex* G40a1@rhs* (vector G407e@name) (vector G40b2@lab) (cons (cons G40b2@lab (cons '$module G40b3@iface)) G40a4@r) (cons (cons G40b2@lab (cons '$module G40b3@iface)) G40a3@mr) G40af@mod** G409f@kwd*)) (G2cd2@gen-label 'module) (G2f9c@make-module-interface (car (G2d20@stx-mark* G407e@name)) (vector-map (lambda (G40b6@x) (G2d1c@make-stx (G2d1e@stx-expr G40b6@x) (G2d20@stx-mark* G40b6@x) '() '())) G407d@exp-id*) G40ae@exp-lab*)))) (vector-map (lambda (G40b8@x) (or (G2d6c@id->label (G2d1c@make-stx (G2d54@id->sym G40b8@x) (G2d20@stx-mark* G40b8@x) (list G4082@rib) '())) (G303c@syntax-violation '#f '"cannot find module export" G40b8@x))) G407d@exp-id*) (cons G40a5@e* G40a0@mod**))) G4095@G408d G4094@G408c G4093@G408b G4092@G408a G4091@G4089 G4090@G4088 G408f@G4087 G408e@G4086)))))) (map (lambda (G40ba@x) (G2d3e@add-subst G4082@rib G40ba@x)) (G2d50@syntax->list G407c@e*)))) (G2cfd@make-empty-rib))) G4078@G4075 G4077@G4074 G4076@G4073))))) (set! G2fae@chi-body* (lambda (G40bc@e* G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40c2@kwd* G40c3@exp* G40c4@rib G40c5@top?) (if (null? G40bc@e*) (values G40bc@e* G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40c2@kwd* G40c3@exp*) ((lambda (G40d0@e) (call-with-values (lambda () (G2d7a@syntax-type G40d0@e G40bd@r)) (lambda (G40d5@G40d2 G40d6@G40d3 G40d7@G40d4) ((lambda (G40db@kwd G40dc@value G40dd@type) ((lambda (G40e1@kwd*) ((lambda (G40e3@t) (if (memv G40e3@t '(define)) (call-with-values (lambda () (G2ed5@parse-define G40d0@e)) (lambda (G40e7@G40e5 G40e8@G40e6) ((lambda (G40eb@rhs G40ec@id) (begin (if (G2d60@bound-id-member? G40ec@id G40e1@kwd*) (G303c@syntax-violation '#f '"cannot redefine keyword" G40d0@e) (void)) (call-with-values (lambda () (G2cd6@gen-define-label+loc G40ec@id G40c4@rib)) (lambda (G40f1@G40ef G40f2@G40f0) ((lambda (G40f5@lex G40f6@lab) (begin (G2d03@extend-rib! G40c4@rib G40ec@id G40f6@lab) (G2fae@chi-body* (cdr G40bc@e*) (G2ee3@add-lexical G40f6@lab G40f5@lex G40bd@r) G40be@mr (cons G40f5@lex G40bf@lex*) (cons G40eb@rhs G40c0@rhs*) G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?))) G40f2@G40f0 G40f1@G40ef))))) G40e8@G40e6 G40e7@G40e5))) (if (memv G40e3@t '(define-syntax)) (call-with-values (lambda () (G2ed7@parse-define-syntax G40d0@e)) (lambda (G40fb@G40f9 G40fc@G40fa) ((lambda (G40ff@rhs G4100@id) (begin (if (G2d60@bound-id-member? G4100@id G40e1@kwd*) (G303c@syntax-violation '#f '"cannot redefine keyword" G40d0@e) (void)) ((lambda (G4103@lab G4104@expanded-rhs) (begin (G2d03@extend-rib! G40c4@rib G4100@id G4103@lab) ((lambda (G4107@b) (G2fae@chi-body* (cdr G40bc@e*) (cons (cons G4103@lab G4107@b) G40bd@r) (cons (cons G4103@lab G4107@b) G40be@mr) G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?)) (G2d92@make-eval-transformer G4104@expanded-rhs)))) (G2cd8@gen-define-label G4100@id G40c4@rib) (G2fb0@expand-transformer G40ff@rhs G40be@mr)))) G40fc@G40fa G40fb@G40f9))) (if (memv G40e3@t '(let-syntax letrec-syntax)) ((lambda (G4109@t) ((lambda (G410b@ls/false) (if (and G410b@ls/false (apply (lambda (G410d@xlhs* G410e@xrhs* G410f@xbody*) (if (not (G2d5c@valid-bound-ids? G410d@xlhs*)) (G303c@syntax-violation '#f '"invalid identifiers" G40d0@e) (void))) G410b@ls/false)) (apply (lambda (G4113@xlhs* G4114@xrhs* G4115@xbody*) ((lambda (G4119@xlab*) ((lambda (G411b@xrib) ((lambda (G411d@xb*) ((lambda () (G2fae@chi-body* (append (map (lambda (G411f@x) (G2d3e@add-subst G411b@xrib G411f@x)) G4115@xbody*) (cdr G40bc@e*)) (append (map cons G4119@xlab* G411d@xb*) G40bd@r) (append (map cons G4119@xlab* G411d@xb*) G40be@mr) G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?)))) (map (lambda (G4121@x) (G2d92@make-eval-transformer (G2fb0@expand-transformer (if (eq? G40dd@type 'let-syntax) G4121@x (G2d3e@add-subst G411b@xrib G4121@x)) G40be@mr))) G4114@xrhs*))) (G2d0d@make-full-rib G4113@xlhs* G4119@xlab*))) (map G2cd2@gen-label G4113@xlhs*))) G410b@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G4109@t))) (G2f51@syntax-dispatch G4109@t '(_ #(each (any any)) . each-any)))) G40d0@e) (if (memv G40e3@t '(begin)) ((lambda (G4123@t) ((lambda (G4125@ls/false) (if G4125@ls/false (apply (lambda (G4127@x*) (G2fae@chi-body* (append G4127@x* (cdr G40bc@e*)) G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?)) G4125@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G4123@t))) (G2f51@syntax-dispatch G4123@t '(_ . each-any)))) G40d0@e) (if (memv G40e3@t '(global-macro global-macro!)) (G2fae@chi-body* (cons (G2d3e@add-subst G40c4@rib (G2f6f@chi-global-macro G40dc@value G40d0@e)) (cdr G40bc@e*)) G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?) (if (memv G40e3@t '(local-macro local-macro!)) (G2fae@chi-body* (cons (G2d3e@add-subst G40c4@rib (G2f6d@chi-local-macro G40dc@value G40d0@e)) (cdr G40bc@e*)) G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?) (if (memv G40e3@t '(macro macro!)) (G2fae@chi-body* (cons (G2d3e@add-subst G40c4@rib (G2f6b@chi-macro G40dc@value G40d0@e)) (cdr G40bc@e*)) G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?) (if (memv G40e3@t '(module)) (call-with-values (lambda () (G2fac@chi-internal-module G40d0@e G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd*)) (lambda (G4131@G4129 G4132@G412a G4133@G412b G4134@G412c G4135@G412d G4136@G412e G4137@G412f G4138@G4130) ((lambda (G4141@kwd* G4142@mod** G4143@mr G4144@r G4145@m-exp-lab* G4146@m-exp-id* G4147@rhs* G4148@lex*) (begin (vector-for-each (lambda (G4151@id G4152@lab) (G2d03@extend-rib! G40c4@rib G4151@id G4152@lab)) G4146@m-exp-id* G4145@m-exp-lab*) (G2fae@chi-body* (cdr G40bc@e*) G4144@r G4143@mr G4148@lex* G4147@rhs* G4142@mod** G4141@kwd* G40c3@exp* G40c4@rib G40c5@top?))) G4138@G4130 G4137@G412f G4136@G412e G4135@G412d G4134@G412c G4133@G412b G4132@G412a G4131@G4129))) (if (memv G40e3@t '(library)) (begin (G301e@library-expander (G2d68@stx->datum G40d0@e)) (G2fae@chi-body* (cdr G40bc@e*) G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?)) (if (memv G40e3@t '(export)) ((lambda (G4155@t) ((lambda (G4157@ls/false) (if G4157@ls/false (apply (lambda (G4159@exp-decl*) (G2fae@chi-body* (cdr G40bc@e*) G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* (append G4159@exp-decl* G40c3@exp*) G40c4@rib G40c5@top?)) G4157@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G4155@t))) (G2f51@syntax-dispatch G4155@t '(_ . each-any)))) G40d0@e) (if (memv G40e3@t '(import)) ((lambda () ((lambda (G415c@module-import? G415e@module-import G4160@library-import) (begin (set! G415c@module-import? (lambda (G41a8@e) ((lambda (G41aa@t) ((lambda (G41ac@ls/false) (if (and G41ac@ls/false (apply (lambda (G41ae@id) (G2d52@id? G41ae@id)) G41ac@ls/false)) (apply (lambda (G41b0@id) '#t) G41ac@ls/false) ((lambda (G41b2@t) ((lambda (G41b4@ls/false) (if G41b4@ls/false (apply (lambda (G41b6@imp*) '#f) G41b4@ls/false) ((lambda (G41b8@t) ((lambda (G41ba@ls/false) (if G41ba@ls/false (apply (lambda () (G303c@syntax-violation '#f '"malformed import form" G41a8@e)) G41ba@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G41b8@t))) (G2f51@syntax-dispatch G41b8@t '_))) G41b2@t))) (G2f51@syntax-dispatch G41b2@t '(_ . each-any)))) G41aa@t))) (G2f51@syntax-dispatch G41aa@t '(_ any)))) G41a8@e))) (set! G415e@module-import (lambda (G4189@e G418a@r) ((lambda (G418d@t) ((lambda (G418f@ls/false) (if (and G418f@ls/false (apply (lambda (G4191@id) (G2d52@id? G4191@id)) G418f@ls/false)) (apply (lambda (G4193@id) (call-with-values (lambda () (G2d7a@syntax-type G4193@id G418a@r)) (lambda (G4198@G4195 G4199@G4196 G419a@G4197) ((lambda (G419e@kwd G419f@value G41a0@type) ((lambda (G41a4@t) (if (memv G41a4@t '($module)) ((lambda (G41a6@iface) (values (G2faa@module-interface-exp-id* G41a6@iface G4193@id) (G2fa2@module-interface-exp-lab-vec G41a6@iface))) G419f@value) (G303c@syntax-violation '#f '"invalid import" G4189@e))) G41a0@type)) G419a@G4197 G4199@G4196 G4198@G4195)))) G418f@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G418d@t))) (G2f51@syntax-dispatch G418d@t '(_ any)))) G4189@e))) (set! G4160@library-import (lambda (G416f@e) ((lambda (G4171@t) ((lambda (G4173@ls/false) (if G4173@ls/false (apply (lambda (G4175@ctxt G4176@imp*) (call-with-values (lambda () (G2fb8@parse-import-spec* (G3042@syntax->datum G4176@imp*))) (lambda (G417b@G4179 G417c@G417a) ((lambda (G417f@subst-labels G4180@subst-names) (values (vector-map (lambda (G4183@name) (G2d30@datum->stx G4175@ctxt G4183@name)) G4180@subst-names) G417f@subst-labels)) G417c@G417a G417b@G4179)))) G4173@ls/false) ((lambda (G4185@t) ((lambda (G4187@ls/false) (if G4187@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid import form" G416f@e)) G4187@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G4185@t))) (G2f51@syntax-dispatch G4185@t '_))) G4171@t))) (G2f51@syntax-dispatch G4171@t '(any . each-any)))) G416f@e))) (begin (call-with-values (lambda () (if (G415c@module-import? G40d0@e) (G415e@module-import G40d0@e G40bd@r) (G4160@library-import G40d0@e))) (lambda (G4163@G4161 G4164@G4162) ((lambda (G4167@lab* G4168@id*) (vector-for-each (lambda (G416b@id G416c@lab) (G2d03@extend-rib! G40c4@rib G416b@id G416c@lab)) G4168@id* G4167@lab*)) G4164@G4162 G4163@G4161))) (G2fae@chi-body* (cdr G40bc@e*) G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?)))) '#f '#f '#f))) (if G40c5@top? (G2fae@chi-body* (cdr G40bc@e*) G40bd@r G40be@mr (cons (G2cce@gen-lexical 'dummy) G40bf@lex*) (cons (cons 'top-expr G40d0@e) G40c0@rhs*) G40c1@mod** G40e1@kwd* G40c3@exp* G40c4@rib G40c5@top?) (values G40bc@e* G40bd@r G40be@mr G40bf@lex* G40c0@rhs* G40c1@mod** G40e1@kwd* G40c3@exp*)))))))))))))) G40dd@type)) (if (G2d52@id? G40db@kwd) (cons G40db@kwd G40c2@kwd*) G40c2@kwd*))) G40d7@G40d4 G40d6@G40d3 G40d5@G40d2)))) (car G40bc@e*))))) (set! G2fb0@expand-transformer (lambda (G41bc@expr G41bd@r) ((lambda (G41c0@rtc) ((lambda (G41c2@expanded-rhs) (begin (for-each ((lambda (G41c4@mark-visit) (lambda (G41c6@x) (begin (G2b69@G2a10@invoke-library G41c6@x) (G41c4@mark-visit G41c6@x)))) (G2fc0@vis-collector)) (G41c0@rtc)) G41c2@expanded-rhs)) ((lambda (G41cc@G41c8 G41cd@G41c9 G41ce@G41ca G41cf@G41cb) ((lambda (G41d4@swap) (dynamic-wind G41d4@swap (lambda () (G2f75@chi-expr G41bc@expr G41bd@r G41bd@r)) G41d4@swap)) (lambda () (begin ((lambda (G41d6@t) (begin (G41cc@G41c8 G41ce@G41ca) (set! G41ce@G41ca G41d6@t))) (G41cc@G41c8)) ((lambda (G41d8@t) (begin (G41cd@G41c9 G41cf@G41cb) (set! G41cf@G41cb G41d8@t))) (G41cd@G41c9)))))) G2fbe@inv-collector G2fc0@vis-collector G41c0@rtc (lambda (G41da@x) (values))))) (G2fbc@make-collector)))) (set! G2fb2@parse-exports (lambda (G41dc@exp*) ((letrec ((G41de@f (lambda (G41e0@exp* G41e1@int* G41e2@ext*) (if (null? G41e0@exp*) (begin (if (not (G2d5c@valid-bound-ids? G41e2@ext*)) (G303c@syntax-violation 'export '"invalid exports" (G2f89@find-dups G41e2@ext*)) (void)) (values (map G3042@syntax->datum G41e2@ext*) G41e1@int*)) ((lambda (G41e6@t) ((lambda (G41e8@ls/false) (if G41e8@ls/false (apply (lambda (G41ea@rename G41eb@i* G41ec@e*) (begin (if (not (and (eq? (G3042@syntax->datum G41ea@rename) 'rename) (for-all G2d52@id? G41eb@i*) (for-all G2d52@id? G41ec@e*))) (G303c@syntax-violation 'export '"invalid export specifier" (car G41e0@exp*)) (void)) (G41de@f (cdr G41e0@exp*) (append G41eb@i* G41e1@int*) (append G41ec@e* G41e2@ext*)))) G41e8@ls/false) ((lambda (G41f0@t) ((lambda (G41f2@ls/false) (if G41f2@ls/false (apply (lambda (G41f4@ie) (begin (if (not (G2d52@id? G41f4@ie)) (G303c@syntax-violation 'export '"invalid export" G41f4@ie) (void)) (G41de@f (cdr G41e0@exp*) (cons G41f4@ie G41e1@int*) (cons G41f4@ie G41e2@ext*)))) G41f2@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G41f0@t))) (G2f51@syntax-dispatch G41f0@t 'any))) G41e6@t))) (G2f51@syntax-dispatch G41e6@t '(any . #(each (any any)))))) (car G41e0@exp*)))))) G41de@f) G41dc@exp* '() '()))) (set! G2fb4@parse-library-name (lambda (G41f6@spec) ((lambda (G41f9@parse) (begin (set! G41f9@parse (lambda (G4204@x) ((lambda (G4206@t) ((lambda (G4208@ls/false) (if (and G4208@ls/false (apply (lambda (G420a@v*) (for-all (lambda (G420c@x) ((lambda (G420e@x) (and (integer? G420e@x) (exact? G420e@x))) (G3042@syntax->datum G420c@x))) G420a@v*)) G4208@ls/false)) (apply (lambda (G4210@v*) (values '() (map G3042@syntax->datum G4210@v*))) G4208@ls/false) ((lambda (G4212@t) ((lambda (G4214@ls/false) (if (and G4214@ls/false (apply (lambda (G4216@x G4217@rest) (symbol? (G3042@syntax->datum G4216@x))) G4214@ls/false)) (apply (lambda (G421a@x G421b@rest) (call-with-values (lambda () (G41f9@parse G421b@rest)) (lambda (G4220@G421e G4221@G421f) ((lambda (G4224@v* G4225@x*) (values (cons (G3042@syntax->datum G421a@x) G4225@x*) G4224@v*)) G4221@G421f G4220@G421e)))) G4214@ls/false) ((lambda (G4228@t) ((lambda (G422a@ls/false) (if G422a@ls/false (apply (lambda () (values '() '())) G422a@ls/false) ((lambda (G422c@t) ((lambda (G422e@ls/false) (if G422e@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid library name" G41f6@spec)) G422e@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G422c@t))) (G2f51@syntax-dispatch G422c@t '_))) G4228@t))) (G2f51@syntax-dispatch G4228@t '()))) G4212@t))) (G2f51@syntax-dispatch G4212@t '(any . any)))) G4206@t))) (G2f51@syntax-dispatch G4206@t '(each-any)))) G4204@x))) (call-with-values (lambda () (G41f9@parse G41f6@spec)) (lambda (G41fc@G41fa G41fd@G41fb) ((lambda (G4200@ver* G4201@name*) (begin (if (null? G4201@name*) (G303c@syntax-violation '#f '"empty library name" G41f6@spec) (void)) (values G4201@name* G4200@ver*))) G41fd@G41fb G41fc@G41fa))))) '#f))) (set! G2fb6@parse-library (lambda (G4230@e) ((lambda (G4232@t) ((lambda (G4234@ls/false) (if (and G4234@ls/false (apply (lambda (G4236@library G4237@name* G4238@export G4239@exp* G423a@import G423b@imp* G423c@b*) (and (eq? (G3042@syntax->datum G4238@export) 'export) (eq? (G3042@syntax->datum G423a@import) 'import) (eq? (G3042@syntax->datum G4236@library) 'library))) G4234@ls/false)) (apply (lambda (G4244@library G4245@name* G4246@export G4247@exp* G4248@import G4249@imp* G424a@b*) (values G4245@name* G4247@exp* G4249@imp* G424a@b*)) G4234@ls/false) ((lambda (G4252@t) ((lambda (G4254@ls/false) (if G4254@ls/false (apply (lambda () (G303c@syntax-violation '#f '"malformed library" G4230@e)) G4254@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G4252@t))) (G2f51@syntax-dispatch G4252@t '_))) G4232@t))) (G2f51@syntax-dispatch G4232@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4230@e))) (set! G2fb8@parse-import-spec* ((lambda () ((lambda (G4257@idsyn? G4259@dup-error G425b@merge-substs G425d@exclude* G425f@find* G4261@rem* G4263@remove-dups G4265@parse-library-name G4267@import-library G4269@get-import G426b@add-imports!) (begin (set! G4257@idsyn? (lambda (G4456@x) (symbol? (G3042@syntax->datum G4456@x)))) (set! G4259@dup-error (lambda (G4454@name) (G303c@syntax-violation 'import '"two imports with different bindings" G4454@name))) (set! G425b@merge-substs (lambda (G4442@s G4443@subst) ((lambda (G4447@insert-to-subst) (begin (set! G4447@insert-to-subst (lambda (G4448@a G4449@subst) ((lambda (G444c@name G444d@label) ((lambda (G4450@t) (if G4450@t ((lambda (G4452@x) (if (eq? (cdr G4452@x) G444d@label) G4449@subst (G4259@dup-error G444c@name))) G4450@t) (cons G4448@a G4449@subst))) (assq G444c@name G4449@subst))) (car G4448@a) (cdr G4448@a)))) (if (null? G4442@s) G4443@subst (G4447@insert-to-subst (car G4442@s) (G425b@merge-substs (cdr G4442@s) G4443@subst))))) '#f))) (set! G425d@exclude* (lambda (G4418@sym* G4419@subst) ((lambda (G441d@exclude) (begin (set! G441d@exclude (lambda (G4432@sym G4433@subst) (if (null? G4433@subst) (G303c@syntax-violation 'import '"cannot rename unbound identifier" G4432@sym) (if (eq? G4432@sym (caar G4433@subst)) (values (cdar G4433@subst) (cdr G4433@subst)) ((lambda (G4436@a) (call-with-values (lambda () (G441d@exclude G4432@sym (cdr G4433@subst))) (lambda (G443a@G4438 G443b@G4439) ((lambda (G443e@subst G443f@old) (values G443f@old (cons G4436@a G443e@subst))) G443b@G4439 G443a@G4438)))) (car G4433@subst)))))) (if (null? G4418@sym*) (values '() G4419@subst) (call-with-values (lambda () (G441d@exclude (car G4418@sym*) G4419@subst)) (lambda (G4420@G441e G4421@G441f) ((lambda (G4424@subst G4425@old) (call-with-values (lambda () (G425d@exclude* (cdr G4418@sym*) G4424@subst)) (lambda (G442a@G4428 G442b@G4429) ((lambda (G442e@subst G442f@old*) (values (cons G4425@old G442f@old*) G442e@subst)) G442b@G4429 G442a@G4428)))) G4421@G441f G4420@G441e)))))) '#f))) (set! G425f@find* (lambda (G4410@sym* G4411@subst) (map (lambda (G4414@x) ((lambda (G4416@t) (if G4416@t (cdr G4416@t) (G303c@syntax-violation 'import '"cannot find identifier" G4414@x))) (assq G4414@x G4411@subst))) G4410@sym*))) (set! G4261@rem* (lambda (G4408@sym* G4409@subst) ((letrec ((G440c@f (lambda (G440e@subst) (if (null? G440e@subst) '() (if (memq (caar G440e@subst) G4408@sym*) (G440c@f (cdr G440e@subst)) (cons (car G440e@subst) (G440c@f (cdr G440e@subst)))))))) G440c@f) G4409@subst))) (set! G4263@remove-dups (lambda (G4406@ls) (if (null? G4406@ls) '() (if (memq (car G4406@ls) (cdr G4406@ls)) (G4263@remove-dups (cdr G4406@ls)) (cons (car G4406@ls) (G4263@remove-dups (cdr G4406@ls))))))) (set! G4265@parse-library-name (lambda (G4320@spec) ((lambda (G4323@subversion? G4325@subversion-pred G4327@version-pred) (begin (set! G4323@subversion? (lambda (G4402@x) ((lambda (G4404@x) (and (integer? G4404@x) (exact? G4404@x) (>= G4404@x '0))) (G3042@syntax->datum G4402@x)))) (set! G4325@subversion-pred (lambda (G43a2@x*) ((lambda (G43a4@t) ((lambda (G43a6@ls/false) (if (and G43a6@ls/false (apply (lambda (G43a8@n) (G4323@subversion? G43a8@n)) G43a6@ls/false)) (apply (lambda (G43aa@n) (lambda (G43ac@x) (= G43ac@x (G3042@syntax->datum G43aa@n)))) G43a6@ls/false) ((lambda (G43ae@t) ((lambda (G43b0@ls/false) (if (and G43b0@ls/false (apply (lambda (G43b2@p? G43b3@sub*) (eq? (G3042@syntax->datum G43b2@p?) 'and)) G43b0@ls/false)) (apply (lambda (G43b6@p? G43b7@sub*) ((lambda (G43ba@p*) (lambda (G43bc@x) (for-all (lambda (G43be@p) (G43be@p G43bc@x)) G43ba@p*))) (map G4325@subversion-pred G43b7@sub*))) G43b0@ls/false) ((lambda (G43c0@t) ((lambda (G43c2@ls/false) (if (and G43c2@ls/false (apply (lambda (G43c4@p? G43c5@sub*) (eq? (G3042@syntax->datum G43c4@p?) 'or)) G43c2@ls/false)) (apply (lambda (G43c8@p? G43c9@sub*) ((lambda (G43cc@p*) (lambda (G43ce@x) (exists (lambda (G43d0@p) (G43d0@p G43ce@x)) G43cc@p*))) (map G4325@subversion-pred G43c9@sub*))) G43c2@ls/false) ((lambda (G43d2@t) ((lambda (G43d4@ls/false) (if (and G43d4@ls/false (apply (lambda (G43d6@p? G43d7@sub) (eq? (G3042@syntax->datum G43d6@p?) 'not)) G43d4@ls/false)) (apply (lambda (G43da@p? G43db@sub) ((lambda (G43de@p) (lambda (G43e0@x) (not (G43de@p G43e0@x)))) (G4325@subversion-pred G43db@sub))) G43d4@ls/false) ((lambda (G43e2@t) ((lambda (G43e4@ls/false) (if (and G43e4@ls/false (apply (lambda (G43e6@p? G43e7@n) (and (eq? (G3042@syntax->datum G43e6@p?) '<=) (G4323@subversion? G43e7@n))) G43e4@ls/false)) (apply (lambda (G43ea@p? G43eb@n) (lambda (G43ee@x) (<= G43ee@x (G3042@syntax->datum G43eb@n)))) G43e4@ls/false) ((lambda (G43f0@t) ((lambda (G43f2@ls/false) (if (and G43f2@ls/false (apply (lambda (G43f4@p? G43f5@n) (and (eq? (G3042@syntax->datum G43f4@p?) '>=) (G4323@subversion? G43f5@n))) G43f2@ls/false)) (apply (lambda (G43f8@p? G43f9@n) (lambda (G43fc@x) (>= G43fc@x (G3042@syntax->datum G43f9@n)))) G43f2@ls/false) ((lambda (G43fe@t) ((lambda (G4400@ls/false) (if G4400@ls/false (apply (lambda () (G303c@syntax-violation 'import '"invalid sub-version spec" G4320@spec G43a2@x*)) G4400@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G43fe@t))) (G2f51@syntax-dispatch G43fe@t '_))) G43f0@t))) (G2f51@syntax-dispatch G43f0@t '(any any)))) G43e2@t))) (G2f51@syntax-dispatch G43e2@t '(any any)))) G43d2@t))) (G2f51@syntax-dispatch G43d2@t '(any any)))) G43c0@t))) (G2f51@syntax-dispatch G43c0@t '(any . each-any)))) G43ae@t))) (G2f51@syntax-dispatch G43ae@t '(any . each-any)))) G43a4@t))) (G2f51@syntax-dispatch G43a4@t 'any))) G43a2@x*))) (set! G4327@version-pred (lambda (G4352@x*) ((lambda (G4354@t) ((lambda (G4356@ls/false) (if G4356@ls/false (apply (lambda () (lambda (G4358@x) '#t)) G4356@ls/false) ((lambda (G435a@t) ((lambda (G435c@ls/false) (if (and G435c@ls/false (apply (lambda (G435e@c G435f@ver*) (eq? (G3042@syntax->datum G435e@c) 'and)) G435c@ls/false)) (apply (lambda (G4362@c G4363@ver*) ((lambda (G4366@p*) (lambda (G4368@x) (for-all (lambda (G436a@p) (G436a@p G4368@x)) G4366@p*))) (map G4327@version-pred G4363@ver*))) G435c@ls/false) ((lambda (G436c@t) ((lambda (G436e@ls/false) (if (and G436e@ls/false (apply (lambda (G4370@c G4371@ver*) (eq? (G3042@syntax->datum G4370@c) 'or)) G436e@ls/false)) (apply (lambda (G4374@c G4375@ver*) ((lambda (G4378@p*) (lambda (G437a@x) (exists (lambda (G437c@p) (G437c@p G437a@x)) G4378@p*))) (map G4327@version-pred G4375@ver*))) G436e@ls/false) ((lambda (G437e@t) ((lambda (G4380@ls/false) (if (and G4380@ls/false (apply (lambda (G4382@c G4383@ver) (eq? (G3042@syntax->datum G4382@c) 'not)) G4380@ls/false)) (apply (lambda (G4386@c G4387@ver) ((lambda (G438a@p) (lambda (G438c@x) (not (G438a@p G438c@x)))) (G4327@version-pred G4387@ver))) G4380@ls/false) ((lambda (G438e@t) ((lambda (G4390@ls/false) (if G4390@ls/false (apply (lambda (G4392@sub*) ((lambda (G4394@p*) (lambda (G4396@x) ((letrec ((G4398@f (lambda (G439a@p* G439b@x) (if (null? G439a@p*) '#t (if (null? G439b@x) '#f (and ((car G439a@p*) (car G439b@x)) (G4398@f (cdr G439a@p*) (cdr G439b@x)))))))) G4398@f) G4394@p* G4396@x))) (map G4325@subversion-pred G4392@sub*))) G4390@ls/false) ((lambda (G439e@t) ((lambda (G43a0@ls/false) (if G43a0@ls/false (apply (lambda () (G303c@syntax-violation 'import '"invalid version spec" G4320@spec G4352@x*)) G43a0@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G439e@t))) (G2f51@syntax-dispatch G439e@t '_))) G438e@t))) (G2f51@syntax-dispatch G438e@t 'each-any))) G437e@t))) (G2f51@syntax-dispatch G437e@t '(any any)))) G436c@t))) (G2f51@syntax-dispatch G436c@t '(any . each-any)))) G435a@t))) (G2f51@syntax-dispatch G435a@t '(any . each-any)))) G4354@t))) (G2f51@syntax-dispatch G4354@t '()))) G4352@x*))) ((letrec ((G4328@f (lambda (G432a@x) ((lambda (G432c@t) ((lambda (G432e@ls/false) (if G432e@ls/false (apply (lambda (G4330@version-spec*) (values '() (G4327@version-pred G4330@version-spec*))) G432e@ls/false) ((lambda (G4332@t) ((lambda (G4334@ls/false) (if (and G4334@ls/false (apply (lambda (G4336@x G4337@x*) (G4257@idsyn? G4336@x)) G4334@ls/false)) (apply (lambda (G433a@x G433b@x*) (call-with-values (lambda () (G4328@f G433b@x*)) (lambda (G4340@G433e G4341@G433f) ((lambda (G4344@pred G4345@name) (values (cons (G3042@syntax->datum G433a@x) G4345@name) G4344@pred)) G4341@G433f G4340@G433e)))) G4334@ls/false) ((lambda (G4348@t) ((lambda (G434a@ls/false) (if G434a@ls/false (apply (lambda () (values '() (lambda (G434c@x) '#t))) G434a@ls/false) ((lambda (G434e@t) ((lambda (G4350@ls/false) (if G4350@ls/false (apply (lambda () (G303c@syntax-violation '#f '"invalid import spec" G4320@spec)) G4350@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G434e@t))) (G2f51@syntax-dispatch G434e@t '_))) G4348@t))) (G2f51@syntax-dispatch G4348@t '()))) G4332@t))) (G2f51@syntax-dispatch G4332@t '(any . any)))) G432c@t))) (G2f51@syntax-dispatch G432c@t '(each-any)))) G432a@x)))) G4328@f) G4320@spec))) '#f '#f '#f))) (set! G4267@import-library (lambda (G4312@spec*) (call-with-values (lambda () (G4265@parse-library-name G4312@spec*)) (lambda (G4316@G4314 G4317@G4315) ((lambda (G431a@pred G431b@name) (begin (if (null? G431b@name) (G303c@syntax-violation 'import '"empty library name" G4312@spec*) (void)) ((lambda (G431e@lib) (begin (if (not G431e@lib) (G303c@syntax-violation 'import '"cannot find library with required name" G431b@name) (void)) (if (not (G431a@pred (G2b3a@G29b2@library-version G431e@lib))) (G303c@syntax-violation 'import '"library does not satisfy version specification" G4312@spec* G431e@lib) (void)) ((G2fc2@imp-collector) G431e@lib) (G2b3e@G29ba@library-subst G431e@lib))) (G2b62@G2a02@find-library-by-name G431b@name)))) G4317@G4315 G4316@G4314))))) (set! G4269@get-import (lambda (G4284@spec) ((lambda (G4286@t) ((lambda (G4288@ls/false) (if (and G4288@ls/false (apply (lambda (G428a@x G428b@x*) (not (memq (G3042@syntax->datum G428a@x) '(for rename except only prefix library)))) G4288@ls/false)) (apply (lambda (G428e@x G428f@x*) (G4267@import-library (cons G428e@x G428f@x*))) G4288@ls/false) ((lambda (G4292@t) ((lambda (G4294@ls/false) (if (and G4294@ls/false (apply (lambda (G4296@rename G4297@isp G4298@old* G4299@new*) (and (eq? (G3042@syntax->datum G4296@rename) 'rename) (for-all G4257@idsyn? G4298@old*) (for-all G4257@idsyn? G4299@new*))) G4294@ls/false)) (apply (lambda (G429e@rename G429f@isp G42a0@old* G42a1@new*) ((lambda (G42a6@subst G42a7@old* G42a8@new*) ((lambda (G42ac@old-label*) ((lambda (G42ae@subst) (G425b@merge-substs (map cons G42a8@new* G42ac@old-label*) G42ae@subst)) (G4261@rem* G42a7@old* G42a6@subst))) (G425f@find* G42a7@old* G42a6@subst))) (G4269@get-import G429f@isp) (map G3042@syntax->datum G42a0@old*) (map G3042@syntax->datum G42a1@new*))) G4294@ls/false) ((lambda (G42b0@t) ((lambda (G42b2@ls/false) (if (and G42b2@ls/false (apply (lambda (G42b4@except G42b5@isp G42b6@sym*) (and (eq? (G3042@syntax->datum G42b4@except) 'except) (for-all G4257@idsyn? G42b6@sym*))) G42b2@ls/false)) (apply (lambda (G42ba@except G42bb@isp G42bc@sym*) ((lambda (G42c0@subst) (G4261@rem* (map G3042@syntax->datum G42bc@sym*) G42c0@subst)) (G4269@get-import G42bb@isp))) G42b2@ls/false) ((lambda (G42c2@t) ((lambda (G42c4@ls/false) (if (and G42c4@ls/false (apply (lambda (G42c6@only G42c7@isp G42c8@sym*) (and (eq? (G3042@syntax->datum G42c6@only) 'only) (for-all G4257@idsyn? G42c8@sym*))) G42c4@ls/false)) (apply (lambda (G42cc@only G42cd@isp G42ce@sym*) ((lambda (G42d2@subst G42d3@sym*) ((lambda (G42d6@sym*) ((lambda (G42d8@lab*) (map cons G42d6@sym* G42d8@lab*)) (G425f@find* G42d6@sym* G42d2@subst))) (G4263@remove-dups G42d3@sym*))) (G4269@get-import G42cd@isp) (map G3042@syntax->datum G42ce@sym*))) G42c4@ls/false) ((lambda (G42da@t) ((lambda (G42dc@ls/false) (if (and G42dc@ls/false (apply (lambda (G42de@prefix G42df@isp G42e0@p) (and (eq? (G3042@syntax->datum G42de@prefix) 'prefix) (G4257@idsyn? G42e0@p))) G42dc@ls/false)) (apply (lambda (G42e4@prefix G42e5@isp G42e6@p) ((lambda (G42ea@subst G42eb@prefix) (map (lambda (G42ee@x) (cons (string->symbol (string-append G42eb@prefix (symbol->string (car G42ee@x)))) (cdr G42ee@x))) G42ea@subst)) (G4269@get-import G42e5@isp) (symbol->string (G3042@syntax->datum G42e6@p)))) G42dc@ls/false) ((lambda (G42f0@t) ((lambda (G42f2@ls/false) (if (and G42f2@ls/false (apply (lambda (G42f4@library G42f5@spec*) (eq? (G3042@syntax->datum G42f4@library) 'library)) G42f2@ls/false)) (apply (lambda (G42f8@library G42f9@spec*) (G4267@import-library G42f9@spec*)) G42f2@ls/false) ((lambda (G42fc@t) ((lambda (G42fe@ls/false) (if (and G42fe@ls/false (apply (lambda (G4300@for G4301@isp G4302@rest) (eq? (G3042@syntax->datum G4300@for) 'for)) G42fe@ls/false)) (apply (lambda (G4306@for G4307@isp G4308@rest) (G4269@get-import G4307@isp)) G42fe@ls/false) ((lambda (G430c@t) ((lambda (G430e@ls/false) (if G430e@ls/false (apply (lambda (G4310@spec) (G303c@syntax-violation 'import '"invalid import spec" G4310@spec)) G430e@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G430c@t))) (G2f51@syntax-dispatch G430c@t 'any))) G42fc@t))) (G2f51@syntax-dispatch G42fc@t '(any any . any)))) G42f0@t))) (G2f51@syntax-dispatch G42f0@t '(any each-any)))) G42da@t))) (G2f51@syntax-dispatch G42da@t '(any any any)))) G42c2@t))) (G2f51@syntax-dispatch G42c2@t '(any any . each-any)))) G42b0@t))) (G2f51@syntax-dispatch G42b0@t '(any any . each-any)))) G4292@t))) (G2f51@syntax-dispatch G4292@t '(any any . #(each (any any)))))) G4286@t))) (G2f51@syntax-dispatch G4286@t '(any . each-any)))) G4284@spec))) (set! G426b@add-imports! (lambda (G4274@imp G4275@h) ((lambda (G4278@subst) (for-each (lambda (G427a@x) ((lambda (G427c@name G427d@label) ((lambda (G4280@t) (if G4280@t ((lambda (G4282@l) (if (not (eq? G4282@l G427d@label)) (G4259@dup-error G427c@name) (void))) G4280@t) (hashtable-set! G4275@h G427c@name G427d@label))) (hashtable-ref G4275@h G427c@name '#f))) (car G427a@x) (cdr G427a@x))) G4278@subst)) (G4269@get-import G4274@imp)))) (lambda (G426c@imp*) ((letrec ((G426e@f (lambda (G4270@imp* G4271@h) (if (null? G4270@imp*) (hashtable-entries G4271@h) (begin (G426b@add-imports! (car G4270@imp*) G4271@h) (G426e@f (cdr G4270@imp*) G4271@h)))))) G426e@f) G426c@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fba@make-top-rib (lambda (G4458@names G4459@labels) ((lambda (G445c@rib) (begin (vector-for-each (lambda (G445e@name G445f@label) (begin (if (not (symbol? G445e@name)) (error 'make-top-rib '"BUG: not a symbol" G445e@name) (void)) (G2d05@extend-rib/nc! G445c@rib (G2d1c@make-stx G445e@name G2cca@top-mark* '() '()) G445f@label))) G4458@names G4459@labels) G445c@rib)) (G2cff@make-cache-rib)))) (set! G2fbc@make-collector (lambda () ((lambda (G4462@ls) (lambda G4466 ((lambda (G4467) (if (= G4467 '0) (apply (lambda () G4462@ls) G4466) (if (= G4467 '1) (apply (lambda (G4464@x) (set! G4462@ls (G2cc3@set-cons G4464@x G4462@ls))) G4466) (error 'apply '"invalid arg count")))) (length G4466)))) '()))) (set! G2fbe@inv-collector (G28ee@G2824@make-parameter (lambda G4468@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G446a@x) (begin (if (not (procedure? G446a@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G446a@x) (void)) G446a@x)))) (set! G2fc0@vis-collector (G28ee@G2824@make-parameter (lambda G446c@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G446e@x) (begin (if (not (procedure? G446e@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G446e@x) (void)) G446e@x)))) (set! G2fc2@imp-collector (G28ee@G2824@make-parameter (lambda G4470@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4472@x) (begin (if (not (procedure? G4472@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4472@x) (void)) G4472@x)))) (set! G2fc4@chi-library-internal (lambda (G4474@e* G4475@rib G4476@top?) (call-with-values (lambda () (G2fae@chi-body* G4474@e* '() '() '() '() '() '() '() G4475@rib G4476@top?)) (lambda (G4482@G447a G4483@G447b G4484@G447c G4485@G447d G4486@G447e G4487@G447f G4488@G4480 G4489@G4481) ((lambda (G4492@exp* G4493@_kwd* G4494@mod** G4495@rhs* G4496@lex* G4497@mr G4498@r G4499@e*) (values (append (apply append (reverse G4494@mod**)) G4499@e*) G4498@r G4497@mr (reverse G4496@lex*) (reverse G4495@rhs*) G4492@exp*)) G4489@G4481 G4488@G4480 G4487@G447f G4486@G447e G4485@G447d G4484@G447c G4483@G447b G4482@G447a))))) (set! G2fc6@chi-interaction-expr (lambda (G44a2@e G44a3@rib G44a4@r) (call-with-values (lambda () (G2fae@chi-body* (list G44a2@e) G44a4@r G44a4@r '() '() '() '() '() G44a3@rib '#t)) (lambda (G44b0@G44a8 G44b1@G44a9 G44b2@G44aa G44b3@G44ab G44b4@G44ac G44b5@G44ad G44b6@G44ae G44b7@G44af) ((lambda (G44c0@_exp* G44c1@_kwd* G44c2@mod** G44c3@rhs* G44c4@lex* G44c5@mr G44c6@r G44c7@e*) ((lambda (G44d0@e*) ((lambda (G44d2@e) (values G44d2@e G44c6@r)) (if (null? G44d0@e*) (G2cb0@G2c22@build-void) (if (null? (cdr G44d0@e*)) (car G44d0@e*) (G2caf@G2c20@build-sequence '#f G44d0@e*))))) (G2f83@expand-interaction-rhs*/init* (reverse G44c4@lex*) (reverse G44c3@rhs*) (append (apply append (reverse G44c2@mod**)) G44c7@e*) G44c6@r G44c5@mr))) G44b7@G44af G44b6@G44ae G44b5@G44ad G44b4@G44ac G44b3@G44ab G44b2@G44aa G44b1@G44a9 G44b0@G44a8))))) (set! G2fc8@library-body-expander (lambda (G44d4@name G44d5@main-exp* G44d6@imp* G44d7@b* G44d8@top?) ((lambda (G44df@itc) (begin (set! G44df@itc (G2fbc@make-collector)) ((lambda (G44e4@G44e0 G44e5@G44e1 G44e6@G44e2 G44e7@G44e3) ((lambda (G44ec@swap) (dynamic-wind G44ec@swap (lambda () (call-with-values (lambda () (G2fb8@parse-import-spec* G44d6@imp*)) (lambda (G44f0@G44ee G44f1@G44ef) ((lambda (G44f4@subst-labels G44f5@subst-names) ((lambda (G44f8@rib) ((lambda (G44fb@wrap) (begin (set! G44fb@wrap (lambda (G4567@x) (G2d1c@make-stx G4567@x G2cca@top-mark* (list G44f8@rib) '()))) ((lambda (G44fc@b* G44fd@main-exp* G44fe@rtc G44ff@vtc) ((lambda (G4508@G4504 G4509@G4505 G450a@G4506 G450b@G4507) ((lambda (G4510@swap) (dynamic-wind G4510@swap (lambda () (call-with-values (lambda () (G2fc4@chi-library-internal G44fc@b* G44f8@rib G44d8@top?)) (lambda (G4518@G4512 G4519@G4513 G451a@G4514 G451b@G4515 G451c@G4516 G451d@G4517) ((lambda (G4524@internal-exp* G4525@rhs* G4526@lex* G4527@mr G4528@r G4529@init*) (call-with-values (lambda () (G2fb2@parse-exports (append G44fd@main-exp* G4524@internal-exp*))) (lambda (G4532@G4530 G4533@G4531) ((lambda (G4536@exp-id* G4537@exp-name*) (begin (G2d09@seal-rib! G44f8@rib) ((lambda (G453a@init*) ((lambda (G453c@rhs*) ((lambda () (begin (G2d0b@unseal-rib! G44f8@rib) ((lambda (G453e@loc* G453f@export-subst) ((lambda (G4543@errstr) (begin (set! G4543@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3028@make-export-env/macros G4526@lex* G453e@loc* G4528@r)) (lambda (G4547@G4544 G4548@G4545 G4549@G4546) ((lambda (G454d@macro* G454e@global* G454f@export-env) (begin (for-each (lambda (G4553@s) ((lambda (G4555@name G4556@label) ((lambda (G4559@p) (if G4559@p ((lambda (G455b@b) ((lambda (G455d@type) (if (eq? G455d@type 'mutable) (G303c@syntax-violation 'export G4543@errstr G4555@name) (void))) (car G455b@b))) (cdr G4559@p)) (void))) (assq G4556@label G454f@export-env))) (car G4553@s) (cdr G4553@s))) G453f@export-subst) ((lambda (G455f@invoke-body G4560@invoke-definitions) (values (G44df@itc) (G44fe@rtc) (G44ff@vtc) (G2caf@G2c20@build-sequence '#f (append G4560@invoke-definitions (list G455f@invoke-body))) G454d@macro* G453f@export-subst G454f@export-env)) (G2cb2@G2c26@build-letrec* '#f G4526@lex* G453c@rhs* (G3024@build-exports G454e@global* G453a@init*)) (map G2cab@G2b70@build-global-define (map cdr G454e@global*))))) G4549@G4546 G4548@G4545 G4547@G4544))))) '#f)) (map G2cd0@gen-global G4526@lex*) (G3026@make-export-subst G4537@exp-name* G4536@exp-id*)))))) (G2f85@chi-rhs* G4525@rhs* G4528@r G4527@mr))) (G2f71@chi-expr* G4529@init* G4528@r G4527@mr)))) G4533@G4531 G4532@G4530)))) G451d@G4517 G451c@G4516 G451b@G4515 G451a@G4514 G4519@G4513 G4518@G4512)))) G4510@swap)) (lambda () (begin ((lambda (G4563@t) (begin (G4508@G4504 G450a@G4506) (set! G450a@G4506 G4563@t))) (G4508@G4504)) ((lambda (G4565@t) (begin (G4509@G4505 G450b@G4507) (set! G450b@G4507 G4565@t))) (G4509@G4505)))))) G2fbe@inv-collector G2fc0@vis-collector G44fe@rtc G44ff@vtc)) (map G44fb@wrap G44d7@b*) (map G44fb@wrap G44d5@main-exp*) (G2fbc@make-collector) (G2fbc@make-collector)))) '#f)) (G2fba@make-top-rib G44f5@subst-names G44f4@subst-labels))) G44f1@G44ef G44f0@G44ee)))) G44ec@swap)) (lambda () (begin ((lambda (G4569@t) (begin (G44e4@G44e0 G44e6@G44e2) (set! G44e6@G44e2 G4569@t))) (G44e4@G44e0)) ((lambda (G456b@t) (begin (G44e5@G44e1 G44e7@G44e3) (set! G44e7@G44e3 G456b@t))) (G44e5@G44e1)))))) G2fc2@imp-collector G304a@top-level-context G44df@itc '#f))) '#f))) (set! G2fca@core-library-expander (lambda (G456d@e G456e@verify-name) (call-with-values (lambda () (G2fb6@parse-library G456d@e)) (lambda (G4575@G4571 G4576@G4572 G4577@G4573 G4578@G4574) ((lambda (G457d@b* G457e@imp* G457f@exp* G4580@name*) (call-with-values (lambda () (G2fb4@parse-library-name G4580@name*)) (lambda (G4587@G4585 G4588@G4586) ((lambda (G458b@ver G458c@name) (begin (G456e@verify-name G458c@name) (call-with-values (lambda () (G2fc8@library-body-expander G458c@name G457f@exp* G457e@imp* G457d@b* '#f)) (lambda (G4596@G458f G4597@G4590 G4598@G4591 G4599@G4592 G459a@G4593 G459b@G4594 G459c@G4595) ((lambda (G45a4@export-env G45a5@export-subst G45a6@visit-code G45a7@invoke-code G45a8@visit-req* G45a9@invoke-req* G45aa@imp*) (values G458c@name G458b@ver G45aa@imp* G45a9@invoke-req* G45a8@visit-req* G45a7@invoke-code G45a6@visit-code G45a5@export-subst G45a4@export-env)) G459c@G4595 G459b@G4594 G459a@G4593 G4599@G4592 G4598@G4591 G4597@G4590 G4596@G458f))))) G4588@G4586 G4587@G4585)))) G4578@G4574 G4577@G4573 G4576@G4572 G4575@G4571))))) (set! G2fcc@parse-top-level-program (lambda (G45b2@e*) ((lambda (G45b4@t) ((lambda (G45b6@ls/false) (if (and G45b6@ls/false (apply (lambda (G45b8@import G45b9@imp* G45ba@b*) (eq? (G3042@syntax->datum G45b8@import) 'import)) G45b6@ls/false)) (apply (lambda (G45be@import G45bf@imp* G45c0@b*) (values G45bf@imp* G45c0@b*)) G45b6@ls/false) ((lambda (G45c4@t) ((lambda (G45c6@ls/false) (if (and G45c6@ls/false (apply (lambda (G45c8@import G45c9@x G45ca@y) (eq? (G3042@syntax->datum G45c8@import) 'import)) G45c6@ls/false)) (apply (lambda (G45ce@import G45cf@x G45d0@y) (G303c@syntax-violation 'expander '"invalid syntax of top-level program" (G2d4c@syntax-car G45b2@e*))) G45c6@ls/false) ((lambda (G45d4@t) ((lambda (G45d6@ls/false) (if G45d6@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45d6@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G45d4@t))) (G2f51@syntax-dispatch G45d4@t '_))) G45c4@t))) (G2f51@syntax-dispatch G45c4@t '((any . any) . any)))) G45b4@t))) (G2f51@syntax-dispatch G45b4@t '((any . each-any) . each-any)))) G45b2@e*))) (set! G2fce@top-level-expander (lambda (G45d8@e*) (call-with-values (lambda () (G2fcc@parse-top-level-program G45d8@e*)) (lambda (G45dc@G45da G45dd@G45db) ((lambda (G45e0@b* G45e1@imp*) (call-with-values (lambda () (G2fc8@library-body-expander '() '() G45e1@imp* G45e0@b* '#t)) (lambda (G45eb@G45e4 G45ec@G45e5 G45ed@G45e6 G45ee@G45e7 G45ef@G45e8 G45f0@G45e9 G45f1@G45ea) ((lambda (G45f9@export-env G45fa@export-subst G45fb@visit-code G45fc@invoke-code G45fd@visit-req* G45fe@invoke-req* G45ff@imp*) (values G45fe@invoke-req* G45fc@invoke-code)) G45f1@G45ea G45f0@G45e9 G45ef@G45e8 G45ee@G45e7 G45ed@G45e6 G45ec@G45e5 G45eb@G45e4)))) G45dd@G45db G45dc@G45da))))) (set! G2fd4@G2fcf (make-record-type-descriptor 'env '#f 'G2fd2 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fd6@G2fd1 '#f) (set! G2fd8@G2fd0 (make-record-constructor-descriptor G2fd4@G2fcf '#f G2fd6@G2fd1)) (set! G2fdb@env? (record-predicate G2fd4@G2fcf)) (set! G2fdd@make-env (record-constructor G2fd8@G2fd0)) (set! G2fdf@env-names (record-accessor G2fd4@G2fcf '0)) (set! G2fe1@env-labels (record-accessor G2fd4@G2fcf '1)) (set! G2fe3@env-itc (record-accessor G2fd4@G2fcf '2)) (set! G2fe5@set-env-names! (record-mutator G2fd4@G2fcf '0)) (set! G2fe7@set-env-labels! (record-mutator G2fd4@G2fcf '1)) (set! G2fe9@set-env-itc! (record-mutator G2fd4@G2fcf '2)) (set! G2feb@rp (G28eb@G281e@make-record-printer 'env (lambda (G4607@x G4608@p G4609@wr) (display '"#<environment>" G4608@p)))) (set! G2ff1@G2fec (make-record-type-descriptor 'interaction-env '#f 'G2fef '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2ff3@G2fee '#f) (set! G2ff5@G2fed (make-record-constructor-descriptor G2ff1@G2fec '#f G2ff3@G2fee)) (set! G2ff8@interaction-env? (record-predicate G2ff1@G2fec)) (set! G2ffa@make-interaction-env (record-constructor G2ff5@G2fed)) (set! G2ffc@interaction-env-rib (record-accessor G2ff1@G2fec '0)) (set! G2ffe@interaction-env-r (record-accessor G2ff1@G2fec '1)) (set! G3000@interaction-env-locs (record-accessor G2ff1@G2fec '2)) (set! G3002@set-interaction-env-rib! (record-mutator G2ff1@G2fec '0)) (set! G3004@set-interaction-env-r! (record-mutator G2ff1@G2fec '1)) (set! G3006@set-interaction-env-locs! (record-mutator G2ff1@G2fec '2)) (set! G3008@rp (G28eb@G281e@make-record-printer 'interaction-env (lambda (G460d@x G460e@p G460f@wr) (display '"#<environment>" G460e@p)))) (set! G300a@interaction-environment-symbols (lambda () (G3012@environment-symbols (G3048@interaction-environment)))) (set! G300c@environment-bindings (lambda (G4613@e) (vector->list (vector-map (lambda (G4615@name G4616@label) (G300e@parse-binding (cons G4615@name (G2b68@G2a0e@imported-label->binding G4616@label)))) (G2fdf@env-names G4613@e) (G2fe1@env-labels G4613@e))))) (set! G300e@parse-binding (lambda (G4619@b) (cons (car G4619@b) ((lambda (G461b@t) (if (memv G461b@t '(core-prim global)) 'procedure (if (memv G461b@t '(core-macro macro global-macro)) 'syntax (if (memv G461b@t '($core-rtd)) 'record (if (eq? (car G4619@b) (cadr G4619@b)) 'syntax 'unknown))))) (cadr G4619@b))))) (set! G3010@environment? (lambda (G461d@x) (or (G2fdb@env? G461d@x) (G2ff8@interaction-env? G461d@x)))) (set! G3012@environment-symbols (lambda (G461f@x) (if (G2fdb@env? G461f@x) (vector->list (G2fdf@env-names G461f@x)) (if (G2ff8@interaction-env? G461f@x) (map values (G2ce9@rib-sym* (G2ffc@interaction-env-rib G461f@x))) (assertion-violation 'environment-symbols '"not an environment" G461f@x))))) (set! G3014@environment (lambda G4621@imp* ((lambda (G4623@itc) ((lambda (G4627@G4625 G4628@G4626) ((lambda (G462b@swap) (dynamic-wind G462b@swap (lambda () (call-with-values (lambda () (G2fb8@parse-import-spec* G4621@imp*)) (lambda (G462f@G462d G4630@G462e) ((lambda (G4633@subst-labels G4634@subst-names) (G2fdd@make-env G4634@subst-names G4633@subst-labels G4623@itc)) G4630@G462e G462f@G462d)))) G462b@swap)) (lambda () ((lambda (G4637@t) (begin (G4627@G4625 G4628@G4626) (set! G4628@G4626 G4637@t))) (G4627@G4625))))) G2fc2@imp-collector G4623@itc)) (G2fbc@make-collector)))) (set! G3016@null-environment (lambda (G4639@n) (begin (if (not (eqv? G4639@n '5)) (assertion-violation 'null-environment '"not 5" G4639@n) (void)) (G3014@environment '(psyntax null-environment-5))))) (set! G3018@scheme-report-environment (lambda (G463b@n) (begin (if (not (eqv? G463b@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G463b@n) (void)) (G3014@environment '(psyntax scheme-report-environment-5))))) (set! G301a@expand (lambda (G463d@x G463e@env) (if (G2fdb@env? G463e@env) ((lambda (G4641@rib) ((lambda (G4643@x G4644@itc G4645@rtc G4646@vtc) ((lambda (G464b@x) (begin (G2d09@seal-rib! G4641@rib) (values G464b@x (G4645@rtc)))) ((lambda (G4655@G464d G4656@G464e G4657@G464f G4658@G4650 G4659@G4651 G465a@G4652 G465b@G4653 G465c@G4654) ((lambda (G4665@swap) (dynamic-wind G4665@swap (lambda () (G2f75@chi-expr G4643@x '() '())) G4665@swap)) (lambda () (begin ((lambda (G4667@t) (begin (G4655@G464d G4659@G4651) (set! G4659@G4651 G4667@t))) (G4655@G464d)) ((lambda (G4669@t) (begin (G4656@G464e G465a@G4652) (set! G465a@G4652 G4669@t))) (G4656@G464e)) ((lambda (G466b@t) (begin (G4657@G464f G465b@G4653) (set! G465b@G4653 G466b@t))) (G4657@G464f)) ((lambda (G466d@t) (begin (G4658@G4650 G465c@G4654) (set! G465c@G4654 G466d@t))) (G4658@G4650)))))) G304a@top-level-context G2fbe@inv-collector G2fc0@vis-collector G2fc2@imp-collector '#f G4645@rtc G4646@vtc G4644@itc))) (G2d1c@make-stx G463d@x G2cca@top-mark* (list G4641@rib) '()) (G2fe3@env-itc G463e@env) (G2fbc@make-collector) (G2fbc@make-collector))) (G2fba@make-top-rib (G2fdf@env-names G463e@env) (G2fe1@env-labels G463e@env))) (if (G2ff8@interaction-env? G463e@env) ((lambda (G466f@rib G4670@r G4671@rtc) ((lambda (G4675@x) (call-with-values (lambda () ((lambda (G4681@G4679 G4682@G467a G4683@G467b G4684@G467c G4685@G467d G4686@G467e G4687@G467f G4688@G4680) ((lambda (G4691@swap) (dynamic-wind G4691@swap (lambda () (G2fc6@chi-interaction-expr G4675@x G466f@rib G4670@r)) G4691@swap)) (lambda () (begin ((lambda (G4693@t) (begin (G4681@G4679 G4685@G467d) (set! G4685@G467d G4693@t))) (G4681@G4679)) ((lambda (G4695@t) (begin (G4682@G467a G4686@G467e) (set! G4686@G467e G4695@t))) (G4682@G467a)) ((lambda (G4697@t) (begin (G4683@G467b G4687@G467f) (set! G4687@G467f G4697@t))) (G4683@G467b)) ((lambda (G4699@t) (begin (G4684@G467c G4688@G4680) (set! G4688@G4680 G4699@t))) (G4684@G467c)))))) G304a@top-level-context G2fbe@inv-collector G2fc0@vis-collector G2fc2@imp-collector G463e@env G4671@rtc (G2fbc@make-collector) (G2fbc@make-collector))) (lambda (G469b@G4677 G469c@G4678) ((lambda (G469f@r^ G46a0@e) (begin (G3004@set-interaction-env-r! G463e@env G469f@r^) (values G46a0@e (G4671@rtc)))) G469c@G4678 G469b@G4677)))) (G2d1c@make-stx G463d@x G2cca@top-mark* (list G466f@rib) '()))) (G2ffc@interaction-env-rib G463e@env) (G2ffe@interaction-env-r G463e@env) (G2fbc@make-collector)) (assertion-violation 'expand '"not an environment" G463e@env))))) (set! G301c@eval (lambda (G46a3@x G46a4@env) (begin (if (not (G3010@environment? G46a4@env)) (error 'eval '"not an environment" G46a4@env) (void)) (call-with-values (lambda () (G301a@expand G46a3@x G46a4@env)) (lambda (G46a9@G46a7 G46aa@G46a8) ((lambda (G46ad@invoke-req* G46ae@x) (begin (for-each G2b69@G2a10@invoke-library G46ad@invoke-req*) (eval-core (G2942@G28fa@expanded->core G46ae@x)))) G46aa@G46a8 G46a9@G46a7)))))) (set! G301e@library-expander (lambda G4716 ((lambda (G4717) (if (= G4717 '3) (apply (lambda (G46b1@x G46b2@filename G46b3@verify-name) ((lambda (G46b8@build-visit-code G46ba@visit!) (begin (set! G46b8@build-visit-code (lambda (G4704@macro*) (if (null? G4704@macro*) (G2cb0@G2c22@build-void) (G2caf@G2c20@build-sequence '#f (map (lambda (G4706@x) ((lambda (G4708@loc G4709@src) (list 'set! G4708@loc G4709@src)) (car G4706@x) (cddr G4706@x))) G4704@macro*))))) (set! G46ba@visit! (lambda (G46fc@macro*) (for-each (lambda (G46fe@x) ((lambda (G4700@loc G4701@proc) (set-symbol-value! G4700@loc G4701@proc)) (car G46fe@x) (cadr G46fe@x))) G46fc@macro*))) (call-with-values (lambda () (G2fca@core-library-expander G46b1@x G46b3@verify-name)) (lambda (G46c4@G46bb G46c5@G46bc G46c6@G46bd G46c7@G46be G46c8@G46bf G46c9@G46c0 G46ca@G46c1 G46cb@G46c2 G46cc@G46c3) ((lambda (G46d6@export-env G46d7@export-subst G46d8@macro* G46d9@invoke-code G46da@vis* G46db@inv* G46dc@imp* G46dd@ver G46de@name) ((lambda (G46e8@id G46e9@name G46ea@ver G46eb@imp* G46ec@vis* G46ed@inv* G46ee@visit-proc G46ef@invoke-proc G46f0@visit-code G46f1@invoke-code) (begin (G2b67@G2a0c@install-library G46e8@id G46e9@name G46ea@ver G46eb@imp* G46ec@vis* G46ed@inv* G46d7@export-subst G46d6@export-env G46ee@visit-proc G46ef@invoke-proc G46f0@visit-code G46f1@invoke-code '#t G46b2@filename) (values G46e8@id G46e9@name G46ea@ver G46eb@imp* G46ec@vis* G46ed@inv* G46f1@invoke-code G46f0@visit-code G46d7@export-subst G46d6@export-env))) (gensym) G46de@name G46dd@ver (map G2b6d@G2a18@library-spec G46dc@imp*) (map G2b6d@G2a18@library-spec G46da@vis*) (map G2b6d@G2a18@library-spec G46db@inv*) (lambda () (G46ba@visit! G46d8@macro*)) (lambda () (eval-core (G2942@G28fa@expanded->core G46d9@invoke-code))) (G46b8@build-visit-code G46d8@macro*) G46d9@invoke-code)) G46cc@G46c3 G46cb@G46c2 G46ca@G46c1 G46c9@G46c0 G46c8@G46bf G46c7@G46be G46c6@G46bd G46c5@G46bc G46c4@G46bb))))) '#f '#f)) G4716) (if (= G4717 '2) (apply (lambda (G470c@x G470d@filename) (G301e@library-expander G470c@x G470d@filename (lambda (G4710@x) (values)))) G4716) (if (= G4717 '1) (apply (lambda (G4712@x) (G301e@library-expander G4712@x '#f (lambda (G4714@x) (values)))) G4716) (error 'apply '"invalid arg count"))))) (length G4716)))) (set! G3020@boot-library-expand (lambda (G4718@x) (call-with-values (lambda () (G301e@library-expander G4718@x)) (lambda (G4724@G471a G4725@G471b G4726@G471c G4727@G471d G4728@G471e G4729@G471f G472a@G4720 G472b@G4721 G472c@G4722 G472d@G4723) ((lambda (G4738@export-env G4739@export-subst G473a@visit-code G473b@invoke-code G473c@inv* G473d@vis* G473e@imp* G473f@ver G4740@name G4741@id) (values G4740@name G473b@invoke-code G4739@export-subst G4738@export-env)) G472d@G4723 G472c@G4722 G472b@G4721 G472a@G4720 G4729@G471f G4728@G471e G4727@G471d G4726@G471c G4725@G471b G4724@G471a))))) (set! G3022@rev-map-append (lambda (G474c@f G474d@ls G474e@ac) (if (null? G474d@ls) G474e@ac (G3022@rev-map-append G474c@f (cdr G474d@ls) (cons (G474c@f (car G474d@ls)) G474e@ac))))) (set! G3024@build-exports (lambda (G4752@lex*+loc* G4753@init*) (G2caf@G2c20@build-sequence '#f (cons (G2cb0@G2c22@build-void) (G3022@rev-map-append (lambda (G4756@x) (list 'set! (cdr G4756@x) (car G4756@x))) G4752@lex*+loc* G4753@init*))))) (set! G3026@make-export-subst (lambda (G4758@name* G4759@id*) (map (lambda (G475c@name G475d@id) ((lambda (G4760@label) (begin (if (not G4760@label) (G303c@syntax-violation '#f '"cannot export unbound identifier" G475d@id) (void)) (cons G475c@name G4760@label))) (G2d6c@id->label G475d@id))) G4758@name* G4759@id*))) (set! G3028@make-export-env/macros (lambda (G4762@lex* G4763@loc* G4764@r) ((lambda (G4769@lookup) (begin (set! G4769@lookup (lambda (G4786@x) ((letrec ((G4788@f (lambda (G478a@x G478b@lex* G478c@loc*) (if (pair? G478b@lex*) (if (eq? G478a@x (car G478b@lex*)) (car G478c@loc*) (G4788@f G478a@x (cdr G478b@lex*) (cdr G478c@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4788@f) G4786@x G4762@lex* G4763@loc*))) ((letrec ((G476a@f (lambda (G476c@r G476d@env G476e@global* G476f@macro*) (if (null? G476c@r) (values G476d@env G476e@global* G476f@macro*) ((lambda (G4774@x) ((lambda (G4776@label G4777@b) ((lambda (G477a@t) (if (memv G477a@t '(lexical)) ((lambda (G477c@v) ((lambda (G477e@loc G477f@type) (G476a@f (cdr G476c@r) (cons (cons* G4776@label G477f@type G477e@loc) G476d@env) (cons (cons (G2edd@lexical-var G477c@v) G477e@loc) G476e@global*) G476f@macro*)) (G4769@lookup (G2edd@lexical-var G477c@v)) (if (G2edf@lexical-mutable? G477c@v) 'mutable 'global))) (G2d76@binding-value G4777@b)) (if (memv G477a@t '(local-macro)) ((lambda (G4782@loc) (G476a@f (cdr G476c@r) (cons (cons* G4776@label 'global-macro G4782@loc) G476d@env) G476e@global* (cons (cons G4782@loc (G2d76@binding-value G4777@b)) G476f@macro*))) (gensym)) (if (memv G477a@t '(local-macro!)) ((lambda (G4784@loc) (G476a@f (cdr G476c@r) (cons (cons* G4776@label 'global-macro! G4784@loc) G476d@env) G476e@global* (cons (cons G4784@loc (G2d76@binding-value G4777@b)) G476f@macro*))) (gensym)) (if (memv G477a@t '($rtd $module)) (G476a@f (cdr G476c@r) (cons G4774@x G476d@env) G476e@global* G476f@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d74@binding-type G4777@b) (G2d76@binding-value G4777@b))))))) (G2d74@binding-type G4777@b))) (car G4774@x) (cdr G4774@x))) (car G476c@r)))))) G476a@f) G4764@r '() '() '()))) '#f))) (set! G302a@generate-temporaries (lambda (G4790@ls) ((lambda (G4792@t) ((lambda (G4794@ls/false) (if G4794@ls/false (apply (lambda (G4796@ls) (map (lambda (G4798@x) (G2d1c@make-stx ((lambda (G479a@x) (if (or (symbol? G479a@x) (string? G479a@x)) (gensym G479a@x) (gensym 't))) (G3042@syntax->datum G4798@x)) G2cca@top-mark* '() '())) G4796@ls)) G4794@ls/false) ((lambda (G479c@t) ((lambda (G479e@ls/false) (if G479e@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G479e@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G479c@t))) (G2f51@syntax-dispatch G479c@t '_))) G4792@t))) (G2f51@syntax-dispatch G4792@t 'each-any))) G4790@ls))) (set! G302c@free-identifier=? (lambda (G47a0@x G47a1@y) (if (G2d52@id? G47a0@x) (if (G2d52@id? G47a1@y) (G2d5a@free-id=? G47a0@x G47a1@y) (assertion-violation 'free-identifier=? '"not an identifier" G47a1@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47a0@x)))) (set! G302e@bound-identifier=? (lambda (G47a4@x G47a5@y) (if (G2d52@id? G47a4@x) (if (G2d52@id? G47a5@y) (G2d58@bound-id=? G47a4@x G47a5@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47a5@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47a4@x)))) (set! G3030@make-source-condition (lambda (G47a8@x) ((lambda (G47b2@G47ad G47b4@G47af G47b6@G47ae G47b9@G47ac G47bb@make-source-condition G47bd@G47aa G47bf@G47ab G47c1@source-condition? G47c3@source-filename G47c5@source-character) (begin (set! G47b2@G47ad (make-record-type-descriptor '&source-information G4c04@G4955@&condition-rtd 'G47b0 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47b4@G47af '#f) (set! G47b6@G47ae (make-record-constructor-descriptor G47b2@G47ad G4c05@G4957@&condition-rcd G47b4@G47af)) (set! G47b9@G47ac (record-predicate G47b2@G47ad)) (set! G47bb@make-source-condition (record-constructor G47b6@G47ae)) (set! G47bd@G47aa (record-accessor G47b2@G47ad '0)) (set! G47bf@G47ab (record-accessor G47b2@G47ad '1)) (set! G47c1@source-condition? (condition-predicate G47b2@G47ad)) (set! G47c3@source-filename (condition-accessor G47b2@G47ad G47bd@G47aa)) (set! G47c5@source-character (condition-accessor G47b2@G47ad G47bf@G47ab)) (if (pair? G47a8@x) (G47bb@make-source-condition (car G47a8@x) (cdr G47a8@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3032@extract-position-condition (lambda (G47c6@x) (G3030@make-source-condition (G3034@expression-position G47c6@x)))) (set! G3034@expression-position (lambda (G47c8@x) (and (G2d1a@stx? G47c8@x) ((lambda (G47ca@x) (and (G28e3@G280e@annotation? G47ca@x) (G28e4@G2810@annotation-source G47ca@x))) (G2d1e@stx-expr G47c8@x))))) (set! G3036@assertion-error (lambda (G47cc@expr G47cd@pos) (raise (condition (G4c34@G4a17@make-assertion-violation) (G4c46@G4a47@make-who-condition 'assert) (G4c0a@G49aa@make-message-condition '"assertion failed") (G4c3c@G4a2d@make-irritants-condition (list G47cc@expr)) (G3030@make-source-condition G47cd@pos))))) (set! G3038@syntax-error (lambda (G47d0@x . G47d2@args) (begin (if (not (for-all string? G47d2@args)) (assertion-violation 'syntax-error '"invalid argument" G47d2@args) (void)) (raise (condition (G4c0a@G49aa@make-message-condition (if (null? G47d2@args) '"invalid syntax" (apply string-append G47d2@args))) (G4c68@G4aa1@make-syntax-violation (G3042@syntax->datum G47d0@x) '#f) (G3032@extract-position-condition G47d0@x)))))) (set! G303a@syntax-violation* (lambda (G47d4@who G47d5@msg G47d6@form G47d7@condition-object) (begin (if (not (string? G47d5@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47d5@msg) (void)) ((lambda (G47dc@who) (raise (condition (if G47dc@who (G4c46@G4a47@make-who-condition G47dc@who) (condition)) (G4c0a@G49aa@make-message-condition G47d5@msg) G47d7@condition-object (G3032@extract-position-condition G47d6@form)))) (if (or (string? G47d4@who) (symbol? G47d4@who)) G47d4@who (if (not G47d4@who) ((lambda (G47de@t) ((lambda (G47e0@ls/false) (if (and G47e0@ls/false (apply (lambda (G47e2@id) (G2d52@id? G47e2@id)) G47e0@ls/false)) (apply (lambda (G47e4@id) (G3042@syntax->datum G47e4@id)) G47e0@ls/false) ((lambda (G47e6@t) ((lambda (G47e8@ls/false) (if (and G47e8@ls/false (apply (lambda (G47ea@id G47eb@rest) (G2d52@id? G47ea@id)) G47e8@ls/false)) (apply (lambda (G47ee@id G47ef@rest) (G3042@syntax->datum G47ee@id)) G47e8@ls/false) ((lambda (G47f2@t) ((lambda (G47f4@ls/false) (if G47f4@ls/false (apply (lambda () '#f) G47f4@ls/false) (G303c@syntax-violation '#f '"invalid syntax" G47f2@t))) (G2f51@syntax-dispatch G47f2@t '_))) G47e6@t))) (G2f51@syntax-dispatch G47e6@t '(any . any)))) G47de@t))) (G2f51@syntax-dispatch G47de@t 'any))) G47d6@form) (assertion-violation 'syntax-violation '"invalid who argument" G47d4@who))))))) (set! G303c@syntax-violation (lambda G4804 ((lambda (G4805) (if (= G4805 '3) (apply (lambda (G47f6@who G47f7@msg G47f8@form) (G303c@syntax-violation G47f6@who G47f7@msg G47f8@form '#f)) G4804) (if (= G4805 '4) (apply (lambda (G47fc@who G47fd@msg G47fe@form G47ff@subform) (G303a@syntax-violation* G47fc@who G47fd@msg G47fe@form (G4c68@G4aa1@make-syntax-violation (G3042@syntax->datum G47fe@form) (G3042@syntax->datum G47ff@subform)))) G4804) (error 'apply '"invalid arg count")))) (length G4804)))) (set! G303e@identifier? (lambda (G4806@x) (G2d52@id? G4806@x))) (set! G3040@datum->syntax (lambda (G4808@id G4809@datum) (if (G2d52@id? G4808@id) (G2d30@datum->stx G4808@id G4809@datum) (assertion-violation 'datum->syntax '"not an identifier" G4808@id)))) (set! G3042@syntax->datum (lambda (G480c@x) (G2d68@stx->datum G480c@x))) (set! G3044@compile-r6rs-top-level (lambda (G480e@x*) (call-with-values (lambda () (G2fce@top-level-expander G480e@x*)) (lambda (G4812@G4810 G4813@G4811) ((lambda (G4816@invoke-code G4817@lib*) (lambda () (begin (for-each G2b69@G2a10@invoke-library G4817@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2942@G28fa@expanded->core G4816@invoke-code)) (void)) (eval-core (G2942@G28fa@expanded->core G4816@invoke-code))))) G4813@G4811 G4812@G4810))))) (set! G3046@pre-compile-r6rs-top-level (lambda (G481a@x*) (call-with-values (lambda () (G2fce@top-level-expander G481a@x*)) (lambda (G481e@G481c G481f@G481d) ((lambda (G4822@invoke-code G4823@lib*) (begin (for-each G2b69@G2a10@invoke-library G4823@lib*) (G28ec@G2820@compile-core (G2942@G28fa@expanded->core G4822@invoke-code)))) G481f@G481d G481e@G481c))))) (set! G3048@interaction-environment ((lambda (G4826@the-env) (lambda () (or G4826@the-env ((lambda (G4828@lib G4829@rib) (begin ((lambda (G482c@subst) (begin (G2cf3@set-rib-sym*! G4829@rib (map car G482c@subst)) (G2cf5@set-rib-mark**! G4829@rib (map (lambda (G482e@x) G2cca@top-mark*) G482c@subst)) (G2cf7@set-rib-label*! G4829@rib (map cdr G482c@subst)))) (G2b3e@G29ba@library-subst G4828@lib)) ((lambda (G4830@env) (begin (set! G4826@the-env G4830@env) G4830@env)) (G2ffa@make-interaction-env G4829@rib '() '())))) (G2b62@G2a02@find-library-by-name '(mosh interaction)) (G2cff@make-cache-rib))))) '#f)) (set! G304a@top-level-context (G28ee@G2824@make-parameter '#f)) (begin (set! G4940@G304a@top-level-context G304a@top-level-context) (set! G493f@G3048@interaction-environment G3048@interaction-environment) (set! G493e@G3046@pre-compile-r6rs-top-level G3046@pre-compile-r6rs-top-level) (set! G493d@G3044@compile-r6rs-top-level G3044@compile-r6rs-top-level) (set! G493c@G3042@syntax->datum G3042@syntax->datum) (set! G493b@G3040@datum->syntax G3040@datum->syntax) (set! G493a@G303e@identifier? G303e@identifier?) (set! G4939@G303c@syntax-violation G303c@syntax-violation) (set! G4938@G303a@syntax-violation* G303a@syntax-violation*) (set! G4937@G3038@syntax-error G3038@syntax-error) (set! G4936@G3036@assertion-error G3036@assertion-error) (set! G4935@G3034@expression-position G3034@expression-position) (set! G4934@G3032@extract-position-condition G3032@extract-position-condition) (set! G4933@G3030@make-source-condition G3030@make-source-condition) (set! G4932@G302e@bound-identifier=? G302e@bound-identifier=?) (set! G4931@G302c@free-identifier=? G302c@free-identifier=?) (set! G4930@G302a@generate-temporaries G302a@generate-temporaries) (set! G492f@G3028@make-export-env/macros G3028@make-export-env/macros) (set! G492e@G3026@make-export-subst G3026@make-export-subst) (set! G492d@G3024@build-exports G3024@build-exports) (set! G492c@G3022@rev-map-append G3022@rev-map-append) (set! G492b@G3020@boot-library-expand G3020@boot-library-expand) (set! G492a@G301e@library-expander G301e@library-expander) (set! G4929@G301c@eval G301c@eval) (set! G4928@G301a@expand G301a@expand) (set! G4927@G3018@scheme-report-environment G3018@scheme-report-environment) (set! G4926@G3016@null-environment G3016@null-environment) (set! G4925@G3014@environment G3014@environment) (set! G4924@G3012@environment-symbols G3012@environment-symbols) (set! G4923@G3010@environment? G3010@environment?) (set! G4922@G300e@parse-binding G300e@parse-binding) (set! G4921@G300c@environment-bindings G300c@environment-bindings) (set! G4920@G300a@interaction-environment-symbols G300a@interaction-environment-symbols) (set! G491f@G3008@rp G3008@rp) (set! G491e@G3006@set-interaction-env-locs! G3006@set-interaction-env-locs!) (set! G491d@G3004@set-interaction-env-r! G3004@set-interaction-env-r!) (set! G491c@G3002@set-interaction-env-rib! G3002@set-interaction-env-rib!) (set! G491b@G3000@interaction-env-locs G3000@interaction-env-locs) (set! G491a@G2ffe@interaction-env-r G2ffe@interaction-env-r) (set! G4919@G2ffc@interaction-env-rib G2ffc@interaction-env-rib) (set! G4918@G2ffa@make-interaction-env G2ffa@make-interaction-env) (set! G4917@G2ff8@interaction-env? G2ff8@interaction-env?) (set! G4916@G2ff5@G2fed G2ff5@G2fed) (set! G4915@G2ff3@G2fee G2ff3@G2fee) (set! G4914@G2ff1@G2fec G2ff1@G2fec) (set! G4913@G2feb@rp G2feb@rp) (set! G4912@G2fe9@set-env-itc! G2fe9@set-env-itc!) (set! G4911@G2fe7@set-env-labels! G2fe7@set-env-labels!) (set! G4910@G2fe5@set-env-names! G2fe5@set-env-names!) (set! G490f@G2fe3@env-itc G2fe3@env-itc) (set! G490e@G2fe1@env-labels G2fe1@env-labels) (set! G490d@G2fdf@env-names G2fdf@env-names) (set! G490c@G2fdd@make-env G2fdd@make-env) (set! G490b@G2fdb@env? G2fdb@env?) (set! G490a@G2fd8@G2fd0 G2fd8@G2fd0) (set! G4909@G2fd6@G2fd1 G2fd6@G2fd1) (set! G4908@G2fd4@G2fcf G2fd4@G2fcf) (set! G4907@G2fce@top-level-expander G2fce@top-level-expander) (set! G4906@G2fcc@parse-top-level-program G2fcc@parse-top-level-program) (set! G4905@G2fca@core-library-expander G2fca@core-library-expander) (set! G4904@G2fc8@library-body-expander G2fc8@library-body-expander) (set! G4903@G2fc6@chi-interaction-expr G2fc6@chi-interaction-expr) (set! G4902@G2fc4@chi-library-internal G2fc4@chi-library-internal) (set! G4901@G2fc2@imp-collector G2fc2@imp-collector) (set! G4900@G2fc0@vis-collector G2fc0@vis-collector) (set! G48ff@G2fbe@inv-collector G2fbe@inv-collector) (set! G48fe@G2fbc@make-collector G2fbc@make-collector) (set! G48fd@G2fba@make-top-rib G2fba@make-top-rib) (set! G48fc@G2fb8@parse-import-spec* G2fb8@parse-import-spec*) (set! G48fb@G2fb6@parse-library G2fb6@parse-library) (set! G48fa@G2fb4@parse-library-name G2fb4@parse-library-name) (set! G48f9@G2fb2@parse-exports G2fb2@parse-exports) (set! G48f8@G2fb0@expand-transformer G2fb0@expand-transformer) (set! G48f7@G2fae@chi-body* G2fae@chi-body*) (set! G48f6@G2fac@chi-internal-module G2fac@chi-internal-module) (set! G48f5@G2faa@module-interface-exp-id* G2faa@module-interface-exp-id*) (set! G48f4@G2fa8@set-module-interface-exp-lab-vec! G2fa8@set-module-interface-exp-lab-vec!) (set! G48f3@G2fa6@set-module-interface-exp-id-vec! G2fa6@set-module-interface-exp-id-vec!) (set! G48f2@G2fa4@set-module-interface-first-mark! G2fa4@set-module-interface-first-mark!) (set! G48f1@G2fa2@module-interface-exp-lab-vec G2fa2@module-interface-exp-lab-vec) (set! G48f0@G2fa0@module-interface-exp-id-vec G2fa0@module-interface-exp-id-vec) (set! G48ef@G2f9e@module-interface-first-mark G2f9e@module-interface-first-mark) (set! G48ee@G2f9c@make-module-interface G2f9c@make-module-interface) (set! G48ed@G2f9a@module-interface? G2f9a@module-interface?) (set! G48ec@G2f97@G2f8f G2f97@G2f8f) (set! G48eb@G2f95@G2f90 G2f95@G2f90) (set! G48ea@G2f93@G2f8e G2f93@G2f8e) (set! G48e9@G2f8d@parse-module G2f8d@parse-module) (set! G48e8@G2f8b@chi-internal G2f8b@chi-internal) (set! G48e7@G2f89@find-dups G2f89@find-dups) (set! G48e6@G2f87@find-bound=? G2f87@find-bound=?) (set! G48e5@G2f85@chi-rhs* G2f85@chi-rhs*) (set! G48e4@G2f83@expand-interaction-rhs*/init* G2f83@expand-interaction-rhs*/init*) (set! G48e3@G2f81@chi-rhs G2f81@chi-rhs) (set! G48e2@G2f7f@chi-defun G2f7f@chi-defun) (set! G48e1@G2f7d@chi-lambda-clause* G2f7d@chi-lambda-clause*) (set! G48e0@G2f7b@chi-lambda-clause G2f7b@chi-lambda-clause) (set! G48df@G2f79@verify-formals G2f79@verify-formals) (set! G48de@G2f77@chi-set! G2f77@chi-set!) (set! G48dd@G2f75@chi-expr G2f75@chi-expr) (set! G48dc@G2f73@chi-application G2f73@chi-application) (set! G48db@G2f71@chi-expr* G2f71@chi-expr*) (set! G48da@G2f6f@chi-global-macro G2f6f@chi-global-macro) (set! G48d9@G2f6d@chi-local-macro G2f6d@chi-local-macro) (set! G48d8@G2f6b@chi-macro G2f6b@chi-macro) (set! G48d7@G2f69@do-macro-call G2f69@do-macro-call) (set! G48d6@G2f67@local-macro-transformer G2f67@local-macro-transformer) (set! G48d5@G2f65@macro-transformer G2f65@macro-transformer) (set! G48d4@G2f63@symbol-macro G2f63@symbol-macro) (set! G48d3@G2f61@file-options-macro G2f61@file-options-macro) (set! G48d2@G2f5f@core-macro-transformer G2f5f@core-macro-transformer) (set! G48d1@G2f5d@syntax-transformer G2f5d@syntax-transformer) (set! G48d0@G2f5b@ellipsis-map G2f5b@ellipsis-map) (set! G48cf@G2f59@syntax-case-transformer G2f59@syntax-case-transformer) (set! G48ce@G2f57@verify-literals G2f57@verify-literals) (set! G48cd@G2f55@underscore? G2f55@underscore?) (set! G48cc@G2f53@ellipsis? G2f53@ellipsis?) (set! G48cb@G2f51@syntax-dispatch G2f51@syntax-dispatch) (set! G48ca@G2f4f@convert-pattern G2f4f@convert-pattern) (set! G48c9@G2f4d@foreign-call-transformer G2f4d@foreign-call-transformer) (set! G48c8@G2f4b@parameterize-macro G2f4b@parameterize-macro) (set! G48c7@G2f49@incorrect-usage-macro G2f49@incorrect-usage-macro) (set! G48c6@G2f47@define-condition-type-macro G2f47@define-condition-type-macro) (set! G48c5@G2f45@define-record-type-macro G2f45@define-record-type-macro) (set! G48c4@G2f43@define-struct-macro G2f43@define-struct-macro) (set! G48c3@G2f41@quasisyntax-macro G2f41@quasisyntax-macro) (set! G48c2@G2f3f@quasiquote-macro G2f3f@quasiquote-macro) (set! G48c1@G2f3d@syntax-rules-macro G2f3d@syntax-rules-macro) (set! G48c0@G2f3b@include-into-macro G2f3b@include-into-macro) (set! G48bf@G2f39@include-macro G2f39@include-macro) (set! G48be@G2f37@do-include G2f37@do-include) (set! G48bd@G2f35@cond-macro G2f35@cond-macro) (set! G48bc@G2f33@and-macro G2f33@and-macro) (set! G48bb@G2f31@or-macro G2f31@or-macro) (set! G48ba@G2f2f@let*-macro G2f2f@let*-macro) (set! G48b9@G2f2d@do-macro G2f2d@do-macro) (set! G48b8@G2f2b@identifier-syntax-macro G2f2b@identifier-syntax-macro) (set! G48b7@G2f29@endianness-macro G2f29@endianness-macro) (set! G48b6@G2f27@assert-macro G2f27@assert-macro) (set! G48b5@G2f25@delay-macro G2f25@delay-macro) (set! G48b4@G2f23@time-macro G2f23@time-macro) (set! G48b3@G2f21@define-enumeration-macro G2f21@define-enumeration-macro) (set! G48b2@G2f1f@guard-macro G2f1f@guard-macro) (set! G48b1@G2f1d@trace-letrec-syntax-macro G2f1d@trace-letrec-syntax-macro) (set! G48b0@G2f1b@trace-let-syntax-macro G2f1b@trace-let-syntax-macro) (set! G48af@G2f19@trace-let/rec-syntax G2f19@trace-let/rec-syntax) (set! G48ae@G2f17@trace-define-syntax-macro G2f17@trace-define-syntax-macro) (set! G48ad@G2f15@trace-define-macro G2f15@trace-define-macro) (set! G48ac@G2f13@trace-lambda-macro G2f13@trace-lambda-macro) (set! G48ab@G2f11@let*-values-macro G2f11@let*-values-macro) (set! G48aa@G2f0f@let-values-macro G2f0f@let-values-macro) (set! G48a9@G2f0d@let-macro G2f0d@let-macro) (set! G48a8@G2f0b@invalid-fmls-error G2f0b@invalid-fmls-error) (set! G48a7@G2f09@with-syntax-macro G2f09@with-syntax-macro) (set! G48a6@G2f07@bless G2f07@bless) (set! G48a5@G2f05@lambda-transformer G2f05@lambda-transformer) (set! G48a4@G2f03@case-lambda-transformer G2f03@case-lambda-transformer) (set! G48a3@G2f01@quote-transformer G2f01@quote-transformer) (set! G48a2@G2eff@case-macro G2eff@case-macro) (set! G48a1@G2efd@or-transformer G2efd@or-transformer) (set! G48a0@G2efb@and-transformer G2efb@and-transformer) (set! G489f@G2ef9@if-transformer G2ef9@if-transformer) (set! G489e@G2ef7@unless-macro G2ef7@unless-macro) (set! G489d@G2ef5@when-macro G2ef5@when-macro) (set! G489c@G2ef3@record-constructor-descriptor-transformer G2ef3@record-constructor-descriptor-transformer) (set! G489b@G2ef1@record-type-descriptor-transformer G2ef1@record-type-descriptor-transformer) (set! G489a@G2eef@type-descriptor-transformer G2eef@type-descriptor-transformer) (set! G4899@G2eed@fluid-let-syntax-transformer G2eed@fluid-let-syntax-transformer) (set! G4898@G2eeb@letrec*-transformer G2eeb@letrec*-transformer) (set! G4897@G2ee9@letrec-transformer G2ee9@letrec-transformer) (set! G4896@G2ee7@letrec-helper G2ee7@letrec-helper) (set! G4895@G2ee5@add-lexicals G2ee5@add-lexicals) (set! G4894@G2ee3@add-lexical G2ee3@add-lexical) (set! G4893@G2ee1@set-lexical-mutable! G2ee1@set-lexical-mutable!) (set! G4892@G2edf@lexical-mutable? G2edf@lexical-mutable?) (set! G4891@G2edd@lexical-var G2edd@lexical-var) (set! G4890@G2edb@scheme-stx G2edb@scheme-stx) (set! G488f@G2ed9@scheme-stx-hashtable G2ed9@scheme-stx-hashtable) (set! G488e@G2ed7@parse-define-syntax G2ed7@parse-define-syntax) (set! G488d@G2ed5@parse-define G2ed5@parse-define) (set! G488c@G2d92@make-eval-transformer G2d92@make-eval-transformer) (set! G488b@G2d90@variable-transformer-procedure G2d90@variable-transformer-procedure) (set! G488a@G2d8e@variable-transformer? G2d8e@variable-transformer?) (set! G4889@G2d8c@make-variable-transformer G2d8c@make-variable-transformer) (set! G4888@G2d8a@sanitize-binding G2d8a@sanitize-binding) (set! G4887@G2d7a@syntax-type G2d7a@syntax-type) (set! G4886@G2d78@raise-unbound-error G2d78@raise-unbound-error) (set! G4885@G2d76@binding-value G2d76@binding-value) (set! G4884@G2d74@binding-type G2d74@binding-type) (set! G4883@G2d72@make-binding G2d72@make-binding) (set! G4882@G2d70@label->binding G2d70@label->binding) (set! G4881@G2d6e@id->real-label G2d6e@id->real-label) (set! G4880@G2d6c@id->label G2d6c@id->label) (set! G487f@G2d6a@same-marks*? G2d6a@same-marks*?) (set! G487e@G2d68@stx->datum G2d68@stx->datum) (set! G487d@G2d66@strip G2d66@strip) (set! G487c@G2d64@strip-annotations G2d64@strip-annotations) (set! G487b@G2d62@self-evaluating? G2d62@self-evaluating?) (set! G487a@G2d60@bound-id-member? G2d60@bound-id-member?) (set! G4879@G2d5e@distinct-bound-ids? G2d5e@distinct-bound-ids?) (set! G4878@G2d5c@valid-bound-ids? G2d5c@valid-bound-ids?) (set! G4877@G2d5a@free-id=? G2d5a@free-id=?) (set! G4876@G2d58@bound-id=? G2d58@bound-id=?) (set! G4875@G2d56@same-marks? G2d56@same-marks?) (set! G4874@G2d54@id->sym G2d54@id->sym) (set! G4873@G2d52@id? G2d52@id?) (set! G4872@G2d50@syntax->list G2d50@syntax->list) (set! G4871@G2d4e@syntax-cdr G2d4e@syntax-cdr) (set! G4870@G2d4c@syntax-car G2d4c@syntax-car) (set! G486f@G2d4a@syntax-list? G2d4a@syntax-list?) (set! G486e@G2d48@syntax-null? G2d48@syntax-null?) (set! G486d@G2d46@syntax-vector? G2d46@syntax-vector?) (set! G486c@G2d44@syntax-pair? G2d44@syntax-pair?) (set! G486b@G2d42@syntax-vector->list G2d42@syntax-vector->list) (set! G486a@G2d40@syntax-kind? G2d40@syntax-kind?) (set! G4869@G2d3e@add-subst G2d3e@add-subst) (set! G4868@G2d3c@add-mark G2d3c@add-mark) (set! G4867@G2d3a@mkstx G2d3a@mkstx) (set! G4866@G2d38@join-wraps G2d38@join-wraps) (set! G4865@G2d36@anti-mark? G2d36@anti-mark?) (set! G4864@G2d34@anti-mark G2d34@anti-mark) (set! G4863@G2d32@gen-mark G2d32@gen-mark) (set! G4862@G2d30@datum->stx G2d30@datum->stx) (set! G4861@G2d2e@rp G2d2e@rp) (set! G4860@G2d2c@set-stx-ae*! G2d2c@set-stx-ae*!) (set! G485f@G2d2a@set-stx-subst*! G2d2a@set-stx-subst*!) (set! G485e@G2d28@set-stx-mark*! G2d28@set-stx-mark*!) (set! G485d@G2d26@set-stx-expr! G2d26@set-stx-expr!) (set! G485c@G2d24@stx-ae* G2d24@stx-ae*) (set! G485b@G2d22@stx-subst* G2d22@stx-subst*) (set! G485a@G2d20@stx-mark* G2d20@stx-mark*) (set! G4859@G2d1e@stx-expr G2d1e@stx-expr) (set! G4858@G2d1c@make-stx G2d1c@make-stx) (set! G4857@G2d1a@stx? G2d1a@stx?) (set! G4856@G2d17@G2d0f G2d17@G2d0f) (set! G4855@G2d15@G2d10 G2d15@G2d10) (set! G4854@G2d13@G2d0e G2d13@G2d0e) (set! G4853@G2d0d@make-full-rib G2d0d@make-full-rib) (set! G4852@G2d0b@unseal-rib! G2d0b@unseal-rib!) (set! G4851@G2d09@seal-rib! G2d09@seal-rib!) (set! G4850@G2d07@make-rib-map G2d07@make-rib-map) (set! G484f@G2d05@extend-rib/nc! G2d05@extend-rib/nc!) (set! G484e@G2d03@extend-rib! G2d03@extend-rib!) (set! G484d@G2d01@find-label G2d01@find-label) (set! G484c@G2cff@make-cache-rib G2cff@make-cache-rib) (set! G484b@G2cfd@make-empty-rib G2cfd@make-empty-rib) (set! G484a@G2cfb@set-rib-cache! G2cfb@set-rib-cache!) (set! G4849@G2cf9@set-rib-sealed/freq! G2cf9@set-rib-sealed/freq!) (set! G4848@G2cf7@set-rib-label*! G2cf7@set-rib-label*!) (set! G4847@G2cf5@set-rib-mark**! G2cf5@set-rib-mark**!) (set! G4846@G2cf3@set-rib-sym*! G2cf3@set-rib-sym*!) (set! G4845@G2cf1@rib-cache G2cf1@rib-cache) (set! G4844@G2cef@rib-sealed/freq G2cef@rib-sealed/freq) (set! G4843@G2ced@rib-label* G2ced@rib-label*) (set! G4842@G2ceb@rib-mark** G2ceb@rib-mark**) (set! G4841@G2ce9@rib-sym* G2ce9@rib-sym*) (set! G4840@G2ce7@make-rib G2ce7@make-rib) (set! G483f@G2ce5@rib? G2ce5@rib?) (set! G483e@G2ce2@G2cda G2ce2@G2cda) (set! G483d@G2ce0@G2cdb G2ce0@G2cdb) (set! G483c@G2cde@G2cd9 G2cde@G2cd9) (set! G483b@G2cd8@gen-define-label G2cd8@gen-define-label) (set! G483a@G2cd6@gen-define-label+loc G2cd6@gen-define-label+loc) (set! G4839@G2cd4@gen-top-level-label G2cd4@gen-top-level-label) (set! G4838@G2cd2@gen-label G2cd2@gen-label) (set! G4837@G2cd0@gen-global G2cd0@gen-global) (set! G4836@G2cce@gen-lexical G2cce@gen-lexical) (set! G4835@G2ccc@top-marked? G2ccc@top-marked?) (set! G4834@G2cca@top-mark* G2cca@top-mark*) (set! G4833@G2cc5@set-union G2cc5@set-union) (set! G4832@G2cc3@set-cons G2cc3@set-cons) (G2b5f@G29fc@current-library-expander G301e@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G494a@G4945 G494c@G4947 G494e@G4946 G4951@&condition? G4953@make-&condition G4955@&condition-rtd G4957@&condition-rcd G49a1@G499c G49a3@G499e G49a5@G499d G49a8@p? G49aa@make-message-condition G49ac@G499b G49ae@message-condition? G49b0@condition-message G49b2@&message-rtd G49b4@&message-rcd G49ba@G49b5 G49bc@G49b7 G49be@G49b6 G49c1@p? G49c3@make-warning G49c5@warning? G49c7@&warning-rtd G49c9@&warning-rcd G49cf@G49ca G49d1@G49cc G49d3@G49cb G49d6@p? G49d8@make-serious-condition G49da@serious-condition? G49dc@&serious-rtd G49de@&serious-rcd G49e4@G49df G49e6@G49e1 G49e8@G49e0 G49eb@p? G49ed@make-error G49ef@error? G49f1@&error-rtd G49f3@&error-rcd G49f9@G49f4 G49fb@G49f6 G49fd@G49f5 G4a00@p? G4a02@make-violation G4a04@violation? G4a06@&violation-rtd G4a08@&violation-rcd G4a0e@G4a09 G4a10@G4a0b G4a12@G4a0a G4a15@p? G4a17@make-assertion-violation G4a19@assertion-violation? G4a1b@&assertion-rtd G4a1d@&assertion-rcd G4a24@G4a1f G4a26@G4a21 G4a28@G4a20 G4a2b@p? G4a2d@make-irritants-condition G4a2f@G4a1e G4a31@irritants-condition? G4a33@condition-irritants G4a35@&irritants-rtd G4a37@&irritants-rcd G4a3e@G4a39 G4a40@G4a3b G4a42@G4a3a G4a45@p? G4a47@make-who-condition G4a49@G4a38 G4a4b@who-condition? G4a4d@condition-who G4a4f@&who-rtd G4a51@&who-rcd G4a57@G4a52 G4a59@G4a54 G4a5b@G4a53 G4a5e@p? G4a60@make-non-continuable-violation G4a62@non-continuable-violation? G4a64@&non-continuable-rtd G4a66@&non-continuable-rcd G4a6c@G4a67 G4a6e@G4a69 G4a70@G4a68 G4a73@p? G4a75@make-implementation-restriction-violation G4a77@implementation-restriction-violation? G4a79@&implementation-restriction-rtd G4a7b@&implementation-restriction-rcd G4a81@G4a7c G4a83@G4a7e G4a85@G4a7d G4a88@p? G4a8a@make-lexical-violation G4a8c@lexical-violation? G4a8e@&lexical-rtd G4a90@&lexical-rcd G4a98@G4a93 G4a9a@G4a95 G4a9c@G4a94 G4a9f@p? G4aa1@make-syntax-violation G4aa3@G4a91 G4aa5@G4a92 G4aa7@syntax-violation? G4aa9@syntax-violation-form G4aab@syntax-violation-subform G4aad@&syntax-rtd G4aaf@&syntax-rcd G4ab5@G4ab0 G4ab7@G4ab2 G4ab9@G4ab1 G4abc@p? G4abe@make-undefined-violation G4ac0@undefined-violation? G4ac2@&undefined-rtd G4ac4@&undefined-rcd G4aca@G4ac5 G4acc@G4ac7 G4ace@G4ac6 G4ad1@p? G4ad3@make-i/o-error G4ad5@i/o-error? G4ad7@&i/o-rtd G4ad9@&i/o-rcd G4adf@G4ada G4ae1@G4adc G4ae3@G4adb G4ae6@p? G4ae8@make-i/o-read-error G4aea@i/o-read-error? G4aec@&i/o-read-rtd G4aee@&i/o-read-rcd G4af4@G4aef G4af6@G4af1 G4af8@G4af0 G4afb@p? G4afd@make-i/o-write-error G4aff@i/o-write-error? G4b01@&i/o-write-rtd G4b03@&i/o-write-rcd G4b0a@G4b05 G4b0c@G4b07 G4b0e@G4b06 G4b11@p? G4b13@make-i/o-invalid-position-error G4b15@G4b04 G4b17@i/o-invalid-position-error? G4b19@i/o-error-position G4b1b@&i/o-invalid-position-rtd G4b1d@&i/o-invalid-position-rcd G4b24@G4b1f G4b26@G4b21 G4b28@G4b20 G4b2b@p? G4b2d@make-i/o-filename-error G4b2f@G4b1e G4b31@i/o-filename-error? G4b33@i/o-error-filename G4b35@&i/o-filename-rtd G4b37@&i/o-filename-rcd G4b3d@G4b38 G4b3f@G4b3a G4b41@G4b39 G4b44@p? G4b46@make-i/o-file-protection-error G4b48@i/o-file-protection-error? G4b4a@&i/o-file-protection-rtd G4b4c@&i/o-file-protection-rcd G4b52@G4b4d G4b54@G4b4f G4b56@G4b4e G4b59@p? G4b5b@make-i/o-file-is-read-only-error G4b5d@i/o-file-is-read-only-error? G4b5f@&i/o-file-is-read-only-rtd G4b61@&i/o-file-is-read-only-rcd G4b67@G4b62 G4b69@G4b64 G4b6b@G4b63 G4b6e@p? G4b70@make-i/o-file-already-exists-error G4b72@i/o-file-already-exists-error? G4b74@&i/o-file-already-exists-rtd G4b76@&i/o-file-already-exists-rcd G4b7c@G4b77 G4b7e@G4b79 G4b80@G4b78 G4b83@p? G4b85@make-i/o-file-does-not-exist-error G4b87@i/o-file-does-not-exist-error? G4b89@&i/o-file-does-not-exist-rtd G4b8b@&i/o-file-does-not-exist-rcd G4b92@G4b8d G4b94@G4b8f G4b96@G4b8e G4b99@p? G4b9b@make-i/o-port-error G4b9d@G4b8c G4b9f@i/o-port-error? G4ba1@i/o-error-port G4ba3@&i/o-port-rtd G4ba5@&i/o-port-rcd G4bab@G4ba6 G4bad@G4ba8 G4baf@G4ba7 G4bb2@p? G4bb4@make-i/o-decoding-error G4bb6@i/o-decoding-error? G4bb8@&i/o-decoding-rtd G4bba@&i/o-decoding-rcd G4bc1@G4bbc G4bc3@G4bbe G4bc5@G4bbd G4bc8@p? G4bca@make-i/o-encoding-error G4bcc@G4bbb G4bce@i/o-encoding-error? G4bd0@i/o-encoding-error-char G4bd2@&i/o-encoding-rtd G4bd4@&i/o-encoding-rcd G4bda@G4bd5 G4bdc@G4bd7 G4bde@G4bd6 G4be1@p? G4be3@make-no-infinities-violation G4be5@no-infinities-violation? G4be7@&no-infinities-rtd G4be9@&no-infinities-rcd G4bef@G4bea G4bf1@G4bec G4bf3@G4beb G4bf6@p? G4bf8@make-no-nans-violation G4bfa@no-nans-violation? G4bfc@&no-nans-rtd G4bfe@&no-nans-rcd) (begin (set! G494a@G4945 (make-record-type-descriptor '&condition '#f 'G4948 '#f '#f '#())) (set! G494c@G4947 '#f) (set! G494e@G4946 (make-record-constructor-descriptor G494a@G4945 '#f G494c@G4947)) (set! G4951@&condition? (record-predicate G494a@G4945)) (set! G4953@make-&condition (record-constructor G494e@G4946)) (set! G4955@&condition-rtd G494a@G4945) (set! G4957@&condition-rcd G494e@G4946) (set! G49a1@G499c (make-record-type-descriptor '&message G494a@G4945 'G499f '#f '#f '#((immutable message)))) (set! G49a3@G499e '#f) (set! G49a5@G499d (make-record-constructor-descriptor G49a1@G499c G494e@G4946 G49a3@G499e)) (set! G49a8@p? (record-predicate G49a1@G499c)) (set! G49aa@make-message-condition (record-constructor G49a5@G499d)) (set! G49ac@G499b (record-accessor G49a1@G499c '0)) (set! G49ae@message-condition? (condition-predicate G49a1@G499c)) (set! G49b0@condition-message (condition-accessor G49a1@G499c G49ac@G499b)) (set! G49b2@&message-rtd G49a1@G499c) (set! G49b4@&message-rcd G49a5@G499d) (set! G49ba@G49b5 (make-record-type-descriptor '&warning G494a@G4945 'G49b8 '#f '#f '#())) (set! G49bc@G49b7 '#f) (set! G49be@G49b6 (make-record-constructor-descriptor G49ba@G49b5 G494e@G4946 G49bc@G49b7)) (set! G49c1@p? (record-predicate G49ba@G49b5)) (set! G49c3@make-warning (record-constructor G49be@G49b6)) (set! G49c5@warning? (condition-predicate G49ba@G49b5)) (set! G49c7@&warning-rtd G49ba@G49b5) (set! G49c9@&warning-rcd G49be@G49b6) (set! G49cf@G49ca (make-record-type-descriptor '&serious G494a@G4945 'G49cd '#f '#f '#())) (set! G49d1@G49cc '#f) (set! G49d3@G49cb (make-record-constructor-descriptor G49cf@G49ca G494e@G4946 G49d1@G49cc)) (set! G49d6@p? (record-predicate G49cf@G49ca)) (set! G49d8@make-serious-condition (record-constructor G49d3@G49cb)) (set! G49da@serious-condition? (condition-predicate G49cf@G49ca)) (set! G49dc@&serious-rtd G49cf@G49ca) (set! G49de@&serious-rcd G49d3@G49cb) (set! G49e4@G49df (make-record-type-descriptor '&error G49cf@G49ca 'G49e2 '#f '#f '#())) (set! G49e6@G49e1 '#f) (set! G49e8@G49e0 (make-record-constructor-descriptor G49e4@G49df G49d3@G49cb G49e6@G49e1)) (set! G49eb@p? (record-predicate G49e4@G49df)) (set! G49ed@make-error (record-constructor G49e8@G49e0)) (set! G49ef@error? (condition-predicate G49e4@G49df)) (set! G49f1@&error-rtd G49e4@G49df) (set! G49f3@&error-rcd G49e8@G49e0) (set! G49f9@G49f4 (make-record-type-descriptor '&violation G49cf@G49ca 'G49f7 '#f '#f '#())) (set! G49fb@G49f6 '#f) (set! G49fd@G49f5 (make-record-constructor-descriptor G49f9@G49f4 G49d3@G49cb G49fb@G49f6)) (set! G4a00@p? (record-predicate G49f9@G49f4)) (set! G4a02@make-violation (record-constructor G49fd@G49f5)) (set! G4a04@violation? (condition-predicate G49f9@G49f4)) (set! G4a06@&violation-rtd G49f9@G49f4) (set! G4a08@&violation-rcd G49fd@G49f5) (set! G4a0e@G4a09 (make-record-type-descriptor '&assertion G49f9@G49f4 'G4a0c '#f '#f '#())) (set! G4a10@G4a0b '#f) (set! G4a12@G4a0a (make-record-constructor-descriptor G4a0e@G4a09 G49fd@G49f5 G4a10@G4a0b)) (set! G4a15@p? (record-predicate G4a0e@G4a09)) (set! G4a17@make-assertion-violation (record-constructor G4a12@G4a0a)) (set! G4a19@assertion-violation? (condition-predicate G4a0e@G4a09)) (set! G4a1b@&assertion-rtd G4a0e@G4a09) (set! G4a1d@&assertion-rcd G4a12@G4a0a) (set! G4a24@G4a1f (make-record-type-descriptor '&irritants G494a@G4945 'G4a22 '#f '#f '#((immutable irritants)))) (set! G4a26@G4a21 '#f) (set! G4a28@G4a20 (make-record-constructor-descriptor G4a24@G4a1f G494e@G4946 G4a26@G4a21)) (set! G4a2b@p? (record-predicate G4a24@G4a1f)) (set! G4a2d@make-irritants-condition (record-constructor G4a28@G4a20)) (set! G4a2f@G4a1e (record-accessor G4a24@G4a1f '0)) (set! G4a31@irritants-condition? (condition-predicate G4a24@G4a1f)) (set! G4a33@condition-irritants (condition-accessor G4a24@G4a1f G4a2f@G4a1e)) (set! G4a35@&irritants-rtd G4a24@G4a1f) (set! G4a37@&irritants-rcd G4a28@G4a20) (set! G4a3e@G4a39 (make-record-type-descriptor '&who G494a@G4945 'G4a3c '#f '#f '#((immutable who)))) (set! G4a40@G4a3b '#f) (set! G4a42@G4a3a (make-record-constructor-descriptor G4a3e@G4a39 G494e@G4946 G4a40@G4a3b)) (set! G4a45@p? (record-predicate G4a3e@G4a39)) (set! G4a47@make-who-condition (record-constructor G4a42@G4a3a)) (set! G4a49@G4a38 (record-accessor G4a3e@G4a39 '0)) (set! G4a4b@who-condition? (condition-predicate G4a3e@G4a39)) (set! G4a4d@condition-who (condition-accessor G4a3e@G4a39 G4a49@G4a38)) (set! G4a4f@&who-rtd G4a3e@G4a39) (set! G4a51@&who-rcd G4a42@G4a3a) (set! G4a57@G4a52 (make-record-type-descriptor '&non-continuable G49f9@G49f4 'G4a55 '#f '#f '#())) (set! G4a59@G4a54 '#f) (set! G4a5b@G4a53 (make-record-constructor-descriptor G4a57@G4a52 G49fd@G49f5 G4a59@G4a54)) (set! G4a5e@p? (record-predicate G4a57@G4a52)) (set! G4a60@make-non-continuable-violation (record-constructor G4a5b@G4a53)) (set! G4a62@non-continuable-violation? (condition-predicate G4a57@G4a52)) (set! G4a64@&non-continuable-rtd G4a57@G4a52) (set! G4a66@&non-continuable-rcd G4a5b@G4a53) (set! G4a6c@G4a67 (make-record-type-descriptor '&implementation-restriction G49f9@G49f4 'G4a6a '#f '#f '#())) (set! G4a6e@G4a69 '#f) (set! G4a70@G4a68 (make-record-constructor-descriptor G4a6c@G4a67 G49fd@G49f5 G4a6e@G4a69)) (set! G4a73@p? (record-predicate G4a6c@G4a67)) (set! G4a75@make-implementation-restriction-violation (record-constructor G4a70@G4a68)) (set! G4a77@implementation-restriction-violation? (condition-predicate G4a6c@G4a67)) (set! G4a79@&implementation-restriction-rtd G4a6c@G4a67) (set! G4a7b@&implementation-restriction-rcd G4a70@G4a68) (set! G4a81@G4a7c (make-record-type-descriptor '&lexical G49f9@G49f4 'G4a7f '#f '#f '#())) (set! G4a83@G4a7e '#f) (set! G4a85@G4a7d (make-record-constructor-descriptor G4a81@G4a7c G49fd@G49f5 G4a83@G4a7e)) (set! G4a88@p? (record-predicate G4a81@G4a7c)) (set! G4a8a@make-lexical-violation (record-constructor G4a85@G4a7d)) (set! G4a8c@lexical-violation? (condition-predicate G4a81@G4a7c)) (set! G4a8e@&lexical-rtd G4a81@G4a7c) (set! G4a90@&lexical-rcd G4a85@G4a7d) (set! G4a98@G4a93 (make-record-type-descriptor '&syntax G49f9@G49f4 'G4a96 '#f '#f '#((immutable form) (immutable subform)))) (set! G4a9a@G4a95 '#f) (set! G4a9c@G4a94 (make-record-constructor-descriptor G4a98@G4a93 G49fd@G49f5 G4a9a@G4a95)) (set! G4a9f@p? (record-predicate G4a98@G4a93)) (set! G4aa1@make-syntax-violation (record-constructor G4a9c@G4a94)) (set! G4aa3@G4a91 (record-accessor G4a98@G4a93 '0)) (set! G4aa5@G4a92 (record-accessor G4a98@G4a93 '1)) (set! G4aa7@syntax-violation? (condition-predicate G4a98@G4a93)) (set! G4aa9@syntax-violation-form (condition-accessor G4a98@G4a93 G4aa3@G4a91)) (set! G4aab@syntax-violation-subform (condition-accessor G4a98@G4a93 G4aa5@G4a92)) (set! G4aad@&syntax-rtd G4a98@G4a93) (set! G4aaf@&syntax-rcd G4a9c@G4a94) (set! G4ab5@G4ab0 (make-record-type-descriptor '&undefined G49f9@G49f4 'G4ab3 '#f '#f '#())) (set! G4ab7@G4ab2 '#f) (set! G4ab9@G4ab1 (make-record-constructor-descriptor G4ab5@G4ab0 G49fd@G49f5 G4ab7@G4ab2)) (set! G4abc@p? (record-predicate G4ab5@G4ab0)) (set! G4abe@make-undefined-violation (record-constructor G4ab9@G4ab1)) (set! G4ac0@undefined-violation? (condition-predicate G4ab5@G4ab0)) (set! G4ac2@&undefined-rtd G4ab5@G4ab0) (set! G4ac4@&undefined-rcd G4ab9@G4ab1) (set! G4aca@G4ac5 (make-record-type-descriptor '&i/o G49e4@G49df 'G4ac8 '#f '#f '#())) (set! G4acc@G4ac7 '#f) (set! G4ace@G4ac6 (make-record-constructor-descriptor G4aca@G4ac5 G49e8@G49e0 G4acc@G4ac7)) (set! G4ad1@p? (record-predicate G4aca@G4ac5)) (set! G4ad3@make-i/o-error (record-constructor G4ace@G4ac6)) (set! G4ad5@i/o-error? (condition-predicate G4aca@G4ac5)) (set! G4ad7@&i/o-rtd G4aca@G4ac5) (set! G4ad9@&i/o-rcd G4ace@G4ac6) (set! G4adf@G4ada (make-record-type-descriptor '&i/o-read G4aca@G4ac5 'G4add '#f '#f '#())) (set! G4ae1@G4adc '#f) (set! G4ae3@G4adb (make-record-constructor-descriptor G4adf@G4ada G4ace@G4ac6 G4ae1@G4adc)) (set! G4ae6@p? (record-predicate G4adf@G4ada)) (set! G4ae8@make-i/o-read-error (record-constructor G4ae3@G4adb)) (set! G4aea@i/o-read-error? (condition-predicate G4adf@G4ada)) (set! G4aec@&i/o-read-rtd G4adf@G4ada) (set! G4aee@&i/o-read-rcd G4ae3@G4adb) (set! G4af4@G4aef (make-record-type-descriptor '&i/o-write G4aca@G4ac5 'G4af2 '#f '#f '#())) (set! G4af6@G4af1 '#f) (set! G4af8@G4af0 (make-record-constructor-descriptor G4af4@G4aef G4ace@G4ac6 G4af6@G4af1)) (set! G4afb@p? (record-predicate G4af4@G4aef)) (set! G4afd@make-i/o-write-error (record-constructor G4af8@G4af0)) (set! G4aff@i/o-write-error? (condition-predicate G4af4@G4aef)) (set! G4b01@&i/o-write-rtd G4af4@G4aef) (set! G4b03@&i/o-write-rcd G4af8@G4af0) (set! G4b0a@G4b05 (make-record-type-descriptor '&i/o-invalid-position G4aca@G4ac5 'G4b08 '#f '#f '#((immutable position)))) (set! G4b0c@G4b07 '#f) (set! G4b0e@G4b06 (make-record-constructor-descriptor G4b0a@G4b05 G4ace@G4ac6 G4b0c@G4b07)) (set! G4b11@p? (record-predicate G4b0a@G4b05)) (set! G4b13@make-i/o-invalid-position-error (record-constructor G4b0e@G4b06)) (set! G4b15@G4b04 (record-accessor G4b0a@G4b05 '0)) (set! G4b17@i/o-invalid-position-error? (condition-predicate G4b0a@G4b05)) (set! G4b19@i/o-error-position (condition-accessor G4b0a@G4b05 G4b15@G4b04)) (set! G4b1b@&i/o-invalid-position-rtd G4b0a@G4b05) (set! G4b1d@&i/o-invalid-position-rcd G4b0e@G4b06) (set! G4b24@G4b1f (make-record-type-descriptor '&i/o-filename G4aca@G4ac5 'G4b22 '#f '#f '#((immutable filename)))) (set! G4b26@G4b21 '#f) (set! G4b28@G4b20 (make-record-constructor-descriptor G4b24@G4b1f G4ace@G4ac6 G4b26@G4b21)) (set! G4b2b@p? (record-predicate G4b24@G4b1f)) (set! G4b2d@make-i/o-filename-error (record-constructor G4b28@G4b20)) (set! G4b2f@G4b1e (record-accessor G4b24@G4b1f '0)) (set! G4b31@i/o-filename-error? (condition-predicate G4b24@G4b1f)) (set! G4b33@i/o-error-filename (condition-accessor G4b24@G4b1f G4b2f@G4b1e)) (set! G4b35@&i/o-filename-rtd G4b24@G4b1f) (set! G4b37@&i/o-filename-rcd G4b28@G4b20) (set! G4b3d@G4b38 (make-record-type-descriptor '&i/o-file-protection G4b24@G4b1f 'G4b3b '#f '#f '#())) (set! G4b3f@G4b3a '#f) (set! G4b41@G4b39 (make-record-constructor-descriptor G4b3d@G4b38 G4b28@G4b20 G4b3f@G4b3a)) (set! G4b44@p? (record-predicate G4b3d@G4b38)) (set! G4b46@make-i/o-file-protection-error (record-constructor G4b41@G4b39)) (set! G4b48@i/o-file-protection-error? (condition-predicate G4b3d@G4b38)) (set! G4b4a@&i/o-file-protection-rtd G4b3d@G4b38) (set! G4b4c@&i/o-file-protection-rcd G4b41@G4b39) (set! G4b52@G4b4d (make-record-type-descriptor '&i/o-file-is-read-only G4b3d@G4b38 'G4b50 '#f '#f '#())) (set! G4b54@G4b4f '#f) (set! G4b56@G4b4e (make-record-constructor-descriptor G4b52@G4b4d G4b41@G4b39 G4b54@G4b4f)) (set! G4b59@p? (record-predicate G4b52@G4b4d)) (set! G4b5b@make-i/o-file-is-read-only-error (record-constructor G4b56@G4b4e)) (set! G4b5d@i/o-file-is-read-only-error? (condition-predicate G4b52@G4b4d)) (set! G4b5f@&i/o-file-is-read-only-rtd G4b52@G4b4d) (set! G4b61@&i/o-file-is-read-only-rcd G4b56@G4b4e) (set! G4b67@G4b62 (make-record-type-descriptor '&i/o-file-already-exists G4b24@G4b1f 'G4b65 '#f '#f '#())) (set! G4b69@G4b64 '#f) (set! G4b6b@G4b63 (make-record-constructor-descriptor G4b67@G4b62 G4b28@G4b20 G4b69@G4b64)) (set! G4b6e@p? (record-predicate G4b67@G4b62)) (set! G4b70@make-i/o-file-already-exists-error (record-constructor G4b6b@G4b63)) (set! G4b72@i/o-file-already-exists-error? (condition-predicate G4b67@G4b62)) (set! G4b74@&i/o-file-already-exists-rtd G4b67@G4b62) (set! G4b76@&i/o-file-already-exists-rcd G4b6b@G4b63) (set! G4b7c@G4b77 (make-record-type-descriptor '&i/o-file-does-not-exist G4b24@G4b1f 'G4b7a '#f '#f '#())) (set! G4b7e@G4b79 '#f) (set! G4b80@G4b78 (make-record-constructor-descriptor G4b7c@G4b77 G4b28@G4b20 G4b7e@G4b79)) (set! G4b83@p? (record-predicate G4b7c@G4b77)) (set! G4b85@make-i/o-file-does-not-exist-error (record-constructor G4b80@G4b78)) (set! G4b87@i/o-file-does-not-exist-error? (condition-predicate G4b7c@G4b77)) (set! G4b89@&i/o-file-does-not-exist-rtd G4b7c@G4b77) (set! G4b8b@&i/o-file-does-not-exist-rcd G4b80@G4b78) (set! G4b92@G4b8d (make-record-type-descriptor '&i/o-port G4aca@G4ac5 'G4b90 '#f '#f '#((immutable port)))) (set! G4b94@G4b8f '#f) (set! G4b96@G4b8e (make-record-constructor-descriptor G4b92@G4b8d G4ace@G4ac6 G4b94@G4b8f)) (set! G4b99@p? (record-predicate G4b92@G4b8d)) (set! G4b9b@make-i/o-port-error (record-constructor G4b96@G4b8e)) (set! G4b9d@G4b8c (record-accessor G4b92@G4b8d '0)) (set! G4b9f@i/o-port-error? (condition-predicate G4b92@G4b8d)) (set! G4ba1@i/o-error-port (condition-accessor G4b92@G4b8d G4b9d@G4b8c)) (set! G4ba3@&i/o-port-rtd G4b92@G4b8d) (set! G4ba5@&i/o-port-rcd G4b96@G4b8e) (set! G4bab@G4ba6 (make-record-type-descriptor '&i/o-decoding G4b92@G4b8d 'G4ba9 '#f '#f '#())) (set! G4bad@G4ba8 '#f) (set! G4baf@G4ba7 (make-record-constructor-descriptor G4bab@G4ba6 G4b96@G4b8e G4bad@G4ba8)) (set! G4bb2@p? (record-predicate G4bab@G4ba6)) (set! G4bb4@make-i/o-decoding-error (record-constructor G4baf@G4ba7)) (set! G4bb6@i/o-decoding-error? (condition-predicate G4bab@G4ba6)) (set! G4bb8@&i/o-decoding-rtd G4bab@G4ba6) (set! G4bba@&i/o-decoding-rcd G4baf@G4ba7) (set! G4bc1@G4bbc (make-record-type-descriptor '&i/o-encoding G4b92@G4b8d 'G4bbf '#f '#f '#((immutable char)))) (set! G4bc3@G4bbe '#f) (set! G4bc5@G4bbd (make-record-constructor-descriptor G4bc1@G4bbc G4b96@G4b8e G4bc3@G4bbe)) (set! G4bc8@p? (record-predicate G4bc1@G4bbc)) (set! G4bca@make-i/o-encoding-error (record-constructor G4bc5@G4bbd)) (set! G4bcc@G4bbb (record-accessor G4bc1@G4bbc '0)) (set! G4bce@i/o-encoding-error? (condition-predicate G4bc1@G4bbc)) (set! G4bd0@i/o-encoding-error-char (condition-accessor G4bc1@G4bbc G4bcc@G4bbb)) (set! G4bd2@&i/o-encoding-rtd G4bc1@G4bbc) (set! G4bd4@&i/o-encoding-rcd G4bc5@G4bbd) (set! G4bda@G4bd5 (make-record-type-descriptor '&no-infinities G4a6c@G4a67 'G4bd8 '#f '#f '#())) (set! G4bdc@G4bd7 '#f) (set! G4bde@G4bd6 (make-record-constructor-descriptor G4bda@G4bd5 G4a70@G4a68 G4bdc@G4bd7)) (set! G4be1@p? (record-predicate G4bda@G4bd5)) (set! G4be3@make-no-infinities-violation (record-constructor G4bde@G4bd6)) (set! G4be5@no-infinities-violation? (condition-predicate G4bda@G4bd5)) (set! G4be7@&no-infinities-rtd G4bda@G4bd5) (set! G4be9@&no-infinities-rcd G4bde@G4bd6) (set! G4bef@G4bea (make-record-type-descriptor '&no-nans G4a6c@G4a67 'G4bed '#f '#f '#())) (set! G4bf1@G4bec '#f) (set! G4bf3@G4beb (make-record-constructor-descriptor G4bef@G4bea G4a70@G4a68 G4bf1@G4bec)) (set! G4bf6@p? (record-predicate G4bef@G4bea)) (set! G4bf8@make-no-nans-violation (record-constructor G4bf3@G4beb)) (set! G4bfa@no-nans-violation? (condition-predicate G4bef@G4bea)) (set! G4bfc@&no-nans-rtd G4bef@G4bea) (set! G4bfe@&no-nans-rcd G4bf3@G4beb) (begin (set! G4cef@G4bfe@&no-nans-rcd G4bfe@&no-nans-rcd) (set! G4cee@G4bfc@&no-nans-rtd G4bfc@&no-nans-rtd) (set! G4ced@G4bfa@no-nans-violation? G4bfa@no-nans-violation?) (set! G4cec@G4bf8@make-no-nans-violation G4bf8@make-no-nans-violation) (set! G4ceb@G4bf6@p? G4bf6@p?) (set! G4cea@G4bf3@G4beb G4bf3@G4beb) (set! G4ce9@G4bf1@G4bec G4bf1@G4bec) (set! G4ce8@G4bef@G4bea G4bef@G4bea) (set! G4ce7@G4be9@&no-infinities-rcd G4be9@&no-infinities-rcd) (set! G4ce6@G4be7@&no-infinities-rtd G4be7@&no-infinities-rtd) (set! G4ce5@G4be5@no-infinities-violation? G4be5@no-infinities-violation?) (set! G4ce4@G4be3@make-no-infinities-violation G4be3@make-no-infinities-violation) (set! G4ce3@G4be1@p? G4be1@p?) (set! G4ce2@G4bde@G4bd6 G4bde@G4bd6) (set! G4ce1@G4bdc@G4bd7 G4bdc@G4bd7) (set! G4ce0@G4bda@G4bd5 G4bda@G4bd5) (set! G4cdf@G4bd4@&i/o-encoding-rcd G4bd4@&i/o-encoding-rcd) (set! G4cde@G4bd2@&i/o-encoding-rtd G4bd2@&i/o-encoding-rtd) (set! G4cdd@G4bd0@i/o-encoding-error-char G4bd0@i/o-encoding-error-char) (set! G4cdc@G4bce@i/o-encoding-error? G4bce@i/o-encoding-error?) (set! G4cdb@G4bcc@G4bbb G4bcc@G4bbb) (set! G4cda@G4bca@make-i/o-encoding-error G4bca@make-i/o-encoding-error) (set! G4cd9@G4bc8@p? G4bc8@p?) (set! G4cd8@G4bc5@G4bbd G4bc5@G4bbd) (set! G4cd7@G4bc3@G4bbe G4bc3@G4bbe) (set! G4cd6@G4bc1@G4bbc G4bc1@G4bbc) (set! G4cd5@G4bba@&i/o-decoding-rcd G4bba@&i/o-decoding-rcd) (set! G4cd4@G4bb8@&i/o-decoding-rtd G4bb8@&i/o-decoding-rtd) (set! G4cd3@G4bb6@i/o-decoding-error? G4bb6@i/o-decoding-error?) (set! G4cd2@G4bb4@make-i/o-decoding-error G4bb4@make-i/o-decoding-error) (set! G4cd1@G4bb2@p? G4bb2@p?) (set! G4cd0@G4baf@G4ba7 G4baf@G4ba7) (set! G4ccf@G4bad@G4ba8 G4bad@G4ba8) (set! G4cce@G4bab@G4ba6 G4bab@G4ba6) (set! G4ccd@G4ba5@&i/o-port-rcd G4ba5@&i/o-port-rcd) (set! G4ccc@G4ba3@&i/o-port-rtd G4ba3@&i/o-port-rtd) (set! G4ccb@G4ba1@i/o-error-port G4ba1@i/o-error-port) (set! G4cca@G4b9f@i/o-port-error? G4b9f@i/o-port-error?) (set! G4cc9@G4b9d@G4b8c G4b9d@G4b8c) (set! G4cc8@G4b9b@make-i/o-port-error G4b9b@make-i/o-port-error) (set! G4cc7@G4b99@p? G4b99@p?) (set! G4cc6@G4b96@G4b8e G4b96@G4b8e) (set! G4cc5@G4b94@G4b8f G4b94@G4b8f) (set! G4cc4@G4b92@G4b8d G4b92@G4b8d) (set! G4cc3@G4b8b@&i/o-file-does-not-exist-rcd G4b8b@&i/o-file-does-not-exist-rcd) (set! G4cc2@G4b89@&i/o-file-does-not-exist-rtd G4b89@&i/o-file-does-not-exist-rtd) (set! G4cc1@G4b87@i/o-file-does-not-exist-error? G4b87@i/o-file-does-not-exist-error?) (set! G4cc0@G4b85@make-i/o-file-does-not-exist-error G4b85@make-i/o-file-does-not-exist-error) (set! G4cbf@G4b83@p? G4b83@p?) (set! G4cbe@G4b80@G4b78 G4b80@G4b78) (set! G4cbd@G4b7e@G4b79 G4b7e@G4b79) (set! G4cbc@G4b7c@G4b77 G4b7c@G4b77) (set! G4cbb@G4b76@&i/o-file-already-exists-rcd G4b76@&i/o-file-already-exists-rcd) (set! G4cba@G4b74@&i/o-file-already-exists-rtd G4b74@&i/o-file-already-exists-rtd) (set! G4cb9@G4b72@i/o-file-already-exists-error? G4b72@i/o-file-already-exists-error?) (set! G4cb8@G4b70@make-i/o-file-already-exists-error G4b70@make-i/o-file-already-exists-error) (set! G4cb7@G4b6e@p? G4b6e@p?) (set! G4cb6@G4b6b@G4b63 G4b6b@G4b63) (set! G4cb5@G4b69@G4b64 G4b69@G4b64) (set! G4cb4@G4b67@G4b62 G4b67@G4b62) (set! G4cb3@G4b61@&i/o-file-is-read-only-rcd G4b61@&i/o-file-is-read-only-rcd) (set! G4cb2@G4b5f@&i/o-file-is-read-only-rtd G4b5f@&i/o-file-is-read-only-rtd) (set! G4cb1@G4b5d@i/o-file-is-read-only-error? G4b5d@i/o-file-is-read-only-error?) (set! G4cb0@G4b5b@make-i/o-file-is-read-only-error G4b5b@make-i/o-file-is-read-only-error) (set! G4caf@G4b59@p? G4b59@p?) (set! G4cae@G4b56@G4b4e G4b56@G4b4e) (set! G4cad@G4b54@G4b4f G4b54@G4b4f) (set! G4cac@G4b52@G4b4d G4b52@G4b4d) (set! G4cab@G4b4c@&i/o-file-protection-rcd G4b4c@&i/o-file-protection-rcd) (set! G4caa@G4b4a@&i/o-file-protection-rtd G4b4a@&i/o-file-protection-rtd) (set! G4ca9@G4b48@i/o-file-protection-error? G4b48@i/o-file-protection-error?) (set! G4ca8@G4b46@make-i/o-file-protection-error G4b46@make-i/o-file-protection-error) (set! G4ca7@G4b44@p? G4b44@p?) (set! G4ca6@G4b41@G4b39 G4b41@G4b39) (set! G4ca5@G4b3f@G4b3a G4b3f@G4b3a) (set! G4ca4@G4b3d@G4b38 G4b3d@G4b38) (set! G4ca3@G4b37@&i/o-filename-rcd G4b37@&i/o-filename-rcd) (set! G4ca2@G4b35@&i/o-filename-rtd G4b35@&i/o-filename-rtd) (set! G4ca1@G4b33@i/o-error-filename G4b33@i/o-error-filename) (set! G4ca0@G4b31@i/o-filename-error? G4b31@i/o-filename-error?) (set! G4c9f@G4b2f@G4b1e G4b2f@G4b1e) (set! G4c9e@G4b2d@make-i/o-filename-error G4b2d@make-i/o-filename-error) (set! G4c9d@G4b2b@p? G4b2b@p?) (set! G4c9c@G4b28@G4b20 G4b28@G4b20) (set! G4c9b@G4b26@G4b21 G4b26@G4b21) (set! G4c9a@G4b24@G4b1f G4b24@G4b1f) (set! G4c99@G4b1d@&i/o-invalid-position-rcd G4b1d@&i/o-invalid-position-rcd) (set! G4c98@G4b1b@&i/o-invalid-position-rtd G4b1b@&i/o-invalid-position-rtd) (set! G4c97@G4b19@i/o-error-position G4b19@i/o-error-position) (set! G4c96@G4b17@i/o-invalid-position-error? G4b17@i/o-invalid-position-error?) (set! G4c95@G4b15@G4b04 G4b15@G4b04) (set! G4c94@G4b13@make-i/o-invalid-position-error G4b13@make-i/o-invalid-position-error) (set! G4c93@G4b11@p? G4b11@p?) (set! G4c92@G4b0e@G4b06 G4b0e@G4b06) (set! G4c91@G4b0c@G4b07 G4b0c@G4b07) (set! G4c90@G4b0a@G4b05 G4b0a@G4b05) (set! G4c8f@G4b03@&i/o-write-rcd G4b03@&i/o-write-rcd) (set! G4c8e@G4b01@&i/o-write-rtd G4b01@&i/o-write-rtd) (set! G4c8d@G4aff@i/o-write-error? G4aff@i/o-write-error?) (set! G4c8c@G4afd@make-i/o-write-error G4afd@make-i/o-write-error) (set! G4c8b@G4afb@p? G4afb@p?) (set! G4c8a@G4af8@G4af0 G4af8@G4af0) (set! G4c89@G4af6@G4af1 G4af6@G4af1) (set! G4c88@G4af4@G4aef G4af4@G4aef) (set! G4c87@G4aee@&i/o-read-rcd G4aee@&i/o-read-rcd) (set! G4c86@G4aec@&i/o-read-rtd G4aec@&i/o-read-rtd) (set! G4c85@G4aea@i/o-read-error? G4aea@i/o-read-error?) (set! G4c84@G4ae8@make-i/o-read-error G4ae8@make-i/o-read-error) (set! G4c83@G4ae6@p? G4ae6@p?) (set! G4c82@G4ae3@G4adb G4ae3@G4adb) (set! G4c81@G4ae1@G4adc G4ae1@G4adc) (set! G4c80@G4adf@G4ada G4adf@G4ada) (set! G4c7f@G4ad9@&i/o-rcd G4ad9@&i/o-rcd) (set! G4c7e@G4ad7@&i/o-rtd G4ad7@&i/o-rtd) (set! G4c7d@G4ad5@i/o-error? G4ad5@i/o-error?) (set! G4c7c@G4ad3@make-i/o-error G4ad3@make-i/o-error) (set! G4c7b@G4ad1@p? G4ad1@p?) (set! G4c7a@G4ace@G4ac6 G4ace@G4ac6) (set! G4c79@G4acc@G4ac7 G4acc@G4ac7) (set! G4c78@G4aca@G4ac5 G4aca@G4ac5) (set! G4c77@G4ac4@&undefined-rcd G4ac4@&undefined-rcd) (set! G4c76@G4ac2@&undefined-rtd G4ac2@&undefined-rtd) (set! G4c75@G4ac0@undefined-violation? G4ac0@undefined-violation?) (set! G4c74@G4abe@make-undefined-violation G4abe@make-undefined-violation) (set! G4c73@G4abc@p? G4abc@p?) (set! G4c72@G4ab9@G4ab1 G4ab9@G4ab1) (set! G4c71@G4ab7@G4ab2 G4ab7@G4ab2) (set! G4c70@G4ab5@G4ab0 G4ab5@G4ab0) (set! G4c6f@G4aaf@&syntax-rcd G4aaf@&syntax-rcd) (set! G4c6e@G4aad@&syntax-rtd G4aad@&syntax-rtd) (set! G4c6d@G4aab@syntax-violation-subform G4aab@syntax-violation-subform) (set! G4c6c@G4aa9@syntax-violation-form G4aa9@syntax-violation-form) (set! G4c6b@G4aa7@syntax-violation? G4aa7@syntax-violation?) (set! G4c6a@G4aa5@G4a92 G4aa5@G4a92) (set! G4c69@G4aa3@G4a91 G4aa3@G4a91) (set! G4c68@G4aa1@make-syntax-violation G4aa1@make-syntax-violation) (set! G4c67@G4a9f@p? G4a9f@p?) (set! G4c66@G4a9c@G4a94 G4a9c@G4a94) (set! G4c65@G4a9a@G4a95 G4a9a@G4a95) (set! G4c64@G4a98@G4a93 G4a98@G4a93) (set! G4c63@G4a90@&lexical-rcd G4a90@&lexical-rcd) (set! G4c62@G4a8e@&lexical-rtd G4a8e@&lexical-rtd) (set! G4c61@G4a8c@lexical-violation? G4a8c@lexical-violation?) (set! G4c60@G4a8a@make-lexical-violation G4a8a@make-lexical-violation) (set! G4c5f@G4a88@p? G4a88@p?) (set! G4c5e@G4a85@G4a7d G4a85@G4a7d) (set! G4c5d@G4a83@G4a7e G4a83@G4a7e) (set! G4c5c@G4a81@G4a7c G4a81@G4a7c) (set! G4c5b@G4a7b@&implementation-restriction-rcd G4a7b@&implementation-restriction-rcd) (set! G4c5a@G4a79@&implementation-restriction-rtd G4a79@&implementation-restriction-rtd) (set! G4c59@G4a77@implementation-restriction-violation? G4a77@implementation-restriction-violation?) (set! G4c58@G4a75@make-implementation-restriction-violation G4a75@make-implementation-restriction-violation) (set! G4c57@G4a73@p? G4a73@p?) (set! G4c56@G4a70@G4a68 G4a70@G4a68) (set! G4c55@G4a6e@G4a69 G4a6e@G4a69) (set! G4c54@G4a6c@G4a67 G4a6c@G4a67) (set! G4c53@G4a66@&non-continuable-rcd G4a66@&non-continuable-rcd) (set! G4c52@G4a64@&non-continuable-rtd G4a64@&non-continuable-rtd) (set! G4c51@G4a62@non-continuable-violation? G4a62@non-continuable-violation?) (set! G4c50@G4a60@make-non-continuable-violation G4a60@make-non-continuable-violation) (set! G4c4f@G4a5e@p? G4a5e@p?) (set! G4c4e@G4a5b@G4a53 G4a5b@G4a53) (set! G4c4d@G4a59@G4a54 G4a59@G4a54) (set! G4c4c@G4a57@G4a52 G4a57@G4a52) (set! G4c4b@G4a51@&who-rcd G4a51@&who-rcd) (set! G4c4a@G4a4f@&who-rtd G4a4f@&who-rtd) (set! G4c49@G4a4d@condition-who G4a4d@condition-who) (set! G4c48@G4a4b@who-condition? G4a4b@who-condition?) (set! G4c47@G4a49@G4a38 G4a49@G4a38) (set! G4c46@G4a47@make-who-condition G4a47@make-who-condition) (set! G4c45@G4a45@p? G4a45@p?) (set! G4c44@G4a42@G4a3a G4a42@G4a3a) (set! G4c43@G4a40@G4a3b G4a40@G4a3b) (set! G4c42@G4a3e@G4a39 G4a3e@G4a39) (set! G4c41@G4a37@&irritants-rcd G4a37@&irritants-rcd) (set! G4c40@G4a35@&irritants-rtd G4a35@&irritants-rtd) (set! G4c3f@G4a33@condition-irritants G4a33@condition-irritants) (set! G4c3e@G4a31@irritants-condition? G4a31@irritants-condition?) (set! G4c3d@G4a2f@G4a1e G4a2f@G4a1e) (set! G4c3c@G4a2d@make-irritants-condition G4a2d@make-irritants-condition) (set! G4c3b@G4a2b@p? G4a2b@p?) (set! G4c3a@G4a28@G4a20 G4a28@G4a20) (set! G4c39@G4a26@G4a21 G4a26@G4a21) (set! G4c38@G4a24@G4a1f G4a24@G4a1f) (set! G4c37@G4a1d@&assertion-rcd G4a1d@&assertion-rcd) (set! G4c36@G4a1b@&assertion-rtd G4a1b@&assertion-rtd) (set! G4c35@G4a19@assertion-violation? G4a19@assertion-violation?) (set! G4c34@G4a17@make-assertion-violation G4a17@make-assertion-violation) (set! G4c33@G4a15@p? G4a15@p?) (set! G4c32@G4a12@G4a0a G4a12@G4a0a) (set! G4c31@G4a10@G4a0b G4a10@G4a0b) (set! G4c30@G4a0e@G4a09 G4a0e@G4a09) (set! G4c2f@G4a08@&violation-rcd G4a08@&violation-rcd) (set! G4c2e@G4a06@&violation-rtd G4a06@&violation-rtd) (set! G4c2d@G4a04@violation? G4a04@violation?) (set! G4c2c@G4a02@make-violation G4a02@make-violation) (set! G4c2b@G4a00@p? G4a00@p?) (set! G4c2a@G49fd@G49f5 G49fd@G49f5) (set! G4c29@G49fb@G49f6 G49fb@G49f6) (set! G4c28@G49f9@G49f4 G49f9@G49f4) (set! G4c27@G49f3@&error-rcd G49f3@&error-rcd) (set! G4c26@G49f1@&error-rtd G49f1@&error-rtd) (set! G4c25@G49ef@error? G49ef@error?) (set! G4c24@G49ed@make-error G49ed@make-error) (set! G4c23@G49eb@p? G49eb@p?) (set! G4c22@G49e8@G49e0 G49e8@G49e0) (set! G4c21@G49e6@G49e1 G49e6@G49e1) (set! G4c20@G49e4@G49df G49e4@G49df) (set! G4c1f@G49de@&serious-rcd G49de@&serious-rcd) (set! G4c1e@G49dc@&serious-rtd G49dc@&serious-rtd) (set! G4c1d@G49da@serious-condition? G49da@serious-condition?) (set! G4c1c@G49d8@make-serious-condition G49d8@make-serious-condition) (set! G4c1b@G49d6@p? G49d6@p?) (set! G4c1a@G49d3@G49cb G49d3@G49cb) (set! G4c19@G49d1@G49cc G49d1@G49cc) (set! G4c18@G49cf@G49ca G49cf@G49ca) (set! G4c17@G49c9@&warning-rcd G49c9@&warning-rcd) (set! G4c16@G49c7@&warning-rtd G49c7@&warning-rtd) (set! G4c15@G49c5@warning? G49c5@warning?) (set! G4c14@G49c3@make-warning G49c3@make-warning) (set! G4c13@G49c1@p? G49c1@p?) (set! G4c12@G49be@G49b6 G49be@G49b6) (set! G4c11@G49bc@G49b7 G49bc@G49b7) (set! G4c10@G49ba@G49b5 G49ba@G49b5) (set! G4c0f@G49b4@&message-rcd G49b4@&message-rcd) (set! G4c0e@G49b2@&message-rtd G49b2@&message-rtd) (set! G4c0d@G49b0@condition-message G49b0@condition-message) (set! G4c0c@G49ae@message-condition? G49ae@message-condition?) (set! G4c0b@G49ac@G499b G49ac@G499b) (set! G4c0a@G49aa@make-message-condition G49aa@make-message-condition) (set! G4c09@G49a8@p? G49a8@p?) (set! G4c08@G49a5@G499d G49a5@G499d) (set! G4c07@G49a3@G499e G49a3@G499e) (set! G4c06@G49a1@G499c G49a1@G499c) (set! G4c05@G4957@&condition-rcd G4957@&condition-rcd) (set! G4c04@G4955@&condition-rtd G4955@&condition-rtd) (set! G4c03@G4953@make-&condition G4953@make-&condition) (set! G4c02@G4951@&condition? G4951@&condition?) (set! G4c01@G494e@G4946 G494e@G4946) (set! G4c00@G494c@G4947 G494c@G4947) (set! G4bff@G494a@G4945 G494a@G4945)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G293f@G28f4@current-primitive-locations (lambda (G50c7@x) ((lambda (G50c9@t) (if G50c9@t (cdr G50c9@t) '#f)) (assq G50c7@x '((&no-nans-rcd . G4cef@G4bfe@&no-nans-rcd) (&no-nans-rtd . G4cee@G4bfc@&no-nans-rtd) (&no-infinities-rcd . G4ce7@G4be9@&no-infinities-rcd) (&no-infinities-rtd . G4ce6@G4be7@&no-infinities-rtd) (&i/o-encoding-rcd . G4cdf@G4bd4@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4cde@G4bd2@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4cd5@G4bba@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4cd4@G4bb8@&i/o-decoding-rtd) (&i/o-port-rcd . G4ccd@G4ba5@&i/o-port-rcd) (&i/o-port-rtd . G4ccc@G4ba3@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cc3@G4b8b@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cc2@G4b89@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cbb@G4b76@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cba@G4b74@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cb3@G4b61@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cb2@G4b5f@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cab@G4b4c@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4caa@G4b4a@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4ca3@G4b37@&i/o-filename-rcd) (&i/o-filename-rtd . G4ca2@G4b35@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4c99@G4b1d@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4c98@G4b1b@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c8f@G4b03@&i/o-write-rcd) (&i/o-write-rtd . G4c8e@G4b01@&i/o-write-rtd) (&i/o-read-rcd . G4c87@G4aee@&i/o-read-rcd) (&i/o-read-rtd . G4c86@G4aec@&i/o-read-rtd) (&i/o-rcd . G4c7f@G4ad9@&i/o-rcd) (&i/o-rtd . G4c7e@G4ad7@&i/o-rtd) (&undefined-rcd . G4c77@G4ac4@&undefined-rcd) (&undefined-rtd . G4c76@G4ac2@&undefined-rtd) (&syntax-rcd . G4c6f@G4aaf@&syntax-rcd) (&syntax-rtd . G4c6e@G4aad@&syntax-rtd) (&lexical-rcd . G4c63@G4a90@&lexical-rcd) (&lexical-rtd . G4c62@G4a8e@&lexical-rtd) (&implementation-restriction-rcd . G4c5b@G4a7b@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c5a@G4a79@&implementation-restriction-rtd) (&non-continuable-rcd . G4c53@G4a66@&non-continuable-rcd) (&non-continuable-rtd . G4c52@G4a64@&non-continuable-rtd) (&who-rcd . G4c4b@G4a51@&who-rcd) (&who-rtd . G4c4a@G4a4f@&who-rtd) (&irritants-rcd . G4c41@G4a37@&irritants-rcd) (&irritants-rtd . G4c40@G4a35@&irritants-rtd) (&assertion-rcd . G4c37@G4a1d@&assertion-rcd) (&assertion-rtd . G4c36@G4a1b@&assertion-rtd) (&violation-rcd . G4c2f@G4a08@&violation-rcd) (&violation-rtd . G4c2e@G4a06@&violation-rtd) (&error-rcd . G4c27@G49f3@&error-rcd) (&error-rtd . G4c26@G49f1@&error-rtd) (&serious-rcd . G4c1f@G49de@&serious-rcd) (&serious-rtd . G4c1e@G49dc@&serious-rtd) (&warning-rcd . G4c17@G49c9@&warning-rcd) (&warning-rtd . G4c16@G49c7@&warning-rtd) (&message-rcd . G4c0f@G49b4@&message-rcd) (&message-rtd . G4c0e@G49b2@&message-rtd) (&condition-rcd . G4c05@G4957@&condition-rcd) (&condition-rtd . G4c04@G4955@&condition-rtd) (syntax-error . G4937@G3038@syntax-error) (syntax-dispatch . G48cb@G2f51@syntax-dispatch) (load . G4dc1@G4d05@load) (interaction-environment . G493f@G3048@interaction-environment) (make-parameter . G28ee@G2824@make-parameter) (make-variable-transformer . G4889@G2d8c@make-variable-transformer) (identifier? . G493a@G303e@identifier?) (generate-temporaries . G4930@G302a@generate-temporaries) (free-identifier=? . G4931@G302c@free-identifier=?) (syntax->datum . G493c@G3042@syntax->datum) (datum->syntax . G493b@G3040@datum->syntax) (bound-identifier=? . G4932@G302e@bound-identifier=?) (make-i/o-write-error . G4c8c@G4afd@make-i/o-write-error) (make-i/o-read-error . G4c84@G4ae8@make-i/o-read-error) (make-i/o-port-error . G4cc8@G4b9b@make-i/o-port-error) (make-i/o-invalid-position-error . G4c94@G4b13@make-i/o-invalid-position-error) (make-i/o-filename-error . G4c9e@G4b2d@make-i/o-filename-error) (make-i/o-file-protection-error . G4ca8@G4b46@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cb0@G4b5b@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cc0@G4b85@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cb8@G4b70@make-i/o-file-already-exists-error) (make-i/o-error . G4c7c@G4ad3@make-i/o-error) (make-i/o-encoding-error . G4cda@G4bca@make-i/o-encoding-error) (make-i/o-decoding-error . G4cd2@G4bb4@make-i/o-decoding-error) (i/o-write-error? . G4c8d@G4aff@i/o-write-error?) (i/o-read-error? . G4c85@G4aea@i/o-read-error?) (i/o-port-error? . G4cca@G4b9f@i/o-port-error?) (i/o-invalid-position-error? . G4c96@G4b17@i/o-invalid-position-error?) (i/o-filename-error? . G4ca0@G4b31@i/o-filename-error?) (i/o-file-protection-error? . G4ca9@G4b48@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cb1@G4b5d@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cc1@G4b87@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cb9@G4b72@i/o-file-already-exists-error?) (i/o-error? . G4c7d@G4ad5@i/o-error?) (i/o-error-position . G4c97@G4b19@i/o-error-position) (i/o-error-port . G4ccb@G4ba1@i/o-error-port) (i/o-error-filename . G4ca1@G4b33@i/o-error-filename) (i/o-encoding-error? . G4cdc@G4bce@i/o-encoding-error?) (i/o-encoding-error-char . G4cdd@G4bd0@i/o-encoding-error-char) (i/o-decoding-error? . G4cd3@G4bb6@i/o-decoding-error?) (scheme-report-environment . G4927@G3018@scheme-report-environment) (null-environment . G4926@G3016@null-environment) (command-line . G4dbe@G4cff@command-line) (eval . G4929@G301c@eval) (environment . G4925@G3014@environment) (who-condition? . G4c48@G4a4b@who-condition?) (warning? . G4c15@G49c5@warning?) (violation? . G4c2d@G4a04@violation?) (undefined-violation? . G4c75@G4ac0@undefined-violation?) (syntax-violation? . G4c6b@G4aa7@syntax-violation?) (syntax-violation-subform . G4c6d@G4aab@syntax-violation-subform) (syntax-violation-form . G4c6c@G4aa9@syntax-violation-form) (syntax-violation . G4939@G303c@syntax-violation) (serious-condition? . G4c1d@G49da@serious-condition?) (non-continuable-violation? . G4c51@G4a62@non-continuable-violation?) (message-condition? . G4c0c@G49ae@message-condition?) (make-who-condition . G4c46@G4a47@make-who-condition) (make-warning . G4c14@G49c3@make-warning) (make-violation . G4c2c@G4a02@make-violation) (make-undefined-violation . G4c74@G4abe@make-undefined-violation) (make-syntax-violation . G4c68@G4aa1@make-syntax-violation) (make-serious-condition . G4c1c@G49d8@make-serious-condition) (make-non-continuable-violation . G4c50@G4a60@make-non-continuable-violation) (make-message-condition . G4c0a@G49aa@make-message-condition) (make-lexical-violation . G4c60@G4a8a@make-lexical-violation) (make-irritants-condition . G4c3c@G4a2d@make-irritants-condition) (make-implementation-restriction-violation . G4c58@G4a75@make-implementation-restriction-violation) (make-error . G4c24@G49ed@make-error) (make-assertion-violation . G4c34@G4a17@make-assertion-violation) (lexical-violation? . G4c61@G4a8c@lexical-violation?) (irritants-condition? . G4c3e@G4a31@irritants-condition?) (implementation-restriction-violation? . G4c59@G4a77@implementation-restriction-violation?) (error? . G4c25@G49ef@error?) (condition-who . G4c49@G4a4d@condition-who) (condition-message . G4c0d@G49b0@condition-message) (condition-irritants . G4c3f@G4a33@condition-irritants) (assertion-violation? . G4c35@G4a19@assertion-violation?) (no-nans-violation? . G4ced@G4bfa@no-nans-violation?) (no-infinities-violation? . G4ce5@G4be5@no-infinities-violation?) (make-no-nans-violation . G4cec@G4bf8@make-no-nans-violation) (make-no-infinities-violation . G4ce4@G4be3@make-no-infinities-violation)))))) (G2b67@G2a0c@install-library 'G509a '(mosh interaction) '() '() '() '() '((string-upcase . G5048) (string-titlecase . G5047) (string-normalize-nfkd . G5046) (string-normalize-nfkc . G5045) (string-normalize-nfd . G5044) (string-normalize-nfc . G5043) (string-foldcase . G5042) (string-downcase . G5041) (string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-title-case? . G5039) (char-numeric? . G5038) (char-lower-case? . G5037) (char-general-category . G5036) (char-upcase . G5035) (char-titlecase . G5034) (char-foldcase . G5033) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c) (make-variable-transformer . G2d8b) (identifier? . G303d) (generate-temporaries . G3029) (free-identifier=? . G302b) (syntax->datum . G3041) (datum->syntax . G303f) (bound-identifier=? . G302d) (record-type-descriptor? . G502b) (record-predicate . G502a) (record-mutator . G5029) (record-constructor . G5028) (record-accessor . G5027) (make-record-type-descriptor . G5026) (make-record-constructor-descriptor . G5025) (record? . G5024) (record-type-uid . G5023) (record-type-sealed? . G5022) (record-type-parent . G5021) (record-type-opaque? . G5020) (record-type-name . G501f) (record-type-generative? . G501e) (record-type-field-names . G501d) (record-rtd . G501c) (record-field-mutable? . G501b) (delete-file . G501a) (file-exists? . G5019) (vector-sort! . G5018) (vector-sort . G5017) (list-sort . G5016) (symbol-hash . G5015) (string-ci-hash . G5014) (string-hash . G5013) (equal-hash . G5012) (hashtable-equivalence-function . G5011) (make-hashtable . G5010) (hashtable-hash-function . G500f) (make-eqv-hashtable . G500e) (make-eq-hashtable . G500d) (hashtable? . G500c) (hashtable-update! . G500b) (hashtable-size . G500a) (hashtable-set! . G5009) (hashtable-ref . G5008) (hashtable-mutable? . G5007) (hashtable-keys . G5006) (hashtable-entries . G5005) (hashtable-delete! . G5004) (hashtable-copy . G5003) (hashtable-contains? . G5002) (hashtable-clear! . G5001) (call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (utf-8-codec . G4fea) (utf-16-codec . G4fe9) (transcoder-error-handling-mode . G4fe8) (transcoder-eol-style . G4fe7) (transcoder-codec . G4fe6) (transcoded-port . G4fe5) (textual-port? . G4fe4) (string->bytevector . G4fe3) (standard-output-port . G4fe2) (standard-input-port . G4fe1) (standard-error-port . G4fe0) (set-port-position! . G4fdf) (put-u8 . G4fde) (put-string . G4fdd) (put-datum . G4fdc) (put-char . G4fdb) (put-bytevector . G4fda) (port? . G4fd9) (port-transcoder . G4fd8) (port-position . G4fd7) (port-has-set-port-position!? . G4fd6) (port-has-port-position? . G4fd5) (port-eof? . G4fd4) (output-port-buffer-mode . G4fd3) (open-string-output-port . G4fd2) (open-string-input-port . G4fd1) (open-file-output-port . G4fd0) (open-file-input/output-port . G4fcf) (open-file-input-port . G4fce) (open-bytevector-output-port . G4fcd) (open-bytevector-input-port . G4fcc) (native-transcoder . G4fcb) (native-eol-style . G4fca) (make-transcoder . G4fc9) (latin-1-codec . G4fc8) (make-i/o-write-error . G4afc) (make-i/o-read-error . G4ae7) (make-i/o-port-error . G4b9a) (make-i/o-invalid-position-error . G4b12) (make-i/o-filename-error . G4b2c) (make-i/o-file-protection-error . G4b45) (make-i/o-file-is-read-only-error . G4b5a) (make-i/o-file-does-not-exist-error . G4b84) (make-i/o-file-already-exists-error . G4b6f) (make-i/o-error . G4ad2) (make-i/o-encoding-error . G4bc9) (make-i/o-decoding-error . G4bb3) (make-custom-textual-output-port . G4fc7) (make-custom-textual-input/output-port . G4fc6) (make-custom-textual-input-port . G4fc5) (make-custom-binary-output-port . G4fc4) (make-custom-binary-input/output-port . G4fc3) (make-custom-binary-input-port . G4fc2) (make-bytevector . G4fc1) (lookahead-u8 . G4fc0) (lookahead-char . G4fbf) (i/o-write-error? . G4afe) (i/o-read-error? . G4ae9) (i/o-port-error? . G4b9e) (i/o-invalid-position-error? . G4b16) (i/o-filename-error? . G4b30) (i/o-file-protection-error? . G4b47) (i/o-file-is-read-only-error? . G4b5c) (i/o-file-does-not-exist-error? . G4b86) (i/o-file-already-exists-error? . G4b71) (i/o-error? . G4ad4) (i/o-error-position . G4b18) (i/o-error-port . G4ba0) (i/o-error-filename . G4b32) (i/o-encoding-error? . G4bcd) (i/o-encoding-error-char . G4bcf) (i/o-decoding-error? . G4bb5) (get-u8 . G4fbe) (get-string-n! . G4fbd) (get-string-n . G4fbc) (get-string-all . G4fbb) (get-line . G4fba) (get-datum . G4fb9) (get-char . G4fb8) (get-bytevector-some . G4fb7) (get-bytevector-n! . G4fb6) (get-bytevector-n . G4fb5) (get-bytevector-all . G4fb4) (flush-output-port . G4fb3) (close-port . G4fb2) (exit . G4faa) (command-line . G4cfe) (string-fill! . G4fa9) (string-set! . G4fa8) (set-cdr! . G4fa7) (set-car! . G4fa6) (remove . G4fa5) (remv . G4fa4) (remp . G4fa3) (remq . G4fa2) (partition . G4fa1) (memv . G4fa0) (memq . G4f9f) (memp . G4f9e) (member . G4f9d) (exists . G4f9c) (for-all . G4f9b) (fold-right . G4f9a) (fold-left . G4f99) (find . G4f98) (filter . G4f97) (cons* . G4f96) (assv . G4f95) (assq . G4f94) (assp . G4f93) (assoc . G4f92) (call-with-string-output-port . G4f91) (call-with-port . G4f90) (call-with-bytevector-output-port . G4f8f) (bytevector->string . G4f8e) (buffer-mode? . G4f8d) (binary-port? . G4f8c) (with-exception-handler . G4f8b) (raise-continuable . G4f8a) (raise . G4f89) (eval . G301b) (environment . G3013) (make-enumeration . G4f88) (enum-set=? . G4f87) (enum-set-universe . G4f86) (enum-set-union . G4f85) (enum-set-subset? . G4f84) (enum-set-projection . G4f83) (enum-set-member? . G4f82) (enum-set-intersection . G4f81) (enum-set-indexer . G4f80) (enum-set-difference . G4f7f) (enum-set-constructor . G4f7e) (enum-set-complement . G4f7d) (enum-set->list . G4f7c) (who-condition? . G4a4a) (warning? . G49c4) (violation? . G4a03) (undefined-violation? . G4abf) (syntax-violation? . G4aa6) (syntax-violation-subform . G4aaa) (syntax-violation-form . G4aa8) (syntax-violation . G303b) (simple-conditions . G4f7b) (serious-condition? . G49d9) (non-continuable-violation? . G4a61) (message-condition? . G49ad) (make-who-condition . G4a46) (make-warning . G49c2) (make-violation . G4a01) (make-undefined-violation . G4abd) (make-syntax-violation . G4aa0) (make-serious-condition . G49d7) (make-non-continuable-violation . G4a5f) (make-message-condition . G49a9) (make-lexical-violation . G4a89) (make-irritants-condition . G4a2c) (make-implementation-restriction-violation . G4a74) (make-error . G49ec) (make-assertion-violation . G4a16) (lexical-violation? . G4a8b) (irritants-condition? . G4a30) (implementation-restriction-violation? . G4a76) (error? . G49ee) (condition-who . G4a4c) (condition-predicate . G4f7a) (condition-message . G49af) (condition-irritants . G4a32) (condition-accessor . G4f79) (condition . G4f78) (assertion-violation? . G4a18) (condition? . G4f77) (utf32->string . G4f76) (utf16->string . G4f75) (utf8->string . G4f74) (uint-list->bytevector . G4f73) (u8-list->bytevector . G4f72) (string->utf8 . G4f71) (string->utf32 . G4f70) (string->utf16 . G4f6f) (sint-list->bytevector . G4f6e) (native-endianness . G4f6d) (bytevector? . G4f6c) (bytevector=? . G4f6b) (bytevector-uint-set! . G4f6a) (bytevector-uint-ref . G4f69) (bytevector-u8-set! . G4f68) (bytevector-u8-ref . G4f67) (bytevector-u64-set! . G4f66) (bytevector-u64-ref . G4f65) (bytevector-u64-native-set! . G4f64) (bytevector-u64-native-ref . G4f63) (bytevector-u32-set! . G4f62) (bytevector-u32-ref . G4f61) (bytevector-u32-native-set! . G4f60) (bytevector-u32-native-ref . G4f5f) (bytevector-u16-set! . G4f5e) (bytevector-u16-ref . G4f5d) (bytevector-u16-native-set! . G4f5c) (bytevector-u16-native-ref . G4f5b) (bytevector-sint-set! . G4f5a) (bytevector-sint-ref . G4f59) (bytevector-s8-set! . G4f58) (bytevector-s8-ref . G4f57) (bytevector-s64-set! . G4f56) (bytevector-s64-ref . G4f55) (bytevector-s64-native-set! . G4f54) (bytevector-s64-native-ref . G4f53) (bytevector-s32-set! . G4f52) (bytevector-s32-ref . G4f51) (bytevector-s32-native-set! . G4f50) (bytevector-s32-native-ref . G4f4f) (bytevector-s16-set! . G4f4e) (bytevector-s16-ref . G4f4d) (bytevector-s16-native-set! . G4f4c) (bytevector-s16-native-ref . G4f4b) (bytevector-length . G4f4a) (bytevector-ieee-single-ref . G4f49) (bytevector-ieee-single-set! . G4f48) (bytevector-ieee-single-native-set! . G4f47) (bytevector-ieee-single-native-ref . G4f46) (bytevector-ieee-double-set! . G4f45) (bytevector-ieee-double-ref . G4f44) (bytevector-ieee-double-native-set! . G4f43) (bytevector-ieee-double-native-ref . G4f42) (bytevector-fill! . G4f41) (bytevector-copy! . G4f40) (bytevector-copy . G4f3f) (bytevector->uint-list . G4f3e) (bytevector->u8-list . G4f3d) (bytevector->sint-list . G4f3c) (no-nans-violation? . G4bf9) (no-infinities-violation? . G4be4) (make-no-nans-violation . G4bf7) (make-no-infinities-violation . G4be2) (real->flonum . G4f3b) (flzero? . G4f3a) (fltruncate . G4f39) (fltan . G4f38) (flsqrt . G4f37) (flsin . G4f36) (flround . G4f35) (flpositive? . G4f34) (flonum? . G4f33) (flodd? . G4f32) (flnumerator . G4f31) (flnegative? . G4f30) (flnan? . G4f2f) (flmod0 . G4f2e) (flmod . G4f2d) (flmin . G4f2c) (flmax . G4f2b) (fllog . G4f2a) (flinteger? . G4f29) (flinfinite? . G4f28) (flfloor . G4f27) (flfinite? . G4f26) (flexpt . G4f25) (flexp . G4f24) (fleven? . G4f23) (fldiv0-and-mod0 . G4f22) (fldiv0 . G4f21) (fldiv-and-mod . G4f20) (fldiv . G4f1f) (fldenominator . G4f1e) (flcos . G4f1d) (flceiling . G4f1c) (flatan . G4f1b) (flasin . G4f1a) (flacos . G4f19) (flabs . G4f18) (fl>? . G4f17) (fl>=? . G4f16) (fl=? . G4f15) (fl<? . G4f14) (fl<=? . G4f13) (fl/ . G4f12) (fl- . G4f11) (fl+ . G4f10) (fl* . G4f0f) (fixnum->flonum . G4f0e) (fxzero? . G4f0d) (fxxor . G4f0c) (fxrotate-bit-field . G4f0b) (fxreverse-bit-field . G4f0a) (fxpositive? . G4f09) (fxodd? . G4f08) (fxnot . G4f07) (fxnegative? . G4f06) (fxmod0 . G4f05) (fxmod . G4f04) (fxmin . G4f03) (fxmax . G4f02) (fxlength . G4f01) (fxior . G4f00) (fxif . G4eff) (fxfirst-bit-set . G4efe) (fxeven? . G4efd) (fxdiv0-and-mod0 . G4efc) (fxdiv0 . G4efb) (fxdiv-and-mod . G4efa) (fxdiv . G4ef9) (fxcopy-bit-field . G4ef8) (fxcopy-bit . G4ef7) (fxbit-set? . G4ef6) (fxbit-field . G4ef5) (fxbit-count . G4ef4) (fxarithmetic-shift-right . G4ef3) (fxarithmetic-shift-left . G4ef2) (fxarithmetic-shift . G4ef1) (fxand . G4ef0) (fx>? . G4eef) (fx>=? . G4eee) (fx=? . G4eed) (fx<? . G4eec) (fx<=? . G4eeb) (fx-/carry . G4eea) (fx- . G4ee9) (fx+/carry . G4ee8) (fx+ . G4ee7) (fx*/carry . G4ee6) (fx* . G4ee5) (greatest-fixnum . G4ee4) (least-fixnum . G4ee3) (fixnum-width . G4ee2) (fixnum? . G4ee1) (bitwise-rotate-bit-field . G4ee0) (bitwise-reverse-bit-field . G4edf) (bitwise-length . G4ede) (bitwise-if . G4edd) (bitwise-first-bit-set . G4edc) (bitwise-copy-bit-field . G4edb) (bitwise-copy-bit . G4eda) (bitwise-bit-set? . G4ed9) (bitwise-bit-field . G4ed8) (bitwise-bit-count . G4ed7) (bitwise-xor . G4ed6) (bitwise-ior . G4ed5) (bitwise-and . G4ed4) (bitwise-not . G4ed3) (bitwise-arithmetic-shift-right . G4ed2) (bitwise-arithmetic-shift-left . G4ed1) (bitwise-arithmetic-shift . G4ed0) (zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-map . G4ecb) (vector-length . G4eca) (vector-for-each . G4ec9) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol=? . G4ec1) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-for-each . G4eb6) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-valued? . G4eaa) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (rational-valued? . G4ea6) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (null? . G4e9e) (not . G4e9d) (negative? . G4e9c) (nan? . G4e9b) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer-valued? . G4e88) (integer->char . G4e87) (infinite? . G4e86) (inexact? . G4e85) (inexact . G4e84) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (finite? . G4e7f) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (exact-integer-sqrt . G4e7b) (exact . G4e7a) (even? . G4e79) (error . G4e78) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (div0-and-mod0 . G4e73) (mod0 . G4e72) (div0 . G4e71) (div-and-mod . G4e70) (mod . G4e6f) (div . G4e6e) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call/cc . G4e60) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (boolean=? . G4e3f) (atan . G4e3e) (assertion-violation . G4e3d) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (library . G4e2d) (export . G4e2c) (&no-nans . G4e2b) (&no-infinities . G4e2a) (&i/o-encoding . G4e29) (&i/o-decoding . G4e28) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e) (&undefined . G4e1d) (&syntax . G4e1c) (&lexical . G4e1b) (&implementation-restriction . G4e1a) (&non-continuable . G4e19) (&who . G4e18) (&irritants . G4e17) (&assertion . G4e16) (&violation . G4e15) (&error . G4e14) (&serious . G4e13) (&warning . G4e12) (&message . G4e11) (&condition . G4e10) (define-condition-type . G4e0f) (define-enumeration . G4e0e) (define-record-type . G4e0d) (parent-rtd . G4e0c) (nongenerative . G4e0b) (opaque . G4e0a) (sealed . G4e09) (protocol . G4e08) (parent . G4e07) (immutable . G4e06) (mutable . G4e05) (fields . G4e04) (error-handling-mode . G4e03) (file-options . G4e02) (buffer-mode . G4e01) (eol-style . G4e00) (guard . G4dff) (unsyntax-splicing . G4dfc) (unsyntax . G4dfb) (unquote-splicing . G4dfa) (unquote . G4df9) (assert . G4df4) (endianness . G4df3) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (let*-values . G4dec) (let-values . G4deb) (identifier-syntax . G4dea) (with-syntax . G4de9) (quasisyntax . G4de8) (quasiquote . G4de7) (syntax-rules . G4de6) (include . G4de5) (record-constructor-descriptor . G4de3) (record-type-descriptor . G4de2) (case . G4de1) (unless . G4ddf) (when . G4dde) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec* . G4dda) (letrec . G4dd9) (case-lambda . G4dd7) (lambda . G4dd6) (syntax . G4dd5) (syntax-case . G4dd4) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (import . G4dce) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G509b '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fab) (unquote-splicing . G4dfa) (unquote . G4df9) (_ . G4df8) (else . G4df7) (=> . G4df6) (... . G4df5) (delay . G4df2) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (quasiquote . G4de7) (syntax-rules . G4de6) (case . G4de1) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec . G4dd9) (lambda . G4dd6) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G509c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-numeric? . G5038) (char-lower-case? . G5037) (char-upcase . G5035) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c) (call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object . G4ff0) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (scheme-report-environment . G3017) (quotient . G4fb1) (null-environment . G3015) (remainder . G4fb0) (modulo . G4faf) (inexact->exact . G4fae) (force . G4fad) (exact->inexact . G4fac) (make-promise . G4fab) (string-fill! . G4fa9) (string-set! . G4fa8) (set-cdr! . G4fa7) (set-car! . G4fa6) (memv . G4fa0) (memq . G4f9f) (member . G4f9d) (assv . G4f95) (assq . G4f94) (assoc . G4f92) (eval . G301b) (zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-length . G4eca) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (not . G4e9d) (negative? . G4e9c) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer->char . G4e87) (inexact? . G4e85) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (even? . G4e79) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (atan . G4e3e) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (unquote-splicing . G4dfa) (unquote . G4df9) (else . G4df7) (=> . G4df6) (... . G4df5) (delay . G4df2) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (quasiquote . G4de7) (syntax-rules . G4de6) (case . G4de1) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec . G4dd9) (lambda . G4dd6) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G509d '(psyntax modules) '() '() '() '() '((module . G4dcc)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G509e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G509f '(rnrs) '(6) '() '() '() '((regexp? . G5092) (string-upcase . G5048) (string-titlecase . G5047) (string-normalize-nfkd . G5046) (string-normalize-nfkc . G5045) (string-normalize-nfd . G5044) (string-normalize-nfc . G5043) (string-foldcase . G5042) (string-downcase . G5041) (string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-title-case? . G5039) (char-numeric? . G5038) (char-lower-case? . G5037) (char-general-category . G5036) (char-upcase . G5035) (char-titlecase . G5034) (char-foldcase . G5033) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c) (make-variable-transformer . G2d8b) (identifier? . G303d) (generate-temporaries . G3029) (free-identifier=? . G302b) (syntax->datum . G3041) (datum->syntax . G303f) (bound-identifier=? . G302d) (record-type-descriptor? . G502b) (record-predicate . G502a) (record-mutator . G5029) (record-constructor . G5028) (record-accessor . G5027) (make-record-type-descriptor . G5026) (make-record-constructor-descriptor . G5025) (record? . G5024) (record-type-uid . G5023) (record-type-sealed? . G5022) (record-type-parent . G5021) (record-type-opaque? . G5020) (record-type-name . G501f) (record-type-generative? . G501e) (record-type-field-names . G501d) (record-rtd . G501c) (record-field-mutable? . G501b) (delete-file . G501a) (file-exists? . G5019) (vector-sort! . G5018) (vector-sort . G5017) (list-sort . G5016) (symbol-hash . G5015) (string-ci-hash . G5014) (string-hash . G5013) (equal-hash . G5012) (hashtable-equivalence-function . G5011) (make-hashtable . G5010) (hashtable-hash-function . G500f) (make-eqv-hashtable . G500e) (make-eq-hashtable . G500d) (hashtable? . G500c) (hashtable-update! . G500b) (hashtable-size . G500a) (hashtable-set! . G5009) (hashtable-ref . G5008) (hashtable-mutable? . G5007) (hashtable-keys . G5006) (hashtable-entries . G5005) (hashtable-delete! . G5004) (hashtable-copy . G5003) (hashtable-contains? . G5002) (hashtable-clear! . G5001) (call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (utf-8-codec . G4fea) (utf-16-codec . G4fe9) (transcoder-error-handling-mode . G4fe8) (transcoder-eol-style . G4fe7) (transcoder-codec . G4fe6) (transcoded-port . G4fe5) (textual-port? . G4fe4) (string->bytevector . G4fe3) (standard-output-port . G4fe2) (standard-input-port . G4fe1) (standard-error-port . G4fe0) (set-port-position! . G4fdf) (put-u8 . G4fde) (put-string . G4fdd) (put-datum . G4fdc) (put-char . G4fdb) (put-bytevector . G4fda) (port? . G4fd9) (port-transcoder . G4fd8) (port-position . G4fd7) (port-has-set-port-position!? . G4fd6) (port-has-port-position? . G4fd5) (port-eof? . G4fd4) (output-port-buffer-mode . G4fd3) (open-string-output-port . G4fd2) (open-string-input-port . G4fd1) (open-file-output-port . G4fd0) (open-file-input/output-port . G4fcf) (open-file-input-port . G4fce) (open-bytevector-output-port . G4fcd) (open-bytevector-input-port . G4fcc) (native-transcoder . G4fcb) (native-eol-style . G4fca) (make-transcoder . G4fc9) (latin-1-codec . G4fc8) (make-i/o-write-error . G4afc) (make-i/o-read-error . G4ae7) (make-i/o-port-error . G4b9a) (make-i/o-invalid-position-error . G4b12) (make-i/o-filename-error . G4b2c) (make-i/o-file-protection-error . G4b45) (make-i/o-file-is-read-only-error . G4b5a) (make-i/o-file-does-not-exist-error . G4b84) (make-i/o-file-already-exists-error . G4b6f) (make-i/o-error . G4ad2) (make-i/o-encoding-error . G4bc9) (make-i/o-decoding-error . G4bb3) (make-custom-textual-output-port . G4fc7) (make-custom-textual-input/output-port . G4fc6) (make-custom-textual-input-port . G4fc5) (make-custom-binary-output-port . G4fc4) (make-custom-binary-input/output-port . G4fc3) (make-custom-binary-input-port . G4fc2) (make-bytevector . G4fc1) (lookahead-u8 . G4fc0) (lookahead-char . G4fbf) (i/o-write-error? . G4afe) (i/o-read-error? . G4ae9) (i/o-port-error? . G4b9e) (i/o-invalid-position-error? . G4b16) (i/o-filename-error? . G4b30) (i/o-file-protection-error? . G4b47) (i/o-file-is-read-only-error? . G4b5c) (i/o-file-does-not-exist-error? . G4b86) (i/o-file-already-exists-error? . G4b71) (i/o-error? . G4ad4) (i/o-error-position . G4b18) (i/o-error-port . G4ba0) (i/o-error-filename . G4b32) (i/o-encoding-error? . G4bcd) (i/o-encoding-error-char . G4bcf) (i/o-decoding-error? . G4bb5) (get-u8 . G4fbe) (get-string-n! . G4fbd) (get-string-n . G4fbc) (get-string-all . G4fbb) (get-line . G4fba) (get-datum . G4fb9) (get-char . G4fb8) (get-bytevector-some . G4fb7) (get-bytevector-n! . G4fb6) (get-bytevector-n . G4fb5) (get-bytevector-all . G4fb4) (flush-output-port . G4fb3) (close-port . G4fb2) (exit . G4faa) (command-line . G4cfe) (remove . G4fa5) (remv . G4fa4) (remp . G4fa3) (remq . G4fa2) (partition . G4fa1) (memv . G4fa0) (memq . G4f9f) (memp . G4f9e) (member . G4f9d) (exists . G4f9c) (for-all . G4f9b) (fold-right . G4f9a) (fold-left . G4f99) (find . G4f98) (filter . G4f97) (cons* . G4f96) (assv . G4f95) (assq . G4f94) (assp . G4f93) (assoc . G4f92) (call-with-string-output-port . G4f91) (call-with-port . G4f90) (call-with-bytevector-output-port . G4f8f) (bytevector->string . G4f8e) (buffer-mode? . G4f8d) (binary-port? . G4f8c) (with-exception-handler . G4f8b) (raise-continuable . G4f8a) (raise . G4f89) (make-enumeration . G4f88) (enum-set=? . G4f87) (enum-set-universe . G4f86) (enum-set-union . G4f85) (enum-set-subset? . G4f84) (enum-set-projection . G4f83) (enum-set-member? . G4f82) (enum-set-intersection . G4f81) (enum-set-indexer . G4f80) (enum-set-difference . G4f7f) (enum-set-constructor . G4f7e) (enum-set-complement . G4f7d) (enum-set->list . G4f7c) (who-condition? . G4a4a) (warning? . G49c4) (violation? . G4a03) (undefined-violation? . G4abf) (syntax-violation? . G4aa6) (syntax-violation-subform . G4aaa) (syntax-violation-form . G4aa8) (syntax-violation . G303b) (simple-conditions . G4f7b) (serious-condition? . G49d9) (non-continuable-violation? . G4a61) (message-condition? . G49ad) (make-who-condition . G4a46) (make-warning . G49c2) (make-violation . G4a01) (make-undefined-violation . G4abd) (make-syntax-violation . G4aa0) (make-serious-condition . G49d7) (make-non-continuable-violation . G4a5f) (make-message-condition . G49a9) (make-lexical-violation . G4a89) (make-irritants-condition . G4a2c) (make-implementation-restriction-violation . G4a74) (make-error . G49ec) (make-assertion-violation . G4a16) (lexical-violation? . G4a8b) (irritants-condition? . G4a30) (implementation-restriction-violation? . G4a76) (error? . G49ee) (condition-who . G4a4c) (condition-predicate . G4f7a) (condition-message . G49af) (condition-irritants . G4a32) (condition-accessor . G4f79) (condition . G4f78) (assertion-violation? . G4a18) (condition? . G4f77) (utf32->string . G4f76) (utf16->string . G4f75) (utf8->string . G4f74) (uint-list->bytevector . G4f73) (u8-list->bytevector . G4f72) (string->utf8 . G4f71) (string->utf32 . G4f70) (string->utf16 . G4f6f) (sint-list->bytevector . G4f6e) (native-endianness . G4f6d) (bytevector? . G4f6c) (bytevector=? . G4f6b) (bytevector-uint-set! . G4f6a) (bytevector-uint-ref . G4f69) (bytevector-u8-set! . G4f68) (bytevector-u8-ref . G4f67) (bytevector-u64-set! . G4f66) (bytevector-u64-ref . G4f65) (bytevector-u64-native-set! . G4f64) (bytevector-u64-native-ref . G4f63) (bytevector-u32-set! . G4f62) (bytevector-u32-ref . G4f61) (bytevector-u32-native-set! . G4f60) (bytevector-u32-native-ref . G4f5f) (bytevector-u16-set! . G4f5e) (bytevector-u16-ref . G4f5d) (bytevector-u16-native-set! . G4f5c) (bytevector-u16-native-ref . G4f5b) (bytevector-sint-set! . G4f5a) (bytevector-sint-ref . G4f59) (bytevector-s8-set! . G4f58) (bytevector-s8-ref . G4f57) (bytevector-s64-set! . G4f56) (bytevector-s64-ref . G4f55) (bytevector-s64-native-set! . G4f54) (bytevector-s64-native-ref . G4f53) (bytevector-s32-set! . G4f52) (bytevector-s32-ref . G4f51) (bytevector-s32-native-set! . G4f50) (bytevector-s32-native-ref . G4f4f) (bytevector-s16-set! . G4f4e) (bytevector-s16-ref . G4f4d) (bytevector-s16-native-set! . G4f4c) (bytevector-s16-native-ref . G4f4b) (bytevector-length . G4f4a) (bytevector-ieee-single-ref . G4f49) (bytevector-ieee-single-set! . G4f48) (bytevector-ieee-single-native-set! . G4f47) (bytevector-ieee-single-native-ref . G4f46) (bytevector-ieee-double-set! . G4f45) (bytevector-ieee-double-ref . G4f44) (bytevector-ieee-double-native-set! . G4f43) (bytevector-ieee-double-native-ref . G4f42) (bytevector-fill! . G4f41) (bytevector-copy! . G4f40) (bytevector-copy . G4f3f) (bytevector->uint-list . G4f3e) (bytevector->u8-list . G4f3d) (bytevector->sint-list . G4f3c) (no-nans-violation? . G4bf9) (no-infinities-violation? . G4be4) (make-no-nans-violation . G4bf7) (make-no-infinities-violation . G4be2) (real->flonum . G4f3b) (flzero? . G4f3a) (fltruncate . G4f39) (fltan . G4f38) (flsqrt . G4f37) (flsin . G4f36) (flround . G4f35) (flpositive? . G4f34) (flonum? . G4f33) (flodd? . G4f32) (flnumerator . G4f31) (flnegative? . G4f30) (flnan? . G4f2f) (flmod0 . G4f2e) (flmod . G4f2d) (flmin . G4f2c) (flmax . G4f2b) (fllog . G4f2a) (flinteger? . G4f29) (flinfinite? . G4f28) (flfloor . G4f27) (flfinite? . G4f26) (flexpt . G4f25) (flexp . G4f24) (fleven? . G4f23) (fldiv0-and-mod0 . G4f22) (fldiv0 . G4f21) (fldiv-and-mod . G4f20) (fldiv . G4f1f) (fldenominator . G4f1e) (flcos . G4f1d) (flceiling . G4f1c) (flatan . G4f1b) (flasin . G4f1a) (flacos . G4f19) (flabs . G4f18) (fl>? . G4f17) (fl>=? . G4f16) (fl=? . G4f15) (fl<? . G4f14) (fl<=? . G4f13) (fl/ . G4f12) (fl- . G4f11) (fl+ . G4f10) (fl* . G4f0f) (fixnum->flonum . G4f0e) (fxzero? . G4f0d) (fxxor . G4f0c) (fxrotate-bit-field . G4f0b) (fxreverse-bit-field . G4f0a) (fxpositive? . G4f09) (fxodd? . G4f08) (fxnot . G4f07) (fxnegative? . G4f06) (fxmod0 . G4f05) (fxmod . G4f04) (fxmin . G4f03) (fxmax . G4f02) (fxlength . G4f01) (fxior . G4f00) (fxif . G4eff) (fxfirst-bit-set . G4efe) (fxeven? . G4efd) (fxdiv0-and-mod0 . G4efc) (fxdiv0 . G4efb) (fxdiv-and-mod . G4efa) (fxdiv . G4ef9) (fxcopy-bit-field . G4ef8) (fxcopy-bit . G4ef7) (fxbit-set? . G4ef6) (fxbit-field . G4ef5) (fxbit-count . G4ef4) (fxarithmetic-shift-right . G4ef3) (fxarithmetic-shift-left . G4ef2) (fxarithmetic-shift . G4ef1) (fxand . G4ef0) (fx>? . G4eef) (fx>=? . G4eee) (fx=? . G4eed) (fx<? . G4eec) (fx<=? . G4eeb) (fx-/carry . G4eea) (fx- . G4ee9) (fx+/carry . G4ee8) (fx+ . G4ee7) (fx*/carry . G4ee6) (fx* . G4ee5) (greatest-fixnum . G4ee4) (least-fixnum . G4ee3) (fixnum-width . G4ee2) (fixnum? . G4ee1) (bitwise-rotate-bit-field . G4ee0) (bitwise-reverse-bit-field . G4edf) (bitwise-length . G4ede) (bitwise-if . G4edd) (bitwise-first-bit-set . G4edc) (bitwise-copy-bit-field . G4edb) (bitwise-copy-bit . G4eda) (bitwise-bit-set? . G4ed9) (bitwise-bit-field . G4ed8) (bitwise-bit-count . G4ed7) (bitwise-xor . G4ed6) (bitwise-ior . G4ed5) (bitwise-and . G4ed4) (bitwise-not . G4ed3) (bitwise-arithmetic-shift-right . G4ed2) (bitwise-arithmetic-shift-left . G4ed1) (bitwise-arithmetic-shift . G4ed0) (zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-map . G4ecb) (vector-length . G4eca) (vector-for-each . G4ec9) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol=? . G4ec1) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-for-each . G4eb6) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-valued? . G4eaa) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (rational-valued? . G4ea6) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (null? . G4e9e) (not . G4e9d) (negative? . G4e9c) (nan? . G4e9b) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer-valued? . G4e88) (integer->char . G4e87) (infinite? . G4e86) (inexact? . G4e85) (inexact . G4e84) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (finite? . G4e7f) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (exact-integer-sqrt . G4e7b) (exact . G4e7a) (even? . G4e79) (error . G4e78) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (div0-and-mod0 . G4e73) (mod0 . G4e72) (div0 . G4e71) (div-and-mod . G4e70) (mod . G4e6f) (div . G4e6e) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call/cc . G4e60) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (boolean=? . G4e3f) (atan . G4e3e) (assertion-violation . G4e3d) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (&no-nans . G4e2b) (&no-infinities . G4e2a) (&i/o-encoding . G4e29) (&i/o-decoding . G4e28) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e) (&undefined . G4e1d) (&syntax . G4e1c) (&lexical . G4e1b) (&implementation-restriction . G4e1a) (&non-continuable . G4e19) (&who . G4e18) (&irritants . G4e17) (&assertion . G4e16) (&violation . G4e15) (&error . G4e14) (&serious . G4e13) (&warning . G4e12) (&message . G4e11) (&condition . G4e10) (define-condition-type . G4e0f) (define-enumeration . G4e0e) (define-record-type . G4e0d) (parent-rtd . G4e0c) (nongenerative . G4e0b) (opaque . G4e0a) (sealed . G4e09) (protocol . G4e08) (parent . G4e07) (immutable . G4e06) (mutable . G4e05) (fields . G4e04) (error-handling-mode . G4e03) (file-options . G4e02) (buffer-mode . G4e01) (eol-style . G4e00) (guard . G4dff) (unsyntax-splicing . G4dfc) (unsyntax . G4dfb) (unquote-splicing . G4dfa) (unquote . G4df9) (_ . G4df8) (else . G4df7) (=> . G4df6) (... . G4df5) (assert . G4df4) (endianness . G4df3) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (let*-values . G4dec) (let-values . G4deb) (identifier-syntax . G4dea) (with-syntax . G4de9) (quasisyntax . G4de8) (quasiquote . G4de7) (syntax-rules . G4de6) (record-constructor-descriptor . G4de3) (record-type-descriptor . G4de2) (case . G4de1) (unless . G4ddf) (when . G4dde) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec* . G4dda) (letrec . G4dd9) (case-lambda . G4dd7) (lambda . G4dd6) (syntax . G4dd5) (syntax-case . G4dd4) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a0 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3017) (quotient . G4fb1) (null-environment . G3015) (remainder . G4fb0) (modulo . G4faf) (inexact->exact . G4fae) (force . G4fad) (exact->inexact . G4fac) (make-promise . G4fab) (delay . G4df2)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a1 '(rnrs control) '(6) '() '() '() '((do . G4df0) (unless . G4ddf) (when . G4dde) (case-lambda . G4dd7)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a2 '(rnrs eval) '(6) '() '() '() '((eval . G301b) (environment . G3013)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a3 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fa7) (set-car! . G4fa6)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a4 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fa9) (string-set! . G4fa8)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a5 '(rnrs programs) '(6) '() '() '() '((exit . G4faa) (command-line . G4cfe)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a6 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d8b) (identifier? . G303d) (generate-temporaries . G3029) (free-identifier=? . G302b) (syntax->datum . G3041) (datum->syntax . G303f) (bound-identifier=? . G302d) (syntax-violation . G303b) (unsyntax-splicing . G4dfc) (unsyntax . G4dfb) (_ . G4df8) (... . G4df5) (with-syntax . G4de9) (quasisyntax . G4de8) (syntax . G4dd5) (syntax-case . G4dd4)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a7 '(rnrs files) '(6) '() '() '() '((delete-file . G501a) (file-exists? . G5019) (make-i/o-write-error . G4afc) (make-i/o-read-error . G4ae7) (make-i/o-port-error . G4b9a) (make-i/o-invalid-position-error . G4b12) (make-i/o-filename-error . G4b2c) (make-i/o-file-protection-error . G4b45) (make-i/o-file-is-read-only-error . G4b5a) (make-i/o-file-does-not-exist-error . G4b84) (make-i/o-file-already-exists-error . G4b6f) (make-i/o-error . G4ad2) (i/o-write-error? . G4afe) (i/o-read-error? . G4ae9) (i/o-port-error? . G4b9e) (i/o-invalid-position-error? . G4b16) (i/o-filename-error? . G4b30) (i/o-file-protection-error? . G4b47) (i/o-file-is-read-only-error? . G4b5c) (i/o-file-does-not-exist-error? . G4b86) (i/o-file-already-exists-error? . G4b71) (i/o-error? . G4ad4) (i/o-error-position . G4b18) (i/o-error-port . G4ba0) (i/o-error-filename . G4b32) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a8 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5018) (vector-sort . G5017) (list-sort . G5016)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50a9 '(rnrs base) '(6) '() '() '() '((zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-map . G4ecb) (vector-length . G4eca) (vector-for-each . G4ec9) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol=? . G4ec1) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-for-each . G4eb6) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-valued? . G4eaa) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (rational-valued? . G4ea6) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (null? . G4e9e) (not . G4e9d) (negative? . G4e9c) (nan? . G4e9b) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer-valued? . G4e88) (integer->char . G4e87) (infinite? . G4e86) (inexact? . G4e85) (inexact . G4e84) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (finite? . G4e7f) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (exact-integer-sqrt . G4e7b) (exact . G4e7a) (even? . G4e79) (error . G4e78) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (div0-and-mod0 . G4e73) (mod0 . G4e72) (div0 . G4e71) (div-and-mod . G4e70) (mod . G4e6f) (div . G4e6e) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call/cc . G4e60) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (boolean=? . G4e3f) (atan . G4e3e) (assertion-violation . G4e3d) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (unquote-splicing . G4dfa) (unquote . G4df9) (_ . G4df8) (else . G4df7) (=> . G4df6) (... . G4df5) (assert . G4df4) (cond . G4def) (let* . G4dee) (let . G4ded) (let*-values . G4dec) (let-values . G4deb) (identifier-syntax . G4dea) (quasiquote . G4de7) (syntax-rules . G4de6) (case . G4de1) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec* . G4dda) (letrec . G4dd9) (lambda . G4dd6) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50aa '(rnrs lists) '(6) '() '() '() '((remove . G4fa5) (remv . G4fa4) (remp . G4fa3) (remq . G4fa2) (partition . G4fa1) (memv . G4fa0) (memq . G4f9f) (memp . G4f9e) (member . G4f9d) (exists . G4f9c) (for-all . G4f9b) (fold-right . G4f9a) (fold-left . G4f99) (find . G4f98) (filter . G4f97) (cons* . G4f96) (assv . G4f95) (assq . G4f94) (assp . G4f93) (assoc . G4f92)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50ab '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (make-i/o-write-error . G4afc) (make-i/o-read-error . G4ae7) (make-i/o-port-error . G4b9a) (make-i/o-invalid-position-error . G4b12) (make-i/o-filename-error . G4b2c) (make-i/o-file-protection-error . G4b45) (make-i/o-file-is-read-only-error . G4b5a) (make-i/o-file-does-not-exist-error . G4b84) (make-i/o-file-already-exists-error . G4b6f) (make-i/o-error . G4ad2) (i/o-write-error? . G4afe) (i/o-read-error? . G4ae9) (i/o-port-error? . G4b9e) (i/o-invalid-position-error? . G4b16) (i/o-filename-error? . G4b30) (i/o-file-protection-error? . G4b47) (i/o-file-is-read-only-error? . G4b5c) (i/o-file-does-not-exist-error? . G4b86) (i/o-file-already-exists-error? . G4b71) (i/o-error? . G4ad4) (i/o-error-position . G4b18) (i/o-error-port . G4ba0) (i/o-error-filename . G4b32) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50ac '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fc1) (utf32->string . G4f76) (utf16->string . G4f75) (utf8->string . G4f74) (uint-list->bytevector . G4f73) (u8-list->bytevector . G4f72) (string->utf8 . G4f71) (string->utf32 . G4f70) (string->utf16 . G4f6f) (sint-list->bytevector . G4f6e) (native-endianness . G4f6d) (bytevector? . G4f6c) (bytevector=? . G4f6b) (bytevector-uint-set! . G4f6a) (bytevector-uint-ref . G4f69) (bytevector-u8-set! . G4f68) (bytevector-u8-ref . G4f67) (bytevector-u64-set! . G4f66) (bytevector-u64-ref . G4f65) (bytevector-u64-native-set! . G4f64) (bytevector-u64-native-ref . G4f63) (bytevector-u32-set! . G4f62) (bytevector-u32-ref . G4f61) (bytevector-u32-native-set! . G4f60) (bytevector-u32-native-ref . G4f5f) (bytevector-u16-set! . G4f5e) (bytevector-u16-ref . G4f5d) (bytevector-u16-native-set! . G4f5c) (bytevector-u16-native-ref . G4f5b) (bytevector-sint-set! . G4f5a) (bytevector-sint-ref . G4f59) (bytevector-s8-set! . G4f58) (bytevector-s8-ref . G4f57) (bytevector-s64-set! . G4f56) (bytevector-s64-ref . G4f55) (bytevector-s64-native-set! . G4f54) (bytevector-s64-native-ref . G4f53) (bytevector-s32-set! . G4f52) (bytevector-s32-ref . G4f51) (bytevector-s32-native-set! . G4f50) (bytevector-s32-native-ref . G4f4f) (bytevector-s16-set! . G4f4e) (bytevector-s16-ref . G4f4d) (bytevector-s16-native-set! . G4f4c) (bytevector-s16-native-ref . G4f4b) (bytevector-length . G4f4a) (bytevector-ieee-single-ref . G4f49) (bytevector-ieee-single-set! . G4f48) (bytevector-ieee-single-native-set! . G4f47) (bytevector-ieee-single-native-ref . G4f46) (bytevector-ieee-double-set! . G4f45) (bytevector-ieee-double-ref . G4f44) (bytevector-ieee-double-native-set! . G4f43) (bytevector-ieee-double-native-ref . G4f42) (bytevector-fill! . G4f41) (bytevector-copy! . G4f40) (bytevector-copy . G4f3f) (bytevector->uint-list . G4f3e) (bytevector->u8-list . G4f3d) (bytevector->sint-list . G4f3c) (endianness . G4df3)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50ad '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5048) (string-titlecase . G5047) (string-normalize-nfkd . G5046) (string-normalize-nfkc . G5045) (string-normalize-nfd . G5044) (string-normalize-nfc . G5043) (string-foldcase . G5042) (string-downcase . G5041) (string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-title-case? . G5039) (char-numeric? . G5038) (char-lower-case? . G5037) (char-general-category . G5036) (char-upcase . G5035) (char-titlecase . G5034) (char-foldcase . G5033) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50ae '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f8b) (raise-continuable . G4f8a) (raise . G4f89) (guard . G4dff) (else . G4df7) (=> . G4df6)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50af '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ee0) (bitwise-reverse-bit-field . G4edf) (bitwise-length . G4ede) (bitwise-if . G4edd) (bitwise-first-bit-set . G4edc) (bitwise-copy-bit-field . G4edb) (bitwise-copy-bit . G4eda) (bitwise-bit-set? . G4ed9) (bitwise-bit-field . G4ed8) (bitwise-bit-count . G4ed7) (bitwise-xor . G4ed6) (bitwise-ior . G4ed5) (bitwise-and . G4ed4) (bitwise-not . G4ed3) (bitwise-arithmetic-shift-right . G4ed2) (bitwise-arithmetic-shift-left . G4ed1) (bitwise-arithmetic-shift . G4ed0)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b0 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f0d) (fxxor . G4f0c) (fxrotate-bit-field . G4f0b) (fxreverse-bit-field . G4f0a) (fxpositive? . G4f09) (fxodd? . G4f08) (fxnot . G4f07) (fxnegative? . G4f06) (fxmod0 . G4f05) (fxmod . G4f04) (fxmin . G4f03) (fxmax . G4f02) (fxlength . G4f01) (fxior . G4f00) (fxif . G4eff) (fxfirst-bit-set . G4efe) (fxeven? . G4efd) (fxdiv0-and-mod0 . G4efc) (fxdiv0 . G4efb) (fxdiv-and-mod . G4efa) (fxdiv . G4ef9) (fxcopy-bit-field . G4ef8) (fxcopy-bit . G4ef7) (fxbit-set? . G4ef6) (fxbit-field . G4ef5) (fxbit-count . G4ef4) (fxarithmetic-shift-right . G4ef3) (fxarithmetic-shift-left . G4ef2) (fxarithmetic-shift . G4ef1) (fxand . G4ef0) (fx>? . G4eef) (fx>=? . G4eee) (fx=? . G4eed) (fx<? . G4eec) (fx<=? . G4eeb) (fx-/carry . G4eea) (fx- . G4ee9) (fx+/carry . G4ee8) (fx+ . G4ee7) (fx*/carry . G4ee6) (fx* . G4ee5) (greatest-fixnum . G4ee4) (least-fixnum . G4ee3) (fixnum-width . G4ee2) (fixnum? . G4ee1)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b1 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4bf9) (no-infinities-violation? . G4be4) (make-no-nans-violation . G4bf7) (make-no-infinities-violation . G4be2) (real->flonum . G4f3b) (flzero? . G4f3a) (fltruncate . G4f39) (fltan . G4f38) (flsqrt . G4f37) (flsin . G4f36) (flround . G4f35) (flpositive? . G4f34) (flonum? . G4f33) (flodd? . G4f32) (flnumerator . G4f31) (flnegative? . G4f30) (flnan? . G4f2f) (flmod0 . G4f2e) (flmod . G4f2d) (flmin . G4f2c) (flmax . G4f2b) (fllog . G4f2a) (flinteger? . G4f29) (flinfinite? . G4f28) (flfloor . G4f27) (flfinite? . G4f26) (flexpt . G4f25) (flexp . G4f24) (fleven? . G4f23) (fldiv0-and-mod0 . G4f22) (fldiv0 . G4f21) (fldiv-and-mod . G4f20) (fldiv . G4f1f) (fldenominator . G4f1e) (flcos . G4f1d) (flceiling . G4f1c) (flatan . G4f1b) (flasin . G4f1a) (flacos . G4f19) (flabs . G4f18) (fl>? . G4f17) (fl>=? . G4f16) (fl=? . G4f15) (fl<? . G4f14) (fl<=? . G4f13) (fl/ . G4f12) (fl- . G4f11) (fl+ . G4f10) (fl* . G4f0f) (fixnum->flonum . G4f0e) (&no-nans . G4e2b) (&no-infinities . G4e2a)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b2 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5015) (string-ci-hash . G5014) (string-hash . G5013) (equal-hash . G5012) (hashtable-equivalence-function . G5011) (make-hashtable . G5010) (hashtable-hash-function . G500f) (make-eqv-hashtable . G500e) (make-eq-hashtable . G500d) (hashtable? . G500c) (hashtable-update! . G500b) (hashtable-size . G500a) (hashtable-set! . G5009) (hashtable-ref . G5008) (hashtable-mutable? . G5007) (hashtable-keys . G5006) (hashtable-entries . G5005) (hashtable-delete! . G5004) (hashtable-copy . G5003) (hashtable-contains? . G5002) (hashtable-clear! . G5001)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b3 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (utf-8-codec . G4fea) (utf-16-codec . G4fe9) (transcoder-error-handling-mode . G4fe8) (transcoder-eol-style . G4fe7) (transcoder-codec . G4fe6) (transcoded-port . G4fe5) (textual-port? . G4fe4) (string->bytevector . G4fe3) (standard-output-port . G4fe2) (standard-input-port . G4fe1) (standard-error-port . G4fe0) (set-port-position! . G4fdf) (put-u8 . G4fde) (put-string . G4fdd) (put-datum . G4fdc) (put-char . G4fdb) (put-bytevector . G4fda) (port? . G4fd9) (port-transcoder . G4fd8) (port-position . G4fd7) (port-has-set-port-position!? . G4fd6) (port-has-port-position? . G4fd5) (port-eof? . G4fd4) (output-port-buffer-mode . G4fd3) (open-string-output-port . G4fd2) (open-string-input-port . G4fd1) (open-file-output-port . G4fd0) (open-file-input/output-port . G4fcf) (open-file-input-port . G4fce) (open-bytevector-output-port . G4fcd) (open-bytevector-input-port . G4fcc) (native-transcoder . G4fcb) (native-eol-style . G4fca) (make-transcoder . G4fc9) (latin-1-codec . G4fc8) (make-i/o-write-error . G4afc) (make-i/o-read-error . G4ae7) (make-i/o-port-error . G4b9a) (make-i/o-invalid-position-error . G4b12) (make-i/o-filename-error . G4b2c) (make-i/o-file-protection-error . G4b45) (make-i/o-file-is-read-only-error . G4b5a) (make-i/o-file-does-not-exist-error . G4b84) (make-i/o-file-already-exists-error . G4b6f) (make-i/o-error . G4ad2) (make-i/o-encoding-error . G4bc9) (make-i/o-decoding-error . G4bb3) (make-custom-textual-output-port . G4fc7) (make-custom-textual-input/output-port . G4fc6) (make-custom-textual-input-port . G4fc5) (make-custom-binary-output-port . G4fc4) (make-custom-binary-input/output-port . G4fc3) (make-custom-binary-input-port . G4fc2) (lookahead-u8 . G4fc0) (lookahead-char . G4fbf) (i/o-write-error? . G4afe) (i/o-read-error? . G4ae9) (i/o-port-error? . G4b9e) (i/o-invalid-position-error? . G4b16) (i/o-filename-error? . G4b30) (i/o-file-protection-error? . G4b47) (i/o-file-is-read-only-error? . G4b5c) (i/o-file-does-not-exist-error? . G4b86) (i/o-file-already-exists-error? . G4b71) (i/o-error? . G4ad4) (i/o-error-position . G4b18) (i/o-error-port . G4ba0) (i/o-error-filename . G4b32) (i/o-encoding-error? . G4bcd) (i/o-encoding-error-char . G4bcf) (i/o-decoding-error? . G4bb5) (get-u8 . G4fbe) (get-string-n! . G4fbd) (get-string-n . G4fbc) (get-string-all . G4fbb) (get-line . G4fba) (get-datum . G4fb9) (get-char . G4fb8) (get-bytevector-some . G4fb7) (get-bytevector-n! . G4fb6) (get-bytevector-n . G4fb5) (get-bytevector-all . G4fb4) (flush-output-port . G4fb3) (close-port . G4fb2) (call-with-string-output-port . G4f91) (call-with-port . G4f90) (call-with-bytevector-output-port . G4f8f) (bytevector->string . G4f8e) (buffer-mode? . G4f8d) (binary-port? . G4f8c) (&i/o-encoding . G4e29) (&i/o-decoding . G4e28) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e) (error-handling-mode . G4e03) (file-options . G4e02) (buffer-mode . G4e01) (eol-style . G4e00)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b4 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f88) (enum-set=? . G4f87) (enum-set-universe . G4f86) (enum-set-union . G4f85) (enum-set-subset? . G4f84) (enum-set-projection . G4f83) (enum-set-member? . G4f82) (enum-set-intersection . G4f81) (enum-set-indexer . G4f80) (enum-set-difference . G4f7f) (enum-set-constructor . G4f7e) (enum-set-complement . G4f7d) (enum-set->list . G4f7c) (define-enumeration . G4e0e)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b5 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a4a) (warning? . G49c4) (violation? . G4a03) (undefined-violation? . G4abf) (syntax-violation? . G4aa6) (syntax-violation-subform . G4aaa) (syntax-violation-form . G4aa8) (syntax-violation . G303b) (simple-conditions . G4f7b) (serious-condition? . G49d9) (non-continuable-violation? . G4a61) (message-condition? . G49ad) (make-who-condition . G4a46) (make-warning . G49c2) (make-violation . G4a01) (make-undefined-violation . G4abd) (make-syntax-violation . G4aa0) (make-serious-condition . G49d7) (make-non-continuable-violation . G4a5f) (make-message-condition . G49a9) (make-lexical-violation . G4a89) (make-irritants-condition . G4a2c) (make-implementation-restriction-violation . G4a74) (make-error . G49ec) (make-assertion-violation . G4a16) (lexical-violation? . G4a8b) (irritants-condition? . G4a30) (implementation-restriction-violation? . G4a76) (error? . G49ee) (condition-who . G4a4c) (condition-predicate . G4f7a) (condition-message . G49af) (condition-irritants . G4a32) (condition-accessor . G4f79) (condition . G4f78) (assertion-violation? . G4a18) (condition? . G4f77) (&undefined . G4e1d) (&syntax . G4e1c) (&lexical . G4e1b) (&implementation-restriction . G4e1a) (&non-continuable . G4e19) (&who . G4e18) (&irritants . G4e17) (&assertion . G4e16) (&violation . G4e15) (&error . G4e14) (&serious . G4e13) (&warning . G4e12) (&message . G4e11) (&condition . G4e10) (define-condition-type . G4e0f)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b6 '(rnrs records inspection) '(6) '() '() '() '((record? . G5024) (record-type-uid . G5023) (record-type-sealed? . G5022) (record-type-parent . G5021) (record-type-opaque? . G5020) (record-type-name . G501f) (record-type-generative? . G501e) (record-type-field-names . G501d) (record-rtd . G501c) (record-field-mutable? . G501b)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b7 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G502b) (record-predicate . G502a) (record-mutator . G5029) (record-constructor . G5028) (record-accessor . G5027) (make-record-type-descriptor . G5026) (make-record-constructor-descriptor . G5025)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b8 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e0d) (parent-rtd . G4e0c) (nongenerative . G4e0b) (opaque . G4e0a) (sealed . G4e09) (protocol . G4e08) (parent . G4e07) (immutable . G4e06) (mutable . G4e05) (fields . G4e04) (record-constructor-descriptor . G4de3) (record-type-descriptor . G4de2)) '() values values '#f '#f '#t '#f) (G2b67@G2a0c@install-library 'G50b9 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4bfd) (&no-nans-rtd . G4bfb) (&no-infinities-rcd . G4be8) (&no-infinities-rtd . G4be6) (&i/o-encoding-rcd . G4bd3) (&i/o-encoding-rtd . G4bd1) (&i/o-decoding-rcd . G4bb9) (&i/o-decoding-rtd . G4bb7) (&i/o-port-rcd . G4ba4) (&i/o-port-rtd . G4ba2) (&i/o-file-does-not-exist-rcd . G4b8a) (&i/o-file-does-not-exist-rtd . G4b88) (&i/o-file-already-exists-rcd . G4b75) (&i/o-file-already-exists-rtd . G4b73) (&i/o-file-is-read-only-rcd . G4b60) (&i/o-file-is-read-only-rtd . G4b5e) (&i/o-file-protection-rcd . G4b4b) (&i/o-file-protection-rtd . G4b49) (&i/o-filename-rcd . G4b36) (&i/o-filename-rtd . G4b34) (&i/o-invalid-position-rcd . G4b1c) (&i/o-invalid-position-rtd . G4b1a) (&i/o-write-rcd . G4b02) (&i/o-write-rtd . G4b00) (&i/o-read-rcd . G4aed) (&i/o-read-rtd . G4aeb) (&i/o-rcd . G4ad8) (&i/o-rtd . G4ad6) (&undefined-rcd . G4ac3) (&undefined-rtd . G4ac1) (&syntax-rcd . G4aae) (&syntax-rtd . G4aac) (&lexical-rcd . G4a8f) (&lexical-rtd . G4a8d) (&implementation-restriction-rcd . G4a7a) (&implementation-restriction-rtd . G4a78) (&non-continuable-rcd . G4a65) (&non-continuable-rtd . G4a63) (&who-rcd . G4a50) (&who-rtd . G4a4e) (&irritants-rcd . G4a36) (&irritants-rtd . G4a34) (&assertion-rcd . G4a1c) (&assertion-rtd . G4a1a) (&violation-rcd . G4a07) (&violation-rtd . G4a05) (&error-rcd . G49f2) (&error-rtd . G49f0) (&serious-rcd . G49dd) (&serious-rtd . G49db) (&warning-rcd . G49c8) (&warning-rtd . G49c6) (&message-rcd . G49b3) (&message-rtd . G49b1) (&condition-rcd . G4956) (&condition-rtd . G4954) (syntax-error . G3037) (syntax-dispatch . G2f50) (pretty-print . G5099) (eval-core . G5098) (set-symbol-value! . G5097) (symbol-value . G5096) (gensym . G5095) (void . G5094) (load . G4d04) (interaction-environment . G3047) (char-ready? . G5093) (regexp? . G5092) (read-line . G5091) (dotted-list? . G5090) (circular-list? . G508f) (proper-list? . G508e) (circular-list . G508d) (last . G508c) (last-pair . G508b) (not-pair? . G508a) (split-at! . G5089) (split-at . G5088) (list= . G5087) (list-copy . G5086) (list-tabulate . G5085) (make-list . G5084) (xcons . G5083) (tenth . G5082) (ninth . G5081) (eighth . G5080) (seventh . G507f) (sixth . G507e) (fifth . G507d) (drop-right! . G507c) (drop-right . G507b) (take-right . G507a) (take! . G5079) (drop . G5078) (take . G5077) (car+cdr . G5076) (third . G5075) (second . G5074) (first . G5073) (iota . G5072) (every . G5071) (ungensym . G5070) (assoc-ref . G506f) (alist-cons . G506e) (append-map . G506d) (print . G506c) (format . G506b) (standard-library-path . G506a) (file-newer? . G5069) (stat-mtime . G5068) (current-directory . G5067) (write-to-file . G5066) (file->list . G5065) (file->string . G5064) (digit->integer . G5063) (call-with-string-input-port . G5062) (call-with-string-io . G5061) (string-split . G5060) (bytevector-for-each . G505f) (string->regexp . G505e) (rxmatch . G505d) (regexp-replace-all . G505c) (hashtable-for-each . G505b) (local-tz-offset . G505a) (microseconds . G5059) (readdir . G5058) (get-environment-variables . G5057) (get-environment-variable . G5056) (get-timeofday . G5055) (get-command-line . G5054) (sys-display . G5053) (source-info . G5052) (make-compiler-instruction . G5051) (make-instruction . G5050) (set-source-info! . G504f) (bignum? . G504e) (make-complex . G504d) (fast-equal? . G504c) (fasl-read . G504b) (fasl-write . G504a) (receive . G5049) (make-parameter . G2823) (string-upcase . G5048) (string-titlecase . G5047) (string-normalize-nfkd . G5046) (string-normalize-nfkc . G5045) (string-normalize-nfd . G5044) (string-normalize-nfc . G5043) (string-foldcase . G5042) (string-downcase . G5041) (string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-title-case? . G5039) (char-numeric? . G5038) (char-lower-case? . G5037) (char-general-category . G5036) (char-upcase . G5035) (char-titlecase . G5034) (char-foldcase . G5033) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c) (make-variable-transformer . G2d8b) (identifier? . G303d) (generate-temporaries . G3029) (free-identifier=? . G302b) (syntax->datum . G3041) (datum->syntax . G303f) (bound-identifier=? . G302d) (record-type-descriptor? . G502b) (record-predicate . G502a) (record-mutator . G5029) (record-constructor . G5028) (record-accessor . G5027) (make-record-type-descriptor . G5026) (make-record-constructor-descriptor . G5025) (record? . G5024) (record-type-uid . G5023) (record-type-sealed? . G5022) (record-type-parent . G5021) (record-type-opaque? . G5020) (record-type-name . G501f) (record-type-generative? . G501e) (record-type-field-names . G501d) (record-rtd . G501c) (record-field-mutable? . G501b) (delete-file . G501a) (file-exists? . G5019) (vector-sort! . G5018) (vector-sort . G5017) (list-sort . G5016) (symbol-hash . G5015) (string-ci-hash . G5014) (string-hash . G5013) (equal-hash . G5012) (hashtable-equivalence-function . G5011) (make-hashtable . G5010) (hashtable-hash-function . G500f) (make-eqv-hashtable . G500e) (make-eq-hashtable . G500d) (hashtable? . G500c) (hashtable-update! . G500b) (hashtable-size . G500a) (hashtable-set! . G5009) (hashtable-ref . G5008) (hashtable-mutable? . G5007) (hashtable-keys . G5006) (hashtable-entries . G5005) (hashtable-delete! . G5004) (hashtable-copy . G5003) (hashtable-contains? . G5002) (hashtable-clear! . G5001) (call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (utf-8-codec . G4fea) (utf-16-codec . G4fe9) (transcoder-error-handling-mode . G4fe8) (transcoder-eol-style . G4fe7) (transcoder-codec . G4fe6) (transcoded-port . G4fe5) (textual-port? . G4fe4) (string->bytevector . G4fe3) (standard-output-port . G4fe2) (standard-input-port . G4fe1) (standard-error-port . G4fe0) (set-port-position! . G4fdf) (put-u8 . G4fde) (put-string . G4fdd) (put-datum . G4fdc) (put-char . G4fdb) (put-bytevector . G4fda) (port? . G4fd9) (port-transcoder . G4fd8) (port-position . G4fd7) (port-has-set-port-position!? . G4fd6) (port-has-port-position? . G4fd5) (port-eof? . G4fd4) (output-port-buffer-mode . G4fd3) (open-string-output-port . G4fd2) (open-string-input-port . G4fd1) (open-file-output-port . G4fd0) (open-file-input/output-port . G4fcf) (open-file-input-port . G4fce) (open-bytevector-output-port . G4fcd) (open-bytevector-input-port . G4fcc) (native-transcoder . G4fcb) (native-eol-style . G4fca) (make-transcoder . G4fc9) (latin-1-codec . G4fc8) (make-i/o-write-error . G4afc) (make-i/o-read-error . G4ae7) (make-i/o-port-error . G4b9a) (make-i/o-invalid-position-error . G4b12) (make-i/o-filename-error . G4b2c) (make-i/o-file-protection-error . G4b45) (make-i/o-file-is-read-only-error . G4b5a) (make-i/o-file-does-not-exist-error . G4b84) (make-i/o-file-already-exists-error . G4b6f) (make-i/o-error . G4ad2) (make-i/o-encoding-error . G4bc9) (make-i/o-decoding-error . G4bb3) (make-custom-textual-output-port . G4fc7) (make-custom-textual-input/output-port . G4fc6) (make-custom-textual-input-port . G4fc5) (make-custom-binary-output-port . G4fc4) (make-custom-binary-input/output-port . G4fc3) (make-custom-binary-input-port . G4fc2) (make-bytevector . G4fc1) (lookahead-u8 . G4fc0) (lookahead-char . G4fbf) (i/o-write-error? . G4afe) (i/o-read-error? . G4ae9) (i/o-port-error? . G4b9e) (i/o-invalid-position-error? . G4b16) (i/o-filename-error? . G4b30) (i/o-file-protection-error? . G4b47) (i/o-file-is-read-only-error? . G4b5c) (i/o-file-does-not-exist-error? . G4b86) (i/o-file-already-exists-error? . G4b71) (i/o-error? . G4ad4) (i/o-error-position . G4b18) (i/o-error-port . G4ba0) (i/o-error-filename . G4b32) (i/o-encoding-error? . G4bcd) (i/o-encoding-error-char . G4bcf) (i/o-decoding-error? . G4bb5) (get-u8 . G4fbe) (get-string-n! . G4fbd) (get-string-n . G4fbc) (get-string-all . G4fbb) (get-line . G4fba) (get-datum . G4fb9) (get-char . G4fb8) (get-bytevector-some . G4fb7) (get-bytevector-n! . G4fb6) (get-bytevector-n . G4fb5) (get-bytevector-all . G4fb4) (flush-output-port . G4fb3) (close-port . G4fb2) (scheme-report-environment . G3017) (quotient . G4fb1) (null-environment . G3015) (remainder . G4fb0) (modulo . G4faf) (inexact->exact . G4fae) (force . G4fad) (exact->inexact . G4fac) (make-promise . G4fab) (exit . G4faa) (command-line . G4cfe) (string-fill! . G4fa9) (string-set! . G4fa8) (set-cdr! . G4fa7) (set-car! . G4fa6) (remove . G4fa5) (remv . G4fa4) (remp . G4fa3) (remq . G4fa2) (partition . G4fa1) (memv . G4fa0) (memq . G4f9f) (memp . G4f9e) (member . G4f9d) (exists . G4f9c) (for-all . G4f9b) (fold-right . G4f9a) (fold-left . G4f99) (find . G4f98) (filter . G4f97) (cons* . G4f96) (assv . G4f95) (assq . G4f94) (assp . G4f93) (assoc . G4f92) (call-with-string-output-port . G4f91) (call-with-port . G4f90) (call-with-bytevector-output-port . G4f8f) (bytevector->string . G4f8e) (buffer-mode? . G4f8d) (binary-port? . G4f8c) (with-exception-handler . G4f8b) (raise-continuable . G4f8a) (raise . G4f89) (eval . G301b) (environment . G3013) (make-enumeration . G4f88) (enum-set=? . G4f87) (enum-set-universe . G4f86) (enum-set-union . G4f85) (enum-set-subset? . G4f84) (enum-set-projection . G4f83) (enum-set-member? . G4f82) (enum-set-intersection . G4f81) (enum-set-indexer . G4f80) (enum-set-difference . G4f7f) (enum-set-constructor . G4f7e) (enum-set-complement . G4f7d) (enum-set->list . G4f7c) (who-condition? . G4a4a) (warning? . G49c4) (violation? . G4a03) (undefined-violation? . G4abf) (syntax-violation? . G4aa6) (syntax-violation-subform . G4aaa) (syntax-violation-form . G4aa8) (syntax-violation . G303b) (simple-conditions . G4f7b) (serious-condition? . G49d9) (non-continuable-violation? . G4a61) (message-condition? . G49ad) (make-who-condition . G4a46) (make-warning . G49c2) (make-violation . G4a01) (make-undefined-violation . G4abd) (make-syntax-violation . G4aa0) (make-serious-condition . G49d7) (make-non-continuable-violation . G4a5f) (make-message-condition . G49a9) (make-lexical-violation . G4a89) (make-irritants-condition . G4a2c) (make-implementation-restriction-violation . G4a74) (make-error . G49ec) (make-assertion-violation . G4a16) (lexical-violation? . G4a8b) (irritants-condition? . G4a30) (implementation-restriction-violation? . G4a76) (error? . G49ee) (condition-who . G4a4c) (condition-predicate . G4f7a) (condition-message . G49af) (condition-irritants . G4a32) (condition-accessor . G4f79) (condition . G4f78) (assertion-violation? . G4a18) (condition? . G4f77) (utf32->string . G4f76) (utf16->string . G4f75) (utf8->string . G4f74) (uint-list->bytevector . G4f73) (u8-list->bytevector . G4f72) (string->utf8 . G4f71) (string->utf32 . G4f70) (string->utf16 . G4f6f) (sint-list->bytevector . G4f6e) (native-endianness . G4f6d) (bytevector? . G4f6c) (bytevector=? . G4f6b) (bytevector-uint-set! . G4f6a) (bytevector-uint-ref . G4f69) (bytevector-u8-set! . G4f68) (bytevector-u8-ref . G4f67) (bytevector-u64-set! . G4f66) (bytevector-u64-ref . G4f65) (bytevector-u64-native-set! . G4f64) (bytevector-u64-native-ref . G4f63) (bytevector-u32-set! . G4f62) (bytevector-u32-ref . G4f61) (bytevector-u32-native-set! . G4f60) (bytevector-u32-native-ref . G4f5f) (bytevector-u16-set! . G4f5e) (bytevector-u16-ref . G4f5d) (bytevector-u16-native-set! . G4f5c) (bytevector-u16-native-ref . G4f5b) (bytevector-sint-set! . G4f5a) (bytevector-sint-ref . G4f59) (bytevector-s8-set! . G4f58) (bytevector-s8-ref . G4f57) (bytevector-s64-set! . G4f56) (bytevector-s64-ref . G4f55) (bytevector-s64-native-set! . G4f54) (bytevector-s64-native-ref . G4f53) (bytevector-s32-set! . G4f52) (bytevector-s32-ref . G4f51) (bytevector-s32-native-set! . G4f50) (bytevector-s32-native-ref . G4f4f) (bytevector-s16-set! . G4f4e) (bytevector-s16-ref . G4f4d) (bytevector-s16-native-set! . G4f4c) (bytevector-s16-native-ref . G4f4b) (bytevector-length . G4f4a) (bytevector-ieee-single-ref . G4f49) (bytevector-ieee-single-set! . G4f48) (bytevector-ieee-single-native-set! . G4f47) (bytevector-ieee-single-native-ref . G4f46) (bytevector-ieee-double-set! . G4f45) (bytevector-ieee-double-ref . G4f44) (bytevector-ieee-double-native-set! . G4f43) (bytevector-ieee-double-native-ref . G4f42) (bytevector-fill! . G4f41) (bytevector-copy! . G4f40) (bytevector-copy . G4f3f) (bytevector->uint-list . G4f3e) (bytevector->u8-list . G4f3d) (bytevector->sint-list . G4f3c) (no-nans-violation? . G4bf9) (no-infinities-violation? . G4be4) (make-no-nans-violation . G4bf7) (make-no-infinities-violation . G4be2) (real->flonum . G4f3b) (flzero? . G4f3a) (fltruncate . G4f39) (fltan . G4f38) (flsqrt . G4f37) (flsin . G4f36) (flround . G4f35) (flpositive? . G4f34) (flonum? . G4f33) (flodd? . G4f32) (flnumerator . G4f31) (flnegative? . G4f30) (flnan? . G4f2f) (flmod0 . G4f2e) (flmod . G4f2d) (flmin . G4f2c) (flmax . G4f2b) (fllog . G4f2a) (flinteger? . G4f29) (flinfinite? . G4f28) (flfloor . G4f27) (flfinite? . G4f26) (flexpt . G4f25) (flexp . G4f24) (fleven? . G4f23) (fldiv0-and-mod0 . G4f22) (fldiv0 . G4f21) (fldiv-and-mod . G4f20) (fldiv . G4f1f) (fldenominator . G4f1e) (flcos . G4f1d) (flceiling . G4f1c) (flatan . G4f1b) (flasin . G4f1a) (flacos . G4f19) (flabs . G4f18) (fl>? . G4f17) (fl>=? . G4f16) (fl=? . G4f15) (fl<? . G4f14) (fl<=? . G4f13) (fl/ . G4f12) (fl- . G4f11) (fl+ . G4f10) (fl* . G4f0f) (fixnum->flonum . G4f0e) (fxzero? . G4f0d) (fxxor . G4f0c) (fxrotate-bit-field . G4f0b) (fxreverse-bit-field . G4f0a) (fxpositive? . G4f09) (fxodd? . G4f08) (fxnot . G4f07) (fxnegative? . G4f06) (fxmod0 . G4f05) (fxmod . G4f04) (fxmin . G4f03) (fxmax . G4f02) (fxlength . G4f01) (fxior . G4f00) (fxif . G4eff) (fxfirst-bit-set . G4efe) (fxeven? . G4efd) (fxdiv0-and-mod0 . G4efc) (fxdiv0 . G4efb) (fxdiv-and-mod . G4efa) (fxdiv . G4ef9) (fxcopy-bit-field . G4ef8) (fxcopy-bit . G4ef7) (fxbit-set? . G4ef6) (fxbit-field . G4ef5) (fxbit-count . G4ef4) (fxarithmetic-shift-right . G4ef3) (fxarithmetic-shift-left . G4ef2) (fxarithmetic-shift . G4ef1) (fxand . G4ef0) (fx>? . G4eef) (fx>=? . G4eee) (fx=? . G4eed) (fx<? . G4eec) (fx<=? . G4eeb) (fx-/carry . G4eea) (fx- . G4ee9) (fx+/carry . G4ee8) (fx+ . G4ee7) (fx*/carry . G4ee6) (fx* . G4ee5) (greatest-fixnum . G4ee4) (least-fixnum . G4ee3) (fixnum-width . G4ee2) (fixnum? . G4ee1) (bitwise-rotate-bit-field . G4ee0) (bitwise-reverse-bit-field . G4edf) (bitwise-length . G4ede) (bitwise-if . G4edd) (bitwise-first-bit-set . G4edc) (bitwise-copy-bit-field . G4edb) (bitwise-copy-bit . G4eda) (bitwise-bit-set? . G4ed9) (bitwise-bit-field . G4ed8) (bitwise-bit-count . G4ed7) (bitwise-xor . G4ed6) (bitwise-ior . G4ed5) (bitwise-and . G4ed4) (bitwise-not . G4ed3) (bitwise-arithmetic-shift-right . G4ed2) (bitwise-arithmetic-shift-left . G4ed1) (bitwise-arithmetic-shift . G4ed0) (zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-map . G4ecb) (vector-length . G4eca) (vector-for-each . G4ec9) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol=? . G4ec1) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-for-each . G4eb6) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-valued? . G4eaa) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (rational-valued? . G4ea6) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (null? . G4e9e) (not . G4e9d) (negative? . G4e9c) (nan? . G4e9b) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer-valued? . G4e88) (integer->char . G4e87) (infinite? . G4e86) (inexact? . G4e85) (inexact . G4e84) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (finite? . G4e7f) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (exact-integer-sqrt . G4e7b) (exact . G4e7a) (even? . G4e79) (error . G4e78) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (div0-and-mod0 . G4e73) (mod0 . G4e72) (div0 . G4e71) (div-and-mod . G4e70) (mod . G4e6f) (div . G4e6e) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call/cc . G4e60) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (boolean=? . G4e3f) (atan . G4e3e) (assertion-violation . G4e3d) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (library . G4e2d) (export . G4e2c) (&no-nans . G4e2b) (&no-infinities . G4e2a) (&i/o-encoding . G4e29) (&i/o-decoding . G4e28) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e) (&undefined . G4e1d) (&syntax . G4e1c) (&lexical . G4e1b) (&implementation-restriction . G4e1a) (&non-continuable . G4e19) (&who . G4e18) (&irritants . G4e17) (&assertion . G4e16) (&violation . G4e15) (&error . G4e14) (&serious . G4e13) (&warning . G4e12) (&message . G4e11) (&condition . G4e10) (define-condition-type . G4e0f) (define-enumeration . G4e0e) (define-record-type . G4e0d) (parent-rtd . G4e0c) (nongenerative . G4e0b) (opaque . G4e0a) (sealed . G4e09) (protocol . G4e08) (parent . G4e07) (immutable . G4e06) (mutable . G4e05) (fields . G4e04) (error-handling-mode . G4e03) (file-options . G4e02) (buffer-mode . G4e01) (eol-style . G4e00) (guard . G4dff) (trace-define . G4dfe) (trace-lambda . G4dfd) (unsyntax-splicing . G4dfc) (unsyntax . G4dfb) (unquote-splicing . G4dfa) (unquote . G4df9) (_ . G4df8) (else . G4df7) (=> . G4df6) (... . G4df5) (assert . G4df4) (endianness . G4df3) (delay . G4df2) (time . G4df1) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (let*-values . G4dec) (let-values . G4deb) (identifier-syntax . G4dea) (with-syntax . G4de9) (quasisyntax . G4de8) (quasiquote . G4de7) (syntax-rules . G4de6) (include . G4de5) (define-struct . G4de4) (record-constructor-descriptor . G4de3) (record-type-descriptor . G4de2) (case . G4de1) (parameterize . G4de0) (unless . G4ddf) (when . G4dde) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec* . G4dda) (letrec . G4dd9) (type-descriptor . G4dd8) (case-lambda . G4dd7) (lambda . G4dd6) (syntax . G4dd5) (syntax-case . G4dd4) (quote . G4dd3) (foreign-call . G4dd2) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (import . G4dce) (begin . G4dcd) (module . G4dcc) (define-syntax . G4dcb) (define . G4dca)) '((G4bfd core-prim . &no-nans-rcd) (G4bfb core-prim . &no-nans-rtd) (G4be8 core-prim . &no-infinities-rcd) (G4be6 core-prim . &no-infinities-rtd) (G4bd3 core-prim . &i/o-encoding-rcd) (G4bd1 core-prim . &i/o-encoding-rtd) (G4bb9 core-prim . &i/o-decoding-rcd) (G4bb7 core-prim . &i/o-decoding-rtd) (G4ba4 core-prim . &i/o-port-rcd) (G4ba2 core-prim . &i/o-port-rtd) (G4b8a core-prim . &i/o-file-does-not-exist-rcd) (G4b88 core-prim . &i/o-file-does-not-exist-rtd) (G4b75 core-prim . &i/o-file-already-exists-rcd) (G4b73 core-prim . &i/o-file-already-exists-rtd) (G4b60 core-prim . &i/o-file-is-read-only-rcd) (G4b5e core-prim . &i/o-file-is-read-only-rtd) (G4b4b core-prim . &i/o-file-protection-rcd) (G4b49 core-prim . &i/o-file-protection-rtd) (G4b36 core-prim . &i/o-filename-rcd) (G4b34 core-prim . &i/o-filename-rtd) (G4b1c core-prim . &i/o-invalid-position-rcd) (G4b1a core-prim . &i/o-invalid-position-rtd) (G4b02 core-prim . &i/o-write-rcd) (G4b00 core-prim . &i/o-write-rtd) (G4aed core-prim . &i/o-read-rcd) (G4aeb core-prim . &i/o-read-rtd) (G4ad8 core-prim . &i/o-rcd) (G4ad6 core-prim . &i/o-rtd) (G4ac3 core-prim . &undefined-rcd) (G4ac1 core-prim . &undefined-rtd) (G4aae core-prim . &syntax-rcd) (G4aac core-prim . &syntax-rtd) (G4a8f core-prim . &lexical-rcd) (G4a8d core-prim . &lexical-rtd) (G4a7a core-prim . &implementation-restriction-rcd) (G4a78 core-prim . &implementation-restriction-rtd) (G4a65 core-prim . &non-continuable-rcd) (G4a63 core-prim . &non-continuable-rtd) (G4a50 core-prim . &who-rcd) (G4a4e core-prim . &who-rtd) (G4a36 core-prim . &irritants-rcd) (G4a34 core-prim . &irritants-rtd) (G4a1c core-prim . &assertion-rcd) (G4a1a core-prim . &assertion-rtd) (G4a07 core-prim . &violation-rcd) (G4a05 core-prim . &violation-rtd) (G49f2 core-prim . &error-rcd) (G49f0 core-prim . &error-rtd) (G49dd core-prim . &serious-rcd) (G49db core-prim . &serious-rtd) (G49c8 core-prim . &warning-rcd) (G49c6 core-prim . &warning-rtd) (G49b3 core-prim . &message-rcd) (G49b1 core-prim . &message-rtd) (G4956 core-prim . &condition-rcd) (G4954 core-prim . &condition-rtd) (G3037 core-prim . syntax-error) (G2f50 core-prim . syntax-dispatch) (G5099 core-prim . pretty-print) (G5098 core-prim . eval-core) (G5097 core-prim . set-symbol-value!) (G5096 core-prim . symbol-value) (G5095 core-prim . gensym) (G5094 core-prim . void) (G4d04 core-prim . load) (G3047 core-prim . interaction-environment) (G5093 core-prim . char-ready?) (G5092 core-prim . regexp?) (G5091 core-prim . read-line) (G5090 core-prim . dotted-list?) (G508f core-prim . circular-list?) (G508e core-prim . proper-list?) (G508d core-prim . circular-list) (G508c core-prim . last) (G508b core-prim . last-pair) (G508a core-prim . not-pair?) (G5089 core-prim . split-at!) (G5088 core-prim . split-at) (G5087 core-prim . list=) (G5086 core-prim . list-copy) (G5085 core-prim . list-tabulate) (G5084 core-prim . make-list) (G5083 core-prim . xcons) (G5082 core-prim . tenth) (G5081 core-prim . ninth) (G5080 core-prim . eighth) (G507f core-prim . seventh) (G507e core-prim . sixth) (G507d core-prim . fifth) (G507c core-prim . drop-right!) (G507b core-prim . drop-right) (G507a core-prim . take-right) (G5079 core-prim . take!) (G5078 core-prim . drop) (G5077 core-prim . take) (G5076 core-prim . car+cdr) (G5075 core-prim . third) (G5074 core-prim . second) (G5073 core-prim . first) (G5072 core-prim . iota) (G5071 core-prim . every) (G5070 core-prim . ungensym) (G506f core-prim . assoc-ref) (G506e core-prim . alist-cons) (G506d core-prim . append-map) (G506c core-prim . print) (G506b core-prim . format) (G506a core-prim . standard-library-path) (G5069 core-prim . file-newer?) (G5068 core-prim . stat-mtime) (G5067 core-prim . current-directory) (G5066 core-prim . write-to-file) (G5065 core-prim . file->list) (G5064 core-prim . file->string) (G5063 core-prim . digit->integer) (G5062 core-prim . call-with-string-input-port) (G5061 core-prim . call-with-string-io) (G5060 core-prim . string-split) (G505f core-prim . bytevector-for-each) (G505e core-prim . string->regexp) (G505d core-prim . rxmatch) (G505c core-prim . regexp-replace-all) (G505b core-prim . hashtable-for-each) (G505a core-prim . local-tz-offset) (G5059 core-prim . microseconds) (G5058 core-prim . readdir) (G5057 core-prim . get-environment-variables) (G5056 core-prim . get-environment-variable) (G5055 core-prim . get-timeofday) (G5054 core-prim . get-command-line) (G5053 core-prim . sys-display) (G5052 core-prim . source-info) (G5051 core-prim . make-compiler-instruction) (G5050 core-prim . make-instruction) (G504f core-prim . set-source-info!) (G504e core-prim . bignum?) (G504d core-prim . make-complex) (G504c core-prim . fast-equal?) (G504b core-prim . fasl-read) (G504a core-prim . fasl-write) (G5049 core-prim . receive) (G2823 core-prim . make-parameter) (G5048 core-prim . string-upcase) (G5047 core-prim . string-titlecase) (G5046 core-prim . string-normalize-nfkd) (G5045 core-prim . string-normalize-nfkc) (G5044 core-prim . string-normalize-nfd) (G5043 core-prim . string-normalize-nfc) (G5042 core-prim . string-foldcase) (G5041 core-prim . string-downcase) (G5040 core-prim . string-ci>?) (G503f core-prim . string-ci>=?) (G503e core-prim . string-ci=?) (G503d core-prim . string-ci<?) (G503c core-prim . string-ci<=?) (G503b core-prim . char-whitespace?) (G503a core-prim . char-upper-case?) (G5039 core-prim . char-title-case?) (G5038 core-prim . char-numeric?) (G5037 core-prim . char-lower-case?) (G5036 core-prim . char-general-category) (G5035 core-prim . char-upcase) (G5034 core-prim . char-titlecase) (G5033 core-prim . char-foldcase) (G5032 core-prim . char-downcase) (G5031 core-prim . char-ci>?) (G5030 core-prim . char-ci>=?) (G502f core-prim . char-ci=?) (G502e core-prim . char-ci<?) (G502d core-prim . char-ci<=?) (G502c core-prim . char-alphabetic?) (G2d8b core-prim . make-variable-transformer) (G303d core-prim . identifier?) (G3029 core-prim . generate-temporaries) (G302b core-prim . free-identifier=?) (G3041 core-prim . syntax->datum) (G303f core-prim . datum->syntax) (G302d core-prim . bound-identifier=?) (G502b core-prim . record-type-descriptor?) (G502a core-prim . record-predicate) (G5029 core-prim . record-mutator) (G5028 core-prim . record-constructor) (G5027 core-prim . record-accessor) (G5026 core-prim . make-record-type-descriptor) (G5025 core-prim . make-record-constructor-descriptor) (G5024 core-prim . record?) (G5023 core-prim . record-type-uid) (G5022 core-prim . record-type-sealed?) (G5021 core-prim . record-type-parent) (G5020 core-prim . record-type-opaque?) (G501f core-prim . record-type-name) (G501e core-prim . record-type-generative?) (G501d core-prim . record-type-field-names) (G501c core-prim . record-rtd) (G501b core-prim . record-field-mutable?) (G501a core-prim . delete-file) (G5019 core-prim . file-exists?) (G5018 core-prim . vector-sort!) (G5017 core-prim . vector-sort) (G5016 core-prim . list-sort) (G5015 core-prim . symbol-hash) (G5014 core-prim . string-ci-hash) (G5013 core-prim . string-hash) (G5012 core-prim . equal-hash) (G5011 core-prim . hashtable-equivalence-function) (G5010 core-prim . make-hashtable) (G500f core-prim . hashtable-hash-function) (G500e core-prim . make-eqv-hashtable) (G500d core-prim . make-eq-hashtable) (G500c core-prim . hashtable?) (G500b core-prim . hashtable-update!) (G500a core-prim . hashtable-size) (G5009 core-prim . hashtable-set!) (G5008 core-prim . hashtable-ref) (G5007 core-prim . hashtable-mutable?) (G5006 core-prim . hashtable-keys) (G5005 core-prim . hashtable-entries) (G5004 core-prim . hashtable-delete!) (G5003 core-prim . hashtable-copy) (G5002 core-prim . hashtable-contains?) (G5001 core-prim . hashtable-clear!) (G5000 core-prim . call-with-output-file) (G4fff core-prim . call-with-input-file) (G4ffe core-prim . write-char) (G4ffd core-prim . write) (G4ffc core-prim . with-output-to-file) (G4ffb core-prim . with-input-from-file) (G4ffa core-prim . read-char) (G4ff9 core-prim . read) (G4ff8 core-prim . peek-char) (G4ff7 core-prim . open-output-file) (G4ff6 core-prim . open-input-file) (G4ff5 core-prim . newline) (G4ff4 core-prim . display) (G4ff3 core-prim . close-output-port) (G4ff2 core-prim . close-input-port) (G4ff1 core-prim . eof-object?) (G4ff0 core-prim . eof-object) (G4fef core-prim . current-error-port) (G4fee core-prim . current-output-port) (G4fed core-prim . current-input-port) (G4fec core-prim . output-port?) (G4feb core-prim . input-port?) (G4fea core-prim . utf-8-codec) (G4fe9 core-prim . utf-16-codec) (G4fe8 core-prim . transcoder-error-handling-mode) (G4fe7 core-prim . transcoder-eol-style) (G4fe6 core-prim . transcoder-codec) (G4fe5 core-prim . transcoded-port) (G4fe4 core-prim . textual-port?) (G4fe3 core-prim . string->bytevector) (G4fe2 core-prim . standard-output-port) (G4fe1 core-prim . standard-input-port) (G4fe0 core-prim . standard-error-port) (G4fdf core-prim . set-port-position!) (G4fde core-prim . put-u8) (G4fdd core-prim . put-string) (G4fdc core-prim . put-datum) (G4fdb core-prim . put-char) (G4fda core-prim . put-bytevector) (G4fd9 core-prim . port?) (G4fd8 core-prim . port-transcoder) (G4fd7 core-prim . port-position) (G4fd6 core-prim . port-has-set-port-position!?) (G4fd5 core-prim . port-has-port-position?) (G4fd4 core-prim . port-eof?) (G4fd3 core-prim . output-port-buffer-mode) (G4fd2 core-prim . open-string-output-port) (G4fd1 core-prim . open-string-input-port) (G4fd0 core-prim . open-file-output-port) (G4fcf core-prim . open-file-input/output-port) (G4fce core-prim . open-file-input-port) (G4fcd core-prim . open-bytevector-output-port) (G4fcc core-prim . open-bytevector-input-port) (G4fcb core-prim . native-transcoder) (G4fca core-prim . native-eol-style) (G4fc9 core-prim . make-transcoder) (G4fc8 core-prim . latin-1-codec) (G4afc core-prim . make-i/o-write-error) (G4ae7 core-prim . make-i/o-read-error) (G4b9a core-prim . make-i/o-port-error) (G4b12 core-prim . make-i/o-invalid-position-error) (G4b2c core-prim . make-i/o-filename-error) (G4b45 core-prim . make-i/o-file-protection-error) (G4b5a core-prim . make-i/o-file-is-read-only-error) (G4b84 core-prim . make-i/o-file-does-not-exist-error) (G4b6f core-prim . make-i/o-file-already-exists-error) (G4ad2 core-prim . make-i/o-error) (G4bc9 core-prim . make-i/o-encoding-error) (G4bb3 core-prim . make-i/o-decoding-error) (G4fc7 core-prim . make-custom-textual-output-port) (G4fc6 core-prim . make-custom-textual-input/output-port) (G4fc5 core-prim . make-custom-textual-input-port) (G4fc4 core-prim . make-custom-binary-output-port) (G4fc3 core-prim . make-custom-binary-input/output-port) (G4fc2 core-prim . make-custom-binary-input-port) (G4fc1 core-prim . make-bytevector) (G4fc0 core-prim . lookahead-u8) (G4fbf core-prim . lookahead-char) (G4afe core-prim . i/o-write-error?) (G4ae9 core-prim . i/o-read-error?) (G4b9e core-prim . i/o-port-error?) (G4b16 core-prim . i/o-invalid-position-error?) (G4b30 core-prim . i/o-filename-error?) (G4b47 core-prim . i/o-file-protection-error?) (G4b5c core-prim . i/o-file-is-read-only-error?) (G4b86 core-prim . i/o-file-does-not-exist-error?) (G4b71 core-prim . i/o-file-already-exists-error?) (G4ad4 core-prim . i/o-error?) (G4b18 core-prim . i/o-error-position) (G4ba0 core-prim . i/o-error-port) (G4b32 core-prim . i/o-error-filename) (G4bcd core-prim . i/o-encoding-error?) (G4bcf core-prim . i/o-encoding-error-char) (G4bb5 core-prim . i/o-decoding-error?) (G4fbe core-prim . get-u8) (G4fbd core-prim . get-string-n!) (G4fbc core-prim . get-string-n) (G4fbb core-prim . get-string-all) (G4fba core-prim . get-line) (G4fb9 core-prim . get-datum) (G4fb8 core-prim . get-char) (G4fb7 core-prim . get-bytevector-some) (G4fb6 core-prim . get-bytevector-n!) (G4fb5 core-prim . get-bytevector-n) (G4fb4 core-prim . get-bytevector-all) (G4fb3 core-prim . flush-output-port) (G4fb2 core-prim . close-port) (G3017 core-prim . scheme-report-environment) (G4fb1 core-prim . quotient) (G3015 core-prim . null-environment) (G4fb0 core-prim . remainder) (G4faf core-prim . modulo) (G4fae core-prim . inexact->exact) (G4fad core-prim . force) (G4fac core-prim . exact->inexact) (G4fab core-prim . make-promise) (G4faa core-prim . exit) (G4cfe core-prim . command-line) (G4fa9 core-prim . string-fill!) (G4fa8 core-prim . string-set!) (G4fa7 core-prim . set-cdr!) (G4fa6 core-prim . set-car!) (G4fa5 core-prim . remove) (G4fa4 core-prim . remv) (G4fa3 core-prim . remp) (G4fa2 core-prim . remq) (G4fa1 core-prim . partition) (G4fa0 core-prim . memv) (G4f9f core-prim . memq) (G4f9e core-prim . memp) (G4f9d core-prim . member) (G4f9c core-prim . exists) (G4f9b core-prim . for-all) (G4f9a core-prim . fold-right) (G4f99 core-prim . fold-left) (G4f98 core-prim . find) (G4f97 core-prim . filter) (G4f96 core-prim . cons*) (G4f95 core-prim . assv) (G4f94 core-prim . assq) (G4f93 core-prim . assp) (G4f92 core-prim . assoc) (G4f91 core-prim . call-with-string-output-port) (G4f90 core-prim . call-with-port) (G4f8f core-prim . call-with-bytevector-output-port) (G4f8e core-prim . bytevector->string) (G4f8d core-prim . buffer-mode?) (G4f8c core-prim . binary-port?) (G4f8b core-prim . with-exception-handler) (G4f8a core-prim . raise-continuable) (G4f89 core-prim . raise) (G301b core-prim . eval) (G3013 core-prim . environment) (G4f88 core-prim . make-enumeration) (G4f87 core-prim . enum-set=?) (G4f86 core-prim . enum-set-universe) (G4f85 core-prim . enum-set-union) (G4f84 core-prim . enum-set-subset?) (G4f83 core-prim . enum-set-projection) (G4f82 core-prim . enum-set-member?) (G4f81 core-prim . enum-set-intersection) (G4f80 core-prim . enum-set-indexer) (G4f7f core-prim . enum-set-difference) (G4f7e core-prim . enum-set-constructor) (G4f7d core-prim . enum-set-complement) (G4f7c core-prim . enum-set->list) (G4a4a core-prim . who-condition?) (G49c4 core-prim . warning?) (G4a03 core-prim . violation?) (G4abf core-prim . undefined-violation?) (G4aa6 core-prim . syntax-violation?) (G4aaa core-prim . syntax-violation-subform) (G4aa8 core-prim . syntax-violation-form) (G303b core-prim . syntax-violation) (G4f7b core-prim . simple-conditions) (G49d9 core-prim . serious-condition?) (G4a61 core-prim . non-continuable-violation?) (G49ad core-prim . message-condition?) (G4a46 core-prim . make-who-condition) (G49c2 core-prim . make-warning) (G4a01 core-prim . make-violation) (G4abd core-prim . make-undefined-violation) (G4aa0 core-prim . make-syntax-violation) (G49d7 core-prim . make-serious-condition) (G4a5f core-prim . make-non-continuable-violation) (G49a9 core-prim . make-message-condition) (G4a89 core-prim . make-lexical-violation) (G4a2c core-prim . make-irritants-condition) (G4a74 core-prim . make-implementation-restriction-violation) (G49ec core-prim . make-error) (G4a16 core-prim . make-assertion-violation) (G4a8b core-prim . lexical-violation?) (G4a30 core-prim . irritants-condition?) (G4a76 core-prim . implementation-restriction-violation?) (G49ee core-prim . error?) (G4a4c core-prim . condition-who) (G4f7a core-prim . condition-predicate) (G49af core-prim . condition-message) (G4a32 core-prim . condition-irritants) (G4f79 core-prim . condition-accessor) (G4f78 core-prim . condition) (G4a18 core-prim . assertion-violation?) (G4f77 core-prim . condition?) (G4f76 core-prim . utf32->string) (G4f75 core-prim . utf16->string) (G4f74 core-prim . utf8->string) (G4f73 core-prim . uint-list->bytevector) (G4f72 core-prim . u8-list->bytevector) (G4f71 core-prim . string->utf8) (G4f70 core-prim . string->utf32) (G4f6f core-prim . string->utf16) (G4f6e core-prim . sint-list->bytevector) (G4f6d core-prim . native-endianness) (G4f6c core-prim . bytevector?) (G4f6b core-prim . bytevector=?) (G4f6a core-prim . bytevector-uint-set!) (G4f69 core-prim . bytevector-uint-ref) (G4f68 core-prim . bytevector-u8-set!) (G4f67 core-prim . bytevector-u8-ref) (G4f66 core-prim . bytevector-u64-set!) (G4f65 core-prim . bytevector-u64-ref) (G4f64 core-prim . bytevector-u64-native-set!) (G4f63 core-prim . bytevector-u64-native-ref) (G4f62 core-prim . bytevector-u32-set!) (G4f61 core-prim . bytevector-u32-ref) (G4f60 core-prim . bytevector-u32-native-set!) (G4f5f core-prim . bytevector-u32-native-ref) (G4f5e core-prim . bytevector-u16-set!) (G4f5d core-prim . bytevector-u16-ref) (G4f5c core-prim . bytevector-u16-native-set!) (G4f5b core-prim . bytevector-u16-native-ref) (G4f5a core-prim . bytevector-sint-set!) (G4f59 core-prim . bytevector-sint-ref) (G4f58 core-prim . bytevector-s8-set!) (G4f57 core-prim . bytevector-s8-ref) (G4f56 core-prim . bytevector-s64-set!) (G4f55 core-prim . bytevector-s64-ref) (G4f54 core-prim . bytevector-s64-native-set!) (G4f53 core-prim . bytevector-s64-native-ref) (G4f52 core-prim . bytevector-s32-set!) (G4f51 core-prim . bytevector-s32-ref) (G4f50 core-prim . bytevector-s32-native-set!) (G4f4f core-prim . bytevector-s32-native-ref) (G4f4e core-prim . bytevector-s16-set!) (G4f4d core-prim . bytevector-s16-ref) (G4f4c core-prim . bytevector-s16-native-set!) (G4f4b core-prim . bytevector-s16-native-ref) (G4f4a core-prim . bytevector-length) (G4f49 core-prim . bytevector-ieee-single-ref) (G4f48 core-prim . bytevector-ieee-single-set!) (G4f47 core-prim . bytevector-ieee-single-native-set!) (G4f46 core-prim . bytevector-ieee-single-native-ref) (G4f45 core-prim . bytevector-ieee-double-set!) (G4f44 core-prim . bytevector-ieee-double-ref) (G4f43 core-prim . bytevector-ieee-double-native-set!) (G4f42 core-prim . bytevector-ieee-double-native-ref) (G4f41 core-prim . bytevector-fill!) (G4f40 core-prim . bytevector-copy!) (G4f3f core-prim . bytevector-copy) (G4f3e core-prim . bytevector->uint-list) (G4f3d core-prim . bytevector->u8-list) (G4f3c core-prim . bytevector->sint-list) (G4bf9 core-prim . no-nans-violation?) (G4be4 core-prim . no-infinities-violation?) (G4bf7 core-prim . make-no-nans-violation) (G4be2 core-prim . make-no-infinities-violation) (G4f3b core-prim . real->flonum) (G4f3a core-prim . flzero?) (G4f39 core-prim . fltruncate) (G4f38 core-prim . fltan) (G4f37 core-prim . flsqrt) (G4f36 core-prim . flsin) (G4f35 core-prim . flround) (G4f34 core-prim . flpositive?) (G4f33 core-prim . flonum?) (G4f32 core-prim . flodd?) (G4f31 core-prim . flnumerator) (G4f30 core-prim . flnegative?) (G4f2f core-prim . flnan?) (G4f2e core-prim . flmod0) (G4f2d core-prim . flmod) (G4f2c core-prim . flmin) (G4f2b core-prim . flmax) (G4f2a core-prim . fllog) (G4f29 core-prim . flinteger?) (G4f28 core-prim . flinfinite?) (G4f27 core-prim . flfloor) (G4f26 core-prim . flfinite?) (G4f25 core-prim . flexpt) (G4f24 core-prim . flexp) (G4f23 core-prim . fleven?) (G4f22 core-prim . fldiv0-and-mod0) (G4f21 core-prim . fldiv0) (G4f20 core-prim . fldiv-and-mod) (G4f1f core-prim . fldiv) (G4f1e core-prim . fldenominator) (G4f1d core-prim . flcos) (G4f1c core-prim . flceiling) (G4f1b core-prim . flatan) (G4f1a core-prim . flasin) (G4f19 core-prim . flacos) (G4f18 core-prim . flabs) (G4f17 core-prim . fl>?) (G4f16 core-prim . fl>=?) (G4f15 core-prim . fl=?) (G4f14 core-prim . fl<?) (G4f13 core-prim . fl<=?) (G4f12 core-prim . fl/) (G4f11 core-prim . fl-) (G4f10 core-prim . fl+) (G4f0f core-prim . fl*) (G4f0e core-prim . fixnum->flonum) (G4f0d core-prim . fxzero?) (G4f0c core-prim . fxxor) (G4f0b core-prim . fxrotate-bit-field) (G4f0a core-prim . fxreverse-bit-field) (G4f09 core-prim . fxpositive?) (G4f08 core-prim . fxodd?) (G4f07 core-prim . fxnot) (G4f06 core-prim . fxnegative?) (G4f05 core-prim . fxmod0) (G4f04 core-prim . fxmod) (G4f03 core-prim . fxmin) (G4f02 core-prim . fxmax) (G4f01 core-prim . fxlength) (G4f00 core-prim . fxior) (G4eff core-prim . fxif) (G4efe core-prim . fxfirst-bit-set) (G4efd core-prim . fxeven?) (G4efc core-prim . fxdiv0-and-mod0) (G4efb core-prim . fxdiv0) (G4efa core-prim . fxdiv-and-mod) (G4ef9 core-prim . fxdiv) (G4ef8 core-prim . fxcopy-bit-field) (G4ef7 core-prim . fxcopy-bit) (G4ef6 core-prim . fxbit-set?) (G4ef5 core-prim . fxbit-field) (G4ef4 core-prim . fxbit-count) (G4ef3 core-prim . fxarithmetic-shift-right) (G4ef2 core-prim . fxarithmetic-shift-left) (G4ef1 core-prim . fxarithmetic-shift) (G4ef0 core-prim . fxand) (G4eef core-prim . fx>?) (G4eee core-prim . fx>=?) (G4eed core-prim . fx=?) (G4eec core-prim . fx<?) (G4eeb core-prim . fx<=?) (G4eea core-prim . fx-/carry) (G4ee9 core-prim . fx-) (G4ee8 core-prim . fx+/carry) (G4ee7 core-prim . fx+) (G4ee6 core-prim . fx*/carry) (G4ee5 core-prim . fx*) (G4ee4 core-prim . greatest-fixnum) (G4ee3 core-prim . least-fixnum) (G4ee2 core-prim . fixnum-width) (G4ee1 core-prim . fixnum?) (G4ee0 core-prim . bitwise-rotate-bit-field) (G4edf core-prim . bitwise-reverse-bit-field) (G4ede core-prim . bitwise-length) (G4edd core-prim . bitwise-if) (G4edc core-prim . bitwise-first-bit-set) (G4edb core-prim . bitwise-copy-bit-field) (G4eda core-prim . bitwise-copy-bit) (G4ed9 core-prim . bitwise-bit-set?) (G4ed8 core-prim . bitwise-bit-field) (G4ed7 core-prim . bitwise-bit-count) (G4ed6 core-prim . bitwise-xor) (G4ed5 core-prim . bitwise-ior) (G4ed4 core-prim . bitwise-and) (G4ed3 core-prim . bitwise-not) (G4ed2 core-prim . bitwise-arithmetic-shift-right) (G4ed1 core-prim . bitwise-arithmetic-shift-left) (G4ed0 core-prim . bitwise-arithmetic-shift) (G4ecf core-prim . zero?) (G4ece core-prim . vector?) (G4ecd core-prim . vector-set!) (G4ecc core-prim . vector-ref) (G4ecb core-prim . vector-map) (G4eca core-prim . vector-length) (G4ec9 core-prim . vector-for-each) (G4ec8 core-prim . vector-fill!) (G4ec7 core-prim . vector->list) (G4ec6 core-prim . vector) (G4ec5 core-prim . values) (G4ec4 core-prim . truncate) (G4ec3 core-prim . tan) (G4ec2 core-prim . symbol?) (G4ec1 core-prim . symbol=?) (G4ec0 core-prim . symbol->string) (G4ebf core-prim . substring) (G4ebe core-prim . string?) (G4ebd core-prim . string>?) (G4ebc core-prim . string>=?) (G4ebb core-prim . string=?) (G4eba core-prim . string<?) (G4eb9 core-prim . string<=?) (G4eb8 core-prim . string-ref) (G4eb7 core-prim . string-length) (G4eb6 core-prim . string-for-each) (G4eb5 core-prim . string-copy) (G4eb4 core-prim . string-append) (G4eb3 core-prim . string->symbol) (G4eb2 core-prim . string->number) (G4eb1 core-prim . string->list) (G4eb0 core-prim . string) (G4eaf core-prim . sqrt) (G4eae core-prim . sin) (G4ead core-prim . round) (G4eac core-prim . reverse) (G4eab core-prim . real?) (G4eaa core-prim . real-valued?) (G4ea9 core-prim . real-part) (G4ea8 core-prim . rationalize) (G4ea7 core-prim . rational?) (G4ea6 core-prim . rational-valued?) (G4ea5 core-prim . procedure?) (G4ea4 core-prim . positive?) (G4ea3 core-prim . pair?) (G4ea2 core-prim . odd?) (G4ea1 core-prim . numerator) (G4ea0 core-prim . number?) (G4e9f core-prim . number->string) (G4e9e core-prim . null?) (G4e9d core-prim . not) (G4e9c core-prim . negative?) (G4e9b core-prim . nan?) (G4e9a core-prim . min) (G4e99 core-prim . max) (G4e98 core-prim . map) (G4e97 core-prim . make-vector) (G4e96 core-prim . make-string) (G4e95 core-prim . make-rectangular) (G4e94 core-prim . make-polar) (G4e93 core-prim . magnitude) (G4e92 core-prim . log) (G4e91 core-prim . list?) (G4e90 core-prim . list-tail) (G4e8f core-prim . list-ref) (G4e8e core-prim . list->vector) (G4e8d core-prim . list->string) (G4e8c core-prim . list) (G4e8b core-prim . length) (G4e8a core-prim . lcm) (G4e89 core-prim . integer?) (G4e88 core-prim . integer-valued?) (G4e87 core-prim . integer->char) (G4e86 core-prim . infinite?) (G4e85 core-prim . inexact?) (G4e84 core-prim . inexact) (G4e83 core-prim . imag-part) (G4e82 core-prim . gcd) (G4e81 core-prim . for-each) (G4e80 core-prim . floor) (G4e7f core-prim . finite?) (G4e7e core-prim . expt) (G4e7d core-prim . exp) (G4e7c core-prim . exact?) (G4e7b core-prim . exact-integer-sqrt) (G4e7a core-prim . exact) (G4e79 core-prim . even?) (G4e78 core-prim . error) (G4e77 core-prim . eqv?) (G4e76 core-prim . equal?) (G4e75 core-prim . eq?) (G4e74 core-prim . dynamic-wind) (G4e73 core-prim . div0-and-mod0) (G4e72 core-prim . mod0) (G4e71 core-prim . div0) (G4e70 core-prim . div-and-mod) (G4e6f core-prim . mod) (G4e6e core-prim . div) (G4e6d core-prim . denominator) (G4e6c core-prim . cos) (G4e6b core-prim . cons) (G4e6a core-prim . complex?) (G4e69 core-prim . char?) (G4e68 core-prim . char>?) (G4e67 core-prim . char>=?) (G4e66 core-prim . char=?) (G4e65 core-prim . char<?) (G4e64 core-prim . char<=?) (G4e63 core-prim . char->integer) (G4e62 core-prim . ceiling) (G4e61 core-prim . call-with-values) (G4e60 core-prim . call/cc) (G4e5f core-prim . call-with-current-continuation) (G4e5e core-prim . cddddr) (G4e5d core-prim . cdddar) (G4e5c core-prim . cddadr) (G4e5b core-prim . cddaar) (G4e5a core-prim . cdaddr) (G4e59 core-prim . cdadar) (G4e58 core-prim . cdaadr) (G4e57 core-prim . cdaaar) (G4e56 core-prim . cadddr) (G4e55 core-prim . caddar) (G4e54 core-prim . cadadr) (G4e53 core-prim . cadaar) (G4e52 core-prim . caaddr) (G4e51 core-prim . caadar) (G4e50 core-prim . caaadr) (G4e4f core-prim . caaaar) (G4e4e core-prim . cdddr) (G4e4d core-prim . cddar) (G4e4c core-prim . cdadr) (G4e4b core-prim . cdaar) (G4e4a core-prim . caddr) (G4e49 core-prim . cadar) (G4e48 core-prim . caadr) (G4e47 core-prim . caaar) (G4e46 core-prim . cddr) (G4e45 core-prim . cdar) (G4e44 core-prim . cadr) (G4e43 core-prim . caar) (G4e42 core-prim . cdr) (G4e41 core-prim . car) (G4e40 core-prim . boolean?) (G4e3f core-prim . boolean=?) (G4e3e core-prim . atan) (G4e3d core-prim . assertion-violation) (G4e3c core-prim . asin) (G4e3b core-prim . apply) (G4e3a core-prim . append) (G4e39 core-prim . angle) (G4e38 core-prim . acos) (G4e37 core-prim . abs) (G4e36 core-prim . /) (G4e35 core-prim . *) (G4e34 core-prim . -) (G4e33 core-prim . +) (G4e32 core-prim . >=) (G4e31 core-prim . >) (G4e30 core-prim . =) (G4e2f core-prim . <=) (G4e2e core-prim . <) (G4e2d core-prim . library) (G4e2c core-prim . export) (G4e2b $core-rtd &no-nans-rtd &no-nans-rcd) (G4e2a $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e29 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e28 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e27 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e26 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e25 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e24 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e23 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e22 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e21 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e20 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e1f $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e1e $core-rtd &i/o-rtd &i/o-rcd) (G4e1d $core-rtd &undefined-rtd &undefined-rcd) (G4e1c $core-rtd &syntax-rtd &syntax-rcd) (G4e1b $core-rtd &lexical-rtd &lexical-rcd) (G4e1a $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e19 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e18 $core-rtd &who-rtd &who-rcd) (G4e17 $core-rtd &irritants-rtd &irritants-rcd) (G4e16 $core-rtd &assertion-rtd &assertion-rcd) (G4e15 $core-rtd &violation-rtd &violation-rcd) (G4e14 $core-rtd &error-rtd &error-rcd) (G4e13 $core-rtd &serious-rtd &serious-rcd) (G4e12 $core-rtd &warning-rtd &warning-rcd) (G4e11 $core-rtd &message-rtd &message-rcd) (G4e10 $core-rtd &condition-rtd &condition-rcd) (G4e0f macro . define-condition-type) (G4e0e macro . define-enumeration) (G4e0d macro . define-record-type) (G4e0c macro . parent-rtd) (G4e0b macro . nongenerative) (G4e0a macro . opaque) (G4e09 macro . sealed) (G4e08 macro . protocol) (G4e07 macro . parent) (G4e06 macro . immutable) (G4e05 macro . mutable) (G4e04 macro . fields) (G4e03 macro . error-handling-mode) (G4e02 macro . file-options) (G4e01 macro . buffer-mode) (G4e00 macro . eol-style) (G4dff macro . guard) (G4dfe macro . trace-define) (G4dfd macro . trace-lambda) (G4dfc macro . unsyntax-splicing) (G4dfb macro . unsyntax) (G4dfa macro . unquote-splicing) (G4df9 macro . unquote) (G4df8 macro . _) (G4df7 macro . else) (G4df6 macro . =>) (G4df5 macro . ...) (G4df4 macro . assert) (G4df3 macro . endianness) (G4df2 macro . delay) (G4df1 macro . time) (G4df0 macro . do) (G4def macro . cond) (G4dee macro . let*) (G4ded macro . let) (G4dec macro . let*-values) (G4deb macro . let-values) (G4dea macro . identifier-syntax) (G4de9 macro . with-syntax) (G4de8 macro . quasisyntax) (G4de7 macro . quasiquote) (G4de6 macro . syntax-rules) (G4de5 macro . include) (G4de4 macro . define-struct) (G4de3 core-macro . record-constructor-descriptor) (G4de2 core-macro . record-type-descriptor) (G4de1 macro . case) (G4de0 macro . parameterize) (G4ddf macro . unless) (G4dde macro . when) (G4ddd core-macro . or) (G4ddc core-macro . and) (G4ddb core-macro . if) (G4dda core-macro . letrec*) (G4dd9 core-macro . letrec) (G4dd8 core-macro . type-descriptor) (G4dd7 core-macro . case-lambda) (G4dd6 core-macro . lambda) (G4dd5 core-macro . syntax) (G4dd4 core-macro . syntax-case) (G4dd3 core-macro . quote) (G4dd2 core-macro . foreign-call) (G4dd1 letrec-syntax) (G4dd0 let-syntax) (G4dcf set!) (G4dce import) (G4dcd begin) (G4dcc module) (G4dcb define-syntax) (G4dca define)) values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50ba '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5099) (eval-core . G5098) (set-symbol-value! . G5097) (symbol-value . G5096) (gensym . G5095) (void . G5094)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50bb '(mosh) '() '() '() '() '((set-symbol-value! . G5097) (symbol-value . G5096) (ungensym . G5070) (assoc-ref . G506f) (alist-cons . G506e) (print . G506c) (format . G506b) (standard-library-path . G506a) (file-newer? . G5069) (stat-mtime . G5068) (current-directory . G5067) (write-to-file . G5066) (file->list . G5065) (file->string . G5064) (digit->integer . G5063) (call-with-string-input-port . G5062) (call-with-string-io . G5061) (string-split . G5060) (bytevector-for-each . G505f) (string->regexp . G505e) (rxmatch . G505d) (regexp-replace-all . G505c) (hashtable-for-each . G505b) (get-timeofday . G5055) (get-command-line . G5054) (sys-display . G5053) (source-info . G5052) (make-compiler-instruction . G5051) (make-instruction . G5050) (set-source-info! . G504f) (bignum? . G504e) (make-complex . G504d) (fast-equal? . G504c) (fasl-read . G504b) (fasl-write . G504a) (include . G4de5)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50bc '(mosh backend) '() '() '() '() '((receive . G5049)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50bd '(mosh file) '() '() '() '() '((read-line . G5091) (file-newer? . G5069) (stat-mtime . G5068) (current-directory . G5067) (write-to-file . G5066) (file->list . G5065) (file->string . G5064)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50be '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G505f)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50bf '(mosh number) '() '() '() '() '((digit->integer . G5063)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50c0 '(mosh string) '() '() '() '() '((print . G506c) (format . G506b) (call-with-string-input-port . G5062) (call-with-string-io . G5061) (string-split . G5060) (string->regexp . G505e)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50c1 '(mosh list) '() '() '() '() '((assoc-ref . G506f)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50c2 '(mosh regexp) '() '() '() '() '((rxmatch . G505d) (regexp-replace-all . G505c)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50c3 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G505b)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50c4 '(mosh parameters) '() '() '() '() '((make-parameter . G2823) (parameterize . G4de0)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50c5 '(system) '() '() '() '() '((local-tz-offset . G505a) (microseconds . G5059) (readdir . G5058) (get-environment-variables . G5057) (get-environment-variable . G5056)) '() values values '#f '#f '#f '#f) (G2b67@G2a0c@install-library 'G50c6 '(srfi :1) '() '() '() '() '((dotted-list? . G5090) (circular-list? . G508f) (proper-list? . G508e) (circular-list . G508d) (last . G508c) (last-pair . G508b) (not-pair? . G508a) (split-at! . G5089) (split-at . G5088) (list= . G5087) (list-copy . G5086) (list-tabulate . G5085) (make-list . G5084) (xcons . G5083) (tenth . G5082) (ninth . G5081) (eighth . G5080) (seventh . G507f) (sixth . G507e) (fifth . G507d) (drop-right! . G507c) (drop-right . G507b) (take-right . G507a) (take! . G5079) (drop . G5078) (take . G5077) (car+cdr . G5076) (third . G5075) (second . G5074) (first . G5073) (iota . G5072) (every . G5071) (alist-cons . G506e) (append-map . G506d)) '() values values '#f '#f '#f '#f))
((lambda (G4cf3@add-library-path! G4cf5@parse-and-add-library-path G4cf7@for-each-with-index G4cf9@conditioon-printer G4cfb@repl G4cfd@trace-printer G4cff@command-line G4d01@local-library-path G4d03@load/args G4d05@load G4d07@ironscheme-build G4d09@eval-top-level G4d0b@compile-system-libraries G4d0d@compile G4d0f@compile->closure G4d11@pre-compile-r6rs-file G4d13@load-r6rs-top-level) (begin (set! G4cf3@add-library-path! (lambda (G4d2e@path) (G2b57@G29ec@library-path (append (G2b57@G29ec@library-path) (list G4d2e@path))))) (set! G4cf5@parse-and-add-library-path (lambda (G4d30@paths G4d31@message) ((lambda (G4d34@t) (if G4d34@t ((lambda (G4d36@paths) (for-each (lambda (G4d38@path) (if (file-exists? G4d38@path) (G4cf3@add-library-path! G4d38@path) (format (current-error-port) G4d31@message G4d38@path))) (reverse (string-split G4d36@paths '#\:)))) G4d34@t) (void))) G4d30@paths))) (set! G4cf7@for-each-with-index (lambda (G4d3a@proc G4d3b@lst) (letrec ((G4d3e@loop (lambda (G4d40@i G4d41@lst) (if (null? G4d41@lst) (if '#f '#f (void)) (begin (G4d3a@proc G4d40@i (car G4d41@lst)) (G4d3e@loop (+ G4d40@i '1) (cdr G4d41@lst))))))) (G4d3e@loop '1 G4d3b@lst)))) (set! G4cf9@conditioon-printer (lambda (G4d44@e G4d45@port) ((lambda (G4d49@ref) (begin (set! G4d49@ref (lambda (G4d58@rtd G4d59@i G4d5a@x) ((lambda (G4d5e@val) (if (symbol? G4d5e@val) (ungensym G4d5e@val) G4d5e@val)) ((record-accessor G4d58@rtd G4d59@i) G4d5a@x)))) (begin (display '" Condition components:\n" G4d45@port) (G4cf7@for-each-with-index (lambda (G4d4a@i G4d4b@x) ((lambda (G4d4e@rtd) (begin (format G4d45@port '"   ~d. ~a" G4d4a@i (record-type-name G4d4e@rtd)) ((lambda (G4d50@v) ((lambda (G4d52@t) (if (memv G4d52@t '(0)) (newline G4d45@port) (if (memv G4d52@t '(1)) (begin (display '": " G4d45@port) (write (G4d49@ref G4d4e@rtd '0 G4d4b@x) G4d45@port) (newline G4d45@port)) (begin (display '":\n" G4d45@port) ((letrec ((G4d54@f (lambda (G4d56@i) (if (not (= G4d56@i (vector-length G4d50@v))) (begin (display '"       " G4d45@port) (display (vector-ref G4d50@v G4d56@i) G4d45@port) (display '": " G4d45@port) (write (G4d49@ref G4d4e@rtd G4d56@i G4d4b@x) G4d45@port) (newline G4d45@port) (G4d54@f (+ G4d56@i '1))) (void))))) G4d54@f) '0))))) (vector-length G4d50@v))) (record-type-field-names G4d4e@rtd)))) (record-rtd G4d4b@x))) (simple-conditions G4d44@e))))) '#f))) (set! G4cfb@repl (lambda G4d60@x ((lambda (G4d63@rec) (begin (set! G4d63@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d66@G4d64) (lambda () (with-exception-handler (lambda (G4d68@e) ((call/cc (lambda (G4d6a@G4d65) (G4d66@G4d64 (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4cf9@conditioon-printer G4d68@e (current-error-port))) (G4d6a@G4d65 (lambda () (raise-continuable G4d68@e)))))))))) (lambda () ((letrec ((G4d6c@loop (lambda (G4d6e@line G4d6f@accum) ((lambda (G4d73@parentheses-ok? G4d75@eval-string-print) (begin (set! G4d73@parentheses-ok? (lambda (G4d7a@text) ((letrec ((G4d7c@loop (lambda (G4d7e@chars G4d7f@p0 G4d80@p1) (if (null? G4d7e@chars) (= '0 G4d7f@p0 G4d80@p1) ((lambda (G4d84@t) (if (memv G4d84@t '(#\()) (G4d7c@loop (cdr G4d7e@chars) (+ G4d7f@p0 '1) G4d80@p1) (if (memv G4d84@t '(#\))) (G4d7c@loop (cdr G4d7e@chars) (- G4d7f@p0 '1) G4d80@p1) (if (memv G4d84@t '(#\[)) (G4d7c@loop (cdr G4d7e@chars) G4d7f@p0 (+ G4d80@p1 '1)) (if (memv G4d84@t '(#\])) (G4d7c@loop (cdr G4d7e@chars) G4d7f@p0 (- G4d80@p1 '1)) (G4d7c@loop (cdr G4d7e@chars) G4d7f@p0 G4d80@p1)))))) (car G4d7e@chars)))))) G4d7c@loop) (string->list G4d7a@text) '0 '0))) (set! G4d75@eval-string-print (lambda (G4d78@text) (if (not (= '0 (string-length G4d78@text))) (write (G4d09@eval-top-level (call-with-port (open-string-input-port G4d78@text) read))) (void)))) (if (eof-object? G4d6e@line) (begin (G4d75@eval-string-print G4d6f@accum) (exit)) ((lambda (G4d76@current) (if (G4d73@parentheses-ok? G4d76@current) (G4d75@eval-string-print G4d76@current) (G4d6c@loop (get-line (current-input-port)) G4d76@current))) (string-append G4d6f@accum G4d6e@line))))) '#f '#f)))) G4d6c@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d63@rec)))) (G4d63@rec))) '#f))) (set! G4cfd@trace-printer (G28ee@G2824@make-parameter write)) (set! G4cff@command-line (G28ee@G2824@make-parameter (get-command-line))) (set! G4d01@local-library-path (lambda (G4d86@filename) (cons '"." (G2b57@G29ec@library-path)))) (set! G4d03@load/args (lambda (G4d88@filename . G4d8a@args) (begin (apply G4d13@load-r6rs-top-level G4d88@filename 'load G4d8a@args) (void)))) (set! G4d05@load (lambda (G4d8c@filename) (begin (apply G4d13@load-r6rs-top-level G4d8c@filename 'load (G4cff@command-line)) (void)))) (set! G4d07@ironscheme-build (lambda () (G4d05@load '"ironscheme-buildscript.ss"))) (set! G4d09@eval-top-level (lambda (G4d8e@x) (G4929@G301c@eval G4d8e@x (G493f@G3048@interaction-environment)))) (set! G4d0b@compile-system-libraries (lambda () (G4d09@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d0d@compile (lambda (G4d90@filename) (G4d13@load-r6rs-top-level G4d90@filename 'compile))) (set! G4d0f@compile->closure (lambda (G4d92@filename) (G4d13@load-r6rs-top-level G4d92@filename 'closure))) (set! G4d11@pre-compile-r6rs-file (lambda (G4d94@filename) (G4d13@load-r6rs-top-level G4d94@filename 'compile))) (set! G4d13@load-r6rs-top-level (lambda (G4d96@filename G4d97@how . G4d9a@args) ((lambda (G4d9e@G4d9c G4d9f@G4d9d) ((lambda (G4da2@swap) (dynamic-wind G4da2@swap (lambda () ((lambda (G4da4@x*) ((lambda (G4da6@t) (if (memv G4da6@t '(closure)) (G493e@G3046@pre-compile-r6rs-top-level G4da4@x*) (if (memv G4da6@t '(load)) ((lambda (G4daa@G4da8 G4dab@G4da9) ((lambda (G4dae@swap) (dynamic-wind G4dae@swap (lambda () ((G493d@G3044@compile-r6rs-top-level G4da4@x*))) G4dae@swap)) (lambda () ((lambda (G4db0@t) (begin (G4daa@G4da8 G4dab@G4da9) (set! G4dab@G4da9 G4db0@t))) (G4daa@G4da8))))) G4cff@command-line (cons G4d96@filename (car G4d9a@args))) (if (memv G4da6@t '(compile)) (begin (G493d@G3044@compile-r6rs-top-level G4da4@x*) (G2b5b@G29f4@serialize-all G28e9@G281a@serialize-library G2943@G28fc@compile-core-expr)) (if '#f '#f (void)))))) G4d97@how)) (with-input-from-file G4d96@filename (lambda () ((letrec ((G4db2@f (lambda () ((lambda (G4db4@x) (if (eof-object? G4db4@x) '() (cons G4db4@x (G4db2@f)))) (G28e1@G280a@read-annotated))))) G4db2@f)))))) G4da2@swap)) (lambda () ((lambda (G4db6@t) (begin (G4d9e@G4d9c G4d9f@G4d9d) (set! G4d9f@G4d9d G4db6@t))) (G4d9e@G4d9c))))) G2b57@G29ec@library-path (G4d01@local-library-path G4d96@filename)))) (begin (set! G4dc8@G4d13@load-r6rs-top-level G4d13@load-r6rs-top-level) (set! G4dc7@G4d11@pre-compile-r6rs-file G4d11@pre-compile-r6rs-file) (set! G4dc6@G4d0f@compile->closure G4d0f@compile->closure) (set! G4dc5@G4d0d@compile G4d0d@compile) (set! G4dc4@G4d0b@compile-system-libraries G4d0b@compile-system-libraries) (set! G4dc3@G4d09@eval-top-level G4d09@eval-top-level) (set! G4dc2@G4d07@ironscheme-build G4d07@ironscheme-build) (set! G4dc1@G4d05@load G4d05@load) (set! G4dc0@G4d03@load/args G4d03@load/args) (set! G4dbf@G4d01@local-library-path G4d01@local-library-path) (set! G4dbe@G4cff@command-line G4cff@command-line) (set! G4dbd@G4cfd@trace-printer G4cfd@trace-printer) (set! G4dbc@G4cfb@repl G4cfb@repl) (set! G4dbb@G4cf9@conditioon-printer G4cf9@conditioon-printer) (set! G4dba@G4cf7@for-each-with-index G4cf7@for-each-with-index) (set! G4db9@G4cf5@parse-and-add-library-path G4cf5@parse-and-add-library-path) (set! G4db8@G4cf3@add-library-path! G4cf3@add-library-path!) (G2b5c@G29f6@current-precompiled-library-loader G28ea@G281c@load-serialized-library) (set-symbol-value! 'load G4d05@load) (set-symbol-value! 'pre-compile-r6rs-file G4d11@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d09@eval-top-level) (set-symbol-value! 'int-env-syms G4920@G300a@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2942@G28fa@expanded->core) (set-symbol-value! 'trace-printer G4cfd@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d14@c) (condition (G4c50@G4a60@make-non-continuable-violation) (G4c46@G4a47@make-who-condition 'raise) (G4c0a@G49aa@make-message-condition '"returned from non-continuable exception") (G4c3c@G4a2d@make-irritants-condition (list G4d14@c))))) (G4cf5@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4cf5@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b57@G29ec@library-path (append (G2b57@G29ec@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4d16@prefix) (G2b58@G29ee@library-extensions (G4d16@prefix '".mosh" (G2b58@G29ee@library-extensions)))) (lambda (G4d18@ext G4d19@ls) (append (map (lambda (G4d1c@x) (string-append G4d18@ext G4d1c@x)) G4d19@ls) G4d19@ls))) ((lambda (G4d1e@args G4d1f@port) ((lambda (G4d23@ref) (begin (set! G4d23@ref (lambda (G4d26@rtd G4d27@i G4d28@x) ((lambda (G4d2c@val) (if (symbol? G4d2c@val) (ungensym G4d2c@val) G4d2c@val)) ((record-accessor G4d26@rtd G4d27@i) G4d28@x)))) (with-exception-handler (lambda (G4d24@c) (G4cf9@conditioon-printer G4d24@c (current-error-port))) (lambda () (if (null? G4d1e@args) (G4cfb@repl) (G4d13@load-r6rs-top-level (car G4d1e@args) 'load (cdr G4d1e@args))))))) '#f)) (G4cff@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
