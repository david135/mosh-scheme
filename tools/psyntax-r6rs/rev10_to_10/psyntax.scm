;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G280b@read-annotated G280d@annotation-stripped G280f@annotation? G2811@annotation-source G2813@annotation-expression G2815@scm->fasl G2817@fasl-save G2819@fasl-load G281b@serialize-library G281d@load-serialized-library G281f@make-record-printer G2821@compile-core G2823@read-library-source-file G2825@make-parameter G2891@file-options-spec) (begin (set! G280b@read-annotated read) (set! G280d@annotation-stripped (lambda (G2892@x) (G2813@annotation-expression G2892@x))) (set! G280f@annotation? (lambda (G2894@x) (source-info G2894@x))) (set! G2811@annotation-source (lambda (G2896@x) (source-info G2896@x))) (set! G2813@annotation-expression (lambda (G2898@x) (if (pair? G2898@x) (cons (car G2898@x) (cdr G2898@x)) (display '"line:46\n")))) (set! G2815@scm->fasl (lambda (G289a@filename) (string-append G289a@filename '".fasl"))) (set! G2817@fasl-save (lambda (G289c@filename G289d@obj) (call-with-port (open-file-output-port G289c@filename) (lambda (G28a0@port) ((symbol-value 'fasl-write!) G289d@obj G28a0@port))))) (set! G2819@fasl-load (lambda (G28a2@filename) (call-with-port (open-file-input-port G28a2@filename) (symbol-value 'fasl-read!)))) (set! G281b@serialize-library (lambda (G28a4@filename G28a5@obj) (begin (format '#t '"serialize-library ~a\n..." G28a4@filename) ((lambda (G28a8@fasl-file) (begin (if (file-exists? G28a8@fasl-file) (delete-file G28a8@fasl-file) (void)) ((call/cc (lambda (G28ac@G28aa) (lambda () (with-exception-handler (lambda (G28ae@c) ((call/cc (lambda (G28b0@G28ab) (G28ac@G28aa (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28a4@filename) (if (file-exists? G28a8@fasl-file) (delete-file G28a8@fasl-file) (void)) '#f) (G28b0@G28ab (lambda () (raise-continuable G28ae@c)))))))))) (lambda () (begin (G2817@fasl-save G28a8@fasl-file G28a5@obj) (display '"OK\n")))))))))) (G2815@scm->fasl G28a4@filename))))) (set! G281d@load-serialized-library (lambda (G28b2@filename G28b3@obj) ((lambda (G28b6@fasl-file) (if (and (file-exists? G28b6@fasl-file) ((symbol-value 'file-newer?) G28b6@fasl-file G28b2@filename)) ((lambda (G28b8@expanded2core) ((lambda (G28ba@code) ((lambda (G28bc@pivot) ((lambda (G28be@visit) ((lambda (G28c0@visit-proc) ((lambda () (begin (set-car! G28bc@pivot G28c0@visit-proc) ((lambda (G28c2@pivot) ((lambda (G28c4@invoke) ((lambda () (begin (set-car! G28c2@pivot (lambda () (eval-core G28c4@invoke))) (apply G28b3@obj G28ba@code))))) (G28b8@expanded2core (car G28c2@pivot)))) (cdr G28bc@pivot)) '#t)))) (lambda () (eval-core G28be@visit)))) (G28b8@expanded2core (car G28bc@pivot)))) (cddddr (cddddr G28ba@code)))) (G2819@fasl-load G28b6@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2815@scm->fasl G28b2@filename)))) (set! G281f@make-record-printer (lambda (G28c6@name G28c7@printer) (lambda G28ca@x (begin (display '"record printer") (for-each display G28ca@x))))) (set! G2821@compile-core (lambda G28cc@x (apply error 'comile-core '"not implementated" G28cc@x))) (set! G2823@read-library-source-file (lambda (G28ce@file-name) (with-input-from-file G28ce@file-name G280b@read-annotated))) (set! G2825@make-parameter (lambda G28de ((lambda (G28df) (if (= G28df '1) (apply (lambda (G28d0@x) (G2825@make-parameter G28d0@x (lambda (G28d2@x) G28d2@x))) G28de) (if (= G28df '2) (apply (lambda (G28d4@x G28d5@fender) ((lambda (G28d8@x) (lambda G28dc ((lambda (G28dd) (if (= G28dd '0) (apply (lambda () G28d8@x) G28dc) (if (= G28dd '1) (apply (lambda (G28da@v) (set! G28d8@x (G28d5@fender G28da@v))) G28dc) (error 'apply '"invalid arg count")))) (length G28dc)))) (G28d5@fender G28d4@x))) G28de) (error 'apply '"invalid arg count")))) (length G28de)))) (set! G2891@file-options-spec (lambda (G28e0@x) G28e0@x)) (begin (set! G28f0@G2891@file-options-spec G2891@file-options-spec) (set! G28ef@G2825@make-parameter G2825@make-parameter) (set! G28ee@G2823@read-library-source-file G2823@read-library-source-file) (set! G28ed@G2821@compile-core G2821@compile-core) (set! G28ec@G281f@make-record-printer G281f@make-record-printer) (set! G28eb@G281d@load-serialized-library G281d@load-serialized-library) (set! G28ea@G281b@serialize-library G281b@serialize-library) (set! G28e9@G2819@fasl-load G2819@fasl-load) (set! G28e8@G2817@fasl-save G2817@fasl-save) (set! G28e7@G2815@scm->fasl G2815@scm->fasl) (set! G28e6@G2813@annotation-expression G2813@annotation-expression) (set! G28e5@G2811@annotation-source G2811@annotation-source) (set! G28e4@G280f@annotation? G280f@annotation?) (set! G28e3@G280d@annotation-stripped G280d@annotation-stripped) (set! G28e2@G280b@read-annotated G280b@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28f5@current-primitive-locations G28f7@mutable? G28f9@rewriter G28fb@expanded->core G28fd@compile-core-expr G28ff@pretty-print G2901@compile-core-expr-to-port) (begin (set! G28f5@current-primitive-locations (G28ef@G2825@make-parameter (lambda (G2902@x) '#f) (lambda (G2904@p) G2904@p))) (set! G28f7@mutable? (lambda (G2906@x) (or (pair? G2906@x) (vector? G2906@x) (hashtable? G2906@x)))) (set! G28f9@rewriter (lambda (G2908@quote-hack?) ((lambda (G290b@f) (begin (set! G290b@f (lambda (G290c@x) (if (pair? G290c@x) ((lambda (G290e@t) (if (memv G290e@t '(quote)) (if (and G2908@quote-hack? (G28f7@mutable? (cadr G290c@x))) ((lambda (G2910@g) (begin (set-symbol-value! G2910@g (cadr G290c@x)) G2910@g)) (gensym)) G290c@x) (if (memv G290e@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2912@x) (cons (car G2912@x) (map G290b@f (cdr G2912@x)))) (cdr G290c@x))) (if (memv G290e@t '(lambda)) (cons* 'lambda (cadr G290c@x) (map G290b@f (cddr G290c@x))) (if (memv G290e@t '(letrec)) ((lambda (G2914@bindings G2915@body*) ((lambda (G2918@lhs* G2919@rhs*) (cons* 'letrec (map list G2918@lhs* (map G290b@f G2919@rhs*)) (map G290b@f G2915@body*))) (map car G2914@bindings) (map cadr G2914@bindings))) (cadr G290c@x) (cddr G290c@x)) (if (memv G290e@t '(letrec*)) ((lambda (G291c@bindings G291d@body*) ((lambda (G2920@lhs* G2921@rhs*) (cons* 'letrec* (map list G2920@lhs* (map G290b@f G2921@rhs*)) (map G290b@f G291d@body*))) (map car G291c@bindings) (map cadr G291c@bindings))) (cadr G290c@x) (cddr G290c@x)) (if (memv G290e@t '(library-letrec*)) ((lambda (G2924@name G2925@x) ((lambda (G2928@bindings G2929@body*) ((lambda (G292c@lhs* G292d@lhs** G292e@rhs*) (cons* 'library-letrec* G2924@name (map list G292c@lhs* G292d@lhs** (map G290b@f G292e@rhs*)) (map G290b@f G2929@body*))) (map car G2928@bindings) (map cadr G2928@bindings) (map caddr G2928@bindings))) (cadr G2925@x) (cddr G2925@x))) (cadr G290c@x) (cdr G290c@x)) (if (memv G290e@t '(begin)) (cons 'begin (map G290b@f (cdr G290c@x))) (if (memv G290e@t '(set!)) (list 'set! (cadr G290c@x) (G290b@f (caddr G290c@x))) (if (memv G290e@t '(primitive)) ((lambda (G2932@op) ((lambda (G2934@t) (if G2934@t ((lambda (G2936@loc) G2936@loc) G2934@t) G2932@op)) ((G28f5@current-primitive-locations) G2932@op))) (cadr G290c@x)) (if (memv G290e@t '(define)) G290c@x (if (list? G290c@x) (map G290b@f G290c@x) (error 'rewrite '"invalid form ~s ~s" G290c@x (list? G290c@x)))))))))))))) (car G290c@x)) G290c@x))) G290b@f)) '#f))) (set! G28fb@expanded->core (lambda (G2938@x) ((G28f9@rewriter '#t) G2938@x))) (set! G28fd@compile-core-expr (lambda (G293a@x) ((G28f9@rewriter '#f) G293a@x))) (set! G28ff@pretty-print write) (set! G2901@compile-core-expr-to-port (lambda (G293c@x G293d@p) (G28ff@pretty-print ((G28f9@rewriter '#f) G293c@x) G293d@p))) (begin (set! G2946@G2901@compile-core-expr-to-port G2901@compile-core-expr-to-port) (set! G2945@G28ff@pretty-print G28ff@pretty-print) (set! G2944@G28fd@compile-core-expr G28fd@compile-core-expr) (set! G2943@G28fb@expanded->core G28fb@expanded->core) (set! G2942@G28f9@rewriter G28f9@rewriter) (set! G2941@G28f7@mutable? G28f7@mutable?) (set! G2940@G28f5@current-primitive-locations G28f5@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G299c@make-collection G299e@current-library-collection G29a4@G299f G29a6@G29a1 G29a8@G29a0 G29ab@library? G29ad@make-library G29af@library-id G29b1@library-name G29b3@library-version G29b5@library-imp* G29b7@library-vis* G29b9@library-inv* G29bb@library-subst G29bd@library-env G29bf@library-visit-state G29c1@library-invoke-state G29c3@library-visit-code G29c5@library-invoke-code G29c7@library-visible? G29c9@library-source-file-name G29cb@set-library-id! G29cd@set-library-name! G29cf@set-library-version! G29d1@set-library-imp*! G29d3@set-library-vis*! G29d5@set-library-inv*! G29d7@set-library-subst! G29d9@set-library-env! G29db@set-library-visit-state! G29dd@set-library-invoke-state! G29df@set-library-visit-code! G29e1@set-library-invoke-code! G29e3@set-library-visible?! G29e5@set-library-source-file-name! G29e7@rp G29e9@find-dependencies G29eb@find-library-by G29ed@library-path G29ef@library-extensions G29f1@library-name->file-name G29f3@file-locator G29f5@serialize-all G29f7@current-precompiled-library-loader G29f9@try-load-from-file G29fb@library-loader G29fd@current-library-expander G29ff@external-pending-libraries G2a01@find-external-library G2a03@find-library-by-name G2a05@library-exists? G2a07@find-library-by-spec/die G2a09@label->binding-table G2a0b@install-library-record G2a0d@install-library G2a0f@imported-label->binding G2a11@invoke-library G2a13@visit-library G2a15@invoke-library-by-spec G2a17@installed-libraries G2a19@library-spec) (begin (set! G299c@make-collection (lambda () ((lambda (G2a1a@set) ((lambda (G2a1d@set-cons) (begin (set! G2a1d@set-cons (lambda (G2a22@x G2a23@ls) (if (memq G2a22@x G2a23@ls) G2a23@ls (cons G2a22@x G2a23@ls)))) (lambda G2a20 ((lambda (G2a21) (if (= G2a21 '0) (apply (lambda () G2a1a@set) G2a20) (if (= G2a21 '1) (apply (lambda (G2a1e@x) (set! G2a1a@set (G2a1d@set-cons G2a1e@x G2a1a@set))) G2a20) (error 'apply '"invalid arg count")))) (length G2a20))))) '#f)) '()))) (set! G299e@current-library-collection (G28ef@G2825@make-parameter (G299c@make-collection) (lambda (G2a26@x) (begin (if (not (procedure? G2a26@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a26@x) (void)) G2a26@x)))) (set! G29a4@G299f (make-record-type-descriptor 'library '#f 'G29a2 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29a6@G29a1 '#f) (set! G29a8@G29a0 (make-record-constructor-descriptor G29a4@G299f '#f G29a6@G29a1)) (set! G29ab@library? (record-predicate G29a4@G299f)) (set! G29ad@make-library (record-constructor G29a8@G29a0)) (set! G29af@library-id (record-accessor G29a4@G299f '0)) (set! G29b1@library-name (record-accessor G29a4@G299f '1)) (set! G29b3@library-version (record-accessor G29a4@G299f '2)) (set! G29b5@library-imp* (record-accessor G29a4@G299f '3)) (set! G29b7@library-vis* (record-accessor G29a4@G299f '4)) (set! G29b9@library-inv* (record-accessor G29a4@G299f '5)) (set! G29bb@library-subst (record-accessor G29a4@G299f '6)) (set! G29bd@library-env (record-accessor G29a4@G299f '7)) (set! G29bf@library-visit-state (record-accessor G29a4@G299f '8)) (set! G29c1@library-invoke-state (record-accessor G29a4@G299f '9)) (set! G29c3@library-visit-code (record-accessor G29a4@G299f '10)) (set! G29c5@library-invoke-code (record-accessor G29a4@G299f '11)) (set! G29c7@library-visible? (record-accessor G29a4@G299f '12)) (set! G29c9@library-source-file-name (record-accessor G29a4@G299f '13)) (set! G29cb@set-library-id! (record-mutator G29a4@G299f '0)) (set! G29cd@set-library-name! (record-mutator G29a4@G299f '1)) (set! G29cf@set-library-version! (record-mutator G29a4@G299f '2)) (set! G29d1@set-library-imp*! (record-mutator G29a4@G299f '3)) (set! G29d3@set-library-vis*! (record-mutator G29a4@G299f '4)) (set! G29d5@set-library-inv*! (record-mutator G29a4@G299f '5)) (set! G29d7@set-library-subst! (record-mutator G29a4@G299f '6)) (set! G29d9@set-library-env! (record-mutator G29a4@G299f '7)) (set! G29db@set-library-visit-state! (record-mutator G29a4@G299f '8)) (set! G29dd@set-library-invoke-state! (record-mutator G29a4@G299f '9)) (set! G29df@set-library-visit-code! (record-mutator G29a4@G299f '10)) (set! G29e1@set-library-invoke-code! (record-mutator G29a4@G299f '11)) (set! G29e3@set-library-visible?! (record-mutator G29a4@G299f '12)) (set! G29e5@set-library-source-file-name! (record-mutator G29a4@G299f '13)) (set! G29e7@rp (G28ec@G281f@make-record-printer 'library (lambda (G2a28@x G2a29@p G2a2a@wr) (begin (if (not (G29ab@library? G2a28@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29b3@library-version G2a28@x)) (G29b1@library-name G2a28@x) (append (G29b1@library-name G2a28@x) (list (G29b3@library-version G2a28@x))))) G2a29@p))))) (set! G29e9@find-dependencies (lambda (G2a2e@ls) (if (null? G2a2e@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29eb@find-library-by (lambda (G2a30@pred) ((letrec ((G2a32@f (lambda (G2a34@ls) (if (null? G2a34@ls) '#f (if (G2a30@pred (car G2a34@ls)) (car G2a34@ls) (G2a32@f (cdr G2a34@ls))))))) G2a32@f) ((G299e@current-library-collection))))) (set! G29ed@library-path (G28ef@G2825@make-parameter '(".") (lambda (G2a36@x) (if (and (list? G2a36@x) (for-all string? G2a36@x)) (map (lambda (G2a38@x) G2a38@x) G2a36@x) (assertion-violation 'library-path '"not a list of strings" G2a36@x))))) (set! G29ef@library-extensions (G28ef@G2825@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a3a@x) (if (and (list? G2a3a@x) (for-all string? G2a3a@x)) (map (lambda (G2a3c@x) G2a3c@x) G2a3a@x) (assertion-violation 'library-extensions '"not a list of strings" G2a3a@x))))) (set! G29f1@library-name->file-name (lambda (G2a3e@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a42@G2a40 G2a43@G2a41) ((lambda (G2a46@extract G2a47@p) ((lambda (G2a4b@display-hex) (begin (set! G2a4b@display-hex (lambda (G2a54@n) (if (<= '0 G2a54@n '9) (display G2a54@n G2a47@p) (display (integer->char (+ (char->integer '#\A) (- G2a54@n '10))) G2a47@p)))) (begin ((letrec ((G2a4c@f (lambda (G2a4e@ls) (if (not (null? G2a4e@ls)) (begin (display '"/" G2a47@p) (for-each (lambda (G2a50@c) (if (or (char<=? '#\a G2a50@c '#\z) (char<=? '#\A G2a50@c '#\Z) (char<=? '#\0 G2a50@c '#\9) (memv G2a50@c '(#\- #\. #\_ #\~))) (display G2a50@c G2a47@p) (begin (display '"%" G2a47@p) ((lambda (G2a52@n) (begin (G2a4b@display-hex (quotient G2a52@n '16)) (G2a4b@display-hex (remainder G2a52@n '16)))) (char->integer G2a50@c))))) (string->list (symbol->string (car G2a4e@ls)))) (G2a4c@f (cdr G2a4e@ls))) (void))))) G2a4c@f) G2a3e@x) (G2a46@extract)))) '#f)) G2a43@G2a41 G2a42@G2a40))))) (set! G29f3@file-locator (G28ef@G2825@make-parameter (lambda (G2a56@x) ((lambda (G2a58@str) ((letrec ((G2a5a@f (lambda (G2a5c@ls G2a5d@exts G2a5e@failed-list) (if (null? G2a5c@ls) ((lambda () ((lambda (G2a6a@G2a65 G2a6c@G2a67 G2a6e@G2a66 G2a71@G2a64 G2a73@make-library-resolution-condition G2a75@G2a62 G2a77@G2a63 G2a79@library-resolution-condition? G2a7b@condition-library G2a7d@condition-files) (begin (set! G2a6a@G2a65 (make-record-type-descriptor '&library-resolution G4c05@G4956@&condition-rtd 'G2a68 '#f '#f '#((immutable library) (immutable files)))) (set! G2a6c@G2a67 '#f) (set! G2a6e@G2a66 (make-record-constructor-descriptor G2a6a@G2a65 G4c06@G4958@&condition-rcd G2a6c@G2a67)) (set! G2a71@G2a64 (record-predicate G2a6a@G2a65)) (set! G2a73@make-library-resolution-condition (record-constructor G2a6e@G2a66)) (set! G2a75@G2a62 (record-accessor G2a6a@G2a65 '0)) (set! G2a77@G2a63 (record-accessor G2a6a@G2a65 '1)) (set! G2a79@library-resolution-condition? (condition-predicate G2a6a@G2a65)) (set! G2a7b@condition-library (condition-accessor G2a6a@G2a65 G2a75@G2a62)) (set! G2a7d@condition-files (condition-accessor G2a6a@G2a65 G2a77@G2a63)) (raise (condition (G4c25@G49ee@make-error) (G4c47@G4a48@make-who-condition 'expander) (G4c0b@G49ab@make-message-condition '"cannot locate library in library-path") (G2a73@make-library-resolution-condition G2a56@x (reverse G2a5e@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a5d@exts) (G2a5a@f (cdr G2a5c@ls) (G29ef@library-extensions) G2a5e@failed-list) ((lambda (G2a7e@name) (if (file-exists? G2a7e@name) G2a7e@name (G2a5a@f G2a5c@ls (cdr G2a5d@exts) (cons G2a7e@name G2a5e@failed-list)))) (string-append (car G2a5c@ls) G2a58@str (car G2a5d@exts)))))))) G2a5a@f) (G29ed@library-path) (G29ef@library-extensions) '())) (G29f1@library-name->file-name G2a56@x))) (lambda (G2a80@f) (if (procedure? G2a80@f) G2a80@f (assertion-violation 'file-locator '"not a procedure" G2a80@f))))) (set! G29f5@serialize-all (lambda (G2a82@serialize G2a83@compile) ((lambda (G2a87@library-desc) (begin (set! G2a87@library-desc (lambda (G2a8a@x) (list (G29af@library-id G2a8a@x) (G29b1@library-name G2a8a@x)))) (for-each (lambda (G2a88@x) (if (G29c9@library-source-file-name G2a88@x) (G2a82@serialize (G29c9@library-source-file-name G2a88@x) (list (G29af@library-id G2a88@x) (G29b1@library-name G2a88@x) (G29b3@library-version G2a88@x) (map G2a87@library-desc (G29b5@library-imp* G2a88@x)) (map G2a87@library-desc (G29b7@library-vis* G2a88@x)) (map G2a87@library-desc (G29b9@library-inv* G2a88@x)) (G29bb@library-subst G2a88@x) (G29bd@library-env G2a88@x) (G2a83@compile (G29c3@library-visit-code G2a88@x)) (G2a83@compile (G29c5@library-invoke-code G2a88@x)) (G29c7@library-visible? G2a88@x))) (void))) ((G299e@current-library-collection))))) '#f))) (set! G29f7@current-precompiled-library-loader (G28ef@G2825@make-parameter (lambda (G2a8c@filename G2a8d@sk) '#f))) (set! G29f9@try-load-from-file (lambda (G2a90@filename) ((G29f7@current-precompiled-library-loader) G2a90@filename (lambda G2ab6 ((lambda (G2ab7) (if (= G2ab7 '11) (apply (lambda (G2a92@id G2a93@name G2a94@ver G2a95@imp* G2a96@vis* G2a97@inv* G2a98@exp-subst G2a99@exp-env G2a9a@visit-proc G2a9b@invoke-proc G2a9c@visible?) ((letrec ((G2aa8@f (lambda (G2aaa@deps) (if (null? G2aaa@deps) (begin (G2a0d@install-library G2a92@id G2a93@name G2a94@ver G2a95@imp* G2a96@vis* G2a97@inv* G2a98@exp-subst G2a99@exp-env G2a9a@visit-proc G2a9b@invoke-proc '#f '#f G2a9c@visible? '#f) '#t) ((lambda (G2aac@d) ((lambda (G2aae@label G2aaf@dname) ((lambda (G2ab2@l) (if (and (G29ab@library? G2ab2@l) (eq? G2aae@label (G29af@library-id G2ab2@l))) (G2aa8@f (cdr G2aaa@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2a93@name G2aaf@dname G2a90@filename G2ab2@l G2aae@label (G29af@library-id G2ab2@l)) '#f))) (G2a03@find-library-by-name G2aaf@dname))) (car G2aac@d) (cadr G2aac@d))) (car G2aaa@deps)))))) G2aa8@f) (append G2a95@imp* G2a96@vis* G2a97@inv*))) G2ab6) (if (>= G2ab7 '0) (apply (lambda G2ab4@others '#f) G2ab6) (error 'apply '"invalid arg count")))) (length G2ab6)))))) (set! G29fb@library-loader (G28ef@G2825@make-parameter (lambda (G2ab8@x) ((lambda (G2aba@file-name) (if (not G2aba@file-name) (assertion-violation '#f '"cannot file library" G2ab8@x) (or (G29f9@try-load-from-file G2aba@file-name) ((G29fd@current-library-expander) (G28ee@G2823@read-library-source-file G2aba@file-name) G2aba@file-name (lambda (G2abc@name) (if (not (fast-equal? G2abc@name G2ab8@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ac0@G2abe G2ac1@G2abf) ((lambda (G2ac4@e G2ac5@p) (begin (display '"expected to find library " G2ac5@p) (write G2ab8@x G2ac5@p) (display '" in file " G2ac5@p) (display G2aba@file-name G2ac5@p) (display '", found " G2ac5@p) (write G2abc@name G2ac5@p) (display '" instead" G2ac5@p) (G2ac4@e))) G2ac1@G2abf G2ac0@G2abe)))) (void))))))) ((G29f3@file-locator) G2ab8@x))) (lambda (G2ac8@f) (if (procedure? G2ac8@f) G2ac8@f (assertion-violation 'library-locator '"not a procedure" G2ac8@f))))) (set! G29fd@current-library-expander (G28ef@G2825@make-parameter (lambda (G2aca@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2acc@f) (if (procedure? G2acc@f) G2acc@f (assertion-violation 'library-expander '"not a procedure" G2acc@f))))) (set! G29ff@external-pending-libraries (G28ef@G2825@make-parameter '())) (set! G2a01@find-external-library (lambda (G2ace@name) (begin (if (member G2ace@name (G29ff@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ace@name) (void)) ((lambda (G2ad2@G2ad0 G2ad3@G2ad1) ((lambda (G2ad6@swap) (dynamic-wind G2ad6@swap (lambda () (begin ((G29fb@library-loader) G2ace@name) (or (G29eb@find-library-by (lambda (G2ad8@x) (fast-equal? (G29b1@library-name G2ad8@x) G2ace@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ace@name)))) G2ad6@swap)) (lambda () ((lambda (G2ada@t) (begin (G2ad2@G2ad0 G2ad3@G2ad1) (set! G2ad3@G2ad1 G2ada@t))) (G2ad2@G2ad0))))) G29ff@external-pending-libraries (cons G2ace@name (G29ff@external-pending-libraries)))))) (set! G2a03@find-library-by-name (lambda (G2adc@name) (or (G29eb@find-library-by (lambda (G2ade@x) (fast-equal? (G29b1@library-name G2ade@x) G2adc@name))) (G2a01@find-external-library G2adc@name)))) (set! G2a05@library-exists? (lambda (G2ae0@name) (and (G29eb@find-library-by (lambda (G2ae2@x) (fast-equal? (G29b1@library-name G2ae2@x) G2ae0@name))) '#t))) (set! G2a07@find-library-by-spec/die (lambda (G2ae4@spec) ((lambda (G2ae6@id) (or (G29eb@find-library-by (lambda (G2ae8@x) (eq? G2ae6@id (G29af@library-id G2ae8@x)))) (assertion-violation '#f '"cannot find library with required spec" G2ae4@spec))) (car G2ae4@spec)))) (set! G2a09@label->binding-table (make-eq-hashtable)) (set! G2a0b@install-library-record (lambda (G2aea@lib) (begin ((lambda (G2aec@exp-env) (for-each (lambda (G2aee@x) ((lambda (G2af0@label G2af1@binding) ((lambda (G2af4@binding) (hashtable-set! G2a09@label->binding-table G2af0@label G2af4@binding)) ((lambda (G2af6@t) (if (memv G2af6@t '(global)) (cons 'global (cons G2aea@lib (cdr G2af1@binding))) (if (memv G2af6@t '(global-macro)) (cons 'global-macro (cons G2aea@lib (cdr G2af1@binding))) (if (memv G2af6@t '(global-macro!)) (cons 'global-macro! (cons G2aea@lib (cdr G2af1@binding))) G2af1@binding)))) (car G2af1@binding)))) (car G2aee@x) (cdr G2aee@x))) G2aec@exp-env)) (G29bd@library-env G2aea@lib)) ((G299e@current-library-collection) G2aea@lib)))) (set! G2a0d@install-library (lambda (G2af8@id G2af9@name G2afa@ver G2afb@imp* G2afc@vis* G2afd@inv* G2afe@exp-subst G2aff@exp-env G2b00@visit-proc G2b01@invoke-proc G2b02@visit-code G2b03@invoke-code G2b04@visible? G2b05@source-file-name) ((lambda (G2b14@imp-lib* G2b15@vis-lib* G2b16@inv-lib*) (begin (if (not (and (symbol? G2af8@id) (list? G2af9@name) (list? G2afa@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2af8@id G2af9@name G2afa@ver) (void)) (if (G2a05@library-exists? G2af9@name) (assertion-violation 'install-library '"library is already installed" G2af9@name) (void)) ((lambda (G2b1a@lib) (G2a0b@install-library-record G2b1a@lib)) (G29ad@make-library G2af8@id G2af9@name G2afa@ver G2b14@imp-lib* G2b15@vis-lib* G2b16@inv-lib* G2afe@exp-subst G2aff@exp-env G2b00@visit-proc G2b01@invoke-proc G2b02@visit-code G2b03@invoke-code G2b04@visible? G2b05@source-file-name)))) (map G2a07@find-library-by-spec/die G2afb@imp*) (map G2a07@find-library-by-spec/die G2afc@vis*) (map G2a07@find-library-by-spec/die G2afd@inv*)))) (set! G2a0f@imported-label->binding (lambda (G2b1c@lab) (hashtable-ref G2a09@label->binding-table G2b1c@lab '#f))) (set! G2a11@invoke-library (lambda (G2b1e@lib) ((lambda (G2b20@invoke) (if (procedure? G2b20@invoke) (begin (G29dd@set-library-invoke-state! G2b1e@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b1e@lib))) (for-each G2a11@invoke-library (G29b9@library-inv* G2b1e@lib)) (G29dd@set-library-invoke-state! G2b1e@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b1e@lib))) (G2b20@invoke) (G29dd@set-library-invoke-state! G2b1e@lib '#t)) (void))) (G29c1@library-invoke-state G2b1e@lib)))) (set! G2a13@visit-library (lambda (G2b22@lib) ((lambda (G2b24@visit) (if (procedure? G2b24@visit) (begin (G29db@set-library-visit-state! G2b22@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b22@lib))) (for-each G2a11@invoke-library (G29b7@library-vis* G2b22@lib)) (G29db@set-library-visit-state! G2b22@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b22@lib))) (G2b24@visit) (G29db@set-library-visit-state! G2b22@lib '#t)) (void))) (G29bf@library-visit-state G2b22@lib)))) (set! G2a15@invoke-library-by-spec (lambda (G2b26@spec) (G2a11@invoke-library (G2a07@find-library-by-spec/die G2b26@spec)))) (set! G2a17@installed-libraries (lambda G2b2e ((lambda (G2b2f) (if (= G2b2f '1) (apply (lambda (G2b28@all?) ((letrec ((G2b2a@f (lambda (G2b2c@ls) (if (null? G2b2c@ls) '() (if (or G2b28@all? (G29c7@library-visible? (car G2b2c@ls))) (cons (car G2b2c@ls) (G2b2a@f (cdr G2b2c@ls))) (G2b2a@f (cdr G2b2c@ls))))))) G2b2a@f) ((G299e@current-library-collection)))) G2b2e) (if (= G2b2f '0) (apply (lambda () (G2a17@installed-libraries '#f)) G2b2e) (error 'apply '"invalid arg count")))) (length G2b2e)))) (set! G2a19@library-spec (lambda (G2b30@x) (begin (if (not (G29ab@library? G2b30@x)) (assertion-violation 'library-spec '"not a library" G2b30@x) (void)) (list (G29af@library-id G2b30@x) (G29b1@library-name G2b30@x) (G29b3@library-version G2b30@x))))) (begin (set! G2b6e@G2a19@library-spec G2a19@library-spec) (set! G2b6d@G2a17@installed-libraries G2a17@installed-libraries) (set! G2b6c@G2a15@invoke-library-by-spec G2a15@invoke-library-by-spec) (set! G2b6b@G2a13@visit-library G2a13@visit-library) (set! G2b6a@G2a11@invoke-library G2a11@invoke-library) (set! G2b69@G2a0f@imported-label->binding G2a0f@imported-label->binding) (set! G2b68@G2a0d@install-library G2a0d@install-library) (set! G2b67@G2a0b@install-library-record G2a0b@install-library-record) (set! G2b66@G2a09@label->binding-table G2a09@label->binding-table) (set! G2b65@G2a07@find-library-by-spec/die G2a07@find-library-by-spec/die) (set! G2b64@G2a05@library-exists? G2a05@library-exists?) (set! G2b63@G2a03@find-library-by-name G2a03@find-library-by-name) (set! G2b62@G2a01@find-external-library G2a01@find-external-library) (set! G2b61@G29ff@external-pending-libraries G29ff@external-pending-libraries) (set! G2b60@G29fd@current-library-expander G29fd@current-library-expander) (set! G2b5f@G29fb@library-loader G29fb@library-loader) (set! G2b5e@G29f9@try-load-from-file G29f9@try-load-from-file) (set! G2b5d@G29f7@current-precompiled-library-loader G29f7@current-precompiled-library-loader) (set! G2b5c@G29f5@serialize-all G29f5@serialize-all) (set! G2b5b@G29f3@file-locator G29f3@file-locator) (set! G2b5a@G29f1@library-name->file-name G29f1@library-name->file-name) (set! G2b59@G29ef@library-extensions G29ef@library-extensions) (set! G2b58@G29ed@library-path G29ed@library-path) (set! G2b57@G29eb@find-library-by G29eb@find-library-by) (set! G2b56@G29e9@find-dependencies G29e9@find-dependencies) (set! G2b55@G29e7@rp G29e7@rp) (set! G2b54@G29e5@set-library-source-file-name! G29e5@set-library-source-file-name!) (set! G2b53@G29e3@set-library-visible?! G29e3@set-library-visible?!) (set! G2b52@G29e1@set-library-invoke-code! G29e1@set-library-invoke-code!) (set! G2b51@G29df@set-library-visit-code! G29df@set-library-visit-code!) (set! G2b50@G29dd@set-library-invoke-state! G29dd@set-library-invoke-state!) (set! G2b4f@G29db@set-library-visit-state! G29db@set-library-visit-state!) (set! G2b4e@G29d9@set-library-env! G29d9@set-library-env!) (set! G2b4d@G29d7@set-library-subst! G29d7@set-library-subst!) (set! G2b4c@G29d5@set-library-inv*! G29d5@set-library-inv*!) (set! G2b4b@G29d3@set-library-vis*! G29d3@set-library-vis*!) (set! G2b4a@G29d1@set-library-imp*! G29d1@set-library-imp*!) (set! G2b49@G29cf@set-library-version! G29cf@set-library-version!) (set! G2b48@G29cd@set-library-name! G29cd@set-library-name!) (set! G2b47@G29cb@set-library-id! G29cb@set-library-id!) (set! G2b46@G29c9@library-source-file-name G29c9@library-source-file-name) (set! G2b45@G29c7@library-visible? G29c7@library-visible?) (set! G2b44@G29c5@library-invoke-code G29c5@library-invoke-code) (set! G2b43@G29c3@library-visit-code G29c3@library-visit-code) (set! G2b42@G29c1@library-invoke-state G29c1@library-invoke-state) (set! G2b41@G29bf@library-visit-state G29bf@library-visit-state) (set! G2b40@G29bd@library-env G29bd@library-env) (set! G2b3f@G29bb@library-subst G29bb@library-subst) (set! G2b3e@G29b9@library-inv* G29b9@library-inv*) (set! G2b3d@G29b7@library-vis* G29b7@library-vis*) (set! G2b3c@G29b5@library-imp* G29b5@library-imp*) (set! G2b3b@G29b3@library-version G29b3@library-version) (set! G2b3a@G29b1@library-name G29b1@library-name) (set! G2b39@G29af@library-id G29af@library-id) (set! G2b38@G29ad@make-library G29ad@make-library) (set! G2b37@G29ab@library? G29ab@library?) (set! G2b36@G29a8@G29a0 G29a8@G29a0) (set! G2b35@G29a6@G29a1 G29a6@G29a1) (set! G2b34@G29a4@G299f G29a4@G299f) (set! G2b33@G299e@current-library-collection G299e@current-library-collection) (set! G2b32@G299c@make-collection G299c@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b71@build-global-define G2beb@build-lambda G2bed@build-case-lambda G2bef@build-let G2c21@build-sequence G2c23@build-void G2c25@build-letrec G2c27@build-letrec* G2c29@build-library-letrec* G2c2b@build-receive) (begin (set! G2b71@build-global-define (lambda (G2c2c@x) (G2c23@build-void))) (set! G2beb@build-lambda (lambda (G2c2e@ae G2c2f@vars G2c30@exp) (list 'lambda G2c2f@vars G2c30@exp))) (set! G2bed@build-case-lambda (lambda (G2c34@ae G2c35@vars* G2c36@exp*) ((lambda (G2c3b@build-error G2c3d@build-pred G2c3f@build-apply G2c41@expand-case-lambda) (begin (set! G2c3b@build-error (lambda (G2c70@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c3d@build-pred (lambda (G2c5a@ae G2c5b@n G2c5c@vars) (call-with-values (lambda () ((letrec ((G2c62@f (lambda (G2c64@vars G2c65@count) (if (pair? G2c64@vars) (G2c62@f (cdr G2c64@vars) (+ G2c65@count '1)) (if (null? G2c64@vars) (values G2c65@count '=) (values G2c65@count '>=)))))) G2c62@f) G2c5c@vars '0)) (lambda (G2c68@G2c60 G2c69@G2c61) ((lambda (G2c6c@pred G2c6d@count) (list (list 'primitive G2c6c@pred) G2c5b@n (list 'quote G2c6d@count))) G2c69@G2c61 G2c68@G2c60))))) (set! G2c3f@build-apply (lambda (G2c52@ae G2c53@g G2c54@vars G2c55@exp) (list '(primitive apply) (G2beb@build-lambda G2c52@ae G2c54@vars G2c55@exp) G2c53@g))) (set! G2c41@expand-case-lambda (lambda (G2c42@ae G2c43@vars G2c44@exp*) ((lambda (G2c48@g G2c49@n) (list 'lambda G2c48@g (G2bef@build-let G2c42@ae (list G2c49@n) (list (list '(primitive length) G2c48@g)) ((letrec ((G2c4c@f (lambda (G2c4e@vars* G2c4f@exp*) (if (null? G2c4e@vars*) (G2c3b@build-error G2c42@ae) (list 'if (G2c3d@build-pred G2c42@ae G2c49@n (car G2c4e@vars*)) (G2c3f@build-apply G2c42@ae G2c48@g (car G2c4e@vars*) (car G2c4f@exp*)) (G2c4c@f (cdr G2c4e@vars*) (cdr G2c4f@exp*))))))) G2c4c@f) G2c35@vars* G2c44@exp*)))) (gensym) (gensym)))) (if (= (length G2c36@exp*) '1) (G2beb@build-lambda G2c34@ae (car G2c35@vars*) (car G2c36@exp*)) (G2c41@expand-case-lambda G2c34@ae G2c35@vars* G2c36@exp*)))) '#f '#f '#f '#f))) (set! G2bef@build-let (lambda (G2c72@ae G2c73@lhs* G2c74@rhs* G2c75@body) (cons (G2beb@build-lambda G2c72@ae G2c73@lhs* G2c75@body) G2c74@rhs*))) (set! G2c21@build-sequence (lambda (G2c7a@ae G2c7b@exps) ((letrec ((G2c7e@loop (lambda (G2c80@exps) (if (null? (cdr G2c80@exps)) (car G2c80@exps) (if (equal? (car G2c80@exps) (G2c23@build-void)) (G2c7e@loop (cdr G2c80@exps)) (cons 'begin G2c80@exps)))))) G2c7e@loop) G2c7b@exps))) (set! G2c23@build-void (lambda () '((primitive void)))) (set! G2c25@build-letrec (lambda (G2c82@ae G2c83@vars G2c84@val-exps G2c85@body-exp) (if (null? G2c83@vars) G2c85@body-exp (list 'letrec (map list G2c83@vars G2c84@val-exps) G2c85@body-exp)))) (set! G2c27@build-letrec* (lambda (G2c8a@ae G2c8b@vars G2c8c@val-exps G2c8d@body-exp) (if (null? G2c8b@vars) G2c8d@body-exp (G2bef@build-let G2c8a@ae G2c8b@vars (map (lambda (G2c92@x) (list 'quote '#f)) G2c8b@vars) (G2c21@build-sequence G2c8a@ae (append (map (lambda (G2c94@lhs G2c95@rhs) (list 'set! G2c94@lhs G2c95@rhs)) G2c8b@vars G2c8c@val-exps) (list G2c8d@body-exp))))))) (set! G2c29@build-library-letrec* (lambda (G2c98@ae G2c99@name G2c9a@vars G2c9b@locs G2c9c@val-exps G2c9d@body-exp) (list 'library-letrec* G2c99@name (map list G2c9a@vars G2c9b@locs G2c9c@val-exps) G2c9d@body-exp))) (set! G2c2b@build-receive (lambda (G2ca4@ae G2ca5@vars G2ca6@producer G2ca7@body*) (begin (display '"************** in ") (cons 'receive (cons G2ca5@vars (cons G2ca6@producer G2ca7@body*)))))) (begin (set! G2cb5@G2c2b@build-receive G2c2b@build-receive) (set! G2cb4@G2c29@build-library-letrec* G2c29@build-library-letrec*) (set! G2cb3@G2c27@build-letrec* G2c27@build-letrec*) (set! G2cb2@G2c25@build-letrec G2c25@build-letrec) (set! G2cb1@G2c23@build-void G2c23@build-void) (set! G2cb0@G2c21@build-sequence G2c21@build-sequence) (set! G2caf@G2bef@build-let G2bef@build-let) (set! G2cae@G2bed@build-case-lambda G2bed@build-case-lambda) (set! G2cad@G2beb@build-lambda G2beb@build-lambda) (set! G2cac@G2b71@build-global-define G2b71@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cc4@set-cons G2cc6@set-union G2ccb@top-mark* G2ccd@top-marked? G2ccf@gen-lexical G2cd1@gen-global G2cd3@gen-label G2cd5@gen-top-level-label G2cd7@gen-define-label+loc G2cd9@gen-define-label G2cdf@G2cda G2ce1@G2cdc G2ce3@G2cdb G2ce6@rib? G2ce8@make-rib G2cea@rib-sym* G2cec@rib-mark** G2cee@rib-label* G2cf0@rib-sealed/freq G2cf2@rib-cache G2cf4@set-rib-sym*! G2cf6@set-rib-mark**! G2cf8@set-rib-label*! G2cfa@set-rib-sealed/freq! G2cfc@set-rib-cache! G2cfe@make-empty-rib G2d00@make-cache-rib G2d02@find-label G2d04@extend-rib! G2d06@extend-rib/nc! G2d08@make-rib-map G2d0a@seal-rib! G2d0c@unseal-rib! G2d0e@make-full-rib G2d14@G2d0f G2d16@G2d11 G2d18@G2d10 G2d1b@stx? G2d1d@make-stx G2d1f@stx-expr G2d21@stx-mark* G2d23@stx-subst* G2d25@stx-ae* G2d27@set-stx-expr! G2d29@set-stx-mark*! G2d2b@set-stx-subst*! G2d2d@set-stx-ae*! G2d2f@rp G2d31@datum->stx G2d33@gen-mark G2d35@anti-mark G2d37@anti-mark? G2d39@join-wraps G2d3b@mkstx G2d3d@add-mark G2d3f@add-subst G2d41@syntax-kind? G2d43@syntax-vector->list G2d45@syntax-pair? G2d47@syntax-vector? G2d49@syntax-null? G2d4b@syntax-list? G2d4d@syntax-car G2d4f@syntax-cdr G2d51@syntax->list G2d53@id? G2d55@id->sym G2d57@same-marks? G2d59@bound-id=? G2d5b@free-id=? G2d5d@valid-bound-ids? G2d5f@distinct-bound-ids? G2d61@bound-id-member? G2d63@self-evaluating? G2d65@strip-annotations G2d67@strip G2d69@stx->datum G2d6b@same-marks*? G2d6d@id->label G2d6f@id->real-label G2d71@label->binding G2d73@make-binding G2d75@binding-type G2d77@binding-value G2d79@raise-unbound-error G2d7b@syntax-type G2d8b@sanitize-binding G2d8d@make-variable-transformer G2d8f@variable-transformer? G2d91@variable-transformer-procedure G2d93@make-eval-transformer G2ed6@parse-define G2ed8@parse-define-syntax G2eda@scheme-stx-hashtable G2edc@scheme-stx G2ede@lexical-var G2ee0@lexical-mutable? G2ee2@set-lexical-mutable! G2ee4@add-lexical G2ee6@add-lexicals G2ee8@letrec-helper G2eea@letrec-transformer G2eec@letrec*-transformer G2eee@fluid-let-syntax-transformer G2ef0@type-descriptor-transformer G2ef2@record-type-descriptor-transformer G2ef4@record-constructor-descriptor-transformer G2ef6@when-macro G2ef8@unless-macro G2efa@if-transformer G2efc@and-transformer G2efe@or-transformer G2f00@case-macro G2f02@quote-transformer G2f04@case-lambda-transformer G2f06@lambda-transformer G2f08@bless G2f0a@with-syntax-macro G2f0c@invalid-fmls-error G2f0e@let-macro G2f10@let-values-macro G2f12@let*-values-macro G2f14@trace-lambda-macro G2f16@trace-define-macro G2f18@trace-define-syntax-macro G2f1a@trace-let/rec-syntax G2f1c@trace-let-syntax-macro G2f1e@trace-letrec-syntax-macro G2f20@guard-macro G2f22@define-enumeration-macro G2f24@time-macro G2f26@delay-macro G2f28@assert-macro G2f2a@endianness-macro G2f2c@identifier-syntax-macro G2f2e@do-macro G2f30@let*-macro G2f32@or-macro G2f34@and-macro G2f36@cond-macro G2f38@do-include G2f3a@include-macro G2f3c@include-into-macro G2f3e@syntax-rules-macro G2f40@quasiquote-macro G2f42@quasisyntax-macro G2f44@define-struct-macro G2f46@define-record-type-macro G2f48@define-condition-type-macro G2f4a@incorrect-usage-macro G2f4c@parameterize-macro G2f4e@foreign-call-transformer G2f50@convert-pattern G2f52@syntax-dispatch G2f54@ellipsis? G2f56@underscore? G2f58@verify-literals G2f5a@syntax-case-transformer G2f5c@ellipsis-map G2f5e@syntax-transformer G2f60@core-macro-transformer G2f62@file-options-macro G2f64@symbol-macro G2f66@macro-transformer G2f68@local-macro-transformer G2f6a@do-macro-call G2f6c@chi-macro G2f6e@chi-local-macro G2f70@chi-global-macro G2f72@chi-expr* G2f74@chi-application G2f76@chi-expr G2f78@chi-set! G2f7a@verify-formals G2f7c@chi-lambda-clause G2f7e@chi-lambda-clause* G2f80@chi-defun G2f82@chi-rhs G2f84@expand-interaction-rhs*/init* G2f86@chi-rhs* G2f88@find-bound=? G2f8a@find-dups G2f8c@chi-internal G2f8e@parse-module G2f94@G2f8f G2f96@G2f91 G2f98@G2f90 G2f9b@module-interface? G2f9d@make-module-interface G2f9f@module-interface-first-mark G2fa1@module-interface-exp-id-vec G2fa3@module-interface-exp-lab-vec G2fa5@set-module-interface-first-mark! G2fa7@set-module-interface-exp-id-vec! G2fa9@set-module-interface-exp-lab-vec! G2fab@module-interface-exp-id* G2fad@chi-internal-module G2faf@chi-body* G2fb1@expand-transformer G2fb3@parse-exports G2fb5@parse-library-name G2fb7@parse-library G2fb9@parse-import-spec* G2fbb@make-top-rib G2fbd@make-collector G2fbf@inv-collector G2fc1@vis-collector G2fc3@imp-collector G2fc5@chi-library-internal G2fc7@chi-interaction-expr G2fc9@library-body-expander G2fcb@core-library-expander G2fcd@parse-top-level-program G2fcf@top-level-expander G2fd5@G2fd0 G2fd7@G2fd2 G2fd9@G2fd1 G2fdc@env? G2fde@make-env G2fe0@env-names G2fe2@env-labels G2fe4@env-itc G2fe6@set-env-names! G2fe8@set-env-labels! G2fea@set-env-itc! G2fec@rp G2ff2@G2fed G2ff4@G2fef G2ff6@G2fee G2ff9@interaction-env? G2ffb@make-interaction-env G2ffd@interaction-env-rib G2fff@interaction-env-r G3001@interaction-env-locs G3003@set-interaction-env-rib! G3005@set-interaction-env-r! G3007@set-interaction-env-locs! G3009@rp G300b@interaction-environment-symbols G300d@environment-bindings G300f@parse-binding G3011@environment? G3013@environment-symbols G3015@environment G3017@null-environment G3019@scheme-report-environment G301b@expand G301d@eval G301f@library-expander G3021@boot-library-expand G3023@rev-map-append G3025@build-exports G3027@make-export-subst G3029@make-export-env/macros G302b@generate-temporaries G302d@free-identifier=? G302f@bound-identifier=? G3031@make-source-condition G3033@extract-position-condition G3035@expression-position G3037@assertion-error G3039@syntax-error G303b@syntax-violation* G303d@syntax-violation G303f@identifier? G3041@datum->syntax G3043@syntax->datum G3045@compile-r6rs-top-level G3047@pre-compile-r6rs-top-level G3049@interaction-environment G304b@top-level-context) (begin (set! G2cc4@set-cons (lambda (G304c@x G304d@ls) (if (memq G304c@x G304d@ls) G304d@ls (cons G304c@x G304d@ls)))) (set! G2cc6@set-union (lambda (G3050@ls1 G3051@ls2) (if (null? G3050@ls1) G3051@ls2 (if (memq (car G3050@ls1) G3051@ls2) (G2cc6@set-union (cdr G3050@ls1) G3051@ls2) (cons (car G3050@ls1) (G2cc6@set-union (cdr G3050@ls1) G3051@ls2)))))) (set! G2ccb@top-mark* '(top)) (set! G2ccd@top-marked? (lambda (G3054@m*) (memq 'top G3054@m*))) (set! G2ccf@gen-lexical (lambda (G3056@sym) (if (symbol? G3056@sym) (gensym G3056@sym) (if (G2d1b@stx? G3056@sym) (G2ccf@gen-lexical (G2d55@id->sym G3056@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3056@sym))))) (set! G2cd1@gen-global (lambda (G3058@x) (G2ccf@gen-lexical G3058@x))) (set! G2cd3@gen-label (lambda (G305a@_) (gensym))) (set! G2cd5@gen-top-level-label (lambda (G305c@id G305d@rib) ((lambda (G3061@find) (begin (set! G3061@find (lambda (G306c@sym G306d@mark* G306e@sym* G306f@mark** G3070@label*) (and (pair? G306e@sym*) (if (and (eq? G306c@sym (car G306e@sym*)) (G2d57@same-marks? G306d@mark* (car G306f@mark**))) (car G3070@label*) (G3061@find G306c@sym G306d@mark* (cdr G306e@sym*) (cdr G306f@mark**) (cdr G3070@label*)))))) ((lambda (G3062@sym G3063@mark*) ((lambda (G3066@sym*) ((lambda (G3068@t) (if G3068@t ((lambda (G306a@label) (if (G2b69@G2a0f@imported-label->binding G306a@label) (gensym) G306a@label)) G3068@t) (gensym))) (and (memq G3062@sym (G2cea@rib-sym* G305d@rib)) (G3061@find G3062@sym G3063@mark* G3066@sym* (G2cec@rib-mark** G305d@rib) (G2cee@rib-label* G305d@rib))))) (G2cea@rib-sym* G305d@rib))) (G2d55@id->sym G305c@id) (G2d21@stx-mark* G305c@id)))) '#f))) (set! G2cd7@gen-define-label+loc (lambda (G3076@id G3077@rib) ((lambda (G307a@t) (if G307a@t ((lambda (G307c@env) ((lambda (G307e@label G307f@locs) (values G307e@label ((lambda (G3082@t) (if G3082@t (cdr G3082@t) ((lambda (G3084@loc) (begin (G3007@set-interaction-env-locs! G307c@env (cons (cons G307e@label G3084@loc) G307f@locs)) G3084@loc)) (G2ccf@gen-lexical G3076@id)))) (assq G307e@label G307f@locs)))) (G2cd5@gen-top-level-label G3076@id G3077@rib) (G3001@interaction-env-locs G307c@env))) G307a@t) (values (gensym) (G2ccf@gen-lexical G3076@id)))) (G304b@top-level-context)))) (set! G2cd9@gen-define-label (lambda (G3086@id G3087@rib) (if (G304b@top-level-context) (G2cd5@gen-top-level-label G3086@id G3087@rib) (gensym)))) (set! G2cdf@G2cda (make-record-type-descriptor 'rib '#f 'G2cdd '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ce1@G2cdc '#f) (set! G2ce3@G2cdb (make-record-constructor-descriptor G2cdf@G2cda '#f G2ce1@G2cdc)) (set! G2ce6@rib? (record-predicate G2cdf@G2cda)) (set! G2ce8@make-rib (record-constructor G2ce3@G2cdb)) (set! G2cea@rib-sym* (record-accessor G2cdf@G2cda '0)) (set! G2cec@rib-mark** (record-accessor G2cdf@G2cda '1)) (set! G2cee@rib-label* (record-accessor G2cdf@G2cda '2)) (set! G2cf0@rib-sealed/freq (record-accessor G2cdf@G2cda '3)) (set! G2cf2@rib-cache (record-accessor G2cdf@G2cda '4)) (set! G2cf4@set-rib-sym*! (record-mutator G2cdf@G2cda '0)) (set! G2cf6@set-rib-mark**! (record-mutator G2cdf@G2cda '1)) (set! G2cf8@set-rib-label*! (record-mutator G2cdf@G2cda '2)) (set! G2cfa@set-rib-sealed/freq! (record-mutator G2cdf@G2cda '3)) (set! G2cfc@set-rib-cache! (record-mutator G2cdf@G2cda '4)) (set! G2cfe@make-empty-rib (lambda () (G2ce8@make-rib '() '() '() '#f '#f))) (set! G2d00@make-cache-rib (lambda () (G2ce8@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d02@find-label (lambda (G308a@rib G308b@sym G308c@mark*) ((lambda (G3090@ht) (and G3090@ht ((lambda (G3092@cv) ((lambda (G3094@t) (if G3094@t (cdr G3094@t) '#f)) (and G3092@cv (assp (lambda (G3096@m) (G2d57@same-marks? G308c@mark* G3096@m)) G3092@cv)))) (hashtable-ref G3090@ht G308b@sym '#f)))) (G2cf2@rib-cache G308a@rib)))) (set! G2d04@extend-rib! (lambda (G3098@rib G3099@id G309a@label) ((lambda (G309f@find) (begin (set! G309f@find (lambda (G30b0@sym G30b1@mark* G30b2@sym* G30b3@mark** G30b4@label*) (and (pair? G30b2@sym*) (if (and (eq? G30b0@sym (car G30b2@sym*)) (G2d57@same-marks? G30b1@mark* (car G30b3@mark**))) G30b4@label* (G309f@find G30b0@sym G30b1@mark* (cdr G30b2@sym*) (cdr G30b3@mark**) (cdr G30b4@label*)))))) (begin (if (G2cf0@rib-sealed/freq G3098@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G3098@rib) (void)) ((lambda (G30a0@sym G30a1@mark*) ((lambda (G30a4@sym*) ((lambda (G30a6@t) (if G30a6@t ((lambda (G30a8@p) (if (not (eq? G309a@label G30a8@p)) (G303d@syntax-violation '#f '"multiple definitions of identifier" G3099@id) (void))) G30a6@t) ((lambda (G30aa@t) (if G30aa@t ((lambda (G30ac@p) (if (not (eq? G309a@label (car G30ac@p))) (if (G304b@top-level-context) (set-car! G30ac@p G309a@label) (G303d@syntax-violation '#f '"multiple definitions of identifier" G3099@id)) (void))) G30aa@t) (begin (if (G2cf2@rib-cache G3098@rib) (hashtable-update! (G2cf2@rib-cache G3098@rib) G30a0@sym (lambda (G30ae@e) (cons (cons G30a1@mark* G309a@label) G30ae@e)) '()) (void)) (G2cf4@set-rib-sym*! G3098@rib (cons G30a0@sym G30a4@sym*)) (G2cf6@set-rib-mark**! G3098@rib (cons G30a1@mark* (G2cec@rib-mark** G3098@rib))) (G2cf8@set-rib-label*! G3098@rib (cons G309a@label (G2cee@rib-label* G3098@rib)))))) (and (memq G30a0@sym (G2cea@rib-sym* G3098@rib)) (G309f@find G30a0@sym G30a1@mark* G30a4@sym* (G2cec@rib-mark** G3098@rib) (G2cee@rib-label* G3098@rib)))))) (G2d02@find-label G3098@rib G30a0@sym G30a1@mark*))) (G2cea@rib-sym* G3098@rib))) (G2d55@id->sym G3099@id) (G2d21@stx-mark* G3099@id))))) '#f))) (set! G2d06@extend-rib/nc! (lambda (G30ba@rib G30bb@id G30bc@label) ((lambda (G30c0@sym G30c1@mark*) ((lambda (G30c4@sym*) (begin (if (G2cf2@rib-cache G30ba@rib) (hashtable-update! (G2cf2@rib-cache G30ba@rib) G30c0@sym (lambda (G30c6@e) (cons (cons G30c1@mark* G30bc@label) G30c6@e)) '()) (void)) (G2cf4@set-rib-sym*! G30ba@rib (cons G30c0@sym G30c4@sym*)) (G2cf6@set-rib-mark**! G30ba@rib (cons G30c1@mark* (G2cec@rib-mark** G30ba@rib))) (G2cf8@set-rib-label*! G30ba@rib (cons G30bc@label (G2cee@rib-label* G30ba@rib))))) (G2cea@rib-sym* G30ba@rib))) (G2d55@id->sym G30bb@id) (G2d21@stx-mark* G30bb@id)))) (set! G2d08@make-rib-map (lambda (G30c8@sym*) ((lambda (G30ca@ht) ((letrec ((G30cc@f (lambda (G30ce@i G30cf@sym*) (if (null? G30cf@sym*) G30ca@ht (begin (hashtable-update! G30ca@ht (car G30cf@sym*) (lambda (G30d2@x) (cons G30ce@i G30d2@x)) '()) (G30cc@f (+ G30ce@i '1) (cdr G30cf@sym*))))))) G30cc@f) '0 G30c8@sym*)) (make-eq-hashtable)))) (set! G2d0a@seal-rib! (lambda (G30d4@rib) ((lambda (G30d6@sym*) (if (not (null? G30d6@sym*)) (begin (G2cf4@set-rib-sym*! G30d4@rib (list->vector G30d6@sym*)) (G2cf6@set-rib-mark**! G30d4@rib (list->vector (G2cec@rib-mark** G30d4@rib))) (G2cf8@set-rib-label*! G30d4@rib (list->vector (G2cee@rib-label* G30d4@rib))) (G2cfa@set-rib-sealed/freq! G30d4@rib (G2d08@make-rib-map G30d6@sym*))) (void))) (G2cea@rib-sym* G30d4@rib)))) (set! G2d0c@unseal-rib! (lambda (G30d8@rib) (if (G2cf0@rib-sealed/freq G30d8@rib) (begin (G2cfa@set-rib-sealed/freq! G30d8@rib '#f) (G2cf4@set-rib-sym*! G30d8@rib (vector->list (G2cea@rib-sym* G30d8@rib))) (G2cf6@set-rib-mark**! G30d8@rib (vector->list (G2cec@rib-mark** G30d8@rib))) (G2cf8@set-rib-label*! G30d8@rib (vector->list (G2cee@rib-label* G30d8@rib)))) (void)))) (set! G2d0e@make-full-rib (lambda (G30da@id* G30db@label*) ((lambda (G30de@r) (begin (G2d0a@seal-rib! G30de@r) G30de@r)) (G2ce8@make-rib (map G2d55@id->sym G30da@id*) (map G2d21@stx-mark* G30da@id*) G30db@label* '#f '#f)))) (set! G2d14@G2d0f (make-record-type-descriptor 'stx '#f 'G2d12 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d16@G2d11 '#f) (set! G2d18@G2d10 (make-record-constructor-descriptor G2d14@G2d0f '#f G2d16@G2d11)) (set! G2d1b@stx? (record-predicate G2d14@G2d0f)) (set! G2d1d@make-stx (record-constructor G2d18@G2d10)) (set! G2d1f@stx-expr (record-accessor G2d14@G2d0f '0)) (set! G2d21@stx-mark* (record-accessor G2d14@G2d0f '1)) (set! G2d23@stx-subst* (record-accessor G2d14@G2d0f '2)) (set! G2d25@stx-ae* (record-accessor G2d14@G2d0f '3)) (set! G2d27@set-stx-expr! (record-mutator G2d14@G2d0f '0)) (set! G2d29@set-stx-mark*! (record-mutator G2d14@G2d0f '1)) (set! G2d2b@set-stx-subst*! (record-mutator G2d14@G2d0f '2)) (set! G2d2d@set-stx-ae*! (record-mutator G2d14@G2d0f '3)) (set! G2d2f@rp (G28ec@G281f@make-record-printer 'stx (lambda (G30e0@x G30e1@p G30e2@wr) (begin (display '"#<syntax " G30e1@p) (write (G2d69@stx->datum G30e0@x) G30e1@p) ((lambda (G30e6@expr) (if (G28e4@G280f@annotation? G30e6@expr) ((lambda (G30e8@src) (if (pair? G30e8@src) (begin (display '" [" G30e1@p) (display (cdr G30e8@src) G30e1@p) (display '" of " G30e1@p) (display (car G30e8@src) G30e1@p) (display '"]" G30e1@p)) (void))) (G28e5@G2811@annotation-source G30e6@expr)) (void))) (G2d1f@stx-expr G30e0@x)) (display '">" G30e1@p))))) (set! G2d31@datum->stx (lambda (G30ea@id G30eb@datum) (G2d1d@make-stx G30eb@datum (G2d21@stx-mark* G30ea@id) (G2d23@stx-subst* G30ea@id) (G2d25@stx-ae* G30ea@id)))) (set! G2d33@gen-mark (lambda () (string '#\m))) (set! G2d35@anti-mark '#f) (set! G2d37@anti-mark? not) (set! G2d39@join-wraps (lambda (G30ee@m1* G30ef@s1* G30f0@ae1* G30f1@e) ((lambda (G30f7@cancel) (begin (set! G30f7@cancel (lambda (G30fe@ls1 G30ff@ls2) ((letrec ((G3102@f (lambda (G3104@x G3105@ls1) (if (null? G3105@ls1) (cdr G30ff@ls2) (cons G3104@x (G3102@f (car G3105@ls1) (cdr G3105@ls1))))))) G3102@f) (car G30fe@ls1) (cdr G30fe@ls1)))) ((lambda (G30f8@m2* G30f9@s2* G30fa@ae2*) (if (and (not (null? G30ee@m1*)) (not (null? G30f8@m2*)) (G2d37@anti-mark? (car G30f8@m2*))) (values (G30f7@cancel G30ee@m1* G30f8@m2*) (G30f7@cancel G30ef@s1* G30f9@s2*) (G30f7@cancel G30f0@ae1* G30fa@ae2*)) (values (append G30ee@m1* G30f8@m2*) (append G30ef@s1* G30f9@s2*) (append G30f0@ae1* G30fa@ae2*)))) (G2d21@stx-mark* G30f1@e) (G2d23@stx-subst* G30f1@e) (G2d25@stx-ae* G30f1@e)))) '#f))) (set! G2d3b@mkstx (lambda (G3108@e G3109@m* G310a@s* G310b@ae*) (if (and (G2d1b@stx? G3108@e) (not (G2ccd@top-marked? G3109@m*))) (call-with-values (lambda () (G2d39@join-wraps G3109@m* G310a@s* G310b@ae* G3108@e)) (lambda (G3113@G3110 G3114@G3111 G3115@G3112) ((lambda (G3119@ae* G311a@s* G311b@m*) (G2d1d@make-stx (G2d1f@stx-expr G3108@e) G311b@m* G311a@s* G3119@ae*)) G3115@G3112 G3114@G3111 G3113@G3110))) (G2d1d@make-stx G3108@e G3109@m* G310a@s* G310b@ae*)))) (set! G2d3d@add-mark (lambda (G311f@m G3120@e G3121@ae) (G2d3b@mkstx G3120@e (list G311f@m) '(shift) (list G3121@ae)))) (set! G2d3f@add-subst (lambda (G3125@subst G3126@e) (G2d3b@mkstx G3126@e '() (list G3125@subst) '()))) (set! G2d41@syntax-kind? (lambda (G3129@x G312a@p?) (if (G2d1b@stx? G3129@x) (G2d41@syntax-kind? (G2d1f@stx-expr G3129@x) G312a@p?) (if (G28e4@G280f@annotation? G3129@x) (G2d41@syntax-kind? (G28e6@G2813@annotation-expression G3129@x) G312a@p?) (G312a@p? G3129@x))))) (set! G2d43@syntax-vector->list (lambda (G312d@x) (if (G2d1b@stx? G312d@x) ((lambda (G312f@ls G3130@m* G3131@s* G3132@ae*) (map (lambda (G3137@x) (G2d3b@mkstx G3137@x G3130@m* G3131@s* G3132@ae*)) G312f@ls)) (G2d43@syntax-vector->list (G2d1f@stx-expr G312d@x)) (G2d21@stx-mark* G312d@x) (G2d23@stx-subst* G312d@x) (G2d25@stx-ae* G312d@x)) (if (G28e4@G280f@annotation? G312d@x) (G2d43@syntax-vector->list (G28e6@G2813@annotation-expression G312d@x)) (if (vector? G312d@x) (vector->list G312d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G312d@x)))))) (set! G2d45@syntax-pair? (lambda (G3139@x) (G2d41@syntax-kind? G3139@x pair?))) (set! G2d47@syntax-vector? (lambda (G313b@x) (G2d41@syntax-kind? G313b@x vector?))) (set! G2d49@syntax-null? (lambda (G313d@x) (G2d41@syntax-kind? G313d@x null?))) (set! G2d4b@syntax-list? (lambda (G313f@x) (or (G2d49@syntax-null? G313f@x) (and (G2d45@syntax-pair? G313f@x) (G2d4b@syntax-list? (G2d4f@syntax-cdr G313f@x)))))) (set! G2d4d@syntax-car (lambda (G3141@x) (if (G2d1b@stx? G3141@x) (G2d3b@mkstx (G2d4d@syntax-car (G2d1f@stx-expr G3141@x)) (G2d21@stx-mark* G3141@x) (G2d23@stx-subst* G3141@x) (G2d25@stx-ae* G3141@x)) (if (G28e4@G280f@annotation? G3141@x) (G2d4d@syntax-car (G28e6@G2813@annotation-expression G3141@x)) (if (pair? G3141@x) (car G3141@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3141@x)))))) (set! G2d4f@syntax-cdr (lambda (G3143@x) (if (G2d1b@stx? G3143@x) (G2d3b@mkstx (G2d4f@syntax-cdr (G2d1f@stx-expr G3143@x)) (G2d21@stx-mark* G3143@x) (G2d23@stx-subst* G3143@x) (G2d25@stx-ae* G3143@x)) (if (G28e4@G280f@annotation? G3143@x) (G2d4f@syntax-cdr (G28e6@G2813@annotation-expression G3143@x)) (if (pair? G3143@x) (cdr G3143@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3143@x)))))) (set! G2d51@syntax->list (lambda (G3145@x) (if (G2d45@syntax-pair? G3145@x) (cons (G2d4d@syntax-car G3145@x) (G2d51@syntax->list (G2d4f@syntax-cdr G3145@x))) (if (G2d49@syntax-null? G3145@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3145@x))))) (set! G2d53@id? (lambda (G3147@x) (and (G2d1b@stx? G3147@x) ((lambda (G3149@expr) (symbol? (if (G28e4@G280f@annotation? G3149@expr) (G28e3@G280d@annotation-stripped G3149@expr) G3149@expr))) (G2d1f@stx-expr G3147@x))))) (set! G2d55@id->sym (lambda (G314b@x) (begin (if (not (G2d1b@stx? G314b@x)) (error 'id->sym '"BUG in ikarus: not an id" G314b@x) (void)) ((lambda (G314d@expr) ((lambda (G314f@sym) (if (symbol? G314f@sym) G314f@sym (error 'id->sym '"BUG in ikarus: not an id" G314b@x))) (if (G28e4@G280f@annotation? G314d@expr) (G28e3@G280d@annotation-stripped G314d@expr) G314d@expr))) (G2d1f@stx-expr G314b@x))))) (set! G2d57@same-marks? (lambda (G3151@x G3152@y) (or (and (null? G3151@x) (null? G3152@y)) (and (pair? G3151@x) (pair? G3152@y) (eq? (car G3151@x) (car G3152@y)) (G2d57@same-marks? (cdr G3151@x) (cdr G3152@y)))))) (set! G2d59@bound-id=? (lambda (G3155@x G3156@y) (and (eq? (G2d55@id->sym G3155@x) (G2d55@id->sym G3156@y)) (G2d57@same-marks? (G2d21@stx-mark* G3155@x) (G2d21@stx-mark* G3156@y))))) (set! G2d5b@free-id=? (lambda (G3159@i G315a@j) ((lambda (G315d@t0 G315e@t1) (if (or G315d@t0 G315e@t1) (eq? G315d@t0 G315e@t1) (eq? (G2d55@id->sym G3159@i) (G2d55@id->sym G315a@j)))) (G2d6f@id->real-label G3159@i) (G2d6f@id->real-label G315a@j)))) (set! G2d5d@valid-bound-ids? (lambda (G3161@id*) (and (for-all G2d53@id? G3161@id*) (G2d5f@distinct-bound-ids? G3161@id*)))) (set! G2d5f@distinct-bound-ids? (lambda (G3163@id*) (or (null? G3163@id*) (and (not (G2d61@bound-id-member? (car G3163@id*) (cdr G3163@id*))) (G2d5f@distinct-bound-ids? (cdr G3163@id*)))))) (set! G2d61@bound-id-member? (lambda (G3165@id G3166@id*) (and (pair? G3166@id*) (or (G2d59@bound-id=? G3165@id (car G3166@id*)) (G2d61@bound-id-member? G3165@id (cdr G3166@id*)))))) (set! G2d63@self-evaluating? (lambda (G3169@x) (or (number? G3169@x) (string? G3169@x) (char? G3169@x) (boolean? G3169@x) (regexp? G3169@x) (bytevector? G3169@x)))) (set! G2d65@strip-annotations (lambda (G316b@x) (if (pair? G316b@x) (cons (G2d65@strip-annotations (car G316b@x)) (G2d65@strip-annotations (cdr G316b@x))) (if (vector? G316b@x) (vector-map G2d65@strip-annotations G316b@x) (if (G28e4@G280f@annotation? G316b@x) (G28e3@G280d@annotation-stripped G316b@x) G316b@x))))) (set! G2d67@strip (lambda (G316d@x G316e@m*) (if (G2ccd@top-marked? G316e@m*) (if (or (G28e4@G280f@annotation? G316d@x) (and (pair? G316d@x) (G28e4@G280f@annotation? (car G316d@x))) (and (vector? G316d@x) (> (vector-length G316d@x) '0) (G28e4@G280f@annotation? (vector-ref G316d@x '0)))) (G2d65@strip-annotations G316d@x) G316d@x) ((letrec ((G3171@f (lambda (G3173@x) (if (G2d1b@stx? G3173@x) (G2d67@strip (G2d1f@stx-expr G3173@x) (G2d21@stx-mark* G3173@x)) (if (G28e4@G280f@annotation? G3173@x) (G28e3@G280d@annotation-stripped G3173@x) (if (pair? G3173@x) ((lambda (G3175@a G3176@d) (if (and (eq? G3175@a (car G3173@x)) (eq? G3176@d (cdr G3173@x))) G3173@x (cons G3175@a G3176@d))) (G3171@f (car G3173@x)) (G3171@f (cdr G3173@x))) (if (vector? G3173@x) ((lambda (G3179@old) ((lambda (G317b@new) (if (for-all eq? G3179@old G317b@new) G3173@x (list->vector G317b@new))) (map G3171@f G3179@old))) (vector->list G3173@x)) G3173@x))))))) G3171@f) G316d@x)))) (set! G2d69@stx->datum (lambda (G317d@x) (G2d67@strip G317d@x '()))) (set! G2d6b@same-marks*? (lambda (G317f@mark* G3180@mark** G3181@si) (if (null? G3181@si) '#f (if (G2d57@same-marks? G317f@mark* (vector-ref G3180@mark** (car G3181@si))) (car G3181@si) (G2d6b@same-marks*? G317f@mark* G3180@mark** (cdr G3181@si)))))) (set! G2d6d@id->label (lambda (G3185@id) (or (G2d6f@id->real-label G3185@id) ((lambda (G3187@t) (if G3187@t ((lambda (G3189@env) ((lambda (G318b@rib) (call-with-values (lambda () (G2cd7@gen-define-label+loc G3185@id G318b@rib)) (lambda (G318f@G318d G3190@G318e) ((lambda (G3193@loc_ G3194@lab) (begin (G2d04@extend-rib! G318b@rib G3185@id G3194@lab) G3194@lab)) G3190@G318e G318f@G318d)))) (G2ffd@interaction-env-rib G3189@env))) G3187@t) '#f)) (G304b@top-level-context))))) (set! G2d6f@id->real-label (lambda (G3197@id) ((lambda (G3199@sym) ((letrec ((G319b@search (lambda (G319d@subst* G319e@mark*) (if (null? G319d@subst*) '#f (if (eq? (car G319d@subst*) 'shift) (G319b@search (cdr G319d@subst*) (cdr G319e@mark*)) ((lambda (G31a1@rib) ((lambda (G31a3@t) (if G31a3@t ((lambda (G31a5@ht) ((lambda (G31a7@si) ((lambda (G31a9@i) (if G31a9@i (vector-ref (G2cee@rib-label* G31a1@rib) G31a9@i) (G319b@search (cdr G319d@subst*) G319e@mark*))) (and G31a7@si (G2d6b@same-marks*? G319e@mark* (G2cec@rib-mark** G31a1@rib) (reverse G31a7@si))))) (hashtable-ref G31a5@ht G3199@sym '#f))) G31a3@t) (or (G2d02@find-label G31a1@rib G3199@sym G319e@mark*) ((letrec ((G31ab@f (lambda (G31ad@sym* G31ae@mark** G31af@label*) (if (null? G31ad@sym*) (G319b@search (cdr G319d@subst*) G319e@mark*) (if (and (eq? (car G31ad@sym*) G3199@sym) (G2d57@same-marks? (car G31ae@mark**) G319e@mark*)) (car G31af@label*) (G31ab@f (cdr G31ad@sym*) (cdr G31ae@mark**) (cdr G31af@label*))))))) G31ab@f) (G2cea@rib-sym* G31a1@rib) (G2cec@rib-mark** G31a1@rib) (G2cee@rib-label* G31a1@rib))))) (G2cf0@rib-sealed/freq G31a1@rib))) (car G319d@subst*))))))) G319b@search) (G2d23@stx-subst* G3197@id) (G2d21@stx-mark* G3197@id))) (G2d55@id->sym G3197@id)))) (set! G2d71@label->binding (lambda (G31b3@x G31b4@r) ((lambda (G31b7@t) (if G31b7@t ((lambda (G31b9@b) (if (and (pair? G31b9@b) (eq? (car G31b9@b) '$core-rtd)) (cons '$rtd (map G2f08@bless (cdr G31b9@b))) (if (and (pair? G31b9@b) (eq? (car G31b9@b) 'global-rtd)) ((lambda (G31bb@lib G31bc@loc) (cons '$rtd (symbol-value G31bc@loc))) (cadr G31b9@b) (cddr G31b9@b)) G31b9@b))) G31b7@t) ((lambda (G31bf@t) (if G31bf@t (cdr G31bf@t) ((lambda (G31c1@t) (if G31c1@t ((lambda (G31c3@env) ((lambda (G31c5@t) (if G31c5@t ((lambda (G31c7@p) (cons* 'lexical (cdr G31c7@p) '#f)) G31c5@t) '(displaced-lexical . #f))) (assq G31b3@x (G3001@interaction-env-locs G31c3@env)))) G31c1@t) '(displaced-lexical . #f))) (G304b@top-level-context)))) (assq G31b3@x G31b4@r)))) (G2b69@G2a0f@imported-label->binding G31b3@x)))) (set! G2d73@make-binding cons) (set! G2d75@binding-type car) (set! G2d77@binding-value cdr) (set! G2d79@raise-unbound-error (lambda (G31c9@id) (G303b@syntax-violation* '#f '"unbound identifier" G31c9@id (G4c75@G4abf@make-undefined-violation)))) (set! G2d7b@syntax-type (lambda (G31cb@e G31cc@r) (if (G2d53@id? G31cb@e) ((lambda (G31cf@id) ((lambda (G31d1@label) ((lambda (G31d3@b) ((lambda (G31d5@type) ((lambda () (begin (if (not G31d1@label) (G2d79@raise-unbound-error G31cf@id) (void)) ((lambda (G31d7@t) (if (memv G31d7@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31d5@type (G2d77@binding-value G31d3@b) G31cf@id) (values 'other '#f '#f))) G31d5@type))))) (G2d75@binding-type G31d3@b))) (G2d71@label->binding G31d1@label G31cc@r))) (G2d6d@id->label G31cf@id))) G31cb@e) (if (G2d45@syntax-pair? G31cb@e) ((lambda (G31d9@id) (if (G2d53@id? G31d9@id) ((lambda (G31db@label) ((lambda (G31dd@b) ((lambda (G31df@type) ((lambda () (begin (if (not G31db@label) (G2d79@raise-unbound-error G31d9@id) (void)) ((lambda (G31e1@t) (if (memv G31e1@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31df@type (G2d77@binding-value G31dd@b) G31d9@id) (values 'call '#f '#f))) G31df@type))))) (G2d75@binding-type G31dd@b))) (G2d71@label->binding G31db@label G31cc@r))) (G2d6d@id->label G31d9@id)) (values 'call '#f '#f))) (G2d4d@syntax-car G31cb@e)) ((lambda (G31e3@d) (if (G2d63@self-evaluating? G31e3@d) (values 'constant G31e3@d '#f) (values 'other '#f '#f))) (G2d69@stx->datum G31cb@e)))))) (set! G2d8b@sanitize-binding (lambda (G31e5@x G31e6@src) (if (procedure? G31e5@x) (cons* 'local-macro G31e5@x G31e6@src) (if (and (pair? G31e5@x) (eq? (car G31e5@x) 'macro!) (procedure? (cdr G31e5@x))) (cons* 'local-macro! (cdr G31e5@x) G31e6@src) (if (and (pair? G31e5@x) (eq? (car G31e5@x) '$rtd)) G31e5@x (assertion-violation 'expand '"invalid transformer" G31e5@x)))))) (set! G2d8d@make-variable-transformer (lambda (G31e9@x) (if (procedure? G31e9@x) (cons 'macro! G31e9@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31e9@x)))) (set! G2d8f@variable-transformer? (lambda (G31eb@x) (and (pair? G31eb@x) (eq? (car G31eb@x) 'macro!) (procedure? (cdr G31eb@x))))) (set! G2d91@variable-transformer-procedure (lambda (G31ed@x) (if (G2d8f@variable-transformer? G31ed@x) (cdr G31ed@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31ed@x)))) (set! G2d93@make-eval-transformer (lambda (G31ef@x) (G2d8b@sanitize-binding (eval-core (G2943@G28fb@expanded->core G31ef@x)) G31ef@x))) (set! G2ed6@parse-define (lambda (G31f1@x) ((lambda (G31f3@t) ((lambda (G31f5@ls/false) (if (and G31f5@ls/false (apply (lambda (G31f7@id G31f8@fmls G31f9@b G31fa@b*) (G2d53@id? G31f7@id)) G31f5@ls/false)) (apply (lambda (G31ff@id G3200@fmls G3201@b G3202@b*) (begin (G2f7a@verify-formals G3200@fmls G31f1@x) (values G31ff@id (cons 'defun (cons G3200@fmls (cons G3201@b G3202@b*)))))) G31f5@ls/false) ((lambda (G3207@t) ((lambda (G3209@ls/false) (if (and G3209@ls/false (apply (lambda (G320b@id G320c@val) (G2d53@id? G320b@id)) G3209@ls/false)) (apply (lambda (G320f@id G3210@val) (values G320f@id (cons 'expr G3210@val))) G3209@ls/false) ((lambda (G3213@t) ((lambda (G3215@ls/false) (if (and G3215@ls/false (apply (lambda (G3217@id) (G2d53@id? G3217@id)) G3215@ls/false)) (apply (lambda (G3219@id) (values G3219@id (cons 'expr (G2f08@bless '(void))))) G3215@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3213@t))) (G2f52@syntax-dispatch G3213@t '(_ any)))) G3207@t))) (G2f52@syntax-dispatch G3207@t '(_ any any)))) G31f3@t))) (G2f52@syntax-dispatch G31f3@t '(_ (any . any) any . each-any)))) G31f1@x))) (set! G2ed8@parse-define-syntax (lambda (G321b@x) ((lambda (G321d@t) ((lambda (G321f@ls/false) (if (and G321f@ls/false (apply (lambda (G3221@id G3222@val) (G2d53@id? G3221@id)) G321f@ls/false)) (apply (lambda (G3225@id G3226@val) (values G3225@id G3226@val)) G321f@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G321d@t))) (G2f52@syntax-dispatch G321d@t '(_ any any)))) G321b@x))) (set! G2eda@scheme-stx-hashtable (make-eq-hashtable)) (set! G2edc@scheme-stx (lambda (G3229@sym) (or (hashtable-ref G2eda@scheme-stx-hashtable G3229@sym '#f) ((lambda (G322b@subst) ((lambda (G322d@stx) ((lambda (G322f@stx) ((lambda () (begin (hashtable-set! G2eda@scheme-stx-hashtable G3229@sym G322f@stx) G322f@stx)))) ((lambda (G3231@t) (if G3231@t ((lambda (G3233@x) ((lambda (G3235@name G3236@label) (G2d3f@add-subst (G2ce8@make-rib (list G3235@name) (list G2ccb@top-mark*) (list G3236@label) '#f '#f) G322d@stx)) (car G3233@x) (cdr G3233@x))) G3231@t) G322d@stx)) (assq G3229@sym G322b@subst)))) (G2d1d@make-stx G3229@sym G2ccb@top-mark* '() '()))) (G2b3f@G29bb@library-subst (G2b63@G2a03@find-library-by-name '(psyntax system $all))))))) (set! G2ede@lexical-var car) (set! G2ee0@lexical-mutable? cdr) (set! G2ee2@set-lexical-mutable! set-cdr!) (set! G2ee4@add-lexical (lambda (G3239@lab G323a@lex G323b@r) (cons (cons* G3239@lab 'lexical G323a@lex '#f) G323b@r))) (set! G2ee6@add-lexicals (lambda (G323f@lab* G3240@lex* G3241@r) (if (null? G323f@lab*) G3241@r (G2ee6@add-lexicals (cdr G323f@lab*) (cdr G3240@lex*) (G2ee4@add-lexical (car G323f@lab*) (car G3240@lex*) G3241@r))))) (set! G2ee8@letrec-helper (lambda (G3245@e G3246@r G3247@mr G3248@build) ((lambda (G324d@t) ((lambda (G324f@ls/false) (if G324f@ls/false (apply (lambda (G3251@lhs* G3252@rhs* G3253@b G3254@b*) (if (not (G2d5d@valid-bound-ids? G3251@lhs*)) (G2f0c@invalid-fmls-error G3245@e G3251@lhs*) ((lambda (G3259@lex* G325a@lab*) ((lambda (G325d@rib G325e@r) ((lambda (G3261@body G3262@rhs*) (G3248@build '#f G3259@lex* G3262@rhs* G3261@body)) (G2f8c@chi-internal (G2d3f@add-subst G325d@rib (cons G3253@b G3254@b*)) G325e@r G3247@mr) (G2f72@chi-expr* (map (lambda (G3265@x) (G2d3f@add-subst G325d@rib G3265@x)) G3252@rhs*) G325e@r G3247@mr))) (G2d0e@make-full-rib G3251@lhs* G325a@lab*) (G2ee6@add-lexicals G325a@lab* G3259@lex* G3246@r))) (map G2ccf@gen-lexical G3251@lhs*) (map G2cd3@gen-label G3251@lhs*)))) G324f@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G324d@t))) (G2f52@syntax-dispatch G324d@t '(_ #(each (any any)) any . each-any)))) G3245@e))) (set! G2eea@letrec-transformer (lambda (G3267@e G3268@r G3269@mr) (G2ee8@letrec-helper G3267@e G3268@r G3269@mr G2cb2@G2c25@build-letrec))) (set! G2eec@letrec*-transformer (lambda (G326d@e G326e@r G326f@mr) (G2ee8@letrec-helper G326d@e G326e@r G326f@mr G2cb3@G2c27@build-letrec*))) (set! G2eee@fluid-let-syntax-transformer (lambda (G3273@e G3274@r G3275@mr) ((lambda (G327a@lookup) (begin (set! G327a@lookup (lambda (G328d@x) (or (G2d6d@id->label G328d@x) (G303d@syntax-violation '#f '"unbound identifier" G3273@e G328d@x)))) ((lambda (G327b@t) ((lambda (G327d@ls/false) (if G327d@ls/false (apply (lambda (G327f@lhs* G3280@rhs* G3281@b G3282@b*) (if (not (G2d5d@valid-bound-ids? G327f@lhs*)) (G2f0c@invalid-fmls-error G3273@e G327f@lhs*) ((lambda (G3287@lab* G3288@rhs*) (G2f8c@chi-internal (cons G3281@b G3282@b*) (append (map cons G3287@lab* G3288@rhs*) G3274@r) (append (map cons G3287@lab* G3288@rhs*) G3275@mr))) (map G327a@lookup G327f@lhs*) (map (lambda (G328b@x) (G2d93@make-eval-transformer (G2fb1@expand-transformer G328b@x G3275@mr))) G3280@rhs*)))) G327d@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G327b@t))) (G2f52@syntax-dispatch G327b@t '(_ #(each (any any)) any . each-any)))) G3273@e))) '#f))) (set! G2ef0@type-descriptor-transformer (lambda (G328f@e G3290@r G3291@mr) ((lambda (G3295@t) ((lambda (G3297@ls/false) (if (and G3297@ls/false (apply (lambda (G3299@id) (G2d53@id? G3299@id)) G3297@ls/false)) (apply (lambda (G329b@id) ((lambda (G329d@lab) ((lambda (G329f@b) ((lambda (G32a1@type) ((lambda () (begin (if (not G329d@lab) (G2d79@raise-unbound-error G329b@id) (void)) (if (not (and (eq? G32a1@type '$rtd) (not (list? (G2d77@binding-value G329f@b))))) (G303d@syntax-violation '#f '"not a record type" G328f@e) (void)) (list 'quote (G2d77@binding-value G329f@b)))))) (G2d75@binding-type G329f@b))) (G2d71@label->binding G329d@lab G3290@r))) (G2d6d@id->label G329b@id))) G3297@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3295@t))) (G2f52@syntax-dispatch G3295@t '(_ any)))) G328f@e))) (set! G2ef2@record-type-descriptor-transformer (lambda (G32a3@e G32a4@r G32a5@mr) ((lambda (G32a9@t) ((lambda (G32ab@ls/false) (if (and G32ab@ls/false (apply (lambda (G32ad@id) (G2d53@id? G32ad@id)) G32ab@ls/false)) (apply (lambda (G32af@id) ((lambda (G32b1@lab) ((lambda (G32b3@b) ((lambda (G32b5@type) ((lambda () (begin (if (not G32b1@lab) (G2d79@raise-unbound-error G32af@id) (void)) (if (not (and (eq? G32b5@type '$rtd) (list? (G2d77@binding-value G32b3@b)))) (G303d@syntax-violation '#f '"not a record type" G32a3@e) (void)) (G2f76@chi-expr (car (G2d77@binding-value G32b3@b)) G32a4@r G32a5@mr))))) (G2d75@binding-type G32b3@b))) (G2d71@label->binding G32b1@lab G32a4@r))) (G2d6d@id->label G32af@id))) G32ab@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G32a9@t))) (G2f52@syntax-dispatch G32a9@t '(_ any)))) G32a3@e))) (set! G2ef4@record-constructor-descriptor-transformer (lambda (G32b7@e G32b8@r G32b9@mr) ((lambda (G32bd@t) ((lambda (G32bf@ls/false) (if (and G32bf@ls/false (apply (lambda (G32c1@id) (G2d53@id? G32c1@id)) G32bf@ls/false)) (apply (lambda (G32c3@id) ((lambda (G32c5@lab) ((lambda (G32c7@b) ((lambda (G32c9@type) ((lambda () (begin (if (not G32c5@lab) (G2d79@raise-unbound-error G32c3@id) (void)) (if (not (and (eq? G32c9@type '$rtd) (list? (G2d77@binding-value G32c7@b)))) (G303d@syntax-violation '#f '"invalid type" G32b7@e) (void)) (G2f76@chi-expr (cadr (G2d77@binding-value G32c7@b)) G32b8@r G32b9@mr))))) (G2d75@binding-type G32c7@b))) (G2d71@label->binding G32c5@lab G32b8@r))) (G2d6d@id->label G32c3@id))) G32bf@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G32bd@t))) (G2f52@syntax-dispatch G32bd@t '(_ any)))) G32b7@e))) (set! G2ef6@when-macro (lambda (G32cb@e) ((lambda (G32cd@t) ((lambda (G32cf@ls/false) (if G32cf@ls/false (apply (lambda (G32d1@test G32d2@e G32d3@e*) (G2f08@bless (list 'if G32d1@test (cons 'begin (cons G32d2@e G32d3@e*))))) G32cf@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G32cd@t))) (G2f52@syntax-dispatch G32cd@t '(_ any any . each-any)))) G32cb@e))) (set! G2ef8@unless-macro (lambda (G32d7@e) ((lambda (G32d9@t) ((lambda (G32db@ls/false) (if G32db@ls/false (apply (lambda (G32dd@test G32de@e G32df@e*) (G2f08@bless (list 'if (list 'not G32dd@test) (cons 'begin (cons G32de@e G32df@e*))))) G32db@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G32d9@t))) (G2f52@syntax-dispatch G32d9@t '(_ any any . each-any)))) G32d7@e))) (set! G2efa@if-transformer (lambda (G32e3@e G32e4@r G32e5@mr) ((lambda (G32e9@t) ((lambda (G32eb@ls/false) (if G32eb@ls/false (apply (lambda (G32ed@e0 G32ee@e1 G32ef@e2) (list 'if (G2f76@chi-expr G32ed@e0 G32e4@r G32e5@mr) (G2f76@chi-expr G32ee@e1 G32e4@r G32e5@mr) (G2f76@chi-expr G32ef@e2 G32e4@r G32e5@mr))) G32eb@ls/false) ((lambda (G32f3@t) ((lambda (G32f5@ls/false) (if G32f5@ls/false (apply (lambda (G32f7@e0 G32f8@e1) (list 'if (G2f76@chi-expr G32f7@e0 G32e4@r G32e5@mr) (G2f76@chi-expr G32f8@e1 G32e4@r G32e5@mr) (G2cb1@G2c23@build-void))) G32f5@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G32f3@t))) (G2f52@syntax-dispatch G32f3@t '(_ any any)))) G32e9@t))) (G2f52@syntax-dispatch G32e9@t '(_ any any any)))) G32e3@e))) (set! G2efc@and-transformer (lambda (G32fb@e G32fc@r G32fd@mr) ((lambda (G3301@t) ((lambda (G3303@ls/false) (if G3303@ls/false (apply (lambda (G3305@e*) (cons 'and (G2f72@chi-expr* G3305@e* G32fc@r G32fd@mr))) G3303@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3301@t))) (G2f52@syntax-dispatch G3301@t '(_ . each-any)))) G32fb@e))) (set! G2efe@or-transformer (lambda (G3307@e G3308@r G3309@mr) ((lambda (G330d@t) ((lambda (G330f@ls/false) (if G330f@ls/false (apply (lambda (G3311@e*) (cons 'or (G2f72@chi-expr* G3311@e* G3308@r G3309@mr))) G330f@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G330d@t))) (G2f52@syntax-dispatch G330d@t '(_ . each-any)))) G3307@e))) (set! G2f00@case-macro (lambda (G3313@e) ((lambda (G3316@build-last G3318@build-one) (begin (set! G3316@build-last (lambda (G333d@cls) ((lambda (G333f@t) ((lambda (G3341@ls/false) (if G3341@ls/false (apply (lambda (G3343@e G3344@e*) (cons 'begin (cons G3343@e G3344@e*))) G3341@ls/false) ((lambda (G3347@t) ((lambda (G3349@ls/false) (if G3349@ls/false (apply (lambda () (G3318@build-one G333d@cls '(if #f #f))) G3349@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3347@t))) (G2f52@syntax-dispatch G3347@t '_))) G333f@t))) (G2f52@syntax-dispatch G333f@t '(#(scheme-id else) any . each-any)))) G333d@cls))) (set! G3318@build-one (lambda (G332f@cls G3330@k) ((lambda (G3333@t) ((lambda (G3335@ls/false) (if G3335@ls/false (apply (lambda (G3337@d* G3338@e G3339@e*) (list 'if (list 'memv 't (list 'quote G3337@d*)) (cons 'begin (cons G3338@e G3339@e*)) G3330@k)) G3335@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3333@t))) (G2f52@syntax-dispatch G3333@t '(each-any any . each-any)))) G332f@cls))) ((lambda (G3319@t) ((lambda (G331b@ls/false) (if G331b@ls/false (apply (lambda (G331d@expr) (G2f08@bless (cons 'let (cons (list (list 't G331d@expr)) '((if #f #f)))))) G331b@ls/false) ((lambda (G331f@t) ((lambda (G3321@ls/false) (if G3321@ls/false (apply (lambda (G3323@expr G3324@cls G3325@cls*) (G2f08@bless (list 'let (list (list 't G3323@expr)) ((letrec ((G3329@f (lambda (G332b@cls G332c@cls*) (if (null? G332c@cls*) (G3316@build-last G332b@cls) (G3318@build-one G332b@cls (G3329@f (car G332c@cls*) (cdr G332c@cls*))))))) G3329@f) G3324@cls G3325@cls*)))) G3321@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G331f@t))) (G2f52@syntax-dispatch G331f@t '(_ any any . each-any)))) G3319@t))) (G2f52@syntax-dispatch G3319@t '(_ any)))) G3313@e))) '#f '#f))) (set! G2f02@quote-transformer (lambda (G334b@e G334c@r G334d@mr) ((lambda (G3351@t) ((lambda (G3353@ls/false) (if G3353@ls/false (apply (lambda (G3355@datum) (list 'quote (G2d69@stx->datum G3355@datum))) G3353@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3351@t))) (G2f52@syntax-dispatch G3351@t '(_ any)))) G334b@e))) (set! G2f04@case-lambda-transformer (lambda (G3357@e G3358@r G3359@mr) ((lambda (G335d@t) ((lambda (G335f@ls/false) (if G335f@ls/false (apply (lambda (G3361@fmls* G3362@b* G3363@b**) (call-with-values (lambda () (G2f7e@chi-lambda-clause* G3357@e G3361@fmls* (map cons G3362@b* G3363@b**) G3358@r G3359@mr)) (lambda (G3369@G3367 G336a@G3368) ((lambda (G336d@body* G336e@fmls*) (G2cae@G2bed@build-case-lambda '#f G336e@fmls* G336d@body*)) G336a@G3368 G3369@G3367)))) G335f@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G335d@t))) (G2f52@syntax-dispatch G335d@t '(_ . #(each (any any . each-any)))))) G3357@e))) (set! G2f06@lambda-transformer (lambda (G3371@e G3372@r G3373@mr) ((lambda (G3377@t) ((lambda (G3379@ls/false) (if G3379@ls/false (apply (lambda (G337b@fmls G337c@b G337d@b*) (call-with-values (lambda () (G2f7c@chi-lambda-clause G3371@e G337b@fmls (cons G337c@b G337d@b*) G3372@r G3373@mr)) (lambda (G3383@G3381 G3384@G3382) ((lambda (G3387@body G3388@fmls) (G2cad@G2beb@build-lambda '#f G3388@fmls G3387@body)) G3384@G3382 G3383@G3381)))) G3379@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3377@t))) (G2f52@syntax-dispatch G3377@t '(_ any any . each-any)))) G3371@e))) (set! G2f08@bless (lambda (G338b@x) (G2d3b@mkstx ((letrec ((G338d@f (lambda (G338f@x) (if (G2d1b@stx? G338f@x) G338f@x (if (pair? G338f@x) (cons (G338d@f (car G338f@x)) (G338d@f (cdr G338f@x))) (if (symbol? G338f@x) (G2edc@scheme-stx G338f@x) (if (vector? G338f@x) (vector-map G338d@f G338f@x) G338f@x))))))) G338d@f) G338b@x) '() '() '()))) (set! G2f0a@with-syntax-macro (lambda (G3391@e) ((lambda (G3393@t) ((lambda (G3395@ls/false) (if G3395@ls/false (apply (lambda (G3397@pat* G3398@expr* G3399@b G339a@b*) ((lambda (G339f@idn*) (begin (G2f7a@verify-formals (map car G339f@idn*) G3391@e) ((lambda (G33a1@t*) (G2f08@bless (list 'let (map list G33a1@t* G3398@expr*) ((letrec ((G33a3@f (lambda (G33a5@pat* G33a6@t*) (if (null? G33a5@pat*) (cons 'begin (cons '#f (cons G3399@b G339a@b*))) (list 'syntax-case (car G33a6@t*) '() (list (car G33a5@pat*) (G33a3@f (cdr G33a5@pat*) (cdr G33a6@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33a5@pat*)) (car G33a6@t*)))))))) G33a3@f) G3397@pat* G33a1@t*)))) (G302b@generate-temporaries G3398@expr*)))) ((letrec ((G33a9@f (lambda (G33ab@pat*) (if (null? G33ab@pat*) '() (call-with-values (lambda () (G2f50@convert-pattern (car G33ab@pat*) '())) (lambda (G33af@G33ad G33b0@G33ae) ((lambda (G33b3@idn* G33b4@pat) (append G33b3@idn* (G33a9@f (cdr G33ab@pat*)))) G33b0@G33ae G33af@G33ad))))))) G33a9@f) G3397@pat*))) G3395@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3393@t))) (G2f52@syntax-dispatch G3393@t '(_ #(each (any any)) any . each-any)))) G3391@e))) (set! G2f0c@invalid-fmls-error (lambda (G33b7@stx G33b8@fmls) ((lambda (G33bb@t) ((lambda (G33bd@ls/false) (if G33bd@ls/false (apply (lambda (G33bf@id* G33c0@last) ((letrec ((G33c3@f (lambda (G33c5@id*) (if (null? G33c5@id*) (values) (if (not (G2d53@id? (car G33c5@id*))) (G303d@syntax-violation '#f '"not an identifier" G33b7@stx (car G33c5@id*)) (begin (G33c3@f (cdr G33c5@id*)) (if (G2d61@bound-id-member? (car G33c5@id*) (cdr G33c5@id*)) (G303d@syntax-violation '#f '"duplicate binding" G33b7@stx (car G33c5@id*)) (void)))))))) G33c3@f) (if (G2d53@id? G33c0@last) (cons G33c0@last G33bf@id*) (if (G2d49@syntax-null? G33c0@last) G33bf@id* (G303d@syntax-violation '#f '"not an identifier" G33b7@stx G33c0@last))))) G33bd@ls/false) ((lambda (G33c7@t) ((lambda (G33c9@ls/false) (if G33c9@ls/false (apply (lambda () (G303d@syntax-violation '#f '"malformed binding form" G33b7@stx G33b8@fmls)) G33c9@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G33c7@t))) (G2f52@syntax-dispatch G33c7@t '_))) G33bb@t))) (G2f52@syntax-dispatch G33bb@t '#(each+ any () any)))) G33b8@fmls))) (set! G2f0e@let-macro (lambda (G33cb@stx) ((lambda (G33cd@t) ((lambda (G33cf@ls/false) (if G33cf@ls/false (apply (lambda (G33d1@lhs* G33d2@rhs* G33d3@b G33d4@b*) (if (G2d5d@valid-bound-ids? G33d1@lhs*) (G2f08@bless (cons (cons 'lambda (cons G33d1@lhs* (cons G33d3@b G33d4@b*))) G33d2@rhs*)) (G2f0c@invalid-fmls-error G33cb@stx G33d1@lhs*))) G33cf@ls/false) ((lambda (G33d9@t) ((lambda (G33db@ls/false) (if (and G33db@ls/false (apply (lambda (G33dd@f G33de@lhs* G33df@rhs* G33e0@b G33e1@b*) (G2d53@id? G33dd@f)) G33db@ls/false)) (apply (lambda (G33e7@f G33e8@lhs* G33e9@rhs* G33ea@b G33eb@b*) (if (G2d5d@valid-bound-ids? G33e8@lhs*) (G2f08@bless (cons (list 'letrec (list (list G33e7@f (cons 'lambda (cons G33e8@lhs* (cons G33ea@b G33eb@b*))))) G33e7@f) G33e9@rhs*)) (G2f0c@invalid-fmls-error G33cb@stx G33e8@lhs*))) G33db@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G33d9@t))) (G2f52@syntax-dispatch G33d9@t '(_ any #(each (any any)) any . each-any)))) G33cd@t))) (G2f52@syntax-dispatch G33cd@t '(_ #(each (any any)) any . each-any)))) G33cb@stx))) (set! G2f10@let-values-macro (lambda (G33f1@stx) ((lambda (G33f4@rename G33f6@rename*) (begin (set! G33f4@rename (lambda (G3456@x G3457@old* G3458@new*) (begin (if (not (G2d53@id? G3456@x)) (G303d@syntax-violation '#f '"not an indentifier" G33f1@stx G3456@x) (void)) (if (G2d61@bound-id-member? G3456@x G3457@old*) (G303d@syntax-violation '#f '"duplicate binding" G33f1@stx G3456@x) (void)) ((lambda (G345c@y) (values G345c@y (cons G3456@x G3457@old*) (cons G345c@y G3458@new*))) (gensym (G3043@syntax->datum G3456@x)))))) (set! G33f6@rename* (lambda (G3444@x* G3445@old* G3446@new*) (if (null? G3444@x*) (values '() G3445@old* G3446@new*) (call-with-values (lambda () (G33f4@rename (car G3444@x*) G3445@old* G3446@new*)) (lambda (G344a@x G344b@old* G344c@new*) (call-with-values (lambda () (G33f6@rename* (cdr G3444@x*) G344b@old* G344c@new*)) (lambda (G3450@x* G3451@old* G3452@new*) (values (cons G344a@x G3450@x*) G3451@old* G3452@new*)))))))) ((lambda (G33f7@t) ((lambda (G33f9@ls/false) (if G33f9@ls/false (apply (lambda (G33fb@b G33fc@b*) (cons* (G2f08@bless 'let) '() G33fb@b G33fc@b*)) G33f9@ls/false) ((lambda (G33ff@t) ((lambda (G3401@ls/false) (if G3401@ls/false (apply (lambda (G3403@lhs* G3404@rhs* G3405@b G3406@b*) (G2f08@bless ((letrec ((G340b@f (lambda (G340d@lhs* G340e@rhs* G340f@old* G3410@new*) (if (null? G340d@lhs*) (cons 'let (cons (map list G340f@old* G3410@new*) (cons G3405@b G3406@b*))) ((lambda (G3415@t) ((lambda (G3417@ls/false) (if G3417@ls/false (apply (lambda (G3419@x*) (call-with-values (lambda () (G33f6@rename* G3419@x* G340f@old* G3410@new*)) (lambda (G341e@G341b G341f@G341c G3420@G341d) ((lambda (G3424@new* G3425@old* G3426@y*) (list 'call-with-values (list 'lambda '() (car G340e@rhs*)) (list 'lambda G3426@y* (G340b@f (cdr G340d@lhs*) (cdr G340e@rhs*) G3425@old* G3424@new*)))) G3420@G341d G341f@G341c G341e@G341b)))) G3417@ls/false) ((lambda (G342a@t) ((lambda (G342c@ls/false) (if G342c@ls/false (apply (lambda (G342e@x* G342f@x) (call-with-values (lambda () (G33f4@rename G342f@x G340f@old* G3410@new*)) (lambda (G3432@y G3433@old* G3434@new*) (call-with-values (lambda () (G33f6@rename* G342e@x* G3433@old* G3434@new*)) (lambda (G3438@y* G3439@old* G343a@new*) (list 'call-with-values (list 'lambda '() (car G340e@rhs*)) (list 'lambda (append G3438@y* G3432@y) (G340b@f (cdr G340d@lhs*) (cdr G340e@rhs*) G3439@old* G343a@new*)))))))) G342c@ls/false) ((lambda (G343e@t) ((lambda (G3440@ls/false) (if G3440@ls/false (apply (lambda (G3442@others) (G303d@syntax-violation '#f '"malformed bindings" G33f1@stx G3442@others)) G3440@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G343e@t))) (G2f52@syntax-dispatch G343e@t 'any))) G342a@t))) (G2f52@syntax-dispatch G342a@t '#(each+ any () any)))) G3415@t))) (G2f52@syntax-dispatch G3415@t 'each-any))) (car G340d@lhs*)))))) G340b@f) G3403@lhs* G3404@rhs* '() '()))) G3401@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G33ff@t))) (G2f52@syntax-dispatch G33ff@t '(_ #(each (any any)) any . each-any)))) G33f7@t))) (G2f52@syntax-dispatch G33f7@t '(_ () any . each-any)))) G33f1@stx))) '#f '#f))) (set! G2f12@let*-values-macro (lambda (G345e@stx) ((lambda (G3461@check) (begin (set! G3461@check (lambda (G3490@x*) (if (not (null? G3490@x*)) ((lambda (G3492@x) (begin (if (not (G2d53@id? G3492@x)) (G303d@syntax-violation '#f '"not an identifier" G345e@stx G3492@x) (void)) (G3461@check (cdr G3490@x*)) (if (G2d61@bound-id-member? G3492@x (cdr G3490@x*)) (G303d@syntax-violation '#f '"duplicate identifier" G345e@stx G3492@x) (void)))) (car G3490@x*)) (void)))) ((lambda (G3462@t) ((lambda (G3464@ls/false) (if G3464@ls/false (apply (lambda (G3466@b G3467@b*) (cons* (G2f08@bless 'let) '() G3466@b G3467@b*)) G3464@ls/false) ((lambda (G346a@t) ((lambda (G346c@ls/false) (if G346c@ls/false (apply (lambda (G346e@lhs* G346f@rhs* G3470@b G3471@b*) (G2f08@bless ((letrec ((G3476@f (lambda (G3478@lhs* G3479@rhs*) (if (null? G3478@lhs*) (cons 'begin (cons G3470@b G3471@b*)) ((lambda (G347c@t) ((lambda (G347e@ls/false) (if G347e@ls/false (apply (lambda (G3480@x*) (begin (G3461@check G3480@x*) (list 'call-with-values (list 'lambda '() (car G3479@rhs*)) (list 'lambda G3480@x* (G3476@f (cdr G3478@lhs*) (cdr G3479@rhs*)))))) G347e@ls/false) ((lambda (G3482@t) ((lambda (G3484@ls/false) (if G3484@ls/false (apply (lambda (G3486@x* G3487@x) (begin (G3461@check (cons G3487@x G3486@x*)) (list 'call-with-values (list 'lambda '() (car G3479@rhs*)) (list 'lambda (append G3486@x* G3487@x) (G3476@f (cdr G3478@lhs*) (cdr G3479@rhs*)))))) G3484@ls/false) ((lambda (G348a@t) ((lambda (G348c@ls/false) (if G348c@ls/false (apply (lambda (G348e@others) (G303d@syntax-violation '#f '"malformed bindings" G345e@stx G348e@others)) G348c@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G348a@t))) (G2f52@syntax-dispatch G348a@t 'any))) G3482@t))) (G2f52@syntax-dispatch G3482@t '#(each+ any () any)))) G347c@t))) (G2f52@syntax-dispatch G347c@t 'each-any))) (car G3478@lhs*)))))) G3476@f) G346e@lhs* G346f@rhs*))) G346c@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G346a@t))) (G2f52@syntax-dispatch G346a@t '(_ #(each (any any)) any . each-any)))) G3462@t))) (G2f52@syntax-dispatch G3462@t '(_ () any . each-any)))) G345e@stx))) '#f))) (set! G2f14@trace-lambda-macro (lambda (G3494@stx) ((lambda (G3496@t) ((lambda (G3498@ls/false) (if G3498@ls/false (apply (lambda (G349a@who G349b@fmls G349c@b G349d@b*) (if (G2d5d@valid-bound-ids? G349b@fmls) (G2f08@bless (list 'make-traced-procedure (list 'quote G349a@who) (cons 'lambda (cons G349b@fmls (cons G349c@b G349d@b*))))) (G2f0c@invalid-fmls-error G3494@stx G349b@fmls))) G3498@ls/false) ((lambda (G34a2@t) ((lambda (G34a4@ls/false) (if G34a4@ls/false (apply (lambda (G34a6@who G34a7@fmls G34a8@last G34a9@b G34aa@b*) (if (G2d5d@valid-bound-ids? (cons G34a8@last G34a7@fmls)) (G2f08@bless (list 'make-traced-procedure (list 'quote G34a6@who) (cons 'lambda (cons (append G34a7@fmls G34a8@last) (cons G34a9@b G34aa@b*))))) (G2f0c@invalid-fmls-error G3494@stx (append G34a7@fmls G34a8@last)))) G34a4@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G34a2@t))) (G2f52@syntax-dispatch G34a2@t '(_ any #(each+ any () any) any . each-any)))) G3496@t))) (G2f52@syntax-dispatch G3496@t '(_ any each-any any . each-any)))) G3494@stx))) (set! G2f16@trace-define-macro (lambda (G34b0@stx) ((lambda (G34b2@t) ((lambda (G34b4@ls/false) (if G34b4@ls/false (apply (lambda (G34b6@who G34b7@fmls G34b8@b G34b9@b*) (if (G2d5d@valid-bound-ids? G34b7@fmls) (G2f08@bless (list 'define G34b6@who (list 'make-traced-procedure (list 'quote G34b6@who) (cons 'lambda (cons G34b7@fmls (cons G34b8@b G34b9@b*)))))) (G2f0c@invalid-fmls-error G34b0@stx G34b7@fmls))) G34b4@ls/false) ((lambda (G34be@t) ((lambda (G34c0@ls/false) (if G34c0@ls/false (apply (lambda (G34c2@who G34c3@fmls G34c4@last G34c5@b G34c6@b*) (if (G2d5d@valid-bound-ids? (cons G34c4@last G34c3@fmls)) (G2f08@bless (list 'define G34c2@who (list 'make-traced-procedure (list 'quote G34c2@who) (cons 'lambda (cons (append G34c3@fmls G34c4@last) (cons G34c5@b G34c6@b*)))))) (G2f0c@invalid-fmls-error G34b0@stx (append G34c3@fmls G34c4@last)))) G34c0@ls/false) ((lambda (G34cc@t) ((lambda (G34ce@ls/false) (if G34ce@ls/false (apply (lambda (G34d0@who G34d1@expr) (if (G2d53@id? G34d0@who) (G2f08@bless (list 'define G34d0@who (list 'let (list (list 'v G34d1@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34d0@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G303d@syntax-violation '#f '"invalid name" G34b0@stx))) G34ce@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G34cc@t))) (G2f52@syntax-dispatch G34cc@t '(_ any any)))) G34be@t))) (G2f52@syntax-dispatch G34be@t '(_ (any . #(each+ any () any)) any . each-any)))) G34b2@t))) (G2f52@syntax-dispatch G34b2@t '(_ (any . each-any) any . each-any)))) G34b0@stx))) (set! G2f18@trace-define-syntax-macro (lambda (G34d4@stx) ((lambda (G34d6@t) ((lambda (G34d8@ls/false) (if G34d8@ls/false (apply (lambda (G34da@who G34db@expr) (if (G2d53@id? G34da@who) (G2f08@bless (list 'define-syntax G34da@who (list 'make-traced-macro (list 'quote G34da@who) G34db@expr))) (G303d@syntax-violation '#f '"invalid name" G34d4@stx))) G34d8@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G34d6@t))) (G2f52@syntax-dispatch G34d6@t '(_ any any)))) G34d4@stx))) (set! G2f1a@trace-let/rec-syntax (lambda (G34de@who) (lambda (G34e0@stx) ((lambda (G34e2@t) ((lambda (G34e4@ls/false) (if G34e4@ls/false (apply (lambda (G34e6@lhs* G34e7@rhs* G34e8@b G34e9@b*) (if (G2d5d@valid-bound-ids? G34e6@lhs*) ((lambda (G34ee@rhs*) (G2f08@bless (cons G34de@who (cons (map list G34e6@lhs* G34ee@rhs*) (cons G34e8@b G34e9@b*))))) (map (lambda (G34f0@lhs G34f1@rhs) (list 'make-traced-macro (list 'quote G34f0@lhs) G34f1@rhs)) G34e6@lhs* G34e7@rhs*)) (G2f0c@invalid-fmls-error G34e0@stx G34e6@lhs*))) G34e4@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G34e2@t))) (G2f52@syntax-dispatch G34e2@t '(_ #(each (any any)) any . each-any)))) G34e0@stx)))) (set! G2f1c@trace-let-syntax-macro (G2f1a@trace-let/rec-syntax 'let-syntax)) (set! G2f1e@trace-letrec-syntax-macro (G2f1a@trace-let/rec-syntax 'letrec-syntax)) (set! G2f20@guard-macro (lambda (G34f4@x) ((lambda (G34f7@gen-clauses) (begin (set! G34f7@gen-clauses (lambda (G350e@con G350f@outerk G3510@clause*) ((lambda (G3515@f G3517@f*) (begin (set! G3515@f (lambda (G354a@x G354b@k) ((lambda (G354e@t) ((lambda (G3550@ls/false) (if G3550@ls/false (apply (lambda (G3552@e G3553@p) ((lambda (G3556@t) (list 'let (list (list G3556@t G3552@e)) (list 'if G3556@t (list G3553@p G3556@t) G354b@k))) (gensym))) G3550@ls/false) ((lambda (G3558@t) ((lambda (G355a@ls/false) (if G355a@ls/false (apply (lambda (G355c@e) ((lambda (G355e@t) (list 'let (list (list G355e@t G355c@e)) (list 'if G355e@t G355e@t G354b@k))) (gensym))) G355a@ls/false) ((lambda (G3560@t) ((lambda (G3562@ls/false) (if G3562@ls/false (apply (lambda (G3564@e G3565@v G3566@v*) (list 'if G3564@e (cons 'begin (cons G3565@v G3566@v*)) G354b@k)) G3562@ls/false) ((lambda (G356a@t) ((lambda (G356c@ls/false) (if G356c@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid guard clause" G354a@x)) G356c@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G356a@t))) (G2f52@syntax-dispatch G356a@t '_))) G3560@t))) (G2f52@syntax-dispatch G3560@t '(any any . each-any)))) G3558@t))) (G2f52@syntax-dispatch G3558@t '(any)))) G354e@t))) (G2f52@syntax-dispatch G354e@t '(any #(scheme-id =>) any)))) G354a@x))) (set! G3517@f* (lambda (G3522@x*) ((lambda (G3524@t) ((lambda (G3526@ls/false) (if G3526@ls/false (apply (lambda () ((lambda (G3528@g) (values (list G3528@g (list 'lambda '() (list 'raise-continuable G350e@con))) G3528@g)) (gensym))) G3526@ls/false) ((lambda (G352a@t) ((lambda (G352c@ls/false) (if G352c@ls/false (apply (lambda (G352e@e G352f@e*) (values (cons 'begin (cons G352e@e G352f@e*)) '#f)) G352c@ls/false) ((lambda (G3532@t) ((lambda (G3534@ls/false) (if G3534@ls/false (apply (lambda (G3536@cls G3537@cls*) (call-with-values (lambda () (G3517@f* G3537@cls*)) (lambda (G353c@G353a G353d@G353b) ((lambda (G3540@g G3541@e) (values (G3515@f G3536@cls G3541@e) G3540@g)) G353d@G353b G353c@G353a)))) G3534@ls/false) ((lambda (G3544@t) ((lambda (G3546@ls/false) (if G3546@ls/false (apply (lambda (G3548@others) (G303d@syntax-violation '#f '"invalid guard clause" G3548@others)) G3546@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3544@t))) (G2f52@syntax-dispatch G3544@t 'any))) G3532@t))) (G2f52@syntax-dispatch G3532@t '(any . any)))) G352a@t))) (G2f52@syntax-dispatch G352a@t '((#(scheme-id else) any . each-any))))) G3524@t))) (G2f52@syntax-dispatch G3524@t '()))) G3522@x*))) (call-with-values (lambda () (G3517@f* G3510@clause*)) (lambda (G351a@G3518 G351b@G3519) ((lambda (G351e@raisek G351f@code) (if G351e@raisek (list (list 'call/cc (list 'lambda (list G351e@raisek) (list G350f@outerk (list 'lambda '() G351f@code))))) (list G350f@outerk (list 'lambda '() G351f@code)))) G351b@G3519 G351a@G3518))))) '#f '#f))) ((lambda (G34f8@t) ((lambda (G34fa@ls/false) (if (and G34fa@ls/false (apply (lambda (G34fc@con G34fd@clause* G34fe@b G34ff@b*) (G2d53@id? G34fc@con)) G34fa@ls/false)) (apply (lambda (G3504@con G3505@clause* G3506@b G3507@b*) ((lambda (G350c@outerk) (G2f08@bless (list (list 'call/cc (list 'lambda (list G350c@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3504@con) (G34f7@gen-clauses G3504@con G350c@outerk G3505@clause*)) (cons 'lambda (cons '() (cons G3506@b G3507@b*)))))))))) (gensym))) G34fa@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G34f8@t))) (G2f52@syntax-dispatch G34f8@t '(_ (any . each-any) any . each-any)))) G34f4@x))) '#f))) (set! G2f22@define-enumeration-macro (lambda (G356e@stx) ((lambda (G3571@set? G3573@remove-dups) (begin (set! G3571@set? (lambda (G358a@x) (or (null? G358a@x) (and (not (memq (car G358a@x) (cdr G358a@x))) (G3571@set? (cdr G358a@x)))))) (set! G3573@remove-dups (lambda (G3588@ls) (if (null? G3588@ls) '() (cons (car G3588@ls) (G3573@remove-dups (remq (car G3588@ls) (cdr G3588@ls))))))) ((lambda (G3574@t) ((lambda (G3576@ls/false) (if (and G3576@ls/false (apply (lambda (G3578@name G3579@id* G357a@maker) (and (G2d53@id? G3578@name) (G2d53@id? G357a@maker) (for-all G2d53@id? G3579@id*))) G3576@ls/false)) (apply (lambda (G357e@name G357f@id* G3580@maker) ((lambda (G3584@name* G3585@mk) (G2f08@bless (list 'begin (list 'define G3585@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3584@name*)))) (list 'define-syntax G357e@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3584@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G357e@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3580@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3580@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3584@name*)) (cons 'syntax-violation (cons (list 'quote G3580@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3585@mk '('(n* ...)))))))))))) (G3573@remove-dups (G3043@syntax->datum G357f@id*)) (gensym))) G3576@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3574@t))) (G2f52@syntax-dispatch G3574@t '(_ any each-any any)))) G356e@stx))) '#f '#f))) (set! G2f24@time-macro (lambda (G358c@stx) ((lambda (G358e@t) ((lambda (G3590@ls/false) (if G3590@ls/false (apply (lambda (G3592@expr) ((lambda (G3594@str) (G2f08@bless (list 'time-it G3594@str (list 'lambda '() G3592@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3598@G3596 G3599@G3597) ((lambda (G359c@e G359d@p) (begin (write (G3043@syntax->datum G3592@expr) G359d@p) (G359c@e))) G3599@G3597 G3598@G3596))))) G3590@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G358e@t))) (G2f52@syntax-dispatch G358e@t '(_ any)))) G358c@stx))) (set! G2f26@delay-macro (lambda (G35a0@stx) ((lambda (G35a2@t) ((lambda (G35a4@ls/false) (if G35a4@ls/false (apply (lambda (G35a6@expr) (G2f08@bless (list 'make-promise (list 'lambda '() G35a6@expr)))) G35a4@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G35a2@t))) (G2f52@syntax-dispatch G35a2@t '(_ any)))) G35a0@stx))) (set! G2f28@assert-macro (lambda (G35a8@stx) ((lambda (G35aa@t) ((lambda (G35ac@ls/false) (if G35ac@ls/false (apply (lambda (G35ae@expr) ((lambda (G35b0@pos) (G2f08@bless (list 'unless G35ae@expr (list 'assertion-error (list 'quote G35ae@expr) (list 'quote G35b0@pos))))) (or (G3035@expression-position G35a8@stx) (G3035@expression-position G35ae@expr)))) G35ac@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G35aa@t))) (G2f52@syntax-dispatch G35aa@t '(_ any)))) G35a8@stx))) (set! G2f2a@endianness-macro (lambda (G35b2@stx) ((lambda (G35b4@t) ((lambda (G35b6@ls/false) (if G35b6@ls/false (apply (lambda (G35b8@e) ((lambda (G35ba@t) (if (memv G35ba@t '(little)) (G2f08@bless ''little) (if (memv G35ba@t '(big)) (G2f08@bless ''big) (G303d@syntax-violation '#f '"endianness must be big or little" G35b2@stx)))) (G3043@syntax->datum G35b8@e))) G35b6@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G35b4@t))) (G2f52@syntax-dispatch G35b4@t '(_ any)))) G35b2@stx))) (set! G2f2c@identifier-syntax-macro (lambda (G35bc@stx) ((lambda (G35be@t) ((lambda (G35c0@ls/false) (if G35c0@ls/false (apply (lambda (G35c2@expr) (G2f08@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35c2@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35c2@expr) '((syntax (e* ...)))))))))) G35c0@ls/false) ((lambda (G35c4@t) ((lambda (G35c6@ls/false) (if (and G35c6@ls/false (apply (lambda (G35c8@id1 G35c9@expr1 G35ca@id2 G35cb@expr2 G35cc@expr3) (and (G2d53@id? G35c8@id1) (G2d53@id? G35ca@id2) (G2d53@id? G35cb@expr2))) G35c6@ls/false)) (apply (lambda (G35d2@id1 G35d3@expr1 G35d4@id2 G35d5@expr2 G35d6@expr3) (G2f08@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35d3@expr1)) (list (list 'set! 'id G35d5@expr2) (list 'syntax G35d6@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35d3@expr1 '(e* ...))))))))) G35c6@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G35c4@t))) (G2f52@syntax-dispatch G35c4@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35be@t))) (G2f52@syntax-dispatch G35be@t '(_ any)))) G35bc@stx))) (set! G2f2e@do-macro (lambda (G35dc@stx) ((lambda (G35df@bind) (begin (set! G35df@bind (lambda (G35f6@x) ((lambda (G35f8@t) ((lambda (G35fa@ls/false) (if G35fa@ls/false (apply (lambda (G35fc@x G35fd@init) (list G35fc@x G35fd@init G35fc@x)) G35fa@ls/false) ((lambda (G3600@t) ((lambda (G3602@ls/false) (if G3602@ls/false (apply (lambda (G3604@x G3605@init G3606@step) (list G3604@x G3605@init G3606@step)) G3602@ls/false) ((lambda (G360a@t) ((lambda (G360c@ls/false) (if G360c@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid binding" G35dc@stx)) G360c@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G360a@t))) (G2f52@syntax-dispatch G360a@t '_))) G3600@t))) (G2f52@syntax-dispatch G3600@t '(any any any)))) G35f8@t))) (G2f52@syntax-dispatch G35f8@t '(any any)))) G35f6@x))) ((lambda (G35e0@t) ((lambda (G35e2@ls/false) (if G35e2@ls/false (apply (lambda (G35e4@binding* G35e5@test G35e6@expr* G35e7@command*) ((lambda (G35ec@t) ((lambda (G35ee@ls/false) (if G35ee@ls/false (apply (lambda (G35f0@x* G35f1@init* G35f2@step*) (if (G2d5d@valid-bound-ids? G35f0@x*) (G2f08@bless (list 'letrec (list (list 'loop (list 'lambda G35f0@x* (list 'if G35e5@test (cons 'begin (cons '(if #f #f) G35e6@expr*)) (cons 'begin (append G35e7@command* (list (cons 'loop G35f2@step*)))))))) (cons 'loop G35f1@init*))) (G303d@syntax-violation '#f '"invalid bindings" G35dc@stx))) G35ee@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G35ec@t))) (G2f52@syntax-dispatch G35ec@t '#(each (any any any))))) (map G35df@bind G35e4@binding*))) G35e2@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G35e0@t))) (G2f52@syntax-dispatch G35e0@t '(_ each-any (any . each-any) . each-any)))) G35dc@stx))) '#f))) (set! G2f30@let*-macro (lambda (G360e@stx) ((lambda (G3610@t) ((lambda (G3612@ls/false) (if (and G3612@ls/false (apply (lambda (G3614@lhs* G3615@rhs* G3616@b G3617@b*) (for-all G2d53@id? G3614@lhs*)) G3612@ls/false)) (apply (lambda (G361c@lhs* G361d@rhs* G361e@b G361f@b*) (G2f08@bless ((letrec ((G3624@f (lambda (G3626@x*) (if (null? G3626@x*) (cons 'let (cons '() (cons G361e@b G361f@b*))) (list 'let (list (car G3626@x*)) (G3624@f (cdr G3626@x*))))))) G3624@f) (map list G361c@lhs* G361d@rhs*)))) G3612@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3610@t))) (G2f52@syntax-dispatch G3610@t '(_ #(each (any any)) any . each-any)))) G360e@stx))) (set! G2f32@or-macro (lambda (G3628@stx) ((lambda (G362a@t) ((lambda (G362c@ls/false) (if G362c@ls/false (apply (lambda () '#f) G362c@ls/false) ((lambda (G362e@t) ((lambda (G3630@ls/false) (if G3630@ls/false (apply (lambda (G3632@e G3633@e*) (G2f08@bless ((letrec ((G3636@f (lambda (G3638@e G3639@e*) (if (null? G3639@e*) (list 'begin '#f G3638@e) (list 'let (list (list 't G3638@e)) (list 'if 't 't (G3636@f (car G3639@e*) (cdr G3639@e*)))))))) G3636@f) G3632@e G3633@e*))) G3630@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G362e@t))) (G2f52@syntax-dispatch G362e@t '(_ any . each-any)))) G362a@t))) (G2f52@syntax-dispatch G362a@t '(_)))) G3628@stx))) (set! G2f34@and-macro (lambda (G363c@stx) ((lambda (G363e@t) ((lambda (G3640@ls/false) (if G3640@ls/false (apply (lambda () '#t) G3640@ls/false) ((lambda (G3642@t) ((lambda (G3644@ls/false) (if G3644@ls/false (apply (lambda (G3646@e G3647@e*) (G2f08@bless ((letrec ((G364a@f (lambda (G364c@e G364d@e*) (if (null? G364d@e*) (list 'begin '#f G364c@e) (cons 'if (cons G364c@e (cons (G364a@f (car G364d@e*) (cdr G364d@e*)) '(#f)))))))) G364a@f) G3646@e G3647@e*))) G3644@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3642@t))) (G2f52@syntax-dispatch G3642@t '(_ any . each-any)))) G363e@t))) (G2f52@syntax-dispatch G363e@t '(_)))) G363c@stx))) (set! G2f36@cond-macro (lambda (G3650@stx) ((lambda (G3652@t) ((lambda (G3654@ls/false) (if G3654@ls/false (apply (lambda (G3656@cls G3657@cls*) (G2f08@bless ((letrec ((G365a@f (lambda (G365c@cls G365d@cls*) (if (null? G365d@cls*) ((lambda (G3660@t) ((lambda (G3662@ls/false) (if G3662@ls/false (apply (lambda (G3664@e G3665@e*) (cons 'begin (cons G3664@e G3665@e*))) G3662@ls/false) ((lambda (G3668@t) ((lambda (G366a@ls/false) (if G366a@ls/false (apply (lambda (G366c@e G366d@p) (list 'let (list (list 't G366c@e)) (list 'if 't (cons G366d@p '(t))))) G366a@ls/false) ((lambda (G3670@t) ((lambda (G3672@ls/false) (if G3672@ls/false (apply (lambda (G3674@e) (cons 'or (cons G3674@e '((if #f #f))))) G3672@ls/false) ((lambda (G3676@t) ((lambda (G3678@ls/false) (if G3678@ls/false (apply (lambda (G367a@e G367b@e*) (list 'if G367a@e (cons 'begin G367b@e*))) G3678@ls/false) ((lambda (G367e@t) ((lambda (G3680@ls/false) (if G3680@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid last clause" G3650@stx)) G3680@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G367e@t))) (G2f52@syntax-dispatch G367e@t '_))) G3676@t))) (G2f52@syntax-dispatch G3676@t '(any . each-any)))) G3670@t))) (G2f52@syntax-dispatch G3670@t '(any)))) G3668@t))) (G2f52@syntax-dispatch G3668@t '(any #(scheme-id =>) any)))) G3660@t))) (G2f52@syntax-dispatch G3660@t '(#(scheme-id else) any . each-any)))) G365c@cls) ((lambda (G3682@t) ((lambda (G3684@ls/false) (if G3684@ls/false (apply (lambda (G3686@e G3687@e*) (G303d@syntax-violation '#f '"incorrect position of keyword else" G3650@stx)) G3684@ls/false) ((lambda (G368a@t) ((lambda (G368c@ls/false) (if G368c@ls/false (apply (lambda (G368e@e G368f@p) (list 'let (list (list 't G368e@e)) (list 'if 't (cons G368f@p '(t)) (G365a@f (car G365d@cls*) (cdr G365d@cls*))))) G368c@ls/false) ((lambda (G3692@t) ((lambda (G3694@ls/false) (if G3694@ls/false (apply (lambda (G3696@e) (list 'or G3696@e (G365a@f (car G365d@cls*) (cdr G365d@cls*)))) G3694@ls/false) ((lambda (G3698@t) ((lambda (G369a@ls/false) (if G369a@ls/false (apply (lambda (G369c@e G369d@e*) (list 'if G369c@e (cons 'begin G369d@e*) (G365a@f (car G365d@cls*) (cdr G365d@cls*)))) G369a@ls/false) ((lambda (G36a0@t) ((lambda (G36a2@ls/false) (if G36a2@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid last clause" G3650@stx)) G36a2@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G36a0@t))) (G2f52@syntax-dispatch G36a0@t '_))) G3698@t))) (G2f52@syntax-dispatch G3698@t '(any . each-any)))) G3692@t))) (G2f52@syntax-dispatch G3692@t '(any)))) G368a@t))) (G2f52@syntax-dispatch G368a@t '(any #(scheme-id =>) any)))) G3682@t))) (G2f52@syntax-dispatch G3682@t '(#(scheme-id else) any . each-any)))) G365c@cls))))) G365a@f) G3656@cls G3657@cls*))) G3654@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3652@t))) (G2f52@syntax-dispatch G3652@t '(_ any . each-any)))) G3650@stx))) (set! G2f38@do-include (lambda (G36a4@stx G36a5@id G36a6@filename) ((lambda (G36aa@filename) (begin (if (not (and (string? G36aa@filename) (G2d53@id? G36a5@id))) (G303d@syntax-violation '#f '"invalid syntax" G36a4@stx) (void)) (cons (G2f08@bless 'begin) (with-input-from-file G36aa@filename (lambda () ((letrec ((G36ac@f (lambda (G36ae@ls) ((lambda (G36b0@x) (if (eof-object? G36b0@x) (reverse G36ae@ls) (G36ac@f (cons (G2d31@datum->stx G36a5@id G36b0@x) G36ae@ls)))) (G28e2@G280b@read-annotated))))) G36ac@f) '())))))) (G2d69@stx->datum G36a6@filename)))) (set! G2f3a@include-macro (lambda (G36b2@e) ((lambda (G36b4@t) ((lambda (G36b6@ls/false) (if G36b6@ls/false (apply (lambda (G36b8@id G36b9@filename) (G2f38@do-include G36b2@e G36b8@id G36b9@filename)) G36b6@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G36b4@t))) (G2f52@syntax-dispatch G36b4@t '(any any)))) G36b2@e))) (set! G2f3c@include-into-macro (lambda (G36bc@e) ((lambda (G36be@t) ((lambda (G36c0@ls/false) (if G36c0@ls/false (apply (lambda (G36c2@id G36c3@filename) (G2f38@do-include G36bc@e G36c2@id G36c3@filename)) G36c0@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G36be@t))) (G2f52@syntax-dispatch G36be@t '(_ any any)))) G36bc@e))) (set! G2f3e@syntax-rules-macro (lambda (G36c6@e) ((lambda (G36c8@t) ((lambda (G36ca@ls/false) (if G36ca@ls/false (apply (lambda (G36cc@lits G36cd@pat* G36ce@tmp*) (begin (G2f58@verify-literals G36cc@lits G36c6@e) (G2f08@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36cc@lits (map (lambda (G36d2@pat G36d3@tmp) ((lambda (G36d6@t) ((lambda (G36d8@ls/false) (if G36d8@ls/false (apply (lambda (G36da@rest) (list (cons 'g G36da@rest) (list 'syntax G36d3@tmp))) G36d8@ls/false) ((lambda (G36dc@t) ((lambda (G36de@ls/false) (if G36de@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid syntax-rules pattern" G36c6@e G36d2@pat)) G36de@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G36dc@t))) (G2f52@syntax-dispatch G36dc@t '_))) G36d6@t))) (G2f52@syntax-dispatch G36d6@t '(_ . any)))) G36d2@pat)) G36cd@pat* G36ce@tmp*)))))))) G36ca@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G36c8@t))) (G2f52@syntax-dispatch G36c8@t '(_ each-any . #(each (any any)))))) G36c6@e))) (set! G2f40@quasiquote-macro ((lambda () ((lambda (G36e1@datum G36ff@quasicons* G3701@quasicons G3703@quasiappend G3705@quasivector G3707@vquasi G3709@quasi) (begin (set! G36e1@datum (lambda (G37e4@x) (list (G2edc@scheme-stx 'quote) (G2d3b@mkstx G37e4@x '() '() '())))) (set! G36ff@quasicons* (lambda (G37dc@x G37dd@y) ((letrec ((G37e0@f (lambda (G37e2@x) (if (null? G37e2@x) G37dd@y (G3701@quasicons (car G37e2@x) (G37e0@f (cdr G37e2@x))))))) G37e0@f) G37dc@x))) (set! G3701@quasicons (lambda (G37b6@x G37b7@y) ((lambda (G37ba@t) ((lambda (G37bc@ls/false) (if G37bc@ls/false (apply (lambda (G37be@dy) ((lambda (G37c0@t) ((lambda (G37c2@ls/false) (if G37c2@ls/false (apply (lambda (G37c4@dx) (list (G2edc@scheme-stx 'quote) (cons G37c4@dx G37be@dy))) G37c2@ls/false) ((lambda (G37c6@t) ((lambda (G37c8@ls/false) (if G37c8@ls/false (apply (lambda () ((lambda (G37ca@t) ((lambda (G37cc@ls/false) (if G37cc@ls/false (apply (lambda () (list (G2edc@scheme-stx 'list) G37b6@x)) G37cc@ls/false) ((lambda (G37ce@t) ((lambda (G37d0@ls/false) (if G37d0@ls/false (apply (lambda () (list (G2edc@scheme-stx 'cons) G37b6@x G37b7@y)) G37d0@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G37ce@t))) (G2f52@syntax-dispatch G37ce@t '_))) G37ca@t))) (G2f52@syntax-dispatch G37ca@t '()))) G37be@dy)) G37c8@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G37c6@t))) (G2f52@syntax-dispatch G37c6@t '_))) G37c0@t))) (G2f52@syntax-dispatch G37c0@t '(#(scheme-id quote) any)))) G37b6@x)) G37bc@ls/false) ((lambda (G37d2@t) ((lambda (G37d4@ls/false) (if G37d4@ls/false (apply (lambda (G37d6@stuff) (cons* (G2edc@scheme-stx 'list) G37b6@x G37d6@stuff)) G37d4@ls/false) ((lambda (G37d8@t) ((lambda (G37da@ls/false) (if G37da@ls/false (apply (lambda () (list (G2edc@scheme-stx 'cons) G37b6@x G37b7@y)) G37da@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G37d8@t))) (G2f52@syntax-dispatch G37d8@t '_))) G37d2@t))) (G2f52@syntax-dispatch G37d2@t '(#(scheme-id list) . each-any)))) G37ba@t))) (G2f52@syntax-dispatch G37ba@t '(#(scheme-id quote) any)))) G37b7@y))) (set! G3703@quasiappend (lambda (G379c@x G379d@y) ((lambda (G37a0@ls) (if (null? G37a0@ls) (list (G2edc@scheme-stx 'quote) '()) (if (null? (cdr G37a0@ls)) (car G37a0@ls) (cons* (G2edc@scheme-stx 'append) G37a0@ls)))) ((letrec ((G37a2@f (lambda (G37a4@x) (if (null? G37a4@x) ((lambda (G37a6@t) ((lambda (G37a8@ls/false) (if G37a8@ls/false (apply (lambda () '()) G37a8@ls/false) ((lambda (G37aa@t) ((lambda (G37ac@ls/false) (if G37ac@ls/false (apply (lambda () (list G379d@y)) G37ac@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G37aa@t))) (G2f52@syntax-dispatch G37aa@t '_))) G37a6@t))) (G2f52@syntax-dispatch G37a6@t '(#(scheme-id quote) ())))) G379d@y) ((lambda (G37ae@t) ((lambda (G37b0@ls/false) (if G37b0@ls/false (apply (lambda () (G37a2@f (cdr G37a4@x))) G37b0@ls/false) ((lambda (G37b2@t) ((lambda (G37b4@ls/false) (if G37b4@ls/false (apply (lambda () (cons (car G37a4@x) (G37a2@f (cdr G37a4@x)))) G37b4@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G37b2@t))) (G2f52@syntax-dispatch G37b2@t '_))) G37ae@t))) (G2f52@syntax-dispatch G37ae@t '(#(scheme-id quote) ())))) (car G37a4@x)))))) G37a2@f) G379c@x)))) (set! G3705@quasivector (lambda (G376a@x) ((lambda (G376c@pat-x) ((lambda (G376e@t) ((lambda (G3770@ls/false) (if G3770@ls/false (apply (lambda (G3772@x*) (list (G2edc@scheme-stx 'quote) (list->vector G3772@x*))) G3770@ls/false) ((lambda (G3774@t) ((lambda (G3776@ls/false) (if G3776@ls/false (apply (lambda () ((letrec ((G3778@f (lambda (G377a@x G377b@k) ((lambda (G377e@t) ((lambda (G3780@ls/false) (if G3780@ls/false (apply (lambda (G3782@x*) (G377b@k (map (lambda (G3784@x) (list (G2edc@scheme-stx 'quote) G3784@x)) G3782@x*))) G3780@ls/false) ((lambda (G3786@t) ((lambda (G3788@ls/false) (if G3788@ls/false (apply (lambda (G378a@x*) (G377b@k G378a@x*)) G3788@ls/false) ((lambda (G378c@t) ((lambda (G378e@ls/false) (if G378e@ls/false (apply (lambda (G3790@x G3791@y) (G3778@f G3791@y (lambda (G3794@ls) (G377b@k (cons G3790@x G3794@ls))))) G378e@ls/false) ((lambda (G3796@t) ((lambda (G3798@ls/false) (if G3798@ls/false (apply (lambda () (list (G2edc@scheme-stx 'list->vector) G376c@pat-x)) G3798@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3796@t))) (G2f52@syntax-dispatch G3796@t '_))) G378c@t))) (G2f52@syntax-dispatch G378c@t '(#(scheme-id cons) any any)))) G3786@t))) (G2f52@syntax-dispatch G3786@t '(#(scheme-id list) . each-any)))) G377e@t))) (G2f52@syntax-dispatch G377e@t '(#(scheme-id quote) each-any)))) G377a@x)))) G3778@f) G376a@x (lambda (G379a@ls) (cons* (G2edc@scheme-stx 'vector) G379a@ls)))) G3776@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3774@t))) (G2f52@syntax-dispatch G3774@t '_))) G376e@t))) (G2f52@syntax-dispatch G376e@t '(#(scheme-id quote) each-any)))) G376c@pat-x)) G376a@x))) (set! G3707@vquasi (lambda (G3748@p G3749@lev) ((lambda (G374c@t) ((lambda (G374e@ls/false) (if G374e@ls/false (apply (lambda (G3750@p G3751@q) ((lambda (G3754@t) ((lambda (G3756@ls/false) (if G3756@ls/false (apply (lambda (G3758@p) (if (= G3749@lev '0) (G36ff@quasicons* G3758@p (G3707@vquasi G3751@q G3749@lev)) (G3701@quasicons (G3701@quasicons (G36e1@datum 'unquote) (G3709@quasi G3758@p (- G3749@lev '1))) (G3707@vquasi G3751@q G3749@lev)))) G3756@ls/false) ((lambda (G375a@t) ((lambda (G375c@ls/false) (if G375c@ls/false (apply (lambda (G375e@p) (if (= G3749@lev '0) (G3703@quasiappend G375e@p (G3707@vquasi G3751@q G3749@lev)) (G3701@quasicons (G3701@quasicons (G36e1@datum 'unquote-splicing) (G3709@quasi G375e@p (- G3749@lev '1))) (G3707@vquasi G3751@q G3749@lev)))) G375c@ls/false) ((lambda (G3760@t) ((lambda (G3762@ls/false) (if G3762@ls/false (apply (lambda (G3764@p) (G3701@quasicons (G3709@quasi G3764@p G3749@lev) (G3707@vquasi G3751@q G3749@lev))) G3762@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3760@t))) (G2f52@syntax-dispatch G3760@t 'any))) G375a@t))) (G2f52@syntax-dispatch G375a@t '(#(scheme-id unquote-splicing) . each-any)))) G3754@t))) (G2f52@syntax-dispatch G3754@t '(#(scheme-id unquote) . each-any)))) G3750@p)) G374e@ls/false) ((lambda (G3766@t) ((lambda (G3768@ls/false) (if G3768@ls/false (apply (lambda () (list (G2edc@scheme-stx 'quote) '())) G3768@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3766@t))) (G2f52@syntax-dispatch G3766@t '()))) G374c@t))) (G2f52@syntax-dispatch G374c@t '(any . any)))) G3748@p))) (set! G3709@quasi (lambda (G3712@p G3713@lev) ((lambda (G3716@t) ((lambda (G3718@ls/false) (if G3718@ls/false (apply (lambda (G371a@p) (if (= G3713@lev '0) G371a@p (G3701@quasicons (G36e1@datum 'unquote) (G3709@quasi (list G371a@p) (- G3713@lev '1))))) G3718@ls/false) ((lambda (G371c@t) ((lambda (G371e@ls/false) (if G371e@ls/false (apply (lambda (G3720@p G3721@q) (if (= G3713@lev '0) (G36ff@quasicons* G3720@p (G3709@quasi G3721@q G3713@lev)) (G3701@quasicons (G3701@quasicons (G36e1@datum 'unquote) (G3709@quasi G3720@p (- G3713@lev '1))) (G3709@quasi G3721@q G3713@lev)))) G371e@ls/false) ((lambda (G3724@t) ((lambda (G3726@ls/false) (if G3726@ls/false (apply (lambda (G3728@p G3729@q) (if (= G3713@lev '0) (G3703@quasiappend G3728@p (G3709@quasi G3729@q G3713@lev)) (G3701@quasicons (G3701@quasicons (G36e1@datum 'unquote-splicing) (G3709@quasi G3728@p (- G3713@lev '1))) (G3709@quasi G3729@q G3713@lev)))) G3726@ls/false) ((lambda (G372c@t) ((lambda (G372e@ls/false) (if G372e@ls/false (apply (lambda (G3730@p) (G3701@quasicons (G36e1@datum 'quasiquote) (G3709@quasi (list G3730@p) (+ G3713@lev '1)))) G372e@ls/false) ((lambda (G3732@t) ((lambda (G3734@ls/false) (if G3734@ls/false (apply (lambda (G3736@p G3737@q) (G3701@quasicons (G3709@quasi G3736@p G3713@lev) (G3709@quasi G3737@q G3713@lev))) G3734@ls/false) ((lambda (G373a@t) ((lambda (G373c@ls/false) (if (and G373c@ls/false (apply (lambda (G373e@x) (not (G2d1b@stx? G373e@x))) G373c@ls/false)) (apply (lambda (G3740@x) (G3705@quasivector (G3707@vquasi G3740@x G3713@lev))) G373c@ls/false) ((lambda (G3742@t) ((lambda (G3744@ls/false) (if G3744@ls/false (apply (lambda (G3746@p) (list (G2edc@scheme-stx 'quote) G3746@p)) G3744@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3742@t))) (G2f52@syntax-dispatch G3742@t 'any))) G373a@t))) (G2f52@syntax-dispatch G373a@t '#(vector each-any)))) G3732@t))) (G2f52@syntax-dispatch G3732@t '(any . any)))) G372c@t))) (G2f52@syntax-dispatch G372c@t '(#(scheme-id quasiquote) any)))) G3724@t))) (G2f52@syntax-dispatch G3724@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G371c@t))) (G2f52@syntax-dispatch G371c@t '((#(scheme-id unquote) . each-any) . any)))) G3716@t))) (G2f52@syntax-dispatch G3716@t '(#(scheme-id unquote) any)))) G3712@p))) (lambda (G370a@x) ((lambda (G370c@t) ((lambda (G370e@ls/false) (if G370e@ls/false (apply (lambda (G3710@e) (G3709@quasi G3710@e '0)) G370e@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G370c@t))) (G2f52@syntax-dispatch G370c@t '(_ any)))) G370a@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f42@quasisyntax-macro ((lambda () ((lambda (G37e7@quasi) (begin (set! G37e7@quasi (lambda (G37ff@p G3800@lev) ((lambda (G3803@t) ((lambda (G3805@ls/false) (if G3805@ls/false (apply (lambda (G3807@p) (if (= G3800@lev '0) ((lambda (G3809@g) (values (list G3809@g) (list G3807@p) G3809@g)) (gensym)) (call-with-values (lambda () (G37e7@quasi G3807@p (- G3800@lev '1))) (lambda (G380e@G380b G380f@G380c G3810@G380d) ((lambda (G3814@p G3815@rhs* G3816@lhs*) (values G3816@lhs* G3815@rhs* (list 'unsyntax G3814@p))) G3810@G380d G380f@G380c G380e@G380b))))) G3805@ls/false) ((lambda (G381a@t) ((lambda (G381c@ls/false) (if (and G381c@ls/false (apply (lambda () (= G3800@lev '0)) G381c@ls/false)) (apply (lambda () (G303d@syntax-violation '#f '"incorrect use of unsyntax" G37ff@p)) G381c@ls/false) ((lambda (G381e@t) ((lambda (G3820@ls/false) (if G3820@ls/false (apply (lambda (G3822@p* G3823@q) (call-with-values (lambda () (G37e7@quasi G3823@q G3800@lev)) (lambda (G3829@G3826 G382a@G3827 G382b@G3828) ((lambda (G382f@q G3830@rhs* G3831@lhs*) (if (= G3800@lev '0) ((lambda (G3835@g*) (values (append G3835@g* G3831@lhs*) (append G3822@p* G3830@rhs*) (append G3835@g* G382f@q))) (map (lambda (G3837@x) (gensym)) G3822@p*)) (call-with-values (lambda () (G37e7@quasi G3822@p* (- G3800@lev '1))) (lambda (G383c@G3839 G383d@G383a G383e@G383b) ((lambda (G3842@p* G3843@rhs2* G3844@lhs2*) (values (append G3844@lhs2* G3831@lhs*) (append G3843@rhs2* G3830@rhs*) (cons (cons 'unsyntax G3842@p*) G382f@q))) G383e@G383b G383d@G383a G383c@G3839))))) G382b@G3828 G382a@G3827 G3829@G3826)))) G3820@ls/false) ((lambda (G3848@t) ((lambda (G384a@ls/false) (if G384a@ls/false (apply (lambda (G384c@p* G384d@q) (call-with-values (lambda () (G37e7@quasi G384d@q G3800@lev)) (lambda (G3853@G3850 G3854@G3851 G3855@G3852) ((lambda (G3859@q G385a@rhs* G385b@lhs*) (if (= G3800@lev '0) ((lambda (G385f@g*) (values (append (map (lambda (G3861@g) (cons G3861@g '(...))) G385f@g*) G385b@lhs*) (append G384c@p* G385a@rhs*) (append (apply append (map (lambda (G3863@g) (cons G3863@g '(...))) G385f@g*)) G3859@q))) (map (lambda (G3865@x) (gensym)) G384c@p*)) (call-with-values (lambda () (G37e7@quasi G384c@p* (- G3800@lev '1))) (lambda (G386a@G3867 G386b@G3868 G386c@G3869) ((lambda (G3870@p* G3871@rhs2* G3872@lhs2*) (values (append G3872@lhs2* G385b@lhs*) (append G3871@rhs2* G385a@rhs*) (cons (cons 'unsyntax-splicing G3870@p*) G3859@q))) G386c@G3869 G386b@G3868 G386a@G3867))))) G3855@G3852 G3854@G3851 G3853@G3850)))) G384a@ls/false) ((lambda (G3876@t) ((lambda (G3878@ls/false) (if (and G3878@ls/false (apply (lambda () (= G3800@lev '0)) G3878@ls/false)) (apply (lambda () (G303d@syntax-violation '#f '"incorrect use of unsyntax-splicing" G37ff@p)) G3878@ls/false) ((lambda (G387a@t) ((lambda (G387c@ls/false) (if G387c@ls/false (apply (lambda (G387e@p) (call-with-values (lambda () (G37e7@quasi G387e@p (+ G3800@lev '1))) (lambda (G3883@G3880 G3884@G3881 G3885@G3882) ((lambda (G3889@p G388a@rhs* G388b@lhs*) (values G388b@lhs* G388a@rhs* (list 'quasisyntax G3889@p))) G3885@G3882 G3884@G3881 G3883@G3880)))) G387c@ls/false) ((lambda (G388f@t) ((lambda (G3891@ls/false) (if G3891@ls/false (apply (lambda (G3893@p G3894@q) (call-with-values (lambda () (G37e7@quasi G3893@p G3800@lev)) (lambda (G389d@G3897 G389e@G3898 G389f@G3899) (call-with-values (lambda () (G37e7@quasi G3894@q G3800@lev)) (lambda (G38a3@G389a G38a4@G389b G38a5@G389c) ((lambda (G38a9@q G38aa@rhs2* G38ab@lhs2* G38ac@p G38ad@rhs* G38ae@lhs*) (values (append G38ab@lhs2* G38ae@lhs*) (append G38aa@rhs2* G38ad@rhs*) (cons G38ac@p G38a9@q))) G38a5@G389c G38a4@G389b G38a3@G389a G389f@G3899 G389e@G3898 G389d@G3897)))))) G3891@ls/false) ((lambda (G38b5@t) ((lambda (G38b7@ls/false) (if G38b7@ls/false (apply (lambda (G38b9@x*) (call-with-values (lambda () (G37e7@quasi G38b9@x* G3800@lev)) (lambda (G38be@G38bb G38bf@G38bc G38c0@G38bd) ((lambda (G38c4@x* G38c5@rhs* G38c6@lhs*) (values G38c6@lhs* G38c5@rhs* (list->vector G38c4@x*))) G38c0@G38bd G38bf@G38bc G38be@G38bb)))) G38b7@ls/false) ((lambda (G38ca@t) ((lambda (G38cc@ls/false) (if G38cc@ls/false (apply (lambda () (values '() '() G37ff@p)) G38cc@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G38ca@t))) (G2f52@syntax-dispatch G38ca@t '_))) G38b5@t))) (G2f52@syntax-dispatch G38b5@t '#(vector each-any)))) G388f@t))) (G2f52@syntax-dispatch G388f@t '(any . any)))) G387a@t))) (G2f52@syntax-dispatch G387a@t '(#(scheme-id quasisyntax) any)))) G3876@t))) (G2f52@syntax-dispatch G3876@t '#(scheme-id unsyntax-splicing)))) G3848@t))) (G2f52@syntax-dispatch G3848@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G381e@t))) (G2f52@syntax-dispatch G381e@t '((#(scheme-id unsyntax) . each-any) . any)))) G381a@t))) (G2f52@syntax-dispatch G381a@t '#(scheme-id unsyntax)))) G3803@t))) (G2f52@syntax-dispatch G3803@t '(#(scheme-id unsyntax) any)))) G37ff@p))) (lambda (G37e8@x) ((lambda (G37ea@t) ((lambda (G37ec@ls/false) (if G37ec@ls/false (apply (lambda (G37ee@e) (call-with-values (lambda () (G37e7@quasi G37ee@e '0)) (lambda (G37f3@G37f0 G37f4@G37f1 G37f5@G37f2) ((lambda (G37f9@v G37fa@rhs* G37fb@lhs*) (G2f08@bless (list 'syntax-case (cons 'list G37fa@rhs*) '() (list G37fb@lhs* (list 'syntax G37f9@v))))) G37f5@G37f2 G37f4@G37f1 G37f3@G37f0)))) G37ec@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G37ea@t))) (G2f52@syntax-dispatch G37ea@t '(_ any)))) G37e8@x)))) '#f)))) (set! G2f44@define-struct-macro (lambda (G38ce@stx) (G303d@syntax-violation '#f '"define-struct not supported" G38ce@stx))) (set! G2f46@define-record-type-macro (lambda (G38d0@x) ((lambda (G38d3@id G38d5@get-record-name G38d7@get-record-constructor-name G38d9@get-record-predicate-name G38db@get-clause G38dd@foo-rtd-code G38df@parent-rtd-code G38e1@parent-rcd-code G38e3@foo-rcd-code G38e5@get-protocol-code G38e7@get-fields G38e9@get-mutator-indices G38eb@get-mutators G38ed@get-accessors G38ef@enumerate G38f1@do-define-record G38f3@verify-clauses) (begin (set! G38d3@id (lambda (G3ac6@ctxt . G3ac8@str*) (G3041@datum->syntax G3ac6@ctxt (string->symbol (apply string-append (map (lambda (G3aca@x) (if (symbol? G3aca@x) (symbol->string G3aca@x) (if (string? G3aca@x) G3aca@x (assertion-violation 'define-record-type '"BUG")))) G3ac8@str*)))))) (set! G38d5@get-record-name (lambda (G3ab4@spec) ((lambda (G3ab6@t) ((lambda (G3ab8@ls/false) (if G3ab8@ls/false (apply (lambda (G3aba@foo G3abb@make-foo G3abc@foo?) G3aba@foo) G3ab8@ls/false) ((lambda (G3ac0@t) ((lambda (G3ac2@ls/false) (if G3ac2@ls/false (apply (lambda (G3ac4@foo) G3ac4@foo) G3ac2@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3ac0@t))) (G2f52@syntax-dispatch G3ac0@t 'any))) G3ab6@t))) (G2f52@syntax-dispatch G3ab6@t '(any any any)))) G3ab4@spec))) (set! G38d7@get-record-constructor-name (lambda (G3aa0@spec) ((lambda (G3aa2@t) ((lambda (G3aa4@ls/false) (if G3aa4@ls/false (apply (lambda (G3aa6@foo G3aa7@make-foo G3aa8@foo?) G3aa7@make-foo) G3aa4@ls/false) ((lambda (G3aac@t) ((lambda (G3aae@ls/false) (if (and G3aae@ls/false (apply (lambda (G3ab0@foo) (G2d53@id? G3ab0@foo)) G3aae@ls/false)) (apply (lambda (G3ab2@foo) (G38d3@id G3ab2@foo '"make-" (G2d69@stx->datum G3ab2@foo))) G3aae@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3aac@t))) (G2f52@syntax-dispatch G3aac@t 'any))) G3aa2@t))) (G2f52@syntax-dispatch G3aa2@t '(any any any)))) G3aa0@spec))) (set! G38d9@get-record-predicate-name (lambda (G3a8c@spec) ((lambda (G3a8e@t) ((lambda (G3a90@ls/false) (if G3a90@ls/false (apply (lambda (G3a92@foo G3a93@make-foo G3a94@foo?) G3a94@foo?) G3a90@ls/false) ((lambda (G3a98@t) ((lambda (G3a9a@ls/false) (if (and G3a9a@ls/false (apply (lambda (G3a9c@foo) (G2d53@id? G3a9c@foo)) G3a9a@ls/false)) (apply (lambda (G3a9e@foo) (G38d3@id G3a9e@foo (G2d69@stx->datum G3a9e@foo) '"?")) G3a9a@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a98@t))) (G2f52@syntax-dispatch G3a98@t 'any))) G3a8e@t))) (G2f52@syntax-dispatch G3a8e@t '(any any any)))) G3a8c@spec))) (set! G38db@get-clause (lambda (G3a7a@id G3a7b@ls) ((lambda (G3a7e@t) ((lambda (G3a80@ls/false) (if G3a80@ls/false (apply (lambda () '#f) G3a80@ls/false) ((lambda (G3a82@t) ((lambda (G3a84@ls/false) (if G3a84@ls/false (apply (lambda (G3a86@x G3a87@rest G3a88@ls) (if (G2d5b@free-id=? (G2f08@bless G3a7a@id) G3a86@x) (cons G3a86@x G3a87@rest) (G38db@get-clause G3a7a@id G3a88@ls))) G3a84@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a82@t))) (G2f52@syntax-dispatch G3a82@t '((any . any) . any)))) G3a7e@t))) (G2f52@syntax-dispatch G3a7e@t '()))) G3a7b@ls))) (set! G38dd@foo-rtd-code (lambda (G3a28@name G3a29@clause* G3a2a@parent-rtd-code) ((lambda (G3a2f@convert-field-spec*) (begin (set! G3a2f@convert-field-spec* (lambda (G3a60@ls) (list->vector (map (lambda (G3a62@x) ((lambda (G3a64@t) ((lambda (G3a66@ls/false) (if G3a66@ls/false (apply (lambda (G3a68@name G3a69@rest) (list 'mutable G3a68@name)) G3a66@ls/false) ((lambda (G3a6c@t) ((lambda (G3a6e@ls/false) (if G3a6e@ls/false (apply (lambda (G3a70@name G3a71@rest) (list 'immutable G3a70@name)) G3a6e@ls/false) ((lambda (G3a74@t) ((lambda (G3a76@ls/false) (if G3a76@ls/false (apply (lambda (G3a78@name) (list 'immutable G3a78@name)) G3a76@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a74@t))) (G2f52@syntax-dispatch G3a74@t 'any))) G3a6c@t))) (G2f52@syntax-dispatch G3a6c@t '(#(scheme-id immutable) any . any)))) G3a64@t))) (G2f52@syntax-dispatch G3a64@t '(#(scheme-id mutable) any . any)))) G3a62@x)) G3a60@ls)))) ((lambda (G3a30@uid-code G3a31@sealed? G3a32@opaque? G3a33@fields) (G2f08@bless (list 'make-record-type-descriptor (list 'quote G3a28@name) G3a2a@parent-rtd-code G3a30@uid-code G3a31@sealed? G3a32@opaque? G3a33@fields))) ((lambda (G3a38@t) ((lambda (G3a3a@ls/false) (if G3a3a@ls/false (apply (lambda () (list 'quote (gensym))) G3a3a@ls/false) ((lambda (G3a3c@t) ((lambda (G3a3e@ls/false) (if G3a3e@ls/false (apply (lambda (G3a40@uid) (list 'quote G3a40@uid)) G3a3e@ls/false) ((lambda (G3a42@t) ((lambda (G3a44@ls/false) (if G3a44@ls/false (apply (lambda () '#f) G3a44@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a42@t))) (G2f52@syntax-dispatch G3a42@t '_))) G3a3c@t))) (G2f52@syntax-dispatch G3a3c@t '(_ any)))) G3a38@t))) (G2f52@syntax-dispatch G3a38@t '(_)))) (G38db@get-clause 'nongenerative G3a29@clause*)) ((lambda (G3a46@t) ((lambda (G3a48@ls/false) (if G3a48@ls/false (apply (lambda () '#t) G3a48@ls/false) ((lambda (G3a4a@t) ((lambda (G3a4c@ls/false) (if G3a4c@ls/false (apply (lambda () '#f) G3a4c@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a4a@t))) (G2f52@syntax-dispatch G3a4a@t '_))) G3a46@t))) (G2f52@syntax-dispatch G3a46@t '(_ #(atom #t))))) (G38db@get-clause 'sealed G3a29@clause*)) ((lambda (G3a4e@t) ((lambda (G3a50@ls/false) (if G3a50@ls/false (apply (lambda () '#t) G3a50@ls/false) ((lambda (G3a52@t) ((lambda (G3a54@ls/false) (if G3a54@ls/false (apply (lambda () '#f) G3a54@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a52@t))) (G2f52@syntax-dispatch G3a52@t '_))) G3a4e@t))) (G2f52@syntax-dispatch G3a4e@t '(_ #(atom #t))))) (G38db@get-clause 'opaque G3a29@clause*)) ((lambda (G3a56@t) ((lambda (G3a58@ls/false) (if G3a58@ls/false (apply (lambda (G3a5a@field-spec*) (list 'quote (G3a2f@convert-field-spec* G3a5a@field-spec*))) G3a58@ls/false) ((lambda (G3a5c@t) ((lambda (G3a5e@ls/false) (if G3a5e@ls/false (apply (lambda () ''#()) G3a5e@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a5c@t))) (G2f52@syntax-dispatch G3a5c@t '_))) G3a56@t))) (G2f52@syntax-dispatch G3a56@t '(_ . each-any)))) (G38db@get-clause 'fields G3a29@clause*))))) '#f))) (set! G38df@parent-rtd-code (lambda (G3a10@clause*) ((lambda (G3a12@t) ((lambda (G3a14@ls/false) (if G3a14@ls/false (apply (lambda (G3a16@name) (list 'record-type-descriptor G3a16@name)) G3a14@ls/false) ((lambda (G3a18@t) ((lambda (G3a1a@ls/false) (if G3a1a@ls/false (apply (lambda () ((lambda (G3a1c@t) ((lambda (G3a1e@ls/false) (if G3a1e@ls/false (apply (lambda (G3a20@rtd G3a21@rcd) G3a20@rtd) G3a1e@ls/false) ((lambda (G3a24@t) ((lambda (G3a26@ls/false) (if G3a26@ls/false (apply (lambda () '#f) G3a26@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a24@t))) (G2f52@syntax-dispatch G3a24@t '#(atom #f)))) G3a1c@t))) (G2f52@syntax-dispatch G3a1c@t '(_ any any)))) (G38db@get-clause 'parent-rtd G3a10@clause*))) G3a1a@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a18@t))) (G2f52@syntax-dispatch G3a18@t '#(atom #f)))) G3a12@t))) (G2f52@syntax-dispatch G3a12@t '(_ any)))) (G38db@get-clause 'parent G3a10@clause*)))) (set! G38e1@parent-rcd-code (lambda (G39f8@clause*) ((lambda (G39fa@t) ((lambda (G39fc@ls/false) (if G39fc@ls/false (apply (lambda (G39fe@name) (list 'record-constructor-descriptor G39fe@name)) G39fc@ls/false) ((lambda (G3a00@t) ((lambda (G3a02@ls/false) (if G3a02@ls/false (apply (lambda () ((lambda (G3a04@t) ((lambda (G3a06@ls/false) (if G3a06@ls/false (apply (lambda (G3a08@rtd G3a09@rcd) G3a09@rcd) G3a06@ls/false) ((lambda (G3a0c@t) ((lambda (G3a0e@ls/false) (if G3a0e@ls/false (apply (lambda () '#f) G3a0e@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a0c@t))) (G2f52@syntax-dispatch G3a0c@t '#(atom #f)))) G3a04@t))) (G2f52@syntax-dispatch G3a04@t '(_ any any)))) (G38db@get-clause 'parent-rtd G39f8@clause*))) G3a02@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3a00@t))) (G2f52@syntax-dispatch G3a00@t '#(atom #f)))) G39fa@t))) (G2f52@syntax-dispatch G39fa@t '(_ any)))) (G38db@get-clause 'parent G39f8@clause*)))) (set! G38e3@foo-rcd-code (lambda (G39f0@clause* G39f1@foo-rtd G39f2@protocol G39f3@parent-rcd-code) (list 'make-record-constructor-descriptor G39f1@foo-rtd G39f3@parent-rcd-code G39f2@protocol))) (set! G38e5@get-protocol-code (lambda (G39e4@clause*) ((lambda (G39e6@t) ((lambda (G39e8@ls/false) (if G39e8@ls/false (apply (lambda (G39ea@expr) G39ea@expr) G39e8@ls/false) ((lambda (G39ec@t) ((lambda (G39ee@ls/false) (if G39ee@ls/false (apply (lambda () '#f) G39ee@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G39ec@t))) (G2f52@syntax-dispatch G39ec@t '_))) G39e6@t))) (G2f52@syntax-dispatch G39e6@t '(_ any)))) (G38db@get-clause 'protocol G39e4@clause*)))) (set! G38e7@get-fields (lambda (G39d2@clause*) ((lambda (G39d4@t) ((lambda (G39d6@ls/false) (if G39d6@ls/false (apply (lambda () '()) G39d6@ls/false) ((lambda (G39d8@t) ((lambda (G39da@ls/false) (if G39da@ls/false (apply (lambda (G39dc@f*) G39dc@f*) G39da@ls/false) ((lambda (G39de@t) ((lambda (G39e0@ls/false) (if G39e0@ls/false (apply (lambda (G39e2@rest) (G38e7@get-fields G39e2@rest)) G39e0@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G39de@t))) (G2f52@syntax-dispatch G39de@t '(_ . any)))) G39d8@t))) (G2f52@syntax-dispatch G39d8@t '((#(scheme-id fields) . each-any) . _)))) G39d4@t))) (G2f52@syntax-dispatch G39d4@t '()))) G39d2@clause*))) (set! G38e9@get-mutator-indices (lambda (G39ba@fields) ((letrec ((G39bc@f (lambda (G39be@fields G39bf@i) ((lambda (G39c2@t) ((lambda (G39c4@ls/false) (if G39c4@ls/false (apply (lambda () '()) G39c4@ls/false) ((lambda (G39c6@t) ((lambda (G39c8@ls/false) (if G39c8@ls/false (apply (lambda (G39ca@rest) (cons G39bf@i (G39bc@f G39ca@rest (+ G39bf@i '1)))) G39c8@ls/false) ((lambda (G39cc@t) ((lambda (G39ce@ls/false) (if G39ce@ls/false (apply (lambda (G39d0@rest) (G39bc@f G39d0@rest (+ G39bf@i '1))) G39ce@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G39cc@t))) (G2f52@syntax-dispatch G39cc@t '(_ . any)))) G39c6@t))) (G2f52@syntax-dispatch G39c6@t '((#(scheme-id mutable) . _) . any)))) G39c2@t))) (G2f52@syntax-dispatch G39c2@t '()))) G39be@fields)))) G39bc@f) G39ba@fields '0))) (set! G38eb@get-mutators (lambda (G3990@foo G3991@fields) ((lambda (G3995@gen-name) (begin (set! G3995@gen-name (lambda (G39b8@x) (G3041@datum->syntax G3990@foo (string->symbol (string-append (symbol->string (G3043@syntax->datum G3990@foo)) '"-" (symbol->string (G3043@syntax->datum G39b8@x)) '"-set!"))))) ((letrec ((G3996@f (lambda (G3998@fields) ((lambda (G399a@t) ((lambda (G399c@ls/false) (if G399c@ls/false (apply (lambda () '()) G399c@ls/false) ((lambda (G399e@t) ((lambda (G39a0@ls/false) (if G39a0@ls/false (apply (lambda (G39a2@name G39a3@accessor G39a4@mutator G39a5@rest) (cons G39a4@mutator (G3996@f G39a5@rest))) G39a0@ls/false) ((lambda (G39aa@t) ((lambda (G39ac@ls/false) (if G39ac@ls/false (apply (lambda (G39ae@name G39af@rest) (cons (G3995@gen-name G39ae@name) (G3996@f G39af@rest))) G39ac@ls/false) ((lambda (G39b2@t) ((lambda (G39b4@ls/false) (if G39b4@ls/false (apply (lambda (G39b6@rest) (G3996@f G39b6@rest)) G39b4@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G39b2@t))) (G2f52@syntax-dispatch G39b2@t '(_ . any)))) G39aa@t))) (G2f52@syntax-dispatch G39aa@t '((#(scheme-id mutable) any) . any)))) G399e@t))) (G2f52@syntax-dispatch G399e@t '((#(scheme-id mutable) any any any) . any)))) G399a@t))) (G2f52@syntax-dispatch G399a@t '()))) G3998@fields)))) G3996@f) G3991@fields))) '#f))) (set! G38ed@get-accessors (lambda (G394c@foo G394d@fields) ((lambda (G3951@gen-name) (begin (set! G3951@gen-name (lambda (G398e@x) (G3041@datum->syntax G394c@foo (string->symbol (string-append (symbol->string (G3043@syntax->datum G394c@foo)) '"-" (symbol->string (G3043@syntax->datum G398e@x))))))) (map (lambda (G3952@field) ((lambda (G3954@t) ((lambda (G3956@ls/false) (if (and G3956@ls/false (apply (lambda (G3958@name G3959@accessor G395a@mutator) (G2d53@id? G3959@accessor)) G3956@ls/false)) (apply (lambda (G395e@name G395f@accessor G3960@mutator) G395f@accessor) G3956@ls/false) ((lambda (G3964@t) ((lambda (G3966@ls/false) (if (and G3966@ls/false (apply (lambda (G3968@name G3969@accessor) (G2d53@id? G3969@accessor)) G3966@ls/false)) (apply (lambda (G396c@name G396d@accessor) G396d@accessor) G3966@ls/false) ((lambda (G3970@t) ((lambda (G3972@ls/false) (if (and G3972@ls/false (apply (lambda (G3974@name) (G2d53@id? G3974@name)) G3972@ls/false)) (apply (lambda (G3976@name) (G3951@gen-name G3976@name)) G3972@ls/false) ((lambda (G3978@t) ((lambda (G397a@ls/false) (if (and G397a@ls/false (apply (lambda (G397c@name) (G2d53@id? G397c@name)) G397a@ls/false)) (apply (lambda (G397e@name) (G3951@gen-name G397e@name)) G397a@ls/false) ((lambda (G3980@t) ((lambda (G3982@ls/false) (if (and G3982@ls/false (apply (lambda (G3984@name) (G2d53@id? G3984@name)) G3982@ls/false)) (apply (lambda (G3986@name) (G3951@gen-name G3986@name)) G3982@ls/false) ((lambda (G3988@t) ((lambda (G398a@ls/false) (if G398a@ls/false (apply (lambda (G398c@others) (G303d@syntax-violation '#f '"invalid field spec" G3952@field)) G398a@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3988@t))) (G2f52@syntax-dispatch G3988@t 'any))) G3980@t))) (G2f52@syntax-dispatch G3980@t 'any))) G3978@t))) (G2f52@syntax-dispatch G3978@t '(#(scheme-id immutable) any)))) G3970@t))) (G2f52@syntax-dispatch G3970@t '(#(scheme-id mutable) any)))) G3964@t))) (G2f52@syntax-dispatch G3964@t '(#(scheme-id immutable) any any)))) G3954@t))) (G2f52@syntax-dispatch G3954@t '(#(scheme-id mutable) any any any)))) G3952@field)) G394d@fields))) '#f))) (set! G38ef@enumerate (lambda (G3944@ls) ((letrec ((G3946@f (lambda (G3948@ls G3949@i) (if (null? G3948@ls) '() (cons G3949@i (G3946@f (cdr G3948@ls) (+ G3949@i '1))))))) G3946@f) G3944@ls '0))) (set! G38f1@do-define-record (lambda (G391c@namespec G391d@clause*) ((lambda (G3920@foo) ((lambda (G3922@foo-rtd) ((lambda (G3924@foo-rcd) ((lambda (G3926@protocol) ((lambda (G3928@make-foo) ((lambda (G392a@fields) ((lambda (G392c@idx*) ((lambda (G392e@foo-x*) ((lambda (G3930@set-foo-x!*) ((lambda (G3932@set-foo-idx*) ((lambda (G3934@foo?) ((lambda (G3936@foo-rtd-code) ((lambda (G3938@foo-rcd-code) ((lambda (G393a@protocol-code) ((lambda () (G2f08@bless (cons 'begin (cons (list 'define G3922@foo-rtd G3936@foo-rtd-code) (cons (list 'define G3926@protocol G393a@protocol-code) (cons (list 'define G3924@foo-rcd G3938@foo-rcd-code) (cons (list 'define-syntax G3920@foo (list 'list ''$rtd (list 'syntax G3922@foo-rtd) (list 'syntax G3924@foo-rcd))) (cons (list 'define G3934@foo? (list 'record-predicate G3922@foo-rtd)) (cons (list 'define G3928@make-foo (list 'record-constructor G3924@foo-rcd)) (append (map (lambda (G393c@foo-x G393d@idx) (list 'define G393c@foo-x (list 'record-accessor G3922@foo-rtd G393d@idx))) G392e@foo-x* G392c@idx*) (map (lambda (G3940@set-foo-x! G3941@idx) (list 'define G3940@set-foo-x! (list 'record-mutator G3922@foo-rtd G3941@idx))) G3930@set-foo-x!* G3932@set-foo-idx*))))))))))))) (G38e5@get-protocol-code G391d@clause*))) (G38e3@foo-rcd-code G391d@clause* G3922@foo-rtd G3926@protocol (G38e1@parent-rcd-code G391d@clause*)))) (G38dd@foo-rtd-code G3920@foo G391d@clause* (G38df@parent-rtd-code G391d@clause*)))) (G38d9@get-record-predicate-name G391c@namespec))) (G38e9@get-mutator-indices G392a@fields))) (G38eb@get-mutators G3920@foo G392a@fields))) (G38ed@get-accessors G3920@foo G392a@fields))) (G38ef@enumerate G392a@fields))) (G38e7@get-fields G391d@clause*))) (G38d7@get-record-constructor-name G391c@namespec))) (gensym))) (gensym))) (gensym))) (G38d5@get-record-name G391c@namespec)))) (set! G38f3@verify-clauses (lambda (G38fc@x G38fd@cls*) ((lambda (G3901@valid-kwds G3903@free-id-member?) (begin (set! G3901@valid-kwds (map G2f08@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3903@free-id-member? (lambda (G3918@x G3919@ls) (and (pair? G3919@ls) (or (G2d5b@free-id=? G3918@x (car G3919@ls)) (G3903@free-id-member? G3918@x (cdr G3919@ls)))))) ((letrec ((G3904@f (lambda (G3906@cls* G3907@seen*) (if (not (null? G3906@cls*)) ((lambda (G390a@t) ((lambda (G390c@ls/false) (if G390c@ls/false (apply (lambda (G390e@kwd G390f@rest) (if (or (not (G2d53@id? G390e@kwd)) (not (G3903@free-id-member? G390e@kwd G3901@valid-kwds))) (G303d@syntax-violation '#f '"not a valid define-record-type keyword" G390e@kwd) (if (G2d61@bound-id-member? G390e@kwd G3907@seen*) (G303d@syntax-violation '#f '"duplicate use of keyword " G38fc@x G390e@kwd) (G3904@f (cdr G3906@cls*) (cons G390e@kwd G3907@seen*))))) G390c@ls/false) ((lambda (G3912@t) ((lambda (G3914@ls/false) (if G3914@ls/false (apply (lambda (G3916@cls) (G303d@syntax-violation '#f '"malformed define-record-type clause" G3916@cls)) G3914@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3912@t))) (G2f52@syntax-dispatch G3912@t 'any))) G390a@t))) (G2f52@syntax-dispatch G390a@t '(any . any)))) (car G3906@cls*)) (void))))) G3904@f) G38fd@cls* '()))) '#f '#f))) ((lambda (G38f4@t) ((lambda (G38f6@ls/false) (if G38f6@ls/false (apply (lambda (G38f8@namespec G38f9@clause*) (begin (G38f3@verify-clauses G38d0@x G38f9@clause*) (G38f1@do-define-record G38f8@namespec G38f9@clause*))) G38f6@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G38f4@t))) (G2f52@syntax-dispatch G38f4@t '(_ any . each-any)))) G38d0@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f48@define-condition-type-macro (lambda (G3acc@x) ((lambda (G3acf@mkname) (begin (set! G3acf@mkname (lambda (G3afc@name G3afd@suffix) (G3041@datum->syntax G3afc@name (string->symbol (string-append (symbol->string (G3043@syntax->datum G3afc@name)) G3afd@suffix))))) ((lambda (G3ad0@t) ((lambda (G3ad2@ls/false) (if (and G3ad2@ls/false (apply (lambda (G3ad4@ctxt G3ad5@name G3ad6@super G3ad7@constructor G3ad8@predicate G3ad9@field* G3ada@accessor*) (and (G2d53@id? G3ad5@name) (G2d53@id? G3ad6@super) (G2d53@id? G3ad7@constructor) (G2d53@id? G3ad8@predicate) (for-all G2d53@id? G3ad9@field*) (for-all G2d53@id? G3ada@accessor*))) G3ad2@ls/false)) (apply (lambda (G3ae2@ctxt G3ae3@name G3ae4@super G3ae5@constructor G3ae6@predicate G3ae7@field* G3ae8@accessor*) ((lambda (G3af0@aux-accessor*) (G2f08@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3ae3@name G3ae5@constructor (gensym)) (cons (list 'parent G3ae4@super) (cons (cons 'fields (map (lambda (G3af2@field G3af3@aux) (list 'immutable G3af2@field G3af3@aux)) G3ae7@field* G3af0@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3ae6@predicate (list 'condition-predicate (list 'record-type-descriptor G3ae3@name))) (map (lambda (G3af6@accessor G3af7@aux) (list 'define G3af6@accessor (list 'condition-accessor (list 'record-type-descriptor G3ae3@name) G3af7@aux))) G3ae8@accessor* G3af0@aux-accessor*)))))) (map (lambda (G3afa@x) (gensym)) G3ae8@accessor*))) G3ad2@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3ad0@t))) (G2f52@syntax-dispatch G3ad0@t '(any any any any any . #(each (any any)))))) G3acc@x))) '#f))) (set! G2f4a@incorrect-usage-macro (lambda (G3b00@e) (G303d@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b00@e))) (set! G2f4c@parameterize-macro (lambda (G3b02@e) ((lambda (G3b04@t) ((lambda (G3b06@ls/false) (if G3b06@ls/false (apply (lambda (G3b08@b G3b09@b*) (G2f08@bless (cons 'let (cons '() (cons G3b08@b G3b09@b*))))) G3b06@ls/false) ((lambda (G3b0c@t) ((lambda (G3b0e@ls/false) (if G3b0e@ls/false (apply (lambda (G3b10@olhs* G3b11@orhs* G3b12@b G3b13@b*) ((lambda (G3b18@lhs* G3b19@rhs*) (G2f08@bless (cons (list 'lambda (append G3b18@lhs* G3b19@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b1c@lhs G3b1d@rhs) (list 'let (list (list 't (list G3b1c@lhs))) (list G3b1c@lhs G3b1d@rhs) (cons 'set! (cons G3b1d@rhs '(t))))) G3b18@lhs* G3b19@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b12@b G3b13@b*))) '(swap)))))) (append G3b10@olhs* G3b11@orhs*)))) (G302b@generate-temporaries G3b10@olhs*) (G302b@generate-temporaries G3b11@orhs*))) G3b0e@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3b0c@t))) (G2f52@syntax-dispatch G3b0c@t '(_ #(each (any any)) any . each-any)))) G3b04@t))) (G2f52@syntax-dispatch G3b04@t '(_ () any . each-any)))) G3b02@e))) (set! G2f4e@foreign-call-transformer (lambda (G3b20@e G3b21@r G3b22@mr) ((lambda (G3b26@t) ((lambda (G3b28@ls/false) (if G3b28@ls/false (apply (lambda (G3b2a@name G3b2b@arg*) (cons 'foreign-call (cons (G2f76@chi-expr G3b2a@name G3b21@r G3b22@mr) (G2f72@chi-expr* G3b2b@arg* G3b21@r G3b22@mr)))) G3b28@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3b26@t))) (G2f52@syntax-dispatch G3b26@t '(_ any . each-any)))) G3b20@e))) (set! G2f50@convert-pattern (lambda (G3b2e@pattern G3b2f@keys) ((lambda (G3b33@cvt* G3b35@cvt) (begin (set! G3b33@cvt* (lambda (G3bc4@p* G3bc5@n G3bc6@ids) (if (null? G3bc4@p*) (values '() G3bc6@ids) (call-with-values (lambda () (G3b33@cvt* (cdr G3bc4@p*) G3bc5@n G3bc6@ids)) (lambda (G3bcc@G3bca G3bcd@G3bcb) ((lambda (G3bd0@ids G3bd1@y) (call-with-values (lambda () (G3b35@cvt (car G3bc4@p*) G3bc5@n G3bd0@ids)) (lambda (G3bd6@G3bd4 G3bd7@G3bd5) ((lambda (G3bda@ids G3bdb@x) (values (cons G3bdb@x G3bd1@y) G3bda@ids)) G3bd7@G3bd5 G3bd6@G3bd4)))) G3bcd@G3bcb G3bcc@G3bca)))))) (set! G3b35@cvt (lambda (G3b36@p G3b37@n G3b38@ids) ((lambda (G3b3c@t) ((lambda (G3b3e@ls/false) (if (and G3b3e@ls/false (apply (lambda (G3b40@id) (G2d53@id? G3b40@id)) G3b3e@ls/false)) (apply (lambda (G3b42@id) (if (G2d61@bound-id-member? G3b36@p G3b2f@keys) (values (vector 'free-id G3b36@p) G3b38@ids) (if (G2d5b@free-id=? G3b36@p (G2edc@scheme-stx '_)) (values '_ G3b38@ids) (values 'any (cons (cons G3b36@p G3b37@n) G3b38@ids))))) G3b3e@ls/false) ((lambda (G3b44@t) ((lambda (G3b46@ls/false) (if (and G3b46@ls/false (apply (lambda (G3b48@p G3b49@dots) (G2f54@ellipsis? G3b49@dots)) G3b46@ls/false)) (apply (lambda (G3b4c@p G3b4d@dots) (call-with-values (lambda () (G3b35@cvt G3b4c@p (+ G3b37@n '1) G3b38@ids)) (lambda (G3b52@G3b50 G3b53@G3b51) ((lambda (G3b56@ids G3b57@p) (values (if (eq? G3b57@p 'any) 'each-any (vector 'each G3b57@p)) G3b56@ids)) G3b53@G3b51 G3b52@G3b50)))) G3b46@ls/false) ((lambda (G3b5a@t) ((lambda (G3b5c@ls/false) (if (and G3b5c@ls/false (apply (lambda (G3b5e@x G3b5f@dots G3b60@ys G3b61@z) (G2f54@ellipsis? G3b5f@dots)) G3b5c@ls/false)) (apply (lambda (G3b66@x G3b67@dots G3b68@ys G3b69@z) (call-with-values (lambda () (G3b35@cvt G3b69@z G3b37@n G3b38@ids)) (lambda (G3b70@G3b6e G3b71@G3b6f) ((lambda (G3b74@ids G3b75@z) (call-with-values (lambda () (G3b33@cvt* G3b68@ys G3b37@n G3b74@ids)) (lambda (G3b7a@G3b78 G3b7b@G3b79) ((lambda (G3b7e@ids G3b7f@ys) (call-with-values (lambda () (G3b35@cvt G3b66@x (+ G3b37@n '1) G3b7e@ids)) (lambda (G3b84@G3b82 G3b85@G3b83) ((lambda (G3b88@ids G3b89@x) (values (vector 'each+ G3b89@x (reverse G3b7f@ys) G3b75@z) G3b88@ids)) G3b85@G3b83 G3b84@G3b82)))) G3b7b@G3b79 G3b7a@G3b78)))) G3b71@G3b6f G3b70@G3b6e)))) G3b5c@ls/false) ((lambda (G3b8c@t) ((lambda (G3b8e@ls/false) (if G3b8e@ls/false (apply (lambda (G3b90@x G3b91@y) (call-with-values (lambda () (G3b35@cvt G3b91@y G3b37@n G3b38@ids)) (lambda (G3b96@G3b94 G3b97@G3b95) ((lambda (G3b9a@ids G3b9b@y) (call-with-values (lambda () (G3b35@cvt G3b90@x G3b37@n G3b9a@ids)) (lambda (G3ba0@G3b9e G3ba1@G3b9f) ((lambda (G3ba4@ids G3ba5@x) (values (cons G3ba5@x G3b9b@y) G3ba4@ids)) G3ba1@G3b9f G3ba0@G3b9e)))) G3b97@G3b95 G3b96@G3b94)))) G3b8e@ls/false) ((lambda (G3ba8@t) ((lambda (G3baa@ls/false) (if G3baa@ls/false (apply (lambda () (values '() G3b38@ids)) G3baa@ls/false) ((lambda (G3bac@t) ((lambda (G3bae@ls/false) (if (and G3bae@ls/false (apply (lambda (G3bb0@p) (not (G2d1b@stx? G3bb0@p))) G3bae@ls/false)) (apply (lambda (G3bb2@p) (call-with-values (lambda () (G3b35@cvt G3bb2@p G3b37@n G3b38@ids)) (lambda (G3bb6@G3bb4 G3bb7@G3bb5) ((lambda (G3bba@ids G3bbb@p) (values (vector 'vector G3bbb@p) G3bba@ids)) G3bb7@G3bb5 G3bb6@G3bb4)))) G3bae@ls/false) ((lambda (G3bbe@t) ((lambda (G3bc0@ls/false) (if G3bc0@ls/false (apply (lambda (G3bc2@datum) (values (vector 'atom (G2d69@stx->datum G3bc2@datum)) G3b38@ids)) G3bc0@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3bbe@t))) (G2f52@syntax-dispatch G3bbe@t 'any))) G3bac@t))) (G2f52@syntax-dispatch G3bac@t '#(vector each-any)))) G3ba8@t))) (G2f52@syntax-dispatch G3ba8@t '()))) G3b8c@t))) (G2f52@syntax-dispatch G3b8c@t '(any . any)))) G3b5a@t))) (G2f52@syntax-dispatch G3b5a@t '(any any . #(each+ any () any))))) G3b44@t))) (G2f52@syntax-dispatch G3b44@t '(any any)))) G3b3c@t))) (G2f52@syntax-dispatch G3b3c@t 'any))) G3b36@p))) (G3b35@cvt G3b2e@pattern '0 '()))) '#f '#f))) (set! G2f52@syntax-dispatch ((lambda () ((lambda (G3bdf@stx^ G3be1@match-each G3be3@match-each+ G3be5@match-each-any G3be7@match-empty G3be9@combine G3beb@match* G3bed@match) (begin (set! G3bdf@stx^ (lambda (G3ca8@e G3ca9@m* G3caa@s* G3cab@ae*) (if (and (null? G3ca9@m*) (null? G3caa@s*) (null? G3cab@ae*)) G3ca8@e (G2d3b@mkstx G3ca8@e G3ca9@m* G3caa@s* G3cab@ae*)))) (set! G3be1@match-each (lambda (G3c8b@e G3c8c@p G3c8d@m* G3c8e@s* G3c8f@ae*) (if (pair? G3c8b@e) ((lambda (G3c95@first) (and G3c95@first ((lambda (G3c97@rest) (and G3c97@rest (cons G3c95@first G3c97@rest))) (G3be1@match-each (cdr G3c8b@e) G3c8c@p G3c8d@m* G3c8e@s* G3c8f@ae*)))) (G3bed@match (car G3c8b@e) G3c8c@p G3c8d@m* G3c8e@s* G3c8f@ae* '())) (if (null? G3c8b@e) '() (if (G2d1b@stx? G3c8b@e) (and (not (G2ccd@top-marked? G3c8d@m*)) (call-with-values (lambda () (G2d39@join-wraps G3c8d@m* G3c8e@s* G3c8f@ae* G3c8b@e)) (lambda (G3c9c@G3c99 G3c9d@G3c9a G3c9e@G3c9b) ((lambda (G3ca2@ae* G3ca3@s* G3ca4@m*) (G3be1@match-each (G2d1f@stx-expr G3c8b@e) G3c8c@p G3ca4@m* G3ca3@s* G3ca2@ae*)) G3c9e@G3c9b G3c9d@G3c9a G3c9c@G3c99)))) (if (G28e4@G280f@annotation? G3c8b@e) (G3be1@match-each (G28e6@G2813@annotation-expression G3c8b@e) G3c8c@p G3c8d@m* G3c8e@s* G3c8f@ae*) '#f)))))) (set! G3be3@match-each+ (lambda (G3c51@e G3c52@x-pat G3c53@y-pat G3c54@z-pat G3c55@m* G3c56@s* G3c57@ae* G3c58@r) ((letrec ((G3c61@f (lambda (G3c63@e G3c64@m* G3c65@s* G3c66@ae*) (if (pair? G3c63@e) (call-with-values (lambda () (G3c61@f (cdr G3c63@e) G3c64@m* G3c65@s* G3c66@ae*)) (lambda (G3c6e@G3c6b G3c6f@G3c6c G3c70@G3c6d) ((lambda (G3c74@r G3c75@y-pat G3c76@xr*) (if G3c74@r (if (null? G3c75@y-pat) ((lambda (G3c7a@xr) (if G3c7a@xr (values (cons G3c7a@xr G3c76@xr*) G3c75@y-pat G3c74@r) (values '#f '#f '#f))) (G3bed@match (car G3c63@e) G3c52@x-pat G3c64@m* G3c65@s* G3c66@ae* '())) (values '() (cdr G3c75@y-pat) (G3bed@match (car G3c63@e) (car G3c75@y-pat) G3c64@m* G3c65@s* G3c66@ae* G3c74@r))) (values '#f '#f '#f))) G3c70@G3c6d G3c6f@G3c6c G3c6e@G3c6b))) (if (G2d1b@stx? G3c63@e) (if (G2ccd@top-marked? G3c64@m*) (values '() G3c53@y-pat (G3bed@match G3c63@e G3c54@z-pat G3c64@m* G3c65@s* G3c66@ae* G3c58@r)) (call-with-values (lambda () (G2d39@join-wraps G3c64@m* G3c65@s* G3c66@ae* G3c63@e)) (lambda (G3c7f@G3c7c G3c80@G3c7d G3c81@G3c7e) ((lambda (G3c85@ae* G3c86@s* G3c87@m*) (G3c61@f (G2d1f@stx-expr G3c63@e) G3c87@m* G3c86@s* G3c85@ae*)) G3c81@G3c7e G3c80@G3c7d G3c7f@G3c7c)))) (if (G28e4@G280f@annotation? G3c63@e) (G3c61@f (G28e6@G2813@annotation-expression G3c63@e) G3c64@m* G3c65@s* G3c66@ae*) (values '() G3c53@y-pat (G3bed@match G3c63@e G3c54@z-pat G3c64@m* G3c65@s* G3c66@ae* G3c58@r)))))))) G3c61@f) G3c51@e G3c55@m* G3c56@s* G3c57@ae*))) (set! G3be5@match-each-any (lambda (G3c38@e G3c39@m* G3c3a@s* G3c3b@ae*) (if (pair? G3c38@e) ((lambda (G3c40@l) (and G3c40@l (cons (G3bdf@stx^ (car G3c38@e) G3c39@m* G3c3a@s* G3c3b@ae*) G3c40@l))) (G3be5@match-each-any (cdr G3c38@e) G3c39@m* G3c3a@s* G3c3b@ae*)) (if (null? G3c38@e) '() (if (G2d1b@stx? G3c38@e) (and (not (G2ccd@top-marked? G3c39@m*)) (call-with-values (lambda () (G2d39@join-wraps G3c39@m* G3c3a@s* G3c3b@ae* G3c38@e)) (lambda (G3c45@G3c42 G3c46@G3c43 G3c47@G3c44) ((lambda (G3c4b@ae* G3c4c@s* G3c4d@m*) (G3be5@match-each-any (G2d1f@stx-expr G3c38@e) G3c4d@m* G3c4c@s* G3c4b@ae*)) G3c47@G3c44 G3c46@G3c43 G3c45@G3c42)))) (if (G28e4@G280f@annotation? G3c38@e) (G3be5@match-each-any (G28e6@G2813@annotation-expression G3c38@e) G3c39@m* G3c3a@s* G3c3b@ae*) '#f)))))) (set! G3be7@match-empty (lambda (G3c32@p G3c33@r) (if (null? G3c32@p) G3c33@r (if (eq? G3c32@p '_) G3c33@r (if (eq? G3c32@p 'any) (cons '() G3c33@r) (if (pair? G3c32@p) (G3be7@match-empty (car G3c32@p) (G3be7@match-empty (cdr G3c32@p) G3c33@r)) (if (eq? G3c32@p 'each-any) (cons '() G3c33@r) ((lambda (G3c36@t) (if (memv G3c36@t '(each)) (G3be7@match-empty (vector-ref G3c32@p '1) G3c33@r) (if (memv G3c36@t '(each+)) (G3be7@match-empty (vector-ref G3c32@p '1) (G3be7@match-empty (reverse (vector-ref G3c32@p '2)) (G3be7@match-empty (vector-ref G3c32@p '3) G3c33@r))) (if (memv G3c36@t '(free-id atom)) G3c33@r (if (memv G3c36@t '(scheme-id atom)) G3c33@r (if (memv G3c36@t '(vector)) (G3be7@match-empty (vector-ref G3c32@p '1) G3c33@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c32@p))))))) (vector-ref G3c32@p '0))))))))) (set! G3be9@combine (lambda (G3c2e@r* G3c2f@r) (if (null? (car G3c2e@r*)) G3c2f@r (cons (map car G3c2e@r*) (G3be9@combine (map cdr G3c2e@r*) G3c2f@r))))) (set! G3beb@match* (lambda (G3c0d@e G3c0e@p G3c0f@m* G3c10@s* G3c11@ae* G3c12@r) (if (null? G3c0e@p) (and (null? G3c0d@e) G3c12@r) (if (pair? G3c0e@p) (and (pair? G3c0d@e) (G3bed@match (car G3c0d@e) (car G3c0e@p) G3c0f@m* G3c10@s* G3c11@ae* (G3bed@match (cdr G3c0d@e) (cdr G3c0e@p) G3c0f@m* G3c10@s* G3c11@ae* G3c12@r))) (if (eq? G3c0e@p 'each-any) ((lambda (G3c19@l) (and G3c19@l (cons G3c19@l G3c12@r))) (G3be5@match-each-any G3c0d@e G3c0f@m* G3c10@s* G3c11@ae*)) ((lambda (G3c1b@t) (if (memv G3c1b@t '(each)) (if (null? G3c0d@e) (G3be7@match-empty (vector-ref G3c0e@p '1) G3c12@r) ((lambda (G3c1d@r*) (and G3c1d@r* (G3be9@combine G3c1d@r* G3c12@r))) (G3be1@match-each G3c0d@e (vector-ref G3c0e@p '1) G3c0f@m* G3c10@s* G3c11@ae*))) (if (memv G3c1b@t '(free-id)) (and (symbol? G3c0d@e) (G2ccd@top-marked? G3c0f@m*) (G2d5b@free-id=? (G3bdf@stx^ G3c0d@e G3c0f@m* G3c10@s* G3c11@ae*) (vector-ref G3c0e@p '1)) G3c12@r) (if (memv G3c1b@t '(scheme-id)) (and (symbol? G3c0d@e) (G2ccd@top-marked? G3c0f@m*) (G2d5b@free-id=? (G3bdf@stx^ G3c0d@e G3c0f@m* G3c10@s* G3c11@ae*) (G2edc@scheme-stx (vector-ref G3c0e@p '1))) G3c12@r) (if (memv G3c1b@t '(each+)) (call-with-values (lambda () (G3be3@match-each+ G3c0d@e (vector-ref G3c0e@p '1) (vector-ref G3c0e@p '2) (vector-ref G3c0e@p '3) G3c0f@m* G3c10@s* G3c11@ae* G3c12@r)) (lambda (G3c22@G3c1f G3c23@G3c20 G3c24@G3c21) ((lambda (G3c28@r G3c29@y-pat G3c2a@xr*) (and G3c28@r (null? G3c29@y-pat) (if (null? G3c2a@xr*) (G3be7@match-empty (vector-ref G3c0e@p '1) G3c28@r) (G3be9@combine G3c2a@xr* G3c28@r)))) G3c24@G3c21 G3c23@G3c20 G3c22@G3c1f))) (if (memv G3c1b@t '(atom)) (and (fast-equal? (vector-ref G3c0e@p '1) (G2d67@strip G3c0d@e G3c0f@m*)) G3c12@r) (if (memv G3c1b@t '(vector)) (and (vector? G3c0d@e) (G3bed@match (vector->list G3c0d@e) (vector-ref G3c0e@p '1) G3c0f@m* G3c10@s* G3c11@ae* G3c12@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c0e@p)))))))) (vector-ref G3c0e@p '0))))))) (set! G3bed@match (lambda (G3bf2@e G3bf3@p G3bf4@m* G3bf5@s* G3bf6@ae* G3bf7@r) (if (not G3bf7@r) '#f (if (eq? G3bf3@p '_) G3bf7@r (if (eq? G3bf3@p 'any) (cons (G3bdf@stx^ G3bf2@e G3bf4@m* G3bf5@s* G3bf6@ae*) G3bf7@r) (if (G2d1b@stx? G3bf2@e) (and (not (G2ccd@top-marked? G3bf4@m*)) (call-with-values (lambda () (G2d39@join-wraps G3bf4@m* G3bf5@s* G3bf6@ae* G3bf2@e)) (lambda (G3c01@G3bfe G3c02@G3bff G3c03@G3c00) ((lambda (G3c07@ae* G3c08@s* G3c09@m*) (G3bed@match (G2d1f@stx-expr G3bf2@e) G3bf3@p G3c09@m* G3c08@s* G3c07@ae* G3bf7@r)) G3c03@G3c00 G3c02@G3bff G3c01@G3bfe)))) (if (G28e4@G280f@annotation? G3bf2@e) (G3bed@match (G28e6@G2813@annotation-expression G3bf2@e) G3bf3@p G3bf4@m* G3bf5@s* G3bf6@ae* G3bf7@r) (G3beb@match* G3bf2@e G3bf3@p G3bf4@m* G3bf5@s* G3bf6@ae* G3bf7@r)))))))) (lambda (G3bee@e G3bef@p) (G3bed@match G3bee@e G3bef@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f54@ellipsis? (lambda (G3cb0@x) (and (G2d53@id? G3cb0@x) (G2d5b@free-id=? G3cb0@x (G2edc@scheme-stx '...))))) (set! G2f56@underscore? (lambda (G3cb2@x) (and (G2d53@id? G3cb2@x) (G2d5b@free-id=? G3cb2@x (G2edc@scheme-stx '_))))) (set! G2f58@verify-literals (lambda (G3cb4@lits G3cb5@expr) (for-each (lambda (G3cb8@x) (if (or (not (G2d53@id? G3cb8@x)) (G2f54@ellipsis? G3cb8@x) (G2f56@underscore? G3cb8@x)) (G303d@syntax-violation '#f '"invalid literal" G3cb5@expr G3cb8@x) (void))) G3cb4@lits))) (set! G2f5a@syntax-case-transformer ((lambda () ((lambda (G3cbb@build-dispatch-call G3cbd@invalid-ids-error G3cbf@gen-clause G3cc1@gen-syntax-case) (begin (set! G3cbb@build-dispatch-call (lambda (G3d2a@pvars G3d2b@expr G3d2c@y G3d2d@r G3d2e@mr) ((lambda (G3d34@ids G3d35@levels) ((lambda (G3d38@labels G3d39@new-vars) ((lambda (G3d3c@body) (list '(primitive apply) (G2cad@G2beb@build-lambda '#f G3d39@new-vars G3d3c@body) G3d2c@y)) (G2f76@chi-expr (G2d3f@add-subst (G2d0e@make-full-rib G3d34@ids G3d38@labels) G3d2b@expr) (append (map (lambda (G3d3e@label G3d3f@var G3d40@level) (cons G3d3e@label (G2d73@make-binding 'syntax (cons G3d3f@var G3d40@level)))) G3d38@labels G3d39@new-vars (map cdr G3d2a@pvars)) G3d2d@r) G3d2e@mr))) (map G2cd3@gen-label G3d34@ids) (map G2ccf@gen-lexical G3d34@ids))) (map car G3d2a@pvars) (map cdr G3d2a@pvars)))) (set! G3cbd@invalid-ids-error (lambda (G3d1e@id* G3d1f@e G3d20@class) ((letrec ((G3d24@find (lambda (G3d26@id* G3d27@ok*) (if (null? G3d26@id*) (G303d@syntax-violation '#f '"invalid syntax" G3d1f@e) (if (G2d53@id? (car G3d26@id*)) (if (G2d61@bound-id-member? (car G3d26@id*) G3d27@ok*) (G3039@syntax-error (car G3d26@id*) '"duplicate " G3d20@class) (G3d24@find (cdr G3d26@id*) (cons (car G3d26@id*) G3d27@ok*))) (G3039@syntax-error (car G3d26@id*) '"invalid " G3d20@class)))))) G3d24@find) G3d1e@id* '()))) (set! G3cbf@gen-clause (lambda (G3cf8@x G3cf9@keys G3cfa@clauses G3cfb@r G3cfc@mr G3cfd@pat G3cfe@fender G3cff@expr) (call-with-values (lambda () (G2f50@convert-pattern G3cfd@pat G3cf9@keys)) (lambda (G3d0a@G3d08 G3d0b@G3d09) ((lambda (G3d0e@pvars G3d0f@p) (if (not (G2d5f@distinct-bound-ids? (map car G3d0e@pvars))) (G3cbd@invalid-ids-error (map car G3d0e@pvars) G3cfd@pat '"pattern variable") (if (not (for-all (lambda (G3d12@x) (not (G2f54@ellipsis? (car G3d12@x)))) G3d0e@pvars)) (G303d@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3cfd@pat) ((lambda (G3d14@y) ((lambda (G3d16@test) ((lambda (G3d18@conseq) ((lambda (G3d1a@altern) (list (G2cad@G2beb@build-lambda '#f (list G3d14@y) (list 'if G3d16@test G3d18@conseq G3d1a@altern)) (list '(primitive syntax-dispatch) G3cf8@x (list 'quote G3d0f@p)))) (G3cc1@gen-syntax-case G3cf8@x G3cf9@keys G3cfa@clauses G3cfb@r G3cfc@mr))) (G3cbb@build-dispatch-call G3d0e@pvars G3cff@expr G3d14@y G3cfb@r G3cfc@mr))) (if (eq? G3cfe@fender '#t) G3d14@y ((lambda (G3d1c@call) (list 'if G3d14@y G3d1c@call (list 'quote '#f))) (G3cbb@build-dispatch-call G3d0e@pvars G3cfe@fender G3d14@y G3cfb@r G3cfc@mr))))) (G2ccf@gen-lexical 'tmp))))) G3d0b@G3d09 G3d0a@G3d08))))) (set! G3cc1@gen-syntax-case (lambda (G3cd6@x G3cd7@keys G3cd8@clauses G3cd9@r G3cda@mr) (if (null? G3cd8@clauses) (list '(primitive syntax-error) G3cd6@x) ((lambda (G3ce0@t) ((lambda (G3ce2@ls/false) (if G3ce2@ls/false (apply (lambda (G3ce4@pat G3ce5@expr) (if (and (G2d53@id? G3ce4@pat) (not (G2d61@bound-id-member? G3ce4@pat G3cd7@keys)) (not (G2f54@ellipsis? G3ce4@pat))) (if (G2d5b@free-id=? G3ce4@pat (G2edc@scheme-stx '_)) (G2f76@chi-expr G3ce5@expr G3cd9@r G3cda@mr) ((lambda (G3ce8@lab G3ce9@lex) ((lambda (G3cec@body) (list (G2cad@G2beb@build-lambda '#f (list G3ce9@lex) G3cec@body) G3cd6@x)) (G2f76@chi-expr (G2d3f@add-subst (G2d0e@make-full-rib (list G3ce4@pat) (list G3ce8@lab)) G3ce5@expr) (cons (cons G3ce8@lab (G2d73@make-binding 'syntax (cons G3ce9@lex '0))) G3cd9@r) G3cda@mr))) (G2cd3@gen-label G3ce4@pat) (G2ccf@gen-lexical G3ce4@pat))) (G3cbf@gen-clause G3cd6@x G3cd7@keys (cdr G3cd8@clauses) G3cd9@r G3cda@mr G3ce4@pat '#t G3ce5@expr))) G3ce2@ls/false) ((lambda (G3cee@t) ((lambda (G3cf0@ls/false) (if G3cf0@ls/false (apply (lambda (G3cf2@pat G3cf3@fender G3cf4@expr) (G3cbf@gen-clause G3cd6@x G3cd7@keys (cdr G3cd8@clauses) G3cd9@r G3cda@mr G3cf2@pat G3cf3@fender G3cf4@expr)) G3cf0@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3cee@t))) (G2f52@syntax-dispatch G3cee@t '(any any any)))) G3ce0@t))) (G2f52@syntax-dispatch G3ce0@t '(any any)))) (car G3cd8@clauses))))) (lambda (G3cc2@e G3cc3@r G3cc4@mr) ((lambda (G3cc8@t) ((lambda (G3cca@ls/false) (if G3cca@ls/false (apply (lambda (G3ccc@expr G3ccd@keys G3cce@clauses) (begin (G2f58@verify-literals G3ccd@keys G3cc2@e) ((lambda (G3cd2@x) ((lambda (G3cd4@body) (list (G2cad@G2beb@build-lambda '#f (list G3cd2@x) G3cd4@body) (G2f76@chi-expr G3ccc@expr G3cc3@r G3cc4@mr))) (G3cc1@gen-syntax-case G3cd2@x G3ccd@keys G3cce@clauses G3cc3@r G3cc4@mr))) (G2ccf@gen-lexical 'tmp)))) G3cca@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3cc8@t))) (G2f52@syntax-dispatch G3cc8@t '(_ any each-any . each-any)))) G3cc2@e)))) '#f '#f '#f '#f)))) (set! G2f5c@ellipsis-map (lambda (G3d44@proc G3d45@ls . G3d48@ls*) ((lambda (G3d4b@who) (begin (set! G3d4b@who '...) (begin (if (not (list? G3d45@ls)) (assertion-violation G3d4b@who '"not a list" G3d45@ls) (void)) (if (not (null? G3d48@ls*)) ((lambda (G3d4c@n) (for-each (lambda (G3d4e@x) (begin (if (not (list? G3d4e@x)) (assertion-violation G3d4b@who '"not a list" G3d4e@x) (void)) (if (not (= (length G3d4e@x) G3d4c@n)) (assertion-violation G3d4b@who '"length mismatch" G3d45@ls G3d4e@x) (void)))) G3d48@ls*)) (length G3d45@ls)) (void)) (apply map G3d44@proc G3d45@ls G3d48@ls*)))) '#f))) (set! G2f5e@syntax-transformer ((lambda () ((lambda (G3d51@gen-syntax G3d53@gen-ref G3d55@gen-append G3d57@gen-mappend G3d59@gen-map G3d5b@gen-cons G3d5d@gen-vector G3d5f@regen) (begin (set! G3d51@gen-syntax (lambda (G3dc4@src G3dc5@e G3dc6@r G3dc7@maps G3dc8@ellipsis? G3dc9@vec?) ((lambda (G3dd0@t) ((lambda (G3dd2@ls/false) (if (and G3dd2@ls/false (apply (lambda (G3dd4@dots) (G3dc8@ellipsis? G3dd4@dots)) G3dd2@ls/false)) (apply (lambda (G3dd6@dots) (G303d@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc4@src)) G3dd2@ls/false) ((lambda (G3dd8@t) ((lambda (G3dda@ls/false) (if (and G3dda@ls/false (apply (lambda (G3ddc@id) (G2d53@id? G3ddc@id)) G3dda@ls/false)) (apply (lambda (G3dde@id) ((lambda (G3de0@label) ((lambda (G3de2@b) ((lambda () (if (eq? (G2d75@binding-type G3de2@b) 'syntax) (call-with-values (lambda () ((lambda (G3de6@var.lev) (G3d53@gen-ref G3dc4@src (car G3de6@var.lev) (cdr G3de6@var.lev) G3dc7@maps)) (G2d77@binding-value G3de2@b))) (lambda (G3de8@G3de4 G3de9@G3de5) ((lambda (G3dec@maps G3ded@var) (values (list 'ref G3ded@var) G3dec@maps)) G3de9@G3de5 G3de8@G3de4))) (values (list 'quote G3dc5@e) G3dc7@maps))))) (G2d71@label->binding G3de0@label G3dc6@r))) (G2d6d@id->label G3dc5@e))) G3dda@ls/false) ((lambda (G3df0@t) ((lambda (G3df2@ls/false) (if (and G3df2@ls/false (apply (lambda (G3df4@dots G3df5@e) (G3dc8@ellipsis? G3df4@dots)) G3df2@ls/false)) (apply (lambda (G3df8@dots G3df9@e) (if G3dc9@vec? (G303d@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dc4@src) (G3d51@gen-syntax G3dc4@src G3df9@e G3dc6@r G3dc7@maps (lambda (G3dfc@x) '#f) '#f))) G3df2@ls/false) ((lambda (G3dfe@t) ((lambda (G3e00@ls/false) (if (and G3e00@ls/false (apply (lambda (G3e02@x G3e03@dots G3e04@y) (G3dc8@ellipsis? G3e03@dots)) G3e00@ls/false)) (apply (lambda (G3e08@x G3e09@dots G3e0a@y) ((letrec ((G3e0e@f (lambda (G3e10@y G3e11@k) ((lambda (G3e14@t) ((lambda (G3e16@ls/false) (if G3e16@ls/false (apply (lambda () (G3e11@k G3dc7@maps)) G3e16@ls/false) ((lambda (G3e18@t) ((lambda (G3e1a@ls/false) (if (and G3e1a@ls/false (apply (lambda (G3e1c@dots G3e1d@y) (G3dc8@ellipsis? G3e1c@dots)) G3e1a@ls/false)) (apply (lambda (G3e20@dots G3e21@y) (G3e0e@f G3e21@y (lambda (G3e24@maps) (call-with-values (lambda () (G3e11@k (cons '() G3e24@maps))) (lambda (G3e28@G3e26 G3e29@G3e27) ((lambda (G3e2c@maps G3e2d@x) (if (null? (car G3e2c@maps)) (G303d@syntax-violation '#f '"extra ellipsis in syntax form" G3dc4@src) (values (G3d57@gen-mappend G3e2d@x (car G3e2c@maps)) (cdr G3e2c@maps)))) G3e29@G3e27 G3e28@G3e26)))))) G3e1a@ls/false) ((lambda (G3e30@t) ((lambda (G3e32@ls/false) (if G3e32@ls/false (apply (lambda () (call-with-values (lambda () (G3d51@gen-syntax G3dc4@src G3e10@y G3dc6@r G3dc7@maps G3dc8@ellipsis? G3dc9@vec?)) (lambda (G3e36@G3e34 G3e37@G3e35) ((lambda (G3e3a@maps G3e3b@y) (call-with-values (lambda () (G3e11@k G3e3a@maps)) (lambda (G3e40@G3e3e G3e41@G3e3f) ((lambda (G3e44@maps G3e45@x) (values (G3d55@gen-append G3e45@x G3e3b@y) G3e44@maps)) G3e41@G3e3f G3e40@G3e3e)))) G3e37@G3e35 G3e36@G3e34)))) G3e32@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3e30@t))) (G2f52@syntax-dispatch G3e30@t '_))) G3e18@t))) (G2f52@syntax-dispatch G3e18@t '(any . any)))) G3e14@t))) (G2f52@syntax-dispatch G3e14@t '()))) G3e10@y)))) G3e0e@f) G3e0a@y (lambda (G3e48@maps) (call-with-values (lambda () (G3d51@gen-syntax G3dc4@src G3e08@x G3dc6@r (cons '() G3e48@maps) G3dc8@ellipsis? '#f)) (lambda (G3e4c@G3e4a G3e4d@G3e4b) ((lambda (G3e50@maps G3e51@x) (if (null? (car G3e50@maps)) (G303d@syntax-violation '#f '"extra ellipsis in syntax form" G3dc4@src) (values (G3d59@gen-map G3e51@x (car G3e50@maps)) (cdr G3e50@maps)))) G3e4d@G3e4b G3e4c@G3e4a)))))) G3e00@ls/false) ((lambda (G3e54@t) ((lambda (G3e56@ls/false) (if G3e56@ls/false (apply (lambda (G3e58@x G3e59@y) (call-with-values (lambda () (G3d51@gen-syntax G3dc4@src G3e58@x G3dc6@r G3dc7@maps G3dc8@ellipsis? '#f)) (lambda (G3e5e@G3e5c G3e5f@G3e5d) ((lambda (G3e62@maps G3e63@xnew) (call-with-values (lambda () (G3d51@gen-syntax G3dc4@src G3e59@y G3dc6@r G3e62@maps G3dc8@ellipsis? G3dc9@vec?)) (lambda (G3e68@G3e66 G3e69@G3e67) ((lambda (G3e6c@maps G3e6d@ynew) (values (G3d5b@gen-cons G3dc5@e G3e58@x G3e59@y G3e63@xnew G3e6d@ynew) G3e6c@maps)) G3e69@G3e67 G3e68@G3e66)))) G3e5f@G3e5d G3e5e@G3e5c)))) G3e56@ls/false) ((lambda (G3e70@t) ((lambda (G3e72@ls/false) (if G3e72@ls/false (apply (lambda (G3e74@ls) (call-with-values (lambda () (G3d51@gen-syntax G3dc4@src G3e74@ls G3dc6@r G3dc7@maps G3dc8@ellipsis? '#t)) (lambda (G3e78@G3e76 G3e79@G3e77) ((lambda (G3e7c@maps G3e7d@lsnew) (values (G3d5d@gen-vector G3dc5@e G3e74@ls G3e7d@lsnew) G3e7c@maps)) G3e79@G3e77 G3e78@G3e76)))) G3e72@ls/false) ((lambda (G3e80@t) ((lambda (G3e82@ls/false) (if G3e82@ls/false (apply (lambda () (values (list 'quote G3dc5@e) G3dc7@maps)) G3e82@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3e80@t))) (G2f52@syntax-dispatch G3e80@t '_))) G3e70@t))) (G2f52@syntax-dispatch G3e70@t '#(vector each-any)))) G3e54@t))) (G2f52@syntax-dispatch G3e54@t '(any . any)))) G3dfe@t))) (G2f52@syntax-dispatch G3dfe@t '(any any . any)))) G3df0@t))) (G2f52@syntax-dispatch G3df0@t '(any any)))) G3dd8@t))) (G2f52@syntax-dispatch G3dd8@t 'any))) G3dd0@t))) (G2f52@syntax-dispatch G3dd0@t 'any))) G3dc5@e))) (set! G3d53@gen-ref (lambda (G3dac@src G3dad@var G3dae@level G3daf@maps) (if (= G3dae@level '0) (values G3dad@var G3daf@maps) (if (null? G3daf@maps) (G303d@syntax-violation '#f '"missing ellipsis in syntax form" G3dac@src) (call-with-values (lambda () (G3d53@gen-ref G3dac@src G3dad@var (- G3dae@level '1) (cdr G3daf@maps))) (lambda (G3db6@G3db4 G3db7@G3db5) ((lambda (G3dba@outer-maps G3dbb@outer-var) ((lambda (G3dbe@t) (if G3dbe@t ((lambda (G3dc0@b) (values (cdr G3dc0@b) G3daf@maps)) G3dbe@t) ((lambda (G3dc2@inner-var) (values G3dc2@inner-var (cons (cons (cons G3dbb@outer-var G3dc2@inner-var) (car G3daf@maps)) G3dba@outer-maps))) (G2ccf@gen-lexical 'tmp)))) (assq G3dbb@outer-var (car G3daf@maps)))) G3db7@G3db5 G3db6@G3db4))))))) (set! G3d55@gen-append (lambda (G3da8@x G3da9@y) (if (fast-equal? G3da9@y ''()) G3da8@x (list 'append G3da8@x G3da9@y)))) (set! G3d57@gen-mappend (lambda (G3da4@e G3da5@map-env) (list 'apply '(primitive append) (G3d59@gen-map G3da4@e G3da5@map-env)))) (set! G3d59@gen-map (lambda (G3d92@e G3d93@map-env) ((lambda (G3d96@formals G3d97@actuals) (if (eq? (car G3d92@e) 'ref) (car G3d97@actuals) (if (for-all (lambda (G3d9a@x) (and (eq? (car G3d9a@x) 'ref) (memq (cadr G3d9a@x) G3d96@formals))) (cdr G3d92@e)) ((lambda (G3d9c@args) (cons 'map (cons (list 'primitive (car G3d92@e)) G3d9c@args))) (map ((lambda (G3d9e@r) (lambda (G3da0@x) (cdr (assq (cadr G3da0@x) G3d9e@r)))) (map cons G3d96@formals G3d97@actuals)) (cdr G3d92@e))) (cons* 'map (list 'lambda G3d96@formals G3d92@e) G3d97@actuals)))) (map cdr G3d93@map-env) (map (lambda (G3da2@x) (list 'ref (car G3da2@x))) G3d93@map-env)))) (set! G3d5b@gen-cons (lambda (G3d82@e G3d83@x G3d84@y G3d85@xnew G3d86@ynew) ((lambda (G3d8c@t) (if (memv G3d8c@t '(quote)) (if (eq? (car G3d85@xnew) 'quote) ((lambda (G3d8e@xnew G3d8f@ynew) (if (and (eq? G3d8e@xnew G3d83@x) (eq? G3d8f@ynew G3d84@y)) (list 'quote G3d82@e) (list 'quote (cons G3d8e@xnew G3d8f@ynew)))) (cadr G3d85@xnew) (cadr G3d86@ynew)) (if (null? (cadr G3d86@ynew)) (list 'list G3d85@xnew) (list 'cons G3d85@xnew G3d86@ynew))) (if (memv G3d8c@t '(list)) (cons 'list (cons G3d85@xnew (cdr G3d86@ynew))) (list 'cons G3d85@xnew G3d86@ynew)))) (car G3d86@ynew)))) (set! G3d5d@gen-vector (lambda (G3d7c@e G3d7d@ls G3d7e@lsnew) (if (eq? (car G3d7e@lsnew) 'quote) (if (eq? (cadr G3d7e@lsnew) G3d7d@ls) (list 'quote G3d7c@e) (list 'quote (list->vector (cadr G3d7e@lsnew)))) (if (eq? (car G3d7e@lsnew) 'list) (cons 'vector (cdr G3d7e@lsnew)) (list 'list->vector G3d7e@lsnew))))) (set! G3d5f@regen (lambda (G3d76@x) ((lambda (G3d78@t) (if (memv G3d78@t '(ref)) (cadr G3d76@x) (if (memv G3d78@t '(primitive)) (list 'primitive (cadr G3d76@x)) (if (memv G3d78@t '(quote)) (list 'quote (cadr G3d76@x)) (if (memv G3d78@t '(lambda)) (G2cad@G2beb@build-lambda '#f (cadr G3d76@x) (G3d5f@regen (caddr G3d76@x))) (if (memv G3d78@t '(map)) ((lambda (G3d7a@ls) (cons '(primitive ellipsis-map) G3d7a@ls)) (map G3d5f@regen (cdr G3d76@x))) (cons (list 'primitive (car G3d76@x)) (map G3d5f@regen (cdr G3d76@x))))))))) (car G3d76@x)))) (lambda (G3d60@e G3d61@r G3d62@mr) ((lambda (G3d66@t) ((lambda (G3d68@ls/false) (if G3d68@ls/false (apply (lambda (G3d6a@x) (call-with-values (lambda () (G3d51@gen-syntax G3d60@e G3d6a@x G3d61@r '() G2f54@ellipsis? '#f)) (lambda (G3d6e@G3d6c G3d6f@G3d6d) ((lambda (G3d72@maps G3d73@e) (G3d5f@regen G3d73@e)) G3d6f@G3d6d G3d6e@G3d6c)))) G3d68@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3d66@t))) (G2f52@syntax-dispatch G3d66@t '(_ any)))) G3d60@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f60@core-macro-transformer (lambda (G3e84@name) ((lambda (G3e86@t) (if (memv G3e86@t '(quote)) G2f02@quote-transformer (if (memv G3e86@t '(lambda)) G2f06@lambda-transformer (if (memv G3e86@t '(case-lambda)) G2f04@case-lambda-transformer (if (memv G3e86@t '(letrec)) G2eea@letrec-transformer (if (memv G3e86@t '(letrec*)) G2eec@letrec*-transformer (if (memv G3e86@t '(if)) G2efa@if-transformer (if (memv G3e86@t '(and)) G2efc@and-transformer (if (memv G3e86@t '(or)) G2efe@or-transformer (if (memv G3e86@t '(foreign-call)) G2f4e@foreign-call-transformer (if (memv G3e86@t '(syntax-case)) G2f5a@syntax-case-transformer (if (memv G3e86@t '(syntax)) G2f5e@syntax-transformer (if (memv G3e86@t '(type-descriptor)) G2ef0@type-descriptor-transformer (if (memv G3e86@t '(record-type-descriptor)) G2ef2@record-type-descriptor-transformer (if (memv G3e86@t '(record-constructor-descriptor)) G2ef4@record-constructor-descriptor-transformer (if (memv G3e86@t '(fluid-let-syntax)) G2eee@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e84@name))))))))))))))))) G3e84@name))) (set! G2f62@file-options-macro (lambda (G3e88@x) ((lambda (G3e8b@valid-option?) (begin (set! G3e8b@valid-option? (lambda (G3e94@x) (and (G2d53@id? G3e94@x) (memq (G2d55@id->sym G3e94@x) '(no-fail no-create no-truncate))))) ((lambda (G3e8c@t) ((lambda (G3e8e@ls/false) (if (and G3e8e@ls/false (apply (lambda (G3e90@opt*) (and (for-all G3e8b@valid-option? G3e90@opt*) (G28f0@G2891@file-options-spec (map G2d55@id->sym G3e90@opt*)))) G3e8e@ls/false)) (apply (lambda (G3e92@opt*) (G2f08@bless (list 'quote (G28f0@G2891@file-options-spec (map G2d55@id->sym G3e92@opt*))))) G3e8e@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3e8c@t))) (G2f52@syntax-dispatch G3e8c@t '(_ . each-any)))) G3e88@x))) '#f))) (set! G2f64@symbol-macro (lambda (G3e96@x G3e97@set) ((lambda (G3e9a@t) ((lambda (G3e9c@ls/false) (if (and G3e9c@ls/false (apply (lambda (G3e9e@name) (and (G2d53@id? G3e9e@name) (memq (G2d55@id->sym G3e9e@name) G3e97@set))) G3e9c@ls/false)) (apply (lambda (G3ea0@name) (G2f08@bless (list 'quote G3ea0@name))) G3e9c@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3e9a@t))) (G2f52@syntax-dispatch G3e9a@t '(_ any)))) G3e96@x))) (set! G2f66@macro-transformer (lambda (G3ea2@x) (if (procedure? G3ea2@x) G3ea2@x (if (symbol? G3ea2@x) ((lambda (G3ea4@t) (if (memv G3ea4@t '(define-record-type)) G2f46@define-record-type-macro (if (memv G3ea4@t '(define-struct)) G2f44@define-struct-macro (if (memv G3ea4@t '(include)) G2f3a@include-macro (if (memv G3ea4@t '(cond)) G2f36@cond-macro (if (memv G3ea4@t '(let)) G2f0e@let-macro (if (memv G3ea4@t '(do)) G2f2e@do-macro (if (memv G3ea4@t '(or)) G2f32@or-macro (if (memv G3ea4@t '(and)) G2f34@and-macro (if (memv G3ea4@t '(let*)) G2f30@let*-macro (if (memv G3ea4@t '(let-values)) G2f10@let-values-macro (if (memv G3ea4@t '(let*-values)) G2f12@let*-values-macro (if (memv G3ea4@t '(syntax-rules)) G2f3e@syntax-rules-macro (if (memv G3ea4@t '(quasiquote)) G2f40@quasiquote-macro (if (memv G3ea4@t '(quasisyntax)) G2f42@quasisyntax-macro (if (memv G3ea4@t '(with-syntax)) G2f0a@with-syntax-macro (if (memv G3ea4@t '(when)) G2ef6@when-macro (if (memv G3ea4@t '(unless)) G2ef8@unless-macro (if (memv G3ea4@t '(case)) G2f00@case-macro (if (memv G3ea4@t '(identifier-syntax)) G2f2c@identifier-syntax-macro (if (memv G3ea4@t '(time)) G2f24@time-macro (if (memv G3ea4@t '(delay)) G2f26@delay-macro (if (memv G3ea4@t '(assert)) G2f28@assert-macro (if (memv G3ea4@t '(endianness)) G2f2a@endianness-macro (if (memv G3ea4@t '(guard)) G2f20@guard-macro (if (memv G3ea4@t '(define-enumeration)) G2f22@define-enumeration-macro (if (memv G3ea4@t '(trace-lambda)) G2f14@trace-lambda-macro (if (memv G3ea4@t '(trace-define)) G2f16@trace-define-macro (if (memv G3ea4@t '(trace-define-syntax)) G2f18@trace-define-syntax-macro (if (memv G3ea4@t '(trace-let-syntax)) G2f1c@trace-let-syntax-macro (if (memv G3ea4@t '(trace-letrec-syntax)) G2f1e@trace-letrec-syntax-macro (if (memv G3ea4@t '(define-condition-type)) G2f48@define-condition-type-macro (if (memv G3ea4@t '(parameterize)) G2f4c@parameterize-macro (if (memv G3ea4@t '(include-into)) G2f3c@include-into-macro (if (memv G3ea4@t '(eol-style)) (lambda (G3ea6@x) (G2f64@symbol-macro G3ea6@x '(none lf cr crlf nel crnel ls))) (if (memv G3ea4@t '(error-handling-mode)) (lambda (G3ea8@x) (G2f64@symbol-macro G3ea8@x '(ignore raise replace))) (if (memv G3ea4@t '(buffer-mode)) (lambda (G3eaa@x) (G2f64@symbol-macro G3eaa@x '(none line block))) (if (memv G3ea4@t '(file-options)) G2f62@file-options-macro (if (memv G3ea4@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f4a@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ea2@x)))))))))))))))))))))))))))))))))))))))) G3ea2@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ea2@x))))) (set! G2f68@local-macro-transformer (lambda (G3eac@x) (car G3eac@x))) (set! G2f6a@do-macro-call (lambda (G3eae@transformer G3eaf@expr) ((lambda (G3eb2@out) (begin ((letrec ((G3eb4@f (lambda (G3eb6@x) (if (not (G2d1b@stx? G3eb6@x)) (if (pair? G3eb6@x) (begin (G3eb4@f (car G3eb6@x)) (G3eb4@f (cdr G3eb6@x))) (if (vector? G3eb6@x) (vector-for-each G3eb4@f G3eb6@x) (if (symbol? G3eb6@x) (G303d@syntax-violation '#f '"raw symbol encountered in output of macro" G3eaf@expr G3eb6@x) (void)))) (void))))) G3eb4@f) G3eb2@out) (G2d3d@add-mark (G2d33@gen-mark) G3eb2@out G3eaf@expr))) (G3eae@transformer (G2d3d@add-mark G2d35@anti-mark G3eaf@expr '#f))))) (set! G2f6c@chi-macro (lambda (G3eb8@p G3eb9@e) (G2f6a@do-macro-call (G2f66@macro-transformer G3eb8@p) G3eb9@e))) (set! G2f6e@chi-local-macro (lambda (G3ebc@p G3ebd@e) (G2f6a@do-macro-call (G2f68@local-macro-transformer G3ebc@p) G3ebd@e))) (set! G2f70@chi-global-macro (lambda (G3ec0@p G3ec1@e) ((lambda (G3ec4@lib G3ec5@loc) (begin (G2b6b@G2a13@visit-library G3ec4@lib) ((lambda (G3ec8@x) ((lambda (G3eca@transformer) (G2f6a@do-macro-call G3eca@transformer G3ec1@e)) (if (procedure? G3ec8@x) G3ec8@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ec8@x)))) (symbol-value G3ec5@loc)))) (car G3ec0@p) (cdr G3ec0@p)))) (set! G2f72@chi-expr* (lambda (G3ecc@e* G3ecd@r G3ece@mr) (if (null? G3ecc@e*) '() ((lambda (G3ed2@e) (cons G3ed2@e (G2f72@chi-expr* (cdr G3ecc@e*) G3ecd@r G3ece@mr))) (G2f76@chi-expr (car G3ecc@e*) G3ecd@r G3ece@mr))))) (set! G2f74@chi-application (lambda (G3ed4@e G3ed5@r G3ed6@mr) ((lambda (G3eda@t) ((lambda (G3edc@ls/false) (if G3edc@ls/false (apply (lambda (G3ede@rator G3edf@rands) ((lambda (G3ee2@rator) (cons G3ee2@rator (G2f72@chi-expr* G3edf@rands G3ed5@r G3ed6@mr))) (G2f76@chi-expr G3ede@rator G3ed5@r G3ed6@mr))) G3edc@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3eda@t))) (G2f52@syntax-dispatch G3eda@t '(any . each-any)))) G3ed4@e))) (set! G2f76@chi-expr (lambda (G3ee4@e G3ee5@r G3ee6@mr) (call-with-values (lambda () (G2d7b@syntax-type G3ee4@e G3ee5@r)) (lambda (G3eed@G3eea G3eee@G3eeb G3eef@G3eec) ((lambda (G3ef3@kwd G3ef4@value G3ef5@type) ((lambda (G3ef9@t) (if (memv G3ef9@t '(core-macro)) ((lambda (G3efb@transformer) (G3efb@transformer G3ee4@e G3ee5@r G3ee6@mr)) (G2f60@core-macro-transformer G3ef4@value)) (if (memv G3ef9@t '(global)) ((lambda (G3efd@lib) ((lambda (G3eff@loc) ((lambda () (begin ((G2fbf@inv-collector) G3efd@lib) G3eff@loc)))) (cdr G3ef4@value))) (car G3ef4@value)) (if (memv G3ef9@t '(core-prim)) ((lambda (G3f01@name) (list 'primitive G3f01@name)) G3ef4@value) (if (memv G3ef9@t '(call)) (G2f74@chi-application G3ee4@e G3ee5@r G3ee6@mr) (if (memv G3ef9@t '(lexical)) ((lambda (G3f03@lex) G3f03@lex) (G2ede@lexical-var G3ef4@value)) (if (memv G3ef9@t '(global-macro global-macro!)) (G2f76@chi-expr (G2f70@chi-global-macro G3ef4@value G3ee4@e) G3ee5@r G3ee6@mr) (if (memv G3ef9@t '(local-macro local-macro!)) (G2f76@chi-expr (G2f6e@chi-local-macro G3ef4@value G3ee4@e) G3ee5@r G3ee6@mr) (if (memv G3ef9@t '(macro macro!)) (G2f76@chi-expr (G2f6c@chi-macro G3ef4@value G3ee4@e) G3ee5@r G3ee6@mr) (if (memv G3ef9@t '(constant)) ((lambda (G3f05@datum) (list 'quote G3f05@datum)) G3ef4@value) (if (memv G3ef9@t '(set!)) (G2f78@chi-set! G3ee4@e G3ee5@r G3ee6@mr) (if (memv G3ef9@t '(begin)) ((lambda (G3f07@t) ((lambda (G3f09@ls/false) (if G3f09@ls/false (apply (lambda (G3f0b@x G3f0c@x*) (G2cb0@G2c21@build-sequence '#f (G2f72@chi-expr* (cons G3f0b@x G3f0c@x*) G3ee5@r G3ee6@mr))) G3f09@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3f07@t))) (G2f52@syntax-dispatch G3f07@t '(_ any . each-any)))) G3ee4@e) (if (memv G3ef9@t '(let-syntax letrec-syntax)) ((lambda (G3f0f@t) ((lambda (G3f11@ls/false) (if (and G3f11@ls/false (apply (lambda (G3f13@xlhs* G3f14@xrhs* G3f15@xbody G3f16@xbody*) (if (not (G2d5d@valid-bound-ids? G3f13@xlhs*)) (G303d@syntax-violation '#f '"invalid identifiers" G3ee4@e) (void))) G3f11@ls/false)) (apply (lambda (G3f1b@xlhs* G3f1c@xrhs* G3f1d@xbody G3f1e@xbody*) ((lambda (G3f23@xlab*) ((lambda (G3f25@xrib) ((lambda (G3f27@xb*) ((lambda () (G2cb0@G2c21@build-sequence '#f (G2f72@chi-expr* (map (lambda (G3f29@x) (G2d3f@add-subst G3f25@xrib G3f29@x)) (cons G3f1d@xbody G3f1e@xbody*)) (append (map cons G3f23@xlab* G3f27@xb*) G3ee5@r) (append (map cons G3f23@xlab* G3f27@xb*) G3ee6@mr)))))) (map (lambda (G3f2b@x) (G2d93@make-eval-transformer (G2fb1@expand-transformer (if (eq? G3ef5@type 'let-syntax) G3f2b@x (G2d3f@add-subst G3f25@xrib G3f2b@x)) G3ee6@mr))) G3f1c@xrhs*))) (G2d0e@make-full-rib G3f1b@xlhs* G3f23@xlab*))) (map G2cd3@gen-label G3f1b@xlhs*))) G3f11@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3f0f@t))) (G2f52@syntax-dispatch G3f0f@t '(_ #(each (any any)) any . each-any)))) G3ee4@e) (if (memv G3ef9@t '(displaced-lexical)) (G303d@syntax-violation '#f '"identifier out of context" G3ee4@e) (if (memv G3ef9@t '(syntax)) (G303d@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ee4@e) (if (memv G3ef9@t '(define define-syntax module import library)) (G303d@syntax-violation '#f (string-append ((lambda (G3f2d@t) (if (memv G3f2d@t '(define)) '"a definition" (if (memv G3f2d@t '(define-syntax)) '"a define-syntax" (if (memv G3f2d@t '(module)) '"a module definition" (if (memv G3f2d@t '(library)) '"a library definition" (if (memv G3f2d@t '(import)) '"an import declaration" (if (memv G3f2d@t '(export)) '"an export declaration" '"a non-expression"))))))) G3ef5@type) '" was found where an expression was expected") G3ee4@e) (if (memv G3ef9@t '(mutable)) (G303d@syntax-violation '#f '"attempt to reference an unexportable variable" G3ee4@e) (G303d@syntax-violation '#f '"invalid expression" G3ee4@e)))))))))))))))))) G3ef5@type)) G3eef@G3eec G3eee@G3eeb G3eed@G3eea))))) (set! G2f78@chi-set! (lambda (G3f2f@e G3f30@r G3f31@mr) ((lambda (G3f35@t) ((lambda (G3f37@ls/false) (if (and G3f37@ls/false (apply (lambda (G3f39@x G3f3a@v) (G2d53@id? G3f39@x)) G3f37@ls/false)) (apply (lambda (G3f3d@x G3f3e@v) (call-with-values (lambda () (G2d7b@syntax-type G3f3d@x G3f30@r)) (lambda (G3f44@G3f41 G3f45@G3f42 G3f46@G3f43) ((lambda (G3f4a@kwd G3f4b@value G3f4c@type) ((lambda (G3f50@t) (if (memv G3f50@t '(lexical)) (begin (G2ee2@set-lexical-mutable! G3f4b@value '#t) (list 'set! (G2ede@lexical-var G3f4b@value) (G2f76@chi-expr G3f3e@v G3f30@r G3f31@mr))) (if (memv G3f50@t '(core-prim)) (G303d@syntax-violation '#f '"cannot modify imported core primitive" G3f2f@e) (if (memv G3f50@t '(global)) (G303d@syntax-violation '#f '"attempt to modify imported binding" G3f2f@e) (if (memv G3f50@t '(global-macro!)) (G2f76@chi-expr (G2f70@chi-global-macro G3f4b@value G3f2f@e) G3f30@r G3f31@mr) (if (memv G3f50@t '(local-macro!)) (G2f76@chi-expr (G2f6e@chi-local-macro G3f4b@value G3f2f@e) G3f30@r G3f31@mr) (if (memv G3f50@t '(mutable)) (G303d@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f2f@e) (G303d@syntax-violation '#f '"invalid syntax" G3f2f@e)))))))) G3f4c@type)) G3f46@G3f43 G3f45@G3f42 G3f44@G3f41)))) G3f37@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3f35@t))) (G2f52@syntax-dispatch G3f35@t '(_ any any)))) G3f2f@e))) (set! G2f7a@verify-formals (lambda (G3f52@fmls G3f53@stx) ((lambda (G3f56@t) ((lambda (G3f58@ls/false) (if G3f58@ls/false (apply (lambda (G3f5a@x*) (if (not (G2d5d@valid-bound-ids? G3f5a@x*)) (G2f0c@invalid-fmls-error G3f53@stx G3f52@fmls) (void))) G3f58@ls/false) ((lambda (G3f5c@t) ((lambda (G3f5e@ls/false) (if G3f5e@ls/false (apply (lambda (G3f60@x* G3f61@x) (if (not (G2d5d@valid-bound-ids? (cons G3f61@x G3f60@x*))) (G2f0c@invalid-fmls-error G3f53@stx G3f52@fmls) (void))) G3f5e@ls/false) ((lambda (G3f64@t) ((lambda (G3f66@ls/false) (if G3f66@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid syntax" G3f53@stx)) G3f66@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3f64@t))) (G2f52@syntax-dispatch G3f64@t '_))) G3f5c@t))) (G2f52@syntax-dispatch G3f5c@t '#(each+ any () any)))) G3f56@t))) (G2f52@syntax-dispatch G3f56@t 'each-any))) G3f52@fmls))) (set! G2f7c@chi-lambda-clause (lambda (G3f68@stx G3f69@fmls G3f6a@body* G3f6b@r G3f6c@mr) ((lambda (G3f72@t) ((lambda (G3f74@ls/false) (if G3f74@ls/false (apply (lambda (G3f76@x*) (begin (G2f7a@verify-formals G3f69@fmls G3f68@stx) ((lambda (G3f78@lex* G3f79@lab*) (values G3f78@lex* (G2f8c@chi-internal (G2d3f@add-subst (G2d0e@make-full-rib G3f76@x* G3f79@lab*) G3f6a@body*) (G2ee6@add-lexicals G3f79@lab* G3f78@lex* G3f6b@r) G3f6c@mr))) (map G2ccf@gen-lexical G3f76@x*) (map G2cd3@gen-label G3f76@x*)))) G3f74@ls/false) ((lambda (G3f7c@t) ((lambda (G3f7e@ls/false) (if G3f7e@ls/false (apply (lambda (G3f80@x* G3f81@x) (begin (G2f7a@verify-formals G3f69@fmls G3f68@stx) ((lambda (G3f84@lex* G3f85@lab* G3f86@lex G3f87@lab) (values (append G3f84@lex* G3f86@lex) (G2f8c@chi-internal (G2d3f@add-subst (G2d0e@make-full-rib (cons G3f81@x G3f80@x*) (cons G3f87@lab G3f85@lab*)) G3f6a@body*) (G2ee6@add-lexicals (cons G3f87@lab G3f85@lab*) (cons G3f86@lex G3f84@lex*) G3f6b@r) G3f6c@mr))) (map G2ccf@gen-lexical G3f80@x*) (map G2cd3@gen-label G3f80@x*) (G2ccf@gen-lexical G3f81@x) (G2cd3@gen-label G3f81@x)))) G3f7e@ls/false) ((lambda (G3f8c@t) ((lambda (G3f8e@ls/false) (if G3f8e@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid syntax" G3f69@fmls)) G3f8e@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G3f8c@t))) (G2f52@syntax-dispatch G3f8c@t '_))) G3f7c@t))) (G2f52@syntax-dispatch G3f7c@t '#(each+ any () any)))) G3f72@t))) (G2f52@syntax-dispatch G3f72@t 'each-any))) G3f69@fmls))) (set! G2f7e@chi-lambda-clause* (lambda (G3f90@stx G3f91@fmls* G3f92@body** G3f93@r G3f94@mr) (if (null? G3f91@fmls*) (values '() '()) (call-with-values (lambda () (G2f7c@chi-lambda-clause G3f90@stx (car G3f91@fmls*) (car G3f92@body**) G3f93@r G3f94@mr)) (lambda (G3f9c@G3f9a G3f9d@G3f9b) ((lambda (G3fa0@b G3fa1@a) (call-with-values (lambda () (G2f7e@chi-lambda-clause* G3f90@stx (cdr G3f91@fmls*) (cdr G3f92@body**) G3f93@r G3f94@mr)) (lambda (G3fa6@G3fa4 G3fa7@G3fa5) ((lambda (G3faa@b* G3fab@a*) (values (cons G3fa1@a G3fab@a*) (cons G3fa0@b G3faa@b*))) G3fa7@G3fa5 G3fa6@G3fa4)))) G3f9d@G3f9b G3f9c@G3f9a)))))) (set! G2f80@chi-defun (lambda (G3fae@x G3faf@r G3fb0@mr) ((lambda (G3fb4@fmls G3fb5@body*) (call-with-values (lambda () (G2f7c@chi-lambda-clause G3fb4@fmls G3fb4@fmls G3fb5@body* G3faf@r G3fb0@mr)) (lambda (G3fba@G3fb8 G3fbb@G3fb9) ((lambda (G3fbe@body G3fbf@fmls) (G2cad@G2beb@build-lambda '#f G3fbf@fmls G3fbe@body)) G3fbb@G3fb9 G3fba@G3fb8)))) (car G3fae@x) (cdr G3fae@x)))) (set! G2f82@chi-rhs (lambda (G3fc2@rhs G3fc3@r G3fc4@mr) ((lambda (G3fc8@t) (if (memv G3fc8@t '(defun)) (G2f80@chi-defun (cdr G3fc2@rhs) G3fc3@r G3fc4@mr) (if (memv G3fc8@t '(expr)) ((lambda (G3fca@expr) (G2f76@chi-expr G3fca@expr G3fc3@r G3fc4@mr)) (cdr G3fc2@rhs)) (if (memv G3fc8@t '(top-expr)) ((lambda (G3fcc@expr) (G2cb0@G2c21@build-sequence '#f (list (G2f76@chi-expr G3fcc@expr G3fc3@r G3fc4@mr) (G2cb1@G2c23@build-void)))) (cdr G3fc2@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fc2@rhs))))) (car G3fc2@rhs)))) (set! G2f84@expand-interaction-rhs*/init* (lambda (G3fce@lhs* G3fcf@rhs* G3fd0@init* G3fd1@r G3fd2@mr) ((letrec ((G3fd8@f (lambda (G3fda@lhs* G3fdb@rhs*) (if (null? G3fda@lhs*) (map (lambda (G3fde@x) (G2f76@chi-expr G3fde@x G3fd1@r G3fd2@mr)) G3fd0@init*) ((lambda (G3fe0@lhs G3fe1@rhs) ((lambda (G3fe4@t) (if (memv G3fe4@t '(defun)) ((lambda (G3fe6@rhs) (cons (list 'set! G3fe0@lhs G3fe6@rhs) (G3fd8@f (cdr G3fda@lhs*) (cdr G3fdb@rhs*)))) (G2f80@chi-defun (cdr G3fe1@rhs) G3fd1@r G3fd2@mr)) (if (memv G3fe4@t '(expr)) ((lambda (G3fe8@rhs) (cons (list 'set! G3fe0@lhs G3fe8@rhs) (G3fd8@f (cdr G3fda@lhs*) (cdr G3fdb@rhs*)))) (G2f76@chi-expr (cdr G3fe1@rhs) G3fd1@r G3fd2@mr)) (if (memv G3fe4@t '(top-expr)) ((lambda (G3fea@e) (cons G3fea@e (G3fd8@f (cdr G3fda@lhs*) (cdr G3fdb@rhs*)))) (G2f76@chi-expr (cdr G3fe1@rhs) G3fd1@r G3fd2@mr)) (error 'expand-interaction '"invallid" G3fe1@rhs))))) (car G3fe1@rhs))) (car G3fda@lhs*) (car G3fdb@rhs*)))))) G3fd8@f) G3fce@lhs* G3fcf@rhs*))) (set! G2f86@chi-rhs* (lambda (G3fec@rhs* G3fed@r G3fee@mr) ((letrec ((G3ff2@f (lambda (G3ff4@ls) (if (null? G3ff4@ls) '() ((lambda (G3ff6@a) (cons G3ff6@a (G3ff2@f (cdr G3ff4@ls)))) (G2f82@chi-rhs (car G3ff4@ls) G3fed@r G3fee@mr)))))) G3ff2@f) G3fec@rhs*))) (set! G2f88@find-bound=? (lambda (G3ff8@x G3ff9@lhs* G3ffa@rhs*) (if (null? G3ff9@lhs*) '#f (if (G2d59@bound-id=? G3ff8@x (car G3ff9@lhs*)) (car G3ffa@rhs*) (G2f88@find-bound=? G3ff8@x (cdr G3ff9@lhs*) (cdr G3ffa@rhs*)))))) (set! G2f8a@find-dups (lambda (G3ffe@ls) ((letrec ((G4000@f (lambda (G4002@ls G4003@dups) (if (null? G4002@ls) G4003@dups ((lambda (G4006@t) (if G4006@t ((lambda (G4008@x) (G4000@f (cdr G4002@ls) (cons (list (car G4002@ls) G4008@x) G4003@dups))) G4006@t) (G4000@f (cdr G4002@ls) G4003@dups))) (G2f88@find-bound=? (car G4002@ls) (cdr G4002@ls) (cdr G4002@ls))))))) G4000@f) G3ffe@ls '()))) (set! G2f8c@chi-internal (lambda (G400a@e* G400b@r G400c@mr) ((lambda (G4010@rib) (call-with-values (lambda () (G2faf@chi-body* (map (lambda (G401a@x) (G2d3f@add-subst G4010@rib G401a@x)) (G2d51@syntax->list G400a@e*)) G400b@r G400c@mr '() '() '() '() '() G4010@rib '#f)) (lambda (G401c@G4012 G401d@G4013 G401e@G4014 G401f@G4015 G4020@G4016 G4021@G4017 G4022@G4018 G4023@G4019) ((lambda (G402c@_exp* G402d@kwd* G402e@mod** G402f@rhs* G4030@lex* G4031@mr G4032@r G4033@e*) (begin (if (null? G4033@e*) (G303d@syntax-violation '#f '"no expression in body" G4033@e*) (void)) ((lambda (G403c@init*) ((lambda (G403e@rhs*) ((lambda () (G2cb3@G2c27@build-letrec* '#f (reverse G4030@lex*) (reverse G403e@rhs*) (G2cb0@G2c21@build-sequence '#f G403c@init*))))) (G2f86@chi-rhs* G402f@rhs* G4032@r G4031@mr))) (G2f72@chi-expr* (append (apply append (reverse G402e@mod**)) G4033@e*) G4032@r G4031@mr)))) G4023@G4019 G4022@G4018 G4021@G4017 G4020@G4016 G401f@G4015 G401e@G4014 G401d@G4013 G401c@G4012)))) (G2cfe@make-empty-rib)))) (set! G2f8e@parse-module (lambda (G4040@e) ((lambda (G4042@t) ((lambda (G4044@ls/false) (if G4044@ls/false (apply (lambda (G4046@export* G4047@b*) (begin (if (not (for-all G2d53@id? G4046@export*)) (G303d@syntax-violation '#f '"module exports must be identifiers" G4040@e) (void)) (values '#f (list->vector G4046@export*) G4047@b*))) G4044@ls/false) ((lambda (G404a@t) ((lambda (G404c@ls/false) (if G404c@ls/false (apply (lambda (G404e@name G404f@export* G4050@b*) (begin (if (not (G2d53@id? G404e@name)) (G303d@syntax-violation '#f '"module name must be an identifier" G4040@e) (void)) (if (not (for-all G2d53@id? G404f@export*)) (G303d@syntax-violation '#f '"module exports must be identifiers" G4040@e) (void)) (values G404e@name (list->vector G404f@export*) G4050@b*))) G404c@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G404a@t))) (G2f52@syntax-dispatch G404a@t '(_ any each-any . each-any)))) G4042@t))) (G2f52@syntax-dispatch G4042@t '(_ each-any . each-any)))) G4040@e))) (set! G2f94@G2f8f (make-record-type-descriptor 'module-interface '#f 'G2f92 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2f96@G2f91 '#f) (set! G2f98@G2f90 (make-record-constructor-descriptor G2f94@G2f8f '#f G2f96@G2f91)) (set! G2f9b@module-interface? (record-predicate G2f94@G2f8f)) (set! G2f9d@make-module-interface (record-constructor G2f98@G2f90)) (set! G2f9f@module-interface-first-mark (record-accessor G2f94@G2f8f '0)) (set! G2fa1@module-interface-exp-id-vec (record-accessor G2f94@G2f8f '1)) (set! G2fa3@module-interface-exp-lab-vec (record-accessor G2f94@G2f8f '2)) (set! G2fa5@set-module-interface-first-mark! (record-mutator G2f94@G2f8f '0)) (set! G2fa7@set-module-interface-exp-id-vec! (record-mutator G2f94@G2f8f '1)) (set! G2fa9@set-module-interface-exp-lab-vec! (record-mutator G2f94@G2f8f '2)) (set! G2fab@module-interface-exp-id* (lambda (G4054@iface G4055@id) ((lambda (G4059@diff-marks) (begin (set! G4059@diff-marks (lambda (G4060@ls G4061@x) (begin (if (null? G4060@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4064@a) (if (eq? G4064@a G4061@x) '() (cons G4064@a (G4059@diff-marks (cdr G4060@ls) G4061@x)))) (car G4060@ls))))) ((lambda (G405a@diff G405b@id-vec) (if (null? G405a@diff) G405b@id-vec (vector-map (lambda (G405e@x) (G2d1d@make-stx (G2d1f@stx-expr G405e@x) (append G405a@diff (G2d21@stx-mark* G405e@x)) '() '())) G405b@id-vec))) (G4059@diff-marks (G2d21@stx-mark* G4055@id) (G2f9f@module-interface-first-mark G4054@iface)) (G2fa1@module-interface-exp-id-vec G4054@iface)))) '#f))) (set! G2fad@chi-internal-module (lambda (G4066@e G4067@r G4068@mr G4069@lex* G406a@rhs* G406b@mod** G406c@kwd*) (call-with-values (lambda () (G2f8e@parse-module G4066@e)) (lambda (G4077@G4074 G4078@G4075 G4079@G4076) ((lambda (G407d@e* G407e@exp-id* G407f@name) ((lambda (G4083@rib) ((lambda (G4085@e*) ((lambda () (call-with-values (lambda () (G2faf@chi-body* G4085@e* G4067@r G4068@mr G4069@lex* G406a@rhs* G406b@mod** G406c@kwd* '() G4083@rib '#f)) (lambda (G408f@G4087 G4090@G4088 G4091@G4089 G4092@G408a G4093@G408b G4094@G408c G4095@G408d G4096@G408e) ((lambda (G409f@_exp* G40a0@kwd* G40a1@mod** G40a2@rhs* G40a3@lex* G40a4@mr G40a5@r G40a6@e*) ((lambda (G40af@exp-lab* G40b0@mod**) (if (not G407f@name) (values G40a3@lex* G40a2@rhs* G407e@exp-id* G40af@exp-lab* G40a5@r G40a4@mr G40b0@mod** G40a0@kwd*) ((lambda (G40b3@lab G40b4@iface) (values G40a3@lex* G40a2@rhs* (vector G407f@name) (vector G40b3@lab) (cons (cons G40b3@lab (cons '$module G40b4@iface)) G40a5@r) (cons (cons G40b3@lab (cons '$module G40b4@iface)) G40a4@mr) G40b0@mod** G40a0@kwd*)) (G2cd3@gen-label 'module) (G2f9d@make-module-interface (car (G2d21@stx-mark* G407f@name)) (vector-map (lambda (G40b7@x) (G2d1d@make-stx (G2d1f@stx-expr G40b7@x) (G2d21@stx-mark* G40b7@x) '() '())) G407e@exp-id*) G40af@exp-lab*)))) (vector-map (lambda (G40b9@x) (or (G2d6d@id->label (G2d1d@make-stx (G2d55@id->sym G40b9@x) (G2d21@stx-mark* G40b9@x) (list G4083@rib) '())) (G303d@syntax-violation '#f '"cannot find module export" G40b9@x))) G407e@exp-id*) (cons G40a6@e* G40a1@mod**))) G4096@G408e G4095@G408d G4094@G408c G4093@G408b G4092@G408a G4091@G4089 G4090@G4088 G408f@G4087)))))) (map (lambda (G40bb@x) (G2d3f@add-subst G4083@rib G40bb@x)) (G2d51@syntax->list G407d@e*)))) (G2cfe@make-empty-rib))) G4079@G4076 G4078@G4075 G4077@G4074))))) (set! G2faf@chi-body* (lambda (G40bd@e* G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40c3@kwd* G40c4@exp* G40c5@rib G40c6@top?) (if (null? G40bd@e*) (values G40bd@e* G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40c3@kwd* G40c4@exp*) ((lambda (G40d1@e) (call-with-values (lambda () (G2d7b@syntax-type G40d1@e G40be@r)) (lambda (G40d6@G40d3 G40d7@G40d4 G40d8@G40d5) ((lambda (G40dc@kwd G40dd@value G40de@type) ((lambda (G40e2@kwd*) ((lambda (G40e4@t) (if (memv G40e4@t '(define)) (call-with-values (lambda () (G2ed6@parse-define G40d1@e)) (lambda (G40e8@G40e6 G40e9@G40e7) ((lambda (G40ec@rhs G40ed@id) (begin (if (G2d61@bound-id-member? G40ed@id G40e2@kwd*) (G303d@syntax-violation '#f '"cannot redefine keyword" G40d1@e) (void)) (call-with-values (lambda () (G2cd7@gen-define-label+loc G40ed@id G40c5@rib)) (lambda (G40f2@G40f0 G40f3@G40f1) ((lambda (G40f6@lex G40f7@lab) (begin (G2d04@extend-rib! G40c5@rib G40ed@id G40f7@lab) (G2faf@chi-body* (cdr G40bd@e*) (G2ee4@add-lexical G40f7@lab G40f6@lex G40be@r) G40bf@mr (cons G40f6@lex G40c0@lex*) (cons G40ec@rhs G40c1@rhs*) G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?))) G40f3@G40f1 G40f2@G40f0))))) G40e9@G40e7 G40e8@G40e6))) (if (memv G40e4@t '(define-syntax)) (call-with-values (lambda () (G2ed8@parse-define-syntax G40d1@e)) (lambda (G40fc@G40fa G40fd@G40fb) ((lambda (G4100@rhs G4101@id) (begin (if (G2d61@bound-id-member? G4101@id G40e2@kwd*) (G303d@syntax-violation '#f '"cannot redefine keyword" G40d1@e) (void)) ((lambda (G4104@lab G4105@expanded-rhs) (begin (G2d04@extend-rib! G40c5@rib G4101@id G4104@lab) ((lambda (G4108@b) (G2faf@chi-body* (cdr G40bd@e*) (cons (cons G4104@lab G4108@b) G40be@r) (cons (cons G4104@lab G4108@b) G40bf@mr) G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?)) (G2d93@make-eval-transformer G4105@expanded-rhs)))) (G2cd9@gen-define-label G4101@id G40c5@rib) (G2fb1@expand-transformer G4100@rhs G40bf@mr)))) G40fd@G40fb G40fc@G40fa))) (if (memv G40e4@t '(let-syntax letrec-syntax)) ((lambda (G410a@t) ((lambda (G410c@ls/false) (if (and G410c@ls/false (apply (lambda (G410e@xlhs* G410f@xrhs* G4110@xbody*) (if (not (G2d5d@valid-bound-ids? G410e@xlhs*)) (G303d@syntax-violation '#f '"invalid identifiers" G40d1@e) (void))) G410c@ls/false)) (apply (lambda (G4114@xlhs* G4115@xrhs* G4116@xbody*) ((lambda (G411a@xlab*) ((lambda (G411c@xrib) ((lambda (G411e@xb*) ((lambda () (G2faf@chi-body* (append (map (lambda (G4120@x) (G2d3f@add-subst G411c@xrib G4120@x)) G4116@xbody*) (cdr G40bd@e*)) (append (map cons G411a@xlab* G411e@xb*) G40be@r) (append (map cons G411a@xlab* G411e@xb*) G40bf@mr) G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?)))) (map (lambda (G4122@x) (G2d93@make-eval-transformer (G2fb1@expand-transformer (if (eq? G40de@type 'let-syntax) G4122@x (G2d3f@add-subst G411c@xrib G4122@x)) G40bf@mr))) G4115@xrhs*))) (G2d0e@make-full-rib G4114@xlhs* G411a@xlab*))) (map G2cd3@gen-label G4114@xlhs*))) G410c@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G410a@t))) (G2f52@syntax-dispatch G410a@t '(_ #(each (any any)) . each-any)))) G40d1@e) (if (memv G40e4@t '(begin)) ((lambda (G4124@t) ((lambda (G4126@ls/false) (if G4126@ls/false (apply (lambda (G4128@x*) (G2faf@chi-body* (append G4128@x* (cdr G40bd@e*)) G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?)) G4126@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G4124@t))) (G2f52@syntax-dispatch G4124@t '(_ . each-any)))) G40d1@e) (if (memv G40e4@t '(global-macro global-macro!)) (G2faf@chi-body* (cons (G2d3f@add-subst G40c5@rib (G2f70@chi-global-macro G40dd@value G40d1@e)) (cdr G40bd@e*)) G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?) (if (memv G40e4@t '(local-macro local-macro!)) (G2faf@chi-body* (cons (G2d3f@add-subst G40c5@rib (G2f6e@chi-local-macro G40dd@value G40d1@e)) (cdr G40bd@e*)) G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?) (if (memv G40e4@t '(macro macro!)) (G2faf@chi-body* (cons (G2d3f@add-subst G40c5@rib (G2f6c@chi-macro G40dd@value G40d1@e)) (cdr G40bd@e*)) G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?) (if (memv G40e4@t '(module)) (call-with-values (lambda () (G2fad@chi-internal-module G40d1@e G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd*)) (lambda (G4132@G412a G4133@G412b G4134@G412c G4135@G412d G4136@G412e G4137@G412f G4138@G4130 G4139@G4131) ((lambda (G4142@kwd* G4143@mod** G4144@mr G4145@r G4146@m-exp-lab* G4147@m-exp-id* G4148@rhs* G4149@lex*) (begin (vector-for-each (lambda (G4152@id G4153@lab) (G2d04@extend-rib! G40c5@rib G4152@id G4153@lab)) G4147@m-exp-id* G4146@m-exp-lab*) (G2faf@chi-body* (cdr G40bd@e*) G4145@r G4144@mr G4149@lex* G4148@rhs* G4143@mod** G4142@kwd* G40c4@exp* G40c5@rib G40c6@top?))) G4139@G4131 G4138@G4130 G4137@G412f G4136@G412e G4135@G412d G4134@G412c G4133@G412b G4132@G412a))) (if (memv G40e4@t '(library)) (begin (G301f@library-expander (G2d69@stx->datum G40d1@e)) (G2faf@chi-body* (cdr G40bd@e*) G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?)) (if (memv G40e4@t '(export)) ((lambda (G4156@t) ((lambda (G4158@ls/false) (if G4158@ls/false (apply (lambda (G415a@exp-decl*) (G2faf@chi-body* (cdr G40bd@e*) G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* (append G415a@exp-decl* G40c4@exp*) G40c5@rib G40c6@top?)) G4158@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G4156@t))) (G2f52@syntax-dispatch G4156@t '(_ . each-any)))) G40d1@e) (if (memv G40e4@t '(import)) ((lambda () ((lambda (G415d@module-import? G415f@module-import G4161@library-import) (begin (set! G415d@module-import? (lambda (G41a9@e) ((lambda (G41ab@t) ((lambda (G41ad@ls/false) (if (and G41ad@ls/false (apply (lambda (G41af@id) (G2d53@id? G41af@id)) G41ad@ls/false)) (apply (lambda (G41b1@id) '#t) G41ad@ls/false) ((lambda (G41b3@t) ((lambda (G41b5@ls/false) (if G41b5@ls/false (apply (lambda (G41b7@imp*) '#f) G41b5@ls/false) ((lambda (G41b9@t) ((lambda (G41bb@ls/false) (if G41bb@ls/false (apply (lambda () (G303d@syntax-violation '#f '"malformed import form" G41a9@e)) G41bb@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G41b9@t))) (G2f52@syntax-dispatch G41b9@t '_))) G41b3@t))) (G2f52@syntax-dispatch G41b3@t '(_ . each-any)))) G41ab@t))) (G2f52@syntax-dispatch G41ab@t '(_ any)))) G41a9@e))) (set! G415f@module-import (lambda (G418a@e G418b@r) ((lambda (G418e@t) ((lambda (G4190@ls/false) (if (and G4190@ls/false (apply (lambda (G4192@id) (G2d53@id? G4192@id)) G4190@ls/false)) (apply (lambda (G4194@id) (call-with-values (lambda () (G2d7b@syntax-type G4194@id G418b@r)) (lambda (G4199@G4196 G419a@G4197 G419b@G4198) ((lambda (G419f@kwd G41a0@value G41a1@type) ((lambda (G41a5@t) (if (memv G41a5@t '($module)) ((lambda (G41a7@iface) (values (G2fab@module-interface-exp-id* G41a7@iface G4194@id) (G2fa3@module-interface-exp-lab-vec G41a7@iface))) G41a0@value) (G303d@syntax-violation '#f '"invalid import" G418a@e))) G41a1@type)) G419b@G4198 G419a@G4197 G4199@G4196)))) G4190@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G418e@t))) (G2f52@syntax-dispatch G418e@t '(_ any)))) G418a@e))) (set! G4161@library-import (lambda (G4170@e) ((lambda (G4172@t) ((lambda (G4174@ls/false) (if G4174@ls/false (apply (lambda (G4176@ctxt G4177@imp*) (call-with-values (lambda () (G2fb9@parse-import-spec* (G3043@syntax->datum G4177@imp*))) (lambda (G417c@G417a G417d@G417b) ((lambda (G4180@subst-labels G4181@subst-names) (values (vector-map (lambda (G4184@name) (G2d31@datum->stx G4176@ctxt G4184@name)) G4181@subst-names) G4180@subst-labels)) G417d@G417b G417c@G417a)))) G4174@ls/false) ((lambda (G4186@t) ((lambda (G4188@ls/false) (if G4188@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid import form" G4170@e)) G4188@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G4186@t))) (G2f52@syntax-dispatch G4186@t '_))) G4172@t))) (G2f52@syntax-dispatch G4172@t '(any . each-any)))) G4170@e))) (begin (call-with-values (lambda () (if (G415d@module-import? G40d1@e) (G415f@module-import G40d1@e G40be@r) (G4161@library-import G40d1@e))) (lambda (G4164@G4162 G4165@G4163) ((lambda (G4168@lab* G4169@id*) (vector-for-each (lambda (G416c@id G416d@lab) (G2d04@extend-rib! G40c5@rib G416c@id G416d@lab)) G4169@id* G4168@lab*)) G4165@G4163 G4164@G4162))) (G2faf@chi-body* (cdr G40bd@e*) G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?)))) '#f '#f '#f))) (if G40c6@top? (G2faf@chi-body* (cdr G40bd@e*) G40be@r G40bf@mr (cons (G2ccf@gen-lexical 'dummy) G40c0@lex*) (cons (cons 'top-expr G40d1@e) G40c1@rhs*) G40c2@mod** G40e2@kwd* G40c4@exp* G40c5@rib G40c6@top?) (values G40bd@e* G40be@r G40bf@mr G40c0@lex* G40c1@rhs* G40c2@mod** G40e2@kwd* G40c4@exp*)))))))))))))) G40de@type)) (if (G2d53@id? G40dc@kwd) (cons G40dc@kwd G40c3@kwd*) G40c3@kwd*))) G40d8@G40d5 G40d7@G40d4 G40d6@G40d3)))) (car G40bd@e*))))) (set! G2fb1@expand-transformer (lambda (G41bd@expr G41be@r) ((lambda (G41c1@rtc) ((lambda (G41c3@expanded-rhs) (begin (for-each ((lambda (G41c5@mark-visit) (lambda (G41c7@x) (begin (G2b6a@G2a11@invoke-library G41c7@x) (G41c5@mark-visit G41c7@x)))) (G2fc1@vis-collector)) (G41c1@rtc)) G41c3@expanded-rhs)) ((lambda (G41cd@G41c9 G41ce@G41ca G41cf@G41cb G41d0@G41cc) ((lambda (G41d5@swap) (dynamic-wind G41d5@swap (lambda () (G2f76@chi-expr G41bd@expr G41be@r G41be@r)) G41d5@swap)) (lambda () (begin ((lambda (G41d7@t) (begin (G41cd@G41c9 G41cf@G41cb) (set! G41cf@G41cb G41d7@t))) (G41cd@G41c9)) ((lambda (G41d9@t) (begin (G41ce@G41ca G41d0@G41cc) (set! G41d0@G41cc G41d9@t))) (G41ce@G41ca)))))) G2fbf@inv-collector G2fc1@vis-collector G41c1@rtc (lambda (G41db@x) (values))))) (G2fbd@make-collector)))) (set! G2fb3@parse-exports (lambda (G41dd@exp*) ((letrec ((G41df@f (lambda (G41e1@exp* G41e2@int* G41e3@ext*) (if (null? G41e1@exp*) (begin (if (not (G2d5d@valid-bound-ids? G41e3@ext*)) (G303d@syntax-violation 'export '"invalid exports" (G2f8a@find-dups G41e3@ext*)) (void)) (values (map G3043@syntax->datum G41e3@ext*) G41e2@int*)) ((lambda (G41e7@t) ((lambda (G41e9@ls/false) (if G41e9@ls/false (apply (lambda (G41eb@rename G41ec@i* G41ed@e*) (begin (if (not (and (eq? (G3043@syntax->datum G41eb@rename) 'rename) (for-all G2d53@id? G41ec@i*) (for-all G2d53@id? G41ed@e*))) (G303d@syntax-violation 'export '"invalid export specifier" (car G41e1@exp*)) (void)) (G41df@f (cdr G41e1@exp*) (append G41ec@i* G41e2@int*) (append G41ed@e* G41e3@ext*)))) G41e9@ls/false) ((lambda (G41f1@t) ((lambda (G41f3@ls/false) (if G41f3@ls/false (apply (lambda (G41f5@ie) (begin (if (not (G2d53@id? G41f5@ie)) (G303d@syntax-violation 'export '"invalid export" G41f5@ie) (void)) (G41df@f (cdr G41e1@exp*) (cons G41f5@ie G41e2@int*) (cons G41f5@ie G41e3@ext*)))) G41f3@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G41f1@t))) (G2f52@syntax-dispatch G41f1@t 'any))) G41e7@t))) (G2f52@syntax-dispatch G41e7@t '(any . #(each (any any)))))) (car G41e1@exp*)))))) G41df@f) G41dd@exp* '() '()))) (set! G2fb5@parse-library-name (lambda (G41f7@spec) ((lambda (G41fa@parse) (begin (set! G41fa@parse (lambda (G4205@x) ((lambda (G4207@t) ((lambda (G4209@ls/false) (if (and G4209@ls/false (apply (lambda (G420b@v*) (for-all (lambda (G420d@x) ((lambda (G420f@x) (and (integer? G420f@x) (exact? G420f@x))) (G3043@syntax->datum G420d@x))) G420b@v*)) G4209@ls/false)) (apply (lambda (G4211@v*) (values '() (map G3043@syntax->datum G4211@v*))) G4209@ls/false) ((lambda (G4213@t) ((lambda (G4215@ls/false) (if (and G4215@ls/false (apply (lambda (G4217@x G4218@rest) (symbol? (G3043@syntax->datum G4217@x))) G4215@ls/false)) (apply (lambda (G421b@x G421c@rest) (call-with-values (lambda () (G41fa@parse G421c@rest)) (lambda (G4221@G421f G4222@G4220) ((lambda (G4225@v* G4226@x*) (values (cons (G3043@syntax->datum G421b@x) G4226@x*) G4225@v*)) G4222@G4220 G4221@G421f)))) G4215@ls/false) ((lambda (G4229@t) ((lambda (G422b@ls/false) (if G422b@ls/false (apply (lambda () (values '() '())) G422b@ls/false) ((lambda (G422d@t) ((lambda (G422f@ls/false) (if G422f@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid library name" G41f7@spec)) G422f@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G422d@t))) (G2f52@syntax-dispatch G422d@t '_))) G4229@t))) (G2f52@syntax-dispatch G4229@t '()))) G4213@t))) (G2f52@syntax-dispatch G4213@t '(any . any)))) G4207@t))) (G2f52@syntax-dispatch G4207@t '(each-any)))) G4205@x))) (call-with-values (lambda () (G41fa@parse G41f7@spec)) (lambda (G41fd@G41fb G41fe@G41fc) ((lambda (G4201@ver* G4202@name*) (begin (if (null? G4202@name*) (G303d@syntax-violation '#f '"empty library name" G41f7@spec) (void)) (values G4202@name* G4201@ver*))) G41fe@G41fc G41fd@G41fb))))) '#f))) (set! G2fb7@parse-library (lambda (G4231@e) ((lambda (G4233@t) ((lambda (G4235@ls/false) (if (and G4235@ls/false (apply (lambda (G4237@library G4238@name* G4239@export G423a@exp* G423b@import G423c@imp* G423d@b*) (and (eq? (G3043@syntax->datum G4239@export) 'export) (eq? (G3043@syntax->datum G423b@import) 'import) (eq? (G3043@syntax->datum G4237@library) 'library))) G4235@ls/false)) (apply (lambda (G4245@library G4246@name* G4247@export G4248@exp* G4249@import G424a@imp* G424b@b*) (values G4246@name* G4248@exp* G424a@imp* G424b@b*)) G4235@ls/false) ((lambda (G4253@t) ((lambda (G4255@ls/false) (if G4255@ls/false (apply (lambda () (G303d@syntax-violation '#f '"malformed library" G4231@e)) G4255@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G4253@t))) (G2f52@syntax-dispatch G4253@t '_))) G4233@t))) (G2f52@syntax-dispatch G4233@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4231@e))) (set! G2fb9@parse-import-spec* ((lambda () ((lambda (G4258@idsyn? G425a@dup-error G425c@merge-substs G425e@exclude* G4260@find* G4262@rem* G4264@remove-dups G4266@parse-library-name G4268@import-library G426a@get-import G426c@add-imports!) (begin (set! G4258@idsyn? (lambda (G4457@x) (symbol? (G3043@syntax->datum G4457@x)))) (set! G425a@dup-error (lambda (G4455@name) (G303d@syntax-violation 'import '"two imports with different bindings" G4455@name))) (set! G425c@merge-substs (lambda (G4443@s G4444@subst) ((lambda (G4448@insert-to-subst) (begin (set! G4448@insert-to-subst (lambda (G4449@a G444a@subst) ((lambda (G444d@name G444e@label) ((lambda (G4451@t) (if G4451@t ((lambda (G4453@x) (if (eq? (cdr G4453@x) G444e@label) G444a@subst (G425a@dup-error G444d@name))) G4451@t) (cons G4449@a G444a@subst))) (assq G444d@name G444a@subst))) (car G4449@a) (cdr G4449@a)))) (if (null? G4443@s) G4444@subst (G4448@insert-to-subst (car G4443@s) (G425c@merge-substs (cdr G4443@s) G4444@subst))))) '#f))) (set! G425e@exclude* (lambda (G4419@sym* G441a@subst) ((lambda (G441e@exclude) (begin (set! G441e@exclude (lambda (G4433@sym G4434@subst) (if (null? G4434@subst) (G303d@syntax-violation 'import '"cannot rename unbound identifier" G4433@sym) (if (eq? G4433@sym (caar G4434@subst)) (values (cdar G4434@subst) (cdr G4434@subst)) ((lambda (G4437@a) (call-with-values (lambda () (G441e@exclude G4433@sym (cdr G4434@subst))) (lambda (G443b@G4439 G443c@G443a) ((lambda (G443f@subst G4440@old) (values G4440@old (cons G4437@a G443f@subst))) G443c@G443a G443b@G4439)))) (car G4434@subst)))))) (if (null? G4419@sym*) (values '() G441a@subst) (call-with-values (lambda () (G441e@exclude (car G4419@sym*) G441a@subst)) (lambda (G4421@G441f G4422@G4420) ((lambda (G4425@subst G4426@old) (call-with-values (lambda () (G425e@exclude* (cdr G4419@sym*) G4425@subst)) (lambda (G442b@G4429 G442c@G442a) ((lambda (G442f@subst G4430@old*) (values (cons G4426@old G4430@old*) G442f@subst)) G442c@G442a G442b@G4429)))) G4422@G4420 G4421@G441f)))))) '#f))) (set! G4260@find* (lambda (G4411@sym* G4412@subst) (map (lambda (G4415@x) ((lambda (G4417@t) (if G4417@t (cdr G4417@t) (G303d@syntax-violation 'import '"cannot find identifier" G4415@x))) (assq G4415@x G4412@subst))) G4411@sym*))) (set! G4262@rem* (lambda (G4409@sym* G440a@subst) ((letrec ((G440d@f (lambda (G440f@subst) (if (null? G440f@subst) '() (if (memq (caar G440f@subst) G4409@sym*) (G440d@f (cdr G440f@subst)) (cons (car G440f@subst) (G440d@f (cdr G440f@subst)))))))) G440d@f) G440a@subst))) (set! G4264@remove-dups (lambda (G4407@ls) (if (null? G4407@ls) '() (if (memq (car G4407@ls) (cdr G4407@ls)) (G4264@remove-dups (cdr G4407@ls)) (cons (car G4407@ls) (G4264@remove-dups (cdr G4407@ls))))))) (set! G4266@parse-library-name (lambda (G4321@spec) ((lambda (G4324@subversion? G4326@subversion-pred G4328@version-pred) (begin (set! G4324@subversion? (lambda (G4403@x) ((lambda (G4405@x) (and (integer? G4405@x) (exact? G4405@x) (>= G4405@x '0))) (G3043@syntax->datum G4403@x)))) (set! G4326@subversion-pred (lambda (G43a3@x*) ((lambda (G43a5@t) ((lambda (G43a7@ls/false) (if (and G43a7@ls/false (apply (lambda (G43a9@n) (G4324@subversion? G43a9@n)) G43a7@ls/false)) (apply (lambda (G43ab@n) (lambda (G43ad@x) (= G43ad@x (G3043@syntax->datum G43ab@n)))) G43a7@ls/false) ((lambda (G43af@t) ((lambda (G43b1@ls/false) (if (and G43b1@ls/false (apply (lambda (G43b3@p? G43b4@sub*) (eq? (G3043@syntax->datum G43b3@p?) 'and)) G43b1@ls/false)) (apply (lambda (G43b7@p? G43b8@sub*) ((lambda (G43bb@p*) (lambda (G43bd@x) (for-all (lambda (G43bf@p) (G43bf@p G43bd@x)) G43bb@p*))) (map G4326@subversion-pred G43b8@sub*))) G43b1@ls/false) ((lambda (G43c1@t) ((lambda (G43c3@ls/false) (if (and G43c3@ls/false (apply (lambda (G43c5@p? G43c6@sub*) (eq? (G3043@syntax->datum G43c5@p?) 'or)) G43c3@ls/false)) (apply (lambda (G43c9@p? G43ca@sub*) ((lambda (G43cd@p*) (lambda (G43cf@x) (exists (lambda (G43d1@p) (G43d1@p G43cf@x)) G43cd@p*))) (map G4326@subversion-pred G43ca@sub*))) G43c3@ls/false) ((lambda (G43d3@t) ((lambda (G43d5@ls/false) (if (and G43d5@ls/false (apply (lambda (G43d7@p? G43d8@sub) (eq? (G3043@syntax->datum G43d7@p?) 'not)) G43d5@ls/false)) (apply (lambda (G43db@p? G43dc@sub) ((lambda (G43df@p) (lambda (G43e1@x) (not (G43df@p G43e1@x)))) (G4326@subversion-pred G43dc@sub))) G43d5@ls/false) ((lambda (G43e3@t) ((lambda (G43e5@ls/false) (if (and G43e5@ls/false (apply (lambda (G43e7@p? G43e8@n) (and (eq? (G3043@syntax->datum G43e7@p?) '<=) (G4324@subversion? G43e8@n))) G43e5@ls/false)) (apply (lambda (G43eb@p? G43ec@n) (lambda (G43ef@x) (<= G43ef@x (G3043@syntax->datum G43ec@n)))) G43e5@ls/false) ((lambda (G43f1@t) ((lambda (G43f3@ls/false) (if (and G43f3@ls/false (apply (lambda (G43f5@p? G43f6@n) (and (eq? (G3043@syntax->datum G43f5@p?) '>=) (G4324@subversion? G43f6@n))) G43f3@ls/false)) (apply (lambda (G43f9@p? G43fa@n) (lambda (G43fd@x) (>= G43fd@x (G3043@syntax->datum G43fa@n)))) G43f3@ls/false) ((lambda (G43ff@t) ((lambda (G4401@ls/false) (if G4401@ls/false (apply (lambda () (G303d@syntax-violation 'import '"invalid sub-version spec" G4321@spec G43a3@x*)) G4401@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G43ff@t))) (G2f52@syntax-dispatch G43ff@t '_))) G43f1@t))) (G2f52@syntax-dispatch G43f1@t '(any any)))) G43e3@t))) (G2f52@syntax-dispatch G43e3@t '(any any)))) G43d3@t))) (G2f52@syntax-dispatch G43d3@t '(any any)))) G43c1@t))) (G2f52@syntax-dispatch G43c1@t '(any . each-any)))) G43af@t))) (G2f52@syntax-dispatch G43af@t '(any . each-any)))) G43a5@t))) (G2f52@syntax-dispatch G43a5@t 'any))) G43a3@x*))) (set! G4328@version-pred (lambda (G4353@x*) ((lambda (G4355@t) ((lambda (G4357@ls/false) (if G4357@ls/false (apply (lambda () (lambda (G4359@x) '#t)) G4357@ls/false) ((lambda (G435b@t) ((lambda (G435d@ls/false) (if (and G435d@ls/false (apply (lambda (G435f@c G4360@ver*) (eq? (G3043@syntax->datum G435f@c) 'and)) G435d@ls/false)) (apply (lambda (G4363@c G4364@ver*) ((lambda (G4367@p*) (lambda (G4369@x) (for-all (lambda (G436b@p) (G436b@p G4369@x)) G4367@p*))) (map G4328@version-pred G4364@ver*))) G435d@ls/false) ((lambda (G436d@t) ((lambda (G436f@ls/false) (if (and G436f@ls/false (apply (lambda (G4371@c G4372@ver*) (eq? (G3043@syntax->datum G4371@c) 'or)) G436f@ls/false)) (apply (lambda (G4375@c G4376@ver*) ((lambda (G4379@p*) (lambda (G437b@x) (exists (lambda (G437d@p) (G437d@p G437b@x)) G4379@p*))) (map G4328@version-pred G4376@ver*))) G436f@ls/false) ((lambda (G437f@t) ((lambda (G4381@ls/false) (if (and G4381@ls/false (apply (lambda (G4383@c G4384@ver) (eq? (G3043@syntax->datum G4383@c) 'not)) G4381@ls/false)) (apply (lambda (G4387@c G4388@ver) ((lambda (G438b@p) (lambda (G438d@x) (not (G438b@p G438d@x)))) (G4328@version-pred G4388@ver))) G4381@ls/false) ((lambda (G438f@t) ((lambda (G4391@ls/false) (if G4391@ls/false (apply (lambda (G4393@sub*) ((lambda (G4395@p*) (lambda (G4397@x) ((letrec ((G4399@f (lambda (G439b@p* G439c@x) (if (null? G439b@p*) '#t (if (null? G439c@x) '#f (and ((car G439b@p*) (car G439c@x)) (G4399@f (cdr G439b@p*) (cdr G439c@x)))))))) G4399@f) G4395@p* G4397@x))) (map G4326@subversion-pred G4393@sub*))) G4391@ls/false) ((lambda (G439f@t) ((lambda (G43a1@ls/false) (if G43a1@ls/false (apply (lambda () (G303d@syntax-violation 'import '"invalid version spec" G4321@spec G4353@x*)) G43a1@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G439f@t))) (G2f52@syntax-dispatch G439f@t '_))) G438f@t))) (G2f52@syntax-dispatch G438f@t 'each-any))) G437f@t))) (G2f52@syntax-dispatch G437f@t '(any any)))) G436d@t))) (G2f52@syntax-dispatch G436d@t '(any . each-any)))) G435b@t))) (G2f52@syntax-dispatch G435b@t '(any . each-any)))) G4355@t))) (G2f52@syntax-dispatch G4355@t '()))) G4353@x*))) ((letrec ((G4329@f (lambda (G432b@x) ((lambda (G432d@t) ((lambda (G432f@ls/false) (if G432f@ls/false (apply (lambda (G4331@version-spec*) (values '() (G4328@version-pred G4331@version-spec*))) G432f@ls/false) ((lambda (G4333@t) ((lambda (G4335@ls/false) (if (and G4335@ls/false (apply (lambda (G4337@x G4338@x*) (G4258@idsyn? G4337@x)) G4335@ls/false)) (apply (lambda (G433b@x G433c@x*) (call-with-values (lambda () (G4329@f G433c@x*)) (lambda (G4341@G433f G4342@G4340) ((lambda (G4345@pred G4346@name) (values (cons (G3043@syntax->datum G433b@x) G4346@name) G4345@pred)) G4342@G4340 G4341@G433f)))) G4335@ls/false) ((lambda (G4349@t) ((lambda (G434b@ls/false) (if G434b@ls/false (apply (lambda () (values '() (lambda (G434d@x) '#t))) G434b@ls/false) ((lambda (G434f@t) ((lambda (G4351@ls/false) (if G4351@ls/false (apply (lambda () (G303d@syntax-violation '#f '"invalid import spec" G4321@spec)) G4351@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G434f@t))) (G2f52@syntax-dispatch G434f@t '_))) G4349@t))) (G2f52@syntax-dispatch G4349@t '()))) G4333@t))) (G2f52@syntax-dispatch G4333@t '(any . any)))) G432d@t))) (G2f52@syntax-dispatch G432d@t '(each-any)))) G432b@x)))) G4329@f) G4321@spec))) '#f '#f '#f))) (set! G4268@import-library (lambda (G4313@spec*) (call-with-values (lambda () (G4266@parse-library-name G4313@spec*)) (lambda (G4317@G4315 G4318@G4316) ((lambda (G431b@pred G431c@name) (begin (if (null? G431c@name) (G303d@syntax-violation 'import '"empty library name" G4313@spec*) (void)) ((lambda (G431f@lib) (begin (if (not G431f@lib) (G303d@syntax-violation 'import '"cannot find library with required name" G431c@name) (void)) (if (not (G431b@pred (G2b3b@G29b3@library-version G431f@lib))) (G303d@syntax-violation 'import '"library does not satisfy version specification" G4313@spec* G431f@lib) (void)) ((G2fc3@imp-collector) G431f@lib) (G2b3f@G29bb@library-subst G431f@lib))) (G2b63@G2a03@find-library-by-name G431c@name)))) G4318@G4316 G4317@G4315))))) (set! G426a@get-import (lambda (G4285@spec) ((lambda (G4287@t) ((lambda (G4289@ls/false) (if (and G4289@ls/false (apply (lambda (G428b@x G428c@x*) (not (memq (G3043@syntax->datum G428b@x) '(for rename except only prefix library)))) G4289@ls/false)) (apply (lambda (G428f@x G4290@x*) (G4268@import-library (cons G428f@x G4290@x*))) G4289@ls/false) ((lambda (G4293@t) ((lambda (G4295@ls/false) (if (and G4295@ls/false (apply (lambda (G4297@rename G4298@isp G4299@old* G429a@new*) (and (eq? (G3043@syntax->datum G4297@rename) 'rename) (for-all G4258@idsyn? G4299@old*) (for-all G4258@idsyn? G429a@new*))) G4295@ls/false)) (apply (lambda (G429f@rename G42a0@isp G42a1@old* G42a2@new*) ((lambda (G42a7@subst G42a8@old* G42a9@new*) ((lambda (G42ad@old-label*) ((lambda (G42af@subst) (G425c@merge-substs (map cons G42a9@new* G42ad@old-label*) G42af@subst)) (G4262@rem* G42a8@old* G42a7@subst))) (G4260@find* G42a8@old* G42a7@subst))) (G426a@get-import G42a0@isp) (map G3043@syntax->datum G42a1@old*) (map G3043@syntax->datum G42a2@new*))) G4295@ls/false) ((lambda (G42b1@t) ((lambda (G42b3@ls/false) (if (and G42b3@ls/false (apply (lambda (G42b5@except G42b6@isp G42b7@sym*) (and (eq? (G3043@syntax->datum G42b5@except) 'except) (for-all G4258@idsyn? G42b7@sym*))) G42b3@ls/false)) (apply (lambda (G42bb@except G42bc@isp G42bd@sym*) ((lambda (G42c1@subst) (G4262@rem* (map G3043@syntax->datum G42bd@sym*) G42c1@subst)) (G426a@get-import G42bc@isp))) G42b3@ls/false) ((lambda (G42c3@t) ((lambda (G42c5@ls/false) (if (and G42c5@ls/false (apply (lambda (G42c7@only G42c8@isp G42c9@sym*) (and (eq? (G3043@syntax->datum G42c7@only) 'only) (for-all G4258@idsyn? G42c9@sym*))) G42c5@ls/false)) (apply (lambda (G42cd@only G42ce@isp G42cf@sym*) ((lambda (G42d3@subst G42d4@sym*) ((lambda (G42d7@sym*) ((lambda (G42d9@lab*) (map cons G42d7@sym* G42d9@lab*)) (G4260@find* G42d7@sym* G42d3@subst))) (G4264@remove-dups G42d4@sym*))) (G426a@get-import G42ce@isp) (map G3043@syntax->datum G42cf@sym*))) G42c5@ls/false) ((lambda (G42db@t) ((lambda (G42dd@ls/false) (if (and G42dd@ls/false (apply (lambda (G42df@prefix G42e0@isp G42e1@p) (and (eq? (G3043@syntax->datum G42df@prefix) 'prefix) (G4258@idsyn? G42e1@p))) G42dd@ls/false)) (apply (lambda (G42e5@prefix G42e6@isp G42e7@p) ((lambda (G42eb@subst G42ec@prefix) (map (lambda (G42ef@x) (cons (string->symbol (string-append G42ec@prefix (symbol->string (car G42ef@x)))) (cdr G42ef@x))) G42eb@subst)) (G426a@get-import G42e6@isp) (symbol->string (G3043@syntax->datum G42e7@p)))) G42dd@ls/false) ((lambda (G42f1@t) ((lambda (G42f3@ls/false) (if (and G42f3@ls/false (apply (lambda (G42f5@library G42f6@spec*) (eq? (G3043@syntax->datum G42f5@library) 'library)) G42f3@ls/false)) (apply (lambda (G42f9@library G42fa@spec*) (G4268@import-library G42fa@spec*)) G42f3@ls/false) ((lambda (G42fd@t) ((lambda (G42ff@ls/false) (if (and G42ff@ls/false (apply (lambda (G4301@for G4302@isp G4303@rest) (eq? (G3043@syntax->datum G4301@for) 'for)) G42ff@ls/false)) (apply (lambda (G4307@for G4308@isp G4309@rest) (G426a@get-import G4308@isp)) G42ff@ls/false) ((lambda (G430d@t) ((lambda (G430f@ls/false) (if G430f@ls/false (apply (lambda (G4311@spec) (G303d@syntax-violation 'import '"invalid import spec" G4311@spec)) G430f@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G430d@t))) (G2f52@syntax-dispatch G430d@t 'any))) G42fd@t))) (G2f52@syntax-dispatch G42fd@t '(any any . any)))) G42f1@t))) (G2f52@syntax-dispatch G42f1@t '(any each-any)))) G42db@t))) (G2f52@syntax-dispatch G42db@t '(any any any)))) G42c3@t))) (G2f52@syntax-dispatch G42c3@t '(any any . each-any)))) G42b1@t))) (G2f52@syntax-dispatch G42b1@t '(any any . each-any)))) G4293@t))) (G2f52@syntax-dispatch G4293@t '(any any . #(each (any any)))))) G4287@t))) (G2f52@syntax-dispatch G4287@t '(any . each-any)))) G4285@spec))) (set! G426c@add-imports! (lambda (G4275@imp G4276@h) ((lambda (G4279@subst) (for-each (lambda (G427b@x) ((lambda (G427d@name G427e@label) ((lambda (G4281@t) (if G4281@t ((lambda (G4283@l) (if (not (eq? G4283@l G427e@label)) (G425a@dup-error G427d@name) (void))) G4281@t) (hashtable-set! G4276@h G427d@name G427e@label))) (hashtable-ref G4276@h G427d@name '#f))) (car G427b@x) (cdr G427b@x))) G4279@subst)) (G426a@get-import G4275@imp)))) (lambda (G426d@imp*) ((letrec ((G426f@f (lambda (G4271@imp* G4272@h) (if (null? G4271@imp*) (hashtable-entries G4272@h) (begin (G426c@add-imports! (car G4271@imp*) G4272@h) (G426f@f (cdr G4271@imp*) G4272@h)))))) G426f@f) G426d@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fbb@make-top-rib (lambda (G4459@names G445a@labels) ((lambda (G445d@rib) (begin (vector-for-each (lambda (G445f@name G4460@label) (begin (if (not (symbol? G445f@name)) (error 'make-top-rib '"BUG: not a symbol" G445f@name) (void)) (G2d06@extend-rib/nc! G445d@rib (G2d1d@make-stx G445f@name G2ccb@top-mark* '() '()) G4460@label))) G4459@names G445a@labels) G445d@rib)) (G2d00@make-cache-rib)))) (set! G2fbd@make-collector (lambda () ((lambda (G4463@ls) (lambda G4467 ((lambda (G4468) (if (= G4468 '0) (apply (lambda () G4463@ls) G4467) (if (= G4468 '1) (apply (lambda (G4465@x) (set! G4463@ls (G2cc4@set-cons G4465@x G4463@ls))) G4467) (error 'apply '"invalid arg count")))) (length G4467)))) '()))) (set! G2fbf@inv-collector (G28ef@G2825@make-parameter (lambda G4469@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G446b@x) (begin (if (not (procedure? G446b@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G446b@x) (void)) G446b@x)))) (set! G2fc1@vis-collector (G28ef@G2825@make-parameter (lambda G446d@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G446f@x) (begin (if (not (procedure? G446f@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G446f@x) (void)) G446f@x)))) (set! G2fc3@imp-collector (G28ef@G2825@make-parameter (lambda G4471@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4473@x) (begin (if (not (procedure? G4473@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4473@x) (void)) G4473@x)))) (set! G2fc5@chi-library-internal (lambda (G4475@e* G4476@rib G4477@top?) (call-with-values (lambda () (G2faf@chi-body* G4475@e* '() '() '() '() '() '() '() G4476@rib G4477@top?)) (lambda (G4483@G447b G4484@G447c G4485@G447d G4486@G447e G4487@G447f G4488@G4480 G4489@G4481 G448a@G4482) ((lambda (G4493@exp* G4494@_kwd* G4495@mod** G4496@rhs* G4497@lex* G4498@mr G4499@r G449a@e*) (values (append (apply append (reverse G4495@mod**)) G449a@e*) G4499@r G4498@mr (reverse G4497@lex*) (reverse G4496@rhs*) G4493@exp*)) G448a@G4482 G4489@G4481 G4488@G4480 G4487@G447f G4486@G447e G4485@G447d G4484@G447c G4483@G447b))))) (set! G2fc7@chi-interaction-expr (lambda (G44a3@e G44a4@rib G44a5@r) (call-with-values (lambda () (G2faf@chi-body* (list G44a3@e) G44a5@r G44a5@r '() '() '() '() '() G44a4@rib '#t)) (lambda (G44b1@G44a9 G44b2@G44aa G44b3@G44ab G44b4@G44ac G44b5@G44ad G44b6@G44ae G44b7@G44af G44b8@G44b0) ((lambda (G44c1@_exp* G44c2@_kwd* G44c3@mod** G44c4@rhs* G44c5@lex* G44c6@mr G44c7@r G44c8@e*) ((lambda (G44d1@e*) ((lambda (G44d3@e) (values G44d3@e G44c7@r)) (if (null? G44d1@e*) (G2cb1@G2c23@build-void) (if (null? (cdr G44d1@e*)) (car G44d1@e*) (G2cb0@G2c21@build-sequence '#f G44d1@e*))))) (G2f84@expand-interaction-rhs*/init* (reverse G44c5@lex*) (reverse G44c4@rhs*) (append (apply append (reverse G44c3@mod**)) G44c8@e*) G44c7@r G44c6@mr))) G44b8@G44b0 G44b7@G44af G44b6@G44ae G44b5@G44ad G44b4@G44ac G44b3@G44ab G44b2@G44aa G44b1@G44a9))))) (set! G2fc9@library-body-expander (lambda (G44d5@name G44d6@main-exp* G44d7@imp* G44d8@b* G44d9@top?) ((lambda (G44e0@itc) (begin (set! G44e0@itc (G2fbd@make-collector)) ((lambda (G44e5@G44e1 G44e6@G44e2 G44e7@G44e3 G44e8@G44e4) ((lambda (G44ed@swap) (dynamic-wind G44ed@swap (lambda () (call-with-values (lambda () (G2fb9@parse-import-spec* G44d7@imp*)) (lambda (G44f1@G44ef G44f2@G44f0) ((lambda (G44f5@subst-labels G44f6@subst-names) ((lambda (G44f9@rib) ((lambda (G44fc@wrap) (begin (set! G44fc@wrap (lambda (G4568@x) (G2d1d@make-stx G4568@x G2ccb@top-mark* (list G44f9@rib) '()))) ((lambda (G44fd@b* G44fe@main-exp* G44ff@rtc G4500@vtc) ((lambda (G4509@G4505 G450a@G4506 G450b@G4507 G450c@G4508) ((lambda (G4511@swap) (dynamic-wind G4511@swap (lambda () (call-with-values (lambda () (G2fc5@chi-library-internal G44fd@b* G44f9@rib G44d9@top?)) (lambda (G4519@G4513 G451a@G4514 G451b@G4515 G451c@G4516 G451d@G4517 G451e@G4518) ((lambda (G4525@internal-exp* G4526@rhs* G4527@lex* G4528@mr G4529@r G452a@init*) (call-with-values (lambda () (G2fb3@parse-exports (append G44fe@main-exp* G4525@internal-exp*))) (lambda (G4533@G4531 G4534@G4532) ((lambda (G4537@exp-id* G4538@exp-name*) (begin (G2d0a@seal-rib! G44f9@rib) ((lambda (G453b@init*) ((lambda (G453d@rhs*) ((lambda () (begin (G2d0c@unseal-rib! G44f9@rib) ((lambda (G453f@loc* G4540@export-subst) ((lambda (G4544@errstr) (begin (set! G4544@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3029@make-export-env/macros G4527@lex* G453f@loc* G4529@r)) (lambda (G4548@G4545 G4549@G4546 G454a@G4547) ((lambda (G454e@macro* G454f@global* G4550@export-env) (begin (for-each (lambda (G4554@s) ((lambda (G4556@name G4557@label) ((lambda (G455a@p) (if G455a@p ((lambda (G455c@b) ((lambda (G455e@type) (if (eq? G455e@type 'mutable) (G303d@syntax-violation 'export G4544@errstr G4556@name) (void))) (car G455c@b))) (cdr G455a@p)) (void))) (assq G4557@label G4550@export-env))) (car G4554@s) (cdr G4554@s))) G4540@export-subst) ((lambda (G4560@invoke-body G4561@invoke-definitions) (values (G44e0@itc) (G44ff@rtc) (G4500@vtc) (G2cb0@G2c21@build-sequence '#f (append G4561@invoke-definitions (list G4560@invoke-body))) G454e@macro* G4540@export-subst G4550@export-env)) (G2cb3@G2c27@build-letrec* '#f G4527@lex* G453d@rhs* (G3025@build-exports G454f@global* G453b@init*)) (map G2cac@G2b71@build-global-define (map cdr G454f@global*))))) G454a@G4547 G4549@G4546 G4548@G4545))))) '#f)) (map G2cd1@gen-global G4527@lex*) (G3027@make-export-subst G4538@exp-name* G4537@exp-id*)))))) (G2f86@chi-rhs* G4526@rhs* G4529@r G4528@mr))) (G2f72@chi-expr* G452a@init* G4529@r G4528@mr)))) G4534@G4532 G4533@G4531)))) G451e@G4518 G451d@G4517 G451c@G4516 G451b@G4515 G451a@G4514 G4519@G4513)))) G4511@swap)) (lambda () (begin ((lambda (G4564@t) (begin (G4509@G4505 G450b@G4507) (set! G450b@G4507 G4564@t))) (G4509@G4505)) ((lambda (G4566@t) (begin (G450a@G4506 G450c@G4508) (set! G450c@G4508 G4566@t))) (G450a@G4506)))))) G2fbf@inv-collector G2fc1@vis-collector G44ff@rtc G4500@vtc)) (map G44fc@wrap G44d8@b*) (map G44fc@wrap G44d6@main-exp*) (G2fbd@make-collector) (G2fbd@make-collector)))) '#f)) (G2fbb@make-top-rib G44f6@subst-names G44f5@subst-labels))) G44f2@G44f0 G44f1@G44ef)))) G44ed@swap)) (lambda () (begin ((lambda (G456a@t) (begin (G44e5@G44e1 G44e7@G44e3) (set! G44e7@G44e3 G456a@t))) (G44e5@G44e1)) ((lambda (G456c@t) (begin (G44e6@G44e2 G44e8@G44e4) (set! G44e8@G44e4 G456c@t))) (G44e6@G44e2)))))) G2fc3@imp-collector G304b@top-level-context G44e0@itc '#f))) '#f))) (set! G2fcb@core-library-expander (lambda (G456e@e G456f@verify-name) (call-with-values (lambda () (G2fb7@parse-library G456e@e)) (lambda (G4576@G4572 G4577@G4573 G4578@G4574 G4579@G4575) ((lambda (G457e@b* G457f@imp* G4580@exp* G4581@name*) (call-with-values (lambda () (G2fb5@parse-library-name G4581@name*)) (lambda (G4588@G4586 G4589@G4587) ((lambda (G458c@ver G458d@name) (begin (G456f@verify-name G458d@name) (call-with-values (lambda () (G2fc9@library-body-expander G458d@name G4580@exp* G457f@imp* G457e@b* '#f)) (lambda (G4597@G4590 G4598@G4591 G4599@G4592 G459a@G4593 G459b@G4594 G459c@G4595 G459d@G4596) ((lambda (G45a5@export-env G45a6@export-subst G45a7@visit-code G45a8@invoke-code G45a9@visit-req* G45aa@invoke-req* G45ab@imp*) (values G458d@name G458c@ver G45ab@imp* G45aa@invoke-req* G45a9@visit-req* G45a8@invoke-code G45a7@visit-code G45a6@export-subst G45a5@export-env)) G459d@G4596 G459c@G4595 G459b@G4594 G459a@G4593 G4599@G4592 G4598@G4591 G4597@G4590))))) G4589@G4587 G4588@G4586)))) G4579@G4575 G4578@G4574 G4577@G4573 G4576@G4572))))) (set! G2fcd@parse-top-level-program (lambda (G45b3@e*) ((lambda (G45b5@t) ((lambda (G45b7@ls/false) (if (and G45b7@ls/false (apply (lambda (G45b9@import G45ba@imp* G45bb@b*) (eq? (G3043@syntax->datum G45b9@import) 'import)) G45b7@ls/false)) (apply (lambda (G45bf@import G45c0@imp* G45c1@b*) (values G45c0@imp* G45c1@b*)) G45b7@ls/false) ((lambda (G45c5@t) ((lambda (G45c7@ls/false) (if (and G45c7@ls/false (apply (lambda (G45c9@import G45ca@x G45cb@y) (eq? (G3043@syntax->datum G45c9@import) 'import)) G45c7@ls/false)) (apply (lambda (G45cf@import G45d0@x G45d1@y) (G303d@syntax-violation 'expander '"invalid syntax of top-level program" (G2d4d@syntax-car G45b3@e*))) G45c7@ls/false) ((lambda (G45d5@t) ((lambda (G45d7@ls/false) (if G45d7@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45d7@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G45d5@t))) (G2f52@syntax-dispatch G45d5@t '_))) G45c5@t))) (G2f52@syntax-dispatch G45c5@t '((any . any) . any)))) G45b5@t))) (G2f52@syntax-dispatch G45b5@t '((any . each-any) . each-any)))) G45b3@e*))) (set! G2fcf@top-level-expander (lambda (G45d9@e*) (call-with-values (lambda () (G2fcd@parse-top-level-program G45d9@e*)) (lambda (G45dd@G45db G45de@G45dc) ((lambda (G45e1@b* G45e2@imp*) (call-with-values (lambda () (G2fc9@library-body-expander '() '() G45e2@imp* G45e1@b* '#t)) (lambda (G45ec@G45e5 G45ed@G45e6 G45ee@G45e7 G45ef@G45e8 G45f0@G45e9 G45f1@G45ea G45f2@G45eb) ((lambda (G45fa@export-env G45fb@export-subst G45fc@visit-code G45fd@invoke-code G45fe@visit-req* G45ff@invoke-req* G4600@imp*) (values G45ff@invoke-req* G45fd@invoke-code)) G45f2@G45eb G45f1@G45ea G45f0@G45e9 G45ef@G45e8 G45ee@G45e7 G45ed@G45e6 G45ec@G45e5)))) G45de@G45dc G45dd@G45db))))) (set! G2fd5@G2fd0 (make-record-type-descriptor 'env '#f 'G2fd3 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fd7@G2fd2 '#f) (set! G2fd9@G2fd1 (make-record-constructor-descriptor G2fd5@G2fd0 '#f G2fd7@G2fd2)) (set! G2fdc@env? (record-predicate G2fd5@G2fd0)) (set! G2fde@make-env (record-constructor G2fd9@G2fd1)) (set! G2fe0@env-names (record-accessor G2fd5@G2fd0 '0)) (set! G2fe2@env-labels (record-accessor G2fd5@G2fd0 '1)) (set! G2fe4@env-itc (record-accessor G2fd5@G2fd0 '2)) (set! G2fe6@set-env-names! (record-mutator G2fd5@G2fd0 '0)) (set! G2fe8@set-env-labels! (record-mutator G2fd5@G2fd0 '1)) (set! G2fea@set-env-itc! (record-mutator G2fd5@G2fd0 '2)) (set! G2fec@rp (G28ec@G281f@make-record-printer 'env (lambda (G4608@x G4609@p G460a@wr) (display '"#<environment>" G4609@p)))) (set! G2ff2@G2fed (make-record-type-descriptor 'interaction-env '#f 'G2ff0 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2ff4@G2fef '#f) (set! G2ff6@G2fee (make-record-constructor-descriptor G2ff2@G2fed '#f G2ff4@G2fef)) (set! G2ff9@interaction-env? (record-predicate G2ff2@G2fed)) (set! G2ffb@make-interaction-env (record-constructor G2ff6@G2fee)) (set! G2ffd@interaction-env-rib (record-accessor G2ff2@G2fed '0)) (set! G2fff@interaction-env-r (record-accessor G2ff2@G2fed '1)) (set! G3001@interaction-env-locs (record-accessor G2ff2@G2fed '2)) (set! G3003@set-interaction-env-rib! (record-mutator G2ff2@G2fed '0)) (set! G3005@set-interaction-env-r! (record-mutator G2ff2@G2fed '1)) (set! G3007@set-interaction-env-locs! (record-mutator G2ff2@G2fed '2)) (set! G3009@rp (G28ec@G281f@make-record-printer 'interaction-env (lambda (G460e@x G460f@p G4610@wr) (display '"#<environment>" G460f@p)))) (set! G300b@interaction-environment-symbols (lambda () (G3013@environment-symbols (G3049@interaction-environment)))) (set! G300d@environment-bindings (lambda (G4614@e) (vector->list (vector-map (lambda (G4616@name G4617@label) (G300f@parse-binding (cons G4616@name (G2b69@G2a0f@imported-label->binding G4617@label)))) (G2fe0@env-names G4614@e) (G2fe2@env-labels G4614@e))))) (set! G300f@parse-binding (lambda (G461a@b) (cons (car G461a@b) ((lambda (G461c@t) (if (memv G461c@t '(core-prim global)) 'procedure (if (memv G461c@t '(core-macro macro global-macro)) 'syntax (if (memv G461c@t '($core-rtd)) 'record (if (eq? (car G461a@b) (cadr G461a@b)) 'syntax 'unknown))))) (cadr G461a@b))))) (set! G3011@environment? (lambda (G461e@x) (or (G2fdc@env? G461e@x) (G2ff9@interaction-env? G461e@x)))) (set! G3013@environment-symbols (lambda (G4620@x) (if (G2fdc@env? G4620@x) (vector->list (G2fe0@env-names G4620@x)) (if (G2ff9@interaction-env? G4620@x) (map values (G2cea@rib-sym* (G2ffd@interaction-env-rib G4620@x))) (assertion-violation 'environment-symbols '"not an environment" G4620@x))))) (set! G3015@environment (lambda G4622@imp* ((lambda (G4624@itc) ((lambda (G4628@G4626 G4629@G4627) ((lambda (G462c@swap) (dynamic-wind G462c@swap (lambda () (call-with-values (lambda () (G2fb9@parse-import-spec* G4622@imp*)) (lambda (G4630@G462e G4631@G462f) ((lambda (G4634@subst-labels G4635@subst-names) (G2fde@make-env G4635@subst-names G4634@subst-labels G4624@itc)) G4631@G462f G4630@G462e)))) G462c@swap)) (lambda () ((lambda (G4638@t) (begin (G4628@G4626 G4629@G4627) (set! G4629@G4627 G4638@t))) (G4628@G4626))))) G2fc3@imp-collector G4624@itc)) (G2fbd@make-collector)))) (set! G3017@null-environment (lambda (G463a@n) (begin (if (not (eqv? G463a@n '5)) (assertion-violation 'null-environment '"not 5" G463a@n) (void)) (G3015@environment '(psyntax null-environment-5))))) (set! G3019@scheme-report-environment (lambda (G463c@n) (begin (if (not (eqv? G463c@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G463c@n) (void)) (G3015@environment '(psyntax scheme-report-environment-5))))) (set! G301b@expand (lambda (G463e@x G463f@env) (if (G2fdc@env? G463f@env) ((lambda (G4642@rib) ((lambda (G4644@x G4645@itc G4646@rtc G4647@vtc) ((lambda (G464c@x) (begin (G2d0a@seal-rib! G4642@rib) (values G464c@x (G4646@rtc)))) ((lambda (G4656@G464e G4657@G464f G4658@G4650 G4659@G4651 G465a@G4652 G465b@G4653 G465c@G4654 G465d@G4655) ((lambda (G4666@swap) (dynamic-wind G4666@swap (lambda () (G2f76@chi-expr G4644@x '() '())) G4666@swap)) (lambda () (begin ((lambda (G4668@t) (begin (G4656@G464e G465a@G4652) (set! G465a@G4652 G4668@t))) (G4656@G464e)) ((lambda (G466a@t) (begin (G4657@G464f G465b@G4653) (set! G465b@G4653 G466a@t))) (G4657@G464f)) ((lambda (G466c@t) (begin (G4658@G4650 G465c@G4654) (set! G465c@G4654 G466c@t))) (G4658@G4650)) ((lambda (G466e@t) (begin (G4659@G4651 G465d@G4655) (set! G465d@G4655 G466e@t))) (G4659@G4651)))))) G304b@top-level-context G2fbf@inv-collector G2fc1@vis-collector G2fc3@imp-collector '#f G4646@rtc G4647@vtc G4645@itc))) (G2d1d@make-stx G463e@x G2ccb@top-mark* (list G4642@rib) '()) (G2fe4@env-itc G463f@env) (G2fbd@make-collector) (G2fbd@make-collector))) (G2fbb@make-top-rib (G2fe0@env-names G463f@env) (G2fe2@env-labels G463f@env))) (if (G2ff9@interaction-env? G463f@env) ((lambda (G4670@rib G4671@r G4672@rtc) ((lambda (G4676@x) (call-with-values (lambda () ((lambda (G4682@G467a G4683@G467b G4684@G467c G4685@G467d G4686@G467e G4687@G467f G4688@G4680 G4689@G4681) ((lambda (G4692@swap) (dynamic-wind G4692@swap (lambda () (G2fc7@chi-interaction-expr G4676@x G4670@rib G4671@r)) G4692@swap)) (lambda () (begin ((lambda (G4694@t) (begin (G4682@G467a G4686@G467e) (set! G4686@G467e G4694@t))) (G4682@G467a)) ((lambda (G4696@t) (begin (G4683@G467b G4687@G467f) (set! G4687@G467f G4696@t))) (G4683@G467b)) ((lambda (G4698@t) (begin (G4684@G467c G4688@G4680) (set! G4688@G4680 G4698@t))) (G4684@G467c)) ((lambda (G469a@t) (begin (G4685@G467d G4689@G4681) (set! G4689@G4681 G469a@t))) (G4685@G467d)))))) G304b@top-level-context G2fbf@inv-collector G2fc1@vis-collector G2fc3@imp-collector G463f@env G4672@rtc (G2fbd@make-collector) (G2fbd@make-collector))) (lambda (G469c@G4678 G469d@G4679) ((lambda (G46a0@r^ G46a1@e) (begin (G3005@set-interaction-env-r! G463f@env G46a0@r^) (values G46a1@e (G4672@rtc)))) G469d@G4679 G469c@G4678)))) (G2d1d@make-stx G463e@x G2ccb@top-mark* (list G4670@rib) '()))) (G2ffd@interaction-env-rib G463f@env) (G2fff@interaction-env-r G463f@env) (G2fbd@make-collector)) (assertion-violation 'expand '"not an environment" G463f@env))))) (set! G301d@eval (lambda (G46a4@x G46a5@env) (begin (if (not (G3011@environment? G46a5@env)) (error 'eval '"not an environment" G46a5@env) (void)) (call-with-values (lambda () (G301b@expand G46a4@x G46a5@env)) (lambda (G46aa@G46a8 G46ab@G46a9) ((lambda (G46ae@invoke-req* G46af@x) (begin (for-each G2b6a@G2a11@invoke-library G46ae@invoke-req*) (eval-core (G2943@G28fb@expanded->core G46af@x)))) G46ab@G46a9 G46aa@G46a8)))))) (set! G301f@library-expander (lambda G4717 ((lambda (G4718) (if (= G4718 '3) (apply (lambda (G46b2@x G46b3@filename G46b4@verify-name) ((lambda (G46b9@build-visit-code G46bb@visit!) (begin (set! G46b9@build-visit-code (lambda (G4705@macro*) (if (null? G4705@macro*) (G2cb1@G2c23@build-void) (G2cb0@G2c21@build-sequence '#f (map (lambda (G4707@x) ((lambda (G4709@loc G470a@src) (list 'set! G4709@loc G470a@src)) (car G4707@x) (cddr G4707@x))) G4705@macro*))))) (set! G46bb@visit! (lambda (G46fd@macro*) (for-each (lambda (G46ff@x) ((lambda (G4701@loc G4702@proc) (set-symbol-value! G4701@loc G4702@proc)) (car G46ff@x) (cadr G46ff@x))) G46fd@macro*))) (call-with-values (lambda () (G2fcb@core-library-expander G46b2@x G46b4@verify-name)) (lambda (G46c5@G46bc G46c6@G46bd G46c7@G46be G46c8@G46bf G46c9@G46c0 G46ca@G46c1 G46cb@G46c2 G46cc@G46c3 G46cd@G46c4) ((lambda (G46d7@export-env G46d8@export-subst G46d9@macro* G46da@invoke-code G46db@vis* G46dc@inv* G46dd@imp* G46de@ver G46df@name) ((lambda (G46e9@id G46ea@name G46eb@ver G46ec@imp* G46ed@vis* G46ee@inv* G46ef@visit-proc G46f0@invoke-proc G46f1@visit-code G46f2@invoke-code) (begin (G2b68@G2a0d@install-library G46e9@id G46ea@name G46eb@ver G46ec@imp* G46ed@vis* G46ee@inv* G46d8@export-subst G46d7@export-env G46ef@visit-proc G46f0@invoke-proc G46f1@visit-code G46f2@invoke-code '#t G46b3@filename) (values G46e9@id G46ea@name G46eb@ver G46ec@imp* G46ed@vis* G46ee@inv* G46f2@invoke-code G46f1@visit-code G46d8@export-subst G46d7@export-env))) (gensym) G46df@name G46de@ver (map G2b6e@G2a19@library-spec G46dd@imp*) (map G2b6e@G2a19@library-spec G46db@vis*) (map G2b6e@G2a19@library-spec G46dc@inv*) (lambda () (G46bb@visit! G46d9@macro*)) (lambda () (eval-core (G2943@G28fb@expanded->core G46da@invoke-code))) (G46b9@build-visit-code G46d9@macro*) G46da@invoke-code)) G46cd@G46c4 G46cc@G46c3 G46cb@G46c2 G46ca@G46c1 G46c9@G46c0 G46c8@G46bf G46c7@G46be G46c6@G46bd G46c5@G46bc))))) '#f '#f)) G4717) (if (= G4718 '2) (apply (lambda (G470d@x G470e@filename) (G301f@library-expander G470d@x G470e@filename (lambda (G4711@x) (values)))) G4717) (if (= G4718 '1) (apply (lambda (G4713@x) (G301f@library-expander G4713@x '#f (lambda (G4715@x) (values)))) G4717) (error 'apply '"invalid arg count"))))) (length G4717)))) (set! G3021@boot-library-expand (lambda (G4719@x) (call-with-values (lambda () (G301f@library-expander G4719@x)) (lambda (G4725@G471b G4726@G471c G4727@G471d G4728@G471e G4729@G471f G472a@G4720 G472b@G4721 G472c@G4722 G472d@G4723 G472e@G4724) ((lambda (G4739@export-env G473a@export-subst G473b@visit-code G473c@invoke-code G473d@inv* G473e@vis* G473f@imp* G4740@ver G4741@name G4742@id) (values G4741@name G473c@invoke-code G473a@export-subst G4739@export-env)) G472e@G4724 G472d@G4723 G472c@G4722 G472b@G4721 G472a@G4720 G4729@G471f G4728@G471e G4727@G471d G4726@G471c G4725@G471b))))) (set! G3023@rev-map-append (lambda (G474d@f G474e@ls G474f@ac) (if (null? G474e@ls) G474f@ac (G3023@rev-map-append G474d@f (cdr G474e@ls) (cons (G474d@f (car G474e@ls)) G474f@ac))))) (set! G3025@build-exports (lambda (G4753@lex*+loc* G4754@init*) (G2cb0@G2c21@build-sequence '#f (cons (G2cb1@G2c23@build-void) (G3023@rev-map-append (lambda (G4757@x) (list 'set! (cdr G4757@x) (car G4757@x))) G4753@lex*+loc* G4754@init*))))) (set! G3027@make-export-subst (lambda (G4759@name* G475a@id*) (map (lambda (G475d@name G475e@id) ((lambda (G4761@label) (begin (if (not G4761@label) (G303d@syntax-violation '#f '"cannot export unbound identifier" G475e@id) (void)) (cons G475d@name G4761@label))) (G2d6d@id->label G475e@id))) G4759@name* G475a@id*))) (set! G3029@make-export-env/macros (lambda (G4763@lex* G4764@loc* G4765@r) ((lambda (G476a@lookup) (begin (set! G476a@lookup (lambda (G4787@x) ((letrec ((G4789@f (lambda (G478b@x G478c@lex* G478d@loc*) (if (pair? G478c@lex*) (if (eq? G478b@x (car G478c@lex*)) (car G478d@loc*) (G4789@f G478b@x (cdr G478c@lex*) (cdr G478d@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4789@f) G4787@x G4763@lex* G4764@loc*))) ((letrec ((G476b@f (lambda (G476d@r G476e@env G476f@global* G4770@macro*) (if (null? G476d@r) (values G476e@env G476f@global* G4770@macro*) ((lambda (G4775@x) ((lambda (G4777@label G4778@b) ((lambda (G477b@t) (if (memv G477b@t '(lexical)) ((lambda (G477d@v) ((lambda (G477f@loc G4780@type) (G476b@f (cdr G476d@r) (cons (cons* G4777@label G4780@type G477f@loc) G476e@env) (cons (cons (G2ede@lexical-var G477d@v) G477f@loc) G476f@global*) G4770@macro*)) (G476a@lookup (G2ede@lexical-var G477d@v)) (if (G2ee0@lexical-mutable? G477d@v) 'mutable 'global))) (G2d77@binding-value G4778@b)) (if (memv G477b@t '(local-macro)) ((lambda (G4783@loc) (G476b@f (cdr G476d@r) (cons (cons* G4777@label 'global-macro G4783@loc) G476e@env) G476f@global* (cons (cons G4783@loc (G2d77@binding-value G4778@b)) G4770@macro*))) (gensym)) (if (memv G477b@t '(local-macro!)) ((lambda (G4785@loc) (G476b@f (cdr G476d@r) (cons (cons* G4777@label 'global-macro! G4785@loc) G476e@env) G476f@global* (cons (cons G4785@loc (G2d77@binding-value G4778@b)) G4770@macro*))) (gensym)) (if (memv G477b@t '($rtd $module)) (G476b@f (cdr G476d@r) (cons G4775@x G476e@env) G476f@global* G4770@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d75@binding-type G4778@b) (G2d77@binding-value G4778@b))))))) (G2d75@binding-type G4778@b))) (car G4775@x) (cdr G4775@x))) (car G476d@r)))))) G476b@f) G4765@r '() '() '()))) '#f))) (set! G302b@generate-temporaries (lambda (G4791@ls) ((lambda (G4793@t) ((lambda (G4795@ls/false) (if G4795@ls/false (apply (lambda (G4797@ls) (map (lambda (G4799@x) (G2d1d@make-stx ((lambda (G479b@x) (if (or (symbol? G479b@x) (string? G479b@x)) (gensym G479b@x) (gensym 't))) (G3043@syntax->datum G4799@x)) G2ccb@top-mark* '() '())) G4797@ls)) G4795@ls/false) ((lambda (G479d@t) ((lambda (G479f@ls/false) (if G479f@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G479f@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G479d@t))) (G2f52@syntax-dispatch G479d@t '_))) G4793@t))) (G2f52@syntax-dispatch G4793@t 'each-any))) G4791@ls))) (set! G302d@free-identifier=? (lambda (G47a1@x G47a2@y) (if (G2d53@id? G47a1@x) (if (G2d53@id? G47a2@y) (G2d5b@free-id=? G47a1@x G47a2@y) (assertion-violation 'free-identifier=? '"not an identifier" G47a2@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47a1@x)))) (set! G302f@bound-identifier=? (lambda (G47a5@x G47a6@y) (if (G2d53@id? G47a5@x) (if (G2d53@id? G47a6@y) (G2d59@bound-id=? G47a5@x G47a6@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47a6@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47a5@x)))) (set! G3031@make-source-condition (lambda (G47a9@x) ((lambda (G47b3@G47ae G47b5@G47b0 G47b7@G47af G47ba@G47ad G47bc@make-source-condition G47be@G47ab G47c0@G47ac G47c2@source-condition? G47c4@source-filename G47c6@source-character) (begin (set! G47b3@G47ae (make-record-type-descriptor '&source-information G4c05@G4956@&condition-rtd 'G47b1 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47b5@G47b0 '#f) (set! G47b7@G47af (make-record-constructor-descriptor G47b3@G47ae G4c06@G4958@&condition-rcd G47b5@G47b0)) (set! G47ba@G47ad (record-predicate G47b3@G47ae)) (set! G47bc@make-source-condition (record-constructor G47b7@G47af)) (set! G47be@G47ab (record-accessor G47b3@G47ae '0)) (set! G47c0@G47ac (record-accessor G47b3@G47ae '1)) (set! G47c2@source-condition? (condition-predicate G47b3@G47ae)) (set! G47c4@source-filename (condition-accessor G47b3@G47ae G47be@G47ab)) (set! G47c6@source-character (condition-accessor G47b3@G47ae G47c0@G47ac)) (if (pair? G47a9@x) (G47bc@make-source-condition (car G47a9@x) (cdr G47a9@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3033@extract-position-condition (lambda (G47c7@x) (G3031@make-source-condition (G3035@expression-position G47c7@x)))) (set! G3035@expression-position (lambda (G47c9@x) (and (G2d1b@stx? G47c9@x) ((lambda (G47cb@x) (and (G28e4@G280f@annotation? G47cb@x) (G28e5@G2811@annotation-source G47cb@x))) (G2d1f@stx-expr G47c9@x))))) (set! G3037@assertion-error (lambda (G47cd@expr G47ce@pos) (raise (condition (G4c35@G4a18@make-assertion-violation) (G4c47@G4a48@make-who-condition 'assert) (G4c0b@G49ab@make-message-condition '"assertion failed") (G4c3d@G4a2e@make-irritants-condition (list G47cd@expr)) (G3031@make-source-condition G47ce@pos))))) (set! G3039@syntax-error (lambda (G47d1@x . G47d3@args) (begin (if (not (for-all string? G47d3@args)) (assertion-violation 'syntax-error '"invalid argument" G47d3@args) (void)) (raise (condition (G4c0b@G49ab@make-message-condition (if (null? G47d3@args) '"invalid syntax" (apply string-append G47d3@args))) (G4c69@G4aa2@make-syntax-violation (G3043@syntax->datum G47d1@x) '#f) (G3033@extract-position-condition G47d1@x)))))) (set! G303b@syntax-violation* (lambda (G47d5@who G47d6@msg G47d7@form G47d8@condition-object) (begin (if (not (string? G47d6@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47d6@msg) (void)) ((lambda (G47dd@who) (raise (condition (if G47dd@who (G4c47@G4a48@make-who-condition G47dd@who) (condition)) (G4c0b@G49ab@make-message-condition G47d6@msg) G47d8@condition-object (G3033@extract-position-condition G47d7@form)))) (if (or (string? G47d5@who) (symbol? G47d5@who)) G47d5@who (if (not G47d5@who) ((lambda (G47df@t) ((lambda (G47e1@ls/false) (if (and G47e1@ls/false (apply (lambda (G47e3@id) (G2d53@id? G47e3@id)) G47e1@ls/false)) (apply (lambda (G47e5@id) (G3043@syntax->datum G47e5@id)) G47e1@ls/false) ((lambda (G47e7@t) ((lambda (G47e9@ls/false) (if (and G47e9@ls/false (apply (lambda (G47eb@id G47ec@rest) (G2d53@id? G47eb@id)) G47e9@ls/false)) (apply (lambda (G47ef@id G47f0@rest) (G3043@syntax->datum G47ef@id)) G47e9@ls/false) ((lambda (G47f3@t) ((lambda (G47f5@ls/false) (if G47f5@ls/false (apply (lambda () '#f) G47f5@ls/false) (G303d@syntax-violation '#f '"invalid syntax" G47f3@t))) (G2f52@syntax-dispatch G47f3@t '_))) G47e7@t))) (G2f52@syntax-dispatch G47e7@t '(any . any)))) G47df@t))) (G2f52@syntax-dispatch G47df@t 'any))) G47d7@form) (assertion-violation 'syntax-violation '"invalid who argument" G47d5@who))))))) (set! G303d@syntax-violation (lambda G4805 ((lambda (G4806) (if (= G4806 '3) (apply (lambda (G47f7@who G47f8@msg G47f9@form) (G303d@syntax-violation G47f7@who G47f8@msg G47f9@form '#f)) G4805) (if (= G4806 '4) (apply (lambda (G47fd@who G47fe@msg G47ff@form G4800@subform) (G303b@syntax-violation* G47fd@who G47fe@msg G47ff@form (G4c69@G4aa2@make-syntax-violation (G3043@syntax->datum G47ff@form) (G3043@syntax->datum G4800@subform)))) G4805) (error 'apply '"invalid arg count")))) (length G4805)))) (set! G303f@identifier? (lambda (G4807@x) (G2d53@id? G4807@x))) (set! G3041@datum->syntax (lambda (G4809@id G480a@datum) (if (G2d53@id? G4809@id) (G2d31@datum->stx G4809@id G480a@datum) (assertion-violation 'datum->syntax '"not an identifier" G4809@id)))) (set! G3043@syntax->datum (lambda (G480d@x) (G2d69@stx->datum G480d@x))) (set! G3045@compile-r6rs-top-level (lambda (G480f@x*) (call-with-values (lambda () (G2fcf@top-level-expander G480f@x*)) (lambda (G4813@G4811 G4814@G4812) ((lambda (G4817@invoke-code G4818@lib*) (lambda () (begin (for-each G2b6a@G2a11@invoke-library G4818@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2943@G28fb@expanded->core G4817@invoke-code)) (void)) (eval-core (G2943@G28fb@expanded->core G4817@invoke-code))))) G4814@G4812 G4813@G4811))))) (set! G3047@pre-compile-r6rs-top-level (lambda (G481b@x*) (call-with-values (lambda () (G2fcf@top-level-expander G481b@x*)) (lambda (G481f@G481d G4820@G481e) ((lambda (G4823@invoke-code G4824@lib*) (begin (for-each G2b6a@G2a11@invoke-library G4824@lib*) (G28ed@G2821@compile-core (G2943@G28fb@expanded->core G4823@invoke-code)))) G4820@G481e G481f@G481d))))) (set! G3049@interaction-environment ((lambda (G4827@the-env) (lambda () (or G4827@the-env ((lambda (G4829@lib G482a@rib) (begin ((lambda (G482d@subst) (begin (G2cf4@set-rib-sym*! G482a@rib (map car G482d@subst)) (G2cf6@set-rib-mark**! G482a@rib (map (lambda (G482f@x) G2ccb@top-mark*) G482d@subst)) (G2cf8@set-rib-label*! G482a@rib (map cdr G482d@subst)))) (G2b3f@G29bb@library-subst G4829@lib)) ((lambda (G4831@env) (begin (set! G4827@the-env G4831@env) G4831@env)) (G2ffb@make-interaction-env G482a@rib '() '())))) (G2b63@G2a03@find-library-by-name '(mosh interaction)) (G2d00@make-cache-rib))))) '#f)) (set! G304b@top-level-context (G28ef@G2825@make-parameter '#f)) (begin (set! G4941@G304b@top-level-context G304b@top-level-context) (set! G4940@G3049@interaction-environment G3049@interaction-environment) (set! G493f@G3047@pre-compile-r6rs-top-level G3047@pre-compile-r6rs-top-level) (set! G493e@G3045@compile-r6rs-top-level G3045@compile-r6rs-top-level) (set! G493d@G3043@syntax->datum G3043@syntax->datum) (set! G493c@G3041@datum->syntax G3041@datum->syntax) (set! G493b@G303f@identifier? G303f@identifier?) (set! G493a@G303d@syntax-violation G303d@syntax-violation) (set! G4939@G303b@syntax-violation* G303b@syntax-violation*) (set! G4938@G3039@syntax-error G3039@syntax-error) (set! G4937@G3037@assertion-error G3037@assertion-error) (set! G4936@G3035@expression-position G3035@expression-position) (set! G4935@G3033@extract-position-condition G3033@extract-position-condition) (set! G4934@G3031@make-source-condition G3031@make-source-condition) (set! G4933@G302f@bound-identifier=? G302f@bound-identifier=?) (set! G4932@G302d@free-identifier=? G302d@free-identifier=?) (set! G4931@G302b@generate-temporaries G302b@generate-temporaries) (set! G4930@G3029@make-export-env/macros G3029@make-export-env/macros) (set! G492f@G3027@make-export-subst G3027@make-export-subst) (set! G492e@G3025@build-exports G3025@build-exports) (set! G492d@G3023@rev-map-append G3023@rev-map-append) (set! G492c@G3021@boot-library-expand G3021@boot-library-expand) (set! G492b@G301f@library-expander G301f@library-expander) (set! G492a@G301d@eval G301d@eval) (set! G4929@G301b@expand G301b@expand) (set! G4928@G3019@scheme-report-environment G3019@scheme-report-environment) (set! G4927@G3017@null-environment G3017@null-environment) (set! G4926@G3015@environment G3015@environment) (set! G4925@G3013@environment-symbols G3013@environment-symbols) (set! G4924@G3011@environment? G3011@environment?) (set! G4923@G300f@parse-binding G300f@parse-binding) (set! G4922@G300d@environment-bindings G300d@environment-bindings) (set! G4921@G300b@interaction-environment-symbols G300b@interaction-environment-symbols) (set! G4920@G3009@rp G3009@rp) (set! G491f@G3007@set-interaction-env-locs! G3007@set-interaction-env-locs!) (set! G491e@G3005@set-interaction-env-r! G3005@set-interaction-env-r!) (set! G491d@G3003@set-interaction-env-rib! G3003@set-interaction-env-rib!) (set! G491c@G3001@interaction-env-locs G3001@interaction-env-locs) (set! G491b@G2fff@interaction-env-r G2fff@interaction-env-r) (set! G491a@G2ffd@interaction-env-rib G2ffd@interaction-env-rib) (set! G4919@G2ffb@make-interaction-env G2ffb@make-interaction-env) (set! G4918@G2ff9@interaction-env? G2ff9@interaction-env?) (set! G4917@G2ff6@G2fee G2ff6@G2fee) (set! G4916@G2ff4@G2fef G2ff4@G2fef) (set! G4915@G2ff2@G2fed G2ff2@G2fed) (set! G4914@G2fec@rp G2fec@rp) (set! G4913@G2fea@set-env-itc! G2fea@set-env-itc!) (set! G4912@G2fe8@set-env-labels! G2fe8@set-env-labels!) (set! G4911@G2fe6@set-env-names! G2fe6@set-env-names!) (set! G4910@G2fe4@env-itc G2fe4@env-itc) (set! G490f@G2fe2@env-labels G2fe2@env-labels) (set! G490e@G2fe0@env-names G2fe0@env-names) (set! G490d@G2fde@make-env G2fde@make-env) (set! G490c@G2fdc@env? G2fdc@env?) (set! G490b@G2fd9@G2fd1 G2fd9@G2fd1) (set! G490a@G2fd7@G2fd2 G2fd7@G2fd2) (set! G4909@G2fd5@G2fd0 G2fd5@G2fd0) (set! G4908@G2fcf@top-level-expander G2fcf@top-level-expander) (set! G4907@G2fcd@parse-top-level-program G2fcd@parse-top-level-program) (set! G4906@G2fcb@core-library-expander G2fcb@core-library-expander) (set! G4905@G2fc9@library-body-expander G2fc9@library-body-expander) (set! G4904@G2fc7@chi-interaction-expr G2fc7@chi-interaction-expr) (set! G4903@G2fc5@chi-library-internal G2fc5@chi-library-internal) (set! G4902@G2fc3@imp-collector G2fc3@imp-collector) (set! G4901@G2fc1@vis-collector G2fc1@vis-collector) (set! G4900@G2fbf@inv-collector G2fbf@inv-collector) (set! G48ff@G2fbd@make-collector G2fbd@make-collector) (set! G48fe@G2fbb@make-top-rib G2fbb@make-top-rib) (set! G48fd@G2fb9@parse-import-spec* G2fb9@parse-import-spec*) (set! G48fc@G2fb7@parse-library G2fb7@parse-library) (set! G48fb@G2fb5@parse-library-name G2fb5@parse-library-name) (set! G48fa@G2fb3@parse-exports G2fb3@parse-exports) (set! G48f9@G2fb1@expand-transformer G2fb1@expand-transformer) (set! G48f8@G2faf@chi-body* G2faf@chi-body*) (set! G48f7@G2fad@chi-internal-module G2fad@chi-internal-module) (set! G48f6@G2fab@module-interface-exp-id* G2fab@module-interface-exp-id*) (set! G48f5@G2fa9@set-module-interface-exp-lab-vec! G2fa9@set-module-interface-exp-lab-vec!) (set! G48f4@G2fa7@set-module-interface-exp-id-vec! G2fa7@set-module-interface-exp-id-vec!) (set! G48f3@G2fa5@set-module-interface-first-mark! G2fa5@set-module-interface-first-mark!) (set! G48f2@G2fa3@module-interface-exp-lab-vec G2fa3@module-interface-exp-lab-vec) (set! G48f1@G2fa1@module-interface-exp-id-vec G2fa1@module-interface-exp-id-vec) (set! G48f0@G2f9f@module-interface-first-mark G2f9f@module-interface-first-mark) (set! G48ef@G2f9d@make-module-interface G2f9d@make-module-interface) (set! G48ee@G2f9b@module-interface? G2f9b@module-interface?) (set! G48ed@G2f98@G2f90 G2f98@G2f90) (set! G48ec@G2f96@G2f91 G2f96@G2f91) (set! G48eb@G2f94@G2f8f G2f94@G2f8f) (set! G48ea@G2f8e@parse-module G2f8e@parse-module) (set! G48e9@G2f8c@chi-internal G2f8c@chi-internal) (set! G48e8@G2f8a@find-dups G2f8a@find-dups) (set! G48e7@G2f88@find-bound=? G2f88@find-bound=?) (set! G48e6@G2f86@chi-rhs* G2f86@chi-rhs*) (set! G48e5@G2f84@expand-interaction-rhs*/init* G2f84@expand-interaction-rhs*/init*) (set! G48e4@G2f82@chi-rhs G2f82@chi-rhs) (set! G48e3@G2f80@chi-defun G2f80@chi-defun) (set! G48e2@G2f7e@chi-lambda-clause* G2f7e@chi-lambda-clause*) (set! G48e1@G2f7c@chi-lambda-clause G2f7c@chi-lambda-clause) (set! G48e0@G2f7a@verify-formals G2f7a@verify-formals) (set! G48df@G2f78@chi-set! G2f78@chi-set!) (set! G48de@G2f76@chi-expr G2f76@chi-expr) (set! G48dd@G2f74@chi-application G2f74@chi-application) (set! G48dc@G2f72@chi-expr* G2f72@chi-expr*) (set! G48db@G2f70@chi-global-macro G2f70@chi-global-macro) (set! G48da@G2f6e@chi-local-macro G2f6e@chi-local-macro) (set! G48d9@G2f6c@chi-macro G2f6c@chi-macro) (set! G48d8@G2f6a@do-macro-call G2f6a@do-macro-call) (set! G48d7@G2f68@local-macro-transformer G2f68@local-macro-transformer) (set! G48d6@G2f66@macro-transformer G2f66@macro-transformer) (set! G48d5@G2f64@symbol-macro G2f64@symbol-macro) (set! G48d4@G2f62@file-options-macro G2f62@file-options-macro) (set! G48d3@G2f60@core-macro-transformer G2f60@core-macro-transformer) (set! G48d2@G2f5e@syntax-transformer G2f5e@syntax-transformer) (set! G48d1@G2f5c@ellipsis-map G2f5c@ellipsis-map) (set! G48d0@G2f5a@syntax-case-transformer G2f5a@syntax-case-transformer) (set! G48cf@G2f58@verify-literals G2f58@verify-literals) (set! G48ce@G2f56@underscore? G2f56@underscore?) (set! G48cd@G2f54@ellipsis? G2f54@ellipsis?) (set! G48cc@G2f52@syntax-dispatch G2f52@syntax-dispatch) (set! G48cb@G2f50@convert-pattern G2f50@convert-pattern) (set! G48ca@G2f4e@foreign-call-transformer G2f4e@foreign-call-transformer) (set! G48c9@G2f4c@parameterize-macro G2f4c@parameterize-macro) (set! G48c8@G2f4a@incorrect-usage-macro G2f4a@incorrect-usage-macro) (set! G48c7@G2f48@define-condition-type-macro G2f48@define-condition-type-macro) (set! G48c6@G2f46@define-record-type-macro G2f46@define-record-type-macro) (set! G48c5@G2f44@define-struct-macro G2f44@define-struct-macro) (set! G48c4@G2f42@quasisyntax-macro G2f42@quasisyntax-macro) (set! G48c3@G2f40@quasiquote-macro G2f40@quasiquote-macro) (set! G48c2@G2f3e@syntax-rules-macro G2f3e@syntax-rules-macro) (set! G48c1@G2f3c@include-into-macro G2f3c@include-into-macro) (set! G48c0@G2f3a@include-macro G2f3a@include-macro) (set! G48bf@G2f38@do-include G2f38@do-include) (set! G48be@G2f36@cond-macro G2f36@cond-macro) (set! G48bd@G2f34@and-macro G2f34@and-macro) (set! G48bc@G2f32@or-macro G2f32@or-macro) (set! G48bb@G2f30@let*-macro G2f30@let*-macro) (set! G48ba@G2f2e@do-macro G2f2e@do-macro) (set! G48b9@G2f2c@identifier-syntax-macro G2f2c@identifier-syntax-macro) (set! G48b8@G2f2a@endianness-macro G2f2a@endianness-macro) (set! G48b7@G2f28@assert-macro G2f28@assert-macro) (set! G48b6@G2f26@delay-macro G2f26@delay-macro) (set! G48b5@G2f24@time-macro G2f24@time-macro) (set! G48b4@G2f22@define-enumeration-macro G2f22@define-enumeration-macro) (set! G48b3@G2f20@guard-macro G2f20@guard-macro) (set! G48b2@G2f1e@trace-letrec-syntax-macro G2f1e@trace-letrec-syntax-macro) (set! G48b1@G2f1c@trace-let-syntax-macro G2f1c@trace-let-syntax-macro) (set! G48b0@G2f1a@trace-let/rec-syntax G2f1a@trace-let/rec-syntax) (set! G48af@G2f18@trace-define-syntax-macro G2f18@trace-define-syntax-macro) (set! G48ae@G2f16@trace-define-macro G2f16@trace-define-macro) (set! G48ad@G2f14@trace-lambda-macro G2f14@trace-lambda-macro) (set! G48ac@G2f12@let*-values-macro G2f12@let*-values-macro) (set! G48ab@G2f10@let-values-macro G2f10@let-values-macro) (set! G48aa@G2f0e@let-macro G2f0e@let-macro) (set! G48a9@G2f0c@invalid-fmls-error G2f0c@invalid-fmls-error) (set! G48a8@G2f0a@with-syntax-macro G2f0a@with-syntax-macro) (set! G48a7@G2f08@bless G2f08@bless) (set! G48a6@G2f06@lambda-transformer G2f06@lambda-transformer) (set! G48a5@G2f04@case-lambda-transformer G2f04@case-lambda-transformer) (set! G48a4@G2f02@quote-transformer G2f02@quote-transformer) (set! G48a3@G2f00@case-macro G2f00@case-macro) (set! G48a2@G2efe@or-transformer G2efe@or-transformer) (set! G48a1@G2efc@and-transformer G2efc@and-transformer) (set! G48a0@G2efa@if-transformer G2efa@if-transformer) (set! G489f@G2ef8@unless-macro G2ef8@unless-macro) (set! G489e@G2ef6@when-macro G2ef6@when-macro) (set! G489d@G2ef4@record-constructor-descriptor-transformer G2ef4@record-constructor-descriptor-transformer) (set! G489c@G2ef2@record-type-descriptor-transformer G2ef2@record-type-descriptor-transformer) (set! G489b@G2ef0@type-descriptor-transformer G2ef0@type-descriptor-transformer) (set! G489a@G2eee@fluid-let-syntax-transformer G2eee@fluid-let-syntax-transformer) (set! G4899@G2eec@letrec*-transformer G2eec@letrec*-transformer) (set! G4898@G2eea@letrec-transformer G2eea@letrec-transformer) (set! G4897@G2ee8@letrec-helper G2ee8@letrec-helper) (set! G4896@G2ee6@add-lexicals G2ee6@add-lexicals) (set! G4895@G2ee4@add-lexical G2ee4@add-lexical) (set! G4894@G2ee2@set-lexical-mutable! G2ee2@set-lexical-mutable!) (set! G4893@G2ee0@lexical-mutable? G2ee0@lexical-mutable?) (set! G4892@G2ede@lexical-var G2ede@lexical-var) (set! G4891@G2edc@scheme-stx G2edc@scheme-stx) (set! G4890@G2eda@scheme-stx-hashtable G2eda@scheme-stx-hashtable) (set! G488f@G2ed8@parse-define-syntax G2ed8@parse-define-syntax) (set! G488e@G2ed6@parse-define G2ed6@parse-define) (set! G488d@G2d93@make-eval-transformer G2d93@make-eval-transformer) (set! G488c@G2d91@variable-transformer-procedure G2d91@variable-transformer-procedure) (set! G488b@G2d8f@variable-transformer? G2d8f@variable-transformer?) (set! G488a@G2d8d@make-variable-transformer G2d8d@make-variable-transformer) (set! G4889@G2d8b@sanitize-binding G2d8b@sanitize-binding) (set! G4888@G2d7b@syntax-type G2d7b@syntax-type) (set! G4887@G2d79@raise-unbound-error G2d79@raise-unbound-error) (set! G4886@G2d77@binding-value G2d77@binding-value) (set! G4885@G2d75@binding-type G2d75@binding-type) (set! G4884@G2d73@make-binding G2d73@make-binding) (set! G4883@G2d71@label->binding G2d71@label->binding) (set! G4882@G2d6f@id->real-label G2d6f@id->real-label) (set! G4881@G2d6d@id->label G2d6d@id->label) (set! G4880@G2d6b@same-marks*? G2d6b@same-marks*?) (set! G487f@G2d69@stx->datum G2d69@stx->datum) (set! G487e@G2d67@strip G2d67@strip) (set! G487d@G2d65@strip-annotations G2d65@strip-annotations) (set! G487c@G2d63@self-evaluating? G2d63@self-evaluating?) (set! G487b@G2d61@bound-id-member? G2d61@bound-id-member?) (set! G487a@G2d5f@distinct-bound-ids? G2d5f@distinct-bound-ids?) (set! G4879@G2d5d@valid-bound-ids? G2d5d@valid-bound-ids?) (set! G4878@G2d5b@free-id=? G2d5b@free-id=?) (set! G4877@G2d59@bound-id=? G2d59@bound-id=?) (set! G4876@G2d57@same-marks? G2d57@same-marks?) (set! G4875@G2d55@id->sym G2d55@id->sym) (set! G4874@G2d53@id? G2d53@id?) (set! G4873@G2d51@syntax->list G2d51@syntax->list) (set! G4872@G2d4f@syntax-cdr G2d4f@syntax-cdr) (set! G4871@G2d4d@syntax-car G2d4d@syntax-car) (set! G4870@G2d4b@syntax-list? G2d4b@syntax-list?) (set! G486f@G2d49@syntax-null? G2d49@syntax-null?) (set! G486e@G2d47@syntax-vector? G2d47@syntax-vector?) (set! G486d@G2d45@syntax-pair? G2d45@syntax-pair?) (set! G486c@G2d43@syntax-vector->list G2d43@syntax-vector->list) (set! G486b@G2d41@syntax-kind? G2d41@syntax-kind?) (set! G486a@G2d3f@add-subst G2d3f@add-subst) (set! G4869@G2d3d@add-mark G2d3d@add-mark) (set! G4868@G2d3b@mkstx G2d3b@mkstx) (set! G4867@G2d39@join-wraps G2d39@join-wraps) (set! G4866@G2d37@anti-mark? G2d37@anti-mark?) (set! G4865@G2d35@anti-mark G2d35@anti-mark) (set! G4864@G2d33@gen-mark G2d33@gen-mark) (set! G4863@G2d31@datum->stx G2d31@datum->stx) (set! G4862@G2d2f@rp G2d2f@rp) (set! G4861@G2d2d@set-stx-ae*! G2d2d@set-stx-ae*!) (set! G4860@G2d2b@set-stx-subst*! G2d2b@set-stx-subst*!) (set! G485f@G2d29@set-stx-mark*! G2d29@set-stx-mark*!) (set! G485e@G2d27@set-stx-expr! G2d27@set-stx-expr!) (set! G485d@G2d25@stx-ae* G2d25@stx-ae*) (set! G485c@G2d23@stx-subst* G2d23@stx-subst*) (set! G485b@G2d21@stx-mark* G2d21@stx-mark*) (set! G485a@G2d1f@stx-expr G2d1f@stx-expr) (set! G4859@G2d1d@make-stx G2d1d@make-stx) (set! G4858@G2d1b@stx? G2d1b@stx?) (set! G4857@G2d18@G2d10 G2d18@G2d10) (set! G4856@G2d16@G2d11 G2d16@G2d11) (set! G4855@G2d14@G2d0f G2d14@G2d0f) (set! G4854@G2d0e@make-full-rib G2d0e@make-full-rib) (set! G4853@G2d0c@unseal-rib! G2d0c@unseal-rib!) (set! G4852@G2d0a@seal-rib! G2d0a@seal-rib!) (set! G4851@G2d08@make-rib-map G2d08@make-rib-map) (set! G4850@G2d06@extend-rib/nc! G2d06@extend-rib/nc!) (set! G484f@G2d04@extend-rib! G2d04@extend-rib!) (set! G484e@G2d02@find-label G2d02@find-label) (set! G484d@G2d00@make-cache-rib G2d00@make-cache-rib) (set! G484c@G2cfe@make-empty-rib G2cfe@make-empty-rib) (set! G484b@G2cfc@set-rib-cache! G2cfc@set-rib-cache!) (set! G484a@G2cfa@set-rib-sealed/freq! G2cfa@set-rib-sealed/freq!) (set! G4849@G2cf8@set-rib-label*! G2cf8@set-rib-label*!) (set! G4848@G2cf6@set-rib-mark**! G2cf6@set-rib-mark**!) (set! G4847@G2cf4@set-rib-sym*! G2cf4@set-rib-sym*!) (set! G4846@G2cf2@rib-cache G2cf2@rib-cache) (set! G4845@G2cf0@rib-sealed/freq G2cf0@rib-sealed/freq) (set! G4844@G2cee@rib-label* G2cee@rib-label*) (set! G4843@G2cec@rib-mark** G2cec@rib-mark**) (set! G4842@G2cea@rib-sym* G2cea@rib-sym*) (set! G4841@G2ce8@make-rib G2ce8@make-rib) (set! G4840@G2ce6@rib? G2ce6@rib?) (set! G483f@G2ce3@G2cdb G2ce3@G2cdb) (set! G483e@G2ce1@G2cdc G2ce1@G2cdc) (set! G483d@G2cdf@G2cda G2cdf@G2cda) (set! G483c@G2cd9@gen-define-label G2cd9@gen-define-label) (set! G483b@G2cd7@gen-define-label+loc G2cd7@gen-define-label+loc) (set! G483a@G2cd5@gen-top-level-label G2cd5@gen-top-level-label) (set! G4839@G2cd3@gen-label G2cd3@gen-label) (set! G4838@G2cd1@gen-global G2cd1@gen-global) (set! G4837@G2ccf@gen-lexical G2ccf@gen-lexical) (set! G4836@G2ccd@top-marked? G2ccd@top-marked?) (set! G4835@G2ccb@top-mark* G2ccb@top-mark*) (set! G4834@G2cc6@set-union G2cc6@set-union) (set! G4833@G2cc4@set-cons G2cc4@set-cons) (G2b60@G29fd@current-library-expander G301f@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G494b@G4946 G494d@G4948 G494f@G4947 G4952@&condition? G4954@make-&condition G4956@&condition-rtd G4958@&condition-rcd G49a2@G499d G49a4@G499f G49a6@G499e G49a9@p? G49ab@make-message-condition G49ad@G499c G49af@message-condition? G49b1@condition-message G49b3@&message-rtd G49b5@&message-rcd G49bb@G49b6 G49bd@G49b8 G49bf@G49b7 G49c2@p? G49c4@make-warning G49c6@warning? G49c8@&warning-rtd G49ca@&warning-rcd G49d0@G49cb G49d2@G49cd G49d4@G49cc G49d7@p? G49d9@make-serious-condition G49db@serious-condition? G49dd@&serious-rtd G49df@&serious-rcd G49e5@G49e0 G49e7@G49e2 G49e9@G49e1 G49ec@p? G49ee@make-error G49f0@error? G49f2@&error-rtd G49f4@&error-rcd G49fa@G49f5 G49fc@G49f7 G49fe@G49f6 G4a01@p? G4a03@make-violation G4a05@violation? G4a07@&violation-rtd G4a09@&violation-rcd G4a0f@G4a0a G4a11@G4a0c G4a13@G4a0b G4a16@p? G4a18@make-assertion-violation G4a1a@assertion-violation? G4a1c@&assertion-rtd G4a1e@&assertion-rcd G4a25@G4a20 G4a27@G4a22 G4a29@G4a21 G4a2c@p? G4a2e@make-irritants-condition G4a30@G4a1f G4a32@irritants-condition? G4a34@condition-irritants G4a36@&irritants-rtd G4a38@&irritants-rcd G4a3f@G4a3a G4a41@G4a3c G4a43@G4a3b G4a46@p? G4a48@make-who-condition G4a4a@G4a39 G4a4c@who-condition? G4a4e@condition-who G4a50@&who-rtd G4a52@&who-rcd G4a58@G4a53 G4a5a@G4a55 G4a5c@G4a54 G4a5f@p? G4a61@make-non-continuable-violation G4a63@non-continuable-violation? G4a65@&non-continuable-rtd G4a67@&non-continuable-rcd G4a6d@G4a68 G4a6f@G4a6a G4a71@G4a69 G4a74@p? G4a76@make-implementation-restriction-violation G4a78@implementation-restriction-violation? G4a7a@&implementation-restriction-rtd G4a7c@&implementation-restriction-rcd G4a82@G4a7d G4a84@G4a7f G4a86@G4a7e G4a89@p? G4a8b@make-lexical-violation G4a8d@lexical-violation? G4a8f@&lexical-rtd G4a91@&lexical-rcd G4a99@G4a94 G4a9b@G4a96 G4a9d@G4a95 G4aa0@p? G4aa2@make-syntax-violation G4aa4@G4a92 G4aa6@G4a93 G4aa8@syntax-violation? G4aaa@syntax-violation-form G4aac@syntax-violation-subform G4aae@&syntax-rtd G4ab0@&syntax-rcd G4ab6@G4ab1 G4ab8@G4ab3 G4aba@G4ab2 G4abd@p? G4abf@make-undefined-violation G4ac1@undefined-violation? G4ac3@&undefined-rtd G4ac5@&undefined-rcd G4acb@G4ac6 G4acd@G4ac8 G4acf@G4ac7 G4ad2@p? G4ad4@make-i/o-error G4ad6@i/o-error? G4ad8@&i/o-rtd G4ada@&i/o-rcd G4ae0@G4adb G4ae2@G4add G4ae4@G4adc G4ae7@p? G4ae9@make-i/o-read-error G4aeb@i/o-read-error? G4aed@&i/o-read-rtd G4aef@&i/o-read-rcd G4af5@G4af0 G4af7@G4af2 G4af9@G4af1 G4afc@p? G4afe@make-i/o-write-error G4b00@i/o-write-error? G4b02@&i/o-write-rtd G4b04@&i/o-write-rcd G4b0b@G4b06 G4b0d@G4b08 G4b0f@G4b07 G4b12@p? G4b14@make-i/o-invalid-position-error G4b16@G4b05 G4b18@i/o-invalid-position-error? G4b1a@i/o-error-position G4b1c@&i/o-invalid-position-rtd G4b1e@&i/o-invalid-position-rcd G4b25@G4b20 G4b27@G4b22 G4b29@G4b21 G4b2c@p? G4b2e@make-i/o-filename-error G4b30@G4b1f G4b32@i/o-filename-error? G4b34@i/o-error-filename G4b36@&i/o-filename-rtd G4b38@&i/o-filename-rcd G4b3e@G4b39 G4b40@G4b3b G4b42@G4b3a G4b45@p? G4b47@make-i/o-file-protection-error G4b49@i/o-file-protection-error? G4b4b@&i/o-file-protection-rtd G4b4d@&i/o-file-protection-rcd G4b53@G4b4e G4b55@G4b50 G4b57@G4b4f G4b5a@p? G4b5c@make-i/o-file-is-read-only-error G4b5e@i/o-file-is-read-only-error? G4b60@&i/o-file-is-read-only-rtd G4b62@&i/o-file-is-read-only-rcd G4b68@G4b63 G4b6a@G4b65 G4b6c@G4b64 G4b6f@p? G4b71@make-i/o-file-already-exists-error G4b73@i/o-file-already-exists-error? G4b75@&i/o-file-already-exists-rtd G4b77@&i/o-file-already-exists-rcd G4b7d@G4b78 G4b7f@G4b7a G4b81@G4b79 G4b84@p? G4b86@make-i/o-file-does-not-exist-error G4b88@i/o-file-does-not-exist-error? G4b8a@&i/o-file-does-not-exist-rtd G4b8c@&i/o-file-does-not-exist-rcd G4b93@G4b8e G4b95@G4b90 G4b97@G4b8f G4b9a@p? G4b9c@make-i/o-port-error G4b9e@G4b8d G4ba0@i/o-port-error? G4ba2@i/o-error-port G4ba4@&i/o-port-rtd G4ba6@&i/o-port-rcd G4bac@G4ba7 G4bae@G4ba9 G4bb0@G4ba8 G4bb3@p? G4bb5@make-i/o-decoding-error G4bb7@i/o-decoding-error? G4bb9@&i/o-decoding-rtd G4bbb@&i/o-decoding-rcd G4bc2@G4bbd G4bc4@G4bbf G4bc6@G4bbe G4bc9@p? G4bcb@make-i/o-encoding-error G4bcd@G4bbc G4bcf@i/o-encoding-error? G4bd1@i/o-encoding-error-char G4bd3@&i/o-encoding-rtd G4bd5@&i/o-encoding-rcd G4bdb@G4bd6 G4bdd@G4bd8 G4bdf@G4bd7 G4be2@p? G4be4@make-no-infinities-violation G4be6@no-infinities-violation? G4be8@&no-infinities-rtd G4bea@&no-infinities-rcd G4bf0@G4beb G4bf2@G4bed G4bf4@G4bec G4bf7@p? G4bf9@make-no-nans-violation G4bfb@no-nans-violation? G4bfd@&no-nans-rtd G4bff@&no-nans-rcd) (begin (set! G494b@G4946 (make-record-type-descriptor '&condition '#f 'G4949 '#f '#f '#())) (set! G494d@G4948 '#f) (set! G494f@G4947 (make-record-constructor-descriptor G494b@G4946 '#f G494d@G4948)) (set! G4952@&condition? (record-predicate G494b@G4946)) (set! G4954@make-&condition (record-constructor G494f@G4947)) (set! G4956@&condition-rtd G494b@G4946) (set! G4958@&condition-rcd G494f@G4947) (set! G49a2@G499d (make-record-type-descriptor '&message G494b@G4946 'G49a0 '#f '#f '#((immutable message)))) (set! G49a4@G499f '#f) (set! G49a6@G499e (make-record-constructor-descriptor G49a2@G499d G494f@G4947 G49a4@G499f)) (set! G49a9@p? (record-predicate G49a2@G499d)) (set! G49ab@make-message-condition (record-constructor G49a6@G499e)) (set! G49ad@G499c (record-accessor G49a2@G499d '0)) (set! G49af@message-condition? (condition-predicate G49a2@G499d)) (set! G49b1@condition-message (condition-accessor G49a2@G499d G49ad@G499c)) (set! G49b3@&message-rtd G49a2@G499d) (set! G49b5@&message-rcd G49a6@G499e) (set! G49bb@G49b6 (make-record-type-descriptor '&warning G494b@G4946 'G49b9 '#f '#f '#())) (set! G49bd@G49b8 '#f) (set! G49bf@G49b7 (make-record-constructor-descriptor G49bb@G49b6 G494f@G4947 G49bd@G49b8)) (set! G49c2@p? (record-predicate G49bb@G49b6)) (set! G49c4@make-warning (record-constructor G49bf@G49b7)) (set! G49c6@warning? (condition-predicate G49bb@G49b6)) (set! G49c8@&warning-rtd G49bb@G49b6) (set! G49ca@&warning-rcd G49bf@G49b7) (set! G49d0@G49cb (make-record-type-descriptor '&serious G494b@G4946 'G49ce '#f '#f '#())) (set! G49d2@G49cd '#f) (set! G49d4@G49cc (make-record-constructor-descriptor G49d0@G49cb G494f@G4947 G49d2@G49cd)) (set! G49d7@p? (record-predicate G49d0@G49cb)) (set! G49d9@make-serious-condition (record-constructor G49d4@G49cc)) (set! G49db@serious-condition? (condition-predicate G49d0@G49cb)) (set! G49dd@&serious-rtd G49d0@G49cb) (set! G49df@&serious-rcd G49d4@G49cc) (set! G49e5@G49e0 (make-record-type-descriptor '&error G49d0@G49cb 'G49e3 '#f '#f '#())) (set! G49e7@G49e2 '#f) (set! G49e9@G49e1 (make-record-constructor-descriptor G49e5@G49e0 G49d4@G49cc G49e7@G49e2)) (set! G49ec@p? (record-predicate G49e5@G49e0)) (set! G49ee@make-error (record-constructor G49e9@G49e1)) (set! G49f0@error? (condition-predicate G49e5@G49e0)) (set! G49f2@&error-rtd G49e5@G49e0) (set! G49f4@&error-rcd G49e9@G49e1) (set! G49fa@G49f5 (make-record-type-descriptor '&violation G49d0@G49cb 'G49f8 '#f '#f '#())) (set! G49fc@G49f7 '#f) (set! G49fe@G49f6 (make-record-constructor-descriptor G49fa@G49f5 G49d4@G49cc G49fc@G49f7)) (set! G4a01@p? (record-predicate G49fa@G49f5)) (set! G4a03@make-violation (record-constructor G49fe@G49f6)) (set! G4a05@violation? (condition-predicate G49fa@G49f5)) (set! G4a07@&violation-rtd G49fa@G49f5) (set! G4a09@&violation-rcd G49fe@G49f6) (set! G4a0f@G4a0a (make-record-type-descriptor '&assertion G49fa@G49f5 'G4a0d '#f '#f '#())) (set! G4a11@G4a0c '#f) (set! G4a13@G4a0b (make-record-constructor-descriptor G4a0f@G4a0a G49fe@G49f6 G4a11@G4a0c)) (set! G4a16@p? (record-predicate G4a0f@G4a0a)) (set! G4a18@make-assertion-violation (record-constructor G4a13@G4a0b)) (set! G4a1a@assertion-violation? (condition-predicate G4a0f@G4a0a)) (set! G4a1c@&assertion-rtd G4a0f@G4a0a) (set! G4a1e@&assertion-rcd G4a13@G4a0b) (set! G4a25@G4a20 (make-record-type-descriptor '&irritants G494b@G4946 'G4a23 '#f '#f '#((immutable irritants)))) (set! G4a27@G4a22 '#f) (set! G4a29@G4a21 (make-record-constructor-descriptor G4a25@G4a20 G494f@G4947 G4a27@G4a22)) (set! G4a2c@p? (record-predicate G4a25@G4a20)) (set! G4a2e@make-irritants-condition (record-constructor G4a29@G4a21)) (set! G4a30@G4a1f (record-accessor G4a25@G4a20 '0)) (set! G4a32@irritants-condition? (condition-predicate G4a25@G4a20)) (set! G4a34@condition-irritants (condition-accessor G4a25@G4a20 G4a30@G4a1f)) (set! G4a36@&irritants-rtd G4a25@G4a20) (set! G4a38@&irritants-rcd G4a29@G4a21) (set! G4a3f@G4a3a (make-record-type-descriptor '&who G494b@G4946 'G4a3d '#f '#f '#((immutable who)))) (set! G4a41@G4a3c '#f) (set! G4a43@G4a3b (make-record-constructor-descriptor G4a3f@G4a3a G494f@G4947 G4a41@G4a3c)) (set! G4a46@p? (record-predicate G4a3f@G4a3a)) (set! G4a48@make-who-condition (record-constructor G4a43@G4a3b)) (set! G4a4a@G4a39 (record-accessor G4a3f@G4a3a '0)) (set! G4a4c@who-condition? (condition-predicate G4a3f@G4a3a)) (set! G4a4e@condition-who (condition-accessor G4a3f@G4a3a G4a4a@G4a39)) (set! G4a50@&who-rtd G4a3f@G4a3a) (set! G4a52@&who-rcd G4a43@G4a3b) (set! G4a58@G4a53 (make-record-type-descriptor '&non-continuable G49fa@G49f5 'G4a56 '#f '#f '#())) (set! G4a5a@G4a55 '#f) (set! G4a5c@G4a54 (make-record-constructor-descriptor G4a58@G4a53 G49fe@G49f6 G4a5a@G4a55)) (set! G4a5f@p? (record-predicate G4a58@G4a53)) (set! G4a61@make-non-continuable-violation (record-constructor G4a5c@G4a54)) (set! G4a63@non-continuable-violation? (condition-predicate G4a58@G4a53)) (set! G4a65@&non-continuable-rtd G4a58@G4a53) (set! G4a67@&non-continuable-rcd G4a5c@G4a54) (set! G4a6d@G4a68 (make-record-type-descriptor '&implementation-restriction G49fa@G49f5 'G4a6b '#f '#f '#())) (set! G4a6f@G4a6a '#f) (set! G4a71@G4a69 (make-record-constructor-descriptor G4a6d@G4a68 G49fe@G49f6 G4a6f@G4a6a)) (set! G4a74@p? (record-predicate G4a6d@G4a68)) (set! G4a76@make-implementation-restriction-violation (record-constructor G4a71@G4a69)) (set! G4a78@implementation-restriction-violation? (condition-predicate G4a6d@G4a68)) (set! G4a7a@&implementation-restriction-rtd G4a6d@G4a68) (set! G4a7c@&implementation-restriction-rcd G4a71@G4a69) (set! G4a82@G4a7d (make-record-type-descriptor '&lexical G49fa@G49f5 'G4a80 '#f '#f '#())) (set! G4a84@G4a7f '#f) (set! G4a86@G4a7e (make-record-constructor-descriptor G4a82@G4a7d G49fe@G49f6 G4a84@G4a7f)) (set! G4a89@p? (record-predicate G4a82@G4a7d)) (set! G4a8b@make-lexical-violation (record-constructor G4a86@G4a7e)) (set! G4a8d@lexical-violation? (condition-predicate G4a82@G4a7d)) (set! G4a8f@&lexical-rtd G4a82@G4a7d) (set! G4a91@&lexical-rcd G4a86@G4a7e) (set! G4a99@G4a94 (make-record-type-descriptor '&syntax G49fa@G49f5 'G4a97 '#f '#f '#((immutable form) (immutable subform)))) (set! G4a9b@G4a96 '#f) (set! G4a9d@G4a95 (make-record-constructor-descriptor G4a99@G4a94 G49fe@G49f6 G4a9b@G4a96)) (set! G4aa0@p? (record-predicate G4a99@G4a94)) (set! G4aa2@make-syntax-violation (record-constructor G4a9d@G4a95)) (set! G4aa4@G4a92 (record-accessor G4a99@G4a94 '0)) (set! G4aa6@G4a93 (record-accessor G4a99@G4a94 '1)) (set! G4aa8@syntax-violation? (condition-predicate G4a99@G4a94)) (set! G4aaa@syntax-violation-form (condition-accessor G4a99@G4a94 G4aa4@G4a92)) (set! G4aac@syntax-violation-subform (condition-accessor G4a99@G4a94 G4aa6@G4a93)) (set! G4aae@&syntax-rtd G4a99@G4a94) (set! G4ab0@&syntax-rcd G4a9d@G4a95) (set! G4ab6@G4ab1 (make-record-type-descriptor '&undefined G49fa@G49f5 'G4ab4 '#f '#f '#())) (set! G4ab8@G4ab3 '#f) (set! G4aba@G4ab2 (make-record-constructor-descriptor G4ab6@G4ab1 G49fe@G49f6 G4ab8@G4ab3)) (set! G4abd@p? (record-predicate G4ab6@G4ab1)) (set! G4abf@make-undefined-violation (record-constructor G4aba@G4ab2)) (set! G4ac1@undefined-violation? (condition-predicate G4ab6@G4ab1)) (set! G4ac3@&undefined-rtd G4ab6@G4ab1) (set! G4ac5@&undefined-rcd G4aba@G4ab2) (set! G4acb@G4ac6 (make-record-type-descriptor '&i/o G49e5@G49e0 'G4ac9 '#f '#f '#())) (set! G4acd@G4ac8 '#f) (set! G4acf@G4ac7 (make-record-constructor-descriptor G4acb@G4ac6 G49e9@G49e1 G4acd@G4ac8)) (set! G4ad2@p? (record-predicate G4acb@G4ac6)) (set! G4ad4@make-i/o-error (record-constructor G4acf@G4ac7)) (set! G4ad6@i/o-error? (condition-predicate G4acb@G4ac6)) (set! G4ad8@&i/o-rtd G4acb@G4ac6) (set! G4ada@&i/o-rcd G4acf@G4ac7) (set! G4ae0@G4adb (make-record-type-descriptor '&i/o-read G4acb@G4ac6 'G4ade '#f '#f '#())) (set! G4ae2@G4add '#f) (set! G4ae4@G4adc (make-record-constructor-descriptor G4ae0@G4adb G4acf@G4ac7 G4ae2@G4add)) (set! G4ae7@p? (record-predicate G4ae0@G4adb)) (set! G4ae9@make-i/o-read-error (record-constructor G4ae4@G4adc)) (set! G4aeb@i/o-read-error? (condition-predicate G4ae0@G4adb)) (set! G4aed@&i/o-read-rtd G4ae0@G4adb) (set! G4aef@&i/o-read-rcd G4ae4@G4adc) (set! G4af5@G4af0 (make-record-type-descriptor '&i/o-write G4acb@G4ac6 'G4af3 '#f '#f '#())) (set! G4af7@G4af2 '#f) (set! G4af9@G4af1 (make-record-constructor-descriptor G4af5@G4af0 G4acf@G4ac7 G4af7@G4af2)) (set! G4afc@p? (record-predicate G4af5@G4af0)) (set! G4afe@make-i/o-write-error (record-constructor G4af9@G4af1)) (set! G4b00@i/o-write-error? (condition-predicate G4af5@G4af0)) (set! G4b02@&i/o-write-rtd G4af5@G4af0) (set! G4b04@&i/o-write-rcd G4af9@G4af1) (set! G4b0b@G4b06 (make-record-type-descriptor '&i/o-invalid-position G4acb@G4ac6 'G4b09 '#f '#f '#((immutable position)))) (set! G4b0d@G4b08 '#f) (set! G4b0f@G4b07 (make-record-constructor-descriptor G4b0b@G4b06 G4acf@G4ac7 G4b0d@G4b08)) (set! G4b12@p? (record-predicate G4b0b@G4b06)) (set! G4b14@make-i/o-invalid-position-error (record-constructor G4b0f@G4b07)) (set! G4b16@G4b05 (record-accessor G4b0b@G4b06 '0)) (set! G4b18@i/o-invalid-position-error? (condition-predicate G4b0b@G4b06)) (set! G4b1a@i/o-error-position (condition-accessor G4b0b@G4b06 G4b16@G4b05)) (set! G4b1c@&i/o-invalid-position-rtd G4b0b@G4b06) (set! G4b1e@&i/o-invalid-position-rcd G4b0f@G4b07) (set! G4b25@G4b20 (make-record-type-descriptor '&i/o-filename G4acb@G4ac6 'G4b23 '#f '#f '#((immutable filename)))) (set! G4b27@G4b22 '#f) (set! G4b29@G4b21 (make-record-constructor-descriptor G4b25@G4b20 G4acf@G4ac7 G4b27@G4b22)) (set! G4b2c@p? (record-predicate G4b25@G4b20)) (set! G4b2e@make-i/o-filename-error (record-constructor G4b29@G4b21)) (set! G4b30@G4b1f (record-accessor G4b25@G4b20 '0)) (set! G4b32@i/o-filename-error? (condition-predicate G4b25@G4b20)) (set! G4b34@i/o-error-filename (condition-accessor G4b25@G4b20 G4b30@G4b1f)) (set! G4b36@&i/o-filename-rtd G4b25@G4b20) (set! G4b38@&i/o-filename-rcd G4b29@G4b21) (set! G4b3e@G4b39 (make-record-type-descriptor '&i/o-file-protection G4b25@G4b20 'G4b3c '#f '#f '#())) (set! G4b40@G4b3b '#f) (set! G4b42@G4b3a (make-record-constructor-descriptor G4b3e@G4b39 G4b29@G4b21 G4b40@G4b3b)) (set! G4b45@p? (record-predicate G4b3e@G4b39)) (set! G4b47@make-i/o-file-protection-error (record-constructor G4b42@G4b3a)) (set! G4b49@i/o-file-protection-error? (condition-predicate G4b3e@G4b39)) (set! G4b4b@&i/o-file-protection-rtd G4b3e@G4b39) (set! G4b4d@&i/o-file-protection-rcd G4b42@G4b3a) (set! G4b53@G4b4e (make-record-type-descriptor '&i/o-file-is-read-only G4b3e@G4b39 'G4b51 '#f '#f '#())) (set! G4b55@G4b50 '#f) (set! G4b57@G4b4f (make-record-constructor-descriptor G4b53@G4b4e G4b42@G4b3a G4b55@G4b50)) (set! G4b5a@p? (record-predicate G4b53@G4b4e)) (set! G4b5c@make-i/o-file-is-read-only-error (record-constructor G4b57@G4b4f)) (set! G4b5e@i/o-file-is-read-only-error? (condition-predicate G4b53@G4b4e)) (set! G4b60@&i/o-file-is-read-only-rtd G4b53@G4b4e) (set! G4b62@&i/o-file-is-read-only-rcd G4b57@G4b4f) (set! G4b68@G4b63 (make-record-type-descriptor '&i/o-file-already-exists G4b25@G4b20 'G4b66 '#f '#f '#())) (set! G4b6a@G4b65 '#f) (set! G4b6c@G4b64 (make-record-constructor-descriptor G4b68@G4b63 G4b29@G4b21 G4b6a@G4b65)) (set! G4b6f@p? (record-predicate G4b68@G4b63)) (set! G4b71@make-i/o-file-already-exists-error (record-constructor G4b6c@G4b64)) (set! G4b73@i/o-file-already-exists-error? (condition-predicate G4b68@G4b63)) (set! G4b75@&i/o-file-already-exists-rtd G4b68@G4b63) (set! G4b77@&i/o-file-already-exists-rcd G4b6c@G4b64) (set! G4b7d@G4b78 (make-record-type-descriptor '&i/o-file-does-not-exist G4b25@G4b20 'G4b7b '#f '#f '#())) (set! G4b7f@G4b7a '#f) (set! G4b81@G4b79 (make-record-constructor-descriptor G4b7d@G4b78 G4b29@G4b21 G4b7f@G4b7a)) (set! G4b84@p? (record-predicate G4b7d@G4b78)) (set! G4b86@make-i/o-file-does-not-exist-error (record-constructor G4b81@G4b79)) (set! G4b88@i/o-file-does-not-exist-error? (condition-predicate G4b7d@G4b78)) (set! G4b8a@&i/o-file-does-not-exist-rtd G4b7d@G4b78) (set! G4b8c@&i/o-file-does-not-exist-rcd G4b81@G4b79) (set! G4b93@G4b8e (make-record-type-descriptor '&i/o-port G4acb@G4ac6 'G4b91 '#f '#f '#((immutable port)))) (set! G4b95@G4b90 '#f) (set! G4b97@G4b8f (make-record-constructor-descriptor G4b93@G4b8e G4acf@G4ac7 G4b95@G4b90)) (set! G4b9a@p? (record-predicate G4b93@G4b8e)) (set! G4b9c@make-i/o-port-error (record-constructor G4b97@G4b8f)) (set! G4b9e@G4b8d (record-accessor G4b93@G4b8e '0)) (set! G4ba0@i/o-port-error? (condition-predicate G4b93@G4b8e)) (set! G4ba2@i/o-error-port (condition-accessor G4b93@G4b8e G4b9e@G4b8d)) (set! G4ba4@&i/o-port-rtd G4b93@G4b8e) (set! G4ba6@&i/o-port-rcd G4b97@G4b8f) (set! G4bac@G4ba7 (make-record-type-descriptor '&i/o-decoding G4b93@G4b8e 'G4baa '#f '#f '#())) (set! G4bae@G4ba9 '#f) (set! G4bb0@G4ba8 (make-record-constructor-descriptor G4bac@G4ba7 G4b97@G4b8f G4bae@G4ba9)) (set! G4bb3@p? (record-predicate G4bac@G4ba7)) (set! G4bb5@make-i/o-decoding-error (record-constructor G4bb0@G4ba8)) (set! G4bb7@i/o-decoding-error? (condition-predicate G4bac@G4ba7)) (set! G4bb9@&i/o-decoding-rtd G4bac@G4ba7) (set! G4bbb@&i/o-decoding-rcd G4bb0@G4ba8) (set! G4bc2@G4bbd (make-record-type-descriptor '&i/o-encoding G4b93@G4b8e 'G4bc0 '#f '#f '#((immutable char)))) (set! G4bc4@G4bbf '#f) (set! G4bc6@G4bbe (make-record-constructor-descriptor G4bc2@G4bbd G4b97@G4b8f G4bc4@G4bbf)) (set! G4bc9@p? (record-predicate G4bc2@G4bbd)) (set! G4bcb@make-i/o-encoding-error (record-constructor G4bc6@G4bbe)) (set! G4bcd@G4bbc (record-accessor G4bc2@G4bbd '0)) (set! G4bcf@i/o-encoding-error? (condition-predicate G4bc2@G4bbd)) (set! G4bd1@i/o-encoding-error-char (condition-accessor G4bc2@G4bbd G4bcd@G4bbc)) (set! G4bd3@&i/o-encoding-rtd G4bc2@G4bbd) (set! G4bd5@&i/o-encoding-rcd G4bc6@G4bbe) (set! G4bdb@G4bd6 (make-record-type-descriptor '&no-infinities G4a6d@G4a68 'G4bd9 '#f '#f '#())) (set! G4bdd@G4bd8 '#f) (set! G4bdf@G4bd7 (make-record-constructor-descriptor G4bdb@G4bd6 G4a71@G4a69 G4bdd@G4bd8)) (set! G4be2@p? (record-predicate G4bdb@G4bd6)) (set! G4be4@make-no-infinities-violation (record-constructor G4bdf@G4bd7)) (set! G4be6@no-infinities-violation? (condition-predicate G4bdb@G4bd6)) (set! G4be8@&no-infinities-rtd G4bdb@G4bd6) (set! G4bea@&no-infinities-rcd G4bdf@G4bd7) (set! G4bf0@G4beb (make-record-type-descriptor '&no-nans G4a6d@G4a68 'G4bee '#f '#f '#())) (set! G4bf2@G4bed '#f) (set! G4bf4@G4bec (make-record-constructor-descriptor G4bf0@G4beb G4a71@G4a69 G4bf2@G4bed)) (set! G4bf7@p? (record-predicate G4bf0@G4beb)) (set! G4bf9@make-no-nans-violation (record-constructor G4bf4@G4bec)) (set! G4bfb@no-nans-violation? (condition-predicate G4bf0@G4beb)) (set! G4bfd@&no-nans-rtd G4bf0@G4beb) (set! G4bff@&no-nans-rcd G4bf4@G4bec) (begin (set! G4cf0@G4bff@&no-nans-rcd G4bff@&no-nans-rcd) (set! G4cef@G4bfd@&no-nans-rtd G4bfd@&no-nans-rtd) (set! G4cee@G4bfb@no-nans-violation? G4bfb@no-nans-violation?) (set! G4ced@G4bf9@make-no-nans-violation G4bf9@make-no-nans-violation) (set! G4cec@G4bf7@p? G4bf7@p?) (set! G4ceb@G4bf4@G4bec G4bf4@G4bec) (set! G4cea@G4bf2@G4bed G4bf2@G4bed) (set! G4ce9@G4bf0@G4beb G4bf0@G4beb) (set! G4ce8@G4bea@&no-infinities-rcd G4bea@&no-infinities-rcd) (set! G4ce7@G4be8@&no-infinities-rtd G4be8@&no-infinities-rtd) (set! G4ce6@G4be6@no-infinities-violation? G4be6@no-infinities-violation?) (set! G4ce5@G4be4@make-no-infinities-violation G4be4@make-no-infinities-violation) (set! G4ce4@G4be2@p? G4be2@p?) (set! G4ce3@G4bdf@G4bd7 G4bdf@G4bd7) (set! G4ce2@G4bdd@G4bd8 G4bdd@G4bd8) (set! G4ce1@G4bdb@G4bd6 G4bdb@G4bd6) (set! G4ce0@G4bd5@&i/o-encoding-rcd G4bd5@&i/o-encoding-rcd) (set! G4cdf@G4bd3@&i/o-encoding-rtd G4bd3@&i/o-encoding-rtd) (set! G4cde@G4bd1@i/o-encoding-error-char G4bd1@i/o-encoding-error-char) (set! G4cdd@G4bcf@i/o-encoding-error? G4bcf@i/o-encoding-error?) (set! G4cdc@G4bcd@G4bbc G4bcd@G4bbc) (set! G4cdb@G4bcb@make-i/o-encoding-error G4bcb@make-i/o-encoding-error) (set! G4cda@G4bc9@p? G4bc9@p?) (set! G4cd9@G4bc6@G4bbe G4bc6@G4bbe) (set! G4cd8@G4bc4@G4bbf G4bc4@G4bbf) (set! G4cd7@G4bc2@G4bbd G4bc2@G4bbd) (set! G4cd6@G4bbb@&i/o-decoding-rcd G4bbb@&i/o-decoding-rcd) (set! G4cd5@G4bb9@&i/o-decoding-rtd G4bb9@&i/o-decoding-rtd) (set! G4cd4@G4bb7@i/o-decoding-error? G4bb7@i/o-decoding-error?) (set! G4cd3@G4bb5@make-i/o-decoding-error G4bb5@make-i/o-decoding-error) (set! G4cd2@G4bb3@p? G4bb3@p?) (set! G4cd1@G4bb0@G4ba8 G4bb0@G4ba8) (set! G4cd0@G4bae@G4ba9 G4bae@G4ba9) (set! G4ccf@G4bac@G4ba7 G4bac@G4ba7) (set! G4cce@G4ba6@&i/o-port-rcd G4ba6@&i/o-port-rcd) (set! G4ccd@G4ba4@&i/o-port-rtd G4ba4@&i/o-port-rtd) (set! G4ccc@G4ba2@i/o-error-port G4ba2@i/o-error-port) (set! G4ccb@G4ba0@i/o-port-error? G4ba0@i/o-port-error?) (set! G4cca@G4b9e@G4b8d G4b9e@G4b8d) (set! G4cc9@G4b9c@make-i/o-port-error G4b9c@make-i/o-port-error) (set! G4cc8@G4b9a@p? G4b9a@p?) (set! G4cc7@G4b97@G4b8f G4b97@G4b8f) (set! G4cc6@G4b95@G4b90 G4b95@G4b90) (set! G4cc5@G4b93@G4b8e G4b93@G4b8e) (set! G4cc4@G4b8c@&i/o-file-does-not-exist-rcd G4b8c@&i/o-file-does-not-exist-rcd) (set! G4cc3@G4b8a@&i/o-file-does-not-exist-rtd G4b8a@&i/o-file-does-not-exist-rtd) (set! G4cc2@G4b88@i/o-file-does-not-exist-error? G4b88@i/o-file-does-not-exist-error?) (set! G4cc1@G4b86@make-i/o-file-does-not-exist-error G4b86@make-i/o-file-does-not-exist-error) (set! G4cc0@G4b84@p? G4b84@p?) (set! G4cbf@G4b81@G4b79 G4b81@G4b79) (set! G4cbe@G4b7f@G4b7a G4b7f@G4b7a) (set! G4cbd@G4b7d@G4b78 G4b7d@G4b78) (set! G4cbc@G4b77@&i/o-file-already-exists-rcd G4b77@&i/o-file-already-exists-rcd) (set! G4cbb@G4b75@&i/o-file-already-exists-rtd G4b75@&i/o-file-already-exists-rtd) (set! G4cba@G4b73@i/o-file-already-exists-error? G4b73@i/o-file-already-exists-error?) (set! G4cb9@G4b71@make-i/o-file-already-exists-error G4b71@make-i/o-file-already-exists-error) (set! G4cb8@G4b6f@p? G4b6f@p?) (set! G4cb7@G4b6c@G4b64 G4b6c@G4b64) (set! G4cb6@G4b6a@G4b65 G4b6a@G4b65) (set! G4cb5@G4b68@G4b63 G4b68@G4b63) (set! G4cb4@G4b62@&i/o-file-is-read-only-rcd G4b62@&i/o-file-is-read-only-rcd) (set! G4cb3@G4b60@&i/o-file-is-read-only-rtd G4b60@&i/o-file-is-read-only-rtd) (set! G4cb2@G4b5e@i/o-file-is-read-only-error? G4b5e@i/o-file-is-read-only-error?) (set! G4cb1@G4b5c@make-i/o-file-is-read-only-error G4b5c@make-i/o-file-is-read-only-error) (set! G4cb0@G4b5a@p? G4b5a@p?) (set! G4caf@G4b57@G4b4f G4b57@G4b4f) (set! G4cae@G4b55@G4b50 G4b55@G4b50) (set! G4cad@G4b53@G4b4e G4b53@G4b4e) (set! G4cac@G4b4d@&i/o-file-protection-rcd G4b4d@&i/o-file-protection-rcd) (set! G4cab@G4b4b@&i/o-file-protection-rtd G4b4b@&i/o-file-protection-rtd) (set! G4caa@G4b49@i/o-file-protection-error? G4b49@i/o-file-protection-error?) (set! G4ca9@G4b47@make-i/o-file-protection-error G4b47@make-i/o-file-protection-error) (set! G4ca8@G4b45@p? G4b45@p?) (set! G4ca7@G4b42@G4b3a G4b42@G4b3a) (set! G4ca6@G4b40@G4b3b G4b40@G4b3b) (set! G4ca5@G4b3e@G4b39 G4b3e@G4b39) (set! G4ca4@G4b38@&i/o-filename-rcd G4b38@&i/o-filename-rcd) (set! G4ca3@G4b36@&i/o-filename-rtd G4b36@&i/o-filename-rtd) (set! G4ca2@G4b34@i/o-error-filename G4b34@i/o-error-filename) (set! G4ca1@G4b32@i/o-filename-error? G4b32@i/o-filename-error?) (set! G4ca0@G4b30@G4b1f G4b30@G4b1f) (set! G4c9f@G4b2e@make-i/o-filename-error G4b2e@make-i/o-filename-error) (set! G4c9e@G4b2c@p? G4b2c@p?) (set! G4c9d@G4b29@G4b21 G4b29@G4b21) (set! G4c9c@G4b27@G4b22 G4b27@G4b22) (set! G4c9b@G4b25@G4b20 G4b25@G4b20) (set! G4c9a@G4b1e@&i/o-invalid-position-rcd G4b1e@&i/o-invalid-position-rcd) (set! G4c99@G4b1c@&i/o-invalid-position-rtd G4b1c@&i/o-invalid-position-rtd) (set! G4c98@G4b1a@i/o-error-position G4b1a@i/o-error-position) (set! G4c97@G4b18@i/o-invalid-position-error? G4b18@i/o-invalid-position-error?) (set! G4c96@G4b16@G4b05 G4b16@G4b05) (set! G4c95@G4b14@make-i/o-invalid-position-error G4b14@make-i/o-invalid-position-error) (set! G4c94@G4b12@p? G4b12@p?) (set! G4c93@G4b0f@G4b07 G4b0f@G4b07) (set! G4c92@G4b0d@G4b08 G4b0d@G4b08) (set! G4c91@G4b0b@G4b06 G4b0b@G4b06) (set! G4c90@G4b04@&i/o-write-rcd G4b04@&i/o-write-rcd) (set! G4c8f@G4b02@&i/o-write-rtd G4b02@&i/o-write-rtd) (set! G4c8e@G4b00@i/o-write-error? G4b00@i/o-write-error?) (set! G4c8d@G4afe@make-i/o-write-error G4afe@make-i/o-write-error) (set! G4c8c@G4afc@p? G4afc@p?) (set! G4c8b@G4af9@G4af1 G4af9@G4af1) (set! G4c8a@G4af7@G4af2 G4af7@G4af2) (set! G4c89@G4af5@G4af0 G4af5@G4af0) (set! G4c88@G4aef@&i/o-read-rcd G4aef@&i/o-read-rcd) (set! G4c87@G4aed@&i/o-read-rtd G4aed@&i/o-read-rtd) (set! G4c86@G4aeb@i/o-read-error? G4aeb@i/o-read-error?) (set! G4c85@G4ae9@make-i/o-read-error G4ae9@make-i/o-read-error) (set! G4c84@G4ae7@p? G4ae7@p?) (set! G4c83@G4ae4@G4adc G4ae4@G4adc) (set! G4c82@G4ae2@G4add G4ae2@G4add) (set! G4c81@G4ae0@G4adb G4ae0@G4adb) (set! G4c80@G4ada@&i/o-rcd G4ada@&i/o-rcd) (set! G4c7f@G4ad8@&i/o-rtd G4ad8@&i/o-rtd) (set! G4c7e@G4ad6@i/o-error? G4ad6@i/o-error?) (set! G4c7d@G4ad4@make-i/o-error G4ad4@make-i/o-error) (set! G4c7c@G4ad2@p? G4ad2@p?) (set! G4c7b@G4acf@G4ac7 G4acf@G4ac7) (set! G4c7a@G4acd@G4ac8 G4acd@G4ac8) (set! G4c79@G4acb@G4ac6 G4acb@G4ac6) (set! G4c78@G4ac5@&undefined-rcd G4ac5@&undefined-rcd) (set! G4c77@G4ac3@&undefined-rtd G4ac3@&undefined-rtd) (set! G4c76@G4ac1@undefined-violation? G4ac1@undefined-violation?) (set! G4c75@G4abf@make-undefined-violation G4abf@make-undefined-violation) (set! G4c74@G4abd@p? G4abd@p?) (set! G4c73@G4aba@G4ab2 G4aba@G4ab2) (set! G4c72@G4ab8@G4ab3 G4ab8@G4ab3) (set! G4c71@G4ab6@G4ab1 G4ab6@G4ab1) (set! G4c70@G4ab0@&syntax-rcd G4ab0@&syntax-rcd) (set! G4c6f@G4aae@&syntax-rtd G4aae@&syntax-rtd) (set! G4c6e@G4aac@syntax-violation-subform G4aac@syntax-violation-subform) (set! G4c6d@G4aaa@syntax-violation-form G4aaa@syntax-violation-form) (set! G4c6c@G4aa8@syntax-violation? G4aa8@syntax-violation?) (set! G4c6b@G4aa6@G4a93 G4aa6@G4a93) (set! G4c6a@G4aa4@G4a92 G4aa4@G4a92) (set! G4c69@G4aa2@make-syntax-violation G4aa2@make-syntax-violation) (set! G4c68@G4aa0@p? G4aa0@p?) (set! G4c67@G4a9d@G4a95 G4a9d@G4a95) (set! G4c66@G4a9b@G4a96 G4a9b@G4a96) (set! G4c65@G4a99@G4a94 G4a99@G4a94) (set! G4c64@G4a91@&lexical-rcd G4a91@&lexical-rcd) (set! G4c63@G4a8f@&lexical-rtd G4a8f@&lexical-rtd) (set! G4c62@G4a8d@lexical-violation? G4a8d@lexical-violation?) (set! G4c61@G4a8b@make-lexical-violation G4a8b@make-lexical-violation) (set! G4c60@G4a89@p? G4a89@p?) (set! G4c5f@G4a86@G4a7e G4a86@G4a7e) (set! G4c5e@G4a84@G4a7f G4a84@G4a7f) (set! G4c5d@G4a82@G4a7d G4a82@G4a7d) (set! G4c5c@G4a7c@&implementation-restriction-rcd G4a7c@&implementation-restriction-rcd) (set! G4c5b@G4a7a@&implementation-restriction-rtd G4a7a@&implementation-restriction-rtd) (set! G4c5a@G4a78@implementation-restriction-violation? G4a78@implementation-restriction-violation?) (set! G4c59@G4a76@make-implementation-restriction-violation G4a76@make-implementation-restriction-violation) (set! G4c58@G4a74@p? G4a74@p?) (set! G4c57@G4a71@G4a69 G4a71@G4a69) (set! G4c56@G4a6f@G4a6a G4a6f@G4a6a) (set! G4c55@G4a6d@G4a68 G4a6d@G4a68) (set! G4c54@G4a67@&non-continuable-rcd G4a67@&non-continuable-rcd) (set! G4c53@G4a65@&non-continuable-rtd G4a65@&non-continuable-rtd) (set! G4c52@G4a63@non-continuable-violation? G4a63@non-continuable-violation?) (set! G4c51@G4a61@make-non-continuable-violation G4a61@make-non-continuable-violation) (set! G4c50@G4a5f@p? G4a5f@p?) (set! G4c4f@G4a5c@G4a54 G4a5c@G4a54) (set! G4c4e@G4a5a@G4a55 G4a5a@G4a55) (set! G4c4d@G4a58@G4a53 G4a58@G4a53) (set! G4c4c@G4a52@&who-rcd G4a52@&who-rcd) (set! G4c4b@G4a50@&who-rtd G4a50@&who-rtd) (set! G4c4a@G4a4e@condition-who G4a4e@condition-who) (set! G4c49@G4a4c@who-condition? G4a4c@who-condition?) (set! G4c48@G4a4a@G4a39 G4a4a@G4a39) (set! G4c47@G4a48@make-who-condition G4a48@make-who-condition) (set! G4c46@G4a46@p? G4a46@p?) (set! G4c45@G4a43@G4a3b G4a43@G4a3b) (set! G4c44@G4a41@G4a3c G4a41@G4a3c) (set! G4c43@G4a3f@G4a3a G4a3f@G4a3a) (set! G4c42@G4a38@&irritants-rcd G4a38@&irritants-rcd) (set! G4c41@G4a36@&irritants-rtd G4a36@&irritants-rtd) (set! G4c40@G4a34@condition-irritants G4a34@condition-irritants) (set! G4c3f@G4a32@irritants-condition? G4a32@irritants-condition?) (set! G4c3e@G4a30@G4a1f G4a30@G4a1f) (set! G4c3d@G4a2e@make-irritants-condition G4a2e@make-irritants-condition) (set! G4c3c@G4a2c@p? G4a2c@p?) (set! G4c3b@G4a29@G4a21 G4a29@G4a21) (set! G4c3a@G4a27@G4a22 G4a27@G4a22) (set! G4c39@G4a25@G4a20 G4a25@G4a20) (set! G4c38@G4a1e@&assertion-rcd G4a1e@&assertion-rcd) (set! G4c37@G4a1c@&assertion-rtd G4a1c@&assertion-rtd) (set! G4c36@G4a1a@assertion-violation? G4a1a@assertion-violation?) (set! G4c35@G4a18@make-assertion-violation G4a18@make-assertion-violation) (set! G4c34@G4a16@p? G4a16@p?) (set! G4c33@G4a13@G4a0b G4a13@G4a0b) (set! G4c32@G4a11@G4a0c G4a11@G4a0c) (set! G4c31@G4a0f@G4a0a G4a0f@G4a0a) (set! G4c30@G4a09@&violation-rcd G4a09@&violation-rcd) (set! G4c2f@G4a07@&violation-rtd G4a07@&violation-rtd) (set! G4c2e@G4a05@violation? G4a05@violation?) (set! G4c2d@G4a03@make-violation G4a03@make-violation) (set! G4c2c@G4a01@p? G4a01@p?) (set! G4c2b@G49fe@G49f6 G49fe@G49f6) (set! G4c2a@G49fc@G49f7 G49fc@G49f7) (set! G4c29@G49fa@G49f5 G49fa@G49f5) (set! G4c28@G49f4@&error-rcd G49f4@&error-rcd) (set! G4c27@G49f2@&error-rtd G49f2@&error-rtd) (set! G4c26@G49f0@error? G49f0@error?) (set! G4c25@G49ee@make-error G49ee@make-error) (set! G4c24@G49ec@p? G49ec@p?) (set! G4c23@G49e9@G49e1 G49e9@G49e1) (set! G4c22@G49e7@G49e2 G49e7@G49e2) (set! G4c21@G49e5@G49e0 G49e5@G49e0) (set! G4c20@G49df@&serious-rcd G49df@&serious-rcd) (set! G4c1f@G49dd@&serious-rtd G49dd@&serious-rtd) (set! G4c1e@G49db@serious-condition? G49db@serious-condition?) (set! G4c1d@G49d9@make-serious-condition G49d9@make-serious-condition) (set! G4c1c@G49d7@p? G49d7@p?) (set! G4c1b@G49d4@G49cc G49d4@G49cc) (set! G4c1a@G49d2@G49cd G49d2@G49cd) (set! G4c19@G49d0@G49cb G49d0@G49cb) (set! G4c18@G49ca@&warning-rcd G49ca@&warning-rcd) (set! G4c17@G49c8@&warning-rtd G49c8@&warning-rtd) (set! G4c16@G49c6@warning? G49c6@warning?) (set! G4c15@G49c4@make-warning G49c4@make-warning) (set! G4c14@G49c2@p? G49c2@p?) (set! G4c13@G49bf@G49b7 G49bf@G49b7) (set! G4c12@G49bd@G49b8 G49bd@G49b8) (set! G4c11@G49bb@G49b6 G49bb@G49b6) (set! G4c10@G49b5@&message-rcd G49b5@&message-rcd) (set! G4c0f@G49b3@&message-rtd G49b3@&message-rtd) (set! G4c0e@G49b1@condition-message G49b1@condition-message) (set! G4c0d@G49af@message-condition? G49af@message-condition?) (set! G4c0c@G49ad@G499c G49ad@G499c) (set! G4c0b@G49ab@make-message-condition G49ab@make-message-condition) (set! G4c0a@G49a9@p? G49a9@p?) (set! G4c09@G49a6@G499e G49a6@G499e) (set! G4c08@G49a4@G499f G49a4@G499f) (set! G4c07@G49a2@G499d G49a2@G499d) (set! G4c06@G4958@&condition-rcd G4958@&condition-rcd) (set! G4c05@G4956@&condition-rtd G4956@&condition-rtd) (set! G4c04@G4954@make-&condition G4954@make-&condition) (set! G4c03@G4952@&condition? G4952@&condition?) (set! G4c02@G494f@G4947 G494f@G4947) (set! G4c01@G494d@G4948 G494d@G4948) (set! G4c00@G494b@G4946 G494b@G4946)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2940@G28f5@current-primitive-locations (lambda (G50c9@x) ((lambda (G50cb@t) (if G50cb@t (cdr G50cb@t) '#f)) (assq G50c9@x '((&no-nans-rcd . G4cf0@G4bff@&no-nans-rcd) (&no-nans-rtd . G4cef@G4bfd@&no-nans-rtd) (&no-infinities-rcd . G4ce8@G4bea@&no-infinities-rcd) (&no-infinities-rtd . G4ce7@G4be8@&no-infinities-rtd) (&i/o-encoding-rcd . G4ce0@G4bd5@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4cdf@G4bd3@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4cd6@G4bbb@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4cd5@G4bb9@&i/o-decoding-rtd) (&i/o-port-rcd . G4cce@G4ba6@&i/o-port-rcd) (&i/o-port-rtd . G4ccd@G4ba4@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cc4@G4b8c@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cc3@G4b8a@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cbc@G4b77@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cbb@G4b75@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cb4@G4b62@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cb3@G4b60@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cac@G4b4d@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cab@G4b4b@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4ca4@G4b38@&i/o-filename-rcd) (&i/o-filename-rtd . G4ca3@G4b36@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4c9a@G4b1e@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4c99@G4b1c@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c90@G4b04@&i/o-write-rcd) (&i/o-write-rtd . G4c8f@G4b02@&i/o-write-rtd) (&i/o-read-rcd . G4c88@G4aef@&i/o-read-rcd) (&i/o-read-rtd . G4c87@G4aed@&i/o-read-rtd) (&i/o-rcd . G4c80@G4ada@&i/o-rcd) (&i/o-rtd . G4c7f@G4ad8@&i/o-rtd) (&undefined-rcd . G4c78@G4ac5@&undefined-rcd) (&undefined-rtd . G4c77@G4ac3@&undefined-rtd) (&syntax-rcd . G4c70@G4ab0@&syntax-rcd) (&syntax-rtd . G4c6f@G4aae@&syntax-rtd) (&lexical-rcd . G4c64@G4a91@&lexical-rcd) (&lexical-rtd . G4c63@G4a8f@&lexical-rtd) (&implementation-restriction-rcd . G4c5c@G4a7c@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c5b@G4a7a@&implementation-restriction-rtd) (&non-continuable-rcd . G4c54@G4a67@&non-continuable-rcd) (&non-continuable-rtd . G4c53@G4a65@&non-continuable-rtd) (&who-rcd . G4c4c@G4a52@&who-rcd) (&who-rtd . G4c4b@G4a50@&who-rtd) (&irritants-rcd . G4c42@G4a38@&irritants-rcd) (&irritants-rtd . G4c41@G4a36@&irritants-rtd) (&assertion-rcd . G4c38@G4a1e@&assertion-rcd) (&assertion-rtd . G4c37@G4a1c@&assertion-rtd) (&violation-rcd . G4c30@G4a09@&violation-rcd) (&violation-rtd . G4c2f@G4a07@&violation-rtd) (&error-rcd . G4c28@G49f4@&error-rcd) (&error-rtd . G4c27@G49f2@&error-rtd) (&serious-rcd . G4c20@G49df@&serious-rcd) (&serious-rtd . G4c1f@G49dd@&serious-rtd) (&warning-rcd . G4c18@G49ca@&warning-rcd) (&warning-rtd . G4c17@G49c8@&warning-rtd) (&message-rcd . G4c10@G49b5@&message-rcd) (&message-rtd . G4c0f@G49b3@&message-rtd) (&condition-rcd . G4c06@G4958@&condition-rcd) (&condition-rtd . G4c05@G4956@&condition-rtd) (syntax-error . G4938@G3039@syntax-error) (syntax-dispatch . G48cc@G2f52@syntax-dispatch) (load . G4dc2@G4d06@load) (interaction-environment . G4940@G3049@interaction-environment) (make-parameter . G28ef@G2825@make-parameter) (make-variable-transformer . G488a@G2d8d@make-variable-transformer) (identifier? . G493b@G303f@identifier?) (generate-temporaries . G4931@G302b@generate-temporaries) (free-identifier=? . G4932@G302d@free-identifier=?) (syntax->datum . G493d@G3043@syntax->datum) (datum->syntax . G493c@G3041@datum->syntax) (bound-identifier=? . G4933@G302f@bound-identifier=?) (make-i/o-write-error . G4c8d@G4afe@make-i/o-write-error) (make-i/o-read-error . G4c85@G4ae9@make-i/o-read-error) (make-i/o-port-error . G4cc9@G4b9c@make-i/o-port-error) (make-i/o-invalid-position-error . G4c95@G4b14@make-i/o-invalid-position-error) (make-i/o-filename-error . G4c9f@G4b2e@make-i/o-filename-error) (make-i/o-file-protection-error . G4ca9@G4b47@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cb1@G4b5c@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cc1@G4b86@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cb9@G4b71@make-i/o-file-already-exists-error) (make-i/o-error . G4c7d@G4ad4@make-i/o-error) (make-i/o-encoding-error . G4cdb@G4bcb@make-i/o-encoding-error) (make-i/o-decoding-error . G4cd3@G4bb5@make-i/o-decoding-error) (i/o-write-error? . G4c8e@G4b00@i/o-write-error?) (i/o-read-error? . G4c86@G4aeb@i/o-read-error?) (i/o-port-error? . G4ccb@G4ba0@i/o-port-error?) (i/o-invalid-position-error? . G4c97@G4b18@i/o-invalid-position-error?) (i/o-filename-error? . G4ca1@G4b32@i/o-filename-error?) (i/o-file-protection-error? . G4caa@G4b49@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cb2@G4b5e@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cc2@G4b88@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cba@G4b73@i/o-file-already-exists-error?) (i/o-error? . G4c7e@G4ad6@i/o-error?) (i/o-error-position . G4c98@G4b1a@i/o-error-position) (i/o-error-port . G4ccc@G4ba2@i/o-error-port) (i/o-error-filename . G4ca2@G4b34@i/o-error-filename) (i/o-encoding-error? . G4cdd@G4bcf@i/o-encoding-error?) (i/o-encoding-error-char . G4cde@G4bd1@i/o-encoding-error-char) (i/o-decoding-error? . G4cd4@G4bb7@i/o-decoding-error?) (scheme-report-environment . G4928@G3019@scheme-report-environment) (null-environment . G4927@G3017@null-environment) (command-line . G4dbf@G4d00@command-line) (eval . G492a@G301d@eval) (environment . G4926@G3015@environment) (who-condition? . G4c49@G4a4c@who-condition?) (warning? . G4c16@G49c6@warning?) (violation? . G4c2e@G4a05@violation?) (undefined-violation? . G4c76@G4ac1@undefined-violation?) (syntax-violation? . G4c6c@G4aa8@syntax-violation?) (syntax-violation-subform . G4c6e@G4aac@syntax-violation-subform) (syntax-violation-form . G4c6d@G4aaa@syntax-violation-form) (syntax-violation . G493a@G303d@syntax-violation) (serious-condition? . G4c1e@G49db@serious-condition?) (non-continuable-violation? . G4c52@G4a63@non-continuable-violation?) (message-condition? . G4c0d@G49af@message-condition?) (make-who-condition . G4c47@G4a48@make-who-condition) (make-warning . G4c15@G49c4@make-warning) (make-violation . G4c2d@G4a03@make-violation) (make-undefined-violation . G4c75@G4abf@make-undefined-violation) (make-syntax-violation . G4c69@G4aa2@make-syntax-violation) (make-serious-condition . G4c1d@G49d9@make-serious-condition) (make-non-continuable-violation . G4c51@G4a61@make-non-continuable-violation) (make-message-condition . G4c0b@G49ab@make-message-condition) (make-lexical-violation . G4c61@G4a8b@make-lexical-violation) (make-irritants-condition . G4c3d@G4a2e@make-irritants-condition) (make-implementation-restriction-violation . G4c59@G4a76@make-implementation-restriction-violation) (make-error . G4c25@G49ee@make-error) (make-assertion-violation . G4c35@G4a18@make-assertion-violation) (lexical-violation? . G4c62@G4a8d@lexical-violation?) (irritants-condition? . G4c3f@G4a32@irritants-condition?) (implementation-restriction-violation? . G4c5a@G4a78@implementation-restriction-violation?) (error? . G4c26@G49f0@error?) (condition-who . G4c4a@G4a4e@condition-who) (condition-message . G4c0e@G49b1@condition-message) (condition-irritants . G4c40@G4a34@condition-irritants) (assertion-violation? . G4c36@G4a1a@assertion-violation?) (no-nans-violation? . G4cee@G4bfb@no-nans-violation?) (no-infinities-violation? . G4ce6@G4be6@no-infinities-violation?) (make-no-nans-violation . G4ced@G4bf9@make-no-nans-violation) (make-no-infinities-violation . G4ce5@G4be4@make-no-infinities-violation)))))) (G2b68@G2a0d@install-library 'G509c '(mosh interaction) '() '() '() '() '((format . G506d) (string-split . G5062) (call-process . G505c) (string-upcase . G5049) (string-titlecase . G5048) (string-normalize-nfkd . G5047) (string-normalize-nfkc . G5046) (string-normalize-nfd . G5045) (string-normalize-nfc . G5044) (string-foldcase . G5043) (string-downcase . G5042) (string-ci>? . G5041) (string-ci>=? . G5040) (string-ci=? . G503f) (string-ci<? . G503e) (string-ci<=? . G503d) (char-whitespace? . G503c) (char-upper-case? . G503b) (char-title-case? . G503a) (char-numeric? . G5039) (char-lower-case? . G5038) (char-general-category . G5037) (char-upcase . G5036) (char-titlecase . G5035) (char-foldcase . G5034) (char-downcase . G5033) (char-ci>? . G5032) (char-ci>=? . G5031) (char-ci=? . G5030) (char-ci<? . G502f) (char-ci<=? . G502e) (char-alphabetic? . G502d) (make-variable-transformer . G2d8c) (identifier? . G303e) (generate-temporaries . G302a) (free-identifier=? . G302c) (syntax->datum . G3042) (datum->syntax . G3040) (bound-identifier=? . G302e) (record-type-descriptor? . G502c) (record-predicate . G502b) (record-mutator . G502a) (record-constructor . G5029) (record-accessor . G5028) (make-record-type-descriptor . G5027) (make-record-constructor-descriptor . G5026) (record? . G5025) (record-type-uid . G5024) (record-type-sealed? . G5023) (record-type-parent . G5022) (record-type-opaque? . G5021) (record-type-name . G5020) (record-type-generative? . G501f) (record-type-field-names . G501e) (record-rtd . G501d) (record-field-mutable? . G501c) (delete-file . G501b) (file-exists? . G501a) (vector-sort! . G5019) (vector-sort . G5018) (list-sort . G5017) (symbol-hash . G5016) (string-ci-hash . G5015) (string-hash . G5014) (equal-hash . G5013) (hashtable-equivalence-function . G5012) (make-hashtable . G5011) (hashtable-hash-function . G5010) (make-eqv-hashtable . G500f) (make-eq-hashtable . G500e) (hashtable? . G500d) (hashtable-update! . G500c) (hashtable-size . G500b) (hashtable-set! . G500a) (hashtable-ref . G5009) (hashtable-mutable? . G5008) (hashtable-keys . G5007) (hashtable-entries . G5006) (hashtable-delete! . G5005) (hashtable-copy . G5004) (hashtable-contains? . G5003) (hashtable-clear! . G5002) (call-with-output-file . G5001) (call-with-input-file . G5000) (write-char . G4fff) (write . G4ffe) (with-output-to-file . G4ffd) (with-input-from-file . G4ffc) (read-char . G4ffb) (read . G4ffa) (peek-char . G4ff9) (open-output-file . G4ff8) (open-input-file . G4ff7) (newline . G4ff6) (display . G4ff5) (close-output-port . G4ff4) (close-input-port . G4ff3) (eof-object? . G4ff2) (eof-object . G4ff1) (current-error-port . G4ff0) (current-output-port . G4fef) (current-input-port . G4fee) (output-port? . G4fed) (input-port? . G4fec) (utf-8-codec . G4feb) (utf-16-codec . G4fea) (transcoder-error-handling-mode . G4fe9) (transcoder-eol-style . G4fe8) (transcoder-codec . G4fe7) (transcoded-port . G4fe6) (textual-port? . G4fe5) (string->bytevector . G4fe4) (standard-output-port . G4fe3) (standard-input-port . G4fe2) (standard-error-port . G4fe1) (set-port-position! . G4fe0) (put-u8 . G4fdf) (put-string . G4fde) (put-datum . G4fdd) (put-char . G4fdc) (put-bytevector . G4fdb) (port? . G4fda) (port-transcoder . G4fd9) (port-position . G4fd8) (port-has-set-port-position!? . G4fd7) (port-has-port-position? . G4fd6) (port-eof? . G4fd5) (output-port-buffer-mode . G4fd4) (open-string-output-port . G4fd3) (open-string-input-port . G4fd2) (open-file-output-port . G4fd1) (open-file-input/output-port . G4fd0) (open-file-input-port . G4fcf) (open-bytevector-output-port . G4fce) (open-bytevector-input-port . G4fcd) (native-transcoder . G4fcc) (native-eol-style . G4fcb) (make-transcoder . G4fca) (latin-1-codec . G4fc9) (make-i/o-write-error . G4afd) (make-i/o-read-error . G4ae8) (make-i/o-port-error . G4b9b) (make-i/o-invalid-position-error . G4b13) (make-i/o-filename-error . G4b2d) (make-i/o-file-protection-error . G4b46) (make-i/o-file-is-read-only-error . G4b5b) (make-i/o-file-does-not-exist-error . G4b85) (make-i/o-file-already-exists-error . G4b70) (make-i/o-error . G4ad3) (make-i/o-encoding-error . G4bca) (make-i/o-decoding-error . G4bb4) (make-custom-textual-output-port . G4fc8) (make-custom-textual-input/output-port . G4fc7) (make-custom-textual-input-port . G4fc6) (make-custom-binary-output-port . G4fc5) (make-custom-binary-input/output-port . G4fc4) (make-custom-binary-input-port . G4fc3) (make-bytevector . G4fc2) (lookahead-u8 . G4fc1) (lookahead-char . G4fc0) (i/o-write-error? . G4aff) (i/o-read-error? . G4aea) (i/o-port-error? . G4b9f) (i/o-invalid-position-error? . G4b17) (i/o-filename-error? . G4b31) (i/o-file-protection-error? . G4b48) (i/o-file-is-read-only-error? . G4b5d) (i/o-file-does-not-exist-error? . G4b87) (i/o-file-already-exists-error? . G4b72) (i/o-error? . G4ad5) (i/o-error-position . G4b19) (i/o-error-port . G4ba1) (i/o-error-filename . G4b33) (i/o-encoding-error? . G4bce) (i/o-encoding-error-char . G4bd0) (i/o-decoding-error? . G4bb6) (get-u8 . G4fbf) (get-string-n! . G4fbe) (get-string-n . G4fbd) (get-string-all . G4fbc) (get-line . G4fbb) (get-datum . G4fba) (get-char . G4fb9) (get-bytevector-some . G4fb8) (get-bytevector-n! . G4fb7) (get-bytevector-n . G4fb6) (get-bytevector-all . G4fb5) (flush-output-port . G4fb4) (close-port . G4fb3) (exit . G4fab) (command-line . G4cff) (string-fill! . G4faa) (string-set! . G4fa9) (set-cdr! . G4fa8) (set-car! . G4fa7) (remove . G4fa6) (remv . G4fa5) (remp . G4fa4) (remq . G4fa3) (partition . G4fa2) (memv . G4fa1) (memq . G4fa0) (memp . G4f9f) (member . G4f9e) (exists . G4f9d) (for-all . G4f9c) (fold-right . G4f9b) (fold-left . G4f9a) (find . G4f99) (filter . G4f98) (cons* . G4f97) (assv . G4f96) (assq . G4f95) (assp . G4f94) (assoc . G4f93) (call-with-string-output-port . G4f92) (call-with-port . G4f91) (call-with-bytevector-output-port . G4f90) (bytevector->string . G4f8f) (buffer-mode? . G4f8e) (binary-port? . G4f8d) (with-exception-handler . G4f8c) (raise-continuable . G4f8b) (raise . G4f8a) (eval . G301c) (environment . G3014) (make-enumeration . G4f89) (enum-set=? . G4f88) (enum-set-universe . G4f87) (enum-set-union . G4f86) (enum-set-subset? . G4f85) (enum-set-projection . G4f84) (enum-set-member? . G4f83) (enum-set-intersection . G4f82) (enum-set-indexer . G4f81) (enum-set-difference . G4f80) (enum-set-constructor . G4f7f) (enum-set-complement . G4f7e) (enum-set->list . G4f7d) (who-condition? . G4a4b) (warning? . G49c5) (violation? . G4a04) (undefined-violation? . G4ac0) (syntax-violation? . G4aa7) (syntax-violation-subform . G4aab) (syntax-violation-form . G4aa9) (syntax-violation . G303c) (simple-conditions . G4f7c) (serious-condition? . G49da) (non-continuable-violation? . G4a62) (message-condition? . G49ae) (make-who-condition . G4a47) (make-warning . G49c3) (make-violation . G4a02) (make-undefined-violation . G4abe) (make-syntax-violation . G4aa1) (make-serious-condition . G49d8) (make-non-continuable-violation . G4a60) (make-message-condition . G49aa) (make-lexical-violation . G4a8a) (make-irritants-condition . G4a2d) (make-implementation-restriction-violation . G4a75) (make-error . G49ed) (make-assertion-violation . G4a17) (lexical-violation? . G4a8c) (irritants-condition? . G4a31) (implementation-restriction-violation? . G4a77) (error? . G49ef) (condition-who . G4a4d) (condition-predicate . G4f7b) (condition-message . G49b0) (condition-irritants . G4a33) (condition-accessor . G4f7a) (condition . G4f79) (assertion-violation? . G4a19) (condition? . G4f78) (utf32->string . G4f77) (utf16->string . G4f76) (utf8->string . G4f75) (uint-list->bytevector . G4f74) (u8-list->bytevector . G4f73) (string->utf8 . G4f72) (string->utf32 . G4f71) (string->utf16 . G4f70) (sint-list->bytevector . G4f6f) (native-endianness . G4f6e) (bytevector? . G4f6d) (bytevector=? . G4f6c) (bytevector-uint-set! . G4f6b) (bytevector-uint-ref . G4f6a) (bytevector-u8-set! . G4f69) (bytevector-u8-ref . G4f68) (bytevector-u64-set! . G4f67) (bytevector-u64-ref . G4f66) (bytevector-u64-native-set! . G4f65) (bytevector-u64-native-ref . G4f64) (bytevector-u32-set! . G4f63) (bytevector-u32-ref . G4f62) (bytevector-u32-native-set! . G4f61) (bytevector-u32-native-ref . G4f60) (bytevector-u16-set! . G4f5f) (bytevector-u16-ref . G4f5e) (bytevector-u16-native-set! . G4f5d) (bytevector-u16-native-ref . G4f5c) (bytevector-sint-set! . G4f5b) (bytevector-sint-ref . G4f5a) (bytevector-s8-set! . G4f59) (bytevector-s8-ref . G4f58) (bytevector-s64-set! . G4f57) (bytevector-s64-ref . G4f56) (bytevector-s64-native-set! . G4f55) (bytevector-s64-native-ref . G4f54) (bytevector-s32-set! . G4f53) (bytevector-s32-ref . G4f52) (bytevector-s32-native-set! . G4f51) (bytevector-s32-native-ref . G4f50) (bytevector-s16-set! . G4f4f) (bytevector-s16-ref . G4f4e) (bytevector-s16-native-set! . G4f4d) (bytevector-s16-native-ref . G4f4c) (bytevector-length . G4f4b) (bytevector-ieee-single-ref . G4f4a) (bytevector-ieee-single-set! . G4f49) (bytevector-ieee-single-native-set! . G4f48) (bytevector-ieee-single-native-ref . G4f47) (bytevector-ieee-double-set! . G4f46) (bytevector-ieee-double-ref . G4f45) (bytevector-ieee-double-native-set! . G4f44) (bytevector-ieee-double-native-ref . G4f43) (bytevector-fill! . G4f42) (bytevector-copy! . G4f41) (bytevector-copy . G4f40) (bytevector->uint-list . G4f3f) (bytevector->u8-list . G4f3e) (bytevector->sint-list . G4f3d) (no-nans-violation? . G4bfa) (no-infinities-violation? . G4be5) (make-no-nans-violation . G4bf8) (make-no-infinities-violation . G4be3) (real->flonum . G4f3c) (flzero? . G4f3b) (fltruncate . G4f3a) (fltan . G4f39) (flsqrt . G4f38) (flsin . G4f37) (flround . G4f36) (flpositive? . G4f35) (flonum? . G4f34) (flodd? . G4f33) (flnumerator . G4f32) (flnegative? . G4f31) (flnan? . G4f30) (flmod0 . G4f2f) (flmod . G4f2e) (flmin . G4f2d) (flmax . G4f2c) (fllog . G4f2b) (flinteger? . G4f2a) (flinfinite? . G4f29) (flfloor . G4f28) (flfinite? . G4f27) (flexpt . G4f26) (flexp . G4f25) (fleven? . G4f24) (fldiv0-and-mod0 . G4f23) (fldiv0 . G4f22) (fldiv-and-mod . G4f21) (fldiv . G4f20) (fldenominator . G4f1f) (flcos . G4f1e) (flceiling . G4f1d) (flatan . G4f1c) (flasin . G4f1b) (flacos . G4f1a) (flabs . G4f19) (fl>? . G4f18) (fl>=? . G4f17) (fl=? . G4f16) (fl<? . G4f15) (fl<=? . G4f14) (fl/ . G4f13) (fl- . G4f12) (fl+ . G4f11) (fl* . G4f10) (fixnum->flonum . G4f0f) (fxzero? . G4f0e) (fxxor . G4f0d) (fxrotate-bit-field . G4f0c) (fxreverse-bit-field . G4f0b) (fxpositive? . G4f0a) (fxodd? . G4f09) (fxnot . G4f08) (fxnegative? . G4f07) (fxmod0 . G4f06) (fxmod . G4f05) (fxmin . G4f04) (fxmax . G4f03) (fxlength . G4f02) (fxior . G4f01) (fxif . G4f00) (fxfirst-bit-set . G4eff) (fxeven? . G4efe) (fxdiv0-and-mod0 . G4efd) (fxdiv0 . G4efc) (fxdiv-and-mod . G4efb) (fxdiv . G4efa) (fxcopy-bit-field . G4ef9) (fxcopy-bit . G4ef8) (fxbit-set? . G4ef7) (fxbit-field . G4ef6) (fxbit-count . G4ef5) (fxarithmetic-shift-right . G4ef4) (fxarithmetic-shift-left . G4ef3) (fxarithmetic-shift . G4ef2) (fxand . G4ef1) (fx>? . G4ef0) (fx>=? . G4eef) (fx=? . G4eee) (fx<? . G4eed) (fx<=? . G4eec) (fx-/carry . G4eeb) (fx- . G4eea) (fx+/carry . G4ee9) (fx+ . G4ee8) (fx*/carry . G4ee7) (fx* . G4ee6) (greatest-fixnum . G4ee5) (least-fixnum . G4ee4) (fixnum-width . G4ee3) (fixnum? . G4ee2) (bitwise-rotate-bit-field . G4ee1) (bitwise-reverse-bit-field . G4ee0) (bitwise-length . G4edf) (bitwise-if . G4ede) (bitwise-first-bit-set . G4edd) (bitwise-copy-bit-field . G4edc) (bitwise-copy-bit . G4edb) (bitwise-bit-set? . G4eda) (bitwise-bit-field . G4ed9) (bitwise-bit-count . G4ed8) (bitwise-xor . G4ed7) (bitwise-ior . G4ed6) (bitwise-and . G4ed5) (bitwise-not . G4ed4) (bitwise-arithmetic-shift-right . G4ed3) (bitwise-arithmetic-shift-left . G4ed2) (bitwise-arithmetic-shift . G4ed1) (zero? . G4ed0) (vector? . G4ecf) (vector-set! . G4ece) (vector-ref . G4ecd) (vector-map . G4ecc) (vector-length . G4ecb) (vector-for-each . G4eca) (vector-fill! . G4ec9) (vector->list . G4ec8) (vector . G4ec7) (values . G4ec6) (truncate . G4ec5) (tan . G4ec4) (symbol? . G4ec3) (symbol=? . G4ec2) (symbol->string . G4ec1) (substring . G4ec0) (string? . G4ebf) (string>? . G4ebe) (string>=? . G4ebd) (string=? . G4ebc) (string<? . G4ebb) (string<=? . G4eba) (string-ref . G4eb9) (string-length . G4eb8) (string-for-each . G4eb7) (string-copy . G4eb6) (string-append . G4eb5) (string->symbol . G4eb4) (string->number . G4eb3) (string->list . G4eb2) (string . G4eb1) (sqrt . G4eb0) (sin . G4eaf) (round . G4eae) (reverse . G4ead) (real? . G4eac) (real-valued? . G4eab) (real-part . G4eaa) (rationalize . G4ea9) (rational? . G4ea8) (rational-valued? . G4ea7) (procedure? . G4ea6) (positive? . G4ea5) (pair? . G4ea4) (odd? . G4ea3) (numerator . G4ea2) (number? . G4ea1) (number->string . G4ea0) (null? . G4e9f) (not . G4e9e) (negative? . G4e9d) (nan? . G4e9c) (min . G4e9b) (max . G4e9a) (map . G4e99) (make-vector . G4e98) (make-string . G4e97) (make-rectangular . G4e96) (make-polar . G4e95) (magnitude . G4e94) (log . G4e93) (list? . G4e92) (list-tail . G4e91) (list-ref . G4e90) (list->vector . G4e8f) (list->string . G4e8e) (list . G4e8d) (length . G4e8c) (lcm . G4e8b) (integer? . G4e8a) (integer-valued? . G4e89) (integer->char . G4e88) (infinite? . G4e87) (inexact? . G4e86) (inexact . G4e85) (imag-part . G4e84) (gcd . G4e83) (for-each . G4e82) (floor . G4e81) (finite? . G4e80) (expt . G4e7f) (exp . G4e7e) (exact? . G4e7d) (exact-integer-sqrt . G4e7c) (exact . G4e7b) (even? . G4e7a) (error . G4e79) (eqv? . G4e78) (equal? . G4e77) (eq? . G4e76) (dynamic-wind . G4e75) (div0-and-mod0 . G4e74) (mod0 . G4e73) (div0 . G4e72) (div-and-mod . G4e71) (mod . G4e70) (div . G4e6f) (denominator . G4e6e) (cos . G4e6d) (cons . G4e6c) (complex? . G4e6b) (char? . G4e6a) (char>? . G4e69) (char>=? . G4e68) (char=? . G4e67) (char<? . G4e66) (char<=? . G4e65) (char->integer . G4e64) (ceiling . G4e63) (call-with-values . G4e62) (call/cc . G4e61) (call-with-current-continuation . G4e60) (cddddr . G4e5f) (cdddar . G4e5e) (cddadr . G4e5d) (cddaar . G4e5c) (cdaddr . G4e5b) (cdadar . G4e5a) (cdaadr . G4e59) (cdaaar . G4e58) (cadddr . G4e57) (caddar . G4e56) (cadadr . G4e55) (cadaar . G4e54) (caaddr . G4e53) (caadar . G4e52) (caaadr . G4e51) (caaaar . G4e50) (cdddr . G4e4f) (cddar . G4e4e) (cdadr . G4e4d) (cdaar . G4e4c) (caddr . G4e4b) (cadar . G4e4a) (caadr . G4e49) (caaar . G4e48) (cddr . G4e47) (cdar . G4e46) (cadr . G4e45) (caar . G4e44) (cdr . G4e43) (car . G4e42) (boolean? . G4e41) (boolean=? . G4e40) (atan . G4e3f) (assertion-violation . G4e3e) (asin . G4e3d) (apply . G4e3c) (append . G4e3b) (angle . G4e3a) (acos . G4e39) (abs . G4e38) (/ . G4e37) (* . G4e36) (- . G4e35) (+ . G4e34) (>= . G4e33) (> . G4e32) (= . G4e31) (<= . G4e30) (< . G4e2f) (library . G4e2e) (export . G4e2d) (&no-nans . G4e2c) (&no-infinities . G4e2b) (&i/o-encoding . G4e2a) (&i/o-decoding . G4e29) (&i/o-port . G4e28) (&i/o-file-does-not-exist . G4e27) (&i/o-file-already-exists . G4e26) (&i/o-file-is-read-only . G4e25) (&i/o-file-protection . G4e24) (&i/o-filename . G4e23) (&i/o-invalid-position . G4e22) (&i/o-write . G4e21) (&i/o-read . G4e20) (&i/o . G4e1f) (&undefined . G4e1e) (&syntax . G4e1d) (&lexical . G4e1c) (&implementation-restriction . G4e1b) (&non-continuable . G4e1a) (&who . G4e19) (&irritants . G4e18) (&assertion . G4e17) (&violation . G4e16) (&error . G4e15) (&serious . G4e14) (&warning . G4e13) (&message . G4e12) (&condition . G4e11) (define-condition-type . G4e10) (define-enumeration . G4e0f) (define-record-type . G4e0e) (parent-rtd . G4e0d) (nongenerative . G4e0c) (opaque . G4e0b) (sealed . G4e0a) (protocol . G4e09) (parent . G4e08) (immutable . G4e07) (mutable . G4e06) (fields . G4e05) (error-handling-mode . G4e04) (file-options . G4e03) (buffer-mode . G4e02) (eol-style . G4e01) (guard . G4e00) (unsyntax-splicing . G4dfd) (unsyntax . G4dfc) (unquote-splicing . G4dfb) (unquote . G4dfa) (_ . G4df9) (else . G4df8) (=> . G4df7) (... . G4df6) (assert . G4df5) (endianness . G4df4) (do . G4df1) (cond . G4df0) (let* . G4def) (let . G4dee) (let*-values . G4ded) (let-values . G4dec) (identifier-syntax . G4deb) (with-syntax . G4dea) (quasisyntax . G4de9) (quasiquote . G4de8) (syntax-rules . G4de7) (include . G4de6) (record-constructor-descriptor . G4de4) (record-type-descriptor . G4de3) (case . G4de2) (unless . G4de0) (when . G4ddf) (or . G4dde) (and . G4ddd) (if . G4ddc) (letrec* . G4ddb) (letrec . G4dda) (case-lambda . G4dd8) (lambda . G4dd7) (syntax . G4dd6) (syntax-case . G4dd5) (quote . G4dd4) (letrec-syntax . G4dd2) (let-syntax . G4dd1) (set! . G4dd0) (import . G4dcf) (begin . G4dce) (define-syntax . G4dcc) (define . G4dcb)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G509d '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fac) (unquote-splicing . G4dfb) (unquote . G4dfa) (_ . G4df9) (else . G4df8) (=> . G4df7) (... . G4df6) (delay . G4df3) (do . G4df1) (cond . G4df0) (let* . G4def) (let . G4dee) (quasiquote . G4de8) (syntax-rules . G4de7) (case . G4de2) (or . G4dde) (and . G4ddd) (if . G4ddc) (letrec . G4dda) (lambda . G4dd7) (quote . G4dd4) (letrec-syntax . G4dd2) (let-syntax . G4dd1) (set! . G4dd0) (begin . G4dce) (define-syntax . G4dcc) (define . G4dcb)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G509e '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5041) (string-ci>=? . G5040) (string-ci=? . G503f) (string-ci<? . G503e) (string-ci<=? . G503d) (char-whitespace? . G503c) (char-upper-case? . G503b) (char-numeric? . G5039) (char-lower-case? . G5038) (char-upcase . G5036) (char-downcase . G5033) (char-ci>? . G5032) (char-ci>=? . G5031) (char-ci=? . G5030) (char-ci<? . G502f) (char-ci<=? . G502e) (char-alphabetic? . G502d) (call-with-output-file . G5001) (call-with-input-file . G5000) (write-char . G4fff) (write . G4ffe) (with-output-to-file . G4ffd) (with-input-from-file . G4ffc) (read-char . G4ffb) (read . G4ffa) (peek-char . G4ff9) (open-output-file . G4ff8) (open-input-file . G4ff7) (newline . G4ff6) (display . G4ff5) (close-output-port . G4ff4) (close-input-port . G4ff3) (eof-object . G4ff1) (current-output-port . G4fef) (current-input-port . G4fee) (output-port? . G4fed) (input-port? . G4fec) (scheme-report-environment . G3018) (quotient . G4fb2) (null-environment . G3016) (remainder . G4fb1) (modulo . G4fb0) (inexact->exact . G4faf) (force . G4fae) (exact->inexact . G4fad) (make-promise . G4fac) (string-fill! . G4faa) (string-set! . G4fa9) (set-cdr! . G4fa8) (set-car! . G4fa7) (memv . G4fa1) (memq . G4fa0) (member . G4f9e) (assv . G4f96) (assq . G4f95) (assoc . G4f93) (eval . G301c) (zero? . G4ed0) (vector? . G4ecf) (vector-set! . G4ece) (vector-ref . G4ecd) (vector-length . G4ecb) (vector-fill! . G4ec9) (vector->list . G4ec8) (vector . G4ec7) (values . G4ec6) (truncate . G4ec5) (tan . G4ec4) (symbol? . G4ec3) (symbol->string . G4ec1) (substring . G4ec0) (string? . G4ebf) (string>? . G4ebe) (string>=? . G4ebd) (string=? . G4ebc) (string<? . G4ebb) (string<=? . G4eba) (string-ref . G4eb9) (string-length . G4eb8) (string-copy . G4eb6) (string-append . G4eb5) (string->symbol . G4eb4) (string->number . G4eb3) (string->list . G4eb2) (string . G4eb1) (sqrt . G4eb0) (sin . G4eaf) (round . G4eae) (reverse . G4ead) (real? . G4eac) (real-part . G4eaa) (rationalize . G4ea9) (rational? . G4ea8) (procedure? . G4ea6) (positive? . G4ea5) (pair? . G4ea4) (odd? . G4ea3) (numerator . G4ea2) (number? . G4ea1) (number->string . G4ea0) (not . G4e9e) (negative? . G4e9d) (min . G4e9b) (max . G4e9a) (map . G4e99) (make-vector . G4e98) (make-string . G4e97) (make-rectangular . G4e96) (make-polar . G4e95) (magnitude . G4e94) (log . G4e93) (list? . G4e92) (list-tail . G4e91) (list-ref . G4e90) (list->vector . G4e8f) (list->string . G4e8e) (list . G4e8d) (length . G4e8c) (lcm . G4e8b) (integer? . G4e8a) (integer->char . G4e88) (inexact? . G4e86) (imag-part . G4e84) (gcd . G4e83) (for-each . G4e82) (floor . G4e81) (expt . G4e7f) (exp . G4e7e) (exact? . G4e7d) (even? . G4e7a) (eqv? . G4e78) (equal? . G4e77) (eq? . G4e76) (dynamic-wind . G4e75) (denominator . G4e6e) (cos . G4e6d) (cons . G4e6c) (complex? . G4e6b) (char? . G4e6a) (char>? . G4e69) (char>=? . G4e68) (char=? . G4e67) (char<? . G4e66) (char<=? . G4e65) (char->integer . G4e64) (ceiling . G4e63) (call-with-values . G4e62) (call-with-current-continuation . G4e60) (cddddr . G4e5f) (cdddar . G4e5e) (cddadr . G4e5d) (cddaar . G4e5c) (cdaddr . G4e5b) (cdadar . G4e5a) (cdaadr . G4e59) (cdaaar . G4e58) (cadddr . G4e57) (caddar . G4e56) (cadadr . G4e55) (cadaar . G4e54) (caaddr . G4e53) (caadar . G4e52) (caaadr . G4e51) (caaaar . G4e50) (cdddr . G4e4f) (cddar . G4e4e) (cdadr . G4e4d) (cdaar . G4e4c) (caddr . G4e4b) (cadar . G4e4a) (caadr . G4e49) (caaar . G4e48) (cddr . G4e47) (cdar . G4e46) (cadr . G4e45) (caar . G4e44) (cdr . G4e43) (car . G4e42) (boolean? . G4e41) (atan . G4e3f) (asin . G4e3d) (apply . G4e3c) (append . G4e3b) (angle . G4e3a) (acos . G4e39) (abs . G4e38) (/ . G4e37) (* . G4e36) (- . G4e35) (+ . G4e34) (>= . G4e33) (> . G4e32) (= . G4e31) (<= . G4e30) (< . G4e2f) (unquote-splicing . G4dfb) (unquote . G4dfa) (else . G4df8) (=> . G4df7) (... . G4df6) (delay . G4df3) (do . G4df1) (cond . G4df0) (let* . G4def) (let . G4dee) (quasiquote . G4de8) (syntax-rules . G4de7) (case . G4de2) (or . G4dde) (and . G4ddd) (if . G4ddc) (letrec . G4dda) (lambda . G4dd7) (quote . G4dd4) (letrec-syntax . G4dd2) (let-syntax . G4dd1) (set! . G4dd0) (begin . G4dce) (define-syntax . G4dcc) (define . G4dcb)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G509f '(psyntax modules) '() '() '() '() '((module . G4dcd)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a0 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a1 '(rnrs) '(6) '() '() '() '((regexp? . G5094) (string-upcase . G5049) (string-titlecase . G5048) (string-normalize-nfkd . G5047) (string-normalize-nfkc . G5046) (string-normalize-nfd . G5045) (string-normalize-nfc . G5044) (string-foldcase . G5043) (string-downcase . G5042) (string-ci>? . G5041) (string-ci>=? . G5040) (string-ci=? . G503f) (string-ci<? . G503e) (string-ci<=? . G503d) (char-whitespace? . G503c) (char-upper-case? . G503b) (char-title-case? . G503a) (char-numeric? . G5039) (char-lower-case? . G5038) (char-general-category . G5037) (char-upcase . G5036) (char-titlecase . G5035) (char-foldcase . G5034) (char-downcase . G5033) (char-ci>? . G5032) (char-ci>=? . G5031) (char-ci=? . G5030) (char-ci<? . G502f) (char-ci<=? . G502e) (char-alphabetic? . G502d) (make-variable-transformer . G2d8c) (identifier? . G303e) (generate-temporaries . G302a) (free-identifier=? . G302c) (syntax->datum . G3042) (datum->syntax . G3040) (bound-identifier=? . G302e) (record-type-descriptor? . G502c) (record-predicate . G502b) (record-mutator . G502a) (record-constructor . G5029) (record-accessor . G5028) (make-record-type-descriptor . G5027) (make-record-constructor-descriptor . G5026) (record? . G5025) (record-type-uid . G5024) (record-type-sealed? . G5023) (record-type-parent . G5022) (record-type-opaque? . G5021) (record-type-name . G5020) (record-type-generative? . G501f) (record-type-field-names . G501e) (record-rtd . G501d) (record-field-mutable? . G501c) (delete-file . G501b) (file-exists? . G501a) (vector-sort! . G5019) (vector-sort . G5018) (list-sort . G5017) (symbol-hash . G5016) (string-ci-hash . G5015) (string-hash . G5014) (equal-hash . G5013) (hashtable-equivalence-function . G5012) (make-hashtable . G5011) (hashtable-hash-function . G5010) (make-eqv-hashtable . G500f) (make-eq-hashtable . G500e) (hashtable? . G500d) (hashtable-update! . G500c) (hashtable-size . G500b) (hashtable-set! . G500a) (hashtable-ref . G5009) (hashtable-mutable? . G5008) (hashtable-keys . G5007) (hashtable-entries . G5006) (hashtable-delete! . G5005) (hashtable-copy . G5004) (hashtable-contains? . G5003) (hashtable-clear! . G5002) (call-with-output-file . G5001) (call-with-input-file . G5000) (write-char . G4fff) (write . G4ffe) (with-output-to-file . G4ffd) (with-input-from-file . G4ffc) (read-char . G4ffb) (read . G4ffa) (peek-char . G4ff9) (open-output-file . G4ff8) (open-input-file . G4ff7) (newline . G4ff6) (display . G4ff5) (close-output-port . G4ff4) (close-input-port . G4ff3) (eof-object? . G4ff2) (eof-object . G4ff1) (current-error-port . G4ff0) (current-output-port . G4fef) (current-input-port . G4fee) (output-port? . G4fed) (input-port? . G4fec) (utf-8-codec . G4feb) (utf-16-codec . G4fea) (transcoder-error-handling-mode . G4fe9) (transcoder-eol-style . G4fe8) (transcoder-codec . G4fe7) (transcoded-port . G4fe6) (textual-port? . G4fe5) (string->bytevector . G4fe4) (standard-output-port . G4fe3) (standard-input-port . G4fe2) (standard-error-port . G4fe1) (set-port-position! . G4fe0) (put-u8 . G4fdf) (put-string . G4fde) (put-datum . G4fdd) (put-char . G4fdc) (put-bytevector . G4fdb) (port? . G4fda) (port-transcoder . G4fd9) (port-position . G4fd8) (port-has-set-port-position!? . G4fd7) (port-has-port-position? . G4fd6) (port-eof? . G4fd5) (output-port-buffer-mode . G4fd4) (open-string-output-port . G4fd3) (open-string-input-port . G4fd2) (open-file-output-port . G4fd1) (open-file-input/output-port . G4fd0) (open-file-input-port . G4fcf) (open-bytevector-output-port . G4fce) (open-bytevector-input-port . G4fcd) (native-transcoder . G4fcc) (native-eol-style . G4fcb) (make-transcoder . G4fca) (latin-1-codec . G4fc9) (make-i/o-write-error . G4afd) (make-i/o-read-error . G4ae8) (make-i/o-port-error . G4b9b) (make-i/o-invalid-position-error . G4b13) (make-i/o-filename-error . G4b2d) (make-i/o-file-protection-error . G4b46) (make-i/o-file-is-read-only-error . G4b5b) (make-i/o-file-does-not-exist-error . G4b85) (make-i/o-file-already-exists-error . G4b70) (make-i/o-error . G4ad3) (make-i/o-encoding-error . G4bca) (make-i/o-decoding-error . G4bb4) (make-custom-textual-output-port . G4fc8) (make-custom-textual-input/output-port . G4fc7) (make-custom-textual-input-port . G4fc6) (make-custom-binary-output-port . G4fc5) (make-custom-binary-input/output-port . G4fc4) (make-custom-binary-input-port . G4fc3) (make-bytevector . G4fc2) (lookahead-u8 . G4fc1) (lookahead-char . G4fc0) (i/o-write-error? . G4aff) (i/o-read-error? . G4aea) (i/o-port-error? . G4b9f) (i/o-invalid-position-error? . G4b17) (i/o-filename-error? . G4b31) (i/o-file-protection-error? . G4b48) (i/o-file-is-read-only-error? . G4b5d) (i/o-file-does-not-exist-error? . G4b87) (i/o-file-already-exists-error? . G4b72) (i/o-error? . G4ad5) (i/o-error-position . G4b19) (i/o-error-port . G4ba1) (i/o-error-filename . G4b33) (i/o-encoding-error? . G4bce) (i/o-encoding-error-char . G4bd0) (i/o-decoding-error? . G4bb6) (get-u8 . G4fbf) (get-string-n! . G4fbe) (get-string-n . G4fbd) (get-string-all . G4fbc) (get-line . G4fbb) (get-datum . G4fba) (get-char . G4fb9) (get-bytevector-some . G4fb8) (get-bytevector-n! . G4fb7) (get-bytevector-n . G4fb6) (get-bytevector-all . G4fb5) (flush-output-port . G4fb4) (close-port . G4fb3) (exit . G4fab) (command-line . G4cff) (remove . G4fa6) (remv . G4fa5) (remp . G4fa4) (remq . G4fa3) (partition . G4fa2) (memv . G4fa1) (memq . G4fa0) (memp . G4f9f) (member . G4f9e) (exists . G4f9d) (for-all . G4f9c) (fold-right . G4f9b) (fold-left . G4f9a) (find . G4f99) (filter . G4f98) (cons* . G4f97) (assv . G4f96) (assq . G4f95) (assp . G4f94) (assoc . G4f93) (call-with-string-output-port . G4f92) (call-with-port . G4f91) (call-with-bytevector-output-port . G4f90) (bytevector->string . G4f8f) (buffer-mode? . G4f8e) (binary-port? . G4f8d) (with-exception-handler . G4f8c) (raise-continuable . G4f8b) (raise . G4f8a) (make-enumeration . G4f89) (enum-set=? . G4f88) (enum-set-universe . G4f87) (enum-set-union . G4f86) (enum-set-subset? . G4f85) (enum-set-projection . G4f84) (enum-set-member? . G4f83) (enum-set-intersection . G4f82) (enum-set-indexer . G4f81) (enum-set-difference . G4f80) (enum-set-constructor . G4f7f) (enum-set-complement . G4f7e) (enum-set->list . G4f7d) (who-condition? . G4a4b) (warning? . G49c5) (violation? . G4a04) (undefined-violation? . G4ac0) (syntax-violation? . G4aa7) (syntax-violation-subform . G4aab) (syntax-violation-form . G4aa9) (syntax-violation . G303c) (simple-conditions . G4f7c) (serious-condition? . G49da) (non-continuable-violation? . G4a62) (message-condition? . G49ae) (make-who-condition . G4a47) (make-warning . G49c3) (make-violation . G4a02) (make-undefined-violation . G4abe) (make-syntax-violation . G4aa1) (make-serious-condition . G49d8) (make-non-continuable-violation . G4a60) (make-message-condition . G49aa) (make-lexical-violation . G4a8a) (make-irritants-condition . G4a2d) (make-implementation-restriction-violation . G4a75) (make-error . G49ed) (make-assertion-violation . G4a17) (lexical-violation? . G4a8c) (irritants-condition? . G4a31) (implementation-restriction-violation? . G4a77) (error? . G49ef) (condition-who . G4a4d) (condition-predicate . G4f7b) (condition-message . G49b0) (condition-irritants . G4a33) (condition-accessor . G4f7a) (condition . G4f79) (assertion-violation? . G4a19) (condition? . G4f78) (utf32->string . G4f77) (utf16->string . G4f76) (utf8->string . G4f75) (uint-list->bytevector . G4f74) (u8-list->bytevector . G4f73) (string->utf8 . G4f72) (string->utf32 . G4f71) (string->utf16 . G4f70) (sint-list->bytevector . G4f6f) (native-endianness . G4f6e) (bytevector? . G4f6d) (bytevector=? . G4f6c) (bytevector-uint-set! . G4f6b) (bytevector-uint-ref . G4f6a) (bytevector-u8-set! . G4f69) (bytevector-u8-ref . G4f68) (bytevector-u64-set! . G4f67) (bytevector-u64-ref . G4f66) (bytevector-u64-native-set! . G4f65) (bytevector-u64-native-ref . G4f64) (bytevector-u32-set! . G4f63) (bytevector-u32-ref . G4f62) (bytevector-u32-native-set! . G4f61) (bytevector-u32-native-ref . G4f60) (bytevector-u16-set! . G4f5f) (bytevector-u16-ref . G4f5e) (bytevector-u16-native-set! . G4f5d) (bytevector-u16-native-ref . G4f5c) (bytevector-sint-set! . G4f5b) (bytevector-sint-ref . G4f5a) (bytevector-s8-set! . G4f59) (bytevector-s8-ref . G4f58) (bytevector-s64-set! . G4f57) (bytevector-s64-ref . G4f56) (bytevector-s64-native-set! . G4f55) (bytevector-s64-native-ref . G4f54) (bytevector-s32-set! . G4f53) (bytevector-s32-ref . G4f52) (bytevector-s32-native-set! . G4f51) (bytevector-s32-native-ref . G4f50) (bytevector-s16-set! . G4f4f) (bytevector-s16-ref . G4f4e) (bytevector-s16-native-set! . G4f4d) (bytevector-s16-native-ref . G4f4c) (bytevector-length . G4f4b) (bytevector-ieee-single-ref . G4f4a) (bytevector-ieee-single-set! . G4f49) (bytevector-ieee-single-native-set! . G4f48) (bytevector-ieee-single-native-ref . G4f47) (bytevector-ieee-double-set! . G4f46) (bytevector-ieee-double-ref . G4f45) (bytevector-ieee-double-native-set! . G4f44) (bytevector-ieee-double-native-ref . G4f43) (bytevector-fill! . G4f42) (bytevector-copy! . G4f41) (bytevector-copy . G4f40) (bytevector->uint-list . G4f3f) (bytevector->u8-list . G4f3e) (bytevector->sint-list . G4f3d) (no-nans-violation? . G4bfa) (no-infinities-violation? . G4be5) (make-no-nans-violation . G4bf8) (make-no-infinities-violation . G4be3) (real->flonum . G4f3c) (flzero? . G4f3b) (fltruncate . G4f3a) (fltan . G4f39) (flsqrt . G4f38) (flsin . G4f37) (flround . G4f36) (flpositive? . G4f35) (flonum? . G4f34) (flodd? . G4f33) (flnumerator . G4f32) (flnegative? . G4f31) (flnan? . G4f30) (flmod0 . G4f2f) (flmod . G4f2e) (flmin . G4f2d) (flmax . G4f2c) (fllog . G4f2b) (flinteger? . G4f2a) (flinfinite? . G4f29) (flfloor . G4f28) (flfinite? . G4f27) (flexpt . G4f26) (flexp . G4f25) (fleven? . G4f24) (fldiv0-and-mod0 . G4f23) (fldiv0 . G4f22) (fldiv-and-mod . G4f21) (fldiv . G4f20) (fldenominator . G4f1f) (flcos . G4f1e) (flceiling . G4f1d) (flatan . G4f1c) (flasin . G4f1b) (flacos . G4f1a) (flabs . G4f19) (fl>? . G4f18) (fl>=? . G4f17) (fl=? . G4f16) (fl<? . G4f15) (fl<=? . G4f14) (fl/ . G4f13) (fl- . G4f12) (fl+ . G4f11) (fl* . G4f10) (fixnum->flonum . G4f0f) (fxzero? . G4f0e) (fxxor . G4f0d) (fxrotate-bit-field . G4f0c) (fxreverse-bit-field . G4f0b) (fxpositive? . G4f0a) (fxodd? . G4f09) (fxnot . G4f08) (fxnegative? . G4f07) (fxmod0 . G4f06) (fxmod . G4f05) (fxmin . G4f04) (fxmax . G4f03) (fxlength . G4f02) (fxior . G4f01) (fxif . G4f00) (fxfirst-bit-set . G4eff) (fxeven? . G4efe) (fxdiv0-and-mod0 . G4efd) (fxdiv0 . G4efc) (fxdiv-and-mod . G4efb) (fxdiv . G4efa) (fxcopy-bit-field . G4ef9) (fxcopy-bit . G4ef8) (fxbit-set? . G4ef7) (fxbit-field . G4ef6) (fxbit-count . G4ef5) (fxarithmetic-shift-right . G4ef4) (fxarithmetic-shift-left . G4ef3) (fxarithmetic-shift . G4ef2) (fxand . G4ef1) (fx>? . G4ef0) (fx>=? . G4eef) (fx=? . G4eee) (fx<? . G4eed) (fx<=? . G4eec) (fx-/carry . G4eeb) (fx- . G4eea) (fx+/carry . G4ee9) (fx+ . G4ee8) (fx*/carry . G4ee7) (fx* . G4ee6) (greatest-fixnum . G4ee5) (least-fixnum . G4ee4) (fixnum-width . G4ee3) (fixnum? . G4ee2) (bitwise-rotate-bit-field . G4ee1) (bitwise-reverse-bit-field . G4ee0) (bitwise-length . G4edf) (bitwise-if . G4ede) (bitwise-first-bit-set . G4edd) (bitwise-copy-bit-field . G4edc) (bitwise-copy-bit . G4edb) (bitwise-bit-set? . G4eda) (bitwise-bit-field . G4ed9) (bitwise-bit-count . G4ed8) (bitwise-xor . G4ed7) (bitwise-ior . G4ed6) (bitwise-and . G4ed5) (bitwise-not . G4ed4) (bitwise-arithmetic-shift-right . G4ed3) (bitwise-arithmetic-shift-left . G4ed2) (bitwise-arithmetic-shift . G4ed1) (zero? . G4ed0) (vector? . G4ecf) (vector-set! . G4ece) (vector-ref . G4ecd) (vector-map . G4ecc) (vector-length . G4ecb) (vector-for-each . G4eca) (vector-fill! . G4ec9) (vector->list . G4ec8) (vector . G4ec7) (values . G4ec6) (truncate . G4ec5) (tan . G4ec4) (symbol? . G4ec3) (symbol=? . G4ec2) (symbol->string . G4ec1) (substring . G4ec0) (string? . G4ebf) (string>? . G4ebe) (string>=? . G4ebd) (string=? . G4ebc) (string<? . G4ebb) (string<=? . G4eba) (string-ref . G4eb9) (string-length . G4eb8) (string-for-each . G4eb7) (string-copy . G4eb6) (string-append . G4eb5) (string->symbol . G4eb4) (string->number . G4eb3) (string->list . G4eb2) (string . G4eb1) (sqrt . G4eb0) (sin . G4eaf) (round . G4eae) (reverse . G4ead) (real? . G4eac) (real-valued? . G4eab) (real-part . G4eaa) (rationalize . G4ea9) (rational? . G4ea8) (rational-valued? . G4ea7) (procedure? . G4ea6) (positive? . G4ea5) (pair? . G4ea4) (odd? . G4ea3) (numerator . G4ea2) (number? . G4ea1) (number->string . G4ea0) (null? . G4e9f) (not . G4e9e) (negative? . G4e9d) (nan? . G4e9c) (min . G4e9b) (max . G4e9a) (map . G4e99) (make-vector . G4e98) (make-string . G4e97) (make-rectangular . G4e96) (make-polar . G4e95) (magnitude . G4e94) (log . G4e93) (list? . G4e92) (list-tail . G4e91) (list-ref . G4e90) (list->vector . G4e8f) (list->string . G4e8e) (list . G4e8d) (length . G4e8c) (lcm . G4e8b) (integer? . G4e8a) (integer-valued? . G4e89) (integer->char . G4e88) (infinite? . G4e87) (inexact? . G4e86) (inexact . G4e85) (imag-part . G4e84) (gcd . G4e83) (for-each . G4e82) (floor . G4e81) (finite? . G4e80) (expt . G4e7f) (exp . G4e7e) (exact? . G4e7d) (exact-integer-sqrt . G4e7c) (exact . G4e7b) (even? . G4e7a) (error . G4e79) (eqv? . G4e78) (equal? . G4e77) (eq? . G4e76) (dynamic-wind . G4e75) (div0-and-mod0 . G4e74) (mod0 . G4e73) (div0 . G4e72) (div-and-mod . G4e71) (mod . G4e70) (div . G4e6f) (denominator . G4e6e) (cos . G4e6d) (cons . G4e6c) (complex? . G4e6b) (char? . G4e6a) (char>? . G4e69) (char>=? . G4e68) (char=? . G4e67) (char<? . G4e66) (char<=? . G4e65) (char->integer . G4e64) (ceiling . G4e63) (call-with-values . G4e62) (call/cc . G4e61) (call-with-current-continuation . G4e60) (cddddr . G4e5f) (cdddar . G4e5e) (cddadr . G4e5d) (cddaar . G4e5c) (cdaddr . G4e5b) (cdadar . G4e5a) (cdaadr . G4e59) (cdaaar . G4e58) (cadddr . G4e57) (caddar . G4e56) (cadadr . G4e55) (cadaar . G4e54) (caaddr . G4e53) (caadar . G4e52) (caaadr . G4e51) (caaaar . G4e50) (cdddr . G4e4f) (cddar . G4e4e) (cdadr . G4e4d) (cdaar . G4e4c) (caddr . G4e4b) (cadar . G4e4a) (caadr . G4e49) (caaar . G4e48) (cddr . G4e47) (cdar . G4e46) (cadr . G4e45) (caar . G4e44) (cdr . G4e43) (car . G4e42) (boolean? . G4e41) (boolean=? . G4e40) (atan . G4e3f) (assertion-violation . G4e3e) (asin . G4e3d) (apply . G4e3c) (append . G4e3b) (angle . G4e3a) (acos . G4e39) (abs . G4e38) (/ . G4e37) (* . G4e36) (- . G4e35) (+ . G4e34) (>= . G4e33) (> . G4e32) (= . G4e31) (<= . G4e30) (< . G4e2f) (&no-nans . G4e2c) (&no-infinities . G4e2b) (&i/o-encoding . G4e2a) (&i/o-decoding . G4e29) (&i/o-port . G4e28) (&i/o-file-does-not-exist . G4e27) (&i/o-file-already-exists . G4e26) (&i/o-file-is-read-only . G4e25) (&i/o-file-protection . G4e24) (&i/o-filename . G4e23) (&i/o-invalid-position . G4e22) (&i/o-write . G4e21) (&i/o-read . G4e20) (&i/o . G4e1f) (&undefined . G4e1e) (&syntax . G4e1d) (&lexical . G4e1c) (&implementation-restriction . G4e1b) (&non-continuable . G4e1a) (&who . G4e19) (&irritants . G4e18) (&assertion . G4e17) (&violation . G4e16) (&error . G4e15) (&serious . G4e14) (&warning . G4e13) (&message . G4e12) (&condition . G4e11) (define-condition-type . G4e10) (define-enumeration . G4e0f) (define-record-type . G4e0e) (parent-rtd . G4e0d) (nongenerative . G4e0c) (opaque . G4e0b) (sealed . G4e0a) (protocol . G4e09) (parent . G4e08) (immutable . G4e07) (mutable . G4e06) (fields . G4e05) (error-handling-mode . G4e04) (file-options . G4e03) (buffer-mode . G4e02) (eol-style . G4e01) (guard . G4e00) (unsyntax-splicing . G4dfd) (unsyntax . G4dfc) (unquote-splicing . G4dfb) (unquote . G4dfa) (_ . G4df9) (else . G4df8) (=> . G4df7) (... . G4df6) (assert . G4df5) (endianness . G4df4) (do . G4df1) (cond . G4df0) (let* . G4def) (let . G4dee) (let*-values . G4ded) (let-values . G4dec) (identifier-syntax . G4deb) (with-syntax . G4dea) (quasisyntax . G4de9) (quasiquote . G4de8) (syntax-rules . G4de7) (record-constructor-descriptor . G4de4) (record-type-descriptor . G4de3) (case . G4de2) (unless . G4de0) (when . G4ddf) (or . G4dde) (and . G4ddd) (if . G4ddc) (letrec* . G4ddb) (letrec . G4dda) (case-lambda . G4dd8) (lambda . G4dd7) (syntax . G4dd6) (syntax-case . G4dd5) (quote . G4dd4) (letrec-syntax . G4dd2) (let-syntax . G4dd1) (set! . G4dd0) (begin . G4dce) (define-syntax . G4dcc) (define . G4dcb)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a2 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3018) (quotient . G4fb2) (null-environment . G3016) (remainder . G4fb1) (modulo . G4fb0) (inexact->exact . G4faf) (force . G4fae) (exact->inexact . G4fad) (make-promise . G4fac) (delay . G4df3)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a3 '(rnrs control) '(6) '() '() '() '((do . G4df1) (unless . G4de0) (when . G4ddf) (case-lambda . G4dd8)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a4 '(rnrs eval) '(6) '() '() '() '((eval . G301c) (environment . G3014)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a5 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fa8) (set-car! . G4fa7)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a6 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4faa) (string-set! . G4fa9)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a7 '(rnrs programs) '(6) '() '() '() '((exit . G4fab) (command-line . G4cff)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a8 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d8c) (identifier? . G303e) (generate-temporaries . G302a) (free-identifier=? . G302c) (syntax->datum . G3042) (datum->syntax . G3040) (bound-identifier=? . G302e) (syntax-violation . G303c) (unsyntax-splicing . G4dfd) (unsyntax . G4dfc) (_ . G4df9) (... . G4df6) (with-syntax . G4dea) (quasisyntax . G4de9) (syntax . G4dd6) (syntax-case . G4dd5)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50a9 '(rnrs files) '(6) '() '() '() '((delete-file . G501b) (file-exists? . G501a) (make-i/o-write-error . G4afd) (make-i/o-read-error . G4ae8) (make-i/o-port-error . G4b9b) (make-i/o-invalid-position-error . G4b13) (make-i/o-filename-error . G4b2d) (make-i/o-file-protection-error . G4b46) (make-i/o-file-is-read-only-error . G4b5b) (make-i/o-file-does-not-exist-error . G4b85) (make-i/o-file-already-exists-error . G4b70) (make-i/o-error . G4ad3) (i/o-write-error? . G4aff) (i/o-read-error? . G4aea) (i/o-port-error? . G4b9f) (i/o-invalid-position-error? . G4b17) (i/o-filename-error? . G4b31) (i/o-file-protection-error? . G4b48) (i/o-file-is-read-only-error? . G4b5d) (i/o-file-does-not-exist-error? . G4b87) (i/o-file-already-exists-error? . G4b72) (i/o-error? . G4ad5) (i/o-error-position . G4b19) (i/o-error-port . G4ba1) (i/o-error-filename . G4b33) (&i/o-port . G4e28) (&i/o-file-does-not-exist . G4e27) (&i/o-file-already-exists . G4e26) (&i/o-file-is-read-only . G4e25) (&i/o-file-protection . G4e24) (&i/o-filename . G4e23) (&i/o-invalid-position . G4e22) (&i/o-write . G4e21) (&i/o-read . G4e20) (&i/o . G4e1f)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50aa '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5019) (vector-sort . G5018) (list-sort . G5017)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50ab '(rnrs base) '(6) '() '() '() '((zero? . G4ed0) (vector? . G4ecf) (vector-set! . G4ece) (vector-ref . G4ecd) (vector-map . G4ecc) (vector-length . G4ecb) (vector-for-each . G4eca) (vector-fill! . G4ec9) (vector->list . G4ec8) (vector . G4ec7) (values . G4ec6) (truncate . G4ec5) (tan . G4ec4) (symbol? . G4ec3) (symbol=? . G4ec2) (symbol->string . G4ec1) (substring . G4ec0) (string? . G4ebf) (string>? . G4ebe) (string>=? . G4ebd) (string=? . G4ebc) (string<? . G4ebb) (string<=? . G4eba) (string-ref . G4eb9) (string-length . G4eb8) (string-for-each . G4eb7) (string-copy . G4eb6) (string-append . G4eb5) (string->symbol . G4eb4) (string->number . G4eb3) (string->list . G4eb2) (string . G4eb1) (sqrt . G4eb0) (sin . G4eaf) (round . G4eae) (reverse . G4ead) (real? . G4eac) (real-valued? . G4eab) (real-part . G4eaa) (rationalize . G4ea9) (rational? . G4ea8) (rational-valued? . G4ea7) (procedure? . G4ea6) (positive? . G4ea5) (pair? . G4ea4) (odd? . G4ea3) (numerator . G4ea2) (number? . G4ea1) (number->string . G4ea0) (null? . G4e9f) (not . G4e9e) (negative? . G4e9d) (nan? . G4e9c) (min . G4e9b) (max . G4e9a) (map . G4e99) (make-vector . G4e98) (make-string . G4e97) (make-rectangular . G4e96) (make-polar . G4e95) (magnitude . G4e94) (log . G4e93) (list? . G4e92) (list-tail . G4e91) (list-ref . G4e90) (list->vector . G4e8f) (list->string . G4e8e) (list . G4e8d) (length . G4e8c) (lcm . G4e8b) (integer? . G4e8a) (integer-valued? . G4e89) (integer->char . G4e88) (infinite? . G4e87) (inexact? . G4e86) (inexact . G4e85) (imag-part . G4e84) (gcd . G4e83) (for-each . G4e82) (floor . G4e81) (finite? . G4e80) (expt . G4e7f) (exp . G4e7e) (exact? . G4e7d) (exact-integer-sqrt . G4e7c) (exact . G4e7b) (even? . G4e7a) (error . G4e79) (eqv? . G4e78) (equal? . G4e77) (eq? . G4e76) (dynamic-wind . G4e75) (div0-and-mod0 . G4e74) (mod0 . G4e73) (div0 . G4e72) (div-and-mod . G4e71) (mod . G4e70) (div . G4e6f) (denominator . G4e6e) (cos . G4e6d) (cons . G4e6c) (complex? . G4e6b) (char? . G4e6a) (char>? . G4e69) (char>=? . G4e68) (char=? . G4e67) (char<? . G4e66) (char<=? . G4e65) (char->integer . G4e64) (ceiling . G4e63) (call-with-values . G4e62) (call/cc . G4e61) (call-with-current-continuation . G4e60) (cddddr . G4e5f) (cdddar . G4e5e) (cddadr . G4e5d) (cddaar . G4e5c) (cdaddr . G4e5b) (cdadar . G4e5a) (cdaadr . G4e59) (cdaaar . G4e58) (cadddr . G4e57) (caddar . G4e56) (cadadr . G4e55) (cadaar . G4e54) (caaddr . G4e53) (caadar . G4e52) (caaadr . G4e51) (caaaar . G4e50) (cdddr . G4e4f) (cddar . G4e4e) (cdadr . G4e4d) (cdaar . G4e4c) (caddr . G4e4b) (cadar . G4e4a) (caadr . G4e49) (caaar . G4e48) (cddr . G4e47) (cdar . G4e46) (cadr . G4e45) (caar . G4e44) (cdr . G4e43) (car . G4e42) (boolean? . G4e41) (boolean=? . G4e40) (atan . G4e3f) (assertion-violation . G4e3e) (asin . G4e3d) (apply . G4e3c) (append . G4e3b) (angle . G4e3a) (acos . G4e39) (abs . G4e38) (/ . G4e37) (* . G4e36) (- . G4e35) (+ . G4e34) (>= . G4e33) (> . G4e32) (= . G4e31) (<= . G4e30) (< . G4e2f) (unquote-splicing . G4dfb) (unquote . G4dfa) (_ . G4df9) (else . G4df8) (=> . G4df7) (... . G4df6) (assert . G4df5) (cond . G4df0) (let* . G4def) (let . G4dee) (let*-values . G4ded) (let-values . G4dec) (identifier-syntax . G4deb) (quasiquote . G4de8) (syntax-rules . G4de7) (case . G4de2) (or . G4dde) (and . G4ddd) (if . G4ddc) (letrec* . G4ddb) (letrec . G4dda) (lambda . G4dd7) (quote . G4dd4) (letrec-syntax . G4dd2) (let-syntax . G4dd1) (set! . G4dd0) (begin . G4dce) (define-syntax . G4dcc) (define . G4dcb)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50ac '(rnrs lists) '(6) '() '() '() '((remove . G4fa6) (remv . G4fa5) (remp . G4fa4) (remq . G4fa3) (partition . G4fa2) (memv . G4fa1) (memq . G4fa0) (memp . G4f9f) (member . G4f9e) (exists . G4f9d) (for-all . G4f9c) (fold-right . G4f9b) (fold-left . G4f9a) (find . G4f99) (filter . G4f98) (cons* . G4f97) (assv . G4f96) (assq . G4f95) (assp . G4f94) (assoc . G4f93)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50ad '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5001) (call-with-input-file . G5000) (write-char . G4fff) (write . G4ffe) (with-output-to-file . G4ffd) (with-input-from-file . G4ffc) (read-char . G4ffb) (read . G4ffa) (peek-char . G4ff9) (open-output-file . G4ff8) (open-input-file . G4ff7) (newline . G4ff6) (display . G4ff5) (close-output-port . G4ff4) (close-input-port . G4ff3) (eof-object? . G4ff2) (eof-object . G4ff1) (current-error-port . G4ff0) (current-output-port . G4fef) (current-input-port . G4fee) (output-port? . G4fed) (input-port? . G4fec) (make-i/o-write-error . G4afd) (make-i/o-read-error . G4ae8) (make-i/o-port-error . G4b9b) (make-i/o-invalid-position-error . G4b13) (make-i/o-filename-error . G4b2d) (make-i/o-file-protection-error . G4b46) (make-i/o-file-is-read-only-error . G4b5b) (make-i/o-file-does-not-exist-error . G4b85) (make-i/o-file-already-exists-error . G4b70) (make-i/o-error . G4ad3) (i/o-write-error? . G4aff) (i/o-read-error? . G4aea) (i/o-port-error? . G4b9f) (i/o-invalid-position-error? . G4b17) (i/o-filename-error? . G4b31) (i/o-file-protection-error? . G4b48) (i/o-file-is-read-only-error? . G4b5d) (i/o-file-does-not-exist-error? . G4b87) (i/o-file-already-exists-error? . G4b72) (i/o-error? . G4ad5) (i/o-error-position . G4b19) (i/o-error-port . G4ba1) (i/o-error-filename . G4b33) (&i/o-port . G4e28) (&i/o-file-does-not-exist . G4e27) (&i/o-file-already-exists . G4e26) (&i/o-file-is-read-only . G4e25) (&i/o-file-protection . G4e24) (&i/o-filename . G4e23) (&i/o-invalid-position . G4e22) (&i/o-write . G4e21) (&i/o-read . G4e20) (&i/o . G4e1f)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50ae '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fc2) (utf32->string . G4f77) (utf16->string . G4f76) (utf8->string . G4f75) (uint-list->bytevector . G4f74) (u8-list->bytevector . G4f73) (string->utf8 . G4f72) (string->utf32 . G4f71) (string->utf16 . G4f70) (sint-list->bytevector . G4f6f) (native-endianness . G4f6e) (bytevector? . G4f6d) (bytevector=? . G4f6c) (bytevector-uint-set! . G4f6b) (bytevector-uint-ref . G4f6a) (bytevector-u8-set! . G4f69) (bytevector-u8-ref . G4f68) (bytevector-u64-set! . G4f67) (bytevector-u64-ref . G4f66) (bytevector-u64-native-set! . G4f65) (bytevector-u64-native-ref . G4f64) (bytevector-u32-set! . G4f63) (bytevector-u32-ref . G4f62) (bytevector-u32-native-set! . G4f61) (bytevector-u32-native-ref . G4f60) (bytevector-u16-set! . G4f5f) (bytevector-u16-ref . G4f5e) (bytevector-u16-native-set! . G4f5d) (bytevector-u16-native-ref . G4f5c) (bytevector-sint-set! . G4f5b) (bytevector-sint-ref . G4f5a) (bytevector-s8-set! . G4f59) (bytevector-s8-ref . G4f58) (bytevector-s64-set! . G4f57) (bytevector-s64-ref . G4f56) (bytevector-s64-native-set! . G4f55) (bytevector-s64-native-ref . G4f54) (bytevector-s32-set! . G4f53) (bytevector-s32-ref . G4f52) (bytevector-s32-native-set! . G4f51) (bytevector-s32-native-ref . G4f50) (bytevector-s16-set! . G4f4f) (bytevector-s16-ref . G4f4e) (bytevector-s16-native-set! . G4f4d) (bytevector-s16-native-ref . G4f4c) (bytevector-length . G4f4b) (bytevector-ieee-single-ref . G4f4a) (bytevector-ieee-single-set! . G4f49) (bytevector-ieee-single-native-set! . G4f48) (bytevector-ieee-single-native-ref . G4f47) (bytevector-ieee-double-set! . G4f46) (bytevector-ieee-double-ref . G4f45) (bytevector-ieee-double-native-set! . G4f44) (bytevector-ieee-double-native-ref . G4f43) (bytevector-fill! . G4f42) (bytevector-copy! . G4f41) (bytevector-copy . G4f40) (bytevector->uint-list . G4f3f) (bytevector->u8-list . G4f3e) (bytevector->sint-list . G4f3d) (endianness . G4df4)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50af '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5049) (string-titlecase . G5048) (string-normalize-nfkd . G5047) (string-normalize-nfkc . G5046) (string-normalize-nfd . G5045) (string-normalize-nfc . G5044) (string-foldcase . G5043) (string-downcase . G5042) (string-ci>? . G5041) (string-ci>=? . G5040) (string-ci=? . G503f) (string-ci<? . G503e) (string-ci<=? . G503d) (char-whitespace? . G503c) (char-upper-case? . G503b) (char-title-case? . G503a) (char-numeric? . G5039) (char-lower-case? . G5038) (char-general-category . G5037) (char-upcase . G5036) (char-titlecase . G5035) (char-foldcase . G5034) (char-downcase . G5033) (char-ci>? . G5032) (char-ci>=? . G5031) (char-ci=? . G5030) (char-ci<? . G502f) (char-ci<=? . G502e) (char-alphabetic? . G502d)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b0 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f8c) (raise-continuable . G4f8b) (raise . G4f8a) (guard . G4e00) (else . G4df8) (=> . G4df7)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b1 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ee1) (bitwise-reverse-bit-field . G4ee0) (bitwise-length . G4edf) (bitwise-if . G4ede) (bitwise-first-bit-set . G4edd) (bitwise-copy-bit-field . G4edc) (bitwise-copy-bit . G4edb) (bitwise-bit-set? . G4eda) (bitwise-bit-field . G4ed9) (bitwise-bit-count . G4ed8) (bitwise-xor . G4ed7) (bitwise-ior . G4ed6) (bitwise-and . G4ed5) (bitwise-not . G4ed4) (bitwise-arithmetic-shift-right . G4ed3) (bitwise-arithmetic-shift-left . G4ed2) (bitwise-arithmetic-shift . G4ed1)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b2 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f0e) (fxxor . G4f0d) (fxrotate-bit-field . G4f0c) (fxreverse-bit-field . G4f0b) (fxpositive? . G4f0a) (fxodd? . G4f09) (fxnot . G4f08) (fxnegative? . G4f07) (fxmod0 . G4f06) (fxmod . G4f05) (fxmin . G4f04) (fxmax . G4f03) (fxlength . G4f02) (fxior . G4f01) (fxif . G4f00) (fxfirst-bit-set . G4eff) (fxeven? . G4efe) (fxdiv0-and-mod0 . G4efd) (fxdiv0 . G4efc) (fxdiv-and-mod . G4efb) (fxdiv . G4efa) (fxcopy-bit-field . G4ef9) (fxcopy-bit . G4ef8) (fxbit-set? . G4ef7) (fxbit-field . G4ef6) (fxbit-count . G4ef5) (fxarithmetic-shift-right . G4ef4) (fxarithmetic-shift-left . G4ef3) (fxarithmetic-shift . G4ef2) (fxand . G4ef1) (fx>? . G4ef0) (fx>=? . G4eef) (fx=? . G4eee) (fx<? . G4eed) (fx<=? . G4eec) (fx-/carry . G4eeb) (fx- . G4eea) (fx+/carry . G4ee9) (fx+ . G4ee8) (fx*/carry . G4ee7) (fx* . G4ee6) (greatest-fixnum . G4ee5) (least-fixnum . G4ee4) (fixnum-width . G4ee3) (fixnum? . G4ee2)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b3 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4bfa) (no-infinities-violation? . G4be5) (make-no-nans-violation . G4bf8) (make-no-infinities-violation . G4be3) (real->flonum . G4f3c) (flzero? . G4f3b) (fltruncate . G4f3a) (fltan . G4f39) (flsqrt . G4f38) (flsin . G4f37) (flround . G4f36) (flpositive? . G4f35) (flonum? . G4f34) (flodd? . G4f33) (flnumerator . G4f32) (flnegative? . G4f31) (flnan? . G4f30) (flmod0 . G4f2f) (flmod . G4f2e) (flmin . G4f2d) (flmax . G4f2c) (fllog . G4f2b) (flinteger? . G4f2a) (flinfinite? . G4f29) (flfloor . G4f28) (flfinite? . G4f27) (flexpt . G4f26) (flexp . G4f25) (fleven? . G4f24) (fldiv0-and-mod0 . G4f23) (fldiv0 . G4f22) (fldiv-and-mod . G4f21) (fldiv . G4f20) (fldenominator . G4f1f) (flcos . G4f1e) (flceiling . G4f1d) (flatan . G4f1c) (flasin . G4f1b) (flacos . G4f1a) (flabs . G4f19) (fl>? . G4f18) (fl>=? . G4f17) (fl=? . G4f16) (fl<? . G4f15) (fl<=? . G4f14) (fl/ . G4f13) (fl- . G4f12) (fl+ . G4f11) (fl* . G4f10) (fixnum->flonum . G4f0f) (&no-nans . G4e2c) (&no-infinities . G4e2b)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b4 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5016) (string-ci-hash . G5015) (string-hash . G5014) (equal-hash . G5013) (hashtable-equivalence-function . G5012) (make-hashtable . G5011) (hashtable-hash-function . G5010) (make-eqv-hashtable . G500f) (make-eq-hashtable . G500e) (hashtable? . G500d) (hashtable-update! . G500c) (hashtable-size . G500b) (hashtable-set! . G500a) (hashtable-ref . G5009) (hashtable-mutable? . G5008) (hashtable-keys . G5007) (hashtable-entries . G5006) (hashtable-delete! . G5005) (hashtable-copy . G5004) (hashtable-contains? . G5003) (hashtable-clear! . G5002)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b5 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ff2) (eof-object . G4ff1) (current-error-port . G4ff0) (current-output-port . G4fef) (current-input-port . G4fee) (output-port? . G4fed) (input-port? . G4fec) (utf-8-codec . G4feb) (utf-16-codec . G4fea) (transcoder-error-handling-mode . G4fe9) (transcoder-eol-style . G4fe8) (transcoder-codec . G4fe7) (transcoded-port . G4fe6) (textual-port? . G4fe5) (string->bytevector . G4fe4) (standard-output-port . G4fe3) (standard-input-port . G4fe2) (standard-error-port . G4fe1) (set-port-position! . G4fe0) (put-u8 . G4fdf) (put-string . G4fde) (put-datum . G4fdd) (put-char . G4fdc) (put-bytevector . G4fdb) (port? . G4fda) (port-transcoder . G4fd9) (port-position . G4fd8) (port-has-set-port-position!? . G4fd7) (port-has-port-position? . G4fd6) (port-eof? . G4fd5) (output-port-buffer-mode . G4fd4) (open-string-output-port . G4fd3) (open-string-input-port . G4fd2) (open-file-output-port . G4fd1) (open-file-input/output-port . G4fd0) (open-file-input-port . G4fcf) (open-bytevector-output-port . G4fce) (open-bytevector-input-port . G4fcd) (native-transcoder . G4fcc) (native-eol-style . G4fcb) (make-transcoder . G4fca) (latin-1-codec . G4fc9) (make-i/o-write-error . G4afd) (make-i/o-read-error . G4ae8) (make-i/o-port-error . G4b9b) (make-i/o-invalid-position-error . G4b13) (make-i/o-filename-error . G4b2d) (make-i/o-file-protection-error . G4b46) (make-i/o-file-is-read-only-error . G4b5b) (make-i/o-file-does-not-exist-error . G4b85) (make-i/o-file-already-exists-error . G4b70) (make-i/o-error . G4ad3) (make-i/o-encoding-error . G4bca) (make-i/o-decoding-error . G4bb4) (make-custom-textual-output-port . G4fc8) (make-custom-textual-input/output-port . G4fc7) (make-custom-textual-input-port . G4fc6) (make-custom-binary-output-port . G4fc5) (make-custom-binary-input/output-port . G4fc4) (make-custom-binary-input-port . G4fc3) (lookahead-u8 . G4fc1) (lookahead-char . G4fc0) (i/o-write-error? . G4aff) (i/o-read-error? . G4aea) (i/o-port-error? . G4b9f) (i/o-invalid-position-error? . G4b17) (i/o-filename-error? . G4b31) (i/o-file-protection-error? . G4b48) (i/o-file-is-read-only-error? . G4b5d) (i/o-file-does-not-exist-error? . G4b87) (i/o-file-already-exists-error? . G4b72) (i/o-error? . G4ad5) (i/o-error-position . G4b19) (i/o-error-port . G4ba1) (i/o-error-filename . G4b33) (i/o-encoding-error? . G4bce) (i/o-encoding-error-char . G4bd0) (i/o-decoding-error? . G4bb6) (get-u8 . G4fbf) (get-string-n! . G4fbe) (get-string-n . G4fbd) (get-string-all . G4fbc) (get-line . G4fbb) (get-datum . G4fba) (get-char . G4fb9) (get-bytevector-some . G4fb8) (get-bytevector-n! . G4fb7) (get-bytevector-n . G4fb6) (get-bytevector-all . G4fb5) (flush-output-port . G4fb4) (close-port . G4fb3) (call-with-string-output-port . G4f92) (call-with-port . G4f91) (call-with-bytevector-output-port . G4f90) (bytevector->string . G4f8f) (buffer-mode? . G4f8e) (binary-port? . G4f8d) (&i/o-encoding . G4e2a) (&i/o-decoding . G4e29) (&i/o-port . G4e28) (&i/o-file-does-not-exist . G4e27) (&i/o-file-already-exists . G4e26) (&i/o-file-is-read-only . G4e25) (&i/o-file-protection . G4e24) (&i/o-filename . G4e23) (&i/o-invalid-position . G4e22) (&i/o-write . G4e21) (&i/o-read . G4e20) (&i/o . G4e1f) (error-handling-mode . G4e04) (file-options . G4e03) (buffer-mode . G4e02) (eol-style . G4e01)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b6 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f89) (enum-set=? . G4f88) (enum-set-universe . G4f87) (enum-set-union . G4f86) (enum-set-subset? . G4f85) (enum-set-projection . G4f84) (enum-set-member? . G4f83) (enum-set-intersection . G4f82) (enum-set-indexer . G4f81) (enum-set-difference . G4f80) (enum-set-constructor . G4f7f) (enum-set-complement . G4f7e) (enum-set->list . G4f7d) (define-enumeration . G4e0f)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b7 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a4b) (warning? . G49c5) (violation? . G4a04) (undefined-violation? . G4ac0) (syntax-violation? . G4aa7) (syntax-violation-subform . G4aab) (syntax-violation-form . G4aa9) (syntax-violation . G303c) (simple-conditions . G4f7c) (serious-condition? . G49da) (non-continuable-violation? . G4a62) (message-condition? . G49ae) (make-who-condition . G4a47) (make-warning . G49c3) (make-violation . G4a02) (make-undefined-violation . G4abe) (make-syntax-violation . G4aa1) (make-serious-condition . G49d8) (make-non-continuable-violation . G4a60) (make-message-condition . G49aa) (make-lexical-violation . G4a8a) (make-irritants-condition . G4a2d) (make-implementation-restriction-violation . G4a75) (make-error . G49ed) (make-assertion-violation . G4a17) (lexical-violation? . G4a8c) (irritants-condition? . G4a31) (implementation-restriction-violation? . G4a77) (error? . G49ef) (condition-who . G4a4d) (condition-predicate . G4f7b) (condition-message . G49b0) (condition-irritants . G4a33) (condition-accessor . G4f7a) (condition . G4f79) (assertion-violation? . G4a19) (condition? . G4f78) (&undefined . G4e1e) (&syntax . G4e1d) (&lexical . G4e1c) (&implementation-restriction . G4e1b) (&non-continuable . G4e1a) (&who . G4e19) (&irritants . G4e18) (&assertion . G4e17) (&violation . G4e16) (&error . G4e15) (&serious . G4e14) (&warning . G4e13) (&message . G4e12) (&condition . G4e11) (define-condition-type . G4e10)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b8 '(rnrs records inspection) '(6) '() '() '() '((record? . G5025) (record-type-uid . G5024) (record-type-sealed? . G5023) (record-type-parent . G5022) (record-type-opaque? . G5021) (record-type-name . G5020) (record-type-generative? . G501f) (record-type-field-names . G501e) (record-rtd . G501d) (record-field-mutable? . G501c)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50b9 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G502c) (record-predicate . G502b) (record-mutator . G502a) (record-constructor . G5029) (record-accessor . G5028) (make-record-type-descriptor . G5027) (make-record-constructor-descriptor . G5026)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50ba '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e0e) (parent-rtd . G4e0d) (nongenerative . G4e0c) (opaque . G4e0b) (sealed . G4e0a) (protocol . G4e09) (parent . G4e08) (immutable . G4e07) (mutable . G4e06) (fields . G4e05) (record-constructor-descriptor . G4de4) (record-type-descriptor . G4de3)) '() values values '#f '#f '#t '#f) (G2b68@G2a0d@install-library 'G50bb '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4bfe) (&no-nans-rtd . G4bfc) (&no-infinities-rcd . G4be9) (&no-infinities-rtd . G4be7) (&i/o-encoding-rcd . G4bd4) (&i/o-encoding-rtd . G4bd2) (&i/o-decoding-rcd . G4bba) (&i/o-decoding-rtd . G4bb8) (&i/o-port-rcd . G4ba5) (&i/o-port-rtd . G4ba3) (&i/o-file-does-not-exist-rcd . G4b8b) (&i/o-file-does-not-exist-rtd . G4b89) (&i/o-file-already-exists-rcd . G4b76) (&i/o-file-already-exists-rtd . G4b74) (&i/o-file-is-read-only-rcd . G4b61) (&i/o-file-is-read-only-rtd . G4b5f) (&i/o-file-protection-rcd . G4b4c) (&i/o-file-protection-rtd . G4b4a) (&i/o-filename-rcd . G4b37) (&i/o-filename-rtd . G4b35) (&i/o-invalid-position-rcd . G4b1d) (&i/o-invalid-position-rtd . G4b1b) (&i/o-write-rcd . G4b03) (&i/o-write-rtd . G4b01) (&i/o-read-rcd . G4aee) (&i/o-read-rtd . G4aec) (&i/o-rcd . G4ad9) (&i/o-rtd . G4ad7) (&undefined-rcd . G4ac4) (&undefined-rtd . G4ac2) (&syntax-rcd . G4aaf) (&syntax-rtd . G4aad) (&lexical-rcd . G4a90) (&lexical-rtd . G4a8e) (&implementation-restriction-rcd . G4a7b) (&implementation-restriction-rtd . G4a79) (&non-continuable-rcd . G4a66) (&non-continuable-rtd . G4a64) (&who-rcd . G4a51) (&who-rtd . G4a4f) (&irritants-rcd . G4a37) (&irritants-rtd . G4a35) (&assertion-rcd . G4a1d) (&assertion-rtd . G4a1b) (&violation-rcd . G4a08) (&violation-rtd . G4a06) (&error-rcd . G49f3) (&error-rtd . G49f1) (&serious-rcd . G49de) (&serious-rtd . G49dc) (&warning-rcd . G49c9) (&warning-rtd . G49c7) (&message-rcd . G49b4) (&message-rtd . G49b2) (&condition-rcd . G4957) (&condition-rtd . G4955) (syntax-error . G3038) (syntax-dispatch . G2f51) (pretty-print . G509b) (eval-core . G509a) (set-symbol-value! . G5099) (symbol-value . G5098) (gensym . G5097) (void . G5096) (load . G4d05) (interaction-environment . G3048) (char-ready? . G5095) (regexp? . G5094) (read-line . G5093) (dotted-list? . G5092) (circular-list? . G5091) (proper-list? . G5090) (circular-list . G508f) (last . G508e) (last-pair . G508d) (not-pair? . G508c) (split-at! . G508b) (split-at . G508a) (list= . G5089) (list-copy . G5088) (list-tabulate . G5087) (make-list . G5086) (xcons . G5085) (tenth . G5084) (ninth . G5083) (eighth . G5082) (seventh . G5081) (sixth . G5080) (fifth . G507f) (drop-right! . G507e) (drop-right . G507d) (take-right . G507c) (take! . G507b) (drop . G507a) (take . G5079) (car+cdr . G5078) (third . G5077) (second . G5076) (first . G5075) (iota . G5074) (every . G5073) (ungensym . G5072) (assoc-ref . G5071) (alist-cons . G5070) (append-map . G506f) (print . G506e) (format . G506d) (standard-library-path . G506c) (file-newer? . G506b) (stat-mtime . G506a) (current-directory . G5069) (write-to-file . G5068) (file->list . G5067) (file->string . G5066) (digit->integer . G5065) (call-with-string-input-port . G5064) (call-with-string-io . G5063) (string-split . G5062) (bytevector-for-each . G5061) (string->regexp . G5060) (rxmatch . G505f) (regexp-replace-all . G505e) (hashtable-for-each . G505d) (call-process . G505c) (local-tz-offset . G505b) (microseconds . G505a) (readdir . G5059) (get-environment-variables . G5058) (get-environment-variable . G5057) (get-timeofday . G5056) (get-command-line . G5055) (sys-display . G5054) (source-info . G5053) (make-compiler-instruction . G5052) (make-instruction . G5051) (set-source-info! . G5050) (bignum? . G504f) (make-complex . G504e) (fast-equal? . G504d) (fasl-read . G504c) (fasl-write . G504b) (receive . G504a) (make-parameter . G2824) (string-upcase . G5049) (string-titlecase . G5048) (string-normalize-nfkd . G5047) (string-normalize-nfkc . G5046) (string-normalize-nfd . G5045) (string-normalize-nfc . G5044) (string-foldcase . G5043) (string-downcase . G5042) (string-ci>? . G5041) (string-ci>=? . G5040) (string-ci=? . G503f) (string-ci<? . G503e) (string-ci<=? . G503d) (char-whitespace? . G503c) (char-upper-case? . G503b) (char-title-case? . G503a) (char-numeric? . G5039) (char-lower-case? . G5038) (char-general-category . G5037) (char-upcase . G5036) (char-titlecase . G5035) (char-foldcase . G5034) (char-downcase . G5033) (char-ci>? . G5032) (char-ci>=? . G5031) (char-ci=? . G5030) (char-ci<? . G502f) (char-ci<=? . G502e) (char-alphabetic? . G502d) (make-variable-transformer . G2d8c) (identifier? . G303e) (generate-temporaries . G302a) (free-identifier=? . G302c) (syntax->datum . G3042) (datum->syntax . G3040) (bound-identifier=? . G302e) (record-type-descriptor? . G502c) (record-predicate . G502b) (record-mutator . G502a) (record-constructor . G5029) (record-accessor . G5028) (make-record-type-descriptor . G5027) (make-record-constructor-descriptor . G5026) (record? . G5025) (record-type-uid . G5024) (record-type-sealed? . G5023) (record-type-parent . G5022) (record-type-opaque? . G5021) (record-type-name . G5020) (record-type-generative? . G501f) (record-type-field-names . G501e) (record-rtd . G501d) (record-field-mutable? . G501c) (delete-file . G501b) (file-exists? . G501a) (vector-sort! . G5019) (vector-sort . G5018) (list-sort . G5017) (symbol-hash . G5016) (string-ci-hash . G5015) (string-hash . G5014) (equal-hash . G5013) (hashtable-equivalence-function . G5012) (make-hashtable . G5011) (hashtable-hash-function . G5010) (make-eqv-hashtable . G500f) (make-eq-hashtable . G500e) (hashtable? . G500d) (hashtable-update! . G500c) (hashtable-size . G500b) (hashtable-set! . G500a) (hashtable-ref . G5009) (hashtable-mutable? . G5008) (hashtable-keys . G5007) (hashtable-entries . G5006) (hashtable-delete! . G5005) (hashtable-copy . G5004) (hashtable-contains? . G5003) (hashtable-clear! . G5002) (call-with-output-file . G5001) (call-with-input-file . G5000) (write-char . G4fff) (write . G4ffe) (with-output-to-file . G4ffd) (with-input-from-file . G4ffc) (read-char . G4ffb) (read . G4ffa) (peek-char . G4ff9) (open-output-file . G4ff8) (open-input-file . G4ff7) (newline . G4ff6) (display . G4ff5) (close-output-port . G4ff4) (close-input-port . G4ff3) (eof-object? . G4ff2) (eof-object . G4ff1) (current-error-port . G4ff0) (current-output-port . G4fef) (current-input-port . G4fee) (output-port? . G4fed) (input-port? . G4fec) (utf-8-codec . G4feb) (utf-16-codec . G4fea) (transcoder-error-handling-mode . G4fe9) (transcoder-eol-style . G4fe8) (transcoder-codec . G4fe7) (transcoded-port . G4fe6) (textual-port? . G4fe5) (string->bytevector . G4fe4) (standard-output-port . G4fe3) (standard-input-port . G4fe2) (standard-error-port . G4fe1) (set-port-position! . G4fe0) (put-u8 . G4fdf) (put-string . G4fde) (put-datum . G4fdd) (put-char . G4fdc) (put-bytevector . G4fdb) (port? . G4fda) (port-transcoder . G4fd9) (port-position . G4fd8) (port-has-set-port-position!? . G4fd7) (port-has-port-position? . G4fd6) (port-eof? . G4fd5) (output-port-buffer-mode . G4fd4) (open-string-output-port . G4fd3) (open-string-input-port . G4fd2) (open-file-output-port . G4fd1) (open-file-input/output-port . G4fd0) (open-file-input-port . G4fcf) (open-bytevector-output-port . G4fce) (open-bytevector-input-port . G4fcd) (native-transcoder . G4fcc) (native-eol-style . G4fcb) (make-transcoder . G4fca) (latin-1-codec . G4fc9) (make-i/o-write-error . G4afd) (make-i/o-read-error . G4ae8) (make-i/o-port-error . G4b9b) (make-i/o-invalid-position-error . G4b13) (make-i/o-filename-error . G4b2d) (make-i/o-file-protection-error . G4b46) (make-i/o-file-is-read-only-error . G4b5b) (make-i/o-file-does-not-exist-error . G4b85) (make-i/o-file-already-exists-error . G4b70) (make-i/o-error . G4ad3) (make-i/o-encoding-error . G4bca) (make-i/o-decoding-error . G4bb4) (make-custom-textual-output-port . G4fc8) (make-custom-textual-input/output-port . G4fc7) (make-custom-textual-input-port . G4fc6) (make-custom-binary-output-port . G4fc5) (make-custom-binary-input/output-port . G4fc4) (make-custom-binary-input-port . G4fc3) (make-bytevector . G4fc2) (lookahead-u8 . G4fc1) (lookahead-char . G4fc0) (i/o-write-error? . G4aff) (i/o-read-error? . G4aea) (i/o-port-error? . G4b9f) (i/o-invalid-position-error? . G4b17) (i/o-filename-error? . G4b31) (i/o-file-protection-error? . G4b48) (i/o-file-is-read-only-error? . G4b5d) (i/o-file-does-not-exist-error? . G4b87) (i/o-file-already-exists-error? . G4b72) (i/o-error? . G4ad5) (i/o-error-position . G4b19) (i/o-error-port . G4ba1) (i/o-error-filename . G4b33) (i/o-encoding-error? . G4bce) (i/o-encoding-error-char . G4bd0) (i/o-decoding-error? . G4bb6) (get-u8 . G4fbf) (get-string-n! . G4fbe) (get-string-n . G4fbd) (get-string-all . G4fbc) (get-line . G4fbb) (get-datum . G4fba) (get-char . G4fb9) (get-bytevector-some . G4fb8) (get-bytevector-n! . G4fb7) (get-bytevector-n . G4fb6) (get-bytevector-all . G4fb5) (flush-output-port . G4fb4) (close-port . G4fb3) (scheme-report-environment . G3018) (quotient . G4fb2) (null-environment . G3016) (remainder . G4fb1) (modulo . G4fb0) (inexact->exact . G4faf) (force . G4fae) (exact->inexact . G4fad) (make-promise . G4fac) (exit . G4fab) (command-line . G4cff) (string-fill! . G4faa) (string-set! . G4fa9) (set-cdr! . G4fa8) (set-car! . G4fa7) (remove . G4fa6) (remv . G4fa5) (remp . G4fa4) (remq . G4fa3) (partition . G4fa2) (memv . G4fa1) (memq . G4fa0) (memp . G4f9f) (member . G4f9e) (exists . G4f9d) (for-all . G4f9c) (fold-right . G4f9b) (fold-left . G4f9a) (find . G4f99) (filter . G4f98) (cons* . G4f97) (assv . G4f96) (assq . G4f95) (assp . G4f94) (assoc . G4f93) (call-with-string-output-port . G4f92) (call-with-port . G4f91) (call-with-bytevector-output-port . G4f90) (bytevector->string . G4f8f) (buffer-mode? . G4f8e) (binary-port? . G4f8d) (with-exception-handler . G4f8c) (raise-continuable . G4f8b) (raise . G4f8a) (eval . G301c) (environment . G3014) (make-enumeration . G4f89) (enum-set=? . G4f88) (enum-set-universe . G4f87) (enum-set-union . G4f86) (enum-set-subset? . G4f85) (enum-set-projection . G4f84) (enum-set-member? . G4f83) (enum-set-intersection . G4f82) (enum-set-indexer . G4f81) (enum-set-difference . G4f80) (enum-set-constructor . G4f7f) (enum-set-complement . G4f7e) (enum-set->list . G4f7d) (who-condition? . G4a4b) (warning? . G49c5) (violation? . G4a04) (undefined-violation? . G4ac0) (syntax-violation? . G4aa7) (syntax-violation-subform . G4aab) (syntax-violation-form . G4aa9) (syntax-violation . G303c) (simple-conditions . G4f7c) (serious-condition? . G49da) (non-continuable-violation? . G4a62) (message-condition? . G49ae) (make-who-condition . G4a47) (make-warning . G49c3) (make-violation . G4a02) (make-undefined-violation . G4abe) (make-syntax-violation . G4aa1) (make-serious-condition . G49d8) (make-non-continuable-violation . G4a60) (make-message-condition . G49aa) (make-lexical-violation . G4a8a) (make-irritants-condition . G4a2d) (make-implementation-restriction-violation . G4a75) (make-error . G49ed) (make-assertion-violation . G4a17) (lexical-violation? . G4a8c) (irritants-condition? . G4a31) (implementation-restriction-violation? . G4a77) (error? . G49ef) (condition-who . G4a4d) (condition-predicate . G4f7b) (condition-message . G49b0) (condition-irritants . G4a33) (condition-accessor . G4f7a) (condition . G4f79) (assertion-violation? . G4a19) (condition? . G4f78) (utf32->string . G4f77) (utf16->string . G4f76) (utf8->string . G4f75) (uint-list->bytevector . G4f74) (u8-list->bytevector . G4f73) (string->utf8 . G4f72) (string->utf32 . G4f71) (string->utf16 . G4f70) (sint-list->bytevector . G4f6f) (native-endianness . G4f6e) (bytevector? . G4f6d) (bytevector=? . G4f6c) (bytevector-uint-set! . G4f6b) (bytevector-uint-ref . G4f6a) (bytevector-u8-set! . G4f69) (bytevector-u8-ref . G4f68) (bytevector-u64-set! . G4f67) (bytevector-u64-ref . G4f66) (bytevector-u64-native-set! . G4f65) (bytevector-u64-native-ref . G4f64) (bytevector-u32-set! . G4f63) (bytevector-u32-ref . G4f62) (bytevector-u32-native-set! . G4f61) (bytevector-u32-native-ref . G4f60) (bytevector-u16-set! . G4f5f) (bytevector-u16-ref . G4f5e) (bytevector-u16-native-set! . G4f5d) (bytevector-u16-native-ref . G4f5c) (bytevector-sint-set! . G4f5b) (bytevector-sint-ref . G4f5a) (bytevector-s8-set! . G4f59) (bytevector-s8-ref . G4f58) (bytevector-s64-set! . G4f57) (bytevector-s64-ref . G4f56) (bytevector-s64-native-set! . G4f55) (bytevector-s64-native-ref . G4f54) (bytevector-s32-set! . G4f53) (bytevector-s32-ref . G4f52) (bytevector-s32-native-set! . G4f51) (bytevector-s32-native-ref . G4f50) (bytevector-s16-set! . G4f4f) (bytevector-s16-ref . G4f4e) (bytevector-s16-native-set! . G4f4d) (bytevector-s16-native-ref . G4f4c) (bytevector-length . G4f4b) (bytevector-ieee-single-ref . G4f4a) (bytevector-ieee-single-set! . G4f49) (bytevector-ieee-single-native-set! . G4f48) (bytevector-ieee-single-native-ref . G4f47) (bytevector-ieee-double-set! . G4f46) (bytevector-ieee-double-ref . G4f45) (bytevector-ieee-double-native-set! . G4f44) (bytevector-ieee-double-native-ref . G4f43) (bytevector-fill! . G4f42) (bytevector-copy! . G4f41) (bytevector-copy . G4f40) (bytevector->uint-list . G4f3f) (bytevector->u8-list . G4f3e) (bytevector->sint-list . G4f3d) (no-nans-violation? . G4bfa) (no-infinities-violation? . G4be5) (make-no-nans-violation . G4bf8) (make-no-infinities-violation . G4be3) (real->flonum . G4f3c) (flzero? . G4f3b) (fltruncate . G4f3a) (fltan . G4f39) (flsqrt . G4f38) (flsin . G4f37) (flround . G4f36) (flpositive? . G4f35) (flonum? . G4f34) (flodd? . G4f33) (flnumerator . G4f32) (flnegative? . G4f31) (flnan? . G4f30) (flmod0 . G4f2f) (flmod . G4f2e) (flmin . G4f2d) (flmax . G4f2c) (fllog . G4f2b) (flinteger? . G4f2a) (flinfinite? . G4f29) (flfloor . G4f28) (flfinite? . G4f27) (flexpt . G4f26) (flexp . G4f25) (fleven? . G4f24) (fldiv0-and-mod0 . G4f23) (fldiv0 . G4f22) (fldiv-and-mod . G4f21) (fldiv . G4f20) (fldenominator . G4f1f) (flcos . G4f1e) (flceiling . G4f1d) (flatan . G4f1c) (flasin . G4f1b) (flacos . G4f1a) (flabs . G4f19) (fl>? . G4f18) (fl>=? . G4f17) (fl=? . G4f16) (fl<? . G4f15) (fl<=? . G4f14) (fl/ . G4f13) (fl- . G4f12) (fl+ . G4f11) (fl* . G4f10) (fixnum->flonum . G4f0f) (fxzero? . G4f0e) (fxxor . G4f0d) (fxrotate-bit-field . G4f0c) (fxreverse-bit-field . G4f0b) (fxpositive? . G4f0a) (fxodd? . G4f09) (fxnot . G4f08) (fxnegative? . G4f07) (fxmod0 . G4f06) (fxmod . G4f05) (fxmin . G4f04) (fxmax . G4f03) (fxlength . G4f02) (fxior . G4f01) (fxif . G4f00) (fxfirst-bit-set . G4eff) (fxeven? . G4efe) (fxdiv0-and-mod0 . G4efd) (fxdiv0 . G4efc) (fxdiv-and-mod . G4efb) (fxdiv . G4efa) (fxcopy-bit-field . G4ef9) (fxcopy-bit . G4ef8) (fxbit-set? . G4ef7) (fxbit-field . G4ef6) (fxbit-count . G4ef5) (fxarithmetic-shift-right . G4ef4) (fxarithmetic-shift-left . G4ef3) (fxarithmetic-shift . G4ef2) (fxand . G4ef1) (fx>? . G4ef0) (fx>=? . G4eef) (fx=? . G4eee) (fx<? . G4eed) (fx<=? . G4eec) (fx-/carry . G4eeb) (fx- . G4eea) (fx+/carry . G4ee9) (fx+ . G4ee8) (fx*/carry . G4ee7) (fx* . G4ee6) (greatest-fixnum . G4ee5) (least-fixnum . G4ee4) (fixnum-width . G4ee3) (fixnum? . G4ee2) (bitwise-rotate-bit-field . G4ee1) (bitwise-reverse-bit-field . G4ee0) (bitwise-length . G4edf) (bitwise-if . G4ede) (bitwise-first-bit-set . G4edd) (bitwise-copy-bit-field . G4edc) (bitwise-copy-bit . G4edb) (bitwise-bit-set? . G4eda) (bitwise-bit-field . G4ed9) (bitwise-bit-count . G4ed8) (bitwise-xor . G4ed7) (bitwise-ior . G4ed6) (bitwise-and . G4ed5) (bitwise-not . G4ed4) (bitwise-arithmetic-shift-right . G4ed3) (bitwise-arithmetic-shift-left . G4ed2) (bitwise-arithmetic-shift . G4ed1) (zero? . G4ed0) (vector? . G4ecf) (vector-set! . G4ece) (vector-ref . G4ecd) (vector-map . G4ecc) (vector-length . G4ecb) (vector-for-each . G4eca) (vector-fill! . G4ec9) (vector->list . G4ec8) (vector . G4ec7) (values . G4ec6) (truncate . G4ec5) (tan . G4ec4) (symbol? . G4ec3) (symbol=? . G4ec2) (symbol->string . G4ec1) (substring . G4ec0) (string? . G4ebf) (string>? . G4ebe) (string>=? . G4ebd) (string=? . G4ebc) (string<? . G4ebb) (string<=? . G4eba) (string-ref . G4eb9) (string-length . G4eb8) (string-for-each . G4eb7) (string-copy . G4eb6) (string-append . G4eb5) (string->symbol . G4eb4) (string->number . G4eb3) (string->list . G4eb2) (string . G4eb1) (sqrt . G4eb0) (sin . G4eaf) (round . G4eae) (reverse . G4ead) (real? . G4eac) (real-valued? . G4eab) (real-part . G4eaa) (rationalize . G4ea9) (rational? . G4ea8) (rational-valued? . G4ea7) (procedure? . G4ea6) (positive? . G4ea5) (pair? . G4ea4) (odd? . G4ea3) (numerator . G4ea2) (number? . G4ea1) (number->string . G4ea0) (null? . G4e9f) (not . G4e9e) (negative? . G4e9d) (nan? . G4e9c) (min . G4e9b) (max . G4e9a) (map . G4e99) (make-vector . G4e98) (make-string . G4e97) (make-rectangular . G4e96) (make-polar . G4e95) (magnitude . G4e94) (log . G4e93) (list? . G4e92) (list-tail . G4e91) (list-ref . G4e90) (list->vector . G4e8f) (list->string . G4e8e) (list . G4e8d) (length . G4e8c) (lcm . G4e8b) (integer? . G4e8a) (integer-valued? . G4e89) (integer->char . G4e88) (infinite? . G4e87) (inexact? . G4e86) (inexact . G4e85) (imag-part . G4e84) (gcd . G4e83) (for-each . G4e82) (floor . G4e81) (finite? . G4e80) (expt . G4e7f) (exp . G4e7e) (exact? . G4e7d) (exact-integer-sqrt . G4e7c) (exact . G4e7b) (even? . G4e7a) (error . G4e79) (eqv? . G4e78) (equal? . G4e77) (eq? . G4e76) (dynamic-wind . G4e75) (div0-and-mod0 . G4e74) (mod0 . G4e73) (div0 . G4e72) (div-and-mod . G4e71) (mod . G4e70) (div . G4e6f) (denominator . G4e6e) (cos . G4e6d) (cons . G4e6c) (complex? . G4e6b) (char? . G4e6a) (char>? . G4e69) (char>=? . G4e68) (char=? . G4e67) (char<? . G4e66) (char<=? . G4e65) (char->integer . G4e64) (ceiling . G4e63) (call-with-values . G4e62) (call/cc . G4e61) (call-with-current-continuation . G4e60) (cddddr . G4e5f) (cdddar . G4e5e) (cddadr . G4e5d) (cddaar . G4e5c) (cdaddr . G4e5b) (cdadar . G4e5a) (cdaadr . G4e59) (cdaaar . G4e58) (cadddr . G4e57) (caddar . G4e56) (cadadr . G4e55) (cadaar . G4e54) (caaddr . G4e53) (caadar . G4e52) (caaadr . G4e51) (caaaar . G4e50) (cdddr . G4e4f) (cddar . G4e4e) (cdadr . G4e4d) (cdaar . G4e4c) (caddr . G4e4b) (cadar . G4e4a) (caadr . G4e49) (caaar . G4e48) (cddr . G4e47) (cdar . G4e46) (cadr . G4e45) (caar . G4e44) (cdr . G4e43) (car . G4e42) (boolean? . G4e41) (boolean=? . G4e40) (atan . G4e3f) (assertion-violation . G4e3e) (asin . G4e3d) (apply . G4e3c) (append . G4e3b) (angle . G4e3a) (acos . G4e39) (abs . G4e38) (/ . G4e37) (* . G4e36) (- . G4e35) (+ . G4e34) (>= . G4e33) (> . G4e32) (= . G4e31) (<= . G4e30) (< . G4e2f) (library . G4e2e) (export . G4e2d) (&no-nans . G4e2c) (&no-infinities . G4e2b) (&i/o-encoding . G4e2a) (&i/o-decoding . G4e29) (&i/o-port . G4e28) (&i/o-file-does-not-exist . G4e27) (&i/o-file-already-exists . G4e26) (&i/o-file-is-read-only . G4e25) (&i/o-file-protection . G4e24) (&i/o-filename . G4e23) (&i/o-invalid-position . G4e22) (&i/o-write . G4e21) (&i/o-read . G4e20) (&i/o . G4e1f) (&undefined . G4e1e) (&syntax . G4e1d) (&lexical . G4e1c) (&implementation-restriction . G4e1b) (&non-continuable . G4e1a) (&who . G4e19) (&irritants . G4e18) (&assertion . G4e17) (&violation . G4e16) (&error . G4e15) (&serious . G4e14) (&warning . G4e13) (&message . G4e12) (&condition . G4e11) (define-condition-type . G4e10) (define-enumeration . G4e0f) (define-record-type . G4e0e) (parent-rtd . G4e0d) (nongenerative . G4e0c) (opaque . G4e0b) (sealed . G4e0a) (protocol . G4e09) (parent . G4e08) (immutable . G4e07) (mutable . G4e06) (fields . G4e05) (error-handling-mode . G4e04) (file-options . G4e03) (buffer-mode . G4e02) (eol-style . G4e01) (guard . G4e00) (trace-define . G4dff) (trace-lambda . G4dfe) (unsyntax-splicing . G4dfd) (unsyntax . G4dfc) (unquote-splicing . G4dfb) (unquote . G4dfa) (_ . G4df9) (else . G4df8) (=> . G4df7) (... . G4df6) (assert . G4df5) (endianness . G4df4) (delay . G4df3) (time . G4df2) (do . G4df1) (cond . G4df0) (let* . G4def) (let . G4dee) (let*-values . G4ded) (let-values . G4dec) (identifier-syntax . G4deb) (with-syntax . G4dea) (quasisyntax . G4de9) (quasiquote . G4de8) (syntax-rules . G4de7) (include . G4de6) (define-struct . G4de5) (record-constructor-descriptor . G4de4) (record-type-descriptor . G4de3) (case . G4de2) (parameterize . G4de1) (unless . G4de0) (when . G4ddf) (or . G4dde) (and . G4ddd) (if . G4ddc) (letrec* . G4ddb) (letrec . G4dda) (type-descriptor . G4dd9) (case-lambda . G4dd8) (lambda . G4dd7) (syntax . G4dd6) (syntax-case . G4dd5) (quote . G4dd4) (foreign-call . G4dd3) (letrec-syntax . G4dd2) (let-syntax . G4dd1) (set! . G4dd0) (import . G4dcf) (begin . G4dce) (module . G4dcd) (define-syntax . G4dcc) (define . G4dcb)) '((G4bfe core-prim . &no-nans-rcd) (G4bfc core-prim . &no-nans-rtd) (G4be9 core-prim . &no-infinities-rcd) (G4be7 core-prim . &no-infinities-rtd) (G4bd4 core-prim . &i/o-encoding-rcd) (G4bd2 core-prim . &i/o-encoding-rtd) (G4bba core-prim . &i/o-decoding-rcd) (G4bb8 core-prim . &i/o-decoding-rtd) (G4ba5 core-prim . &i/o-port-rcd) (G4ba3 core-prim . &i/o-port-rtd) (G4b8b core-prim . &i/o-file-does-not-exist-rcd) (G4b89 core-prim . &i/o-file-does-not-exist-rtd) (G4b76 core-prim . &i/o-file-already-exists-rcd) (G4b74 core-prim . &i/o-file-already-exists-rtd) (G4b61 core-prim . &i/o-file-is-read-only-rcd) (G4b5f core-prim . &i/o-file-is-read-only-rtd) (G4b4c core-prim . &i/o-file-protection-rcd) (G4b4a core-prim . &i/o-file-protection-rtd) (G4b37 core-prim . &i/o-filename-rcd) (G4b35 core-prim . &i/o-filename-rtd) (G4b1d core-prim . &i/o-invalid-position-rcd) (G4b1b core-prim . &i/o-invalid-position-rtd) (G4b03 core-prim . &i/o-write-rcd) (G4b01 core-prim . &i/o-write-rtd) (G4aee core-prim . &i/o-read-rcd) (G4aec core-prim . &i/o-read-rtd) (G4ad9 core-prim . &i/o-rcd) (G4ad7 core-prim . &i/o-rtd) (G4ac4 core-prim . &undefined-rcd) (G4ac2 core-prim . &undefined-rtd) (G4aaf core-prim . &syntax-rcd) (G4aad core-prim . &syntax-rtd) (G4a90 core-prim . &lexical-rcd) (G4a8e core-prim . &lexical-rtd) (G4a7b core-prim . &implementation-restriction-rcd) (G4a79 core-prim . &implementation-restriction-rtd) (G4a66 core-prim . &non-continuable-rcd) (G4a64 core-prim . &non-continuable-rtd) (G4a51 core-prim . &who-rcd) (G4a4f core-prim . &who-rtd) (G4a37 core-prim . &irritants-rcd) (G4a35 core-prim . &irritants-rtd) (G4a1d core-prim . &assertion-rcd) (G4a1b core-prim . &assertion-rtd) (G4a08 core-prim . &violation-rcd) (G4a06 core-prim . &violation-rtd) (G49f3 core-prim . &error-rcd) (G49f1 core-prim . &error-rtd) (G49de core-prim . &serious-rcd) (G49dc core-prim . &serious-rtd) (G49c9 core-prim . &warning-rcd) (G49c7 core-prim . &warning-rtd) (G49b4 core-prim . &message-rcd) (G49b2 core-prim . &message-rtd) (G4957 core-prim . &condition-rcd) (G4955 core-prim . &condition-rtd) (G3038 core-prim . syntax-error) (G2f51 core-prim . syntax-dispatch) (G509b core-prim . pretty-print) (G509a core-prim . eval-core) (G5099 core-prim . set-symbol-value!) (G5098 core-prim . symbol-value) (G5097 core-prim . gensym) (G5096 core-prim . void) (G4d05 core-prim . load) (G3048 core-prim . interaction-environment) (G5095 core-prim . char-ready?) (G5094 core-prim . regexp?) (G5093 core-prim . read-line) (G5092 core-prim . dotted-list?) (G5091 core-prim . circular-list?) (G5090 core-prim . proper-list?) (G508f core-prim . circular-list) (G508e core-prim . last) (G508d core-prim . last-pair) (G508c core-prim . not-pair?) (G508b core-prim . split-at!) (G508a core-prim . split-at) (G5089 core-prim . list=) (G5088 core-prim . list-copy) (G5087 core-prim . list-tabulate) (G5086 core-prim . make-list) (G5085 core-prim . xcons) (G5084 core-prim . tenth) (G5083 core-prim . ninth) (G5082 core-prim . eighth) (G5081 core-prim . seventh) (G5080 core-prim . sixth) (G507f core-prim . fifth) (G507e core-prim . drop-right!) (G507d core-prim . drop-right) (G507c core-prim . take-right) (G507b core-prim . take!) (G507a core-prim . drop) (G5079 core-prim . take) (G5078 core-prim . car+cdr) (G5077 core-prim . third) (G5076 core-prim . second) (G5075 core-prim . first) (G5074 core-prim . iota) (G5073 core-prim . every) (G5072 core-prim . ungensym) (G5071 core-prim . assoc-ref) (G5070 core-prim . alist-cons) (G506f core-prim . append-map) (G506e core-prim . print) (G506d core-prim . format) (G506c core-prim . standard-library-path) (G506b core-prim . file-newer?) (G506a core-prim . stat-mtime) (G5069 core-prim . current-directory) (G5068 core-prim . write-to-file) (G5067 core-prim . file->list) (G5066 core-prim . file->string) (G5065 core-prim . digit->integer) (G5064 core-prim . call-with-string-input-port) (G5063 core-prim . call-with-string-io) (G5062 core-prim . string-split) (G5061 core-prim . bytevector-for-each) (G5060 core-prim . string->regexp) (G505f core-prim . rxmatch) (G505e core-prim . regexp-replace-all) (G505d core-prim . hashtable-for-each) (G505c core-prim . call-process) (G505b core-prim . local-tz-offset) (G505a core-prim . microseconds) (G5059 core-prim . readdir) (G5058 core-prim . get-environment-variables) (G5057 core-prim . get-environment-variable) (G5056 core-prim . get-timeofday) (G5055 core-prim . get-command-line) (G5054 core-prim . sys-display) (G5053 core-prim . source-info) (G5052 core-prim . make-compiler-instruction) (G5051 core-prim . make-instruction) (G5050 core-prim . set-source-info!) (G504f core-prim . bignum?) (G504e core-prim . make-complex) (G504d core-prim . fast-equal?) (G504c core-prim . fasl-read) (G504b core-prim . fasl-write) (G504a core-prim . receive) (G2824 core-prim . make-parameter) (G5049 core-prim . string-upcase) (G5048 core-prim . string-titlecase) (G5047 core-prim . string-normalize-nfkd) (G5046 core-prim . string-normalize-nfkc) (G5045 core-prim . string-normalize-nfd) (G5044 core-prim . string-normalize-nfc) (G5043 core-prim . string-foldcase) (G5042 core-prim . string-downcase) (G5041 core-prim . string-ci>?) (G5040 core-prim . string-ci>=?) (G503f core-prim . string-ci=?) (G503e core-prim . string-ci<?) (G503d core-prim . string-ci<=?) (G503c core-prim . char-whitespace?) (G503b core-prim . char-upper-case?) (G503a core-prim . char-title-case?) (G5039 core-prim . char-numeric?) (G5038 core-prim . char-lower-case?) (G5037 core-prim . char-general-category) (G5036 core-prim . char-upcase) (G5035 core-prim . char-titlecase) (G5034 core-prim . char-foldcase) (G5033 core-prim . char-downcase) (G5032 core-prim . char-ci>?) (G5031 core-prim . char-ci>=?) (G5030 core-prim . char-ci=?) (G502f core-prim . char-ci<?) (G502e core-prim . char-ci<=?) (G502d core-prim . char-alphabetic?) (G2d8c core-prim . make-variable-transformer) (G303e core-prim . identifier?) (G302a core-prim . generate-temporaries) (G302c core-prim . free-identifier=?) (G3042 core-prim . syntax->datum) (G3040 core-prim . datum->syntax) (G302e core-prim . bound-identifier=?) (G502c core-prim . record-type-descriptor?) (G502b core-prim . record-predicate) (G502a core-prim . record-mutator) (G5029 core-prim . record-constructor) (G5028 core-prim . record-accessor) (G5027 core-prim . make-record-type-descriptor) (G5026 core-prim . make-record-constructor-descriptor) (G5025 core-prim . record?) (G5024 core-prim . record-type-uid) (G5023 core-prim . record-type-sealed?) (G5022 core-prim . record-type-parent) (G5021 core-prim . record-type-opaque?) (G5020 core-prim . record-type-name) (G501f core-prim . record-type-generative?) (G501e core-prim . record-type-field-names) (G501d core-prim . record-rtd) (G501c core-prim . record-field-mutable?) (G501b core-prim . delete-file) (G501a core-prim . file-exists?) (G5019 core-prim . vector-sort!) (G5018 core-prim . vector-sort) (G5017 core-prim . list-sort) (G5016 core-prim . symbol-hash) (G5015 core-prim . string-ci-hash) (G5014 core-prim . string-hash) (G5013 core-prim . equal-hash) (G5012 core-prim . hashtable-equivalence-function) (G5011 core-prim . make-hashtable) (G5010 core-prim . hashtable-hash-function) (G500f core-prim . make-eqv-hashtable) (G500e core-prim . make-eq-hashtable) (G500d core-prim . hashtable?) (G500c core-prim . hashtable-update!) (G500b core-prim . hashtable-size) (G500a core-prim . hashtable-set!) (G5009 core-prim . hashtable-ref) (G5008 core-prim . hashtable-mutable?) (G5007 core-prim . hashtable-keys) (G5006 core-prim . hashtable-entries) (G5005 core-prim . hashtable-delete!) (G5004 core-prim . hashtable-copy) (G5003 core-prim . hashtable-contains?) (G5002 core-prim . hashtable-clear!) (G5001 core-prim . call-with-output-file) (G5000 core-prim . call-with-input-file) (G4fff core-prim . write-char) (G4ffe core-prim . write) (G4ffd core-prim . with-output-to-file) (G4ffc core-prim . with-input-from-file) (G4ffb core-prim . read-char) (G4ffa core-prim . read) (G4ff9 core-prim . peek-char) (G4ff8 core-prim . open-output-file) (G4ff7 core-prim . open-input-file) (G4ff6 core-prim . newline) (G4ff5 core-prim . display) (G4ff4 core-prim . close-output-port) (G4ff3 core-prim . close-input-port) (G4ff2 core-prim . eof-object?) (G4ff1 core-prim . eof-object) (G4ff0 core-prim . current-error-port) (G4fef core-prim . current-output-port) (G4fee core-prim . current-input-port) (G4fed core-prim . output-port?) (G4fec core-prim . input-port?) (G4feb core-prim . utf-8-codec) (G4fea core-prim . utf-16-codec) (G4fe9 core-prim . transcoder-error-handling-mode) (G4fe8 core-prim . transcoder-eol-style) (G4fe7 core-prim . transcoder-codec) (G4fe6 core-prim . transcoded-port) (G4fe5 core-prim . textual-port?) (G4fe4 core-prim . string->bytevector) (G4fe3 core-prim . standard-output-port) (G4fe2 core-prim . standard-input-port) (G4fe1 core-prim . standard-error-port) (G4fe0 core-prim . set-port-position!) (G4fdf core-prim . put-u8) (G4fde core-prim . put-string) (G4fdd core-prim . put-datum) (G4fdc core-prim . put-char) (G4fdb core-prim . put-bytevector) (G4fda core-prim . port?) (G4fd9 core-prim . port-transcoder) (G4fd8 core-prim . port-position) (G4fd7 core-prim . port-has-set-port-position!?) (G4fd6 core-prim . port-has-port-position?) (G4fd5 core-prim . port-eof?) (G4fd4 core-prim . output-port-buffer-mode) (G4fd3 core-prim . open-string-output-port) (G4fd2 core-prim . open-string-input-port) (G4fd1 core-prim . open-file-output-port) (G4fd0 core-prim . open-file-input/output-port) (G4fcf core-prim . open-file-input-port) (G4fce core-prim . open-bytevector-output-port) (G4fcd core-prim . open-bytevector-input-port) (G4fcc core-prim . native-transcoder) (G4fcb core-prim . native-eol-style) (G4fca core-prim . make-transcoder) (G4fc9 core-prim . latin-1-codec) (G4afd core-prim . make-i/o-write-error) (G4ae8 core-prim . make-i/o-read-error) (G4b9b core-prim . make-i/o-port-error) (G4b13 core-prim . make-i/o-invalid-position-error) (G4b2d core-prim . make-i/o-filename-error) (G4b46 core-prim . make-i/o-file-protection-error) (G4b5b core-prim . make-i/o-file-is-read-only-error) (G4b85 core-prim . make-i/o-file-does-not-exist-error) (G4b70 core-prim . make-i/o-file-already-exists-error) (G4ad3 core-prim . make-i/o-error) (G4bca core-prim . make-i/o-encoding-error) (G4bb4 core-prim . make-i/o-decoding-error) (G4fc8 core-prim . make-custom-textual-output-port) (G4fc7 core-prim . make-custom-textual-input/output-port) (G4fc6 core-prim . make-custom-textual-input-port) (G4fc5 core-prim . make-custom-binary-output-port) (G4fc4 core-prim . make-custom-binary-input/output-port) (G4fc3 core-prim . make-custom-binary-input-port) (G4fc2 core-prim . make-bytevector) (G4fc1 core-prim . lookahead-u8) (G4fc0 core-prim . lookahead-char) (G4aff core-prim . i/o-write-error?) (G4aea core-prim . i/o-read-error?) (G4b9f core-prim . i/o-port-error?) (G4b17 core-prim . i/o-invalid-position-error?) (G4b31 core-prim . i/o-filename-error?) (G4b48 core-prim . i/o-file-protection-error?) (G4b5d core-prim . i/o-file-is-read-only-error?) (G4b87 core-prim . i/o-file-does-not-exist-error?) (G4b72 core-prim . i/o-file-already-exists-error?) (G4ad5 core-prim . i/o-error?) (G4b19 core-prim . i/o-error-position) (G4ba1 core-prim . i/o-error-port) (G4b33 core-prim . i/o-error-filename) (G4bce core-prim . i/o-encoding-error?) (G4bd0 core-prim . i/o-encoding-error-char) (G4bb6 core-prim . i/o-decoding-error?) (G4fbf core-prim . get-u8) (G4fbe core-prim . get-string-n!) (G4fbd core-prim . get-string-n) (G4fbc core-prim . get-string-all) (G4fbb core-prim . get-line) (G4fba core-prim . get-datum) (G4fb9 core-prim . get-char) (G4fb8 core-prim . get-bytevector-some) (G4fb7 core-prim . get-bytevector-n!) (G4fb6 core-prim . get-bytevector-n) (G4fb5 core-prim . get-bytevector-all) (G4fb4 core-prim . flush-output-port) (G4fb3 core-prim . close-port) (G3018 core-prim . scheme-report-environment) (G4fb2 core-prim . quotient) (G3016 core-prim . null-environment) (G4fb1 core-prim . remainder) (G4fb0 core-prim . modulo) (G4faf core-prim . inexact->exact) (G4fae core-prim . force) (G4fad core-prim . exact->inexact) (G4fac core-prim . make-promise) (G4fab core-prim . exit) (G4cff core-prim . command-line) (G4faa core-prim . string-fill!) (G4fa9 core-prim . string-set!) (G4fa8 core-prim . set-cdr!) (G4fa7 core-prim . set-car!) (G4fa6 core-prim . remove) (G4fa5 core-prim . remv) (G4fa4 core-prim . remp) (G4fa3 core-prim . remq) (G4fa2 core-prim . partition) (G4fa1 core-prim . memv) (G4fa0 core-prim . memq) (G4f9f core-prim . memp) (G4f9e core-prim . member) (G4f9d core-prim . exists) (G4f9c core-prim . for-all) (G4f9b core-prim . fold-right) (G4f9a core-prim . fold-left) (G4f99 core-prim . find) (G4f98 core-prim . filter) (G4f97 core-prim . cons*) (G4f96 core-prim . assv) (G4f95 core-prim . assq) (G4f94 core-prim . assp) (G4f93 core-prim . assoc) (G4f92 core-prim . call-with-string-output-port) (G4f91 core-prim . call-with-port) (G4f90 core-prim . call-with-bytevector-output-port) (G4f8f core-prim . bytevector->string) (G4f8e core-prim . buffer-mode?) (G4f8d core-prim . binary-port?) (G4f8c core-prim . with-exception-handler) (G4f8b core-prim . raise-continuable) (G4f8a core-prim . raise) (G301c core-prim . eval) (G3014 core-prim . environment) (G4f89 core-prim . make-enumeration) (G4f88 core-prim . enum-set=?) (G4f87 core-prim . enum-set-universe) (G4f86 core-prim . enum-set-union) (G4f85 core-prim . enum-set-subset?) (G4f84 core-prim . enum-set-projection) (G4f83 core-prim . enum-set-member?) (G4f82 core-prim . enum-set-intersection) (G4f81 core-prim . enum-set-indexer) (G4f80 core-prim . enum-set-difference) (G4f7f core-prim . enum-set-constructor) (G4f7e core-prim . enum-set-complement) (G4f7d core-prim . enum-set->list) (G4a4b core-prim . who-condition?) (G49c5 core-prim . warning?) (G4a04 core-prim . violation?) (G4ac0 core-prim . undefined-violation?) (G4aa7 core-prim . syntax-violation?) (G4aab core-prim . syntax-violation-subform) (G4aa9 core-prim . syntax-violation-form) (G303c core-prim . syntax-violation) (G4f7c core-prim . simple-conditions) (G49da core-prim . serious-condition?) (G4a62 core-prim . non-continuable-violation?) (G49ae core-prim . message-condition?) (G4a47 core-prim . make-who-condition) (G49c3 core-prim . make-warning) (G4a02 core-prim . make-violation) (G4abe core-prim . make-undefined-violation) (G4aa1 core-prim . make-syntax-violation) (G49d8 core-prim . make-serious-condition) (G4a60 core-prim . make-non-continuable-violation) (G49aa core-prim . make-message-condition) (G4a8a core-prim . make-lexical-violation) (G4a2d core-prim . make-irritants-condition) (G4a75 core-prim . make-implementation-restriction-violation) (G49ed core-prim . make-error) (G4a17 core-prim . make-assertion-violation) (G4a8c core-prim . lexical-violation?) (G4a31 core-prim . irritants-condition?) (G4a77 core-prim . implementation-restriction-violation?) (G49ef core-prim . error?) (G4a4d core-prim . condition-who) (G4f7b core-prim . condition-predicate) (G49b0 core-prim . condition-message) (G4a33 core-prim . condition-irritants) (G4f7a core-prim . condition-accessor) (G4f79 core-prim . condition) (G4a19 core-prim . assertion-violation?) (G4f78 core-prim . condition?) (G4f77 core-prim . utf32->string) (G4f76 core-prim . utf16->string) (G4f75 core-prim . utf8->string) (G4f74 core-prim . uint-list->bytevector) (G4f73 core-prim . u8-list->bytevector) (G4f72 core-prim . string->utf8) (G4f71 core-prim . string->utf32) (G4f70 core-prim . string->utf16) (G4f6f core-prim . sint-list->bytevector) (G4f6e core-prim . native-endianness) (G4f6d core-prim . bytevector?) (G4f6c core-prim . bytevector=?) (G4f6b core-prim . bytevector-uint-set!) (G4f6a core-prim . bytevector-uint-ref) (G4f69 core-prim . bytevector-u8-set!) (G4f68 core-prim . bytevector-u8-ref) (G4f67 core-prim . bytevector-u64-set!) (G4f66 core-prim . bytevector-u64-ref) (G4f65 core-prim . bytevector-u64-native-set!) (G4f64 core-prim . bytevector-u64-native-ref) (G4f63 core-prim . bytevector-u32-set!) (G4f62 core-prim . bytevector-u32-ref) (G4f61 core-prim . bytevector-u32-native-set!) (G4f60 core-prim . bytevector-u32-native-ref) (G4f5f core-prim . bytevector-u16-set!) (G4f5e core-prim . bytevector-u16-ref) (G4f5d core-prim . bytevector-u16-native-set!) (G4f5c core-prim . bytevector-u16-native-ref) (G4f5b core-prim . bytevector-sint-set!) (G4f5a core-prim . bytevector-sint-ref) (G4f59 core-prim . bytevector-s8-set!) (G4f58 core-prim . bytevector-s8-ref) (G4f57 core-prim . bytevector-s64-set!) (G4f56 core-prim . bytevector-s64-ref) (G4f55 core-prim . bytevector-s64-native-set!) (G4f54 core-prim . bytevector-s64-native-ref) (G4f53 core-prim . bytevector-s32-set!) (G4f52 core-prim . bytevector-s32-ref) (G4f51 core-prim . bytevector-s32-native-set!) (G4f50 core-prim . bytevector-s32-native-ref) (G4f4f core-prim . bytevector-s16-set!) (G4f4e core-prim . bytevector-s16-ref) (G4f4d core-prim . bytevector-s16-native-set!) (G4f4c core-prim . bytevector-s16-native-ref) (G4f4b core-prim . bytevector-length) (G4f4a core-prim . bytevector-ieee-single-ref) (G4f49 core-prim . bytevector-ieee-single-set!) (G4f48 core-prim . bytevector-ieee-single-native-set!) (G4f47 core-prim . bytevector-ieee-single-native-ref) (G4f46 core-prim . bytevector-ieee-double-set!) (G4f45 core-prim . bytevector-ieee-double-ref) (G4f44 core-prim . bytevector-ieee-double-native-set!) (G4f43 core-prim . bytevector-ieee-double-native-ref) (G4f42 core-prim . bytevector-fill!) (G4f41 core-prim . bytevector-copy!) (G4f40 core-prim . bytevector-copy) (G4f3f core-prim . bytevector->uint-list) (G4f3e core-prim . bytevector->u8-list) (G4f3d core-prim . bytevector->sint-list) (G4bfa core-prim . no-nans-violation?) (G4be5 core-prim . no-infinities-violation?) (G4bf8 core-prim . make-no-nans-violation) (G4be3 core-prim . make-no-infinities-violation) (G4f3c core-prim . real->flonum) (G4f3b core-prim . flzero?) (G4f3a core-prim . fltruncate) (G4f39 core-prim . fltan) (G4f38 core-prim . flsqrt) (G4f37 core-prim . flsin) (G4f36 core-prim . flround) (G4f35 core-prim . flpositive?) (G4f34 core-prim . flonum?) (G4f33 core-prim . flodd?) (G4f32 core-prim . flnumerator) (G4f31 core-prim . flnegative?) (G4f30 core-prim . flnan?) (G4f2f core-prim . flmod0) (G4f2e core-prim . flmod) (G4f2d core-prim . flmin) (G4f2c core-prim . flmax) (G4f2b core-prim . fllog) (G4f2a core-prim . flinteger?) (G4f29 core-prim . flinfinite?) (G4f28 core-prim . flfloor) (G4f27 core-prim . flfinite?) (G4f26 core-prim . flexpt) (G4f25 core-prim . flexp) (G4f24 core-prim . fleven?) (G4f23 core-prim . fldiv0-and-mod0) (G4f22 core-prim . fldiv0) (G4f21 core-prim . fldiv-and-mod) (G4f20 core-prim . fldiv) (G4f1f core-prim . fldenominator) (G4f1e core-prim . flcos) (G4f1d core-prim . flceiling) (G4f1c core-prim . flatan) (G4f1b core-prim . flasin) (G4f1a core-prim . flacos) (G4f19 core-prim . flabs) (G4f18 core-prim . fl>?) (G4f17 core-prim . fl>=?) (G4f16 core-prim . fl=?) (G4f15 core-prim . fl<?) (G4f14 core-prim . fl<=?) (G4f13 core-prim . fl/) (G4f12 core-prim . fl-) (G4f11 core-prim . fl+) (G4f10 core-prim . fl*) (G4f0f core-prim . fixnum->flonum) (G4f0e core-prim . fxzero?) (G4f0d core-prim . fxxor) (G4f0c core-prim . fxrotate-bit-field) (G4f0b core-prim . fxreverse-bit-field) (G4f0a core-prim . fxpositive?) (G4f09 core-prim . fxodd?) (G4f08 core-prim . fxnot) (G4f07 core-prim . fxnegative?) (G4f06 core-prim . fxmod0) (G4f05 core-prim . fxmod) (G4f04 core-prim . fxmin) (G4f03 core-prim . fxmax) (G4f02 core-prim . fxlength) (G4f01 core-prim . fxior) (G4f00 core-prim . fxif) (G4eff core-prim . fxfirst-bit-set) (G4efe core-prim . fxeven?) (G4efd core-prim . fxdiv0-and-mod0) (G4efc core-prim . fxdiv0) (G4efb core-prim . fxdiv-and-mod) (G4efa core-prim . fxdiv) (G4ef9 core-prim . fxcopy-bit-field) (G4ef8 core-prim . fxcopy-bit) (G4ef7 core-prim . fxbit-set?) (G4ef6 core-prim . fxbit-field) (G4ef5 core-prim . fxbit-count) (G4ef4 core-prim . fxarithmetic-shift-right) (G4ef3 core-prim . fxarithmetic-shift-left) (G4ef2 core-prim . fxarithmetic-shift) (G4ef1 core-prim . fxand) (G4ef0 core-prim . fx>?) (G4eef core-prim . fx>=?) (G4eee core-prim . fx=?) (G4eed core-prim . fx<?) (G4eec core-prim . fx<=?) (G4eeb core-prim . fx-/carry) (G4eea core-prim . fx-) (G4ee9 core-prim . fx+/carry) (G4ee8 core-prim . fx+) (G4ee7 core-prim . fx*/carry) (G4ee6 core-prim . fx*) (G4ee5 core-prim . greatest-fixnum) (G4ee4 core-prim . least-fixnum) (G4ee3 core-prim . fixnum-width) (G4ee2 core-prim . fixnum?) (G4ee1 core-prim . bitwise-rotate-bit-field) (G4ee0 core-prim . bitwise-reverse-bit-field) (G4edf core-prim . bitwise-length) (G4ede core-prim . bitwise-if) (G4edd core-prim . bitwise-first-bit-set) (G4edc core-prim . bitwise-copy-bit-field) (G4edb core-prim . bitwise-copy-bit) (G4eda core-prim . bitwise-bit-set?) (G4ed9 core-prim . bitwise-bit-field) (G4ed8 core-prim . bitwise-bit-count) (G4ed7 core-prim . bitwise-xor) (G4ed6 core-prim . bitwise-ior) (G4ed5 core-prim . bitwise-and) (G4ed4 core-prim . bitwise-not) (G4ed3 core-prim . bitwise-arithmetic-shift-right) (G4ed2 core-prim . bitwise-arithmetic-shift-left) (G4ed1 core-prim . bitwise-arithmetic-shift) (G4ed0 core-prim . zero?) (G4ecf core-prim . vector?) (G4ece core-prim . vector-set!) (G4ecd core-prim . vector-ref) (G4ecc core-prim . vector-map) (G4ecb core-prim . vector-length) (G4eca core-prim . vector-for-each) (G4ec9 core-prim . vector-fill!) (G4ec8 core-prim . vector->list) (G4ec7 core-prim . vector) (G4ec6 core-prim . values) (G4ec5 core-prim . truncate) (G4ec4 core-prim . tan) (G4ec3 core-prim . symbol?) (G4ec2 core-prim . symbol=?) (G4ec1 core-prim . symbol->string) (G4ec0 core-prim . substring) (G4ebf core-prim . string?) (G4ebe core-prim . string>?) (G4ebd core-prim . string>=?) (G4ebc core-prim . string=?) (G4ebb core-prim . string<?) (G4eba core-prim . string<=?) (G4eb9 core-prim . string-ref) (G4eb8 core-prim . string-length) (G4eb7 core-prim . string-for-each) (G4eb6 core-prim . string-copy) (G4eb5 core-prim . string-append) (G4eb4 core-prim . string->symbol) (G4eb3 core-prim . string->number) (G4eb2 core-prim . string->list) (G4eb1 core-prim . string) (G4eb0 core-prim . sqrt) (G4eaf core-prim . sin) (G4eae core-prim . round) (G4ead core-prim . reverse) (G4eac core-prim . real?) (G4eab core-prim . real-valued?) (G4eaa core-prim . real-part) (G4ea9 core-prim . rationalize) (G4ea8 core-prim . rational?) (G4ea7 core-prim . rational-valued?) (G4ea6 core-prim . procedure?) (G4ea5 core-prim . positive?) (G4ea4 core-prim . pair?) (G4ea3 core-prim . odd?) (G4ea2 core-prim . numerator) (G4ea1 core-prim . number?) (G4ea0 core-prim . number->string) (G4e9f core-prim . null?) (G4e9e core-prim . not) (G4e9d core-prim . negative?) (G4e9c core-prim . nan?) (G4e9b core-prim . min) (G4e9a core-prim . max) (G4e99 core-prim . map) (G4e98 core-prim . make-vector) (G4e97 core-prim . make-string) (G4e96 core-prim . make-rectangular) (G4e95 core-prim . make-polar) (G4e94 core-prim . magnitude) (G4e93 core-prim . log) (G4e92 core-prim . list?) (G4e91 core-prim . list-tail) (G4e90 core-prim . list-ref) (G4e8f core-prim . list->vector) (G4e8e core-prim . list->string) (G4e8d core-prim . list) (G4e8c core-prim . length) (G4e8b core-prim . lcm) (G4e8a core-prim . integer?) (G4e89 core-prim . integer-valued?) (G4e88 core-prim . integer->char) (G4e87 core-prim . infinite?) (G4e86 core-prim . inexact?) (G4e85 core-prim . inexact) (G4e84 core-prim . imag-part) (G4e83 core-prim . gcd) (G4e82 core-prim . for-each) (G4e81 core-prim . floor) (G4e80 core-prim . finite?) (G4e7f core-prim . expt) (G4e7e core-prim . exp) (G4e7d core-prim . exact?) (G4e7c core-prim . exact-integer-sqrt) (G4e7b core-prim . exact) (G4e7a core-prim . even?) (G4e79 core-prim . error) (G4e78 core-prim . eqv?) (G4e77 core-prim . equal?) (G4e76 core-prim . eq?) (G4e75 core-prim . dynamic-wind) (G4e74 core-prim . div0-and-mod0) (G4e73 core-prim . mod0) (G4e72 core-prim . div0) (G4e71 core-prim . div-and-mod) (G4e70 core-prim . mod) (G4e6f core-prim . div) (G4e6e core-prim . denominator) (G4e6d core-prim . cos) (G4e6c core-prim . cons) (G4e6b core-prim . complex?) (G4e6a core-prim . char?) (G4e69 core-prim . char>?) (G4e68 core-prim . char>=?) (G4e67 core-prim . char=?) (G4e66 core-prim . char<?) (G4e65 core-prim . char<=?) (G4e64 core-prim . char->integer) (G4e63 core-prim . ceiling) (G4e62 core-prim . call-with-values) (G4e61 core-prim . call/cc) (G4e60 core-prim . call-with-current-continuation) (G4e5f core-prim . cddddr) (G4e5e core-prim . cdddar) (G4e5d core-prim . cddadr) (G4e5c core-prim . cddaar) (G4e5b core-prim . cdaddr) (G4e5a core-prim . cdadar) (G4e59 core-prim . cdaadr) (G4e58 core-prim . cdaaar) (G4e57 core-prim . cadddr) (G4e56 core-prim . caddar) (G4e55 core-prim . cadadr) (G4e54 core-prim . cadaar) (G4e53 core-prim . caaddr) (G4e52 core-prim . caadar) (G4e51 core-prim . caaadr) (G4e50 core-prim . caaaar) (G4e4f core-prim . cdddr) (G4e4e core-prim . cddar) (G4e4d core-prim . cdadr) (G4e4c core-prim . cdaar) (G4e4b core-prim . caddr) (G4e4a core-prim . cadar) (G4e49 core-prim . caadr) (G4e48 core-prim . caaar) (G4e47 core-prim . cddr) (G4e46 core-prim . cdar) (G4e45 core-prim . cadr) (G4e44 core-prim . caar) (G4e43 core-prim . cdr) (G4e42 core-prim . car) (G4e41 core-prim . boolean?) (G4e40 core-prim . boolean=?) (G4e3f core-prim . atan) (G4e3e core-prim . assertion-violation) (G4e3d core-prim . asin) (G4e3c core-prim . apply) (G4e3b core-prim . append) (G4e3a core-prim . angle) (G4e39 core-prim . acos) (G4e38 core-prim . abs) (G4e37 core-prim . /) (G4e36 core-prim . *) (G4e35 core-prim . -) (G4e34 core-prim . +) (G4e33 core-prim . >=) (G4e32 core-prim . >) (G4e31 core-prim . =) (G4e30 core-prim . <=) (G4e2f core-prim . <) (G4e2e core-prim . library) (G4e2d core-prim . export) (G4e2c $core-rtd &no-nans-rtd &no-nans-rcd) (G4e2b $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e2a $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e29 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e28 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e27 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e26 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e25 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e24 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e23 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e22 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e21 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e20 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e1f $core-rtd &i/o-rtd &i/o-rcd) (G4e1e $core-rtd &undefined-rtd &undefined-rcd) (G4e1d $core-rtd &syntax-rtd &syntax-rcd) (G4e1c $core-rtd &lexical-rtd &lexical-rcd) (G4e1b $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e1a $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e19 $core-rtd &who-rtd &who-rcd) (G4e18 $core-rtd &irritants-rtd &irritants-rcd) (G4e17 $core-rtd &assertion-rtd &assertion-rcd) (G4e16 $core-rtd &violation-rtd &violation-rcd) (G4e15 $core-rtd &error-rtd &error-rcd) (G4e14 $core-rtd &serious-rtd &serious-rcd) (G4e13 $core-rtd &warning-rtd &warning-rcd) (G4e12 $core-rtd &message-rtd &message-rcd) (G4e11 $core-rtd &condition-rtd &condition-rcd) (G4e10 macro . define-condition-type) (G4e0f macro . define-enumeration) (G4e0e macro . define-record-type) (G4e0d macro . parent-rtd) (G4e0c macro . nongenerative) (G4e0b macro . opaque) (G4e0a macro . sealed) (G4e09 macro . protocol) (G4e08 macro . parent) (G4e07 macro . immutable) (G4e06 macro . mutable) (G4e05 macro . fields) (G4e04 macro . error-handling-mode) (G4e03 macro . file-options) (G4e02 macro . buffer-mode) (G4e01 macro . eol-style) (G4e00 macro . guard) (G4dff macro . trace-define) (G4dfe macro . trace-lambda) (G4dfd macro . unsyntax-splicing) (G4dfc macro . unsyntax) (G4dfb macro . unquote-splicing) (G4dfa macro . unquote) (G4df9 macro . _) (G4df8 macro . else) (G4df7 macro . =>) (G4df6 macro . ...) (G4df5 macro . assert) (G4df4 macro . endianness) (G4df3 macro . delay) (G4df2 macro . time) (G4df1 macro . do) (G4df0 macro . cond) (G4def macro . let*) (G4dee macro . let) (G4ded macro . let*-values) (G4dec macro . let-values) (G4deb macro . identifier-syntax) (G4dea macro . with-syntax) (G4de9 macro . quasisyntax) (G4de8 macro . quasiquote) (G4de7 macro . syntax-rules) (G4de6 macro . include) (G4de5 macro . define-struct) (G4de4 core-macro . record-constructor-descriptor) (G4de3 core-macro . record-type-descriptor) (G4de2 macro . case) (G4de1 macro . parameterize) (G4de0 macro . unless) (G4ddf macro . when) (G4dde core-macro . or) (G4ddd core-macro . and) (G4ddc core-macro . if) (G4ddb core-macro . letrec*) (G4dda core-macro . letrec) (G4dd9 core-macro . type-descriptor) (G4dd8 core-macro . case-lambda) (G4dd7 core-macro . lambda) (G4dd6 core-macro . syntax) (G4dd5 core-macro . syntax-case) (G4dd4 core-macro . quote) (G4dd3 core-macro . foreign-call) (G4dd2 letrec-syntax) (G4dd1 let-syntax) (G4dd0 set!) (G4dcf import) (G4dce begin) (G4dcd module) (G4dcc define-syntax) (G4dcb define)) values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50bc '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G509b) (eval-core . G509a) (set-symbol-value! . G5099) (symbol-value . G5098) (gensym . G5097) (void . G5096)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50bd '(mosh) '() '() '() '() '((set-symbol-value! . G5099) (symbol-value . G5098) (ungensym . G5072) (assoc-ref . G5071) (alist-cons . G5070) (print . G506e) (format . G506d) (standard-library-path . G506c) (file-newer? . G506b) (stat-mtime . G506a) (current-directory . G5069) (write-to-file . G5068) (file->list . G5067) (file->string . G5066) (digit->integer . G5065) (call-with-string-input-port . G5064) (call-with-string-io . G5063) (string-split . G5062) (bytevector-for-each . G5061) (string->regexp . G5060) (rxmatch . G505f) (regexp-replace-all . G505e) (hashtable-for-each . G505d) (get-timeofday . G5056) (get-command-line . G5055) (sys-display . G5054) (source-info . G5053) (make-compiler-instruction . G5052) (make-instruction . G5051) (set-source-info! . G5050) (bignum? . G504f) (make-complex . G504e) (fast-equal? . G504d) (fasl-read . G504c) (fasl-write . G504b) (include . G4de6)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50be '(mosh backend) '() '() '() '() '((receive . G504a)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50bf '(mosh file) '() '() '() '() '((read-line . G5093) (file-newer? . G506b) (stat-mtime . G506a) (current-directory . G5069) (write-to-file . G5068) (file->list . G5067) (file->string . G5066)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50c0 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5061)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50c1 '(mosh number) '() '() '() '() '((digit->integer . G5065)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50c2 '(mosh string) '() '() '() '() '((print . G506e) (format . G506d) (call-with-string-input-port . G5064) (call-with-string-io . G5063) (string-split . G5062) (string->regexp . G5060)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50c3 '(mosh list) '() '() '() '() '((assoc-ref . G5071)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50c4 '(mosh regexp) '() '() '() '() '((rxmatch . G505f) (regexp-replace-all . G505e)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50c5 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G505d)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50c6 '(mosh parameters) '() '() '() '() '((make-parameter . G2824) (parameterize . G4de1)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50c7 '(system) '() '() '() '() '((call-process . G505c) (local-tz-offset . G505b) (microseconds . G505a) (readdir . G5059) (get-environment-variables . G5058) (get-environment-variable . G5057)) '() values values '#f '#f '#f '#f) (G2b68@G2a0d@install-library 'G50c8 '(srfi :1) '() '() '() '() '((dotted-list? . G5092) (circular-list? . G5091) (proper-list? . G5090) (circular-list . G508f) (last . G508e) (last-pair . G508d) (not-pair? . G508c) (split-at! . G508b) (split-at . G508a) (list= . G5089) (list-copy . G5088) (list-tabulate . G5087) (make-list . G5086) (xcons . G5085) (tenth . G5084) (ninth . G5083) (eighth . G5082) (seventh . G5081) (sixth . G5080) (fifth . G507f) (drop-right! . G507e) (drop-right . G507d) (take-right . G507c) (take! . G507b) (drop . G507a) (take . G5079) (car+cdr . G5078) (third . G5077) (second . G5076) (first . G5075) (iota . G5074) (every . G5073) (alist-cons . G5070) (append-map . G506f)) '() values values '#f '#f '#f '#f))
((lambda (G4cf4@add-library-path! G4cf6@parse-and-add-library-path G4cf8@for-each-with-index G4cfa@conditioon-printer G4cfc@repl G4cfe@trace-printer G4d00@command-line G4d02@local-library-path G4d04@load/args G4d06@load G4d08@ironscheme-build G4d0a@eval-top-level G4d0c@compile-system-libraries G4d0e@compile G4d10@compile->closure G4d12@pre-compile-r6rs-file G4d14@load-r6rs-top-level) (begin (set! G4cf4@add-library-path! (lambda (G4d2f@path) (G2b58@G29ed@library-path (append (G2b58@G29ed@library-path) (list G4d2f@path))))) (set! G4cf6@parse-and-add-library-path (lambda (G4d31@paths G4d32@message) ((lambda (G4d35@t) (if G4d35@t ((lambda (G4d37@paths) (for-each (lambda (G4d39@path) (if (file-exists? G4d39@path) (G4cf4@add-library-path! G4d39@path) (format (current-error-port) G4d32@message G4d39@path))) (reverse (string-split G4d37@paths '#\:)))) G4d35@t) (void))) G4d31@paths))) (set! G4cf8@for-each-with-index (lambda (G4d3b@proc G4d3c@lst) (letrec ((G4d3f@loop (lambda (G4d41@i G4d42@lst) (if (null? G4d42@lst) (if '#f '#f (void)) (begin (G4d3b@proc G4d41@i (car G4d42@lst)) (G4d3f@loop (+ G4d41@i '1) (cdr G4d42@lst))))))) (G4d3f@loop '1 G4d3c@lst)))) (set! G4cfa@conditioon-printer (lambda (G4d45@e G4d46@port) ((lambda (G4d4a@ref) (begin (set! G4d4a@ref (lambda (G4d59@rtd G4d5a@i G4d5b@x) ((lambda (G4d5f@val) (if (symbol? G4d5f@val) (ungensym G4d5f@val) G4d5f@val)) ((record-accessor G4d59@rtd G4d5a@i) G4d5b@x)))) (begin (display '" Condition components:\n" G4d46@port) (G4cf8@for-each-with-index (lambda (G4d4b@i G4d4c@x) ((lambda (G4d4f@rtd) (begin (format G4d46@port '"   ~d. ~a" G4d4b@i (record-type-name G4d4f@rtd)) ((lambda (G4d51@v) ((lambda (G4d53@t) (if (memv G4d53@t '(0)) (newline G4d46@port) (if (memv G4d53@t '(1)) (begin (display '": " G4d46@port) (write (G4d4a@ref G4d4f@rtd '0 G4d4c@x) G4d46@port) (newline G4d46@port)) (begin (display '":\n" G4d46@port) ((letrec ((G4d55@f (lambda (G4d57@i) (if (not (= G4d57@i (vector-length G4d51@v))) (begin (display '"       " G4d46@port) (display (vector-ref G4d51@v G4d57@i) G4d46@port) (display '": " G4d46@port) (write (G4d4a@ref G4d4f@rtd G4d57@i G4d4c@x) G4d46@port) (newline G4d46@port) (G4d55@f (+ G4d57@i '1))) (void))))) G4d55@f) '0))))) (vector-length G4d51@v))) (record-type-field-names G4d4f@rtd)))) (record-rtd G4d4c@x))) (simple-conditions G4d45@e))))) '#f))) (set! G4cfc@repl (lambda G4d61@x ((lambda (G4d64@rec) (begin (set! G4d64@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d67@G4d65) (lambda () (with-exception-handler (lambda (G4d69@e) ((call/cc (lambda (G4d6b@G4d66) (G4d67@G4d65 (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4cfa@conditioon-printer G4d69@e (current-error-port))) (G4d6b@G4d66 (lambda () (raise-continuable G4d69@e)))))))))) (lambda () ((letrec ((G4d6d@loop (lambda (G4d6f@line G4d70@accum) ((lambda (G4d74@parentheses-ok? G4d76@eval-string-print) (begin (set! G4d74@parentheses-ok? (lambda (G4d7b@text) ((letrec ((G4d7d@loop (lambda (G4d7f@chars G4d80@p0 G4d81@p1) (if (null? G4d7f@chars) (= '0 G4d80@p0 G4d81@p1) ((lambda (G4d85@t) (if (memv G4d85@t '(#\()) (G4d7d@loop (cdr G4d7f@chars) (+ G4d80@p0 '1) G4d81@p1) (if (memv G4d85@t '(#\))) (G4d7d@loop (cdr G4d7f@chars) (- G4d80@p0 '1) G4d81@p1) (if (memv G4d85@t '(#\[)) (G4d7d@loop (cdr G4d7f@chars) G4d80@p0 (+ G4d81@p1 '1)) (if (memv G4d85@t '(#\])) (G4d7d@loop (cdr G4d7f@chars) G4d80@p0 (- G4d81@p1 '1)) (G4d7d@loop (cdr G4d7f@chars) G4d80@p0 G4d81@p1)))))) (car G4d7f@chars)))))) G4d7d@loop) (string->list G4d7b@text) '0 '0))) (set! G4d76@eval-string-print (lambda (G4d79@text) (if (not (or (string=? '"\n" G4d79@text) (= '0 (string-length G4d79@text)))) (write (G4d0a@eval-top-level (call-with-port (open-string-input-port G4d79@text) read))) (void)))) (if (eof-object? G4d6f@line) (begin (G4d76@eval-string-print G4d70@accum) (exit)) ((lambda (G4d77@current) (if (G4d74@parentheses-ok? G4d77@current) (G4d76@eval-string-print G4d77@current) (G4d6d@loop (get-line (current-input-port)) G4d77@current))) (string-append G4d70@accum G4d6f@line))))) '#f '#f)))) G4d6d@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d64@rec)))) (G4d64@rec))) '#f))) (set! G4cfe@trace-printer (G28ef@G2825@make-parameter write)) (set! G4d00@command-line (G28ef@G2825@make-parameter (get-command-line))) (set! G4d02@local-library-path (lambda (G4d87@filename) (cons '"." (G2b58@G29ed@library-path)))) (set! G4d04@load/args (lambda (G4d89@filename . G4d8b@args) (begin (apply G4d14@load-r6rs-top-level G4d89@filename 'load G4d8b@args) (void)))) (set! G4d06@load (lambda (G4d8d@filename) (begin (apply G4d14@load-r6rs-top-level G4d8d@filename 'load (G4d00@command-line)) (void)))) (set! G4d08@ironscheme-build (lambda () (G4d06@load '"ironscheme-buildscript.ss"))) (set! G4d0a@eval-top-level (lambda (G4d8f@x) (G492a@G301d@eval G4d8f@x (G4940@G3049@interaction-environment)))) (set! G4d0c@compile-system-libraries (lambda () (G4d0a@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d0e@compile (lambda (G4d91@filename) (G4d14@load-r6rs-top-level G4d91@filename 'compile))) (set! G4d10@compile->closure (lambda (G4d93@filename) (G4d14@load-r6rs-top-level G4d93@filename 'closure))) (set! G4d12@pre-compile-r6rs-file (lambda (G4d95@filename) (G4d14@load-r6rs-top-level G4d95@filename 'compile))) (set! G4d14@load-r6rs-top-level (lambda (G4d97@filename G4d98@how . G4d9b@args) ((lambda (G4d9f@G4d9d G4da0@G4d9e) ((lambda (G4da3@swap) (dynamic-wind G4da3@swap (lambda () ((lambda (G4da5@x*) ((lambda (G4da7@t) (if (memv G4da7@t '(closure)) (G493f@G3047@pre-compile-r6rs-top-level G4da5@x*) (if (memv G4da7@t '(load)) ((lambda (G4dab@G4da9 G4dac@G4daa) ((lambda (G4daf@swap) (dynamic-wind G4daf@swap (lambda () ((G493e@G3045@compile-r6rs-top-level G4da5@x*))) G4daf@swap)) (lambda () ((lambda (G4db1@t) (begin (G4dab@G4da9 G4dac@G4daa) (set! G4dac@G4daa G4db1@t))) (G4dab@G4da9))))) G4d00@command-line (cons G4d97@filename (car G4d9b@args))) (if (memv G4da7@t '(compile)) (begin (G493e@G3045@compile-r6rs-top-level G4da5@x*) (G2b5c@G29f5@serialize-all G28ea@G281b@serialize-library G2944@G28fd@compile-core-expr)) (if '#f '#f (void)))))) G4d98@how)) (with-input-from-file G4d97@filename (lambda () ((letrec ((G4db3@f (lambda () ((lambda (G4db5@x) (if (eof-object? G4db5@x) '() (cons G4db5@x (G4db3@f)))) (G28e2@G280b@read-annotated))))) G4db3@f)))))) G4da3@swap)) (lambda () ((lambda (G4db7@t) (begin (G4d9f@G4d9d G4da0@G4d9e) (set! G4da0@G4d9e G4db7@t))) (G4d9f@G4d9d))))) G2b58@G29ed@library-path (G4d02@local-library-path G4d97@filename)))) (begin (set! G4dc9@G4d14@load-r6rs-top-level G4d14@load-r6rs-top-level) (set! G4dc8@G4d12@pre-compile-r6rs-file G4d12@pre-compile-r6rs-file) (set! G4dc7@G4d10@compile->closure G4d10@compile->closure) (set! G4dc6@G4d0e@compile G4d0e@compile) (set! G4dc5@G4d0c@compile-system-libraries G4d0c@compile-system-libraries) (set! G4dc4@G4d0a@eval-top-level G4d0a@eval-top-level) (set! G4dc3@G4d08@ironscheme-build G4d08@ironscheme-build) (set! G4dc2@G4d06@load G4d06@load) (set! G4dc1@G4d04@load/args G4d04@load/args) (set! G4dc0@G4d02@local-library-path G4d02@local-library-path) (set! G4dbf@G4d00@command-line G4d00@command-line) (set! G4dbe@G4cfe@trace-printer G4cfe@trace-printer) (set! G4dbd@G4cfc@repl G4cfc@repl) (set! G4dbc@G4cfa@conditioon-printer G4cfa@conditioon-printer) (set! G4dbb@G4cf8@for-each-with-index G4cf8@for-each-with-index) (set! G4dba@G4cf6@parse-and-add-library-path G4cf6@parse-and-add-library-path) (set! G4db9@G4cf4@add-library-path! G4cf4@add-library-path!) (G2b5d@G29f7@current-precompiled-library-loader G28eb@G281d@load-serialized-library) (set-symbol-value! 'load G4d06@load) (set-symbol-value! 'pre-compile-r6rs-file G4d12@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d0a@eval-top-level) (set-symbol-value! 'int-env-syms G4921@G300b@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2943@G28fb@expanded->core) (set-symbol-value! 'trace-printer G4cfe@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d15@c) (condition (G4c51@G4a61@make-non-continuable-violation) (G4c47@G4a48@make-who-condition 'raise) (G4c0b@G49ab@make-message-condition '"returned from non-continuable exception") (G4c3d@G4a2e@make-irritants-condition (list G4d15@c))))) (G4cf6@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4cf6@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b58@G29ed@library-path (append (G2b58@G29ed@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4d17@prefix) (G2b59@G29ef@library-extensions (G4d17@prefix '".mosh" (G2b59@G29ef@library-extensions)))) (lambda (G4d19@ext G4d1a@ls) (append (map (lambda (G4d1d@x) (string-append G4d19@ext G4d1d@x)) G4d1a@ls) G4d1a@ls))) ((lambda (G4d1f@args G4d20@port) ((lambda (G4d24@ref) (begin (set! G4d24@ref (lambda (G4d27@rtd G4d28@i G4d29@x) ((lambda (G4d2d@val) (if (symbol? G4d2d@val) (ungensym G4d2d@val) G4d2d@val)) ((record-accessor G4d27@rtd G4d28@i) G4d29@x)))) (with-exception-handler (lambda (G4d25@c) (G4cfa@conditioon-printer G4d25@c (current-error-port))) (lambda () (if (null? G4d1f@args) (G4cfc@repl) (G4d14@load-r6rs-top-level (car G4d1f@args) 'load (cdr G4d1f@args))))))) '#f)) (G4d00@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
