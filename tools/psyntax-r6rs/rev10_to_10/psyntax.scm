;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G288e@read-annotated G2890@annotation-stripped G2892@annotation? G2894@annotation-source G2896@annotation-expression G2898@scm->fasl G289a@fasl-save G289c@fasl-load G289e@serialize-library G28a0@load-serialized-library G28a2@make-record-printer G28a4@compile-core G28a6@read-library-source-file G28a8@make-parameter G2942@file-options-spec) (begin (set! G288e@read-annotated read) (set! G2890@annotation-stripped (lambda (G2943@x) (G2896@annotation-expression G2943@x))) (set! G2892@annotation? (lambda (G2945@x) (source-info G2945@x))) (set! G2894@annotation-source (lambda (G2947@x) (source-info G2947@x))) (set! G2896@annotation-expression (lambda (G2949@x) (if (pair? G2949@x) (cons (car G2949@x) (cdr G2949@x)) (display '"line:46\n")))) (set! G2898@scm->fasl (lambda (G294b@filename) (string-append G294b@filename '".fasl"))) (set! G289a@fasl-save (lambda (G294d@filename G294e@obj) (call-with-port (open-file-output-port G294d@filename) (lambda (G2951@port) ((symbol-value 'fasl-write!) G294e@obj G2951@port))))) (set! G289c@fasl-load (lambda (G2953@filename) (call-with-port (open-file-input-port G2953@filename) (symbol-value 'fasl-read!)))) (set! G289e@serialize-library (lambda (G2955@filename G2956@obj) (begin (format '#t '"serialize-library ~a\n..." G2955@filename) ((lambda (G2959@fasl-file) (begin (if (file-exists? G2959@fasl-file) (delete-file G2959@fasl-file) (void)) (call/cc (lambda (G295c@G295b) (with-exception-handler (lambda (G295e@c) (G295c@G295b (if '#t (begin (format '#t '"Warning:serialize-library failed " G2955@filename) (if (file-exists? G2959@fasl-file) (delete-file G2959@fasl-file) (void)) '#f) (raise G295e@c)))) (lambda () (begin '#f (G289a@fasl-save G2959@fasl-file G2956@obj) (display '"OK\n")))))))) (G2898@scm->fasl G2955@filename))))) (set! G28a0@load-serialized-library (lambda (G2960@filename G2961@obj) ((lambda (G2964@fasl-file) (if (if (file-exists? G2964@fasl-file) (begin '#f ((symbol-value 'file-newer?) G2964@fasl-file G2960@filename)) '#f) ((lambda (G2966@expanded2core) ((lambda (G2968@code) ((lambda (G296a@pivot) ((lambda (G296c@visit) ((lambda (G296e@visit-proc) ((lambda () (begin (set-car! G296a@pivot G296e@visit-proc) ((lambda (G2970@pivot) ((lambda (G2972@invoke) ((lambda () (begin (set-car! G2970@pivot (lambda () (eval-core G2972@invoke))) (apply G2961@obj G2968@code))))) (G2966@expanded2core (car G2970@pivot)))) (cdr G296a@pivot)) '#t)))) (lambda () (eval-core G296c@visit)))) (G2966@expanded2core (car G296a@pivot)))) (cddddr (cddddr G2968@code)))) (G289c@fasl-load G2964@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2898@scm->fasl G2960@filename)))) (set! G28a2@make-record-printer (lambda (G2974@name G2975@printer) (lambda G2978@x (begin (display '"record printer") (for-each display G2978@x))))) (set! G28a4@compile-core (lambda G297a@x (apply error 'comile-core '"not implementated" G297a@x))) (set! G28a6@read-library-source-file (lambda (G297c@file-name) (with-input-from-file G297c@file-name G288e@read-annotated))) (set! G28a8@make-parameter (lambda G298c ((lambda (G298d) (if (= G298d '1) (apply (lambda (G297e@x) (G28a8@make-parameter G297e@x (lambda (G2980@x) G2980@x))) G298c) (if (= G298d '2) (apply (lambda (G2982@x G2983@fender) ((lambda (G2986@x) (lambda G298a ((lambda (G298b) (if (= G298b '0) (apply (lambda () G2986@x) G298a) (if (= G298b '1) (apply (lambda (G2988@v) (set! G2986@x (G2983@fender G2988@v))) G298a) (error 'apply '"invalid arg count")))) (length G298a)))) (G2983@fender G2982@x))) G298c) (error 'apply '"invalid arg count")))) (length G298c)))) (set! G2942@file-options-spec (lambda (G298e@x) G298e@x)) (begin (set! G299e@G2942@file-options-spec G2942@file-options-spec) (set! G299d@G28a8@make-parameter G28a8@make-parameter) (set! G299c@G28a6@read-library-source-file G28a6@read-library-source-file) (set! G299b@G28a4@compile-core G28a4@compile-core) (set! G299a@G28a2@make-record-printer G28a2@make-record-printer) (set! G2999@G28a0@load-serialized-library G28a0@load-serialized-library) (set! G2998@G289e@serialize-library G289e@serialize-library) (set! G2997@G289c@fasl-load G289c@fasl-load) (set! G2996@G289a@fasl-save G289a@fasl-save) (set! G2995@G2898@scm->fasl G2898@scm->fasl) (set! G2994@G2896@annotation-expression G2896@annotation-expression) (set! G2993@G2894@annotation-source G2894@annotation-source) (set! G2992@G2892@annotation? G2892@annotation?) (set! G2991@G2890@annotation-stripped G2890@annotation-stripped) (set! G2990@G288e@read-annotated G288e@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G29a3@current-primitive-locations G29a5@mutable? G29a7@rewriter G29a9@expanded->core G29ab@compile-core-expr G29ad@pretty-print G29af@compile-core-expr-to-port) (begin (set! G29a3@current-primitive-locations (G299d@G28a8@make-parameter (lambda (G29b0@x) '#f) (lambda (G29b2@p) G29b2@p))) (set! G29a5@mutable? (lambda (G29b4@x) ((lambda (G29b7@simple?) (begin (set! G29b7@simple? (lambda (G29b8@x) ((lambda (G29ba@t) (if G29ba@t G29ba@t ((lambda (G29bc@t) (if G29bc@t G29bc@t ((lambda (G29be@t) (if G29be@t G29be@t ((lambda (G29c0@t) (if G29c0@t G29c0@t ((lambda (G29c2@t) (if G29c2@t G29c2@t ((lambda (G29c4@t) (if G29c4@t G29c4@t (begin '#f (number? G29b8@x)))) (bytevector? G29b8@x)))) (string? G29b8@x)))) (boolean? G29b8@x)))) (symbol? G29b8@x)))) (char? G29b8@x)))) (null? G29b8@x)))) (not (G29b7@simple? G29b4@x)))) '#f))) (set! G29a7@rewriter (lambda (G29c6@quote-hack?) ((lambda (G29c9@f) (begin (set! G29c9@f (lambda (G29ca@x) (if (pair? G29ca@x) ((lambda (G29cc@t) (if (memv G29cc@t '(quote)) (if (if G29c6@quote-hack? (begin '#f (G29a5@mutable? (cadr G29ca@x))) '#f) ((lambda (G29ce@g) (begin (set-symbol-value! G29ce@g (cadr G29ca@x)) G29ce@g)) (gensym)) G29ca@x) (if (memv G29cc@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29d0@x) (cons (car G29d0@x) (map G29c9@f (cdr G29d0@x)))) (cdr G29ca@x))) (if (memv G29cc@t '(lambda)) (cons* 'lambda (cadr G29ca@x) (map G29c9@f (cddr G29ca@x))) (if (memv G29cc@t '(letrec)) ((lambda (G29d2@bindings G29d3@body*) ((lambda (G29d6@lhs* G29d7@rhs*) (cons* 'letrec (map list G29d6@lhs* (map G29c9@f G29d7@rhs*)) (map G29c9@f G29d3@body*))) (map car G29d2@bindings) (map cadr G29d2@bindings))) (cadr G29ca@x) (cddr G29ca@x)) (if (memv G29cc@t '(letrec*)) ((lambda (G29da@bindings G29db@body*) ((lambda (G29de@lhs* G29df@rhs*) (cons* 'letrec* (map list G29de@lhs* (map G29c9@f G29df@rhs*)) (map G29c9@f G29db@body*))) (map car G29da@bindings) (map cadr G29da@bindings))) (cadr G29ca@x) (cddr G29ca@x)) (if (memv G29cc@t '(library-letrec*)) ((lambda (G29e2@name G29e3@x) ((lambda (G29e6@bindings G29e7@body*) ((lambda (G29ea@lhs* G29eb@lhs** G29ec@rhs*) (cons* 'library-letrec* G29e2@name (map list G29ea@lhs* G29eb@lhs** (map G29c9@f G29ec@rhs*)) (map G29c9@f G29e7@body*))) (map car G29e6@bindings) (map cadr G29e6@bindings) (map caddr G29e6@bindings))) (cadr G29e3@x) (cddr G29e3@x))) (cadr G29ca@x) (cdr G29ca@x)) (if (memv G29cc@t '(begin)) (cons 'begin (map G29c9@f (cdr G29ca@x))) (if (memv G29cc@t '(set!)) (list 'set! (cadr G29ca@x) (G29c9@f (caddr G29ca@x))) (if (memv G29cc@t '(primitive)) ((lambda (G29f0@op) ((lambda (G29f2@t) (if G29f2@t ((lambda (G29f4@loc) G29f4@loc) G29f2@t) G29f0@op)) ((G29a3@current-primitive-locations) G29f0@op))) (cadr G29ca@x)) (if (memv G29cc@t '(define)) G29ca@x (if (list? G29ca@x) (map G29c9@f G29ca@x) (error 'rewrite '"invalid form ~s ~s" G29ca@x (list? G29ca@x)))))))))))))) (car G29ca@x)) G29ca@x))) G29c9@f)) '#f))) (set! G29a9@expanded->core (lambda (G29f6@x) ((G29a7@rewriter '#t) G29f6@x))) (set! G29ab@compile-core-expr (lambda (G29f8@x) ((G29a7@rewriter '#f) G29f8@x))) (set! G29ad@pretty-print write) (set! G29af@compile-core-expr-to-port (lambda (G29fa@x G29fb@p) (G29ad@pretty-print ((G29a7@rewriter '#f) G29fa@x) G29fb@p))) (begin (set! G2a04@G29af@compile-core-expr-to-port G29af@compile-core-expr-to-port) (set! G2a03@G29ad@pretty-print G29ad@pretty-print) (set! G2a02@G29ab@compile-core-expr G29ab@compile-core-expr) (set! G2a01@G29a9@expanded->core G29a9@expanded->core) (set! G2a00@G29a7@rewriter G29a7@rewriter) (set! G29ff@G29a5@mutable? G29a5@mutable?) (set! G29fe@G29a3@current-primitive-locations G29a3@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a5e@make-collection G2a60@current-library-collection G2a66@G2a61 G2a68@G2a63 G2a6a@G2a62 G2a6f@library? G2a71@make-library G2a73@library-id G2a75@library-name G2a77@library-version G2a79@library-imp* G2a7b@library-vis* G2a7d@library-inv* G2a7f@library-subst G2a81@library-env G2a83@library-visit-state G2a85@library-invoke-state G2a87@library-visit-code G2a89@library-invoke-code G2a8b@library-visible? G2a8d@library-source-file-name G2a8f@set-library-id! G2a91@set-library-name! G2a93@set-library-version! G2a95@set-library-imp*! G2a97@set-library-vis*! G2a99@set-library-inv*! G2a9b@set-library-subst! G2a9d@set-library-env! G2a9f@set-library-visit-state! G2aa1@set-library-invoke-state! G2aa3@set-library-visit-code! G2aa5@set-library-invoke-code! G2aa7@set-library-visible?! G2aa9@set-library-source-file-name! G2aab@rp G2aad@find-dependencies G2aaf@find-library-by G2ab1@library-path G2ab3@library-extensions G2ab5@library-name->file-name G2ab7@file-locator G2ab9@serialize-all G2abb@current-precompiled-library-loader G2abd@try-load-from-file G2abf@library-loader G2ac1@current-library-expander G2ac3@external-pending-libraries G2ac5@find-external-library G2ac7@find-library-by-name G2ac9@library-exists? G2acb@find-library-by-spec/die G2acd@label->binding-table G2acf@install-library-record G2ad1@install-library G2ad3@imported-label->binding G2ad5@invoke-library G2ad7@visit-library G2ad9@invoke-library-by-spec G2adb@installed-libraries G2add@library-spec) (begin (set! G2a5e@make-collection (lambda () ((lambda (G2ade@set) ((lambda (G2ae1@set-cons) (begin (set! G2ae1@set-cons (lambda (G2ae6@x G2ae7@ls) (if (memq G2ae6@x G2ae7@ls) G2ae7@ls (cons G2ae6@x G2ae7@ls)))) (lambda G2ae4 ((lambda (G2ae5) (if (= G2ae5 '0) (apply (lambda () G2ade@set) G2ae4) (if (= G2ae5 '1) (apply (lambda (G2ae2@x) (set! G2ade@set (G2ae1@set-cons G2ae2@x G2ade@set))) G2ae4) (error 'apply '"invalid arg count")))) (length G2ae4))))) '#f)) '()))) (set! G2a60@current-library-collection (G299d@G28a8@make-parameter (G2a5e@make-collection) (lambda (G2aea@x) (begin (if (not (procedure? G2aea@x)) (assertion-violation 'current-library-collection '"not a procedure" G2aea@x) (void)) G2aea@x)))) (set! G2a66@G2a61 (make-record-type-descriptor 'library '#f 'G2a64 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a68@G2a63 '#f) (set! G2a6a@G2a62 (make-record-constructor-descriptor G2a66@G2a61 '#f G2a68@G2a63)) (set! G2a6f@library? (record-predicate G2a66@G2a61)) (set! G2a71@make-library (record-constructor G2a6a@G2a62)) (set! G2a73@library-id (record-accessor G2a66@G2a61 '0)) (set! G2a75@library-name (record-accessor G2a66@G2a61 '1)) (set! G2a77@library-version (record-accessor G2a66@G2a61 '2)) (set! G2a79@library-imp* (record-accessor G2a66@G2a61 '3)) (set! G2a7b@library-vis* (record-accessor G2a66@G2a61 '4)) (set! G2a7d@library-inv* (record-accessor G2a66@G2a61 '5)) (set! G2a7f@library-subst (record-accessor G2a66@G2a61 '6)) (set! G2a81@library-env (record-accessor G2a66@G2a61 '7)) (set! G2a83@library-visit-state (record-accessor G2a66@G2a61 '8)) (set! G2a85@library-invoke-state (record-accessor G2a66@G2a61 '9)) (set! G2a87@library-visit-code (record-accessor G2a66@G2a61 '10)) (set! G2a89@library-invoke-code (record-accessor G2a66@G2a61 '11)) (set! G2a8b@library-visible? (record-accessor G2a66@G2a61 '12)) (set! G2a8d@library-source-file-name (record-accessor G2a66@G2a61 '13)) (set! G2a8f@set-library-id! (record-mutator G2a66@G2a61 '0)) (set! G2a91@set-library-name! (record-mutator G2a66@G2a61 '1)) (set! G2a93@set-library-version! (record-mutator G2a66@G2a61 '2)) (set! G2a95@set-library-imp*! (record-mutator G2a66@G2a61 '3)) (set! G2a97@set-library-vis*! (record-mutator G2a66@G2a61 '4)) (set! G2a99@set-library-inv*! (record-mutator G2a66@G2a61 '5)) (set! G2a9b@set-library-subst! (record-mutator G2a66@G2a61 '6)) (set! G2a9d@set-library-env! (record-mutator G2a66@G2a61 '7)) (set! G2a9f@set-library-visit-state! (record-mutator G2a66@G2a61 '8)) (set! G2aa1@set-library-invoke-state! (record-mutator G2a66@G2a61 '9)) (set! G2aa3@set-library-visit-code! (record-mutator G2a66@G2a61 '10)) (set! G2aa5@set-library-invoke-code! (record-mutator G2a66@G2a61 '11)) (set! G2aa7@set-library-visible?! (record-mutator G2a66@G2a61 '12)) (set! G2aa9@set-library-source-file-name! (record-mutator G2a66@G2a61 '13)) (set! G2aab@rp (G299a@G28a2@make-record-printer 'library (lambda (G2aec@x G2aed@p G2aee@wr) (begin (if (not (G2a6f@library? G2aec@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a77@library-version G2aec@x)) (G2a75@library-name G2aec@x) (append (G2a75@library-name G2aec@x) (list (G2a77@library-version G2aec@x))))) G2aed@p))))) (set! G2aad@find-dependencies (lambda (G2af2@ls) (if (null? G2af2@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2aaf@find-library-by (lambda (G2af4@pred) ((letrec ((G2af6@f (lambda (G2af8@ls) (if (null? G2af8@ls) '#f (if (G2af4@pred (car G2af8@ls)) (car G2af8@ls) (G2af6@f (cdr G2af8@ls))))))) G2af6@f) ((G2a60@current-library-collection))))) (set! G2ab1@library-path (G299d@G28a8@make-parameter '(".") (lambda (G2afa@x) (if (if (list? G2afa@x) (begin '#f (for-all string? G2afa@x)) '#f) (map (lambda (G2afc@x) G2afc@x) G2afa@x) (assertion-violation 'library-path '"not a list of strings" G2afa@x))))) (set! G2ab3@library-extensions (G299d@G28a8@make-parameter '(".sls" ".ss" ".scm") (lambda (G2afe@x) (if (if (list? G2afe@x) (begin '#f (for-all string? G2afe@x)) '#f) (map (lambda (G2b00@x) G2b00@x) G2afe@x) (assertion-violation 'library-extensions '"not a list of strings" G2afe@x))))) (set! G2ab5@library-name->file-name (lambda (G2b02@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2b06@G2b04 G2b07@G2b05) ((lambda (G2b0a@extract G2b0b@p) ((lambda (G2b0f@display-hex) (begin (set! G2b0f@display-hex (lambda (G2b1e@n) (if (<= '0 G2b1e@n '9) (display G2b1e@n G2b0b@p) (display (integer->char (+ (char->integer '#\A) (- G2b1e@n '10))) G2b0b@p)))) (begin ((letrec ((G2b10@f (lambda (G2b12@ls) (if (not (null? G2b12@ls)) (begin (display '"/" G2b0b@p) (for-each (lambda (G2b14@c) (if ((lambda (G2b16@t) (if G2b16@t G2b16@t ((lambda (G2b18@t) (if G2b18@t G2b18@t ((lambda (G2b1a@t) (if G2b1a@t G2b1a@t (begin '#f (memv G2b14@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2b14@c '#\9)))) (char<=? '#\A G2b14@c '#\Z)))) (char<=? '#\a G2b14@c '#\z)) (display G2b14@c G2b0b@p) (begin (display '"%" G2b0b@p) ((lambda (G2b1c@n) (begin (G2b0f@display-hex (quotient G2b1c@n '16)) (G2b0f@display-hex (remainder G2b1c@n '16)))) (char->integer G2b14@c))))) (string->list (symbol->string (car G2b12@ls)))) (G2b10@f (cdr G2b12@ls))) (void))))) G2b10@f) G2b02@x) (G2b0a@extract)))) '#f)) G2b07@G2b05 G2b06@G2b04))))) (set! G2ab7@file-locator (G299d@G28a8@make-parameter (lambda (G2b20@x) ((lambda (G2b22@str) ((letrec ((G2b24@f (lambda (G2b26@ls G2b27@exts G2b28@failed-list) (if (null? G2b26@ls) ((lambda () ((lambda (G2b34@G2b2f G2b36@G2b31 G2b38@G2b30 G2b3d@G2b2e G2b3f@make-library-resolution-condition G2b41@G2b2c G2b43@G2b2d G2b45@library-resolution-condition? G2b47@condition-library G2b49@condition-files) (begin (set! G2b34@G2b2f (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b32 '#f '#f '#((immutable library) (immutable files)))) (set! G2b36@G2b31 '#f) (set! G2b38@G2b30 (make-record-constructor-descriptor G2b34@G2b2f &condition-rcd G2b36@G2b31)) (set! G2b3d@G2b2e (record-predicate G2b34@G2b2f)) (set! G2b3f@make-library-resolution-condition (record-constructor G2b38@G2b30)) (set! G2b41@G2b2c (record-accessor G2b34@G2b2f '0)) (set! G2b43@G2b2d (record-accessor G2b34@G2b2f '1)) (set! G2b45@library-resolution-condition? (condition-predicate G2b34@G2b2f)) (set! G2b47@condition-library (condition-accessor G2b34@G2b2f G2b41@G2b2c)) (set! G2b49@condition-files (condition-accessor G2b34@G2b2f G2b43@G2b2d)) (raise (condition (G4c4a@G4b38@make-error) (G4c64@G4b8e@make-who-condition 'expander) (G4c36@G4af8@make-message-condition '"cannot locate library in library-path") (G2b3f@make-library-resolution-condition G2b20@x (reverse G2b28@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b27@exts) (G2b24@f (cdr G2b26@ls) (G2ab3@library-extensions) G2b28@failed-list) ((lambda (G2b4a@name) (if (file-exists? G2b4a@name) G2b4a@name (G2b24@f G2b26@ls (cdr G2b27@exts) (cons G2b4a@name G2b28@failed-list)))) (string-append (car G2b26@ls) G2b22@str (car G2b27@exts)))))))) G2b24@f) (G2ab1@library-path) (G2ab3@library-extensions) '())) (G2ab5@library-name->file-name G2b20@x))) (lambda (G2b4c@f) (if (procedure? G2b4c@f) G2b4c@f (assertion-violation 'file-locator '"not a procedure" G2b4c@f))))) (set! G2ab9@serialize-all (lambda (G2b4e@serialize G2b4f@compile) ((lambda (G2b53@library-desc) (begin (set! G2b53@library-desc (lambda (G2b56@x) (list (G2a73@library-id G2b56@x) (G2a75@library-name G2b56@x)))) (for-each (lambda (G2b54@x) (if (G2a8d@library-source-file-name G2b54@x) (G2b4e@serialize (G2a8d@library-source-file-name G2b54@x) (list (G2a73@library-id G2b54@x) (G2a75@library-name G2b54@x) (G2a77@library-version G2b54@x) (map G2b53@library-desc (G2a79@library-imp* G2b54@x)) (map G2b53@library-desc (G2a7b@library-vis* G2b54@x)) (map G2b53@library-desc (G2a7d@library-inv* G2b54@x)) (G2a7f@library-subst G2b54@x) (G2a81@library-env G2b54@x) (G2b4f@compile (G2a87@library-visit-code G2b54@x)) (G2b4f@compile (G2a89@library-invoke-code G2b54@x)) (G2a8b@library-visible? G2b54@x))) (void))) ((G2a60@current-library-collection))))) '#f))) (set! G2abb@current-precompiled-library-loader (G299d@G28a8@make-parameter (lambda (G2b58@filename G2b59@sk) '#f))) (set! G2abd@try-load-from-file (lambda (G2b5c@filename) ((G2abb@current-precompiled-library-loader) G2b5c@filename (lambda G2b82 ((lambda (G2b83) (if (= G2b83 '11) (apply (lambda (G2b5e@id G2b5f@name G2b60@ver G2b61@imp* G2b62@vis* G2b63@inv* G2b64@exp-subst G2b65@exp-env G2b66@visit-proc G2b67@invoke-proc G2b68@visible?) ((letrec ((G2b74@f (lambda (G2b76@deps) (if (null? G2b76@deps) (begin (G2ad1@install-library G2b5e@id G2b5f@name G2b60@ver G2b61@imp* G2b62@vis* G2b63@inv* G2b64@exp-subst G2b65@exp-env G2b66@visit-proc G2b67@invoke-proc '#f '#f G2b68@visible? '#f) '#t) ((lambda (G2b78@d) ((lambda (G2b7a@label G2b7b@dname) ((lambda (G2b7e@l) (if (if (G2a6f@library? G2b7e@l) (begin '#f (eq? G2b7a@label (G2a73@library-id G2b7e@l))) '#f) (G2b74@f (cdr G2b76@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b5f@name G2b7b@dname G2b5c@filename G2b7e@l G2b7a@label (G2a73@library-id G2b7e@l)) '#f))) (G2ac7@find-library-by-name G2b7b@dname))) (car G2b78@d) (cadr G2b78@d))) (car G2b76@deps)))))) G2b74@f) (append G2b61@imp* G2b62@vis* G2b63@inv*))) G2b82) (if (>= G2b83 '0) (apply (lambda G2b80@others '#f) G2b82) (error 'apply '"invalid arg count")))) (length G2b82)))))) (set! G2abf@library-loader (G299d@G28a8@make-parameter (lambda (G2b84@x) ((lambda (G2b86@file-name) (if (not G2b86@file-name) (assertion-violation '#f '"cannot file library" G2b84@x) ((lambda (G2b88@t) (if G2b88@t G2b88@t (begin '#f ((G2ac1@current-library-expander) (G299c@G28a6@read-library-source-file G2b86@file-name) G2b86@file-name (lambda (G2b8a@name) (if (not (equal? G2b8a@name G2b84@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b8e@G2b8c G2b8f@G2b8d) ((lambda (G2b92@e G2b93@p) (begin (display '"expected to find library " G2b93@p) (write G2b84@x G2b93@p) (display '" in file " G2b93@p) (display G2b86@file-name G2b93@p) (display '", found " G2b93@p) (write G2b8a@name G2b93@p) (display '" instead" G2b93@p) (G2b92@e))) G2b8f@G2b8d G2b8e@G2b8c)))) (void))))))) (G2abd@try-load-from-file G2b86@file-name)))) ((G2ab7@file-locator) G2b84@x))) (lambda (G2b96@f) (if (procedure? G2b96@f) G2b96@f (assertion-violation 'library-locator '"not a procedure" G2b96@f))))) (set! G2ac1@current-library-expander (G299d@G28a8@make-parameter (lambda (G2b98@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b9a@f) (if (procedure? G2b9a@f) G2b9a@f (assertion-violation 'library-expander '"not a procedure" G2b9a@f))))) (set! G2ac3@external-pending-libraries (G299d@G28a8@make-parameter '())) (set! G2ac5@find-external-library (lambda (G2b9c@name) (begin (if (member G2b9c@name (G2ac3@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b9c@name) (void)) ((lambda (G2ba0@G2b9e@external-pending-libraries G2ba1@G2b9f@external-pending-libraries) ((lambda (G2ba4@swap) (dynamic-wind G2ba4@swap (lambda () (begin ((G2abf@library-loader) G2b9c@name) ((lambda (G2ba6@t) (if G2ba6@t G2ba6@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b9c@name)))) (G2aaf@find-library-by (lambda (G2ba8@x) (equal? (G2a75@library-name G2ba8@x) G2b9c@name)))))) G2ba4@swap)) (lambda () ((lambda (G2baa@t) (begin (G2ba0@G2b9e@external-pending-libraries G2ba1@G2b9f@external-pending-libraries) (set! G2ba1@G2b9f@external-pending-libraries G2baa@t))) (G2ba0@G2b9e@external-pending-libraries))))) G2ac3@external-pending-libraries (cons G2b9c@name (G2ac3@external-pending-libraries)))))) (set! G2ac7@find-library-by-name (lambda (G2bac@name) ((lambda (G2bae@t) (if G2bae@t G2bae@t (begin '#f (G2ac5@find-external-library G2bac@name)))) (G2aaf@find-library-by (lambda (G2bb0@x) (equal? (G2a75@library-name G2bb0@x) G2bac@name)))))) (set! G2ac9@library-exists? (lambda (G2bb2@name) (if (G2aaf@find-library-by (lambda (G2bb4@x) (equal? (G2a75@library-name G2bb4@x) G2bb2@name))) (begin '#f '#t) '#f))) (set! G2acb@find-library-by-spec/die (lambda (G2bb6@spec) ((lambda (G2bb8@id) ((lambda (G2bba@t) (if G2bba@t G2bba@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2bb6@spec)))) (G2aaf@find-library-by (lambda (G2bbc@x) (eq? G2bb8@id (G2a73@library-id G2bbc@x)))))) (car G2bb6@spec)))) (set! G2acd@label->binding-table (make-eq-hashtable)) (set! G2acf@install-library-record (lambda (G2bbe@lib) (begin ((lambda (G2bc0@exp-env) (for-each (lambda (G2bc2@x) ((lambda (G2bc4@label G2bc5@binding) ((lambda (G2bc8@binding) (hashtable-set! G2acd@label->binding-table G2bc4@label G2bc8@binding)) ((lambda (G2bca@t) (if (memv G2bca@t '(global)) (cons 'global (cons G2bbe@lib (cdr G2bc5@binding))) (if (memv G2bca@t '(global-macro)) (cons 'global-macro (cons G2bbe@lib (cdr G2bc5@binding))) (if (memv G2bca@t '(global-macro!)) (cons 'global-macro! (cons G2bbe@lib (cdr G2bc5@binding))) G2bc5@binding)))) (car G2bc5@binding)))) (car G2bc2@x) (cdr G2bc2@x))) G2bc0@exp-env)) (G2a81@library-env G2bbe@lib)) ((G2a60@current-library-collection) G2bbe@lib)))) (set! G2ad1@install-library (lambda (G2bcc@id G2bcd@name G2bce@ver G2bcf@imp* G2bd0@vis* G2bd1@inv* G2bd2@exp-subst G2bd3@exp-env G2bd4@visit-proc G2bd5@invoke-proc G2bd6@visit-code G2bd7@invoke-code G2bd8@visible? G2bd9@source-file-name) ((lambda (G2be8@imp-lib* G2be9@vis-lib* G2bea@inv-lib*) (begin (if (not (if (symbol? G2bcc@id) (if (list? G2bcd@name) (begin '#f (list? G2bce@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2bcc@id G2bcd@name G2bce@ver) (void)) (if (G2ac9@library-exists? G2bcd@name) (assertion-violation 'install-library '"library is already installed" G2bcd@name) (void)) ((lambda (G2bee@lib) (G2acf@install-library-record G2bee@lib)) (G2a71@make-library G2bcc@id G2bcd@name G2bce@ver G2be8@imp-lib* G2be9@vis-lib* G2bea@inv-lib* G2bd2@exp-subst G2bd3@exp-env G2bd4@visit-proc G2bd5@invoke-proc G2bd6@visit-code G2bd7@invoke-code G2bd8@visible? G2bd9@source-file-name)))) (map G2acb@find-library-by-spec/die G2bcf@imp*) (map G2acb@find-library-by-spec/die G2bd0@vis*) (map G2acb@find-library-by-spec/die G2bd1@inv*)))) (set! G2ad3@imported-label->binding (lambda (G2bf0@lab) (hashtable-ref G2acd@label->binding-table G2bf0@lab '#f))) (set! G2ad5@invoke-library (lambda (G2bf2@lib) ((lambda (G2bf4@invoke) (if (procedure? G2bf4@invoke) (begin (G2aa1@set-library-invoke-state! G2bf2@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bf2@lib))) (for-each G2ad5@invoke-library (G2a7d@library-inv* G2bf2@lib)) (G2aa1@set-library-invoke-state! G2bf2@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bf2@lib))) (G2bf4@invoke) (G2aa1@set-library-invoke-state! G2bf2@lib '#t)) (void))) (G2a85@library-invoke-state G2bf2@lib)))) (set! G2ad7@visit-library (lambda (G2bf6@lib) ((lambda (G2bf8@visit) (if (procedure? G2bf8@visit) (begin (G2a9f@set-library-visit-state! G2bf6@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bf6@lib))) (for-each G2ad5@invoke-library (G2a7b@library-vis* G2bf6@lib)) (G2a9f@set-library-visit-state! G2bf6@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bf6@lib))) (G2bf8@visit) (G2a9f@set-library-visit-state! G2bf6@lib '#t)) (void))) (G2a83@library-visit-state G2bf6@lib)))) (set! G2ad9@invoke-library-by-spec (lambda (G2bfa@spec) (G2ad5@invoke-library (G2acb@find-library-by-spec/die G2bfa@spec)))) (set! G2adb@installed-libraries (lambda G2c04 ((lambda (G2c05) (if (= G2c05 '1) (apply (lambda (G2bfc@all?) ((letrec ((G2bfe@f (lambda (G2c00@ls) (if (null? G2c00@ls) '() (if ((lambda (G2c02@t) (if G2c02@t G2c02@t (begin '#f (G2a8b@library-visible? (car G2c00@ls))))) G2bfc@all?) (cons (car G2c00@ls) (G2bfe@f (cdr G2c00@ls))) (G2bfe@f (cdr G2c00@ls))))))) G2bfe@f) ((G2a60@current-library-collection)))) G2c04) (if (= G2c05 '0) (apply (lambda () (G2adb@installed-libraries '#f)) G2c04) (error 'apply '"invalid arg count")))) (length G2c04)))) (set! G2add@library-spec (lambda (G2c06@x) (begin (if (not (G2a6f@library? G2c06@x)) (assertion-violation 'library-spec '"not a library" G2c06@x) (void)) (list (G2a73@library-id G2c06@x) (G2a75@library-name G2c06@x) (G2a77@library-version G2c06@x))))) (begin (set! G2c44@G2add@library-spec G2add@library-spec) (set! G2c43@G2adb@installed-libraries G2adb@installed-libraries) (set! G2c42@G2ad9@invoke-library-by-spec G2ad9@invoke-library-by-spec) (set! G2c41@G2ad7@visit-library G2ad7@visit-library) (set! G2c40@G2ad5@invoke-library G2ad5@invoke-library) (set! G2c3f@G2ad3@imported-label->binding G2ad3@imported-label->binding) (set! G2c3e@G2ad1@install-library G2ad1@install-library) (set! G2c3d@G2acf@install-library-record G2acf@install-library-record) (set! G2c3c@G2acd@label->binding-table G2acd@label->binding-table) (set! G2c3b@G2acb@find-library-by-spec/die G2acb@find-library-by-spec/die) (set! G2c3a@G2ac9@library-exists? G2ac9@library-exists?) (set! G2c39@G2ac7@find-library-by-name G2ac7@find-library-by-name) (set! G2c38@G2ac5@find-external-library G2ac5@find-external-library) (set! G2c37@G2ac3@external-pending-libraries G2ac3@external-pending-libraries) (set! G2c36@G2ac1@current-library-expander G2ac1@current-library-expander) (set! G2c35@G2abf@library-loader G2abf@library-loader) (set! G2c34@G2abd@try-load-from-file G2abd@try-load-from-file) (set! G2c33@G2abb@current-precompiled-library-loader G2abb@current-precompiled-library-loader) (set! G2c32@G2ab9@serialize-all G2ab9@serialize-all) (set! G2c31@G2ab7@file-locator G2ab7@file-locator) (set! G2c30@G2ab5@library-name->file-name G2ab5@library-name->file-name) (set! G2c2f@G2ab3@library-extensions G2ab3@library-extensions) (set! G2c2e@G2ab1@library-path G2ab1@library-path) (set! G2c2d@G2aaf@find-library-by G2aaf@find-library-by) (set! G2c2c@G2aad@find-dependencies G2aad@find-dependencies) (set! G2c2b@G2aab@rp G2aab@rp) (set! G2c2a@G2aa9@set-library-source-file-name! G2aa9@set-library-source-file-name!) (set! G2c29@G2aa7@set-library-visible?! G2aa7@set-library-visible?!) (set! G2c28@G2aa5@set-library-invoke-code! G2aa5@set-library-invoke-code!) (set! G2c27@G2aa3@set-library-visit-code! G2aa3@set-library-visit-code!) (set! G2c26@G2aa1@set-library-invoke-state! G2aa1@set-library-invoke-state!) (set! G2c25@G2a9f@set-library-visit-state! G2a9f@set-library-visit-state!) (set! G2c24@G2a9d@set-library-env! G2a9d@set-library-env!) (set! G2c23@G2a9b@set-library-subst! G2a9b@set-library-subst!) (set! G2c22@G2a99@set-library-inv*! G2a99@set-library-inv*!) (set! G2c21@G2a97@set-library-vis*! G2a97@set-library-vis*!) (set! G2c20@G2a95@set-library-imp*! G2a95@set-library-imp*!) (set! G2c1f@G2a93@set-library-version! G2a93@set-library-version!) (set! G2c1e@G2a91@set-library-name! G2a91@set-library-name!) (set! G2c1d@G2a8f@set-library-id! G2a8f@set-library-id!) (set! G2c1c@G2a8d@library-source-file-name G2a8d@library-source-file-name) (set! G2c1b@G2a8b@library-visible? G2a8b@library-visible?) (set! G2c1a@G2a89@library-invoke-code G2a89@library-invoke-code) (set! G2c19@G2a87@library-visit-code G2a87@library-visit-code) (set! G2c18@G2a85@library-invoke-state G2a85@library-invoke-state) (set! G2c17@G2a83@library-visit-state G2a83@library-visit-state) (set! G2c16@G2a81@library-env G2a81@library-env) (set! G2c15@G2a7f@library-subst G2a7f@library-subst) (set! G2c14@G2a7d@library-inv* G2a7d@library-inv*) (set! G2c13@G2a7b@library-vis* G2a7b@library-vis*) (set! G2c12@G2a79@library-imp* G2a79@library-imp*) (set! G2c11@G2a77@library-version G2a77@library-version) (set! G2c10@G2a75@library-name G2a75@library-name) (set! G2c0f@G2a73@library-id G2a73@library-id) (set! G2c0e@G2a71@make-library G2a71@make-library) (set! G2c0d@G2a6f@library? G2a6f@library?) (set! G2c0c@G2a6a@G2a62 G2a6a@G2a62) (set! G2c0b@G2a68@G2a63 G2a68@G2a63) (set! G2c0a@G2a66@G2a61 G2a66@G2a61) (set! G2c09@G2a60@current-library-collection G2a60@current-library-collection) (set! G2c08@G2a5e@make-collection G2a5e@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c47@build-global-define G2ccb@build-lambda G2ccd@build-case-lambda G2ccf@build-let G2d17@build-sequence G2d19@build-void G2d1b@build-letrec G2d1d@build-letrec* G2d1f@build-library-letrec* G2d21@build-receive) (begin (set! G2c47@build-global-define (lambda (G2d22@x) (G2d19@build-void))) (set! G2ccb@build-lambda (lambda (G2d24@ae G2d25@vars G2d26@exp) (list 'lambda G2d25@vars G2d26@exp))) (set! G2ccd@build-case-lambda (lambda (G2d2a@ae G2d2b@vars* G2d2c@exp*) ((lambda (G2d31@build-error G2d33@build-pred G2d35@build-apply G2d37@expand-case-lambda) (begin (set! G2d31@build-error (lambda (G2d66@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d33@build-pred (lambda (G2d50@ae G2d51@n G2d52@vars) (call-with-values (lambda () ((letrec ((G2d58@f (lambda (G2d5a@vars G2d5b@count) (if (pair? G2d5a@vars) (G2d58@f (cdr G2d5a@vars) (+ G2d5b@count '1)) (if (null? G2d5a@vars) (values G2d5b@count '=) (values G2d5b@count '>=)))))) G2d58@f) G2d52@vars '0)) (lambda (G2d5e@G2d56 G2d5f@G2d57) ((lambda (G2d62@pred G2d63@count) (list (list 'primitive G2d62@pred) G2d51@n (list 'quote G2d63@count))) G2d5f@G2d57 G2d5e@G2d56))))) (set! G2d35@build-apply (lambda (G2d48@ae G2d49@g G2d4a@vars G2d4b@exp) (list '(primitive apply) (G2ccb@build-lambda G2d48@ae G2d4a@vars G2d4b@exp) G2d49@g))) (set! G2d37@expand-case-lambda (lambda (G2d38@ae G2d39@vars G2d3a@exp*) ((lambda (G2d3e@g G2d3f@n) (list 'lambda G2d3e@g (G2ccf@build-let G2d38@ae (list G2d3f@n) (list (list '(primitive length) G2d3e@g)) ((letrec ((G2d42@f (lambda (G2d44@vars* G2d45@exp*) (if (null? G2d44@vars*) (G2d31@build-error G2d38@ae) (list 'if (G2d33@build-pred G2d38@ae G2d3f@n (car G2d44@vars*)) (G2d35@build-apply G2d38@ae G2d3e@g (car G2d44@vars*) (car G2d45@exp*)) (G2d42@f (cdr G2d44@vars*) (cdr G2d45@exp*))))))) G2d42@f) G2d2b@vars* G2d3a@exp*)))) (gensym) (gensym)))) (if (= (length G2d2c@exp*) '1) (G2ccb@build-lambda G2d2a@ae (car G2d2b@vars*) (car G2d2c@exp*)) (G2d37@expand-case-lambda G2d2a@ae G2d2b@vars* G2d2c@exp*)))) '#f '#f '#f '#f))) (set! G2ccf@build-let (lambda (G2d68@ae G2d69@lhs* G2d6a@rhs* G2d6b@body) (cons (G2ccb@build-lambda G2d68@ae G2d69@lhs* G2d6b@body) G2d6a@rhs*))) (set! G2d17@build-sequence (lambda (G2d70@ae G2d71@exps) ((letrec ((G2d74@loop (lambda (G2d76@exps) (if (null? (cdr G2d76@exps)) (car G2d76@exps) (if (equal? (car G2d76@exps) (G2d19@build-void)) (G2d74@loop (cdr G2d76@exps)) (cons 'begin G2d76@exps)))))) G2d74@loop) G2d71@exps))) (set! G2d19@build-void (lambda () '((primitive void)))) (set! G2d1b@build-letrec (lambda (G2d78@ae G2d79@vars G2d7a@val-exps G2d7b@body-exp) (if (null? G2d79@vars) G2d7b@body-exp (list 'letrec (map list G2d79@vars G2d7a@val-exps) G2d7b@body-exp)))) (set! G2d1d@build-letrec* (lambda (G2d80@ae G2d81@vars G2d82@val-exps G2d83@body-exp) (if (null? G2d81@vars) G2d83@body-exp (G2ccf@build-let G2d80@ae G2d81@vars (map (lambda (G2d88@x) (list 'quote '#f)) G2d81@vars) (G2d17@build-sequence G2d80@ae (append (map (lambda (G2d8a@lhs G2d8b@rhs) (list 'set! G2d8a@lhs G2d8b@rhs)) G2d81@vars G2d82@val-exps) (list G2d83@body-exp))))))) (set! G2d1f@build-library-letrec* (lambda (G2d8e@ae G2d8f@name G2d90@vars G2d91@locs G2d92@val-exps G2d93@body-exp) (list 'library-letrec* G2d8f@name (map list G2d90@vars G2d91@locs G2d92@val-exps) G2d93@body-exp))) (set! G2d21@build-receive (lambda (G2d9a@ae G2d9b@vars G2d9c@producer G2d9d@body*) (begin (display '"************** in ") (cons 'receive (cons G2d9b@vars (cons G2d9c@producer G2d9d@body*)))))) (begin (set! G2dab@G2d21@build-receive G2d21@build-receive) (set! G2daa@G2d1f@build-library-letrec* G2d1f@build-library-letrec*) (set! G2da9@G2d1d@build-letrec* G2d1d@build-letrec*) (set! G2da8@G2d1b@build-letrec G2d1b@build-letrec) (set! G2da7@G2d19@build-void G2d19@build-void) (set! G2da6@G2d17@build-sequence G2d17@build-sequence) (set! G2da5@G2ccf@build-let G2ccf@build-let) (set! G2da4@G2ccd@build-case-lambda G2ccd@build-case-lambda) (set! G2da3@G2ccb@build-lambda G2ccb@build-lambda) (set! G2da2@G2c47@build-global-define G2c47@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2db8@set-cons G2dba@set-union G2dbf@top-mark* G2dc1@top-marked? G2dc3@gen-lexical G2dc5@gen-global G2dc7@gen-label G2dc9@gen-top-level-label G2dcb@gen-define-label+loc G2dcd@gen-define-label G2dd3@G2dce G2dd5@G2dd0 G2dd7@G2dcf G2ddc@rib? G2dde@make-rib G2de0@rib-sym* G2de2@rib-mark** G2de4@rib-label* G2de6@rib-sealed/freq G2de8@rib-cache G2dea@set-rib-sym*! G2dec@set-rib-mark**! G2dee@set-rib-label*! G2df0@set-rib-sealed/freq! G2df2@set-rib-cache! G2df4@make-empty-rib G2df6@make-cache-rib G2df8@find-label G2dfa@extend-rib! G2dfc@extend-rib/nc! G2dfe@make-rib-map G2e00@seal-rib! G2e02@unseal-rib! G2e04@make-full-rib G2e0a@G2e05 G2e0c@G2e07 G2e0e@G2e06 G2e13@stx? G2e15@make-stx G2e17@stx-expr G2e19@stx-mark* G2e1b@stx-subst* G2e1d@stx-ae* G2e1f@set-stx-expr! G2e21@set-stx-mark*! G2e23@set-stx-subst*! G2e25@set-stx-ae*! G2e27@rp G2e29@datum->stx G2e2b@gen-mark G2e2d@anti-mark G2e2f@anti-mark? G2e31@join-wraps G2e33@mkstx G2e35@add-mark G2e37@add-subst G2e39@syntax-kind? G2e3b@syntax-vector->list G2e3d@syntax-pair? G2e3f@syntax-vector? G2e41@syntax-null? G2e43@syntax-list? G2e45@syntax-car G2e47@syntax-cdr G2e49@syntax->list G2e4b@id? G2e4d@id->sym G2e4f@same-marks? G2e51@bound-id=? G2e53@free-id=? G2e55@valid-bound-ids? G2e57@distinct-bound-ids? G2e59@bound-id-member? G2e5b@self-evaluating? G2e5d@strip-annotations G2e5f@strip G2e61@stx->datum G2e63@same-marks*? G2e65@id->label G2e67@id->real-label G2e69@label->binding G2e6b@make-binding G2e6d@binding-type G2e6f@binding-value G2e71@raise-unbound-error G2e73@syntax-type G2e8a@sanitize-binding G2e8c@make-variable-transformer G2e8e@variable-transformer? G2e90@variable-transformer-procedure G2e92@make-eval-transformer G3016@parse-define G3018@parse-define-syntax G301a@scheme-stx-hashtable G301c@scheme-stx G301e@lexical-var G3020@lexical-mutable? G3022@set-lexical-mutable! G3024@add-lexical G3026@add-lexicals G3028@letrec-helper G302a@letrec-transformer G302c@letrec*-transformer G302e@fluid-let-syntax-transformer G3030@type-descriptor-transformer G3032@record-type-descriptor-transformer G3034@record-constructor-descriptor-transformer G3036@when-macro G3038@unless-macro G303a@if-transformer G303c@case-macro G303e@quote-transformer G3040@case-lambda-transformer G3042@lambda-transformer G3044@bless G3046@with-syntax-macro G3048@invalid-fmls-error G304a@let-macro G304c@let-values-macro G304e@let*-values-macro G3050@trace-lambda-macro G3052@trace-define-macro G3054@trace-define-syntax-macro G3056@trace-let/rec-syntax G3058@trace-let-syntax-macro G305a@trace-letrec-syntax-macro G305c@guard-macro G305e@define-enumeration-macro G3060@time-macro G3062@delay-macro G3064@assert-macro G3066@endianness-macro G3068@identifier-syntax-macro G306a@do-macro G306c@let*-macro G306e@or-macro G3070@and-macro G3072@cond-macro G3074@do-include G3076@include-macro G3078@include-into-macro G307a@syntax-rules-macro G307c@quasiquote-macro G307e@quasisyntax-macro G3080@define-struct-macro G3082@define-record-type-macro G3084@define-condition-type-macro G3086@incorrect-usage-macro G3088@parameterize-macro G308a@foreign-call-transformer G308c@convert-pattern G308e@syntax-dispatch G3090@ellipsis? G3092@underscore? G3094@verify-literals G3096@syntax-case-transformer G3098@ellipsis-map G309a@syntax-transformer G309c@core-macro-transformer G309e@file-options-macro G30a0@symbol-macro G30a2@macro-transformer G30a4@local-macro-transformer G30a6@do-macro-call G30a8@chi-macro G30aa@chi-local-macro G30ac@chi-global-macro G30ae@chi-expr* G30b0@chi-application G30b2@chi-expr G30b4@chi-set! G30b6@verify-formals G30b8@chi-lambda-clause G30ba@chi-lambda-clause* G30bc@chi-defun G30be@chi-rhs G30c0@expand-interaction-rhs*/init* G30c2@chi-rhs* G30c4@find-bound=? G30c6@find-dups G30c8@chi-internal G30ca@parse-module G30d0@G30cb G30d2@G30cd G30d4@G30cc G30d9@module-interface? G30db@make-module-interface G30dd@module-interface-first-mark G30df@module-interface-exp-id-vec G30e1@module-interface-exp-lab-vec G30e3@set-module-interface-first-mark! G30e5@set-module-interface-exp-id-vec! G30e7@set-module-interface-exp-lab-vec! G30e9@module-interface-exp-id* G30eb@chi-internal-module G30ed@chi-body* G30ef@expand-transformer G30f1@parse-exports G30f3@parse-library-name G30f5@parse-library G30f7@parse-import-spec* G30f9@make-top-rib G30fb@make-collector G30fd@inv-collector G30ff@vis-collector G3101@imp-collector G3103@chi-library-internal G3105@chi-interaction-expr G3107@library-body-expander G3109@core-library-expander G310b@parse-top-level-program G310d@top-level-expander G3113@G310e G3115@G3110 G3117@G310f G311c@env? G311e@make-env G3120@env-names G3122@env-labels G3124@env-itc G3126@set-env-names! G3128@set-env-labels! G312a@set-env-itc! G312c@rp G3132@G312d G3134@G312f G3136@G312e G313b@interaction-env? G313d@make-interaction-env G313f@interaction-env-rib G3141@interaction-env-r G3143@interaction-env-locs G3145@set-interaction-env-rib! G3147@set-interaction-env-r! G3149@set-interaction-env-locs! G314b@rp G314d@interaction-environment-symbols G314f@environment-bindings G3151@parse-binding G3153@environment? G3155@environment-symbols G3157@environment G3159@null-environment G315b@scheme-report-environment G315d@expand G315f@eval G3161@library-expander G3163@boot-library-expand G3165@rev-map-append G3167@build-exports G3169@make-export-subst G316b@make-export-env/macros G316d@generate-temporaries G316f@free-identifier=? G3171@bound-identifier=? G3173@make-source-condition G3175@extract-position-condition G3177@expression-position G3179@assertion-error G317b@syntax-error G317d@extract-trace G317f@syntax-violation* G3181@syntax-violation G3183@identifier? G3185@datum->syntax G3187@syntax->datum G3189@compile-r6rs-top-level G318b@pre-compile-r6rs-top-level G318d@interaction-environment G318f@top-level-context) (begin (set! G2db8@set-cons (lambda (G3190@x G3191@ls) (if (memq G3190@x G3191@ls) G3191@ls (cons G3190@x G3191@ls)))) (set! G2dba@set-union (lambda (G3194@ls1 G3195@ls2) (if (null? G3194@ls1) G3195@ls2 (if (memq (car G3194@ls1) G3195@ls2) (G2dba@set-union (cdr G3194@ls1) G3195@ls2) (cons (car G3194@ls1) (G2dba@set-union (cdr G3194@ls1) G3195@ls2)))))) (set! G2dbf@top-mark* '(top)) (set! G2dc1@top-marked? (lambda (G3198@m*) (memq 'top G3198@m*))) (set! G2dc3@gen-lexical (lambda (G319a@sym) (if (symbol? G319a@sym) (gensym G319a@sym) (if (G2e13@stx? G319a@sym) (G2dc3@gen-lexical (G2e4d@id->sym G319a@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G319a@sym))))) (set! G2dc5@gen-global (lambda (G319c@x) (G2dc3@gen-lexical G319c@x))) (set! G2dc7@gen-label (lambda (G319e@_) (gensym))) (set! G2dc9@gen-top-level-label (lambda (G31a0@id G31a1@rib) ((lambda (G31a5@find) (begin (set! G31a5@find (lambda (G31b0@sym G31b1@mark* G31b2@sym* G31b3@mark** G31b4@label*) (if (pair? G31b2@sym*) (begin '#f (if (if (eq? G31b0@sym (car G31b2@sym*)) (begin '#f (G2e4f@same-marks? G31b1@mark* (car G31b3@mark**))) '#f) (car G31b4@label*) (G31a5@find G31b0@sym G31b1@mark* (cdr G31b2@sym*) (cdr G31b3@mark**) (cdr G31b4@label*)))) '#f))) ((lambda (G31a6@sym G31a7@mark*) ((lambda (G31aa@sym*) ((lambda (G31ac@t) (if G31ac@t ((lambda (G31ae@label) (if (G2c3f@G2ad3@imported-label->binding G31ae@label) (gensym) G31ae@label)) G31ac@t) (gensym))) (if (memq G31a6@sym (G2de0@rib-sym* G31a1@rib)) (begin '#f (G31a5@find G31a6@sym G31a7@mark* G31aa@sym* (G2de2@rib-mark** G31a1@rib) (G2de4@rib-label* G31a1@rib))) '#f))) (G2de0@rib-sym* G31a1@rib))) (G2e4d@id->sym G31a0@id) (G2e19@stx-mark* G31a0@id)))) '#f))) (set! G2dcb@gen-define-label+loc (lambda (G31ba@id G31bb@rib) ((lambda (G31be@t) (if G31be@t ((lambda (G31c0@env) ((lambda (G31c2@label G31c3@locs) (values G31c2@label ((lambda (G31c6@t) (if G31c6@t (cdr G31c6@t) ((lambda (G31c8@loc) (begin (G3149@set-interaction-env-locs! G31c0@env (cons (cons G31c2@label G31c8@loc) G31c3@locs)) G31c8@loc)) (G2dc3@gen-lexical G31ba@id)))) (assq G31c2@label G31c3@locs)))) (G2dc9@gen-top-level-label G31ba@id G31bb@rib) (G3143@interaction-env-locs G31c0@env))) G31be@t) (values (gensym) (G2dc3@gen-lexical G31ba@id)))) (G318f@top-level-context)))) (set! G2dcd@gen-define-label (lambda (G31ca@id G31cb@rib) (if (G318f@top-level-context) (G2dc9@gen-top-level-label G31ca@id G31cb@rib) (gensym)))) (set! G2dd3@G2dce (make-record-type-descriptor 'rib '#f 'G2dd1 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2dd5@G2dd0 '#f) (set! G2dd7@G2dcf (make-record-constructor-descriptor G2dd3@G2dce '#f G2dd5@G2dd0)) (set! G2ddc@rib? (record-predicate G2dd3@G2dce)) (set! G2dde@make-rib (record-constructor G2dd7@G2dcf)) (set! G2de0@rib-sym* (record-accessor G2dd3@G2dce '0)) (set! G2de2@rib-mark** (record-accessor G2dd3@G2dce '1)) (set! G2de4@rib-label* (record-accessor G2dd3@G2dce '2)) (set! G2de6@rib-sealed/freq (record-accessor G2dd3@G2dce '3)) (set! G2de8@rib-cache (record-accessor G2dd3@G2dce '4)) (set! G2dea@set-rib-sym*! (record-mutator G2dd3@G2dce '0)) (set! G2dec@set-rib-mark**! (record-mutator G2dd3@G2dce '1)) (set! G2dee@set-rib-label*! (record-mutator G2dd3@G2dce '2)) (set! G2df0@set-rib-sealed/freq! (record-mutator G2dd3@G2dce '3)) (set! G2df2@set-rib-cache! (record-mutator G2dd3@G2dce '4)) (set! G2df4@make-empty-rib (lambda () (G2dde@make-rib '() '() '() '#f '#f))) (set! G2df6@make-cache-rib (lambda () (G2dde@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2df8@find-label (lambda (G31ce@rib G31cf@sym G31d0@mark*) ((lambda (G31d4@ht) (if G31d4@ht (begin '#f ((lambda (G31d6@cv) ((lambda (G31d8@t) (if G31d8@t (cdr G31d8@t) '#f)) (if G31d6@cv (begin '#f (assp (lambda (G31da@m) (G2e4f@same-marks? G31d0@mark* G31da@m)) G31d6@cv)) '#f))) (hashtable-ref G31d4@ht G31cf@sym '#f))) '#f)) (G2de8@rib-cache G31ce@rib)))) (set! G2dfa@extend-rib! (lambda (G31dc@rib G31dd@id G31de@label) ((lambda (G31e3@find) (begin (set! G31e3@find (lambda (G31f4@sym G31f5@mark* G31f6@sym* G31f7@mark** G31f8@label*) (if (pair? G31f6@sym*) (begin '#f (if (if (eq? G31f4@sym (car G31f6@sym*)) (begin '#f (G2e4f@same-marks? G31f5@mark* (car G31f7@mark**))) '#f) G31f8@label* (G31e3@find G31f4@sym G31f5@mark* (cdr G31f6@sym*) (cdr G31f7@mark**) (cdr G31f8@label*)))) '#f))) (begin (if (G2de6@rib-sealed/freq G31dc@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31dc@rib) (void)) ((lambda (G31e4@sym G31e5@mark*) ((lambda (G31e8@sym*) ((lambda (G31ea@t) (if G31ea@t ((lambda (G31ec@p) (if (not (eq? G31de@label G31ec@p)) (G3181@syntax-violation '#f '"multiple definitions of identifier" G31dd@id) (void))) G31ea@t) ((lambda (G31ee@t) (if G31ee@t ((lambda (G31f0@p) (if (not (eq? G31de@label (car G31f0@p))) (if (G318f@top-level-context) (set-car! G31f0@p G31de@label) (G3181@syntax-violation '#f '"multiple definitions of identifier" G31dd@id)) (void))) G31ee@t) (begin (if (G2de8@rib-cache G31dc@rib) (hashtable-update! (G2de8@rib-cache G31dc@rib) G31e4@sym (lambda (G31f2@e) (cons (cons G31e5@mark* G31de@label) G31f2@e)) '()) (void)) (G2dea@set-rib-sym*! G31dc@rib (cons G31e4@sym G31e8@sym*)) (G2dec@set-rib-mark**! G31dc@rib (cons G31e5@mark* (G2de2@rib-mark** G31dc@rib))) (G2dee@set-rib-label*! G31dc@rib (cons G31de@label (G2de4@rib-label* G31dc@rib)))))) (if (memq G31e4@sym (G2de0@rib-sym* G31dc@rib)) (begin '#f (G31e3@find G31e4@sym G31e5@mark* G31e8@sym* (G2de2@rib-mark** G31dc@rib) (G2de4@rib-label* G31dc@rib))) '#f)))) (G2df8@find-label G31dc@rib G31e4@sym G31e5@mark*))) (G2de0@rib-sym* G31dc@rib))) (G2e4d@id->sym G31dd@id) (G2e19@stx-mark* G31dd@id))))) '#f))) (set! G2dfc@extend-rib/nc! (lambda (G31fe@rib G31ff@id G3200@label) ((lambda (G3204@sym G3205@mark*) ((lambda (G3208@sym*) (begin (if (G2de8@rib-cache G31fe@rib) (hashtable-update! (G2de8@rib-cache G31fe@rib) G3204@sym (lambda (G320a@e) (cons (cons G3205@mark* G3200@label) G320a@e)) '()) (void)) (G2dea@set-rib-sym*! G31fe@rib (cons G3204@sym G3208@sym*)) (G2dec@set-rib-mark**! G31fe@rib (cons G3205@mark* (G2de2@rib-mark** G31fe@rib))) (G2dee@set-rib-label*! G31fe@rib (cons G3200@label (G2de4@rib-label* G31fe@rib))))) (G2de0@rib-sym* G31fe@rib))) (G2e4d@id->sym G31ff@id) (G2e19@stx-mark* G31ff@id)))) (set! G2dfe@make-rib-map (lambda (G320c@sym*) ((lambda (G320e@ht) ((letrec ((G3210@f (lambda (G3212@i G3213@sym*) (if (null? G3213@sym*) G320e@ht (begin (hashtable-update! G320e@ht (car G3213@sym*) (lambda (G3216@x) (cons G3212@i G3216@x)) '()) (G3210@f (+ G3212@i '1) (cdr G3213@sym*))))))) G3210@f) '0 G320c@sym*)) (make-eq-hashtable)))) (set! G2e00@seal-rib! (lambda (G3218@rib) ((lambda (G321a@sym*) (if (not (null? G321a@sym*)) (begin (G2dea@set-rib-sym*! G3218@rib (list->vector G321a@sym*)) (G2dec@set-rib-mark**! G3218@rib (list->vector (G2de2@rib-mark** G3218@rib))) (G2dee@set-rib-label*! G3218@rib (list->vector (G2de4@rib-label* G3218@rib))) (G2df0@set-rib-sealed/freq! G3218@rib (G2dfe@make-rib-map G321a@sym*))) (void))) (G2de0@rib-sym* G3218@rib)))) (set! G2e02@unseal-rib! (lambda (G321c@rib) (if (G2de6@rib-sealed/freq G321c@rib) (begin (G2df0@set-rib-sealed/freq! G321c@rib '#f) (G2dea@set-rib-sym*! G321c@rib (vector->list (G2de0@rib-sym* G321c@rib))) (G2dec@set-rib-mark**! G321c@rib (vector->list (G2de2@rib-mark** G321c@rib))) (G2dee@set-rib-label*! G321c@rib (vector->list (G2de4@rib-label* G321c@rib)))) (void)))) (set! G2e04@make-full-rib (lambda (G321e@id* G321f@label*) ((lambda (G3222@r) (begin (G2e00@seal-rib! G3222@r) G3222@r)) (G2dde@make-rib (map G2e4d@id->sym G321e@id*) (map G2e19@stx-mark* G321e@id*) G321f@label* '#f '#f)))) (set! G2e0a@G2e05 (make-record-type-descriptor 'stx '#f 'G2e08 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2e0c@G2e07 '#f) (set! G2e0e@G2e06 (make-record-constructor-descriptor G2e0a@G2e05 '#f G2e0c@G2e07)) (set! G2e13@stx? (record-predicate G2e0a@G2e05)) (set! G2e15@make-stx (record-constructor G2e0e@G2e06)) (set! G2e17@stx-expr (record-accessor G2e0a@G2e05 '0)) (set! G2e19@stx-mark* (record-accessor G2e0a@G2e05 '1)) (set! G2e1b@stx-subst* (record-accessor G2e0a@G2e05 '2)) (set! G2e1d@stx-ae* (record-accessor G2e0a@G2e05 '3)) (set! G2e1f@set-stx-expr! (record-mutator G2e0a@G2e05 '0)) (set! G2e21@set-stx-mark*! (record-mutator G2e0a@G2e05 '1)) (set! G2e23@set-stx-subst*! (record-mutator G2e0a@G2e05 '2)) (set! G2e25@set-stx-ae*! (record-mutator G2e0a@G2e05 '3)) (set! G2e27@rp (G299a@G28a2@make-record-printer 'stx (lambda (G3224@x G3225@p G3226@wr) (begin (display '"#<syntax " G3225@p) (write (G2e61@stx->datum G3224@x) G3225@p) ((lambda (G322a@expr) (if (G2992@G2892@annotation? G322a@expr) ((lambda (G322c@src) (if (pair? G322c@src) (begin (display '" [" G3225@p) (display (cdr G322c@src) G3225@p) (display '" of " G3225@p) (display (car G322c@src) G3225@p) (display '"]" G3225@p)) (void))) (G2993@G2894@annotation-source G322a@expr)) (void))) (G2e17@stx-expr G3224@x)) (display '">" G3225@p))))) (set! G2e29@datum->stx (lambda (G322e@id G322f@datum) (G2e15@make-stx G322f@datum (G2e19@stx-mark* G322e@id) (G2e1b@stx-subst* G322e@id) (G2e1d@stx-ae* G322e@id)))) (set! G2e2b@gen-mark (lambda () (string '#\m))) (set! G2e2d@anti-mark '#f) (set! G2e2f@anti-mark? not) (set! G2e31@join-wraps (lambda (G3232@m1* G3233@s1* G3234@ae1* G3235@e) ((lambda (G323b@cancel) (begin (set! G323b@cancel (lambda (G3242@ls1 G3243@ls2) ((letrec ((G3246@f (lambda (G3248@x G3249@ls1) (if (null? G3249@ls1) (cdr G3243@ls2) (cons G3248@x (G3246@f (car G3249@ls1) (cdr G3249@ls1))))))) G3246@f) (car G3242@ls1) (cdr G3242@ls1)))) ((lambda (G323c@m2* G323d@s2* G323e@ae2*) (if (if (not (null? G3232@m1*)) (if (not (null? G323c@m2*)) (begin '#f (G2e2f@anti-mark? (car G323c@m2*))) '#f) '#f) (values (G323b@cancel G3232@m1* G323c@m2*) (G323b@cancel G3233@s1* G323d@s2*) (G323b@cancel G3234@ae1* G323e@ae2*)) (values (append G3232@m1* G323c@m2*) (append G3233@s1* G323d@s2*) (append G3234@ae1* G323e@ae2*)))) (G2e19@stx-mark* G3235@e) (G2e1b@stx-subst* G3235@e) (G2e1d@stx-ae* G3235@e)))) '#f))) (set! G2e33@mkstx (lambda (G324c@e G324d@m* G324e@s* G324f@ae*) (if (if (G2e13@stx? G324c@e) (begin '#f (not (G2dc1@top-marked? G324d@m*))) '#f) (call-with-values (lambda () (G2e31@join-wraps G324d@m* G324e@s* G324f@ae* G324c@e)) (lambda (G3257@G3254 G3258@G3255 G3259@G3256) ((lambda (G325d@ae* G325e@s* G325f@m*) (G2e15@make-stx (G2e17@stx-expr G324c@e) G325f@m* G325e@s* G325d@ae*)) G3259@G3256 G3258@G3255 G3257@G3254))) (G2e15@make-stx G324c@e G324d@m* G324e@s* G324f@ae*)))) (set! G2e35@add-mark (lambda (G3263@m G3264@e G3265@ae) (G2e33@mkstx G3264@e (list G3263@m) '(shift) (list G3265@ae)))) (set! G2e37@add-subst (lambda (G3269@subst G326a@e) (G2e33@mkstx G326a@e '() (list G3269@subst) '()))) (set! G2e39@syntax-kind? (lambda (G326d@x G326e@p?) (if (G2e13@stx? G326d@x) (G2e39@syntax-kind? (G2e17@stx-expr G326d@x) G326e@p?) (if (G2992@G2892@annotation? G326d@x) (G2e39@syntax-kind? (G2994@G2896@annotation-expression G326d@x) G326e@p?) (G326e@p? G326d@x))))) (set! G2e3b@syntax-vector->list (lambda (G3271@x) (if (G2e13@stx? G3271@x) ((lambda (G3273@ls G3274@m* G3275@s* G3276@ae*) (map (lambda (G327b@x) (G2e33@mkstx G327b@x G3274@m* G3275@s* G3276@ae*)) G3273@ls)) (G2e3b@syntax-vector->list (G2e17@stx-expr G3271@x)) (G2e19@stx-mark* G3271@x) (G2e1b@stx-subst* G3271@x) (G2e1d@stx-ae* G3271@x)) (if (G2992@G2892@annotation? G3271@x) (G2e3b@syntax-vector->list (G2994@G2896@annotation-expression G3271@x)) (if (vector? G3271@x) (vector->list G3271@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3271@x)))))) (set! G2e3d@syntax-pair? (lambda (G327d@x) (G2e39@syntax-kind? G327d@x pair?))) (set! G2e3f@syntax-vector? (lambda (G327f@x) (G2e39@syntax-kind? G327f@x vector?))) (set! G2e41@syntax-null? (lambda (G3281@x) (G2e39@syntax-kind? G3281@x null?))) (set! G2e43@syntax-list? (lambda (G3283@x) ((lambda (G3285@t) (if G3285@t G3285@t (begin '#f (if (G2e3d@syntax-pair? G3283@x) (begin '#f (G2e43@syntax-list? (G2e47@syntax-cdr G3283@x))) '#f)))) (G2e41@syntax-null? G3283@x)))) (set! G2e45@syntax-car (lambda (G3287@x) (if (G2e13@stx? G3287@x) (G2e33@mkstx (G2e45@syntax-car (G2e17@stx-expr G3287@x)) (G2e19@stx-mark* G3287@x) (G2e1b@stx-subst* G3287@x) (G2e1d@stx-ae* G3287@x)) (if (G2992@G2892@annotation? G3287@x) (G2e45@syntax-car (G2994@G2896@annotation-expression G3287@x)) (if (pair? G3287@x) (car G3287@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3287@x)))))) (set! G2e47@syntax-cdr (lambda (G3289@x) (if (G2e13@stx? G3289@x) (G2e33@mkstx (G2e47@syntax-cdr (G2e17@stx-expr G3289@x)) (G2e19@stx-mark* G3289@x) (G2e1b@stx-subst* G3289@x) (G2e1d@stx-ae* G3289@x)) (if (G2992@G2892@annotation? G3289@x) (G2e47@syntax-cdr (G2994@G2896@annotation-expression G3289@x)) (if (pair? G3289@x) (cdr G3289@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3289@x)))))) (set! G2e49@syntax->list (lambda (G328b@x) (if (G2e3d@syntax-pair? G328b@x) (cons (G2e45@syntax-car G328b@x) (G2e49@syntax->list (G2e47@syntax-cdr G328b@x))) (if (G2e41@syntax-null? G328b@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G328b@x))))) (set! G2e4b@id? (lambda (G328d@x) (if (G2e13@stx? G328d@x) (begin '#f ((lambda (G328f@expr) (symbol? (if (G2992@G2892@annotation? G328f@expr) (G2991@G2890@annotation-stripped G328f@expr) G328f@expr))) (G2e17@stx-expr G328d@x))) '#f))) (set! G2e4d@id->sym (lambda (G3291@x) (begin (if (not (G2e13@stx? G3291@x)) (error 'id->sym '"BUG in ikarus: not an id" G3291@x) (void)) ((lambda (G3293@expr) ((lambda (G3295@sym) (if (symbol? G3295@sym) G3295@sym (error 'id->sym '"BUG in ikarus: not an id" G3291@x))) (if (G2992@G2892@annotation? G3293@expr) (G2991@G2890@annotation-stripped G3293@expr) G3293@expr))) (G2e17@stx-expr G3291@x))))) (set! G2e4f@same-marks? (lambda (G3297@x G3298@y) ((lambda (G329b@t) (if G329b@t G329b@t (begin '#f (if (pair? G3297@x) (if (pair? G3298@y) (if (eq? (car G3297@x) (car G3298@y)) (begin '#f (G2e4f@same-marks? (cdr G3297@x) (cdr G3298@y))) '#f) '#f) '#f)))) (if (null? G3297@x) (begin '#f (null? G3298@y)) '#f)))) (set! G2e51@bound-id=? (lambda (G329d@x G329e@y) (if (eq? (G2e4d@id->sym G329d@x) (G2e4d@id->sym G329e@y)) (begin '#f (G2e4f@same-marks? (G2e19@stx-mark* G329d@x) (G2e19@stx-mark* G329e@y))) '#f))) (set! G2e53@free-id=? (lambda (G32a1@i G32a2@j) ((lambda (G32a5@t0 G32a6@t1) (if ((lambda (G32a9@t) (if G32a9@t G32a9@t (begin '#f G32a6@t1))) G32a5@t0) (eq? G32a5@t0 G32a6@t1) (eq? (G2e4d@id->sym G32a1@i) (G2e4d@id->sym G32a2@j)))) (G2e67@id->real-label G32a1@i) (G2e67@id->real-label G32a2@j)))) (set! G2e55@valid-bound-ids? (lambda (G32ab@id*) (if (for-all G2e4b@id? G32ab@id*) (begin '#f (G2e57@distinct-bound-ids? G32ab@id*)) '#f))) (set! G2e57@distinct-bound-ids? (lambda (G32ad@id*) ((lambda (G32af@t) (if G32af@t G32af@t (begin '#f (if (not (G2e59@bound-id-member? (car G32ad@id*) (cdr G32ad@id*))) (begin '#f (G2e57@distinct-bound-ids? (cdr G32ad@id*))) '#f)))) (null? G32ad@id*)))) (set! G2e59@bound-id-member? (lambda (G32b1@id G32b2@id*) (if (pair? G32b2@id*) (begin '#f ((lambda (G32b5@t) (if G32b5@t G32b5@t (begin '#f (G2e59@bound-id-member? G32b1@id (cdr G32b2@id*))))) (G2e51@bound-id=? G32b1@id (car G32b2@id*)))) '#f))) (set! G2e5b@self-evaluating? (lambda (G32b7@x) ((lambda (G32b9@t) (if G32b9@t G32b9@t ((lambda (G32bb@t) (if G32bb@t G32bb@t ((lambda (G32bd@t) (if G32bd@t G32bd@t ((lambda (G32bf@t) (if G32bf@t G32bf@t ((lambda (G32c1@t) (if G32c1@t G32c1@t (begin '#f (bytevector? G32b7@x)))) (regexp? G32b7@x)))) (boolean? G32b7@x)))) (char? G32b7@x)))) (string? G32b7@x)))) (number? G32b7@x)))) (set! G2e5d@strip-annotations (lambda (G32c3@x) (if (pair? G32c3@x) (cons (G2e5d@strip-annotations (car G32c3@x)) (G2e5d@strip-annotations (cdr G32c3@x))) (if (vector? G32c3@x) (vector-map G2e5d@strip-annotations G32c3@x) (if (G2992@G2892@annotation? G32c3@x) (G2991@G2890@annotation-stripped G32c3@x) G32c3@x))))) (set! G2e5f@strip (lambda (G32c5@x G32c6@m*) (if (G2dc1@top-marked? G32c6@m*) (if ((lambda (G32c9@t) (if G32c9@t G32c9@t ((lambda (G32cb@t) (if G32cb@t G32cb@t (begin '#f (if (vector? G32c5@x) (if (> (vector-length G32c5@x) '0) (begin '#f (G2992@G2892@annotation? (vector-ref G32c5@x '0))) '#f) '#f)))) (if (pair? G32c5@x) (begin '#f (G2992@G2892@annotation? (car G32c5@x))) '#f)))) (G2992@G2892@annotation? G32c5@x)) (G2e5d@strip-annotations G32c5@x) G32c5@x) ((letrec ((G32cd@f (lambda (G32cf@x) (if (G2e13@stx? G32cf@x) (G2e5f@strip (G2e17@stx-expr G32cf@x) (G2e19@stx-mark* G32cf@x)) (if (G2992@G2892@annotation? G32cf@x) (G2991@G2890@annotation-stripped G32cf@x) (if (pair? G32cf@x) ((lambda (G32d1@a G32d2@d) (if (if (eq? G32d1@a (car G32cf@x)) (begin '#f (eq? G32d2@d (cdr G32cf@x))) '#f) G32cf@x (cons G32d1@a G32d2@d))) (G32cd@f (car G32cf@x)) (G32cd@f (cdr G32cf@x))) (if (vector? G32cf@x) ((lambda (G32d5@old) ((lambda (G32d7@new) (if (for-all eq? G32d5@old G32d7@new) G32cf@x (list->vector G32d7@new))) (map G32cd@f G32d5@old))) (vector->list G32cf@x)) G32cf@x))))))) G32cd@f) G32c5@x)))) (set! G2e61@stx->datum (lambda (G32d9@x) (G2e5f@strip G32d9@x '()))) (set! G2e63@same-marks*? (lambda (G32db@mark* G32dc@mark** G32dd@si) (if (null? G32dd@si) '#f (if (G2e4f@same-marks? G32db@mark* (vector-ref G32dc@mark** (car G32dd@si))) (car G32dd@si) (G2e63@same-marks*? G32db@mark* G32dc@mark** (cdr G32dd@si)))))) (set! G2e65@id->label (lambda (G32e1@id) ((lambda (G32e3@t) (if G32e3@t G32e3@t (begin '#f ((lambda (G32e5@t) (if G32e5@t ((lambda (G32e7@env) ((lambda (G32e9@rib) (call-with-values (lambda () (G2dcb@gen-define-label+loc G32e1@id G32e9@rib)) (lambda (G32ed@G32eb G32ee@G32ec) ((lambda (G32f1@loc_ G32f2@lab) (begin (G2dfa@extend-rib! G32e9@rib G32e1@id G32f2@lab) G32f2@lab)) G32ee@G32ec G32ed@G32eb)))) (G313f@interaction-env-rib G32e7@env))) G32e5@t) '#f)) (G318f@top-level-context))))) (G2e67@id->real-label G32e1@id)))) (set! G2e67@id->real-label (lambda (G32f5@id) ((lambda (G32f7@sym) ((letrec ((G32f9@search (lambda (G32fb@subst* G32fc@mark*) (if (null? G32fb@subst*) '#f (if (eq? (car G32fb@subst*) 'shift) (G32f9@search (cdr G32fb@subst*) (cdr G32fc@mark*)) ((lambda (G32ff@rib) ((lambda (G3301@t) (if G3301@t ((lambda (G3303@ht) ((lambda (G3305@si) ((lambda (G3307@i) (if G3307@i (vector-ref (G2de4@rib-label* G32ff@rib) G3307@i) (G32f9@search (cdr G32fb@subst*) G32fc@mark*))) (if G3305@si (begin '#f (G2e63@same-marks*? G32fc@mark* (G2de2@rib-mark** G32ff@rib) (reverse G3305@si))) '#f))) (hashtable-ref G3303@ht G32f7@sym '#f))) G3301@t) ((lambda (G3309@t) (if G3309@t G3309@t (begin '#f ((letrec ((G330b@f (lambda (G330d@sym* G330e@mark** G330f@label*) (if (null? G330d@sym*) (G32f9@search (cdr G32fb@subst*) G32fc@mark*) (if (if (eq? (car G330d@sym*) G32f7@sym) (begin '#f (G2e4f@same-marks? (car G330e@mark**) G32fc@mark*)) '#f) (car G330f@label*) (G330b@f (cdr G330d@sym*) (cdr G330e@mark**) (cdr G330f@label*))))))) G330b@f) (G2de0@rib-sym* G32ff@rib) (G2de2@rib-mark** G32ff@rib) (G2de4@rib-label* G32ff@rib))))) (G2df8@find-label G32ff@rib G32f7@sym G32fc@mark*)))) (G2de6@rib-sealed/freq G32ff@rib))) (car G32fb@subst*))))))) G32f9@search) (G2e1b@stx-subst* G32f5@id) (G2e19@stx-mark* G32f5@id))) (G2e4d@id->sym G32f5@id)))) (set! G2e69@label->binding (lambda (G3313@x G3314@r) ((lambda (G3317@t) (if G3317@t ((lambda (G3319@b) (if (if (pair? G3319@b) (begin '#f (eq? (car G3319@b) '$core-rtd)) '#f) (cons '$rtd (map G3044@bless (cdr G3319@b))) (if (if (pair? G3319@b) (begin '#f (eq? (car G3319@b) 'global-rtd)) '#f) ((lambda (G331b@lib G331c@loc) (cons '$rtd (symbol-value G331c@loc))) (cadr G3319@b) (cddr G3319@b)) G3319@b))) G3317@t) ((lambda (G331f@t) (if G331f@t (cdr G331f@t) ((lambda (G3321@t) (if G3321@t ((lambda (G3323@env) ((lambda (G3325@t) (if G3325@t ((lambda (G3327@p) (cons* 'lexical (cdr G3327@p) '#f)) G3325@t) '(displaced-lexical . #f))) (assq G3313@x (G3143@interaction-env-locs G3323@env)))) G3321@t) '(displaced-lexical . #f))) (G318f@top-level-context)))) (assq G3313@x G3314@r)))) (G2c3f@G2ad3@imported-label->binding G3313@x)))) (set! G2e6b@make-binding cons) (set! G2e6d@binding-type car) (set! G2e6f@binding-value cdr) (set! G2e71@raise-unbound-error (lambda (G3329@id) (G317f@syntax-violation* '#f '"unbound identifier" G3329@id (G4c88@G4c00@make-undefined-violation)))) (set! G2e73@syntax-type (lambda (G332b@e G332c@r) (if (G2e4b@id? G332b@e) ((lambda (G332f@id) ((lambda (G3331@label) ((lambda (G3333@b) ((lambda (G3335@type) ((lambda () (begin (if (not G3331@label) (G2e71@raise-unbound-error G332f@id) (void)) ((lambda (G3337@t) (if (memv G3337@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3335@type (G2e6f@binding-value G3333@b) G332f@id) (values 'other '#f '#f))) G3335@type))))) (G2e6d@binding-type G3333@b))) (G2e69@label->binding G3331@label G332c@r))) (G2e65@id->label G332f@id))) G332b@e) (if (G2e3d@syntax-pair? G332b@e) ((lambda (G3339@id) (if (G2e4b@id? G3339@id) ((lambda (G333b@label) ((lambda (G333d@b) ((lambda (G333f@type) ((lambda () (begin (if (not G333b@label) (G2e71@raise-unbound-error G3339@id) (void)) ((lambda (G3341@t) (if (memv G3341@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G333f@type (G2e6f@binding-value G333d@b) G3339@id) (values 'call '#f '#f))) G333f@type))))) (G2e6d@binding-type G333d@b))) (G2e69@label->binding G333b@label G332c@r))) (G2e65@id->label G3339@id)) (values 'call '#f '#f))) (G2e45@syntax-car G332b@e)) ((lambda (G3343@d) (if (G2e5b@self-evaluating? G3343@d) (values 'constant G3343@d '#f) (values 'other '#f '#f))) (G2e61@stx->datum G332b@e)))))) (set! G2e8a@sanitize-binding (lambda (G3345@x G3346@src) (if (procedure? G3345@x) (cons* 'local-macro G3345@x G3346@src) (if (if (pair? G3345@x) (if (eq? (car G3345@x) 'macro!) (begin '#f (procedure? (cdr G3345@x))) '#f) '#f) (cons* 'local-macro! (cdr G3345@x) G3346@src) (if (if (pair? G3345@x) (begin '#f (eq? (car G3345@x) '$rtd)) '#f) G3345@x (assertion-violation 'expand '"invalid transformer" G3345@x)))))) (set! G2e8c@make-variable-transformer (lambda (G3349@x) (if (procedure? G3349@x) (cons 'macro! G3349@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3349@x)))) (set! G2e8e@variable-transformer? (lambda (G334b@x) (if (pair? G334b@x) (if (eq? (car G334b@x) 'macro!) (begin '#f (procedure? (cdr G334b@x))) '#f) '#f))) (set! G2e90@variable-transformer-procedure (lambda (G334d@x) (if (G2e8e@variable-transformer? G334d@x) (cdr G334d@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G334d@x)))) (set! G2e92@make-eval-transformer (lambda (G334f@x) (G2e8a@sanitize-binding (eval-core (G2a01@G29a9@expanded->core G334f@x)) G334f@x))) (set! G3016@parse-define (lambda (G3351@x) ((lambda (G3353@t) ((lambda (G3355@ls/false) (if (if G3355@ls/false (begin '#f (apply (lambda (G3357@id G3358@fmls G3359@b G335a@b*) (G2e4b@id? G3357@id)) G3355@ls/false)) '#f) (apply (lambda (G335f@id G3360@fmls G3361@b G3362@b*) (begin (G30b6@verify-formals G3360@fmls G3351@x) (values G335f@id (cons 'defun (cons G3360@fmls (cons G3361@b G3362@b*)))))) G3355@ls/false) ((lambda (G3367@t) ((lambda (G3369@ls/false) (if (if G3369@ls/false (begin '#f (apply (lambda (G336b@id G336c@val) (G2e4b@id? G336b@id)) G3369@ls/false)) '#f) (apply (lambda (G336f@id G3370@val) (values G336f@id (cons 'expr G3370@val))) G3369@ls/false) ((lambda (G3373@t) ((lambda (G3375@ls/false) (if (if G3375@ls/false (begin '#f (apply (lambda (G3377@id) (G2e4b@id? G3377@id)) G3375@ls/false)) '#f) (apply (lambda (G3379@id) (values G3379@id (cons 'expr (G3044@bless '(void))))) G3375@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3373@t))) (G308e@syntax-dispatch G3373@t '(_ any)))) G3367@t))) (G308e@syntax-dispatch G3367@t '(_ any any)))) G3353@t))) (G308e@syntax-dispatch G3353@t '(_ (any . any) any . each-any)))) G3351@x))) (set! G3018@parse-define-syntax (lambda (G337b@x) ((lambda (G337d@t) ((lambda (G337f@ls/false) (if (if G337f@ls/false (begin '#f (apply (lambda (G3381@id G3382@val) (G2e4b@id? G3381@id)) G337f@ls/false)) '#f) (apply (lambda (G3385@id G3386@val) (values G3385@id G3386@val)) G337f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G337d@t))) (G308e@syntax-dispatch G337d@t '(_ any any)))) G337b@x))) (set! G301a@scheme-stx-hashtable (make-eq-hashtable)) (set! G301c@scheme-stx (lambda (G3389@sym) ((lambda (G338b@t) (if G338b@t G338b@t (begin '#f ((lambda (G338d@subst) ((lambda (G338f@stx) ((lambda (G3391@stx) ((lambda () (begin (hashtable-set! G301a@scheme-stx-hashtable G3389@sym G3391@stx) G3391@stx)))) ((lambda (G3393@t) (if G3393@t ((lambda (G3395@x) ((lambda (G3397@name G3398@label) (G2e37@add-subst (G2dde@make-rib (list G3397@name) (list G2dbf@top-mark*) (list G3398@label) '#f '#f) G338f@stx)) (car G3395@x) (cdr G3395@x))) G3393@t) G338f@stx)) (assq G3389@sym G338d@subst)))) (G2e15@make-stx G3389@sym G2dbf@top-mark* '() '()))) (G2c15@G2a7f@library-subst (G2c39@G2ac7@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G301a@scheme-stx-hashtable G3389@sym '#f)))) (set! G301e@lexical-var car) (set! G3020@lexical-mutable? cdr) (set! G3022@set-lexical-mutable! set-cdr!) (set! G3024@add-lexical (lambda (G339b@lab G339c@lex G339d@r) (cons (cons* G339b@lab 'lexical G339c@lex '#f) G339d@r))) (set! G3026@add-lexicals (lambda (G33a1@lab* G33a2@lex* G33a3@r) (if (null? G33a1@lab*) G33a3@r (G3026@add-lexicals (cdr G33a1@lab*) (cdr G33a2@lex*) (G3024@add-lexical (car G33a1@lab*) (car G33a2@lex*) G33a3@r))))) (set! G3028@letrec-helper (lambda (G33a7@e G33a8@r G33a9@mr G33aa@build) ((lambda (G33af@t) ((lambda (G33b1@ls/false) (if G33b1@ls/false (apply (lambda (G33b3@lhs* G33b4@rhs* G33b5@b G33b6@b*) (if (not (G2e55@valid-bound-ids? G33b3@lhs*)) (G3048@invalid-fmls-error G33a7@e G33b3@lhs*) ((lambda (G33bb@lex* G33bc@lab*) ((lambda (G33bf@rib G33c0@r) ((lambda (G33c3@body G33c4@rhs*) (G33aa@build '#f G33bb@lex* G33c4@rhs* G33c3@body)) (G30c8@chi-internal (G2e37@add-subst G33bf@rib (cons G33b5@b G33b6@b*)) G33c0@r G33a9@mr) (G30ae@chi-expr* (map (lambda (G33c7@x) (G2e37@add-subst G33bf@rib G33c7@x)) G33b4@rhs*) G33c0@r G33a9@mr))) (G2e04@make-full-rib G33b3@lhs* G33bc@lab*) (G3026@add-lexicals G33bc@lab* G33bb@lex* G33a8@r))) (map G2dc3@gen-lexical G33b3@lhs*) (map G2dc7@gen-label G33b3@lhs*)))) G33b1@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G33af@t))) (G308e@syntax-dispatch G33af@t '(_ #(each (any any)) any . each-any)))) G33a7@e))) (set! G302a@letrec-transformer (lambda (G33c9@e G33ca@r G33cb@mr) (G3028@letrec-helper G33c9@e G33ca@r G33cb@mr G2da8@G2d1b@build-letrec))) (set! G302c@letrec*-transformer (lambda (G33cf@e G33d0@r G33d1@mr) (G3028@letrec-helper G33cf@e G33d0@r G33d1@mr G2da9@G2d1d@build-letrec*))) (set! G302e@fluid-let-syntax-transformer (lambda (G33d5@e G33d6@r G33d7@mr) ((lambda (G33dc@lookup) (begin (set! G33dc@lookup (lambda (G33ef@x) ((lambda (G33f1@t) (if G33f1@t G33f1@t (begin '#f (G3181@syntax-violation '#f '"unbound identifier" G33d5@e G33ef@x)))) (G2e65@id->label G33ef@x)))) ((lambda (G33dd@t) ((lambda (G33df@ls/false) (if G33df@ls/false (apply (lambda (G33e1@lhs* G33e2@rhs* G33e3@b G33e4@b*) (if (not (G2e55@valid-bound-ids? G33e1@lhs*)) (G3048@invalid-fmls-error G33d5@e G33e1@lhs*) ((lambda (G33e9@lab* G33ea@rhs*) (G30c8@chi-internal (cons G33e3@b G33e4@b*) (append (map cons G33e9@lab* G33ea@rhs*) G33d6@r) (append (map cons G33e9@lab* G33ea@rhs*) G33d7@mr))) (map G33dc@lookup G33e1@lhs*) (map (lambda (G33ed@x) (G2e92@make-eval-transformer (G30ef@expand-transformer G33ed@x G33d7@mr))) G33e2@rhs*)))) G33df@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G33dd@t))) (G308e@syntax-dispatch G33dd@t '(_ #(each (any any)) any . each-any)))) G33d5@e))) '#f))) (set! G3030@type-descriptor-transformer (lambda (G33f3@e G33f4@r G33f5@mr) ((lambda (G33f9@t) ((lambda (G33fb@ls/false) (if (if G33fb@ls/false (begin '#f (apply (lambda (G33fd@id) (G2e4b@id? G33fd@id)) G33fb@ls/false)) '#f) (apply (lambda (G33ff@id) ((lambda (G3401@lab) ((lambda (G3403@b) ((lambda (G3405@type) ((lambda () (begin (if (not G3401@lab) (G2e71@raise-unbound-error G33ff@id) (void)) (if (not (if (eq? G3405@type '$rtd) (begin '#f (not (list? (G2e6f@binding-value G3403@b)))) '#f)) (G3181@syntax-violation '#f '"not a record type" G33f3@e) (void)) (list 'quote (G2e6f@binding-value G3403@b)))))) (G2e6d@binding-type G3403@b))) (G2e69@label->binding G3401@lab G33f4@r))) (G2e65@id->label G33ff@id))) G33fb@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G33f9@t))) (G308e@syntax-dispatch G33f9@t '(_ any)))) G33f3@e))) (set! G3032@record-type-descriptor-transformer (lambda (G3407@e G3408@r G3409@mr) ((lambda (G340d@t) ((lambda (G340f@ls/false) (if (if G340f@ls/false (begin '#f (apply (lambda (G3411@id) (G2e4b@id? G3411@id)) G340f@ls/false)) '#f) (apply (lambda (G3413@id) ((lambda (G3415@lab) ((lambda (G3417@b) ((lambda (G3419@type) ((lambda () (begin (if (not G3415@lab) (G2e71@raise-unbound-error G3413@id) (void)) (if (not (if (eq? G3419@type '$rtd) (begin '#f (list? (G2e6f@binding-value G3417@b))) '#f)) (G3181@syntax-violation '#f '"not a record type" G3407@e) (void)) (G30b2@chi-expr (car (G2e6f@binding-value G3417@b)) G3408@r G3409@mr))))) (G2e6d@binding-type G3417@b))) (G2e69@label->binding G3415@lab G3408@r))) (G2e65@id->label G3413@id))) G340f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G340d@t))) (G308e@syntax-dispatch G340d@t '(_ any)))) G3407@e))) (set! G3034@record-constructor-descriptor-transformer (lambda (G341b@e G341c@r G341d@mr) ((lambda (G3421@t) ((lambda (G3423@ls/false) (if (if G3423@ls/false (begin '#f (apply (lambda (G3425@id) (G2e4b@id? G3425@id)) G3423@ls/false)) '#f) (apply (lambda (G3427@id) ((lambda (G3429@lab) ((lambda (G342b@b) ((lambda (G342d@type) ((lambda () (begin (if (not G3429@lab) (G2e71@raise-unbound-error G3427@id) (void)) (if (not (if (eq? G342d@type '$rtd) (begin '#f (list? (G2e6f@binding-value G342b@b))) '#f)) (G3181@syntax-violation '#f '"invalid type" G341b@e) (void)) (G30b2@chi-expr (cadr (G2e6f@binding-value G342b@b)) G341c@r G341d@mr))))) (G2e6d@binding-type G342b@b))) (G2e69@label->binding G3429@lab G341c@r))) (G2e65@id->label G3427@id))) G3423@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3421@t))) (G308e@syntax-dispatch G3421@t '(_ any)))) G341b@e))) (set! G3036@when-macro (lambda (G342f@e) ((lambda (G3431@t) ((lambda (G3433@ls/false) (if G3433@ls/false (apply (lambda (G3435@test G3436@e G3437@e*) (G3044@bless (list 'if G3435@test (cons 'begin (cons G3436@e G3437@e*))))) G3433@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3431@t))) (G308e@syntax-dispatch G3431@t '(_ any any . each-any)))) G342f@e))) (set! G3038@unless-macro (lambda (G343b@e) ((lambda (G343d@t) ((lambda (G343f@ls/false) (if G343f@ls/false (apply (lambda (G3441@test G3442@e G3443@e*) (G3044@bless (list 'if (list 'not G3441@test) (cons 'begin (cons G3442@e G3443@e*))))) G343f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G343d@t))) (G308e@syntax-dispatch G343d@t '(_ any any . each-any)))) G343b@e))) (set! G303a@if-transformer (lambda (G3447@e G3448@r G3449@mr) ((lambda (G344d@t) ((lambda (G344f@ls/false) (if G344f@ls/false (apply (lambda (G3451@e0 G3452@e1 G3453@e2) (list 'if (G30b2@chi-expr G3451@e0 G3448@r G3449@mr) (G30b2@chi-expr G3452@e1 G3448@r G3449@mr) (G30b2@chi-expr G3453@e2 G3448@r G3449@mr))) G344f@ls/false) ((lambda (G3457@t) ((lambda (G3459@ls/false) (if G3459@ls/false (apply (lambda (G345b@e0 G345c@e1) (list 'if (G30b2@chi-expr G345b@e0 G3448@r G3449@mr) (G30b2@chi-expr G345c@e1 G3448@r G3449@mr) (G2da7@G2d19@build-void))) G3459@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3457@t))) (G308e@syntax-dispatch G3457@t '(_ any any)))) G344d@t))) (G308e@syntax-dispatch G344d@t '(_ any any any)))) G3447@e))) (set! G303c@case-macro (lambda (G345f@e) ((lambda (G3462@build-last G3464@build-one) (begin (set! G3462@build-last (lambda (G3489@cls) ((lambda (G348b@t) ((lambda (G348d@ls/false) (if G348d@ls/false (apply (lambda (G348f@e G3490@e*) (cons 'begin (cons G348f@e G3490@e*))) G348d@ls/false) ((lambda (G3493@t) ((lambda (G3495@ls/false) (if G3495@ls/false (apply (lambda () (G3464@build-one G3489@cls '(if #f #f))) G3495@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3493@t))) (G308e@syntax-dispatch G3493@t '_))) G348b@t))) (G308e@syntax-dispatch G348b@t '(#(scheme-id else) any . each-any)))) G3489@cls))) (set! G3464@build-one (lambda (G347b@cls G347c@k) ((lambda (G347f@t) ((lambda (G3481@ls/false) (if G3481@ls/false (apply (lambda (G3483@d* G3484@e G3485@e*) (list 'if (list 'memv 't (list 'quote G3483@d*)) (cons 'begin (cons G3484@e G3485@e*)) G347c@k)) G3481@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G347f@t))) (G308e@syntax-dispatch G347f@t '(each-any any . each-any)))) G347b@cls))) ((lambda (G3465@t) ((lambda (G3467@ls/false) (if G3467@ls/false (apply (lambda (G3469@expr) (G3044@bless (cons 'let (cons (list (list 't G3469@expr)) '((if #f #f)))))) G3467@ls/false) ((lambda (G346b@t) ((lambda (G346d@ls/false) (if G346d@ls/false (apply (lambda (G346f@expr G3470@cls G3471@cls*) (G3044@bless (list 'let (list (list 't G346f@expr)) ((letrec ((G3475@f (lambda (G3477@cls G3478@cls*) (if (null? G3478@cls*) (G3462@build-last G3477@cls) (G3464@build-one G3477@cls (G3475@f (car G3478@cls*) (cdr G3478@cls*))))))) G3475@f) G3470@cls G3471@cls*)))) G346d@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G346b@t))) (G308e@syntax-dispatch G346b@t '(_ any any . each-any)))) G3465@t))) (G308e@syntax-dispatch G3465@t '(_ any)))) G345f@e))) '#f '#f))) (set! G303e@quote-transformer (lambda (G3497@e G3498@r G3499@mr) ((lambda (G349d@t) ((lambda (G349f@ls/false) (if G349f@ls/false (apply (lambda (G34a1@datum) (list 'quote (G2e61@stx->datum G34a1@datum))) G349f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G349d@t))) (G308e@syntax-dispatch G349d@t '(_ any)))) G3497@e))) (set! G3040@case-lambda-transformer (lambda (G34a3@e G34a4@r G34a5@mr) ((lambda (G34a9@t) ((lambda (G34ab@ls/false) (if G34ab@ls/false (apply (lambda (G34ad@fmls* G34ae@b* G34af@b**) (call-with-values (lambda () (G30ba@chi-lambda-clause* G34a3@e G34ad@fmls* (map cons G34ae@b* G34af@b**) G34a4@r G34a5@mr)) (lambda (G34b5@G34b3 G34b6@G34b4) ((lambda (G34b9@body* G34ba@fmls*) (G2da4@G2ccd@build-case-lambda '#f G34ba@fmls* G34b9@body*)) G34b6@G34b4 G34b5@G34b3)))) G34ab@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G34a9@t))) (G308e@syntax-dispatch G34a9@t '(_ . #(each (any any . each-any)))))) G34a3@e))) (set! G3042@lambda-transformer (lambda (G34bd@e G34be@r G34bf@mr) ((lambda (G34c3@t) ((lambda (G34c5@ls/false) (if G34c5@ls/false (apply (lambda (G34c7@fmls G34c8@b G34c9@b*) (call-with-values (lambda () (G30b8@chi-lambda-clause G34bd@e G34c7@fmls (cons G34c8@b G34c9@b*) G34be@r G34bf@mr)) (lambda (G34cf@G34cd G34d0@G34ce) ((lambda (G34d3@body G34d4@fmls) (G2da3@G2ccb@build-lambda '#f G34d4@fmls G34d3@body)) G34d0@G34ce G34cf@G34cd)))) G34c5@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G34c3@t))) (G308e@syntax-dispatch G34c3@t '(_ any any . each-any)))) G34bd@e))) (set! G3044@bless (lambda (G34d7@x) (G2e33@mkstx ((letrec ((G34d9@f (lambda (G34db@x) (if (G2e13@stx? G34db@x) G34db@x (if (pair? G34db@x) (cons (G34d9@f (car G34db@x)) (G34d9@f (cdr G34db@x))) (if (symbol? G34db@x) (G301c@scheme-stx G34db@x) (if (vector? G34db@x) (vector-map G34d9@f G34db@x) G34db@x))))))) G34d9@f) G34d7@x) '() '() '()))) (set! G3046@with-syntax-macro (lambda (G34dd@e) ((lambda (G34df@t) ((lambda (G34e1@ls/false) (if G34e1@ls/false (apply (lambda (G34e3@pat* G34e4@expr* G34e5@b G34e6@b*) ((lambda (G34eb@idn*) (begin (G30b6@verify-formals (map car G34eb@idn*) G34dd@e) ((lambda (G34ed@t*) (G3044@bless (list 'let (map list G34ed@t* G34e4@expr*) ((letrec ((G34ef@f (lambda (G34f1@pat* G34f2@t*) (if (null? G34f1@pat*) (cons 'begin (cons '#f (cons G34e5@b G34e6@b*))) (list 'syntax-case (car G34f2@t*) '() (list (car G34f1@pat*) (G34ef@f (cdr G34f1@pat*) (cdr G34f2@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34f1@pat*)) (car G34f2@t*)))))))) G34ef@f) G34e3@pat* G34ed@t*)))) (G316d@generate-temporaries G34e4@expr*)))) ((letrec ((G34f5@f (lambda (G34f7@pat*) (if (null? G34f7@pat*) '() (call-with-values (lambda () (G308c@convert-pattern (car G34f7@pat*) '())) (lambda (G34fb@G34f9 G34fc@G34fa) ((lambda (G34ff@idn* G3500@pat) (append G34ff@idn* (G34f5@f (cdr G34f7@pat*)))) G34fc@G34fa G34fb@G34f9))))))) G34f5@f) G34e3@pat*))) G34e1@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G34df@t))) (G308e@syntax-dispatch G34df@t '(_ #(each (any any)) any . each-any)))) G34dd@e))) (set! G3048@invalid-fmls-error (lambda (G3503@stx G3504@fmls) ((lambda (G3507@t) ((lambda (G3509@ls/false) (if G3509@ls/false (apply (lambda (G350b@id* G350c@last) ((letrec ((G350f@f (lambda (G3511@id*) (if (null? G3511@id*) (values) (if (not (G2e4b@id? (car G3511@id*))) (G3181@syntax-violation '#f '"not an identifier" G3503@stx (car G3511@id*)) (begin (G350f@f (cdr G3511@id*)) (if (G2e59@bound-id-member? (car G3511@id*) (cdr G3511@id*)) (G3181@syntax-violation '#f '"duplicate binding" G3503@stx (car G3511@id*)) (void)))))))) G350f@f) (if (G2e4b@id? G350c@last) (cons G350c@last G350b@id*) (if (G2e41@syntax-null? G350c@last) G350b@id* (G3181@syntax-violation '#f '"not an identifier" G3503@stx G350c@last))))) G3509@ls/false) ((lambda (G3513@t) ((lambda (G3515@ls/false) (if G3515@ls/false (apply (lambda () (G3181@syntax-violation '#f '"malformed binding form" G3503@stx G3504@fmls)) G3515@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3513@t))) (G308e@syntax-dispatch G3513@t '_))) G3507@t))) (G308e@syntax-dispatch G3507@t '#(each+ any () any)))) G3504@fmls))) (set! G304a@let-macro (lambda (G3517@stx) ((lambda (G3519@t) ((lambda (G351b@ls/false) (if G351b@ls/false (apply (lambda (G351d@lhs* G351e@rhs* G351f@b G3520@b*) (if (G2e55@valid-bound-ids? G351d@lhs*) (G3044@bless (cons (cons 'lambda (cons G351d@lhs* (cons G351f@b G3520@b*))) G351e@rhs*)) (G3048@invalid-fmls-error G3517@stx G351d@lhs*))) G351b@ls/false) ((lambda (G3525@t) ((lambda (G3527@ls/false) (if (if G3527@ls/false (begin '#f (apply (lambda (G3529@f G352a@lhs* G352b@rhs* G352c@b G352d@b*) (G2e4b@id? G3529@f)) G3527@ls/false)) '#f) (apply (lambda (G3533@f G3534@lhs* G3535@rhs* G3536@b G3537@b*) (if (G2e55@valid-bound-ids? G3534@lhs*) (G3044@bless (cons (list 'letrec (list (list G3533@f (cons 'lambda (cons G3534@lhs* (cons G3536@b G3537@b*))))) G3533@f) G3535@rhs*)) (G3048@invalid-fmls-error G3517@stx G3534@lhs*))) G3527@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3525@t))) (G308e@syntax-dispatch G3525@t '(_ any #(each (any any)) any . each-any)))) G3519@t))) (G308e@syntax-dispatch G3519@t '(_ #(each (any any)) any . each-any)))) G3517@stx))) (set! G304c@let-values-macro (lambda (G353d@stx) ((lambda (G3540@rename G3542@rename*) (begin (set! G3540@rename (lambda (G35a2@x G35a3@old* G35a4@new*) (begin (if (not (G2e4b@id? G35a2@x)) (G3181@syntax-violation '#f '"not an indentifier" G353d@stx G35a2@x) (void)) (if (G2e59@bound-id-member? G35a2@x G35a3@old*) (G3181@syntax-violation '#f '"duplicate binding" G353d@stx G35a2@x) (void)) ((lambda (G35a8@y) (values G35a8@y (cons G35a2@x G35a3@old*) (cons G35a8@y G35a4@new*))) (gensym (G3187@syntax->datum G35a2@x)))))) (set! G3542@rename* (lambda (G3590@x* G3591@old* G3592@new*) (if (null? G3590@x*) (values '() G3591@old* G3592@new*) (call-with-values (lambda () (G3540@rename (car G3590@x*) G3591@old* G3592@new*)) (lambda (G3596@x G3597@old* G3598@new*) (call-with-values (lambda () (G3542@rename* (cdr G3590@x*) G3597@old* G3598@new*)) (lambda (G359c@x* G359d@old* G359e@new*) (values (cons G3596@x G359c@x*) G359d@old* G359e@new*)))))))) ((lambda (G3543@t) ((lambda (G3545@ls/false) (if G3545@ls/false (apply (lambda (G3547@b G3548@b*) (cons* (G3044@bless 'let) '() G3547@b G3548@b*)) G3545@ls/false) ((lambda (G354b@t) ((lambda (G354d@ls/false) (if G354d@ls/false (apply (lambda (G354f@lhs* G3550@rhs* G3551@b G3552@b*) (G3044@bless ((letrec ((G3557@f (lambda (G3559@lhs* G355a@rhs* G355b@old* G355c@new*) (if (null? G3559@lhs*) (cons 'let (cons (map list G355b@old* G355c@new*) (cons G3551@b G3552@b*))) ((lambda (G3561@t) ((lambda (G3563@ls/false) (if G3563@ls/false (apply (lambda (G3565@x*) (call-with-values (lambda () (G3542@rename* G3565@x* G355b@old* G355c@new*)) (lambda (G356a@G3567 G356b@G3568 G356c@G3569) ((lambda (G3570@new* G3571@old* G3572@y*) (list 'call-with-values (list 'lambda '() (car G355a@rhs*)) (list 'lambda G3572@y* (G3557@f (cdr G3559@lhs*) (cdr G355a@rhs*) G3571@old* G3570@new*)))) G356c@G3569 G356b@G3568 G356a@G3567)))) G3563@ls/false) ((lambda (G3576@t) ((lambda (G3578@ls/false) (if G3578@ls/false (apply (lambda (G357a@x* G357b@x) (call-with-values (lambda () (G3540@rename G357b@x G355b@old* G355c@new*)) (lambda (G357e@y G357f@old* G3580@new*) (call-with-values (lambda () (G3542@rename* G357a@x* G357f@old* G3580@new*)) (lambda (G3584@y* G3585@old* G3586@new*) (list 'call-with-values (list 'lambda '() (car G355a@rhs*)) (list 'lambda (append G3584@y* G357e@y) (G3557@f (cdr G3559@lhs*) (cdr G355a@rhs*) G3585@old* G3586@new*)))))))) G3578@ls/false) ((lambda (G358a@t) ((lambda (G358c@ls/false) (if G358c@ls/false (apply (lambda (G358e@others) (G3181@syntax-violation '#f '"malformed bindings" G353d@stx G358e@others)) G358c@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G358a@t))) (G308e@syntax-dispatch G358a@t 'any))) G3576@t))) (G308e@syntax-dispatch G3576@t '#(each+ any () any)))) G3561@t))) (G308e@syntax-dispatch G3561@t 'each-any))) (car G3559@lhs*)))))) G3557@f) G354f@lhs* G3550@rhs* '() '()))) G354d@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G354b@t))) (G308e@syntax-dispatch G354b@t '(_ #(each (any any)) any . each-any)))) G3543@t))) (G308e@syntax-dispatch G3543@t '(_ () any . each-any)))) G353d@stx))) '#f '#f))) (set! G304e@let*-values-macro (lambda (G35aa@stx) ((lambda (G35ad@check) (begin (set! G35ad@check (lambda (G35dc@x*) (if (not (null? G35dc@x*)) ((lambda (G35de@x) (begin (if (not (G2e4b@id? G35de@x)) (G3181@syntax-violation '#f '"not an identifier" G35aa@stx G35de@x) (void)) (G35ad@check (cdr G35dc@x*)) (if (G2e59@bound-id-member? G35de@x (cdr G35dc@x*)) (G3181@syntax-violation '#f '"duplicate identifier" G35aa@stx G35de@x) (void)))) (car G35dc@x*)) (void)))) ((lambda (G35ae@t) ((lambda (G35b0@ls/false) (if G35b0@ls/false (apply (lambda (G35b2@b G35b3@b*) (cons* (G3044@bless 'let) '() G35b2@b G35b3@b*)) G35b0@ls/false) ((lambda (G35b6@t) ((lambda (G35b8@ls/false) (if G35b8@ls/false (apply (lambda (G35ba@lhs* G35bb@rhs* G35bc@b G35bd@b*) (G3044@bless ((letrec ((G35c2@f (lambda (G35c4@lhs* G35c5@rhs*) (if (null? G35c4@lhs*) (cons 'begin (cons G35bc@b G35bd@b*)) ((lambda (G35c8@t) ((lambda (G35ca@ls/false) (if G35ca@ls/false (apply (lambda (G35cc@x*) (begin (G35ad@check G35cc@x*) (list 'call-with-values (list 'lambda '() (car G35c5@rhs*)) (list 'lambda G35cc@x* (G35c2@f (cdr G35c4@lhs*) (cdr G35c5@rhs*)))))) G35ca@ls/false) ((lambda (G35ce@t) ((lambda (G35d0@ls/false) (if G35d0@ls/false (apply (lambda (G35d2@x* G35d3@x) (begin (G35ad@check (cons G35d3@x G35d2@x*)) (list 'call-with-values (list 'lambda '() (car G35c5@rhs*)) (list 'lambda (append G35d2@x* G35d3@x) (G35c2@f (cdr G35c4@lhs*) (cdr G35c5@rhs*)))))) G35d0@ls/false) ((lambda (G35d6@t) ((lambda (G35d8@ls/false) (if G35d8@ls/false (apply (lambda (G35da@others) (G3181@syntax-violation '#f '"malformed bindings" G35aa@stx G35da@others)) G35d8@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G35d6@t))) (G308e@syntax-dispatch G35d6@t 'any))) G35ce@t))) (G308e@syntax-dispatch G35ce@t '#(each+ any () any)))) G35c8@t))) (G308e@syntax-dispatch G35c8@t 'each-any))) (car G35c4@lhs*)))))) G35c2@f) G35ba@lhs* G35bb@rhs*))) G35b8@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G35b6@t))) (G308e@syntax-dispatch G35b6@t '(_ #(each (any any)) any . each-any)))) G35ae@t))) (G308e@syntax-dispatch G35ae@t '(_ () any . each-any)))) G35aa@stx))) '#f))) (set! G3050@trace-lambda-macro (lambda (G35e0@stx) ((lambda (G35e2@t) ((lambda (G35e4@ls/false) (if G35e4@ls/false (apply (lambda (G35e6@who G35e7@fmls G35e8@b G35e9@b*) (if (G2e55@valid-bound-ids? G35e7@fmls) (G3044@bless (list 'make-traced-procedure (list 'quote G35e6@who) (cons 'lambda (cons G35e7@fmls (cons G35e8@b G35e9@b*))))) (G3048@invalid-fmls-error G35e0@stx G35e7@fmls))) G35e4@ls/false) ((lambda (G35ee@t) ((lambda (G35f0@ls/false) (if G35f0@ls/false (apply (lambda (G35f2@who G35f3@fmls G35f4@last G35f5@b G35f6@b*) (if (G2e55@valid-bound-ids? (cons G35f4@last G35f3@fmls)) (G3044@bless (list 'make-traced-procedure (list 'quote G35f2@who) (cons 'lambda (cons (append G35f3@fmls G35f4@last) (cons G35f5@b G35f6@b*))))) (G3048@invalid-fmls-error G35e0@stx (append G35f3@fmls G35f4@last)))) G35f0@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G35ee@t))) (G308e@syntax-dispatch G35ee@t '(_ any #(each+ any () any) any . each-any)))) G35e2@t))) (G308e@syntax-dispatch G35e2@t '(_ any each-any any . each-any)))) G35e0@stx))) (set! G3052@trace-define-macro (lambda (G35fc@stx) ((lambda (G35fe@t) ((lambda (G3600@ls/false) (if G3600@ls/false (apply (lambda (G3602@who G3603@fmls G3604@b G3605@b*) (if (G2e55@valid-bound-ids? G3603@fmls) (G3044@bless (list 'define G3602@who (list 'make-traced-procedure (list 'quote G3602@who) (cons 'lambda (cons G3603@fmls (cons G3604@b G3605@b*)))))) (G3048@invalid-fmls-error G35fc@stx G3603@fmls))) G3600@ls/false) ((lambda (G360a@t) ((lambda (G360c@ls/false) (if G360c@ls/false (apply (lambda (G360e@who G360f@fmls G3610@last G3611@b G3612@b*) (if (G2e55@valid-bound-ids? (cons G3610@last G360f@fmls)) (G3044@bless (list 'define G360e@who (list 'make-traced-procedure (list 'quote G360e@who) (cons 'lambda (cons (append G360f@fmls G3610@last) (cons G3611@b G3612@b*)))))) (G3048@invalid-fmls-error G35fc@stx (append G360f@fmls G3610@last)))) G360c@ls/false) ((lambda (G3618@t) ((lambda (G361a@ls/false) (if G361a@ls/false (apply (lambda (G361c@who G361d@expr) (if (G2e4b@id? G361c@who) (G3044@bless (list 'define G361c@who (list 'let (list (list 'v G361d@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G361c@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3181@syntax-violation '#f '"invalid name" G35fc@stx))) G361a@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3618@t))) (G308e@syntax-dispatch G3618@t '(_ any any)))) G360a@t))) (G308e@syntax-dispatch G360a@t '(_ (any . #(each+ any () any)) any . each-any)))) G35fe@t))) (G308e@syntax-dispatch G35fe@t '(_ (any . each-any) any . each-any)))) G35fc@stx))) (set! G3054@trace-define-syntax-macro (lambda (G3620@stx) ((lambda (G3622@t) ((lambda (G3624@ls/false) (if G3624@ls/false (apply (lambda (G3626@who G3627@expr) (if (G2e4b@id? G3626@who) (G3044@bless (list 'define-syntax G3626@who (list 'make-traced-macro (list 'quote G3626@who) G3627@expr))) (G3181@syntax-violation '#f '"invalid name" G3620@stx))) G3624@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3622@t))) (G308e@syntax-dispatch G3622@t '(_ any any)))) G3620@stx))) (set! G3056@trace-let/rec-syntax (lambda (G362a@who) (lambda (G362c@stx) ((lambda (G362e@t) ((lambda (G3630@ls/false) (if G3630@ls/false (apply (lambda (G3632@lhs* G3633@rhs* G3634@b G3635@b*) (if (G2e55@valid-bound-ids? G3632@lhs*) ((lambda (G363a@rhs*) (G3044@bless (cons G362a@who (cons (map list G3632@lhs* G363a@rhs*) (cons G3634@b G3635@b*))))) (map (lambda (G363c@lhs G363d@rhs) (list 'make-traced-macro (list 'quote G363c@lhs) G363d@rhs)) G3632@lhs* G3633@rhs*)) (G3048@invalid-fmls-error G362c@stx G3632@lhs*))) G3630@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G362e@t))) (G308e@syntax-dispatch G362e@t '(_ #(each (any any)) any . each-any)))) G362c@stx)))) (set! G3058@trace-let-syntax-macro (G3056@trace-let/rec-syntax 'let-syntax)) (set! G305a@trace-letrec-syntax-macro (G3056@trace-let/rec-syntax 'letrec-syntax)) (set! G305c@guard-macro (lambda (G3640@x) ((lambda (G3643@gen-clauses) (begin (set! G3643@gen-clauses (lambda (G365a@con G365b@outerk G365c@clause*) ((lambda (G3661@f G3663@f*) (begin (set! G3661@f (lambda (G3694@x G3695@k) ((lambda (G3698@t) ((lambda (G369a@ls/false) (if G369a@ls/false (apply (lambda (G369c@e G369d@p) ((lambda (G36a0@t) (list 'let (list (list G36a0@t G369c@e)) (list 'if G36a0@t (list G369d@p G36a0@t) G3695@k))) (gensym))) G369a@ls/false) ((lambda (G36a2@t) ((lambda (G36a4@ls/false) (if G36a4@ls/false (apply (lambda (G36a6@e) ((lambda (G36a8@t) (list 'let (list (list G36a8@t G36a6@e)) (list 'if G36a8@t G36a8@t G3695@k))) (gensym))) G36a4@ls/false) ((lambda (G36aa@t) ((lambda (G36ac@ls/false) (if G36ac@ls/false (apply (lambda (G36ae@e G36af@v G36b0@v*) (list 'if G36ae@e (cons 'begin (cons G36af@v G36b0@v*)) G3695@k)) G36ac@ls/false) ((lambda (G36b4@t) ((lambda (G36b6@ls/false) (if G36b6@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid guard clause" G3694@x)) G36b6@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G36b4@t))) (G308e@syntax-dispatch G36b4@t '_))) G36aa@t))) (G308e@syntax-dispatch G36aa@t '(any any . each-any)))) G36a2@t))) (G308e@syntax-dispatch G36a2@t '(any)))) G3698@t))) (G308e@syntax-dispatch G3698@t '(any #(scheme-id =>) any)))) G3694@x))) (set! G3663@f* (lambda (G366e@x*) ((lambda (G3670@t) ((lambda (G3672@ls/false) (if G3672@ls/false (apply (lambda () (values (list 'raise G365a@con) '#t)) G3672@ls/false) ((lambda (G3674@t) ((lambda (G3676@ls/false) (if G3676@ls/false (apply (lambda (G3678@e G3679@e*) (values (cons 'begin (cons G3678@e G3679@e*)) '#f)) G3676@ls/false) ((lambda (G367c@t) ((lambda (G367e@ls/false) (if G367e@ls/false (apply (lambda (G3680@cls G3681@cls*) (call-with-values (lambda () (G3663@f* G3681@cls*)) (lambda (G3686@G3684 G3687@G3685) ((lambda (G368a@g G368b@e) (values (G3661@f G3680@cls G368b@e) G368a@g)) G3687@G3685 G3686@G3684)))) G367e@ls/false) ((lambda (G368e@t) ((lambda (G3690@ls/false) (if G3690@ls/false (apply (lambda (G3692@others) (G3181@syntax-violation '#f '"invalid guard clause" G3692@others)) G3690@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G368e@t))) (G308e@syntax-dispatch G368e@t 'any))) G367c@t))) (G308e@syntax-dispatch G367c@t '(any . any)))) G3674@t))) (G308e@syntax-dispatch G3674@t '((#(scheme-id else) any . each-any))))) G3670@t))) (G308e@syntax-dispatch G3670@t '()))) G366e@x*))) (call-with-values (lambda () (G3663@f* G365c@clause*)) (lambda (G3666@G3664 G3667@G3665) ((lambda (G366a@raisek G366b@code) (if G366a@raisek (list G365b@outerk G366b@code) G366b@code)) G3667@G3665 G3666@G3664))))) '#f '#f))) ((lambda (G3644@t) ((lambda (G3646@ls/false) (if (if G3646@ls/false (begin '#f (apply (lambda (G3648@con G3649@clause* G364a@b G364b@b*) (G2e4b@id? G3648@con)) G3646@ls/false)) '#f) (apply (lambda (G3650@con G3651@clause* G3652@b G3653@b*) ((lambda (G3658@outerk) (G3044@bless (list 'call/cc (list 'lambda (list G3658@outerk) (list 'with-exception-handler (list 'lambda (list G3650@con) (G3643@gen-clauses G3650@con G3658@outerk G3651@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3652@b G3653@b*))))))))) (gensym))) G3646@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3644@t))) (G308e@syntax-dispatch G3644@t '(_ (any . each-any) any . each-any)))) G3640@x))) '#f))) (set! G305e@define-enumeration-macro (lambda (G36b8@stx) ((lambda (G36bb@set? G36bd@remove-dups) (begin (set! G36bb@set? (lambda (G36d4@x) ((lambda (G36d6@t) (if G36d6@t G36d6@t (begin '#f (if (not (memq (car G36d4@x) (cdr G36d4@x))) (begin '#f (G36bb@set? (cdr G36d4@x))) '#f)))) (null? G36d4@x)))) (set! G36bd@remove-dups (lambda (G36d2@ls) (if (null? G36d2@ls) '() (cons (car G36d2@ls) (G36bd@remove-dups (remq (car G36d2@ls) (cdr G36d2@ls))))))) ((lambda (G36be@t) ((lambda (G36c0@ls/false) (if (if G36c0@ls/false (begin '#f (apply (lambda (G36c2@name G36c3@id* G36c4@maker) (if (G2e4b@id? G36c2@name) (if (G2e4b@id? G36c4@maker) (begin '#f (for-all G2e4b@id? G36c3@id*)) '#f) '#f)) G36c0@ls/false)) '#f) (apply (lambda (G36c8@name G36c9@id* G36ca@maker) ((lambda (G36ce@name* G36cf@mk) (G3044@bless (list 'begin (list 'define G36cf@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G36ce@name*)))) (list 'define-syntax G36c8@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G36ce@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G36c8@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G36ca@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G36ca@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G36ce@name*)) (cons 'syntax-violation (cons (list 'quote G36ca@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36cf@mk '('(n* ...)))))))))))) (G36bd@remove-dups (G3187@syntax->datum G36c9@id*)) (gensym))) G36c0@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G36be@t))) (G308e@syntax-dispatch G36be@t '(_ any each-any any)))) G36b8@stx))) '#f '#f))) (set! G3060@time-macro (lambda (G36d8@stx) ((lambda (G36da@t) ((lambda (G36dc@ls/false) (if G36dc@ls/false (apply (lambda (G36de@expr) ((lambda (G36e0@str) (G3044@bless (list 'time-it G36e0@str (list 'lambda '() G36de@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36e4@G36e2 G36e5@G36e3) ((lambda (G36e8@e G36e9@p) (begin (write (G3187@syntax->datum G36de@expr) G36e9@p) (G36e8@e))) G36e5@G36e3 G36e4@G36e2))))) G36dc@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G36da@t))) (G308e@syntax-dispatch G36da@t '(_ any)))) G36d8@stx))) (set! G3062@delay-macro (lambda (G36ec@stx) ((lambda (G36ee@t) ((lambda (G36f0@ls/false) (if G36f0@ls/false (apply (lambda (G36f2@expr) (G3044@bless (list 'make-promise (list 'lambda '() G36f2@expr)))) G36f0@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G36ee@t))) (G308e@syntax-dispatch G36ee@t '(_ any)))) G36ec@stx))) (set! G3064@assert-macro (lambda (G36f4@stx) ((lambda (G36f6@t) ((lambda (G36f8@ls/false) (if G36f8@ls/false (apply (lambda (G36fa@expr) ((lambda (G36fc@pos) (G3044@bless (list 'unless G36fa@expr (list 'assertion-error (list 'quote G36fa@expr) (list 'quote G36fc@pos))))) ((lambda (G36fe@t) (if G36fe@t G36fe@t (begin '#f (G3177@expression-position G36fa@expr)))) (G3177@expression-position G36f4@stx)))) G36f8@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G36f6@t))) (G308e@syntax-dispatch G36f6@t '(_ any)))) G36f4@stx))) (set! G3066@endianness-macro (lambda (G3700@stx) ((lambda (G3702@t) ((lambda (G3704@ls/false) (if G3704@ls/false (apply (lambda (G3706@e) ((lambda (G3708@t) (if (memv G3708@t '(little)) (G3044@bless ''little) (if (memv G3708@t '(big)) (G3044@bless ''big) (G3181@syntax-violation '#f '"endianness must be big or little" G3700@stx)))) (G3187@syntax->datum G3706@e))) G3704@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3702@t))) (G308e@syntax-dispatch G3702@t '(_ any)))) G3700@stx))) (set! G3068@identifier-syntax-macro (lambda (G370a@stx) ((lambda (G370c@t) ((lambda (G370e@ls/false) (if G370e@ls/false (apply (lambda (G3710@expr) (G3044@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G3710@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G3710@expr) '((syntax (e* ...)))))))))) G370e@ls/false) ((lambda (G3712@t) ((lambda (G3714@ls/false) (if (if G3714@ls/false (begin '#f (apply (lambda (G3716@id1 G3717@expr1 G3718@id2 G3719@expr2 G371a@expr3) (if (G2e4b@id? G3716@id1) (if (G2e4b@id? G3718@id2) (begin '#f (G2e4b@id? G3719@expr2)) '#f) '#f)) G3714@ls/false)) '#f) (apply (lambda (G3720@id1 G3721@expr1 G3722@id2 G3723@expr2 G3724@expr3) (G3044@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G3721@expr1)) (list (list 'set! 'id G3723@expr2) (list 'syntax G3724@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G3721@expr1 '(e* ...))))))))) G3714@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3712@t))) (G308e@syntax-dispatch G3712@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G370c@t))) (G308e@syntax-dispatch G370c@t '(_ any)))) G370a@stx))) (set! G306a@do-macro (lambda (G372a@stx) ((lambda (G372d@bind) (begin (set! G372d@bind (lambda (G3744@x) ((lambda (G3746@t) ((lambda (G3748@ls/false) (if G3748@ls/false (apply (lambda (G374a@x G374b@init) (list G374a@x G374b@init G374a@x)) G3748@ls/false) ((lambda (G374e@t) ((lambda (G3750@ls/false) (if G3750@ls/false (apply (lambda (G3752@x G3753@init G3754@step) (list G3752@x G3753@init G3754@step)) G3750@ls/false) ((lambda (G3758@t) ((lambda (G375a@ls/false) (if G375a@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid binding" G372a@stx)) G375a@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3758@t))) (G308e@syntax-dispatch G3758@t '_))) G374e@t))) (G308e@syntax-dispatch G374e@t '(any any any)))) G3746@t))) (G308e@syntax-dispatch G3746@t '(any any)))) G3744@x))) ((lambda (G372e@t) ((lambda (G3730@ls/false) (if G3730@ls/false (apply (lambda (G3732@binding* G3733@test G3734@expr* G3735@command*) ((lambda (G373a@t) ((lambda (G373c@ls/false) (if G373c@ls/false (apply (lambda (G373e@x* G373f@init* G3740@step*) (if (G2e55@valid-bound-ids? G373e@x*) (G3044@bless (list 'letrec (list (list 'loop (list 'lambda G373e@x* (list 'if G3733@test (cons 'begin (cons '(if #f #f) G3734@expr*)) (cons 'begin (append G3735@command* (list (cons 'loop G3740@step*)))))))) (cons 'loop G373f@init*))) (G3181@syntax-violation '#f '"invalid bindings" G372a@stx))) G373c@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G373a@t))) (G308e@syntax-dispatch G373a@t '#(each (any any any))))) (map G372d@bind G3732@binding*))) G3730@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G372e@t))) (G308e@syntax-dispatch G372e@t '(_ each-any (any . each-any) . each-any)))) G372a@stx))) '#f))) (set! G306c@let*-macro (lambda (G375c@stx) ((lambda (G375e@t) ((lambda (G3760@ls/false) (if (if G3760@ls/false (begin '#f (apply (lambda (G3762@lhs* G3763@rhs* G3764@b G3765@b*) (for-all G2e4b@id? G3762@lhs*)) G3760@ls/false)) '#f) (apply (lambda (G376a@lhs* G376b@rhs* G376c@b G376d@b*) (G3044@bless ((letrec ((G3772@f (lambda (G3774@x*) (if (null? G3774@x*) (cons 'let (cons '() (cons G376c@b G376d@b*))) (list 'let (list (car G3774@x*)) (G3772@f (cdr G3774@x*))))))) G3772@f) (map list G376a@lhs* G376b@rhs*)))) G3760@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G375e@t))) (G308e@syntax-dispatch G375e@t '(_ #(each (any any)) any . each-any)))) G375c@stx))) (set! G306e@or-macro (lambda (G3776@stx) ((lambda (G3778@t) ((lambda (G377a@ls/false) (if G377a@ls/false (apply (lambda () '#f) G377a@ls/false) ((lambda (G377c@t) ((lambda (G377e@ls/false) (if G377e@ls/false (apply (lambda (G3780@e G3781@e*) (G3044@bless ((letrec ((G3784@f (lambda (G3786@e G3787@e*) (if (null? G3787@e*) (list 'begin '#f G3786@e) (list 'let (list (list 't G3786@e)) (list 'if 't 't (G3784@f (car G3787@e*) (cdr G3787@e*)))))))) G3784@f) G3780@e G3781@e*))) G377e@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G377c@t))) (G308e@syntax-dispatch G377c@t '(_ any . each-any)))) G3778@t))) (G308e@syntax-dispatch G3778@t '(_)))) G3776@stx))) (set! G3070@and-macro (lambda (G378a@stx) ((lambda (G378c@t) ((lambda (G378e@ls/false) (if G378e@ls/false (apply (lambda () '#t) G378e@ls/false) ((lambda (G3790@t) ((lambda (G3792@ls/false) (if G3792@ls/false (apply (lambda (G3794@e G3795@e*) (G3044@bless ((letrec ((G3798@f (lambda (G379a@e G379b@e*) (if (null? G379b@e*) (list 'begin '#f G379a@e) (cons 'if (cons G379a@e (cons (G3798@f (car G379b@e*) (cdr G379b@e*)) '(#f)))))))) G3798@f) G3794@e G3795@e*))) G3792@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3790@t))) (G308e@syntax-dispatch G3790@t '(_ any . each-any)))) G378c@t))) (G308e@syntax-dispatch G378c@t '(_)))) G378a@stx))) (set! G3072@cond-macro (lambda (G379e@stx) ((lambda (G37a0@t) ((lambda (G37a2@ls/false) (if G37a2@ls/false (apply (lambda (G37a4@cls G37a5@cls*) (G3044@bless ((letrec ((G37a8@f (lambda (G37aa@cls G37ab@cls*) (if (null? G37ab@cls*) ((lambda (G37ae@t) ((lambda (G37b0@ls/false) (if G37b0@ls/false (apply (lambda (G37b2@e G37b3@e*) (cons 'begin (cons G37b2@e G37b3@e*))) G37b0@ls/false) ((lambda (G37b6@t) ((lambda (G37b8@ls/false) (if G37b8@ls/false (apply (lambda (G37ba@e G37bb@p) (list 'let (list (list 't G37ba@e)) (list 'if 't (cons G37bb@p '(t))))) G37b8@ls/false) ((lambda (G37be@t) ((lambda (G37c0@ls/false) (if G37c0@ls/false (apply (lambda (G37c2@e) (cons 'or (cons G37c2@e '((if #f #f))))) G37c0@ls/false) ((lambda (G37c4@t) ((lambda (G37c6@ls/false) (if G37c6@ls/false (apply (lambda (G37c8@e G37c9@e*) (list 'if G37c8@e (cons 'begin G37c9@e*))) G37c6@ls/false) ((lambda (G37cc@t) ((lambda (G37ce@ls/false) (if G37ce@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid last clause" G379e@stx)) G37ce@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G37cc@t))) (G308e@syntax-dispatch G37cc@t '_))) G37c4@t))) (G308e@syntax-dispatch G37c4@t '(any . each-any)))) G37be@t))) (G308e@syntax-dispatch G37be@t '(any)))) G37b6@t))) (G308e@syntax-dispatch G37b6@t '(any #(scheme-id =>) any)))) G37ae@t))) (G308e@syntax-dispatch G37ae@t '(#(scheme-id else) any . each-any)))) G37aa@cls) ((lambda (G37d0@t) ((lambda (G37d2@ls/false) (if G37d2@ls/false (apply (lambda (G37d4@e G37d5@e*) (G3181@syntax-violation '#f '"incorrect position of keyword else" G379e@stx)) G37d2@ls/false) ((lambda (G37d8@t) ((lambda (G37da@ls/false) (if G37da@ls/false (apply (lambda (G37dc@e G37dd@p) (list 'let (list (list 't G37dc@e)) (list 'if 't (cons G37dd@p '(t)) (G37a8@f (car G37ab@cls*) (cdr G37ab@cls*))))) G37da@ls/false) ((lambda (G37e0@t) ((lambda (G37e2@ls/false) (if G37e2@ls/false (apply (lambda (G37e4@e) (list 'or G37e4@e (G37a8@f (car G37ab@cls*) (cdr G37ab@cls*)))) G37e2@ls/false) ((lambda (G37e6@t) ((lambda (G37e8@ls/false) (if G37e8@ls/false (apply (lambda (G37ea@e G37eb@e*) (list 'if G37ea@e (cons 'begin G37eb@e*) (G37a8@f (car G37ab@cls*) (cdr G37ab@cls*)))) G37e8@ls/false) ((lambda (G37ee@t) ((lambda (G37f0@ls/false) (if G37f0@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid last clause" G379e@stx)) G37f0@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G37ee@t))) (G308e@syntax-dispatch G37ee@t '_))) G37e6@t))) (G308e@syntax-dispatch G37e6@t '(any . each-any)))) G37e0@t))) (G308e@syntax-dispatch G37e0@t '(any)))) G37d8@t))) (G308e@syntax-dispatch G37d8@t '(any #(scheme-id =>) any)))) G37d0@t))) (G308e@syntax-dispatch G37d0@t '(#(scheme-id else) any . each-any)))) G37aa@cls))))) G37a8@f) G37a4@cls G37a5@cls*))) G37a2@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G37a0@t))) (G308e@syntax-dispatch G37a0@t '(_ any . each-any)))) G379e@stx))) (set! G3074@do-include (lambda (G37f2@stx G37f3@id G37f4@filename) ((lambda (G37f8@filename) (begin (if (not (if (string? G37f8@filename) (begin '#f (G2e4b@id? G37f3@id)) '#f)) (G3181@syntax-violation '#f '"invalid syntax" G37f2@stx) (void)) (cons (G3044@bless 'begin) (with-input-from-file G37f8@filename (lambda () ((letrec ((G37fa@f (lambda (G37fc@ls) ((lambda (G37fe@x) (if (eof-object? G37fe@x) (reverse G37fc@ls) (G37fa@f (cons (G2e29@datum->stx G37f3@id G37fe@x) G37fc@ls)))) (G2990@G288e@read-annotated))))) G37fa@f) '())))))) (G2e61@stx->datum G37f4@filename)))) (set! G3076@include-macro (lambda (G3800@e) ((lambda (G3802@t) ((lambda (G3804@ls/false) (if G3804@ls/false (apply (lambda (G3806@id G3807@filename) (G3074@do-include G3800@e G3806@id G3807@filename)) G3804@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3802@t))) (G308e@syntax-dispatch G3802@t '(any any)))) G3800@e))) (set! G3078@include-into-macro (lambda (G380a@e) ((lambda (G380c@t) ((lambda (G380e@ls/false) (if G380e@ls/false (apply (lambda (G3810@id G3811@filename) (G3074@do-include G380a@e G3810@id G3811@filename)) G380e@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G380c@t))) (G308e@syntax-dispatch G380c@t '(_ any any)))) G380a@e))) (set! G307a@syntax-rules-macro (lambda (G3814@e) ((lambda (G3816@t) ((lambda (G3818@ls/false) (if G3818@ls/false (apply (lambda (G381a@lits G381b@pat* G381c@tmp*) (begin (G3094@verify-literals G381a@lits G3814@e) (G3044@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G381a@lits (map (lambda (G3820@pat G3821@tmp) ((lambda (G3824@t) ((lambda (G3826@ls/false) (if G3826@ls/false (apply (lambda (G3828@rest) (list (cons 'g G3828@rest) (list 'syntax G3821@tmp))) G3826@ls/false) ((lambda (G382a@t) ((lambda (G382c@ls/false) (if G382c@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid syntax-rules pattern" G3814@e G3820@pat)) G382c@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G382a@t))) (G308e@syntax-dispatch G382a@t '_))) G3824@t))) (G308e@syntax-dispatch G3824@t '(_ . any)))) G3820@pat)) G381b@pat* G381c@tmp*)))))))) G3818@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3816@t))) (G308e@syntax-dispatch G3816@t '(_ each-any . #(each (any any)))))) G3814@e))) (set! G307c@quasiquote-macro ((lambda () ((lambda (G382f@datum G3858@quasicons* G385a@quasicons G385c@quasiappend G385e@quasivector G3860@vquasi G3862@quasi) (begin (set! G382f@datum (lambda (G393d@x) (list (G301c@scheme-stx 'quote) (G2e33@mkstx G393d@x '() '() '())))) (set! G3858@quasicons* (lambda (G3935@x G3936@y) ((letrec ((G3939@f (lambda (G393b@x) (if (null? G393b@x) G3936@y (G385a@quasicons (car G393b@x) (G3939@f (cdr G393b@x))))))) G3939@f) G3935@x))) (set! G385a@quasicons (lambda (G390f@x G3910@y) ((lambda (G3913@t) ((lambda (G3915@ls/false) (if G3915@ls/false (apply (lambda (G3917@dy) ((lambda (G3919@t) ((lambda (G391b@ls/false) (if G391b@ls/false (apply (lambda (G391d@dx) (list (G301c@scheme-stx 'quote) (cons G391d@dx G3917@dy))) G391b@ls/false) ((lambda (G391f@t) ((lambda (G3921@ls/false) (if G3921@ls/false (apply (lambda () ((lambda (G3923@t) ((lambda (G3925@ls/false) (if G3925@ls/false (apply (lambda () (list (G301c@scheme-stx 'list) G390f@x)) G3925@ls/false) ((lambda (G3927@t) ((lambda (G3929@ls/false) (if G3929@ls/false (apply (lambda () (list (G301c@scheme-stx 'cons) G390f@x G3910@y)) G3929@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3927@t))) (G308e@syntax-dispatch G3927@t '_))) G3923@t))) (G308e@syntax-dispatch G3923@t '()))) G3917@dy)) G3921@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G391f@t))) (G308e@syntax-dispatch G391f@t '_))) G3919@t))) (G308e@syntax-dispatch G3919@t '(#(scheme-id quote) any)))) G390f@x)) G3915@ls/false) ((lambda (G392b@t) ((lambda (G392d@ls/false) (if G392d@ls/false (apply (lambda (G392f@stuff) (cons* (G301c@scheme-stx 'list) G390f@x G392f@stuff)) G392d@ls/false) ((lambda (G3931@t) ((lambda (G3933@ls/false) (if G3933@ls/false (apply (lambda () (list (G301c@scheme-stx 'cons) G390f@x G3910@y)) G3933@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3931@t))) (G308e@syntax-dispatch G3931@t '_))) G392b@t))) (G308e@syntax-dispatch G392b@t '(#(scheme-id list) . each-any)))) G3913@t))) (G308e@syntax-dispatch G3913@t '(#(scheme-id quote) any)))) G3910@y))) (set! G385c@quasiappend (lambda (G38f5@x G38f6@y) ((lambda (G38f9@ls) (if (null? G38f9@ls) (list (G301c@scheme-stx 'quote) '()) (if (null? (cdr G38f9@ls)) (car G38f9@ls) (cons* (G301c@scheme-stx 'append) G38f9@ls)))) ((letrec ((G38fb@f (lambda (G38fd@x) (if (null? G38fd@x) ((lambda (G38ff@t) ((lambda (G3901@ls/false) (if G3901@ls/false (apply (lambda () '()) G3901@ls/false) ((lambda (G3903@t) ((lambda (G3905@ls/false) (if G3905@ls/false (apply (lambda () (list G38f6@y)) G3905@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3903@t))) (G308e@syntax-dispatch G3903@t '_))) G38ff@t))) (G308e@syntax-dispatch G38ff@t '(#(scheme-id quote) ())))) G38f6@y) ((lambda (G3907@t) ((lambda (G3909@ls/false) (if G3909@ls/false (apply (lambda () (G38fb@f (cdr G38fd@x))) G3909@ls/false) ((lambda (G390b@t) ((lambda (G390d@ls/false) (if G390d@ls/false (apply (lambda () (cons (car G38fd@x) (G38fb@f (cdr G38fd@x)))) G390d@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G390b@t))) (G308e@syntax-dispatch G390b@t '_))) G3907@t))) (G308e@syntax-dispatch G3907@t '(#(scheme-id quote) ())))) (car G38fd@x)))))) G38fb@f) G38f5@x)))) (set! G385e@quasivector (lambda (G38c3@x) ((lambda (G38c5@pat-x) ((lambda (G38c7@t) ((lambda (G38c9@ls/false) (if G38c9@ls/false (apply (lambda (G38cb@x*) (list (G301c@scheme-stx 'quote) (list->vector G38cb@x*))) G38c9@ls/false) ((lambda (G38cd@t) ((lambda (G38cf@ls/false) (if G38cf@ls/false (apply (lambda () ((letrec ((G38d1@f (lambda (G38d3@x G38d4@k) ((lambda (G38d7@t) ((lambda (G38d9@ls/false) (if G38d9@ls/false (apply (lambda (G38db@x*) (G38d4@k (map (lambda (G38dd@x) (list (G301c@scheme-stx 'quote) G38dd@x)) G38db@x*))) G38d9@ls/false) ((lambda (G38df@t) ((lambda (G38e1@ls/false) (if G38e1@ls/false (apply (lambda (G38e3@x*) (G38d4@k G38e3@x*)) G38e1@ls/false) ((lambda (G38e5@t) ((lambda (G38e7@ls/false) (if G38e7@ls/false (apply (lambda (G38e9@x G38ea@y) (G38d1@f G38ea@y (lambda (G38ed@ls) (G38d4@k (cons G38e9@x G38ed@ls))))) G38e7@ls/false) ((lambda (G38ef@t) ((lambda (G38f1@ls/false) (if G38f1@ls/false (apply (lambda () (list (G301c@scheme-stx 'list->vector) G38c5@pat-x)) G38f1@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G38ef@t))) (G308e@syntax-dispatch G38ef@t '_))) G38e5@t))) (G308e@syntax-dispatch G38e5@t '(#(scheme-id cons) any any)))) G38df@t))) (G308e@syntax-dispatch G38df@t '(#(scheme-id list) . each-any)))) G38d7@t))) (G308e@syntax-dispatch G38d7@t '(#(scheme-id quote) each-any)))) G38d3@x)))) G38d1@f) G38c3@x (lambda (G38f3@ls) (cons* (G301c@scheme-stx 'vector) G38f3@ls)))) G38cf@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G38cd@t))) (G308e@syntax-dispatch G38cd@t '_))) G38c7@t))) (G308e@syntax-dispatch G38c7@t '(#(scheme-id quote) each-any)))) G38c5@pat-x)) G38c3@x))) (set! G3860@vquasi (lambda (G38a1@p G38a2@lev) ((lambda (G38a5@t) ((lambda (G38a7@ls/false) (if G38a7@ls/false (apply (lambda (G38a9@p G38aa@q) ((lambda (G38ad@t) ((lambda (G38af@ls/false) (if G38af@ls/false (apply (lambda (G38b1@p) (if (= G38a2@lev '0) (G3858@quasicons* G38b1@p (G3860@vquasi G38aa@q G38a2@lev)) (G385a@quasicons (G385a@quasicons (G382f@datum 'unquote) (G3862@quasi G38b1@p (- G38a2@lev '1))) (G3860@vquasi G38aa@q G38a2@lev)))) G38af@ls/false) ((lambda (G38b3@t) ((lambda (G38b5@ls/false) (if G38b5@ls/false (apply (lambda (G38b7@p) (if (= G38a2@lev '0) (G385c@quasiappend G38b7@p (G3860@vquasi G38aa@q G38a2@lev)) (G385a@quasicons (G385a@quasicons (G382f@datum 'unquote-splicing) (G3862@quasi G38b7@p (- G38a2@lev '1))) (G3860@vquasi G38aa@q G38a2@lev)))) G38b5@ls/false) ((lambda (G38b9@t) ((lambda (G38bb@ls/false) (if G38bb@ls/false (apply (lambda (G38bd@p) (G385a@quasicons (G3862@quasi G38bd@p G38a2@lev) (G3860@vquasi G38aa@q G38a2@lev))) G38bb@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G38b9@t))) (G308e@syntax-dispatch G38b9@t 'any))) G38b3@t))) (G308e@syntax-dispatch G38b3@t '(#(scheme-id unquote-splicing) . each-any)))) G38ad@t))) (G308e@syntax-dispatch G38ad@t '(#(scheme-id unquote) . each-any)))) G38a9@p)) G38a7@ls/false) ((lambda (G38bf@t) ((lambda (G38c1@ls/false) (if G38c1@ls/false (apply (lambda () (list (G301c@scheme-stx 'quote) '())) G38c1@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G38bf@t))) (G308e@syntax-dispatch G38bf@t '()))) G38a5@t))) (G308e@syntax-dispatch G38a5@t '(any . any)))) G38a1@p))) (set! G3862@quasi (lambda (G386b@p G386c@lev) ((lambda (G386f@t) ((lambda (G3871@ls/false) (if G3871@ls/false (apply (lambda (G3873@p) (if (= G386c@lev '0) G3873@p (G385a@quasicons (G382f@datum 'unquote) (G3862@quasi (list G3873@p) (- G386c@lev '1))))) G3871@ls/false) ((lambda (G3875@t) ((lambda (G3877@ls/false) (if G3877@ls/false (apply (lambda (G3879@p G387a@q) (if (= G386c@lev '0) (G3858@quasicons* G3879@p (G3862@quasi G387a@q G386c@lev)) (G385a@quasicons (G385a@quasicons (G382f@datum 'unquote) (G3862@quasi G3879@p (- G386c@lev '1))) (G3862@quasi G387a@q G386c@lev)))) G3877@ls/false) ((lambda (G387d@t) ((lambda (G387f@ls/false) (if G387f@ls/false (apply (lambda (G3881@p G3882@q) (if (= G386c@lev '0) (G385c@quasiappend G3881@p (G3862@quasi G3882@q G386c@lev)) (G385a@quasicons (G385a@quasicons (G382f@datum 'unquote-splicing) (G3862@quasi G3881@p (- G386c@lev '1))) (G3862@quasi G3882@q G386c@lev)))) G387f@ls/false) ((lambda (G3885@t) ((lambda (G3887@ls/false) (if G3887@ls/false (apply (lambda (G3889@p) (G385a@quasicons (G382f@datum 'quasiquote) (G3862@quasi (list G3889@p) (+ G386c@lev '1)))) G3887@ls/false) ((lambda (G388b@t) ((lambda (G388d@ls/false) (if G388d@ls/false (apply (lambda (G388f@p G3890@q) (G385a@quasicons (G3862@quasi G388f@p G386c@lev) (G3862@quasi G3890@q G386c@lev))) G388d@ls/false) ((lambda (G3893@t) ((lambda (G3895@ls/false) (if (if G3895@ls/false (begin '#f (apply (lambda (G3897@x) (not (G2e13@stx? G3897@x))) G3895@ls/false)) '#f) (apply (lambda (G3899@x) (G385e@quasivector (G3860@vquasi G3899@x G386c@lev))) G3895@ls/false) ((lambda (G389b@t) ((lambda (G389d@ls/false) (if G389d@ls/false (apply (lambda (G389f@p) (list (G301c@scheme-stx 'quote) G389f@p)) G389d@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G389b@t))) (G308e@syntax-dispatch G389b@t 'any))) G3893@t))) (G308e@syntax-dispatch G3893@t '#(vector each-any)))) G388b@t))) (G308e@syntax-dispatch G388b@t '(any . any)))) G3885@t))) (G308e@syntax-dispatch G3885@t '(#(scheme-id quasiquote) any)))) G387d@t))) (G308e@syntax-dispatch G387d@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3875@t))) (G308e@syntax-dispatch G3875@t '((#(scheme-id unquote) . each-any) . any)))) G386f@t))) (G308e@syntax-dispatch G386f@t '(#(scheme-id unquote) any)))) G386b@p))) (lambda (G3863@x) ((lambda (G3865@t) ((lambda (G3867@ls/false) (if G3867@ls/false (apply (lambda (G3869@e) (G3862@quasi G3869@e '0)) G3867@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3865@t))) (G308e@syntax-dispatch G3865@t '(_ any)))) G3863@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G307e@quasisyntax-macro ((lambda () ((lambda (G3940@quasi) (begin (set! G3940@quasi (lambda (G3958@p G3959@lev) ((lambda (G395c@t) ((lambda (G395e@ls/false) (if G395e@ls/false (apply (lambda (G3960@p) (if (= G3959@lev '0) ((lambda (G3962@g) (values (list G3962@g) (list G3960@p) G3962@g)) (gensym)) (call-with-values (lambda () (G3940@quasi G3960@p (- G3959@lev '1))) (lambda (G3967@G3964 G3968@G3965 G3969@G3966) ((lambda (G396d@p G396e@rhs* G396f@lhs*) (values G396f@lhs* G396e@rhs* (list 'unsyntax G396d@p))) G3969@G3966 G3968@G3965 G3967@G3964))))) G395e@ls/false) ((lambda (G3973@t) ((lambda (G3975@ls/false) (if (if G3975@ls/false (begin '#f (apply (lambda () (= G3959@lev '0)) G3975@ls/false)) '#f) (apply (lambda () (G3181@syntax-violation '#f '"incorrect use of unsyntax" G3958@p)) G3975@ls/false) ((lambda (G3977@t) ((lambda (G3979@ls/false) (if G3979@ls/false (apply (lambda (G397b@p* G397c@q) (call-with-values (lambda () (G3940@quasi G397c@q G3959@lev)) (lambda (G3982@G397f G3983@G3980 G3984@G3981) ((lambda (G3988@q G3989@rhs* G398a@lhs*) (if (= G3959@lev '0) ((lambda (G398e@g*) (values (append G398e@g* G398a@lhs*) (append G397b@p* G3989@rhs*) (append G398e@g* G3988@q))) (map (lambda (G3990@x) (gensym)) G397b@p*)) (call-with-values (lambda () (G3940@quasi G397b@p* (- G3959@lev '1))) (lambda (G3995@G3992 G3996@G3993 G3997@G3994) ((lambda (G399b@p* G399c@rhs2* G399d@lhs2*) (values (append G399d@lhs2* G398a@lhs*) (append G399c@rhs2* G3989@rhs*) (cons (cons 'unsyntax G399b@p*) G3988@q))) G3997@G3994 G3996@G3993 G3995@G3992))))) G3984@G3981 G3983@G3980 G3982@G397f)))) G3979@ls/false) ((lambda (G39a1@t) ((lambda (G39a3@ls/false) (if G39a3@ls/false (apply (lambda (G39a5@p* G39a6@q) (call-with-values (lambda () (G3940@quasi G39a6@q G3959@lev)) (lambda (G39ac@G39a9 G39ad@G39aa G39ae@G39ab) ((lambda (G39b2@q G39b3@rhs* G39b4@lhs*) (if (= G3959@lev '0) ((lambda (G39b8@g*) (values (append (map (lambda (G39ba@g) (cons G39ba@g '(...))) G39b8@g*) G39b4@lhs*) (append G39a5@p* G39b3@rhs*) (append (apply append (map (lambda (G39bc@g) (cons G39bc@g '(...))) G39b8@g*)) G39b2@q))) (map (lambda (G39be@x) (gensym)) G39a5@p*)) (call-with-values (lambda () (G3940@quasi G39a5@p* (- G3959@lev '1))) (lambda (G39c3@G39c0 G39c4@G39c1 G39c5@G39c2) ((lambda (G39c9@p* G39ca@rhs2* G39cb@lhs2*) (values (append G39cb@lhs2* G39b4@lhs*) (append G39ca@rhs2* G39b3@rhs*) (cons (cons 'unsyntax-splicing G39c9@p*) G39b2@q))) G39c5@G39c2 G39c4@G39c1 G39c3@G39c0))))) G39ae@G39ab G39ad@G39aa G39ac@G39a9)))) G39a3@ls/false) ((lambda (G39cf@t) ((lambda (G39d1@ls/false) (if (if G39d1@ls/false (begin '#f (apply (lambda () (= G3959@lev '0)) G39d1@ls/false)) '#f) (apply (lambda () (G3181@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3958@p)) G39d1@ls/false) ((lambda (G39d3@t) ((lambda (G39d5@ls/false) (if G39d5@ls/false (apply (lambda (G39d7@p) (call-with-values (lambda () (G3940@quasi G39d7@p (+ G3959@lev '1))) (lambda (G39dc@G39d9 G39dd@G39da G39de@G39db) ((lambda (G39e2@p G39e3@rhs* G39e4@lhs*) (values G39e4@lhs* G39e3@rhs* (list 'quasisyntax G39e2@p))) G39de@G39db G39dd@G39da G39dc@G39d9)))) G39d5@ls/false) ((lambda (G39e8@t) ((lambda (G39ea@ls/false) (if G39ea@ls/false (apply (lambda (G39ec@p G39ed@q) (call-with-values (lambda () (G3940@quasi G39ec@p G3959@lev)) (lambda (G39f6@G39f0 G39f7@G39f1 G39f8@G39f2) (call-with-values (lambda () (G3940@quasi G39ed@q G3959@lev)) (lambda (G39fc@G39f3 G39fd@G39f4 G39fe@G39f5) ((lambda (G3a02@q G3a03@rhs2* G3a04@lhs2* G3a05@p G3a06@rhs* G3a07@lhs*) (values (append G3a04@lhs2* G3a07@lhs*) (append G3a03@rhs2* G3a06@rhs*) (cons G3a05@p G3a02@q))) G39fe@G39f5 G39fd@G39f4 G39fc@G39f3 G39f8@G39f2 G39f7@G39f1 G39f6@G39f0)))))) G39ea@ls/false) ((lambda (G3a0e@t) ((lambda (G3a10@ls/false) (if G3a10@ls/false (apply (lambda (G3a12@x*) (call-with-values (lambda () (G3940@quasi G3a12@x* G3959@lev)) (lambda (G3a17@G3a14 G3a18@G3a15 G3a19@G3a16) ((lambda (G3a1d@x* G3a1e@rhs* G3a1f@lhs*) (values G3a1f@lhs* G3a1e@rhs* (list->vector G3a1d@x*))) G3a19@G3a16 G3a18@G3a15 G3a17@G3a14)))) G3a10@ls/false) ((lambda (G3a23@t) ((lambda (G3a25@ls/false) (if G3a25@ls/false (apply (lambda () (values '() '() G3958@p)) G3a25@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3a23@t))) (G308e@syntax-dispatch G3a23@t '_))) G3a0e@t))) (G308e@syntax-dispatch G3a0e@t '#(vector each-any)))) G39e8@t))) (G308e@syntax-dispatch G39e8@t '(any . any)))) G39d3@t))) (G308e@syntax-dispatch G39d3@t '(#(scheme-id quasisyntax) any)))) G39cf@t))) (G308e@syntax-dispatch G39cf@t '#(scheme-id unsyntax-splicing)))) G39a1@t))) (G308e@syntax-dispatch G39a1@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3977@t))) (G308e@syntax-dispatch G3977@t '((#(scheme-id unsyntax) . each-any) . any)))) G3973@t))) (G308e@syntax-dispatch G3973@t '#(scheme-id unsyntax)))) G395c@t))) (G308e@syntax-dispatch G395c@t '(#(scheme-id unsyntax) any)))) G3958@p))) (lambda (G3941@x) ((lambda (G3943@t) ((lambda (G3945@ls/false) (if G3945@ls/false (apply (lambda (G3947@e) (call-with-values (lambda () (G3940@quasi G3947@e '0)) (lambda (G394c@G3949 G394d@G394a G394e@G394b) ((lambda (G3952@v G3953@rhs* G3954@lhs*) (G3044@bless (list 'syntax-case (cons 'list G3953@rhs*) '() (list G3954@lhs* (list 'syntax G3952@v))))) G394e@G394b G394d@G394a G394c@G3949)))) G3945@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3943@t))) (G308e@syntax-dispatch G3943@t '(_ any)))) G3941@x)))) '#f)))) (set! G3080@define-struct-macro (lambda (G3a27@stx) (G3181@syntax-violation '#f '"define-struct not supported" G3a27@stx))) (set! G3082@define-record-type-macro (lambda (G3a29@x) ((lambda (G3a2c@id G3a2e@get-record-name G3a30@get-record-constructor-name G3a32@get-record-predicate-name G3a34@get-clause G3a36@foo-rtd-code G3a38@parent-rtd-code G3a3a@parent-rcd-code G3a3c@foo-rcd-code G3a3e@get-protocol-code G3a40@get-fields G3a42@get-mutator-indices G3a44@get-mutators G3a46@get-accessors G3a48@enumerate G3a4a@do-define-record G3a4c@verify-clauses) (begin (set! G3a2c@id (lambda (G3c23@ctxt . G3c25@str*) (G3185@datum->syntax G3c23@ctxt (string->symbol (apply string-append (map (lambda (G3c27@x) (if (symbol? G3c27@x) (symbol->string G3c27@x) (if (string? G3c27@x) G3c27@x (assertion-violation 'define-record-type '"BUG")))) G3c25@str*)))))) (set! G3a2e@get-record-name (lambda (G3c11@spec) ((lambda (G3c13@t) ((lambda (G3c15@ls/false) (if G3c15@ls/false (apply (lambda (G3c17@foo G3c18@make-foo G3c19@foo?) G3c17@foo) G3c15@ls/false) ((lambda (G3c1d@t) ((lambda (G3c1f@ls/false) (if G3c1f@ls/false (apply (lambda (G3c21@foo) G3c21@foo) G3c1f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3c1d@t))) (G308e@syntax-dispatch G3c1d@t 'any))) G3c13@t))) (G308e@syntax-dispatch G3c13@t '(any any any)))) G3c11@spec))) (set! G3a30@get-record-constructor-name (lambda (G3bfd@spec) ((lambda (G3bff@t) ((lambda (G3c01@ls/false) (if G3c01@ls/false (apply (lambda (G3c03@foo G3c04@make-foo G3c05@foo?) G3c04@make-foo) G3c01@ls/false) ((lambda (G3c09@t) ((lambda (G3c0b@ls/false) (if (if G3c0b@ls/false (begin '#f (apply (lambda (G3c0d@foo) (G2e4b@id? G3c0d@foo)) G3c0b@ls/false)) '#f) (apply (lambda (G3c0f@foo) (G3a2c@id G3c0f@foo '"make-" (G2e61@stx->datum G3c0f@foo))) G3c0b@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3c09@t))) (G308e@syntax-dispatch G3c09@t 'any))) G3bff@t))) (G308e@syntax-dispatch G3bff@t '(any any any)))) G3bfd@spec))) (set! G3a32@get-record-predicate-name (lambda (G3be9@spec) ((lambda (G3beb@t) ((lambda (G3bed@ls/false) (if G3bed@ls/false (apply (lambda (G3bef@foo G3bf0@make-foo G3bf1@foo?) G3bf1@foo?) G3bed@ls/false) ((lambda (G3bf5@t) ((lambda (G3bf7@ls/false) (if (if G3bf7@ls/false (begin '#f (apply (lambda (G3bf9@foo) (G2e4b@id? G3bf9@foo)) G3bf7@ls/false)) '#f) (apply (lambda (G3bfb@foo) (G3a2c@id G3bfb@foo (G2e61@stx->datum G3bfb@foo) '"?")) G3bf7@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3bf5@t))) (G308e@syntax-dispatch G3bf5@t 'any))) G3beb@t))) (G308e@syntax-dispatch G3beb@t '(any any any)))) G3be9@spec))) (set! G3a34@get-clause (lambda (G3bd7@id G3bd8@ls) ((lambda (G3bdb@t) ((lambda (G3bdd@ls/false) (if G3bdd@ls/false (apply (lambda () '#f) G3bdd@ls/false) ((lambda (G3bdf@t) ((lambda (G3be1@ls/false) (if G3be1@ls/false (apply (lambda (G3be3@x G3be4@rest G3be5@ls) (if (G2e53@free-id=? (G3044@bless G3bd7@id) G3be3@x) (cons G3be3@x G3be4@rest) (G3a34@get-clause G3bd7@id G3be5@ls))) G3be1@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3bdf@t))) (G308e@syntax-dispatch G3bdf@t '((any . any) . any)))) G3bdb@t))) (G308e@syntax-dispatch G3bdb@t '()))) G3bd8@ls))) (set! G3a36@foo-rtd-code (lambda (G3b85@name G3b86@clause* G3b87@parent-rtd-code) ((lambda (G3b8c@convert-field-spec*) (begin (set! G3b8c@convert-field-spec* (lambda (G3bbd@ls) (list->vector (map (lambda (G3bbf@x) ((lambda (G3bc1@t) ((lambda (G3bc3@ls/false) (if G3bc3@ls/false (apply (lambda (G3bc5@name G3bc6@rest) (list 'mutable G3bc5@name)) G3bc3@ls/false) ((lambda (G3bc9@t) ((lambda (G3bcb@ls/false) (if G3bcb@ls/false (apply (lambda (G3bcd@name G3bce@rest) (list 'immutable G3bcd@name)) G3bcb@ls/false) ((lambda (G3bd1@t) ((lambda (G3bd3@ls/false) (if G3bd3@ls/false (apply (lambda (G3bd5@name) (list 'immutable G3bd5@name)) G3bd3@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3bd1@t))) (G308e@syntax-dispatch G3bd1@t 'any))) G3bc9@t))) (G308e@syntax-dispatch G3bc9@t '(#(scheme-id immutable) any . any)))) G3bc1@t))) (G308e@syntax-dispatch G3bc1@t '(#(scheme-id mutable) any . any)))) G3bbf@x)) G3bbd@ls)))) ((lambda (G3b8d@uid-code G3b8e@sealed? G3b8f@opaque? G3b90@fields) (G3044@bless (list 'make-record-type-descriptor (list 'quote G3b85@name) G3b87@parent-rtd-code G3b8d@uid-code G3b8e@sealed? G3b8f@opaque? G3b90@fields))) ((lambda (G3b95@t) ((lambda (G3b97@ls/false) (if G3b97@ls/false (apply (lambda () (list 'quote (gensym))) G3b97@ls/false) ((lambda (G3b99@t) ((lambda (G3b9b@ls/false) (if G3b9b@ls/false (apply (lambda (G3b9d@uid) (list 'quote G3b9d@uid)) G3b9b@ls/false) ((lambda (G3b9f@t) ((lambda (G3ba1@ls/false) (if G3ba1@ls/false (apply (lambda () '#f) G3ba1@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3b9f@t))) (G308e@syntax-dispatch G3b9f@t '_))) G3b99@t))) (G308e@syntax-dispatch G3b99@t '(_ any)))) G3b95@t))) (G308e@syntax-dispatch G3b95@t '(_)))) (G3a34@get-clause 'nongenerative G3b86@clause*)) ((lambda (G3ba3@t) ((lambda (G3ba5@ls/false) (if G3ba5@ls/false (apply (lambda () '#t) G3ba5@ls/false) ((lambda (G3ba7@t) ((lambda (G3ba9@ls/false) (if G3ba9@ls/false (apply (lambda () '#f) G3ba9@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3ba7@t))) (G308e@syntax-dispatch G3ba7@t '_))) G3ba3@t))) (G308e@syntax-dispatch G3ba3@t '(_ #(atom #t))))) (G3a34@get-clause 'sealed G3b86@clause*)) ((lambda (G3bab@t) ((lambda (G3bad@ls/false) (if G3bad@ls/false (apply (lambda () '#t) G3bad@ls/false) ((lambda (G3baf@t) ((lambda (G3bb1@ls/false) (if G3bb1@ls/false (apply (lambda () '#f) G3bb1@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3baf@t))) (G308e@syntax-dispatch G3baf@t '_))) G3bab@t))) (G308e@syntax-dispatch G3bab@t '(_ #(atom #t))))) (G3a34@get-clause 'opaque G3b86@clause*)) ((lambda (G3bb3@t) ((lambda (G3bb5@ls/false) (if G3bb5@ls/false (apply (lambda (G3bb7@field-spec*) (list 'quote (G3b8c@convert-field-spec* G3bb7@field-spec*))) G3bb5@ls/false) ((lambda (G3bb9@t) ((lambda (G3bbb@ls/false) (if G3bbb@ls/false (apply (lambda () ''#()) G3bbb@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3bb9@t))) (G308e@syntax-dispatch G3bb9@t '_))) G3bb3@t))) (G308e@syntax-dispatch G3bb3@t '(_ . each-any)))) (G3a34@get-clause 'fields G3b86@clause*))))) '#f))) (set! G3a38@parent-rtd-code (lambda (G3b6d@clause*) ((lambda (G3b6f@t) ((lambda (G3b71@ls/false) (if G3b71@ls/false (apply (lambda (G3b73@name) (list 'record-type-descriptor G3b73@name)) G3b71@ls/false) ((lambda (G3b75@t) ((lambda (G3b77@ls/false) (if G3b77@ls/false (apply (lambda () ((lambda (G3b79@t) ((lambda (G3b7b@ls/false) (if G3b7b@ls/false (apply (lambda (G3b7d@rtd G3b7e@rcd) G3b7d@rtd) G3b7b@ls/false) ((lambda (G3b81@t) ((lambda (G3b83@ls/false) (if G3b83@ls/false (apply (lambda () '#f) G3b83@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3b81@t))) (G308e@syntax-dispatch G3b81@t '#(atom #f)))) G3b79@t))) (G308e@syntax-dispatch G3b79@t '(_ any any)))) (G3a34@get-clause 'parent-rtd G3b6d@clause*))) G3b77@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3b75@t))) (G308e@syntax-dispatch G3b75@t '#(atom #f)))) G3b6f@t))) (G308e@syntax-dispatch G3b6f@t '(_ any)))) (G3a34@get-clause 'parent G3b6d@clause*)))) (set! G3a3a@parent-rcd-code (lambda (G3b55@clause*) ((lambda (G3b57@t) ((lambda (G3b59@ls/false) (if G3b59@ls/false (apply (lambda (G3b5b@name) (list 'record-constructor-descriptor G3b5b@name)) G3b59@ls/false) ((lambda (G3b5d@t) ((lambda (G3b5f@ls/false) (if G3b5f@ls/false (apply (lambda () ((lambda (G3b61@t) ((lambda (G3b63@ls/false) (if G3b63@ls/false (apply (lambda (G3b65@rtd G3b66@rcd) G3b66@rcd) G3b63@ls/false) ((lambda (G3b69@t) ((lambda (G3b6b@ls/false) (if G3b6b@ls/false (apply (lambda () '#f) G3b6b@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3b69@t))) (G308e@syntax-dispatch G3b69@t '#(atom #f)))) G3b61@t))) (G308e@syntax-dispatch G3b61@t '(_ any any)))) (G3a34@get-clause 'parent-rtd G3b55@clause*))) G3b5f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3b5d@t))) (G308e@syntax-dispatch G3b5d@t '#(atom #f)))) G3b57@t))) (G308e@syntax-dispatch G3b57@t '(_ any)))) (G3a34@get-clause 'parent G3b55@clause*)))) (set! G3a3c@foo-rcd-code (lambda (G3b4d@clause* G3b4e@foo-rtd G3b4f@protocol G3b50@parent-rcd-code) (list 'make-record-constructor-descriptor G3b4e@foo-rtd G3b50@parent-rcd-code G3b4f@protocol))) (set! G3a3e@get-protocol-code (lambda (G3b41@clause*) ((lambda (G3b43@t) ((lambda (G3b45@ls/false) (if G3b45@ls/false (apply (lambda (G3b47@expr) G3b47@expr) G3b45@ls/false) ((lambda (G3b49@t) ((lambda (G3b4b@ls/false) (if G3b4b@ls/false (apply (lambda () '#f) G3b4b@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3b49@t))) (G308e@syntax-dispatch G3b49@t '_))) G3b43@t))) (G308e@syntax-dispatch G3b43@t '(_ any)))) (G3a34@get-clause 'protocol G3b41@clause*)))) (set! G3a40@get-fields (lambda (G3b2f@clause*) ((lambda (G3b31@t) ((lambda (G3b33@ls/false) (if G3b33@ls/false (apply (lambda () '()) G3b33@ls/false) ((lambda (G3b35@t) ((lambda (G3b37@ls/false) (if G3b37@ls/false (apply (lambda (G3b39@f*) G3b39@f*) G3b37@ls/false) ((lambda (G3b3b@t) ((lambda (G3b3d@ls/false) (if G3b3d@ls/false (apply (lambda (G3b3f@rest) (G3a40@get-fields G3b3f@rest)) G3b3d@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3b3b@t))) (G308e@syntax-dispatch G3b3b@t '(_ . any)))) G3b35@t))) (G308e@syntax-dispatch G3b35@t '((#(scheme-id fields) . each-any) . _)))) G3b31@t))) (G308e@syntax-dispatch G3b31@t '()))) G3b2f@clause*))) (set! G3a42@get-mutator-indices (lambda (G3b17@fields) ((letrec ((G3b19@f (lambda (G3b1b@fields G3b1c@i) ((lambda (G3b1f@t) ((lambda (G3b21@ls/false) (if G3b21@ls/false (apply (lambda () '()) G3b21@ls/false) ((lambda (G3b23@t) ((lambda (G3b25@ls/false) (if G3b25@ls/false (apply (lambda (G3b27@rest) (cons G3b1c@i (G3b19@f G3b27@rest (+ G3b1c@i '1)))) G3b25@ls/false) ((lambda (G3b29@t) ((lambda (G3b2b@ls/false) (if G3b2b@ls/false (apply (lambda (G3b2d@rest) (G3b19@f G3b2d@rest (+ G3b1c@i '1))) G3b2b@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3b29@t))) (G308e@syntax-dispatch G3b29@t '(_ . any)))) G3b23@t))) (G308e@syntax-dispatch G3b23@t '((#(scheme-id mutable) . _) . any)))) G3b1f@t))) (G308e@syntax-dispatch G3b1f@t '()))) G3b1b@fields)))) G3b19@f) G3b17@fields '0))) (set! G3a44@get-mutators (lambda (G3aed@foo G3aee@fields) ((lambda (G3af2@gen-name) (begin (set! G3af2@gen-name (lambda (G3b15@x) (G3185@datum->syntax G3aed@foo (string->symbol (string-append (symbol->string (G3187@syntax->datum G3aed@foo)) '"-" (symbol->string (G3187@syntax->datum G3b15@x)) '"-set!"))))) ((letrec ((G3af3@f (lambda (G3af5@fields) ((lambda (G3af7@t) ((lambda (G3af9@ls/false) (if G3af9@ls/false (apply (lambda () '()) G3af9@ls/false) ((lambda (G3afb@t) ((lambda (G3afd@ls/false) (if G3afd@ls/false (apply (lambda (G3aff@name G3b00@accessor G3b01@mutator G3b02@rest) (cons G3b01@mutator (G3af3@f G3b02@rest))) G3afd@ls/false) ((lambda (G3b07@t) ((lambda (G3b09@ls/false) (if G3b09@ls/false (apply (lambda (G3b0b@name G3b0c@rest) (cons (G3af2@gen-name G3b0b@name) (G3af3@f G3b0c@rest))) G3b09@ls/false) ((lambda (G3b0f@t) ((lambda (G3b11@ls/false) (if G3b11@ls/false (apply (lambda (G3b13@rest) (G3af3@f G3b13@rest)) G3b11@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3b0f@t))) (G308e@syntax-dispatch G3b0f@t '(_ . any)))) G3b07@t))) (G308e@syntax-dispatch G3b07@t '((#(scheme-id mutable) any) . any)))) G3afb@t))) (G308e@syntax-dispatch G3afb@t '((#(scheme-id mutable) any any any) . any)))) G3af7@t))) (G308e@syntax-dispatch G3af7@t '()))) G3af5@fields)))) G3af3@f) G3aee@fields))) '#f))) (set! G3a46@get-accessors (lambda (G3aa9@foo G3aaa@fields) ((lambda (G3aae@gen-name) (begin (set! G3aae@gen-name (lambda (G3aeb@x) (G3185@datum->syntax G3aa9@foo (string->symbol (string-append (symbol->string (G3187@syntax->datum G3aa9@foo)) '"-" (symbol->string (G3187@syntax->datum G3aeb@x))))))) (map (lambda (G3aaf@field) ((lambda (G3ab1@t) ((lambda (G3ab3@ls/false) (if (if G3ab3@ls/false (begin '#f (apply (lambda (G3ab5@name G3ab6@accessor G3ab7@mutator) (G2e4b@id? G3ab6@accessor)) G3ab3@ls/false)) '#f) (apply (lambda (G3abb@name G3abc@accessor G3abd@mutator) G3abc@accessor) G3ab3@ls/false) ((lambda (G3ac1@t) ((lambda (G3ac3@ls/false) (if (if G3ac3@ls/false (begin '#f (apply (lambda (G3ac5@name G3ac6@accessor) (G2e4b@id? G3ac6@accessor)) G3ac3@ls/false)) '#f) (apply (lambda (G3ac9@name G3aca@accessor) G3aca@accessor) G3ac3@ls/false) ((lambda (G3acd@t) ((lambda (G3acf@ls/false) (if (if G3acf@ls/false (begin '#f (apply (lambda (G3ad1@name) (G2e4b@id? G3ad1@name)) G3acf@ls/false)) '#f) (apply (lambda (G3ad3@name) (G3aae@gen-name G3ad3@name)) G3acf@ls/false) ((lambda (G3ad5@t) ((lambda (G3ad7@ls/false) (if (if G3ad7@ls/false (begin '#f (apply (lambda (G3ad9@name) (G2e4b@id? G3ad9@name)) G3ad7@ls/false)) '#f) (apply (lambda (G3adb@name) (G3aae@gen-name G3adb@name)) G3ad7@ls/false) ((lambda (G3add@t) ((lambda (G3adf@ls/false) (if (if G3adf@ls/false (begin '#f (apply (lambda (G3ae1@name) (G2e4b@id? G3ae1@name)) G3adf@ls/false)) '#f) (apply (lambda (G3ae3@name) (G3aae@gen-name G3ae3@name)) G3adf@ls/false) ((lambda (G3ae5@t) ((lambda (G3ae7@ls/false) (if G3ae7@ls/false (apply (lambda (G3ae9@others) (G3181@syntax-violation '#f '"invalid field spec" G3aaf@field)) G3ae7@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3ae5@t))) (G308e@syntax-dispatch G3ae5@t 'any))) G3add@t))) (G308e@syntax-dispatch G3add@t 'any))) G3ad5@t))) (G308e@syntax-dispatch G3ad5@t '(#(scheme-id immutable) any)))) G3acd@t))) (G308e@syntax-dispatch G3acd@t '(#(scheme-id mutable) any)))) G3ac1@t))) (G308e@syntax-dispatch G3ac1@t '(#(scheme-id immutable) any any)))) G3ab1@t))) (G308e@syntax-dispatch G3ab1@t '(#(scheme-id mutable) any any any)))) G3aaf@field)) G3aaa@fields))) '#f))) (set! G3a48@enumerate (lambda (G3aa1@ls) ((letrec ((G3aa3@f (lambda (G3aa5@ls G3aa6@i) (if (null? G3aa5@ls) '() (cons G3aa6@i (G3aa3@f (cdr G3aa5@ls) (+ G3aa6@i '1))))))) G3aa3@f) G3aa1@ls '0))) (set! G3a4a@do-define-record (lambda (G3a79@namespec G3a7a@clause*) ((lambda (G3a7d@foo) ((lambda (G3a7f@foo-rtd) ((lambda (G3a81@foo-rcd) ((lambda (G3a83@protocol) ((lambda (G3a85@make-foo) ((lambda (G3a87@fields) ((lambda (G3a89@idx*) ((lambda (G3a8b@foo-x*) ((lambda (G3a8d@set-foo-x!*) ((lambda (G3a8f@set-foo-idx*) ((lambda (G3a91@foo?) ((lambda (G3a93@foo-rtd-code) ((lambda (G3a95@foo-rcd-code) ((lambda (G3a97@protocol-code) ((lambda () (G3044@bless (cons 'begin (cons (list 'define G3a7f@foo-rtd G3a93@foo-rtd-code) (cons (list 'define G3a83@protocol G3a97@protocol-code) (cons (list 'define G3a81@foo-rcd G3a95@foo-rcd-code) (cons (list 'define-syntax G3a7d@foo (list 'list ''$rtd (list 'syntax G3a7f@foo-rtd) (list 'syntax G3a81@foo-rcd))) (cons (list 'define G3a91@foo? (list 'record-predicate G3a7f@foo-rtd)) (cons (list 'define G3a85@make-foo (list 'record-constructor G3a81@foo-rcd)) (append (map (lambda (G3a99@foo-x G3a9a@idx) (list 'define G3a99@foo-x (list 'record-accessor G3a7f@foo-rtd G3a9a@idx))) G3a8b@foo-x* G3a89@idx*) (map (lambda (G3a9d@set-foo-x! G3a9e@idx) (list 'define G3a9d@set-foo-x! (list 'record-mutator G3a7f@foo-rtd G3a9e@idx))) G3a8d@set-foo-x!* G3a8f@set-foo-idx*))))))))))))) (G3a3e@get-protocol-code G3a7a@clause*))) (G3a3c@foo-rcd-code G3a7a@clause* G3a7f@foo-rtd G3a83@protocol (G3a3a@parent-rcd-code G3a7a@clause*)))) (G3a36@foo-rtd-code G3a7d@foo G3a7a@clause* (G3a38@parent-rtd-code G3a7a@clause*)))) (G3a32@get-record-predicate-name G3a79@namespec))) (G3a42@get-mutator-indices G3a87@fields))) (G3a44@get-mutators G3a7d@foo G3a87@fields))) (G3a46@get-accessors G3a7d@foo G3a87@fields))) (G3a48@enumerate G3a87@fields))) (G3a40@get-fields G3a7a@clause*))) (G3a30@get-record-constructor-name G3a79@namespec))) (gensym))) (gensym))) (gensym))) (G3a2e@get-record-name G3a79@namespec)))) (set! G3a4c@verify-clauses (lambda (G3a55@x G3a56@cls*) ((lambda (G3a5a@valid-kwds G3a5c@free-id-member?) (begin (set! G3a5a@valid-kwds (map G3044@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a5c@free-id-member? (lambda (G3a73@x G3a74@ls) (if (pair? G3a74@ls) (begin '#f ((lambda (G3a77@t) (if G3a77@t G3a77@t (begin '#f (G3a5c@free-id-member? G3a73@x (cdr G3a74@ls))))) (G2e53@free-id=? G3a73@x (car G3a74@ls)))) '#f))) ((letrec ((G3a5d@f (lambda (G3a5f@cls* G3a60@seen*) (if (not (null? G3a5f@cls*)) ((lambda (G3a63@t) ((lambda (G3a65@ls/false) (if G3a65@ls/false (apply (lambda (G3a67@kwd G3a68@rest) (if ((lambda (G3a6b@t) (if G3a6b@t G3a6b@t (begin '#f (not (G3a5c@free-id-member? G3a67@kwd G3a5a@valid-kwds))))) (not (G2e4b@id? G3a67@kwd))) (G3181@syntax-violation '#f '"not a valid define-record-type keyword" G3a67@kwd) (if (G2e59@bound-id-member? G3a67@kwd G3a60@seen*) (G3181@syntax-violation '#f '"duplicate use of keyword " G3a55@x G3a67@kwd) (G3a5d@f (cdr G3a5f@cls*) (cons G3a67@kwd G3a60@seen*))))) G3a65@ls/false) ((lambda (G3a6d@t) ((lambda (G3a6f@ls/false) (if G3a6f@ls/false (apply (lambda (G3a71@cls) (G3181@syntax-violation '#f '"malformed define-record-type clause" G3a71@cls)) G3a6f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3a6d@t))) (G308e@syntax-dispatch G3a6d@t 'any))) G3a63@t))) (G308e@syntax-dispatch G3a63@t '(any . any)))) (car G3a5f@cls*)) (void))))) G3a5d@f) G3a56@cls* '()))) '#f '#f))) ((lambda (G3a4d@t) ((lambda (G3a4f@ls/false) (if G3a4f@ls/false (apply (lambda (G3a51@namespec G3a52@clause*) (begin (G3a4c@verify-clauses G3a29@x G3a52@clause*) (G3a4a@do-define-record G3a51@namespec G3a52@clause*))) G3a4f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3a4d@t))) (G308e@syntax-dispatch G3a4d@t '(_ any . each-any)))) G3a29@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3084@define-condition-type-macro (lambda (G3c29@x) ((lambda (G3c2c@mkname) (begin (set! G3c2c@mkname (lambda (G3c59@name G3c5a@suffix) (G3185@datum->syntax G3c59@name (string->symbol (string-append (symbol->string (G3187@syntax->datum G3c59@name)) G3c5a@suffix))))) ((lambda (G3c2d@t) ((lambda (G3c2f@ls/false) (if (if G3c2f@ls/false (begin '#f (apply (lambda (G3c31@ctxt G3c32@name G3c33@super G3c34@constructor G3c35@predicate G3c36@field* G3c37@accessor*) (if (G2e4b@id? G3c32@name) (if (G2e4b@id? G3c33@super) (if (G2e4b@id? G3c34@constructor) (if (G2e4b@id? G3c35@predicate) (if (for-all G2e4b@id? G3c36@field*) (begin '#f (for-all G2e4b@id? G3c37@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c2f@ls/false)) '#f) (apply (lambda (G3c3f@ctxt G3c40@name G3c41@super G3c42@constructor G3c43@predicate G3c44@field* G3c45@accessor*) ((lambda (G3c4d@aux-accessor*) (G3044@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c40@name G3c42@constructor (gensym)) (cons (list 'parent G3c41@super) (cons (cons 'fields (map (lambda (G3c4f@field G3c50@aux) (list 'immutable G3c4f@field G3c50@aux)) G3c44@field* G3c4d@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c43@predicate (list 'condition-predicate (list 'record-type-descriptor G3c40@name))) (map (lambda (G3c53@accessor G3c54@aux) (list 'define G3c53@accessor (list 'condition-accessor (list 'record-type-descriptor G3c40@name) G3c54@aux))) G3c45@accessor* G3c4d@aux-accessor*)))))) (map (lambda (G3c57@x) (gensym)) G3c45@accessor*))) G3c2f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3c2d@t))) (G308e@syntax-dispatch G3c2d@t '(any any any any any . #(each (any any)))))) G3c29@x))) '#f))) (set! G3086@incorrect-usage-macro (lambda (G3c5d@e) (G3181@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c5d@e))) (set! G3088@parameterize-macro (lambda (G3c5f@e) ((lambda (G3c61@t) ((lambda (G3c63@ls/false) (if G3c63@ls/false (apply (lambda (G3c65@b G3c66@b*) (G3044@bless (cons 'let (cons '() (cons G3c65@b G3c66@b*))))) G3c63@ls/false) ((lambda (G3c69@t) ((lambda (G3c6b@ls/false) (if G3c6b@ls/false (apply (lambda (G3c6d@olhs* G3c6e@orhs* G3c6f@b G3c70@b*) ((lambda (G3c75@lhs* G3c76@rhs*) (G3044@bless (cons (list 'lambda (append G3c75@lhs* G3c76@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c79@lhs G3c7a@rhs) (list 'let (list (list 't (list G3c79@lhs))) (list G3c79@lhs G3c7a@rhs) (cons 'set! (cons G3c7a@rhs '(t))))) G3c75@lhs* G3c76@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c6f@b G3c70@b*))) '(swap)))))) (append G3c6d@olhs* G3c6e@orhs*)))) (G316d@generate-temporaries G3c6d@olhs*) (G316d@generate-temporaries G3c6e@orhs*))) G3c6b@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3c69@t))) (G308e@syntax-dispatch G3c69@t '(_ #(each (any any)) any . each-any)))) G3c61@t))) (G308e@syntax-dispatch G3c61@t '(_ () any . each-any)))) G3c5f@e))) (set! G308a@foreign-call-transformer (lambda (G3c7d@e G3c7e@r G3c7f@mr) ((lambda (G3c83@t) ((lambda (G3c85@ls/false) (if G3c85@ls/false (apply (lambda (G3c87@name G3c88@arg*) (cons 'foreign-call (cons (G30b2@chi-expr G3c87@name G3c7e@r G3c7f@mr) (G30ae@chi-expr* G3c88@arg* G3c7e@r G3c7f@mr)))) G3c85@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3c83@t))) (G308e@syntax-dispatch G3c83@t '(_ any . each-any)))) G3c7d@e))) (set! G308c@convert-pattern (lambda (G3c8b@pattern G3c8c@keys) ((lambda (G3c90@cvt* G3c92@cvt) (begin (set! G3c90@cvt* (lambda (G3d21@p* G3d22@n G3d23@ids) (if (null? G3d21@p*) (values '() G3d23@ids) (call-with-values (lambda () (G3c90@cvt* (cdr G3d21@p*) G3d22@n G3d23@ids)) (lambda (G3d29@G3d27 G3d2a@G3d28) ((lambda (G3d2d@ids G3d2e@y) (call-with-values (lambda () (G3c92@cvt (car G3d21@p*) G3d22@n G3d2d@ids)) (lambda (G3d33@G3d31 G3d34@G3d32) ((lambda (G3d37@ids G3d38@x) (values (cons G3d38@x G3d2e@y) G3d37@ids)) G3d34@G3d32 G3d33@G3d31)))) G3d2a@G3d28 G3d29@G3d27)))))) (set! G3c92@cvt (lambda (G3c93@p G3c94@n G3c95@ids) ((lambda (G3c99@t) ((lambda (G3c9b@ls/false) (if (if G3c9b@ls/false (begin '#f (apply (lambda (G3c9d@id) (G2e4b@id? G3c9d@id)) G3c9b@ls/false)) '#f) (apply (lambda (G3c9f@id) (if (G2e59@bound-id-member? G3c93@p G3c8c@keys) (values (vector 'free-id G3c93@p) G3c95@ids) (if (G2e53@free-id=? G3c93@p (G301c@scheme-stx '_)) (values '_ G3c95@ids) (values 'any (cons (cons G3c93@p G3c94@n) G3c95@ids))))) G3c9b@ls/false) ((lambda (G3ca1@t) ((lambda (G3ca3@ls/false) (if (if G3ca3@ls/false (begin '#f (apply (lambda (G3ca5@p G3ca6@dots) (G3090@ellipsis? G3ca6@dots)) G3ca3@ls/false)) '#f) (apply (lambda (G3ca9@p G3caa@dots) (call-with-values (lambda () (G3c92@cvt G3ca9@p (+ G3c94@n '1) G3c95@ids)) (lambda (G3caf@G3cad G3cb0@G3cae) ((lambda (G3cb3@ids G3cb4@p) (values (if (eq? G3cb4@p 'any) 'each-any (vector 'each G3cb4@p)) G3cb3@ids)) G3cb0@G3cae G3caf@G3cad)))) G3ca3@ls/false) ((lambda (G3cb7@t) ((lambda (G3cb9@ls/false) (if (if G3cb9@ls/false (begin '#f (apply (lambda (G3cbb@x G3cbc@dots G3cbd@ys G3cbe@z) (G3090@ellipsis? G3cbc@dots)) G3cb9@ls/false)) '#f) (apply (lambda (G3cc3@x G3cc4@dots G3cc5@ys G3cc6@z) (call-with-values (lambda () (G3c92@cvt G3cc6@z G3c94@n G3c95@ids)) (lambda (G3ccd@G3ccb G3cce@G3ccc) ((lambda (G3cd1@ids G3cd2@z) (call-with-values (lambda () (G3c90@cvt* G3cc5@ys G3c94@n G3cd1@ids)) (lambda (G3cd7@G3cd5 G3cd8@G3cd6) ((lambda (G3cdb@ids G3cdc@ys) (call-with-values (lambda () (G3c92@cvt G3cc3@x (+ G3c94@n '1) G3cdb@ids)) (lambda (G3ce1@G3cdf G3ce2@G3ce0) ((lambda (G3ce5@ids G3ce6@x) (values (vector 'each+ G3ce6@x (reverse G3cdc@ys) G3cd2@z) G3ce5@ids)) G3ce2@G3ce0 G3ce1@G3cdf)))) G3cd8@G3cd6 G3cd7@G3cd5)))) G3cce@G3ccc G3ccd@G3ccb)))) G3cb9@ls/false) ((lambda (G3ce9@t) ((lambda (G3ceb@ls/false) (if G3ceb@ls/false (apply (lambda (G3ced@x G3cee@y) (call-with-values (lambda () (G3c92@cvt G3cee@y G3c94@n G3c95@ids)) (lambda (G3cf3@G3cf1 G3cf4@G3cf2) ((lambda (G3cf7@ids G3cf8@y) (call-with-values (lambda () (G3c92@cvt G3ced@x G3c94@n G3cf7@ids)) (lambda (G3cfd@G3cfb G3cfe@G3cfc) ((lambda (G3d01@ids G3d02@x) (values (cons G3d02@x G3cf8@y) G3d01@ids)) G3cfe@G3cfc G3cfd@G3cfb)))) G3cf4@G3cf2 G3cf3@G3cf1)))) G3ceb@ls/false) ((lambda (G3d05@t) ((lambda (G3d07@ls/false) (if G3d07@ls/false (apply (lambda () (values '() G3c95@ids)) G3d07@ls/false) ((lambda (G3d09@t) ((lambda (G3d0b@ls/false) (if (if G3d0b@ls/false (begin '#f (apply (lambda (G3d0d@p) (not (G2e13@stx? G3d0d@p))) G3d0b@ls/false)) '#f) (apply (lambda (G3d0f@p) (call-with-values (lambda () (G3c92@cvt G3d0f@p G3c94@n G3c95@ids)) (lambda (G3d13@G3d11 G3d14@G3d12) ((lambda (G3d17@ids G3d18@p) (values (vector 'vector G3d18@p) G3d17@ids)) G3d14@G3d12 G3d13@G3d11)))) G3d0b@ls/false) ((lambda (G3d1b@t) ((lambda (G3d1d@ls/false) (if G3d1d@ls/false (apply (lambda (G3d1f@datum) (values (vector 'atom (G2e61@stx->datum G3d1f@datum)) G3c95@ids)) G3d1d@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3d1b@t))) (G308e@syntax-dispatch G3d1b@t 'any))) G3d09@t))) (G308e@syntax-dispatch G3d09@t '#(vector each-any)))) G3d05@t))) (G308e@syntax-dispatch G3d05@t '()))) G3ce9@t))) (G308e@syntax-dispatch G3ce9@t '(any . any)))) G3cb7@t))) (G308e@syntax-dispatch G3cb7@t '(any any . #(each+ any () any))))) G3ca1@t))) (G308e@syntax-dispatch G3ca1@t '(any any)))) G3c99@t))) (G308e@syntax-dispatch G3c99@t 'any))) G3c93@p))) (G3c92@cvt G3c8b@pattern '0 '()))) '#f '#f))) (set! G308e@syntax-dispatch ((lambda () ((lambda (G3d3c@stx^ G3d3e@match-each G3d40@match-each+ G3d42@match-each-any G3d44@match-empty G3d46@combine G3d48@match* G3d4a@match) (begin (set! G3d3c@stx^ (lambda (G3e05@e G3e06@m* G3e07@s* G3e08@ae*) (if (if (null? G3e06@m*) (if (null? G3e07@s*) (begin '#f (null? G3e08@ae*)) '#f) '#f) G3e05@e (G2e33@mkstx G3e05@e G3e06@m* G3e07@s* G3e08@ae*)))) (set! G3d3e@match-each (lambda (G3de8@e G3de9@p G3dea@m* G3deb@s* G3dec@ae*) (if (pair? G3de8@e) ((lambda (G3df2@first) (if G3df2@first (begin '#f ((lambda (G3df4@rest) (if G3df4@rest (begin '#f (cons G3df2@first G3df4@rest)) '#f)) (G3d3e@match-each (cdr G3de8@e) G3de9@p G3dea@m* G3deb@s* G3dec@ae*))) '#f)) (G3d4a@match (car G3de8@e) G3de9@p G3dea@m* G3deb@s* G3dec@ae* '())) (if (null? G3de8@e) '() (if (G2e13@stx? G3de8@e) (if (not (G2dc1@top-marked? G3dea@m*)) (begin '#f (call-with-values (lambda () (G2e31@join-wraps G3dea@m* G3deb@s* G3dec@ae* G3de8@e)) (lambda (G3df9@G3df6 G3dfa@G3df7 G3dfb@G3df8) ((lambda (G3dff@ae* G3e00@s* G3e01@m*) (G3d3e@match-each (G2e17@stx-expr G3de8@e) G3de9@p G3e01@m* G3e00@s* G3dff@ae*)) G3dfb@G3df8 G3dfa@G3df7 G3df9@G3df6)))) '#f) (if (G2992@G2892@annotation? G3de8@e) (G3d3e@match-each (G2994@G2896@annotation-expression G3de8@e) G3de9@p G3dea@m* G3deb@s* G3dec@ae*) '#f)))))) (set! G3d40@match-each+ (lambda (G3dae@e G3daf@x-pat G3db0@y-pat G3db1@z-pat G3db2@m* G3db3@s* G3db4@ae* G3db5@r) ((letrec ((G3dbe@f (lambda (G3dc0@e G3dc1@m* G3dc2@s* G3dc3@ae*) (if (pair? G3dc0@e) (call-with-values (lambda () (G3dbe@f (cdr G3dc0@e) G3dc1@m* G3dc2@s* G3dc3@ae*)) (lambda (G3dcb@G3dc8 G3dcc@G3dc9 G3dcd@G3dca) ((lambda (G3dd1@r G3dd2@y-pat G3dd3@xr*) (if G3dd1@r (if (null? G3dd2@y-pat) ((lambda (G3dd7@xr) (if G3dd7@xr (values (cons G3dd7@xr G3dd3@xr*) G3dd2@y-pat G3dd1@r) (values '#f '#f '#f))) (G3d4a@match (car G3dc0@e) G3daf@x-pat G3dc1@m* G3dc2@s* G3dc3@ae* '())) (values '() (cdr G3dd2@y-pat) (G3d4a@match (car G3dc0@e) (car G3dd2@y-pat) G3dc1@m* G3dc2@s* G3dc3@ae* G3dd1@r))) (values '#f '#f '#f))) G3dcd@G3dca G3dcc@G3dc9 G3dcb@G3dc8))) (if (G2e13@stx? G3dc0@e) (if (G2dc1@top-marked? G3dc1@m*) (values '() G3db0@y-pat (G3d4a@match G3dc0@e G3db1@z-pat G3dc1@m* G3dc2@s* G3dc3@ae* G3db5@r)) (call-with-values (lambda () (G2e31@join-wraps G3dc1@m* G3dc2@s* G3dc3@ae* G3dc0@e)) (lambda (G3ddc@G3dd9 G3ddd@G3dda G3dde@G3ddb) ((lambda (G3de2@ae* G3de3@s* G3de4@m*) (G3dbe@f (G2e17@stx-expr G3dc0@e) G3de4@m* G3de3@s* G3de2@ae*)) G3dde@G3ddb G3ddd@G3dda G3ddc@G3dd9)))) (if (G2992@G2892@annotation? G3dc0@e) (G3dbe@f (G2994@G2896@annotation-expression G3dc0@e) G3dc1@m* G3dc2@s* G3dc3@ae*) (values '() G3db0@y-pat (G3d4a@match G3dc0@e G3db1@z-pat G3dc1@m* G3dc2@s* G3dc3@ae* G3db5@r)))))))) G3dbe@f) G3dae@e G3db2@m* G3db3@s* G3db4@ae*))) (set! G3d42@match-each-any (lambda (G3d95@e G3d96@m* G3d97@s* G3d98@ae*) (if (pair? G3d95@e) ((lambda (G3d9d@l) (if G3d9d@l (begin '#f (cons (G3d3c@stx^ (car G3d95@e) G3d96@m* G3d97@s* G3d98@ae*) G3d9d@l)) '#f)) (G3d42@match-each-any (cdr G3d95@e) G3d96@m* G3d97@s* G3d98@ae*)) (if (null? G3d95@e) '() (if (G2e13@stx? G3d95@e) (if (not (G2dc1@top-marked? G3d96@m*)) (begin '#f (call-with-values (lambda () (G2e31@join-wraps G3d96@m* G3d97@s* G3d98@ae* G3d95@e)) (lambda (G3da2@G3d9f G3da3@G3da0 G3da4@G3da1) ((lambda (G3da8@ae* G3da9@s* G3daa@m*) (G3d42@match-each-any (G2e17@stx-expr G3d95@e) G3daa@m* G3da9@s* G3da8@ae*)) G3da4@G3da1 G3da3@G3da0 G3da2@G3d9f)))) '#f) (if (G2992@G2892@annotation? G3d95@e) (G3d42@match-each-any (G2994@G2896@annotation-expression G3d95@e) G3d96@m* G3d97@s* G3d98@ae*) '#f)))))) (set! G3d44@match-empty (lambda (G3d8f@p G3d90@r) (if (null? G3d8f@p) G3d90@r (if (eq? G3d8f@p '_) G3d90@r (if (eq? G3d8f@p 'any) (cons '() G3d90@r) (if (pair? G3d8f@p) (G3d44@match-empty (car G3d8f@p) (G3d44@match-empty (cdr G3d8f@p) G3d90@r)) (if (eq? G3d8f@p 'each-any) (cons '() G3d90@r) ((lambda (G3d93@t) (if (memv G3d93@t '(each)) (G3d44@match-empty (vector-ref G3d8f@p '1) G3d90@r) (if (memv G3d93@t '(each+)) (G3d44@match-empty (vector-ref G3d8f@p '1) (G3d44@match-empty (reverse (vector-ref G3d8f@p '2)) (G3d44@match-empty (vector-ref G3d8f@p '3) G3d90@r))) (if (memv G3d93@t '(free-id atom)) G3d90@r (if (memv G3d93@t '(scheme-id atom)) G3d90@r (if (memv G3d93@t '(vector)) (G3d44@match-empty (vector-ref G3d8f@p '1) G3d90@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d8f@p))))))) (vector-ref G3d8f@p '0))))))))) (set! G3d46@combine (lambda (G3d8b@r* G3d8c@r) (if (null? (car G3d8b@r*)) G3d8c@r (cons (map car G3d8b@r*) (G3d46@combine (map cdr G3d8b@r*) G3d8c@r))))) (set! G3d48@match* (lambda (G3d6a@e G3d6b@p G3d6c@m* G3d6d@s* G3d6e@ae* G3d6f@r) (if (null? G3d6b@p) (if (null? G3d6a@e) (begin '#f G3d6f@r) '#f) (if (pair? G3d6b@p) (if (pair? G3d6a@e) (begin '#f (G3d4a@match (car G3d6a@e) (car G3d6b@p) G3d6c@m* G3d6d@s* G3d6e@ae* (G3d4a@match (cdr G3d6a@e) (cdr G3d6b@p) G3d6c@m* G3d6d@s* G3d6e@ae* G3d6f@r))) '#f) (if (eq? G3d6b@p 'each-any) ((lambda (G3d76@l) (if G3d76@l (begin '#f (cons G3d76@l G3d6f@r)) '#f)) (G3d42@match-each-any G3d6a@e G3d6c@m* G3d6d@s* G3d6e@ae*)) ((lambda (G3d78@t) (if (memv G3d78@t '(each)) (if (null? G3d6a@e) (G3d44@match-empty (vector-ref G3d6b@p '1) G3d6f@r) ((lambda (G3d7a@r*) (if G3d7a@r* (begin '#f (G3d46@combine G3d7a@r* G3d6f@r)) '#f)) (G3d3e@match-each G3d6a@e (vector-ref G3d6b@p '1) G3d6c@m* G3d6d@s* G3d6e@ae*))) (if (memv G3d78@t '(free-id)) (if (symbol? G3d6a@e) (if (G2dc1@top-marked? G3d6c@m*) (if (G2e53@free-id=? (G3d3c@stx^ G3d6a@e G3d6c@m* G3d6d@s* G3d6e@ae*) (vector-ref G3d6b@p '1)) (begin '#f G3d6f@r) '#f) '#f) '#f) (if (memv G3d78@t '(scheme-id)) (if (symbol? G3d6a@e) (if (G2dc1@top-marked? G3d6c@m*) (if (G2e53@free-id=? (G3d3c@stx^ G3d6a@e G3d6c@m* G3d6d@s* G3d6e@ae*) (G301c@scheme-stx (vector-ref G3d6b@p '1))) (begin '#f G3d6f@r) '#f) '#f) '#f) (if (memv G3d78@t '(each+)) (call-with-values (lambda () (G3d40@match-each+ G3d6a@e (vector-ref G3d6b@p '1) (vector-ref G3d6b@p '2) (vector-ref G3d6b@p '3) G3d6c@m* G3d6d@s* G3d6e@ae* G3d6f@r)) (lambda (G3d7f@G3d7c G3d80@G3d7d G3d81@G3d7e) ((lambda (G3d85@r G3d86@y-pat G3d87@xr*) (if G3d85@r (if (null? G3d86@y-pat) (begin '#f (if (null? G3d87@xr*) (G3d44@match-empty (vector-ref G3d6b@p '1) G3d85@r) (G3d46@combine G3d87@xr* G3d85@r))) '#f) '#f)) G3d81@G3d7e G3d80@G3d7d G3d7f@G3d7c))) (if (memv G3d78@t '(atom)) (if (equal? (vector-ref G3d6b@p '1) (G2e5f@strip G3d6a@e G3d6c@m*)) (begin '#f G3d6f@r) '#f) (if (memv G3d78@t '(vector)) (if (vector? G3d6a@e) (begin '#f (G3d4a@match (vector->list G3d6a@e) (vector-ref G3d6b@p '1) G3d6c@m* G3d6d@s* G3d6e@ae* G3d6f@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d6b@p)))))))) (vector-ref G3d6b@p '0))))))) (set! G3d4a@match (lambda (G3d4f@e G3d50@p G3d51@m* G3d52@s* G3d53@ae* G3d54@r) (if (not G3d54@r) '#f (if (eq? G3d50@p '_) G3d54@r (if (eq? G3d50@p 'any) (cons (G3d3c@stx^ G3d4f@e G3d51@m* G3d52@s* G3d53@ae*) G3d54@r) (if (G2e13@stx? G3d4f@e) (if (not (G2dc1@top-marked? G3d51@m*)) (begin '#f (call-with-values (lambda () (G2e31@join-wraps G3d51@m* G3d52@s* G3d53@ae* G3d4f@e)) (lambda (G3d5e@G3d5b G3d5f@G3d5c G3d60@G3d5d) ((lambda (G3d64@ae* G3d65@s* G3d66@m*) (G3d4a@match (G2e17@stx-expr G3d4f@e) G3d50@p G3d66@m* G3d65@s* G3d64@ae* G3d54@r)) G3d60@G3d5d G3d5f@G3d5c G3d5e@G3d5b)))) '#f) (if (G2992@G2892@annotation? G3d4f@e) (G3d4a@match (G2994@G2896@annotation-expression G3d4f@e) G3d50@p G3d51@m* G3d52@s* G3d53@ae* G3d54@r) (G3d48@match* G3d4f@e G3d50@p G3d51@m* G3d52@s* G3d53@ae* G3d54@r)))))))) (lambda (G3d4b@e G3d4c@p) (G3d4a@match G3d4b@e G3d4c@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3090@ellipsis? (lambda (G3e0d@x) (if (G2e4b@id? G3e0d@x) (begin '#f (G2e53@free-id=? G3e0d@x (G301c@scheme-stx '...))) '#f))) (set! G3092@underscore? (lambda (G3e0f@x) (if (G2e4b@id? G3e0f@x) (begin '#f (G2e53@free-id=? G3e0f@x (G301c@scheme-stx '_))) '#f))) (set! G3094@verify-literals (lambda (G3e11@lits G3e12@expr) (for-each (lambda (G3e15@x) (if ((lambda (G3e17@t) (if G3e17@t G3e17@t ((lambda (G3e19@t) (if G3e19@t G3e19@t (begin '#f (G3092@underscore? G3e15@x)))) (G3090@ellipsis? G3e15@x)))) (not (G2e4b@id? G3e15@x))) (G3181@syntax-violation '#f '"invalid literal" G3e12@expr G3e15@x) (void))) G3e11@lits))) (set! G3096@syntax-case-transformer ((lambda () ((lambda (G3e1c@build-dispatch-call G3e1e@invalid-ids-error G3e20@gen-clause G3e22@gen-syntax-case) (begin (set! G3e1c@build-dispatch-call (lambda (G3e8b@pvars G3e8c@expr G3e8d@y G3e8e@r G3e8f@mr) ((lambda (G3e95@ids G3e96@levels) ((lambda (G3e99@labels G3e9a@new-vars) ((lambda (G3e9d@body) (list '(primitive apply) (G2da3@G2ccb@build-lambda '#f G3e9a@new-vars G3e9d@body) G3e8d@y)) (G30b2@chi-expr (G2e37@add-subst (G2e04@make-full-rib G3e95@ids G3e99@labels) G3e8c@expr) (append (map (lambda (G3e9f@label G3ea0@var G3ea1@level) (cons G3e9f@label (G2e6b@make-binding 'syntax (cons G3ea0@var G3ea1@level)))) G3e99@labels G3e9a@new-vars (map cdr G3e8b@pvars)) G3e8e@r) G3e8f@mr))) (map G2dc7@gen-label G3e95@ids) (map G2dc3@gen-lexical G3e95@ids))) (map car G3e8b@pvars) (map cdr G3e8b@pvars)))) (set! G3e1e@invalid-ids-error (lambda (G3e7f@id* G3e80@e G3e81@class) ((letrec ((G3e85@find (lambda (G3e87@id* G3e88@ok*) (if (null? G3e87@id*) (G3181@syntax-violation '#f '"invalid syntax" G3e80@e) (if (G2e4b@id? (car G3e87@id*)) (if (G2e59@bound-id-member? (car G3e87@id*) G3e88@ok*) (G317b@syntax-error (car G3e87@id*) '"duplicate " G3e81@class) (G3e85@find (cdr G3e87@id*) (cons (car G3e87@id*) G3e88@ok*))) (G317b@syntax-error (car G3e87@id*) '"invalid " G3e81@class)))))) G3e85@find) G3e7f@id* '()))) (set! G3e20@gen-clause (lambda (G3e59@x G3e5a@keys G3e5b@clauses G3e5c@r G3e5d@mr G3e5e@pat G3e5f@fender G3e60@expr) (call-with-values (lambda () (G308c@convert-pattern G3e5e@pat G3e5a@keys)) (lambda (G3e6b@G3e69 G3e6c@G3e6a) ((lambda (G3e6f@pvars G3e70@p) (if (not (G2e57@distinct-bound-ids? (map car G3e6f@pvars))) (G3e1e@invalid-ids-error (map car G3e6f@pvars) G3e5e@pat '"pattern variable") (if (not (for-all (lambda (G3e73@x) (not (G3090@ellipsis? (car G3e73@x)))) G3e6f@pvars)) (G3181@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e5e@pat) ((lambda (G3e75@y) ((lambda (G3e77@test) ((lambda (G3e79@conseq) ((lambda (G3e7b@altern) (list (G2da3@G2ccb@build-lambda '#f (list G3e75@y) (list 'if G3e77@test G3e79@conseq G3e7b@altern)) (list '(primitive syntax-dispatch) G3e59@x (list 'quote G3e70@p)))) (G3e22@gen-syntax-case G3e59@x G3e5a@keys G3e5b@clauses G3e5c@r G3e5d@mr))) (G3e1c@build-dispatch-call G3e6f@pvars G3e60@expr G3e75@y G3e5c@r G3e5d@mr))) (if (eq? G3e5f@fender '#t) G3e75@y ((lambda (G3e7d@call) (list 'if G3e75@y G3e7d@call (list 'quote '#f))) (G3e1c@build-dispatch-call G3e6f@pvars G3e5f@fender G3e75@y G3e5c@r G3e5d@mr))))) (G2dc3@gen-lexical 'tmp))))) G3e6c@G3e6a G3e6b@G3e69))))) (set! G3e22@gen-syntax-case (lambda (G3e37@x G3e38@keys G3e39@clauses G3e3a@r G3e3b@mr) (if (null? G3e39@clauses) (list '(primitive syntax-error) G3e37@x) ((lambda (G3e41@t) ((lambda (G3e43@ls/false) (if G3e43@ls/false (apply (lambda (G3e45@pat G3e46@expr) (if (if (G2e4b@id? G3e45@pat) (if (not (G2e59@bound-id-member? G3e45@pat G3e38@keys)) (begin '#f (not (G3090@ellipsis? G3e45@pat))) '#f) '#f) (if (G2e53@free-id=? G3e45@pat (G301c@scheme-stx '_)) (G30b2@chi-expr G3e46@expr G3e3a@r G3e3b@mr) ((lambda (G3e49@lab G3e4a@lex) ((lambda (G3e4d@body) (list (G2da3@G2ccb@build-lambda '#f (list G3e4a@lex) G3e4d@body) G3e37@x)) (G30b2@chi-expr (G2e37@add-subst (G2e04@make-full-rib (list G3e45@pat) (list G3e49@lab)) G3e46@expr) (cons (cons G3e49@lab (G2e6b@make-binding 'syntax (cons G3e4a@lex '0))) G3e3a@r) G3e3b@mr))) (G2dc7@gen-label G3e45@pat) (G2dc3@gen-lexical G3e45@pat))) (G3e20@gen-clause G3e37@x G3e38@keys (cdr G3e39@clauses) G3e3a@r G3e3b@mr G3e45@pat '#t G3e46@expr))) G3e43@ls/false) ((lambda (G3e4f@t) ((lambda (G3e51@ls/false) (if G3e51@ls/false (apply (lambda (G3e53@pat G3e54@fender G3e55@expr) (G3e20@gen-clause G3e37@x G3e38@keys (cdr G3e39@clauses) G3e3a@r G3e3b@mr G3e53@pat G3e54@fender G3e55@expr)) G3e51@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3e4f@t))) (G308e@syntax-dispatch G3e4f@t '(any any any)))) G3e41@t))) (G308e@syntax-dispatch G3e41@t '(any any)))) (car G3e39@clauses))))) (lambda (G3e23@e G3e24@r G3e25@mr) ((lambda (G3e29@t) ((lambda (G3e2b@ls/false) (if G3e2b@ls/false (apply (lambda (G3e2d@expr G3e2e@keys G3e2f@clauses) (begin (G3094@verify-literals G3e2e@keys G3e23@e) ((lambda (G3e33@x) ((lambda (G3e35@body) (list (G2da3@G2ccb@build-lambda '#f (list G3e33@x) G3e35@body) (G30b2@chi-expr G3e2d@expr G3e24@r G3e25@mr))) (G3e22@gen-syntax-case G3e33@x G3e2e@keys G3e2f@clauses G3e24@r G3e25@mr))) (G2dc3@gen-lexical 'tmp)))) G3e2b@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3e29@t))) (G308e@syntax-dispatch G3e29@t '(_ any each-any . each-any)))) G3e23@e)))) '#f '#f '#f '#f)))) (set! G3098@ellipsis-map (lambda (G3ea5@proc G3ea6@ls . G3ea9@ls*) ((lambda (G3eac@who) (begin (set! G3eac@who '...) (begin (if (not (list? G3ea6@ls)) (assertion-violation G3eac@who '"not a list" G3ea6@ls) (void)) (if (not (null? G3ea9@ls*)) ((lambda (G3ead@n) (for-each (lambda (G3eaf@x) (begin (if (not (list? G3eaf@x)) (assertion-violation G3eac@who '"not a list" G3eaf@x) (void)) (if (not (= (length G3eaf@x) G3ead@n)) (assertion-violation G3eac@who '"length mismatch" G3ea6@ls G3eaf@x) (void)))) G3ea9@ls*)) (length G3ea6@ls)) (void)) (apply map G3ea5@proc G3ea6@ls G3ea9@ls*)))) '#f))) (set! G309a@syntax-transformer ((lambda () ((lambda (G3eb2@gen-syntax G3eb4@gen-ref G3eb6@gen-append G3eb8@gen-mappend G3eba@gen-map G3ebc@gen-cons G3ebe@gen-vector G3ec0@regen) (begin (set! G3eb2@gen-syntax (lambda (G3f25@src G3f26@e G3f27@r G3f28@maps G3f29@ellipsis? G3f2a@vec?) ((lambda (G3f31@t) ((lambda (G3f33@ls/false) (if (if G3f33@ls/false (begin '#f (apply (lambda (G3f35@dots) (G3f29@ellipsis? G3f35@dots)) G3f33@ls/false)) '#f) (apply (lambda (G3f37@dots) (G3181@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f25@src)) G3f33@ls/false) ((lambda (G3f39@t) ((lambda (G3f3b@ls/false) (if (if G3f3b@ls/false (begin '#f (apply (lambda (G3f3d@id) (G2e4b@id? G3f3d@id)) G3f3b@ls/false)) '#f) (apply (lambda (G3f3f@id) ((lambda (G3f41@label) ((lambda (G3f43@b) ((lambda () (if (eq? (G2e6d@binding-type G3f43@b) 'syntax) (call-with-values (lambda () ((lambda (G3f47@var.lev) (G3eb4@gen-ref G3f25@src (car G3f47@var.lev) (cdr G3f47@var.lev) G3f28@maps)) (G2e6f@binding-value G3f43@b))) (lambda (G3f49@G3f45 G3f4a@G3f46) ((lambda (G3f4d@maps G3f4e@var) (values (list 'ref G3f4e@var) G3f4d@maps)) G3f4a@G3f46 G3f49@G3f45))) (values (list 'quote G3f26@e) G3f28@maps))))) (G2e69@label->binding G3f41@label G3f27@r))) (G2e65@id->label G3f26@e))) G3f3b@ls/false) ((lambda (G3f51@t) ((lambda (G3f53@ls/false) (if (if G3f53@ls/false (begin '#f (apply (lambda (G3f55@dots G3f56@e) (G3f29@ellipsis? G3f55@dots)) G3f53@ls/false)) '#f) (apply (lambda (G3f59@dots G3f5a@e) (if G3f2a@vec? (G3181@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f25@src) (G3eb2@gen-syntax G3f25@src G3f5a@e G3f27@r G3f28@maps (lambda (G3f5d@x) '#f) '#f))) G3f53@ls/false) ((lambda (G3f5f@t) ((lambda (G3f61@ls/false) (if (if G3f61@ls/false (begin '#f (apply (lambda (G3f63@x G3f64@dots G3f65@y) (G3f29@ellipsis? G3f64@dots)) G3f61@ls/false)) '#f) (apply (lambda (G3f69@x G3f6a@dots G3f6b@y) ((letrec ((G3f6f@f (lambda (G3f71@y G3f72@k) ((lambda (G3f75@t) ((lambda (G3f77@ls/false) (if G3f77@ls/false (apply (lambda () (G3f72@k G3f28@maps)) G3f77@ls/false) ((lambda (G3f79@t) ((lambda (G3f7b@ls/false) (if (if G3f7b@ls/false (begin '#f (apply (lambda (G3f7d@dots G3f7e@y) (G3f29@ellipsis? G3f7d@dots)) G3f7b@ls/false)) '#f) (apply (lambda (G3f81@dots G3f82@y) (G3f6f@f G3f82@y (lambda (G3f85@maps) (call-with-values (lambda () (G3f72@k (cons '() G3f85@maps))) (lambda (G3f89@G3f87 G3f8a@G3f88) ((lambda (G3f8d@maps G3f8e@x) (if (null? (car G3f8d@maps)) (G3181@syntax-violation '#f '"extra ellipsis in syntax form" G3f25@src) (values (G3eb8@gen-mappend G3f8e@x (car G3f8d@maps)) (cdr G3f8d@maps)))) G3f8a@G3f88 G3f89@G3f87)))))) G3f7b@ls/false) ((lambda (G3f91@t) ((lambda (G3f93@ls/false) (if G3f93@ls/false (apply (lambda () (call-with-values (lambda () (G3eb2@gen-syntax G3f25@src G3f71@y G3f27@r G3f28@maps G3f29@ellipsis? G3f2a@vec?)) (lambda (G3f97@G3f95 G3f98@G3f96) ((lambda (G3f9b@maps G3f9c@y) (call-with-values (lambda () (G3f72@k G3f9b@maps)) (lambda (G3fa1@G3f9f G3fa2@G3fa0) ((lambda (G3fa5@maps G3fa6@x) (values (G3eb6@gen-append G3fa6@x G3f9c@y) G3fa5@maps)) G3fa2@G3fa0 G3fa1@G3f9f)))) G3f98@G3f96 G3f97@G3f95)))) G3f93@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3f91@t))) (G308e@syntax-dispatch G3f91@t '_))) G3f79@t))) (G308e@syntax-dispatch G3f79@t '(any . any)))) G3f75@t))) (G308e@syntax-dispatch G3f75@t '()))) G3f71@y)))) G3f6f@f) G3f6b@y (lambda (G3fa9@maps) (call-with-values (lambda () (G3eb2@gen-syntax G3f25@src G3f69@x G3f27@r (cons '() G3fa9@maps) G3f29@ellipsis? '#f)) (lambda (G3fad@G3fab G3fae@G3fac) ((lambda (G3fb1@maps G3fb2@x) (if (null? (car G3fb1@maps)) (G3181@syntax-violation '#f '"extra ellipsis in syntax form" G3f25@src) (values (G3eba@gen-map G3fb2@x (car G3fb1@maps)) (cdr G3fb1@maps)))) G3fae@G3fac G3fad@G3fab)))))) G3f61@ls/false) ((lambda (G3fb5@t) ((lambda (G3fb7@ls/false) (if G3fb7@ls/false (apply (lambda (G3fb9@x G3fba@y) (call-with-values (lambda () (G3eb2@gen-syntax G3f25@src G3fb9@x G3f27@r G3f28@maps G3f29@ellipsis? '#f)) (lambda (G3fbf@G3fbd G3fc0@G3fbe) ((lambda (G3fc3@maps G3fc4@xnew) (call-with-values (lambda () (G3eb2@gen-syntax G3f25@src G3fba@y G3f27@r G3fc3@maps G3f29@ellipsis? G3f2a@vec?)) (lambda (G3fc9@G3fc7 G3fca@G3fc8) ((lambda (G3fcd@maps G3fce@ynew) (values (G3ebc@gen-cons G3f26@e G3fb9@x G3fba@y G3fc4@xnew G3fce@ynew) G3fcd@maps)) G3fca@G3fc8 G3fc9@G3fc7)))) G3fc0@G3fbe G3fbf@G3fbd)))) G3fb7@ls/false) ((lambda (G3fd1@t) ((lambda (G3fd3@ls/false) (if G3fd3@ls/false (apply (lambda (G3fd5@ls) (call-with-values (lambda () (G3eb2@gen-syntax G3f25@src G3fd5@ls G3f27@r G3f28@maps G3f29@ellipsis? '#t)) (lambda (G3fd9@G3fd7 G3fda@G3fd8) ((lambda (G3fdd@maps G3fde@lsnew) (values (G3ebe@gen-vector G3f26@e G3fd5@ls G3fde@lsnew) G3fdd@maps)) G3fda@G3fd8 G3fd9@G3fd7)))) G3fd3@ls/false) ((lambda (G3fe1@t) ((lambda (G3fe3@ls/false) (if G3fe3@ls/false (apply (lambda () (values (list 'quote G3f26@e) G3f28@maps)) G3fe3@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3fe1@t))) (G308e@syntax-dispatch G3fe1@t '_))) G3fd1@t))) (G308e@syntax-dispatch G3fd1@t '#(vector each-any)))) G3fb5@t))) (G308e@syntax-dispatch G3fb5@t '(any . any)))) G3f5f@t))) (G308e@syntax-dispatch G3f5f@t '(any any . any)))) G3f51@t))) (G308e@syntax-dispatch G3f51@t '(any any)))) G3f39@t))) (G308e@syntax-dispatch G3f39@t 'any))) G3f31@t))) (G308e@syntax-dispatch G3f31@t 'any))) G3f26@e))) (set! G3eb4@gen-ref (lambda (G3f0d@src G3f0e@var G3f0f@level G3f10@maps) (if (= G3f0f@level '0) (values G3f0e@var G3f10@maps) (if (null? G3f10@maps) (G3181@syntax-violation '#f '"missing ellipsis in syntax form" G3f0d@src) (call-with-values (lambda () (G3eb4@gen-ref G3f0d@src G3f0e@var (- G3f0f@level '1) (cdr G3f10@maps))) (lambda (G3f17@G3f15 G3f18@G3f16) ((lambda (G3f1b@outer-maps G3f1c@outer-var) ((lambda (G3f1f@t) (if G3f1f@t ((lambda (G3f21@b) (values (cdr G3f21@b) G3f10@maps)) G3f1f@t) ((lambda (G3f23@inner-var) (values G3f23@inner-var (cons (cons (cons G3f1c@outer-var G3f23@inner-var) (car G3f10@maps)) G3f1b@outer-maps))) (G2dc3@gen-lexical 'tmp)))) (assq G3f1c@outer-var (car G3f10@maps)))) G3f18@G3f16 G3f17@G3f15))))))) (set! G3eb6@gen-append (lambda (G3f09@x G3f0a@y) (if (equal? G3f0a@y ''()) G3f09@x (list 'append G3f09@x G3f0a@y)))) (set! G3eb8@gen-mappend (lambda (G3f05@e G3f06@map-env) (list 'apply '(primitive append) (G3eba@gen-map G3f05@e G3f06@map-env)))) (set! G3eba@gen-map (lambda (G3ef3@e G3ef4@map-env) ((lambda (G3ef7@formals G3ef8@actuals) (if (eq? (car G3ef3@e) 'ref) (car G3ef8@actuals) (if (for-all (lambda (G3efb@x) (if (eq? (car G3efb@x) 'ref) (begin '#f (memq (cadr G3efb@x) G3ef7@formals)) '#f)) (cdr G3ef3@e)) ((lambda (G3efd@args) (cons 'map (cons (list 'primitive (car G3ef3@e)) G3efd@args))) (map ((lambda (G3eff@r) (lambda (G3f01@x) (cdr (assq (cadr G3f01@x) G3eff@r)))) (map cons G3ef7@formals G3ef8@actuals)) (cdr G3ef3@e))) (cons* 'map (list 'lambda G3ef7@formals G3ef3@e) G3ef8@actuals)))) (map cdr G3ef4@map-env) (map (lambda (G3f03@x) (list 'ref (car G3f03@x))) G3ef4@map-env)))) (set! G3ebc@gen-cons (lambda (G3ee3@e G3ee4@x G3ee5@y G3ee6@xnew G3ee7@ynew) ((lambda (G3eed@t) (if (memv G3eed@t '(quote)) (if (eq? (car G3ee6@xnew) 'quote) ((lambda (G3eef@xnew G3ef0@ynew) (if (if (eq? G3eef@xnew G3ee4@x) (begin '#f (eq? G3ef0@ynew G3ee5@y)) '#f) (list 'quote G3ee3@e) (list 'quote (cons G3eef@xnew G3ef0@ynew)))) (cadr G3ee6@xnew) (cadr G3ee7@ynew)) (if (null? (cadr G3ee7@ynew)) (list 'list G3ee6@xnew) (list 'cons G3ee6@xnew G3ee7@ynew))) (if (memv G3eed@t '(list)) (cons 'list (cons G3ee6@xnew (cdr G3ee7@ynew))) (list 'cons G3ee6@xnew G3ee7@ynew)))) (car G3ee7@ynew)))) (set! G3ebe@gen-vector (lambda (G3edd@e G3ede@ls G3edf@lsnew) (if (eq? (car G3edf@lsnew) 'quote) (if (eq? (cadr G3edf@lsnew) G3ede@ls) (list 'quote G3edd@e) (list 'quote (list->vector (cadr G3edf@lsnew)))) (if (eq? (car G3edf@lsnew) 'list) (cons 'vector (cdr G3edf@lsnew)) (list 'list->vector G3edf@lsnew))))) (set! G3ec0@regen (lambda (G3ed7@x) ((lambda (G3ed9@t) (if (memv G3ed9@t '(ref)) (cadr G3ed7@x) (if (memv G3ed9@t '(primitive)) (list 'primitive (cadr G3ed7@x)) (if (memv G3ed9@t '(quote)) (list 'quote (cadr G3ed7@x)) (if (memv G3ed9@t '(lambda)) (G2da3@G2ccb@build-lambda '#f (cadr G3ed7@x) (G3ec0@regen (caddr G3ed7@x))) (if (memv G3ed9@t '(map)) ((lambda (G3edb@ls) (cons '(primitive ellipsis-map) G3edb@ls)) (map G3ec0@regen (cdr G3ed7@x))) (cons (list 'primitive (car G3ed7@x)) (map G3ec0@regen (cdr G3ed7@x))))))))) (car G3ed7@x)))) (lambda (G3ec1@e G3ec2@r G3ec3@mr) ((lambda (G3ec7@t) ((lambda (G3ec9@ls/false) (if G3ec9@ls/false (apply (lambda (G3ecb@x) (call-with-values (lambda () (G3eb2@gen-syntax G3ec1@e G3ecb@x G3ec2@r '() G3090@ellipsis? '#f)) (lambda (G3ecf@G3ecd G3ed0@G3ece) ((lambda (G3ed3@maps G3ed4@e) (G3ec0@regen G3ed4@e)) G3ed0@G3ece G3ecf@G3ecd)))) G3ec9@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3ec7@t))) (G308e@syntax-dispatch G3ec7@t '(_ any)))) G3ec1@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G309c@core-macro-transformer (lambda (G3fe5@name) ((lambda (G3fe7@t) (if (memv G3fe7@t '(quote)) G303e@quote-transformer (if (memv G3fe7@t '(lambda)) G3042@lambda-transformer (if (memv G3fe7@t '(case-lambda)) G3040@case-lambda-transformer (if (memv G3fe7@t '(letrec)) G302a@letrec-transformer (if (memv G3fe7@t '(letrec*)) G302c@letrec*-transformer (if (memv G3fe7@t '(if)) G303a@if-transformer (if (memv G3fe7@t '(foreign-call)) G308a@foreign-call-transformer (if (memv G3fe7@t '(syntax-case)) G3096@syntax-case-transformer (if (memv G3fe7@t '(syntax)) G309a@syntax-transformer (if (memv G3fe7@t '(type-descriptor)) G3030@type-descriptor-transformer (if (memv G3fe7@t '(record-type-descriptor)) G3032@record-type-descriptor-transformer (if (memv G3fe7@t '(record-constructor-descriptor)) G3034@record-constructor-descriptor-transformer (if (memv G3fe7@t '(fluid-let-syntax)) G302e@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fe5@name))))))))))))))) G3fe5@name))) (set! G309e@file-options-macro (lambda (G3fe9@x) ((lambda (G3fec@valid-option?) (begin (set! G3fec@valid-option? (lambda (G3ff5@x) (if (G2e4b@id? G3ff5@x) (begin '#f (memq (G2e4d@id->sym G3ff5@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3fed@t) ((lambda (G3fef@ls/false) (if (if G3fef@ls/false (begin '#f (apply (lambda (G3ff1@opt*) (if (for-all G3fec@valid-option? G3ff1@opt*) (begin '#f (G299e@G2942@file-options-spec (map G2e4d@id->sym G3ff1@opt*))) '#f)) G3fef@ls/false)) '#f) (apply (lambda (G3ff3@opt*) (G3044@bless (list 'quote (G299e@G2942@file-options-spec (map G2e4d@id->sym G3ff3@opt*))))) G3fef@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3fed@t))) (G308e@syntax-dispatch G3fed@t '(_ . each-any)))) G3fe9@x))) '#f))) (set! G30a0@symbol-macro (lambda (G3ff7@x G3ff8@set) ((lambda (G3ffb@t) ((lambda (G3ffd@ls/false) (if (if G3ffd@ls/false (begin '#f (apply (lambda (G3fff@name) (if (G2e4b@id? G3fff@name) (begin '#f (memq (G2e4d@id->sym G3fff@name) G3ff8@set)) '#f)) G3ffd@ls/false)) '#f) (apply (lambda (G4001@name) (G3044@bless (list 'quote G4001@name))) G3ffd@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G3ffb@t))) (G308e@syntax-dispatch G3ffb@t '(_ any)))) G3ff7@x))) (set! G30a2@macro-transformer (lambda (G4003@x) (if (procedure? G4003@x) G4003@x (if (symbol? G4003@x) ((lambda (G4005@t) (if (memv G4005@t '(define-record-type)) G3082@define-record-type-macro (if (memv G4005@t '(define-struct)) G3080@define-struct-macro (if (memv G4005@t '(include)) G3076@include-macro (if (memv G4005@t '(cond)) G3072@cond-macro (if (memv G4005@t '(let)) G304a@let-macro (if (memv G4005@t '(do)) G306a@do-macro (if (memv G4005@t '(or)) G306e@or-macro (if (memv G4005@t '(and)) G3070@and-macro (if (memv G4005@t '(let*)) G306c@let*-macro (if (memv G4005@t '(let-values)) G304c@let-values-macro (if (memv G4005@t '(let*-values)) G304e@let*-values-macro (if (memv G4005@t '(syntax-rules)) G307a@syntax-rules-macro (if (memv G4005@t '(quasiquote)) G307c@quasiquote-macro (if (memv G4005@t '(quasisyntax)) G307e@quasisyntax-macro (if (memv G4005@t '(with-syntax)) G3046@with-syntax-macro (if (memv G4005@t '(when)) G3036@when-macro (if (memv G4005@t '(unless)) G3038@unless-macro (if (memv G4005@t '(case)) G303c@case-macro (if (memv G4005@t '(identifier-syntax)) G3068@identifier-syntax-macro (if (memv G4005@t '(time)) G3060@time-macro (if (memv G4005@t '(delay)) G3062@delay-macro (if (memv G4005@t '(assert)) G3064@assert-macro (if (memv G4005@t '(endianness)) G3066@endianness-macro (if (memv G4005@t '(guard)) G305c@guard-macro (if (memv G4005@t '(define-enumeration)) G305e@define-enumeration-macro (if (memv G4005@t '(trace-lambda)) G3050@trace-lambda-macro (if (memv G4005@t '(trace-define)) G3052@trace-define-macro (if (memv G4005@t '(trace-define-syntax)) G3054@trace-define-syntax-macro (if (memv G4005@t '(trace-let-syntax)) G3058@trace-let-syntax-macro (if (memv G4005@t '(trace-letrec-syntax)) G305a@trace-letrec-syntax-macro (if (memv G4005@t '(define-condition-type)) G3084@define-condition-type-macro (if (memv G4005@t '(parameterize)) G3088@parameterize-macro (if (memv G4005@t '(include-into)) G3078@include-into-macro (if (memv G4005@t '(eol-style)) (lambda (G4007@x) (G30a0@symbol-macro G4007@x '(none lf cr crlf nel crnel ls))) (if (memv G4005@t '(error-handling-mode)) (lambda (G4009@x) (G30a0@symbol-macro G4009@x '(ignore raise replace))) (if (memv G4005@t '(buffer-mode)) (lambda (G400b@x) (G30a0@symbol-macro G400b@x '(none line block))) (if (memv G4005@t '(file-options)) G309e@file-options-macro (if (memv G4005@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3086@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G4003@x)))))))))))))))))))))))))))))))))))))))) G4003@x) (error 'core-macro-transformer '"BUG: invalid macro" G4003@x))))) (set! G30a4@local-macro-transformer (lambda (G400d@x) (car G400d@x))) (set! G30a6@do-macro-call (lambda (G400f@transformer G4010@expr) ((lambda (G4013@out) (begin ((letrec ((G4015@f (lambda (G4017@x) (if (not (G2e13@stx? G4017@x)) (if (pair? G4017@x) (begin (G4015@f (car G4017@x)) (G4015@f (cdr G4017@x))) (if (vector? G4017@x) (vector-for-each G4015@f G4017@x) (if (symbol? G4017@x) (G3181@syntax-violation '#f '"raw symbol encountered in output of macro" G4010@expr G4017@x) (void)))) (void))))) G4015@f) G4013@out) (G2e35@add-mark (G2e2b@gen-mark) G4013@out G4010@expr))) (G400f@transformer (G2e35@add-mark G2e2d@anti-mark G4010@expr '#f))))) (set! G30a8@chi-macro (lambda (G4019@p G401a@e) (G30a6@do-macro-call (G30a2@macro-transformer G4019@p) G401a@e))) (set! G30aa@chi-local-macro (lambda (G401d@p G401e@e) (G30a6@do-macro-call (G30a4@local-macro-transformer G401d@p) G401e@e))) (set! G30ac@chi-global-macro (lambda (G4021@p G4022@e) ((lambda (G4025@lib G4026@loc) (begin (G2c41@G2ad7@visit-library G4025@lib) ((lambda (G4029@x) ((lambda (G402b@transformer) (G30a6@do-macro-call G402b@transformer G4022@e)) (if (procedure? G4029@x) G4029@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G4029@x)))) (symbol-value G4026@loc)))) (car G4021@p) (cdr G4021@p)))) (set! G30ae@chi-expr* (lambda (G402d@e* G402e@r G402f@mr) (if (null? G402d@e*) '() ((lambda (G4033@e) (cons G4033@e (G30ae@chi-expr* (cdr G402d@e*) G402e@r G402f@mr))) (G30b2@chi-expr (car G402d@e*) G402e@r G402f@mr))))) (set! G30b0@chi-application (lambda (G4035@e G4036@r G4037@mr) ((lambda (G403b@t) ((lambda (G403d@ls/false) (if G403d@ls/false (apply (lambda (G403f@rator G4040@rands) ((lambda (G4043@rator) (cons G4043@rator (G30ae@chi-expr* G4040@rands G4036@r G4037@mr))) (G30b2@chi-expr G403f@rator G4036@r G4037@mr))) G403d@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G403b@t))) (G308e@syntax-dispatch G403b@t '(any . each-any)))) G4035@e))) (set! G30b2@chi-expr (lambda (G4045@e G4046@r G4047@mr) (call-with-values (lambda () (G2e73@syntax-type G4045@e G4046@r)) (lambda (G404e@G404b G404f@G404c G4050@G404d) ((lambda (G4054@kwd G4055@value G4056@type) ((lambda (G405a@t) (if (memv G405a@t '(core-macro)) ((lambda (G405c@transformer) (G405c@transformer G4045@e G4046@r G4047@mr)) (G309c@core-macro-transformer G4055@value)) (if (memv G405a@t '(global)) ((lambda (G405e@lib) ((lambda (G4060@loc) ((lambda () (begin ((G30fd@inv-collector) G405e@lib) G4060@loc)))) (cdr G4055@value))) (car G4055@value)) (if (memv G405a@t '(core-prim)) ((lambda (G4062@name) (list 'primitive G4062@name)) G4055@value) (if (memv G405a@t '(call)) (G30b0@chi-application G4045@e G4046@r G4047@mr) (if (memv G405a@t '(lexical)) ((lambda (G4064@lex) G4064@lex) (G301e@lexical-var G4055@value)) (if (memv G405a@t '(global-macro global-macro!)) (G30b2@chi-expr (G30ac@chi-global-macro G4055@value G4045@e) G4046@r G4047@mr) (if (memv G405a@t '(local-macro local-macro!)) (G30b2@chi-expr (G30aa@chi-local-macro G4055@value G4045@e) G4046@r G4047@mr) (if (memv G405a@t '(macro macro!)) (G30b2@chi-expr (G30a8@chi-macro G4055@value G4045@e) G4046@r G4047@mr) (if (memv G405a@t '(constant)) ((lambda (G4066@datum) (list 'quote G4066@datum)) G4055@value) (if (memv G405a@t '(set!)) (G30b4@chi-set! G4045@e G4046@r G4047@mr) (if (memv G405a@t '(begin)) ((lambda (G4068@t) ((lambda (G406a@ls/false) (if G406a@ls/false (apply (lambda (G406c@x G406d@x*) (G2da6@G2d17@build-sequence '#f (G30ae@chi-expr* (cons G406c@x G406d@x*) G4046@r G4047@mr))) G406a@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4068@t))) (G308e@syntax-dispatch G4068@t '(_ any . each-any)))) G4045@e) (if (memv G405a@t '(let-syntax letrec-syntax)) ((lambda (G4070@t) ((lambda (G4072@ls/false) (if (if G4072@ls/false (begin '#f (apply (lambda (G4074@xlhs* G4075@xrhs* G4076@xbody G4077@xbody*) (if (not (G2e55@valid-bound-ids? G4074@xlhs*)) (G3181@syntax-violation '#f '"invalid identifiers" G4045@e) (void))) G4072@ls/false)) '#f) (apply (lambda (G407c@xlhs* G407d@xrhs* G407e@xbody G407f@xbody*) ((lambda (G4084@xlab*) ((lambda (G4086@xrib) ((lambda (G4088@xb*) ((lambda () (G2da6@G2d17@build-sequence '#f (G30ae@chi-expr* (map (lambda (G408a@x) (G2e37@add-subst G4086@xrib G408a@x)) (cons G407e@xbody G407f@xbody*)) (append (map cons G4084@xlab* G4088@xb*) G4046@r) (append (map cons G4084@xlab* G4088@xb*) G4047@mr)))))) (map (lambda (G408c@x) (G2e92@make-eval-transformer (G30ef@expand-transformer (if (eq? G4056@type 'let-syntax) G408c@x (G2e37@add-subst G4086@xrib G408c@x)) G4047@mr))) G407d@xrhs*))) (G2e04@make-full-rib G407c@xlhs* G4084@xlab*))) (map G2dc7@gen-label G407c@xlhs*))) G4072@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4070@t))) (G308e@syntax-dispatch G4070@t '(_ #(each (any any)) any . each-any)))) G4045@e) (if (memv G405a@t '(displaced-lexical)) (G3181@syntax-violation '#f '"identifier out of context" G4045@e) (if (memv G405a@t '(syntax)) (G3181@syntax-violation '#f '"reference to pattern variable outside a syntax form" G4045@e) (if (memv G405a@t '(define define-syntax module import library)) (G3181@syntax-violation '#f (string-append ((lambda (G408e@t) (if (memv G408e@t '(define)) '"a definition" (if (memv G408e@t '(define-syntax)) '"a define-syntax" (if (memv G408e@t '(module)) '"a module definition" (if (memv G408e@t '(library)) '"a library definition" (if (memv G408e@t '(import)) '"an import declaration" (if (memv G408e@t '(export)) '"an export declaration" '"a non-expression"))))))) G4056@type) '" was found where an expression was expected") G4045@e) (if (memv G405a@t '(mutable)) (G3181@syntax-violation '#f '"attempt to reference an unexportable variable" G4045@e) (G3181@syntax-violation '#f '"invalid expression" G4045@e)))))))))))))))))) G4056@type)) G4050@G404d G404f@G404c G404e@G404b))))) (set! G30b4@chi-set! (lambda (G4090@e G4091@r G4092@mr) ((lambda (G4096@t) ((lambda (G4098@ls/false) (if (if G4098@ls/false (begin '#f (apply (lambda (G409a@x G409b@v) (G2e4b@id? G409a@x)) G4098@ls/false)) '#f) (apply (lambda (G409e@x G409f@v) (call-with-values (lambda () (G2e73@syntax-type G409e@x G4091@r)) (lambda (G40a5@G40a2 G40a6@G40a3 G40a7@G40a4) ((lambda (G40ab@kwd G40ac@value G40ad@type) ((lambda (G40b1@t) (if (memv G40b1@t '(lexical)) (begin (G3022@set-lexical-mutable! G40ac@value '#t) (list 'set! (G301e@lexical-var G40ac@value) (G30b2@chi-expr G409f@v G4091@r G4092@mr))) (if (memv G40b1@t '(core-prim)) (G3181@syntax-violation '#f '"cannot modify imported core primitive" G4090@e) (if (memv G40b1@t '(global)) (G3181@syntax-violation '#f '"attempt to modify imported binding" G4090@e) (if (memv G40b1@t '(global-macro!)) (G30b2@chi-expr (G30ac@chi-global-macro G40ac@value G4090@e) G4091@r G4092@mr) (if (memv G40b1@t '(local-macro!)) (G30b2@chi-expr (G30aa@chi-local-macro G40ac@value G4090@e) G4091@r G4092@mr) (if (memv G40b1@t '(mutable)) (G3181@syntax-violation '#f '"attempt to assign to an unexportable variable" G4090@e) (G3181@syntax-violation '#f '"invalid syntax" G4090@e)))))))) G40ad@type)) G40a7@G40a4 G40a6@G40a3 G40a5@G40a2)))) G4098@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4096@t))) (G308e@syntax-dispatch G4096@t '(_ any any)))) G4090@e))) (set! G30b6@verify-formals (lambda (G40b3@fmls G40b4@stx) ((lambda (G40b7@t) ((lambda (G40b9@ls/false) (if G40b9@ls/false (apply (lambda (G40bb@x*) (if (not (G2e55@valid-bound-ids? G40bb@x*)) (G3048@invalid-fmls-error G40b4@stx G40b3@fmls) (void))) G40b9@ls/false) ((lambda (G40bd@t) ((lambda (G40bf@ls/false) (if G40bf@ls/false (apply (lambda (G40c1@x* G40c2@x) (if (not (G2e55@valid-bound-ids? (cons G40c2@x G40c1@x*))) (G3048@invalid-fmls-error G40b4@stx G40b3@fmls) (void))) G40bf@ls/false) ((lambda (G40c5@t) ((lambda (G40c7@ls/false) (if G40c7@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid syntax" G40b4@stx)) G40c7@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G40c5@t))) (G308e@syntax-dispatch G40c5@t '_))) G40bd@t))) (G308e@syntax-dispatch G40bd@t '#(each+ any () any)))) G40b7@t))) (G308e@syntax-dispatch G40b7@t 'each-any))) G40b3@fmls))) (set! G30b8@chi-lambda-clause (lambda (G40c9@stx G40ca@fmls G40cb@body* G40cc@r G40cd@mr) ((lambda (G40d3@t) ((lambda (G40d5@ls/false) (if G40d5@ls/false (apply (lambda (G40d7@x*) (begin (G30b6@verify-formals G40ca@fmls G40c9@stx) ((lambda (G40d9@lex* G40da@lab*) (values G40d9@lex* (G30c8@chi-internal (G2e37@add-subst (G2e04@make-full-rib G40d7@x* G40da@lab*) G40cb@body*) (G3026@add-lexicals G40da@lab* G40d9@lex* G40cc@r) G40cd@mr))) (map G2dc3@gen-lexical G40d7@x*) (map G2dc7@gen-label G40d7@x*)))) G40d5@ls/false) ((lambda (G40dd@t) ((lambda (G40df@ls/false) (if G40df@ls/false (apply (lambda (G40e1@x* G40e2@x) (begin (G30b6@verify-formals G40ca@fmls G40c9@stx) ((lambda (G40e5@lex* G40e6@lab* G40e7@lex G40e8@lab) (values (append G40e5@lex* G40e7@lex) (G30c8@chi-internal (G2e37@add-subst (G2e04@make-full-rib (cons G40e2@x G40e1@x*) (cons G40e8@lab G40e6@lab*)) G40cb@body*) (G3026@add-lexicals (cons G40e8@lab G40e6@lab*) (cons G40e7@lex G40e5@lex*) G40cc@r) G40cd@mr))) (map G2dc3@gen-lexical G40e1@x*) (map G2dc7@gen-label G40e1@x*) (G2dc3@gen-lexical G40e2@x) (G2dc7@gen-label G40e2@x)))) G40df@ls/false) ((lambda (G40ed@t) ((lambda (G40ef@ls/false) (if G40ef@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid syntax" G40ca@fmls)) G40ef@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G40ed@t))) (G308e@syntax-dispatch G40ed@t '_))) G40dd@t))) (G308e@syntax-dispatch G40dd@t '#(each+ any () any)))) G40d3@t))) (G308e@syntax-dispatch G40d3@t 'each-any))) G40ca@fmls))) (set! G30ba@chi-lambda-clause* (lambda (G40f1@stx G40f2@fmls* G40f3@body** G40f4@r G40f5@mr) (if (null? G40f2@fmls*) (values '() '()) (call-with-values (lambda () (G30b8@chi-lambda-clause G40f1@stx (car G40f2@fmls*) (car G40f3@body**) G40f4@r G40f5@mr)) (lambda (G40fd@G40fb G40fe@G40fc) ((lambda (G4101@b G4102@a) (call-with-values (lambda () (G30ba@chi-lambda-clause* G40f1@stx (cdr G40f2@fmls*) (cdr G40f3@body**) G40f4@r G40f5@mr)) (lambda (G4107@G4105 G4108@G4106) ((lambda (G410b@b* G410c@a*) (values (cons G4102@a G410c@a*) (cons G4101@b G410b@b*))) G4108@G4106 G4107@G4105)))) G40fe@G40fc G40fd@G40fb)))))) (set! G30bc@chi-defun (lambda (G410f@x G4110@r G4111@mr) ((lambda (G4115@fmls G4116@body*) (call-with-values (lambda () (G30b8@chi-lambda-clause G4115@fmls G4115@fmls G4116@body* G4110@r G4111@mr)) (lambda (G411b@G4119 G411c@G411a) ((lambda (G411f@body G4120@fmls) (G2da3@G2ccb@build-lambda '#f G4120@fmls G411f@body)) G411c@G411a G411b@G4119)))) (car G410f@x) (cdr G410f@x)))) (set! G30be@chi-rhs (lambda (G4123@rhs G4124@r G4125@mr) ((lambda (G4129@t) (if (memv G4129@t '(defun)) (G30bc@chi-defun (cdr G4123@rhs) G4124@r G4125@mr) (if (memv G4129@t '(expr)) ((lambda (G412b@expr) (G30b2@chi-expr G412b@expr G4124@r G4125@mr)) (cdr G4123@rhs)) (if (memv G4129@t '(top-expr)) ((lambda (G412d@expr) (G2da6@G2d17@build-sequence '#f (list (G30b2@chi-expr G412d@expr G4124@r G4125@mr) (G2da7@G2d19@build-void)))) (cdr G4123@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G4123@rhs))))) (car G4123@rhs)))) (set! G30c0@expand-interaction-rhs*/init* (lambda (G412f@lhs* G4130@rhs* G4131@init* G4132@r G4133@mr) ((letrec ((G4139@f (lambda (G413b@lhs* G413c@rhs*) (if (null? G413b@lhs*) (map (lambda (G413f@x) (G30b2@chi-expr G413f@x G4132@r G4133@mr)) G4131@init*) ((lambda (G4141@lhs G4142@rhs) ((lambda (G4145@t) (if (memv G4145@t '(defun)) ((lambda (G4147@rhs) (cons (list 'set! G4141@lhs G4147@rhs) (G4139@f (cdr G413b@lhs*) (cdr G413c@rhs*)))) (G30bc@chi-defun (cdr G4142@rhs) G4132@r G4133@mr)) (if (memv G4145@t '(expr)) ((lambda (G4149@rhs) (cons (list 'set! G4141@lhs G4149@rhs) (G4139@f (cdr G413b@lhs*) (cdr G413c@rhs*)))) (G30b2@chi-expr (cdr G4142@rhs) G4132@r G4133@mr)) (if (memv G4145@t '(top-expr)) ((lambda (G414b@e) (cons G414b@e (G4139@f (cdr G413b@lhs*) (cdr G413c@rhs*)))) (G30b2@chi-expr (cdr G4142@rhs) G4132@r G4133@mr)) (error 'expand-interaction '"invallid" G4142@rhs))))) (car G4142@rhs))) (car G413b@lhs*) (car G413c@rhs*)))))) G4139@f) G412f@lhs* G4130@rhs*))) (set! G30c2@chi-rhs* (lambda (G414d@rhs* G414e@r G414f@mr) ((letrec ((G4153@f (lambda (G4155@ls) (if (null? G4155@ls) '() ((lambda (G4157@a) (cons G4157@a (G4153@f (cdr G4155@ls)))) (G30be@chi-rhs (car G4155@ls) G414e@r G414f@mr)))))) G4153@f) G414d@rhs*))) (set! G30c4@find-bound=? (lambda (G4159@x G415a@lhs* G415b@rhs*) (if (null? G415a@lhs*) '#f (if (G2e51@bound-id=? G4159@x (car G415a@lhs*)) (car G415b@rhs*) (G30c4@find-bound=? G4159@x (cdr G415a@lhs*) (cdr G415b@rhs*)))))) (set! G30c6@find-dups (lambda (G415f@ls) ((letrec ((G4161@f (lambda (G4163@ls G4164@dups) (if (null? G4163@ls) G4164@dups ((lambda (G4167@t) (if G4167@t ((lambda (G4169@x) (G4161@f (cdr G4163@ls) (cons (list (car G4163@ls) G4169@x) G4164@dups))) G4167@t) (G4161@f (cdr G4163@ls) G4164@dups))) (G30c4@find-bound=? (car G4163@ls) (cdr G4163@ls) (cdr G4163@ls))))))) G4161@f) G415f@ls '()))) (set! G30c8@chi-internal (lambda (G416b@e* G416c@r G416d@mr) ((lambda (G4171@rib) (call-with-values (lambda () (G30ed@chi-body* (map (lambda (G417b@x) (G2e37@add-subst G4171@rib G417b@x)) (G2e49@syntax->list G416b@e*)) G416c@r G416d@mr '() '() '() '() '() G4171@rib '#f)) (lambda (G417d@G4173 G417e@G4174 G417f@G4175 G4180@G4176 G4181@G4177 G4182@G4178 G4183@G4179 G4184@G417a) ((lambda (G418d@_exp* G418e@kwd* G418f@mod** G4190@rhs* G4191@lex* G4192@mr G4193@r G4194@e*) (begin (if (null? G4194@e*) (G3181@syntax-violation '#f '"no expression in body" G4194@e*) (void)) ((lambda (G419d@init*) ((lambda (G419f@rhs*) ((lambda () (G2da9@G2d1d@build-letrec* '#f (reverse G4191@lex*) (reverse G419f@rhs*) (G2da6@G2d17@build-sequence '#f G419d@init*))))) (G30c2@chi-rhs* G4190@rhs* G4193@r G4192@mr))) (G30ae@chi-expr* (append (apply append (reverse G418f@mod**)) G4194@e*) G4193@r G4192@mr)))) G4184@G417a G4183@G4179 G4182@G4178 G4181@G4177 G4180@G4176 G417f@G4175 G417e@G4174 G417d@G4173)))) (G2df4@make-empty-rib)))) (set! G30ca@parse-module (lambda (G41a1@e) ((lambda (G41a3@t) ((lambda (G41a5@ls/false) (if G41a5@ls/false (apply (lambda (G41a7@export* G41a8@b*) (begin (if (not (for-all G2e4b@id? G41a7@export*)) (G3181@syntax-violation '#f '"module exports must be identifiers" G41a1@e) (void)) (values '#f (list->vector G41a7@export*) G41a8@b*))) G41a5@ls/false) ((lambda (G41ab@t) ((lambda (G41ad@ls/false) (if G41ad@ls/false (apply (lambda (G41af@name G41b0@export* G41b1@b*) (begin (if (not (G2e4b@id? G41af@name)) (G3181@syntax-violation '#f '"module name must be an identifier" G41a1@e) (void)) (if (not (for-all G2e4b@id? G41b0@export*)) (G3181@syntax-violation '#f '"module exports must be identifiers" G41a1@e) (void)) (values G41af@name (list->vector G41b0@export*) G41b1@b*))) G41ad@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G41ab@t))) (G308e@syntax-dispatch G41ab@t '(_ any each-any . each-any)))) G41a3@t))) (G308e@syntax-dispatch G41a3@t '(_ each-any . each-any)))) G41a1@e))) (set! G30d0@G30cb (make-record-type-descriptor 'module-interface '#f 'G30ce '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30d2@G30cd '#f) (set! G30d4@G30cc (make-record-constructor-descriptor G30d0@G30cb '#f G30d2@G30cd)) (set! G30d9@module-interface? (record-predicate G30d0@G30cb)) (set! G30db@make-module-interface (record-constructor G30d4@G30cc)) (set! G30dd@module-interface-first-mark (record-accessor G30d0@G30cb '0)) (set! G30df@module-interface-exp-id-vec (record-accessor G30d0@G30cb '1)) (set! G30e1@module-interface-exp-lab-vec (record-accessor G30d0@G30cb '2)) (set! G30e3@set-module-interface-first-mark! (record-mutator G30d0@G30cb '0)) (set! G30e5@set-module-interface-exp-id-vec! (record-mutator G30d0@G30cb '1)) (set! G30e7@set-module-interface-exp-lab-vec! (record-mutator G30d0@G30cb '2)) (set! G30e9@module-interface-exp-id* (lambda (G41b5@iface G41b6@id) ((lambda (G41ba@diff-marks) (begin (set! G41ba@diff-marks (lambda (G41c1@ls G41c2@x) (begin (if (null? G41c1@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G41c5@a) (if (eq? G41c5@a G41c2@x) '() (cons G41c5@a (G41ba@diff-marks (cdr G41c1@ls) G41c2@x)))) (car G41c1@ls))))) ((lambda (G41bb@diff G41bc@id-vec) (if (null? G41bb@diff) G41bc@id-vec (vector-map (lambda (G41bf@x) (G2e15@make-stx (G2e17@stx-expr G41bf@x) (append G41bb@diff (G2e19@stx-mark* G41bf@x)) '() '())) G41bc@id-vec))) (G41ba@diff-marks (G2e19@stx-mark* G41b6@id) (G30dd@module-interface-first-mark G41b5@iface)) (G30df@module-interface-exp-id-vec G41b5@iface)))) '#f))) (set! G30eb@chi-internal-module (lambda (G41c7@e G41c8@r G41c9@mr G41ca@lex* G41cb@rhs* G41cc@mod** G41cd@kwd*) (call-with-values (lambda () (G30ca@parse-module G41c7@e)) (lambda (G41d8@G41d5 G41d9@G41d6 G41da@G41d7) ((lambda (G41de@e* G41df@exp-id* G41e0@name) ((lambda (G41e4@rib) ((lambda (G41e6@e*) ((lambda () (call-with-values (lambda () (G30ed@chi-body* G41e6@e* G41c8@r G41c9@mr G41ca@lex* G41cb@rhs* G41cc@mod** G41cd@kwd* '() G41e4@rib '#f)) (lambda (G41f0@G41e8 G41f1@G41e9 G41f2@G41ea G41f3@G41eb G41f4@G41ec G41f5@G41ed G41f6@G41ee G41f7@G41ef) ((lambda (G4200@_exp* G4201@kwd* G4202@mod** G4203@rhs* G4204@lex* G4205@mr G4206@r G4207@e*) ((lambda (G4210@exp-lab* G4211@mod**) (if (not G41e0@name) (values G4204@lex* G4203@rhs* G41df@exp-id* G4210@exp-lab* G4206@r G4205@mr G4211@mod** G4201@kwd*) ((lambda (G4214@lab G4215@iface) (values G4204@lex* G4203@rhs* (vector G41e0@name) (vector G4214@lab) (cons (cons G4214@lab (cons '$module G4215@iface)) G4206@r) (cons (cons G4214@lab (cons '$module G4215@iface)) G4205@mr) G4211@mod** G4201@kwd*)) (G2dc7@gen-label 'module) (G30db@make-module-interface (car (G2e19@stx-mark* G41e0@name)) (vector-map (lambda (G4218@x) (G2e15@make-stx (G2e17@stx-expr G4218@x) (G2e19@stx-mark* G4218@x) '() '())) G41df@exp-id*) G4210@exp-lab*)))) (vector-map (lambda (G421a@x) ((lambda (G421c@t) (if G421c@t G421c@t (begin '#f (G3181@syntax-violation '#f '"cannot find module export" G421a@x)))) (G2e65@id->label (G2e15@make-stx (G2e4d@id->sym G421a@x) (G2e19@stx-mark* G421a@x) (list G41e4@rib) '())))) G41df@exp-id*) (cons G4207@e* G4202@mod**))) G41f7@G41ef G41f6@G41ee G41f5@G41ed G41f4@G41ec G41f3@G41eb G41f2@G41ea G41f1@G41e9 G41f0@G41e8)))))) (map (lambda (G421e@x) (G2e37@add-subst G41e4@rib G421e@x)) (G2e49@syntax->list G41de@e*)))) (G2df4@make-empty-rib))) G41da@G41d7 G41d9@G41d6 G41d8@G41d5))))) (set! G30ed@chi-body* (lambda (G4220@e* G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4226@kwd* G4227@exp* G4228@rib G4229@top?) (if (null? G4220@e*) (values G4220@e* G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4226@kwd* G4227@exp*) ((lambda (G4234@e) (call-with-values (lambda () (G2e73@syntax-type G4234@e G4221@r)) (lambda (G4239@G4236 G423a@G4237 G423b@G4238) ((lambda (G423f@kwd G4240@value G4241@type) ((lambda (G4245@kwd*) ((lambda (G4247@t) (if (memv G4247@t '(define)) (call-with-values (lambda () (G3016@parse-define G4234@e)) (lambda (G424b@G4249 G424c@G424a) ((lambda (G424f@rhs G4250@id) (begin (if (G2e59@bound-id-member? G4250@id G4245@kwd*) (G3181@syntax-violation '#f '"cannot redefine keyword" G4234@e) (void)) (call-with-values (lambda () (G2dcb@gen-define-label+loc G4250@id G4228@rib)) (lambda (G4255@G4253 G4256@G4254) ((lambda (G4259@lex G425a@lab) (begin (G2dfa@extend-rib! G4228@rib G4250@id G425a@lab) (G30ed@chi-body* (cdr G4220@e*) (G3024@add-lexical G425a@lab G4259@lex G4221@r) G4222@mr (cons G4259@lex G4223@lex*) (cons G424f@rhs G4224@rhs*) G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?))) G4256@G4254 G4255@G4253))))) G424c@G424a G424b@G4249))) (if (memv G4247@t '(define-syntax)) (call-with-values (lambda () (G3018@parse-define-syntax G4234@e)) (lambda (G425f@G425d G4260@G425e) ((lambda (G4263@rhs G4264@id) (begin (if (G2e59@bound-id-member? G4264@id G4245@kwd*) (G3181@syntax-violation '#f '"cannot redefine keyword" G4234@e) (void)) ((lambda (G4267@lab G4268@expanded-rhs) (begin (G2dfa@extend-rib! G4228@rib G4264@id G4267@lab) ((lambda (G426b@b) (G30ed@chi-body* (cdr G4220@e*) (cons (cons G4267@lab G426b@b) G4221@r) (cons (cons G4267@lab G426b@b) G4222@mr) G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?)) (G2e92@make-eval-transformer G4268@expanded-rhs)))) (G2dcd@gen-define-label G4264@id G4228@rib) (G30ef@expand-transformer G4263@rhs G4222@mr)))) G4260@G425e G425f@G425d))) (if (memv G4247@t '(let-syntax letrec-syntax)) ((lambda (G426d@t) ((lambda (G426f@ls/false) (if (if G426f@ls/false (begin '#f (apply (lambda (G4271@xlhs* G4272@xrhs* G4273@xbody*) (if (not (G2e55@valid-bound-ids? G4271@xlhs*)) (G3181@syntax-violation '#f '"invalid identifiers" G4234@e) (void))) G426f@ls/false)) '#f) (apply (lambda (G4277@xlhs* G4278@xrhs* G4279@xbody*) ((lambda (G427d@xlab*) ((lambda (G427f@xrib) ((lambda (G4281@xb*) ((lambda () (G30ed@chi-body* (append (map (lambda (G4283@x) (G2e37@add-subst G427f@xrib G4283@x)) G4279@xbody*) (cdr G4220@e*)) (append (map cons G427d@xlab* G4281@xb*) G4221@r) (append (map cons G427d@xlab* G4281@xb*) G4222@mr) G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?)))) (map (lambda (G4285@x) (G2e92@make-eval-transformer (G30ef@expand-transformer (if (eq? G4241@type 'let-syntax) G4285@x (G2e37@add-subst G427f@xrib G4285@x)) G4222@mr))) G4278@xrhs*))) (G2e04@make-full-rib G4277@xlhs* G427d@xlab*))) (map G2dc7@gen-label G4277@xlhs*))) G426f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G426d@t))) (G308e@syntax-dispatch G426d@t '(_ #(each (any any)) . each-any)))) G4234@e) (if (memv G4247@t '(begin)) ((lambda (G4287@t) ((lambda (G4289@ls/false) (if G4289@ls/false (apply (lambda (G428b@x*) (G30ed@chi-body* (append G428b@x* (cdr G4220@e*)) G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?)) G4289@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4287@t))) (G308e@syntax-dispatch G4287@t '(_ . each-any)))) G4234@e) (if (memv G4247@t '(global-macro global-macro!)) (G30ed@chi-body* (cons (G2e37@add-subst G4228@rib (G30ac@chi-global-macro G4240@value G4234@e)) (cdr G4220@e*)) G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?) (if (memv G4247@t '(local-macro local-macro!)) (G30ed@chi-body* (cons (G2e37@add-subst G4228@rib (G30aa@chi-local-macro G4240@value G4234@e)) (cdr G4220@e*)) G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?) (if (memv G4247@t '(macro macro!)) (G30ed@chi-body* (cons (G2e37@add-subst G4228@rib (G30a8@chi-macro G4240@value G4234@e)) (cdr G4220@e*)) G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?) (if (memv G4247@t '(module)) (call-with-values (lambda () (G30eb@chi-internal-module G4234@e G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4245@kwd*)) (lambda (G4295@G428d G4296@G428e G4297@G428f G4298@G4290 G4299@G4291 G429a@G4292 G429b@G4293 G429c@G4294) ((lambda (G42a5@kwd* G42a6@mod** G42a7@mr G42a8@r G42a9@m-exp-lab* G42aa@m-exp-id* G42ab@rhs* G42ac@lex*) (begin (vector-for-each (lambda (G42b5@id G42b6@lab) (G2dfa@extend-rib! G4228@rib G42b5@id G42b6@lab)) G42aa@m-exp-id* G42a9@m-exp-lab*) (G30ed@chi-body* (cdr G4220@e*) G42a8@r G42a7@mr G42ac@lex* G42ab@rhs* G42a6@mod** G42a5@kwd* G4227@exp* G4228@rib G4229@top?))) G429c@G4294 G429b@G4293 G429a@G4292 G4299@G4291 G4298@G4290 G4297@G428f G4296@G428e G4295@G428d))) (if (memv G4247@t '(library)) (begin (G3161@library-expander (G2e61@stx->datum G4234@e)) (G30ed@chi-body* (cdr G4220@e*) G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?)) (if (memv G4247@t '(export)) ((lambda (G42b9@t) ((lambda (G42bb@ls/false) (if G42bb@ls/false (apply (lambda (G42bd@exp-decl*) (G30ed@chi-body* (cdr G4220@e*) G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* (append G42bd@exp-decl* G4227@exp*) G4228@rib G4229@top?)) G42bb@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G42b9@t))) (G308e@syntax-dispatch G42b9@t '(_ . each-any)))) G4234@e) (if (memv G4247@t '(import)) ((lambda () ((lambda (G42c0@module-import? G42c2@module-import G42c4@library-import) (begin (set! G42c0@module-import? (lambda (G430c@e) ((lambda (G430e@t) ((lambda (G4310@ls/false) (if (if G4310@ls/false (begin '#f (apply (lambda (G4312@id) (G2e4b@id? G4312@id)) G4310@ls/false)) '#f) (apply (lambda (G4314@id) '#t) G4310@ls/false) ((lambda (G4316@t) ((lambda (G4318@ls/false) (if G4318@ls/false (apply (lambda (G431a@imp*) '#f) G4318@ls/false) ((lambda (G431c@t) ((lambda (G431e@ls/false) (if G431e@ls/false (apply (lambda () (G3181@syntax-violation '#f '"malformed import form" G430c@e)) G431e@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G431c@t))) (G308e@syntax-dispatch G431c@t '_))) G4316@t))) (G308e@syntax-dispatch G4316@t '(_ . each-any)))) G430e@t))) (G308e@syntax-dispatch G430e@t '(_ any)))) G430c@e))) (set! G42c2@module-import (lambda (G42ed@e G42ee@r) ((lambda (G42f1@t) ((lambda (G42f3@ls/false) (if (if G42f3@ls/false (begin '#f (apply (lambda (G42f5@id) (G2e4b@id? G42f5@id)) G42f3@ls/false)) '#f) (apply (lambda (G42f7@id) (call-with-values (lambda () (G2e73@syntax-type G42f7@id G42ee@r)) (lambda (G42fc@G42f9 G42fd@G42fa G42fe@G42fb) ((lambda (G4302@kwd G4303@value G4304@type) ((lambda (G4308@t) (if (memv G4308@t '($module)) ((lambda (G430a@iface) (values (G30e9@module-interface-exp-id* G430a@iface G42f7@id) (G30e1@module-interface-exp-lab-vec G430a@iface))) G4303@value) (G3181@syntax-violation '#f '"invalid import" G42ed@e))) G4304@type)) G42fe@G42fb G42fd@G42fa G42fc@G42f9)))) G42f3@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G42f1@t))) (G308e@syntax-dispatch G42f1@t '(_ any)))) G42ed@e))) (set! G42c4@library-import (lambda (G42d3@e) ((lambda (G42d5@t) ((lambda (G42d7@ls/false) (if G42d7@ls/false (apply (lambda (G42d9@ctxt G42da@imp*) (call-with-values (lambda () (G30f7@parse-import-spec* (G3187@syntax->datum G42da@imp*))) (lambda (G42df@G42dd G42e0@G42de) ((lambda (G42e3@subst-labels G42e4@subst-names) (values (vector-map (lambda (G42e7@name) (G2e29@datum->stx G42d9@ctxt G42e7@name)) G42e4@subst-names) G42e3@subst-labels)) G42e0@G42de G42df@G42dd)))) G42d7@ls/false) ((lambda (G42e9@t) ((lambda (G42eb@ls/false) (if G42eb@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid import form" G42d3@e)) G42eb@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G42e9@t))) (G308e@syntax-dispatch G42e9@t '_))) G42d5@t))) (G308e@syntax-dispatch G42d5@t '(any . each-any)))) G42d3@e))) (begin (call-with-values (lambda () (if (G42c0@module-import? G4234@e) (G42c2@module-import G4234@e G4221@r) (G42c4@library-import G4234@e))) (lambda (G42c7@G42c5 G42c8@G42c6) ((lambda (G42cb@lab* G42cc@id*) (vector-for-each (lambda (G42cf@id G42d0@lab) (G2dfa@extend-rib! G4228@rib G42cf@id G42d0@lab)) G42cc@id* G42cb@lab*)) G42c8@G42c6 G42c7@G42c5))) (G30ed@chi-body* (cdr G4220@e*) G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?)))) '#f '#f '#f))) (if G4229@top? (G30ed@chi-body* (cdr G4220@e*) G4221@r G4222@mr (cons (G2dc3@gen-lexical 'dummy) G4223@lex*) (cons (cons 'top-expr G4234@e) G4224@rhs*) G4225@mod** G4245@kwd* G4227@exp* G4228@rib G4229@top?) (values G4220@e* G4221@r G4222@mr G4223@lex* G4224@rhs* G4225@mod** G4245@kwd* G4227@exp*)))))))))))))) G4241@type)) (if (G2e4b@id? G423f@kwd) (cons G423f@kwd G4226@kwd*) G4226@kwd*))) G423b@G4238 G423a@G4237 G4239@G4236)))) (car G4220@e*))))) (set! G30ef@expand-transformer (lambda (G4320@expr G4321@r) ((lambda (G4324@rtc) ((lambda (G4326@expanded-rhs) (begin (for-each ((lambda (G4328@mark-visit) (lambda (G432a@x) (begin (G2c40@G2ad5@invoke-library G432a@x) (G4328@mark-visit G432a@x)))) (G30ff@vis-collector)) (G4324@rtc)) G4326@expanded-rhs)) ((lambda (G4330@G432c@inv-collector G4331@G432d@vis-collector G4332@G432e@inv-collector G4333@G432f@vis-collector) ((lambda (G4338@swap) (dynamic-wind G4338@swap (lambda () (G30b2@chi-expr G4320@expr G4321@r G4321@r)) G4338@swap)) (lambda () (begin ((lambda (G433a@t) (begin (G4330@G432c@inv-collector G4332@G432e@inv-collector) (set! G4332@G432e@inv-collector G433a@t))) (G4330@G432c@inv-collector)) ((lambda (G433c@t) (begin (G4331@G432d@vis-collector G4333@G432f@vis-collector) (set! G4333@G432f@vis-collector G433c@t))) (G4331@G432d@vis-collector)))))) G30fd@inv-collector G30ff@vis-collector G4324@rtc (lambda (G433e@x) (values))))) (G30fb@make-collector)))) (set! G30f1@parse-exports (lambda (G4340@exp*) ((letrec ((G4342@f (lambda (G4344@exp* G4345@int* G4346@ext*) (if (null? G4344@exp*) (begin (if (not (G2e55@valid-bound-ids? G4346@ext*)) (G3181@syntax-violation 'export '"invalid exports" (G30c6@find-dups G4346@ext*)) (void)) (values (map G3187@syntax->datum G4346@ext*) G4345@int*)) ((lambda (G434a@t) ((lambda (G434c@ls/false) (if G434c@ls/false (apply (lambda (G434e@rename G434f@i* G4350@e*) (begin (if (not (if (eq? (G3187@syntax->datum G434e@rename) 'rename) (if (for-all G2e4b@id? G434f@i*) (begin '#f (for-all G2e4b@id? G4350@e*)) '#f) '#f)) (G3181@syntax-violation 'export '"invalid export specifier" (car G4344@exp*)) (void)) (G4342@f (cdr G4344@exp*) (append G434f@i* G4345@int*) (append G4350@e* G4346@ext*)))) G434c@ls/false) ((lambda (G4354@t) ((lambda (G4356@ls/false) (if G4356@ls/false (apply (lambda (G4358@ie) (begin (if (not (G2e4b@id? G4358@ie)) (G3181@syntax-violation 'export '"invalid export" G4358@ie) (void)) (G4342@f (cdr G4344@exp*) (cons G4358@ie G4345@int*) (cons G4358@ie G4346@ext*)))) G4356@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4354@t))) (G308e@syntax-dispatch G4354@t 'any))) G434a@t))) (G308e@syntax-dispatch G434a@t '(any . #(each (any any)))))) (car G4344@exp*)))))) G4342@f) G4340@exp* '() '()))) (set! G30f3@parse-library-name (lambda (G435a@spec) ((lambda (G435d@parse) (begin (set! G435d@parse (lambda (G4368@x) ((lambda (G436a@t) ((lambda (G436c@ls/false) (if (if G436c@ls/false (begin '#f (apply (lambda (G436e@v*) (for-all (lambda (G4370@x) ((lambda (G4372@x) (if (integer? G4372@x) (begin '#f (exact? G4372@x)) '#f)) (G3187@syntax->datum G4370@x))) G436e@v*)) G436c@ls/false)) '#f) (apply (lambda (G4374@v*) (values '() (map G3187@syntax->datum G4374@v*))) G436c@ls/false) ((lambda (G4376@t) ((lambda (G4378@ls/false) (if (if G4378@ls/false (begin '#f (apply (lambda (G437a@x G437b@rest) (symbol? (G3187@syntax->datum G437a@x))) G4378@ls/false)) '#f) (apply (lambda (G437e@x G437f@rest) (call-with-values (lambda () (G435d@parse G437f@rest)) (lambda (G4384@G4382 G4385@G4383) ((lambda (G4388@v* G4389@x*) (values (cons (G3187@syntax->datum G437e@x) G4389@x*) G4388@v*)) G4385@G4383 G4384@G4382)))) G4378@ls/false) ((lambda (G438c@t) ((lambda (G438e@ls/false) (if G438e@ls/false (apply (lambda () (values '() '())) G438e@ls/false) ((lambda (G4390@t) ((lambda (G4392@ls/false) (if G4392@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid library name" G435a@spec)) G4392@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4390@t))) (G308e@syntax-dispatch G4390@t '_))) G438c@t))) (G308e@syntax-dispatch G438c@t '()))) G4376@t))) (G308e@syntax-dispatch G4376@t '(any . any)))) G436a@t))) (G308e@syntax-dispatch G436a@t '(each-any)))) G4368@x))) (call-with-values (lambda () (G435d@parse G435a@spec)) (lambda (G4360@G435e G4361@G435f) ((lambda (G4364@ver* G4365@name*) (begin (if (null? G4365@name*) (G3181@syntax-violation '#f '"empty library name" G435a@spec) (void)) (values G4365@name* G4364@ver*))) G4361@G435f G4360@G435e))))) '#f))) (set! G30f5@parse-library (lambda (G4394@e) ((lambda (G4396@t) ((lambda (G4398@ls/false) (if (if G4398@ls/false (begin '#f (apply (lambda (G439a@library G439b@name* G439c@export G439d@exp* G439e@import G439f@imp* G43a0@b*) (if (eq? (G3187@syntax->datum G439c@export) 'export) (if (eq? (G3187@syntax->datum G439e@import) 'import) (begin '#f (eq? (G3187@syntax->datum G439a@library) 'library)) '#f) '#f)) G4398@ls/false)) '#f) (apply (lambda (G43a8@library G43a9@name* G43aa@export G43ab@exp* G43ac@import G43ad@imp* G43ae@b*) (values G43a9@name* G43ab@exp* G43ad@imp* G43ae@b*)) G4398@ls/false) ((lambda (G43b6@t) ((lambda (G43b8@ls/false) (if G43b8@ls/false (apply (lambda () (G3181@syntax-violation '#f '"malformed library" G4394@e)) G43b8@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G43b6@t))) (G308e@syntax-dispatch G43b6@t '_))) G4396@t))) (G308e@syntax-dispatch G4396@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4394@e))) (set! G30f7@parse-import-spec* ((lambda () ((lambda (G43bb@idsyn? G43bd@dup-error G43bf@merge-substs G43c1@exclude* G43c3@find* G43c5@rem* G43c7@remove-dups G43c9@parse-library-name G43cb@import-library G43cd@get-import G43cf@add-imports!) (begin (set! G43bb@idsyn? (lambda (G45ba@x) (symbol? (G3187@syntax->datum G45ba@x)))) (set! G43bd@dup-error (lambda (G45b8@name) (G3181@syntax-violation 'import '"two imports with different bindings" G45b8@name))) (set! G43bf@merge-substs (lambda (G45a6@s G45a7@subst) ((lambda (G45ab@insert-to-subst) (begin (set! G45ab@insert-to-subst (lambda (G45ac@a G45ad@subst) ((lambda (G45b0@name G45b1@label) ((lambda (G45b4@t) (if G45b4@t ((lambda (G45b6@x) (if (eq? (cdr G45b6@x) G45b1@label) G45ad@subst (G43bd@dup-error G45b0@name))) G45b4@t) (cons G45ac@a G45ad@subst))) (assq G45b0@name G45ad@subst))) (car G45ac@a) (cdr G45ac@a)))) (if (null? G45a6@s) G45a7@subst (G45ab@insert-to-subst (car G45a6@s) (G43bf@merge-substs (cdr G45a6@s) G45a7@subst))))) '#f))) (set! G43c1@exclude* (lambda (G457c@sym* G457d@subst) ((lambda (G4581@exclude) (begin (set! G4581@exclude (lambda (G4596@sym G4597@subst) (if (null? G4597@subst) (G3181@syntax-violation 'import '"cannot rename unbound identifier" G4596@sym) (if (eq? G4596@sym (caar G4597@subst)) (values (cdar G4597@subst) (cdr G4597@subst)) ((lambda (G459a@a) (call-with-values (lambda () (G4581@exclude G4596@sym (cdr G4597@subst))) (lambda (G459e@G459c G459f@G459d) ((lambda (G45a2@subst G45a3@old) (values G45a3@old (cons G459a@a G45a2@subst))) G459f@G459d G459e@G459c)))) (car G4597@subst)))))) (if (null? G457c@sym*) (values '() G457d@subst) (call-with-values (lambda () (G4581@exclude (car G457c@sym*) G457d@subst)) (lambda (G4584@G4582 G4585@G4583) ((lambda (G4588@subst G4589@old) (call-with-values (lambda () (G43c1@exclude* (cdr G457c@sym*) G4588@subst)) (lambda (G458e@G458c G458f@G458d) ((lambda (G4592@subst G4593@old*) (values (cons G4589@old G4593@old*) G4592@subst)) G458f@G458d G458e@G458c)))) G4585@G4583 G4584@G4582)))))) '#f))) (set! G43c3@find* (lambda (G4574@sym* G4575@subst) (map (lambda (G4578@x) ((lambda (G457a@t) (if G457a@t (cdr G457a@t) (G3181@syntax-violation 'import '"cannot find identifier" G4578@x))) (assq G4578@x G4575@subst))) G4574@sym*))) (set! G43c5@rem* (lambda (G456c@sym* G456d@subst) ((letrec ((G4570@f (lambda (G4572@subst) (if (null? G4572@subst) '() (if (memq (caar G4572@subst) G456c@sym*) (G4570@f (cdr G4572@subst)) (cons (car G4572@subst) (G4570@f (cdr G4572@subst)))))))) G4570@f) G456d@subst))) (set! G43c7@remove-dups (lambda (G456a@ls) (if (null? G456a@ls) '() (if (memq (car G456a@ls) (cdr G456a@ls)) (G43c7@remove-dups (cdr G456a@ls)) (cons (car G456a@ls) (G43c7@remove-dups (cdr G456a@ls))))))) (set! G43c9@parse-library-name (lambda (G4484@spec) ((lambda (G4487@subversion? G4489@subversion-pred G448b@version-pred) (begin (set! G4487@subversion? (lambda (G4566@x) ((lambda (G4568@x) (if (integer? G4568@x) (if (exact? G4568@x) (begin '#f (>= G4568@x '0)) '#f) '#f)) (G3187@syntax->datum G4566@x)))) (set! G4489@subversion-pred (lambda (G4506@x*) ((lambda (G4508@t) ((lambda (G450a@ls/false) (if (if G450a@ls/false (begin '#f (apply (lambda (G450c@n) (G4487@subversion? G450c@n)) G450a@ls/false)) '#f) (apply (lambda (G450e@n) (lambda (G4510@x) (= G4510@x (G3187@syntax->datum G450e@n)))) G450a@ls/false) ((lambda (G4512@t) ((lambda (G4514@ls/false) (if (if G4514@ls/false (begin '#f (apply (lambda (G4516@p? G4517@sub*) (eq? (G3187@syntax->datum G4516@p?) 'and)) G4514@ls/false)) '#f) (apply (lambda (G451a@p? G451b@sub*) ((lambda (G451e@p*) (lambda (G4520@x) (for-all (lambda (G4522@p) (G4522@p G4520@x)) G451e@p*))) (map G4489@subversion-pred G451b@sub*))) G4514@ls/false) ((lambda (G4524@t) ((lambda (G4526@ls/false) (if (if G4526@ls/false (begin '#f (apply (lambda (G4528@p? G4529@sub*) (eq? (G3187@syntax->datum G4528@p?) 'or)) G4526@ls/false)) '#f) (apply (lambda (G452c@p? G452d@sub*) ((lambda (G4530@p*) (lambda (G4532@x) (exists (lambda (G4534@p) (G4534@p G4532@x)) G4530@p*))) (map G4489@subversion-pred G452d@sub*))) G4526@ls/false) ((lambda (G4536@t) ((lambda (G4538@ls/false) (if (if G4538@ls/false (begin '#f (apply (lambda (G453a@p? G453b@sub) (eq? (G3187@syntax->datum G453a@p?) 'not)) G4538@ls/false)) '#f) (apply (lambda (G453e@p? G453f@sub) ((lambda (G4542@p) (lambda (G4544@x) (not (G4542@p G4544@x)))) (G4489@subversion-pred G453f@sub))) G4538@ls/false) ((lambda (G4546@t) ((lambda (G4548@ls/false) (if (if G4548@ls/false (begin '#f (apply (lambda (G454a@p? G454b@n) (if (eq? (G3187@syntax->datum G454a@p?) '<=) (begin '#f (G4487@subversion? G454b@n)) '#f)) G4548@ls/false)) '#f) (apply (lambda (G454e@p? G454f@n) (lambda (G4552@x) (<= G4552@x (G3187@syntax->datum G454f@n)))) G4548@ls/false) ((lambda (G4554@t) ((lambda (G4556@ls/false) (if (if G4556@ls/false (begin '#f (apply (lambda (G4558@p? G4559@n) (if (eq? (G3187@syntax->datum G4558@p?) '>=) (begin '#f (G4487@subversion? G4559@n)) '#f)) G4556@ls/false)) '#f) (apply (lambda (G455c@p? G455d@n) (lambda (G4560@x) (>= G4560@x (G3187@syntax->datum G455d@n)))) G4556@ls/false) ((lambda (G4562@t) ((lambda (G4564@ls/false) (if G4564@ls/false (apply (lambda () (G3181@syntax-violation 'import '"invalid sub-version spec" G4484@spec G4506@x*)) G4564@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4562@t))) (G308e@syntax-dispatch G4562@t '_))) G4554@t))) (G308e@syntax-dispatch G4554@t '(any any)))) G4546@t))) (G308e@syntax-dispatch G4546@t '(any any)))) G4536@t))) (G308e@syntax-dispatch G4536@t '(any any)))) G4524@t))) (G308e@syntax-dispatch G4524@t '(any . each-any)))) G4512@t))) (G308e@syntax-dispatch G4512@t '(any . each-any)))) G4508@t))) (G308e@syntax-dispatch G4508@t 'any))) G4506@x*))) (set! G448b@version-pred (lambda (G44b6@x*) ((lambda (G44b8@t) ((lambda (G44ba@ls/false) (if G44ba@ls/false (apply (lambda () (lambda (G44bc@x) '#t)) G44ba@ls/false) ((lambda (G44be@t) ((lambda (G44c0@ls/false) (if (if G44c0@ls/false (begin '#f (apply (lambda (G44c2@c G44c3@ver*) (eq? (G3187@syntax->datum G44c2@c) 'and)) G44c0@ls/false)) '#f) (apply (lambda (G44c6@c G44c7@ver*) ((lambda (G44ca@p*) (lambda (G44cc@x) (for-all (lambda (G44ce@p) (G44ce@p G44cc@x)) G44ca@p*))) (map G448b@version-pred G44c7@ver*))) G44c0@ls/false) ((lambda (G44d0@t) ((lambda (G44d2@ls/false) (if (if G44d2@ls/false (begin '#f (apply (lambda (G44d4@c G44d5@ver*) (eq? (G3187@syntax->datum G44d4@c) 'or)) G44d2@ls/false)) '#f) (apply (lambda (G44d8@c G44d9@ver*) ((lambda (G44dc@p*) (lambda (G44de@x) (exists (lambda (G44e0@p) (G44e0@p G44de@x)) G44dc@p*))) (map G448b@version-pred G44d9@ver*))) G44d2@ls/false) ((lambda (G44e2@t) ((lambda (G44e4@ls/false) (if (if G44e4@ls/false (begin '#f (apply (lambda (G44e6@c G44e7@ver) (eq? (G3187@syntax->datum G44e6@c) 'not)) G44e4@ls/false)) '#f) (apply (lambda (G44ea@c G44eb@ver) ((lambda (G44ee@p) (lambda (G44f0@x) (not (G44ee@p G44f0@x)))) (G448b@version-pred G44eb@ver))) G44e4@ls/false) ((lambda (G44f2@t) ((lambda (G44f4@ls/false) (if G44f4@ls/false (apply (lambda (G44f6@sub*) ((lambda (G44f8@p*) (lambda (G44fa@x) ((letrec ((G44fc@f (lambda (G44fe@p* G44ff@x) (if (null? G44fe@p*) '#t (if (null? G44ff@x) '#f (if ((car G44fe@p*) (car G44ff@x)) (begin '#f (G44fc@f (cdr G44fe@p*) (cdr G44ff@x))) '#f)))))) G44fc@f) G44f8@p* G44fa@x))) (map G4489@subversion-pred G44f6@sub*))) G44f4@ls/false) ((lambda (G4502@t) ((lambda (G4504@ls/false) (if G4504@ls/false (apply (lambda () (G3181@syntax-violation 'import '"invalid version spec" G4484@spec G44b6@x*)) G4504@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4502@t))) (G308e@syntax-dispatch G4502@t '_))) G44f2@t))) (G308e@syntax-dispatch G44f2@t 'each-any))) G44e2@t))) (G308e@syntax-dispatch G44e2@t '(any any)))) G44d0@t))) (G308e@syntax-dispatch G44d0@t '(any . each-any)))) G44be@t))) (G308e@syntax-dispatch G44be@t '(any . each-any)))) G44b8@t))) (G308e@syntax-dispatch G44b8@t '()))) G44b6@x*))) ((letrec ((G448c@f (lambda (G448e@x) ((lambda (G4490@t) ((lambda (G4492@ls/false) (if G4492@ls/false (apply (lambda (G4494@version-spec*) (values '() (G448b@version-pred G4494@version-spec*))) G4492@ls/false) ((lambda (G4496@t) ((lambda (G4498@ls/false) (if (if G4498@ls/false (begin '#f (apply (lambda (G449a@x G449b@x*) (G43bb@idsyn? G449a@x)) G4498@ls/false)) '#f) (apply (lambda (G449e@x G449f@x*) (call-with-values (lambda () (G448c@f G449f@x*)) (lambda (G44a4@G44a2 G44a5@G44a3) ((lambda (G44a8@pred G44a9@name) (values (cons (G3187@syntax->datum G449e@x) G44a9@name) G44a8@pred)) G44a5@G44a3 G44a4@G44a2)))) G4498@ls/false) ((lambda (G44ac@t) ((lambda (G44ae@ls/false) (if G44ae@ls/false (apply (lambda () (values '() (lambda (G44b0@x) '#t))) G44ae@ls/false) ((lambda (G44b2@t) ((lambda (G44b4@ls/false) (if G44b4@ls/false (apply (lambda () (G3181@syntax-violation '#f '"invalid import spec" G4484@spec)) G44b4@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G44b2@t))) (G308e@syntax-dispatch G44b2@t '_))) G44ac@t))) (G308e@syntax-dispatch G44ac@t '()))) G4496@t))) (G308e@syntax-dispatch G4496@t '(any . any)))) G4490@t))) (G308e@syntax-dispatch G4490@t '(each-any)))) G448e@x)))) G448c@f) G4484@spec))) '#f '#f '#f))) (set! G43cb@import-library (lambda (G4476@spec*) (call-with-values (lambda () (G43c9@parse-library-name G4476@spec*)) (lambda (G447a@G4478 G447b@G4479) ((lambda (G447e@pred G447f@name) (begin (if (null? G447f@name) (G3181@syntax-violation 'import '"empty library name" G4476@spec*) (void)) ((lambda (G4482@lib) (begin (if (not G4482@lib) (G3181@syntax-violation 'import '"cannot find library with required name" G447f@name) (void)) (if (not (G447e@pred (G2c11@G2a77@library-version G4482@lib))) (G3181@syntax-violation 'import '"library does not satisfy version specification" G4476@spec* G4482@lib) (void)) ((G3101@imp-collector) G4482@lib) (G2c15@G2a7f@library-subst G4482@lib))) (G2c39@G2ac7@find-library-by-name G447f@name)))) G447b@G4479 G447a@G4478))))) (set! G43cd@get-import (lambda (G43e8@spec) ((lambda (G43ea@t) ((lambda (G43ec@ls/false) (if (if G43ec@ls/false (begin '#f (apply (lambda (G43ee@x G43ef@x*) (not (memq (G3187@syntax->datum G43ee@x) '(for rename except only prefix library)))) G43ec@ls/false)) '#f) (apply (lambda (G43f2@x G43f3@x*) (G43cb@import-library (cons G43f2@x G43f3@x*))) G43ec@ls/false) ((lambda (G43f6@t) ((lambda (G43f8@ls/false) (if (if G43f8@ls/false (begin '#f (apply (lambda (G43fa@rename G43fb@isp G43fc@old* G43fd@new*) (if (eq? (G3187@syntax->datum G43fa@rename) 'rename) (if (for-all G43bb@idsyn? G43fc@old*) (begin '#f (for-all G43bb@idsyn? G43fd@new*)) '#f) '#f)) G43f8@ls/false)) '#f) (apply (lambda (G4402@rename G4403@isp G4404@old* G4405@new*) ((lambda (G440a@subst G440b@old* G440c@new*) ((lambda (G4410@old-label*) ((lambda (G4412@subst) (G43bf@merge-substs (map cons G440c@new* G4410@old-label*) G4412@subst)) (G43c5@rem* G440b@old* G440a@subst))) (G43c3@find* G440b@old* G440a@subst))) (G43cd@get-import G4403@isp) (map G3187@syntax->datum G4404@old*) (map G3187@syntax->datum G4405@new*))) G43f8@ls/false) ((lambda (G4414@t) ((lambda (G4416@ls/false) (if (if G4416@ls/false (begin '#f (apply (lambda (G4418@except G4419@isp G441a@sym*) (if (eq? (G3187@syntax->datum G4418@except) 'except) (begin '#f (for-all G43bb@idsyn? G441a@sym*)) '#f)) G4416@ls/false)) '#f) (apply (lambda (G441e@except G441f@isp G4420@sym*) ((lambda (G4424@subst) (G43c5@rem* (map G3187@syntax->datum G4420@sym*) G4424@subst)) (G43cd@get-import G441f@isp))) G4416@ls/false) ((lambda (G4426@t) ((lambda (G4428@ls/false) (if (if G4428@ls/false (begin '#f (apply (lambda (G442a@only G442b@isp G442c@sym*) (if (eq? (G3187@syntax->datum G442a@only) 'only) (begin '#f (for-all G43bb@idsyn? G442c@sym*)) '#f)) G4428@ls/false)) '#f) (apply (lambda (G4430@only G4431@isp G4432@sym*) ((lambda (G4436@subst G4437@sym*) ((lambda (G443a@sym*) ((lambda (G443c@lab*) (map cons G443a@sym* G443c@lab*)) (G43c3@find* G443a@sym* G4436@subst))) (G43c7@remove-dups G4437@sym*))) (G43cd@get-import G4431@isp) (map G3187@syntax->datum G4432@sym*))) G4428@ls/false) ((lambda (G443e@t) ((lambda (G4440@ls/false) (if (if G4440@ls/false (begin '#f (apply (lambda (G4442@prefix G4443@isp G4444@p) (if (eq? (G3187@syntax->datum G4442@prefix) 'prefix) (begin '#f (G43bb@idsyn? G4444@p)) '#f)) G4440@ls/false)) '#f) (apply (lambda (G4448@prefix G4449@isp G444a@p) ((lambda (G444e@subst G444f@prefix) (map (lambda (G4452@x) (cons (string->symbol (string-append G444f@prefix (symbol->string (car G4452@x)))) (cdr G4452@x))) G444e@subst)) (G43cd@get-import G4449@isp) (symbol->string (G3187@syntax->datum G444a@p)))) G4440@ls/false) ((lambda (G4454@t) ((lambda (G4456@ls/false) (if (if G4456@ls/false (begin '#f (apply (lambda (G4458@library G4459@spec*) (eq? (G3187@syntax->datum G4458@library) 'library)) G4456@ls/false)) '#f) (apply (lambda (G445c@library G445d@spec*) (G43cb@import-library G445d@spec*)) G4456@ls/false) ((lambda (G4460@t) ((lambda (G4462@ls/false) (if (if G4462@ls/false (begin '#f (apply (lambda (G4464@for G4465@isp G4466@rest) (eq? (G3187@syntax->datum G4464@for) 'for)) G4462@ls/false)) '#f) (apply (lambda (G446a@for G446b@isp G446c@rest) (G43cd@get-import G446b@isp)) G4462@ls/false) ((lambda (G4470@t) ((lambda (G4472@ls/false) (if G4472@ls/false (apply (lambda (G4474@spec) (G3181@syntax-violation 'import '"invalid import spec" G4474@spec)) G4472@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4470@t))) (G308e@syntax-dispatch G4470@t 'any))) G4460@t))) (G308e@syntax-dispatch G4460@t '(any any . any)))) G4454@t))) (G308e@syntax-dispatch G4454@t '(any each-any)))) G443e@t))) (G308e@syntax-dispatch G443e@t '(any any any)))) G4426@t))) (G308e@syntax-dispatch G4426@t '(any any . each-any)))) G4414@t))) (G308e@syntax-dispatch G4414@t '(any any . each-any)))) G43f6@t))) (G308e@syntax-dispatch G43f6@t '(any any . #(each (any any)))))) G43ea@t))) (G308e@syntax-dispatch G43ea@t '(any . each-any)))) G43e8@spec))) (set! G43cf@add-imports! (lambda (G43d8@imp G43d9@h) ((lambda (G43dc@subst) (for-each (lambda (G43de@x) ((lambda (G43e0@name G43e1@label) ((lambda (G43e4@t) (if G43e4@t ((lambda (G43e6@l) (if (not (eq? G43e6@l G43e1@label)) (G43bd@dup-error G43e0@name) (void))) G43e4@t) (hashtable-set! G43d9@h G43e0@name G43e1@label))) (hashtable-ref G43d9@h G43e0@name '#f))) (car G43de@x) (cdr G43de@x))) G43dc@subst)) (G43cd@get-import G43d8@imp)))) (lambda (G43d0@imp*) ((letrec ((G43d2@f (lambda (G43d4@imp* G43d5@h) (if (null? G43d4@imp*) (hashtable-entries G43d5@h) (begin (G43cf@add-imports! (car G43d4@imp*) G43d5@h) (G43d2@f (cdr G43d4@imp*) G43d5@h)))))) G43d2@f) G43d0@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30f9@make-top-rib (lambda (G45bc@names G45bd@labels) ((lambda (G45c0@rib) (begin (vector-for-each (lambda (G45c2@name G45c3@label) (begin (if (not (symbol? G45c2@name)) (error 'make-top-rib '"BUG: not a symbol" G45c2@name) (void)) (G2dfc@extend-rib/nc! G45c0@rib (G2e15@make-stx G45c2@name G2dbf@top-mark* '() '()) G45c3@label))) G45bc@names G45bd@labels) G45c0@rib)) (G2df6@make-cache-rib)))) (set! G30fb@make-collector (lambda () ((lambda (G45c6@ls) (lambda G45ca ((lambda (G45cb) (if (= G45cb '0) (apply (lambda () G45c6@ls) G45ca) (if (= G45cb '1) (apply (lambda (G45c8@x) (set! G45c6@ls (G2db8@set-cons G45c8@x G45c6@ls))) G45ca) (error 'apply '"invalid arg count")))) (length G45ca)))) '()))) (set! G30fd@inv-collector (G299d@G28a8@make-parameter (lambda G45cc@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G45ce@x) (begin (if (not (procedure? G45ce@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G45ce@x) (void)) G45ce@x)))) (set! G30ff@vis-collector (G299d@G28a8@make-parameter (lambda G45d0@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45d2@x) (begin (if (not (procedure? G45d2@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45d2@x) (void)) G45d2@x)))) (set! G3101@imp-collector (G299d@G28a8@make-parameter (lambda G45d4@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45d6@x) (begin (if (not (procedure? G45d6@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45d6@x) (void)) G45d6@x)))) (set! G3103@chi-library-internal (lambda (G45d8@e* G45d9@rib G45da@top?) (call-with-values (lambda () (G30ed@chi-body* G45d8@e* '() '() '() '() '() '() '() G45d9@rib G45da@top?)) (lambda (G45e6@G45de G45e7@G45df G45e8@G45e0 G45e9@G45e1 G45ea@G45e2 G45eb@G45e3 G45ec@G45e4 G45ed@G45e5) ((lambda (G45f6@exp* G45f7@_kwd* G45f8@mod** G45f9@rhs* G45fa@lex* G45fb@mr G45fc@r G45fd@e*) (values (append (apply append (reverse G45f8@mod**)) G45fd@e*) G45fc@r G45fb@mr (reverse G45fa@lex*) (reverse G45f9@rhs*) G45f6@exp*)) G45ed@G45e5 G45ec@G45e4 G45eb@G45e3 G45ea@G45e2 G45e9@G45e1 G45e8@G45e0 G45e7@G45df G45e6@G45de))))) (set! G3105@chi-interaction-expr (lambda (G4606@e G4607@rib G4608@r) (call-with-values (lambda () (G30ed@chi-body* (list G4606@e) G4608@r G4608@r '() '() '() '() '() G4607@rib '#t)) (lambda (G4614@G460c G4615@G460d G4616@G460e G4617@G460f G4618@G4610 G4619@G4611 G461a@G4612 G461b@G4613) ((lambda (G4624@_exp* G4625@_kwd* G4626@mod** G4627@rhs* G4628@lex* G4629@mr G462a@r G462b@e*) ((lambda (G4634@e*) ((lambda (G4636@e) (values G4636@e G462a@r)) (if (null? G4634@e*) (G2da7@G2d19@build-void) (if (null? (cdr G4634@e*)) (car G4634@e*) (G2da6@G2d17@build-sequence '#f G4634@e*))))) (G30c0@expand-interaction-rhs*/init* (reverse G4628@lex*) (reverse G4627@rhs*) (append (apply append (reverse G4626@mod**)) G462b@e*) G462a@r G4629@mr))) G461b@G4613 G461a@G4612 G4619@G4611 G4618@G4610 G4617@G460f G4616@G460e G4615@G460d G4614@G460c))))) (set! G3107@library-body-expander (lambda (G4638@name G4639@main-exp* G463a@imp* G463b@b* G463c@top?) ((lambda (G4643@itc) (begin (set! G4643@itc (G30fb@make-collector)) ((lambda (G4648@G4644@imp-collector G4649@G4645@top-level-context G464a@G4646@imp-collector G464b@G4647@top-level-context) ((lambda (G4650@swap) (dynamic-wind G4650@swap (lambda () (call-with-values (lambda () (G30f7@parse-import-spec* G463a@imp*)) (lambda (G4654@G4652 G4655@G4653) ((lambda (G4658@subst-labels G4659@subst-names) ((lambda (G465c@rib) ((lambda (G465f@wrap) (begin (set! G465f@wrap (lambda (G46cb@x) (G2e15@make-stx G46cb@x G2dbf@top-mark* (list G465c@rib) '()))) ((lambda (G4660@b* G4661@main-exp* G4662@rtc G4663@vtc) ((lambda (G466c@G4668@inv-collector G466d@G4669@vis-collector G466e@G466a@inv-collector G466f@G466b@vis-collector) ((lambda (G4674@swap) (dynamic-wind G4674@swap (lambda () (call-with-values (lambda () (G3103@chi-library-internal G4660@b* G465c@rib G463c@top?)) (lambda (G467c@G4676 G467d@G4677 G467e@G4678 G467f@G4679 G4680@G467a G4681@G467b) ((lambda (G4688@internal-exp* G4689@rhs* G468a@lex* G468b@mr G468c@r G468d@init*) (call-with-values (lambda () (G30f1@parse-exports (append G4661@main-exp* G4688@internal-exp*))) (lambda (G4696@G4694 G4697@G4695) ((lambda (G469a@exp-id* G469b@exp-name*) (begin (G2e00@seal-rib! G465c@rib) ((lambda (G469e@init*) ((lambda (G46a0@rhs*) ((lambda () (begin (G2e02@unseal-rib! G465c@rib) ((lambda (G46a2@loc* G46a3@export-subst) ((lambda (G46a7@errstr) (begin (set! G46a7@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G316b@make-export-env/macros G468a@lex* G46a2@loc* G468c@r)) (lambda (G46ab@G46a8 G46ac@G46a9 G46ad@G46aa) ((lambda (G46b1@macro* G46b2@global* G46b3@export-env) (begin (for-each (lambda (G46b7@s) ((lambda (G46b9@name G46ba@label) ((lambda (G46bd@p) (if G46bd@p ((lambda (G46bf@b) ((lambda (G46c1@type) (if (eq? G46c1@type 'mutable) (G3181@syntax-violation 'export G46a7@errstr G46b9@name) (void))) (car G46bf@b))) (cdr G46bd@p)) (void))) (assq G46ba@label G46b3@export-env))) (car G46b7@s) (cdr G46b7@s))) G46a3@export-subst) ((lambda (G46c3@invoke-body G46c4@invoke-definitions) (values (G4643@itc) (G4662@rtc) (G4663@vtc) (G2da6@G2d17@build-sequence '#f (append G46c4@invoke-definitions (list G46c3@invoke-body))) G46b1@macro* G46a3@export-subst G46b3@export-env)) (G2da9@G2d1d@build-letrec* '#f G468a@lex* G46a0@rhs* (G3167@build-exports G46b2@global* G469e@init*)) (map G2da2@G2c47@build-global-define (map cdr G46b2@global*))))) G46ad@G46aa G46ac@G46a9 G46ab@G46a8))))) '#f)) (map G2dc5@gen-global G468a@lex*) (G3169@make-export-subst G469b@exp-name* G469a@exp-id*)))))) (G30c2@chi-rhs* G4689@rhs* G468c@r G468b@mr))) (G30ae@chi-expr* G468d@init* G468c@r G468b@mr)))) G4697@G4695 G4696@G4694)))) G4681@G467b G4680@G467a G467f@G4679 G467e@G4678 G467d@G4677 G467c@G4676)))) G4674@swap)) (lambda () (begin ((lambda (G46c7@t) (begin (G466c@G4668@inv-collector G466e@G466a@inv-collector) (set! G466e@G466a@inv-collector G46c7@t))) (G466c@G4668@inv-collector)) ((lambda (G46c9@t) (begin (G466d@G4669@vis-collector G466f@G466b@vis-collector) (set! G466f@G466b@vis-collector G46c9@t))) (G466d@G4669@vis-collector)))))) G30fd@inv-collector G30ff@vis-collector G4662@rtc G4663@vtc)) (map G465f@wrap G463b@b*) (map G465f@wrap G4639@main-exp*) (G30fb@make-collector) (G30fb@make-collector)))) '#f)) (G30f9@make-top-rib G4659@subst-names G4658@subst-labels))) G4655@G4653 G4654@G4652)))) G4650@swap)) (lambda () (begin ((lambda (G46cd@t) (begin (G4648@G4644@imp-collector G464a@G4646@imp-collector) (set! G464a@G4646@imp-collector G46cd@t))) (G4648@G4644@imp-collector)) ((lambda (G46cf@t) (begin (G4649@G4645@top-level-context G464b@G4647@top-level-context) (set! G464b@G4647@top-level-context G46cf@t))) (G4649@G4645@top-level-context)))))) G3101@imp-collector G318f@top-level-context G4643@itc '#f))) '#f))) (set! G3109@core-library-expander (lambda (G46d1@e G46d2@verify-name) (call-with-values (lambda () (G30f5@parse-library G46d1@e)) (lambda (G46d9@G46d5 G46da@G46d6 G46db@G46d7 G46dc@G46d8) ((lambda (G46e1@b* G46e2@imp* G46e3@exp* G46e4@name*) (call-with-values (lambda () (G30f3@parse-library-name G46e4@name*)) (lambda (G46eb@G46e9 G46ec@G46ea) ((lambda (G46ef@ver G46f0@name) (begin (G46d2@verify-name G46f0@name) (call-with-values (lambda () (G3107@library-body-expander G46f0@name G46e3@exp* G46e2@imp* G46e1@b* '#f)) (lambda (G46fa@G46f3 G46fb@G46f4 G46fc@G46f5 G46fd@G46f6 G46fe@G46f7 G46ff@G46f8 G4700@G46f9) ((lambda (G4708@export-env G4709@export-subst G470a@visit-code G470b@invoke-code G470c@visit-req* G470d@invoke-req* G470e@imp*) (values G46f0@name G46ef@ver G470e@imp* G470d@invoke-req* G470c@visit-req* G470b@invoke-code G470a@visit-code G4709@export-subst G4708@export-env)) G4700@G46f9 G46ff@G46f8 G46fe@G46f7 G46fd@G46f6 G46fc@G46f5 G46fb@G46f4 G46fa@G46f3))))) G46ec@G46ea G46eb@G46e9)))) G46dc@G46d8 G46db@G46d7 G46da@G46d6 G46d9@G46d5))))) (set! G310b@parse-top-level-program (lambda (G4716@e*) ((lambda (G4718@t) ((lambda (G471a@ls/false) (if (if G471a@ls/false (begin '#f (apply (lambda (G471c@import G471d@imp* G471e@b*) (eq? (G3187@syntax->datum G471c@import) 'import)) G471a@ls/false)) '#f) (apply (lambda (G4722@import G4723@imp* G4724@b*) (values G4723@imp* G4724@b*)) G471a@ls/false) ((lambda (G4728@t) ((lambda (G472a@ls/false) (if (if G472a@ls/false (begin '#f (apply (lambda (G472c@import G472d@x G472e@y) (eq? (G3187@syntax->datum G472c@import) 'import)) G472a@ls/false)) '#f) (apply (lambda (G4732@import G4733@x G4734@y) (G3181@syntax-violation 'expander '"invalid syntax of top-level program" (G2e45@syntax-car G4716@e*))) G472a@ls/false) ((lambda (G4738@t) ((lambda (G473a@ls/false) (if G473a@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G473a@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4738@t))) (G308e@syntax-dispatch G4738@t '_))) G4728@t))) (G308e@syntax-dispatch G4728@t '((any . any) . any)))) G4718@t))) (G308e@syntax-dispatch G4718@t '((any . each-any) . each-any)))) G4716@e*))) (set! G310d@top-level-expander (lambda (G473c@e*) (call-with-values (lambda () (G310b@parse-top-level-program G473c@e*)) (lambda (G4740@G473e G4741@G473f) ((lambda (G4744@b* G4745@imp*) (call-with-values (lambda () (G3107@library-body-expander '() '() G4745@imp* G4744@b* '#t)) (lambda (G474f@G4748 G4750@G4749 G4751@G474a G4752@G474b G4753@G474c G4754@G474d G4755@G474e) ((lambda (G475d@export-env G475e@export-subst G475f@visit-code G4760@invoke-code G4761@visit-req* G4762@invoke-req* G4763@imp*) (values G4762@invoke-req* G4760@invoke-code)) G4755@G474e G4754@G474d G4753@G474c G4752@G474b G4751@G474a G4750@G4749 G474f@G4748)))) G4741@G473f G4740@G473e))))) (set! G3113@G310e (make-record-type-descriptor 'env '#f 'G3111 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G3115@G3110 '#f) (set! G3117@G310f (make-record-constructor-descriptor G3113@G310e '#f G3115@G3110)) (set! G311c@env? (record-predicate G3113@G310e)) (set! G311e@make-env (record-constructor G3117@G310f)) (set! G3120@env-names (record-accessor G3113@G310e '0)) (set! G3122@env-labels (record-accessor G3113@G310e '1)) (set! G3124@env-itc (record-accessor G3113@G310e '2)) (set! G3126@set-env-names! (record-mutator G3113@G310e '0)) (set! G3128@set-env-labels! (record-mutator G3113@G310e '1)) (set! G312a@set-env-itc! (record-mutator G3113@G310e '2)) (set! G312c@rp (G299a@G28a2@make-record-printer 'env (lambda (G476b@x G476c@p G476d@wr) (display '"#<environment>" G476c@p)))) (set! G3132@G312d (make-record-type-descriptor 'interaction-env '#f 'G3130 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3134@G312f '#f) (set! G3136@G312e (make-record-constructor-descriptor G3132@G312d '#f G3134@G312f)) (set! G313b@interaction-env? (record-predicate G3132@G312d)) (set! G313d@make-interaction-env (record-constructor G3136@G312e)) (set! G313f@interaction-env-rib (record-accessor G3132@G312d '0)) (set! G3141@interaction-env-r (record-accessor G3132@G312d '1)) (set! G3143@interaction-env-locs (record-accessor G3132@G312d '2)) (set! G3145@set-interaction-env-rib! (record-mutator G3132@G312d '0)) (set! G3147@set-interaction-env-r! (record-mutator G3132@G312d '1)) (set! G3149@set-interaction-env-locs! (record-mutator G3132@G312d '2)) (set! G314b@rp (G299a@G28a2@make-record-printer 'interaction-env (lambda (G4771@x G4772@p G4773@wr) (display '"#<environment>" G4772@p)))) (set! G314d@interaction-environment-symbols (lambda () (G3155@environment-symbols (G318d@interaction-environment)))) (set! G314f@environment-bindings (lambda (G4777@e) (vector->list (vector-map (lambda (G4779@name G477a@label) (G3151@parse-binding (cons G4779@name (G2c3f@G2ad3@imported-label->binding G477a@label)))) (G3120@env-names G4777@e) (G3122@env-labels G4777@e))))) (set! G3151@parse-binding (lambda (G477d@b) (cons (car G477d@b) ((lambda (G477f@t) (if (memv G477f@t '(core-prim global)) 'procedure (if (memv G477f@t '(core-macro macro global-macro)) 'syntax (if (memv G477f@t '($core-rtd)) 'record (if (eq? (car G477d@b) (cadr G477d@b)) 'syntax 'unknown))))) (cadr G477d@b))))) (set! G3153@environment? (lambda (G4781@x) ((lambda (G4783@t) (if G4783@t G4783@t (begin '#f (G313b@interaction-env? G4781@x)))) (G311c@env? G4781@x)))) (set! G3155@environment-symbols (lambda (G4785@x) (if (G311c@env? G4785@x) (vector->list (G3120@env-names G4785@x)) (if (G313b@interaction-env? G4785@x) (map values (G2de0@rib-sym* (G313f@interaction-env-rib G4785@x))) (assertion-violation 'environment-symbols '"not an environment" G4785@x))))) (set! G3157@environment (lambda G4787@imp* ((lambda (G4789@itc) ((lambda (G478d@G478b@imp-collector G478e@G478c@imp-collector) ((lambda (G4791@swap) (dynamic-wind G4791@swap (lambda () (call-with-values (lambda () (G30f7@parse-import-spec* G4787@imp*)) (lambda (G4795@G4793 G4796@G4794) ((lambda (G4799@subst-labels G479a@subst-names) (G311e@make-env G479a@subst-names G4799@subst-labels G4789@itc)) G4796@G4794 G4795@G4793)))) G4791@swap)) (lambda () ((lambda (G479d@t) (begin (G478d@G478b@imp-collector G478e@G478c@imp-collector) (set! G478e@G478c@imp-collector G479d@t))) (G478d@G478b@imp-collector))))) G3101@imp-collector G4789@itc)) (G30fb@make-collector)))) (set! G3159@null-environment (lambda (G479f@n) (begin (if (not (eqv? G479f@n '5)) (assertion-violation 'null-environment '"not 5" G479f@n) (void)) (G3157@environment '(psyntax null-environment-5))))) (set! G315b@scheme-report-environment (lambda (G47a1@n) (begin (if (not (eqv? G47a1@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G47a1@n) (void)) (G3157@environment '(psyntax scheme-report-environment-5))))) (set! G315d@expand (lambda (G47a3@x G47a4@env) (if (G311c@env? G47a4@env) ((lambda (G47a7@rib) ((lambda (G47a9@x G47aa@itc G47ab@rtc G47ac@vtc) ((lambda (G47b1@x) (begin (G2e00@seal-rib! G47a7@rib) (values G47b1@x (G47ab@rtc)))) ((lambda (G47bb@G47b3@top-level-context G47bc@G47b4@inv-collector G47bd@G47b5@vis-collector G47be@G47b6@imp-collector G47bf@G47b7@top-level-context G47c0@G47b8@inv-collector G47c1@G47b9@vis-collector G47c2@G47ba@imp-collector) ((lambda (G47cb@swap) (dynamic-wind G47cb@swap (lambda () (G30b2@chi-expr G47a9@x '() '())) G47cb@swap)) (lambda () (begin ((lambda (G47cd@t) (begin (G47bb@G47b3@top-level-context G47bf@G47b7@top-level-context) (set! G47bf@G47b7@top-level-context G47cd@t))) (G47bb@G47b3@top-level-context)) ((lambda (G47cf@t) (begin (G47bc@G47b4@inv-collector G47c0@G47b8@inv-collector) (set! G47c0@G47b8@inv-collector G47cf@t))) (G47bc@G47b4@inv-collector)) ((lambda (G47d1@t) (begin (G47bd@G47b5@vis-collector G47c1@G47b9@vis-collector) (set! G47c1@G47b9@vis-collector G47d1@t))) (G47bd@G47b5@vis-collector)) ((lambda (G47d3@t) (begin (G47be@G47b6@imp-collector G47c2@G47ba@imp-collector) (set! G47c2@G47ba@imp-collector G47d3@t))) (G47be@G47b6@imp-collector)))))) G318f@top-level-context G30fd@inv-collector G30ff@vis-collector G3101@imp-collector '#f G47ab@rtc G47ac@vtc G47aa@itc))) (G2e15@make-stx G47a3@x G2dbf@top-mark* (list G47a7@rib) '()) (G3124@env-itc G47a4@env) (G30fb@make-collector) (G30fb@make-collector))) (G30f9@make-top-rib (G3120@env-names G47a4@env) (G3122@env-labels G47a4@env))) (if (G313b@interaction-env? G47a4@env) ((lambda (G47d5@rib G47d6@r G47d7@rtc) ((lambda (G47db@x) (call-with-values (lambda () ((lambda (G47e7@G47df@top-level-context G47e8@G47e0@inv-collector G47e9@G47e1@vis-collector G47ea@G47e2@imp-collector G47eb@G47e3@top-level-context G47ec@G47e4@inv-collector G47ed@G47e5@vis-collector G47ee@G47e6@imp-collector) ((lambda (G47f7@swap) (dynamic-wind G47f7@swap (lambda () (G3105@chi-interaction-expr G47db@x G47d5@rib G47d6@r)) G47f7@swap)) (lambda () (begin ((lambda (G47f9@t) (begin (G47e7@G47df@top-level-context G47eb@G47e3@top-level-context) (set! G47eb@G47e3@top-level-context G47f9@t))) (G47e7@G47df@top-level-context)) ((lambda (G47fb@t) (begin (G47e8@G47e0@inv-collector G47ec@G47e4@inv-collector) (set! G47ec@G47e4@inv-collector G47fb@t))) (G47e8@G47e0@inv-collector)) ((lambda (G47fd@t) (begin (G47e9@G47e1@vis-collector G47ed@G47e5@vis-collector) (set! G47ed@G47e5@vis-collector G47fd@t))) (G47e9@G47e1@vis-collector)) ((lambda (G47ff@t) (begin (G47ea@G47e2@imp-collector G47ee@G47e6@imp-collector) (set! G47ee@G47e6@imp-collector G47ff@t))) (G47ea@G47e2@imp-collector)))))) G318f@top-level-context G30fd@inv-collector G30ff@vis-collector G3101@imp-collector G47a4@env G47d7@rtc (G30fb@make-collector) (G30fb@make-collector))) (lambda (G4801@G47dd G4802@G47de) ((lambda (G4805@r^ G4806@e) (begin (G3147@set-interaction-env-r! G47a4@env G4805@r^) (values G4806@e (G47d7@rtc)))) G4802@G47de G4801@G47dd)))) (G2e15@make-stx G47a3@x G2dbf@top-mark* (list G47d5@rib) '()))) (G313f@interaction-env-rib G47a4@env) (G3141@interaction-env-r G47a4@env) (G30fb@make-collector)) (assertion-violation 'expand '"not an environment" G47a4@env))))) (set! G315f@eval (lambda (G4809@x G480a@env) (begin (if (not (G3153@environment? G480a@env)) (error 'eval '"not an environment" G480a@env) (void)) (call-with-values (lambda () (G315d@expand G4809@x G480a@env)) (lambda (G480f@G480d G4810@G480e) ((lambda (G4813@invoke-req* G4814@x) (begin (for-each G2c40@G2ad5@invoke-library G4813@invoke-req*) (eval-core (G2a01@G29a9@expanded->core G4814@x)))) G4810@G480e G480f@G480d)))))) (set! G3161@library-expander (lambda G487c ((lambda (G487d) (if (= G487d '3) (apply (lambda (G4817@x G4818@filename G4819@verify-name) ((lambda (G481e@build-visit-code G4820@visit!) (begin (set! G481e@build-visit-code (lambda (G486a@macro*) (if (null? G486a@macro*) (G2da7@G2d19@build-void) (G2da6@G2d17@build-sequence '#f (map (lambda (G486c@x) ((lambda (G486e@loc G486f@src) (list 'set! G486e@loc G486f@src)) (car G486c@x) (cddr G486c@x))) G486a@macro*))))) (set! G4820@visit! (lambda (G4862@macro*) (for-each (lambda (G4864@x) ((lambda (G4866@loc G4867@proc) (set-symbol-value! G4866@loc G4867@proc)) (car G4864@x) (cadr G4864@x))) G4862@macro*))) (call-with-values (lambda () (G3109@core-library-expander G4817@x G4819@verify-name)) (lambda (G482a@G4821 G482b@G4822 G482c@G4823 G482d@G4824 G482e@G4825 G482f@G4826 G4830@G4827 G4831@G4828 G4832@G4829) ((lambda (G483c@export-env G483d@export-subst G483e@macro* G483f@invoke-code G4840@vis* G4841@inv* G4842@imp* G4843@ver G4844@name) ((lambda (G484e@id G484f@name G4850@ver G4851@imp* G4852@vis* G4853@inv* G4854@visit-proc G4855@invoke-proc G4856@visit-code G4857@invoke-code) (begin (G2c3e@G2ad1@install-library G484e@id G484f@name G4850@ver G4851@imp* G4852@vis* G4853@inv* G483d@export-subst G483c@export-env G4854@visit-proc G4855@invoke-proc G4856@visit-code G4857@invoke-code '#t G4818@filename) (values G484e@id G484f@name G4850@ver G4851@imp* G4852@vis* G4853@inv* G4857@invoke-code G4856@visit-code G483d@export-subst G483c@export-env))) (gensym) G4844@name G4843@ver (map G2c44@G2add@library-spec G4842@imp*) (map G2c44@G2add@library-spec G4840@vis*) (map G2c44@G2add@library-spec G4841@inv*) (lambda () (G4820@visit! G483e@macro*)) (lambda () (eval-core (G2a01@G29a9@expanded->core G483f@invoke-code))) (G481e@build-visit-code G483e@macro*) G483f@invoke-code)) G4832@G4829 G4831@G4828 G4830@G4827 G482f@G4826 G482e@G4825 G482d@G4824 G482c@G4823 G482b@G4822 G482a@G4821))))) '#f '#f)) G487c) (if (= G487d '2) (apply (lambda (G4872@x G4873@filename) (G3161@library-expander G4872@x G4873@filename (lambda (G4876@x) (values)))) G487c) (if (= G487d '1) (apply (lambda (G4878@x) (G3161@library-expander G4878@x '#f (lambda (G487a@x) (values)))) G487c) (error 'apply '"invalid arg count"))))) (length G487c)))) (set! G3163@boot-library-expand (lambda (G487e@x) (call-with-values (lambda () (G3161@library-expander G487e@x)) (lambda (G488a@G4880 G488b@G4881 G488c@G4882 G488d@G4883 G488e@G4884 G488f@G4885 G4890@G4886 G4891@G4887 G4892@G4888 G4893@G4889) ((lambda (G489e@export-env G489f@export-subst G48a0@visit-code G48a1@invoke-code G48a2@inv* G48a3@vis* G48a4@imp* G48a5@ver G48a6@name G48a7@id) (values G48a6@name G48a1@invoke-code G489f@export-subst G489e@export-env)) G4893@G4889 G4892@G4888 G4891@G4887 G4890@G4886 G488f@G4885 G488e@G4884 G488d@G4883 G488c@G4882 G488b@G4881 G488a@G4880))))) (set! G3165@rev-map-append (lambda (G48b2@f G48b3@ls G48b4@ac) (if (null? G48b3@ls) G48b4@ac (G3165@rev-map-append G48b2@f (cdr G48b3@ls) (cons (G48b2@f (car G48b3@ls)) G48b4@ac))))) (set! G3167@build-exports (lambda (G48b8@lex*+loc* G48b9@init*) (G2da6@G2d17@build-sequence '#f (cons (G2da7@G2d19@build-void) (G3165@rev-map-append (lambda (G48bc@x) (list 'set! (cdr G48bc@x) (car G48bc@x))) G48b8@lex*+loc* G48b9@init*))))) (set! G3169@make-export-subst (lambda (G48be@name* G48bf@id*) (map (lambda (G48c2@name G48c3@id) ((lambda (G48c6@label) (begin (if (not G48c6@label) (G3181@syntax-violation '#f '"cannot export unbound identifier" G48c3@id) (void)) (cons G48c2@name G48c6@label))) (G2e65@id->label G48c3@id))) G48be@name* G48bf@id*))) (set! G316b@make-export-env/macros (lambda (G48c8@lex* G48c9@loc* G48ca@r) ((lambda (G48cf@lookup) (begin (set! G48cf@lookup (lambda (G48ec@x) ((letrec ((G48ee@f (lambda (G48f0@x G48f1@lex* G48f2@loc*) (if (pair? G48f1@lex*) (if (eq? G48f0@x (car G48f1@lex*)) (car G48f2@loc*) (G48ee@f G48f0@x (cdr G48f1@lex*) (cdr G48f2@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48ee@f) G48ec@x G48c8@lex* G48c9@loc*))) ((letrec ((G48d0@f (lambda (G48d2@r G48d3@env G48d4@global* G48d5@macro*) (if (null? G48d2@r) (values G48d3@env G48d4@global* G48d5@macro*) ((lambda (G48da@x) ((lambda (G48dc@label G48dd@b) ((lambda (G48e0@t) (if (memv G48e0@t '(lexical)) ((lambda (G48e2@v) ((lambda (G48e4@loc G48e5@type) (G48d0@f (cdr G48d2@r) (cons (cons* G48dc@label G48e5@type G48e4@loc) G48d3@env) (cons (cons (G301e@lexical-var G48e2@v) G48e4@loc) G48d4@global*) G48d5@macro*)) (G48cf@lookup (G301e@lexical-var G48e2@v)) (if (G3020@lexical-mutable? G48e2@v) 'mutable 'global))) (G2e6f@binding-value G48dd@b)) (if (memv G48e0@t '(local-macro)) ((lambda (G48e8@loc) (G48d0@f (cdr G48d2@r) (cons (cons* G48dc@label 'global-macro G48e8@loc) G48d3@env) G48d4@global* (cons (cons G48e8@loc (G2e6f@binding-value G48dd@b)) G48d5@macro*))) (gensym)) (if (memv G48e0@t '(local-macro!)) ((lambda (G48ea@loc) (G48d0@f (cdr G48d2@r) (cons (cons* G48dc@label 'global-macro! G48ea@loc) G48d3@env) G48d4@global* (cons (cons G48ea@loc (G2e6f@binding-value G48dd@b)) G48d5@macro*))) (gensym)) (if (memv G48e0@t '($rtd $module)) (G48d0@f (cdr G48d2@r) (cons G48da@x G48d3@env) G48d4@global* G48d5@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e6d@binding-type G48dd@b) (G2e6f@binding-value G48dd@b))))))) (G2e6d@binding-type G48dd@b))) (car G48da@x) (cdr G48da@x))) (car G48d2@r)))))) G48d0@f) G48ca@r '() '() '()))) '#f))) (set! G316d@generate-temporaries (lambda (G48f6@ls) ((lambda (G48f8@t) ((lambda (G48fa@ls/false) (if G48fa@ls/false (apply (lambda (G48fc@ls) (map (lambda (G48fe@x) (G2e15@make-stx ((lambda (G4900@x) (if ((lambda (G4902@t) (if G4902@t G4902@t (begin '#f (string? G4900@x)))) (symbol? G4900@x)) (gensym G4900@x) (gensym 't))) (G3187@syntax->datum G48fe@x)) G2dbf@top-mark* '() '())) G48fc@ls)) G48fa@ls/false) ((lambda (G4904@t) ((lambda (G4906@ls/false) (if G4906@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4906@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G4904@t))) (G308e@syntax-dispatch G4904@t '_))) G48f8@t))) (G308e@syntax-dispatch G48f8@t 'each-any))) G48f6@ls))) (set! G316f@free-identifier=? (lambda (G4908@x G4909@y) (if (G2e4b@id? G4908@x) (if (G2e4b@id? G4909@y) (G2e53@free-id=? G4908@x G4909@y) (assertion-violation 'free-identifier=? '"not an identifier" G4909@y)) (assertion-violation 'free-identifier=? '"not an identifier" G4908@x)))) (set! G3171@bound-identifier=? (lambda (G490c@x G490d@y) (if (G2e4b@id? G490c@x) (if (G2e4b@id? G490d@y) (G2e51@bound-id=? G490c@x G490d@y) (assertion-violation 'bound-identifier=? '"not an identifier" G490d@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G490c@x)))) (set! G3173@make-source-condition (lambda (G4910@x) ((lambda (G491a@G4915 G491c@G4917 G491e@G4916 G4923@G4914 G4925@make-source-condition G4927@G4912 G4929@G4913 G492b@source-condition? G492d@source-filename G492f@source-character) (begin (set! G491a@G4915 (make-record-type-descriptor '&source-information &condition-rtd 'G4918 '#f '#f '#((immutable file-name) (immutable character)))) (set! G491c@G4917 '#f) (set! G491e@G4916 (make-record-constructor-descriptor G491a@G4915 &condition-rcd G491c@G4917)) (set! G4923@G4914 (record-predicate G491a@G4915)) (set! G4925@make-source-condition (record-constructor G491e@G4916)) (set! G4927@G4912 (record-accessor G491a@G4915 '0)) (set! G4929@G4913 (record-accessor G491a@G4915 '1)) (set! G492b@source-condition? (condition-predicate G491a@G4915)) (set! G492d@source-filename (condition-accessor G491a@G4915 G4927@G4912)) (set! G492f@source-character (condition-accessor G491a@G4915 G4929@G4913)) (if (pair? G4910@x) (G4925@make-source-condition (car G4910@x) (cdr G4910@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3175@extract-position-condition (lambda (G4930@x) (G3173@make-source-condition (G3177@expression-position G4930@x)))) (set! G3177@expression-position (lambda (G4932@x) (if (G2e13@stx? G4932@x) (begin '#f ((lambda (G4934@x) (if (G2992@G2892@annotation? G4934@x) (begin '#f (G2993@G2894@annotation-source G4934@x)) '#f)) (G2e17@stx-expr G4932@x))) '#f))) (set! G3179@assertion-error (lambda (G4936@expr G4937@pos) (raise (condition (G4c56@G4b60@make-assertion-violation) (G4c64@G4b8e@make-who-condition 'assert) (G4c36@G4af8@make-message-condition '"assertion failed") (G4c5c@G4b75@make-irritants-condition (list G4936@expr)) (G3173@make-source-condition G4937@pos))))) (set! G317b@syntax-error (lambda (G493a@x . G493c@args) (begin (if (not (for-all string? G493c@args)) (assertion-violation 'syntax-error '"invalid argument" G493c@args) (void)) (raise (condition (G4c36@G4af8@make-message-condition (if (null? G493c@args) '"invalid syntax" (apply string-append G493c@args))) (G4c7e@G4be4@make-syntax-violation (G3187@syntax->datum G493a@x) '#f) (G3175@extract-position-condition G493a@x) (G317d@extract-trace G493a@x)))))) (set! G317d@extract-trace (lambda (G493e@x) ((lambda (G4947@G4942 G4949@G4944 G494b@G4943 G4950@G4941 G4952@make-trace G4954@G4940 G4956@trace? G4958@trace-form) (begin (set! G4947@G4942 (make-record-type-descriptor '&trace &condition-rtd 'G4945 '#f '#f '#((immutable form)))) (set! G4949@G4944 '#f) (set! G494b@G4943 (make-record-constructor-descriptor G4947@G4942 &condition-rcd G4949@G4944)) (set! G4950@G4941 (record-predicate G4947@G4942)) (set! G4952@make-trace (record-constructor G494b@G4943)) (set! G4954@G4940 (record-accessor G4947@G4942 '0)) (set! G4956@trace? (condition-predicate G4947@G4942)) (set! G4958@trace-form (condition-accessor G4947@G4942 G4954@G4940)) ((letrec ((G4959@f (lambda (G495b@x) (if (G2e13@stx? G495b@x) (apply condition (G4952@make-trace G495b@x) (map G4959@f (G2e1d@stx-ae* G495b@x))) (if (G2992@G2892@annotation? G495b@x) (G4952@make-trace (G2e15@make-stx G495b@x '() '() '())) (condition)))))) G4959@f) G493e@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G317f@syntax-violation* (lambda (G495d@who G495e@msg G495f@form G4960@condition-object) (begin (if (not (string? G495e@msg)) (assertion-violation 'syntax-violation '"message is not a string" G495e@msg) (void)) ((lambda (G4965@who) (raise (condition (if G4965@who (G4c64@G4b8e@make-who-condition G4965@who) (condition)) (G4c36@G4af8@make-message-condition G495e@msg) G4960@condition-object (G3175@extract-position-condition G495f@form) (G317d@extract-trace G495f@form)))) (if ((lambda (G4967@t) (if G4967@t G4967@t (begin '#f (symbol? G495d@who)))) (string? G495d@who)) G495d@who (if (not G495d@who) ((lambda (G4969@t) ((lambda (G496b@ls/false) (if (if G496b@ls/false (begin '#f (apply (lambda (G496d@id) (G2e4b@id? G496d@id)) G496b@ls/false)) '#f) (apply (lambda (G496f@id) (G3187@syntax->datum G496f@id)) G496b@ls/false) ((lambda (G4971@t) ((lambda (G4973@ls/false) (if (if G4973@ls/false (begin '#f (apply (lambda (G4975@id G4976@rest) (G2e4b@id? G4975@id)) G4973@ls/false)) '#f) (apply (lambda (G4979@id G497a@rest) (G3187@syntax->datum G4979@id)) G4973@ls/false) ((lambda (G497d@t) ((lambda (G497f@ls/false) (if G497f@ls/false (apply (lambda () '#f) G497f@ls/false) (G3181@syntax-violation '#f '"invalid syntax" G497d@t))) (G308e@syntax-dispatch G497d@t '_))) G4971@t))) (G308e@syntax-dispatch G4971@t '(any . any)))) G4969@t))) (G308e@syntax-dispatch G4969@t 'any))) G495f@form) (assertion-violation 'syntax-violation '"invalid who argument" G495d@who))))))) (set! G3181@syntax-violation (lambda G498f ((lambda (G4990) (if (= G4990 '3) (apply (lambda (G4981@who G4982@msg G4983@form) (G3181@syntax-violation G4981@who G4982@msg G4983@form '#f)) G498f) (if (= G4990 '4) (apply (lambda (G4987@who G4988@msg G4989@form G498a@subform) (G317f@syntax-violation* G4987@who G4988@msg G4989@form (G4c7e@G4be4@make-syntax-violation (G3187@syntax->datum G4989@form) (G3187@syntax->datum G498a@subform)))) G498f) (error 'apply '"invalid arg count")))) (length G498f)))) (set! G3183@identifier? (lambda (G4991@x) (G2e4b@id? G4991@x))) (set! G3185@datum->syntax (lambda (G4993@id G4994@datum) (if (G2e4b@id? G4993@id) (G2e29@datum->stx G4993@id G4994@datum) (assertion-violation 'datum->syntax '"not an identifier" G4993@id)))) (set! G3187@syntax->datum (lambda (G4997@x) (G2e61@stx->datum G4997@x))) (set! G3189@compile-r6rs-top-level (lambda (G4999@x*) (call-with-values (lambda () (G310d@top-level-expander G4999@x*)) (lambda (G499d@G499b G499e@G499c) ((lambda (G49a1@invoke-code G49a2@lib*) (lambda () (begin (for-each G2c40@G2ad5@invoke-library G49a2@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2a01@G29a9@expanded->core G49a1@invoke-code)) (void)) (eval-core (G2a01@G29a9@expanded->core G49a1@invoke-code))))) G499e@G499c G499d@G499b))))) (set! G318b@pre-compile-r6rs-top-level (lambda (G49a5@x*) (call-with-values (lambda () (G310d@top-level-expander G49a5@x*)) (lambda (G49a9@G49a7 G49aa@G49a8) ((lambda (G49ad@invoke-code G49ae@lib*) (begin (for-each G2c40@G2ad5@invoke-library G49ae@lib*) (G299b@G28a4@compile-core (G2a01@G29a9@expanded->core G49ad@invoke-code)))) G49aa@G49a8 G49a9@G49a7))))) (set! G318d@interaction-environment ((lambda (G49b1@the-env) (lambda () ((lambda (G49b3@t) (if G49b3@t G49b3@t (begin '#f ((lambda (G49b5@lib G49b6@rib) (begin ((lambda (G49b9@subst) (begin (G2dea@set-rib-sym*! G49b6@rib (map car G49b9@subst)) (G2dec@set-rib-mark**! G49b6@rib (map (lambda (G49bb@x) G2dbf@top-mark*) G49b9@subst)) (G2dee@set-rib-label*! G49b6@rib (map cdr G49b9@subst)))) (G2c15@G2a7f@library-subst G49b5@lib)) ((lambda (G49bd@env) (begin (set! G49b1@the-env G49bd@env) G49bd@env)) (G313d@make-interaction-env G49b6@rib '() '())))) (G2c39@G2ac7@find-library-by-name '(mosh interaction)) (G2df6@make-cache-rib))))) G49b1@the-env))) '#f)) (set! G318f@top-level-context (G299d@G28a8@make-parameter '#f)) (begin (set! G4acc@G318f@top-level-context G318f@top-level-context) (set! G4acb@G318d@interaction-environment G318d@interaction-environment) (set! G4aca@G318b@pre-compile-r6rs-top-level G318b@pre-compile-r6rs-top-level) (set! G4ac9@G3189@compile-r6rs-top-level G3189@compile-r6rs-top-level) (set! G4ac8@G3187@syntax->datum G3187@syntax->datum) (set! G4ac7@G3185@datum->syntax G3185@datum->syntax) (set! G4ac6@G3183@identifier? G3183@identifier?) (set! G4ac5@G3181@syntax-violation G3181@syntax-violation) (set! G4ac4@G317f@syntax-violation* G317f@syntax-violation*) (set! G4ac3@G317d@extract-trace G317d@extract-trace) (set! G4ac2@G317b@syntax-error G317b@syntax-error) (set! G4ac1@G3179@assertion-error G3179@assertion-error) (set! G4ac0@G3177@expression-position G3177@expression-position) (set! G4abf@G3175@extract-position-condition G3175@extract-position-condition) (set! G4abe@G3173@make-source-condition G3173@make-source-condition) (set! G4abd@G3171@bound-identifier=? G3171@bound-identifier=?) (set! G4abc@G316f@free-identifier=? G316f@free-identifier=?) (set! G4abb@G316d@generate-temporaries G316d@generate-temporaries) (set! G4aba@G316b@make-export-env/macros G316b@make-export-env/macros) (set! G4ab9@G3169@make-export-subst G3169@make-export-subst) (set! G4ab8@G3167@build-exports G3167@build-exports) (set! G4ab7@G3165@rev-map-append G3165@rev-map-append) (set! G4ab6@G3163@boot-library-expand G3163@boot-library-expand) (set! G4ab5@G3161@library-expander G3161@library-expander) (set! G4ab4@G315f@eval G315f@eval) (set! G4ab3@G315d@expand G315d@expand) (set! G4ab2@G315b@scheme-report-environment G315b@scheme-report-environment) (set! G4ab1@G3159@null-environment G3159@null-environment) (set! G4ab0@G3157@environment G3157@environment) (set! G4aaf@G3155@environment-symbols G3155@environment-symbols) (set! G4aae@G3153@environment? G3153@environment?) (set! G4aad@G3151@parse-binding G3151@parse-binding) (set! G4aac@G314f@environment-bindings G314f@environment-bindings) (set! G4aab@G314d@interaction-environment-symbols G314d@interaction-environment-symbols) (set! G4aaa@G314b@rp G314b@rp) (set! G4aa9@G3149@set-interaction-env-locs! G3149@set-interaction-env-locs!) (set! G4aa8@G3147@set-interaction-env-r! G3147@set-interaction-env-r!) (set! G4aa7@G3145@set-interaction-env-rib! G3145@set-interaction-env-rib!) (set! G4aa6@G3143@interaction-env-locs G3143@interaction-env-locs) (set! G4aa5@G3141@interaction-env-r G3141@interaction-env-r) (set! G4aa4@G313f@interaction-env-rib G313f@interaction-env-rib) (set! G4aa3@G313d@make-interaction-env G313d@make-interaction-env) (set! G4aa2@G313b@interaction-env? G313b@interaction-env?) (set! G4aa1@G3136@G312e G3136@G312e) (set! G4aa0@G3134@G312f G3134@G312f) (set! G4a9f@G3132@G312d G3132@G312d) (set! G4a9e@G312c@rp G312c@rp) (set! G4a9d@G312a@set-env-itc! G312a@set-env-itc!) (set! G4a9c@G3128@set-env-labels! G3128@set-env-labels!) (set! G4a9b@G3126@set-env-names! G3126@set-env-names!) (set! G4a9a@G3124@env-itc G3124@env-itc) (set! G4a99@G3122@env-labels G3122@env-labels) (set! G4a98@G3120@env-names G3120@env-names) (set! G4a97@G311e@make-env G311e@make-env) (set! G4a96@G311c@env? G311c@env?) (set! G4a95@G3117@G310f G3117@G310f) (set! G4a94@G3115@G3110 G3115@G3110) (set! G4a93@G3113@G310e G3113@G310e) (set! G4a92@G310d@top-level-expander G310d@top-level-expander) (set! G4a91@G310b@parse-top-level-program G310b@parse-top-level-program) (set! G4a90@G3109@core-library-expander G3109@core-library-expander) (set! G4a8f@G3107@library-body-expander G3107@library-body-expander) (set! G4a8e@G3105@chi-interaction-expr G3105@chi-interaction-expr) (set! G4a8d@G3103@chi-library-internal G3103@chi-library-internal) (set! G4a8c@G3101@imp-collector G3101@imp-collector) (set! G4a8b@G30ff@vis-collector G30ff@vis-collector) (set! G4a8a@G30fd@inv-collector G30fd@inv-collector) (set! G4a89@G30fb@make-collector G30fb@make-collector) (set! G4a88@G30f9@make-top-rib G30f9@make-top-rib) (set! G4a87@G30f7@parse-import-spec* G30f7@parse-import-spec*) (set! G4a86@G30f5@parse-library G30f5@parse-library) (set! G4a85@G30f3@parse-library-name G30f3@parse-library-name) (set! G4a84@G30f1@parse-exports G30f1@parse-exports) (set! G4a83@G30ef@expand-transformer G30ef@expand-transformer) (set! G4a82@G30ed@chi-body* G30ed@chi-body*) (set! G4a81@G30eb@chi-internal-module G30eb@chi-internal-module) (set! G4a80@G30e9@module-interface-exp-id* G30e9@module-interface-exp-id*) (set! G4a7f@G30e7@set-module-interface-exp-lab-vec! G30e7@set-module-interface-exp-lab-vec!) (set! G4a7e@G30e5@set-module-interface-exp-id-vec! G30e5@set-module-interface-exp-id-vec!) (set! G4a7d@G30e3@set-module-interface-first-mark! G30e3@set-module-interface-first-mark!) (set! G4a7c@G30e1@module-interface-exp-lab-vec G30e1@module-interface-exp-lab-vec) (set! G4a7b@G30df@module-interface-exp-id-vec G30df@module-interface-exp-id-vec) (set! G4a7a@G30dd@module-interface-first-mark G30dd@module-interface-first-mark) (set! G4a79@G30db@make-module-interface G30db@make-module-interface) (set! G4a78@G30d9@module-interface? G30d9@module-interface?) (set! G4a77@G30d4@G30cc G30d4@G30cc) (set! G4a76@G30d2@G30cd G30d2@G30cd) (set! G4a75@G30d0@G30cb G30d0@G30cb) (set! G4a74@G30ca@parse-module G30ca@parse-module) (set! G4a73@G30c8@chi-internal G30c8@chi-internal) (set! G4a72@G30c6@find-dups G30c6@find-dups) (set! G4a71@G30c4@find-bound=? G30c4@find-bound=?) (set! G4a70@G30c2@chi-rhs* G30c2@chi-rhs*) (set! G4a6f@G30c0@expand-interaction-rhs*/init* G30c0@expand-interaction-rhs*/init*) (set! G4a6e@G30be@chi-rhs G30be@chi-rhs) (set! G4a6d@G30bc@chi-defun G30bc@chi-defun) (set! G4a6c@G30ba@chi-lambda-clause* G30ba@chi-lambda-clause*) (set! G4a6b@G30b8@chi-lambda-clause G30b8@chi-lambda-clause) (set! G4a6a@G30b6@verify-formals G30b6@verify-formals) (set! G4a69@G30b4@chi-set! G30b4@chi-set!) (set! G4a68@G30b2@chi-expr G30b2@chi-expr) (set! G4a67@G30b0@chi-application G30b0@chi-application) (set! G4a66@G30ae@chi-expr* G30ae@chi-expr*) (set! G4a65@G30ac@chi-global-macro G30ac@chi-global-macro) (set! G4a64@G30aa@chi-local-macro G30aa@chi-local-macro) (set! G4a63@G30a8@chi-macro G30a8@chi-macro) (set! G4a62@G30a6@do-macro-call G30a6@do-macro-call) (set! G4a61@G30a4@local-macro-transformer G30a4@local-macro-transformer) (set! G4a60@G30a2@macro-transformer G30a2@macro-transformer) (set! G4a5f@G30a0@symbol-macro G30a0@symbol-macro) (set! G4a5e@G309e@file-options-macro G309e@file-options-macro) (set! G4a5d@G309c@core-macro-transformer G309c@core-macro-transformer) (set! G4a5c@G309a@syntax-transformer G309a@syntax-transformer) (set! G4a5b@G3098@ellipsis-map G3098@ellipsis-map) (set! G4a5a@G3096@syntax-case-transformer G3096@syntax-case-transformer) (set! G4a59@G3094@verify-literals G3094@verify-literals) (set! G4a58@G3092@underscore? G3092@underscore?) (set! G4a57@G3090@ellipsis? G3090@ellipsis?) (set! G4a56@G308e@syntax-dispatch G308e@syntax-dispatch) (set! G4a55@G308c@convert-pattern G308c@convert-pattern) (set! G4a54@G308a@foreign-call-transformer G308a@foreign-call-transformer) (set! G4a53@G3088@parameterize-macro G3088@parameterize-macro) (set! G4a52@G3086@incorrect-usage-macro G3086@incorrect-usage-macro) (set! G4a51@G3084@define-condition-type-macro G3084@define-condition-type-macro) (set! G4a50@G3082@define-record-type-macro G3082@define-record-type-macro) (set! G4a4f@G3080@define-struct-macro G3080@define-struct-macro) (set! G4a4e@G307e@quasisyntax-macro G307e@quasisyntax-macro) (set! G4a4d@G307c@quasiquote-macro G307c@quasiquote-macro) (set! G4a4c@G307a@syntax-rules-macro G307a@syntax-rules-macro) (set! G4a4b@G3078@include-into-macro G3078@include-into-macro) (set! G4a4a@G3076@include-macro G3076@include-macro) (set! G4a49@G3074@do-include G3074@do-include) (set! G4a48@G3072@cond-macro G3072@cond-macro) (set! G4a47@G3070@and-macro G3070@and-macro) (set! G4a46@G306e@or-macro G306e@or-macro) (set! G4a45@G306c@let*-macro G306c@let*-macro) (set! G4a44@G306a@do-macro G306a@do-macro) (set! G4a43@G3068@identifier-syntax-macro G3068@identifier-syntax-macro) (set! G4a42@G3066@endianness-macro G3066@endianness-macro) (set! G4a41@G3064@assert-macro G3064@assert-macro) (set! G4a40@G3062@delay-macro G3062@delay-macro) (set! G4a3f@G3060@time-macro G3060@time-macro) (set! G4a3e@G305e@define-enumeration-macro G305e@define-enumeration-macro) (set! G4a3d@G305c@guard-macro G305c@guard-macro) (set! G4a3c@G305a@trace-letrec-syntax-macro G305a@trace-letrec-syntax-macro) (set! G4a3b@G3058@trace-let-syntax-macro G3058@trace-let-syntax-macro) (set! G4a3a@G3056@trace-let/rec-syntax G3056@trace-let/rec-syntax) (set! G4a39@G3054@trace-define-syntax-macro G3054@trace-define-syntax-macro) (set! G4a38@G3052@trace-define-macro G3052@trace-define-macro) (set! G4a37@G3050@trace-lambda-macro G3050@trace-lambda-macro) (set! G4a36@G304e@let*-values-macro G304e@let*-values-macro) (set! G4a35@G304c@let-values-macro G304c@let-values-macro) (set! G4a34@G304a@let-macro G304a@let-macro) (set! G4a33@G3048@invalid-fmls-error G3048@invalid-fmls-error) (set! G4a32@G3046@with-syntax-macro G3046@with-syntax-macro) (set! G4a31@G3044@bless G3044@bless) (set! G4a30@G3042@lambda-transformer G3042@lambda-transformer) (set! G4a2f@G3040@case-lambda-transformer G3040@case-lambda-transformer) (set! G4a2e@G303e@quote-transformer G303e@quote-transformer) (set! G4a2d@G303c@case-macro G303c@case-macro) (set! G4a2c@G303a@if-transformer G303a@if-transformer) (set! G4a2b@G3038@unless-macro G3038@unless-macro) (set! G4a2a@G3036@when-macro G3036@when-macro) (set! G4a29@G3034@record-constructor-descriptor-transformer G3034@record-constructor-descriptor-transformer) (set! G4a28@G3032@record-type-descriptor-transformer G3032@record-type-descriptor-transformer) (set! G4a27@G3030@type-descriptor-transformer G3030@type-descriptor-transformer) (set! G4a26@G302e@fluid-let-syntax-transformer G302e@fluid-let-syntax-transformer) (set! G4a25@G302c@letrec*-transformer G302c@letrec*-transformer) (set! G4a24@G302a@letrec-transformer G302a@letrec-transformer) (set! G4a23@G3028@letrec-helper G3028@letrec-helper) (set! G4a22@G3026@add-lexicals G3026@add-lexicals) (set! G4a21@G3024@add-lexical G3024@add-lexical) (set! G4a20@G3022@set-lexical-mutable! G3022@set-lexical-mutable!) (set! G4a1f@G3020@lexical-mutable? G3020@lexical-mutable?) (set! G4a1e@G301e@lexical-var G301e@lexical-var) (set! G4a1d@G301c@scheme-stx G301c@scheme-stx) (set! G4a1c@G301a@scheme-stx-hashtable G301a@scheme-stx-hashtable) (set! G4a1b@G3018@parse-define-syntax G3018@parse-define-syntax) (set! G4a1a@G3016@parse-define G3016@parse-define) (set! G4a19@G2e92@make-eval-transformer G2e92@make-eval-transformer) (set! G4a18@G2e90@variable-transformer-procedure G2e90@variable-transformer-procedure) (set! G4a17@G2e8e@variable-transformer? G2e8e@variable-transformer?) (set! G4a16@G2e8c@make-variable-transformer G2e8c@make-variable-transformer) (set! G4a15@G2e8a@sanitize-binding G2e8a@sanitize-binding) (set! G4a14@G2e73@syntax-type G2e73@syntax-type) (set! G4a13@G2e71@raise-unbound-error G2e71@raise-unbound-error) (set! G4a12@G2e6f@binding-value G2e6f@binding-value) (set! G4a11@G2e6d@binding-type G2e6d@binding-type) (set! G4a10@G2e6b@make-binding G2e6b@make-binding) (set! G4a0f@G2e69@label->binding G2e69@label->binding) (set! G4a0e@G2e67@id->real-label G2e67@id->real-label) (set! G4a0d@G2e65@id->label G2e65@id->label) (set! G4a0c@G2e63@same-marks*? G2e63@same-marks*?) (set! G4a0b@G2e61@stx->datum G2e61@stx->datum) (set! G4a0a@G2e5f@strip G2e5f@strip) (set! G4a09@G2e5d@strip-annotations G2e5d@strip-annotations) (set! G4a08@G2e5b@self-evaluating? G2e5b@self-evaluating?) (set! G4a07@G2e59@bound-id-member? G2e59@bound-id-member?) (set! G4a06@G2e57@distinct-bound-ids? G2e57@distinct-bound-ids?) (set! G4a05@G2e55@valid-bound-ids? G2e55@valid-bound-ids?) (set! G4a04@G2e53@free-id=? G2e53@free-id=?) (set! G4a03@G2e51@bound-id=? G2e51@bound-id=?) (set! G4a02@G2e4f@same-marks? G2e4f@same-marks?) (set! G4a01@G2e4d@id->sym G2e4d@id->sym) (set! G4a00@G2e4b@id? G2e4b@id?) (set! G49ff@G2e49@syntax->list G2e49@syntax->list) (set! G49fe@G2e47@syntax-cdr G2e47@syntax-cdr) (set! G49fd@G2e45@syntax-car G2e45@syntax-car) (set! G49fc@G2e43@syntax-list? G2e43@syntax-list?) (set! G49fb@G2e41@syntax-null? G2e41@syntax-null?) (set! G49fa@G2e3f@syntax-vector? G2e3f@syntax-vector?) (set! G49f9@G2e3d@syntax-pair? G2e3d@syntax-pair?) (set! G49f8@G2e3b@syntax-vector->list G2e3b@syntax-vector->list) (set! G49f7@G2e39@syntax-kind? G2e39@syntax-kind?) (set! G49f6@G2e37@add-subst G2e37@add-subst) (set! G49f5@G2e35@add-mark G2e35@add-mark) (set! G49f4@G2e33@mkstx G2e33@mkstx) (set! G49f3@G2e31@join-wraps G2e31@join-wraps) (set! G49f2@G2e2f@anti-mark? G2e2f@anti-mark?) (set! G49f1@G2e2d@anti-mark G2e2d@anti-mark) (set! G49f0@G2e2b@gen-mark G2e2b@gen-mark) (set! G49ef@G2e29@datum->stx G2e29@datum->stx) (set! G49ee@G2e27@rp G2e27@rp) (set! G49ed@G2e25@set-stx-ae*! G2e25@set-stx-ae*!) (set! G49ec@G2e23@set-stx-subst*! G2e23@set-stx-subst*!) (set! G49eb@G2e21@set-stx-mark*! G2e21@set-stx-mark*!) (set! G49ea@G2e1f@set-stx-expr! G2e1f@set-stx-expr!) (set! G49e9@G2e1d@stx-ae* G2e1d@stx-ae*) (set! G49e8@G2e1b@stx-subst* G2e1b@stx-subst*) (set! G49e7@G2e19@stx-mark* G2e19@stx-mark*) (set! G49e6@G2e17@stx-expr G2e17@stx-expr) (set! G49e5@G2e15@make-stx G2e15@make-stx) (set! G49e4@G2e13@stx? G2e13@stx?) (set! G49e3@G2e0e@G2e06 G2e0e@G2e06) (set! G49e2@G2e0c@G2e07 G2e0c@G2e07) (set! G49e1@G2e0a@G2e05 G2e0a@G2e05) (set! G49e0@G2e04@make-full-rib G2e04@make-full-rib) (set! G49df@G2e02@unseal-rib! G2e02@unseal-rib!) (set! G49de@G2e00@seal-rib! G2e00@seal-rib!) (set! G49dd@G2dfe@make-rib-map G2dfe@make-rib-map) (set! G49dc@G2dfc@extend-rib/nc! G2dfc@extend-rib/nc!) (set! G49db@G2dfa@extend-rib! G2dfa@extend-rib!) (set! G49da@G2df8@find-label G2df8@find-label) (set! G49d9@G2df6@make-cache-rib G2df6@make-cache-rib) (set! G49d8@G2df4@make-empty-rib G2df4@make-empty-rib) (set! G49d7@G2df2@set-rib-cache! G2df2@set-rib-cache!) (set! G49d6@G2df0@set-rib-sealed/freq! G2df0@set-rib-sealed/freq!) (set! G49d5@G2dee@set-rib-label*! G2dee@set-rib-label*!) (set! G49d4@G2dec@set-rib-mark**! G2dec@set-rib-mark**!) (set! G49d3@G2dea@set-rib-sym*! G2dea@set-rib-sym*!) (set! G49d2@G2de8@rib-cache G2de8@rib-cache) (set! G49d1@G2de6@rib-sealed/freq G2de6@rib-sealed/freq) (set! G49d0@G2de4@rib-label* G2de4@rib-label*) (set! G49cf@G2de2@rib-mark** G2de2@rib-mark**) (set! G49ce@G2de0@rib-sym* G2de0@rib-sym*) (set! G49cd@G2dde@make-rib G2dde@make-rib) (set! G49cc@G2ddc@rib? G2ddc@rib?) (set! G49cb@G2dd7@G2dcf G2dd7@G2dcf) (set! G49ca@G2dd5@G2dd0 G2dd5@G2dd0) (set! G49c9@G2dd3@G2dce G2dd3@G2dce) (set! G49c8@G2dcd@gen-define-label G2dcd@gen-define-label) (set! G49c7@G2dcb@gen-define-label+loc G2dcb@gen-define-label+loc) (set! G49c6@G2dc9@gen-top-level-label G2dc9@gen-top-level-label) (set! G49c5@G2dc7@gen-label G2dc7@gen-label) (set! G49c4@G2dc5@gen-global G2dc5@gen-global) (set! G49c3@G2dc3@gen-lexical G2dc3@gen-lexical) (set! G49c2@G2dc1@top-marked? G2dc1@top-marked?) (set! G49c1@G2dbf@top-mark* G2dbf@top-mark*) (set! G49c0@G2dba@set-union G2dba@set-union) (set! G49bf@G2db8@set-cons G2db8@set-cons) (G2c36@G2ac1@current-library-expander G3161@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ad6@G4ad1 G4ad8@G4ad3 G4ada@G4ad2 G4adf@&condition? G4ae1@make-&condition G4ae3@&condition-rtd G4ae5@&condition-rcd G4aed@G4ae8 G4aef@G4aea G4af1@G4ae9 G4af6@G4ae7 G4af8@make-message-condition G4afa@G4ae6 G4afc@message-condition? G4afe@condition-message G4b05@G4b00 G4b07@G4b02 G4b09@G4b01 G4b0e@G4aff G4b10@make-warning G4b12@warning? G4b19@G4b14 G4b1b@G4b16 G4b1d@G4b15 G4b22@G4b13 G4b24@make-serious-condition G4b26@serious-condition? G4b2d@G4b28 G4b2f@G4b2a G4b31@G4b29 G4b36@G4b27 G4b38@make-error G4b3a@error? G4b41@G4b3c G4b43@G4b3e G4b45@G4b3d G4b4a@G4b3b G4b4c@make-violation G4b4e@violation? G4b55@G4b50 G4b57@G4b52 G4b59@G4b51 G4b5e@G4b4f G4b60@make-assertion-violation G4b62@assertion-violation? G4b6a@G4b65 G4b6c@G4b67 G4b6e@G4b66 G4b73@G4b64 G4b75@make-irritants-condition G4b77@G4b63 G4b79@irritants-condition? G4b7b@condition-irritants G4b83@G4b7e G4b85@G4b80 G4b87@G4b7f G4b8c@G4b7d G4b8e@make-who-condition G4b90@G4b7c G4b92@who-condition? G4b94@condition-who G4b9b@G4b96 G4b9d@G4b98 G4b9f@G4b97 G4ba4@G4b95 G4ba6@make-non-continuable-violation G4ba8@non-continuable-violation? G4baf@G4baa G4bb1@G4bac G4bb3@G4bab G4bb8@G4ba9 G4bba@make-implementation-restriction-violation G4bbc@implementation-restriction-violation? G4bc3@G4bbe G4bc5@G4bc0 G4bc7@G4bbf G4bcc@G4bbd G4bce@make-lexical-violation G4bd0@lexical-violation? G4bd9@G4bd4 G4bdb@G4bd6 G4bdd@G4bd5 G4be2@G4bd3 G4be4@make-syntax-violation G4be6@G4bd1 G4be8@G4bd2 G4bea@syntax-violation? G4bec@syntax-violation-form G4bee@syntax-violation-subform G4bf5@G4bf0 G4bf7@G4bf2 G4bf9@G4bf1 G4bfe@G4bef G4c00@make-undefined-violation G4c02@undefined-violation? G4c09@G4c04 G4c0b@G4c06 G4c0d@G4c05 G4c12@G4c03 G4c14@make-no-infinities-violation G4c16@no-infinities-violation? G4c1d@G4c18 G4c1f@G4c1a G4c21@G4c19 G4c26@G4c17 G4c28@make-no-nans-violation G4c2a@no-nans-violation?) (begin (set! G4ad6@G4ad1 (make-record-type-descriptor '&condition '#f 'G4ad4 '#f '#f '#())) (set! G4ad8@G4ad3 '#f) (set! G4ada@G4ad2 (make-record-constructor-descriptor G4ad6@G4ad1 '#f G4ad8@G4ad3)) (set! G4adf@&condition? (record-predicate G4ad6@G4ad1)) (set! G4ae1@make-&condition (record-constructor G4ada@G4ad2)) (set! G4ae3@&condition-rtd G4ad6@G4ad1) (set! G4ae5@&condition-rcd G4ada@G4ad2) (set! G4aed@G4ae8 (make-record-type-descriptor '&message G4ad6@G4ad1 'G4aeb '#f '#f '#((immutable message)))) (set! G4aef@G4aea '#f) (set! G4af1@G4ae9 (make-record-constructor-descriptor G4aed@G4ae8 G4ada@G4ad2 G4aef@G4aea)) (set! G4af6@G4ae7 (record-predicate G4aed@G4ae8)) (set! G4af8@make-message-condition (record-constructor G4af1@G4ae9)) (set! G4afa@G4ae6 (record-accessor G4aed@G4ae8 '0)) (set! G4afc@message-condition? (condition-predicate G4aed@G4ae8)) (set! G4afe@condition-message (condition-accessor G4aed@G4ae8 G4afa@G4ae6)) (set! G4b05@G4b00 (make-record-type-descriptor '&warning G4ad6@G4ad1 'G4b03 '#f '#f '#())) (set! G4b07@G4b02 '#f) (set! G4b09@G4b01 (make-record-constructor-descriptor G4b05@G4b00 G4ada@G4ad2 G4b07@G4b02)) (set! G4b0e@G4aff (record-predicate G4b05@G4b00)) (set! G4b10@make-warning (record-constructor G4b09@G4b01)) (set! G4b12@warning? (condition-predicate G4b05@G4b00)) (set! G4b19@G4b14 (make-record-type-descriptor '&serious G4ad6@G4ad1 'G4b17 '#f '#f '#())) (set! G4b1b@G4b16 '#f) (set! G4b1d@G4b15 (make-record-constructor-descriptor G4b19@G4b14 G4ada@G4ad2 G4b1b@G4b16)) (set! G4b22@G4b13 (record-predicate G4b19@G4b14)) (set! G4b24@make-serious-condition (record-constructor G4b1d@G4b15)) (set! G4b26@serious-condition? (condition-predicate G4b19@G4b14)) (set! G4b2d@G4b28 (make-record-type-descriptor '&error G4b19@G4b14 'G4b2b '#f '#f '#())) (set! G4b2f@G4b2a '#f) (set! G4b31@G4b29 (make-record-constructor-descriptor G4b2d@G4b28 G4b1d@G4b15 G4b2f@G4b2a)) (set! G4b36@G4b27 (record-predicate G4b2d@G4b28)) (set! G4b38@make-error (record-constructor G4b31@G4b29)) (set! G4b3a@error? (condition-predicate G4b2d@G4b28)) (set! G4b41@G4b3c (make-record-type-descriptor '&violation G4b19@G4b14 'G4b3f '#f '#f '#())) (set! G4b43@G4b3e '#f) (set! G4b45@G4b3d (make-record-constructor-descriptor G4b41@G4b3c G4b1d@G4b15 G4b43@G4b3e)) (set! G4b4a@G4b3b (record-predicate G4b41@G4b3c)) (set! G4b4c@make-violation (record-constructor G4b45@G4b3d)) (set! G4b4e@violation? (condition-predicate G4b41@G4b3c)) (set! G4b55@G4b50 (make-record-type-descriptor '&assertion G4b41@G4b3c 'G4b53 '#f '#f '#())) (set! G4b57@G4b52 '#f) (set! G4b59@G4b51 (make-record-constructor-descriptor G4b55@G4b50 G4b45@G4b3d G4b57@G4b52)) (set! G4b5e@G4b4f (record-predicate G4b55@G4b50)) (set! G4b60@make-assertion-violation (record-constructor G4b59@G4b51)) (set! G4b62@assertion-violation? (condition-predicate G4b55@G4b50)) (set! G4b6a@G4b65 (make-record-type-descriptor '&irritants G4ad6@G4ad1 'G4b68 '#f '#f '#((immutable irritants)))) (set! G4b6c@G4b67 '#f) (set! G4b6e@G4b66 (make-record-constructor-descriptor G4b6a@G4b65 G4ada@G4ad2 G4b6c@G4b67)) (set! G4b73@G4b64 (record-predicate G4b6a@G4b65)) (set! G4b75@make-irritants-condition (record-constructor G4b6e@G4b66)) (set! G4b77@G4b63 (record-accessor G4b6a@G4b65 '0)) (set! G4b79@irritants-condition? (condition-predicate G4b6a@G4b65)) (set! G4b7b@condition-irritants (condition-accessor G4b6a@G4b65 G4b77@G4b63)) (set! G4b83@G4b7e (make-record-type-descriptor '&who G4ad6@G4ad1 'G4b81 '#f '#f '#((immutable who)))) (set! G4b85@G4b80 '#f) (set! G4b87@G4b7f (make-record-constructor-descriptor G4b83@G4b7e G4ada@G4ad2 G4b85@G4b80)) (set! G4b8c@G4b7d (record-predicate G4b83@G4b7e)) (set! G4b8e@make-who-condition (record-constructor G4b87@G4b7f)) (set! G4b90@G4b7c (record-accessor G4b83@G4b7e '0)) (set! G4b92@who-condition? (condition-predicate G4b83@G4b7e)) (set! G4b94@condition-who (condition-accessor G4b83@G4b7e G4b90@G4b7c)) (set! G4b9b@G4b96 (make-record-type-descriptor '&non-continuable G4b41@G4b3c 'G4b99 '#f '#f '#())) (set! G4b9d@G4b98 '#f) (set! G4b9f@G4b97 (make-record-constructor-descriptor G4b9b@G4b96 G4b45@G4b3d G4b9d@G4b98)) (set! G4ba4@G4b95 (record-predicate G4b9b@G4b96)) (set! G4ba6@make-non-continuable-violation (record-constructor G4b9f@G4b97)) (set! G4ba8@non-continuable-violation? (condition-predicate G4b9b@G4b96)) (set! G4baf@G4baa (make-record-type-descriptor '&implementation-restriction G4b41@G4b3c 'G4bad '#f '#f '#())) (set! G4bb1@G4bac '#f) (set! G4bb3@G4bab (make-record-constructor-descriptor G4baf@G4baa G4b45@G4b3d G4bb1@G4bac)) (set! G4bb8@G4ba9 (record-predicate G4baf@G4baa)) (set! G4bba@make-implementation-restriction-violation (record-constructor G4bb3@G4bab)) (set! G4bbc@implementation-restriction-violation? (condition-predicate G4baf@G4baa)) (set! G4bc3@G4bbe (make-record-type-descriptor '&lexical G4b41@G4b3c 'G4bc1 '#f '#f '#())) (set! G4bc5@G4bc0 '#f) (set! G4bc7@G4bbf (make-record-constructor-descriptor G4bc3@G4bbe G4b45@G4b3d G4bc5@G4bc0)) (set! G4bcc@G4bbd (record-predicate G4bc3@G4bbe)) (set! G4bce@make-lexical-violation (record-constructor G4bc7@G4bbf)) (set! G4bd0@lexical-violation? (condition-predicate G4bc3@G4bbe)) (set! G4bd9@G4bd4 (make-record-type-descriptor '&syntax G4b41@G4b3c 'G4bd7 '#f '#f '#((immutable form) (immutable subform)))) (set! G4bdb@G4bd6 '#f) (set! G4bdd@G4bd5 (make-record-constructor-descriptor G4bd9@G4bd4 G4b45@G4b3d G4bdb@G4bd6)) (set! G4be2@G4bd3 (record-predicate G4bd9@G4bd4)) (set! G4be4@make-syntax-violation (record-constructor G4bdd@G4bd5)) (set! G4be6@G4bd1 (record-accessor G4bd9@G4bd4 '0)) (set! G4be8@G4bd2 (record-accessor G4bd9@G4bd4 '1)) (set! G4bea@syntax-violation? (condition-predicate G4bd9@G4bd4)) (set! G4bec@syntax-violation-form (condition-accessor G4bd9@G4bd4 G4be6@G4bd1)) (set! G4bee@syntax-violation-subform (condition-accessor G4bd9@G4bd4 G4be8@G4bd2)) (set! G4bf5@G4bf0 (make-record-type-descriptor '&undefined G4b41@G4b3c 'G4bf3 '#f '#f '#())) (set! G4bf7@G4bf2 '#f) (set! G4bf9@G4bf1 (make-record-constructor-descriptor G4bf5@G4bf0 G4b45@G4b3d G4bf7@G4bf2)) (set! G4bfe@G4bef (record-predicate G4bf5@G4bf0)) (set! G4c00@make-undefined-violation (record-constructor G4bf9@G4bf1)) (set! G4c02@undefined-violation? (condition-predicate G4bf5@G4bf0)) (set! G4c09@G4c04 (make-record-type-descriptor '&no-infinities G4baf@G4baa 'G4c07 '#f '#f '#())) (set! G4c0b@G4c06 '#f) (set! G4c0d@G4c05 (make-record-constructor-descriptor G4c09@G4c04 G4bb3@G4bab G4c0b@G4c06)) (set! G4c12@G4c03 (record-predicate G4c09@G4c04)) (set! G4c14@make-no-infinities-violation (record-constructor G4c0d@G4c05)) (set! G4c16@no-infinities-violation? (condition-predicate G4c09@G4c04)) (set! G4c1d@G4c18 (make-record-type-descriptor '&no-nans G4baf@G4baa 'G4c1b '#f '#f '#())) (set! G4c1f@G4c1a '#f) (set! G4c21@G4c19 (make-record-constructor-descriptor G4c1d@G4c18 G4bb3@G4bab G4c1f@G4c1a)) (set! G4c26@G4c17 (record-predicate G4c1d@G4c18)) (set! G4c28@make-no-nans-violation (record-constructor G4c21@G4c19)) (set! G4c2a@no-nans-violation? (condition-predicate G4c1d@G4c18)) (begin (set! G4c95@G4c2a@no-nans-violation? G4c2a@no-nans-violation?) (set! G4c94@G4c28@make-no-nans-violation G4c28@make-no-nans-violation) (set! G4c93@G4c26@G4c17 G4c26@G4c17) (set! G4c92@G4c21@G4c19 G4c21@G4c19) (set! G4c91@G4c1f@G4c1a G4c1f@G4c1a) (set! G4c90@G4c1d@G4c18 G4c1d@G4c18) (set! G4c8f@G4c16@no-infinities-violation? G4c16@no-infinities-violation?) (set! G4c8e@G4c14@make-no-infinities-violation G4c14@make-no-infinities-violation) (set! G4c8d@G4c12@G4c03 G4c12@G4c03) (set! G4c8c@G4c0d@G4c05 G4c0d@G4c05) (set! G4c8b@G4c0b@G4c06 G4c0b@G4c06) (set! G4c8a@G4c09@G4c04 G4c09@G4c04) (set! G4c89@G4c02@undefined-violation? G4c02@undefined-violation?) (set! G4c88@G4c00@make-undefined-violation G4c00@make-undefined-violation) (set! G4c87@G4bfe@G4bef G4bfe@G4bef) (set! G4c86@G4bf9@G4bf1 G4bf9@G4bf1) (set! G4c85@G4bf7@G4bf2 G4bf7@G4bf2) (set! G4c84@G4bf5@G4bf0 G4bf5@G4bf0) (set! G4c83@G4bee@syntax-violation-subform G4bee@syntax-violation-subform) (set! G4c82@G4bec@syntax-violation-form G4bec@syntax-violation-form) (set! G4c81@G4bea@syntax-violation? G4bea@syntax-violation?) (set! G4c80@G4be8@G4bd2 G4be8@G4bd2) (set! G4c7f@G4be6@G4bd1 G4be6@G4bd1) (set! G4c7e@G4be4@make-syntax-violation G4be4@make-syntax-violation) (set! G4c7d@G4be2@G4bd3 G4be2@G4bd3) (set! G4c7c@G4bdd@G4bd5 G4bdd@G4bd5) (set! G4c7b@G4bdb@G4bd6 G4bdb@G4bd6) (set! G4c7a@G4bd9@G4bd4 G4bd9@G4bd4) (set! G4c79@G4bd0@lexical-violation? G4bd0@lexical-violation?) (set! G4c78@G4bce@make-lexical-violation G4bce@make-lexical-violation) (set! G4c77@G4bcc@G4bbd G4bcc@G4bbd) (set! G4c76@G4bc7@G4bbf G4bc7@G4bbf) (set! G4c75@G4bc5@G4bc0 G4bc5@G4bc0) (set! G4c74@G4bc3@G4bbe G4bc3@G4bbe) (set! G4c73@G4bbc@implementation-restriction-violation? G4bbc@implementation-restriction-violation?) (set! G4c72@G4bba@make-implementation-restriction-violation G4bba@make-implementation-restriction-violation) (set! G4c71@G4bb8@G4ba9 G4bb8@G4ba9) (set! G4c70@G4bb3@G4bab G4bb3@G4bab) (set! G4c6f@G4bb1@G4bac G4bb1@G4bac) (set! G4c6e@G4baf@G4baa G4baf@G4baa) (set! G4c6d@G4ba8@non-continuable-violation? G4ba8@non-continuable-violation?) (set! G4c6c@G4ba6@make-non-continuable-violation G4ba6@make-non-continuable-violation) (set! G4c6b@G4ba4@G4b95 G4ba4@G4b95) (set! G4c6a@G4b9f@G4b97 G4b9f@G4b97) (set! G4c69@G4b9d@G4b98 G4b9d@G4b98) (set! G4c68@G4b9b@G4b96 G4b9b@G4b96) (set! G4c67@G4b94@condition-who G4b94@condition-who) (set! G4c66@G4b92@who-condition? G4b92@who-condition?) (set! G4c65@G4b90@G4b7c G4b90@G4b7c) (set! G4c64@G4b8e@make-who-condition G4b8e@make-who-condition) (set! G4c63@G4b8c@G4b7d G4b8c@G4b7d) (set! G4c62@G4b87@G4b7f G4b87@G4b7f) (set! G4c61@G4b85@G4b80 G4b85@G4b80) (set! G4c60@G4b83@G4b7e G4b83@G4b7e) (set! G4c5f@G4b7b@condition-irritants G4b7b@condition-irritants) (set! G4c5e@G4b79@irritants-condition? G4b79@irritants-condition?) (set! G4c5d@G4b77@G4b63 G4b77@G4b63) (set! G4c5c@G4b75@make-irritants-condition G4b75@make-irritants-condition) (set! G4c5b@G4b73@G4b64 G4b73@G4b64) (set! G4c5a@G4b6e@G4b66 G4b6e@G4b66) (set! G4c59@G4b6c@G4b67 G4b6c@G4b67) (set! G4c58@G4b6a@G4b65 G4b6a@G4b65) (set! G4c57@G4b62@assertion-violation? G4b62@assertion-violation?) (set! G4c56@G4b60@make-assertion-violation G4b60@make-assertion-violation) (set! G4c55@G4b5e@G4b4f G4b5e@G4b4f) (set! G4c54@G4b59@G4b51 G4b59@G4b51) (set! G4c53@G4b57@G4b52 G4b57@G4b52) (set! G4c52@G4b55@G4b50 G4b55@G4b50) (set! G4c51@G4b4e@violation? G4b4e@violation?) (set! G4c50@G4b4c@make-violation G4b4c@make-violation) (set! G4c4f@G4b4a@G4b3b G4b4a@G4b3b) (set! G4c4e@G4b45@G4b3d G4b45@G4b3d) (set! G4c4d@G4b43@G4b3e G4b43@G4b3e) (set! G4c4c@G4b41@G4b3c G4b41@G4b3c) (set! G4c4b@G4b3a@error? G4b3a@error?) (set! G4c4a@G4b38@make-error G4b38@make-error) (set! G4c49@G4b36@G4b27 G4b36@G4b27) (set! G4c48@G4b31@G4b29 G4b31@G4b29) (set! G4c47@G4b2f@G4b2a G4b2f@G4b2a) (set! G4c46@G4b2d@G4b28 G4b2d@G4b28) (set! G4c45@G4b26@serious-condition? G4b26@serious-condition?) (set! G4c44@G4b24@make-serious-condition G4b24@make-serious-condition) (set! G4c43@G4b22@G4b13 G4b22@G4b13) (set! G4c42@G4b1d@G4b15 G4b1d@G4b15) (set! G4c41@G4b1b@G4b16 G4b1b@G4b16) (set! G4c40@G4b19@G4b14 G4b19@G4b14) (set! G4c3f@G4b12@warning? G4b12@warning?) (set! G4c3e@G4b10@make-warning G4b10@make-warning) (set! G4c3d@G4b0e@G4aff G4b0e@G4aff) (set! G4c3c@G4b09@G4b01 G4b09@G4b01) (set! G4c3b@G4b07@G4b02 G4b07@G4b02) (set! G4c3a@G4b05@G4b00 G4b05@G4b00) (set! G4c39@G4afe@condition-message G4afe@condition-message) (set! G4c38@G4afc@message-condition? G4afc@message-condition?) (set! G4c37@G4afa@G4ae6 G4afa@G4ae6) (set! G4c36@G4af8@make-message-condition G4af8@make-message-condition) (set! G4c35@G4af6@G4ae7 G4af6@G4ae7) (set! G4c34@G4af1@G4ae9 G4af1@G4ae9) (set! G4c33@G4aef@G4aea G4aef@G4aea) (set! G4c32@G4aed@G4ae8 G4aed@G4ae8) (set! G4c31@G4ae5@&condition-rcd G4ae5@&condition-rcd) (set! G4c30@G4ae3@&condition-rtd G4ae3@&condition-rtd) (set! G4c2f@G4ae1@make-&condition G4ae1@make-&condition) (set! G4c2e@G4adf@&condition? G4adf@&condition?) (set! G4c2d@G4ada@G4ad2 G4ada@G4ad2) (set! G4c2c@G4ad8@G4ad3 G4ad8@G4ad3) (set! G4c2b@G4ad6@G4ad1 G4ad6@G4ad1)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c9d@G4c98 G4c9f@G4c9a G4ca1@G4c99 G4ca6@G4c97 G4ca8@make-i/o-error G4caa@i/o-error? G4cb1@G4cac G4cb3@G4cae G4cb5@G4cad G4cba@G4cab G4cbc@make-i/o-read-error G4cbe@i/o-read-error? G4cc5@G4cc0 G4cc7@G4cc2 G4cc9@G4cc1 G4cce@G4cbf G4cd0@make-i/o-write-error G4cd2@i/o-write-error? G4cda@G4cd5 G4cdc@G4cd7 G4cde@G4cd6 G4ce3@G4cd4 G4ce5@make-i/o-invalid-position-error G4ce7@G4cd3 G4ce9@i/o-invalid-position-error? G4ceb@i/o-error-position G4cf3@G4cee G4cf5@G4cf0 G4cf7@G4cef G4cfc@G4ced G4cfe@make-i/o-filename-error G4d00@G4cec G4d02@i/o-filename-error? G4d04@i/o-error-filename G4d0b@G4d06 G4d0d@G4d08 G4d0f@G4d07 G4d14@G4d05 G4d16@make-i/o-file-protection-error G4d18@i/o-file-protection-error? G4d1f@G4d1a G4d21@G4d1c G4d23@G4d1b G4d28@G4d19 G4d2a@make-i/o-file-is-read-only-error G4d2c@i/o-file-is-read-only-error? G4d33@G4d2e G4d35@G4d30 G4d37@G4d2f G4d3c@G4d2d G4d3e@make-i/o-file-already-exists-error G4d40@i/o-file-already-exists-error? G4d47@G4d42 G4d49@G4d44 G4d4b@G4d43 G4d50@G4d41 G4d52@make-i/o-file-does-not-exist-error G4d54@i/o-file-does-not-exist-error? G4d5c@G4d57 G4d5e@G4d59 G4d60@G4d58 G4d65@G4d56 G4d67@make-i/o-port-error G4d69@G4d55 G4d6b@i/o-port-error? G4d6d@i/o-error-port G4d74@G4d6f G4d76@G4d71 G4d78@G4d70 G4d7d@G4d6e G4d7f@make-i/o-decoding-error G4d81@i/o-decoding-error? G4d89@G4d84 G4d8b@G4d86 G4d8d@G4d85 G4d92@G4d83 G4d94@make-i/o-encoding-error G4d96@G4d82 G4d98@i/o-encoding-error? G4d9a@i/o-encoding-error-char) (begin (set! G4c9d@G4c98 (make-record-type-descriptor '&i/o &error-rtd 'G4c9b '#f '#f '#())) (set! G4c9f@G4c9a '#f) (set! G4ca1@G4c99 (make-record-constructor-descriptor G4c9d@G4c98 &error-rcd G4c9f@G4c9a)) (set! G4ca6@G4c97 (record-predicate G4c9d@G4c98)) (set! G4ca8@make-i/o-error (record-constructor G4ca1@G4c99)) (set! G4caa@i/o-error? (condition-predicate G4c9d@G4c98)) (set! G4cb1@G4cac (make-record-type-descriptor '&i/o-read G4c9d@G4c98 'G4caf '#f '#f '#())) (set! G4cb3@G4cae '#f) (set! G4cb5@G4cad (make-record-constructor-descriptor G4cb1@G4cac G4ca1@G4c99 G4cb3@G4cae)) (set! G4cba@G4cab (record-predicate G4cb1@G4cac)) (set! G4cbc@make-i/o-read-error (record-constructor G4cb5@G4cad)) (set! G4cbe@i/o-read-error? (condition-predicate G4cb1@G4cac)) (set! G4cc5@G4cc0 (make-record-type-descriptor '&i/o-write G4c9d@G4c98 'G4cc3 '#f '#f '#())) (set! G4cc7@G4cc2 '#f) (set! G4cc9@G4cc1 (make-record-constructor-descriptor G4cc5@G4cc0 G4ca1@G4c99 G4cc7@G4cc2)) (set! G4cce@G4cbf (record-predicate G4cc5@G4cc0)) (set! G4cd0@make-i/o-write-error (record-constructor G4cc9@G4cc1)) (set! G4cd2@i/o-write-error? (condition-predicate G4cc5@G4cc0)) (set! G4cda@G4cd5 (make-record-type-descriptor '&i/o-invalid-position G4c9d@G4c98 'G4cd8 '#f '#f '#((immutable position)))) (set! G4cdc@G4cd7 '#f) (set! G4cde@G4cd6 (make-record-constructor-descriptor G4cda@G4cd5 G4ca1@G4c99 G4cdc@G4cd7)) (set! G4ce3@G4cd4 (record-predicate G4cda@G4cd5)) (set! G4ce5@make-i/o-invalid-position-error (record-constructor G4cde@G4cd6)) (set! G4ce7@G4cd3 (record-accessor G4cda@G4cd5 '0)) (set! G4ce9@i/o-invalid-position-error? (condition-predicate G4cda@G4cd5)) (set! G4ceb@i/o-error-position (condition-accessor G4cda@G4cd5 G4ce7@G4cd3)) (set! G4cf3@G4cee (make-record-type-descriptor '&i/o-filename G4c9d@G4c98 'G4cf1 '#f '#f '#((immutable filename)))) (set! G4cf5@G4cf0 '#f) (set! G4cf7@G4cef (make-record-constructor-descriptor G4cf3@G4cee G4ca1@G4c99 G4cf5@G4cf0)) (set! G4cfc@G4ced (record-predicate G4cf3@G4cee)) (set! G4cfe@make-i/o-filename-error (record-constructor G4cf7@G4cef)) (set! G4d00@G4cec (record-accessor G4cf3@G4cee '0)) (set! G4d02@i/o-filename-error? (condition-predicate G4cf3@G4cee)) (set! G4d04@i/o-error-filename (condition-accessor G4cf3@G4cee G4d00@G4cec)) (set! G4d0b@G4d06 (make-record-type-descriptor '&i/o-file-protection G4c9d@G4c98 'G4d09 '#f '#f '#())) (set! G4d0d@G4d08 '#f) (set! G4d0f@G4d07 (make-record-constructor-descriptor G4d0b@G4d06 G4ca1@G4c99 G4d0d@G4d08)) (set! G4d14@G4d05 (record-predicate G4d0b@G4d06)) (set! G4d16@make-i/o-file-protection-error (record-constructor G4d0f@G4d07)) (set! G4d18@i/o-file-protection-error? (condition-predicate G4d0b@G4d06)) (set! G4d1f@G4d1a (make-record-type-descriptor '&i/o-file-is-read-only G4d0b@G4d06 'G4d1d '#f '#f '#())) (set! G4d21@G4d1c '#f) (set! G4d23@G4d1b (make-record-constructor-descriptor G4d1f@G4d1a G4d0f@G4d07 G4d21@G4d1c)) (set! G4d28@G4d19 (record-predicate G4d1f@G4d1a)) (set! G4d2a@make-i/o-file-is-read-only-error (record-constructor G4d23@G4d1b)) (set! G4d2c@i/o-file-is-read-only-error? (condition-predicate G4d1f@G4d1a)) (set! G4d33@G4d2e (make-record-type-descriptor '&i/o-file-already-exists G4cf3@G4cee 'G4d31 '#f '#f '#())) (set! G4d35@G4d30 '#f) (set! G4d37@G4d2f (make-record-constructor-descriptor G4d33@G4d2e G4cf7@G4cef G4d35@G4d30)) (set! G4d3c@G4d2d (record-predicate G4d33@G4d2e)) (set! G4d3e@make-i/o-file-already-exists-error (record-constructor G4d37@G4d2f)) (set! G4d40@i/o-file-already-exists-error? (condition-predicate G4d33@G4d2e)) (set! G4d47@G4d42 (make-record-type-descriptor '&i/o-file-does-not-exist G4cf3@G4cee 'G4d45 '#f '#f '#())) (set! G4d49@G4d44 '#f) (set! G4d4b@G4d43 (make-record-constructor-descriptor G4d47@G4d42 G4cf7@G4cef G4d49@G4d44)) (set! G4d50@G4d41 (record-predicate G4d47@G4d42)) (set! G4d52@make-i/o-file-does-not-exist-error (record-constructor G4d4b@G4d43)) (set! G4d54@i/o-file-does-not-exist-error? (condition-predicate G4d47@G4d42)) (set! G4d5c@G4d57 (make-record-type-descriptor '&i/o-port G4c9d@G4c98 'G4d5a '#f '#f '#((immutable port)))) (set! G4d5e@G4d59 '#f) (set! G4d60@G4d58 (make-record-constructor-descriptor G4d5c@G4d57 G4ca1@G4c99 G4d5e@G4d59)) (set! G4d65@G4d56 (record-predicate G4d5c@G4d57)) (set! G4d67@make-i/o-port-error (record-constructor G4d60@G4d58)) (set! G4d69@G4d55 (record-accessor G4d5c@G4d57 '0)) (set! G4d6b@i/o-port-error? (condition-predicate G4d5c@G4d57)) (set! G4d6d@i/o-error-port (condition-accessor G4d5c@G4d57 G4d69@G4d55)) (set! G4d74@G4d6f (make-record-type-descriptor '&i/o-decoding G4d5c@G4d57 'G4d72 '#f '#f '#())) (set! G4d76@G4d71 '#f) (set! G4d78@G4d70 (make-record-constructor-descriptor G4d74@G4d6f G4d60@G4d58 G4d76@G4d71)) (set! G4d7d@G4d6e (record-predicate G4d74@G4d6f)) (set! G4d7f@make-i/o-decoding-error (record-constructor G4d78@G4d70)) (set! G4d81@i/o-decoding-error? (condition-predicate G4d74@G4d6f)) (set! G4d89@G4d84 (make-record-type-descriptor '&i/o-encoding G4d5c@G4d57 'G4d87 '#f '#f '#((immutable char)))) (set! G4d8b@G4d86 '#f) (set! G4d8d@G4d85 (make-record-constructor-descriptor G4d89@G4d84 G4d60@G4d58 G4d8b@G4d86)) (set! G4d92@G4d83 (record-predicate G4d89@G4d84)) (set! G4d94@make-i/o-encoding-error (record-constructor G4d8d@G4d85)) (set! G4d96@G4d82 (record-accessor G4d89@G4d84 '0)) (set! G4d98@i/o-encoding-error? (condition-predicate G4d89@G4d84)) (set! G4d9a@i/o-encoding-error-char (condition-accessor G4d89@G4d84 G4d96@G4d82)) (begin (set! G4dea@G4d9a@i/o-encoding-error-char G4d9a@i/o-encoding-error-char) (set! G4de9@G4d98@i/o-encoding-error? G4d98@i/o-encoding-error?) (set! G4de8@G4d96@G4d82 G4d96@G4d82) (set! G4de7@G4d94@make-i/o-encoding-error G4d94@make-i/o-encoding-error) (set! G4de6@G4d92@G4d83 G4d92@G4d83) (set! G4de5@G4d8d@G4d85 G4d8d@G4d85) (set! G4de4@G4d8b@G4d86 G4d8b@G4d86) (set! G4de3@G4d89@G4d84 G4d89@G4d84) (set! G4de2@G4d81@i/o-decoding-error? G4d81@i/o-decoding-error?) (set! G4de1@G4d7f@make-i/o-decoding-error G4d7f@make-i/o-decoding-error) (set! G4de0@G4d7d@G4d6e G4d7d@G4d6e) (set! G4ddf@G4d78@G4d70 G4d78@G4d70) (set! G4dde@G4d76@G4d71 G4d76@G4d71) (set! G4ddd@G4d74@G4d6f G4d74@G4d6f) (set! G4ddc@G4d6d@i/o-error-port G4d6d@i/o-error-port) (set! G4ddb@G4d6b@i/o-port-error? G4d6b@i/o-port-error?) (set! G4dda@G4d69@G4d55 G4d69@G4d55) (set! G4dd9@G4d67@make-i/o-port-error G4d67@make-i/o-port-error) (set! G4dd8@G4d65@G4d56 G4d65@G4d56) (set! G4dd7@G4d60@G4d58 G4d60@G4d58) (set! G4dd6@G4d5e@G4d59 G4d5e@G4d59) (set! G4dd5@G4d5c@G4d57 G4d5c@G4d57) (set! G4dd4@G4d54@i/o-file-does-not-exist-error? G4d54@i/o-file-does-not-exist-error?) (set! G4dd3@G4d52@make-i/o-file-does-not-exist-error G4d52@make-i/o-file-does-not-exist-error) (set! G4dd2@G4d50@G4d41 G4d50@G4d41) (set! G4dd1@G4d4b@G4d43 G4d4b@G4d43) (set! G4dd0@G4d49@G4d44 G4d49@G4d44) (set! G4dcf@G4d47@G4d42 G4d47@G4d42) (set! G4dce@G4d40@i/o-file-already-exists-error? G4d40@i/o-file-already-exists-error?) (set! G4dcd@G4d3e@make-i/o-file-already-exists-error G4d3e@make-i/o-file-already-exists-error) (set! G4dcc@G4d3c@G4d2d G4d3c@G4d2d) (set! G4dcb@G4d37@G4d2f G4d37@G4d2f) (set! G4dca@G4d35@G4d30 G4d35@G4d30) (set! G4dc9@G4d33@G4d2e G4d33@G4d2e) (set! G4dc8@G4d2c@i/o-file-is-read-only-error? G4d2c@i/o-file-is-read-only-error?) (set! G4dc7@G4d2a@make-i/o-file-is-read-only-error G4d2a@make-i/o-file-is-read-only-error) (set! G4dc6@G4d28@G4d19 G4d28@G4d19) (set! G4dc5@G4d23@G4d1b G4d23@G4d1b) (set! G4dc4@G4d21@G4d1c G4d21@G4d1c) (set! G4dc3@G4d1f@G4d1a G4d1f@G4d1a) (set! G4dc2@G4d18@i/o-file-protection-error? G4d18@i/o-file-protection-error?) (set! G4dc1@G4d16@make-i/o-file-protection-error G4d16@make-i/o-file-protection-error) (set! G4dc0@G4d14@G4d05 G4d14@G4d05) (set! G4dbf@G4d0f@G4d07 G4d0f@G4d07) (set! G4dbe@G4d0d@G4d08 G4d0d@G4d08) (set! G4dbd@G4d0b@G4d06 G4d0b@G4d06) (set! G4dbc@G4d04@i/o-error-filename G4d04@i/o-error-filename) (set! G4dbb@G4d02@i/o-filename-error? G4d02@i/o-filename-error?) (set! G4dba@G4d00@G4cec G4d00@G4cec) (set! G4db9@G4cfe@make-i/o-filename-error G4cfe@make-i/o-filename-error) (set! G4db8@G4cfc@G4ced G4cfc@G4ced) (set! G4db7@G4cf7@G4cef G4cf7@G4cef) (set! G4db6@G4cf5@G4cf0 G4cf5@G4cf0) (set! G4db5@G4cf3@G4cee G4cf3@G4cee) (set! G4db4@G4ceb@i/o-error-position G4ceb@i/o-error-position) (set! G4db3@G4ce9@i/o-invalid-position-error? G4ce9@i/o-invalid-position-error?) (set! G4db2@G4ce7@G4cd3 G4ce7@G4cd3) (set! G4db1@G4ce5@make-i/o-invalid-position-error G4ce5@make-i/o-invalid-position-error) (set! G4db0@G4ce3@G4cd4 G4ce3@G4cd4) (set! G4daf@G4cde@G4cd6 G4cde@G4cd6) (set! G4dae@G4cdc@G4cd7 G4cdc@G4cd7) (set! G4dad@G4cda@G4cd5 G4cda@G4cd5) (set! G4dac@G4cd2@i/o-write-error? G4cd2@i/o-write-error?) (set! G4dab@G4cd0@make-i/o-write-error G4cd0@make-i/o-write-error) (set! G4daa@G4cce@G4cbf G4cce@G4cbf) (set! G4da9@G4cc9@G4cc1 G4cc9@G4cc1) (set! G4da8@G4cc7@G4cc2 G4cc7@G4cc2) (set! G4da7@G4cc5@G4cc0 G4cc5@G4cc0) (set! G4da6@G4cbe@i/o-read-error? G4cbe@i/o-read-error?) (set! G4da5@G4cbc@make-i/o-read-error G4cbc@make-i/o-read-error) (set! G4da4@G4cba@G4cab G4cba@G4cab) (set! G4da3@G4cb5@G4cad G4cb5@G4cad) (set! G4da2@G4cb3@G4cae G4cb3@G4cae) (set! G4da1@G4cb1@G4cac G4cb1@G4cac) (set! G4da0@G4caa@i/o-error? G4caa@i/o-error?) (set! G4d9f@G4ca8@make-i/o-error G4ca8@make-i/o-error) (set! G4d9e@G4ca6@G4c97 G4ca6@G4c97) (set! G4d9d@G4ca1@G4c99 G4ca1@G4c99) (set! G4d9c@G4c9f@G4c9a G4c9f@G4c9a) (set! G4d9b@G4c9d@G4c98 G4c9d@G4c98)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29fe@G29a3@current-primitive-locations (lambda (G51be@x) ((lambda (G51c0@t) (if G51c0@t (cdr G51c0@t) '#f)) (assq G51be@x '((syntax-error . G4ac2@G317b@syntax-error) (syntax-dispatch . G4a56@G308e@syntax-dispatch) (load . G4e87@G4df9@load) (interaction-environment . G4acb@G318d@interaction-environment) (make-parameter . G299d@G28a8@make-parameter) (make-variable-transformer . G4a16@G2e8c@make-variable-transformer) (identifier? . G4ac6@G3183@identifier?) (generate-temporaries . G4abb@G316d@generate-temporaries) (free-identifier=? . G4abc@G316f@free-identifier=?) (syntax->datum . G4ac8@G3187@syntax->datum) (datum->syntax . G4ac7@G3185@datum->syntax) (bound-identifier=? . G4abd@G3171@bound-identifier=?) (make-i/o-write-error . G4dab@G4cd0@make-i/o-write-error) (make-i/o-read-error . G4da5@G4cbc@make-i/o-read-error) (make-i/o-port-error . G4dd9@G4d67@make-i/o-port-error) (make-i/o-invalid-position-error . G4db1@G4ce5@make-i/o-invalid-position-error) (make-i/o-filename-error . G4db9@G4cfe@make-i/o-filename-error) (make-i/o-file-protection-error . G4dc1@G4d16@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4dc7@G4d2a@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4dd3@G4d52@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4dcd@G4d3e@make-i/o-file-already-exists-error) (make-i/o-error . G4d9f@G4ca8@make-i/o-error) (make-i/o-encoding-error . G4de7@G4d94@make-i/o-encoding-error) (make-i/o-decoding-error . G4de1@G4d7f@make-i/o-decoding-error) (i/o-write-error? . G4dac@G4cd2@i/o-write-error?) (i/o-read-error? . G4da6@G4cbe@i/o-read-error?) (i/o-port-error? . G4ddb@G4d6b@i/o-port-error?) (i/o-invalid-position-error? . G4db3@G4ce9@i/o-invalid-position-error?) (i/o-filename-error? . G4dbb@G4d02@i/o-filename-error?) (i/o-file-protection-error? . G4dc2@G4d18@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4dc8@G4d2c@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4dd4@G4d54@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4dce@G4d40@i/o-file-already-exists-error?) (i/o-error? . G4da0@G4caa@i/o-error?) (i/o-error-port . G4ddc@G4d6d@i/o-error-port) (i/o-error-filename . G4dbc@G4d04@i/o-error-filename) (i/o-encoding-error? . G4de9@G4d98@i/o-encoding-error?) (i/o-encoding-error-char . G4dea@G4d9a@i/o-encoding-error-char) (i/o-decoding-error? . G4de2@G4d81@i/o-decoding-error?) (scheme-report-environment . G4ab2@G315b@scheme-report-environment) (null-environment . G4ab1@G3159@null-environment) (command-line . G4e84@G4df3@command-line) (eval . G4ab4@G315f@eval) (environment . G4ab0@G3157@environment) (who-condition? . G4c66@G4b92@who-condition?) (warning? . G4c3f@G4b12@warning?) (violation? . G4c51@G4b4e@violation?) (undefined-violation? . G4c89@G4c02@undefined-violation?) (syntax-violation? . G4c81@G4bea@syntax-violation?) (syntax-violation-subform . G4c83@G4bee@syntax-violation-subform) (syntax-violation-form . G4c82@G4bec@syntax-violation-form) (syntax-violation . G4ac5@G3181@syntax-violation) (serious-condition? . G4c45@G4b26@serious-condition?) (non-continuable-violation? . G4c6d@G4ba8@non-continuable-violation?) (message-condition? . G4c38@G4afc@message-condition?) (make-who-condition . G4c64@G4b8e@make-who-condition) (make-warning . G4c3e@G4b10@make-warning) (make-violation . G4c50@G4b4c@make-violation) (make-undefined-violation . G4c88@G4c00@make-undefined-violation) (make-syntax-violation . G4c7e@G4be4@make-syntax-violation) (make-serious-condition . G4c44@G4b24@make-serious-condition) (make-non-continuable-violation . G4c6c@G4ba6@make-non-continuable-violation) (make-message-condition . G4c36@G4af8@make-message-condition) (make-lexical-violation . G4c78@G4bce@make-lexical-violation) (make-irritants-condition . G4c5c@G4b75@make-irritants-condition) (make-implementation-restriction-violation . G4c72@G4bba@make-implementation-restriction-violation) (make-error . G4c4a@G4b38@make-error) (make-assertion-violation . G4c56@G4b60@make-assertion-violation) (lexical-violation? . G4c79@G4bd0@lexical-violation?) (irritants-condition? . G4c5e@G4b79@irritants-condition?) (implementation-restriction-violation? . G4c73@G4bbc@implementation-restriction-violation?) (error? . G4c4b@G4b3a@error?) (condition-who . G4c67@G4b94@condition-who) (condition-message . G4c39@G4afe@condition-message) (condition-irritants . G4c5f@G4b7b@condition-irritants) (assertion-violation? . G4c57@G4b62@assertion-violation?) (no-nans-violation? . G4c95@G4c2a@no-nans-violation?) (no-infinities-violation? . G4c8f@G4c16@no-infinities-violation?) (make-no-nans-violation . G4c94@G4c28@make-no-nans-violation) (make-no-infinities-violation . G4c8e@G4c14@make-no-infinities-violation)))))) (G2c3e@G2ad1@install-library 'G5191 '(mosh interaction) '() '() '() '() '((string-upcase . G510e) (string-titlecase . G510d) (string-normalize-nfkd . G510c) (string-normalize-nfkc . G510b) (string-normalize-nfd . G510a) (string-normalize-nfc . G5109) (string-foldcase . G5108) (string-downcase . G5107) (string-ci>? . G5106) (string-ci>=? . G5105) (string-ci=? . G5104) (string-ci<? . G5103) (string-ci<=? . G5102) (char-whitespace? . G5101) (char-upper-case? . G5100) (char-title-case? . G50ff) (char-numeric? . G50fe) (char-lower-case? . G50fd) (char-general-category . G50fc) (char-upcase . G50fb) (char-titlecase . G50fa) (char-foldcase . G50f9) (char-downcase . G50f8) (char-ci>? . G50f7) (char-ci>=? . G50f6) (char-ci=? . G50f5) (char-ci<? . G50f4) (char-ci<=? . G50f3) (char-alphabetic? . G50f2) (make-variable-transformer . G2e8b) (identifier? . G3182) (generate-temporaries . G316c) (free-identifier=? . G316e) (syntax->datum . G3186) (datum->syntax . G3184) (bound-identifier=? . G3170) (record-type-descriptor? . G50f1) (record-predicate . G50f0) (record-mutator . G50ef) (record-constructor . G50ee) (record-accessor . G50ed) (make-record-type-descriptor . G50ec) (make-record-constructor-descriptor . G50eb) (record? . G50ea) (record-type-uid . G50e9) (record-type-sealed? . G50e8) (record-type-parent . G50e7) (record-type-opaque? . G50e6) (record-type-name . G50e5) (record-type-generative? . G50e4) (record-type-field-names . G50e3) (record-rtd . G50e2) (record-field-mutable? . G50e1) (delete-file . G50e0) (file-exists? . G50df) (vector-sort! . G50de) (vector-sort . G50dd) (list-sort . G50dc) (symbol-hash . G50db) (string-ci-hash . G50da) (string-hash . G50d9) (equal-hash . G50d8) (hashtable-equivalence-function . G50d7) (make-hashtable . G50d6) (hashtable-hash-function . G50d5) (make-eqv-hashtable . G50d4) (make-eq-hashtable . G50d3) (hashtable? . G50d2) (hashtable-update! . G50d1) (hashtable-size . G50d0) (hashtable-set! . G50cf) (hashtable-ref . G50ce) (hashtable-mutable? . G50cd) (hashtable-keys . G50cc) (hashtable-entries . G50cb) (hashtable-delete! . G50ca) (hashtable-copy . G50c9) (hashtable-contains? . G50c8) (hashtable-clear! . G50c7) (call-with-output-file . G50c6) (call-with-input-file . G50c5) (write-char . G50c4) (write . G50c3) (with-output-to-file . G50c2) (with-input-from-file . G50c1) (read-char . G50c0) (read . G50bf) (peek-char . G50be) (open-output-file . G50bd) (open-input-file . G50bc) (newline . G50bb) (display . G50ba) (close-output-port . G50b9) (close-input-port . G50b8) (eof-object? . G50b7) (eof-object . G50b6) (current-error-port . G50b5) (current-output-port . G50b4) (current-input-port . G50b3) (output-port? . G50b2) (input-port? . G50b1) (utf-8-codec . G50b0) (utf-16-codec . G50af) (transcoder-error-handling-mode . G50ae) (transcoder-eol-style . G50ad) (transcoder-codec . G50ac) (transcoded-port . G50ab) (textual-port? . G50aa) (string->bytevector . G50a9) (standard-output-port . G50a8) (standard-input-port . G50a7) (standard-error-port . G50a6) (set-port-position! . G50a5) (put-u8 . G50a4) (put-string . G50a3) (put-datum . G50a2) (put-char . G50a1) (put-bytevector . G50a0) (port? . G509f) (port-transcoder . G509e) (port-position . G509d) (port-has-set-port-position!? . G509c) (port-has-port-position? . G509b) (port-eof? . G509a) (output-port-buffer-mode . G5099) (open-string-output-port . G5098) (open-string-input-port . G5097) (open-file-output-port . G5096) (open-file-input/output-port . G5095) (open-file-input-port . G5094) (open-bytevector-output-port . G5093) (open-bytevector-input-port . G5092) (native-transcoder . G5091) (native-eol-style . G5090) (make-transcoder . G508f) (latin-1-codec . G508e) (make-i/o-write-error . G4ccf) (make-i/o-read-error . G4cbb) (make-i/o-port-error . G4d66) (make-i/o-invalid-position-error . G4ce4) (make-i/o-filename-error . G4cfd) (make-i/o-file-protection-error . G4d15) (make-i/o-file-is-read-only-error . G4d29) (make-i/o-file-does-not-exist-error . G4d51) (make-i/o-file-already-exists-error . G4d3d) (make-i/o-error . G4ca7) (make-i/o-encoding-error . G4d93) (make-i/o-decoding-error . G4d7e) (make-custom-textual-output-port . G508d) (make-custom-textual-input/output-port . G508c) (make-custom-textual-input-port . G508b) (make-custom-binary-output-port . G508a) (make-custom-binary-input/output-port . G5089) (make-custom-binary-input-port . G5088) (make-bytevector . G5087) (lookahead-u8 . G5086) (lookahead-char . G5085) (i/o-write-error? . G4cd1) (i/o-read-error? . G4cbd) (i/o-port-error? . G4d6a) (i/o-invalid-position-error? . G4ce8) (i/o-filename-error? . G4d01) (i/o-file-protection-error? . G4d17) (i/o-file-is-read-only-error? . G4d2b) (i/o-file-does-not-exist-error? . G4d53) (i/o-file-already-exists-error? . G4d3f) (i/o-error? . G4ca9) (i/o-error-port . G4d6c) (i/o-error-filename . G4d03) (i/o-encoding-error? . G4d97) (i/o-encoding-error-char . G4d99) (i/o-decoding-error? . G4d80) (get-u8 . G5084) (get-string-n! . G5083) (get-string-n . G5082) (get-string-all . G5081) (get-line . G5080) (get-datum . G507f) (get-char . G507e) (get-bytevector-some . G507d) (get-bytevector-n! . G507c) (get-bytevector-n . G507b) (get-bytevector-all . G507a) (flush-output-port . G5079) (close-port . G5078) (exit . G5071) (command-line . G4df2) (string-fill! . G5070) (string-set! . G506f) (set-cdr! . G506e) (set-car! . G506d) (remove . G506c) (remv . G506b) (remp . G506a) (remq . G5069) (partition . G5068) (memv . G5067) (memq . G5066) (memp . G5065) (member . G5064) (exists . G5063) (for-all . G5062) (fold-right . G5061) (fold-left . G5060) (find . G505f) (filter . G505e) (cons* . G505d) (assv . G505c) (assq . G505b) (assp . G505a) (assoc . G5059) (call-with-string-output-port . G5058) (call-with-port . G5057) (call-with-bytevector-output-port . G5056) (bytevector->string . G5055) (buffer-mode? . G5054) (binary-port? . G5053) (with-exception-handler . G5052) (raise-continuable . G5051) (raise . G5050) (eval . G315e) (environment . G3156) (make-enumeration . G504f) (enum-set=? . G504e) (enum-set-universe . G504d) (enum-set-union . G504c) (enum-set-subset? . G504b) (enum-set-projection . G504a) (enum-set-member? . G5049) (enum-set-intersection . G5048) (enum-set-indexer . G5047) (enum-set-difference . G5046) (enum-set-constructor . G5045) (enum-set-complement . G5044) (enum-set->list . G5043) (who-condition? . G4b91) (warning? . G4b11) (violation? . G4b4d) (undefined-violation? . G4c01) (syntax-violation? . G4be9) (syntax-violation-subform . G4bed) (syntax-violation-form . G4beb) (syntax-violation . G3180) (simple-conditions . G5042) (serious-condition? . G4b25) (non-continuable-violation? . G4ba7) (message-condition? . G4afb) (make-who-condition . G4b8d) (make-warning . G4b0f) (make-violation . G4b4b) (make-undefined-violation . G4bff) (make-syntax-violation . G4be3) (make-serious-condition . G4b23) (make-non-continuable-violation . G4ba5) (make-message-condition . G4af7) (make-lexical-violation . G4bcd) (make-irritants-condition . G4b74) (make-implementation-restriction-violation . G4bb9) (make-error . G4b37) (make-assertion-violation . G4b5f) (lexical-violation? . G4bcf) (irritants-condition? . G4b78) (implementation-restriction-violation? . G4bbb) (error? . G4b39) (condition-who . G4b93) (condition-predicate . G5041) (condition-message . G4afd) (condition-irritants . G4b7a) (condition-accessor . G5040) (condition . G503f) (assertion-violation? . G4b61) (condition? . G503e) (utf32->string . G503d) (utf16->string . G503c) (utf8->string . G503b) (uint-list->bytevector . G503a) (u8-list->bytevector . G5039) (string->utf8 . G5038) (string->utf32 . G5037) (string->utf16 . G5036) (sint-list->bytevector . G5035) (native-endianness . G5034) (bytevector? . G5033) (bytevector=? . G5032) (bytevector-uint-set! . G5031) (bytevector-uint-ref . G5030) (bytevector-u8-set! . G502f) (bytevector-u8-ref . G502e) (bytevector-u64-set! . G502d) (bytevector-u64-ref . G502c) (bytevector-u64-native-set! . G502b) (bytevector-u64-native-ref . G502a) (bytevector-u32-set! . G5029) (bytevector-u32-ref . G5028) (bytevector-u32-native-set! . G5027) (bytevector-u32-native-ref . G5026) (bytevector-u16-set! . G5025) (bytevector-u16-ref . G5024) (bytevector-u16-native-set! . G5023) (bytevector-u16-native-ref . G5022) (bytevector-sint-set! . G5021) (bytevector-sint-ref . G5020) (bytevector-s8-set! . G501f) (bytevector-s8-ref . G501e) (bytevector-s64-set! . G501d) (bytevector-s64-ref . G501c) (bytevector-s64-native-set! . G501b) (bytevector-s64-native-ref . G501a) (bytevector-s32-set! . G5019) (bytevector-s32-ref . G5018) (bytevector-s32-native-set! . G5017) (bytevector-s32-native-ref . G5016) (bytevector-s16-set! . G5015) (bytevector-s16-ref . G5014) (bytevector-s16-native-set! . G5013) (bytevector-s16-native-ref . G5012) (bytevector-length . G5011) (bytevector-ieee-single-ref . G5010) (bytevector-ieee-single-set! . G500f) (bytevector-ieee-single-native-set! . G500e) (bytevector-ieee-single-native-ref . G500d) (bytevector-ieee-double-set! . G500c) (bytevector-ieee-double-ref . G500b) (bytevector-ieee-double-native-set! . G500a) (bytevector-ieee-double-native-ref . G5009) (bytevector-fill! . G5008) (bytevector-copy! . G5007) (bytevector-copy . G5006) (bytevector->uint-list . G5005) (bytevector->u8-list . G5004) (bytevector->sint-list . G5003) (no-nans-violation? . G4c29) (no-infinities-violation? . G4c15) (make-no-nans-violation . G4c27) (make-no-infinities-violation . G4c13) (real->flonum . G5002) (flzero? . G5001) (fltruncate . G5000) (fltan . G4fff) (flsqrt . G4ffe) (flsin . G4ffd) (flround . G4ffc) (flpositive? . G4ffb) (flonum? . G4ffa) (flodd? . G4ff9) (flnumerator . G4ff8) (flnegative? . G4ff7) (flnan? . G4ff6) (flmod0 . G4ff5) (flmod . G4ff4) (flmin . G4ff3) (flmax . G4ff2) (fllog . G4ff1) (flinteger? . G4ff0) (flinfinite? . G4fef) (flfloor . G4fee) (flfinite? . G4fed) (flexpt . G4fec) (flexp . G4feb) (fleven? . G4fea) (fldiv0-and-mod0 . G4fe9) (fldiv0 . G4fe8) (fldiv-and-mod . G4fe7) (fldiv . G4fe6) (fldenominator . G4fe5) (flcos . G4fe4) (flceiling . G4fe3) (flatan . G4fe2) (flasin . G4fe1) (flacos . G4fe0) (flabs . G4fdf) (fl>? . G4fde) (fl>=? . G4fdd) (fl=? . G4fdc) (fl<? . G4fdb) (fl<=? . G4fda) (fl/ . G4fd9) (fl- . G4fd8) (fl+ . G4fd7) (fl* . G4fd6) (fixnum->flonum . G4fd5) (fxzero? . G4fd4) (fxxor . G4fd3) (fxrotate-bit-field . G4fd2) (fxreverse-bit-field . G4fd1) (fxpositive? . G4fd0) (fxodd? . G4fcf) (fxnot . G4fce) (fxnegative? . G4fcd) (fxmod0 . G4fcc) (fxmod . G4fcb) (fxmin . G4fca) (fxmax . G4fc9) (fxlength . G4fc8) (fxior . G4fc7) (fxif . G4fc6) (fxfirst-bit-set . G4fc5) (fxeven? . G4fc4) (fxdiv0-and-mod0 . G4fc3) (fxdiv0 . G4fc2) (fxdiv-and-mod . G4fc1) (fxdiv . G4fc0) (fxcopy-bit-field . G4fbf) (fxcopy-bit . G4fbe) (fxbit-set? . G4fbd) (fxbit-field . G4fbc) (fxbit-count . G4fbb) (fxarithmetic-shift-right . G4fba) (fxarithmetic-shift-left . G4fb9) (fxarithmetic-shift . G4fb8) (fxand . G4fb7) (fx>? . G4fb6) (fx>=? . G4fb5) (fx=? . G4fb4) (fx<? . G4fb3) (fx<=? . G4fb2) (fx-/carry . G4fb1) (fx- . G4fb0) (fx+/carry . G4faf) (fx+ . G4fae) (fx*/carry . G4fad) (fx* . G4fac) (greatest-fixnum . G4fab) (least-fixnum . G4faa) (fixnum-width . G4fa9) (fixnum? . G4fa8) (bitwise-rotate-bit-field . G4fa7) (bitwise-reverse-bit-field . G4fa6) (bitwise-length . G4fa5) (bitwise-if . G4fa4) (bitwise-first-bit-set . G4fa3) (bitwise-copy-bit-field . G4fa2) (bitwise-copy-bit . G4fa1) (bitwise-bit-set? . G4fa0) (bitwise-bit-field . G4f9f) (bitwise-bit-count . G4f9e) (bitwise-xor . G4f9d) (bitwise-ior . G4f9c) (bitwise-and . G4f9b) (bitwise-not . G4f9a) (bitwise-arithmetic-shift-right . G4f99) (bitwise-arithmetic-shift-left . G4f98) (bitwise-arithmetic-shift . G4f97) (zero? . G4f96) (vector? . G4f95) (vector-set! . G4f94) (vector-ref . G4f93) (vector-map . G4f92) (vector-length . G4f91) (vector-for-each . G4f90) (vector-fill! . G4f8f) (vector->list . G4f8e) (vector . G4f8d) (values . G4f8c) (truncate . G4f8b) (tan . G4f8a) (symbol? . G4f89) (symbol=? . G4f88) (symbol->string . G4f87) (substring . G4f86) (string? . G4f85) (string>? . G4f84) (string>=? . G4f83) (string=? . G4f82) (string<? . G4f81) (string<=? . G4f80) (string-ref . G4f7f) (string-length . G4f7e) (string-for-each . G4f7d) (string-copy . G4f7c) (string-append . G4f7b) (string->symbol . G4f7a) (string->number . G4f79) (string->list . G4f78) (string . G4f77) (sqrt . G4f76) (sin . G4f75) (round . G4f74) (reverse . G4f73) (real? . G4f72) (real-valued? . G4f71) (real-part . G4f70) (rationalize . G4f6f) (rational? . G4f6e) (rational-valued? . G4f6d) (procedure? . G4f6c) (positive? . G4f6b) (pair? . G4f6a) (odd? . G4f69) (numerator . G4f68) (number? . G4f67) (number->string . G4f66) (null? . G4f65) (not . G4f64) (negative? . G4f63) (nan? . G4f62) (min . G4f61) (max . G4f60) (map . G4f5f) (make-vector . G4f5e) (make-string . G4f5d) (make-rectangular . G4f5c) (make-polar . G4f5b) (magnitude . G4f5a) (log . G4f59) (list? . G4f58) (list-tail . G4f57) (list-ref . G4f56) (list->vector . G4f55) (list->string . G4f54) (list . G4f53) (length . G4f52) (lcm . G4f51) (integer? . G4f50) (integer-valued? . G4f4f) (integer->char . G4f4e) (infinite? . G4f4d) (inexact? . G4f4c) (inexact . G4f4b) (imag-part . G4f4a) (gcd . G4f49) (for-each . G4f48) (floor . G4f47) (finite? . G4f46) (expt . G4f45) (exp . G4f44) (exact? . G4f43) (exact-integer-sqrt . G4f42) (exact . G4f41) (even? . G4f40) (error . G4f3f) (eqv? . G4f3e) (equal? . G4f3d) (eq? . G4f3c) (dynamic-wind . G4f3b) (div0-and-mod0 . G4f3a) (mod0 . G4f39) (div0 . G4f38) (div-and-mod . G4f37) (mod . G4f36) (div . G4f35) (denominator . G4f34) (cos . G4f33) (cons . G4f32) (complex? . G4f31) (char? . G4f30) (char>? . G4f2f) (char>=? . G4f2e) (char=? . G4f2d) (char<? . G4f2c) (char<=? . G4f2b) (char->integer . G4f2a) (ceiling . G4f29) (call-with-values . G4f28) (call/cc . G4f27) (call-with-current-continuation . G4f26) (cddddr . G4f25) (cdddar . G4f24) (cddadr . G4f23) (cddaar . G4f22) (cdaddr . G4f21) (cdadar . G4f20) (cdaadr . G4f1f) (cdaaar . G4f1e) (cadddr . G4f1d) (caddar . G4f1c) (cadadr . G4f1b) (cadaar . G4f1a) (caaddr . G4f19) (caadar . G4f18) (caaadr . G4f17) (caaaar . G4f16) (cdddr . G4f15) (cddar . G4f14) (cdadr . G4f13) (cdaar . G4f12) (caddr . G4f11) (cadar . G4f10) (caadr . G4f0f) (caaar . G4f0e) (cddr . G4f0d) (cdar . G4f0c) (cadr . G4f0b) (caar . G4f0a) (cdr . G4f09) (car . G4f08) (boolean? . G4f07) (boolean=? . G4f06) (atan . G4f05) (assertion-violation . G4f04) (asin . G4f03) (apply . G4f02) (append . G4f01) (angle . G4f00) (acos . G4eff) (abs . G4efe) (/ . G4efd) (* . G4efc) (- . G4efb) (+ . G4efa) (>= . G4ef9) (> . G4ef8) (= . G4ef7) (<= . G4ef6) (< . G4ef5) (library . G4ef4) (export . G4ef3) (&no-nans . G4ef2) (&no-infinities . G4ef1) (&i/o-encoding . G4ef0) (&i/o-decoding . G4eef) (&i/o-port . G4eee) (&i/o-file-does-not-exist . G4eed) (&i/o-file-already-exists . G4eec) (&i/o-file-is-read-only . G4eeb) (&i/o-file-protection . G4eea) (&i/o-filename . G4ee9) (&i/o-invalid-position . G4ee8) (&i/o-write . G4ee7) (&i/o-read . G4ee6) (&i/o . G4ee5) (&undefined . G4ee4) (&syntax . G4ee3) (&lexical . G4ee2) (&implementation-restriction . G4ee1) (&non-continuable . G4ee0) (&who . G4edf) (&irritants . G4ede) (&assertion . G4edd) (&violation . G4edc) (&error . G4edb) (&serious . G4eda) (&warning . G4ed9) (&message . G4ed8) (&condition . G4ed7) (define-condition-type . G4ed6) (define-enumeration . G4ed5) (define-record-type . G4ed4) (parent-rtd . G4ed3) (nongenerative . G4ed2) (opaque . G4ed1) (sealed . G4ed0) (protocol . G4ecf) (parent . G4ece) (immutable . G4ecd) (mutable . G4ecc) (fields . G4ecb) (error-handling-mode . G4eca) (file-options . G4ec9) (buffer-mode . G4ec8) (eol-style . G4ec7) (guard . G4ec6) (unsyntax-splicing . G4ec3) (unsyntax . G4ec2) (unquote-splicing . G4ec1) (unquote . G4ec0) (_ . G4ebf) (else . G4ebe) (=> . G4ebd) (... . G4ebc) (assert . G4ebb) (endianness . G4eba) (or . G4eb7) (and . G4eb6) (do . G4eb5) (cond . G4eb4) (let* . G4eb3) (let . G4eb2) (let*-values . G4eb1) (let-values . G4eb0) (identifier-syntax . G4eaf) (with-syntax . G4eae) (quasisyntax . G4ead) (quasiquote . G4eac) (syntax-rules . G4eab) (include . G4eaa) (record-constructor-descriptor . G4ea8) (record-type-descriptor . G4ea7) (case . G4ea6) (unless . G4ea4) (when . G4ea3) (if . G4ea2) (letrec* . G4ea1) (letrec . G4ea0) (case-lambda . G4e9e) (lambda . G4e9d) (syntax . G4e9c) (syntax-case . G4e9b) (quote . G4e9a) (letrec-syntax . G4e98) (let-syntax . G4e97) (set! . G4e96) (import . G4e95) (begin . G4e94) (define-syntax . G4e92) (define . G4e91)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G5192 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4ec1) (unquote . G4ec0) (delay . G4eb9) (or . G4eb7) (and . G4eb6) (do . G4eb5) (cond . G4eb4) (let* . G4eb3) (let . G4eb2) (quasiquote . G4eac) (syntax-rules . G4eab) (case . G4ea6) (if . G4ea2) (letrec . G4ea0) (lambda . G4e9d) (quote . G4e9a) (letrec-syntax . G4e98) (let-syntax . G4e97) (set! . G4e96) (begin . G4e94) (define-syntax . G4e92) (define . G4e91)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G5193 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5106) (string-ci>=? . G5105) (string-ci=? . G5104) (string-ci<? . G5103) (string-ci<=? . G5102) (char-whitespace? . G5101) (char-upper-case? . G5100) (char-numeric? . G50fe) (char-lower-case? . G50fd) (char-upcase . G50fb) (char-downcase . G50f8) (char-ci>? . G50f7) (char-ci>=? . G50f6) (char-ci=? . G50f5) (char-ci<? . G50f4) (char-ci<=? . G50f3) (char-alphabetic? . G50f2) (call-with-output-file . G50c6) (call-with-input-file . G50c5) (write-char . G50c4) (write . G50c3) (with-output-to-file . G50c2) (with-input-from-file . G50c1) (read-char . G50c0) (read . G50bf) (peek-char . G50be) (open-output-file . G50bd) (open-input-file . G50bc) (newline . G50bb) (display . G50ba) (close-output-port . G50b9) (close-input-port . G50b8) (eof-object . G50b6) (current-output-port . G50b4) (current-input-port . G50b3) (output-port? . G50b2) (input-port? . G50b1) (scheme-report-environment . G315a) (quotient . G5077) (null-environment . G3158) (remainder . G5076) (modulo . G5075) (inexact->exact . G5074) (force . G5073) (exact->inexact . G5072) (string-fill! . G5070) (string-set! . G506f) (set-cdr! . G506e) (set-car! . G506d) (memv . G5067) (memq . G5066) (member . G5064) (assv . G505c) (assq . G505b) (assoc . G5059) (eval . G315e) (zero? . G4f96) (vector? . G4f95) (vector-set! . G4f94) (vector-ref . G4f93) (vector-length . G4f91) (vector-fill! . G4f8f) (vector->list . G4f8e) (vector . G4f8d) (values . G4f8c) (truncate . G4f8b) (tan . G4f8a) (symbol? . G4f89) (symbol->string . G4f87) (substring . G4f86) (string? . G4f85) (string>? . G4f84) (string>=? . G4f83) (string=? . G4f82) (string<? . G4f81) (string<=? . G4f80) (string-ref . G4f7f) (string-length . G4f7e) (string-copy . G4f7c) (string-append . G4f7b) (string->symbol . G4f7a) (string->number . G4f79) (string->list . G4f78) (string . G4f77) (sqrt . G4f76) (sin . G4f75) (round . G4f74) (reverse . G4f73) (real? . G4f72) (real-part . G4f70) (rationalize . G4f6f) (rational? . G4f6e) (procedure? . G4f6c) (positive? . G4f6b) (pair? . G4f6a) (odd? . G4f69) (numerator . G4f68) (number? . G4f67) (number->string . G4f66) (not . G4f64) (negative? . G4f63) (min . G4f61) (max . G4f60) (map . G4f5f) (make-vector . G4f5e) (make-string . G4f5d) (make-rectangular . G4f5c) (make-polar . G4f5b) (magnitude . G4f5a) (log . G4f59) (list? . G4f58) (list-tail . G4f57) (list-ref . G4f56) (list->vector . G4f55) (list->string . G4f54) (list . G4f53) (length . G4f52) (lcm . G4f51) (integer? . G4f50) (integer->char . G4f4e) (inexact? . G4f4c) (imag-part . G4f4a) (gcd . G4f49) (for-each . G4f48) (floor . G4f47) (expt . G4f45) (exp . G4f44) (exact? . G4f43) (even? . G4f40) (eqv? . G4f3e) (equal? . G4f3d) (eq? . G4f3c) (dynamic-wind . G4f3b) (denominator . G4f34) (cos . G4f33) (cons . G4f32) (complex? . G4f31) (char? . G4f30) (char>? . G4f2f) (char>=? . G4f2e) (char=? . G4f2d) (char<? . G4f2c) (char<=? . G4f2b) (char->integer . G4f2a) (ceiling . G4f29) (call-with-values . G4f28) (call-with-current-continuation . G4f26) (cddddr . G4f25) (cdddar . G4f24) (cddadr . G4f23) (cddaar . G4f22) (cdaddr . G4f21) (cdadar . G4f20) (cdaadr . G4f1f) (cdaaar . G4f1e) (cadddr . G4f1d) (caddar . G4f1c) (cadadr . G4f1b) (cadaar . G4f1a) (caaddr . G4f19) (caadar . G4f18) (caaadr . G4f17) (caaaar . G4f16) (cdddr . G4f15) (cddar . G4f14) (cdadr . G4f13) (cdaar . G4f12) (caddr . G4f11) (cadar . G4f10) (caadr . G4f0f) (caaar . G4f0e) (cddr . G4f0d) (cdar . G4f0c) (cadr . G4f0b) (caar . G4f0a) (cdr . G4f09) (car . G4f08) (boolean? . G4f07) (atan . G4f05) (asin . G4f03) (apply . G4f02) (append . G4f01) (angle . G4f00) (acos . G4eff) (abs . G4efe) (/ . G4efd) (* . G4efc) (- . G4efb) (+ . G4efa) (>= . G4ef9) (> . G4ef8) (= . G4ef7) (<= . G4ef6) (< . G4ef5) (unquote-splicing . G4ec1) (unquote . G4ec0) (delay . G4eb9) (or . G4eb7) (and . G4eb6) (do . G4eb5) (cond . G4eb4) (let* . G4eb3) (let . G4eb2) (quasiquote . G4eac) (syntax-rules . G4eab) (case . G4ea6) (if . G4ea2) (letrec . G4ea0) (lambda . G4e9d) (quote . G4e9a) (letrec-syntax . G4e98) (let-syntax . G4e97) (set! . G4e96) (begin . G4e94) (define-syntax . G4e92) (define . G4e91)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G5194 '(psyntax modules) '() '() '() '() '((module . G4e93)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G5195 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G5196 '(rnrs) '(6) '() '() '() '((regexp? . G5151) (string-upcase . G510e) (string-titlecase . G510d) (string-normalize-nfkd . G510c) (string-normalize-nfkc . G510b) (string-normalize-nfd . G510a) (string-normalize-nfc . G5109) (string-foldcase . G5108) (string-downcase . G5107) (string-ci>? . G5106) (string-ci>=? . G5105) (string-ci=? . G5104) (string-ci<? . G5103) (string-ci<=? . G5102) (char-whitespace? . G5101) (char-upper-case? . G5100) (char-title-case? . G50ff) (char-numeric? . G50fe) (char-lower-case? . G50fd) (char-general-category . G50fc) (char-upcase . G50fb) (char-titlecase . G50fa) (char-foldcase . G50f9) (char-downcase . G50f8) (char-ci>? . G50f7) (char-ci>=? . G50f6) (char-ci=? . G50f5) (char-ci<? . G50f4) (char-ci<=? . G50f3) (char-alphabetic? . G50f2) (make-variable-transformer . G2e8b) (identifier? . G3182) (generate-temporaries . G316c) (free-identifier=? . G316e) (syntax->datum . G3186) (datum->syntax . G3184) (bound-identifier=? . G3170) (record-type-descriptor? . G50f1) (record-predicate . G50f0) (record-mutator . G50ef) (record-constructor . G50ee) (record-accessor . G50ed) (make-record-type-descriptor . G50ec) (make-record-constructor-descriptor . G50eb) (record? . G50ea) (record-type-uid . G50e9) (record-type-sealed? . G50e8) (record-type-parent . G50e7) (record-type-opaque? . G50e6) (record-type-name . G50e5) (record-type-generative? . G50e4) (record-type-field-names . G50e3) (record-rtd . G50e2) (record-field-mutable? . G50e1) (delete-file . G50e0) (file-exists? . G50df) (vector-sort! . G50de) (vector-sort . G50dd) (list-sort . G50dc) (symbol-hash . G50db) (string-ci-hash . G50da) (string-hash . G50d9) (equal-hash . G50d8) (hashtable-equivalence-function . G50d7) (make-hashtable . G50d6) (hashtable-hash-function . G50d5) (make-eqv-hashtable . G50d4) (make-eq-hashtable . G50d3) (hashtable? . G50d2) (hashtable-update! . G50d1) (hashtable-size . G50d0) (hashtable-set! . G50cf) (hashtable-ref . G50ce) (hashtable-mutable? . G50cd) (hashtable-keys . G50cc) (hashtable-entries . G50cb) (hashtable-delete! . G50ca) (hashtable-copy . G50c9) (hashtable-contains? . G50c8) (hashtable-clear! . G50c7) (call-with-output-file . G50c6) (call-with-input-file . G50c5) (write-char . G50c4) (write . G50c3) (with-output-to-file . G50c2) (with-input-from-file . G50c1) (read-char . G50c0) (read . G50bf) (peek-char . G50be) (open-output-file . G50bd) (open-input-file . G50bc) (newline . G50bb) (display . G50ba) (close-output-port . G50b9) (close-input-port . G50b8) (eof-object? . G50b7) (eof-object . G50b6) (current-error-port . G50b5) (current-output-port . G50b4) (current-input-port . G50b3) (output-port? . G50b2) (input-port? . G50b1) (utf-8-codec . G50b0) (utf-16-codec . G50af) (transcoder-error-handling-mode . G50ae) (transcoder-eol-style . G50ad) (transcoder-codec . G50ac) (transcoded-port . G50ab) (textual-port? . G50aa) (string->bytevector . G50a9) (standard-output-port . G50a8) (standard-input-port . G50a7) (standard-error-port . G50a6) (set-port-position! . G50a5) (put-u8 . G50a4) (put-string . G50a3) (put-datum . G50a2) (put-char . G50a1) (put-bytevector . G50a0) (port? . G509f) (port-transcoder . G509e) (port-position . G509d) (port-has-set-port-position!? . G509c) (port-has-port-position? . G509b) (port-eof? . G509a) (output-port-buffer-mode . G5099) (open-string-output-port . G5098) (open-string-input-port . G5097) (open-file-output-port . G5096) (open-file-input/output-port . G5095) (open-file-input-port . G5094) (open-bytevector-output-port . G5093) (open-bytevector-input-port . G5092) (native-transcoder . G5091) (native-eol-style . G5090) (make-transcoder . G508f) (latin-1-codec . G508e) (make-i/o-write-error . G4ccf) (make-i/o-read-error . G4cbb) (make-i/o-port-error . G4d66) (make-i/o-invalid-position-error . G4ce4) (make-i/o-filename-error . G4cfd) (make-i/o-file-protection-error . G4d15) (make-i/o-file-is-read-only-error . G4d29) (make-i/o-file-does-not-exist-error . G4d51) (make-i/o-file-already-exists-error . G4d3d) (make-i/o-error . G4ca7) (make-i/o-encoding-error . G4d93) (make-i/o-decoding-error . G4d7e) (make-custom-textual-output-port . G508d) (make-custom-textual-input/output-port . G508c) (make-custom-textual-input-port . G508b) (make-custom-binary-output-port . G508a) (make-custom-binary-input/output-port . G5089) (make-custom-binary-input-port . G5088) (make-bytevector . G5087) (lookahead-u8 . G5086) (lookahead-char . G5085) (i/o-write-error? . G4cd1) (i/o-read-error? . G4cbd) (i/o-port-error? . G4d6a) (i/o-invalid-position-error? . G4ce8) (i/o-filename-error? . G4d01) (i/o-file-protection-error? . G4d17) (i/o-file-is-read-only-error? . G4d2b) (i/o-file-does-not-exist-error? . G4d53) (i/o-file-already-exists-error? . G4d3f) (i/o-error? . G4ca9) (i/o-error-port . G4d6c) (i/o-error-filename . G4d03) (i/o-encoding-error? . G4d97) (i/o-encoding-error-char . G4d99) (i/o-decoding-error? . G4d80) (get-u8 . G5084) (get-string-n! . G5083) (get-string-n . G5082) (get-string-all . G5081) (get-line . G5080) (get-datum . G507f) (get-char . G507e) (get-bytevector-some . G507d) (get-bytevector-n! . G507c) (get-bytevector-n . G507b) (get-bytevector-all . G507a) (flush-output-port . G5079) (close-port . G5078) (exit . G5071) (command-line . G4df2) (remove . G506c) (remv . G506b) (remp . G506a) (remq . G5069) (partition . G5068) (memv . G5067) (memq . G5066) (memp . G5065) (member . G5064) (exists . G5063) (for-all . G5062) (fold-right . G5061) (fold-left . G5060) (find . G505f) (filter . G505e) (cons* . G505d) (assv . G505c) (assq . G505b) (assp . G505a) (assoc . G5059) (call-with-string-output-port . G5058) (call-with-port . G5057) (call-with-bytevector-output-port . G5056) (bytevector->string . G5055) (buffer-mode? . G5054) (binary-port? . G5053) (with-exception-handler . G5052) (raise-continuable . G5051) (raise . G5050) (make-enumeration . G504f) (enum-set=? . G504e) (enum-set-universe . G504d) (enum-set-union . G504c) (enum-set-subset? . G504b) (enum-set-projection . G504a) (enum-set-member? . G5049) (enum-set-intersection . G5048) (enum-set-indexer . G5047) (enum-set-difference . G5046) (enum-set-constructor . G5045) (enum-set-complement . G5044) (enum-set->list . G5043) (who-condition? . G4b91) (warning? . G4b11) (violation? . G4b4d) (undefined-violation? . G4c01) (syntax-violation? . G4be9) (syntax-violation-subform . G4bed) (syntax-violation-form . G4beb) (syntax-violation . G3180) (simple-conditions . G5042) (serious-condition? . G4b25) (non-continuable-violation? . G4ba7) (message-condition? . G4afb) (make-who-condition . G4b8d) (make-warning . G4b0f) (make-violation . G4b4b) (make-undefined-violation . G4bff) (make-syntax-violation . G4be3) (make-serious-condition . G4b23) (make-non-continuable-violation . G4ba5) (make-message-condition . G4af7) (make-lexical-violation . G4bcd) (make-irritants-condition . G4b74) (make-implementation-restriction-violation . G4bb9) (make-error . G4b37) (make-assertion-violation . G4b5f) (lexical-violation? . G4bcf) (irritants-condition? . G4b78) (implementation-restriction-violation? . G4bbb) (error? . G4b39) (condition-who . G4b93) (condition-predicate . G5041) (condition-message . G4afd) (condition-irritants . G4b7a) (condition-accessor . G5040) (condition . G503f) (assertion-violation? . G4b61) (condition? . G503e) (utf32->string . G503d) (utf16->string . G503c) (utf8->string . G503b) (uint-list->bytevector . G503a) (u8-list->bytevector . G5039) (string->utf8 . G5038) (string->utf32 . G5037) (string->utf16 . G5036) (sint-list->bytevector . G5035) (native-endianness . G5034) (bytevector? . G5033) (bytevector=? . G5032) (bytevector-uint-set! . G5031) (bytevector-uint-ref . G5030) (bytevector-u8-set! . G502f) (bytevector-u8-ref . G502e) (bytevector-u64-set! . G502d) (bytevector-u64-ref . G502c) (bytevector-u64-native-set! . G502b) (bytevector-u64-native-ref . G502a) (bytevector-u32-set! . G5029) (bytevector-u32-ref . G5028) (bytevector-u32-native-set! . G5027) (bytevector-u32-native-ref . G5026) (bytevector-u16-set! . G5025) (bytevector-u16-ref . G5024) (bytevector-u16-native-set! . G5023) (bytevector-u16-native-ref . G5022) (bytevector-sint-set! . G5021) (bytevector-sint-ref . G5020) (bytevector-s8-set! . G501f) (bytevector-s8-ref . G501e) (bytevector-s64-set! . G501d) (bytevector-s64-ref . G501c) (bytevector-s64-native-set! . G501b) (bytevector-s64-native-ref . G501a) (bytevector-s32-set! . G5019) (bytevector-s32-ref . G5018) (bytevector-s32-native-set! . G5017) (bytevector-s32-native-ref . G5016) (bytevector-s16-set! . G5015) (bytevector-s16-ref . G5014) (bytevector-s16-native-set! . G5013) (bytevector-s16-native-ref . G5012) (bytevector-length . G5011) (bytevector-ieee-single-ref . G5010) (bytevector-ieee-single-set! . G500f) (bytevector-ieee-single-native-set! . G500e) (bytevector-ieee-single-native-ref . G500d) (bytevector-ieee-double-set! . G500c) (bytevector-ieee-double-ref . G500b) (bytevector-ieee-double-native-set! . G500a) (bytevector-ieee-double-native-ref . G5009) (bytevector-fill! . G5008) (bytevector-copy! . G5007) (bytevector-copy . G5006) (bytevector->uint-list . G5005) (bytevector->u8-list . G5004) (bytevector->sint-list . G5003) (no-nans-violation? . G4c29) (no-infinities-violation? . G4c15) (make-no-nans-violation . G4c27) (make-no-infinities-violation . G4c13) (real->flonum . G5002) (flzero? . G5001) (fltruncate . G5000) (fltan . G4fff) (flsqrt . G4ffe) (flsin . G4ffd) (flround . G4ffc) (flpositive? . G4ffb) (flonum? . G4ffa) (flodd? . G4ff9) (flnumerator . G4ff8) (flnegative? . G4ff7) (flnan? . G4ff6) (flmod0 . G4ff5) (flmod . G4ff4) (flmin . G4ff3) (flmax . G4ff2) (fllog . G4ff1) (flinteger? . G4ff0) (flinfinite? . G4fef) (flfloor . G4fee) (flfinite? . G4fed) (flexpt . G4fec) (flexp . G4feb) (fleven? . G4fea) (fldiv0-and-mod0 . G4fe9) (fldiv0 . G4fe8) (fldiv-and-mod . G4fe7) (fldiv . G4fe6) (fldenominator . G4fe5) (flcos . G4fe4) (flceiling . G4fe3) (flatan . G4fe2) (flasin . G4fe1) (flacos . G4fe0) (flabs . G4fdf) (fl>? . G4fde) (fl>=? . G4fdd) (fl=? . G4fdc) (fl<? . G4fdb) (fl<=? . G4fda) (fl/ . G4fd9) (fl- . G4fd8) (fl+ . G4fd7) (fl* . G4fd6) (fixnum->flonum . G4fd5) (fxzero? . G4fd4) (fxxor . G4fd3) (fxrotate-bit-field . G4fd2) (fxreverse-bit-field . G4fd1) (fxpositive? . G4fd0) (fxodd? . G4fcf) (fxnot . G4fce) (fxnegative? . G4fcd) (fxmod0 . G4fcc) (fxmod . G4fcb) (fxmin . G4fca) (fxmax . G4fc9) (fxlength . G4fc8) (fxior . G4fc7) (fxif . G4fc6) (fxfirst-bit-set . G4fc5) (fxeven? . G4fc4) (fxdiv0-and-mod0 . G4fc3) (fxdiv0 . G4fc2) (fxdiv-and-mod . G4fc1) (fxdiv . G4fc0) (fxcopy-bit-field . G4fbf) (fxcopy-bit . G4fbe) (fxbit-set? . G4fbd) (fxbit-field . G4fbc) (fxbit-count . G4fbb) (fxarithmetic-shift-right . G4fba) (fxarithmetic-shift-left . G4fb9) (fxarithmetic-shift . G4fb8) (fxand . G4fb7) (fx>? . G4fb6) (fx>=? . G4fb5) (fx=? . G4fb4) (fx<? . G4fb3) (fx<=? . G4fb2) (fx-/carry . G4fb1) (fx- . G4fb0) (fx+/carry . G4faf) (fx+ . G4fae) (fx*/carry . G4fad) (fx* . G4fac) (greatest-fixnum . G4fab) (least-fixnum . G4faa) (fixnum-width . G4fa9) (fixnum? . G4fa8) (bitwise-rotate-bit-field . G4fa7) (bitwise-reverse-bit-field . G4fa6) (bitwise-length . G4fa5) (bitwise-if . G4fa4) (bitwise-first-bit-set . G4fa3) (bitwise-copy-bit-field . G4fa2) (bitwise-copy-bit . G4fa1) (bitwise-bit-set? . G4fa0) (bitwise-bit-field . G4f9f) (bitwise-bit-count . G4f9e) (bitwise-xor . G4f9d) (bitwise-ior . G4f9c) (bitwise-and . G4f9b) (bitwise-not . G4f9a) (bitwise-arithmetic-shift-right . G4f99) (bitwise-arithmetic-shift-left . G4f98) (bitwise-arithmetic-shift . G4f97) (zero? . G4f96) (vector? . G4f95) (vector-set! . G4f94) (vector-ref . G4f93) (vector-map . G4f92) (vector-length . G4f91) (vector-for-each . G4f90) (vector-fill! . G4f8f) (vector->list . G4f8e) (vector . G4f8d) (values . G4f8c) (truncate . G4f8b) (tan . G4f8a) (symbol? . G4f89) (symbol=? . G4f88) (symbol->string . G4f87) (substring . G4f86) (string? . G4f85) (string>? . G4f84) (string>=? . G4f83) (string=? . G4f82) (string<? . G4f81) (string<=? . G4f80) (string-ref . G4f7f) (string-length . G4f7e) (string-for-each . G4f7d) (string-copy . G4f7c) (string-append . G4f7b) (string->symbol . G4f7a) (string->number . G4f79) (string->list . G4f78) (string . G4f77) (sqrt . G4f76) (sin . G4f75) (round . G4f74) (reverse . G4f73) (real? . G4f72) (real-valued? . G4f71) (real-part . G4f70) (rationalize . G4f6f) (rational? . G4f6e) (rational-valued? . G4f6d) (procedure? . G4f6c) (positive? . G4f6b) (pair? . G4f6a) (odd? . G4f69) (numerator . G4f68) (number? . G4f67) (number->string . G4f66) (null? . G4f65) (not . G4f64) (negative? . G4f63) (nan? . G4f62) (min . G4f61) (max . G4f60) (map . G4f5f) (make-vector . G4f5e) (make-string . G4f5d) (make-rectangular . G4f5c) (make-polar . G4f5b) (magnitude . G4f5a) (log . G4f59) (list? . G4f58) (list-tail . G4f57) (list-ref . G4f56) (list->vector . G4f55) (list->string . G4f54) (list . G4f53) (length . G4f52) (lcm . G4f51) (integer? . G4f50) (integer-valued? . G4f4f) (integer->char . G4f4e) (infinite? . G4f4d) (inexact? . G4f4c) (inexact . G4f4b) (imag-part . G4f4a) (gcd . G4f49) (for-each . G4f48) (floor . G4f47) (finite? . G4f46) (expt . G4f45) (exp . G4f44) (exact? . G4f43) (exact-integer-sqrt . G4f42) (exact . G4f41) (even? . G4f40) (error . G4f3f) (eqv? . G4f3e) (equal? . G4f3d) (eq? . G4f3c) (dynamic-wind . G4f3b) (div0-and-mod0 . G4f3a) (mod0 . G4f39) (div0 . G4f38) (div-and-mod . G4f37) (mod . G4f36) (div . G4f35) (denominator . G4f34) (cos . G4f33) (cons . G4f32) (complex? . G4f31) (char? . G4f30) (char>? . G4f2f) (char>=? . G4f2e) (char=? . G4f2d) (char<? . G4f2c) (char<=? . G4f2b) (char->integer . G4f2a) (ceiling . G4f29) (call-with-values . G4f28) (call/cc . G4f27) (call-with-current-continuation . G4f26) (cddddr . G4f25) (cdddar . G4f24) (cddadr . G4f23) (cddaar . G4f22) (cdaddr . G4f21) (cdadar . G4f20) (cdaadr . G4f1f) (cdaaar . G4f1e) (cadddr . G4f1d) (caddar . G4f1c) (cadadr . G4f1b) (cadaar . G4f1a) (caaddr . G4f19) (caadar . G4f18) (caaadr . G4f17) (caaaar . G4f16) (cdddr . G4f15) (cddar . G4f14) (cdadr . G4f13) (cdaar . G4f12) (caddr . G4f11) (cadar . G4f10) (caadr . G4f0f) (caaar . G4f0e) (cddr . G4f0d) (cdar . G4f0c) (cadr . G4f0b) (caar . G4f0a) (cdr . G4f09) (car . G4f08) (boolean? . G4f07) (boolean=? . G4f06) (atan . G4f05) (assertion-violation . G4f04) (asin . G4f03) (apply . G4f02) (append . G4f01) (angle . G4f00) (acos . G4eff) (abs . G4efe) (/ . G4efd) (* . G4efc) (- . G4efb) (+ . G4efa) (>= . G4ef9) (> . G4ef8) (= . G4ef7) (<= . G4ef6) (< . G4ef5) (&no-nans . G4ef2) (&no-infinities . G4ef1) (&i/o-encoding . G4ef0) (&i/o-decoding . G4eef) (&i/o-port . G4eee) (&i/o-file-does-not-exist . G4eed) (&i/o-file-already-exists . G4eec) (&i/o-file-is-read-only . G4eeb) (&i/o-file-protection . G4eea) (&i/o-filename . G4ee9) (&i/o-invalid-position . G4ee8) (&i/o-write . G4ee7) (&i/o-read . G4ee6) (&i/o . G4ee5) (&undefined . G4ee4) (&syntax . G4ee3) (&lexical . G4ee2) (&implementation-restriction . G4ee1) (&non-continuable . G4ee0) (&who . G4edf) (&irritants . G4ede) (&assertion . G4edd) (&violation . G4edc) (&error . G4edb) (&serious . G4eda) (&warning . G4ed9) (&message . G4ed8) (&condition . G4ed7) (define-condition-type . G4ed6) (define-enumeration . G4ed5) (define-record-type . G4ed4) (parent-rtd . G4ed3) (nongenerative . G4ed2) (opaque . G4ed1) (sealed . G4ed0) (protocol . G4ecf) (parent . G4ece) (immutable . G4ecd) (mutable . G4ecc) (fields . G4ecb) (error-handling-mode . G4eca) (file-options . G4ec9) (buffer-mode . G4ec8) (eol-style . G4ec7) (guard . G4ec6) (unsyntax-splicing . G4ec3) (unsyntax . G4ec2) (unquote-splicing . G4ec1) (unquote . G4ec0) (_ . G4ebf) (else . G4ebe) (=> . G4ebd) (... . G4ebc) (assert . G4ebb) (endianness . G4eba) (or . G4eb7) (and . G4eb6) (do . G4eb5) (cond . G4eb4) (let* . G4eb3) (let . G4eb2) (let*-values . G4eb1) (let-values . G4eb0) (identifier-syntax . G4eaf) (with-syntax . G4eae) (quasisyntax . G4ead) (quasiquote . G4eac) (syntax-rules . G4eab) (record-constructor-descriptor . G4ea8) (record-type-descriptor . G4ea7) (case . G4ea6) (unless . G4ea4) (when . G4ea3) (if . G4ea2) (letrec* . G4ea1) (letrec . G4ea0) (case-lambda . G4e9e) (lambda . G4e9d) (syntax . G4e9c) (syntax-case . G4e9b) (quote . G4e9a) (letrec-syntax . G4e98) (let-syntax . G4e97) (set! . G4e96) (begin . G4e94) (define-syntax . G4e92) (define . G4e91)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G5197 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G315a) (quotient . G5077) (null-environment . G3158) (remainder . G5076) (modulo . G5075) (inexact->exact . G5074) (force . G5073) (exact->inexact . G5072) (delay . G4eb9)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G5198 '(rnrs control) '(6) '() '() '() '((do . G4eb5) (unless . G4ea4) (when . G4ea3) (case-lambda . G4e9e)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G5199 '(rnrs eval) '(6) '() '() '() '((eval . G315e) (environment . G3156)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G519a '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G506e) (set-car! . G506d)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G519b '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G5070) (string-set! . G506f)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G519c '(rnrs programs) '(6) '() '() '() '((exit . G5071) (command-line . G4df2)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G519d '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e8b) (identifier? . G3182) (generate-temporaries . G316c) (free-identifier=? . G316e) (syntax->datum . G3186) (datum->syntax . G3184) (bound-identifier=? . G3170) (syntax-violation . G3180) (unsyntax-splicing . G4ec3) (unsyntax . G4ec2) (_ . G4ebf) (... . G4ebc) (with-syntax . G4eae) (quasisyntax . G4ead) (syntax . G4e9c) (syntax-case . G4e9b)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G519e '(rnrs files) '(6) '() '() '() '((delete-file . G50e0) (file-exists? . G50df) (make-i/o-write-error . G4ccf) (make-i/o-read-error . G4cbb) (make-i/o-port-error . G4d66) (make-i/o-invalid-position-error . G4ce4) (make-i/o-filename-error . G4cfd) (make-i/o-file-protection-error . G4d15) (make-i/o-file-is-read-only-error . G4d29) (make-i/o-file-does-not-exist-error . G4d51) (make-i/o-file-already-exists-error . G4d3d) (make-i/o-error . G4ca7) (i/o-write-error? . G4cd1) (i/o-read-error? . G4cbd) (i/o-port-error? . G4d6a) (i/o-invalid-position-error? . G4ce8) (i/o-filename-error? . G4d01) (i/o-file-protection-error? . G4d17) (i/o-file-is-read-only-error? . G4d2b) (i/o-file-does-not-exist-error? . G4d53) (i/o-file-already-exists-error? . G4d3f) (i/o-error? . G4ca9) (i/o-error-port . G4d6c) (i/o-error-filename . G4d03) (&i/o-port . G4eee) (&i/o-file-does-not-exist . G4eed) (&i/o-file-already-exists . G4eec) (&i/o-file-is-read-only . G4eeb) (&i/o-file-protection . G4eea) (&i/o-filename . G4ee9) (&i/o-invalid-position . G4ee8) (&i/o-write . G4ee7) (&i/o-read . G4ee6) (&i/o . G4ee5)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G519f '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G50de) (vector-sort . G50dd) (list-sort . G50dc)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a0 '(rnrs base) '(6) '() '() '() '((zero? . G4f96) (vector? . G4f95) (vector-set! . G4f94) (vector-ref . G4f93) (vector-map . G4f92) (vector-length . G4f91) (vector-for-each . G4f90) (vector-fill! . G4f8f) (vector->list . G4f8e) (vector . G4f8d) (values . G4f8c) (truncate . G4f8b) (tan . G4f8a) (symbol? . G4f89) (symbol=? . G4f88) (symbol->string . G4f87) (substring . G4f86) (string? . G4f85) (string>? . G4f84) (string>=? . G4f83) (string=? . G4f82) (string<? . G4f81) (string<=? . G4f80) (string-ref . G4f7f) (string-length . G4f7e) (string-for-each . G4f7d) (string-copy . G4f7c) (string-append . G4f7b) (string->symbol . G4f7a) (string->number . G4f79) (string->list . G4f78) (string . G4f77) (sqrt . G4f76) (sin . G4f75) (round . G4f74) (reverse . G4f73) (real? . G4f72) (real-valued? . G4f71) (real-part . G4f70) (rationalize . G4f6f) (rational? . G4f6e) (rational-valued? . G4f6d) (procedure? . G4f6c) (positive? . G4f6b) (pair? . G4f6a) (odd? . G4f69) (numerator . G4f68) (number? . G4f67) (number->string . G4f66) (null? . G4f65) (not . G4f64) (negative? . G4f63) (nan? . G4f62) (min . G4f61) (max . G4f60) (map . G4f5f) (make-vector . G4f5e) (make-string . G4f5d) (make-rectangular . G4f5c) (make-polar . G4f5b) (magnitude . G4f5a) (log . G4f59) (list? . G4f58) (list-tail . G4f57) (list-ref . G4f56) (list->vector . G4f55) (list->string . G4f54) (list . G4f53) (length . G4f52) (lcm . G4f51) (integer? . G4f50) (integer-valued? . G4f4f) (integer->char . G4f4e) (infinite? . G4f4d) (inexact? . G4f4c) (inexact . G4f4b) (imag-part . G4f4a) (gcd . G4f49) (for-each . G4f48) (floor . G4f47) (finite? . G4f46) (expt . G4f45) (exp . G4f44) (exact? . G4f43) (exact-integer-sqrt . G4f42) (exact . G4f41) (even? . G4f40) (error . G4f3f) (eqv? . G4f3e) (equal? . G4f3d) (eq? . G4f3c) (dynamic-wind . G4f3b) (div0-and-mod0 . G4f3a) (mod0 . G4f39) (div0 . G4f38) (div-and-mod . G4f37) (mod . G4f36) (div . G4f35) (denominator . G4f34) (cos . G4f33) (cons . G4f32) (complex? . G4f31) (char? . G4f30) (char>? . G4f2f) (char>=? . G4f2e) (char=? . G4f2d) (char<? . G4f2c) (char<=? . G4f2b) (char->integer . G4f2a) (ceiling . G4f29) (call-with-values . G4f28) (call/cc . G4f27) (call-with-current-continuation . G4f26) (cddddr . G4f25) (cdddar . G4f24) (cddadr . G4f23) (cddaar . G4f22) (cdaddr . G4f21) (cdadar . G4f20) (cdaadr . G4f1f) (cdaaar . G4f1e) (cadddr . G4f1d) (caddar . G4f1c) (cadadr . G4f1b) (cadaar . G4f1a) (caaddr . G4f19) (caadar . G4f18) (caaadr . G4f17) (caaaar . G4f16) (cdddr . G4f15) (cddar . G4f14) (cdadr . G4f13) (cdaar . G4f12) (caddr . G4f11) (cadar . G4f10) (caadr . G4f0f) (caaar . G4f0e) (cddr . G4f0d) (cdar . G4f0c) (cadr . G4f0b) (caar . G4f0a) (cdr . G4f09) (car . G4f08) (boolean? . G4f07) (boolean=? . G4f06) (atan . G4f05) (assertion-violation . G4f04) (asin . G4f03) (apply . G4f02) (append . G4f01) (angle . G4f00) (acos . G4eff) (abs . G4efe) (/ . G4efd) (* . G4efc) (- . G4efb) (+ . G4efa) (>= . G4ef9) (> . G4ef8) (= . G4ef7) (<= . G4ef6) (< . G4ef5) (unquote-splicing . G4ec1) (unquote . G4ec0) (_ . G4ebf) (else . G4ebe) (=> . G4ebd) (... . G4ebc) (assert . G4ebb) (or . G4eb7) (and . G4eb6) (cond . G4eb4) (let* . G4eb3) (let . G4eb2) (let*-values . G4eb1) (let-values . G4eb0) (identifier-syntax . G4eaf) (quasiquote . G4eac) (syntax-rules . G4eab) (case . G4ea6) (if . G4ea2) (letrec* . G4ea1) (letrec . G4ea0) (lambda . G4e9d) (quote . G4e9a) (letrec-syntax . G4e98) (let-syntax . G4e97) (set! . G4e96) (begin . G4e94) (define-syntax . G4e92) (define . G4e91)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a1 '(rnrs lists) '(6) '() '() '() '((remove . G506c) (remv . G506b) (remp . G506a) (remq . G5069) (partition . G5068) (memv . G5067) (memq . G5066) (memp . G5065) (member . G5064) (exists . G5063) (for-all . G5062) (fold-right . G5061) (fold-left . G5060) (find . G505f) (filter . G505e) (cons* . G505d) (assv . G505c) (assq . G505b) (assp . G505a) (assoc . G5059)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a2 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G50c6) (call-with-input-file . G50c5) (write-char . G50c4) (write . G50c3) (with-output-to-file . G50c2) (with-input-from-file . G50c1) (read-char . G50c0) (read . G50bf) (peek-char . G50be) (open-output-file . G50bd) (open-input-file . G50bc) (newline . G50bb) (display . G50ba) (close-output-port . G50b9) (close-input-port . G50b8) (eof-object? . G50b7) (eof-object . G50b6) (current-error-port . G50b5) (current-output-port . G50b4) (current-input-port . G50b3) (output-port? . G50b2) (input-port? . G50b1) (make-i/o-write-error . G4ccf) (make-i/o-read-error . G4cbb) (make-i/o-port-error . G4d66) (make-i/o-invalid-position-error . G4ce4) (make-i/o-filename-error . G4cfd) (make-i/o-file-protection-error . G4d15) (make-i/o-file-is-read-only-error . G4d29) (make-i/o-file-does-not-exist-error . G4d51) (make-i/o-file-already-exists-error . G4d3d) (make-i/o-error . G4ca7) (i/o-write-error? . G4cd1) (i/o-read-error? . G4cbd) (i/o-port-error? . G4d6a) (i/o-invalid-position-error? . G4ce8) (i/o-filename-error? . G4d01) (i/o-file-protection-error? . G4d17) (i/o-file-is-read-only-error? . G4d2b) (i/o-file-does-not-exist-error? . G4d53) (i/o-file-already-exists-error? . G4d3f) (i/o-error? . G4ca9) (i/o-error-port . G4d6c) (i/o-error-filename . G4d03) (&i/o-port . G4eee) (&i/o-file-does-not-exist . G4eed) (&i/o-file-already-exists . G4eec) (&i/o-file-is-read-only . G4eeb) (&i/o-file-protection . G4eea) (&i/o-filename . G4ee9) (&i/o-invalid-position . G4ee8) (&i/o-write . G4ee7) (&i/o-read . G4ee6) (&i/o . G4ee5)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a3 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G5087) (utf32->string . G503d) (utf16->string . G503c) (utf8->string . G503b) (uint-list->bytevector . G503a) (u8-list->bytevector . G5039) (string->utf8 . G5038) (string->utf32 . G5037) (string->utf16 . G5036) (sint-list->bytevector . G5035) (native-endianness . G5034) (bytevector? . G5033) (bytevector=? . G5032) (bytevector-uint-set! . G5031) (bytevector-uint-ref . G5030) (bytevector-u8-set! . G502f) (bytevector-u8-ref . G502e) (bytevector-u64-set! . G502d) (bytevector-u64-ref . G502c) (bytevector-u64-native-set! . G502b) (bytevector-u64-native-ref . G502a) (bytevector-u32-set! . G5029) (bytevector-u32-ref . G5028) (bytevector-u32-native-set! . G5027) (bytevector-u32-native-ref . G5026) (bytevector-u16-set! . G5025) (bytevector-u16-ref . G5024) (bytevector-u16-native-set! . G5023) (bytevector-u16-native-ref . G5022) (bytevector-sint-set! . G5021) (bytevector-sint-ref . G5020) (bytevector-s8-set! . G501f) (bytevector-s8-ref . G501e) (bytevector-s64-set! . G501d) (bytevector-s64-ref . G501c) (bytevector-s64-native-set! . G501b) (bytevector-s64-native-ref . G501a) (bytevector-s32-set! . G5019) (bytevector-s32-ref . G5018) (bytevector-s32-native-set! . G5017) (bytevector-s32-native-ref . G5016) (bytevector-s16-set! . G5015) (bytevector-s16-ref . G5014) (bytevector-s16-native-set! . G5013) (bytevector-s16-native-ref . G5012) (bytevector-length . G5011) (bytevector-ieee-single-ref . G5010) (bytevector-ieee-single-set! . G500f) (bytevector-ieee-single-native-set! . G500e) (bytevector-ieee-single-native-ref . G500d) (bytevector-ieee-double-set! . G500c) (bytevector-ieee-double-ref . G500b) (bytevector-ieee-double-native-set! . G500a) (bytevector-ieee-double-native-ref . G5009) (bytevector-fill! . G5008) (bytevector-copy! . G5007) (bytevector-copy . G5006) (bytevector->uint-list . G5005) (bytevector->u8-list . G5004) (bytevector->sint-list . G5003) (endianness . G4eba)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a4 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G510e) (string-titlecase . G510d) (string-normalize-nfkd . G510c) (string-normalize-nfkc . G510b) (string-normalize-nfd . G510a) (string-normalize-nfc . G5109) (string-foldcase . G5108) (string-downcase . G5107) (string-ci>? . G5106) (string-ci>=? . G5105) (string-ci=? . G5104) (string-ci<? . G5103) (string-ci<=? . G5102) (char-whitespace? . G5101) (char-upper-case? . G5100) (char-title-case? . G50ff) (char-numeric? . G50fe) (char-lower-case? . G50fd) (char-general-category . G50fc) (char-upcase . G50fb) (char-titlecase . G50fa) (char-foldcase . G50f9) (char-downcase . G50f8) (char-ci>? . G50f7) (char-ci>=? . G50f6) (char-ci=? . G50f5) (char-ci<? . G50f4) (char-ci<=? . G50f3) (char-alphabetic? . G50f2)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a5 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G5052) (raise-continuable . G5051) (raise . G5050) (guard . G4ec6) (else . G4ebe) (=> . G4ebd)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a6 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4fa7) (bitwise-reverse-bit-field . G4fa6) (bitwise-length . G4fa5) (bitwise-if . G4fa4) (bitwise-first-bit-set . G4fa3) (bitwise-copy-bit-field . G4fa2) (bitwise-copy-bit . G4fa1) (bitwise-bit-set? . G4fa0) (bitwise-bit-field . G4f9f) (bitwise-bit-count . G4f9e) (bitwise-xor . G4f9d) (bitwise-ior . G4f9c) (bitwise-and . G4f9b) (bitwise-not . G4f9a) (bitwise-arithmetic-shift-right . G4f99) (bitwise-arithmetic-shift-left . G4f98) (bitwise-arithmetic-shift . G4f97)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a7 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4fd4) (fxxor . G4fd3) (fxrotate-bit-field . G4fd2) (fxreverse-bit-field . G4fd1) (fxpositive? . G4fd0) (fxodd? . G4fcf) (fxnot . G4fce) (fxnegative? . G4fcd) (fxmod0 . G4fcc) (fxmod . G4fcb) (fxmin . G4fca) (fxmax . G4fc9) (fxlength . G4fc8) (fxior . G4fc7) (fxif . G4fc6) (fxfirst-bit-set . G4fc5) (fxeven? . G4fc4) (fxdiv0-and-mod0 . G4fc3) (fxdiv0 . G4fc2) (fxdiv-and-mod . G4fc1) (fxdiv . G4fc0) (fxcopy-bit-field . G4fbf) (fxcopy-bit . G4fbe) (fxbit-set? . G4fbd) (fxbit-field . G4fbc) (fxbit-count . G4fbb) (fxarithmetic-shift-right . G4fba) (fxarithmetic-shift-left . G4fb9) (fxarithmetic-shift . G4fb8) (fxand . G4fb7) (fx>? . G4fb6) (fx>=? . G4fb5) (fx=? . G4fb4) (fx<? . G4fb3) (fx<=? . G4fb2) (fx-/carry . G4fb1) (fx- . G4fb0) (fx+/carry . G4faf) (fx+ . G4fae) (fx*/carry . G4fad) (fx* . G4fac) (greatest-fixnum . G4fab) (least-fixnum . G4faa) (fixnum-width . G4fa9) (fixnum? . G4fa8)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a8 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c29) (no-infinities-violation? . G4c15) (make-no-nans-violation . G4c27) (make-no-infinities-violation . G4c13) (real->flonum . G5002) (flzero? . G5001) (fltruncate . G5000) (fltan . G4fff) (flsqrt . G4ffe) (flsin . G4ffd) (flround . G4ffc) (flpositive? . G4ffb) (flonum? . G4ffa) (flodd? . G4ff9) (flnumerator . G4ff8) (flnegative? . G4ff7) (flnan? . G4ff6) (flmod0 . G4ff5) (flmod . G4ff4) (flmin . G4ff3) (flmax . G4ff2) (fllog . G4ff1) (flinteger? . G4ff0) (flinfinite? . G4fef) (flfloor . G4fee) (flfinite? . G4fed) (flexpt . G4fec) (flexp . G4feb) (fleven? . G4fea) (fldiv0-and-mod0 . G4fe9) (fldiv0 . G4fe8) (fldiv-and-mod . G4fe7) (fldiv . G4fe6) (fldenominator . G4fe5) (flcos . G4fe4) (flceiling . G4fe3) (flatan . G4fe2) (flasin . G4fe1) (flacos . G4fe0) (flabs . G4fdf) (fl>? . G4fde) (fl>=? . G4fdd) (fl=? . G4fdc) (fl<? . G4fdb) (fl<=? . G4fda) (fl/ . G4fd9) (fl- . G4fd8) (fl+ . G4fd7) (fl* . G4fd6) (fixnum->flonum . G4fd5) (&no-nans . G4ef2) (&no-infinities . G4ef1)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51a9 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G50db) (string-ci-hash . G50da) (string-hash . G50d9) (equal-hash . G50d8) (hashtable-equivalence-function . G50d7) (make-hashtable . G50d6) (hashtable-hash-function . G50d5) (make-eqv-hashtable . G50d4) (make-eq-hashtable . G50d3) (hashtable? . G50d2) (hashtable-update! . G50d1) (hashtable-size . G50d0) (hashtable-set! . G50cf) (hashtable-ref . G50ce) (hashtable-mutable? . G50cd) (hashtable-keys . G50cc) (hashtable-entries . G50cb) (hashtable-delete! . G50ca) (hashtable-copy . G50c9) (hashtable-contains? . G50c8) (hashtable-clear! . G50c7)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51aa '(rnrs io ports) '(6) '() '() '() '((eof-object? . G50b7) (eof-object . G50b6) (current-error-port . G50b5) (current-output-port . G50b4) (current-input-port . G50b3) (output-port? . G50b2) (input-port? . G50b1) (utf-8-codec . G50b0) (utf-16-codec . G50af) (transcoder-error-handling-mode . G50ae) (transcoder-eol-style . G50ad) (transcoder-codec . G50ac) (transcoded-port . G50ab) (textual-port? . G50aa) (string->bytevector . G50a9) (standard-output-port . G50a8) (standard-input-port . G50a7) (standard-error-port . G50a6) (set-port-position! . G50a5) (put-u8 . G50a4) (put-string . G50a3) (put-datum . G50a2) (put-char . G50a1) (put-bytevector . G50a0) (port? . G509f) (port-transcoder . G509e) (port-position . G509d) (port-has-set-port-position!? . G509c) (port-has-port-position? . G509b) (port-eof? . G509a) (output-port-buffer-mode . G5099) (open-string-output-port . G5098) (open-string-input-port . G5097) (open-file-output-port . G5096) (open-file-input/output-port . G5095) (open-file-input-port . G5094) (open-bytevector-output-port . G5093) (open-bytevector-input-port . G5092) (native-transcoder . G5091) (native-eol-style . G5090) (make-transcoder . G508f) (latin-1-codec . G508e) (make-i/o-write-error . G4ccf) (make-i/o-read-error . G4cbb) (make-i/o-port-error . G4d66) (make-i/o-invalid-position-error . G4ce4) (make-i/o-filename-error . G4cfd) (make-i/o-file-protection-error . G4d15) (make-i/o-file-is-read-only-error . G4d29) (make-i/o-file-does-not-exist-error . G4d51) (make-i/o-file-already-exists-error . G4d3d) (make-i/o-error . G4ca7) (make-i/o-encoding-error . G4d93) (make-i/o-decoding-error . G4d7e) (make-custom-textual-output-port . G508d) (make-custom-textual-input/output-port . G508c) (make-custom-textual-input-port . G508b) (make-custom-binary-output-port . G508a) (make-custom-binary-input/output-port . G5089) (make-custom-binary-input-port . G5088) (lookahead-u8 . G5086) (lookahead-char . G5085) (i/o-write-error? . G4cd1) (i/o-read-error? . G4cbd) (i/o-port-error? . G4d6a) (i/o-invalid-position-error? . G4ce8) (i/o-filename-error? . G4d01) (i/o-file-protection-error? . G4d17) (i/o-file-is-read-only-error? . G4d2b) (i/o-file-does-not-exist-error? . G4d53) (i/o-file-already-exists-error? . G4d3f) (i/o-error? . G4ca9) (i/o-error-port . G4d6c) (i/o-error-filename . G4d03) (i/o-encoding-error? . G4d97) (i/o-encoding-error-char . G4d99) (i/o-decoding-error? . G4d80) (get-u8 . G5084) (get-string-n! . G5083) (get-string-n . G5082) (get-string-all . G5081) (get-line . G5080) (get-datum . G507f) (get-char . G507e) (get-bytevector-some . G507d) (get-bytevector-n! . G507c) (get-bytevector-n . G507b) (get-bytevector-all . G507a) (flush-output-port . G5079) (close-port . G5078) (call-with-string-output-port . G5058) (call-with-port . G5057) (call-with-bytevector-output-port . G5056) (bytevector->string . G5055) (buffer-mode? . G5054) (binary-port? . G5053) (&i/o-encoding . G4ef0) (&i/o-decoding . G4eef) (&i/o-port . G4eee) (&i/o-file-does-not-exist . G4eed) (&i/o-file-already-exists . G4eec) (&i/o-file-is-read-only . G4eeb) (&i/o-file-protection . G4eea) (&i/o-filename . G4ee9) (&i/o-invalid-position . G4ee8) (&i/o-write . G4ee7) (&i/o-read . G4ee6) (&i/o . G4ee5) (error-handling-mode . G4eca) (file-options . G4ec9) (buffer-mode . G4ec8) (eol-style . G4ec7)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51ab '(rnrs enums) '(6) '() '() '() '((make-enumeration . G504f) (enum-set=? . G504e) (enum-set-universe . G504d) (enum-set-union . G504c) (enum-set-subset? . G504b) (enum-set-projection . G504a) (enum-set-member? . G5049) (enum-set-intersection . G5048) (enum-set-indexer . G5047) (enum-set-difference . G5046) (enum-set-constructor . G5045) (enum-set-complement . G5044) (enum-set->list . G5043) (define-enumeration . G4ed5)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51ac '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b91) (warning? . G4b11) (violation? . G4b4d) (undefined-violation? . G4c01) (syntax-violation? . G4be9) (syntax-violation-subform . G4bed) (syntax-violation-form . G4beb) (syntax-violation . G3180) (simple-conditions . G5042) (serious-condition? . G4b25) (non-continuable-violation? . G4ba7) (message-condition? . G4afb) (make-who-condition . G4b8d) (make-warning . G4b0f) (make-violation . G4b4b) (make-undefined-violation . G4bff) (make-syntax-violation . G4be3) (make-serious-condition . G4b23) (make-non-continuable-violation . G4ba5) (make-message-condition . G4af7) (make-lexical-violation . G4bcd) (make-irritants-condition . G4b74) (make-implementation-restriction-violation . G4bb9) (make-error . G4b37) (make-assertion-violation . G4b5f) (lexical-violation? . G4bcf) (irritants-condition? . G4b78) (implementation-restriction-violation? . G4bbb) (error? . G4b39) (condition-who . G4b93) (condition-predicate . G5041) (condition-message . G4afd) (condition-irritants . G4b7a) (condition-accessor . G5040) (condition . G503f) (assertion-violation? . G4b61) (condition? . G503e) (&undefined . G4ee4) (&syntax . G4ee3) (&lexical . G4ee2) (&implementation-restriction . G4ee1) (&non-continuable . G4ee0) (&who . G4edf) (&irritants . G4ede) (&assertion . G4edd) (&violation . G4edc) (&error . G4edb) (&serious . G4eda) (&warning . G4ed9) (&message . G4ed8) (&condition . G4ed7) (define-condition-type . G4ed6)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51ad '(rnrs records inspection) '(6) '() '() '() '((record? . G50ea) (record-type-uid . G50e9) (record-type-sealed? . G50e8) (record-type-parent . G50e7) (record-type-opaque? . G50e6) (record-type-name . G50e5) (record-type-generative? . G50e4) (record-type-field-names . G50e3) (record-rtd . G50e2) (record-field-mutable? . G50e1)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51ae '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G50f1) (record-predicate . G50f0) (record-mutator . G50ef) (record-constructor . G50ee) (record-accessor . G50ed) (make-record-type-descriptor . G50ec) (make-record-constructor-descriptor . G50eb)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51af '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4ed4) (parent-rtd . G4ed3) (nongenerative . G4ed2) (opaque . G4ed1) (sealed . G4ed0) (protocol . G4ecf) (parent . G4ece) (immutable . G4ecd) (mutable . G4ecc) (fields . G4ecb) (record-constructor-descriptor . G4ea8) (record-type-descriptor . G4ea7)) '() values values '#f '#f '#t '#f) (G2c3e@G2ad1@install-library 'G51b0 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5190) (&no-nans-rtd . G518f) (&no-infinities-rcd . G518e) (&no-infinities-rtd . G518d) (&i/o-encoding-rcd . G518c) (&i/o-encoding-rtd . G518b) (&i/o-decoding-rcd . G518a) (&i/o-decoding-rtd . G5189) (&i/o-port-rcd . G5188) (&i/o-port-rtd . G5187) (&i/o-file-does-not-exist-rcd . G5186) (&i/o-file-does-not-exist-rtd . G5185) (&i/o-file-already-exists-rcd . G5184) (&i/o-file-already-exists-rtd . G5183) (&i/o-file-is-read-only-rcd . G5182) (&i/o-file-is-read-only-rtd . G5181) (&i/o-file-protection-rcd . G5180) (&i/o-file-protection-rtd . G517f) (&i/o-filename-rcd . G517e) (&i/o-filename-rtd . G517d) (&i/o-invalid-position-rcd . G517c) (&i/o-invalid-position-rtd . G517b) (&i/o-write-rcd . G517a) (&i/o-write-rtd . G5179) (&i/o-read-rcd . G5178) (&i/o-read-rtd . G5177) (&i/o-rcd . G5176) (&i/o-rtd . G5175) (&undefined-rcd . G5174) (&undefined-rtd . G5173) (&syntax-rcd . G5172) (&syntax-rtd . G5171) (&lexical-rcd . G5170) (&lexical-rtd . G516f) (&implementation-restriction-rcd . G516e) (&implementation-restriction-rtd . G516d) (&non-continuable-rcd . G516c) (&non-continuable-rtd . G516b) (&who-rcd . G516a) (&who-rtd . G5169) (&irritants-rcd . G5168) (&irritants-rtd . G5167) (&assertion-rcd . G5166) (&assertion-rtd . G5165) (&violation-rcd . G5164) (&violation-rtd . G5163) (&error-rcd . G5162) (&error-rtd . G5161) (&serious-rcd . G5160) (&serious-rtd . G515f) (&warning-rcd . G515e) (&warning-rtd . G515d) (&message-rcd . G515c) (&message-rtd . G515b) (&condition-rcd . G515a) (&condition-rtd . G5159) (syntax-error . G317a) (syntax-dispatch . G308d) (pretty-print . G5158) (eval-core . G5157) (set-symbol-value! . G5156) (symbol-value . G5155) (gensym . G5154) (void . G5153) (load . G4df8) (interaction-environment . G318c) (char-ready? . G5152) (regexp? . G5151) (read-line . G5150) (dotted-list? . G514f) (circular-list? . G514e) (proper-list? . G514d) (circular-list . G514c) (last . G514b) (last-pair . G514a) (not-pair? . G5149) (split-at! . G5148) (split-at . G5147) (list= . G5146) (list-copy . G5145) (list-tabulate . G5144) (make-list . G5143) (xcons . G5142) (tenth . G5141) (ninth . G5140) (eighth . G513f) (seventh . G513e) (sixth . G513d) (fifth . G513c) (drop-right! . G513b) (drop-right . G513a) (take-right . G5139) (take! . G5138) (drop . G5137) (take . G5136) (car+cdr . G5135) (third . G5134) (second . G5133) (first . G5132) (assoc-ref . G5131) (alist-cons . G5130) (print . G512f) (format . G512e) (standard-library-path . G512d) (file-newer? . G512c) (stat-mtime . G512b) (current-directory . G512a) (write-to-file . G5129) (file->list . G5128) (file->string . G5127) (digit->integer . G5126) (call-with-string-input-port . G5125) (call-with-string-io . G5124) (string-split . G5123) (bytevector-for-each . G5122) (string->regexp . G5121) (rxmatch . G5120) (regexp-replace-all . G511f) (hashtable-for-each . G511e) (readdir . G511d) (get-environment-variables . G511c) (get-environment-variable . G511b) (get-timeofday . G511a) (get-command-line . G5119) (sys-display . G5118) (source-info . G5117) (make-compiler-instruction . G5116) (make-instruction . G5115) (set-source-info! . G5114) (bignum? . G5113) (make-complex . G5112) (fasl-read . G5111) (fasl-write . G5110) (receive . G510f) (make-parameter . G28a7) (string-upcase . G510e) (string-titlecase . G510d) (string-normalize-nfkd . G510c) (string-normalize-nfkc . G510b) (string-normalize-nfd . G510a) (string-normalize-nfc . G5109) (string-foldcase . G5108) (string-downcase . G5107) (string-ci>? . G5106) (string-ci>=? . G5105) (string-ci=? . G5104) (string-ci<? . G5103) (string-ci<=? . G5102) (char-whitespace? . G5101) (char-upper-case? . G5100) (char-title-case? . G50ff) (char-numeric? . G50fe) (char-lower-case? . G50fd) (char-general-category . G50fc) (char-upcase . G50fb) (char-titlecase . G50fa) (char-foldcase . G50f9) (char-downcase . G50f8) (char-ci>? . G50f7) (char-ci>=? . G50f6) (char-ci=? . G50f5) (char-ci<? . G50f4) (char-ci<=? . G50f3) (char-alphabetic? . G50f2) (make-variable-transformer . G2e8b) (identifier? . G3182) (generate-temporaries . G316c) (free-identifier=? . G316e) (syntax->datum . G3186) (datum->syntax . G3184) (bound-identifier=? . G3170) (record-type-descriptor? . G50f1) (record-predicate . G50f0) (record-mutator . G50ef) (record-constructor . G50ee) (record-accessor . G50ed) (make-record-type-descriptor . G50ec) (make-record-constructor-descriptor . G50eb) (record? . G50ea) (record-type-uid . G50e9) (record-type-sealed? . G50e8) (record-type-parent . G50e7) (record-type-opaque? . G50e6) (record-type-name . G50e5) (record-type-generative? . G50e4) (record-type-field-names . G50e3) (record-rtd . G50e2) (record-field-mutable? . G50e1) (delete-file . G50e0) (file-exists? . G50df) (vector-sort! . G50de) (vector-sort . G50dd) (list-sort . G50dc) (symbol-hash . G50db) (string-ci-hash . G50da) (string-hash . G50d9) (equal-hash . G50d8) (hashtable-equivalence-function . G50d7) (make-hashtable . G50d6) (hashtable-hash-function . G50d5) (make-eqv-hashtable . G50d4) (make-eq-hashtable . G50d3) (hashtable? . G50d2) (hashtable-update! . G50d1) (hashtable-size . G50d0) (hashtable-set! . G50cf) (hashtable-ref . G50ce) (hashtable-mutable? . G50cd) (hashtable-keys . G50cc) (hashtable-entries . G50cb) (hashtable-delete! . G50ca) (hashtable-copy . G50c9) (hashtable-contains? . G50c8) (hashtable-clear! . G50c7) (call-with-output-file . G50c6) (call-with-input-file . G50c5) (write-char . G50c4) (write . G50c3) (with-output-to-file . G50c2) (with-input-from-file . G50c1) (read-char . G50c0) (read . G50bf) (peek-char . G50be) (open-output-file . G50bd) (open-input-file . G50bc) (newline . G50bb) (display . G50ba) (close-output-port . G50b9) (close-input-port . G50b8) (eof-object? . G50b7) (eof-object . G50b6) (current-error-port . G50b5) (current-output-port . G50b4) (current-input-port . G50b3) (output-port? . G50b2) (input-port? . G50b1) (utf-8-codec . G50b0) (utf-16-codec . G50af) (transcoder-error-handling-mode . G50ae) (transcoder-eol-style . G50ad) (transcoder-codec . G50ac) (transcoded-port . G50ab) (textual-port? . G50aa) (string->bytevector . G50a9) (standard-output-port . G50a8) (standard-input-port . G50a7) (standard-error-port . G50a6) (set-port-position! . G50a5) (put-u8 . G50a4) (put-string . G50a3) (put-datum . G50a2) (put-char . G50a1) (put-bytevector . G50a0) (port? . G509f) (port-transcoder . G509e) (port-position . G509d) (port-has-set-port-position!? . G509c) (port-has-port-position? . G509b) (port-eof? . G509a) (output-port-buffer-mode . G5099) (open-string-output-port . G5098) (open-string-input-port . G5097) (open-file-output-port . G5096) (open-file-input/output-port . G5095) (open-file-input-port . G5094) (open-bytevector-output-port . G5093) (open-bytevector-input-port . G5092) (native-transcoder . G5091) (native-eol-style . G5090) (make-transcoder . G508f) (latin-1-codec . G508e) (make-i/o-write-error . G4ccf) (make-i/o-read-error . G4cbb) (make-i/o-port-error . G4d66) (make-i/o-invalid-position-error . G4ce4) (make-i/o-filename-error . G4cfd) (make-i/o-file-protection-error . G4d15) (make-i/o-file-is-read-only-error . G4d29) (make-i/o-file-does-not-exist-error . G4d51) (make-i/o-file-already-exists-error . G4d3d) (make-i/o-error . G4ca7) (make-i/o-encoding-error . G4d93) (make-i/o-decoding-error . G4d7e) (make-custom-textual-output-port . G508d) (make-custom-textual-input/output-port . G508c) (make-custom-textual-input-port . G508b) (make-custom-binary-output-port . G508a) (make-custom-binary-input/output-port . G5089) (make-custom-binary-input-port . G5088) (make-bytevector . G5087) (lookahead-u8 . G5086) (lookahead-char . G5085) (i/o-write-error? . G4cd1) (i/o-read-error? . G4cbd) (i/o-port-error? . G4d6a) (i/o-invalid-position-error? . G4ce8) (i/o-filename-error? . G4d01) (i/o-file-protection-error? . G4d17) (i/o-file-is-read-only-error? . G4d2b) (i/o-file-does-not-exist-error? . G4d53) (i/o-file-already-exists-error? . G4d3f) (i/o-error? . G4ca9) (i/o-error-port . G4d6c) (i/o-error-filename . G4d03) (i/o-encoding-error? . G4d97) (i/o-encoding-error-char . G4d99) (i/o-decoding-error? . G4d80) (get-u8 . G5084) (get-string-n! . G5083) (get-string-n . G5082) (get-string-all . G5081) (get-line . G5080) (get-datum . G507f) (get-char . G507e) (get-bytevector-some . G507d) (get-bytevector-n! . G507c) (get-bytevector-n . G507b) (get-bytevector-all . G507a) (flush-output-port . G5079) (close-port . G5078) (scheme-report-environment . G315a) (quotient . G5077) (null-environment . G3158) (remainder . G5076) (modulo . G5075) (inexact->exact . G5074) (force . G5073) (exact->inexact . G5072) (exit . G5071) (command-line . G4df2) (string-fill! . G5070) (string-set! . G506f) (set-cdr! . G506e) (set-car! . G506d) (remove . G506c) (remv . G506b) (remp . G506a) (remq . G5069) (partition . G5068) (memv . G5067) (memq . G5066) (memp . G5065) (member . G5064) (exists . G5063) (for-all . G5062) (fold-right . G5061) (fold-left . G5060) (find . G505f) (filter . G505e) (cons* . G505d) (assv . G505c) (assq . G505b) (assp . G505a) (assoc . G5059) (call-with-string-output-port . G5058) (call-with-port . G5057) (call-with-bytevector-output-port . G5056) (bytevector->string . G5055) (buffer-mode? . G5054) (binary-port? . G5053) (with-exception-handler . G5052) (raise-continuable . G5051) (raise . G5050) (eval . G315e) (environment . G3156) (make-enumeration . G504f) (enum-set=? . G504e) (enum-set-universe . G504d) (enum-set-union . G504c) (enum-set-subset? . G504b) (enum-set-projection . G504a) (enum-set-member? . G5049) (enum-set-intersection . G5048) (enum-set-indexer . G5047) (enum-set-difference . G5046) (enum-set-constructor . G5045) (enum-set-complement . G5044) (enum-set->list . G5043) (who-condition? . G4b91) (warning? . G4b11) (violation? . G4b4d) (undefined-violation? . G4c01) (syntax-violation? . G4be9) (syntax-violation-subform . G4bed) (syntax-violation-form . G4beb) (syntax-violation . G3180) (simple-conditions . G5042) (serious-condition? . G4b25) (non-continuable-violation? . G4ba7) (message-condition? . G4afb) (make-who-condition . G4b8d) (make-warning . G4b0f) (make-violation . G4b4b) (make-undefined-violation . G4bff) (make-syntax-violation . G4be3) (make-serious-condition . G4b23) (make-non-continuable-violation . G4ba5) (make-message-condition . G4af7) (make-lexical-violation . G4bcd) (make-irritants-condition . G4b74) (make-implementation-restriction-violation . G4bb9) (make-error . G4b37) (make-assertion-violation . G4b5f) (lexical-violation? . G4bcf) (irritants-condition? . G4b78) (implementation-restriction-violation? . G4bbb) (error? . G4b39) (condition-who . G4b93) (condition-predicate . G5041) (condition-message . G4afd) (condition-irritants . G4b7a) (condition-accessor . G5040) (condition . G503f) (assertion-violation? . G4b61) (condition? . G503e) (utf32->string . G503d) (utf16->string . G503c) (utf8->string . G503b) (uint-list->bytevector . G503a) (u8-list->bytevector . G5039) (string->utf8 . G5038) (string->utf32 . G5037) (string->utf16 . G5036) (sint-list->bytevector . G5035) (native-endianness . G5034) (bytevector? . G5033) (bytevector=? . G5032) (bytevector-uint-set! . G5031) (bytevector-uint-ref . G5030) (bytevector-u8-set! . G502f) (bytevector-u8-ref . G502e) (bytevector-u64-set! . G502d) (bytevector-u64-ref . G502c) (bytevector-u64-native-set! . G502b) (bytevector-u64-native-ref . G502a) (bytevector-u32-set! . G5029) (bytevector-u32-ref . G5028) (bytevector-u32-native-set! . G5027) (bytevector-u32-native-ref . G5026) (bytevector-u16-set! . G5025) (bytevector-u16-ref . G5024) (bytevector-u16-native-set! . G5023) (bytevector-u16-native-ref . G5022) (bytevector-sint-set! . G5021) (bytevector-sint-ref . G5020) (bytevector-s8-set! . G501f) (bytevector-s8-ref . G501e) (bytevector-s64-set! . G501d) (bytevector-s64-ref . G501c) (bytevector-s64-native-set! . G501b) (bytevector-s64-native-ref . G501a) (bytevector-s32-set! . G5019) (bytevector-s32-ref . G5018) (bytevector-s32-native-set! . G5017) (bytevector-s32-native-ref . G5016) (bytevector-s16-set! . G5015) (bytevector-s16-ref . G5014) (bytevector-s16-native-set! . G5013) (bytevector-s16-native-ref . G5012) (bytevector-length . G5011) (bytevector-ieee-single-ref . G5010) (bytevector-ieee-single-set! . G500f) (bytevector-ieee-single-native-set! . G500e) (bytevector-ieee-single-native-ref . G500d) (bytevector-ieee-double-set! . G500c) (bytevector-ieee-double-ref . G500b) (bytevector-ieee-double-native-set! . G500a) (bytevector-ieee-double-native-ref . G5009) (bytevector-fill! . G5008) (bytevector-copy! . G5007) (bytevector-copy . G5006) (bytevector->uint-list . G5005) (bytevector->u8-list . G5004) (bytevector->sint-list . G5003) (no-nans-violation? . G4c29) (no-infinities-violation? . G4c15) (make-no-nans-violation . G4c27) (make-no-infinities-violation . G4c13) (real->flonum . G5002) (flzero? . G5001) (fltruncate . G5000) (fltan . G4fff) (flsqrt . G4ffe) (flsin . G4ffd) (flround . G4ffc) (flpositive? . G4ffb) (flonum? . G4ffa) (flodd? . G4ff9) (flnumerator . G4ff8) (flnegative? . G4ff7) (flnan? . G4ff6) (flmod0 . G4ff5) (flmod . G4ff4) (flmin . G4ff3) (flmax . G4ff2) (fllog . G4ff1) (flinteger? . G4ff0) (flinfinite? . G4fef) (flfloor . G4fee) (flfinite? . G4fed) (flexpt . G4fec) (flexp . G4feb) (fleven? . G4fea) (fldiv0-and-mod0 . G4fe9) (fldiv0 . G4fe8) (fldiv-and-mod . G4fe7) (fldiv . G4fe6) (fldenominator . G4fe5) (flcos . G4fe4) (flceiling . G4fe3) (flatan . G4fe2) (flasin . G4fe1) (flacos . G4fe0) (flabs . G4fdf) (fl>? . G4fde) (fl>=? . G4fdd) (fl=? . G4fdc) (fl<? . G4fdb) (fl<=? . G4fda) (fl/ . G4fd9) (fl- . G4fd8) (fl+ . G4fd7) (fl* . G4fd6) (fixnum->flonum . G4fd5) (fxzero? . G4fd4) (fxxor . G4fd3) (fxrotate-bit-field . G4fd2) (fxreverse-bit-field . G4fd1) (fxpositive? . G4fd0) (fxodd? . G4fcf) (fxnot . G4fce) (fxnegative? . G4fcd) (fxmod0 . G4fcc) (fxmod . G4fcb) (fxmin . G4fca) (fxmax . G4fc9) (fxlength . G4fc8) (fxior . G4fc7) (fxif . G4fc6) (fxfirst-bit-set . G4fc5) (fxeven? . G4fc4) (fxdiv0-and-mod0 . G4fc3) (fxdiv0 . G4fc2) (fxdiv-and-mod . G4fc1) (fxdiv . G4fc0) (fxcopy-bit-field . G4fbf) (fxcopy-bit . G4fbe) (fxbit-set? . G4fbd) (fxbit-field . G4fbc) (fxbit-count . G4fbb) (fxarithmetic-shift-right . G4fba) (fxarithmetic-shift-left . G4fb9) (fxarithmetic-shift . G4fb8) (fxand . G4fb7) (fx>? . G4fb6) (fx>=? . G4fb5) (fx=? . G4fb4) (fx<? . G4fb3) (fx<=? . G4fb2) (fx-/carry . G4fb1) (fx- . G4fb0) (fx+/carry . G4faf) (fx+ . G4fae) (fx*/carry . G4fad) (fx* . G4fac) (greatest-fixnum . G4fab) (least-fixnum . G4faa) (fixnum-width . G4fa9) (fixnum? . G4fa8) (bitwise-rotate-bit-field . G4fa7) (bitwise-reverse-bit-field . G4fa6) (bitwise-length . G4fa5) (bitwise-if . G4fa4) (bitwise-first-bit-set . G4fa3) (bitwise-copy-bit-field . G4fa2) (bitwise-copy-bit . G4fa1) (bitwise-bit-set? . G4fa0) (bitwise-bit-field . G4f9f) (bitwise-bit-count . G4f9e) (bitwise-xor . G4f9d) (bitwise-ior . G4f9c) (bitwise-and . G4f9b) (bitwise-not . G4f9a) (bitwise-arithmetic-shift-right . G4f99) (bitwise-arithmetic-shift-left . G4f98) (bitwise-arithmetic-shift . G4f97) (zero? . G4f96) (vector? . G4f95) (vector-set! . G4f94) (vector-ref . G4f93) (vector-map . G4f92) (vector-length . G4f91) (vector-for-each . G4f90) (vector-fill! . G4f8f) (vector->list . G4f8e) (vector . G4f8d) (values . G4f8c) (truncate . G4f8b) (tan . G4f8a) (symbol? . G4f89) (symbol=? . G4f88) (symbol->string . G4f87) (substring . G4f86) (string? . G4f85) (string>? . G4f84) (string>=? . G4f83) (string=? . G4f82) (string<? . G4f81) (string<=? . G4f80) (string-ref . G4f7f) (string-length . G4f7e) (string-for-each . G4f7d) (string-copy . G4f7c) (string-append . G4f7b) (string->symbol . G4f7a) (string->number . G4f79) (string->list . G4f78) (string . G4f77) (sqrt . G4f76) (sin . G4f75) (round . G4f74) (reverse . G4f73) (real? . G4f72) (real-valued? . G4f71) (real-part . G4f70) (rationalize . G4f6f) (rational? . G4f6e) (rational-valued? . G4f6d) (procedure? . G4f6c) (positive? . G4f6b) (pair? . G4f6a) (odd? . G4f69) (numerator . G4f68) (number? . G4f67) (number->string . G4f66) (null? . G4f65) (not . G4f64) (negative? . G4f63) (nan? . G4f62) (min . G4f61) (max . G4f60) (map . G4f5f) (make-vector . G4f5e) (make-string . G4f5d) (make-rectangular . G4f5c) (make-polar . G4f5b) (magnitude . G4f5a) (log . G4f59) (list? . G4f58) (list-tail . G4f57) (list-ref . G4f56) (list->vector . G4f55) (list->string . G4f54) (list . G4f53) (length . G4f52) (lcm . G4f51) (integer? . G4f50) (integer-valued? . G4f4f) (integer->char . G4f4e) (infinite? . G4f4d) (inexact? . G4f4c) (inexact . G4f4b) (imag-part . G4f4a) (gcd . G4f49) (for-each . G4f48) (floor . G4f47) (finite? . G4f46) (expt . G4f45) (exp . G4f44) (exact? . G4f43) (exact-integer-sqrt . G4f42) (exact . G4f41) (even? . G4f40) (error . G4f3f) (eqv? . G4f3e) (equal? . G4f3d) (eq? . G4f3c) (dynamic-wind . G4f3b) (div0-and-mod0 . G4f3a) (mod0 . G4f39) (div0 . G4f38) (div-and-mod . G4f37) (mod . G4f36) (div . G4f35) (denominator . G4f34) (cos . G4f33) (cons . G4f32) (complex? . G4f31) (char? . G4f30) (char>? . G4f2f) (char>=? . G4f2e) (char=? . G4f2d) (char<? . G4f2c) (char<=? . G4f2b) (char->integer . G4f2a) (ceiling . G4f29) (call-with-values . G4f28) (call/cc . G4f27) (call-with-current-continuation . G4f26) (cddddr . G4f25) (cdddar . G4f24) (cddadr . G4f23) (cddaar . G4f22) (cdaddr . G4f21) (cdadar . G4f20) (cdaadr . G4f1f) (cdaaar . G4f1e) (cadddr . G4f1d) (caddar . G4f1c) (cadadr . G4f1b) (cadaar . G4f1a) (caaddr . G4f19) (caadar . G4f18) (caaadr . G4f17) (caaaar . G4f16) (cdddr . G4f15) (cddar . G4f14) (cdadr . G4f13) (cdaar . G4f12) (caddr . G4f11) (cadar . G4f10) (caadr . G4f0f) (caaar . G4f0e) (cddr . G4f0d) (cdar . G4f0c) (cadr . G4f0b) (caar . G4f0a) (cdr . G4f09) (car . G4f08) (boolean? . G4f07) (boolean=? . G4f06) (atan . G4f05) (assertion-violation . G4f04) (asin . G4f03) (apply . G4f02) (append . G4f01) (angle . G4f00) (acos . G4eff) (abs . G4efe) (/ . G4efd) (* . G4efc) (- . G4efb) (+ . G4efa) (>= . G4ef9) (> . G4ef8) (= . G4ef7) (<= . G4ef6) (< . G4ef5) (library . G4ef4) (export . G4ef3) (&no-nans . G4ef2) (&no-infinities . G4ef1) (&i/o-encoding . G4ef0) (&i/o-decoding . G4eef) (&i/o-port . G4eee) (&i/o-file-does-not-exist . G4eed) (&i/o-file-already-exists . G4eec) (&i/o-file-is-read-only . G4eeb) (&i/o-file-protection . G4eea) (&i/o-filename . G4ee9) (&i/o-invalid-position . G4ee8) (&i/o-write . G4ee7) (&i/o-read . G4ee6) (&i/o . G4ee5) (&undefined . G4ee4) (&syntax . G4ee3) (&lexical . G4ee2) (&implementation-restriction . G4ee1) (&non-continuable . G4ee0) (&who . G4edf) (&irritants . G4ede) (&assertion . G4edd) (&violation . G4edc) (&error . G4edb) (&serious . G4eda) (&warning . G4ed9) (&message . G4ed8) (&condition . G4ed7) (define-condition-type . G4ed6) (define-enumeration . G4ed5) (define-record-type . G4ed4) (parent-rtd . G4ed3) (nongenerative . G4ed2) (opaque . G4ed1) (sealed . G4ed0) (protocol . G4ecf) (parent . G4ece) (immutable . G4ecd) (mutable . G4ecc) (fields . G4ecb) (error-handling-mode . G4eca) (file-options . G4ec9) (buffer-mode . G4ec8) (eol-style . G4ec7) (guard . G4ec6) (trace-define . G4ec5) (trace-lambda . G4ec4) (unsyntax-splicing . G4ec3) (unsyntax . G4ec2) (unquote-splicing . G4ec1) (unquote . G4ec0) (_ . G4ebf) (else . G4ebe) (=> . G4ebd) (... . G4ebc) (assert . G4ebb) (endianness . G4eba) (delay . G4eb9) (time . G4eb8) (or . G4eb7) (and . G4eb6) (do . G4eb5) (cond . G4eb4) (let* . G4eb3) (let . G4eb2) (let*-values . G4eb1) (let-values . G4eb0) (identifier-syntax . G4eaf) (with-syntax . G4eae) (quasisyntax . G4ead) (quasiquote . G4eac) (syntax-rules . G4eab) (include . G4eaa) (define-struct . G4ea9) (record-constructor-descriptor . G4ea8) (record-type-descriptor . G4ea7) (case . G4ea6) (parameterize . G4ea5) (unless . G4ea4) (when . G4ea3) (if . G4ea2) (letrec* . G4ea1) (letrec . G4ea0) (type-descriptor . G4e9f) (case-lambda . G4e9e) (lambda . G4e9d) (syntax . G4e9c) (syntax-case . G4e9b) (quote . G4e9a) (foreign-call . G4e99) (letrec-syntax . G4e98) (let-syntax . G4e97) (set! . G4e96) (import . G4e95) (begin . G4e94) (module . G4e93) (define-syntax . G4e92) (define . G4e91)) '((G5190 core-prim . &no-nans-rcd) (G518f core-prim . &no-nans-rtd) (G518e core-prim . &no-infinities-rcd) (G518d core-prim . &no-infinities-rtd) (G518c core-prim . &i/o-encoding-rcd) (G518b core-prim . &i/o-encoding-rtd) (G518a core-prim . &i/o-decoding-rcd) (G5189 core-prim . &i/o-decoding-rtd) (G5188 core-prim . &i/o-port-rcd) (G5187 core-prim . &i/o-port-rtd) (G5186 core-prim . &i/o-file-does-not-exist-rcd) (G5185 core-prim . &i/o-file-does-not-exist-rtd) (G5184 core-prim . &i/o-file-already-exists-rcd) (G5183 core-prim . &i/o-file-already-exists-rtd) (G5182 core-prim . &i/o-file-is-read-only-rcd) (G5181 core-prim . &i/o-file-is-read-only-rtd) (G5180 core-prim . &i/o-file-protection-rcd) (G517f core-prim . &i/o-file-protection-rtd) (G517e core-prim . &i/o-filename-rcd) (G517d core-prim . &i/o-filename-rtd) (G517c core-prim . &i/o-invalid-position-rcd) (G517b core-prim . &i/o-invalid-position-rtd) (G517a core-prim . &i/o-write-rcd) (G5179 core-prim . &i/o-write-rtd) (G5178 core-prim . &i/o-read-rcd) (G5177 core-prim . &i/o-read-rtd) (G5176 core-prim . &i/o-rcd) (G5175 core-prim . &i/o-rtd) (G5174 core-prim . &undefined-rcd) (G5173 core-prim . &undefined-rtd) (G5172 core-prim . &syntax-rcd) (G5171 core-prim . &syntax-rtd) (G5170 core-prim . &lexical-rcd) (G516f core-prim . &lexical-rtd) (G516e core-prim . &implementation-restriction-rcd) (G516d core-prim . &implementation-restriction-rtd) (G516c core-prim . &non-continuable-rcd) (G516b core-prim . &non-continuable-rtd) (G516a core-prim . &who-rcd) (G5169 core-prim . &who-rtd) (G5168 core-prim . &irritants-rcd) (G5167 core-prim . &irritants-rtd) (G5166 core-prim . &assertion-rcd) (G5165 core-prim . &assertion-rtd) (G5164 core-prim . &violation-rcd) (G5163 core-prim . &violation-rtd) (G5162 core-prim . &error-rcd) (G5161 core-prim . &error-rtd) (G5160 core-prim . &serious-rcd) (G515f core-prim . &serious-rtd) (G515e core-prim . &warning-rcd) (G515d core-prim . &warning-rtd) (G515c core-prim . &message-rcd) (G515b core-prim . &message-rtd) (G515a core-prim . &condition-rcd) (G5159 core-prim . &condition-rtd) (G317a core-prim . syntax-error) (G308d core-prim . syntax-dispatch) (G5158 core-prim . pretty-print) (G5157 core-prim . eval-core) (G5156 core-prim . set-symbol-value!) (G5155 core-prim . symbol-value) (G5154 core-prim . gensym) (G5153 core-prim . void) (G4df8 core-prim . load) (G318c core-prim . interaction-environment) (G5152 core-prim . char-ready?) (G5151 core-prim . regexp?) (G5150 core-prim . read-line) (G514f core-prim . dotted-list?) (G514e core-prim . circular-list?) (G514d core-prim . proper-list?) (G514c core-prim . circular-list) (G514b core-prim . last) (G514a core-prim . last-pair) (G5149 core-prim . not-pair?) (G5148 core-prim . split-at!) (G5147 core-prim . split-at) (G5146 core-prim . list=) (G5145 core-prim . list-copy) (G5144 core-prim . list-tabulate) (G5143 core-prim . make-list) (G5142 core-prim . xcons) (G5141 core-prim . tenth) (G5140 core-prim . ninth) (G513f core-prim . eighth) (G513e core-prim . seventh) (G513d core-prim . sixth) (G513c core-prim . fifth) (G513b core-prim . drop-right!) (G513a core-prim . drop-right) (G5139 core-prim . take-right) (G5138 core-prim . take!) (G5137 core-prim . drop) (G5136 core-prim . take) (G5135 core-prim . car+cdr) (G5134 core-prim . third) (G5133 core-prim . second) (G5132 core-prim . first) (G5131 core-prim . assoc-ref) (G5130 core-prim . alist-cons) (G512f core-prim . print) (G512e core-prim . format) (G512d core-prim . standard-library-path) (G512c core-prim . file-newer?) (G512b core-prim . stat-mtime) (G512a core-prim . current-directory) (G5129 core-prim . write-to-file) (G5128 core-prim . file->list) (G5127 core-prim . file->string) (G5126 core-prim . digit->integer) (G5125 core-prim . call-with-string-input-port) (G5124 core-prim . call-with-string-io) (G5123 core-prim . string-split) (G5122 core-prim . bytevector-for-each) (G5121 core-prim . string->regexp) (G5120 core-prim . rxmatch) (G511f core-prim . regexp-replace-all) (G511e core-prim . hashtable-for-each) (G511d core-prim . readdir) (G511c core-prim . get-environment-variables) (G511b core-prim . get-environment-variable) (G511a core-prim . get-timeofday) (G5119 core-prim . get-command-line) (G5118 core-prim . sys-display) (G5117 core-prim . source-info) (G5116 core-prim . make-compiler-instruction) (G5115 core-prim . make-instruction) (G5114 core-prim . set-source-info!) (G5113 core-prim . bignum?) (G5112 core-prim . make-complex) (G5111 core-prim . fasl-read) (G5110 core-prim . fasl-write) (G510f core-prim . receive) (G28a7 core-prim . make-parameter) (G510e core-prim . string-upcase) (G510d core-prim . string-titlecase) (G510c core-prim . string-normalize-nfkd) (G510b core-prim . string-normalize-nfkc) (G510a core-prim . string-normalize-nfd) (G5109 core-prim . string-normalize-nfc) (G5108 core-prim . string-foldcase) (G5107 core-prim . string-downcase) (G5106 core-prim . string-ci>?) (G5105 core-prim . string-ci>=?) (G5104 core-prim . string-ci=?) (G5103 core-prim . string-ci<?) (G5102 core-prim . string-ci<=?) (G5101 core-prim . char-whitespace?) (G5100 core-prim . char-upper-case?) (G50ff core-prim . char-title-case?) (G50fe core-prim . char-numeric?) (G50fd core-prim . char-lower-case?) (G50fc core-prim . char-general-category) (G50fb core-prim . char-upcase) (G50fa core-prim . char-titlecase) (G50f9 core-prim . char-foldcase) (G50f8 core-prim . char-downcase) (G50f7 core-prim . char-ci>?) (G50f6 core-prim . char-ci>=?) (G50f5 core-prim . char-ci=?) (G50f4 core-prim . char-ci<?) (G50f3 core-prim . char-ci<=?) (G50f2 core-prim . char-alphabetic?) (G2e8b core-prim . make-variable-transformer) (G3182 core-prim . identifier?) (G316c core-prim . generate-temporaries) (G316e core-prim . free-identifier=?) (G3186 core-prim . syntax->datum) (G3184 core-prim . datum->syntax) (G3170 core-prim . bound-identifier=?) (G50f1 core-prim . record-type-descriptor?) (G50f0 core-prim . record-predicate) (G50ef core-prim . record-mutator) (G50ee core-prim . record-constructor) (G50ed core-prim . record-accessor) (G50ec core-prim . make-record-type-descriptor) (G50eb core-prim . make-record-constructor-descriptor) (G50ea core-prim . record?) (G50e9 core-prim . record-type-uid) (G50e8 core-prim . record-type-sealed?) (G50e7 core-prim . record-type-parent) (G50e6 core-prim . record-type-opaque?) (G50e5 core-prim . record-type-name) (G50e4 core-prim . record-type-generative?) (G50e3 core-prim . record-type-field-names) (G50e2 core-prim . record-rtd) (G50e1 core-prim . record-field-mutable?) (G50e0 core-prim . delete-file) (G50df core-prim . file-exists?) (G50de core-prim . vector-sort!) (G50dd core-prim . vector-sort) (G50dc core-prim . list-sort) (G50db core-prim . symbol-hash) (G50da core-prim . string-ci-hash) (G50d9 core-prim . string-hash) (G50d8 core-prim . equal-hash) (G50d7 core-prim . hashtable-equivalence-function) (G50d6 core-prim . make-hashtable) (G50d5 core-prim . hashtable-hash-function) (G50d4 core-prim . make-eqv-hashtable) (G50d3 core-prim . make-eq-hashtable) (G50d2 core-prim . hashtable?) (G50d1 core-prim . hashtable-update!) (G50d0 core-prim . hashtable-size) (G50cf core-prim . hashtable-set!) (G50ce core-prim . hashtable-ref) (G50cd core-prim . hashtable-mutable?) (G50cc core-prim . hashtable-keys) (G50cb core-prim . hashtable-entries) (G50ca core-prim . hashtable-delete!) (G50c9 core-prim . hashtable-copy) (G50c8 core-prim . hashtable-contains?) (G50c7 core-prim . hashtable-clear!) (G50c6 core-prim . call-with-output-file) (G50c5 core-prim . call-with-input-file) (G50c4 core-prim . write-char) (G50c3 core-prim . write) (G50c2 core-prim . with-output-to-file) (G50c1 core-prim . with-input-from-file) (G50c0 core-prim . read-char) (G50bf core-prim . read) (G50be core-prim . peek-char) (G50bd core-prim . open-output-file) (G50bc core-prim . open-input-file) (G50bb core-prim . newline) (G50ba core-prim . display) (G50b9 core-prim . close-output-port) (G50b8 core-prim . close-input-port) (G50b7 core-prim . eof-object?) (G50b6 core-prim . eof-object) (G50b5 core-prim . current-error-port) (G50b4 core-prim . current-output-port) (G50b3 core-prim . current-input-port) (G50b2 core-prim . output-port?) (G50b1 core-prim . input-port?) (G50b0 core-prim . utf-8-codec) (G50af core-prim . utf-16-codec) (G50ae core-prim . transcoder-error-handling-mode) (G50ad core-prim . transcoder-eol-style) (G50ac core-prim . transcoder-codec) (G50ab core-prim . transcoded-port) (G50aa core-prim . textual-port?) (G50a9 core-prim . string->bytevector) (G50a8 core-prim . standard-output-port) (G50a7 core-prim . standard-input-port) (G50a6 core-prim . standard-error-port) (G50a5 core-prim . set-port-position!) (G50a4 core-prim . put-u8) (G50a3 core-prim . put-string) (G50a2 core-prim . put-datum) (G50a1 core-prim . put-char) (G50a0 core-prim . put-bytevector) (G509f core-prim . port?) (G509e core-prim . port-transcoder) (G509d core-prim . port-position) (G509c core-prim . port-has-set-port-position!?) (G509b core-prim . port-has-port-position?) (G509a core-prim . port-eof?) (G5099 core-prim . output-port-buffer-mode) (G5098 core-prim . open-string-output-port) (G5097 core-prim . open-string-input-port) (G5096 core-prim . open-file-output-port) (G5095 core-prim . open-file-input/output-port) (G5094 core-prim . open-file-input-port) (G5093 core-prim . open-bytevector-output-port) (G5092 core-prim . open-bytevector-input-port) (G5091 core-prim . native-transcoder) (G5090 core-prim . native-eol-style) (G508f core-prim . make-transcoder) (G508e core-prim . latin-1-codec) (G4ccf core-prim . make-i/o-write-error) (G4cbb core-prim . make-i/o-read-error) (G4d66 core-prim . make-i/o-port-error) (G4ce4 core-prim . make-i/o-invalid-position-error) (G4cfd core-prim . make-i/o-filename-error) (G4d15 core-prim . make-i/o-file-protection-error) (G4d29 core-prim . make-i/o-file-is-read-only-error) (G4d51 core-prim . make-i/o-file-does-not-exist-error) (G4d3d core-prim . make-i/o-file-already-exists-error) (G4ca7 core-prim . make-i/o-error) (G4d93 core-prim . make-i/o-encoding-error) (G4d7e core-prim . make-i/o-decoding-error) (G508d core-prim . make-custom-textual-output-port) (G508c core-prim . make-custom-textual-input/output-port) (G508b core-prim . make-custom-textual-input-port) (G508a core-prim . make-custom-binary-output-port) (G5089 core-prim . make-custom-binary-input/output-port) (G5088 core-prim . make-custom-binary-input-port) (G5087 core-prim . make-bytevector) (G5086 core-prim . lookahead-u8) (G5085 core-prim . lookahead-char) (G4cd1 core-prim . i/o-write-error?) (G4cbd core-prim . i/o-read-error?) (G4d6a core-prim . i/o-port-error?) (G4ce8 core-prim . i/o-invalid-position-error?) (G4d01 core-prim . i/o-filename-error?) (G4d17 core-prim . i/o-file-protection-error?) (G4d2b core-prim . i/o-file-is-read-only-error?) (G4d53 core-prim . i/o-file-does-not-exist-error?) (G4d3f core-prim . i/o-file-already-exists-error?) (G4ca9 core-prim . i/o-error?) (G4d6c core-prim . i/o-error-port) (G4d03 core-prim . i/o-error-filename) (G4d97 core-prim . i/o-encoding-error?) (G4d99 core-prim . i/o-encoding-error-char) (G4d80 core-prim . i/o-decoding-error?) (G5084 core-prim . get-u8) (G5083 core-prim . get-string-n!) (G5082 core-prim . get-string-n) (G5081 core-prim . get-string-all) (G5080 core-prim . get-line) (G507f core-prim . get-datum) (G507e core-prim . get-char) (G507d core-prim . get-bytevector-some) (G507c core-prim . get-bytevector-n!) (G507b core-prim . get-bytevector-n) (G507a core-prim . get-bytevector-all) (G5079 core-prim . flush-output-port) (G5078 core-prim . close-port) (G315a core-prim . scheme-report-environment) (G5077 core-prim . quotient) (G3158 core-prim . null-environment) (G5076 core-prim . remainder) (G5075 core-prim . modulo) (G5074 core-prim . inexact->exact) (G5073 core-prim . force) (G5072 core-prim . exact->inexact) (G5071 core-prim . exit) (G4df2 core-prim . command-line) (G5070 core-prim . string-fill!) (G506f core-prim . string-set!) (G506e core-prim . set-cdr!) (G506d core-prim . set-car!) (G506c core-prim . remove) (G506b core-prim . remv) (G506a core-prim . remp) (G5069 core-prim . remq) (G5068 core-prim . partition) (G5067 core-prim . memv) (G5066 core-prim . memq) (G5065 core-prim . memp) (G5064 core-prim . member) (G5063 core-prim . exists) (G5062 core-prim . for-all) (G5061 core-prim . fold-right) (G5060 core-prim . fold-left) (G505f core-prim . find) (G505e core-prim . filter) (G505d core-prim . cons*) (G505c core-prim . assv) (G505b core-prim . assq) (G505a core-prim . assp) (G5059 core-prim . assoc) (G5058 core-prim . call-with-string-output-port) (G5057 core-prim . call-with-port) (G5056 core-prim . call-with-bytevector-output-port) (G5055 core-prim . bytevector->string) (G5054 core-prim . buffer-mode?) (G5053 core-prim . binary-port?) (G5052 core-prim . with-exception-handler) (G5051 core-prim . raise-continuable) (G5050 core-prim . raise) (G315e core-prim . eval) (G3156 core-prim . environment) (G504f core-prim . make-enumeration) (G504e core-prim . enum-set=?) (G504d core-prim . enum-set-universe) (G504c core-prim . enum-set-union) (G504b core-prim . enum-set-subset?) (G504a core-prim . enum-set-projection) (G5049 core-prim . enum-set-member?) (G5048 core-prim . enum-set-intersection) (G5047 core-prim . enum-set-indexer) (G5046 core-prim . enum-set-difference) (G5045 core-prim . enum-set-constructor) (G5044 core-prim . enum-set-complement) (G5043 core-prim . enum-set->list) (G4b91 core-prim . who-condition?) (G4b11 core-prim . warning?) (G4b4d core-prim . violation?) (G4c01 core-prim . undefined-violation?) (G4be9 core-prim . syntax-violation?) (G4bed core-prim . syntax-violation-subform) (G4beb core-prim . syntax-violation-form) (G3180 core-prim . syntax-violation) (G5042 core-prim . simple-conditions) (G4b25 core-prim . serious-condition?) (G4ba7 core-prim . non-continuable-violation?) (G4afb core-prim . message-condition?) (G4b8d core-prim . make-who-condition) (G4b0f core-prim . make-warning) (G4b4b core-prim . make-violation) (G4bff core-prim . make-undefined-violation) (G4be3 core-prim . make-syntax-violation) (G4b23 core-prim . make-serious-condition) (G4ba5 core-prim . make-non-continuable-violation) (G4af7 core-prim . make-message-condition) (G4bcd core-prim . make-lexical-violation) (G4b74 core-prim . make-irritants-condition) (G4bb9 core-prim . make-implementation-restriction-violation) (G4b37 core-prim . make-error) (G4b5f core-prim . make-assertion-violation) (G4bcf core-prim . lexical-violation?) (G4b78 core-prim . irritants-condition?) (G4bbb core-prim . implementation-restriction-violation?) (G4b39 core-prim . error?) (G4b93 core-prim . condition-who) (G5041 core-prim . condition-predicate) (G4afd core-prim . condition-message) (G4b7a core-prim . condition-irritants) (G5040 core-prim . condition-accessor) (G503f core-prim . condition) (G4b61 core-prim . assertion-violation?) (G503e core-prim . condition?) (G503d core-prim . utf32->string) (G503c core-prim . utf16->string) (G503b core-prim . utf8->string) (G503a core-prim . uint-list->bytevector) (G5039 core-prim . u8-list->bytevector) (G5038 core-prim . string->utf8) (G5037 core-prim . string->utf32) (G5036 core-prim . string->utf16) (G5035 core-prim . sint-list->bytevector) (G5034 core-prim . native-endianness) (G5033 core-prim . bytevector?) (G5032 core-prim . bytevector=?) (G5031 core-prim . bytevector-uint-set!) (G5030 core-prim . bytevector-uint-ref) (G502f core-prim . bytevector-u8-set!) (G502e core-prim . bytevector-u8-ref) (G502d core-prim . bytevector-u64-set!) (G502c core-prim . bytevector-u64-ref) (G502b core-prim . bytevector-u64-native-set!) (G502a core-prim . bytevector-u64-native-ref) (G5029 core-prim . bytevector-u32-set!) (G5028 core-prim . bytevector-u32-ref) (G5027 core-prim . bytevector-u32-native-set!) (G5026 core-prim . bytevector-u32-native-ref) (G5025 core-prim . bytevector-u16-set!) (G5024 core-prim . bytevector-u16-ref) (G5023 core-prim . bytevector-u16-native-set!) (G5022 core-prim . bytevector-u16-native-ref) (G5021 core-prim . bytevector-sint-set!) (G5020 core-prim . bytevector-sint-ref) (G501f core-prim . bytevector-s8-set!) (G501e core-prim . bytevector-s8-ref) (G501d core-prim . bytevector-s64-set!) (G501c core-prim . bytevector-s64-ref) (G501b core-prim . bytevector-s64-native-set!) (G501a core-prim . bytevector-s64-native-ref) (G5019 core-prim . bytevector-s32-set!) (G5018 core-prim . bytevector-s32-ref) (G5017 core-prim . bytevector-s32-native-set!) (G5016 core-prim . bytevector-s32-native-ref) (G5015 core-prim . bytevector-s16-set!) (G5014 core-prim . bytevector-s16-ref) (G5013 core-prim . bytevector-s16-native-set!) (G5012 core-prim . bytevector-s16-native-ref) (G5011 core-prim . bytevector-length) (G5010 core-prim . bytevector-ieee-single-ref) (G500f core-prim . bytevector-ieee-single-set!) (G500e core-prim . bytevector-ieee-single-native-set!) (G500d core-prim . bytevector-ieee-single-native-ref) (G500c core-prim . bytevector-ieee-double-set!) (G500b core-prim . bytevector-ieee-double-ref) (G500a core-prim . bytevector-ieee-double-native-set!) (G5009 core-prim . bytevector-ieee-double-native-ref) (G5008 core-prim . bytevector-fill!) (G5007 core-prim . bytevector-copy!) (G5006 core-prim . bytevector-copy) (G5005 core-prim . bytevector->uint-list) (G5004 core-prim . bytevector->u8-list) (G5003 core-prim . bytevector->sint-list) (G4c29 core-prim . no-nans-violation?) (G4c15 core-prim . no-infinities-violation?) (G4c27 core-prim . make-no-nans-violation) (G4c13 core-prim . make-no-infinities-violation) (G5002 core-prim . real->flonum) (G5001 core-prim . flzero?) (G5000 core-prim . fltruncate) (G4fff core-prim . fltan) (G4ffe core-prim . flsqrt) (G4ffd core-prim . flsin) (G4ffc core-prim . flround) (G4ffb core-prim . flpositive?) (G4ffa core-prim . flonum?) (G4ff9 core-prim . flodd?) (G4ff8 core-prim . flnumerator) (G4ff7 core-prim . flnegative?) (G4ff6 core-prim . flnan?) (G4ff5 core-prim . flmod0) (G4ff4 core-prim . flmod) (G4ff3 core-prim . flmin) (G4ff2 core-prim . flmax) (G4ff1 core-prim . fllog) (G4ff0 core-prim . flinteger?) (G4fef core-prim . flinfinite?) (G4fee core-prim . flfloor) (G4fed core-prim . flfinite?) (G4fec core-prim . flexpt) (G4feb core-prim . flexp) (G4fea core-prim . fleven?) (G4fe9 core-prim . fldiv0-and-mod0) (G4fe8 core-prim . fldiv0) (G4fe7 core-prim . fldiv-and-mod) (G4fe6 core-prim . fldiv) (G4fe5 core-prim . fldenominator) (G4fe4 core-prim . flcos) (G4fe3 core-prim . flceiling) (G4fe2 core-prim . flatan) (G4fe1 core-prim . flasin) (G4fe0 core-prim . flacos) (G4fdf core-prim . flabs) (G4fde core-prim . fl>?) (G4fdd core-prim . fl>=?) (G4fdc core-prim . fl=?) (G4fdb core-prim . fl<?) (G4fda core-prim . fl<=?) (G4fd9 core-prim . fl/) (G4fd8 core-prim . fl-) (G4fd7 core-prim . fl+) (G4fd6 core-prim . fl*) (G4fd5 core-prim . fixnum->flonum) (G4fd4 core-prim . fxzero?) (G4fd3 core-prim . fxxor) (G4fd2 core-prim . fxrotate-bit-field) (G4fd1 core-prim . fxreverse-bit-field) (G4fd0 core-prim . fxpositive?) (G4fcf core-prim . fxodd?) (G4fce core-prim . fxnot) (G4fcd core-prim . fxnegative?) (G4fcc core-prim . fxmod0) (G4fcb core-prim . fxmod) (G4fca core-prim . fxmin) (G4fc9 core-prim . fxmax) (G4fc8 core-prim . fxlength) (G4fc7 core-prim . fxior) (G4fc6 core-prim . fxif) (G4fc5 core-prim . fxfirst-bit-set) (G4fc4 core-prim . fxeven?) (G4fc3 core-prim . fxdiv0-and-mod0) (G4fc2 core-prim . fxdiv0) (G4fc1 core-prim . fxdiv-and-mod) (G4fc0 core-prim . fxdiv) (G4fbf core-prim . fxcopy-bit-field) (G4fbe core-prim . fxcopy-bit) (G4fbd core-prim . fxbit-set?) (G4fbc core-prim . fxbit-field) (G4fbb core-prim . fxbit-count) (G4fba core-prim . fxarithmetic-shift-right) (G4fb9 core-prim . fxarithmetic-shift-left) (G4fb8 core-prim . fxarithmetic-shift) (G4fb7 core-prim . fxand) (G4fb6 core-prim . fx>?) (G4fb5 core-prim . fx>=?) (G4fb4 core-prim . fx=?) (G4fb3 core-prim . fx<?) (G4fb2 core-prim . fx<=?) (G4fb1 core-prim . fx-/carry) (G4fb0 core-prim . fx-) (G4faf core-prim . fx+/carry) (G4fae core-prim . fx+) (G4fad core-prim . fx*/carry) (G4fac core-prim . fx*) (G4fab core-prim . greatest-fixnum) (G4faa core-prim . least-fixnum) (G4fa9 core-prim . fixnum-width) (G4fa8 core-prim . fixnum?) (G4fa7 core-prim . bitwise-rotate-bit-field) (G4fa6 core-prim . bitwise-reverse-bit-field) (G4fa5 core-prim . bitwise-length) (G4fa4 core-prim . bitwise-if) (G4fa3 core-prim . bitwise-first-bit-set) (G4fa2 core-prim . bitwise-copy-bit-field) (G4fa1 core-prim . bitwise-copy-bit) (G4fa0 core-prim . bitwise-bit-set?) (G4f9f core-prim . bitwise-bit-field) (G4f9e core-prim . bitwise-bit-count) (G4f9d core-prim . bitwise-xor) (G4f9c core-prim . bitwise-ior) (G4f9b core-prim . bitwise-and) (G4f9a core-prim . bitwise-not) (G4f99 core-prim . bitwise-arithmetic-shift-right) (G4f98 core-prim . bitwise-arithmetic-shift-left) (G4f97 core-prim . bitwise-arithmetic-shift) (G4f96 core-prim . zero?) (G4f95 core-prim . vector?) (G4f94 core-prim . vector-set!) (G4f93 core-prim . vector-ref) (G4f92 core-prim . vector-map) (G4f91 core-prim . vector-length) (G4f90 core-prim . vector-for-each) (G4f8f core-prim . vector-fill!) (G4f8e core-prim . vector->list) (G4f8d core-prim . vector) (G4f8c core-prim . values) (G4f8b core-prim . truncate) (G4f8a core-prim . tan) (G4f89 core-prim . symbol?) (G4f88 core-prim . symbol=?) (G4f87 core-prim . symbol->string) (G4f86 core-prim . substring) (G4f85 core-prim . string?) (G4f84 core-prim . string>?) (G4f83 core-prim . string>=?) (G4f82 core-prim . string=?) (G4f81 core-prim . string<?) (G4f80 core-prim . string<=?) (G4f7f core-prim . string-ref) (G4f7e core-prim . string-length) (G4f7d core-prim . string-for-each) (G4f7c core-prim . string-copy) (G4f7b core-prim . string-append) (G4f7a core-prim . string->symbol) (G4f79 core-prim . string->number) (G4f78 core-prim . string->list) (G4f77 core-prim . string) (G4f76 core-prim . sqrt) (G4f75 core-prim . sin) (G4f74 core-prim . round) (G4f73 core-prim . reverse) (G4f72 core-prim . real?) (G4f71 core-prim . real-valued?) (G4f70 core-prim . real-part) (G4f6f core-prim . rationalize) (G4f6e core-prim . rational?) (G4f6d core-prim . rational-valued?) (G4f6c core-prim . procedure?) (G4f6b core-prim . positive?) (G4f6a core-prim . pair?) (G4f69 core-prim . odd?) (G4f68 core-prim . numerator) (G4f67 core-prim . number?) (G4f66 core-prim . number->string) (G4f65 core-prim . null?) (G4f64 core-prim . not) (G4f63 core-prim . negative?) (G4f62 core-prim . nan?) (G4f61 core-prim . min) (G4f60 core-prim . max) (G4f5f core-prim . map) (G4f5e core-prim . make-vector) (G4f5d core-prim . make-string) (G4f5c core-prim . make-rectangular) (G4f5b core-prim . make-polar) (G4f5a core-prim . magnitude) (G4f59 core-prim . log) (G4f58 core-prim . list?) (G4f57 core-prim . list-tail) (G4f56 core-prim . list-ref) (G4f55 core-prim . list->vector) (G4f54 core-prim . list->string) (G4f53 core-prim . list) (G4f52 core-prim . length) (G4f51 core-prim . lcm) (G4f50 core-prim . integer?) (G4f4f core-prim . integer-valued?) (G4f4e core-prim . integer->char) (G4f4d core-prim . infinite?) (G4f4c core-prim . inexact?) (G4f4b core-prim . inexact) (G4f4a core-prim . imag-part) (G4f49 core-prim . gcd) (G4f48 core-prim . for-each) (G4f47 core-prim . floor) (G4f46 core-prim . finite?) (G4f45 core-prim . expt) (G4f44 core-prim . exp) (G4f43 core-prim . exact?) (G4f42 core-prim . exact-integer-sqrt) (G4f41 core-prim . exact) (G4f40 core-prim . even?) (G4f3f core-prim . error) (G4f3e core-prim . eqv?) (G4f3d core-prim . equal?) (G4f3c core-prim . eq?) (G4f3b core-prim . dynamic-wind) (G4f3a core-prim . div0-and-mod0) (G4f39 core-prim . mod0) (G4f38 core-prim . div0) (G4f37 core-prim . div-and-mod) (G4f36 core-prim . mod) (G4f35 core-prim . div) (G4f34 core-prim . denominator) (G4f33 core-prim . cos) (G4f32 core-prim . cons) (G4f31 core-prim . complex?) (G4f30 core-prim . char?) (G4f2f core-prim . char>?) (G4f2e core-prim . char>=?) (G4f2d core-prim . char=?) (G4f2c core-prim . char<?) (G4f2b core-prim . char<=?) (G4f2a core-prim . char->integer) (G4f29 core-prim . ceiling) (G4f28 core-prim . call-with-values) (G4f27 core-prim . call/cc) (G4f26 core-prim . call-with-current-continuation) (G4f25 core-prim . cddddr) (G4f24 core-prim . cdddar) (G4f23 core-prim . cddadr) (G4f22 core-prim . cddaar) (G4f21 core-prim . cdaddr) (G4f20 core-prim . cdadar) (G4f1f core-prim . cdaadr) (G4f1e core-prim . cdaaar) (G4f1d core-prim . cadddr) (G4f1c core-prim . caddar) (G4f1b core-prim . cadadr) (G4f1a core-prim . cadaar) (G4f19 core-prim . caaddr) (G4f18 core-prim . caadar) (G4f17 core-prim . caaadr) (G4f16 core-prim . caaaar) (G4f15 core-prim . cdddr) (G4f14 core-prim . cddar) (G4f13 core-prim . cdadr) (G4f12 core-prim . cdaar) (G4f11 core-prim . caddr) (G4f10 core-prim . cadar) (G4f0f core-prim . caadr) (G4f0e core-prim . caaar) (G4f0d core-prim . cddr) (G4f0c core-prim . cdar) (G4f0b core-prim . cadr) (G4f0a core-prim . caar) (G4f09 core-prim . cdr) (G4f08 core-prim . car) (G4f07 core-prim . boolean?) (G4f06 core-prim . boolean=?) (G4f05 core-prim . atan) (G4f04 core-prim . assertion-violation) (G4f03 core-prim . asin) (G4f02 core-prim . apply) (G4f01 core-prim . append) (G4f00 core-prim . angle) (G4eff core-prim . acos) (G4efe core-prim . abs) (G4efd core-prim . /) (G4efc core-prim . *) (G4efb core-prim . -) (G4efa core-prim . +) (G4ef9 core-prim . >=) (G4ef8 core-prim . >) (G4ef7 core-prim . =) (G4ef6 core-prim . <=) (G4ef5 core-prim . <) (G4ef4 core-prim . library) (G4ef3 core-prim . export) (G4ef2 $core-rtd &no-nans-rtd &no-nans-rcd) (G4ef1 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4ef0 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4eef $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4eee $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4eed $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4eec $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4eeb $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4eea $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4ee9 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4ee8 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4ee7 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4ee6 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4ee5 $core-rtd &i/o-rtd &i/o-rcd) (G4ee4 $core-rtd &undefined-rtd &undefined-rcd) (G4ee3 $core-rtd &syntax-rtd &syntax-rcd) (G4ee2 $core-rtd &lexical-rtd &lexical-rcd) (G4ee1 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4ee0 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4edf $core-rtd &who-rtd &who-rcd) (G4ede $core-rtd &irritants-rtd &irritants-rcd) (G4edd $core-rtd &assertion-rtd &assertion-rcd) (G4edc $core-rtd &violation-rtd &violation-rcd) (G4edb $core-rtd &error-rtd &error-rcd) (G4eda $core-rtd &serious-rtd &serious-rcd) (G4ed9 $core-rtd &warning-rtd &warning-rcd) (G4ed8 $core-rtd &message-rtd &message-rcd) (G4ed7 $core-rtd &condition-rtd &condition-rcd) (G4ed6 macro . define-condition-type) (G4ed5 macro . define-enumeration) (G4ed4 macro . define-record-type) (G4ed3 macro . parent-rtd) (G4ed2 macro . nongenerative) (G4ed1 macro . opaque) (G4ed0 macro . sealed) (G4ecf macro . protocol) (G4ece macro . parent) (G4ecd macro . immutable) (G4ecc macro . mutable) (G4ecb macro . fields) (G4eca macro . error-handling-mode) (G4ec9 macro . file-options) (G4ec8 macro . buffer-mode) (G4ec7 macro . eol-style) (G4ec6 macro . guard) (G4ec5 macro . trace-define) (G4ec4 macro . trace-lambda) (G4ec3 macro . unsyntax-splicing) (G4ec2 macro . unsyntax) (G4ec1 macro . unquote-splicing) (G4ec0 macro . unquote) (G4ebf macro . _) (G4ebe macro . else) (G4ebd macro . =>) (G4ebc macro . ...) (G4ebb macro . assert) (G4eba macro . endianness) (G4eb9 macro . delay) (G4eb8 macro . time) (G4eb7 macro . or) (G4eb6 macro . and) (G4eb5 macro . do) (G4eb4 macro . cond) (G4eb3 macro . let*) (G4eb2 macro . let) (G4eb1 macro . let*-values) (G4eb0 macro . let-values) (G4eaf macro . identifier-syntax) (G4eae macro . with-syntax) (G4ead macro . quasisyntax) (G4eac macro . quasiquote) (G4eab macro . syntax-rules) (G4eaa macro . include) (G4ea9 macro . define-struct) (G4ea8 core-macro . record-constructor-descriptor) (G4ea7 core-macro . record-type-descriptor) (G4ea6 macro . case) (G4ea5 macro . parameterize) (G4ea4 macro . unless) (G4ea3 macro . when) (G4ea2 core-macro . if) (G4ea1 core-macro . letrec*) (G4ea0 core-macro . letrec) (G4e9f core-macro . type-descriptor) (G4e9e core-macro . case-lambda) (G4e9d core-macro . lambda) (G4e9c core-macro . syntax) (G4e9b core-macro . syntax-case) (G4e9a core-macro . quote) (G4e99 core-macro . foreign-call) (G4e98 letrec-syntax) (G4e97 let-syntax) (G4e96 set!) (G4e95 import) (G4e94 begin) (G4e93 module) (G4e92 define-syntax) (G4e91 define)) values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51b1 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5158) (eval-core . G5157) (set-symbol-value! . G5156) (symbol-value . G5155) (gensym . G5154) (void . G5153)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51b2 '(mosh) '() '() '() '() '((set-symbol-value! . G5156) (symbol-value . G5155) (assoc-ref . G5131) (alist-cons . G5130) (print . G512f) (format . G512e) (standard-library-path . G512d) (file-newer? . G512c) (stat-mtime . G512b) (current-directory . G512a) (write-to-file . G5129) (file->list . G5128) (file->string . G5127) (digit->integer . G5126) (call-with-string-input-port . G5125) (call-with-string-io . G5124) (string-split . G5123) (bytevector-for-each . G5122) (string->regexp . G5121) (rxmatch . G5120) (regexp-replace-all . G511f) (hashtable-for-each . G511e) (get-timeofday . G511a) (get-command-line . G5119) (sys-display . G5118) (source-info . G5117) (make-compiler-instruction . G5116) (make-instruction . G5115) (set-source-info! . G5114) (bignum? . G5113) (make-complex . G5112) (fasl-read . G5111) (fasl-write . G5110) (include . G4eaa)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51b3 '(mosh backend) '() '() '() '() '((receive . G510f)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51b4 '(mosh file) '() '() '() '() '((read-line . G5150) (file-newer? . G512c) (stat-mtime . G512b) (current-directory . G512a) (write-to-file . G5129) (file->list . G5128) (file->string . G5127)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51b5 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5122)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51b6 '(mosh number) '() '() '() '() '((digit->integer . G5126)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51b7 '(mosh string) '() '() '() '() '((print . G512f) (format . G512e) (call-with-string-input-port . G5125) (call-with-string-io . G5124) (string-split . G5123) (string->regexp . G5121)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51b8 '(mosh list) '() '() '() '() '((assoc-ref . G5131)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51b9 '(mosh regexp) '() '() '() '() '((rxmatch . G5120) (regexp-replace-all . G511f)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51ba '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G511e)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51bb '(mosh parameters) '() '() '() '() '((make-parameter . G28a7) (parameterize . G4ea5)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51bc '(system) '() '() '() '() '((readdir . G511d) (get-environment-variables . G511c) (get-environment-variable . G511b)) '() values values '#f '#f '#f '#f) (G2c3e@G2ad1@install-library 'G51bd '(srfi :1) '() '() '() '() '((dotted-list? . G514f) (circular-list? . G514e) (proper-list? . G514d) (circular-list . G514c) (last . G514b) (last-pair . G514a) (not-pair? . G5149) (split-at! . G5148) (split-at . G5147) (list= . G5146) (list-copy . G5145) (list-tabulate . G5144) (make-list . G5143) (xcons . G5142) (tenth . G5141) (ninth . G5140) (eighth . G513f) (seventh . G513e) (sixth . G513d) (fifth . G513c) (drop-right! . G513b) (drop-right . G513a) (take-right . G5139) (take! . G5138) (drop . G5137) (take . G5136) (car+cdr . G5135) (third . G5134) (second . G5133) (first . G5132) (alist-cons . G5130)) '() values values '#f '#f '#f '#f))
((lambda (G4ded@for-each-with-index G4def@repl G4df1@trace-printer G4df3@command-line G4df5@local-library-path G4df7@load/args G4df9@load G4dfb@ironscheme-build G4dfd@eval-top-level G4dff@compile-system-libraries G4e01@compile G4e03@compile->closure G4e05@pre-compile-r6rs-file G4e07@load-r6rs-top-level G4e09@write-record) (begin (set! G4ded@for-each-with-index (lambda (G4e1e@proc G4e1f@lst) (letrec ((G4e22@loop (lambda (G4e24@i G4e25@lst) (if (null? G4e25@lst) (if '#f '#f (void)) (begin (G4e1e@proc G4e24@i (car G4e25@lst)) (G4e22@loop (+ G4e24@i '1) (cdr G4e25@lst))))))) (G4e22@loop '1 G4e1f@lst)))) (set! G4def@repl (lambda G4e28@x ((lambda (G4e2b@rec) (begin (set! G4e2b@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4e2d@G4e2c) (with-exception-handler (lambda (G4e2f@e) (G4e2d@G4e2c (if '#t (G4ded@for-each-with-index (lambda (G4e31@i G4e32@x) ((lambda (G4e35@rtd) (begin (format '#t '"   ~d. ~a" G4e31@i (record-type-name G4e35@rtd)) ((lambda (G4e37@v) ((lambda (G4e39@t) (if (memv G4e39@t '(0)) (newline) (if (memv G4e39@t '(1)) (begin (display '": ") (write ((record-accessor G4e35@rtd '0) G4e32@x)) (newline)) (begin (display '":\n") ((letrec ((G4e3b@f (lambda (G4e3d@i) (if (not (= G4e3d@i (vector-length G4e37@v))) (begin (display '"       ") (display (vector-ref G4e37@v G4e3d@i)) (display '": ") (write ((record-accessor G4e35@rtd G4e3d@i) G4e32@x)) (newline) (G4e3b@f (+ G4e3d@i '1))) (void))))) G4e3b@f) '0))))) (vector-length G4e37@v))) (record-type-field-names G4e35@rtd)))) (record-rtd G4e32@x))) (simple-conditions G4e2f@e)) (raise G4e2f@e)))) (lambda () (begin '#f ((lambda (G4e3f@line) (if (eof-object? G4e3f@line) (exit) (write (G4dfd@eval-top-level (call-with-port (open-string-input-port G4e3f@line) read))))) (get-line (current-input-port)))))))) (newline) (G4e2b@rec)))) (G4e2b@rec))) '#f))) (set! G4df1@trace-printer (G299d@G28a8@make-parameter write)) (set! G4df3@command-line (G299d@G28a8@make-parameter (get-command-line))) (set! G4df5@local-library-path (lambda (G4e41@filename) (cons '"." (G2c2e@G2ab1@library-path)))) (set! G4df7@load/args (lambda (G4e43@filename . G4e45@args) (begin (apply G4e07@load-r6rs-top-level G4e43@filename 'load G4e45@args) (void)))) (set! G4df9@load (lambda (G4e47@filename) (begin (apply G4e07@load-r6rs-top-level G4e47@filename 'load (G4df3@command-line)) (void)))) (set! G4dfb@ironscheme-build (lambda () (G4df9@load '"ironscheme-buildscript.ss"))) (set! G4dfd@eval-top-level (lambda (G4e49@x) (G4ab4@G315f@eval G4e49@x (G4acb@G318d@interaction-environment)))) (set! G4dff@compile-system-libraries (lambda () (G4dfd@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4e01@compile (lambda (G4e4b@filename) (G4e07@load-r6rs-top-level G4e4b@filename 'compile))) (set! G4e03@compile->closure (lambda (G4e4d@filename) (G4e07@load-r6rs-top-level G4e4d@filename 'closure))) (set! G4e05@pre-compile-r6rs-file (lambda (G4e4f@filename) (G4e07@load-r6rs-top-level G4e4f@filename 'compile))) (set! G4e07@load-r6rs-top-level (lambda (G4e51@filename G4e52@how . G4e55@args) ((lambda (G4e59@G4e57@library-path G4e5a@G4e58@library-path) ((lambda (G4e5d@swap) (dynamic-wind G4e5d@swap (lambda () ((lambda (G4e5f@x*) ((lambda (G4e61@t) (if (memv G4e61@t '(closure)) (G4aca@G318b@pre-compile-r6rs-top-level G4e5f@x*) (if (memv G4e61@t '(load)) ((lambda (G4e65@G4e63@command-line G4e66@G4e64@command-line) ((lambda (G4e69@swap) (dynamic-wind G4e69@swap (lambda () ((G4ac9@G3189@compile-r6rs-top-level G4e5f@x*))) G4e69@swap)) (lambda () ((lambda (G4e6b@t) (begin (G4e65@G4e63@command-line G4e66@G4e64@command-line) (set! G4e66@G4e64@command-line G4e6b@t))) (G4e65@G4e63@command-line))))) G4df3@command-line (cons G4e51@filename (car G4e55@args))) (if (memv G4e61@t '(compile)) (begin (G4ac9@G3189@compile-r6rs-top-level G4e5f@x*) (G2c32@G2ab9@serialize-all G2998@G289e@serialize-library G2a02@G29ab@compile-core-expr)) (if '#f '#f (void)))))) G4e52@how)) (with-input-from-file G4e51@filename (lambda () ((letrec ((G4e6d@f (lambda () ((lambda (G4e6f@x) (if (eof-object? G4e6f@x) '() (cons G4e6f@x (G4e6d@f)))) (G2990@G288e@read-annotated))))) G4e6d@f)))))) G4e5d@swap)) (lambda () ((lambda (G4e71@t) (begin (G4e59@G4e57@library-path G4e5a@G4e58@library-path) (set! G4e5a@G4e58@library-path G4e71@t))) (G4e59@G4e57@library-path))))) G2c2e@G2ab1@library-path (G4df5@local-library-path G4e51@filename)))) (set! G4e09@write-record (lambda (G4e73@record G4e74@port) ((lambda (G4e77@rtd) (begin (format G4e74@port '"    ~a" (record-type-name G4e77@rtd)) ((lambda (G4e79@v) ((lambda (G4e7b@t) (if (memv G4e7b@t '(0)) (newline) (if (memv G4e7b@t '(1)) (begin (display '": " G4e74@port) (write ((record-accessor G4e77@rtd '0) G4e73@record) G4e74@port) (newline G4e74@port)) (begin (display '":\n") ((letrec ((G4e7d@f (lambda (G4e7f@i) (if (not (= G4e7f@i (vector-length G4e79@v))) (begin (display '"       " G4e74@port) (display (vector-ref G4e79@v G4e7f@i) G4e74@port) (display '": " G4e74@port) (write ((record-accessor G4e77@rtd G4e7f@i) G4e73@record) G4e74@port) (newline G4e74@port) (G4e7d@f (+ G4e7f@i '1))) (void))))) G4e7d@f) '0))))) (vector-length G4e79@v))) (record-type-field-names G4e77@rtd)))) (record-rtd G4e73@record)))) (begin (set! G4e8f@G4e09@write-record G4e09@write-record) (set! G4e8e@G4e07@load-r6rs-top-level G4e07@load-r6rs-top-level) (set! G4e8d@G4e05@pre-compile-r6rs-file G4e05@pre-compile-r6rs-file) (set! G4e8c@G4e03@compile->closure G4e03@compile->closure) (set! G4e8b@G4e01@compile G4e01@compile) (set! G4e8a@G4dff@compile-system-libraries G4dff@compile-system-libraries) (set! G4e89@G4dfd@eval-top-level G4dfd@eval-top-level) (set! G4e88@G4dfb@ironscheme-build G4dfb@ironscheme-build) (set! G4e87@G4df9@load G4df9@load) (set! G4e86@G4df7@load/args G4df7@load/args) (set! G4e85@G4df5@local-library-path G4df5@local-library-path) (set! G4e84@G4df3@command-line G4df3@command-line) (set! G4e83@G4df1@trace-printer G4df1@trace-printer) (set! G4e82@G4def@repl G4def@repl) (set! G4e81@G4ded@for-each-with-index G4ded@for-each-with-index) (G2c33@G2abb@current-precompiled-library-loader G2999@G28a0@load-serialized-library) (set-symbol-value! 'load G4df9@load) (set-symbol-value! 'pre-compile-r6rs-file G4e05@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4dfd@eval-top-level) (set-symbol-value! 'int-env-syms G4aab@G314d@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2a01@G29a9@expanded->core) (set-symbol-value! 'trace-printer G4df1@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c2e@G2ab1@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4e0a@args G4e0b@port) (with-exception-handler (lambda (G4e0e@c) (begin (display '" Condition components:\n" G4e0b@port) (G4ded@for-each-with-index (lambda (G4e10@i G4e11@x) ((lambda (G4e14@rtd) (begin (format G4e0b@port '"   ~d. ~a" G4e10@i (record-type-name G4e14@rtd)) ((lambda (G4e16@v) ((lambda (G4e18@t) (if (memv G4e18@t '(0)) (newline) (if (memv G4e18@t '(1)) (begin (display '": ") (write ((record-accessor G4e14@rtd '0) G4e11@x)) (newline)) (begin (display '":\n") ((letrec ((G4e1a@f (lambda (G4e1c@i) (if (not (= G4e1c@i (vector-length G4e16@v))) (begin (display '"       ") (display (vector-ref G4e16@v G4e1c@i)) (display '": ") (write ((record-accessor G4e14@rtd G4e1c@i) G4e11@x)) (newline) (G4e1a@f (+ G4e1c@i '1))) (void))))) G4e1a@f) '0))))) (vector-length G4e16@v))) (record-type-field-names G4e14@rtd)))) (record-rtd G4e11@x))) (simple-conditions G4e0e@c)))) (lambda () (if (null? G4e0a@args) (G4def@repl) (G4e07@load-r6rs-top-level (car G4e0a@args) 'load (cdr G4e0a@args)))))) (G4df3@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
