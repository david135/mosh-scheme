;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2811@read-annotated G2813@annotation-stripped G2815@annotation? G2817@annotation-source G2819@annotation-expression G281b@scm->fasl G281d@fasl-save G281f@fasl-load G2821@serialize-library G2823@load-serialized-library G2825@make-record-printer G2827@compile-core G2829@read-library-source-file G282b@make-parameter G2897@file-options-spec) (begin (set! G2811@read-annotated read) (set! G2813@annotation-stripped (lambda (G2898@x) (G2819@annotation-expression G2898@x))) (set! G2815@annotation? (lambda (G289a@x) (source-info G289a@x))) (set! G2817@annotation-source (lambda (G289c@x) (source-info G289c@x))) (set! G2819@annotation-expression (lambda (G289e@x) (if (pair? G289e@x) (cons (car G289e@x) (cdr G289e@x)) (display '"line:46\n")))) (set! G281b@scm->fasl (lambda (G28a0@filename) (string-append G28a0@filename '".fasl"))) (set! G281d@fasl-save (lambda (G28a2@filename G28a3@obj) (call-with-port (open-file-output-port G28a2@filename) (lambda (G28a6@port) ((symbol-value 'fasl-write!) G28a3@obj G28a6@port))))) (set! G281f@fasl-load (lambda (G28a8@filename) (call-with-port (open-file-input-port G28a8@filename) (symbol-value 'fasl-read!)))) (set! G2821@serialize-library (lambda (G28aa@filename G28ab@obj) (begin (format '#t '"serialize-library ~a\n..." G28aa@filename) ((lambda (G28ae@fasl-file) (begin (if (file-exists? G28ae@fasl-file) (delete-file G28ae@fasl-file) (void)) ((call/cc (lambda (G28b2@G28b0) (lambda () (with-exception-handler (lambda (G28b4@c) ((call/cc (lambda (G28b6@G28b1) (G28b2@G28b0 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28aa@filename) (if (file-exists? G28ae@fasl-file) (delete-file G28ae@fasl-file) (void)) '#f) (G28b6@G28b1 (lambda () (raise-continuable G28b4@c)))))))))) (lambda () (begin (G281d@fasl-save G28ae@fasl-file G28ab@obj) (display '"OK\n")))))))))) (G281b@scm->fasl G28aa@filename))))) (set! G2823@load-serialized-library (lambda (G28b8@filename G28b9@obj) ((lambda (G28bc@fasl-file) (if (and (file-exists? G28bc@fasl-file) ((symbol-value 'file-newer?) G28bc@fasl-file G28b8@filename)) ((lambda (G28be@expanded2core) ((lambda (G28c0@code) ((lambda (G28c2@pivot) ((lambda (G28c4@visit) ((lambda (G28c6@visit-proc) ((lambda () (begin (set-car! G28c2@pivot G28c6@visit-proc) ((lambda (G28c8@pivot) ((lambda (G28ca@invoke) ((lambda () (begin (set-car! G28c8@pivot (lambda () (eval-core G28ca@invoke))) (apply G28b9@obj G28c0@code))))) (G28be@expanded2core (car G28c8@pivot)))) (cdr G28c2@pivot)) '#t)))) (lambda () (eval-core G28c4@visit)))) (G28be@expanded2core (car G28c2@pivot)))) (cddddr (cddddr G28c0@code)))) (G281f@fasl-load G28bc@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G281b@scm->fasl G28b8@filename)))) (set! G2825@make-record-printer (lambda (G28cc@name G28cd@printer) (lambda G28d0@x (begin (display '"record printer") (for-each display G28d0@x))))) (set! G2827@compile-core (lambda G28d2@x (apply error 'comile-core '"not implementated" G28d2@x))) (set! G2829@read-library-source-file (lambda (G28d4@file-name) (with-input-from-file G28d4@file-name G2811@read-annotated))) (set! G282b@make-parameter (lambda G28e4 ((lambda (G28e5) (if (= G28e5 '1) (apply (lambda (G28d6@x) (G282b@make-parameter G28d6@x (lambda (G28d8@x) G28d8@x))) G28e4) (if (= G28e5 '2) (apply (lambda (G28da@x G28db@fender) ((lambda (G28de@x) (lambda G28e2 ((lambda (G28e3) (if (= G28e3 '0) (apply (lambda () G28de@x) G28e2) (if (= G28e3 '1) (apply (lambda (G28e0@v) (set! G28de@x (G28db@fender G28e0@v))) G28e2) (error 'apply '"invalid arg count")))) (length G28e2)))) (G28db@fender G28da@x))) G28e4) (error 'apply '"invalid arg count")))) (length G28e4)))) (set! G2897@file-options-spec (lambda (G28e6@x) G28e6@x)) (begin (set! G28f6@G2897@file-options-spec G2897@file-options-spec) (set! G28f5@G282b@make-parameter G282b@make-parameter) (set! G28f4@G2829@read-library-source-file G2829@read-library-source-file) (set! G28f3@G2827@compile-core G2827@compile-core) (set! G28f2@G2825@make-record-printer G2825@make-record-printer) (set! G28f1@G2823@load-serialized-library G2823@load-serialized-library) (set! G28f0@G2821@serialize-library G2821@serialize-library) (set! G28ef@G281f@fasl-load G281f@fasl-load) (set! G28ee@G281d@fasl-save G281d@fasl-save) (set! G28ed@G281b@scm->fasl G281b@scm->fasl) (set! G28ec@G2819@annotation-expression G2819@annotation-expression) (set! G28eb@G2817@annotation-source G2817@annotation-source) (set! G28ea@G2815@annotation? G2815@annotation?) (set! G28e9@G2813@annotation-stripped G2813@annotation-stripped) (set! G28e8@G2811@read-annotated G2811@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28fb@current-primitive-locations G28fd@mutable? G28ff@rewriter G2901@expanded->core G2903@compile-core-expr G2905@pretty-print G2907@compile-core-expr-to-port) (begin (set! G28fb@current-primitive-locations (G28f5@G282b@make-parameter (lambda (G2908@x) '#f) (lambda (G290a@p) G290a@p))) (set! G28fd@mutable? (lambda (G290c@x) (or (pair? G290c@x) (vector? G290c@x) (hashtable? G290c@x)))) (set! G28ff@rewriter (lambda (G290e@quote-hack?) ((lambda (G2911@f) (begin (set! G2911@f (lambda (G2912@x) (if (pair? G2912@x) ((lambda (G2914@t) (if (memv G2914@t '(quote)) (if (and G290e@quote-hack? (G28fd@mutable? (cadr G2912@x))) ((lambda (G2916@g) (begin (set-symbol-value! G2916@g (cadr G2912@x)) G2916@g)) (gensym)) G2912@x) (if (memv G2914@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2918@x) (cons (car G2918@x) (map G2911@f (cdr G2918@x)))) (cdr G2912@x))) (if (memv G2914@t '(lambda)) (cons* 'lambda (cadr G2912@x) (map G2911@f (cddr G2912@x))) (if (memv G2914@t '(letrec)) ((lambda (G291a@bindings G291b@body*) ((lambda (G291e@lhs* G291f@rhs*) (cons* 'letrec (map list G291e@lhs* (map G2911@f G291f@rhs*)) (map G2911@f G291b@body*))) (map car G291a@bindings) (map cadr G291a@bindings))) (cadr G2912@x) (cddr G2912@x)) (if (memv G2914@t '(letrec*)) ((lambda (G2922@bindings G2923@body*) ((lambda (G2926@lhs* G2927@rhs*) (cons* 'letrec* (map list G2926@lhs* (map G2911@f G2927@rhs*)) (map G2911@f G2923@body*))) (map car G2922@bindings) (map cadr G2922@bindings))) (cadr G2912@x) (cddr G2912@x)) (if (memv G2914@t '(library-letrec*)) ((lambda (G292a@name G292b@x) ((lambda (G292e@bindings G292f@body*) ((lambda (G2932@lhs* G2933@lhs** G2934@rhs*) (cons* 'library-letrec* G292a@name (map list G2932@lhs* G2933@lhs** (map G2911@f G2934@rhs*)) (map G2911@f G292f@body*))) (map car G292e@bindings) (map cadr G292e@bindings) (map caddr G292e@bindings))) (cadr G292b@x) (cddr G292b@x))) (cadr G2912@x) (cdr G2912@x)) (if (memv G2914@t '(begin)) (cons 'begin (map G2911@f (cdr G2912@x))) (if (memv G2914@t '(set!)) (list 'set! (cadr G2912@x) (G2911@f (caddr G2912@x))) (if (memv G2914@t '(primitive)) ((lambda (G2938@op) ((lambda (G293a@t) (if G293a@t ((lambda (G293c@loc) G293c@loc) G293a@t) G2938@op)) ((G28fb@current-primitive-locations) G2938@op))) (cadr G2912@x)) (if (memv G2914@t '(define)) G2912@x (if (list? G2912@x) (map G2911@f G2912@x) (error 'rewrite '"invalid form ~s ~s" G2912@x (list? G2912@x)))))))))))))) (car G2912@x)) G2912@x))) G2911@f)) '#f))) (set! G2901@expanded->core (lambda (G293e@x) ((G28ff@rewriter '#t) G293e@x))) (set! G2903@compile-core-expr (lambda (G2940@x) ((G28ff@rewriter '#f) G2940@x))) (set! G2905@pretty-print write) (set! G2907@compile-core-expr-to-port (lambda (G2942@x G2943@p) (G2905@pretty-print ((G28ff@rewriter '#f) G2942@x) G2943@p))) (begin (set! G294c@G2907@compile-core-expr-to-port G2907@compile-core-expr-to-port) (set! G294b@G2905@pretty-print G2905@pretty-print) (set! G294a@G2903@compile-core-expr G2903@compile-core-expr) (set! G2949@G2901@expanded->core G2901@expanded->core) (set! G2948@G28ff@rewriter G28ff@rewriter) (set! G2947@G28fd@mutable? G28fd@mutable?) (set! G2946@G28fb@current-primitive-locations G28fb@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29a2@make-collection G29a4@current-library-collection G29aa@G29a5 G29ac@G29a7 G29ae@G29a6 G29b1@library? G29b3@make-library G29b5@library-id G29b7@library-name G29b9@library-version G29bb@library-imp* G29bd@library-vis* G29bf@library-inv* G29c1@library-subst G29c3@library-env G29c5@library-visit-state G29c7@library-invoke-state G29c9@library-visit-code G29cb@library-invoke-code G29cd@library-visible? G29cf@library-source-file-name G29d1@set-library-id! G29d3@set-library-name! G29d5@set-library-version! G29d7@set-library-imp*! G29d9@set-library-vis*! G29db@set-library-inv*! G29dd@set-library-subst! G29df@set-library-env! G29e1@set-library-visit-state! G29e3@set-library-invoke-state! G29e5@set-library-visit-code! G29e7@set-library-invoke-code! G29e9@set-library-visible?! G29eb@set-library-source-file-name! G29ed@rp G29ef@find-dependencies G29f1@find-library-by G29f3@library-path G29f5@library-extensions G29f7@library-name->file-name G29f9@file-locator G29fb@serialize-all G29fd@current-precompiled-library-loader G29ff@try-load-from-file G2a01@library-loader G2a03@current-library-expander G2a05@external-pending-libraries G2a07@find-external-library G2a09@find-library-by-name G2a0b@library-exists? G2a0d@find-library-by-spec/die G2a0f@label->binding-table G2a11@install-library-record G2a13@install-library G2a15@imported-label->binding G2a17@invoke-library G2a19@visit-library G2a1b@invoke-library-by-spec G2a1d@installed-libraries G2a1f@library-spec) (begin (set! G29a2@make-collection (lambda () ((lambda (G2a20@set) ((lambda (G2a23@set-cons) (begin (set! G2a23@set-cons (lambda (G2a28@x G2a29@ls) (if (memq G2a28@x G2a29@ls) G2a29@ls (cons G2a28@x G2a29@ls)))) (lambda G2a26 ((lambda (G2a27) (if (= G2a27 '0) (apply (lambda () G2a20@set) G2a26) (if (= G2a27 '1) (apply (lambda (G2a24@x) (set! G2a20@set (G2a23@set-cons G2a24@x G2a20@set))) G2a26) (error 'apply '"invalid arg count")))) (length G2a26))))) '#f)) '()))) (set! G29a4@current-library-collection (G28f5@G282b@make-parameter (G29a2@make-collection) (lambda (G2a2c@x) (begin (if (not (procedure? G2a2c@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a2c@x) (void)) G2a2c@x)))) (set! G29aa@G29a5 (make-record-type-descriptor 'library '#f 'G29a8 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29ac@G29a7 '#f) (set! G29ae@G29a6 (make-record-constructor-descriptor G29aa@G29a5 '#f G29ac@G29a7)) (set! G29b1@library? (record-predicate G29aa@G29a5)) (set! G29b3@make-library (record-constructor G29ae@G29a6)) (set! G29b5@library-id (record-accessor G29aa@G29a5 '0)) (set! G29b7@library-name (record-accessor G29aa@G29a5 '1)) (set! G29b9@library-version (record-accessor G29aa@G29a5 '2)) (set! G29bb@library-imp* (record-accessor G29aa@G29a5 '3)) (set! G29bd@library-vis* (record-accessor G29aa@G29a5 '4)) (set! G29bf@library-inv* (record-accessor G29aa@G29a5 '5)) (set! G29c1@library-subst (record-accessor G29aa@G29a5 '6)) (set! G29c3@library-env (record-accessor G29aa@G29a5 '7)) (set! G29c5@library-visit-state (record-accessor G29aa@G29a5 '8)) (set! G29c7@library-invoke-state (record-accessor G29aa@G29a5 '9)) (set! G29c9@library-visit-code (record-accessor G29aa@G29a5 '10)) (set! G29cb@library-invoke-code (record-accessor G29aa@G29a5 '11)) (set! G29cd@library-visible? (record-accessor G29aa@G29a5 '12)) (set! G29cf@library-source-file-name (record-accessor G29aa@G29a5 '13)) (set! G29d1@set-library-id! (record-mutator G29aa@G29a5 '0)) (set! G29d3@set-library-name! (record-mutator G29aa@G29a5 '1)) (set! G29d5@set-library-version! (record-mutator G29aa@G29a5 '2)) (set! G29d7@set-library-imp*! (record-mutator G29aa@G29a5 '3)) (set! G29d9@set-library-vis*! (record-mutator G29aa@G29a5 '4)) (set! G29db@set-library-inv*! (record-mutator G29aa@G29a5 '5)) (set! G29dd@set-library-subst! (record-mutator G29aa@G29a5 '6)) (set! G29df@set-library-env! (record-mutator G29aa@G29a5 '7)) (set! G29e1@set-library-visit-state! (record-mutator G29aa@G29a5 '8)) (set! G29e3@set-library-invoke-state! (record-mutator G29aa@G29a5 '9)) (set! G29e5@set-library-visit-code! (record-mutator G29aa@G29a5 '10)) (set! G29e7@set-library-invoke-code! (record-mutator G29aa@G29a5 '11)) (set! G29e9@set-library-visible?! (record-mutator G29aa@G29a5 '12)) (set! G29eb@set-library-source-file-name! (record-mutator G29aa@G29a5 '13)) (set! G29ed@rp (G28f2@G2825@make-record-printer 'library (lambda (G2a2e@x G2a2f@p G2a30@wr) (begin (if (not (G29b1@library? G2a2e@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29b9@library-version G2a2e@x)) (G29b7@library-name G2a2e@x) (append (G29b7@library-name G2a2e@x) (list (G29b9@library-version G2a2e@x))))) G2a2f@p))))) (set! G29ef@find-dependencies (lambda (G2a34@ls) (if (null? G2a34@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29f1@find-library-by (lambda (G2a36@pred) ((letrec ((G2a38@f (lambda (G2a3a@ls) (if (null? G2a3a@ls) '#f (if (G2a36@pred (car G2a3a@ls)) (car G2a3a@ls) (G2a38@f (cdr G2a3a@ls))))))) G2a38@f) ((G29a4@current-library-collection))))) (set! G29f3@library-path (G28f5@G282b@make-parameter '(".") (lambda (G2a3c@x) (if (and (list? G2a3c@x) (for-all string? G2a3c@x)) (map (lambda (G2a3e@x) G2a3e@x) G2a3c@x) (assertion-violation 'library-path '"not a list of strings" G2a3c@x))))) (set! G29f5@library-extensions (G28f5@G282b@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a40@x) (if (and (list? G2a40@x) (for-all string? G2a40@x)) (map (lambda (G2a42@x) G2a42@x) G2a40@x) (assertion-violation 'library-extensions '"not a list of strings" G2a40@x))))) (set! G29f7@library-name->file-name (lambda (G2a44@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a48@G2a46 G2a49@G2a47) ((lambda (G2a4c@extract G2a4d@p) ((lambda (G2a51@display-hex) (begin (set! G2a51@display-hex (lambda (G2a5a@n) (if (<= '0 G2a5a@n '9) (display G2a5a@n G2a4d@p) (display (integer->char (+ (char->integer '#\A) (- G2a5a@n '10))) G2a4d@p)))) (begin ((letrec ((G2a52@f (lambda (G2a54@ls) (if (not (null? G2a54@ls)) (begin (display '"/" G2a4d@p) (for-each (lambda (G2a56@c) (if (or (char<=? '#\a G2a56@c '#\z) (char<=? '#\A G2a56@c '#\Z) (char<=? '#\0 G2a56@c '#\9) (memv G2a56@c '(#\- #\. #\_ #\~))) (display G2a56@c G2a4d@p) (begin (display '"%" G2a4d@p) ((lambda (G2a58@n) (begin (G2a51@display-hex (quotient G2a58@n '16)) (G2a51@display-hex (remainder G2a58@n '16)))) (char->integer G2a56@c))))) (string->list (symbol->string (car G2a54@ls)))) (G2a52@f (cdr G2a54@ls))) (void))))) G2a52@f) G2a44@x) (G2a4c@extract)))) '#f)) G2a49@G2a47 G2a48@G2a46))))) (set! G29f9@file-locator (G28f5@G282b@make-parameter (lambda (G2a5c@x) ((lambda (G2a5e@str) ((letrec ((G2a60@f (lambda (G2a62@ls G2a63@exts G2a64@failed-list) (if (null? G2a62@ls) ((lambda () ((lambda (G2a70@G2a6b G2a72@G2a6d G2a74@G2a6c G2a77@G2a6a G2a79@make-library-resolution-condition G2a7b@G2a68 G2a7d@G2a69 G2a7f@library-resolution-condition? G2a81@condition-library G2a83@condition-files) (begin (set! G2a70@G2a6b (make-record-type-descriptor '&library-resolution G4c0b@G495c@&condition-rtd 'G2a6e '#f '#f '#((immutable library) (immutable files)))) (set! G2a72@G2a6d '#f) (set! G2a74@G2a6c (make-record-constructor-descriptor G2a70@G2a6b G4c0c@G495e@&condition-rcd G2a72@G2a6d)) (set! G2a77@G2a6a (record-predicate G2a70@G2a6b)) (set! G2a79@make-library-resolution-condition (record-constructor G2a74@G2a6c)) (set! G2a7b@G2a68 (record-accessor G2a70@G2a6b '0)) (set! G2a7d@G2a69 (record-accessor G2a70@G2a6b '1)) (set! G2a7f@library-resolution-condition? (condition-predicate G2a70@G2a6b)) (set! G2a81@condition-library (condition-accessor G2a70@G2a6b G2a7b@G2a68)) (set! G2a83@condition-files (condition-accessor G2a70@G2a6b G2a7d@G2a69)) (raise (condition (G4c2b@G49f4@make-error) (G4c4d@G4a4e@make-who-condition 'expander) (G4c11@G49b1@make-message-condition '"cannot locate library in library-path") (G2a79@make-library-resolution-condition G2a5c@x (reverse G2a64@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a63@exts) (G2a60@f (cdr G2a62@ls) (G29f5@library-extensions) G2a64@failed-list) ((lambda (G2a84@name) (if (file-exists? G2a84@name) G2a84@name (G2a60@f G2a62@ls (cdr G2a63@exts) (cons G2a84@name G2a64@failed-list)))) (string-append (car G2a62@ls) G2a5e@str (car G2a63@exts)))))))) G2a60@f) (G29f3@library-path) (G29f5@library-extensions) '())) (G29f7@library-name->file-name G2a5c@x))) (lambda (G2a86@f) (if (procedure? G2a86@f) G2a86@f (assertion-violation 'file-locator '"not a procedure" G2a86@f))))) (set! G29fb@serialize-all (lambda (G2a88@serialize G2a89@compile) ((lambda (G2a8d@library-desc) (begin (set! G2a8d@library-desc (lambda (G2a90@x) (list (G29b5@library-id G2a90@x) (G29b7@library-name G2a90@x)))) (for-each (lambda (G2a8e@x) (if (G29cf@library-source-file-name G2a8e@x) (G2a88@serialize (G29cf@library-source-file-name G2a8e@x) (list (G29b5@library-id G2a8e@x) (G29b7@library-name G2a8e@x) (G29b9@library-version G2a8e@x) (map G2a8d@library-desc (G29bb@library-imp* G2a8e@x)) (map G2a8d@library-desc (G29bd@library-vis* G2a8e@x)) (map G2a8d@library-desc (G29bf@library-inv* G2a8e@x)) (G29c1@library-subst G2a8e@x) (G29c3@library-env G2a8e@x) (G2a89@compile (G29c9@library-visit-code G2a8e@x)) (G2a89@compile (G29cb@library-invoke-code G2a8e@x)) (G29cd@library-visible? G2a8e@x))) (void))) ((G29a4@current-library-collection))))) '#f))) (set! G29fd@current-precompiled-library-loader (G28f5@G282b@make-parameter (lambda (G2a92@filename G2a93@sk) '#f))) (set! G29ff@try-load-from-file (lambda (G2a96@filename) ((G29fd@current-precompiled-library-loader) G2a96@filename (lambda G2abc ((lambda (G2abd) (if (= G2abd '11) (apply (lambda (G2a98@id G2a99@name G2a9a@ver G2a9b@imp* G2a9c@vis* G2a9d@inv* G2a9e@exp-subst G2a9f@exp-env G2aa0@visit-proc G2aa1@invoke-proc G2aa2@visible?) ((letrec ((G2aae@f (lambda (G2ab0@deps) (if (null? G2ab0@deps) (begin (G2a13@install-library G2a98@id G2a99@name G2a9a@ver G2a9b@imp* G2a9c@vis* G2a9d@inv* G2a9e@exp-subst G2a9f@exp-env G2aa0@visit-proc G2aa1@invoke-proc '#f '#f G2aa2@visible? '#f) '#t) ((lambda (G2ab2@d) ((lambda (G2ab4@label G2ab5@dname) ((lambda (G2ab8@l) (if (and (G29b1@library? G2ab8@l) (eq? G2ab4@label (G29b5@library-id G2ab8@l))) (G2aae@f (cdr G2ab0@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2a99@name G2ab5@dname G2a96@filename G2ab8@l G2ab4@label (G29b5@library-id G2ab8@l)) '#f))) (G2a09@find-library-by-name G2ab5@dname))) (car G2ab2@d) (cadr G2ab2@d))) (car G2ab0@deps)))))) G2aae@f) (append G2a9b@imp* G2a9c@vis* G2a9d@inv*))) G2abc) (if (>= G2abd '0) (apply (lambda G2aba@others '#f) G2abc) (error 'apply '"invalid arg count")))) (length G2abc)))))) (set! G2a01@library-loader (G28f5@G282b@make-parameter (lambda (G2abe@x) ((lambda (G2ac0@file-name) (if (not G2ac0@file-name) (assertion-violation '#f '"cannot file library" G2abe@x) (or (G29ff@try-load-from-file G2ac0@file-name) ((G2a03@current-library-expander) (G28f4@G2829@read-library-source-file G2ac0@file-name) G2ac0@file-name (lambda (G2ac2@name) (if (not (fast-equal? G2ac2@name G2abe@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ac6@G2ac4 G2ac7@G2ac5) ((lambda (G2aca@e G2acb@p) (begin (display '"expected to find library " G2acb@p) (write G2abe@x G2acb@p) (display '" in file " G2acb@p) (display G2ac0@file-name G2acb@p) (display '", found " G2acb@p) (write G2ac2@name G2acb@p) (display '" instead" G2acb@p) (G2aca@e))) G2ac7@G2ac5 G2ac6@G2ac4)))) (void))))))) ((G29f9@file-locator) G2abe@x))) (lambda (G2ace@f) (if (procedure? G2ace@f) G2ace@f (assertion-violation 'library-locator '"not a procedure" G2ace@f))))) (set! G2a03@current-library-expander (G28f5@G282b@make-parameter (lambda (G2ad0@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ad2@f) (if (procedure? G2ad2@f) G2ad2@f (assertion-violation 'library-expander '"not a procedure" G2ad2@f))))) (set! G2a05@external-pending-libraries (G28f5@G282b@make-parameter '())) (set! G2a07@find-external-library (lambda (G2ad4@name) (begin (if (member G2ad4@name (G2a05@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ad4@name) (void)) ((lambda (G2ad8@G2ad6 G2ad9@G2ad7) ((lambda (G2adc@swap) (dynamic-wind G2adc@swap (lambda () (begin ((G2a01@library-loader) G2ad4@name) (or (G29f1@find-library-by (lambda (G2ade@x) (fast-equal? (G29b7@library-name G2ade@x) G2ad4@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ad4@name)))) G2adc@swap)) (lambda () ((lambda (G2ae0@t) (begin (G2ad8@G2ad6 G2ad9@G2ad7) (set! G2ad9@G2ad7 G2ae0@t))) (G2ad8@G2ad6))))) G2a05@external-pending-libraries (cons G2ad4@name (G2a05@external-pending-libraries)))))) (set! G2a09@find-library-by-name (lambda (G2ae2@name) (or (G29f1@find-library-by (lambda (G2ae4@x) (fast-equal? (G29b7@library-name G2ae4@x) G2ae2@name))) (G2a07@find-external-library G2ae2@name)))) (set! G2a0b@library-exists? (lambda (G2ae6@name) (and (G29f1@find-library-by (lambda (G2ae8@x) (fast-equal? (G29b7@library-name G2ae8@x) G2ae6@name))) '#t))) (set! G2a0d@find-library-by-spec/die (lambda (G2aea@spec) ((lambda (G2aec@id) (or (G29f1@find-library-by (lambda (G2aee@x) (eq? G2aec@id (G29b5@library-id G2aee@x)))) (assertion-violation '#f '"cannot find library with required spec" G2aea@spec))) (car G2aea@spec)))) (set! G2a0f@label->binding-table (make-eq-hashtable)) (set! G2a11@install-library-record (lambda (G2af0@lib) (begin ((lambda (G2af2@exp-env) (for-each (lambda (G2af4@x) ((lambda (G2af6@label G2af7@binding) ((lambda (G2afa@binding) (hashtable-set! G2a0f@label->binding-table G2af6@label G2afa@binding)) ((lambda (G2afc@t) (if (memv G2afc@t '(global)) (cons 'global (cons G2af0@lib (cdr G2af7@binding))) (if (memv G2afc@t '(global-macro)) (cons 'global-macro (cons G2af0@lib (cdr G2af7@binding))) (if (memv G2afc@t '(global-macro!)) (cons 'global-macro! (cons G2af0@lib (cdr G2af7@binding))) G2af7@binding)))) (car G2af7@binding)))) (car G2af4@x) (cdr G2af4@x))) G2af2@exp-env)) (G29c3@library-env G2af0@lib)) ((G29a4@current-library-collection) G2af0@lib)))) (set! G2a13@install-library (lambda (G2afe@id G2aff@name G2b00@ver G2b01@imp* G2b02@vis* G2b03@inv* G2b04@exp-subst G2b05@exp-env G2b06@visit-proc G2b07@invoke-proc G2b08@visit-code G2b09@invoke-code G2b0a@visible? G2b0b@source-file-name) ((lambda (G2b1a@imp-lib* G2b1b@vis-lib* G2b1c@inv-lib*) (begin (if (not (and (symbol? G2afe@id) (list? G2aff@name) (list? G2b00@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2afe@id G2aff@name G2b00@ver) (void)) (if (G2a0b@library-exists? G2aff@name) (assertion-violation 'install-library '"library is already installed" G2aff@name) (void)) ((lambda (G2b20@lib) (G2a11@install-library-record G2b20@lib)) (G29b3@make-library G2afe@id G2aff@name G2b00@ver G2b1a@imp-lib* G2b1b@vis-lib* G2b1c@inv-lib* G2b04@exp-subst G2b05@exp-env G2b06@visit-proc G2b07@invoke-proc G2b08@visit-code G2b09@invoke-code G2b0a@visible? G2b0b@source-file-name)))) (map G2a0d@find-library-by-spec/die G2b01@imp*) (map G2a0d@find-library-by-spec/die G2b02@vis*) (map G2a0d@find-library-by-spec/die G2b03@inv*)))) (set! G2a15@imported-label->binding (lambda (G2b22@lab) (hashtable-ref G2a0f@label->binding-table G2b22@lab '#f))) (set! G2a17@invoke-library (lambda (G2b24@lib) ((lambda (G2b26@invoke) (if (procedure? G2b26@invoke) (begin (G29e3@set-library-invoke-state! G2b24@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b24@lib))) (for-each G2a17@invoke-library (G29bf@library-inv* G2b24@lib)) (G29e3@set-library-invoke-state! G2b24@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b24@lib))) (G2b26@invoke) (G29e3@set-library-invoke-state! G2b24@lib '#t)) (void))) (G29c7@library-invoke-state G2b24@lib)))) (set! G2a19@visit-library (lambda (G2b28@lib) ((lambda (G2b2a@visit) (if (procedure? G2b2a@visit) (begin (G29e1@set-library-visit-state! G2b28@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b28@lib))) (for-each G2a17@invoke-library (G29bd@library-vis* G2b28@lib)) (G29e1@set-library-visit-state! G2b28@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b28@lib))) (G2b2a@visit) (G29e1@set-library-visit-state! G2b28@lib '#t)) (void))) (G29c5@library-visit-state G2b28@lib)))) (set! G2a1b@invoke-library-by-spec (lambda (G2b2c@spec) (G2a17@invoke-library (G2a0d@find-library-by-spec/die G2b2c@spec)))) (set! G2a1d@installed-libraries (lambda G2b34 ((lambda (G2b35) (if (= G2b35 '1) (apply (lambda (G2b2e@all?) ((letrec ((G2b30@f (lambda (G2b32@ls) (if (null? G2b32@ls) '() (if (or G2b2e@all? (G29cd@library-visible? (car G2b32@ls))) (cons (car G2b32@ls) (G2b30@f (cdr G2b32@ls))) (G2b30@f (cdr G2b32@ls))))))) G2b30@f) ((G29a4@current-library-collection)))) G2b34) (if (= G2b35 '0) (apply (lambda () (G2a1d@installed-libraries '#f)) G2b34) (error 'apply '"invalid arg count")))) (length G2b34)))) (set! G2a1f@library-spec (lambda (G2b36@x) (begin (if (not (G29b1@library? G2b36@x)) (assertion-violation 'library-spec '"not a library" G2b36@x) (void)) (list (G29b5@library-id G2b36@x) (G29b7@library-name G2b36@x) (G29b9@library-version G2b36@x))))) (begin (set! G2b74@G2a1f@library-spec G2a1f@library-spec) (set! G2b73@G2a1d@installed-libraries G2a1d@installed-libraries) (set! G2b72@G2a1b@invoke-library-by-spec G2a1b@invoke-library-by-spec) (set! G2b71@G2a19@visit-library G2a19@visit-library) (set! G2b70@G2a17@invoke-library G2a17@invoke-library) (set! G2b6f@G2a15@imported-label->binding G2a15@imported-label->binding) (set! G2b6e@G2a13@install-library G2a13@install-library) (set! G2b6d@G2a11@install-library-record G2a11@install-library-record) (set! G2b6c@G2a0f@label->binding-table G2a0f@label->binding-table) (set! G2b6b@G2a0d@find-library-by-spec/die G2a0d@find-library-by-spec/die) (set! G2b6a@G2a0b@library-exists? G2a0b@library-exists?) (set! G2b69@G2a09@find-library-by-name G2a09@find-library-by-name) (set! G2b68@G2a07@find-external-library G2a07@find-external-library) (set! G2b67@G2a05@external-pending-libraries G2a05@external-pending-libraries) (set! G2b66@G2a03@current-library-expander G2a03@current-library-expander) (set! G2b65@G2a01@library-loader G2a01@library-loader) (set! G2b64@G29ff@try-load-from-file G29ff@try-load-from-file) (set! G2b63@G29fd@current-precompiled-library-loader G29fd@current-precompiled-library-loader) (set! G2b62@G29fb@serialize-all G29fb@serialize-all) (set! G2b61@G29f9@file-locator G29f9@file-locator) (set! G2b60@G29f7@library-name->file-name G29f7@library-name->file-name) (set! G2b5f@G29f5@library-extensions G29f5@library-extensions) (set! G2b5e@G29f3@library-path G29f3@library-path) (set! G2b5d@G29f1@find-library-by G29f1@find-library-by) (set! G2b5c@G29ef@find-dependencies G29ef@find-dependencies) (set! G2b5b@G29ed@rp G29ed@rp) (set! G2b5a@G29eb@set-library-source-file-name! G29eb@set-library-source-file-name!) (set! G2b59@G29e9@set-library-visible?! G29e9@set-library-visible?!) (set! G2b58@G29e7@set-library-invoke-code! G29e7@set-library-invoke-code!) (set! G2b57@G29e5@set-library-visit-code! G29e5@set-library-visit-code!) (set! G2b56@G29e3@set-library-invoke-state! G29e3@set-library-invoke-state!) (set! G2b55@G29e1@set-library-visit-state! G29e1@set-library-visit-state!) (set! G2b54@G29df@set-library-env! G29df@set-library-env!) (set! G2b53@G29dd@set-library-subst! G29dd@set-library-subst!) (set! G2b52@G29db@set-library-inv*! G29db@set-library-inv*!) (set! G2b51@G29d9@set-library-vis*! G29d9@set-library-vis*!) (set! G2b50@G29d7@set-library-imp*! G29d7@set-library-imp*!) (set! G2b4f@G29d5@set-library-version! G29d5@set-library-version!) (set! G2b4e@G29d3@set-library-name! G29d3@set-library-name!) (set! G2b4d@G29d1@set-library-id! G29d1@set-library-id!) (set! G2b4c@G29cf@library-source-file-name G29cf@library-source-file-name) (set! G2b4b@G29cd@library-visible? G29cd@library-visible?) (set! G2b4a@G29cb@library-invoke-code G29cb@library-invoke-code) (set! G2b49@G29c9@library-visit-code G29c9@library-visit-code) (set! G2b48@G29c7@library-invoke-state G29c7@library-invoke-state) (set! G2b47@G29c5@library-visit-state G29c5@library-visit-state) (set! G2b46@G29c3@library-env G29c3@library-env) (set! G2b45@G29c1@library-subst G29c1@library-subst) (set! G2b44@G29bf@library-inv* G29bf@library-inv*) (set! G2b43@G29bd@library-vis* G29bd@library-vis*) (set! G2b42@G29bb@library-imp* G29bb@library-imp*) (set! G2b41@G29b9@library-version G29b9@library-version) (set! G2b40@G29b7@library-name G29b7@library-name) (set! G2b3f@G29b5@library-id G29b5@library-id) (set! G2b3e@G29b3@make-library G29b3@make-library) (set! G2b3d@G29b1@library? G29b1@library?) (set! G2b3c@G29ae@G29a6 G29ae@G29a6) (set! G2b3b@G29ac@G29a7 G29ac@G29a7) (set! G2b3a@G29aa@G29a5 G29aa@G29a5) (set! G2b39@G29a4@current-library-collection G29a4@current-library-collection) (set! G2b38@G29a2@make-collection G29a2@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b77@build-global-define G2bf1@build-lambda G2bf3@build-case-lambda G2bf5@build-let G2c27@build-sequence G2c29@build-void G2c2b@build-letrec G2c2d@build-letrec* G2c2f@build-library-letrec* G2c31@build-receive) (begin (set! G2b77@build-global-define (lambda (G2c32@x) (G2c29@build-void))) (set! G2bf1@build-lambda (lambda (G2c34@ae G2c35@vars G2c36@exp) (list 'lambda G2c35@vars G2c36@exp))) (set! G2bf3@build-case-lambda (lambda (G2c3a@ae G2c3b@vars* G2c3c@exp*) ((lambda (G2c41@build-error G2c43@build-pred G2c45@build-apply G2c47@expand-case-lambda) (begin (set! G2c41@build-error (lambda (G2c76@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c43@build-pred (lambda (G2c60@ae G2c61@n G2c62@vars) (call-with-values (lambda () ((letrec ((G2c68@f (lambda (G2c6a@vars G2c6b@count) (if (pair? G2c6a@vars) (G2c68@f (cdr G2c6a@vars) (+ G2c6b@count '1)) (if (null? G2c6a@vars) (values G2c6b@count '=) (values G2c6b@count '>=)))))) G2c68@f) G2c62@vars '0)) (lambda (G2c6e@G2c66 G2c6f@G2c67) ((lambda (G2c72@pred G2c73@count) (list (list 'primitive G2c72@pred) G2c61@n (list 'quote G2c73@count))) G2c6f@G2c67 G2c6e@G2c66))))) (set! G2c45@build-apply (lambda (G2c58@ae G2c59@g G2c5a@vars G2c5b@exp) (list '(primitive apply) (G2bf1@build-lambda G2c58@ae G2c5a@vars G2c5b@exp) G2c59@g))) (set! G2c47@expand-case-lambda (lambda (G2c48@ae G2c49@vars G2c4a@exp*) ((lambda (G2c4e@g G2c4f@n) (list 'lambda G2c4e@g (G2bf5@build-let G2c48@ae (list G2c4f@n) (list (list '(primitive length) G2c4e@g)) ((letrec ((G2c52@f (lambda (G2c54@vars* G2c55@exp*) (if (null? G2c54@vars*) (G2c41@build-error G2c48@ae) (list 'if (G2c43@build-pred G2c48@ae G2c4f@n (car G2c54@vars*)) (G2c45@build-apply G2c48@ae G2c4e@g (car G2c54@vars*) (car G2c55@exp*)) (G2c52@f (cdr G2c54@vars*) (cdr G2c55@exp*))))))) G2c52@f) G2c3b@vars* G2c4a@exp*)))) (gensym) (gensym)))) (if (= (length G2c3c@exp*) '1) (G2bf1@build-lambda G2c3a@ae (car G2c3b@vars*) (car G2c3c@exp*)) (G2c47@expand-case-lambda G2c3a@ae G2c3b@vars* G2c3c@exp*)))) '#f '#f '#f '#f))) (set! G2bf5@build-let (lambda (G2c78@ae G2c79@lhs* G2c7a@rhs* G2c7b@body) (cons (G2bf1@build-lambda G2c78@ae G2c79@lhs* G2c7b@body) G2c7a@rhs*))) (set! G2c27@build-sequence (lambda (G2c80@ae G2c81@exps) ((letrec ((G2c84@loop (lambda (G2c86@exps) (if (null? (cdr G2c86@exps)) (car G2c86@exps) (if (equal? (car G2c86@exps) (G2c29@build-void)) (G2c84@loop (cdr G2c86@exps)) (cons 'begin G2c86@exps)))))) G2c84@loop) G2c81@exps))) (set! G2c29@build-void (lambda () '((primitive void)))) (set! G2c2b@build-letrec (lambda (G2c88@ae G2c89@vars G2c8a@val-exps G2c8b@body-exp) (if (null? G2c89@vars) G2c8b@body-exp (list 'letrec (map list G2c89@vars G2c8a@val-exps) G2c8b@body-exp)))) (set! G2c2d@build-letrec* (lambda (G2c90@ae G2c91@vars G2c92@val-exps G2c93@body-exp) (if (null? G2c91@vars) G2c93@body-exp (G2bf5@build-let G2c90@ae G2c91@vars (map (lambda (G2c98@x) (list 'quote '#f)) G2c91@vars) (G2c27@build-sequence G2c90@ae (append (map (lambda (G2c9a@lhs G2c9b@rhs) (list 'set! G2c9a@lhs G2c9b@rhs)) G2c91@vars G2c92@val-exps) (list G2c93@body-exp))))))) (set! G2c2f@build-library-letrec* (lambda (G2c9e@ae G2c9f@name G2ca0@vars G2ca1@locs G2ca2@val-exps G2ca3@body-exp) (list 'library-letrec* G2c9f@name (map list G2ca0@vars G2ca1@locs G2ca2@val-exps) G2ca3@body-exp))) (set! G2c31@build-receive (lambda (G2caa@ae G2cab@vars G2cac@producer G2cad@body*) (begin (display '"************** in ") (cons 'receive (cons G2cab@vars (cons G2cac@producer G2cad@body*)))))) (begin (set! G2cbb@G2c31@build-receive G2c31@build-receive) (set! G2cba@G2c2f@build-library-letrec* G2c2f@build-library-letrec*) (set! G2cb9@G2c2d@build-letrec* G2c2d@build-letrec*) (set! G2cb8@G2c2b@build-letrec G2c2b@build-letrec) (set! G2cb7@G2c29@build-void G2c29@build-void) (set! G2cb6@G2c27@build-sequence G2c27@build-sequence) (set! G2cb5@G2bf5@build-let G2bf5@build-let) (set! G2cb4@G2bf3@build-case-lambda G2bf3@build-case-lambda) (set! G2cb3@G2bf1@build-lambda G2bf1@build-lambda) (set! G2cb2@G2b77@build-global-define G2b77@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cca@set-cons G2ccc@set-union G2cd1@top-mark* G2cd3@top-marked? G2cd5@gen-lexical G2cd7@gen-global G2cd9@gen-label G2cdb@gen-top-level-label G2cdd@gen-define-label+loc G2cdf@gen-define-label G2ce5@G2ce0 G2ce7@G2ce2 G2ce9@G2ce1 G2cec@rib? G2cee@make-rib G2cf0@rib-sym* G2cf2@rib-mark** G2cf4@rib-label* G2cf6@rib-sealed/freq G2cf8@rib-cache G2cfa@set-rib-sym*! G2cfc@set-rib-mark**! G2cfe@set-rib-label*! G2d00@set-rib-sealed/freq! G2d02@set-rib-cache! G2d04@make-empty-rib G2d06@make-cache-rib G2d08@find-label G2d0a@extend-rib! G2d0c@extend-rib/nc! G2d0e@make-rib-map G2d10@seal-rib! G2d12@unseal-rib! G2d14@make-full-rib G2d1a@G2d15 G2d1c@G2d17 G2d1e@G2d16 G2d21@stx? G2d23@make-stx G2d25@stx-expr G2d27@stx-mark* G2d29@stx-subst* G2d2b@stx-ae* G2d2d@set-stx-expr! G2d2f@set-stx-mark*! G2d31@set-stx-subst*! G2d33@set-stx-ae*! G2d35@rp G2d37@datum->stx G2d39@gen-mark G2d3b@anti-mark G2d3d@anti-mark? G2d3f@join-wraps G2d41@mkstx G2d43@add-mark G2d45@add-subst G2d47@syntax-kind? G2d49@syntax-vector->list G2d4b@syntax-pair? G2d4d@syntax-vector? G2d4f@syntax-null? G2d51@syntax-list? G2d53@syntax-car G2d55@syntax-cdr G2d57@syntax->list G2d59@id? G2d5b@id->sym G2d5d@same-marks? G2d5f@bound-id=? G2d61@free-id=? G2d63@valid-bound-ids? G2d65@distinct-bound-ids? G2d67@bound-id-member? G2d69@self-evaluating? G2d6b@strip-annotations G2d6d@strip G2d6f@stx->datum G2d71@same-marks*? G2d73@id->label G2d75@id->real-label G2d77@label->binding G2d79@make-binding G2d7b@binding-type G2d7d@binding-value G2d7f@raise-unbound-error G2d81@syntax-type G2d91@sanitize-binding G2d93@make-variable-transformer G2d95@variable-transformer? G2d97@variable-transformer-procedure G2d99@make-eval-transformer G2edc@parse-define G2ede@parse-define-syntax G2ee0@scheme-stx-hashtable G2ee2@scheme-stx G2ee4@lexical-var G2ee6@lexical-mutable? G2ee8@set-lexical-mutable! G2eea@add-lexical G2eec@add-lexicals G2eee@letrec-helper G2ef0@letrec-transformer G2ef2@letrec*-transformer G2ef4@fluid-let-syntax-transformer G2ef6@type-descriptor-transformer G2ef8@record-type-descriptor-transformer G2efa@record-constructor-descriptor-transformer G2efc@when-macro G2efe@unless-macro G2f00@if-transformer G2f02@and-transformer G2f04@or-transformer G2f06@case-macro G2f08@quote-transformer G2f0a@case-lambda-transformer G2f0c@lambda-transformer G2f0e@bless G2f10@with-syntax-macro G2f12@invalid-fmls-error G2f14@let-macro G2f16@let-values-macro G2f18@let*-values-macro G2f1a@trace-lambda-macro G2f1c@trace-define-macro G2f1e@trace-define-syntax-macro G2f20@trace-let/rec-syntax G2f22@trace-let-syntax-macro G2f24@trace-letrec-syntax-macro G2f26@guard-macro G2f28@define-enumeration-macro G2f2a@time-macro G2f2c@delay-macro G2f2e@assert-macro G2f30@endianness-macro G2f32@identifier-syntax-macro G2f34@do-macro G2f36@let*-macro G2f38@or-macro G2f3a@and-macro G2f3c@cond-macro G2f3e@do-include G2f40@include-macro G2f42@include-into-macro G2f44@syntax-rules-macro G2f46@quasiquote-macro G2f48@quasisyntax-macro G2f4a@define-struct-macro G2f4c@define-record-type-macro G2f4e@define-condition-type-macro G2f50@incorrect-usage-macro G2f52@parameterize-macro G2f54@foreign-call-transformer G2f56@convert-pattern G2f58@syntax-dispatch G2f5a@ellipsis? G2f5c@underscore? G2f5e@verify-literals G2f60@syntax-case-transformer G2f62@ellipsis-map G2f64@syntax-transformer G2f66@core-macro-transformer G2f68@file-options-macro G2f6a@symbol-macro G2f6c@macro-transformer G2f6e@local-macro-transformer G2f70@do-macro-call G2f72@chi-macro G2f74@chi-local-macro G2f76@chi-global-macro G2f78@chi-expr* G2f7a@chi-application G2f7c@chi-expr G2f7e@chi-set! G2f80@verify-formals G2f82@chi-lambda-clause G2f84@chi-lambda-clause* G2f86@chi-defun G2f88@chi-rhs G2f8a@expand-interaction-rhs*/init* G2f8c@chi-rhs* G2f8e@find-bound=? G2f90@find-dups G2f92@chi-internal G2f94@parse-module G2f9a@G2f95 G2f9c@G2f97 G2f9e@G2f96 G2fa1@module-interface? G2fa3@make-module-interface G2fa5@module-interface-first-mark G2fa7@module-interface-exp-id-vec G2fa9@module-interface-exp-lab-vec G2fab@set-module-interface-first-mark! G2fad@set-module-interface-exp-id-vec! G2faf@set-module-interface-exp-lab-vec! G2fb1@module-interface-exp-id* G2fb3@chi-internal-module G2fb5@chi-body* G2fb7@expand-transformer G2fb9@parse-exports G2fbb@parse-library-name G2fbd@parse-library G2fbf@parse-import-spec* G2fc1@make-top-rib G2fc3@make-collector G2fc5@inv-collector G2fc7@vis-collector G2fc9@imp-collector G2fcb@chi-library-internal G2fcd@chi-interaction-expr G2fcf@library-body-expander G2fd1@core-library-expander G2fd3@parse-top-level-program G2fd5@top-level-expander G2fdb@G2fd6 G2fdd@G2fd8 G2fdf@G2fd7 G2fe2@env? G2fe4@make-env G2fe6@env-names G2fe8@env-labels G2fea@env-itc G2fec@set-env-names! G2fee@set-env-labels! G2ff0@set-env-itc! G2ff2@rp G2ff8@G2ff3 G2ffa@G2ff5 G2ffc@G2ff4 G2fff@interaction-env? G3001@make-interaction-env G3003@interaction-env-rib G3005@interaction-env-r G3007@interaction-env-locs G3009@set-interaction-env-rib! G300b@set-interaction-env-r! G300d@set-interaction-env-locs! G300f@rp G3011@interaction-environment-symbols G3013@environment-bindings G3015@parse-binding G3017@environment? G3019@environment-symbols G301b@environment G301d@null-environment G301f@scheme-report-environment G3021@expand G3023@eval G3025@library-expander G3027@boot-library-expand G3029@rev-map-append G302b@build-exports G302d@make-export-subst G302f@make-export-env/macros G3031@generate-temporaries G3033@free-identifier=? G3035@bound-identifier=? G3037@make-source-condition G3039@extract-position-condition G303b@expression-position G303d@assertion-error G303f@syntax-error G3041@syntax-violation* G3043@syntax-violation G3045@identifier? G3047@datum->syntax G3049@syntax->datum G304b@compile-r6rs-top-level G304d@pre-compile-r6rs-top-level G304f@interaction-environment G3051@top-level-context) (begin (set! G2cca@set-cons (lambda (G3052@x G3053@ls) (if (memq G3052@x G3053@ls) G3053@ls (cons G3052@x G3053@ls)))) (set! G2ccc@set-union (lambda (G3056@ls1 G3057@ls2) (if (null? G3056@ls1) G3057@ls2 (if (memq (car G3056@ls1) G3057@ls2) (G2ccc@set-union (cdr G3056@ls1) G3057@ls2) (cons (car G3056@ls1) (G2ccc@set-union (cdr G3056@ls1) G3057@ls2)))))) (set! G2cd1@top-mark* '(top)) (set! G2cd3@top-marked? (lambda (G305a@m*) (memq 'top G305a@m*))) (set! G2cd5@gen-lexical (lambda (G305c@sym) (if (symbol? G305c@sym) (gensym G305c@sym) (if (G2d21@stx? G305c@sym) (G2cd5@gen-lexical (G2d5b@id->sym G305c@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G305c@sym))))) (set! G2cd7@gen-global (lambda (G305e@x) (G2cd5@gen-lexical G305e@x))) (set! G2cd9@gen-label (lambda (G3060@_) (gensym))) (set! G2cdb@gen-top-level-label (lambda (G3062@id G3063@rib) ((lambda (G3067@find) (begin (set! G3067@find (lambda (G3072@sym G3073@mark* G3074@sym* G3075@mark** G3076@label*) (and (pair? G3074@sym*) (if (and (eq? G3072@sym (car G3074@sym*)) (G2d5d@same-marks? G3073@mark* (car G3075@mark**))) (car G3076@label*) (G3067@find G3072@sym G3073@mark* (cdr G3074@sym*) (cdr G3075@mark**) (cdr G3076@label*)))))) ((lambda (G3068@sym G3069@mark*) ((lambda (G306c@sym*) ((lambda (G306e@t) (if G306e@t ((lambda (G3070@label) (if (G2b6f@G2a15@imported-label->binding G3070@label) (gensym) G3070@label)) G306e@t) (gensym))) (and (memq G3068@sym (G2cf0@rib-sym* G3063@rib)) (G3067@find G3068@sym G3069@mark* G306c@sym* (G2cf2@rib-mark** G3063@rib) (G2cf4@rib-label* G3063@rib))))) (G2cf0@rib-sym* G3063@rib))) (G2d5b@id->sym G3062@id) (G2d27@stx-mark* G3062@id)))) '#f))) (set! G2cdd@gen-define-label+loc (lambda (G307c@id G307d@rib) ((lambda (G3080@t) (if G3080@t ((lambda (G3082@env) ((lambda (G3084@label G3085@locs) (values G3084@label ((lambda (G3088@t) (if G3088@t (cdr G3088@t) ((lambda (G308a@loc) (begin (G300d@set-interaction-env-locs! G3082@env (cons (cons G3084@label G308a@loc) G3085@locs)) G308a@loc)) (G2cd5@gen-lexical G307c@id)))) (assq G3084@label G3085@locs)))) (G2cdb@gen-top-level-label G307c@id G307d@rib) (G3007@interaction-env-locs G3082@env))) G3080@t) (values (gensym) (G2cd5@gen-lexical G307c@id)))) (G3051@top-level-context)))) (set! G2cdf@gen-define-label (lambda (G308c@id G308d@rib) (if (G3051@top-level-context) (G2cdb@gen-top-level-label G308c@id G308d@rib) (gensym)))) (set! G2ce5@G2ce0 (make-record-type-descriptor 'rib '#f 'G2ce3 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2ce7@G2ce2 '#f) (set! G2ce9@G2ce1 (make-record-constructor-descriptor G2ce5@G2ce0 '#f G2ce7@G2ce2)) (set! G2cec@rib? (record-predicate G2ce5@G2ce0)) (set! G2cee@make-rib (record-constructor G2ce9@G2ce1)) (set! G2cf0@rib-sym* (record-accessor G2ce5@G2ce0 '0)) (set! G2cf2@rib-mark** (record-accessor G2ce5@G2ce0 '1)) (set! G2cf4@rib-label* (record-accessor G2ce5@G2ce0 '2)) (set! G2cf6@rib-sealed/freq (record-accessor G2ce5@G2ce0 '3)) (set! G2cf8@rib-cache (record-accessor G2ce5@G2ce0 '4)) (set! G2cfa@set-rib-sym*! (record-mutator G2ce5@G2ce0 '0)) (set! G2cfc@set-rib-mark**! (record-mutator G2ce5@G2ce0 '1)) (set! G2cfe@set-rib-label*! (record-mutator G2ce5@G2ce0 '2)) (set! G2d00@set-rib-sealed/freq! (record-mutator G2ce5@G2ce0 '3)) (set! G2d02@set-rib-cache! (record-mutator G2ce5@G2ce0 '4)) (set! G2d04@make-empty-rib (lambda () (G2cee@make-rib '() '() '() '#f '#f))) (set! G2d06@make-cache-rib (lambda () (G2cee@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d08@find-label (lambda (G3090@rib G3091@sym G3092@mark*) ((lambda (G3096@ht) (and G3096@ht ((lambda (G3098@cv) ((lambda (G309a@t) (if G309a@t (cdr G309a@t) '#f)) (and G3098@cv (assp (lambda (G309c@m) (G2d5d@same-marks? G3092@mark* G309c@m)) G3098@cv)))) (hashtable-ref G3096@ht G3091@sym '#f)))) (G2cf8@rib-cache G3090@rib)))) (set! G2d0a@extend-rib! (lambda (G309e@rib G309f@id G30a0@label) ((lambda (G30a5@find) (begin (set! G30a5@find (lambda (G30b6@sym G30b7@mark* G30b8@sym* G30b9@mark** G30ba@label*) (and (pair? G30b8@sym*) (if (and (eq? G30b6@sym (car G30b8@sym*)) (G2d5d@same-marks? G30b7@mark* (car G30b9@mark**))) G30ba@label* (G30a5@find G30b6@sym G30b7@mark* (cdr G30b8@sym*) (cdr G30b9@mark**) (cdr G30ba@label*)))))) (begin (if (G2cf6@rib-sealed/freq G309e@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G309e@rib) (void)) ((lambda (G30a6@sym G30a7@mark*) ((lambda (G30aa@sym*) ((lambda (G30ac@t) (if G30ac@t ((lambda (G30ae@p) (if (not (eq? G30a0@label G30ae@p)) (G3043@syntax-violation '#f '"multiple definitions of identifier" G309f@id) (void))) G30ac@t) ((lambda (G30b0@t) (if G30b0@t ((lambda (G30b2@p) (if (not (eq? G30a0@label (car G30b2@p))) (if (G3051@top-level-context) (set-car! G30b2@p G30a0@label) (G3043@syntax-violation '#f '"multiple definitions of identifier" G309f@id)) (void))) G30b0@t) (begin (if (G2cf8@rib-cache G309e@rib) (hashtable-update! (G2cf8@rib-cache G309e@rib) G30a6@sym (lambda (G30b4@e) (cons (cons G30a7@mark* G30a0@label) G30b4@e)) '()) (void)) (G2cfa@set-rib-sym*! G309e@rib (cons G30a6@sym G30aa@sym*)) (G2cfc@set-rib-mark**! G309e@rib (cons G30a7@mark* (G2cf2@rib-mark** G309e@rib))) (G2cfe@set-rib-label*! G309e@rib (cons G30a0@label (G2cf4@rib-label* G309e@rib)))))) (and (memq G30a6@sym (G2cf0@rib-sym* G309e@rib)) (G30a5@find G30a6@sym G30a7@mark* G30aa@sym* (G2cf2@rib-mark** G309e@rib) (G2cf4@rib-label* G309e@rib)))))) (G2d08@find-label G309e@rib G30a6@sym G30a7@mark*))) (G2cf0@rib-sym* G309e@rib))) (G2d5b@id->sym G309f@id) (G2d27@stx-mark* G309f@id))))) '#f))) (set! G2d0c@extend-rib/nc! (lambda (G30c0@rib G30c1@id G30c2@label) ((lambda (G30c6@sym G30c7@mark*) ((lambda (G30ca@sym*) (begin (if (G2cf8@rib-cache G30c0@rib) (hashtable-update! (G2cf8@rib-cache G30c0@rib) G30c6@sym (lambda (G30cc@e) (cons (cons G30c7@mark* G30c2@label) G30cc@e)) '()) (void)) (G2cfa@set-rib-sym*! G30c0@rib (cons G30c6@sym G30ca@sym*)) (G2cfc@set-rib-mark**! G30c0@rib (cons G30c7@mark* (G2cf2@rib-mark** G30c0@rib))) (G2cfe@set-rib-label*! G30c0@rib (cons G30c2@label (G2cf4@rib-label* G30c0@rib))))) (G2cf0@rib-sym* G30c0@rib))) (G2d5b@id->sym G30c1@id) (G2d27@stx-mark* G30c1@id)))) (set! G2d0e@make-rib-map (lambda (G30ce@sym*) ((lambda (G30d0@ht) ((letrec ((G30d2@f (lambda (G30d4@i G30d5@sym*) (if (null? G30d5@sym*) G30d0@ht (begin (hashtable-update! G30d0@ht (car G30d5@sym*) (lambda (G30d8@x) (cons G30d4@i G30d8@x)) '()) (G30d2@f (+ G30d4@i '1) (cdr G30d5@sym*))))))) G30d2@f) '0 G30ce@sym*)) (make-eq-hashtable)))) (set! G2d10@seal-rib! (lambda (G30da@rib) ((lambda (G30dc@sym*) (if (not (null? G30dc@sym*)) (begin (G2cfa@set-rib-sym*! G30da@rib (list->vector G30dc@sym*)) (G2cfc@set-rib-mark**! G30da@rib (list->vector (G2cf2@rib-mark** G30da@rib))) (G2cfe@set-rib-label*! G30da@rib (list->vector (G2cf4@rib-label* G30da@rib))) (G2d00@set-rib-sealed/freq! G30da@rib (G2d0e@make-rib-map G30dc@sym*))) (void))) (G2cf0@rib-sym* G30da@rib)))) (set! G2d12@unseal-rib! (lambda (G30de@rib) (if (G2cf6@rib-sealed/freq G30de@rib) (begin (G2d00@set-rib-sealed/freq! G30de@rib '#f) (G2cfa@set-rib-sym*! G30de@rib (vector->list (G2cf0@rib-sym* G30de@rib))) (G2cfc@set-rib-mark**! G30de@rib (vector->list (G2cf2@rib-mark** G30de@rib))) (G2cfe@set-rib-label*! G30de@rib (vector->list (G2cf4@rib-label* G30de@rib)))) (void)))) (set! G2d14@make-full-rib (lambda (G30e0@id* G30e1@label*) ((lambda (G30e4@r) (begin (G2d10@seal-rib! G30e4@r) G30e4@r)) (G2cee@make-rib (map G2d5b@id->sym G30e0@id*) (map G2d27@stx-mark* G30e0@id*) G30e1@label* '#f '#f)))) (set! G2d1a@G2d15 (make-record-type-descriptor 'stx '#f 'G2d18 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d1c@G2d17 '#f) (set! G2d1e@G2d16 (make-record-constructor-descriptor G2d1a@G2d15 '#f G2d1c@G2d17)) (set! G2d21@stx? (record-predicate G2d1a@G2d15)) (set! G2d23@make-stx (record-constructor G2d1e@G2d16)) (set! G2d25@stx-expr (record-accessor G2d1a@G2d15 '0)) (set! G2d27@stx-mark* (record-accessor G2d1a@G2d15 '1)) (set! G2d29@stx-subst* (record-accessor G2d1a@G2d15 '2)) (set! G2d2b@stx-ae* (record-accessor G2d1a@G2d15 '3)) (set! G2d2d@set-stx-expr! (record-mutator G2d1a@G2d15 '0)) (set! G2d2f@set-stx-mark*! (record-mutator G2d1a@G2d15 '1)) (set! G2d31@set-stx-subst*! (record-mutator G2d1a@G2d15 '2)) (set! G2d33@set-stx-ae*! (record-mutator G2d1a@G2d15 '3)) (set! G2d35@rp (G28f2@G2825@make-record-printer 'stx (lambda (G30e6@x G30e7@p G30e8@wr) (begin (display '"#<syntax " G30e7@p) (write (G2d6f@stx->datum G30e6@x) G30e7@p) ((lambda (G30ec@expr) (if (G28ea@G2815@annotation? G30ec@expr) ((lambda (G30ee@src) (if (pair? G30ee@src) (begin (display '" [" G30e7@p) (display (cdr G30ee@src) G30e7@p) (display '" of " G30e7@p) (display (car G30ee@src) G30e7@p) (display '"]" G30e7@p)) (void))) (G28eb@G2817@annotation-source G30ec@expr)) (void))) (G2d25@stx-expr G30e6@x)) (display '">" G30e7@p))))) (set! G2d37@datum->stx (lambda (G30f0@id G30f1@datum) (G2d23@make-stx G30f1@datum (G2d27@stx-mark* G30f0@id) (G2d29@stx-subst* G30f0@id) (G2d2b@stx-ae* G30f0@id)))) (set! G2d39@gen-mark (lambda () (string '#\m))) (set! G2d3b@anti-mark '#f) (set! G2d3d@anti-mark? not) (set! G2d3f@join-wraps (lambda (G30f4@m1* G30f5@s1* G30f6@ae1* G30f7@e) ((lambda (G30fd@cancel) (begin (set! G30fd@cancel (lambda (G3104@ls1 G3105@ls2) ((letrec ((G3108@f (lambda (G310a@x G310b@ls1) (if (null? G310b@ls1) (cdr G3105@ls2) (cons G310a@x (G3108@f (car G310b@ls1) (cdr G310b@ls1))))))) G3108@f) (car G3104@ls1) (cdr G3104@ls1)))) ((lambda (G30fe@m2* G30ff@s2* G3100@ae2*) (if (and (not (null? G30f4@m1*)) (not (null? G30fe@m2*)) (G2d3d@anti-mark? (car G30fe@m2*))) (values (G30fd@cancel G30f4@m1* G30fe@m2*) (G30fd@cancel G30f5@s1* G30ff@s2*) (G30fd@cancel G30f6@ae1* G3100@ae2*)) (values (append G30f4@m1* G30fe@m2*) (append G30f5@s1* G30ff@s2*) (append G30f6@ae1* G3100@ae2*)))) (G2d27@stx-mark* G30f7@e) (G2d29@stx-subst* G30f7@e) (G2d2b@stx-ae* G30f7@e)))) '#f))) (set! G2d41@mkstx (lambda (G310e@e G310f@m* G3110@s* G3111@ae*) (if (and (G2d21@stx? G310e@e) (not (G2cd3@top-marked? G310f@m*))) (call-with-values (lambda () (G2d3f@join-wraps G310f@m* G3110@s* G3111@ae* G310e@e)) (lambda (G3119@G3116 G311a@G3117 G311b@G3118) ((lambda (G311f@ae* G3120@s* G3121@m*) (G2d23@make-stx (G2d25@stx-expr G310e@e) G3121@m* G3120@s* G311f@ae*)) G311b@G3118 G311a@G3117 G3119@G3116))) (G2d23@make-stx G310e@e G310f@m* G3110@s* G3111@ae*)))) (set! G2d43@add-mark (lambda (G3125@m G3126@e G3127@ae) (G2d41@mkstx G3126@e (list G3125@m) '(shift) (list G3127@ae)))) (set! G2d45@add-subst (lambda (G312b@subst G312c@e) (G2d41@mkstx G312c@e '() (list G312b@subst) '()))) (set! G2d47@syntax-kind? (lambda (G312f@x G3130@p?) (if (G2d21@stx? G312f@x) (G2d47@syntax-kind? (G2d25@stx-expr G312f@x) G3130@p?) (if (G28ea@G2815@annotation? G312f@x) (G2d47@syntax-kind? (G28ec@G2819@annotation-expression G312f@x) G3130@p?) (G3130@p? G312f@x))))) (set! G2d49@syntax-vector->list (lambda (G3133@x) (if (G2d21@stx? G3133@x) ((lambda (G3135@ls G3136@m* G3137@s* G3138@ae*) (map (lambda (G313d@x) (G2d41@mkstx G313d@x G3136@m* G3137@s* G3138@ae*)) G3135@ls)) (G2d49@syntax-vector->list (G2d25@stx-expr G3133@x)) (G2d27@stx-mark* G3133@x) (G2d29@stx-subst* G3133@x) (G2d2b@stx-ae* G3133@x)) (if (G28ea@G2815@annotation? G3133@x) (G2d49@syntax-vector->list (G28ec@G2819@annotation-expression G3133@x)) (if (vector? G3133@x) (vector->list G3133@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3133@x)))))) (set! G2d4b@syntax-pair? (lambda (G313f@x) (G2d47@syntax-kind? G313f@x pair?))) (set! G2d4d@syntax-vector? (lambda (G3141@x) (G2d47@syntax-kind? G3141@x vector?))) (set! G2d4f@syntax-null? (lambda (G3143@x) (G2d47@syntax-kind? G3143@x null?))) (set! G2d51@syntax-list? (lambda (G3145@x) (or (G2d4f@syntax-null? G3145@x) (and (G2d4b@syntax-pair? G3145@x) (G2d51@syntax-list? (G2d55@syntax-cdr G3145@x)))))) (set! G2d53@syntax-car (lambda (G3147@x) (if (G2d21@stx? G3147@x) (G2d41@mkstx (G2d53@syntax-car (G2d25@stx-expr G3147@x)) (G2d27@stx-mark* G3147@x) (G2d29@stx-subst* G3147@x) (G2d2b@stx-ae* G3147@x)) (if (G28ea@G2815@annotation? G3147@x) (G2d53@syntax-car (G28ec@G2819@annotation-expression G3147@x)) (if (pair? G3147@x) (car G3147@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3147@x)))))) (set! G2d55@syntax-cdr (lambda (G3149@x) (if (G2d21@stx? G3149@x) (G2d41@mkstx (G2d55@syntax-cdr (G2d25@stx-expr G3149@x)) (G2d27@stx-mark* G3149@x) (G2d29@stx-subst* G3149@x) (G2d2b@stx-ae* G3149@x)) (if (G28ea@G2815@annotation? G3149@x) (G2d55@syntax-cdr (G28ec@G2819@annotation-expression G3149@x)) (if (pair? G3149@x) (cdr G3149@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3149@x)))))) (set! G2d57@syntax->list (lambda (G314b@x) (if (G2d4b@syntax-pair? G314b@x) (cons (G2d53@syntax-car G314b@x) (G2d57@syntax->list (G2d55@syntax-cdr G314b@x))) (if (G2d4f@syntax-null? G314b@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G314b@x))))) (set! G2d59@id? (lambda (G314d@x) (and (G2d21@stx? G314d@x) ((lambda (G314f@expr) (symbol? (if (G28ea@G2815@annotation? G314f@expr) (G28e9@G2813@annotation-stripped G314f@expr) G314f@expr))) (G2d25@stx-expr G314d@x))))) (set! G2d5b@id->sym (lambda (G3151@x) (begin (if (not (G2d21@stx? G3151@x)) (error 'id->sym '"BUG in ikarus: not an id" G3151@x) (void)) ((lambda (G3153@expr) ((lambda (G3155@sym) (if (symbol? G3155@sym) G3155@sym (error 'id->sym '"BUG in ikarus: not an id" G3151@x))) (if (G28ea@G2815@annotation? G3153@expr) (G28e9@G2813@annotation-stripped G3153@expr) G3153@expr))) (G2d25@stx-expr G3151@x))))) (set! G2d5d@same-marks? (lambda (G3157@x G3158@y) (or (and (null? G3157@x) (null? G3158@y)) (and (pair? G3157@x) (pair? G3158@y) (eq? (car G3157@x) (car G3158@y)) (G2d5d@same-marks? (cdr G3157@x) (cdr G3158@y)))))) (set! G2d5f@bound-id=? (lambda (G315b@x G315c@y) (and (eq? (G2d5b@id->sym G315b@x) (G2d5b@id->sym G315c@y)) (G2d5d@same-marks? (G2d27@stx-mark* G315b@x) (G2d27@stx-mark* G315c@y))))) (set! G2d61@free-id=? (lambda (G315f@i G3160@j) ((lambda (G3163@t0 G3164@t1) (if (or G3163@t0 G3164@t1) (eq? G3163@t0 G3164@t1) (eq? (G2d5b@id->sym G315f@i) (G2d5b@id->sym G3160@j)))) (G2d75@id->real-label G315f@i) (G2d75@id->real-label G3160@j)))) (set! G2d63@valid-bound-ids? (lambda (G3167@id*) (and (for-all G2d59@id? G3167@id*) (G2d65@distinct-bound-ids? G3167@id*)))) (set! G2d65@distinct-bound-ids? (lambda (G3169@id*) (or (null? G3169@id*) (and (not (G2d67@bound-id-member? (car G3169@id*) (cdr G3169@id*))) (G2d65@distinct-bound-ids? (cdr G3169@id*)))))) (set! G2d67@bound-id-member? (lambda (G316b@id G316c@id*) (and (pair? G316c@id*) (or (G2d5f@bound-id=? G316b@id (car G316c@id*)) (G2d67@bound-id-member? G316b@id (cdr G316c@id*)))))) (set! G2d69@self-evaluating? (lambda (G316f@x) (or (number? G316f@x) (string? G316f@x) (char? G316f@x) (boolean? G316f@x) (regexp? G316f@x) (bytevector? G316f@x)))) (set! G2d6b@strip-annotations (lambda (G3171@x) (if (pair? G3171@x) (cons (G2d6b@strip-annotations (car G3171@x)) (G2d6b@strip-annotations (cdr G3171@x))) (if (vector? G3171@x) (vector-map G2d6b@strip-annotations G3171@x) (if (G28ea@G2815@annotation? G3171@x) (G28e9@G2813@annotation-stripped G3171@x) G3171@x))))) (set! G2d6d@strip (lambda (G3173@x G3174@m*) (if (G2cd3@top-marked? G3174@m*) (if (or (G28ea@G2815@annotation? G3173@x) (and (pair? G3173@x) (G28ea@G2815@annotation? (car G3173@x))) (and (vector? G3173@x) (> (vector-length G3173@x) '0) (G28ea@G2815@annotation? (vector-ref G3173@x '0)))) (G2d6b@strip-annotations G3173@x) G3173@x) ((letrec ((G3177@f (lambda (G3179@x) (if (G2d21@stx? G3179@x) (G2d6d@strip (G2d25@stx-expr G3179@x) (G2d27@stx-mark* G3179@x)) (if (G28ea@G2815@annotation? G3179@x) (G28e9@G2813@annotation-stripped G3179@x) (if (pair? G3179@x) ((lambda (G317b@a G317c@d) (if (and (eq? G317b@a (car G3179@x)) (eq? G317c@d (cdr G3179@x))) G3179@x (cons G317b@a G317c@d))) (G3177@f (car G3179@x)) (G3177@f (cdr G3179@x))) (if (vector? G3179@x) ((lambda (G317f@old) ((lambda (G3181@new) (if (for-all eq? G317f@old G3181@new) G3179@x (list->vector G3181@new))) (map G3177@f G317f@old))) (vector->list G3179@x)) G3179@x))))))) G3177@f) G3173@x)))) (set! G2d6f@stx->datum (lambda (G3183@x) (G2d6d@strip G3183@x '()))) (set! G2d71@same-marks*? (lambda (G3185@mark* G3186@mark** G3187@si) (if (null? G3187@si) '#f (if (G2d5d@same-marks? G3185@mark* (vector-ref G3186@mark** (car G3187@si))) (car G3187@si) (G2d71@same-marks*? G3185@mark* G3186@mark** (cdr G3187@si)))))) (set! G2d73@id->label (lambda (G318b@id) (or (G2d75@id->real-label G318b@id) ((lambda (G318d@t) (if G318d@t ((lambda (G318f@env) ((lambda (G3191@rib) (call-with-values (lambda () (G2cdd@gen-define-label+loc G318b@id G3191@rib)) (lambda (G3195@G3193 G3196@G3194) ((lambda (G3199@loc_ G319a@lab) (begin (G2d0a@extend-rib! G3191@rib G318b@id G319a@lab) G319a@lab)) G3196@G3194 G3195@G3193)))) (G3003@interaction-env-rib G318f@env))) G318d@t) '#f)) (G3051@top-level-context))))) (set! G2d75@id->real-label (lambda (G319d@id) ((lambda (G319f@sym) ((letrec ((G31a1@search (lambda (G31a3@subst* G31a4@mark*) (if (null? G31a3@subst*) '#f (if (eq? (car G31a3@subst*) 'shift) (G31a1@search (cdr G31a3@subst*) (cdr G31a4@mark*)) ((lambda (G31a7@rib) ((lambda (G31a9@t) (if G31a9@t ((lambda (G31ab@ht) ((lambda (G31ad@si) ((lambda (G31af@i) (if G31af@i (vector-ref (G2cf4@rib-label* G31a7@rib) G31af@i) (G31a1@search (cdr G31a3@subst*) G31a4@mark*))) (and G31ad@si (G2d71@same-marks*? G31a4@mark* (G2cf2@rib-mark** G31a7@rib) (reverse G31ad@si))))) (hashtable-ref G31ab@ht G319f@sym '#f))) G31a9@t) (or (G2d08@find-label G31a7@rib G319f@sym G31a4@mark*) ((letrec ((G31b1@f (lambda (G31b3@sym* G31b4@mark** G31b5@label*) (if (null? G31b3@sym*) (G31a1@search (cdr G31a3@subst*) G31a4@mark*) (if (and (eq? (car G31b3@sym*) G319f@sym) (G2d5d@same-marks? (car G31b4@mark**) G31a4@mark*)) (car G31b5@label*) (G31b1@f (cdr G31b3@sym*) (cdr G31b4@mark**) (cdr G31b5@label*))))))) G31b1@f) (G2cf0@rib-sym* G31a7@rib) (G2cf2@rib-mark** G31a7@rib) (G2cf4@rib-label* G31a7@rib))))) (G2cf6@rib-sealed/freq G31a7@rib))) (car G31a3@subst*))))))) G31a1@search) (G2d29@stx-subst* G319d@id) (G2d27@stx-mark* G319d@id))) (G2d5b@id->sym G319d@id)))) (set! G2d77@label->binding (lambda (G31b9@x G31ba@r) ((lambda (G31bd@t) (if G31bd@t ((lambda (G31bf@b) (if (and (pair? G31bf@b) (eq? (car G31bf@b) '$core-rtd)) (cons '$rtd (map G2f0e@bless (cdr G31bf@b))) (if (and (pair? G31bf@b) (eq? (car G31bf@b) 'global-rtd)) ((lambda (G31c1@lib G31c2@loc) (cons '$rtd (symbol-value G31c2@loc))) (cadr G31bf@b) (cddr G31bf@b)) G31bf@b))) G31bd@t) ((lambda (G31c5@t) (if G31c5@t (cdr G31c5@t) ((lambda (G31c7@t) (if G31c7@t ((lambda (G31c9@env) ((lambda (G31cb@t) (if G31cb@t ((lambda (G31cd@p) (cons* 'lexical (cdr G31cd@p) '#f)) G31cb@t) '(displaced-lexical . #f))) (assq G31b9@x (G3007@interaction-env-locs G31c9@env)))) G31c7@t) '(displaced-lexical . #f))) (G3051@top-level-context)))) (assq G31b9@x G31ba@r)))) (G2b6f@G2a15@imported-label->binding G31b9@x)))) (set! G2d79@make-binding cons) (set! G2d7b@binding-type car) (set! G2d7d@binding-value cdr) (set! G2d7f@raise-unbound-error (lambda (G31cf@id) (G3041@syntax-violation* '#f '"unbound identifier" G31cf@id (G4c7b@G4ac5@make-undefined-violation)))) (set! G2d81@syntax-type (lambda (G31d1@e G31d2@r) (if (G2d59@id? G31d1@e) ((lambda (G31d5@id) ((lambda (G31d7@label) ((lambda (G31d9@b) ((lambda (G31db@type) ((lambda () (begin (if (not G31d7@label) (G2d7f@raise-unbound-error G31d5@id) (void)) ((lambda (G31dd@t) (if (memv G31dd@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31db@type (G2d7d@binding-value G31d9@b) G31d5@id) (values 'other '#f '#f))) G31db@type))))) (G2d7b@binding-type G31d9@b))) (G2d77@label->binding G31d7@label G31d2@r))) (G2d73@id->label G31d5@id))) G31d1@e) (if (G2d4b@syntax-pair? G31d1@e) ((lambda (G31df@id) (if (G2d59@id? G31df@id) ((lambda (G31e1@label) ((lambda (G31e3@b) ((lambda (G31e5@type) ((lambda () (begin (if (not G31e1@label) (G2d7f@raise-unbound-error G31df@id) (void)) ((lambda (G31e7@t) (if (memv G31e7@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31e5@type (G2d7d@binding-value G31e3@b) G31df@id) (values 'call '#f '#f))) G31e5@type))))) (G2d7b@binding-type G31e3@b))) (G2d77@label->binding G31e1@label G31d2@r))) (G2d73@id->label G31df@id)) (values 'call '#f '#f))) (G2d53@syntax-car G31d1@e)) ((lambda (G31e9@d) (if (G2d69@self-evaluating? G31e9@d) (values 'constant G31e9@d '#f) (values 'other '#f '#f))) (G2d6f@stx->datum G31d1@e)))))) (set! G2d91@sanitize-binding (lambda (G31eb@x G31ec@src) (if (procedure? G31eb@x) (cons* 'local-macro G31eb@x G31ec@src) (if (and (pair? G31eb@x) (eq? (car G31eb@x) 'macro!) (procedure? (cdr G31eb@x))) (cons* 'local-macro! (cdr G31eb@x) G31ec@src) (if (and (pair? G31eb@x) (eq? (car G31eb@x) '$rtd)) G31eb@x (assertion-violation 'expand '"invalid transformer" G31eb@x)))))) (set! G2d93@make-variable-transformer (lambda (G31ef@x) (if (procedure? G31ef@x) (cons 'macro! G31ef@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31ef@x)))) (set! G2d95@variable-transformer? (lambda (G31f1@x) (and (pair? G31f1@x) (eq? (car G31f1@x) 'macro!) (procedure? (cdr G31f1@x))))) (set! G2d97@variable-transformer-procedure (lambda (G31f3@x) (if (G2d95@variable-transformer? G31f3@x) (cdr G31f3@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31f3@x)))) (set! G2d99@make-eval-transformer (lambda (G31f5@x) (G2d91@sanitize-binding (eval-core (G2949@G2901@expanded->core G31f5@x)) G31f5@x))) (set! G2edc@parse-define (lambda (G31f7@x) ((lambda (G31f9@t) ((lambda (G31fb@ls/false) (if (and G31fb@ls/false (apply (lambda (G31fd@id G31fe@fmls G31ff@b G3200@b*) (G2d59@id? G31fd@id)) G31fb@ls/false)) (apply (lambda (G3205@id G3206@fmls G3207@b G3208@b*) (begin (G2f80@verify-formals G3206@fmls G31f7@x) (values G3205@id (cons 'defun (cons G3206@fmls (cons G3207@b G3208@b*)))))) G31fb@ls/false) ((lambda (G320d@t) ((lambda (G320f@ls/false) (if (and G320f@ls/false (apply (lambda (G3211@id G3212@val) (G2d59@id? G3211@id)) G320f@ls/false)) (apply (lambda (G3215@id G3216@val) (values G3215@id (cons 'expr G3216@val))) G320f@ls/false) ((lambda (G3219@t) ((lambda (G321b@ls/false) (if (and G321b@ls/false (apply (lambda (G321d@id) (G2d59@id? G321d@id)) G321b@ls/false)) (apply (lambda (G321f@id) (values G321f@id (cons 'expr (G2f0e@bless '(void))))) G321b@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3219@t))) (G2f58@syntax-dispatch G3219@t '(_ any)))) G320d@t))) (G2f58@syntax-dispatch G320d@t '(_ any any)))) G31f9@t))) (G2f58@syntax-dispatch G31f9@t '(_ (any . any) any . each-any)))) G31f7@x))) (set! G2ede@parse-define-syntax (lambda (G3221@x) ((lambda (G3223@t) ((lambda (G3225@ls/false) (if (and G3225@ls/false (apply (lambda (G3227@id G3228@val) (G2d59@id? G3227@id)) G3225@ls/false)) (apply (lambda (G322b@id G322c@val) (values G322b@id G322c@val)) G3225@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3223@t))) (G2f58@syntax-dispatch G3223@t '(_ any any)))) G3221@x))) (set! G2ee0@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ee2@scheme-stx (lambda (G322f@sym) (or (hashtable-ref G2ee0@scheme-stx-hashtable G322f@sym '#f) ((lambda (G3231@subst) ((lambda (G3233@stx) ((lambda (G3235@stx) ((lambda () (begin (hashtable-set! G2ee0@scheme-stx-hashtable G322f@sym G3235@stx) G3235@stx)))) ((lambda (G3237@t) (if G3237@t ((lambda (G3239@x) ((lambda (G323b@name G323c@label) (G2d45@add-subst (G2cee@make-rib (list G323b@name) (list G2cd1@top-mark*) (list G323c@label) '#f '#f) G3233@stx)) (car G3239@x) (cdr G3239@x))) G3237@t) G3233@stx)) (assq G322f@sym G3231@subst)))) (G2d23@make-stx G322f@sym G2cd1@top-mark* '() '()))) (G2b45@G29c1@library-subst (G2b69@G2a09@find-library-by-name '(psyntax system $all))))))) (set! G2ee4@lexical-var car) (set! G2ee6@lexical-mutable? cdr) (set! G2ee8@set-lexical-mutable! set-cdr!) (set! G2eea@add-lexical (lambda (G323f@lab G3240@lex G3241@r) (cons (cons* G323f@lab 'lexical G3240@lex '#f) G3241@r))) (set! G2eec@add-lexicals (lambda (G3245@lab* G3246@lex* G3247@r) (if (null? G3245@lab*) G3247@r (G2eec@add-lexicals (cdr G3245@lab*) (cdr G3246@lex*) (G2eea@add-lexical (car G3245@lab*) (car G3246@lex*) G3247@r))))) (set! G2eee@letrec-helper (lambda (G324b@e G324c@r G324d@mr G324e@build) ((lambda (G3253@t) ((lambda (G3255@ls/false) (if G3255@ls/false (apply (lambda (G3257@lhs* G3258@rhs* G3259@b G325a@b*) (if (not (G2d63@valid-bound-ids? G3257@lhs*)) (G2f12@invalid-fmls-error G324b@e G3257@lhs*) ((lambda (G325f@lex* G3260@lab*) ((lambda (G3263@rib G3264@r) ((lambda (G3267@body G3268@rhs*) (G324e@build '#f G325f@lex* G3268@rhs* G3267@body)) (G2f92@chi-internal (G2d45@add-subst G3263@rib (cons G3259@b G325a@b*)) G3264@r G324d@mr) (G2f78@chi-expr* (map (lambda (G326b@x) (G2d45@add-subst G3263@rib G326b@x)) G3258@rhs*) G3264@r G324d@mr))) (G2d14@make-full-rib G3257@lhs* G3260@lab*) (G2eec@add-lexicals G3260@lab* G325f@lex* G324c@r))) (map G2cd5@gen-lexical G3257@lhs*) (map G2cd9@gen-label G3257@lhs*)))) G3255@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3253@t))) (G2f58@syntax-dispatch G3253@t '(_ #(each (any any)) any . each-any)))) G324b@e))) (set! G2ef0@letrec-transformer (lambda (G326d@e G326e@r G326f@mr) (G2eee@letrec-helper G326d@e G326e@r G326f@mr G2cb8@G2c2b@build-letrec))) (set! G2ef2@letrec*-transformer (lambda (G3273@e G3274@r G3275@mr) (G2eee@letrec-helper G3273@e G3274@r G3275@mr G2cb9@G2c2d@build-letrec*))) (set! G2ef4@fluid-let-syntax-transformer (lambda (G3279@e G327a@r G327b@mr) ((lambda (G3280@lookup) (begin (set! G3280@lookup (lambda (G3293@x) (or (G2d73@id->label G3293@x) (G3043@syntax-violation '#f '"unbound identifier" G3279@e G3293@x)))) ((lambda (G3281@t) ((lambda (G3283@ls/false) (if G3283@ls/false (apply (lambda (G3285@lhs* G3286@rhs* G3287@b G3288@b*) (if (not (G2d63@valid-bound-ids? G3285@lhs*)) (G2f12@invalid-fmls-error G3279@e G3285@lhs*) ((lambda (G328d@lab* G328e@rhs*) (G2f92@chi-internal (cons G3287@b G3288@b*) (append (map cons G328d@lab* G328e@rhs*) G327a@r) (append (map cons G328d@lab* G328e@rhs*) G327b@mr))) (map G3280@lookup G3285@lhs*) (map (lambda (G3291@x) (G2d99@make-eval-transformer (G2fb7@expand-transformer G3291@x G327b@mr))) G3286@rhs*)))) G3283@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3281@t))) (G2f58@syntax-dispatch G3281@t '(_ #(each (any any)) any . each-any)))) G3279@e))) '#f))) (set! G2ef6@type-descriptor-transformer (lambda (G3295@e G3296@r G3297@mr) ((lambda (G329b@t) ((lambda (G329d@ls/false) (if (and G329d@ls/false (apply (lambda (G329f@id) (G2d59@id? G329f@id)) G329d@ls/false)) (apply (lambda (G32a1@id) ((lambda (G32a3@lab) ((lambda (G32a5@b) ((lambda (G32a7@type) ((lambda () (begin (if (not G32a3@lab) (G2d7f@raise-unbound-error G32a1@id) (void)) (if (not (and (eq? G32a7@type '$rtd) (not (list? (G2d7d@binding-value G32a5@b))))) (G3043@syntax-violation '#f '"not a record type" G3295@e) (void)) (list 'quote (G2d7d@binding-value G32a5@b)))))) (G2d7b@binding-type G32a5@b))) (G2d77@label->binding G32a3@lab G3296@r))) (G2d73@id->label G32a1@id))) G329d@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G329b@t))) (G2f58@syntax-dispatch G329b@t '(_ any)))) G3295@e))) (set! G2ef8@record-type-descriptor-transformer (lambda (G32a9@e G32aa@r G32ab@mr) ((lambda (G32af@t) ((lambda (G32b1@ls/false) (if (and G32b1@ls/false (apply (lambda (G32b3@id) (G2d59@id? G32b3@id)) G32b1@ls/false)) (apply (lambda (G32b5@id) ((lambda (G32b7@lab) ((lambda (G32b9@b) ((lambda (G32bb@type) ((lambda () (begin (if (not G32b7@lab) (G2d7f@raise-unbound-error G32b5@id) (void)) (if (not (and (eq? G32bb@type '$rtd) (list? (G2d7d@binding-value G32b9@b)))) (G3043@syntax-violation '#f '"not a record type" G32a9@e) (void)) (G2f7c@chi-expr (car (G2d7d@binding-value G32b9@b)) G32aa@r G32ab@mr))))) (G2d7b@binding-type G32b9@b))) (G2d77@label->binding G32b7@lab G32aa@r))) (G2d73@id->label G32b5@id))) G32b1@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G32af@t))) (G2f58@syntax-dispatch G32af@t '(_ any)))) G32a9@e))) (set! G2efa@record-constructor-descriptor-transformer (lambda (G32bd@e G32be@r G32bf@mr) ((lambda (G32c3@t) ((lambda (G32c5@ls/false) (if (and G32c5@ls/false (apply (lambda (G32c7@id) (G2d59@id? G32c7@id)) G32c5@ls/false)) (apply (lambda (G32c9@id) ((lambda (G32cb@lab) ((lambda (G32cd@b) ((lambda (G32cf@type) ((lambda () (begin (if (not G32cb@lab) (G2d7f@raise-unbound-error G32c9@id) (void)) (if (not (and (eq? G32cf@type '$rtd) (list? (G2d7d@binding-value G32cd@b)))) (G3043@syntax-violation '#f '"invalid type" G32bd@e) (void)) (G2f7c@chi-expr (cadr (G2d7d@binding-value G32cd@b)) G32be@r G32bf@mr))))) (G2d7b@binding-type G32cd@b))) (G2d77@label->binding G32cb@lab G32be@r))) (G2d73@id->label G32c9@id))) G32c5@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G32c3@t))) (G2f58@syntax-dispatch G32c3@t '(_ any)))) G32bd@e))) (set! G2efc@when-macro (lambda (G32d1@e) ((lambda (G32d3@t) ((lambda (G32d5@ls/false) (if G32d5@ls/false (apply (lambda (G32d7@test G32d8@e G32d9@e*) (G2f0e@bless (list 'if G32d7@test (cons 'begin (cons G32d8@e G32d9@e*))))) G32d5@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G32d3@t))) (G2f58@syntax-dispatch G32d3@t '(_ any any . each-any)))) G32d1@e))) (set! G2efe@unless-macro (lambda (G32dd@e) ((lambda (G32df@t) ((lambda (G32e1@ls/false) (if G32e1@ls/false (apply (lambda (G32e3@test G32e4@e G32e5@e*) (G2f0e@bless (list 'if (list 'not G32e3@test) (cons 'begin (cons G32e4@e G32e5@e*))))) G32e1@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G32df@t))) (G2f58@syntax-dispatch G32df@t '(_ any any . each-any)))) G32dd@e))) (set! G2f00@if-transformer (lambda (G32e9@e G32ea@r G32eb@mr) ((lambda (G32ef@t) ((lambda (G32f1@ls/false) (if G32f1@ls/false (apply (lambda (G32f3@e0 G32f4@e1 G32f5@e2) (list 'if (G2f7c@chi-expr G32f3@e0 G32ea@r G32eb@mr) (G2f7c@chi-expr G32f4@e1 G32ea@r G32eb@mr) (G2f7c@chi-expr G32f5@e2 G32ea@r G32eb@mr))) G32f1@ls/false) ((lambda (G32f9@t) ((lambda (G32fb@ls/false) (if G32fb@ls/false (apply (lambda (G32fd@e0 G32fe@e1) (list 'if (G2f7c@chi-expr G32fd@e0 G32ea@r G32eb@mr) (G2f7c@chi-expr G32fe@e1 G32ea@r G32eb@mr) (G2cb7@G2c29@build-void))) G32fb@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G32f9@t))) (G2f58@syntax-dispatch G32f9@t '(_ any any)))) G32ef@t))) (G2f58@syntax-dispatch G32ef@t '(_ any any any)))) G32e9@e))) (set! G2f02@and-transformer (lambda (G3301@e G3302@r G3303@mr) ((lambda (G3307@t) ((lambda (G3309@ls/false) (if G3309@ls/false (apply (lambda (G330b@e*) (cons 'and (G2f78@chi-expr* G330b@e* G3302@r G3303@mr))) G3309@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3307@t))) (G2f58@syntax-dispatch G3307@t '(_ . each-any)))) G3301@e))) (set! G2f04@or-transformer (lambda (G330d@e G330e@r G330f@mr) ((lambda (G3313@t) ((lambda (G3315@ls/false) (if G3315@ls/false (apply (lambda (G3317@e*) (cons 'or (G2f78@chi-expr* G3317@e* G330e@r G330f@mr))) G3315@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3313@t))) (G2f58@syntax-dispatch G3313@t '(_ . each-any)))) G330d@e))) (set! G2f06@case-macro (lambda (G3319@e) ((lambda (G331c@build-last G331e@build-one) (begin (set! G331c@build-last (lambda (G3343@cls) ((lambda (G3345@t) ((lambda (G3347@ls/false) (if G3347@ls/false (apply (lambda (G3349@e G334a@e*) (cons 'begin (cons G3349@e G334a@e*))) G3347@ls/false) ((lambda (G334d@t) ((lambda (G334f@ls/false) (if G334f@ls/false (apply (lambda () (G331e@build-one G3343@cls '(if #f #f))) G334f@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G334d@t))) (G2f58@syntax-dispatch G334d@t '_))) G3345@t))) (G2f58@syntax-dispatch G3345@t '(#(scheme-id else) any . each-any)))) G3343@cls))) (set! G331e@build-one (lambda (G3335@cls G3336@k) ((lambda (G3339@t) ((lambda (G333b@ls/false) (if G333b@ls/false (apply (lambda (G333d@d* G333e@e G333f@e*) (list 'if (list 'memv 't (list 'quote G333d@d*)) (cons 'begin (cons G333e@e G333f@e*)) G3336@k)) G333b@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3339@t))) (G2f58@syntax-dispatch G3339@t '(each-any any . each-any)))) G3335@cls))) ((lambda (G331f@t) ((lambda (G3321@ls/false) (if G3321@ls/false (apply (lambda (G3323@expr) (G2f0e@bless (cons 'let (cons (list (list 't G3323@expr)) '((if #f #f)))))) G3321@ls/false) ((lambda (G3325@t) ((lambda (G3327@ls/false) (if G3327@ls/false (apply (lambda (G3329@expr G332a@cls G332b@cls*) (G2f0e@bless (list 'let (list (list 't G3329@expr)) ((letrec ((G332f@f (lambda (G3331@cls G3332@cls*) (if (null? G3332@cls*) (G331c@build-last G3331@cls) (G331e@build-one G3331@cls (G332f@f (car G3332@cls*) (cdr G3332@cls*))))))) G332f@f) G332a@cls G332b@cls*)))) G3327@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3325@t))) (G2f58@syntax-dispatch G3325@t '(_ any any . each-any)))) G331f@t))) (G2f58@syntax-dispatch G331f@t '(_ any)))) G3319@e))) '#f '#f))) (set! G2f08@quote-transformer (lambda (G3351@e G3352@r G3353@mr) ((lambda (G3357@t) ((lambda (G3359@ls/false) (if G3359@ls/false (apply (lambda (G335b@datum) (list 'quote (G2d6f@stx->datum G335b@datum))) G3359@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3357@t))) (G2f58@syntax-dispatch G3357@t '(_ any)))) G3351@e))) (set! G2f0a@case-lambda-transformer (lambda (G335d@e G335e@r G335f@mr) ((lambda (G3363@t) ((lambda (G3365@ls/false) (if G3365@ls/false (apply (lambda (G3367@fmls* G3368@b* G3369@b**) (call-with-values (lambda () (G2f84@chi-lambda-clause* G335d@e G3367@fmls* (map cons G3368@b* G3369@b**) G335e@r G335f@mr)) (lambda (G336f@G336d G3370@G336e) ((lambda (G3373@body* G3374@fmls*) (G2cb4@G2bf3@build-case-lambda '#f G3374@fmls* G3373@body*)) G3370@G336e G336f@G336d)))) G3365@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3363@t))) (G2f58@syntax-dispatch G3363@t '(_ . #(each (any any . each-any)))))) G335d@e))) (set! G2f0c@lambda-transformer (lambda (G3377@e G3378@r G3379@mr) ((lambda (G337d@t) ((lambda (G337f@ls/false) (if G337f@ls/false (apply (lambda (G3381@fmls G3382@b G3383@b*) (call-with-values (lambda () (G2f82@chi-lambda-clause G3377@e G3381@fmls (cons G3382@b G3383@b*) G3378@r G3379@mr)) (lambda (G3389@G3387 G338a@G3388) ((lambda (G338d@body G338e@fmls) (G2cb3@G2bf1@build-lambda '#f G338e@fmls G338d@body)) G338a@G3388 G3389@G3387)))) G337f@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G337d@t))) (G2f58@syntax-dispatch G337d@t '(_ any any . each-any)))) G3377@e))) (set! G2f0e@bless (lambda (G3391@x) (G2d41@mkstx ((letrec ((G3393@f (lambda (G3395@x) (if (G2d21@stx? G3395@x) G3395@x (if (pair? G3395@x) (cons (G3393@f (car G3395@x)) (G3393@f (cdr G3395@x))) (if (symbol? G3395@x) (G2ee2@scheme-stx G3395@x) (if (vector? G3395@x) (vector-map G3393@f G3395@x) G3395@x))))))) G3393@f) G3391@x) '() '() '()))) (set! G2f10@with-syntax-macro (lambda (G3397@e) ((lambda (G3399@t) ((lambda (G339b@ls/false) (if G339b@ls/false (apply (lambda (G339d@pat* G339e@expr* G339f@b G33a0@b*) ((lambda (G33a5@idn*) (begin (G2f80@verify-formals (map car G33a5@idn*) G3397@e) ((lambda (G33a7@t*) (G2f0e@bless (list 'let (map list G33a7@t* G339e@expr*) ((letrec ((G33a9@f (lambda (G33ab@pat* G33ac@t*) (if (null? G33ab@pat*) (cons 'begin (cons '#f (cons G339f@b G33a0@b*))) (list 'syntax-case (car G33ac@t*) '() (list (car G33ab@pat*) (G33a9@f (cdr G33ab@pat*) (cdr G33ac@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33ab@pat*)) (car G33ac@t*)))))))) G33a9@f) G339d@pat* G33a7@t*)))) (G3031@generate-temporaries G339e@expr*)))) ((letrec ((G33af@f (lambda (G33b1@pat*) (if (null? G33b1@pat*) '() (call-with-values (lambda () (G2f56@convert-pattern (car G33b1@pat*) '())) (lambda (G33b5@G33b3 G33b6@G33b4) ((lambda (G33b9@idn* G33ba@pat) (append G33b9@idn* (G33af@f (cdr G33b1@pat*)))) G33b6@G33b4 G33b5@G33b3))))))) G33af@f) G339d@pat*))) G339b@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3399@t))) (G2f58@syntax-dispatch G3399@t '(_ #(each (any any)) any . each-any)))) G3397@e))) (set! G2f12@invalid-fmls-error (lambda (G33bd@stx G33be@fmls) ((lambda (G33c1@t) ((lambda (G33c3@ls/false) (if G33c3@ls/false (apply (lambda (G33c5@id* G33c6@last) ((letrec ((G33c9@f (lambda (G33cb@id*) (if (null? G33cb@id*) (values) (if (not (G2d59@id? (car G33cb@id*))) (G3043@syntax-violation '#f '"not an identifier" G33bd@stx (car G33cb@id*)) (begin (G33c9@f (cdr G33cb@id*)) (if (G2d67@bound-id-member? (car G33cb@id*) (cdr G33cb@id*)) (G3043@syntax-violation '#f '"duplicate binding" G33bd@stx (car G33cb@id*)) (void)))))))) G33c9@f) (if (G2d59@id? G33c6@last) (cons G33c6@last G33c5@id*) (if (G2d4f@syntax-null? G33c6@last) G33c5@id* (G3043@syntax-violation '#f '"not an identifier" G33bd@stx G33c6@last))))) G33c3@ls/false) ((lambda (G33cd@t) ((lambda (G33cf@ls/false) (if G33cf@ls/false (apply (lambda () (G3043@syntax-violation '#f '"malformed binding form" G33bd@stx G33be@fmls)) G33cf@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G33cd@t))) (G2f58@syntax-dispatch G33cd@t '_))) G33c1@t))) (G2f58@syntax-dispatch G33c1@t '#(each+ any () any)))) G33be@fmls))) (set! G2f14@let-macro (lambda (G33d1@stx) ((lambda (G33d3@t) ((lambda (G33d5@ls/false) (if G33d5@ls/false (apply (lambda (G33d7@lhs* G33d8@rhs* G33d9@b G33da@b*) (if (G2d63@valid-bound-ids? G33d7@lhs*) (G2f0e@bless (cons (cons 'lambda (cons G33d7@lhs* (cons G33d9@b G33da@b*))) G33d8@rhs*)) (G2f12@invalid-fmls-error G33d1@stx G33d7@lhs*))) G33d5@ls/false) ((lambda (G33df@t) ((lambda (G33e1@ls/false) (if (and G33e1@ls/false (apply (lambda (G33e3@f G33e4@lhs* G33e5@rhs* G33e6@b G33e7@b*) (G2d59@id? G33e3@f)) G33e1@ls/false)) (apply (lambda (G33ed@f G33ee@lhs* G33ef@rhs* G33f0@b G33f1@b*) (if (G2d63@valid-bound-ids? G33ee@lhs*) (G2f0e@bless (cons (list 'letrec (list (list G33ed@f (cons 'lambda (cons G33ee@lhs* (cons G33f0@b G33f1@b*))))) G33ed@f) G33ef@rhs*)) (G2f12@invalid-fmls-error G33d1@stx G33ee@lhs*))) G33e1@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G33df@t))) (G2f58@syntax-dispatch G33df@t '(_ any #(each (any any)) any . each-any)))) G33d3@t))) (G2f58@syntax-dispatch G33d3@t '(_ #(each (any any)) any . each-any)))) G33d1@stx))) (set! G2f16@let-values-macro (lambda (G33f7@stx) ((lambda (G33fa@rename G33fc@rename*) (begin (set! G33fa@rename (lambda (G345c@x G345d@old* G345e@new*) (begin (if (not (G2d59@id? G345c@x)) (G3043@syntax-violation '#f '"not an indentifier" G33f7@stx G345c@x) (void)) (if (G2d67@bound-id-member? G345c@x G345d@old*) (G3043@syntax-violation '#f '"duplicate binding" G33f7@stx G345c@x) (void)) ((lambda (G3462@y) (values G3462@y (cons G345c@x G345d@old*) (cons G3462@y G345e@new*))) (gensym (G3049@syntax->datum G345c@x)))))) (set! G33fc@rename* (lambda (G344a@x* G344b@old* G344c@new*) (if (null? G344a@x*) (values '() G344b@old* G344c@new*) (call-with-values (lambda () (G33fa@rename (car G344a@x*) G344b@old* G344c@new*)) (lambda (G3450@x G3451@old* G3452@new*) (call-with-values (lambda () (G33fc@rename* (cdr G344a@x*) G3451@old* G3452@new*)) (lambda (G3456@x* G3457@old* G3458@new*) (values (cons G3450@x G3456@x*) G3457@old* G3458@new*)))))))) ((lambda (G33fd@t) ((lambda (G33ff@ls/false) (if G33ff@ls/false (apply (lambda (G3401@b G3402@b*) (cons* (G2f0e@bless 'let) '() G3401@b G3402@b*)) G33ff@ls/false) ((lambda (G3405@t) ((lambda (G3407@ls/false) (if G3407@ls/false (apply (lambda (G3409@lhs* G340a@rhs* G340b@b G340c@b*) (G2f0e@bless ((letrec ((G3411@f (lambda (G3413@lhs* G3414@rhs* G3415@old* G3416@new*) (if (null? G3413@lhs*) (cons 'let (cons (map list G3415@old* G3416@new*) (cons G340b@b G340c@b*))) ((lambda (G341b@t) ((lambda (G341d@ls/false) (if G341d@ls/false (apply (lambda (G341f@x*) (call-with-values (lambda () (G33fc@rename* G341f@x* G3415@old* G3416@new*)) (lambda (G3424@G3421 G3425@G3422 G3426@G3423) ((lambda (G342a@new* G342b@old* G342c@y*) (list 'call-with-values (list 'lambda '() (car G3414@rhs*)) (list 'lambda G342c@y* (G3411@f (cdr G3413@lhs*) (cdr G3414@rhs*) G342b@old* G342a@new*)))) G3426@G3423 G3425@G3422 G3424@G3421)))) G341d@ls/false) ((lambda (G3430@t) ((lambda (G3432@ls/false) (if G3432@ls/false (apply (lambda (G3434@x* G3435@x) (call-with-values (lambda () (G33fa@rename G3435@x G3415@old* G3416@new*)) (lambda (G3438@y G3439@old* G343a@new*) (call-with-values (lambda () (G33fc@rename* G3434@x* G3439@old* G343a@new*)) (lambda (G343e@y* G343f@old* G3440@new*) (list 'call-with-values (list 'lambda '() (car G3414@rhs*)) (list 'lambda (append G343e@y* G3438@y) (G3411@f (cdr G3413@lhs*) (cdr G3414@rhs*) G343f@old* G3440@new*)))))))) G3432@ls/false) ((lambda (G3444@t) ((lambda (G3446@ls/false) (if G3446@ls/false (apply (lambda (G3448@others) (G3043@syntax-violation '#f '"malformed bindings" G33f7@stx G3448@others)) G3446@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3444@t))) (G2f58@syntax-dispatch G3444@t 'any))) G3430@t))) (G2f58@syntax-dispatch G3430@t '#(each+ any () any)))) G341b@t))) (G2f58@syntax-dispatch G341b@t 'each-any))) (car G3413@lhs*)))))) G3411@f) G3409@lhs* G340a@rhs* '() '()))) G3407@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3405@t))) (G2f58@syntax-dispatch G3405@t '(_ #(each (any any)) any . each-any)))) G33fd@t))) (G2f58@syntax-dispatch G33fd@t '(_ () any . each-any)))) G33f7@stx))) '#f '#f))) (set! G2f18@let*-values-macro (lambda (G3464@stx) ((lambda (G3467@check) (begin (set! G3467@check (lambda (G3496@x*) (if (not (null? G3496@x*)) ((lambda (G3498@x) (begin (if (not (G2d59@id? G3498@x)) (G3043@syntax-violation '#f '"not an identifier" G3464@stx G3498@x) (void)) (G3467@check (cdr G3496@x*)) (if (G2d67@bound-id-member? G3498@x (cdr G3496@x*)) (G3043@syntax-violation '#f '"duplicate identifier" G3464@stx G3498@x) (void)))) (car G3496@x*)) (void)))) ((lambda (G3468@t) ((lambda (G346a@ls/false) (if G346a@ls/false (apply (lambda (G346c@b G346d@b*) (cons* (G2f0e@bless 'let) '() G346c@b G346d@b*)) G346a@ls/false) ((lambda (G3470@t) ((lambda (G3472@ls/false) (if G3472@ls/false (apply (lambda (G3474@lhs* G3475@rhs* G3476@b G3477@b*) (G2f0e@bless ((letrec ((G347c@f (lambda (G347e@lhs* G347f@rhs*) (if (null? G347e@lhs*) (cons 'begin (cons G3476@b G3477@b*)) ((lambda (G3482@t) ((lambda (G3484@ls/false) (if G3484@ls/false (apply (lambda (G3486@x*) (begin (G3467@check G3486@x*) (list 'call-with-values (list 'lambda '() (car G347f@rhs*)) (list 'lambda G3486@x* (G347c@f (cdr G347e@lhs*) (cdr G347f@rhs*)))))) G3484@ls/false) ((lambda (G3488@t) ((lambda (G348a@ls/false) (if G348a@ls/false (apply (lambda (G348c@x* G348d@x) (begin (G3467@check (cons G348d@x G348c@x*)) (list 'call-with-values (list 'lambda '() (car G347f@rhs*)) (list 'lambda (append G348c@x* G348d@x) (G347c@f (cdr G347e@lhs*) (cdr G347f@rhs*)))))) G348a@ls/false) ((lambda (G3490@t) ((lambda (G3492@ls/false) (if G3492@ls/false (apply (lambda (G3494@others) (G3043@syntax-violation '#f '"malformed bindings" G3464@stx G3494@others)) G3492@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3490@t))) (G2f58@syntax-dispatch G3490@t 'any))) G3488@t))) (G2f58@syntax-dispatch G3488@t '#(each+ any () any)))) G3482@t))) (G2f58@syntax-dispatch G3482@t 'each-any))) (car G347e@lhs*)))))) G347c@f) G3474@lhs* G3475@rhs*))) G3472@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3470@t))) (G2f58@syntax-dispatch G3470@t '(_ #(each (any any)) any . each-any)))) G3468@t))) (G2f58@syntax-dispatch G3468@t '(_ () any . each-any)))) G3464@stx))) '#f))) (set! G2f1a@trace-lambda-macro (lambda (G349a@stx) ((lambda (G349c@t) ((lambda (G349e@ls/false) (if G349e@ls/false (apply (lambda (G34a0@who G34a1@fmls G34a2@b G34a3@b*) (if (G2d63@valid-bound-ids? G34a1@fmls) (G2f0e@bless (list 'make-traced-procedure (list 'quote G34a0@who) (cons 'lambda (cons G34a1@fmls (cons G34a2@b G34a3@b*))))) (G2f12@invalid-fmls-error G349a@stx G34a1@fmls))) G349e@ls/false) ((lambda (G34a8@t) ((lambda (G34aa@ls/false) (if G34aa@ls/false (apply (lambda (G34ac@who G34ad@fmls G34ae@last G34af@b G34b0@b*) (if (G2d63@valid-bound-ids? (cons G34ae@last G34ad@fmls)) (G2f0e@bless (list 'make-traced-procedure (list 'quote G34ac@who) (cons 'lambda (cons (append G34ad@fmls G34ae@last) (cons G34af@b G34b0@b*))))) (G2f12@invalid-fmls-error G349a@stx (append G34ad@fmls G34ae@last)))) G34aa@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G34a8@t))) (G2f58@syntax-dispatch G34a8@t '(_ any #(each+ any () any) any . each-any)))) G349c@t))) (G2f58@syntax-dispatch G349c@t '(_ any each-any any . each-any)))) G349a@stx))) (set! G2f1c@trace-define-macro (lambda (G34b6@stx) ((lambda (G34b8@t) ((lambda (G34ba@ls/false) (if G34ba@ls/false (apply (lambda (G34bc@who G34bd@fmls G34be@b G34bf@b*) (if (G2d63@valid-bound-ids? G34bd@fmls) (G2f0e@bless (list 'define G34bc@who (list 'make-traced-procedure (list 'quote G34bc@who) (cons 'lambda (cons G34bd@fmls (cons G34be@b G34bf@b*)))))) (G2f12@invalid-fmls-error G34b6@stx G34bd@fmls))) G34ba@ls/false) ((lambda (G34c4@t) ((lambda (G34c6@ls/false) (if G34c6@ls/false (apply (lambda (G34c8@who G34c9@fmls G34ca@last G34cb@b G34cc@b*) (if (G2d63@valid-bound-ids? (cons G34ca@last G34c9@fmls)) (G2f0e@bless (list 'define G34c8@who (list 'make-traced-procedure (list 'quote G34c8@who) (cons 'lambda (cons (append G34c9@fmls G34ca@last) (cons G34cb@b G34cc@b*)))))) (G2f12@invalid-fmls-error G34b6@stx (append G34c9@fmls G34ca@last)))) G34c6@ls/false) ((lambda (G34d2@t) ((lambda (G34d4@ls/false) (if G34d4@ls/false (apply (lambda (G34d6@who G34d7@expr) (if (G2d59@id? G34d6@who) (G2f0e@bless (list 'define G34d6@who (list 'let (list (list 'v G34d7@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34d6@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3043@syntax-violation '#f '"invalid name" G34b6@stx))) G34d4@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G34d2@t))) (G2f58@syntax-dispatch G34d2@t '(_ any any)))) G34c4@t))) (G2f58@syntax-dispatch G34c4@t '(_ (any . #(each+ any () any)) any . each-any)))) G34b8@t))) (G2f58@syntax-dispatch G34b8@t '(_ (any . each-any) any . each-any)))) G34b6@stx))) (set! G2f1e@trace-define-syntax-macro (lambda (G34da@stx) ((lambda (G34dc@t) ((lambda (G34de@ls/false) (if G34de@ls/false (apply (lambda (G34e0@who G34e1@expr) (if (G2d59@id? G34e0@who) (G2f0e@bless (list 'define-syntax G34e0@who (list 'make-traced-macro (list 'quote G34e0@who) G34e1@expr))) (G3043@syntax-violation '#f '"invalid name" G34da@stx))) G34de@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G34dc@t))) (G2f58@syntax-dispatch G34dc@t '(_ any any)))) G34da@stx))) (set! G2f20@trace-let/rec-syntax (lambda (G34e4@who) (lambda (G34e6@stx) ((lambda (G34e8@t) ((lambda (G34ea@ls/false) (if G34ea@ls/false (apply (lambda (G34ec@lhs* G34ed@rhs* G34ee@b G34ef@b*) (if (G2d63@valid-bound-ids? G34ec@lhs*) ((lambda (G34f4@rhs*) (G2f0e@bless (cons G34e4@who (cons (map list G34ec@lhs* G34f4@rhs*) (cons G34ee@b G34ef@b*))))) (map (lambda (G34f6@lhs G34f7@rhs) (list 'make-traced-macro (list 'quote G34f6@lhs) G34f7@rhs)) G34ec@lhs* G34ed@rhs*)) (G2f12@invalid-fmls-error G34e6@stx G34ec@lhs*))) G34ea@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G34e8@t))) (G2f58@syntax-dispatch G34e8@t '(_ #(each (any any)) any . each-any)))) G34e6@stx)))) (set! G2f22@trace-let-syntax-macro (G2f20@trace-let/rec-syntax 'let-syntax)) (set! G2f24@trace-letrec-syntax-macro (G2f20@trace-let/rec-syntax 'letrec-syntax)) (set! G2f26@guard-macro (lambda (G34fa@x) ((lambda (G34fd@gen-clauses) (begin (set! G34fd@gen-clauses (lambda (G3514@con G3515@outerk G3516@clause*) ((lambda (G351b@f G351d@f*) (begin (set! G351b@f (lambda (G3550@x G3551@k) ((lambda (G3554@t) ((lambda (G3556@ls/false) (if G3556@ls/false (apply (lambda (G3558@e G3559@p) ((lambda (G355c@t) (list 'let (list (list G355c@t G3558@e)) (list 'if G355c@t (list G3559@p G355c@t) G3551@k))) (gensym))) G3556@ls/false) ((lambda (G355e@t) ((lambda (G3560@ls/false) (if G3560@ls/false (apply (lambda (G3562@e) ((lambda (G3564@t) (list 'let (list (list G3564@t G3562@e)) (list 'if G3564@t G3564@t G3551@k))) (gensym))) G3560@ls/false) ((lambda (G3566@t) ((lambda (G3568@ls/false) (if G3568@ls/false (apply (lambda (G356a@e G356b@v G356c@v*) (list 'if G356a@e (cons 'begin (cons G356b@v G356c@v*)) G3551@k)) G3568@ls/false) ((lambda (G3570@t) ((lambda (G3572@ls/false) (if G3572@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid guard clause" G3550@x)) G3572@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3570@t))) (G2f58@syntax-dispatch G3570@t '_))) G3566@t))) (G2f58@syntax-dispatch G3566@t '(any any . each-any)))) G355e@t))) (G2f58@syntax-dispatch G355e@t '(any)))) G3554@t))) (G2f58@syntax-dispatch G3554@t '(any #(scheme-id =>) any)))) G3550@x))) (set! G351d@f* (lambda (G3528@x*) ((lambda (G352a@t) ((lambda (G352c@ls/false) (if G352c@ls/false (apply (lambda () ((lambda (G352e@g) (values (list G352e@g (list 'lambda '() (list 'raise-continuable G3514@con))) G352e@g)) (gensym))) G352c@ls/false) ((lambda (G3530@t) ((lambda (G3532@ls/false) (if G3532@ls/false (apply (lambda (G3534@e G3535@e*) (values (cons 'begin (cons G3534@e G3535@e*)) '#f)) G3532@ls/false) ((lambda (G3538@t) ((lambda (G353a@ls/false) (if G353a@ls/false (apply (lambda (G353c@cls G353d@cls*) (call-with-values (lambda () (G351d@f* G353d@cls*)) (lambda (G3542@G3540 G3543@G3541) ((lambda (G3546@g G3547@e) (values (G351b@f G353c@cls G3547@e) G3546@g)) G3543@G3541 G3542@G3540)))) G353a@ls/false) ((lambda (G354a@t) ((lambda (G354c@ls/false) (if G354c@ls/false (apply (lambda (G354e@others) (G3043@syntax-violation '#f '"invalid guard clause" G354e@others)) G354c@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G354a@t))) (G2f58@syntax-dispatch G354a@t 'any))) G3538@t))) (G2f58@syntax-dispatch G3538@t '(any . any)))) G3530@t))) (G2f58@syntax-dispatch G3530@t '((#(scheme-id else) any . each-any))))) G352a@t))) (G2f58@syntax-dispatch G352a@t '()))) G3528@x*))) (call-with-values (lambda () (G351d@f* G3516@clause*)) (lambda (G3520@G351e G3521@G351f) ((lambda (G3524@raisek G3525@code) (if G3524@raisek (list (list 'call/cc (list 'lambda (list G3524@raisek) (list G3515@outerk (list 'lambda '() G3525@code))))) (list G3515@outerk (list 'lambda '() G3525@code)))) G3521@G351f G3520@G351e))))) '#f '#f))) ((lambda (G34fe@t) ((lambda (G3500@ls/false) (if (and G3500@ls/false (apply (lambda (G3502@con G3503@clause* G3504@b G3505@b*) (G2d59@id? G3502@con)) G3500@ls/false)) (apply (lambda (G350a@con G350b@clause* G350c@b G350d@b*) ((lambda (G3512@outerk) (G2f0e@bless (list (list 'call/cc (list 'lambda (list G3512@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G350a@con) (G34fd@gen-clauses G350a@con G3512@outerk G350b@clause*)) (cons 'lambda (cons '() (cons G350c@b G350d@b*)))))))))) (gensym))) G3500@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G34fe@t))) (G2f58@syntax-dispatch G34fe@t '(_ (any . each-any) any . each-any)))) G34fa@x))) '#f))) (set! G2f28@define-enumeration-macro (lambda (G3574@stx) ((lambda (G3577@set? G3579@remove-dups) (begin (set! G3577@set? (lambda (G3590@x) (or (null? G3590@x) (and (not (memq (car G3590@x) (cdr G3590@x))) (G3577@set? (cdr G3590@x)))))) (set! G3579@remove-dups (lambda (G358e@ls) (if (null? G358e@ls) '() (cons (car G358e@ls) (G3579@remove-dups (remq (car G358e@ls) (cdr G358e@ls))))))) ((lambda (G357a@t) ((lambda (G357c@ls/false) (if (and G357c@ls/false (apply (lambda (G357e@name G357f@id* G3580@maker) (and (G2d59@id? G357e@name) (G2d59@id? G3580@maker) (for-all G2d59@id? G357f@id*))) G357c@ls/false)) (apply (lambda (G3584@name G3585@id* G3586@maker) ((lambda (G358a@name* G358b@mk) (G2f0e@bless (list 'begin (list 'define G358b@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G358a@name*)))) (list 'define-syntax G3584@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G358a@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3584@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3586@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3586@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G358a@name*)) (cons 'syntax-violation (cons (list 'quote G3586@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G358b@mk '('(n* ...)))))))))))) (G3579@remove-dups (G3049@syntax->datum G3585@id*)) (gensym))) G357c@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G357a@t))) (G2f58@syntax-dispatch G357a@t '(_ any each-any any)))) G3574@stx))) '#f '#f))) (set! G2f2a@time-macro (lambda (G3592@stx) ((lambda (G3594@t) ((lambda (G3596@ls/false) (if G3596@ls/false (apply (lambda (G3598@expr) ((lambda (G359a@str) (G2f0e@bless (list 'time-it G359a@str (list 'lambda '() G3598@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G359e@G359c G359f@G359d) ((lambda (G35a2@e G35a3@p) (begin (write (G3049@syntax->datum G3598@expr) G35a3@p) (G35a2@e))) G359f@G359d G359e@G359c))))) G3596@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3594@t))) (G2f58@syntax-dispatch G3594@t '(_ any)))) G3592@stx))) (set! G2f2c@delay-macro (lambda (G35a6@stx) ((lambda (G35a8@t) ((lambda (G35aa@ls/false) (if G35aa@ls/false (apply (lambda (G35ac@expr) (G2f0e@bless (list 'make-promise (list 'lambda '() G35ac@expr)))) G35aa@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G35a8@t))) (G2f58@syntax-dispatch G35a8@t '(_ any)))) G35a6@stx))) (set! G2f2e@assert-macro (lambda (G35ae@stx) ((lambda (G35b0@t) ((lambda (G35b2@ls/false) (if G35b2@ls/false (apply (lambda (G35b4@expr) ((lambda (G35b6@pos) (G2f0e@bless (list 'unless G35b4@expr (list 'assertion-error (list 'quote G35b4@expr) (list 'quote G35b6@pos))))) (or (G303b@expression-position G35ae@stx) (G303b@expression-position G35b4@expr)))) G35b2@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G35b0@t))) (G2f58@syntax-dispatch G35b0@t '(_ any)))) G35ae@stx))) (set! G2f30@endianness-macro (lambda (G35b8@stx) ((lambda (G35ba@t) ((lambda (G35bc@ls/false) (if G35bc@ls/false (apply (lambda (G35be@e) ((lambda (G35c0@t) (if (memv G35c0@t '(little)) (G2f0e@bless ''little) (if (memv G35c0@t '(big)) (G2f0e@bless ''big) (G3043@syntax-violation '#f '"endianness must be big or little" G35b8@stx)))) (G3049@syntax->datum G35be@e))) G35bc@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G35ba@t))) (G2f58@syntax-dispatch G35ba@t '(_ any)))) G35b8@stx))) (set! G2f32@identifier-syntax-macro (lambda (G35c2@stx) ((lambda (G35c4@t) ((lambda (G35c6@ls/false) (if G35c6@ls/false (apply (lambda (G35c8@expr) (G2f0e@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35c8@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35c8@expr) '((syntax (e* ...)))))))))) G35c6@ls/false) ((lambda (G35ca@t) ((lambda (G35cc@ls/false) (if (and G35cc@ls/false (apply (lambda (G35ce@id1 G35cf@expr1 G35d0@id2 G35d1@expr2 G35d2@expr3) (and (G2d59@id? G35ce@id1) (G2d59@id? G35d0@id2) (G2d59@id? G35d1@expr2))) G35cc@ls/false)) (apply (lambda (G35d8@id1 G35d9@expr1 G35da@id2 G35db@expr2 G35dc@expr3) (G2f0e@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35d9@expr1)) (list (list 'set! 'id G35db@expr2) (list 'syntax G35dc@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35d9@expr1 '(e* ...))))))))) G35cc@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G35ca@t))) (G2f58@syntax-dispatch G35ca@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35c4@t))) (G2f58@syntax-dispatch G35c4@t '(_ any)))) G35c2@stx))) (set! G2f34@do-macro (lambda (G35e2@stx) ((lambda (G35e5@bind) (begin (set! G35e5@bind (lambda (G35fc@x) ((lambda (G35fe@t) ((lambda (G3600@ls/false) (if G3600@ls/false (apply (lambda (G3602@x G3603@init) (list G3602@x G3603@init G3602@x)) G3600@ls/false) ((lambda (G3606@t) ((lambda (G3608@ls/false) (if G3608@ls/false (apply (lambda (G360a@x G360b@init G360c@step) (list G360a@x G360b@init G360c@step)) G3608@ls/false) ((lambda (G3610@t) ((lambda (G3612@ls/false) (if G3612@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid binding" G35e2@stx)) G3612@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3610@t))) (G2f58@syntax-dispatch G3610@t '_))) G3606@t))) (G2f58@syntax-dispatch G3606@t '(any any any)))) G35fe@t))) (G2f58@syntax-dispatch G35fe@t '(any any)))) G35fc@x))) ((lambda (G35e6@t) ((lambda (G35e8@ls/false) (if G35e8@ls/false (apply (lambda (G35ea@binding* G35eb@test G35ec@expr* G35ed@command*) ((lambda (G35f2@t) ((lambda (G35f4@ls/false) (if G35f4@ls/false (apply (lambda (G35f6@x* G35f7@init* G35f8@step*) (if (G2d63@valid-bound-ids? G35f6@x*) (G2f0e@bless (list 'letrec (list (list 'loop (list 'lambda G35f6@x* (list 'if G35eb@test (cons 'begin (cons '(if #f #f) G35ec@expr*)) (cons 'begin (append G35ed@command* (list (cons 'loop G35f8@step*)))))))) (cons 'loop G35f7@init*))) (G3043@syntax-violation '#f '"invalid bindings" G35e2@stx))) G35f4@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G35f2@t))) (G2f58@syntax-dispatch G35f2@t '#(each (any any any))))) (map G35e5@bind G35ea@binding*))) G35e8@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G35e6@t))) (G2f58@syntax-dispatch G35e6@t '(_ each-any (any . each-any) . each-any)))) G35e2@stx))) '#f))) (set! G2f36@let*-macro (lambda (G3614@stx) ((lambda (G3616@t) ((lambda (G3618@ls/false) (if (and G3618@ls/false (apply (lambda (G361a@lhs* G361b@rhs* G361c@b G361d@b*) (for-all G2d59@id? G361a@lhs*)) G3618@ls/false)) (apply (lambda (G3622@lhs* G3623@rhs* G3624@b G3625@b*) (G2f0e@bless ((letrec ((G362a@f (lambda (G362c@x*) (if (null? G362c@x*) (cons 'let (cons '() (cons G3624@b G3625@b*))) (list 'let (list (car G362c@x*)) (G362a@f (cdr G362c@x*))))))) G362a@f) (map list G3622@lhs* G3623@rhs*)))) G3618@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3616@t))) (G2f58@syntax-dispatch G3616@t '(_ #(each (any any)) any . each-any)))) G3614@stx))) (set! G2f38@or-macro (lambda (G362e@stx) ((lambda (G3630@t) ((lambda (G3632@ls/false) (if G3632@ls/false (apply (lambda () '#f) G3632@ls/false) ((lambda (G3634@t) ((lambda (G3636@ls/false) (if G3636@ls/false (apply (lambda (G3638@e G3639@e*) (G2f0e@bless ((letrec ((G363c@f (lambda (G363e@e G363f@e*) (if (null? G363f@e*) (list 'begin '#f G363e@e) (list 'let (list (list 't G363e@e)) (list 'if 't 't (G363c@f (car G363f@e*) (cdr G363f@e*)))))))) G363c@f) G3638@e G3639@e*))) G3636@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3634@t))) (G2f58@syntax-dispatch G3634@t '(_ any . each-any)))) G3630@t))) (G2f58@syntax-dispatch G3630@t '(_)))) G362e@stx))) (set! G2f3a@and-macro (lambda (G3642@stx) ((lambda (G3644@t) ((lambda (G3646@ls/false) (if G3646@ls/false (apply (lambda () '#t) G3646@ls/false) ((lambda (G3648@t) ((lambda (G364a@ls/false) (if G364a@ls/false (apply (lambda (G364c@e G364d@e*) (G2f0e@bless ((letrec ((G3650@f (lambda (G3652@e G3653@e*) (if (null? G3653@e*) (list 'begin '#f G3652@e) (cons 'if (cons G3652@e (cons (G3650@f (car G3653@e*) (cdr G3653@e*)) '(#f)))))))) G3650@f) G364c@e G364d@e*))) G364a@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3648@t))) (G2f58@syntax-dispatch G3648@t '(_ any . each-any)))) G3644@t))) (G2f58@syntax-dispatch G3644@t '(_)))) G3642@stx))) (set! G2f3c@cond-macro (lambda (G3656@stx) ((lambda (G3658@t) ((lambda (G365a@ls/false) (if G365a@ls/false (apply (lambda (G365c@cls G365d@cls*) (G2f0e@bless ((letrec ((G3660@f (lambda (G3662@cls G3663@cls*) (if (null? G3663@cls*) ((lambda (G3666@t) ((lambda (G3668@ls/false) (if G3668@ls/false (apply (lambda (G366a@e G366b@e*) (cons 'begin (cons G366a@e G366b@e*))) G3668@ls/false) ((lambda (G366e@t) ((lambda (G3670@ls/false) (if G3670@ls/false (apply (lambda (G3672@e G3673@p) (list 'let (list (list 't G3672@e)) (list 'if 't (cons G3673@p '(t))))) G3670@ls/false) ((lambda (G3676@t) ((lambda (G3678@ls/false) (if G3678@ls/false (apply (lambda (G367a@e) (cons 'or (cons G367a@e '((if #f #f))))) G3678@ls/false) ((lambda (G367c@t) ((lambda (G367e@ls/false) (if G367e@ls/false (apply (lambda (G3680@e G3681@e*) (list 'if G3680@e (cons 'begin G3681@e*))) G367e@ls/false) ((lambda (G3684@t) ((lambda (G3686@ls/false) (if G3686@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid last clause" G3656@stx)) G3686@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3684@t))) (G2f58@syntax-dispatch G3684@t '_))) G367c@t))) (G2f58@syntax-dispatch G367c@t '(any . each-any)))) G3676@t))) (G2f58@syntax-dispatch G3676@t '(any)))) G366e@t))) (G2f58@syntax-dispatch G366e@t '(any #(scheme-id =>) any)))) G3666@t))) (G2f58@syntax-dispatch G3666@t '(#(scheme-id else) any . each-any)))) G3662@cls) ((lambda (G3688@t) ((lambda (G368a@ls/false) (if G368a@ls/false (apply (lambda (G368c@e G368d@e*) (G3043@syntax-violation '#f '"incorrect position of keyword else" G3656@stx)) G368a@ls/false) ((lambda (G3690@t) ((lambda (G3692@ls/false) (if G3692@ls/false (apply (lambda (G3694@e G3695@p) (list 'let (list (list 't G3694@e)) (list 'if 't (cons G3695@p '(t)) (G3660@f (car G3663@cls*) (cdr G3663@cls*))))) G3692@ls/false) ((lambda (G3698@t) ((lambda (G369a@ls/false) (if G369a@ls/false (apply (lambda (G369c@e) (list 'or G369c@e (G3660@f (car G3663@cls*) (cdr G3663@cls*)))) G369a@ls/false) ((lambda (G369e@t) ((lambda (G36a0@ls/false) (if G36a0@ls/false (apply (lambda (G36a2@e G36a3@e*) (list 'if G36a2@e (cons 'begin G36a3@e*) (G3660@f (car G3663@cls*) (cdr G3663@cls*)))) G36a0@ls/false) ((lambda (G36a6@t) ((lambda (G36a8@ls/false) (if G36a8@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid last clause" G3656@stx)) G36a8@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G36a6@t))) (G2f58@syntax-dispatch G36a6@t '_))) G369e@t))) (G2f58@syntax-dispatch G369e@t '(any . each-any)))) G3698@t))) (G2f58@syntax-dispatch G3698@t '(any)))) G3690@t))) (G2f58@syntax-dispatch G3690@t '(any #(scheme-id =>) any)))) G3688@t))) (G2f58@syntax-dispatch G3688@t '(#(scheme-id else) any . each-any)))) G3662@cls))))) G3660@f) G365c@cls G365d@cls*))) G365a@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3658@t))) (G2f58@syntax-dispatch G3658@t '(_ any . each-any)))) G3656@stx))) (set! G2f3e@do-include (lambda (G36aa@stx G36ab@id G36ac@filename) ((lambda (G36b0@filename) (begin (if (not (and (string? G36b0@filename) (G2d59@id? G36ab@id))) (G3043@syntax-violation '#f '"invalid syntax" G36aa@stx) (void)) (cons (G2f0e@bless 'begin) (with-input-from-file G36b0@filename (lambda () ((letrec ((G36b2@f (lambda (G36b4@ls) ((lambda (G36b6@x) (if (eof-object? G36b6@x) (reverse G36b4@ls) (G36b2@f (cons (G2d37@datum->stx G36ab@id G36b6@x) G36b4@ls)))) (G28e8@G2811@read-annotated))))) G36b2@f) '())))))) (G2d6f@stx->datum G36ac@filename)))) (set! G2f40@include-macro (lambda (G36b8@e) ((lambda (G36ba@t) ((lambda (G36bc@ls/false) (if G36bc@ls/false (apply (lambda (G36be@id G36bf@filename) (G2f3e@do-include G36b8@e G36be@id G36bf@filename)) G36bc@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G36ba@t))) (G2f58@syntax-dispatch G36ba@t '(any any)))) G36b8@e))) (set! G2f42@include-into-macro (lambda (G36c2@e) ((lambda (G36c4@t) ((lambda (G36c6@ls/false) (if G36c6@ls/false (apply (lambda (G36c8@id G36c9@filename) (G2f3e@do-include G36c2@e G36c8@id G36c9@filename)) G36c6@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G36c4@t))) (G2f58@syntax-dispatch G36c4@t '(_ any any)))) G36c2@e))) (set! G2f44@syntax-rules-macro (lambda (G36cc@e) ((lambda (G36ce@t) ((lambda (G36d0@ls/false) (if G36d0@ls/false (apply (lambda (G36d2@lits G36d3@pat* G36d4@tmp*) (begin (G2f5e@verify-literals G36d2@lits G36cc@e) (G2f0e@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36d2@lits (map (lambda (G36d8@pat G36d9@tmp) ((lambda (G36dc@t) ((lambda (G36de@ls/false) (if G36de@ls/false (apply (lambda (G36e0@rest) (list (cons 'g G36e0@rest) (list 'syntax G36d9@tmp))) G36de@ls/false) ((lambda (G36e2@t) ((lambda (G36e4@ls/false) (if G36e4@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid syntax-rules pattern" G36cc@e G36d8@pat)) G36e4@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G36e2@t))) (G2f58@syntax-dispatch G36e2@t '_))) G36dc@t))) (G2f58@syntax-dispatch G36dc@t '(_ . any)))) G36d8@pat)) G36d3@pat* G36d4@tmp*)))))))) G36d0@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G36ce@t))) (G2f58@syntax-dispatch G36ce@t '(_ each-any . #(each (any any)))))) G36cc@e))) (set! G2f46@quasiquote-macro ((lambda () ((lambda (G36e7@datum G3705@quasicons* G3707@quasicons G3709@quasiappend G370b@quasivector G370d@vquasi G370f@quasi) (begin (set! G36e7@datum (lambda (G37ea@x) (list (G2ee2@scheme-stx 'quote) (G2d41@mkstx G37ea@x '() '() '())))) (set! G3705@quasicons* (lambda (G37e2@x G37e3@y) ((letrec ((G37e6@f (lambda (G37e8@x) (if (null? G37e8@x) G37e3@y (G3707@quasicons (car G37e8@x) (G37e6@f (cdr G37e8@x))))))) G37e6@f) G37e2@x))) (set! G3707@quasicons (lambda (G37bc@x G37bd@y) ((lambda (G37c0@t) ((lambda (G37c2@ls/false) (if G37c2@ls/false (apply (lambda (G37c4@dy) ((lambda (G37c6@t) ((lambda (G37c8@ls/false) (if G37c8@ls/false (apply (lambda (G37ca@dx) (list (G2ee2@scheme-stx 'quote) (cons G37ca@dx G37c4@dy))) G37c8@ls/false) ((lambda (G37cc@t) ((lambda (G37ce@ls/false) (if G37ce@ls/false (apply (lambda () ((lambda (G37d0@t) ((lambda (G37d2@ls/false) (if G37d2@ls/false (apply (lambda () (list (G2ee2@scheme-stx 'list) G37bc@x)) G37d2@ls/false) ((lambda (G37d4@t) ((lambda (G37d6@ls/false) (if G37d6@ls/false (apply (lambda () (list (G2ee2@scheme-stx 'cons) G37bc@x G37bd@y)) G37d6@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G37d4@t))) (G2f58@syntax-dispatch G37d4@t '_))) G37d0@t))) (G2f58@syntax-dispatch G37d0@t '()))) G37c4@dy)) G37ce@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G37cc@t))) (G2f58@syntax-dispatch G37cc@t '_))) G37c6@t))) (G2f58@syntax-dispatch G37c6@t '(#(scheme-id quote) any)))) G37bc@x)) G37c2@ls/false) ((lambda (G37d8@t) ((lambda (G37da@ls/false) (if G37da@ls/false (apply (lambda (G37dc@stuff) (cons* (G2ee2@scheme-stx 'list) G37bc@x G37dc@stuff)) G37da@ls/false) ((lambda (G37de@t) ((lambda (G37e0@ls/false) (if G37e0@ls/false (apply (lambda () (list (G2ee2@scheme-stx 'cons) G37bc@x G37bd@y)) G37e0@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G37de@t))) (G2f58@syntax-dispatch G37de@t '_))) G37d8@t))) (G2f58@syntax-dispatch G37d8@t '(#(scheme-id list) . each-any)))) G37c0@t))) (G2f58@syntax-dispatch G37c0@t '(#(scheme-id quote) any)))) G37bd@y))) (set! G3709@quasiappend (lambda (G37a2@x G37a3@y) ((lambda (G37a6@ls) (if (null? G37a6@ls) (list (G2ee2@scheme-stx 'quote) '()) (if (null? (cdr G37a6@ls)) (car G37a6@ls) (cons* (G2ee2@scheme-stx 'append) G37a6@ls)))) ((letrec ((G37a8@f (lambda (G37aa@x) (if (null? G37aa@x) ((lambda (G37ac@t) ((lambda (G37ae@ls/false) (if G37ae@ls/false (apply (lambda () '()) G37ae@ls/false) ((lambda (G37b0@t) ((lambda (G37b2@ls/false) (if G37b2@ls/false (apply (lambda () (list G37a3@y)) G37b2@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G37b0@t))) (G2f58@syntax-dispatch G37b0@t '_))) G37ac@t))) (G2f58@syntax-dispatch G37ac@t '(#(scheme-id quote) ())))) G37a3@y) ((lambda (G37b4@t) ((lambda (G37b6@ls/false) (if G37b6@ls/false (apply (lambda () (G37a8@f (cdr G37aa@x))) G37b6@ls/false) ((lambda (G37b8@t) ((lambda (G37ba@ls/false) (if G37ba@ls/false (apply (lambda () (cons (car G37aa@x) (G37a8@f (cdr G37aa@x)))) G37ba@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G37b8@t))) (G2f58@syntax-dispatch G37b8@t '_))) G37b4@t))) (G2f58@syntax-dispatch G37b4@t '(#(scheme-id quote) ())))) (car G37aa@x)))))) G37a8@f) G37a2@x)))) (set! G370b@quasivector (lambda (G3770@x) ((lambda (G3772@pat-x) ((lambda (G3774@t) ((lambda (G3776@ls/false) (if G3776@ls/false (apply (lambda (G3778@x*) (list (G2ee2@scheme-stx 'quote) (list->vector G3778@x*))) G3776@ls/false) ((lambda (G377a@t) ((lambda (G377c@ls/false) (if G377c@ls/false (apply (lambda () ((letrec ((G377e@f (lambda (G3780@x G3781@k) ((lambda (G3784@t) ((lambda (G3786@ls/false) (if G3786@ls/false (apply (lambda (G3788@x*) (G3781@k (map (lambda (G378a@x) (list (G2ee2@scheme-stx 'quote) G378a@x)) G3788@x*))) G3786@ls/false) ((lambda (G378c@t) ((lambda (G378e@ls/false) (if G378e@ls/false (apply (lambda (G3790@x*) (G3781@k G3790@x*)) G378e@ls/false) ((lambda (G3792@t) ((lambda (G3794@ls/false) (if G3794@ls/false (apply (lambda (G3796@x G3797@y) (G377e@f G3797@y (lambda (G379a@ls) (G3781@k (cons G3796@x G379a@ls))))) G3794@ls/false) ((lambda (G379c@t) ((lambda (G379e@ls/false) (if G379e@ls/false (apply (lambda () (list (G2ee2@scheme-stx 'list->vector) G3772@pat-x)) G379e@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G379c@t))) (G2f58@syntax-dispatch G379c@t '_))) G3792@t))) (G2f58@syntax-dispatch G3792@t '(#(scheme-id cons) any any)))) G378c@t))) (G2f58@syntax-dispatch G378c@t '(#(scheme-id list) . each-any)))) G3784@t))) (G2f58@syntax-dispatch G3784@t '(#(scheme-id quote) each-any)))) G3780@x)))) G377e@f) G3770@x (lambda (G37a0@ls) (cons* (G2ee2@scheme-stx 'vector) G37a0@ls)))) G377c@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G377a@t))) (G2f58@syntax-dispatch G377a@t '_))) G3774@t))) (G2f58@syntax-dispatch G3774@t '(#(scheme-id quote) each-any)))) G3772@pat-x)) G3770@x))) (set! G370d@vquasi (lambda (G374e@p G374f@lev) ((lambda (G3752@t) ((lambda (G3754@ls/false) (if G3754@ls/false (apply (lambda (G3756@p G3757@q) ((lambda (G375a@t) ((lambda (G375c@ls/false) (if G375c@ls/false (apply (lambda (G375e@p) (if (= G374f@lev '0) (G3705@quasicons* G375e@p (G370d@vquasi G3757@q G374f@lev)) (G3707@quasicons (G3707@quasicons (G36e7@datum 'unquote) (G370f@quasi G375e@p (- G374f@lev '1))) (G370d@vquasi G3757@q G374f@lev)))) G375c@ls/false) ((lambda (G3760@t) ((lambda (G3762@ls/false) (if G3762@ls/false (apply (lambda (G3764@p) (if (= G374f@lev '0) (G3709@quasiappend G3764@p (G370d@vquasi G3757@q G374f@lev)) (G3707@quasicons (G3707@quasicons (G36e7@datum 'unquote-splicing) (G370f@quasi G3764@p (- G374f@lev '1))) (G370d@vquasi G3757@q G374f@lev)))) G3762@ls/false) ((lambda (G3766@t) ((lambda (G3768@ls/false) (if G3768@ls/false (apply (lambda (G376a@p) (G3707@quasicons (G370f@quasi G376a@p G374f@lev) (G370d@vquasi G3757@q G374f@lev))) G3768@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3766@t))) (G2f58@syntax-dispatch G3766@t 'any))) G3760@t))) (G2f58@syntax-dispatch G3760@t '(#(scheme-id unquote-splicing) . each-any)))) G375a@t))) (G2f58@syntax-dispatch G375a@t '(#(scheme-id unquote) . each-any)))) G3756@p)) G3754@ls/false) ((lambda (G376c@t) ((lambda (G376e@ls/false) (if G376e@ls/false (apply (lambda () (list (G2ee2@scheme-stx 'quote) '())) G376e@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G376c@t))) (G2f58@syntax-dispatch G376c@t '()))) G3752@t))) (G2f58@syntax-dispatch G3752@t '(any . any)))) G374e@p))) (set! G370f@quasi (lambda (G3718@p G3719@lev) ((lambda (G371c@t) ((lambda (G371e@ls/false) (if G371e@ls/false (apply (lambda (G3720@p) (if (= G3719@lev '0) G3720@p (G3707@quasicons (G36e7@datum 'unquote) (G370f@quasi (list G3720@p) (- G3719@lev '1))))) G371e@ls/false) ((lambda (G3722@t) ((lambda (G3724@ls/false) (if G3724@ls/false (apply (lambda (G3726@p G3727@q) (if (= G3719@lev '0) (G3705@quasicons* G3726@p (G370f@quasi G3727@q G3719@lev)) (G3707@quasicons (G3707@quasicons (G36e7@datum 'unquote) (G370f@quasi G3726@p (- G3719@lev '1))) (G370f@quasi G3727@q G3719@lev)))) G3724@ls/false) ((lambda (G372a@t) ((lambda (G372c@ls/false) (if G372c@ls/false (apply (lambda (G372e@p G372f@q) (if (= G3719@lev '0) (G3709@quasiappend G372e@p (G370f@quasi G372f@q G3719@lev)) (G3707@quasicons (G3707@quasicons (G36e7@datum 'unquote-splicing) (G370f@quasi G372e@p (- G3719@lev '1))) (G370f@quasi G372f@q G3719@lev)))) G372c@ls/false) ((lambda (G3732@t) ((lambda (G3734@ls/false) (if G3734@ls/false (apply (lambda (G3736@p) (G3707@quasicons (G36e7@datum 'quasiquote) (G370f@quasi (list G3736@p) (+ G3719@lev '1)))) G3734@ls/false) ((lambda (G3738@t) ((lambda (G373a@ls/false) (if G373a@ls/false (apply (lambda (G373c@p G373d@q) (G3707@quasicons (G370f@quasi G373c@p G3719@lev) (G370f@quasi G373d@q G3719@lev))) G373a@ls/false) ((lambda (G3740@t) ((lambda (G3742@ls/false) (if (and G3742@ls/false (apply (lambda (G3744@x) (not (G2d21@stx? G3744@x))) G3742@ls/false)) (apply (lambda (G3746@x) (G370b@quasivector (G370d@vquasi G3746@x G3719@lev))) G3742@ls/false) ((lambda (G3748@t) ((lambda (G374a@ls/false) (if G374a@ls/false (apply (lambda (G374c@p) (list (G2ee2@scheme-stx 'quote) G374c@p)) G374a@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3748@t))) (G2f58@syntax-dispatch G3748@t 'any))) G3740@t))) (G2f58@syntax-dispatch G3740@t '#(vector each-any)))) G3738@t))) (G2f58@syntax-dispatch G3738@t '(any . any)))) G3732@t))) (G2f58@syntax-dispatch G3732@t '(#(scheme-id quasiquote) any)))) G372a@t))) (G2f58@syntax-dispatch G372a@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3722@t))) (G2f58@syntax-dispatch G3722@t '((#(scheme-id unquote) . each-any) . any)))) G371c@t))) (G2f58@syntax-dispatch G371c@t '(#(scheme-id unquote) any)))) G3718@p))) (lambda (G3710@x) ((lambda (G3712@t) ((lambda (G3714@ls/false) (if G3714@ls/false (apply (lambda (G3716@e) (G370f@quasi G3716@e '0)) G3714@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3712@t))) (G2f58@syntax-dispatch G3712@t '(_ any)))) G3710@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f48@quasisyntax-macro ((lambda () ((lambda (G37ed@quasi) (begin (set! G37ed@quasi (lambda (G3805@p G3806@lev) ((lambda (G3809@t) ((lambda (G380b@ls/false) (if G380b@ls/false (apply (lambda (G380d@p) (if (= G3806@lev '0) ((lambda (G380f@g) (values (list G380f@g) (list G380d@p) G380f@g)) (gensym)) (call-with-values (lambda () (G37ed@quasi G380d@p (- G3806@lev '1))) (lambda (G3814@G3811 G3815@G3812 G3816@G3813) ((lambda (G381a@p G381b@rhs* G381c@lhs*) (values G381c@lhs* G381b@rhs* (list 'unsyntax G381a@p))) G3816@G3813 G3815@G3812 G3814@G3811))))) G380b@ls/false) ((lambda (G3820@t) ((lambda (G3822@ls/false) (if (and G3822@ls/false (apply (lambda () (= G3806@lev '0)) G3822@ls/false)) (apply (lambda () (G3043@syntax-violation '#f '"incorrect use of unsyntax" G3805@p)) G3822@ls/false) ((lambda (G3824@t) ((lambda (G3826@ls/false) (if G3826@ls/false (apply (lambda (G3828@p* G3829@q) (call-with-values (lambda () (G37ed@quasi G3829@q G3806@lev)) (lambda (G382f@G382c G3830@G382d G3831@G382e) ((lambda (G3835@q G3836@rhs* G3837@lhs*) (if (= G3806@lev '0) ((lambda (G383b@g*) (values (append G383b@g* G3837@lhs*) (append G3828@p* G3836@rhs*) (append G383b@g* G3835@q))) (map (lambda (G383d@x) (gensym)) G3828@p*)) (call-with-values (lambda () (G37ed@quasi G3828@p* (- G3806@lev '1))) (lambda (G3842@G383f G3843@G3840 G3844@G3841) ((lambda (G3848@p* G3849@rhs2* G384a@lhs2*) (values (append G384a@lhs2* G3837@lhs*) (append G3849@rhs2* G3836@rhs*) (cons (cons 'unsyntax G3848@p*) G3835@q))) G3844@G3841 G3843@G3840 G3842@G383f))))) G3831@G382e G3830@G382d G382f@G382c)))) G3826@ls/false) ((lambda (G384e@t) ((lambda (G3850@ls/false) (if G3850@ls/false (apply (lambda (G3852@p* G3853@q) (call-with-values (lambda () (G37ed@quasi G3853@q G3806@lev)) (lambda (G3859@G3856 G385a@G3857 G385b@G3858) ((lambda (G385f@q G3860@rhs* G3861@lhs*) (if (= G3806@lev '0) ((lambda (G3865@g*) (values (append (map (lambda (G3867@g) (cons G3867@g '(...))) G3865@g*) G3861@lhs*) (append G3852@p* G3860@rhs*) (append (apply append (map (lambda (G3869@g) (cons G3869@g '(...))) G3865@g*)) G385f@q))) (map (lambda (G386b@x) (gensym)) G3852@p*)) (call-with-values (lambda () (G37ed@quasi G3852@p* (- G3806@lev '1))) (lambda (G3870@G386d G3871@G386e G3872@G386f) ((lambda (G3876@p* G3877@rhs2* G3878@lhs2*) (values (append G3878@lhs2* G3861@lhs*) (append G3877@rhs2* G3860@rhs*) (cons (cons 'unsyntax-splicing G3876@p*) G385f@q))) G3872@G386f G3871@G386e G3870@G386d))))) G385b@G3858 G385a@G3857 G3859@G3856)))) G3850@ls/false) ((lambda (G387c@t) ((lambda (G387e@ls/false) (if (and G387e@ls/false (apply (lambda () (= G3806@lev '0)) G387e@ls/false)) (apply (lambda () (G3043@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3805@p)) G387e@ls/false) ((lambda (G3880@t) ((lambda (G3882@ls/false) (if G3882@ls/false (apply (lambda (G3884@p) (call-with-values (lambda () (G37ed@quasi G3884@p (+ G3806@lev '1))) (lambda (G3889@G3886 G388a@G3887 G388b@G3888) ((lambda (G388f@p G3890@rhs* G3891@lhs*) (values G3891@lhs* G3890@rhs* (list 'quasisyntax G388f@p))) G388b@G3888 G388a@G3887 G3889@G3886)))) G3882@ls/false) ((lambda (G3895@t) ((lambda (G3897@ls/false) (if G3897@ls/false (apply (lambda (G3899@p G389a@q) (call-with-values (lambda () (G37ed@quasi G3899@p G3806@lev)) (lambda (G38a3@G389d G38a4@G389e G38a5@G389f) (call-with-values (lambda () (G37ed@quasi G389a@q G3806@lev)) (lambda (G38a9@G38a0 G38aa@G38a1 G38ab@G38a2) ((lambda (G38af@q G38b0@rhs2* G38b1@lhs2* G38b2@p G38b3@rhs* G38b4@lhs*) (values (append G38b1@lhs2* G38b4@lhs*) (append G38b0@rhs2* G38b3@rhs*) (cons G38b2@p G38af@q))) G38ab@G38a2 G38aa@G38a1 G38a9@G38a0 G38a5@G389f G38a4@G389e G38a3@G389d)))))) G3897@ls/false) ((lambda (G38bb@t) ((lambda (G38bd@ls/false) (if G38bd@ls/false (apply (lambda (G38bf@x*) (call-with-values (lambda () (G37ed@quasi G38bf@x* G3806@lev)) (lambda (G38c4@G38c1 G38c5@G38c2 G38c6@G38c3) ((lambda (G38ca@x* G38cb@rhs* G38cc@lhs*) (values G38cc@lhs* G38cb@rhs* (list->vector G38ca@x*))) G38c6@G38c3 G38c5@G38c2 G38c4@G38c1)))) G38bd@ls/false) ((lambda (G38d0@t) ((lambda (G38d2@ls/false) (if G38d2@ls/false (apply (lambda () (values '() '() G3805@p)) G38d2@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G38d0@t))) (G2f58@syntax-dispatch G38d0@t '_))) G38bb@t))) (G2f58@syntax-dispatch G38bb@t '#(vector each-any)))) G3895@t))) (G2f58@syntax-dispatch G3895@t '(any . any)))) G3880@t))) (G2f58@syntax-dispatch G3880@t '(#(scheme-id quasisyntax) any)))) G387c@t))) (G2f58@syntax-dispatch G387c@t '#(scheme-id unsyntax-splicing)))) G384e@t))) (G2f58@syntax-dispatch G384e@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3824@t))) (G2f58@syntax-dispatch G3824@t '((#(scheme-id unsyntax) . each-any) . any)))) G3820@t))) (G2f58@syntax-dispatch G3820@t '#(scheme-id unsyntax)))) G3809@t))) (G2f58@syntax-dispatch G3809@t '(#(scheme-id unsyntax) any)))) G3805@p))) (lambda (G37ee@x) ((lambda (G37f0@t) ((lambda (G37f2@ls/false) (if G37f2@ls/false (apply (lambda (G37f4@e) (call-with-values (lambda () (G37ed@quasi G37f4@e '0)) (lambda (G37f9@G37f6 G37fa@G37f7 G37fb@G37f8) ((lambda (G37ff@v G3800@rhs* G3801@lhs*) (G2f0e@bless (list 'syntax-case (cons 'list G3800@rhs*) '() (list G3801@lhs* (list 'syntax G37ff@v))))) G37fb@G37f8 G37fa@G37f7 G37f9@G37f6)))) G37f2@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G37f0@t))) (G2f58@syntax-dispatch G37f0@t '(_ any)))) G37ee@x)))) '#f)))) (set! G2f4a@define-struct-macro (lambda (G38d4@stx) (G3043@syntax-violation '#f '"define-struct not supported" G38d4@stx))) (set! G2f4c@define-record-type-macro (lambda (G38d6@x) ((lambda (G38d9@id G38db@get-record-name G38dd@get-record-constructor-name G38df@get-record-predicate-name G38e1@get-clause G38e3@foo-rtd-code G38e5@parent-rtd-code G38e7@parent-rcd-code G38e9@foo-rcd-code G38eb@get-protocol-code G38ed@get-fields G38ef@get-mutator-indices G38f1@get-mutators G38f3@get-accessors G38f5@enumerate G38f7@do-define-record G38f9@verify-clauses) (begin (set! G38d9@id (lambda (G3acc@ctxt . G3ace@str*) (G3047@datum->syntax G3acc@ctxt (string->symbol (apply string-append (map (lambda (G3ad0@x) (if (symbol? G3ad0@x) (symbol->string G3ad0@x) (if (string? G3ad0@x) G3ad0@x (assertion-violation 'define-record-type '"BUG")))) G3ace@str*)))))) (set! G38db@get-record-name (lambda (G3aba@spec) ((lambda (G3abc@t) ((lambda (G3abe@ls/false) (if G3abe@ls/false (apply (lambda (G3ac0@foo G3ac1@make-foo G3ac2@foo?) G3ac0@foo) G3abe@ls/false) ((lambda (G3ac6@t) ((lambda (G3ac8@ls/false) (if G3ac8@ls/false (apply (lambda (G3aca@foo) G3aca@foo) G3ac8@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3ac6@t))) (G2f58@syntax-dispatch G3ac6@t 'any))) G3abc@t))) (G2f58@syntax-dispatch G3abc@t '(any any any)))) G3aba@spec))) (set! G38dd@get-record-constructor-name (lambda (G3aa6@spec) ((lambda (G3aa8@t) ((lambda (G3aaa@ls/false) (if G3aaa@ls/false (apply (lambda (G3aac@foo G3aad@make-foo G3aae@foo?) G3aad@make-foo) G3aaa@ls/false) ((lambda (G3ab2@t) ((lambda (G3ab4@ls/false) (if (and G3ab4@ls/false (apply (lambda (G3ab6@foo) (G2d59@id? G3ab6@foo)) G3ab4@ls/false)) (apply (lambda (G3ab8@foo) (G38d9@id G3ab8@foo '"make-" (G2d6f@stx->datum G3ab8@foo))) G3ab4@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3ab2@t))) (G2f58@syntax-dispatch G3ab2@t 'any))) G3aa8@t))) (G2f58@syntax-dispatch G3aa8@t '(any any any)))) G3aa6@spec))) (set! G38df@get-record-predicate-name (lambda (G3a92@spec) ((lambda (G3a94@t) ((lambda (G3a96@ls/false) (if G3a96@ls/false (apply (lambda (G3a98@foo G3a99@make-foo G3a9a@foo?) G3a9a@foo?) G3a96@ls/false) ((lambda (G3a9e@t) ((lambda (G3aa0@ls/false) (if (and G3aa0@ls/false (apply (lambda (G3aa2@foo) (G2d59@id? G3aa2@foo)) G3aa0@ls/false)) (apply (lambda (G3aa4@foo) (G38d9@id G3aa4@foo (G2d6f@stx->datum G3aa4@foo) '"?")) G3aa0@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a9e@t))) (G2f58@syntax-dispatch G3a9e@t 'any))) G3a94@t))) (G2f58@syntax-dispatch G3a94@t '(any any any)))) G3a92@spec))) (set! G38e1@get-clause (lambda (G3a80@id G3a81@ls) ((lambda (G3a84@t) ((lambda (G3a86@ls/false) (if G3a86@ls/false (apply (lambda () '#f) G3a86@ls/false) ((lambda (G3a88@t) ((lambda (G3a8a@ls/false) (if G3a8a@ls/false (apply (lambda (G3a8c@x G3a8d@rest G3a8e@ls) (if (G2d61@free-id=? (G2f0e@bless G3a80@id) G3a8c@x) (cons G3a8c@x G3a8d@rest) (G38e1@get-clause G3a80@id G3a8e@ls))) G3a8a@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a88@t))) (G2f58@syntax-dispatch G3a88@t '((any . any) . any)))) G3a84@t))) (G2f58@syntax-dispatch G3a84@t '()))) G3a81@ls))) (set! G38e3@foo-rtd-code (lambda (G3a2e@name G3a2f@clause* G3a30@parent-rtd-code) ((lambda (G3a35@convert-field-spec*) (begin (set! G3a35@convert-field-spec* (lambda (G3a66@ls) (list->vector (map (lambda (G3a68@x) ((lambda (G3a6a@t) ((lambda (G3a6c@ls/false) (if G3a6c@ls/false (apply (lambda (G3a6e@name G3a6f@rest) (list 'mutable G3a6e@name)) G3a6c@ls/false) ((lambda (G3a72@t) ((lambda (G3a74@ls/false) (if G3a74@ls/false (apply (lambda (G3a76@name G3a77@rest) (list 'immutable G3a76@name)) G3a74@ls/false) ((lambda (G3a7a@t) ((lambda (G3a7c@ls/false) (if G3a7c@ls/false (apply (lambda (G3a7e@name) (list 'immutable G3a7e@name)) G3a7c@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a7a@t))) (G2f58@syntax-dispatch G3a7a@t 'any))) G3a72@t))) (G2f58@syntax-dispatch G3a72@t '(#(scheme-id immutable) any . any)))) G3a6a@t))) (G2f58@syntax-dispatch G3a6a@t '(#(scheme-id mutable) any . any)))) G3a68@x)) G3a66@ls)))) ((lambda (G3a36@uid-code G3a37@sealed? G3a38@opaque? G3a39@fields) (G2f0e@bless (list 'make-record-type-descriptor (list 'quote G3a2e@name) G3a30@parent-rtd-code G3a36@uid-code G3a37@sealed? G3a38@opaque? G3a39@fields))) ((lambda (G3a3e@t) ((lambda (G3a40@ls/false) (if G3a40@ls/false (apply (lambda () (list 'quote (gensym))) G3a40@ls/false) ((lambda (G3a42@t) ((lambda (G3a44@ls/false) (if G3a44@ls/false (apply (lambda (G3a46@uid) (list 'quote G3a46@uid)) G3a44@ls/false) ((lambda (G3a48@t) ((lambda (G3a4a@ls/false) (if G3a4a@ls/false (apply (lambda () '#f) G3a4a@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a48@t))) (G2f58@syntax-dispatch G3a48@t '_))) G3a42@t))) (G2f58@syntax-dispatch G3a42@t '(_ any)))) G3a3e@t))) (G2f58@syntax-dispatch G3a3e@t '(_)))) (G38e1@get-clause 'nongenerative G3a2f@clause*)) ((lambda (G3a4c@t) ((lambda (G3a4e@ls/false) (if G3a4e@ls/false (apply (lambda () '#t) G3a4e@ls/false) ((lambda (G3a50@t) ((lambda (G3a52@ls/false) (if G3a52@ls/false (apply (lambda () '#f) G3a52@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a50@t))) (G2f58@syntax-dispatch G3a50@t '_))) G3a4c@t))) (G2f58@syntax-dispatch G3a4c@t '(_ #(atom #t))))) (G38e1@get-clause 'sealed G3a2f@clause*)) ((lambda (G3a54@t) ((lambda (G3a56@ls/false) (if G3a56@ls/false (apply (lambda () '#t) G3a56@ls/false) ((lambda (G3a58@t) ((lambda (G3a5a@ls/false) (if G3a5a@ls/false (apply (lambda () '#f) G3a5a@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a58@t))) (G2f58@syntax-dispatch G3a58@t '_))) G3a54@t))) (G2f58@syntax-dispatch G3a54@t '(_ #(atom #t))))) (G38e1@get-clause 'opaque G3a2f@clause*)) ((lambda (G3a5c@t) ((lambda (G3a5e@ls/false) (if G3a5e@ls/false (apply (lambda (G3a60@field-spec*) (list 'quote (G3a35@convert-field-spec* G3a60@field-spec*))) G3a5e@ls/false) ((lambda (G3a62@t) ((lambda (G3a64@ls/false) (if G3a64@ls/false (apply (lambda () ''#()) G3a64@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a62@t))) (G2f58@syntax-dispatch G3a62@t '_))) G3a5c@t))) (G2f58@syntax-dispatch G3a5c@t '(_ . each-any)))) (G38e1@get-clause 'fields G3a2f@clause*))))) '#f))) (set! G38e5@parent-rtd-code (lambda (G3a16@clause*) ((lambda (G3a18@t) ((lambda (G3a1a@ls/false) (if G3a1a@ls/false (apply (lambda (G3a1c@name) (list 'record-type-descriptor G3a1c@name)) G3a1a@ls/false) ((lambda (G3a1e@t) ((lambda (G3a20@ls/false) (if G3a20@ls/false (apply (lambda () ((lambda (G3a22@t) ((lambda (G3a24@ls/false) (if G3a24@ls/false (apply (lambda (G3a26@rtd G3a27@rcd) G3a26@rtd) G3a24@ls/false) ((lambda (G3a2a@t) ((lambda (G3a2c@ls/false) (if G3a2c@ls/false (apply (lambda () '#f) G3a2c@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a2a@t))) (G2f58@syntax-dispatch G3a2a@t '#(atom #f)))) G3a22@t))) (G2f58@syntax-dispatch G3a22@t '(_ any any)))) (G38e1@get-clause 'parent-rtd G3a16@clause*))) G3a20@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a1e@t))) (G2f58@syntax-dispatch G3a1e@t '#(atom #f)))) G3a18@t))) (G2f58@syntax-dispatch G3a18@t '(_ any)))) (G38e1@get-clause 'parent G3a16@clause*)))) (set! G38e7@parent-rcd-code (lambda (G39fe@clause*) ((lambda (G3a00@t) ((lambda (G3a02@ls/false) (if G3a02@ls/false (apply (lambda (G3a04@name) (list 'record-constructor-descriptor G3a04@name)) G3a02@ls/false) ((lambda (G3a06@t) ((lambda (G3a08@ls/false) (if G3a08@ls/false (apply (lambda () ((lambda (G3a0a@t) ((lambda (G3a0c@ls/false) (if G3a0c@ls/false (apply (lambda (G3a0e@rtd G3a0f@rcd) G3a0f@rcd) G3a0c@ls/false) ((lambda (G3a12@t) ((lambda (G3a14@ls/false) (if G3a14@ls/false (apply (lambda () '#f) G3a14@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a12@t))) (G2f58@syntax-dispatch G3a12@t '#(atom #f)))) G3a0a@t))) (G2f58@syntax-dispatch G3a0a@t '(_ any any)))) (G38e1@get-clause 'parent-rtd G39fe@clause*))) G3a08@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3a06@t))) (G2f58@syntax-dispatch G3a06@t '#(atom #f)))) G3a00@t))) (G2f58@syntax-dispatch G3a00@t '(_ any)))) (G38e1@get-clause 'parent G39fe@clause*)))) (set! G38e9@foo-rcd-code (lambda (G39f6@clause* G39f7@foo-rtd G39f8@protocol G39f9@parent-rcd-code) (list 'make-record-constructor-descriptor G39f7@foo-rtd G39f9@parent-rcd-code G39f8@protocol))) (set! G38eb@get-protocol-code (lambda (G39ea@clause*) ((lambda (G39ec@t) ((lambda (G39ee@ls/false) (if G39ee@ls/false (apply (lambda (G39f0@expr) G39f0@expr) G39ee@ls/false) ((lambda (G39f2@t) ((lambda (G39f4@ls/false) (if G39f4@ls/false (apply (lambda () '#f) G39f4@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G39f2@t))) (G2f58@syntax-dispatch G39f2@t '_))) G39ec@t))) (G2f58@syntax-dispatch G39ec@t '(_ any)))) (G38e1@get-clause 'protocol G39ea@clause*)))) (set! G38ed@get-fields (lambda (G39d8@clause*) ((lambda (G39da@t) ((lambda (G39dc@ls/false) (if G39dc@ls/false (apply (lambda () '()) G39dc@ls/false) ((lambda (G39de@t) ((lambda (G39e0@ls/false) (if G39e0@ls/false (apply (lambda (G39e2@f*) G39e2@f*) G39e0@ls/false) ((lambda (G39e4@t) ((lambda (G39e6@ls/false) (if G39e6@ls/false (apply (lambda (G39e8@rest) (G38ed@get-fields G39e8@rest)) G39e6@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G39e4@t))) (G2f58@syntax-dispatch G39e4@t '(_ . any)))) G39de@t))) (G2f58@syntax-dispatch G39de@t '((#(scheme-id fields) . each-any) . _)))) G39da@t))) (G2f58@syntax-dispatch G39da@t '()))) G39d8@clause*))) (set! G38ef@get-mutator-indices (lambda (G39c0@fields) ((letrec ((G39c2@f (lambda (G39c4@fields G39c5@i) ((lambda (G39c8@t) ((lambda (G39ca@ls/false) (if G39ca@ls/false (apply (lambda () '()) G39ca@ls/false) ((lambda (G39cc@t) ((lambda (G39ce@ls/false) (if G39ce@ls/false (apply (lambda (G39d0@rest) (cons G39c5@i (G39c2@f G39d0@rest (+ G39c5@i '1)))) G39ce@ls/false) ((lambda (G39d2@t) ((lambda (G39d4@ls/false) (if G39d4@ls/false (apply (lambda (G39d6@rest) (G39c2@f G39d6@rest (+ G39c5@i '1))) G39d4@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G39d2@t))) (G2f58@syntax-dispatch G39d2@t '(_ . any)))) G39cc@t))) (G2f58@syntax-dispatch G39cc@t '((#(scheme-id mutable) . _) . any)))) G39c8@t))) (G2f58@syntax-dispatch G39c8@t '()))) G39c4@fields)))) G39c2@f) G39c0@fields '0))) (set! G38f1@get-mutators (lambda (G3996@foo G3997@fields) ((lambda (G399b@gen-name) (begin (set! G399b@gen-name (lambda (G39be@x) (G3047@datum->syntax G3996@foo (string->symbol (string-append (symbol->string (G3049@syntax->datum G3996@foo)) '"-" (symbol->string (G3049@syntax->datum G39be@x)) '"-set!"))))) ((letrec ((G399c@f (lambda (G399e@fields) ((lambda (G39a0@t) ((lambda (G39a2@ls/false) (if G39a2@ls/false (apply (lambda () '()) G39a2@ls/false) ((lambda (G39a4@t) ((lambda (G39a6@ls/false) (if G39a6@ls/false (apply (lambda (G39a8@name G39a9@accessor G39aa@mutator G39ab@rest) (cons G39aa@mutator (G399c@f G39ab@rest))) G39a6@ls/false) ((lambda (G39b0@t) ((lambda (G39b2@ls/false) (if G39b2@ls/false (apply (lambda (G39b4@name G39b5@rest) (cons (G399b@gen-name G39b4@name) (G399c@f G39b5@rest))) G39b2@ls/false) ((lambda (G39b8@t) ((lambda (G39ba@ls/false) (if G39ba@ls/false (apply (lambda (G39bc@rest) (G399c@f G39bc@rest)) G39ba@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G39b8@t))) (G2f58@syntax-dispatch G39b8@t '(_ . any)))) G39b0@t))) (G2f58@syntax-dispatch G39b0@t '((#(scheme-id mutable) any) . any)))) G39a4@t))) (G2f58@syntax-dispatch G39a4@t '((#(scheme-id mutable) any any any) . any)))) G39a0@t))) (G2f58@syntax-dispatch G39a0@t '()))) G399e@fields)))) G399c@f) G3997@fields))) '#f))) (set! G38f3@get-accessors (lambda (G3952@foo G3953@fields) ((lambda (G3957@gen-name) (begin (set! G3957@gen-name (lambda (G3994@x) (G3047@datum->syntax G3952@foo (string->symbol (string-append (symbol->string (G3049@syntax->datum G3952@foo)) '"-" (symbol->string (G3049@syntax->datum G3994@x))))))) (map (lambda (G3958@field) ((lambda (G395a@t) ((lambda (G395c@ls/false) (if (and G395c@ls/false (apply (lambda (G395e@name G395f@accessor G3960@mutator) (G2d59@id? G395f@accessor)) G395c@ls/false)) (apply (lambda (G3964@name G3965@accessor G3966@mutator) G3965@accessor) G395c@ls/false) ((lambda (G396a@t) ((lambda (G396c@ls/false) (if (and G396c@ls/false (apply (lambda (G396e@name G396f@accessor) (G2d59@id? G396f@accessor)) G396c@ls/false)) (apply (lambda (G3972@name G3973@accessor) G3973@accessor) G396c@ls/false) ((lambda (G3976@t) ((lambda (G3978@ls/false) (if (and G3978@ls/false (apply (lambda (G397a@name) (G2d59@id? G397a@name)) G3978@ls/false)) (apply (lambda (G397c@name) (G3957@gen-name G397c@name)) G3978@ls/false) ((lambda (G397e@t) ((lambda (G3980@ls/false) (if (and G3980@ls/false (apply (lambda (G3982@name) (G2d59@id? G3982@name)) G3980@ls/false)) (apply (lambda (G3984@name) (G3957@gen-name G3984@name)) G3980@ls/false) ((lambda (G3986@t) ((lambda (G3988@ls/false) (if (and G3988@ls/false (apply (lambda (G398a@name) (G2d59@id? G398a@name)) G3988@ls/false)) (apply (lambda (G398c@name) (G3957@gen-name G398c@name)) G3988@ls/false) ((lambda (G398e@t) ((lambda (G3990@ls/false) (if G3990@ls/false (apply (lambda (G3992@others) (G3043@syntax-violation '#f '"invalid field spec" G3958@field)) G3990@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G398e@t))) (G2f58@syntax-dispatch G398e@t 'any))) G3986@t))) (G2f58@syntax-dispatch G3986@t 'any))) G397e@t))) (G2f58@syntax-dispatch G397e@t '(#(scheme-id immutable) any)))) G3976@t))) (G2f58@syntax-dispatch G3976@t '(#(scheme-id mutable) any)))) G396a@t))) (G2f58@syntax-dispatch G396a@t '(#(scheme-id immutable) any any)))) G395a@t))) (G2f58@syntax-dispatch G395a@t '(#(scheme-id mutable) any any any)))) G3958@field)) G3953@fields))) '#f))) (set! G38f5@enumerate (lambda (G394a@ls) ((letrec ((G394c@f (lambda (G394e@ls G394f@i) (if (null? G394e@ls) '() (cons G394f@i (G394c@f (cdr G394e@ls) (+ G394f@i '1))))))) G394c@f) G394a@ls '0))) (set! G38f7@do-define-record (lambda (G3922@namespec G3923@clause*) ((lambda (G3926@foo) ((lambda (G3928@foo-rtd) ((lambda (G392a@foo-rcd) ((lambda (G392c@protocol) ((lambda (G392e@make-foo) ((lambda (G3930@fields) ((lambda (G3932@idx*) ((lambda (G3934@foo-x*) ((lambda (G3936@set-foo-x!*) ((lambda (G3938@set-foo-idx*) ((lambda (G393a@foo?) ((lambda (G393c@foo-rtd-code) ((lambda (G393e@foo-rcd-code) ((lambda (G3940@protocol-code) ((lambda () (G2f0e@bless (cons 'begin (cons (list 'define G3928@foo-rtd G393c@foo-rtd-code) (cons (list 'define G392c@protocol G3940@protocol-code) (cons (list 'define G392a@foo-rcd G393e@foo-rcd-code) (cons (list 'define-syntax G3926@foo (list 'list ''$rtd (list 'syntax G3928@foo-rtd) (list 'syntax G392a@foo-rcd))) (cons (list 'define G393a@foo? (list 'record-predicate G3928@foo-rtd)) (cons (list 'define G392e@make-foo (list 'record-constructor G392a@foo-rcd)) (append (map (lambda (G3942@foo-x G3943@idx) (list 'define G3942@foo-x (list 'record-accessor G3928@foo-rtd G3943@idx))) G3934@foo-x* G3932@idx*) (map (lambda (G3946@set-foo-x! G3947@idx) (list 'define G3946@set-foo-x! (list 'record-mutator G3928@foo-rtd G3947@idx))) G3936@set-foo-x!* G3938@set-foo-idx*))))))))))))) (G38eb@get-protocol-code G3923@clause*))) (G38e9@foo-rcd-code G3923@clause* G3928@foo-rtd G392c@protocol (G38e7@parent-rcd-code G3923@clause*)))) (G38e3@foo-rtd-code G3926@foo G3923@clause* (G38e5@parent-rtd-code G3923@clause*)))) (G38df@get-record-predicate-name G3922@namespec))) (G38ef@get-mutator-indices G3930@fields))) (G38f1@get-mutators G3926@foo G3930@fields))) (G38f3@get-accessors G3926@foo G3930@fields))) (G38f5@enumerate G3930@fields))) (G38ed@get-fields G3923@clause*))) (G38dd@get-record-constructor-name G3922@namespec))) (gensym))) (gensym))) (gensym))) (G38db@get-record-name G3922@namespec)))) (set! G38f9@verify-clauses (lambda (G3902@x G3903@cls*) ((lambda (G3907@valid-kwds G3909@free-id-member?) (begin (set! G3907@valid-kwds (map G2f0e@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3909@free-id-member? (lambda (G391e@x G391f@ls) (and (pair? G391f@ls) (or (G2d61@free-id=? G391e@x (car G391f@ls)) (G3909@free-id-member? G391e@x (cdr G391f@ls)))))) ((letrec ((G390a@f (lambda (G390c@cls* G390d@seen*) (if (not (null? G390c@cls*)) ((lambda (G3910@t) ((lambda (G3912@ls/false) (if G3912@ls/false (apply (lambda (G3914@kwd G3915@rest) (if (or (not (G2d59@id? G3914@kwd)) (not (G3909@free-id-member? G3914@kwd G3907@valid-kwds))) (G3043@syntax-violation '#f '"not a valid define-record-type keyword" G3914@kwd) (if (G2d67@bound-id-member? G3914@kwd G390d@seen*) (G3043@syntax-violation '#f '"duplicate use of keyword " G3902@x G3914@kwd) (G390a@f (cdr G390c@cls*) (cons G3914@kwd G390d@seen*))))) G3912@ls/false) ((lambda (G3918@t) ((lambda (G391a@ls/false) (if G391a@ls/false (apply (lambda (G391c@cls) (G3043@syntax-violation '#f '"malformed define-record-type clause" G391c@cls)) G391a@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3918@t))) (G2f58@syntax-dispatch G3918@t 'any))) G3910@t))) (G2f58@syntax-dispatch G3910@t '(any . any)))) (car G390c@cls*)) (void))))) G390a@f) G3903@cls* '()))) '#f '#f))) ((lambda (G38fa@t) ((lambda (G38fc@ls/false) (if G38fc@ls/false (apply (lambda (G38fe@namespec G38ff@clause*) (begin (G38f9@verify-clauses G38d6@x G38ff@clause*) (G38f7@do-define-record G38fe@namespec G38ff@clause*))) G38fc@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G38fa@t))) (G2f58@syntax-dispatch G38fa@t '(_ any . each-any)))) G38d6@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f4e@define-condition-type-macro (lambda (G3ad2@x) ((lambda (G3ad5@mkname) (begin (set! G3ad5@mkname (lambda (G3b02@name G3b03@suffix) (G3047@datum->syntax G3b02@name (string->symbol (string-append (symbol->string (G3049@syntax->datum G3b02@name)) G3b03@suffix))))) ((lambda (G3ad6@t) ((lambda (G3ad8@ls/false) (if (and G3ad8@ls/false (apply (lambda (G3ada@ctxt G3adb@name G3adc@super G3add@constructor G3ade@predicate G3adf@field* G3ae0@accessor*) (and (G2d59@id? G3adb@name) (G2d59@id? G3adc@super) (G2d59@id? G3add@constructor) (G2d59@id? G3ade@predicate) (for-all G2d59@id? G3adf@field*) (for-all G2d59@id? G3ae0@accessor*))) G3ad8@ls/false)) (apply (lambda (G3ae8@ctxt G3ae9@name G3aea@super G3aeb@constructor G3aec@predicate G3aed@field* G3aee@accessor*) ((lambda (G3af6@aux-accessor*) (G2f0e@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3ae9@name G3aeb@constructor (gensym)) (cons (list 'parent G3aea@super) (cons (cons 'fields (map (lambda (G3af8@field G3af9@aux) (list 'immutable G3af8@field G3af9@aux)) G3aed@field* G3af6@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3aec@predicate (list 'condition-predicate (list 'record-type-descriptor G3ae9@name))) (map (lambda (G3afc@accessor G3afd@aux) (list 'define G3afc@accessor (list 'condition-accessor (list 'record-type-descriptor G3ae9@name) G3afd@aux))) G3aee@accessor* G3af6@aux-accessor*)))))) (map (lambda (G3b00@x) (gensym)) G3aee@accessor*))) G3ad8@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3ad6@t))) (G2f58@syntax-dispatch G3ad6@t '(any any any any any . #(each (any any)))))) G3ad2@x))) '#f))) (set! G2f50@incorrect-usage-macro (lambda (G3b06@e) (G3043@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b06@e))) (set! G2f52@parameterize-macro (lambda (G3b08@e) ((lambda (G3b0a@t) ((lambda (G3b0c@ls/false) (if G3b0c@ls/false (apply (lambda (G3b0e@b G3b0f@b*) (G2f0e@bless (cons 'let (cons '() (cons G3b0e@b G3b0f@b*))))) G3b0c@ls/false) ((lambda (G3b12@t) ((lambda (G3b14@ls/false) (if G3b14@ls/false (apply (lambda (G3b16@olhs* G3b17@orhs* G3b18@b G3b19@b*) ((lambda (G3b1e@lhs* G3b1f@rhs*) (G2f0e@bless (cons (list 'lambda (append G3b1e@lhs* G3b1f@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b22@lhs G3b23@rhs) (list 'let (list (list 't (list G3b22@lhs))) (list G3b22@lhs G3b23@rhs) (cons 'set! (cons G3b23@rhs '(t))))) G3b1e@lhs* G3b1f@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b18@b G3b19@b*))) '(swap)))))) (append G3b16@olhs* G3b17@orhs*)))) (G3031@generate-temporaries G3b16@olhs*) (G3031@generate-temporaries G3b17@orhs*))) G3b14@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3b12@t))) (G2f58@syntax-dispatch G3b12@t '(_ #(each (any any)) any . each-any)))) G3b0a@t))) (G2f58@syntax-dispatch G3b0a@t '(_ () any . each-any)))) G3b08@e))) (set! G2f54@foreign-call-transformer (lambda (G3b26@e G3b27@r G3b28@mr) ((lambda (G3b2c@t) ((lambda (G3b2e@ls/false) (if G3b2e@ls/false (apply (lambda (G3b30@name G3b31@arg*) (cons 'foreign-call (cons (G2f7c@chi-expr G3b30@name G3b27@r G3b28@mr) (G2f78@chi-expr* G3b31@arg* G3b27@r G3b28@mr)))) G3b2e@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3b2c@t))) (G2f58@syntax-dispatch G3b2c@t '(_ any . each-any)))) G3b26@e))) (set! G2f56@convert-pattern (lambda (G3b34@pattern G3b35@keys) ((lambda (G3b39@cvt* G3b3b@cvt) (begin (set! G3b39@cvt* (lambda (G3bca@p* G3bcb@n G3bcc@ids) (if (null? G3bca@p*) (values '() G3bcc@ids) (call-with-values (lambda () (G3b39@cvt* (cdr G3bca@p*) G3bcb@n G3bcc@ids)) (lambda (G3bd2@G3bd0 G3bd3@G3bd1) ((lambda (G3bd6@ids G3bd7@y) (call-with-values (lambda () (G3b3b@cvt (car G3bca@p*) G3bcb@n G3bd6@ids)) (lambda (G3bdc@G3bda G3bdd@G3bdb) ((lambda (G3be0@ids G3be1@x) (values (cons G3be1@x G3bd7@y) G3be0@ids)) G3bdd@G3bdb G3bdc@G3bda)))) G3bd3@G3bd1 G3bd2@G3bd0)))))) (set! G3b3b@cvt (lambda (G3b3c@p G3b3d@n G3b3e@ids) ((lambda (G3b42@t) ((lambda (G3b44@ls/false) (if (and G3b44@ls/false (apply (lambda (G3b46@id) (G2d59@id? G3b46@id)) G3b44@ls/false)) (apply (lambda (G3b48@id) (if (G2d67@bound-id-member? G3b3c@p G3b35@keys) (values (vector 'free-id G3b3c@p) G3b3e@ids) (if (G2d61@free-id=? G3b3c@p (G2ee2@scheme-stx '_)) (values '_ G3b3e@ids) (values 'any (cons (cons G3b3c@p G3b3d@n) G3b3e@ids))))) G3b44@ls/false) ((lambda (G3b4a@t) ((lambda (G3b4c@ls/false) (if (and G3b4c@ls/false (apply (lambda (G3b4e@p G3b4f@dots) (G2f5a@ellipsis? G3b4f@dots)) G3b4c@ls/false)) (apply (lambda (G3b52@p G3b53@dots) (call-with-values (lambda () (G3b3b@cvt G3b52@p (+ G3b3d@n '1) G3b3e@ids)) (lambda (G3b58@G3b56 G3b59@G3b57) ((lambda (G3b5c@ids G3b5d@p) (values (if (eq? G3b5d@p 'any) 'each-any (vector 'each G3b5d@p)) G3b5c@ids)) G3b59@G3b57 G3b58@G3b56)))) G3b4c@ls/false) ((lambda (G3b60@t) ((lambda (G3b62@ls/false) (if (and G3b62@ls/false (apply (lambda (G3b64@x G3b65@dots G3b66@ys G3b67@z) (G2f5a@ellipsis? G3b65@dots)) G3b62@ls/false)) (apply (lambda (G3b6c@x G3b6d@dots G3b6e@ys G3b6f@z) (call-with-values (lambda () (G3b3b@cvt G3b6f@z G3b3d@n G3b3e@ids)) (lambda (G3b76@G3b74 G3b77@G3b75) ((lambda (G3b7a@ids G3b7b@z) (call-with-values (lambda () (G3b39@cvt* G3b6e@ys G3b3d@n G3b7a@ids)) (lambda (G3b80@G3b7e G3b81@G3b7f) ((lambda (G3b84@ids G3b85@ys) (call-with-values (lambda () (G3b3b@cvt G3b6c@x (+ G3b3d@n '1) G3b84@ids)) (lambda (G3b8a@G3b88 G3b8b@G3b89) ((lambda (G3b8e@ids G3b8f@x) (values (vector 'each+ G3b8f@x (reverse G3b85@ys) G3b7b@z) G3b8e@ids)) G3b8b@G3b89 G3b8a@G3b88)))) G3b81@G3b7f G3b80@G3b7e)))) G3b77@G3b75 G3b76@G3b74)))) G3b62@ls/false) ((lambda (G3b92@t) ((lambda (G3b94@ls/false) (if G3b94@ls/false (apply (lambda (G3b96@x G3b97@y) (call-with-values (lambda () (G3b3b@cvt G3b97@y G3b3d@n G3b3e@ids)) (lambda (G3b9c@G3b9a G3b9d@G3b9b) ((lambda (G3ba0@ids G3ba1@y) (call-with-values (lambda () (G3b3b@cvt G3b96@x G3b3d@n G3ba0@ids)) (lambda (G3ba6@G3ba4 G3ba7@G3ba5) ((lambda (G3baa@ids G3bab@x) (values (cons G3bab@x G3ba1@y) G3baa@ids)) G3ba7@G3ba5 G3ba6@G3ba4)))) G3b9d@G3b9b G3b9c@G3b9a)))) G3b94@ls/false) ((lambda (G3bae@t) ((lambda (G3bb0@ls/false) (if G3bb0@ls/false (apply (lambda () (values '() G3b3e@ids)) G3bb0@ls/false) ((lambda (G3bb2@t) ((lambda (G3bb4@ls/false) (if (and G3bb4@ls/false (apply (lambda (G3bb6@p) (not (G2d21@stx? G3bb6@p))) G3bb4@ls/false)) (apply (lambda (G3bb8@p) (call-with-values (lambda () (G3b3b@cvt G3bb8@p G3b3d@n G3b3e@ids)) (lambda (G3bbc@G3bba G3bbd@G3bbb) ((lambda (G3bc0@ids G3bc1@p) (values (vector 'vector G3bc1@p) G3bc0@ids)) G3bbd@G3bbb G3bbc@G3bba)))) G3bb4@ls/false) ((lambda (G3bc4@t) ((lambda (G3bc6@ls/false) (if G3bc6@ls/false (apply (lambda (G3bc8@datum) (values (vector 'atom (G2d6f@stx->datum G3bc8@datum)) G3b3e@ids)) G3bc6@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3bc4@t))) (G2f58@syntax-dispatch G3bc4@t 'any))) G3bb2@t))) (G2f58@syntax-dispatch G3bb2@t '#(vector each-any)))) G3bae@t))) (G2f58@syntax-dispatch G3bae@t '()))) G3b92@t))) (G2f58@syntax-dispatch G3b92@t '(any . any)))) G3b60@t))) (G2f58@syntax-dispatch G3b60@t '(any any . #(each+ any () any))))) G3b4a@t))) (G2f58@syntax-dispatch G3b4a@t '(any any)))) G3b42@t))) (G2f58@syntax-dispatch G3b42@t 'any))) G3b3c@p))) (G3b3b@cvt G3b34@pattern '0 '()))) '#f '#f))) (set! G2f58@syntax-dispatch ((lambda () ((lambda (G3be5@stx^ G3be7@match-each G3be9@match-each+ G3beb@match-each-any G3bed@match-empty G3bef@combine G3bf1@match* G3bf3@match) (begin (set! G3be5@stx^ (lambda (G3cae@e G3caf@m* G3cb0@s* G3cb1@ae*) (if (and (null? G3caf@m*) (null? G3cb0@s*) (null? G3cb1@ae*)) G3cae@e (G2d41@mkstx G3cae@e G3caf@m* G3cb0@s* G3cb1@ae*)))) (set! G3be7@match-each (lambda (G3c91@e G3c92@p G3c93@m* G3c94@s* G3c95@ae*) (if (pair? G3c91@e) ((lambda (G3c9b@first) (and G3c9b@first ((lambda (G3c9d@rest) (and G3c9d@rest (cons G3c9b@first G3c9d@rest))) (G3be7@match-each (cdr G3c91@e) G3c92@p G3c93@m* G3c94@s* G3c95@ae*)))) (G3bf3@match (car G3c91@e) G3c92@p G3c93@m* G3c94@s* G3c95@ae* '())) (if (null? G3c91@e) '() (if (G2d21@stx? G3c91@e) (and (not (G2cd3@top-marked? G3c93@m*)) (call-with-values (lambda () (G2d3f@join-wraps G3c93@m* G3c94@s* G3c95@ae* G3c91@e)) (lambda (G3ca2@G3c9f G3ca3@G3ca0 G3ca4@G3ca1) ((lambda (G3ca8@ae* G3ca9@s* G3caa@m*) (G3be7@match-each (G2d25@stx-expr G3c91@e) G3c92@p G3caa@m* G3ca9@s* G3ca8@ae*)) G3ca4@G3ca1 G3ca3@G3ca0 G3ca2@G3c9f)))) (if (G28ea@G2815@annotation? G3c91@e) (G3be7@match-each (G28ec@G2819@annotation-expression G3c91@e) G3c92@p G3c93@m* G3c94@s* G3c95@ae*) '#f)))))) (set! G3be9@match-each+ (lambda (G3c57@e G3c58@x-pat G3c59@y-pat G3c5a@z-pat G3c5b@m* G3c5c@s* G3c5d@ae* G3c5e@r) ((letrec ((G3c67@f (lambda (G3c69@e G3c6a@m* G3c6b@s* G3c6c@ae*) (if (pair? G3c69@e) (call-with-values (lambda () (G3c67@f (cdr G3c69@e) G3c6a@m* G3c6b@s* G3c6c@ae*)) (lambda (G3c74@G3c71 G3c75@G3c72 G3c76@G3c73) ((lambda (G3c7a@r G3c7b@y-pat G3c7c@xr*) (if G3c7a@r (if (null? G3c7b@y-pat) ((lambda (G3c80@xr) (if G3c80@xr (values (cons G3c80@xr G3c7c@xr*) G3c7b@y-pat G3c7a@r) (values '#f '#f '#f))) (G3bf3@match (car G3c69@e) G3c58@x-pat G3c6a@m* G3c6b@s* G3c6c@ae* '())) (values '() (cdr G3c7b@y-pat) (G3bf3@match (car G3c69@e) (car G3c7b@y-pat) G3c6a@m* G3c6b@s* G3c6c@ae* G3c7a@r))) (values '#f '#f '#f))) G3c76@G3c73 G3c75@G3c72 G3c74@G3c71))) (if (G2d21@stx? G3c69@e) (if (G2cd3@top-marked? G3c6a@m*) (values '() G3c59@y-pat (G3bf3@match G3c69@e G3c5a@z-pat G3c6a@m* G3c6b@s* G3c6c@ae* G3c5e@r)) (call-with-values (lambda () (G2d3f@join-wraps G3c6a@m* G3c6b@s* G3c6c@ae* G3c69@e)) (lambda (G3c85@G3c82 G3c86@G3c83 G3c87@G3c84) ((lambda (G3c8b@ae* G3c8c@s* G3c8d@m*) (G3c67@f (G2d25@stx-expr G3c69@e) G3c8d@m* G3c8c@s* G3c8b@ae*)) G3c87@G3c84 G3c86@G3c83 G3c85@G3c82)))) (if (G28ea@G2815@annotation? G3c69@e) (G3c67@f (G28ec@G2819@annotation-expression G3c69@e) G3c6a@m* G3c6b@s* G3c6c@ae*) (values '() G3c59@y-pat (G3bf3@match G3c69@e G3c5a@z-pat G3c6a@m* G3c6b@s* G3c6c@ae* G3c5e@r)))))))) G3c67@f) G3c57@e G3c5b@m* G3c5c@s* G3c5d@ae*))) (set! G3beb@match-each-any (lambda (G3c3e@e G3c3f@m* G3c40@s* G3c41@ae*) (if (pair? G3c3e@e) ((lambda (G3c46@l) (and G3c46@l (cons (G3be5@stx^ (car G3c3e@e) G3c3f@m* G3c40@s* G3c41@ae*) G3c46@l))) (G3beb@match-each-any (cdr G3c3e@e) G3c3f@m* G3c40@s* G3c41@ae*)) (if (null? G3c3e@e) '() (if (G2d21@stx? G3c3e@e) (and (not (G2cd3@top-marked? G3c3f@m*)) (call-with-values (lambda () (G2d3f@join-wraps G3c3f@m* G3c40@s* G3c41@ae* G3c3e@e)) (lambda (G3c4b@G3c48 G3c4c@G3c49 G3c4d@G3c4a) ((lambda (G3c51@ae* G3c52@s* G3c53@m*) (G3beb@match-each-any (G2d25@stx-expr G3c3e@e) G3c53@m* G3c52@s* G3c51@ae*)) G3c4d@G3c4a G3c4c@G3c49 G3c4b@G3c48)))) (if (G28ea@G2815@annotation? G3c3e@e) (G3beb@match-each-any (G28ec@G2819@annotation-expression G3c3e@e) G3c3f@m* G3c40@s* G3c41@ae*) '#f)))))) (set! G3bed@match-empty (lambda (G3c38@p G3c39@r) (if (null? G3c38@p) G3c39@r (if (eq? G3c38@p '_) G3c39@r (if (eq? G3c38@p 'any) (cons '() G3c39@r) (if (pair? G3c38@p) (G3bed@match-empty (car G3c38@p) (G3bed@match-empty (cdr G3c38@p) G3c39@r)) (if (eq? G3c38@p 'each-any) (cons '() G3c39@r) ((lambda (G3c3c@t) (if (memv G3c3c@t '(each)) (G3bed@match-empty (vector-ref G3c38@p '1) G3c39@r) (if (memv G3c3c@t '(each+)) (G3bed@match-empty (vector-ref G3c38@p '1) (G3bed@match-empty (reverse (vector-ref G3c38@p '2)) (G3bed@match-empty (vector-ref G3c38@p '3) G3c39@r))) (if (memv G3c3c@t '(free-id atom)) G3c39@r (if (memv G3c3c@t '(scheme-id atom)) G3c39@r (if (memv G3c3c@t '(vector)) (G3bed@match-empty (vector-ref G3c38@p '1) G3c39@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c38@p))))))) (vector-ref G3c38@p '0))))))))) (set! G3bef@combine (lambda (G3c34@r* G3c35@r) (if (null? (car G3c34@r*)) G3c35@r (cons (map car G3c34@r*) (G3bef@combine (map cdr G3c34@r*) G3c35@r))))) (set! G3bf1@match* (lambda (G3c13@e G3c14@p G3c15@m* G3c16@s* G3c17@ae* G3c18@r) (if (null? G3c14@p) (and (null? G3c13@e) G3c18@r) (if (pair? G3c14@p) (and (pair? G3c13@e) (G3bf3@match (car G3c13@e) (car G3c14@p) G3c15@m* G3c16@s* G3c17@ae* (G3bf3@match (cdr G3c13@e) (cdr G3c14@p) G3c15@m* G3c16@s* G3c17@ae* G3c18@r))) (if (eq? G3c14@p 'each-any) ((lambda (G3c1f@l) (and G3c1f@l (cons G3c1f@l G3c18@r))) (G3beb@match-each-any G3c13@e G3c15@m* G3c16@s* G3c17@ae*)) ((lambda (G3c21@t) (if (memv G3c21@t '(each)) (if (null? G3c13@e) (G3bed@match-empty (vector-ref G3c14@p '1) G3c18@r) ((lambda (G3c23@r*) (and G3c23@r* (G3bef@combine G3c23@r* G3c18@r))) (G3be7@match-each G3c13@e (vector-ref G3c14@p '1) G3c15@m* G3c16@s* G3c17@ae*))) (if (memv G3c21@t '(free-id)) (and (symbol? G3c13@e) (G2cd3@top-marked? G3c15@m*) (G2d61@free-id=? (G3be5@stx^ G3c13@e G3c15@m* G3c16@s* G3c17@ae*) (vector-ref G3c14@p '1)) G3c18@r) (if (memv G3c21@t '(scheme-id)) (and (symbol? G3c13@e) (G2cd3@top-marked? G3c15@m*) (G2d61@free-id=? (G3be5@stx^ G3c13@e G3c15@m* G3c16@s* G3c17@ae*) (G2ee2@scheme-stx (vector-ref G3c14@p '1))) G3c18@r) (if (memv G3c21@t '(each+)) (call-with-values (lambda () (G3be9@match-each+ G3c13@e (vector-ref G3c14@p '1) (vector-ref G3c14@p '2) (vector-ref G3c14@p '3) G3c15@m* G3c16@s* G3c17@ae* G3c18@r)) (lambda (G3c28@G3c25 G3c29@G3c26 G3c2a@G3c27) ((lambda (G3c2e@r G3c2f@y-pat G3c30@xr*) (and G3c2e@r (null? G3c2f@y-pat) (if (null? G3c30@xr*) (G3bed@match-empty (vector-ref G3c14@p '1) G3c2e@r) (G3bef@combine G3c30@xr* G3c2e@r)))) G3c2a@G3c27 G3c29@G3c26 G3c28@G3c25))) (if (memv G3c21@t '(atom)) (and (fast-equal? (vector-ref G3c14@p '1) (G2d6d@strip G3c13@e G3c15@m*)) G3c18@r) (if (memv G3c21@t '(vector)) (and (vector? G3c13@e) (G3bf3@match (vector->list G3c13@e) (vector-ref G3c14@p '1) G3c15@m* G3c16@s* G3c17@ae* G3c18@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c14@p)))))))) (vector-ref G3c14@p '0))))))) (set! G3bf3@match (lambda (G3bf8@e G3bf9@p G3bfa@m* G3bfb@s* G3bfc@ae* G3bfd@r) (if (not G3bfd@r) '#f (if (eq? G3bf9@p '_) G3bfd@r (if (eq? G3bf9@p 'any) (cons (G3be5@stx^ G3bf8@e G3bfa@m* G3bfb@s* G3bfc@ae*) G3bfd@r) (if (G2d21@stx? G3bf8@e) (and (not (G2cd3@top-marked? G3bfa@m*)) (call-with-values (lambda () (G2d3f@join-wraps G3bfa@m* G3bfb@s* G3bfc@ae* G3bf8@e)) (lambda (G3c07@G3c04 G3c08@G3c05 G3c09@G3c06) ((lambda (G3c0d@ae* G3c0e@s* G3c0f@m*) (G3bf3@match (G2d25@stx-expr G3bf8@e) G3bf9@p G3c0f@m* G3c0e@s* G3c0d@ae* G3bfd@r)) G3c09@G3c06 G3c08@G3c05 G3c07@G3c04)))) (if (G28ea@G2815@annotation? G3bf8@e) (G3bf3@match (G28ec@G2819@annotation-expression G3bf8@e) G3bf9@p G3bfa@m* G3bfb@s* G3bfc@ae* G3bfd@r) (G3bf1@match* G3bf8@e G3bf9@p G3bfa@m* G3bfb@s* G3bfc@ae* G3bfd@r)))))))) (lambda (G3bf4@e G3bf5@p) (G3bf3@match G3bf4@e G3bf5@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f5a@ellipsis? (lambda (G3cb6@x) (and (G2d59@id? G3cb6@x) (G2d61@free-id=? G3cb6@x (G2ee2@scheme-stx '...))))) (set! G2f5c@underscore? (lambda (G3cb8@x) (and (G2d59@id? G3cb8@x) (G2d61@free-id=? G3cb8@x (G2ee2@scheme-stx '_))))) (set! G2f5e@verify-literals (lambda (G3cba@lits G3cbb@expr) (for-each (lambda (G3cbe@x) (if (or (not (G2d59@id? G3cbe@x)) (G2f5a@ellipsis? G3cbe@x) (G2f5c@underscore? G3cbe@x)) (G3043@syntax-violation '#f '"invalid literal" G3cbb@expr G3cbe@x) (void))) G3cba@lits))) (set! G2f60@syntax-case-transformer ((lambda () ((lambda (G3cc1@build-dispatch-call G3cc3@invalid-ids-error G3cc5@gen-clause G3cc7@gen-syntax-case) (begin (set! G3cc1@build-dispatch-call (lambda (G3d30@pvars G3d31@expr G3d32@y G3d33@r G3d34@mr) ((lambda (G3d3a@ids G3d3b@levels) ((lambda (G3d3e@labels G3d3f@new-vars) ((lambda (G3d42@body) (list '(primitive apply) (G2cb3@G2bf1@build-lambda '#f G3d3f@new-vars G3d42@body) G3d32@y)) (G2f7c@chi-expr (G2d45@add-subst (G2d14@make-full-rib G3d3a@ids G3d3e@labels) G3d31@expr) (append (map (lambda (G3d44@label G3d45@var G3d46@level) (cons G3d44@label (G2d79@make-binding 'syntax (cons G3d45@var G3d46@level)))) G3d3e@labels G3d3f@new-vars (map cdr G3d30@pvars)) G3d33@r) G3d34@mr))) (map G2cd9@gen-label G3d3a@ids) (map G2cd5@gen-lexical G3d3a@ids))) (map car G3d30@pvars) (map cdr G3d30@pvars)))) (set! G3cc3@invalid-ids-error (lambda (G3d24@id* G3d25@e G3d26@class) ((letrec ((G3d2a@find (lambda (G3d2c@id* G3d2d@ok*) (if (null? G3d2c@id*) (G3043@syntax-violation '#f '"invalid syntax" G3d25@e) (if (G2d59@id? (car G3d2c@id*)) (if (G2d67@bound-id-member? (car G3d2c@id*) G3d2d@ok*) (G303f@syntax-error (car G3d2c@id*) '"duplicate " G3d26@class) (G3d2a@find (cdr G3d2c@id*) (cons (car G3d2c@id*) G3d2d@ok*))) (G303f@syntax-error (car G3d2c@id*) '"invalid " G3d26@class)))))) G3d2a@find) G3d24@id* '()))) (set! G3cc5@gen-clause (lambda (G3cfe@x G3cff@keys G3d00@clauses G3d01@r G3d02@mr G3d03@pat G3d04@fender G3d05@expr) (call-with-values (lambda () (G2f56@convert-pattern G3d03@pat G3cff@keys)) (lambda (G3d10@G3d0e G3d11@G3d0f) ((lambda (G3d14@pvars G3d15@p) (if (not (G2d65@distinct-bound-ids? (map car G3d14@pvars))) (G3cc3@invalid-ids-error (map car G3d14@pvars) G3d03@pat '"pattern variable") (if (not (for-all (lambda (G3d18@x) (not (G2f5a@ellipsis? (car G3d18@x)))) G3d14@pvars)) (G3043@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d03@pat) ((lambda (G3d1a@y) ((lambda (G3d1c@test) ((lambda (G3d1e@conseq) ((lambda (G3d20@altern) (list (G2cb3@G2bf1@build-lambda '#f (list G3d1a@y) (list 'if G3d1c@test G3d1e@conseq G3d20@altern)) (list '(primitive syntax-dispatch) G3cfe@x (list 'quote G3d15@p)))) (G3cc7@gen-syntax-case G3cfe@x G3cff@keys G3d00@clauses G3d01@r G3d02@mr))) (G3cc1@build-dispatch-call G3d14@pvars G3d05@expr G3d1a@y G3d01@r G3d02@mr))) (if (eq? G3d04@fender '#t) G3d1a@y ((lambda (G3d22@call) (list 'if G3d1a@y G3d22@call (list 'quote '#f))) (G3cc1@build-dispatch-call G3d14@pvars G3d04@fender G3d1a@y G3d01@r G3d02@mr))))) (G2cd5@gen-lexical 'tmp))))) G3d11@G3d0f G3d10@G3d0e))))) (set! G3cc7@gen-syntax-case (lambda (G3cdc@x G3cdd@keys G3cde@clauses G3cdf@r G3ce0@mr) (if (null? G3cde@clauses) (list '(primitive syntax-error) G3cdc@x) ((lambda (G3ce6@t) ((lambda (G3ce8@ls/false) (if G3ce8@ls/false (apply (lambda (G3cea@pat G3ceb@expr) (if (and (G2d59@id? G3cea@pat) (not (G2d67@bound-id-member? G3cea@pat G3cdd@keys)) (not (G2f5a@ellipsis? G3cea@pat))) (if (G2d61@free-id=? G3cea@pat (G2ee2@scheme-stx '_)) (G2f7c@chi-expr G3ceb@expr G3cdf@r G3ce0@mr) ((lambda (G3cee@lab G3cef@lex) ((lambda (G3cf2@body) (list (G2cb3@G2bf1@build-lambda '#f (list G3cef@lex) G3cf2@body) G3cdc@x)) (G2f7c@chi-expr (G2d45@add-subst (G2d14@make-full-rib (list G3cea@pat) (list G3cee@lab)) G3ceb@expr) (cons (cons G3cee@lab (G2d79@make-binding 'syntax (cons G3cef@lex '0))) G3cdf@r) G3ce0@mr))) (G2cd9@gen-label G3cea@pat) (G2cd5@gen-lexical G3cea@pat))) (G3cc5@gen-clause G3cdc@x G3cdd@keys (cdr G3cde@clauses) G3cdf@r G3ce0@mr G3cea@pat '#t G3ceb@expr))) G3ce8@ls/false) ((lambda (G3cf4@t) ((lambda (G3cf6@ls/false) (if G3cf6@ls/false (apply (lambda (G3cf8@pat G3cf9@fender G3cfa@expr) (G3cc5@gen-clause G3cdc@x G3cdd@keys (cdr G3cde@clauses) G3cdf@r G3ce0@mr G3cf8@pat G3cf9@fender G3cfa@expr)) G3cf6@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3cf4@t))) (G2f58@syntax-dispatch G3cf4@t '(any any any)))) G3ce6@t))) (G2f58@syntax-dispatch G3ce6@t '(any any)))) (car G3cde@clauses))))) (lambda (G3cc8@e G3cc9@r G3cca@mr) ((lambda (G3cce@t) ((lambda (G3cd0@ls/false) (if G3cd0@ls/false (apply (lambda (G3cd2@expr G3cd3@keys G3cd4@clauses) (begin (G2f5e@verify-literals G3cd3@keys G3cc8@e) ((lambda (G3cd8@x) ((lambda (G3cda@body) (list (G2cb3@G2bf1@build-lambda '#f (list G3cd8@x) G3cda@body) (G2f7c@chi-expr G3cd2@expr G3cc9@r G3cca@mr))) (G3cc7@gen-syntax-case G3cd8@x G3cd3@keys G3cd4@clauses G3cc9@r G3cca@mr))) (G2cd5@gen-lexical 'tmp)))) G3cd0@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3cce@t))) (G2f58@syntax-dispatch G3cce@t '(_ any each-any . each-any)))) G3cc8@e)))) '#f '#f '#f '#f)))) (set! G2f62@ellipsis-map (lambda (G3d4a@proc G3d4b@ls . G3d4e@ls*) ((lambda (G3d51@who) (begin (set! G3d51@who '...) (begin (if (not (list? G3d4b@ls)) (assertion-violation G3d51@who '"not a list" G3d4b@ls) (void)) (if (not (null? G3d4e@ls*)) ((lambda (G3d52@n) (for-each (lambda (G3d54@x) (begin (if (not (list? G3d54@x)) (assertion-violation G3d51@who '"not a list" G3d54@x) (void)) (if (not (= (length G3d54@x) G3d52@n)) (assertion-violation G3d51@who '"length mismatch" G3d4b@ls G3d54@x) (void)))) G3d4e@ls*)) (length G3d4b@ls)) (void)) (apply map G3d4a@proc G3d4b@ls G3d4e@ls*)))) '#f))) (set! G2f64@syntax-transformer ((lambda () ((lambda (G3d57@gen-syntax G3d59@gen-ref G3d5b@gen-append G3d5d@gen-mappend G3d5f@gen-map G3d61@gen-cons G3d63@gen-vector G3d65@regen) (begin (set! G3d57@gen-syntax (lambda (G3dca@src G3dcb@e G3dcc@r G3dcd@maps G3dce@ellipsis? G3dcf@vec?) ((lambda (G3dd6@t) ((lambda (G3dd8@ls/false) (if (and G3dd8@ls/false (apply (lambda (G3dda@dots) (G3dce@ellipsis? G3dda@dots)) G3dd8@ls/false)) (apply (lambda (G3ddc@dots) (G3043@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dca@src)) G3dd8@ls/false) ((lambda (G3dde@t) ((lambda (G3de0@ls/false) (if (and G3de0@ls/false (apply (lambda (G3de2@id) (G2d59@id? G3de2@id)) G3de0@ls/false)) (apply (lambda (G3de4@id) ((lambda (G3de6@label) ((lambda (G3de8@b) ((lambda () (if (eq? (G2d7b@binding-type G3de8@b) 'syntax) (call-with-values (lambda () ((lambda (G3dec@var.lev) (G3d59@gen-ref G3dca@src (car G3dec@var.lev) (cdr G3dec@var.lev) G3dcd@maps)) (G2d7d@binding-value G3de8@b))) (lambda (G3dee@G3dea G3def@G3deb) ((lambda (G3df2@maps G3df3@var) (values (list 'ref G3df3@var) G3df2@maps)) G3def@G3deb G3dee@G3dea))) (values (list 'quote G3dcb@e) G3dcd@maps))))) (G2d77@label->binding G3de6@label G3dcc@r))) (G2d73@id->label G3dcb@e))) G3de0@ls/false) ((lambda (G3df6@t) ((lambda (G3df8@ls/false) (if (and G3df8@ls/false (apply (lambda (G3dfa@dots G3dfb@e) (G3dce@ellipsis? G3dfa@dots)) G3df8@ls/false)) (apply (lambda (G3dfe@dots G3dff@e) (if G3dcf@vec? (G3043@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dca@src) (G3d57@gen-syntax G3dca@src G3dff@e G3dcc@r G3dcd@maps (lambda (G3e02@x) '#f) '#f))) G3df8@ls/false) ((lambda (G3e04@t) ((lambda (G3e06@ls/false) (if (and G3e06@ls/false (apply (lambda (G3e08@x G3e09@dots G3e0a@y) (G3dce@ellipsis? G3e09@dots)) G3e06@ls/false)) (apply (lambda (G3e0e@x G3e0f@dots G3e10@y) ((letrec ((G3e14@f (lambda (G3e16@y G3e17@k) ((lambda (G3e1a@t) ((lambda (G3e1c@ls/false) (if G3e1c@ls/false (apply (lambda () (G3e17@k G3dcd@maps)) G3e1c@ls/false) ((lambda (G3e1e@t) ((lambda (G3e20@ls/false) (if (and G3e20@ls/false (apply (lambda (G3e22@dots G3e23@y) (G3dce@ellipsis? G3e22@dots)) G3e20@ls/false)) (apply (lambda (G3e26@dots G3e27@y) (G3e14@f G3e27@y (lambda (G3e2a@maps) (call-with-values (lambda () (G3e17@k (cons '() G3e2a@maps))) (lambda (G3e2e@G3e2c G3e2f@G3e2d) ((lambda (G3e32@maps G3e33@x) (if (null? (car G3e32@maps)) (G3043@syntax-violation '#f '"extra ellipsis in syntax form" G3dca@src) (values (G3d5d@gen-mappend G3e33@x (car G3e32@maps)) (cdr G3e32@maps)))) G3e2f@G3e2d G3e2e@G3e2c)))))) G3e20@ls/false) ((lambda (G3e36@t) ((lambda (G3e38@ls/false) (if G3e38@ls/false (apply (lambda () (call-with-values (lambda () (G3d57@gen-syntax G3dca@src G3e16@y G3dcc@r G3dcd@maps G3dce@ellipsis? G3dcf@vec?)) (lambda (G3e3c@G3e3a G3e3d@G3e3b) ((lambda (G3e40@maps G3e41@y) (call-with-values (lambda () (G3e17@k G3e40@maps)) (lambda (G3e46@G3e44 G3e47@G3e45) ((lambda (G3e4a@maps G3e4b@x) (values (G3d5b@gen-append G3e4b@x G3e41@y) G3e4a@maps)) G3e47@G3e45 G3e46@G3e44)))) G3e3d@G3e3b G3e3c@G3e3a)))) G3e38@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3e36@t))) (G2f58@syntax-dispatch G3e36@t '_))) G3e1e@t))) (G2f58@syntax-dispatch G3e1e@t '(any . any)))) G3e1a@t))) (G2f58@syntax-dispatch G3e1a@t '()))) G3e16@y)))) G3e14@f) G3e10@y (lambda (G3e4e@maps) (call-with-values (lambda () (G3d57@gen-syntax G3dca@src G3e0e@x G3dcc@r (cons '() G3e4e@maps) G3dce@ellipsis? '#f)) (lambda (G3e52@G3e50 G3e53@G3e51) ((lambda (G3e56@maps G3e57@x) (if (null? (car G3e56@maps)) (G3043@syntax-violation '#f '"extra ellipsis in syntax form" G3dca@src) (values (G3d5f@gen-map G3e57@x (car G3e56@maps)) (cdr G3e56@maps)))) G3e53@G3e51 G3e52@G3e50)))))) G3e06@ls/false) ((lambda (G3e5a@t) ((lambda (G3e5c@ls/false) (if G3e5c@ls/false (apply (lambda (G3e5e@x G3e5f@y) (call-with-values (lambda () (G3d57@gen-syntax G3dca@src G3e5e@x G3dcc@r G3dcd@maps G3dce@ellipsis? '#f)) (lambda (G3e64@G3e62 G3e65@G3e63) ((lambda (G3e68@maps G3e69@xnew) (call-with-values (lambda () (G3d57@gen-syntax G3dca@src G3e5f@y G3dcc@r G3e68@maps G3dce@ellipsis? G3dcf@vec?)) (lambda (G3e6e@G3e6c G3e6f@G3e6d) ((lambda (G3e72@maps G3e73@ynew) (values (G3d61@gen-cons G3dcb@e G3e5e@x G3e5f@y G3e69@xnew G3e73@ynew) G3e72@maps)) G3e6f@G3e6d G3e6e@G3e6c)))) G3e65@G3e63 G3e64@G3e62)))) G3e5c@ls/false) ((lambda (G3e76@t) ((lambda (G3e78@ls/false) (if G3e78@ls/false (apply (lambda (G3e7a@ls) (call-with-values (lambda () (G3d57@gen-syntax G3dca@src G3e7a@ls G3dcc@r G3dcd@maps G3dce@ellipsis? '#t)) (lambda (G3e7e@G3e7c G3e7f@G3e7d) ((lambda (G3e82@maps G3e83@lsnew) (values (G3d63@gen-vector G3dcb@e G3e7a@ls G3e83@lsnew) G3e82@maps)) G3e7f@G3e7d G3e7e@G3e7c)))) G3e78@ls/false) ((lambda (G3e86@t) ((lambda (G3e88@ls/false) (if G3e88@ls/false (apply (lambda () (values (list 'quote G3dcb@e) G3dcd@maps)) G3e88@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3e86@t))) (G2f58@syntax-dispatch G3e86@t '_))) G3e76@t))) (G2f58@syntax-dispatch G3e76@t '#(vector each-any)))) G3e5a@t))) (G2f58@syntax-dispatch G3e5a@t '(any . any)))) G3e04@t))) (G2f58@syntax-dispatch G3e04@t '(any any . any)))) G3df6@t))) (G2f58@syntax-dispatch G3df6@t '(any any)))) G3dde@t))) (G2f58@syntax-dispatch G3dde@t 'any))) G3dd6@t))) (G2f58@syntax-dispatch G3dd6@t 'any))) G3dcb@e))) (set! G3d59@gen-ref (lambda (G3db2@src G3db3@var G3db4@level G3db5@maps) (if (= G3db4@level '0) (values G3db3@var G3db5@maps) (if (null? G3db5@maps) (G3043@syntax-violation '#f '"missing ellipsis in syntax form" G3db2@src) (call-with-values (lambda () (G3d59@gen-ref G3db2@src G3db3@var (- G3db4@level '1) (cdr G3db5@maps))) (lambda (G3dbc@G3dba G3dbd@G3dbb) ((lambda (G3dc0@outer-maps G3dc1@outer-var) ((lambda (G3dc4@t) (if G3dc4@t ((lambda (G3dc6@b) (values (cdr G3dc6@b) G3db5@maps)) G3dc4@t) ((lambda (G3dc8@inner-var) (values G3dc8@inner-var (cons (cons (cons G3dc1@outer-var G3dc8@inner-var) (car G3db5@maps)) G3dc0@outer-maps))) (G2cd5@gen-lexical 'tmp)))) (assq G3dc1@outer-var (car G3db5@maps)))) G3dbd@G3dbb G3dbc@G3dba))))))) (set! G3d5b@gen-append (lambda (G3dae@x G3daf@y) (if (fast-equal? G3daf@y ''()) G3dae@x (list 'append G3dae@x G3daf@y)))) (set! G3d5d@gen-mappend (lambda (G3daa@e G3dab@map-env) (list 'apply '(primitive append) (G3d5f@gen-map G3daa@e G3dab@map-env)))) (set! G3d5f@gen-map (lambda (G3d98@e G3d99@map-env) ((lambda (G3d9c@formals G3d9d@actuals) (if (eq? (car G3d98@e) 'ref) (car G3d9d@actuals) (if (for-all (lambda (G3da0@x) (and (eq? (car G3da0@x) 'ref) (memq (cadr G3da0@x) G3d9c@formals))) (cdr G3d98@e)) ((lambda (G3da2@args) (cons 'map (cons (list 'primitive (car G3d98@e)) G3da2@args))) (map ((lambda (G3da4@r) (lambda (G3da6@x) (cdr (assq (cadr G3da6@x) G3da4@r)))) (map cons G3d9c@formals G3d9d@actuals)) (cdr G3d98@e))) (cons* 'map (list 'lambda G3d9c@formals G3d98@e) G3d9d@actuals)))) (map cdr G3d99@map-env) (map (lambda (G3da8@x) (list 'ref (car G3da8@x))) G3d99@map-env)))) (set! G3d61@gen-cons (lambda (G3d88@e G3d89@x G3d8a@y G3d8b@xnew G3d8c@ynew) ((lambda (G3d92@t) (if (memv G3d92@t '(quote)) (if (eq? (car G3d8b@xnew) 'quote) ((lambda (G3d94@xnew G3d95@ynew) (if (and (eq? G3d94@xnew G3d89@x) (eq? G3d95@ynew G3d8a@y)) (list 'quote G3d88@e) (list 'quote (cons G3d94@xnew G3d95@ynew)))) (cadr G3d8b@xnew) (cadr G3d8c@ynew)) (if (null? (cadr G3d8c@ynew)) (list 'list G3d8b@xnew) (list 'cons G3d8b@xnew G3d8c@ynew))) (if (memv G3d92@t '(list)) (cons 'list (cons G3d8b@xnew (cdr G3d8c@ynew))) (list 'cons G3d8b@xnew G3d8c@ynew)))) (car G3d8c@ynew)))) (set! G3d63@gen-vector (lambda (G3d82@e G3d83@ls G3d84@lsnew) (if (eq? (car G3d84@lsnew) 'quote) (if (eq? (cadr G3d84@lsnew) G3d83@ls) (list 'quote G3d82@e) (list 'quote (list->vector (cadr G3d84@lsnew)))) (if (eq? (car G3d84@lsnew) 'list) (cons 'vector (cdr G3d84@lsnew)) (list 'list->vector G3d84@lsnew))))) (set! G3d65@regen (lambda (G3d7c@x) ((lambda (G3d7e@t) (if (memv G3d7e@t '(ref)) (cadr G3d7c@x) (if (memv G3d7e@t '(primitive)) (list 'primitive (cadr G3d7c@x)) (if (memv G3d7e@t '(quote)) (list 'quote (cadr G3d7c@x)) (if (memv G3d7e@t '(lambda)) (G2cb3@G2bf1@build-lambda '#f (cadr G3d7c@x) (G3d65@regen (caddr G3d7c@x))) (if (memv G3d7e@t '(map)) ((lambda (G3d80@ls) (cons '(primitive ellipsis-map) G3d80@ls)) (map G3d65@regen (cdr G3d7c@x))) (cons (list 'primitive (car G3d7c@x)) (map G3d65@regen (cdr G3d7c@x))))))))) (car G3d7c@x)))) (lambda (G3d66@e G3d67@r G3d68@mr) ((lambda (G3d6c@t) ((lambda (G3d6e@ls/false) (if G3d6e@ls/false (apply (lambda (G3d70@x) (call-with-values (lambda () (G3d57@gen-syntax G3d66@e G3d70@x G3d67@r '() G2f5a@ellipsis? '#f)) (lambda (G3d74@G3d72 G3d75@G3d73) ((lambda (G3d78@maps G3d79@e) (G3d65@regen G3d79@e)) G3d75@G3d73 G3d74@G3d72)))) G3d6e@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3d6c@t))) (G2f58@syntax-dispatch G3d6c@t '(_ any)))) G3d66@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f66@core-macro-transformer (lambda (G3e8a@name) ((lambda (G3e8c@t) (if (memv G3e8c@t '(quote)) G2f08@quote-transformer (if (memv G3e8c@t '(lambda)) G2f0c@lambda-transformer (if (memv G3e8c@t '(case-lambda)) G2f0a@case-lambda-transformer (if (memv G3e8c@t '(letrec)) G2ef0@letrec-transformer (if (memv G3e8c@t '(letrec*)) G2ef2@letrec*-transformer (if (memv G3e8c@t '(if)) G2f00@if-transformer (if (memv G3e8c@t '(and)) G2f02@and-transformer (if (memv G3e8c@t '(or)) G2f04@or-transformer (if (memv G3e8c@t '(foreign-call)) G2f54@foreign-call-transformer (if (memv G3e8c@t '(syntax-case)) G2f60@syntax-case-transformer (if (memv G3e8c@t '(syntax)) G2f64@syntax-transformer (if (memv G3e8c@t '(type-descriptor)) G2ef6@type-descriptor-transformer (if (memv G3e8c@t '(record-type-descriptor)) G2ef8@record-type-descriptor-transformer (if (memv G3e8c@t '(record-constructor-descriptor)) G2efa@record-constructor-descriptor-transformer (if (memv G3e8c@t '(fluid-let-syntax)) G2ef4@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e8a@name))))))))))))))))) G3e8a@name))) (set! G2f68@file-options-macro (lambda (G3e8e@x) ((lambda (G3e91@valid-option?) (begin (set! G3e91@valid-option? (lambda (G3e9a@x) (and (G2d59@id? G3e9a@x) (memq (G2d5b@id->sym G3e9a@x) '(no-fail no-create no-truncate))))) ((lambda (G3e92@t) ((lambda (G3e94@ls/false) (if (and G3e94@ls/false (apply (lambda (G3e96@opt*) (and (for-all G3e91@valid-option? G3e96@opt*) (G28f6@G2897@file-options-spec (map G2d5b@id->sym G3e96@opt*)))) G3e94@ls/false)) (apply (lambda (G3e98@opt*) (G2f0e@bless (list 'quote (G28f6@G2897@file-options-spec (map G2d5b@id->sym G3e98@opt*))))) G3e94@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3e92@t))) (G2f58@syntax-dispatch G3e92@t '(_ . each-any)))) G3e8e@x))) '#f))) (set! G2f6a@symbol-macro (lambda (G3e9c@x G3e9d@set) ((lambda (G3ea0@t) ((lambda (G3ea2@ls/false) (if (and G3ea2@ls/false (apply (lambda (G3ea4@name) (and (G2d59@id? G3ea4@name) (memq (G2d5b@id->sym G3ea4@name) G3e9d@set))) G3ea2@ls/false)) (apply (lambda (G3ea6@name) (G2f0e@bless (list 'quote G3ea6@name))) G3ea2@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3ea0@t))) (G2f58@syntax-dispatch G3ea0@t '(_ any)))) G3e9c@x))) (set! G2f6c@macro-transformer (lambda (G3ea8@x) (if (procedure? G3ea8@x) G3ea8@x (if (symbol? G3ea8@x) ((lambda (G3eaa@t) (if (memv G3eaa@t '(define-record-type)) G2f4c@define-record-type-macro (if (memv G3eaa@t '(define-struct)) G2f4a@define-struct-macro (if (memv G3eaa@t '(include)) G2f40@include-macro (if (memv G3eaa@t '(cond)) G2f3c@cond-macro (if (memv G3eaa@t '(let)) G2f14@let-macro (if (memv G3eaa@t '(do)) G2f34@do-macro (if (memv G3eaa@t '(or)) G2f38@or-macro (if (memv G3eaa@t '(and)) G2f3a@and-macro (if (memv G3eaa@t '(let*)) G2f36@let*-macro (if (memv G3eaa@t '(let-values)) G2f16@let-values-macro (if (memv G3eaa@t '(let*-values)) G2f18@let*-values-macro (if (memv G3eaa@t '(syntax-rules)) G2f44@syntax-rules-macro (if (memv G3eaa@t '(quasiquote)) G2f46@quasiquote-macro (if (memv G3eaa@t '(quasisyntax)) G2f48@quasisyntax-macro (if (memv G3eaa@t '(with-syntax)) G2f10@with-syntax-macro (if (memv G3eaa@t '(when)) G2efc@when-macro (if (memv G3eaa@t '(unless)) G2efe@unless-macro (if (memv G3eaa@t '(case)) G2f06@case-macro (if (memv G3eaa@t '(identifier-syntax)) G2f32@identifier-syntax-macro (if (memv G3eaa@t '(time)) G2f2a@time-macro (if (memv G3eaa@t '(delay)) G2f2c@delay-macro (if (memv G3eaa@t '(assert)) G2f2e@assert-macro (if (memv G3eaa@t '(endianness)) G2f30@endianness-macro (if (memv G3eaa@t '(guard)) G2f26@guard-macro (if (memv G3eaa@t '(define-enumeration)) G2f28@define-enumeration-macro (if (memv G3eaa@t '(trace-lambda)) G2f1a@trace-lambda-macro (if (memv G3eaa@t '(trace-define)) G2f1c@trace-define-macro (if (memv G3eaa@t '(trace-define-syntax)) G2f1e@trace-define-syntax-macro (if (memv G3eaa@t '(trace-let-syntax)) G2f22@trace-let-syntax-macro (if (memv G3eaa@t '(trace-letrec-syntax)) G2f24@trace-letrec-syntax-macro (if (memv G3eaa@t '(define-condition-type)) G2f4e@define-condition-type-macro (if (memv G3eaa@t '(parameterize)) G2f52@parameterize-macro (if (memv G3eaa@t '(include-into)) G2f42@include-into-macro (if (memv G3eaa@t '(eol-style)) (lambda (G3eac@x) (G2f6a@symbol-macro G3eac@x '(none lf cr crlf nel crnel ls))) (if (memv G3eaa@t '(error-handling-mode)) (lambda (G3eae@x) (G2f6a@symbol-macro G3eae@x '(ignore raise replace))) (if (memv G3eaa@t '(buffer-mode)) (lambda (G3eb0@x) (G2f6a@symbol-macro G3eb0@x '(none line block))) (if (memv G3eaa@t '(file-options)) G2f68@file-options-macro (if (memv G3eaa@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f50@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ea8@x)))))))))))))))))))))))))))))))))))))))) G3ea8@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ea8@x))))) (set! G2f6e@local-macro-transformer (lambda (G3eb2@x) (car G3eb2@x))) (set! G2f70@do-macro-call (lambda (G3eb4@transformer G3eb5@expr) ((lambda (G3eb8@out) (begin ((letrec ((G3eba@f (lambda (G3ebc@x) (if (not (G2d21@stx? G3ebc@x)) (if (pair? G3ebc@x) (begin (G3eba@f (car G3ebc@x)) (G3eba@f (cdr G3ebc@x))) (if (vector? G3ebc@x) (vector-for-each G3eba@f G3ebc@x) (if (symbol? G3ebc@x) (G3043@syntax-violation '#f '"raw symbol encountered in output of macro" G3eb5@expr G3ebc@x) (void)))) (void))))) G3eba@f) G3eb8@out) (G2d43@add-mark (G2d39@gen-mark) G3eb8@out G3eb5@expr))) (G3eb4@transformer (G2d43@add-mark G2d3b@anti-mark G3eb5@expr '#f))))) (set! G2f72@chi-macro (lambda (G3ebe@p G3ebf@e) (G2f70@do-macro-call (G2f6c@macro-transformer G3ebe@p) G3ebf@e))) (set! G2f74@chi-local-macro (lambda (G3ec2@p G3ec3@e) (G2f70@do-macro-call (G2f6e@local-macro-transformer G3ec2@p) G3ec3@e))) (set! G2f76@chi-global-macro (lambda (G3ec6@p G3ec7@e) ((lambda (G3eca@lib G3ecb@loc) (begin (G2b71@G2a19@visit-library G3eca@lib) ((lambda (G3ece@x) ((lambda (G3ed0@transformer) (G2f70@do-macro-call G3ed0@transformer G3ec7@e)) (if (procedure? G3ece@x) G3ece@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ece@x)))) (symbol-value G3ecb@loc)))) (car G3ec6@p) (cdr G3ec6@p)))) (set! G2f78@chi-expr* (lambda (G3ed2@e* G3ed3@r G3ed4@mr) (if (null? G3ed2@e*) '() ((lambda (G3ed8@e) (cons G3ed8@e (G2f78@chi-expr* (cdr G3ed2@e*) G3ed3@r G3ed4@mr))) (G2f7c@chi-expr (car G3ed2@e*) G3ed3@r G3ed4@mr))))) (set! G2f7a@chi-application (lambda (G3eda@e G3edb@r G3edc@mr) ((lambda (G3ee0@t) ((lambda (G3ee2@ls/false) (if G3ee2@ls/false (apply (lambda (G3ee4@rator G3ee5@rands) ((lambda (G3ee8@rator) (cons G3ee8@rator (G2f78@chi-expr* G3ee5@rands G3edb@r G3edc@mr))) (G2f7c@chi-expr G3ee4@rator G3edb@r G3edc@mr))) G3ee2@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3ee0@t))) (G2f58@syntax-dispatch G3ee0@t '(any . each-any)))) G3eda@e))) (set! G2f7c@chi-expr (lambda (G3eea@e G3eeb@r G3eec@mr) (call-with-values (lambda () (G2d81@syntax-type G3eea@e G3eeb@r)) (lambda (G3ef3@G3ef0 G3ef4@G3ef1 G3ef5@G3ef2) ((lambda (G3ef9@kwd G3efa@value G3efb@type) ((lambda (G3eff@t) (if (memv G3eff@t '(core-macro)) ((lambda (G3f01@transformer) (G3f01@transformer G3eea@e G3eeb@r G3eec@mr)) (G2f66@core-macro-transformer G3efa@value)) (if (memv G3eff@t '(global)) ((lambda (G3f03@lib) ((lambda (G3f05@loc) ((lambda () (begin ((G2fc5@inv-collector) G3f03@lib) G3f05@loc)))) (cdr G3efa@value))) (car G3efa@value)) (if (memv G3eff@t '(core-prim)) ((lambda (G3f07@name) (list 'primitive G3f07@name)) G3efa@value) (if (memv G3eff@t '(call)) (G2f7a@chi-application G3eea@e G3eeb@r G3eec@mr) (if (memv G3eff@t '(lexical)) ((lambda (G3f09@lex) G3f09@lex) (G2ee4@lexical-var G3efa@value)) (if (memv G3eff@t '(global-macro global-macro!)) (G2f7c@chi-expr (G2f76@chi-global-macro G3efa@value G3eea@e) G3eeb@r G3eec@mr) (if (memv G3eff@t '(local-macro local-macro!)) (G2f7c@chi-expr (G2f74@chi-local-macro G3efa@value G3eea@e) G3eeb@r G3eec@mr) (if (memv G3eff@t '(macro macro!)) (G2f7c@chi-expr (G2f72@chi-macro G3efa@value G3eea@e) G3eeb@r G3eec@mr) (if (memv G3eff@t '(constant)) ((lambda (G3f0b@datum) (list 'quote G3f0b@datum)) G3efa@value) (if (memv G3eff@t '(set!)) (G2f7e@chi-set! G3eea@e G3eeb@r G3eec@mr) (if (memv G3eff@t '(begin)) ((lambda (G3f0d@t) ((lambda (G3f0f@ls/false) (if G3f0f@ls/false (apply (lambda (G3f11@x G3f12@x*) (G2cb6@G2c27@build-sequence '#f (G2f78@chi-expr* (cons G3f11@x G3f12@x*) G3eeb@r G3eec@mr))) G3f0f@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3f0d@t))) (G2f58@syntax-dispatch G3f0d@t '(_ any . each-any)))) G3eea@e) (if (memv G3eff@t '(let-syntax letrec-syntax)) ((lambda (G3f15@t) ((lambda (G3f17@ls/false) (if (and G3f17@ls/false (apply (lambda (G3f19@xlhs* G3f1a@xrhs* G3f1b@xbody G3f1c@xbody*) (if (not (G2d63@valid-bound-ids? G3f19@xlhs*)) (G3043@syntax-violation '#f '"invalid identifiers" G3eea@e) (void))) G3f17@ls/false)) (apply (lambda (G3f21@xlhs* G3f22@xrhs* G3f23@xbody G3f24@xbody*) ((lambda (G3f29@xlab*) ((lambda (G3f2b@xrib) ((lambda (G3f2d@xb*) ((lambda () (G2cb6@G2c27@build-sequence '#f (G2f78@chi-expr* (map (lambda (G3f2f@x) (G2d45@add-subst G3f2b@xrib G3f2f@x)) (cons G3f23@xbody G3f24@xbody*)) (append (map cons G3f29@xlab* G3f2d@xb*) G3eeb@r) (append (map cons G3f29@xlab* G3f2d@xb*) G3eec@mr)))))) (map (lambda (G3f31@x) (G2d99@make-eval-transformer (G2fb7@expand-transformer (if (eq? G3efb@type 'let-syntax) G3f31@x (G2d45@add-subst G3f2b@xrib G3f31@x)) G3eec@mr))) G3f22@xrhs*))) (G2d14@make-full-rib G3f21@xlhs* G3f29@xlab*))) (map G2cd9@gen-label G3f21@xlhs*))) G3f17@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3f15@t))) (G2f58@syntax-dispatch G3f15@t '(_ #(each (any any)) any . each-any)))) G3eea@e) (if (memv G3eff@t '(displaced-lexical)) (G3043@syntax-violation '#f '"identifier out of context" G3eea@e) (if (memv G3eff@t '(syntax)) (G3043@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3eea@e) (if (memv G3eff@t '(define define-syntax module import library)) (G3043@syntax-violation '#f (string-append ((lambda (G3f33@t) (if (memv G3f33@t '(define)) '"a definition" (if (memv G3f33@t '(define-syntax)) '"a define-syntax" (if (memv G3f33@t '(module)) '"a module definition" (if (memv G3f33@t '(library)) '"a library definition" (if (memv G3f33@t '(import)) '"an import declaration" (if (memv G3f33@t '(export)) '"an export declaration" '"a non-expression"))))))) G3efb@type) '" was found where an expression was expected") G3eea@e) (if (memv G3eff@t '(mutable)) (G3043@syntax-violation '#f '"attempt to reference an unexportable variable" G3eea@e) (G3043@syntax-violation '#f '"invalid expression" G3eea@e)))))))))))))))))) G3efb@type)) G3ef5@G3ef2 G3ef4@G3ef1 G3ef3@G3ef0))))) (set! G2f7e@chi-set! (lambda (G3f35@e G3f36@r G3f37@mr) ((lambda (G3f3b@t) ((lambda (G3f3d@ls/false) (if (and G3f3d@ls/false (apply (lambda (G3f3f@x G3f40@v) (G2d59@id? G3f3f@x)) G3f3d@ls/false)) (apply (lambda (G3f43@x G3f44@v) (call-with-values (lambda () (G2d81@syntax-type G3f43@x G3f36@r)) (lambda (G3f4a@G3f47 G3f4b@G3f48 G3f4c@G3f49) ((lambda (G3f50@kwd G3f51@value G3f52@type) ((lambda (G3f56@t) (if (memv G3f56@t '(lexical)) (begin (G2ee8@set-lexical-mutable! G3f51@value '#t) (list 'set! (G2ee4@lexical-var G3f51@value) (G2f7c@chi-expr G3f44@v G3f36@r G3f37@mr))) (if (memv G3f56@t '(core-prim)) (G3043@syntax-violation '#f '"cannot modify imported core primitive" G3f35@e) (if (memv G3f56@t '(global)) (G3043@syntax-violation '#f '"attempt to modify imported binding" G3f35@e) (if (memv G3f56@t '(global-macro!)) (G2f7c@chi-expr (G2f76@chi-global-macro G3f51@value G3f35@e) G3f36@r G3f37@mr) (if (memv G3f56@t '(local-macro!)) (G2f7c@chi-expr (G2f74@chi-local-macro G3f51@value G3f35@e) G3f36@r G3f37@mr) (if (memv G3f56@t '(mutable)) (G3043@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f35@e) (G3043@syntax-violation '#f '"invalid syntax" G3f35@e)))))))) G3f52@type)) G3f4c@G3f49 G3f4b@G3f48 G3f4a@G3f47)))) G3f3d@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3f3b@t))) (G2f58@syntax-dispatch G3f3b@t '(_ any any)))) G3f35@e))) (set! G2f80@verify-formals (lambda (G3f58@fmls G3f59@stx) ((lambda (G3f5c@t) ((lambda (G3f5e@ls/false) (if G3f5e@ls/false (apply (lambda (G3f60@x*) (if (not (G2d63@valid-bound-ids? G3f60@x*)) (G2f12@invalid-fmls-error G3f59@stx G3f58@fmls) (void))) G3f5e@ls/false) ((lambda (G3f62@t) ((lambda (G3f64@ls/false) (if G3f64@ls/false (apply (lambda (G3f66@x* G3f67@x) (if (not (G2d63@valid-bound-ids? (cons G3f67@x G3f66@x*))) (G2f12@invalid-fmls-error G3f59@stx G3f58@fmls) (void))) G3f64@ls/false) ((lambda (G3f6a@t) ((lambda (G3f6c@ls/false) (if G3f6c@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid syntax" G3f59@stx)) G3f6c@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3f6a@t))) (G2f58@syntax-dispatch G3f6a@t '_))) G3f62@t))) (G2f58@syntax-dispatch G3f62@t '#(each+ any () any)))) G3f5c@t))) (G2f58@syntax-dispatch G3f5c@t 'each-any))) G3f58@fmls))) (set! G2f82@chi-lambda-clause (lambda (G3f6e@stx G3f6f@fmls G3f70@body* G3f71@r G3f72@mr) ((lambda (G3f78@t) ((lambda (G3f7a@ls/false) (if G3f7a@ls/false (apply (lambda (G3f7c@x*) (begin (G2f80@verify-formals G3f6f@fmls G3f6e@stx) ((lambda (G3f7e@lex* G3f7f@lab*) (values G3f7e@lex* (G2f92@chi-internal (G2d45@add-subst (G2d14@make-full-rib G3f7c@x* G3f7f@lab*) G3f70@body*) (G2eec@add-lexicals G3f7f@lab* G3f7e@lex* G3f71@r) G3f72@mr))) (map G2cd5@gen-lexical G3f7c@x*) (map G2cd9@gen-label G3f7c@x*)))) G3f7a@ls/false) ((lambda (G3f82@t) ((lambda (G3f84@ls/false) (if G3f84@ls/false (apply (lambda (G3f86@x* G3f87@x) (begin (G2f80@verify-formals G3f6f@fmls G3f6e@stx) ((lambda (G3f8a@lex* G3f8b@lab* G3f8c@lex G3f8d@lab) (values (append G3f8a@lex* G3f8c@lex) (G2f92@chi-internal (G2d45@add-subst (G2d14@make-full-rib (cons G3f87@x G3f86@x*) (cons G3f8d@lab G3f8b@lab*)) G3f70@body*) (G2eec@add-lexicals (cons G3f8d@lab G3f8b@lab*) (cons G3f8c@lex G3f8a@lex*) G3f71@r) G3f72@mr))) (map G2cd5@gen-lexical G3f86@x*) (map G2cd9@gen-label G3f86@x*) (G2cd5@gen-lexical G3f87@x) (G2cd9@gen-label G3f87@x)))) G3f84@ls/false) ((lambda (G3f92@t) ((lambda (G3f94@ls/false) (if G3f94@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid syntax" G3f6f@fmls)) G3f94@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G3f92@t))) (G2f58@syntax-dispatch G3f92@t '_))) G3f82@t))) (G2f58@syntax-dispatch G3f82@t '#(each+ any () any)))) G3f78@t))) (G2f58@syntax-dispatch G3f78@t 'each-any))) G3f6f@fmls))) (set! G2f84@chi-lambda-clause* (lambda (G3f96@stx G3f97@fmls* G3f98@body** G3f99@r G3f9a@mr) (if (null? G3f97@fmls*) (values '() '()) (call-with-values (lambda () (G2f82@chi-lambda-clause G3f96@stx (car G3f97@fmls*) (car G3f98@body**) G3f99@r G3f9a@mr)) (lambda (G3fa2@G3fa0 G3fa3@G3fa1) ((lambda (G3fa6@b G3fa7@a) (call-with-values (lambda () (G2f84@chi-lambda-clause* G3f96@stx (cdr G3f97@fmls*) (cdr G3f98@body**) G3f99@r G3f9a@mr)) (lambda (G3fac@G3faa G3fad@G3fab) ((lambda (G3fb0@b* G3fb1@a*) (values (cons G3fa7@a G3fb1@a*) (cons G3fa6@b G3fb0@b*))) G3fad@G3fab G3fac@G3faa)))) G3fa3@G3fa1 G3fa2@G3fa0)))))) (set! G2f86@chi-defun (lambda (G3fb4@x G3fb5@r G3fb6@mr) ((lambda (G3fba@fmls G3fbb@body*) (call-with-values (lambda () (G2f82@chi-lambda-clause G3fba@fmls G3fba@fmls G3fbb@body* G3fb5@r G3fb6@mr)) (lambda (G3fc0@G3fbe G3fc1@G3fbf) ((lambda (G3fc4@body G3fc5@fmls) (G2cb3@G2bf1@build-lambda '#f G3fc5@fmls G3fc4@body)) G3fc1@G3fbf G3fc0@G3fbe)))) (car G3fb4@x) (cdr G3fb4@x)))) (set! G2f88@chi-rhs (lambda (G3fc8@rhs G3fc9@r G3fca@mr) ((lambda (G3fce@t) (if (memv G3fce@t '(defun)) (G2f86@chi-defun (cdr G3fc8@rhs) G3fc9@r G3fca@mr) (if (memv G3fce@t '(expr)) ((lambda (G3fd0@expr) (G2f7c@chi-expr G3fd0@expr G3fc9@r G3fca@mr)) (cdr G3fc8@rhs)) (if (memv G3fce@t '(top-expr)) ((lambda (G3fd2@expr) (G2cb6@G2c27@build-sequence '#f (list (G2f7c@chi-expr G3fd2@expr G3fc9@r G3fca@mr) (G2cb7@G2c29@build-void)))) (cdr G3fc8@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fc8@rhs))))) (car G3fc8@rhs)))) (set! G2f8a@expand-interaction-rhs*/init* (lambda (G3fd4@lhs* G3fd5@rhs* G3fd6@init* G3fd7@r G3fd8@mr) ((letrec ((G3fde@f (lambda (G3fe0@lhs* G3fe1@rhs*) (if (null? G3fe0@lhs*) (map (lambda (G3fe4@x) (G2f7c@chi-expr G3fe4@x G3fd7@r G3fd8@mr)) G3fd6@init*) ((lambda (G3fe6@lhs G3fe7@rhs) ((lambda (G3fea@t) (if (memv G3fea@t '(defun)) ((lambda (G3fec@rhs) (cons (list 'set! G3fe6@lhs G3fec@rhs) (G3fde@f (cdr G3fe0@lhs*) (cdr G3fe1@rhs*)))) (G2f86@chi-defun (cdr G3fe7@rhs) G3fd7@r G3fd8@mr)) (if (memv G3fea@t '(expr)) ((lambda (G3fee@rhs) (cons (list 'set! G3fe6@lhs G3fee@rhs) (G3fde@f (cdr G3fe0@lhs*) (cdr G3fe1@rhs*)))) (G2f7c@chi-expr (cdr G3fe7@rhs) G3fd7@r G3fd8@mr)) (if (memv G3fea@t '(top-expr)) ((lambda (G3ff0@e) (cons G3ff0@e (G3fde@f (cdr G3fe0@lhs*) (cdr G3fe1@rhs*)))) (G2f7c@chi-expr (cdr G3fe7@rhs) G3fd7@r G3fd8@mr)) (error 'expand-interaction '"invallid" G3fe7@rhs))))) (car G3fe7@rhs))) (car G3fe0@lhs*) (car G3fe1@rhs*)))))) G3fde@f) G3fd4@lhs* G3fd5@rhs*))) (set! G2f8c@chi-rhs* (lambda (G3ff2@rhs* G3ff3@r G3ff4@mr) ((letrec ((G3ff8@f (lambda (G3ffa@ls) (if (null? G3ffa@ls) '() ((lambda (G3ffc@a) (cons G3ffc@a (G3ff8@f (cdr G3ffa@ls)))) (G2f88@chi-rhs (car G3ffa@ls) G3ff3@r G3ff4@mr)))))) G3ff8@f) G3ff2@rhs*))) (set! G2f8e@find-bound=? (lambda (G3ffe@x G3fff@lhs* G4000@rhs*) (if (null? G3fff@lhs*) '#f (if (G2d5f@bound-id=? G3ffe@x (car G3fff@lhs*)) (car G4000@rhs*) (G2f8e@find-bound=? G3ffe@x (cdr G3fff@lhs*) (cdr G4000@rhs*)))))) (set! G2f90@find-dups (lambda (G4004@ls) ((letrec ((G4006@f (lambda (G4008@ls G4009@dups) (if (null? G4008@ls) G4009@dups ((lambda (G400c@t) (if G400c@t ((lambda (G400e@x) (G4006@f (cdr G4008@ls) (cons (list (car G4008@ls) G400e@x) G4009@dups))) G400c@t) (G4006@f (cdr G4008@ls) G4009@dups))) (G2f8e@find-bound=? (car G4008@ls) (cdr G4008@ls) (cdr G4008@ls))))))) G4006@f) G4004@ls '()))) (set! G2f92@chi-internal (lambda (G4010@e* G4011@r G4012@mr) ((lambda (G4016@rib) (call-with-values (lambda () (G2fb5@chi-body* (map (lambda (G4020@x) (G2d45@add-subst G4016@rib G4020@x)) (G2d57@syntax->list G4010@e*)) G4011@r G4012@mr '() '() '() '() '() G4016@rib '#f)) (lambda (G4022@G4018 G4023@G4019 G4024@G401a G4025@G401b G4026@G401c G4027@G401d G4028@G401e G4029@G401f) ((lambda (G4032@_exp* G4033@kwd* G4034@mod** G4035@rhs* G4036@lex* G4037@mr G4038@r G4039@e*) (begin (if (null? G4039@e*) (G3043@syntax-violation '#f '"no expression in body" G4039@e*) (void)) ((lambda (G4042@init*) ((lambda (G4044@rhs*) ((lambda () (G2cb9@G2c2d@build-letrec* '#f (reverse G4036@lex*) (reverse G4044@rhs*) (G2cb6@G2c27@build-sequence '#f G4042@init*))))) (G2f8c@chi-rhs* G4035@rhs* G4038@r G4037@mr))) (G2f78@chi-expr* (append (apply append (reverse G4034@mod**)) G4039@e*) G4038@r G4037@mr)))) G4029@G401f G4028@G401e G4027@G401d G4026@G401c G4025@G401b G4024@G401a G4023@G4019 G4022@G4018)))) (G2d04@make-empty-rib)))) (set! G2f94@parse-module (lambda (G4046@e) ((lambda (G4048@t) ((lambda (G404a@ls/false) (if G404a@ls/false (apply (lambda (G404c@export* G404d@b*) (begin (if (not (for-all G2d59@id? G404c@export*)) (G3043@syntax-violation '#f '"module exports must be identifiers" G4046@e) (void)) (values '#f (list->vector G404c@export*) G404d@b*))) G404a@ls/false) ((lambda (G4050@t) ((lambda (G4052@ls/false) (if G4052@ls/false (apply (lambda (G4054@name G4055@export* G4056@b*) (begin (if (not (G2d59@id? G4054@name)) (G3043@syntax-violation '#f '"module name must be an identifier" G4046@e) (void)) (if (not (for-all G2d59@id? G4055@export*)) (G3043@syntax-violation '#f '"module exports must be identifiers" G4046@e) (void)) (values G4054@name (list->vector G4055@export*) G4056@b*))) G4052@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G4050@t))) (G2f58@syntax-dispatch G4050@t '(_ any each-any . each-any)))) G4048@t))) (G2f58@syntax-dispatch G4048@t '(_ each-any . each-any)))) G4046@e))) (set! G2f9a@G2f95 (make-record-type-descriptor 'module-interface '#f 'G2f98 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2f9c@G2f97 '#f) (set! G2f9e@G2f96 (make-record-constructor-descriptor G2f9a@G2f95 '#f G2f9c@G2f97)) (set! G2fa1@module-interface? (record-predicate G2f9a@G2f95)) (set! G2fa3@make-module-interface (record-constructor G2f9e@G2f96)) (set! G2fa5@module-interface-first-mark (record-accessor G2f9a@G2f95 '0)) (set! G2fa7@module-interface-exp-id-vec (record-accessor G2f9a@G2f95 '1)) (set! G2fa9@module-interface-exp-lab-vec (record-accessor G2f9a@G2f95 '2)) (set! G2fab@set-module-interface-first-mark! (record-mutator G2f9a@G2f95 '0)) (set! G2fad@set-module-interface-exp-id-vec! (record-mutator G2f9a@G2f95 '1)) (set! G2faf@set-module-interface-exp-lab-vec! (record-mutator G2f9a@G2f95 '2)) (set! G2fb1@module-interface-exp-id* (lambda (G405a@iface G405b@id) ((lambda (G405f@diff-marks) (begin (set! G405f@diff-marks (lambda (G4066@ls G4067@x) (begin (if (null? G4066@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G406a@a) (if (eq? G406a@a G4067@x) '() (cons G406a@a (G405f@diff-marks (cdr G4066@ls) G4067@x)))) (car G4066@ls))))) ((lambda (G4060@diff G4061@id-vec) (if (null? G4060@diff) G4061@id-vec (vector-map (lambda (G4064@x) (G2d23@make-stx (G2d25@stx-expr G4064@x) (append G4060@diff (G2d27@stx-mark* G4064@x)) '() '())) G4061@id-vec))) (G405f@diff-marks (G2d27@stx-mark* G405b@id) (G2fa5@module-interface-first-mark G405a@iface)) (G2fa7@module-interface-exp-id-vec G405a@iface)))) '#f))) (set! G2fb3@chi-internal-module (lambda (G406c@e G406d@r G406e@mr G406f@lex* G4070@rhs* G4071@mod** G4072@kwd*) (call-with-values (lambda () (G2f94@parse-module G406c@e)) (lambda (G407d@G407a G407e@G407b G407f@G407c) ((lambda (G4083@e* G4084@exp-id* G4085@name) ((lambda (G4089@rib) ((lambda (G408b@e*) ((lambda () (call-with-values (lambda () (G2fb5@chi-body* G408b@e* G406d@r G406e@mr G406f@lex* G4070@rhs* G4071@mod** G4072@kwd* '() G4089@rib '#f)) (lambda (G4095@G408d G4096@G408e G4097@G408f G4098@G4090 G4099@G4091 G409a@G4092 G409b@G4093 G409c@G4094) ((lambda (G40a5@_exp* G40a6@kwd* G40a7@mod** G40a8@rhs* G40a9@lex* G40aa@mr G40ab@r G40ac@e*) ((lambda (G40b5@exp-lab* G40b6@mod**) (if (not G4085@name) (values G40a9@lex* G40a8@rhs* G4084@exp-id* G40b5@exp-lab* G40ab@r G40aa@mr G40b6@mod** G40a6@kwd*) ((lambda (G40b9@lab G40ba@iface) (values G40a9@lex* G40a8@rhs* (vector G4085@name) (vector G40b9@lab) (cons (cons G40b9@lab (cons '$module G40ba@iface)) G40ab@r) (cons (cons G40b9@lab (cons '$module G40ba@iface)) G40aa@mr) G40b6@mod** G40a6@kwd*)) (G2cd9@gen-label 'module) (G2fa3@make-module-interface (car (G2d27@stx-mark* G4085@name)) (vector-map (lambda (G40bd@x) (G2d23@make-stx (G2d25@stx-expr G40bd@x) (G2d27@stx-mark* G40bd@x) '() '())) G4084@exp-id*) G40b5@exp-lab*)))) (vector-map (lambda (G40bf@x) (or (G2d73@id->label (G2d23@make-stx (G2d5b@id->sym G40bf@x) (G2d27@stx-mark* G40bf@x) (list G4089@rib) '())) (G3043@syntax-violation '#f '"cannot find module export" G40bf@x))) G4084@exp-id*) (cons G40ac@e* G40a7@mod**))) G409c@G4094 G409b@G4093 G409a@G4092 G4099@G4091 G4098@G4090 G4097@G408f G4096@G408e G4095@G408d)))))) (map (lambda (G40c1@x) (G2d45@add-subst G4089@rib G40c1@x)) (G2d57@syntax->list G4083@e*)))) (G2d04@make-empty-rib))) G407f@G407c G407e@G407b G407d@G407a))))) (set! G2fb5@chi-body* (lambda (G40c3@e* G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40c9@kwd* G40ca@exp* G40cb@rib G40cc@top?) (if (null? G40c3@e*) (values G40c3@e* G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40c9@kwd* G40ca@exp*) ((lambda (G40d7@e) (call-with-values (lambda () (G2d81@syntax-type G40d7@e G40c4@r)) (lambda (G40dc@G40d9 G40dd@G40da G40de@G40db) ((lambda (G40e2@kwd G40e3@value G40e4@type) ((lambda (G40e8@kwd*) ((lambda (G40ea@t) (if (memv G40ea@t '(define)) (call-with-values (lambda () (G2edc@parse-define G40d7@e)) (lambda (G40ee@G40ec G40ef@G40ed) ((lambda (G40f2@rhs G40f3@id) (begin (if (G2d67@bound-id-member? G40f3@id G40e8@kwd*) (G3043@syntax-violation '#f '"cannot redefine keyword" G40d7@e) (void)) (call-with-values (lambda () (G2cdd@gen-define-label+loc G40f3@id G40cb@rib)) (lambda (G40f8@G40f6 G40f9@G40f7) ((lambda (G40fc@lex G40fd@lab) (begin (G2d0a@extend-rib! G40cb@rib G40f3@id G40fd@lab) (G2fb5@chi-body* (cdr G40c3@e*) (G2eea@add-lexical G40fd@lab G40fc@lex G40c4@r) G40c5@mr (cons G40fc@lex G40c6@lex*) (cons G40f2@rhs G40c7@rhs*) G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?))) G40f9@G40f7 G40f8@G40f6))))) G40ef@G40ed G40ee@G40ec))) (if (memv G40ea@t '(define-syntax)) (call-with-values (lambda () (G2ede@parse-define-syntax G40d7@e)) (lambda (G4102@G4100 G4103@G4101) ((lambda (G4106@rhs G4107@id) (begin (if (G2d67@bound-id-member? G4107@id G40e8@kwd*) (G3043@syntax-violation '#f '"cannot redefine keyword" G40d7@e) (void)) ((lambda (G410a@lab G410b@expanded-rhs) (begin (G2d0a@extend-rib! G40cb@rib G4107@id G410a@lab) ((lambda (G410e@b) (G2fb5@chi-body* (cdr G40c3@e*) (cons (cons G410a@lab G410e@b) G40c4@r) (cons (cons G410a@lab G410e@b) G40c5@mr) G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?)) (G2d99@make-eval-transformer G410b@expanded-rhs)))) (G2cdf@gen-define-label G4107@id G40cb@rib) (G2fb7@expand-transformer G4106@rhs G40c5@mr)))) G4103@G4101 G4102@G4100))) (if (memv G40ea@t '(let-syntax letrec-syntax)) ((lambda (G4110@t) ((lambda (G4112@ls/false) (if (and G4112@ls/false (apply (lambda (G4114@xlhs* G4115@xrhs* G4116@xbody*) (if (not (G2d63@valid-bound-ids? G4114@xlhs*)) (G3043@syntax-violation '#f '"invalid identifiers" G40d7@e) (void))) G4112@ls/false)) (apply (lambda (G411a@xlhs* G411b@xrhs* G411c@xbody*) ((lambda (G4120@xlab*) ((lambda (G4122@xrib) ((lambda (G4124@xb*) ((lambda () (G2fb5@chi-body* (append (map (lambda (G4126@x) (G2d45@add-subst G4122@xrib G4126@x)) G411c@xbody*) (cdr G40c3@e*)) (append (map cons G4120@xlab* G4124@xb*) G40c4@r) (append (map cons G4120@xlab* G4124@xb*) G40c5@mr) G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?)))) (map (lambda (G4128@x) (G2d99@make-eval-transformer (G2fb7@expand-transformer (if (eq? G40e4@type 'let-syntax) G4128@x (G2d45@add-subst G4122@xrib G4128@x)) G40c5@mr))) G411b@xrhs*))) (G2d14@make-full-rib G411a@xlhs* G4120@xlab*))) (map G2cd9@gen-label G411a@xlhs*))) G4112@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G4110@t))) (G2f58@syntax-dispatch G4110@t '(_ #(each (any any)) . each-any)))) G40d7@e) (if (memv G40ea@t '(begin)) ((lambda (G412a@t) ((lambda (G412c@ls/false) (if G412c@ls/false (apply (lambda (G412e@x*) (G2fb5@chi-body* (append G412e@x* (cdr G40c3@e*)) G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?)) G412c@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G412a@t))) (G2f58@syntax-dispatch G412a@t '(_ . each-any)))) G40d7@e) (if (memv G40ea@t '(global-macro global-macro!)) (G2fb5@chi-body* (cons (G2d45@add-subst G40cb@rib (G2f76@chi-global-macro G40e3@value G40d7@e)) (cdr G40c3@e*)) G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?) (if (memv G40ea@t '(local-macro local-macro!)) (G2fb5@chi-body* (cons (G2d45@add-subst G40cb@rib (G2f74@chi-local-macro G40e3@value G40d7@e)) (cdr G40c3@e*)) G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?) (if (memv G40ea@t '(macro macro!)) (G2fb5@chi-body* (cons (G2d45@add-subst G40cb@rib (G2f72@chi-macro G40e3@value G40d7@e)) (cdr G40c3@e*)) G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?) (if (memv G40ea@t '(module)) (call-with-values (lambda () (G2fb3@chi-internal-module G40d7@e G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd*)) (lambda (G4138@G4130 G4139@G4131 G413a@G4132 G413b@G4133 G413c@G4134 G413d@G4135 G413e@G4136 G413f@G4137) ((lambda (G4148@kwd* G4149@mod** G414a@mr G414b@r G414c@m-exp-lab* G414d@m-exp-id* G414e@rhs* G414f@lex*) (begin (vector-for-each (lambda (G4158@id G4159@lab) (G2d0a@extend-rib! G40cb@rib G4158@id G4159@lab)) G414d@m-exp-id* G414c@m-exp-lab*) (G2fb5@chi-body* (cdr G40c3@e*) G414b@r G414a@mr G414f@lex* G414e@rhs* G4149@mod** G4148@kwd* G40ca@exp* G40cb@rib G40cc@top?))) G413f@G4137 G413e@G4136 G413d@G4135 G413c@G4134 G413b@G4133 G413a@G4132 G4139@G4131 G4138@G4130))) (if (memv G40ea@t '(library)) (begin (G3025@library-expander (G2d6f@stx->datum G40d7@e)) (G2fb5@chi-body* (cdr G40c3@e*) G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?)) (if (memv G40ea@t '(export)) ((lambda (G415c@t) ((lambda (G415e@ls/false) (if G415e@ls/false (apply (lambda (G4160@exp-decl*) (G2fb5@chi-body* (cdr G40c3@e*) G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* (append G4160@exp-decl* G40ca@exp*) G40cb@rib G40cc@top?)) G415e@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G415c@t))) (G2f58@syntax-dispatch G415c@t '(_ . each-any)))) G40d7@e) (if (memv G40ea@t '(import)) ((lambda () ((lambda (G4163@module-import? G4165@module-import G4167@library-import) (begin (set! G4163@module-import? (lambda (G41af@e) ((lambda (G41b1@t) ((lambda (G41b3@ls/false) (if (and G41b3@ls/false (apply (lambda (G41b5@id) (G2d59@id? G41b5@id)) G41b3@ls/false)) (apply (lambda (G41b7@id) '#t) G41b3@ls/false) ((lambda (G41b9@t) ((lambda (G41bb@ls/false) (if G41bb@ls/false (apply (lambda (G41bd@imp*) '#f) G41bb@ls/false) ((lambda (G41bf@t) ((lambda (G41c1@ls/false) (if G41c1@ls/false (apply (lambda () (G3043@syntax-violation '#f '"malformed import form" G41af@e)) G41c1@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G41bf@t))) (G2f58@syntax-dispatch G41bf@t '_))) G41b9@t))) (G2f58@syntax-dispatch G41b9@t '(_ . each-any)))) G41b1@t))) (G2f58@syntax-dispatch G41b1@t '(_ any)))) G41af@e))) (set! G4165@module-import (lambda (G4190@e G4191@r) ((lambda (G4194@t) ((lambda (G4196@ls/false) (if (and G4196@ls/false (apply (lambda (G4198@id) (G2d59@id? G4198@id)) G4196@ls/false)) (apply (lambda (G419a@id) (call-with-values (lambda () (G2d81@syntax-type G419a@id G4191@r)) (lambda (G419f@G419c G41a0@G419d G41a1@G419e) ((lambda (G41a5@kwd G41a6@value G41a7@type) ((lambda (G41ab@t) (if (memv G41ab@t '($module)) ((lambda (G41ad@iface) (values (G2fb1@module-interface-exp-id* G41ad@iface G419a@id) (G2fa9@module-interface-exp-lab-vec G41ad@iface))) G41a6@value) (G3043@syntax-violation '#f '"invalid import" G4190@e))) G41a7@type)) G41a1@G419e G41a0@G419d G419f@G419c)))) G4196@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G4194@t))) (G2f58@syntax-dispatch G4194@t '(_ any)))) G4190@e))) (set! G4167@library-import (lambda (G4176@e) ((lambda (G4178@t) ((lambda (G417a@ls/false) (if G417a@ls/false (apply (lambda (G417c@ctxt G417d@imp*) (call-with-values (lambda () (G2fbf@parse-import-spec* (G3049@syntax->datum G417d@imp*))) (lambda (G4182@G4180 G4183@G4181) ((lambda (G4186@subst-labels G4187@subst-names) (values (vector-map (lambda (G418a@name) (G2d37@datum->stx G417c@ctxt G418a@name)) G4187@subst-names) G4186@subst-labels)) G4183@G4181 G4182@G4180)))) G417a@ls/false) ((lambda (G418c@t) ((lambda (G418e@ls/false) (if G418e@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid import form" G4176@e)) G418e@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G418c@t))) (G2f58@syntax-dispatch G418c@t '_))) G4178@t))) (G2f58@syntax-dispatch G4178@t '(any . each-any)))) G4176@e))) (begin (call-with-values (lambda () (if (G4163@module-import? G40d7@e) (G4165@module-import G40d7@e G40c4@r) (G4167@library-import G40d7@e))) (lambda (G416a@G4168 G416b@G4169) ((lambda (G416e@lab* G416f@id*) (vector-for-each (lambda (G4172@id G4173@lab) (G2d0a@extend-rib! G40cb@rib G4172@id G4173@lab)) G416f@id* G416e@lab*)) G416b@G4169 G416a@G4168))) (G2fb5@chi-body* (cdr G40c3@e*) G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?)))) '#f '#f '#f))) (if G40cc@top? (G2fb5@chi-body* (cdr G40c3@e*) G40c4@r G40c5@mr (cons (G2cd5@gen-lexical 'dummy) G40c6@lex*) (cons (cons 'top-expr G40d7@e) G40c7@rhs*) G40c8@mod** G40e8@kwd* G40ca@exp* G40cb@rib G40cc@top?) (values G40c3@e* G40c4@r G40c5@mr G40c6@lex* G40c7@rhs* G40c8@mod** G40e8@kwd* G40ca@exp*)))))))))))))) G40e4@type)) (if (G2d59@id? G40e2@kwd) (cons G40e2@kwd G40c9@kwd*) G40c9@kwd*))) G40de@G40db G40dd@G40da G40dc@G40d9)))) (car G40c3@e*))))) (set! G2fb7@expand-transformer (lambda (G41c3@expr G41c4@r) ((lambda (G41c7@rtc) ((lambda (G41c9@expanded-rhs) (begin (for-each ((lambda (G41cb@mark-visit) (lambda (G41cd@x) (begin (G2b70@G2a17@invoke-library G41cd@x) (G41cb@mark-visit G41cd@x)))) (G2fc7@vis-collector)) (G41c7@rtc)) G41c9@expanded-rhs)) ((lambda (G41d3@G41cf G41d4@G41d0 G41d5@G41d1 G41d6@G41d2) ((lambda (G41db@swap) (dynamic-wind G41db@swap (lambda () (G2f7c@chi-expr G41c3@expr G41c4@r G41c4@r)) G41db@swap)) (lambda () (begin ((lambda (G41dd@t) (begin (G41d3@G41cf G41d5@G41d1) (set! G41d5@G41d1 G41dd@t))) (G41d3@G41cf)) ((lambda (G41df@t) (begin (G41d4@G41d0 G41d6@G41d2) (set! G41d6@G41d2 G41df@t))) (G41d4@G41d0)))))) G2fc5@inv-collector G2fc7@vis-collector G41c7@rtc (lambda (G41e1@x) (values))))) (G2fc3@make-collector)))) (set! G2fb9@parse-exports (lambda (G41e3@exp*) ((letrec ((G41e5@f (lambda (G41e7@exp* G41e8@int* G41e9@ext*) (if (null? G41e7@exp*) (begin (if (not (G2d63@valid-bound-ids? G41e9@ext*)) (G3043@syntax-violation 'export '"invalid exports" (G2f90@find-dups G41e9@ext*)) (void)) (values (map G3049@syntax->datum G41e9@ext*) G41e8@int*)) ((lambda (G41ed@t) ((lambda (G41ef@ls/false) (if G41ef@ls/false (apply (lambda (G41f1@rename G41f2@i* G41f3@e*) (begin (if (not (and (eq? (G3049@syntax->datum G41f1@rename) 'rename) (for-all G2d59@id? G41f2@i*) (for-all G2d59@id? G41f3@e*))) (G3043@syntax-violation 'export '"invalid export specifier" (car G41e7@exp*)) (void)) (G41e5@f (cdr G41e7@exp*) (append G41f2@i* G41e8@int*) (append G41f3@e* G41e9@ext*)))) G41ef@ls/false) ((lambda (G41f7@t) ((lambda (G41f9@ls/false) (if G41f9@ls/false (apply (lambda (G41fb@ie) (begin (if (not (G2d59@id? G41fb@ie)) (G3043@syntax-violation 'export '"invalid export" G41fb@ie) (void)) (G41e5@f (cdr G41e7@exp*) (cons G41fb@ie G41e8@int*) (cons G41fb@ie G41e9@ext*)))) G41f9@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G41f7@t))) (G2f58@syntax-dispatch G41f7@t 'any))) G41ed@t))) (G2f58@syntax-dispatch G41ed@t '(any . #(each (any any)))))) (car G41e7@exp*)))))) G41e5@f) G41e3@exp* '() '()))) (set! G2fbb@parse-library-name (lambda (G41fd@spec) ((lambda (G4200@parse) (begin (set! G4200@parse (lambda (G420b@x) ((lambda (G420d@t) ((lambda (G420f@ls/false) (if (and G420f@ls/false (apply (lambda (G4211@v*) (for-all (lambda (G4213@x) ((lambda (G4215@x) (and (integer? G4215@x) (exact? G4215@x))) (G3049@syntax->datum G4213@x))) G4211@v*)) G420f@ls/false)) (apply (lambda (G4217@v*) (values '() (map G3049@syntax->datum G4217@v*))) G420f@ls/false) ((lambda (G4219@t) ((lambda (G421b@ls/false) (if (and G421b@ls/false (apply (lambda (G421d@x G421e@rest) (symbol? (G3049@syntax->datum G421d@x))) G421b@ls/false)) (apply (lambda (G4221@x G4222@rest) (call-with-values (lambda () (G4200@parse G4222@rest)) (lambda (G4227@G4225 G4228@G4226) ((lambda (G422b@v* G422c@x*) (values (cons (G3049@syntax->datum G4221@x) G422c@x*) G422b@v*)) G4228@G4226 G4227@G4225)))) G421b@ls/false) ((lambda (G422f@t) ((lambda (G4231@ls/false) (if G4231@ls/false (apply (lambda () (values '() '())) G4231@ls/false) ((lambda (G4233@t) ((lambda (G4235@ls/false) (if G4235@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid library name" G41fd@spec)) G4235@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G4233@t))) (G2f58@syntax-dispatch G4233@t '_))) G422f@t))) (G2f58@syntax-dispatch G422f@t '()))) G4219@t))) (G2f58@syntax-dispatch G4219@t '(any . any)))) G420d@t))) (G2f58@syntax-dispatch G420d@t '(each-any)))) G420b@x))) (call-with-values (lambda () (G4200@parse G41fd@spec)) (lambda (G4203@G4201 G4204@G4202) ((lambda (G4207@ver* G4208@name*) (begin (if (null? G4208@name*) (G3043@syntax-violation '#f '"empty library name" G41fd@spec) (void)) (values G4208@name* G4207@ver*))) G4204@G4202 G4203@G4201))))) '#f))) (set! G2fbd@parse-library (lambda (G4237@e) ((lambda (G4239@t) ((lambda (G423b@ls/false) (if (and G423b@ls/false (apply (lambda (G423d@library G423e@name* G423f@export G4240@exp* G4241@import G4242@imp* G4243@b*) (and (eq? (G3049@syntax->datum G423f@export) 'export) (eq? (G3049@syntax->datum G4241@import) 'import) (eq? (G3049@syntax->datum G423d@library) 'library))) G423b@ls/false)) (apply (lambda (G424b@library G424c@name* G424d@export G424e@exp* G424f@import G4250@imp* G4251@b*) (values G424c@name* G424e@exp* G4250@imp* G4251@b*)) G423b@ls/false) ((lambda (G4259@t) ((lambda (G425b@ls/false) (if G425b@ls/false (apply (lambda () (G3043@syntax-violation '#f '"malformed library" G4237@e)) G425b@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G4259@t))) (G2f58@syntax-dispatch G4259@t '_))) G4239@t))) (G2f58@syntax-dispatch G4239@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4237@e))) (set! G2fbf@parse-import-spec* ((lambda () ((lambda (G425e@idsyn? G4260@dup-error G4262@merge-substs G4264@exclude* G4266@find* G4268@rem* G426a@remove-dups G426c@parse-library-name G426e@import-library G4270@get-import G4272@add-imports!) (begin (set! G425e@idsyn? (lambda (G445d@x) (symbol? (G3049@syntax->datum G445d@x)))) (set! G4260@dup-error (lambda (G445b@name) (G3043@syntax-violation 'import '"two imports with different bindings" G445b@name))) (set! G4262@merge-substs (lambda (G4449@s G444a@subst) ((lambda (G444e@insert-to-subst) (begin (set! G444e@insert-to-subst (lambda (G444f@a G4450@subst) ((lambda (G4453@name G4454@label) ((lambda (G4457@t) (if G4457@t ((lambda (G4459@x) (if (eq? (cdr G4459@x) G4454@label) G4450@subst (G4260@dup-error G4453@name))) G4457@t) (cons G444f@a G4450@subst))) (assq G4453@name G4450@subst))) (car G444f@a) (cdr G444f@a)))) (if (null? G4449@s) G444a@subst (G444e@insert-to-subst (car G4449@s) (G4262@merge-substs (cdr G4449@s) G444a@subst))))) '#f))) (set! G4264@exclude* (lambda (G441f@sym* G4420@subst) ((lambda (G4424@exclude) (begin (set! G4424@exclude (lambda (G4439@sym G443a@subst) (if (null? G443a@subst) (G3043@syntax-violation 'import '"cannot rename unbound identifier" G4439@sym) (if (eq? G4439@sym (caar G443a@subst)) (values (cdar G443a@subst) (cdr G443a@subst)) ((lambda (G443d@a) (call-with-values (lambda () (G4424@exclude G4439@sym (cdr G443a@subst))) (lambda (G4441@G443f G4442@G4440) ((lambda (G4445@subst G4446@old) (values G4446@old (cons G443d@a G4445@subst))) G4442@G4440 G4441@G443f)))) (car G443a@subst)))))) (if (null? G441f@sym*) (values '() G4420@subst) (call-with-values (lambda () (G4424@exclude (car G441f@sym*) G4420@subst)) (lambda (G4427@G4425 G4428@G4426) ((lambda (G442b@subst G442c@old) (call-with-values (lambda () (G4264@exclude* (cdr G441f@sym*) G442b@subst)) (lambda (G4431@G442f G4432@G4430) ((lambda (G4435@subst G4436@old*) (values (cons G442c@old G4436@old*) G4435@subst)) G4432@G4430 G4431@G442f)))) G4428@G4426 G4427@G4425)))))) '#f))) (set! G4266@find* (lambda (G4417@sym* G4418@subst) (map (lambda (G441b@x) ((lambda (G441d@t) (if G441d@t (cdr G441d@t) (G3043@syntax-violation 'import '"cannot find identifier" G441b@x))) (assq G441b@x G4418@subst))) G4417@sym*))) (set! G4268@rem* (lambda (G440f@sym* G4410@subst) ((letrec ((G4413@f (lambda (G4415@subst) (if (null? G4415@subst) '() (if (memq (caar G4415@subst) G440f@sym*) (G4413@f (cdr G4415@subst)) (cons (car G4415@subst) (G4413@f (cdr G4415@subst)))))))) G4413@f) G4410@subst))) (set! G426a@remove-dups (lambda (G440d@ls) (if (null? G440d@ls) '() (if (memq (car G440d@ls) (cdr G440d@ls)) (G426a@remove-dups (cdr G440d@ls)) (cons (car G440d@ls) (G426a@remove-dups (cdr G440d@ls))))))) (set! G426c@parse-library-name (lambda (G4327@spec) ((lambda (G432a@subversion? G432c@subversion-pred G432e@version-pred) (begin (set! G432a@subversion? (lambda (G4409@x) ((lambda (G440b@x) (and (integer? G440b@x) (exact? G440b@x) (>= G440b@x '0))) (G3049@syntax->datum G4409@x)))) (set! G432c@subversion-pred (lambda (G43a9@x*) ((lambda (G43ab@t) ((lambda (G43ad@ls/false) (if (and G43ad@ls/false (apply (lambda (G43af@n) (G432a@subversion? G43af@n)) G43ad@ls/false)) (apply (lambda (G43b1@n) (lambda (G43b3@x) (= G43b3@x (G3049@syntax->datum G43b1@n)))) G43ad@ls/false) ((lambda (G43b5@t) ((lambda (G43b7@ls/false) (if (and G43b7@ls/false (apply (lambda (G43b9@p? G43ba@sub*) (eq? (G3049@syntax->datum G43b9@p?) 'and)) G43b7@ls/false)) (apply (lambda (G43bd@p? G43be@sub*) ((lambda (G43c1@p*) (lambda (G43c3@x) (for-all (lambda (G43c5@p) (G43c5@p G43c3@x)) G43c1@p*))) (map G432c@subversion-pred G43be@sub*))) G43b7@ls/false) ((lambda (G43c7@t) ((lambda (G43c9@ls/false) (if (and G43c9@ls/false (apply (lambda (G43cb@p? G43cc@sub*) (eq? (G3049@syntax->datum G43cb@p?) 'or)) G43c9@ls/false)) (apply (lambda (G43cf@p? G43d0@sub*) ((lambda (G43d3@p*) (lambda (G43d5@x) (exists (lambda (G43d7@p) (G43d7@p G43d5@x)) G43d3@p*))) (map G432c@subversion-pred G43d0@sub*))) G43c9@ls/false) ((lambda (G43d9@t) ((lambda (G43db@ls/false) (if (and G43db@ls/false (apply (lambda (G43dd@p? G43de@sub) (eq? (G3049@syntax->datum G43dd@p?) 'not)) G43db@ls/false)) (apply (lambda (G43e1@p? G43e2@sub) ((lambda (G43e5@p) (lambda (G43e7@x) (not (G43e5@p G43e7@x)))) (G432c@subversion-pred G43e2@sub))) G43db@ls/false) ((lambda (G43e9@t) ((lambda (G43eb@ls/false) (if (and G43eb@ls/false (apply (lambda (G43ed@p? G43ee@n) (and (eq? (G3049@syntax->datum G43ed@p?) '<=) (G432a@subversion? G43ee@n))) G43eb@ls/false)) (apply (lambda (G43f1@p? G43f2@n) (lambda (G43f5@x) (<= G43f5@x (G3049@syntax->datum G43f2@n)))) G43eb@ls/false) ((lambda (G43f7@t) ((lambda (G43f9@ls/false) (if (and G43f9@ls/false (apply (lambda (G43fb@p? G43fc@n) (and (eq? (G3049@syntax->datum G43fb@p?) '>=) (G432a@subversion? G43fc@n))) G43f9@ls/false)) (apply (lambda (G43ff@p? G4400@n) (lambda (G4403@x) (>= G4403@x (G3049@syntax->datum G4400@n)))) G43f9@ls/false) ((lambda (G4405@t) ((lambda (G4407@ls/false) (if G4407@ls/false (apply (lambda () (G3043@syntax-violation 'import '"invalid sub-version spec" G4327@spec G43a9@x*)) G4407@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G4405@t))) (G2f58@syntax-dispatch G4405@t '_))) G43f7@t))) (G2f58@syntax-dispatch G43f7@t '(any any)))) G43e9@t))) (G2f58@syntax-dispatch G43e9@t '(any any)))) G43d9@t))) (G2f58@syntax-dispatch G43d9@t '(any any)))) G43c7@t))) (G2f58@syntax-dispatch G43c7@t '(any . each-any)))) G43b5@t))) (G2f58@syntax-dispatch G43b5@t '(any . each-any)))) G43ab@t))) (G2f58@syntax-dispatch G43ab@t 'any))) G43a9@x*))) (set! G432e@version-pred (lambda (G4359@x*) ((lambda (G435b@t) ((lambda (G435d@ls/false) (if G435d@ls/false (apply (lambda () (lambda (G435f@x) '#t)) G435d@ls/false) ((lambda (G4361@t) ((lambda (G4363@ls/false) (if (and G4363@ls/false (apply (lambda (G4365@c G4366@ver*) (eq? (G3049@syntax->datum G4365@c) 'and)) G4363@ls/false)) (apply (lambda (G4369@c G436a@ver*) ((lambda (G436d@p*) (lambda (G436f@x) (for-all (lambda (G4371@p) (G4371@p G436f@x)) G436d@p*))) (map G432e@version-pred G436a@ver*))) G4363@ls/false) ((lambda (G4373@t) ((lambda (G4375@ls/false) (if (and G4375@ls/false (apply (lambda (G4377@c G4378@ver*) (eq? (G3049@syntax->datum G4377@c) 'or)) G4375@ls/false)) (apply (lambda (G437b@c G437c@ver*) ((lambda (G437f@p*) (lambda (G4381@x) (exists (lambda (G4383@p) (G4383@p G4381@x)) G437f@p*))) (map G432e@version-pred G437c@ver*))) G4375@ls/false) ((lambda (G4385@t) ((lambda (G4387@ls/false) (if (and G4387@ls/false (apply (lambda (G4389@c G438a@ver) (eq? (G3049@syntax->datum G4389@c) 'not)) G4387@ls/false)) (apply (lambda (G438d@c G438e@ver) ((lambda (G4391@p) (lambda (G4393@x) (not (G4391@p G4393@x)))) (G432e@version-pred G438e@ver))) G4387@ls/false) ((lambda (G4395@t) ((lambda (G4397@ls/false) (if G4397@ls/false (apply (lambda (G4399@sub*) ((lambda (G439b@p*) (lambda (G439d@x) ((letrec ((G439f@f (lambda (G43a1@p* G43a2@x) (if (null? G43a1@p*) '#t (if (null? G43a2@x) '#f (and ((car G43a1@p*) (car G43a2@x)) (G439f@f (cdr G43a1@p*) (cdr G43a2@x)))))))) G439f@f) G439b@p* G439d@x))) (map G432c@subversion-pred G4399@sub*))) G4397@ls/false) ((lambda (G43a5@t) ((lambda (G43a7@ls/false) (if G43a7@ls/false (apply (lambda () (G3043@syntax-violation 'import '"invalid version spec" G4327@spec G4359@x*)) G43a7@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G43a5@t))) (G2f58@syntax-dispatch G43a5@t '_))) G4395@t))) (G2f58@syntax-dispatch G4395@t 'each-any))) G4385@t))) (G2f58@syntax-dispatch G4385@t '(any any)))) G4373@t))) (G2f58@syntax-dispatch G4373@t '(any . each-any)))) G4361@t))) (G2f58@syntax-dispatch G4361@t '(any . each-any)))) G435b@t))) (G2f58@syntax-dispatch G435b@t '()))) G4359@x*))) ((letrec ((G432f@f (lambda (G4331@x) ((lambda (G4333@t) ((lambda (G4335@ls/false) (if G4335@ls/false (apply (lambda (G4337@version-spec*) (values '() (G432e@version-pred G4337@version-spec*))) G4335@ls/false) ((lambda (G4339@t) ((lambda (G433b@ls/false) (if (and G433b@ls/false (apply (lambda (G433d@x G433e@x*) (G425e@idsyn? G433d@x)) G433b@ls/false)) (apply (lambda (G4341@x G4342@x*) (call-with-values (lambda () (G432f@f G4342@x*)) (lambda (G4347@G4345 G4348@G4346) ((lambda (G434b@pred G434c@name) (values (cons (G3049@syntax->datum G4341@x) G434c@name) G434b@pred)) G4348@G4346 G4347@G4345)))) G433b@ls/false) ((lambda (G434f@t) ((lambda (G4351@ls/false) (if G4351@ls/false (apply (lambda () (values '() (lambda (G4353@x) '#t))) G4351@ls/false) ((lambda (G4355@t) ((lambda (G4357@ls/false) (if G4357@ls/false (apply (lambda () (G3043@syntax-violation '#f '"invalid import spec" G4327@spec)) G4357@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G4355@t))) (G2f58@syntax-dispatch G4355@t '_))) G434f@t))) (G2f58@syntax-dispatch G434f@t '()))) G4339@t))) (G2f58@syntax-dispatch G4339@t '(any . any)))) G4333@t))) (G2f58@syntax-dispatch G4333@t '(each-any)))) G4331@x)))) G432f@f) G4327@spec))) '#f '#f '#f))) (set! G426e@import-library (lambda (G4319@spec*) (call-with-values (lambda () (G426c@parse-library-name G4319@spec*)) (lambda (G431d@G431b G431e@G431c) ((lambda (G4321@pred G4322@name) (begin (if (null? G4322@name) (G3043@syntax-violation 'import '"empty library name" G4319@spec*) (void)) ((lambda (G4325@lib) (begin (if (not G4325@lib) (G3043@syntax-violation 'import '"cannot find library with required name" G4322@name) (void)) (if (not (G4321@pred (G2b41@G29b9@library-version G4325@lib))) (G3043@syntax-violation 'import '"library does not satisfy version specification" G4319@spec* G4325@lib) (void)) ((G2fc9@imp-collector) G4325@lib) (G2b45@G29c1@library-subst G4325@lib))) (G2b69@G2a09@find-library-by-name G4322@name)))) G431e@G431c G431d@G431b))))) (set! G4270@get-import (lambda (G428b@spec) ((lambda (G428d@t) ((lambda (G428f@ls/false) (if (and G428f@ls/false (apply (lambda (G4291@x G4292@x*) (not (memq (G3049@syntax->datum G4291@x) '(for rename except only prefix library)))) G428f@ls/false)) (apply (lambda (G4295@x G4296@x*) (G426e@import-library (cons G4295@x G4296@x*))) G428f@ls/false) ((lambda (G4299@t) ((lambda (G429b@ls/false) (if (and G429b@ls/false (apply (lambda (G429d@rename G429e@isp G429f@old* G42a0@new*) (and (eq? (G3049@syntax->datum G429d@rename) 'rename) (for-all G425e@idsyn? G429f@old*) (for-all G425e@idsyn? G42a0@new*))) G429b@ls/false)) (apply (lambda (G42a5@rename G42a6@isp G42a7@old* G42a8@new*) ((lambda (G42ad@subst G42ae@old* G42af@new*) ((lambda (G42b3@old-label*) ((lambda (G42b5@subst) (G4262@merge-substs (map cons G42af@new* G42b3@old-label*) G42b5@subst)) (G4268@rem* G42ae@old* G42ad@subst))) (G4266@find* G42ae@old* G42ad@subst))) (G4270@get-import G42a6@isp) (map G3049@syntax->datum G42a7@old*) (map G3049@syntax->datum G42a8@new*))) G429b@ls/false) ((lambda (G42b7@t) ((lambda (G42b9@ls/false) (if (and G42b9@ls/false (apply (lambda (G42bb@except G42bc@isp G42bd@sym*) (and (eq? (G3049@syntax->datum G42bb@except) 'except) (for-all G425e@idsyn? G42bd@sym*))) G42b9@ls/false)) (apply (lambda (G42c1@except G42c2@isp G42c3@sym*) ((lambda (G42c7@subst) (G4268@rem* (map G3049@syntax->datum G42c3@sym*) G42c7@subst)) (G4270@get-import G42c2@isp))) G42b9@ls/false) ((lambda (G42c9@t) ((lambda (G42cb@ls/false) (if (and G42cb@ls/false (apply (lambda (G42cd@only G42ce@isp G42cf@sym*) (and (eq? (G3049@syntax->datum G42cd@only) 'only) (for-all G425e@idsyn? G42cf@sym*))) G42cb@ls/false)) (apply (lambda (G42d3@only G42d4@isp G42d5@sym*) ((lambda (G42d9@subst G42da@sym*) ((lambda (G42dd@sym*) ((lambda (G42df@lab*) (map cons G42dd@sym* G42df@lab*)) (G4266@find* G42dd@sym* G42d9@subst))) (G426a@remove-dups G42da@sym*))) (G4270@get-import G42d4@isp) (map G3049@syntax->datum G42d5@sym*))) G42cb@ls/false) ((lambda (G42e1@t) ((lambda (G42e3@ls/false) (if (and G42e3@ls/false (apply (lambda (G42e5@prefix G42e6@isp G42e7@p) (and (eq? (G3049@syntax->datum G42e5@prefix) 'prefix) (G425e@idsyn? G42e7@p))) G42e3@ls/false)) (apply (lambda (G42eb@prefix G42ec@isp G42ed@p) ((lambda (G42f1@subst G42f2@prefix) (map (lambda (G42f5@x) (cons (string->symbol (string-append G42f2@prefix (symbol->string (car G42f5@x)))) (cdr G42f5@x))) G42f1@subst)) (G4270@get-import G42ec@isp) (symbol->string (G3049@syntax->datum G42ed@p)))) G42e3@ls/false) ((lambda (G42f7@t) ((lambda (G42f9@ls/false) (if (and G42f9@ls/false (apply (lambda (G42fb@library G42fc@spec*) (eq? (G3049@syntax->datum G42fb@library) 'library)) G42f9@ls/false)) (apply (lambda (G42ff@library G4300@spec*) (G426e@import-library G4300@spec*)) G42f9@ls/false) ((lambda (G4303@t) ((lambda (G4305@ls/false) (if (and G4305@ls/false (apply (lambda (G4307@for G4308@isp G4309@rest) (eq? (G3049@syntax->datum G4307@for) 'for)) G4305@ls/false)) (apply (lambda (G430d@for G430e@isp G430f@rest) (G4270@get-import G430e@isp)) G4305@ls/false) ((lambda (G4313@t) ((lambda (G4315@ls/false) (if G4315@ls/false (apply (lambda (G4317@spec) (G3043@syntax-violation 'import '"invalid import spec" G4317@spec)) G4315@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G4313@t))) (G2f58@syntax-dispatch G4313@t 'any))) G4303@t))) (G2f58@syntax-dispatch G4303@t '(any any . any)))) G42f7@t))) (G2f58@syntax-dispatch G42f7@t '(any each-any)))) G42e1@t))) (G2f58@syntax-dispatch G42e1@t '(any any any)))) G42c9@t))) (G2f58@syntax-dispatch G42c9@t '(any any . each-any)))) G42b7@t))) (G2f58@syntax-dispatch G42b7@t '(any any . each-any)))) G4299@t))) (G2f58@syntax-dispatch G4299@t '(any any . #(each (any any)))))) G428d@t))) (G2f58@syntax-dispatch G428d@t '(any . each-any)))) G428b@spec))) (set! G4272@add-imports! (lambda (G427b@imp G427c@h) ((lambda (G427f@subst) (for-each (lambda (G4281@x) ((lambda (G4283@name G4284@label) ((lambda (G4287@t) (if G4287@t ((lambda (G4289@l) (if (not (eq? G4289@l G4284@label)) (G4260@dup-error G4283@name) (void))) G4287@t) (hashtable-set! G427c@h G4283@name G4284@label))) (hashtable-ref G427c@h G4283@name '#f))) (car G4281@x) (cdr G4281@x))) G427f@subst)) (G4270@get-import G427b@imp)))) (lambda (G4273@imp*) ((letrec ((G4275@f (lambda (G4277@imp* G4278@h) (if (null? G4277@imp*) (hashtable-entries G4278@h) (begin (G4272@add-imports! (car G4277@imp*) G4278@h) (G4275@f (cdr G4277@imp*) G4278@h)))))) G4275@f) G4273@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fc1@make-top-rib (lambda (G445f@names G4460@labels) ((lambda (G4463@rib) (begin (vector-for-each (lambda (G4465@name G4466@label) (begin (if (not (symbol? G4465@name)) (error 'make-top-rib '"BUG: not a symbol" G4465@name) (void)) (G2d0c@extend-rib/nc! G4463@rib (G2d23@make-stx G4465@name G2cd1@top-mark* '() '()) G4466@label))) G445f@names G4460@labels) G4463@rib)) (G2d06@make-cache-rib)))) (set! G2fc3@make-collector (lambda () ((lambda (G4469@ls) (lambda G446d ((lambda (G446e) (if (= G446e '0) (apply (lambda () G4469@ls) G446d) (if (= G446e '1) (apply (lambda (G446b@x) (set! G4469@ls (G2cca@set-cons G446b@x G4469@ls))) G446d) (error 'apply '"invalid arg count")))) (length G446d)))) '()))) (set! G2fc5@inv-collector (G28f5@G282b@make-parameter (lambda G446f@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4471@x) (begin (if (not (procedure? G4471@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4471@x) (void)) G4471@x)))) (set! G2fc7@vis-collector (G28f5@G282b@make-parameter (lambda G4473@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4475@x) (begin (if (not (procedure? G4475@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4475@x) (void)) G4475@x)))) (set! G2fc9@imp-collector (G28f5@G282b@make-parameter (lambda G4477@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4479@x) (begin (if (not (procedure? G4479@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4479@x) (void)) G4479@x)))) (set! G2fcb@chi-library-internal (lambda (G447b@e* G447c@rib G447d@top?) (call-with-values (lambda () (G2fb5@chi-body* G447b@e* '() '() '() '() '() '() '() G447c@rib G447d@top?)) (lambda (G4489@G4481 G448a@G4482 G448b@G4483 G448c@G4484 G448d@G4485 G448e@G4486 G448f@G4487 G4490@G4488) ((lambda (G4499@exp* G449a@_kwd* G449b@mod** G449c@rhs* G449d@lex* G449e@mr G449f@r G44a0@e*) (values (append (apply append (reverse G449b@mod**)) G44a0@e*) G449f@r G449e@mr (reverse G449d@lex*) (reverse G449c@rhs*) G4499@exp*)) G4490@G4488 G448f@G4487 G448e@G4486 G448d@G4485 G448c@G4484 G448b@G4483 G448a@G4482 G4489@G4481))))) (set! G2fcd@chi-interaction-expr (lambda (G44a9@e G44aa@rib G44ab@r) (call-with-values (lambda () (G2fb5@chi-body* (list G44a9@e) G44ab@r G44ab@r '() '() '() '() '() G44aa@rib '#t)) (lambda (G44b7@G44af G44b8@G44b0 G44b9@G44b1 G44ba@G44b2 G44bb@G44b3 G44bc@G44b4 G44bd@G44b5 G44be@G44b6) ((lambda (G44c7@_exp* G44c8@_kwd* G44c9@mod** G44ca@rhs* G44cb@lex* G44cc@mr G44cd@r G44ce@e*) ((lambda (G44d7@e*) ((lambda (G44d9@e) (values G44d9@e G44cd@r)) (if (null? G44d7@e*) (G2cb7@G2c29@build-void) (if (null? (cdr G44d7@e*)) (car G44d7@e*) (G2cb6@G2c27@build-sequence '#f G44d7@e*))))) (G2f8a@expand-interaction-rhs*/init* (reverse G44cb@lex*) (reverse G44ca@rhs*) (append (apply append (reverse G44c9@mod**)) G44ce@e*) G44cd@r G44cc@mr))) G44be@G44b6 G44bd@G44b5 G44bc@G44b4 G44bb@G44b3 G44ba@G44b2 G44b9@G44b1 G44b8@G44b0 G44b7@G44af))))) (set! G2fcf@library-body-expander (lambda (G44db@name G44dc@main-exp* G44dd@imp* G44de@b* G44df@top?) ((lambda (G44e6@itc) (begin (set! G44e6@itc (G2fc3@make-collector)) ((lambda (G44eb@G44e7 G44ec@G44e8 G44ed@G44e9 G44ee@G44ea) ((lambda (G44f3@swap) (dynamic-wind G44f3@swap (lambda () (call-with-values (lambda () (G2fbf@parse-import-spec* G44dd@imp*)) (lambda (G44f7@G44f5 G44f8@G44f6) ((lambda (G44fb@subst-labels G44fc@subst-names) ((lambda (G44ff@rib) ((lambda (G4502@wrap) (begin (set! G4502@wrap (lambda (G456e@x) (G2d23@make-stx G456e@x G2cd1@top-mark* (list G44ff@rib) '()))) ((lambda (G4503@b* G4504@main-exp* G4505@rtc G4506@vtc) ((lambda (G450f@G450b G4510@G450c G4511@G450d G4512@G450e) ((lambda (G4517@swap) (dynamic-wind G4517@swap (lambda () (call-with-values (lambda () (G2fcb@chi-library-internal G4503@b* G44ff@rib G44df@top?)) (lambda (G451f@G4519 G4520@G451a G4521@G451b G4522@G451c G4523@G451d G4524@G451e) ((lambda (G452b@internal-exp* G452c@rhs* G452d@lex* G452e@mr G452f@r G4530@init*) (call-with-values (lambda () (G2fb9@parse-exports (append G4504@main-exp* G452b@internal-exp*))) (lambda (G4539@G4537 G453a@G4538) ((lambda (G453d@exp-id* G453e@exp-name*) (begin (G2d10@seal-rib! G44ff@rib) ((lambda (G4541@init*) ((lambda (G4543@rhs*) ((lambda () (begin (G2d12@unseal-rib! G44ff@rib) ((lambda (G4545@loc* G4546@export-subst) ((lambda (G454a@errstr) (begin (set! G454a@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G302f@make-export-env/macros G452d@lex* G4545@loc* G452f@r)) (lambda (G454e@G454b G454f@G454c G4550@G454d) ((lambda (G4554@macro* G4555@global* G4556@export-env) (begin (for-each (lambda (G455a@s) ((lambda (G455c@name G455d@label) ((lambda (G4560@p) (if G4560@p ((lambda (G4562@b) ((lambda (G4564@type) (if (eq? G4564@type 'mutable) (G3043@syntax-violation 'export G454a@errstr G455c@name) (void))) (car G4562@b))) (cdr G4560@p)) (void))) (assq G455d@label G4556@export-env))) (car G455a@s) (cdr G455a@s))) G4546@export-subst) ((lambda (G4566@invoke-body G4567@invoke-definitions) (values (G44e6@itc) (G4505@rtc) (G4506@vtc) (G2cb6@G2c27@build-sequence '#f (append G4567@invoke-definitions (list G4566@invoke-body))) G4554@macro* G4546@export-subst G4556@export-env)) (G2cb9@G2c2d@build-letrec* '#f G452d@lex* G4543@rhs* (G302b@build-exports G4555@global* G4541@init*)) (map G2cb2@G2b77@build-global-define (map cdr G4555@global*))))) G4550@G454d G454f@G454c G454e@G454b))))) '#f)) (map G2cd7@gen-global G452d@lex*) (G302d@make-export-subst G453e@exp-name* G453d@exp-id*)))))) (G2f8c@chi-rhs* G452c@rhs* G452f@r G452e@mr))) (G2f78@chi-expr* G4530@init* G452f@r G452e@mr)))) G453a@G4538 G4539@G4537)))) G4524@G451e G4523@G451d G4522@G451c G4521@G451b G4520@G451a G451f@G4519)))) G4517@swap)) (lambda () (begin ((lambda (G456a@t) (begin (G450f@G450b G4511@G450d) (set! G4511@G450d G456a@t))) (G450f@G450b)) ((lambda (G456c@t) (begin (G4510@G450c G4512@G450e) (set! G4512@G450e G456c@t))) (G4510@G450c)))))) G2fc5@inv-collector G2fc7@vis-collector G4505@rtc G4506@vtc)) (map G4502@wrap G44de@b*) (map G4502@wrap G44dc@main-exp*) (G2fc3@make-collector) (G2fc3@make-collector)))) '#f)) (G2fc1@make-top-rib G44fc@subst-names G44fb@subst-labels))) G44f8@G44f6 G44f7@G44f5)))) G44f3@swap)) (lambda () (begin ((lambda (G4570@t) (begin (G44eb@G44e7 G44ed@G44e9) (set! G44ed@G44e9 G4570@t))) (G44eb@G44e7)) ((lambda (G4572@t) (begin (G44ec@G44e8 G44ee@G44ea) (set! G44ee@G44ea G4572@t))) (G44ec@G44e8)))))) G2fc9@imp-collector G3051@top-level-context G44e6@itc '#f))) '#f))) (set! G2fd1@core-library-expander (lambda (G4574@e G4575@verify-name) (call-with-values (lambda () (G2fbd@parse-library G4574@e)) (lambda (G457c@G4578 G457d@G4579 G457e@G457a G457f@G457b) ((lambda (G4584@b* G4585@imp* G4586@exp* G4587@name*) (call-with-values (lambda () (G2fbb@parse-library-name G4587@name*)) (lambda (G458e@G458c G458f@G458d) ((lambda (G4592@ver G4593@name) (begin (G4575@verify-name G4593@name) (call-with-values (lambda () (G2fcf@library-body-expander G4593@name G4586@exp* G4585@imp* G4584@b* '#f)) (lambda (G459d@G4596 G459e@G4597 G459f@G4598 G45a0@G4599 G45a1@G459a G45a2@G459b G45a3@G459c) ((lambda (G45ab@export-env G45ac@export-subst G45ad@visit-code G45ae@invoke-code G45af@visit-req* G45b0@invoke-req* G45b1@imp*) (values G4593@name G4592@ver G45b1@imp* G45b0@invoke-req* G45af@visit-req* G45ae@invoke-code G45ad@visit-code G45ac@export-subst G45ab@export-env)) G45a3@G459c G45a2@G459b G45a1@G459a G45a0@G4599 G459f@G4598 G459e@G4597 G459d@G4596))))) G458f@G458d G458e@G458c)))) G457f@G457b G457e@G457a G457d@G4579 G457c@G4578))))) (set! G2fd3@parse-top-level-program (lambda (G45b9@e*) ((lambda (G45bb@t) ((lambda (G45bd@ls/false) (if (and G45bd@ls/false (apply (lambda (G45bf@import G45c0@imp* G45c1@b*) (eq? (G3049@syntax->datum G45bf@import) 'import)) G45bd@ls/false)) (apply (lambda (G45c5@import G45c6@imp* G45c7@b*) (values G45c6@imp* G45c7@b*)) G45bd@ls/false) ((lambda (G45cb@t) ((lambda (G45cd@ls/false) (if (and G45cd@ls/false (apply (lambda (G45cf@import G45d0@x G45d1@y) (eq? (G3049@syntax->datum G45cf@import) 'import)) G45cd@ls/false)) (apply (lambda (G45d5@import G45d6@x G45d7@y) (G3043@syntax-violation 'expander '"invalid syntax of top-level program" (G2d53@syntax-car G45b9@e*))) G45cd@ls/false) ((lambda (G45db@t) ((lambda (G45dd@ls/false) (if G45dd@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45dd@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G45db@t))) (G2f58@syntax-dispatch G45db@t '_))) G45cb@t))) (G2f58@syntax-dispatch G45cb@t '((any . any) . any)))) G45bb@t))) (G2f58@syntax-dispatch G45bb@t '((any . each-any) . each-any)))) G45b9@e*))) (set! G2fd5@top-level-expander (lambda (G45df@e*) (call-with-values (lambda () (G2fd3@parse-top-level-program G45df@e*)) (lambda (G45e3@G45e1 G45e4@G45e2) ((lambda (G45e7@b* G45e8@imp*) (call-with-values (lambda () (G2fcf@library-body-expander '() '() G45e8@imp* G45e7@b* '#t)) (lambda (G45f2@G45eb G45f3@G45ec G45f4@G45ed G45f5@G45ee G45f6@G45ef G45f7@G45f0 G45f8@G45f1) ((lambda (G4600@export-env G4601@export-subst G4602@visit-code G4603@invoke-code G4604@visit-req* G4605@invoke-req* G4606@imp*) (values G4605@invoke-req* G4603@invoke-code)) G45f8@G45f1 G45f7@G45f0 G45f6@G45ef G45f5@G45ee G45f4@G45ed G45f3@G45ec G45f2@G45eb)))) G45e4@G45e2 G45e3@G45e1))))) (set! G2fdb@G2fd6 (make-record-type-descriptor 'env '#f 'G2fd9 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fdd@G2fd8 '#f) (set! G2fdf@G2fd7 (make-record-constructor-descriptor G2fdb@G2fd6 '#f G2fdd@G2fd8)) (set! G2fe2@env? (record-predicate G2fdb@G2fd6)) (set! G2fe4@make-env (record-constructor G2fdf@G2fd7)) (set! G2fe6@env-names (record-accessor G2fdb@G2fd6 '0)) (set! G2fe8@env-labels (record-accessor G2fdb@G2fd6 '1)) (set! G2fea@env-itc (record-accessor G2fdb@G2fd6 '2)) (set! G2fec@set-env-names! (record-mutator G2fdb@G2fd6 '0)) (set! G2fee@set-env-labels! (record-mutator G2fdb@G2fd6 '1)) (set! G2ff0@set-env-itc! (record-mutator G2fdb@G2fd6 '2)) (set! G2ff2@rp (G28f2@G2825@make-record-printer 'env (lambda (G460e@x G460f@p G4610@wr) (display '"#<environment>" G460f@p)))) (set! G2ff8@G2ff3 (make-record-type-descriptor 'interaction-env '#f 'G2ff6 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G2ffa@G2ff5 '#f) (set! G2ffc@G2ff4 (make-record-constructor-descriptor G2ff8@G2ff3 '#f G2ffa@G2ff5)) (set! G2fff@interaction-env? (record-predicate G2ff8@G2ff3)) (set! G3001@make-interaction-env (record-constructor G2ffc@G2ff4)) (set! G3003@interaction-env-rib (record-accessor G2ff8@G2ff3 '0)) (set! G3005@interaction-env-r (record-accessor G2ff8@G2ff3 '1)) (set! G3007@interaction-env-locs (record-accessor G2ff8@G2ff3 '2)) (set! G3009@set-interaction-env-rib! (record-mutator G2ff8@G2ff3 '0)) (set! G300b@set-interaction-env-r! (record-mutator G2ff8@G2ff3 '1)) (set! G300d@set-interaction-env-locs! (record-mutator G2ff8@G2ff3 '2)) (set! G300f@rp (G28f2@G2825@make-record-printer 'interaction-env (lambda (G4614@x G4615@p G4616@wr) (display '"#<environment>" G4615@p)))) (set! G3011@interaction-environment-symbols (lambda () (G3019@environment-symbols (G304f@interaction-environment)))) (set! G3013@environment-bindings (lambda (G461a@e) (vector->list (vector-map (lambda (G461c@name G461d@label) (G3015@parse-binding (cons G461c@name (G2b6f@G2a15@imported-label->binding G461d@label)))) (G2fe6@env-names G461a@e) (G2fe8@env-labels G461a@e))))) (set! G3015@parse-binding (lambda (G4620@b) (cons (car G4620@b) ((lambda (G4622@t) (if (memv G4622@t '(core-prim global)) 'procedure (if (memv G4622@t '(core-macro macro global-macro)) 'syntax (if (memv G4622@t '($core-rtd)) 'record (if (eq? (car G4620@b) (cadr G4620@b)) 'syntax 'unknown))))) (cadr G4620@b))))) (set! G3017@environment? (lambda (G4624@x) (or (G2fe2@env? G4624@x) (G2fff@interaction-env? G4624@x)))) (set! G3019@environment-symbols (lambda (G4626@x) (if (G2fe2@env? G4626@x) (vector->list (G2fe6@env-names G4626@x)) (if (G2fff@interaction-env? G4626@x) (map values (G2cf0@rib-sym* (G3003@interaction-env-rib G4626@x))) (assertion-violation 'environment-symbols '"not an environment" G4626@x))))) (set! G301b@environment (lambda G4628@imp* ((lambda (G462a@itc) ((lambda (G462e@G462c G462f@G462d) ((lambda (G4632@swap) (dynamic-wind G4632@swap (lambda () (call-with-values (lambda () (G2fbf@parse-import-spec* G4628@imp*)) (lambda (G4636@G4634 G4637@G4635) ((lambda (G463a@subst-labels G463b@subst-names) (G2fe4@make-env G463b@subst-names G463a@subst-labels G462a@itc)) G4637@G4635 G4636@G4634)))) G4632@swap)) (lambda () ((lambda (G463e@t) (begin (G462e@G462c G462f@G462d) (set! G462f@G462d G463e@t))) (G462e@G462c))))) G2fc9@imp-collector G462a@itc)) (G2fc3@make-collector)))) (set! G301d@null-environment (lambda (G4640@n) (begin (if (not (eqv? G4640@n '5)) (assertion-violation 'null-environment '"not 5" G4640@n) (void)) (G301b@environment '(psyntax null-environment-5))))) (set! G301f@scheme-report-environment (lambda (G4642@n) (begin (if (not (eqv? G4642@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4642@n) (void)) (G301b@environment '(psyntax scheme-report-environment-5))))) (set! G3021@expand (lambda (G4644@x G4645@env) (if (G2fe2@env? G4645@env) ((lambda (G4648@rib) ((lambda (G464a@x G464b@itc G464c@rtc G464d@vtc) ((lambda (G4652@x) (begin (G2d10@seal-rib! G4648@rib) (values G4652@x (G464c@rtc)))) ((lambda (G465c@G4654 G465d@G4655 G465e@G4656 G465f@G4657 G4660@G4658 G4661@G4659 G4662@G465a G4663@G465b) ((lambda (G466c@swap) (dynamic-wind G466c@swap (lambda () (G2f7c@chi-expr G464a@x '() '())) G466c@swap)) (lambda () (begin ((lambda (G466e@t) (begin (G465c@G4654 G4660@G4658) (set! G4660@G4658 G466e@t))) (G465c@G4654)) ((lambda (G4670@t) (begin (G465d@G4655 G4661@G4659) (set! G4661@G4659 G4670@t))) (G465d@G4655)) ((lambda (G4672@t) (begin (G465e@G4656 G4662@G465a) (set! G4662@G465a G4672@t))) (G465e@G4656)) ((lambda (G4674@t) (begin (G465f@G4657 G4663@G465b) (set! G4663@G465b G4674@t))) (G465f@G4657)))))) G3051@top-level-context G2fc5@inv-collector G2fc7@vis-collector G2fc9@imp-collector '#f G464c@rtc G464d@vtc G464b@itc))) (G2d23@make-stx G4644@x G2cd1@top-mark* (list G4648@rib) '()) (G2fea@env-itc G4645@env) (G2fc3@make-collector) (G2fc3@make-collector))) (G2fc1@make-top-rib (G2fe6@env-names G4645@env) (G2fe8@env-labels G4645@env))) (if (G2fff@interaction-env? G4645@env) ((lambda (G4676@rib G4677@r G4678@rtc) ((lambda (G467c@x) (call-with-values (lambda () ((lambda (G4688@G4680 G4689@G4681 G468a@G4682 G468b@G4683 G468c@G4684 G468d@G4685 G468e@G4686 G468f@G4687) ((lambda (G4698@swap) (dynamic-wind G4698@swap (lambda () (G2fcd@chi-interaction-expr G467c@x G4676@rib G4677@r)) G4698@swap)) (lambda () (begin ((lambda (G469a@t) (begin (G4688@G4680 G468c@G4684) (set! G468c@G4684 G469a@t))) (G4688@G4680)) ((lambda (G469c@t) (begin (G4689@G4681 G468d@G4685) (set! G468d@G4685 G469c@t))) (G4689@G4681)) ((lambda (G469e@t) (begin (G468a@G4682 G468e@G4686) (set! G468e@G4686 G469e@t))) (G468a@G4682)) ((lambda (G46a0@t) (begin (G468b@G4683 G468f@G4687) (set! G468f@G4687 G46a0@t))) (G468b@G4683)))))) G3051@top-level-context G2fc5@inv-collector G2fc7@vis-collector G2fc9@imp-collector G4645@env G4678@rtc (G2fc3@make-collector) (G2fc3@make-collector))) (lambda (G46a2@G467e G46a3@G467f) ((lambda (G46a6@r^ G46a7@e) (begin (G300b@set-interaction-env-r! G4645@env G46a6@r^) (values G46a7@e (G4678@rtc)))) G46a3@G467f G46a2@G467e)))) (G2d23@make-stx G4644@x G2cd1@top-mark* (list G4676@rib) '()))) (G3003@interaction-env-rib G4645@env) (G3005@interaction-env-r G4645@env) (G2fc3@make-collector)) (assertion-violation 'expand '"not an environment" G4645@env))))) (set! G3023@eval (lambda (G46aa@x G46ab@env) (begin (if (not (G3017@environment? G46ab@env)) (error 'eval '"not an environment" G46ab@env) (void)) (call-with-values (lambda () (G3021@expand G46aa@x G46ab@env)) (lambda (G46b0@G46ae G46b1@G46af) ((lambda (G46b4@invoke-req* G46b5@x) (begin (for-each G2b70@G2a17@invoke-library G46b4@invoke-req*) (eval-core (G2949@G2901@expanded->core G46b5@x)))) G46b1@G46af G46b0@G46ae)))))) (set! G3025@library-expander (lambda G471d ((lambda (G471e) (if (= G471e '3) (apply (lambda (G46b8@x G46b9@filename G46ba@verify-name) ((lambda (G46bf@build-visit-code G46c1@visit!) (begin (set! G46bf@build-visit-code (lambda (G470b@macro*) (if (null? G470b@macro*) (G2cb7@G2c29@build-void) (G2cb6@G2c27@build-sequence '#f (map (lambda (G470d@x) ((lambda (G470f@loc G4710@src) (list 'set! G470f@loc G4710@src)) (car G470d@x) (cddr G470d@x))) G470b@macro*))))) (set! G46c1@visit! (lambda (G4703@macro*) (for-each (lambda (G4705@x) ((lambda (G4707@loc G4708@proc) (set-symbol-value! G4707@loc G4708@proc)) (car G4705@x) (cadr G4705@x))) G4703@macro*))) (call-with-values (lambda () (G2fd1@core-library-expander G46b8@x G46ba@verify-name)) (lambda (G46cb@G46c2 G46cc@G46c3 G46cd@G46c4 G46ce@G46c5 G46cf@G46c6 G46d0@G46c7 G46d1@G46c8 G46d2@G46c9 G46d3@G46ca) ((lambda (G46dd@export-env G46de@export-subst G46df@macro* G46e0@invoke-code G46e1@vis* G46e2@inv* G46e3@imp* G46e4@ver G46e5@name) ((lambda (G46ef@id G46f0@name G46f1@ver G46f2@imp* G46f3@vis* G46f4@inv* G46f5@visit-proc G46f6@invoke-proc G46f7@visit-code G46f8@invoke-code) (begin (G2b6e@G2a13@install-library G46ef@id G46f0@name G46f1@ver G46f2@imp* G46f3@vis* G46f4@inv* G46de@export-subst G46dd@export-env G46f5@visit-proc G46f6@invoke-proc G46f7@visit-code G46f8@invoke-code '#t G46b9@filename) (values G46ef@id G46f0@name G46f1@ver G46f2@imp* G46f3@vis* G46f4@inv* G46f8@invoke-code G46f7@visit-code G46de@export-subst G46dd@export-env))) (gensym) G46e5@name G46e4@ver (map G2b74@G2a1f@library-spec G46e3@imp*) (map G2b74@G2a1f@library-spec G46e1@vis*) (map G2b74@G2a1f@library-spec G46e2@inv*) (lambda () (G46c1@visit! G46df@macro*)) (lambda () (eval-core (G2949@G2901@expanded->core G46e0@invoke-code))) (G46bf@build-visit-code G46df@macro*) G46e0@invoke-code)) G46d3@G46ca G46d2@G46c9 G46d1@G46c8 G46d0@G46c7 G46cf@G46c6 G46ce@G46c5 G46cd@G46c4 G46cc@G46c3 G46cb@G46c2))))) '#f '#f)) G471d) (if (= G471e '2) (apply (lambda (G4713@x G4714@filename) (G3025@library-expander G4713@x G4714@filename (lambda (G4717@x) (values)))) G471d) (if (= G471e '1) (apply (lambda (G4719@x) (G3025@library-expander G4719@x '#f (lambda (G471b@x) (values)))) G471d) (error 'apply '"invalid arg count"))))) (length G471d)))) (set! G3027@boot-library-expand (lambda (G471f@x) (call-with-values (lambda () (G3025@library-expander G471f@x)) (lambda (G472b@G4721 G472c@G4722 G472d@G4723 G472e@G4724 G472f@G4725 G4730@G4726 G4731@G4727 G4732@G4728 G4733@G4729 G4734@G472a) ((lambda (G473f@export-env G4740@export-subst G4741@visit-code G4742@invoke-code G4743@inv* G4744@vis* G4745@imp* G4746@ver G4747@name G4748@id) (values G4747@name G4742@invoke-code G4740@export-subst G473f@export-env)) G4734@G472a G4733@G4729 G4732@G4728 G4731@G4727 G4730@G4726 G472f@G4725 G472e@G4724 G472d@G4723 G472c@G4722 G472b@G4721))))) (set! G3029@rev-map-append (lambda (G4753@f G4754@ls G4755@ac) (if (null? G4754@ls) G4755@ac (G3029@rev-map-append G4753@f (cdr G4754@ls) (cons (G4753@f (car G4754@ls)) G4755@ac))))) (set! G302b@build-exports (lambda (G4759@lex*+loc* G475a@init*) (G2cb6@G2c27@build-sequence '#f (cons (G2cb7@G2c29@build-void) (G3029@rev-map-append (lambda (G475d@x) (list 'set! (cdr G475d@x) (car G475d@x))) G4759@lex*+loc* G475a@init*))))) (set! G302d@make-export-subst (lambda (G475f@name* G4760@id*) (map (lambda (G4763@name G4764@id) ((lambda (G4767@label) (begin (if (not G4767@label) (G3043@syntax-violation '#f '"cannot export unbound identifier" G4764@id) (void)) (cons G4763@name G4767@label))) (G2d73@id->label G4764@id))) G475f@name* G4760@id*))) (set! G302f@make-export-env/macros (lambda (G4769@lex* G476a@loc* G476b@r) ((lambda (G4770@lookup) (begin (set! G4770@lookup (lambda (G478d@x) ((letrec ((G478f@f (lambda (G4791@x G4792@lex* G4793@loc*) (if (pair? G4792@lex*) (if (eq? G4791@x (car G4792@lex*)) (car G4793@loc*) (G478f@f G4791@x (cdr G4792@lex*) (cdr G4793@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G478f@f) G478d@x G4769@lex* G476a@loc*))) ((letrec ((G4771@f (lambda (G4773@r G4774@env G4775@global* G4776@macro*) (if (null? G4773@r) (values G4774@env G4775@global* G4776@macro*) ((lambda (G477b@x) ((lambda (G477d@label G477e@b) ((lambda (G4781@t) (if (memv G4781@t '(lexical)) ((lambda (G4783@v) ((lambda (G4785@loc G4786@type) (G4771@f (cdr G4773@r) (cons (cons* G477d@label G4786@type G4785@loc) G4774@env) (cons (cons (G2ee4@lexical-var G4783@v) G4785@loc) G4775@global*) G4776@macro*)) (G4770@lookup (G2ee4@lexical-var G4783@v)) (if (G2ee6@lexical-mutable? G4783@v) 'mutable 'global))) (G2d7d@binding-value G477e@b)) (if (memv G4781@t '(local-macro)) ((lambda (G4789@loc) (G4771@f (cdr G4773@r) (cons (cons* G477d@label 'global-macro G4789@loc) G4774@env) G4775@global* (cons (cons G4789@loc (G2d7d@binding-value G477e@b)) G4776@macro*))) (gensym)) (if (memv G4781@t '(local-macro!)) ((lambda (G478b@loc) (G4771@f (cdr G4773@r) (cons (cons* G477d@label 'global-macro! G478b@loc) G4774@env) G4775@global* (cons (cons G478b@loc (G2d7d@binding-value G477e@b)) G4776@macro*))) (gensym)) (if (memv G4781@t '($rtd $module)) (G4771@f (cdr G4773@r) (cons G477b@x G4774@env) G4775@global* G4776@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d7b@binding-type G477e@b) (G2d7d@binding-value G477e@b))))))) (G2d7b@binding-type G477e@b))) (car G477b@x) (cdr G477b@x))) (car G4773@r)))))) G4771@f) G476b@r '() '() '()))) '#f))) (set! G3031@generate-temporaries (lambda (G4797@ls) ((lambda (G4799@t) ((lambda (G479b@ls/false) (if G479b@ls/false (apply (lambda (G479d@ls) (map (lambda (G479f@x) (G2d23@make-stx ((lambda (G47a1@x) (if (or (symbol? G47a1@x) (string? G47a1@x)) (gensym G47a1@x) (gensym 't))) (G3049@syntax->datum G479f@x)) G2cd1@top-mark* '() '())) G479d@ls)) G479b@ls/false) ((lambda (G47a3@t) ((lambda (G47a5@ls/false) (if G47a5@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47a5@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G47a3@t))) (G2f58@syntax-dispatch G47a3@t '_))) G4799@t))) (G2f58@syntax-dispatch G4799@t 'each-any))) G4797@ls))) (set! G3033@free-identifier=? (lambda (G47a7@x G47a8@y) (if (G2d59@id? G47a7@x) (if (G2d59@id? G47a8@y) (G2d61@free-id=? G47a7@x G47a8@y) (assertion-violation 'free-identifier=? '"not an identifier" G47a8@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47a7@x)))) (set! G3035@bound-identifier=? (lambda (G47ab@x G47ac@y) (if (G2d59@id? G47ab@x) (if (G2d59@id? G47ac@y) (G2d5f@bound-id=? G47ab@x G47ac@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47ac@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47ab@x)))) (set! G3037@make-source-condition (lambda (G47af@x) ((lambda (G47b9@G47b4 G47bb@G47b6 G47bd@G47b5 G47c0@G47b3 G47c2@make-source-condition G47c4@G47b1 G47c6@G47b2 G47c8@source-condition? G47ca@source-filename G47cc@source-character) (begin (set! G47b9@G47b4 (make-record-type-descriptor '&source-information G4c0b@G495c@&condition-rtd 'G47b7 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47bb@G47b6 '#f) (set! G47bd@G47b5 (make-record-constructor-descriptor G47b9@G47b4 G4c0c@G495e@&condition-rcd G47bb@G47b6)) (set! G47c0@G47b3 (record-predicate G47b9@G47b4)) (set! G47c2@make-source-condition (record-constructor G47bd@G47b5)) (set! G47c4@G47b1 (record-accessor G47b9@G47b4 '0)) (set! G47c6@G47b2 (record-accessor G47b9@G47b4 '1)) (set! G47c8@source-condition? (condition-predicate G47b9@G47b4)) (set! G47ca@source-filename (condition-accessor G47b9@G47b4 G47c4@G47b1)) (set! G47cc@source-character (condition-accessor G47b9@G47b4 G47c6@G47b2)) (if (pair? G47af@x) (G47c2@make-source-condition (car G47af@x) (cdr G47af@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3039@extract-position-condition (lambda (G47cd@x) (G3037@make-source-condition (G303b@expression-position G47cd@x)))) (set! G303b@expression-position (lambda (G47cf@x) (and (G2d21@stx? G47cf@x) ((lambda (G47d1@x) (and (G28ea@G2815@annotation? G47d1@x) (G28eb@G2817@annotation-source G47d1@x))) (G2d25@stx-expr G47cf@x))))) (set! G303d@assertion-error (lambda (G47d3@expr G47d4@pos) (raise (condition (G4c3b@G4a1e@make-assertion-violation) (G4c4d@G4a4e@make-who-condition 'assert) (G4c11@G49b1@make-message-condition '"assertion failed") (G4c43@G4a34@make-irritants-condition (list G47d3@expr)) (G3037@make-source-condition G47d4@pos))))) (set! G303f@syntax-error (lambda (G47d7@x . G47d9@args) (begin (if (not (for-all string? G47d9@args)) (assertion-violation 'syntax-error '"invalid argument" G47d9@args) (void)) (raise (condition (G4c11@G49b1@make-message-condition (if (null? G47d9@args) '"invalid syntax" (apply string-append G47d9@args))) (G4c6f@G4aa8@make-syntax-violation (G3049@syntax->datum G47d7@x) '#f) (G3039@extract-position-condition G47d7@x)))))) (set! G3041@syntax-violation* (lambda (G47db@who G47dc@msg G47dd@form G47de@condition-object) (begin (if (not (string? G47dc@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47dc@msg) (void)) ((lambda (G47e3@who) (raise (condition (if G47e3@who (G4c4d@G4a4e@make-who-condition G47e3@who) (condition)) (G4c11@G49b1@make-message-condition G47dc@msg) G47de@condition-object (G3039@extract-position-condition G47dd@form)))) (if (or (string? G47db@who) (symbol? G47db@who)) G47db@who (if (not G47db@who) ((lambda (G47e5@t) ((lambda (G47e7@ls/false) (if (and G47e7@ls/false (apply (lambda (G47e9@id) (G2d59@id? G47e9@id)) G47e7@ls/false)) (apply (lambda (G47eb@id) (G3049@syntax->datum G47eb@id)) G47e7@ls/false) ((lambda (G47ed@t) ((lambda (G47ef@ls/false) (if (and G47ef@ls/false (apply (lambda (G47f1@id G47f2@rest) (G2d59@id? G47f1@id)) G47ef@ls/false)) (apply (lambda (G47f5@id G47f6@rest) (G3049@syntax->datum G47f5@id)) G47ef@ls/false) ((lambda (G47f9@t) ((lambda (G47fb@ls/false) (if G47fb@ls/false (apply (lambda () '#f) G47fb@ls/false) (G3043@syntax-violation '#f '"invalid syntax" G47f9@t))) (G2f58@syntax-dispatch G47f9@t '_))) G47ed@t))) (G2f58@syntax-dispatch G47ed@t '(any . any)))) G47e5@t))) (G2f58@syntax-dispatch G47e5@t 'any))) G47dd@form) (assertion-violation 'syntax-violation '"invalid who argument" G47db@who))))))) (set! G3043@syntax-violation (lambda G480b ((lambda (G480c) (if (= G480c '3) (apply (lambda (G47fd@who G47fe@msg G47ff@form) (G3043@syntax-violation G47fd@who G47fe@msg G47ff@form '#f)) G480b) (if (= G480c '4) (apply (lambda (G4803@who G4804@msg G4805@form G4806@subform) (G3041@syntax-violation* G4803@who G4804@msg G4805@form (G4c6f@G4aa8@make-syntax-violation (G3049@syntax->datum G4805@form) (G3049@syntax->datum G4806@subform)))) G480b) (error 'apply '"invalid arg count")))) (length G480b)))) (set! G3045@identifier? (lambda (G480d@x) (G2d59@id? G480d@x))) (set! G3047@datum->syntax (lambda (G480f@id G4810@datum) (if (G2d59@id? G480f@id) (G2d37@datum->stx G480f@id G4810@datum) (assertion-violation 'datum->syntax '"not an identifier" G480f@id)))) (set! G3049@syntax->datum (lambda (G4813@x) (G2d6f@stx->datum G4813@x))) (set! G304b@compile-r6rs-top-level (lambda (G4815@x*) (call-with-values (lambda () (G2fd5@top-level-expander G4815@x*)) (lambda (G4819@G4817 G481a@G4818) ((lambda (G481d@invoke-code G481e@lib*) (lambda () (begin (for-each G2b70@G2a17@invoke-library G481e@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2949@G2901@expanded->core G481d@invoke-code)) (void)) (eval-core (G2949@G2901@expanded->core G481d@invoke-code))))) G481a@G4818 G4819@G4817))))) (set! G304d@pre-compile-r6rs-top-level (lambda (G4821@x*) (call-with-values (lambda () (G2fd5@top-level-expander G4821@x*)) (lambda (G4825@G4823 G4826@G4824) ((lambda (G4829@invoke-code G482a@lib*) (begin (for-each G2b70@G2a17@invoke-library G482a@lib*) (G28f3@G2827@compile-core (G2949@G2901@expanded->core G4829@invoke-code)))) G4826@G4824 G4825@G4823))))) (set! G304f@interaction-environment ((lambda (G482d@the-env) (lambda () (or G482d@the-env ((lambda (G482f@lib G4830@rib) (begin ((lambda (G4833@subst) (begin (G2cfa@set-rib-sym*! G4830@rib (map car G4833@subst)) (G2cfc@set-rib-mark**! G4830@rib (map (lambda (G4835@x) G2cd1@top-mark*) G4833@subst)) (G2cfe@set-rib-label*! G4830@rib (map cdr G4833@subst)))) (G2b45@G29c1@library-subst G482f@lib)) ((lambda (G4837@env) (begin (set! G482d@the-env G4837@env) G4837@env)) (G3001@make-interaction-env G4830@rib '() '())))) (G2b69@G2a09@find-library-by-name '(mosh interaction)) (G2d06@make-cache-rib))))) '#f)) (set! G3051@top-level-context (G28f5@G282b@make-parameter '#f)) (begin (set! G4947@G3051@top-level-context G3051@top-level-context) (set! G4946@G304f@interaction-environment G304f@interaction-environment) (set! G4945@G304d@pre-compile-r6rs-top-level G304d@pre-compile-r6rs-top-level) (set! G4944@G304b@compile-r6rs-top-level G304b@compile-r6rs-top-level) (set! G4943@G3049@syntax->datum G3049@syntax->datum) (set! G4942@G3047@datum->syntax G3047@datum->syntax) (set! G4941@G3045@identifier? G3045@identifier?) (set! G4940@G3043@syntax-violation G3043@syntax-violation) (set! G493f@G3041@syntax-violation* G3041@syntax-violation*) (set! G493e@G303f@syntax-error G303f@syntax-error) (set! G493d@G303d@assertion-error G303d@assertion-error) (set! G493c@G303b@expression-position G303b@expression-position) (set! G493b@G3039@extract-position-condition G3039@extract-position-condition) (set! G493a@G3037@make-source-condition G3037@make-source-condition) (set! G4939@G3035@bound-identifier=? G3035@bound-identifier=?) (set! G4938@G3033@free-identifier=? G3033@free-identifier=?) (set! G4937@G3031@generate-temporaries G3031@generate-temporaries) (set! G4936@G302f@make-export-env/macros G302f@make-export-env/macros) (set! G4935@G302d@make-export-subst G302d@make-export-subst) (set! G4934@G302b@build-exports G302b@build-exports) (set! G4933@G3029@rev-map-append G3029@rev-map-append) (set! G4932@G3027@boot-library-expand G3027@boot-library-expand) (set! G4931@G3025@library-expander G3025@library-expander) (set! G4930@G3023@eval G3023@eval) (set! G492f@G3021@expand G3021@expand) (set! G492e@G301f@scheme-report-environment G301f@scheme-report-environment) (set! G492d@G301d@null-environment G301d@null-environment) (set! G492c@G301b@environment G301b@environment) (set! G492b@G3019@environment-symbols G3019@environment-symbols) (set! G492a@G3017@environment? G3017@environment?) (set! G4929@G3015@parse-binding G3015@parse-binding) (set! G4928@G3013@environment-bindings G3013@environment-bindings) (set! G4927@G3011@interaction-environment-symbols G3011@interaction-environment-symbols) (set! G4926@G300f@rp G300f@rp) (set! G4925@G300d@set-interaction-env-locs! G300d@set-interaction-env-locs!) (set! G4924@G300b@set-interaction-env-r! G300b@set-interaction-env-r!) (set! G4923@G3009@set-interaction-env-rib! G3009@set-interaction-env-rib!) (set! G4922@G3007@interaction-env-locs G3007@interaction-env-locs) (set! G4921@G3005@interaction-env-r G3005@interaction-env-r) (set! G4920@G3003@interaction-env-rib G3003@interaction-env-rib) (set! G491f@G3001@make-interaction-env G3001@make-interaction-env) (set! G491e@G2fff@interaction-env? G2fff@interaction-env?) (set! G491d@G2ffc@G2ff4 G2ffc@G2ff4) (set! G491c@G2ffa@G2ff5 G2ffa@G2ff5) (set! G491b@G2ff8@G2ff3 G2ff8@G2ff3) (set! G491a@G2ff2@rp G2ff2@rp) (set! G4919@G2ff0@set-env-itc! G2ff0@set-env-itc!) (set! G4918@G2fee@set-env-labels! G2fee@set-env-labels!) (set! G4917@G2fec@set-env-names! G2fec@set-env-names!) (set! G4916@G2fea@env-itc G2fea@env-itc) (set! G4915@G2fe8@env-labels G2fe8@env-labels) (set! G4914@G2fe6@env-names G2fe6@env-names) (set! G4913@G2fe4@make-env G2fe4@make-env) (set! G4912@G2fe2@env? G2fe2@env?) (set! G4911@G2fdf@G2fd7 G2fdf@G2fd7) (set! G4910@G2fdd@G2fd8 G2fdd@G2fd8) (set! G490f@G2fdb@G2fd6 G2fdb@G2fd6) (set! G490e@G2fd5@top-level-expander G2fd5@top-level-expander) (set! G490d@G2fd3@parse-top-level-program G2fd3@parse-top-level-program) (set! G490c@G2fd1@core-library-expander G2fd1@core-library-expander) (set! G490b@G2fcf@library-body-expander G2fcf@library-body-expander) (set! G490a@G2fcd@chi-interaction-expr G2fcd@chi-interaction-expr) (set! G4909@G2fcb@chi-library-internal G2fcb@chi-library-internal) (set! G4908@G2fc9@imp-collector G2fc9@imp-collector) (set! G4907@G2fc7@vis-collector G2fc7@vis-collector) (set! G4906@G2fc5@inv-collector G2fc5@inv-collector) (set! G4905@G2fc3@make-collector G2fc3@make-collector) (set! G4904@G2fc1@make-top-rib G2fc1@make-top-rib) (set! G4903@G2fbf@parse-import-spec* G2fbf@parse-import-spec*) (set! G4902@G2fbd@parse-library G2fbd@parse-library) (set! G4901@G2fbb@parse-library-name G2fbb@parse-library-name) (set! G4900@G2fb9@parse-exports G2fb9@parse-exports) (set! G48ff@G2fb7@expand-transformer G2fb7@expand-transformer) (set! G48fe@G2fb5@chi-body* G2fb5@chi-body*) (set! G48fd@G2fb3@chi-internal-module G2fb3@chi-internal-module) (set! G48fc@G2fb1@module-interface-exp-id* G2fb1@module-interface-exp-id*) (set! G48fb@G2faf@set-module-interface-exp-lab-vec! G2faf@set-module-interface-exp-lab-vec!) (set! G48fa@G2fad@set-module-interface-exp-id-vec! G2fad@set-module-interface-exp-id-vec!) (set! G48f9@G2fab@set-module-interface-first-mark! G2fab@set-module-interface-first-mark!) (set! G48f8@G2fa9@module-interface-exp-lab-vec G2fa9@module-interface-exp-lab-vec) (set! G48f7@G2fa7@module-interface-exp-id-vec G2fa7@module-interface-exp-id-vec) (set! G48f6@G2fa5@module-interface-first-mark G2fa5@module-interface-first-mark) (set! G48f5@G2fa3@make-module-interface G2fa3@make-module-interface) (set! G48f4@G2fa1@module-interface? G2fa1@module-interface?) (set! G48f3@G2f9e@G2f96 G2f9e@G2f96) (set! G48f2@G2f9c@G2f97 G2f9c@G2f97) (set! G48f1@G2f9a@G2f95 G2f9a@G2f95) (set! G48f0@G2f94@parse-module G2f94@parse-module) (set! G48ef@G2f92@chi-internal G2f92@chi-internal) (set! G48ee@G2f90@find-dups G2f90@find-dups) (set! G48ed@G2f8e@find-bound=? G2f8e@find-bound=?) (set! G48ec@G2f8c@chi-rhs* G2f8c@chi-rhs*) (set! G48eb@G2f8a@expand-interaction-rhs*/init* G2f8a@expand-interaction-rhs*/init*) (set! G48ea@G2f88@chi-rhs G2f88@chi-rhs) (set! G48e9@G2f86@chi-defun G2f86@chi-defun) (set! G48e8@G2f84@chi-lambda-clause* G2f84@chi-lambda-clause*) (set! G48e7@G2f82@chi-lambda-clause G2f82@chi-lambda-clause) (set! G48e6@G2f80@verify-formals G2f80@verify-formals) (set! G48e5@G2f7e@chi-set! G2f7e@chi-set!) (set! G48e4@G2f7c@chi-expr G2f7c@chi-expr) (set! G48e3@G2f7a@chi-application G2f7a@chi-application) (set! G48e2@G2f78@chi-expr* G2f78@chi-expr*) (set! G48e1@G2f76@chi-global-macro G2f76@chi-global-macro) (set! G48e0@G2f74@chi-local-macro G2f74@chi-local-macro) (set! G48df@G2f72@chi-macro G2f72@chi-macro) (set! G48de@G2f70@do-macro-call G2f70@do-macro-call) (set! G48dd@G2f6e@local-macro-transformer G2f6e@local-macro-transformer) (set! G48dc@G2f6c@macro-transformer G2f6c@macro-transformer) (set! G48db@G2f6a@symbol-macro G2f6a@symbol-macro) (set! G48da@G2f68@file-options-macro G2f68@file-options-macro) (set! G48d9@G2f66@core-macro-transformer G2f66@core-macro-transformer) (set! G48d8@G2f64@syntax-transformer G2f64@syntax-transformer) (set! G48d7@G2f62@ellipsis-map G2f62@ellipsis-map) (set! G48d6@G2f60@syntax-case-transformer G2f60@syntax-case-transformer) (set! G48d5@G2f5e@verify-literals G2f5e@verify-literals) (set! G48d4@G2f5c@underscore? G2f5c@underscore?) (set! G48d3@G2f5a@ellipsis? G2f5a@ellipsis?) (set! G48d2@G2f58@syntax-dispatch G2f58@syntax-dispatch) (set! G48d1@G2f56@convert-pattern G2f56@convert-pattern) (set! G48d0@G2f54@foreign-call-transformer G2f54@foreign-call-transformer) (set! G48cf@G2f52@parameterize-macro G2f52@parameterize-macro) (set! G48ce@G2f50@incorrect-usage-macro G2f50@incorrect-usage-macro) (set! G48cd@G2f4e@define-condition-type-macro G2f4e@define-condition-type-macro) (set! G48cc@G2f4c@define-record-type-macro G2f4c@define-record-type-macro) (set! G48cb@G2f4a@define-struct-macro G2f4a@define-struct-macro) (set! G48ca@G2f48@quasisyntax-macro G2f48@quasisyntax-macro) (set! G48c9@G2f46@quasiquote-macro G2f46@quasiquote-macro) (set! G48c8@G2f44@syntax-rules-macro G2f44@syntax-rules-macro) (set! G48c7@G2f42@include-into-macro G2f42@include-into-macro) (set! G48c6@G2f40@include-macro G2f40@include-macro) (set! G48c5@G2f3e@do-include G2f3e@do-include) (set! G48c4@G2f3c@cond-macro G2f3c@cond-macro) (set! G48c3@G2f3a@and-macro G2f3a@and-macro) (set! G48c2@G2f38@or-macro G2f38@or-macro) (set! G48c1@G2f36@let*-macro G2f36@let*-macro) (set! G48c0@G2f34@do-macro G2f34@do-macro) (set! G48bf@G2f32@identifier-syntax-macro G2f32@identifier-syntax-macro) (set! G48be@G2f30@endianness-macro G2f30@endianness-macro) (set! G48bd@G2f2e@assert-macro G2f2e@assert-macro) (set! G48bc@G2f2c@delay-macro G2f2c@delay-macro) (set! G48bb@G2f2a@time-macro G2f2a@time-macro) (set! G48ba@G2f28@define-enumeration-macro G2f28@define-enumeration-macro) (set! G48b9@G2f26@guard-macro G2f26@guard-macro) (set! G48b8@G2f24@trace-letrec-syntax-macro G2f24@trace-letrec-syntax-macro) (set! G48b7@G2f22@trace-let-syntax-macro G2f22@trace-let-syntax-macro) (set! G48b6@G2f20@trace-let/rec-syntax G2f20@trace-let/rec-syntax) (set! G48b5@G2f1e@trace-define-syntax-macro G2f1e@trace-define-syntax-macro) (set! G48b4@G2f1c@trace-define-macro G2f1c@trace-define-macro) (set! G48b3@G2f1a@trace-lambda-macro G2f1a@trace-lambda-macro) (set! G48b2@G2f18@let*-values-macro G2f18@let*-values-macro) (set! G48b1@G2f16@let-values-macro G2f16@let-values-macro) (set! G48b0@G2f14@let-macro G2f14@let-macro) (set! G48af@G2f12@invalid-fmls-error G2f12@invalid-fmls-error) (set! G48ae@G2f10@with-syntax-macro G2f10@with-syntax-macro) (set! G48ad@G2f0e@bless G2f0e@bless) (set! G48ac@G2f0c@lambda-transformer G2f0c@lambda-transformer) (set! G48ab@G2f0a@case-lambda-transformer G2f0a@case-lambda-transformer) (set! G48aa@G2f08@quote-transformer G2f08@quote-transformer) (set! G48a9@G2f06@case-macro G2f06@case-macro) (set! G48a8@G2f04@or-transformer G2f04@or-transformer) (set! G48a7@G2f02@and-transformer G2f02@and-transformer) (set! G48a6@G2f00@if-transformer G2f00@if-transformer) (set! G48a5@G2efe@unless-macro G2efe@unless-macro) (set! G48a4@G2efc@when-macro G2efc@when-macro) (set! G48a3@G2efa@record-constructor-descriptor-transformer G2efa@record-constructor-descriptor-transformer) (set! G48a2@G2ef8@record-type-descriptor-transformer G2ef8@record-type-descriptor-transformer) (set! G48a1@G2ef6@type-descriptor-transformer G2ef6@type-descriptor-transformer) (set! G48a0@G2ef4@fluid-let-syntax-transformer G2ef4@fluid-let-syntax-transformer) (set! G489f@G2ef2@letrec*-transformer G2ef2@letrec*-transformer) (set! G489e@G2ef0@letrec-transformer G2ef0@letrec-transformer) (set! G489d@G2eee@letrec-helper G2eee@letrec-helper) (set! G489c@G2eec@add-lexicals G2eec@add-lexicals) (set! G489b@G2eea@add-lexical G2eea@add-lexical) (set! G489a@G2ee8@set-lexical-mutable! G2ee8@set-lexical-mutable!) (set! G4899@G2ee6@lexical-mutable? G2ee6@lexical-mutable?) (set! G4898@G2ee4@lexical-var G2ee4@lexical-var) (set! G4897@G2ee2@scheme-stx G2ee2@scheme-stx) (set! G4896@G2ee0@scheme-stx-hashtable G2ee0@scheme-stx-hashtable) (set! G4895@G2ede@parse-define-syntax G2ede@parse-define-syntax) (set! G4894@G2edc@parse-define G2edc@parse-define) (set! G4893@G2d99@make-eval-transformer G2d99@make-eval-transformer) (set! G4892@G2d97@variable-transformer-procedure G2d97@variable-transformer-procedure) (set! G4891@G2d95@variable-transformer? G2d95@variable-transformer?) (set! G4890@G2d93@make-variable-transformer G2d93@make-variable-transformer) (set! G488f@G2d91@sanitize-binding G2d91@sanitize-binding) (set! G488e@G2d81@syntax-type G2d81@syntax-type) (set! G488d@G2d7f@raise-unbound-error G2d7f@raise-unbound-error) (set! G488c@G2d7d@binding-value G2d7d@binding-value) (set! G488b@G2d7b@binding-type G2d7b@binding-type) (set! G488a@G2d79@make-binding G2d79@make-binding) (set! G4889@G2d77@label->binding G2d77@label->binding) (set! G4888@G2d75@id->real-label G2d75@id->real-label) (set! G4887@G2d73@id->label G2d73@id->label) (set! G4886@G2d71@same-marks*? G2d71@same-marks*?) (set! G4885@G2d6f@stx->datum G2d6f@stx->datum) (set! G4884@G2d6d@strip G2d6d@strip) (set! G4883@G2d6b@strip-annotations G2d6b@strip-annotations) (set! G4882@G2d69@self-evaluating? G2d69@self-evaluating?) (set! G4881@G2d67@bound-id-member? G2d67@bound-id-member?) (set! G4880@G2d65@distinct-bound-ids? G2d65@distinct-bound-ids?) (set! G487f@G2d63@valid-bound-ids? G2d63@valid-bound-ids?) (set! G487e@G2d61@free-id=? G2d61@free-id=?) (set! G487d@G2d5f@bound-id=? G2d5f@bound-id=?) (set! G487c@G2d5d@same-marks? G2d5d@same-marks?) (set! G487b@G2d5b@id->sym G2d5b@id->sym) (set! G487a@G2d59@id? G2d59@id?) (set! G4879@G2d57@syntax->list G2d57@syntax->list) (set! G4878@G2d55@syntax-cdr G2d55@syntax-cdr) (set! G4877@G2d53@syntax-car G2d53@syntax-car) (set! G4876@G2d51@syntax-list? G2d51@syntax-list?) (set! G4875@G2d4f@syntax-null? G2d4f@syntax-null?) (set! G4874@G2d4d@syntax-vector? G2d4d@syntax-vector?) (set! G4873@G2d4b@syntax-pair? G2d4b@syntax-pair?) (set! G4872@G2d49@syntax-vector->list G2d49@syntax-vector->list) (set! G4871@G2d47@syntax-kind? G2d47@syntax-kind?) (set! G4870@G2d45@add-subst G2d45@add-subst) (set! G486f@G2d43@add-mark G2d43@add-mark) (set! G486e@G2d41@mkstx G2d41@mkstx) (set! G486d@G2d3f@join-wraps G2d3f@join-wraps) (set! G486c@G2d3d@anti-mark? G2d3d@anti-mark?) (set! G486b@G2d3b@anti-mark G2d3b@anti-mark) (set! G486a@G2d39@gen-mark G2d39@gen-mark) (set! G4869@G2d37@datum->stx G2d37@datum->stx) (set! G4868@G2d35@rp G2d35@rp) (set! G4867@G2d33@set-stx-ae*! G2d33@set-stx-ae*!) (set! G4866@G2d31@set-stx-subst*! G2d31@set-stx-subst*!) (set! G4865@G2d2f@set-stx-mark*! G2d2f@set-stx-mark*!) (set! G4864@G2d2d@set-stx-expr! G2d2d@set-stx-expr!) (set! G4863@G2d2b@stx-ae* G2d2b@stx-ae*) (set! G4862@G2d29@stx-subst* G2d29@stx-subst*) (set! G4861@G2d27@stx-mark* G2d27@stx-mark*) (set! G4860@G2d25@stx-expr G2d25@stx-expr) (set! G485f@G2d23@make-stx G2d23@make-stx) (set! G485e@G2d21@stx? G2d21@stx?) (set! G485d@G2d1e@G2d16 G2d1e@G2d16) (set! G485c@G2d1c@G2d17 G2d1c@G2d17) (set! G485b@G2d1a@G2d15 G2d1a@G2d15) (set! G485a@G2d14@make-full-rib G2d14@make-full-rib) (set! G4859@G2d12@unseal-rib! G2d12@unseal-rib!) (set! G4858@G2d10@seal-rib! G2d10@seal-rib!) (set! G4857@G2d0e@make-rib-map G2d0e@make-rib-map) (set! G4856@G2d0c@extend-rib/nc! G2d0c@extend-rib/nc!) (set! G4855@G2d0a@extend-rib! G2d0a@extend-rib!) (set! G4854@G2d08@find-label G2d08@find-label) (set! G4853@G2d06@make-cache-rib G2d06@make-cache-rib) (set! G4852@G2d04@make-empty-rib G2d04@make-empty-rib) (set! G4851@G2d02@set-rib-cache! G2d02@set-rib-cache!) (set! G4850@G2d00@set-rib-sealed/freq! G2d00@set-rib-sealed/freq!) (set! G484f@G2cfe@set-rib-label*! G2cfe@set-rib-label*!) (set! G484e@G2cfc@set-rib-mark**! G2cfc@set-rib-mark**!) (set! G484d@G2cfa@set-rib-sym*! G2cfa@set-rib-sym*!) (set! G484c@G2cf8@rib-cache G2cf8@rib-cache) (set! G484b@G2cf6@rib-sealed/freq G2cf6@rib-sealed/freq) (set! G484a@G2cf4@rib-label* G2cf4@rib-label*) (set! G4849@G2cf2@rib-mark** G2cf2@rib-mark**) (set! G4848@G2cf0@rib-sym* G2cf0@rib-sym*) (set! G4847@G2cee@make-rib G2cee@make-rib) (set! G4846@G2cec@rib? G2cec@rib?) (set! G4845@G2ce9@G2ce1 G2ce9@G2ce1) (set! G4844@G2ce7@G2ce2 G2ce7@G2ce2) (set! G4843@G2ce5@G2ce0 G2ce5@G2ce0) (set! G4842@G2cdf@gen-define-label G2cdf@gen-define-label) (set! G4841@G2cdd@gen-define-label+loc G2cdd@gen-define-label+loc) (set! G4840@G2cdb@gen-top-level-label G2cdb@gen-top-level-label) (set! G483f@G2cd9@gen-label G2cd9@gen-label) (set! G483e@G2cd7@gen-global G2cd7@gen-global) (set! G483d@G2cd5@gen-lexical G2cd5@gen-lexical) (set! G483c@G2cd3@top-marked? G2cd3@top-marked?) (set! G483b@G2cd1@top-mark* G2cd1@top-mark*) (set! G483a@G2ccc@set-union G2ccc@set-union) (set! G4839@G2cca@set-cons G2cca@set-cons) (G2b66@G2a03@current-library-expander G3025@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4951@G494c G4953@G494e G4955@G494d G4958@&condition? G495a@make-&condition G495c@&condition-rtd G495e@&condition-rcd G49a8@G49a3 G49aa@G49a5 G49ac@G49a4 G49af@p? G49b1@make-message-condition G49b3@G49a2 G49b5@message-condition? G49b7@condition-message G49b9@&message-rtd G49bb@&message-rcd G49c1@G49bc G49c3@G49be G49c5@G49bd G49c8@p? G49ca@make-warning G49cc@warning? G49ce@&warning-rtd G49d0@&warning-rcd G49d6@G49d1 G49d8@G49d3 G49da@G49d2 G49dd@p? G49df@make-serious-condition G49e1@serious-condition? G49e3@&serious-rtd G49e5@&serious-rcd G49eb@G49e6 G49ed@G49e8 G49ef@G49e7 G49f2@p? G49f4@make-error G49f6@error? G49f8@&error-rtd G49fa@&error-rcd G4a00@G49fb G4a02@G49fd G4a04@G49fc G4a07@p? G4a09@make-violation G4a0b@violation? G4a0d@&violation-rtd G4a0f@&violation-rcd G4a15@G4a10 G4a17@G4a12 G4a19@G4a11 G4a1c@p? G4a1e@make-assertion-violation G4a20@assertion-violation? G4a22@&assertion-rtd G4a24@&assertion-rcd G4a2b@G4a26 G4a2d@G4a28 G4a2f@G4a27 G4a32@p? G4a34@make-irritants-condition G4a36@G4a25 G4a38@irritants-condition? G4a3a@condition-irritants G4a3c@&irritants-rtd G4a3e@&irritants-rcd G4a45@G4a40 G4a47@G4a42 G4a49@G4a41 G4a4c@p? G4a4e@make-who-condition G4a50@G4a3f G4a52@who-condition? G4a54@condition-who G4a56@&who-rtd G4a58@&who-rcd G4a5e@G4a59 G4a60@G4a5b G4a62@G4a5a G4a65@p? G4a67@make-non-continuable-violation G4a69@non-continuable-violation? G4a6b@&non-continuable-rtd G4a6d@&non-continuable-rcd G4a73@G4a6e G4a75@G4a70 G4a77@G4a6f G4a7a@p? G4a7c@make-implementation-restriction-violation G4a7e@implementation-restriction-violation? G4a80@&implementation-restriction-rtd G4a82@&implementation-restriction-rcd G4a88@G4a83 G4a8a@G4a85 G4a8c@G4a84 G4a8f@p? G4a91@make-lexical-violation G4a93@lexical-violation? G4a95@&lexical-rtd G4a97@&lexical-rcd G4a9f@G4a9a G4aa1@G4a9c G4aa3@G4a9b G4aa6@p? G4aa8@make-syntax-violation G4aaa@G4a98 G4aac@G4a99 G4aae@syntax-violation? G4ab0@syntax-violation-form G4ab2@syntax-violation-subform G4ab4@&syntax-rtd G4ab6@&syntax-rcd G4abc@G4ab7 G4abe@G4ab9 G4ac0@G4ab8 G4ac3@p? G4ac5@make-undefined-violation G4ac7@undefined-violation? G4ac9@&undefined-rtd G4acb@&undefined-rcd G4ad1@G4acc G4ad3@G4ace G4ad5@G4acd G4ad8@p? G4ada@make-i/o-error G4adc@i/o-error? G4ade@&i/o-rtd G4ae0@&i/o-rcd G4ae6@G4ae1 G4ae8@G4ae3 G4aea@G4ae2 G4aed@p? G4aef@make-i/o-read-error G4af1@i/o-read-error? G4af3@&i/o-read-rtd G4af5@&i/o-read-rcd G4afb@G4af6 G4afd@G4af8 G4aff@G4af7 G4b02@p? G4b04@make-i/o-write-error G4b06@i/o-write-error? G4b08@&i/o-write-rtd G4b0a@&i/o-write-rcd G4b11@G4b0c G4b13@G4b0e G4b15@G4b0d G4b18@p? G4b1a@make-i/o-invalid-position-error G4b1c@G4b0b G4b1e@i/o-invalid-position-error? G4b20@i/o-error-position G4b22@&i/o-invalid-position-rtd G4b24@&i/o-invalid-position-rcd G4b2b@G4b26 G4b2d@G4b28 G4b2f@G4b27 G4b32@p? G4b34@make-i/o-filename-error G4b36@G4b25 G4b38@i/o-filename-error? G4b3a@i/o-error-filename G4b3c@&i/o-filename-rtd G4b3e@&i/o-filename-rcd G4b44@G4b3f G4b46@G4b41 G4b48@G4b40 G4b4b@p? G4b4d@make-i/o-file-protection-error G4b4f@i/o-file-protection-error? G4b51@&i/o-file-protection-rtd G4b53@&i/o-file-protection-rcd G4b59@G4b54 G4b5b@G4b56 G4b5d@G4b55 G4b60@p? G4b62@make-i/o-file-is-read-only-error G4b64@i/o-file-is-read-only-error? G4b66@&i/o-file-is-read-only-rtd G4b68@&i/o-file-is-read-only-rcd G4b6e@G4b69 G4b70@G4b6b G4b72@G4b6a G4b75@p? G4b77@make-i/o-file-already-exists-error G4b79@i/o-file-already-exists-error? G4b7b@&i/o-file-already-exists-rtd G4b7d@&i/o-file-already-exists-rcd G4b83@G4b7e G4b85@G4b80 G4b87@G4b7f G4b8a@p? G4b8c@make-i/o-file-does-not-exist-error G4b8e@i/o-file-does-not-exist-error? G4b90@&i/o-file-does-not-exist-rtd G4b92@&i/o-file-does-not-exist-rcd G4b99@G4b94 G4b9b@G4b96 G4b9d@G4b95 G4ba0@p? G4ba2@make-i/o-port-error G4ba4@G4b93 G4ba6@i/o-port-error? G4ba8@i/o-error-port G4baa@&i/o-port-rtd G4bac@&i/o-port-rcd G4bb2@G4bad G4bb4@G4baf G4bb6@G4bae G4bb9@p? G4bbb@make-i/o-decoding-error G4bbd@i/o-decoding-error? G4bbf@&i/o-decoding-rtd G4bc1@&i/o-decoding-rcd G4bc8@G4bc3 G4bca@G4bc5 G4bcc@G4bc4 G4bcf@p? G4bd1@make-i/o-encoding-error G4bd3@G4bc2 G4bd5@i/o-encoding-error? G4bd7@i/o-encoding-error-char G4bd9@&i/o-encoding-rtd G4bdb@&i/o-encoding-rcd G4be1@G4bdc G4be3@G4bde G4be5@G4bdd G4be8@p? G4bea@make-no-infinities-violation G4bec@no-infinities-violation? G4bee@&no-infinities-rtd G4bf0@&no-infinities-rcd G4bf6@G4bf1 G4bf8@G4bf3 G4bfa@G4bf2 G4bfd@p? G4bff@make-no-nans-violation G4c01@no-nans-violation? G4c03@&no-nans-rtd G4c05@&no-nans-rcd) (begin (set! G4951@G494c (make-record-type-descriptor '&condition '#f 'G494f '#f '#f '#())) (set! G4953@G494e '#f) (set! G4955@G494d (make-record-constructor-descriptor G4951@G494c '#f G4953@G494e)) (set! G4958@&condition? (record-predicate G4951@G494c)) (set! G495a@make-&condition (record-constructor G4955@G494d)) (set! G495c@&condition-rtd G4951@G494c) (set! G495e@&condition-rcd G4955@G494d) (set! G49a8@G49a3 (make-record-type-descriptor '&message G4951@G494c 'G49a6 '#f '#f '#((immutable message)))) (set! G49aa@G49a5 '#f) (set! G49ac@G49a4 (make-record-constructor-descriptor G49a8@G49a3 G4955@G494d G49aa@G49a5)) (set! G49af@p? (record-predicate G49a8@G49a3)) (set! G49b1@make-message-condition (record-constructor G49ac@G49a4)) (set! G49b3@G49a2 (record-accessor G49a8@G49a3 '0)) (set! G49b5@message-condition? (condition-predicate G49a8@G49a3)) (set! G49b7@condition-message (condition-accessor G49a8@G49a3 G49b3@G49a2)) (set! G49b9@&message-rtd G49a8@G49a3) (set! G49bb@&message-rcd G49ac@G49a4) (set! G49c1@G49bc (make-record-type-descriptor '&warning G4951@G494c 'G49bf '#f '#f '#())) (set! G49c3@G49be '#f) (set! G49c5@G49bd (make-record-constructor-descriptor G49c1@G49bc G4955@G494d G49c3@G49be)) (set! G49c8@p? (record-predicate G49c1@G49bc)) (set! G49ca@make-warning (record-constructor G49c5@G49bd)) (set! G49cc@warning? (condition-predicate G49c1@G49bc)) (set! G49ce@&warning-rtd G49c1@G49bc) (set! G49d0@&warning-rcd G49c5@G49bd) (set! G49d6@G49d1 (make-record-type-descriptor '&serious G4951@G494c 'G49d4 '#f '#f '#())) (set! G49d8@G49d3 '#f) (set! G49da@G49d2 (make-record-constructor-descriptor G49d6@G49d1 G4955@G494d G49d8@G49d3)) (set! G49dd@p? (record-predicate G49d6@G49d1)) (set! G49df@make-serious-condition (record-constructor G49da@G49d2)) (set! G49e1@serious-condition? (condition-predicate G49d6@G49d1)) (set! G49e3@&serious-rtd G49d6@G49d1) (set! G49e5@&serious-rcd G49da@G49d2) (set! G49eb@G49e6 (make-record-type-descriptor '&error G49d6@G49d1 'G49e9 '#f '#f '#())) (set! G49ed@G49e8 '#f) (set! G49ef@G49e7 (make-record-constructor-descriptor G49eb@G49e6 G49da@G49d2 G49ed@G49e8)) (set! G49f2@p? (record-predicate G49eb@G49e6)) (set! G49f4@make-error (record-constructor G49ef@G49e7)) (set! G49f6@error? (condition-predicate G49eb@G49e6)) (set! G49f8@&error-rtd G49eb@G49e6) (set! G49fa@&error-rcd G49ef@G49e7) (set! G4a00@G49fb (make-record-type-descriptor '&violation G49d6@G49d1 'G49fe '#f '#f '#())) (set! G4a02@G49fd '#f) (set! G4a04@G49fc (make-record-constructor-descriptor G4a00@G49fb G49da@G49d2 G4a02@G49fd)) (set! G4a07@p? (record-predicate G4a00@G49fb)) (set! G4a09@make-violation (record-constructor G4a04@G49fc)) (set! G4a0b@violation? (condition-predicate G4a00@G49fb)) (set! G4a0d@&violation-rtd G4a00@G49fb) (set! G4a0f@&violation-rcd G4a04@G49fc) (set! G4a15@G4a10 (make-record-type-descriptor '&assertion G4a00@G49fb 'G4a13 '#f '#f '#())) (set! G4a17@G4a12 '#f) (set! G4a19@G4a11 (make-record-constructor-descriptor G4a15@G4a10 G4a04@G49fc G4a17@G4a12)) (set! G4a1c@p? (record-predicate G4a15@G4a10)) (set! G4a1e@make-assertion-violation (record-constructor G4a19@G4a11)) (set! G4a20@assertion-violation? (condition-predicate G4a15@G4a10)) (set! G4a22@&assertion-rtd G4a15@G4a10) (set! G4a24@&assertion-rcd G4a19@G4a11) (set! G4a2b@G4a26 (make-record-type-descriptor '&irritants G4951@G494c 'G4a29 '#f '#f '#((immutable irritants)))) (set! G4a2d@G4a28 '#f) (set! G4a2f@G4a27 (make-record-constructor-descriptor G4a2b@G4a26 G4955@G494d G4a2d@G4a28)) (set! G4a32@p? (record-predicate G4a2b@G4a26)) (set! G4a34@make-irritants-condition (record-constructor G4a2f@G4a27)) (set! G4a36@G4a25 (record-accessor G4a2b@G4a26 '0)) (set! G4a38@irritants-condition? (condition-predicate G4a2b@G4a26)) (set! G4a3a@condition-irritants (condition-accessor G4a2b@G4a26 G4a36@G4a25)) (set! G4a3c@&irritants-rtd G4a2b@G4a26) (set! G4a3e@&irritants-rcd G4a2f@G4a27) (set! G4a45@G4a40 (make-record-type-descriptor '&who G4951@G494c 'G4a43 '#f '#f '#((immutable who)))) (set! G4a47@G4a42 '#f) (set! G4a49@G4a41 (make-record-constructor-descriptor G4a45@G4a40 G4955@G494d G4a47@G4a42)) (set! G4a4c@p? (record-predicate G4a45@G4a40)) (set! G4a4e@make-who-condition (record-constructor G4a49@G4a41)) (set! G4a50@G4a3f (record-accessor G4a45@G4a40 '0)) (set! G4a52@who-condition? (condition-predicate G4a45@G4a40)) (set! G4a54@condition-who (condition-accessor G4a45@G4a40 G4a50@G4a3f)) (set! G4a56@&who-rtd G4a45@G4a40) (set! G4a58@&who-rcd G4a49@G4a41) (set! G4a5e@G4a59 (make-record-type-descriptor '&non-continuable G4a00@G49fb 'G4a5c '#f '#f '#())) (set! G4a60@G4a5b '#f) (set! G4a62@G4a5a (make-record-constructor-descriptor G4a5e@G4a59 G4a04@G49fc G4a60@G4a5b)) (set! G4a65@p? (record-predicate G4a5e@G4a59)) (set! G4a67@make-non-continuable-violation (record-constructor G4a62@G4a5a)) (set! G4a69@non-continuable-violation? (condition-predicate G4a5e@G4a59)) (set! G4a6b@&non-continuable-rtd G4a5e@G4a59) (set! G4a6d@&non-continuable-rcd G4a62@G4a5a) (set! G4a73@G4a6e (make-record-type-descriptor '&implementation-restriction G4a00@G49fb 'G4a71 '#f '#f '#())) (set! G4a75@G4a70 '#f) (set! G4a77@G4a6f (make-record-constructor-descriptor G4a73@G4a6e G4a04@G49fc G4a75@G4a70)) (set! G4a7a@p? (record-predicate G4a73@G4a6e)) (set! G4a7c@make-implementation-restriction-violation (record-constructor G4a77@G4a6f)) (set! G4a7e@implementation-restriction-violation? (condition-predicate G4a73@G4a6e)) (set! G4a80@&implementation-restriction-rtd G4a73@G4a6e) (set! G4a82@&implementation-restriction-rcd G4a77@G4a6f) (set! G4a88@G4a83 (make-record-type-descriptor '&lexical G4a00@G49fb 'G4a86 '#f '#f '#())) (set! G4a8a@G4a85 '#f) (set! G4a8c@G4a84 (make-record-constructor-descriptor G4a88@G4a83 G4a04@G49fc G4a8a@G4a85)) (set! G4a8f@p? (record-predicate G4a88@G4a83)) (set! G4a91@make-lexical-violation (record-constructor G4a8c@G4a84)) (set! G4a93@lexical-violation? (condition-predicate G4a88@G4a83)) (set! G4a95@&lexical-rtd G4a88@G4a83) (set! G4a97@&lexical-rcd G4a8c@G4a84) (set! G4a9f@G4a9a (make-record-type-descriptor '&syntax G4a00@G49fb 'G4a9d '#f '#f '#((immutable form) (immutable subform)))) (set! G4aa1@G4a9c '#f) (set! G4aa3@G4a9b (make-record-constructor-descriptor G4a9f@G4a9a G4a04@G49fc G4aa1@G4a9c)) (set! G4aa6@p? (record-predicate G4a9f@G4a9a)) (set! G4aa8@make-syntax-violation (record-constructor G4aa3@G4a9b)) (set! G4aaa@G4a98 (record-accessor G4a9f@G4a9a '0)) (set! G4aac@G4a99 (record-accessor G4a9f@G4a9a '1)) (set! G4aae@syntax-violation? (condition-predicate G4a9f@G4a9a)) (set! G4ab0@syntax-violation-form (condition-accessor G4a9f@G4a9a G4aaa@G4a98)) (set! G4ab2@syntax-violation-subform (condition-accessor G4a9f@G4a9a G4aac@G4a99)) (set! G4ab4@&syntax-rtd G4a9f@G4a9a) (set! G4ab6@&syntax-rcd G4aa3@G4a9b) (set! G4abc@G4ab7 (make-record-type-descriptor '&undefined G4a00@G49fb 'G4aba '#f '#f '#())) (set! G4abe@G4ab9 '#f) (set! G4ac0@G4ab8 (make-record-constructor-descriptor G4abc@G4ab7 G4a04@G49fc G4abe@G4ab9)) (set! G4ac3@p? (record-predicate G4abc@G4ab7)) (set! G4ac5@make-undefined-violation (record-constructor G4ac0@G4ab8)) (set! G4ac7@undefined-violation? (condition-predicate G4abc@G4ab7)) (set! G4ac9@&undefined-rtd G4abc@G4ab7) (set! G4acb@&undefined-rcd G4ac0@G4ab8) (set! G4ad1@G4acc (make-record-type-descriptor '&i/o G49eb@G49e6 'G4acf '#f '#f '#())) (set! G4ad3@G4ace '#f) (set! G4ad5@G4acd (make-record-constructor-descriptor G4ad1@G4acc G49ef@G49e7 G4ad3@G4ace)) (set! G4ad8@p? (record-predicate G4ad1@G4acc)) (set! G4ada@make-i/o-error (record-constructor G4ad5@G4acd)) (set! G4adc@i/o-error? (condition-predicate G4ad1@G4acc)) (set! G4ade@&i/o-rtd G4ad1@G4acc) (set! G4ae0@&i/o-rcd G4ad5@G4acd) (set! G4ae6@G4ae1 (make-record-type-descriptor '&i/o-read G4ad1@G4acc 'G4ae4 '#f '#f '#())) (set! G4ae8@G4ae3 '#f) (set! G4aea@G4ae2 (make-record-constructor-descriptor G4ae6@G4ae1 G4ad5@G4acd G4ae8@G4ae3)) (set! G4aed@p? (record-predicate G4ae6@G4ae1)) (set! G4aef@make-i/o-read-error (record-constructor G4aea@G4ae2)) (set! G4af1@i/o-read-error? (condition-predicate G4ae6@G4ae1)) (set! G4af3@&i/o-read-rtd G4ae6@G4ae1) (set! G4af5@&i/o-read-rcd G4aea@G4ae2) (set! G4afb@G4af6 (make-record-type-descriptor '&i/o-write G4ad1@G4acc 'G4af9 '#f '#f '#())) (set! G4afd@G4af8 '#f) (set! G4aff@G4af7 (make-record-constructor-descriptor G4afb@G4af6 G4ad5@G4acd G4afd@G4af8)) (set! G4b02@p? (record-predicate G4afb@G4af6)) (set! G4b04@make-i/o-write-error (record-constructor G4aff@G4af7)) (set! G4b06@i/o-write-error? (condition-predicate G4afb@G4af6)) (set! G4b08@&i/o-write-rtd G4afb@G4af6) (set! G4b0a@&i/o-write-rcd G4aff@G4af7) (set! G4b11@G4b0c (make-record-type-descriptor '&i/o-invalid-position G4ad1@G4acc 'G4b0f '#f '#f '#((immutable position)))) (set! G4b13@G4b0e '#f) (set! G4b15@G4b0d (make-record-constructor-descriptor G4b11@G4b0c G4ad5@G4acd G4b13@G4b0e)) (set! G4b18@p? (record-predicate G4b11@G4b0c)) (set! G4b1a@make-i/o-invalid-position-error (record-constructor G4b15@G4b0d)) (set! G4b1c@G4b0b (record-accessor G4b11@G4b0c '0)) (set! G4b1e@i/o-invalid-position-error? (condition-predicate G4b11@G4b0c)) (set! G4b20@i/o-error-position (condition-accessor G4b11@G4b0c G4b1c@G4b0b)) (set! G4b22@&i/o-invalid-position-rtd G4b11@G4b0c) (set! G4b24@&i/o-invalid-position-rcd G4b15@G4b0d) (set! G4b2b@G4b26 (make-record-type-descriptor '&i/o-filename G4ad1@G4acc 'G4b29 '#f '#f '#((immutable filename)))) (set! G4b2d@G4b28 '#f) (set! G4b2f@G4b27 (make-record-constructor-descriptor G4b2b@G4b26 G4ad5@G4acd G4b2d@G4b28)) (set! G4b32@p? (record-predicate G4b2b@G4b26)) (set! G4b34@make-i/o-filename-error (record-constructor G4b2f@G4b27)) (set! G4b36@G4b25 (record-accessor G4b2b@G4b26 '0)) (set! G4b38@i/o-filename-error? (condition-predicate G4b2b@G4b26)) (set! G4b3a@i/o-error-filename (condition-accessor G4b2b@G4b26 G4b36@G4b25)) (set! G4b3c@&i/o-filename-rtd G4b2b@G4b26) (set! G4b3e@&i/o-filename-rcd G4b2f@G4b27) (set! G4b44@G4b3f (make-record-type-descriptor '&i/o-file-protection G4b2b@G4b26 'G4b42 '#f '#f '#())) (set! G4b46@G4b41 '#f) (set! G4b48@G4b40 (make-record-constructor-descriptor G4b44@G4b3f G4b2f@G4b27 G4b46@G4b41)) (set! G4b4b@p? (record-predicate G4b44@G4b3f)) (set! G4b4d@make-i/o-file-protection-error (record-constructor G4b48@G4b40)) (set! G4b4f@i/o-file-protection-error? (condition-predicate G4b44@G4b3f)) (set! G4b51@&i/o-file-protection-rtd G4b44@G4b3f) (set! G4b53@&i/o-file-protection-rcd G4b48@G4b40) (set! G4b59@G4b54 (make-record-type-descriptor '&i/o-file-is-read-only G4b44@G4b3f 'G4b57 '#f '#f '#())) (set! G4b5b@G4b56 '#f) (set! G4b5d@G4b55 (make-record-constructor-descriptor G4b59@G4b54 G4b48@G4b40 G4b5b@G4b56)) (set! G4b60@p? (record-predicate G4b59@G4b54)) (set! G4b62@make-i/o-file-is-read-only-error (record-constructor G4b5d@G4b55)) (set! G4b64@i/o-file-is-read-only-error? (condition-predicate G4b59@G4b54)) (set! G4b66@&i/o-file-is-read-only-rtd G4b59@G4b54) (set! G4b68@&i/o-file-is-read-only-rcd G4b5d@G4b55) (set! G4b6e@G4b69 (make-record-type-descriptor '&i/o-file-already-exists G4b2b@G4b26 'G4b6c '#f '#f '#())) (set! G4b70@G4b6b '#f) (set! G4b72@G4b6a (make-record-constructor-descriptor G4b6e@G4b69 G4b2f@G4b27 G4b70@G4b6b)) (set! G4b75@p? (record-predicate G4b6e@G4b69)) (set! G4b77@make-i/o-file-already-exists-error (record-constructor G4b72@G4b6a)) (set! G4b79@i/o-file-already-exists-error? (condition-predicate G4b6e@G4b69)) (set! G4b7b@&i/o-file-already-exists-rtd G4b6e@G4b69) (set! G4b7d@&i/o-file-already-exists-rcd G4b72@G4b6a) (set! G4b83@G4b7e (make-record-type-descriptor '&i/o-file-does-not-exist G4b2b@G4b26 'G4b81 '#f '#f '#())) (set! G4b85@G4b80 '#f) (set! G4b87@G4b7f (make-record-constructor-descriptor G4b83@G4b7e G4b2f@G4b27 G4b85@G4b80)) (set! G4b8a@p? (record-predicate G4b83@G4b7e)) (set! G4b8c@make-i/o-file-does-not-exist-error (record-constructor G4b87@G4b7f)) (set! G4b8e@i/o-file-does-not-exist-error? (condition-predicate G4b83@G4b7e)) (set! G4b90@&i/o-file-does-not-exist-rtd G4b83@G4b7e) (set! G4b92@&i/o-file-does-not-exist-rcd G4b87@G4b7f) (set! G4b99@G4b94 (make-record-type-descriptor '&i/o-port G4ad1@G4acc 'G4b97 '#f '#f '#((immutable port)))) (set! G4b9b@G4b96 '#f) (set! G4b9d@G4b95 (make-record-constructor-descriptor G4b99@G4b94 G4ad5@G4acd G4b9b@G4b96)) (set! G4ba0@p? (record-predicate G4b99@G4b94)) (set! G4ba2@make-i/o-port-error (record-constructor G4b9d@G4b95)) (set! G4ba4@G4b93 (record-accessor G4b99@G4b94 '0)) (set! G4ba6@i/o-port-error? (condition-predicate G4b99@G4b94)) (set! G4ba8@i/o-error-port (condition-accessor G4b99@G4b94 G4ba4@G4b93)) (set! G4baa@&i/o-port-rtd G4b99@G4b94) (set! G4bac@&i/o-port-rcd G4b9d@G4b95) (set! G4bb2@G4bad (make-record-type-descriptor '&i/o-decoding G4b99@G4b94 'G4bb0 '#f '#f '#())) (set! G4bb4@G4baf '#f) (set! G4bb6@G4bae (make-record-constructor-descriptor G4bb2@G4bad G4b9d@G4b95 G4bb4@G4baf)) (set! G4bb9@p? (record-predicate G4bb2@G4bad)) (set! G4bbb@make-i/o-decoding-error (record-constructor G4bb6@G4bae)) (set! G4bbd@i/o-decoding-error? (condition-predicate G4bb2@G4bad)) (set! G4bbf@&i/o-decoding-rtd G4bb2@G4bad) (set! G4bc1@&i/o-decoding-rcd G4bb6@G4bae) (set! G4bc8@G4bc3 (make-record-type-descriptor '&i/o-encoding G4b99@G4b94 'G4bc6 '#f '#f '#((immutable char)))) (set! G4bca@G4bc5 '#f) (set! G4bcc@G4bc4 (make-record-constructor-descriptor G4bc8@G4bc3 G4b9d@G4b95 G4bca@G4bc5)) (set! G4bcf@p? (record-predicate G4bc8@G4bc3)) (set! G4bd1@make-i/o-encoding-error (record-constructor G4bcc@G4bc4)) (set! G4bd3@G4bc2 (record-accessor G4bc8@G4bc3 '0)) (set! G4bd5@i/o-encoding-error? (condition-predicate G4bc8@G4bc3)) (set! G4bd7@i/o-encoding-error-char (condition-accessor G4bc8@G4bc3 G4bd3@G4bc2)) (set! G4bd9@&i/o-encoding-rtd G4bc8@G4bc3) (set! G4bdb@&i/o-encoding-rcd G4bcc@G4bc4) (set! G4be1@G4bdc (make-record-type-descriptor '&no-infinities G4a73@G4a6e 'G4bdf '#f '#f '#())) (set! G4be3@G4bde '#f) (set! G4be5@G4bdd (make-record-constructor-descriptor G4be1@G4bdc G4a77@G4a6f G4be3@G4bde)) (set! G4be8@p? (record-predicate G4be1@G4bdc)) (set! G4bea@make-no-infinities-violation (record-constructor G4be5@G4bdd)) (set! G4bec@no-infinities-violation? (condition-predicate G4be1@G4bdc)) (set! G4bee@&no-infinities-rtd G4be1@G4bdc) (set! G4bf0@&no-infinities-rcd G4be5@G4bdd) (set! G4bf6@G4bf1 (make-record-type-descriptor '&no-nans G4a73@G4a6e 'G4bf4 '#f '#f '#())) (set! G4bf8@G4bf3 '#f) (set! G4bfa@G4bf2 (make-record-constructor-descriptor G4bf6@G4bf1 G4a77@G4a6f G4bf8@G4bf3)) (set! G4bfd@p? (record-predicate G4bf6@G4bf1)) (set! G4bff@make-no-nans-violation (record-constructor G4bfa@G4bf2)) (set! G4c01@no-nans-violation? (condition-predicate G4bf6@G4bf1)) (set! G4c03@&no-nans-rtd G4bf6@G4bf1) (set! G4c05@&no-nans-rcd G4bfa@G4bf2) (begin (set! G4cf6@G4c05@&no-nans-rcd G4c05@&no-nans-rcd) (set! G4cf5@G4c03@&no-nans-rtd G4c03@&no-nans-rtd) (set! G4cf4@G4c01@no-nans-violation? G4c01@no-nans-violation?) (set! G4cf3@G4bff@make-no-nans-violation G4bff@make-no-nans-violation) (set! G4cf2@G4bfd@p? G4bfd@p?) (set! G4cf1@G4bfa@G4bf2 G4bfa@G4bf2) (set! G4cf0@G4bf8@G4bf3 G4bf8@G4bf3) (set! G4cef@G4bf6@G4bf1 G4bf6@G4bf1) (set! G4cee@G4bf0@&no-infinities-rcd G4bf0@&no-infinities-rcd) (set! G4ced@G4bee@&no-infinities-rtd G4bee@&no-infinities-rtd) (set! G4cec@G4bec@no-infinities-violation? G4bec@no-infinities-violation?) (set! G4ceb@G4bea@make-no-infinities-violation G4bea@make-no-infinities-violation) (set! G4cea@G4be8@p? G4be8@p?) (set! G4ce9@G4be5@G4bdd G4be5@G4bdd) (set! G4ce8@G4be3@G4bde G4be3@G4bde) (set! G4ce7@G4be1@G4bdc G4be1@G4bdc) (set! G4ce6@G4bdb@&i/o-encoding-rcd G4bdb@&i/o-encoding-rcd) (set! G4ce5@G4bd9@&i/o-encoding-rtd G4bd9@&i/o-encoding-rtd) (set! G4ce4@G4bd7@i/o-encoding-error-char G4bd7@i/o-encoding-error-char) (set! G4ce3@G4bd5@i/o-encoding-error? G4bd5@i/o-encoding-error?) (set! G4ce2@G4bd3@G4bc2 G4bd3@G4bc2) (set! G4ce1@G4bd1@make-i/o-encoding-error G4bd1@make-i/o-encoding-error) (set! G4ce0@G4bcf@p? G4bcf@p?) (set! G4cdf@G4bcc@G4bc4 G4bcc@G4bc4) (set! G4cde@G4bca@G4bc5 G4bca@G4bc5) (set! G4cdd@G4bc8@G4bc3 G4bc8@G4bc3) (set! G4cdc@G4bc1@&i/o-decoding-rcd G4bc1@&i/o-decoding-rcd) (set! G4cdb@G4bbf@&i/o-decoding-rtd G4bbf@&i/o-decoding-rtd) (set! G4cda@G4bbd@i/o-decoding-error? G4bbd@i/o-decoding-error?) (set! G4cd9@G4bbb@make-i/o-decoding-error G4bbb@make-i/o-decoding-error) (set! G4cd8@G4bb9@p? G4bb9@p?) (set! G4cd7@G4bb6@G4bae G4bb6@G4bae) (set! G4cd6@G4bb4@G4baf G4bb4@G4baf) (set! G4cd5@G4bb2@G4bad G4bb2@G4bad) (set! G4cd4@G4bac@&i/o-port-rcd G4bac@&i/o-port-rcd) (set! G4cd3@G4baa@&i/o-port-rtd G4baa@&i/o-port-rtd) (set! G4cd2@G4ba8@i/o-error-port G4ba8@i/o-error-port) (set! G4cd1@G4ba6@i/o-port-error? G4ba6@i/o-port-error?) (set! G4cd0@G4ba4@G4b93 G4ba4@G4b93) (set! G4ccf@G4ba2@make-i/o-port-error G4ba2@make-i/o-port-error) (set! G4cce@G4ba0@p? G4ba0@p?) (set! G4ccd@G4b9d@G4b95 G4b9d@G4b95) (set! G4ccc@G4b9b@G4b96 G4b9b@G4b96) (set! G4ccb@G4b99@G4b94 G4b99@G4b94) (set! G4cca@G4b92@&i/o-file-does-not-exist-rcd G4b92@&i/o-file-does-not-exist-rcd) (set! G4cc9@G4b90@&i/o-file-does-not-exist-rtd G4b90@&i/o-file-does-not-exist-rtd) (set! G4cc8@G4b8e@i/o-file-does-not-exist-error? G4b8e@i/o-file-does-not-exist-error?) (set! G4cc7@G4b8c@make-i/o-file-does-not-exist-error G4b8c@make-i/o-file-does-not-exist-error) (set! G4cc6@G4b8a@p? G4b8a@p?) (set! G4cc5@G4b87@G4b7f G4b87@G4b7f) (set! G4cc4@G4b85@G4b80 G4b85@G4b80) (set! G4cc3@G4b83@G4b7e G4b83@G4b7e) (set! G4cc2@G4b7d@&i/o-file-already-exists-rcd G4b7d@&i/o-file-already-exists-rcd) (set! G4cc1@G4b7b@&i/o-file-already-exists-rtd G4b7b@&i/o-file-already-exists-rtd) (set! G4cc0@G4b79@i/o-file-already-exists-error? G4b79@i/o-file-already-exists-error?) (set! G4cbf@G4b77@make-i/o-file-already-exists-error G4b77@make-i/o-file-already-exists-error) (set! G4cbe@G4b75@p? G4b75@p?) (set! G4cbd@G4b72@G4b6a G4b72@G4b6a) (set! G4cbc@G4b70@G4b6b G4b70@G4b6b) (set! G4cbb@G4b6e@G4b69 G4b6e@G4b69) (set! G4cba@G4b68@&i/o-file-is-read-only-rcd G4b68@&i/o-file-is-read-only-rcd) (set! G4cb9@G4b66@&i/o-file-is-read-only-rtd G4b66@&i/o-file-is-read-only-rtd) (set! G4cb8@G4b64@i/o-file-is-read-only-error? G4b64@i/o-file-is-read-only-error?) (set! G4cb7@G4b62@make-i/o-file-is-read-only-error G4b62@make-i/o-file-is-read-only-error) (set! G4cb6@G4b60@p? G4b60@p?) (set! G4cb5@G4b5d@G4b55 G4b5d@G4b55) (set! G4cb4@G4b5b@G4b56 G4b5b@G4b56) (set! G4cb3@G4b59@G4b54 G4b59@G4b54) (set! G4cb2@G4b53@&i/o-file-protection-rcd G4b53@&i/o-file-protection-rcd) (set! G4cb1@G4b51@&i/o-file-protection-rtd G4b51@&i/o-file-protection-rtd) (set! G4cb0@G4b4f@i/o-file-protection-error? G4b4f@i/o-file-protection-error?) (set! G4caf@G4b4d@make-i/o-file-protection-error G4b4d@make-i/o-file-protection-error) (set! G4cae@G4b4b@p? G4b4b@p?) (set! G4cad@G4b48@G4b40 G4b48@G4b40) (set! G4cac@G4b46@G4b41 G4b46@G4b41) (set! G4cab@G4b44@G4b3f G4b44@G4b3f) (set! G4caa@G4b3e@&i/o-filename-rcd G4b3e@&i/o-filename-rcd) (set! G4ca9@G4b3c@&i/o-filename-rtd G4b3c@&i/o-filename-rtd) (set! G4ca8@G4b3a@i/o-error-filename G4b3a@i/o-error-filename) (set! G4ca7@G4b38@i/o-filename-error? G4b38@i/o-filename-error?) (set! G4ca6@G4b36@G4b25 G4b36@G4b25) (set! G4ca5@G4b34@make-i/o-filename-error G4b34@make-i/o-filename-error) (set! G4ca4@G4b32@p? G4b32@p?) (set! G4ca3@G4b2f@G4b27 G4b2f@G4b27) (set! G4ca2@G4b2d@G4b28 G4b2d@G4b28) (set! G4ca1@G4b2b@G4b26 G4b2b@G4b26) (set! G4ca0@G4b24@&i/o-invalid-position-rcd G4b24@&i/o-invalid-position-rcd) (set! G4c9f@G4b22@&i/o-invalid-position-rtd G4b22@&i/o-invalid-position-rtd) (set! G4c9e@G4b20@i/o-error-position G4b20@i/o-error-position) (set! G4c9d@G4b1e@i/o-invalid-position-error? G4b1e@i/o-invalid-position-error?) (set! G4c9c@G4b1c@G4b0b G4b1c@G4b0b) (set! G4c9b@G4b1a@make-i/o-invalid-position-error G4b1a@make-i/o-invalid-position-error) (set! G4c9a@G4b18@p? G4b18@p?) (set! G4c99@G4b15@G4b0d G4b15@G4b0d) (set! G4c98@G4b13@G4b0e G4b13@G4b0e) (set! G4c97@G4b11@G4b0c G4b11@G4b0c) (set! G4c96@G4b0a@&i/o-write-rcd G4b0a@&i/o-write-rcd) (set! G4c95@G4b08@&i/o-write-rtd G4b08@&i/o-write-rtd) (set! G4c94@G4b06@i/o-write-error? G4b06@i/o-write-error?) (set! G4c93@G4b04@make-i/o-write-error G4b04@make-i/o-write-error) (set! G4c92@G4b02@p? G4b02@p?) (set! G4c91@G4aff@G4af7 G4aff@G4af7) (set! G4c90@G4afd@G4af8 G4afd@G4af8) (set! G4c8f@G4afb@G4af6 G4afb@G4af6) (set! G4c8e@G4af5@&i/o-read-rcd G4af5@&i/o-read-rcd) (set! G4c8d@G4af3@&i/o-read-rtd G4af3@&i/o-read-rtd) (set! G4c8c@G4af1@i/o-read-error? G4af1@i/o-read-error?) (set! G4c8b@G4aef@make-i/o-read-error G4aef@make-i/o-read-error) (set! G4c8a@G4aed@p? G4aed@p?) (set! G4c89@G4aea@G4ae2 G4aea@G4ae2) (set! G4c88@G4ae8@G4ae3 G4ae8@G4ae3) (set! G4c87@G4ae6@G4ae1 G4ae6@G4ae1) (set! G4c86@G4ae0@&i/o-rcd G4ae0@&i/o-rcd) (set! G4c85@G4ade@&i/o-rtd G4ade@&i/o-rtd) (set! G4c84@G4adc@i/o-error? G4adc@i/o-error?) (set! G4c83@G4ada@make-i/o-error G4ada@make-i/o-error) (set! G4c82@G4ad8@p? G4ad8@p?) (set! G4c81@G4ad5@G4acd G4ad5@G4acd) (set! G4c80@G4ad3@G4ace G4ad3@G4ace) (set! G4c7f@G4ad1@G4acc G4ad1@G4acc) (set! G4c7e@G4acb@&undefined-rcd G4acb@&undefined-rcd) (set! G4c7d@G4ac9@&undefined-rtd G4ac9@&undefined-rtd) (set! G4c7c@G4ac7@undefined-violation? G4ac7@undefined-violation?) (set! G4c7b@G4ac5@make-undefined-violation G4ac5@make-undefined-violation) (set! G4c7a@G4ac3@p? G4ac3@p?) (set! G4c79@G4ac0@G4ab8 G4ac0@G4ab8) (set! G4c78@G4abe@G4ab9 G4abe@G4ab9) (set! G4c77@G4abc@G4ab7 G4abc@G4ab7) (set! G4c76@G4ab6@&syntax-rcd G4ab6@&syntax-rcd) (set! G4c75@G4ab4@&syntax-rtd G4ab4@&syntax-rtd) (set! G4c74@G4ab2@syntax-violation-subform G4ab2@syntax-violation-subform) (set! G4c73@G4ab0@syntax-violation-form G4ab0@syntax-violation-form) (set! G4c72@G4aae@syntax-violation? G4aae@syntax-violation?) (set! G4c71@G4aac@G4a99 G4aac@G4a99) (set! G4c70@G4aaa@G4a98 G4aaa@G4a98) (set! G4c6f@G4aa8@make-syntax-violation G4aa8@make-syntax-violation) (set! G4c6e@G4aa6@p? G4aa6@p?) (set! G4c6d@G4aa3@G4a9b G4aa3@G4a9b) (set! G4c6c@G4aa1@G4a9c G4aa1@G4a9c) (set! G4c6b@G4a9f@G4a9a G4a9f@G4a9a) (set! G4c6a@G4a97@&lexical-rcd G4a97@&lexical-rcd) (set! G4c69@G4a95@&lexical-rtd G4a95@&lexical-rtd) (set! G4c68@G4a93@lexical-violation? G4a93@lexical-violation?) (set! G4c67@G4a91@make-lexical-violation G4a91@make-lexical-violation) (set! G4c66@G4a8f@p? G4a8f@p?) (set! G4c65@G4a8c@G4a84 G4a8c@G4a84) (set! G4c64@G4a8a@G4a85 G4a8a@G4a85) (set! G4c63@G4a88@G4a83 G4a88@G4a83) (set! G4c62@G4a82@&implementation-restriction-rcd G4a82@&implementation-restriction-rcd) (set! G4c61@G4a80@&implementation-restriction-rtd G4a80@&implementation-restriction-rtd) (set! G4c60@G4a7e@implementation-restriction-violation? G4a7e@implementation-restriction-violation?) (set! G4c5f@G4a7c@make-implementation-restriction-violation G4a7c@make-implementation-restriction-violation) (set! G4c5e@G4a7a@p? G4a7a@p?) (set! G4c5d@G4a77@G4a6f G4a77@G4a6f) (set! G4c5c@G4a75@G4a70 G4a75@G4a70) (set! G4c5b@G4a73@G4a6e G4a73@G4a6e) (set! G4c5a@G4a6d@&non-continuable-rcd G4a6d@&non-continuable-rcd) (set! G4c59@G4a6b@&non-continuable-rtd G4a6b@&non-continuable-rtd) (set! G4c58@G4a69@non-continuable-violation? G4a69@non-continuable-violation?) (set! G4c57@G4a67@make-non-continuable-violation G4a67@make-non-continuable-violation) (set! G4c56@G4a65@p? G4a65@p?) (set! G4c55@G4a62@G4a5a G4a62@G4a5a) (set! G4c54@G4a60@G4a5b G4a60@G4a5b) (set! G4c53@G4a5e@G4a59 G4a5e@G4a59) (set! G4c52@G4a58@&who-rcd G4a58@&who-rcd) (set! G4c51@G4a56@&who-rtd G4a56@&who-rtd) (set! G4c50@G4a54@condition-who G4a54@condition-who) (set! G4c4f@G4a52@who-condition? G4a52@who-condition?) (set! G4c4e@G4a50@G4a3f G4a50@G4a3f) (set! G4c4d@G4a4e@make-who-condition G4a4e@make-who-condition) (set! G4c4c@G4a4c@p? G4a4c@p?) (set! G4c4b@G4a49@G4a41 G4a49@G4a41) (set! G4c4a@G4a47@G4a42 G4a47@G4a42) (set! G4c49@G4a45@G4a40 G4a45@G4a40) (set! G4c48@G4a3e@&irritants-rcd G4a3e@&irritants-rcd) (set! G4c47@G4a3c@&irritants-rtd G4a3c@&irritants-rtd) (set! G4c46@G4a3a@condition-irritants G4a3a@condition-irritants) (set! G4c45@G4a38@irritants-condition? G4a38@irritants-condition?) (set! G4c44@G4a36@G4a25 G4a36@G4a25) (set! G4c43@G4a34@make-irritants-condition G4a34@make-irritants-condition) (set! G4c42@G4a32@p? G4a32@p?) (set! G4c41@G4a2f@G4a27 G4a2f@G4a27) (set! G4c40@G4a2d@G4a28 G4a2d@G4a28) (set! G4c3f@G4a2b@G4a26 G4a2b@G4a26) (set! G4c3e@G4a24@&assertion-rcd G4a24@&assertion-rcd) (set! G4c3d@G4a22@&assertion-rtd G4a22@&assertion-rtd) (set! G4c3c@G4a20@assertion-violation? G4a20@assertion-violation?) (set! G4c3b@G4a1e@make-assertion-violation G4a1e@make-assertion-violation) (set! G4c3a@G4a1c@p? G4a1c@p?) (set! G4c39@G4a19@G4a11 G4a19@G4a11) (set! G4c38@G4a17@G4a12 G4a17@G4a12) (set! G4c37@G4a15@G4a10 G4a15@G4a10) (set! G4c36@G4a0f@&violation-rcd G4a0f@&violation-rcd) (set! G4c35@G4a0d@&violation-rtd G4a0d@&violation-rtd) (set! G4c34@G4a0b@violation? G4a0b@violation?) (set! G4c33@G4a09@make-violation G4a09@make-violation) (set! G4c32@G4a07@p? G4a07@p?) (set! G4c31@G4a04@G49fc G4a04@G49fc) (set! G4c30@G4a02@G49fd G4a02@G49fd) (set! G4c2f@G4a00@G49fb G4a00@G49fb) (set! G4c2e@G49fa@&error-rcd G49fa@&error-rcd) (set! G4c2d@G49f8@&error-rtd G49f8@&error-rtd) (set! G4c2c@G49f6@error? G49f6@error?) (set! G4c2b@G49f4@make-error G49f4@make-error) (set! G4c2a@G49f2@p? G49f2@p?) (set! G4c29@G49ef@G49e7 G49ef@G49e7) (set! G4c28@G49ed@G49e8 G49ed@G49e8) (set! G4c27@G49eb@G49e6 G49eb@G49e6) (set! G4c26@G49e5@&serious-rcd G49e5@&serious-rcd) (set! G4c25@G49e3@&serious-rtd G49e3@&serious-rtd) (set! G4c24@G49e1@serious-condition? G49e1@serious-condition?) (set! G4c23@G49df@make-serious-condition G49df@make-serious-condition) (set! G4c22@G49dd@p? G49dd@p?) (set! G4c21@G49da@G49d2 G49da@G49d2) (set! G4c20@G49d8@G49d3 G49d8@G49d3) (set! G4c1f@G49d6@G49d1 G49d6@G49d1) (set! G4c1e@G49d0@&warning-rcd G49d0@&warning-rcd) (set! G4c1d@G49ce@&warning-rtd G49ce@&warning-rtd) (set! G4c1c@G49cc@warning? G49cc@warning?) (set! G4c1b@G49ca@make-warning G49ca@make-warning) (set! G4c1a@G49c8@p? G49c8@p?) (set! G4c19@G49c5@G49bd G49c5@G49bd) (set! G4c18@G49c3@G49be G49c3@G49be) (set! G4c17@G49c1@G49bc G49c1@G49bc) (set! G4c16@G49bb@&message-rcd G49bb@&message-rcd) (set! G4c15@G49b9@&message-rtd G49b9@&message-rtd) (set! G4c14@G49b7@condition-message G49b7@condition-message) (set! G4c13@G49b5@message-condition? G49b5@message-condition?) (set! G4c12@G49b3@G49a2 G49b3@G49a2) (set! G4c11@G49b1@make-message-condition G49b1@make-message-condition) (set! G4c10@G49af@p? G49af@p?) (set! G4c0f@G49ac@G49a4 G49ac@G49a4) (set! G4c0e@G49aa@G49a5 G49aa@G49a5) (set! G4c0d@G49a8@G49a3 G49a8@G49a3) (set! G4c0c@G495e@&condition-rcd G495e@&condition-rcd) (set! G4c0b@G495c@&condition-rtd G495c@&condition-rtd) (set! G4c0a@G495a@make-&condition G495a@make-&condition) (set! G4c09@G4958@&condition? G4958@&condition?) (set! G4c08@G4955@G494d G4955@G494d) (set! G4c07@G4953@G494e G4953@G494e) (set! G4c06@G4951@G494c G4951@G494c)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2946@G28fb@current-primitive-locations (lambda (G50d5@x) ((lambda (G50d7@t) (if G50d7@t (cdr G50d7@t) '#f)) (assq G50d5@x '((&no-nans-rcd . G4cf6@G4c05@&no-nans-rcd) (&no-nans-rtd . G4cf5@G4c03@&no-nans-rtd) (&no-infinities-rcd . G4cee@G4bf0@&no-infinities-rcd) (&no-infinities-rtd . G4ced@G4bee@&no-infinities-rtd) (&i/o-encoding-rcd . G4ce6@G4bdb@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4ce5@G4bd9@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4cdc@G4bc1@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4cdb@G4bbf@&i/o-decoding-rtd) (&i/o-port-rcd . G4cd4@G4bac@&i/o-port-rcd) (&i/o-port-rtd . G4cd3@G4baa@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cca@G4b92@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cc9@G4b90@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cc2@G4b7d@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cc1@G4b7b@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cba@G4b68@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cb9@G4b66@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cb2@G4b53@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cb1@G4b51@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4caa@G4b3e@&i/o-filename-rcd) (&i/o-filename-rtd . G4ca9@G4b3c@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4ca0@G4b24@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4c9f@G4b22@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c96@G4b0a@&i/o-write-rcd) (&i/o-write-rtd . G4c95@G4b08@&i/o-write-rtd) (&i/o-read-rcd . G4c8e@G4af5@&i/o-read-rcd) (&i/o-read-rtd . G4c8d@G4af3@&i/o-read-rtd) (&i/o-rcd . G4c86@G4ae0@&i/o-rcd) (&i/o-rtd . G4c85@G4ade@&i/o-rtd) (&undefined-rcd . G4c7e@G4acb@&undefined-rcd) (&undefined-rtd . G4c7d@G4ac9@&undefined-rtd) (&syntax-rcd . G4c76@G4ab6@&syntax-rcd) (&syntax-rtd . G4c75@G4ab4@&syntax-rtd) (&lexical-rcd . G4c6a@G4a97@&lexical-rcd) (&lexical-rtd . G4c69@G4a95@&lexical-rtd) (&implementation-restriction-rcd . G4c62@G4a82@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c61@G4a80@&implementation-restriction-rtd) (&non-continuable-rcd . G4c5a@G4a6d@&non-continuable-rcd) (&non-continuable-rtd . G4c59@G4a6b@&non-continuable-rtd) (&who-rcd . G4c52@G4a58@&who-rcd) (&who-rtd . G4c51@G4a56@&who-rtd) (&irritants-rcd . G4c48@G4a3e@&irritants-rcd) (&irritants-rtd . G4c47@G4a3c@&irritants-rtd) (&assertion-rcd . G4c3e@G4a24@&assertion-rcd) (&assertion-rtd . G4c3d@G4a22@&assertion-rtd) (&violation-rcd . G4c36@G4a0f@&violation-rcd) (&violation-rtd . G4c35@G4a0d@&violation-rtd) (&error-rcd . G4c2e@G49fa@&error-rcd) (&error-rtd . G4c2d@G49f8@&error-rtd) (&serious-rcd . G4c26@G49e5@&serious-rcd) (&serious-rtd . G4c25@G49e3@&serious-rtd) (&warning-rcd . G4c1e@G49d0@&warning-rcd) (&warning-rtd . G4c1d@G49ce@&warning-rtd) (&message-rcd . G4c16@G49bb@&message-rcd) (&message-rtd . G4c15@G49b9@&message-rtd) (&condition-rcd . G4c0c@G495e@&condition-rcd) (&condition-rtd . G4c0b@G495c@&condition-rtd) (syntax-error . G493e@G303f@syntax-error) (syntax-dispatch . G48d2@G2f58@syntax-dispatch) (load . G4dc8@G4d0c@load) (interaction-environment . G4946@G304f@interaction-environment) (make-parameter . G28f5@G282b@make-parameter) (make-variable-transformer . G4890@G2d93@make-variable-transformer) (identifier? . G4941@G3045@identifier?) (generate-temporaries . G4937@G3031@generate-temporaries) (free-identifier=? . G4938@G3033@free-identifier=?) (syntax->datum . G4943@G3049@syntax->datum) (datum->syntax . G4942@G3047@datum->syntax) (bound-identifier=? . G4939@G3035@bound-identifier=?) (make-i/o-write-error . G4c93@G4b04@make-i/o-write-error) (make-i/o-read-error . G4c8b@G4aef@make-i/o-read-error) (make-i/o-port-error . G4ccf@G4ba2@make-i/o-port-error) (make-i/o-invalid-position-error . G4c9b@G4b1a@make-i/o-invalid-position-error) (make-i/o-filename-error . G4ca5@G4b34@make-i/o-filename-error) (make-i/o-file-protection-error . G4caf@G4b4d@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cb7@G4b62@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cc7@G4b8c@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cbf@G4b77@make-i/o-file-already-exists-error) (make-i/o-error . G4c83@G4ada@make-i/o-error) (make-i/o-encoding-error . G4ce1@G4bd1@make-i/o-encoding-error) (make-i/o-decoding-error . G4cd9@G4bbb@make-i/o-decoding-error) (i/o-write-error? . G4c94@G4b06@i/o-write-error?) (i/o-read-error? . G4c8c@G4af1@i/o-read-error?) (i/o-port-error? . G4cd1@G4ba6@i/o-port-error?) (i/o-invalid-position-error? . G4c9d@G4b1e@i/o-invalid-position-error?) (i/o-filename-error? . G4ca7@G4b38@i/o-filename-error?) (i/o-file-protection-error? . G4cb0@G4b4f@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cb8@G4b64@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cc8@G4b8e@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cc0@G4b79@i/o-file-already-exists-error?) (i/o-error? . G4c84@G4adc@i/o-error?) (i/o-error-position . G4c9e@G4b20@i/o-error-position) (i/o-error-port . G4cd2@G4ba8@i/o-error-port) (i/o-error-filename . G4ca8@G4b3a@i/o-error-filename) (i/o-encoding-error? . G4ce3@G4bd5@i/o-encoding-error?) (i/o-encoding-error-char . G4ce4@G4bd7@i/o-encoding-error-char) (i/o-decoding-error? . G4cda@G4bbd@i/o-decoding-error?) (scheme-report-environment . G492e@G301f@scheme-report-environment) (null-environment . G492d@G301d@null-environment) (command-line . G4dc5@G4d06@command-line) (eval . G4930@G3023@eval) (environment . G492c@G301b@environment) (who-condition? . G4c4f@G4a52@who-condition?) (warning? . G4c1c@G49cc@warning?) (violation? . G4c34@G4a0b@violation?) (undefined-violation? . G4c7c@G4ac7@undefined-violation?) (syntax-violation? . G4c72@G4aae@syntax-violation?) (syntax-violation-subform . G4c74@G4ab2@syntax-violation-subform) (syntax-violation-form . G4c73@G4ab0@syntax-violation-form) (syntax-violation . G4940@G3043@syntax-violation) (serious-condition? . G4c24@G49e1@serious-condition?) (non-continuable-violation? . G4c58@G4a69@non-continuable-violation?) (message-condition? . G4c13@G49b5@message-condition?) (make-who-condition . G4c4d@G4a4e@make-who-condition) (make-warning . G4c1b@G49ca@make-warning) (make-violation . G4c33@G4a09@make-violation) (make-undefined-violation . G4c7b@G4ac5@make-undefined-violation) (make-syntax-violation . G4c6f@G4aa8@make-syntax-violation) (make-serious-condition . G4c23@G49df@make-serious-condition) (make-non-continuable-violation . G4c57@G4a67@make-non-continuable-violation) (make-message-condition . G4c11@G49b1@make-message-condition) (make-lexical-violation . G4c67@G4a91@make-lexical-violation) (make-irritants-condition . G4c43@G4a34@make-irritants-condition) (make-implementation-restriction-violation . G4c5f@G4a7c@make-implementation-restriction-violation) (make-error . G4c2b@G49f4@make-error) (make-assertion-violation . G4c3b@G4a1e@make-assertion-violation) (lexical-violation? . G4c68@G4a93@lexical-violation?) (irritants-condition? . G4c45@G4a38@irritants-condition?) (implementation-restriction-violation? . G4c60@G4a7e@implementation-restriction-violation?) (error? . G4c2c@G49f6@error?) (condition-who . G4c50@G4a54@condition-who) (condition-message . G4c14@G49b7@condition-message) (condition-irritants . G4c46@G4a3a@condition-irritants) (assertion-violation? . G4c3c@G4a20@assertion-violation?) (no-nans-violation? . G4cf4@G4c01@no-nans-violation?) (no-infinities-violation? . G4cec@G4bec@no-infinities-violation?) (make-no-nans-violation . G4cf3@G4bff@make-no-nans-violation) (make-no-infinities-violation . G4ceb@G4bea@make-no-infinities-violation)))))) (G2b6e@G2a13@install-library 'G50a8 '(mosh interaction) '() '() '() '() '((format . G5079) (string-split . G506f) (call-process . G5069) (set-current-directory! . G5065) (expand-path . G5064) (current-directory . G5063) (%spawn . G5062) (%waitpid . G5061) (%fork . G5060) (%pipe . G505f) (string-upcase . G504f) (string-titlecase . G504e) (string-normalize-nfkd . G504d) (string-normalize-nfkc . G504c) (string-normalize-nfd . G504b) (string-normalize-nfc . G504a) (string-foldcase . G5049) (string-downcase . G5048) (string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-title-case? . G5040) (char-numeric? . G503f) (char-lower-case? . G503e) (char-general-category . G503d) (char-upcase . G503c) (char-titlecase . G503b) (char-foldcase . G503a) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033) (make-variable-transformer . G2d92) (identifier? . G3044) (generate-temporaries . G3030) (free-identifier=? . G3032) (syntax->datum . G3048) (datum->syntax . G3046) (bound-identifier=? . G3034) (record-type-descriptor? . G5032) (record-predicate . G5031) (record-mutator . G5030) (record-constructor . G502f) (record-accessor . G502e) (make-record-type-descriptor . G502d) (make-record-constructor-descriptor . G502c) (record? . G502b) (record-type-uid . G502a) (record-type-sealed? . G5029) (record-type-parent . G5028) (record-type-opaque? . G5027) (record-type-name . G5026) (record-type-generative? . G5025) (record-type-field-names . G5024) (record-rtd . G5023) (record-field-mutable? . G5022) (delete-file . G5021) (file-exists? . G5020) (vector-sort! . G501f) (vector-sort . G501e) (list-sort . G501d) (symbol-hash . G501c) (string-ci-hash . G501b) (string-hash . G501a) (equal-hash . G5019) (hashtable-equivalence-function . G5018) (make-hashtable . G5017) (hashtable-hash-function . G5016) (make-eqv-hashtable . G5015) (make-eq-hashtable . G5014) (hashtable? . G5013) (hashtable-update! . G5012) (hashtable-size . G5011) (hashtable-set! . G5010) (hashtable-ref . G500f) (hashtable-mutable? . G500e) (hashtable-keys . G500d) (hashtable-entries . G500c) (hashtable-delete! . G500b) (hashtable-copy . G500a) (hashtable-contains? . G5009) (hashtable-clear! . G5008) (call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (utf-8-codec . G4ff1) (utf-16-codec . G4ff0) (transcoder-error-handling-mode . G4fef) (transcoder-eol-style . G4fee) (transcoder-codec . G4fed) (transcoded-port . G4fec) (textual-port? . G4feb) (string->bytevector . G4fea) (standard-output-port . G4fe9) (standard-input-port . G4fe8) (standard-error-port . G4fe7) (set-port-position! . G4fe6) (put-u8 . G4fe5) (put-string . G4fe4) (put-datum . G4fe3) (put-char . G4fe2) (put-bytevector . G4fe1) (port? . G4fe0) (port-transcoder . G4fdf) (port-position . G4fde) (port-has-set-port-position!? . G4fdd) (port-has-port-position? . G4fdc) (port-eof? . G4fdb) (output-port-buffer-mode . G4fda) (open-string-output-port . G4fd9) (open-string-input-port . G4fd8) (open-file-output-port . G4fd7) (open-file-input/output-port . G4fd6) (open-file-input-port . G4fd5) (open-bytevector-output-port . G4fd4) (open-bytevector-input-port . G4fd3) (native-transcoder . G4fd2) (native-eol-style . G4fd1) (make-transcoder . G4fd0) (latin-1-codec . G4fcf) (make-i/o-write-error . G4b03) (make-i/o-read-error . G4aee) (make-i/o-port-error . G4ba1) (make-i/o-invalid-position-error . G4b19) (make-i/o-filename-error . G4b33) (make-i/o-file-protection-error . G4b4c) (make-i/o-file-is-read-only-error . G4b61) (make-i/o-file-does-not-exist-error . G4b8b) (make-i/o-file-already-exists-error . G4b76) (make-i/o-error . G4ad9) (make-i/o-encoding-error . G4bd0) (make-i/o-decoding-error . G4bba) (make-custom-textual-output-port . G4fce) (make-custom-textual-input/output-port . G4fcd) (make-custom-textual-input-port . G4fcc) (make-custom-binary-output-port . G4fcb) (make-custom-binary-input/output-port . G4fca) (make-custom-binary-input-port . G4fc9) (make-bytevector . G4fc8) (lookahead-u8 . G4fc7) (lookahead-char . G4fc6) (i/o-write-error? . G4b05) (i/o-read-error? . G4af0) (i/o-port-error? . G4ba5) (i/o-invalid-position-error? . G4b1d) (i/o-filename-error? . G4b37) (i/o-file-protection-error? . G4b4e) (i/o-file-is-read-only-error? . G4b63) (i/o-file-does-not-exist-error? . G4b8d) (i/o-file-already-exists-error? . G4b78) (i/o-error? . G4adb) (i/o-error-position . G4b1f) (i/o-error-port . G4ba7) (i/o-error-filename . G4b39) (i/o-encoding-error? . G4bd4) (i/o-encoding-error-char . G4bd6) (i/o-decoding-error? . G4bbc) (get-u8 . G4fc5) (get-string-n! . G4fc4) (get-string-n . G4fc3) (get-string-all . G4fc2) (get-line . G4fc1) (get-datum . G4fc0) (get-char . G4fbf) (get-bytevector-some . G4fbe) (get-bytevector-n! . G4fbd) (get-bytevector-n . G4fbc) (get-bytevector-all . G4fbb) (flush-output-port . G4fba) (close-port . G4fb9) (exit . G4fb1) (command-line . G4d05) (string-fill! . G4fb0) (string-set! . G4faf) (set-cdr! . G4fae) (set-car! . G4fad) (remove . G4fac) (remv . G4fab) (remp . G4faa) (remq . G4fa9) (partition . G4fa8) (memv . G4fa7) (memq . G4fa6) (memp . G4fa5) (member . G4fa4) (exists . G4fa3) (for-all . G4fa2) (fold-right . G4fa1) (fold-left . G4fa0) (find . G4f9f) (filter . G4f9e) (cons* . G4f9d) (assv . G4f9c) (assq . G4f9b) (assp . G4f9a) (assoc . G4f99) (call-with-string-output-port . G4f98) (call-with-port . G4f97) (call-with-bytevector-output-port . G4f96) (bytevector->string . G4f95) (buffer-mode? . G4f94) (binary-port? . G4f93) (with-exception-handler . G4f92) (raise-continuable . G4f91) (raise . G4f90) (eval . G3022) (environment . G301a) (make-enumeration . G4f8f) (enum-set=? . G4f8e) (enum-set-universe . G4f8d) (enum-set-union . G4f8c) (enum-set-subset? . G4f8b) (enum-set-projection . G4f8a) (enum-set-member? . G4f89) (enum-set-intersection . G4f88) (enum-set-indexer . G4f87) (enum-set-difference . G4f86) (enum-set-constructor . G4f85) (enum-set-complement . G4f84) (enum-set->list . G4f83) (who-condition? . G4a51) (warning? . G49cb) (violation? . G4a0a) (undefined-violation? . G4ac6) (syntax-violation? . G4aad) (syntax-violation-subform . G4ab1) (syntax-violation-form . G4aaf) (syntax-violation . G3042) (simple-conditions . G4f82) (serious-condition? . G49e0) (non-continuable-violation? . G4a68) (message-condition? . G49b4) (make-who-condition . G4a4d) (make-warning . G49c9) (make-violation . G4a08) (make-undefined-violation . G4ac4) (make-syntax-violation . G4aa7) (make-serious-condition . G49de) (make-non-continuable-violation . G4a66) (make-message-condition . G49b0) (make-lexical-violation . G4a90) (make-irritants-condition . G4a33) (make-implementation-restriction-violation . G4a7b) (make-error . G49f3) (make-assertion-violation . G4a1d) (lexical-violation? . G4a92) (irritants-condition? . G4a37) (implementation-restriction-violation? . G4a7d) (error? . G49f5) (condition-who . G4a53) (condition-predicate . G4f81) (condition-message . G49b6) (condition-irritants . G4a39) (condition-accessor . G4f80) (condition . G4f7f) (assertion-violation? . G4a1f) (condition? . G4f7e) (utf32->string . G4f7d) (utf16->string . G4f7c) (utf8->string . G4f7b) (uint-list->bytevector . G4f7a) (u8-list->bytevector . G4f79) (string->utf8 . G4f78) (string->utf32 . G4f77) (string->utf16 . G4f76) (sint-list->bytevector . G4f75) (native-endianness . G4f74) (bytevector? . G4f73) (bytevector=? . G4f72) (bytevector-uint-set! . G4f71) (bytevector-uint-ref . G4f70) (bytevector-u8-set! . G4f6f) (bytevector-u8-ref . G4f6e) (bytevector-u64-set! . G4f6d) (bytevector-u64-ref . G4f6c) (bytevector-u64-native-set! . G4f6b) (bytevector-u64-native-ref . G4f6a) (bytevector-u32-set! . G4f69) (bytevector-u32-ref . G4f68) (bytevector-u32-native-set! . G4f67) (bytevector-u32-native-ref . G4f66) (bytevector-u16-set! . G4f65) (bytevector-u16-ref . G4f64) (bytevector-u16-native-set! . G4f63) (bytevector-u16-native-ref . G4f62) (bytevector-sint-set! . G4f61) (bytevector-sint-ref . G4f60) (bytevector-s8-set! . G4f5f) (bytevector-s8-ref . G4f5e) (bytevector-s64-set! . G4f5d) (bytevector-s64-ref . G4f5c) (bytevector-s64-native-set! . G4f5b) (bytevector-s64-native-ref . G4f5a) (bytevector-s32-set! . G4f59) (bytevector-s32-ref . G4f58) (bytevector-s32-native-set! . G4f57) (bytevector-s32-native-ref . G4f56) (bytevector-s16-set! . G4f55) (bytevector-s16-ref . G4f54) (bytevector-s16-native-set! . G4f53) (bytevector-s16-native-ref . G4f52) (bytevector-length . G4f51) (bytevector-ieee-single-ref . G4f50) (bytevector-ieee-single-set! . G4f4f) (bytevector-ieee-single-native-set! . G4f4e) (bytevector-ieee-single-native-ref . G4f4d) (bytevector-ieee-double-set! . G4f4c) (bytevector-ieee-double-ref . G4f4b) (bytevector-ieee-double-native-set! . G4f4a) (bytevector-ieee-double-native-ref . G4f49) (bytevector-fill! . G4f48) (bytevector-copy! . G4f47) (bytevector-copy . G4f46) (bytevector->uint-list . G4f45) (bytevector->u8-list . G4f44) (bytevector->sint-list . G4f43) (no-nans-violation? . G4c00) (no-infinities-violation? . G4beb) (make-no-nans-violation . G4bfe) (make-no-infinities-violation . G4be9) (real->flonum . G4f42) (flzero? . G4f41) (fltruncate . G4f40) (fltan . G4f3f) (flsqrt . G4f3e) (flsin . G4f3d) (flround . G4f3c) (flpositive? . G4f3b) (flonum? . G4f3a) (flodd? . G4f39) (flnumerator . G4f38) (flnegative? . G4f37) (flnan? . G4f36) (flmod0 . G4f35) (flmod . G4f34) (flmin . G4f33) (flmax . G4f32) (fllog . G4f31) (flinteger? . G4f30) (flinfinite? . G4f2f) (flfloor . G4f2e) (flfinite? . G4f2d) (flexpt . G4f2c) (flexp . G4f2b) (fleven? . G4f2a) (fldiv0-and-mod0 . G4f29) (fldiv0 . G4f28) (fldiv-and-mod . G4f27) (fldiv . G4f26) (fldenominator . G4f25) (flcos . G4f24) (flceiling . G4f23) (flatan . G4f22) (flasin . G4f21) (flacos . G4f20) (flabs . G4f1f) (fl>? . G4f1e) (fl>=? . G4f1d) (fl=? . G4f1c) (fl<? . G4f1b) (fl<=? . G4f1a) (fl/ . G4f19) (fl- . G4f18) (fl+ . G4f17) (fl* . G4f16) (fixnum->flonum . G4f15) (fxzero? . G4f14) (fxxor . G4f13) (fxrotate-bit-field . G4f12) (fxreverse-bit-field . G4f11) (fxpositive? . G4f10) (fxodd? . G4f0f) (fxnot . G4f0e) (fxnegative? . G4f0d) (fxmod0 . G4f0c) (fxmod . G4f0b) (fxmin . G4f0a) (fxmax . G4f09) (fxlength . G4f08) (fxior . G4f07) (fxif . G4f06) (fxfirst-bit-set . G4f05) (fxeven? . G4f04) (fxdiv0-and-mod0 . G4f03) (fxdiv0 . G4f02) (fxdiv-and-mod . G4f01) (fxdiv . G4f00) (fxcopy-bit-field . G4eff) (fxcopy-bit . G4efe) (fxbit-set? . G4efd) (fxbit-field . G4efc) (fxbit-count . G4efb) (fxarithmetic-shift-right . G4efa) (fxarithmetic-shift-left . G4ef9) (fxarithmetic-shift . G4ef8) (fxand . G4ef7) (fx>? . G4ef6) (fx>=? . G4ef5) (fx=? . G4ef4) (fx<? . G4ef3) (fx<=? . G4ef2) (fx-/carry . G4ef1) (fx- . G4ef0) (fx+/carry . G4eef) (fx+ . G4eee) (fx*/carry . G4eed) (fx* . G4eec) (greatest-fixnum . G4eeb) (least-fixnum . G4eea) (fixnum-width . G4ee9) (fixnum? . G4ee8) (bitwise-rotate-bit-field . G4ee7) (bitwise-reverse-bit-field . G4ee6) (bitwise-length . G4ee5) (bitwise-if . G4ee4) (bitwise-first-bit-set . G4ee3) (bitwise-copy-bit-field . G4ee2) (bitwise-copy-bit . G4ee1) (bitwise-bit-set? . G4ee0) (bitwise-bit-field . G4edf) (bitwise-bit-count . G4ede) (bitwise-xor . G4edd) (bitwise-ior . G4edc) (bitwise-and . G4edb) (bitwise-not . G4eda) (bitwise-arithmetic-shift-right . G4ed9) (bitwise-arithmetic-shift-left . G4ed8) (bitwise-arithmetic-shift . G4ed7) (zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-map . G4ed2) (vector-length . G4ed1) (vector-for-each . G4ed0) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol=? . G4ec8) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-for-each . G4ebd) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-valued? . G4eb1) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (rational-valued? . G4ead) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (null? . G4ea5) (not . G4ea4) (negative? . G4ea3) (nan? . G4ea2) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer-valued? . G4e8f) (integer->char . G4e8e) (infinite? . G4e8d) (inexact? . G4e8c) (inexact . G4e8b) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (finite? . G4e86) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (exact-integer-sqrt . G4e82) (exact . G4e81) (even? . G4e80) (error . G4e7f) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (div0-and-mod0 . G4e7a) (mod0 . G4e79) (div0 . G4e78) (div-and-mod . G4e77) (mod . G4e76) (div . G4e75) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call/cc . G4e67) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (boolean=? . G4e46) (atan . G4e45) (assertion-violation . G4e44) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (library . G4e34) (export . G4e33) (&no-nans . G4e32) (&no-infinities . G4e31) (&i/o-encoding . G4e30) (&i/o-decoding . G4e2f) (&i/o-port . G4e2e) (&i/o-file-does-not-exist . G4e2d) (&i/o-file-already-exists . G4e2c) (&i/o-file-is-read-only . G4e2b) (&i/o-file-protection . G4e2a) (&i/o-filename . G4e29) (&i/o-invalid-position . G4e28) (&i/o-write . G4e27) (&i/o-read . G4e26) (&i/o . G4e25) (&undefined . G4e24) (&syntax . G4e23) (&lexical . G4e22) (&implementation-restriction . G4e21) (&non-continuable . G4e20) (&who . G4e1f) (&irritants . G4e1e) (&assertion . G4e1d) (&violation . G4e1c) (&error . G4e1b) (&serious . G4e1a) (&warning . G4e19) (&message . G4e18) (&condition . G4e17) (define-condition-type . G4e16) (define-enumeration . G4e15) (define-record-type . G4e14) (parent-rtd . G4e13) (nongenerative . G4e12) (opaque . G4e11) (sealed . G4e10) (protocol . G4e0f) (parent . G4e0e) (immutable . G4e0d) (mutable . G4e0c) (fields . G4e0b) (error-handling-mode . G4e0a) (file-options . G4e09) (buffer-mode . G4e08) (eol-style . G4e07) (guard . G4e06) (unsyntax-splicing . G4e03) (unsyntax . G4e02) (unquote-splicing . G4e01) (unquote . G4e00) (_ . G4dff) (else . G4dfe) (=> . G4dfd) (... . G4dfc) (assert . G4dfb) (endianness . G4dfa) (do . G4df7) (cond . G4df6) (let* . G4df5) (let . G4df4) (let*-values . G4df3) (let-values . G4df2) (identifier-syntax . G4df1) (with-syntax . G4df0) (quasisyntax . G4def) (quasiquote . G4dee) (syntax-rules . G4ded) (include . G4dec) (record-constructor-descriptor . G4dea) (record-type-descriptor . G4de9) (case . G4de8) (unless . G4de6) (when . G4de5) (or . G4de4) (and . G4de3) (if . G4de2) (letrec* . G4de1) (letrec . G4de0) (case-lambda . G4dde) (lambda . G4ddd) (syntax . G4ddc) (syntax-case . G4ddb) (quote . G4dda) (letrec-syntax . G4dd8) (let-syntax . G4dd7) (set! . G4dd6) (import . G4dd5) (begin . G4dd4) (define-syntax . G4dd2) (define . G4dd1)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50a9 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fb2) (unquote-splicing . G4e01) (unquote . G4e00) (_ . G4dff) (else . G4dfe) (=> . G4dfd) (... . G4dfc) (delay . G4df9) (do . G4df7) (cond . G4df6) (let* . G4df5) (let . G4df4) (quasiquote . G4dee) (syntax-rules . G4ded) (case . G4de8) (or . G4de4) (and . G4de3) (if . G4de2) (letrec . G4de0) (lambda . G4ddd) (quote . G4dda) (letrec-syntax . G4dd8) (let-syntax . G4dd7) (set! . G4dd6) (begin . G4dd4) (define-syntax . G4dd2) (define . G4dd1)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50aa '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-numeric? . G503f) (char-lower-case? . G503e) (char-upcase . G503c) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033) (call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object . G4ff7) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (scheme-report-environment . G301e) (quotient . G4fb8) (null-environment . G301c) (remainder . G4fb7) (modulo . G4fb6) (inexact->exact . G4fb5) (force . G4fb4) (exact->inexact . G4fb3) (make-promise . G4fb2) (string-fill! . G4fb0) (string-set! . G4faf) (set-cdr! . G4fae) (set-car! . G4fad) (memv . G4fa7) (memq . G4fa6) (member . G4fa4) (assv . G4f9c) (assq . G4f9b) (assoc . G4f99) (eval . G3022) (zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-length . G4ed1) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (not . G4ea4) (negative? . G4ea3) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer->char . G4e8e) (inexact? . G4e8c) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (even? . G4e80) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (atan . G4e45) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (unquote-splicing . G4e01) (unquote . G4e00) (else . G4dfe) (=> . G4dfd) (... . G4dfc) (delay . G4df9) (do . G4df7) (cond . G4df6) (let* . G4df5) (let . G4df4) (quasiquote . G4dee) (syntax-rules . G4ded) (case . G4de8) (or . G4de4) (and . G4de3) (if . G4de2) (letrec . G4de0) (lambda . G4ddd) (quote . G4dda) (letrec-syntax . G4dd8) (let-syntax . G4dd7) (set! . G4dd6) (begin . G4dd4) (define-syntax . G4dd2) (define . G4dd1)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50ab '(psyntax modules) '() '() '() '() '((module . G4dd3)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50ac '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50ad '(rnrs) '(6) '() '() '() '((regexp? . G50a0) (string-upcase . G504f) (string-titlecase . G504e) (string-normalize-nfkd . G504d) (string-normalize-nfkc . G504c) (string-normalize-nfd . G504b) (string-normalize-nfc . G504a) (string-foldcase . G5049) (string-downcase . G5048) (string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-title-case? . G5040) (char-numeric? . G503f) (char-lower-case? . G503e) (char-general-category . G503d) (char-upcase . G503c) (char-titlecase . G503b) (char-foldcase . G503a) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033) (make-variable-transformer . G2d92) (identifier? . G3044) (generate-temporaries . G3030) (free-identifier=? . G3032) (syntax->datum . G3048) (datum->syntax . G3046) (bound-identifier=? . G3034) (record-type-descriptor? . G5032) (record-predicate . G5031) (record-mutator . G5030) (record-constructor . G502f) (record-accessor . G502e) (make-record-type-descriptor . G502d) (make-record-constructor-descriptor . G502c) (record? . G502b) (record-type-uid . G502a) (record-type-sealed? . G5029) (record-type-parent . G5028) (record-type-opaque? . G5027) (record-type-name . G5026) (record-type-generative? . G5025) (record-type-field-names . G5024) (record-rtd . G5023) (record-field-mutable? . G5022) (delete-file . G5021) (file-exists? . G5020) (vector-sort! . G501f) (vector-sort . G501e) (list-sort . G501d) (symbol-hash . G501c) (string-ci-hash . G501b) (string-hash . G501a) (equal-hash . G5019) (hashtable-equivalence-function . G5018) (make-hashtable . G5017) (hashtable-hash-function . G5016) (make-eqv-hashtable . G5015) (make-eq-hashtable . G5014) (hashtable? . G5013) (hashtable-update! . G5012) (hashtable-size . G5011) (hashtable-set! . G5010) (hashtable-ref . G500f) (hashtable-mutable? . G500e) (hashtable-keys . G500d) (hashtable-entries . G500c) (hashtable-delete! . G500b) (hashtable-copy . G500a) (hashtable-contains? . G5009) (hashtable-clear! . G5008) (call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (utf-8-codec . G4ff1) (utf-16-codec . G4ff0) (transcoder-error-handling-mode . G4fef) (transcoder-eol-style . G4fee) (transcoder-codec . G4fed) (transcoded-port . G4fec) (textual-port? . G4feb) (string->bytevector . G4fea) (standard-output-port . G4fe9) (standard-input-port . G4fe8) (standard-error-port . G4fe7) (set-port-position! . G4fe6) (put-u8 . G4fe5) (put-string . G4fe4) (put-datum . G4fe3) (put-char . G4fe2) (put-bytevector . G4fe1) (port? . G4fe0) (port-transcoder . G4fdf) (port-position . G4fde) (port-has-set-port-position!? . G4fdd) (port-has-port-position? . G4fdc) (port-eof? . G4fdb) (output-port-buffer-mode . G4fda) (open-string-output-port . G4fd9) (open-string-input-port . G4fd8) (open-file-output-port . G4fd7) (open-file-input/output-port . G4fd6) (open-file-input-port . G4fd5) (open-bytevector-output-port . G4fd4) (open-bytevector-input-port . G4fd3) (native-transcoder . G4fd2) (native-eol-style . G4fd1) (make-transcoder . G4fd0) (latin-1-codec . G4fcf) (make-i/o-write-error . G4b03) (make-i/o-read-error . G4aee) (make-i/o-port-error . G4ba1) (make-i/o-invalid-position-error . G4b19) (make-i/o-filename-error . G4b33) (make-i/o-file-protection-error . G4b4c) (make-i/o-file-is-read-only-error . G4b61) (make-i/o-file-does-not-exist-error . G4b8b) (make-i/o-file-already-exists-error . G4b76) (make-i/o-error . G4ad9) (make-i/o-encoding-error . G4bd0) (make-i/o-decoding-error . G4bba) (make-custom-textual-output-port . G4fce) (make-custom-textual-input/output-port . G4fcd) (make-custom-textual-input-port . G4fcc) (make-custom-binary-output-port . G4fcb) (make-custom-binary-input/output-port . G4fca) (make-custom-binary-input-port . G4fc9) (make-bytevector . G4fc8) (lookahead-u8 . G4fc7) (lookahead-char . G4fc6) (i/o-write-error? . G4b05) (i/o-read-error? . G4af0) (i/o-port-error? . G4ba5) (i/o-invalid-position-error? . G4b1d) (i/o-filename-error? . G4b37) (i/o-file-protection-error? . G4b4e) (i/o-file-is-read-only-error? . G4b63) (i/o-file-does-not-exist-error? . G4b8d) (i/o-file-already-exists-error? . G4b78) (i/o-error? . G4adb) (i/o-error-position . G4b1f) (i/o-error-port . G4ba7) (i/o-error-filename . G4b39) (i/o-encoding-error? . G4bd4) (i/o-encoding-error-char . G4bd6) (i/o-decoding-error? . G4bbc) (get-u8 . G4fc5) (get-string-n! . G4fc4) (get-string-n . G4fc3) (get-string-all . G4fc2) (get-line . G4fc1) (get-datum . G4fc0) (get-char . G4fbf) (get-bytevector-some . G4fbe) (get-bytevector-n! . G4fbd) (get-bytevector-n . G4fbc) (get-bytevector-all . G4fbb) (flush-output-port . G4fba) (close-port . G4fb9) (exit . G4fb1) (command-line . G4d05) (remove . G4fac) (remv . G4fab) (remp . G4faa) (remq . G4fa9) (partition . G4fa8) (memv . G4fa7) (memq . G4fa6) (memp . G4fa5) (member . G4fa4) (exists . G4fa3) (for-all . G4fa2) (fold-right . G4fa1) (fold-left . G4fa0) (find . G4f9f) (filter . G4f9e) (cons* . G4f9d) (assv . G4f9c) (assq . G4f9b) (assp . G4f9a) (assoc . G4f99) (call-with-string-output-port . G4f98) (call-with-port . G4f97) (call-with-bytevector-output-port . G4f96) (bytevector->string . G4f95) (buffer-mode? . G4f94) (binary-port? . G4f93) (with-exception-handler . G4f92) (raise-continuable . G4f91) (raise . G4f90) (make-enumeration . G4f8f) (enum-set=? . G4f8e) (enum-set-universe . G4f8d) (enum-set-union . G4f8c) (enum-set-subset? . G4f8b) (enum-set-projection . G4f8a) (enum-set-member? . G4f89) (enum-set-intersection . G4f88) (enum-set-indexer . G4f87) (enum-set-difference . G4f86) (enum-set-constructor . G4f85) (enum-set-complement . G4f84) (enum-set->list . G4f83) (who-condition? . G4a51) (warning? . G49cb) (violation? . G4a0a) (undefined-violation? . G4ac6) (syntax-violation? . G4aad) (syntax-violation-subform . G4ab1) (syntax-violation-form . G4aaf) (syntax-violation . G3042) (simple-conditions . G4f82) (serious-condition? . G49e0) (non-continuable-violation? . G4a68) (message-condition? . G49b4) (make-who-condition . G4a4d) (make-warning . G49c9) (make-violation . G4a08) (make-undefined-violation . G4ac4) (make-syntax-violation . G4aa7) (make-serious-condition . G49de) (make-non-continuable-violation . G4a66) (make-message-condition . G49b0) (make-lexical-violation . G4a90) (make-irritants-condition . G4a33) (make-implementation-restriction-violation . G4a7b) (make-error . G49f3) (make-assertion-violation . G4a1d) (lexical-violation? . G4a92) (irritants-condition? . G4a37) (implementation-restriction-violation? . G4a7d) (error? . G49f5) (condition-who . G4a53) (condition-predicate . G4f81) (condition-message . G49b6) (condition-irritants . G4a39) (condition-accessor . G4f80) (condition . G4f7f) (assertion-violation? . G4a1f) (condition? . G4f7e) (utf32->string . G4f7d) (utf16->string . G4f7c) (utf8->string . G4f7b) (uint-list->bytevector . G4f7a) (u8-list->bytevector . G4f79) (string->utf8 . G4f78) (string->utf32 . G4f77) (string->utf16 . G4f76) (sint-list->bytevector . G4f75) (native-endianness . G4f74) (bytevector? . G4f73) (bytevector=? . G4f72) (bytevector-uint-set! . G4f71) (bytevector-uint-ref . G4f70) (bytevector-u8-set! . G4f6f) (bytevector-u8-ref . G4f6e) (bytevector-u64-set! . G4f6d) (bytevector-u64-ref . G4f6c) (bytevector-u64-native-set! . G4f6b) (bytevector-u64-native-ref . G4f6a) (bytevector-u32-set! . G4f69) (bytevector-u32-ref . G4f68) (bytevector-u32-native-set! . G4f67) (bytevector-u32-native-ref . G4f66) (bytevector-u16-set! . G4f65) (bytevector-u16-ref . G4f64) (bytevector-u16-native-set! . G4f63) (bytevector-u16-native-ref . G4f62) (bytevector-sint-set! . G4f61) (bytevector-sint-ref . G4f60) (bytevector-s8-set! . G4f5f) (bytevector-s8-ref . G4f5e) (bytevector-s64-set! . G4f5d) (bytevector-s64-ref . G4f5c) (bytevector-s64-native-set! . G4f5b) (bytevector-s64-native-ref . G4f5a) (bytevector-s32-set! . G4f59) (bytevector-s32-ref . G4f58) (bytevector-s32-native-set! . G4f57) (bytevector-s32-native-ref . G4f56) (bytevector-s16-set! . G4f55) (bytevector-s16-ref . G4f54) (bytevector-s16-native-set! . G4f53) (bytevector-s16-native-ref . G4f52) (bytevector-length . G4f51) (bytevector-ieee-single-ref . G4f50) (bytevector-ieee-single-set! . G4f4f) (bytevector-ieee-single-native-set! . G4f4e) (bytevector-ieee-single-native-ref . G4f4d) (bytevector-ieee-double-set! . G4f4c) (bytevector-ieee-double-ref . G4f4b) (bytevector-ieee-double-native-set! . G4f4a) (bytevector-ieee-double-native-ref . G4f49) (bytevector-fill! . G4f48) (bytevector-copy! . G4f47) (bytevector-copy . G4f46) (bytevector->uint-list . G4f45) (bytevector->u8-list . G4f44) (bytevector->sint-list . G4f43) (no-nans-violation? . G4c00) (no-infinities-violation? . G4beb) (make-no-nans-violation . G4bfe) (make-no-infinities-violation . G4be9) (real->flonum . G4f42) (flzero? . G4f41) (fltruncate . G4f40) (fltan . G4f3f) (flsqrt . G4f3e) (flsin . G4f3d) (flround . G4f3c) (flpositive? . G4f3b) (flonum? . G4f3a) (flodd? . G4f39) (flnumerator . G4f38) (flnegative? . G4f37) (flnan? . G4f36) (flmod0 . G4f35) (flmod . G4f34) (flmin . G4f33) (flmax . G4f32) (fllog . G4f31) (flinteger? . G4f30) (flinfinite? . G4f2f) (flfloor . G4f2e) (flfinite? . G4f2d) (flexpt . G4f2c) (flexp . G4f2b) (fleven? . G4f2a) (fldiv0-and-mod0 . G4f29) (fldiv0 . G4f28) (fldiv-and-mod . G4f27) (fldiv . G4f26) (fldenominator . G4f25) (flcos . G4f24) (flceiling . G4f23) (flatan . G4f22) (flasin . G4f21) (flacos . G4f20) (flabs . G4f1f) (fl>? . G4f1e) (fl>=? . G4f1d) (fl=? . G4f1c) (fl<? . G4f1b) (fl<=? . G4f1a) (fl/ . G4f19) (fl- . G4f18) (fl+ . G4f17) (fl* . G4f16) (fixnum->flonum . G4f15) (fxzero? . G4f14) (fxxor . G4f13) (fxrotate-bit-field . G4f12) (fxreverse-bit-field . G4f11) (fxpositive? . G4f10) (fxodd? . G4f0f) (fxnot . G4f0e) (fxnegative? . G4f0d) (fxmod0 . G4f0c) (fxmod . G4f0b) (fxmin . G4f0a) (fxmax . G4f09) (fxlength . G4f08) (fxior . G4f07) (fxif . G4f06) (fxfirst-bit-set . G4f05) (fxeven? . G4f04) (fxdiv0-and-mod0 . G4f03) (fxdiv0 . G4f02) (fxdiv-and-mod . G4f01) (fxdiv . G4f00) (fxcopy-bit-field . G4eff) (fxcopy-bit . G4efe) (fxbit-set? . G4efd) (fxbit-field . G4efc) (fxbit-count . G4efb) (fxarithmetic-shift-right . G4efa) (fxarithmetic-shift-left . G4ef9) (fxarithmetic-shift . G4ef8) (fxand . G4ef7) (fx>? . G4ef6) (fx>=? . G4ef5) (fx=? . G4ef4) (fx<? . G4ef3) (fx<=? . G4ef2) (fx-/carry . G4ef1) (fx- . G4ef0) (fx+/carry . G4eef) (fx+ . G4eee) (fx*/carry . G4eed) (fx* . G4eec) (greatest-fixnum . G4eeb) (least-fixnum . G4eea) (fixnum-width . G4ee9) (fixnum? . G4ee8) (bitwise-rotate-bit-field . G4ee7) (bitwise-reverse-bit-field . G4ee6) (bitwise-length . G4ee5) (bitwise-if . G4ee4) (bitwise-first-bit-set . G4ee3) (bitwise-copy-bit-field . G4ee2) (bitwise-copy-bit . G4ee1) (bitwise-bit-set? . G4ee0) (bitwise-bit-field . G4edf) (bitwise-bit-count . G4ede) (bitwise-xor . G4edd) (bitwise-ior . G4edc) (bitwise-and . G4edb) (bitwise-not . G4eda) (bitwise-arithmetic-shift-right . G4ed9) (bitwise-arithmetic-shift-left . G4ed8) (bitwise-arithmetic-shift . G4ed7) (zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-map . G4ed2) (vector-length . G4ed1) (vector-for-each . G4ed0) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol=? . G4ec8) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-for-each . G4ebd) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-valued? . G4eb1) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (rational-valued? . G4ead) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (null? . G4ea5) (not . G4ea4) (negative? . G4ea3) (nan? . G4ea2) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer-valued? . G4e8f) (integer->char . G4e8e) (infinite? . G4e8d) (inexact? . G4e8c) (inexact . G4e8b) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (finite? . G4e86) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (exact-integer-sqrt . G4e82) (exact . G4e81) (even? . G4e80) (error . G4e7f) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (div0-and-mod0 . G4e7a) (mod0 . G4e79) (div0 . G4e78) (div-and-mod . G4e77) (mod . G4e76) (div . G4e75) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call/cc . G4e67) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (boolean=? . G4e46) (atan . G4e45) (assertion-violation . G4e44) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (&no-nans . G4e32) (&no-infinities . G4e31) (&i/o-encoding . G4e30) (&i/o-decoding . G4e2f) (&i/o-port . G4e2e) (&i/o-file-does-not-exist . G4e2d) (&i/o-file-already-exists . G4e2c) (&i/o-file-is-read-only . G4e2b) (&i/o-file-protection . G4e2a) (&i/o-filename . G4e29) (&i/o-invalid-position . G4e28) (&i/o-write . G4e27) (&i/o-read . G4e26) (&i/o . G4e25) (&undefined . G4e24) (&syntax . G4e23) (&lexical . G4e22) (&implementation-restriction . G4e21) (&non-continuable . G4e20) (&who . G4e1f) (&irritants . G4e1e) (&assertion . G4e1d) (&violation . G4e1c) (&error . G4e1b) (&serious . G4e1a) (&warning . G4e19) (&message . G4e18) (&condition . G4e17) (define-condition-type . G4e16) (define-enumeration . G4e15) (define-record-type . G4e14) (parent-rtd . G4e13) (nongenerative . G4e12) (opaque . G4e11) (sealed . G4e10) (protocol . G4e0f) (parent . G4e0e) (immutable . G4e0d) (mutable . G4e0c) (fields . G4e0b) (error-handling-mode . G4e0a) (file-options . G4e09) (buffer-mode . G4e08) (eol-style . G4e07) (guard . G4e06) (unsyntax-splicing . G4e03) (unsyntax . G4e02) (unquote-splicing . G4e01) (unquote . G4e00) (_ . G4dff) (else . G4dfe) (=> . G4dfd) (... . G4dfc) (assert . G4dfb) (endianness . G4dfa) (do . G4df7) (cond . G4df6) (let* . G4df5) (let . G4df4) (let*-values . G4df3) (let-values . G4df2) (identifier-syntax . G4df1) (with-syntax . G4df0) (quasisyntax . G4def) (quasiquote . G4dee) (syntax-rules . G4ded) (record-constructor-descriptor . G4dea) (record-type-descriptor . G4de9) (case . G4de8) (unless . G4de6) (when . G4de5) (or . G4de4) (and . G4de3) (if . G4de2) (letrec* . G4de1) (letrec . G4de0) (case-lambda . G4dde) (lambda . G4ddd) (syntax . G4ddc) (syntax-case . G4ddb) (quote . G4dda) (letrec-syntax . G4dd8) (let-syntax . G4dd7) (set! . G4dd6) (begin . G4dd4) (define-syntax . G4dd2) (define . G4dd1)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50ae '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G301e) (quotient . G4fb8) (null-environment . G301c) (remainder . G4fb7) (modulo . G4fb6) (inexact->exact . G4fb5) (force . G4fb4) (exact->inexact . G4fb3) (make-promise . G4fb2) (delay . G4df9)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50af '(rnrs control) '(6) '() '() '() '((do . G4df7) (unless . G4de6) (when . G4de5) (case-lambda . G4dde)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b0 '(rnrs eval) '(6) '() '() '() '((eval . G3022) (environment . G301a)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b1 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fae) (set-car! . G4fad)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b2 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fb0) (string-set! . G4faf)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b3 '(rnrs programs) '(6) '() '() '() '((exit . G4fb1) (command-line . G4d05)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b4 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d92) (identifier? . G3044) (generate-temporaries . G3030) (free-identifier=? . G3032) (syntax->datum . G3048) (datum->syntax . G3046) (bound-identifier=? . G3034) (syntax-violation . G3042) (unsyntax-splicing . G4e03) (unsyntax . G4e02) (_ . G4dff) (... . G4dfc) (with-syntax . G4df0) (quasisyntax . G4def) (syntax . G4ddc) (syntax-case . G4ddb)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b5 '(rnrs files) '(6) '() '() '() '((delete-file . G5021) (file-exists? . G5020) (make-i/o-write-error . G4b03) (make-i/o-read-error . G4aee) (make-i/o-port-error . G4ba1) (make-i/o-invalid-position-error . G4b19) (make-i/o-filename-error . G4b33) (make-i/o-file-protection-error . G4b4c) (make-i/o-file-is-read-only-error . G4b61) (make-i/o-file-does-not-exist-error . G4b8b) (make-i/o-file-already-exists-error . G4b76) (make-i/o-error . G4ad9) (i/o-write-error? . G4b05) (i/o-read-error? . G4af0) (i/o-port-error? . G4ba5) (i/o-invalid-position-error? . G4b1d) (i/o-filename-error? . G4b37) (i/o-file-protection-error? . G4b4e) (i/o-file-is-read-only-error? . G4b63) (i/o-file-does-not-exist-error? . G4b8d) (i/o-file-already-exists-error? . G4b78) (i/o-error? . G4adb) (i/o-error-position . G4b1f) (i/o-error-port . G4ba7) (i/o-error-filename . G4b39) (&i/o-port . G4e2e) (&i/o-file-does-not-exist . G4e2d) (&i/o-file-already-exists . G4e2c) (&i/o-file-is-read-only . G4e2b) (&i/o-file-protection . G4e2a) (&i/o-filename . G4e29) (&i/o-invalid-position . G4e28) (&i/o-write . G4e27) (&i/o-read . G4e26) (&i/o . G4e25)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b6 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G501f) (vector-sort . G501e) (list-sort . G501d)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b7 '(rnrs base) '(6) '() '() '() '((zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-map . G4ed2) (vector-length . G4ed1) (vector-for-each . G4ed0) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol=? . G4ec8) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-for-each . G4ebd) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-valued? . G4eb1) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (rational-valued? . G4ead) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (null? . G4ea5) (not . G4ea4) (negative? . G4ea3) (nan? . G4ea2) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer-valued? . G4e8f) (integer->char . G4e8e) (infinite? . G4e8d) (inexact? . G4e8c) (inexact . G4e8b) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (finite? . G4e86) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (exact-integer-sqrt . G4e82) (exact . G4e81) (even? . G4e80) (error . G4e7f) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (div0-and-mod0 . G4e7a) (mod0 . G4e79) (div0 . G4e78) (div-and-mod . G4e77) (mod . G4e76) (div . G4e75) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call/cc . G4e67) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (boolean=? . G4e46) (atan . G4e45) (assertion-violation . G4e44) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (unquote-splicing . G4e01) (unquote . G4e00) (_ . G4dff) (else . G4dfe) (=> . G4dfd) (... . G4dfc) (assert . G4dfb) (cond . G4df6) (let* . G4df5) (let . G4df4) (let*-values . G4df3) (let-values . G4df2) (identifier-syntax . G4df1) (quasiquote . G4dee) (syntax-rules . G4ded) (case . G4de8) (or . G4de4) (and . G4de3) (if . G4de2) (letrec* . G4de1) (letrec . G4de0) (lambda . G4ddd) (quote . G4dda) (letrec-syntax . G4dd8) (let-syntax . G4dd7) (set! . G4dd6) (begin . G4dd4) (define-syntax . G4dd2) (define . G4dd1)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b8 '(rnrs lists) '(6) '() '() '() '((remove . G4fac) (remv . G4fab) (remp . G4faa) (remq . G4fa9) (partition . G4fa8) (memv . G4fa7) (memq . G4fa6) (memp . G4fa5) (member . G4fa4) (exists . G4fa3) (for-all . G4fa2) (fold-right . G4fa1) (fold-left . G4fa0) (find . G4f9f) (filter . G4f9e) (cons* . G4f9d) (assv . G4f9c) (assq . G4f9b) (assp . G4f9a) (assoc . G4f99)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50b9 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (make-i/o-write-error . G4b03) (make-i/o-read-error . G4aee) (make-i/o-port-error . G4ba1) (make-i/o-invalid-position-error . G4b19) (make-i/o-filename-error . G4b33) (make-i/o-file-protection-error . G4b4c) (make-i/o-file-is-read-only-error . G4b61) (make-i/o-file-does-not-exist-error . G4b8b) (make-i/o-file-already-exists-error . G4b76) (make-i/o-error . G4ad9) (i/o-write-error? . G4b05) (i/o-read-error? . G4af0) (i/o-port-error? . G4ba5) (i/o-invalid-position-error? . G4b1d) (i/o-filename-error? . G4b37) (i/o-file-protection-error? . G4b4e) (i/o-file-is-read-only-error? . G4b63) (i/o-file-does-not-exist-error? . G4b8d) (i/o-file-already-exists-error? . G4b78) (i/o-error? . G4adb) (i/o-error-position . G4b1f) (i/o-error-port . G4ba7) (i/o-error-filename . G4b39) (&i/o-port . G4e2e) (&i/o-file-does-not-exist . G4e2d) (&i/o-file-already-exists . G4e2c) (&i/o-file-is-read-only . G4e2b) (&i/o-file-protection . G4e2a) (&i/o-filename . G4e29) (&i/o-invalid-position . G4e28) (&i/o-write . G4e27) (&i/o-read . G4e26) (&i/o . G4e25)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50ba '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fc8) (utf32->string . G4f7d) (utf16->string . G4f7c) (utf8->string . G4f7b) (uint-list->bytevector . G4f7a) (u8-list->bytevector . G4f79) (string->utf8 . G4f78) (string->utf32 . G4f77) (string->utf16 . G4f76) (sint-list->bytevector . G4f75) (native-endianness . G4f74) (bytevector? . G4f73) (bytevector=? . G4f72) (bytevector-uint-set! . G4f71) (bytevector-uint-ref . G4f70) (bytevector-u8-set! . G4f6f) (bytevector-u8-ref . G4f6e) (bytevector-u64-set! . G4f6d) (bytevector-u64-ref . G4f6c) (bytevector-u64-native-set! . G4f6b) (bytevector-u64-native-ref . G4f6a) (bytevector-u32-set! . G4f69) (bytevector-u32-ref . G4f68) (bytevector-u32-native-set! . G4f67) (bytevector-u32-native-ref . G4f66) (bytevector-u16-set! . G4f65) (bytevector-u16-ref . G4f64) (bytevector-u16-native-set! . G4f63) (bytevector-u16-native-ref . G4f62) (bytevector-sint-set! . G4f61) (bytevector-sint-ref . G4f60) (bytevector-s8-set! . G4f5f) (bytevector-s8-ref . G4f5e) (bytevector-s64-set! . G4f5d) (bytevector-s64-ref . G4f5c) (bytevector-s64-native-set! . G4f5b) (bytevector-s64-native-ref . G4f5a) (bytevector-s32-set! . G4f59) (bytevector-s32-ref . G4f58) (bytevector-s32-native-set! . G4f57) (bytevector-s32-native-ref . G4f56) (bytevector-s16-set! . G4f55) (bytevector-s16-ref . G4f54) (bytevector-s16-native-set! . G4f53) (bytevector-s16-native-ref . G4f52) (bytevector-length . G4f51) (bytevector-ieee-single-ref . G4f50) (bytevector-ieee-single-set! . G4f4f) (bytevector-ieee-single-native-set! . G4f4e) (bytevector-ieee-single-native-ref . G4f4d) (bytevector-ieee-double-set! . G4f4c) (bytevector-ieee-double-ref . G4f4b) (bytevector-ieee-double-native-set! . G4f4a) (bytevector-ieee-double-native-ref . G4f49) (bytevector-fill! . G4f48) (bytevector-copy! . G4f47) (bytevector-copy . G4f46) (bytevector->uint-list . G4f45) (bytevector->u8-list . G4f44) (bytevector->sint-list . G4f43) (endianness . G4dfa)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50bb '(rnrs unicode) '(6) '() '() '() '((string-upcase . G504f) (string-titlecase . G504e) (string-normalize-nfkd . G504d) (string-normalize-nfkc . G504c) (string-normalize-nfd . G504b) (string-normalize-nfc . G504a) (string-foldcase . G5049) (string-downcase . G5048) (string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-title-case? . G5040) (char-numeric? . G503f) (char-lower-case? . G503e) (char-general-category . G503d) (char-upcase . G503c) (char-titlecase . G503b) (char-foldcase . G503a) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50bc '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f92) (raise-continuable . G4f91) (raise . G4f90) (guard . G4e06) (else . G4dfe) (=> . G4dfd)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50bd '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ee7) (bitwise-reverse-bit-field . G4ee6) (bitwise-length . G4ee5) (bitwise-if . G4ee4) (bitwise-first-bit-set . G4ee3) (bitwise-copy-bit-field . G4ee2) (bitwise-copy-bit . G4ee1) (bitwise-bit-set? . G4ee0) (bitwise-bit-field . G4edf) (bitwise-bit-count . G4ede) (bitwise-xor . G4edd) (bitwise-ior . G4edc) (bitwise-and . G4edb) (bitwise-not . G4eda) (bitwise-arithmetic-shift-right . G4ed9) (bitwise-arithmetic-shift-left . G4ed8) (bitwise-arithmetic-shift . G4ed7)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50be '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f14) (fxxor . G4f13) (fxrotate-bit-field . G4f12) (fxreverse-bit-field . G4f11) (fxpositive? . G4f10) (fxodd? . G4f0f) (fxnot . G4f0e) (fxnegative? . G4f0d) (fxmod0 . G4f0c) (fxmod . G4f0b) (fxmin . G4f0a) (fxmax . G4f09) (fxlength . G4f08) (fxior . G4f07) (fxif . G4f06) (fxfirst-bit-set . G4f05) (fxeven? . G4f04) (fxdiv0-and-mod0 . G4f03) (fxdiv0 . G4f02) (fxdiv-and-mod . G4f01) (fxdiv . G4f00) (fxcopy-bit-field . G4eff) (fxcopy-bit . G4efe) (fxbit-set? . G4efd) (fxbit-field . G4efc) (fxbit-count . G4efb) (fxarithmetic-shift-right . G4efa) (fxarithmetic-shift-left . G4ef9) (fxarithmetic-shift . G4ef8) (fxand . G4ef7) (fx>? . G4ef6) (fx>=? . G4ef5) (fx=? . G4ef4) (fx<? . G4ef3) (fx<=? . G4ef2) (fx-/carry . G4ef1) (fx- . G4ef0) (fx+/carry . G4eef) (fx+ . G4eee) (fx*/carry . G4eed) (fx* . G4eec) (greatest-fixnum . G4eeb) (least-fixnum . G4eea) (fixnum-width . G4ee9) (fixnum? . G4ee8)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50bf '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c00) (no-infinities-violation? . G4beb) (make-no-nans-violation . G4bfe) (make-no-infinities-violation . G4be9) (real->flonum . G4f42) (flzero? . G4f41) (fltruncate . G4f40) (fltan . G4f3f) (flsqrt . G4f3e) (flsin . G4f3d) (flround . G4f3c) (flpositive? . G4f3b) (flonum? . G4f3a) (flodd? . G4f39) (flnumerator . G4f38) (flnegative? . G4f37) (flnan? . G4f36) (flmod0 . G4f35) (flmod . G4f34) (flmin . G4f33) (flmax . G4f32) (fllog . G4f31) (flinteger? . G4f30) (flinfinite? . G4f2f) (flfloor . G4f2e) (flfinite? . G4f2d) (flexpt . G4f2c) (flexp . G4f2b) (fleven? . G4f2a) (fldiv0-and-mod0 . G4f29) (fldiv0 . G4f28) (fldiv-and-mod . G4f27) (fldiv . G4f26) (fldenominator . G4f25) (flcos . G4f24) (flceiling . G4f23) (flatan . G4f22) (flasin . G4f21) (flacos . G4f20) (flabs . G4f1f) (fl>? . G4f1e) (fl>=? . G4f1d) (fl=? . G4f1c) (fl<? . G4f1b) (fl<=? . G4f1a) (fl/ . G4f19) (fl- . G4f18) (fl+ . G4f17) (fl* . G4f16) (fixnum->flonum . G4f15) (&no-nans . G4e32) (&no-infinities . G4e31)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50c0 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G501c) (string-ci-hash . G501b) (string-hash . G501a) (equal-hash . G5019) (hashtable-equivalence-function . G5018) (make-hashtable . G5017) (hashtable-hash-function . G5016) (make-eqv-hashtable . G5015) (make-eq-hashtable . G5014) (hashtable? . G5013) (hashtable-update! . G5012) (hashtable-size . G5011) (hashtable-set! . G5010) (hashtable-ref . G500f) (hashtable-mutable? . G500e) (hashtable-keys . G500d) (hashtable-entries . G500c) (hashtable-delete! . G500b) (hashtable-copy . G500a) (hashtable-contains? . G5009) (hashtable-clear! . G5008)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50c1 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (utf-8-codec . G4ff1) (utf-16-codec . G4ff0) (transcoder-error-handling-mode . G4fef) (transcoder-eol-style . G4fee) (transcoder-codec . G4fed) (transcoded-port . G4fec) (textual-port? . G4feb) (string->bytevector . G4fea) (standard-output-port . G4fe9) (standard-input-port . G4fe8) (standard-error-port . G4fe7) (set-port-position! . G4fe6) (put-u8 . G4fe5) (put-string . G4fe4) (put-datum . G4fe3) (put-char . G4fe2) (put-bytevector . G4fe1) (port? . G4fe0) (port-transcoder . G4fdf) (port-position . G4fde) (port-has-set-port-position!? . G4fdd) (port-has-port-position? . G4fdc) (port-eof? . G4fdb) (output-port-buffer-mode . G4fda) (open-string-output-port . G4fd9) (open-string-input-port . G4fd8) (open-file-output-port . G4fd7) (open-file-input/output-port . G4fd6) (open-file-input-port . G4fd5) (open-bytevector-output-port . G4fd4) (open-bytevector-input-port . G4fd3) (native-transcoder . G4fd2) (native-eol-style . G4fd1) (make-transcoder . G4fd0) (latin-1-codec . G4fcf) (make-i/o-write-error . G4b03) (make-i/o-read-error . G4aee) (make-i/o-port-error . G4ba1) (make-i/o-invalid-position-error . G4b19) (make-i/o-filename-error . G4b33) (make-i/o-file-protection-error . G4b4c) (make-i/o-file-is-read-only-error . G4b61) (make-i/o-file-does-not-exist-error . G4b8b) (make-i/o-file-already-exists-error . G4b76) (make-i/o-error . G4ad9) (make-i/o-encoding-error . G4bd0) (make-i/o-decoding-error . G4bba) (make-custom-textual-output-port . G4fce) (make-custom-textual-input/output-port . G4fcd) (make-custom-textual-input-port . G4fcc) (make-custom-binary-output-port . G4fcb) (make-custom-binary-input/output-port . G4fca) (make-custom-binary-input-port . G4fc9) (lookahead-u8 . G4fc7) (lookahead-char . G4fc6) (i/o-write-error? . G4b05) (i/o-read-error? . G4af0) (i/o-port-error? . G4ba5) (i/o-invalid-position-error? . G4b1d) (i/o-filename-error? . G4b37) (i/o-file-protection-error? . G4b4e) (i/o-file-is-read-only-error? . G4b63) (i/o-file-does-not-exist-error? . G4b8d) (i/o-file-already-exists-error? . G4b78) (i/o-error? . G4adb) (i/o-error-position . G4b1f) (i/o-error-port . G4ba7) (i/o-error-filename . G4b39) (i/o-encoding-error? . G4bd4) (i/o-encoding-error-char . G4bd6) (i/o-decoding-error? . G4bbc) (get-u8 . G4fc5) (get-string-n! . G4fc4) (get-string-n . G4fc3) (get-string-all . G4fc2) (get-line . G4fc1) (get-datum . G4fc0) (get-char . G4fbf) (get-bytevector-some . G4fbe) (get-bytevector-n! . G4fbd) (get-bytevector-n . G4fbc) (get-bytevector-all . G4fbb) (flush-output-port . G4fba) (close-port . G4fb9) (call-with-string-output-port . G4f98) (call-with-port . G4f97) (call-with-bytevector-output-port . G4f96) (bytevector->string . G4f95) (buffer-mode? . G4f94) (binary-port? . G4f93) (&i/o-encoding . G4e30) (&i/o-decoding . G4e2f) (&i/o-port . G4e2e) (&i/o-file-does-not-exist . G4e2d) (&i/o-file-already-exists . G4e2c) (&i/o-file-is-read-only . G4e2b) (&i/o-file-protection . G4e2a) (&i/o-filename . G4e29) (&i/o-invalid-position . G4e28) (&i/o-write . G4e27) (&i/o-read . G4e26) (&i/o . G4e25) (error-handling-mode . G4e0a) (file-options . G4e09) (buffer-mode . G4e08) (eol-style . G4e07)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50c2 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f8f) (enum-set=? . G4f8e) (enum-set-universe . G4f8d) (enum-set-union . G4f8c) (enum-set-subset? . G4f8b) (enum-set-projection . G4f8a) (enum-set-member? . G4f89) (enum-set-intersection . G4f88) (enum-set-indexer . G4f87) (enum-set-difference . G4f86) (enum-set-constructor . G4f85) (enum-set-complement . G4f84) (enum-set->list . G4f83) (define-enumeration . G4e15)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50c3 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a51) (warning? . G49cb) (violation? . G4a0a) (undefined-violation? . G4ac6) (syntax-violation? . G4aad) (syntax-violation-subform . G4ab1) (syntax-violation-form . G4aaf) (syntax-violation . G3042) (simple-conditions . G4f82) (serious-condition? . G49e0) (non-continuable-violation? . G4a68) (message-condition? . G49b4) (make-who-condition . G4a4d) (make-warning . G49c9) (make-violation . G4a08) (make-undefined-violation . G4ac4) (make-syntax-violation . G4aa7) (make-serious-condition . G49de) (make-non-continuable-violation . G4a66) (make-message-condition . G49b0) (make-lexical-violation . G4a90) (make-irritants-condition . G4a33) (make-implementation-restriction-violation . G4a7b) (make-error . G49f3) (make-assertion-violation . G4a1d) (lexical-violation? . G4a92) (irritants-condition? . G4a37) (implementation-restriction-violation? . G4a7d) (error? . G49f5) (condition-who . G4a53) (condition-predicate . G4f81) (condition-message . G49b6) (condition-irritants . G4a39) (condition-accessor . G4f80) (condition . G4f7f) (assertion-violation? . G4a1f) (condition? . G4f7e) (&undefined . G4e24) (&syntax . G4e23) (&lexical . G4e22) (&implementation-restriction . G4e21) (&non-continuable . G4e20) (&who . G4e1f) (&irritants . G4e1e) (&assertion . G4e1d) (&violation . G4e1c) (&error . G4e1b) (&serious . G4e1a) (&warning . G4e19) (&message . G4e18) (&condition . G4e17) (define-condition-type . G4e16)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50c4 '(rnrs records inspection) '(6) '() '() '() '((record? . G502b) (record-type-uid . G502a) (record-type-sealed? . G5029) (record-type-parent . G5028) (record-type-opaque? . G5027) (record-type-name . G5026) (record-type-generative? . G5025) (record-type-field-names . G5024) (record-rtd . G5023) (record-field-mutable? . G5022)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50c5 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5032) (record-predicate . G5031) (record-mutator . G5030) (record-constructor . G502f) (record-accessor . G502e) (make-record-type-descriptor . G502d) (make-record-constructor-descriptor . G502c)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50c6 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e14) (parent-rtd . G4e13) (nongenerative . G4e12) (opaque . G4e11) (sealed . G4e10) (protocol . G4e0f) (parent . G4e0e) (immutable . G4e0d) (mutable . G4e0c) (fields . G4e0b) (record-constructor-descriptor . G4dea) (record-type-descriptor . G4de9)) '() values values '#f '#f '#t '#f) (G2b6e@G2a13@install-library 'G50c7 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c04) (&no-nans-rtd . G4c02) (&no-infinities-rcd . G4bef) (&no-infinities-rtd . G4bed) (&i/o-encoding-rcd . G4bda) (&i/o-encoding-rtd . G4bd8) (&i/o-decoding-rcd . G4bc0) (&i/o-decoding-rtd . G4bbe) (&i/o-port-rcd . G4bab) (&i/o-port-rtd . G4ba9) (&i/o-file-does-not-exist-rcd . G4b91) (&i/o-file-does-not-exist-rtd . G4b8f) (&i/o-file-already-exists-rcd . G4b7c) (&i/o-file-already-exists-rtd . G4b7a) (&i/o-file-is-read-only-rcd . G4b67) (&i/o-file-is-read-only-rtd . G4b65) (&i/o-file-protection-rcd . G4b52) (&i/o-file-protection-rtd . G4b50) (&i/o-filename-rcd . G4b3d) (&i/o-filename-rtd . G4b3b) (&i/o-invalid-position-rcd . G4b23) (&i/o-invalid-position-rtd . G4b21) (&i/o-write-rcd . G4b09) (&i/o-write-rtd . G4b07) (&i/o-read-rcd . G4af4) (&i/o-read-rtd . G4af2) (&i/o-rcd . G4adf) (&i/o-rtd . G4add) (&undefined-rcd . G4aca) (&undefined-rtd . G4ac8) (&syntax-rcd . G4ab5) (&syntax-rtd . G4ab3) (&lexical-rcd . G4a96) (&lexical-rtd . G4a94) (&implementation-restriction-rcd . G4a81) (&implementation-restriction-rtd . G4a7f) (&non-continuable-rcd . G4a6c) (&non-continuable-rtd . G4a6a) (&who-rcd . G4a57) (&who-rtd . G4a55) (&irritants-rcd . G4a3d) (&irritants-rtd . G4a3b) (&assertion-rcd . G4a23) (&assertion-rtd . G4a21) (&violation-rcd . G4a0e) (&violation-rtd . G4a0c) (&error-rcd . G49f9) (&error-rtd . G49f7) (&serious-rcd . G49e4) (&serious-rtd . G49e2) (&warning-rcd . G49cf) (&warning-rtd . G49cd) (&message-rcd . G49ba) (&message-rtd . G49b8) (&condition-rcd . G495d) (&condition-rtd . G495b) (syntax-error . G303e) (syntax-dispatch . G2f57) (pretty-print . G50a7) (eval-core . G50a6) (set-symbol-value! . G50a5) (symbol-value . G50a4) (gensym . G50a3) (void . G50a2) (load . G4d0b) (interaction-environment . G304e) (char-ready? . G50a1) (regexp? . G50a0) (read-line . G509f) (dotted-list? . G509e) (circular-list? . G509d) (proper-list? . G509c) (circular-list . G509b) (last . G509a) (last-pair . G5099) (not-pair? . G5098) (split-at! . G5097) (split-at . G5096) (list= . G5095) (list-copy . G5094) (list-tabulate . G5093) (make-list . G5092) (xcons . G5091) (tenth . G5090) (ninth . G508f) (eighth . G508e) (seventh . G508d) (sixth . G508c) (fifth . G508b) (drop-right! . G508a) (drop-right . G5089) (take-right . G5088) (take! . G5087) (drop . G5086) (take . G5085) (car+cdr . G5084) (third . G5083) (second . G5082) (first . G5081) (iota . G5080) (every . G507f) (ungensym . G507e) (assoc-ref . G507d) (alist-cons . G507c) (append-map . G507b) (print . G507a) (format . G5079) (standard-library-path . G5078) (file-newer? . G5077) (stat-mtime . G5076) (write-to-file . G5075) (file->list . G5074) (file->string . G5073) (digit->integer . G5072) (call-with-string-input-port . G5071) (call-with-string-io . G5070) (string-split . G506f) (bytevector-for-each . G506e) (string->regexp . G506d) (rxmatch . G506c) (regexp-replace-all . G506b) (hashtable-for-each . G506a) (call-process . G5069) (local-tz-offset . G5068) (microseconds . G5067) (readdir . G5066) (set-current-directory! . G5065) (expand-path . G5064) (current-directory . G5063) (%spawn . G5062) (%waitpid . G5061) (%fork . G5060) (%pipe . G505f) (get-environment-variables . G505e) (get-environment-variable . G505d) (get-timeofday . G505c) (get-command-line . G505b) (sys-display . G505a) (source-info . G5059) (make-compiler-instruction . G5058) (make-instruction . G5057) (set-source-info! . G5056) (bignum? . G5055) (make-complex . G5054) (fast-equal? . G5053) (fasl-read . G5052) (fasl-write . G5051) (receive . G5050) (make-parameter . G282a) (string-upcase . G504f) (string-titlecase . G504e) (string-normalize-nfkd . G504d) (string-normalize-nfkc . G504c) (string-normalize-nfd . G504b) (string-normalize-nfc . G504a) (string-foldcase . G5049) (string-downcase . G5048) (string-ci>? . G5047) (string-ci>=? . G5046) (string-ci=? . G5045) (string-ci<? . G5044) (string-ci<=? . G5043) (char-whitespace? . G5042) (char-upper-case? . G5041) (char-title-case? . G5040) (char-numeric? . G503f) (char-lower-case? . G503e) (char-general-category . G503d) (char-upcase . G503c) (char-titlecase . G503b) (char-foldcase . G503a) (char-downcase . G5039) (char-ci>? . G5038) (char-ci>=? . G5037) (char-ci=? . G5036) (char-ci<? . G5035) (char-ci<=? . G5034) (char-alphabetic? . G5033) (make-variable-transformer . G2d92) (identifier? . G3044) (generate-temporaries . G3030) (free-identifier=? . G3032) (syntax->datum . G3048) (datum->syntax . G3046) (bound-identifier=? . G3034) (record-type-descriptor? . G5032) (record-predicate . G5031) (record-mutator . G5030) (record-constructor . G502f) (record-accessor . G502e) (make-record-type-descriptor . G502d) (make-record-constructor-descriptor . G502c) (record? . G502b) (record-type-uid . G502a) (record-type-sealed? . G5029) (record-type-parent . G5028) (record-type-opaque? . G5027) (record-type-name . G5026) (record-type-generative? . G5025) (record-type-field-names . G5024) (record-rtd . G5023) (record-field-mutable? . G5022) (delete-file . G5021) (file-exists? . G5020) (vector-sort! . G501f) (vector-sort . G501e) (list-sort . G501d) (symbol-hash . G501c) (string-ci-hash . G501b) (string-hash . G501a) (equal-hash . G5019) (hashtable-equivalence-function . G5018) (make-hashtable . G5017) (hashtable-hash-function . G5016) (make-eqv-hashtable . G5015) (make-eq-hashtable . G5014) (hashtable? . G5013) (hashtable-update! . G5012) (hashtable-size . G5011) (hashtable-set! . G5010) (hashtable-ref . G500f) (hashtable-mutable? . G500e) (hashtable-keys . G500d) (hashtable-entries . G500c) (hashtable-delete! . G500b) (hashtable-copy . G500a) (hashtable-contains? . G5009) (hashtable-clear! . G5008) (call-with-output-file . G5007) (call-with-input-file . G5006) (write-char . G5005) (write . G5004) (with-output-to-file . G5003) (with-input-from-file . G5002) (read-char . G5001) (read . G5000) (peek-char . G4fff) (open-output-file . G4ffe) (open-input-file . G4ffd) (newline . G4ffc) (display . G4ffb) (close-output-port . G4ffa) (close-input-port . G4ff9) (eof-object? . G4ff8) (eof-object . G4ff7) (current-error-port . G4ff6) (current-output-port . G4ff5) (current-input-port . G4ff4) (output-port? . G4ff3) (input-port? . G4ff2) (utf-8-codec . G4ff1) (utf-16-codec . G4ff0) (transcoder-error-handling-mode . G4fef) (transcoder-eol-style . G4fee) (transcoder-codec . G4fed) (transcoded-port . G4fec) (textual-port? . G4feb) (string->bytevector . G4fea) (standard-output-port . G4fe9) (standard-input-port . G4fe8) (standard-error-port . G4fe7) (set-port-position! . G4fe6) (put-u8 . G4fe5) (put-string . G4fe4) (put-datum . G4fe3) (put-char . G4fe2) (put-bytevector . G4fe1) (port? . G4fe0) (port-transcoder . G4fdf) (port-position . G4fde) (port-has-set-port-position!? . G4fdd) (port-has-port-position? . G4fdc) (port-eof? . G4fdb) (output-port-buffer-mode . G4fda) (open-string-output-port . G4fd9) (open-string-input-port . G4fd8) (open-file-output-port . G4fd7) (open-file-input/output-port . G4fd6) (open-file-input-port . G4fd5) (open-bytevector-output-port . G4fd4) (open-bytevector-input-port . G4fd3) (native-transcoder . G4fd2) (native-eol-style . G4fd1) (make-transcoder . G4fd0) (latin-1-codec . G4fcf) (make-i/o-write-error . G4b03) (make-i/o-read-error . G4aee) (make-i/o-port-error . G4ba1) (make-i/o-invalid-position-error . G4b19) (make-i/o-filename-error . G4b33) (make-i/o-file-protection-error . G4b4c) (make-i/o-file-is-read-only-error . G4b61) (make-i/o-file-does-not-exist-error . G4b8b) (make-i/o-file-already-exists-error . G4b76) (make-i/o-error . G4ad9) (make-i/o-encoding-error . G4bd0) (make-i/o-decoding-error . G4bba) (make-custom-textual-output-port . G4fce) (make-custom-textual-input/output-port . G4fcd) (make-custom-textual-input-port . G4fcc) (make-custom-binary-output-port . G4fcb) (make-custom-binary-input/output-port . G4fca) (make-custom-binary-input-port . G4fc9) (make-bytevector . G4fc8) (lookahead-u8 . G4fc7) (lookahead-char . G4fc6) (i/o-write-error? . G4b05) (i/o-read-error? . G4af0) (i/o-port-error? . G4ba5) (i/o-invalid-position-error? . G4b1d) (i/o-filename-error? . G4b37) (i/o-file-protection-error? . G4b4e) (i/o-file-is-read-only-error? . G4b63) (i/o-file-does-not-exist-error? . G4b8d) (i/o-file-already-exists-error? . G4b78) (i/o-error? . G4adb) (i/o-error-position . G4b1f) (i/o-error-port . G4ba7) (i/o-error-filename . G4b39) (i/o-encoding-error? . G4bd4) (i/o-encoding-error-char . G4bd6) (i/o-decoding-error? . G4bbc) (get-u8 . G4fc5) (get-string-n! . G4fc4) (get-string-n . G4fc3) (get-string-all . G4fc2) (get-line . G4fc1) (get-datum . G4fc0) (get-char . G4fbf) (get-bytevector-some . G4fbe) (get-bytevector-n! . G4fbd) (get-bytevector-n . G4fbc) (get-bytevector-all . G4fbb) (flush-output-port . G4fba) (close-port . G4fb9) (scheme-report-environment . G301e) (quotient . G4fb8) (null-environment . G301c) (remainder . G4fb7) (modulo . G4fb6) (inexact->exact . G4fb5) (force . G4fb4) (exact->inexact . G4fb3) (make-promise . G4fb2) (exit . G4fb1) (command-line . G4d05) (string-fill! . G4fb0) (string-set! . G4faf) (set-cdr! . G4fae) (set-car! . G4fad) (remove . G4fac) (remv . G4fab) (remp . G4faa) (remq . G4fa9) (partition . G4fa8) (memv . G4fa7) (memq . G4fa6) (memp . G4fa5) (member . G4fa4) (exists . G4fa3) (for-all . G4fa2) (fold-right . G4fa1) (fold-left . G4fa0) (find . G4f9f) (filter . G4f9e) (cons* . G4f9d) (assv . G4f9c) (assq . G4f9b) (assp . G4f9a) (assoc . G4f99) (call-with-string-output-port . G4f98) (call-with-port . G4f97) (call-with-bytevector-output-port . G4f96) (bytevector->string . G4f95) (buffer-mode? . G4f94) (binary-port? . G4f93) (with-exception-handler . G4f92) (raise-continuable . G4f91) (raise . G4f90) (eval . G3022) (environment . G301a) (make-enumeration . G4f8f) (enum-set=? . G4f8e) (enum-set-universe . G4f8d) (enum-set-union . G4f8c) (enum-set-subset? . G4f8b) (enum-set-projection . G4f8a) (enum-set-member? . G4f89) (enum-set-intersection . G4f88) (enum-set-indexer . G4f87) (enum-set-difference . G4f86) (enum-set-constructor . G4f85) (enum-set-complement . G4f84) (enum-set->list . G4f83) (who-condition? . G4a51) (warning? . G49cb) (violation? . G4a0a) (undefined-violation? . G4ac6) (syntax-violation? . G4aad) (syntax-violation-subform . G4ab1) (syntax-violation-form . G4aaf) (syntax-violation . G3042) (simple-conditions . G4f82) (serious-condition? . G49e0) (non-continuable-violation? . G4a68) (message-condition? . G49b4) (make-who-condition . G4a4d) (make-warning . G49c9) (make-violation . G4a08) (make-undefined-violation . G4ac4) (make-syntax-violation . G4aa7) (make-serious-condition . G49de) (make-non-continuable-violation . G4a66) (make-message-condition . G49b0) (make-lexical-violation . G4a90) (make-irritants-condition . G4a33) (make-implementation-restriction-violation . G4a7b) (make-error . G49f3) (make-assertion-violation . G4a1d) (lexical-violation? . G4a92) (irritants-condition? . G4a37) (implementation-restriction-violation? . G4a7d) (error? . G49f5) (condition-who . G4a53) (condition-predicate . G4f81) (condition-message . G49b6) (condition-irritants . G4a39) (condition-accessor . G4f80) (condition . G4f7f) (assertion-violation? . G4a1f) (condition? . G4f7e) (utf32->string . G4f7d) (utf16->string . G4f7c) (utf8->string . G4f7b) (uint-list->bytevector . G4f7a) (u8-list->bytevector . G4f79) (string->utf8 . G4f78) (string->utf32 . G4f77) (string->utf16 . G4f76) (sint-list->bytevector . G4f75) (native-endianness . G4f74) (bytevector? . G4f73) (bytevector=? . G4f72) (bytevector-uint-set! . G4f71) (bytevector-uint-ref . G4f70) (bytevector-u8-set! . G4f6f) (bytevector-u8-ref . G4f6e) (bytevector-u64-set! . G4f6d) (bytevector-u64-ref . G4f6c) (bytevector-u64-native-set! . G4f6b) (bytevector-u64-native-ref . G4f6a) (bytevector-u32-set! . G4f69) (bytevector-u32-ref . G4f68) (bytevector-u32-native-set! . G4f67) (bytevector-u32-native-ref . G4f66) (bytevector-u16-set! . G4f65) (bytevector-u16-ref . G4f64) (bytevector-u16-native-set! . G4f63) (bytevector-u16-native-ref . G4f62) (bytevector-sint-set! . G4f61) (bytevector-sint-ref . G4f60) (bytevector-s8-set! . G4f5f) (bytevector-s8-ref . G4f5e) (bytevector-s64-set! . G4f5d) (bytevector-s64-ref . G4f5c) (bytevector-s64-native-set! . G4f5b) (bytevector-s64-native-ref . G4f5a) (bytevector-s32-set! . G4f59) (bytevector-s32-ref . G4f58) (bytevector-s32-native-set! . G4f57) (bytevector-s32-native-ref . G4f56) (bytevector-s16-set! . G4f55) (bytevector-s16-ref . G4f54) (bytevector-s16-native-set! . G4f53) (bytevector-s16-native-ref . G4f52) (bytevector-length . G4f51) (bytevector-ieee-single-ref . G4f50) (bytevector-ieee-single-set! . G4f4f) (bytevector-ieee-single-native-set! . G4f4e) (bytevector-ieee-single-native-ref . G4f4d) (bytevector-ieee-double-set! . G4f4c) (bytevector-ieee-double-ref . G4f4b) (bytevector-ieee-double-native-set! . G4f4a) (bytevector-ieee-double-native-ref . G4f49) (bytevector-fill! . G4f48) (bytevector-copy! . G4f47) (bytevector-copy . G4f46) (bytevector->uint-list . G4f45) (bytevector->u8-list . G4f44) (bytevector->sint-list . G4f43) (no-nans-violation? . G4c00) (no-infinities-violation? . G4beb) (make-no-nans-violation . G4bfe) (make-no-infinities-violation . G4be9) (real->flonum . G4f42) (flzero? . G4f41) (fltruncate . G4f40) (fltan . G4f3f) (flsqrt . G4f3e) (flsin . G4f3d) (flround . G4f3c) (flpositive? . G4f3b) (flonum? . G4f3a) (flodd? . G4f39) (flnumerator . G4f38) (flnegative? . G4f37) (flnan? . G4f36) (flmod0 . G4f35) (flmod . G4f34) (flmin . G4f33) (flmax . G4f32) (fllog . G4f31) (flinteger? . G4f30) (flinfinite? . G4f2f) (flfloor . G4f2e) (flfinite? . G4f2d) (flexpt . G4f2c) (flexp . G4f2b) (fleven? . G4f2a) (fldiv0-and-mod0 . G4f29) (fldiv0 . G4f28) (fldiv-and-mod . G4f27) (fldiv . G4f26) (fldenominator . G4f25) (flcos . G4f24) (flceiling . G4f23) (flatan . G4f22) (flasin . G4f21) (flacos . G4f20) (flabs . G4f1f) (fl>? . G4f1e) (fl>=? . G4f1d) (fl=? . G4f1c) (fl<? . G4f1b) (fl<=? . G4f1a) (fl/ . G4f19) (fl- . G4f18) (fl+ . G4f17) (fl* . G4f16) (fixnum->flonum . G4f15) (fxzero? . G4f14) (fxxor . G4f13) (fxrotate-bit-field . G4f12) (fxreverse-bit-field . G4f11) (fxpositive? . G4f10) (fxodd? . G4f0f) (fxnot . G4f0e) (fxnegative? . G4f0d) (fxmod0 . G4f0c) (fxmod . G4f0b) (fxmin . G4f0a) (fxmax . G4f09) (fxlength . G4f08) (fxior . G4f07) (fxif . G4f06) (fxfirst-bit-set . G4f05) (fxeven? . G4f04) (fxdiv0-and-mod0 . G4f03) (fxdiv0 . G4f02) (fxdiv-and-mod . G4f01) (fxdiv . G4f00) (fxcopy-bit-field . G4eff) (fxcopy-bit . G4efe) (fxbit-set? . G4efd) (fxbit-field . G4efc) (fxbit-count . G4efb) (fxarithmetic-shift-right . G4efa) (fxarithmetic-shift-left . G4ef9) (fxarithmetic-shift . G4ef8) (fxand . G4ef7) (fx>? . G4ef6) (fx>=? . G4ef5) (fx=? . G4ef4) (fx<? . G4ef3) (fx<=? . G4ef2) (fx-/carry . G4ef1) (fx- . G4ef0) (fx+/carry . G4eef) (fx+ . G4eee) (fx*/carry . G4eed) (fx* . G4eec) (greatest-fixnum . G4eeb) (least-fixnum . G4eea) (fixnum-width . G4ee9) (fixnum? . G4ee8) (bitwise-rotate-bit-field . G4ee7) (bitwise-reverse-bit-field . G4ee6) (bitwise-length . G4ee5) (bitwise-if . G4ee4) (bitwise-first-bit-set . G4ee3) (bitwise-copy-bit-field . G4ee2) (bitwise-copy-bit . G4ee1) (bitwise-bit-set? . G4ee0) (bitwise-bit-field . G4edf) (bitwise-bit-count . G4ede) (bitwise-xor . G4edd) (bitwise-ior . G4edc) (bitwise-and . G4edb) (bitwise-not . G4eda) (bitwise-arithmetic-shift-right . G4ed9) (bitwise-arithmetic-shift-left . G4ed8) (bitwise-arithmetic-shift . G4ed7) (zero? . G4ed6) (vector? . G4ed5) (vector-set! . G4ed4) (vector-ref . G4ed3) (vector-map . G4ed2) (vector-length . G4ed1) (vector-for-each . G4ed0) (vector-fill! . G4ecf) (vector->list . G4ece) (vector . G4ecd) (values . G4ecc) (truncate . G4ecb) (tan . G4eca) (symbol? . G4ec9) (symbol=? . G4ec8) (symbol->string . G4ec7) (substring . G4ec6) (string? . G4ec5) (string>? . G4ec4) (string>=? . G4ec3) (string=? . G4ec2) (string<? . G4ec1) (string<=? . G4ec0) (string-ref . G4ebf) (string-length . G4ebe) (string-for-each . G4ebd) (string-copy . G4ebc) (string-append . G4ebb) (string->symbol . G4eba) (string->number . G4eb9) (string->list . G4eb8) (string . G4eb7) (sqrt . G4eb6) (sin . G4eb5) (round . G4eb4) (reverse . G4eb3) (real? . G4eb2) (real-valued? . G4eb1) (real-part . G4eb0) (rationalize . G4eaf) (rational? . G4eae) (rational-valued? . G4ead) (procedure? . G4eac) (positive? . G4eab) (pair? . G4eaa) (odd? . G4ea9) (numerator . G4ea8) (number? . G4ea7) (number->string . G4ea6) (null? . G4ea5) (not . G4ea4) (negative? . G4ea3) (nan? . G4ea2) (min . G4ea1) (max . G4ea0) (map . G4e9f) (make-vector . G4e9e) (make-string . G4e9d) (make-rectangular . G4e9c) (make-polar . G4e9b) (magnitude . G4e9a) (log . G4e99) (list? . G4e98) (list-tail . G4e97) (list-ref . G4e96) (list->vector . G4e95) (list->string . G4e94) (list . G4e93) (length . G4e92) (lcm . G4e91) (integer? . G4e90) (integer-valued? . G4e8f) (integer->char . G4e8e) (infinite? . G4e8d) (inexact? . G4e8c) (inexact . G4e8b) (imag-part . G4e8a) (gcd . G4e89) (for-each . G4e88) (floor . G4e87) (finite? . G4e86) (expt . G4e85) (exp . G4e84) (exact? . G4e83) (exact-integer-sqrt . G4e82) (exact . G4e81) (even? . G4e80) (error . G4e7f) (eqv? . G4e7e) (equal? . G4e7d) (eq? . G4e7c) (dynamic-wind . G4e7b) (div0-and-mod0 . G4e7a) (mod0 . G4e79) (div0 . G4e78) (div-and-mod . G4e77) (mod . G4e76) (div . G4e75) (denominator . G4e74) (cos . G4e73) (cons . G4e72) (complex? . G4e71) (char? . G4e70) (char>? . G4e6f) (char>=? . G4e6e) (char=? . G4e6d) (char<? . G4e6c) (char<=? . G4e6b) (char->integer . G4e6a) (ceiling . G4e69) (call-with-values . G4e68) (call/cc . G4e67) (call-with-current-continuation . G4e66) (cddddr . G4e65) (cdddar . G4e64) (cddadr . G4e63) (cddaar . G4e62) (cdaddr . G4e61) (cdadar . G4e60) (cdaadr . G4e5f) (cdaaar . G4e5e) (cadddr . G4e5d) (caddar . G4e5c) (cadadr . G4e5b) (cadaar . G4e5a) (caaddr . G4e59) (caadar . G4e58) (caaadr . G4e57) (caaaar . G4e56) (cdddr . G4e55) (cddar . G4e54) (cdadr . G4e53) (cdaar . G4e52) (caddr . G4e51) (cadar . G4e50) (caadr . G4e4f) (caaar . G4e4e) (cddr . G4e4d) (cdar . G4e4c) (cadr . G4e4b) (caar . G4e4a) (cdr . G4e49) (car . G4e48) (boolean? . G4e47) (boolean=? . G4e46) (atan . G4e45) (assertion-violation . G4e44) (asin . G4e43) (apply . G4e42) (append . G4e41) (angle . G4e40) (acos . G4e3f) (abs . G4e3e) (/ . G4e3d) (* . G4e3c) (- . G4e3b) (+ . G4e3a) (>= . G4e39) (> . G4e38) (= . G4e37) (<= . G4e36) (< . G4e35) (library . G4e34) (export . G4e33) (&no-nans . G4e32) (&no-infinities . G4e31) (&i/o-encoding . G4e30) (&i/o-decoding . G4e2f) (&i/o-port . G4e2e) (&i/o-file-does-not-exist . G4e2d) (&i/o-file-already-exists . G4e2c) (&i/o-file-is-read-only . G4e2b) (&i/o-file-protection . G4e2a) (&i/o-filename . G4e29) (&i/o-invalid-position . G4e28) (&i/o-write . G4e27) (&i/o-read . G4e26) (&i/o . G4e25) (&undefined . G4e24) (&syntax . G4e23) (&lexical . G4e22) (&implementation-restriction . G4e21) (&non-continuable . G4e20) (&who . G4e1f) (&irritants . G4e1e) (&assertion . G4e1d) (&violation . G4e1c) (&error . G4e1b) (&serious . G4e1a) (&warning . G4e19) (&message . G4e18) (&condition . G4e17) (define-condition-type . G4e16) (define-enumeration . G4e15) (define-record-type . G4e14) (parent-rtd . G4e13) (nongenerative . G4e12) (opaque . G4e11) (sealed . G4e10) (protocol . G4e0f) (parent . G4e0e) (immutable . G4e0d) (mutable . G4e0c) (fields . G4e0b) (error-handling-mode . G4e0a) (file-options . G4e09) (buffer-mode . G4e08) (eol-style . G4e07) (guard . G4e06) (trace-define . G4e05) (trace-lambda . G4e04) (unsyntax-splicing . G4e03) (unsyntax . G4e02) (unquote-splicing . G4e01) (unquote . G4e00) (_ . G4dff) (else . G4dfe) (=> . G4dfd) (... . G4dfc) (assert . G4dfb) (endianness . G4dfa) (delay . G4df9) (time . G4df8) (do . G4df7) (cond . G4df6) (let* . G4df5) (let . G4df4) (let*-values . G4df3) (let-values . G4df2) (identifier-syntax . G4df1) (with-syntax . G4df0) (quasisyntax . G4def) (quasiquote . G4dee) (syntax-rules . G4ded) (include . G4dec) (define-struct . G4deb) (record-constructor-descriptor . G4dea) (record-type-descriptor . G4de9) (case . G4de8) (parameterize . G4de7) (unless . G4de6) (when . G4de5) (or . G4de4) (and . G4de3) (if . G4de2) (letrec* . G4de1) (letrec . G4de0) (type-descriptor . G4ddf) (case-lambda . G4dde) (lambda . G4ddd) (syntax . G4ddc) (syntax-case . G4ddb) (quote . G4dda) (foreign-call . G4dd9) (letrec-syntax . G4dd8) (let-syntax . G4dd7) (set! . G4dd6) (import . G4dd5) (begin . G4dd4) (module . G4dd3) (define-syntax . G4dd2) (define . G4dd1)) '((G4c04 core-prim . &no-nans-rcd) (G4c02 core-prim . &no-nans-rtd) (G4bef core-prim . &no-infinities-rcd) (G4bed core-prim . &no-infinities-rtd) (G4bda core-prim . &i/o-encoding-rcd) (G4bd8 core-prim . &i/o-encoding-rtd) (G4bc0 core-prim . &i/o-decoding-rcd) (G4bbe core-prim . &i/o-decoding-rtd) (G4bab core-prim . &i/o-port-rcd) (G4ba9 core-prim . &i/o-port-rtd) (G4b91 core-prim . &i/o-file-does-not-exist-rcd) (G4b8f core-prim . &i/o-file-does-not-exist-rtd) (G4b7c core-prim . &i/o-file-already-exists-rcd) (G4b7a core-prim . &i/o-file-already-exists-rtd) (G4b67 core-prim . &i/o-file-is-read-only-rcd) (G4b65 core-prim . &i/o-file-is-read-only-rtd) (G4b52 core-prim . &i/o-file-protection-rcd) (G4b50 core-prim . &i/o-file-protection-rtd) (G4b3d core-prim . &i/o-filename-rcd) (G4b3b core-prim . &i/o-filename-rtd) (G4b23 core-prim . &i/o-invalid-position-rcd) (G4b21 core-prim . &i/o-invalid-position-rtd) (G4b09 core-prim . &i/o-write-rcd) (G4b07 core-prim . &i/o-write-rtd) (G4af4 core-prim . &i/o-read-rcd) (G4af2 core-prim . &i/o-read-rtd) (G4adf core-prim . &i/o-rcd) (G4add core-prim . &i/o-rtd) (G4aca core-prim . &undefined-rcd) (G4ac8 core-prim . &undefined-rtd) (G4ab5 core-prim . &syntax-rcd) (G4ab3 core-prim . &syntax-rtd) (G4a96 core-prim . &lexical-rcd) (G4a94 core-prim . &lexical-rtd) (G4a81 core-prim . &implementation-restriction-rcd) (G4a7f core-prim . &implementation-restriction-rtd) (G4a6c core-prim . &non-continuable-rcd) (G4a6a core-prim . &non-continuable-rtd) (G4a57 core-prim . &who-rcd) (G4a55 core-prim . &who-rtd) (G4a3d core-prim . &irritants-rcd) (G4a3b core-prim . &irritants-rtd) (G4a23 core-prim . &assertion-rcd) (G4a21 core-prim . &assertion-rtd) (G4a0e core-prim . &violation-rcd) (G4a0c core-prim . &violation-rtd) (G49f9 core-prim . &error-rcd) (G49f7 core-prim . &error-rtd) (G49e4 core-prim . &serious-rcd) (G49e2 core-prim . &serious-rtd) (G49cf core-prim . &warning-rcd) (G49cd core-prim . &warning-rtd) (G49ba core-prim . &message-rcd) (G49b8 core-prim . &message-rtd) (G495d core-prim . &condition-rcd) (G495b core-prim . &condition-rtd) (G303e core-prim . syntax-error) (G2f57 core-prim . syntax-dispatch) (G50a7 core-prim . pretty-print) (G50a6 core-prim . eval-core) (G50a5 core-prim . set-symbol-value!) (G50a4 core-prim . symbol-value) (G50a3 core-prim . gensym) (G50a2 core-prim . void) (G4d0b core-prim . load) (G304e core-prim . interaction-environment) (G50a1 core-prim . char-ready?) (G50a0 core-prim . regexp?) (G509f core-prim . read-line) (G509e core-prim . dotted-list?) (G509d core-prim . circular-list?) (G509c core-prim . proper-list?) (G509b core-prim . circular-list) (G509a core-prim . last) (G5099 core-prim . last-pair) (G5098 core-prim . not-pair?) (G5097 core-prim . split-at!) (G5096 core-prim . split-at) (G5095 core-prim . list=) (G5094 core-prim . list-copy) (G5093 core-prim . list-tabulate) (G5092 core-prim . make-list) (G5091 core-prim . xcons) (G5090 core-prim . tenth) (G508f core-prim . ninth) (G508e core-prim . eighth) (G508d core-prim . seventh) (G508c core-prim . sixth) (G508b core-prim . fifth) (G508a core-prim . drop-right!) (G5089 core-prim . drop-right) (G5088 core-prim . take-right) (G5087 core-prim . take!) (G5086 core-prim . drop) (G5085 core-prim . take) (G5084 core-prim . car+cdr) (G5083 core-prim . third) (G5082 core-prim . second) (G5081 core-prim . first) (G5080 core-prim . iota) (G507f core-prim . every) (G507e core-prim . ungensym) (G507d core-prim . assoc-ref) (G507c core-prim . alist-cons) (G507b core-prim . append-map) (G507a core-prim . print) (G5079 core-prim . format) (G5078 core-prim . standard-library-path) (G5077 core-prim . file-newer?) (G5076 core-prim . stat-mtime) (G5075 core-prim . write-to-file) (G5074 core-prim . file->list) (G5073 core-prim . file->string) (G5072 core-prim . digit->integer) (G5071 core-prim . call-with-string-input-port) (G5070 core-prim . call-with-string-io) (G506f core-prim . string-split) (G506e core-prim . bytevector-for-each) (G506d core-prim . string->regexp) (G506c core-prim . rxmatch) (G506b core-prim . regexp-replace-all) (G506a core-prim . hashtable-for-each) (G5069 core-prim . call-process) (G5068 core-prim . local-tz-offset) (G5067 core-prim . microseconds) (G5066 core-prim . readdir) (G5065 core-prim . set-current-directory!) (G5064 core-prim . expand-path) (G5063 core-prim . current-directory) (G5062 core-prim . %spawn) (G5061 core-prim . %waitpid) (G5060 core-prim . %fork) (G505f core-prim . %pipe) (G505e core-prim . get-environment-variables) (G505d core-prim . get-environment-variable) (G505c core-prim . get-timeofday) (G505b core-prim . get-command-line) (G505a core-prim . sys-display) (G5059 core-prim . source-info) (G5058 core-prim . make-compiler-instruction) (G5057 core-prim . make-instruction) (G5056 core-prim . set-source-info!) (G5055 core-prim . bignum?) (G5054 core-prim . make-complex) (G5053 core-prim . fast-equal?) (G5052 core-prim . fasl-read) (G5051 core-prim . fasl-write) (G5050 core-prim . receive) (G282a core-prim . make-parameter) (G504f core-prim . string-upcase) (G504e core-prim . string-titlecase) (G504d core-prim . string-normalize-nfkd) (G504c core-prim . string-normalize-nfkc) (G504b core-prim . string-normalize-nfd) (G504a core-prim . string-normalize-nfc) (G5049 core-prim . string-foldcase) (G5048 core-prim . string-downcase) (G5047 core-prim . string-ci>?) (G5046 core-prim . string-ci>=?) (G5045 core-prim . string-ci=?) (G5044 core-prim . string-ci<?) (G5043 core-prim . string-ci<=?) (G5042 core-prim . char-whitespace?) (G5041 core-prim . char-upper-case?) (G5040 core-prim . char-title-case?) (G503f core-prim . char-numeric?) (G503e core-prim . char-lower-case?) (G503d core-prim . char-general-category) (G503c core-prim . char-upcase) (G503b core-prim . char-titlecase) (G503a core-prim . char-foldcase) (G5039 core-prim . char-downcase) (G5038 core-prim . char-ci>?) (G5037 core-prim . char-ci>=?) (G5036 core-prim . char-ci=?) (G5035 core-prim . char-ci<?) (G5034 core-prim . char-ci<=?) (G5033 core-prim . char-alphabetic?) (G2d92 core-prim . make-variable-transformer) (G3044 core-prim . identifier?) (G3030 core-prim . generate-temporaries) (G3032 core-prim . free-identifier=?) (G3048 core-prim . syntax->datum) (G3046 core-prim . datum->syntax) (G3034 core-prim . bound-identifier=?) (G5032 core-prim . record-type-descriptor?) (G5031 core-prim . record-predicate) (G5030 core-prim . record-mutator) (G502f core-prim . record-constructor) (G502e core-prim . record-accessor) (G502d core-prim . make-record-type-descriptor) (G502c core-prim . make-record-constructor-descriptor) (G502b core-prim . record?) (G502a core-prim . record-type-uid) (G5029 core-prim . record-type-sealed?) (G5028 core-prim . record-type-parent) (G5027 core-prim . record-type-opaque?) (G5026 core-prim . record-type-name) (G5025 core-prim . record-type-generative?) (G5024 core-prim . record-type-field-names) (G5023 core-prim . record-rtd) (G5022 core-prim . record-field-mutable?) (G5021 core-prim . delete-file) (G5020 core-prim . file-exists?) (G501f core-prim . vector-sort!) (G501e core-prim . vector-sort) (G501d core-prim . list-sort) (G501c core-prim . symbol-hash) (G501b core-prim . string-ci-hash) (G501a core-prim . string-hash) (G5019 core-prim . equal-hash) (G5018 core-prim . hashtable-equivalence-function) (G5017 core-prim . make-hashtable) (G5016 core-prim . hashtable-hash-function) (G5015 core-prim . make-eqv-hashtable) (G5014 core-prim . make-eq-hashtable) (G5013 core-prim . hashtable?) (G5012 core-prim . hashtable-update!) (G5011 core-prim . hashtable-size) (G5010 core-prim . hashtable-set!) (G500f core-prim . hashtable-ref) (G500e core-prim . hashtable-mutable?) (G500d core-prim . hashtable-keys) (G500c core-prim . hashtable-entries) (G500b core-prim . hashtable-delete!) (G500a core-prim . hashtable-copy) (G5009 core-prim . hashtable-contains?) (G5008 core-prim . hashtable-clear!) (G5007 core-prim . call-with-output-file) (G5006 core-prim . call-with-input-file) (G5005 core-prim . write-char) (G5004 core-prim . write) (G5003 core-prim . with-output-to-file) (G5002 core-prim . with-input-from-file) (G5001 core-prim . read-char) (G5000 core-prim . read) (G4fff core-prim . peek-char) (G4ffe core-prim . open-output-file) (G4ffd core-prim . open-input-file) (G4ffc core-prim . newline) (G4ffb core-prim . display) (G4ffa core-prim . close-output-port) (G4ff9 core-prim . close-input-port) (G4ff8 core-prim . eof-object?) (G4ff7 core-prim . eof-object) (G4ff6 core-prim . current-error-port) (G4ff5 core-prim . current-output-port) (G4ff4 core-prim . current-input-port) (G4ff3 core-prim . output-port?) (G4ff2 core-prim . input-port?) (G4ff1 core-prim . utf-8-codec) (G4ff0 core-prim . utf-16-codec) (G4fef core-prim . transcoder-error-handling-mode) (G4fee core-prim . transcoder-eol-style) (G4fed core-prim . transcoder-codec) (G4fec core-prim . transcoded-port) (G4feb core-prim . textual-port?) (G4fea core-prim . string->bytevector) (G4fe9 core-prim . standard-output-port) (G4fe8 core-prim . standard-input-port) (G4fe7 core-prim . standard-error-port) (G4fe6 core-prim . set-port-position!) (G4fe5 core-prim . put-u8) (G4fe4 core-prim . put-string) (G4fe3 core-prim . put-datum) (G4fe2 core-prim . put-char) (G4fe1 core-prim . put-bytevector) (G4fe0 core-prim . port?) (G4fdf core-prim . port-transcoder) (G4fde core-prim . port-position) (G4fdd core-prim . port-has-set-port-position!?) (G4fdc core-prim . port-has-port-position?) (G4fdb core-prim . port-eof?) (G4fda core-prim . output-port-buffer-mode) (G4fd9 core-prim . open-string-output-port) (G4fd8 core-prim . open-string-input-port) (G4fd7 core-prim . open-file-output-port) (G4fd6 core-prim . open-file-input/output-port) (G4fd5 core-prim . open-file-input-port) (G4fd4 core-prim . open-bytevector-output-port) (G4fd3 core-prim . open-bytevector-input-port) (G4fd2 core-prim . native-transcoder) (G4fd1 core-prim . native-eol-style) (G4fd0 core-prim . make-transcoder) (G4fcf core-prim . latin-1-codec) (G4b03 core-prim . make-i/o-write-error) (G4aee core-prim . make-i/o-read-error) (G4ba1 core-prim . make-i/o-port-error) (G4b19 core-prim . make-i/o-invalid-position-error) (G4b33 core-prim . make-i/o-filename-error) (G4b4c core-prim . make-i/o-file-protection-error) (G4b61 core-prim . make-i/o-file-is-read-only-error) (G4b8b core-prim . make-i/o-file-does-not-exist-error) (G4b76 core-prim . make-i/o-file-already-exists-error) (G4ad9 core-prim . make-i/o-error) (G4bd0 core-prim . make-i/o-encoding-error) (G4bba core-prim . make-i/o-decoding-error) (G4fce core-prim . make-custom-textual-output-port) (G4fcd core-prim . make-custom-textual-input/output-port) (G4fcc core-prim . make-custom-textual-input-port) (G4fcb core-prim . make-custom-binary-output-port) (G4fca core-prim . make-custom-binary-input/output-port) (G4fc9 core-prim . make-custom-binary-input-port) (G4fc8 core-prim . make-bytevector) (G4fc7 core-prim . lookahead-u8) (G4fc6 core-prim . lookahead-char) (G4b05 core-prim . i/o-write-error?) (G4af0 core-prim . i/o-read-error?) (G4ba5 core-prim . i/o-port-error?) (G4b1d core-prim . i/o-invalid-position-error?) (G4b37 core-prim . i/o-filename-error?) (G4b4e core-prim . i/o-file-protection-error?) (G4b63 core-prim . i/o-file-is-read-only-error?) (G4b8d core-prim . i/o-file-does-not-exist-error?) (G4b78 core-prim . i/o-file-already-exists-error?) (G4adb core-prim . i/o-error?) (G4b1f core-prim . i/o-error-position) (G4ba7 core-prim . i/o-error-port) (G4b39 core-prim . i/o-error-filename) (G4bd4 core-prim . i/o-encoding-error?) (G4bd6 core-prim . i/o-encoding-error-char) (G4bbc core-prim . i/o-decoding-error?) (G4fc5 core-prim . get-u8) (G4fc4 core-prim . get-string-n!) (G4fc3 core-prim . get-string-n) (G4fc2 core-prim . get-string-all) (G4fc1 core-prim . get-line) (G4fc0 core-prim . get-datum) (G4fbf core-prim . get-char) (G4fbe core-prim . get-bytevector-some) (G4fbd core-prim . get-bytevector-n!) (G4fbc core-prim . get-bytevector-n) (G4fbb core-prim . get-bytevector-all) (G4fba core-prim . flush-output-port) (G4fb9 core-prim . close-port) (G301e core-prim . scheme-report-environment) (G4fb8 core-prim . quotient) (G301c core-prim . null-environment) (G4fb7 core-prim . remainder) (G4fb6 core-prim . modulo) (G4fb5 core-prim . inexact->exact) (G4fb4 core-prim . force) (G4fb3 core-prim . exact->inexact) (G4fb2 core-prim . make-promise) (G4fb1 core-prim . exit) (G4d05 core-prim . command-line) (G4fb0 core-prim . string-fill!) (G4faf core-prim . string-set!) (G4fae core-prim . set-cdr!) (G4fad core-prim . set-car!) (G4fac core-prim . remove) (G4fab core-prim . remv) (G4faa core-prim . remp) (G4fa9 core-prim . remq) (G4fa8 core-prim . partition) (G4fa7 core-prim . memv) (G4fa6 core-prim . memq) (G4fa5 core-prim . memp) (G4fa4 core-prim . member) (G4fa3 core-prim . exists) (G4fa2 core-prim . for-all) (G4fa1 core-prim . fold-right) (G4fa0 core-prim . fold-left) (G4f9f core-prim . find) (G4f9e core-prim . filter) (G4f9d core-prim . cons*) (G4f9c core-prim . assv) (G4f9b core-prim . assq) (G4f9a core-prim . assp) (G4f99 core-prim . assoc) (G4f98 core-prim . call-with-string-output-port) (G4f97 core-prim . call-with-port) (G4f96 core-prim . call-with-bytevector-output-port) (G4f95 core-prim . bytevector->string) (G4f94 core-prim . buffer-mode?) (G4f93 core-prim . binary-port?) (G4f92 core-prim . with-exception-handler) (G4f91 core-prim . raise-continuable) (G4f90 core-prim . raise) (G3022 core-prim . eval) (G301a core-prim . environment) (G4f8f core-prim . make-enumeration) (G4f8e core-prim . enum-set=?) (G4f8d core-prim . enum-set-universe) (G4f8c core-prim . enum-set-union) (G4f8b core-prim . enum-set-subset?) (G4f8a core-prim . enum-set-projection) (G4f89 core-prim . enum-set-member?) (G4f88 core-prim . enum-set-intersection) (G4f87 core-prim . enum-set-indexer) (G4f86 core-prim . enum-set-difference) (G4f85 core-prim . enum-set-constructor) (G4f84 core-prim . enum-set-complement) (G4f83 core-prim . enum-set->list) (G4a51 core-prim . who-condition?) (G49cb core-prim . warning?) (G4a0a core-prim . violation?) (G4ac6 core-prim . undefined-violation?) (G4aad core-prim . syntax-violation?) (G4ab1 core-prim . syntax-violation-subform) (G4aaf core-prim . syntax-violation-form) (G3042 core-prim . syntax-violation) (G4f82 core-prim . simple-conditions) (G49e0 core-prim . serious-condition?) (G4a68 core-prim . non-continuable-violation?) (G49b4 core-prim . message-condition?) (G4a4d core-prim . make-who-condition) (G49c9 core-prim . make-warning) (G4a08 core-prim . make-violation) (G4ac4 core-prim . make-undefined-violation) (G4aa7 core-prim . make-syntax-violation) (G49de core-prim . make-serious-condition) (G4a66 core-prim . make-non-continuable-violation) (G49b0 core-prim . make-message-condition) (G4a90 core-prim . make-lexical-violation) (G4a33 core-prim . make-irritants-condition) (G4a7b core-prim . make-implementation-restriction-violation) (G49f3 core-prim . make-error) (G4a1d core-prim . make-assertion-violation) (G4a92 core-prim . lexical-violation?) (G4a37 core-prim . irritants-condition?) (G4a7d core-prim . implementation-restriction-violation?) (G49f5 core-prim . error?) (G4a53 core-prim . condition-who) (G4f81 core-prim . condition-predicate) (G49b6 core-prim . condition-message) (G4a39 core-prim . condition-irritants) (G4f80 core-prim . condition-accessor) (G4f7f core-prim . condition) (G4a1f core-prim . assertion-violation?) (G4f7e core-prim . condition?) (G4f7d core-prim . utf32->string) (G4f7c core-prim . utf16->string) (G4f7b core-prim . utf8->string) (G4f7a core-prim . uint-list->bytevector) (G4f79 core-prim . u8-list->bytevector) (G4f78 core-prim . string->utf8) (G4f77 core-prim . string->utf32) (G4f76 core-prim . string->utf16) (G4f75 core-prim . sint-list->bytevector) (G4f74 core-prim . native-endianness) (G4f73 core-prim . bytevector?) (G4f72 core-prim . bytevector=?) (G4f71 core-prim . bytevector-uint-set!) (G4f70 core-prim . bytevector-uint-ref) (G4f6f core-prim . bytevector-u8-set!) (G4f6e core-prim . bytevector-u8-ref) (G4f6d core-prim . bytevector-u64-set!) (G4f6c core-prim . bytevector-u64-ref) (G4f6b core-prim . bytevector-u64-native-set!) (G4f6a core-prim . bytevector-u64-native-ref) (G4f69 core-prim . bytevector-u32-set!) (G4f68 core-prim . bytevector-u32-ref) (G4f67 core-prim . bytevector-u32-native-set!) (G4f66 core-prim . bytevector-u32-native-ref) (G4f65 core-prim . bytevector-u16-set!) (G4f64 core-prim . bytevector-u16-ref) (G4f63 core-prim . bytevector-u16-native-set!) (G4f62 core-prim . bytevector-u16-native-ref) (G4f61 core-prim . bytevector-sint-set!) (G4f60 core-prim . bytevector-sint-ref) (G4f5f core-prim . bytevector-s8-set!) (G4f5e core-prim . bytevector-s8-ref) (G4f5d core-prim . bytevector-s64-set!) (G4f5c core-prim . bytevector-s64-ref) (G4f5b core-prim . bytevector-s64-native-set!) (G4f5a core-prim . bytevector-s64-native-ref) (G4f59 core-prim . bytevector-s32-set!) (G4f58 core-prim . bytevector-s32-ref) (G4f57 core-prim . bytevector-s32-native-set!) (G4f56 core-prim . bytevector-s32-native-ref) (G4f55 core-prim . bytevector-s16-set!) (G4f54 core-prim . bytevector-s16-ref) (G4f53 core-prim . bytevector-s16-native-set!) (G4f52 core-prim . bytevector-s16-native-ref) (G4f51 core-prim . bytevector-length) (G4f50 core-prim . bytevector-ieee-single-ref) (G4f4f core-prim . bytevector-ieee-single-set!) (G4f4e core-prim . bytevector-ieee-single-native-set!) (G4f4d core-prim . bytevector-ieee-single-native-ref) (G4f4c core-prim . bytevector-ieee-double-set!) (G4f4b core-prim . bytevector-ieee-double-ref) (G4f4a core-prim . bytevector-ieee-double-native-set!) (G4f49 core-prim . bytevector-ieee-double-native-ref) (G4f48 core-prim . bytevector-fill!) (G4f47 core-prim . bytevector-copy!) (G4f46 core-prim . bytevector-copy) (G4f45 core-prim . bytevector->uint-list) (G4f44 core-prim . bytevector->u8-list) (G4f43 core-prim . bytevector->sint-list) (G4c00 core-prim . no-nans-violation?) (G4beb core-prim . no-infinities-violation?) (G4bfe core-prim . make-no-nans-violation) (G4be9 core-prim . make-no-infinities-violation) (G4f42 core-prim . real->flonum) (G4f41 core-prim . flzero?) (G4f40 core-prim . fltruncate) (G4f3f core-prim . fltan) (G4f3e core-prim . flsqrt) (G4f3d core-prim . flsin) (G4f3c core-prim . flround) (G4f3b core-prim . flpositive?) (G4f3a core-prim . flonum?) (G4f39 core-prim . flodd?) (G4f38 core-prim . flnumerator) (G4f37 core-prim . flnegative?) (G4f36 core-prim . flnan?) (G4f35 core-prim . flmod0) (G4f34 core-prim . flmod) (G4f33 core-prim . flmin) (G4f32 core-prim . flmax) (G4f31 core-prim . fllog) (G4f30 core-prim . flinteger?) (G4f2f core-prim . flinfinite?) (G4f2e core-prim . flfloor) (G4f2d core-prim . flfinite?) (G4f2c core-prim . flexpt) (G4f2b core-prim . flexp) (G4f2a core-prim . fleven?) (G4f29 core-prim . fldiv0-and-mod0) (G4f28 core-prim . fldiv0) (G4f27 core-prim . fldiv-and-mod) (G4f26 core-prim . fldiv) (G4f25 core-prim . fldenominator) (G4f24 core-prim . flcos) (G4f23 core-prim . flceiling) (G4f22 core-prim . flatan) (G4f21 core-prim . flasin) (G4f20 core-prim . flacos) (G4f1f core-prim . flabs) (G4f1e core-prim . fl>?) (G4f1d core-prim . fl>=?) (G4f1c core-prim . fl=?) (G4f1b core-prim . fl<?) (G4f1a core-prim . fl<=?) (G4f19 core-prim . fl/) (G4f18 core-prim . fl-) (G4f17 core-prim . fl+) (G4f16 core-prim . fl*) (G4f15 core-prim . fixnum->flonum) (G4f14 core-prim . fxzero?) (G4f13 core-prim . fxxor) (G4f12 core-prim . fxrotate-bit-field) (G4f11 core-prim . fxreverse-bit-field) (G4f10 core-prim . fxpositive?) (G4f0f core-prim . fxodd?) (G4f0e core-prim . fxnot) (G4f0d core-prim . fxnegative?) (G4f0c core-prim . fxmod0) (G4f0b core-prim . fxmod) (G4f0a core-prim . fxmin) (G4f09 core-prim . fxmax) (G4f08 core-prim . fxlength) (G4f07 core-prim . fxior) (G4f06 core-prim . fxif) (G4f05 core-prim . fxfirst-bit-set) (G4f04 core-prim . fxeven?) (G4f03 core-prim . fxdiv0-and-mod0) (G4f02 core-prim . fxdiv0) (G4f01 core-prim . fxdiv-and-mod) (G4f00 core-prim . fxdiv) (G4eff core-prim . fxcopy-bit-field) (G4efe core-prim . fxcopy-bit) (G4efd core-prim . fxbit-set?) (G4efc core-prim . fxbit-field) (G4efb core-prim . fxbit-count) (G4efa core-prim . fxarithmetic-shift-right) (G4ef9 core-prim . fxarithmetic-shift-left) (G4ef8 core-prim . fxarithmetic-shift) (G4ef7 core-prim . fxand) (G4ef6 core-prim . fx>?) (G4ef5 core-prim . fx>=?) (G4ef4 core-prim . fx=?) (G4ef3 core-prim . fx<?) (G4ef2 core-prim . fx<=?) (G4ef1 core-prim . fx-/carry) (G4ef0 core-prim . fx-) (G4eef core-prim . fx+/carry) (G4eee core-prim . fx+) (G4eed core-prim . fx*/carry) (G4eec core-prim . fx*) (G4eeb core-prim . greatest-fixnum) (G4eea core-prim . least-fixnum) (G4ee9 core-prim . fixnum-width) (G4ee8 core-prim . fixnum?) (G4ee7 core-prim . bitwise-rotate-bit-field) (G4ee6 core-prim . bitwise-reverse-bit-field) (G4ee5 core-prim . bitwise-length) (G4ee4 core-prim . bitwise-if) (G4ee3 core-prim . bitwise-first-bit-set) (G4ee2 core-prim . bitwise-copy-bit-field) (G4ee1 core-prim . bitwise-copy-bit) (G4ee0 core-prim . bitwise-bit-set?) (G4edf core-prim . bitwise-bit-field) (G4ede core-prim . bitwise-bit-count) (G4edd core-prim . bitwise-xor) (G4edc core-prim . bitwise-ior) (G4edb core-prim . bitwise-and) (G4eda core-prim . bitwise-not) (G4ed9 core-prim . bitwise-arithmetic-shift-right) (G4ed8 core-prim . bitwise-arithmetic-shift-left) (G4ed7 core-prim . bitwise-arithmetic-shift) (G4ed6 core-prim . zero?) (G4ed5 core-prim . vector?) (G4ed4 core-prim . vector-set!) (G4ed3 core-prim . vector-ref) (G4ed2 core-prim . vector-map) (G4ed1 core-prim . vector-length) (G4ed0 core-prim . vector-for-each) (G4ecf core-prim . vector-fill!) (G4ece core-prim . vector->list) (G4ecd core-prim . vector) (G4ecc core-prim . values) (G4ecb core-prim . truncate) (G4eca core-prim . tan) (G4ec9 core-prim . symbol?) (G4ec8 core-prim . symbol=?) (G4ec7 core-prim . symbol->string) (G4ec6 core-prim . substring) (G4ec5 core-prim . string?) (G4ec4 core-prim . string>?) (G4ec3 core-prim . string>=?) (G4ec2 core-prim . string=?) (G4ec1 core-prim . string<?) (G4ec0 core-prim . string<=?) (G4ebf core-prim . string-ref) (G4ebe core-prim . string-length) (G4ebd core-prim . string-for-each) (G4ebc core-prim . string-copy) (G4ebb core-prim . string-append) (G4eba core-prim . string->symbol) (G4eb9 core-prim . string->number) (G4eb8 core-prim . string->list) (G4eb7 core-prim . string) (G4eb6 core-prim . sqrt) (G4eb5 core-prim . sin) (G4eb4 core-prim . round) (G4eb3 core-prim . reverse) (G4eb2 core-prim . real?) (G4eb1 core-prim . real-valued?) (G4eb0 core-prim . real-part) (G4eaf core-prim . rationalize) (G4eae core-prim . rational?) (G4ead core-prim . rational-valued?) (G4eac core-prim . procedure?) (G4eab core-prim . positive?) (G4eaa core-prim . pair?) (G4ea9 core-prim . odd?) (G4ea8 core-prim . numerator) (G4ea7 core-prim . number?) (G4ea6 core-prim . number->string) (G4ea5 core-prim . null?) (G4ea4 core-prim . not) (G4ea3 core-prim . negative?) (G4ea2 core-prim . nan?) (G4ea1 core-prim . min) (G4ea0 core-prim . max) (G4e9f core-prim . map) (G4e9e core-prim . make-vector) (G4e9d core-prim . make-string) (G4e9c core-prim . make-rectangular) (G4e9b core-prim . make-polar) (G4e9a core-prim . magnitude) (G4e99 core-prim . log) (G4e98 core-prim . list?) (G4e97 core-prim . list-tail) (G4e96 core-prim . list-ref) (G4e95 core-prim . list->vector) (G4e94 core-prim . list->string) (G4e93 core-prim . list) (G4e92 core-prim . length) (G4e91 core-prim . lcm) (G4e90 core-prim . integer?) (G4e8f core-prim . integer-valued?) (G4e8e core-prim . integer->char) (G4e8d core-prim . infinite?) (G4e8c core-prim . inexact?) (G4e8b core-prim . inexact) (G4e8a core-prim . imag-part) (G4e89 core-prim . gcd) (G4e88 core-prim . for-each) (G4e87 core-prim . floor) (G4e86 core-prim . finite?) (G4e85 core-prim . expt) (G4e84 core-prim . exp) (G4e83 core-prim . exact?) (G4e82 core-prim . exact-integer-sqrt) (G4e81 core-prim . exact) (G4e80 core-prim . even?) (G4e7f core-prim . error) (G4e7e core-prim . eqv?) (G4e7d core-prim . equal?) (G4e7c core-prim . eq?) (G4e7b core-prim . dynamic-wind) (G4e7a core-prim . div0-and-mod0) (G4e79 core-prim . mod0) (G4e78 core-prim . div0) (G4e77 core-prim . div-and-mod) (G4e76 core-prim . mod) (G4e75 core-prim . div) (G4e74 core-prim . denominator) (G4e73 core-prim . cos) (G4e72 core-prim . cons) (G4e71 core-prim . complex?) (G4e70 core-prim . char?) (G4e6f core-prim . char>?) (G4e6e core-prim . char>=?) (G4e6d core-prim . char=?) (G4e6c core-prim . char<?) (G4e6b core-prim . char<=?) (G4e6a core-prim . char->integer) (G4e69 core-prim . ceiling) (G4e68 core-prim . call-with-values) (G4e67 core-prim . call/cc) (G4e66 core-prim . call-with-current-continuation) (G4e65 core-prim . cddddr) (G4e64 core-prim . cdddar) (G4e63 core-prim . cddadr) (G4e62 core-prim . cddaar) (G4e61 core-prim . cdaddr) (G4e60 core-prim . cdadar) (G4e5f core-prim . cdaadr) (G4e5e core-prim . cdaaar) (G4e5d core-prim . cadddr) (G4e5c core-prim . caddar) (G4e5b core-prim . cadadr) (G4e5a core-prim . cadaar) (G4e59 core-prim . caaddr) (G4e58 core-prim . caadar) (G4e57 core-prim . caaadr) (G4e56 core-prim . caaaar) (G4e55 core-prim . cdddr) (G4e54 core-prim . cddar) (G4e53 core-prim . cdadr) (G4e52 core-prim . cdaar) (G4e51 core-prim . caddr) (G4e50 core-prim . cadar) (G4e4f core-prim . caadr) (G4e4e core-prim . caaar) (G4e4d core-prim . cddr) (G4e4c core-prim . cdar) (G4e4b core-prim . cadr) (G4e4a core-prim . caar) (G4e49 core-prim . cdr) (G4e48 core-prim . car) (G4e47 core-prim . boolean?) (G4e46 core-prim . boolean=?) (G4e45 core-prim . atan) (G4e44 core-prim . assertion-violation) (G4e43 core-prim . asin) (G4e42 core-prim . apply) (G4e41 core-prim . append) (G4e40 core-prim . angle) (G4e3f core-prim . acos) (G4e3e core-prim . abs) (G4e3d core-prim . /) (G4e3c core-prim . *) (G4e3b core-prim . -) (G4e3a core-prim . +) (G4e39 core-prim . >=) (G4e38 core-prim . >) (G4e37 core-prim . =) (G4e36 core-prim . <=) (G4e35 core-prim . <) (G4e34 core-prim . library) (G4e33 core-prim . export) (G4e32 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e31 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e30 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e2f $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e2e $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e2d $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e2c $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e2b $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e2a $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e29 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e28 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e27 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e26 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e25 $core-rtd &i/o-rtd &i/o-rcd) (G4e24 $core-rtd &undefined-rtd &undefined-rcd) (G4e23 $core-rtd &syntax-rtd &syntax-rcd) (G4e22 $core-rtd &lexical-rtd &lexical-rcd) (G4e21 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e20 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e1f $core-rtd &who-rtd &who-rcd) (G4e1e $core-rtd &irritants-rtd &irritants-rcd) (G4e1d $core-rtd &assertion-rtd &assertion-rcd) (G4e1c $core-rtd &violation-rtd &violation-rcd) (G4e1b $core-rtd &error-rtd &error-rcd) (G4e1a $core-rtd &serious-rtd &serious-rcd) (G4e19 $core-rtd &warning-rtd &warning-rcd) (G4e18 $core-rtd &message-rtd &message-rcd) (G4e17 $core-rtd &condition-rtd &condition-rcd) (G4e16 macro . define-condition-type) (G4e15 macro . define-enumeration) (G4e14 macro . define-record-type) (G4e13 macro . parent-rtd) (G4e12 macro . nongenerative) (G4e11 macro . opaque) (G4e10 macro . sealed) (G4e0f macro . protocol) (G4e0e macro . parent) (G4e0d macro . immutable) (G4e0c macro . mutable) (G4e0b macro . fields) (G4e0a macro . error-handling-mode) (G4e09 macro . file-options) (G4e08 macro . buffer-mode) (G4e07 macro . eol-style) (G4e06 macro . guard) (G4e05 macro . trace-define) (G4e04 macro . trace-lambda) (G4e03 macro . unsyntax-splicing) (G4e02 macro . unsyntax) (G4e01 macro . unquote-splicing) (G4e00 macro . unquote) (G4dff macro . _) (G4dfe macro . else) (G4dfd macro . =>) (G4dfc macro . ...) (G4dfb macro . assert) (G4dfa macro . endianness) (G4df9 macro . delay) (G4df8 macro . time) (G4df7 macro . do) (G4df6 macro . cond) (G4df5 macro . let*) (G4df4 macro . let) (G4df3 macro . let*-values) (G4df2 macro . let-values) (G4df1 macro . identifier-syntax) (G4df0 macro . with-syntax) (G4def macro . quasisyntax) (G4dee macro . quasiquote) (G4ded macro . syntax-rules) (G4dec macro . include) (G4deb macro . define-struct) (G4dea core-macro . record-constructor-descriptor) (G4de9 core-macro . record-type-descriptor) (G4de8 macro . case) (G4de7 macro . parameterize) (G4de6 macro . unless) (G4de5 macro . when) (G4de4 core-macro . or) (G4de3 core-macro . and) (G4de2 core-macro . if) (G4de1 core-macro . letrec*) (G4de0 core-macro . letrec) (G4ddf core-macro . type-descriptor) (G4dde core-macro . case-lambda) (G4ddd core-macro . lambda) (G4ddc core-macro . syntax) (G4ddb core-macro . syntax-case) (G4dda core-macro . quote) (G4dd9 core-macro . foreign-call) (G4dd8 letrec-syntax) (G4dd7 let-syntax) (G4dd6 set!) (G4dd5 import) (G4dd4 begin) (G4dd3 module) (G4dd2 define-syntax) (G4dd1 define)) values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50c8 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50a7) (eval-core . G50a6) (set-symbol-value! . G50a5) (symbol-value . G50a4) (gensym . G50a3) (void . G50a2)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50c9 '(mosh) '() '() '() '() '((set-symbol-value! . G50a5) (symbol-value . G50a4) (ungensym . G507e) (assoc-ref . G507d) (alist-cons . G507c) (print . G507a) (format . G5079) (standard-library-path . G5078) (file-newer? . G5077) (stat-mtime . G5076) (write-to-file . G5075) (file->list . G5074) (file->string . G5073) (digit->integer . G5072) (call-with-string-input-port . G5071) (call-with-string-io . G5070) (string-split . G506f) (bytevector-for-each . G506e) (string->regexp . G506d) (rxmatch . G506c) (regexp-replace-all . G506b) (hashtable-for-each . G506a) (set-current-directory! . G5065) (expand-path . G5064) (current-directory . G5063) (get-timeofday . G505c) (get-command-line . G505b) (sys-display . G505a) (source-info . G5059) (make-compiler-instruction . G5058) (make-instruction . G5057) (set-source-info! . G5056) (bignum? . G5055) (make-complex . G5054) (fast-equal? . G5053) (fasl-read . G5052) (fasl-write . G5051) (include . G4dec)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50ca '(mosh backend) '() '() '() '() '((receive . G5050)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50cb '(mosh file) '() '() '() '() '((read-line . G509f) (file-newer? . G5077) (stat-mtime . G5076) (write-to-file . G5075) (file->list . G5074) (file->string . G5073)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50cc '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G506e)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50cd '(mosh number) '() '() '() '() '((digit->integer . G5072)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50ce '(mosh string) '() '() '() '() '((print . G507a) (format . G5079) (call-with-string-input-port . G5071) (call-with-string-io . G5070) (string-split . G506f) (string->regexp . G506d)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50cf '(mosh list) '() '() '() '() '((assoc-ref . G507d)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50d0 '(mosh regexp) '() '() '() '() '((rxmatch . G506c) (regexp-replace-all . G506b)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50d1 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G506a)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50d2 '(mosh parameters) '() '() '() '() '((make-parameter . G282a) (parameterize . G4de7)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50d3 '(system) '() '() '() '() '((call-process . G5069) (local-tz-offset . G5068) (microseconds . G5067) (readdir . G5066) (set-current-directory! . G5065) (expand-path . G5064) (current-directory . G5063) (%spawn . G5062) (%waitpid . G5061) (%fork . G5060) (%pipe . G505f) (get-environment-variables . G505e) (get-environment-variable . G505d)) '() values values '#f '#f '#f '#f) (G2b6e@G2a13@install-library 'G50d4 '(srfi :1) '() '() '() '() '((dotted-list? . G509e) (circular-list? . G509d) (proper-list? . G509c) (circular-list . G509b) (last . G509a) (last-pair . G5099) (not-pair? . G5098) (split-at! . G5097) (split-at . G5096) (list= . G5095) (list-copy . G5094) (list-tabulate . G5093) (make-list . G5092) (xcons . G5091) (tenth . G5090) (ninth . G508f) (eighth . G508e) (seventh . G508d) (sixth . G508c) (fifth . G508b) (drop-right! . G508a) (drop-right . G5089) (take-right . G5088) (take! . G5087) (drop . G5086) (take . G5085) (car+cdr . G5084) (third . G5083) (second . G5082) (first . G5081) (iota . G5080) (every . G507f) (alist-cons . G507c) (append-map . G507b)) '() values values '#f '#f '#f '#f))
((lambda (G4cfa@add-library-path! G4cfc@parse-and-add-library-path G4cfe@for-each-with-index G4d00@conditioon-printer G4d02@repl G4d04@trace-printer G4d06@command-line G4d08@local-library-path G4d0a@load/args G4d0c@load G4d0e@ironscheme-build G4d10@eval-top-level G4d12@compile-system-libraries G4d14@compile G4d16@compile->closure G4d18@pre-compile-r6rs-file G4d1a@load-r6rs-top-level) (begin (set! G4cfa@add-library-path! (lambda (G4d35@path) (G2b5e@G29f3@library-path (append (G2b5e@G29f3@library-path) (list G4d35@path))))) (set! G4cfc@parse-and-add-library-path (lambda (G4d37@paths G4d38@message) ((lambda (G4d3b@t) (if G4d3b@t ((lambda (G4d3d@paths) (for-each (lambda (G4d3f@path) (if (file-exists? G4d3f@path) (G4cfa@add-library-path! (expand-path G4d3f@path)) (format (current-error-port) G4d38@message G4d3f@path))) (reverse (string-split G4d3d@paths '#\:)))) G4d3b@t) (void))) G4d37@paths))) (set! G4cfe@for-each-with-index (lambda (G4d41@proc G4d42@lst) (letrec ((G4d45@loop (lambda (G4d47@i G4d48@lst) (if (null? G4d48@lst) (if '#f '#f (void)) (begin (G4d41@proc G4d47@i (car G4d48@lst)) (G4d45@loop (+ G4d47@i '1) (cdr G4d48@lst))))))) (G4d45@loop '1 G4d42@lst)))) (set! G4d00@conditioon-printer (lambda (G4d4b@e G4d4c@port) ((lambda (G4d50@ref) (begin (set! G4d50@ref (lambda (G4d5f@rtd G4d60@i G4d61@x) ((lambda (G4d65@val) (if (symbol? G4d65@val) (ungensym G4d65@val) G4d65@val)) ((record-accessor G4d5f@rtd G4d60@i) G4d61@x)))) (begin (display '" Condition components:\n" G4d4c@port) (G4cfe@for-each-with-index (lambda (G4d51@i G4d52@x) ((lambda (G4d55@rtd) (begin (format G4d4c@port '"   ~d. ~a" G4d51@i (record-type-name G4d55@rtd)) ((lambda (G4d57@v) ((lambda (G4d59@t) (if (memv G4d59@t '(0)) (newline G4d4c@port) (if (memv G4d59@t '(1)) (begin (display '": " G4d4c@port) (write (G4d50@ref G4d55@rtd '0 G4d52@x) G4d4c@port) (newline G4d4c@port)) (begin (display '":\n" G4d4c@port) ((letrec ((G4d5b@f (lambda (G4d5d@i) (if (not (= G4d5d@i (vector-length G4d57@v))) (begin (display '"       " G4d4c@port) (display (vector-ref G4d57@v G4d5d@i) G4d4c@port) (display '": " G4d4c@port) (write (G4d50@ref G4d55@rtd G4d5d@i G4d52@x) G4d4c@port) (newline G4d4c@port) (G4d5b@f (+ G4d5d@i '1))) (void))))) G4d5b@f) '0))))) (vector-length G4d57@v))) (record-type-field-names G4d55@rtd)))) (record-rtd G4d52@x))) (simple-conditions G4d4b@e))))) '#f))) (set! G4d02@repl (lambda G4d67@x ((lambda (G4d6a@rec) (begin (set! G4d6a@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d6d@G4d6b) (lambda () (with-exception-handler (lambda (G4d6f@e) ((call/cc (lambda (G4d71@G4d6c) (G4d6d@G4d6b (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4d00@conditioon-printer G4d6f@e (current-error-port))) (G4d71@G4d6c (lambda () (raise-continuable G4d6f@e)))))))))) (lambda () ((letrec ((G4d73@loop (lambda (G4d75@line G4d76@accum) ((lambda (G4d7a@parentheses-ok? G4d7c@eval-string-print) (begin (set! G4d7a@parentheses-ok? (lambda (G4d81@text) ((letrec ((G4d83@loop (lambda (G4d85@chars G4d86@p0 G4d87@p1) (if (null? G4d85@chars) (= '0 G4d86@p0 G4d87@p1) ((lambda (G4d8b@t) (if (memv G4d8b@t '(#\()) (G4d83@loop (cdr G4d85@chars) (+ G4d86@p0 '1) G4d87@p1) (if (memv G4d8b@t '(#\))) (G4d83@loop (cdr G4d85@chars) (- G4d86@p0 '1) G4d87@p1) (if (memv G4d8b@t '(#\[)) (G4d83@loop (cdr G4d85@chars) G4d86@p0 (+ G4d87@p1 '1)) (if (memv G4d8b@t '(#\])) (G4d83@loop (cdr G4d85@chars) G4d86@p0 (- G4d87@p1 '1)) (G4d83@loop (cdr G4d85@chars) G4d86@p0 G4d87@p1)))))) (car G4d85@chars)))))) G4d83@loop) (string->list G4d81@text) '0 '0))) (set! G4d7c@eval-string-print (lambda (G4d7f@text) (if (not (or (string=? '"\n" G4d7f@text) (= '0 (string-length G4d7f@text)))) (write (G4d10@eval-top-level (call-with-port (open-string-input-port G4d7f@text) read))) (void)))) (if (eof-object? G4d75@line) (begin (G4d7c@eval-string-print G4d76@accum) (exit)) ((lambda (G4d7d@current) (if (G4d7a@parentheses-ok? G4d7d@current) (G4d7c@eval-string-print G4d7d@current) (G4d73@loop (get-line (current-input-port)) G4d7d@current))) (string-append G4d76@accum G4d75@line))))) '#f '#f)))) G4d73@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d6a@rec)))) (G4d6a@rec))) '#f))) (set! G4d04@trace-printer (G28f5@G282b@make-parameter write)) (set! G4d06@command-line (G28f5@G282b@make-parameter (get-command-line))) (set! G4d08@local-library-path (lambda (G4d8d@filename) (cons (expand-path '".") (G2b5e@G29f3@library-path)))) (set! G4d0a@load/args (lambda (G4d8f@filename . G4d91@args) (begin (apply G4d1a@load-r6rs-top-level G4d8f@filename 'load G4d91@args) (void)))) (set! G4d0c@load (lambda (G4d93@filename) (begin (apply G4d1a@load-r6rs-top-level G4d93@filename 'load (G4d06@command-line)) (void)))) (set! G4d0e@ironscheme-build (lambda () (G4d0c@load '"ironscheme-buildscript.ss"))) (set! G4d10@eval-top-level (lambda (G4d95@x) (G4930@G3023@eval G4d95@x (G4946@G304f@interaction-environment)))) (set! G4d12@compile-system-libraries (lambda () (G4d10@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d14@compile (lambda (G4d97@filename) (G4d1a@load-r6rs-top-level G4d97@filename 'compile))) (set! G4d16@compile->closure (lambda (G4d99@filename) (G4d1a@load-r6rs-top-level G4d99@filename 'closure))) (set! G4d18@pre-compile-r6rs-file (lambda (G4d9b@filename) (G4d1a@load-r6rs-top-level G4d9b@filename 'compile))) (set! G4d1a@load-r6rs-top-level (lambda (G4d9d@filename G4d9e@how . G4da1@args) ((lambda (G4da5@G4da3 G4da6@G4da4) ((lambda (G4da9@swap) (dynamic-wind G4da9@swap (lambda () ((lambda (G4dab@x*) ((lambda (G4dad@t) (if (memv G4dad@t '(closure)) (G4945@G304d@pre-compile-r6rs-top-level G4dab@x*) (if (memv G4dad@t '(load)) ((lambda (G4db1@G4daf G4db2@G4db0) ((lambda (G4db5@swap) (dynamic-wind G4db5@swap (lambda () ((G4944@G304b@compile-r6rs-top-level G4dab@x*))) G4db5@swap)) (lambda () ((lambda (G4db7@t) (begin (G4db1@G4daf G4db2@G4db0) (set! G4db2@G4db0 G4db7@t))) (G4db1@G4daf))))) G4d06@command-line (cons G4d9d@filename (car G4da1@args))) (if (memv G4dad@t '(compile)) (begin (G4944@G304b@compile-r6rs-top-level G4dab@x*) (G2b62@G29fb@serialize-all G28f0@G2821@serialize-library G294a@G2903@compile-core-expr)) (if '#f '#f (void)))))) G4d9e@how)) (with-input-from-file G4d9d@filename (lambda () ((letrec ((G4db9@f (lambda () ((lambda (G4dbb@x) (if (eof-object? G4dbb@x) '() (cons G4dbb@x (G4db9@f)))) (G28e8@G2811@read-annotated))))) G4db9@f)))))) G4da9@swap)) (lambda () ((lambda (G4dbd@t) (begin (G4da5@G4da3 G4da6@G4da4) (set! G4da6@G4da4 G4dbd@t))) (G4da5@G4da3))))) G2b5e@G29f3@library-path (G4d08@local-library-path G4d9d@filename)))) (begin (set! G4dcf@G4d1a@load-r6rs-top-level G4d1a@load-r6rs-top-level) (set! G4dce@G4d18@pre-compile-r6rs-file G4d18@pre-compile-r6rs-file) (set! G4dcd@G4d16@compile->closure G4d16@compile->closure) (set! G4dcc@G4d14@compile G4d14@compile) (set! G4dcb@G4d12@compile-system-libraries G4d12@compile-system-libraries) (set! G4dca@G4d10@eval-top-level G4d10@eval-top-level) (set! G4dc9@G4d0e@ironscheme-build G4d0e@ironscheme-build) (set! G4dc8@G4d0c@load G4d0c@load) (set! G4dc7@G4d0a@load/args G4d0a@load/args) (set! G4dc6@G4d08@local-library-path G4d08@local-library-path) (set! G4dc5@G4d06@command-line G4d06@command-line) (set! G4dc4@G4d04@trace-printer G4d04@trace-printer) (set! G4dc3@G4d02@repl G4d02@repl) (set! G4dc2@G4d00@conditioon-printer G4d00@conditioon-printer) (set! G4dc1@G4cfe@for-each-with-index G4cfe@for-each-with-index) (set! G4dc0@G4cfc@parse-and-add-library-path G4cfc@parse-and-add-library-path) (set! G4dbf@G4cfa@add-library-path! G4cfa@add-library-path!) (G2b63@G29fd@current-precompiled-library-loader G28f1@G2823@load-serialized-library) (set-symbol-value! 'load G4d0c@load) (set-symbol-value! 'pre-compile-r6rs-file G4d18@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d10@eval-top-level) (set-symbol-value! 'int-env-syms G4927@G3011@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2949@G2901@expanded->core) (set-symbol-value! 'trace-printer G4d04@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d1b@c) (condition (G4c57@G4a67@make-non-continuable-violation) (G4c4d@G4a4e@make-who-condition 'raise) (G4c11@G49b1@make-message-condition '"returned from non-continuable exception") (G4c43@G4a34@make-irritants-condition (list G4d1b@c))))) (G4cfc@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4cfc@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b5e@G29f3@library-path (append (G2b5e@G29f3@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4d1d@prefix) (G2b5f@G29f5@library-extensions (G4d1d@prefix '".mosh" (G2b5f@G29f5@library-extensions)))) (lambda (G4d1f@ext G4d20@ls) (append (map (lambda (G4d23@x) (string-append G4d1f@ext G4d23@x)) G4d20@ls) G4d20@ls))) ((lambda (G4d25@args G4d26@port) ((lambda (G4d2a@ref) (begin (set! G4d2a@ref (lambda (G4d2d@rtd G4d2e@i G4d2f@x) ((lambda (G4d33@val) (if (symbol? G4d33@val) (ungensym G4d33@val) G4d33@val)) ((record-accessor G4d2d@rtd G4d2e@i) G4d2f@x)))) (with-exception-handler (lambda (G4d2b@c) (G4d00@conditioon-printer G4d2b@c (current-error-port))) (lambda () (if (null? G4d25@args) (G4d02@repl) (G4d1a@load-r6rs-top-level (car G4d25@args) 'load (cdr G4d25@args))))))) '#f)) (G4d06@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
