;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2822@read-annotated G2824@annotation-stripped G2826@annotation? G2828@annotation-source G282a@annotation-expression G282c@scm->fasl G282e@fasl-save G2830@fasl-load G2832@serialize-library G2834@load-serialized-library G2836@make-record-printer G2838@compile-core G283a@read-library-source-file G283c@make-parameter G28a8@file-options-spec) (begin (set! G2822@read-annotated read) (set! G2824@annotation-stripped (lambda (G28a9@x) (G282a@annotation-expression G28a9@x))) (set! G2826@annotation? (lambda (G28ab@x) (source-info G28ab@x))) (set! G2828@annotation-source (lambda (G28ad@x) (source-info G28ad@x))) (set! G282a@annotation-expression (lambda (G28af@x) (if (pair? G28af@x) (cons (car G28af@x) (cdr G28af@x)) (display '"line:46\n")))) (set! G282c@scm->fasl (lambda (G28b1@filename) (string-append G28b1@filename '".fasl"))) (set! G282e@fasl-save (lambda (G28b3@filename G28b4@obj) (call-with-port (open-file-output-port G28b3@filename) (lambda (G28b7@port) ((symbol-value 'fasl-write!) G28b4@obj G28b7@port))))) (set! G2830@fasl-load (lambda (G28b9@filename) (call-with-port (open-file-input-port G28b9@filename) (symbol-value 'fasl-read!)))) (set! G2832@serialize-library (lambda (G28bb@filename G28bc@obj) (begin (format '#t '"serialize-library ~a\n..." G28bb@filename) ((lambda (G28bf@fasl-file) (begin (if (file-exists? G28bf@fasl-file) (delete-file G28bf@fasl-file) (void)) (call/cc (lambda (G28c2@G28c1) (with-exception-handler (lambda (G28c4@c) (G28c2@G28c1 (if '#t (begin (format '#t '"Warning:serialize-library failed " G28bb@filename) (if (file-exists? G28bf@fasl-file) (delete-file G28bf@fasl-file) (void)) '#f) (raise G28c4@c)))) (lambda () (begin '#f (G282e@fasl-save G28bf@fasl-file G28bc@obj) (display '"OK\n")))))))) (G282c@scm->fasl G28bb@filename))))) (set! G2834@load-serialized-library (lambda (G28c6@filename G28c7@obj) ((lambda (G28ca@fasl-file) (if (and (file-exists? G28ca@fasl-file) ((symbol-value 'file-newer?) G28ca@fasl-file G28c6@filename)) ((lambda (G28cc@expanded2core) ((lambda (G28ce@code) ((lambda (G28d0@pivot) ((lambda (G28d2@visit) ((lambda (G28d4@visit-proc) ((lambda () (begin (set-car! G28d0@pivot G28d4@visit-proc) ((lambda (G28d6@pivot) ((lambda (G28d8@invoke) ((lambda () (begin (set-car! G28d6@pivot (lambda () (eval-core G28d8@invoke))) (apply G28c7@obj G28ce@code))))) (G28cc@expanded2core (car G28d6@pivot)))) (cdr G28d0@pivot)) '#t)))) (lambda () (eval-core G28d2@visit)))) (G28cc@expanded2core (car G28d0@pivot)))) (cddddr (cddddr G28ce@code)))) (G2830@fasl-load G28ca@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G282c@scm->fasl G28c6@filename)))) (set! G2836@make-record-printer (lambda (G28da@name G28db@printer) (lambda G28de@x (begin (display '"record printer") (for-each display G28de@x))))) (set! G2838@compile-core (lambda G28e0@x (apply error 'comile-core '"not implementated" G28e0@x))) (set! G283a@read-library-source-file (lambda (G28e2@file-name) (with-input-from-file G28e2@file-name G2822@read-annotated))) (set! G283c@make-parameter (lambda G28f2 ((lambda (G28f3) (if (= G28f3 '1) (apply (lambda (G28e4@x) (G283c@make-parameter G28e4@x (lambda (G28e6@x) G28e6@x))) G28f2) (if (= G28f3 '2) (apply (lambda (G28e8@x G28e9@fender) ((lambda (G28ec@x) (lambda G28f0 ((lambda (G28f1) (if (= G28f1 '0) (apply (lambda () G28ec@x) G28f0) (if (= G28f1 '1) (apply (lambda (G28ee@v) (set! G28ec@x (G28e9@fender G28ee@v))) G28f0) (error 'apply '"invalid arg count")))) (length G28f0)))) (G28e9@fender G28e8@x))) G28f2) (error 'apply '"invalid arg count")))) (length G28f2)))) (set! G28a8@file-options-spec (lambda (G28f4@x) G28f4@x)) (begin (set! G2904@G28a8@file-options-spec G28a8@file-options-spec) (set! G2903@G283c@make-parameter G283c@make-parameter) (set! G2902@G283a@read-library-source-file G283a@read-library-source-file) (set! G2901@G2838@compile-core G2838@compile-core) (set! G2900@G2836@make-record-printer G2836@make-record-printer) (set! G28ff@G2834@load-serialized-library G2834@load-serialized-library) (set! G28fe@G2832@serialize-library G2832@serialize-library) (set! G28fd@G2830@fasl-load G2830@fasl-load) (set! G28fc@G282e@fasl-save G282e@fasl-save) (set! G28fb@G282c@scm->fasl G282c@scm->fasl) (set! G28fa@G282a@annotation-expression G282a@annotation-expression) (set! G28f9@G2828@annotation-source G2828@annotation-source) (set! G28f8@G2826@annotation? G2826@annotation?) (set! G28f7@G2824@annotation-stripped G2824@annotation-stripped) (set! G28f6@G2822@read-annotated G2822@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2909@current-primitive-locations G290b@mutable? G290d@rewriter G290f@expanded->core G2911@compile-core-expr G2913@pretty-print G2915@compile-core-expr-to-port) (begin (set! G2909@current-primitive-locations (G2903@G283c@make-parameter (lambda (G2916@x) '#f) (lambda (G2918@p) G2918@p))) (set! G290b@mutable? (lambda (G291a@x) (or (pair? G291a@x) (vector? G291a@x) (hashtable? G291a@x)))) (set! G290d@rewriter (lambda (G291c@quote-hack?) ((lambda (G291f@f) (begin (set! G291f@f (lambda (G2920@x) (if (pair? G2920@x) ((lambda (G2922@t) (if (memv G2922@t '(quote)) (if (and G291c@quote-hack? (G290b@mutable? (cadr G2920@x))) ((lambda (G2924@g) (begin (set-symbol-value! G2924@g (cadr G2920@x)) G2924@g)) (gensym)) G2920@x) (if (memv G2922@t '(case-lambda)) (cons 'case-lambda (map (lambda (G2926@x) (cons (car G2926@x) (map G291f@f (cdr G2926@x)))) (cdr G2920@x))) (if (memv G2922@t '(lambda)) (cons* 'lambda (cadr G2920@x) (map G291f@f (cddr G2920@x))) (if (memv G2922@t '(letrec)) ((lambda (G2928@bindings G2929@body*) ((lambda (G292c@lhs* G292d@rhs*) (cons* 'letrec (map list G292c@lhs* (map G291f@f G292d@rhs*)) (map G291f@f G2929@body*))) (map car G2928@bindings) (map cadr G2928@bindings))) (cadr G2920@x) (cddr G2920@x)) (if (memv G2922@t '(letrec*)) ((lambda (G2930@bindings G2931@body*) ((lambda (G2934@lhs* G2935@rhs*) (cons* 'letrec* (map list G2934@lhs* (map G291f@f G2935@rhs*)) (map G291f@f G2931@body*))) (map car G2930@bindings) (map cadr G2930@bindings))) (cadr G2920@x) (cddr G2920@x)) (if (memv G2922@t '(library-letrec*)) ((lambda (G2938@name G2939@x) ((lambda (G293c@bindings G293d@body*) ((lambda (G2940@lhs* G2941@lhs** G2942@rhs*) (cons* 'library-letrec* G2938@name (map list G2940@lhs* G2941@lhs** (map G291f@f G2942@rhs*)) (map G291f@f G293d@body*))) (map car G293c@bindings) (map cadr G293c@bindings) (map caddr G293c@bindings))) (cadr G2939@x) (cddr G2939@x))) (cadr G2920@x) (cdr G2920@x)) (if (memv G2922@t '(begin)) (cons 'begin (map G291f@f (cdr G2920@x))) (if (memv G2922@t '(set!)) (list 'set! (cadr G2920@x) (G291f@f (caddr G2920@x))) (if (memv G2922@t '(primitive)) ((lambda (G2946@op) ((lambda (G2948@t) (if G2948@t ((lambda (G294a@loc) G294a@loc) G2948@t) G2946@op)) ((G2909@current-primitive-locations) G2946@op))) (cadr G2920@x)) (if (memv G2922@t '(define)) G2920@x (if (list? G2920@x) (map G291f@f G2920@x) (error 'rewrite '"invalid form ~s ~s" G2920@x (list? G2920@x)))))))))))))) (car G2920@x)) G2920@x))) G291f@f)) '#f))) (set! G290f@expanded->core (lambda (G294c@x) ((G290d@rewriter '#t) G294c@x))) (set! G2911@compile-core-expr (lambda (G294e@x) ((G290d@rewriter '#f) G294e@x))) (set! G2913@pretty-print write) (set! G2915@compile-core-expr-to-port (lambda (G2950@x G2951@p) (G2913@pretty-print ((G290d@rewriter '#f) G2950@x) G2951@p))) (begin (set! G295a@G2915@compile-core-expr-to-port G2915@compile-core-expr-to-port) (set! G2959@G2913@pretty-print G2913@pretty-print) (set! G2958@G2911@compile-core-expr G2911@compile-core-expr) (set! G2957@G290f@expanded->core G290f@expanded->core) (set! G2956@G290d@rewriter G290d@rewriter) (set! G2955@G290b@mutable? G290b@mutable?) (set! G2954@G2909@current-primitive-locations G2909@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29b0@make-collection G29b2@current-library-collection G29b8@G29b3 G29ba@G29b5 G29bc@G29b4 G29bf@library? G29c1@make-library G29c3@library-id G29c5@library-name G29c7@library-version G29c9@library-imp* G29cb@library-vis* G29cd@library-inv* G29cf@library-subst G29d1@library-env G29d3@library-visit-state G29d5@library-invoke-state G29d7@library-visit-code G29d9@library-invoke-code G29db@library-visible? G29dd@library-source-file-name G29df@set-library-id! G29e1@set-library-name! G29e3@set-library-version! G29e5@set-library-imp*! G29e7@set-library-vis*! G29e9@set-library-inv*! G29eb@set-library-subst! G29ed@set-library-env! G29ef@set-library-visit-state! G29f1@set-library-invoke-state! G29f3@set-library-visit-code! G29f5@set-library-invoke-code! G29f7@set-library-visible?! G29f9@set-library-source-file-name! G29fb@rp G29fd@find-dependencies G29ff@find-library-by G2a01@library-path G2a03@library-extensions G2a05@library-name->file-name G2a07@file-locator G2a09@serialize-all G2a0b@current-precompiled-library-loader G2a0d@try-load-from-file G2a0f@library-loader G2a11@current-library-expander G2a13@external-pending-libraries G2a15@find-external-library G2a17@find-library-by-name G2a19@library-exists? G2a1b@find-library-by-spec/die G2a1d@label->binding-table G2a1f@install-library-record G2a21@install-library G2a23@imported-label->binding G2a25@invoke-library G2a27@visit-library G2a29@invoke-library-by-spec G2a2b@installed-libraries G2a2d@library-spec) (begin (set! G29b0@make-collection (lambda () ((lambda (G2a2e@set) ((lambda (G2a31@set-cons) (begin (set! G2a31@set-cons (lambda (G2a36@x G2a37@ls) (if (memq G2a36@x G2a37@ls) G2a37@ls (cons G2a36@x G2a37@ls)))) (lambda G2a34 ((lambda (G2a35) (if (= G2a35 '0) (apply (lambda () G2a2e@set) G2a34) (if (= G2a35 '1) (apply (lambda (G2a32@x) (set! G2a2e@set (G2a31@set-cons G2a32@x G2a2e@set))) G2a34) (error 'apply '"invalid arg count")))) (length G2a34))))) '#f)) '()))) (set! G29b2@current-library-collection (G2903@G283c@make-parameter (G29b0@make-collection) (lambda (G2a3a@x) (begin (if (not (procedure? G2a3a@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a3a@x) (void)) G2a3a@x)))) (set! G29b8@G29b3 (make-record-type-descriptor 'library '#f 'G29b6 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29ba@G29b5 '#f) (set! G29bc@G29b4 (make-record-constructor-descriptor G29b8@G29b3 '#f G29ba@G29b5)) (set! G29bf@library? (record-predicate G29b8@G29b3)) (set! G29c1@make-library (record-constructor G29bc@G29b4)) (set! G29c3@library-id (record-accessor G29b8@G29b3 '0)) (set! G29c5@library-name (record-accessor G29b8@G29b3 '1)) (set! G29c7@library-version (record-accessor G29b8@G29b3 '2)) (set! G29c9@library-imp* (record-accessor G29b8@G29b3 '3)) (set! G29cb@library-vis* (record-accessor G29b8@G29b3 '4)) (set! G29cd@library-inv* (record-accessor G29b8@G29b3 '5)) (set! G29cf@library-subst (record-accessor G29b8@G29b3 '6)) (set! G29d1@library-env (record-accessor G29b8@G29b3 '7)) (set! G29d3@library-visit-state (record-accessor G29b8@G29b3 '8)) (set! G29d5@library-invoke-state (record-accessor G29b8@G29b3 '9)) (set! G29d7@library-visit-code (record-accessor G29b8@G29b3 '10)) (set! G29d9@library-invoke-code (record-accessor G29b8@G29b3 '11)) (set! G29db@library-visible? (record-accessor G29b8@G29b3 '12)) (set! G29dd@library-source-file-name (record-accessor G29b8@G29b3 '13)) (set! G29df@set-library-id! (record-mutator G29b8@G29b3 '0)) (set! G29e1@set-library-name! (record-mutator G29b8@G29b3 '1)) (set! G29e3@set-library-version! (record-mutator G29b8@G29b3 '2)) (set! G29e5@set-library-imp*! (record-mutator G29b8@G29b3 '3)) (set! G29e7@set-library-vis*! (record-mutator G29b8@G29b3 '4)) (set! G29e9@set-library-inv*! (record-mutator G29b8@G29b3 '5)) (set! G29eb@set-library-subst! (record-mutator G29b8@G29b3 '6)) (set! G29ed@set-library-env! (record-mutator G29b8@G29b3 '7)) (set! G29ef@set-library-visit-state! (record-mutator G29b8@G29b3 '8)) (set! G29f1@set-library-invoke-state! (record-mutator G29b8@G29b3 '9)) (set! G29f3@set-library-visit-code! (record-mutator G29b8@G29b3 '10)) (set! G29f5@set-library-invoke-code! (record-mutator G29b8@G29b3 '11)) (set! G29f7@set-library-visible?! (record-mutator G29b8@G29b3 '12)) (set! G29f9@set-library-source-file-name! (record-mutator G29b8@G29b3 '13)) (set! G29fb@rp (G2900@G2836@make-record-printer 'library (lambda (G2a3c@x G2a3d@p G2a3e@wr) (begin (if (not (G29bf@library? G2a3c@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29c7@library-version G2a3c@x)) (G29c5@library-name G2a3c@x) (append (G29c5@library-name G2a3c@x) (list (G29c7@library-version G2a3c@x))))) G2a3d@p))))) (set! G29fd@find-dependencies (lambda (G2a42@ls) (if (null? G2a42@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29ff@find-library-by (lambda (G2a44@pred) ((letrec ((G2a46@f (lambda (G2a48@ls) (if (null? G2a48@ls) '#f (if (G2a44@pred (car G2a48@ls)) (car G2a48@ls) (G2a46@f (cdr G2a48@ls))))))) G2a46@f) ((G29b2@current-library-collection))))) (set! G2a01@library-path (G2903@G283c@make-parameter '(".") (lambda (G2a4a@x) (if (and (list? G2a4a@x) (for-all string? G2a4a@x)) (map (lambda (G2a4c@x) G2a4c@x) G2a4a@x) (assertion-violation 'library-path '"not a list of strings" G2a4a@x))))) (set! G2a03@library-extensions (G2903@G283c@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a4e@x) (if (and (list? G2a4e@x) (for-all string? G2a4e@x)) (map (lambda (G2a50@x) G2a50@x) G2a4e@x) (assertion-violation 'library-extensions '"not a list of strings" G2a4e@x))))) (set! G2a05@library-name->file-name (lambda (G2a52@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a56@G2a54 G2a57@G2a55) ((lambda (G2a5a@extract G2a5b@p) ((lambda (G2a5f@display-hex) (begin (set! G2a5f@display-hex (lambda (G2a68@n) (if (<= '0 G2a68@n '9) (display G2a68@n G2a5b@p) (display (integer->char (+ (char->integer '#\A) (- G2a68@n '10))) G2a5b@p)))) (begin ((letrec ((G2a60@f (lambda (G2a62@ls) (if (not (null? G2a62@ls)) (begin (display '"/" G2a5b@p) (for-each (lambda (G2a64@c) (if (or (char<=? '#\a G2a64@c '#\z) (char<=? '#\A G2a64@c '#\Z) (char<=? '#\nul G2a64@c '#\9) (memv G2a64@c '(#\- #\. #\_ #\~))) (display G2a64@c G2a5b@p) (begin (display '"%" G2a5b@p) ((lambda (G2a66@n) (begin (G2a5f@display-hex (quotient G2a66@n '16)) (G2a5f@display-hex (remainder G2a66@n '16)))) (char->integer G2a64@c))))) (string->list (symbol->string (car G2a62@ls)))) (G2a60@f (cdr G2a62@ls))) (void))))) G2a60@f) G2a52@x) (G2a5a@extract)))) '#f)) G2a57@G2a55 G2a56@G2a54))))) (set! G2a07@file-locator (G2903@G283c@make-parameter (lambda (G2a6a@x) ((lambda (G2a6c@str) ((letrec ((G2a6e@f (lambda (G2a70@ls G2a71@exts G2a72@failed-list) (if (null? G2a70@ls) ((lambda () ((lambda (G2a7e@G2a79 G2a80@G2a7b G2a82@G2a7a G2a85@G2a78 G2a87@make-library-resolution-condition G2a89@G2a76 G2a8b@G2a77 G2a8d@library-resolution-condition? G2a8f@condition-library G2a91@condition-files) (begin (set! G2a7e@G2a79 (make-record-type-descriptor '&library-resolution G4c37@G4988@&condition-rtd 'G2a7c '#f '#f '#((immutable library) (immutable files)))) (set! G2a80@G2a7b '#f) (set! G2a82@G2a7a (make-record-constructor-descriptor G2a7e@G2a79 G4c38@G498a@&condition-rcd G2a80@G2a7b)) (set! G2a85@G2a78 (record-predicate G2a7e@G2a79)) (set! G2a87@make-library-resolution-condition (record-constructor G2a82@G2a7a)) (set! G2a89@G2a76 (record-accessor G2a7e@G2a79 '0)) (set! G2a8b@G2a77 (record-accessor G2a7e@G2a79 '1)) (set! G2a8d@library-resolution-condition? (condition-predicate G2a7e@G2a79)) (set! G2a8f@condition-library (condition-accessor G2a7e@G2a79 G2a89@G2a76)) (set! G2a91@condition-files (condition-accessor G2a7e@G2a79 G2a8b@G2a77)) (raise (condition (G4c57@G4a20@make-error) (G4c79@G4a7a@make-who-condition 'expander) (G4c3d@G49dd@make-message-condition '"cannot locate library in library-path") (G2a87@make-library-resolution-condition G2a6a@x (reverse G2a72@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a71@exts) (G2a6e@f (cdr G2a70@ls) (G2a03@library-extensions) G2a72@failed-list) ((lambda (G2a92@name) (if (file-exists? G2a92@name) G2a92@name (G2a6e@f G2a70@ls (cdr G2a71@exts) (cons G2a92@name G2a72@failed-list)))) (string-append (car G2a70@ls) G2a6c@str (car G2a71@exts)))))))) G2a6e@f) (G2a01@library-path) (G2a03@library-extensions) '())) (G2a05@library-name->file-name G2a6a@x))) (lambda (G2a94@f) (if (procedure? G2a94@f) G2a94@f (assertion-violation 'file-locator '"not a procedure" G2a94@f))))) (set! G2a09@serialize-all (lambda (G2a96@serialize G2a97@compile) ((lambda (G2a9b@library-desc) (begin (set! G2a9b@library-desc (lambda (G2a9e@x) (list (G29c3@library-id G2a9e@x) (G29c5@library-name G2a9e@x)))) (for-each (lambda (G2a9c@x) (if (G29dd@library-source-file-name G2a9c@x) (G2a96@serialize (G29dd@library-source-file-name G2a9c@x) (list (G29c3@library-id G2a9c@x) (G29c5@library-name G2a9c@x) (G29c7@library-version G2a9c@x) (map G2a9b@library-desc (G29c9@library-imp* G2a9c@x)) (map G2a9b@library-desc (G29cb@library-vis* G2a9c@x)) (map G2a9b@library-desc (G29cd@library-inv* G2a9c@x)) (G29cf@library-subst G2a9c@x) (G29d1@library-env G2a9c@x) (G2a97@compile (G29d7@library-visit-code G2a9c@x)) (G2a97@compile (G29d9@library-invoke-code G2a9c@x)) (G29db@library-visible? G2a9c@x))) (void))) ((G29b2@current-library-collection))))) '#f))) (set! G2a0b@current-precompiled-library-loader (G2903@G283c@make-parameter (lambda (G2aa0@filename G2aa1@sk) '#f))) (set! G2a0d@try-load-from-file (lambda (G2aa4@filename) ((G2a0b@current-precompiled-library-loader) G2aa4@filename (lambda G2aca ((lambda (G2acb) (if (= G2acb '11) (apply (lambda (G2aa6@id G2aa7@name G2aa8@ver G2aa9@imp* G2aaa@vis* G2aab@inv* G2aac@exp-subst G2aad@exp-env G2aae@visit-proc G2aaf@invoke-proc G2ab0@visible?) ((letrec ((G2abc@f (lambda (G2abe@deps) (if (null? G2abe@deps) (begin (G2a21@install-library G2aa6@id G2aa7@name G2aa8@ver G2aa9@imp* G2aaa@vis* G2aab@inv* G2aac@exp-subst G2aad@exp-env G2aae@visit-proc G2aaf@invoke-proc '#f '#f G2ab0@visible? '#f) '#t) ((lambda (G2ac0@d) ((lambda (G2ac2@label G2ac3@dname) ((lambda (G2ac6@l) (if (and (G29bf@library? G2ac6@l) (eq? G2ac2@label (G29c3@library-id G2ac6@l))) (G2abc@f (cdr G2abe@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2aa7@name G2ac3@dname G2aa4@filename G2ac6@l G2ac2@label (G29c3@library-id G2ac6@l)) '#f))) (G2a17@find-library-by-name G2ac3@dname))) (car G2ac0@d) (cadr G2ac0@d))) (car G2abe@deps)))))) G2abc@f) (append G2aa9@imp* G2aaa@vis* G2aab@inv*))) G2aca) (if (>= G2acb '0) (apply (lambda G2ac8@others '#f) G2aca) (error 'apply '"invalid arg count")))) (length G2aca)))))) (set! G2a0f@library-loader (G2903@G283c@make-parameter (lambda (G2acc@x) ((lambda (G2ace@file-name) (if (not G2ace@file-name) (assertion-violation '#f '"cannot file library" G2acc@x) (or (G2a0d@try-load-from-file G2ace@file-name) ((G2a11@current-library-expander) (G2902@G283a@read-library-source-file G2ace@file-name) G2ace@file-name (lambda (G2ad0@name) (if (not (fast-equal? G2ad0@name G2acc@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ad4@G2ad2 G2ad5@G2ad3) ((lambda (G2ad8@e G2ad9@p) (begin (display '"expected to find library " G2ad9@p) (write G2acc@x G2ad9@p) (display '" in file " G2ad9@p) (display G2ace@file-name G2ad9@p) (display '", found " G2ad9@p) (write G2ad0@name G2ad9@p) (display '" instead" G2ad9@p) (G2ad8@e))) G2ad5@G2ad3 G2ad4@G2ad2)))) (void))))))) ((G2a07@file-locator) G2acc@x))) (lambda (G2adc@f) (if (procedure? G2adc@f) G2adc@f (assertion-violation 'library-locator '"not a procedure" G2adc@f))))) (set! G2a11@current-library-expander (G2903@G283c@make-parameter (lambda (G2ade@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ae0@f) (if (procedure? G2ae0@f) G2ae0@f (assertion-violation 'library-expander '"not a procedure" G2ae0@f))))) (set! G2a13@external-pending-libraries (G2903@G283c@make-parameter '())) (set! G2a15@find-external-library (lambda (G2ae2@name) (begin (if (member G2ae2@name (G2a13@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ae2@name) (void)) ((lambda (G2ae6@G2ae4 G2ae7@G2ae5) ((lambda (G2aea@swap) (dynamic-wind G2aea@swap (lambda () (begin ((G2a0f@library-loader) G2ae2@name) (or (G29ff@find-library-by (lambda (G2aec@x) (fast-equal? (G29c5@library-name G2aec@x) G2ae2@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ae2@name)))) G2aea@swap)) (lambda () ((lambda (G2aee@t) (begin (G2ae6@G2ae4 G2ae7@G2ae5) (set! G2ae7@G2ae5 G2aee@t))) (G2ae6@G2ae4))))) G2a13@external-pending-libraries (cons G2ae2@name (G2a13@external-pending-libraries)))))) (set! G2a17@find-library-by-name (lambda (G2af0@name) (or (G29ff@find-library-by (lambda (G2af2@x) (fast-equal? (G29c5@library-name G2af2@x) G2af0@name))) (G2a15@find-external-library G2af0@name)))) (set! G2a19@library-exists? (lambda (G2af4@name) (and (G29ff@find-library-by (lambda (G2af6@x) (fast-equal? (G29c5@library-name G2af6@x) G2af4@name))) '#t))) (set! G2a1b@find-library-by-spec/die (lambda (G2af8@spec) ((lambda (G2afa@id) (or (G29ff@find-library-by (lambda (G2afc@x) (eq? G2afa@id (G29c3@library-id G2afc@x)))) (assertion-violation '#f '"cannot find library with required spec" G2af8@spec))) (car G2af8@spec)))) (set! G2a1d@label->binding-table (make-eq-hashtable)) (set! G2a1f@install-library-record (lambda (G2afe@lib) (begin ((lambda (G2b00@exp-env) (for-each (lambda (G2b02@x) ((lambda (G2b04@label G2b05@binding) ((lambda (G2b08@binding) (hashtable-set! G2a1d@label->binding-table G2b04@label G2b08@binding)) ((lambda (G2b0a@t) (if (memv G2b0a@t '(global)) (cons 'global (cons G2afe@lib (cdr G2b05@binding))) (if (memv G2b0a@t '(global-macro)) (cons 'global-macro (cons G2afe@lib (cdr G2b05@binding))) (if (memv G2b0a@t '(global-macro!)) (cons 'global-macro! (cons G2afe@lib (cdr G2b05@binding))) G2b05@binding)))) (car G2b05@binding)))) (car G2b02@x) (cdr G2b02@x))) G2b00@exp-env)) (G29d1@library-env G2afe@lib)) ((G29b2@current-library-collection) G2afe@lib)))) (set! G2a21@install-library (lambda (G2b0c@id G2b0d@name G2b0e@ver G2b0f@imp* G2b10@vis* G2b11@inv* G2b12@exp-subst G2b13@exp-env G2b14@visit-proc G2b15@invoke-proc G2b16@visit-code G2b17@invoke-code G2b18@visible? G2b19@source-file-name) ((lambda (G2b28@imp-lib* G2b29@vis-lib* G2b2a@inv-lib*) (begin (if (not (and (symbol? G2b0c@id) (list? G2b0d@name) (list? G2b0e@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b0c@id G2b0d@name G2b0e@ver) (void)) (if (G2a19@library-exists? G2b0d@name) (assertion-violation 'install-library '"library is already installed" G2b0d@name) (void)) ((lambda (G2b2e@lib) (G2a1f@install-library-record G2b2e@lib)) (G29c1@make-library G2b0c@id G2b0d@name G2b0e@ver G2b28@imp-lib* G2b29@vis-lib* G2b2a@inv-lib* G2b12@exp-subst G2b13@exp-env G2b14@visit-proc G2b15@invoke-proc G2b16@visit-code G2b17@invoke-code G2b18@visible? G2b19@source-file-name)))) (map G2a1b@find-library-by-spec/die G2b0f@imp*) (map G2a1b@find-library-by-spec/die G2b10@vis*) (map G2a1b@find-library-by-spec/die G2b11@inv*)))) (set! G2a23@imported-label->binding (lambda (G2b30@lab) (hashtable-ref G2a1d@label->binding-table G2b30@lab '#f))) (set! G2a25@invoke-library (lambda (G2b32@lib) ((lambda (G2b34@invoke) (if (procedure? G2b34@invoke) (begin (G29f1@set-library-invoke-state! G2b32@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b32@lib))) (for-each G2a25@invoke-library (G29cd@library-inv* G2b32@lib)) (G29f1@set-library-invoke-state! G2b32@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b32@lib))) (G2b34@invoke) (G29f1@set-library-invoke-state! G2b32@lib '#t)) (void))) (G29d5@library-invoke-state G2b32@lib)))) (set! G2a27@visit-library (lambda (G2b36@lib) ((lambda (G2b38@visit) (if (procedure? G2b38@visit) (begin (G29ef@set-library-visit-state! G2b36@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b36@lib))) (for-each G2a25@invoke-library (G29cb@library-vis* G2b36@lib)) (G29ef@set-library-visit-state! G2b36@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b36@lib))) (G2b38@visit) (G29ef@set-library-visit-state! G2b36@lib '#t)) (void))) (G29d3@library-visit-state G2b36@lib)))) (set! G2a29@invoke-library-by-spec (lambda (G2b3a@spec) (G2a25@invoke-library (G2a1b@find-library-by-spec/die G2b3a@spec)))) (set! G2a2b@installed-libraries (lambda G2b42 ((lambda (G2b43) (if (= G2b43 '1) (apply (lambda (G2b3c@all?) ((letrec ((G2b3e@f (lambda (G2b40@ls) (if (null? G2b40@ls) '() (if (or G2b3c@all? (G29db@library-visible? (car G2b40@ls))) (cons (car G2b40@ls) (G2b3e@f (cdr G2b40@ls))) (G2b3e@f (cdr G2b40@ls))))))) G2b3e@f) ((G29b2@current-library-collection)))) G2b42) (if (= G2b43 '0) (apply (lambda () (G2a2b@installed-libraries '#f)) G2b42) (error 'apply '"invalid arg count")))) (length G2b42)))) (set! G2a2d@library-spec (lambda (G2b44@x) (begin (if (not (G29bf@library? G2b44@x)) (assertion-violation 'library-spec '"not a library" G2b44@x) (void)) (list (G29c3@library-id G2b44@x) (G29c5@library-name G2b44@x) (G29c7@library-version G2b44@x))))) (begin (set! G2b82@G2a2d@library-spec G2a2d@library-spec) (set! G2b81@G2a2b@installed-libraries G2a2b@installed-libraries) (set! G2b80@G2a29@invoke-library-by-spec G2a29@invoke-library-by-spec) (set! G2b7f@G2a27@visit-library G2a27@visit-library) (set! G2b7e@G2a25@invoke-library G2a25@invoke-library) (set! G2b7d@G2a23@imported-label->binding G2a23@imported-label->binding) (set! G2b7c@G2a21@install-library G2a21@install-library) (set! G2b7b@G2a1f@install-library-record G2a1f@install-library-record) (set! G2b7a@G2a1d@label->binding-table G2a1d@label->binding-table) (set! G2b79@G2a1b@find-library-by-spec/die G2a1b@find-library-by-spec/die) (set! G2b78@G2a19@library-exists? G2a19@library-exists?) (set! G2b77@G2a17@find-library-by-name G2a17@find-library-by-name) (set! G2b76@G2a15@find-external-library G2a15@find-external-library) (set! G2b75@G2a13@external-pending-libraries G2a13@external-pending-libraries) (set! G2b74@G2a11@current-library-expander G2a11@current-library-expander) (set! G2b73@G2a0f@library-loader G2a0f@library-loader) (set! G2b72@G2a0d@try-load-from-file G2a0d@try-load-from-file) (set! G2b71@G2a0b@current-precompiled-library-loader G2a0b@current-precompiled-library-loader) (set! G2b70@G2a09@serialize-all G2a09@serialize-all) (set! G2b6f@G2a07@file-locator G2a07@file-locator) (set! G2b6e@G2a05@library-name->file-name G2a05@library-name->file-name) (set! G2b6d@G2a03@library-extensions G2a03@library-extensions) (set! G2b6c@G2a01@library-path G2a01@library-path) (set! G2b6b@G29ff@find-library-by G29ff@find-library-by) (set! G2b6a@G29fd@find-dependencies G29fd@find-dependencies) (set! G2b69@G29fb@rp G29fb@rp) (set! G2b68@G29f9@set-library-source-file-name! G29f9@set-library-source-file-name!) (set! G2b67@G29f7@set-library-visible?! G29f7@set-library-visible?!) (set! G2b66@G29f5@set-library-invoke-code! G29f5@set-library-invoke-code!) (set! G2b65@G29f3@set-library-visit-code! G29f3@set-library-visit-code!) (set! G2b64@G29f1@set-library-invoke-state! G29f1@set-library-invoke-state!) (set! G2b63@G29ef@set-library-visit-state! G29ef@set-library-visit-state!) (set! G2b62@G29ed@set-library-env! G29ed@set-library-env!) (set! G2b61@G29eb@set-library-subst! G29eb@set-library-subst!) (set! G2b60@G29e9@set-library-inv*! G29e9@set-library-inv*!) (set! G2b5f@G29e7@set-library-vis*! G29e7@set-library-vis*!) (set! G2b5e@G29e5@set-library-imp*! G29e5@set-library-imp*!) (set! G2b5d@G29e3@set-library-version! G29e3@set-library-version!) (set! G2b5c@G29e1@set-library-name! G29e1@set-library-name!) (set! G2b5b@G29df@set-library-id! G29df@set-library-id!) (set! G2b5a@G29dd@library-source-file-name G29dd@library-source-file-name) (set! G2b59@G29db@library-visible? G29db@library-visible?) (set! G2b58@G29d9@library-invoke-code G29d9@library-invoke-code) (set! G2b57@G29d7@library-visit-code G29d7@library-visit-code) (set! G2b56@G29d5@library-invoke-state G29d5@library-invoke-state) (set! G2b55@G29d3@library-visit-state G29d3@library-visit-state) (set! G2b54@G29d1@library-env G29d1@library-env) (set! G2b53@G29cf@library-subst G29cf@library-subst) (set! G2b52@G29cd@library-inv* G29cd@library-inv*) (set! G2b51@G29cb@library-vis* G29cb@library-vis*) (set! G2b50@G29c9@library-imp* G29c9@library-imp*) (set! G2b4f@G29c7@library-version G29c7@library-version) (set! G2b4e@G29c5@library-name G29c5@library-name) (set! G2b4d@G29c3@library-id G29c3@library-id) (set! G2b4c@G29c1@make-library G29c1@make-library) (set! G2b4b@G29bf@library? G29bf@library?) (set! G2b4a@G29bc@G29b4 G29bc@G29b4) (set! G2b49@G29ba@G29b5 G29ba@G29b5) (set! G2b48@G29b8@G29b3 G29b8@G29b3) (set! G2b47@G29b2@current-library-collection G29b2@current-library-collection) (set! G2b46@G29b0@make-collection G29b0@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b85@build-global-define G2bff@build-lambda G2c01@build-case-lambda G2c03@build-let G2c35@build-sequence G2c37@build-void G2c39@build-letrec G2c3b@build-letrec* G2c3d@build-library-letrec* G2c3f@build-receive) (begin (set! G2b85@build-global-define (lambda (G2c40@x) (G2c37@build-void))) (set! G2bff@build-lambda (lambda (G2c42@ae G2c43@vars G2c44@exp) (list 'lambda G2c43@vars G2c44@exp))) (set! G2c01@build-case-lambda (lambda (G2c48@ae G2c49@vars* G2c4a@exp*) ((lambda (G2c4f@build-error G2c51@build-pred G2c53@build-apply G2c55@expand-case-lambda) (begin (set! G2c4f@build-error (lambda (G2c84@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c51@build-pred (lambda (G2c6e@ae G2c6f@n G2c70@vars) (call-with-values (lambda () ((letrec ((G2c76@f (lambda (G2c78@vars G2c79@count) (if (pair? G2c78@vars) (G2c76@f (cdr G2c78@vars) (+ G2c79@count '1)) (if (null? G2c78@vars) (values G2c79@count '=) (values G2c79@count '>=)))))) G2c76@f) G2c70@vars '0)) (lambda (G2c7c@G2c74 G2c7d@G2c75) ((lambda (G2c80@pred G2c81@count) (list (list 'primitive G2c80@pred) G2c6f@n (list 'quote G2c81@count))) G2c7d@G2c75 G2c7c@G2c74))))) (set! G2c53@build-apply (lambda (G2c66@ae G2c67@g G2c68@vars G2c69@exp) (list '(primitive apply) (G2bff@build-lambda G2c66@ae G2c68@vars G2c69@exp) G2c67@g))) (set! G2c55@expand-case-lambda (lambda (G2c56@ae G2c57@vars G2c58@exp*) ((lambda (G2c5c@g G2c5d@n) (list 'lambda G2c5c@g (G2c03@build-let G2c56@ae (list G2c5d@n) (list (list '(primitive length) G2c5c@g)) ((letrec ((G2c60@f (lambda (G2c62@vars* G2c63@exp*) (if (null? G2c62@vars*) (G2c4f@build-error G2c56@ae) (list 'if (G2c51@build-pred G2c56@ae G2c5d@n (car G2c62@vars*)) (G2c53@build-apply G2c56@ae G2c5c@g (car G2c62@vars*) (car G2c63@exp*)) (G2c60@f (cdr G2c62@vars*) (cdr G2c63@exp*))))))) G2c60@f) G2c49@vars* G2c58@exp*)))) (gensym) (gensym)))) (if (= (length G2c4a@exp*) '1) (G2bff@build-lambda G2c48@ae (car G2c49@vars*) (car G2c4a@exp*)) (G2c55@expand-case-lambda G2c48@ae G2c49@vars* G2c4a@exp*)))) '#f '#f '#f '#f))) (set! G2c03@build-let (lambda (G2c86@ae G2c87@lhs* G2c88@rhs* G2c89@body) (cons (G2bff@build-lambda G2c86@ae G2c87@lhs* G2c89@body) G2c88@rhs*))) (set! G2c35@build-sequence (lambda (G2c8e@ae G2c8f@exps) ((letrec ((G2c92@loop (lambda (G2c94@exps) (if (null? (cdr G2c94@exps)) (car G2c94@exps) (if (equal? (car G2c94@exps) (G2c37@build-void)) (G2c92@loop (cdr G2c94@exps)) (cons 'begin G2c94@exps)))))) G2c92@loop) G2c8f@exps))) (set! G2c37@build-void (lambda () '((primitive void)))) (set! G2c39@build-letrec (lambda (G2c96@ae G2c97@vars G2c98@val-exps G2c99@body-exp) (if (null? G2c97@vars) G2c99@body-exp (list 'letrec (map list G2c97@vars G2c98@val-exps) G2c99@body-exp)))) (set! G2c3b@build-letrec* (lambda (G2c9e@ae G2c9f@vars G2ca0@val-exps G2ca1@body-exp) (if (null? G2c9f@vars) G2ca1@body-exp (G2c03@build-let G2c9e@ae G2c9f@vars (map (lambda (G2ca6@x) (list 'quote '#f)) G2c9f@vars) (G2c35@build-sequence G2c9e@ae (append (map (lambda (G2ca8@lhs G2ca9@rhs) (list 'set! G2ca8@lhs G2ca9@rhs)) G2c9f@vars G2ca0@val-exps) (list G2ca1@body-exp))))))) (set! G2c3d@build-library-letrec* (lambda (G2cac@ae G2cad@name G2cae@vars G2caf@locs G2cb0@val-exps G2cb1@body-exp) (list 'library-letrec* G2cad@name (map list G2cae@vars G2caf@locs G2cb0@val-exps) G2cb1@body-exp))) (set! G2c3f@build-receive (lambda (G2cb8@ae G2cb9@vars G2cba@producer G2cbb@body*) (begin (display '"************** in ") (cons 'receive (cons G2cb9@vars (cons G2cba@producer G2cbb@body*)))))) (begin (set! G2cc9@G2c3f@build-receive G2c3f@build-receive) (set! G2cc8@G2c3d@build-library-letrec* G2c3d@build-library-letrec*) (set! G2cc7@G2c3b@build-letrec* G2c3b@build-letrec*) (set! G2cc6@G2c39@build-letrec G2c39@build-letrec) (set! G2cc5@G2c37@build-void G2c37@build-void) (set! G2cc4@G2c35@build-sequence G2c35@build-sequence) (set! G2cc3@G2c03@build-let G2c03@build-let) (set! G2cc2@G2c01@build-case-lambda G2c01@build-case-lambda) (set! G2cc1@G2bff@build-lambda G2bff@build-lambda) (set! G2cc0@G2b85@build-global-define G2b85@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cd8@set-cons G2cda@set-union G2cdf@top-mark* G2ce1@top-marked? G2ce3@gen-lexical G2ce5@gen-global G2ce7@gen-label G2ce9@gen-top-level-label G2ceb@gen-define-label+loc G2ced@gen-define-label G2cf3@G2cee G2cf5@G2cf0 G2cf7@G2cef G2cfa@rib? G2cfc@make-rib G2cfe@rib-sym* G2d00@rib-mark** G2d02@rib-label* G2d04@rib-sealed/freq G2d06@rib-cache G2d08@set-rib-sym*! G2d0a@set-rib-mark**! G2d0c@set-rib-label*! G2d0e@set-rib-sealed/freq! G2d10@set-rib-cache! G2d12@make-empty-rib G2d14@make-cache-rib G2d16@find-label G2d18@extend-rib! G2d1a@extend-rib/nc! G2d1c@make-rib-map G2d1e@seal-rib! G2d20@unseal-rib! G2d22@make-full-rib G2d28@G2d23 G2d2a@G2d25 G2d2c@G2d24 G2d2f@stx? G2d31@make-stx G2d33@stx-expr G2d35@stx-mark* G2d37@stx-subst* G2d39@stx-ae* G2d3b@set-stx-expr! G2d3d@set-stx-mark*! G2d3f@set-stx-subst*! G2d41@set-stx-ae*! G2d43@rp G2d45@datum->stx G2d47@gen-mark G2d49@anti-mark G2d4b@anti-mark? G2d4d@join-wraps G2d4f@mkstx G2d51@add-mark G2d53@add-subst G2d55@syntax-kind? G2d57@syntax-vector->list G2d59@syntax-pair? G2d5b@syntax-vector? G2d5d@syntax-null? G2d5f@syntax-list? G2d61@syntax-car G2d63@syntax-cdr G2d65@syntax->list G2d67@id? G2d69@id->sym G2d6b@same-marks? G2d6d@bound-id=? G2d6f@free-id=? G2d71@valid-bound-ids? G2d73@distinct-bound-ids? G2d75@bound-id-member? G2d77@self-evaluating? G2d79@strip-annotations G2d7b@strip G2d7d@stx->datum G2d7f@same-marks*? G2d81@id->label G2d83@id->real-label G2d85@label->binding G2d87@make-binding G2d89@binding-type G2d8b@binding-value G2d8d@raise-unbound-error G2d8f@syntax-type G2d9f@sanitize-binding G2da1@make-variable-transformer G2da3@variable-transformer? G2da5@variable-transformer-procedure G2da7@make-eval-transformer G2eea@parse-define G2eec@parse-define-syntax G2eee@scheme-stx-hashtable G2ef0@scheme-stx G2ef2@lexical-var G2ef4@lexical-mutable? G2ef6@set-lexical-mutable! G2ef8@add-lexical G2efa@add-lexicals G2efc@letrec-helper G2efe@letrec-transformer G2f00@letrec*-transformer G2f02@fluid-let-syntax-transformer G2f04@type-descriptor-transformer G2f06@record-type-descriptor-transformer G2f08@record-constructor-descriptor-transformer G2f0a@when-macro G2f0c@unless-macro G2f0e@if-transformer G2f10@and-transformer G2f12@or-transformer G2f14@case-macro G2f16@quote-transformer G2f18@case-lambda-transformer G2f1a@lambda-transformer G2f1c@bless G2f1e@with-syntax-macro G2f20@invalid-fmls-error G2f22@let-macro G2f24@let-values-macro G2f26@let*-values-macro G2f28@trace-lambda-macro G2f2a@trace-define-macro G2f2c@trace-define-syntax-macro G2f2e@trace-let/rec-syntax G2f30@trace-let-syntax-macro G2f32@trace-letrec-syntax-macro G2f34@guard-macro G2f36@define-enumeration-macro G2f38@time-macro G2f3a@delay-macro G2f3c@assert-macro G2f3e@endianness-macro G2f40@identifier-syntax-macro G2f42@do-macro G2f44@let*-macro G2f46@or-macro G2f48@and-macro G2f4a@cond-macro G2f4c@do-include G2f4e@include-macro G2f50@include-into-macro G2f52@syntax-rules-macro G2f54@quasiquote-macro G2f56@quasisyntax-macro G2f58@define-struct-macro G2f5a@define-record-type-macro G2f5c@define-condition-type-macro G2f5e@incorrect-usage-macro G2f60@parameterize-macro G2f62@foreign-call-transformer G2f64@convert-pattern G2f66@syntax-dispatch G2f68@ellipsis? G2f6a@underscore? G2f6c@verify-literals G2f6e@syntax-case-transformer G2f70@ellipsis-map G2f72@syntax-transformer G2f74@core-macro-transformer G2f76@file-options-macro G2f78@symbol-macro G2f7a@macro-transformer G2f7c@local-macro-transformer G2f7e@do-macro-call G2f80@chi-macro G2f82@chi-local-macro G2f84@chi-global-macro G2f86@chi-expr* G2f88@chi-application G2f8a@chi-expr G2f8c@chi-set! G2f8e@verify-formals G2f90@chi-lambda-clause G2f92@chi-lambda-clause* G2f94@chi-defun G2f96@chi-rhs G2f98@expand-interaction-rhs*/init* G2f9a@chi-rhs* G2f9c@find-bound=? G2f9e@find-dups G2fa0@chi-internal G2fa2@parse-module G2fa8@G2fa3 G2faa@G2fa5 G2fac@G2fa4 G2faf@module-interface? G2fb1@make-module-interface G2fb3@module-interface-first-mark G2fb5@module-interface-exp-id-vec G2fb7@module-interface-exp-lab-vec G2fb9@set-module-interface-first-mark! G2fbb@set-module-interface-exp-id-vec! G2fbd@set-module-interface-exp-lab-vec! G2fbf@module-interface-exp-id* G2fc1@chi-internal-module G2fc3@chi-body* G2fc5@expand-transformer G2fc7@parse-exports G2fc9@parse-library-name G2fcb@parse-library G2fcd@parse-import-spec* G2fcf@make-top-rib G2fd1@make-collector G2fd3@inv-collector G2fd5@vis-collector G2fd7@imp-collector G2fd9@chi-library-internal G2fdb@chi-interaction-expr G2fdd@library-body-expander G2fdf@core-library-expander G2fe1@parse-top-level-program G2fe3@top-level-expander G2fe9@G2fe4 G2feb@G2fe6 G2fed@G2fe5 G2ff0@env? G2ff2@make-env G2ff4@env-names G2ff6@env-labels G2ff8@env-itc G2ffa@set-env-names! G2ffc@set-env-labels! G2ffe@set-env-itc! G3000@rp G3006@G3001 G3008@G3003 G300a@G3002 G300d@interaction-env? G300f@make-interaction-env G3011@interaction-env-rib G3013@interaction-env-r G3015@interaction-env-locs G3017@set-interaction-env-rib! G3019@set-interaction-env-r! G301b@set-interaction-env-locs! G301d@rp G301f@interaction-environment-symbols G3021@environment-bindings G3023@parse-binding G3025@environment? G3027@environment-symbols G3029@environment G302b@null-environment G302d@scheme-report-environment G302f@expand G3031@eval G3033@library-expander G3035@boot-library-expand G3037@rev-map-append G3039@build-exports G303b@make-export-subst G303d@make-export-env/macros G303f@generate-temporaries G3041@free-identifier=? G3043@bound-identifier=? G3045@make-source-condition G3047@extract-position-condition G3049@expression-position G304b@assertion-error G304d@syntax-error G304f@extract-trace G3051@syntax-violation* G3053@syntax-violation G3055@identifier? G3057@datum->syntax G3059@syntax->datum G305b@compile-r6rs-top-level G305d@pre-compile-r6rs-top-level G305f@interaction-environment G3061@top-level-context) (begin (set! G2cd8@set-cons (lambda (G3062@x G3063@ls) (if (memq G3062@x G3063@ls) G3063@ls (cons G3062@x G3063@ls)))) (set! G2cda@set-union (lambda (G3066@ls1 G3067@ls2) (if (null? G3066@ls1) G3067@ls2 (if (memq (car G3066@ls1) G3067@ls2) (G2cda@set-union (cdr G3066@ls1) G3067@ls2) (cons (car G3066@ls1) (G2cda@set-union (cdr G3066@ls1) G3067@ls2)))))) (set! G2cdf@top-mark* '(top)) (set! G2ce1@top-marked? (lambda (G306a@m*) (memq 'top G306a@m*))) (set! G2ce3@gen-lexical (lambda (G306c@sym) (if (symbol? G306c@sym) (gensym G306c@sym) (if (G2d2f@stx? G306c@sym) (G2ce3@gen-lexical (G2d69@id->sym G306c@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G306c@sym))))) (set! G2ce5@gen-global (lambda (G306e@x) (G2ce3@gen-lexical G306e@x))) (set! G2ce7@gen-label (lambda (G3070@_) (gensym))) (set! G2ce9@gen-top-level-label (lambda (G3072@id G3073@rib) ((lambda (G3077@find) (begin (set! G3077@find (lambda (G3082@sym G3083@mark* G3084@sym* G3085@mark** G3086@label*) (and (pair? G3084@sym*) (if (and (eq? G3082@sym (car G3084@sym*)) (G2d6b@same-marks? G3083@mark* (car G3085@mark**))) (car G3086@label*) (G3077@find G3082@sym G3083@mark* (cdr G3084@sym*) (cdr G3085@mark**) (cdr G3086@label*)))))) ((lambda (G3078@sym G3079@mark*) ((lambda (G307c@sym*) ((lambda (G307e@t) (if G307e@t ((lambda (G3080@label) (if (G2b7d@G2a23@imported-label->binding G3080@label) (gensym) G3080@label)) G307e@t) (gensym))) (and (memq G3078@sym (G2cfe@rib-sym* G3073@rib)) (G3077@find G3078@sym G3079@mark* G307c@sym* (G2d00@rib-mark** G3073@rib) (G2d02@rib-label* G3073@rib))))) (G2cfe@rib-sym* G3073@rib))) (G2d69@id->sym G3072@id) (G2d35@stx-mark* G3072@id)))) '#f))) (set! G2ceb@gen-define-label+loc (lambda (G308c@id G308d@rib) ((lambda (G3090@t) (if G3090@t ((lambda (G3092@env) ((lambda (G3094@label G3095@locs) (values G3094@label ((lambda (G3098@t) (if G3098@t (cdr G3098@t) ((lambda (G309a@loc) (begin (G301b@set-interaction-env-locs! G3092@env (cons (cons G3094@label G309a@loc) G3095@locs)) G309a@loc)) (G2ce3@gen-lexical G308c@id)))) (assq G3094@label G3095@locs)))) (G2ce9@gen-top-level-label G308c@id G308d@rib) (G3015@interaction-env-locs G3092@env))) G3090@t) (values (gensym) (G2ce3@gen-lexical G308c@id)))) (G3061@top-level-context)))) (set! G2ced@gen-define-label (lambda (G309c@id G309d@rib) (if (G3061@top-level-context) (G2ce9@gen-top-level-label G309c@id G309d@rib) (gensym)))) (set! G2cf3@G2cee (make-record-type-descriptor 'rib '#f 'G2cf1 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cf5@G2cf0 '#f) (set! G2cf7@G2cef (make-record-constructor-descriptor G2cf3@G2cee '#f G2cf5@G2cf0)) (set! G2cfa@rib? (record-predicate G2cf3@G2cee)) (set! G2cfc@make-rib (record-constructor G2cf7@G2cef)) (set! G2cfe@rib-sym* (record-accessor G2cf3@G2cee '0)) (set! G2d00@rib-mark** (record-accessor G2cf3@G2cee '1)) (set! G2d02@rib-label* (record-accessor G2cf3@G2cee '2)) (set! G2d04@rib-sealed/freq (record-accessor G2cf3@G2cee '3)) (set! G2d06@rib-cache (record-accessor G2cf3@G2cee '4)) (set! G2d08@set-rib-sym*! (record-mutator G2cf3@G2cee '0)) (set! G2d0a@set-rib-mark**! (record-mutator G2cf3@G2cee '1)) (set! G2d0c@set-rib-label*! (record-mutator G2cf3@G2cee '2)) (set! G2d0e@set-rib-sealed/freq! (record-mutator G2cf3@G2cee '3)) (set! G2d10@set-rib-cache! (record-mutator G2cf3@G2cee '4)) (set! G2d12@make-empty-rib (lambda () (G2cfc@make-rib '() '() '() '#f '#f))) (set! G2d14@make-cache-rib (lambda () (G2cfc@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d16@find-label (lambda (G30a0@rib G30a1@sym G30a2@mark*) ((lambda (G30a6@ht) (and G30a6@ht ((lambda (G30a8@cv) ((lambda (G30aa@t) (if G30aa@t (cdr G30aa@t) '#f)) (and G30a8@cv (assp (lambda (G30ac@m) (G2d6b@same-marks? G30a2@mark* G30ac@m)) G30a8@cv)))) (hashtable-ref G30a6@ht G30a1@sym '#f)))) (G2d06@rib-cache G30a0@rib)))) (set! G2d18@extend-rib! (lambda (G30ae@rib G30af@id G30b0@label) ((lambda (G30b5@find) (begin (set! G30b5@find (lambda (G30c6@sym G30c7@mark* G30c8@sym* G30c9@mark** G30ca@label*) (and (pair? G30c8@sym*) (if (and (eq? G30c6@sym (car G30c8@sym*)) (G2d6b@same-marks? G30c7@mark* (car G30c9@mark**))) G30ca@label* (G30b5@find G30c6@sym G30c7@mark* (cdr G30c8@sym*) (cdr G30c9@mark**) (cdr G30ca@label*)))))) (begin (if (G2d04@rib-sealed/freq G30ae@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30ae@rib) (void)) ((lambda (G30b6@sym G30b7@mark*) ((lambda (G30ba@sym*) ((lambda (G30bc@t) (if G30bc@t ((lambda (G30be@p) (if (not (eq? G30b0@label G30be@p)) (G3053@syntax-violation '#f '"multiple definitions of identifier" G30af@id) (void))) G30bc@t) ((lambda (G30c0@t) (if G30c0@t ((lambda (G30c2@p) (if (not (eq? G30b0@label (car G30c2@p))) (if (G3061@top-level-context) (set-car! G30c2@p G30b0@label) (G3053@syntax-violation '#f '"multiple definitions of identifier" G30af@id)) (void))) G30c0@t) (begin (if (G2d06@rib-cache G30ae@rib) (hashtable-update! (G2d06@rib-cache G30ae@rib) G30b6@sym (lambda (G30c4@e) (cons (cons G30b7@mark* G30b0@label) G30c4@e)) '()) (void)) (G2d08@set-rib-sym*! G30ae@rib (cons G30b6@sym G30ba@sym*)) (G2d0a@set-rib-mark**! G30ae@rib (cons G30b7@mark* (G2d00@rib-mark** G30ae@rib))) (G2d0c@set-rib-label*! G30ae@rib (cons G30b0@label (G2d02@rib-label* G30ae@rib)))))) (and (memq G30b6@sym (G2cfe@rib-sym* G30ae@rib)) (G30b5@find G30b6@sym G30b7@mark* G30ba@sym* (G2d00@rib-mark** G30ae@rib) (G2d02@rib-label* G30ae@rib)))))) (G2d16@find-label G30ae@rib G30b6@sym G30b7@mark*))) (G2cfe@rib-sym* G30ae@rib))) (G2d69@id->sym G30af@id) (G2d35@stx-mark* G30af@id))))) '#f))) (set! G2d1a@extend-rib/nc! (lambda (G30d0@rib G30d1@id G30d2@label) ((lambda (G30d6@sym G30d7@mark*) ((lambda (G30da@sym*) (begin (if (G2d06@rib-cache G30d0@rib) (hashtable-update! (G2d06@rib-cache G30d0@rib) G30d6@sym (lambda (G30dc@e) (cons (cons G30d7@mark* G30d2@label) G30dc@e)) '()) (void)) (G2d08@set-rib-sym*! G30d0@rib (cons G30d6@sym G30da@sym*)) (G2d0a@set-rib-mark**! G30d0@rib (cons G30d7@mark* (G2d00@rib-mark** G30d0@rib))) (G2d0c@set-rib-label*! G30d0@rib (cons G30d2@label (G2d02@rib-label* G30d0@rib))))) (G2cfe@rib-sym* G30d0@rib))) (G2d69@id->sym G30d1@id) (G2d35@stx-mark* G30d1@id)))) (set! G2d1c@make-rib-map (lambda (G30de@sym*) ((lambda (G30e0@ht) ((letrec ((G30e2@f (lambda (G30e4@i G30e5@sym*) (if (null? G30e5@sym*) G30e0@ht (begin (hashtable-update! G30e0@ht (car G30e5@sym*) (lambda (G30e8@x) (cons G30e4@i G30e8@x)) '()) (G30e2@f (+ G30e4@i '1) (cdr G30e5@sym*))))))) G30e2@f) '0 G30de@sym*)) (make-eq-hashtable)))) (set! G2d1e@seal-rib! (lambda (G30ea@rib) ((lambda (G30ec@sym*) (if (not (null? G30ec@sym*)) (begin (G2d08@set-rib-sym*! G30ea@rib (list->vector G30ec@sym*)) (G2d0a@set-rib-mark**! G30ea@rib (list->vector (G2d00@rib-mark** G30ea@rib))) (G2d0c@set-rib-label*! G30ea@rib (list->vector (G2d02@rib-label* G30ea@rib))) (G2d0e@set-rib-sealed/freq! G30ea@rib (G2d1c@make-rib-map G30ec@sym*))) (void))) (G2cfe@rib-sym* G30ea@rib)))) (set! G2d20@unseal-rib! (lambda (G30ee@rib) (if (G2d04@rib-sealed/freq G30ee@rib) (begin (G2d0e@set-rib-sealed/freq! G30ee@rib '#f) (G2d08@set-rib-sym*! G30ee@rib (vector->list (G2cfe@rib-sym* G30ee@rib))) (G2d0a@set-rib-mark**! G30ee@rib (vector->list (G2d00@rib-mark** G30ee@rib))) (G2d0c@set-rib-label*! G30ee@rib (vector->list (G2d02@rib-label* G30ee@rib)))) (void)))) (set! G2d22@make-full-rib (lambda (G30f0@id* G30f1@label*) ((lambda (G30f4@r) (begin (G2d1e@seal-rib! G30f4@r) G30f4@r)) (G2cfc@make-rib (map G2d69@id->sym G30f0@id*) (map G2d35@stx-mark* G30f0@id*) G30f1@label* '#f '#f)))) (set! G2d28@G2d23 (make-record-type-descriptor 'stx '#f 'G2d26 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d2a@G2d25 '#f) (set! G2d2c@G2d24 (make-record-constructor-descriptor G2d28@G2d23 '#f G2d2a@G2d25)) (set! G2d2f@stx? (record-predicate G2d28@G2d23)) (set! G2d31@make-stx (record-constructor G2d2c@G2d24)) (set! G2d33@stx-expr (record-accessor G2d28@G2d23 '0)) (set! G2d35@stx-mark* (record-accessor G2d28@G2d23 '1)) (set! G2d37@stx-subst* (record-accessor G2d28@G2d23 '2)) (set! G2d39@stx-ae* (record-accessor G2d28@G2d23 '3)) (set! G2d3b@set-stx-expr! (record-mutator G2d28@G2d23 '0)) (set! G2d3d@set-stx-mark*! (record-mutator G2d28@G2d23 '1)) (set! G2d3f@set-stx-subst*! (record-mutator G2d28@G2d23 '2)) (set! G2d41@set-stx-ae*! (record-mutator G2d28@G2d23 '3)) (set! G2d43@rp (G2900@G2836@make-record-printer 'stx (lambda (G30f6@x G30f7@p G30f8@wr) (begin (display '"#<syntax " G30f7@p) (write (G2d7d@stx->datum G30f6@x) G30f7@p) ((lambda (G30fc@expr) (if (G28f8@G2826@annotation? G30fc@expr) ((lambda (G30fe@src) (if (pair? G30fe@src) (begin (display '" [" G30f7@p) (display (cdr G30fe@src) G30f7@p) (display '" of " G30f7@p) (display (car G30fe@src) G30f7@p) (display '"]" G30f7@p)) (void))) (G28f9@G2828@annotation-source G30fc@expr)) (void))) (G2d33@stx-expr G30f6@x)) (display '">" G30f7@p))))) (set! G2d45@datum->stx (lambda (G3100@id G3101@datum) (G2d31@make-stx G3101@datum (G2d35@stx-mark* G3100@id) (G2d37@stx-subst* G3100@id) (G2d39@stx-ae* G3100@id)))) (set! G2d47@gen-mark (lambda () (string '#\m))) (set! G2d49@anti-mark '#f) (set! G2d4b@anti-mark? not) (set! G2d4d@join-wraps (lambda (G3104@m1* G3105@s1* G3106@ae1* G3107@e) ((lambda (G310d@cancel) (begin (set! G310d@cancel (lambda (G3114@ls1 G3115@ls2) ((letrec ((G3118@f (lambda (G311a@x G311b@ls1) (if (null? G311b@ls1) (cdr G3115@ls2) (cons G311a@x (G3118@f (car G311b@ls1) (cdr G311b@ls1))))))) G3118@f) (car G3114@ls1) (cdr G3114@ls1)))) ((lambda (G310e@m2* G310f@s2* G3110@ae2*) (if (and (not (null? G3104@m1*)) (not (null? G310e@m2*)) (G2d4b@anti-mark? (car G310e@m2*))) (values (G310d@cancel G3104@m1* G310e@m2*) (G310d@cancel G3105@s1* G310f@s2*) (G310d@cancel G3106@ae1* G3110@ae2*)) (values (append G3104@m1* G310e@m2*) (append G3105@s1* G310f@s2*) (append G3106@ae1* G3110@ae2*)))) (G2d35@stx-mark* G3107@e) (G2d37@stx-subst* G3107@e) (G2d39@stx-ae* G3107@e)))) '#f))) (set! G2d4f@mkstx (lambda (G311e@e G311f@m* G3120@s* G3121@ae*) (if (and (G2d2f@stx? G311e@e) (not (G2ce1@top-marked? G311f@m*))) (call-with-values (lambda () (G2d4d@join-wraps G311f@m* G3120@s* G3121@ae* G311e@e)) (lambda (G3129@G3126 G312a@G3127 G312b@G3128) ((lambda (G312f@ae* G3130@s* G3131@m*) (G2d31@make-stx (G2d33@stx-expr G311e@e) G3131@m* G3130@s* G312f@ae*)) G312b@G3128 G312a@G3127 G3129@G3126))) (G2d31@make-stx G311e@e G311f@m* G3120@s* G3121@ae*)))) (set! G2d51@add-mark (lambda (G3135@m G3136@e G3137@ae) (G2d4f@mkstx G3136@e (list G3135@m) '(shift) (list G3137@ae)))) (set! G2d53@add-subst (lambda (G313b@subst G313c@e) (G2d4f@mkstx G313c@e '() (list G313b@subst) '()))) (set! G2d55@syntax-kind? (lambda (G313f@x G3140@p?) (if (G2d2f@stx? G313f@x) (G2d55@syntax-kind? (G2d33@stx-expr G313f@x) G3140@p?) (if (G28f8@G2826@annotation? G313f@x) (G2d55@syntax-kind? (G28fa@G282a@annotation-expression G313f@x) G3140@p?) (G3140@p? G313f@x))))) (set! G2d57@syntax-vector->list (lambda (G3143@x) (if (G2d2f@stx? G3143@x) ((lambda (G3145@ls G3146@m* G3147@s* G3148@ae*) (map (lambda (G314d@x) (G2d4f@mkstx G314d@x G3146@m* G3147@s* G3148@ae*)) G3145@ls)) (G2d57@syntax-vector->list (G2d33@stx-expr G3143@x)) (G2d35@stx-mark* G3143@x) (G2d37@stx-subst* G3143@x) (G2d39@stx-ae* G3143@x)) (if (G28f8@G2826@annotation? G3143@x) (G2d57@syntax-vector->list (G28fa@G282a@annotation-expression G3143@x)) (if (vector? G3143@x) (vector->list G3143@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3143@x)))))) (set! G2d59@syntax-pair? (lambda (G314f@x) (G2d55@syntax-kind? G314f@x pair?))) (set! G2d5b@syntax-vector? (lambda (G3151@x) (G2d55@syntax-kind? G3151@x vector?))) (set! G2d5d@syntax-null? (lambda (G3153@x) (G2d55@syntax-kind? G3153@x null?))) (set! G2d5f@syntax-list? (lambda (G3155@x) (or (G2d5d@syntax-null? G3155@x) (and (G2d59@syntax-pair? G3155@x) (G2d5f@syntax-list? (G2d63@syntax-cdr G3155@x)))))) (set! G2d61@syntax-car (lambda (G3157@x) (if (G2d2f@stx? G3157@x) (G2d4f@mkstx (G2d61@syntax-car (G2d33@stx-expr G3157@x)) (G2d35@stx-mark* G3157@x) (G2d37@stx-subst* G3157@x) (G2d39@stx-ae* G3157@x)) (if (G28f8@G2826@annotation? G3157@x) (G2d61@syntax-car (G28fa@G282a@annotation-expression G3157@x)) (if (pair? G3157@x) (car G3157@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3157@x)))))) (set! G2d63@syntax-cdr (lambda (G3159@x) (if (G2d2f@stx? G3159@x) (G2d4f@mkstx (G2d63@syntax-cdr (G2d33@stx-expr G3159@x)) (G2d35@stx-mark* G3159@x) (G2d37@stx-subst* G3159@x) (G2d39@stx-ae* G3159@x)) (if (G28f8@G2826@annotation? G3159@x) (G2d63@syntax-cdr (G28fa@G282a@annotation-expression G3159@x)) (if (pair? G3159@x) (cdr G3159@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3159@x)))))) (set! G2d65@syntax->list (lambda (G315b@x) (if (G2d59@syntax-pair? G315b@x) (cons (G2d61@syntax-car G315b@x) (G2d65@syntax->list (G2d63@syntax-cdr G315b@x))) (if (G2d5d@syntax-null? G315b@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G315b@x))))) (set! G2d67@id? (lambda (G315d@x) (and (G2d2f@stx? G315d@x) ((lambda (G315f@expr) (symbol? (if (G28f8@G2826@annotation? G315f@expr) (G28f7@G2824@annotation-stripped G315f@expr) G315f@expr))) (G2d33@stx-expr G315d@x))))) (set! G2d69@id->sym (lambda (G3161@x) (begin (if (not (G2d2f@stx? G3161@x)) (error 'id->sym '"BUG in ikarus: not an id" G3161@x) (void)) ((lambda (G3163@expr) ((lambda (G3165@sym) (if (symbol? G3165@sym) G3165@sym (error 'id->sym '"BUG in ikarus: not an id" G3161@x))) (if (G28f8@G2826@annotation? G3163@expr) (G28f7@G2824@annotation-stripped G3163@expr) G3163@expr))) (G2d33@stx-expr G3161@x))))) (set! G2d6b@same-marks? (lambda (G3167@x G3168@y) (or (and (null? G3167@x) (null? G3168@y)) (and (pair? G3167@x) (pair? G3168@y) (eq? (car G3167@x) (car G3168@y)) (G2d6b@same-marks? (cdr G3167@x) (cdr G3168@y)))))) (set! G2d6d@bound-id=? (lambda (G316b@x G316c@y) (and (eq? (G2d69@id->sym G316b@x) (G2d69@id->sym G316c@y)) (G2d6b@same-marks? (G2d35@stx-mark* G316b@x) (G2d35@stx-mark* G316c@y))))) (set! G2d6f@free-id=? (lambda (G316f@i G3170@j) ((lambda (G3173@t0 G3174@t1) (if (or G3173@t0 G3174@t1) (eq? G3173@t0 G3174@t1) (eq? (G2d69@id->sym G316f@i) (G2d69@id->sym G3170@j)))) (G2d83@id->real-label G316f@i) (G2d83@id->real-label G3170@j)))) (set! G2d71@valid-bound-ids? (lambda (G3177@id*) (and (for-all G2d67@id? G3177@id*) (G2d73@distinct-bound-ids? G3177@id*)))) (set! G2d73@distinct-bound-ids? (lambda (G3179@id*) (or (null? G3179@id*) (and (not (G2d75@bound-id-member? (car G3179@id*) (cdr G3179@id*))) (G2d73@distinct-bound-ids? (cdr G3179@id*)))))) (set! G2d75@bound-id-member? (lambda (G317b@id G317c@id*) (and (pair? G317c@id*) (or (G2d6d@bound-id=? G317b@id (car G317c@id*)) (G2d75@bound-id-member? G317b@id (cdr G317c@id*)))))) (set! G2d77@self-evaluating? (lambda (G317f@x) (or (number? G317f@x) (string? G317f@x) (char? G317f@x) (boolean? G317f@x) (regexp? G317f@x) (bytevector? G317f@x)))) (set! G2d79@strip-annotations (lambda (G3181@x) (if (pair? G3181@x) (cons (G2d79@strip-annotations (car G3181@x)) (G2d79@strip-annotations (cdr G3181@x))) (if (vector? G3181@x) (vector-map G2d79@strip-annotations G3181@x) (if (G28f8@G2826@annotation? G3181@x) (G28f7@G2824@annotation-stripped G3181@x) G3181@x))))) (set! G2d7b@strip (lambda (G3183@x G3184@m*) (if (G2ce1@top-marked? G3184@m*) (if (or (G28f8@G2826@annotation? G3183@x) (and (pair? G3183@x) (G28f8@G2826@annotation? (car G3183@x))) (and (vector? G3183@x) (> (vector-length G3183@x) '0) (G28f8@G2826@annotation? (vector-ref G3183@x '0)))) (G2d79@strip-annotations G3183@x) G3183@x) ((letrec ((G3187@f (lambda (G3189@x) (if (G2d2f@stx? G3189@x) (G2d7b@strip (G2d33@stx-expr G3189@x) (G2d35@stx-mark* G3189@x)) (if (G28f8@G2826@annotation? G3189@x) (G28f7@G2824@annotation-stripped G3189@x) (if (pair? G3189@x) ((lambda (G318b@a G318c@d) (if (and (eq? G318b@a (car G3189@x)) (eq? G318c@d (cdr G3189@x))) G3189@x (cons G318b@a G318c@d))) (G3187@f (car G3189@x)) (G3187@f (cdr G3189@x))) (if (vector? G3189@x) ((lambda (G318f@old) ((lambda (G3191@new) (if (for-all eq? G318f@old G3191@new) G3189@x (list->vector G3191@new))) (map G3187@f G318f@old))) (vector->list G3189@x)) G3189@x))))))) G3187@f) G3183@x)))) (set! G2d7d@stx->datum (lambda (G3193@x) (G2d7b@strip G3193@x '()))) (set! G2d7f@same-marks*? (lambda (G3195@mark* G3196@mark** G3197@si) (if (null? G3197@si) '#f (if (G2d6b@same-marks? G3195@mark* (vector-ref G3196@mark** (car G3197@si))) (car G3197@si) (G2d7f@same-marks*? G3195@mark* G3196@mark** (cdr G3197@si)))))) (set! G2d81@id->label (lambda (G319b@id) (or (G2d83@id->real-label G319b@id) ((lambda (G319d@t) (if G319d@t ((lambda (G319f@env) ((lambda (G31a1@rib) (call-with-values (lambda () (G2ceb@gen-define-label+loc G319b@id G31a1@rib)) (lambda (G31a5@G31a3 G31a6@G31a4) ((lambda (G31a9@loc_ G31aa@lab) (begin (G2d18@extend-rib! G31a1@rib G319b@id G31aa@lab) G31aa@lab)) G31a6@G31a4 G31a5@G31a3)))) (G3011@interaction-env-rib G319f@env))) G319d@t) '#f)) (G3061@top-level-context))))) (set! G2d83@id->real-label (lambda (G31ad@id) ((lambda (G31af@sym) ((letrec ((G31b1@search (lambda (G31b3@subst* G31b4@mark*) (if (null? G31b3@subst*) '#f (if (eq? (car G31b3@subst*) 'shift) (G31b1@search (cdr G31b3@subst*) (cdr G31b4@mark*)) ((lambda (G31b7@rib) ((lambda (G31b9@t) (if G31b9@t ((lambda (G31bb@ht) ((lambda (G31bd@si) ((lambda (G31bf@i) (if G31bf@i (vector-ref (G2d02@rib-label* G31b7@rib) G31bf@i) (G31b1@search (cdr G31b3@subst*) G31b4@mark*))) (and G31bd@si (G2d7f@same-marks*? G31b4@mark* (G2d00@rib-mark** G31b7@rib) (reverse G31bd@si))))) (hashtable-ref G31bb@ht G31af@sym '#f))) G31b9@t) (or (G2d16@find-label G31b7@rib G31af@sym G31b4@mark*) ((letrec ((G31c1@f (lambda (G31c3@sym* G31c4@mark** G31c5@label*) (if (null? G31c3@sym*) (G31b1@search (cdr G31b3@subst*) G31b4@mark*) (if (and (eq? (car G31c3@sym*) G31af@sym) (G2d6b@same-marks? (car G31c4@mark**) G31b4@mark*)) (car G31c5@label*) (G31c1@f (cdr G31c3@sym*) (cdr G31c4@mark**) (cdr G31c5@label*))))))) G31c1@f) (G2cfe@rib-sym* G31b7@rib) (G2d00@rib-mark** G31b7@rib) (G2d02@rib-label* G31b7@rib))))) (G2d04@rib-sealed/freq G31b7@rib))) (car G31b3@subst*))))))) G31b1@search) (G2d37@stx-subst* G31ad@id) (G2d35@stx-mark* G31ad@id))) (G2d69@id->sym G31ad@id)))) (set! G2d85@label->binding (lambda (G31c9@x G31ca@r) ((lambda (G31cd@t) (if G31cd@t ((lambda (G31cf@b) (if (and (pair? G31cf@b) (eq? (car G31cf@b) '$core-rtd)) (cons '$rtd (map G2f1c@bless (cdr G31cf@b))) (if (and (pair? G31cf@b) (eq? (car G31cf@b) 'global-rtd)) ((lambda (G31d1@lib G31d2@loc) (cons '$rtd (symbol-value G31d2@loc))) (cadr G31cf@b) (cddr G31cf@b)) G31cf@b))) G31cd@t) ((lambda (G31d5@t) (if G31d5@t (cdr G31d5@t) ((lambda (G31d7@t) (if G31d7@t ((lambda (G31d9@env) ((lambda (G31db@t) (if G31db@t ((lambda (G31dd@p) (cons* 'lexical (cdr G31dd@p) '#f)) G31db@t) '(displaced-lexical . #f))) (assq G31c9@x (G3015@interaction-env-locs G31d9@env)))) G31d7@t) '(displaced-lexical . #f))) (G3061@top-level-context)))) (assq G31c9@x G31ca@r)))) (G2b7d@G2a23@imported-label->binding G31c9@x)))) (set! G2d87@make-binding cons) (set! G2d89@binding-type car) (set! G2d8b@binding-value cdr) (set! G2d8d@raise-unbound-error (lambda (G31df@id) (G3051@syntax-violation* '#f '"unbound identifier" G31df@id (G4ca7@G4af1@make-undefined-violation)))) (set! G2d8f@syntax-type (lambda (G31e1@e G31e2@r) (if (G2d67@id? G31e1@e) ((lambda (G31e5@id) ((lambda (G31e7@label) ((lambda (G31e9@b) ((lambda (G31eb@type) ((lambda () (begin (if (not G31e7@label) (G2d8d@raise-unbound-error G31e5@id) (void)) ((lambda (G31ed@t) (if (memv G31ed@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31eb@type (G2d8b@binding-value G31e9@b) G31e5@id) (values 'other '#f '#f))) G31eb@type))))) (G2d89@binding-type G31e9@b))) (G2d85@label->binding G31e7@label G31e2@r))) (G2d81@id->label G31e5@id))) G31e1@e) (if (G2d59@syntax-pair? G31e1@e) ((lambda (G31ef@id) (if (G2d67@id? G31ef@id) ((lambda (G31f1@label) ((lambda (G31f3@b) ((lambda (G31f5@type) ((lambda () (begin (if (not G31f1@label) (G2d8d@raise-unbound-error G31ef@id) (void)) ((lambda (G31f7@t) (if (memv G31f7@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31f5@type (G2d8b@binding-value G31f3@b) G31ef@id) (values 'call '#f '#f))) G31f5@type))))) (G2d89@binding-type G31f3@b))) (G2d85@label->binding G31f1@label G31e2@r))) (G2d81@id->label G31ef@id)) (values 'call '#f '#f))) (G2d61@syntax-car G31e1@e)) ((lambda (G31f9@d) (if (G2d77@self-evaluating? G31f9@d) (values 'constant G31f9@d '#f) (values 'other '#f '#f))) (G2d7d@stx->datum G31e1@e)))))) (set! G2d9f@sanitize-binding (lambda (G31fb@x G31fc@src) (if (procedure? G31fb@x) (cons* 'local-macro G31fb@x G31fc@src) (if (and (pair? G31fb@x) (eq? (car G31fb@x) 'macro!) (procedure? (cdr G31fb@x))) (cons* 'local-macro! (cdr G31fb@x) G31fc@src) (if (and (pair? G31fb@x) (eq? (car G31fb@x) '$rtd)) G31fb@x (assertion-violation 'expand '"invalid transformer" G31fb@x)))))) (set! G2da1@make-variable-transformer (lambda (G31ff@x) (if (procedure? G31ff@x) (cons 'macro! G31ff@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31ff@x)))) (set! G2da3@variable-transformer? (lambda (G3201@x) (and (pair? G3201@x) (eq? (car G3201@x) 'macro!) (procedure? (cdr G3201@x))))) (set! G2da5@variable-transformer-procedure (lambda (G3203@x) (if (G2da3@variable-transformer? G3203@x) (cdr G3203@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G3203@x)))) (set! G2da7@make-eval-transformer (lambda (G3205@x) (G2d9f@sanitize-binding (eval-core (G2957@G290f@expanded->core G3205@x)) G3205@x))) (set! G2eea@parse-define (lambda (G3207@x) ((lambda (G3209@t) ((lambda (G320b@ls/false) (if (and G320b@ls/false (apply (lambda (G320d@id G320e@fmls G320f@b G3210@b*) (G2d67@id? G320d@id)) G320b@ls/false)) (apply (lambda (G3215@id G3216@fmls G3217@b G3218@b*) (begin (G2f8e@verify-formals G3216@fmls G3207@x) (values G3215@id (cons 'defun (cons G3216@fmls (cons G3217@b G3218@b*)))))) G320b@ls/false) ((lambda (G321d@t) ((lambda (G321f@ls/false) (if (and G321f@ls/false (apply (lambda (G3221@id G3222@val) (G2d67@id? G3221@id)) G321f@ls/false)) (apply (lambda (G3225@id G3226@val) (values G3225@id (cons 'expr G3226@val))) G321f@ls/false) ((lambda (G3229@t) ((lambda (G322b@ls/false) (if (and G322b@ls/false (apply (lambda (G322d@id) (G2d67@id? G322d@id)) G322b@ls/false)) (apply (lambda (G322f@id) (values G322f@id (cons 'expr (G2f1c@bless '(void))))) G322b@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3229@t))) (G2f66@syntax-dispatch G3229@t '(_ any)))) G321d@t))) (G2f66@syntax-dispatch G321d@t '(_ any any)))) G3209@t))) (G2f66@syntax-dispatch G3209@t '(_ (any . any) any . each-any)))) G3207@x))) (set! G2eec@parse-define-syntax (lambda (G3231@x) ((lambda (G3233@t) ((lambda (G3235@ls/false) (if (and G3235@ls/false (apply (lambda (G3237@id G3238@val) (G2d67@id? G3237@id)) G3235@ls/false)) (apply (lambda (G323b@id G323c@val) (values G323b@id G323c@val)) G3235@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3233@t))) (G2f66@syntax-dispatch G3233@t '(_ any any)))) G3231@x))) (set! G2eee@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ef0@scheme-stx (lambda (G323f@sym) (or (hashtable-ref G2eee@scheme-stx-hashtable G323f@sym '#f) ((lambda (G3241@subst) ((lambda (G3243@stx) ((lambda (G3245@stx) ((lambda () (begin (hashtable-set! G2eee@scheme-stx-hashtable G323f@sym G3245@stx) G3245@stx)))) ((lambda (G3247@t) (if G3247@t ((lambda (G3249@x) ((lambda (G324b@name G324c@label) (G2d53@add-subst (G2cfc@make-rib (list G324b@name) (list G2cdf@top-mark*) (list G324c@label) '#f '#f) G3243@stx)) (car G3249@x) (cdr G3249@x))) G3247@t) G3243@stx)) (assq G323f@sym G3241@subst)))) (G2d31@make-stx G323f@sym G2cdf@top-mark* '() '()))) (G2b53@G29cf@library-subst (G2b77@G2a17@find-library-by-name '(psyntax system $all))))))) (set! G2ef2@lexical-var car) (set! G2ef4@lexical-mutable? cdr) (set! G2ef6@set-lexical-mutable! set-cdr!) (set! G2ef8@add-lexical (lambda (G324f@lab G3250@lex G3251@r) (cons (cons* G324f@lab 'lexical G3250@lex '#f) G3251@r))) (set! G2efa@add-lexicals (lambda (G3255@lab* G3256@lex* G3257@r) (if (null? G3255@lab*) G3257@r (G2efa@add-lexicals (cdr G3255@lab*) (cdr G3256@lex*) (G2ef8@add-lexical (car G3255@lab*) (car G3256@lex*) G3257@r))))) (set! G2efc@letrec-helper (lambda (G325b@e G325c@r G325d@mr G325e@build) ((lambda (G3263@t) ((lambda (G3265@ls/false) (if G3265@ls/false (apply (lambda (G3267@lhs* G3268@rhs* G3269@b G326a@b*) (if (not (G2d71@valid-bound-ids? G3267@lhs*)) (G2f20@invalid-fmls-error G325b@e G3267@lhs*) ((lambda (G326f@lex* G3270@lab*) ((lambda (G3273@rib G3274@r) ((lambda (G3277@body G3278@rhs*) (G325e@build '#f G326f@lex* G3278@rhs* G3277@body)) (G2fa0@chi-internal (G2d53@add-subst G3273@rib (cons G3269@b G326a@b*)) G3274@r G325d@mr) (G2f86@chi-expr* (map (lambda (G327b@x) (G2d53@add-subst G3273@rib G327b@x)) G3268@rhs*) G3274@r G325d@mr))) (G2d22@make-full-rib G3267@lhs* G3270@lab*) (G2efa@add-lexicals G3270@lab* G326f@lex* G325c@r))) (map G2ce3@gen-lexical G3267@lhs*) (map G2ce7@gen-label G3267@lhs*)))) G3265@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3263@t))) (G2f66@syntax-dispatch G3263@t '(_ #(each (any any)) any . each-any)))) G325b@e))) (set! G2efe@letrec-transformer (lambda (G327d@e G327e@r G327f@mr) (G2efc@letrec-helper G327d@e G327e@r G327f@mr G2cc6@G2c39@build-letrec))) (set! G2f00@letrec*-transformer (lambda (G3283@e G3284@r G3285@mr) (G2efc@letrec-helper G3283@e G3284@r G3285@mr G2cc7@G2c3b@build-letrec*))) (set! G2f02@fluid-let-syntax-transformer (lambda (G3289@e G328a@r G328b@mr) ((lambda (G3290@lookup) (begin (set! G3290@lookup (lambda (G32a3@x) (or (G2d81@id->label G32a3@x) (G3053@syntax-violation '#f '"unbound identifier" G3289@e G32a3@x)))) ((lambda (G3291@t) ((lambda (G3293@ls/false) (if G3293@ls/false (apply (lambda (G3295@lhs* G3296@rhs* G3297@b G3298@b*) (if (not (G2d71@valid-bound-ids? G3295@lhs*)) (G2f20@invalid-fmls-error G3289@e G3295@lhs*) ((lambda (G329d@lab* G329e@rhs*) (G2fa0@chi-internal (cons G3297@b G3298@b*) (append (map cons G329d@lab* G329e@rhs*) G328a@r) (append (map cons G329d@lab* G329e@rhs*) G328b@mr))) (map G3290@lookup G3295@lhs*) (map (lambda (G32a1@x) (G2da7@make-eval-transformer (G2fc5@expand-transformer G32a1@x G328b@mr))) G3296@rhs*)))) G3293@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3291@t))) (G2f66@syntax-dispatch G3291@t '(_ #(each (any any)) any . each-any)))) G3289@e))) '#f))) (set! G2f04@type-descriptor-transformer (lambda (G32a5@e G32a6@r G32a7@mr) ((lambda (G32ab@t) ((lambda (G32ad@ls/false) (if (and G32ad@ls/false (apply (lambda (G32af@id) (G2d67@id? G32af@id)) G32ad@ls/false)) (apply (lambda (G32b1@id) ((lambda (G32b3@lab) ((lambda (G32b5@b) ((lambda (G32b7@type) ((lambda () (begin (if (not G32b3@lab) (G2d8d@raise-unbound-error G32b1@id) (void)) (if (not (and (eq? G32b7@type '$rtd) (not (list? (G2d8b@binding-value G32b5@b))))) (G3053@syntax-violation '#f '"not a record type" G32a5@e) (void)) (list 'quote (G2d8b@binding-value G32b5@b)))))) (G2d89@binding-type G32b5@b))) (G2d85@label->binding G32b3@lab G32a6@r))) (G2d81@id->label G32b1@id))) G32ad@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G32ab@t))) (G2f66@syntax-dispatch G32ab@t '(_ any)))) G32a5@e))) (set! G2f06@record-type-descriptor-transformer (lambda (G32b9@e G32ba@r G32bb@mr) ((lambda (G32bf@t) ((lambda (G32c1@ls/false) (if (and G32c1@ls/false (apply (lambda (G32c3@id) (G2d67@id? G32c3@id)) G32c1@ls/false)) (apply (lambda (G32c5@id) ((lambda (G32c7@lab) ((lambda (G32c9@b) ((lambda (G32cb@type) ((lambda () (begin (if (not G32c7@lab) (G2d8d@raise-unbound-error G32c5@id) (void)) (if (not (and (eq? G32cb@type '$rtd) (list? (G2d8b@binding-value G32c9@b)))) (G3053@syntax-violation '#f '"not a record type" G32b9@e) (void)) (G2f8a@chi-expr (car (G2d8b@binding-value G32c9@b)) G32ba@r G32bb@mr))))) (G2d89@binding-type G32c9@b))) (G2d85@label->binding G32c7@lab G32ba@r))) (G2d81@id->label G32c5@id))) G32c1@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G32bf@t))) (G2f66@syntax-dispatch G32bf@t '(_ any)))) G32b9@e))) (set! G2f08@record-constructor-descriptor-transformer (lambda (G32cd@e G32ce@r G32cf@mr) ((lambda (G32d3@t) ((lambda (G32d5@ls/false) (if (and G32d5@ls/false (apply (lambda (G32d7@id) (G2d67@id? G32d7@id)) G32d5@ls/false)) (apply (lambda (G32d9@id) ((lambda (G32db@lab) ((lambda (G32dd@b) ((lambda (G32df@type) ((lambda () (begin (if (not G32db@lab) (G2d8d@raise-unbound-error G32d9@id) (void)) (if (not (and (eq? G32df@type '$rtd) (list? (G2d8b@binding-value G32dd@b)))) (G3053@syntax-violation '#f '"invalid type" G32cd@e) (void)) (G2f8a@chi-expr (cadr (G2d8b@binding-value G32dd@b)) G32ce@r G32cf@mr))))) (G2d89@binding-type G32dd@b))) (G2d85@label->binding G32db@lab G32ce@r))) (G2d81@id->label G32d9@id))) G32d5@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G32d3@t))) (G2f66@syntax-dispatch G32d3@t '(_ any)))) G32cd@e))) (set! G2f0a@when-macro (lambda (G32e1@e) ((lambda (G32e3@t) ((lambda (G32e5@ls/false) (if G32e5@ls/false (apply (lambda (G32e7@test G32e8@e G32e9@e*) (G2f1c@bless (list 'if G32e7@test (cons 'begin (cons G32e8@e G32e9@e*))))) G32e5@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G32e3@t))) (G2f66@syntax-dispatch G32e3@t '(_ any any . each-any)))) G32e1@e))) (set! G2f0c@unless-macro (lambda (G32ed@e) ((lambda (G32ef@t) ((lambda (G32f1@ls/false) (if G32f1@ls/false (apply (lambda (G32f3@test G32f4@e G32f5@e*) (G2f1c@bless (list 'if (list 'not G32f3@test) (cons 'begin (cons G32f4@e G32f5@e*))))) G32f1@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G32ef@t))) (G2f66@syntax-dispatch G32ef@t '(_ any any . each-any)))) G32ed@e))) (set! G2f0e@if-transformer (lambda (G32f9@e G32fa@r G32fb@mr) ((lambda (G32ff@t) ((lambda (G3301@ls/false) (if G3301@ls/false (apply (lambda (G3303@e0 G3304@e1 G3305@e2) (list 'if (G2f8a@chi-expr G3303@e0 G32fa@r G32fb@mr) (G2f8a@chi-expr G3304@e1 G32fa@r G32fb@mr) (G2f8a@chi-expr G3305@e2 G32fa@r G32fb@mr))) G3301@ls/false) ((lambda (G3309@t) ((lambda (G330b@ls/false) (if G330b@ls/false (apply (lambda (G330d@e0 G330e@e1) (list 'if (G2f8a@chi-expr G330d@e0 G32fa@r G32fb@mr) (G2f8a@chi-expr G330e@e1 G32fa@r G32fb@mr) (G2cc5@G2c37@build-void))) G330b@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3309@t))) (G2f66@syntax-dispatch G3309@t '(_ any any)))) G32ff@t))) (G2f66@syntax-dispatch G32ff@t '(_ any any any)))) G32f9@e))) (set! G2f10@and-transformer (lambda (G3311@e G3312@r G3313@mr) ((lambda (G3317@t) ((lambda (G3319@ls/false) (if G3319@ls/false (apply (lambda (G331b@e*) (cons 'and (G2f86@chi-expr* G331b@e* G3312@r G3313@mr))) G3319@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3317@t))) (G2f66@syntax-dispatch G3317@t '(_ . each-any)))) G3311@e))) (set! G2f12@or-transformer (lambda (G331d@e G331e@r G331f@mr) ((lambda (G3323@t) ((lambda (G3325@ls/false) (if G3325@ls/false (apply (lambda (G3327@e*) (cons 'or (G2f86@chi-expr* G3327@e* G331e@r G331f@mr))) G3325@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3323@t))) (G2f66@syntax-dispatch G3323@t '(_ . each-any)))) G331d@e))) (set! G2f14@case-macro (lambda (G3329@e) ((lambda (G332c@build-last G332e@build-one) (begin (set! G332c@build-last (lambda (G3353@cls) ((lambda (G3355@t) ((lambda (G3357@ls/false) (if G3357@ls/false (apply (lambda (G3359@e G335a@e*) (cons 'begin (cons G3359@e G335a@e*))) G3357@ls/false) ((lambda (G335d@t) ((lambda (G335f@ls/false) (if G335f@ls/false (apply (lambda () (G332e@build-one G3353@cls '(if #f #f))) G335f@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G335d@t))) (G2f66@syntax-dispatch G335d@t '_))) G3355@t))) (G2f66@syntax-dispatch G3355@t '(#(scheme-id else) any . each-any)))) G3353@cls))) (set! G332e@build-one (lambda (G3345@cls G3346@k) ((lambda (G3349@t) ((lambda (G334b@ls/false) (if G334b@ls/false (apply (lambda (G334d@d* G334e@e G334f@e*) (list 'if (list 'memv 't (list 'quote G334d@d*)) (cons 'begin (cons G334e@e G334f@e*)) G3346@k)) G334b@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3349@t))) (G2f66@syntax-dispatch G3349@t '(each-any any . each-any)))) G3345@cls))) ((lambda (G332f@t) ((lambda (G3331@ls/false) (if G3331@ls/false (apply (lambda (G3333@expr) (G2f1c@bless (cons 'let (cons (list (list 't G3333@expr)) '((if #f #f)))))) G3331@ls/false) ((lambda (G3335@t) ((lambda (G3337@ls/false) (if G3337@ls/false (apply (lambda (G3339@expr G333a@cls G333b@cls*) (G2f1c@bless (list 'let (list (list 't G3339@expr)) ((letrec ((G333f@f (lambda (G3341@cls G3342@cls*) (if (null? G3342@cls*) (G332c@build-last G3341@cls) (G332e@build-one G3341@cls (G333f@f (car G3342@cls*) (cdr G3342@cls*))))))) G333f@f) G333a@cls G333b@cls*)))) G3337@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3335@t))) (G2f66@syntax-dispatch G3335@t '(_ any any . each-any)))) G332f@t))) (G2f66@syntax-dispatch G332f@t '(_ any)))) G3329@e))) '#f '#f))) (set! G2f16@quote-transformer (lambda (G3361@e G3362@r G3363@mr) ((lambda (G3367@t) ((lambda (G3369@ls/false) (if G3369@ls/false (apply (lambda (G336b@datum) (list 'quote (G2d7d@stx->datum G336b@datum))) G3369@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3367@t))) (G2f66@syntax-dispatch G3367@t '(_ any)))) G3361@e))) (set! G2f18@case-lambda-transformer (lambda (G336d@e G336e@r G336f@mr) ((lambda (G3373@t) ((lambda (G3375@ls/false) (if G3375@ls/false (apply (lambda (G3377@fmls* G3378@b* G3379@b**) (call-with-values (lambda () (G2f92@chi-lambda-clause* G336d@e G3377@fmls* (map cons G3378@b* G3379@b**) G336e@r G336f@mr)) (lambda (G337f@G337d G3380@G337e) ((lambda (G3383@body* G3384@fmls*) (G2cc2@G2c01@build-case-lambda '#f G3384@fmls* G3383@body*)) G3380@G337e G337f@G337d)))) G3375@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3373@t))) (G2f66@syntax-dispatch G3373@t '(_ . #(each (any any . each-any)))))) G336d@e))) (set! G2f1a@lambda-transformer (lambda (G3387@e G3388@r G3389@mr) ((lambda (G338d@t) ((lambda (G338f@ls/false) (if G338f@ls/false (apply (lambda (G3391@fmls G3392@b G3393@b*) (call-with-values (lambda () (G2f90@chi-lambda-clause G3387@e G3391@fmls (cons G3392@b G3393@b*) G3388@r G3389@mr)) (lambda (G3399@G3397 G339a@G3398) ((lambda (G339d@body G339e@fmls) (G2cc1@G2bff@build-lambda '#f G339e@fmls G339d@body)) G339a@G3398 G3399@G3397)))) G338f@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G338d@t))) (G2f66@syntax-dispatch G338d@t '(_ any any . each-any)))) G3387@e))) (set! G2f1c@bless (lambda (G33a1@x) (G2d4f@mkstx ((letrec ((G33a3@f (lambda (G33a5@x) (if (G2d2f@stx? G33a5@x) G33a5@x (if (pair? G33a5@x) (cons (G33a3@f (car G33a5@x)) (G33a3@f (cdr G33a5@x))) (if (symbol? G33a5@x) (G2ef0@scheme-stx G33a5@x) (if (vector? G33a5@x) (vector-map G33a3@f G33a5@x) G33a5@x))))))) G33a3@f) G33a1@x) '() '() '()))) (set! G2f1e@with-syntax-macro (lambda (G33a7@e) ((lambda (G33a9@t) ((lambda (G33ab@ls/false) (if G33ab@ls/false (apply (lambda (G33ad@pat* G33ae@expr* G33af@b G33b0@b*) ((lambda (G33b5@idn*) (begin (G2f8e@verify-formals (map car G33b5@idn*) G33a7@e) ((lambda (G33b7@t*) (G2f1c@bless (list 'let (map list G33b7@t* G33ae@expr*) ((letrec ((G33b9@f (lambda (G33bb@pat* G33bc@t*) (if (null? G33bb@pat*) (cons 'begin (cons '#f (cons G33af@b G33b0@b*))) (list 'syntax-case (car G33bc@t*) '() (list (car G33bb@pat*) (G33b9@f (cdr G33bb@pat*) (cdr G33bc@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33bb@pat*)) (car G33bc@t*)))))))) G33b9@f) G33ad@pat* G33b7@t*)))) (G303f@generate-temporaries G33ae@expr*)))) ((letrec ((G33bf@f (lambda (G33c1@pat*) (if (null? G33c1@pat*) '() (call-with-values (lambda () (G2f64@convert-pattern (car G33c1@pat*) '())) (lambda (G33c5@G33c3 G33c6@G33c4) ((lambda (G33c9@idn* G33ca@pat) (append G33c9@idn* (G33bf@f (cdr G33c1@pat*)))) G33c6@G33c4 G33c5@G33c3))))))) G33bf@f) G33ad@pat*))) G33ab@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G33a9@t))) (G2f66@syntax-dispatch G33a9@t '(_ #(each (any any)) any . each-any)))) G33a7@e))) (set! G2f20@invalid-fmls-error (lambda (G33cd@stx G33ce@fmls) ((lambda (G33d1@t) ((lambda (G33d3@ls/false) (if G33d3@ls/false (apply (lambda (G33d5@id* G33d6@last) ((letrec ((G33d9@f (lambda (G33db@id*) (if (null? G33db@id*) (values) (if (not (G2d67@id? (car G33db@id*))) (G3053@syntax-violation '#f '"not an identifier" G33cd@stx (car G33db@id*)) (begin (G33d9@f (cdr G33db@id*)) (if (G2d75@bound-id-member? (car G33db@id*) (cdr G33db@id*)) (G3053@syntax-violation '#f '"duplicate binding" G33cd@stx (car G33db@id*)) (void)))))))) G33d9@f) (if (G2d67@id? G33d6@last) (cons G33d6@last G33d5@id*) (if (G2d5d@syntax-null? G33d6@last) G33d5@id* (G3053@syntax-violation '#f '"not an identifier" G33cd@stx G33d6@last))))) G33d3@ls/false) ((lambda (G33dd@t) ((lambda (G33df@ls/false) (if G33df@ls/false (apply (lambda () (G3053@syntax-violation '#f '"malformed binding form" G33cd@stx G33ce@fmls)) G33df@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G33dd@t))) (G2f66@syntax-dispatch G33dd@t '_))) G33d1@t))) (G2f66@syntax-dispatch G33d1@t '#(each+ any () any)))) G33ce@fmls))) (set! G2f22@let-macro (lambda (G33e1@stx) ((lambda (G33e3@t) ((lambda (G33e5@ls/false) (if G33e5@ls/false (apply (lambda (G33e7@lhs* G33e8@rhs* G33e9@b G33ea@b*) (if (G2d71@valid-bound-ids? G33e7@lhs*) (G2f1c@bless (cons (cons 'lambda (cons G33e7@lhs* (cons G33e9@b G33ea@b*))) G33e8@rhs*)) (G2f20@invalid-fmls-error G33e1@stx G33e7@lhs*))) G33e5@ls/false) ((lambda (G33ef@t) ((lambda (G33f1@ls/false) (if (and G33f1@ls/false (apply (lambda (G33f3@f G33f4@lhs* G33f5@rhs* G33f6@b G33f7@b*) (G2d67@id? G33f3@f)) G33f1@ls/false)) (apply (lambda (G33fd@f G33fe@lhs* G33ff@rhs* G3400@b G3401@b*) (if (G2d71@valid-bound-ids? G33fe@lhs*) (G2f1c@bless (cons (list 'letrec (list (list G33fd@f (cons 'lambda (cons G33fe@lhs* (cons G3400@b G3401@b*))))) G33fd@f) G33ff@rhs*)) (G2f20@invalid-fmls-error G33e1@stx G33fe@lhs*))) G33f1@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G33ef@t))) (G2f66@syntax-dispatch G33ef@t '(_ any #(each (any any)) any . each-any)))) G33e3@t))) (G2f66@syntax-dispatch G33e3@t '(_ #(each (any any)) any . each-any)))) G33e1@stx))) (set! G2f24@let-values-macro (lambda (G3407@stx) ((lambda (G340a@rename G340c@rename*) (begin (set! G340a@rename (lambda (G346c@x G346d@old* G346e@new*) (begin (if (not (G2d67@id? G346c@x)) (G3053@syntax-violation '#f '"not an indentifier" G3407@stx G346c@x) (void)) (if (G2d75@bound-id-member? G346c@x G346d@old*) (G3053@syntax-violation '#f '"duplicate binding" G3407@stx G346c@x) (void)) ((lambda (G3472@y) (values G3472@y (cons G346c@x G346d@old*) (cons G3472@y G346e@new*))) (gensym (G3059@syntax->datum G346c@x)))))) (set! G340c@rename* (lambda (G345a@x* G345b@old* G345c@new*) (if (null? G345a@x*) (values '() G345b@old* G345c@new*) (call-with-values (lambda () (G340a@rename (car G345a@x*) G345b@old* G345c@new*)) (lambda (G3460@x G3461@old* G3462@new*) (call-with-values (lambda () (G340c@rename* (cdr G345a@x*) G3461@old* G3462@new*)) (lambda (G3466@x* G3467@old* G3468@new*) (values (cons G3460@x G3466@x*) G3467@old* G3468@new*)))))))) ((lambda (G340d@t) ((lambda (G340f@ls/false) (if G340f@ls/false (apply (lambda (G3411@b G3412@b*) (cons* (G2f1c@bless 'let) '() G3411@b G3412@b*)) G340f@ls/false) ((lambda (G3415@t) ((lambda (G3417@ls/false) (if G3417@ls/false (apply (lambda (G3419@lhs* G341a@rhs* G341b@b G341c@b*) (G2f1c@bless ((letrec ((G3421@f (lambda (G3423@lhs* G3424@rhs* G3425@old* G3426@new*) (if (null? G3423@lhs*) (cons 'let (cons (map list G3425@old* G3426@new*) (cons G341b@b G341c@b*))) ((lambda (G342b@t) ((lambda (G342d@ls/false) (if G342d@ls/false (apply (lambda (G342f@x*) (call-with-values (lambda () (G340c@rename* G342f@x* G3425@old* G3426@new*)) (lambda (G3434@G3431 G3435@G3432 G3436@G3433) ((lambda (G343a@new* G343b@old* G343c@y*) (list 'call-with-values (list 'lambda '() (car G3424@rhs*)) (list 'lambda G343c@y* (G3421@f (cdr G3423@lhs*) (cdr G3424@rhs*) G343b@old* G343a@new*)))) G3436@G3433 G3435@G3432 G3434@G3431)))) G342d@ls/false) ((lambda (G3440@t) ((lambda (G3442@ls/false) (if G3442@ls/false (apply (lambda (G3444@x* G3445@x) (call-with-values (lambda () (G340a@rename G3445@x G3425@old* G3426@new*)) (lambda (G3448@y G3449@old* G344a@new*) (call-with-values (lambda () (G340c@rename* G3444@x* G3449@old* G344a@new*)) (lambda (G344e@y* G344f@old* G3450@new*) (list 'call-with-values (list 'lambda '() (car G3424@rhs*)) (list 'lambda (append G344e@y* G3448@y) (G3421@f (cdr G3423@lhs*) (cdr G3424@rhs*) G344f@old* G3450@new*)))))))) G3442@ls/false) ((lambda (G3454@t) ((lambda (G3456@ls/false) (if G3456@ls/false (apply (lambda (G3458@others) (G3053@syntax-violation '#f '"malformed bindings" G3407@stx G3458@others)) G3456@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3454@t))) (G2f66@syntax-dispatch G3454@t 'any))) G3440@t))) (G2f66@syntax-dispatch G3440@t '#(each+ any () any)))) G342b@t))) (G2f66@syntax-dispatch G342b@t 'each-any))) (car G3423@lhs*)))))) G3421@f) G3419@lhs* G341a@rhs* '() '()))) G3417@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3415@t))) (G2f66@syntax-dispatch G3415@t '(_ #(each (any any)) any . each-any)))) G340d@t))) (G2f66@syntax-dispatch G340d@t '(_ () any . each-any)))) G3407@stx))) '#f '#f))) (set! G2f26@let*-values-macro (lambda (G3474@stx) ((lambda (G3477@check) (begin (set! G3477@check (lambda (G34a6@x*) (if (not (null? G34a6@x*)) ((lambda (G34a8@x) (begin (if (not (G2d67@id? G34a8@x)) (G3053@syntax-violation '#f '"not an identifier" G3474@stx G34a8@x) (void)) (G3477@check (cdr G34a6@x*)) (if (G2d75@bound-id-member? G34a8@x (cdr G34a6@x*)) (G3053@syntax-violation '#f '"duplicate identifier" G3474@stx G34a8@x) (void)))) (car G34a6@x*)) (void)))) ((lambda (G3478@t) ((lambda (G347a@ls/false) (if G347a@ls/false (apply (lambda (G347c@b G347d@b*) (cons* (G2f1c@bless 'let) '() G347c@b G347d@b*)) G347a@ls/false) ((lambda (G3480@t) ((lambda (G3482@ls/false) (if G3482@ls/false (apply (lambda (G3484@lhs* G3485@rhs* G3486@b G3487@b*) (G2f1c@bless ((letrec ((G348c@f (lambda (G348e@lhs* G348f@rhs*) (if (null? G348e@lhs*) (cons 'begin (cons G3486@b G3487@b*)) ((lambda (G3492@t) ((lambda (G3494@ls/false) (if G3494@ls/false (apply (lambda (G3496@x*) (begin (G3477@check G3496@x*) (list 'call-with-values (list 'lambda '() (car G348f@rhs*)) (list 'lambda G3496@x* (G348c@f (cdr G348e@lhs*) (cdr G348f@rhs*)))))) G3494@ls/false) ((lambda (G3498@t) ((lambda (G349a@ls/false) (if G349a@ls/false (apply (lambda (G349c@x* G349d@x) (begin (G3477@check (cons G349d@x G349c@x*)) (list 'call-with-values (list 'lambda '() (car G348f@rhs*)) (list 'lambda (append G349c@x* G349d@x) (G348c@f (cdr G348e@lhs*) (cdr G348f@rhs*)))))) G349a@ls/false) ((lambda (G34a0@t) ((lambda (G34a2@ls/false) (if G34a2@ls/false (apply (lambda (G34a4@others) (G3053@syntax-violation '#f '"malformed bindings" G3474@stx G34a4@others)) G34a2@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G34a0@t))) (G2f66@syntax-dispatch G34a0@t 'any))) G3498@t))) (G2f66@syntax-dispatch G3498@t '#(each+ any () any)))) G3492@t))) (G2f66@syntax-dispatch G3492@t 'each-any))) (car G348e@lhs*)))))) G348c@f) G3484@lhs* G3485@rhs*))) G3482@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3480@t))) (G2f66@syntax-dispatch G3480@t '(_ #(each (any any)) any . each-any)))) G3478@t))) (G2f66@syntax-dispatch G3478@t '(_ () any . each-any)))) G3474@stx))) '#f))) (set! G2f28@trace-lambda-macro (lambda (G34aa@stx) ((lambda (G34ac@t) ((lambda (G34ae@ls/false) (if G34ae@ls/false (apply (lambda (G34b0@who G34b1@fmls G34b2@b G34b3@b*) (if (G2d71@valid-bound-ids? G34b1@fmls) (G2f1c@bless (list 'make-traced-procedure (list 'quote G34b0@who) (cons 'lambda (cons G34b1@fmls (cons G34b2@b G34b3@b*))))) (G2f20@invalid-fmls-error G34aa@stx G34b1@fmls))) G34ae@ls/false) ((lambda (G34b8@t) ((lambda (G34ba@ls/false) (if G34ba@ls/false (apply (lambda (G34bc@who G34bd@fmls G34be@last G34bf@b G34c0@b*) (if (G2d71@valid-bound-ids? (cons G34be@last G34bd@fmls)) (G2f1c@bless (list 'make-traced-procedure (list 'quote G34bc@who) (cons 'lambda (cons (append G34bd@fmls G34be@last) (cons G34bf@b G34c0@b*))))) (G2f20@invalid-fmls-error G34aa@stx (append G34bd@fmls G34be@last)))) G34ba@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G34b8@t))) (G2f66@syntax-dispatch G34b8@t '(_ any #(each+ any () any) any . each-any)))) G34ac@t))) (G2f66@syntax-dispatch G34ac@t '(_ any each-any any . each-any)))) G34aa@stx))) (set! G2f2a@trace-define-macro (lambda (G34c6@stx) ((lambda (G34c8@t) ((lambda (G34ca@ls/false) (if G34ca@ls/false (apply (lambda (G34cc@who G34cd@fmls G34ce@b G34cf@b*) (if (G2d71@valid-bound-ids? G34cd@fmls) (G2f1c@bless (list 'define G34cc@who (list 'make-traced-procedure (list 'quote G34cc@who) (cons 'lambda (cons G34cd@fmls (cons G34ce@b G34cf@b*)))))) (G2f20@invalid-fmls-error G34c6@stx G34cd@fmls))) G34ca@ls/false) ((lambda (G34d4@t) ((lambda (G34d6@ls/false) (if G34d6@ls/false (apply (lambda (G34d8@who G34d9@fmls G34da@last G34db@b G34dc@b*) (if (G2d71@valid-bound-ids? (cons G34da@last G34d9@fmls)) (G2f1c@bless (list 'define G34d8@who (list 'make-traced-procedure (list 'quote G34d8@who) (cons 'lambda (cons (append G34d9@fmls G34da@last) (cons G34db@b G34dc@b*)))))) (G2f20@invalid-fmls-error G34c6@stx (append G34d9@fmls G34da@last)))) G34d6@ls/false) ((lambda (G34e2@t) ((lambda (G34e4@ls/false) (if G34e4@ls/false (apply (lambda (G34e6@who G34e7@expr) (if (G2d67@id? G34e6@who) (G2f1c@bless (list 'define G34e6@who (list 'let (list (list 'v G34e7@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34e6@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3053@syntax-violation '#f '"invalid name" G34c6@stx))) G34e4@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G34e2@t))) (G2f66@syntax-dispatch G34e2@t '(_ any any)))) G34d4@t))) (G2f66@syntax-dispatch G34d4@t '(_ (any . #(each+ any () any)) any . each-any)))) G34c8@t))) (G2f66@syntax-dispatch G34c8@t '(_ (any . each-any) any . each-any)))) G34c6@stx))) (set! G2f2c@trace-define-syntax-macro (lambda (G34ea@stx) ((lambda (G34ec@t) ((lambda (G34ee@ls/false) (if G34ee@ls/false (apply (lambda (G34f0@who G34f1@expr) (if (G2d67@id? G34f0@who) (G2f1c@bless (list 'define-syntax G34f0@who (list 'make-traced-macro (list 'quote G34f0@who) G34f1@expr))) (G3053@syntax-violation '#f '"invalid name" G34ea@stx))) G34ee@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G34ec@t))) (G2f66@syntax-dispatch G34ec@t '(_ any any)))) G34ea@stx))) (set! G2f2e@trace-let/rec-syntax (lambda (G34f4@who) (lambda (G34f6@stx) ((lambda (G34f8@t) ((lambda (G34fa@ls/false) (if G34fa@ls/false (apply (lambda (G34fc@lhs* G34fd@rhs* G34fe@b G34ff@b*) (if (G2d71@valid-bound-ids? G34fc@lhs*) ((lambda (G3504@rhs*) (G2f1c@bless (cons G34f4@who (cons (map list G34fc@lhs* G3504@rhs*) (cons G34fe@b G34ff@b*))))) (map (lambda (G3506@lhs G3507@rhs) (list 'make-traced-macro (list 'quote G3506@lhs) G3507@rhs)) G34fc@lhs* G34fd@rhs*)) (G2f20@invalid-fmls-error G34f6@stx G34fc@lhs*))) G34fa@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G34f8@t))) (G2f66@syntax-dispatch G34f8@t '(_ #(each (any any)) any . each-any)))) G34f6@stx)))) (set! G2f30@trace-let-syntax-macro (G2f2e@trace-let/rec-syntax 'let-syntax)) (set! G2f32@trace-letrec-syntax-macro (G2f2e@trace-let/rec-syntax 'letrec-syntax)) (set! G2f34@guard-macro (lambda (G350a@x) ((lambda (G350d@gen-clauses) (begin (set! G350d@gen-clauses (lambda (G3524@con G3525@outerk G3526@clause*) ((lambda (G352b@f G352d@f*) (begin (set! G352b@f (lambda (G355e@x G355f@k) ((lambda (G3562@t) ((lambda (G3564@ls/false) (if G3564@ls/false (apply (lambda (G3566@e G3567@p) ((lambda (G356a@t) (list 'let (list (list G356a@t G3566@e)) (list 'if G356a@t (list G3567@p G356a@t) G355f@k))) (gensym))) G3564@ls/false) ((lambda (G356c@t) ((lambda (G356e@ls/false) (if G356e@ls/false (apply (lambda (G3570@e) ((lambda (G3572@t) (list 'let (list (list G3572@t G3570@e)) (list 'if G3572@t G3572@t G355f@k))) (gensym))) G356e@ls/false) ((lambda (G3574@t) ((lambda (G3576@ls/false) (if G3576@ls/false (apply (lambda (G3578@e G3579@v G357a@v*) (list 'if G3578@e (cons 'begin (cons G3579@v G357a@v*)) G355f@k)) G3576@ls/false) ((lambda (G357e@t) ((lambda (G3580@ls/false) (if G3580@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid guard clause" G355e@x)) G3580@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G357e@t))) (G2f66@syntax-dispatch G357e@t '_))) G3574@t))) (G2f66@syntax-dispatch G3574@t '(any any . each-any)))) G356c@t))) (G2f66@syntax-dispatch G356c@t '(any)))) G3562@t))) (G2f66@syntax-dispatch G3562@t '(any #(scheme-id =>) any)))) G355e@x))) (set! G352d@f* (lambda (G3538@x*) ((lambda (G353a@t) ((lambda (G353c@ls/false) (if G353c@ls/false (apply (lambda () (values (list 'raise G3524@con) '#t)) G353c@ls/false) ((lambda (G353e@t) ((lambda (G3540@ls/false) (if G3540@ls/false (apply (lambda (G3542@e G3543@e*) (values (cons 'begin (cons G3542@e G3543@e*)) '#f)) G3540@ls/false) ((lambda (G3546@t) ((lambda (G3548@ls/false) (if G3548@ls/false (apply (lambda (G354a@cls G354b@cls*) (call-with-values (lambda () (G352d@f* G354b@cls*)) (lambda (G3550@G354e G3551@G354f) ((lambda (G3554@g G3555@e) (values (G352b@f G354a@cls G3555@e) G3554@g)) G3551@G354f G3550@G354e)))) G3548@ls/false) ((lambda (G3558@t) ((lambda (G355a@ls/false) (if G355a@ls/false (apply (lambda (G355c@others) (G3053@syntax-violation '#f '"invalid guard clause" G355c@others)) G355a@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3558@t))) (G2f66@syntax-dispatch G3558@t 'any))) G3546@t))) (G2f66@syntax-dispatch G3546@t '(any . any)))) G353e@t))) (G2f66@syntax-dispatch G353e@t '((#(scheme-id else) any . each-any))))) G353a@t))) (G2f66@syntax-dispatch G353a@t '()))) G3538@x*))) (call-with-values (lambda () (G352d@f* G3526@clause*)) (lambda (G3530@G352e G3531@G352f) ((lambda (G3534@raisek G3535@code) (if G3534@raisek (list G3525@outerk G3535@code) G3535@code)) G3531@G352f G3530@G352e))))) '#f '#f))) ((lambda (G350e@t) ((lambda (G3510@ls/false) (if (and G3510@ls/false (apply (lambda (G3512@con G3513@clause* G3514@b G3515@b*) (G2d67@id? G3512@con)) G3510@ls/false)) (apply (lambda (G351a@con G351b@clause* G351c@b G351d@b*) ((lambda (G3522@outerk) (G2f1c@bless (list 'call/cc (list 'lambda (list G3522@outerk) (list 'with-exception-handler (list 'lambda (list G351a@con) (G350d@gen-clauses G351a@con G3522@outerk G351b@clause*)) (cons 'lambda (cons '() (cons '#f (cons G351c@b G351d@b*))))))))) (gensym))) G3510@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G350e@t))) (G2f66@syntax-dispatch G350e@t '(_ (any . each-any) any . each-any)))) G350a@x))) '#f))) (set! G2f36@define-enumeration-macro (lambda (G3582@stx) ((lambda (G3585@set? G3587@remove-dups) (begin (set! G3585@set? (lambda (G359e@x) (or (null? G359e@x) (and (not (memq (car G359e@x) (cdr G359e@x))) (G3585@set? (cdr G359e@x)))))) (set! G3587@remove-dups (lambda (G359c@ls) (if (null? G359c@ls) '() (cons (car G359c@ls) (G3587@remove-dups (remq (car G359c@ls) (cdr G359c@ls))))))) ((lambda (G3588@t) ((lambda (G358a@ls/false) (if (and G358a@ls/false (apply (lambda (G358c@name G358d@id* G358e@maker) (and (G2d67@id? G358c@name) (G2d67@id? G358e@maker) (for-all G2d67@id? G358d@id*))) G358a@ls/false)) (apply (lambda (G3592@name G3593@id* G3594@maker) ((lambda (G3598@name* G3599@mk) (G2f1c@bless (list 'begin (list 'define G3599@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3598@name*)))) (list 'define-syntax G3592@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3598@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3592@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G3594@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G3594@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3598@name*)) (cons 'syntax-violation (cons (list 'quote G3594@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3599@mk '('(n* ...)))))))))))) (G3587@remove-dups (G3059@syntax->datum G3593@id*)) (gensym))) G358a@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3588@t))) (G2f66@syntax-dispatch G3588@t '(_ any each-any any)))) G3582@stx))) '#f '#f))) (set! G2f38@time-macro (lambda (G35a0@stx) ((lambda (G35a2@t) ((lambda (G35a4@ls/false) (if G35a4@ls/false (apply (lambda (G35a6@expr) ((lambda (G35a8@str) (G2f1c@bless (list 'time-it G35a8@str (list 'lambda '() G35a6@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G35ac@G35aa G35ad@G35ab) ((lambda (G35b0@e G35b1@p) (begin (write (G3059@syntax->datum G35a6@expr) G35b1@p) (G35b0@e))) G35ad@G35ab G35ac@G35aa))))) G35a4@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G35a2@t))) (G2f66@syntax-dispatch G35a2@t '(_ any)))) G35a0@stx))) (set! G2f3a@delay-macro (lambda (G35b4@stx) ((lambda (G35b6@t) ((lambda (G35b8@ls/false) (if G35b8@ls/false (apply (lambda (G35ba@expr) (G2f1c@bless (list 'make-promise (list 'lambda '() G35ba@expr)))) G35b8@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G35b6@t))) (G2f66@syntax-dispatch G35b6@t '(_ any)))) G35b4@stx))) (set! G2f3c@assert-macro (lambda (G35bc@stx) ((lambda (G35be@t) ((lambda (G35c0@ls/false) (if G35c0@ls/false (apply (lambda (G35c2@expr) ((lambda (G35c4@pos) (G2f1c@bless (list 'unless G35c2@expr (list 'assertion-error (list 'quote G35c2@expr) (list 'quote G35c4@pos))))) (or (G3049@expression-position G35bc@stx) (G3049@expression-position G35c2@expr)))) G35c0@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G35be@t))) (G2f66@syntax-dispatch G35be@t '(_ any)))) G35bc@stx))) (set! G2f3e@endianness-macro (lambda (G35c6@stx) ((lambda (G35c8@t) ((lambda (G35ca@ls/false) (if G35ca@ls/false (apply (lambda (G35cc@e) ((lambda (G35ce@t) (if (memv G35ce@t '(little)) (G2f1c@bless ''little) (if (memv G35ce@t '(big)) (G2f1c@bless ''big) (G3053@syntax-violation '#f '"endianness must be big or little" G35c6@stx)))) (G3059@syntax->datum G35cc@e))) G35ca@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G35c8@t))) (G2f66@syntax-dispatch G35c8@t '(_ any)))) G35c6@stx))) (set! G2f40@identifier-syntax-macro (lambda (G35d0@stx) ((lambda (G35d2@t) ((lambda (G35d4@ls/false) (if G35d4@ls/false (apply (lambda (G35d6@expr) (G2f1c@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35d6@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35d6@expr) '((syntax (e* ...)))))))))) G35d4@ls/false) ((lambda (G35d8@t) ((lambda (G35da@ls/false) (if (and G35da@ls/false (apply (lambda (G35dc@id1 G35dd@expr1 G35de@id2 G35df@expr2 G35e0@expr3) (and (G2d67@id? G35dc@id1) (G2d67@id? G35de@id2) (G2d67@id? G35df@expr2))) G35da@ls/false)) (apply (lambda (G35e6@id1 G35e7@expr1 G35e8@id2 G35e9@expr2 G35ea@expr3) (G2f1c@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35e7@expr1)) (list (list 'set! 'id G35e9@expr2) (list 'syntax G35ea@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35e7@expr1 '(e* ...))))))))) G35da@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G35d8@t))) (G2f66@syntax-dispatch G35d8@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35d2@t))) (G2f66@syntax-dispatch G35d2@t '(_ any)))) G35d0@stx))) (set! G2f42@do-macro (lambda (G35f0@stx) ((lambda (G35f3@bind) (begin (set! G35f3@bind (lambda (G360a@x) ((lambda (G360c@t) ((lambda (G360e@ls/false) (if G360e@ls/false (apply (lambda (G3610@x G3611@init) (list G3610@x G3611@init G3610@x)) G360e@ls/false) ((lambda (G3614@t) ((lambda (G3616@ls/false) (if G3616@ls/false (apply (lambda (G3618@x G3619@init G361a@step) (list G3618@x G3619@init G361a@step)) G3616@ls/false) ((lambda (G361e@t) ((lambda (G3620@ls/false) (if G3620@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid binding" G35f0@stx)) G3620@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G361e@t))) (G2f66@syntax-dispatch G361e@t '_))) G3614@t))) (G2f66@syntax-dispatch G3614@t '(any any any)))) G360c@t))) (G2f66@syntax-dispatch G360c@t '(any any)))) G360a@x))) ((lambda (G35f4@t) ((lambda (G35f6@ls/false) (if G35f6@ls/false (apply (lambda (G35f8@binding* G35f9@test G35fa@expr* G35fb@command*) ((lambda (G3600@t) ((lambda (G3602@ls/false) (if G3602@ls/false (apply (lambda (G3604@x* G3605@init* G3606@step*) (if (G2d71@valid-bound-ids? G3604@x*) (G2f1c@bless (list 'letrec (list (list 'loop (list 'lambda G3604@x* (list 'if G35f9@test (cons 'begin (cons '(if #f #f) G35fa@expr*)) (cons 'begin (append G35fb@command* (list (cons 'loop G3606@step*)))))))) (cons 'loop G3605@init*))) (G3053@syntax-violation '#f '"invalid bindings" G35f0@stx))) G3602@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3600@t))) (G2f66@syntax-dispatch G3600@t '#(each (any any any))))) (map G35f3@bind G35f8@binding*))) G35f6@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G35f4@t))) (G2f66@syntax-dispatch G35f4@t '(_ each-any (any . each-any) . each-any)))) G35f0@stx))) '#f))) (set! G2f44@let*-macro (lambda (G3622@stx) ((lambda (G3624@t) ((lambda (G3626@ls/false) (if (and G3626@ls/false (apply (lambda (G3628@lhs* G3629@rhs* G362a@b G362b@b*) (for-all G2d67@id? G3628@lhs*)) G3626@ls/false)) (apply (lambda (G3630@lhs* G3631@rhs* G3632@b G3633@b*) (G2f1c@bless ((letrec ((G3638@f (lambda (G363a@x*) (if (null? G363a@x*) (cons 'let (cons '() (cons G3632@b G3633@b*))) (list 'let (list (car G363a@x*)) (G3638@f (cdr G363a@x*))))))) G3638@f) (map list G3630@lhs* G3631@rhs*)))) G3626@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3624@t))) (G2f66@syntax-dispatch G3624@t '(_ #(each (any any)) any . each-any)))) G3622@stx))) (set! G2f46@or-macro (lambda (G363c@stx) ((lambda (G363e@t) ((lambda (G3640@ls/false) (if G3640@ls/false (apply (lambda () '#f) G3640@ls/false) ((lambda (G3642@t) ((lambda (G3644@ls/false) (if G3644@ls/false (apply (lambda (G3646@e G3647@e*) (G2f1c@bless ((letrec ((G364a@f (lambda (G364c@e G364d@e*) (if (null? G364d@e*) (list 'begin '#f G364c@e) (list 'let (list (list 't G364c@e)) (list 'if 't 't (G364a@f (car G364d@e*) (cdr G364d@e*)))))))) G364a@f) G3646@e G3647@e*))) G3644@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3642@t))) (G2f66@syntax-dispatch G3642@t '(_ any . each-any)))) G363e@t))) (G2f66@syntax-dispatch G363e@t '(_)))) G363c@stx))) (set! G2f48@and-macro (lambda (G3650@stx) ((lambda (G3652@t) ((lambda (G3654@ls/false) (if G3654@ls/false (apply (lambda () '#t) G3654@ls/false) ((lambda (G3656@t) ((lambda (G3658@ls/false) (if G3658@ls/false (apply (lambda (G365a@e G365b@e*) (G2f1c@bless ((letrec ((G365e@f (lambda (G3660@e G3661@e*) (if (null? G3661@e*) (list 'begin '#f G3660@e) (cons 'if (cons G3660@e (cons (G365e@f (car G3661@e*) (cdr G3661@e*)) '(#f)))))))) G365e@f) G365a@e G365b@e*))) G3658@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3656@t))) (G2f66@syntax-dispatch G3656@t '(_ any . each-any)))) G3652@t))) (G2f66@syntax-dispatch G3652@t '(_)))) G3650@stx))) (set! G2f4a@cond-macro (lambda (G3664@stx) ((lambda (G3666@t) ((lambda (G3668@ls/false) (if G3668@ls/false (apply (lambda (G366a@cls G366b@cls*) (G2f1c@bless ((letrec ((G366e@f (lambda (G3670@cls G3671@cls*) (if (null? G3671@cls*) ((lambda (G3674@t) ((lambda (G3676@ls/false) (if G3676@ls/false (apply (lambda (G3678@e G3679@e*) (cons 'begin (cons G3678@e G3679@e*))) G3676@ls/false) ((lambda (G367c@t) ((lambda (G367e@ls/false) (if G367e@ls/false (apply (lambda (G3680@e G3681@p) (list 'let (list (list 't G3680@e)) (list 'if 't (cons G3681@p '(t))))) G367e@ls/false) ((lambda (G3684@t) ((lambda (G3686@ls/false) (if G3686@ls/false (apply (lambda (G3688@e) (cons 'or (cons G3688@e '((if #f #f))))) G3686@ls/false) ((lambda (G368a@t) ((lambda (G368c@ls/false) (if G368c@ls/false (apply (lambda (G368e@e G368f@e*) (list 'if G368e@e (cons 'begin G368f@e*))) G368c@ls/false) ((lambda (G3692@t) ((lambda (G3694@ls/false) (if G3694@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid last clause" G3664@stx)) G3694@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3692@t))) (G2f66@syntax-dispatch G3692@t '_))) G368a@t))) (G2f66@syntax-dispatch G368a@t '(any . each-any)))) G3684@t))) (G2f66@syntax-dispatch G3684@t '(any)))) G367c@t))) (G2f66@syntax-dispatch G367c@t '(any #(scheme-id =>) any)))) G3674@t))) (G2f66@syntax-dispatch G3674@t '(#(scheme-id else) any . each-any)))) G3670@cls) ((lambda (G3696@t) ((lambda (G3698@ls/false) (if G3698@ls/false (apply (lambda (G369a@e G369b@e*) (G3053@syntax-violation '#f '"incorrect position of keyword else" G3664@stx)) G3698@ls/false) ((lambda (G369e@t) ((lambda (G36a0@ls/false) (if G36a0@ls/false (apply (lambda (G36a2@e G36a3@p) (list 'let (list (list 't G36a2@e)) (list 'if 't (cons G36a3@p '(t)) (G366e@f (car G3671@cls*) (cdr G3671@cls*))))) G36a0@ls/false) ((lambda (G36a6@t) ((lambda (G36a8@ls/false) (if G36a8@ls/false (apply (lambda (G36aa@e) (list 'or G36aa@e (G366e@f (car G3671@cls*) (cdr G3671@cls*)))) G36a8@ls/false) ((lambda (G36ac@t) ((lambda (G36ae@ls/false) (if G36ae@ls/false (apply (lambda (G36b0@e G36b1@e*) (list 'if G36b0@e (cons 'begin G36b1@e*) (G366e@f (car G3671@cls*) (cdr G3671@cls*)))) G36ae@ls/false) ((lambda (G36b4@t) ((lambda (G36b6@ls/false) (if G36b6@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid last clause" G3664@stx)) G36b6@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G36b4@t))) (G2f66@syntax-dispatch G36b4@t '_))) G36ac@t))) (G2f66@syntax-dispatch G36ac@t '(any . each-any)))) G36a6@t))) (G2f66@syntax-dispatch G36a6@t '(any)))) G369e@t))) (G2f66@syntax-dispatch G369e@t '(any #(scheme-id =>) any)))) G3696@t))) (G2f66@syntax-dispatch G3696@t '(#(scheme-id else) any . each-any)))) G3670@cls))))) G366e@f) G366a@cls G366b@cls*))) G3668@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3666@t))) (G2f66@syntax-dispatch G3666@t '(_ any . each-any)))) G3664@stx))) (set! G2f4c@do-include (lambda (G36b8@stx G36b9@id G36ba@filename) ((lambda (G36be@filename) (begin (if (not (and (string? G36be@filename) (G2d67@id? G36b9@id))) (G3053@syntax-violation '#f '"invalid syntax" G36b8@stx) (void)) (cons (G2f1c@bless 'begin) (with-input-from-file G36be@filename (lambda () ((letrec ((G36c0@f (lambda (G36c2@ls) ((lambda (G36c4@x) (if (eof-object? G36c4@x) (reverse G36c2@ls) (G36c0@f (cons (G2d45@datum->stx G36b9@id G36c4@x) G36c2@ls)))) (G28f6@G2822@read-annotated))))) G36c0@f) '())))))) (G2d7d@stx->datum G36ba@filename)))) (set! G2f4e@include-macro (lambda (G36c6@e) ((lambda (G36c8@t) ((lambda (G36ca@ls/false) (if G36ca@ls/false (apply (lambda (G36cc@id G36cd@filename) (G2f4c@do-include G36c6@e G36cc@id G36cd@filename)) G36ca@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G36c8@t))) (G2f66@syntax-dispatch G36c8@t '(any any)))) G36c6@e))) (set! G2f50@include-into-macro (lambda (G36d0@e) ((lambda (G36d2@t) ((lambda (G36d4@ls/false) (if G36d4@ls/false (apply (lambda (G36d6@id G36d7@filename) (G2f4c@do-include G36d0@e G36d6@id G36d7@filename)) G36d4@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G36d2@t))) (G2f66@syntax-dispatch G36d2@t '(_ any any)))) G36d0@e))) (set! G2f52@syntax-rules-macro (lambda (G36da@e) ((lambda (G36dc@t) ((lambda (G36de@ls/false) (if G36de@ls/false (apply (lambda (G36e0@lits G36e1@pat* G36e2@tmp*) (begin (G2f6c@verify-literals G36e0@lits G36da@e) (G2f1c@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36e0@lits (map (lambda (G36e6@pat G36e7@tmp) ((lambda (G36ea@t) ((lambda (G36ec@ls/false) (if G36ec@ls/false (apply (lambda (G36ee@rest) (list (cons 'g G36ee@rest) (list 'syntax G36e7@tmp))) G36ec@ls/false) ((lambda (G36f0@t) ((lambda (G36f2@ls/false) (if G36f2@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid syntax-rules pattern" G36da@e G36e6@pat)) G36f2@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G36f0@t))) (G2f66@syntax-dispatch G36f0@t '_))) G36ea@t))) (G2f66@syntax-dispatch G36ea@t '(_ . any)))) G36e6@pat)) G36e1@pat* G36e2@tmp*)))))))) G36de@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G36dc@t))) (G2f66@syntax-dispatch G36dc@t '(_ each-any . #(each (any any)))))) G36da@e))) (set! G2f54@quasiquote-macro ((lambda () ((lambda (G36f5@datum G3713@quasicons* G3715@quasicons G3717@quasiappend G3719@quasivector G371b@vquasi G371d@quasi) (begin (set! G36f5@datum (lambda (G37f8@x) (list (G2ef0@scheme-stx 'quote) (G2d4f@mkstx G37f8@x '() '() '())))) (set! G3713@quasicons* (lambda (G37f0@x G37f1@y) ((letrec ((G37f4@f (lambda (G37f6@x) (if (null? G37f6@x) G37f1@y (G3715@quasicons (car G37f6@x) (G37f4@f (cdr G37f6@x))))))) G37f4@f) G37f0@x))) (set! G3715@quasicons (lambda (G37ca@x G37cb@y) ((lambda (G37ce@t) ((lambda (G37d0@ls/false) (if G37d0@ls/false (apply (lambda (G37d2@dy) ((lambda (G37d4@t) ((lambda (G37d6@ls/false) (if G37d6@ls/false (apply (lambda (G37d8@dx) (list (G2ef0@scheme-stx 'quote) (cons G37d8@dx G37d2@dy))) G37d6@ls/false) ((lambda (G37da@t) ((lambda (G37dc@ls/false) (if G37dc@ls/false (apply (lambda () ((lambda (G37de@t) ((lambda (G37e0@ls/false) (if G37e0@ls/false (apply (lambda () (list (G2ef0@scheme-stx 'list) G37ca@x)) G37e0@ls/false) ((lambda (G37e2@t) ((lambda (G37e4@ls/false) (if G37e4@ls/false (apply (lambda () (list (G2ef0@scheme-stx 'cons) G37ca@x G37cb@y)) G37e4@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G37e2@t))) (G2f66@syntax-dispatch G37e2@t '_))) G37de@t))) (G2f66@syntax-dispatch G37de@t '()))) G37d2@dy)) G37dc@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G37da@t))) (G2f66@syntax-dispatch G37da@t '_))) G37d4@t))) (G2f66@syntax-dispatch G37d4@t '(#(scheme-id quote) any)))) G37ca@x)) G37d0@ls/false) ((lambda (G37e6@t) ((lambda (G37e8@ls/false) (if G37e8@ls/false (apply (lambda (G37ea@stuff) (cons* (G2ef0@scheme-stx 'list) G37ca@x G37ea@stuff)) G37e8@ls/false) ((lambda (G37ec@t) ((lambda (G37ee@ls/false) (if G37ee@ls/false (apply (lambda () (list (G2ef0@scheme-stx 'cons) G37ca@x G37cb@y)) G37ee@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G37ec@t))) (G2f66@syntax-dispatch G37ec@t '_))) G37e6@t))) (G2f66@syntax-dispatch G37e6@t '(#(scheme-id list) . each-any)))) G37ce@t))) (G2f66@syntax-dispatch G37ce@t '(#(scheme-id quote) any)))) G37cb@y))) (set! G3717@quasiappend (lambda (G37b0@x G37b1@y) ((lambda (G37b4@ls) (if (null? G37b4@ls) (list (G2ef0@scheme-stx 'quote) '()) (if (null? (cdr G37b4@ls)) (car G37b4@ls) (cons* (G2ef0@scheme-stx 'append) G37b4@ls)))) ((letrec ((G37b6@f (lambda (G37b8@x) (if (null? G37b8@x) ((lambda (G37ba@t) ((lambda (G37bc@ls/false) (if G37bc@ls/false (apply (lambda () '()) G37bc@ls/false) ((lambda (G37be@t) ((lambda (G37c0@ls/false) (if G37c0@ls/false (apply (lambda () (list G37b1@y)) G37c0@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G37be@t))) (G2f66@syntax-dispatch G37be@t '_))) G37ba@t))) (G2f66@syntax-dispatch G37ba@t '(#(scheme-id quote) ())))) G37b1@y) ((lambda (G37c2@t) ((lambda (G37c4@ls/false) (if G37c4@ls/false (apply (lambda () (G37b6@f (cdr G37b8@x))) G37c4@ls/false) ((lambda (G37c6@t) ((lambda (G37c8@ls/false) (if G37c8@ls/false (apply (lambda () (cons (car G37b8@x) (G37b6@f (cdr G37b8@x)))) G37c8@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G37c6@t))) (G2f66@syntax-dispatch G37c6@t '_))) G37c2@t))) (G2f66@syntax-dispatch G37c2@t '(#(scheme-id quote) ())))) (car G37b8@x)))))) G37b6@f) G37b0@x)))) (set! G3719@quasivector (lambda (G377e@x) ((lambda (G3780@pat-x) ((lambda (G3782@t) ((lambda (G3784@ls/false) (if G3784@ls/false (apply (lambda (G3786@x*) (list (G2ef0@scheme-stx 'quote) (list->vector G3786@x*))) G3784@ls/false) ((lambda (G3788@t) ((lambda (G378a@ls/false) (if G378a@ls/false (apply (lambda () ((letrec ((G378c@f (lambda (G378e@x G378f@k) ((lambda (G3792@t) ((lambda (G3794@ls/false) (if G3794@ls/false (apply (lambda (G3796@x*) (G378f@k (map (lambda (G3798@x) (list (G2ef0@scheme-stx 'quote) G3798@x)) G3796@x*))) G3794@ls/false) ((lambda (G379a@t) ((lambda (G379c@ls/false) (if G379c@ls/false (apply (lambda (G379e@x*) (G378f@k G379e@x*)) G379c@ls/false) ((lambda (G37a0@t) ((lambda (G37a2@ls/false) (if G37a2@ls/false (apply (lambda (G37a4@x G37a5@y) (G378c@f G37a5@y (lambda (G37a8@ls) (G378f@k (cons G37a4@x G37a8@ls))))) G37a2@ls/false) ((lambda (G37aa@t) ((lambda (G37ac@ls/false) (if G37ac@ls/false (apply (lambda () (list (G2ef0@scheme-stx 'list->vector) G3780@pat-x)) G37ac@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G37aa@t))) (G2f66@syntax-dispatch G37aa@t '_))) G37a0@t))) (G2f66@syntax-dispatch G37a0@t '(#(scheme-id cons) any any)))) G379a@t))) (G2f66@syntax-dispatch G379a@t '(#(scheme-id list) . each-any)))) G3792@t))) (G2f66@syntax-dispatch G3792@t '(#(scheme-id quote) each-any)))) G378e@x)))) G378c@f) G377e@x (lambda (G37ae@ls) (cons* (G2ef0@scheme-stx 'vector) G37ae@ls)))) G378a@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3788@t))) (G2f66@syntax-dispatch G3788@t '_))) G3782@t))) (G2f66@syntax-dispatch G3782@t '(#(scheme-id quote) each-any)))) G3780@pat-x)) G377e@x))) (set! G371b@vquasi (lambda (G375c@p G375d@lev) ((lambda (G3760@t) ((lambda (G3762@ls/false) (if G3762@ls/false (apply (lambda (G3764@p G3765@q) ((lambda (G3768@t) ((lambda (G376a@ls/false) (if G376a@ls/false (apply (lambda (G376c@p) (if (= G375d@lev '0) (G3713@quasicons* G376c@p (G371b@vquasi G3765@q G375d@lev)) (G3715@quasicons (G3715@quasicons (G36f5@datum 'unquote) (G371d@quasi G376c@p (- G375d@lev '1))) (G371b@vquasi G3765@q G375d@lev)))) G376a@ls/false) ((lambda (G376e@t) ((lambda (G3770@ls/false) (if G3770@ls/false (apply (lambda (G3772@p) (if (= G375d@lev '0) (G3717@quasiappend G3772@p (G371b@vquasi G3765@q G375d@lev)) (G3715@quasicons (G3715@quasicons (G36f5@datum 'unquote-splicing) (G371d@quasi G3772@p (- G375d@lev '1))) (G371b@vquasi G3765@q G375d@lev)))) G3770@ls/false) ((lambda (G3774@t) ((lambda (G3776@ls/false) (if G3776@ls/false (apply (lambda (G3778@p) (G3715@quasicons (G371d@quasi G3778@p G375d@lev) (G371b@vquasi G3765@q G375d@lev))) G3776@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3774@t))) (G2f66@syntax-dispatch G3774@t 'any))) G376e@t))) (G2f66@syntax-dispatch G376e@t '(#(scheme-id unquote-splicing) . each-any)))) G3768@t))) (G2f66@syntax-dispatch G3768@t '(#(scheme-id unquote) . each-any)))) G3764@p)) G3762@ls/false) ((lambda (G377a@t) ((lambda (G377c@ls/false) (if G377c@ls/false (apply (lambda () (list (G2ef0@scheme-stx 'quote) '())) G377c@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G377a@t))) (G2f66@syntax-dispatch G377a@t '()))) G3760@t))) (G2f66@syntax-dispatch G3760@t '(any . any)))) G375c@p))) (set! G371d@quasi (lambda (G3726@p G3727@lev) ((lambda (G372a@t) ((lambda (G372c@ls/false) (if G372c@ls/false (apply (lambda (G372e@p) (if (= G3727@lev '0) G372e@p (G3715@quasicons (G36f5@datum 'unquote) (G371d@quasi (list G372e@p) (- G3727@lev '1))))) G372c@ls/false) ((lambda (G3730@t) ((lambda (G3732@ls/false) (if G3732@ls/false (apply (lambda (G3734@p G3735@q) (if (= G3727@lev '0) (G3713@quasicons* G3734@p (G371d@quasi G3735@q G3727@lev)) (G3715@quasicons (G3715@quasicons (G36f5@datum 'unquote) (G371d@quasi G3734@p (- G3727@lev '1))) (G371d@quasi G3735@q G3727@lev)))) G3732@ls/false) ((lambda (G3738@t) ((lambda (G373a@ls/false) (if G373a@ls/false (apply (lambda (G373c@p G373d@q) (if (= G3727@lev '0) (G3717@quasiappend G373c@p (G371d@quasi G373d@q G3727@lev)) (G3715@quasicons (G3715@quasicons (G36f5@datum 'unquote-splicing) (G371d@quasi G373c@p (- G3727@lev '1))) (G371d@quasi G373d@q G3727@lev)))) G373a@ls/false) ((lambda (G3740@t) ((lambda (G3742@ls/false) (if G3742@ls/false (apply (lambda (G3744@p) (G3715@quasicons (G36f5@datum 'quasiquote) (G371d@quasi (list G3744@p) (+ G3727@lev '1)))) G3742@ls/false) ((lambda (G3746@t) ((lambda (G3748@ls/false) (if G3748@ls/false (apply (lambda (G374a@p G374b@q) (G3715@quasicons (G371d@quasi G374a@p G3727@lev) (G371d@quasi G374b@q G3727@lev))) G3748@ls/false) ((lambda (G374e@t) ((lambda (G3750@ls/false) (if (and G3750@ls/false (apply (lambda (G3752@x) (not (G2d2f@stx? G3752@x))) G3750@ls/false)) (apply (lambda (G3754@x) (G3719@quasivector (G371b@vquasi G3754@x G3727@lev))) G3750@ls/false) ((lambda (G3756@t) ((lambda (G3758@ls/false) (if G3758@ls/false (apply (lambda (G375a@p) (list (G2ef0@scheme-stx 'quote) G375a@p)) G3758@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3756@t))) (G2f66@syntax-dispatch G3756@t 'any))) G374e@t))) (G2f66@syntax-dispatch G374e@t '#(vector each-any)))) G3746@t))) (G2f66@syntax-dispatch G3746@t '(any . any)))) G3740@t))) (G2f66@syntax-dispatch G3740@t '(#(scheme-id quasiquote) any)))) G3738@t))) (G2f66@syntax-dispatch G3738@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3730@t))) (G2f66@syntax-dispatch G3730@t '((#(scheme-id unquote) . each-any) . any)))) G372a@t))) (G2f66@syntax-dispatch G372a@t '(#(scheme-id unquote) any)))) G3726@p))) (lambda (G371e@x) ((lambda (G3720@t) ((lambda (G3722@ls/false) (if G3722@ls/false (apply (lambda (G3724@e) (G371d@quasi G3724@e '0)) G3722@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3720@t))) (G2f66@syntax-dispatch G3720@t '(_ any)))) G371e@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f56@quasisyntax-macro ((lambda () ((lambda (G37fb@quasi) (begin (set! G37fb@quasi (lambda (G3813@p G3814@lev) ((lambda (G3817@t) ((lambda (G3819@ls/false) (if G3819@ls/false (apply (lambda (G381b@p) (if (= G3814@lev '0) ((lambda (G381d@g) (values (list G381d@g) (list G381b@p) G381d@g)) (gensym)) (call-with-values (lambda () (G37fb@quasi G381b@p (- G3814@lev '1))) (lambda (G3822@G381f G3823@G3820 G3824@G3821) ((lambda (G3828@p G3829@rhs* G382a@lhs*) (values G382a@lhs* G3829@rhs* (list 'unsyntax G3828@p))) G3824@G3821 G3823@G3820 G3822@G381f))))) G3819@ls/false) ((lambda (G382e@t) ((lambda (G3830@ls/false) (if (and G3830@ls/false (apply (lambda () (= G3814@lev '0)) G3830@ls/false)) (apply (lambda () (G3053@syntax-violation '#f '"incorrect use of unsyntax" G3813@p)) G3830@ls/false) ((lambda (G3832@t) ((lambda (G3834@ls/false) (if G3834@ls/false (apply (lambda (G3836@p* G3837@q) (call-with-values (lambda () (G37fb@quasi G3837@q G3814@lev)) (lambda (G383d@G383a G383e@G383b G383f@G383c) ((lambda (G3843@q G3844@rhs* G3845@lhs*) (if (= G3814@lev '0) ((lambda (G3849@g*) (values (append G3849@g* G3845@lhs*) (append G3836@p* G3844@rhs*) (append G3849@g* G3843@q))) (map (lambda (G384b@x) (gensym)) G3836@p*)) (call-with-values (lambda () (G37fb@quasi G3836@p* (- G3814@lev '1))) (lambda (G3850@G384d G3851@G384e G3852@G384f) ((lambda (G3856@p* G3857@rhs2* G3858@lhs2*) (values (append G3858@lhs2* G3845@lhs*) (append G3857@rhs2* G3844@rhs*) (cons (cons 'unsyntax G3856@p*) G3843@q))) G3852@G384f G3851@G384e G3850@G384d))))) G383f@G383c G383e@G383b G383d@G383a)))) G3834@ls/false) ((lambda (G385c@t) ((lambda (G385e@ls/false) (if G385e@ls/false (apply (lambda (G3860@p* G3861@q) (call-with-values (lambda () (G37fb@quasi G3861@q G3814@lev)) (lambda (G3867@G3864 G3868@G3865 G3869@G3866) ((lambda (G386d@q G386e@rhs* G386f@lhs*) (if (= G3814@lev '0) ((lambda (G3873@g*) (values (append (map (lambda (G3875@g) (cons G3875@g '(...))) G3873@g*) G386f@lhs*) (append G3860@p* G386e@rhs*) (append (apply append (map (lambda (G3877@g) (cons G3877@g '(...))) G3873@g*)) G386d@q))) (map (lambda (G3879@x) (gensym)) G3860@p*)) (call-with-values (lambda () (G37fb@quasi G3860@p* (- G3814@lev '1))) (lambda (G387e@G387b G387f@G387c G3880@G387d) ((lambda (G3884@p* G3885@rhs2* G3886@lhs2*) (values (append G3886@lhs2* G386f@lhs*) (append G3885@rhs2* G386e@rhs*) (cons (cons 'unsyntax-splicing G3884@p*) G386d@q))) G3880@G387d G387f@G387c G387e@G387b))))) G3869@G3866 G3868@G3865 G3867@G3864)))) G385e@ls/false) ((lambda (G388a@t) ((lambda (G388c@ls/false) (if (and G388c@ls/false (apply (lambda () (= G3814@lev '0)) G388c@ls/false)) (apply (lambda () (G3053@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3813@p)) G388c@ls/false) ((lambda (G388e@t) ((lambda (G3890@ls/false) (if G3890@ls/false (apply (lambda (G3892@p) (call-with-values (lambda () (G37fb@quasi G3892@p (+ G3814@lev '1))) (lambda (G3897@G3894 G3898@G3895 G3899@G3896) ((lambda (G389d@p G389e@rhs* G389f@lhs*) (values G389f@lhs* G389e@rhs* (list 'quasisyntax G389d@p))) G3899@G3896 G3898@G3895 G3897@G3894)))) G3890@ls/false) ((lambda (G38a3@t) ((lambda (G38a5@ls/false) (if G38a5@ls/false (apply (lambda (G38a7@p G38a8@q) (call-with-values (lambda () (G37fb@quasi G38a7@p G3814@lev)) (lambda (G38b1@G38ab G38b2@G38ac G38b3@G38ad) (call-with-values (lambda () (G37fb@quasi G38a8@q G3814@lev)) (lambda (G38b7@G38ae G38b8@G38af G38b9@G38b0) ((lambda (G38bd@q G38be@rhs2* G38bf@lhs2* G38c0@p G38c1@rhs* G38c2@lhs*) (values (append G38bf@lhs2* G38c2@lhs*) (append G38be@rhs2* G38c1@rhs*) (cons G38c0@p G38bd@q))) G38b9@G38b0 G38b8@G38af G38b7@G38ae G38b3@G38ad G38b2@G38ac G38b1@G38ab)))))) G38a5@ls/false) ((lambda (G38c9@t) ((lambda (G38cb@ls/false) (if G38cb@ls/false (apply (lambda (G38cd@x*) (call-with-values (lambda () (G37fb@quasi G38cd@x* G3814@lev)) (lambda (G38d2@G38cf G38d3@G38d0 G38d4@G38d1) ((lambda (G38d8@x* G38d9@rhs* G38da@lhs*) (values G38da@lhs* G38d9@rhs* (list->vector G38d8@x*))) G38d4@G38d1 G38d3@G38d0 G38d2@G38cf)))) G38cb@ls/false) ((lambda (G38de@t) ((lambda (G38e0@ls/false) (if G38e0@ls/false (apply (lambda () (values '() '() G3813@p)) G38e0@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G38de@t))) (G2f66@syntax-dispatch G38de@t '_))) G38c9@t))) (G2f66@syntax-dispatch G38c9@t '#(vector each-any)))) G38a3@t))) (G2f66@syntax-dispatch G38a3@t '(any . any)))) G388e@t))) (G2f66@syntax-dispatch G388e@t '(#(scheme-id quasisyntax) any)))) G388a@t))) (G2f66@syntax-dispatch G388a@t '#(scheme-id unsyntax-splicing)))) G385c@t))) (G2f66@syntax-dispatch G385c@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3832@t))) (G2f66@syntax-dispatch G3832@t '((#(scheme-id unsyntax) . each-any) . any)))) G382e@t))) (G2f66@syntax-dispatch G382e@t '#(scheme-id unsyntax)))) G3817@t))) (G2f66@syntax-dispatch G3817@t '(#(scheme-id unsyntax) any)))) G3813@p))) (lambda (G37fc@x) ((lambda (G37fe@t) ((lambda (G3800@ls/false) (if G3800@ls/false (apply (lambda (G3802@e) (call-with-values (lambda () (G37fb@quasi G3802@e '0)) (lambda (G3807@G3804 G3808@G3805 G3809@G3806) ((lambda (G380d@v G380e@rhs* G380f@lhs*) (G2f1c@bless (list 'syntax-case (cons 'list G380e@rhs*) '() (list G380f@lhs* (list 'syntax G380d@v))))) G3809@G3806 G3808@G3805 G3807@G3804)))) G3800@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G37fe@t))) (G2f66@syntax-dispatch G37fe@t '(_ any)))) G37fc@x)))) '#f)))) (set! G2f58@define-struct-macro (lambda (G38e2@stx) (G3053@syntax-violation '#f '"define-struct not supported" G38e2@stx))) (set! G2f5a@define-record-type-macro (lambda (G38e4@x) ((lambda (G38e7@id G38e9@get-record-name G38eb@get-record-constructor-name G38ed@get-record-predicate-name G38ef@get-clause G38f1@foo-rtd-code G38f3@parent-rtd-code G38f5@parent-rcd-code G38f7@foo-rcd-code G38f9@get-protocol-code G38fb@get-fields G38fd@get-mutator-indices G38ff@get-mutators G3901@get-accessors G3903@enumerate G3905@do-define-record G3907@verify-clauses) (begin (set! G38e7@id (lambda (G3ada@ctxt . G3adc@str*) (G3057@datum->syntax G3ada@ctxt (string->symbol (apply string-append (map (lambda (G3ade@x) (if (symbol? G3ade@x) (symbol->string G3ade@x) (if (string? G3ade@x) G3ade@x (assertion-violation 'define-record-type '"BUG")))) G3adc@str*)))))) (set! G38e9@get-record-name (lambda (G3ac8@spec) ((lambda (G3aca@t) ((lambda (G3acc@ls/false) (if G3acc@ls/false (apply (lambda (G3ace@foo G3acf@make-foo G3ad0@foo?) G3ace@foo) G3acc@ls/false) ((lambda (G3ad4@t) ((lambda (G3ad6@ls/false) (if G3ad6@ls/false (apply (lambda (G3ad8@foo) G3ad8@foo) G3ad6@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3ad4@t))) (G2f66@syntax-dispatch G3ad4@t 'any))) G3aca@t))) (G2f66@syntax-dispatch G3aca@t '(any any any)))) G3ac8@spec))) (set! G38eb@get-record-constructor-name (lambda (G3ab4@spec) ((lambda (G3ab6@t) ((lambda (G3ab8@ls/false) (if G3ab8@ls/false (apply (lambda (G3aba@foo G3abb@make-foo G3abc@foo?) G3abb@make-foo) G3ab8@ls/false) ((lambda (G3ac0@t) ((lambda (G3ac2@ls/false) (if (and G3ac2@ls/false (apply (lambda (G3ac4@foo) (G2d67@id? G3ac4@foo)) G3ac2@ls/false)) (apply (lambda (G3ac6@foo) (G38e7@id G3ac6@foo '"make-" (G2d7d@stx->datum G3ac6@foo))) G3ac2@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3ac0@t))) (G2f66@syntax-dispatch G3ac0@t 'any))) G3ab6@t))) (G2f66@syntax-dispatch G3ab6@t '(any any any)))) G3ab4@spec))) (set! G38ed@get-record-predicate-name (lambda (G3aa0@spec) ((lambda (G3aa2@t) ((lambda (G3aa4@ls/false) (if G3aa4@ls/false (apply (lambda (G3aa6@foo G3aa7@make-foo G3aa8@foo?) G3aa8@foo?) G3aa4@ls/false) ((lambda (G3aac@t) ((lambda (G3aae@ls/false) (if (and G3aae@ls/false (apply (lambda (G3ab0@foo) (G2d67@id? G3ab0@foo)) G3aae@ls/false)) (apply (lambda (G3ab2@foo) (G38e7@id G3ab2@foo (G2d7d@stx->datum G3ab2@foo) '"?")) G3aae@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3aac@t))) (G2f66@syntax-dispatch G3aac@t 'any))) G3aa2@t))) (G2f66@syntax-dispatch G3aa2@t '(any any any)))) G3aa0@spec))) (set! G38ef@get-clause (lambda (G3a8e@id G3a8f@ls) ((lambda (G3a92@t) ((lambda (G3a94@ls/false) (if G3a94@ls/false (apply (lambda () '#f) G3a94@ls/false) ((lambda (G3a96@t) ((lambda (G3a98@ls/false) (if G3a98@ls/false (apply (lambda (G3a9a@x G3a9b@rest G3a9c@ls) (if (G2d6f@free-id=? (G2f1c@bless G3a8e@id) G3a9a@x) (cons G3a9a@x G3a9b@rest) (G38ef@get-clause G3a8e@id G3a9c@ls))) G3a98@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a96@t))) (G2f66@syntax-dispatch G3a96@t '((any . any) . any)))) G3a92@t))) (G2f66@syntax-dispatch G3a92@t '()))) G3a8f@ls))) (set! G38f1@foo-rtd-code (lambda (G3a3c@name G3a3d@clause* G3a3e@parent-rtd-code) ((lambda (G3a43@convert-field-spec*) (begin (set! G3a43@convert-field-spec* (lambda (G3a74@ls) (list->vector (map (lambda (G3a76@x) ((lambda (G3a78@t) ((lambda (G3a7a@ls/false) (if G3a7a@ls/false (apply (lambda (G3a7c@name G3a7d@rest) (list 'mutable G3a7c@name)) G3a7a@ls/false) ((lambda (G3a80@t) ((lambda (G3a82@ls/false) (if G3a82@ls/false (apply (lambda (G3a84@name G3a85@rest) (list 'immutable G3a84@name)) G3a82@ls/false) ((lambda (G3a88@t) ((lambda (G3a8a@ls/false) (if G3a8a@ls/false (apply (lambda (G3a8c@name) (list 'immutable G3a8c@name)) G3a8a@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a88@t))) (G2f66@syntax-dispatch G3a88@t 'any))) G3a80@t))) (G2f66@syntax-dispatch G3a80@t '(#(scheme-id immutable) any . any)))) G3a78@t))) (G2f66@syntax-dispatch G3a78@t '(#(scheme-id mutable) any . any)))) G3a76@x)) G3a74@ls)))) ((lambda (G3a44@uid-code G3a45@sealed? G3a46@opaque? G3a47@fields) (G2f1c@bless (list 'make-record-type-descriptor (list 'quote G3a3c@name) G3a3e@parent-rtd-code G3a44@uid-code G3a45@sealed? G3a46@opaque? G3a47@fields))) ((lambda (G3a4c@t) ((lambda (G3a4e@ls/false) (if G3a4e@ls/false (apply (lambda () (list 'quote (gensym))) G3a4e@ls/false) ((lambda (G3a50@t) ((lambda (G3a52@ls/false) (if G3a52@ls/false (apply (lambda (G3a54@uid) (list 'quote G3a54@uid)) G3a52@ls/false) ((lambda (G3a56@t) ((lambda (G3a58@ls/false) (if G3a58@ls/false (apply (lambda () '#f) G3a58@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a56@t))) (G2f66@syntax-dispatch G3a56@t '_))) G3a50@t))) (G2f66@syntax-dispatch G3a50@t '(_ any)))) G3a4c@t))) (G2f66@syntax-dispatch G3a4c@t '(_)))) (G38ef@get-clause 'nongenerative G3a3d@clause*)) ((lambda (G3a5a@t) ((lambda (G3a5c@ls/false) (if G3a5c@ls/false (apply (lambda () '#t) G3a5c@ls/false) ((lambda (G3a5e@t) ((lambda (G3a60@ls/false) (if G3a60@ls/false (apply (lambda () '#f) G3a60@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a5e@t))) (G2f66@syntax-dispatch G3a5e@t '_))) G3a5a@t))) (G2f66@syntax-dispatch G3a5a@t '(_ #(atom #t))))) (G38ef@get-clause 'sealed G3a3d@clause*)) ((lambda (G3a62@t) ((lambda (G3a64@ls/false) (if G3a64@ls/false (apply (lambda () '#t) G3a64@ls/false) ((lambda (G3a66@t) ((lambda (G3a68@ls/false) (if G3a68@ls/false (apply (lambda () '#f) G3a68@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a66@t))) (G2f66@syntax-dispatch G3a66@t '_))) G3a62@t))) (G2f66@syntax-dispatch G3a62@t '(_ #(atom #t))))) (G38ef@get-clause 'opaque G3a3d@clause*)) ((lambda (G3a6a@t) ((lambda (G3a6c@ls/false) (if G3a6c@ls/false (apply (lambda (G3a6e@field-spec*) (list 'quote (G3a43@convert-field-spec* G3a6e@field-spec*))) G3a6c@ls/false) ((lambda (G3a70@t) ((lambda (G3a72@ls/false) (if G3a72@ls/false (apply (lambda () ''#()) G3a72@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a70@t))) (G2f66@syntax-dispatch G3a70@t '_))) G3a6a@t))) (G2f66@syntax-dispatch G3a6a@t '(_ . each-any)))) (G38ef@get-clause 'fields G3a3d@clause*))))) '#f))) (set! G38f3@parent-rtd-code (lambda (G3a24@clause*) ((lambda (G3a26@t) ((lambda (G3a28@ls/false) (if G3a28@ls/false (apply (lambda (G3a2a@name) (list 'record-type-descriptor G3a2a@name)) G3a28@ls/false) ((lambda (G3a2c@t) ((lambda (G3a2e@ls/false) (if G3a2e@ls/false (apply (lambda () ((lambda (G3a30@t) ((lambda (G3a32@ls/false) (if G3a32@ls/false (apply (lambda (G3a34@rtd G3a35@rcd) G3a34@rtd) G3a32@ls/false) ((lambda (G3a38@t) ((lambda (G3a3a@ls/false) (if G3a3a@ls/false (apply (lambda () '#f) G3a3a@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a38@t))) (G2f66@syntax-dispatch G3a38@t '#(atom #f)))) G3a30@t))) (G2f66@syntax-dispatch G3a30@t '(_ any any)))) (G38ef@get-clause 'parent-rtd G3a24@clause*))) G3a2e@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a2c@t))) (G2f66@syntax-dispatch G3a2c@t '#(atom #f)))) G3a26@t))) (G2f66@syntax-dispatch G3a26@t '(_ any)))) (G38ef@get-clause 'parent G3a24@clause*)))) (set! G38f5@parent-rcd-code (lambda (G3a0c@clause*) ((lambda (G3a0e@t) ((lambda (G3a10@ls/false) (if G3a10@ls/false (apply (lambda (G3a12@name) (list 'record-constructor-descriptor G3a12@name)) G3a10@ls/false) ((lambda (G3a14@t) ((lambda (G3a16@ls/false) (if G3a16@ls/false (apply (lambda () ((lambda (G3a18@t) ((lambda (G3a1a@ls/false) (if G3a1a@ls/false (apply (lambda (G3a1c@rtd G3a1d@rcd) G3a1d@rcd) G3a1a@ls/false) ((lambda (G3a20@t) ((lambda (G3a22@ls/false) (if G3a22@ls/false (apply (lambda () '#f) G3a22@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a20@t))) (G2f66@syntax-dispatch G3a20@t '#(atom #f)))) G3a18@t))) (G2f66@syntax-dispatch G3a18@t '(_ any any)))) (G38ef@get-clause 'parent-rtd G3a0c@clause*))) G3a16@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a14@t))) (G2f66@syntax-dispatch G3a14@t '#(atom #f)))) G3a0e@t))) (G2f66@syntax-dispatch G3a0e@t '(_ any)))) (G38ef@get-clause 'parent G3a0c@clause*)))) (set! G38f7@foo-rcd-code (lambda (G3a04@clause* G3a05@foo-rtd G3a06@protocol G3a07@parent-rcd-code) (list 'make-record-constructor-descriptor G3a05@foo-rtd G3a07@parent-rcd-code G3a06@protocol))) (set! G38f9@get-protocol-code (lambda (G39f8@clause*) ((lambda (G39fa@t) ((lambda (G39fc@ls/false) (if G39fc@ls/false (apply (lambda (G39fe@expr) G39fe@expr) G39fc@ls/false) ((lambda (G3a00@t) ((lambda (G3a02@ls/false) (if G3a02@ls/false (apply (lambda () '#f) G3a02@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3a00@t))) (G2f66@syntax-dispatch G3a00@t '_))) G39fa@t))) (G2f66@syntax-dispatch G39fa@t '(_ any)))) (G38ef@get-clause 'protocol G39f8@clause*)))) (set! G38fb@get-fields (lambda (G39e6@clause*) ((lambda (G39e8@t) ((lambda (G39ea@ls/false) (if G39ea@ls/false (apply (lambda () '()) G39ea@ls/false) ((lambda (G39ec@t) ((lambda (G39ee@ls/false) (if G39ee@ls/false (apply (lambda (G39f0@f*) G39f0@f*) G39ee@ls/false) ((lambda (G39f2@t) ((lambda (G39f4@ls/false) (if G39f4@ls/false (apply (lambda (G39f6@rest) (G38fb@get-fields G39f6@rest)) G39f4@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G39f2@t))) (G2f66@syntax-dispatch G39f2@t '(_ . any)))) G39ec@t))) (G2f66@syntax-dispatch G39ec@t '((#(scheme-id fields) . each-any) . _)))) G39e8@t))) (G2f66@syntax-dispatch G39e8@t '()))) G39e6@clause*))) (set! G38fd@get-mutator-indices (lambda (G39ce@fields) ((letrec ((G39d0@f (lambda (G39d2@fields G39d3@i) ((lambda (G39d6@t) ((lambda (G39d8@ls/false) (if G39d8@ls/false (apply (lambda () '()) G39d8@ls/false) ((lambda (G39da@t) ((lambda (G39dc@ls/false) (if G39dc@ls/false (apply (lambda (G39de@rest) (cons G39d3@i (G39d0@f G39de@rest (+ G39d3@i '1)))) G39dc@ls/false) ((lambda (G39e0@t) ((lambda (G39e2@ls/false) (if G39e2@ls/false (apply (lambda (G39e4@rest) (G39d0@f G39e4@rest (+ G39d3@i '1))) G39e2@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G39e0@t))) (G2f66@syntax-dispatch G39e0@t '(_ . any)))) G39da@t))) (G2f66@syntax-dispatch G39da@t '((#(scheme-id mutable) . _) . any)))) G39d6@t))) (G2f66@syntax-dispatch G39d6@t '()))) G39d2@fields)))) G39d0@f) G39ce@fields '0))) (set! G38ff@get-mutators (lambda (G39a4@foo G39a5@fields) ((lambda (G39a9@gen-name) (begin (set! G39a9@gen-name (lambda (G39cc@x) (G3057@datum->syntax G39a4@foo (string->symbol (string-append (symbol->string (G3059@syntax->datum G39a4@foo)) '"-" (symbol->string (G3059@syntax->datum G39cc@x)) '"-set!"))))) ((letrec ((G39aa@f (lambda (G39ac@fields) ((lambda (G39ae@t) ((lambda (G39b0@ls/false) (if G39b0@ls/false (apply (lambda () '()) G39b0@ls/false) ((lambda (G39b2@t) ((lambda (G39b4@ls/false) (if G39b4@ls/false (apply (lambda (G39b6@name G39b7@accessor G39b8@mutator G39b9@rest) (cons G39b8@mutator (G39aa@f G39b9@rest))) G39b4@ls/false) ((lambda (G39be@t) ((lambda (G39c0@ls/false) (if G39c0@ls/false (apply (lambda (G39c2@name G39c3@rest) (cons (G39a9@gen-name G39c2@name) (G39aa@f G39c3@rest))) G39c0@ls/false) ((lambda (G39c6@t) ((lambda (G39c8@ls/false) (if G39c8@ls/false (apply (lambda (G39ca@rest) (G39aa@f G39ca@rest)) G39c8@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G39c6@t))) (G2f66@syntax-dispatch G39c6@t '(_ . any)))) G39be@t))) (G2f66@syntax-dispatch G39be@t '((#(scheme-id mutable) any) . any)))) G39b2@t))) (G2f66@syntax-dispatch G39b2@t '((#(scheme-id mutable) any any any) . any)))) G39ae@t))) (G2f66@syntax-dispatch G39ae@t '()))) G39ac@fields)))) G39aa@f) G39a5@fields))) '#f))) (set! G3901@get-accessors (lambda (G3960@foo G3961@fields) ((lambda (G3965@gen-name) (begin (set! G3965@gen-name (lambda (G39a2@x) (G3057@datum->syntax G3960@foo (string->symbol (string-append (symbol->string (G3059@syntax->datum G3960@foo)) '"-" (symbol->string (G3059@syntax->datum G39a2@x))))))) (map (lambda (G3966@field) ((lambda (G3968@t) ((lambda (G396a@ls/false) (if (and G396a@ls/false (apply (lambda (G396c@name G396d@accessor G396e@mutator) (G2d67@id? G396d@accessor)) G396a@ls/false)) (apply (lambda (G3972@name G3973@accessor G3974@mutator) G3973@accessor) G396a@ls/false) ((lambda (G3978@t) ((lambda (G397a@ls/false) (if (and G397a@ls/false (apply (lambda (G397c@name G397d@accessor) (G2d67@id? G397d@accessor)) G397a@ls/false)) (apply (lambda (G3980@name G3981@accessor) G3981@accessor) G397a@ls/false) ((lambda (G3984@t) ((lambda (G3986@ls/false) (if (and G3986@ls/false (apply (lambda (G3988@name) (G2d67@id? G3988@name)) G3986@ls/false)) (apply (lambda (G398a@name) (G3965@gen-name G398a@name)) G3986@ls/false) ((lambda (G398c@t) ((lambda (G398e@ls/false) (if (and G398e@ls/false (apply (lambda (G3990@name) (G2d67@id? G3990@name)) G398e@ls/false)) (apply (lambda (G3992@name) (G3965@gen-name G3992@name)) G398e@ls/false) ((lambda (G3994@t) ((lambda (G3996@ls/false) (if (and G3996@ls/false (apply (lambda (G3998@name) (G2d67@id? G3998@name)) G3996@ls/false)) (apply (lambda (G399a@name) (G3965@gen-name G399a@name)) G3996@ls/false) ((lambda (G399c@t) ((lambda (G399e@ls/false) (if G399e@ls/false (apply (lambda (G39a0@others) (G3053@syntax-violation '#f '"invalid field spec" G3966@field)) G399e@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G399c@t))) (G2f66@syntax-dispatch G399c@t 'any))) G3994@t))) (G2f66@syntax-dispatch G3994@t 'any))) G398c@t))) (G2f66@syntax-dispatch G398c@t '(#(scheme-id immutable) any)))) G3984@t))) (G2f66@syntax-dispatch G3984@t '(#(scheme-id mutable) any)))) G3978@t))) (G2f66@syntax-dispatch G3978@t '(#(scheme-id immutable) any any)))) G3968@t))) (G2f66@syntax-dispatch G3968@t '(#(scheme-id mutable) any any any)))) G3966@field)) G3961@fields))) '#f))) (set! G3903@enumerate (lambda (G3958@ls) ((letrec ((G395a@f (lambda (G395c@ls G395d@i) (if (null? G395c@ls) '() (cons G395d@i (G395a@f (cdr G395c@ls) (+ G395d@i '1))))))) G395a@f) G3958@ls '0))) (set! G3905@do-define-record (lambda (G3930@namespec G3931@clause*) ((lambda (G3934@foo) ((lambda (G3936@foo-rtd) ((lambda (G3938@foo-rcd) ((lambda (G393a@protocol) ((lambda (G393c@make-foo) ((lambda (G393e@fields) ((lambda (G3940@idx*) ((lambda (G3942@foo-x*) ((lambda (G3944@set-foo-x!*) ((lambda (G3946@set-foo-idx*) ((lambda (G3948@foo?) ((lambda (G394a@foo-rtd-code) ((lambda (G394c@foo-rcd-code) ((lambda (G394e@protocol-code) ((lambda () (G2f1c@bless (cons 'begin (cons (list 'define G3936@foo-rtd G394a@foo-rtd-code) (cons (list 'define G393a@protocol G394e@protocol-code) (cons (list 'define G3938@foo-rcd G394c@foo-rcd-code) (cons (list 'define-syntax G3934@foo (list 'list ''$rtd (list 'syntax G3936@foo-rtd) (list 'syntax G3938@foo-rcd))) (cons (list 'define G3948@foo? (list 'record-predicate G3936@foo-rtd)) (cons (list 'define G393c@make-foo (list 'record-constructor G3938@foo-rcd)) (append (map (lambda (G3950@foo-x G3951@idx) (list 'define G3950@foo-x (list 'record-accessor G3936@foo-rtd G3951@idx))) G3942@foo-x* G3940@idx*) (map (lambda (G3954@set-foo-x! G3955@idx) (list 'define G3954@set-foo-x! (list 'record-mutator G3936@foo-rtd G3955@idx))) G3944@set-foo-x!* G3946@set-foo-idx*))))))))))))) (G38f9@get-protocol-code G3931@clause*))) (G38f7@foo-rcd-code G3931@clause* G3936@foo-rtd G393a@protocol (G38f5@parent-rcd-code G3931@clause*)))) (G38f1@foo-rtd-code G3934@foo G3931@clause* (G38f3@parent-rtd-code G3931@clause*)))) (G38ed@get-record-predicate-name G3930@namespec))) (G38fd@get-mutator-indices G393e@fields))) (G38ff@get-mutators G3934@foo G393e@fields))) (G3901@get-accessors G3934@foo G393e@fields))) (G3903@enumerate G393e@fields))) (G38fb@get-fields G3931@clause*))) (G38eb@get-record-constructor-name G3930@namespec))) (gensym))) (gensym))) (gensym))) (G38e9@get-record-name G3930@namespec)))) (set! G3907@verify-clauses (lambda (G3910@x G3911@cls*) ((lambda (G3915@valid-kwds G3917@free-id-member?) (begin (set! G3915@valid-kwds (map G2f1c@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3917@free-id-member? (lambda (G392c@x G392d@ls) (and (pair? G392d@ls) (or (G2d6f@free-id=? G392c@x (car G392d@ls)) (G3917@free-id-member? G392c@x (cdr G392d@ls)))))) ((letrec ((G3918@f (lambda (G391a@cls* G391b@seen*) (if (not (null? G391a@cls*)) ((lambda (G391e@t) ((lambda (G3920@ls/false) (if G3920@ls/false (apply (lambda (G3922@kwd G3923@rest) (if (or (not (G2d67@id? G3922@kwd)) (not (G3917@free-id-member? G3922@kwd G3915@valid-kwds))) (G3053@syntax-violation '#f '"not a valid define-record-type keyword" G3922@kwd) (if (G2d75@bound-id-member? G3922@kwd G391b@seen*) (G3053@syntax-violation '#f '"duplicate use of keyword " G3910@x G3922@kwd) (G3918@f (cdr G391a@cls*) (cons G3922@kwd G391b@seen*))))) G3920@ls/false) ((lambda (G3926@t) ((lambda (G3928@ls/false) (if G3928@ls/false (apply (lambda (G392a@cls) (G3053@syntax-violation '#f '"malformed define-record-type clause" G392a@cls)) G3928@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3926@t))) (G2f66@syntax-dispatch G3926@t 'any))) G391e@t))) (G2f66@syntax-dispatch G391e@t '(any . any)))) (car G391a@cls*)) (void))))) G3918@f) G3911@cls* '()))) '#f '#f))) ((lambda (G3908@t) ((lambda (G390a@ls/false) (if G390a@ls/false (apply (lambda (G390c@namespec G390d@clause*) (begin (G3907@verify-clauses G38e4@x G390d@clause*) (G3905@do-define-record G390c@namespec G390d@clause*))) G390a@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3908@t))) (G2f66@syntax-dispatch G3908@t '(_ any . each-any)))) G38e4@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f5c@define-condition-type-macro (lambda (G3ae0@x) ((lambda (G3ae3@mkname) (begin (set! G3ae3@mkname (lambda (G3b10@name G3b11@suffix) (G3057@datum->syntax G3b10@name (string->symbol (string-append (symbol->string (G3059@syntax->datum G3b10@name)) G3b11@suffix))))) ((lambda (G3ae4@t) ((lambda (G3ae6@ls/false) (if (and G3ae6@ls/false (apply (lambda (G3ae8@ctxt G3ae9@name G3aea@super G3aeb@constructor G3aec@predicate G3aed@field* G3aee@accessor*) (and (G2d67@id? G3ae9@name) (G2d67@id? G3aea@super) (G2d67@id? G3aeb@constructor) (G2d67@id? G3aec@predicate) (for-all G2d67@id? G3aed@field*) (for-all G2d67@id? G3aee@accessor*))) G3ae6@ls/false)) (apply (lambda (G3af6@ctxt G3af7@name G3af8@super G3af9@constructor G3afa@predicate G3afb@field* G3afc@accessor*) ((lambda (G3b04@aux-accessor*) (G2f1c@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3af7@name G3af9@constructor (gensym)) (cons (list 'parent G3af8@super) (cons (cons 'fields (map (lambda (G3b06@field G3b07@aux) (list 'immutable G3b06@field G3b07@aux)) G3afb@field* G3b04@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3afa@predicate (list 'condition-predicate (list 'record-type-descriptor G3af7@name))) (map (lambda (G3b0a@accessor G3b0b@aux) (list 'define G3b0a@accessor (list 'condition-accessor (list 'record-type-descriptor G3af7@name) G3b0b@aux))) G3afc@accessor* G3b04@aux-accessor*)))))) (map (lambda (G3b0e@x) (gensym)) G3afc@accessor*))) G3ae6@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3ae4@t))) (G2f66@syntax-dispatch G3ae4@t '(any any any any any . #(each (any any)))))) G3ae0@x))) '#f))) (set! G2f5e@incorrect-usage-macro (lambda (G3b14@e) (G3053@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b14@e))) (set! G2f60@parameterize-macro (lambda (G3b16@e) ((lambda (G3b18@t) ((lambda (G3b1a@ls/false) (if G3b1a@ls/false (apply (lambda (G3b1c@b G3b1d@b*) (G2f1c@bless (cons 'let (cons '() (cons G3b1c@b G3b1d@b*))))) G3b1a@ls/false) ((lambda (G3b20@t) ((lambda (G3b22@ls/false) (if G3b22@ls/false (apply (lambda (G3b24@olhs* G3b25@orhs* G3b26@b G3b27@b*) ((lambda (G3b2c@lhs* G3b2d@rhs*) (G2f1c@bless (cons (list 'lambda (append G3b2c@lhs* G3b2d@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b30@lhs G3b31@rhs) (list 'let (list (list 't (list G3b30@lhs))) (list G3b30@lhs G3b31@rhs) (cons 'set! (cons G3b31@rhs '(t))))) G3b2c@lhs* G3b2d@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b26@b G3b27@b*))) '(swap)))))) (append G3b24@olhs* G3b25@orhs*)))) (G303f@generate-temporaries G3b24@olhs*) (G303f@generate-temporaries G3b25@orhs*))) G3b22@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3b20@t))) (G2f66@syntax-dispatch G3b20@t '(_ #(each (any any)) any . each-any)))) G3b18@t))) (G2f66@syntax-dispatch G3b18@t '(_ () any . each-any)))) G3b16@e))) (set! G2f62@foreign-call-transformer (lambda (G3b34@e G3b35@r G3b36@mr) ((lambda (G3b3a@t) ((lambda (G3b3c@ls/false) (if G3b3c@ls/false (apply (lambda (G3b3e@name G3b3f@arg*) (cons 'foreign-call (cons (G2f8a@chi-expr G3b3e@name G3b35@r G3b36@mr) (G2f86@chi-expr* G3b3f@arg* G3b35@r G3b36@mr)))) G3b3c@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3b3a@t))) (G2f66@syntax-dispatch G3b3a@t '(_ any . each-any)))) G3b34@e))) (set! G2f64@convert-pattern (lambda (G3b42@pattern G3b43@keys) ((lambda (G3b47@cvt* G3b49@cvt) (begin (set! G3b47@cvt* (lambda (G3bd8@p* G3bd9@n G3bda@ids) (if (null? G3bd8@p*) (values '() G3bda@ids) (call-with-values (lambda () (G3b47@cvt* (cdr G3bd8@p*) G3bd9@n G3bda@ids)) (lambda (G3be0@G3bde G3be1@G3bdf) ((lambda (G3be4@ids G3be5@y) (call-with-values (lambda () (G3b49@cvt (car G3bd8@p*) G3bd9@n G3be4@ids)) (lambda (G3bea@G3be8 G3beb@G3be9) ((lambda (G3bee@ids G3bef@x) (values (cons G3bef@x G3be5@y) G3bee@ids)) G3beb@G3be9 G3bea@G3be8)))) G3be1@G3bdf G3be0@G3bde)))))) (set! G3b49@cvt (lambda (G3b4a@p G3b4b@n G3b4c@ids) ((lambda (G3b50@t) ((lambda (G3b52@ls/false) (if (and G3b52@ls/false (apply (lambda (G3b54@id) (G2d67@id? G3b54@id)) G3b52@ls/false)) (apply (lambda (G3b56@id) (if (G2d75@bound-id-member? G3b4a@p G3b43@keys) (values (vector 'free-id G3b4a@p) G3b4c@ids) (if (G2d6f@free-id=? G3b4a@p (G2ef0@scheme-stx '_)) (values '_ G3b4c@ids) (values 'any (cons (cons G3b4a@p G3b4b@n) G3b4c@ids))))) G3b52@ls/false) ((lambda (G3b58@t) ((lambda (G3b5a@ls/false) (if (and G3b5a@ls/false (apply (lambda (G3b5c@p G3b5d@dots) (G2f68@ellipsis? G3b5d@dots)) G3b5a@ls/false)) (apply (lambda (G3b60@p G3b61@dots) (call-with-values (lambda () (G3b49@cvt G3b60@p (+ G3b4b@n '1) G3b4c@ids)) (lambda (G3b66@G3b64 G3b67@G3b65) ((lambda (G3b6a@ids G3b6b@p) (values (if (eq? G3b6b@p 'any) 'each-any (vector 'each G3b6b@p)) G3b6a@ids)) G3b67@G3b65 G3b66@G3b64)))) G3b5a@ls/false) ((lambda (G3b6e@t) ((lambda (G3b70@ls/false) (if (and G3b70@ls/false (apply (lambda (G3b72@x G3b73@dots G3b74@ys G3b75@z) (G2f68@ellipsis? G3b73@dots)) G3b70@ls/false)) (apply (lambda (G3b7a@x G3b7b@dots G3b7c@ys G3b7d@z) (call-with-values (lambda () (G3b49@cvt G3b7d@z G3b4b@n G3b4c@ids)) (lambda (G3b84@G3b82 G3b85@G3b83) ((lambda (G3b88@ids G3b89@z) (call-with-values (lambda () (G3b47@cvt* G3b7c@ys G3b4b@n G3b88@ids)) (lambda (G3b8e@G3b8c G3b8f@G3b8d) ((lambda (G3b92@ids G3b93@ys) (call-with-values (lambda () (G3b49@cvt G3b7a@x (+ G3b4b@n '1) G3b92@ids)) (lambda (G3b98@G3b96 G3b99@G3b97) ((lambda (G3b9c@ids G3b9d@x) (values (vector 'each+ G3b9d@x (reverse G3b93@ys) G3b89@z) G3b9c@ids)) G3b99@G3b97 G3b98@G3b96)))) G3b8f@G3b8d G3b8e@G3b8c)))) G3b85@G3b83 G3b84@G3b82)))) G3b70@ls/false) ((lambda (G3ba0@t) ((lambda (G3ba2@ls/false) (if G3ba2@ls/false (apply (lambda (G3ba4@x G3ba5@y) (call-with-values (lambda () (G3b49@cvt G3ba5@y G3b4b@n G3b4c@ids)) (lambda (G3baa@G3ba8 G3bab@G3ba9) ((lambda (G3bae@ids G3baf@y) (call-with-values (lambda () (G3b49@cvt G3ba4@x G3b4b@n G3bae@ids)) (lambda (G3bb4@G3bb2 G3bb5@G3bb3) ((lambda (G3bb8@ids G3bb9@x) (values (cons G3bb9@x G3baf@y) G3bb8@ids)) G3bb5@G3bb3 G3bb4@G3bb2)))) G3bab@G3ba9 G3baa@G3ba8)))) G3ba2@ls/false) ((lambda (G3bbc@t) ((lambda (G3bbe@ls/false) (if G3bbe@ls/false (apply (lambda () (values '() G3b4c@ids)) G3bbe@ls/false) ((lambda (G3bc0@t) ((lambda (G3bc2@ls/false) (if (and G3bc2@ls/false (apply (lambda (G3bc4@p) (not (G2d2f@stx? G3bc4@p))) G3bc2@ls/false)) (apply (lambda (G3bc6@p) (call-with-values (lambda () (G3b49@cvt G3bc6@p G3b4b@n G3b4c@ids)) (lambda (G3bca@G3bc8 G3bcb@G3bc9) ((lambda (G3bce@ids G3bcf@p) (values (vector 'vector G3bcf@p) G3bce@ids)) G3bcb@G3bc9 G3bca@G3bc8)))) G3bc2@ls/false) ((lambda (G3bd2@t) ((lambda (G3bd4@ls/false) (if G3bd4@ls/false (apply (lambda (G3bd6@datum) (values (vector 'atom (G2d7d@stx->datum G3bd6@datum)) G3b4c@ids)) G3bd4@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3bd2@t))) (G2f66@syntax-dispatch G3bd2@t 'any))) G3bc0@t))) (G2f66@syntax-dispatch G3bc0@t '#(vector each-any)))) G3bbc@t))) (G2f66@syntax-dispatch G3bbc@t '()))) G3ba0@t))) (G2f66@syntax-dispatch G3ba0@t '(any . any)))) G3b6e@t))) (G2f66@syntax-dispatch G3b6e@t '(any any . #(each+ any () any))))) G3b58@t))) (G2f66@syntax-dispatch G3b58@t '(any any)))) G3b50@t))) (G2f66@syntax-dispatch G3b50@t 'any))) G3b4a@p))) (G3b49@cvt G3b42@pattern '0 '()))) '#f '#f))) (set! G2f66@syntax-dispatch ((lambda () ((lambda (G3bf3@stx^ G3bf5@match-each G3bf7@match-each+ G3bf9@match-each-any G3bfb@match-empty G3bfd@combine G3bff@match* G3c01@match) (begin (set! G3bf3@stx^ (lambda (G3cbc@e G3cbd@m* G3cbe@s* G3cbf@ae*) (if (and (null? G3cbd@m*) (null? G3cbe@s*) (null? G3cbf@ae*)) G3cbc@e (G2d4f@mkstx G3cbc@e G3cbd@m* G3cbe@s* G3cbf@ae*)))) (set! G3bf5@match-each (lambda (G3c9f@e G3ca0@p G3ca1@m* G3ca2@s* G3ca3@ae*) (if (pair? G3c9f@e) ((lambda (G3ca9@first) (and G3ca9@first ((lambda (G3cab@rest) (and G3cab@rest (cons G3ca9@first G3cab@rest))) (G3bf5@match-each (cdr G3c9f@e) G3ca0@p G3ca1@m* G3ca2@s* G3ca3@ae*)))) (G3c01@match (car G3c9f@e) G3ca0@p G3ca1@m* G3ca2@s* G3ca3@ae* '())) (if (null? G3c9f@e) '() (if (G2d2f@stx? G3c9f@e) (and (not (G2ce1@top-marked? G3ca1@m*)) (call-with-values (lambda () (G2d4d@join-wraps G3ca1@m* G3ca2@s* G3ca3@ae* G3c9f@e)) (lambda (G3cb0@G3cad G3cb1@G3cae G3cb2@G3caf) ((lambda (G3cb6@ae* G3cb7@s* G3cb8@m*) (G3bf5@match-each (G2d33@stx-expr G3c9f@e) G3ca0@p G3cb8@m* G3cb7@s* G3cb6@ae*)) G3cb2@G3caf G3cb1@G3cae G3cb0@G3cad)))) (if (G28f8@G2826@annotation? G3c9f@e) (G3bf5@match-each (G28fa@G282a@annotation-expression G3c9f@e) G3ca0@p G3ca1@m* G3ca2@s* G3ca3@ae*) '#f)))))) (set! G3bf7@match-each+ (lambda (G3c65@e G3c66@x-pat G3c67@y-pat G3c68@z-pat G3c69@m* G3c6a@s* G3c6b@ae* G3c6c@r) ((letrec ((G3c75@f (lambda (G3c77@e G3c78@m* G3c79@s* G3c7a@ae*) (if (pair? G3c77@e) (call-with-values (lambda () (G3c75@f (cdr G3c77@e) G3c78@m* G3c79@s* G3c7a@ae*)) (lambda (G3c82@G3c7f G3c83@G3c80 G3c84@G3c81) ((lambda (G3c88@r G3c89@y-pat G3c8a@xr*) (if G3c88@r (if (null? G3c89@y-pat) ((lambda (G3c8e@xr) (if G3c8e@xr (values (cons G3c8e@xr G3c8a@xr*) G3c89@y-pat G3c88@r) (values '#f '#f '#f))) (G3c01@match (car G3c77@e) G3c66@x-pat G3c78@m* G3c79@s* G3c7a@ae* '())) (values '() (cdr G3c89@y-pat) (G3c01@match (car G3c77@e) (car G3c89@y-pat) G3c78@m* G3c79@s* G3c7a@ae* G3c88@r))) (values '#f '#f '#f))) G3c84@G3c81 G3c83@G3c80 G3c82@G3c7f))) (if (G2d2f@stx? G3c77@e) (if (G2ce1@top-marked? G3c78@m*) (values '() G3c67@y-pat (G3c01@match G3c77@e G3c68@z-pat G3c78@m* G3c79@s* G3c7a@ae* G3c6c@r)) (call-with-values (lambda () (G2d4d@join-wraps G3c78@m* G3c79@s* G3c7a@ae* G3c77@e)) (lambda (G3c93@G3c90 G3c94@G3c91 G3c95@G3c92) ((lambda (G3c99@ae* G3c9a@s* G3c9b@m*) (G3c75@f (G2d33@stx-expr G3c77@e) G3c9b@m* G3c9a@s* G3c99@ae*)) G3c95@G3c92 G3c94@G3c91 G3c93@G3c90)))) (if (G28f8@G2826@annotation? G3c77@e) (G3c75@f (G28fa@G282a@annotation-expression G3c77@e) G3c78@m* G3c79@s* G3c7a@ae*) (values '() G3c67@y-pat (G3c01@match G3c77@e G3c68@z-pat G3c78@m* G3c79@s* G3c7a@ae* G3c6c@r)))))))) G3c75@f) G3c65@e G3c69@m* G3c6a@s* G3c6b@ae*))) (set! G3bf9@match-each-any (lambda (G3c4c@e G3c4d@m* G3c4e@s* G3c4f@ae*) (if (pair? G3c4c@e) ((lambda (G3c54@l) (and G3c54@l (cons (G3bf3@stx^ (car G3c4c@e) G3c4d@m* G3c4e@s* G3c4f@ae*) G3c54@l))) (G3bf9@match-each-any (cdr G3c4c@e) G3c4d@m* G3c4e@s* G3c4f@ae*)) (if (null? G3c4c@e) '() (if (G2d2f@stx? G3c4c@e) (and (not (G2ce1@top-marked? G3c4d@m*)) (call-with-values (lambda () (G2d4d@join-wraps G3c4d@m* G3c4e@s* G3c4f@ae* G3c4c@e)) (lambda (G3c59@G3c56 G3c5a@G3c57 G3c5b@G3c58) ((lambda (G3c5f@ae* G3c60@s* G3c61@m*) (G3bf9@match-each-any (G2d33@stx-expr G3c4c@e) G3c61@m* G3c60@s* G3c5f@ae*)) G3c5b@G3c58 G3c5a@G3c57 G3c59@G3c56)))) (if (G28f8@G2826@annotation? G3c4c@e) (G3bf9@match-each-any (G28fa@G282a@annotation-expression G3c4c@e) G3c4d@m* G3c4e@s* G3c4f@ae*) '#f)))))) (set! G3bfb@match-empty (lambda (G3c46@p G3c47@r) (if (null? G3c46@p) G3c47@r (if (eq? G3c46@p '_) G3c47@r (if (eq? G3c46@p 'any) (cons '() G3c47@r) (if (pair? G3c46@p) (G3bfb@match-empty (car G3c46@p) (G3bfb@match-empty (cdr G3c46@p) G3c47@r)) (if (eq? G3c46@p 'each-any) (cons '() G3c47@r) ((lambda (G3c4a@t) (if (memv G3c4a@t '(each)) (G3bfb@match-empty (vector-ref G3c46@p '1) G3c47@r) (if (memv G3c4a@t '(each+)) (G3bfb@match-empty (vector-ref G3c46@p '1) (G3bfb@match-empty (reverse (vector-ref G3c46@p '2)) (G3bfb@match-empty (vector-ref G3c46@p '3) G3c47@r))) (if (memv G3c4a@t '(free-id atom)) G3c47@r (if (memv G3c4a@t '(scheme-id atom)) G3c47@r (if (memv G3c4a@t '(vector)) (G3bfb@match-empty (vector-ref G3c46@p '1) G3c47@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c46@p))))))) (vector-ref G3c46@p '0))))))))) (set! G3bfd@combine (lambda (G3c42@r* G3c43@r) (if (null? (car G3c42@r*)) G3c43@r (cons (map car G3c42@r*) (G3bfd@combine (map cdr G3c42@r*) G3c43@r))))) (set! G3bff@match* (lambda (G3c21@e G3c22@p G3c23@m* G3c24@s* G3c25@ae* G3c26@r) (if (null? G3c22@p) (and (null? G3c21@e) G3c26@r) (if (pair? G3c22@p) (and (pair? G3c21@e) (G3c01@match (car G3c21@e) (car G3c22@p) G3c23@m* G3c24@s* G3c25@ae* (G3c01@match (cdr G3c21@e) (cdr G3c22@p) G3c23@m* G3c24@s* G3c25@ae* G3c26@r))) (if (eq? G3c22@p 'each-any) ((lambda (G3c2d@l) (and G3c2d@l (cons G3c2d@l G3c26@r))) (G3bf9@match-each-any G3c21@e G3c23@m* G3c24@s* G3c25@ae*)) ((lambda (G3c2f@t) (if (memv G3c2f@t '(each)) (if (null? G3c21@e) (G3bfb@match-empty (vector-ref G3c22@p '1) G3c26@r) ((lambda (G3c31@r*) (and G3c31@r* (G3bfd@combine G3c31@r* G3c26@r))) (G3bf5@match-each G3c21@e (vector-ref G3c22@p '1) G3c23@m* G3c24@s* G3c25@ae*))) (if (memv G3c2f@t '(free-id)) (and (symbol? G3c21@e) (G2ce1@top-marked? G3c23@m*) (G2d6f@free-id=? (G3bf3@stx^ G3c21@e G3c23@m* G3c24@s* G3c25@ae*) (vector-ref G3c22@p '1)) G3c26@r) (if (memv G3c2f@t '(scheme-id)) (and (symbol? G3c21@e) (G2ce1@top-marked? G3c23@m*) (G2d6f@free-id=? (G3bf3@stx^ G3c21@e G3c23@m* G3c24@s* G3c25@ae*) (G2ef0@scheme-stx (vector-ref G3c22@p '1))) G3c26@r) (if (memv G3c2f@t '(each+)) (call-with-values (lambda () (G3bf7@match-each+ G3c21@e (vector-ref G3c22@p '1) (vector-ref G3c22@p '2) (vector-ref G3c22@p '3) G3c23@m* G3c24@s* G3c25@ae* G3c26@r)) (lambda (G3c36@G3c33 G3c37@G3c34 G3c38@G3c35) ((lambda (G3c3c@r G3c3d@y-pat G3c3e@xr*) (and G3c3c@r (null? G3c3d@y-pat) (if (null? G3c3e@xr*) (G3bfb@match-empty (vector-ref G3c22@p '1) G3c3c@r) (G3bfd@combine G3c3e@xr* G3c3c@r)))) G3c38@G3c35 G3c37@G3c34 G3c36@G3c33))) (if (memv G3c2f@t '(atom)) (and (fast-equal? (vector-ref G3c22@p '1) (G2d7b@strip G3c21@e G3c23@m*)) G3c26@r) (if (memv G3c2f@t '(vector)) (and (vector? G3c21@e) (G3c01@match (vector->list G3c21@e) (vector-ref G3c22@p '1) G3c23@m* G3c24@s* G3c25@ae* G3c26@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c22@p)))))))) (vector-ref G3c22@p '0))))))) (set! G3c01@match (lambda (G3c06@e G3c07@p G3c08@m* G3c09@s* G3c0a@ae* G3c0b@r) (if (not G3c0b@r) '#f (if (eq? G3c07@p '_) G3c0b@r (if (eq? G3c07@p 'any) (cons (G3bf3@stx^ G3c06@e G3c08@m* G3c09@s* G3c0a@ae*) G3c0b@r) (if (G2d2f@stx? G3c06@e) (and (not (G2ce1@top-marked? G3c08@m*)) (call-with-values (lambda () (G2d4d@join-wraps G3c08@m* G3c09@s* G3c0a@ae* G3c06@e)) (lambda (G3c15@G3c12 G3c16@G3c13 G3c17@G3c14) ((lambda (G3c1b@ae* G3c1c@s* G3c1d@m*) (G3c01@match (G2d33@stx-expr G3c06@e) G3c07@p G3c1d@m* G3c1c@s* G3c1b@ae* G3c0b@r)) G3c17@G3c14 G3c16@G3c13 G3c15@G3c12)))) (if (G28f8@G2826@annotation? G3c06@e) (G3c01@match (G28fa@G282a@annotation-expression G3c06@e) G3c07@p G3c08@m* G3c09@s* G3c0a@ae* G3c0b@r) (G3bff@match* G3c06@e G3c07@p G3c08@m* G3c09@s* G3c0a@ae* G3c0b@r)))))))) (lambda (G3c02@e G3c03@p) (G3c01@match G3c02@e G3c03@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f68@ellipsis? (lambda (G3cc4@x) (and (G2d67@id? G3cc4@x) (G2d6f@free-id=? G3cc4@x (G2ef0@scheme-stx '...))))) (set! G2f6a@underscore? (lambda (G3cc6@x) (and (G2d67@id? G3cc6@x) (G2d6f@free-id=? G3cc6@x (G2ef0@scheme-stx '_))))) (set! G2f6c@verify-literals (lambda (G3cc8@lits G3cc9@expr) (for-each (lambda (G3ccc@x) (if (or (not (G2d67@id? G3ccc@x)) (G2f68@ellipsis? G3ccc@x) (G2f6a@underscore? G3ccc@x)) (G3053@syntax-violation '#f '"invalid literal" G3cc9@expr G3ccc@x) (void))) G3cc8@lits))) (set! G2f6e@syntax-case-transformer ((lambda () ((lambda (G3ccf@build-dispatch-call G3cd1@invalid-ids-error G3cd3@gen-clause G3cd5@gen-syntax-case) (begin (set! G3ccf@build-dispatch-call (lambda (G3d3e@pvars G3d3f@expr G3d40@y G3d41@r G3d42@mr) ((lambda (G3d48@ids G3d49@levels) ((lambda (G3d4c@labels G3d4d@new-vars) ((lambda (G3d50@body) (list '(primitive apply) (G2cc1@G2bff@build-lambda '#f G3d4d@new-vars G3d50@body) G3d40@y)) (G2f8a@chi-expr (G2d53@add-subst (G2d22@make-full-rib G3d48@ids G3d4c@labels) G3d3f@expr) (append (map (lambda (G3d52@label G3d53@var G3d54@level) (cons G3d52@label (G2d87@make-binding 'syntax (cons G3d53@var G3d54@level)))) G3d4c@labels G3d4d@new-vars (map cdr G3d3e@pvars)) G3d41@r) G3d42@mr))) (map G2ce7@gen-label G3d48@ids) (map G2ce3@gen-lexical G3d48@ids))) (map car G3d3e@pvars) (map cdr G3d3e@pvars)))) (set! G3cd1@invalid-ids-error (lambda (G3d32@id* G3d33@e G3d34@class) ((letrec ((G3d38@find (lambda (G3d3a@id* G3d3b@ok*) (if (null? G3d3a@id*) (G3053@syntax-violation '#f '"invalid syntax" G3d33@e) (if (G2d67@id? (car G3d3a@id*)) (if (G2d75@bound-id-member? (car G3d3a@id*) G3d3b@ok*) (G304d@syntax-error (car G3d3a@id*) '"duplicate " G3d34@class) (G3d38@find (cdr G3d3a@id*) (cons (car G3d3a@id*) G3d3b@ok*))) (G304d@syntax-error (car G3d3a@id*) '"invalid " G3d34@class)))))) G3d38@find) G3d32@id* '()))) (set! G3cd3@gen-clause (lambda (G3d0c@x G3d0d@keys G3d0e@clauses G3d0f@r G3d10@mr G3d11@pat G3d12@fender G3d13@expr) (call-with-values (lambda () (G2f64@convert-pattern G3d11@pat G3d0d@keys)) (lambda (G3d1e@G3d1c G3d1f@G3d1d) ((lambda (G3d22@pvars G3d23@p) (if (not (G2d73@distinct-bound-ids? (map car G3d22@pvars))) (G3cd1@invalid-ids-error (map car G3d22@pvars) G3d11@pat '"pattern variable") (if (not (for-all (lambda (G3d26@x) (not (G2f68@ellipsis? (car G3d26@x)))) G3d22@pvars)) (G3053@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d11@pat) ((lambda (G3d28@y) ((lambda (G3d2a@test) ((lambda (G3d2c@conseq) ((lambda (G3d2e@altern) (list (G2cc1@G2bff@build-lambda '#f (list G3d28@y) (list 'if G3d2a@test G3d2c@conseq G3d2e@altern)) (list '(primitive syntax-dispatch) G3d0c@x (list 'quote G3d23@p)))) (G3cd5@gen-syntax-case G3d0c@x G3d0d@keys G3d0e@clauses G3d0f@r G3d10@mr))) (G3ccf@build-dispatch-call G3d22@pvars G3d13@expr G3d28@y G3d0f@r G3d10@mr))) (if (eq? G3d12@fender '#t) G3d28@y ((lambda (G3d30@call) (list 'if G3d28@y G3d30@call (list 'quote '#f))) (G3ccf@build-dispatch-call G3d22@pvars G3d12@fender G3d28@y G3d0f@r G3d10@mr))))) (G2ce3@gen-lexical 'tmp))))) G3d1f@G3d1d G3d1e@G3d1c))))) (set! G3cd5@gen-syntax-case (lambda (G3cea@x G3ceb@keys G3cec@clauses G3ced@r G3cee@mr) (if (null? G3cec@clauses) (list '(primitive syntax-error) G3cea@x) ((lambda (G3cf4@t) ((lambda (G3cf6@ls/false) (if G3cf6@ls/false (apply (lambda (G3cf8@pat G3cf9@expr) (if (and (G2d67@id? G3cf8@pat) (not (G2d75@bound-id-member? G3cf8@pat G3ceb@keys)) (not (G2f68@ellipsis? G3cf8@pat))) (if (G2d6f@free-id=? G3cf8@pat (G2ef0@scheme-stx '_)) (G2f8a@chi-expr G3cf9@expr G3ced@r G3cee@mr) ((lambda (G3cfc@lab G3cfd@lex) ((lambda (G3d00@body) (list (G2cc1@G2bff@build-lambda '#f (list G3cfd@lex) G3d00@body) G3cea@x)) (G2f8a@chi-expr (G2d53@add-subst (G2d22@make-full-rib (list G3cf8@pat) (list G3cfc@lab)) G3cf9@expr) (cons (cons G3cfc@lab (G2d87@make-binding 'syntax (cons G3cfd@lex '0))) G3ced@r) G3cee@mr))) (G2ce7@gen-label G3cf8@pat) (G2ce3@gen-lexical G3cf8@pat))) (G3cd3@gen-clause G3cea@x G3ceb@keys (cdr G3cec@clauses) G3ced@r G3cee@mr G3cf8@pat '#t G3cf9@expr))) G3cf6@ls/false) ((lambda (G3d02@t) ((lambda (G3d04@ls/false) (if G3d04@ls/false (apply (lambda (G3d06@pat G3d07@fender G3d08@expr) (G3cd3@gen-clause G3cea@x G3ceb@keys (cdr G3cec@clauses) G3ced@r G3cee@mr G3d06@pat G3d07@fender G3d08@expr)) G3d04@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3d02@t))) (G2f66@syntax-dispatch G3d02@t '(any any any)))) G3cf4@t))) (G2f66@syntax-dispatch G3cf4@t '(any any)))) (car G3cec@clauses))))) (lambda (G3cd6@e G3cd7@r G3cd8@mr) ((lambda (G3cdc@t) ((lambda (G3cde@ls/false) (if G3cde@ls/false (apply (lambda (G3ce0@expr G3ce1@keys G3ce2@clauses) (begin (G2f6c@verify-literals G3ce1@keys G3cd6@e) ((lambda (G3ce6@x) ((lambda (G3ce8@body) (list (G2cc1@G2bff@build-lambda '#f (list G3ce6@x) G3ce8@body) (G2f8a@chi-expr G3ce0@expr G3cd7@r G3cd8@mr))) (G3cd5@gen-syntax-case G3ce6@x G3ce1@keys G3ce2@clauses G3cd7@r G3cd8@mr))) (G2ce3@gen-lexical 'tmp)))) G3cde@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3cdc@t))) (G2f66@syntax-dispatch G3cdc@t '(_ any each-any . each-any)))) G3cd6@e)))) '#f '#f '#f '#f)))) (set! G2f70@ellipsis-map (lambda (G3d58@proc G3d59@ls . G3d5c@ls*) ((lambda (G3d5f@who) (begin (set! G3d5f@who '...) (begin (if (not (list? G3d59@ls)) (assertion-violation G3d5f@who '"not a list" G3d59@ls) (void)) (if (not (null? G3d5c@ls*)) ((lambda (G3d60@n) (for-each (lambda (G3d62@x) (begin (if (not (list? G3d62@x)) (assertion-violation G3d5f@who '"not a list" G3d62@x) (void)) (if (not (= (length G3d62@x) G3d60@n)) (assertion-violation G3d5f@who '"length mismatch" G3d59@ls G3d62@x) (void)))) G3d5c@ls*)) (length G3d59@ls)) (void)) (apply map G3d58@proc G3d59@ls G3d5c@ls*)))) '#f))) (set! G2f72@syntax-transformer ((lambda () ((lambda (G3d65@gen-syntax G3d67@gen-ref G3d69@gen-append G3d6b@gen-mappend G3d6d@gen-map G3d6f@gen-cons G3d71@gen-vector G3d73@regen) (begin (set! G3d65@gen-syntax (lambda (G3dd8@src G3dd9@e G3dda@r G3ddb@maps G3ddc@ellipsis? G3ddd@vec?) ((lambda (G3de4@t) ((lambda (G3de6@ls/false) (if (and G3de6@ls/false (apply (lambda (G3de8@dots) (G3ddc@ellipsis? G3de8@dots)) G3de6@ls/false)) (apply (lambda (G3dea@dots) (G3053@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd8@src)) G3de6@ls/false) ((lambda (G3dec@t) ((lambda (G3dee@ls/false) (if (and G3dee@ls/false (apply (lambda (G3df0@id) (G2d67@id? G3df0@id)) G3dee@ls/false)) (apply (lambda (G3df2@id) ((lambda (G3df4@label) ((lambda (G3df6@b) ((lambda () (if (eq? (G2d89@binding-type G3df6@b) 'syntax) (call-with-values (lambda () ((lambda (G3dfa@var.lev) (G3d67@gen-ref G3dd8@src (car G3dfa@var.lev) (cdr G3dfa@var.lev) G3ddb@maps)) (G2d8b@binding-value G3df6@b))) (lambda (G3dfc@G3df8 G3dfd@G3df9) ((lambda (G3e00@maps G3e01@var) (values (list 'ref G3e01@var) G3e00@maps)) G3dfd@G3df9 G3dfc@G3df8))) (values (list 'quote G3dd9@e) G3ddb@maps))))) (G2d85@label->binding G3df4@label G3dda@r))) (G2d81@id->label G3dd9@e))) G3dee@ls/false) ((lambda (G3e04@t) ((lambda (G3e06@ls/false) (if (and G3e06@ls/false (apply (lambda (G3e08@dots G3e09@e) (G3ddc@ellipsis? G3e08@dots)) G3e06@ls/false)) (apply (lambda (G3e0c@dots G3e0d@e) (if G3ddd@vec? (G3053@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd8@src) (G3d65@gen-syntax G3dd8@src G3e0d@e G3dda@r G3ddb@maps (lambda (G3e10@x) '#f) '#f))) G3e06@ls/false) ((lambda (G3e12@t) ((lambda (G3e14@ls/false) (if (and G3e14@ls/false (apply (lambda (G3e16@x G3e17@dots G3e18@y) (G3ddc@ellipsis? G3e17@dots)) G3e14@ls/false)) (apply (lambda (G3e1c@x G3e1d@dots G3e1e@y) ((letrec ((G3e22@f (lambda (G3e24@y G3e25@k) ((lambda (G3e28@t) ((lambda (G3e2a@ls/false) (if G3e2a@ls/false (apply (lambda () (G3e25@k G3ddb@maps)) G3e2a@ls/false) ((lambda (G3e2c@t) ((lambda (G3e2e@ls/false) (if (and G3e2e@ls/false (apply (lambda (G3e30@dots G3e31@y) (G3ddc@ellipsis? G3e30@dots)) G3e2e@ls/false)) (apply (lambda (G3e34@dots G3e35@y) (G3e22@f G3e35@y (lambda (G3e38@maps) (call-with-values (lambda () (G3e25@k (cons '() G3e38@maps))) (lambda (G3e3c@G3e3a G3e3d@G3e3b) ((lambda (G3e40@maps G3e41@x) (if (null? (car G3e40@maps)) (G3053@syntax-violation '#f '"extra ellipsis in syntax form" G3dd8@src) (values (G3d6b@gen-mappend G3e41@x (car G3e40@maps)) (cdr G3e40@maps)))) G3e3d@G3e3b G3e3c@G3e3a)))))) G3e2e@ls/false) ((lambda (G3e44@t) ((lambda (G3e46@ls/false) (if G3e46@ls/false (apply (lambda () (call-with-values (lambda () (G3d65@gen-syntax G3dd8@src G3e24@y G3dda@r G3ddb@maps G3ddc@ellipsis? G3ddd@vec?)) (lambda (G3e4a@G3e48 G3e4b@G3e49) ((lambda (G3e4e@maps G3e4f@y) (call-with-values (lambda () (G3e25@k G3e4e@maps)) (lambda (G3e54@G3e52 G3e55@G3e53) ((lambda (G3e58@maps G3e59@x) (values (G3d69@gen-append G3e59@x G3e4f@y) G3e58@maps)) G3e55@G3e53 G3e54@G3e52)))) G3e4b@G3e49 G3e4a@G3e48)))) G3e46@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3e44@t))) (G2f66@syntax-dispatch G3e44@t '_))) G3e2c@t))) (G2f66@syntax-dispatch G3e2c@t '(any . any)))) G3e28@t))) (G2f66@syntax-dispatch G3e28@t '()))) G3e24@y)))) G3e22@f) G3e1e@y (lambda (G3e5c@maps) (call-with-values (lambda () (G3d65@gen-syntax G3dd8@src G3e1c@x G3dda@r (cons '() G3e5c@maps) G3ddc@ellipsis? '#f)) (lambda (G3e60@G3e5e G3e61@G3e5f) ((lambda (G3e64@maps G3e65@x) (if (null? (car G3e64@maps)) (G3053@syntax-violation '#f '"extra ellipsis in syntax form" G3dd8@src) (values (G3d6d@gen-map G3e65@x (car G3e64@maps)) (cdr G3e64@maps)))) G3e61@G3e5f G3e60@G3e5e)))))) G3e14@ls/false) ((lambda (G3e68@t) ((lambda (G3e6a@ls/false) (if G3e6a@ls/false (apply (lambda (G3e6c@x G3e6d@y) (call-with-values (lambda () (G3d65@gen-syntax G3dd8@src G3e6c@x G3dda@r G3ddb@maps G3ddc@ellipsis? '#f)) (lambda (G3e72@G3e70 G3e73@G3e71) ((lambda (G3e76@maps G3e77@xnew) (call-with-values (lambda () (G3d65@gen-syntax G3dd8@src G3e6d@y G3dda@r G3e76@maps G3ddc@ellipsis? G3ddd@vec?)) (lambda (G3e7c@G3e7a G3e7d@G3e7b) ((lambda (G3e80@maps G3e81@ynew) (values (G3d6f@gen-cons G3dd9@e G3e6c@x G3e6d@y G3e77@xnew G3e81@ynew) G3e80@maps)) G3e7d@G3e7b G3e7c@G3e7a)))) G3e73@G3e71 G3e72@G3e70)))) G3e6a@ls/false) ((lambda (G3e84@t) ((lambda (G3e86@ls/false) (if G3e86@ls/false (apply (lambda (G3e88@ls) (call-with-values (lambda () (G3d65@gen-syntax G3dd8@src G3e88@ls G3dda@r G3ddb@maps G3ddc@ellipsis? '#t)) (lambda (G3e8c@G3e8a G3e8d@G3e8b) ((lambda (G3e90@maps G3e91@lsnew) (values (G3d71@gen-vector G3dd9@e G3e88@ls G3e91@lsnew) G3e90@maps)) G3e8d@G3e8b G3e8c@G3e8a)))) G3e86@ls/false) ((lambda (G3e94@t) ((lambda (G3e96@ls/false) (if G3e96@ls/false (apply (lambda () (values (list 'quote G3dd9@e) G3ddb@maps)) G3e96@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3e94@t))) (G2f66@syntax-dispatch G3e94@t '_))) G3e84@t))) (G2f66@syntax-dispatch G3e84@t '#(vector each-any)))) G3e68@t))) (G2f66@syntax-dispatch G3e68@t '(any . any)))) G3e12@t))) (G2f66@syntax-dispatch G3e12@t '(any any . any)))) G3e04@t))) (G2f66@syntax-dispatch G3e04@t '(any any)))) G3dec@t))) (G2f66@syntax-dispatch G3dec@t 'any))) G3de4@t))) (G2f66@syntax-dispatch G3de4@t 'any))) G3dd9@e))) (set! G3d67@gen-ref (lambda (G3dc0@src G3dc1@var G3dc2@level G3dc3@maps) (if (= G3dc2@level '0) (values G3dc1@var G3dc3@maps) (if (null? G3dc3@maps) (G3053@syntax-violation '#f '"missing ellipsis in syntax form" G3dc0@src) (call-with-values (lambda () (G3d67@gen-ref G3dc0@src G3dc1@var (- G3dc2@level '1) (cdr G3dc3@maps))) (lambda (G3dca@G3dc8 G3dcb@G3dc9) ((lambda (G3dce@outer-maps G3dcf@outer-var) ((lambda (G3dd2@t) (if G3dd2@t ((lambda (G3dd4@b) (values (cdr G3dd4@b) G3dc3@maps)) G3dd2@t) ((lambda (G3dd6@inner-var) (values G3dd6@inner-var (cons (cons (cons G3dcf@outer-var G3dd6@inner-var) (car G3dc3@maps)) G3dce@outer-maps))) (G2ce3@gen-lexical 'tmp)))) (assq G3dcf@outer-var (car G3dc3@maps)))) G3dcb@G3dc9 G3dca@G3dc8))))))) (set! G3d69@gen-append (lambda (G3dbc@x G3dbd@y) (if (fast-equal? G3dbd@y ''()) G3dbc@x (list 'append G3dbc@x G3dbd@y)))) (set! G3d6b@gen-mappend (lambda (G3db8@e G3db9@map-env) (list 'apply '(primitive append) (G3d6d@gen-map G3db8@e G3db9@map-env)))) (set! G3d6d@gen-map (lambda (G3da6@e G3da7@map-env) ((lambda (G3daa@formals G3dab@actuals) (if (eq? (car G3da6@e) 'ref) (car G3dab@actuals) (if (for-all (lambda (G3dae@x) (and (eq? (car G3dae@x) 'ref) (memq (cadr G3dae@x) G3daa@formals))) (cdr G3da6@e)) ((lambda (G3db0@args) (cons 'map (cons (list 'primitive (car G3da6@e)) G3db0@args))) (map ((lambda (G3db2@r) (lambda (G3db4@x) (cdr (assq (cadr G3db4@x) G3db2@r)))) (map cons G3daa@formals G3dab@actuals)) (cdr G3da6@e))) (cons* 'map (list 'lambda G3daa@formals G3da6@e) G3dab@actuals)))) (map cdr G3da7@map-env) (map (lambda (G3db6@x) (list 'ref (car G3db6@x))) G3da7@map-env)))) (set! G3d6f@gen-cons (lambda (G3d96@e G3d97@x G3d98@y G3d99@xnew G3d9a@ynew) ((lambda (G3da0@t) (if (memv G3da0@t '(quote)) (if (eq? (car G3d99@xnew) 'quote) ((lambda (G3da2@xnew G3da3@ynew) (if (and (eq? G3da2@xnew G3d97@x) (eq? G3da3@ynew G3d98@y)) (list 'quote G3d96@e) (list 'quote (cons G3da2@xnew G3da3@ynew)))) (cadr G3d99@xnew) (cadr G3d9a@ynew)) (if (null? (cadr G3d9a@ynew)) (list 'list G3d99@xnew) (list 'cons G3d99@xnew G3d9a@ynew))) (if (memv G3da0@t '(list)) (cons 'list (cons G3d99@xnew (cdr G3d9a@ynew))) (list 'cons G3d99@xnew G3d9a@ynew)))) (car G3d9a@ynew)))) (set! G3d71@gen-vector (lambda (G3d90@e G3d91@ls G3d92@lsnew) (if (eq? (car G3d92@lsnew) 'quote) (if (eq? (cadr G3d92@lsnew) G3d91@ls) (list 'quote G3d90@e) (list 'quote (list->vector (cadr G3d92@lsnew)))) (if (eq? (car G3d92@lsnew) 'list) (cons 'vector (cdr G3d92@lsnew)) (list 'list->vector G3d92@lsnew))))) (set! G3d73@regen (lambda (G3d8a@x) ((lambda (G3d8c@t) (if (memv G3d8c@t '(ref)) (cadr G3d8a@x) (if (memv G3d8c@t '(primitive)) (list 'primitive (cadr G3d8a@x)) (if (memv G3d8c@t '(quote)) (list 'quote (cadr G3d8a@x)) (if (memv G3d8c@t '(lambda)) (G2cc1@G2bff@build-lambda '#f (cadr G3d8a@x) (G3d73@regen (caddr G3d8a@x))) (if (memv G3d8c@t '(map)) ((lambda (G3d8e@ls) (cons '(primitive ellipsis-map) G3d8e@ls)) (map G3d73@regen (cdr G3d8a@x))) (cons (list 'primitive (car G3d8a@x)) (map G3d73@regen (cdr G3d8a@x))))))))) (car G3d8a@x)))) (lambda (G3d74@e G3d75@r G3d76@mr) ((lambda (G3d7a@t) ((lambda (G3d7c@ls/false) (if G3d7c@ls/false (apply (lambda (G3d7e@x) (call-with-values (lambda () (G3d65@gen-syntax G3d74@e G3d7e@x G3d75@r '() G2f68@ellipsis? '#f)) (lambda (G3d82@G3d80 G3d83@G3d81) ((lambda (G3d86@maps G3d87@e) (G3d73@regen G3d87@e)) G3d83@G3d81 G3d82@G3d80)))) G3d7c@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3d7a@t))) (G2f66@syntax-dispatch G3d7a@t '(_ any)))) G3d74@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f74@core-macro-transformer (lambda (G3e98@name) ((lambda (G3e9a@t) (if (memv G3e9a@t '(quote)) G2f16@quote-transformer (if (memv G3e9a@t '(lambda)) G2f1a@lambda-transformer (if (memv G3e9a@t '(case-lambda)) G2f18@case-lambda-transformer (if (memv G3e9a@t '(letrec)) G2efe@letrec-transformer (if (memv G3e9a@t '(letrec*)) G2f00@letrec*-transformer (if (memv G3e9a@t '(if)) G2f0e@if-transformer (if (memv G3e9a@t '(and)) G2f10@and-transformer (if (memv G3e9a@t '(or)) G2f12@or-transformer (if (memv G3e9a@t '(foreign-call)) G2f62@foreign-call-transformer (if (memv G3e9a@t '(syntax-case)) G2f6e@syntax-case-transformer (if (memv G3e9a@t '(syntax)) G2f72@syntax-transformer (if (memv G3e9a@t '(type-descriptor)) G2f04@type-descriptor-transformer (if (memv G3e9a@t '(record-type-descriptor)) G2f06@record-type-descriptor-transformer (if (memv G3e9a@t '(record-constructor-descriptor)) G2f08@record-constructor-descriptor-transformer (if (memv G3e9a@t '(fluid-let-syntax)) G2f02@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e98@name))))))))))))))))) G3e98@name))) (set! G2f76@file-options-macro (lambda (G3e9c@x) ((lambda (G3e9f@valid-option?) (begin (set! G3e9f@valid-option? (lambda (G3ea8@x) (and (G2d67@id? G3ea8@x) (memq (G2d69@id->sym G3ea8@x) '(no-fail no-create no-truncate))))) ((lambda (G3ea0@t) ((lambda (G3ea2@ls/false) (if (and G3ea2@ls/false (apply (lambda (G3ea4@opt*) (and (for-all G3e9f@valid-option? G3ea4@opt*) (G2904@G28a8@file-options-spec (map G2d69@id->sym G3ea4@opt*)))) G3ea2@ls/false)) (apply (lambda (G3ea6@opt*) (G2f1c@bless (list 'quote (G2904@G28a8@file-options-spec (map G2d69@id->sym G3ea6@opt*))))) G3ea2@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3ea0@t))) (G2f66@syntax-dispatch G3ea0@t '(_ . each-any)))) G3e9c@x))) '#f))) (set! G2f78@symbol-macro (lambda (G3eaa@x G3eab@set) ((lambda (G3eae@t) ((lambda (G3eb0@ls/false) (if (and G3eb0@ls/false (apply (lambda (G3eb2@name) (and (G2d67@id? G3eb2@name) (memq (G2d69@id->sym G3eb2@name) G3eab@set))) G3eb0@ls/false)) (apply (lambda (G3eb4@name) (G2f1c@bless (list 'quote G3eb4@name))) G3eb0@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3eae@t))) (G2f66@syntax-dispatch G3eae@t '(_ any)))) G3eaa@x))) (set! G2f7a@macro-transformer (lambda (G3eb6@x) (if (procedure? G3eb6@x) G3eb6@x (if (symbol? G3eb6@x) ((lambda (G3eb8@t) (if (memv G3eb8@t '(define-record-type)) G2f5a@define-record-type-macro (if (memv G3eb8@t '(define-struct)) G2f58@define-struct-macro (if (memv G3eb8@t '(include)) G2f4e@include-macro (if (memv G3eb8@t '(cond)) G2f4a@cond-macro (if (memv G3eb8@t '(let)) G2f22@let-macro (if (memv G3eb8@t '(do)) G2f42@do-macro (if (memv G3eb8@t '(or)) G2f46@or-macro (if (memv G3eb8@t '(and)) G2f48@and-macro (if (memv G3eb8@t '(let*)) G2f44@let*-macro (if (memv G3eb8@t '(let-values)) G2f24@let-values-macro (if (memv G3eb8@t '(let*-values)) G2f26@let*-values-macro (if (memv G3eb8@t '(syntax-rules)) G2f52@syntax-rules-macro (if (memv G3eb8@t '(quasiquote)) G2f54@quasiquote-macro (if (memv G3eb8@t '(quasisyntax)) G2f56@quasisyntax-macro (if (memv G3eb8@t '(with-syntax)) G2f1e@with-syntax-macro (if (memv G3eb8@t '(when)) G2f0a@when-macro (if (memv G3eb8@t '(unless)) G2f0c@unless-macro (if (memv G3eb8@t '(case)) G2f14@case-macro (if (memv G3eb8@t '(identifier-syntax)) G2f40@identifier-syntax-macro (if (memv G3eb8@t '(time)) G2f38@time-macro (if (memv G3eb8@t '(delay)) G2f3a@delay-macro (if (memv G3eb8@t '(assert)) G2f3c@assert-macro (if (memv G3eb8@t '(endianness)) G2f3e@endianness-macro (if (memv G3eb8@t '(guard)) G2f34@guard-macro (if (memv G3eb8@t '(define-enumeration)) G2f36@define-enumeration-macro (if (memv G3eb8@t '(trace-lambda)) G2f28@trace-lambda-macro (if (memv G3eb8@t '(trace-define)) G2f2a@trace-define-macro (if (memv G3eb8@t '(trace-define-syntax)) G2f2c@trace-define-syntax-macro (if (memv G3eb8@t '(trace-let-syntax)) G2f30@trace-let-syntax-macro (if (memv G3eb8@t '(trace-letrec-syntax)) G2f32@trace-letrec-syntax-macro (if (memv G3eb8@t '(define-condition-type)) G2f5c@define-condition-type-macro (if (memv G3eb8@t '(parameterize)) G2f60@parameterize-macro (if (memv G3eb8@t '(include-into)) G2f50@include-into-macro (if (memv G3eb8@t '(eol-style)) (lambda (G3eba@x) (G2f78@symbol-macro G3eba@x '(none lf cr crlf nel crnel ls))) (if (memv G3eb8@t '(error-handling-mode)) (lambda (G3ebc@x) (G2f78@symbol-macro G3ebc@x '(ignore raise replace))) (if (memv G3eb8@t '(buffer-mode)) (lambda (G3ebe@x) (G2f78@symbol-macro G3ebe@x '(none line block))) (if (memv G3eb8@t '(file-options)) G2f76@file-options-macro (if (memv G3eb8@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f5e@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3eb6@x)))))))))))))))))))))))))))))))))))))))) G3eb6@x) (error 'core-macro-transformer '"BUG: invalid macro" G3eb6@x))))) (set! G2f7c@local-macro-transformer (lambda (G3ec0@x) (car G3ec0@x))) (set! G2f7e@do-macro-call (lambda (G3ec2@transformer G3ec3@expr) ((lambda (G3ec6@out) (begin ((letrec ((G3ec8@f (lambda (G3eca@x) (if (not (G2d2f@stx? G3eca@x)) (if (pair? G3eca@x) (begin (G3ec8@f (car G3eca@x)) (G3ec8@f (cdr G3eca@x))) (if (vector? G3eca@x) (vector-for-each G3ec8@f G3eca@x) (if (symbol? G3eca@x) (G3053@syntax-violation '#f '"raw symbol encountered in output of macro" G3ec3@expr G3eca@x) (void)))) (void))))) G3ec8@f) G3ec6@out) (G2d51@add-mark (G2d47@gen-mark) G3ec6@out G3ec3@expr))) (G3ec2@transformer (G2d51@add-mark G2d49@anti-mark G3ec3@expr '#f))))) (set! G2f80@chi-macro (lambda (G3ecc@p G3ecd@e) (G2f7e@do-macro-call (G2f7a@macro-transformer G3ecc@p) G3ecd@e))) (set! G2f82@chi-local-macro (lambda (G3ed0@p G3ed1@e) (G2f7e@do-macro-call (G2f7c@local-macro-transformer G3ed0@p) G3ed1@e))) (set! G2f84@chi-global-macro (lambda (G3ed4@p G3ed5@e) ((lambda (G3ed8@lib G3ed9@loc) (begin (G2b7f@G2a27@visit-library G3ed8@lib) ((lambda (G3edc@x) ((lambda (G3ede@transformer) (G2f7e@do-macro-call G3ede@transformer G3ed5@e)) (if (procedure? G3edc@x) G3edc@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3edc@x)))) (symbol-value G3ed9@loc)))) (car G3ed4@p) (cdr G3ed4@p)))) (set! G2f86@chi-expr* (lambda (G3ee0@e* G3ee1@r G3ee2@mr) (if (null? G3ee0@e*) '() ((lambda (G3ee6@e) (cons G3ee6@e (G2f86@chi-expr* (cdr G3ee0@e*) G3ee1@r G3ee2@mr))) (G2f8a@chi-expr (car G3ee0@e*) G3ee1@r G3ee2@mr))))) (set! G2f88@chi-application (lambda (G3ee8@e G3ee9@r G3eea@mr) ((lambda (G3eee@t) ((lambda (G3ef0@ls/false) (if G3ef0@ls/false (apply (lambda (G3ef2@rator G3ef3@rands) ((lambda (G3ef6@rator) (cons G3ef6@rator (G2f86@chi-expr* G3ef3@rands G3ee9@r G3eea@mr))) (G2f8a@chi-expr G3ef2@rator G3ee9@r G3eea@mr))) G3ef0@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3eee@t))) (G2f66@syntax-dispatch G3eee@t '(any . each-any)))) G3ee8@e))) (set! G2f8a@chi-expr (lambda (G3ef8@e G3ef9@r G3efa@mr) (call-with-values (lambda () (G2d8f@syntax-type G3ef8@e G3ef9@r)) (lambda (G3f01@G3efe G3f02@G3eff G3f03@G3f00) ((lambda (G3f07@kwd G3f08@value G3f09@type) ((lambda (G3f0d@t) (if (memv G3f0d@t '(core-macro)) ((lambda (G3f0f@transformer) (G3f0f@transformer G3ef8@e G3ef9@r G3efa@mr)) (G2f74@core-macro-transformer G3f08@value)) (if (memv G3f0d@t '(global)) ((lambda (G3f11@lib) ((lambda (G3f13@loc) ((lambda () (begin ((G2fd3@inv-collector) G3f11@lib) G3f13@loc)))) (cdr G3f08@value))) (car G3f08@value)) (if (memv G3f0d@t '(core-prim)) ((lambda (G3f15@name) (list 'primitive G3f15@name)) G3f08@value) (if (memv G3f0d@t '(call)) (G2f88@chi-application G3ef8@e G3ef9@r G3efa@mr) (if (memv G3f0d@t '(lexical)) ((lambda (G3f17@lex) G3f17@lex) (G2ef2@lexical-var G3f08@value)) (if (memv G3f0d@t '(global-macro global-macro!)) (G2f8a@chi-expr (G2f84@chi-global-macro G3f08@value G3ef8@e) G3ef9@r G3efa@mr) (if (memv G3f0d@t '(local-macro local-macro!)) (G2f8a@chi-expr (G2f82@chi-local-macro G3f08@value G3ef8@e) G3ef9@r G3efa@mr) (if (memv G3f0d@t '(macro macro!)) (G2f8a@chi-expr (G2f80@chi-macro G3f08@value G3ef8@e) G3ef9@r G3efa@mr) (if (memv G3f0d@t '(constant)) ((lambda (G3f19@datum) (list 'quote G3f19@datum)) G3f08@value) (if (memv G3f0d@t '(set!)) (G2f8c@chi-set! G3ef8@e G3ef9@r G3efa@mr) (if (memv G3f0d@t '(begin)) ((lambda (G3f1b@t) ((lambda (G3f1d@ls/false) (if G3f1d@ls/false (apply (lambda (G3f1f@x G3f20@x*) (G2cc4@G2c35@build-sequence '#f (G2f86@chi-expr* (cons G3f1f@x G3f20@x*) G3ef9@r G3efa@mr))) G3f1d@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3f1b@t))) (G2f66@syntax-dispatch G3f1b@t '(_ any . each-any)))) G3ef8@e) (if (memv G3f0d@t '(let-syntax letrec-syntax)) ((lambda (G3f23@t) ((lambda (G3f25@ls/false) (if (and G3f25@ls/false (apply (lambda (G3f27@xlhs* G3f28@xrhs* G3f29@xbody G3f2a@xbody*) (if (not (G2d71@valid-bound-ids? G3f27@xlhs*)) (G3053@syntax-violation '#f '"invalid identifiers" G3ef8@e) (void))) G3f25@ls/false)) (apply (lambda (G3f2f@xlhs* G3f30@xrhs* G3f31@xbody G3f32@xbody*) ((lambda (G3f37@xlab*) ((lambda (G3f39@xrib) ((lambda (G3f3b@xb*) ((lambda () (G2cc4@G2c35@build-sequence '#f (G2f86@chi-expr* (map (lambda (G3f3d@x) (G2d53@add-subst G3f39@xrib G3f3d@x)) (cons G3f31@xbody G3f32@xbody*)) (append (map cons G3f37@xlab* G3f3b@xb*) G3ef9@r) (append (map cons G3f37@xlab* G3f3b@xb*) G3efa@mr)))))) (map (lambda (G3f3f@x) (G2da7@make-eval-transformer (G2fc5@expand-transformer (if (eq? G3f09@type 'let-syntax) G3f3f@x (G2d53@add-subst G3f39@xrib G3f3f@x)) G3efa@mr))) G3f30@xrhs*))) (G2d22@make-full-rib G3f2f@xlhs* G3f37@xlab*))) (map G2ce7@gen-label G3f2f@xlhs*))) G3f25@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3f23@t))) (G2f66@syntax-dispatch G3f23@t '(_ #(each (any any)) any . each-any)))) G3ef8@e) (if (memv G3f0d@t '(displaced-lexical)) (G3053@syntax-violation '#f '"identifier out of context" G3ef8@e) (if (memv G3f0d@t '(syntax)) (G3053@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ef8@e) (if (memv G3f0d@t '(define define-syntax module import library)) (G3053@syntax-violation '#f (string-append ((lambda (G3f41@t) (if (memv G3f41@t '(define)) '"a definition" (if (memv G3f41@t '(define-syntax)) '"a define-syntax" (if (memv G3f41@t '(module)) '"a module definition" (if (memv G3f41@t '(library)) '"a library definition" (if (memv G3f41@t '(import)) '"an import declaration" (if (memv G3f41@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f09@type) '" was found where an expression was expected") G3ef8@e) (if (memv G3f0d@t '(mutable)) (G3053@syntax-violation '#f '"attempt to reference an unexportable variable" G3ef8@e) (G3053@syntax-violation '#f '"invalid expression" G3ef8@e)))))))))))))))))) G3f09@type)) G3f03@G3f00 G3f02@G3eff G3f01@G3efe))))) (set! G2f8c@chi-set! (lambda (G3f43@e G3f44@r G3f45@mr) ((lambda (G3f49@t) ((lambda (G3f4b@ls/false) (if (and G3f4b@ls/false (apply (lambda (G3f4d@x G3f4e@v) (G2d67@id? G3f4d@x)) G3f4b@ls/false)) (apply (lambda (G3f51@x G3f52@v) (call-with-values (lambda () (G2d8f@syntax-type G3f51@x G3f44@r)) (lambda (G3f58@G3f55 G3f59@G3f56 G3f5a@G3f57) ((lambda (G3f5e@kwd G3f5f@value G3f60@type) ((lambda (G3f64@t) (if (memv G3f64@t '(lexical)) (begin (G2ef6@set-lexical-mutable! G3f5f@value '#t) (list 'set! (G2ef2@lexical-var G3f5f@value) (G2f8a@chi-expr G3f52@v G3f44@r G3f45@mr))) (if (memv G3f64@t '(core-prim)) (G3053@syntax-violation '#f '"cannot modify imported core primitive" G3f43@e) (if (memv G3f64@t '(global)) (G3053@syntax-violation '#f '"attempt to modify imported binding" G3f43@e) (if (memv G3f64@t '(global-macro!)) (G2f8a@chi-expr (G2f84@chi-global-macro G3f5f@value G3f43@e) G3f44@r G3f45@mr) (if (memv G3f64@t '(local-macro!)) (G2f8a@chi-expr (G2f82@chi-local-macro G3f5f@value G3f43@e) G3f44@r G3f45@mr) (if (memv G3f64@t '(mutable)) (G3053@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f43@e) (G3053@syntax-violation '#f '"invalid syntax" G3f43@e)))))))) G3f60@type)) G3f5a@G3f57 G3f59@G3f56 G3f58@G3f55)))) G3f4b@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3f49@t))) (G2f66@syntax-dispatch G3f49@t '(_ any any)))) G3f43@e))) (set! G2f8e@verify-formals (lambda (G3f66@fmls G3f67@stx) ((lambda (G3f6a@t) ((lambda (G3f6c@ls/false) (if G3f6c@ls/false (apply (lambda (G3f6e@x*) (if (not (G2d71@valid-bound-ids? G3f6e@x*)) (G2f20@invalid-fmls-error G3f67@stx G3f66@fmls) (void))) G3f6c@ls/false) ((lambda (G3f70@t) ((lambda (G3f72@ls/false) (if G3f72@ls/false (apply (lambda (G3f74@x* G3f75@x) (if (not (G2d71@valid-bound-ids? (cons G3f75@x G3f74@x*))) (G2f20@invalid-fmls-error G3f67@stx G3f66@fmls) (void))) G3f72@ls/false) ((lambda (G3f78@t) ((lambda (G3f7a@ls/false) (if G3f7a@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid syntax" G3f67@stx)) G3f7a@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3f78@t))) (G2f66@syntax-dispatch G3f78@t '_))) G3f70@t))) (G2f66@syntax-dispatch G3f70@t '#(each+ any () any)))) G3f6a@t))) (G2f66@syntax-dispatch G3f6a@t 'each-any))) G3f66@fmls))) (set! G2f90@chi-lambda-clause (lambda (G3f7c@stx G3f7d@fmls G3f7e@body* G3f7f@r G3f80@mr) ((lambda (G3f86@t) ((lambda (G3f88@ls/false) (if G3f88@ls/false (apply (lambda (G3f8a@x*) (begin (G2f8e@verify-formals G3f7d@fmls G3f7c@stx) ((lambda (G3f8c@lex* G3f8d@lab*) (values G3f8c@lex* (G2fa0@chi-internal (G2d53@add-subst (G2d22@make-full-rib G3f8a@x* G3f8d@lab*) G3f7e@body*) (G2efa@add-lexicals G3f8d@lab* G3f8c@lex* G3f7f@r) G3f80@mr))) (map G2ce3@gen-lexical G3f8a@x*) (map G2ce7@gen-label G3f8a@x*)))) G3f88@ls/false) ((lambda (G3f90@t) ((lambda (G3f92@ls/false) (if G3f92@ls/false (apply (lambda (G3f94@x* G3f95@x) (begin (G2f8e@verify-formals G3f7d@fmls G3f7c@stx) ((lambda (G3f98@lex* G3f99@lab* G3f9a@lex G3f9b@lab) (values (append G3f98@lex* G3f9a@lex) (G2fa0@chi-internal (G2d53@add-subst (G2d22@make-full-rib (cons G3f95@x G3f94@x*) (cons G3f9b@lab G3f99@lab*)) G3f7e@body*) (G2efa@add-lexicals (cons G3f9b@lab G3f99@lab*) (cons G3f9a@lex G3f98@lex*) G3f7f@r) G3f80@mr))) (map G2ce3@gen-lexical G3f94@x*) (map G2ce7@gen-label G3f94@x*) (G2ce3@gen-lexical G3f95@x) (G2ce7@gen-label G3f95@x)))) G3f92@ls/false) ((lambda (G3fa0@t) ((lambda (G3fa2@ls/false) (if G3fa2@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid syntax" G3f7d@fmls)) G3fa2@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G3fa0@t))) (G2f66@syntax-dispatch G3fa0@t '_))) G3f90@t))) (G2f66@syntax-dispatch G3f90@t '#(each+ any () any)))) G3f86@t))) (G2f66@syntax-dispatch G3f86@t 'each-any))) G3f7d@fmls))) (set! G2f92@chi-lambda-clause* (lambda (G3fa4@stx G3fa5@fmls* G3fa6@body** G3fa7@r G3fa8@mr) (if (null? G3fa5@fmls*) (values '() '()) (call-with-values (lambda () (G2f90@chi-lambda-clause G3fa4@stx (car G3fa5@fmls*) (car G3fa6@body**) G3fa7@r G3fa8@mr)) (lambda (G3fb0@G3fae G3fb1@G3faf) ((lambda (G3fb4@b G3fb5@a) (call-with-values (lambda () (G2f92@chi-lambda-clause* G3fa4@stx (cdr G3fa5@fmls*) (cdr G3fa6@body**) G3fa7@r G3fa8@mr)) (lambda (G3fba@G3fb8 G3fbb@G3fb9) ((lambda (G3fbe@b* G3fbf@a*) (values (cons G3fb5@a G3fbf@a*) (cons G3fb4@b G3fbe@b*))) G3fbb@G3fb9 G3fba@G3fb8)))) G3fb1@G3faf G3fb0@G3fae)))))) (set! G2f94@chi-defun (lambda (G3fc2@x G3fc3@r G3fc4@mr) ((lambda (G3fc8@fmls G3fc9@body*) (call-with-values (lambda () (G2f90@chi-lambda-clause G3fc8@fmls G3fc8@fmls G3fc9@body* G3fc3@r G3fc4@mr)) (lambda (G3fce@G3fcc G3fcf@G3fcd) ((lambda (G3fd2@body G3fd3@fmls) (G2cc1@G2bff@build-lambda '#f G3fd3@fmls G3fd2@body)) G3fcf@G3fcd G3fce@G3fcc)))) (car G3fc2@x) (cdr G3fc2@x)))) (set! G2f96@chi-rhs (lambda (G3fd6@rhs G3fd7@r G3fd8@mr) ((lambda (G3fdc@t) (if (memv G3fdc@t '(defun)) (G2f94@chi-defun (cdr G3fd6@rhs) G3fd7@r G3fd8@mr) (if (memv G3fdc@t '(expr)) ((lambda (G3fde@expr) (G2f8a@chi-expr G3fde@expr G3fd7@r G3fd8@mr)) (cdr G3fd6@rhs)) (if (memv G3fdc@t '(top-expr)) ((lambda (G3fe0@expr) (G2cc4@G2c35@build-sequence '#f (list (G2f8a@chi-expr G3fe0@expr G3fd7@r G3fd8@mr) (G2cc5@G2c37@build-void)))) (cdr G3fd6@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fd6@rhs))))) (car G3fd6@rhs)))) (set! G2f98@expand-interaction-rhs*/init* (lambda (G3fe2@lhs* G3fe3@rhs* G3fe4@init* G3fe5@r G3fe6@mr) ((letrec ((G3fec@f (lambda (G3fee@lhs* G3fef@rhs*) (if (null? G3fee@lhs*) (map (lambda (G3ff2@x) (G2f8a@chi-expr G3ff2@x G3fe5@r G3fe6@mr)) G3fe4@init*) ((lambda (G3ff4@lhs G3ff5@rhs) ((lambda (G3ff8@t) (if (memv G3ff8@t '(defun)) ((lambda (G3ffa@rhs) (cons (list 'set! G3ff4@lhs G3ffa@rhs) (G3fec@f (cdr G3fee@lhs*) (cdr G3fef@rhs*)))) (G2f94@chi-defun (cdr G3ff5@rhs) G3fe5@r G3fe6@mr)) (if (memv G3ff8@t '(expr)) ((lambda (G3ffc@rhs) (cons (list 'set! G3ff4@lhs G3ffc@rhs) (G3fec@f (cdr G3fee@lhs*) (cdr G3fef@rhs*)))) (G2f8a@chi-expr (cdr G3ff5@rhs) G3fe5@r G3fe6@mr)) (if (memv G3ff8@t '(top-expr)) ((lambda (G3ffe@e) (cons G3ffe@e (G3fec@f (cdr G3fee@lhs*) (cdr G3fef@rhs*)))) (G2f8a@chi-expr (cdr G3ff5@rhs) G3fe5@r G3fe6@mr)) (error 'expand-interaction '"invallid" G3ff5@rhs))))) (car G3ff5@rhs))) (car G3fee@lhs*) (car G3fef@rhs*)))))) G3fec@f) G3fe2@lhs* G3fe3@rhs*))) (set! G2f9a@chi-rhs* (lambda (G4000@rhs* G4001@r G4002@mr) ((letrec ((G4006@f (lambda (G4008@ls) (if (null? G4008@ls) '() ((lambda (G400a@a) (cons G400a@a (G4006@f (cdr G4008@ls)))) (G2f96@chi-rhs (car G4008@ls) G4001@r G4002@mr)))))) G4006@f) G4000@rhs*))) (set! G2f9c@find-bound=? (lambda (G400c@x G400d@lhs* G400e@rhs*) (if (null? G400d@lhs*) '#f (if (G2d6d@bound-id=? G400c@x (car G400d@lhs*)) (car G400e@rhs*) (G2f9c@find-bound=? G400c@x (cdr G400d@lhs*) (cdr G400e@rhs*)))))) (set! G2f9e@find-dups (lambda (G4012@ls) ((letrec ((G4014@f (lambda (G4016@ls G4017@dups) (if (null? G4016@ls) G4017@dups ((lambda (G401a@t) (if G401a@t ((lambda (G401c@x) (G4014@f (cdr G4016@ls) (cons (list (car G4016@ls) G401c@x) G4017@dups))) G401a@t) (G4014@f (cdr G4016@ls) G4017@dups))) (G2f9c@find-bound=? (car G4016@ls) (cdr G4016@ls) (cdr G4016@ls))))))) G4014@f) G4012@ls '()))) (set! G2fa0@chi-internal (lambda (G401e@e* G401f@r G4020@mr) ((lambda (G4024@rib) (call-with-values (lambda () (G2fc3@chi-body* (map (lambda (G402e@x) (G2d53@add-subst G4024@rib G402e@x)) (G2d65@syntax->list G401e@e*)) G401f@r G4020@mr '() '() '() '() '() G4024@rib '#f)) (lambda (G4030@G4026 G4031@G4027 G4032@G4028 G4033@G4029 G4034@G402a G4035@G402b G4036@G402c G4037@G402d) ((lambda (G4040@_exp* G4041@kwd* G4042@mod** G4043@rhs* G4044@lex* G4045@mr G4046@r G4047@e*) (begin (if (null? G4047@e*) (G3053@syntax-violation '#f '"no expression in body" G4047@e*) (void)) ((lambda (G4050@init*) ((lambda (G4052@rhs*) ((lambda () (G2cc7@G2c3b@build-letrec* '#f (reverse G4044@lex*) (reverse G4052@rhs*) (G2cc4@G2c35@build-sequence '#f G4050@init*))))) (G2f9a@chi-rhs* G4043@rhs* G4046@r G4045@mr))) (G2f86@chi-expr* (append (apply append (reverse G4042@mod**)) G4047@e*) G4046@r G4045@mr)))) G4037@G402d G4036@G402c G4035@G402b G4034@G402a G4033@G4029 G4032@G4028 G4031@G4027 G4030@G4026)))) (G2d12@make-empty-rib)))) (set! G2fa2@parse-module (lambda (G4054@e) ((lambda (G4056@t) ((lambda (G4058@ls/false) (if G4058@ls/false (apply (lambda (G405a@export* G405b@b*) (begin (if (not (for-all G2d67@id? G405a@export*)) (G3053@syntax-violation '#f '"module exports must be identifiers" G4054@e) (void)) (values '#f (list->vector G405a@export*) G405b@b*))) G4058@ls/false) ((lambda (G405e@t) ((lambda (G4060@ls/false) (if G4060@ls/false (apply (lambda (G4062@name G4063@export* G4064@b*) (begin (if (not (G2d67@id? G4062@name)) (G3053@syntax-violation '#f '"module name must be an identifier" G4054@e) (void)) (if (not (for-all G2d67@id? G4063@export*)) (G3053@syntax-violation '#f '"module exports must be identifiers" G4054@e) (void)) (values G4062@name (list->vector G4063@export*) G4064@b*))) G4060@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G405e@t))) (G2f66@syntax-dispatch G405e@t '(_ any each-any . each-any)))) G4056@t))) (G2f66@syntax-dispatch G4056@t '(_ each-any . each-any)))) G4054@e))) (set! G2fa8@G2fa3 (make-record-type-descriptor 'module-interface '#f 'G2fa6 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2faa@G2fa5 '#f) (set! G2fac@G2fa4 (make-record-constructor-descriptor G2fa8@G2fa3 '#f G2faa@G2fa5)) (set! G2faf@module-interface? (record-predicate G2fa8@G2fa3)) (set! G2fb1@make-module-interface (record-constructor G2fac@G2fa4)) (set! G2fb3@module-interface-first-mark (record-accessor G2fa8@G2fa3 '0)) (set! G2fb5@module-interface-exp-id-vec (record-accessor G2fa8@G2fa3 '1)) (set! G2fb7@module-interface-exp-lab-vec (record-accessor G2fa8@G2fa3 '2)) (set! G2fb9@set-module-interface-first-mark! (record-mutator G2fa8@G2fa3 '0)) (set! G2fbb@set-module-interface-exp-id-vec! (record-mutator G2fa8@G2fa3 '1)) (set! G2fbd@set-module-interface-exp-lab-vec! (record-mutator G2fa8@G2fa3 '2)) (set! G2fbf@module-interface-exp-id* (lambda (G4068@iface G4069@id) ((lambda (G406d@diff-marks) (begin (set! G406d@diff-marks (lambda (G4074@ls G4075@x) (begin (if (null? G4074@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4078@a) (if (eq? G4078@a G4075@x) '() (cons G4078@a (G406d@diff-marks (cdr G4074@ls) G4075@x)))) (car G4074@ls))))) ((lambda (G406e@diff G406f@id-vec) (if (null? G406e@diff) G406f@id-vec (vector-map (lambda (G4072@x) (G2d31@make-stx (G2d33@stx-expr G4072@x) (append G406e@diff (G2d35@stx-mark* G4072@x)) '() '())) G406f@id-vec))) (G406d@diff-marks (G2d35@stx-mark* G4069@id) (G2fb3@module-interface-first-mark G4068@iface)) (G2fb5@module-interface-exp-id-vec G4068@iface)))) '#f))) (set! G2fc1@chi-internal-module (lambda (G407a@e G407b@r G407c@mr G407d@lex* G407e@rhs* G407f@mod** G4080@kwd*) (call-with-values (lambda () (G2fa2@parse-module G407a@e)) (lambda (G408b@G4088 G408c@G4089 G408d@G408a) ((lambda (G4091@e* G4092@exp-id* G4093@name) ((lambda (G4097@rib) ((lambda (G4099@e*) ((lambda () (call-with-values (lambda () (G2fc3@chi-body* G4099@e* G407b@r G407c@mr G407d@lex* G407e@rhs* G407f@mod** G4080@kwd* '() G4097@rib '#f)) (lambda (G40a3@G409b G40a4@G409c G40a5@G409d G40a6@G409e G40a7@G409f G40a8@G40a0 G40a9@G40a1 G40aa@G40a2) ((lambda (G40b3@_exp* G40b4@kwd* G40b5@mod** G40b6@rhs* G40b7@lex* G40b8@mr G40b9@r G40ba@e*) ((lambda (G40c3@exp-lab* G40c4@mod**) (if (not G4093@name) (values G40b7@lex* G40b6@rhs* G4092@exp-id* G40c3@exp-lab* G40b9@r G40b8@mr G40c4@mod** G40b4@kwd*) ((lambda (G40c7@lab G40c8@iface) (values G40b7@lex* G40b6@rhs* (vector G4093@name) (vector G40c7@lab) (cons (cons G40c7@lab (cons '$module G40c8@iface)) G40b9@r) (cons (cons G40c7@lab (cons '$module G40c8@iface)) G40b8@mr) G40c4@mod** G40b4@kwd*)) (G2ce7@gen-label 'module) (G2fb1@make-module-interface (car (G2d35@stx-mark* G4093@name)) (vector-map (lambda (G40cb@x) (G2d31@make-stx (G2d33@stx-expr G40cb@x) (G2d35@stx-mark* G40cb@x) '() '())) G4092@exp-id*) G40c3@exp-lab*)))) (vector-map (lambda (G40cd@x) (or (G2d81@id->label (G2d31@make-stx (G2d69@id->sym G40cd@x) (G2d35@stx-mark* G40cd@x) (list G4097@rib) '())) (G3053@syntax-violation '#f '"cannot find module export" G40cd@x))) G4092@exp-id*) (cons G40ba@e* G40b5@mod**))) G40aa@G40a2 G40a9@G40a1 G40a8@G40a0 G40a7@G409f G40a6@G409e G40a5@G409d G40a4@G409c G40a3@G409b)))))) (map (lambda (G40cf@x) (G2d53@add-subst G4097@rib G40cf@x)) (G2d65@syntax->list G4091@e*)))) (G2d12@make-empty-rib))) G408d@G408a G408c@G4089 G408b@G4088))))) (set! G2fc3@chi-body* (lambda (G40d1@e* G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40d7@kwd* G40d8@exp* G40d9@rib G40da@top?) (if (null? G40d1@e*) (values G40d1@e* G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40d7@kwd* G40d8@exp*) ((lambda (G40e5@e) (call-with-values (lambda () (G2d8f@syntax-type G40e5@e G40d2@r)) (lambda (G40ea@G40e7 G40eb@G40e8 G40ec@G40e9) ((lambda (G40f0@kwd G40f1@value G40f2@type) ((lambda (G40f6@kwd*) ((lambda (G40f8@t) (if (memv G40f8@t '(define)) (call-with-values (lambda () (G2eea@parse-define G40e5@e)) (lambda (G40fc@G40fa G40fd@G40fb) ((lambda (G4100@rhs G4101@id) (begin (if (G2d75@bound-id-member? G4101@id G40f6@kwd*) (G3053@syntax-violation '#f '"cannot redefine keyword" G40e5@e) (void)) (call-with-values (lambda () (G2ceb@gen-define-label+loc G4101@id G40d9@rib)) (lambda (G4106@G4104 G4107@G4105) ((lambda (G410a@lex G410b@lab) (begin (G2d18@extend-rib! G40d9@rib G4101@id G410b@lab) (G2fc3@chi-body* (cdr G40d1@e*) (G2ef8@add-lexical G410b@lab G410a@lex G40d2@r) G40d3@mr (cons G410a@lex G40d4@lex*) (cons G4100@rhs G40d5@rhs*) G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?))) G4107@G4105 G4106@G4104))))) G40fd@G40fb G40fc@G40fa))) (if (memv G40f8@t '(define-syntax)) (call-with-values (lambda () (G2eec@parse-define-syntax G40e5@e)) (lambda (G4110@G410e G4111@G410f) ((lambda (G4114@rhs G4115@id) (begin (if (G2d75@bound-id-member? G4115@id G40f6@kwd*) (G3053@syntax-violation '#f '"cannot redefine keyword" G40e5@e) (void)) ((lambda (G4118@lab G4119@expanded-rhs) (begin (G2d18@extend-rib! G40d9@rib G4115@id G4118@lab) ((lambda (G411c@b) (G2fc3@chi-body* (cdr G40d1@e*) (cons (cons G4118@lab G411c@b) G40d2@r) (cons (cons G4118@lab G411c@b) G40d3@mr) G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?)) (G2da7@make-eval-transformer G4119@expanded-rhs)))) (G2ced@gen-define-label G4115@id G40d9@rib) (G2fc5@expand-transformer G4114@rhs G40d3@mr)))) G4111@G410f G4110@G410e))) (if (memv G40f8@t '(let-syntax letrec-syntax)) ((lambda (G411e@t) ((lambda (G4120@ls/false) (if (and G4120@ls/false (apply (lambda (G4122@xlhs* G4123@xrhs* G4124@xbody*) (if (not (G2d71@valid-bound-ids? G4122@xlhs*)) (G3053@syntax-violation '#f '"invalid identifiers" G40e5@e) (void))) G4120@ls/false)) (apply (lambda (G4128@xlhs* G4129@xrhs* G412a@xbody*) ((lambda (G412e@xlab*) ((lambda (G4130@xrib) ((lambda (G4132@xb*) ((lambda () (G2fc3@chi-body* (append (map (lambda (G4134@x) (G2d53@add-subst G4130@xrib G4134@x)) G412a@xbody*) (cdr G40d1@e*)) (append (map cons G412e@xlab* G4132@xb*) G40d2@r) (append (map cons G412e@xlab* G4132@xb*) G40d3@mr) G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?)))) (map (lambda (G4136@x) (G2da7@make-eval-transformer (G2fc5@expand-transformer (if (eq? G40f2@type 'let-syntax) G4136@x (G2d53@add-subst G4130@xrib G4136@x)) G40d3@mr))) G4129@xrhs*))) (G2d22@make-full-rib G4128@xlhs* G412e@xlab*))) (map G2ce7@gen-label G4128@xlhs*))) G4120@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G411e@t))) (G2f66@syntax-dispatch G411e@t '(_ #(each (any any)) . each-any)))) G40e5@e) (if (memv G40f8@t '(begin)) ((lambda (G4138@t) ((lambda (G413a@ls/false) (if G413a@ls/false (apply (lambda (G413c@x*) (G2fc3@chi-body* (append G413c@x* (cdr G40d1@e*)) G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?)) G413a@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G4138@t))) (G2f66@syntax-dispatch G4138@t '(_ . each-any)))) G40e5@e) (if (memv G40f8@t '(global-macro global-macro!)) (G2fc3@chi-body* (cons (G2d53@add-subst G40d9@rib (G2f84@chi-global-macro G40f1@value G40e5@e)) (cdr G40d1@e*)) G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?) (if (memv G40f8@t '(local-macro local-macro!)) (G2fc3@chi-body* (cons (G2d53@add-subst G40d9@rib (G2f82@chi-local-macro G40f1@value G40e5@e)) (cdr G40d1@e*)) G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?) (if (memv G40f8@t '(macro macro!)) (G2fc3@chi-body* (cons (G2d53@add-subst G40d9@rib (G2f80@chi-macro G40f1@value G40e5@e)) (cdr G40d1@e*)) G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?) (if (memv G40f8@t '(module)) (call-with-values (lambda () (G2fc1@chi-internal-module G40e5@e G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd*)) (lambda (G4146@G413e G4147@G413f G4148@G4140 G4149@G4141 G414a@G4142 G414b@G4143 G414c@G4144 G414d@G4145) ((lambda (G4156@kwd* G4157@mod** G4158@mr G4159@r G415a@m-exp-lab* G415b@m-exp-id* G415c@rhs* G415d@lex*) (begin (vector-for-each (lambda (G4166@id G4167@lab) (G2d18@extend-rib! G40d9@rib G4166@id G4167@lab)) G415b@m-exp-id* G415a@m-exp-lab*) (G2fc3@chi-body* (cdr G40d1@e*) G4159@r G4158@mr G415d@lex* G415c@rhs* G4157@mod** G4156@kwd* G40d8@exp* G40d9@rib G40da@top?))) G414d@G4145 G414c@G4144 G414b@G4143 G414a@G4142 G4149@G4141 G4148@G4140 G4147@G413f G4146@G413e))) (if (memv G40f8@t '(library)) (begin (G3033@library-expander (G2d7d@stx->datum G40e5@e)) (G2fc3@chi-body* (cdr G40d1@e*) G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?)) (if (memv G40f8@t '(export)) ((lambda (G416a@t) ((lambda (G416c@ls/false) (if G416c@ls/false (apply (lambda (G416e@exp-decl*) (G2fc3@chi-body* (cdr G40d1@e*) G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* (append G416e@exp-decl* G40d8@exp*) G40d9@rib G40da@top?)) G416c@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G416a@t))) (G2f66@syntax-dispatch G416a@t '(_ . each-any)))) G40e5@e) (if (memv G40f8@t '(import)) ((lambda () ((lambda (G4171@module-import? G4173@module-import G4175@library-import) (begin (set! G4171@module-import? (lambda (G41bd@e) ((lambda (G41bf@t) ((lambda (G41c1@ls/false) (if (and G41c1@ls/false (apply (lambda (G41c3@id) (G2d67@id? G41c3@id)) G41c1@ls/false)) (apply (lambda (G41c5@id) '#t) G41c1@ls/false) ((lambda (G41c7@t) ((lambda (G41c9@ls/false) (if G41c9@ls/false (apply (lambda (G41cb@imp*) '#f) G41c9@ls/false) ((lambda (G41cd@t) ((lambda (G41cf@ls/false) (if G41cf@ls/false (apply (lambda () (G3053@syntax-violation '#f '"malformed import form" G41bd@e)) G41cf@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G41cd@t))) (G2f66@syntax-dispatch G41cd@t '_))) G41c7@t))) (G2f66@syntax-dispatch G41c7@t '(_ . each-any)))) G41bf@t))) (G2f66@syntax-dispatch G41bf@t '(_ any)))) G41bd@e))) (set! G4173@module-import (lambda (G419e@e G419f@r) ((lambda (G41a2@t) ((lambda (G41a4@ls/false) (if (and G41a4@ls/false (apply (lambda (G41a6@id) (G2d67@id? G41a6@id)) G41a4@ls/false)) (apply (lambda (G41a8@id) (call-with-values (lambda () (G2d8f@syntax-type G41a8@id G419f@r)) (lambda (G41ad@G41aa G41ae@G41ab G41af@G41ac) ((lambda (G41b3@kwd G41b4@value G41b5@type) ((lambda (G41b9@t) (if (memv G41b9@t '($module)) ((lambda (G41bb@iface) (values (G2fbf@module-interface-exp-id* G41bb@iface G41a8@id) (G2fb7@module-interface-exp-lab-vec G41bb@iface))) G41b4@value) (G3053@syntax-violation '#f '"invalid import" G419e@e))) G41b5@type)) G41af@G41ac G41ae@G41ab G41ad@G41aa)))) G41a4@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G41a2@t))) (G2f66@syntax-dispatch G41a2@t '(_ any)))) G419e@e))) (set! G4175@library-import (lambda (G4184@e) ((lambda (G4186@t) ((lambda (G4188@ls/false) (if G4188@ls/false (apply (lambda (G418a@ctxt G418b@imp*) (call-with-values (lambda () (G2fcd@parse-import-spec* (G3059@syntax->datum G418b@imp*))) (lambda (G4190@G418e G4191@G418f) ((lambda (G4194@subst-labels G4195@subst-names) (values (vector-map (lambda (G4198@name) (G2d45@datum->stx G418a@ctxt G4198@name)) G4195@subst-names) G4194@subst-labels)) G4191@G418f G4190@G418e)))) G4188@ls/false) ((lambda (G419a@t) ((lambda (G419c@ls/false) (if G419c@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid import form" G4184@e)) G419c@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G419a@t))) (G2f66@syntax-dispatch G419a@t '_))) G4186@t))) (G2f66@syntax-dispatch G4186@t '(any . each-any)))) G4184@e))) (begin (call-with-values (lambda () (if (G4171@module-import? G40e5@e) (G4173@module-import G40e5@e G40d2@r) (G4175@library-import G40e5@e))) (lambda (G4178@G4176 G4179@G4177) ((lambda (G417c@lab* G417d@id*) (vector-for-each (lambda (G4180@id G4181@lab) (G2d18@extend-rib! G40d9@rib G4180@id G4181@lab)) G417d@id* G417c@lab*)) G4179@G4177 G4178@G4176))) (G2fc3@chi-body* (cdr G40d1@e*) G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?)))) '#f '#f '#f))) (if G40da@top? (G2fc3@chi-body* (cdr G40d1@e*) G40d2@r G40d3@mr (cons (G2ce3@gen-lexical 'dummy) G40d4@lex*) (cons (cons 'top-expr G40e5@e) G40d5@rhs*) G40d6@mod** G40f6@kwd* G40d8@exp* G40d9@rib G40da@top?) (values G40d1@e* G40d2@r G40d3@mr G40d4@lex* G40d5@rhs* G40d6@mod** G40f6@kwd* G40d8@exp*)))))))))))))) G40f2@type)) (if (G2d67@id? G40f0@kwd) (cons G40f0@kwd G40d7@kwd*) G40d7@kwd*))) G40ec@G40e9 G40eb@G40e8 G40ea@G40e7)))) (car G40d1@e*))))) (set! G2fc5@expand-transformer (lambda (G41d1@expr G41d2@r) ((lambda (G41d5@rtc) ((lambda (G41d7@expanded-rhs) (begin (for-each ((lambda (G41d9@mark-visit) (lambda (G41db@x) (begin (G2b7e@G2a25@invoke-library G41db@x) (G41d9@mark-visit G41db@x)))) (G2fd5@vis-collector)) (G41d5@rtc)) G41d7@expanded-rhs)) ((lambda (G41e1@G41dd G41e2@G41de G41e3@G41df G41e4@G41e0) ((lambda (G41e9@swap) (dynamic-wind G41e9@swap (lambda () (G2f8a@chi-expr G41d1@expr G41d2@r G41d2@r)) G41e9@swap)) (lambda () (begin ((lambda (G41eb@t) (begin (G41e1@G41dd G41e3@G41df) (set! G41e3@G41df G41eb@t))) (G41e1@G41dd)) ((lambda (G41ed@t) (begin (G41e2@G41de G41e4@G41e0) (set! G41e4@G41e0 G41ed@t))) (G41e2@G41de)))))) G2fd3@inv-collector G2fd5@vis-collector G41d5@rtc (lambda (G41ef@x) (values))))) (G2fd1@make-collector)))) (set! G2fc7@parse-exports (lambda (G41f1@exp*) ((letrec ((G41f3@f (lambda (G41f5@exp* G41f6@int* G41f7@ext*) (if (null? G41f5@exp*) (begin (if (not (G2d71@valid-bound-ids? G41f7@ext*)) (G3053@syntax-violation 'export '"invalid exports" (G2f9e@find-dups G41f7@ext*)) (void)) (values (map G3059@syntax->datum G41f7@ext*) G41f6@int*)) ((lambda (G41fb@t) ((lambda (G41fd@ls/false) (if G41fd@ls/false (apply (lambda (G41ff@rename G4200@i* G4201@e*) (begin (if (not (and (eq? (G3059@syntax->datum G41ff@rename) 'rename) (for-all G2d67@id? G4200@i*) (for-all G2d67@id? G4201@e*))) (G3053@syntax-violation 'export '"invalid export specifier" (car G41f5@exp*)) (void)) (G41f3@f (cdr G41f5@exp*) (append G4200@i* G41f6@int*) (append G4201@e* G41f7@ext*)))) G41fd@ls/false) ((lambda (G4205@t) ((lambda (G4207@ls/false) (if G4207@ls/false (apply (lambda (G4209@ie) (begin (if (not (G2d67@id? G4209@ie)) (G3053@syntax-violation 'export '"invalid export" G4209@ie) (void)) (G41f3@f (cdr G41f5@exp*) (cons G4209@ie G41f6@int*) (cons G4209@ie G41f7@ext*)))) G4207@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G4205@t))) (G2f66@syntax-dispatch G4205@t 'any))) G41fb@t))) (G2f66@syntax-dispatch G41fb@t '(any . #(each (any any)))))) (car G41f5@exp*)))))) G41f3@f) G41f1@exp* '() '()))) (set! G2fc9@parse-library-name (lambda (G420b@spec) ((lambda (G420e@parse) (begin (set! G420e@parse (lambda (G4219@x) ((lambda (G421b@t) ((lambda (G421d@ls/false) (if (and G421d@ls/false (apply (lambda (G421f@v*) (for-all (lambda (G4221@x) ((lambda (G4223@x) (and (integer? G4223@x) (exact? G4223@x))) (G3059@syntax->datum G4221@x))) G421f@v*)) G421d@ls/false)) (apply (lambda (G4225@v*) (values '() (map G3059@syntax->datum G4225@v*))) G421d@ls/false) ((lambda (G4227@t) ((lambda (G4229@ls/false) (if (and G4229@ls/false (apply (lambda (G422b@x G422c@rest) (symbol? (G3059@syntax->datum G422b@x))) G4229@ls/false)) (apply (lambda (G422f@x G4230@rest) (call-with-values (lambda () (G420e@parse G4230@rest)) (lambda (G4235@G4233 G4236@G4234) ((lambda (G4239@v* G423a@x*) (values (cons (G3059@syntax->datum G422f@x) G423a@x*) G4239@v*)) G4236@G4234 G4235@G4233)))) G4229@ls/false) ((lambda (G423d@t) ((lambda (G423f@ls/false) (if G423f@ls/false (apply (lambda () (values '() '())) G423f@ls/false) ((lambda (G4241@t) ((lambda (G4243@ls/false) (if G4243@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid library name" G420b@spec)) G4243@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G4241@t))) (G2f66@syntax-dispatch G4241@t '_))) G423d@t))) (G2f66@syntax-dispatch G423d@t '()))) G4227@t))) (G2f66@syntax-dispatch G4227@t '(any . any)))) G421b@t))) (G2f66@syntax-dispatch G421b@t '(each-any)))) G4219@x))) (call-with-values (lambda () (G420e@parse G420b@spec)) (lambda (G4211@G420f G4212@G4210) ((lambda (G4215@ver* G4216@name*) (begin (if (null? G4216@name*) (G3053@syntax-violation '#f '"empty library name" G420b@spec) (void)) (values G4216@name* G4215@ver*))) G4212@G4210 G4211@G420f))))) '#f))) (set! G2fcb@parse-library (lambda (G4245@e) ((lambda (G4247@t) ((lambda (G4249@ls/false) (if (and G4249@ls/false (apply (lambda (G424b@library G424c@name* G424d@export G424e@exp* G424f@import G4250@imp* G4251@b*) (and (eq? (G3059@syntax->datum G424d@export) 'export) (eq? (G3059@syntax->datum G424f@import) 'import) (eq? (G3059@syntax->datum G424b@library) 'library))) G4249@ls/false)) (apply (lambda (G4259@library G425a@name* G425b@export G425c@exp* G425d@import G425e@imp* G425f@b*) (values G425a@name* G425c@exp* G425e@imp* G425f@b*)) G4249@ls/false) ((lambda (G4267@t) ((lambda (G4269@ls/false) (if G4269@ls/false (apply (lambda () (G3053@syntax-violation '#f '"malformed library" G4245@e)) G4269@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G4267@t))) (G2f66@syntax-dispatch G4267@t '_))) G4247@t))) (G2f66@syntax-dispatch G4247@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4245@e))) (set! G2fcd@parse-import-spec* ((lambda () ((lambda (G426c@idsyn? G426e@dup-error G4270@merge-substs G4272@exclude* G4274@find* G4276@rem* G4278@remove-dups G427a@parse-library-name G427c@import-library G427e@get-import G4280@add-imports!) (begin (set! G426c@idsyn? (lambda (G446b@x) (symbol? (G3059@syntax->datum G446b@x)))) (set! G426e@dup-error (lambda (G4469@name) (G3053@syntax-violation 'import '"two imports with different bindings" G4469@name))) (set! G4270@merge-substs (lambda (G4457@s G4458@subst) ((lambda (G445c@insert-to-subst) (begin (set! G445c@insert-to-subst (lambda (G445d@a G445e@subst) ((lambda (G4461@name G4462@label) ((lambda (G4465@t) (if G4465@t ((lambda (G4467@x) (if (eq? (cdr G4467@x) G4462@label) G445e@subst (G426e@dup-error G4461@name))) G4465@t) (cons G445d@a G445e@subst))) (assq G4461@name G445e@subst))) (car G445d@a) (cdr G445d@a)))) (if (null? G4457@s) G4458@subst (G445c@insert-to-subst (car G4457@s) (G4270@merge-substs (cdr G4457@s) G4458@subst))))) '#f))) (set! G4272@exclude* (lambda (G442d@sym* G442e@subst) ((lambda (G4432@exclude) (begin (set! G4432@exclude (lambda (G4447@sym G4448@subst) (if (null? G4448@subst) (G3053@syntax-violation 'import '"cannot rename unbound identifier" G4447@sym) (if (eq? G4447@sym (caar G4448@subst)) (values (cdar G4448@subst) (cdr G4448@subst)) ((lambda (G444b@a) (call-with-values (lambda () (G4432@exclude G4447@sym (cdr G4448@subst))) (lambda (G444f@G444d G4450@G444e) ((lambda (G4453@subst G4454@old) (values G4454@old (cons G444b@a G4453@subst))) G4450@G444e G444f@G444d)))) (car G4448@subst)))))) (if (null? G442d@sym*) (values '() G442e@subst) (call-with-values (lambda () (G4432@exclude (car G442d@sym*) G442e@subst)) (lambda (G4435@G4433 G4436@G4434) ((lambda (G4439@subst G443a@old) (call-with-values (lambda () (G4272@exclude* (cdr G442d@sym*) G4439@subst)) (lambda (G443f@G443d G4440@G443e) ((lambda (G4443@subst G4444@old*) (values (cons G443a@old G4444@old*) G4443@subst)) G4440@G443e G443f@G443d)))) G4436@G4434 G4435@G4433)))))) '#f))) (set! G4274@find* (lambda (G4425@sym* G4426@subst) (map (lambda (G4429@x) ((lambda (G442b@t) (if G442b@t (cdr G442b@t) (G3053@syntax-violation 'import '"cannot find identifier" G4429@x))) (assq G4429@x G4426@subst))) G4425@sym*))) (set! G4276@rem* (lambda (G441d@sym* G441e@subst) ((letrec ((G4421@f (lambda (G4423@subst) (if (null? G4423@subst) '() (if (memq (caar G4423@subst) G441d@sym*) (G4421@f (cdr G4423@subst)) (cons (car G4423@subst) (G4421@f (cdr G4423@subst)))))))) G4421@f) G441e@subst))) (set! G4278@remove-dups (lambda (G441b@ls) (if (null? G441b@ls) '() (if (memq (car G441b@ls) (cdr G441b@ls)) (G4278@remove-dups (cdr G441b@ls)) (cons (car G441b@ls) (G4278@remove-dups (cdr G441b@ls))))))) (set! G427a@parse-library-name (lambda (G4335@spec) ((lambda (G4338@subversion? G433a@subversion-pred G433c@version-pred) (begin (set! G4338@subversion? (lambda (G4417@x) ((lambda (G4419@x) (and (integer? G4419@x) (exact? G4419@x) (>= G4419@x '0))) (G3059@syntax->datum G4417@x)))) (set! G433a@subversion-pred (lambda (G43b7@x*) ((lambda (G43b9@t) ((lambda (G43bb@ls/false) (if (and G43bb@ls/false (apply (lambda (G43bd@n) (G4338@subversion? G43bd@n)) G43bb@ls/false)) (apply (lambda (G43bf@n) (lambda (G43c1@x) (= G43c1@x (G3059@syntax->datum G43bf@n)))) G43bb@ls/false) ((lambda (G43c3@t) ((lambda (G43c5@ls/false) (if (and G43c5@ls/false (apply (lambda (G43c7@p? G43c8@sub*) (eq? (G3059@syntax->datum G43c7@p?) 'and)) G43c5@ls/false)) (apply (lambda (G43cb@p? G43cc@sub*) ((lambda (G43cf@p*) (lambda (G43d1@x) (for-all (lambda (G43d3@p) (G43d3@p G43d1@x)) G43cf@p*))) (map G433a@subversion-pred G43cc@sub*))) G43c5@ls/false) ((lambda (G43d5@t) ((lambda (G43d7@ls/false) (if (and G43d7@ls/false (apply (lambda (G43d9@p? G43da@sub*) (eq? (G3059@syntax->datum G43d9@p?) 'or)) G43d7@ls/false)) (apply (lambda (G43dd@p? G43de@sub*) ((lambda (G43e1@p*) (lambda (G43e3@x) (exists (lambda (G43e5@p) (G43e5@p G43e3@x)) G43e1@p*))) (map G433a@subversion-pred G43de@sub*))) G43d7@ls/false) ((lambda (G43e7@t) ((lambda (G43e9@ls/false) (if (and G43e9@ls/false (apply (lambda (G43eb@p? G43ec@sub) (eq? (G3059@syntax->datum G43eb@p?) 'not)) G43e9@ls/false)) (apply (lambda (G43ef@p? G43f0@sub) ((lambda (G43f3@p) (lambda (G43f5@x) (not (G43f3@p G43f5@x)))) (G433a@subversion-pred G43f0@sub))) G43e9@ls/false) ((lambda (G43f7@t) ((lambda (G43f9@ls/false) (if (and G43f9@ls/false (apply (lambda (G43fb@p? G43fc@n) (and (eq? (G3059@syntax->datum G43fb@p?) '<=) (G4338@subversion? G43fc@n))) G43f9@ls/false)) (apply (lambda (G43ff@p? G4400@n) (lambda (G4403@x) (<= G4403@x (G3059@syntax->datum G4400@n)))) G43f9@ls/false) ((lambda (G4405@t) ((lambda (G4407@ls/false) (if (and G4407@ls/false (apply (lambda (G4409@p? G440a@n) (and (eq? (G3059@syntax->datum G4409@p?) '>=) (G4338@subversion? G440a@n))) G4407@ls/false)) (apply (lambda (G440d@p? G440e@n) (lambda (G4411@x) (>= G4411@x (G3059@syntax->datum G440e@n)))) G4407@ls/false) ((lambda (G4413@t) ((lambda (G4415@ls/false) (if G4415@ls/false (apply (lambda () (G3053@syntax-violation 'import '"invalid sub-version spec" G4335@spec G43b7@x*)) G4415@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G4413@t))) (G2f66@syntax-dispatch G4413@t '_))) G4405@t))) (G2f66@syntax-dispatch G4405@t '(any any)))) G43f7@t))) (G2f66@syntax-dispatch G43f7@t '(any any)))) G43e7@t))) (G2f66@syntax-dispatch G43e7@t '(any any)))) G43d5@t))) (G2f66@syntax-dispatch G43d5@t '(any . each-any)))) G43c3@t))) (G2f66@syntax-dispatch G43c3@t '(any . each-any)))) G43b9@t))) (G2f66@syntax-dispatch G43b9@t 'any))) G43b7@x*))) (set! G433c@version-pred (lambda (G4367@x*) ((lambda (G4369@t) ((lambda (G436b@ls/false) (if G436b@ls/false (apply (lambda () (lambda (G436d@x) '#t)) G436b@ls/false) ((lambda (G436f@t) ((lambda (G4371@ls/false) (if (and G4371@ls/false (apply (lambda (G4373@c G4374@ver*) (eq? (G3059@syntax->datum G4373@c) 'and)) G4371@ls/false)) (apply (lambda (G4377@c G4378@ver*) ((lambda (G437b@p*) (lambda (G437d@x) (for-all (lambda (G437f@p) (G437f@p G437d@x)) G437b@p*))) (map G433c@version-pred G4378@ver*))) G4371@ls/false) ((lambda (G4381@t) ((lambda (G4383@ls/false) (if (and G4383@ls/false (apply (lambda (G4385@c G4386@ver*) (eq? (G3059@syntax->datum G4385@c) 'or)) G4383@ls/false)) (apply (lambda (G4389@c G438a@ver*) ((lambda (G438d@p*) (lambda (G438f@x) (exists (lambda (G4391@p) (G4391@p G438f@x)) G438d@p*))) (map G433c@version-pred G438a@ver*))) G4383@ls/false) ((lambda (G4393@t) ((lambda (G4395@ls/false) (if (and G4395@ls/false (apply (lambda (G4397@c G4398@ver) (eq? (G3059@syntax->datum G4397@c) 'not)) G4395@ls/false)) (apply (lambda (G439b@c G439c@ver) ((lambda (G439f@p) (lambda (G43a1@x) (not (G439f@p G43a1@x)))) (G433c@version-pred G439c@ver))) G4395@ls/false) ((lambda (G43a3@t) ((lambda (G43a5@ls/false) (if G43a5@ls/false (apply (lambda (G43a7@sub*) ((lambda (G43a9@p*) (lambda (G43ab@x) ((letrec ((G43ad@f (lambda (G43af@p* G43b0@x) (if (null? G43af@p*) '#t (if (null? G43b0@x) '#f (and ((car G43af@p*) (car G43b0@x)) (G43ad@f (cdr G43af@p*) (cdr G43b0@x)))))))) G43ad@f) G43a9@p* G43ab@x))) (map G433a@subversion-pred G43a7@sub*))) G43a5@ls/false) ((lambda (G43b3@t) ((lambda (G43b5@ls/false) (if G43b5@ls/false (apply (lambda () (G3053@syntax-violation 'import '"invalid version spec" G4335@spec G4367@x*)) G43b5@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G43b3@t))) (G2f66@syntax-dispatch G43b3@t '_))) G43a3@t))) (G2f66@syntax-dispatch G43a3@t 'each-any))) G4393@t))) (G2f66@syntax-dispatch G4393@t '(any any)))) G4381@t))) (G2f66@syntax-dispatch G4381@t '(any . each-any)))) G436f@t))) (G2f66@syntax-dispatch G436f@t '(any . each-any)))) G4369@t))) (G2f66@syntax-dispatch G4369@t '()))) G4367@x*))) ((letrec ((G433d@f (lambda (G433f@x) ((lambda (G4341@t) ((lambda (G4343@ls/false) (if G4343@ls/false (apply (lambda (G4345@version-spec*) (values '() (G433c@version-pred G4345@version-spec*))) G4343@ls/false) ((lambda (G4347@t) ((lambda (G4349@ls/false) (if (and G4349@ls/false (apply (lambda (G434b@x G434c@x*) (G426c@idsyn? G434b@x)) G4349@ls/false)) (apply (lambda (G434f@x G4350@x*) (call-with-values (lambda () (G433d@f G4350@x*)) (lambda (G4355@G4353 G4356@G4354) ((lambda (G4359@pred G435a@name) (values (cons (G3059@syntax->datum G434f@x) G435a@name) G4359@pred)) G4356@G4354 G4355@G4353)))) G4349@ls/false) ((lambda (G435d@t) ((lambda (G435f@ls/false) (if G435f@ls/false (apply (lambda () (values '() (lambda (G4361@x) '#t))) G435f@ls/false) ((lambda (G4363@t) ((lambda (G4365@ls/false) (if G4365@ls/false (apply (lambda () (G3053@syntax-violation '#f '"invalid import spec" G4335@spec)) G4365@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G4363@t))) (G2f66@syntax-dispatch G4363@t '_))) G435d@t))) (G2f66@syntax-dispatch G435d@t '()))) G4347@t))) (G2f66@syntax-dispatch G4347@t '(any . any)))) G4341@t))) (G2f66@syntax-dispatch G4341@t '(each-any)))) G433f@x)))) G433d@f) G4335@spec))) '#f '#f '#f))) (set! G427c@import-library (lambda (G4327@spec*) (call-with-values (lambda () (G427a@parse-library-name G4327@spec*)) (lambda (G432b@G4329 G432c@G432a) ((lambda (G432f@pred G4330@name) (begin (if (null? G4330@name) (G3053@syntax-violation 'import '"empty library name" G4327@spec*) (void)) ((lambda (G4333@lib) (begin (if (not G4333@lib) (G3053@syntax-violation 'import '"cannot find library with required name" G4330@name) (void)) (if (not (G432f@pred (G2b4f@G29c7@library-version G4333@lib))) (G3053@syntax-violation 'import '"library does not satisfy version specification" G4327@spec* G4333@lib) (void)) ((G2fd7@imp-collector) G4333@lib) (G2b53@G29cf@library-subst G4333@lib))) (G2b77@G2a17@find-library-by-name G4330@name)))) G432c@G432a G432b@G4329))))) (set! G427e@get-import (lambda (G4299@spec) ((lambda (G429b@t) ((lambda (G429d@ls/false) (if (and G429d@ls/false (apply (lambda (G429f@x G42a0@x*) (not (memq (G3059@syntax->datum G429f@x) '(for rename except only prefix library)))) G429d@ls/false)) (apply (lambda (G42a3@x G42a4@x*) (G427c@import-library (cons G42a3@x G42a4@x*))) G429d@ls/false) ((lambda (G42a7@t) ((lambda (G42a9@ls/false) (if (and G42a9@ls/false (apply (lambda (G42ab@rename G42ac@isp G42ad@old* G42ae@new*) (and (eq? (G3059@syntax->datum G42ab@rename) 'rename) (for-all G426c@idsyn? G42ad@old*) (for-all G426c@idsyn? G42ae@new*))) G42a9@ls/false)) (apply (lambda (G42b3@rename G42b4@isp G42b5@old* G42b6@new*) ((lambda (G42bb@subst G42bc@old* G42bd@new*) ((lambda (G42c1@old-label*) ((lambda (G42c3@subst) (G4270@merge-substs (map cons G42bd@new* G42c1@old-label*) G42c3@subst)) (G4276@rem* G42bc@old* G42bb@subst))) (G4274@find* G42bc@old* G42bb@subst))) (G427e@get-import G42b4@isp) (map G3059@syntax->datum G42b5@old*) (map G3059@syntax->datum G42b6@new*))) G42a9@ls/false) ((lambda (G42c5@t) ((lambda (G42c7@ls/false) (if (and G42c7@ls/false (apply (lambda (G42c9@except G42ca@isp G42cb@sym*) (and (eq? (G3059@syntax->datum G42c9@except) 'except) (for-all G426c@idsyn? G42cb@sym*))) G42c7@ls/false)) (apply (lambda (G42cf@except G42d0@isp G42d1@sym*) ((lambda (G42d5@subst) (G4276@rem* (map G3059@syntax->datum G42d1@sym*) G42d5@subst)) (G427e@get-import G42d0@isp))) G42c7@ls/false) ((lambda (G42d7@t) ((lambda (G42d9@ls/false) (if (and G42d9@ls/false (apply (lambda (G42db@only G42dc@isp G42dd@sym*) (and (eq? (G3059@syntax->datum G42db@only) 'only) (for-all G426c@idsyn? G42dd@sym*))) G42d9@ls/false)) (apply (lambda (G42e1@only G42e2@isp G42e3@sym*) ((lambda (G42e7@subst G42e8@sym*) ((lambda (G42eb@sym*) ((lambda (G42ed@lab*) (map cons G42eb@sym* G42ed@lab*)) (G4274@find* G42eb@sym* G42e7@subst))) (G4278@remove-dups G42e8@sym*))) (G427e@get-import G42e2@isp) (map G3059@syntax->datum G42e3@sym*))) G42d9@ls/false) ((lambda (G42ef@t) ((lambda (G42f1@ls/false) (if (and G42f1@ls/false (apply (lambda (G42f3@prefix G42f4@isp G42f5@p) (and (eq? (G3059@syntax->datum G42f3@prefix) 'prefix) (G426c@idsyn? G42f5@p))) G42f1@ls/false)) (apply (lambda (G42f9@prefix G42fa@isp G42fb@p) ((lambda (G42ff@subst G4300@prefix) (map (lambda (G4303@x) (cons (string->symbol (string-append G4300@prefix (symbol->string (car G4303@x)))) (cdr G4303@x))) G42ff@subst)) (G427e@get-import G42fa@isp) (symbol->string (G3059@syntax->datum G42fb@p)))) G42f1@ls/false) ((lambda (G4305@t) ((lambda (G4307@ls/false) (if (and G4307@ls/false (apply (lambda (G4309@library G430a@spec*) (eq? (G3059@syntax->datum G4309@library) 'library)) G4307@ls/false)) (apply (lambda (G430d@library G430e@spec*) (G427c@import-library G430e@spec*)) G4307@ls/false) ((lambda (G4311@t) ((lambda (G4313@ls/false) (if (and G4313@ls/false (apply (lambda (G4315@for G4316@isp G4317@rest) (eq? (G3059@syntax->datum G4315@for) 'for)) G4313@ls/false)) (apply (lambda (G431b@for G431c@isp G431d@rest) (G427e@get-import G431c@isp)) G4313@ls/false) ((lambda (G4321@t) ((lambda (G4323@ls/false) (if G4323@ls/false (apply (lambda (G4325@spec) (G3053@syntax-violation 'import '"invalid import spec" G4325@spec)) G4323@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G4321@t))) (G2f66@syntax-dispatch G4321@t 'any))) G4311@t))) (G2f66@syntax-dispatch G4311@t '(any any . any)))) G4305@t))) (G2f66@syntax-dispatch G4305@t '(any each-any)))) G42ef@t))) (G2f66@syntax-dispatch G42ef@t '(any any any)))) G42d7@t))) (G2f66@syntax-dispatch G42d7@t '(any any . each-any)))) G42c5@t))) (G2f66@syntax-dispatch G42c5@t '(any any . each-any)))) G42a7@t))) (G2f66@syntax-dispatch G42a7@t '(any any . #(each (any any)))))) G429b@t))) (G2f66@syntax-dispatch G429b@t '(any . each-any)))) G4299@spec))) (set! G4280@add-imports! (lambda (G4289@imp G428a@h) ((lambda (G428d@subst) (for-each (lambda (G428f@x) ((lambda (G4291@name G4292@label) ((lambda (G4295@t) (if G4295@t ((lambda (G4297@l) (if (not (eq? G4297@l G4292@label)) (G426e@dup-error G4291@name) (void))) G4295@t) (hashtable-set! G428a@h G4291@name G4292@label))) (hashtable-ref G428a@h G4291@name '#f))) (car G428f@x) (cdr G428f@x))) G428d@subst)) (G427e@get-import G4289@imp)))) (lambda (G4281@imp*) ((letrec ((G4283@f (lambda (G4285@imp* G4286@h) (if (null? G4285@imp*) (hashtable-entries G4286@h) (begin (G4280@add-imports! (car G4285@imp*) G4286@h) (G4283@f (cdr G4285@imp*) G4286@h)))))) G4283@f) G4281@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fcf@make-top-rib (lambda (G446d@names G446e@labels) ((lambda (G4471@rib) (begin (vector-for-each (lambda (G4473@name G4474@label) (begin (if (not (symbol? G4473@name)) (error 'make-top-rib '"BUG: not a symbol" G4473@name) (void)) (G2d1a@extend-rib/nc! G4471@rib (G2d31@make-stx G4473@name G2cdf@top-mark* '() '()) G4474@label))) G446d@names G446e@labels) G4471@rib)) (G2d14@make-cache-rib)))) (set! G2fd1@make-collector (lambda () ((lambda (G4477@ls) (lambda G447b ((lambda (G447c) (if (= G447c '0) (apply (lambda () G4477@ls) G447b) (if (= G447c '1) (apply (lambda (G4479@x) (set! G4477@ls (G2cd8@set-cons G4479@x G4477@ls))) G447b) (error 'apply '"invalid arg count")))) (length G447b)))) '()))) (set! G2fd3@inv-collector (G2903@G283c@make-parameter (lambda G447d@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G447f@x) (begin (if (not (procedure? G447f@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G447f@x) (void)) G447f@x)))) (set! G2fd5@vis-collector (G2903@G283c@make-parameter (lambda G4481@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G4483@x) (begin (if (not (procedure? G4483@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G4483@x) (void)) G4483@x)))) (set! G2fd7@imp-collector (G2903@G283c@make-parameter (lambda G4485@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4487@x) (begin (if (not (procedure? G4487@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4487@x) (void)) G4487@x)))) (set! G2fd9@chi-library-internal (lambda (G4489@e* G448a@rib G448b@top?) (call-with-values (lambda () (G2fc3@chi-body* G4489@e* '() '() '() '() '() '() '() G448a@rib G448b@top?)) (lambda (G4497@G448f G4498@G4490 G4499@G4491 G449a@G4492 G449b@G4493 G449c@G4494 G449d@G4495 G449e@G4496) ((lambda (G44a7@exp* G44a8@_kwd* G44a9@mod** G44aa@rhs* G44ab@lex* G44ac@mr G44ad@r G44ae@e*) (values (append (apply append (reverse G44a9@mod**)) G44ae@e*) G44ad@r G44ac@mr (reverse G44ab@lex*) (reverse G44aa@rhs*) G44a7@exp*)) G449e@G4496 G449d@G4495 G449c@G4494 G449b@G4493 G449a@G4492 G4499@G4491 G4498@G4490 G4497@G448f))))) (set! G2fdb@chi-interaction-expr (lambda (G44b7@e G44b8@rib G44b9@r) (call-with-values (lambda () (G2fc3@chi-body* (list G44b7@e) G44b9@r G44b9@r '() '() '() '() '() G44b8@rib '#t)) (lambda (G44c5@G44bd G44c6@G44be G44c7@G44bf G44c8@G44c0 G44c9@G44c1 G44ca@G44c2 G44cb@G44c3 G44cc@G44c4) ((lambda (G44d5@_exp* G44d6@_kwd* G44d7@mod** G44d8@rhs* G44d9@lex* G44da@mr G44db@r G44dc@e*) ((lambda (G44e5@e*) ((lambda (G44e7@e) (values G44e7@e G44db@r)) (if (null? G44e5@e*) (G2cc5@G2c37@build-void) (if (null? (cdr G44e5@e*)) (car G44e5@e*) (G2cc4@G2c35@build-sequence '#f G44e5@e*))))) (G2f98@expand-interaction-rhs*/init* (reverse G44d9@lex*) (reverse G44d8@rhs*) (append (apply append (reverse G44d7@mod**)) G44dc@e*) G44db@r G44da@mr))) G44cc@G44c4 G44cb@G44c3 G44ca@G44c2 G44c9@G44c1 G44c8@G44c0 G44c7@G44bf G44c6@G44be G44c5@G44bd))))) (set! G2fdd@library-body-expander (lambda (G44e9@name G44ea@main-exp* G44eb@imp* G44ec@b* G44ed@top?) ((lambda (G44f4@itc) (begin (set! G44f4@itc (G2fd1@make-collector)) ((lambda (G44f9@G44f5 G44fa@G44f6 G44fb@G44f7 G44fc@G44f8) ((lambda (G4501@swap) (dynamic-wind G4501@swap (lambda () (call-with-values (lambda () (G2fcd@parse-import-spec* G44eb@imp*)) (lambda (G4505@G4503 G4506@G4504) ((lambda (G4509@subst-labels G450a@subst-names) ((lambda (G450d@rib) ((lambda (G4510@wrap) (begin (set! G4510@wrap (lambda (G457c@x) (G2d31@make-stx G457c@x G2cdf@top-mark* (list G450d@rib) '()))) ((lambda (G4511@b* G4512@main-exp* G4513@rtc G4514@vtc) ((lambda (G451d@G4519 G451e@G451a G451f@G451b G4520@G451c) ((lambda (G4525@swap) (dynamic-wind G4525@swap (lambda () (call-with-values (lambda () (G2fd9@chi-library-internal G4511@b* G450d@rib G44ed@top?)) (lambda (G452d@G4527 G452e@G4528 G452f@G4529 G4530@G452a G4531@G452b G4532@G452c) ((lambda (G4539@internal-exp* G453a@rhs* G453b@lex* G453c@mr G453d@r G453e@init*) (call-with-values (lambda () (G2fc7@parse-exports (append G4512@main-exp* G4539@internal-exp*))) (lambda (G4547@G4545 G4548@G4546) ((lambda (G454b@exp-id* G454c@exp-name*) (begin (G2d1e@seal-rib! G450d@rib) ((lambda (G454f@init*) ((lambda (G4551@rhs*) ((lambda () (begin (G2d20@unseal-rib! G450d@rib) ((lambda (G4553@loc* G4554@export-subst) ((lambda (G4558@errstr) (begin (set! G4558@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G303d@make-export-env/macros G453b@lex* G4553@loc* G453d@r)) (lambda (G455c@G4559 G455d@G455a G455e@G455b) ((lambda (G4562@macro* G4563@global* G4564@export-env) (begin (for-each (lambda (G4568@s) ((lambda (G456a@name G456b@label) ((lambda (G456e@p) (if G456e@p ((lambda (G4570@b) ((lambda (G4572@type) (if (eq? G4572@type 'mutable) (G3053@syntax-violation 'export G4558@errstr G456a@name) (void))) (car G4570@b))) (cdr G456e@p)) (void))) (assq G456b@label G4564@export-env))) (car G4568@s) (cdr G4568@s))) G4554@export-subst) ((lambda (G4574@invoke-body G4575@invoke-definitions) (values (G44f4@itc) (G4513@rtc) (G4514@vtc) (G2cc4@G2c35@build-sequence '#f (append G4575@invoke-definitions (list G4574@invoke-body))) G4562@macro* G4554@export-subst G4564@export-env)) (G2cc7@G2c3b@build-letrec* '#f G453b@lex* G4551@rhs* (G3039@build-exports G4563@global* G454f@init*)) (map G2cc0@G2b85@build-global-define (map cdr G4563@global*))))) G455e@G455b G455d@G455a G455c@G4559))))) '#f)) (map G2ce5@gen-global G453b@lex*) (G303b@make-export-subst G454c@exp-name* G454b@exp-id*)))))) (G2f9a@chi-rhs* G453a@rhs* G453d@r G453c@mr))) (G2f86@chi-expr* G453e@init* G453d@r G453c@mr)))) G4548@G4546 G4547@G4545)))) G4532@G452c G4531@G452b G4530@G452a G452f@G4529 G452e@G4528 G452d@G4527)))) G4525@swap)) (lambda () (begin ((lambda (G4578@t) (begin (G451d@G4519 G451f@G451b) (set! G451f@G451b G4578@t))) (G451d@G4519)) ((lambda (G457a@t) (begin (G451e@G451a G4520@G451c) (set! G4520@G451c G457a@t))) (G451e@G451a)))))) G2fd3@inv-collector G2fd5@vis-collector G4513@rtc G4514@vtc)) (map G4510@wrap G44ec@b*) (map G4510@wrap G44ea@main-exp*) (G2fd1@make-collector) (G2fd1@make-collector)))) '#f)) (G2fcf@make-top-rib G450a@subst-names G4509@subst-labels))) G4506@G4504 G4505@G4503)))) G4501@swap)) (lambda () (begin ((lambda (G457e@t) (begin (G44f9@G44f5 G44fb@G44f7) (set! G44fb@G44f7 G457e@t))) (G44f9@G44f5)) ((lambda (G4580@t) (begin (G44fa@G44f6 G44fc@G44f8) (set! G44fc@G44f8 G4580@t))) (G44fa@G44f6)))))) G2fd7@imp-collector G3061@top-level-context G44f4@itc '#f))) '#f))) (set! G2fdf@core-library-expander (lambda (G4582@e G4583@verify-name) (call-with-values (lambda () (G2fcb@parse-library G4582@e)) (lambda (G458a@G4586 G458b@G4587 G458c@G4588 G458d@G4589) ((lambda (G4592@b* G4593@imp* G4594@exp* G4595@name*) (call-with-values (lambda () (G2fc9@parse-library-name G4595@name*)) (lambda (G459c@G459a G459d@G459b) ((lambda (G45a0@ver G45a1@name) (begin (G4583@verify-name G45a1@name) (call-with-values (lambda () (G2fdd@library-body-expander G45a1@name G4594@exp* G4593@imp* G4592@b* '#f)) (lambda (G45ab@G45a4 G45ac@G45a5 G45ad@G45a6 G45ae@G45a7 G45af@G45a8 G45b0@G45a9 G45b1@G45aa) ((lambda (G45b9@export-env G45ba@export-subst G45bb@visit-code G45bc@invoke-code G45bd@visit-req* G45be@invoke-req* G45bf@imp*) (values G45a1@name G45a0@ver G45bf@imp* G45be@invoke-req* G45bd@visit-req* G45bc@invoke-code G45bb@visit-code G45ba@export-subst G45b9@export-env)) G45b1@G45aa G45b0@G45a9 G45af@G45a8 G45ae@G45a7 G45ad@G45a6 G45ac@G45a5 G45ab@G45a4))))) G459d@G459b G459c@G459a)))) G458d@G4589 G458c@G4588 G458b@G4587 G458a@G4586))))) (set! G2fe1@parse-top-level-program (lambda (G45c7@e*) ((lambda (G45c9@t) ((lambda (G45cb@ls/false) (if (and G45cb@ls/false (apply (lambda (G45cd@import G45ce@imp* G45cf@b*) (eq? (G3059@syntax->datum G45cd@import) 'import)) G45cb@ls/false)) (apply (lambda (G45d3@import G45d4@imp* G45d5@b*) (values G45d4@imp* G45d5@b*)) G45cb@ls/false) ((lambda (G45d9@t) ((lambda (G45db@ls/false) (if (and G45db@ls/false (apply (lambda (G45dd@import G45de@x G45df@y) (eq? (G3059@syntax->datum G45dd@import) 'import)) G45db@ls/false)) (apply (lambda (G45e3@import G45e4@x G45e5@y) (G3053@syntax-violation 'expander '"invalid syntax of top-level program" (G2d61@syntax-car G45c7@e*))) G45db@ls/false) ((lambda (G45e9@t) ((lambda (G45eb@ls/false) (if G45eb@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45eb@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G45e9@t))) (G2f66@syntax-dispatch G45e9@t '_))) G45d9@t))) (G2f66@syntax-dispatch G45d9@t '((any . any) . any)))) G45c9@t))) (G2f66@syntax-dispatch G45c9@t '((any . each-any) . each-any)))) G45c7@e*))) (set! G2fe3@top-level-expander (lambda (G45ed@e*) (call-with-values (lambda () (G2fe1@parse-top-level-program G45ed@e*)) (lambda (G45f1@G45ef G45f2@G45f0) ((lambda (G45f5@b* G45f6@imp*) (call-with-values (lambda () (G2fdd@library-body-expander '() '() G45f6@imp* G45f5@b* '#t)) (lambda (G4600@G45f9 G4601@G45fa G4602@G45fb G4603@G45fc G4604@G45fd G4605@G45fe G4606@G45ff) ((lambda (G460e@export-env G460f@export-subst G4610@visit-code G4611@invoke-code G4612@visit-req* G4613@invoke-req* G4614@imp*) (values G4613@invoke-req* G4611@invoke-code)) G4606@G45ff G4605@G45fe G4604@G45fd G4603@G45fc G4602@G45fb G4601@G45fa G4600@G45f9)))) G45f2@G45f0 G45f1@G45ef))))) (set! G2fe9@G2fe4 (make-record-type-descriptor 'env '#f 'G2fe7 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2feb@G2fe6 '#f) (set! G2fed@G2fe5 (make-record-constructor-descriptor G2fe9@G2fe4 '#f G2feb@G2fe6)) (set! G2ff0@env? (record-predicate G2fe9@G2fe4)) (set! G2ff2@make-env (record-constructor G2fed@G2fe5)) (set! G2ff4@env-names (record-accessor G2fe9@G2fe4 '0)) (set! G2ff6@env-labels (record-accessor G2fe9@G2fe4 '1)) (set! G2ff8@env-itc (record-accessor G2fe9@G2fe4 '2)) (set! G2ffa@set-env-names! (record-mutator G2fe9@G2fe4 '0)) (set! G2ffc@set-env-labels! (record-mutator G2fe9@G2fe4 '1)) (set! G2ffe@set-env-itc! (record-mutator G2fe9@G2fe4 '2)) (set! G3000@rp (G2900@G2836@make-record-printer 'env (lambda (G461c@x G461d@p G461e@wr) (display '"#<environment>" G461d@p)))) (set! G3006@G3001 (make-record-type-descriptor 'interaction-env '#f 'G3004 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3008@G3003 '#f) (set! G300a@G3002 (make-record-constructor-descriptor G3006@G3001 '#f G3008@G3003)) (set! G300d@interaction-env? (record-predicate G3006@G3001)) (set! G300f@make-interaction-env (record-constructor G300a@G3002)) (set! G3011@interaction-env-rib (record-accessor G3006@G3001 '0)) (set! G3013@interaction-env-r (record-accessor G3006@G3001 '1)) (set! G3015@interaction-env-locs (record-accessor G3006@G3001 '2)) (set! G3017@set-interaction-env-rib! (record-mutator G3006@G3001 '0)) (set! G3019@set-interaction-env-r! (record-mutator G3006@G3001 '1)) (set! G301b@set-interaction-env-locs! (record-mutator G3006@G3001 '2)) (set! G301d@rp (G2900@G2836@make-record-printer 'interaction-env (lambda (G4622@x G4623@p G4624@wr) (display '"#<environment>" G4623@p)))) (set! G301f@interaction-environment-symbols (lambda () (G3027@environment-symbols (G305f@interaction-environment)))) (set! G3021@environment-bindings (lambda (G4628@e) (vector->list (vector-map (lambda (G462a@name G462b@label) (G3023@parse-binding (cons G462a@name (G2b7d@G2a23@imported-label->binding G462b@label)))) (G2ff4@env-names G4628@e) (G2ff6@env-labels G4628@e))))) (set! G3023@parse-binding (lambda (G462e@b) (cons (car G462e@b) ((lambda (G4630@t) (if (memv G4630@t '(core-prim global)) 'procedure (if (memv G4630@t '(core-macro macro global-macro)) 'syntax (if (memv G4630@t '($core-rtd)) 'record (if (eq? (car G462e@b) (cadr G462e@b)) 'syntax 'unknown))))) (cadr G462e@b))))) (set! G3025@environment? (lambda (G4632@x) (or (G2ff0@env? G4632@x) (G300d@interaction-env? G4632@x)))) (set! G3027@environment-symbols (lambda (G4634@x) (if (G2ff0@env? G4634@x) (vector->list (G2ff4@env-names G4634@x)) (if (G300d@interaction-env? G4634@x) (map values (G2cfe@rib-sym* (G3011@interaction-env-rib G4634@x))) (assertion-violation 'environment-symbols '"not an environment" G4634@x))))) (set! G3029@environment (lambda G4636@imp* ((lambda (G4638@itc) ((lambda (G463c@G463a G463d@G463b) ((lambda (G4640@swap) (dynamic-wind G4640@swap (lambda () (call-with-values (lambda () (G2fcd@parse-import-spec* G4636@imp*)) (lambda (G4644@G4642 G4645@G4643) ((lambda (G4648@subst-labels G4649@subst-names) (G2ff2@make-env G4649@subst-names G4648@subst-labels G4638@itc)) G4645@G4643 G4644@G4642)))) G4640@swap)) (lambda () ((lambda (G464c@t) (begin (G463c@G463a G463d@G463b) (set! G463d@G463b G464c@t))) (G463c@G463a))))) G2fd7@imp-collector G4638@itc)) (G2fd1@make-collector)))) (set! G302b@null-environment (lambda (G464e@n) (begin (if (not (eqv? G464e@n '5)) (assertion-violation 'null-environment '"not 5" G464e@n) (void)) (G3029@environment '(psyntax null-environment-5))))) (set! G302d@scheme-report-environment (lambda (G4650@n) (begin (if (not (eqv? G4650@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4650@n) (void)) (G3029@environment '(psyntax scheme-report-environment-5))))) (set! G302f@expand (lambda (G4652@x G4653@env) (if (G2ff0@env? G4653@env) ((lambda (G4656@rib) ((lambda (G4658@x G4659@itc G465a@rtc G465b@vtc) ((lambda (G4660@x) (begin (G2d1e@seal-rib! G4656@rib) (values G4660@x (G465a@rtc)))) ((lambda (G466a@G4662 G466b@G4663 G466c@G4664 G466d@G4665 G466e@G4666 G466f@G4667 G4670@G4668 G4671@G4669) ((lambda (G467a@swap) (dynamic-wind G467a@swap (lambda () (G2f8a@chi-expr G4658@x '() '())) G467a@swap)) (lambda () (begin ((lambda (G467c@t) (begin (G466a@G4662 G466e@G4666) (set! G466e@G4666 G467c@t))) (G466a@G4662)) ((lambda (G467e@t) (begin (G466b@G4663 G466f@G4667) (set! G466f@G4667 G467e@t))) (G466b@G4663)) ((lambda (G4680@t) (begin (G466c@G4664 G4670@G4668) (set! G4670@G4668 G4680@t))) (G466c@G4664)) ((lambda (G4682@t) (begin (G466d@G4665 G4671@G4669) (set! G4671@G4669 G4682@t))) (G466d@G4665)))))) G3061@top-level-context G2fd3@inv-collector G2fd5@vis-collector G2fd7@imp-collector '#f G465a@rtc G465b@vtc G4659@itc))) (G2d31@make-stx G4652@x G2cdf@top-mark* (list G4656@rib) '()) (G2ff8@env-itc G4653@env) (G2fd1@make-collector) (G2fd1@make-collector))) (G2fcf@make-top-rib (G2ff4@env-names G4653@env) (G2ff6@env-labels G4653@env))) (if (G300d@interaction-env? G4653@env) ((lambda (G4684@rib G4685@r G4686@rtc) ((lambda (G468a@x) (call-with-values (lambda () ((lambda (G4696@G468e G4697@G468f G4698@G4690 G4699@G4691 G469a@G4692 G469b@G4693 G469c@G4694 G469d@G4695) ((lambda (G46a6@swap) (dynamic-wind G46a6@swap (lambda () (G2fdb@chi-interaction-expr G468a@x G4684@rib G4685@r)) G46a6@swap)) (lambda () (begin ((lambda (G46a8@t) (begin (G4696@G468e G469a@G4692) (set! G469a@G4692 G46a8@t))) (G4696@G468e)) ((lambda (G46aa@t) (begin (G4697@G468f G469b@G4693) (set! G469b@G4693 G46aa@t))) (G4697@G468f)) ((lambda (G46ac@t) (begin (G4698@G4690 G469c@G4694) (set! G469c@G4694 G46ac@t))) (G4698@G4690)) ((lambda (G46ae@t) (begin (G4699@G4691 G469d@G4695) (set! G469d@G4695 G46ae@t))) (G4699@G4691)))))) G3061@top-level-context G2fd3@inv-collector G2fd5@vis-collector G2fd7@imp-collector G4653@env G4686@rtc (G2fd1@make-collector) (G2fd1@make-collector))) (lambda (G46b0@G468c G46b1@G468d) ((lambda (G46b4@r^ G46b5@e) (begin (G3019@set-interaction-env-r! G4653@env G46b4@r^) (values G46b5@e (G4686@rtc)))) G46b1@G468d G46b0@G468c)))) (G2d31@make-stx G4652@x G2cdf@top-mark* (list G4684@rib) '()))) (G3011@interaction-env-rib G4653@env) (G3013@interaction-env-r G4653@env) (G2fd1@make-collector)) (assertion-violation 'expand '"not an environment" G4653@env))))) (set! G3031@eval (lambda (G46b8@x G46b9@env) (begin (if (not (G3025@environment? G46b9@env)) (error 'eval '"not an environment" G46b9@env) (void)) (call-with-values (lambda () (G302f@expand G46b8@x G46b9@env)) (lambda (G46be@G46bc G46bf@G46bd) ((lambda (G46c2@invoke-req* G46c3@x) (begin (for-each G2b7e@G2a25@invoke-library G46c2@invoke-req*) (eval-core (G2957@G290f@expanded->core G46c3@x)))) G46bf@G46bd G46be@G46bc)))))) (set! G3033@library-expander (lambda G472b ((lambda (G472c) (if (= G472c '3) (apply (lambda (G46c6@x G46c7@filename G46c8@verify-name) ((lambda (G46cd@build-visit-code G46cf@visit!) (begin (set! G46cd@build-visit-code (lambda (G4719@macro*) (if (null? G4719@macro*) (G2cc5@G2c37@build-void) (G2cc4@G2c35@build-sequence '#f (map (lambda (G471b@x) ((lambda (G471d@loc G471e@src) (list 'set! G471d@loc G471e@src)) (car G471b@x) (cddr G471b@x))) G4719@macro*))))) (set! G46cf@visit! (lambda (G4711@macro*) (for-each (lambda (G4713@x) ((lambda (G4715@loc G4716@proc) (set-symbol-value! G4715@loc G4716@proc)) (car G4713@x) (cadr G4713@x))) G4711@macro*))) (call-with-values (lambda () (G2fdf@core-library-expander G46c6@x G46c8@verify-name)) (lambda (G46d9@G46d0 G46da@G46d1 G46db@G46d2 G46dc@G46d3 G46dd@G46d4 G46de@G46d5 G46df@G46d6 G46e0@G46d7 G46e1@G46d8) ((lambda (G46eb@export-env G46ec@export-subst G46ed@macro* G46ee@invoke-code G46ef@vis* G46f0@inv* G46f1@imp* G46f2@ver G46f3@name) ((lambda (G46fd@id G46fe@name G46ff@ver G4700@imp* G4701@vis* G4702@inv* G4703@visit-proc G4704@invoke-proc G4705@visit-code G4706@invoke-code) (begin (G2b7c@G2a21@install-library G46fd@id G46fe@name G46ff@ver G4700@imp* G4701@vis* G4702@inv* G46ec@export-subst G46eb@export-env G4703@visit-proc G4704@invoke-proc G4705@visit-code G4706@invoke-code '#t G46c7@filename) (values G46fd@id G46fe@name G46ff@ver G4700@imp* G4701@vis* G4702@inv* G4706@invoke-code G4705@visit-code G46ec@export-subst G46eb@export-env))) (gensym) G46f3@name G46f2@ver (map G2b82@G2a2d@library-spec G46f1@imp*) (map G2b82@G2a2d@library-spec G46ef@vis*) (map G2b82@G2a2d@library-spec G46f0@inv*) (lambda () (G46cf@visit! G46ed@macro*)) (lambda () (eval-core (G2957@G290f@expanded->core G46ee@invoke-code))) (G46cd@build-visit-code G46ed@macro*) G46ee@invoke-code)) G46e1@G46d8 G46e0@G46d7 G46df@G46d6 G46de@G46d5 G46dd@G46d4 G46dc@G46d3 G46db@G46d2 G46da@G46d1 G46d9@G46d0))))) '#f '#f)) G472b) (if (= G472c '2) (apply (lambda (G4721@x G4722@filename) (G3033@library-expander G4721@x G4722@filename (lambda (G4725@x) (values)))) G472b) (if (= G472c '1) (apply (lambda (G4727@x) (G3033@library-expander G4727@x '#f (lambda (G4729@x) (values)))) G472b) (error 'apply '"invalid arg count"))))) (length G472b)))) (set! G3035@boot-library-expand (lambda (G472d@x) (call-with-values (lambda () (G3033@library-expander G472d@x)) (lambda (G4739@G472f G473a@G4730 G473b@G4731 G473c@G4732 G473d@G4733 G473e@G4734 G473f@G4735 G4740@G4736 G4741@G4737 G4742@G4738) ((lambda (G474d@export-env G474e@export-subst G474f@visit-code G4750@invoke-code G4751@inv* G4752@vis* G4753@imp* G4754@ver G4755@name G4756@id) (values G4755@name G4750@invoke-code G474e@export-subst G474d@export-env)) G4742@G4738 G4741@G4737 G4740@G4736 G473f@G4735 G473e@G4734 G473d@G4733 G473c@G4732 G473b@G4731 G473a@G4730 G4739@G472f))))) (set! G3037@rev-map-append (lambda (G4761@f G4762@ls G4763@ac) (if (null? G4762@ls) G4763@ac (G3037@rev-map-append G4761@f (cdr G4762@ls) (cons (G4761@f (car G4762@ls)) G4763@ac))))) (set! G3039@build-exports (lambda (G4767@lex*+loc* G4768@init*) (G2cc4@G2c35@build-sequence '#f (cons (G2cc5@G2c37@build-void) (G3037@rev-map-append (lambda (G476b@x) (list 'set! (cdr G476b@x) (car G476b@x))) G4767@lex*+loc* G4768@init*))))) (set! G303b@make-export-subst (lambda (G476d@name* G476e@id*) (map (lambda (G4771@name G4772@id) ((lambda (G4775@label) (begin (if (not G4775@label) (G3053@syntax-violation '#f '"cannot export unbound identifier" G4772@id) (void)) (cons G4771@name G4775@label))) (G2d81@id->label G4772@id))) G476d@name* G476e@id*))) (set! G303d@make-export-env/macros (lambda (G4777@lex* G4778@loc* G4779@r) ((lambda (G477e@lookup) (begin (set! G477e@lookup (lambda (G479b@x) ((letrec ((G479d@f (lambda (G479f@x G47a0@lex* G47a1@loc*) (if (pair? G47a0@lex*) (if (eq? G479f@x (car G47a0@lex*)) (car G47a1@loc*) (G479d@f G479f@x (cdr G47a0@lex*) (cdr G47a1@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G479d@f) G479b@x G4777@lex* G4778@loc*))) ((letrec ((G477f@f (lambda (G4781@r G4782@env G4783@global* G4784@macro*) (if (null? G4781@r) (values G4782@env G4783@global* G4784@macro*) ((lambda (G4789@x) ((lambda (G478b@label G478c@b) ((lambda (G478f@t) (if (memv G478f@t '(lexical)) ((lambda (G4791@v) ((lambda (G4793@loc G4794@type) (G477f@f (cdr G4781@r) (cons (cons* G478b@label G4794@type G4793@loc) G4782@env) (cons (cons (G2ef2@lexical-var G4791@v) G4793@loc) G4783@global*) G4784@macro*)) (G477e@lookup (G2ef2@lexical-var G4791@v)) (if (G2ef4@lexical-mutable? G4791@v) 'mutable 'global))) (G2d8b@binding-value G478c@b)) (if (memv G478f@t '(local-macro)) ((lambda (G4797@loc) (G477f@f (cdr G4781@r) (cons (cons* G478b@label 'global-macro G4797@loc) G4782@env) G4783@global* (cons (cons G4797@loc (G2d8b@binding-value G478c@b)) G4784@macro*))) (gensym)) (if (memv G478f@t '(local-macro!)) ((lambda (G4799@loc) (G477f@f (cdr G4781@r) (cons (cons* G478b@label 'global-macro! G4799@loc) G4782@env) G4783@global* (cons (cons G4799@loc (G2d8b@binding-value G478c@b)) G4784@macro*))) (gensym)) (if (memv G478f@t '($rtd $module)) (G477f@f (cdr G4781@r) (cons G4789@x G4782@env) G4783@global* G4784@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d89@binding-type G478c@b) (G2d8b@binding-value G478c@b))))))) (G2d89@binding-type G478c@b))) (car G4789@x) (cdr G4789@x))) (car G4781@r)))))) G477f@f) G4779@r '() '() '()))) '#f))) (set! G303f@generate-temporaries (lambda (G47a5@ls) ((lambda (G47a7@t) ((lambda (G47a9@ls/false) (if G47a9@ls/false (apply (lambda (G47ab@ls) (map (lambda (G47ad@x) (G2d31@make-stx ((lambda (G47af@x) (if (or (symbol? G47af@x) (string? G47af@x)) (gensym G47af@x) (gensym 't))) (G3059@syntax->datum G47ad@x)) G2cdf@top-mark* '() '())) G47ab@ls)) G47a9@ls/false) ((lambda (G47b1@t) ((lambda (G47b3@ls/false) (if G47b3@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47b3@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G47b1@t))) (G2f66@syntax-dispatch G47b1@t '_))) G47a7@t))) (G2f66@syntax-dispatch G47a7@t 'each-any))) G47a5@ls))) (set! G3041@free-identifier=? (lambda (G47b5@x G47b6@y) (if (G2d67@id? G47b5@x) (if (G2d67@id? G47b6@y) (G2d6f@free-id=? G47b5@x G47b6@y) (assertion-violation 'free-identifier=? '"not an identifier" G47b6@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47b5@x)))) (set! G3043@bound-identifier=? (lambda (G47b9@x G47ba@y) (if (G2d67@id? G47b9@x) (if (G2d67@id? G47ba@y) (G2d6d@bound-id=? G47b9@x G47ba@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47ba@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47b9@x)))) (set! G3045@make-source-condition (lambda (G47bd@x) ((lambda (G47c7@G47c2 G47c9@G47c4 G47cb@G47c3 G47ce@G47c1 G47d0@make-source-condition G47d2@G47bf G47d4@G47c0 G47d6@source-condition? G47d8@source-filename G47da@source-character) (begin (set! G47c7@G47c2 (make-record-type-descriptor '&source-information G4c37@G4988@&condition-rtd 'G47c5 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47c9@G47c4 '#f) (set! G47cb@G47c3 (make-record-constructor-descriptor G47c7@G47c2 G4c38@G498a@&condition-rcd G47c9@G47c4)) (set! G47ce@G47c1 (record-predicate G47c7@G47c2)) (set! G47d0@make-source-condition (record-constructor G47cb@G47c3)) (set! G47d2@G47bf (record-accessor G47c7@G47c2 '0)) (set! G47d4@G47c0 (record-accessor G47c7@G47c2 '1)) (set! G47d6@source-condition? (condition-predicate G47c7@G47c2)) (set! G47d8@source-filename (condition-accessor G47c7@G47c2 G47d2@G47bf)) (set! G47da@source-character (condition-accessor G47c7@G47c2 G47d4@G47c0)) (if (pair? G47bd@x) (G47d0@make-source-condition (car G47bd@x) (cdr G47bd@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3047@extract-position-condition (lambda (G47db@x) (G3045@make-source-condition (G3049@expression-position G47db@x)))) (set! G3049@expression-position (lambda (G47dd@x) (and (G2d2f@stx? G47dd@x) ((lambda (G47df@x) (and (G28f8@G2826@annotation? G47df@x) (G28f9@G2828@annotation-source G47df@x))) (G2d33@stx-expr G47dd@x))))) (set! G304b@assertion-error (lambda (G47e1@expr G47e2@pos) (raise (condition (G4c67@G4a4a@make-assertion-violation) (G4c79@G4a7a@make-who-condition 'assert) (G4c3d@G49dd@make-message-condition '"assertion failed") (G4c6f@G4a60@make-irritants-condition (list G47e1@expr)) (G3045@make-source-condition G47e2@pos))))) (set! G304d@syntax-error (lambda (G47e5@x . G47e7@args) (begin (if (not (for-all string? G47e7@args)) (assertion-violation 'syntax-error '"invalid argument" G47e7@args) (void)) (raise (condition (G4c3d@G49dd@make-message-condition (if (null? G47e7@args) '"invalid syntax" (apply string-append G47e7@args))) (G4c9b@G4ad4@make-syntax-violation (G3059@syntax->datum G47e5@x) '#f) (G3047@extract-position-condition G47e5@x) (G304f@extract-trace G47e5@x)))))) (set! G304f@extract-trace (lambda (G47e9@x) ((lambda (G47f2@G47ed G47f4@G47ef G47f6@G47ee G47f9@G47ec G47fb@make-trace G47fd@G47eb G47ff@trace? G4801@trace-form) (begin (set! G47f2@G47ed (make-record-type-descriptor '&trace G4c37@G4988@&condition-rtd 'G47f0 '#f '#f '#((immutable form)))) (set! G47f4@G47ef '#f) (set! G47f6@G47ee (make-record-constructor-descriptor G47f2@G47ed G4c38@G498a@&condition-rcd G47f4@G47ef)) (set! G47f9@G47ec (record-predicate G47f2@G47ed)) (set! G47fb@make-trace (record-constructor G47f6@G47ee)) (set! G47fd@G47eb (record-accessor G47f2@G47ed '0)) (set! G47ff@trace? (condition-predicate G47f2@G47ed)) (set! G4801@trace-form (condition-accessor G47f2@G47ed G47fd@G47eb)) ((letrec ((G4802@f (lambda (G4804@x) (if (G2d2f@stx? G4804@x) (apply condition (G47fb@make-trace G4804@x) (map G4802@f (G2d39@stx-ae* G4804@x))) (if (G28f8@G2826@annotation? G4804@x) (G47fb@make-trace (G2d31@make-stx G4804@x '() '() '())) (condition)))))) G4802@f) G47e9@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3051@syntax-violation* (lambda (G4806@who G4807@msg G4808@form G4809@condition-object) (begin (if (not (string? G4807@msg)) (assertion-violation 'syntax-violation '"message is not a string" G4807@msg) (void)) ((lambda (G480e@who) (raise (condition (if G480e@who (G4c79@G4a7a@make-who-condition G480e@who) (condition)) (G4c3d@G49dd@make-message-condition G4807@msg) G4809@condition-object (G3047@extract-position-condition G4808@form) (G304f@extract-trace G4808@form)))) (if (or (string? G4806@who) (symbol? G4806@who)) G4806@who (if (not G4806@who) ((lambda (G4810@t) ((lambda (G4812@ls/false) (if (and G4812@ls/false (apply (lambda (G4814@id) (G2d67@id? G4814@id)) G4812@ls/false)) (apply (lambda (G4816@id) (G3059@syntax->datum G4816@id)) G4812@ls/false) ((lambda (G4818@t) ((lambda (G481a@ls/false) (if (and G481a@ls/false (apply (lambda (G481c@id G481d@rest) (G2d67@id? G481c@id)) G481a@ls/false)) (apply (lambda (G4820@id G4821@rest) (G3059@syntax->datum G4820@id)) G481a@ls/false) ((lambda (G4824@t) ((lambda (G4826@ls/false) (if G4826@ls/false (apply (lambda () '#f) G4826@ls/false) (G3053@syntax-violation '#f '"invalid syntax" G4824@t))) (G2f66@syntax-dispatch G4824@t '_))) G4818@t))) (G2f66@syntax-dispatch G4818@t '(any . any)))) G4810@t))) (G2f66@syntax-dispatch G4810@t 'any))) G4808@form) (assertion-violation 'syntax-violation '"invalid who argument" G4806@who))))))) (set! G3053@syntax-violation (lambda G4836 ((lambda (G4837) (if (= G4837 '3) (apply (lambda (G4828@who G4829@msg G482a@form) (G3053@syntax-violation G4828@who G4829@msg G482a@form '#f)) G4836) (if (= G4837 '4) (apply (lambda (G482e@who G482f@msg G4830@form G4831@subform) (G3051@syntax-violation* G482e@who G482f@msg G4830@form (G4c9b@G4ad4@make-syntax-violation (G3059@syntax->datum G4830@form) (G3059@syntax->datum G4831@subform)))) G4836) (error 'apply '"invalid arg count")))) (length G4836)))) (set! G3055@identifier? (lambda (G4838@x) (G2d67@id? G4838@x))) (set! G3057@datum->syntax (lambda (G483a@id G483b@datum) (if (G2d67@id? G483a@id) (G2d45@datum->stx G483a@id G483b@datum) (assertion-violation 'datum->syntax '"not an identifier" G483a@id)))) (set! G3059@syntax->datum (lambda (G483e@x) (G2d7d@stx->datum G483e@x))) (set! G305b@compile-r6rs-top-level (lambda (G4840@x*) (call-with-values (lambda () (G2fe3@top-level-expander G4840@x*)) (lambda (G4844@G4842 G4845@G4843) ((lambda (G4848@invoke-code G4849@lib*) (lambda () (begin (for-each G2b7e@G2a25@invoke-library G4849@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2957@G290f@expanded->core G4848@invoke-code)) (void)) (eval-core (G2957@G290f@expanded->core G4848@invoke-code))))) G4845@G4843 G4844@G4842))))) (set! G305d@pre-compile-r6rs-top-level (lambda (G484c@x*) (call-with-values (lambda () (G2fe3@top-level-expander G484c@x*)) (lambda (G4850@G484e G4851@G484f) ((lambda (G4854@invoke-code G4855@lib*) (begin (for-each G2b7e@G2a25@invoke-library G4855@lib*) (G2901@G2838@compile-core (G2957@G290f@expanded->core G4854@invoke-code)))) G4851@G484f G4850@G484e))))) (set! G305f@interaction-environment ((lambda (G4858@the-env) (lambda () (or G4858@the-env ((lambda (G485a@lib G485b@rib) (begin ((lambda (G485e@subst) (begin (G2d08@set-rib-sym*! G485b@rib (map car G485e@subst)) (G2d0a@set-rib-mark**! G485b@rib (map (lambda (G4860@x) G2cdf@top-mark*) G485e@subst)) (G2d0c@set-rib-label*! G485b@rib (map cdr G485e@subst)))) (G2b53@G29cf@library-subst G485a@lib)) ((lambda (G4862@env) (begin (set! G4858@the-env G4862@env) G4862@env)) (G300f@make-interaction-env G485b@rib '() '())))) (G2b77@G2a17@find-library-by-name '(mosh interaction)) (G2d14@make-cache-rib))))) '#f)) (set! G3061@top-level-context (G2903@G283c@make-parameter '#f)) (begin (set! G4973@G3061@top-level-context G3061@top-level-context) (set! G4972@G305f@interaction-environment G305f@interaction-environment) (set! G4971@G305d@pre-compile-r6rs-top-level G305d@pre-compile-r6rs-top-level) (set! G4970@G305b@compile-r6rs-top-level G305b@compile-r6rs-top-level) (set! G496f@G3059@syntax->datum G3059@syntax->datum) (set! G496e@G3057@datum->syntax G3057@datum->syntax) (set! G496d@G3055@identifier? G3055@identifier?) (set! G496c@G3053@syntax-violation G3053@syntax-violation) (set! G496b@G3051@syntax-violation* G3051@syntax-violation*) (set! G496a@G304f@extract-trace G304f@extract-trace) (set! G4969@G304d@syntax-error G304d@syntax-error) (set! G4968@G304b@assertion-error G304b@assertion-error) (set! G4967@G3049@expression-position G3049@expression-position) (set! G4966@G3047@extract-position-condition G3047@extract-position-condition) (set! G4965@G3045@make-source-condition G3045@make-source-condition) (set! G4964@G3043@bound-identifier=? G3043@bound-identifier=?) (set! G4963@G3041@free-identifier=? G3041@free-identifier=?) (set! G4962@G303f@generate-temporaries G303f@generate-temporaries) (set! G4961@G303d@make-export-env/macros G303d@make-export-env/macros) (set! G4960@G303b@make-export-subst G303b@make-export-subst) (set! G495f@G3039@build-exports G3039@build-exports) (set! G495e@G3037@rev-map-append G3037@rev-map-append) (set! G495d@G3035@boot-library-expand G3035@boot-library-expand) (set! G495c@G3033@library-expander G3033@library-expander) (set! G495b@G3031@eval G3031@eval) (set! G495a@G302f@expand G302f@expand) (set! G4959@G302d@scheme-report-environment G302d@scheme-report-environment) (set! G4958@G302b@null-environment G302b@null-environment) (set! G4957@G3029@environment G3029@environment) (set! G4956@G3027@environment-symbols G3027@environment-symbols) (set! G4955@G3025@environment? G3025@environment?) (set! G4954@G3023@parse-binding G3023@parse-binding) (set! G4953@G3021@environment-bindings G3021@environment-bindings) (set! G4952@G301f@interaction-environment-symbols G301f@interaction-environment-symbols) (set! G4951@G301d@rp G301d@rp) (set! G4950@G301b@set-interaction-env-locs! G301b@set-interaction-env-locs!) (set! G494f@G3019@set-interaction-env-r! G3019@set-interaction-env-r!) (set! G494e@G3017@set-interaction-env-rib! G3017@set-interaction-env-rib!) (set! G494d@G3015@interaction-env-locs G3015@interaction-env-locs) (set! G494c@G3013@interaction-env-r G3013@interaction-env-r) (set! G494b@G3011@interaction-env-rib G3011@interaction-env-rib) (set! G494a@G300f@make-interaction-env G300f@make-interaction-env) (set! G4949@G300d@interaction-env? G300d@interaction-env?) (set! G4948@G300a@G3002 G300a@G3002) (set! G4947@G3008@G3003 G3008@G3003) (set! G4946@G3006@G3001 G3006@G3001) (set! G4945@G3000@rp G3000@rp) (set! G4944@G2ffe@set-env-itc! G2ffe@set-env-itc!) (set! G4943@G2ffc@set-env-labels! G2ffc@set-env-labels!) (set! G4942@G2ffa@set-env-names! G2ffa@set-env-names!) (set! G4941@G2ff8@env-itc G2ff8@env-itc) (set! G4940@G2ff6@env-labels G2ff6@env-labels) (set! G493f@G2ff4@env-names G2ff4@env-names) (set! G493e@G2ff2@make-env G2ff2@make-env) (set! G493d@G2ff0@env? G2ff0@env?) (set! G493c@G2fed@G2fe5 G2fed@G2fe5) (set! G493b@G2feb@G2fe6 G2feb@G2fe6) (set! G493a@G2fe9@G2fe4 G2fe9@G2fe4) (set! G4939@G2fe3@top-level-expander G2fe3@top-level-expander) (set! G4938@G2fe1@parse-top-level-program G2fe1@parse-top-level-program) (set! G4937@G2fdf@core-library-expander G2fdf@core-library-expander) (set! G4936@G2fdd@library-body-expander G2fdd@library-body-expander) (set! G4935@G2fdb@chi-interaction-expr G2fdb@chi-interaction-expr) (set! G4934@G2fd9@chi-library-internal G2fd9@chi-library-internal) (set! G4933@G2fd7@imp-collector G2fd7@imp-collector) (set! G4932@G2fd5@vis-collector G2fd5@vis-collector) (set! G4931@G2fd3@inv-collector G2fd3@inv-collector) (set! G4930@G2fd1@make-collector G2fd1@make-collector) (set! G492f@G2fcf@make-top-rib G2fcf@make-top-rib) (set! G492e@G2fcd@parse-import-spec* G2fcd@parse-import-spec*) (set! G492d@G2fcb@parse-library G2fcb@parse-library) (set! G492c@G2fc9@parse-library-name G2fc9@parse-library-name) (set! G492b@G2fc7@parse-exports G2fc7@parse-exports) (set! G492a@G2fc5@expand-transformer G2fc5@expand-transformer) (set! G4929@G2fc3@chi-body* G2fc3@chi-body*) (set! G4928@G2fc1@chi-internal-module G2fc1@chi-internal-module) (set! G4927@G2fbf@module-interface-exp-id* G2fbf@module-interface-exp-id*) (set! G4926@G2fbd@set-module-interface-exp-lab-vec! G2fbd@set-module-interface-exp-lab-vec!) (set! G4925@G2fbb@set-module-interface-exp-id-vec! G2fbb@set-module-interface-exp-id-vec!) (set! G4924@G2fb9@set-module-interface-first-mark! G2fb9@set-module-interface-first-mark!) (set! G4923@G2fb7@module-interface-exp-lab-vec G2fb7@module-interface-exp-lab-vec) (set! G4922@G2fb5@module-interface-exp-id-vec G2fb5@module-interface-exp-id-vec) (set! G4921@G2fb3@module-interface-first-mark G2fb3@module-interface-first-mark) (set! G4920@G2fb1@make-module-interface G2fb1@make-module-interface) (set! G491f@G2faf@module-interface? G2faf@module-interface?) (set! G491e@G2fac@G2fa4 G2fac@G2fa4) (set! G491d@G2faa@G2fa5 G2faa@G2fa5) (set! G491c@G2fa8@G2fa3 G2fa8@G2fa3) (set! G491b@G2fa2@parse-module G2fa2@parse-module) (set! G491a@G2fa0@chi-internal G2fa0@chi-internal) (set! G4919@G2f9e@find-dups G2f9e@find-dups) (set! G4918@G2f9c@find-bound=? G2f9c@find-bound=?) (set! G4917@G2f9a@chi-rhs* G2f9a@chi-rhs*) (set! G4916@G2f98@expand-interaction-rhs*/init* G2f98@expand-interaction-rhs*/init*) (set! G4915@G2f96@chi-rhs G2f96@chi-rhs) (set! G4914@G2f94@chi-defun G2f94@chi-defun) (set! G4913@G2f92@chi-lambda-clause* G2f92@chi-lambda-clause*) (set! G4912@G2f90@chi-lambda-clause G2f90@chi-lambda-clause) (set! G4911@G2f8e@verify-formals G2f8e@verify-formals) (set! G4910@G2f8c@chi-set! G2f8c@chi-set!) (set! G490f@G2f8a@chi-expr G2f8a@chi-expr) (set! G490e@G2f88@chi-application G2f88@chi-application) (set! G490d@G2f86@chi-expr* G2f86@chi-expr*) (set! G490c@G2f84@chi-global-macro G2f84@chi-global-macro) (set! G490b@G2f82@chi-local-macro G2f82@chi-local-macro) (set! G490a@G2f80@chi-macro G2f80@chi-macro) (set! G4909@G2f7e@do-macro-call G2f7e@do-macro-call) (set! G4908@G2f7c@local-macro-transformer G2f7c@local-macro-transformer) (set! G4907@G2f7a@macro-transformer G2f7a@macro-transformer) (set! G4906@G2f78@symbol-macro G2f78@symbol-macro) (set! G4905@G2f76@file-options-macro G2f76@file-options-macro) (set! G4904@G2f74@core-macro-transformer G2f74@core-macro-transformer) (set! G4903@G2f72@syntax-transformer G2f72@syntax-transformer) (set! G4902@G2f70@ellipsis-map G2f70@ellipsis-map) (set! G4901@G2f6e@syntax-case-transformer G2f6e@syntax-case-transformer) (set! G4900@G2f6c@verify-literals G2f6c@verify-literals) (set! G48ff@G2f6a@underscore? G2f6a@underscore?) (set! G48fe@G2f68@ellipsis? G2f68@ellipsis?) (set! G48fd@G2f66@syntax-dispatch G2f66@syntax-dispatch) (set! G48fc@G2f64@convert-pattern G2f64@convert-pattern) (set! G48fb@G2f62@foreign-call-transformer G2f62@foreign-call-transformer) (set! G48fa@G2f60@parameterize-macro G2f60@parameterize-macro) (set! G48f9@G2f5e@incorrect-usage-macro G2f5e@incorrect-usage-macro) (set! G48f8@G2f5c@define-condition-type-macro G2f5c@define-condition-type-macro) (set! G48f7@G2f5a@define-record-type-macro G2f5a@define-record-type-macro) (set! G48f6@G2f58@define-struct-macro G2f58@define-struct-macro) (set! G48f5@G2f56@quasisyntax-macro G2f56@quasisyntax-macro) (set! G48f4@G2f54@quasiquote-macro G2f54@quasiquote-macro) (set! G48f3@G2f52@syntax-rules-macro G2f52@syntax-rules-macro) (set! G48f2@G2f50@include-into-macro G2f50@include-into-macro) (set! G48f1@G2f4e@include-macro G2f4e@include-macro) (set! G48f0@G2f4c@do-include G2f4c@do-include) (set! G48ef@G2f4a@cond-macro G2f4a@cond-macro) (set! G48ee@G2f48@and-macro G2f48@and-macro) (set! G48ed@G2f46@or-macro G2f46@or-macro) (set! G48ec@G2f44@let*-macro G2f44@let*-macro) (set! G48eb@G2f42@do-macro G2f42@do-macro) (set! G48ea@G2f40@identifier-syntax-macro G2f40@identifier-syntax-macro) (set! G48e9@G2f3e@endianness-macro G2f3e@endianness-macro) (set! G48e8@G2f3c@assert-macro G2f3c@assert-macro) (set! G48e7@G2f3a@delay-macro G2f3a@delay-macro) (set! G48e6@G2f38@time-macro G2f38@time-macro) (set! G48e5@G2f36@define-enumeration-macro G2f36@define-enumeration-macro) (set! G48e4@G2f34@guard-macro G2f34@guard-macro) (set! G48e3@G2f32@trace-letrec-syntax-macro G2f32@trace-letrec-syntax-macro) (set! G48e2@G2f30@trace-let-syntax-macro G2f30@trace-let-syntax-macro) (set! G48e1@G2f2e@trace-let/rec-syntax G2f2e@trace-let/rec-syntax) (set! G48e0@G2f2c@trace-define-syntax-macro G2f2c@trace-define-syntax-macro) (set! G48df@G2f2a@trace-define-macro G2f2a@trace-define-macro) (set! G48de@G2f28@trace-lambda-macro G2f28@trace-lambda-macro) (set! G48dd@G2f26@let*-values-macro G2f26@let*-values-macro) (set! G48dc@G2f24@let-values-macro G2f24@let-values-macro) (set! G48db@G2f22@let-macro G2f22@let-macro) (set! G48da@G2f20@invalid-fmls-error G2f20@invalid-fmls-error) (set! G48d9@G2f1e@with-syntax-macro G2f1e@with-syntax-macro) (set! G48d8@G2f1c@bless G2f1c@bless) (set! G48d7@G2f1a@lambda-transformer G2f1a@lambda-transformer) (set! G48d6@G2f18@case-lambda-transformer G2f18@case-lambda-transformer) (set! G48d5@G2f16@quote-transformer G2f16@quote-transformer) (set! G48d4@G2f14@case-macro G2f14@case-macro) (set! G48d3@G2f12@or-transformer G2f12@or-transformer) (set! G48d2@G2f10@and-transformer G2f10@and-transformer) (set! G48d1@G2f0e@if-transformer G2f0e@if-transformer) (set! G48d0@G2f0c@unless-macro G2f0c@unless-macro) (set! G48cf@G2f0a@when-macro G2f0a@when-macro) (set! G48ce@G2f08@record-constructor-descriptor-transformer G2f08@record-constructor-descriptor-transformer) (set! G48cd@G2f06@record-type-descriptor-transformer G2f06@record-type-descriptor-transformer) (set! G48cc@G2f04@type-descriptor-transformer G2f04@type-descriptor-transformer) (set! G48cb@G2f02@fluid-let-syntax-transformer G2f02@fluid-let-syntax-transformer) (set! G48ca@G2f00@letrec*-transformer G2f00@letrec*-transformer) (set! G48c9@G2efe@letrec-transformer G2efe@letrec-transformer) (set! G48c8@G2efc@letrec-helper G2efc@letrec-helper) (set! G48c7@G2efa@add-lexicals G2efa@add-lexicals) (set! G48c6@G2ef8@add-lexical G2ef8@add-lexical) (set! G48c5@G2ef6@set-lexical-mutable! G2ef6@set-lexical-mutable!) (set! G48c4@G2ef4@lexical-mutable? G2ef4@lexical-mutable?) (set! G48c3@G2ef2@lexical-var G2ef2@lexical-var) (set! G48c2@G2ef0@scheme-stx G2ef0@scheme-stx) (set! G48c1@G2eee@scheme-stx-hashtable G2eee@scheme-stx-hashtable) (set! G48c0@G2eec@parse-define-syntax G2eec@parse-define-syntax) (set! G48bf@G2eea@parse-define G2eea@parse-define) (set! G48be@G2da7@make-eval-transformer G2da7@make-eval-transformer) (set! G48bd@G2da5@variable-transformer-procedure G2da5@variable-transformer-procedure) (set! G48bc@G2da3@variable-transformer? G2da3@variable-transformer?) (set! G48bb@G2da1@make-variable-transformer G2da1@make-variable-transformer) (set! G48ba@G2d9f@sanitize-binding G2d9f@sanitize-binding) (set! G48b9@G2d8f@syntax-type G2d8f@syntax-type) (set! G48b8@G2d8d@raise-unbound-error G2d8d@raise-unbound-error) (set! G48b7@G2d8b@binding-value G2d8b@binding-value) (set! G48b6@G2d89@binding-type G2d89@binding-type) (set! G48b5@G2d87@make-binding G2d87@make-binding) (set! G48b4@G2d85@label->binding G2d85@label->binding) (set! G48b3@G2d83@id->real-label G2d83@id->real-label) (set! G48b2@G2d81@id->label G2d81@id->label) (set! G48b1@G2d7f@same-marks*? G2d7f@same-marks*?) (set! G48b0@G2d7d@stx->datum G2d7d@stx->datum) (set! G48af@G2d7b@strip G2d7b@strip) (set! G48ae@G2d79@strip-annotations G2d79@strip-annotations) (set! G48ad@G2d77@self-evaluating? G2d77@self-evaluating?) (set! G48ac@G2d75@bound-id-member? G2d75@bound-id-member?) (set! G48ab@G2d73@distinct-bound-ids? G2d73@distinct-bound-ids?) (set! G48aa@G2d71@valid-bound-ids? G2d71@valid-bound-ids?) (set! G48a9@G2d6f@free-id=? G2d6f@free-id=?) (set! G48a8@G2d6d@bound-id=? G2d6d@bound-id=?) (set! G48a7@G2d6b@same-marks? G2d6b@same-marks?) (set! G48a6@G2d69@id->sym G2d69@id->sym) (set! G48a5@G2d67@id? G2d67@id?) (set! G48a4@G2d65@syntax->list G2d65@syntax->list) (set! G48a3@G2d63@syntax-cdr G2d63@syntax-cdr) (set! G48a2@G2d61@syntax-car G2d61@syntax-car) (set! G48a1@G2d5f@syntax-list? G2d5f@syntax-list?) (set! G48a0@G2d5d@syntax-null? G2d5d@syntax-null?) (set! G489f@G2d5b@syntax-vector? G2d5b@syntax-vector?) (set! G489e@G2d59@syntax-pair? G2d59@syntax-pair?) (set! G489d@G2d57@syntax-vector->list G2d57@syntax-vector->list) (set! G489c@G2d55@syntax-kind? G2d55@syntax-kind?) (set! G489b@G2d53@add-subst G2d53@add-subst) (set! G489a@G2d51@add-mark G2d51@add-mark) (set! G4899@G2d4f@mkstx G2d4f@mkstx) (set! G4898@G2d4d@join-wraps G2d4d@join-wraps) (set! G4897@G2d4b@anti-mark? G2d4b@anti-mark?) (set! G4896@G2d49@anti-mark G2d49@anti-mark) (set! G4895@G2d47@gen-mark G2d47@gen-mark) (set! G4894@G2d45@datum->stx G2d45@datum->stx) (set! G4893@G2d43@rp G2d43@rp) (set! G4892@G2d41@set-stx-ae*! G2d41@set-stx-ae*!) (set! G4891@G2d3f@set-stx-subst*! G2d3f@set-stx-subst*!) (set! G4890@G2d3d@set-stx-mark*! G2d3d@set-stx-mark*!) (set! G488f@G2d3b@set-stx-expr! G2d3b@set-stx-expr!) (set! G488e@G2d39@stx-ae* G2d39@stx-ae*) (set! G488d@G2d37@stx-subst* G2d37@stx-subst*) (set! G488c@G2d35@stx-mark* G2d35@stx-mark*) (set! G488b@G2d33@stx-expr G2d33@stx-expr) (set! G488a@G2d31@make-stx G2d31@make-stx) (set! G4889@G2d2f@stx? G2d2f@stx?) (set! G4888@G2d2c@G2d24 G2d2c@G2d24) (set! G4887@G2d2a@G2d25 G2d2a@G2d25) (set! G4886@G2d28@G2d23 G2d28@G2d23) (set! G4885@G2d22@make-full-rib G2d22@make-full-rib) (set! G4884@G2d20@unseal-rib! G2d20@unseal-rib!) (set! G4883@G2d1e@seal-rib! G2d1e@seal-rib!) (set! G4882@G2d1c@make-rib-map G2d1c@make-rib-map) (set! G4881@G2d1a@extend-rib/nc! G2d1a@extend-rib/nc!) (set! G4880@G2d18@extend-rib! G2d18@extend-rib!) (set! G487f@G2d16@find-label G2d16@find-label) (set! G487e@G2d14@make-cache-rib G2d14@make-cache-rib) (set! G487d@G2d12@make-empty-rib G2d12@make-empty-rib) (set! G487c@G2d10@set-rib-cache! G2d10@set-rib-cache!) (set! G487b@G2d0e@set-rib-sealed/freq! G2d0e@set-rib-sealed/freq!) (set! G487a@G2d0c@set-rib-label*! G2d0c@set-rib-label*!) (set! G4879@G2d0a@set-rib-mark**! G2d0a@set-rib-mark**!) (set! G4878@G2d08@set-rib-sym*! G2d08@set-rib-sym*!) (set! G4877@G2d06@rib-cache G2d06@rib-cache) (set! G4876@G2d04@rib-sealed/freq G2d04@rib-sealed/freq) (set! G4875@G2d02@rib-label* G2d02@rib-label*) (set! G4874@G2d00@rib-mark** G2d00@rib-mark**) (set! G4873@G2cfe@rib-sym* G2cfe@rib-sym*) (set! G4872@G2cfc@make-rib G2cfc@make-rib) (set! G4871@G2cfa@rib? G2cfa@rib?) (set! G4870@G2cf7@G2cef G2cf7@G2cef) (set! G486f@G2cf5@G2cf0 G2cf5@G2cf0) (set! G486e@G2cf3@G2cee G2cf3@G2cee) (set! G486d@G2ced@gen-define-label G2ced@gen-define-label) (set! G486c@G2ceb@gen-define-label+loc G2ceb@gen-define-label+loc) (set! G486b@G2ce9@gen-top-level-label G2ce9@gen-top-level-label) (set! G486a@G2ce7@gen-label G2ce7@gen-label) (set! G4869@G2ce5@gen-global G2ce5@gen-global) (set! G4868@G2ce3@gen-lexical G2ce3@gen-lexical) (set! G4867@G2ce1@top-marked? G2ce1@top-marked?) (set! G4866@G2cdf@top-mark* G2cdf@top-mark*) (set! G4865@G2cda@set-union G2cda@set-union) (set! G4864@G2cd8@set-cons G2cd8@set-cons) (G2b74@G2a11@current-library-expander G3033@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G497d@G4978 G497f@G497a G4981@G4979 G4984@&condition? G4986@make-&condition G4988@&condition-rtd G498a@&condition-rcd G49d4@G49cf G49d6@G49d1 G49d8@G49d0 G49db@p? G49dd@make-message-condition G49df@G49ce G49e1@message-condition? G49e3@condition-message G49e5@&message-rtd G49e7@&message-rcd G49ed@G49e8 G49ef@G49ea G49f1@G49e9 G49f4@p? G49f6@make-warning G49f8@warning? G49fa@&warning-rtd G49fc@&warning-rcd G4a02@G49fd G4a04@G49ff G4a06@G49fe G4a09@p? G4a0b@make-serious-condition G4a0d@serious-condition? G4a0f@&serious-rtd G4a11@&serious-rcd G4a17@G4a12 G4a19@G4a14 G4a1b@G4a13 G4a1e@p? G4a20@make-error G4a22@error? G4a24@&error-rtd G4a26@&error-rcd G4a2c@G4a27 G4a2e@G4a29 G4a30@G4a28 G4a33@p? G4a35@make-violation G4a37@violation? G4a39@&violation-rtd G4a3b@&violation-rcd G4a41@G4a3c G4a43@G4a3e G4a45@G4a3d G4a48@p? G4a4a@make-assertion-violation G4a4c@assertion-violation? G4a4e@&assertion-rtd G4a50@&assertion-rcd G4a57@G4a52 G4a59@G4a54 G4a5b@G4a53 G4a5e@p? G4a60@make-irritants-condition G4a62@G4a51 G4a64@irritants-condition? G4a66@condition-irritants G4a68@&irritants-rtd G4a6a@&irritants-rcd G4a71@G4a6c G4a73@G4a6e G4a75@G4a6d G4a78@p? G4a7a@make-who-condition G4a7c@G4a6b G4a7e@who-condition? G4a80@condition-who G4a82@&who-rtd G4a84@&who-rcd G4a8a@G4a85 G4a8c@G4a87 G4a8e@G4a86 G4a91@p? G4a93@make-non-continuable-violation G4a95@non-continuable-violation? G4a97@&non-continuable-rtd G4a99@&non-continuable-rcd G4a9f@G4a9a G4aa1@G4a9c G4aa3@G4a9b G4aa6@p? G4aa8@make-implementation-restriction-violation G4aaa@implementation-restriction-violation? G4aac@&implementation-restriction-rtd G4aae@&implementation-restriction-rcd G4ab4@G4aaf G4ab6@G4ab1 G4ab8@G4ab0 G4abb@p? G4abd@make-lexical-violation G4abf@lexical-violation? G4ac1@&lexical-rtd G4ac3@&lexical-rcd G4acb@G4ac6 G4acd@G4ac8 G4acf@G4ac7 G4ad2@p? G4ad4@make-syntax-violation G4ad6@G4ac4 G4ad8@G4ac5 G4ada@syntax-violation? G4adc@syntax-violation-form G4ade@syntax-violation-subform G4ae0@&syntax-rtd G4ae2@&syntax-rcd G4ae8@G4ae3 G4aea@G4ae5 G4aec@G4ae4 G4aef@p? G4af1@make-undefined-violation G4af3@undefined-violation? G4af5@&undefined-rtd G4af7@&undefined-rcd G4afd@G4af8 G4aff@G4afa G4b01@G4af9 G4b04@p? G4b06@make-i/o-error G4b08@i/o-error? G4b0a@&i/o-rtd G4b0c@&i/o-rcd G4b12@G4b0d G4b14@G4b0f G4b16@G4b0e G4b19@p? G4b1b@make-i/o-read-error G4b1d@i/o-read-error? G4b1f@&i/o-read-rtd G4b21@&i/o-read-rcd G4b27@G4b22 G4b29@G4b24 G4b2b@G4b23 G4b2e@p? G4b30@make-i/o-write-error G4b32@i/o-write-error? G4b34@&i/o-write-rtd G4b36@&i/o-write-rcd G4b3d@G4b38 G4b3f@G4b3a G4b41@G4b39 G4b44@p? G4b46@make-i/o-invalid-position-error G4b48@G4b37 G4b4a@i/o-invalid-position-error? G4b4c@i/o-error-position G4b4e@&i/o-invalid-position-rtd G4b50@&i/o-invalid-position-rcd G4b57@G4b52 G4b59@G4b54 G4b5b@G4b53 G4b5e@p? G4b60@make-i/o-filename-error G4b62@G4b51 G4b64@i/o-filename-error? G4b66@i/o-error-filename G4b68@&i/o-filename-rtd G4b6a@&i/o-filename-rcd G4b70@G4b6b G4b72@G4b6d G4b74@G4b6c G4b77@p? G4b79@make-i/o-file-protection-error G4b7b@i/o-file-protection-error? G4b7d@&i/o-file-protection-rtd G4b7f@&i/o-file-protection-rcd G4b85@G4b80 G4b87@G4b82 G4b89@G4b81 G4b8c@p? G4b8e@make-i/o-file-is-read-only-error G4b90@i/o-file-is-read-only-error? G4b92@&i/o-file-is-read-only-rtd G4b94@&i/o-file-is-read-only-rcd G4b9a@G4b95 G4b9c@G4b97 G4b9e@G4b96 G4ba1@p? G4ba3@make-i/o-file-already-exists-error G4ba5@i/o-file-already-exists-error? G4ba7@&i/o-file-already-exists-rtd G4ba9@&i/o-file-already-exists-rcd G4baf@G4baa G4bb1@G4bac G4bb3@G4bab G4bb6@p? G4bb8@make-i/o-file-does-not-exist-error G4bba@i/o-file-does-not-exist-error? G4bbc@&i/o-file-does-not-exist-rtd G4bbe@&i/o-file-does-not-exist-rcd G4bc5@G4bc0 G4bc7@G4bc2 G4bc9@G4bc1 G4bcc@p? G4bce@make-i/o-port-error G4bd0@G4bbf G4bd2@i/o-port-error? G4bd4@i/o-error-port G4bd6@&i/o-port-rtd G4bd8@&i/o-port-rcd G4bde@G4bd9 G4be0@G4bdb G4be2@G4bda G4be5@p? G4be7@make-i/o-decoding-error G4be9@i/o-decoding-error? G4beb@&i/o-decoding-rtd G4bed@&i/o-decoding-rcd G4bf4@G4bef G4bf6@G4bf1 G4bf8@G4bf0 G4bfb@p? G4bfd@make-i/o-encoding-error G4bff@G4bee G4c01@i/o-encoding-error? G4c03@i/o-encoding-error-char G4c05@&i/o-encoding-rtd G4c07@&i/o-encoding-rcd G4c0d@G4c08 G4c0f@G4c0a G4c11@G4c09 G4c14@p? G4c16@make-no-infinities-violation G4c18@no-infinities-violation? G4c1a@&no-infinities-rtd G4c1c@&no-infinities-rcd G4c22@G4c1d G4c24@G4c1f G4c26@G4c1e G4c29@p? G4c2b@make-no-nans-violation G4c2d@no-nans-violation? G4c2f@&no-nans-rtd G4c31@&no-nans-rcd) (begin (set! G497d@G4978 (make-record-type-descriptor '&condition '#f 'G497b '#f '#f '#())) (set! G497f@G497a '#f) (set! G4981@G4979 (make-record-constructor-descriptor G497d@G4978 '#f G497f@G497a)) (set! G4984@&condition? (record-predicate G497d@G4978)) (set! G4986@make-&condition (record-constructor G4981@G4979)) (set! G4988@&condition-rtd G497d@G4978) (set! G498a@&condition-rcd G4981@G4979) (set! G49d4@G49cf (make-record-type-descriptor '&message G497d@G4978 'G49d2 '#f '#f '#((immutable message)))) (set! G49d6@G49d1 '#f) (set! G49d8@G49d0 (make-record-constructor-descriptor G49d4@G49cf G4981@G4979 G49d6@G49d1)) (set! G49db@p? (record-predicate G49d4@G49cf)) (set! G49dd@make-message-condition (record-constructor G49d8@G49d0)) (set! G49df@G49ce (record-accessor G49d4@G49cf '0)) (set! G49e1@message-condition? (condition-predicate G49d4@G49cf)) (set! G49e3@condition-message (condition-accessor G49d4@G49cf G49df@G49ce)) (set! G49e5@&message-rtd G49d4@G49cf) (set! G49e7@&message-rcd G49d8@G49d0) (set! G49ed@G49e8 (make-record-type-descriptor '&warning G497d@G4978 'G49eb '#f '#f '#())) (set! G49ef@G49ea '#f) (set! G49f1@G49e9 (make-record-constructor-descriptor G49ed@G49e8 G4981@G4979 G49ef@G49ea)) (set! G49f4@p? (record-predicate G49ed@G49e8)) (set! G49f6@make-warning (record-constructor G49f1@G49e9)) (set! G49f8@warning? (condition-predicate G49ed@G49e8)) (set! G49fa@&warning-rtd G49ed@G49e8) (set! G49fc@&warning-rcd G49f1@G49e9) (set! G4a02@G49fd (make-record-type-descriptor '&serious G497d@G4978 'G4a00 '#f '#f '#())) (set! G4a04@G49ff '#f) (set! G4a06@G49fe (make-record-constructor-descriptor G4a02@G49fd G4981@G4979 G4a04@G49ff)) (set! G4a09@p? (record-predicate G4a02@G49fd)) (set! G4a0b@make-serious-condition (record-constructor G4a06@G49fe)) (set! G4a0d@serious-condition? (condition-predicate G4a02@G49fd)) (set! G4a0f@&serious-rtd G4a02@G49fd) (set! G4a11@&serious-rcd G4a06@G49fe) (set! G4a17@G4a12 (make-record-type-descriptor '&error G4a02@G49fd 'G4a15 '#f '#f '#())) (set! G4a19@G4a14 '#f) (set! G4a1b@G4a13 (make-record-constructor-descriptor G4a17@G4a12 G4a06@G49fe G4a19@G4a14)) (set! G4a1e@p? (record-predicate G4a17@G4a12)) (set! G4a20@make-error (record-constructor G4a1b@G4a13)) (set! G4a22@error? (condition-predicate G4a17@G4a12)) (set! G4a24@&error-rtd G4a17@G4a12) (set! G4a26@&error-rcd G4a1b@G4a13) (set! G4a2c@G4a27 (make-record-type-descriptor '&violation G4a02@G49fd 'G4a2a '#f '#f '#())) (set! G4a2e@G4a29 '#f) (set! G4a30@G4a28 (make-record-constructor-descriptor G4a2c@G4a27 G4a06@G49fe G4a2e@G4a29)) (set! G4a33@p? (record-predicate G4a2c@G4a27)) (set! G4a35@make-violation (record-constructor G4a30@G4a28)) (set! G4a37@violation? (condition-predicate G4a2c@G4a27)) (set! G4a39@&violation-rtd G4a2c@G4a27) (set! G4a3b@&violation-rcd G4a30@G4a28) (set! G4a41@G4a3c (make-record-type-descriptor '&assertion G4a2c@G4a27 'G4a3f '#f '#f '#())) (set! G4a43@G4a3e '#f) (set! G4a45@G4a3d (make-record-constructor-descriptor G4a41@G4a3c G4a30@G4a28 G4a43@G4a3e)) (set! G4a48@p? (record-predicate G4a41@G4a3c)) (set! G4a4a@make-assertion-violation (record-constructor G4a45@G4a3d)) (set! G4a4c@assertion-violation? (condition-predicate G4a41@G4a3c)) (set! G4a4e@&assertion-rtd G4a41@G4a3c) (set! G4a50@&assertion-rcd G4a45@G4a3d) (set! G4a57@G4a52 (make-record-type-descriptor '&irritants G497d@G4978 'G4a55 '#f '#f '#((immutable irritants)))) (set! G4a59@G4a54 '#f) (set! G4a5b@G4a53 (make-record-constructor-descriptor G4a57@G4a52 G4981@G4979 G4a59@G4a54)) (set! G4a5e@p? (record-predicate G4a57@G4a52)) (set! G4a60@make-irritants-condition (record-constructor G4a5b@G4a53)) (set! G4a62@G4a51 (record-accessor G4a57@G4a52 '0)) (set! G4a64@irritants-condition? (condition-predicate G4a57@G4a52)) (set! G4a66@condition-irritants (condition-accessor G4a57@G4a52 G4a62@G4a51)) (set! G4a68@&irritants-rtd G4a57@G4a52) (set! G4a6a@&irritants-rcd G4a5b@G4a53) (set! G4a71@G4a6c (make-record-type-descriptor '&who G497d@G4978 'G4a6f '#f '#f '#((immutable who)))) (set! G4a73@G4a6e '#f) (set! G4a75@G4a6d (make-record-constructor-descriptor G4a71@G4a6c G4981@G4979 G4a73@G4a6e)) (set! G4a78@p? (record-predicate G4a71@G4a6c)) (set! G4a7a@make-who-condition (record-constructor G4a75@G4a6d)) (set! G4a7c@G4a6b (record-accessor G4a71@G4a6c '0)) (set! G4a7e@who-condition? (condition-predicate G4a71@G4a6c)) (set! G4a80@condition-who (condition-accessor G4a71@G4a6c G4a7c@G4a6b)) (set! G4a82@&who-rtd G4a71@G4a6c) (set! G4a84@&who-rcd G4a75@G4a6d) (set! G4a8a@G4a85 (make-record-type-descriptor '&non-continuable G4a2c@G4a27 'G4a88 '#f '#f '#())) (set! G4a8c@G4a87 '#f) (set! G4a8e@G4a86 (make-record-constructor-descriptor G4a8a@G4a85 G4a30@G4a28 G4a8c@G4a87)) (set! G4a91@p? (record-predicate G4a8a@G4a85)) (set! G4a93@make-non-continuable-violation (record-constructor G4a8e@G4a86)) (set! G4a95@non-continuable-violation? (condition-predicate G4a8a@G4a85)) (set! G4a97@&non-continuable-rtd G4a8a@G4a85) (set! G4a99@&non-continuable-rcd G4a8e@G4a86) (set! G4a9f@G4a9a (make-record-type-descriptor '&implementation-restriction G4a2c@G4a27 'G4a9d '#f '#f '#())) (set! G4aa1@G4a9c '#f) (set! G4aa3@G4a9b (make-record-constructor-descriptor G4a9f@G4a9a G4a30@G4a28 G4aa1@G4a9c)) (set! G4aa6@p? (record-predicate G4a9f@G4a9a)) (set! G4aa8@make-implementation-restriction-violation (record-constructor G4aa3@G4a9b)) (set! G4aaa@implementation-restriction-violation? (condition-predicate G4a9f@G4a9a)) (set! G4aac@&implementation-restriction-rtd G4a9f@G4a9a) (set! G4aae@&implementation-restriction-rcd G4aa3@G4a9b) (set! G4ab4@G4aaf (make-record-type-descriptor '&lexical G4a2c@G4a27 'G4ab2 '#f '#f '#())) (set! G4ab6@G4ab1 '#f) (set! G4ab8@G4ab0 (make-record-constructor-descriptor G4ab4@G4aaf G4a30@G4a28 G4ab6@G4ab1)) (set! G4abb@p? (record-predicate G4ab4@G4aaf)) (set! G4abd@make-lexical-violation (record-constructor G4ab8@G4ab0)) (set! G4abf@lexical-violation? (condition-predicate G4ab4@G4aaf)) (set! G4ac1@&lexical-rtd G4ab4@G4aaf) (set! G4ac3@&lexical-rcd G4ab8@G4ab0) (set! G4acb@G4ac6 (make-record-type-descriptor '&syntax G4a2c@G4a27 'G4ac9 '#f '#f '#((immutable form) (immutable subform)))) (set! G4acd@G4ac8 '#f) (set! G4acf@G4ac7 (make-record-constructor-descriptor G4acb@G4ac6 G4a30@G4a28 G4acd@G4ac8)) (set! G4ad2@p? (record-predicate G4acb@G4ac6)) (set! G4ad4@make-syntax-violation (record-constructor G4acf@G4ac7)) (set! G4ad6@G4ac4 (record-accessor G4acb@G4ac6 '0)) (set! G4ad8@G4ac5 (record-accessor G4acb@G4ac6 '1)) (set! G4ada@syntax-violation? (condition-predicate G4acb@G4ac6)) (set! G4adc@syntax-violation-form (condition-accessor G4acb@G4ac6 G4ad6@G4ac4)) (set! G4ade@syntax-violation-subform (condition-accessor G4acb@G4ac6 G4ad8@G4ac5)) (set! G4ae0@&syntax-rtd G4acb@G4ac6) (set! G4ae2@&syntax-rcd G4acf@G4ac7) (set! G4ae8@G4ae3 (make-record-type-descriptor '&undefined G4a2c@G4a27 'G4ae6 '#f '#f '#())) (set! G4aea@G4ae5 '#f) (set! G4aec@G4ae4 (make-record-constructor-descriptor G4ae8@G4ae3 G4a30@G4a28 G4aea@G4ae5)) (set! G4aef@p? (record-predicate G4ae8@G4ae3)) (set! G4af1@make-undefined-violation (record-constructor G4aec@G4ae4)) (set! G4af3@undefined-violation? (condition-predicate G4ae8@G4ae3)) (set! G4af5@&undefined-rtd G4ae8@G4ae3) (set! G4af7@&undefined-rcd G4aec@G4ae4) (set! G4afd@G4af8 (make-record-type-descriptor '&i/o G4a17@G4a12 'G4afb '#f '#f '#())) (set! G4aff@G4afa '#f) (set! G4b01@G4af9 (make-record-constructor-descriptor G4afd@G4af8 G4a1b@G4a13 G4aff@G4afa)) (set! G4b04@p? (record-predicate G4afd@G4af8)) (set! G4b06@make-i/o-error (record-constructor G4b01@G4af9)) (set! G4b08@i/o-error? (condition-predicate G4afd@G4af8)) (set! G4b0a@&i/o-rtd G4afd@G4af8) (set! G4b0c@&i/o-rcd G4b01@G4af9) (set! G4b12@G4b0d (make-record-type-descriptor '&i/o-read G4afd@G4af8 'G4b10 '#f '#f '#())) (set! G4b14@G4b0f '#f) (set! G4b16@G4b0e (make-record-constructor-descriptor G4b12@G4b0d G4b01@G4af9 G4b14@G4b0f)) (set! G4b19@p? (record-predicate G4b12@G4b0d)) (set! G4b1b@make-i/o-read-error (record-constructor G4b16@G4b0e)) (set! G4b1d@i/o-read-error? (condition-predicate G4b12@G4b0d)) (set! G4b1f@&i/o-read-rtd G4b12@G4b0d) (set! G4b21@&i/o-read-rcd G4b16@G4b0e) (set! G4b27@G4b22 (make-record-type-descriptor '&i/o-write G4afd@G4af8 'G4b25 '#f '#f '#())) (set! G4b29@G4b24 '#f) (set! G4b2b@G4b23 (make-record-constructor-descriptor G4b27@G4b22 G4b01@G4af9 G4b29@G4b24)) (set! G4b2e@p? (record-predicate G4b27@G4b22)) (set! G4b30@make-i/o-write-error (record-constructor G4b2b@G4b23)) (set! G4b32@i/o-write-error? (condition-predicate G4b27@G4b22)) (set! G4b34@&i/o-write-rtd G4b27@G4b22) (set! G4b36@&i/o-write-rcd G4b2b@G4b23) (set! G4b3d@G4b38 (make-record-type-descriptor '&i/o-invalid-position G4afd@G4af8 'G4b3b '#f '#f '#((immutable position)))) (set! G4b3f@G4b3a '#f) (set! G4b41@G4b39 (make-record-constructor-descriptor G4b3d@G4b38 G4b01@G4af9 G4b3f@G4b3a)) (set! G4b44@p? (record-predicate G4b3d@G4b38)) (set! G4b46@make-i/o-invalid-position-error (record-constructor G4b41@G4b39)) (set! G4b48@G4b37 (record-accessor G4b3d@G4b38 '0)) (set! G4b4a@i/o-invalid-position-error? (condition-predicate G4b3d@G4b38)) (set! G4b4c@i/o-error-position (condition-accessor G4b3d@G4b38 G4b48@G4b37)) (set! G4b4e@&i/o-invalid-position-rtd G4b3d@G4b38) (set! G4b50@&i/o-invalid-position-rcd G4b41@G4b39) (set! G4b57@G4b52 (make-record-type-descriptor '&i/o-filename G4afd@G4af8 'G4b55 '#f '#f '#((immutable filename)))) (set! G4b59@G4b54 '#f) (set! G4b5b@G4b53 (make-record-constructor-descriptor G4b57@G4b52 G4b01@G4af9 G4b59@G4b54)) (set! G4b5e@p? (record-predicate G4b57@G4b52)) (set! G4b60@make-i/o-filename-error (record-constructor G4b5b@G4b53)) (set! G4b62@G4b51 (record-accessor G4b57@G4b52 '0)) (set! G4b64@i/o-filename-error? (condition-predicate G4b57@G4b52)) (set! G4b66@i/o-error-filename (condition-accessor G4b57@G4b52 G4b62@G4b51)) (set! G4b68@&i/o-filename-rtd G4b57@G4b52) (set! G4b6a@&i/o-filename-rcd G4b5b@G4b53) (set! G4b70@G4b6b (make-record-type-descriptor '&i/o-file-protection G4b57@G4b52 'G4b6e '#f '#f '#())) (set! G4b72@G4b6d '#f) (set! G4b74@G4b6c (make-record-constructor-descriptor G4b70@G4b6b G4b5b@G4b53 G4b72@G4b6d)) (set! G4b77@p? (record-predicate G4b70@G4b6b)) (set! G4b79@make-i/o-file-protection-error (record-constructor G4b74@G4b6c)) (set! G4b7b@i/o-file-protection-error? (condition-predicate G4b70@G4b6b)) (set! G4b7d@&i/o-file-protection-rtd G4b70@G4b6b) (set! G4b7f@&i/o-file-protection-rcd G4b74@G4b6c) (set! G4b85@G4b80 (make-record-type-descriptor '&i/o-file-is-read-only G4b70@G4b6b 'G4b83 '#f '#f '#())) (set! G4b87@G4b82 '#f) (set! G4b89@G4b81 (make-record-constructor-descriptor G4b85@G4b80 G4b74@G4b6c G4b87@G4b82)) (set! G4b8c@p? (record-predicate G4b85@G4b80)) (set! G4b8e@make-i/o-file-is-read-only-error (record-constructor G4b89@G4b81)) (set! G4b90@i/o-file-is-read-only-error? (condition-predicate G4b85@G4b80)) (set! G4b92@&i/o-file-is-read-only-rtd G4b85@G4b80) (set! G4b94@&i/o-file-is-read-only-rcd G4b89@G4b81) (set! G4b9a@G4b95 (make-record-type-descriptor '&i/o-file-already-exists G4b57@G4b52 'G4b98 '#f '#f '#())) (set! G4b9c@G4b97 '#f) (set! G4b9e@G4b96 (make-record-constructor-descriptor G4b9a@G4b95 G4b5b@G4b53 G4b9c@G4b97)) (set! G4ba1@p? (record-predicate G4b9a@G4b95)) (set! G4ba3@make-i/o-file-already-exists-error (record-constructor G4b9e@G4b96)) (set! G4ba5@i/o-file-already-exists-error? (condition-predicate G4b9a@G4b95)) (set! G4ba7@&i/o-file-already-exists-rtd G4b9a@G4b95) (set! G4ba9@&i/o-file-already-exists-rcd G4b9e@G4b96) (set! G4baf@G4baa (make-record-type-descriptor '&i/o-file-does-not-exist G4b57@G4b52 'G4bad '#f '#f '#())) (set! G4bb1@G4bac '#f) (set! G4bb3@G4bab (make-record-constructor-descriptor G4baf@G4baa G4b5b@G4b53 G4bb1@G4bac)) (set! G4bb6@p? (record-predicate G4baf@G4baa)) (set! G4bb8@make-i/o-file-does-not-exist-error (record-constructor G4bb3@G4bab)) (set! G4bba@i/o-file-does-not-exist-error? (condition-predicate G4baf@G4baa)) (set! G4bbc@&i/o-file-does-not-exist-rtd G4baf@G4baa) (set! G4bbe@&i/o-file-does-not-exist-rcd G4bb3@G4bab) (set! G4bc5@G4bc0 (make-record-type-descriptor '&i/o-port G4afd@G4af8 'G4bc3 '#f '#f '#((immutable port)))) (set! G4bc7@G4bc2 '#f) (set! G4bc9@G4bc1 (make-record-constructor-descriptor G4bc5@G4bc0 G4b01@G4af9 G4bc7@G4bc2)) (set! G4bcc@p? (record-predicate G4bc5@G4bc0)) (set! G4bce@make-i/o-port-error (record-constructor G4bc9@G4bc1)) (set! G4bd0@G4bbf (record-accessor G4bc5@G4bc0 '0)) (set! G4bd2@i/o-port-error? (condition-predicate G4bc5@G4bc0)) (set! G4bd4@i/o-error-port (condition-accessor G4bc5@G4bc0 G4bd0@G4bbf)) (set! G4bd6@&i/o-port-rtd G4bc5@G4bc0) (set! G4bd8@&i/o-port-rcd G4bc9@G4bc1) (set! G4bde@G4bd9 (make-record-type-descriptor '&i/o-decoding G4bc5@G4bc0 'G4bdc '#f '#f '#())) (set! G4be0@G4bdb '#f) (set! G4be2@G4bda (make-record-constructor-descriptor G4bde@G4bd9 G4bc9@G4bc1 G4be0@G4bdb)) (set! G4be5@p? (record-predicate G4bde@G4bd9)) (set! G4be7@make-i/o-decoding-error (record-constructor G4be2@G4bda)) (set! G4be9@i/o-decoding-error? (condition-predicate G4bde@G4bd9)) (set! G4beb@&i/o-decoding-rtd G4bde@G4bd9) (set! G4bed@&i/o-decoding-rcd G4be2@G4bda) (set! G4bf4@G4bef (make-record-type-descriptor '&i/o-encoding G4bc5@G4bc0 'G4bf2 '#f '#f '#((immutable char)))) (set! G4bf6@G4bf1 '#f) (set! G4bf8@G4bf0 (make-record-constructor-descriptor G4bf4@G4bef G4bc9@G4bc1 G4bf6@G4bf1)) (set! G4bfb@p? (record-predicate G4bf4@G4bef)) (set! G4bfd@make-i/o-encoding-error (record-constructor G4bf8@G4bf0)) (set! G4bff@G4bee (record-accessor G4bf4@G4bef '0)) (set! G4c01@i/o-encoding-error? (condition-predicate G4bf4@G4bef)) (set! G4c03@i/o-encoding-error-char (condition-accessor G4bf4@G4bef G4bff@G4bee)) (set! G4c05@&i/o-encoding-rtd G4bf4@G4bef) (set! G4c07@&i/o-encoding-rcd G4bf8@G4bf0) (set! G4c0d@G4c08 (make-record-type-descriptor '&no-infinities G4a9f@G4a9a 'G4c0b '#f '#f '#())) (set! G4c0f@G4c0a '#f) (set! G4c11@G4c09 (make-record-constructor-descriptor G4c0d@G4c08 G4aa3@G4a9b G4c0f@G4c0a)) (set! G4c14@p? (record-predicate G4c0d@G4c08)) (set! G4c16@make-no-infinities-violation (record-constructor G4c11@G4c09)) (set! G4c18@no-infinities-violation? (condition-predicate G4c0d@G4c08)) (set! G4c1a@&no-infinities-rtd G4c0d@G4c08) (set! G4c1c@&no-infinities-rcd G4c11@G4c09) (set! G4c22@G4c1d (make-record-type-descriptor '&no-nans G4a9f@G4a9a 'G4c20 '#f '#f '#())) (set! G4c24@G4c1f '#f) (set! G4c26@G4c1e (make-record-constructor-descriptor G4c22@G4c1d G4aa3@G4a9b G4c24@G4c1f)) (set! G4c29@p? (record-predicate G4c22@G4c1d)) (set! G4c2b@make-no-nans-violation (record-constructor G4c26@G4c1e)) (set! G4c2d@no-nans-violation? (condition-predicate G4c22@G4c1d)) (set! G4c2f@&no-nans-rtd G4c22@G4c1d) (set! G4c31@&no-nans-rcd G4c26@G4c1e) (begin (set! G4d22@G4c31@&no-nans-rcd G4c31@&no-nans-rcd) (set! G4d21@G4c2f@&no-nans-rtd G4c2f@&no-nans-rtd) (set! G4d20@G4c2d@no-nans-violation? G4c2d@no-nans-violation?) (set! G4d1f@G4c2b@make-no-nans-violation G4c2b@make-no-nans-violation) (set! G4d1e@G4c29@p? G4c29@p?) (set! G4d1d@G4c26@G4c1e G4c26@G4c1e) (set! G4d1c@G4c24@G4c1f G4c24@G4c1f) (set! G4d1b@G4c22@G4c1d G4c22@G4c1d) (set! G4d1a@G4c1c@&no-infinities-rcd G4c1c@&no-infinities-rcd) (set! G4d19@G4c1a@&no-infinities-rtd G4c1a@&no-infinities-rtd) (set! G4d18@G4c18@no-infinities-violation? G4c18@no-infinities-violation?) (set! G4d17@G4c16@make-no-infinities-violation G4c16@make-no-infinities-violation) (set! G4d16@G4c14@p? G4c14@p?) (set! G4d15@G4c11@G4c09 G4c11@G4c09) (set! G4d14@G4c0f@G4c0a G4c0f@G4c0a) (set! G4d13@G4c0d@G4c08 G4c0d@G4c08) (set! G4d12@G4c07@&i/o-encoding-rcd G4c07@&i/o-encoding-rcd) (set! G4d11@G4c05@&i/o-encoding-rtd G4c05@&i/o-encoding-rtd) (set! G4d10@G4c03@i/o-encoding-error-char G4c03@i/o-encoding-error-char) (set! G4d0f@G4c01@i/o-encoding-error? G4c01@i/o-encoding-error?) (set! G4d0e@G4bff@G4bee G4bff@G4bee) (set! G4d0d@G4bfd@make-i/o-encoding-error G4bfd@make-i/o-encoding-error) (set! G4d0c@G4bfb@p? G4bfb@p?) (set! G4d0b@G4bf8@G4bf0 G4bf8@G4bf0) (set! G4d0a@G4bf6@G4bf1 G4bf6@G4bf1) (set! G4d09@G4bf4@G4bef G4bf4@G4bef) (set! G4d08@G4bed@&i/o-decoding-rcd G4bed@&i/o-decoding-rcd) (set! G4d07@G4beb@&i/o-decoding-rtd G4beb@&i/o-decoding-rtd) (set! G4d06@G4be9@i/o-decoding-error? G4be9@i/o-decoding-error?) (set! G4d05@G4be7@make-i/o-decoding-error G4be7@make-i/o-decoding-error) (set! G4d04@G4be5@p? G4be5@p?) (set! G4d03@G4be2@G4bda G4be2@G4bda) (set! G4d02@G4be0@G4bdb G4be0@G4bdb) (set! G4d01@G4bde@G4bd9 G4bde@G4bd9) (set! G4d00@G4bd8@&i/o-port-rcd G4bd8@&i/o-port-rcd) (set! G4cff@G4bd6@&i/o-port-rtd G4bd6@&i/o-port-rtd) (set! G4cfe@G4bd4@i/o-error-port G4bd4@i/o-error-port) (set! G4cfd@G4bd2@i/o-port-error? G4bd2@i/o-port-error?) (set! G4cfc@G4bd0@G4bbf G4bd0@G4bbf) (set! G4cfb@G4bce@make-i/o-port-error G4bce@make-i/o-port-error) (set! G4cfa@G4bcc@p? G4bcc@p?) (set! G4cf9@G4bc9@G4bc1 G4bc9@G4bc1) (set! G4cf8@G4bc7@G4bc2 G4bc7@G4bc2) (set! G4cf7@G4bc5@G4bc0 G4bc5@G4bc0) (set! G4cf6@G4bbe@&i/o-file-does-not-exist-rcd G4bbe@&i/o-file-does-not-exist-rcd) (set! G4cf5@G4bbc@&i/o-file-does-not-exist-rtd G4bbc@&i/o-file-does-not-exist-rtd) (set! G4cf4@G4bba@i/o-file-does-not-exist-error? G4bba@i/o-file-does-not-exist-error?) (set! G4cf3@G4bb8@make-i/o-file-does-not-exist-error G4bb8@make-i/o-file-does-not-exist-error) (set! G4cf2@G4bb6@p? G4bb6@p?) (set! G4cf1@G4bb3@G4bab G4bb3@G4bab) (set! G4cf0@G4bb1@G4bac G4bb1@G4bac) (set! G4cef@G4baf@G4baa G4baf@G4baa) (set! G4cee@G4ba9@&i/o-file-already-exists-rcd G4ba9@&i/o-file-already-exists-rcd) (set! G4ced@G4ba7@&i/o-file-already-exists-rtd G4ba7@&i/o-file-already-exists-rtd) (set! G4cec@G4ba5@i/o-file-already-exists-error? G4ba5@i/o-file-already-exists-error?) (set! G4ceb@G4ba3@make-i/o-file-already-exists-error G4ba3@make-i/o-file-already-exists-error) (set! G4cea@G4ba1@p? G4ba1@p?) (set! G4ce9@G4b9e@G4b96 G4b9e@G4b96) (set! G4ce8@G4b9c@G4b97 G4b9c@G4b97) (set! G4ce7@G4b9a@G4b95 G4b9a@G4b95) (set! G4ce6@G4b94@&i/o-file-is-read-only-rcd G4b94@&i/o-file-is-read-only-rcd) (set! G4ce5@G4b92@&i/o-file-is-read-only-rtd G4b92@&i/o-file-is-read-only-rtd) (set! G4ce4@G4b90@i/o-file-is-read-only-error? G4b90@i/o-file-is-read-only-error?) (set! G4ce3@G4b8e@make-i/o-file-is-read-only-error G4b8e@make-i/o-file-is-read-only-error) (set! G4ce2@G4b8c@p? G4b8c@p?) (set! G4ce1@G4b89@G4b81 G4b89@G4b81) (set! G4ce0@G4b87@G4b82 G4b87@G4b82) (set! G4cdf@G4b85@G4b80 G4b85@G4b80) (set! G4cde@G4b7f@&i/o-file-protection-rcd G4b7f@&i/o-file-protection-rcd) (set! G4cdd@G4b7d@&i/o-file-protection-rtd G4b7d@&i/o-file-protection-rtd) (set! G4cdc@G4b7b@i/o-file-protection-error? G4b7b@i/o-file-protection-error?) (set! G4cdb@G4b79@make-i/o-file-protection-error G4b79@make-i/o-file-protection-error) (set! G4cda@G4b77@p? G4b77@p?) (set! G4cd9@G4b74@G4b6c G4b74@G4b6c) (set! G4cd8@G4b72@G4b6d G4b72@G4b6d) (set! G4cd7@G4b70@G4b6b G4b70@G4b6b) (set! G4cd6@G4b6a@&i/o-filename-rcd G4b6a@&i/o-filename-rcd) (set! G4cd5@G4b68@&i/o-filename-rtd G4b68@&i/o-filename-rtd) (set! G4cd4@G4b66@i/o-error-filename G4b66@i/o-error-filename) (set! G4cd3@G4b64@i/o-filename-error? G4b64@i/o-filename-error?) (set! G4cd2@G4b62@G4b51 G4b62@G4b51) (set! G4cd1@G4b60@make-i/o-filename-error G4b60@make-i/o-filename-error) (set! G4cd0@G4b5e@p? G4b5e@p?) (set! G4ccf@G4b5b@G4b53 G4b5b@G4b53) (set! G4cce@G4b59@G4b54 G4b59@G4b54) (set! G4ccd@G4b57@G4b52 G4b57@G4b52) (set! G4ccc@G4b50@&i/o-invalid-position-rcd G4b50@&i/o-invalid-position-rcd) (set! G4ccb@G4b4e@&i/o-invalid-position-rtd G4b4e@&i/o-invalid-position-rtd) (set! G4cca@G4b4c@i/o-error-position G4b4c@i/o-error-position) (set! G4cc9@G4b4a@i/o-invalid-position-error? G4b4a@i/o-invalid-position-error?) (set! G4cc8@G4b48@G4b37 G4b48@G4b37) (set! G4cc7@G4b46@make-i/o-invalid-position-error G4b46@make-i/o-invalid-position-error) (set! G4cc6@G4b44@p? G4b44@p?) (set! G4cc5@G4b41@G4b39 G4b41@G4b39) (set! G4cc4@G4b3f@G4b3a G4b3f@G4b3a) (set! G4cc3@G4b3d@G4b38 G4b3d@G4b38) (set! G4cc2@G4b36@&i/o-write-rcd G4b36@&i/o-write-rcd) (set! G4cc1@G4b34@&i/o-write-rtd G4b34@&i/o-write-rtd) (set! G4cc0@G4b32@i/o-write-error? G4b32@i/o-write-error?) (set! G4cbf@G4b30@make-i/o-write-error G4b30@make-i/o-write-error) (set! G4cbe@G4b2e@p? G4b2e@p?) (set! G4cbd@G4b2b@G4b23 G4b2b@G4b23) (set! G4cbc@G4b29@G4b24 G4b29@G4b24) (set! G4cbb@G4b27@G4b22 G4b27@G4b22) (set! G4cba@G4b21@&i/o-read-rcd G4b21@&i/o-read-rcd) (set! G4cb9@G4b1f@&i/o-read-rtd G4b1f@&i/o-read-rtd) (set! G4cb8@G4b1d@i/o-read-error? G4b1d@i/o-read-error?) (set! G4cb7@G4b1b@make-i/o-read-error G4b1b@make-i/o-read-error) (set! G4cb6@G4b19@p? G4b19@p?) (set! G4cb5@G4b16@G4b0e G4b16@G4b0e) (set! G4cb4@G4b14@G4b0f G4b14@G4b0f) (set! G4cb3@G4b12@G4b0d G4b12@G4b0d) (set! G4cb2@G4b0c@&i/o-rcd G4b0c@&i/o-rcd) (set! G4cb1@G4b0a@&i/o-rtd G4b0a@&i/o-rtd) (set! G4cb0@G4b08@i/o-error? G4b08@i/o-error?) (set! G4caf@G4b06@make-i/o-error G4b06@make-i/o-error) (set! G4cae@G4b04@p? G4b04@p?) (set! G4cad@G4b01@G4af9 G4b01@G4af9) (set! G4cac@G4aff@G4afa G4aff@G4afa) (set! G4cab@G4afd@G4af8 G4afd@G4af8) (set! G4caa@G4af7@&undefined-rcd G4af7@&undefined-rcd) (set! G4ca9@G4af5@&undefined-rtd G4af5@&undefined-rtd) (set! G4ca8@G4af3@undefined-violation? G4af3@undefined-violation?) (set! G4ca7@G4af1@make-undefined-violation G4af1@make-undefined-violation) (set! G4ca6@G4aef@p? G4aef@p?) (set! G4ca5@G4aec@G4ae4 G4aec@G4ae4) (set! G4ca4@G4aea@G4ae5 G4aea@G4ae5) (set! G4ca3@G4ae8@G4ae3 G4ae8@G4ae3) (set! G4ca2@G4ae2@&syntax-rcd G4ae2@&syntax-rcd) (set! G4ca1@G4ae0@&syntax-rtd G4ae0@&syntax-rtd) (set! G4ca0@G4ade@syntax-violation-subform G4ade@syntax-violation-subform) (set! G4c9f@G4adc@syntax-violation-form G4adc@syntax-violation-form) (set! G4c9e@G4ada@syntax-violation? G4ada@syntax-violation?) (set! G4c9d@G4ad8@G4ac5 G4ad8@G4ac5) (set! G4c9c@G4ad6@G4ac4 G4ad6@G4ac4) (set! G4c9b@G4ad4@make-syntax-violation G4ad4@make-syntax-violation) (set! G4c9a@G4ad2@p? G4ad2@p?) (set! G4c99@G4acf@G4ac7 G4acf@G4ac7) (set! G4c98@G4acd@G4ac8 G4acd@G4ac8) (set! G4c97@G4acb@G4ac6 G4acb@G4ac6) (set! G4c96@G4ac3@&lexical-rcd G4ac3@&lexical-rcd) (set! G4c95@G4ac1@&lexical-rtd G4ac1@&lexical-rtd) (set! G4c94@G4abf@lexical-violation? G4abf@lexical-violation?) (set! G4c93@G4abd@make-lexical-violation G4abd@make-lexical-violation) (set! G4c92@G4abb@p? G4abb@p?) (set! G4c91@G4ab8@G4ab0 G4ab8@G4ab0) (set! G4c90@G4ab6@G4ab1 G4ab6@G4ab1) (set! G4c8f@G4ab4@G4aaf G4ab4@G4aaf) (set! G4c8e@G4aae@&implementation-restriction-rcd G4aae@&implementation-restriction-rcd) (set! G4c8d@G4aac@&implementation-restriction-rtd G4aac@&implementation-restriction-rtd) (set! G4c8c@G4aaa@implementation-restriction-violation? G4aaa@implementation-restriction-violation?) (set! G4c8b@G4aa8@make-implementation-restriction-violation G4aa8@make-implementation-restriction-violation) (set! G4c8a@G4aa6@p? G4aa6@p?) (set! G4c89@G4aa3@G4a9b G4aa3@G4a9b) (set! G4c88@G4aa1@G4a9c G4aa1@G4a9c) (set! G4c87@G4a9f@G4a9a G4a9f@G4a9a) (set! G4c86@G4a99@&non-continuable-rcd G4a99@&non-continuable-rcd) (set! G4c85@G4a97@&non-continuable-rtd G4a97@&non-continuable-rtd) (set! G4c84@G4a95@non-continuable-violation? G4a95@non-continuable-violation?) (set! G4c83@G4a93@make-non-continuable-violation G4a93@make-non-continuable-violation) (set! G4c82@G4a91@p? G4a91@p?) (set! G4c81@G4a8e@G4a86 G4a8e@G4a86) (set! G4c80@G4a8c@G4a87 G4a8c@G4a87) (set! G4c7f@G4a8a@G4a85 G4a8a@G4a85) (set! G4c7e@G4a84@&who-rcd G4a84@&who-rcd) (set! G4c7d@G4a82@&who-rtd G4a82@&who-rtd) (set! G4c7c@G4a80@condition-who G4a80@condition-who) (set! G4c7b@G4a7e@who-condition? G4a7e@who-condition?) (set! G4c7a@G4a7c@G4a6b G4a7c@G4a6b) (set! G4c79@G4a7a@make-who-condition G4a7a@make-who-condition) (set! G4c78@G4a78@p? G4a78@p?) (set! G4c77@G4a75@G4a6d G4a75@G4a6d) (set! G4c76@G4a73@G4a6e G4a73@G4a6e) (set! G4c75@G4a71@G4a6c G4a71@G4a6c) (set! G4c74@G4a6a@&irritants-rcd G4a6a@&irritants-rcd) (set! G4c73@G4a68@&irritants-rtd G4a68@&irritants-rtd) (set! G4c72@G4a66@condition-irritants G4a66@condition-irritants) (set! G4c71@G4a64@irritants-condition? G4a64@irritants-condition?) (set! G4c70@G4a62@G4a51 G4a62@G4a51) (set! G4c6f@G4a60@make-irritants-condition G4a60@make-irritants-condition) (set! G4c6e@G4a5e@p? G4a5e@p?) (set! G4c6d@G4a5b@G4a53 G4a5b@G4a53) (set! G4c6c@G4a59@G4a54 G4a59@G4a54) (set! G4c6b@G4a57@G4a52 G4a57@G4a52) (set! G4c6a@G4a50@&assertion-rcd G4a50@&assertion-rcd) (set! G4c69@G4a4e@&assertion-rtd G4a4e@&assertion-rtd) (set! G4c68@G4a4c@assertion-violation? G4a4c@assertion-violation?) (set! G4c67@G4a4a@make-assertion-violation G4a4a@make-assertion-violation) (set! G4c66@G4a48@p? G4a48@p?) (set! G4c65@G4a45@G4a3d G4a45@G4a3d) (set! G4c64@G4a43@G4a3e G4a43@G4a3e) (set! G4c63@G4a41@G4a3c G4a41@G4a3c) (set! G4c62@G4a3b@&violation-rcd G4a3b@&violation-rcd) (set! G4c61@G4a39@&violation-rtd G4a39@&violation-rtd) (set! G4c60@G4a37@violation? G4a37@violation?) (set! G4c5f@G4a35@make-violation G4a35@make-violation) (set! G4c5e@G4a33@p? G4a33@p?) (set! G4c5d@G4a30@G4a28 G4a30@G4a28) (set! G4c5c@G4a2e@G4a29 G4a2e@G4a29) (set! G4c5b@G4a2c@G4a27 G4a2c@G4a27) (set! G4c5a@G4a26@&error-rcd G4a26@&error-rcd) (set! G4c59@G4a24@&error-rtd G4a24@&error-rtd) (set! G4c58@G4a22@error? G4a22@error?) (set! G4c57@G4a20@make-error G4a20@make-error) (set! G4c56@G4a1e@p? G4a1e@p?) (set! G4c55@G4a1b@G4a13 G4a1b@G4a13) (set! G4c54@G4a19@G4a14 G4a19@G4a14) (set! G4c53@G4a17@G4a12 G4a17@G4a12) (set! G4c52@G4a11@&serious-rcd G4a11@&serious-rcd) (set! G4c51@G4a0f@&serious-rtd G4a0f@&serious-rtd) (set! G4c50@G4a0d@serious-condition? G4a0d@serious-condition?) (set! G4c4f@G4a0b@make-serious-condition G4a0b@make-serious-condition) (set! G4c4e@G4a09@p? G4a09@p?) (set! G4c4d@G4a06@G49fe G4a06@G49fe) (set! G4c4c@G4a04@G49ff G4a04@G49ff) (set! G4c4b@G4a02@G49fd G4a02@G49fd) (set! G4c4a@G49fc@&warning-rcd G49fc@&warning-rcd) (set! G4c49@G49fa@&warning-rtd G49fa@&warning-rtd) (set! G4c48@G49f8@warning? G49f8@warning?) (set! G4c47@G49f6@make-warning G49f6@make-warning) (set! G4c46@G49f4@p? G49f4@p?) (set! G4c45@G49f1@G49e9 G49f1@G49e9) (set! G4c44@G49ef@G49ea G49ef@G49ea) (set! G4c43@G49ed@G49e8 G49ed@G49e8) (set! G4c42@G49e7@&message-rcd G49e7@&message-rcd) (set! G4c41@G49e5@&message-rtd G49e5@&message-rtd) (set! G4c40@G49e3@condition-message G49e3@condition-message) (set! G4c3f@G49e1@message-condition? G49e1@message-condition?) (set! G4c3e@G49df@G49ce G49df@G49ce) (set! G4c3d@G49dd@make-message-condition G49dd@make-message-condition) (set! G4c3c@G49db@p? G49db@p?) (set! G4c3b@G49d8@G49d0 G49d8@G49d0) (set! G4c3a@G49d6@G49d1 G49d6@G49d1) (set! G4c39@G49d4@G49cf G49d4@G49cf) (set! G4c38@G498a@&condition-rcd G498a@&condition-rcd) (set! G4c37@G4988@&condition-rtd G4988@&condition-rtd) (set! G4c36@G4986@make-&condition G4986@make-&condition) (set! G4c35@G4984@&condition? G4984@&condition?) (set! G4c34@G4981@G4979 G4981@G4979) (set! G4c33@G497f@G497a G497f@G497a) (set! G4c32@G497d@G4978 G497d@G4978)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2954@G2909@current-primitive-locations (lambda (G50c4@x) ((lambda (G50c6@t) (if G50c6@t (cdr G50c6@t) '#f)) (assq G50c4@x '((&no-nans-rcd . G4d22@G4c31@&no-nans-rcd) (&no-nans-rtd . G4d21@G4c2f@&no-nans-rtd) (&no-infinities-rcd . G4d1a@G4c1c@&no-infinities-rcd) (&no-infinities-rtd . G4d19@G4c1a@&no-infinities-rtd) (&i/o-encoding-rcd . G4d12@G4c07@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4d11@G4c05@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4d08@G4bed@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4d07@G4beb@&i/o-decoding-rtd) (&i/o-port-rcd . G4d00@G4bd8@&i/o-port-rcd) (&i/o-port-rtd . G4cff@G4bd6@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cf6@G4bbe@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cf5@G4bbc@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cee@G4ba9@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4ced@G4ba7@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4ce6@G4b94@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4ce5@G4b92@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cde@G4b7f@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cdd@G4b7d@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4cd6@G4b6a@&i/o-filename-rcd) (&i/o-filename-rtd . G4cd5@G4b68@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4ccc@G4b50@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4ccb@G4b4e@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4cc2@G4b36@&i/o-write-rcd) (&i/o-write-rtd . G4cc1@G4b34@&i/o-write-rtd) (&i/o-read-rcd . G4cba@G4b21@&i/o-read-rcd) (&i/o-read-rtd . G4cb9@G4b1f@&i/o-read-rtd) (&i/o-rcd . G4cb2@G4b0c@&i/o-rcd) (&i/o-rtd . G4cb1@G4b0a@&i/o-rtd) (&undefined-rcd . G4caa@G4af7@&undefined-rcd) (&undefined-rtd . G4ca9@G4af5@&undefined-rtd) (&syntax-rcd . G4ca2@G4ae2@&syntax-rcd) (&syntax-rtd . G4ca1@G4ae0@&syntax-rtd) (&lexical-rcd . G4c96@G4ac3@&lexical-rcd) (&lexical-rtd . G4c95@G4ac1@&lexical-rtd) (&implementation-restriction-rcd . G4c8e@G4aae@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c8d@G4aac@&implementation-restriction-rtd) (&non-continuable-rcd . G4c86@G4a99@&non-continuable-rcd) (&non-continuable-rtd . G4c85@G4a97@&non-continuable-rtd) (&who-rcd . G4c7e@G4a84@&who-rcd) (&who-rtd . G4c7d@G4a82@&who-rtd) (&irritants-rcd . G4c74@G4a6a@&irritants-rcd) (&irritants-rtd . G4c73@G4a68@&irritants-rtd) (&assertion-rcd . G4c6a@G4a50@&assertion-rcd) (&assertion-rtd . G4c69@G4a4e@&assertion-rtd) (&violation-rcd . G4c62@G4a3b@&violation-rcd) (&violation-rtd . G4c61@G4a39@&violation-rtd) (&error-rcd . G4c5a@G4a26@&error-rcd) (&error-rtd . G4c59@G4a24@&error-rtd) (&serious-rcd . G4c52@G4a11@&serious-rcd) (&serious-rtd . G4c51@G4a0f@&serious-rtd) (&warning-rcd . G4c4a@G49fc@&warning-rcd) (&warning-rtd . G4c49@G49fa@&warning-rtd) (&message-rcd . G4c42@G49e7@&message-rcd) (&message-rtd . G4c41@G49e5@&message-rtd) (&condition-rcd . G4c38@G498a@&condition-rcd) (&condition-rtd . G4c37@G4988@&condition-rtd) (syntax-error . G4969@G304d@syntax-error) (syntax-dispatch . G48fd@G2f66@syntax-dispatch) (load . G4dc0@G4d32@load) (interaction-environment . G4972@G305f@interaction-environment) (make-parameter . G2903@G283c@make-parameter) (make-variable-transformer . G48bb@G2da1@make-variable-transformer) (identifier? . G496d@G3055@identifier?) (generate-temporaries . G4962@G303f@generate-temporaries) (free-identifier=? . G4963@G3041@free-identifier=?) (syntax->datum . G496f@G3059@syntax->datum) (datum->syntax . G496e@G3057@datum->syntax) (bound-identifier=? . G4964@G3043@bound-identifier=?) (make-i/o-write-error . G4cbf@G4b30@make-i/o-write-error) (make-i/o-read-error . G4cb7@G4b1b@make-i/o-read-error) (make-i/o-port-error . G4cfb@G4bce@make-i/o-port-error) (make-i/o-invalid-position-error . G4cc7@G4b46@make-i/o-invalid-position-error) (make-i/o-filename-error . G4cd1@G4b60@make-i/o-filename-error) (make-i/o-file-protection-error . G4cdb@G4b79@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4ce3@G4b8e@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cf3@G4bb8@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4ceb@G4ba3@make-i/o-file-already-exists-error) (make-i/o-error . G4caf@G4b06@make-i/o-error) (make-i/o-encoding-error . G4d0d@G4bfd@make-i/o-encoding-error) (make-i/o-decoding-error . G4d05@G4be7@make-i/o-decoding-error) (i/o-write-error? . G4cc0@G4b32@i/o-write-error?) (i/o-read-error? . G4cb8@G4b1d@i/o-read-error?) (i/o-port-error? . G4cfd@G4bd2@i/o-port-error?) (i/o-invalid-position-error? . G4cc9@G4b4a@i/o-invalid-position-error?) (i/o-filename-error? . G4cd3@G4b64@i/o-filename-error?) (i/o-file-protection-error? . G4cdc@G4b7b@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4ce4@G4b90@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cf4@G4bba@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cec@G4ba5@i/o-file-already-exists-error?) (i/o-error? . G4cb0@G4b08@i/o-error?) (i/o-error-port . G4cfe@G4bd4@i/o-error-port) (i/o-error-filename . G4cd4@G4b66@i/o-error-filename) (i/o-encoding-error? . G4d0f@G4c01@i/o-encoding-error?) (i/o-encoding-error-char . G4d10@G4c03@i/o-encoding-error-char) (i/o-decoding-error? . G4d06@G4be9@i/o-decoding-error?) (scheme-report-environment . G4959@G302d@scheme-report-environment) (null-environment . G4958@G302b@null-environment) (command-line . G4dbd@G4d2c@command-line) (eval . G495b@G3031@eval) (environment . G4957@G3029@environment) (who-condition? . G4c7b@G4a7e@who-condition?) (warning? . G4c48@G49f8@warning?) (violation? . G4c60@G4a37@violation?) (undefined-violation? . G4ca8@G4af3@undefined-violation?) (syntax-violation? . G4c9e@G4ada@syntax-violation?) (syntax-violation-subform . G4ca0@G4ade@syntax-violation-subform) (syntax-violation-form . G4c9f@G4adc@syntax-violation-form) (syntax-violation . G496c@G3053@syntax-violation) (serious-condition? . G4c50@G4a0d@serious-condition?) (non-continuable-violation? . G4c84@G4a95@non-continuable-violation?) (message-condition? . G4c3f@G49e1@message-condition?) (make-who-condition . G4c79@G4a7a@make-who-condition) (make-warning . G4c47@G49f6@make-warning) (make-violation . G4c5f@G4a35@make-violation) (make-undefined-violation . G4ca7@G4af1@make-undefined-violation) (make-syntax-violation . G4c9b@G4ad4@make-syntax-violation) (make-serious-condition . G4c4f@G4a0b@make-serious-condition) (make-non-continuable-violation . G4c83@G4a93@make-non-continuable-violation) (make-message-condition . G4c3d@G49dd@make-message-condition) (make-lexical-violation . G4c93@G4abd@make-lexical-violation) (make-irritants-condition . G4c6f@G4a60@make-irritants-condition) (make-implementation-restriction-violation . G4c8b@G4aa8@make-implementation-restriction-violation) (make-error . G4c57@G4a20@make-error) (make-assertion-violation . G4c67@G4a4a@make-assertion-violation) (lexical-violation? . G4c94@G4abf@lexical-violation?) (irritants-condition? . G4c71@G4a64@irritants-condition?) (implementation-restriction-violation? . G4c8c@G4aaa@implementation-restriction-violation?) (error? . G4c58@G4a22@error?) (condition-who . G4c7c@G4a80@condition-who) (condition-message . G4c40@G49e3@condition-message) (condition-irritants . G4c72@G4a66@condition-irritants) (assertion-violation? . G4c68@G4a4c@assertion-violation?) (no-nans-violation? . G4d20@G4c2d@no-nans-violation?) (no-infinities-violation? . G4d18@G4c18@no-infinities-violation?) (make-no-nans-violation . G4d1f@G4c2b@make-no-nans-violation) (make-no-infinities-violation . G4d17@G4c16@make-no-infinities-violation)))))) (G2b7c@G2a21@install-library 'G5097 '(mosh interaction) '() '() '() '() '((string-upcase . G5048) (string-titlecase . G5047) (string-normalize-nfkd . G5046) (string-normalize-nfkc . G5045) (string-normalize-nfd . G5044) (string-normalize-nfc . G5043) (string-foldcase . G5042) (string-downcase . G5041) (string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-title-case? . G5039) (char-numeric? . G5038) (char-lower-case? . G5037) (char-general-category . G5036) (char-upcase . G5035) (char-titlecase . G5034) (char-foldcase . G5033) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c) (make-variable-transformer . G2da0) (identifier? . G3054) (generate-temporaries . G303e) (free-identifier=? . G3040) (syntax->datum . G3058) (datum->syntax . G3056) (bound-identifier=? . G3042) (record-type-descriptor? . G502b) (record-predicate . G502a) (record-mutator . G5029) (record-constructor . G5028) (record-accessor . G5027) (make-record-type-descriptor . G5026) (make-record-constructor-descriptor . G5025) (record? . G5024) (record-type-uid . G5023) (record-type-sealed? . G5022) (record-type-parent . G5021) (record-type-opaque? . G5020) (record-type-name . G501f) (record-type-generative? . G501e) (record-type-field-names . G501d) (record-rtd . G501c) (record-field-mutable? . G501b) (delete-file . G501a) (file-exists? . G5019) (vector-sort! . G5018) (vector-sort . G5017) (list-sort . G5016) (symbol-hash . G5015) (string-ci-hash . G5014) (string-hash . G5013) (equal-hash . G5012) (hashtable-equivalence-function . G5011) (make-hashtable . G5010) (hashtable-hash-function . G500f) (make-eqv-hashtable . G500e) (make-eq-hashtable . G500d) (hashtable? . G500c) (hashtable-update! . G500b) (hashtable-size . G500a) (hashtable-set! . G5009) (hashtable-ref . G5008) (hashtable-mutable? . G5007) (hashtable-keys . G5006) (hashtable-entries . G5005) (hashtable-delete! . G5004) (hashtable-copy . G5003) (hashtable-contains? . G5002) (hashtable-clear! . G5001) (call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (utf-8-codec . G4fea) (utf-16-codec . G4fe9) (transcoder-error-handling-mode . G4fe8) (transcoder-eol-style . G4fe7) (transcoder-codec . G4fe6) (transcoded-port . G4fe5) (textual-port? . G4fe4) (string->bytevector . G4fe3) (standard-output-port . G4fe2) (standard-input-port . G4fe1) (standard-error-port . G4fe0) (set-port-position! . G4fdf) (put-u8 . G4fde) (put-string . G4fdd) (put-datum . G4fdc) (put-char . G4fdb) (put-bytevector . G4fda) (port? . G4fd9) (port-transcoder . G4fd8) (port-position . G4fd7) (port-has-set-port-position!? . G4fd6) (port-has-port-position? . G4fd5) (port-eof? . G4fd4) (output-port-buffer-mode . G4fd3) (open-string-output-port . G4fd2) (open-string-input-port . G4fd1) (open-file-output-port . G4fd0) (open-file-input/output-port . G4fcf) (open-file-input-port . G4fce) (open-bytevector-output-port . G4fcd) (open-bytevector-input-port . G4fcc) (native-transcoder . G4fcb) (native-eol-style . G4fca) (make-transcoder . G4fc9) (latin-1-codec . G4fc8) (make-i/o-write-error . G4b2f) (make-i/o-read-error . G4b1a) (make-i/o-port-error . G4bcd) (make-i/o-invalid-position-error . G4b45) (make-i/o-filename-error . G4b5f) (make-i/o-file-protection-error . G4b78) (make-i/o-file-is-read-only-error . G4b8d) (make-i/o-file-does-not-exist-error . G4bb7) (make-i/o-file-already-exists-error . G4ba2) (make-i/o-error . G4b05) (make-i/o-encoding-error . G4bfc) (make-i/o-decoding-error . G4be6) (make-custom-textual-output-port . G4fc7) (make-custom-textual-input/output-port . G4fc6) (make-custom-textual-input-port . G4fc5) (make-custom-binary-output-port . G4fc4) (make-custom-binary-input/output-port . G4fc3) (make-custom-binary-input-port . G4fc2) (make-bytevector . G4fc1) (lookahead-u8 . G4fc0) (lookahead-char . G4fbf) (i/o-write-error? . G4b31) (i/o-read-error? . G4b1c) (i/o-port-error? . G4bd1) (i/o-invalid-position-error? . G4b49) (i/o-filename-error? . G4b63) (i/o-file-protection-error? . G4b7a) (i/o-file-is-read-only-error? . G4b8f) (i/o-file-does-not-exist-error? . G4bb9) (i/o-file-already-exists-error? . G4ba4) (i/o-error? . G4b07) (i/o-error-port . G4bd3) (i/o-error-filename . G4b65) (i/o-encoding-error? . G4c00) (i/o-encoding-error-char . G4c02) (i/o-decoding-error? . G4be8) (get-u8 . G4fbe) (get-string-n! . G4fbd) (get-string-n . G4fbc) (get-string-all . G4fbb) (get-line . G4fba) (get-datum . G4fb9) (get-char . G4fb8) (get-bytevector-some . G4fb7) (get-bytevector-n! . G4fb6) (get-bytevector-n . G4fb5) (get-bytevector-all . G4fb4) (flush-output-port . G4fb3) (close-port . G4fb2) (exit . G4faa) (command-line . G4d2b) (string-fill! . G4fa9) (string-set! . G4fa8) (set-cdr! . G4fa7) (set-car! . G4fa6) (remove . G4fa5) (remv . G4fa4) (remp . G4fa3) (remq . G4fa2) (partition . G4fa1) (memv . G4fa0) (memq . G4f9f) (memp . G4f9e) (member . G4f9d) (exists . G4f9c) (for-all . G4f9b) (fold-right . G4f9a) (fold-left . G4f99) (find . G4f98) (filter . G4f97) (cons* . G4f96) (assv . G4f95) (assq . G4f94) (assp . G4f93) (assoc . G4f92) (call-with-string-output-port . G4f91) (call-with-port . G4f90) (call-with-bytevector-output-port . G4f8f) (bytevector->string . G4f8e) (buffer-mode? . G4f8d) (binary-port? . G4f8c) (with-exception-handler . G4f8b) (raise-continuable . G4f8a) (raise . G4f89) (eval . G3030) (environment . G3028) (make-enumeration . G4f88) (enum-set=? . G4f87) (enum-set-universe . G4f86) (enum-set-union . G4f85) (enum-set-subset? . G4f84) (enum-set-projection . G4f83) (enum-set-member? . G4f82) (enum-set-intersection . G4f81) (enum-set-indexer . G4f80) (enum-set-difference . G4f7f) (enum-set-constructor . G4f7e) (enum-set-complement . G4f7d) (enum-set->list . G4f7c) (who-condition? . G4a7d) (warning? . G49f7) (violation? . G4a36) (undefined-violation? . G4af2) (syntax-violation? . G4ad9) (syntax-violation-subform . G4add) (syntax-violation-form . G4adb) (syntax-violation . G3052) (simple-conditions . G4f7b) (serious-condition? . G4a0c) (non-continuable-violation? . G4a94) (message-condition? . G49e0) (make-who-condition . G4a79) (make-warning . G49f5) (make-violation . G4a34) (make-undefined-violation . G4af0) (make-syntax-violation . G4ad3) (make-serious-condition . G4a0a) (make-non-continuable-violation . G4a92) (make-message-condition . G49dc) (make-lexical-violation . G4abc) (make-irritants-condition . G4a5f) (make-implementation-restriction-violation . G4aa7) (make-error . G4a1f) (make-assertion-violation . G4a49) (lexical-violation? . G4abe) (irritants-condition? . G4a63) (implementation-restriction-violation? . G4aa9) (error? . G4a21) (condition-who . G4a7f) (condition-predicate . G4f7a) (condition-message . G49e2) (condition-irritants . G4a65) (condition-accessor . G4f79) (condition . G4f78) (assertion-violation? . G4a4b) (condition? . G4f77) (utf32->string . G4f76) (utf16->string . G4f75) (utf8->string . G4f74) (uint-list->bytevector . G4f73) (u8-list->bytevector . G4f72) (string->utf8 . G4f71) (string->utf32 . G4f70) (string->utf16 . G4f6f) (sint-list->bytevector . G4f6e) (native-endianness . G4f6d) (bytevector? . G4f6c) (bytevector=? . G4f6b) (bytevector-uint-set! . G4f6a) (bytevector-uint-ref . G4f69) (bytevector-u8-set! . G4f68) (bytevector-u8-ref . G4f67) (bytevector-u64-set! . G4f66) (bytevector-u64-ref . G4f65) (bytevector-u64-native-set! . G4f64) (bytevector-u64-native-ref . G4f63) (bytevector-u32-set! . G4f62) (bytevector-u32-ref . G4f61) (bytevector-u32-native-set! . G4f60) (bytevector-u32-native-ref . G4f5f) (bytevector-u16-set! . G4f5e) (bytevector-u16-ref . G4f5d) (bytevector-u16-native-set! . G4f5c) (bytevector-u16-native-ref . G4f5b) (bytevector-sint-set! . G4f5a) (bytevector-sint-ref . G4f59) (bytevector-s8-set! . G4f58) (bytevector-s8-ref . G4f57) (bytevector-s64-set! . G4f56) (bytevector-s64-ref . G4f55) (bytevector-s64-native-set! . G4f54) (bytevector-s64-native-ref . G4f53) (bytevector-s32-set! . G4f52) (bytevector-s32-ref . G4f51) (bytevector-s32-native-set! . G4f50) (bytevector-s32-native-ref . G4f4f) (bytevector-s16-set! . G4f4e) (bytevector-s16-ref . G4f4d) (bytevector-s16-native-set! . G4f4c) (bytevector-s16-native-ref . G4f4b) (bytevector-length . G4f4a) (bytevector-ieee-single-ref . G4f49) (bytevector-ieee-single-set! . G4f48) (bytevector-ieee-single-native-set! . G4f47) (bytevector-ieee-single-native-ref . G4f46) (bytevector-ieee-double-set! . G4f45) (bytevector-ieee-double-ref . G4f44) (bytevector-ieee-double-native-set! . G4f43) (bytevector-ieee-double-native-ref . G4f42) (bytevector-fill! . G4f41) (bytevector-copy! . G4f40) (bytevector-copy . G4f3f) (bytevector->uint-list . G4f3e) (bytevector->u8-list . G4f3d) (bytevector->sint-list . G4f3c) (no-nans-violation? . G4c2c) (no-infinities-violation? . G4c17) (make-no-nans-violation . G4c2a) (make-no-infinities-violation . G4c15) (real->flonum . G4f3b) (flzero? . G4f3a) (fltruncate . G4f39) (fltan . G4f38) (flsqrt . G4f37) (flsin . G4f36) (flround . G4f35) (flpositive? . G4f34) (flonum? . G4f33) (flodd? . G4f32) (flnumerator . G4f31) (flnegative? . G4f30) (flnan? . G4f2f) (flmod0 . G4f2e) (flmod . G4f2d) (flmin . G4f2c) (flmax . G4f2b) (fllog . G4f2a) (flinteger? . G4f29) (flinfinite? . G4f28) (flfloor . G4f27) (flfinite? . G4f26) (flexpt . G4f25) (flexp . G4f24) (fleven? . G4f23) (fldiv0-and-mod0 . G4f22) (fldiv0 . G4f21) (fldiv-and-mod . G4f20) (fldiv . G4f1f) (fldenominator . G4f1e) (flcos . G4f1d) (flceiling . G4f1c) (flatan . G4f1b) (flasin . G4f1a) (flacos . G4f19) (flabs . G4f18) (fl>? . G4f17) (fl>=? . G4f16) (fl=? . G4f15) (fl<? . G4f14) (fl<=? . G4f13) (fl/ . G4f12) (fl- . G4f11) (fl+ . G4f10) (fl* . G4f0f) (fixnum->flonum . G4f0e) (fxzero? . G4f0d) (fxxor . G4f0c) (fxrotate-bit-field . G4f0b) (fxreverse-bit-field . G4f0a) (fxpositive? . G4f09) (fxodd? . G4f08) (fxnot . G4f07) (fxnegative? . G4f06) (fxmod0 . G4f05) (fxmod . G4f04) (fxmin . G4f03) (fxmax . G4f02) (fxlength . G4f01) (fxior . G4f00) (fxif . G4eff) (fxfirst-bit-set . G4efe) (fxeven? . G4efd) (fxdiv0-and-mod0 . G4efc) (fxdiv0 . G4efb) (fxdiv-and-mod . G4efa) (fxdiv . G4ef9) (fxcopy-bit-field . G4ef8) (fxcopy-bit . G4ef7) (fxbit-set? . G4ef6) (fxbit-field . G4ef5) (fxbit-count . G4ef4) (fxarithmetic-shift-right . G4ef3) (fxarithmetic-shift-left . G4ef2) (fxarithmetic-shift . G4ef1) (fxand . G4ef0) (fx>? . G4eef) (fx>=? . G4eee) (fx=? . G4eed) (fx<? . G4eec) (fx<=? . G4eeb) (fx-/carry . G4eea) (fx- . G4ee9) (fx+/carry . G4ee8) (fx+ . G4ee7) (fx*/carry . G4ee6) (fx* . G4ee5) (greatest-fixnum . G4ee4) (least-fixnum . G4ee3) (fixnum-width . G4ee2) (fixnum? . G4ee1) (bitwise-rotate-bit-field . G4ee0) (bitwise-reverse-bit-field . G4edf) (bitwise-length . G4ede) (bitwise-if . G4edd) (bitwise-first-bit-set . G4edc) (bitwise-copy-bit-field . G4edb) (bitwise-copy-bit . G4eda) (bitwise-bit-set? . G4ed9) (bitwise-bit-field . G4ed8) (bitwise-bit-count . G4ed7) (bitwise-xor . G4ed6) (bitwise-ior . G4ed5) (bitwise-and . G4ed4) (bitwise-not . G4ed3) (bitwise-arithmetic-shift-right . G4ed2) (bitwise-arithmetic-shift-left . G4ed1) (bitwise-arithmetic-shift . G4ed0) (zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-map . G4ecb) (vector-length . G4eca) (vector-for-each . G4ec9) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol=? . G4ec1) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-for-each . G4eb6) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-valued? . G4eaa) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (rational-valued? . G4ea6) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (null? . G4e9e) (not . G4e9d) (negative? . G4e9c) (nan? . G4e9b) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer-valued? . G4e88) (integer->char . G4e87) (infinite? . G4e86) (inexact? . G4e85) (inexact . G4e84) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (finite? . G4e7f) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (exact-integer-sqrt . G4e7b) (exact . G4e7a) (even? . G4e79) (error . G4e78) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (div0-and-mod0 . G4e73) (mod0 . G4e72) (div0 . G4e71) (div-and-mod . G4e70) (mod . G4e6f) (div . G4e6e) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call/cc . G4e60) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (boolean=? . G4e3f) (atan . G4e3e) (assertion-violation . G4e3d) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (library . G4e2d) (export . G4e2c) (&no-nans . G4e2b) (&no-infinities . G4e2a) (&i/o-encoding . G4e29) (&i/o-decoding . G4e28) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e) (&undefined . G4e1d) (&syntax . G4e1c) (&lexical . G4e1b) (&implementation-restriction . G4e1a) (&non-continuable . G4e19) (&who . G4e18) (&irritants . G4e17) (&assertion . G4e16) (&violation . G4e15) (&error . G4e14) (&serious . G4e13) (&warning . G4e12) (&message . G4e11) (&condition . G4e10) (define-condition-type . G4e0f) (define-enumeration . G4e0e) (define-record-type . G4e0d) (parent-rtd . G4e0c) (nongenerative . G4e0b) (opaque . G4e0a) (sealed . G4e09) (protocol . G4e08) (parent . G4e07) (immutable . G4e06) (mutable . G4e05) (fields . G4e04) (error-handling-mode . G4e03) (file-options . G4e02) (buffer-mode . G4e01) (eol-style . G4e00) (guard . G4dff) (unsyntax-splicing . G4dfc) (unsyntax . G4dfb) (unquote-splicing . G4dfa) (unquote . G4df9) (_ . G4df8) (else . G4df7) (=> . G4df6) (... . G4df5) (assert . G4df4) (endianness . G4df3) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (let*-values . G4dec) (let-values . G4deb) (identifier-syntax . G4dea) (with-syntax . G4de9) (quasisyntax . G4de8) (quasiquote . G4de7) (syntax-rules . G4de6) (include . G4de5) (record-constructor-descriptor . G4de3) (record-type-descriptor . G4de2) (case . G4de1) (unless . G4ddf) (when . G4dde) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec* . G4dda) (letrec . G4dd9) (case-lambda . G4dd7) (lambda . G4dd6) (syntax . G4dd5) (syntax-case . G4dd4) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (import . G4dce) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G5098 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fab) (unquote-splicing . G4dfa) (unquote . G4df9) (delay . G4df2) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (quasiquote . G4de7) (syntax-rules . G4de6) (case . G4de1) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec . G4dd9) (lambda . G4dd6) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G5099 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-numeric? . G5038) (char-lower-case? . G5037) (char-upcase . G5035) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c) (call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object . G4ff0) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (scheme-report-environment . G302c) (quotient . G4fb1) (null-environment . G302a) (remainder . G4fb0) (modulo . G4faf) (inexact->exact . G4fae) (force . G4fad) (exact->inexact . G4fac) (make-promise . G4fab) (string-fill! . G4fa9) (string-set! . G4fa8) (set-cdr! . G4fa7) (set-car! . G4fa6) (memv . G4fa0) (memq . G4f9f) (member . G4f9d) (assv . G4f95) (assq . G4f94) (assoc . G4f92) (eval . G3030) (zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-length . G4eca) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (not . G4e9d) (negative? . G4e9c) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer->char . G4e87) (inexact? . G4e85) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (even? . G4e79) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (atan . G4e3e) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (unquote-splicing . G4dfa) (unquote . G4df9) (delay . G4df2) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (quasiquote . G4de7) (syntax-rules . G4de6) (case . G4de1) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec . G4dd9) (lambda . G4dd6) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G509a '(psyntax modules) '() '() '() '() '((module . G4dcc)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G509b '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G509c '(rnrs) '(6) '() '() '() '((regexp? . G508f) (string-upcase . G5048) (string-titlecase . G5047) (string-normalize-nfkd . G5046) (string-normalize-nfkc . G5045) (string-normalize-nfd . G5044) (string-normalize-nfc . G5043) (string-foldcase . G5042) (string-downcase . G5041) (string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-title-case? . G5039) (char-numeric? . G5038) (char-lower-case? . G5037) (char-general-category . G5036) (char-upcase . G5035) (char-titlecase . G5034) (char-foldcase . G5033) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c) (make-variable-transformer . G2da0) (identifier? . G3054) (generate-temporaries . G303e) (free-identifier=? . G3040) (syntax->datum . G3058) (datum->syntax . G3056) (bound-identifier=? . G3042) (record-type-descriptor? . G502b) (record-predicate . G502a) (record-mutator . G5029) (record-constructor . G5028) (record-accessor . G5027) (make-record-type-descriptor . G5026) (make-record-constructor-descriptor . G5025) (record? . G5024) (record-type-uid . G5023) (record-type-sealed? . G5022) (record-type-parent . G5021) (record-type-opaque? . G5020) (record-type-name . G501f) (record-type-generative? . G501e) (record-type-field-names . G501d) (record-rtd . G501c) (record-field-mutable? . G501b) (delete-file . G501a) (file-exists? . G5019) (vector-sort! . G5018) (vector-sort . G5017) (list-sort . G5016) (symbol-hash . G5015) (string-ci-hash . G5014) (string-hash . G5013) (equal-hash . G5012) (hashtable-equivalence-function . G5011) (make-hashtable . G5010) (hashtable-hash-function . G500f) (make-eqv-hashtable . G500e) (make-eq-hashtable . G500d) (hashtable? . G500c) (hashtable-update! . G500b) (hashtable-size . G500a) (hashtable-set! . G5009) (hashtable-ref . G5008) (hashtable-mutable? . G5007) (hashtable-keys . G5006) (hashtable-entries . G5005) (hashtable-delete! . G5004) (hashtable-copy . G5003) (hashtable-contains? . G5002) (hashtable-clear! . G5001) (call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (utf-8-codec . G4fea) (utf-16-codec . G4fe9) (transcoder-error-handling-mode . G4fe8) (transcoder-eol-style . G4fe7) (transcoder-codec . G4fe6) (transcoded-port . G4fe5) (textual-port? . G4fe4) (string->bytevector . G4fe3) (standard-output-port . G4fe2) (standard-input-port . G4fe1) (standard-error-port . G4fe0) (set-port-position! . G4fdf) (put-u8 . G4fde) (put-string . G4fdd) (put-datum . G4fdc) (put-char . G4fdb) (put-bytevector . G4fda) (port? . G4fd9) (port-transcoder . G4fd8) (port-position . G4fd7) (port-has-set-port-position!? . G4fd6) (port-has-port-position? . G4fd5) (port-eof? . G4fd4) (output-port-buffer-mode . G4fd3) (open-string-output-port . G4fd2) (open-string-input-port . G4fd1) (open-file-output-port . G4fd0) (open-file-input/output-port . G4fcf) (open-file-input-port . G4fce) (open-bytevector-output-port . G4fcd) (open-bytevector-input-port . G4fcc) (native-transcoder . G4fcb) (native-eol-style . G4fca) (make-transcoder . G4fc9) (latin-1-codec . G4fc8) (make-i/o-write-error . G4b2f) (make-i/o-read-error . G4b1a) (make-i/o-port-error . G4bcd) (make-i/o-invalid-position-error . G4b45) (make-i/o-filename-error . G4b5f) (make-i/o-file-protection-error . G4b78) (make-i/o-file-is-read-only-error . G4b8d) (make-i/o-file-does-not-exist-error . G4bb7) (make-i/o-file-already-exists-error . G4ba2) (make-i/o-error . G4b05) (make-i/o-encoding-error . G4bfc) (make-i/o-decoding-error . G4be6) (make-custom-textual-output-port . G4fc7) (make-custom-textual-input/output-port . G4fc6) (make-custom-textual-input-port . G4fc5) (make-custom-binary-output-port . G4fc4) (make-custom-binary-input/output-port . G4fc3) (make-custom-binary-input-port . G4fc2) (make-bytevector . G4fc1) (lookahead-u8 . G4fc0) (lookahead-char . G4fbf) (i/o-write-error? . G4b31) (i/o-read-error? . G4b1c) (i/o-port-error? . G4bd1) (i/o-invalid-position-error? . G4b49) (i/o-filename-error? . G4b63) (i/o-file-protection-error? . G4b7a) (i/o-file-is-read-only-error? . G4b8f) (i/o-file-does-not-exist-error? . G4bb9) (i/o-file-already-exists-error? . G4ba4) (i/o-error? . G4b07) (i/o-error-port . G4bd3) (i/o-error-filename . G4b65) (i/o-encoding-error? . G4c00) (i/o-encoding-error-char . G4c02) (i/o-decoding-error? . G4be8) (get-u8 . G4fbe) (get-string-n! . G4fbd) (get-string-n . G4fbc) (get-string-all . G4fbb) (get-line . G4fba) (get-datum . G4fb9) (get-char . G4fb8) (get-bytevector-some . G4fb7) (get-bytevector-n! . G4fb6) (get-bytevector-n . G4fb5) (get-bytevector-all . G4fb4) (flush-output-port . G4fb3) (close-port . G4fb2) (exit . G4faa) (command-line . G4d2b) (remove . G4fa5) (remv . G4fa4) (remp . G4fa3) (remq . G4fa2) (partition . G4fa1) (memv . G4fa0) (memq . G4f9f) (memp . G4f9e) (member . G4f9d) (exists . G4f9c) (for-all . G4f9b) (fold-right . G4f9a) (fold-left . G4f99) (find . G4f98) (filter . G4f97) (cons* . G4f96) (assv . G4f95) (assq . G4f94) (assp . G4f93) (assoc . G4f92) (call-with-string-output-port . G4f91) (call-with-port . G4f90) (call-with-bytevector-output-port . G4f8f) (bytevector->string . G4f8e) (buffer-mode? . G4f8d) (binary-port? . G4f8c) (with-exception-handler . G4f8b) (raise-continuable . G4f8a) (raise . G4f89) (make-enumeration . G4f88) (enum-set=? . G4f87) (enum-set-universe . G4f86) (enum-set-union . G4f85) (enum-set-subset? . G4f84) (enum-set-projection . G4f83) (enum-set-member? . G4f82) (enum-set-intersection . G4f81) (enum-set-indexer . G4f80) (enum-set-difference . G4f7f) (enum-set-constructor . G4f7e) (enum-set-complement . G4f7d) (enum-set->list . G4f7c) (who-condition? . G4a7d) (warning? . G49f7) (violation? . G4a36) (undefined-violation? . G4af2) (syntax-violation? . G4ad9) (syntax-violation-subform . G4add) (syntax-violation-form . G4adb) (syntax-violation . G3052) (simple-conditions . G4f7b) (serious-condition? . G4a0c) (non-continuable-violation? . G4a94) (message-condition? . G49e0) (make-who-condition . G4a79) (make-warning . G49f5) (make-violation . G4a34) (make-undefined-violation . G4af0) (make-syntax-violation . G4ad3) (make-serious-condition . G4a0a) (make-non-continuable-violation . G4a92) (make-message-condition . G49dc) (make-lexical-violation . G4abc) (make-irritants-condition . G4a5f) (make-implementation-restriction-violation . G4aa7) (make-error . G4a1f) (make-assertion-violation . G4a49) (lexical-violation? . G4abe) (irritants-condition? . G4a63) (implementation-restriction-violation? . G4aa9) (error? . G4a21) (condition-who . G4a7f) (condition-predicate . G4f7a) (condition-message . G49e2) (condition-irritants . G4a65) (condition-accessor . G4f79) (condition . G4f78) (assertion-violation? . G4a4b) (condition? . G4f77) (utf32->string . G4f76) (utf16->string . G4f75) (utf8->string . G4f74) (uint-list->bytevector . G4f73) (u8-list->bytevector . G4f72) (string->utf8 . G4f71) (string->utf32 . G4f70) (string->utf16 . G4f6f) (sint-list->bytevector . G4f6e) (native-endianness . G4f6d) (bytevector? . G4f6c) (bytevector=? . G4f6b) (bytevector-uint-set! . G4f6a) (bytevector-uint-ref . G4f69) (bytevector-u8-set! . G4f68) (bytevector-u8-ref . G4f67) (bytevector-u64-set! . G4f66) (bytevector-u64-ref . G4f65) (bytevector-u64-native-set! . G4f64) (bytevector-u64-native-ref . G4f63) (bytevector-u32-set! . G4f62) (bytevector-u32-ref . G4f61) (bytevector-u32-native-set! . G4f60) (bytevector-u32-native-ref . G4f5f) (bytevector-u16-set! . G4f5e) (bytevector-u16-ref . G4f5d) (bytevector-u16-native-set! . G4f5c) (bytevector-u16-native-ref . G4f5b) (bytevector-sint-set! . G4f5a) (bytevector-sint-ref . G4f59) (bytevector-s8-set! . G4f58) (bytevector-s8-ref . G4f57) (bytevector-s64-set! . G4f56) (bytevector-s64-ref . G4f55) (bytevector-s64-native-set! . G4f54) (bytevector-s64-native-ref . G4f53) (bytevector-s32-set! . G4f52) (bytevector-s32-ref . G4f51) (bytevector-s32-native-set! . G4f50) (bytevector-s32-native-ref . G4f4f) (bytevector-s16-set! . G4f4e) (bytevector-s16-ref . G4f4d) (bytevector-s16-native-set! . G4f4c) (bytevector-s16-native-ref . G4f4b) (bytevector-length . G4f4a) (bytevector-ieee-single-ref . G4f49) (bytevector-ieee-single-set! . G4f48) (bytevector-ieee-single-native-set! . G4f47) (bytevector-ieee-single-native-ref . G4f46) (bytevector-ieee-double-set! . G4f45) (bytevector-ieee-double-ref . G4f44) (bytevector-ieee-double-native-set! . G4f43) (bytevector-ieee-double-native-ref . G4f42) (bytevector-fill! . G4f41) (bytevector-copy! . G4f40) (bytevector-copy . G4f3f) (bytevector->uint-list . G4f3e) (bytevector->u8-list . G4f3d) (bytevector->sint-list . G4f3c) (no-nans-violation? . G4c2c) (no-infinities-violation? . G4c17) (make-no-nans-violation . G4c2a) (make-no-infinities-violation . G4c15) (real->flonum . G4f3b) (flzero? . G4f3a) (fltruncate . G4f39) (fltan . G4f38) (flsqrt . G4f37) (flsin . G4f36) (flround . G4f35) (flpositive? . G4f34) (flonum? . G4f33) (flodd? . G4f32) (flnumerator . G4f31) (flnegative? . G4f30) (flnan? . G4f2f) (flmod0 . G4f2e) (flmod . G4f2d) (flmin . G4f2c) (flmax . G4f2b) (fllog . G4f2a) (flinteger? . G4f29) (flinfinite? . G4f28) (flfloor . G4f27) (flfinite? . G4f26) (flexpt . G4f25) (flexp . G4f24) (fleven? . G4f23) (fldiv0-and-mod0 . G4f22) (fldiv0 . G4f21) (fldiv-and-mod . G4f20) (fldiv . G4f1f) (fldenominator . G4f1e) (flcos . G4f1d) (flceiling . G4f1c) (flatan . G4f1b) (flasin . G4f1a) (flacos . G4f19) (flabs . G4f18) (fl>? . G4f17) (fl>=? . G4f16) (fl=? . G4f15) (fl<? . G4f14) (fl<=? . G4f13) (fl/ . G4f12) (fl- . G4f11) (fl+ . G4f10) (fl* . G4f0f) (fixnum->flonum . G4f0e) (fxzero? . G4f0d) (fxxor . G4f0c) (fxrotate-bit-field . G4f0b) (fxreverse-bit-field . G4f0a) (fxpositive? . G4f09) (fxodd? . G4f08) (fxnot . G4f07) (fxnegative? . G4f06) (fxmod0 . G4f05) (fxmod . G4f04) (fxmin . G4f03) (fxmax . G4f02) (fxlength . G4f01) (fxior . G4f00) (fxif . G4eff) (fxfirst-bit-set . G4efe) (fxeven? . G4efd) (fxdiv0-and-mod0 . G4efc) (fxdiv0 . G4efb) (fxdiv-and-mod . G4efa) (fxdiv . G4ef9) (fxcopy-bit-field . G4ef8) (fxcopy-bit . G4ef7) (fxbit-set? . G4ef6) (fxbit-field . G4ef5) (fxbit-count . G4ef4) (fxarithmetic-shift-right . G4ef3) (fxarithmetic-shift-left . G4ef2) (fxarithmetic-shift . G4ef1) (fxand . G4ef0) (fx>? . G4eef) (fx>=? . G4eee) (fx=? . G4eed) (fx<? . G4eec) (fx<=? . G4eeb) (fx-/carry . G4eea) (fx- . G4ee9) (fx+/carry . G4ee8) (fx+ . G4ee7) (fx*/carry . G4ee6) (fx* . G4ee5) (greatest-fixnum . G4ee4) (least-fixnum . G4ee3) (fixnum-width . G4ee2) (fixnum? . G4ee1) (bitwise-rotate-bit-field . G4ee0) (bitwise-reverse-bit-field . G4edf) (bitwise-length . G4ede) (bitwise-if . G4edd) (bitwise-first-bit-set . G4edc) (bitwise-copy-bit-field . G4edb) (bitwise-copy-bit . G4eda) (bitwise-bit-set? . G4ed9) (bitwise-bit-field . G4ed8) (bitwise-bit-count . G4ed7) (bitwise-xor . G4ed6) (bitwise-ior . G4ed5) (bitwise-and . G4ed4) (bitwise-not . G4ed3) (bitwise-arithmetic-shift-right . G4ed2) (bitwise-arithmetic-shift-left . G4ed1) (bitwise-arithmetic-shift . G4ed0) (zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-map . G4ecb) (vector-length . G4eca) (vector-for-each . G4ec9) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol=? . G4ec1) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-for-each . G4eb6) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-valued? . G4eaa) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (rational-valued? . G4ea6) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (null? . G4e9e) (not . G4e9d) (negative? . G4e9c) (nan? . G4e9b) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer-valued? . G4e88) (integer->char . G4e87) (infinite? . G4e86) (inexact? . G4e85) (inexact . G4e84) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (finite? . G4e7f) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (exact-integer-sqrt . G4e7b) (exact . G4e7a) (even? . G4e79) (error . G4e78) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (div0-and-mod0 . G4e73) (mod0 . G4e72) (div0 . G4e71) (div-and-mod . G4e70) (mod . G4e6f) (div . G4e6e) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call/cc . G4e60) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (boolean=? . G4e3f) (atan . G4e3e) (assertion-violation . G4e3d) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (&no-nans . G4e2b) (&no-infinities . G4e2a) (&i/o-encoding . G4e29) (&i/o-decoding . G4e28) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e) (&undefined . G4e1d) (&syntax . G4e1c) (&lexical . G4e1b) (&implementation-restriction . G4e1a) (&non-continuable . G4e19) (&who . G4e18) (&irritants . G4e17) (&assertion . G4e16) (&violation . G4e15) (&error . G4e14) (&serious . G4e13) (&warning . G4e12) (&message . G4e11) (&condition . G4e10) (define-condition-type . G4e0f) (define-enumeration . G4e0e) (define-record-type . G4e0d) (parent-rtd . G4e0c) (nongenerative . G4e0b) (opaque . G4e0a) (sealed . G4e09) (protocol . G4e08) (parent . G4e07) (immutable . G4e06) (mutable . G4e05) (fields . G4e04) (error-handling-mode . G4e03) (file-options . G4e02) (buffer-mode . G4e01) (eol-style . G4e00) (guard . G4dff) (unsyntax-splicing . G4dfc) (unsyntax . G4dfb) (unquote-splicing . G4dfa) (unquote . G4df9) (_ . G4df8) (else . G4df7) (=> . G4df6) (... . G4df5) (assert . G4df4) (endianness . G4df3) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (let*-values . G4dec) (let-values . G4deb) (identifier-syntax . G4dea) (with-syntax . G4de9) (quasisyntax . G4de8) (quasiquote . G4de7) (syntax-rules . G4de6) (record-constructor-descriptor . G4de3) (record-type-descriptor . G4de2) (case . G4de1) (unless . G4ddf) (when . G4dde) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec* . G4dda) (letrec . G4dd9) (case-lambda . G4dd7) (lambda . G4dd6) (syntax . G4dd5) (syntax-case . G4dd4) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G509d '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G302c) (quotient . G4fb1) (null-environment . G302a) (remainder . G4fb0) (modulo . G4faf) (inexact->exact . G4fae) (force . G4fad) (exact->inexact . G4fac) (make-promise . G4fab) (delay . G4df2)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G509e '(rnrs control) '(6) '() '() '() '((do . G4df0) (unless . G4ddf) (when . G4dde) (case-lambda . G4dd7)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G509f '(rnrs eval) '(6) '() '() '() '((eval . G3030) (environment . G3028)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a0 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fa7) (set-car! . G4fa6)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a1 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fa9) (string-set! . G4fa8)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a2 '(rnrs programs) '(6) '() '() '() '((exit . G4faa) (command-line . G4d2b)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a3 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2da0) (identifier? . G3054) (generate-temporaries . G303e) (free-identifier=? . G3040) (syntax->datum . G3058) (datum->syntax . G3056) (bound-identifier=? . G3042) (syntax-violation . G3052) (unsyntax-splicing . G4dfc) (unsyntax . G4dfb) (_ . G4df8) (... . G4df5) (with-syntax . G4de9) (quasisyntax . G4de8) (syntax . G4dd5) (syntax-case . G4dd4)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a4 '(rnrs files) '(6) '() '() '() '((delete-file . G501a) (file-exists? . G5019) (make-i/o-write-error . G4b2f) (make-i/o-read-error . G4b1a) (make-i/o-port-error . G4bcd) (make-i/o-invalid-position-error . G4b45) (make-i/o-filename-error . G4b5f) (make-i/o-file-protection-error . G4b78) (make-i/o-file-is-read-only-error . G4b8d) (make-i/o-file-does-not-exist-error . G4bb7) (make-i/o-file-already-exists-error . G4ba2) (make-i/o-error . G4b05) (i/o-write-error? . G4b31) (i/o-read-error? . G4b1c) (i/o-port-error? . G4bd1) (i/o-invalid-position-error? . G4b49) (i/o-filename-error? . G4b63) (i/o-file-protection-error? . G4b7a) (i/o-file-is-read-only-error? . G4b8f) (i/o-file-does-not-exist-error? . G4bb9) (i/o-file-already-exists-error? . G4ba4) (i/o-error? . G4b07) (i/o-error-port . G4bd3) (i/o-error-filename . G4b65) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a5 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5018) (vector-sort . G5017) (list-sort . G5016)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a6 '(rnrs base) '(6) '() '() '() '((zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-map . G4ecb) (vector-length . G4eca) (vector-for-each . G4ec9) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol=? . G4ec1) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-for-each . G4eb6) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-valued? . G4eaa) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (rational-valued? . G4ea6) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (null? . G4e9e) (not . G4e9d) (negative? . G4e9c) (nan? . G4e9b) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer-valued? . G4e88) (integer->char . G4e87) (infinite? . G4e86) (inexact? . G4e85) (inexact . G4e84) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (finite? . G4e7f) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (exact-integer-sqrt . G4e7b) (exact . G4e7a) (even? . G4e79) (error . G4e78) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (div0-and-mod0 . G4e73) (mod0 . G4e72) (div0 . G4e71) (div-and-mod . G4e70) (mod . G4e6f) (div . G4e6e) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call/cc . G4e60) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (boolean=? . G4e3f) (atan . G4e3e) (assertion-violation . G4e3d) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (unquote-splicing . G4dfa) (unquote . G4df9) (_ . G4df8) (else . G4df7) (=> . G4df6) (... . G4df5) (assert . G4df4) (cond . G4def) (let* . G4dee) (let . G4ded) (let*-values . G4dec) (let-values . G4deb) (identifier-syntax . G4dea) (quasiquote . G4de7) (syntax-rules . G4de6) (case . G4de1) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec* . G4dda) (letrec . G4dd9) (lambda . G4dd6) (quote . G4dd3) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (begin . G4dcd) (define-syntax . G4dcb) (define . G4dca)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a7 '(rnrs lists) '(6) '() '() '() '((remove . G4fa5) (remv . G4fa4) (remp . G4fa3) (remq . G4fa2) (partition . G4fa1) (memv . G4fa0) (memq . G4f9f) (memp . G4f9e) (member . G4f9d) (exists . G4f9c) (for-all . G4f9b) (fold-right . G4f9a) (fold-left . G4f99) (find . G4f98) (filter . G4f97) (cons* . G4f96) (assv . G4f95) (assq . G4f94) (assp . G4f93) (assoc . G4f92)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a8 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (make-i/o-write-error . G4b2f) (make-i/o-read-error . G4b1a) (make-i/o-port-error . G4bcd) (make-i/o-invalid-position-error . G4b45) (make-i/o-filename-error . G4b5f) (make-i/o-file-protection-error . G4b78) (make-i/o-file-is-read-only-error . G4b8d) (make-i/o-file-does-not-exist-error . G4bb7) (make-i/o-file-already-exists-error . G4ba2) (make-i/o-error . G4b05) (i/o-write-error? . G4b31) (i/o-read-error? . G4b1c) (i/o-port-error? . G4bd1) (i/o-invalid-position-error? . G4b49) (i/o-filename-error? . G4b63) (i/o-file-protection-error? . G4b7a) (i/o-file-is-read-only-error? . G4b8f) (i/o-file-does-not-exist-error? . G4bb9) (i/o-file-already-exists-error? . G4ba4) (i/o-error? . G4b07) (i/o-error-port . G4bd3) (i/o-error-filename . G4b65) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50a9 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fc1) (utf32->string . G4f76) (utf16->string . G4f75) (utf8->string . G4f74) (uint-list->bytevector . G4f73) (u8-list->bytevector . G4f72) (string->utf8 . G4f71) (string->utf32 . G4f70) (string->utf16 . G4f6f) (sint-list->bytevector . G4f6e) (native-endianness . G4f6d) (bytevector? . G4f6c) (bytevector=? . G4f6b) (bytevector-uint-set! . G4f6a) (bytevector-uint-ref . G4f69) (bytevector-u8-set! . G4f68) (bytevector-u8-ref . G4f67) (bytevector-u64-set! . G4f66) (bytevector-u64-ref . G4f65) (bytevector-u64-native-set! . G4f64) (bytevector-u64-native-ref . G4f63) (bytevector-u32-set! . G4f62) (bytevector-u32-ref . G4f61) (bytevector-u32-native-set! . G4f60) (bytevector-u32-native-ref . G4f5f) (bytevector-u16-set! . G4f5e) (bytevector-u16-ref . G4f5d) (bytevector-u16-native-set! . G4f5c) (bytevector-u16-native-ref . G4f5b) (bytevector-sint-set! . G4f5a) (bytevector-sint-ref . G4f59) (bytevector-s8-set! . G4f58) (bytevector-s8-ref . G4f57) (bytevector-s64-set! . G4f56) (bytevector-s64-ref . G4f55) (bytevector-s64-native-set! . G4f54) (bytevector-s64-native-ref . G4f53) (bytevector-s32-set! . G4f52) (bytevector-s32-ref . G4f51) (bytevector-s32-native-set! . G4f50) (bytevector-s32-native-ref . G4f4f) (bytevector-s16-set! . G4f4e) (bytevector-s16-ref . G4f4d) (bytevector-s16-native-set! . G4f4c) (bytevector-s16-native-ref . G4f4b) (bytevector-length . G4f4a) (bytevector-ieee-single-ref . G4f49) (bytevector-ieee-single-set! . G4f48) (bytevector-ieee-single-native-set! . G4f47) (bytevector-ieee-single-native-ref . G4f46) (bytevector-ieee-double-set! . G4f45) (bytevector-ieee-double-ref . G4f44) (bytevector-ieee-double-native-set! . G4f43) (bytevector-ieee-double-native-ref . G4f42) (bytevector-fill! . G4f41) (bytevector-copy! . G4f40) (bytevector-copy . G4f3f) (bytevector->uint-list . G4f3e) (bytevector->u8-list . G4f3d) (bytevector->sint-list . G4f3c) (endianness . G4df3)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50aa '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5048) (string-titlecase . G5047) (string-normalize-nfkd . G5046) (string-normalize-nfkc . G5045) (string-normalize-nfd . G5044) (string-normalize-nfc . G5043) (string-foldcase . G5042) (string-downcase . G5041) (string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-title-case? . G5039) (char-numeric? . G5038) (char-lower-case? . G5037) (char-general-category . G5036) (char-upcase . G5035) (char-titlecase . G5034) (char-foldcase . G5033) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50ab '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f8b) (raise-continuable . G4f8a) (raise . G4f89) (guard . G4dff) (else . G4df7) (=> . G4df6)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50ac '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ee0) (bitwise-reverse-bit-field . G4edf) (bitwise-length . G4ede) (bitwise-if . G4edd) (bitwise-first-bit-set . G4edc) (bitwise-copy-bit-field . G4edb) (bitwise-copy-bit . G4eda) (bitwise-bit-set? . G4ed9) (bitwise-bit-field . G4ed8) (bitwise-bit-count . G4ed7) (bitwise-xor . G4ed6) (bitwise-ior . G4ed5) (bitwise-and . G4ed4) (bitwise-not . G4ed3) (bitwise-arithmetic-shift-right . G4ed2) (bitwise-arithmetic-shift-left . G4ed1) (bitwise-arithmetic-shift . G4ed0)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50ad '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f0d) (fxxor . G4f0c) (fxrotate-bit-field . G4f0b) (fxreverse-bit-field . G4f0a) (fxpositive? . G4f09) (fxodd? . G4f08) (fxnot . G4f07) (fxnegative? . G4f06) (fxmod0 . G4f05) (fxmod . G4f04) (fxmin . G4f03) (fxmax . G4f02) (fxlength . G4f01) (fxior . G4f00) (fxif . G4eff) (fxfirst-bit-set . G4efe) (fxeven? . G4efd) (fxdiv0-and-mod0 . G4efc) (fxdiv0 . G4efb) (fxdiv-and-mod . G4efa) (fxdiv . G4ef9) (fxcopy-bit-field . G4ef8) (fxcopy-bit . G4ef7) (fxbit-set? . G4ef6) (fxbit-field . G4ef5) (fxbit-count . G4ef4) (fxarithmetic-shift-right . G4ef3) (fxarithmetic-shift-left . G4ef2) (fxarithmetic-shift . G4ef1) (fxand . G4ef0) (fx>? . G4eef) (fx>=? . G4eee) (fx=? . G4eed) (fx<? . G4eec) (fx<=? . G4eeb) (fx-/carry . G4eea) (fx- . G4ee9) (fx+/carry . G4ee8) (fx+ . G4ee7) (fx*/carry . G4ee6) (fx* . G4ee5) (greatest-fixnum . G4ee4) (least-fixnum . G4ee3) (fixnum-width . G4ee2) (fixnum? . G4ee1)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50ae '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c2c) (no-infinities-violation? . G4c17) (make-no-nans-violation . G4c2a) (make-no-infinities-violation . G4c15) (real->flonum . G4f3b) (flzero? . G4f3a) (fltruncate . G4f39) (fltan . G4f38) (flsqrt . G4f37) (flsin . G4f36) (flround . G4f35) (flpositive? . G4f34) (flonum? . G4f33) (flodd? . G4f32) (flnumerator . G4f31) (flnegative? . G4f30) (flnan? . G4f2f) (flmod0 . G4f2e) (flmod . G4f2d) (flmin . G4f2c) (flmax . G4f2b) (fllog . G4f2a) (flinteger? . G4f29) (flinfinite? . G4f28) (flfloor . G4f27) (flfinite? . G4f26) (flexpt . G4f25) (flexp . G4f24) (fleven? . G4f23) (fldiv0-and-mod0 . G4f22) (fldiv0 . G4f21) (fldiv-and-mod . G4f20) (fldiv . G4f1f) (fldenominator . G4f1e) (flcos . G4f1d) (flceiling . G4f1c) (flatan . G4f1b) (flasin . G4f1a) (flacos . G4f19) (flabs . G4f18) (fl>? . G4f17) (fl>=? . G4f16) (fl=? . G4f15) (fl<? . G4f14) (fl<=? . G4f13) (fl/ . G4f12) (fl- . G4f11) (fl+ . G4f10) (fl* . G4f0f) (fixnum->flonum . G4f0e) (&no-nans . G4e2b) (&no-infinities . G4e2a)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50af '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5015) (string-ci-hash . G5014) (string-hash . G5013) (equal-hash . G5012) (hashtable-equivalence-function . G5011) (make-hashtable . G5010) (hashtable-hash-function . G500f) (make-eqv-hashtable . G500e) (make-eq-hashtable . G500d) (hashtable? . G500c) (hashtable-update! . G500b) (hashtable-size . G500a) (hashtable-set! . G5009) (hashtable-ref . G5008) (hashtable-mutable? . G5007) (hashtable-keys . G5006) (hashtable-entries . G5005) (hashtable-delete! . G5004) (hashtable-copy . G5003) (hashtable-contains? . G5002) (hashtable-clear! . G5001)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50b0 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (utf-8-codec . G4fea) (utf-16-codec . G4fe9) (transcoder-error-handling-mode . G4fe8) (transcoder-eol-style . G4fe7) (transcoder-codec . G4fe6) (transcoded-port . G4fe5) (textual-port? . G4fe4) (string->bytevector . G4fe3) (standard-output-port . G4fe2) (standard-input-port . G4fe1) (standard-error-port . G4fe0) (set-port-position! . G4fdf) (put-u8 . G4fde) (put-string . G4fdd) (put-datum . G4fdc) (put-char . G4fdb) (put-bytevector . G4fda) (port? . G4fd9) (port-transcoder . G4fd8) (port-position . G4fd7) (port-has-set-port-position!? . G4fd6) (port-has-port-position? . G4fd5) (port-eof? . G4fd4) (output-port-buffer-mode . G4fd3) (open-string-output-port . G4fd2) (open-string-input-port . G4fd1) (open-file-output-port . G4fd0) (open-file-input/output-port . G4fcf) (open-file-input-port . G4fce) (open-bytevector-output-port . G4fcd) (open-bytevector-input-port . G4fcc) (native-transcoder . G4fcb) (native-eol-style . G4fca) (make-transcoder . G4fc9) (latin-1-codec . G4fc8) (make-i/o-write-error . G4b2f) (make-i/o-read-error . G4b1a) (make-i/o-port-error . G4bcd) (make-i/o-invalid-position-error . G4b45) (make-i/o-filename-error . G4b5f) (make-i/o-file-protection-error . G4b78) (make-i/o-file-is-read-only-error . G4b8d) (make-i/o-file-does-not-exist-error . G4bb7) (make-i/o-file-already-exists-error . G4ba2) (make-i/o-error . G4b05) (make-i/o-encoding-error . G4bfc) (make-i/o-decoding-error . G4be6) (make-custom-textual-output-port . G4fc7) (make-custom-textual-input/output-port . G4fc6) (make-custom-textual-input-port . G4fc5) (make-custom-binary-output-port . G4fc4) (make-custom-binary-input/output-port . G4fc3) (make-custom-binary-input-port . G4fc2) (lookahead-u8 . G4fc0) (lookahead-char . G4fbf) (i/o-write-error? . G4b31) (i/o-read-error? . G4b1c) (i/o-port-error? . G4bd1) (i/o-invalid-position-error? . G4b49) (i/o-filename-error? . G4b63) (i/o-file-protection-error? . G4b7a) (i/o-file-is-read-only-error? . G4b8f) (i/o-file-does-not-exist-error? . G4bb9) (i/o-file-already-exists-error? . G4ba4) (i/o-error? . G4b07) (i/o-error-port . G4bd3) (i/o-error-filename . G4b65) (i/o-encoding-error? . G4c00) (i/o-encoding-error-char . G4c02) (i/o-decoding-error? . G4be8) (get-u8 . G4fbe) (get-string-n! . G4fbd) (get-string-n . G4fbc) (get-string-all . G4fbb) (get-line . G4fba) (get-datum . G4fb9) (get-char . G4fb8) (get-bytevector-some . G4fb7) (get-bytevector-n! . G4fb6) (get-bytevector-n . G4fb5) (get-bytevector-all . G4fb4) (flush-output-port . G4fb3) (close-port . G4fb2) (call-with-string-output-port . G4f91) (call-with-port . G4f90) (call-with-bytevector-output-port . G4f8f) (bytevector->string . G4f8e) (buffer-mode? . G4f8d) (binary-port? . G4f8c) (&i/o-encoding . G4e29) (&i/o-decoding . G4e28) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e) (error-handling-mode . G4e03) (file-options . G4e02) (buffer-mode . G4e01) (eol-style . G4e00)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50b1 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f88) (enum-set=? . G4f87) (enum-set-universe . G4f86) (enum-set-union . G4f85) (enum-set-subset? . G4f84) (enum-set-projection . G4f83) (enum-set-member? . G4f82) (enum-set-intersection . G4f81) (enum-set-indexer . G4f80) (enum-set-difference . G4f7f) (enum-set-constructor . G4f7e) (enum-set-complement . G4f7d) (enum-set->list . G4f7c) (define-enumeration . G4e0e)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50b2 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a7d) (warning? . G49f7) (violation? . G4a36) (undefined-violation? . G4af2) (syntax-violation? . G4ad9) (syntax-violation-subform . G4add) (syntax-violation-form . G4adb) (syntax-violation . G3052) (simple-conditions . G4f7b) (serious-condition? . G4a0c) (non-continuable-violation? . G4a94) (message-condition? . G49e0) (make-who-condition . G4a79) (make-warning . G49f5) (make-violation . G4a34) (make-undefined-violation . G4af0) (make-syntax-violation . G4ad3) (make-serious-condition . G4a0a) (make-non-continuable-violation . G4a92) (make-message-condition . G49dc) (make-lexical-violation . G4abc) (make-irritants-condition . G4a5f) (make-implementation-restriction-violation . G4aa7) (make-error . G4a1f) (make-assertion-violation . G4a49) (lexical-violation? . G4abe) (irritants-condition? . G4a63) (implementation-restriction-violation? . G4aa9) (error? . G4a21) (condition-who . G4a7f) (condition-predicate . G4f7a) (condition-message . G49e2) (condition-irritants . G4a65) (condition-accessor . G4f79) (condition . G4f78) (assertion-violation? . G4a4b) (condition? . G4f77) (&undefined . G4e1d) (&syntax . G4e1c) (&lexical . G4e1b) (&implementation-restriction . G4e1a) (&non-continuable . G4e19) (&who . G4e18) (&irritants . G4e17) (&assertion . G4e16) (&violation . G4e15) (&error . G4e14) (&serious . G4e13) (&warning . G4e12) (&message . G4e11) (&condition . G4e10) (define-condition-type . G4e0f)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50b3 '(rnrs records inspection) '(6) '() '() '() '((record? . G5024) (record-type-uid . G5023) (record-type-sealed? . G5022) (record-type-parent . G5021) (record-type-opaque? . G5020) (record-type-name . G501f) (record-type-generative? . G501e) (record-type-field-names . G501d) (record-rtd . G501c) (record-field-mutable? . G501b)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50b4 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G502b) (record-predicate . G502a) (record-mutator . G5029) (record-constructor . G5028) (record-accessor . G5027) (make-record-type-descriptor . G5026) (make-record-constructor-descriptor . G5025)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50b5 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e0d) (parent-rtd . G4e0c) (nongenerative . G4e0b) (opaque . G4e0a) (sealed . G4e09) (protocol . G4e08) (parent . G4e07) (immutable . G4e06) (mutable . G4e05) (fields . G4e04) (record-constructor-descriptor . G4de3) (record-type-descriptor . G4de2)) '() values values '#f '#f '#t '#f) (G2b7c@G2a21@install-library 'G50b6 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c30) (&no-nans-rtd . G4c2e) (&no-infinities-rcd . G4c1b) (&no-infinities-rtd . G4c19) (&i/o-encoding-rcd . G4c06) (&i/o-encoding-rtd . G4c04) (&i/o-decoding-rcd . G4bec) (&i/o-decoding-rtd . G4bea) (&i/o-port-rcd . G4bd7) (&i/o-port-rtd . G4bd5) (&i/o-file-does-not-exist-rcd . G4bbd) (&i/o-file-does-not-exist-rtd . G4bbb) (&i/o-file-already-exists-rcd . G4ba8) (&i/o-file-already-exists-rtd . G4ba6) (&i/o-file-is-read-only-rcd . G4b93) (&i/o-file-is-read-only-rtd . G4b91) (&i/o-file-protection-rcd . G4b7e) (&i/o-file-protection-rtd . G4b7c) (&i/o-filename-rcd . G4b69) (&i/o-filename-rtd . G4b67) (&i/o-invalid-position-rcd . G4b4f) (&i/o-invalid-position-rtd . G4b4d) (&i/o-write-rcd . G4b35) (&i/o-write-rtd . G4b33) (&i/o-read-rcd . G4b20) (&i/o-read-rtd . G4b1e) (&i/o-rcd . G4b0b) (&i/o-rtd . G4b09) (&undefined-rcd . G4af6) (&undefined-rtd . G4af4) (&syntax-rcd . G4ae1) (&syntax-rtd . G4adf) (&lexical-rcd . G4ac2) (&lexical-rtd . G4ac0) (&implementation-restriction-rcd . G4aad) (&implementation-restriction-rtd . G4aab) (&non-continuable-rcd . G4a98) (&non-continuable-rtd . G4a96) (&who-rcd . G4a83) (&who-rtd . G4a81) (&irritants-rcd . G4a69) (&irritants-rtd . G4a67) (&assertion-rcd . G4a4f) (&assertion-rtd . G4a4d) (&violation-rcd . G4a3a) (&violation-rtd . G4a38) (&error-rcd . G4a25) (&error-rtd . G4a23) (&serious-rcd . G4a10) (&serious-rtd . G4a0e) (&warning-rcd . G49fb) (&warning-rtd . G49f9) (&message-rcd . G49e6) (&message-rtd . G49e4) (&condition-rcd . G4989) (&condition-rtd . G4987) (syntax-error . G304c) (syntax-dispatch . G2f65) (pretty-print . G5096) (eval-core . G5095) (set-symbol-value! . G5094) (symbol-value . G5093) (gensym . G5092) (void . G5091) (load . G4d31) (interaction-environment . G305e) (char-ready? . G5090) (regexp? . G508f) (read-line . G508e) (dotted-list? . G508d) (circular-list? . G508c) (proper-list? . G508b) (circular-list . G508a) (last . G5089) (last-pair . G5088) (not-pair? . G5087) (split-at! . G5086) (split-at . G5085) (list= . G5084) (list-copy . G5083) (list-tabulate . G5082) (make-list . G5081) (xcons . G5080) (tenth . G507f) (ninth . G507e) (eighth . G507d) (seventh . G507c) (sixth . G507b) (fifth . G507a) (drop-right! . G5079) (drop-right . G5078) (take-right . G5077) (take! . G5076) (drop . G5075) (take . G5074) (car+cdr . G5073) (third . G5072) (second . G5071) (first . G5070) (iota . G506f) (every . G506e) (assoc-ref . G506d) (alist-cons . G506c) (append-map . G506b) (print . G506a) (format . G5069) (standard-library-path . G5068) (file-newer? . G5067) (stat-mtime . G5066) (current-directory . G5065) (write-to-file . G5064) (file->list . G5063) (file->string . G5062) (digit->integer . G5061) (call-with-string-input-port . G5060) (call-with-string-io . G505f) (string-split . G505e) (bytevector-for-each . G505d) (string->regexp . G505c) (rxmatch . G505b) (regexp-replace-all . G505a) (hashtable-for-each . G5059) (readdir . G5058) (get-environment-variables . G5057) (get-environment-variable . G5056) (get-timeofday . G5055) (get-command-line . G5054) (sys-display . G5053) (source-info . G5052) (make-compiler-instruction . G5051) (make-instruction . G5050) (set-source-info! . G504f) (bignum? . G504e) (make-complex . G504d) (fast-equal? . G504c) (fasl-read . G504b) (fasl-write . G504a) (receive . G5049) (make-parameter . G283b) (string-upcase . G5048) (string-titlecase . G5047) (string-normalize-nfkd . G5046) (string-normalize-nfkc . G5045) (string-normalize-nfd . G5044) (string-normalize-nfc . G5043) (string-foldcase . G5042) (string-downcase . G5041) (string-ci>? . G5040) (string-ci>=? . G503f) (string-ci=? . G503e) (string-ci<? . G503d) (string-ci<=? . G503c) (char-whitespace? . G503b) (char-upper-case? . G503a) (char-title-case? . G5039) (char-numeric? . G5038) (char-lower-case? . G5037) (char-general-category . G5036) (char-upcase . G5035) (char-titlecase . G5034) (char-foldcase . G5033) (char-downcase . G5032) (char-ci>? . G5031) (char-ci>=? . G5030) (char-ci=? . G502f) (char-ci<? . G502e) (char-ci<=? . G502d) (char-alphabetic? . G502c) (make-variable-transformer . G2da0) (identifier? . G3054) (generate-temporaries . G303e) (free-identifier=? . G3040) (syntax->datum . G3058) (datum->syntax . G3056) (bound-identifier=? . G3042) (record-type-descriptor? . G502b) (record-predicate . G502a) (record-mutator . G5029) (record-constructor . G5028) (record-accessor . G5027) (make-record-type-descriptor . G5026) (make-record-constructor-descriptor . G5025) (record? . G5024) (record-type-uid . G5023) (record-type-sealed? . G5022) (record-type-parent . G5021) (record-type-opaque? . G5020) (record-type-name . G501f) (record-type-generative? . G501e) (record-type-field-names . G501d) (record-rtd . G501c) (record-field-mutable? . G501b) (delete-file . G501a) (file-exists? . G5019) (vector-sort! . G5018) (vector-sort . G5017) (list-sort . G5016) (symbol-hash . G5015) (string-ci-hash . G5014) (string-hash . G5013) (equal-hash . G5012) (hashtable-equivalence-function . G5011) (make-hashtable . G5010) (hashtable-hash-function . G500f) (make-eqv-hashtable . G500e) (make-eq-hashtable . G500d) (hashtable? . G500c) (hashtable-update! . G500b) (hashtable-size . G500a) (hashtable-set! . G5009) (hashtable-ref . G5008) (hashtable-mutable? . G5007) (hashtable-keys . G5006) (hashtable-entries . G5005) (hashtable-delete! . G5004) (hashtable-copy . G5003) (hashtable-contains? . G5002) (hashtable-clear! . G5001) (call-with-output-file . G5000) (call-with-input-file . G4fff) (write-char . G4ffe) (write . G4ffd) (with-output-to-file . G4ffc) (with-input-from-file . G4ffb) (read-char . G4ffa) (read . G4ff9) (peek-char . G4ff8) (open-output-file . G4ff7) (open-input-file . G4ff6) (newline . G4ff5) (display . G4ff4) (close-output-port . G4ff3) (close-input-port . G4ff2) (eof-object? . G4ff1) (eof-object . G4ff0) (current-error-port . G4fef) (current-output-port . G4fee) (current-input-port . G4fed) (output-port? . G4fec) (input-port? . G4feb) (utf-8-codec . G4fea) (utf-16-codec . G4fe9) (transcoder-error-handling-mode . G4fe8) (transcoder-eol-style . G4fe7) (transcoder-codec . G4fe6) (transcoded-port . G4fe5) (textual-port? . G4fe4) (string->bytevector . G4fe3) (standard-output-port . G4fe2) (standard-input-port . G4fe1) (standard-error-port . G4fe0) (set-port-position! . G4fdf) (put-u8 . G4fde) (put-string . G4fdd) (put-datum . G4fdc) (put-char . G4fdb) (put-bytevector . G4fda) (port? . G4fd9) (port-transcoder . G4fd8) (port-position . G4fd7) (port-has-set-port-position!? . G4fd6) (port-has-port-position? . G4fd5) (port-eof? . G4fd4) (output-port-buffer-mode . G4fd3) (open-string-output-port . G4fd2) (open-string-input-port . G4fd1) (open-file-output-port . G4fd0) (open-file-input/output-port . G4fcf) (open-file-input-port . G4fce) (open-bytevector-output-port . G4fcd) (open-bytevector-input-port . G4fcc) (native-transcoder . G4fcb) (native-eol-style . G4fca) (make-transcoder . G4fc9) (latin-1-codec . G4fc8) (make-i/o-write-error . G4b2f) (make-i/o-read-error . G4b1a) (make-i/o-port-error . G4bcd) (make-i/o-invalid-position-error . G4b45) (make-i/o-filename-error . G4b5f) (make-i/o-file-protection-error . G4b78) (make-i/o-file-is-read-only-error . G4b8d) (make-i/o-file-does-not-exist-error . G4bb7) (make-i/o-file-already-exists-error . G4ba2) (make-i/o-error . G4b05) (make-i/o-encoding-error . G4bfc) (make-i/o-decoding-error . G4be6) (make-custom-textual-output-port . G4fc7) (make-custom-textual-input/output-port . G4fc6) (make-custom-textual-input-port . G4fc5) (make-custom-binary-output-port . G4fc4) (make-custom-binary-input/output-port . G4fc3) (make-custom-binary-input-port . G4fc2) (make-bytevector . G4fc1) (lookahead-u8 . G4fc0) (lookahead-char . G4fbf) (i/o-write-error? . G4b31) (i/o-read-error? . G4b1c) (i/o-port-error? . G4bd1) (i/o-invalid-position-error? . G4b49) (i/o-filename-error? . G4b63) (i/o-file-protection-error? . G4b7a) (i/o-file-is-read-only-error? . G4b8f) (i/o-file-does-not-exist-error? . G4bb9) (i/o-file-already-exists-error? . G4ba4) (i/o-error? . G4b07) (i/o-error-port . G4bd3) (i/o-error-filename . G4b65) (i/o-encoding-error? . G4c00) (i/o-encoding-error-char . G4c02) (i/o-decoding-error? . G4be8) (get-u8 . G4fbe) (get-string-n! . G4fbd) (get-string-n . G4fbc) (get-string-all . G4fbb) (get-line . G4fba) (get-datum . G4fb9) (get-char . G4fb8) (get-bytevector-some . G4fb7) (get-bytevector-n! . G4fb6) (get-bytevector-n . G4fb5) (get-bytevector-all . G4fb4) (flush-output-port . G4fb3) (close-port . G4fb2) (scheme-report-environment . G302c) (quotient . G4fb1) (null-environment . G302a) (remainder . G4fb0) (modulo . G4faf) (inexact->exact . G4fae) (force . G4fad) (exact->inexact . G4fac) (make-promise . G4fab) (exit . G4faa) (command-line . G4d2b) (string-fill! . G4fa9) (string-set! . G4fa8) (set-cdr! . G4fa7) (set-car! . G4fa6) (remove . G4fa5) (remv . G4fa4) (remp . G4fa3) (remq . G4fa2) (partition . G4fa1) (memv . G4fa0) (memq . G4f9f) (memp . G4f9e) (member . G4f9d) (exists . G4f9c) (for-all . G4f9b) (fold-right . G4f9a) (fold-left . G4f99) (find . G4f98) (filter . G4f97) (cons* . G4f96) (assv . G4f95) (assq . G4f94) (assp . G4f93) (assoc . G4f92) (call-with-string-output-port . G4f91) (call-with-port . G4f90) (call-with-bytevector-output-port . G4f8f) (bytevector->string . G4f8e) (buffer-mode? . G4f8d) (binary-port? . G4f8c) (with-exception-handler . G4f8b) (raise-continuable . G4f8a) (raise . G4f89) (eval . G3030) (environment . G3028) (make-enumeration . G4f88) (enum-set=? . G4f87) (enum-set-universe . G4f86) (enum-set-union . G4f85) (enum-set-subset? . G4f84) (enum-set-projection . G4f83) (enum-set-member? . G4f82) (enum-set-intersection . G4f81) (enum-set-indexer . G4f80) (enum-set-difference . G4f7f) (enum-set-constructor . G4f7e) (enum-set-complement . G4f7d) (enum-set->list . G4f7c) (who-condition? . G4a7d) (warning? . G49f7) (violation? . G4a36) (undefined-violation? . G4af2) (syntax-violation? . G4ad9) (syntax-violation-subform . G4add) (syntax-violation-form . G4adb) (syntax-violation . G3052) (simple-conditions . G4f7b) (serious-condition? . G4a0c) (non-continuable-violation? . G4a94) (message-condition? . G49e0) (make-who-condition . G4a79) (make-warning . G49f5) (make-violation . G4a34) (make-undefined-violation . G4af0) (make-syntax-violation . G4ad3) (make-serious-condition . G4a0a) (make-non-continuable-violation . G4a92) (make-message-condition . G49dc) (make-lexical-violation . G4abc) (make-irritants-condition . G4a5f) (make-implementation-restriction-violation . G4aa7) (make-error . G4a1f) (make-assertion-violation . G4a49) (lexical-violation? . G4abe) (irritants-condition? . G4a63) (implementation-restriction-violation? . G4aa9) (error? . G4a21) (condition-who . G4a7f) (condition-predicate . G4f7a) (condition-message . G49e2) (condition-irritants . G4a65) (condition-accessor . G4f79) (condition . G4f78) (assertion-violation? . G4a4b) (condition? . G4f77) (utf32->string . G4f76) (utf16->string . G4f75) (utf8->string . G4f74) (uint-list->bytevector . G4f73) (u8-list->bytevector . G4f72) (string->utf8 . G4f71) (string->utf32 . G4f70) (string->utf16 . G4f6f) (sint-list->bytevector . G4f6e) (native-endianness . G4f6d) (bytevector? . G4f6c) (bytevector=? . G4f6b) (bytevector-uint-set! . G4f6a) (bytevector-uint-ref . G4f69) (bytevector-u8-set! . G4f68) (bytevector-u8-ref . G4f67) (bytevector-u64-set! . G4f66) (bytevector-u64-ref . G4f65) (bytevector-u64-native-set! . G4f64) (bytevector-u64-native-ref . G4f63) (bytevector-u32-set! . G4f62) (bytevector-u32-ref . G4f61) (bytevector-u32-native-set! . G4f60) (bytevector-u32-native-ref . G4f5f) (bytevector-u16-set! . G4f5e) (bytevector-u16-ref . G4f5d) (bytevector-u16-native-set! . G4f5c) (bytevector-u16-native-ref . G4f5b) (bytevector-sint-set! . G4f5a) (bytevector-sint-ref . G4f59) (bytevector-s8-set! . G4f58) (bytevector-s8-ref . G4f57) (bytevector-s64-set! . G4f56) (bytevector-s64-ref . G4f55) (bytevector-s64-native-set! . G4f54) (bytevector-s64-native-ref . G4f53) (bytevector-s32-set! . G4f52) (bytevector-s32-ref . G4f51) (bytevector-s32-native-set! . G4f50) (bytevector-s32-native-ref . G4f4f) (bytevector-s16-set! . G4f4e) (bytevector-s16-ref . G4f4d) (bytevector-s16-native-set! . G4f4c) (bytevector-s16-native-ref . G4f4b) (bytevector-length . G4f4a) (bytevector-ieee-single-ref . G4f49) (bytevector-ieee-single-set! . G4f48) (bytevector-ieee-single-native-set! . G4f47) (bytevector-ieee-single-native-ref . G4f46) (bytevector-ieee-double-set! . G4f45) (bytevector-ieee-double-ref . G4f44) (bytevector-ieee-double-native-set! . G4f43) (bytevector-ieee-double-native-ref . G4f42) (bytevector-fill! . G4f41) (bytevector-copy! . G4f40) (bytevector-copy . G4f3f) (bytevector->uint-list . G4f3e) (bytevector->u8-list . G4f3d) (bytevector->sint-list . G4f3c) (no-nans-violation? . G4c2c) (no-infinities-violation? . G4c17) (make-no-nans-violation . G4c2a) (make-no-infinities-violation . G4c15) (real->flonum . G4f3b) (flzero? . G4f3a) (fltruncate . G4f39) (fltan . G4f38) (flsqrt . G4f37) (flsin . G4f36) (flround . G4f35) (flpositive? . G4f34) (flonum? . G4f33) (flodd? . G4f32) (flnumerator . G4f31) (flnegative? . G4f30) (flnan? . G4f2f) (flmod0 . G4f2e) (flmod . G4f2d) (flmin . G4f2c) (flmax . G4f2b) (fllog . G4f2a) (flinteger? . G4f29) (flinfinite? . G4f28) (flfloor . G4f27) (flfinite? . G4f26) (flexpt . G4f25) (flexp . G4f24) (fleven? . G4f23) (fldiv0-and-mod0 . G4f22) (fldiv0 . G4f21) (fldiv-and-mod . G4f20) (fldiv . G4f1f) (fldenominator . G4f1e) (flcos . G4f1d) (flceiling . G4f1c) (flatan . G4f1b) (flasin . G4f1a) (flacos . G4f19) (flabs . G4f18) (fl>? . G4f17) (fl>=? . G4f16) (fl=? . G4f15) (fl<? . G4f14) (fl<=? . G4f13) (fl/ . G4f12) (fl- . G4f11) (fl+ . G4f10) (fl* . G4f0f) (fixnum->flonum . G4f0e) (fxzero? . G4f0d) (fxxor . G4f0c) (fxrotate-bit-field . G4f0b) (fxreverse-bit-field . G4f0a) (fxpositive? . G4f09) (fxodd? . G4f08) (fxnot . G4f07) (fxnegative? . G4f06) (fxmod0 . G4f05) (fxmod . G4f04) (fxmin . G4f03) (fxmax . G4f02) (fxlength . G4f01) (fxior . G4f00) (fxif . G4eff) (fxfirst-bit-set . G4efe) (fxeven? . G4efd) (fxdiv0-and-mod0 . G4efc) (fxdiv0 . G4efb) (fxdiv-and-mod . G4efa) (fxdiv . G4ef9) (fxcopy-bit-field . G4ef8) (fxcopy-bit . G4ef7) (fxbit-set? . G4ef6) (fxbit-field . G4ef5) (fxbit-count . G4ef4) (fxarithmetic-shift-right . G4ef3) (fxarithmetic-shift-left . G4ef2) (fxarithmetic-shift . G4ef1) (fxand . G4ef0) (fx>? . G4eef) (fx>=? . G4eee) (fx=? . G4eed) (fx<? . G4eec) (fx<=? . G4eeb) (fx-/carry . G4eea) (fx- . G4ee9) (fx+/carry . G4ee8) (fx+ . G4ee7) (fx*/carry . G4ee6) (fx* . G4ee5) (greatest-fixnum . G4ee4) (least-fixnum . G4ee3) (fixnum-width . G4ee2) (fixnum? . G4ee1) (bitwise-rotate-bit-field . G4ee0) (bitwise-reverse-bit-field . G4edf) (bitwise-length . G4ede) (bitwise-if . G4edd) (bitwise-first-bit-set . G4edc) (bitwise-copy-bit-field . G4edb) (bitwise-copy-bit . G4eda) (bitwise-bit-set? . G4ed9) (bitwise-bit-field . G4ed8) (bitwise-bit-count . G4ed7) (bitwise-xor . G4ed6) (bitwise-ior . G4ed5) (bitwise-and . G4ed4) (bitwise-not . G4ed3) (bitwise-arithmetic-shift-right . G4ed2) (bitwise-arithmetic-shift-left . G4ed1) (bitwise-arithmetic-shift . G4ed0) (zero? . G4ecf) (vector? . G4ece) (vector-set! . G4ecd) (vector-ref . G4ecc) (vector-map . G4ecb) (vector-length . G4eca) (vector-for-each . G4ec9) (vector-fill! . G4ec8) (vector->list . G4ec7) (vector . G4ec6) (values . G4ec5) (truncate . G4ec4) (tan . G4ec3) (symbol? . G4ec2) (symbol=? . G4ec1) (symbol->string . G4ec0) (substring . G4ebf) (string? . G4ebe) (string>? . G4ebd) (string>=? . G4ebc) (string=? . G4ebb) (string<? . G4eba) (string<=? . G4eb9) (string-ref . G4eb8) (string-length . G4eb7) (string-for-each . G4eb6) (string-copy . G4eb5) (string-append . G4eb4) (string->symbol . G4eb3) (string->number . G4eb2) (string->list . G4eb1) (string . G4eb0) (sqrt . G4eaf) (sin . G4eae) (round . G4ead) (reverse . G4eac) (real? . G4eab) (real-valued? . G4eaa) (real-part . G4ea9) (rationalize . G4ea8) (rational? . G4ea7) (rational-valued? . G4ea6) (procedure? . G4ea5) (positive? . G4ea4) (pair? . G4ea3) (odd? . G4ea2) (numerator . G4ea1) (number? . G4ea0) (number->string . G4e9f) (null? . G4e9e) (not . G4e9d) (negative? . G4e9c) (nan? . G4e9b) (min . G4e9a) (max . G4e99) (map . G4e98) (make-vector . G4e97) (make-string . G4e96) (make-rectangular . G4e95) (make-polar . G4e94) (magnitude . G4e93) (log . G4e92) (list? . G4e91) (list-tail . G4e90) (list-ref . G4e8f) (list->vector . G4e8e) (list->string . G4e8d) (list . G4e8c) (length . G4e8b) (lcm . G4e8a) (integer? . G4e89) (integer-valued? . G4e88) (integer->char . G4e87) (infinite? . G4e86) (inexact? . G4e85) (inexact . G4e84) (imag-part . G4e83) (gcd . G4e82) (for-each . G4e81) (floor . G4e80) (finite? . G4e7f) (expt . G4e7e) (exp . G4e7d) (exact? . G4e7c) (exact-integer-sqrt . G4e7b) (exact . G4e7a) (even? . G4e79) (error . G4e78) (eqv? . G4e77) (equal? . G4e76) (eq? . G4e75) (dynamic-wind . G4e74) (div0-and-mod0 . G4e73) (mod0 . G4e72) (div0 . G4e71) (div-and-mod . G4e70) (mod . G4e6f) (div . G4e6e) (denominator . G4e6d) (cos . G4e6c) (cons . G4e6b) (complex? . G4e6a) (char? . G4e69) (char>? . G4e68) (char>=? . G4e67) (char=? . G4e66) (char<? . G4e65) (char<=? . G4e64) (char->integer . G4e63) (ceiling . G4e62) (call-with-values . G4e61) (call/cc . G4e60) (call-with-current-continuation . G4e5f) (cddddr . G4e5e) (cdddar . G4e5d) (cddadr . G4e5c) (cddaar . G4e5b) (cdaddr . G4e5a) (cdadar . G4e59) (cdaadr . G4e58) (cdaaar . G4e57) (cadddr . G4e56) (caddar . G4e55) (cadadr . G4e54) (cadaar . G4e53) (caaddr . G4e52) (caadar . G4e51) (caaadr . G4e50) (caaaar . G4e4f) (cdddr . G4e4e) (cddar . G4e4d) (cdadr . G4e4c) (cdaar . G4e4b) (caddr . G4e4a) (cadar . G4e49) (caadr . G4e48) (caaar . G4e47) (cddr . G4e46) (cdar . G4e45) (cadr . G4e44) (caar . G4e43) (cdr . G4e42) (car . G4e41) (boolean? . G4e40) (boolean=? . G4e3f) (atan . G4e3e) (assertion-violation . G4e3d) (asin . G4e3c) (apply . G4e3b) (append . G4e3a) (angle . G4e39) (acos . G4e38) (abs . G4e37) (/ . G4e36) (* . G4e35) (- . G4e34) (+ . G4e33) (>= . G4e32) (> . G4e31) (= . G4e30) (<= . G4e2f) (< . G4e2e) (library . G4e2d) (export . G4e2c) (&no-nans . G4e2b) (&no-infinities . G4e2a) (&i/o-encoding . G4e29) (&i/o-decoding . G4e28) (&i/o-port . G4e27) (&i/o-file-does-not-exist . G4e26) (&i/o-file-already-exists . G4e25) (&i/o-file-is-read-only . G4e24) (&i/o-file-protection . G4e23) (&i/o-filename . G4e22) (&i/o-invalid-position . G4e21) (&i/o-write . G4e20) (&i/o-read . G4e1f) (&i/o . G4e1e) (&undefined . G4e1d) (&syntax . G4e1c) (&lexical . G4e1b) (&implementation-restriction . G4e1a) (&non-continuable . G4e19) (&who . G4e18) (&irritants . G4e17) (&assertion . G4e16) (&violation . G4e15) (&error . G4e14) (&serious . G4e13) (&warning . G4e12) (&message . G4e11) (&condition . G4e10) (define-condition-type . G4e0f) (define-enumeration . G4e0e) (define-record-type . G4e0d) (parent-rtd . G4e0c) (nongenerative . G4e0b) (opaque . G4e0a) (sealed . G4e09) (protocol . G4e08) (parent . G4e07) (immutable . G4e06) (mutable . G4e05) (fields . G4e04) (error-handling-mode . G4e03) (file-options . G4e02) (buffer-mode . G4e01) (eol-style . G4e00) (guard . G4dff) (trace-define . G4dfe) (trace-lambda . G4dfd) (unsyntax-splicing . G4dfc) (unsyntax . G4dfb) (unquote-splicing . G4dfa) (unquote . G4df9) (_ . G4df8) (else . G4df7) (=> . G4df6) (... . G4df5) (assert . G4df4) (endianness . G4df3) (delay . G4df2) (time . G4df1) (do . G4df0) (cond . G4def) (let* . G4dee) (let . G4ded) (let*-values . G4dec) (let-values . G4deb) (identifier-syntax . G4dea) (with-syntax . G4de9) (quasisyntax . G4de8) (quasiquote . G4de7) (syntax-rules . G4de6) (include . G4de5) (define-struct . G4de4) (record-constructor-descriptor . G4de3) (record-type-descriptor . G4de2) (case . G4de1) (parameterize . G4de0) (unless . G4ddf) (when . G4dde) (or . G4ddd) (and . G4ddc) (if . G4ddb) (letrec* . G4dda) (letrec . G4dd9) (type-descriptor . G4dd8) (case-lambda . G4dd7) (lambda . G4dd6) (syntax . G4dd5) (syntax-case . G4dd4) (quote . G4dd3) (foreign-call . G4dd2) (letrec-syntax . G4dd1) (let-syntax . G4dd0) (set! . G4dcf) (import . G4dce) (begin . G4dcd) (module . G4dcc) (define-syntax . G4dcb) (define . G4dca)) '((G4c30 core-prim . &no-nans-rcd) (G4c2e core-prim . &no-nans-rtd) (G4c1b core-prim . &no-infinities-rcd) (G4c19 core-prim . &no-infinities-rtd) (G4c06 core-prim . &i/o-encoding-rcd) (G4c04 core-prim . &i/o-encoding-rtd) (G4bec core-prim . &i/o-decoding-rcd) (G4bea core-prim . &i/o-decoding-rtd) (G4bd7 core-prim . &i/o-port-rcd) (G4bd5 core-prim . &i/o-port-rtd) (G4bbd core-prim . &i/o-file-does-not-exist-rcd) (G4bbb core-prim . &i/o-file-does-not-exist-rtd) (G4ba8 core-prim . &i/o-file-already-exists-rcd) (G4ba6 core-prim . &i/o-file-already-exists-rtd) (G4b93 core-prim . &i/o-file-is-read-only-rcd) (G4b91 core-prim . &i/o-file-is-read-only-rtd) (G4b7e core-prim . &i/o-file-protection-rcd) (G4b7c core-prim . &i/o-file-protection-rtd) (G4b69 core-prim . &i/o-filename-rcd) (G4b67 core-prim . &i/o-filename-rtd) (G4b4f core-prim . &i/o-invalid-position-rcd) (G4b4d core-prim . &i/o-invalid-position-rtd) (G4b35 core-prim . &i/o-write-rcd) (G4b33 core-prim . &i/o-write-rtd) (G4b20 core-prim . &i/o-read-rcd) (G4b1e core-prim . &i/o-read-rtd) (G4b0b core-prim . &i/o-rcd) (G4b09 core-prim . &i/o-rtd) (G4af6 core-prim . &undefined-rcd) (G4af4 core-prim . &undefined-rtd) (G4ae1 core-prim . &syntax-rcd) (G4adf core-prim . &syntax-rtd) (G4ac2 core-prim . &lexical-rcd) (G4ac0 core-prim . &lexical-rtd) (G4aad core-prim . &implementation-restriction-rcd) (G4aab core-prim . &implementation-restriction-rtd) (G4a98 core-prim . &non-continuable-rcd) (G4a96 core-prim . &non-continuable-rtd) (G4a83 core-prim . &who-rcd) (G4a81 core-prim . &who-rtd) (G4a69 core-prim . &irritants-rcd) (G4a67 core-prim . &irritants-rtd) (G4a4f core-prim . &assertion-rcd) (G4a4d core-prim . &assertion-rtd) (G4a3a core-prim . &violation-rcd) (G4a38 core-prim . &violation-rtd) (G4a25 core-prim . &error-rcd) (G4a23 core-prim . &error-rtd) (G4a10 core-prim . &serious-rcd) (G4a0e core-prim . &serious-rtd) (G49fb core-prim . &warning-rcd) (G49f9 core-prim . &warning-rtd) (G49e6 core-prim . &message-rcd) (G49e4 core-prim . &message-rtd) (G4989 core-prim . &condition-rcd) (G4987 core-prim . &condition-rtd) (G304c core-prim . syntax-error) (G2f65 core-prim . syntax-dispatch) (G5096 core-prim . pretty-print) (G5095 core-prim . eval-core) (G5094 core-prim . set-symbol-value!) (G5093 core-prim . symbol-value) (G5092 core-prim . gensym) (G5091 core-prim . void) (G4d31 core-prim . load) (G305e core-prim . interaction-environment) (G5090 core-prim . char-ready?) (G508f core-prim . regexp?) (G508e core-prim . read-line) (G508d core-prim . dotted-list?) (G508c core-prim . circular-list?) (G508b core-prim . proper-list?) (G508a core-prim . circular-list) (G5089 core-prim . last) (G5088 core-prim . last-pair) (G5087 core-prim . not-pair?) (G5086 core-prim . split-at!) (G5085 core-prim . split-at) (G5084 core-prim . list=) (G5083 core-prim . list-copy) (G5082 core-prim . list-tabulate) (G5081 core-prim . make-list) (G5080 core-prim . xcons) (G507f core-prim . tenth) (G507e core-prim . ninth) (G507d core-prim . eighth) (G507c core-prim . seventh) (G507b core-prim . sixth) (G507a core-prim . fifth) (G5079 core-prim . drop-right!) (G5078 core-prim . drop-right) (G5077 core-prim . take-right) (G5076 core-prim . take!) (G5075 core-prim . drop) (G5074 core-prim . take) (G5073 core-prim . car+cdr) (G5072 core-prim . third) (G5071 core-prim . second) (G5070 core-prim . first) (G506f core-prim . iota) (G506e core-prim . every) (G506d core-prim . assoc-ref) (G506c core-prim . alist-cons) (G506b core-prim . append-map) (G506a core-prim . print) (G5069 core-prim . format) (G5068 core-prim . standard-library-path) (G5067 core-prim . file-newer?) (G5066 core-prim . stat-mtime) (G5065 core-prim . current-directory) (G5064 core-prim . write-to-file) (G5063 core-prim . file->list) (G5062 core-prim . file->string) (G5061 core-prim . digit->integer) (G5060 core-prim . call-with-string-input-port) (G505f core-prim . call-with-string-io) (G505e core-prim . string-split) (G505d core-prim . bytevector-for-each) (G505c core-prim . string->regexp) (G505b core-prim . rxmatch) (G505a core-prim . regexp-replace-all) (G5059 core-prim . hashtable-for-each) (G5058 core-prim . readdir) (G5057 core-prim . get-environment-variables) (G5056 core-prim . get-environment-variable) (G5055 core-prim . get-timeofday) (G5054 core-prim . get-command-line) (G5053 core-prim . sys-display) (G5052 core-prim . source-info) (G5051 core-prim . make-compiler-instruction) (G5050 core-prim . make-instruction) (G504f core-prim . set-source-info!) (G504e core-prim . bignum?) (G504d core-prim . make-complex) (G504c core-prim . fast-equal?) (G504b core-prim . fasl-read) (G504a core-prim . fasl-write) (G5049 core-prim . receive) (G283b core-prim . make-parameter) (G5048 core-prim . string-upcase) (G5047 core-prim . string-titlecase) (G5046 core-prim . string-normalize-nfkd) (G5045 core-prim . string-normalize-nfkc) (G5044 core-prim . string-normalize-nfd) (G5043 core-prim . string-normalize-nfc) (G5042 core-prim . string-foldcase) (G5041 core-prim . string-downcase) (G5040 core-prim . string-ci>?) (G503f core-prim . string-ci>=?) (G503e core-prim . string-ci=?) (G503d core-prim . string-ci<?) (G503c core-prim . string-ci<=?) (G503b core-prim . char-whitespace?) (G503a core-prim . char-upper-case?) (G5039 core-prim . char-title-case?) (G5038 core-prim . char-numeric?) (G5037 core-prim . char-lower-case?) (G5036 core-prim . char-general-category) (G5035 core-prim . char-upcase) (G5034 core-prim . char-titlecase) (G5033 core-prim . char-foldcase) (G5032 core-prim . char-downcase) (G5031 core-prim . char-ci>?) (G5030 core-prim . char-ci>=?) (G502f core-prim . char-ci=?) (G502e core-prim . char-ci<?) (G502d core-prim . char-ci<=?) (G502c core-prim . char-alphabetic?) (G2da0 core-prim . make-variable-transformer) (G3054 core-prim . identifier?) (G303e core-prim . generate-temporaries) (G3040 core-prim . free-identifier=?) (G3058 core-prim . syntax->datum) (G3056 core-prim . datum->syntax) (G3042 core-prim . bound-identifier=?) (G502b core-prim . record-type-descriptor?) (G502a core-prim . record-predicate) (G5029 core-prim . record-mutator) (G5028 core-prim . record-constructor) (G5027 core-prim . record-accessor) (G5026 core-prim . make-record-type-descriptor) (G5025 core-prim . make-record-constructor-descriptor) (G5024 core-prim . record?) (G5023 core-prim . record-type-uid) (G5022 core-prim . record-type-sealed?) (G5021 core-prim . record-type-parent) (G5020 core-prim . record-type-opaque?) (G501f core-prim . record-type-name) (G501e core-prim . record-type-generative?) (G501d core-prim . record-type-field-names) (G501c core-prim . record-rtd) (G501b core-prim . record-field-mutable?) (G501a core-prim . delete-file) (G5019 core-prim . file-exists?) (G5018 core-prim . vector-sort!) (G5017 core-prim . vector-sort) (G5016 core-prim . list-sort) (G5015 core-prim . symbol-hash) (G5014 core-prim . string-ci-hash) (G5013 core-prim . string-hash) (G5012 core-prim . equal-hash) (G5011 core-prim . hashtable-equivalence-function) (G5010 core-prim . make-hashtable) (G500f core-prim . hashtable-hash-function) (G500e core-prim . make-eqv-hashtable) (G500d core-prim . make-eq-hashtable) (G500c core-prim . hashtable?) (G500b core-prim . hashtable-update!) (G500a core-prim . hashtable-size) (G5009 core-prim . hashtable-set!) (G5008 core-prim . hashtable-ref) (G5007 core-prim . hashtable-mutable?) (G5006 core-prim . hashtable-keys) (G5005 core-prim . hashtable-entries) (G5004 core-prim . hashtable-delete!) (G5003 core-prim . hashtable-copy) (G5002 core-prim . hashtable-contains?) (G5001 core-prim . hashtable-clear!) (G5000 core-prim . call-with-output-file) (G4fff core-prim . call-with-input-file) (G4ffe core-prim . write-char) (G4ffd core-prim . write) (G4ffc core-prim . with-output-to-file) (G4ffb core-prim . with-input-from-file) (G4ffa core-prim . read-char) (G4ff9 core-prim . read) (G4ff8 core-prim . peek-char) (G4ff7 core-prim . open-output-file) (G4ff6 core-prim . open-input-file) (G4ff5 core-prim . newline) (G4ff4 core-prim . display) (G4ff3 core-prim . close-output-port) (G4ff2 core-prim . close-input-port) (G4ff1 core-prim . eof-object?) (G4ff0 core-prim . eof-object) (G4fef core-prim . current-error-port) (G4fee core-prim . current-output-port) (G4fed core-prim . current-input-port) (G4fec core-prim . output-port?) (G4feb core-prim . input-port?) (G4fea core-prim . utf-8-codec) (G4fe9 core-prim . utf-16-codec) (G4fe8 core-prim . transcoder-error-handling-mode) (G4fe7 core-prim . transcoder-eol-style) (G4fe6 core-prim . transcoder-codec) (G4fe5 core-prim . transcoded-port) (G4fe4 core-prim . textual-port?) (G4fe3 core-prim . string->bytevector) (G4fe2 core-prim . standard-output-port) (G4fe1 core-prim . standard-input-port) (G4fe0 core-prim . standard-error-port) (G4fdf core-prim . set-port-position!) (G4fde core-prim . put-u8) (G4fdd core-prim . put-string) (G4fdc core-prim . put-datum) (G4fdb core-prim . put-char) (G4fda core-prim . put-bytevector) (G4fd9 core-prim . port?) (G4fd8 core-prim . port-transcoder) (G4fd7 core-prim . port-position) (G4fd6 core-prim . port-has-set-port-position!?) (G4fd5 core-prim . port-has-port-position?) (G4fd4 core-prim . port-eof?) (G4fd3 core-prim . output-port-buffer-mode) (G4fd2 core-prim . open-string-output-port) (G4fd1 core-prim . open-string-input-port) (G4fd0 core-prim . open-file-output-port) (G4fcf core-prim . open-file-input/output-port) (G4fce core-prim . open-file-input-port) (G4fcd core-prim . open-bytevector-output-port) (G4fcc core-prim . open-bytevector-input-port) (G4fcb core-prim . native-transcoder) (G4fca core-prim . native-eol-style) (G4fc9 core-prim . make-transcoder) (G4fc8 core-prim . latin-1-codec) (G4b2f core-prim . make-i/o-write-error) (G4b1a core-prim . make-i/o-read-error) (G4bcd core-prim . make-i/o-port-error) (G4b45 core-prim . make-i/o-invalid-position-error) (G4b5f core-prim . make-i/o-filename-error) (G4b78 core-prim . make-i/o-file-protection-error) (G4b8d core-prim . make-i/o-file-is-read-only-error) (G4bb7 core-prim . make-i/o-file-does-not-exist-error) (G4ba2 core-prim . make-i/o-file-already-exists-error) (G4b05 core-prim . make-i/o-error) (G4bfc core-prim . make-i/o-encoding-error) (G4be6 core-prim . make-i/o-decoding-error) (G4fc7 core-prim . make-custom-textual-output-port) (G4fc6 core-prim . make-custom-textual-input/output-port) (G4fc5 core-prim . make-custom-textual-input-port) (G4fc4 core-prim . make-custom-binary-output-port) (G4fc3 core-prim . make-custom-binary-input/output-port) (G4fc2 core-prim . make-custom-binary-input-port) (G4fc1 core-prim . make-bytevector) (G4fc0 core-prim . lookahead-u8) (G4fbf core-prim . lookahead-char) (G4b31 core-prim . i/o-write-error?) (G4b1c core-prim . i/o-read-error?) (G4bd1 core-prim . i/o-port-error?) (G4b49 core-prim . i/o-invalid-position-error?) (G4b63 core-prim . i/o-filename-error?) (G4b7a core-prim . i/o-file-protection-error?) (G4b8f core-prim . i/o-file-is-read-only-error?) (G4bb9 core-prim . i/o-file-does-not-exist-error?) (G4ba4 core-prim . i/o-file-already-exists-error?) (G4b07 core-prim . i/o-error?) (G4bd3 core-prim . i/o-error-port) (G4b65 core-prim . i/o-error-filename) (G4c00 core-prim . i/o-encoding-error?) (G4c02 core-prim . i/o-encoding-error-char) (G4be8 core-prim . i/o-decoding-error?) (G4fbe core-prim . get-u8) (G4fbd core-prim . get-string-n!) (G4fbc core-prim . get-string-n) (G4fbb core-prim . get-string-all) (G4fba core-prim . get-line) (G4fb9 core-prim . get-datum) (G4fb8 core-prim . get-char) (G4fb7 core-prim . get-bytevector-some) (G4fb6 core-prim . get-bytevector-n!) (G4fb5 core-prim . get-bytevector-n) (G4fb4 core-prim . get-bytevector-all) (G4fb3 core-prim . flush-output-port) (G4fb2 core-prim . close-port) (G302c core-prim . scheme-report-environment) (G4fb1 core-prim . quotient) (G302a core-prim . null-environment) (G4fb0 core-prim . remainder) (G4faf core-prim . modulo) (G4fae core-prim . inexact->exact) (G4fad core-prim . force) (G4fac core-prim . exact->inexact) (G4fab core-prim . make-promise) (G4faa core-prim . exit) (G4d2b core-prim . command-line) (G4fa9 core-prim . string-fill!) (G4fa8 core-prim . string-set!) (G4fa7 core-prim . set-cdr!) (G4fa6 core-prim . set-car!) (G4fa5 core-prim . remove) (G4fa4 core-prim . remv) (G4fa3 core-prim . remp) (G4fa2 core-prim . remq) (G4fa1 core-prim . partition) (G4fa0 core-prim . memv) (G4f9f core-prim . memq) (G4f9e core-prim . memp) (G4f9d core-prim . member) (G4f9c core-prim . exists) (G4f9b core-prim . for-all) (G4f9a core-prim . fold-right) (G4f99 core-prim . fold-left) (G4f98 core-prim . find) (G4f97 core-prim . filter) (G4f96 core-prim . cons*) (G4f95 core-prim . assv) (G4f94 core-prim . assq) (G4f93 core-prim . assp) (G4f92 core-prim . assoc) (G4f91 core-prim . call-with-string-output-port) (G4f90 core-prim . call-with-port) (G4f8f core-prim . call-with-bytevector-output-port) (G4f8e core-prim . bytevector->string) (G4f8d core-prim . buffer-mode?) (G4f8c core-prim . binary-port?) (G4f8b core-prim . with-exception-handler) (G4f8a core-prim . raise-continuable) (G4f89 core-prim . raise) (G3030 core-prim . eval) (G3028 core-prim . environment) (G4f88 core-prim . make-enumeration) (G4f87 core-prim . enum-set=?) (G4f86 core-prim . enum-set-universe) (G4f85 core-prim . enum-set-union) (G4f84 core-prim . enum-set-subset?) (G4f83 core-prim . enum-set-projection) (G4f82 core-prim . enum-set-member?) (G4f81 core-prim . enum-set-intersection) (G4f80 core-prim . enum-set-indexer) (G4f7f core-prim . enum-set-difference) (G4f7e core-prim . enum-set-constructor) (G4f7d core-prim . enum-set-complement) (G4f7c core-prim . enum-set->list) (G4a7d core-prim . who-condition?) (G49f7 core-prim . warning?) (G4a36 core-prim . violation?) (G4af2 core-prim . undefined-violation?) (G4ad9 core-prim . syntax-violation?) (G4add core-prim . syntax-violation-subform) (G4adb core-prim . syntax-violation-form) (G3052 core-prim . syntax-violation) (G4f7b core-prim . simple-conditions) (G4a0c core-prim . serious-condition?) (G4a94 core-prim . non-continuable-violation?) (G49e0 core-prim . message-condition?) (G4a79 core-prim . make-who-condition) (G49f5 core-prim . make-warning) (G4a34 core-prim . make-violation) (G4af0 core-prim . make-undefined-violation) (G4ad3 core-prim . make-syntax-violation) (G4a0a core-prim . make-serious-condition) (G4a92 core-prim . make-non-continuable-violation) (G49dc core-prim . make-message-condition) (G4abc core-prim . make-lexical-violation) (G4a5f core-prim . make-irritants-condition) (G4aa7 core-prim . make-implementation-restriction-violation) (G4a1f core-prim . make-error) (G4a49 core-prim . make-assertion-violation) (G4abe core-prim . lexical-violation?) (G4a63 core-prim . irritants-condition?) (G4aa9 core-prim . implementation-restriction-violation?) (G4a21 core-prim . error?) (G4a7f core-prim . condition-who) (G4f7a core-prim . condition-predicate) (G49e2 core-prim . condition-message) (G4a65 core-prim . condition-irritants) (G4f79 core-prim . condition-accessor) (G4f78 core-prim . condition) (G4a4b core-prim . assertion-violation?) (G4f77 core-prim . condition?) (G4f76 core-prim . utf32->string) (G4f75 core-prim . utf16->string) (G4f74 core-prim . utf8->string) (G4f73 core-prim . uint-list->bytevector) (G4f72 core-prim . u8-list->bytevector) (G4f71 core-prim . string->utf8) (G4f70 core-prim . string->utf32) (G4f6f core-prim . string->utf16) (G4f6e core-prim . sint-list->bytevector) (G4f6d core-prim . native-endianness) (G4f6c core-prim . bytevector?) (G4f6b core-prim . bytevector=?) (G4f6a core-prim . bytevector-uint-set!) (G4f69 core-prim . bytevector-uint-ref) (G4f68 core-prim . bytevector-u8-set!) (G4f67 core-prim . bytevector-u8-ref) (G4f66 core-prim . bytevector-u64-set!) (G4f65 core-prim . bytevector-u64-ref) (G4f64 core-prim . bytevector-u64-native-set!) (G4f63 core-prim . bytevector-u64-native-ref) (G4f62 core-prim . bytevector-u32-set!) (G4f61 core-prim . bytevector-u32-ref) (G4f60 core-prim . bytevector-u32-native-set!) (G4f5f core-prim . bytevector-u32-native-ref) (G4f5e core-prim . bytevector-u16-set!) (G4f5d core-prim . bytevector-u16-ref) (G4f5c core-prim . bytevector-u16-native-set!) (G4f5b core-prim . bytevector-u16-native-ref) (G4f5a core-prim . bytevector-sint-set!) (G4f59 core-prim . bytevector-sint-ref) (G4f58 core-prim . bytevector-s8-set!) (G4f57 core-prim . bytevector-s8-ref) (G4f56 core-prim . bytevector-s64-set!) (G4f55 core-prim . bytevector-s64-ref) (G4f54 core-prim . bytevector-s64-native-set!) (G4f53 core-prim . bytevector-s64-native-ref) (G4f52 core-prim . bytevector-s32-set!) (G4f51 core-prim . bytevector-s32-ref) (G4f50 core-prim . bytevector-s32-native-set!) (G4f4f core-prim . bytevector-s32-native-ref) (G4f4e core-prim . bytevector-s16-set!) (G4f4d core-prim . bytevector-s16-ref) (G4f4c core-prim . bytevector-s16-native-set!) (G4f4b core-prim . bytevector-s16-native-ref) (G4f4a core-prim . bytevector-length) (G4f49 core-prim . bytevector-ieee-single-ref) (G4f48 core-prim . bytevector-ieee-single-set!) (G4f47 core-prim . bytevector-ieee-single-native-set!) (G4f46 core-prim . bytevector-ieee-single-native-ref) (G4f45 core-prim . bytevector-ieee-double-set!) (G4f44 core-prim . bytevector-ieee-double-ref) (G4f43 core-prim . bytevector-ieee-double-native-set!) (G4f42 core-prim . bytevector-ieee-double-native-ref) (G4f41 core-prim . bytevector-fill!) (G4f40 core-prim . bytevector-copy!) (G4f3f core-prim . bytevector-copy) (G4f3e core-prim . bytevector->uint-list) (G4f3d core-prim . bytevector->u8-list) (G4f3c core-prim . bytevector->sint-list) (G4c2c core-prim . no-nans-violation?) (G4c17 core-prim . no-infinities-violation?) (G4c2a core-prim . make-no-nans-violation) (G4c15 core-prim . make-no-infinities-violation) (G4f3b core-prim . real->flonum) (G4f3a core-prim . flzero?) (G4f39 core-prim . fltruncate) (G4f38 core-prim . fltan) (G4f37 core-prim . flsqrt) (G4f36 core-prim . flsin) (G4f35 core-prim . flround) (G4f34 core-prim . flpositive?) (G4f33 core-prim . flonum?) (G4f32 core-prim . flodd?) (G4f31 core-prim . flnumerator) (G4f30 core-prim . flnegative?) (G4f2f core-prim . flnan?) (G4f2e core-prim . flmod0) (G4f2d core-prim . flmod) (G4f2c core-prim . flmin) (G4f2b core-prim . flmax) (G4f2a core-prim . fllog) (G4f29 core-prim . flinteger?) (G4f28 core-prim . flinfinite?) (G4f27 core-prim . flfloor) (G4f26 core-prim . flfinite?) (G4f25 core-prim . flexpt) (G4f24 core-prim . flexp) (G4f23 core-prim . fleven?) (G4f22 core-prim . fldiv0-and-mod0) (G4f21 core-prim . fldiv0) (G4f20 core-prim . fldiv-and-mod) (G4f1f core-prim . fldiv) (G4f1e core-prim . fldenominator) (G4f1d core-prim . flcos) (G4f1c core-prim . flceiling) (G4f1b core-prim . flatan) (G4f1a core-prim . flasin) (G4f19 core-prim . flacos) (G4f18 core-prim . flabs) (G4f17 core-prim . fl>?) (G4f16 core-prim . fl>=?) (G4f15 core-prim . fl=?) (G4f14 core-prim . fl<?) (G4f13 core-prim . fl<=?) (G4f12 core-prim . fl/) (G4f11 core-prim . fl-) (G4f10 core-prim . fl+) (G4f0f core-prim . fl*) (G4f0e core-prim . fixnum->flonum) (G4f0d core-prim . fxzero?) (G4f0c core-prim . fxxor) (G4f0b core-prim . fxrotate-bit-field) (G4f0a core-prim . fxreverse-bit-field) (G4f09 core-prim . fxpositive?) (G4f08 core-prim . fxodd?) (G4f07 core-prim . fxnot) (G4f06 core-prim . fxnegative?) (G4f05 core-prim . fxmod0) (G4f04 core-prim . fxmod) (G4f03 core-prim . fxmin) (G4f02 core-prim . fxmax) (G4f01 core-prim . fxlength) (G4f00 core-prim . fxior) (G4eff core-prim . fxif) (G4efe core-prim . fxfirst-bit-set) (G4efd core-prim . fxeven?) (G4efc core-prim . fxdiv0-and-mod0) (G4efb core-prim . fxdiv0) (G4efa core-prim . fxdiv-and-mod) (G4ef9 core-prim . fxdiv) (G4ef8 core-prim . fxcopy-bit-field) (G4ef7 core-prim . fxcopy-bit) (G4ef6 core-prim . fxbit-set?) (G4ef5 core-prim . fxbit-field) (G4ef4 core-prim . fxbit-count) (G4ef3 core-prim . fxarithmetic-shift-right) (G4ef2 core-prim . fxarithmetic-shift-left) (G4ef1 core-prim . fxarithmetic-shift) (G4ef0 core-prim . fxand) (G4eef core-prim . fx>?) (G4eee core-prim . fx>=?) (G4eed core-prim . fx=?) (G4eec core-prim . fx<?) (G4eeb core-prim . fx<=?) (G4eea core-prim . fx-/carry) (G4ee9 core-prim . fx-) (G4ee8 core-prim . fx+/carry) (G4ee7 core-prim . fx+) (G4ee6 core-prim . fx*/carry) (G4ee5 core-prim . fx*) (G4ee4 core-prim . greatest-fixnum) (G4ee3 core-prim . least-fixnum) (G4ee2 core-prim . fixnum-width) (G4ee1 core-prim . fixnum?) (G4ee0 core-prim . bitwise-rotate-bit-field) (G4edf core-prim . bitwise-reverse-bit-field) (G4ede core-prim . bitwise-length) (G4edd core-prim . bitwise-if) (G4edc core-prim . bitwise-first-bit-set) (G4edb core-prim . bitwise-copy-bit-field) (G4eda core-prim . bitwise-copy-bit) (G4ed9 core-prim . bitwise-bit-set?) (G4ed8 core-prim . bitwise-bit-field) (G4ed7 core-prim . bitwise-bit-count) (G4ed6 core-prim . bitwise-xor) (G4ed5 core-prim . bitwise-ior) (G4ed4 core-prim . bitwise-and) (G4ed3 core-prim . bitwise-not) (G4ed2 core-prim . bitwise-arithmetic-shift-right) (G4ed1 core-prim . bitwise-arithmetic-shift-left) (G4ed0 core-prim . bitwise-arithmetic-shift) (G4ecf core-prim . zero?) (G4ece core-prim . vector?) (G4ecd core-prim . vector-set!) (G4ecc core-prim . vector-ref) (G4ecb core-prim . vector-map) (G4eca core-prim . vector-length) (G4ec9 core-prim . vector-for-each) (G4ec8 core-prim . vector-fill!) (G4ec7 core-prim . vector->list) (G4ec6 core-prim . vector) (G4ec5 core-prim . values) (G4ec4 core-prim . truncate) (G4ec3 core-prim . tan) (G4ec2 core-prim . symbol?) (G4ec1 core-prim . symbol=?) (G4ec0 core-prim . symbol->string) (G4ebf core-prim . substring) (G4ebe core-prim . string?) (G4ebd core-prim . string>?) (G4ebc core-prim . string>=?) (G4ebb core-prim . string=?) (G4eba core-prim . string<?) (G4eb9 core-prim . string<=?) (G4eb8 core-prim . string-ref) (G4eb7 core-prim . string-length) (G4eb6 core-prim . string-for-each) (G4eb5 core-prim . string-copy) (G4eb4 core-prim . string-append) (G4eb3 core-prim . string->symbol) (G4eb2 core-prim . string->number) (G4eb1 core-prim . string->list) (G4eb0 core-prim . string) (G4eaf core-prim . sqrt) (G4eae core-prim . sin) (G4ead core-prim . round) (G4eac core-prim . reverse) (G4eab core-prim . real?) (G4eaa core-prim . real-valued?) (G4ea9 core-prim . real-part) (G4ea8 core-prim . rationalize) (G4ea7 core-prim . rational?) (G4ea6 core-prim . rational-valued?) (G4ea5 core-prim . procedure?) (G4ea4 core-prim . positive?) (G4ea3 core-prim . pair?) (G4ea2 core-prim . odd?) (G4ea1 core-prim . numerator) (G4ea0 core-prim . number?) (G4e9f core-prim . number->string) (G4e9e core-prim . null?) (G4e9d core-prim . not) (G4e9c core-prim . negative?) (G4e9b core-prim . nan?) (G4e9a core-prim . min) (G4e99 core-prim . max) (G4e98 core-prim . map) (G4e97 core-prim . make-vector) (G4e96 core-prim . make-string) (G4e95 core-prim . make-rectangular) (G4e94 core-prim . make-polar) (G4e93 core-prim . magnitude) (G4e92 core-prim . log) (G4e91 core-prim . list?) (G4e90 core-prim . list-tail) (G4e8f core-prim . list-ref) (G4e8e core-prim . list->vector) (G4e8d core-prim . list->string) (G4e8c core-prim . list) (G4e8b core-prim . length) (G4e8a core-prim . lcm) (G4e89 core-prim . integer?) (G4e88 core-prim . integer-valued?) (G4e87 core-prim . integer->char) (G4e86 core-prim . infinite?) (G4e85 core-prim . inexact?) (G4e84 core-prim . inexact) (G4e83 core-prim . imag-part) (G4e82 core-prim . gcd) (G4e81 core-prim . for-each) (G4e80 core-prim . floor) (G4e7f core-prim . finite?) (G4e7e core-prim . expt) (G4e7d core-prim . exp) (G4e7c core-prim . exact?) (G4e7b core-prim . exact-integer-sqrt) (G4e7a core-prim . exact) (G4e79 core-prim . even?) (G4e78 core-prim . error) (G4e77 core-prim . eqv?) (G4e76 core-prim . equal?) (G4e75 core-prim . eq?) (G4e74 core-prim . dynamic-wind) (G4e73 core-prim . div0-and-mod0) (G4e72 core-prim . mod0) (G4e71 core-prim . div0) (G4e70 core-prim . div-and-mod) (G4e6f core-prim . mod) (G4e6e core-prim . div) (G4e6d core-prim . denominator) (G4e6c core-prim . cos) (G4e6b core-prim . cons) (G4e6a core-prim . complex?) (G4e69 core-prim . char?) (G4e68 core-prim . char>?) (G4e67 core-prim . char>=?) (G4e66 core-prim . char=?) (G4e65 core-prim . char<?) (G4e64 core-prim . char<=?) (G4e63 core-prim . char->integer) (G4e62 core-prim . ceiling) (G4e61 core-prim . call-with-values) (G4e60 core-prim . call/cc) (G4e5f core-prim . call-with-current-continuation) (G4e5e core-prim . cddddr) (G4e5d core-prim . cdddar) (G4e5c core-prim . cddadr) (G4e5b core-prim . cddaar) (G4e5a core-prim . cdaddr) (G4e59 core-prim . cdadar) (G4e58 core-prim . cdaadr) (G4e57 core-prim . cdaaar) (G4e56 core-prim . cadddr) (G4e55 core-prim . caddar) (G4e54 core-prim . cadadr) (G4e53 core-prim . cadaar) (G4e52 core-prim . caaddr) (G4e51 core-prim . caadar) (G4e50 core-prim . caaadr) (G4e4f core-prim . caaaar) (G4e4e core-prim . cdddr) (G4e4d core-prim . cddar) (G4e4c core-prim . cdadr) (G4e4b core-prim . cdaar) (G4e4a core-prim . caddr) (G4e49 core-prim . cadar) (G4e48 core-prim . caadr) (G4e47 core-prim . caaar) (G4e46 core-prim . cddr) (G4e45 core-prim . cdar) (G4e44 core-prim . cadr) (G4e43 core-prim . caar) (G4e42 core-prim . cdr) (G4e41 core-prim . car) (G4e40 core-prim . boolean?) (G4e3f core-prim . boolean=?) (G4e3e core-prim . atan) (G4e3d core-prim . assertion-violation) (G4e3c core-prim . asin) (G4e3b core-prim . apply) (G4e3a core-prim . append) (G4e39 core-prim . angle) (G4e38 core-prim . acos) (G4e37 core-prim . abs) (G4e36 core-prim . /) (G4e35 core-prim . *) (G4e34 core-prim . -) (G4e33 core-prim . +) (G4e32 core-prim . >=) (G4e31 core-prim . >) (G4e30 core-prim . =) (G4e2f core-prim . <=) (G4e2e core-prim . <) (G4e2d core-prim . library) (G4e2c core-prim . export) (G4e2b $core-rtd &no-nans-rtd &no-nans-rcd) (G4e2a $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e29 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e28 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e27 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e26 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e25 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e24 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e23 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e22 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e21 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e20 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e1f $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e1e $core-rtd &i/o-rtd &i/o-rcd) (G4e1d $core-rtd &undefined-rtd &undefined-rcd) (G4e1c $core-rtd &syntax-rtd &syntax-rcd) (G4e1b $core-rtd &lexical-rtd &lexical-rcd) (G4e1a $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e19 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e18 $core-rtd &who-rtd &who-rcd) (G4e17 $core-rtd &irritants-rtd &irritants-rcd) (G4e16 $core-rtd &assertion-rtd &assertion-rcd) (G4e15 $core-rtd &violation-rtd &violation-rcd) (G4e14 $core-rtd &error-rtd &error-rcd) (G4e13 $core-rtd &serious-rtd &serious-rcd) (G4e12 $core-rtd &warning-rtd &warning-rcd) (G4e11 $core-rtd &message-rtd &message-rcd) (G4e10 $core-rtd &condition-rtd &condition-rcd) (G4e0f macro . define-condition-type) (G4e0e macro . define-enumeration) (G4e0d macro . define-record-type) (G4e0c macro . parent-rtd) (G4e0b macro . nongenerative) (G4e0a macro . opaque) (G4e09 macro . sealed) (G4e08 macro . protocol) (G4e07 macro . parent) (G4e06 macro . immutable) (G4e05 macro . mutable) (G4e04 macro . fields) (G4e03 macro . error-handling-mode) (G4e02 macro . file-options) (G4e01 macro . buffer-mode) (G4e00 macro . eol-style) (G4dff macro . guard) (G4dfe macro . trace-define) (G4dfd macro . trace-lambda) (G4dfc macro . unsyntax-splicing) (G4dfb macro . unsyntax) (G4dfa macro . unquote-splicing) (G4df9 macro . unquote) (G4df8 macro . _) (G4df7 macro . else) (G4df6 macro . =>) (G4df5 macro . ...) (G4df4 macro . assert) (G4df3 macro . endianness) (G4df2 macro . delay) (G4df1 macro . time) (G4df0 macro . do) (G4def macro . cond) (G4dee macro . let*) (G4ded macro . let) (G4dec macro . let*-values) (G4deb macro . let-values) (G4dea macro . identifier-syntax) (G4de9 macro . with-syntax) (G4de8 macro . quasisyntax) (G4de7 macro . quasiquote) (G4de6 macro . syntax-rules) (G4de5 macro . include) (G4de4 macro . define-struct) (G4de3 core-macro . record-constructor-descriptor) (G4de2 core-macro . record-type-descriptor) (G4de1 macro . case) (G4de0 macro . parameterize) (G4ddf macro . unless) (G4dde macro . when) (G4ddd core-macro . or) (G4ddc core-macro . and) (G4ddb core-macro . if) (G4dda core-macro . letrec*) (G4dd9 core-macro . letrec) (G4dd8 core-macro . type-descriptor) (G4dd7 core-macro . case-lambda) (G4dd6 core-macro . lambda) (G4dd5 core-macro . syntax) (G4dd4 core-macro . syntax-case) (G4dd3 core-macro . quote) (G4dd2 core-macro . foreign-call) (G4dd1 letrec-syntax) (G4dd0 let-syntax) (G4dcf set!) (G4dce import) (G4dcd begin) (G4dcc module) (G4dcb define-syntax) (G4dca define)) values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50b7 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5096) (eval-core . G5095) (set-symbol-value! . G5094) (symbol-value . G5093) (gensym . G5092) (void . G5091)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50b8 '(mosh) '() '() '() '() '((set-symbol-value! . G5094) (symbol-value . G5093) (assoc-ref . G506d) (alist-cons . G506c) (print . G506a) (format . G5069) (standard-library-path . G5068) (file-newer? . G5067) (stat-mtime . G5066) (current-directory . G5065) (write-to-file . G5064) (file->list . G5063) (file->string . G5062) (digit->integer . G5061) (call-with-string-input-port . G5060) (call-with-string-io . G505f) (string-split . G505e) (bytevector-for-each . G505d) (string->regexp . G505c) (rxmatch . G505b) (regexp-replace-all . G505a) (hashtable-for-each . G5059) (get-timeofday . G5055) (get-command-line . G5054) (sys-display . G5053) (source-info . G5052) (make-compiler-instruction . G5051) (make-instruction . G5050) (set-source-info! . G504f) (bignum? . G504e) (make-complex . G504d) (fast-equal? . G504c) (fasl-read . G504b) (fasl-write . G504a) (include . G4de5)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50b9 '(mosh backend) '() '() '() '() '((receive . G5049)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50ba '(mosh file) '() '() '() '() '((read-line . G508e) (file-newer? . G5067) (stat-mtime . G5066) (current-directory . G5065) (write-to-file . G5064) (file->list . G5063) (file->string . G5062)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50bb '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G505d)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50bc '(mosh number) '() '() '() '() '((digit->integer . G5061)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50bd '(mosh string) '() '() '() '() '((print . G506a) (format . G5069) (call-with-string-input-port . G5060) (call-with-string-io . G505f) (string-split . G505e) (string->regexp . G505c)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50be '(mosh list) '() '() '() '() '((assoc-ref . G506d)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50bf '(mosh regexp) '() '() '() '() '((rxmatch . G505b) (regexp-replace-all . G505a)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50c0 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5059)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50c1 '(mosh parameters) '() '() '() '() '((make-parameter . G283b) (parameterize . G4de0)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50c2 '(system) '() '() '() '() '((readdir . G5058) (get-environment-variables . G5057) (get-environment-variable . G5056)) '() values values '#f '#f '#f '#f) (G2b7c@G2a21@install-library 'G50c3 '(srfi :1) '() '() '() '() '((dotted-list? . G508d) (circular-list? . G508c) (proper-list? . G508b) (circular-list . G508a) (last . G5089) (last-pair . G5088) (not-pair? . G5087) (split-at! . G5086) (split-at . G5085) (list= . G5084) (list-copy . G5083) (list-tabulate . G5082) (make-list . G5081) (xcons . G5080) (tenth . G507f) (ninth . G507e) (eighth . G507d) (seventh . G507c) (sixth . G507b) (fifth . G507a) (drop-right! . G5079) (drop-right . G5078) (take-right . G5077) (take! . G5076) (drop . G5075) (take . G5074) (car+cdr . G5073) (third . G5072) (second . G5071) (first . G5070) (iota . G506f) (every . G506e) (alist-cons . G506c) (append-map . G506b)) '() values values '#f '#f '#f '#f))
((lambda (G4d26@for-each-with-index G4d28@repl G4d2a@trace-printer G4d2c@command-line G4d2e@local-library-path G4d30@load/args G4d32@load G4d34@ironscheme-build G4d36@eval-top-level G4d38@compile-system-libraries G4d3a@compile G4d3c@compile->closure G4d3e@pre-compile-r6rs-file G4d40@load-r6rs-top-level G4d42@write-record) (begin (set! G4d26@for-each-with-index (lambda (G4d57@proc G4d58@lst) (letrec ((G4d5b@loop (lambda (G4d5d@i G4d5e@lst) (if (null? G4d5e@lst) (if '#f '#f (void)) (begin (G4d57@proc G4d5d@i (car G4d5e@lst)) (G4d5b@loop (+ G4d5d@i '1) (cdr G4d5e@lst))))))) (G4d5b@loop '1 G4d58@lst)))) (set! G4d28@repl (lambda G4d61@x ((lambda (G4d64@rec) (begin (set! G4d64@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4d66@G4d65) (with-exception-handler (lambda (G4d68@e) (G4d66@G4d65 (if '#t (G4d26@for-each-with-index (lambda (G4d6a@i G4d6b@x) ((lambda (G4d6e@rtd) (begin (format '#t '"   ~d. ~a" G4d6a@i (record-type-name G4d6e@rtd)) ((lambda (G4d70@v) ((lambda (G4d72@t) (if (memv G4d72@t '(0)) (newline) (if (memv G4d72@t '(1)) (begin (display '": ") (write ((record-accessor G4d6e@rtd '0) G4d6b@x)) (newline)) (begin (display '":\n") ((letrec ((G4d74@f (lambda (G4d76@i) (if (not (= G4d76@i (vector-length G4d70@v))) (begin (display '"       ") (display (vector-ref G4d70@v G4d76@i)) (display '": ") (write ((record-accessor G4d6e@rtd G4d76@i) G4d6b@x)) (newline) (G4d74@f (+ G4d76@i '1))) (void))))) G4d74@f) '0))))) (vector-length G4d70@v))) (record-type-field-names G4d6e@rtd)))) (record-rtd G4d6b@x))) (simple-conditions G4d68@e)) (raise G4d68@e)))) (lambda () (begin '#f ((lambda (G4d78@line) (if (eof-object? G4d78@line) (exit) (write (G4d36@eval-top-level (call-with-port (open-string-input-port G4d78@line) read))))) (get-line (current-input-port)))))))) (newline) (G4d64@rec)))) (G4d64@rec))) '#f))) (set! G4d2a@trace-printer (G2903@G283c@make-parameter write)) (set! G4d2c@command-line (G2903@G283c@make-parameter (get-command-line))) (set! G4d2e@local-library-path (lambda (G4d7a@filename) (cons '"." (G2b6c@G2a01@library-path)))) (set! G4d30@load/args (lambda (G4d7c@filename . G4d7e@args) (begin (apply G4d40@load-r6rs-top-level G4d7c@filename 'load G4d7e@args) (void)))) (set! G4d32@load (lambda (G4d80@filename) (begin (apply G4d40@load-r6rs-top-level G4d80@filename 'load (G4d2c@command-line)) (void)))) (set! G4d34@ironscheme-build (lambda () (G4d32@load '"ironscheme-buildscript.ss"))) (set! G4d36@eval-top-level (lambda (G4d82@x) (G495b@G3031@eval G4d82@x (G4972@G305f@interaction-environment)))) (set! G4d38@compile-system-libraries (lambda () (G4d36@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d3a@compile (lambda (G4d84@filename) (G4d40@load-r6rs-top-level G4d84@filename 'compile))) (set! G4d3c@compile->closure (lambda (G4d86@filename) (G4d40@load-r6rs-top-level G4d86@filename 'closure))) (set! G4d3e@pre-compile-r6rs-file (lambda (G4d88@filename) (G4d40@load-r6rs-top-level G4d88@filename 'compile))) (set! G4d40@load-r6rs-top-level (lambda (G4d8a@filename G4d8b@how . G4d8e@args) ((lambda (G4d92@G4d90 G4d93@G4d91) ((lambda (G4d96@swap) (dynamic-wind G4d96@swap (lambda () ((lambda (G4d98@x*) ((lambda (G4d9a@t) (if (memv G4d9a@t '(closure)) (G4971@G305d@pre-compile-r6rs-top-level G4d98@x*) (if (memv G4d9a@t '(load)) ((lambda (G4d9e@G4d9c G4d9f@G4d9d) ((lambda (G4da2@swap) (dynamic-wind G4da2@swap (lambda () ((G4970@G305b@compile-r6rs-top-level G4d98@x*))) G4da2@swap)) (lambda () ((lambda (G4da4@t) (begin (G4d9e@G4d9c G4d9f@G4d9d) (set! G4d9f@G4d9d G4da4@t))) (G4d9e@G4d9c))))) G4d2c@command-line (cons G4d8a@filename (car G4d8e@args))) (if (memv G4d9a@t '(compile)) (begin (G4970@G305b@compile-r6rs-top-level G4d98@x*) (G2b70@G2a09@serialize-all G28fe@G2832@serialize-library G2958@G2911@compile-core-expr)) (if '#f '#f (void)))))) G4d8b@how)) (with-input-from-file G4d8a@filename (lambda () ((letrec ((G4da6@f (lambda () ((lambda (G4da8@x) (if (eof-object? G4da8@x) '() (cons G4da8@x (G4da6@f)))) (G28f6@G2822@read-annotated))))) G4da6@f)))))) G4d96@swap)) (lambda () ((lambda (G4daa@t) (begin (G4d92@G4d90 G4d93@G4d91) (set! G4d93@G4d91 G4daa@t))) (G4d92@G4d90))))) G2b6c@G2a01@library-path (G4d2e@local-library-path G4d8a@filename)))) (set! G4d42@write-record (lambda (G4dac@record G4dad@port) ((lambda (G4db0@rtd) (begin (format G4dad@port '"    ~a" (record-type-name G4db0@rtd)) ((lambda (G4db2@v) ((lambda (G4db4@t) (if (memv G4db4@t '(0)) (newline) (if (memv G4db4@t '(1)) (begin (display '": " G4dad@port) (write ((record-accessor G4db0@rtd '0) G4dac@record) G4dad@port) (newline G4dad@port)) (begin (display '":\n") ((letrec ((G4db6@f (lambda (G4db8@i) (if (not (= G4db8@i (vector-length G4db2@v))) (begin (display '"       " G4dad@port) (display (vector-ref G4db2@v G4db8@i) G4dad@port) (display '": " G4dad@port) (write ((record-accessor G4db0@rtd G4db8@i) G4dac@record) G4dad@port) (newline G4dad@port) (G4db6@f (+ G4db8@i '1))) (void))))) G4db6@f) '0))))) (vector-length G4db2@v))) (record-type-field-names G4db0@rtd)))) (record-rtd G4dac@record)))) (begin (set! G4dc8@G4d42@write-record G4d42@write-record) (set! G4dc7@G4d40@load-r6rs-top-level G4d40@load-r6rs-top-level) (set! G4dc6@G4d3e@pre-compile-r6rs-file G4d3e@pre-compile-r6rs-file) (set! G4dc5@G4d3c@compile->closure G4d3c@compile->closure) (set! G4dc4@G4d3a@compile G4d3a@compile) (set! G4dc3@G4d38@compile-system-libraries G4d38@compile-system-libraries) (set! G4dc2@G4d36@eval-top-level G4d36@eval-top-level) (set! G4dc1@G4d34@ironscheme-build G4d34@ironscheme-build) (set! G4dc0@G4d32@load G4d32@load) (set! G4dbf@G4d30@load/args G4d30@load/args) (set! G4dbe@G4d2e@local-library-path G4d2e@local-library-path) (set! G4dbd@G4d2c@command-line G4d2c@command-line) (set! G4dbc@G4d2a@trace-printer G4d2a@trace-printer) (set! G4dbb@G4d28@repl G4d28@repl) (set! G4dba@G4d26@for-each-with-index G4d26@for-each-with-index) (G2b71@G2a0b@current-precompiled-library-loader G28ff@G2834@load-serialized-library) (set-symbol-value! 'load G4d32@load) (set-symbol-value! 'pre-compile-r6rs-file G4d3e@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d36@eval-top-level) (set-symbol-value! 'int-env-syms G4952@G301f@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2957@G290f@expanded->core) (set-symbol-value! 'trace-printer G4d2a@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2b6c@G2a01@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4d43@args G4d44@port) (with-exception-handler (lambda (G4d47@c) (begin (display '" Condition components:\n" G4d44@port) (G4d26@for-each-with-index (lambda (G4d49@i G4d4a@x) ((lambda (G4d4d@rtd) (begin (format G4d44@port '"   ~d. ~a" G4d49@i (record-type-name G4d4d@rtd)) ((lambda (G4d4f@v) ((lambda (G4d51@t) (if (memv G4d51@t '(0)) (newline) (if (memv G4d51@t '(1)) (begin (display '": ") (write ((record-accessor G4d4d@rtd '0) G4d4a@x)) (newline)) (begin (display '":\n") ((letrec ((G4d53@f (lambda (G4d55@i) (if (not (= G4d55@i (vector-length G4d4f@v))) (begin (display '"       ") (display (vector-ref G4d4f@v G4d55@i)) (display '": ") (write ((record-accessor G4d4d@rtd G4d55@i) G4d4a@x)) (newline) (G4d53@f (+ G4d55@i '1))) (void))))) G4d53@f) '0))))) (vector-length G4d4f@v))) (record-type-field-names G4d4d@rtd)))) (record-rtd G4d4a@x))) (simple-conditions G4d47@c)))) (lambda () (if (null? G4d43@args) (G4d28@repl) (G4d40@load-r6rs-top-level (car G4d43@args) 'load (cdr G4d43@args)))))) (G4d2c@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
