;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G288a@read-annotated G288c@annotation-stripped G288e@annotation? G2890@annotation-source G2892@annotation-expression G2894@scm->fasl G2896@fasl-save G2898@fasl-load G289a@serialize-library G289c@load-serialized-library G289e@make-record-printer G28a0@compile-core G28a2@read-library-source-file G28a4@make-parameter G293e@file-options-spec) (begin (set! G288a@read-annotated read) (set! G288c@annotation-stripped (lambda (G293f@x) (G2892@annotation-expression G293f@x))) (set! G288e@annotation? (lambda (G2941@x) (source-info G2941@x))) (set! G2890@annotation-source (lambda (G2943@x) (source-info G2943@x))) (set! G2892@annotation-expression (lambda (G2945@x) (if (pair? G2945@x) (cons (car G2945@x) (cdr G2945@x)) (display '"line:46\n")))) (set! G2894@scm->fasl (lambda (G2947@filename) (string-append G2947@filename '".fasl"))) (set! G2896@fasl-save (lambda (G2949@filename G294a@obj) (call-with-port (open-file-output-port G2949@filename) (lambda (G294d@port) ((symbol-value 'fasl-write!) G294a@obj G294d@port))))) (set! G2898@fasl-load (lambda (G294f@filename) (call-with-port (open-file-input-port G294f@filename) (symbol-value 'fasl-read!)))) (set! G289a@serialize-library (lambda (G2951@filename G2952@obj) (begin (format '#t '"serialize-library ~a\n..." G2951@filename) ((lambda (G2955@fasl-file) (begin (if (file-exists? G2955@fasl-file) (delete-file G2955@fasl-file) (void)) (call/cc (lambda (G2958@G2957) (with-exception-handler (lambda (G295a@c) (G2958@G2957 (if '#t (begin (format '#t '"Warning:serialize-library failed " G2951@filename) (if (file-exists? G2955@fasl-file) (delete-file G2955@fasl-file) (void)) '#f) (raise G295a@c)))) (lambda () (begin '#f (G2896@fasl-save G2955@fasl-file G2952@obj) (display '"OK\n")))))))) (G2894@scm->fasl G2951@filename))))) (set! G289c@load-serialized-library (lambda (G295c@filename G295d@obj) ((lambda (G2960@fasl-file) (if (if (file-exists? G2960@fasl-file) (begin '#f ((symbol-value 'file-newer?) G2960@fasl-file G295c@filename)) '#f) ((lambda (G2962@expanded2core) ((lambda (G2964@code) ((lambda (G2966@pivot) ((lambda (G2968@visit) ((lambda (G296a@visit-proc) ((lambda () (begin (set-car! G2966@pivot G296a@visit-proc) ((lambda (G296c@pivot) ((lambda (G296e@invoke) ((lambda () (begin (set-car! G296c@pivot (lambda () (eval-core G296e@invoke))) (apply G295d@obj G2964@code))))) (G2962@expanded2core (car G296c@pivot)))) (cdr G2966@pivot)) '#t)))) (lambda () (eval-core G2968@visit)))) (G2962@expanded2core (car G2966@pivot)))) (cddddr (cddddr G2964@code)))) (G2898@fasl-load G2960@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2894@scm->fasl G295c@filename)))) (set! G289e@make-record-printer (lambda (G2970@name G2971@printer) (lambda G2974@x (begin (display '"record printer") (for-each display G2974@x))))) (set! G28a0@compile-core (lambda G2976@x (apply error 'comile-core '"not implementated" G2976@x))) (set! G28a2@read-library-source-file (lambda (G2978@file-name) (with-input-from-file G2978@file-name G288a@read-annotated))) (set! G28a4@make-parameter (lambda G2988 ((lambda (G2989) (if (= G2989 '1) (apply (lambda (G297a@x) (G28a4@make-parameter G297a@x (lambda (G297c@x) G297c@x))) G2988) (if (= G2989 '2) (apply (lambda (G297e@x G297f@fender) ((lambda (G2982@x) (lambda G2986 ((lambda (G2987) (if (= G2987 '0) (apply (lambda () G2982@x) G2986) (if (= G2987 '1) (apply (lambda (G2984@v) (set! G2982@x (G297f@fender G2984@v))) G2986) (error 'apply '"invalid arg count")))) (length G2986)))) (G297f@fender G297e@x))) G2988) (error 'apply '"invalid arg count")))) (length G2988)))) (set! G293e@file-options-spec (lambda (G298a@x) G298a@x)) (begin (set! G299a@G293e@file-options-spec G293e@file-options-spec) (set! G2999@G28a4@make-parameter G28a4@make-parameter) (set! G2998@G28a2@read-library-source-file G28a2@read-library-source-file) (set! G2997@G28a0@compile-core G28a0@compile-core) (set! G2996@G289e@make-record-printer G289e@make-record-printer) (set! G2995@G289c@load-serialized-library G289c@load-serialized-library) (set! G2994@G289a@serialize-library G289a@serialize-library) (set! G2993@G2898@fasl-load G2898@fasl-load) (set! G2992@G2896@fasl-save G2896@fasl-save) (set! G2991@G2894@scm->fasl G2894@scm->fasl) (set! G2990@G2892@annotation-expression G2892@annotation-expression) (set! G298f@G2890@annotation-source G2890@annotation-source) (set! G298e@G288e@annotation? G288e@annotation?) (set! G298d@G288c@annotation-stripped G288c@annotation-stripped) (set! G298c@G288a@read-annotated G288a@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G299f@current-primitive-locations G29a1@mutable? G29a3@rewriter G29a5@expanded->core G29a7@compile-core-expr G29a9@pretty-print G29ab@compile-core-expr-to-port) (begin (set! G299f@current-primitive-locations (G2999@G28a4@make-parameter (lambda (G29ac@x) '#f) (lambda (G29ae@p) G29ae@p))) (set! G29a1@mutable? (lambda (G29b0@x) ((lambda (G29b3@simple?) (begin (set! G29b3@simple? (lambda (G29b4@x) ((lambda (G29b6@t) (if G29b6@t G29b6@t ((lambda (G29b8@t) (if G29b8@t G29b8@t ((lambda (G29ba@t) (if G29ba@t G29ba@t ((lambda (G29bc@t) (if G29bc@t G29bc@t ((lambda (G29be@t) (if G29be@t G29be@t ((lambda (G29c0@t) (if G29c0@t G29c0@t (begin '#f (number? G29b4@x)))) (bytevector? G29b4@x)))) (string? G29b4@x)))) (boolean? G29b4@x)))) (symbol? G29b4@x)))) (char? G29b4@x)))) (null? G29b4@x)))) (not (G29b3@simple? G29b0@x)))) '#f))) (set! G29a3@rewriter (lambda (G29c2@quote-hack?) ((lambda (G29c5@f) (begin (set! G29c5@f (lambda (G29c6@x) (if (pair? G29c6@x) ((lambda (G29c8@t) (if (memv G29c8@t '(quote)) (if (if G29c2@quote-hack? (begin '#f (G29a1@mutable? (cadr G29c6@x))) '#f) ((lambda (G29ca@g) (begin (set-symbol-value! G29ca@g (cadr G29c6@x)) G29ca@g)) (gensym)) G29c6@x) (if (memv G29c8@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29cc@x) (cons (car G29cc@x) (map G29c5@f (cdr G29cc@x)))) (cdr G29c6@x))) (if (memv G29c8@t '(lambda)) (cons* 'lambda (cadr G29c6@x) (map G29c5@f (cddr G29c6@x))) (if (memv G29c8@t '(letrec)) ((lambda (G29ce@bindings G29cf@body*) ((lambda (G29d2@lhs* G29d3@rhs*) (cons* 'letrec (map list G29d2@lhs* (map G29c5@f G29d3@rhs*)) (map G29c5@f G29cf@body*))) (map car G29ce@bindings) (map cadr G29ce@bindings))) (cadr G29c6@x) (cddr G29c6@x)) (if (memv G29c8@t '(letrec*)) ((lambda (G29d6@bindings G29d7@body*) ((lambda (G29da@lhs* G29db@rhs*) (cons* 'letrec* (map list G29da@lhs* (map G29c5@f G29db@rhs*)) (map G29c5@f G29d7@body*))) (map car G29d6@bindings) (map cadr G29d6@bindings))) (cadr G29c6@x) (cddr G29c6@x)) (if (memv G29c8@t '(library-letrec*)) ((lambda (G29de@name G29df@x) ((lambda (G29e2@bindings G29e3@body*) ((lambda (G29e6@lhs* G29e7@lhs** G29e8@rhs*) (cons* 'library-letrec* G29de@name (map list G29e6@lhs* G29e7@lhs** (map G29c5@f G29e8@rhs*)) (map G29c5@f G29e3@body*))) (map car G29e2@bindings) (map cadr G29e2@bindings) (map caddr G29e2@bindings))) (cadr G29df@x) (cddr G29df@x))) (cadr G29c6@x) (cdr G29c6@x)) (if (memv G29c8@t '(begin)) (cons 'begin (map G29c5@f (cdr G29c6@x))) (if (memv G29c8@t '(set!)) (list 'set! (cadr G29c6@x) (G29c5@f (caddr G29c6@x))) (if (memv G29c8@t '(primitive)) ((lambda (G29ec@op) ((lambda (G29ee@t) (if G29ee@t ((lambda (G29f0@loc) G29f0@loc) G29ee@t) G29ec@op)) ((G299f@current-primitive-locations) G29ec@op))) (cadr G29c6@x)) (if (memv G29c8@t '(define)) G29c6@x (if (list? G29c6@x) (map G29c5@f G29c6@x) (error 'rewrite '"invalid form ~s ~s" G29c6@x (list? G29c6@x)))))))))))))) (car G29c6@x)) G29c6@x))) G29c5@f)) '#f))) (set! G29a5@expanded->core (lambda (G29f2@x) ((G29a3@rewriter '#t) G29f2@x))) (set! G29a7@compile-core-expr (lambda (G29f4@x) ((G29a3@rewriter '#f) G29f4@x))) (set! G29a9@pretty-print write) (set! G29ab@compile-core-expr-to-port (lambda (G29f6@x G29f7@p) (G29a9@pretty-print ((G29a3@rewriter '#f) G29f6@x) G29f7@p))) (begin (set! G2a00@G29ab@compile-core-expr-to-port G29ab@compile-core-expr-to-port) (set! G29ff@G29a9@pretty-print G29a9@pretty-print) (set! G29fe@G29a7@compile-core-expr G29a7@compile-core-expr) (set! G29fd@G29a5@expanded->core G29a5@expanded->core) (set! G29fc@G29a3@rewriter G29a3@rewriter) (set! G29fb@G29a1@mutable? G29a1@mutable?) (set! G29fa@G299f@current-primitive-locations G299f@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a5a@make-collection G2a5c@current-library-collection G2a62@G2a5d G2a64@G2a5f G2a66@G2a5e G2a6b@library? G2a6d@make-library G2a6f@library-id G2a71@library-name G2a73@library-version G2a75@library-imp* G2a77@library-vis* G2a79@library-inv* G2a7b@library-subst G2a7d@library-env G2a7f@library-visit-state G2a81@library-invoke-state G2a83@library-visit-code G2a85@library-invoke-code G2a87@library-visible? G2a89@library-source-file-name G2a8b@set-library-id! G2a8d@set-library-name! G2a8f@set-library-version! G2a91@set-library-imp*! G2a93@set-library-vis*! G2a95@set-library-inv*! G2a97@set-library-subst! G2a99@set-library-env! G2a9b@set-library-visit-state! G2a9d@set-library-invoke-state! G2a9f@set-library-visit-code! G2aa1@set-library-invoke-code! G2aa3@set-library-visible?! G2aa5@set-library-source-file-name! G2aa7@rp G2aa9@find-dependencies G2aab@find-library-by G2aad@library-path G2aaf@library-extensions G2ab1@library-name->file-name G2ab3@file-locator G2ab5@serialize-all G2ab7@current-precompiled-library-loader G2ab9@try-load-from-file G2abb@library-loader G2abd@current-library-expander G2abf@external-pending-libraries G2ac1@find-external-library G2ac3@find-library-by-name G2ac5@library-exists? G2ac7@find-library-by-spec/die G2ac9@label->binding-table G2acb@install-library-record G2acd@install-library G2acf@imported-label->binding G2ad1@invoke-library G2ad3@visit-library G2ad5@invoke-library-by-spec G2ad7@installed-libraries G2ad9@library-spec) (begin (set! G2a5a@make-collection (lambda () ((lambda (G2ada@set) ((lambda (G2add@set-cons) (begin (set! G2add@set-cons (lambda (G2ae2@x G2ae3@ls) (if (memq G2ae2@x G2ae3@ls) G2ae3@ls (cons G2ae2@x G2ae3@ls)))) (lambda G2ae0 ((lambda (G2ae1) (if (= G2ae1 '0) (apply (lambda () G2ada@set) G2ae0) (if (= G2ae1 '1) (apply (lambda (G2ade@x) (set! G2ada@set (G2add@set-cons G2ade@x G2ada@set))) G2ae0) (error 'apply '"invalid arg count")))) (length G2ae0))))) '#f)) '()))) (set! G2a5c@current-library-collection (G2999@G28a4@make-parameter (G2a5a@make-collection) (lambda (G2ae6@x) (begin (if (not (procedure? G2ae6@x)) (assertion-violation 'current-library-collection '"not a procedure" G2ae6@x) (void)) G2ae6@x)))) (set! G2a62@G2a5d (make-record-type-descriptor 'library '#f 'G2a60 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a64@G2a5f '#f) (set! G2a66@G2a5e (make-record-constructor-descriptor G2a62@G2a5d '#f G2a64@G2a5f)) (set! G2a6b@library? (record-predicate G2a62@G2a5d)) (set! G2a6d@make-library (record-constructor G2a66@G2a5e)) (set! G2a6f@library-id (record-accessor G2a62@G2a5d '0)) (set! G2a71@library-name (record-accessor G2a62@G2a5d '1)) (set! G2a73@library-version (record-accessor G2a62@G2a5d '2)) (set! G2a75@library-imp* (record-accessor G2a62@G2a5d '3)) (set! G2a77@library-vis* (record-accessor G2a62@G2a5d '4)) (set! G2a79@library-inv* (record-accessor G2a62@G2a5d '5)) (set! G2a7b@library-subst (record-accessor G2a62@G2a5d '6)) (set! G2a7d@library-env (record-accessor G2a62@G2a5d '7)) (set! G2a7f@library-visit-state (record-accessor G2a62@G2a5d '8)) (set! G2a81@library-invoke-state (record-accessor G2a62@G2a5d '9)) (set! G2a83@library-visit-code (record-accessor G2a62@G2a5d '10)) (set! G2a85@library-invoke-code (record-accessor G2a62@G2a5d '11)) (set! G2a87@library-visible? (record-accessor G2a62@G2a5d '12)) (set! G2a89@library-source-file-name (record-accessor G2a62@G2a5d '13)) (set! G2a8b@set-library-id! (record-mutator G2a62@G2a5d '0)) (set! G2a8d@set-library-name! (record-mutator G2a62@G2a5d '1)) (set! G2a8f@set-library-version! (record-mutator G2a62@G2a5d '2)) (set! G2a91@set-library-imp*! (record-mutator G2a62@G2a5d '3)) (set! G2a93@set-library-vis*! (record-mutator G2a62@G2a5d '4)) (set! G2a95@set-library-inv*! (record-mutator G2a62@G2a5d '5)) (set! G2a97@set-library-subst! (record-mutator G2a62@G2a5d '6)) (set! G2a99@set-library-env! (record-mutator G2a62@G2a5d '7)) (set! G2a9b@set-library-visit-state! (record-mutator G2a62@G2a5d '8)) (set! G2a9d@set-library-invoke-state! (record-mutator G2a62@G2a5d '9)) (set! G2a9f@set-library-visit-code! (record-mutator G2a62@G2a5d '10)) (set! G2aa1@set-library-invoke-code! (record-mutator G2a62@G2a5d '11)) (set! G2aa3@set-library-visible?! (record-mutator G2a62@G2a5d '12)) (set! G2aa5@set-library-source-file-name! (record-mutator G2a62@G2a5d '13)) (set! G2aa7@rp (G2996@G289e@make-record-printer 'library (lambda (G2ae8@x G2ae9@p G2aea@wr) (begin (if (not (G2a6b@library? G2ae8@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a73@library-version G2ae8@x)) (G2a71@library-name G2ae8@x) (append (G2a71@library-name G2ae8@x) (list (G2a73@library-version G2ae8@x))))) G2ae9@p))))) (set! G2aa9@find-dependencies (lambda (G2aee@ls) (if (null? G2aee@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2aab@find-library-by (lambda (G2af0@pred) ((letrec ((G2af2@f (lambda (G2af4@ls) (if (null? G2af4@ls) '#f (if (G2af0@pred (car G2af4@ls)) (car G2af4@ls) (G2af2@f (cdr G2af4@ls))))))) G2af2@f) ((G2a5c@current-library-collection))))) (set! G2aad@library-path (G2999@G28a4@make-parameter '(".") (lambda (G2af6@x) (if (if (list? G2af6@x) (begin '#f (for-all string? G2af6@x)) '#f) (map (lambda (G2af8@x) G2af8@x) G2af6@x) (assertion-violation 'library-path '"not a list of strings" G2af6@x))))) (set! G2aaf@library-extensions (G2999@G28a4@make-parameter '(".sls" ".ss" ".scm") (lambda (G2afa@x) (if (if (list? G2afa@x) (begin '#f (for-all string? G2afa@x)) '#f) (map (lambda (G2afc@x) G2afc@x) G2afa@x) (assertion-violation 'library-extensions '"not a list of strings" G2afa@x))))) (set! G2ab1@library-name->file-name (lambda (G2afe@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2b02@G2b00 G2b03@G2b01) ((lambda (G2b06@extract G2b07@p) ((lambda (G2b0b@display-hex) (begin (set! G2b0b@display-hex (lambda (G2b1a@n) (if (<= '0 G2b1a@n '9) (display G2b1a@n G2b07@p) (display (integer->char (+ (char->integer '#\A) (- G2b1a@n '10))) G2b07@p)))) (begin ((letrec ((G2b0c@f (lambda (G2b0e@ls) (if (not (null? G2b0e@ls)) (begin (display '"/" G2b07@p) (for-each (lambda (G2b10@c) (if ((lambda (G2b12@t) (if G2b12@t G2b12@t ((lambda (G2b14@t) (if G2b14@t G2b14@t ((lambda (G2b16@t) (if G2b16@t G2b16@t (begin '#f (memv G2b10@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2b10@c '#\9)))) (char<=? '#\A G2b10@c '#\Z)))) (char<=? '#\a G2b10@c '#\z)) (display G2b10@c G2b07@p) (begin (display '"%" G2b07@p) ((lambda (G2b18@n) (begin (G2b0b@display-hex (quotient G2b18@n '16)) (G2b0b@display-hex (remainder G2b18@n '16)))) (char->integer G2b10@c))))) (string->list (symbol->string (car G2b0e@ls)))) (G2b0c@f (cdr G2b0e@ls))) (void))))) G2b0c@f) G2afe@x) (G2b06@extract)))) '#f)) G2b03@G2b01 G2b02@G2b00))))) (set! G2ab3@file-locator (G2999@G28a4@make-parameter (lambda (G2b1c@x) ((lambda (G2b1e@str) ((letrec ((G2b20@f (lambda (G2b22@ls G2b23@exts G2b24@failed-list) (if (null? G2b22@ls) ((lambda () ((lambda (G2b30@G2b2b G2b32@G2b2d G2b34@G2b2c G2b39@G2b2a G2b3b@make-library-resolution-condition G2b3d@G2b28 G2b3f@G2b29 G2b41@library-resolution-condition? G2b43@condition-library G2b45@condition-files) (begin (set! G2b30@G2b2b (make-record-type-descriptor '&library-resolution &condition-rtd 'G2b2e '#f '#f '#((immutable library) (immutable files)))) (set! G2b32@G2b2d '#f) (set! G2b34@G2b2c (make-record-constructor-descriptor G2b30@G2b2b &condition-rcd G2b32@G2b2d)) (set! G2b39@G2b2a (record-predicate G2b30@G2b2b)) (set! G2b3b@make-library-resolution-condition (record-constructor G2b34@G2b2c)) (set! G2b3d@G2b28 (record-accessor G2b30@G2b2b '0)) (set! G2b3f@G2b29 (record-accessor G2b30@G2b2b '1)) (set! G2b41@library-resolution-condition? (condition-predicate G2b30@G2b2b)) (set! G2b43@condition-library (condition-accessor G2b30@G2b2b G2b3d@G2b28)) (set! G2b45@condition-files (condition-accessor G2b30@G2b2b G2b3f@G2b29)) (raise (condition (G4c1e@G4b34@make-error) (G4c38@G4b8a@make-who-condition 'expander) (G4c0a@G4af4@make-message-condition '"cannot locate library in library-path") (G2b3b@make-library-resolution-condition G2b1c@x (reverse G2b24@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b23@exts) (G2b20@f (cdr G2b22@ls) (G2aaf@library-extensions) G2b24@failed-list) ((lambda (G2b46@name) (if (file-exists? G2b46@name) G2b46@name (G2b20@f G2b22@ls (cdr G2b23@exts) (cons G2b46@name G2b24@failed-list)))) (string-append (car G2b22@ls) G2b1e@str (car G2b23@exts)))))))) G2b20@f) (G2aad@library-path) (G2aaf@library-extensions) '())) (G2ab1@library-name->file-name G2b1c@x))) (lambda (G2b48@f) (if (procedure? G2b48@f) G2b48@f (assertion-violation 'file-locator '"not a procedure" G2b48@f))))) (set! G2ab5@serialize-all (lambda (G2b4a@serialize G2b4b@compile) ((lambda (G2b4f@library-desc) (begin (set! G2b4f@library-desc (lambda (G2b52@x) (list (G2a6f@library-id G2b52@x) (G2a71@library-name G2b52@x)))) (for-each (lambda (G2b50@x) (if (G2a89@library-source-file-name G2b50@x) (G2b4a@serialize (G2a89@library-source-file-name G2b50@x) (list (G2a6f@library-id G2b50@x) (G2a71@library-name G2b50@x) (G2a73@library-version G2b50@x) (map G2b4f@library-desc (G2a75@library-imp* G2b50@x)) (map G2b4f@library-desc (G2a77@library-vis* G2b50@x)) (map G2b4f@library-desc (G2a79@library-inv* G2b50@x)) (G2a7b@library-subst G2b50@x) (G2a7d@library-env G2b50@x) (G2b4b@compile (G2a83@library-visit-code G2b50@x)) (G2b4b@compile (G2a85@library-invoke-code G2b50@x)) (G2a87@library-visible? G2b50@x))) (void))) ((G2a5c@current-library-collection))))) '#f))) (set! G2ab7@current-precompiled-library-loader (G2999@G28a4@make-parameter (lambda (G2b54@filename G2b55@sk) '#f))) (set! G2ab9@try-load-from-file (lambda (G2b58@filename) ((G2ab7@current-precompiled-library-loader) G2b58@filename (lambda G2b7e ((lambda (G2b7f) (if (= G2b7f '11) (apply (lambda (G2b5a@id G2b5b@name G2b5c@ver G2b5d@imp* G2b5e@vis* G2b5f@inv* G2b60@exp-subst G2b61@exp-env G2b62@visit-proc G2b63@invoke-proc G2b64@visible?) ((letrec ((G2b70@f (lambda (G2b72@deps) (if (null? G2b72@deps) (begin (G2acd@install-library G2b5a@id G2b5b@name G2b5c@ver G2b5d@imp* G2b5e@vis* G2b5f@inv* G2b60@exp-subst G2b61@exp-env G2b62@visit-proc G2b63@invoke-proc '#f '#f G2b64@visible? '#f) '#t) ((lambda (G2b74@d) ((lambda (G2b76@label G2b77@dname) ((lambda (G2b7a@l) (if (if (G2a6b@library? G2b7a@l) (begin '#f (eq? G2b76@label (G2a6f@library-id G2b7a@l))) '#f) (G2b70@f (cdr G2b72@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b5b@name G2b77@dname G2b58@filename G2b7a@l G2b76@label (G2a6f@library-id G2b7a@l)) '#f))) (G2ac3@find-library-by-name G2b77@dname))) (car G2b74@d) (cadr G2b74@d))) (car G2b72@deps)))))) G2b70@f) (append G2b5d@imp* G2b5e@vis* G2b5f@inv*))) G2b7e) (if (>= G2b7f '0) (apply (lambda G2b7c@others '#f) G2b7e) (error 'apply '"invalid arg count")))) (length G2b7e)))))) (set! G2abb@library-loader (G2999@G28a4@make-parameter (lambda (G2b80@x) ((lambda (G2b82@file-name) (if (not G2b82@file-name) (assertion-violation '#f '"cannot file library" G2b80@x) ((lambda (G2b84@t) (if G2b84@t G2b84@t (begin '#f ((G2abd@current-library-expander) (G2998@G28a2@read-library-source-file G2b82@file-name) G2b82@file-name (lambda (G2b86@name) (if (not (equal? G2b86@name G2b80@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b8a@G2b88 G2b8b@G2b89) ((lambda (G2b8e@e G2b8f@p) (begin (display '"expected to find library " G2b8f@p) (write G2b80@x G2b8f@p) (display '" in file " G2b8f@p) (display G2b82@file-name G2b8f@p) (display '", found " G2b8f@p) (write G2b86@name G2b8f@p) (display '" instead" G2b8f@p) (G2b8e@e))) G2b8b@G2b89 G2b8a@G2b88)))) (void))))))) (G2ab9@try-load-from-file G2b82@file-name)))) ((G2ab3@file-locator) G2b80@x))) (lambda (G2b92@f) (if (procedure? G2b92@f) G2b92@f (assertion-violation 'library-locator '"not a procedure" G2b92@f))))) (set! G2abd@current-library-expander (G2999@G28a4@make-parameter (lambda (G2b94@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b96@f) (if (procedure? G2b96@f) G2b96@f (assertion-violation 'library-expander '"not a procedure" G2b96@f))))) (set! G2abf@external-pending-libraries (G2999@G28a4@make-parameter '())) (set! G2ac1@find-external-library (lambda (G2b98@name) (begin (if (member G2b98@name (G2abf@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b98@name) (void)) ((lambda (G2b9c@G2b9a@external-pending-libraries G2b9d@G2b9b@external-pending-libraries) ((lambda (G2ba0@swap) (dynamic-wind G2ba0@swap (lambda () (begin ((G2abb@library-loader) G2b98@name) ((lambda (G2ba2@t) (if G2ba2@t G2ba2@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b98@name)))) (G2aab@find-library-by (lambda (G2ba4@x) (equal? (G2a71@library-name G2ba4@x) G2b98@name)))))) G2ba0@swap)) (lambda () ((lambda (G2ba6@t) (begin (G2b9c@G2b9a@external-pending-libraries G2b9d@G2b9b@external-pending-libraries) (set! G2b9d@G2b9b@external-pending-libraries G2ba6@t))) (G2b9c@G2b9a@external-pending-libraries))))) G2abf@external-pending-libraries (cons G2b98@name (G2abf@external-pending-libraries)))))) (set! G2ac3@find-library-by-name (lambda (G2ba8@name) ((lambda (G2baa@t) (if G2baa@t G2baa@t (begin '#f (G2ac1@find-external-library G2ba8@name)))) (G2aab@find-library-by (lambda (G2bac@x) (equal? (G2a71@library-name G2bac@x) G2ba8@name)))))) (set! G2ac5@library-exists? (lambda (G2bae@name) (if (G2aab@find-library-by (lambda (G2bb0@x) (equal? (G2a71@library-name G2bb0@x) G2bae@name))) (begin '#f '#t) '#f))) (set! G2ac7@find-library-by-spec/die (lambda (G2bb2@spec) ((lambda (G2bb4@id) ((lambda (G2bb6@t) (if G2bb6@t G2bb6@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2bb2@spec)))) (G2aab@find-library-by (lambda (G2bb8@x) (eq? G2bb4@id (G2a6f@library-id G2bb8@x)))))) (car G2bb2@spec)))) (set! G2ac9@label->binding-table (make-eq-hashtable)) (set! G2acb@install-library-record (lambda (G2bba@lib) (begin ((lambda (G2bbc@exp-env) (for-each (lambda (G2bbe@x) ((lambda (G2bc0@label G2bc1@binding) ((lambda (G2bc4@binding) (hashtable-set! G2ac9@label->binding-table G2bc0@label G2bc4@binding)) ((lambda (G2bc6@t) (if (memv G2bc6@t '(global)) (cons 'global (cons G2bba@lib (cdr G2bc1@binding))) (if (memv G2bc6@t '(global-macro)) (cons 'global-macro (cons G2bba@lib (cdr G2bc1@binding))) (if (memv G2bc6@t '(global-macro!)) (cons 'global-macro! (cons G2bba@lib (cdr G2bc1@binding))) G2bc1@binding)))) (car G2bc1@binding)))) (car G2bbe@x) (cdr G2bbe@x))) G2bbc@exp-env)) (G2a7d@library-env G2bba@lib)) ((G2a5c@current-library-collection) G2bba@lib)))) (set! G2acd@install-library (lambda (G2bc8@id G2bc9@name G2bca@ver G2bcb@imp* G2bcc@vis* G2bcd@inv* G2bce@exp-subst G2bcf@exp-env G2bd0@visit-proc G2bd1@invoke-proc G2bd2@visit-code G2bd3@invoke-code G2bd4@visible? G2bd5@source-file-name) ((lambda (G2be4@imp-lib* G2be5@vis-lib* G2be6@inv-lib*) (begin (if (not (if (symbol? G2bc8@id) (if (list? G2bc9@name) (begin '#f (list? G2bca@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2bc8@id G2bc9@name G2bca@ver) (void)) (if (G2ac5@library-exists? G2bc9@name) (assertion-violation 'install-library '"library is already installed" G2bc9@name) (void)) ((lambda (G2bea@lib) (G2acb@install-library-record G2bea@lib)) (G2a6d@make-library G2bc8@id G2bc9@name G2bca@ver G2be4@imp-lib* G2be5@vis-lib* G2be6@inv-lib* G2bce@exp-subst G2bcf@exp-env G2bd0@visit-proc G2bd1@invoke-proc G2bd2@visit-code G2bd3@invoke-code G2bd4@visible? G2bd5@source-file-name)))) (map G2ac7@find-library-by-spec/die G2bcb@imp*) (map G2ac7@find-library-by-spec/die G2bcc@vis*) (map G2ac7@find-library-by-spec/die G2bcd@inv*)))) (set! G2acf@imported-label->binding (lambda (G2bec@lab) (hashtable-ref G2ac9@label->binding-table G2bec@lab '#f))) (set! G2ad1@invoke-library (lambda (G2bee@lib) ((lambda (G2bf0@invoke) (if (procedure? G2bf0@invoke) (begin (G2a9d@set-library-invoke-state! G2bee@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bee@lib))) (for-each G2ad1@invoke-library (G2a79@library-inv* G2bee@lib)) (G2a9d@set-library-invoke-state! G2bee@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bee@lib))) (G2bf0@invoke) (G2a9d@set-library-invoke-state! G2bee@lib '#t)) (void))) (G2a81@library-invoke-state G2bee@lib)))) (set! G2ad3@visit-library (lambda (G2bf2@lib) ((lambda (G2bf4@visit) (if (procedure? G2bf4@visit) (begin (G2a9b@set-library-visit-state! G2bf2@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bf2@lib))) (for-each G2ad1@invoke-library (G2a77@library-vis* G2bf2@lib)) (G2a9b@set-library-visit-state! G2bf2@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bf2@lib))) (G2bf4@visit) (G2a9b@set-library-visit-state! G2bf2@lib '#t)) (void))) (G2a7f@library-visit-state G2bf2@lib)))) (set! G2ad5@invoke-library-by-spec (lambda (G2bf6@spec) (G2ad1@invoke-library (G2ac7@find-library-by-spec/die G2bf6@spec)))) (set! G2ad7@installed-libraries (lambda G2c00 ((lambda (G2c01) (if (= G2c01 '1) (apply (lambda (G2bf8@all?) ((letrec ((G2bfa@f (lambda (G2bfc@ls) (if (null? G2bfc@ls) '() (if ((lambda (G2bfe@t) (if G2bfe@t G2bfe@t (begin '#f (G2a87@library-visible? (car G2bfc@ls))))) G2bf8@all?) (cons (car G2bfc@ls) (G2bfa@f (cdr G2bfc@ls))) (G2bfa@f (cdr G2bfc@ls))))))) G2bfa@f) ((G2a5c@current-library-collection)))) G2c00) (if (= G2c01 '0) (apply (lambda () (G2ad7@installed-libraries '#f)) G2c00) (error 'apply '"invalid arg count")))) (length G2c00)))) (set! G2ad9@library-spec (lambda (G2c02@x) (begin (if (not (G2a6b@library? G2c02@x)) (assertion-violation 'library-spec '"not a library" G2c02@x) (void)) (list (G2a6f@library-id G2c02@x) (G2a71@library-name G2c02@x) (G2a73@library-version G2c02@x))))) (begin (set! G2c40@G2ad9@library-spec G2ad9@library-spec) (set! G2c3f@G2ad7@installed-libraries G2ad7@installed-libraries) (set! G2c3e@G2ad5@invoke-library-by-spec G2ad5@invoke-library-by-spec) (set! G2c3d@G2ad3@visit-library G2ad3@visit-library) (set! G2c3c@G2ad1@invoke-library G2ad1@invoke-library) (set! G2c3b@G2acf@imported-label->binding G2acf@imported-label->binding) (set! G2c3a@G2acd@install-library G2acd@install-library) (set! G2c39@G2acb@install-library-record G2acb@install-library-record) (set! G2c38@G2ac9@label->binding-table G2ac9@label->binding-table) (set! G2c37@G2ac7@find-library-by-spec/die G2ac7@find-library-by-spec/die) (set! G2c36@G2ac5@library-exists? G2ac5@library-exists?) (set! G2c35@G2ac3@find-library-by-name G2ac3@find-library-by-name) (set! G2c34@G2ac1@find-external-library G2ac1@find-external-library) (set! G2c33@G2abf@external-pending-libraries G2abf@external-pending-libraries) (set! G2c32@G2abd@current-library-expander G2abd@current-library-expander) (set! G2c31@G2abb@library-loader G2abb@library-loader) (set! G2c30@G2ab9@try-load-from-file G2ab9@try-load-from-file) (set! G2c2f@G2ab7@current-precompiled-library-loader G2ab7@current-precompiled-library-loader) (set! G2c2e@G2ab5@serialize-all G2ab5@serialize-all) (set! G2c2d@G2ab3@file-locator G2ab3@file-locator) (set! G2c2c@G2ab1@library-name->file-name G2ab1@library-name->file-name) (set! G2c2b@G2aaf@library-extensions G2aaf@library-extensions) (set! G2c2a@G2aad@library-path G2aad@library-path) (set! G2c29@G2aab@find-library-by G2aab@find-library-by) (set! G2c28@G2aa9@find-dependencies G2aa9@find-dependencies) (set! G2c27@G2aa7@rp G2aa7@rp) (set! G2c26@G2aa5@set-library-source-file-name! G2aa5@set-library-source-file-name!) (set! G2c25@G2aa3@set-library-visible?! G2aa3@set-library-visible?!) (set! G2c24@G2aa1@set-library-invoke-code! G2aa1@set-library-invoke-code!) (set! G2c23@G2a9f@set-library-visit-code! G2a9f@set-library-visit-code!) (set! G2c22@G2a9d@set-library-invoke-state! G2a9d@set-library-invoke-state!) (set! G2c21@G2a9b@set-library-visit-state! G2a9b@set-library-visit-state!) (set! G2c20@G2a99@set-library-env! G2a99@set-library-env!) (set! G2c1f@G2a97@set-library-subst! G2a97@set-library-subst!) (set! G2c1e@G2a95@set-library-inv*! G2a95@set-library-inv*!) (set! G2c1d@G2a93@set-library-vis*! G2a93@set-library-vis*!) (set! G2c1c@G2a91@set-library-imp*! G2a91@set-library-imp*!) (set! G2c1b@G2a8f@set-library-version! G2a8f@set-library-version!) (set! G2c1a@G2a8d@set-library-name! G2a8d@set-library-name!) (set! G2c19@G2a8b@set-library-id! G2a8b@set-library-id!) (set! G2c18@G2a89@library-source-file-name G2a89@library-source-file-name) (set! G2c17@G2a87@library-visible? G2a87@library-visible?) (set! G2c16@G2a85@library-invoke-code G2a85@library-invoke-code) (set! G2c15@G2a83@library-visit-code G2a83@library-visit-code) (set! G2c14@G2a81@library-invoke-state G2a81@library-invoke-state) (set! G2c13@G2a7f@library-visit-state G2a7f@library-visit-state) (set! G2c12@G2a7d@library-env G2a7d@library-env) (set! G2c11@G2a7b@library-subst G2a7b@library-subst) (set! G2c10@G2a79@library-inv* G2a79@library-inv*) (set! G2c0f@G2a77@library-vis* G2a77@library-vis*) (set! G2c0e@G2a75@library-imp* G2a75@library-imp*) (set! G2c0d@G2a73@library-version G2a73@library-version) (set! G2c0c@G2a71@library-name G2a71@library-name) (set! G2c0b@G2a6f@library-id G2a6f@library-id) (set! G2c0a@G2a6d@make-library G2a6d@make-library) (set! G2c09@G2a6b@library? G2a6b@library?) (set! G2c08@G2a66@G2a5e G2a66@G2a5e) (set! G2c07@G2a64@G2a5f G2a64@G2a5f) (set! G2c06@G2a62@G2a5d G2a62@G2a5d) (set! G2c05@G2a5c@current-library-collection G2a5c@current-library-collection) (set! G2c04@G2a5a@make-collection G2a5a@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c43@build-global-define G2cc7@build-lambda G2cc9@build-case-lambda G2ccb@build-let G2d13@build-sequence G2d15@build-void G2d17@build-letrec G2d19@build-letrec* G2d1b@build-library-letrec* G2d1d@build-receive) (begin (set! G2c43@build-global-define (lambda (G2d1e@x) (G2d15@build-void))) (set! G2cc7@build-lambda (lambda (G2d20@ae G2d21@vars G2d22@exp) (list 'lambda G2d21@vars G2d22@exp))) (set! G2cc9@build-case-lambda (lambda (G2d26@ae G2d27@vars* G2d28@exp*) ((lambda (G2d2d@build-error G2d2f@build-pred G2d31@build-apply G2d33@expand-case-lambda) (begin (set! G2d2d@build-error (lambda (G2d62@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2d2f@build-pred (lambda (G2d4c@ae G2d4d@n G2d4e@vars) (call-with-values (lambda () ((letrec ((G2d54@f (lambda (G2d56@vars G2d57@count) (if (pair? G2d56@vars) (G2d54@f (cdr G2d56@vars) (+ G2d57@count '1)) (if (null? G2d56@vars) (values G2d57@count '=) (values G2d57@count '>=)))))) G2d54@f) G2d4e@vars '0)) (lambda (G2d5a@G2d52 G2d5b@G2d53) ((lambda (G2d5e@pred G2d5f@count) (list (list 'primitive G2d5e@pred) G2d4d@n (list 'quote G2d5f@count))) G2d5b@G2d53 G2d5a@G2d52))))) (set! G2d31@build-apply (lambda (G2d44@ae G2d45@g G2d46@vars G2d47@exp) (list '(primitive apply) (G2cc7@build-lambda G2d44@ae G2d46@vars G2d47@exp) G2d45@g))) (set! G2d33@expand-case-lambda (lambda (G2d34@ae G2d35@vars G2d36@exp*) ((lambda (G2d3a@g G2d3b@n) (list 'lambda G2d3a@g (G2ccb@build-let G2d34@ae (list G2d3b@n) (list (list '(primitive length) G2d3a@g)) ((letrec ((G2d3e@f (lambda (G2d40@vars* G2d41@exp*) (if (null? G2d40@vars*) (G2d2d@build-error G2d34@ae) (list 'if (G2d2f@build-pred G2d34@ae G2d3b@n (car G2d40@vars*)) (G2d31@build-apply G2d34@ae G2d3a@g (car G2d40@vars*) (car G2d41@exp*)) (G2d3e@f (cdr G2d40@vars*) (cdr G2d41@exp*))))))) G2d3e@f) G2d27@vars* G2d36@exp*)))) (gensym) (gensym)))) (if (= (length G2d28@exp*) '1) (G2cc7@build-lambda G2d26@ae (car G2d27@vars*) (car G2d28@exp*)) (G2d33@expand-case-lambda G2d26@ae G2d27@vars* G2d28@exp*)))) '#f '#f '#f '#f))) (set! G2ccb@build-let (lambda (G2d64@ae G2d65@lhs* G2d66@rhs* G2d67@body) (cons (G2cc7@build-lambda G2d64@ae G2d65@lhs* G2d67@body) G2d66@rhs*))) (set! G2d13@build-sequence (lambda (G2d6c@ae G2d6d@exps) ((letrec ((G2d70@loop (lambda (G2d72@exps) (if (null? (cdr G2d72@exps)) (car G2d72@exps) (if (equal? (car G2d72@exps) (G2d15@build-void)) (G2d70@loop (cdr G2d72@exps)) (cons 'begin G2d72@exps)))))) G2d70@loop) G2d6d@exps))) (set! G2d15@build-void (lambda () '((primitive void)))) (set! G2d17@build-letrec (lambda (G2d74@ae G2d75@vars G2d76@val-exps G2d77@body-exp) (if (null? G2d75@vars) G2d77@body-exp (list 'letrec (map list G2d75@vars G2d76@val-exps) G2d77@body-exp)))) (set! G2d19@build-letrec* (lambda (G2d7c@ae G2d7d@vars G2d7e@val-exps G2d7f@body-exp) (if (null? G2d7d@vars) G2d7f@body-exp (G2ccb@build-let G2d7c@ae G2d7d@vars (map (lambda (G2d84@x) (list 'quote '#f)) G2d7d@vars) (G2d13@build-sequence G2d7c@ae (append (map (lambda (G2d86@lhs G2d87@rhs) (list 'set! G2d86@lhs G2d87@rhs)) G2d7d@vars G2d7e@val-exps) (list G2d7f@body-exp))))))) (set! G2d1b@build-library-letrec* (lambda (G2d8a@ae G2d8b@name G2d8c@vars G2d8d@locs G2d8e@val-exps G2d8f@body-exp) (list 'library-letrec* G2d8b@name (map list G2d8c@vars G2d8d@locs G2d8e@val-exps) G2d8f@body-exp))) (set! G2d1d@build-receive (lambda (G2d96@ae G2d97@vars G2d98@producer G2d99@body*) (begin (display '"************** in ") (cons 'receive (cons G2d97@vars (cons G2d98@producer G2d99@body*)))))) (begin (set! G2da7@G2d1d@build-receive G2d1d@build-receive) (set! G2da6@G2d1b@build-library-letrec* G2d1b@build-library-letrec*) (set! G2da5@G2d19@build-letrec* G2d19@build-letrec*) (set! G2da4@G2d17@build-letrec G2d17@build-letrec) (set! G2da3@G2d15@build-void G2d15@build-void) (set! G2da2@G2d13@build-sequence G2d13@build-sequence) (set! G2da1@G2ccb@build-let G2ccb@build-let) (set! G2da0@G2cc9@build-case-lambda G2cc9@build-case-lambda) (set! G2d9f@G2cc7@build-lambda G2cc7@build-lambda) (set! G2d9e@G2c43@build-global-define G2c43@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2db4@set-cons G2db6@set-union G2dbb@top-mark* G2dbd@top-marked? G2dbf@gen-lexical G2dc1@gen-global G2dc3@gen-label G2dc5@gen-top-level-label G2dc7@gen-define-label+loc G2dc9@gen-define-label G2dcf@G2dca G2dd1@G2dcc G2dd3@G2dcb G2dd8@rib? G2dda@make-rib G2ddc@rib-sym* G2dde@rib-mark** G2de0@rib-label* G2de2@rib-sealed/freq G2de4@rib-cache G2de6@set-rib-sym*! G2de8@set-rib-mark**! G2dea@set-rib-label*! G2dec@set-rib-sealed/freq! G2dee@set-rib-cache! G2df0@make-empty-rib G2df2@make-cache-rib G2df4@find-label G2df6@extend-rib! G2df8@extend-rib/nc! G2dfa@make-rib-map G2dfc@seal-rib! G2dfe@unseal-rib! G2e00@make-full-rib G2e06@G2e01 G2e08@G2e03 G2e0a@G2e02 G2e0f@stx? G2e11@make-stx G2e13@stx-expr G2e15@stx-mark* G2e17@stx-subst* G2e19@stx-ae* G2e1b@set-stx-expr! G2e1d@set-stx-mark*! G2e1f@set-stx-subst*! G2e21@set-stx-ae*! G2e23@rp G2e25@datum->stx G2e27@gen-mark G2e29@anti-mark G2e2b@anti-mark? G2e2d@join-wraps G2e2f@mkstx G2e31@add-mark G2e33@add-subst G2e35@syntax-kind? G2e37@syntax-vector->list G2e39@syntax-pair? G2e3b@syntax-vector? G2e3d@syntax-null? G2e3f@syntax-list? G2e41@syntax-car G2e43@syntax-cdr G2e45@syntax->list G2e47@id? G2e49@id->sym G2e4b@same-marks? G2e4d@bound-id=? G2e4f@free-id=? G2e51@valid-bound-ids? G2e53@distinct-bound-ids? G2e55@bound-id-member? G2e57@self-evaluating? G2e59@strip-annotations G2e5b@strip G2e5d@stx->datum G2e5f@same-marks*? G2e61@id->label G2e63@id->real-label G2e65@label->binding G2e67@make-binding G2e69@binding-type G2e6b@binding-value G2e6d@raise-unbound-error G2e6f@syntax-type G2e86@sanitize-binding G2e88@make-variable-transformer G2e8a@variable-transformer? G2e8c@variable-transformer-procedure G2e8e@make-eval-transformer G3012@parse-define G3014@parse-define-syntax G3016@scheme-stx-hashtable G3018@scheme-stx G301a@lexical-var G301c@lexical-mutable? G301e@set-lexical-mutable! G3020@add-lexical G3022@add-lexicals G3024@letrec-helper G3026@letrec-transformer G3028@letrec*-transformer G302a@fluid-let-syntax-transformer G302c@type-descriptor-transformer G302e@record-type-descriptor-transformer G3030@record-constructor-descriptor-transformer G3032@when-macro G3034@unless-macro G3036@if-transformer G3038@case-macro G303a@quote-transformer G303c@case-lambda-transformer G303e@lambda-transformer G3040@bless G3042@with-syntax-macro G3044@invalid-fmls-error G3046@let-macro G3048@let-values-macro G304a@let*-values-macro G304c@trace-lambda-macro G304e@trace-define-macro G3050@trace-define-syntax-macro G3052@trace-let/rec-syntax G3054@trace-let-syntax-macro G3056@trace-letrec-syntax-macro G3058@guard-macro G305a@define-enumeration-macro G305c@time-macro G305e@delay-macro G3060@assert-macro G3062@endianness-macro G3064@identifier-syntax-macro G3066@do-macro G3068@let*-macro G306a@or-macro G306c@and-macro G306e@cond-macro G3070@do-include G3072@include-macro G3074@include-into-macro G3076@syntax-rules-macro G3078@quasiquote-macro G307a@quasisyntax-macro G307c@define-struct-macro G307e@define-record-type-macro G3080@define-condition-type-macro G3082@incorrect-usage-macro G3084@parameterize-macro G3086@foreign-call-transformer G3088@convert-pattern G308a@syntax-dispatch G308c@ellipsis? G308e@underscore? G3090@verify-literals G3092@syntax-case-transformer G3094@ellipsis-map G3096@syntax-transformer G3098@core-macro-transformer G309a@file-options-macro G309c@symbol-macro G309e@macro-transformer G30a0@local-macro-transformer G30a2@do-macro-call G30a4@chi-macro G30a6@chi-local-macro G30a8@chi-global-macro G30aa@chi-expr* G30ac@chi-application G30ae@chi-expr G30b0@chi-set! G30b2@verify-formals G30b4@chi-lambda-clause G30b6@chi-lambda-clause* G30b8@chi-defun G30ba@chi-rhs G30bc@expand-interaction-rhs*/init* G30be@chi-rhs* G30c0@find-bound=? G30c2@find-dups G30c4@chi-internal G30c6@parse-module G30cc@G30c7 G30ce@G30c9 G30d0@G30c8 G30d5@module-interface? G30d7@make-module-interface G30d9@module-interface-first-mark G30db@module-interface-exp-id-vec G30dd@module-interface-exp-lab-vec G30df@set-module-interface-first-mark! G30e1@set-module-interface-exp-id-vec! G30e3@set-module-interface-exp-lab-vec! G30e5@module-interface-exp-id* G30e7@chi-internal-module G30e9@chi-body* G30eb@expand-transformer G30ed@parse-exports G30ef@parse-library-name G30f1@parse-library G30f3@parse-import-spec* G30f5@make-top-rib G30f7@make-collector G30f9@inv-collector G30fb@vis-collector G30fd@imp-collector G30ff@chi-library-internal G3101@chi-interaction-expr G3103@library-body-expander G3105@core-library-expander G3107@parse-top-level-program G3109@top-level-expander G310f@G310a G3111@G310c G3113@G310b G3118@env? G311a@make-env G311c@env-names G311e@env-labels G3120@env-itc G3122@set-env-names! G3124@set-env-labels! G3126@set-env-itc! G3128@rp G312e@G3129 G3130@G312b G3132@G312a G3137@interaction-env? G3139@make-interaction-env G313b@interaction-env-rib G313d@interaction-env-r G313f@interaction-env-locs G3141@set-interaction-env-rib! G3143@set-interaction-env-r! G3145@set-interaction-env-locs! G3147@rp G3149@interaction-environment-symbols G314b@environment-bindings G314d@parse-binding G314f@environment? G3151@environment-symbols G3153@environment G3155@null-environment G3157@scheme-report-environment G3159@expand G315b@eval G315d@library-expander G315f@boot-library-expand G3161@rev-map-append G3163@build-exports G3165@make-export-subst G3167@make-export-env/macros G3169@generate-temporaries G316b@free-identifier=? G316d@bound-identifier=? G316f@make-source-condition G3171@extract-position-condition G3173@expression-position G3175@assertion-error G3177@syntax-error G3179@extract-trace G317b@syntax-violation* G317d@syntax-violation G317f@identifier? G3181@datum->syntax G3183@syntax->datum G3185@compile-r6rs-top-level G3187@pre-compile-r6rs-top-level G3189@interaction-environment G318b@top-level-context) (begin (set! G2db4@set-cons (lambda (G318c@x G318d@ls) (if (memq G318c@x G318d@ls) G318d@ls (cons G318c@x G318d@ls)))) (set! G2db6@set-union (lambda (G3190@ls1 G3191@ls2) (if (null? G3190@ls1) G3191@ls2 (if (memq (car G3190@ls1) G3191@ls2) (G2db6@set-union (cdr G3190@ls1) G3191@ls2) (cons (car G3190@ls1) (G2db6@set-union (cdr G3190@ls1) G3191@ls2)))))) (set! G2dbb@top-mark* '(top)) (set! G2dbd@top-marked? (lambda (G3194@m*) (memq 'top G3194@m*))) (set! G2dbf@gen-lexical (lambda (G3196@sym) (if (symbol? G3196@sym) (gensym G3196@sym) (if (G2e0f@stx? G3196@sym) (G2dbf@gen-lexical (G2e49@id->sym G3196@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3196@sym))))) (set! G2dc1@gen-global (lambda (G3198@x) (G2dbf@gen-lexical G3198@x))) (set! G2dc3@gen-label (lambda (G319a@_) (gensym))) (set! G2dc5@gen-top-level-label (lambda (G319c@id G319d@rib) ((lambda (G31a1@find) (begin (set! G31a1@find (lambda (G31ac@sym G31ad@mark* G31ae@sym* G31af@mark** G31b0@label*) (if (pair? G31ae@sym*) (begin '#f (if (if (eq? G31ac@sym (car G31ae@sym*)) (begin '#f (G2e4b@same-marks? G31ad@mark* (car G31af@mark**))) '#f) (car G31b0@label*) (G31a1@find G31ac@sym G31ad@mark* (cdr G31ae@sym*) (cdr G31af@mark**) (cdr G31b0@label*)))) '#f))) ((lambda (G31a2@sym G31a3@mark*) ((lambda (G31a6@sym*) ((lambda (G31a8@t) (if G31a8@t ((lambda (G31aa@label) (if (G2c3b@G2acf@imported-label->binding G31aa@label) (gensym) G31aa@label)) G31a8@t) (gensym))) (if (memq G31a2@sym (G2ddc@rib-sym* G319d@rib)) (begin '#f (G31a1@find G31a2@sym G31a3@mark* G31a6@sym* (G2dde@rib-mark** G319d@rib) (G2de0@rib-label* G319d@rib))) '#f))) (G2ddc@rib-sym* G319d@rib))) (G2e49@id->sym G319c@id) (G2e15@stx-mark* G319c@id)))) '#f))) (set! G2dc7@gen-define-label+loc (lambda (G31b6@id G31b7@rib) ((lambda (G31ba@t) (if G31ba@t ((lambda (G31bc@env) ((lambda (G31be@label G31bf@locs) (values G31be@label ((lambda (G31c2@t) (if G31c2@t (cdr G31c2@t) ((lambda (G31c4@loc) (begin (G3145@set-interaction-env-locs! G31bc@env (cons (cons G31be@label G31c4@loc) G31bf@locs)) G31c4@loc)) (G2dbf@gen-lexical G31b6@id)))) (assq G31be@label G31bf@locs)))) (G2dc5@gen-top-level-label G31b6@id G31b7@rib) (G313f@interaction-env-locs G31bc@env))) G31ba@t) (values (gensym) (G2dbf@gen-lexical G31b6@id)))) (G318b@top-level-context)))) (set! G2dc9@gen-define-label (lambda (G31c6@id G31c7@rib) (if (G318b@top-level-context) (G2dc5@gen-top-level-label G31c6@id G31c7@rib) (gensym)))) (set! G2dcf@G2dca (make-record-type-descriptor 'rib '#f 'G2dcd '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2dd1@G2dcc '#f) (set! G2dd3@G2dcb (make-record-constructor-descriptor G2dcf@G2dca '#f G2dd1@G2dcc)) (set! G2dd8@rib? (record-predicate G2dcf@G2dca)) (set! G2dda@make-rib (record-constructor G2dd3@G2dcb)) (set! G2ddc@rib-sym* (record-accessor G2dcf@G2dca '0)) (set! G2dde@rib-mark** (record-accessor G2dcf@G2dca '1)) (set! G2de0@rib-label* (record-accessor G2dcf@G2dca '2)) (set! G2de2@rib-sealed/freq (record-accessor G2dcf@G2dca '3)) (set! G2de4@rib-cache (record-accessor G2dcf@G2dca '4)) (set! G2de6@set-rib-sym*! (record-mutator G2dcf@G2dca '0)) (set! G2de8@set-rib-mark**! (record-mutator G2dcf@G2dca '1)) (set! G2dea@set-rib-label*! (record-mutator G2dcf@G2dca '2)) (set! G2dec@set-rib-sealed/freq! (record-mutator G2dcf@G2dca '3)) (set! G2dee@set-rib-cache! (record-mutator G2dcf@G2dca '4)) (set! G2df0@make-empty-rib (lambda () (G2dda@make-rib '() '() '() '#f '#f))) (set! G2df2@make-cache-rib (lambda () (G2dda@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2df4@find-label (lambda (G31ca@rib G31cb@sym G31cc@mark*) ((lambda (G31d0@ht) (if G31d0@ht (begin '#f ((lambda (G31d2@cv) ((lambda (G31d4@t) (if G31d4@t (cdr G31d4@t) '#f)) (if G31d2@cv (begin '#f (assp (lambda (G31d6@m) (G2e4b@same-marks? G31cc@mark* G31d6@m)) G31d2@cv)) '#f))) (hashtable-ref G31d0@ht G31cb@sym '#f))) '#f)) (G2de4@rib-cache G31ca@rib)))) (set! G2df6@extend-rib! (lambda (G31d8@rib G31d9@id G31da@label) ((lambda (G31df@find) (begin (set! G31df@find (lambda (G31f0@sym G31f1@mark* G31f2@sym* G31f3@mark** G31f4@label*) (if (pair? G31f2@sym*) (begin '#f (if (if (eq? G31f0@sym (car G31f2@sym*)) (begin '#f (G2e4b@same-marks? G31f1@mark* (car G31f3@mark**))) '#f) G31f4@label* (G31df@find G31f0@sym G31f1@mark* (cdr G31f2@sym*) (cdr G31f3@mark**) (cdr G31f4@label*)))) '#f))) (begin (if (G2de2@rib-sealed/freq G31d8@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G31d8@rib) (void)) ((lambda (G31e0@sym G31e1@mark*) ((lambda (G31e4@sym*) ((lambda (G31e6@t) (if G31e6@t ((lambda (G31e8@p) (if (not (eq? G31da@label G31e8@p)) (G317d@syntax-violation '#f '"multiple definitions of identifier" G31d9@id) (void))) G31e6@t) ((lambda (G31ea@t) (if G31ea@t ((lambda (G31ec@p) (if (not (eq? G31da@label (car G31ec@p))) (if (G318b@top-level-context) (set-car! G31ec@p G31da@label) (G317d@syntax-violation '#f '"multiple definitions of identifier" G31d9@id)) (void))) G31ea@t) (begin (if (G2de4@rib-cache G31d8@rib) (hashtable-update! (G2de4@rib-cache G31d8@rib) G31e0@sym (lambda (G31ee@e) (cons (cons G31e1@mark* G31da@label) G31ee@e)) '()) (void)) (G2de6@set-rib-sym*! G31d8@rib (cons G31e0@sym G31e4@sym*)) (G2de8@set-rib-mark**! G31d8@rib (cons G31e1@mark* (G2dde@rib-mark** G31d8@rib))) (G2dea@set-rib-label*! G31d8@rib (cons G31da@label (G2de0@rib-label* G31d8@rib)))))) (if (memq G31e0@sym (G2ddc@rib-sym* G31d8@rib)) (begin '#f (G31df@find G31e0@sym G31e1@mark* G31e4@sym* (G2dde@rib-mark** G31d8@rib) (G2de0@rib-label* G31d8@rib))) '#f)))) (G2df4@find-label G31d8@rib G31e0@sym G31e1@mark*))) (G2ddc@rib-sym* G31d8@rib))) (G2e49@id->sym G31d9@id) (G2e15@stx-mark* G31d9@id))))) '#f))) (set! G2df8@extend-rib/nc! (lambda (G31fa@rib G31fb@id G31fc@label) ((lambda (G3200@sym G3201@mark*) ((lambda (G3204@sym*) (begin (if (G2de4@rib-cache G31fa@rib) (hashtable-update! (G2de4@rib-cache G31fa@rib) G3200@sym (lambda (G3206@e) (cons (cons G3201@mark* G31fc@label) G3206@e)) '()) (void)) (G2de6@set-rib-sym*! G31fa@rib (cons G3200@sym G3204@sym*)) (G2de8@set-rib-mark**! G31fa@rib (cons G3201@mark* (G2dde@rib-mark** G31fa@rib))) (G2dea@set-rib-label*! G31fa@rib (cons G31fc@label (G2de0@rib-label* G31fa@rib))))) (G2ddc@rib-sym* G31fa@rib))) (G2e49@id->sym G31fb@id) (G2e15@stx-mark* G31fb@id)))) (set! G2dfa@make-rib-map (lambda (G3208@sym*) ((lambda (G320a@ht) ((letrec ((G320c@f (lambda (G320e@i G320f@sym*) (if (null? G320f@sym*) G320a@ht (begin (hashtable-update! G320a@ht (car G320f@sym*) (lambda (G3212@x) (cons G320e@i G3212@x)) '()) (G320c@f (+ G320e@i '1) (cdr G320f@sym*))))))) G320c@f) '0 G3208@sym*)) (make-eq-hashtable)))) (set! G2dfc@seal-rib! (lambda (G3214@rib) ((lambda (G3216@sym*) (if (not (null? G3216@sym*)) (begin (G2de6@set-rib-sym*! G3214@rib (list->vector G3216@sym*)) (G2de8@set-rib-mark**! G3214@rib (list->vector (G2dde@rib-mark** G3214@rib))) (G2dea@set-rib-label*! G3214@rib (list->vector (G2de0@rib-label* G3214@rib))) (G2dec@set-rib-sealed/freq! G3214@rib (G2dfa@make-rib-map G3216@sym*))) (void))) (G2ddc@rib-sym* G3214@rib)))) (set! G2dfe@unseal-rib! (lambda (G3218@rib) (if (G2de2@rib-sealed/freq G3218@rib) (begin (G2dec@set-rib-sealed/freq! G3218@rib '#f) (G2de6@set-rib-sym*! G3218@rib (vector->list (G2ddc@rib-sym* G3218@rib))) (G2de8@set-rib-mark**! G3218@rib (vector->list (G2dde@rib-mark** G3218@rib))) (G2dea@set-rib-label*! G3218@rib (vector->list (G2de0@rib-label* G3218@rib)))) (void)))) (set! G2e00@make-full-rib (lambda (G321a@id* G321b@label*) ((lambda (G321e@r) (begin (G2dfc@seal-rib! G321e@r) G321e@r)) (G2dda@make-rib (map G2e49@id->sym G321a@id*) (map G2e15@stx-mark* G321a@id*) G321b@label* '#f '#f)))) (set! G2e06@G2e01 (make-record-type-descriptor 'stx '#f 'G2e04 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2e08@G2e03 '#f) (set! G2e0a@G2e02 (make-record-constructor-descriptor G2e06@G2e01 '#f G2e08@G2e03)) (set! G2e0f@stx? (record-predicate G2e06@G2e01)) (set! G2e11@make-stx (record-constructor G2e0a@G2e02)) (set! G2e13@stx-expr (record-accessor G2e06@G2e01 '0)) (set! G2e15@stx-mark* (record-accessor G2e06@G2e01 '1)) (set! G2e17@stx-subst* (record-accessor G2e06@G2e01 '2)) (set! G2e19@stx-ae* (record-accessor G2e06@G2e01 '3)) (set! G2e1b@set-stx-expr! (record-mutator G2e06@G2e01 '0)) (set! G2e1d@set-stx-mark*! (record-mutator G2e06@G2e01 '1)) (set! G2e1f@set-stx-subst*! (record-mutator G2e06@G2e01 '2)) (set! G2e21@set-stx-ae*! (record-mutator G2e06@G2e01 '3)) (set! G2e23@rp (G2996@G289e@make-record-printer 'stx (lambda (G3220@x G3221@p G3222@wr) (begin (display '"#<syntax " G3221@p) (write (G2e5d@stx->datum G3220@x) G3221@p) ((lambda (G3226@expr) (if (G298e@G288e@annotation? G3226@expr) ((lambda (G3228@src) (if (pair? G3228@src) (begin (display '" [" G3221@p) (display (cdr G3228@src) G3221@p) (display '" of " G3221@p) (display (car G3228@src) G3221@p) (display '"]" G3221@p)) (void))) (G298f@G2890@annotation-source G3226@expr)) (void))) (G2e13@stx-expr G3220@x)) (display '">" G3221@p))))) (set! G2e25@datum->stx (lambda (G322a@id G322b@datum) (G2e11@make-stx G322b@datum (G2e15@stx-mark* G322a@id) (G2e17@stx-subst* G322a@id) (G2e19@stx-ae* G322a@id)))) (set! G2e27@gen-mark (lambda () (string '#\m))) (set! G2e29@anti-mark '#f) (set! G2e2b@anti-mark? not) (set! G2e2d@join-wraps (lambda (G322e@m1* G322f@s1* G3230@ae1* G3231@e) ((lambda (G3237@cancel) (begin (set! G3237@cancel (lambda (G323e@ls1 G323f@ls2) ((letrec ((G3242@f (lambda (G3244@x G3245@ls1) (if (null? G3245@ls1) (cdr G323f@ls2) (cons G3244@x (G3242@f (car G3245@ls1) (cdr G3245@ls1))))))) G3242@f) (car G323e@ls1) (cdr G323e@ls1)))) ((lambda (G3238@m2* G3239@s2* G323a@ae2*) (if (if (not (null? G322e@m1*)) (if (not (null? G3238@m2*)) (begin '#f (G2e2b@anti-mark? (car G3238@m2*))) '#f) '#f) (values (G3237@cancel G322e@m1* G3238@m2*) (G3237@cancel G322f@s1* G3239@s2*) (G3237@cancel G3230@ae1* G323a@ae2*)) (values (append G322e@m1* G3238@m2*) (append G322f@s1* G3239@s2*) (append G3230@ae1* G323a@ae2*)))) (G2e15@stx-mark* G3231@e) (G2e17@stx-subst* G3231@e) (G2e19@stx-ae* G3231@e)))) '#f))) (set! G2e2f@mkstx (lambda (G3248@e G3249@m* G324a@s* G324b@ae*) (if (if (G2e0f@stx? G3248@e) (begin '#f (not (G2dbd@top-marked? G3249@m*))) '#f) (call-with-values (lambda () (G2e2d@join-wraps G3249@m* G324a@s* G324b@ae* G3248@e)) (lambda (G3253@G3250 G3254@G3251 G3255@G3252) ((lambda (G3259@ae* G325a@s* G325b@m*) (G2e11@make-stx (G2e13@stx-expr G3248@e) G325b@m* G325a@s* G3259@ae*)) G3255@G3252 G3254@G3251 G3253@G3250))) (G2e11@make-stx G3248@e G3249@m* G324a@s* G324b@ae*)))) (set! G2e31@add-mark (lambda (G325f@m G3260@e G3261@ae) (G2e2f@mkstx G3260@e (list G325f@m) '(shift) (list G3261@ae)))) (set! G2e33@add-subst (lambda (G3265@subst G3266@e) (G2e2f@mkstx G3266@e '() (list G3265@subst) '()))) (set! G2e35@syntax-kind? (lambda (G3269@x G326a@p?) (if (G2e0f@stx? G3269@x) (G2e35@syntax-kind? (G2e13@stx-expr G3269@x) G326a@p?) (if (G298e@G288e@annotation? G3269@x) (G2e35@syntax-kind? (G2990@G2892@annotation-expression G3269@x) G326a@p?) (G326a@p? G3269@x))))) (set! G2e37@syntax-vector->list (lambda (G326d@x) (if (G2e0f@stx? G326d@x) ((lambda (G326f@ls G3270@m* G3271@s* G3272@ae*) (map (lambda (G3277@x) (G2e2f@mkstx G3277@x G3270@m* G3271@s* G3272@ae*)) G326f@ls)) (G2e37@syntax-vector->list (G2e13@stx-expr G326d@x)) (G2e15@stx-mark* G326d@x) (G2e17@stx-subst* G326d@x) (G2e19@stx-ae* G326d@x)) (if (G298e@G288e@annotation? G326d@x) (G2e37@syntax-vector->list (G2990@G2892@annotation-expression G326d@x)) (if (vector? G326d@x) (vector->list G326d@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G326d@x)))))) (set! G2e39@syntax-pair? (lambda (G3279@x) (G2e35@syntax-kind? G3279@x pair?))) (set! G2e3b@syntax-vector? (lambda (G327b@x) (G2e35@syntax-kind? G327b@x vector?))) (set! G2e3d@syntax-null? (lambda (G327d@x) (G2e35@syntax-kind? G327d@x null?))) (set! G2e3f@syntax-list? (lambda (G327f@x) ((lambda (G3281@t) (if G3281@t G3281@t (begin '#f (if (G2e39@syntax-pair? G327f@x) (begin '#f (G2e3f@syntax-list? (G2e43@syntax-cdr G327f@x))) '#f)))) (G2e3d@syntax-null? G327f@x)))) (set! G2e41@syntax-car (lambda (G3283@x) (if (G2e0f@stx? G3283@x) (G2e2f@mkstx (G2e41@syntax-car (G2e13@stx-expr G3283@x)) (G2e15@stx-mark* G3283@x) (G2e17@stx-subst* G3283@x) (G2e19@stx-ae* G3283@x)) (if (G298e@G288e@annotation? G3283@x) (G2e41@syntax-car (G2990@G2892@annotation-expression G3283@x)) (if (pair? G3283@x) (car G3283@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3283@x)))))) (set! G2e43@syntax-cdr (lambda (G3285@x) (if (G2e0f@stx? G3285@x) (G2e2f@mkstx (G2e43@syntax-cdr (G2e13@stx-expr G3285@x)) (G2e15@stx-mark* G3285@x) (G2e17@stx-subst* G3285@x) (G2e19@stx-ae* G3285@x)) (if (G298e@G288e@annotation? G3285@x) (G2e43@syntax-cdr (G2990@G2892@annotation-expression G3285@x)) (if (pair? G3285@x) (cdr G3285@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3285@x)))))) (set! G2e45@syntax->list (lambda (G3287@x) (if (G2e39@syntax-pair? G3287@x) (cons (G2e41@syntax-car G3287@x) (G2e45@syntax->list (G2e43@syntax-cdr G3287@x))) (if (G2e3d@syntax-null? G3287@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3287@x))))) (set! G2e47@id? (lambda (G3289@x) (if (G2e0f@stx? G3289@x) (begin '#f ((lambda (G328b@expr) (symbol? (if (G298e@G288e@annotation? G328b@expr) (G298d@G288c@annotation-stripped G328b@expr) G328b@expr))) (G2e13@stx-expr G3289@x))) '#f))) (set! G2e49@id->sym (lambda (G328d@x) (begin (if (not (G2e0f@stx? G328d@x)) (error 'id->sym '"BUG in ikarus: not an id" G328d@x) (void)) ((lambda (G328f@expr) ((lambda (G3291@sym) (if (symbol? G3291@sym) G3291@sym (error 'id->sym '"BUG in ikarus: not an id" G328d@x))) (if (G298e@G288e@annotation? G328f@expr) (G298d@G288c@annotation-stripped G328f@expr) G328f@expr))) (G2e13@stx-expr G328d@x))))) (set! G2e4b@same-marks? (lambda (G3293@x G3294@y) ((lambda (G3297@t) (if G3297@t G3297@t (begin '#f (if (pair? G3293@x) (if (pair? G3294@y) (if (eq? (car G3293@x) (car G3294@y)) (begin '#f (G2e4b@same-marks? (cdr G3293@x) (cdr G3294@y))) '#f) '#f) '#f)))) (if (null? G3293@x) (begin '#f (null? G3294@y)) '#f)))) (set! G2e4d@bound-id=? (lambda (G3299@x G329a@y) (if (eq? (G2e49@id->sym G3299@x) (G2e49@id->sym G329a@y)) (begin '#f (G2e4b@same-marks? (G2e15@stx-mark* G3299@x) (G2e15@stx-mark* G329a@y))) '#f))) (set! G2e4f@free-id=? (lambda (G329d@i G329e@j) ((lambda (G32a1@t0 G32a2@t1) (if ((lambda (G32a5@t) (if G32a5@t G32a5@t (begin '#f G32a2@t1))) G32a1@t0) (eq? G32a1@t0 G32a2@t1) (eq? (G2e49@id->sym G329d@i) (G2e49@id->sym G329e@j)))) (G2e63@id->real-label G329d@i) (G2e63@id->real-label G329e@j)))) (set! G2e51@valid-bound-ids? (lambda (G32a7@id*) (if (for-all G2e47@id? G32a7@id*) (begin '#f (G2e53@distinct-bound-ids? G32a7@id*)) '#f))) (set! G2e53@distinct-bound-ids? (lambda (G32a9@id*) ((lambda (G32ab@t) (if G32ab@t G32ab@t (begin '#f (if (not (G2e55@bound-id-member? (car G32a9@id*) (cdr G32a9@id*))) (begin '#f (G2e53@distinct-bound-ids? (cdr G32a9@id*))) '#f)))) (null? G32a9@id*)))) (set! G2e55@bound-id-member? (lambda (G32ad@id G32ae@id*) (if (pair? G32ae@id*) (begin '#f ((lambda (G32b1@t) (if G32b1@t G32b1@t (begin '#f (G2e55@bound-id-member? G32ad@id (cdr G32ae@id*))))) (G2e4d@bound-id=? G32ad@id (car G32ae@id*)))) '#f))) (set! G2e57@self-evaluating? (lambda (G32b3@x) ((lambda (G32b5@t) (if G32b5@t G32b5@t ((lambda (G32b7@t) (if G32b7@t G32b7@t ((lambda (G32b9@t) (if G32b9@t G32b9@t ((lambda (G32bb@t) (if G32bb@t G32bb@t ((lambda (G32bd@t) (if G32bd@t G32bd@t (begin '#f (bytevector? G32b3@x)))) (regexp? G32b3@x)))) (boolean? G32b3@x)))) (char? G32b3@x)))) (string? G32b3@x)))) (number? G32b3@x)))) (set! G2e59@strip-annotations (lambda (G32bf@x) (if (pair? G32bf@x) (cons (G2e59@strip-annotations (car G32bf@x)) (G2e59@strip-annotations (cdr G32bf@x))) (if (vector? G32bf@x) (vector-map G2e59@strip-annotations G32bf@x) (if (G298e@G288e@annotation? G32bf@x) (G298d@G288c@annotation-stripped G32bf@x) G32bf@x))))) (set! G2e5b@strip (lambda (G32c1@x G32c2@m*) (if (G2dbd@top-marked? G32c2@m*) (if ((lambda (G32c5@t) (if G32c5@t G32c5@t ((lambda (G32c7@t) (if G32c7@t G32c7@t (begin '#f (if (vector? G32c1@x) (if (> (vector-length G32c1@x) '0) (begin '#f (G298e@G288e@annotation? (vector-ref G32c1@x '0))) '#f) '#f)))) (if (pair? G32c1@x) (begin '#f (G298e@G288e@annotation? (car G32c1@x))) '#f)))) (G298e@G288e@annotation? G32c1@x)) (G2e59@strip-annotations G32c1@x) G32c1@x) ((letrec ((G32c9@f (lambda (G32cb@x) (if (G2e0f@stx? G32cb@x) (G2e5b@strip (G2e13@stx-expr G32cb@x) (G2e15@stx-mark* G32cb@x)) (if (G298e@G288e@annotation? G32cb@x) (G298d@G288c@annotation-stripped G32cb@x) (if (pair? G32cb@x) ((lambda (G32cd@a G32ce@d) (if (if (eq? G32cd@a (car G32cb@x)) (begin '#f (eq? G32ce@d (cdr G32cb@x))) '#f) G32cb@x (cons G32cd@a G32ce@d))) (G32c9@f (car G32cb@x)) (G32c9@f (cdr G32cb@x))) (if (vector? G32cb@x) ((lambda (G32d1@old) ((lambda (G32d3@new) (if (for-all eq? G32d1@old G32d3@new) G32cb@x (list->vector G32d3@new))) (map G32c9@f G32d1@old))) (vector->list G32cb@x)) G32cb@x))))))) G32c9@f) G32c1@x)))) (set! G2e5d@stx->datum (lambda (G32d5@x) (G2e5b@strip G32d5@x '()))) (set! G2e5f@same-marks*? (lambda (G32d7@mark* G32d8@mark** G32d9@si) (if (null? G32d9@si) '#f (if (G2e4b@same-marks? G32d7@mark* (vector-ref G32d8@mark** (car G32d9@si))) (car G32d9@si) (G2e5f@same-marks*? G32d7@mark* G32d8@mark** (cdr G32d9@si)))))) (set! G2e61@id->label (lambda (G32dd@id) ((lambda (G32df@t) (if G32df@t G32df@t (begin '#f ((lambda (G32e1@t) (if G32e1@t ((lambda (G32e3@env) ((lambda (G32e5@rib) (call-with-values (lambda () (G2dc7@gen-define-label+loc G32dd@id G32e5@rib)) (lambda (G32e9@G32e7 G32ea@G32e8) ((lambda (G32ed@loc_ G32ee@lab) (begin (G2df6@extend-rib! G32e5@rib G32dd@id G32ee@lab) G32ee@lab)) G32ea@G32e8 G32e9@G32e7)))) (G313b@interaction-env-rib G32e3@env))) G32e1@t) '#f)) (G318b@top-level-context))))) (G2e63@id->real-label G32dd@id)))) (set! G2e63@id->real-label (lambda (G32f1@id) ((lambda (G32f3@sym) ((letrec ((G32f5@search (lambda (G32f7@subst* G32f8@mark*) (if (null? G32f7@subst*) '#f (if (eq? (car G32f7@subst*) 'shift) (G32f5@search (cdr G32f7@subst*) (cdr G32f8@mark*)) ((lambda (G32fb@rib) ((lambda (G32fd@t) (if G32fd@t ((lambda (G32ff@ht) ((lambda (G3301@si) ((lambda (G3303@i) (if G3303@i (vector-ref (G2de0@rib-label* G32fb@rib) G3303@i) (G32f5@search (cdr G32f7@subst*) G32f8@mark*))) (if G3301@si (begin '#f (G2e5f@same-marks*? G32f8@mark* (G2dde@rib-mark** G32fb@rib) (reverse G3301@si))) '#f))) (hashtable-ref G32ff@ht G32f3@sym '#f))) G32fd@t) ((lambda (G3305@t) (if G3305@t G3305@t (begin '#f ((letrec ((G3307@f (lambda (G3309@sym* G330a@mark** G330b@label*) (if (null? G3309@sym*) (G32f5@search (cdr G32f7@subst*) G32f8@mark*) (if (if (eq? (car G3309@sym*) G32f3@sym) (begin '#f (G2e4b@same-marks? (car G330a@mark**) G32f8@mark*)) '#f) (car G330b@label*) (G3307@f (cdr G3309@sym*) (cdr G330a@mark**) (cdr G330b@label*))))))) G3307@f) (G2ddc@rib-sym* G32fb@rib) (G2dde@rib-mark** G32fb@rib) (G2de0@rib-label* G32fb@rib))))) (G2df4@find-label G32fb@rib G32f3@sym G32f8@mark*)))) (G2de2@rib-sealed/freq G32fb@rib))) (car G32f7@subst*))))))) G32f5@search) (G2e17@stx-subst* G32f1@id) (G2e15@stx-mark* G32f1@id))) (G2e49@id->sym G32f1@id)))) (set! G2e65@label->binding (lambda (G330f@x G3310@r) ((lambda (G3313@t) (if G3313@t ((lambda (G3315@b) (if (if (pair? G3315@b) (begin '#f (eq? (car G3315@b) '$core-rtd)) '#f) (cons '$rtd (map G3040@bless (cdr G3315@b))) (if (if (pair? G3315@b) (begin '#f (eq? (car G3315@b) 'global-rtd)) '#f) ((lambda (G3317@lib G3318@loc) (cons '$rtd (symbol-value G3318@loc))) (cadr G3315@b) (cddr G3315@b)) G3315@b))) G3313@t) ((lambda (G331b@t) (if G331b@t (cdr G331b@t) ((lambda (G331d@t) (if G331d@t ((lambda (G331f@env) ((lambda (G3321@t) (if G3321@t ((lambda (G3323@p) (cons* 'lexical (cdr G3323@p) '#f)) G3321@t) '(displaced-lexical . #f))) (assq G330f@x (G313f@interaction-env-locs G331f@env)))) G331d@t) '(displaced-lexical . #f))) (G318b@top-level-context)))) (assq G330f@x G3310@r)))) (G2c3b@G2acf@imported-label->binding G330f@x)))) (set! G2e67@make-binding cons) (set! G2e69@binding-type car) (set! G2e6b@binding-value cdr) (set! G2e6d@raise-unbound-error (lambda (G3325@id) (G317b@syntax-violation* '#f '"unbound identifier" G3325@id (G4c5c@G4bfc@make-undefined-violation)))) (set! G2e6f@syntax-type (lambda (G3327@e G3328@r) (if (G2e47@id? G3327@e) ((lambda (G332b@id) ((lambda (G332d@label) ((lambda (G332f@b) ((lambda (G3331@type) ((lambda () (begin (if (not G332d@label) (G2e6d@raise-unbound-error G332b@id) (void)) ((lambda (G3333@t) (if (memv G3333@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3331@type (G2e6b@binding-value G332f@b) G332b@id) (values 'other '#f '#f))) G3331@type))))) (G2e69@binding-type G332f@b))) (G2e65@label->binding G332d@label G3328@r))) (G2e61@id->label G332b@id))) G3327@e) (if (G2e39@syntax-pair? G3327@e) ((lambda (G3335@id) (if (G2e47@id? G3335@id) ((lambda (G3337@label) ((lambda (G3339@b) ((lambda (G333b@type) ((lambda () (begin (if (not G3337@label) (G2e6d@raise-unbound-error G3335@id) (void)) ((lambda (G333d@t) (if (memv G333d@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G333b@type (G2e6b@binding-value G3339@b) G3335@id) (values 'call '#f '#f))) G333b@type))))) (G2e69@binding-type G3339@b))) (G2e65@label->binding G3337@label G3328@r))) (G2e61@id->label G3335@id)) (values 'call '#f '#f))) (G2e41@syntax-car G3327@e)) ((lambda (G333f@d) (if (G2e57@self-evaluating? G333f@d) (values 'constant G333f@d '#f) (values 'other '#f '#f))) (G2e5d@stx->datum G3327@e)))))) (set! G2e86@sanitize-binding (lambda (G3341@x G3342@src) (if (procedure? G3341@x) (cons* 'local-macro G3341@x G3342@src) (if (if (pair? G3341@x) (if (eq? (car G3341@x) 'macro!) (begin '#f (procedure? (cdr G3341@x))) '#f) '#f) (cons* 'local-macro! (cdr G3341@x) G3342@src) (if (if (pair? G3341@x) (begin '#f (eq? (car G3341@x) '$rtd)) '#f) G3341@x (assertion-violation 'expand '"invalid transformer" G3341@x)))))) (set! G2e88@make-variable-transformer (lambda (G3345@x) (if (procedure? G3345@x) (cons 'macro! G3345@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3345@x)))) (set! G2e8a@variable-transformer? (lambda (G3347@x) (if (pair? G3347@x) (if (eq? (car G3347@x) 'macro!) (begin '#f (procedure? (cdr G3347@x))) '#f) '#f))) (set! G2e8c@variable-transformer-procedure (lambda (G3349@x) (if (G2e8a@variable-transformer? G3349@x) (cdr G3349@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G3349@x)))) (set! G2e8e@make-eval-transformer (lambda (G334b@x) (G2e86@sanitize-binding (eval-core (G29fd@G29a5@expanded->core G334b@x)) G334b@x))) (set! G3012@parse-define (lambda (G334d@x) ((lambda (G334f@t) ((lambda (G3351@ls/false) (if (if G3351@ls/false (begin '#f (apply (lambda (G3353@id G3354@fmls G3355@b G3356@b*) (G2e47@id? G3353@id)) G3351@ls/false)) '#f) (apply (lambda (G335b@id G335c@fmls G335d@b G335e@b*) (begin (G30b2@verify-formals G335c@fmls G334d@x) (values G335b@id (cons 'defun (cons G335c@fmls (cons G335d@b G335e@b*)))))) G3351@ls/false) ((lambda (G3363@t) ((lambda (G3365@ls/false) (if (if G3365@ls/false (begin '#f (apply (lambda (G3367@id G3368@val) (G2e47@id? G3367@id)) G3365@ls/false)) '#f) (apply (lambda (G336b@id G336c@val) (values G336b@id (cons 'expr G336c@val))) G3365@ls/false) ((lambda (G336f@t) ((lambda (G3371@ls/false) (if (if G3371@ls/false (begin '#f (apply (lambda (G3373@id) (G2e47@id? G3373@id)) G3371@ls/false)) '#f) (apply (lambda (G3375@id) (values G3375@id (cons 'expr (G3040@bless '(void))))) G3371@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G336f@t))) (G308a@syntax-dispatch G336f@t '(_ any)))) G3363@t))) (G308a@syntax-dispatch G3363@t '(_ any any)))) G334f@t))) (G308a@syntax-dispatch G334f@t '(_ (any . any) any . each-any)))) G334d@x))) (set! G3014@parse-define-syntax (lambda (G3377@x) ((lambda (G3379@t) ((lambda (G337b@ls/false) (if (if G337b@ls/false (begin '#f (apply (lambda (G337d@id G337e@val) (G2e47@id? G337d@id)) G337b@ls/false)) '#f) (apply (lambda (G3381@id G3382@val) (values G3381@id G3382@val)) G337b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3379@t))) (G308a@syntax-dispatch G3379@t '(_ any any)))) G3377@x))) (set! G3016@scheme-stx-hashtable (make-eq-hashtable)) (set! G3018@scheme-stx (lambda (G3385@sym) ((lambda (G3387@t) (if G3387@t G3387@t (begin '#f ((lambda (G3389@subst) ((lambda (G338b@stx) ((lambda (G338d@stx) ((lambda () (begin (hashtable-set! G3016@scheme-stx-hashtable G3385@sym G338d@stx) G338d@stx)))) ((lambda (G338f@t) (if G338f@t ((lambda (G3391@x) ((lambda (G3393@name G3394@label) (G2e33@add-subst (G2dda@make-rib (list G3393@name) (list G2dbb@top-mark*) (list G3394@label) '#f '#f) G338b@stx)) (car G3391@x) (cdr G3391@x))) G338f@t) G338b@stx)) (assq G3385@sym G3389@subst)))) (G2e11@make-stx G3385@sym G2dbb@top-mark* '() '()))) (G2c11@G2a7b@library-subst (G2c35@G2ac3@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G3016@scheme-stx-hashtable G3385@sym '#f)))) (set! G301a@lexical-var car) (set! G301c@lexical-mutable? cdr) (set! G301e@set-lexical-mutable! set-cdr!) (set! G3020@add-lexical (lambda (G3397@lab G3398@lex G3399@r) (cons (cons* G3397@lab 'lexical G3398@lex '#f) G3399@r))) (set! G3022@add-lexicals (lambda (G339d@lab* G339e@lex* G339f@r) (if (null? G339d@lab*) G339f@r (G3022@add-lexicals (cdr G339d@lab*) (cdr G339e@lex*) (G3020@add-lexical (car G339d@lab*) (car G339e@lex*) G339f@r))))) (set! G3024@letrec-helper (lambda (G33a3@e G33a4@r G33a5@mr G33a6@build) ((lambda (G33ab@t) ((lambda (G33ad@ls/false) (if G33ad@ls/false (apply (lambda (G33af@lhs* G33b0@rhs* G33b1@b G33b2@b*) (if (not (G2e51@valid-bound-ids? G33af@lhs*)) (G3044@invalid-fmls-error G33a3@e G33af@lhs*) ((lambda (G33b7@lex* G33b8@lab*) ((lambda (G33bb@rib G33bc@r) ((lambda (G33bf@body G33c0@rhs*) (G33a6@build '#f G33b7@lex* G33c0@rhs* G33bf@body)) (G30c4@chi-internal (G2e33@add-subst G33bb@rib (cons G33b1@b G33b2@b*)) G33bc@r G33a5@mr) (G30aa@chi-expr* (map (lambda (G33c3@x) (G2e33@add-subst G33bb@rib G33c3@x)) G33b0@rhs*) G33bc@r G33a5@mr))) (G2e00@make-full-rib G33af@lhs* G33b8@lab*) (G3022@add-lexicals G33b8@lab* G33b7@lex* G33a4@r))) (map G2dbf@gen-lexical G33af@lhs*) (map G2dc3@gen-label G33af@lhs*)))) G33ad@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G33ab@t))) (G308a@syntax-dispatch G33ab@t '(_ #(each (any any)) any . each-any)))) G33a3@e))) (set! G3026@letrec-transformer (lambda (G33c5@e G33c6@r G33c7@mr) (G3024@letrec-helper G33c5@e G33c6@r G33c7@mr G2da4@G2d17@build-letrec))) (set! G3028@letrec*-transformer (lambda (G33cb@e G33cc@r G33cd@mr) (G3024@letrec-helper G33cb@e G33cc@r G33cd@mr G2da5@G2d19@build-letrec*))) (set! G302a@fluid-let-syntax-transformer (lambda (G33d1@e G33d2@r G33d3@mr) ((lambda (G33d8@lookup) (begin (set! G33d8@lookup (lambda (G33eb@x) ((lambda (G33ed@t) (if G33ed@t G33ed@t (begin '#f (G317d@syntax-violation '#f '"unbound identifier" G33d1@e G33eb@x)))) (G2e61@id->label G33eb@x)))) ((lambda (G33d9@t) ((lambda (G33db@ls/false) (if G33db@ls/false (apply (lambda (G33dd@lhs* G33de@rhs* G33df@b G33e0@b*) (if (not (G2e51@valid-bound-ids? G33dd@lhs*)) (G3044@invalid-fmls-error G33d1@e G33dd@lhs*) ((lambda (G33e5@lab* G33e6@rhs*) (G30c4@chi-internal (cons G33df@b G33e0@b*) (append (map cons G33e5@lab* G33e6@rhs*) G33d2@r) (append (map cons G33e5@lab* G33e6@rhs*) G33d3@mr))) (map G33d8@lookup G33dd@lhs*) (map (lambda (G33e9@x) (G2e8e@make-eval-transformer (G30eb@expand-transformer G33e9@x G33d3@mr))) G33de@rhs*)))) G33db@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G33d9@t))) (G308a@syntax-dispatch G33d9@t '(_ #(each (any any)) any . each-any)))) G33d1@e))) '#f))) (set! G302c@type-descriptor-transformer (lambda (G33ef@e G33f0@r G33f1@mr) ((lambda (G33f5@t) ((lambda (G33f7@ls/false) (if (if G33f7@ls/false (begin '#f (apply (lambda (G33f9@id) (G2e47@id? G33f9@id)) G33f7@ls/false)) '#f) (apply (lambda (G33fb@id) ((lambda (G33fd@lab) ((lambda (G33ff@b) ((lambda (G3401@type) ((lambda () (begin (if (not G33fd@lab) (G2e6d@raise-unbound-error G33fb@id) (void)) (if (not (if (eq? G3401@type '$rtd) (begin '#f (not (list? (G2e6b@binding-value G33ff@b)))) '#f)) (G317d@syntax-violation '#f '"not a record type" G33ef@e) (void)) (list 'quote (G2e6b@binding-value G33ff@b)))))) (G2e69@binding-type G33ff@b))) (G2e65@label->binding G33fd@lab G33f0@r))) (G2e61@id->label G33fb@id))) G33f7@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G33f5@t))) (G308a@syntax-dispatch G33f5@t '(_ any)))) G33ef@e))) (set! G302e@record-type-descriptor-transformer (lambda (G3403@e G3404@r G3405@mr) ((lambda (G3409@t) ((lambda (G340b@ls/false) (if (if G340b@ls/false (begin '#f (apply (lambda (G340d@id) (G2e47@id? G340d@id)) G340b@ls/false)) '#f) (apply (lambda (G340f@id) ((lambda (G3411@lab) ((lambda (G3413@b) ((lambda (G3415@type) ((lambda () (begin (if (not G3411@lab) (G2e6d@raise-unbound-error G340f@id) (void)) (if (not (if (eq? G3415@type '$rtd) (begin '#f (list? (G2e6b@binding-value G3413@b))) '#f)) (G317d@syntax-violation '#f '"not a record type" G3403@e) (void)) (G30ae@chi-expr (car (G2e6b@binding-value G3413@b)) G3404@r G3405@mr))))) (G2e69@binding-type G3413@b))) (G2e65@label->binding G3411@lab G3404@r))) (G2e61@id->label G340f@id))) G340b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3409@t))) (G308a@syntax-dispatch G3409@t '(_ any)))) G3403@e))) (set! G3030@record-constructor-descriptor-transformer (lambda (G3417@e G3418@r G3419@mr) ((lambda (G341d@t) ((lambda (G341f@ls/false) (if (if G341f@ls/false (begin '#f (apply (lambda (G3421@id) (G2e47@id? G3421@id)) G341f@ls/false)) '#f) (apply (lambda (G3423@id) ((lambda (G3425@lab) ((lambda (G3427@b) ((lambda (G3429@type) ((lambda () (begin (if (not G3425@lab) (G2e6d@raise-unbound-error G3423@id) (void)) (if (not (if (eq? G3429@type '$rtd) (begin '#f (list? (G2e6b@binding-value G3427@b))) '#f)) (G317d@syntax-violation '#f '"invalid type" G3417@e) (void)) (G30ae@chi-expr (cadr (G2e6b@binding-value G3427@b)) G3418@r G3419@mr))))) (G2e69@binding-type G3427@b))) (G2e65@label->binding G3425@lab G3418@r))) (G2e61@id->label G3423@id))) G341f@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G341d@t))) (G308a@syntax-dispatch G341d@t '(_ any)))) G3417@e))) (set! G3032@when-macro (lambda (G342b@e) ((lambda (G342d@t) ((lambda (G342f@ls/false) (if G342f@ls/false (apply (lambda (G3431@test G3432@e G3433@e*) (G3040@bless (list 'if G3431@test (cons 'begin (cons G3432@e G3433@e*))))) G342f@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G342d@t))) (G308a@syntax-dispatch G342d@t '(_ any any . each-any)))) G342b@e))) (set! G3034@unless-macro (lambda (G3437@e) ((lambda (G3439@t) ((lambda (G343b@ls/false) (if G343b@ls/false (apply (lambda (G343d@test G343e@e G343f@e*) (G3040@bless (list 'if (list 'not G343d@test) (cons 'begin (cons G343e@e G343f@e*))))) G343b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3439@t))) (G308a@syntax-dispatch G3439@t '(_ any any . each-any)))) G3437@e))) (set! G3036@if-transformer (lambda (G3443@e G3444@r G3445@mr) ((lambda (G3449@t) ((lambda (G344b@ls/false) (if G344b@ls/false (apply (lambda (G344d@e0 G344e@e1 G344f@e2) (list 'if (G30ae@chi-expr G344d@e0 G3444@r G3445@mr) (G30ae@chi-expr G344e@e1 G3444@r G3445@mr) (G30ae@chi-expr G344f@e2 G3444@r G3445@mr))) G344b@ls/false) ((lambda (G3453@t) ((lambda (G3455@ls/false) (if G3455@ls/false (apply (lambda (G3457@e0 G3458@e1) (list 'if (G30ae@chi-expr G3457@e0 G3444@r G3445@mr) (G30ae@chi-expr G3458@e1 G3444@r G3445@mr) (G2da3@G2d15@build-void))) G3455@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3453@t))) (G308a@syntax-dispatch G3453@t '(_ any any)))) G3449@t))) (G308a@syntax-dispatch G3449@t '(_ any any any)))) G3443@e))) (set! G3038@case-macro (lambda (G345b@e) ((lambda (G345e@build-last G3460@build-one) (begin (set! G345e@build-last (lambda (G3485@cls) ((lambda (G3487@t) ((lambda (G3489@ls/false) (if G3489@ls/false (apply (lambda (G348b@e G348c@e*) (cons 'begin (cons G348b@e G348c@e*))) G3489@ls/false) ((lambda (G348f@t) ((lambda (G3491@ls/false) (if G3491@ls/false (apply (lambda () (G3460@build-one G3485@cls '(if #f #f))) G3491@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G348f@t))) (G308a@syntax-dispatch G348f@t '_))) G3487@t))) (G308a@syntax-dispatch G3487@t '(#(scheme-id else) any . each-any)))) G3485@cls))) (set! G3460@build-one (lambda (G3477@cls G3478@k) ((lambda (G347b@t) ((lambda (G347d@ls/false) (if G347d@ls/false (apply (lambda (G347f@d* G3480@e G3481@e*) (list 'if (list 'memv 't (list 'quote G347f@d*)) (cons 'begin (cons G3480@e G3481@e*)) G3478@k)) G347d@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G347b@t))) (G308a@syntax-dispatch G347b@t '(each-any any . each-any)))) G3477@cls))) ((lambda (G3461@t) ((lambda (G3463@ls/false) (if G3463@ls/false (apply (lambda (G3465@expr) (G3040@bless (cons 'let (cons (list (list 't G3465@expr)) '((if #f #f)))))) G3463@ls/false) ((lambda (G3467@t) ((lambda (G3469@ls/false) (if G3469@ls/false (apply (lambda (G346b@expr G346c@cls G346d@cls*) (G3040@bless (list 'let (list (list 't G346b@expr)) ((letrec ((G3471@f (lambda (G3473@cls G3474@cls*) (if (null? G3474@cls*) (G345e@build-last G3473@cls) (G3460@build-one G3473@cls (G3471@f (car G3474@cls*) (cdr G3474@cls*))))))) G3471@f) G346c@cls G346d@cls*)))) G3469@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3467@t))) (G308a@syntax-dispatch G3467@t '(_ any any . each-any)))) G3461@t))) (G308a@syntax-dispatch G3461@t '(_ any)))) G345b@e))) '#f '#f))) (set! G303a@quote-transformer (lambda (G3493@e G3494@r G3495@mr) ((lambda (G3499@t) ((lambda (G349b@ls/false) (if G349b@ls/false (apply (lambda (G349d@datum) (list 'quote (G2e5d@stx->datum G349d@datum))) G349b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3499@t))) (G308a@syntax-dispatch G3499@t '(_ any)))) G3493@e))) (set! G303c@case-lambda-transformer (lambda (G349f@e G34a0@r G34a1@mr) ((lambda (G34a5@t) ((lambda (G34a7@ls/false) (if G34a7@ls/false (apply (lambda (G34a9@fmls* G34aa@b* G34ab@b**) (call-with-values (lambda () (G30b6@chi-lambda-clause* G349f@e G34a9@fmls* (map cons G34aa@b* G34ab@b**) G34a0@r G34a1@mr)) (lambda (G34b1@G34af G34b2@G34b0) ((lambda (G34b5@body* G34b6@fmls*) (G2da0@G2cc9@build-case-lambda '#f G34b6@fmls* G34b5@body*)) G34b2@G34b0 G34b1@G34af)))) G34a7@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G34a5@t))) (G308a@syntax-dispatch G34a5@t '(_ . #(each (any any . each-any)))))) G349f@e))) (set! G303e@lambda-transformer (lambda (G34b9@e G34ba@r G34bb@mr) ((lambda (G34bf@t) ((lambda (G34c1@ls/false) (if G34c1@ls/false (apply (lambda (G34c3@fmls G34c4@b G34c5@b*) (call-with-values (lambda () (G30b4@chi-lambda-clause G34b9@e G34c3@fmls (cons G34c4@b G34c5@b*) G34ba@r G34bb@mr)) (lambda (G34cb@G34c9 G34cc@G34ca) ((lambda (G34cf@body G34d0@fmls) (G2d9f@G2cc7@build-lambda '#f G34d0@fmls G34cf@body)) G34cc@G34ca G34cb@G34c9)))) G34c1@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G34bf@t))) (G308a@syntax-dispatch G34bf@t '(_ any any . each-any)))) G34b9@e))) (set! G3040@bless (lambda (G34d3@x) (G2e2f@mkstx ((letrec ((G34d5@f (lambda (G34d7@x) (if (G2e0f@stx? G34d7@x) G34d7@x (if (pair? G34d7@x) (cons (G34d5@f (car G34d7@x)) (G34d5@f (cdr G34d7@x))) (if (symbol? G34d7@x) (G3018@scheme-stx G34d7@x) (if (vector? G34d7@x) (vector-map G34d5@f G34d7@x) G34d7@x))))))) G34d5@f) G34d3@x) '() '() '()))) (set! G3042@with-syntax-macro (lambda (G34d9@e) ((lambda (G34db@t) ((lambda (G34dd@ls/false) (if G34dd@ls/false (apply (lambda (G34df@pat* G34e0@expr* G34e1@b G34e2@b*) ((lambda (G34e7@idn*) (begin (G30b2@verify-formals (map car G34e7@idn*) G34d9@e) ((lambda (G34e9@t*) (G3040@bless (list 'let (map list G34e9@t* G34e0@expr*) ((letrec ((G34eb@f (lambda (G34ed@pat* G34ee@t*) (if (null? G34ed@pat*) (cons 'begin (cons '#f (cons G34e1@b G34e2@b*))) (list 'syntax-case (car G34ee@t*) '() (list (car G34ed@pat*) (G34eb@f (cdr G34ed@pat*) (cdr G34ee@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G34ed@pat*)) (car G34ee@t*)))))))) G34eb@f) G34df@pat* G34e9@t*)))) (G3169@generate-temporaries G34e0@expr*)))) ((letrec ((G34f1@f (lambda (G34f3@pat*) (if (null? G34f3@pat*) '() (call-with-values (lambda () (G3088@convert-pattern (car G34f3@pat*) '())) (lambda (G34f7@G34f5 G34f8@G34f6) ((lambda (G34fb@idn* G34fc@pat) (append G34fb@idn* (G34f1@f (cdr G34f3@pat*)))) G34f8@G34f6 G34f7@G34f5))))))) G34f1@f) G34df@pat*))) G34dd@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G34db@t))) (G308a@syntax-dispatch G34db@t '(_ #(each (any any)) any . each-any)))) G34d9@e))) (set! G3044@invalid-fmls-error (lambda (G34ff@stx G3500@fmls) ((lambda (G3503@t) ((lambda (G3505@ls/false) (if G3505@ls/false (apply (lambda (G3507@id* G3508@last) ((letrec ((G350b@f (lambda (G350d@id*) (if (null? G350d@id*) (values) (if (not (G2e47@id? (car G350d@id*))) (G317d@syntax-violation '#f '"not an identifier" G34ff@stx (car G350d@id*)) (begin (G350b@f (cdr G350d@id*)) (if (G2e55@bound-id-member? (car G350d@id*) (cdr G350d@id*)) (G317d@syntax-violation '#f '"duplicate binding" G34ff@stx (car G350d@id*)) (void)))))))) G350b@f) (if (G2e47@id? G3508@last) (cons G3508@last G3507@id*) (if (G2e3d@syntax-null? G3508@last) G3507@id* (G317d@syntax-violation '#f '"not an identifier" G34ff@stx G3508@last))))) G3505@ls/false) ((lambda (G350f@t) ((lambda (G3511@ls/false) (if G3511@ls/false (apply (lambda () (G317d@syntax-violation '#f '"malformed binding form" G34ff@stx G3500@fmls)) G3511@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G350f@t))) (G308a@syntax-dispatch G350f@t '_))) G3503@t))) (G308a@syntax-dispatch G3503@t '#(each+ any () any)))) G3500@fmls))) (set! G3046@let-macro (lambda (G3513@stx) ((lambda (G3515@t) ((lambda (G3517@ls/false) (if G3517@ls/false (apply (lambda (G3519@lhs* G351a@rhs* G351b@b G351c@b*) (if (G2e51@valid-bound-ids? G3519@lhs*) (G3040@bless (cons (cons 'lambda (cons G3519@lhs* (cons G351b@b G351c@b*))) G351a@rhs*)) (G3044@invalid-fmls-error G3513@stx G3519@lhs*))) G3517@ls/false) ((lambda (G3521@t) ((lambda (G3523@ls/false) (if (if G3523@ls/false (begin '#f (apply (lambda (G3525@f G3526@lhs* G3527@rhs* G3528@b G3529@b*) (G2e47@id? G3525@f)) G3523@ls/false)) '#f) (apply (lambda (G352f@f G3530@lhs* G3531@rhs* G3532@b G3533@b*) (if (G2e51@valid-bound-ids? G3530@lhs*) (G3040@bless (cons (list 'letrec (list (list G352f@f (cons 'lambda (cons G3530@lhs* (cons G3532@b G3533@b*))))) G352f@f) G3531@rhs*)) (G3044@invalid-fmls-error G3513@stx G3530@lhs*))) G3523@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3521@t))) (G308a@syntax-dispatch G3521@t '(_ any #(each (any any)) any . each-any)))) G3515@t))) (G308a@syntax-dispatch G3515@t '(_ #(each (any any)) any . each-any)))) G3513@stx))) (set! G3048@let-values-macro (lambda (G3539@stx) ((lambda (G353c@rename G353e@rename*) (begin (set! G353c@rename (lambda (G359e@x G359f@old* G35a0@new*) (begin (if (not (G2e47@id? G359e@x)) (G317d@syntax-violation '#f '"not an indentifier" G3539@stx G359e@x) (void)) (if (G2e55@bound-id-member? G359e@x G359f@old*) (G317d@syntax-violation '#f '"duplicate binding" G3539@stx G359e@x) (void)) ((lambda (G35a4@y) (values G35a4@y (cons G359e@x G359f@old*) (cons G35a4@y G35a0@new*))) (gensym (G3183@syntax->datum G359e@x)))))) (set! G353e@rename* (lambda (G358c@x* G358d@old* G358e@new*) (if (null? G358c@x*) (values '() G358d@old* G358e@new*) (call-with-values (lambda () (G353c@rename (car G358c@x*) G358d@old* G358e@new*)) (lambda (G3592@x G3593@old* G3594@new*) (call-with-values (lambda () (G353e@rename* (cdr G358c@x*) G3593@old* G3594@new*)) (lambda (G3598@x* G3599@old* G359a@new*) (values (cons G3592@x G3598@x*) G3599@old* G359a@new*)))))))) ((lambda (G353f@t) ((lambda (G3541@ls/false) (if G3541@ls/false (apply (lambda (G3543@b G3544@b*) (cons* (G3040@bless 'let) '() G3543@b G3544@b*)) G3541@ls/false) ((lambda (G3547@t) ((lambda (G3549@ls/false) (if G3549@ls/false (apply (lambda (G354b@lhs* G354c@rhs* G354d@b G354e@b*) (G3040@bless ((letrec ((G3553@f (lambda (G3555@lhs* G3556@rhs* G3557@old* G3558@new*) (if (null? G3555@lhs*) (cons 'let (cons (map list G3557@old* G3558@new*) (cons G354d@b G354e@b*))) ((lambda (G355d@t) ((lambda (G355f@ls/false) (if G355f@ls/false (apply (lambda (G3561@x*) (call-with-values (lambda () (G353e@rename* G3561@x* G3557@old* G3558@new*)) (lambda (G3566@G3563 G3567@G3564 G3568@G3565) ((lambda (G356c@new* G356d@old* G356e@y*) (list 'call-with-values (list 'lambda '() (car G3556@rhs*)) (list 'lambda G356e@y* (G3553@f (cdr G3555@lhs*) (cdr G3556@rhs*) G356d@old* G356c@new*)))) G3568@G3565 G3567@G3564 G3566@G3563)))) G355f@ls/false) ((lambda (G3572@t) ((lambda (G3574@ls/false) (if G3574@ls/false (apply (lambda (G3576@x* G3577@x) (call-with-values (lambda () (G353c@rename G3577@x G3557@old* G3558@new*)) (lambda (G357a@y G357b@old* G357c@new*) (call-with-values (lambda () (G353e@rename* G3576@x* G357b@old* G357c@new*)) (lambda (G3580@y* G3581@old* G3582@new*) (list 'call-with-values (list 'lambda '() (car G3556@rhs*)) (list 'lambda (append G3580@y* G357a@y) (G3553@f (cdr G3555@lhs*) (cdr G3556@rhs*) G3581@old* G3582@new*)))))))) G3574@ls/false) ((lambda (G3586@t) ((lambda (G3588@ls/false) (if G3588@ls/false (apply (lambda (G358a@others) (G317d@syntax-violation '#f '"malformed bindings" G3539@stx G358a@others)) G3588@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3586@t))) (G308a@syntax-dispatch G3586@t 'any))) G3572@t))) (G308a@syntax-dispatch G3572@t '#(each+ any () any)))) G355d@t))) (G308a@syntax-dispatch G355d@t 'each-any))) (car G3555@lhs*)))))) G3553@f) G354b@lhs* G354c@rhs* '() '()))) G3549@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3547@t))) (G308a@syntax-dispatch G3547@t '(_ #(each (any any)) any . each-any)))) G353f@t))) (G308a@syntax-dispatch G353f@t '(_ () any . each-any)))) G3539@stx))) '#f '#f))) (set! G304a@let*-values-macro (lambda (G35a6@stx) ((lambda (G35a9@check) (begin (set! G35a9@check (lambda (G35d8@x*) (if (not (null? G35d8@x*)) ((lambda (G35da@x) (begin (if (not (G2e47@id? G35da@x)) (G317d@syntax-violation '#f '"not an identifier" G35a6@stx G35da@x) (void)) (G35a9@check (cdr G35d8@x*)) (if (G2e55@bound-id-member? G35da@x (cdr G35d8@x*)) (G317d@syntax-violation '#f '"duplicate identifier" G35a6@stx G35da@x) (void)))) (car G35d8@x*)) (void)))) ((lambda (G35aa@t) ((lambda (G35ac@ls/false) (if G35ac@ls/false (apply (lambda (G35ae@b G35af@b*) (cons* (G3040@bless 'let) '() G35ae@b G35af@b*)) G35ac@ls/false) ((lambda (G35b2@t) ((lambda (G35b4@ls/false) (if G35b4@ls/false (apply (lambda (G35b6@lhs* G35b7@rhs* G35b8@b G35b9@b*) (G3040@bless ((letrec ((G35be@f (lambda (G35c0@lhs* G35c1@rhs*) (if (null? G35c0@lhs*) (cons 'begin (cons G35b8@b G35b9@b*)) ((lambda (G35c4@t) ((lambda (G35c6@ls/false) (if G35c6@ls/false (apply (lambda (G35c8@x*) (begin (G35a9@check G35c8@x*) (list 'call-with-values (list 'lambda '() (car G35c1@rhs*)) (list 'lambda G35c8@x* (G35be@f (cdr G35c0@lhs*) (cdr G35c1@rhs*)))))) G35c6@ls/false) ((lambda (G35ca@t) ((lambda (G35cc@ls/false) (if G35cc@ls/false (apply (lambda (G35ce@x* G35cf@x) (begin (G35a9@check (cons G35cf@x G35ce@x*)) (list 'call-with-values (list 'lambda '() (car G35c1@rhs*)) (list 'lambda (append G35ce@x* G35cf@x) (G35be@f (cdr G35c0@lhs*) (cdr G35c1@rhs*)))))) G35cc@ls/false) ((lambda (G35d2@t) ((lambda (G35d4@ls/false) (if G35d4@ls/false (apply (lambda (G35d6@others) (G317d@syntax-violation '#f '"malformed bindings" G35a6@stx G35d6@others)) G35d4@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G35d2@t))) (G308a@syntax-dispatch G35d2@t 'any))) G35ca@t))) (G308a@syntax-dispatch G35ca@t '#(each+ any () any)))) G35c4@t))) (G308a@syntax-dispatch G35c4@t 'each-any))) (car G35c0@lhs*)))))) G35be@f) G35b6@lhs* G35b7@rhs*))) G35b4@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G35b2@t))) (G308a@syntax-dispatch G35b2@t '(_ #(each (any any)) any . each-any)))) G35aa@t))) (G308a@syntax-dispatch G35aa@t '(_ () any . each-any)))) G35a6@stx))) '#f))) (set! G304c@trace-lambda-macro (lambda (G35dc@stx) ((lambda (G35de@t) ((lambda (G35e0@ls/false) (if G35e0@ls/false (apply (lambda (G35e2@who G35e3@fmls G35e4@b G35e5@b*) (if (G2e51@valid-bound-ids? G35e3@fmls) (G3040@bless (list 'make-traced-procedure (list 'quote G35e2@who) (cons 'lambda (cons G35e3@fmls (cons G35e4@b G35e5@b*))))) (G3044@invalid-fmls-error G35dc@stx G35e3@fmls))) G35e0@ls/false) ((lambda (G35ea@t) ((lambda (G35ec@ls/false) (if G35ec@ls/false (apply (lambda (G35ee@who G35ef@fmls G35f0@last G35f1@b G35f2@b*) (if (G2e51@valid-bound-ids? (cons G35f0@last G35ef@fmls)) (G3040@bless (list 'make-traced-procedure (list 'quote G35ee@who) (cons 'lambda (cons (append G35ef@fmls G35f0@last) (cons G35f1@b G35f2@b*))))) (G3044@invalid-fmls-error G35dc@stx (append G35ef@fmls G35f0@last)))) G35ec@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G35ea@t))) (G308a@syntax-dispatch G35ea@t '(_ any #(each+ any () any) any . each-any)))) G35de@t))) (G308a@syntax-dispatch G35de@t '(_ any each-any any . each-any)))) G35dc@stx))) (set! G304e@trace-define-macro (lambda (G35f8@stx) ((lambda (G35fa@t) ((lambda (G35fc@ls/false) (if G35fc@ls/false (apply (lambda (G35fe@who G35ff@fmls G3600@b G3601@b*) (if (G2e51@valid-bound-ids? G35ff@fmls) (G3040@bless (list 'define G35fe@who (list 'make-traced-procedure (list 'quote G35fe@who) (cons 'lambda (cons G35ff@fmls (cons G3600@b G3601@b*)))))) (G3044@invalid-fmls-error G35f8@stx G35ff@fmls))) G35fc@ls/false) ((lambda (G3606@t) ((lambda (G3608@ls/false) (if G3608@ls/false (apply (lambda (G360a@who G360b@fmls G360c@last G360d@b G360e@b*) (if (G2e51@valid-bound-ids? (cons G360c@last G360b@fmls)) (G3040@bless (list 'define G360a@who (list 'make-traced-procedure (list 'quote G360a@who) (cons 'lambda (cons (append G360b@fmls G360c@last) (cons G360d@b G360e@b*)))))) (G3044@invalid-fmls-error G35f8@stx (append G360b@fmls G360c@last)))) G3608@ls/false) ((lambda (G3614@t) ((lambda (G3616@ls/false) (if G3616@ls/false (apply (lambda (G3618@who G3619@expr) (if (G2e47@id? G3618@who) (G3040@bless (list 'define G3618@who (list 'let (list (list 'v G3619@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G3618@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G317d@syntax-violation '#f '"invalid name" G35f8@stx))) G3616@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3614@t))) (G308a@syntax-dispatch G3614@t '(_ any any)))) G3606@t))) (G308a@syntax-dispatch G3606@t '(_ (any . #(each+ any () any)) any . each-any)))) G35fa@t))) (G308a@syntax-dispatch G35fa@t '(_ (any . each-any) any . each-any)))) G35f8@stx))) (set! G3050@trace-define-syntax-macro (lambda (G361c@stx) ((lambda (G361e@t) ((lambda (G3620@ls/false) (if G3620@ls/false (apply (lambda (G3622@who G3623@expr) (if (G2e47@id? G3622@who) (G3040@bless (list 'define-syntax G3622@who (list 'make-traced-macro (list 'quote G3622@who) G3623@expr))) (G317d@syntax-violation '#f '"invalid name" G361c@stx))) G3620@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G361e@t))) (G308a@syntax-dispatch G361e@t '(_ any any)))) G361c@stx))) (set! G3052@trace-let/rec-syntax (lambda (G3626@who) (lambda (G3628@stx) ((lambda (G362a@t) ((lambda (G362c@ls/false) (if G362c@ls/false (apply (lambda (G362e@lhs* G362f@rhs* G3630@b G3631@b*) (if (G2e51@valid-bound-ids? G362e@lhs*) ((lambda (G3636@rhs*) (G3040@bless (cons G3626@who (cons (map list G362e@lhs* G3636@rhs*) (cons G3630@b G3631@b*))))) (map (lambda (G3638@lhs G3639@rhs) (list 'make-traced-macro (list 'quote G3638@lhs) G3639@rhs)) G362e@lhs* G362f@rhs*)) (G3044@invalid-fmls-error G3628@stx G362e@lhs*))) G362c@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G362a@t))) (G308a@syntax-dispatch G362a@t '(_ #(each (any any)) any . each-any)))) G3628@stx)))) (set! G3054@trace-let-syntax-macro (G3052@trace-let/rec-syntax 'let-syntax)) (set! G3056@trace-letrec-syntax-macro (G3052@trace-let/rec-syntax 'letrec-syntax)) (set! G3058@guard-macro (lambda (G363c@x) ((lambda (G363f@gen-clauses) (begin (set! G363f@gen-clauses (lambda (G3656@con G3657@outerk G3658@clause*) ((lambda (G365d@f G365f@f*) (begin (set! G365d@f (lambda (G3690@x G3691@k) ((lambda (G3694@t) ((lambda (G3696@ls/false) (if G3696@ls/false (apply (lambda (G3698@e G3699@p) ((lambda (G369c@t) (list 'let (list (list G369c@t G3698@e)) (list 'if G369c@t (list G3699@p G369c@t) G3691@k))) (gensym))) G3696@ls/false) ((lambda (G369e@t) ((lambda (G36a0@ls/false) (if G36a0@ls/false (apply (lambda (G36a2@e) ((lambda (G36a4@t) (list 'let (list (list G36a4@t G36a2@e)) (list 'if G36a4@t G36a4@t G3691@k))) (gensym))) G36a0@ls/false) ((lambda (G36a6@t) ((lambda (G36a8@ls/false) (if G36a8@ls/false (apply (lambda (G36aa@e G36ab@v G36ac@v*) (list 'if G36aa@e (cons 'begin (cons G36ab@v G36ac@v*)) G3691@k)) G36a8@ls/false) ((lambda (G36b0@t) ((lambda (G36b2@ls/false) (if G36b2@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid guard clause" G3690@x)) G36b2@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G36b0@t))) (G308a@syntax-dispatch G36b0@t '_))) G36a6@t))) (G308a@syntax-dispatch G36a6@t '(any any . each-any)))) G369e@t))) (G308a@syntax-dispatch G369e@t '(any)))) G3694@t))) (G308a@syntax-dispatch G3694@t '(any #(scheme-id =>) any)))) G3690@x))) (set! G365f@f* (lambda (G366a@x*) ((lambda (G366c@t) ((lambda (G366e@ls/false) (if G366e@ls/false (apply (lambda () (values (list 'raise G3656@con) '#t)) G366e@ls/false) ((lambda (G3670@t) ((lambda (G3672@ls/false) (if G3672@ls/false (apply (lambda (G3674@e G3675@e*) (values (cons 'begin (cons G3674@e G3675@e*)) '#f)) G3672@ls/false) ((lambda (G3678@t) ((lambda (G367a@ls/false) (if G367a@ls/false (apply (lambda (G367c@cls G367d@cls*) (call-with-values (lambda () (G365f@f* G367d@cls*)) (lambda (G3682@G3680 G3683@G3681) ((lambda (G3686@g G3687@e) (values (G365d@f G367c@cls G3687@e) G3686@g)) G3683@G3681 G3682@G3680)))) G367a@ls/false) ((lambda (G368a@t) ((lambda (G368c@ls/false) (if G368c@ls/false (apply (lambda (G368e@others) (G317d@syntax-violation '#f '"invalid guard clause" G368e@others)) G368c@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G368a@t))) (G308a@syntax-dispatch G368a@t 'any))) G3678@t))) (G308a@syntax-dispatch G3678@t '(any . any)))) G3670@t))) (G308a@syntax-dispatch G3670@t '((#(scheme-id else) any . each-any))))) G366c@t))) (G308a@syntax-dispatch G366c@t '()))) G366a@x*))) (call-with-values (lambda () (G365f@f* G3658@clause*)) (lambda (G3662@G3660 G3663@G3661) ((lambda (G3666@raisek G3667@code) (if G3666@raisek (list G3657@outerk G3667@code) G3667@code)) G3663@G3661 G3662@G3660))))) '#f '#f))) ((lambda (G3640@t) ((lambda (G3642@ls/false) (if (if G3642@ls/false (begin '#f (apply (lambda (G3644@con G3645@clause* G3646@b G3647@b*) (G2e47@id? G3644@con)) G3642@ls/false)) '#f) (apply (lambda (G364c@con G364d@clause* G364e@b G364f@b*) ((lambda (G3654@outerk) (G3040@bless (list 'call/cc (list 'lambda (list G3654@outerk) (list 'with-exception-handler (list 'lambda (list G364c@con) (G363f@gen-clauses G364c@con G3654@outerk G364d@clause*)) (cons 'lambda (cons '() (cons '#f (cons G364e@b G364f@b*))))))))) (gensym))) G3642@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3640@t))) (G308a@syntax-dispatch G3640@t '(_ (any . each-any) any . each-any)))) G363c@x))) '#f))) (set! G305a@define-enumeration-macro (lambda (G36b4@stx) ((lambda (G36b7@set? G36b9@remove-dups) (begin (set! G36b7@set? (lambda (G36d0@x) ((lambda (G36d2@t) (if G36d2@t G36d2@t (begin '#f (if (not (memq (car G36d0@x) (cdr G36d0@x))) (begin '#f (G36b7@set? (cdr G36d0@x))) '#f)))) (null? G36d0@x)))) (set! G36b9@remove-dups (lambda (G36ce@ls) (if (null? G36ce@ls) '() (cons (car G36ce@ls) (G36b9@remove-dups (remq (car G36ce@ls) (cdr G36ce@ls))))))) ((lambda (G36ba@t) ((lambda (G36bc@ls/false) (if (if G36bc@ls/false (begin '#f (apply (lambda (G36be@name G36bf@id* G36c0@maker) (if (G2e47@id? G36be@name) (if (G2e47@id? G36c0@maker) (begin '#f (for-all G2e47@id? G36bf@id*)) '#f) '#f)) G36bc@ls/false)) '#f) (apply (lambda (G36c4@name G36c5@id* G36c6@maker) ((lambda (G36ca@name* G36cb@mk) (G3040@bless (list 'begin (list 'define G36cb@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G36ca@name*)))) (list 'define-syntax G36c4@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G36ca@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G36c4@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G36c6@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G36c6@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G36ca@name*)) (cons 'syntax-violation (cons (list 'quote G36c6@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G36cb@mk '('(n* ...)))))))))))) (G36b9@remove-dups (G3183@syntax->datum G36c5@id*)) (gensym))) G36bc@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G36ba@t))) (G308a@syntax-dispatch G36ba@t '(_ any each-any any)))) G36b4@stx))) '#f '#f))) (set! G305c@time-macro (lambda (G36d4@stx) ((lambda (G36d6@t) ((lambda (G36d8@ls/false) (if G36d8@ls/false (apply (lambda (G36da@expr) ((lambda (G36dc@str) (G3040@bless (list 'time-it G36dc@str (list 'lambda '() G36da@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G36e0@G36de G36e1@G36df) ((lambda (G36e4@e G36e5@p) (begin (write (G3183@syntax->datum G36da@expr) G36e5@p) (G36e4@e))) G36e1@G36df G36e0@G36de))))) G36d8@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G36d6@t))) (G308a@syntax-dispatch G36d6@t '(_ any)))) G36d4@stx))) (set! G305e@delay-macro (lambda (G36e8@stx) ((lambda (G36ea@t) ((lambda (G36ec@ls/false) (if G36ec@ls/false (apply (lambda (G36ee@expr) (G3040@bless (list 'make-promise (list 'lambda '() G36ee@expr)))) G36ec@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G36ea@t))) (G308a@syntax-dispatch G36ea@t '(_ any)))) G36e8@stx))) (set! G3060@assert-macro (lambda (G36f0@stx) ((lambda (G36f2@t) ((lambda (G36f4@ls/false) (if G36f4@ls/false (apply (lambda (G36f6@expr) ((lambda (G36f8@pos) (G3040@bless (list 'unless G36f6@expr (list 'assertion-error (list 'quote G36f6@expr) (list 'quote G36f8@pos))))) ((lambda (G36fa@t) (if G36fa@t G36fa@t (begin '#f (G3173@expression-position G36f6@expr)))) (G3173@expression-position G36f0@stx)))) G36f4@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G36f2@t))) (G308a@syntax-dispatch G36f2@t '(_ any)))) G36f0@stx))) (set! G3062@endianness-macro (lambda (G36fc@stx) ((lambda (G36fe@t) ((lambda (G3700@ls/false) (if G3700@ls/false (apply (lambda (G3702@e) ((lambda (G3704@t) (if (memv G3704@t '(little)) (G3040@bless ''little) (if (memv G3704@t '(big)) (G3040@bless ''big) (G317d@syntax-violation '#f '"endianness must be big or little" G36fc@stx)))) (G3183@syntax->datum G3702@e))) G3700@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G36fe@t))) (G308a@syntax-dispatch G36fe@t '(_ any)))) G36fc@stx))) (set! G3064@identifier-syntax-macro (lambda (G3706@stx) ((lambda (G3708@t) ((lambda (G370a@ls/false) (if G370a@ls/false (apply (lambda (G370c@expr) (G3040@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G370c@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G370c@expr) '((syntax (e* ...)))))))))) G370a@ls/false) ((lambda (G370e@t) ((lambda (G3710@ls/false) (if (if G3710@ls/false (begin '#f (apply (lambda (G3712@id1 G3713@expr1 G3714@id2 G3715@expr2 G3716@expr3) (if (G2e47@id? G3712@id1) (if (G2e47@id? G3714@id2) (begin '#f (G2e47@id? G3715@expr2)) '#f) '#f)) G3710@ls/false)) '#f) (apply (lambda (G371c@id1 G371d@expr1 G371e@id2 G371f@expr2 G3720@expr3) (G3040@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G371d@expr1)) (list (list 'set! 'id G371f@expr2) (list 'syntax G3720@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G371d@expr1 '(e* ...))))))))) G3710@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G370e@t))) (G308a@syntax-dispatch G370e@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3708@t))) (G308a@syntax-dispatch G3708@t '(_ any)))) G3706@stx))) (set! G3066@do-macro (lambda (G3726@stx) ((lambda (G3729@bind) (begin (set! G3729@bind (lambda (G3740@x) ((lambda (G3742@t) ((lambda (G3744@ls/false) (if G3744@ls/false (apply (lambda (G3746@x G3747@init) (list G3746@x G3747@init G3746@x)) G3744@ls/false) ((lambda (G374a@t) ((lambda (G374c@ls/false) (if G374c@ls/false (apply (lambda (G374e@x G374f@init G3750@step) (list G374e@x G374f@init G3750@step)) G374c@ls/false) ((lambda (G3754@t) ((lambda (G3756@ls/false) (if G3756@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid binding" G3726@stx)) G3756@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3754@t))) (G308a@syntax-dispatch G3754@t '_))) G374a@t))) (G308a@syntax-dispatch G374a@t '(any any any)))) G3742@t))) (G308a@syntax-dispatch G3742@t '(any any)))) G3740@x))) ((lambda (G372a@t) ((lambda (G372c@ls/false) (if G372c@ls/false (apply (lambda (G372e@binding* G372f@test G3730@expr* G3731@command*) ((lambda (G3736@t) ((lambda (G3738@ls/false) (if G3738@ls/false (apply (lambda (G373a@x* G373b@init* G373c@step*) (if (G2e51@valid-bound-ids? G373a@x*) (G3040@bless (list 'letrec (list (list 'loop (list 'lambda G373a@x* (list 'if G372f@test (cons 'begin (cons '(if #f #f) G3730@expr*)) (cons 'begin (append G3731@command* (list (cons 'loop G373c@step*)))))))) (cons 'loop G373b@init*))) (G317d@syntax-violation '#f '"invalid bindings" G3726@stx))) G3738@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3736@t))) (G308a@syntax-dispatch G3736@t '#(each (any any any))))) (map G3729@bind G372e@binding*))) G372c@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G372a@t))) (G308a@syntax-dispatch G372a@t '(_ each-any (any . each-any) . each-any)))) G3726@stx))) '#f))) (set! G3068@let*-macro (lambda (G3758@stx) ((lambda (G375a@t) ((lambda (G375c@ls/false) (if (if G375c@ls/false (begin '#f (apply (lambda (G375e@lhs* G375f@rhs* G3760@b G3761@b*) (for-all G2e47@id? G375e@lhs*)) G375c@ls/false)) '#f) (apply (lambda (G3766@lhs* G3767@rhs* G3768@b G3769@b*) (G3040@bless ((letrec ((G376e@f (lambda (G3770@x*) (if (null? G3770@x*) (cons 'let (cons '() (cons G3768@b G3769@b*))) (list 'let (list (car G3770@x*)) (G376e@f (cdr G3770@x*))))))) G376e@f) (map list G3766@lhs* G3767@rhs*)))) G375c@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G375a@t))) (G308a@syntax-dispatch G375a@t '(_ #(each (any any)) any . each-any)))) G3758@stx))) (set! G306a@or-macro (lambda (G3772@stx) ((lambda (G3774@t) ((lambda (G3776@ls/false) (if G3776@ls/false (apply (lambda () '#f) G3776@ls/false) ((lambda (G3778@t) ((lambda (G377a@ls/false) (if G377a@ls/false (apply (lambda (G377c@e G377d@e*) (G3040@bless ((letrec ((G3780@f (lambda (G3782@e G3783@e*) (if (null? G3783@e*) (list 'begin '#f G3782@e) (list 'let (list (list 't G3782@e)) (list 'if 't 't (G3780@f (car G3783@e*) (cdr G3783@e*)))))))) G3780@f) G377c@e G377d@e*))) G377a@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3778@t))) (G308a@syntax-dispatch G3778@t '(_ any . each-any)))) G3774@t))) (G308a@syntax-dispatch G3774@t '(_)))) G3772@stx))) (set! G306c@and-macro (lambda (G3786@stx) ((lambda (G3788@t) ((lambda (G378a@ls/false) (if G378a@ls/false (apply (lambda () '#t) G378a@ls/false) ((lambda (G378c@t) ((lambda (G378e@ls/false) (if G378e@ls/false (apply (lambda (G3790@e G3791@e*) (G3040@bless ((letrec ((G3794@f (lambda (G3796@e G3797@e*) (if (null? G3797@e*) (list 'begin '#f G3796@e) (cons 'if (cons G3796@e (cons (G3794@f (car G3797@e*) (cdr G3797@e*)) '(#f)))))))) G3794@f) G3790@e G3791@e*))) G378e@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G378c@t))) (G308a@syntax-dispatch G378c@t '(_ any . each-any)))) G3788@t))) (G308a@syntax-dispatch G3788@t '(_)))) G3786@stx))) (set! G306e@cond-macro (lambda (G379a@stx) ((lambda (G379c@t) ((lambda (G379e@ls/false) (if G379e@ls/false (apply (lambda (G37a0@cls G37a1@cls*) (G3040@bless ((letrec ((G37a4@f (lambda (G37a6@cls G37a7@cls*) (if (null? G37a7@cls*) ((lambda (G37aa@t) ((lambda (G37ac@ls/false) (if G37ac@ls/false (apply (lambda (G37ae@e G37af@e*) (cons 'begin (cons G37ae@e G37af@e*))) G37ac@ls/false) ((lambda (G37b2@t) ((lambda (G37b4@ls/false) (if G37b4@ls/false (apply (lambda (G37b6@e G37b7@p) (list 'let (list (list 't G37b6@e)) (list 'if 't (cons G37b7@p '(t))))) G37b4@ls/false) ((lambda (G37ba@t) ((lambda (G37bc@ls/false) (if G37bc@ls/false (apply (lambda (G37be@e) (cons 'or (cons G37be@e '((if #f #f))))) G37bc@ls/false) ((lambda (G37c0@t) ((lambda (G37c2@ls/false) (if G37c2@ls/false (apply (lambda (G37c4@e G37c5@e*) (list 'if G37c4@e (cons 'begin G37c5@e*))) G37c2@ls/false) ((lambda (G37c8@t) ((lambda (G37ca@ls/false) (if G37ca@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid last clause" G379a@stx)) G37ca@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G37c8@t))) (G308a@syntax-dispatch G37c8@t '_))) G37c0@t))) (G308a@syntax-dispatch G37c0@t '(any . each-any)))) G37ba@t))) (G308a@syntax-dispatch G37ba@t '(any)))) G37b2@t))) (G308a@syntax-dispatch G37b2@t '(any #(scheme-id =>) any)))) G37aa@t))) (G308a@syntax-dispatch G37aa@t '(#(scheme-id else) any . each-any)))) G37a6@cls) ((lambda (G37cc@t) ((lambda (G37ce@ls/false) (if G37ce@ls/false (apply (lambda (G37d0@e G37d1@e*) (G317d@syntax-violation '#f '"incorrect position of keyword else" G379a@stx)) G37ce@ls/false) ((lambda (G37d4@t) ((lambda (G37d6@ls/false) (if G37d6@ls/false (apply (lambda (G37d8@e G37d9@p) (list 'let (list (list 't G37d8@e)) (list 'if 't (cons G37d9@p '(t)) (G37a4@f (car G37a7@cls*) (cdr G37a7@cls*))))) G37d6@ls/false) ((lambda (G37dc@t) ((lambda (G37de@ls/false) (if G37de@ls/false (apply (lambda (G37e0@e) (list 'or G37e0@e (G37a4@f (car G37a7@cls*) (cdr G37a7@cls*)))) G37de@ls/false) ((lambda (G37e2@t) ((lambda (G37e4@ls/false) (if G37e4@ls/false (apply (lambda (G37e6@e G37e7@e*) (list 'if G37e6@e (cons 'begin G37e7@e*) (G37a4@f (car G37a7@cls*) (cdr G37a7@cls*)))) G37e4@ls/false) ((lambda (G37ea@t) ((lambda (G37ec@ls/false) (if G37ec@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid last clause" G379a@stx)) G37ec@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G37ea@t))) (G308a@syntax-dispatch G37ea@t '_))) G37e2@t))) (G308a@syntax-dispatch G37e2@t '(any . each-any)))) G37dc@t))) (G308a@syntax-dispatch G37dc@t '(any)))) G37d4@t))) (G308a@syntax-dispatch G37d4@t '(any #(scheme-id =>) any)))) G37cc@t))) (G308a@syntax-dispatch G37cc@t '(#(scheme-id else) any . each-any)))) G37a6@cls))))) G37a4@f) G37a0@cls G37a1@cls*))) G379e@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G379c@t))) (G308a@syntax-dispatch G379c@t '(_ any . each-any)))) G379a@stx))) (set! G3070@do-include (lambda (G37ee@stx G37ef@id G37f0@filename) ((lambda (G37f4@filename) (begin (if (not (if (string? G37f4@filename) (begin '#f (G2e47@id? G37ef@id)) '#f)) (G317d@syntax-violation '#f '"invalid syntax" G37ee@stx) (void)) (cons (G3040@bless 'begin) (with-input-from-file G37f4@filename (lambda () ((letrec ((G37f6@f (lambda (G37f8@ls) ((lambda (G37fa@x) (if (eof-object? G37fa@x) (reverse G37f8@ls) (G37f6@f (cons (G2e25@datum->stx G37ef@id G37fa@x) G37f8@ls)))) (G298c@G288a@read-annotated))))) G37f6@f) '())))))) (G2e5d@stx->datum G37f0@filename)))) (set! G3072@include-macro (lambda (G37fc@e) ((lambda (G37fe@t) ((lambda (G3800@ls/false) (if G3800@ls/false (apply (lambda (G3802@id G3803@filename) (G3070@do-include G37fc@e G3802@id G3803@filename)) G3800@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G37fe@t))) (G308a@syntax-dispatch G37fe@t '(any any)))) G37fc@e))) (set! G3074@include-into-macro (lambda (G3806@e) ((lambda (G3808@t) ((lambda (G380a@ls/false) (if G380a@ls/false (apply (lambda (G380c@id G380d@filename) (G3070@do-include G3806@e G380c@id G380d@filename)) G380a@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3808@t))) (G308a@syntax-dispatch G3808@t '(_ any any)))) G3806@e))) (set! G3076@syntax-rules-macro (lambda (G3810@e) ((lambda (G3812@t) ((lambda (G3814@ls/false) (if G3814@ls/false (apply (lambda (G3816@lits G3817@pat* G3818@tmp*) (begin (G3090@verify-literals G3816@lits G3810@e) (G3040@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3816@lits (map (lambda (G381c@pat G381d@tmp) ((lambda (G3820@t) ((lambda (G3822@ls/false) (if G3822@ls/false (apply (lambda (G3824@rest) (list (cons 'g G3824@rest) (list 'syntax G381d@tmp))) G3822@ls/false) ((lambda (G3826@t) ((lambda (G3828@ls/false) (if G3828@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid syntax-rules pattern" G3810@e G381c@pat)) G3828@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3826@t))) (G308a@syntax-dispatch G3826@t '_))) G3820@t))) (G308a@syntax-dispatch G3820@t '(_ . any)))) G381c@pat)) G3817@pat* G3818@tmp*)))))))) G3814@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3812@t))) (G308a@syntax-dispatch G3812@t '(_ each-any . #(each (any any)))))) G3810@e))) (set! G3078@quasiquote-macro ((lambda () ((lambda (G382b@datum G3854@quasicons* G3856@quasicons G3858@quasiappend G385a@quasivector G385c@vquasi G385e@quasi) (begin (set! G382b@datum (lambda (G3939@x) (list (G3018@scheme-stx 'quote) (G2e2f@mkstx G3939@x '() '() '())))) (set! G3854@quasicons* (lambda (G3931@x G3932@y) ((letrec ((G3935@f (lambda (G3937@x) (if (null? G3937@x) G3932@y (G3856@quasicons (car G3937@x) (G3935@f (cdr G3937@x))))))) G3935@f) G3931@x))) (set! G3856@quasicons (lambda (G390b@x G390c@y) ((lambda (G390f@t) ((lambda (G3911@ls/false) (if G3911@ls/false (apply (lambda (G3913@dy) ((lambda (G3915@t) ((lambda (G3917@ls/false) (if G3917@ls/false (apply (lambda (G3919@dx) (list (G3018@scheme-stx 'quote) (cons G3919@dx G3913@dy))) G3917@ls/false) ((lambda (G391b@t) ((lambda (G391d@ls/false) (if G391d@ls/false (apply (lambda () ((lambda (G391f@t) ((lambda (G3921@ls/false) (if G3921@ls/false (apply (lambda () (list (G3018@scheme-stx 'list) G390b@x)) G3921@ls/false) ((lambda (G3923@t) ((lambda (G3925@ls/false) (if G3925@ls/false (apply (lambda () (list (G3018@scheme-stx 'cons) G390b@x G390c@y)) G3925@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3923@t))) (G308a@syntax-dispatch G3923@t '_))) G391f@t))) (G308a@syntax-dispatch G391f@t '()))) G3913@dy)) G391d@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G391b@t))) (G308a@syntax-dispatch G391b@t '_))) G3915@t))) (G308a@syntax-dispatch G3915@t '(#(scheme-id quote) any)))) G390b@x)) G3911@ls/false) ((lambda (G3927@t) ((lambda (G3929@ls/false) (if G3929@ls/false (apply (lambda (G392b@stuff) (cons* (G3018@scheme-stx 'list) G390b@x G392b@stuff)) G3929@ls/false) ((lambda (G392d@t) ((lambda (G392f@ls/false) (if G392f@ls/false (apply (lambda () (list (G3018@scheme-stx 'cons) G390b@x G390c@y)) G392f@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G392d@t))) (G308a@syntax-dispatch G392d@t '_))) G3927@t))) (G308a@syntax-dispatch G3927@t '(#(scheme-id list) . each-any)))) G390f@t))) (G308a@syntax-dispatch G390f@t '(#(scheme-id quote) any)))) G390c@y))) (set! G3858@quasiappend (lambda (G38f1@x G38f2@y) ((lambda (G38f5@ls) (if (null? G38f5@ls) (list (G3018@scheme-stx 'quote) '()) (if (null? (cdr G38f5@ls)) (car G38f5@ls) (cons* (G3018@scheme-stx 'append) G38f5@ls)))) ((letrec ((G38f7@f (lambda (G38f9@x) (if (null? G38f9@x) ((lambda (G38fb@t) ((lambda (G38fd@ls/false) (if G38fd@ls/false (apply (lambda () '()) G38fd@ls/false) ((lambda (G38ff@t) ((lambda (G3901@ls/false) (if G3901@ls/false (apply (lambda () (list G38f2@y)) G3901@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G38ff@t))) (G308a@syntax-dispatch G38ff@t '_))) G38fb@t))) (G308a@syntax-dispatch G38fb@t '(#(scheme-id quote) ())))) G38f2@y) ((lambda (G3903@t) ((lambda (G3905@ls/false) (if G3905@ls/false (apply (lambda () (G38f7@f (cdr G38f9@x))) G3905@ls/false) ((lambda (G3907@t) ((lambda (G3909@ls/false) (if G3909@ls/false (apply (lambda () (cons (car G38f9@x) (G38f7@f (cdr G38f9@x)))) G3909@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3907@t))) (G308a@syntax-dispatch G3907@t '_))) G3903@t))) (G308a@syntax-dispatch G3903@t '(#(scheme-id quote) ())))) (car G38f9@x)))))) G38f7@f) G38f1@x)))) (set! G385a@quasivector (lambda (G38bf@x) ((lambda (G38c1@pat-x) ((lambda (G38c3@t) ((lambda (G38c5@ls/false) (if G38c5@ls/false (apply (lambda (G38c7@x*) (list (G3018@scheme-stx 'quote) (list->vector G38c7@x*))) G38c5@ls/false) ((lambda (G38c9@t) ((lambda (G38cb@ls/false) (if G38cb@ls/false (apply (lambda () ((letrec ((G38cd@f (lambda (G38cf@x G38d0@k) ((lambda (G38d3@t) ((lambda (G38d5@ls/false) (if G38d5@ls/false (apply (lambda (G38d7@x*) (G38d0@k (map (lambda (G38d9@x) (list (G3018@scheme-stx 'quote) G38d9@x)) G38d7@x*))) G38d5@ls/false) ((lambda (G38db@t) ((lambda (G38dd@ls/false) (if G38dd@ls/false (apply (lambda (G38df@x*) (G38d0@k G38df@x*)) G38dd@ls/false) ((lambda (G38e1@t) ((lambda (G38e3@ls/false) (if G38e3@ls/false (apply (lambda (G38e5@x G38e6@y) (G38cd@f G38e6@y (lambda (G38e9@ls) (G38d0@k (cons G38e5@x G38e9@ls))))) G38e3@ls/false) ((lambda (G38eb@t) ((lambda (G38ed@ls/false) (if G38ed@ls/false (apply (lambda () (list (G3018@scheme-stx 'list->vector) G38c1@pat-x)) G38ed@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G38eb@t))) (G308a@syntax-dispatch G38eb@t '_))) G38e1@t))) (G308a@syntax-dispatch G38e1@t '(#(scheme-id cons) any any)))) G38db@t))) (G308a@syntax-dispatch G38db@t '(#(scheme-id list) . each-any)))) G38d3@t))) (G308a@syntax-dispatch G38d3@t '(#(scheme-id quote) each-any)))) G38cf@x)))) G38cd@f) G38bf@x (lambda (G38ef@ls) (cons* (G3018@scheme-stx 'vector) G38ef@ls)))) G38cb@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G38c9@t))) (G308a@syntax-dispatch G38c9@t '_))) G38c3@t))) (G308a@syntax-dispatch G38c3@t '(#(scheme-id quote) each-any)))) G38c1@pat-x)) G38bf@x))) (set! G385c@vquasi (lambda (G389d@p G389e@lev) ((lambda (G38a1@t) ((lambda (G38a3@ls/false) (if G38a3@ls/false (apply (lambda (G38a5@p G38a6@q) ((lambda (G38a9@t) ((lambda (G38ab@ls/false) (if G38ab@ls/false (apply (lambda (G38ad@p) (if (= G389e@lev '0) (G3854@quasicons* G38ad@p (G385c@vquasi G38a6@q G389e@lev)) (G3856@quasicons (G3856@quasicons (G382b@datum 'unquote) (G385e@quasi G38ad@p (- G389e@lev '1))) (G385c@vquasi G38a6@q G389e@lev)))) G38ab@ls/false) ((lambda (G38af@t) ((lambda (G38b1@ls/false) (if G38b1@ls/false (apply (lambda (G38b3@p) (if (= G389e@lev '0) (G3858@quasiappend G38b3@p (G385c@vquasi G38a6@q G389e@lev)) (G3856@quasicons (G3856@quasicons (G382b@datum 'unquote-splicing) (G385e@quasi G38b3@p (- G389e@lev '1))) (G385c@vquasi G38a6@q G389e@lev)))) G38b1@ls/false) ((lambda (G38b5@t) ((lambda (G38b7@ls/false) (if G38b7@ls/false (apply (lambda (G38b9@p) (G3856@quasicons (G385e@quasi G38b9@p G389e@lev) (G385c@vquasi G38a6@q G389e@lev))) G38b7@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G38b5@t))) (G308a@syntax-dispatch G38b5@t 'any))) G38af@t))) (G308a@syntax-dispatch G38af@t '(#(scheme-id unquote-splicing) . each-any)))) G38a9@t))) (G308a@syntax-dispatch G38a9@t '(#(scheme-id unquote) . each-any)))) G38a5@p)) G38a3@ls/false) ((lambda (G38bb@t) ((lambda (G38bd@ls/false) (if G38bd@ls/false (apply (lambda () (list (G3018@scheme-stx 'quote) '())) G38bd@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G38bb@t))) (G308a@syntax-dispatch G38bb@t '()))) G38a1@t))) (G308a@syntax-dispatch G38a1@t '(any . any)))) G389d@p))) (set! G385e@quasi (lambda (G3867@p G3868@lev) ((lambda (G386b@t) ((lambda (G386d@ls/false) (if G386d@ls/false (apply (lambda (G386f@p) (if (= G3868@lev '0) G386f@p (G3856@quasicons (G382b@datum 'unquote) (G385e@quasi (list G386f@p) (- G3868@lev '1))))) G386d@ls/false) ((lambda (G3871@t) ((lambda (G3873@ls/false) (if G3873@ls/false (apply (lambda (G3875@p G3876@q) (if (= G3868@lev '0) (G3854@quasicons* G3875@p (G385e@quasi G3876@q G3868@lev)) (G3856@quasicons (G3856@quasicons (G382b@datum 'unquote) (G385e@quasi G3875@p (- G3868@lev '1))) (G385e@quasi G3876@q G3868@lev)))) G3873@ls/false) ((lambda (G3879@t) ((lambda (G387b@ls/false) (if G387b@ls/false (apply (lambda (G387d@p G387e@q) (if (= G3868@lev '0) (G3858@quasiappend G387d@p (G385e@quasi G387e@q G3868@lev)) (G3856@quasicons (G3856@quasicons (G382b@datum 'unquote-splicing) (G385e@quasi G387d@p (- G3868@lev '1))) (G385e@quasi G387e@q G3868@lev)))) G387b@ls/false) ((lambda (G3881@t) ((lambda (G3883@ls/false) (if G3883@ls/false (apply (lambda (G3885@p) (G3856@quasicons (G382b@datum 'quasiquote) (G385e@quasi (list G3885@p) (+ G3868@lev '1)))) G3883@ls/false) ((lambda (G3887@t) ((lambda (G3889@ls/false) (if G3889@ls/false (apply (lambda (G388b@p G388c@q) (G3856@quasicons (G385e@quasi G388b@p G3868@lev) (G385e@quasi G388c@q G3868@lev))) G3889@ls/false) ((lambda (G388f@t) ((lambda (G3891@ls/false) (if (if G3891@ls/false (begin '#f (apply (lambda (G3893@x) (not (G2e0f@stx? G3893@x))) G3891@ls/false)) '#f) (apply (lambda (G3895@x) (G385a@quasivector (G385c@vquasi G3895@x G3868@lev))) G3891@ls/false) ((lambda (G3897@t) ((lambda (G3899@ls/false) (if G3899@ls/false (apply (lambda (G389b@p) (list (G3018@scheme-stx 'quote) G389b@p)) G3899@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3897@t))) (G308a@syntax-dispatch G3897@t 'any))) G388f@t))) (G308a@syntax-dispatch G388f@t '#(vector each-any)))) G3887@t))) (G308a@syntax-dispatch G3887@t '(any . any)))) G3881@t))) (G308a@syntax-dispatch G3881@t '(#(scheme-id quasiquote) any)))) G3879@t))) (G308a@syntax-dispatch G3879@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3871@t))) (G308a@syntax-dispatch G3871@t '((#(scheme-id unquote) . each-any) . any)))) G386b@t))) (G308a@syntax-dispatch G386b@t '(#(scheme-id unquote) any)))) G3867@p))) (lambda (G385f@x) ((lambda (G3861@t) ((lambda (G3863@ls/false) (if G3863@ls/false (apply (lambda (G3865@e) (G385e@quasi G3865@e '0)) G3863@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3861@t))) (G308a@syntax-dispatch G3861@t '(_ any)))) G385f@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G307a@quasisyntax-macro ((lambda () ((lambda (G393c@quasi) (begin (set! G393c@quasi (lambda (G3954@p G3955@lev) ((lambda (G3958@t) ((lambda (G395a@ls/false) (if G395a@ls/false (apply (lambda (G395c@p) (if (= G3955@lev '0) ((lambda (G395e@g) (values (list G395e@g) (list G395c@p) G395e@g)) (gensym)) (call-with-values (lambda () (G393c@quasi G395c@p (- G3955@lev '1))) (lambda (G3963@G3960 G3964@G3961 G3965@G3962) ((lambda (G3969@p G396a@rhs* G396b@lhs*) (values G396b@lhs* G396a@rhs* (list 'unsyntax G3969@p))) G3965@G3962 G3964@G3961 G3963@G3960))))) G395a@ls/false) ((lambda (G396f@t) ((lambda (G3971@ls/false) (if (if G3971@ls/false (begin '#f (apply (lambda () (= G3955@lev '0)) G3971@ls/false)) '#f) (apply (lambda () (G317d@syntax-violation '#f '"incorrect use of unsyntax" G3954@p)) G3971@ls/false) ((lambda (G3973@t) ((lambda (G3975@ls/false) (if G3975@ls/false (apply (lambda (G3977@p* G3978@q) (call-with-values (lambda () (G393c@quasi G3978@q G3955@lev)) (lambda (G397e@G397b G397f@G397c G3980@G397d) ((lambda (G3984@q G3985@rhs* G3986@lhs*) (if (= G3955@lev '0) ((lambda (G398a@g*) (values (append G398a@g* G3986@lhs*) (append G3977@p* G3985@rhs*) (append G398a@g* G3984@q))) (map (lambda (G398c@x) (gensym)) G3977@p*)) (call-with-values (lambda () (G393c@quasi G3977@p* (- G3955@lev '1))) (lambda (G3991@G398e G3992@G398f G3993@G3990) ((lambda (G3997@p* G3998@rhs2* G3999@lhs2*) (values (append G3999@lhs2* G3986@lhs*) (append G3998@rhs2* G3985@rhs*) (cons (cons 'unsyntax G3997@p*) G3984@q))) G3993@G3990 G3992@G398f G3991@G398e))))) G3980@G397d G397f@G397c G397e@G397b)))) G3975@ls/false) ((lambda (G399d@t) ((lambda (G399f@ls/false) (if G399f@ls/false (apply (lambda (G39a1@p* G39a2@q) (call-with-values (lambda () (G393c@quasi G39a2@q G3955@lev)) (lambda (G39a8@G39a5 G39a9@G39a6 G39aa@G39a7) ((lambda (G39ae@q G39af@rhs* G39b0@lhs*) (if (= G3955@lev '0) ((lambda (G39b4@g*) (values (append (map (lambda (G39b6@g) (cons G39b6@g '(...))) G39b4@g*) G39b0@lhs*) (append G39a1@p* G39af@rhs*) (append (apply append (map (lambda (G39b8@g) (cons G39b8@g '(...))) G39b4@g*)) G39ae@q))) (map (lambda (G39ba@x) (gensym)) G39a1@p*)) (call-with-values (lambda () (G393c@quasi G39a1@p* (- G3955@lev '1))) (lambda (G39bf@G39bc G39c0@G39bd G39c1@G39be) ((lambda (G39c5@p* G39c6@rhs2* G39c7@lhs2*) (values (append G39c7@lhs2* G39b0@lhs*) (append G39c6@rhs2* G39af@rhs*) (cons (cons 'unsyntax-splicing G39c5@p*) G39ae@q))) G39c1@G39be G39c0@G39bd G39bf@G39bc))))) G39aa@G39a7 G39a9@G39a6 G39a8@G39a5)))) G399f@ls/false) ((lambda (G39cb@t) ((lambda (G39cd@ls/false) (if (if G39cd@ls/false (begin '#f (apply (lambda () (= G3955@lev '0)) G39cd@ls/false)) '#f) (apply (lambda () (G317d@syntax-violation '#f '"incorrect use of unsyntax-splicing" G3954@p)) G39cd@ls/false) ((lambda (G39cf@t) ((lambda (G39d1@ls/false) (if G39d1@ls/false (apply (lambda (G39d3@p) (call-with-values (lambda () (G393c@quasi G39d3@p (+ G3955@lev '1))) (lambda (G39d8@G39d5 G39d9@G39d6 G39da@G39d7) ((lambda (G39de@p G39df@rhs* G39e0@lhs*) (values G39e0@lhs* G39df@rhs* (list 'quasisyntax G39de@p))) G39da@G39d7 G39d9@G39d6 G39d8@G39d5)))) G39d1@ls/false) ((lambda (G39e4@t) ((lambda (G39e6@ls/false) (if G39e6@ls/false (apply (lambda (G39e8@p G39e9@q) (call-with-values (lambda () (G393c@quasi G39e8@p G3955@lev)) (lambda (G39f2@G39ec G39f3@G39ed G39f4@G39ee) (call-with-values (lambda () (G393c@quasi G39e9@q G3955@lev)) (lambda (G39f8@G39ef G39f9@G39f0 G39fa@G39f1) ((lambda (G39fe@q G39ff@rhs2* G3a00@lhs2* G3a01@p G3a02@rhs* G3a03@lhs*) (values (append G3a00@lhs2* G3a03@lhs*) (append G39ff@rhs2* G3a02@rhs*) (cons G3a01@p G39fe@q))) G39fa@G39f1 G39f9@G39f0 G39f8@G39ef G39f4@G39ee G39f3@G39ed G39f2@G39ec)))))) G39e6@ls/false) ((lambda (G3a0a@t) ((lambda (G3a0c@ls/false) (if G3a0c@ls/false (apply (lambda (G3a0e@x*) (call-with-values (lambda () (G393c@quasi G3a0e@x* G3955@lev)) (lambda (G3a13@G3a10 G3a14@G3a11 G3a15@G3a12) ((lambda (G3a19@x* G3a1a@rhs* G3a1b@lhs*) (values G3a1b@lhs* G3a1a@rhs* (list->vector G3a19@x*))) G3a15@G3a12 G3a14@G3a11 G3a13@G3a10)))) G3a0c@ls/false) ((lambda (G3a1f@t) ((lambda (G3a21@ls/false) (if G3a21@ls/false (apply (lambda () (values '() '() G3954@p)) G3a21@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3a1f@t))) (G308a@syntax-dispatch G3a1f@t '_))) G3a0a@t))) (G308a@syntax-dispatch G3a0a@t '#(vector each-any)))) G39e4@t))) (G308a@syntax-dispatch G39e4@t '(any . any)))) G39cf@t))) (G308a@syntax-dispatch G39cf@t '(#(scheme-id quasisyntax) any)))) G39cb@t))) (G308a@syntax-dispatch G39cb@t '#(scheme-id unsyntax-splicing)))) G399d@t))) (G308a@syntax-dispatch G399d@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3973@t))) (G308a@syntax-dispatch G3973@t '((#(scheme-id unsyntax) . each-any) . any)))) G396f@t))) (G308a@syntax-dispatch G396f@t '#(scheme-id unsyntax)))) G3958@t))) (G308a@syntax-dispatch G3958@t '(#(scheme-id unsyntax) any)))) G3954@p))) (lambda (G393d@x) ((lambda (G393f@t) ((lambda (G3941@ls/false) (if G3941@ls/false (apply (lambda (G3943@e) (call-with-values (lambda () (G393c@quasi G3943@e '0)) (lambda (G3948@G3945 G3949@G3946 G394a@G3947) ((lambda (G394e@v G394f@rhs* G3950@lhs*) (G3040@bless (list 'syntax-case (cons 'list G394f@rhs*) '() (list G3950@lhs* (list 'syntax G394e@v))))) G394a@G3947 G3949@G3946 G3948@G3945)))) G3941@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G393f@t))) (G308a@syntax-dispatch G393f@t '(_ any)))) G393d@x)))) '#f)))) (set! G307c@define-struct-macro (lambda (G3a23@stx) (G317d@syntax-violation '#f '"define-struct not supported" G3a23@stx))) (set! G307e@define-record-type-macro (lambda (G3a25@x) ((lambda (G3a28@id G3a2a@get-record-name G3a2c@get-record-constructor-name G3a2e@get-record-predicate-name G3a30@get-clause G3a32@foo-rtd-code G3a34@parent-rtd-code G3a36@parent-rcd-code G3a38@foo-rcd-code G3a3a@get-protocol-code G3a3c@get-fields G3a3e@get-mutator-indices G3a40@get-mutators G3a42@get-accessors G3a44@enumerate G3a46@do-define-record G3a48@verify-clauses) (begin (set! G3a28@id (lambda (G3c1f@ctxt . G3c21@str*) (G3181@datum->syntax G3c1f@ctxt (string->symbol (apply string-append (map (lambda (G3c23@x) (if (symbol? G3c23@x) (symbol->string G3c23@x) (if (string? G3c23@x) G3c23@x (assertion-violation 'define-record-type '"BUG")))) G3c21@str*)))))) (set! G3a2a@get-record-name (lambda (G3c0d@spec) ((lambda (G3c0f@t) ((lambda (G3c11@ls/false) (if G3c11@ls/false (apply (lambda (G3c13@foo G3c14@make-foo G3c15@foo?) G3c13@foo) G3c11@ls/false) ((lambda (G3c19@t) ((lambda (G3c1b@ls/false) (if G3c1b@ls/false (apply (lambda (G3c1d@foo) G3c1d@foo) G3c1b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3c19@t))) (G308a@syntax-dispatch G3c19@t 'any))) G3c0f@t))) (G308a@syntax-dispatch G3c0f@t '(any any any)))) G3c0d@spec))) (set! G3a2c@get-record-constructor-name (lambda (G3bf9@spec) ((lambda (G3bfb@t) ((lambda (G3bfd@ls/false) (if G3bfd@ls/false (apply (lambda (G3bff@foo G3c00@make-foo G3c01@foo?) G3c00@make-foo) G3bfd@ls/false) ((lambda (G3c05@t) ((lambda (G3c07@ls/false) (if (if G3c07@ls/false (begin '#f (apply (lambda (G3c09@foo) (G2e47@id? G3c09@foo)) G3c07@ls/false)) '#f) (apply (lambda (G3c0b@foo) (G3a28@id G3c0b@foo '"make-" (G2e5d@stx->datum G3c0b@foo))) G3c07@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3c05@t))) (G308a@syntax-dispatch G3c05@t 'any))) G3bfb@t))) (G308a@syntax-dispatch G3bfb@t '(any any any)))) G3bf9@spec))) (set! G3a2e@get-record-predicate-name (lambda (G3be5@spec) ((lambda (G3be7@t) ((lambda (G3be9@ls/false) (if G3be9@ls/false (apply (lambda (G3beb@foo G3bec@make-foo G3bed@foo?) G3bed@foo?) G3be9@ls/false) ((lambda (G3bf1@t) ((lambda (G3bf3@ls/false) (if (if G3bf3@ls/false (begin '#f (apply (lambda (G3bf5@foo) (G2e47@id? G3bf5@foo)) G3bf3@ls/false)) '#f) (apply (lambda (G3bf7@foo) (G3a28@id G3bf7@foo (G2e5d@stx->datum G3bf7@foo) '"?")) G3bf3@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3bf1@t))) (G308a@syntax-dispatch G3bf1@t 'any))) G3be7@t))) (G308a@syntax-dispatch G3be7@t '(any any any)))) G3be5@spec))) (set! G3a30@get-clause (lambda (G3bd3@id G3bd4@ls) ((lambda (G3bd7@t) ((lambda (G3bd9@ls/false) (if G3bd9@ls/false (apply (lambda () '#f) G3bd9@ls/false) ((lambda (G3bdb@t) ((lambda (G3bdd@ls/false) (if G3bdd@ls/false (apply (lambda (G3bdf@x G3be0@rest G3be1@ls) (if (G2e4f@free-id=? (G3040@bless G3bd3@id) G3bdf@x) (cons G3bdf@x G3be0@rest) (G3a30@get-clause G3bd3@id G3be1@ls))) G3bdd@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3bdb@t))) (G308a@syntax-dispatch G3bdb@t '((any . any) . any)))) G3bd7@t))) (G308a@syntax-dispatch G3bd7@t '()))) G3bd4@ls))) (set! G3a32@foo-rtd-code (lambda (G3b81@name G3b82@clause* G3b83@parent-rtd-code) ((lambda (G3b88@convert-field-spec*) (begin (set! G3b88@convert-field-spec* (lambda (G3bb9@ls) (list->vector (map (lambda (G3bbb@x) ((lambda (G3bbd@t) ((lambda (G3bbf@ls/false) (if G3bbf@ls/false (apply (lambda (G3bc1@name G3bc2@rest) (list 'mutable G3bc1@name)) G3bbf@ls/false) ((lambda (G3bc5@t) ((lambda (G3bc7@ls/false) (if G3bc7@ls/false (apply (lambda (G3bc9@name G3bca@rest) (list 'immutable G3bc9@name)) G3bc7@ls/false) ((lambda (G3bcd@t) ((lambda (G3bcf@ls/false) (if G3bcf@ls/false (apply (lambda (G3bd1@name) (list 'immutable G3bd1@name)) G3bcf@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3bcd@t))) (G308a@syntax-dispatch G3bcd@t 'any))) G3bc5@t))) (G308a@syntax-dispatch G3bc5@t '(#(scheme-id immutable) any . any)))) G3bbd@t))) (G308a@syntax-dispatch G3bbd@t '(#(scheme-id mutable) any . any)))) G3bbb@x)) G3bb9@ls)))) ((lambda (G3b89@uid-code G3b8a@sealed? G3b8b@opaque? G3b8c@fields) (G3040@bless (list 'make-record-type-descriptor (list 'quote G3b81@name) G3b83@parent-rtd-code G3b89@uid-code G3b8a@sealed? G3b8b@opaque? G3b8c@fields))) ((lambda (G3b91@t) ((lambda (G3b93@ls/false) (if G3b93@ls/false (apply (lambda () (list 'quote (gensym))) G3b93@ls/false) ((lambda (G3b95@t) ((lambda (G3b97@ls/false) (if G3b97@ls/false (apply (lambda (G3b99@uid) (list 'quote G3b99@uid)) G3b97@ls/false) ((lambda (G3b9b@t) ((lambda (G3b9d@ls/false) (if G3b9d@ls/false (apply (lambda () '#f) G3b9d@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3b9b@t))) (G308a@syntax-dispatch G3b9b@t '_))) G3b95@t))) (G308a@syntax-dispatch G3b95@t '(_ any)))) G3b91@t))) (G308a@syntax-dispatch G3b91@t '(_)))) (G3a30@get-clause 'nongenerative G3b82@clause*)) ((lambda (G3b9f@t) ((lambda (G3ba1@ls/false) (if G3ba1@ls/false (apply (lambda () '#t) G3ba1@ls/false) ((lambda (G3ba3@t) ((lambda (G3ba5@ls/false) (if G3ba5@ls/false (apply (lambda () '#f) G3ba5@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3ba3@t))) (G308a@syntax-dispatch G3ba3@t '_))) G3b9f@t))) (G308a@syntax-dispatch G3b9f@t '(_ #(atom #t))))) (G3a30@get-clause 'sealed G3b82@clause*)) ((lambda (G3ba7@t) ((lambda (G3ba9@ls/false) (if G3ba9@ls/false (apply (lambda () '#t) G3ba9@ls/false) ((lambda (G3bab@t) ((lambda (G3bad@ls/false) (if G3bad@ls/false (apply (lambda () '#f) G3bad@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3bab@t))) (G308a@syntax-dispatch G3bab@t '_))) G3ba7@t))) (G308a@syntax-dispatch G3ba7@t '(_ #(atom #t))))) (G3a30@get-clause 'opaque G3b82@clause*)) ((lambda (G3baf@t) ((lambda (G3bb1@ls/false) (if G3bb1@ls/false (apply (lambda (G3bb3@field-spec*) (list 'quote (G3b88@convert-field-spec* G3bb3@field-spec*))) G3bb1@ls/false) ((lambda (G3bb5@t) ((lambda (G3bb7@ls/false) (if G3bb7@ls/false (apply (lambda () ''#()) G3bb7@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3bb5@t))) (G308a@syntax-dispatch G3bb5@t '_))) G3baf@t))) (G308a@syntax-dispatch G3baf@t '(_ . each-any)))) (G3a30@get-clause 'fields G3b82@clause*))))) '#f))) (set! G3a34@parent-rtd-code (lambda (G3b69@clause*) ((lambda (G3b6b@t) ((lambda (G3b6d@ls/false) (if G3b6d@ls/false (apply (lambda (G3b6f@name) (list 'record-type-descriptor G3b6f@name)) G3b6d@ls/false) ((lambda (G3b71@t) ((lambda (G3b73@ls/false) (if G3b73@ls/false (apply (lambda () ((lambda (G3b75@t) ((lambda (G3b77@ls/false) (if G3b77@ls/false (apply (lambda (G3b79@rtd G3b7a@rcd) G3b79@rtd) G3b77@ls/false) ((lambda (G3b7d@t) ((lambda (G3b7f@ls/false) (if G3b7f@ls/false (apply (lambda () '#f) G3b7f@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3b7d@t))) (G308a@syntax-dispatch G3b7d@t '#(atom #f)))) G3b75@t))) (G308a@syntax-dispatch G3b75@t '(_ any any)))) (G3a30@get-clause 'parent-rtd G3b69@clause*))) G3b73@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3b71@t))) (G308a@syntax-dispatch G3b71@t '#(atom #f)))) G3b6b@t))) (G308a@syntax-dispatch G3b6b@t '(_ any)))) (G3a30@get-clause 'parent G3b69@clause*)))) (set! G3a36@parent-rcd-code (lambda (G3b51@clause*) ((lambda (G3b53@t) ((lambda (G3b55@ls/false) (if G3b55@ls/false (apply (lambda (G3b57@name) (list 'record-constructor-descriptor G3b57@name)) G3b55@ls/false) ((lambda (G3b59@t) ((lambda (G3b5b@ls/false) (if G3b5b@ls/false (apply (lambda () ((lambda (G3b5d@t) ((lambda (G3b5f@ls/false) (if G3b5f@ls/false (apply (lambda (G3b61@rtd G3b62@rcd) G3b62@rcd) G3b5f@ls/false) ((lambda (G3b65@t) ((lambda (G3b67@ls/false) (if G3b67@ls/false (apply (lambda () '#f) G3b67@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3b65@t))) (G308a@syntax-dispatch G3b65@t '#(atom #f)))) G3b5d@t))) (G308a@syntax-dispatch G3b5d@t '(_ any any)))) (G3a30@get-clause 'parent-rtd G3b51@clause*))) G3b5b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3b59@t))) (G308a@syntax-dispatch G3b59@t '#(atom #f)))) G3b53@t))) (G308a@syntax-dispatch G3b53@t '(_ any)))) (G3a30@get-clause 'parent G3b51@clause*)))) (set! G3a38@foo-rcd-code (lambda (G3b49@clause* G3b4a@foo-rtd G3b4b@protocol G3b4c@parent-rcd-code) (list 'make-record-constructor-descriptor G3b4a@foo-rtd G3b4c@parent-rcd-code G3b4b@protocol))) (set! G3a3a@get-protocol-code (lambda (G3b3d@clause*) ((lambda (G3b3f@t) ((lambda (G3b41@ls/false) (if G3b41@ls/false (apply (lambda (G3b43@expr) G3b43@expr) G3b41@ls/false) ((lambda (G3b45@t) ((lambda (G3b47@ls/false) (if G3b47@ls/false (apply (lambda () '#f) G3b47@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3b45@t))) (G308a@syntax-dispatch G3b45@t '_))) G3b3f@t))) (G308a@syntax-dispatch G3b3f@t '(_ any)))) (G3a30@get-clause 'protocol G3b3d@clause*)))) (set! G3a3c@get-fields (lambda (G3b2b@clause*) ((lambda (G3b2d@t) ((lambda (G3b2f@ls/false) (if G3b2f@ls/false (apply (lambda () '()) G3b2f@ls/false) ((lambda (G3b31@t) ((lambda (G3b33@ls/false) (if G3b33@ls/false (apply (lambda (G3b35@f*) G3b35@f*) G3b33@ls/false) ((lambda (G3b37@t) ((lambda (G3b39@ls/false) (if G3b39@ls/false (apply (lambda (G3b3b@rest) (G3a3c@get-fields G3b3b@rest)) G3b39@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3b37@t))) (G308a@syntax-dispatch G3b37@t '(_ . any)))) G3b31@t))) (G308a@syntax-dispatch G3b31@t '((#(scheme-id fields) . each-any) . _)))) G3b2d@t))) (G308a@syntax-dispatch G3b2d@t '()))) G3b2b@clause*))) (set! G3a3e@get-mutator-indices (lambda (G3b13@fields) ((letrec ((G3b15@f (lambda (G3b17@fields G3b18@i) ((lambda (G3b1b@t) ((lambda (G3b1d@ls/false) (if G3b1d@ls/false (apply (lambda () '()) G3b1d@ls/false) ((lambda (G3b1f@t) ((lambda (G3b21@ls/false) (if G3b21@ls/false (apply (lambda (G3b23@rest) (cons G3b18@i (G3b15@f G3b23@rest (+ G3b18@i '1)))) G3b21@ls/false) ((lambda (G3b25@t) ((lambda (G3b27@ls/false) (if G3b27@ls/false (apply (lambda (G3b29@rest) (G3b15@f G3b29@rest (+ G3b18@i '1))) G3b27@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3b25@t))) (G308a@syntax-dispatch G3b25@t '(_ . any)))) G3b1f@t))) (G308a@syntax-dispatch G3b1f@t '((#(scheme-id mutable) . _) . any)))) G3b1b@t))) (G308a@syntax-dispatch G3b1b@t '()))) G3b17@fields)))) G3b15@f) G3b13@fields '0))) (set! G3a40@get-mutators (lambda (G3ae9@foo G3aea@fields) ((lambda (G3aee@gen-name) (begin (set! G3aee@gen-name (lambda (G3b11@x) (G3181@datum->syntax G3ae9@foo (string->symbol (string-append (symbol->string (G3183@syntax->datum G3ae9@foo)) '"-" (symbol->string (G3183@syntax->datum G3b11@x)) '"-set!"))))) ((letrec ((G3aef@f (lambda (G3af1@fields) ((lambda (G3af3@t) ((lambda (G3af5@ls/false) (if G3af5@ls/false (apply (lambda () '()) G3af5@ls/false) ((lambda (G3af7@t) ((lambda (G3af9@ls/false) (if G3af9@ls/false (apply (lambda (G3afb@name G3afc@accessor G3afd@mutator G3afe@rest) (cons G3afd@mutator (G3aef@f G3afe@rest))) G3af9@ls/false) ((lambda (G3b03@t) ((lambda (G3b05@ls/false) (if G3b05@ls/false (apply (lambda (G3b07@name G3b08@rest) (cons (G3aee@gen-name G3b07@name) (G3aef@f G3b08@rest))) G3b05@ls/false) ((lambda (G3b0b@t) ((lambda (G3b0d@ls/false) (if G3b0d@ls/false (apply (lambda (G3b0f@rest) (G3aef@f G3b0f@rest)) G3b0d@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3b0b@t))) (G308a@syntax-dispatch G3b0b@t '(_ . any)))) G3b03@t))) (G308a@syntax-dispatch G3b03@t '((#(scheme-id mutable) any) . any)))) G3af7@t))) (G308a@syntax-dispatch G3af7@t '((#(scheme-id mutable) any any any) . any)))) G3af3@t))) (G308a@syntax-dispatch G3af3@t '()))) G3af1@fields)))) G3aef@f) G3aea@fields))) '#f))) (set! G3a42@get-accessors (lambda (G3aa5@foo G3aa6@fields) ((lambda (G3aaa@gen-name) (begin (set! G3aaa@gen-name (lambda (G3ae7@x) (G3181@datum->syntax G3aa5@foo (string->symbol (string-append (symbol->string (G3183@syntax->datum G3aa5@foo)) '"-" (symbol->string (G3183@syntax->datum G3ae7@x))))))) (map (lambda (G3aab@field) ((lambda (G3aad@t) ((lambda (G3aaf@ls/false) (if (if G3aaf@ls/false (begin '#f (apply (lambda (G3ab1@name G3ab2@accessor G3ab3@mutator) (G2e47@id? G3ab2@accessor)) G3aaf@ls/false)) '#f) (apply (lambda (G3ab7@name G3ab8@accessor G3ab9@mutator) G3ab8@accessor) G3aaf@ls/false) ((lambda (G3abd@t) ((lambda (G3abf@ls/false) (if (if G3abf@ls/false (begin '#f (apply (lambda (G3ac1@name G3ac2@accessor) (G2e47@id? G3ac2@accessor)) G3abf@ls/false)) '#f) (apply (lambda (G3ac5@name G3ac6@accessor) G3ac6@accessor) G3abf@ls/false) ((lambda (G3ac9@t) ((lambda (G3acb@ls/false) (if (if G3acb@ls/false (begin '#f (apply (lambda (G3acd@name) (G2e47@id? G3acd@name)) G3acb@ls/false)) '#f) (apply (lambda (G3acf@name) (G3aaa@gen-name G3acf@name)) G3acb@ls/false) ((lambda (G3ad1@t) ((lambda (G3ad3@ls/false) (if (if G3ad3@ls/false (begin '#f (apply (lambda (G3ad5@name) (G2e47@id? G3ad5@name)) G3ad3@ls/false)) '#f) (apply (lambda (G3ad7@name) (G3aaa@gen-name G3ad7@name)) G3ad3@ls/false) ((lambda (G3ad9@t) ((lambda (G3adb@ls/false) (if (if G3adb@ls/false (begin '#f (apply (lambda (G3add@name) (G2e47@id? G3add@name)) G3adb@ls/false)) '#f) (apply (lambda (G3adf@name) (G3aaa@gen-name G3adf@name)) G3adb@ls/false) ((lambda (G3ae1@t) ((lambda (G3ae3@ls/false) (if G3ae3@ls/false (apply (lambda (G3ae5@others) (G317d@syntax-violation '#f '"invalid field spec" G3aab@field)) G3ae3@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3ae1@t))) (G308a@syntax-dispatch G3ae1@t 'any))) G3ad9@t))) (G308a@syntax-dispatch G3ad9@t 'any))) G3ad1@t))) (G308a@syntax-dispatch G3ad1@t '(#(scheme-id immutable) any)))) G3ac9@t))) (G308a@syntax-dispatch G3ac9@t '(#(scheme-id mutable) any)))) G3abd@t))) (G308a@syntax-dispatch G3abd@t '(#(scheme-id immutable) any any)))) G3aad@t))) (G308a@syntax-dispatch G3aad@t '(#(scheme-id mutable) any any any)))) G3aab@field)) G3aa6@fields))) '#f))) (set! G3a44@enumerate (lambda (G3a9d@ls) ((letrec ((G3a9f@f (lambda (G3aa1@ls G3aa2@i) (if (null? G3aa1@ls) '() (cons G3aa2@i (G3a9f@f (cdr G3aa1@ls) (+ G3aa2@i '1))))))) G3a9f@f) G3a9d@ls '0))) (set! G3a46@do-define-record (lambda (G3a75@namespec G3a76@clause*) ((lambda (G3a79@foo) ((lambda (G3a7b@foo-rtd) ((lambda (G3a7d@foo-rcd) ((lambda (G3a7f@protocol) ((lambda (G3a81@make-foo) ((lambda (G3a83@fields) ((lambda (G3a85@idx*) ((lambda (G3a87@foo-x*) ((lambda (G3a89@set-foo-x!*) ((lambda (G3a8b@set-foo-idx*) ((lambda (G3a8d@foo?) ((lambda (G3a8f@foo-rtd-code) ((lambda (G3a91@foo-rcd-code) ((lambda (G3a93@protocol-code) ((lambda () (G3040@bless (cons 'begin (cons (list 'define G3a7b@foo-rtd G3a8f@foo-rtd-code) (cons (list 'define G3a7f@protocol G3a93@protocol-code) (cons (list 'define G3a7d@foo-rcd G3a91@foo-rcd-code) (cons (list 'define-syntax G3a79@foo (list 'list ''$rtd (list 'syntax G3a7b@foo-rtd) (list 'syntax G3a7d@foo-rcd))) (cons (list 'define G3a8d@foo? (list 'record-predicate G3a7b@foo-rtd)) (cons (list 'define G3a81@make-foo (list 'record-constructor G3a7d@foo-rcd)) (append (map (lambda (G3a95@foo-x G3a96@idx) (list 'define G3a95@foo-x (list 'record-accessor G3a7b@foo-rtd G3a96@idx))) G3a87@foo-x* G3a85@idx*) (map (lambda (G3a99@set-foo-x! G3a9a@idx) (list 'define G3a99@set-foo-x! (list 'record-mutator G3a7b@foo-rtd G3a9a@idx))) G3a89@set-foo-x!* G3a8b@set-foo-idx*))))))))))))) (G3a3a@get-protocol-code G3a76@clause*))) (G3a38@foo-rcd-code G3a76@clause* G3a7b@foo-rtd G3a7f@protocol (G3a36@parent-rcd-code G3a76@clause*)))) (G3a32@foo-rtd-code G3a79@foo G3a76@clause* (G3a34@parent-rtd-code G3a76@clause*)))) (G3a2e@get-record-predicate-name G3a75@namespec))) (G3a3e@get-mutator-indices G3a83@fields))) (G3a40@get-mutators G3a79@foo G3a83@fields))) (G3a42@get-accessors G3a79@foo G3a83@fields))) (G3a44@enumerate G3a83@fields))) (G3a3c@get-fields G3a76@clause*))) (G3a2c@get-record-constructor-name G3a75@namespec))) (gensym))) (gensym))) (gensym))) (G3a2a@get-record-name G3a75@namespec)))) (set! G3a48@verify-clauses (lambda (G3a51@x G3a52@cls*) ((lambda (G3a56@valid-kwds G3a58@free-id-member?) (begin (set! G3a56@valid-kwds (map G3040@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3a58@free-id-member? (lambda (G3a6f@x G3a70@ls) (if (pair? G3a70@ls) (begin '#f ((lambda (G3a73@t) (if G3a73@t G3a73@t (begin '#f (G3a58@free-id-member? G3a6f@x (cdr G3a70@ls))))) (G2e4f@free-id=? G3a6f@x (car G3a70@ls)))) '#f))) ((letrec ((G3a59@f (lambda (G3a5b@cls* G3a5c@seen*) (if (not (null? G3a5b@cls*)) ((lambda (G3a5f@t) ((lambda (G3a61@ls/false) (if G3a61@ls/false (apply (lambda (G3a63@kwd G3a64@rest) (if ((lambda (G3a67@t) (if G3a67@t G3a67@t (begin '#f (not (G3a58@free-id-member? G3a63@kwd G3a56@valid-kwds))))) (not (G2e47@id? G3a63@kwd))) (G317d@syntax-violation '#f '"not a valid define-record-type keyword" G3a63@kwd) (if (G2e55@bound-id-member? G3a63@kwd G3a5c@seen*) (G317d@syntax-violation '#f '"duplicate use of keyword " G3a51@x G3a63@kwd) (G3a59@f (cdr G3a5b@cls*) (cons G3a63@kwd G3a5c@seen*))))) G3a61@ls/false) ((lambda (G3a69@t) ((lambda (G3a6b@ls/false) (if G3a6b@ls/false (apply (lambda (G3a6d@cls) (G317d@syntax-violation '#f '"malformed define-record-type clause" G3a6d@cls)) G3a6b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3a69@t))) (G308a@syntax-dispatch G3a69@t 'any))) G3a5f@t))) (G308a@syntax-dispatch G3a5f@t '(any . any)))) (car G3a5b@cls*)) (void))))) G3a59@f) G3a52@cls* '()))) '#f '#f))) ((lambda (G3a49@t) ((lambda (G3a4b@ls/false) (if G3a4b@ls/false (apply (lambda (G3a4d@namespec G3a4e@clause*) (begin (G3a48@verify-clauses G3a25@x G3a4e@clause*) (G3a46@do-define-record G3a4d@namespec G3a4e@clause*))) G3a4b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3a49@t))) (G308a@syntax-dispatch G3a49@t '(_ any . each-any)))) G3a25@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3080@define-condition-type-macro (lambda (G3c25@x) ((lambda (G3c28@mkname) (begin (set! G3c28@mkname (lambda (G3c55@name G3c56@suffix) (G3181@datum->syntax G3c55@name (string->symbol (string-append (symbol->string (G3183@syntax->datum G3c55@name)) G3c56@suffix))))) ((lambda (G3c29@t) ((lambda (G3c2b@ls/false) (if (if G3c2b@ls/false (begin '#f (apply (lambda (G3c2d@ctxt G3c2e@name G3c2f@super G3c30@constructor G3c31@predicate G3c32@field* G3c33@accessor*) (if (G2e47@id? G3c2e@name) (if (G2e47@id? G3c2f@super) (if (G2e47@id? G3c30@constructor) (if (G2e47@id? G3c31@predicate) (if (for-all G2e47@id? G3c32@field*) (begin '#f (for-all G2e47@id? G3c33@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3c2b@ls/false)) '#f) (apply (lambda (G3c3b@ctxt G3c3c@name G3c3d@super G3c3e@constructor G3c3f@predicate G3c40@field* G3c41@accessor*) ((lambda (G3c49@aux-accessor*) (G3040@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3c3c@name G3c3e@constructor (gensym)) (cons (list 'parent G3c3d@super) (cons (cons 'fields (map (lambda (G3c4b@field G3c4c@aux) (list 'immutable G3c4b@field G3c4c@aux)) G3c40@field* G3c49@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3c3f@predicate (list 'condition-predicate (list 'record-type-descriptor G3c3c@name))) (map (lambda (G3c4f@accessor G3c50@aux) (list 'define G3c4f@accessor (list 'condition-accessor (list 'record-type-descriptor G3c3c@name) G3c50@aux))) G3c41@accessor* G3c49@aux-accessor*)))))) (map (lambda (G3c53@x) (gensym)) G3c41@accessor*))) G3c2b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3c29@t))) (G308a@syntax-dispatch G3c29@t '(any any any any any . #(each (any any)))))) G3c25@x))) '#f))) (set! G3082@incorrect-usage-macro (lambda (G3c59@e) (G317d@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3c59@e))) (set! G3084@parameterize-macro (lambda (G3c5b@e) ((lambda (G3c5d@t) ((lambda (G3c5f@ls/false) (if G3c5f@ls/false (apply (lambda (G3c61@b G3c62@b*) (G3040@bless (cons 'let (cons '() (cons G3c61@b G3c62@b*))))) G3c5f@ls/false) ((lambda (G3c65@t) ((lambda (G3c67@ls/false) (if G3c67@ls/false (apply (lambda (G3c69@olhs* G3c6a@orhs* G3c6b@b G3c6c@b*) ((lambda (G3c71@lhs* G3c72@rhs*) (G3040@bless (cons (list 'lambda (append G3c71@lhs* G3c72@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3c75@lhs G3c76@rhs) (list 'let (list (list 't (list G3c75@lhs))) (list G3c75@lhs G3c76@rhs) (cons 'set! (cons G3c76@rhs '(t))))) G3c71@lhs* G3c72@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3c6b@b G3c6c@b*))) '(swap)))))) (append G3c69@olhs* G3c6a@orhs*)))) (G3169@generate-temporaries G3c69@olhs*) (G3169@generate-temporaries G3c6a@orhs*))) G3c67@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3c65@t))) (G308a@syntax-dispatch G3c65@t '(_ #(each (any any)) any . each-any)))) G3c5d@t))) (G308a@syntax-dispatch G3c5d@t '(_ () any . each-any)))) G3c5b@e))) (set! G3086@foreign-call-transformer (lambda (G3c79@e G3c7a@r G3c7b@mr) ((lambda (G3c7f@t) ((lambda (G3c81@ls/false) (if G3c81@ls/false (apply (lambda (G3c83@name G3c84@arg*) (cons 'foreign-call (cons (G30ae@chi-expr G3c83@name G3c7a@r G3c7b@mr) (G30aa@chi-expr* G3c84@arg* G3c7a@r G3c7b@mr)))) G3c81@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3c7f@t))) (G308a@syntax-dispatch G3c7f@t '(_ any . each-any)))) G3c79@e))) (set! G3088@convert-pattern (lambda (G3c87@pattern G3c88@keys) ((lambda (G3c8c@cvt* G3c8e@cvt) (begin (set! G3c8c@cvt* (lambda (G3d1d@p* G3d1e@n G3d1f@ids) (if (null? G3d1d@p*) (values '() G3d1f@ids) (call-with-values (lambda () (G3c8c@cvt* (cdr G3d1d@p*) G3d1e@n G3d1f@ids)) (lambda (G3d25@G3d23 G3d26@G3d24) ((lambda (G3d29@ids G3d2a@y) (call-with-values (lambda () (G3c8e@cvt (car G3d1d@p*) G3d1e@n G3d29@ids)) (lambda (G3d2f@G3d2d G3d30@G3d2e) ((lambda (G3d33@ids G3d34@x) (values (cons G3d34@x G3d2a@y) G3d33@ids)) G3d30@G3d2e G3d2f@G3d2d)))) G3d26@G3d24 G3d25@G3d23)))))) (set! G3c8e@cvt (lambda (G3c8f@p G3c90@n G3c91@ids) ((lambda (G3c95@t) ((lambda (G3c97@ls/false) (if (if G3c97@ls/false (begin '#f (apply (lambda (G3c99@id) (G2e47@id? G3c99@id)) G3c97@ls/false)) '#f) (apply (lambda (G3c9b@id) (if (G2e55@bound-id-member? G3c8f@p G3c88@keys) (values (vector 'free-id G3c8f@p) G3c91@ids) (if (G2e4f@free-id=? G3c8f@p (G3018@scheme-stx '_)) (values '_ G3c91@ids) (values 'any (cons (cons G3c8f@p G3c90@n) G3c91@ids))))) G3c97@ls/false) ((lambda (G3c9d@t) ((lambda (G3c9f@ls/false) (if (if G3c9f@ls/false (begin '#f (apply (lambda (G3ca1@p G3ca2@dots) (G308c@ellipsis? G3ca2@dots)) G3c9f@ls/false)) '#f) (apply (lambda (G3ca5@p G3ca6@dots) (call-with-values (lambda () (G3c8e@cvt G3ca5@p (+ G3c90@n '1) G3c91@ids)) (lambda (G3cab@G3ca9 G3cac@G3caa) ((lambda (G3caf@ids G3cb0@p) (values (if (eq? G3cb0@p 'any) 'each-any (vector 'each G3cb0@p)) G3caf@ids)) G3cac@G3caa G3cab@G3ca9)))) G3c9f@ls/false) ((lambda (G3cb3@t) ((lambda (G3cb5@ls/false) (if (if G3cb5@ls/false (begin '#f (apply (lambda (G3cb7@x G3cb8@dots G3cb9@ys G3cba@z) (G308c@ellipsis? G3cb8@dots)) G3cb5@ls/false)) '#f) (apply (lambda (G3cbf@x G3cc0@dots G3cc1@ys G3cc2@z) (call-with-values (lambda () (G3c8e@cvt G3cc2@z G3c90@n G3c91@ids)) (lambda (G3cc9@G3cc7 G3cca@G3cc8) ((lambda (G3ccd@ids G3cce@z) (call-with-values (lambda () (G3c8c@cvt* G3cc1@ys G3c90@n G3ccd@ids)) (lambda (G3cd3@G3cd1 G3cd4@G3cd2) ((lambda (G3cd7@ids G3cd8@ys) (call-with-values (lambda () (G3c8e@cvt G3cbf@x (+ G3c90@n '1) G3cd7@ids)) (lambda (G3cdd@G3cdb G3cde@G3cdc) ((lambda (G3ce1@ids G3ce2@x) (values (vector 'each+ G3ce2@x (reverse G3cd8@ys) G3cce@z) G3ce1@ids)) G3cde@G3cdc G3cdd@G3cdb)))) G3cd4@G3cd2 G3cd3@G3cd1)))) G3cca@G3cc8 G3cc9@G3cc7)))) G3cb5@ls/false) ((lambda (G3ce5@t) ((lambda (G3ce7@ls/false) (if G3ce7@ls/false (apply (lambda (G3ce9@x G3cea@y) (call-with-values (lambda () (G3c8e@cvt G3cea@y G3c90@n G3c91@ids)) (lambda (G3cef@G3ced G3cf0@G3cee) ((lambda (G3cf3@ids G3cf4@y) (call-with-values (lambda () (G3c8e@cvt G3ce9@x G3c90@n G3cf3@ids)) (lambda (G3cf9@G3cf7 G3cfa@G3cf8) ((lambda (G3cfd@ids G3cfe@x) (values (cons G3cfe@x G3cf4@y) G3cfd@ids)) G3cfa@G3cf8 G3cf9@G3cf7)))) G3cf0@G3cee G3cef@G3ced)))) G3ce7@ls/false) ((lambda (G3d01@t) ((lambda (G3d03@ls/false) (if G3d03@ls/false (apply (lambda () (values '() G3c91@ids)) G3d03@ls/false) ((lambda (G3d05@t) ((lambda (G3d07@ls/false) (if (if G3d07@ls/false (begin '#f (apply (lambda (G3d09@p) (not (G2e0f@stx? G3d09@p))) G3d07@ls/false)) '#f) (apply (lambda (G3d0b@p) (call-with-values (lambda () (G3c8e@cvt G3d0b@p G3c90@n G3c91@ids)) (lambda (G3d0f@G3d0d G3d10@G3d0e) ((lambda (G3d13@ids G3d14@p) (values (vector 'vector G3d14@p) G3d13@ids)) G3d10@G3d0e G3d0f@G3d0d)))) G3d07@ls/false) ((lambda (G3d17@t) ((lambda (G3d19@ls/false) (if G3d19@ls/false (apply (lambda (G3d1b@datum) (values (vector 'atom (G2e5d@stx->datum G3d1b@datum)) G3c91@ids)) G3d19@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3d17@t))) (G308a@syntax-dispatch G3d17@t 'any))) G3d05@t))) (G308a@syntax-dispatch G3d05@t '#(vector each-any)))) G3d01@t))) (G308a@syntax-dispatch G3d01@t '()))) G3ce5@t))) (G308a@syntax-dispatch G3ce5@t '(any . any)))) G3cb3@t))) (G308a@syntax-dispatch G3cb3@t '(any any . #(each+ any () any))))) G3c9d@t))) (G308a@syntax-dispatch G3c9d@t '(any any)))) G3c95@t))) (G308a@syntax-dispatch G3c95@t 'any))) G3c8f@p))) (G3c8e@cvt G3c87@pattern '0 '()))) '#f '#f))) (set! G308a@syntax-dispatch ((lambda () ((lambda (G3d38@stx^ G3d3a@match-each G3d3c@match-each+ G3d3e@match-each-any G3d40@match-empty G3d42@combine G3d44@match* G3d46@match) (begin (set! G3d38@stx^ (lambda (G3e01@e G3e02@m* G3e03@s* G3e04@ae*) (if (if (null? G3e02@m*) (if (null? G3e03@s*) (begin '#f (null? G3e04@ae*)) '#f) '#f) G3e01@e (G2e2f@mkstx G3e01@e G3e02@m* G3e03@s* G3e04@ae*)))) (set! G3d3a@match-each (lambda (G3de4@e G3de5@p G3de6@m* G3de7@s* G3de8@ae*) (if (pair? G3de4@e) ((lambda (G3dee@first) (if G3dee@first (begin '#f ((lambda (G3df0@rest) (if G3df0@rest (begin '#f (cons G3dee@first G3df0@rest)) '#f)) (G3d3a@match-each (cdr G3de4@e) G3de5@p G3de6@m* G3de7@s* G3de8@ae*))) '#f)) (G3d46@match (car G3de4@e) G3de5@p G3de6@m* G3de7@s* G3de8@ae* '())) (if (null? G3de4@e) '() (if (G2e0f@stx? G3de4@e) (if (not (G2dbd@top-marked? G3de6@m*)) (begin '#f (call-with-values (lambda () (G2e2d@join-wraps G3de6@m* G3de7@s* G3de8@ae* G3de4@e)) (lambda (G3df5@G3df2 G3df6@G3df3 G3df7@G3df4) ((lambda (G3dfb@ae* G3dfc@s* G3dfd@m*) (G3d3a@match-each (G2e13@stx-expr G3de4@e) G3de5@p G3dfd@m* G3dfc@s* G3dfb@ae*)) G3df7@G3df4 G3df6@G3df3 G3df5@G3df2)))) '#f) (if (G298e@G288e@annotation? G3de4@e) (G3d3a@match-each (G2990@G2892@annotation-expression G3de4@e) G3de5@p G3de6@m* G3de7@s* G3de8@ae*) '#f)))))) (set! G3d3c@match-each+ (lambda (G3daa@e G3dab@x-pat G3dac@y-pat G3dad@z-pat G3dae@m* G3daf@s* G3db0@ae* G3db1@r) ((letrec ((G3dba@f (lambda (G3dbc@e G3dbd@m* G3dbe@s* G3dbf@ae*) (if (pair? G3dbc@e) (call-with-values (lambda () (G3dba@f (cdr G3dbc@e) G3dbd@m* G3dbe@s* G3dbf@ae*)) (lambda (G3dc7@G3dc4 G3dc8@G3dc5 G3dc9@G3dc6) ((lambda (G3dcd@r G3dce@y-pat G3dcf@xr*) (if G3dcd@r (if (null? G3dce@y-pat) ((lambda (G3dd3@xr) (if G3dd3@xr (values (cons G3dd3@xr G3dcf@xr*) G3dce@y-pat G3dcd@r) (values '#f '#f '#f))) (G3d46@match (car G3dbc@e) G3dab@x-pat G3dbd@m* G3dbe@s* G3dbf@ae* '())) (values '() (cdr G3dce@y-pat) (G3d46@match (car G3dbc@e) (car G3dce@y-pat) G3dbd@m* G3dbe@s* G3dbf@ae* G3dcd@r))) (values '#f '#f '#f))) G3dc9@G3dc6 G3dc8@G3dc5 G3dc7@G3dc4))) (if (G2e0f@stx? G3dbc@e) (if (G2dbd@top-marked? G3dbd@m*) (values '() G3dac@y-pat (G3d46@match G3dbc@e G3dad@z-pat G3dbd@m* G3dbe@s* G3dbf@ae* G3db1@r)) (call-with-values (lambda () (G2e2d@join-wraps G3dbd@m* G3dbe@s* G3dbf@ae* G3dbc@e)) (lambda (G3dd8@G3dd5 G3dd9@G3dd6 G3dda@G3dd7) ((lambda (G3dde@ae* G3ddf@s* G3de0@m*) (G3dba@f (G2e13@stx-expr G3dbc@e) G3de0@m* G3ddf@s* G3dde@ae*)) G3dda@G3dd7 G3dd9@G3dd6 G3dd8@G3dd5)))) (if (G298e@G288e@annotation? G3dbc@e) (G3dba@f (G2990@G2892@annotation-expression G3dbc@e) G3dbd@m* G3dbe@s* G3dbf@ae*) (values '() G3dac@y-pat (G3d46@match G3dbc@e G3dad@z-pat G3dbd@m* G3dbe@s* G3dbf@ae* G3db1@r)))))))) G3dba@f) G3daa@e G3dae@m* G3daf@s* G3db0@ae*))) (set! G3d3e@match-each-any (lambda (G3d91@e G3d92@m* G3d93@s* G3d94@ae*) (if (pair? G3d91@e) ((lambda (G3d99@l) (if G3d99@l (begin '#f (cons (G3d38@stx^ (car G3d91@e) G3d92@m* G3d93@s* G3d94@ae*) G3d99@l)) '#f)) (G3d3e@match-each-any (cdr G3d91@e) G3d92@m* G3d93@s* G3d94@ae*)) (if (null? G3d91@e) '() (if (G2e0f@stx? G3d91@e) (if (not (G2dbd@top-marked? G3d92@m*)) (begin '#f (call-with-values (lambda () (G2e2d@join-wraps G3d92@m* G3d93@s* G3d94@ae* G3d91@e)) (lambda (G3d9e@G3d9b G3d9f@G3d9c G3da0@G3d9d) ((lambda (G3da4@ae* G3da5@s* G3da6@m*) (G3d3e@match-each-any (G2e13@stx-expr G3d91@e) G3da6@m* G3da5@s* G3da4@ae*)) G3da0@G3d9d G3d9f@G3d9c G3d9e@G3d9b)))) '#f) (if (G298e@G288e@annotation? G3d91@e) (G3d3e@match-each-any (G2990@G2892@annotation-expression G3d91@e) G3d92@m* G3d93@s* G3d94@ae*) '#f)))))) (set! G3d40@match-empty (lambda (G3d8b@p G3d8c@r) (if (null? G3d8b@p) G3d8c@r (if (eq? G3d8b@p '_) G3d8c@r (if (eq? G3d8b@p 'any) (cons '() G3d8c@r) (if (pair? G3d8b@p) (G3d40@match-empty (car G3d8b@p) (G3d40@match-empty (cdr G3d8b@p) G3d8c@r)) (if (eq? G3d8b@p 'each-any) (cons '() G3d8c@r) ((lambda (G3d8f@t) (if (memv G3d8f@t '(each)) (G3d40@match-empty (vector-ref G3d8b@p '1) G3d8c@r) (if (memv G3d8f@t '(each+)) (G3d40@match-empty (vector-ref G3d8b@p '1) (G3d40@match-empty (reverse (vector-ref G3d8b@p '2)) (G3d40@match-empty (vector-ref G3d8b@p '3) G3d8c@r))) (if (memv G3d8f@t '(free-id atom)) G3d8c@r (if (memv G3d8f@t '(scheme-id atom)) G3d8c@r (if (memv G3d8f@t '(vector)) (G3d40@match-empty (vector-ref G3d8b@p '1) G3d8c@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d8b@p))))))) (vector-ref G3d8b@p '0))))))))) (set! G3d42@combine (lambda (G3d87@r* G3d88@r) (if (null? (car G3d87@r*)) G3d88@r (cons (map car G3d87@r*) (G3d42@combine (map cdr G3d87@r*) G3d88@r))))) (set! G3d44@match* (lambda (G3d66@e G3d67@p G3d68@m* G3d69@s* G3d6a@ae* G3d6b@r) (if (null? G3d67@p) (if (null? G3d66@e) (begin '#f G3d6b@r) '#f) (if (pair? G3d67@p) (if (pair? G3d66@e) (begin '#f (G3d46@match (car G3d66@e) (car G3d67@p) G3d68@m* G3d69@s* G3d6a@ae* (G3d46@match (cdr G3d66@e) (cdr G3d67@p) G3d68@m* G3d69@s* G3d6a@ae* G3d6b@r))) '#f) (if (eq? G3d67@p 'each-any) ((lambda (G3d72@l) (if G3d72@l (begin '#f (cons G3d72@l G3d6b@r)) '#f)) (G3d3e@match-each-any G3d66@e G3d68@m* G3d69@s* G3d6a@ae*)) ((lambda (G3d74@t) (if (memv G3d74@t '(each)) (if (null? G3d66@e) (G3d40@match-empty (vector-ref G3d67@p '1) G3d6b@r) ((lambda (G3d76@r*) (if G3d76@r* (begin '#f (G3d42@combine G3d76@r* G3d6b@r)) '#f)) (G3d3a@match-each G3d66@e (vector-ref G3d67@p '1) G3d68@m* G3d69@s* G3d6a@ae*))) (if (memv G3d74@t '(free-id)) (if (symbol? G3d66@e) (if (G2dbd@top-marked? G3d68@m*) (if (G2e4f@free-id=? (G3d38@stx^ G3d66@e G3d68@m* G3d69@s* G3d6a@ae*) (vector-ref G3d67@p '1)) (begin '#f G3d6b@r) '#f) '#f) '#f) (if (memv G3d74@t '(scheme-id)) (if (symbol? G3d66@e) (if (G2dbd@top-marked? G3d68@m*) (if (G2e4f@free-id=? (G3d38@stx^ G3d66@e G3d68@m* G3d69@s* G3d6a@ae*) (G3018@scheme-stx (vector-ref G3d67@p '1))) (begin '#f G3d6b@r) '#f) '#f) '#f) (if (memv G3d74@t '(each+)) (call-with-values (lambda () (G3d3c@match-each+ G3d66@e (vector-ref G3d67@p '1) (vector-ref G3d67@p '2) (vector-ref G3d67@p '3) G3d68@m* G3d69@s* G3d6a@ae* G3d6b@r)) (lambda (G3d7b@G3d78 G3d7c@G3d79 G3d7d@G3d7a) ((lambda (G3d81@r G3d82@y-pat G3d83@xr*) (if G3d81@r (if (null? G3d82@y-pat) (begin '#f (if (null? G3d83@xr*) (G3d40@match-empty (vector-ref G3d67@p '1) G3d81@r) (G3d42@combine G3d83@xr* G3d81@r))) '#f) '#f)) G3d7d@G3d7a G3d7c@G3d79 G3d7b@G3d78))) (if (memv G3d74@t '(atom)) (if (equal? (vector-ref G3d67@p '1) (G2e5b@strip G3d66@e G3d68@m*)) (begin '#f G3d6b@r) '#f) (if (memv G3d74@t '(vector)) (if (vector? G3d66@e) (begin '#f (G3d46@match (vector->list G3d66@e) (vector-ref G3d67@p '1) G3d68@m* G3d69@s* G3d6a@ae* G3d6b@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3d67@p)))))))) (vector-ref G3d67@p '0))))))) (set! G3d46@match (lambda (G3d4b@e G3d4c@p G3d4d@m* G3d4e@s* G3d4f@ae* G3d50@r) (if (not G3d50@r) '#f (if (eq? G3d4c@p '_) G3d50@r (if (eq? G3d4c@p 'any) (cons (G3d38@stx^ G3d4b@e G3d4d@m* G3d4e@s* G3d4f@ae*) G3d50@r) (if (G2e0f@stx? G3d4b@e) (if (not (G2dbd@top-marked? G3d4d@m*)) (begin '#f (call-with-values (lambda () (G2e2d@join-wraps G3d4d@m* G3d4e@s* G3d4f@ae* G3d4b@e)) (lambda (G3d5a@G3d57 G3d5b@G3d58 G3d5c@G3d59) ((lambda (G3d60@ae* G3d61@s* G3d62@m*) (G3d46@match (G2e13@stx-expr G3d4b@e) G3d4c@p G3d62@m* G3d61@s* G3d60@ae* G3d50@r)) G3d5c@G3d59 G3d5b@G3d58 G3d5a@G3d57)))) '#f) (if (G298e@G288e@annotation? G3d4b@e) (G3d46@match (G2990@G2892@annotation-expression G3d4b@e) G3d4c@p G3d4d@m* G3d4e@s* G3d4f@ae* G3d50@r) (G3d44@match* G3d4b@e G3d4c@p G3d4d@m* G3d4e@s* G3d4f@ae* G3d50@r)))))))) (lambda (G3d47@e G3d48@p) (G3d46@match G3d47@e G3d48@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G308c@ellipsis? (lambda (G3e09@x) (if (G2e47@id? G3e09@x) (begin '#f (G2e4f@free-id=? G3e09@x (G3018@scheme-stx '...))) '#f))) (set! G308e@underscore? (lambda (G3e0b@x) (if (G2e47@id? G3e0b@x) (begin '#f (G2e4f@free-id=? G3e0b@x (G3018@scheme-stx '_))) '#f))) (set! G3090@verify-literals (lambda (G3e0d@lits G3e0e@expr) (for-each (lambda (G3e11@x) (if ((lambda (G3e13@t) (if G3e13@t G3e13@t ((lambda (G3e15@t) (if G3e15@t G3e15@t (begin '#f (G308e@underscore? G3e11@x)))) (G308c@ellipsis? G3e11@x)))) (not (G2e47@id? G3e11@x))) (G317d@syntax-violation '#f '"invalid literal" G3e0e@expr G3e11@x) (void))) G3e0d@lits))) (set! G3092@syntax-case-transformer ((lambda () ((lambda (G3e18@build-dispatch-call G3e1a@invalid-ids-error G3e1c@gen-clause G3e1e@gen-syntax-case) (begin (set! G3e18@build-dispatch-call (lambda (G3e87@pvars G3e88@expr G3e89@y G3e8a@r G3e8b@mr) ((lambda (G3e91@ids G3e92@levels) ((lambda (G3e95@labels G3e96@new-vars) ((lambda (G3e99@body) (list '(primitive apply) (G2d9f@G2cc7@build-lambda '#f G3e96@new-vars G3e99@body) G3e89@y)) (G30ae@chi-expr (G2e33@add-subst (G2e00@make-full-rib G3e91@ids G3e95@labels) G3e88@expr) (append (map (lambda (G3e9b@label G3e9c@var G3e9d@level) (cons G3e9b@label (G2e67@make-binding 'syntax (cons G3e9c@var G3e9d@level)))) G3e95@labels G3e96@new-vars (map cdr G3e87@pvars)) G3e8a@r) G3e8b@mr))) (map G2dc3@gen-label G3e91@ids) (map G2dbf@gen-lexical G3e91@ids))) (map car G3e87@pvars) (map cdr G3e87@pvars)))) (set! G3e1a@invalid-ids-error (lambda (G3e7b@id* G3e7c@e G3e7d@class) ((letrec ((G3e81@find (lambda (G3e83@id* G3e84@ok*) (if (null? G3e83@id*) (G317d@syntax-violation '#f '"invalid syntax" G3e7c@e) (if (G2e47@id? (car G3e83@id*)) (if (G2e55@bound-id-member? (car G3e83@id*) G3e84@ok*) (G3177@syntax-error (car G3e83@id*) '"duplicate " G3e7d@class) (G3e81@find (cdr G3e83@id*) (cons (car G3e83@id*) G3e84@ok*))) (G3177@syntax-error (car G3e83@id*) '"invalid " G3e7d@class)))))) G3e81@find) G3e7b@id* '()))) (set! G3e1c@gen-clause (lambda (G3e55@x G3e56@keys G3e57@clauses G3e58@r G3e59@mr G3e5a@pat G3e5b@fender G3e5c@expr) (call-with-values (lambda () (G3088@convert-pattern G3e5a@pat G3e56@keys)) (lambda (G3e67@G3e65 G3e68@G3e66) ((lambda (G3e6b@pvars G3e6c@p) (if (not (G2e53@distinct-bound-ids? (map car G3e6b@pvars))) (G3e1a@invalid-ids-error (map car G3e6b@pvars) G3e5a@pat '"pattern variable") (if (not (for-all (lambda (G3e6f@x) (not (G308c@ellipsis? (car G3e6f@x)))) G3e6b@pvars)) (G317d@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3e5a@pat) ((lambda (G3e71@y) ((lambda (G3e73@test) ((lambda (G3e75@conseq) ((lambda (G3e77@altern) (list (G2d9f@G2cc7@build-lambda '#f (list G3e71@y) (list 'if G3e73@test G3e75@conseq G3e77@altern)) (list '(primitive syntax-dispatch) G3e55@x (list 'quote G3e6c@p)))) (G3e1e@gen-syntax-case G3e55@x G3e56@keys G3e57@clauses G3e58@r G3e59@mr))) (G3e18@build-dispatch-call G3e6b@pvars G3e5c@expr G3e71@y G3e58@r G3e59@mr))) (if (eq? G3e5b@fender '#t) G3e71@y ((lambda (G3e79@call) (list 'if G3e71@y G3e79@call (list 'quote '#f))) (G3e18@build-dispatch-call G3e6b@pvars G3e5b@fender G3e71@y G3e58@r G3e59@mr))))) (G2dbf@gen-lexical 'tmp))))) G3e68@G3e66 G3e67@G3e65))))) (set! G3e1e@gen-syntax-case (lambda (G3e33@x G3e34@keys G3e35@clauses G3e36@r G3e37@mr) (if (null? G3e35@clauses) (list '(primitive syntax-error) G3e33@x) ((lambda (G3e3d@t) ((lambda (G3e3f@ls/false) (if G3e3f@ls/false (apply (lambda (G3e41@pat G3e42@expr) (if (if (G2e47@id? G3e41@pat) (if (not (G2e55@bound-id-member? G3e41@pat G3e34@keys)) (begin '#f (not (G308c@ellipsis? G3e41@pat))) '#f) '#f) (if (G2e4f@free-id=? G3e41@pat (G3018@scheme-stx '_)) (G30ae@chi-expr G3e42@expr G3e36@r G3e37@mr) ((lambda (G3e45@lab G3e46@lex) ((lambda (G3e49@body) (list (G2d9f@G2cc7@build-lambda '#f (list G3e46@lex) G3e49@body) G3e33@x)) (G30ae@chi-expr (G2e33@add-subst (G2e00@make-full-rib (list G3e41@pat) (list G3e45@lab)) G3e42@expr) (cons (cons G3e45@lab (G2e67@make-binding 'syntax (cons G3e46@lex '0))) G3e36@r) G3e37@mr))) (G2dc3@gen-label G3e41@pat) (G2dbf@gen-lexical G3e41@pat))) (G3e1c@gen-clause G3e33@x G3e34@keys (cdr G3e35@clauses) G3e36@r G3e37@mr G3e41@pat '#t G3e42@expr))) G3e3f@ls/false) ((lambda (G3e4b@t) ((lambda (G3e4d@ls/false) (if G3e4d@ls/false (apply (lambda (G3e4f@pat G3e50@fender G3e51@expr) (G3e1c@gen-clause G3e33@x G3e34@keys (cdr G3e35@clauses) G3e36@r G3e37@mr G3e4f@pat G3e50@fender G3e51@expr)) G3e4d@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3e4b@t))) (G308a@syntax-dispatch G3e4b@t '(any any any)))) G3e3d@t))) (G308a@syntax-dispatch G3e3d@t '(any any)))) (car G3e35@clauses))))) (lambda (G3e1f@e G3e20@r G3e21@mr) ((lambda (G3e25@t) ((lambda (G3e27@ls/false) (if G3e27@ls/false (apply (lambda (G3e29@expr G3e2a@keys G3e2b@clauses) (begin (G3090@verify-literals G3e2a@keys G3e1f@e) ((lambda (G3e2f@x) ((lambda (G3e31@body) (list (G2d9f@G2cc7@build-lambda '#f (list G3e2f@x) G3e31@body) (G30ae@chi-expr G3e29@expr G3e20@r G3e21@mr))) (G3e1e@gen-syntax-case G3e2f@x G3e2a@keys G3e2b@clauses G3e20@r G3e21@mr))) (G2dbf@gen-lexical 'tmp)))) G3e27@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3e25@t))) (G308a@syntax-dispatch G3e25@t '(_ any each-any . each-any)))) G3e1f@e)))) '#f '#f '#f '#f)))) (set! G3094@ellipsis-map (lambda (G3ea1@proc G3ea2@ls . G3ea5@ls*) ((lambda (G3ea8@who) (begin (set! G3ea8@who '...) (begin (if (not (list? G3ea2@ls)) (assertion-violation G3ea8@who '"not a list" G3ea2@ls) (void)) (if (not (null? G3ea5@ls*)) ((lambda (G3ea9@n) (for-each (lambda (G3eab@x) (begin (if (not (list? G3eab@x)) (assertion-violation G3ea8@who '"not a list" G3eab@x) (void)) (if (not (= (length G3eab@x) G3ea9@n)) (assertion-violation G3ea8@who '"length mismatch" G3ea2@ls G3eab@x) (void)))) G3ea5@ls*)) (length G3ea2@ls)) (void)) (apply map G3ea1@proc G3ea2@ls G3ea5@ls*)))) '#f))) (set! G3096@syntax-transformer ((lambda () ((lambda (G3eae@gen-syntax G3eb0@gen-ref G3eb2@gen-append G3eb4@gen-mappend G3eb6@gen-map G3eb8@gen-cons G3eba@gen-vector G3ebc@regen) (begin (set! G3eae@gen-syntax (lambda (G3f21@src G3f22@e G3f23@r G3f24@maps G3f25@ellipsis? G3f26@vec?) ((lambda (G3f2d@t) ((lambda (G3f2f@ls/false) (if (if G3f2f@ls/false (begin '#f (apply (lambda (G3f31@dots) (G3f25@ellipsis? G3f31@dots)) G3f2f@ls/false)) '#f) (apply (lambda (G3f33@dots) (G317d@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f21@src)) G3f2f@ls/false) ((lambda (G3f35@t) ((lambda (G3f37@ls/false) (if (if G3f37@ls/false (begin '#f (apply (lambda (G3f39@id) (G2e47@id? G3f39@id)) G3f37@ls/false)) '#f) (apply (lambda (G3f3b@id) ((lambda (G3f3d@label) ((lambda (G3f3f@b) ((lambda () (if (eq? (G2e69@binding-type G3f3f@b) 'syntax) (call-with-values (lambda () ((lambda (G3f43@var.lev) (G3eb0@gen-ref G3f21@src (car G3f43@var.lev) (cdr G3f43@var.lev) G3f24@maps)) (G2e6b@binding-value G3f3f@b))) (lambda (G3f45@G3f41 G3f46@G3f42) ((lambda (G3f49@maps G3f4a@var) (values (list 'ref G3f4a@var) G3f49@maps)) G3f46@G3f42 G3f45@G3f41))) (values (list 'quote G3f22@e) G3f24@maps))))) (G2e65@label->binding G3f3d@label G3f23@r))) (G2e61@id->label G3f22@e))) G3f37@ls/false) ((lambda (G3f4d@t) ((lambda (G3f4f@ls/false) (if (if G3f4f@ls/false (begin '#f (apply (lambda (G3f51@dots G3f52@e) (G3f25@ellipsis? G3f51@dots)) G3f4f@ls/false)) '#f) (apply (lambda (G3f55@dots G3f56@e) (if G3f26@vec? (G317d@syntax-violation '#f '"misplaced ellipsis in syntax form" G3f21@src) (G3eae@gen-syntax G3f21@src G3f56@e G3f23@r G3f24@maps (lambda (G3f59@x) '#f) '#f))) G3f4f@ls/false) ((lambda (G3f5b@t) ((lambda (G3f5d@ls/false) (if (if G3f5d@ls/false (begin '#f (apply (lambda (G3f5f@x G3f60@dots G3f61@y) (G3f25@ellipsis? G3f60@dots)) G3f5d@ls/false)) '#f) (apply (lambda (G3f65@x G3f66@dots G3f67@y) ((letrec ((G3f6b@f (lambda (G3f6d@y G3f6e@k) ((lambda (G3f71@t) ((lambda (G3f73@ls/false) (if G3f73@ls/false (apply (lambda () (G3f6e@k G3f24@maps)) G3f73@ls/false) ((lambda (G3f75@t) ((lambda (G3f77@ls/false) (if (if G3f77@ls/false (begin '#f (apply (lambda (G3f79@dots G3f7a@y) (G3f25@ellipsis? G3f79@dots)) G3f77@ls/false)) '#f) (apply (lambda (G3f7d@dots G3f7e@y) (G3f6b@f G3f7e@y (lambda (G3f81@maps) (call-with-values (lambda () (G3f6e@k (cons '() G3f81@maps))) (lambda (G3f85@G3f83 G3f86@G3f84) ((lambda (G3f89@maps G3f8a@x) (if (null? (car G3f89@maps)) (G317d@syntax-violation '#f '"extra ellipsis in syntax form" G3f21@src) (values (G3eb4@gen-mappend G3f8a@x (car G3f89@maps)) (cdr G3f89@maps)))) G3f86@G3f84 G3f85@G3f83)))))) G3f77@ls/false) ((lambda (G3f8d@t) ((lambda (G3f8f@ls/false) (if G3f8f@ls/false (apply (lambda () (call-with-values (lambda () (G3eae@gen-syntax G3f21@src G3f6d@y G3f23@r G3f24@maps G3f25@ellipsis? G3f26@vec?)) (lambda (G3f93@G3f91 G3f94@G3f92) ((lambda (G3f97@maps G3f98@y) (call-with-values (lambda () (G3f6e@k G3f97@maps)) (lambda (G3f9d@G3f9b G3f9e@G3f9c) ((lambda (G3fa1@maps G3fa2@x) (values (G3eb2@gen-append G3fa2@x G3f98@y) G3fa1@maps)) G3f9e@G3f9c G3f9d@G3f9b)))) G3f94@G3f92 G3f93@G3f91)))) G3f8f@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3f8d@t))) (G308a@syntax-dispatch G3f8d@t '_))) G3f75@t))) (G308a@syntax-dispatch G3f75@t '(any . any)))) G3f71@t))) (G308a@syntax-dispatch G3f71@t '()))) G3f6d@y)))) G3f6b@f) G3f67@y (lambda (G3fa5@maps) (call-with-values (lambda () (G3eae@gen-syntax G3f21@src G3f65@x G3f23@r (cons '() G3fa5@maps) G3f25@ellipsis? '#f)) (lambda (G3fa9@G3fa7 G3faa@G3fa8) ((lambda (G3fad@maps G3fae@x) (if (null? (car G3fad@maps)) (G317d@syntax-violation '#f '"extra ellipsis in syntax form" G3f21@src) (values (G3eb6@gen-map G3fae@x (car G3fad@maps)) (cdr G3fad@maps)))) G3faa@G3fa8 G3fa9@G3fa7)))))) G3f5d@ls/false) ((lambda (G3fb1@t) ((lambda (G3fb3@ls/false) (if G3fb3@ls/false (apply (lambda (G3fb5@x G3fb6@y) (call-with-values (lambda () (G3eae@gen-syntax G3f21@src G3fb5@x G3f23@r G3f24@maps G3f25@ellipsis? '#f)) (lambda (G3fbb@G3fb9 G3fbc@G3fba) ((lambda (G3fbf@maps G3fc0@xnew) (call-with-values (lambda () (G3eae@gen-syntax G3f21@src G3fb6@y G3f23@r G3fbf@maps G3f25@ellipsis? G3f26@vec?)) (lambda (G3fc5@G3fc3 G3fc6@G3fc4) ((lambda (G3fc9@maps G3fca@ynew) (values (G3eb8@gen-cons G3f22@e G3fb5@x G3fb6@y G3fc0@xnew G3fca@ynew) G3fc9@maps)) G3fc6@G3fc4 G3fc5@G3fc3)))) G3fbc@G3fba G3fbb@G3fb9)))) G3fb3@ls/false) ((lambda (G3fcd@t) ((lambda (G3fcf@ls/false) (if G3fcf@ls/false (apply (lambda (G3fd1@ls) (call-with-values (lambda () (G3eae@gen-syntax G3f21@src G3fd1@ls G3f23@r G3f24@maps G3f25@ellipsis? '#t)) (lambda (G3fd5@G3fd3 G3fd6@G3fd4) ((lambda (G3fd9@maps G3fda@lsnew) (values (G3eba@gen-vector G3f22@e G3fd1@ls G3fda@lsnew) G3fd9@maps)) G3fd6@G3fd4 G3fd5@G3fd3)))) G3fcf@ls/false) ((lambda (G3fdd@t) ((lambda (G3fdf@ls/false) (if G3fdf@ls/false (apply (lambda () (values (list 'quote G3f22@e) G3f24@maps)) G3fdf@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3fdd@t))) (G308a@syntax-dispatch G3fdd@t '_))) G3fcd@t))) (G308a@syntax-dispatch G3fcd@t '#(vector each-any)))) G3fb1@t))) (G308a@syntax-dispatch G3fb1@t '(any . any)))) G3f5b@t))) (G308a@syntax-dispatch G3f5b@t '(any any . any)))) G3f4d@t))) (G308a@syntax-dispatch G3f4d@t '(any any)))) G3f35@t))) (G308a@syntax-dispatch G3f35@t 'any))) G3f2d@t))) (G308a@syntax-dispatch G3f2d@t 'any))) G3f22@e))) (set! G3eb0@gen-ref (lambda (G3f09@src G3f0a@var G3f0b@level G3f0c@maps) (if (= G3f0b@level '0) (values G3f0a@var G3f0c@maps) (if (null? G3f0c@maps) (G317d@syntax-violation '#f '"missing ellipsis in syntax form" G3f09@src) (call-with-values (lambda () (G3eb0@gen-ref G3f09@src G3f0a@var (- G3f0b@level '1) (cdr G3f0c@maps))) (lambda (G3f13@G3f11 G3f14@G3f12) ((lambda (G3f17@outer-maps G3f18@outer-var) ((lambda (G3f1b@t) (if G3f1b@t ((lambda (G3f1d@b) (values (cdr G3f1d@b) G3f0c@maps)) G3f1b@t) ((lambda (G3f1f@inner-var) (values G3f1f@inner-var (cons (cons (cons G3f18@outer-var G3f1f@inner-var) (car G3f0c@maps)) G3f17@outer-maps))) (G2dbf@gen-lexical 'tmp)))) (assq G3f18@outer-var (car G3f0c@maps)))) G3f14@G3f12 G3f13@G3f11))))))) (set! G3eb2@gen-append (lambda (G3f05@x G3f06@y) (if (equal? G3f06@y ''()) G3f05@x (list 'append G3f05@x G3f06@y)))) (set! G3eb4@gen-mappend (lambda (G3f01@e G3f02@map-env) (list 'apply '(primitive append) (G3eb6@gen-map G3f01@e G3f02@map-env)))) (set! G3eb6@gen-map (lambda (G3eef@e G3ef0@map-env) ((lambda (G3ef3@formals G3ef4@actuals) (if (eq? (car G3eef@e) 'ref) (car G3ef4@actuals) (if (for-all (lambda (G3ef7@x) (if (eq? (car G3ef7@x) 'ref) (begin '#f (memq (cadr G3ef7@x) G3ef3@formals)) '#f)) (cdr G3eef@e)) ((lambda (G3ef9@args) (cons 'map (cons (list 'primitive (car G3eef@e)) G3ef9@args))) (map ((lambda (G3efb@r) (lambda (G3efd@x) (cdr (assq (cadr G3efd@x) G3efb@r)))) (map cons G3ef3@formals G3ef4@actuals)) (cdr G3eef@e))) (cons* 'map (list 'lambda G3ef3@formals G3eef@e) G3ef4@actuals)))) (map cdr G3ef0@map-env) (map (lambda (G3eff@x) (list 'ref (car G3eff@x))) G3ef0@map-env)))) (set! G3eb8@gen-cons (lambda (G3edf@e G3ee0@x G3ee1@y G3ee2@xnew G3ee3@ynew) ((lambda (G3ee9@t) (if (memv G3ee9@t '(quote)) (if (eq? (car G3ee2@xnew) 'quote) ((lambda (G3eeb@xnew G3eec@ynew) (if (if (eq? G3eeb@xnew G3ee0@x) (begin '#f (eq? G3eec@ynew G3ee1@y)) '#f) (list 'quote G3edf@e) (list 'quote (cons G3eeb@xnew G3eec@ynew)))) (cadr G3ee2@xnew) (cadr G3ee3@ynew)) (if (null? (cadr G3ee3@ynew)) (list 'list G3ee2@xnew) (list 'cons G3ee2@xnew G3ee3@ynew))) (if (memv G3ee9@t '(list)) (cons 'list (cons G3ee2@xnew (cdr G3ee3@ynew))) (list 'cons G3ee2@xnew G3ee3@ynew)))) (car G3ee3@ynew)))) (set! G3eba@gen-vector (lambda (G3ed9@e G3eda@ls G3edb@lsnew) (if (eq? (car G3edb@lsnew) 'quote) (if (eq? (cadr G3edb@lsnew) G3eda@ls) (list 'quote G3ed9@e) (list 'quote (list->vector (cadr G3edb@lsnew)))) (if (eq? (car G3edb@lsnew) 'list) (cons 'vector (cdr G3edb@lsnew)) (list 'list->vector G3edb@lsnew))))) (set! G3ebc@regen (lambda (G3ed3@x) ((lambda (G3ed5@t) (if (memv G3ed5@t '(ref)) (cadr G3ed3@x) (if (memv G3ed5@t '(primitive)) (list 'primitive (cadr G3ed3@x)) (if (memv G3ed5@t '(quote)) (list 'quote (cadr G3ed3@x)) (if (memv G3ed5@t '(lambda)) (G2d9f@G2cc7@build-lambda '#f (cadr G3ed3@x) (G3ebc@regen (caddr G3ed3@x))) (if (memv G3ed5@t '(map)) ((lambda (G3ed7@ls) (cons '(primitive ellipsis-map) G3ed7@ls)) (map G3ebc@regen (cdr G3ed3@x))) (cons (list 'primitive (car G3ed3@x)) (map G3ebc@regen (cdr G3ed3@x))))))))) (car G3ed3@x)))) (lambda (G3ebd@e G3ebe@r G3ebf@mr) ((lambda (G3ec3@t) ((lambda (G3ec5@ls/false) (if G3ec5@ls/false (apply (lambda (G3ec7@x) (call-with-values (lambda () (G3eae@gen-syntax G3ebd@e G3ec7@x G3ebe@r '() G308c@ellipsis? '#f)) (lambda (G3ecb@G3ec9 G3ecc@G3eca) ((lambda (G3ecf@maps G3ed0@e) (G3ebc@regen G3ed0@e)) G3ecc@G3eca G3ecb@G3ec9)))) G3ec5@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3ec3@t))) (G308a@syntax-dispatch G3ec3@t '(_ any)))) G3ebd@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3098@core-macro-transformer (lambda (G3fe1@name) ((lambda (G3fe3@t) (if (memv G3fe3@t '(quote)) G303a@quote-transformer (if (memv G3fe3@t '(lambda)) G303e@lambda-transformer (if (memv G3fe3@t '(case-lambda)) G303c@case-lambda-transformer (if (memv G3fe3@t '(letrec)) G3026@letrec-transformer (if (memv G3fe3@t '(letrec*)) G3028@letrec*-transformer (if (memv G3fe3@t '(if)) G3036@if-transformer (if (memv G3fe3@t '(foreign-call)) G3086@foreign-call-transformer (if (memv G3fe3@t '(syntax-case)) G3092@syntax-case-transformer (if (memv G3fe3@t '(syntax)) G3096@syntax-transformer (if (memv G3fe3@t '(type-descriptor)) G302c@type-descriptor-transformer (if (memv G3fe3@t '(record-type-descriptor)) G302e@record-type-descriptor-transformer (if (memv G3fe3@t '(record-constructor-descriptor)) G3030@record-constructor-descriptor-transformer (if (memv G3fe3@t '(fluid-let-syntax)) G302a@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3fe1@name))))))))))))))) G3fe1@name))) (set! G309a@file-options-macro (lambda (G3fe5@x) ((lambda (G3fe8@valid-option?) (begin (set! G3fe8@valid-option? (lambda (G3ff1@x) (if (G2e47@id? G3ff1@x) (begin '#f (memq (G2e49@id->sym G3ff1@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3fe9@t) ((lambda (G3feb@ls/false) (if (if G3feb@ls/false (begin '#f (apply (lambda (G3fed@opt*) (if (for-all G3fe8@valid-option? G3fed@opt*) (begin '#f (G299a@G293e@file-options-spec (map G2e49@id->sym G3fed@opt*))) '#f)) G3feb@ls/false)) '#f) (apply (lambda (G3fef@opt*) (G3040@bless (list 'quote (G299a@G293e@file-options-spec (map G2e49@id->sym G3fef@opt*))))) G3feb@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3fe9@t))) (G308a@syntax-dispatch G3fe9@t '(_ . each-any)))) G3fe5@x))) '#f))) (set! G309c@symbol-macro (lambda (G3ff3@x G3ff4@set) ((lambda (G3ff7@t) ((lambda (G3ff9@ls/false) (if (if G3ff9@ls/false (begin '#f (apply (lambda (G3ffb@name) (if (G2e47@id? G3ffb@name) (begin '#f (memq (G2e49@id->sym G3ffb@name) G3ff4@set)) '#f)) G3ff9@ls/false)) '#f) (apply (lambda (G3ffd@name) (G3040@bless (list 'quote G3ffd@name))) G3ff9@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G3ff7@t))) (G308a@syntax-dispatch G3ff7@t '(_ any)))) G3ff3@x))) (set! G309e@macro-transformer (lambda (G3fff@x) (if (procedure? G3fff@x) G3fff@x (if (symbol? G3fff@x) ((lambda (G4001@t) (if (memv G4001@t '(define-record-type)) G307e@define-record-type-macro (if (memv G4001@t '(define-struct)) G307c@define-struct-macro (if (memv G4001@t '(include)) G3072@include-macro (if (memv G4001@t '(cond)) G306e@cond-macro (if (memv G4001@t '(let)) G3046@let-macro (if (memv G4001@t '(do)) G3066@do-macro (if (memv G4001@t '(or)) G306a@or-macro (if (memv G4001@t '(and)) G306c@and-macro (if (memv G4001@t '(let*)) G3068@let*-macro (if (memv G4001@t '(let-values)) G3048@let-values-macro (if (memv G4001@t '(let*-values)) G304a@let*-values-macro (if (memv G4001@t '(syntax-rules)) G3076@syntax-rules-macro (if (memv G4001@t '(quasiquote)) G3078@quasiquote-macro (if (memv G4001@t '(quasisyntax)) G307a@quasisyntax-macro (if (memv G4001@t '(with-syntax)) G3042@with-syntax-macro (if (memv G4001@t '(when)) G3032@when-macro (if (memv G4001@t '(unless)) G3034@unless-macro (if (memv G4001@t '(case)) G3038@case-macro (if (memv G4001@t '(identifier-syntax)) G3064@identifier-syntax-macro (if (memv G4001@t '(time)) G305c@time-macro (if (memv G4001@t '(delay)) G305e@delay-macro (if (memv G4001@t '(assert)) G3060@assert-macro (if (memv G4001@t '(endianness)) G3062@endianness-macro (if (memv G4001@t '(guard)) G3058@guard-macro (if (memv G4001@t '(define-enumeration)) G305a@define-enumeration-macro (if (memv G4001@t '(trace-lambda)) G304c@trace-lambda-macro (if (memv G4001@t '(trace-define)) G304e@trace-define-macro (if (memv G4001@t '(trace-define-syntax)) G3050@trace-define-syntax-macro (if (memv G4001@t '(trace-let-syntax)) G3054@trace-let-syntax-macro (if (memv G4001@t '(trace-letrec-syntax)) G3056@trace-letrec-syntax-macro (if (memv G4001@t '(define-condition-type)) G3080@define-condition-type-macro (if (memv G4001@t '(parameterize)) G3084@parameterize-macro (if (memv G4001@t '(include-into)) G3074@include-into-macro (if (memv G4001@t '(eol-style)) (lambda (G4003@x) (G309c@symbol-macro G4003@x '(none lf cr crlf nel crnel ls))) (if (memv G4001@t '(error-handling-mode)) (lambda (G4005@x) (G309c@symbol-macro G4005@x '(ignore raise replace))) (if (memv G4001@t '(buffer-mode)) (lambda (G4007@x) (G309c@symbol-macro G4007@x '(none line block))) (if (memv G4001@t '(file-options)) G309a@file-options-macro (if (memv G4001@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3082@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3fff@x)))))))))))))))))))))))))))))))))))))))) G3fff@x) (error 'core-macro-transformer '"BUG: invalid macro" G3fff@x))))) (set! G30a0@local-macro-transformer (lambda (G4009@x) (car G4009@x))) (set! G30a2@do-macro-call (lambda (G400b@transformer G400c@expr) ((lambda (G400f@out) (begin ((letrec ((G4011@f (lambda (G4013@x) (if (not (G2e0f@stx? G4013@x)) (if (pair? G4013@x) (begin (G4011@f (car G4013@x)) (G4011@f (cdr G4013@x))) (if (vector? G4013@x) (vector-for-each G4011@f G4013@x) (if (symbol? G4013@x) (G317d@syntax-violation '#f '"raw symbol encountered in output of macro" G400c@expr G4013@x) (void)))) (void))))) G4011@f) G400f@out) (G2e31@add-mark (G2e27@gen-mark) G400f@out G400c@expr))) (G400b@transformer (G2e31@add-mark G2e29@anti-mark G400c@expr '#f))))) (set! G30a4@chi-macro (lambda (G4015@p G4016@e) (G30a2@do-macro-call (G309e@macro-transformer G4015@p) G4016@e))) (set! G30a6@chi-local-macro (lambda (G4019@p G401a@e) (G30a2@do-macro-call (G30a0@local-macro-transformer G4019@p) G401a@e))) (set! G30a8@chi-global-macro (lambda (G401d@p G401e@e) ((lambda (G4021@lib G4022@loc) (begin (G2c3d@G2ad3@visit-library G4021@lib) ((lambda (G4025@x) ((lambda (G4027@transformer) (G30a2@do-macro-call G4027@transformer G401e@e)) (if (procedure? G4025@x) G4025@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G4025@x)))) (symbol-value G4022@loc)))) (car G401d@p) (cdr G401d@p)))) (set! G30aa@chi-expr* (lambda (G4029@e* G402a@r G402b@mr) (if (null? G4029@e*) '() ((lambda (G402f@e) (cons G402f@e (G30aa@chi-expr* (cdr G4029@e*) G402a@r G402b@mr))) (G30ae@chi-expr (car G4029@e*) G402a@r G402b@mr))))) (set! G30ac@chi-application (lambda (G4031@e G4032@r G4033@mr) ((lambda (G4037@t) ((lambda (G4039@ls/false) (if G4039@ls/false (apply (lambda (G403b@rator G403c@rands) ((lambda (G403f@rator) (cons G403f@rator (G30aa@chi-expr* G403c@rands G4032@r G4033@mr))) (G30ae@chi-expr G403b@rator G4032@r G4033@mr))) G4039@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4037@t))) (G308a@syntax-dispatch G4037@t '(any . each-any)))) G4031@e))) (set! G30ae@chi-expr (lambda (G4041@e G4042@r G4043@mr) (call-with-values (lambda () (G2e6f@syntax-type G4041@e G4042@r)) (lambda (G404a@G4047 G404b@G4048 G404c@G4049) ((lambda (G4050@kwd G4051@value G4052@type) ((lambda (G4056@t) (if (memv G4056@t '(core-macro)) ((lambda (G4058@transformer) (G4058@transformer G4041@e G4042@r G4043@mr)) (G3098@core-macro-transformer G4051@value)) (if (memv G4056@t '(global)) ((lambda (G405a@lib) ((lambda (G405c@loc) ((lambda () (begin ((G30f9@inv-collector) G405a@lib) G405c@loc)))) (cdr G4051@value))) (car G4051@value)) (if (memv G4056@t '(core-prim)) ((lambda (G405e@name) (list 'primitive G405e@name)) G4051@value) (if (memv G4056@t '(call)) (G30ac@chi-application G4041@e G4042@r G4043@mr) (if (memv G4056@t '(lexical)) ((lambda (G4060@lex) G4060@lex) (G301a@lexical-var G4051@value)) (if (memv G4056@t '(global-macro global-macro!)) (G30ae@chi-expr (G30a8@chi-global-macro G4051@value G4041@e) G4042@r G4043@mr) (if (memv G4056@t '(local-macro local-macro!)) (G30ae@chi-expr (G30a6@chi-local-macro G4051@value G4041@e) G4042@r G4043@mr) (if (memv G4056@t '(macro macro!)) (G30ae@chi-expr (G30a4@chi-macro G4051@value G4041@e) G4042@r G4043@mr) (if (memv G4056@t '(constant)) ((lambda (G4062@datum) (list 'quote G4062@datum)) G4051@value) (if (memv G4056@t '(set!)) (G30b0@chi-set! G4041@e G4042@r G4043@mr) (if (memv G4056@t '(begin)) ((lambda (G4064@t) ((lambda (G4066@ls/false) (if G4066@ls/false (apply (lambda (G4068@x G4069@x*) (G2da2@G2d13@build-sequence '#f (G30aa@chi-expr* (cons G4068@x G4069@x*) G4042@r G4043@mr))) G4066@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4064@t))) (G308a@syntax-dispatch G4064@t '(_ any . each-any)))) G4041@e) (if (memv G4056@t '(let-syntax letrec-syntax)) ((lambda (G406c@t) ((lambda (G406e@ls/false) (if (if G406e@ls/false (begin '#f (apply (lambda (G4070@xlhs* G4071@xrhs* G4072@xbody G4073@xbody*) (if (not (G2e51@valid-bound-ids? G4070@xlhs*)) (G317d@syntax-violation '#f '"invalid identifiers" G4041@e) (void))) G406e@ls/false)) '#f) (apply (lambda (G4078@xlhs* G4079@xrhs* G407a@xbody G407b@xbody*) ((lambda (G4080@xlab*) ((lambda (G4082@xrib) ((lambda (G4084@xb*) ((lambda () (G2da2@G2d13@build-sequence '#f (G30aa@chi-expr* (map (lambda (G4086@x) (G2e33@add-subst G4082@xrib G4086@x)) (cons G407a@xbody G407b@xbody*)) (append (map cons G4080@xlab* G4084@xb*) G4042@r) (append (map cons G4080@xlab* G4084@xb*) G4043@mr)))))) (map (lambda (G4088@x) (G2e8e@make-eval-transformer (G30eb@expand-transformer (if (eq? G4052@type 'let-syntax) G4088@x (G2e33@add-subst G4082@xrib G4088@x)) G4043@mr))) G4079@xrhs*))) (G2e00@make-full-rib G4078@xlhs* G4080@xlab*))) (map G2dc3@gen-label G4078@xlhs*))) G406e@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G406c@t))) (G308a@syntax-dispatch G406c@t '(_ #(each (any any)) any . each-any)))) G4041@e) (if (memv G4056@t '(displaced-lexical)) (G317d@syntax-violation '#f '"identifier out of context" G4041@e) (if (memv G4056@t '(syntax)) (G317d@syntax-violation '#f '"reference to pattern variable outside a syntax form" G4041@e) (if (memv G4056@t '(define define-syntax module import library)) (G317d@syntax-violation '#f (string-append ((lambda (G408a@t) (if (memv G408a@t '(define)) '"a definition" (if (memv G408a@t '(define-syntax)) '"a define-syntax" (if (memv G408a@t '(module)) '"a module definition" (if (memv G408a@t '(library)) '"a library definition" (if (memv G408a@t '(import)) '"an import declaration" (if (memv G408a@t '(export)) '"an export declaration" '"a non-expression"))))))) G4052@type) '" was found where an expression was expected") G4041@e) (if (memv G4056@t '(mutable)) (G317d@syntax-violation '#f '"attempt to reference an unexportable variable" G4041@e) (G317d@syntax-violation '#f '"invalid expression" G4041@e)))))))))))))))))) G4052@type)) G404c@G4049 G404b@G4048 G404a@G4047))))) (set! G30b0@chi-set! (lambda (G408c@e G408d@r G408e@mr) ((lambda (G4092@t) ((lambda (G4094@ls/false) (if (if G4094@ls/false (begin '#f (apply (lambda (G4096@x G4097@v) (G2e47@id? G4096@x)) G4094@ls/false)) '#f) (apply (lambda (G409a@x G409b@v) (call-with-values (lambda () (G2e6f@syntax-type G409a@x G408d@r)) (lambda (G40a1@G409e G40a2@G409f G40a3@G40a0) ((lambda (G40a7@kwd G40a8@value G40a9@type) ((lambda (G40ad@t) (if (memv G40ad@t '(lexical)) (begin (G301e@set-lexical-mutable! G40a8@value '#t) (list 'set! (G301a@lexical-var G40a8@value) (G30ae@chi-expr G409b@v G408d@r G408e@mr))) (if (memv G40ad@t '(core-prim)) (G317d@syntax-violation '#f '"cannot modify imported core primitive" G408c@e) (if (memv G40ad@t '(global)) (G317d@syntax-violation '#f '"attempt to modify imported binding" G408c@e) (if (memv G40ad@t '(global-macro!)) (G30ae@chi-expr (G30a8@chi-global-macro G40a8@value G408c@e) G408d@r G408e@mr) (if (memv G40ad@t '(local-macro!)) (G30ae@chi-expr (G30a6@chi-local-macro G40a8@value G408c@e) G408d@r G408e@mr) (if (memv G40ad@t '(mutable)) (G317d@syntax-violation '#f '"attempt to assign to an unexportable variable" G408c@e) (G317d@syntax-violation '#f '"invalid syntax" G408c@e)))))))) G40a9@type)) G40a3@G40a0 G40a2@G409f G40a1@G409e)))) G4094@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4092@t))) (G308a@syntax-dispatch G4092@t '(_ any any)))) G408c@e))) (set! G30b2@verify-formals (lambda (G40af@fmls G40b0@stx) ((lambda (G40b3@t) ((lambda (G40b5@ls/false) (if G40b5@ls/false (apply (lambda (G40b7@x*) (if (not (G2e51@valid-bound-ids? G40b7@x*)) (G3044@invalid-fmls-error G40b0@stx G40af@fmls) (void))) G40b5@ls/false) ((lambda (G40b9@t) ((lambda (G40bb@ls/false) (if G40bb@ls/false (apply (lambda (G40bd@x* G40be@x) (if (not (G2e51@valid-bound-ids? (cons G40be@x G40bd@x*))) (G3044@invalid-fmls-error G40b0@stx G40af@fmls) (void))) G40bb@ls/false) ((lambda (G40c1@t) ((lambda (G40c3@ls/false) (if G40c3@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid syntax" G40b0@stx)) G40c3@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G40c1@t))) (G308a@syntax-dispatch G40c1@t '_))) G40b9@t))) (G308a@syntax-dispatch G40b9@t '#(each+ any () any)))) G40b3@t))) (G308a@syntax-dispatch G40b3@t 'each-any))) G40af@fmls))) (set! G30b4@chi-lambda-clause (lambda (G40c5@stx G40c6@fmls G40c7@body* G40c8@r G40c9@mr) ((lambda (G40cf@t) ((lambda (G40d1@ls/false) (if G40d1@ls/false (apply (lambda (G40d3@x*) (begin (G30b2@verify-formals G40c6@fmls G40c5@stx) ((lambda (G40d5@lex* G40d6@lab*) (values G40d5@lex* (G30c4@chi-internal (G2e33@add-subst (G2e00@make-full-rib G40d3@x* G40d6@lab*) G40c7@body*) (G3022@add-lexicals G40d6@lab* G40d5@lex* G40c8@r) G40c9@mr))) (map G2dbf@gen-lexical G40d3@x*) (map G2dc3@gen-label G40d3@x*)))) G40d1@ls/false) ((lambda (G40d9@t) ((lambda (G40db@ls/false) (if G40db@ls/false (apply (lambda (G40dd@x* G40de@x) (begin (G30b2@verify-formals G40c6@fmls G40c5@stx) ((lambda (G40e1@lex* G40e2@lab* G40e3@lex G40e4@lab) (values (append G40e1@lex* G40e3@lex) (G30c4@chi-internal (G2e33@add-subst (G2e00@make-full-rib (cons G40de@x G40dd@x*) (cons G40e4@lab G40e2@lab*)) G40c7@body*) (G3022@add-lexicals (cons G40e4@lab G40e2@lab*) (cons G40e3@lex G40e1@lex*) G40c8@r) G40c9@mr))) (map G2dbf@gen-lexical G40dd@x*) (map G2dc3@gen-label G40dd@x*) (G2dbf@gen-lexical G40de@x) (G2dc3@gen-label G40de@x)))) G40db@ls/false) ((lambda (G40e9@t) ((lambda (G40eb@ls/false) (if G40eb@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid syntax" G40c6@fmls)) G40eb@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G40e9@t))) (G308a@syntax-dispatch G40e9@t '_))) G40d9@t))) (G308a@syntax-dispatch G40d9@t '#(each+ any () any)))) G40cf@t))) (G308a@syntax-dispatch G40cf@t 'each-any))) G40c6@fmls))) (set! G30b6@chi-lambda-clause* (lambda (G40ed@stx G40ee@fmls* G40ef@body** G40f0@r G40f1@mr) (if (null? G40ee@fmls*) (values '() '()) (call-with-values (lambda () (G30b4@chi-lambda-clause G40ed@stx (car G40ee@fmls*) (car G40ef@body**) G40f0@r G40f1@mr)) (lambda (G40f9@G40f7 G40fa@G40f8) ((lambda (G40fd@b G40fe@a) (call-with-values (lambda () (G30b6@chi-lambda-clause* G40ed@stx (cdr G40ee@fmls*) (cdr G40ef@body**) G40f0@r G40f1@mr)) (lambda (G4103@G4101 G4104@G4102) ((lambda (G4107@b* G4108@a*) (values (cons G40fe@a G4108@a*) (cons G40fd@b G4107@b*))) G4104@G4102 G4103@G4101)))) G40fa@G40f8 G40f9@G40f7)))))) (set! G30b8@chi-defun (lambda (G410b@x G410c@r G410d@mr) ((lambda (G4111@fmls G4112@body*) (call-with-values (lambda () (G30b4@chi-lambda-clause G4111@fmls G4111@fmls G4112@body* G410c@r G410d@mr)) (lambda (G4117@G4115 G4118@G4116) ((lambda (G411b@body G411c@fmls) (G2d9f@G2cc7@build-lambda '#f G411c@fmls G411b@body)) G4118@G4116 G4117@G4115)))) (car G410b@x) (cdr G410b@x)))) (set! G30ba@chi-rhs (lambda (G411f@rhs G4120@r G4121@mr) ((lambda (G4125@t) (if (memv G4125@t '(defun)) (G30b8@chi-defun (cdr G411f@rhs) G4120@r G4121@mr) (if (memv G4125@t '(expr)) ((lambda (G4127@expr) (G30ae@chi-expr G4127@expr G4120@r G4121@mr)) (cdr G411f@rhs)) (if (memv G4125@t '(top-expr)) ((lambda (G4129@expr) (G2da2@G2d13@build-sequence '#f (list (G30ae@chi-expr G4129@expr G4120@r G4121@mr) (G2da3@G2d15@build-void)))) (cdr G411f@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G411f@rhs))))) (car G411f@rhs)))) (set! G30bc@expand-interaction-rhs*/init* (lambda (G412b@lhs* G412c@rhs* G412d@init* G412e@r G412f@mr) ((letrec ((G4135@f (lambda (G4137@lhs* G4138@rhs*) (if (null? G4137@lhs*) (map (lambda (G413b@x) (G30ae@chi-expr G413b@x G412e@r G412f@mr)) G412d@init*) ((lambda (G413d@lhs G413e@rhs) ((lambda (G4141@t) (if (memv G4141@t '(defun)) ((lambda (G4143@rhs) (cons (list 'set! G413d@lhs G4143@rhs) (G4135@f (cdr G4137@lhs*) (cdr G4138@rhs*)))) (G30b8@chi-defun (cdr G413e@rhs) G412e@r G412f@mr)) (if (memv G4141@t '(expr)) ((lambda (G4145@rhs) (cons (list 'set! G413d@lhs G4145@rhs) (G4135@f (cdr G4137@lhs*) (cdr G4138@rhs*)))) (G30ae@chi-expr (cdr G413e@rhs) G412e@r G412f@mr)) (if (memv G4141@t '(top-expr)) ((lambda (G4147@e) (cons G4147@e (G4135@f (cdr G4137@lhs*) (cdr G4138@rhs*)))) (G30ae@chi-expr (cdr G413e@rhs) G412e@r G412f@mr)) (error 'expand-interaction '"invallid" G413e@rhs))))) (car G413e@rhs))) (car G4137@lhs*) (car G4138@rhs*)))))) G4135@f) G412b@lhs* G412c@rhs*))) (set! G30be@chi-rhs* (lambda (G4149@rhs* G414a@r G414b@mr) ((letrec ((G414f@f (lambda (G4151@ls) (if (null? G4151@ls) '() ((lambda (G4153@a) (cons G4153@a (G414f@f (cdr G4151@ls)))) (G30ba@chi-rhs (car G4151@ls) G414a@r G414b@mr)))))) G414f@f) G4149@rhs*))) (set! G30c0@find-bound=? (lambda (G4155@x G4156@lhs* G4157@rhs*) (if (null? G4156@lhs*) '#f (if (G2e4d@bound-id=? G4155@x (car G4156@lhs*)) (car G4157@rhs*) (G30c0@find-bound=? G4155@x (cdr G4156@lhs*) (cdr G4157@rhs*)))))) (set! G30c2@find-dups (lambda (G415b@ls) ((letrec ((G415d@f (lambda (G415f@ls G4160@dups) (if (null? G415f@ls) G4160@dups ((lambda (G4163@t) (if G4163@t ((lambda (G4165@x) (G415d@f (cdr G415f@ls) (cons (list (car G415f@ls) G4165@x) G4160@dups))) G4163@t) (G415d@f (cdr G415f@ls) G4160@dups))) (G30c0@find-bound=? (car G415f@ls) (cdr G415f@ls) (cdr G415f@ls))))))) G415d@f) G415b@ls '()))) (set! G30c4@chi-internal (lambda (G4167@e* G4168@r G4169@mr) ((lambda (G416d@rib) (call-with-values (lambda () (G30e9@chi-body* (map (lambda (G4177@x) (G2e33@add-subst G416d@rib G4177@x)) (G2e45@syntax->list G4167@e*)) G4168@r G4169@mr '() '() '() '() '() G416d@rib '#f)) (lambda (G4179@G416f G417a@G4170 G417b@G4171 G417c@G4172 G417d@G4173 G417e@G4174 G417f@G4175 G4180@G4176) ((lambda (G4189@_exp* G418a@kwd* G418b@mod** G418c@rhs* G418d@lex* G418e@mr G418f@r G4190@e*) (begin (if (null? G4190@e*) (G317d@syntax-violation '#f '"no expression in body" G4190@e*) (void)) ((lambda (G4199@init*) ((lambda (G419b@rhs*) ((lambda () (G2da5@G2d19@build-letrec* '#f (reverse G418d@lex*) (reverse G419b@rhs*) (G2da2@G2d13@build-sequence '#f G4199@init*))))) (G30be@chi-rhs* G418c@rhs* G418f@r G418e@mr))) (G30aa@chi-expr* (append (apply append (reverse G418b@mod**)) G4190@e*) G418f@r G418e@mr)))) G4180@G4176 G417f@G4175 G417e@G4174 G417d@G4173 G417c@G4172 G417b@G4171 G417a@G4170 G4179@G416f)))) (G2df0@make-empty-rib)))) (set! G30c6@parse-module (lambda (G419d@e) ((lambda (G419f@t) ((lambda (G41a1@ls/false) (if G41a1@ls/false (apply (lambda (G41a3@export* G41a4@b*) (begin (if (not (for-all G2e47@id? G41a3@export*)) (G317d@syntax-violation '#f '"module exports must be identifiers" G419d@e) (void)) (values '#f (list->vector G41a3@export*) G41a4@b*))) G41a1@ls/false) ((lambda (G41a7@t) ((lambda (G41a9@ls/false) (if G41a9@ls/false (apply (lambda (G41ab@name G41ac@export* G41ad@b*) (begin (if (not (G2e47@id? G41ab@name)) (G317d@syntax-violation '#f '"module name must be an identifier" G419d@e) (void)) (if (not (for-all G2e47@id? G41ac@export*)) (G317d@syntax-violation '#f '"module exports must be identifiers" G419d@e) (void)) (values G41ab@name (list->vector G41ac@export*) G41ad@b*))) G41a9@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G41a7@t))) (G308a@syntax-dispatch G41a7@t '(_ any each-any . each-any)))) G419f@t))) (G308a@syntax-dispatch G419f@t '(_ each-any . each-any)))) G419d@e))) (set! G30cc@G30c7 (make-record-type-descriptor 'module-interface '#f 'G30ca '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G30ce@G30c9 '#f) (set! G30d0@G30c8 (make-record-constructor-descriptor G30cc@G30c7 '#f G30ce@G30c9)) (set! G30d5@module-interface? (record-predicate G30cc@G30c7)) (set! G30d7@make-module-interface (record-constructor G30d0@G30c8)) (set! G30d9@module-interface-first-mark (record-accessor G30cc@G30c7 '0)) (set! G30db@module-interface-exp-id-vec (record-accessor G30cc@G30c7 '1)) (set! G30dd@module-interface-exp-lab-vec (record-accessor G30cc@G30c7 '2)) (set! G30df@set-module-interface-first-mark! (record-mutator G30cc@G30c7 '0)) (set! G30e1@set-module-interface-exp-id-vec! (record-mutator G30cc@G30c7 '1)) (set! G30e3@set-module-interface-exp-lab-vec! (record-mutator G30cc@G30c7 '2)) (set! G30e5@module-interface-exp-id* (lambda (G41b1@iface G41b2@id) ((lambda (G41b6@diff-marks) (begin (set! G41b6@diff-marks (lambda (G41bd@ls G41be@x) (begin (if (null? G41bd@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G41c1@a) (if (eq? G41c1@a G41be@x) '() (cons G41c1@a (G41b6@diff-marks (cdr G41bd@ls) G41be@x)))) (car G41bd@ls))))) ((lambda (G41b7@diff G41b8@id-vec) (if (null? G41b7@diff) G41b8@id-vec (vector-map (lambda (G41bb@x) (G2e11@make-stx (G2e13@stx-expr G41bb@x) (append G41b7@diff (G2e15@stx-mark* G41bb@x)) '() '())) G41b8@id-vec))) (G41b6@diff-marks (G2e15@stx-mark* G41b2@id) (G30d9@module-interface-first-mark G41b1@iface)) (G30db@module-interface-exp-id-vec G41b1@iface)))) '#f))) (set! G30e7@chi-internal-module (lambda (G41c3@e G41c4@r G41c5@mr G41c6@lex* G41c7@rhs* G41c8@mod** G41c9@kwd*) (call-with-values (lambda () (G30c6@parse-module G41c3@e)) (lambda (G41d4@G41d1 G41d5@G41d2 G41d6@G41d3) ((lambda (G41da@e* G41db@exp-id* G41dc@name) ((lambda (G41e0@rib) ((lambda (G41e2@e*) ((lambda () (call-with-values (lambda () (G30e9@chi-body* G41e2@e* G41c4@r G41c5@mr G41c6@lex* G41c7@rhs* G41c8@mod** G41c9@kwd* '() G41e0@rib '#f)) (lambda (G41ec@G41e4 G41ed@G41e5 G41ee@G41e6 G41ef@G41e7 G41f0@G41e8 G41f1@G41e9 G41f2@G41ea G41f3@G41eb) ((lambda (G41fc@_exp* G41fd@kwd* G41fe@mod** G41ff@rhs* G4200@lex* G4201@mr G4202@r G4203@e*) ((lambda (G420c@exp-lab* G420d@mod**) (if (not G41dc@name) (values G4200@lex* G41ff@rhs* G41db@exp-id* G420c@exp-lab* G4202@r G4201@mr G420d@mod** G41fd@kwd*) ((lambda (G4210@lab G4211@iface) (values G4200@lex* G41ff@rhs* (vector G41dc@name) (vector G4210@lab) (cons (cons G4210@lab (cons '$module G4211@iface)) G4202@r) (cons (cons G4210@lab (cons '$module G4211@iface)) G4201@mr) G420d@mod** G41fd@kwd*)) (G2dc3@gen-label 'module) (G30d7@make-module-interface (car (G2e15@stx-mark* G41dc@name)) (vector-map (lambda (G4214@x) (G2e11@make-stx (G2e13@stx-expr G4214@x) (G2e15@stx-mark* G4214@x) '() '())) G41db@exp-id*) G420c@exp-lab*)))) (vector-map (lambda (G4216@x) ((lambda (G4218@t) (if G4218@t G4218@t (begin '#f (G317d@syntax-violation '#f '"cannot find module export" G4216@x)))) (G2e61@id->label (G2e11@make-stx (G2e49@id->sym G4216@x) (G2e15@stx-mark* G4216@x) (list G41e0@rib) '())))) G41db@exp-id*) (cons G4203@e* G41fe@mod**))) G41f3@G41eb G41f2@G41ea G41f1@G41e9 G41f0@G41e8 G41ef@G41e7 G41ee@G41e6 G41ed@G41e5 G41ec@G41e4)))))) (map (lambda (G421a@x) (G2e33@add-subst G41e0@rib G421a@x)) (G2e45@syntax->list G41da@e*)))) (G2df0@make-empty-rib))) G41d6@G41d3 G41d5@G41d2 G41d4@G41d1))))) (set! G30e9@chi-body* (lambda (G421c@e* G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4222@kwd* G4223@exp* G4224@rib G4225@top?) (if (null? G421c@e*) (values G421c@e* G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4222@kwd* G4223@exp*) ((lambda (G4230@e) (call-with-values (lambda () (G2e6f@syntax-type G4230@e G421d@r)) (lambda (G4235@G4232 G4236@G4233 G4237@G4234) ((lambda (G423b@kwd G423c@value G423d@type) ((lambda (G4241@kwd*) ((lambda (G4243@t) (if (memv G4243@t '(define)) (call-with-values (lambda () (G3012@parse-define G4230@e)) (lambda (G4247@G4245 G4248@G4246) ((lambda (G424b@rhs G424c@id) (begin (if (G2e55@bound-id-member? G424c@id G4241@kwd*) (G317d@syntax-violation '#f '"cannot redefine keyword" G4230@e) (void)) (call-with-values (lambda () (G2dc7@gen-define-label+loc G424c@id G4224@rib)) (lambda (G4251@G424f G4252@G4250) ((lambda (G4255@lex G4256@lab) (begin (G2df6@extend-rib! G4224@rib G424c@id G4256@lab) (G30e9@chi-body* (cdr G421c@e*) (G3020@add-lexical G4256@lab G4255@lex G421d@r) G421e@mr (cons G4255@lex G421f@lex*) (cons G424b@rhs G4220@rhs*) G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?))) G4252@G4250 G4251@G424f))))) G4248@G4246 G4247@G4245))) (if (memv G4243@t '(define-syntax)) (call-with-values (lambda () (G3014@parse-define-syntax G4230@e)) (lambda (G425b@G4259 G425c@G425a) ((lambda (G425f@rhs G4260@id) (begin (if (G2e55@bound-id-member? G4260@id G4241@kwd*) (G317d@syntax-violation '#f '"cannot redefine keyword" G4230@e) (void)) ((lambda (G4263@lab G4264@expanded-rhs) (begin (G2df6@extend-rib! G4224@rib G4260@id G4263@lab) ((lambda (G4267@b) (G30e9@chi-body* (cdr G421c@e*) (cons (cons G4263@lab G4267@b) G421d@r) (cons (cons G4263@lab G4267@b) G421e@mr) G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?)) (G2e8e@make-eval-transformer G4264@expanded-rhs)))) (G2dc9@gen-define-label G4260@id G4224@rib) (G30eb@expand-transformer G425f@rhs G421e@mr)))) G425c@G425a G425b@G4259))) (if (memv G4243@t '(let-syntax letrec-syntax)) ((lambda (G4269@t) ((lambda (G426b@ls/false) (if (if G426b@ls/false (begin '#f (apply (lambda (G426d@xlhs* G426e@xrhs* G426f@xbody*) (if (not (G2e51@valid-bound-ids? G426d@xlhs*)) (G317d@syntax-violation '#f '"invalid identifiers" G4230@e) (void))) G426b@ls/false)) '#f) (apply (lambda (G4273@xlhs* G4274@xrhs* G4275@xbody*) ((lambda (G4279@xlab*) ((lambda (G427b@xrib) ((lambda (G427d@xb*) ((lambda () (G30e9@chi-body* (append (map (lambda (G427f@x) (G2e33@add-subst G427b@xrib G427f@x)) G4275@xbody*) (cdr G421c@e*)) (append (map cons G4279@xlab* G427d@xb*) G421d@r) (append (map cons G4279@xlab* G427d@xb*) G421e@mr) G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?)))) (map (lambda (G4281@x) (G2e8e@make-eval-transformer (G30eb@expand-transformer (if (eq? G423d@type 'let-syntax) G4281@x (G2e33@add-subst G427b@xrib G4281@x)) G421e@mr))) G4274@xrhs*))) (G2e00@make-full-rib G4273@xlhs* G4279@xlab*))) (map G2dc3@gen-label G4273@xlhs*))) G426b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4269@t))) (G308a@syntax-dispatch G4269@t '(_ #(each (any any)) . each-any)))) G4230@e) (if (memv G4243@t '(begin)) ((lambda (G4283@t) ((lambda (G4285@ls/false) (if G4285@ls/false (apply (lambda (G4287@x*) (G30e9@chi-body* (append G4287@x* (cdr G421c@e*)) G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?)) G4285@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4283@t))) (G308a@syntax-dispatch G4283@t '(_ . each-any)))) G4230@e) (if (memv G4243@t '(global-macro global-macro!)) (G30e9@chi-body* (cons (G2e33@add-subst G4224@rib (G30a8@chi-global-macro G423c@value G4230@e)) (cdr G421c@e*)) G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?) (if (memv G4243@t '(local-macro local-macro!)) (G30e9@chi-body* (cons (G2e33@add-subst G4224@rib (G30a6@chi-local-macro G423c@value G4230@e)) (cdr G421c@e*)) G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?) (if (memv G4243@t '(macro macro!)) (G30e9@chi-body* (cons (G2e33@add-subst G4224@rib (G30a4@chi-macro G423c@value G4230@e)) (cdr G421c@e*)) G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?) (if (memv G4243@t '(module)) (call-with-values (lambda () (G30e7@chi-internal-module G4230@e G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4241@kwd*)) (lambda (G4291@G4289 G4292@G428a G4293@G428b G4294@G428c G4295@G428d G4296@G428e G4297@G428f G4298@G4290) ((lambda (G42a1@kwd* G42a2@mod** G42a3@mr G42a4@r G42a5@m-exp-lab* G42a6@m-exp-id* G42a7@rhs* G42a8@lex*) (begin (vector-for-each (lambda (G42b1@id G42b2@lab) (G2df6@extend-rib! G4224@rib G42b1@id G42b2@lab)) G42a6@m-exp-id* G42a5@m-exp-lab*) (G30e9@chi-body* (cdr G421c@e*) G42a4@r G42a3@mr G42a8@lex* G42a7@rhs* G42a2@mod** G42a1@kwd* G4223@exp* G4224@rib G4225@top?))) G4298@G4290 G4297@G428f G4296@G428e G4295@G428d G4294@G428c G4293@G428b G4292@G428a G4291@G4289))) (if (memv G4243@t '(library)) (begin (G315d@library-expander (G2e5d@stx->datum G4230@e)) (G30e9@chi-body* (cdr G421c@e*) G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?)) (if (memv G4243@t '(export)) ((lambda (G42b5@t) ((lambda (G42b7@ls/false) (if G42b7@ls/false (apply (lambda (G42b9@exp-decl*) (G30e9@chi-body* (cdr G421c@e*) G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* (append G42b9@exp-decl* G4223@exp*) G4224@rib G4225@top?)) G42b7@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G42b5@t))) (G308a@syntax-dispatch G42b5@t '(_ . each-any)))) G4230@e) (if (memv G4243@t '(import)) ((lambda () ((lambda (G42bc@module-import? G42be@module-import G42c0@library-import) (begin (set! G42bc@module-import? (lambda (G4308@e) ((lambda (G430a@t) ((lambda (G430c@ls/false) (if (if G430c@ls/false (begin '#f (apply (lambda (G430e@id) (G2e47@id? G430e@id)) G430c@ls/false)) '#f) (apply (lambda (G4310@id) '#t) G430c@ls/false) ((lambda (G4312@t) ((lambda (G4314@ls/false) (if G4314@ls/false (apply (lambda (G4316@imp*) '#f) G4314@ls/false) ((lambda (G4318@t) ((lambda (G431a@ls/false) (if G431a@ls/false (apply (lambda () (G317d@syntax-violation '#f '"malformed import form" G4308@e)) G431a@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4318@t))) (G308a@syntax-dispatch G4318@t '_))) G4312@t))) (G308a@syntax-dispatch G4312@t '(_ . each-any)))) G430a@t))) (G308a@syntax-dispatch G430a@t '(_ any)))) G4308@e))) (set! G42be@module-import (lambda (G42e9@e G42ea@r) ((lambda (G42ed@t) ((lambda (G42ef@ls/false) (if (if G42ef@ls/false (begin '#f (apply (lambda (G42f1@id) (G2e47@id? G42f1@id)) G42ef@ls/false)) '#f) (apply (lambda (G42f3@id) (call-with-values (lambda () (G2e6f@syntax-type G42f3@id G42ea@r)) (lambda (G42f8@G42f5 G42f9@G42f6 G42fa@G42f7) ((lambda (G42fe@kwd G42ff@value G4300@type) ((lambda (G4304@t) (if (memv G4304@t '($module)) ((lambda (G4306@iface) (values (G30e5@module-interface-exp-id* G4306@iface G42f3@id) (G30dd@module-interface-exp-lab-vec G4306@iface))) G42ff@value) (G317d@syntax-violation '#f '"invalid import" G42e9@e))) G4300@type)) G42fa@G42f7 G42f9@G42f6 G42f8@G42f5)))) G42ef@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G42ed@t))) (G308a@syntax-dispatch G42ed@t '(_ any)))) G42e9@e))) (set! G42c0@library-import (lambda (G42cf@e) ((lambda (G42d1@t) ((lambda (G42d3@ls/false) (if G42d3@ls/false (apply (lambda (G42d5@ctxt G42d6@imp*) (call-with-values (lambda () (G30f3@parse-import-spec* (G3183@syntax->datum G42d6@imp*))) (lambda (G42db@G42d9 G42dc@G42da) ((lambda (G42df@subst-labels G42e0@subst-names) (values (vector-map (lambda (G42e3@name) (G2e25@datum->stx G42d5@ctxt G42e3@name)) G42e0@subst-names) G42df@subst-labels)) G42dc@G42da G42db@G42d9)))) G42d3@ls/false) ((lambda (G42e5@t) ((lambda (G42e7@ls/false) (if G42e7@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid import form" G42cf@e)) G42e7@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G42e5@t))) (G308a@syntax-dispatch G42e5@t '_))) G42d1@t))) (G308a@syntax-dispatch G42d1@t '(any . each-any)))) G42cf@e))) (begin (call-with-values (lambda () (if (G42bc@module-import? G4230@e) (G42be@module-import G4230@e G421d@r) (G42c0@library-import G4230@e))) (lambda (G42c3@G42c1 G42c4@G42c2) ((lambda (G42c7@lab* G42c8@id*) (vector-for-each (lambda (G42cb@id G42cc@lab) (G2df6@extend-rib! G4224@rib G42cb@id G42cc@lab)) G42c8@id* G42c7@lab*)) G42c4@G42c2 G42c3@G42c1))) (G30e9@chi-body* (cdr G421c@e*) G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?)))) '#f '#f '#f))) (if G4225@top? (G30e9@chi-body* (cdr G421c@e*) G421d@r G421e@mr (cons (G2dbf@gen-lexical 'dummy) G421f@lex*) (cons (cons 'top-expr G4230@e) G4220@rhs*) G4221@mod** G4241@kwd* G4223@exp* G4224@rib G4225@top?) (values G421c@e* G421d@r G421e@mr G421f@lex* G4220@rhs* G4221@mod** G4241@kwd* G4223@exp*)))))))))))))) G423d@type)) (if (G2e47@id? G423b@kwd) (cons G423b@kwd G4222@kwd*) G4222@kwd*))) G4237@G4234 G4236@G4233 G4235@G4232)))) (car G421c@e*))))) (set! G30eb@expand-transformer (lambda (G431c@expr G431d@r) ((lambda (G4320@rtc) ((lambda (G4322@expanded-rhs) (begin (for-each ((lambda (G4324@mark-visit) (lambda (G4326@x) (begin (G2c3c@G2ad1@invoke-library G4326@x) (G4324@mark-visit G4326@x)))) (G30fb@vis-collector)) (G4320@rtc)) G4322@expanded-rhs)) ((lambda (G432c@G4328@inv-collector G432d@G4329@vis-collector G432e@G432a@inv-collector G432f@G432b@vis-collector) ((lambda (G4334@swap) (dynamic-wind G4334@swap (lambda () (G30ae@chi-expr G431c@expr G431d@r G431d@r)) G4334@swap)) (lambda () (begin ((lambda (G4336@t) (begin (G432c@G4328@inv-collector G432e@G432a@inv-collector) (set! G432e@G432a@inv-collector G4336@t))) (G432c@G4328@inv-collector)) ((lambda (G4338@t) (begin (G432d@G4329@vis-collector G432f@G432b@vis-collector) (set! G432f@G432b@vis-collector G4338@t))) (G432d@G4329@vis-collector)))))) G30f9@inv-collector G30fb@vis-collector G4320@rtc (lambda (G433a@x) (values))))) (G30f7@make-collector)))) (set! G30ed@parse-exports (lambda (G433c@exp*) ((letrec ((G433e@f (lambda (G4340@exp* G4341@int* G4342@ext*) (if (null? G4340@exp*) (begin (if (not (G2e51@valid-bound-ids? G4342@ext*)) (G317d@syntax-violation 'export '"invalid exports" (G30c2@find-dups G4342@ext*)) (void)) (values (map G3183@syntax->datum G4342@ext*) G4341@int*)) ((lambda (G4346@t) ((lambda (G4348@ls/false) (if G4348@ls/false (apply (lambda (G434a@rename G434b@i* G434c@e*) (begin (if (not (if (eq? (G3183@syntax->datum G434a@rename) 'rename) (if (for-all G2e47@id? G434b@i*) (begin '#f (for-all G2e47@id? G434c@e*)) '#f) '#f)) (G317d@syntax-violation 'export '"invalid export specifier" (car G4340@exp*)) (void)) (G433e@f (cdr G4340@exp*) (append G434b@i* G4341@int*) (append G434c@e* G4342@ext*)))) G4348@ls/false) ((lambda (G4350@t) ((lambda (G4352@ls/false) (if G4352@ls/false (apply (lambda (G4354@ie) (begin (if (not (G2e47@id? G4354@ie)) (G317d@syntax-violation 'export '"invalid export" G4354@ie) (void)) (G433e@f (cdr G4340@exp*) (cons G4354@ie G4341@int*) (cons G4354@ie G4342@ext*)))) G4352@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4350@t))) (G308a@syntax-dispatch G4350@t 'any))) G4346@t))) (G308a@syntax-dispatch G4346@t '(any . #(each (any any)))))) (car G4340@exp*)))))) G433e@f) G433c@exp* '() '()))) (set! G30ef@parse-library-name (lambda (G4356@spec) ((lambda (G4359@parse) (begin (set! G4359@parse (lambda (G4364@x) ((lambda (G4366@t) ((lambda (G4368@ls/false) (if (if G4368@ls/false (begin '#f (apply (lambda (G436a@v*) (for-all (lambda (G436c@x) ((lambda (G436e@x) (if (integer? G436e@x) (begin '#f (exact? G436e@x)) '#f)) (G3183@syntax->datum G436c@x))) G436a@v*)) G4368@ls/false)) '#f) (apply (lambda (G4370@v*) (values '() (map G3183@syntax->datum G4370@v*))) G4368@ls/false) ((lambda (G4372@t) ((lambda (G4374@ls/false) (if (if G4374@ls/false (begin '#f (apply (lambda (G4376@x G4377@rest) (symbol? (G3183@syntax->datum G4376@x))) G4374@ls/false)) '#f) (apply (lambda (G437a@x G437b@rest) (call-with-values (lambda () (G4359@parse G437b@rest)) (lambda (G4380@G437e G4381@G437f) ((lambda (G4384@v* G4385@x*) (values (cons (G3183@syntax->datum G437a@x) G4385@x*) G4384@v*)) G4381@G437f G4380@G437e)))) G4374@ls/false) ((lambda (G4388@t) ((lambda (G438a@ls/false) (if G438a@ls/false (apply (lambda () (values '() '())) G438a@ls/false) ((lambda (G438c@t) ((lambda (G438e@ls/false) (if G438e@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid library name" G4356@spec)) G438e@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G438c@t))) (G308a@syntax-dispatch G438c@t '_))) G4388@t))) (G308a@syntax-dispatch G4388@t '()))) G4372@t))) (G308a@syntax-dispatch G4372@t '(any . any)))) G4366@t))) (G308a@syntax-dispatch G4366@t '(each-any)))) G4364@x))) (call-with-values (lambda () (G4359@parse G4356@spec)) (lambda (G435c@G435a G435d@G435b) ((lambda (G4360@ver* G4361@name*) (begin (if (null? G4361@name*) (G317d@syntax-violation '#f '"empty library name" G4356@spec) (void)) (values G4361@name* G4360@ver*))) G435d@G435b G435c@G435a))))) '#f))) (set! G30f1@parse-library (lambda (G4390@e) ((lambda (G4392@t) ((lambda (G4394@ls/false) (if (if G4394@ls/false (begin '#f (apply (lambda (G4396@library G4397@name* G4398@export G4399@exp* G439a@import G439b@imp* G439c@b*) (if (eq? (G3183@syntax->datum G4398@export) 'export) (if (eq? (G3183@syntax->datum G439a@import) 'import) (begin '#f (eq? (G3183@syntax->datum G4396@library) 'library)) '#f) '#f)) G4394@ls/false)) '#f) (apply (lambda (G43a4@library G43a5@name* G43a6@export G43a7@exp* G43a8@import G43a9@imp* G43aa@b*) (values G43a5@name* G43a7@exp* G43a9@imp* G43aa@b*)) G4394@ls/false) ((lambda (G43b2@t) ((lambda (G43b4@ls/false) (if G43b4@ls/false (apply (lambda () (G317d@syntax-violation '#f '"malformed library" G4390@e)) G43b4@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G43b2@t))) (G308a@syntax-dispatch G43b2@t '_))) G4392@t))) (G308a@syntax-dispatch G4392@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4390@e))) (set! G30f3@parse-import-spec* ((lambda () ((lambda (G43b7@idsyn? G43b9@dup-error G43bb@merge-substs G43bd@exclude* G43bf@find* G43c1@rem* G43c3@remove-dups G43c5@parse-library-name G43c7@import-library G43c9@get-import G43cb@add-imports!) (begin (set! G43b7@idsyn? (lambda (G45b6@x) (symbol? (G3183@syntax->datum G45b6@x)))) (set! G43b9@dup-error (lambda (G45b4@name) (G317d@syntax-violation 'import '"two imports with different bindings" G45b4@name))) (set! G43bb@merge-substs (lambda (G45a2@s G45a3@subst) ((lambda (G45a7@insert-to-subst) (begin (set! G45a7@insert-to-subst (lambda (G45a8@a G45a9@subst) ((lambda (G45ac@name G45ad@label) ((lambda (G45b0@t) (if G45b0@t ((lambda (G45b2@x) (if (eq? (cdr G45b2@x) G45ad@label) G45a9@subst (G43b9@dup-error G45ac@name))) G45b0@t) (cons G45a8@a G45a9@subst))) (assq G45ac@name G45a9@subst))) (car G45a8@a) (cdr G45a8@a)))) (if (null? G45a2@s) G45a3@subst (G45a7@insert-to-subst (car G45a2@s) (G43bb@merge-substs (cdr G45a2@s) G45a3@subst))))) '#f))) (set! G43bd@exclude* (lambda (G4578@sym* G4579@subst) ((lambda (G457d@exclude) (begin (set! G457d@exclude (lambda (G4592@sym G4593@subst) (if (null? G4593@subst) (G317d@syntax-violation 'import '"cannot rename unbound identifier" G4592@sym) (if (eq? G4592@sym (caar G4593@subst)) (values (cdar G4593@subst) (cdr G4593@subst)) ((lambda (G4596@a) (call-with-values (lambda () (G457d@exclude G4592@sym (cdr G4593@subst))) (lambda (G459a@G4598 G459b@G4599) ((lambda (G459e@subst G459f@old) (values G459f@old (cons G4596@a G459e@subst))) G459b@G4599 G459a@G4598)))) (car G4593@subst)))))) (if (null? G4578@sym*) (values '() G4579@subst) (call-with-values (lambda () (G457d@exclude (car G4578@sym*) G4579@subst)) (lambda (G4580@G457e G4581@G457f) ((lambda (G4584@subst G4585@old) (call-with-values (lambda () (G43bd@exclude* (cdr G4578@sym*) G4584@subst)) (lambda (G458a@G4588 G458b@G4589) ((lambda (G458e@subst G458f@old*) (values (cons G4585@old G458f@old*) G458e@subst)) G458b@G4589 G458a@G4588)))) G4581@G457f G4580@G457e)))))) '#f))) (set! G43bf@find* (lambda (G4570@sym* G4571@subst) (map (lambda (G4574@x) ((lambda (G4576@t) (if G4576@t (cdr G4576@t) (G317d@syntax-violation 'import '"cannot find identifier" G4574@x))) (assq G4574@x G4571@subst))) G4570@sym*))) (set! G43c1@rem* (lambda (G4568@sym* G4569@subst) ((letrec ((G456c@f (lambda (G456e@subst) (if (null? G456e@subst) '() (if (memq (caar G456e@subst) G4568@sym*) (G456c@f (cdr G456e@subst)) (cons (car G456e@subst) (G456c@f (cdr G456e@subst)))))))) G456c@f) G4569@subst))) (set! G43c3@remove-dups (lambda (G4566@ls) (if (null? G4566@ls) '() (if (memq (car G4566@ls) (cdr G4566@ls)) (G43c3@remove-dups (cdr G4566@ls)) (cons (car G4566@ls) (G43c3@remove-dups (cdr G4566@ls))))))) (set! G43c5@parse-library-name (lambda (G4480@spec) ((lambda (G4483@subversion? G4485@subversion-pred G4487@version-pred) (begin (set! G4483@subversion? (lambda (G4562@x) ((lambda (G4564@x) (if (integer? G4564@x) (if (exact? G4564@x) (begin '#f (>= G4564@x '0)) '#f) '#f)) (G3183@syntax->datum G4562@x)))) (set! G4485@subversion-pred (lambda (G4502@x*) ((lambda (G4504@t) ((lambda (G4506@ls/false) (if (if G4506@ls/false (begin '#f (apply (lambda (G4508@n) (G4483@subversion? G4508@n)) G4506@ls/false)) '#f) (apply (lambda (G450a@n) (lambda (G450c@x) (= G450c@x (G3183@syntax->datum G450a@n)))) G4506@ls/false) ((lambda (G450e@t) ((lambda (G4510@ls/false) (if (if G4510@ls/false (begin '#f (apply (lambda (G4512@p? G4513@sub*) (eq? (G3183@syntax->datum G4512@p?) 'and)) G4510@ls/false)) '#f) (apply (lambda (G4516@p? G4517@sub*) ((lambda (G451a@p*) (lambda (G451c@x) (for-all (lambda (G451e@p) (G451e@p G451c@x)) G451a@p*))) (map G4485@subversion-pred G4517@sub*))) G4510@ls/false) ((lambda (G4520@t) ((lambda (G4522@ls/false) (if (if G4522@ls/false (begin '#f (apply (lambda (G4524@p? G4525@sub*) (eq? (G3183@syntax->datum G4524@p?) 'or)) G4522@ls/false)) '#f) (apply (lambda (G4528@p? G4529@sub*) ((lambda (G452c@p*) (lambda (G452e@x) (exists (lambda (G4530@p) (G4530@p G452e@x)) G452c@p*))) (map G4485@subversion-pred G4529@sub*))) G4522@ls/false) ((lambda (G4532@t) ((lambda (G4534@ls/false) (if (if G4534@ls/false (begin '#f (apply (lambda (G4536@p? G4537@sub) (eq? (G3183@syntax->datum G4536@p?) 'not)) G4534@ls/false)) '#f) (apply (lambda (G453a@p? G453b@sub) ((lambda (G453e@p) (lambda (G4540@x) (not (G453e@p G4540@x)))) (G4485@subversion-pred G453b@sub))) G4534@ls/false) ((lambda (G4542@t) ((lambda (G4544@ls/false) (if (if G4544@ls/false (begin '#f (apply (lambda (G4546@p? G4547@n) (if (eq? (G3183@syntax->datum G4546@p?) '<=) (begin '#f (G4483@subversion? G4547@n)) '#f)) G4544@ls/false)) '#f) (apply (lambda (G454a@p? G454b@n) (lambda (G454e@x) (<= G454e@x (G3183@syntax->datum G454b@n)))) G4544@ls/false) ((lambda (G4550@t) ((lambda (G4552@ls/false) (if (if G4552@ls/false (begin '#f (apply (lambda (G4554@p? G4555@n) (if (eq? (G3183@syntax->datum G4554@p?) '>=) (begin '#f (G4483@subversion? G4555@n)) '#f)) G4552@ls/false)) '#f) (apply (lambda (G4558@p? G4559@n) (lambda (G455c@x) (>= G455c@x (G3183@syntax->datum G4559@n)))) G4552@ls/false) ((lambda (G455e@t) ((lambda (G4560@ls/false) (if G4560@ls/false (apply (lambda () (G317d@syntax-violation 'import '"invalid sub-version spec" G4480@spec G4502@x*)) G4560@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G455e@t))) (G308a@syntax-dispatch G455e@t '_))) G4550@t))) (G308a@syntax-dispatch G4550@t '(any any)))) G4542@t))) (G308a@syntax-dispatch G4542@t '(any any)))) G4532@t))) (G308a@syntax-dispatch G4532@t '(any any)))) G4520@t))) (G308a@syntax-dispatch G4520@t '(any . each-any)))) G450e@t))) (G308a@syntax-dispatch G450e@t '(any . each-any)))) G4504@t))) (G308a@syntax-dispatch G4504@t 'any))) G4502@x*))) (set! G4487@version-pred (lambda (G44b2@x*) ((lambda (G44b4@t) ((lambda (G44b6@ls/false) (if G44b6@ls/false (apply (lambda () (lambda (G44b8@x) '#t)) G44b6@ls/false) ((lambda (G44ba@t) ((lambda (G44bc@ls/false) (if (if G44bc@ls/false (begin '#f (apply (lambda (G44be@c G44bf@ver*) (eq? (G3183@syntax->datum G44be@c) 'and)) G44bc@ls/false)) '#f) (apply (lambda (G44c2@c G44c3@ver*) ((lambda (G44c6@p*) (lambda (G44c8@x) (for-all (lambda (G44ca@p) (G44ca@p G44c8@x)) G44c6@p*))) (map G4487@version-pred G44c3@ver*))) G44bc@ls/false) ((lambda (G44cc@t) ((lambda (G44ce@ls/false) (if (if G44ce@ls/false (begin '#f (apply (lambda (G44d0@c G44d1@ver*) (eq? (G3183@syntax->datum G44d0@c) 'or)) G44ce@ls/false)) '#f) (apply (lambda (G44d4@c G44d5@ver*) ((lambda (G44d8@p*) (lambda (G44da@x) (exists (lambda (G44dc@p) (G44dc@p G44da@x)) G44d8@p*))) (map G4487@version-pred G44d5@ver*))) G44ce@ls/false) ((lambda (G44de@t) ((lambda (G44e0@ls/false) (if (if G44e0@ls/false (begin '#f (apply (lambda (G44e2@c G44e3@ver) (eq? (G3183@syntax->datum G44e2@c) 'not)) G44e0@ls/false)) '#f) (apply (lambda (G44e6@c G44e7@ver) ((lambda (G44ea@p) (lambda (G44ec@x) (not (G44ea@p G44ec@x)))) (G4487@version-pred G44e7@ver))) G44e0@ls/false) ((lambda (G44ee@t) ((lambda (G44f0@ls/false) (if G44f0@ls/false (apply (lambda (G44f2@sub*) ((lambda (G44f4@p*) (lambda (G44f6@x) ((letrec ((G44f8@f (lambda (G44fa@p* G44fb@x) (if (null? G44fa@p*) '#t (if (null? G44fb@x) '#f (if ((car G44fa@p*) (car G44fb@x)) (begin '#f (G44f8@f (cdr G44fa@p*) (cdr G44fb@x))) '#f)))))) G44f8@f) G44f4@p* G44f6@x))) (map G4485@subversion-pred G44f2@sub*))) G44f0@ls/false) ((lambda (G44fe@t) ((lambda (G4500@ls/false) (if G4500@ls/false (apply (lambda () (G317d@syntax-violation 'import '"invalid version spec" G4480@spec G44b2@x*)) G4500@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G44fe@t))) (G308a@syntax-dispatch G44fe@t '_))) G44ee@t))) (G308a@syntax-dispatch G44ee@t 'each-any))) G44de@t))) (G308a@syntax-dispatch G44de@t '(any any)))) G44cc@t))) (G308a@syntax-dispatch G44cc@t '(any . each-any)))) G44ba@t))) (G308a@syntax-dispatch G44ba@t '(any . each-any)))) G44b4@t))) (G308a@syntax-dispatch G44b4@t '()))) G44b2@x*))) ((letrec ((G4488@f (lambda (G448a@x) ((lambda (G448c@t) ((lambda (G448e@ls/false) (if G448e@ls/false (apply (lambda (G4490@version-spec*) (values '() (G4487@version-pred G4490@version-spec*))) G448e@ls/false) ((lambda (G4492@t) ((lambda (G4494@ls/false) (if (if G4494@ls/false (begin '#f (apply (lambda (G4496@x G4497@x*) (G43b7@idsyn? G4496@x)) G4494@ls/false)) '#f) (apply (lambda (G449a@x G449b@x*) (call-with-values (lambda () (G4488@f G449b@x*)) (lambda (G44a0@G449e G44a1@G449f) ((lambda (G44a4@pred G44a5@name) (values (cons (G3183@syntax->datum G449a@x) G44a5@name) G44a4@pred)) G44a1@G449f G44a0@G449e)))) G4494@ls/false) ((lambda (G44a8@t) ((lambda (G44aa@ls/false) (if G44aa@ls/false (apply (lambda () (values '() (lambda (G44ac@x) '#t))) G44aa@ls/false) ((lambda (G44ae@t) ((lambda (G44b0@ls/false) (if G44b0@ls/false (apply (lambda () (G317d@syntax-violation '#f '"invalid import spec" G4480@spec)) G44b0@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G44ae@t))) (G308a@syntax-dispatch G44ae@t '_))) G44a8@t))) (G308a@syntax-dispatch G44a8@t '()))) G4492@t))) (G308a@syntax-dispatch G4492@t '(any . any)))) G448c@t))) (G308a@syntax-dispatch G448c@t '(each-any)))) G448a@x)))) G4488@f) G4480@spec))) '#f '#f '#f))) (set! G43c7@import-library (lambda (G4472@spec*) (call-with-values (lambda () (G43c5@parse-library-name G4472@spec*)) (lambda (G4476@G4474 G4477@G4475) ((lambda (G447a@pred G447b@name) (begin (if (null? G447b@name) (G317d@syntax-violation 'import '"empty library name" G4472@spec*) (void)) ((lambda (G447e@lib) (begin (if (not G447e@lib) (G317d@syntax-violation 'import '"cannot find library with required name" G447b@name) (void)) (if (not (G447a@pred (G2c0d@G2a73@library-version G447e@lib))) (G317d@syntax-violation 'import '"library does not satisfy version specification" G4472@spec* G447e@lib) (void)) ((G30fd@imp-collector) G447e@lib) (G2c11@G2a7b@library-subst G447e@lib))) (G2c35@G2ac3@find-library-by-name G447b@name)))) G4477@G4475 G4476@G4474))))) (set! G43c9@get-import (lambda (G43e4@spec) ((lambda (G43e6@t) ((lambda (G43e8@ls/false) (if (if G43e8@ls/false (begin '#f (apply (lambda (G43ea@x G43eb@x*) (not (memq (G3183@syntax->datum G43ea@x) '(for rename except only prefix library)))) G43e8@ls/false)) '#f) (apply (lambda (G43ee@x G43ef@x*) (G43c7@import-library (cons G43ee@x G43ef@x*))) G43e8@ls/false) ((lambda (G43f2@t) ((lambda (G43f4@ls/false) (if (if G43f4@ls/false (begin '#f (apply (lambda (G43f6@rename G43f7@isp G43f8@old* G43f9@new*) (if (eq? (G3183@syntax->datum G43f6@rename) 'rename) (if (for-all G43b7@idsyn? G43f8@old*) (begin '#f (for-all G43b7@idsyn? G43f9@new*)) '#f) '#f)) G43f4@ls/false)) '#f) (apply (lambda (G43fe@rename G43ff@isp G4400@old* G4401@new*) ((lambda (G4406@subst G4407@old* G4408@new*) ((lambda (G440c@old-label*) ((lambda (G440e@subst) (G43bb@merge-substs (map cons G4408@new* G440c@old-label*) G440e@subst)) (G43c1@rem* G4407@old* G4406@subst))) (G43bf@find* G4407@old* G4406@subst))) (G43c9@get-import G43ff@isp) (map G3183@syntax->datum G4400@old*) (map G3183@syntax->datum G4401@new*))) G43f4@ls/false) ((lambda (G4410@t) ((lambda (G4412@ls/false) (if (if G4412@ls/false (begin '#f (apply (lambda (G4414@except G4415@isp G4416@sym*) (if (eq? (G3183@syntax->datum G4414@except) 'except) (begin '#f (for-all G43b7@idsyn? G4416@sym*)) '#f)) G4412@ls/false)) '#f) (apply (lambda (G441a@except G441b@isp G441c@sym*) ((lambda (G4420@subst) (G43c1@rem* (map G3183@syntax->datum G441c@sym*) G4420@subst)) (G43c9@get-import G441b@isp))) G4412@ls/false) ((lambda (G4422@t) ((lambda (G4424@ls/false) (if (if G4424@ls/false (begin '#f (apply (lambda (G4426@only G4427@isp G4428@sym*) (if (eq? (G3183@syntax->datum G4426@only) 'only) (begin '#f (for-all G43b7@idsyn? G4428@sym*)) '#f)) G4424@ls/false)) '#f) (apply (lambda (G442c@only G442d@isp G442e@sym*) ((lambda (G4432@subst G4433@sym*) ((lambda (G4436@sym*) ((lambda (G4438@lab*) (map cons G4436@sym* G4438@lab*)) (G43bf@find* G4436@sym* G4432@subst))) (G43c3@remove-dups G4433@sym*))) (G43c9@get-import G442d@isp) (map G3183@syntax->datum G442e@sym*))) G4424@ls/false) ((lambda (G443a@t) ((lambda (G443c@ls/false) (if (if G443c@ls/false (begin '#f (apply (lambda (G443e@prefix G443f@isp G4440@p) (if (eq? (G3183@syntax->datum G443e@prefix) 'prefix) (begin '#f (G43b7@idsyn? G4440@p)) '#f)) G443c@ls/false)) '#f) (apply (lambda (G4444@prefix G4445@isp G4446@p) ((lambda (G444a@subst G444b@prefix) (map (lambda (G444e@x) (cons (string->symbol (string-append G444b@prefix (symbol->string (car G444e@x)))) (cdr G444e@x))) G444a@subst)) (G43c9@get-import G4445@isp) (symbol->string (G3183@syntax->datum G4446@p)))) G443c@ls/false) ((lambda (G4450@t) ((lambda (G4452@ls/false) (if (if G4452@ls/false (begin '#f (apply (lambda (G4454@library G4455@spec*) (eq? (G3183@syntax->datum G4454@library) 'library)) G4452@ls/false)) '#f) (apply (lambda (G4458@library G4459@spec*) (G43c7@import-library G4459@spec*)) G4452@ls/false) ((lambda (G445c@t) ((lambda (G445e@ls/false) (if (if G445e@ls/false (begin '#f (apply (lambda (G4460@for G4461@isp G4462@rest) (eq? (G3183@syntax->datum G4460@for) 'for)) G445e@ls/false)) '#f) (apply (lambda (G4466@for G4467@isp G4468@rest) (G43c9@get-import G4467@isp)) G445e@ls/false) ((lambda (G446c@t) ((lambda (G446e@ls/false) (if G446e@ls/false (apply (lambda (G4470@spec) (G317d@syntax-violation 'import '"invalid import spec" G4470@spec)) G446e@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G446c@t))) (G308a@syntax-dispatch G446c@t 'any))) G445c@t))) (G308a@syntax-dispatch G445c@t '(any any . any)))) G4450@t))) (G308a@syntax-dispatch G4450@t '(any each-any)))) G443a@t))) (G308a@syntax-dispatch G443a@t '(any any any)))) G4422@t))) (G308a@syntax-dispatch G4422@t '(any any . each-any)))) G4410@t))) (G308a@syntax-dispatch G4410@t '(any any . each-any)))) G43f2@t))) (G308a@syntax-dispatch G43f2@t '(any any . #(each (any any)))))) G43e6@t))) (G308a@syntax-dispatch G43e6@t '(any . each-any)))) G43e4@spec))) (set! G43cb@add-imports! (lambda (G43d4@imp G43d5@h) ((lambda (G43d8@subst) (for-each (lambda (G43da@x) ((lambda (G43dc@name G43dd@label) ((lambda (G43e0@t) (if G43e0@t ((lambda (G43e2@l) (if (not (eq? G43e2@l G43dd@label)) (G43b9@dup-error G43dc@name) (void))) G43e0@t) (hashtable-set! G43d5@h G43dc@name G43dd@label))) (hashtable-ref G43d5@h G43dc@name '#f))) (car G43da@x) (cdr G43da@x))) G43d8@subst)) (G43c9@get-import G43d4@imp)))) (lambda (G43cc@imp*) ((letrec ((G43ce@f (lambda (G43d0@imp* G43d1@h) (if (null? G43d0@imp*) (hashtable-entries G43d1@h) (begin (G43cb@add-imports! (car G43d0@imp*) G43d1@h) (G43ce@f (cdr G43d0@imp*) G43d1@h)))))) G43ce@f) G43cc@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G30f5@make-top-rib (lambda (G45b8@names G45b9@labels) ((lambda (G45bc@rib) (begin (vector-for-each (lambda (G45be@name G45bf@label) (begin (if (not (symbol? G45be@name)) (error 'make-top-rib '"BUG: not a symbol" G45be@name) (void)) (G2df8@extend-rib/nc! G45bc@rib (G2e11@make-stx G45be@name G2dbb@top-mark* '() '()) G45bf@label))) G45b8@names G45b9@labels) G45bc@rib)) (G2df2@make-cache-rib)))) (set! G30f7@make-collector (lambda () ((lambda (G45c2@ls) (lambda G45c6 ((lambda (G45c7) (if (= G45c7 '0) (apply (lambda () G45c2@ls) G45c6) (if (= G45c7 '1) (apply (lambda (G45c4@x) (set! G45c2@ls (G2db4@set-cons G45c4@x G45c2@ls))) G45c6) (error 'apply '"invalid arg count")))) (length G45c6)))) '()))) (set! G30f9@inv-collector (G2999@G28a4@make-parameter (lambda G45c8@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G45ca@x) (begin (if (not (procedure? G45ca@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G45ca@x) (void)) G45ca@x)))) (set! G30fb@vis-collector (G2999@G28a4@make-parameter (lambda G45cc@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G45ce@x) (begin (if (not (procedure? G45ce@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G45ce@x) (void)) G45ce@x)))) (set! G30fd@imp-collector (G2999@G28a4@make-parameter (lambda G45d0@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G45d2@x) (begin (if (not (procedure? G45d2@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G45d2@x) (void)) G45d2@x)))) (set! G30ff@chi-library-internal (lambda (G45d4@e* G45d5@rib G45d6@top?) (call-with-values (lambda () (G30e9@chi-body* G45d4@e* '() '() '() '() '() '() '() G45d5@rib G45d6@top?)) (lambda (G45e2@G45da G45e3@G45db G45e4@G45dc G45e5@G45dd G45e6@G45de G45e7@G45df G45e8@G45e0 G45e9@G45e1) ((lambda (G45f2@exp* G45f3@_kwd* G45f4@mod** G45f5@rhs* G45f6@lex* G45f7@mr G45f8@r G45f9@e*) (values (append (apply append (reverse G45f4@mod**)) G45f9@e*) G45f8@r G45f7@mr (reverse G45f6@lex*) (reverse G45f5@rhs*) G45f2@exp*)) G45e9@G45e1 G45e8@G45e0 G45e7@G45df G45e6@G45de G45e5@G45dd G45e4@G45dc G45e3@G45db G45e2@G45da))))) (set! G3101@chi-interaction-expr (lambda (G4602@e G4603@rib G4604@r) (call-with-values (lambda () (G30e9@chi-body* (list G4602@e) G4604@r G4604@r '() '() '() '() '() G4603@rib '#t)) (lambda (G4610@G4608 G4611@G4609 G4612@G460a G4613@G460b G4614@G460c G4615@G460d G4616@G460e G4617@G460f) ((lambda (G4620@_exp* G4621@_kwd* G4622@mod** G4623@rhs* G4624@lex* G4625@mr G4626@r G4627@e*) ((lambda (G4630@e*) ((lambda (G4632@e) (values G4632@e G4626@r)) (if (null? G4630@e*) (G2da3@G2d15@build-void) (if (null? (cdr G4630@e*)) (car G4630@e*) (G2da2@G2d13@build-sequence '#f G4630@e*))))) (G30bc@expand-interaction-rhs*/init* (reverse G4624@lex*) (reverse G4623@rhs*) (append (apply append (reverse G4622@mod**)) G4627@e*) G4626@r G4625@mr))) G4617@G460f G4616@G460e G4615@G460d G4614@G460c G4613@G460b G4612@G460a G4611@G4609 G4610@G4608))))) (set! G3103@library-body-expander (lambda (G4634@name G4635@main-exp* G4636@imp* G4637@b* G4638@top?) ((lambda (G463f@itc) (begin (set! G463f@itc (G30f7@make-collector)) ((lambda (G4644@G4640@imp-collector G4645@G4641@top-level-context G4646@G4642@imp-collector G4647@G4643@top-level-context) ((lambda (G464c@swap) (dynamic-wind G464c@swap (lambda () (call-with-values (lambda () (G30f3@parse-import-spec* G4636@imp*)) (lambda (G4650@G464e G4651@G464f) ((lambda (G4654@subst-labels G4655@subst-names) ((lambda (G4658@rib) ((lambda (G465b@wrap) (begin (set! G465b@wrap (lambda (G46c7@x) (G2e11@make-stx G46c7@x G2dbb@top-mark* (list G4658@rib) '()))) ((lambda (G465c@b* G465d@main-exp* G465e@rtc G465f@vtc) ((lambda (G4668@G4664@inv-collector G4669@G4665@vis-collector G466a@G4666@inv-collector G466b@G4667@vis-collector) ((lambda (G4670@swap) (dynamic-wind G4670@swap (lambda () (call-with-values (lambda () (G30ff@chi-library-internal G465c@b* G4658@rib G4638@top?)) (lambda (G4678@G4672 G4679@G4673 G467a@G4674 G467b@G4675 G467c@G4676 G467d@G4677) ((lambda (G4684@internal-exp* G4685@rhs* G4686@lex* G4687@mr G4688@r G4689@init*) (call-with-values (lambda () (G30ed@parse-exports (append G465d@main-exp* G4684@internal-exp*))) (lambda (G4692@G4690 G4693@G4691) ((lambda (G4696@exp-id* G4697@exp-name*) (begin (G2dfc@seal-rib! G4658@rib) ((lambda (G469a@init*) ((lambda (G469c@rhs*) ((lambda () (begin (G2dfe@unseal-rib! G4658@rib) ((lambda (G469e@loc* G469f@export-subst) ((lambda (G46a3@errstr) (begin (set! G46a3@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3167@make-export-env/macros G4686@lex* G469e@loc* G4688@r)) (lambda (G46a7@G46a4 G46a8@G46a5 G46a9@G46a6) ((lambda (G46ad@macro* G46ae@global* G46af@export-env) (begin (for-each (lambda (G46b3@s) ((lambda (G46b5@name G46b6@label) ((lambda (G46b9@p) (if G46b9@p ((lambda (G46bb@b) ((lambda (G46bd@type) (if (eq? G46bd@type 'mutable) (G317d@syntax-violation 'export G46a3@errstr G46b5@name) (void))) (car G46bb@b))) (cdr G46b9@p)) (void))) (assq G46b6@label G46af@export-env))) (car G46b3@s) (cdr G46b3@s))) G469f@export-subst) ((lambda (G46bf@invoke-body G46c0@invoke-definitions) (values (G463f@itc) (G465e@rtc) (G465f@vtc) (G2da2@G2d13@build-sequence '#f (append G46c0@invoke-definitions (list G46bf@invoke-body))) G46ad@macro* G469f@export-subst G46af@export-env)) (G2da5@G2d19@build-letrec* '#f G4686@lex* G469c@rhs* (G3163@build-exports G46ae@global* G469a@init*)) (map G2d9e@G2c43@build-global-define (map cdr G46ae@global*))))) G46a9@G46a6 G46a8@G46a5 G46a7@G46a4))))) '#f)) (map G2dc1@gen-global G4686@lex*) (G3165@make-export-subst G4697@exp-name* G4696@exp-id*)))))) (G30be@chi-rhs* G4685@rhs* G4688@r G4687@mr))) (G30aa@chi-expr* G4689@init* G4688@r G4687@mr)))) G4693@G4691 G4692@G4690)))) G467d@G4677 G467c@G4676 G467b@G4675 G467a@G4674 G4679@G4673 G4678@G4672)))) G4670@swap)) (lambda () (begin ((lambda (G46c3@t) (begin (G4668@G4664@inv-collector G466a@G4666@inv-collector) (set! G466a@G4666@inv-collector G46c3@t))) (G4668@G4664@inv-collector)) ((lambda (G46c5@t) (begin (G4669@G4665@vis-collector G466b@G4667@vis-collector) (set! G466b@G4667@vis-collector G46c5@t))) (G4669@G4665@vis-collector)))))) G30f9@inv-collector G30fb@vis-collector G465e@rtc G465f@vtc)) (map G465b@wrap G4637@b*) (map G465b@wrap G4635@main-exp*) (G30f7@make-collector) (G30f7@make-collector)))) '#f)) (G30f5@make-top-rib G4655@subst-names G4654@subst-labels))) G4651@G464f G4650@G464e)))) G464c@swap)) (lambda () (begin ((lambda (G46c9@t) (begin (G4644@G4640@imp-collector G4646@G4642@imp-collector) (set! G4646@G4642@imp-collector G46c9@t))) (G4644@G4640@imp-collector)) ((lambda (G46cb@t) (begin (G4645@G4641@top-level-context G4647@G4643@top-level-context) (set! G4647@G4643@top-level-context G46cb@t))) (G4645@G4641@top-level-context)))))) G30fd@imp-collector G318b@top-level-context G463f@itc '#f))) '#f))) (set! G3105@core-library-expander (lambda (G46cd@e G46ce@verify-name) (call-with-values (lambda () (G30f1@parse-library G46cd@e)) (lambda (G46d5@G46d1 G46d6@G46d2 G46d7@G46d3 G46d8@G46d4) ((lambda (G46dd@b* G46de@imp* G46df@exp* G46e0@name*) (call-with-values (lambda () (G30ef@parse-library-name G46e0@name*)) (lambda (G46e7@G46e5 G46e8@G46e6) ((lambda (G46eb@ver G46ec@name) (begin (G46ce@verify-name G46ec@name) (call-with-values (lambda () (G3103@library-body-expander G46ec@name G46df@exp* G46de@imp* G46dd@b* '#f)) (lambda (G46f6@G46ef G46f7@G46f0 G46f8@G46f1 G46f9@G46f2 G46fa@G46f3 G46fb@G46f4 G46fc@G46f5) ((lambda (G4704@export-env G4705@export-subst G4706@visit-code G4707@invoke-code G4708@visit-req* G4709@invoke-req* G470a@imp*) (values G46ec@name G46eb@ver G470a@imp* G4709@invoke-req* G4708@visit-req* G4707@invoke-code G4706@visit-code G4705@export-subst G4704@export-env)) G46fc@G46f5 G46fb@G46f4 G46fa@G46f3 G46f9@G46f2 G46f8@G46f1 G46f7@G46f0 G46f6@G46ef))))) G46e8@G46e6 G46e7@G46e5)))) G46d8@G46d4 G46d7@G46d3 G46d6@G46d2 G46d5@G46d1))))) (set! G3107@parse-top-level-program (lambda (G4712@e*) ((lambda (G4714@t) ((lambda (G4716@ls/false) (if (if G4716@ls/false (begin '#f (apply (lambda (G4718@import G4719@imp* G471a@b*) (eq? (G3183@syntax->datum G4718@import) 'import)) G4716@ls/false)) '#f) (apply (lambda (G471e@import G471f@imp* G4720@b*) (values G471f@imp* G4720@b*)) G4716@ls/false) ((lambda (G4724@t) ((lambda (G4726@ls/false) (if (if G4726@ls/false (begin '#f (apply (lambda (G4728@import G4729@x G472a@y) (eq? (G3183@syntax->datum G4728@import) 'import)) G4726@ls/false)) '#f) (apply (lambda (G472e@import G472f@x G4730@y) (G317d@syntax-violation 'expander '"invalid syntax of top-level program" (G2e41@syntax-car G4712@e*))) G4726@ls/false) ((lambda (G4734@t) ((lambda (G4736@ls/false) (if G4736@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G4736@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4734@t))) (G308a@syntax-dispatch G4734@t '_))) G4724@t))) (G308a@syntax-dispatch G4724@t '((any . any) . any)))) G4714@t))) (G308a@syntax-dispatch G4714@t '((any . each-any) . each-any)))) G4712@e*))) (set! G3109@top-level-expander (lambda (G4738@e*) (call-with-values (lambda () (G3107@parse-top-level-program G4738@e*)) (lambda (G473c@G473a G473d@G473b) ((lambda (G4740@b* G4741@imp*) (call-with-values (lambda () (G3103@library-body-expander '() '() G4741@imp* G4740@b* '#t)) (lambda (G474b@G4744 G474c@G4745 G474d@G4746 G474e@G4747 G474f@G4748 G4750@G4749 G4751@G474a) ((lambda (G4759@export-env G475a@export-subst G475b@visit-code G475c@invoke-code G475d@visit-req* G475e@invoke-req* G475f@imp*) (values G475e@invoke-req* G475c@invoke-code)) G4751@G474a G4750@G4749 G474f@G4748 G474e@G4747 G474d@G4746 G474c@G4745 G474b@G4744)))) G473d@G473b G473c@G473a))))) (set! G310f@G310a (make-record-type-descriptor 'env '#f 'G310d '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G3111@G310c '#f) (set! G3113@G310b (make-record-constructor-descriptor G310f@G310a '#f G3111@G310c)) (set! G3118@env? (record-predicate G310f@G310a)) (set! G311a@make-env (record-constructor G3113@G310b)) (set! G311c@env-names (record-accessor G310f@G310a '0)) (set! G311e@env-labels (record-accessor G310f@G310a '1)) (set! G3120@env-itc (record-accessor G310f@G310a '2)) (set! G3122@set-env-names! (record-mutator G310f@G310a '0)) (set! G3124@set-env-labels! (record-mutator G310f@G310a '1)) (set! G3126@set-env-itc! (record-mutator G310f@G310a '2)) (set! G3128@rp (G2996@G289e@make-record-printer 'env (lambda (G4767@x G4768@p G4769@wr) (display '"#<environment>" G4768@p)))) (set! G312e@G3129 (make-record-type-descriptor 'interaction-env '#f 'G312c '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3130@G312b '#f) (set! G3132@G312a (make-record-constructor-descriptor G312e@G3129 '#f G3130@G312b)) (set! G3137@interaction-env? (record-predicate G312e@G3129)) (set! G3139@make-interaction-env (record-constructor G3132@G312a)) (set! G313b@interaction-env-rib (record-accessor G312e@G3129 '0)) (set! G313d@interaction-env-r (record-accessor G312e@G3129 '1)) (set! G313f@interaction-env-locs (record-accessor G312e@G3129 '2)) (set! G3141@set-interaction-env-rib! (record-mutator G312e@G3129 '0)) (set! G3143@set-interaction-env-r! (record-mutator G312e@G3129 '1)) (set! G3145@set-interaction-env-locs! (record-mutator G312e@G3129 '2)) (set! G3147@rp (G2996@G289e@make-record-printer 'interaction-env (lambda (G476d@x G476e@p G476f@wr) (display '"#<environment>" G476e@p)))) (set! G3149@interaction-environment-symbols (lambda () (G3151@environment-symbols (G3189@interaction-environment)))) (set! G314b@environment-bindings (lambda (G4773@e) (vector->list (vector-map (lambda (G4775@name G4776@label) (G314d@parse-binding (cons G4775@name (G2c3b@G2acf@imported-label->binding G4776@label)))) (G311c@env-names G4773@e) (G311e@env-labels G4773@e))))) (set! G314d@parse-binding (lambda (G4779@b) (cons (car G4779@b) ((lambda (G477b@t) (if (memv G477b@t '(core-prim global)) 'procedure (if (memv G477b@t '(core-macro macro global-macro)) 'syntax (if (memv G477b@t '($core-rtd)) 'record (if (eq? (car G4779@b) (cadr G4779@b)) 'syntax 'unknown))))) (cadr G4779@b))))) (set! G314f@environment? (lambda (G477d@x) ((lambda (G477f@t) (if G477f@t G477f@t (begin '#f (G3137@interaction-env? G477d@x)))) (G3118@env? G477d@x)))) (set! G3151@environment-symbols (lambda (G4781@x) (if (G3118@env? G4781@x) (vector->list (G311c@env-names G4781@x)) (if (G3137@interaction-env? G4781@x) (map values (G2ddc@rib-sym* (G313b@interaction-env-rib G4781@x))) (assertion-violation 'environment-symbols '"not an environment" G4781@x))))) (set! G3153@environment (lambda G4783@imp* ((lambda (G4785@itc) ((lambda (G4789@G4787@imp-collector G478a@G4788@imp-collector) ((lambda (G478d@swap) (dynamic-wind G478d@swap (lambda () (call-with-values (lambda () (G30f3@parse-import-spec* G4783@imp*)) (lambda (G4791@G478f G4792@G4790) ((lambda (G4795@subst-labels G4796@subst-names) (G311a@make-env G4796@subst-names G4795@subst-labels G4785@itc)) G4792@G4790 G4791@G478f)))) G478d@swap)) (lambda () ((lambda (G4799@t) (begin (G4789@G4787@imp-collector G478a@G4788@imp-collector) (set! G478a@G4788@imp-collector G4799@t))) (G4789@G4787@imp-collector))))) G30fd@imp-collector G4785@itc)) (G30f7@make-collector)))) (set! G3155@null-environment (lambda (G479b@n) (begin (if (not (eqv? G479b@n '5)) (assertion-violation 'null-environment '"not 5" G479b@n) (void)) (G3153@environment '(psyntax null-environment-5))))) (set! G3157@scheme-report-environment (lambda (G479d@n) (begin (if (not (eqv? G479d@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G479d@n) (void)) (G3153@environment '(psyntax scheme-report-environment-5))))) (set! G3159@expand (lambda (G479f@x G47a0@env) (if (G3118@env? G47a0@env) ((lambda (G47a3@rib) ((lambda (G47a5@x G47a6@itc G47a7@rtc G47a8@vtc) ((lambda (G47ad@x) (begin (G2dfc@seal-rib! G47a3@rib) (values G47ad@x (G47a7@rtc)))) ((lambda (G47b7@G47af@top-level-context G47b8@G47b0@inv-collector G47b9@G47b1@vis-collector G47ba@G47b2@imp-collector G47bb@G47b3@top-level-context G47bc@G47b4@inv-collector G47bd@G47b5@vis-collector G47be@G47b6@imp-collector) ((lambda (G47c7@swap) (dynamic-wind G47c7@swap (lambda () (G30ae@chi-expr G47a5@x '() '())) G47c7@swap)) (lambda () (begin ((lambda (G47c9@t) (begin (G47b7@G47af@top-level-context G47bb@G47b3@top-level-context) (set! G47bb@G47b3@top-level-context G47c9@t))) (G47b7@G47af@top-level-context)) ((lambda (G47cb@t) (begin (G47b8@G47b0@inv-collector G47bc@G47b4@inv-collector) (set! G47bc@G47b4@inv-collector G47cb@t))) (G47b8@G47b0@inv-collector)) ((lambda (G47cd@t) (begin (G47b9@G47b1@vis-collector G47bd@G47b5@vis-collector) (set! G47bd@G47b5@vis-collector G47cd@t))) (G47b9@G47b1@vis-collector)) ((lambda (G47cf@t) (begin (G47ba@G47b2@imp-collector G47be@G47b6@imp-collector) (set! G47be@G47b6@imp-collector G47cf@t))) (G47ba@G47b2@imp-collector)))))) G318b@top-level-context G30f9@inv-collector G30fb@vis-collector G30fd@imp-collector '#f G47a7@rtc G47a8@vtc G47a6@itc))) (G2e11@make-stx G479f@x G2dbb@top-mark* (list G47a3@rib) '()) (G3120@env-itc G47a0@env) (G30f7@make-collector) (G30f7@make-collector))) (G30f5@make-top-rib (G311c@env-names G47a0@env) (G311e@env-labels G47a0@env))) (if (G3137@interaction-env? G47a0@env) ((lambda (G47d1@rib G47d2@r G47d3@rtc) ((lambda (G47d7@x) (call-with-values (lambda () ((lambda (G47e3@G47db@top-level-context G47e4@G47dc@inv-collector G47e5@G47dd@vis-collector G47e6@G47de@imp-collector G47e7@G47df@top-level-context G47e8@G47e0@inv-collector G47e9@G47e1@vis-collector G47ea@G47e2@imp-collector) ((lambda (G47f3@swap) (dynamic-wind G47f3@swap (lambda () (G3101@chi-interaction-expr G47d7@x G47d1@rib G47d2@r)) G47f3@swap)) (lambda () (begin ((lambda (G47f5@t) (begin (G47e3@G47db@top-level-context G47e7@G47df@top-level-context) (set! G47e7@G47df@top-level-context G47f5@t))) (G47e3@G47db@top-level-context)) ((lambda (G47f7@t) (begin (G47e4@G47dc@inv-collector G47e8@G47e0@inv-collector) (set! G47e8@G47e0@inv-collector G47f7@t))) (G47e4@G47dc@inv-collector)) ((lambda (G47f9@t) (begin (G47e5@G47dd@vis-collector G47e9@G47e1@vis-collector) (set! G47e9@G47e1@vis-collector G47f9@t))) (G47e5@G47dd@vis-collector)) ((lambda (G47fb@t) (begin (G47e6@G47de@imp-collector G47ea@G47e2@imp-collector) (set! G47ea@G47e2@imp-collector G47fb@t))) (G47e6@G47de@imp-collector)))))) G318b@top-level-context G30f9@inv-collector G30fb@vis-collector G30fd@imp-collector G47a0@env G47d3@rtc (G30f7@make-collector) (G30f7@make-collector))) (lambda (G47fd@G47d9 G47fe@G47da) ((lambda (G4801@r^ G4802@e) (begin (G3143@set-interaction-env-r! G47a0@env G4801@r^) (values G4802@e (G47d3@rtc)))) G47fe@G47da G47fd@G47d9)))) (G2e11@make-stx G479f@x G2dbb@top-mark* (list G47d1@rib) '()))) (G313b@interaction-env-rib G47a0@env) (G313d@interaction-env-r G47a0@env) (G30f7@make-collector)) (assertion-violation 'expand '"not an environment" G47a0@env))))) (set! G315b@eval (lambda (G4805@x G4806@env) (begin (if (not (G314f@environment? G4806@env)) (error 'eval '"not an environment" G4806@env) (void)) (call-with-values (lambda () (G3159@expand G4805@x G4806@env)) (lambda (G480b@G4809 G480c@G480a) ((lambda (G480f@invoke-req* G4810@x) (begin (for-each G2c3c@G2ad1@invoke-library G480f@invoke-req*) (eval-core (G29fd@G29a5@expanded->core G4810@x)))) G480c@G480a G480b@G4809)))))) (set! G315d@library-expander (lambda G4878 ((lambda (G4879) (if (= G4879 '3) (apply (lambda (G4813@x G4814@filename G4815@verify-name) ((lambda (G481a@build-visit-code G481c@visit!) (begin (set! G481a@build-visit-code (lambda (G4866@macro*) (if (null? G4866@macro*) (G2da3@G2d15@build-void) (G2da2@G2d13@build-sequence '#f (map (lambda (G4868@x) ((lambda (G486a@loc G486b@src) (list 'set! G486a@loc G486b@src)) (car G4868@x) (cddr G4868@x))) G4866@macro*))))) (set! G481c@visit! (lambda (G485e@macro*) (for-each (lambda (G4860@x) ((lambda (G4862@loc G4863@proc) (set-symbol-value! G4862@loc G4863@proc)) (car G4860@x) (cadr G4860@x))) G485e@macro*))) (call-with-values (lambda () (G3105@core-library-expander G4813@x G4815@verify-name)) (lambda (G4826@G481d G4827@G481e G4828@G481f G4829@G4820 G482a@G4821 G482b@G4822 G482c@G4823 G482d@G4824 G482e@G4825) ((lambda (G4838@export-env G4839@export-subst G483a@macro* G483b@invoke-code G483c@vis* G483d@inv* G483e@imp* G483f@ver G4840@name) ((lambda (G484a@id G484b@name G484c@ver G484d@imp* G484e@vis* G484f@inv* G4850@visit-proc G4851@invoke-proc G4852@visit-code G4853@invoke-code) (begin (G2c3a@G2acd@install-library G484a@id G484b@name G484c@ver G484d@imp* G484e@vis* G484f@inv* G4839@export-subst G4838@export-env G4850@visit-proc G4851@invoke-proc G4852@visit-code G4853@invoke-code '#t G4814@filename) (values G484a@id G484b@name G484c@ver G484d@imp* G484e@vis* G484f@inv* G4853@invoke-code G4852@visit-code G4839@export-subst G4838@export-env))) (gensym) G4840@name G483f@ver (map G2c40@G2ad9@library-spec G483e@imp*) (map G2c40@G2ad9@library-spec G483c@vis*) (map G2c40@G2ad9@library-spec G483d@inv*) (lambda () (G481c@visit! G483a@macro*)) (lambda () (eval-core (G29fd@G29a5@expanded->core G483b@invoke-code))) (G481a@build-visit-code G483a@macro*) G483b@invoke-code)) G482e@G4825 G482d@G4824 G482c@G4823 G482b@G4822 G482a@G4821 G4829@G4820 G4828@G481f G4827@G481e G4826@G481d))))) '#f '#f)) G4878) (if (= G4879 '2) (apply (lambda (G486e@x G486f@filename) (G315d@library-expander G486e@x G486f@filename (lambda (G4872@x) (values)))) G4878) (if (= G4879 '1) (apply (lambda (G4874@x) (G315d@library-expander G4874@x '#f (lambda (G4876@x) (values)))) G4878) (error 'apply '"invalid arg count"))))) (length G4878)))) (set! G315f@boot-library-expand (lambda (G487a@x) (call-with-values (lambda () (G315d@library-expander G487a@x)) (lambda (G4886@G487c G4887@G487d G4888@G487e G4889@G487f G488a@G4880 G488b@G4881 G488c@G4882 G488d@G4883 G488e@G4884 G488f@G4885) ((lambda (G489a@export-env G489b@export-subst G489c@visit-code G489d@invoke-code G489e@inv* G489f@vis* G48a0@imp* G48a1@ver G48a2@name G48a3@id) (values G48a2@name G489d@invoke-code G489b@export-subst G489a@export-env)) G488f@G4885 G488e@G4884 G488d@G4883 G488c@G4882 G488b@G4881 G488a@G4880 G4889@G487f G4888@G487e G4887@G487d G4886@G487c))))) (set! G3161@rev-map-append (lambda (G48ae@f G48af@ls G48b0@ac) (if (null? G48af@ls) G48b0@ac (G3161@rev-map-append G48ae@f (cdr G48af@ls) (cons (G48ae@f (car G48af@ls)) G48b0@ac))))) (set! G3163@build-exports (lambda (G48b4@lex*+loc* G48b5@init*) (G2da2@G2d13@build-sequence '#f (cons (G2da3@G2d15@build-void) (G3161@rev-map-append (lambda (G48b8@x) (list 'set! (cdr G48b8@x) (car G48b8@x))) G48b4@lex*+loc* G48b5@init*))))) (set! G3165@make-export-subst (lambda (G48ba@name* G48bb@id*) (map (lambda (G48be@name G48bf@id) ((lambda (G48c2@label) (begin (if (not G48c2@label) (G317d@syntax-violation '#f '"cannot export unbound identifier" G48bf@id) (void)) (cons G48be@name G48c2@label))) (G2e61@id->label G48bf@id))) G48ba@name* G48bb@id*))) (set! G3167@make-export-env/macros (lambda (G48c4@lex* G48c5@loc* G48c6@r) ((lambda (G48cb@lookup) (begin (set! G48cb@lookup (lambda (G48e8@x) ((letrec ((G48ea@f (lambda (G48ec@x G48ed@lex* G48ee@loc*) (if (pair? G48ed@lex*) (if (eq? G48ec@x (car G48ed@lex*)) (car G48ee@loc*) (G48ea@f G48ec@x (cdr G48ed@lex*) (cdr G48ee@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G48ea@f) G48e8@x G48c4@lex* G48c5@loc*))) ((letrec ((G48cc@f (lambda (G48ce@r G48cf@env G48d0@global* G48d1@macro*) (if (null? G48ce@r) (values G48cf@env G48d0@global* G48d1@macro*) ((lambda (G48d6@x) ((lambda (G48d8@label G48d9@b) ((lambda (G48dc@t) (if (memv G48dc@t '(lexical)) ((lambda (G48de@v) ((lambda (G48e0@loc G48e1@type) (G48cc@f (cdr G48ce@r) (cons (cons* G48d8@label G48e1@type G48e0@loc) G48cf@env) (cons (cons (G301a@lexical-var G48de@v) G48e0@loc) G48d0@global*) G48d1@macro*)) (G48cb@lookup (G301a@lexical-var G48de@v)) (if (G301c@lexical-mutable? G48de@v) 'mutable 'global))) (G2e6b@binding-value G48d9@b)) (if (memv G48dc@t '(local-macro)) ((lambda (G48e4@loc) (G48cc@f (cdr G48ce@r) (cons (cons* G48d8@label 'global-macro G48e4@loc) G48cf@env) G48d0@global* (cons (cons G48e4@loc (G2e6b@binding-value G48d9@b)) G48d1@macro*))) (gensym)) (if (memv G48dc@t '(local-macro!)) ((lambda (G48e6@loc) (G48cc@f (cdr G48ce@r) (cons (cons* G48d8@label 'global-macro! G48e6@loc) G48cf@env) G48d0@global* (cons (cons G48e6@loc (G2e6b@binding-value G48d9@b)) G48d1@macro*))) (gensym)) (if (memv G48dc@t '($rtd $module)) (G48cc@f (cdr G48ce@r) (cons G48d6@x G48cf@env) G48d0@global* G48d1@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e69@binding-type G48d9@b) (G2e6b@binding-value G48d9@b))))))) (G2e69@binding-type G48d9@b))) (car G48d6@x) (cdr G48d6@x))) (car G48ce@r)))))) G48cc@f) G48c6@r '() '() '()))) '#f))) (set! G3169@generate-temporaries (lambda (G48f2@ls) ((lambda (G48f4@t) ((lambda (G48f6@ls/false) (if G48f6@ls/false (apply (lambda (G48f8@ls) (map (lambda (G48fa@x) (G2e11@make-stx ((lambda (G48fc@x) (if ((lambda (G48fe@t) (if G48fe@t G48fe@t (begin '#f (string? G48fc@x)))) (symbol? G48fc@x)) (gensym G48fc@x) (gensym 't))) (G3183@syntax->datum G48fa@x)) G2dbb@top-mark* '() '())) G48f8@ls)) G48f6@ls/false) ((lambda (G4900@t) ((lambda (G4902@ls/false) (if G4902@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4902@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4900@t))) (G308a@syntax-dispatch G4900@t '_))) G48f4@t))) (G308a@syntax-dispatch G48f4@t 'each-any))) G48f2@ls))) (set! G316b@free-identifier=? (lambda (G4904@x G4905@y) (if (G2e47@id? G4904@x) (if (G2e47@id? G4905@y) (G2e4f@free-id=? G4904@x G4905@y) (assertion-violation 'free-identifier=? '"not an identifier" G4905@y)) (assertion-violation 'free-identifier=? '"not an identifier" G4904@x)))) (set! G316d@bound-identifier=? (lambda (G4908@x G4909@y) (if (G2e47@id? G4908@x) (if (G2e47@id? G4909@y) (G2e4d@bound-id=? G4908@x G4909@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4909@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G4908@x)))) (set! G316f@make-source-condition (lambda (G490c@x) ((lambda (G4916@G4911 G4918@G4913 G491a@G4912 G491f@G4910 G4921@make-source-condition G4923@G490e G4925@G490f G4927@source-condition? G4929@source-filename G492b@source-character) (begin (set! G4916@G4911 (make-record-type-descriptor '&source-information &condition-rtd 'G4914 '#f '#f '#((immutable file-name) (immutable character)))) (set! G4918@G4913 '#f) (set! G491a@G4912 (make-record-constructor-descriptor G4916@G4911 &condition-rcd G4918@G4913)) (set! G491f@G4910 (record-predicate G4916@G4911)) (set! G4921@make-source-condition (record-constructor G491a@G4912)) (set! G4923@G490e (record-accessor G4916@G4911 '0)) (set! G4925@G490f (record-accessor G4916@G4911 '1)) (set! G4927@source-condition? (condition-predicate G4916@G4911)) (set! G4929@source-filename (condition-accessor G4916@G4911 G4923@G490e)) (set! G492b@source-character (condition-accessor G4916@G4911 G4925@G490f)) (if (pair? G490c@x) (G4921@make-source-condition (car G490c@x) (cdr G490c@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3171@extract-position-condition (lambda (G492c@x) (G316f@make-source-condition (G3173@expression-position G492c@x)))) (set! G3173@expression-position (lambda (G492e@x) (if (G2e0f@stx? G492e@x) (begin '#f ((lambda (G4930@x) (if (G298e@G288e@annotation? G4930@x) (begin '#f (G298f@G2890@annotation-source G4930@x)) '#f)) (G2e13@stx-expr G492e@x))) '#f))) (set! G3175@assertion-error (lambda (G4932@expr G4933@pos) (raise (condition (G4c2a@G4b5c@make-assertion-violation) (G4c38@G4b8a@make-who-condition 'assert) (G4c0a@G4af4@make-message-condition '"assertion failed") (G4c30@G4b71@make-irritants-condition (list G4932@expr)) (G316f@make-source-condition G4933@pos))))) (set! G3177@syntax-error (lambda (G4936@x . G4938@args) (begin (if (not (for-all string? G4938@args)) (assertion-violation 'syntax-error '"invalid argument" G4938@args) (void)) (raise (condition (G4c0a@G4af4@make-message-condition (if (null? G4938@args) '"invalid syntax" (apply string-append G4938@args))) (G4c52@G4be0@make-syntax-violation (G3183@syntax->datum G4936@x) '#f) (G3171@extract-position-condition G4936@x) (G3179@extract-trace G4936@x)))))) (set! G3179@extract-trace (lambda (G493a@x) ((lambda (G4943@G493e G4945@G4940 G4947@G493f G494c@G493d G494e@make-trace G4950@G493c G4952@trace? G4954@trace-form) (begin (set! G4943@G493e (make-record-type-descriptor '&trace &condition-rtd 'G4941 '#f '#f '#((immutable form)))) (set! G4945@G4940 '#f) (set! G4947@G493f (make-record-constructor-descriptor G4943@G493e &condition-rcd G4945@G4940)) (set! G494c@G493d (record-predicate G4943@G493e)) (set! G494e@make-trace (record-constructor G4947@G493f)) (set! G4950@G493c (record-accessor G4943@G493e '0)) (set! G4952@trace? (condition-predicate G4943@G493e)) (set! G4954@trace-form (condition-accessor G4943@G493e G4950@G493c)) ((letrec ((G4955@f (lambda (G4957@x) (if (G2e0f@stx? G4957@x) (apply condition (G494e@make-trace G4957@x) (map G4955@f (G2e19@stx-ae* G4957@x))) (if (G298e@G288e@annotation? G4957@x) (G494e@make-trace (G2e11@make-stx G4957@x '() '() '())) (condition)))))) G4955@f) G493a@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G317b@syntax-violation* (lambda (G4959@who G495a@msg G495b@form G495c@condition-object) (begin (if (not (string? G495a@msg)) (assertion-violation 'syntax-violation '"message is not a string" G495a@msg) (void)) ((lambda (G4961@who) (raise (condition (if G4961@who (G4c38@G4b8a@make-who-condition G4961@who) (condition)) (G4c0a@G4af4@make-message-condition G495a@msg) G495c@condition-object (G3171@extract-position-condition G495b@form) (G3179@extract-trace G495b@form)))) (if ((lambda (G4963@t) (if G4963@t G4963@t (begin '#f (symbol? G4959@who)))) (string? G4959@who)) G4959@who (if (not G4959@who) ((lambda (G4965@t) ((lambda (G4967@ls/false) (if (if G4967@ls/false (begin '#f (apply (lambda (G4969@id) (G2e47@id? G4969@id)) G4967@ls/false)) '#f) (apply (lambda (G496b@id) (G3183@syntax->datum G496b@id)) G4967@ls/false) ((lambda (G496d@t) ((lambda (G496f@ls/false) (if (if G496f@ls/false (begin '#f (apply (lambda (G4971@id G4972@rest) (G2e47@id? G4971@id)) G496f@ls/false)) '#f) (apply (lambda (G4975@id G4976@rest) (G3183@syntax->datum G4975@id)) G496f@ls/false) ((lambda (G4979@t) ((lambda (G497b@ls/false) (if G497b@ls/false (apply (lambda () '#f) G497b@ls/false) (G317d@syntax-violation '#f '"invalid syntax" G4979@t))) (G308a@syntax-dispatch G4979@t '_))) G496d@t))) (G308a@syntax-dispatch G496d@t '(any . any)))) G4965@t))) (G308a@syntax-dispatch G4965@t 'any))) G495b@form) (assertion-violation 'syntax-violation '"invalid who argument" G4959@who))))))) (set! G317d@syntax-violation (lambda G498b ((lambda (G498c) (if (= G498c '3) (apply (lambda (G497d@who G497e@msg G497f@form) (G317d@syntax-violation G497d@who G497e@msg G497f@form '#f)) G498b) (if (= G498c '4) (apply (lambda (G4983@who G4984@msg G4985@form G4986@subform) (G317b@syntax-violation* G4983@who G4984@msg G4985@form (G4c52@G4be0@make-syntax-violation (G3183@syntax->datum G4985@form) (G3183@syntax->datum G4986@subform)))) G498b) (error 'apply '"invalid arg count")))) (length G498b)))) (set! G317f@identifier? (lambda (G498d@x) (G2e47@id? G498d@x))) (set! G3181@datum->syntax (lambda (G498f@id G4990@datum) (if (G2e47@id? G498f@id) (G2e25@datum->stx G498f@id G4990@datum) (assertion-violation 'datum->syntax '"not an identifier" G498f@id)))) (set! G3183@syntax->datum (lambda (G4993@x) (G2e5d@stx->datum G4993@x))) (set! G3185@compile-r6rs-top-level (lambda (G4995@x*) (call-with-values (lambda () (G3109@top-level-expander G4995@x*)) (lambda (G4999@G4997 G499a@G4998) ((lambda (G499d@invoke-code G499e@lib*) (lambda () (begin (for-each G2c3c@G2ad1@invoke-library G499e@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29fd@G29a5@expanded->core G499d@invoke-code)) (void)) (eval-core (G29fd@G29a5@expanded->core G499d@invoke-code))))) G499a@G4998 G4999@G4997))))) (set! G3187@pre-compile-r6rs-top-level (lambda (G49a1@x*) (call-with-values (lambda () (G3109@top-level-expander G49a1@x*)) (lambda (G49a5@G49a3 G49a6@G49a4) ((lambda (G49a9@invoke-code G49aa@lib*) (begin (for-each G2c3c@G2ad1@invoke-library G49aa@lib*) (G2997@G28a0@compile-core (G29fd@G29a5@expanded->core G49a9@invoke-code)))) G49a6@G49a4 G49a5@G49a3))))) (set! G3189@interaction-environment ((lambda (G49ad@the-env) (lambda () ((lambda (G49af@t) (if G49af@t G49af@t (begin '#f ((lambda (G49b1@lib G49b2@rib) (begin ((lambda (G49b5@subst) (begin (G2de6@set-rib-sym*! G49b2@rib (map car G49b5@subst)) (G2de8@set-rib-mark**! G49b2@rib (map (lambda (G49b7@x) G2dbb@top-mark*) G49b5@subst)) (G2dea@set-rib-label*! G49b2@rib (map cdr G49b5@subst)))) (G2c11@G2a7b@library-subst G49b1@lib)) ((lambda (G49b9@env) (begin (set! G49ad@the-env G49b9@env) G49b9@env)) (G3139@make-interaction-env G49b2@rib '() '())))) (G2c35@G2ac3@find-library-by-name '(mosh interaction)) (G2df2@make-cache-rib))))) G49ad@the-env))) '#f)) (set! G318b@top-level-context (G2999@G28a4@make-parameter '#f)) (begin (set! G4ac8@G318b@top-level-context G318b@top-level-context) (set! G4ac7@G3189@interaction-environment G3189@interaction-environment) (set! G4ac6@G3187@pre-compile-r6rs-top-level G3187@pre-compile-r6rs-top-level) (set! G4ac5@G3185@compile-r6rs-top-level G3185@compile-r6rs-top-level) (set! G4ac4@G3183@syntax->datum G3183@syntax->datum) (set! G4ac3@G3181@datum->syntax G3181@datum->syntax) (set! G4ac2@G317f@identifier? G317f@identifier?) (set! G4ac1@G317d@syntax-violation G317d@syntax-violation) (set! G4ac0@G317b@syntax-violation* G317b@syntax-violation*) (set! G4abf@G3179@extract-trace G3179@extract-trace) (set! G4abe@G3177@syntax-error G3177@syntax-error) (set! G4abd@G3175@assertion-error G3175@assertion-error) (set! G4abc@G3173@expression-position G3173@expression-position) (set! G4abb@G3171@extract-position-condition G3171@extract-position-condition) (set! G4aba@G316f@make-source-condition G316f@make-source-condition) (set! G4ab9@G316d@bound-identifier=? G316d@bound-identifier=?) (set! G4ab8@G316b@free-identifier=? G316b@free-identifier=?) (set! G4ab7@G3169@generate-temporaries G3169@generate-temporaries) (set! G4ab6@G3167@make-export-env/macros G3167@make-export-env/macros) (set! G4ab5@G3165@make-export-subst G3165@make-export-subst) (set! G4ab4@G3163@build-exports G3163@build-exports) (set! G4ab3@G3161@rev-map-append G3161@rev-map-append) (set! G4ab2@G315f@boot-library-expand G315f@boot-library-expand) (set! G4ab1@G315d@library-expander G315d@library-expander) (set! G4ab0@G315b@eval G315b@eval) (set! G4aaf@G3159@expand G3159@expand) (set! G4aae@G3157@scheme-report-environment G3157@scheme-report-environment) (set! G4aad@G3155@null-environment G3155@null-environment) (set! G4aac@G3153@environment G3153@environment) (set! G4aab@G3151@environment-symbols G3151@environment-symbols) (set! G4aaa@G314f@environment? G314f@environment?) (set! G4aa9@G314d@parse-binding G314d@parse-binding) (set! G4aa8@G314b@environment-bindings G314b@environment-bindings) (set! G4aa7@G3149@interaction-environment-symbols G3149@interaction-environment-symbols) (set! G4aa6@G3147@rp G3147@rp) (set! G4aa5@G3145@set-interaction-env-locs! G3145@set-interaction-env-locs!) (set! G4aa4@G3143@set-interaction-env-r! G3143@set-interaction-env-r!) (set! G4aa3@G3141@set-interaction-env-rib! G3141@set-interaction-env-rib!) (set! G4aa2@G313f@interaction-env-locs G313f@interaction-env-locs) (set! G4aa1@G313d@interaction-env-r G313d@interaction-env-r) (set! G4aa0@G313b@interaction-env-rib G313b@interaction-env-rib) (set! G4a9f@G3139@make-interaction-env G3139@make-interaction-env) (set! G4a9e@G3137@interaction-env? G3137@interaction-env?) (set! G4a9d@G3132@G312a G3132@G312a) (set! G4a9c@G3130@G312b G3130@G312b) (set! G4a9b@G312e@G3129 G312e@G3129) (set! G4a9a@G3128@rp G3128@rp) (set! G4a99@G3126@set-env-itc! G3126@set-env-itc!) (set! G4a98@G3124@set-env-labels! G3124@set-env-labels!) (set! G4a97@G3122@set-env-names! G3122@set-env-names!) (set! G4a96@G3120@env-itc G3120@env-itc) (set! G4a95@G311e@env-labels G311e@env-labels) (set! G4a94@G311c@env-names G311c@env-names) (set! G4a93@G311a@make-env G311a@make-env) (set! G4a92@G3118@env? G3118@env?) (set! G4a91@G3113@G310b G3113@G310b) (set! G4a90@G3111@G310c G3111@G310c) (set! G4a8f@G310f@G310a G310f@G310a) (set! G4a8e@G3109@top-level-expander G3109@top-level-expander) (set! G4a8d@G3107@parse-top-level-program G3107@parse-top-level-program) (set! G4a8c@G3105@core-library-expander G3105@core-library-expander) (set! G4a8b@G3103@library-body-expander G3103@library-body-expander) (set! G4a8a@G3101@chi-interaction-expr G3101@chi-interaction-expr) (set! G4a89@G30ff@chi-library-internal G30ff@chi-library-internal) (set! G4a88@G30fd@imp-collector G30fd@imp-collector) (set! G4a87@G30fb@vis-collector G30fb@vis-collector) (set! G4a86@G30f9@inv-collector G30f9@inv-collector) (set! G4a85@G30f7@make-collector G30f7@make-collector) (set! G4a84@G30f5@make-top-rib G30f5@make-top-rib) (set! G4a83@G30f3@parse-import-spec* G30f3@parse-import-spec*) (set! G4a82@G30f1@parse-library G30f1@parse-library) (set! G4a81@G30ef@parse-library-name G30ef@parse-library-name) (set! G4a80@G30ed@parse-exports G30ed@parse-exports) (set! G4a7f@G30eb@expand-transformer G30eb@expand-transformer) (set! G4a7e@G30e9@chi-body* G30e9@chi-body*) (set! G4a7d@G30e7@chi-internal-module G30e7@chi-internal-module) (set! G4a7c@G30e5@module-interface-exp-id* G30e5@module-interface-exp-id*) (set! G4a7b@G30e3@set-module-interface-exp-lab-vec! G30e3@set-module-interface-exp-lab-vec!) (set! G4a7a@G30e1@set-module-interface-exp-id-vec! G30e1@set-module-interface-exp-id-vec!) (set! G4a79@G30df@set-module-interface-first-mark! G30df@set-module-interface-first-mark!) (set! G4a78@G30dd@module-interface-exp-lab-vec G30dd@module-interface-exp-lab-vec) (set! G4a77@G30db@module-interface-exp-id-vec G30db@module-interface-exp-id-vec) (set! G4a76@G30d9@module-interface-first-mark G30d9@module-interface-first-mark) (set! G4a75@G30d7@make-module-interface G30d7@make-module-interface) (set! G4a74@G30d5@module-interface? G30d5@module-interface?) (set! G4a73@G30d0@G30c8 G30d0@G30c8) (set! G4a72@G30ce@G30c9 G30ce@G30c9) (set! G4a71@G30cc@G30c7 G30cc@G30c7) (set! G4a70@G30c6@parse-module G30c6@parse-module) (set! G4a6f@G30c4@chi-internal G30c4@chi-internal) (set! G4a6e@G30c2@find-dups G30c2@find-dups) (set! G4a6d@G30c0@find-bound=? G30c0@find-bound=?) (set! G4a6c@G30be@chi-rhs* G30be@chi-rhs*) (set! G4a6b@G30bc@expand-interaction-rhs*/init* G30bc@expand-interaction-rhs*/init*) (set! G4a6a@G30ba@chi-rhs G30ba@chi-rhs) (set! G4a69@G30b8@chi-defun G30b8@chi-defun) (set! G4a68@G30b6@chi-lambda-clause* G30b6@chi-lambda-clause*) (set! G4a67@G30b4@chi-lambda-clause G30b4@chi-lambda-clause) (set! G4a66@G30b2@verify-formals G30b2@verify-formals) (set! G4a65@G30b0@chi-set! G30b0@chi-set!) (set! G4a64@G30ae@chi-expr G30ae@chi-expr) (set! G4a63@G30ac@chi-application G30ac@chi-application) (set! G4a62@G30aa@chi-expr* G30aa@chi-expr*) (set! G4a61@G30a8@chi-global-macro G30a8@chi-global-macro) (set! G4a60@G30a6@chi-local-macro G30a6@chi-local-macro) (set! G4a5f@G30a4@chi-macro G30a4@chi-macro) (set! G4a5e@G30a2@do-macro-call G30a2@do-macro-call) (set! G4a5d@G30a0@local-macro-transformer G30a0@local-macro-transformer) (set! G4a5c@G309e@macro-transformer G309e@macro-transformer) (set! G4a5b@G309c@symbol-macro G309c@symbol-macro) (set! G4a5a@G309a@file-options-macro G309a@file-options-macro) (set! G4a59@G3098@core-macro-transformer G3098@core-macro-transformer) (set! G4a58@G3096@syntax-transformer G3096@syntax-transformer) (set! G4a57@G3094@ellipsis-map G3094@ellipsis-map) (set! G4a56@G3092@syntax-case-transformer G3092@syntax-case-transformer) (set! G4a55@G3090@verify-literals G3090@verify-literals) (set! G4a54@G308e@underscore? G308e@underscore?) (set! G4a53@G308c@ellipsis? G308c@ellipsis?) (set! G4a52@G308a@syntax-dispatch G308a@syntax-dispatch) (set! G4a51@G3088@convert-pattern G3088@convert-pattern) (set! G4a50@G3086@foreign-call-transformer G3086@foreign-call-transformer) (set! G4a4f@G3084@parameterize-macro G3084@parameterize-macro) (set! G4a4e@G3082@incorrect-usage-macro G3082@incorrect-usage-macro) (set! G4a4d@G3080@define-condition-type-macro G3080@define-condition-type-macro) (set! G4a4c@G307e@define-record-type-macro G307e@define-record-type-macro) (set! G4a4b@G307c@define-struct-macro G307c@define-struct-macro) (set! G4a4a@G307a@quasisyntax-macro G307a@quasisyntax-macro) (set! G4a49@G3078@quasiquote-macro G3078@quasiquote-macro) (set! G4a48@G3076@syntax-rules-macro G3076@syntax-rules-macro) (set! G4a47@G3074@include-into-macro G3074@include-into-macro) (set! G4a46@G3072@include-macro G3072@include-macro) (set! G4a45@G3070@do-include G3070@do-include) (set! G4a44@G306e@cond-macro G306e@cond-macro) (set! G4a43@G306c@and-macro G306c@and-macro) (set! G4a42@G306a@or-macro G306a@or-macro) (set! G4a41@G3068@let*-macro G3068@let*-macro) (set! G4a40@G3066@do-macro G3066@do-macro) (set! G4a3f@G3064@identifier-syntax-macro G3064@identifier-syntax-macro) (set! G4a3e@G3062@endianness-macro G3062@endianness-macro) (set! G4a3d@G3060@assert-macro G3060@assert-macro) (set! G4a3c@G305e@delay-macro G305e@delay-macro) (set! G4a3b@G305c@time-macro G305c@time-macro) (set! G4a3a@G305a@define-enumeration-macro G305a@define-enumeration-macro) (set! G4a39@G3058@guard-macro G3058@guard-macro) (set! G4a38@G3056@trace-letrec-syntax-macro G3056@trace-letrec-syntax-macro) (set! G4a37@G3054@trace-let-syntax-macro G3054@trace-let-syntax-macro) (set! G4a36@G3052@trace-let/rec-syntax G3052@trace-let/rec-syntax) (set! G4a35@G3050@trace-define-syntax-macro G3050@trace-define-syntax-macro) (set! G4a34@G304e@trace-define-macro G304e@trace-define-macro) (set! G4a33@G304c@trace-lambda-macro G304c@trace-lambda-macro) (set! G4a32@G304a@let*-values-macro G304a@let*-values-macro) (set! G4a31@G3048@let-values-macro G3048@let-values-macro) (set! G4a30@G3046@let-macro G3046@let-macro) (set! G4a2f@G3044@invalid-fmls-error G3044@invalid-fmls-error) (set! G4a2e@G3042@with-syntax-macro G3042@with-syntax-macro) (set! G4a2d@G3040@bless G3040@bless) (set! G4a2c@G303e@lambda-transformer G303e@lambda-transformer) (set! G4a2b@G303c@case-lambda-transformer G303c@case-lambda-transformer) (set! G4a2a@G303a@quote-transformer G303a@quote-transformer) (set! G4a29@G3038@case-macro G3038@case-macro) (set! G4a28@G3036@if-transformer G3036@if-transformer) (set! G4a27@G3034@unless-macro G3034@unless-macro) (set! G4a26@G3032@when-macro G3032@when-macro) (set! G4a25@G3030@record-constructor-descriptor-transformer G3030@record-constructor-descriptor-transformer) (set! G4a24@G302e@record-type-descriptor-transformer G302e@record-type-descriptor-transformer) (set! G4a23@G302c@type-descriptor-transformer G302c@type-descriptor-transformer) (set! G4a22@G302a@fluid-let-syntax-transformer G302a@fluid-let-syntax-transformer) (set! G4a21@G3028@letrec*-transformer G3028@letrec*-transformer) (set! G4a20@G3026@letrec-transformer G3026@letrec-transformer) (set! G4a1f@G3024@letrec-helper G3024@letrec-helper) (set! G4a1e@G3022@add-lexicals G3022@add-lexicals) (set! G4a1d@G3020@add-lexical G3020@add-lexical) (set! G4a1c@G301e@set-lexical-mutable! G301e@set-lexical-mutable!) (set! G4a1b@G301c@lexical-mutable? G301c@lexical-mutable?) (set! G4a1a@G301a@lexical-var G301a@lexical-var) (set! G4a19@G3018@scheme-stx G3018@scheme-stx) (set! G4a18@G3016@scheme-stx-hashtable G3016@scheme-stx-hashtable) (set! G4a17@G3014@parse-define-syntax G3014@parse-define-syntax) (set! G4a16@G3012@parse-define G3012@parse-define) (set! G4a15@G2e8e@make-eval-transformer G2e8e@make-eval-transformer) (set! G4a14@G2e8c@variable-transformer-procedure G2e8c@variable-transformer-procedure) (set! G4a13@G2e8a@variable-transformer? G2e8a@variable-transformer?) (set! G4a12@G2e88@make-variable-transformer G2e88@make-variable-transformer) (set! G4a11@G2e86@sanitize-binding G2e86@sanitize-binding) (set! G4a10@G2e6f@syntax-type G2e6f@syntax-type) (set! G4a0f@G2e6d@raise-unbound-error G2e6d@raise-unbound-error) (set! G4a0e@G2e6b@binding-value G2e6b@binding-value) (set! G4a0d@G2e69@binding-type G2e69@binding-type) (set! G4a0c@G2e67@make-binding G2e67@make-binding) (set! G4a0b@G2e65@label->binding G2e65@label->binding) (set! G4a0a@G2e63@id->real-label G2e63@id->real-label) (set! G4a09@G2e61@id->label G2e61@id->label) (set! G4a08@G2e5f@same-marks*? G2e5f@same-marks*?) (set! G4a07@G2e5d@stx->datum G2e5d@stx->datum) (set! G4a06@G2e5b@strip G2e5b@strip) (set! G4a05@G2e59@strip-annotations G2e59@strip-annotations) (set! G4a04@G2e57@self-evaluating? G2e57@self-evaluating?) (set! G4a03@G2e55@bound-id-member? G2e55@bound-id-member?) (set! G4a02@G2e53@distinct-bound-ids? G2e53@distinct-bound-ids?) (set! G4a01@G2e51@valid-bound-ids? G2e51@valid-bound-ids?) (set! G4a00@G2e4f@free-id=? G2e4f@free-id=?) (set! G49ff@G2e4d@bound-id=? G2e4d@bound-id=?) (set! G49fe@G2e4b@same-marks? G2e4b@same-marks?) (set! G49fd@G2e49@id->sym G2e49@id->sym) (set! G49fc@G2e47@id? G2e47@id?) (set! G49fb@G2e45@syntax->list G2e45@syntax->list) (set! G49fa@G2e43@syntax-cdr G2e43@syntax-cdr) (set! G49f9@G2e41@syntax-car G2e41@syntax-car) (set! G49f8@G2e3f@syntax-list? G2e3f@syntax-list?) (set! G49f7@G2e3d@syntax-null? G2e3d@syntax-null?) (set! G49f6@G2e3b@syntax-vector? G2e3b@syntax-vector?) (set! G49f5@G2e39@syntax-pair? G2e39@syntax-pair?) (set! G49f4@G2e37@syntax-vector->list G2e37@syntax-vector->list) (set! G49f3@G2e35@syntax-kind? G2e35@syntax-kind?) (set! G49f2@G2e33@add-subst G2e33@add-subst) (set! G49f1@G2e31@add-mark G2e31@add-mark) (set! G49f0@G2e2f@mkstx G2e2f@mkstx) (set! G49ef@G2e2d@join-wraps G2e2d@join-wraps) (set! G49ee@G2e2b@anti-mark? G2e2b@anti-mark?) (set! G49ed@G2e29@anti-mark G2e29@anti-mark) (set! G49ec@G2e27@gen-mark G2e27@gen-mark) (set! G49eb@G2e25@datum->stx G2e25@datum->stx) (set! G49ea@G2e23@rp G2e23@rp) (set! G49e9@G2e21@set-stx-ae*! G2e21@set-stx-ae*!) (set! G49e8@G2e1f@set-stx-subst*! G2e1f@set-stx-subst*!) (set! G49e7@G2e1d@set-stx-mark*! G2e1d@set-stx-mark*!) (set! G49e6@G2e1b@set-stx-expr! G2e1b@set-stx-expr!) (set! G49e5@G2e19@stx-ae* G2e19@stx-ae*) (set! G49e4@G2e17@stx-subst* G2e17@stx-subst*) (set! G49e3@G2e15@stx-mark* G2e15@stx-mark*) (set! G49e2@G2e13@stx-expr G2e13@stx-expr) (set! G49e1@G2e11@make-stx G2e11@make-stx) (set! G49e0@G2e0f@stx? G2e0f@stx?) (set! G49df@G2e0a@G2e02 G2e0a@G2e02) (set! G49de@G2e08@G2e03 G2e08@G2e03) (set! G49dd@G2e06@G2e01 G2e06@G2e01) (set! G49dc@G2e00@make-full-rib G2e00@make-full-rib) (set! G49db@G2dfe@unseal-rib! G2dfe@unseal-rib!) (set! G49da@G2dfc@seal-rib! G2dfc@seal-rib!) (set! G49d9@G2dfa@make-rib-map G2dfa@make-rib-map) (set! G49d8@G2df8@extend-rib/nc! G2df8@extend-rib/nc!) (set! G49d7@G2df6@extend-rib! G2df6@extend-rib!) (set! G49d6@G2df4@find-label G2df4@find-label) (set! G49d5@G2df2@make-cache-rib G2df2@make-cache-rib) (set! G49d4@G2df0@make-empty-rib G2df0@make-empty-rib) (set! G49d3@G2dee@set-rib-cache! G2dee@set-rib-cache!) (set! G49d2@G2dec@set-rib-sealed/freq! G2dec@set-rib-sealed/freq!) (set! G49d1@G2dea@set-rib-label*! G2dea@set-rib-label*!) (set! G49d0@G2de8@set-rib-mark**! G2de8@set-rib-mark**!) (set! G49cf@G2de6@set-rib-sym*! G2de6@set-rib-sym*!) (set! G49ce@G2de4@rib-cache G2de4@rib-cache) (set! G49cd@G2de2@rib-sealed/freq G2de2@rib-sealed/freq) (set! G49cc@G2de0@rib-label* G2de0@rib-label*) (set! G49cb@G2dde@rib-mark** G2dde@rib-mark**) (set! G49ca@G2ddc@rib-sym* G2ddc@rib-sym*) (set! G49c9@G2dda@make-rib G2dda@make-rib) (set! G49c8@G2dd8@rib? G2dd8@rib?) (set! G49c7@G2dd3@G2dcb G2dd3@G2dcb) (set! G49c6@G2dd1@G2dcc G2dd1@G2dcc) (set! G49c5@G2dcf@G2dca G2dcf@G2dca) (set! G49c4@G2dc9@gen-define-label G2dc9@gen-define-label) (set! G49c3@G2dc7@gen-define-label+loc G2dc7@gen-define-label+loc) (set! G49c2@G2dc5@gen-top-level-label G2dc5@gen-top-level-label) (set! G49c1@G2dc3@gen-label G2dc3@gen-label) (set! G49c0@G2dc1@gen-global G2dc1@gen-global) (set! G49bf@G2dbf@gen-lexical G2dbf@gen-lexical) (set! G49be@G2dbd@top-marked? G2dbd@top-marked?) (set! G49bd@G2dbb@top-mark* G2dbb@top-mark*) (set! G49bc@G2db6@set-union G2db6@set-union) (set! G49bb@G2db4@set-cons G2db4@set-cons) (G2c32@G2abd@current-library-expander G315d@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4ad2@G4acd G4ad4@G4acf G4ad6@G4ace G4adb@&condition? G4add@make-&condition G4adf@&condition-rtd G4ae1@&condition-rcd G4ae9@G4ae4 G4aeb@G4ae6 G4aed@G4ae5 G4af2@G4ae3 G4af4@make-message-condition G4af6@G4ae2 G4af8@message-condition? G4afa@condition-message G4b01@G4afc G4b03@G4afe G4b05@G4afd G4b0a@G4afb G4b0c@make-warning G4b0e@warning? G4b15@G4b10 G4b17@G4b12 G4b19@G4b11 G4b1e@G4b0f G4b20@make-serious-condition G4b22@serious-condition? G4b29@G4b24 G4b2b@G4b26 G4b2d@G4b25 G4b32@G4b23 G4b34@make-error G4b36@error? G4b3d@G4b38 G4b3f@G4b3a G4b41@G4b39 G4b46@G4b37 G4b48@make-violation G4b4a@violation? G4b51@G4b4c G4b53@G4b4e G4b55@G4b4d G4b5a@G4b4b G4b5c@make-assertion-violation G4b5e@assertion-violation? G4b66@G4b61 G4b68@G4b63 G4b6a@G4b62 G4b6f@G4b60 G4b71@make-irritants-condition G4b73@G4b5f G4b75@irritants-condition? G4b77@condition-irritants G4b7f@G4b7a G4b81@G4b7c G4b83@G4b7b G4b88@G4b79 G4b8a@make-who-condition G4b8c@G4b78 G4b8e@who-condition? G4b90@condition-who G4b97@G4b92 G4b99@G4b94 G4b9b@G4b93 G4ba0@G4b91 G4ba2@make-non-continuable-violation G4ba4@non-continuable-violation? G4bab@G4ba6 G4bad@G4ba8 G4baf@G4ba7 G4bb4@G4ba5 G4bb6@make-implementation-restriction-violation G4bb8@implementation-restriction-violation? G4bbf@G4bba G4bc1@G4bbc G4bc3@G4bbb G4bc8@G4bb9 G4bca@make-lexical-violation G4bcc@lexical-violation? G4bd5@G4bd0 G4bd7@G4bd2 G4bd9@G4bd1 G4bde@G4bcf G4be0@make-syntax-violation G4be2@G4bcd G4be4@G4bce G4be6@syntax-violation? G4be8@syntax-violation-form G4bea@syntax-violation-subform G4bf1@G4bec G4bf3@G4bee G4bf5@G4bed G4bfa@G4beb G4bfc@make-undefined-violation G4bfe@undefined-violation?) (begin (set! G4ad2@G4acd (make-record-type-descriptor '&condition '#f 'G4ad0 '#f '#f '#())) (set! G4ad4@G4acf '#f) (set! G4ad6@G4ace (make-record-constructor-descriptor G4ad2@G4acd '#f G4ad4@G4acf)) (set! G4adb@&condition? (record-predicate G4ad2@G4acd)) (set! G4add@make-&condition (record-constructor G4ad6@G4ace)) (set! G4adf@&condition-rtd G4ad2@G4acd) (set! G4ae1@&condition-rcd G4ad6@G4ace) (set! G4ae9@G4ae4 (make-record-type-descriptor '&message G4ad2@G4acd 'G4ae7 '#f '#f '#((immutable message)))) (set! G4aeb@G4ae6 '#f) (set! G4aed@G4ae5 (make-record-constructor-descriptor G4ae9@G4ae4 G4ad6@G4ace G4aeb@G4ae6)) (set! G4af2@G4ae3 (record-predicate G4ae9@G4ae4)) (set! G4af4@make-message-condition (record-constructor G4aed@G4ae5)) (set! G4af6@G4ae2 (record-accessor G4ae9@G4ae4 '0)) (set! G4af8@message-condition? (condition-predicate G4ae9@G4ae4)) (set! G4afa@condition-message (condition-accessor G4ae9@G4ae4 G4af6@G4ae2)) (set! G4b01@G4afc (make-record-type-descriptor '&warning G4ad2@G4acd 'G4aff '#f '#f '#())) (set! G4b03@G4afe '#f) (set! G4b05@G4afd (make-record-constructor-descriptor G4b01@G4afc G4ad6@G4ace G4b03@G4afe)) (set! G4b0a@G4afb (record-predicate G4b01@G4afc)) (set! G4b0c@make-warning (record-constructor G4b05@G4afd)) (set! G4b0e@warning? (condition-predicate G4b01@G4afc)) (set! G4b15@G4b10 (make-record-type-descriptor '&serious G4ad2@G4acd 'G4b13 '#f '#f '#())) (set! G4b17@G4b12 '#f) (set! G4b19@G4b11 (make-record-constructor-descriptor G4b15@G4b10 G4ad6@G4ace G4b17@G4b12)) (set! G4b1e@G4b0f (record-predicate G4b15@G4b10)) (set! G4b20@make-serious-condition (record-constructor G4b19@G4b11)) (set! G4b22@serious-condition? (condition-predicate G4b15@G4b10)) (set! G4b29@G4b24 (make-record-type-descriptor '&error G4b15@G4b10 'G4b27 '#f '#f '#())) (set! G4b2b@G4b26 '#f) (set! G4b2d@G4b25 (make-record-constructor-descriptor G4b29@G4b24 G4b19@G4b11 G4b2b@G4b26)) (set! G4b32@G4b23 (record-predicate G4b29@G4b24)) (set! G4b34@make-error (record-constructor G4b2d@G4b25)) (set! G4b36@error? (condition-predicate G4b29@G4b24)) (set! G4b3d@G4b38 (make-record-type-descriptor '&violation G4b15@G4b10 'G4b3b '#f '#f '#())) (set! G4b3f@G4b3a '#f) (set! G4b41@G4b39 (make-record-constructor-descriptor G4b3d@G4b38 G4b19@G4b11 G4b3f@G4b3a)) (set! G4b46@G4b37 (record-predicate G4b3d@G4b38)) (set! G4b48@make-violation (record-constructor G4b41@G4b39)) (set! G4b4a@violation? (condition-predicate G4b3d@G4b38)) (set! G4b51@G4b4c (make-record-type-descriptor '&assertion G4b3d@G4b38 'G4b4f '#f '#f '#())) (set! G4b53@G4b4e '#f) (set! G4b55@G4b4d (make-record-constructor-descriptor G4b51@G4b4c G4b41@G4b39 G4b53@G4b4e)) (set! G4b5a@G4b4b (record-predicate G4b51@G4b4c)) (set! G4b5c@make-assertion-violation (record-constructor G4b55@G4b4d)) (set! G4b5e@assertion-violation? (condition-predicate G4b51@G4b4c)) (set! G4b66@G4b61 (make-record-type-descriptor '&irritants G4ad2@G4acd 'G4b64 '#f '#f '#((immutable irritants)))) (set! G4b68@G4b63 '#f) (set! G4b6a@G4b62 (make-record-constructor-descriptor G4b66@G4b61 G4ad6@G4ace G4b68@G4b63)) (set! G4b6f@G4b60 (record-predicate G4b66@G4b61)) (set! G4b71@make-irritants-condition (record-constructor G4b6a@G4b62)) (set! G4b73@G4b5f (record-accessor G4b66@G4b61 '0)) (set! G4b75@irritants-condition? (condition-predicate G4b66@G4b61)) (set! G4b77@condition-irritants (condition-accessor G4b66@G4b61 G4b73@G4b5f)) (set! G4b7f@G4b7a (make-record-type-descriptor '&who G4ad2@G4acd 'G4b7d '#f '#f '#((immutable who)))) (set! G4b81@G4b7c '#f) (set! G4b83@G4b7b (make-record-constructor-descriptor G4b7f@G4b7a G4ad6@G4ace G4b81@G4b7c)) (set! G4b88@G4b79 (record-predicate G4b7f@G4b7a)) (set! G4b8a@make-who-condition (record-constructor G4b83@G4b7b)) (set! G4b8c@G4b78 (record-accessor G4b7f@G4b7a '0)) (set! G4b8e@who-condition? (condition-predicate G4b7f@G4b7a)) (set! G4b90@condition-who (condition-accessor G4b7f@G4b7a G4b8c@G4b78)) (set! G4b97@G4b92 (make-record-type-descriptor '&non-continuable G4b3d@G4b38 'G4b95 '#f '#f '#())) (set! G4b99@G4b94 '#f) (set! G4b9b@G4b93 (make-record-constructor-descriptor G4b97@G4b92 G4b41@G4b39 G4b99@G4b94)) (set! G4ba0@G4b91 (record-predicate G4b97@G4b92)) (set! G4ba2@make-non-continuable-violation (record-constructor G4b9b@G4b93)) (set! G4ba4@non-continuable-violation? (condition-predicate G4b97@G4b92)) (set! G4bab@G4ba6 (make-record-type-descriptor '&implementation-restriction G4b3d@G4b38 'G4ba9 '#f '#f '#())) (set! G4bad@G4ba8 '#f) (set! G4baf@G4ba7 (make-record-constructor-descriptor G4bab@G4ba6 G4b41@G4b39 G4bad@G4ba8)) (set! G4bb4@G4ba5 (record-predicate G4bab@G4ba6)) (set! G4bb6@make-implementation-restriction-violation (record-constructor G4baf@G4ba7)) (set! G4bb8@implementation-restriction-violation? (condition-predicate G4bab@G4ba6)) (set! G4bbf@G4bba (make-record-type-descriptor '&lexical G4b3d@G4b38 'G4bbd '#f '#f '#())) (set! G4bc1@G4bbc '#f) (set! G4bc3@G4bbb (make-record-constructor-descriptor G4bbf@G4bba G4b41@G4b39 G4bc1@G4bbc)) (set! G4bc8@G4bb9 (record-predicate G4bbf@G4bba)) (set! G4bca@make-lexical-violation (record-constructor G4bc3@G4bbb)) (set! G4bcc@lexical-violation? (condition-predicate G4bbf@G4bba)) (set! G4bd5@G4bd0 (make-record-type-descriptor '&syntax G4b3d@G4b38 'G4bd3 '#f '#f '#((immutable form) (immutable subform)))) (set! G4bd7@G4bd2 '#f) (set! G4bd9@G4bd1 (make-record-constructor-descriptor G4bd5@G4bd0 G4b41@G4b39 G4bd7@G4bd2)) (set! G4bde@G4bcf (record-predicate G4bd5@G4bd0)) (set! G4be0@make-syntax-violation (record-constructor G4bd9@G4bd1)) (set! G4be2@G4bcd (record-accessor G4bd5@G4bd0 '0)) (set! G4be4@G4bce (record-accessor G4bd5@G4bd0 '1)) (set! G4be6@syntax-violation? (condition-predicate G4bd5@G4bd0)) (set! G4be8@syntax-violation-form (condition-accessor G4bd5@G4bd0 G4be2@G4bcd)) (set! G4bea@syntax-violation-subform (condition-accessor G4bd5@G4bd0 G4be4@G4bce)) (set! G4bf1@G4bec (make-record-type-descriptor '&undefined G4b3d@G4b38 'G4bef '#f '#f '#())) (set! G4bf3@G4bee '#f) (set! G4bf5@G4bed (make-record-constructor-descriptor G4bf1@G4bec G4b41@G4b39 G4bf3@G4bee)) (set! G4bfa@G4beb (record-predicate G4bf1@G4bec)) (set! G4bfc@make-undefined-violation (record-constructor G4bf5@G4bed)) (set! G4bfe@undefined-violation? (condition-predicate G4bf1@G4bec)) (begin (set! G4c5d@G4bfe@undefined-violation? G4bfe@undefined-violation?) (set! G4c5c@G4bfc@make-undefined-violation G4bfc@make-undefined-violation) (set! G4c5b@G4bfa@G4beb G4bfa@G4beb) (set! G4c5a@G4bf5@G4bed G4bf5@G4bed) (set! G4c59@G4bf3@G4bee G4bf3@G4bee) (set! G4c58@G4bf1@G4bec G4bf1@G4bec) (set! G4c57@G4bea@syntax-violation-subform G4bea@syntax-violation-subform) (set! G4c56@G4be8@syntax-violation-form G4be8@syntax-violation-form) (set! G4c55@G4be6@syntax-violation? G4be6@syntax-violation?) (set! G4c54@G4be4@G4bce G4be4@G4bce) (set! G4c53@G4be2@G4bcd G4be2@G4bcd) (set! G4c52@G4be0@make-syntax-violation G4be0@make-syntax-violation) (set! G4c51@G4bde@G4bcf G4bde@G4bcf) (set! G4c50@G4bd9@G4bd1 G4bd9@G4bd1) (set! G4c4f@G4bd7@G4bd2 G4bd7@G4bd2) (set! G4c4e@G4bd5@G4bd0 G4bd5@G4bd0) (set! G4c4d@G4bcc@lexical-violation? G4bcc@lexical-violation?) (set! G4c4c@G4bca@make-lexical-violation G4bca@make-lexical-violation) (set! G4c4b@G4bc8@G4bb9 G4bc8@G4bb9) (set! G4c4a@G4bc3@G4bbb G4bc3@G4bbb) (set! G4c49@G4bc1@G4bbc G4bc1@G4bbc) (set! G4c48@G4bbf@G4bba G4bbf@G4bba) (set! G4c47@G4bb8@implementation-restriction-violation? G4bb8@implementation-restriction-violation?) (set! G4c46@G4bb6@make-implementation-restriction-violation G4bb6@make-implementation-restriction-violation) (set! G4c45@G4bb4@G4ba5 G4bb4@G4ba5) (set! G4c44@G4baf@G4ba7 G4baf@G4ba7) (set! G4c43@G4bad@G4ba8 G4bad@G4ba8) (set! G4c42@G4bab@G4ba6 G4bab@G4ba6) (set! G4c41@G4ba4@non-continuable-violation? G4ba4@non-continuable-violation?) (set! G4c40@G4ba2@make-non-continuable-violation G4ba2@make-non-continuable-violation) (set! G4c3f@G4ba0@G4b91 G4ba0@G4b91) (set! G4c3e@G4b9b@G4b93 G4b9b@G4b93) (set! G4c3d@G4b99@G4b94 G4b99@G4b94) (set! G4c3c@G4b97@G4b92 G4b97@G4b92) (set! G4c3b@G4b90@condition-who G4b90@condition-who) (set! G4c3a@G4b8e@who-condition? G4b8e@who-condition?) (set! G4c39@G4b8c@G4b78 G4b8c@G4b78) (set! G4c38@G4b8a@make-who-condition G4b8a@make-who-condition) (set! G4c37@G4b88@G4b79 G4b88@G4b79) (set! G4c36@G4b83@G4b7b G4b83@G4b7b) (set! G4c35@G4b81@G4b7c G4b81@G4b7c) (set! G4c34@G4b7f@G4b7a G4b7f@G4b7a) (set! G4c33@G4b77@condition-irritants G4b77@condition-irritants) (set! G4c32@G4b75@irritants-condition? G4b75@irritants-condition?) (set! G4c31@G4b73@G4b5f G4b73@G4b5f) (set! G4c30@G4b71@make-irritants-condition G4b71@make-irritants-condition) (set! G4c2f@G4b6f@G4b60 G4b6f@G4b60) (set! G4c2e@G4b6a@G4b62 G4b6a@G4b62) (set! G4c2d@G4b68@G4b63 G4b68@G4b63) (set! G4c2c@G4b66@G4b61 G4b66@G4b61) (set! G4c2b@G4b5e@assertion-violation? G4b5e@assertion-violation?) (set! G4c2a@G4b5c@make-assertion-violation G4b5c@make-assertion-violation) (set! G4c29@G4b5a@G4b4b G4b5a@G4b4b) (set! G4c28@G4b55@G4b4d G4b55@G4b4d) (set! G4c27@G4b53@G4b4e G4b53@G4b4e) (set! G4c26@G4b51@G4b4c G4b51@G4b4c) (set! G4c25@G4b4a@violation? G4b4a@violation?) (set! G4c24@G4b48@make-violation G4b48@make-violation) (set! G4c23@G4b46@G4b37 G4b46@G4b37) (set! G4c22@G4b41@G4b39 G4b41@G4b39) (set! G4c21@G4b3f@G4b3a G4b3f@G4b3a) (set! G4c20@G4b3d@G4b38 G4b3d@G4b38) (set! G4c1f@G4b36@error? G4b36@error?) (set! G4c1e@G4b34@make-error G4b34@make-error) (set! G4c1d@G4b32@G4b23 G4b32@G4b23) (set! G4c1c@G4b2d@G4b25 G4b2d@G4b25) (set! G4c1b@G4b2b@G4b26 G4b2b@G4b26) (set! G4c1a@G4b29@G4b24 G4b29@G4b24) (set! G4c19@G4b22@serious-condition? G4b22@serious-condition?) (set! G4c18@G4b20@make-serious-condition G4b20@make-serious-condition) (set! G4c17@G4b1e@G4b0f G4b1e@G4b0f) (set! G4c16@G4b19@G4b11 G4b19@G4b11) (set! G4c15@G4b17@G4b12 G4b17@G4b12) (set! G4c14@G4b15@G4b10 G4b15@G4b10) (set! G4c13@G4b0e@warning? G4b0e@warning?) (set! G4c12@G4b0c@make-warning G4b0c@make-warning) (set! G4c11@G4b0a@G4afb G4b0a@G4afb) (set! G4c10@G4b05@G4afd G4b05@G4afd) (set! G4c0f@G4b03@G4afe G4b03@G4afe) (set! G4c0e@G4b01@G4afc G4b01@G4afc) (set! G4c0d@G4afa@condition-message G4afa@condition-message) (set! G4c0c@G4af8@message-condition? G4af8@message-condition?) (set! G4c0b@G4af6@G4ae2 G4af6@G4ae2) (set! G4c0a@G4af4@make-message-condition G4af4@make-message-condition) (set! G4c09@G4af2@G4ae3 G4af2@G4ae3) (set! G4c08@G4aed@G4ae5 G4aed@G4ae5) (set! G4c07@G4aeb@G4ae6 G4aeb@G4ae6) (set! G4c06@G4ae9@G4ae4 G4ae9@G4ae4) (set! G4c05@G4ae1@&condition-rcd G4ae1@&condition-rcd) (set! G4c04@G4adf@&condition-rtd G4adf@&condition-rtd) (set! G4c03@G4add@make-&condition G4add@make-&condition) (set! G4c02@G4adb@&condition? G4adb@&condition?) (set! G4c01@G4ad6@G4ace G4ad6@G4ace) (set! G4c00@G4ad4@G4acf G4ad4@G4acf) (set! G4bff@G4ad2@G4acd G4ad2@G4acd)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4c65@G4c60 G4c67@G4c62 G4c69@G4c61 G4c6e@G4c5f G4c70@make-i/o-error G4c72@i/o-error? G4c79@G4c74 G4c7b@G4c76 G4c7d@G4c75 G4c82@G4c73 G4c84@make-i/o-read-error G4c86@i/o-read-error? G4c8d@G4c88 G4c8f@G4c8a G4c91@G4c89 G4c96@G4c87 G4c98@make-i/o-write-error G4c9a@i/o-write-error? G4ca2@G4c9d G4ca4@G4c9f G4ca6@G4c9e G4cab@G4c9c G4cad@make-i/o-invalid-position-error G4caf@G4c9b G4cb1@i/o-invalid-position-error? G4cb3@i/o-error-position G4cbb@G4cb6 G4cbd@G4cb8 G4cbf@G4cb7 G4cc4@G4cb5 G4cc6@make-i/o-filename-error G4cc8@G4cb4 G4cca@i/o-filename-error? G4ccc@i/o-error-filename G4cd3@G4cce G4cd5@G4cd0 G4cd7@G4ccf G4cdc@G4ccd G4cde@make-i/o-file-protection-error G4ce0@i/o-file-protection-error? G4ce7@G4ce2 G4ce9@G4ce4 G4ceb@G4ce3 G4cf0@G4ce1 G4cf2@make-i/o-file-is-read-only-error G4cf4@i/o-file-is-read-only-error? G4cfb@G4cf6 G4cfd@G4cf8 G4cff@G4cf7 G4d04@G4cf5 G4d06@make-i/o-file-already-exists-error G4d08@i/o-file-already-exists-error? G4d0f@G4d0a G4d11@G4d0c G4d13@G4d0b G4d18@G4d09 G4d1a@make-i/o-file-does-not-exist-error G4d1c@i/o-file-does-not-exist-error? G4d24@G4d1f G4d26@G4d21 G4d28@G4d20 G4d2d@G4d1e G4d2f@make-i/o-port-error G4d31@G4d1d G4d33@i/o-port-error? G4d35@i/o-error-port G4d3c@G4d37 G4d3e@G4d39 G4d40@G4d38 G4d45@G4d36 G4d47@make-i/o-decoding-error G4d49@i/o-decoding-error? G4d51@G4d4c G4d53@G4d4e G4d55@G4d4d G4d5a@G4d4b G4d5c@make-i/o-encoding-error G4d5e@G4d4a G4d60@i/o-encoding-error? G4d62@i/o-encoding-error-char) (begin (set! G4c65@G4c60 (make-record-type-descriptor '&i/o &error-rtd 'G4c63 '#f '#f '#())) (set! G4c67@G4c62 '#f) (set! G4c69@G4c61 (make-record-constructor-descriptor G4c65@G4c60 &error-rcd G4c67@G4c62)) (set! G4c6e@G4c5f (record-predicate G4c65@G4c60)) (set! G4c70@make-i/o-error (record-constructor G4c69@G4c61)) (set! G4c72@i/o-error? (condition-predicate G4c65@G4c60)) (set! G4c79@G4c74 (make-record-type-descriptor '&i/o-read G4c65@G4c60 'G4c77 '#f '#f '#())) (set! G4c7b@G4c76 '#f) (set! G4c7d@G4c75 (make-record-constructor-descriptor G4c79@G4c74 G4c69@G4c61 G4c7b@G4c76)) (set! G4c82@G4c73 (record-predicate G4c79@G4c74)) (set! G4c84@make-i/o-read-error (record-constructor G4c7d@G4c75)) (set! G4c86@i/o-read-error? (condition-predicate G4c79@G4c74)) (set! G4c8d@G4c88 (make-record-type-descriptor '&i/o-write G4c65@G4c60 'G4c8b '#f '#f '#())) (set! G4c8f@G4c8a '#f) (set! G4c91@G4c89 (make-record-constructor-descriptor G4c8d@G4c88 G4c69@G4c61 G4c8f@G4c8a)) (set! G4c96@G4c87 (record-predicate G4c8d@G4c88)) (set! G4c98@make-i/o-write-error (record-constructor G4c91@G4c89)) (set! G4c9a@i/o-write-error? (condition-predicate G4c8d@G4c88)) (set! G4ca2@G4c9d (make-record-type-descriptor '&i/o-invalid-position G4c65@G4c60 'G4ca0 '#f '#f '#((immutable position)))) (set! G4ca4@G4c9f '#f) (set! G4ca6@G4c9e (make-record-constructor-descriptor G4ca2@G4c9d G4c69@G4c61 G4ca4@G4c9f)) (set! G4cab@G4c9c (record-predicate G4ca2@G4c9d)) (set! G4cad@make-i/o-invalid-position-error (record-constructor G4ca6@G4c9e)) (set! G4caf@G4c9b (record-accessor G4ca2@G4c9d '0)) (set! G4cb1@i/o-invalid-position-error? (condition-predicate G4ca2@G4c9d)) (set! G4cb3@i/o-error-position (condition-accessor G4ca2@G4c9d G4caf@G4c9b)) (set! G4cbb@G4cb6 (make-record-type-descriptor '&i/o-filename G4c65@G4c60 'G4cb9 '#f '#f '#((immutable filename)))) (set! G4cbd@G4cb8 '#f) (set! G4cbf@G4cb7 (make-record-constructor-descriptor G4cbb@G4cb6 G4c69@G4c61 G4cbd@G4cb8)) (set! G4cc4@G4cb5 (record-predicate G4cbb@G4cb6)) (set! G4cc6@make-i/o-filename-error (record-constructor G4cbf@G4cb7)) (set! G4cc8@G4cb4 (record-accessor G4cbb@G4cb6 '0)) (set! G4cca@i/o-filename-error? (condition-predicate G4cbb@G4cb6)) (set! G4ccc@i/o-error-filename (condition-accessor G4cbb@G4cb6 G4cc8@G4cb4)) (set! G4cd3@G4cce (make-record-type-descriptor '&i/o-file-protection G4c65@G4c60 'G4cd1 '#f '#f '#())) (set! G4cd5@G4cd0 '#f) (set! G4cd7@G4ccf (make-record-constructor-descriptor G4cd3@G4cce G4c69@G4c61 G4cd5@G4cd0)) (set! G4cdc@G4ccd (record-predicate G4cd3@G4cce)) (set! G4cde@make-i/o-file-protection-error (record-constructor G4cd7@G4ccf)) (set! G4ce0@i/o-file-protection-error? (condition-predicate G4cd3@G4cce)) (set! G4ce7@G4ce2 (make-record-type-descriptor '&i/o-file-is-read-only G4cd3@G4cce 'G4ce5 '#f '#f '#())) (set! G4ce9@G4ce4 '#f) (set! G4ceb@G4ce3 (make-record-constructor-descriptor G4ce7@G4ce2 G4cd7@G4ccf G4ce9@G4ce4)) (set! G4cf0@G4ce1 (record-predicate G4ce7@G4ce2)) (set! G4cf2@make-i/o-file-is-read-only-error (record-constructor G4ceb@G4ce3)) (set! G4cf4@i/o-file-is-read-only-error? (condition-predicate G4ce7@G4ce2)) (set! G4cfb@G4cf6 (make-record-type-descriptor '&i/o-file-already-exists G4cbb@G4cb6 'G4cf9 '#f '#f '#())) (set! G4cfd@G4cf8 '#f) (set! G4cff@G4cf7 (make-record-constructor-descriptor G4cfb@G4cf6 G4cbf@G4cb7 G4cfd@G4cf8)) (set! G4d04@G4cf5 (record-predicate G4cfb@G4cf6)) (set! G4d06@make-i/o-file-already-exists-error (record-constructor G4cff@G4cf7)) (set! G4d08@i/o-file-already-exists-error? (condition-predicate G4cfb@G4cf6)) (set! G4d0f@G4d0a (make-record-type-descriptor '&i/o-file-does-not-exist G4cbb@G4cb6 'G4d0d '#f '#f '#())) (set! G4d11@G4d0c '#f) (set! G4d13@G4d0b (make-record-constructor-descriptor G4d0f@G4d0a G4cbf@G4cb7 G4d11@G4d0c)) (set! G4d18@G4d09 (record-predicate G4d0f@G4d0a)) (set! G4d1a@make-i/o-file-does-not-exist-error (record-constructor G4d13@G4d0b)) (set! G4d1c@i/o-file-does-not-exist-error? (condition-predicate G4d0f@G4d0a)) (set! G4d24@G4d1f (make-record-type-descriptor '&i/o-port G4c65@G4c60 'G4d22 '#f '#f '#((immutable port)))) (set! G4d26@G4d21 '#f) (set! G4d28@G4d20 (make-record-constructor-descriptor G4d24@G4d1f G4c69@G4c61 G4d26@G4d21)) (set! G4d2d@G4d1e (record-predicate G4d24@G4d1f)) (set! G4d2f@make-i/o-port-error (record-constructor G4d28@G4d20)) (set! G4d31@G4d1d (record-accessor G4d24@G4d1f '0)) (set! G4d33@i/o-port-error? (condition-predicate G4d24@G4d1f)) (set! G4d35@i/o-error-port (condition-accessor G4d24@G4d1f G4d31@G4d1d)) (set! G4d3c@G4d37 (make-record-type-descriptor '&i/o-decoding G4d24@G4d1f 'G4d3a '#f '#f '#())) (set! G4d3e@G4d39 '#f) (set! G4d40@G4d38 (make-record-constructor-descriptor G4d3c@G4d37 G4d28@G4d20 G4d3e@G4d39)) (set! G4d45@G4d36 (record-predicate G4d3c@G4d37)) (set! G4d47@make-i/o-decoding-error (record-constructor G4d40@G4d38)) (set! G4d49@i/o-decoding-error? (condition-predicate G4d3c@G4d37)) (set! G4d51@G4d4c (make-record-type-descriptor '&i/o-encoding G4d24@G4d1f 'G4d4f '#f '#f '#((immutable char)))) (set! G4d53@G4d4e '#f) (set! G4d55@G4d4d (make-record-constructor-descriptor G4d51@G4d4c G4d28@G4d20 G4d53@G4d4e)) (set! G4d5a@G4d4b (record-predicate G4d51@G4d4c)) (set! G4d5c@make-i/o-encoding-error (record-constructor G4d55@G4d4d)) (set! G4d5e@G4d4a (record-accessor G4d51@G4d4c '0)) (set! G4d60@i/o-encoding-error? (condition-predicate G4d51@G4d4c)) (set! G4d62@i/o-encoding-error-char (condition-accessor G4d51@G4d4c G4d5e@G4d4a)) (begin (set! G4db2@G4d62@i/o-encoding-error-char G4d62@i/o-encoding-error-char) (set! G4db1@G4d60@i/o-encoding-error? G4d60@i/o-encoding-error?) (set! G4db0@G4d5e@G4d4a G4d5e@G4d4a) (set! G4daf@G4d5c@make-i/o-encoding-error G4d5c@make-i/o-encoding-error) (set! G4dae@G4d5a@G4d4b G4d5a@G4d4b) (set! G4dad@G4d55@G4d4d G4d55@G4d4d) (set! G4dac@G4d53@G4d4e G4d53@G4d4e) (set! G4dab@G4d51@G4d4c G4d51@G4d4c) (set! G4daa@G4d49@i/o-decoding-error? G4d49@i/o-decoding-error?) (set! G4da9@G4d47@make-i/o-decoding-error G4d47@make-i/o-decoding-error) (set! G4da8@G4d45@G4d36 G4d45@G4d36) (set! G4da7@G4d40@G4d38 G4d40@G4d38) (set! G4da6@G4d3e@G4d39 G4d3e@G4d39) (set! G4da5@G4d3c@G4d37 G4d3c@G4d37) (set! G4da4@G4d35@i/o-error-port G4d35@i/o-error-port) (set! G4da3@G4d33@i/o-port-error? G4d33@i/o-port-error?) (set! G4da2@G4d31@G4d1d G4d31@G4d1d) (set! G4da1@G4d2f@make-i/o-port-error G4d2f@make-i/o-port-error) (set! G4da0@G4d2d@G4d1e G4d2d@G4d1e) (set! G4d9f@G4d28@G4d20 G4d28@G4d20) (set! G4d9e@G4d26@G4d21 G4d26@G4d21) (set! G4d9d@G4d24@G4d1f G4d24@G4d1f) (set! G4d9c@G4d1c@i/o-file-does-not-exist-error? G4d1c@i/o-file-does-not-exist-error?) (set! G4d9b@G4d1a@make-i/o-file-does-not-exist-error G4d1a@make-i/o-file-does-not-exist-error) (set! G4d9a@G4d18@G4d09 G4d18@G4d09) (set! G4d99@G4d13@G4d0b G4d13@G4d0b) (set! G4d98@G4d11@G4d0c G4d11@G4d0c) (set! G4d97@G4d0f@G4d0a G4d0f@G4d0a) (set! G4d96@G4d08@i/o-file-already-exists-error? G4d08@i/o-file-already-exists-error?) (set! G4d95@G4d06@make-i/o-file-already-exists-error G4d06@make-i/o-file-already-exists-error) (set! G4d94@G4d04@G4cf5 G4d04@G4cf5) (set! G4d93@G4cff@G4cf7 G4cff@G4cf7) (set! G4d92@G4cfd@G4cf8 G4cfd@G4cf8) (set! G4d91@G4cfb@G4cf6 G4cfb@G4cf6) (set! G4d90@G4cf4@i/o-file-is-read-only-error? G4cf4@i/o-file-is-read-only-error?) (set! G4d8f@G4cf2@make-i/o-file-is-read-only-error G4cf2@make-i/o-file-is-read-only-error) (set! G4d8e@G4cf0@G4ce1 G4cf0@G4ce1) (set! G4d8d@G4ceb@G4ce3 G4ceb@G4ce3) (set! G4d8c@G4ce9@G4ce4 G4ce9@G4ce4) (set! G4d8b@G4ce7@G4ce2 G4ce7@G4ce2) (set! G4d8a@G4ce0@i/o-file-protection-error? G4ce0@i/o-file-protection-error?) (set! G4d89@G4cde@make-i/o-file-protection-error G4cde@make-i/o-file-protection-error) (set! G4d88@G4cdc@G4ccd G4cdc@G4ccd) (set! G4d87@G4cd7@G4ccf G4cd7@G4ccf) (set! G4d86@G4cd5@G4cd0 G4cd5@G4cd0) (set! G4d85@G4cd3@G4cce G4cd3@G4cce) (set! G4d84@G4ccc@i/o-error-filename G4ccc@i/o-error-filename) (set! G4d83@G4cca@i/o-filename-error? G4cca@i/o-filename-error?) (set! G4d82@G4cc8@G4cb4 G4cc8@G4cb4) (set! G4d81@G4cc6@make-i/o-filename-error G4cc6@make-i/o-filename-error) (set! G4d80@G4cc4@G4cb5 G4cc4@G4cb5) (set! G4d7f@G4cbf@G4cb7 G4cbf@G4cb7) (set! G4d7e@G4cbd@G4cb8 G4cbd@G4cb8) (set! G4d7d@G4cbb@G4cb6 G4cbb@G4cb6) (set! G4d7c@G4cb3@i/o-error-position G4cb3@i/o-error-position) (set! G4d7b@G4cb1@i/o-invalid-position-error? G4cb1@i/o-invalid-position-error?) (set! G4d7a@G4caf@G4c9b G4caf@G4c9b) (set! G4d79@G4cad@make-i/o-invalid-position-error G4cad@make-i/o-invalid-position-error) (set! G4d78@G4cab@G4c9c G4cab@G4c9c) (set! G4d77@G4ca6@G4c9e G4ca6@G4c9e) (set! G4d76@G4ca4@G4c9f G4ca4@G4c9f) (set! G4d75@G4ca2@G4c9d G4ca2@G4c9d) (set! G4d74@G4c9a@i/o-write-error? G4c9a@i/o-write-error?) (set! G4d73@G4c98@make-i/o-write-error G4c98@make-i/o-write-error) (set! G4d72@G4c96@G4c87 G4c96@G4c87) (set! G4d71@G4c91@G4c89 G4c91@G4c89) (set! G4d70@G4c8f@G4c8a G4c8f@G4c8a) (set! G4d6f@G4c8d@G4c88 G4c8d@G4c88) (set! G4d6e@G4c86@i/o-read-error? G4c86@i/o-read-error?) (set! G4d6d@G4c84@make-i/o-read-error G4c84@make-i/o-read-error) (set! G4d6c@G4c82@G4c73 G4c82@G4c73) (set! G4d6b@G4c7d@G4c75 G4c7d@G4c75) (set! G4d6a@G4c7b@G4c76 G4c7b@G4c76) (set! G4d69@G4c79@G4c74 G4c79@G4c74) (set! G4d68@G4c72@i/o-error? G4c72@i/o-error?) (set! G4d67@G4c70@make-i/o-error G4c70@make-i/o-error) (set! G4d66@G4c6e@G4c5f G4c6e@G4c5f) (set! G4d65@G4c69@G4c61 G4c69@G4c61) (set! G4d64@G4c67@G4c62 G4c67@G4c62) (set! G4d63@G4c65@G4c60 G4c65@G4c60)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29fa@G299f@current-primitive-locations (lambda (G5186@x) ((lambda (G5188@t) (if G5188@t (cdr G5188@t) '#f)) (assq G5186@x '((syntax-error . G4abe@G3177@syntax-error) (syntax-dispatch . G4a52@G308a@syntax-dispatch) (load . G4e4f@G4dc1@load) (interaction-environment . G4ac7@G3189@interaction-environment) (make-parameter . G2999@G28a4@make-parameter) (make-variable-transformer . G4a12@G2e88@make-variable-transformer) (identifier? . G4ac2@G317f@identifier?) (generate-temporaries . G4ab7@G3169@generate-temporaries) (free-identifier=? . G4ab8@G316b@free-identifier=?) (syntax->datum . G4ac4@G3183@syntax->datum) (datum->syntax . G4ac3@G3181@datum->syntax) (bound-identifier=? . G4ab9@G316d@bound-identifier=?) (make-i/o-write-error . G4d73@G4c98@make-i/o-write-error) (make-i/o-read-error . G4d6d@G4c84@make-i/o-read-error) (make-i/o-port-error . G4da1@G4d2f@make-i/o-port-error) (make-i/o-invalid-position-error . G4d79@G4cad@make-i/o-invalid-position-error) (make-i/o-filename-error . G4d81@G4cc6@make-i/o-filename-error) (make-i/o-file-protection-error . G4d89@G4cde@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4d8f@G4cf2@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4d9b@G4d1a@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4d95@G4d06@make-i/o-file-already-exists-error) (make-i/o-error . G4d67@G4c70@make-i/o-error) (make-i/o-encoding-error . G4daf@G4d5c@make-i/o-encoding-error) (make-i/o-decoding-error . G4da9@G4d47@make-i/o-decoding-error) (i/o-write-error? . G4d74@G4c9a@i/o-write-error?) (i/o-read-error? . G4d6e@G4c86@i/o-read-error?) (i/o-port-error? . G4da3@G4d33@i/o-port-error?) (i/o-invalid-position-error? . G4d7b@G4cb1@i/o-invalid-position-error?) (i/o-filename-error? . G4d83@G4cca@i/o-filename-error?) (i/o-file-protection-error? . G4d8a@G4ce0@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4d90@G4cf4@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4d9c@G4d1c@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4d96@G4d08@i/o-file-already-exists-error?) (i/o-error? . G4d68@G4c72@i/o-error?) (i/o-error-port . G4da4@G4d35@i/o-error-port) (i/o-error-filename . G4d84@G4ccc@i/o-error-filename) (i/o-encoding-error? . G4db1@G4d60@i/o-encoding-error?) (i/o-encoding-error-char . G4db2@G4d62@i/o-encoding-error-char) (i/o-decoding-error? . G4daa@G4d49@i/o-decoding-error?) (scheme-report-environment . G4aae@G3157@scheme-report-environment) (null-environment . G4aad@G3155@null-environment) (command-line . G4e4c@G4dbb@command-line) (eval . G4ab0@G315b@eval) (environment . G4aac@G3153@environment) (who-condition? . G4c3a@G4b8e@who-condition?) (warning? . G4c13@G4b0e@warning?) (violation? . G4c25@G4b4a@violation?) (undefined-violation? . G4c5d@G4bfe@undefined-violation?) (syntax-violation? . G4c55@G4be6@syntax-violation?) (syntax-violation-subform . G4c57@G4bea@syntax-violation-subform) (syntax-violation-form . G4c56@G4be8@syntax-violation-form) (syntax-violation . G4ac1@G317d@syntax-violation) (serious-condition? . G4c19@G4b22@serious-condition?) (non-continuable-violation? . G4c41@G4ba4@non-continuable-violation?) (message-condition? . G4c0c@G4af8@message-condition?) (make-who-condition . G4c38@G4b8a@make-who-condition) (make-warning . G4c12@G4b0c@make-warning) (make-violation . G4c24@G4b48@make-violation) (make-undefined-violation . G4c5c@G4bfc@make-undefined-violation) (make-syntax-violation . G4c52@G4be0@make-syntax-violation) (make-serious-condition . G4c18@G4b20@make-serious-condition) (make-non-continuable-violation . G4c40@G4ba2@make-non-continuable-violation) (make-message-condition . G4c0a@G4af4@make-message-condition) (make-lexical-violation . G4c4c@G4bca@make-lexical-violation) (make-irritants-condition . G4c30@G4b71@make-irritants-condition) (make-implementation-restriction-violation . G4c46@G4bb6@make-implementation-restriction-violation) (make-error . G4c1e@G4b34@make-error) (make-assertion-violation . G4c2a@G4b5c@make-assertion-violation) (lexical-violation? . G4c4d@G4bcc@lexical-violation?) (irritants-condition? . G4c32@G4b75@irritants-condition?) (implementation-restriction-violation? . G4c47@G4bb8@implementation-restriction-violation?) (error? . G4c1f@G4b36@error?) (condition-who . G4c3b@G4b90@condition-who) (condition-message . G4c0d@G4afa@condition-message) (condition-irritants . G4c33@G4b77@condition-irritants) (assertion-violation? . G4c2b@G4b5e@assertion-violation?)))))) (G2c3a@G2acd@install-library 'G5159 '(mosh interaction) '() '() '() '() '((string-upcase . G50d6) (string-titlecase . G50d5) (string-normalize-nfkd . G50d4) (string-normalize-nfkc . G50d3) (string-normalize-nfd . G50d2) (string-normalize-nfc . G50d1) (string-foldcase . G50d0) (string-downcase . G50cf) (string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-title-case? . G50c7) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-general-category . G50c4) (char-upcase . G50c3) (char-titlecase . G50c2) (char-foldcase . G50c1) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba) (make-variable-transformer . G2e87) (identifier? . G317e) (generate-temporaries . G3168) (free-identifier=? . G316a) (syntax->datum . G3182) (datum->syntax . G3180) (bound-identifier=? . G316c) (record-type-descriptor? . G50b9) (record-predicate . G50b8) (record-mutator . G50b7) (record-constructor . G50b6) (record-accessor . G50b5) (make-record-type-descriptor . G50b4) (make-record-constructor-descriptor . G50b3) (record? . G50b2) (record-type-uid . G50b1) (record-type-sealed? . G50b0) (record-type-parent . G50af) (record-type-opaque? . G50ae) (record-type-name . G50ad) (record-type-generative? . G50ac) (record-type-field-names . G50ab) (record-rtd . G50aa) (record-field-mutable? . G50a9) (delete-file . G50a8) (file-exists? . G50a7) (vector-sort! . G50a6) (vector-sort . G50a5) (list-sort . G50a4) (symbol-hash . G50a3) (string-ci-hash . G50a2) (string-hash . G50a1) (equal-hash . G50a0) (hashtable-equivalence-function . G509f) (make-hashtable . G509e) (hashtable-hash-function . G509d) (make-eqv-hashtable . G509c) (make-eq-hashtable . G509b) (hashtable? . G509a) (hashtable-update! . G5099) (hashtable-size . G5098) (hashtable-set! . G5097) (hashtable-ref . G5096) (hashtable-mutable? . G5095) (hashtable-keys . G5094) (hashtable-entries . G5093) (hashtable-delete! . G5092) (hashtable-copy . G5091) (hashtable-contains? . G5090) (hashtable-clear! . G508f) (call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (utf-8-codec . G5078) (utf-16-codec . G5077) (transcoder-error-handling-mode . G5076) (transcoder-eol-style . G5075) (transcoder-codec . G5074) (transcoded-port . G5073) (textual-port? . G5072) (string->bytevector . G5071) (standard-output-port . G5070) (standard-input-port . G506f) (standard-error-port . G506e) (set-port-position! . G506d) (put-u8 . G506c) (put-string . G506b) (put-datum . G506a) (put-char . G5069) (put-bytevector . G5068) (port? . G5067) (port-transcoder . G5066) (port-position . G5065) (port-has-set-port-position!? . G5064) (port-has-port-position? . G5063) (port-eof? . G5062) (output-port-buffer-mode . G5061) (open-string-output-port . G5060) (open-string-input-port . G505f) (open-file-output-port . G505e) (open-file-input/output-port . G505d) (open-file-input-port . G505c) (open-bytevector-output-port . G505b) (open-bytevector-input-port . G505a) (native-transcoder . G5059) (native-eol-style . G5058) (make-transcoder . G5057) (latin-1-codec . G5056) (make-i/o-write-error . G4c97) (make-i/o-read-error . G4c83) (make-i/o-port-error . G4d2e) (make-i/o-invalid-position-error . G4cac) (make-i/o-filename-error . G4cc5) (make-i/o-file-protection-error . G4cdd) (make-i/o-file-is-read-only-error . G4cf1) (make-i/o-file-does-not-exist-error . G4d19) (make-i/o-file-already-exists-error . G4d05) (make-i/o-error . G4c6f) (make-i/o-encoding-error . G4d5b) (make-i/o-decoding-error . G4d46) (make-custom-textual-output-port . G5055) (make-custom-textual-input/output-port . G5054) (make-custom-textual-input-port . G5053) (make-custom-binary-output-port . G5052) (make-custom-binary-input/output-port . G5051) (make-custom-binary-input-port . G5050) (make-bytevector . G504f) (lookahead-u8 . G504e) (lookahead-char . G504d) (i/o-write-error? . G4c99) (i/o-read-error? . G4c85) (i/o-port-error? . G4d32) (i/o-invalid-position-error? . G4cb0) (i/o-filename-error? . G4cc9) (i/o-file-protection-error? . G4cdf) (i/o-file-is-read-only-error? . G4cf3) (i/o-file-does-not-exist-error? . G4d1b) (i/o-file-already-exists-error? . G4d07) (i/o-error? . G4c71) (i/o-error-port . G4d34) (i/o-error-filename . G4ccb) (i/o-encoding-error? . G4d5f) (i/o-encoding-error-char . G4d61) (i/o-decoding-error? . G4d48) (get-u8 . G504c) (get-string-n! . G504b) (get-string-n . G504a) (get-string-all . G5049) (get-line . G5048) (get-datum . G5047) (get-char . G5046) (get-bytevector-some . G5045) (get-bytevector-n! . G5044) (get-bytevector-n . G5043) (get-bytevector-all . G5042) (flush-output-port . G5041) (close-port . G5040) (exit . G5039) (command-line . G4dba) (string-fill! . G5038) (string-set! . G5037) (set-cdr! . G5036) (set-car! . G5035) (remove . G5034) (remv . G5033) (remp . G5032) (remq . G5031) (partition . G5030) (memv . G502f) (memq . G502e) (memp . G502d) (member . G502c) (exists . G502b) (for-all . G502a) (fold-right . G5029) (fold-left . G5028) (find . G5027) (filter . G5026) (cons* . G5025) (assv . G5024) (assq . G5023) (assp . G5022) (assoc . G5021) (call-with-string-output-port . G5020) (call-with-port . G501f) (call-with-bytevector-output-port . G501e) (bytevector->string . G501d) (buffer-mode? . G501c) (binary-port? . G501b) (with-exception-handler . G501a) (raise-continuable . G5019) (raise . G5018) (eval . G315a) (environment . G3152) (make-enumeration . G5017) (enum-set=? . G5016) (enum-set-universe . G5015) (enum-set-union . G5014) (enum-set-subset? . G5013) (enum-set-projection . G5012) (enum-set-member? . G5011) (enum-set-intersection . G5010) (enum-set-indexer . G500f) (enum-set-difference . G500e) (enum-set-constructor . G500d) (enum-set-complement . G500c) (enum-set->list . G500b) (who-condition? . G4b8d) (warning? . G4b0d) (violation? . G4b49) (undefined-violation? . G4bfd) (syntax-violation? . G4be5) (syntax-violation-subform . G4be9) (syntax-violation-form . G4be7) (syntax-violation . G317c) (simple-conditions . G500a) (serious-condition? . G4b21) (non-continuable-violation? . G4ba3) (message-condition? . G4af7) (make-who-condition . G4b89) (make-warning . G4b0b) (make-violation . G4b47) (make-undefined-violation . G4bfb) (make-syntax-violation . G4bdf) (make-serious-condition . G4b1f) (make-non-continuable-violation . G4ba1) (make-message-condition . G4af3) (make-lexical-violation . G4bc9) (make-irritants-condition . G4b70) (make-implementation-restriction-violation . G4bb5) (make-error . G4b33) (make-assertion-violation . G4b5b) (lexical-violation? . G4bcb) (irritants-condition? . G4b74) (implementation-restriction-violation? . G4bb7) (error? . G4b35) (condition-who . G4b8f) (condition-predicate . G5009) (condition-message . G4af9) (condition-irritants . G4b76) (condition-accessor . G5008) (condition . G5007) (assertion-violation? . G4b5d) (condition? . G5006) (utf32->string . G5005) (utf16->string . G5004) (utf8->string . G5003) (uint-list->bytevector . G5002) (u8-list->bytevector . G5001) (string->utf8 . G5000) (string->utf32 . G4fff) (string->utf16 . G4ffe) (sint-list->bytevector . G4ffd) (native-endianness . G4ffc) (bytevector? . G4ffb) (bytevector=? . G4ffa) (bytevector-uint-set! . G4ff9) (bytevector-uint-ref . G4ff8) (bytevector-u8-set! . G4ff7) (bytevector-u8-ref . G4ff6) (bytevector-u64-set! . G4ff5) (bytevector-u64-ref . G4ff4) (bytevector-u64-native-set! . G4ff3) (bytevector-u64-native-ref . G4ff2) (bytevector-u32-set! . G4ff1) (bytevector-u32-ref . G4ff0) (bytevector-u32-native-set! . G4fef) (bytevector-u32-native-ref . G4fee) (bytevector-u16-set! . G4fed) (bytevector-u16-ref . G4fec) (bytevector-u16-native-set! . G4feb) (bytevector-u16-native-ref . G4fea) (bytevector-sint-set! . G4fe9) (bytevector-sint-ref . G4fe8) (bytevector-s8-set! . G4fe7) (bytevector-s8-ref . G4fe6) (bytevector-s64-set! . G4fe5) (bytevector-s64-ref . G4fe4) (bytevector-s64-native-set! . G4fe3) (bytevector-s64-native-ref . G4fe2) (bytevector-s32-set! . G4fe1) (bytevector-s32-ref . G4fe0) (bytevector-s32-native-set! . G4fdf) (bytevector-s32-native-ref . G4fde) (bytevector-s16-set! . G4fdd) (bytevector-s16-ref . G4fdc) (bytevector-s16-native-set! . G4fdb) (bytevector-s16-native-ref . G4fda) (bytevector-length . G4fd9) (bytevector-ieee-single-native-ref . G4fd8) (bytevector-ieee-double-ref . G4fd7) (bytevector-ieee-double-native-set! . G4fd6) (bytevector-ieee-double-native-ref . G4fd5) (bytevector-fill! . G4fd4) (bytevector-copy! . G4fd3) (bytevector-copy . G4fd2) (bytevector->uint-list . G4fd1) (bytevector->u8-list . G4fd0) (bytevector->sint-list . G4fcf) (no-nans-violation? . G4fce) (no-infinities-violation? . G4fcd) (make-no-nans-violation . G4fcc) (make-no-infinities-violation . G4fcb) (real->flonum . G4fca) (flzero? . G4fc9) (fltruncate . G4fc8) (fltan . G4fc7) (flsqrt . G4fc6) (flsin . G4fc5) (flround . G4fc4) (flpositive? . G4fc3) (flonum? . G4fc2) (flodd? . G4fc1) (flnumerator . G4fc0) (flnegative? . G4fbf) (flnan? . G4fbe) (flmod0 . G4fbd) (flmod . G4fbc) (flmin . G4fbb) (flmax . G4fba) (fllog . G4fb9) (flinteger? . G4fb8) (flinfinite? . G4fb7) (flfloor . G4fb6) (flfinite? . G4fb5) (flexpt . G4fb4) (flexp . G4fb3) (fleven? . G4fb2) (fldiv0-and-mod0 . G4fb1) (fldiv0 . G4fb0) (fldiv-and-mod . G4faf) (fldiv . G4fae) (fldenominator . G4fad) (flcos . G4fac) (flceiling . G4fab) (flatan . G4faa) (flasin . G4fa9) (flacos . G4fa8) (flabs . G4fa7) (fl>? . G4fa6) (fl>=? . G4fa5) (fl=? . G4fa4) (fl<? . G4fa3) (fl<=? . G4fa2) (fl/ . G4fa1) (fl- . G4fa0) (fl+ . G4f9f) (fl* . G4f9e) (fixnum->flonum . G4f9d) (fxzero? . G4f9c) (fxxor . G4f9b) (fxrotate-bit-field . G4f9a) (fxreverse-bit-field . G4f99) (fxpositive? . G4f98) (fxodd? . G4f97) (fxnot . G4f96) (fxnegative? . G4f95) (fxmod0 . G4f94) (fxmod . G4f93) (fxmin . G4f92) (fxmax . G4f91) (fxlength . G4f90) (fxior . G4f8f) (fxif . G4f8e) (fxfirst-bit-set . G4f8d) (fxeven? . G4f8c) (fxdiv0-and-mod0 . G4f8b) (fxdiv0 . G4f8a) (fxdiv-and-mod . G4f89) (fxdiv . G4f88) (fxcopy-bit-field . G4f87) (fxcopy-bit . G4f86) (fxbit-set? . G4f85) (fxbit-field . G4f84) (fxbit-count . G4f83) (fxarithmetic-shift-right . G4f82) (fxarithmetic-shift-left . G4f81) (fxarithmetic-shift . G4f80) (fxand . G4f7f) (fx>? . G4f7e) (fx>=? . G4f7d) (fx=? . G4f7c) (fx<? . G4f7b) (fx<=? . G4f7a) (fx-/carry . G4f79) (fx- . G4f78) (fx+/carry . G4f77) (fx+ . G4f76) (fx*/carry . G4f75) (fx* . G4f74) (greatest-fixnum . G4f73) (least-fixnum . G4f72) (fixnum-width . G4f71) (fixnum? . G4f70) (bitwise-rotate-bit-field . G4f6f) (bitwise-reverse-bit-field . G4f6e) (bitwise-length . G4f6d) (bitwise-if . G4f6c) (bitwise-first-bit-set . G4f6b) (bitwise-copy-bit-field . G4f6a) (bitwise-copy-bit . G4f69) (bitwise-bit-set? . G4f68) (bitwise-bit-field . G4f67) (bitwise-bit-count . G4f66) (bitwise-xor . G4f65) (bitwise-ior . G4f64) (bitwise-and . G4f63) (bitwise-not . G4f62) (bitwise-arithmetic-shift-right . G4f61) (bitwise-arithmetic-shift-left . G4f60) (bitwise-arithmetic-shift . G4f5f) (zero? . G4f5e) (vector? . G4f5d) (vector-set! . G4f5c) (vector-ref . G4f5b) (vector-map . G4f5a) (vector-length . G4f59) (vector-for-each . G4f58) (vector-fill! . G4f57) (vector->list . G4f56) (vector . G4f55) (values . G4f54) (truncate . G4f53) (tan . G4f52) (symbol? . G4f51) (symbol=? . G4f50) (symbol->string . G4f4f) (substring . G4f4e) (string? . G4f4d) (string>? . G4f4c) (string>=? . G4f4b) (string=? . G4f4a) (string<? . G4f49) (string<=? . G4f48) (string-ref . G4f47) (string-length . G4f46) (string-for-each . G4f45) (string-copy . G4f44) (string-append . G4f43) (string->symbol . G4f42) (string->number . G4f41) (string->list . G4f40) (string . G4f3f) (sqrt . G4f3e) (sin . G4f3d) (round . G4f3c) (reverse . G4f3b) (real? . G4f3a) (real-valued? . G4f39) (real-part . G4f38) (rationalize . G4f37) (rational? . G4f36) (rational-valued? . G4f35) (procedure? . G4f34) (positive? . G4f33) (pair? . G4f32) (odd? . G4f31) (numerator . G4f30) (number? . G4f2f) (number->string . G4f2e) (null? . G4f2d) (not . G4f2c) (negative? . G4f2b) (nan? . G4f2a) (min . G4f29) (max . G4f28) (map . G4f27) (make-vector . G4f26) (make-string . G4f25) (make-rectangular . G4f24) (make-polar . G4f23) (magnitude . G4f22) (log . G4f21) (list? . G4f20) (list-tail . G4f1f) (list-ref . G4f1e) (list->vector . G4f1d) (list->string . G4f1c) (list . G4f1b) (length . G4f1a) (lcm . G4f19) (integer? . G4f18) (integer-valued? . G4f17) (integer->char . G4f16) (infinite? . G4f15) (inexact? . G4f14) (inexact . G4f13) (imag-part . G4f12) (gcd . G4f11) (for-each . G4f10) (floor . G4f0f) (finite? . G4f0e) (expt . G4f0d) (exp . G4f0c) (exact? . G4f0b) (exact-integer-sqrt . G4f0a) (exact . G4f09) (even? . G4f08) (error . G4f07) (eqv? . G4f06) (equal? . G4f05) (eq? . G4f04) (dynamic-wind . G4f03) (div0-and-mod0 . G4f02) (mod0 . G4f01) (div0 . G4f00) (div-and-mod . G4eff) (mod . G4efe) (div . G4efd) (denominator . G4efc) (cos . G4efb) (cons . G4efa) (complex? . G4ef9) (char? . G4ef8) (char>? . G4ef7) (char>=? . G4ef6) (char=? . G4ef5) (char<? . G4ef4) (char<=? . G4ef3) (char->integer . G4ef2) (ceiling . G4ef1) (call-with-values . G4ef0) (call/cc . G4eef) (call-with-current-continuation . G4eee) (cddddr . G4eed) (cdddar . G4eec) (cddadr . G4eeb) (cddaar . G4eea) (cdaddr . G4ee9) (cdadar . G4ee8) (cdaadr . G4ee7) (cdaaar . G4ee6) (cadddr . G4ee5) (caddar . G4ee4) (cadadr . G4ee3) (cadaar . G4ee2) (caaddr . G4ee1) (caadar . G4ee0) (caaadr . G4edf) (caaaar . G4ede) (cdddr . G4edd) (cddar . G4edc) (cdadr . G4edb) (cdaar . G4eda) (caddr . G4ed9) (cadar . G4ed8) (caadr . G4ed7) (caaar . G4ed6) (cddr . G4ed5) (cdar . G4ed4) (cadr . G4ed3) (caar . G4ed2) (cdr . G4ed1) (car . G4ed0) (boolean? . G4ecf) (boolean=? . G4ece) (atan . G4ecd) (assertion-violation . G4ecc) (asin . G4ecb) (apply . G4eca) (append . G4ec9) (angle . G4ec8) (acos . G4ec7) (abs . G4ec6) (/ . G4ec5) (* . G4ec4) (- . G4ec3) (+ . G4ec2) (>= . G4ec1) (> . G4ec0) (= . G4ebf) (<= . G4ebe) (< . G4ebd) (library . G4ebc) (export . G4ebb) (&no-nans . G4eba) (&no-infinities . G4eb9) (&i/o-encoding . G4eb8) (&i/o-decoding . G4eb7) (&i/o-port . G4eb6) (&i/o-file-does-not-exist . G4eb5) (&i/o-file-already-exists . G4eb4) (&i/o-file-is-read-only . G4eb3) (&i/o-file-protection . G4eb2) (&i/o-filename . G4eb1) (&i/o-invalid-position . G4eb0) (&i/o-write . G4eaf) (&i/o-read . G4eae) (&i/o . G4ead) (&undefined . G4eac) (&syntax . G4eab) (&lexical . G4eaa) (&implementation-restriction . G4ea9) (&non-continuable . G4ea8) (&who . G4ea7) (&irritants . G4ea6) (&assertion . G4ea5) (&violation . G4ea4) (&error . G4ea3) (&serious . G4ea2) (&warning . G4ea1) (&message . G4ea0) (&condition . G4e9f) (define-condition-type . G4e9e) (define-enumeration . G4e9d) (define-record-type . G4e9c) (parent-rtd . G4e9b) (nongenerative . G4e9a) (opaque . G4e99) (sealed . G4e98) (protocol . G4e97) (parent . G4e96) (immutable . G4e95) (mutable . G4e94) (fields . G4e93) (error-handling-mode . G4e92) (file-options . G4e91) (buffer-mode . G4e90) (eol-style . G4e8f) (guard . G4e8e) (unsyntax-splicing . G4e8b) (unsyntax . G4e8a) (unquote-splicing . G4e89) (unquote . G4e88) (_ . G4e87) (else . G4e86) (=> . G4e85) (... . G4e84) (assert . G4e83) (endianness . G4e82) (or . G4e7f) (and . G4e7e) (do . G4e7d) (cond . G4e7c) (let* . G4e7b) (let . G4e7a) (let*-values . G4e79) (let-values . G4e78) (identifier-syntax . G4e77) (with-syntax . G4e76) (quasisyntax . G4e75) (quasiquote . G4e74) (syntax-rules . G4e73) (include . G4e72) (record-constructor-descriptor . G4e70) (record-type-descriptor . G4e6f) (case . G4e6e) (unless . G4e6c) (when . G4e6b) (if . G4e6a) (letrec* . G4e69) (letrec . G4e68) (case-lambda . G4e66) (lambda . G4e65) (syntax . G4e64) (syntax-case . G4e63) (quote . G4e62) (letrec-syntax . G4e60) (let-syntax . G4e5f) (set! . G4e5e) (import . G4e5d) (begin . G4e5c) (define-syntax . G4e5a) (define . G4e59)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G515a '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4e89) (unquote . G4e88) (delay . G4e81) (or . G4e7f) (and . G4e7e) (do . G4e7d) (cond . G4e7c) (let* . G4e7b) (let . G4e7a) (quasiquote . G4e74) (syntax-rules . G4e73) (case . G4e6e) (if . G4e6a) (letrec . G4e68) (lambda . G4e65) (quote . G4e62) (letrec-syntax . G4e60) (let-syntax . G4e5f) (set! . G4e5e) (begin . G4e5c) (define-syntax . G4e5a) (define . G4e59)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G515b '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-upcase . G50c3) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba) (call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object . G507e) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (scheme-report-environment . G3156) (quotient . G503f) (null-environment . G3154) (remainder . G503e) (modulo . G503d) (inexact->exact . G503c) (force . G503b) (exact->inexact . G503a) (string-fill! . G5038) (string-set! . G5037) (set-cdr! . G5036) (set-car! . G5035) (memv . G502f) (memq . G502e) (member . G502c) (assv . G5024) (assq . G5023) (assoc . G5021) (eval . G315a) (zero? . G4f5e) (vector? . G4f5d) (vector-set! . G4f5c) (vector-ref . G4f5b) (vector-length . G4f59) (vector-fill! . G4f57) (vector->list . G4f56) (vector . G4f55) (values . G4f54) (truncate . G4f53) (tan . G4f52) (symbol? . G4f51) (symbol->string . G4f4f) (substring . G4f4e) (string? . G4f4d) (string>? . G4f4c) (string>=? . G4f4b) (string=? . G4f4a) (string<? . G4f49) (string<=? . G4f48) (string-ref . G4f47) (string-length . G4f46) (string-copy . G4f44) (string-append . G4f43) (string->symbol . G4f42) (string->number . G4f41) (string->list . G4f40) (string . G4f3f) (sqrt . G4f3e) (sin . G4f3d) (round . G4f3c) (reverse . G4f3b) (real? . G4f3a) (real-part . G4f38) (rationalize . G4f37) (rational? . G4f36) (procedure? . G4f34) (positive? . G4f33) (pair? . G4f32) (odd? . G4f31) (numerator . G4f30) (number? . G4f2f) (number->string . G4f2e) (not . G4f2c) (negative? . G4f2b) (min . G4f29) (max . G4f28) (map . G4f27) (make-vector . G4f26) (make-string . G4f25) (make-rectangular . G4f24) (make-polar . G4f23) (magnitude . G4f22) (log . G4f21) (list? . G4f20) (list-tail . G4f1f) (list-ref . G4f1e) (list->vector . G4f1d) (list->string . G4f1c) (list . G4f1b) (length . G4f1a) (lcm . G4f19) (integer? . G4f18) (integer->char . G4f16) (inexact? . G4f14) (imag-part . G4f12) (gcd . G4f11) (for-each . G4f10) (floor . G4f0f) (expt . G4f0d) (exp . G4f0c) (exact? . G4f0b) (even? . G4f08) (eqv? . G4f06) (equal? . G4f05) (eq? . G4f04) (dynamic-wind . G4f03) (denominator . G4efc) (cos . G4efb) (cons . G4efa) (complex? . G4ef9) (char? . G4ef8) (char>? . G4ef7) (char>=? . G4ef6) (char=? . G4ef5) (char<? . G4ef4) (char<=? . G4ef3) (char->integer . G4ef2) (ceiling . G4ef1) (call-with-values . G4ef0) (call-with-current-continuation . G4eee) (cddddr . G4eed) (cdddar . G4eec) (cddadr . G4eeb) (cddaar . G4eea) (cdaddr . G4ee9) (cdadar . G4ee8) (cdaadr . G4ee7) (cdaaar . G4ee6) (cadddr . G4ee5) (caddar . G4ee4) (cadadr . G4ee3) (cadaar . G4ee2) (caaddr . G4ee1) (caadar . G4ee0) (caaadr . G4edf) (caaaar . G4ede) (cdddr . G4edd) (cddar . G4edc) (cdadr . G4edb) (cdaar . G4eda) (caddr . G4ed9) (cadar . G4ed8) (caadr . G4ed7) (caaar . G4ed6) (cddr . G4ed5) (cdar . G4ed4) (cadr . G4ed3) (caar . G4ed2) (cdr . G4ed1) (car . G4ed0) (boolean? . G4ecf) (atan . G4ecd) (asin . G4ecb) (apply . G4eca) (append . G4ec9) (angle . G4ec8) (acos . G4ec7) (abs . G4ec6) (/ . G4ec5) (* . G4ec4) (- . G4ec3) (+ . G4ec2) (>= . G4ec1) (> . G4ec0) (= . G4ebf) (<= . G4ebe) (< . G4ebd) (unquote-splicing . G4e89) (unquote . G4e88) (delay . G4e81) (or . G4e7f) (and . G4e7e) (do . G4e7d) (cond . G4e7c) (let* . G4e7b) (let . G4e7a) (quasiquote . G4e74) (syntax-rules . G4e73) (case . G4e6e) (if . G4e6a) (letrec . G4e68) (lambda . G4e65) (quote . G4e62) (letrec-syntax . G4e60) (let-syntax . G4e5f) (set! . G4e5e) (begin . G4e5c) (define-syntax . G4e5a) (define . G4e59)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G515c '(psyntax modules) '() '() '() '() '((module . G4e5b)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G515d '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G515e '(rnrs) '(6) '() '() '() '((regexp? . G5119) (string-upcase . G50d6) (string-titlecase . G50d5) (string-normalize-nfkd . G50d4) (string-normalize-nfkc . G50d3) (string-normalize-nfd . G50d2) (string-normalize-nfc . G50d1) (string-foldcase . G50d0) (string-downcase . G50cf) (string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-title-case? . G50c7) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-general-category . G50c4) (char-upcase . G50c3) (char-titlecase . G50c2) (char-foldcase . G50c1) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba) (make-variable-transformer . G2e87) (identifier? . G317e) (generate-temporaries . G3168) (free-identifier=? . G316a) (syntax->datum . G3182) (datum->syntax . G3180) (bound-identifier=? . G316c) (record-type-descriptor? . G50b9) (record-predicate . G50b8) (record-mutator . G50b7) (record-constructor . G50b6) (record-accessor . G50b5) (make-record-type-descriptor . G50b4) (make-record-constructor-descriptor . G50b3) (record? . G50b2) (record-type-uid . G50b1) (record-type-sealed? . G50b0) (record-type-parent . G50af) (record-type-opaque? . G50ae) (record-type-name . G50ad) (record-type-generative? . G50ac) (record-type-field-names . G50ab) (record-rtd . G50aa) (record-field-mutable? . G50a9) (delete-file . G50a8) (file-exists? . G50a7) (vector-sort! . G50a6) (vector-sort . G50a5) (list-sort . G50a4) (symbol-hash . G50a3) (string-ci-hash . G50a2) (string-hash . G50a1) (equal-hash . G50a0) (hashtable-equivalence-function . G509f) (make-hashtable . G509e) (hashtable-hash-function . G509d) (make-eqv-hashtable . G509c) (make-eq-hashtable . G509b) (hashtable? . G509a) (hashtable-update! . G5099) (hashtable-size . G5098) (hashtable-set! . G5097) (hashtable-ref . G5096) (hashtable-mutable? . G5095) (hashtable-keys . G5094) (hashtable-entries . G5093) (hashtable-delete! . G5092) (hashtable-copy . G5091) (hashtable-contains? . G5090) (hashtable-clear! . G508f) (call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (utf-8-codec . G5078) (utf-16-codec . G5077) (transcoder-error-handling-mode . G5076) (transcoder-eol-style . G5075) (transcoder-codec . G5074) (transcoded-port . G5073) (textual-port? . G5072) (string->bytevector . G5071) (standard-output-port . G5070) (standard-input-port . G506f) (standard-error-port . G506e) (set-port-position! . G506d) (put-u8 . G506c) (put-string . G506b) (put-datum . G506a) (put-char . G5069) (put-bytevector . G5068) (port? . G5067) (port-transcoder . G5066) (port-position . G5065) (port-has-set-port-position!? . G5064) (port-has-port-position? . G5063) (port-eof? . G5062) (output-port-buffer-mode . G5061) (open-string-output-port . G5060) (open-string-input-port . G505f) (open-file-output-port . G505e) (open-file-input/output-port . G505d) (open-file-input-port . G505c) (open-bytevector-output-port . G505b) (open-bytevector-input-port . G505a) (native-transcoder . G5059) (native-eol-style . G5058) (make-transcoder . G5057) (latin-1-codec . G5056) (make-i/o-write-error . G4c97) (make-i/o-read-error . G4c83) (make-i/o-port-error . G4d2e) (make-i/o-invalid-position-error . G4cac) (make-i/o-filename-error . G4cc5) (make-i/o-file-protection-error . G4cdd) (make-i/o-file-is-read-only-error . G4cf1) (make-i/o-file-does-not-exist-error . G4d19) (make-i/o-file-already-exists-error . G4d05) (make-i/o-error . G4c6f) (make-i/o-encoding-error . G4d5b) (make-i/o-decoding-error . G4d46) (make-custom-textual-output-port . G5055) (make-custom-textual-input/output-port . G5054) (make-custom-textual-input-port . G5053) (make-custom-binary-output-port . G5052) (make-custom-binary-input/output-port . G5051) (make-custom-binary-input-port . G5050) (make-bytevector . G504f) (lookahead-u8 . G504e) (lookahead-char . G504d) (i/o-write-error? . G4c99) (i/o-read-error? . G4c85) (i/o-port-error? . G4d32) (i/o-invalid-position-error? . G4cb0) (i/o-filename-error? . G4cc9) (i/o-file-protection-error? . G4cdf) (i/o-file-is-read-only-error? . G4cf3) (i/o-file-does-not-exist-error? . G4d1b) (i/o-file-already-exists-error? . G4d07) (i/o-error? . G4c71) (i/o-error-port . G4d34) (i/o-error-filename . G4ccb) (i/o-encoding-error? . G4d5f) (i/o-encoding-error-char . G4d61) (i/o-decoding-error? . G4d48) (get-u8 . G504c) (get-string-n! . G504b) (get-string-n . G504a) (get-string-all . G5049) (get-line . G5048) (get-datum . G5047) (get-char . G5046) (get-bytevector-some . G5045) (get-bytevector-n! . G5044) (get-bytevector-n . G5043) (get-bytevector-all . G5042) (flush-output-port . G5041) (close-port . G5040) (exit . G5039) (command-line . G4dba) (remove . G5034) (remv . G5033) (remp . G5032) (remq . G5031) (partition . G5030) (memv . G502f) (memq . G502e) (memp . G502d) (member . G502c) (exists . G502b) (for-all . G502a) (fold-right . G5029) (fold-left . G5028) (find . G5027) (filter . G5026) (cons* . G5025) (assv . G5024) (assq . G5023) (assp . G5022) (assoc . G5021) (call-with-string-output-port . G5020) (call-with-port . G501f) (call-with-bytevector-output-port . G501e) (bytevector->string . G501d) (buffer-mode? . G501c) (binary-port? . G501b) (with-exception-handler . G501a) (raise-continuable . G5019) (raise . G5018) (make-enumeration . G5017) (enum-set=? . G5016) (enum-set-universe . G5015) (enum-set-union . G5014) (enum-set-subset? . G5013) (enum-set-projection . G5012) (enum-set-member? . G5011) (enum-set-intersection . G5010) (enum-set-indexer . G500f) (enum-set-difference . G500e) (enum-set-constructor . G500d) (enum-set-complement . G500c) (enum-set->list . G500b) (who-condition? . G4b8d) (warning? . G4b0d) (violation? . G4b49) (undefined-violation? . G4bfd) (syntax-violation? . G4be5) (syntax-violation-subform . G4be9) (syntax-violation-form . G4be7) (syntax-violation . G317c) (simple-conditions . G500a) (serious-condition? . G4b21) (non-continuable-violation? . G4ba3) (message-condition? . G4af7) (make-who-condition . G4b89) (make-warning . G4b0b) (make-violation . G4b47) (make-undefined-violation . G4bfb) (make-syntax-violation . G4bdf) (make-serious-condition . G4b1f) (make-non-continuable-violation . G4ba1) (make-message-condition . G4af3) (make-lexical-violation . G4bc9) (make-irritants-condition . G4b70) (make-implementation-restriction-violation . G4bb5) (make-error . G4b33) (make-assertion-violation . G4b5b) (lexical-violation? . G4bcb) (irritants-condition? . G4b74) (implementation-restriction-violation? . G4bb7) (error? . G4b35) (condition-who . G4b8f) (condition-predicate . G5009) (condition-message . G4af9) (condition-irritants . G4b76) (condition-accessor . G5008) (condition . G5007) (assertion-violation? . G4b5d) (condition? . G5006) (utf32->string . G5005) (utf16->string . G5004) (utf8->string . G5003) (uint-list->bytevector . G5002) (u8-list->bytevector . G5001) (string->utf8 . G5000) (string->utf32 . G4fff) (string->utf16 . G4ffe) (sint-list->bytevector . G4ffd) (native-endianness . G4ffc) (bytevector? . G4ffb) (bytevector=? . G4ffa) (bytevector-uint-set! . G4ff9) (bytevector-uint-ref . G4ff8) (bytevector-u8-set! . G4ff7) (bytevector-u8-ref . G4ff6) (bytevector-u64-set! . G4ff5) (bytevector-u64-ref . G4ff4) (bytevector-u64-native-set! . G4ff3) (bytevector-u64-native-ref . G4ff2) (bytevector-u32-set! . G4ff1) (bytevector-u32-ref . G4ff0) (bytevector-u32-native-set! . G4fef) (bytevector-u32-native-ref . G4fee) (bytevector-u16-set! . G4fed) (bytevector-u16-ref . G4fec) (bytevector-u16-native-set! . G4feb) (bytevector-u16-native-ref . G4fea) (bytevector-sint-set! . G4fe9) (bytevector-sint-ref . G4fe8) (bytevector-s8-set! . G4fe7) (bytevector-s8-ref . G4fe6) (bytevector-s64-set! . G4fe5) (bytevector-s64-ref . G4fe4) (bytevector-s64-native-set! . G4fe3) (bytevector-s64-native-ref . G4fe2) (bytevector-s32-set! . G4fe1) (bytevector-s32-ref . G4fe0) (bytevector-s32-native-set! . G4fdf) (bytevector-s32-native-ref . G4fde) (bytevector-s16-set! . G4fdd) (bytevector-s16-ref . G4fdc) (bytevector-s16-native-set! . G4fdb) (bytevector-s16-native-ref . G4fda) (bytevector-length . G4fd9) (bytevector-ieee-single-native-ref . G4fd8) (bytevector-ieee-double-ref . G4fd7) (bytevector-ieee-double-native-set! . G4fd6) (bytevector-ieee-double-native-ref . G4fd5) (bytevector-fill! . G4fd4) (bytevector-copy! . G4fd3) (bytevector-copy . G4fd2) (bytevector->uint-list . G4fd1) (bytevector->u8-list . G4fd0) (bytevector->sint-list . G4fcf) (no-nans-violation? . G4fce) (no-infinities-violation? . G4fcd) (make-no-nans-violation . G4fcc) (make-no-infinities-violation . G4fcb) (real->flonum . G4fca) (flzero? . G4fc9) (fltruncate . G4fc8) (fltan . G4fc7) (flsqrt . G4fc6) (flsin . G4fc5) (flround . G4fc4) (flpositive? . G4fc3) (flonum? . G4fc2) (flodd? . G4fc1) (flnumerator . G4fc0) (flnegative? . G4fbf) (flnan? . G4fbe) (flmod0 . G4fbd) (flmod . G4fbc) (flmin . G4fbb) (flmax . G4fba) (fllog . G4fb9) (flinteger? . G4fb8) (flinfinite? . G4fb7) (flfloor . G4fb6) (flfinite? . G4fb5) (flexpt . G4fb4) (flexp . G4fb3) (fleven? . G4fb2) (fldiv0-and-mod0 . G4fb1) (fldiv0 . G4fb0) (fldiv-and-mod . G4faf) (fldiv . G4fae) (fldenominator . G4fad) (flcos . G4fac) (flceiling . G4fab) (flatan . G4faa) (flasin . G4fa9) (flacos . G4fa8) (flabs . G4fa7) (fl>? . G4fa6) (fl>=? . G4fa5) (fl=? . G4fa4) (fl<? . G4fa3) (fl<=? . G4fa2) (fl/ . G4fa1) (fl- . G4fa0) (fl+ . G4f9f) (fl* . G4f9e) (fixnum->flonum . G4f9d) (fxzero? . G4f9c) (fxxor . G4f9b) (fxrotate-bit-field . G4f9a) (fxreverse-bit-field . G4f99) (fxpositive? . G4f98) (fxodd? . G4f97) (fxnot . G4f96) (fxnegative? . G4f95) (fxmod0 . G4f94) (fxmod . G4f93) (fxmin . G4f92) (fxmax . G4f91) (fxlength . G4f90) (fxior . G4f8f) (fxif . G4f8e) (fxfirst-bit-set . G4f8d) (fxeven? . G4f8c) (fxdiv0-and-mod0 . G4f8b) (fxdiv0 . G4f8a) (fxdiv-and-mod . G4f89) (fxdiv . G4f88) (fxcopy-bit-field . G4f87) (fxcopy-bit . G4f86) (fxbit-set? . G4f85) (fxbit-field . G4f84) (fxbit-count . G4f83) (fxarithmetic-shift-right . G4f82) (fxarithmetic-shift-left . G4f81) (fxarithmetic-shift . G4f80) (fxand . G4f7f) (fx>? . G4f7e) (fx>=? . G4f7d) (fx=? . G4f7c) (fx<? . G4f7b) (fx<=? . G4f7a) (fx-/carry . G4f79) (fx- . G4f78) (fx+/carry . G4f77) (fx+ . G4f76) (fx*/carry . G4f75) (fx* . G4f74) (greatest-fixnum . G4f73) (least-fixnum . G4f72) (fixnum-width . G4f71) (fixnum? . G4f70) (bitwise-rotate-bit-field . G4f6f) (bitwise-reverse-bit-field . G4f6e) (bitwise-length . G4f6d) (bitwise-if . G4f6c) (bitwise-first-bit-set . G4f6b) (bitwise-copy-bit-field . G4f6a) (bitwise-copy-bit . G4f69) (bitwise-bit-set? . G4f68) (bitwise-bit-field . G4f67) (bitwise-bit-count . G4f66) (bitwise-xor . G4f65) (bitwise-ior . G4f64) (bitwise-and . G4f63) (bitwise-not . G4f62) (bitwise-arithmetic-shift-right . G4f61) (bitwise-arithmetic-shift-left . G4f60) (bitwise-arithmetic-shift . G4f5f) (zero? . G4f5e) (vector? . G4f5d) (vector-set! . G4f5c) (vector-ref . G4f5b) (vector-map . G4f5a) (vector-length . G4f59) (vector-for-each . G4f58) (vector-fill! . G4f57) (vector->list . G4f56) (vector . G4f55) (values . G4f54) (truncate . G4f53) (tan . G4f52) (symbol? . G4f51) (symbol=? . G4f50) (symbol->string . G4f4f) (substring . G4f4e) (string? . G4f4d) (string>? . G4f4c) (string>=? . G4f4b) (string=? . G4f4a) (string<? . G4f49) (string<=? . G4f48) (string-ref . G4f47) (string-length . G4f46) (string-for-each . G4f45) (string-copy . G4f44) (string-append . G4f43) (string->symbol . G4f42) (string->number . G4f41) (string->list . G4f40) (string . G4f3f) (sqrt . G4f3e) (sin . G4f3d) (round . G4f3c) (reverse . G4f3b) (real? . G4f3a) (real-valued? . G4f39) (real-part . G4f38) (rationalize . G4f37) (rational? . G4f36) (rational-valued? . G4f35) (procedure? . G4f34) (positive? . G4f33) (pair? . G4f32) (odd? . G4f31) (numerator . G4f30) (number? . G4f2f) (number->string . G4f2e) (null? . G4f2d) (not . G4f2c) (negative? . G4f2b) (nan? . G4f2a) (min . G4f29) (max . G4f28) (map . G4f27) (make-vector . G4f26) (make-string . G4f25) (make-rectangular . G4f24) (make-polar . G4f23) (magnitude . G4f22) (log . G4f21) (list? . G4f20) (list-tail . G4f1f) (list-ref . G4f1e) (list->vector . G4f1d) (list->string . G4f1c) (list . G4f1b) (length . G4f1a) (lcm . G4f19) (integer? . G4f18) (integer-valued? . G4f17) (integer->char . G4f16) (infinite? . G4f15) (inexact? . G4f14) (inexact . G4f13) (imag-part . G4f12) (gcd . G4f11) (for-each . G4f10) (floor . G4f0f) (finite? . G4f0e) (expt . G4f0d) (exp . G4f0c) (exact? . G4f0b) (exact-integer-sqrt . G4f0a) (exact . G4f09) (even? . G4f08) (error . G4f07) (eqv? . G4f06) (equal? . G4f05) (eq? . G4f04) (dynamic-wind . G4f03) (div0-and-mod0 . G4f02) (mod0 . G4f01) (div0 . G4f00) (div-and-mod . G4eff) (mod . G4efe) (div . G4efd) (denominator . G4efc) (cos . G4efb) (cons . G4efa) (complex? . G4ef9) (char? . G4ef8) (char>? . G4ef7) (char>=? . G4ef6) (char=? . G4ef5) (char<? . G4ef4) (char<=? . G4ef3) (char->integer . G4ef2) (ceiling . G4ef1) (call-with-values . G4ef0) (call/cc . G4eef) (call-with-current-continuation . G4eee) (cddddr . G4eed) (cdddar . G4eec) (cddadr . G4eeb) (cddaar . G4eea) (cdaddr . G4ee9) (cdadar . G4ee8) (cdaadr . G4ee7) (cdaaar . G4ee6) (cadddr . G4ee5) (caddar . G4ee4) (cadadr . G4ee3) (cadaar . G4ee2) (caaddr . G4ee1) (caadar . G4ee0) (caaadr . G4edf) (caaaar . G4ede) (cdddr . G4edd) (cddar . G4edc) (cdadr . G4edb) (cdaar . G4eda) (caddr . G4ed9) (cadar . G4ed8) (caadr . G4ed7) (caaar . G4ed6) (cddr . G4ed5) (cdar . G4ed4) (cadr . G4ed3) (caar . G4ed2) (cdr . G4ed1) (car . G4ed0) (boolean? . G4ecf) (boolean=? . G4ece) (atan . G4ecd) (assertion-violation . G4ecc) (asin . G4ecb) (apply . G4eca) (append . G4ec9) (angle . G4ec8) (acos . G4ec7) (abs . G4ec6) (/ . G4ec5) (* . G4ec4) (- . G4ec3) (+ . G4ec2) (>= . G4ec1) (> . G4ec0) (= . G4ebf) (<= . G4ebe) (< . G4ebd) (&no-nans . G4eba) (&no-infinities . G4eb9) (&i/o-encoding . G4eb8) (&i/o-decoding . G4eb7) (&i/o-port . G4eb6) (&i/o-file-does-not-exist . G4eb5) (&i/o-file-already-exists . G4eb4) (&i/o-file-is-read-only . G4eb3) (&i/o-file-protection . G4eb2) (&i/o-filename . G4eb1) (&i/o-invalid-position . G4eb0) (&i/o-write . G4eaf) (&i/o-read . G4eae) (&i/o . G4ead) (&undefined . G4eac) (&syntax . G4eab) (&lexical . G4eaa) (&implementation-restriction . G4ea9) (&non-continuable . G4ea8) (&who . G4ea7) (&irritants . G4ea6) (&assertion . G4ea5) (&violation . G4ea4) (&error . G4ea3) (&serious . G4ea2) (&warning . G4ea1) (&message . G4ea0) (&condition . G4e9f) (define-condition-type . G4e9e) (define-enumeration . G4e9d) (define-record-type . G4e9c) (parent-rtd . G4e9b) (nongenerative . G4e9a) (opaque . G4e99) (sealed . G4e98) (protocol . G4e97) (parent . G4e96) (immutable . G4e95) (mutable . G4e94) (fields . G4e93) (error-handling-mode . G4e92) (file-options . G4e91) (buffer-mode . G4e90) (eol-style . G4e8f) (guard . G4e8e) (unsyntax-splicing . G4e8b) (unsyntax . G4e8a) (unquote-splicing . G4e89) (unquote . G4e88) (_ . G4e87) (else . G4e86) (=> . G4e85) (... . G4e84) (assert . G4e83) (endianness . G4e82) (or . G4e7f) (and . G4e7e) (do . G4e7d) (cond . G4e7c) (let* . G4e7b) (let . G4e7a) (let*-values . G4e79) (let-values . G4e78) (identifier-syntax . G4e77) (with-syntax . G4e76) (quasisyntax . G4e75) (quasiquote . G4e74) (syntax-rules . G4e73) (record-constructor-descriptor . G4e70) (record-type-descriptor . G4e6f) (case . G4e6e) (unless . G4e6c) (when . G4e6b) (if . G4e6a) (letrec* . G4e69) (letrec . G4e68) (case-lambda . G4e66) (lambda . G4e65) (syntax . G4e64) (syntax-case . G4e63) (quote . G4e62) (letrec-syntax . G4e60) (let-syntax . G4e5f) (set! . G4e5e) (begin . G4e5c) (define-syntax . G4e5a) (define . G4e59)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G515f '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3156) (quotient . G503f) (null-environment . G3154) (remainder . G503e) (modulo . G503d) (inexact->exact . G503c) (force . G503b) (exact->inexact . G503a) (delay . G4e81)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5160 '(rnrs control) '(6) '() '() '() '((do . G4e7d) (unless . G4e6c) (when . G4e6b) (case-lambda . G4e66)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5161 '(rnrs eval) '(6) '() '() '() '((eval . G315a) (environment . G3152)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5162 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G5036) (set-car! . G5035)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5163 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G5038) (string-set! . G5037)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5164 '(rnrs programs) '(6) '() '() '() '((exit . G5039) (command-line . G4dba)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5165 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e87) (identifier? . G317e) (generate-temporaries . G3168) (free-identifier=? . G316a) (syntax->datum . G3182) (datum->syntax . G3180) (bound-identifier=? . G316c) (syntax-violation . G317c) (unsyntax-splicing . G4e8b) (unsyntax . G4e8a) (_ . G4e87) (... . G4e84) (with-syntax . G4e76) (quasisyntax . G4e75) (syntax . G4e64) (syntax-case . G4e63)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5166 '(rnrs files) '(6) '() '() '() '((delete-file . G50a8) (file-exists? . G50a7) (make-i/o-write-error . G4c97) (make-i/o-read-error . G4c83) (make-i/o-port-error . G4d2e) (make-i/o-invalid-position-error . G4cac) (make-i/o-filename-error . G4cc5) (make-i/o-file-protection-error . G4cdd) (make-i/o-file-is-read-only-error . G4cf1) (make-i/o-file-does-not-exist-error . G4d19) (make-i/o-file-already-exists-error . G4d05) (make-i/o-error . G4c6f) (i/o-write-error? . G4c99) (i/o-read-error? . G4c85) (i/o-port-error? . G4d32) (i/o-invalid-position-error? . G4cb0) (i/o-filename-error? . G4cc9) (i/o-file-protection-error? . G4cdf) (i/o-file-is-read-only-error? . G4cf3) (i/o-file-does-not-exist-error? . G4d1b) (i/o-file-already-exists-error? . G4d07) (i/o-error? . G4c71) (i/o-error-port . G4d34) (i/o-error-filename . G4ccb) (&i/o-port . G4eb6) (&i/o-file-does-not-exist . G4eb5) (&i/o-file-already-exists . G4eb4) (&i/o-file-is-read-only . G4eb3) (&i/o-file-protection . G4eb2) (&i/o-filename . G4eb1) (&i/o-invalid-position . G4eb0) (&i/o-write . G4eaf) (&i/o-read . G4eae) (&i/o . G4ead)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5167 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G50a6) (vector-sort . G50a5) (list-sort . G50a4)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5168 '(rnrs base) '(6) '() '() '() '((zero? . G4f5e) (vector? . G4f5d) (vector-set! . G4f5c) (vector-ref . G4f5b) (vector-map . G4f5a) (vector-length . G4f59) (vector-for-each . G4f58) (vector-fill! . G4f57) (vector->list . G4f56) (vector . G4f55) (values . G4f54) (truncate . G4f53) (tan . G4f52) (symbol? . G4f51) (symbol=? . G4f50) (symbol->string . G4f4f) (substring . G4f4e) (string? . G4f4d) (string>? . G4f4c) (string>=? . G4f4b) (string=? . G4f4a) (string<? . G4f49) (string<=? . G4f48) (string-ref . G4f47) (string-length . G4f46) (string-for-each . G4f45) (string-copy . G4f44) (string-append . G4f43) (string->symbol . G4f42) (string->number . G4f41) (string->list . G4f40) (string . G4f3f) (sqrt . G4f3e) (sin . G4f3d) (round . G4f3c) (reverse . G4f3b) (real? . G4f3a) (real-valued? . G4f39) (real-part . G4f38) (rationalize . G4f37) (rational? . G4f36) (rational-valued? . G4f35) (procedure? . G4f34) (positive? . G4f33) (pair? . G4f32) (odd? . G4f31) (numerator . G4f30) (number? . G4f2f) (number->string . G4f2e) (null? . G4f2d) (not . G4f2c) (negative? . G4f2b) (nan? . G4f2a) (min . G4f29) (max . G4f28) (map . G4f27) (make-vector . G4f26) (make-string . G4f25) (make-rectangular . G4f24) (make-polar . G4f23) (magnitude . G4f22) (log . G4f21) (list? . G4f20) (list-tail . G4f1f) (list-ref . G4f1e) (list->vector . G4f1d) (list->string . G4f1c) (list . G4f1b) (length . G4f1a) (lcm . G4f19) (integer? . G4f18) (integer-valued? . G4f17) (integer->char . G4f16) (infinite? . G4f15) (inexact? . G4f14) (inexact . G4f13) (imag-part . G4f12) (gcd . G4f11) (for-each . G4f10) (floor . G4f0f) (finite? . G4f0e) (expt . G4f0d) (exp . G4f0c) (exact? . G4f0b) (exact-integer-sqrt . G4f0a) (exact . G4f09) (even? . G4f08) (error . G4f07) (eqv? . G4f06) (equal? . G4f05) (eq? . G4f04) (dynamic-wind . G4f03) (div0-and-mod0 . G4f02) (mod0 . G4f01) (div0 . G4f00) (div-and-mod . G4eff) (mod . G4efe) (div . G4efd) (denominator . G4efc) (cos . G4efb) (cons . G4efa) (complex? . G4ef9) (char? . G4ef8) (char>? . G4ef7) (char>=? . G4ef6) (char=? . G4ef5) (char<? . G4ef4) (char<=? . G4ef3) (char->integer . G4ef2) (ceiling . G4ef1) (call-with-values . G4ef0) (call/cc . G4eef) (call-with-current-continuation . G4eee) (cddddr . G4eed) (cdddar . G4eec) (cddadr . G4eeb) (cddaar . G4eea) (cdaddr . G4ee9) (cdadar . G4ee8) (cdaadr . G4ee7) (cdaaar . G4ee6) (cadddr . G4ee5) (caddar . G4ee4) (cadadr . G4ee3) (cadaar . G4ee2) (caaddr . G4ee1) (caadar . G4ee0) (caaadr . G4edf) (caaaar . G4ede) (cdddr . G4edd) (cddar . G4edc) (cdadr . G4edb) (cdaar . G4eda) (caddr . G4ed9) (cadar . G4ed8) (caadr . G4ed7) (caaar . G4ed6) (cddr . G4ed5) (cdar . G4ed4) (cadr . G4ed3) (caar . G4ed2) (cdr . G4ed1) (car . G4ed0) (boolean? . G4ecf) (boolean=? . G4ece) (atan . G4ecd) (assertion-violation . G4ecc) (asin . G4ecb) (apply . G4eca) (append . G4ec9) (angle . G4ec8) (acos . G4ec7) (abs . G4ec6) (/ . G4ec5) (* . G4ec4) (- . G4ec3) (+ . G4ec2) (>= . G4ec1) (> . G4ec0) (= . G4ebf) (<= . G4ebe) (< . G4ebd) (unquote-splicing . G4e89) (unquote . G4e88) (_ . G4e87) (else . G4e86) (=> . G4e85) (... . G4e84) (assert . G4e83) (or . G4e7f) (and . G4e7e) (cond . G4e7c) (let* . G4e7b) (let . G4e7a) (let*-values . G4e79) (let-values . G4e78) (identifier-syntax . G4e77) (quasiquote . G4e74) (syntax-rules . G4e73) (case . G4e6e) (if . G4e6a) (letrec* . G4e69) (letrec . G4e68) (lambda . G4e65) (quote . G4e62) (letrec-syntax . G4e60) (let-syntax . G4e5f) (set! . G4e5e) (begin . G4e5c) (define-syntax . G4e5a) (define . G4e59)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5169 '(rnrs lists) '(6) '() '() '() '((remove . G5034) (remv . G5033) (remp . G5032) (remq . G5031) (partition . G5030) (memv . G502f) (memq . G502e) (memp . G502d) (member . G502c) (exists . G502b) (for-all . G502a) (fold-right . G5029) (fold-left . G5028) (find . G5027) (filter . G5026) (cons* . G5025) (assv . G5024) (assq . G5023) (assp . G5022) (assoc . G5021)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G516a '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (make-i/o-write-error . G4c97) (make-i/o-read-error . G4c83) (make-i/o-port-error . G4d2e) (make-i/o-invalid-position-error . G4cac) (make-i/o-filename-error . G4cc5) (make-i/o-file-protection-error . G4cdd) (make-i/o-file-is-read-only-error . G4cf1) (make-i/o-file-does-not-exist-error . G4d19) (make-i/o-file-already-exists-error . G4d05) (make-i/o-error . G4c6f) (i/o-write-error? . G4c99) (i/o-read-error? . G4c85) (i/o-port-error? . G4d32) (i/o-invalid-position-error? . G4cb0) (i/o-filename-error? . G4cc9) (i/o-file-protection-error? . G4cdf) (i/o-file-is-read-only-error? . G4cf3) (i/o-file-does-not-exist-error? . G4d1b) (i/o-file-already-exists-error? . G4d07) (i/o-error? . G4c71) (i/o-error-port . G4d34) (i/o-error-filename . G4ccb) (&i/o-port . G4eb6) (&i/o-file-does-not-exist . G4eb5) (&i/o-file-already-exists . G4eb4) (&i/o-file-is-read-only . G4eb3) (&i/o-file-protection . G4eb2) (&i/o-filename . G4eb1) (&i/o-invalid-position . G4eb0) (&i/o-write . G4eaf) (&i/o-read . G4eae) (&i/o . G4ead)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G516b '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G504f) (utf32->string . G5005) (utf16->string . G5004) (utf8->string . G5003) (uint-list->bytevector . G5002) (u8-list->bytevector . G5001) (string->utf8 . G5000) (string->utf32 . G4fff) (string->utf16 . G4ffe) (sint-list->bytevector . G4ffd) (native-endianness . G4ffc) (bytevector? . G4ffb) (bytevector=? . G4ffa) (bytevector-uint-set! . G4ff9) (bytevector-uint-ref . G4ff8) (bytevector-u8-set! . G4ff7) (bytevector-u8-ref . G4ff6) (bytevector-u64-set! . G4ff5) (bytevector-u64-ref . G4ff4) (bytevector-u64-native-set! . G4ff3) (bytevector-u64-native-ref . G4ff2) (bytevector-u32-set! . G4ff1) (bytevector-u32-ref . G4ff0) (bytevector-u32-native-set! . G4fef) (bytevector-u32-native-ref . G4fee) (bytevector-u16-set! . G4fed) (bytevector-u16-ref . G4fec) (bytevector-u16-native-set! . G4feb) (bytevector-u16-native-ref . G4fea) (bytevector-sint-set! . G4fe9) (bytevector-sint-ref . G4fe8) (bytevector-s8-set! . G4fe7) (bytevector-s8-ref . G4fe6) (bytevector-s64-set! . G4fe5) (bytevector-s64-ref . G4fe4) (bytevector-s64-native-set! . G4fe3) (bytevector-s64-native-ref . G4fe2) (bytevector-s32-set! . G4fe1) (bytevector-s32-ref . G4fe0) (bytevector-s32-native-set! . G4fdf) (bytevector-s32-native-ref . G4fde) (bytevector-s16-set! . G4fdd) (bytevector-s16-ref . G4fdc) (bytevector-s16-native-set! . G4fdb) (bytevector-s16-native-ref . G4fda) (bytevector-length . G4fd9) (bytevector-ieee-single-native-ref . G4fd8) (bytevector-ieee-double-ref . G4fd7) (bytevector-ieee-double-native-set! . G4fd6) (bytevector-ieee-double-native-ref . G4fd5) (bytevector-fill! . G4fd4) (bytevector-copy! . G4fd3) (bytevector-copy . G4fd2) (bytevector->uint-list . G4fd1) (bytevector->u8-list . G4fd0) (bytevector->sint-list . G4fcf) (endianness . G4e82)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G516c '(rnrs unicode) '(6) '() '() '() '((string-upcase . G50d6) (string-titlecase . G50d5) (string-normalize-nfkd . G50d4) (string-normalize-nfkc . G50d3) (string-normalize-nfd . G50d2) (string-normalize-nfc . G50d1) (string-foldcase . G50d0) (string-downcase . G50cf) (string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-title-case? . G50c7) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-general-category . G50c4) (char-upcase . G50c3) (char-titlecase . G50c2) (char-foldcase . G50c1) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G516d '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G501a) (raise-continuable . G5019) (raise . G5018) (guard . G4e8e) (else . G4e86) (=> . G4e85)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G516e '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4f6f) (bitwise-reverse-bit-field . G4f6e) (bitwise-length . G4f6d) (bitwise-if . G4f6c) (bitwise-first-bit-set . G4f6b) (bitwise-copy-bit-field . G4f6a) (bitwise-copy-bit . G4f69) (bitwise-bit-set? . G4f68) (bitwise-bit-field . G4f67) (bitwise-bit-count . G4f66) (bitwise-xor . G4f65) (bitwise-ior . G4f64) (bitwise-and . G4f63) (bitwise-not . G4f62) (bitwise-arithmetic-shift-right . G4f61) (bitwise-arithmetic-shift-left . G4f60) (bitwise-arithmetic-shift . G4f5f)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G516f '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f9c) (fxxor . G4f9b) (fxrotate-bit-field . G4f9a) (fxreverse-bit-field . G4f99) (fxpositive? . G4f98) (fxodd? . G4f97) (fxnot . G4f96) (fxnegative? . G4f95) (fxmod0 . G4f94) (fxmod . G4f93) (fxmin . G4f92) (fxmax . G4f91) (fxlength . G4f90) (fxior . G4f8f) (fxif . G4f8e) (fxfirst-bit-set . G4f8d) (fxeven? . G4f8c) (fxdiv0-and-mod0 . G4f8b) (fxdiv0 . G4f8a) (fxdiv-and-mod . G4f89) (fxdiv . G4f88) (fxcopy-bit-field . G4f87) (fxcopy-bit . G4f86) (fxbit-set? . G4f85) (fxbit-field . G4f84) (fxbit-count . G4f83) (fxarithmetic-shift-right . G4f82) (fxarithmetic-shift-left . G4f81) (fxarithmetic-shift . G4f80) (fxand . G4f7f) (fx>? . G4f7e) (fx>=? . G4f7d) (fx=? . G4f7c) (fx<? . G4f7b) (fx<=? . G4f7a) (fx-/carry . G4f79) (fx- . G4f78) (fx+/carry . G4f77) (fx+ . G4f76) (fx*/carry . G4f75) (fx* . G4f74) (greatest-fixnum . G4f73) (least-fixnum . G4f72) (fixnum-width . G4f71) (fixnum? . G4f70)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5170 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4fce) (no-infinities-violation? . G4fcd) (make-no-nans-violation . G4fcc) (make-no-infinities-violation . G4fcb) (real->flonum . G4fca) (flzero? . G4fc9) (fltruncate . G4fc8) (fltan . G4fc7) (flsqrt . G4fc6) (flsin . G4fc5) (flround . G4fc4) (flpositive? . G4fc3) (flonum? . G4fc2) (flodd? . G4fc1) (flnumerator . G4fc0) (flnegative? . G4fbf) (flnan? . G4fbe) (flmod0 . G4fbd) (flmod . G4fbc) (flmin . G4fbb) (flmax . G4fba) (fllog . G4fb9) (flinteger? . G4fb8) (flinfinite? . G4fb7) (flfloor . G4fb6) (flfinite? . G4fb5) (flexpt . G4fb4) (flexp . G4fb3) (fleven? . G4fb2) (fldiv0-and-mod0 . G4fb1) (fldiv0 . G4fb0) (fldiv-and-mod . G4faf) (fldiv . G4fae) (fldenominator . G4fad) (flcos . G4fac) (flceiling . G4fab) (flatan . G4faa) (flasin . G4fa9) (flacos . G4fa8) (flabs . G4fa7) (fl>? . G4fa6) (fl>=? . G4fa5) (fl=? . G4fa4) (fl<? . G4fa3) (fl<=? . G4fa2) (fl/ . G4fa1) (fl- . G4fa0) (fl+ . G4f9f) (fl* . G4f9e) (fixnum->flonum . G4f9d) (&no-nans . G4eba) (&no-infinities . G4eb9)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5171 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G50a3) (string-ci-hash . G50a2) (string-hash . G50a1) (equal-hash . G50a0) (hashtable-equivalence-function . G509f) (make-hashtable . G509e) (hashtable-hash-function . G509d) (make-eqv-hashtable . G509c) (make-eq-hashtable . G509b) (hashtable? . G509a) (hashtable-update! . G5099) (hashtable-size . G5098) (hashtable-set! . G5097) (hashtable-ref . G5096) (hashtable-mutable? . G5095) (hashtable-keys . G5094) (hashtable-entries . G5093) (hashtable-delete! . G5092) (hashtable-copy . G5091) (hashtable-contains? . G5090) (hashtable-clear! . G508f)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5172 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (utf-8-codec . G5078) (utf-16-codec . G5077) (transcoder-error-handling-mode . G5076) (transcoder-eol-style . G5075) (transcoder-codec . G5074) (transcoded-port . G5073) (textual-port? . G5072) (string->bytevector . G5071) (standard-output-port . G5070) (standard-input-port . G506f) (standard-error-port . G506e) (set-port-position! . G506d) (put-u8 . G506c) (put-string . G506b) (put-datum . G506a) (put-char . G5069) (put-bytevector . G5068) (port? . G5067) (port-transcoder . G5066) (port-position . G5065) (port-has-set-port-position!? . G5064) (port-has-port-position? . G5063) (port-eof? . G5062) (output-port-buffer-mode . G5061) (open-string-output-port . G5060) (open-string-input-port . G505f) (open-file-output-port . G505e) (open-file-input/output-port . G505d) (open-file-input-port . G505c) (open-bytevector-output-port . G505b) (open-bytevector-input-port . G505a) (native-transcoder . G5059) (native-eol-style . G5058) (make-transcoder . G5057) (latin-1-codec . G5056) (make-i/o-write-error . G4c97) (make-i/o-read-error . G4c83) (make-i/o-port-error . G4d2e) (make-i/o-invalid-position-error . G4cac) (make-i/o-filename-error . G4cc5) (make-i/o-file-protection-error . G4cdd) (make-i/o-file-is-read-only-error . G4cf1) (make-i/o-file-does-not-exist-error . G4d19) (make-i/o-file-already-exists-error . G4d05) (make-i/o-error . G4c6f) (make-i/o-encoding-error . G4d5b) (make-i/o-decoding-error . G4d46) (make-custom-textual-output-port . G5055) (make-custom-textual-input/output-port . G5054) (make-custom-textual-input-port . G5053) (make-custom-binary-output-port . G5052) (make-custom-binary-input/output-port . G5051) (make-custom-binary-input-port . G5050) (lookahead-u8 . G504e) (lookahead-char . G504d) (i/o-write-error? . G4c99) (i/o-read-error? . G4c85) (i/o-port-error? . G4d32) (i/o-invalid-position-error? . G4cb0) (i/o-filename-error? . G4cc9) (i/o-file-protection-error? . G4cdf) (i/o-file-is-read-only-error? . G4cf3) (i/o-file-does-not-exist-error? . G4d1b) (i/o-file-already-exists-error? . G4d07) (i/o-error? . G4c71) (i/o-error-port . G4d34) (i/o-error-filename . G4ccb) (i/o-encoding-error? . G4d5f) (i/o-encoding-error-char . G4d61) (i/o-decoding-error? . G4d48) (get-u8 . G504c) (get-string-n! . G504b) (get-string-n . G504a) (get-string-all . G5049) (get-line . G5048) (get-datum . G5047) (get-char . G5046) (get-bytevector-some . G5045) (get-bytevector-n! . G5044) (get-bytevector-n . G5043) (get-bytevector-all . G5042) (flush-output-port . G5041) (close-port . G5040) (call-with-string-output-port . G5020) (call-with-port . G501f) (call-with-bytevector-output-port . G501e) (bytevector->string . G501d) (buffer-mode? . G501c) (binary-port? . G501b) (&i/o-encoding . G4eb8) (&i/o-decoding . G4eb7) (&i/o-port . G4eb6) (&i/o-file-does-not-exist . G4eb5) (&i/o-file-already-exists . G4eb4) (&i/o-file-is-read-only . G4eb3) (&i/o-file-protection . G4eb2) (&i/o-filename . G4eb1) (&i/o-invalid-position . G4eb0) (&i/o-write . G4eaf) (&i/o-read . G4eae) (&i/o . G4ead) (error-handling-mode . G4e92) (file-options . G4e91) (buffer-mode . G4e90) (eol-style . G4e8f)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5173 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G5017) (enum-set=? . G5016) (enum-set-universe . G5015) (enum-set-union . G5014) (enum-set-subset? . G5013) (enum-set-projection . G5012) (enum-set-member? . G5011) (enum-set-intersection . G5010) (enum-set-indexer . G500f) (enum-set-difference . G500e) (enum-set-constructor . G500d) (enum-set-complement . G500c) (enum-set->list . G500b) (define-enumeration . G4e9d)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5174 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b8d) (warning? . G4b0d) (violation? . G4b49) (undefined-violation? . G4bfd) (syntax-violation? . G4be5) (syntax-violation-subform . G4be9) (syntax-violation-form . G4be7) (syntax-violation . G317c) (simple-conditions . G500a) (serious-condition? . G4b21) (non-continuable-violation? . G4ba3) (message-condition? . G4af7) (make-who-condition . G4b89) (make-warning . G4b0b) (make-violation . G4b47) (make-undefined-violation . G4bfb) (make-syntax-violation . G4bdf) (make-serious-condition . G4b1f) (make-non-continuable-violation . G4ba1) (make-message-condition . G4af3) (make-lexical-violation . G4bc9) (make-irritants-condition . G4b70) (make-implementation-restriction-violation . G4bb5) (make-error . G4b33) (make-assertion-violation . G4b5b) (lexical-violation? . G4bcb) (irritants-condition? . G4b74) (implementation-restriction-violation? . G4bb7) (error? . G4b35) (condition-who . G4b8f) (condition-predicate . G5009) (condition-message . G4af9) (condition-irritants . G4b76) (condition-accessor . G5008) (condition . G5007) (assertion-violation? . G4b5d) (condition? . G5006) (&undefined . G4eac) (&syntax . G4eab) (&lexical . G4eaa) (&implementation-restriction . G4ea9) (&non-continuable . G4ea8) (&who . G4ea7) (&irritants . G4ea6) (&assertion . G4ea5) (&violation . G4ea4) (&error . G4ea3) (&serious . G4ea2) (&warning . G4ea1) (&message . G4ea0) (&condition . G4e9f) (define-condition-type . G4e9e)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5175 '(rnrs records inspection) '(6) '() '() '() '((record? . G50b2) (record-type-uid . G50b1) (record-type-sealed? . G50b0) (record-type-parent . G50af) (record-type-opaque? . G50ae) (record-type-name . G50ad) (record-type-generative? . G50ac) (record-type-field-names . G50ab) (record-rtd . G50aa) (record-field-mutable? . G50a9)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5176 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G50b9) (record-predicate . G50b8) (record-mutator . G50b7) (record-constructor . G50b6) (record-accessor . G50b5) (make-record-type-descriptor . G50b4) (make-record-constructor-descriptor . G50b3)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5177 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e9c) (parent-rtd . G4e9b) (nongenerative . G4e9a) (opaque . G4e99) (sealed . G4e98) (protocol . G4e97) (parent . G4e96) (immutable . G4e95) (mutable . G4e94) (fields . G4e93) (record-constructor-descriptor . G4e70) (record-type-descriptor . G4e6f)) '() values values '#f '#f '#t '#f) (G2c3a@G2acd@install-library 'G5178 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5158) (&no-nans-rtd . G5157) (&no-infinities-rcd . G5156) (&no-infinities-rtd . G5155) (&i/o-encoding-rcd . G5154) (&i/o-encoding-rtd . G5153) (&i/o-decoding-rcd . G5152) (&i/o-decoding-rtd . G5151) (&i/o-port-rcd . G5150) (&i/o-port-rtd . G514f) (&i/o-file-does-not-exist-rcd . G514e) (&i/o-file-does-not-exist-rtd . G514d) (&i/o-file-already-exists-rcd . G514c) (&i/o-file-already-exists-rtd . G514b) (&i/o-file-is-read-only-rcd . G514a) (&i/o-file-is-read-only-rtd . G5149) (&i/o-file-protection-rcd . G5148) (&i/o-file-protection-rtd . G5147) (&i/o-filename-rcd . G5146) (&i/o-filename-rtd . G5145) (&i/o-invalid-position-rcd . G5144) (&i/o-invalid-position-rtd . G5143) (&i/o-write-rcd . G5142) (&i/o-write-rtd . G5141) (&i/o-read-rcd . G5140) (&i/o-read-rtd . G513f) (&i/o-rcd . G513e) (&i/o-rtd . G513d) (&undefined-rcd . G513c) (&undefined-rtd . G513b) (&syntax-rcd . G513a) (&syntax-rtd . G5139) (&lexical-rcd . G5138) (&lexical-rtd . G5137) (&implementation-restriction-rcd . G5136) (&implementation-restriction-rtd . G5135) (&non-continuable-rcd . G5134) (&non-continuable-rtd . G5133) (&who-rcd . G5132) (&who-rtd . G5131) (&irritants-rcd . G5130) (&irritants-rtd . G512f) (&assertion-rcd . G512e) (&assertion-rtd . G512d) (&violation-rcd . G512c) (&violation-rtd . G512b) (&error-rcd . G512a) (&error-rtd . G5129) (&serious-rcd . G5128) (&serious-rtd . G5127) (&warning-rcd . G5126) (&warning-rtd . G5125) (&message-rcd . G5124) (&message-rtd . G5123) (&condition-rcd . G5122) (&condition-rtd . G5121) (syntax-error . G3176) (syntax-dispatch . G3089) (pretty-print . G5120) (eval-core . G511f) (set-symbol-value! . G511e) (symbol-value . G511d) (gensym . G511c) (void . G511b) (load . G4dc0) (interaction-environment . G3188) (char-ready? . G511a) (regexp? . G5119) (read-line . G5118) (dotted-list? . G5117) (circular-list? . G5116) (proper-list? . G5115) (circular-list . G5114) (last . G5113) (last-pair . G5112) (not-pair? . G5111) (split-at! . G5110) (split-at . G510f) (list= . G510e) (list-copy . G510d) (list-tabulate . G510c) (make-list . G510b) (xcons . G510a) (tenth . G5109) (ninth . G5108) (eighth . G5107) (seventh . G5106) (sixth . G5105) (fifth . G5104) (drop-right! . G5103) (drop-right . G5102) (take-right . G5101) (take! . G5100) (drop . G50ff) (take . G50fe) (car+cdr . G50fd) (third . G50fc) (second . G50fb) (first . G50fa) (assoc-ref . G50f9) (alist-cons . G50f8) (print . G50f7) (format . G50f6) (standard-library-path . G50f5) (file-newer? . G50f4) (stat-mtime . G50f3) (current-directory . G50f2) (write-to-file . G50f1) (file->list . G50f0) (file->string . G50ef) (digit->integer . G50ee) (call-with-string-input-port . G50ed) (call-with-string-io . G50ec) (string-split . G50eb) (bytevector-for-each . G50ea) (string->regexp . G50e9) (rxmatch . G50e8) (regexp-replace-all . G50e7) (hashtable-for-each . G50e6) (readdir . G50e5) (get-environment-variables . G50e4) (get-environment-variable . G50e3) (get-timeofday . G50e2) (get-command-line . G50e1) (sys-display . G50e0) (source-info . G50df) (make-compiler-instruction . G50de) (make-instruction . G50dd) (set-source-info! . G50dc) (bignum? . G50db) (make-complex . G50da) (fasl-read . G50d9) (fasl-write . G50d8) (receive . G50d7) (make-parameter . G28a3) (string-upcase . G50d6) (string-titlecase . G50d5) (string-normalize-nfkd . G50d4) (string-normalize-nfkc . G50d3) (string-normalize-nfd . G50d2) (string-normalize-nfc . G50d1) (string-foldcase . G50d0) (string-downcase . G50cf) (string-ci>? . G50ce) (string-ci>=? . G50cd) (string-ci=? . G50cc) (string-ci<? . G50cb) (string-ci<=? . G50ca) (char-whitespace? . G50c9) (char-upper-case? . G50c8) (char-title-case? . G50c7) (char-numeric? . G50c6) (char-lower-case? . G50c5) (char-general-category . G50c4) (char-upcase . G50c3) (char-titlecase . G50c2) (char-foldcase . G50c1) (char-downcase . G50c0) (char-ci>? . G50bf) (char-ci>=? . G50be) (char-ci=? . G50bd) (char-ci<? . G50bc) (char-ci<=? . G50bb) (char-alphabetic? . G50ba) (make-variable-transformer . G2e87) (identifier? . G317e) (generate-temporaries . G3168) (free-identifier=? . G316a) (syntax->datum . G3182) (datum->syntax . G3180) (bound-identifier=? . G316c) (record-type-descriptor? . G50b9) (record-predicate . G50b8) (record-mutator . G50b7) (record-constructor . G50b6) (record-accessor . G50b5) (make-record-type-descriptor . G50b4) (make-record-constructor-descriptor . G50b3) (record? . G50b2) (record-type-uid . G50b1) (record-type-sealed? . G50b0) (record-type-parent . G50af) (record-type-opaque? . G50ae) (record-type-name . G50ad) (record-type-generative? . G50ac) (record-type-field-names . G50ab) (record-rtd . G50aa) (record-field-mutable? . G50a9) (delete-file . G50a8) (file-exists? . G50a7) (vector-sort! . G50a6) (vector-sort . G50a5) (list-sort . G50a4) (symbol-hash . G50a3) (string-ci-hash . G50a2) (string-hash . G50a1) (equal-hash . G50a0) (hashtable-equivalence-function . G509f) (make-hashtable . G509e) (hashtable-hash-function . G509d) (make-eqv-hashtable . G509c) (make-eq-hashtable . G509b) (hashtable? . G509a) (hashtable-update! . G5099) (hashtable-size . G5098) (hashtable-set! . G5097) (hashtable-ref . G5096) (hashtable-mutable? . G5095) (hashtable-keys . G5094) (hashtable-entries . G5093) (hashtable-delete! . G5092) (hashtable-copy . G5091) (hashtable-contains? . G5090) (hashtable-clear! . G508f) (call-with-output-file . G508e) (call-with-input-file . G508d) (write-char . G508c) (write . G508b) (with-output-to-file . G508a) (with-input-from-file . G5089) (read-char . G5088) (read . G5087) (peek-char . G5086) (open-output-file . G5085) (open-input-file . G5084) (newline . G5083) (display . G5082) (close-output-port . G5081) (close-input-port . G5080) (eof-object? . G507f) (eof-object . G507e) (current-error-port . G507d) (current-output-port . G507c) (current-input-port . G507b) (output-port? . G507a) (input-port? . G5079) (utf-8-codec . G5078) (utf-16-codec . G5077) (transcoder-error-handling-mode . G5076) (transcoder-eol-style . G5075) (transcoder-codec . G5074) (transcoded-port . G5073) (textual-port? . G5072) (string->bytevector . G5071) (standard-output-port . G5070) (standard-input-port . G506f) (standard-error-port . G506e) (set-port-position! . G506d) (put-u8 . G506c) (put-string . G506b) (put-datum . G506a) (put-char . G5069) (put-bytevector . G5068) (port? . G5067) (port-transcoder . G5066) (port-position . G5065) (port-has-set-port-position!? . G5064) (port-has-port-position? . G5063) (port-eof? . G5062) (output-port-buffer-mode . G5061) (open-string-output-port . G5060) (open-string-input-port . G505f) (open-file-output-port . G505e) (open-file-input/output-port . G505d) (open-file-input-port . G505c) (open-bytevector-output-port . G505b) (open-bytevector-input-port . G505a) (native-transcoder . G5059) (native-eol-style . G5058) (make-transcoder . G5057) (latin-1-codec . G5056) (make-i/o-write-error . G4c97) (make-i/o-read-error . G4c83) (make-i/o-port-error . G4d2e) (make-i/o-invalid-position-error . G4cac) (make-i/o-filename-error . G4cc5) (make-i/o-file-protection-error . G4cdd) (make-i/o-file-is-read-only-error . G4cf1) (make-i/o-file-does-not-exist-error . G4d19) (make-i/o-file-already-exists-error . G4d05) (make-i/o-error . G4c6f) (make-i/o-encoding-error . G4d5b) (make-i/o-decoding-error . G4d46) (make-custom-textual-output-port . G5055) (make-custom-textual-input/output-port . G5054) (make-custom-textual-input-port . G5053) (make-custom-binary-output-port . G5052) (make-custom-binary-input/output-port . G5051) (make-custom-binary-input-port . G5050) (make-bytevector . G504f) (lookahead-u8 . G504e) (lookahead-char . G504d) (i/o-write-error? . G4c99) (i/o-read-error? . G4c85) (i/o-port-error? . G4d32) (i/o-invalid-position-error? . G4cb0) (i/o-filename-error? . G4cc9) (i/o-file-protection-error? . G4cdf) (i/o-file-is-read-only-error? . G4cf3) (i/o-file-does-not-exist-error? . G4d1b) (i/o-file-already-exists-error? . G4d07) (i/o-error? . G4c71) (i/o-error-port . G4d34) (i/o-error-filename . G4ccb) (i/o-encoding-error? . G4d5f) (i/o-encoding-error-char . G4d61) (i/o-decoding-error? . G4d48) (get-u8 . G504c) (get-string-n! . G504b) (get-string-n . G504a) (get-string-all . G5049) (get-line . G5048) (get-datum . G5047) (get-char . G5046) (get-bytevector-some . G5045) (get-bytevector-n! . G5044) (get-bytevector-n . G5043) (get-bytevector-all . G5042) (flush-output-port . G5041) (close-port . G5040) (scheme-report-environment . G3156) (quotient . G503f) (null-environment . G3154) (remainder . G503e) (modulo . G503d) (inexact->exact . G503c) (force . G503b) (exact->inexact . G503a) (exit . G5039) (command-line . G4dba) (string-fill! . G5038) (string-set! . G5037) (set-cdr! . G5036) (set-car! . G5035) (remove . G5034) (remv . G5033) (remp . G5032) (remq . G5031) (partition . G5030) (memv . G502f) (memq . G502e) (memp . G502d) (member . G502c) (exists . G502b) (for-all . G502a) (fold-right . G5029) (fold-left . G5028) (find . G5027) (filter . G5026) (cons* . G5025) (assv . G5024) (assq . G5023) (assp . G5022) (assoc . G5021) (call-with-string-output-port . G5020) (call-with-port . G501f) (call-with-bytevector-output-port . G501e) (bytevector->string . G501d) (buffer-mode? . G501c) (binary-port? . G501b) (with-exception-handler . G501a) (raise-continuable . G5019) (raise . G5018) (eval . G315a) (environment . G3152) (make-enumeration . G5017) (enum-set=? . G5016) (enum-set-universe . G5015) (enum-set-union . G5014) (enum-set-subset? . G5013) (enum-set-projection . G5012) (enum-set-member? . G5011) (enum-set-intersection . G5010) (enum-set-indexer . G500f) (enum-set-difference . G500e) (enum-set-constructor . G500d) (enum-set-complement . G500c) (enum-set->list . G500b) (who-condition? . G4b8d) (warning? . G4b0d) (violation? . G4b49) (undefined-violation? . G4bfd) (syntax-violation? . G4be5) (syntax-violation-subform . G4be9) (syntax-violation-form . G4be7) (syntax-violation . G317c) (simple-conditions . G500a) (serious-condition? . G4b21) (non-continuable-violation? . G4ba3) (message-condition? . G4af7) (make-who-condition . G4b89) (make-warning . G4b0b) (make-violation . G4b47) (make-undefined-violation . G4bfb) (make-syntax-violation . G4bdf) (make-serious-condition . G4b1f) (make-non-continuable-violation . G4ba1) (make-message-condition . G4af3) (make-lexical-violation . G4bc9) (make-irritants-condition . G4b70) (make-implementation-restriction-violation . G4bb5) (make-error . G4b33) (make-assertion-violation . G4b5b) (lexical-violation? . G4bcb) (irritants-condition? . G4b74) (implementation-restriction-violation? . G4bb7) (error? . G4b35) (condition-who . G4b8f) (condition-predicate . G5009) (condition-message . G4af9) (condition-irritants . G4b76) (condition-accessor . G5008) (condition . G5007) (assertion-violation? . G4b5d) (condition? . G5006) (utf32->string . G5005) (utf16->string . G5004) (utf8->string . G5003) (uint-list->bytevector . G5002) (u8-list->bytevector . G5001) (string->utf8 . G5000) (string->utf32 . G4fff) (string->utf16 . G4ffe) (sint-list->bytevector . G4ffd) (native-endianness . G4ffc) (bytevector? . G4ffb) (bytevector=? . G4ffa) (bytevector-uint-set! . G4ff9) (bytevector-uint-ref . G4ff8) (bytevector-u8-set! . G4ff7) (bytevector-u8-ref . G4ff6) (bytevector-u64-set! . G4ff5) (bytevector-u64-ref . G4ff4) (bytevector-u64-native-set! . G4ff3) (bytevector-u64-native-ref . G4ff2) (bytevector-u32-set! . G4ff1) (bytevector-u32-ref . G4ff0) (bytevector-u32-native-set! . G4fef) (bytevector-u32-native-ref . G4fee) (bytevector-u16-set! . G4fed) (bytevector-u16-ref . G4fec) (bytevector-u16-native-set! . G4feb) (bytevector-u16-native-ref . G4fea) (bytevector-sint-set! . G4fe9) (bytevector-sint-ref . G4fe8) (bytevector-s8-set! . G4fe7) (bytevector-s8-ref . G4fe6) (bytevector-s64-set! . G4fe5) (bytevector-s64-ref . G4fe4) (bytevector-s64-native-set! . G4fe3) (bytevector-s64-native-ref . G4fe2) (bytevector-s32-set! . G4fe1) (bytevector-s32-ref . G4fe0) (bytevector-s32-native-set! . G4fdf) (bytevector-s32-native-ref . G4fde) (bytevector-s16-set! . G4fdd) (bytevector-s16-ref . G4fdc) (bytevector-s16-native-set! . G4fdb) (bytevector-s16-native-ref . G4fda) (bytevector-length . G4fd9) (bytevector-ieee-single-native-ref . G4fd8) (bytevector-ieee-double-ref . G4fd7) (bytevector-ieee-double-native-set! . G4fd6) (bytevector-ieee-double-native-ref . G4fd5) (bytevector-fill! . G4fd4) (bytevector-copy! . G4fd3) (bytevector-copy . G4fd2) (bytevector->uint-list . G4fd1) (bytevector->u8-list . G4fd0) (bytevector->sint-list . G4fcf) (no-nans-violation? . G4fce) (no-infinities-violation? . G4fcd) (make-no-nans-violation . G4fcc) (make-no-infinities-violation . G4fcb) (real->flonum . G4fca) (flzero? . G4fc9) (fltruncate . G4fc8) (fltan . G4fc7) (flsqrt . G4fc6) (flsin . G4fc5) (flround . G4fc4) (flpositive? . G4fc3) (flonum? . G4fc2) (flodd? . G4fc1) (flnumerator . G4fc0) (flnegative? . G4fbf) (flnan? . G4fbe) (flmod0 . G4fbd) (flmod . G4fbc) (flmin . G4fbb) (flmax . G4fba) (fllog . G4fb9) (flinteger? . G4fb8) (flinfinite? . G4fb7) (flfloor . G4fb6) (flfinite? . G4fb5) (flexpt . G4fb4) (flexp . G4fb3) (fleven? . G4fb2) (fldiv0-and-mod0 . G4fb1) (fldiv0 . G4fb0) (fldiv-and-mod . G4faf) (fldiv . G4fae) (fldenominator . G4fad) (flcos . G4fac) (flceiling . G4fab) (flatan . G4faa) (flasin . G4fa9) (flacos . G4fa8) (flabs . G4fa7) (fl>? . G4fa6) (fl>=? . G4fa5) (fl=? . G4fa4) (fl<? . G4fa3) (fl<=? . G4fa2) (fl/ . G4fa1) (fl- . G4fa0) (fl+ . G4f9f) (fl* . G4f9e) (fixnum->flonum . G4f9d) (fxzero? . G4f9c) (fxxor . G4f9b) (fxrotate-bit-field . G4f9a) (fxreverse-bit-field . G4f99) (fxpositive? . G4f98) (fxodd? . G4f97) (fxnot . G4f96) (fxnegative? . G4f95) (fxmod0 . G4f94) (fxmod . G4f93) (fxmin . G4f92) (fxmax . G4f91) (fxlength . G4f90) (fxior . G4f8f) (fxif . G4f8e) (fxfirst-bit-set . G4f8d) (fxeven? . G4f8c) (fxdiv0-and-mod0 . G4f8b) (fxdiv0 . G4f8a) (fxdiv-and-mod . G4f89) (fxdiv . G4f88) (fxcopy-bit-field . G4f87) (fxcopy-bit . G4f86) (fxbit-set? . G4f85) (fxbit-field . G4f84) (fxbit-count . G4f83) (fxarithmetic-shift-right . G4f82) (fxarithmetic-shift-left . G4f81) (fxarithmetic-shift . G4f80) (fxand . G4f7f) (fx>? . G4f7e) (fx>=? . G4f7d) (fx=? . G4f7c) (fx<? . G4f7b) (fx<=? . G4f7a) (fx-/carry . G4f79) (fx- . G4f78) (fx+/carry . G4f77) (fx+ . G4f76) (fx*/carry . G4f75) (fx* . G4f74) (greatest-fixnum . G4f73) (least-fixnum . G4f72) (fixnum-width . G4f71) (fixnum? . G4f70) (bitwise-rotate-bit-field . G4f6f) (bitwise-reverse-bit-field . G4f6e) (bitwise-length . G4f6d) (bitwise-if . G4f6c) (bitwise-first-bit-set . G4f6b) (bitwise-copy-bit-field . G4f6a) (bitwise-copy-bit . G4f69) (bitwise-bit-set? . G4f68) (bitwise-bit-field . G4f67) (bitwise-bit-count . G4f66) (bitwise-xor . G4f65) (bitwise-ior . G4f64) (bitwise-and . G4f63) (bitwise-not . G4f62) (bitwise-arithmetic-shift-right . G4f61) (bitwise-arithmetic-shift-left . G4f60) (bitwise-arithmetic-shift . G4f5f) (zero? . G4f5e) (vector? . G4f5d) (vector-set! . G4f5c) (vector-ref . G4f5b) (vector-map . G4f5a) (vector-length . G4f59) (vector-for-each . G4f58) (vector-fill! . G4f57) (vector->list . G4f56) (vector . G4f55) (values . G4f54) (truncate . G4f53) (tan . G4f52) (symbol? . G4f51) (symbol=? . G4f50) (symbol->string . G4f4f) (substring . G4f4e) (string? . G4f4d) (string>? . G4f4c) (string>=? . G4f4b) (string=? . G4f4a) (string<? . G4f49) (string<=? . G4f48) (string-ref . G4f47) (string-length . G4f46) (string-for-each . G4f45) (string-copy . G4f44) (string-append . G4f43) (string->symbol . G4f42) (string->number . G4f41) (string->list . G4f40) (string . G4f3f) (sqrt . G4f3e) (sin . G4f3d) (round . G4f3c) (reverse . G4f3b) (real? . G4f3a) (real-valued? . G4f39) (real-part . G4f38) (rationalize . G4f37) (rational? . G4f36) (rational-valued? . G4f35) (procedure? . G4f34) (positive? . G4f33) (pair? . G4f32) (odd? . G4f31) (numerator . G4f30) (number? . G4f2f) (number->string . G4f2e) (null? . G4f2d) (not . G4f2c) (negative? . G4f2b) (nan? . G4f2a) (min . G4f29) (max . G4f28) (map . G4f27) (make-vector . G4f26) (make-string . G4f25) (make-rectangular . G4f24) (make-polar . G4f23) (magnitude . G4f22) (log . G4f21) (list? . G4f20) (list-tail . G4f1f) (list-ref . G4f1e) (list->vector . G4f1d) (list->string . G4f1c) (list . G4f1b) (length . G4f1a) (lcm . G4f19) (integer? . G4f18) (integer-valued? . G4f17) (integer->char . G4f16) (infinite? . G4f15) (inexact? . G4f14) (inexact . G4f13) (imag-part . G4f12) (gcd . G4f11) (for-each . G4f10) (floor . G4f0f) (finite? . G4f0e) (expt . G4f0d) (exp . G4f0c) (exact? . G4f0b) (exact-integer-sqrt . G4f0a) (exact . G4f09) (even? . G4f08) (error . G4f07) (eqv? . G4f06) (equal? . G4f05) (eq? . G4f04) (dynamic-wind . G4f03) (div0-and-mod0 . G4f02) (mod0 . G4f01) (div0 . G4f00) (div-and-mod . G4eff) (mod . G4efe) (div . G4efd) (denominator . G4efc) (cos . G4efb) (cons . G4efa) (complex? . G4ef9) (char? . G4ef8) (char>? . G4ef7) (char>=? . G4ef6) (char=? . G4ef5) (char<? . G4ef4) (char<=? . G4ef3) (char->integer . G4ef2) (ceiling . G4ef1) (call-with-values . G4ef0) (call/cc . G4eef) (call-with-current-continuation . G4eee) (cddddr . G4eed) (cdddar . G4eec) (cddadr . G4eeb) (cddaar . G4eea) (cdaddr . G4ee9) (cdadar . G4ee8) (cdaadr . G4ee7) (cdaaar . G4ee6) (cadddr . G4ee5) (caddar . G4ee4) (cadadr . G4ee3) (cadaar . G4ee2) (caaddr . G4ee1) (caadar . G4ee0) (caaadr . G4edf) (caaaar . G4ede) (cdddr . G4edd) (cddar . G4edc) (cdadr . G4edb) (cdaar . G4eda) (caddr . G4ed9) (cadar . G4ed8) (caadr . G4ed7) (caaar . G4ed6) (cddr . G4ed5) (cdar . G4ed4) (cadr . G4ed3) (caar . G4ed2) (cdr . G4ed1) (car . G4ed0) (boolean? . G4ecf) (boolean=? . G4ece) (atan . G4ecd) (assertion-violation . G4ecc) (asin . G4ecb) (apply . G4eca) (append . G4ec9) (angle . G4ec8) (acos . G4ec7) (abs . G4ec6) (/ . G4ec5) (* . G4ec4) (- . G4ec3) (+ . G4ec2) (>= . G4ec1) (> . G4ec0) (= . G4ebf) (<= . G4ebe) (< . G4ebd) (library . G4ebc) (export . G4ebb) (&no-nans . G4eba) (&no-infinities . G4eb9) (&i/o-encoding . G4eb8) (&i/o-decoding . G4eb7) (&i/o-port . G4eb6) (&i/o-file-does-not-exist . G4eb5) (&i/o-file-already-exists . G4eb4) (&i/o-file-is-read-only . G4eb3) (&i/o-file-protection . G4eb2) (&i/o-filename . G4eb1) (&i/o-invalid-position . G4eb0) (&i/o-write . G4eaf) (&i/o-read . G4eae) (&i/o . G4ead) (&undefined . G4eac) (&syntax . G4eab) (&lexical . G4eaa) (&implementation-restriction . G4ea9) (&non-continuable . G4ea8) (&who . G4ea7) (&irritants . G4ea6) (&assertion . G4ea5) (&violation . G4ea4) (&error . G4ea3) (&serious . G4ea2) (&warning . G4ea1) (&message . G4ea0) (&condition . G4e9f) (define-condition-type . G4e9e) (define-enumeration . G4e9d) (define-record-type . G4e9c) (parent-rtd . G4e9b) (nongenerative . G4e9a) (opaque . G4e99) (sealed . G4e98) (protocol . G4e97) (parent . G4e96) (immutable . G4e95) (mutable . G4e94) (fields . G4e93) (error-handling-mode . G4e92) (file-options . G4e91) (buffer-mode . G4e90) (eol-style . G4e8f) (guard . G4e8e) (trace-define . G4e8d) (trace-lambda . G4e8c) (unsyntax-splicing . G4e8b) (unsyntax . G4e8a) (unquote-splicing . G4e89) (unquote . G4e88) (_ . G4e87) (else . G4e86) (=> . G4e85) (... . G4e84) (assert . G4e83) (endianness . G4e82) (delay . G4e81) (time . G4e80) (or . G4e7f) (and . G4e7e) (do . G4e7d) (cond . G4e7c) (let* . G4e7b) (let . G4e7a) (let*-values . G4e79) (let-values . G4e78) (identifier-syntax . G4e77) (with-syntax . G4e76) (quasisyntax . G4e75) (quasiquote . G4e74) (syntax-rules . G4e73) (include . G4e72) (define-struct . G4e71) (record-constructor-descriptor . G4e70) (record-type-descriptor . G4e6f) (case . G4e6e) (parameterize . G4e6d) (unless . G4e6c) (when . G4e6b) (if . G4e6a) (letrec* . G4e69) (letrec . G4e68) (type-descriptor . G4e67) (case-lambda . G4e66) (lambda . G4e65) (syntax . G4e64) (syntax-case . G4e63) (quote . G4e62) (foreign-call . G4e61) (letrec-syntax . G4e60) (let-syntax . G4e5f) (set! . G4e5e) (import . G4e5d) (begin . G4e5c) (module . G4e5b) (define-syntax . G4e5a) (define . G4e59)) '((G5158 core-prim . &no-nans-rcd) (G5157 core-prim . &no-nans-rtd) (G5156 core-prim . &no-infinities-rcd) (G5155 core-prim . &no-infinities-rtd) (G5154 core-prim . &i/o-encoding-rcd) (G5153 core-prim . &i/o-encoding-rtd) (G5152 core-prim . &i/o-decoding-rcd) (G5151 core-prim . &i/o-decoding-rtd) (G5150 core-prim . &i/o-port-rcd) (G514f core-prim . &i/o-port-rtd) (G514e core-prim . &i/o-file-does-not-exist-rcd) (G514d core-prim . &i/o-file-does-not-exist-rtd) (G514c core-prim . &i/o-file-already-exists-rcd) (G514b core-prim . &i/o-file-already-exists-rtd) (G514a core-prim . &i/o-file-is-read-only-rcd) (G5149 core-prim . &i/o-file-is-read-only-rtd) (G5148 core-prim . &i/o-file-protection-rcd) (G5147 core-prim . &i/o-file-protection-rtd) (G5146 core-prim . &i/o-filename-rcd) (G5145 core-prim . &i/o-filename-rtd) (G5144 core-prim . &i/o-invalid-position-rcd) (G5143 core-prim . &i/o-invalid-position-rtd) (G5142 core-prim . &i/o-write-rcd) (G5141 core-prim . &i/o-write-rtd) (G5140 core-prim . &i/o-read-rcd) (G513f core-prim . &i/o-read-rtd) (G513e core-prim . &i/o-rcd) (G513d core-prim . &i/o-rtd) (G513c core-prim . &undefined-rcd) (G513b core-prim . &undefined-rtd) (G513a core-prim . &syntax-rcd) (G5139 core-prim . &syntax-rtd) (G5138 core-prim . &lexical-rcd) (G5137 core-prim . &lexical-rtd) (G5136 core-prim . &implementation-restriction-rcd) (G5135 core-prim . &implementation-restriction-rtd) (G5134 core-prim . &non-continuable-rcd) (G5133 core-prim . &non-continuable-rtd) (G5132 core-prim . &who-rcd) (G5131 core-prim . &who-rtd) (G5130 core-prim . &irritants-rcd) (G512f core-prim . &irritants-rtd) (G512e core-prim . &assertion-rcd) (G512d core-prim . &assertion-rtd) (G512c core-prim . &violation-rcd) (G512b core-prim . &violation-rtd) (G512a core-prim . &error-rcd) (G5129 core-prim . &error-rtd) (G5128 core-prim . &serious-rcd) (G5127 core-prim . &serious-rtd) (G5126 core-prim . &warning-rcd) (G5125 core-prim . &warning-rtd) (G5124 core-prim . &message-rcd) (G5123 core-prim . &message-rtd) (G5122 core-prim . &condition-rcd) (G5121 core-prim . &condition-rtd) (G3176 core-prim . syntax-error) (G3089 core-prim . syntax-dispatch) (G5120 core-prim . pretty-print) (G511f core-prim . eval-core) (G511e core-prim . set-symbol-value!) (G511d core-prim . symbol-value) (G511c core-prim . gensym) (G511b core-prim . void) (G4dc0 core-prim . load) (G3188 core-prim . interaction-environment) (G511a core-prim . char-ready?) (G5119 core-prim . regexp?) (G5118 core-prim . read-line) (G5117 core-prim . dotted-list?) (G5116 core-prim . circular-list?) (G5115 core-prim . proper-list?) (G5114 core-prim . circular-list) (G5113 core-prim . last) (G5112 core-prim . last-pair) (G5111 core-prim . not-pair?) (G5110 core-prim . split-at!) (G510f core-prim . split-at) (G510e core-prim . list=) (G510d core-prim . list-copy) (G510c core-prim . list-tabulate) (G510b core-prim . make-list) (G510a core-prim . xcons) (G5109 core-prim . tenth) (G5108 core-prim . ninth) (G5107 core-prim . eighth) (G5106 core-prim . seventh) (G5105 core-prim . sixth) (G5104 core-prim . fifth) (G5103 core-prim . drop-right!) (G5102 core-prim . drop-right) (G5101 core-prim . take-right) (G5100 core-prim . take!) (G50ff core-prim . drop) (G50fe core-prim . take) (G50fd core-prim . car+cdr) (G50fc core-prim . third) (G50fb core-prim . second) (G50fa core-prim . first) (G50f9 core-prim . assoc-ref) (G50f8 core-prim . alist-cons) (G50f7 core-prim . print) (G50f6 core-prim . format) (G50f5 core-prim . standard-library-path) (G50f4 core-prim . file-newer?) (G50f3 core-prim . stat-mtime) (G50f2 core-prim . current-directory) (G50f1 core-prim . write-to-file) (G50f0 core-prim . file->list) (G50ef core-prim . file->string) (G50ee core-prim . digit->integer) (G50ed core-prim . call-with-string-input-port) (G50ec core-prim . call-with-string-io) (G50eb core-prim . string-split) (G50ea core-prim . bytevector-for-each) (G50e9 core-prim . string->regexp) (G50e8 core-prim . rxmatch) (G50e7 core-prim . regexp-replace-all) (G50e6 core-prim . hashtable-for-each) (G50e5 core-prim . readdir) (G50e4 core-prim . get-environment-variables) (G50e3 core-prim . get-environment-variable) (G50e2 core-prim . get-timeofday) (G50e1 core-prim . get-command-line) (G50e0 core-prim . sys-display) (G50df core-prim . source-info) (G50de core-prim . make-compiler-instruction) (G50dd core-prim . make-instruction) (G50dc core-prim . set-source-info!) (G50db core-prim . bignum?) (G50da core-prim . make-complex) (G50d9 core-prim . fasl-read) (G50d8 core-prim . fasl-write) (G50d7 core-prim . receive) (G28a3 core-prim . make-parameter) (G50d6 core-prim . string-upcase) (G50d5 core-prim . string-titlecase) (G50d4 core-prim . string-normalize-nfkd) (G50d3 core-prim . string-normalize-nfkc) (G50d2 core-prim . string-normalize-nfd) (G50d1 core-prim . string-normalize-nfc) (G50d0 core-prim . string-foldcase) (G50cf core-prim . string-downcase) (G50ce core-prim . string-ci>?) (G50cd core-prim . string-ci>=?) (G50cc core-prim . string-ci=?) (G50cb core-prim . string-ci<?) (G50ca core-prim . string-ci<=?) (G50c9 core-prim . char-whitespace?) (G50c8 core-prim . char-upper-case?) (G50c7 core-prim . char-title-case?) (G50c6 core-prim . char-numeric?) (G50c5 core-prim . char-lower-case?) (G50c4 core-prim . char-general-category) (G50c3 core-prim . char-upcase) (G50c2 core-prim . char-titlecase) (G50c1 core-prim . char-foldcase) (G50c0 core-prim . char-downcase) (G50bf core-prim . char-ci>?) (G50be core-prim . char-ci>=?) (G50bd core-prim . char-ci=?) (G50bc core-prim . char-ci<?) (G50bb core-prim . char-ci<=?) (G50ba core-prim . char-alphabetic?) (G2e87 core-prim . make-variable-transformer) (G317e core-prim . identifier?) (G3168 core-prim . generate-temporaries) (G316a core-prim . free-identifier=?) (G3182 core-prim . syntax->datum) (G3180 core-prim . datum->syntax) (G316c core-prim . bound-identifier=?) (G50b9 core-prim . record-type-descriptor?) (G50b8 core-prim . record-predicate) (G50b7 core-prim . record-mutator) (G50b6 core-prim . record-constructor) (G50b5 core-prim . record-accessor) (G50b4 core-prim . make-record-type-descriptor) (G50b3 core-prim . make-record-constructor-descriptor) (G50b2 core-prim . record?) (G50b1 core-prim . record-type-uid) (G50b0 core-prim . record-type-sealed?) (G50af core-prim . record-type-parent) (G50ae core-prim . record-type-opaque?) (G50ad core-prim . record-type-name) (G50ac core-prim . record-type-generative?) (G50ab core-prim . record-type-field-names) (G50aa core-prim . record-rtd) (G50a9 core-prim . record-field-mutable?) (G50a8 core-prim . delete-file) (G50a7 core-prim . file-exists?) (G50a6 core-prim . vector-sort!) (G50a5 core-prim . vector-sort) (G50a4 core-prim . list-sort) (G50a3 core-prim . symbol-hash) (G50a2 core-prim . string-ci-hash) (G50a1 core-prim . string-hash) (G50a0 core-prim . equal-hash) (G509f core-prim . hashtable-equivalence-function) (G509e core-prim . make-hashtable) (G509d core-prim . hashtable-hash-function) (G509c core-prim . make-eqv-hashtable) (G509b core-prim . make-eq-hashtable) (G509a core-prim . hashtable?) (G5099 core-prim . hashtable-update!) (G5098 core-prim . hashtable-size) (G5097 core-prim . hashtable-set!) (G5096 core-prim . hashtable-ref) (G5095 core-prim . hashtable-mutable?) (G5094 core-prim . hashtable-keys) (G5093 core-prim . hashtable-entries) (G5092 core-prim . hashtable-delete!) (G5091 core-prim . hashtable-copy) (G5090 core-prim . hashtable-contains?) (G508f core-prim . hashtable-clear!) (G508e core-prim . call-with-output-file) (G508d core-prim . call-with-input-file) (G508c core-prim . write-char) (G508b core-prim . write) (G508a core-prim . with-output-to-file) (G5089 core-prim . with-input-from-file) (G5088 core-prim . read-char) (G5087 core-prim . read) (G5086 core-prim . peek-char) (G5085 core-prim . open-output-file) (G5084 core-prim . open-input-file) (G5083 core-prim . newline) (G5082 core-prim . display) (G5081 core-prim . close-output-port) (G5080 core-prim . close-input-port) (G507f core-prim . eof-object?) (G507e core-prim . eof-object) (G507d core-prim . current-error-port) (G507c core-prim . current-output-port) (G507b core-prim . current-input-port) (G507a core-prim . output-port?) (G5079 core-prim . input-port?) (G5078 core-prim . utf-8-codec) (G5077 core-prim . utf-16-codec) (G5076 core-prim . transcoder-error-handling-mode) (G5075 core-prim . transcoder-eol-style) (G5074 core-prim . transcoder-codec) (G5073 core-prim . transcoded-port) (G5072 core-prim . textual-port?) (G5071 core-prim . string->bytevector) (G5070 core-prim . standard-output-port) (G506f core-prim . standard-input-port) (G506e core-prim . standard-error-port) (G506d core-prim . set-port-position!) (G506c core-prim . put-u8) (G506b core-prim . put-string) (G506a core-prim . put-datum) (G5069 core-prim . put-char) (G5068 core-prim . put-bytevector) (G5067 core-prim . port?) (G5066 core-prim . port-transcoder) (G5065 core-prim . port-position) (G5064 core-prim . port-has-set-port-position!?) (G5063 core-prim . port-has-port-position?) (G5062 core-prim . port-eof?) (G5061 core-prim . output-port-buffer-mode) (G5060 core-prim . open-string-output-port) (G505f core-prim . open-string-input-port) (G505e core-prim . open-file-output-port) (G505d core-prim . open-file-input/output-port) (G505c core-prim . open-file-input-port) (G505b core-prim . open-bytevector-output-port) (G505a core-prim . open-bytevector-input-port) (G5059 core-prim . native-transcoder) (G5058 core-prim . native-eol-style) (G5057 core-prim . make-transcoder) (G5056 core-prim . latin-1-codec) (G4c97 core-prim . make-i/o-write-error) (G4c83 core-prim . make-i/o-read-error) (G4d2e core-prim . make-i/o-port-error) (G4cac core-prim . make-i/o-invalid-position-error) (G4cc5 core-prim . make-i/o-filename-error) (G4cdd core-prim . make-i/o-file-protection-error) (G4cf1 core-prim . make-i/o-file-is-read-only-error) (G4d19 core-prim . make-i/o-file-does-not-exist-error) (G4d05 core-prim . make-i/o-file-already-exists-error) (G4c6f core-prim . make-i/o-error) (G4d5b core-prim . make-i/o-encoding-error) (G4d46 core-prim . make-i/o-decoding-error) (G5055 core-prim . make-custom-textual-output-port) (G5054 core-prim . make-custom-textual-input/output-port) (G5053 core-prim . make-custom-textual-input-port) (G5052 core-prim . make-custom-binary-output-port) (G5051 core-prim . make-custom-binary-input/output-port) (G5050 core-prim . make-custom-binary-input-port) (G504f core-prim . make-bytevector) (G504e core-prim . lookahead-u8) (G504d core-prim . lookahead-char) (G4c99 core-prim . i/o-write-error?) (G4c85 core-prim . i/o-read-error?) (G4d32 core-prim . i/o-port-error?) (G4cb0 core-prim . i/o-invalid-position-error?) (G4cc9 core-prim . i/o-filename-error?) (G4cdf core-prim . i/o-file-protection-error?) (G4cf3 core-prim . i/o-file-is-read-only-error?) (G4d1b core-prim . i/o-file-does-not-exist-error?) (G4d07 core-prim . i/o-file-already-exists-error?) (G4c71 core-prim . i/o-error?) (G4d34 core-prim . i/o-error-port) (G4ccb core-prim . i/o-error-filename) (G4d5f core-prim . i/o-encoding-error?) (G4d61 core-prim . i/o-encoding-error-char) (G4d48 core-prim . i/o-decoding-error?) (G504c core-prim . get-u8) (G504b core-prim . get-string-n!) (G504a core-prim . get-string-n) (G5049 core-prim . get-string-all) (G5048 core-prim . get-line) (G5047 core-prim . get-datum) (G5046 core-prim . get-char) (G5045 core-prim . get-bytevector-some) (G5044 core-prim . get-bytevector-n!) (G5043 core-prim . get-bytevector-n) (G5042 core-prim . get-bytevector-all) (G5041 core-prim . flush-output-port) (G5040 core-prim . close-port) (G3156 core-prim . scheme-report-environment) (G503f core-prim . quotient) (G3154 core-prim . null-environment) (G503e core-prim . remainder) (G503d core-prim . modulo) (G503c core-prim . inexact->exact) (G503b core-prim . force) (G503a core-prim . exact->inexact) (G5039 core-prim . exit) (G4dba core-prim . command-line) (G5038 core-prim . string-fill!) (G5037 core-prim . string-set!) (G5036 core-prim . set-cdr!) (G5035 core-prim . set-car!) (G5034 core-prim . remove) (G5033 core-prim . remv) (G5032 core-prim . remp) (G5031 core-prim . remq) (G5030 core-prim . partition) (G502f core-prim . memv) (G502e core-prim . memq) (G502d core-prim . memp) (G502c core-prim . member) (G502b core-prim . exists) (G502a core-prim . for-all) (G5029 core-prim . fold-right) (G5028 core-prim . fold-left) (G5027 core-prim . find) (G5026 core-prim . filter) (G5025 core-prim . cons*) (G5024 core-prim . assv) (G5023 core-prim . assq) (G5022 core-prim . assp) (G5021 core-prim . assoc) (G5020 core-prim . call-with-string-output-port) (G501f core-prim . call-with-port) (G501e core-prim . call-with-bytevector-output-port) (G501d core-prim . bytevector->string) (G501c core-prim . buffer-mode?) (G501b core-prim . binary-port?) (G501a core-prim . with-exception-handler) (G5019 core-prim . raise-continuable) (G5018 core-prim . raise) (G315a core-prim . eval) (G3152 core-prim . environment) (G5017 core-prim . make-enumeration) (G5016 core-prim . enum-set=?) (G5015 core-prim . enum-set-universe) (G5014 core-prim . enum-set-union) (G5013 core-prim . enum-set-subset?) (G5012 core-prim . enum-set-projection) (G5011 core-prim . enum-set-member?) (G5010 core-prim . enum-set-intersection) (G500f core-prim . enum-set-indexer) (G500e core-prim . enum-set-difference) (G500d core-prim . enum-set-constructor) (G500c core-prim . enum-set-complement) (G500b core-prim . enum-set->list) (G4b8d core-prim . who-condition?) (G4b0d core-prim . warning?) (G4b49 core-prim . violation?) (G4bfd core-prim . undefined-violation?) (G4be5 core-prim . syntax-violation?) (G4be9 core-prim . syntax-violation-subform) (G4be7 core-prim . syntax-violation-form) (G317c core-prim . syntax-violation) (G500a core-prim . simple-conditions) (G4b21 core-prim . serious-condition?) (G4ba3 core-prim . non-continuable-violation?) (G4af7 core-prim . message-condition?) (G4b89 core-prim . make-who-condition) (G4b0b core-prim . make-warning) (G4b47 core-prim . make-violation) (G4bfb core-prim . make-undefined-violation) (G4bdf core-prim . make-syntax-violation) (G4b1f core-prim . make-serious-condition) (G4ba1 core-prim . make-non-continuable-violation) (G4af3 core-prim . make-message-condition) (G4bc9 core-prim . make-lexical-violation) (G4b70 core-prim . make-irritants-condition) (G4bb5 core-prim . make-implementation-restriction-violation) (G4b33 core-prim . make-error) (G4b5b core-prim . make-assertion-violation) (G4bcb core-prim . lexical-violation?) (G4b74 core-prim . irritants-condition?) (G4bb7 core-prim . implementation-restriction-violation?) (G4b35 core-prim . error?) (G4b8f core-prim . condition-who) (G5009 core-prim . condition-predicate) (G4af9 core-prim . condition-message) (G4b76 core-prim . condition-irritants) (G5008 core-prim . condition-accessor) (G5007 core-prim . condition) (G4b5d core-prim . assertion-violation?) (G5006 core-prim . condition?) (G5005 core-prim . utf32->string) (G5004 core-prim . utf16->string) (G5003 core-prim . utf8->string) (G5002 core-prim . uint-list->bytevector) (G5001 core-prim . u8-list->bytevector) (G5000 core-prim . string->utf8) (G4fff core-prim . string->utf32) (G4ffe core-prim . string->utf16) (G4ffd core-prim . sint-list->bytevector) (G4ffc core-prim . native-endianness) (G4ffb core-prim . bytevector?) (G4ffa core-prim . bytevector=?) (G4ff9 core-prim . bytevector-uint-set!) (G4ff8 core-prim . bytevector-uint-ref) (G4ff7 core-prim . bytevector-u8-set!) (G4ff6 core-prim . bytevector-u8-ref) (G4ff5 core-prim . bytevector-u64-set!) (G4ff4 core-prim . bytevector-u64-ref) (G4ff3 core-prim . bytevector-u64-native-set!) (G4ff2 core-prim . bytevector-u64-native-ref) (G4ff1 core-prim . bytevector-u32-set!) (G4ff0 core-prim . bytevector-u32-ref) (G4fef core-prim . bytevector-u32-native-set!) (G4fee core-prim . bytevector-u32-native-ref) (G4fed core-prim . bytevector-u16-set!) (G4fec core-prim . bytevector-u16-ref) (G4feb core-prim . bytevector-u16-native-set!) (G4fea core-prim . bytevector-u16-native-ref) (G4fe9 core-prim . bytevector-sint-set!) (G4fe8 core-prim . bytevector-sint-ref) (G4fe7 core-prim . bytevector-s8-set!) (G4fe6 core-prim . bytevector-s8-ref) (G4fe5 core-prim . bytevector-s64-set!) (G4fe4 core-prim . bytevector-s64-ref) (G4fe3 core-prim . bytevector-s64-native-set!) (G4fe2 core-prim . bytevector-s64-native-ref) (G4fe1 core-prim . bytevector-s32-set!) (G4fe0 core-prim . bytevector-s32-ref) (G4fdf core-prim . bytevector-s32-native-set!) (G4fde core-prim . bytevector-s32-native-ref) (G4fdd core-prim . bytevector-s16-set!) (G4fdc core-prim . bytevector-s16-ref) (G4fdb core-prim . bytevector-s16-native-set!) (G4fda core-prim . bytevector-s16-native-ref) (G4fd9 core-prim . bytevector-length) (G4fd8 core-prim . bytevector-ieee-single-native-ref) (G4fd7 core-prim . bytevector-ieee-double-ref) (G4fd6 core-prim . bytevector-ieee-double-native-set!) (G4fd5 core-prim . bytevector-ieee-double-native-ref) (G4fd4 core-prim . bytevector-fill!) (G4fd3 core-prim . bytevector-copy!) (G4fd2 core-prim . bytevector-copy) (G4fd1 core-prim . bytevector->uint-list) (G4fd0 core-prim . bytevector->u8-list) (G4fcf core-prim . bytevector->sint-list) (G4fce core-prim . no-nans-violation?) (G4fcd core-prim . no-infinities-violation?) (G4fcc core-prim . make-no-nans-violation) (G4fcb core-prim . make-no-infinities-violation) (G4fca core-prim . real->flonum) (G4fc9 core-prim . flzero?) (G4fc8 core-prim . fltruncate) (G4fc7 core-prim . fltan) (G4fc6 core-prim . flsqrt) (G4fc5 core-prim . flsin) (G4fc4 core-prim . flround) (G4fc3 core-prim . flpositive?) (G4fc2 core-prim . flonum?) (G4fc1 core-prim . flodd?) (G4fc0 core-prim . flnumerator) (G4fbf core-prim . flnegative?) (G4fbe core-prim . flnan?) (G4fbd core-prim . flmod0) (G4fbc core-prim . flmod) (G4fbb core-prim . flmin) (G4fba core-prim . flmax) (G4fb9 core-prim . fllog) (G4fb8 core-prim . flinteger?) (G4fb7 core-prim . flinfinite?) (G4fb6 core-prim . flfloor) (G4fb5 core-prim . flfinite?) (G4fb4 core-prim . flexpt) (G4fb3 core-prim . flexp) (G4fb2 core-prim . fleven?) (G4fb1 core-prim . fldiv0-and-mod0) (G4fb0 core-prim . fldiv0) (G4faf core-prim . fldiv-and-mod) (G4fae core-prim . fldiv) (G4fad core-prim . fldenominator) (G4fac core-prim . flcos) (G4fab core-prim . flceiling) (G4faa core-prim . flatan) (G4fa9 core-prim . flasin) (G4fa8 core-prim . flacos) (G4fa7 core-prim . flabs) (G4fa6 core-prim . fl>?) (G4fa5 core-prim . fl>=?) (G4fa4 core-prim . fl=?) (G4fa3 core-prim . fl<?) (G4fa2 core-prim . fl<=?) (G4fa1 core-prim . fl/) (G4fa0 core-prim . fl-) (G4f9f core-prim . fl+) (G4f9e core-prim . fl*) (G4f9d core-prim . fixnum->flonum) (G4f9c core-prim . fxzero?) (G4f9b core-prim . fxxor) (G4f9a core-prim . fxrotate-bit-field) (G4f99 core-prim . fxreverse-bit-field) (G4f98 core-prim . fxpositive?) (G4f97 core-prim . fxodd?) (G4f96 core-prim . fxnot) (G4f95 core-prim . fxnegative?) (G4f94 core-prim . fxmod0) (G4f93 core-prim . fxmod) (G4f92 core-prim . fxmin) (G4f91 core-prim . fxmax) (G4f90 core-prim . fxlength) (G4f8f core-prim . fxior) (G4f8e core-prim . fxif) (G4f8d core-prim . fxfirst-bit-set) (G4f8c core-prim . fxeven?) (G4f8b core-prim . fxdiv0-and-mod0) (G4f8a core-prim . fxdiv0) (G4f89 core-prim . fxdiv-and-mod) (G4f88 core-prim . fxdiv) (G4f87 core-prim . fxcopy-bit-field) (G4f86 core-prim . fxcopy-bit) (G4f85 core-prim . fxbit-set?) (G4f84 core-prim . fxbit-field) (G4f83 core-prim . fxbit-count) (G4f82 core-prim . fxarithmetic-shift-right) (G4f81 core-prim . fxarithmetic-shift-left) (G4f80 core-prim . fxarithmetic-shift) (G4f7f core-prim . fxand) (G4f7e core-prim . fx>?) (G4f7d core-prim . fx>=?) (G4f7c core-prim . fx=?) (G4f7b core-prim . fx<?) (G4f7a core-prim . fx<=?) (G4f79 core-prim . fx-/carry) (G4f78 core-prim . fx-) (G4f77 core-prim . fx+/carry) (G4f76 core-prim . fx+) (G4f75 core-prim . fx*/carry) (G4f74 core-prim . fx*) (G4f73 core-prim . greatest-fixnum) (G4f72 core-prim . least-fixnum) (G4f71 core-prim . fixnum-width) (G4f70 core-prim . fixnum?) (G4f6f core-prim . bitwise-rotate-bit-field) (G4f6e core-prim . bitwise-reverse-bit-field) (G4f6d core-prim . bitwise-length) (G4f6c core-prim . bitwise-if) (G4f6b core-prim . bitwise-first-bit-set) (G4f6a core-prim . bitwise-copy-bit-field) (G4f69 core-prim . bitwise-copy-bit) (G4f68 core-prim . bitwise-bit-set?) (G4f67 core-prim . bitwise-bit-field) (G4f66 core-prim . bitwise-bit-count) (G4f65 core-prim . bitwise-xor) (G4f64 core-prim . bitwise-ior) (G4f63 core-prim . bitwise-and) (G4f62 core-prim . bitwise-not) (G4f61 core-prim . bitwise-arithmetic-shift-right) (G4f60 core-prim . bitwise-arithmetic-shift-left) (G4f5f core-prim . bitwise-arithmetic-shift) (G4f5e core-prim . zero?) (G4f5d core-prim . vector?) (G4f5c core-prim . vector-set!) (G4f5b core-prim . vector-ref) (G4f5a core-prim . vector-map) (G4f59 core-prim . vector-length) (G4f58 core-prim . vector-for-each) (G4f57 core-prim . vector-fill!) (G4f56 core-prim . vector->list) (G4f55 core-prim . vector) (G4f54 core-prim . values) (G4f53 core-prim . truncate) (G4f52 core-prim . tan) (G4f51 core-prim . symbol?) (G4f50 core-prim . symbol=?) (G4f4f core-prim . symbol->string) (G4f4e core-prim . substring) (G4f4d core-prim . string?) (G4f4c core-prim . string>?) (G4f4b core-prim . string>=?) (G4f4a core-prim . string=?) (G4f49 core-prim . string<?) (G4f48 core-prim . string<=?) (G4f47 core-prim . string-ref) (G4f46 core-prim . string-length) (G4f45 core-prim . string-for-each) (G4f44 core-prim . string-copy) (G4f43 core-prim . string-append) (G4f42 core-prim . string->symbol) (G4f41 core-prim . string->number) (G4f40 core-prim . string->list) (G4f3f core-prim . string) (G4f3e core-prim . sqrt) (G4f3d core-prim . sin) (G4f3c core-prim . round) (G4f3b core-prim . reverse) (G4f3a core-prim . real?) (G4f39 core-prim . real-valued?) (G4f38 core-prim . real-part) (G4f37 core-prim . rationalize) (G4f36 core-prim . rational?) (G4f35 core-prim . rational-valued?) (G4f34 core-prim . procedure?) (G4f33 core-prim . positive?) (G4f32 core-prim . pair?) (G4f31 core-prim . odd?) (G4f30 core-prim . numerator) (G4f2f core-prim . number?) (G4f2e core-prim . number->string) (G4f2d core-prim . null?) (G4f2c core-prim . not) (G4f2b core-prim . negative?) (G4f2a core-prim . nan?) (G4f29 core-prim . min) (G4f28 core-prim . max) (G4f27 core-prim . map) (G4f26 core-prim . make-vector) (G4f25 core-prim . make-string) (G4f24 core-prim . make-rectangular) (G4f23 core-prim . make-polar) (G4f22 core-prim . magnitude) (G4f21 core-prim . log) (G4f20 core-prim . list?) (G4f1f core-prim . list-tail) (G4f1e core-prim . list-ref) (G4f1d core-prim . list->vector) (G4f1c core-prim . list->string) (G4f1b core-prim . list) (G4f1a core-prim . length) (G4f19 core-prim . lcm) (G4f18 core-prim . integer?) (G4f17 core-prim . integer-valued?) (G4f16 core-prim . integer->char) (G4f15 core-prim . infinite?) (G4f14 core-prim . inexact?) (G4f13 core-prim . inexact) (G4f12 core-prim . imag-part) (G4f11 core-prim . gcd) (G4f10 core-prim . for-each) (G4f0f core-prim . floor) (G4f0e core-prim . finite?) (G4f0d core-prim . expt) (G4f0c core-prim . exp) (G4f0b core-prim . exact?) (G4f0a core-prim . exact-integer-sqrt) (G4f09 core-prim . exact) (G4f08 core-prim . even?) (G4f07 core-prim . error) (G4f06 core-prim . eqv?) (G4f05 core-prim . equal?) (G4f04 core-prim . eq?) (G4f03 core-prim . dynamic-wind) (G4f02 core-prim . div0-and-mod0) (G4f01 core-prim . mod0) (G4f00 core-prim . div0) (G4eff core-prim . div-and-mod) (G4efe core-prim . mod) (G4efd core-prim . div) (G4efc core-prim . denominator) (G4efb core-prim . cos) (G4efa core-prim . cons) (G4ef9 core-prim . complex?) (G4ef8 core-prim . char?) (G4ef7 core-prim . char>?) (G4ef6 core-prim . char>=?) (G4ef5 core-prim . char=?) (G4ef4 core-prim . char<?) (G4ef3 core-prim . char<=?) (G4ef2 core-prim . char->integer) (G4ef1 core-prim . ceiling) (G4ef0 core-prim . call-with-values) (G4eef core-prim . call/cc) (G4eee core-prim . call-with-current-continuation) (G4eed core-prim . cddddr) (G4eec core-prim . cdddar) (G4eeb core-prim . cddadr) (G4eea core-prim . cddaar) (G4ee9 core-prim . cdaddr) (G4ee8 core-prim . cdadar) (G4ee7 core-prim . cdaadr) (G4ee6 core-prim . cdaaar) (G4ee5 core-prim . cadddr) (G4ee4 core-prim . caddar) (G4ee3 core-prim . cadadr) (G4ee2 core-prim . cadaar) (G4ee1 core-prim . caaddr) (G4ee0 core-prim . caadar) (G4edf core-prim . caaadr) (G4ede core-prim . caaaar) (G4edd core-prim . cdddr) (G4edc core-prim . cddar) (G4edb core-prim . cdadr) (G4eda core-prim . cdaar) (G4ed9 core-prim . caddr) (G4ed8 core-prim . cadar) (G4ed7 core-prim . caadr) (G4ed6 core-prim . caaar) (G4ed5 core-prim . cddr) (G4ed4 core-prim . cdar) (G4ed3 core-prim . cadr) (G4ed2 core-prim . caar) (G4ed1 core-prim . cdr) (G4ed0 core-prim . car) (G4ecf core-prim . boolean?) (G4ece core-prim . boolean=?) (G4ecd core-prim . atan) (G4ecc core-prim . assertion-violation) (G4ecb core-prim . asin) (G4eca core-prim . apply) (G4ec9 core-prim . append) (G4ec8 core-prim . angle) (G4ec7 core-prim . acos) (G4ec6 core-prim . abs) (G4ec5 core-prim . /) (G4ec4 core-prim . *) (G4ec3 core-prim . -) (G4ec2 core-prim . +) (G4ec1 core-prim . >=) (G4ec0 core-prim . >) (G4ebf core-prim . =) (G4ebe core-prim . <=) (G4ebd core-prim . <) (G4ebc core-prim . library) (G4ebb core-prim . export) (G4eba $core-rtd &no-nans-rtd &no-nans-rcd) (G4eb9 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4eb8 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4eb7 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4eb6 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4eb5 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4eb4 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4eb3 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4eb2 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4eb1 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4eb0 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4eaf $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4eae $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4ead $core-rtd &i/o-rtd &i/o-rcd) (G4eac $core-rtd &undefined-rtd &undefined-rcd) (G4eab $core-rtd &syntax-rtd &syntax-rcd) (G4eaa $core-rtd &lexical-rtd &lexical-rcd) (G4ea9 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4ea8 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4ea7 $core-rtd &who-rtd &who-rcd) (G4ea6 $core-rtd &irritants-rtd &irritants-rcd) (G4ea5 $core-rtd &assertion-rtd &assertion-rcd) (G4ea4 $core-rtd &violation-rtd &violation-rcd) (G4ea3 $core-rtd &error-rtd &error-rcd) (G4ea2 $core-rtd &serious-rtd &serious-rcd) (G4ea1 $core-rtd &warning-rtd &warning-rcd) (G4ea0 $core-rtd &message-rtd &message-rcd) (G4e9f $core-rtd &condition-rtd &condition-rcd) (G4e9e macro . define-condition-type) (G4e9d macro . define-enumeration) (G4e9c macro . define-record-type) (G4e9b macro . parent-rtd) (G4e9a macro . nongenerative) (G4e99 macro . opaque) (G4e98 macro . sealed) (G4e97 macro . protocol) (G4e96 macro . parent) (G4e95 macro . immutable) (G4e94 macro . mutable) (G4e93 macro . fields) (G4e92 macro . error-handling-mode) (G4e91 macro . file-options) (G4e90 macro . buffer-mode) (G4e8f macro . eol-style) (G4e8e macro . guard) (G4e8d macro . trace-define) (G4e8c macro . trace-lambda) (G4e8b macro . unsyntax-splicing) (G4e8a macro . unsyntax) (G4e89 macro . unquote-splicing) (G4e88 macro . unquote) (G4e87 macro . _) (G4e86 macro . else) (G4e85 macro . =>) (G4e84 macro . ...) (G4e83 macro . assert) (G4e82 macro . endianness) (G4e81 macro . delay) (G4e80 macro . time) (G4e7f macro . or) (G4e7e macro . and) (G4e7d macro . do) (G4e7c macro . cond) (G4e7b macro . let*) (G4e7a macro . let) (G4e79 macro . let*-values) (G4e78 macro . let-values) (G4e77 macro . identifier-syntax) (G4e76 macro . with-syntax) (G4e75 macro . quasisyntax) (G4e74 macro . quasiquote) (G4e73 macro . syntax-rules) (G4e72 macro . include) (G4e71 macro . define-struct) (G4e70 core-macro . record-constructor-descriptor) (G4e6f core-macro . record-type-descriptor) (G4e6e macro . case) (G4e6d macro . parameterize) (G4e6c macro . unless) (G4e6b macro . when) (G4e6a core-macro . if) (G4e69 core-macro . letrec*) (G4e68 core-macro . letrec) (G4e67 core-macro . type-descriptor) (G4e66 core-macro . case-lambda) (G4e65 core-macro . lambda) (G4e64 core-macro . syntax) (G4e63 core-macro . syntax-case) (G4e62 core-macro . quote) (G4e61 core-macro . foreign-call) (G4e60 letrec-syntax) (G4e5f let-syntax) (G4e5e set!) (G4e5d import) (G4e5c begin) (G4e5b module) (G4e5a define-syntax) (G4e59 define)) values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G5179 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5120) (eval-core . G511f) (set-symbol-value! . G511e) (symbol-value . G511d) (gensym . G511c) (void . G511b)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G517a '(mosh) '() '() '() '() '((set-symbol-value! . G511e) (symbol-value . G511d) (assoc-ref . G50f9) (alist-cons . G50f8) (print . G50f7) (format . G50f6) (standard-library-path . G50f5) (file-newer? . G50f4) (stat-mtime . G50f3) (current-directory . G50f2) (write-to-file . G50f1) (file->list . G50f0) (file->string . G50ef) (digit->integer . G50ee) (call-with-string-input-port . G50ed) (call-with-string-io . G50ec) (string-split . G50eb) (bytevector-for-each . G50ea) (string->regexp . G50e9) (rxmatch . G50e8) (regexp-replace-all . G50e7) (hashtable-for-each . G50e6) (get-timeofday . G50e2) (get-command-line . G50e1) (sys-display . G50e0) (source-info . G50df) (make-compiler-instruction . G50de) (make-instruction . G50dd) (set-source-info! . G50dc) (bignum? . G50db) (make-complex . G50da) (fasl-read . G50d9) (fasl-write . G50d8) (include . G4e72)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G517b '(mosh backend) '() '() '() '() '((receive . G50d7)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G517c '(mosh file) '() '() '() '() '((read-line . G5118) (file-newer? . G50f4) (stat-mtime . G50f3) (current-directory . G50f2) (write-to-file . G50f1) (file->list . G50f0) (file->string . G50ef)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G517d '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G50ea)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G517e '(mosh number) '() '() '() '() '((digit->integer . G50ee)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G517f '(mosh string) '() '() '() '() '((print . G50f7) (format . G50f6) (call-with-string-input-port . G50ed) (call-with-string-io . G50ec) (string-split . G50eb) (string->regexp . G50e9)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G5180 '(mosh list) '() '() '() '() '((assoc-ref . G50f9)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G5181 '(mosh regexp) '() '() '() '() '((rxmatch . G50e8) (regexp-replace-all . G50e7)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G5182 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G50e6)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G5183 '(mosh parameters) '() '() '() '() '((make-parameter . G28a3) (parameterize . G4e6d)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G5184 '(system) '() '() '() '() '((readdir . G50e5) (get-environment-variables . G50e4) (get-environment-variable . G50e3)) '() values values '#f '#f '#f '#f) (G2c3a@G2acd@install-library 'G5185 '(srfi :1) '() '() '() '() '((dotted-list? . G5117) (circular-list? . G5116) (proper-list? . G5115) (circular-list . G5114) (last . G5113) (last-pair . G5112) (not-pair? . G5111) (split-at! . G5110) (split-at . G510f) (list= . G510e) (list-copy . G510d) (list-tabulate . G510c) (make-list . G510b) (xcons . G510a) (tenth . G5109) (ninth . G5108) (eighth . G5107) (seventh . G5106) (sixth . G5105) (fifth . G5104) (drop-right! . G5103) (drop-right . G5102) (take-right . G5101) (take! . G5100) (drop . G50ff) (take . G50fe) (car+cdr . G50fd) (third . G50fc) (second . G50fb) (first . G50fa) (alist-cons . G50f8)) '() values values '#f '#f '#f '#f))
((lambda (G4db5@for-each-with-index G4db7@repl G4db9@trace-printer G4dbb@command-line G4dbd@local-library-path G4dbf@load/args G4dc1@load G4dc3@ironscheme-build G4dc5@eval-top-level G4dc7@compile-system-libraries G4dc9@compile G4dcb@compile->closure G4dcd@pre-compile-r6rs-file G4dcf@load-r6rs-top-level G4dd1@write-record) (begin (set! G4db5@for-each-with-index (lambda (G4de6@proc G4de7@lst) (letrec ((G4dea@loop (lambda (G4dec@i G4ded@lst) (if (null? G4ded@lst) (if '#f '#f (void)) (begin (G4de6@proc G4dec@i (car G4ded@lst)) (G4dea@loop (+ G4dec@i '1) (cdr G4ded@lst))))))) (G4dea@loop '1 G4de7@lst)))) (set! G4db7@repl (lambda G4df0@x ((lambda (G4df3@rec) (begin (set! G4df3@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4df5@G4df4) (with-exception-handler (lambda (G4df7@e) (G4df5@G4df4 (if '#t (G4db5@for-each-with-index (lambda (G4df9@i G4dfa@x) ((lambda (G4dfd@rtd) (begin (format '#t '"   ~d. ~a" G4df9@i (record-type-name G4dfd@rtd)) ((lambda (G4dff@v) ((lambda (G4e01@t) (if (memv G4e01@t '(0)) (newline) (if (memv G4e01@t '(1)) (begin (display '": ") (write ((record-accessor G4dfd@rtd '0) G4dfa@x)) (newline)) (begin (display '":\n") ((letrec ((G4e03@f (lambda (G4e05@i) (if (not (= G4e05@i (vector-length G4dff@v))) (begin (display '"       ") (display (vector-ref G4dff@v G4e05@i)) (display '": ") (write ((record-accessor G4dfd@rtd G4e05@i) G4dfa@x)) (newline) (G4e03@f (+ G4e05@i '1))) (void))))) G4e03@f) '0))))) (vector-length G4dff@v))) (record-type-field-names G4dfd@rtd)))) (record-rtd G4dfa@x))) (simple-conditions G4df7@e)) (raise G4df7@e)))) (lambda () (begin '#f ((lambda (G4e07@line) (if (eof-object? G4e07@line) (exit) (write (G4dc5@eval-top-level (call-with-port (open-string-input-port G4e07@line) read))))) (get-line (current-input-port)))))))) (newline) (G4df3@rec)))) (G4df3@rec))) '#f))) (set! G4db9@trace-printer (G2999@G28a4@make-parameter write)) (set! G4dbb@command-line (G2999@G28a4@make-parameter (get-command-line))) (set! G4dbd@local-library-path (lambda (G4e09@filename) (cons '"." (G2c2a@G2aad@library-path)))) (set! G4dbf@load/args (lambda (G4e0b@filename . G4e0d@args) (begin (apply G4dcf@load-r6rs-top-level G4e0b@filename 'load G4e0d@args) (void)))) (set! G4dc1@load (lambda (G4e0f@filename) (begin (apply G4dcf@load-r6rs-top-level G4e0f@filename 'load (G4dbb@command-line)) (void)))) (set! G4dc3@ironscheme-build (lambda () (G4dc1@load '"ironscheme-buildscript.ss"))) (set! G4dc5@eval-top-level (lambda (G4e11@x) (G4ab0@G315b@eval G4e11@x (G4ac7@G3189@interaction-environment)))) (set! G4dc7@compile-system-libraries (lambda () (G4dc5@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4dc9@compile (lambda (G4e13@filename) (G4dcf@load-r6rs-top-level G4e13@filename 'compile))) (set! G4dcb@compile->closure (lambda (G4e15@filename) (G4dcf@load-r6rs-top-level G4e15@filename 'closure))) (set! G4dcd@pre-compile-r6rs-file (lambda (G4e17@filename) (G4dcf@load-r6rs-top-level G4e17@filename 'compile))) (set! G4dcf@load-r6rs-top-level (lambda (G4e19@filename G4e1a@how . G4e1d@args) ((lambda (G4e21@G4e1f@library-path G4e22@G4e20@library-path) ((lambda (G4e25@swap) (dynamic-wind G4e25@swap (lambda () ((lambda (G4e27@x*) ((lambda (G4e29@t) (if (memv G4e29@t '(closure)) (G4ac6@G3187@pre-compile-r6rs-top-level G4e27@x*) (if (memv G4e29@t '(load)) ((lambda (G4e2d@G4e2b@command-line G4e2e@G4e2c@command-line) ((lambda (G4e31@swap) (dynamic-wind G4e31@swap (lambda () ((G4ac5@G3185@compile-r6rs-top-level G4e27@x*))) G4e31@swap)) (lambda () ((lambda (G4e33@t) (begin (G4e2d@G4e2b@command-line G4e2e@G4e2c@command-line) (set! G4e2e@G4e2c@command-line G4e33@t))) (G4e2d@G4e2b@command-line))))) G4dbb@command-line (cons G4e19@filename (car G4e1d@args))) (if (memv G4e29@t '(compile)) (begin (G4ac5@G3185@compile-r6rs-top-level G4e27@x*) (G2c2e@G2ab5@serialize-all G2994@G289a@serialize-library G29fe@G29a7@compile-core-expr)) (if '#f '#f (void)))))) G4e1a@how)) (with-input-from-file G4e19@filename (lambda () ((letrec ((G4e35@f (lambda () ((lambda (G4e37@x) (if (eof-object? G4e37@x) '() (cons G4e37@x (G4e35@f)))) (G298c@G288a@read-annotated))))) G4e35@f)))))) G4e25@swap)) (lambda () ((lambda (G4e39@t) (begin (G4e21@G4e1f@library-path G4e22@G4e20@library-path) (set! G4e22@G4e20@library-path G4e39@t))) (G4e21@G4e1f@library-path))))) G2c2a@G2aad@library-path (G4dbd@local-library-path G4e19@filename)))) (set! G4dd1@write-record (lambda (G4e3b@record G4e3c@port) ((lambda (G4e3f@rtd) (begin (format G4e3c@port '"    ~a" (record-type-name G4e3f@rtd)) ((lambda (G4e41@v) ((lambda (G4e43@t) (if (memv G4e43@t '(0)) (newline) (if (memv G4e43@t '(1)) (begin (display '": " G4e3c@port) (write ((record-accessor G4e3f@rtd '0) G4e3b@record) G4e3c@port) (newline G4e3c@port)) (begin (display '":\n") ((letrec ((G4e45@f (lambda (G4e47@i) (if (not (= G4e47@i (vector-length G4e41@v))) (begin (display '"       " G4e3c@port) (display (vector-ref G4e41@v G4e47@i) G4e3c@port) (display '": " G4e3c@port) (write ((record-accessor G4e3f@rtd G4e47@i) G4e3b@record) G4e3c@port) (newline G4e3c@port) (G4e45@f (+ G4e47@i '1))) (void))))) G4e45@f) '0))))) (vector-length G4e41@v))) (record-type-field-names G4e3f@rtd)))) (record-rtd G4e3b@record)))) (begin (set! G4e57@G4dd1@write-record G4dd1@write-record) (set! G4e56@G4dcf@load-r6rs-top-level G4dcf@load-r6rs-top-level) (set! G4e55@G4dcd@pre-compile-r6rs-file G4dcd@pre-compile-r6rs-file) (set! G4e54@G4dcb@compile->closure G4dcb@compile->closure) (set! G4e53@G4dc9@compile G4dc9@compile) (set! G4e52@G4dc7@compile-system-libraries G4dc7@compile-system-libraries) (set! G4e51@G4dc5@eval-top-level G4dc5@eval-top-level) (set! G4e50@G4dc3@ironscheme-build G4dc3@ironscheme-build) (set! G4e4f@G4dc1@load G4dc1@load) (set! G4e4e@G4dbf@load/args G4dbf@load/args) (set! G4e4d@G4dbd@local-library-path G4dbd@local-library-path) (set! G4e4c@G4dbb@command-line G4dbb@command-line) (set! G4e4b@G4db9@trace-printer G4db9@trace-printer) (set! G4e4a@G4db7@repl G4db7@repl) (set! G4e49@G4db5@for-each-with-index G4db5@for-each-with-index) (G2c2f@G2ab7@current-precompiled-library-loader G2995@G289c@load-serialized-library) (set-symbol-value! 'load G4dc1@load) (set-symbol-value! 'pre-compile-r6rs-file G4dcd@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4dc5@eval-top-level) (set-symbol-value! 'int-env-syms G4aa7@G3149@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29fd@G29a5@expanded->core) (set-symbol-value! 'trace-printer G4db9@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c2a@G2aad@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4dd2@args G4dd3@port) (with-exception-handler (lambda (G4dd6@c) (begin (display '" Condition components:\n" G4dd3@port) (G4db5@for-each-with-index (lambda (G4dd8@i G4dd9@x) ((lambda (G4ddc@rtd) (begin (format G4dd3@port '"   ~d. ~a" G4dd8@i (record-type-name G4ddc@rtd)) ((lambda (G4dde@v) ((lambda (G4de0@t) (if (memv G4de0@t '(0)) (newline) (if (memv G4de0@t '(1)) (begin (display '": ") (write ((record-accessor G4ddc@rtd '0) G4dd9@x)) (newline)) (begin (display '":\n") ((letrec ((G4de2@f (lambda (G4de4@i) (if (not (= G4de4@i (vector-length G4dde@v))) (begin (display '"       ") (display (vector-ref G4dde@v G4de4@i)) (display '": ") (write ((record-accessor G4ddc@rtd G4de4@i) G4dd9@x)) (newline) (G4de2@f (+ G4de4@i '1))) (void))))) G4de2@f) '0))))) (vector-length G4dde@v))) (record-type-field-names G4ddc@rtd)))) (record-rtd G4dd9@x))) (simple-conditions G4dd6@c)))) (lambda () (if (null? G4dd2@args) (G4db7@repl) (G4dcf@load-r6rs-top-level (car G4dd2@args) 'load (cdr G4dd2@args)))))) (G4dbb@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
