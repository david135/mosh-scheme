;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2828@read-annotated G282a@annotation-stripped G282c@annotation? G282e@annotation-source G2830@annotation-expression G2832@scm->fasl G2834@fasl-save G2836@fasl-load G2838@serialize-library G283a@load-serialized-library G283c@make-record-printer G283e@compile-core G2840@read-library-source-file G2842@make-parameter G28ae@file-options-spec) (begin (set! G2828@read-annotated read) (set! G282a@annotation-stripped (lambda (G28af@x) (G2830@annotation-expression G28af@x))) (set! G282c@annotation? (lambda (G28b1@x) (source-info G28b1@x))) (set! G282e@annotation-source (lambda (G28b3@x) (source-info G28b3@x))) (set! G2830@annotation-expression (lambda (G28b5@x) (if (pair? G28b5@x) (cons (car G28b5@x) (cdr G28b5@x)) (display '"line:46\n")))) (set! G2832@scm->fasl (lambda (G28b7@filename) (string-append G28b7@filename '".fasl"))) (set! G2834@fasl-save (lambda (G28b9@filename G28ba@obj) (call-with-port (open-file-output-port G28b9@filename) (lambda (G28bd@port) ((symbol-value 'fasl-write!) G28ba@obj G28bd@port))))) (set! G2836@fasl-load (lambda (G28bf@filename) (call-with-port (open-file-input-port G28bf@filename) (symbol-value 'fasl-read!)))) (set! G2838@serialize-library (lambda (G28c1@filename G28c2@obj) (begin (format '#t '"serialize-library ~a\n..." G28c1@filename) ((lambda (G28c5@fasl-file) (begin (if (file-exists? G28c5@fasl-file) (delete-file G28c5@fasl-file) (void)) ((call/cc (lambda (G28c9@G28c7) (lambda () (with-exception-handler (lambda (G28cb@c) ((call/cc (lambda (G28cd@G28c8) (G28c9@G28c7 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28c1@filename) (if (file-exists? G28c5@fasl-file) (delete-file G28c5@fasl-file) (void)) '#f) (G28cd@G28c8 (lambda () (raise-continuable G28cb@c)))))))))) (lambda () (begin '#f (G2834@fasl-save G28c5@fasl-file G28c2@obj) (display '"OK\n")))))))))) (G2832@scm->fasl G28c1@filename))))) (set! G283a@load-serialized-library (lambda (G28cf@filename G28d0@obj) ((lambda (G28d3@fasl-file) (if (and (file-exists? G28d3@fasl-file) ((symbol-value 'file-newer?) G28d3@fasl-file G28cf@filename)) ((lambda (G28d5@expanded2core) ((lambda (G28d7@code) ((lambda (G28d9@pivot) ((lambda (G28db@visit) ((lambda (G28dd@visit-proc) ((lambda () (begin (set-car! G28d9@pivot G28dd@visit-proc) ((lambda (G28df@pivot) ((lambda (G28e1@invoke) ((lambda () (begin (set-car! G28df@pivot (lambda () (eval-core G28e1@invoke))) (apply G28d0@obj G28d7@code))))) (G28d5@expanded2core (car G28df@pivot)))) (cdr G28d9@pivot)) '#t)))) (lambda () (eval-core G28db@visit)))) (G28d5@expanded2core (car G28d9@pivot)))) (cddddr (cddddr G28d7@code)))) (G2836@fasl-load G28d3@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2832@scm->fasl G28cf@filename)))) (set! G283c@make-record-printer (lambda (G28e3@name G28e4@printer) (lambda G28e7@x (begin (display '"record printer") (for-each display G28e7@x))))) (set! G283e@compile-core (lambda G28e9@x (apply error 'comile-core '"not implementated" G28e9@x))) (set! G2840@read-library-source-file (lambda (G28eb@file-name) (with-input-from-file G28eb@file-name G2828@read-annotated))) (set! G2842@make-parameter (lambda G28fb ((lambda (G28fc) (if (= G28fc '1) (apply (lambda (G28ed@x) (G2842@make-parameter G28ed@x (lambda (G28ef@x) G28ef@x))) G28fb) (if (= G28fc '2) (apply (lambda (G28f1@x G28f2@fender) ((lambda (G28f5@x) (lambda G28f9 ((lambda (G28fa) (if (= G28fa '0) (apply (lambda () G28f5@x) G28f9) (if (= G28fa '1) (apply (lambda (G28f7@v) (set! G28f5@x (G28f2@fender G28f7@v))) G28f9) (error 'apply '"invalid arg count")))) (length G28f9)))) (G28f2@fender G28f1@x))) G28fb) (error 'apply '"invalid arg count")))) (length G28fb)))) (set! G28ae@file-options-spec (lambda (G28fd@x) G28fd@x)) (begin (set! G290d@G28ae@file-options-spec G28ae@file-options-spec) (set! G290c@G2842@make-parameter G2842@make-parameter) (set! G290b@G2840@read-library-source-file G2840@read-library-source-file) (set! G290a@G283e@compile-core G283e@compile-core) (set! G2909@G283c@make-record-printer G283c@make-record-printer) (set! G2908@G283a@load-serialized-library G283a@load-serialized-library) (set! G2907@G2838@serialize-library G2838@serialize-library) (set! G2906@G2836@fasl-load G2836@fasl-load) (set! G2905@G2834@fasl-save G2834@fasl-save) (set! G2904@G2832@scm->fasl G2832@scm->fasl) (set! G2903@G2830@annotation-expression G2830@annotation-expression) (set! G2902@G282e@annotation-source G282e@annotation-source) (set! G2901@G282c@annotation? G282c@annotation?) (set! G2900@G282a@annotation-stripped G282a@annotation-stripped) (set! G28ff@G2828@read-annotated G2828@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2912@current-primitive-locations G2914@mutable? G2916@rewriter G2918@expanded->core G291a@compile-core-expr G291c@pretty-print G291e@compile-core-expr-to-port) (begin (set! G2912@current-primitive-locations (G290c@G2842@make-parameter (lambda (G291f@x) '#f) (lambda (G2921@p) G2921@p))) (set! G2914@mutable? (lambda (G2923@x) (or (pair? G2923@x) (vector? G2923@x) (hashtable? G2923@x)))) (set! G2916@rewriter (lambda (G2925@quote-hack?) ((lambda (G2928@f) (begin (set! G2928@f (lambda (G2929@x) (if (pair? G2929@x) ((lambda (G292b@t) (if (memv G292b@t '(quote)) (if (and G2925@quote-hack? (G2914@mutable? (cadr G2929@x))) ((lambda (G292d@g) (begin (set-symbol-value! G292d@g (cadr G2929@x)) G292d@g)) (gensym)) G2929@x) (if (memv G292b@t '(case-lambda)) (cons 'case-lambda (map (lambda (G292f@x) (cons (car G292f@x) (map G2928@f (cdr G292f@x)))) (cdr G2929@x))) (if (memv G292b@t '(lambda)) (cons* 'lambda (cadr G2929@x) (map G2928@f (cddr G2929@x))) (if (memv G292b@t '(letrec)) ((lambda (G2931@bindings G2932@body*) ((lambda (G2935@lhs* G2936@rhs*) (cons* 'letrec (map list G2935@lhs* (map G2928@f G2936@rhs*)) (map G2928@f G2932@body*))) (map car G2931@bindings) (map cadr G2931@bindings))) (cadr G2929@x) (cddr G2929@x)) (if (memv G292b@t '(letrec*)) ((lambda (G2939@bindings G293a@body*) ((lambda (G293d@lhs* G293e@rhs*) (cons* 'letrec* (map list G293d@lhs* (map G2928@f G293e@rhs*)) (map G2928@f G293a@body*))) (map car G2939@bindings) (map cadr G2939@bindings))) (cadr G2929@x) (cddr G2929@x)) (if (memv G292b@t '(library-letrec*)) ((lambda (G2941@name G2942@x) ((lambda (G2945@bindings G2946@body*) ((lambda (G2949@lhs* G294a@lhs** G294b@rhs*) (cons* 'library-letrec* G2941@name (map list G2949@lhs* G294a@lhs** (map G2928@f G294b@rhs*)) (map G2928@f G2946@body*))) (map car G2945@bindings) (map cadr G2945@bindings) (map caddr G2945@bindings))) (cadr G2942@x) (cddr G2942@x))) (cadr G2929@x) (cdr G2929@x)) (if (memv G292b@t '(begin)) (cons 'begin (map G2928@f (cdr G2929@x))) (if (memv G292b@t '(set!)) (list 'set! (cadr G2929@x) (G2928@f (caddr G2929@x))) (if (memv G292b@t '(primitive)) ((lambda (G294f@op) ((lambda (G2951@t) (if G2951@t ((lambda (G2953@loc) G2953@loc) G2951@t) G294f@op)) ((G2912@current-primitive-locations) G294f@op))) (cadr G2929@x)) (if (memv G292b@t '(define)) G2929@x (if (list? G2929@x) (map G2928@f G2929@x) (error 'rewrite '"invalid form ~s ~s" G2929@x (list? G2929@x)))))))))))))) (car G2929@x)) G2929@x))) G2928@f)) '#f))) (set! G2918@expanded->core (lambda (G2955@x) ((G2916@rewriter '#t) G2955@x))) (set! G291a@compile-core-expr (lambda (G2957@x) ((G2916@rewriter '#f) G2957@x))) (set! G291c@pretty-print write) (set! G291e@compile-core-expr-to-port (lambda (G2959@x G295a@p) (G291c@pretty-print ((G2916@rewriter '#f) G2959@x) G295a@p))) (begin (set! G2963@G291e@compile-core-expr-to-port G291e@compile-core-expr-to-port) (set! G2962@G291c@pretty-print G291c@pretty-print) (set! G2961@G291a@compile-core-expr G291a@compile-core-expr) (set! G2960@G2918@expanded->core G2918@expanded->core) (set! G295f@G2916@rewriter G2916@rewriter) (set! G295e@G2914@mutable? G2914@mutable?) (set! G295d@G2912@current-primitive-locations G2912@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29b9@make-collection G29bb@current-library-collection G29c1@G29bc G29c3@G29be G29c5@G29bd G29c8@library? G29ca@make-library G29cc@library-id G29ce@library-name G29d0@library-version G29d2@library-imp* G29d4@library-vis* G29d6@library-inv* G29d8@library-subst G29da@library-env G29dc@library-visit-state G29de@library-invoke-state G29e0@library-visit-code G29e2@library-invoke-code G29e4@library-visible? G29e6@library-source-file-name G29e8@set-library-id! G29ea@set-library-name! G29ec@set-library-version! G29ee@set-library-imp*! G29f0@set-library-vis*! G29f2@set-library-inv*! G29f4@set-library-subst! G29f6@set-library-env! G29f8@set-library-visit-state! G29fa@set-library-invoke-state! G29fc@set-library-visit-code! G29fe@set-library-invoke-code! G2a00@set-library-visible?! G2a02@set-library-source-file-name! G2a04@rp G2a06@find-dependencies G2a08@find-library-by G2a0a@library-path G2a0c@library-extensions G2a0e@library-name->file-name G2a10@file-locator G2a12@serialize-all G2a14@current-precompiled-library-loader G2a16@try-load-from-file G2a18@library-loader G2a1a@current-library-expander G2a1c@external-pending-libraries G2a1e@find-external-library G2a20@find-library-by-name G2a22@library-exists? G2a24@find-library-by-spec/die G2a26@label->binding-table G2a28@install-library-record G2a2a@install-library G2a2c@imported-label->binding G2a2e@invoke-library G2a30@visit-library G2a32@invoke-library-by-spec G2a34@installed-libraries G2a36@library-spec) (begin (set! G29b9@make-collection (lambda () ((lambda (G2a37@set) ((lambda (G2a3a@set-cons) (begin (set! G2a3a@set-cons (lambda (G2a3f@x G2a40@ls) (if (memq G2a3f@x G2a40@ls) G2a40@ls (cons G2a3f@x G2a40@ls)))) (lambda G2a3d ((lambda (G2a3e) (if (= G2a3e '0) (apply (lambda () G2a37@set) G2a3d) (if (= G2a3e '1) (apply (lambda (G2a3b@x) (set! G2a37@set (G2a3a@set-cons G2a3b@x G2a37@set))) G2a3d) (error 'apply '"invalid arg count")))) (length G2a3d))))) '#f)) '()))) (set! G29bb@current-library-collection (G290c@G2842@make-parameter (G29b9@make-collection) (lambda (G2a43@x) (begin (if (not (procedure? G2a43@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a43@x) (void)) G2a43@x)))) (set! G29c1@G29bc (make-record-type-descriptor 'library '#f 'G29bf '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29c3@G29be '#f) (set! G29c5@G29bd (make-record-constructor-descriptor G29c1@G29bc '#f G29c3@G29be)) (set! G29c8@library? (record-predicate G29c1@G29bc)) (set! G29ca@make-library (record-constructor G29c5@G29bd)) (set! G29cc@library-id (record-accessor G29c1@G29bc '0)) (set! G29ce@library-name (record-accessor G29c1@G29bc '1)) (set! G29d0@library-version (record-accessor G29c1@G29bc '2)) (set! G29d2@library-imp* (record-accessor G29c1@G29bc '3)) (set! G29d4@library-vis* (record-accessor G29c1@G29bc '4)) (set! G29d6@library-inv* (record-accessor G29c1@G29bc '5)) (set! G29d8@library-subst (record-accessor G29c1@G29bc '6)) (set! G29da@library-env (record-accessor G29c1@G29bc '7)) (set! G29dc@library-visit-state (record-accessor G29c1@G29bc '8)) (set! G29de@library-invoke-state (record-accessor G29c1@G29bc '9)) (set! G29e0@library-visit-code (record-accessor G29c1@G29bc '10)) (set! G29e2@library-invoke-code (record-accessor G29c1@G29bc '11)) (set! G29e4@library-visible? (record-accessor G29c1@G29bc '12)) (set! G29e6@library-source-file-name (record-accessor G29c1@G29bc '13)) (set! G29e8@set-library-id! (record-mutator G29c1@G29bc '0)) (set! G29ea@set-library-name! (record-mutator G29c1@G29bc '1)) (set! G29ec@set-library-version! (record-mutator G29c1@G29bc '2)) (set! G29ee@set-library-imp*! (record-mutator G29c1@G29bc '3)) (set! G29f0@set-library-vis*! (record-mutator G29c1@G29bc '4)) (set! G29f2@set-library-inv*! (record-mutator G29c1@G29bc '5)) (set! G29f4@set-library-subst! (record-mutator G29c1@G29bc '6)) (set! G29f6@set-library-env! (record-mutator G29c1@G29bc '7)) (set! G29f8@set-library-visit-state! (record-mutator G29c1@G29bc '8)) (set! G29fa@set-library-invoke-state! (record-mutator G29c1@G29bc '9)) (set! G29fc@set-library-visit-code! (record-mutator G29c1@G29bc '10)) (set! G29fe@set-library-invoke-code! (record-mutator G29c1@G29bc '11)) (set! G2a00@set-library-visible?! (record-mutator G29c1@G29bc '12)) (set! G2a02@set-library-source-file-name! (record-mutator G29c1@G29bc '13)) (set! G2a04@rp (G2909@G283c@make-record-printer 'library (lambda (G2a45@x G2a46@p G2a47@wr) (begin (if (not (G29c8@library? G2a45@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29d0@library-version G2a45@x)) (G29ce@library-name G2a45@x) (append (G29ce@library-name G2a45@x) (list (G29d0@library-version G2a45@x))))) G2a46@p))))) (set! G2a06@find-dependencies (lambda (G2a4b@ls) (if (null? G2a4b@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2a08@find-library-by (lambda (G2a4d@pred) ((letrec ((G2a4f@f (lambda (G2a51@ls) (if (null? G2a51@ls) '#f (if (G2a4d@pred (car G2a51@ls)) (car G2a51@ls) (G2a4f@f (cdr G2a51@ls))))))) G2a4f@f) ((G29bb@current-library-collection))))) (set! G2a0a@library-path (G290c@G2842@make-parameter '(".") (lambda (G2a53@x) (if (and (list? G2a53@x) (for-all string? G2a53@x)) (map (lambda (G2a55@x) G2a55@x) G2a53@x) (assertion-violation 'library-path '"not a list of strings" G2a53@x))))) (set! G2a0c@library-extensions (G290c@G2842@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a57@x) (if (and (list? G2a57@x) (for-all string? G2a57@x)) (map (lambda (G2a59@x) G2a59@x) G2a57@x) (assertion-violation 'library-extensions '"not a list of strings" G2a57@x))))) (set! G2a0e@library-name->file-name (lambda (G2a5b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a5f@G2a5d G2a60@G2a5e) ((lambda (G2a63@extract G2a64@p) ((lambda (G2a68@display-hex) (begin (set! G2a68@display-hex (lambda (G2a71@n) (if (<= '0 G2a71@n '9) (display G2a71@n G2a64@p) (display (integer->char (+ (char->integer '#\A) (- G2a71@n '10))) G2a64@p)))) (begin ((letrec ((G2a69@f (lambda (G2a6b@ls) (if (not (null? G2a6b@ls)) (begin (display '"/" G2a64@p) (for-each (lambda (G2a6d@c) (if (or (char<=? '#\a G2a6d@c '#\z) (char<=? '#\A G2a6d@c '#\Z) (char<=? '#\0 G2a6d@c '#\9) (memv G2a6d@c '(#\- #\. #\_ #\~))) (display G2a6d@c G2a64@p) (begin (display '"%" G2a64@p) ((lambda (G2a6f@n) (begin (G2a68@display-hex (quotient G2a6f@n '16)) (G2a68@display-hex (remainder G2a6f@n '16)))) (char->integer G2a6d@c))))) (string->list (symbol->string (car G2a6b@ls)))) (G2a69@f (cdr G2a6b@ls))) (void))))) G2a69@f) G2a5b@x) (G2a63@extract)))) '#f)) G2a60@G2a5e G2a5f@G2a5d))))) (set! G2a10@file-locator (G290c@G2842@make-parameter (lambda (G2a73@x) ((lambda (G2a75@str) ((letrec ((G2a77@f (lambda (G2a79@ls G2a7a@exts G2a7b@failed-list) (if (null? G2a79@ls) ((lambda () ((lambda (G2a87@G2a82 G2a89@G2a84 G2a8b@G2a83 G2a8e@G2a81 G2a90@make-library-resolution-condition G2a92@G2a7f G2a94@G2a80 G2a96@library-resolution-condition? G2a98@condition-library G2a9a@condition-files) (begin (set! G2a87@G2a82 (make-record-type-descriptor '&library-resolution G4c42@G4993@&condition-rtd 'G2a85 '#f '#f '#((immutable library) (immutable files)))) (set! G2a89@G2a84 '#f) (set! G2a8b@G2a83 (make-record-constructor-descriptor G2a87@G2a82 G4c43@G4995@&condition-rcd G2a89@G2a84)) (set! G2a8e@G2a81 (record-predicate G2a87@G2a82)) (set! G2a90@make-library-resolution-condition (record-constructor G2a8b@G2a83)) (set! G2a92@G2a7f (record-accessor G2a87@G2a82 '0)) (set! G2a94@G2a80 (record-accessor G2a87@G2a82 '1)) (set! G2a96@library-resolution-condition? (condition-predicate G2a87@G2a82)) (set! G2a98@condition-library (condition-accessor G2a87@G2a82 G2a92@G2a7f)) (set! G2a9a@condition-files (condition-accessor G2a87@G2a82 G2a94@G2a80)) (raise (condition (G4c62@G4a2b@make-error) (G4c84@G4a85@make-who-condition 'expander) (G4c48@G49e8@make-message-condition '"cannot locate library in library-path") (G2a90@make-library-resolution-condition G2a73@x (reverse G2a7b@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a7a@exts) (G2a77@f (cdr G2a79@ls) (G2a0c@library-extensions) G2a7b@failed-list) ((lambda (G2a9b@name) (if (file-exists? G2a9b@name) G2a9b@name (G2a77@f G2a79@ls (cdr G2a7a@exts) (cons G2a9b@name G2a7b@failed-list)))) (string-append (car G2a79@ls) G2a75@str (car G2a7a@exts)))))))) G2a77@f) (G2a0a@library-path) (G2a0c@library-extensions) '())) (G2a0e@library-name->file-name G2a73@x))) (lambda (G2a9d@f) (if (procedure? G2a9d@f) G2a9d@f (assertion-violation 'file-locator '"not a procedure" G2a9d@f))))) (set! G2a12@serialize-all (lambda (G2a9f@serialize G2aa0@compile) ((lambda (G2aa4@library-desc) (begin (set! G2aa4@library-desc (lambda (G2aa7@x) (list (G29cc@library-id G2aa7@x) (G29ce@library-name G2aa7@x)))) (for-each (lambda (G2aa5@x) (if (G29e6@library-source-file-name G2aa5@x) (G2a9f@serialize (G29e6@library-source-file-name G2aa5@x) (list (G29cc@library-id G2aa5@x) (G29ce@library-name G2aa5@x) (G29d0@library-version G2aa5@x) (map G2aa4@library-desc (G29d2@library-imp* G2aa5@x)) (map G2aa4@library-desc (G29d4@library-vis* G2aa5@x)) (map G2aa4@library-desc (G29d6@library-inv* G2aa5@x)) (G29d8@library-subst G2aa5@x) (G29da@library-env G2aa5@x) (G2aa0@compile (G29e0@library-visit-code G2aa5@x)) (G2aa0@compile (G29e2@library-invoke-code G2aa5@x)) (G29e4@library-visible? G2aa5@x))) (void))) ((G29bb@current-library-collection))))) '#f))) (set! G2a14@current-precompiled-library-loader (G290c@G2842@make-parameter (lambda (G2aa9@filename G2aaa@sk) '#f))) (set! G2a16@try-load-from-file (lambda (G2aad@filename) ((G2a14@current-precompiled-library-loader) G2aad@filename (lambda G2ad3 ((lambda (G2ad4) (if (= G2ad4 '11) (apply (lambda (G2aaf@id G2ab0@name G2ab1@ver G2ab2@imp* G2ab3@vis* G2ab4@inv* G2ab5@exp-subst G2ab6@exp-env G2ab7@visit-proc G2ab8@invoke-proc G2ab9@visible?) ((letrec ((G2ac5@f (lambda (G2ac7@deps) (if (null? G2ac7@deps) (begin (G2a2a@install-library G2aaf@id G2ab0@name G2ab1@ver G2ab2@imp* G2ab3@vis* G2ab4@inv* G2ab5@exp-subst G2ab6@exp-env G2ab7@visit-proc G2ab8@invoke-proc '#f '#f G2ab9@visible? '#f) '#t) ((lambda (G2ac9@d) ((lambda (G2acb@label G2acc@dname) ((lambda (G2acf@l) (if (and (G29c8@library? G2acf@l) (eq? G2acb@label (G29cc@library-id G2acf@l))) (G2ac5@f (cdr G2ac7@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2ab0@name G2acc@dname G2aad@filename G2acf@l G2acb@label (G29cc@library-id G2acf@l)) '#f))) (G2a20@find-library-by-name G2acc@dname))) (car G2ac9@d) (cadr G2ac9@d))) (car G2ac7@deps)))))) G2ac5@f) (append G2ab2@imp* G2ab3@vis* G2ab4@inv*))) G2ad3) (if (>= G2ad4 '0) (apply (lambda G2ad1@others '#f) G2ad3) (error 'apply '"invalid arg count")))) (length G2ad3)))))) (set! G2a18@library-loader (G290c@G2842@make-parameter (lambda (G2ad5@x) ((lambda (G2ad7@file-name) (if (not G2ad7@file-name) (assertion-violation '#f '"cannot file library" G2ad5@x) (or (G2a16@try-load-from-file G2ad7@file-name) ((G2a1a@current-library-expander) (G290b@G2840@read-library-source-file G2ad7@file-name) G2ad7@file-name (lambda (G2ad9@name) (if (not (fast-equal? G2ad9@name G2ad5@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2add@G2adb G2ade@G2adc) ((lambda (G2ae1@e G2ae2@p) (begin (display '"expected to find library " G2ae2@p) (write G2ad5@x G2ae2@p) (display '" in file " G2ae2@p) (display G2ad7@file-name G2ae2@p) (display '", found " G2ae2@p) (write G2ad9@name G2ae2@p) (display '" instead" G2ae2@p) (G2ae1@e))) G2ade@G2adc G2add@G2adb)))) (void))))))) ((G2a10@file-locator) G2ad5@x))) (lambda (G2ae5@f) (if (procedure? G2ae5@f) G2ae5@f (assertion-violation 'library-locator '"not a procedure" G2ae5@f))))) (set! G2a1a@current-library-expander (G290c@G2842@make-parameter (lambda (G2ae7@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ae9@f) (if (procedure? G2ae9@f) G2ae9@f (assertion-violation 'library-expander '"not a procedure" G2ae9@f))))) (set! G2a1c@external-pending-libraries (G290c@G2842@make-parameter '())) (set! G2a1e@find-external-library (lambda (G2aeb@name) (begin (if (member G2aeb@name (G2a1c@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2aeb@name) (void)) ((lambda (G2aef@G2aed G2af0@G2aee) ((lambda (G2af3@swap) (dynamic-wind G2af3@swap (lambda () (begin ((G2a18@library-loader) G2aeb@name) (or (G2a08@find-library-by (lambda (G2af5@x) (fast-equal? (G29ce@library-name G2af5@x) G2aeb@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2aeb@name)))) G2af3@swap)) (lambda () ((lambda (G2af7@t) (begin (G2aef@G2aed G2af0@G2aee) (set! G2af0@G2aee G2af7@t))) (G2aef@G2aed))))) G2a1c@external-pending-libraries (cons G2aeb@name (G2a1c@external-pending-libraries)))))) (set! G2a20@find-library-by-name (lambda (G2af9@name) (or (G2a08@find-library-by (lambda (G2afb@x) (fast-equal? (G29ce@library-name G2afb@x) G2af9@name))) (G2a1e@find-external-library G2af9@name)))) (set! G2a22@library-exists? (lambda (G2afd@name) (and (G2a08@find-library-by (lambda (G2aff@x) (fast-equal? (G29ce@library-name G2aff@x) G2afd@name))) '#t))) (set! G2a24@find-library-by-spec/die (lambda (G2b01@spec) ((lambda (G2b03@id) (or (G2a08@find-library-by (lambda (G2b05@x) (eq? G2b03@id (G29cc@library-id G2b05@x)))) (assertion-violation '#f '"cannot find library with required spec" G2b01@spec))) (car G2b01@spec)))) (set! G2a26@label->binding-table (make-eq-hashtable)) (set! G2a28@install-library-record (lambda (G2b07@lib) (begin ((lambda (G2b09@exp-env) (for-each (lambda (G2b0b@x) ((lambda (G2b0d@label G2b0e@binding) ((lambda (G2b11@binding) (hashtable-set! G2a26@label->binding-table G2b0d@label G2b11@binding)) ((lambda (G2b13@t) (if (memv G2b13@t '(global)) (cons 'global (cons G2b07@lib (cdr G2b0e@binding))) (if (memv G2b13@t '(global-macro)) (cons 'global-macro (cons G2b07@lib (cdr G2b0e@binding))) (if (memv G2b13@t '(global-macro!)) (cons 'global-macro! (cons G2b07@lib (cdr G2b0e@binding))) G2b0e@binding)))) (car G2b0e@binding)))) (car G2b0b@x) (cdr G2b0b@x))) G2b09@exp-env)) (G29da@library-env G2b07@lib)) ((G29bb@current-library-collection) G2b07@lib)))) (set! G2a2a@install-library (lambda (G2b15@id G2b16@name G2b17@ver G2b18@imp* G2b19@vis* G2b1a@inv* G2b1b@exp-subst G2b1c@exp-env G2b1d@visit-proc G2b1e@invoke-proc G2b1f@visit-code G2b20@invoke-code G2b21@visible? G2b22@source-file-name) ((lambda (G2b31@imp-lib* G2b32@vis-lib* G2b33@inv-lib*) (begin (if (not (and (symbol? G2b15@id) (list? G2b16@name) (list? G2b17@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b15@id G2b16@name G2b17@ver) (void)) (if (G2a22@library-exists? G2b16@name) (assertion-violation 'install-library '"library is already installed" G2b16@name) (void)) ((lambda (G2b37@lib) (G2a28@install-library-record G2b37@lib)) (G29ca@make-library G2b15@id G2b16@name G2b17@ver G2b31@imp-lib* G2b32@vis-lib* G2b33@inv-lib* G2b1b@exp-subst G2b1c@exp-env G2b1d@visit-proc G2b1e@invoke-proc G2b1f@visit-code G2b20@invoke-code G2b21@visible? G2b22@source-file-name)))) (map G2a24@find-library-by-spec/die G2b18@imp*) (map G2a24@find-library-by-spec/die G2b19@vis*) (map G2a24@find-library-by-spec/die G2b1a@inv*)))) (set! G2a2c@imported-label->binding (lambda (G2b39@lab) (hashtable-ref G2a26@label->binding-table G2b39@lab '#f))) (set! G2a2e@invoke-library (lambda (G2b3b@lib) ((lambda (G2b3d@invoke) (if (procedure? G2b3d@invoke) (begin (G29fa@set-library-invoke-state! G2b3b@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b3b@lib))) (for-each G2a2e@invoke-library (G29d6@library-inv* G2b3b@lib)) (G29fa@set-library-invoke-state! G2b3b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b3b@lib))) (G2b3d@invoke) (G29fa@set-library-invoke-state! G2b3b@lib '#t)) (void))) (G29de@library-invoke-state G2b3b@lib)))) (set! G2a30@visit-library (lambda (G2b3f@lib) ((lambda (G2b41@visit) (if (procedure? G2b41@visit) (begin (G29f8@set-library-visit-state! G2b3f@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b3f@lib))) (for-each G2a2e@invoke-library (G29d4@library-vis* G2b3f@lib)) (G29f8@set-library-visit-state! G2b3f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b3f@lib))) (G2b41@visit) (G29f8@set-library-visit-state! G2b3f@lib '#t)) (void))) (G29dc@library-visit-state G2b3f@lib)))) (set! G2a32@invoke-library-by-spec (lambda (G2b43@spec) (G2a2e@invoke-library (G2a24@find-library-by-spec/die G2b43@spec)))) (set! G2a34@installed-libraries (lambda G2b4b ((lambda (G2b4c) (if (= G2b4c '1) (apply (lambda (G2b45@all?) ((letrec ((G2b47@f (lambda (G2b49@ls) (if (null? G2b49@ls) '() (if (or G2b45@all? (G29e4@library-visible? (car G2b49@ls))) (cons (car G2b49@ls) (G2b47@f (cdr G2b49@ls))) (G2b47@f (cdr G2b49@ls))))))) G2b47@f) ((G29bb@current-library-collection)))) G2b4b) (if (= G2b4c '0) (apply (lambda () (G2a34@installed-libraries '#f)) G2b4b) (error 'apply '"invalid arg count")))) (length G2b4b)))) (set! G2a36@library-spec (lambda (G2b4d@x) (begin (if (not (G29c8@library? G2b4d@x)) (assertion-violation 'library-spec '"not a library" G2b4d@x) (void)) (list (G29cc@library-id G2b4d@x) (G29ce@library-name G2b4d@x) (G29d0@library-version G2b4d@x))))) (begin (set! G2b8b@G2a36@library-spec G2a36@library-spec) (set! G2b8a@G2a34@installed-libraries G2a34@installed-libraries) (set! G2b89@G2a32@invoke-library-by-spec G2a32@invoke-library-by-spec) (set! G2b88@G2a30@visit-library G2a30@visit-library) (set! G2b87@G2a2e@invoke-library G2a2e@invoke-library) (set! G2b86@G2a2c@imported-label->binding G2a2c@imported-label->binding) (set! G2b85@G2a2a@install-library G2a2a@install-library) (set! G2b84@G2a28@install-library-record G2a28@install-library-record) (set! G2b83@G2a26@label->binding-table G2a26@label->binding-table) (set! G2b82@G2a24@find-library-by-spec/die G2a24@find-library-by-spec/die) (set! G2b81@G2a22@library-exists? G2a22@library-exists?) (set! G2b80@G2a20@find-library-by-name G2a20@find-library-by-name) (set! G2b7f@G2a1e@find-external-library G2a1e@find-external-library) (set! G2b7e@G2a1c@external-pending-libraries G2a1c@external-pending-libraries) (set! G2b7d@G2a1a@current-library-expander G2a1a@current-library-expander) (set! G2b7c@G2a18@library-loader G2a18@library-loader) (set! G2b7b@G2a16@try-load-from-file G2a16@try-load-from-file) (set! G2b7a@G2a14@current-precompiled-library-loader G2a14@current-precompiled-library-loader) (set! G2b79@G2a12@serialize-all G2a12@serialize-all) (set! G2b78@G2a10@file-locator G2a10@file-locator) (set! G2b77@G2a0e@library-name->file-name G2a0e@library-name->file-name) (set! G2b76@G2a0c@library-extensions G2a0c@library-extensions) (set! G2b75@G2a0a@library-path G2a0a@library-path) (set! G2b74@G2a08@find-library-by G2a08@find-library-by) (set! G2b73@G2a06@find-dependencies G2a06@find-dependencies) (set! G2b72@G2a04@rp G2a04@rp) (set! G2b71@G2a02@set-library-source-file-name! G2a02@set-library-source-file-name!) (set! G2b70@G2a00@set-library-visible?! G2a00@set-library-visible?!) (set! G2b6f@G29fe@set-library-invoke-code! G29fe@set-library-invoke-code!) (set! G2b6e@G29fc@set-library-visit-code! G29fc@set-library-visit-code!) (set! G2b6d@G29fa@set-library-invoke-state! G29fa@set-library-invoke-state!) (set! G2b6c@G29f8@set-library-visit-state! G29f8@set-library-visit-state!) (set! G2b6b@G29f6@set-library-env! G29f6@set-library-env!) (set! G2b6a@G29f4@set-library-subst! G29f4@set-library-subst!) (set! G2b69@G29f2@set-library-inv*! G29f2@set-library-inv*!) (set! G2b68@G29f0@set-library-vis*! G29f0@set-library-vis*!) (set! G2b67@G29ee@set-library-imp*! G29ee@set-library-imp*!) (set! G2b66@G29ec@set-library-version! G29ec@set-library-version!) (set! G2b65@G29ea@set-library-name! G29ea@set-library-name!) (set! G2b64@G29e8@set-library-id! G29e8@set-library-id!) (set! G2b63@G29e6@library-source-file-name G29e6@library-source-file-name) (set! G2b62@G29e4@library-visible? G29e4@library-visible?) (set! G2b61@G29e2@library-invoke-code G29e2@library-invoke-code) (set! G2b60@G29e0@library-visit-code G29e0@library-visit-code) (set! G2b5f@G29de@library-invoke-state G29de@library-invoke-state) (set! G2b5e@G29dc@library-visit-state G29dc@library-visit-state) (set! G2b5d@G29da@library-env G29da@library-env) (set! G2b5c@G29d8@library-subst G29d8@library-subst) (set! G2b5b@G29d6@library-inv* G29d6@library-inv*) (set! G2b5a@G29d4@library-vis* G29d4@library-vis*) (set! G2b59@G29d2@library-imp* G29d2@library-imp*) (set! G2b58@G29d0@library-version G29d0@library-version) (set! G2b57@G29ce@library-name G29ce@library-name) (set! G2b56@G29cc@library-id G29cc@library-id) (set! G2b55@G29ca@make-library G29ca@make-library) (set! G2b54@G29c8@library? G29c8@library?) (set! G2b53@G29c5@G29bd G29c5@G29bd) (set! G2b52@G29c3@G29be G29c3@G29be) (set! G2b51@G29c1@G29bc G29c1@G29bc) (set! G2b50@G29bb@current-library-collection G29bb@current-library-collection) (set! G2b4f@G29b9@make-collection G29b9@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b8e@build-global-define G2c08@build-lambda G2c0a@build-case-lambda G2c0c@build-let G2c3e@build-sequence G2c40@build-void G2c42@build-letrec G2c44@build-letrec* G2c46@build-library-letrec* G2c48@build-receive) (begin (set! G2b8e@build-global-define (lambda (G2c49@x) (G2c40@build-void))) (set! G2c08@build-lambda (lambda (G2c4b@ae G2c4c@vars G2c4d@exp) (list 'lambda G2c4c@vars G2c4d@exp))) (set! G2c0a@build-case-lambda (lambda (G2c51@ae G2c52@vars* G2c53@exp*) ((lambda (G2c58@build-error G2c5a@build-pred G2c5c@build-apply G2c5e@expand-case-lambda) (begin (set! G2c58@build-error (lambda (G2c8d@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c5a@build-pred (lambda (G2c77@ae G2c78@n G2c79@vars) (call-with-values (lambda () ((letrec ((G2c7f@f (lambda (G2c81@vars G2c82@count) (if (pair? G2c81@vars) (G2c7f@f (cdr G2c81@vars) (+ G2c82@count '1)) (if (null? G2c81@vars) (values G2c82@count '=) (values G2c82@count '>=)))))) G2c7f@f) G2c79@vars '0)) (lambda (G2c85@G2c7d G2c86@G2c7e) ((lambda (G2c89@pred G2c8a@count) (list (list 'primitive G2c89@pred) G2c78@n (list 'quote G2c8a@count))) G2c86@G2c7e G2c85@G2c7d))))) (set! G2c5c@build-apply (lambda (G2c6f@ae G2c70@g G2c71@vars G2c72@exp) (list '(primitive apply) (G2c08@build-lambda G2c6f@ae G2c71@vars G2c72@exp) G2c70@g))) (set! G2c5e@expand-case-lambda (lambda (G2c5f@ae G2c60@vars G2c61@exp*) ((lambda (G2c65@g G2c66@n) (list 'lambda G2c65@g (G2c0c@build-let G2c5f@ae (list G2c66@n) (list (list '(primitive length) G2c65@g)) ((letrec ((G2c69@f (lambda (G2c6b@vars* G2c6c@exp*) (if (null? G2c6b@vars*) (G2c58@build-error G2c5f@ae) (list 'if (G2c5a@build-pred G2c5f@ae G2c66@n (car G2c6b@vars*)) (G2c5c@build-apply G2c5f@ae G2c65@g (car G2c6b@vars*) (car G2c6c@exp*)) (G2c69@f (cdr G2c6b@vars*) (cdr G2c6c@exp*))))))) G2c69@f) G2c52@vars* G2c61@exp*)))) (gensym) (gensym)))) (if (= (length G2c53@exp*) '1) (G2c08@build-lambda G2c51@ae (car G2c52@vars*) (car G2c53@exp*)) (G2c5e@expand-case-lambda G2c51@ae G2c52@vars* G2c53@exp*)))) '#f '#f '#f '#f))) (set! G2c0c@build-let (lambda (G2c8f@ae G2c90@lhs* G2c91@rhs* G2c92@body) (cons (G2c08@build-lambda G2c8f@ae G2c90@lhs* G2c92@body) G2c91@rhs*))) (set! G2c3e@build-sequence (lambda (G2c97@ae G2c98@exps) ((letrec ((G2c9b@loop (lambda (G2c9d@exps) (if (null? (cdr G2c9d@exps)) (car G2c9d@exps) (if (equal? (car G2c9d@exps) (G2c40@build-void)) (G2c9b@loop (cdr G2c9d@exps)) (cons 'begin G2c9d@exps)))))) G2c9b@loop) G2c98@exps))) (set! G2c40@build-void (lambda () '((primitive void)))) (set! G2c42@build-letrec (lambda (G2c9f@ae G2ca0@vars G2ca1@val-exps G2ca2@body-exp) (if (null? G2ca0@vars) G2ca2@body-exp (list 'letrec (map list G2ca0@vars G2ca1@val-exps) G2ca2@body-exp)))) (set! G2c44@build-letrec* (lambda (G2ca7@ae G2ca8@vars G2ca9@val-exps G2caa@body-exp) (if (null? G2ca8@vars) G2caa@body-exp (G2c0c@build-let G2ca7@ae G2ca8@vars (map (lambda (G2caf@x) (list 'quote '#f)) G2ca8@vars) (G2c3e@build-sequence G2ca7@ae (append (map (lambda (G2cb1@lhs G2cb2@rhs) (list 'set! G2cb1@lhs G2cb2@rhs)) G2ca8@vars G2ca9@val-exps) (list G2caa@body-exp))))))) (set! G2c46@build-library-letrec* (lambda (G2cb5@ae G2cb6@name G2cb7@vars G2cb8@locs G2cb9@val-exps G2cba@body-exp) (list 'library-letrec* G2cb6@name (map list G2cb7@vars G2cb8@locs G2cb9@val-exps) G2cba@body-exp))) (set! G2c48@build-receive (lambda (G2cc1@ae G2cc2@vars G2cc3@producer G2cc4@body*) (begin (display '"************** in ") (cons 'receive (cons G2cc2@vars (cons G2cc3@producer G2cc4@body*)))))) (begin (set! G2cd2@G2c48@build-receive G2c48@build-receive) (set! G2cd1@G2c46@build-library-letrec* G2c46@build-library-letrec*) (set! G2cd0@G2c44@build-letrec* G2c44@build-letrec*) (set! G2ccf@G2c42@build-letrec G2c42@build-letrec) (set! G2cce@G2c40@build-void G2c40@build-void) (set! G2ccd@G2c3e@build-sequence G2c3e@build-sequence) (set! G2ccc@G2c0c@build-let G2c0c@build-let) (set! G2ccb@G2c0a@build-case-lambda G2c0a@build-case-lambda) (set! G2cca@G2c08@build-lambda G2c08@build-lambda) (set! G2cc9@G2b8e@build-global-define G2b8e@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2ce1@set-cons G2ce3@set-union G2ce8@top-mark* G2cea@top-marked? G2cec@gen-lexical G2cee@gen-global G2cf0@gen-label G2cf2@gen-top-level-label G2cf4@gen-define-label+loc G2cf6@gen-define-label G2cfc@G2cf7 G2cfe@G2cf9 G2d00@G2cf8 G2d03@rib? G2d05@make-rib G2d07@rib-sym* G2d09@rib-mark** G2d0b@rib-label* G2d0d@rib-sealed/freq G2d0f@rib-cache G2d11@set-rib-sym*! G2d13@set-rib-mark**! G2d15@set-rib-label*! G2d17@set-rib-sealed/freq! G2d19@set-rib-cache! G2d1b@make-empty-rib G2d1d@make-cache-rib G2d1f@find-label G2d21@extend-rib! G2d23@extend-rib/nc! G2d25@make-rib-map G2d27@seal-rib! G2d29@unseal-rib! G2d2b@make-full-rib G2d31@G2d2c G2d33@G2d2e G2d35@G2d2d G2d38@stx? G2d3a@make-stx G2d3c@stx-expr G2d3e@stx-mark* G2d40@stx-subst* G2d42@stx-ae* G2d44@set-stx-expr! G2d46@set-stx-mark*! G2d48@set-stx-subst*! G2d4a@set-stx-ae*! G2d4c@rp G2d4e@datum->stx G2d50@gen-mark G2d52@anti-mark G2d54@anti-mark? G2d56@join-wraps G2d58@mkstx G2d5a@add-mark G2d5c@add-subst G2d5e@syntax-kind? G2d60@syntax-vector->list G2d62@syntax-pair? G2d64@syntax-vector? G2d66@syntax-null? G2d68@syntax-list? G2d6a@syntax-car G2d6c@syntax-cdr G2d6e@syntax->list G2d70@id? G2d72@id->sym G2d74@same-marks? G2d76@bound-id=? G2d78@free-id=? G2d7a@valid-bound-ids? G2d7c@distinct-bound-ids? G2d7e@bound-id-member? G2d80@self-evaluating? G2d82@strip-annotations G2d84@strip G2d86@stx->datum G2d88@same-marks*? G2d8a@id->label G2d8c@id->real-label G2d8e@label->binding G2d90@make-binding G2d92@binding-type G2d94@binding-value G2d96@raise-unbound-error G2d98@syntax-type G2da8@sanitize-binding G2daa@make-variable-transformer G2dac@variable-transformer? G2dae@variable-transformer-procedure G2db0@make-eval-transformer G2ef3@parse-define G2ef5@parse-define-syntax G2ef7@scheme-stx-hashtable G2ef9@scheme-stx G2efb@lexical-var G2efd@lexical-mutable? G2eff@set-lexical-mutable! G2f01@add-lexical G2f03@add-lexicals G2f05@letrec-helper G2f07@letrec-transformer G2f09@letrec*-transformer G2f0b@fluid-let-syntax-transformer G2f0d@type-descriptor-transformer G2f0f@record-type-descriptor-transformer G2f11@record-constructor-descriptor-transformer G2f13@when-macro G2f15@unless-macro G2f17@if-transformer G2f19@and-transformer G2f1b@or-transformer G2f1d@case-macro G2f1f@quote-transformer G2f21@case-lambda-transformer G2f23@lambda-transformer G2f25@bless G2f27@with-syntax-macro G2f29@invalid-fmls-error G2f2b@let-macro G2f2d@let-values-macro G2f2f@let*-values-macro G2f31@trace-lambda-macro G2f33@trace-define-macro G2f35@trace-define-syntax-macro G2f37@trace-let/rec-syntax G2f39@trace-let-syntax-macro G2f3b@trace-letrec-syntax-macro G2f3d@guard-macro G2f3f@define-enumeration-macro G2f41@time-macro G2f43@delay-macro G2f45@assert-macro G2f47@endianness-macro G2f49@identifier-syntax-macro G2f4b@do-macro G2f4d@let*-macro G2f4f@or-macro G2f51@and-macro G2f53@cond-macro G2f55@do-include G2f57@include-macro G2f59@include-into-macro G2f5b@syntax-rules-macro G2f5d@quasiquote-macro G2f5f@quasisyntax-macro G2f61@define-struct-macro G2f63@define-record-type-macro G2f65@define-condition-type-macro G2f67@incorrect-usage-macro G2f69@parameterize-macro G2f6b@foreign-call-transformer G2f6d@convert-pattern G2f6f@syntax-dispatch G2f71@ellipsis? G2f73@underscore? G2f75@verify-literals G2f77@syntax-case-transformer G2f79@ellipsis-map G2f7b@syntax-transformer G2f7d@core-macro-transformer G2f7f@file-options-macro G2f81@symbol-macro G2f83@macro-transformer G2f85@local-macro-transformer G2f87@do-macro-call G2f89@chi-macro G2f8b@chi-local-macro G2f8d@chi-global-macro G2f8f@chi-expr* G2f91@chi-application G2f93@chi-expr G2f95@chi-set! G2f97@verify-formals G2f99@chi-lambda-clause G2f9b@chi-lambda-clause* G2f9d@chi-defun G2f9f@chi-rhs G2fa1@expand-interaction-rhs*/init* G2fa3@chi-rhs* G2fa5@find-bound=? G2fa7@find-dups G2fa9@chi-internal G2fab@parse-module G2fb1@G2fac G2fb3@G2fae G2fb5@G2fad G2fb8@module-interface? G2fba@make-module-interface G2fbc@module-interface-first-mark G2fbe@module-interface-exp-id-vec G2fc0@module-interface-exp-lab-vec G2fc2@set-module-interface-first-mark! G2fc4@set-module-interface-exp-id-vec! G2fc6@set-module-interface-exp-lab-vec! G2fc8@module-interface-exp-id* G2fca@chi-internal-module G2fcc@chi-body* G2fce@expand-transformer G2fd0@parse-exports G2fd2@parse-library-name G2fd4@parse-library G2fd6@parse-import-spec* G2fd8@make-top-rib G2fda@make-collector G2fdc@inv-collector G2fde@vis-collector G2fe0@imp-collector G2fe2@chi-library-internal G2fe4@chi-interaction-expr G2fe6@library-body-expander G2fe8@core-library-expander G2fea@parse-top-level-program G2fec@top-level-expander G2ff2@G2fed G2ff4@G2fef G2ff6@G2fee G2ff9@env? G2ffb@make-env G2ffd@env-names G2fff@env-labels G3001@env-itc G3003@set-env-names! G3005@set-env-labels! G3007@set-env-itc! G3009@rp G300f@G300a G3011@G300c G3013@G300b G3016@interaction-env? G3018@make-interaction-env G301a@interaction-env-rib G301c@interaction-env-r G301e@interaction-env-locs G3020@set-interaction-env-rib! G3022@set-interaction-env-r! G3024@set-interaction-env-locs! G3026@rp G3028@interaction-environment-symbols G302a@environment-bindings G302c@parse-binding G302e@environment? G3030@environment-symbols G3032@environment G3034@null-environment G3036@scheme-report-environment G3038@expand G303a@eval G303c@library-expander G303e@boot-library-expand G3040@rev-map-append G3042@build-exports G3044@make-export-subst G3046@make-export-env/macros G3048@generate-temporaries G304a@free-identifier=? G304c@bound-identifier=? G304e@make-source-condition G3050@extract-position-condition G3052@expression-position G3054@assertion-error G3056@syntax-error G3058@extract-trace G305a@syntax-violation* G305c@syntax-violation G305e@identifier? G3060@datum->syntax G3062@syntax->datum G3064@compile-r6rs-top-level G3066@pre-compile-r6rs-top-level G3068@interaction-environment G306a@top-level-context) (begin (set! G2ce1@set-cons (lambda (G306b@x G306c@ls) (if (memq G306b@x G306c@ls) G306c@ls (cons G306b@x G306c@ls)))) (set! G2ce3@set-union (lambda (G306f@ls1 G3070@ls2) (if (null? G306f@ls1) G3070@ls2 (if (memq (car G306f@ls1) G3070@ls2) (G2ce3@set-union (cdr G306f@ls1) G3070@ls2) (cons (car G306f@ls1) (G2ce3@set-union (cdr G306f@ls1) G3070@ls2)))))) (set! G2ce8@top-mark* '(top)) (set! G2cea@top-marked? (lambda (G3073@m*) (memq 'top G3073@m*))) (set! G2cec@gen-lexical (lambda (G3075@sym) (if (symbol? G3075@sym) (gensym G3075@sym) (if (G2d38@stx? G3075@sym) (G2cec@gen-lexical (G2d72@id->sym G3075@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3075@sym))))) (set! G2cee@gen-global (lambda (G3077@x) (G2cec@gen-lexical G3077@x))) (set! G2cf0@gen-label (lambda (G3079@_) (gensym))) (set! G2cf2@gen-top-level-label (lambda (G307b@id G307c@rib) ((lambda (G3080@find) (begin (set! G3080@find (lambda (G308b@sym G308c@mark* G308d@sym* G308e@mark** G308f@label*) (and (pair? G308d@sym*) (if (and (eq? G308b@sym (car G308d@sym*)) (G2d74@same-marks? G308c@mark* (car G308e@mark**))) (car G308f@label*) (G3080@find G308b@sym G308c@mark* (cdr G308d@sym*) (cdr G308e@mark**) (cdr G308f@label*)))))) ((lambda (G3081@sym G3082@mark*) ((lambda (G3085@sym*) ((lambda (G3087@t) (if G3087@t ((lambda (G3089@label) (if (G2b86@G2a2c@imported-label->binding G3089@label) (gensym) G3089@label)) G3087@t) (gensym))) (and (memq G3081@sym (G2d07@rib-sym* G307c@rib)) (G3080@find G3081@sym G3082@mark* G3085@sym* (G2d09@rib-mark** G307c@rib) (G2d0b@rib-label* G307c@rib))))) (G2d07@rib-sym* G307c@rib))) (G2d72@id->sym G307b@id) (G2d3e@stx-mark* G307b@id)))) '#f))) (set! G2cf4@gen-define-label+loc (lambda (G3095@id G3096@rib) ((lambda (G3099@t) (if G3099@t ((lambda (G309b@env) ((lambda (G309d@label G309e@locs) (values G309d@label ((lambda (G30a1@t) (if G30a1@t (cdr G30a1@t) ((lambda (G30a3@loc) (begin (G3024@set-interaction-env-locs! G309b@env (cons (cons G309d@label G30a3@loc) G309e@locs)) G30a3@loc)) (G2cec@gen-lexical G3095@id)))) (assq G309d@label G309e@locs)))) (G2cf2@gen-top-level-label G3095@id G3096@rib) (G301e@interaction-env-locs G309b@env))) G3099@t) (values (gensym) (G2cec@gen-lexical G3095@id)))) (G306a@top-level-context)))) (set! G2cf6@gen-define-label (lambda (G30a5@id G30a6@rib) (if (G306a@top-level-context) (G2cf2@gen-top-level-label G30a5@id G30a6@rib) (gensym)))) (set! G2cfc@G2cf7 (make-record-type-descriptor 'rib '#f 'G2cfa '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cfe@G2cf9 '#f) (set! G2d00@G2cf8 (make-record-constructor-descriptor G2cfc@G2cf7 '#f G2cfe@G2cf9)) (set! G2d03@rib? (record-predicate G2cfc@G2cf7)) (set! G2d05@make-rib (record-constructor G2d00@G2cf8)) (set! G2d07@rib-sym* (record-accessor G2cfc@G2cf7 '0)) (set! G2d09@rib-mark** (record-accessor G2cfc@G2cf7 '1)) (set! G2d0b@rib-label* (record-accessor G2cfc@G2cf7 '2)) (set! G2d0d@rib-sealed/freq (record-accessor G2cfc@G2cf7 '3)) (set! G2d0f@rib-cache (record-accessor G2cfc@G2cf7 '4)) (set! G2d11@set-rib-sym*! (record-mutator G2cfc@G2cf7 '0)) (set! G2d13@set-rib-mark**! (record-mutator G2cfc@G2cf7 '1)) (set! G2d15@set-rib-label*! (record-mutator G2cfc@G2cf7 '2)) (set! G2d17@set-rib-sealed/freq! (record-mutator G2cfc@G2cf7 '3)) (set! G2d19@set-rib-cache! (record-mutator G2cfc@G2cf7 '4)) (set! G2d1b@make-empty-rib (lambda () (G2d05@make-rib '() '() '() '#f '#f))) (set! G2d1d@make-cache-rib (lambda () (G2d05@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d1f@find-label (lambda (G30a9@rib G30aa@sym G30ab@mark*) ((lambda (G30af@ht) (and G30af@ht ((lambda (G30b1@cv) ((lambda (G30b3@t) (if G30b3@t (cdr G30b3@t) '#f)) (and G30b1@cv (assp (lambda (G30b5@m) (G2d74@same-marks? G30ab@mark* G30b5@m)) G30b1@cv)))) (hashtable-ref G30af@ht G30aa@sym '#f)))) (G2d0f@rib-cache G30a9@rib)))) (set! G2d21@extend-rib! (lambda (G30b7@rib G30b8@id G30b9@label) ((lambda (G30be@find) (begin (set! G30be@find (lambda (G30cf@sym G30d0@mark* G30d1@sym* G30d2@mark** G30d3@label*) (and (pair? G30d1@sym*) (if (and (eq? G30cf@sym (car G30d1@sym*)) (G2d74@same-marks? G30d0@mark* (car G30d2@mark**))) G30d3@label* (G30be@find G30cf@sym G30d0@mark* (cdr G30d1@sym*) (cdr G30d2@mark**) (cdr G30d3@label*)))))) (begin (if (G2d0d@rib-sealed/freq G30b7@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30b7@rib) (void)) ((lambda (G30bf@sym G30c0@mark*) ((lambda (G30c3@sym*) ((lambda (G30c5@t) (if G30c5@t ((lambda (G30c7@p) (if (not (eq? G30b9@label G30c7@p)) (G305c@syntax-violation '#f '"multiple definitions of identifier" G30b8@id) (void))) G30c5@t) ((lambda (G30c9@t) (if G30c9@t ((lambda (G30cb@p) (if (not (eq? G30b9@label (car G30cb@p))) (if (G306a@top-level-context) (set-car! G30cb@p G30b9@label) (G305c@syntax-violation '#f '"multiple definitions of identifier" G30b8@id)) (void))) G30c9@t) (begin (if (G2d0f@rib-cache G30b7@rib) (hashtable-update! (G2d0f@rib-cache G30b7@rib) G30bf@sym (lambda (G30cd@e) (cons (cons G30c0@mark* G30b9@label) G30cd@e)) '()) (void)) (G2d11@set-rib-sym*! G30b7@rib (cons G30bf@sym G30c3@sym*)) (G2d13@set-rib-mark**! G30b7@rib (cons G30c0@mark* (G2d09@rib-mark** G30b7@rib))) (G2d15@set-rib-label*! G30b7@rib (cons G30b9@label (G2d0b@rib-label* G30b7@rib)))))) (and (memq G30bf@sym (G2d07@rib-sym* G30b7@rib)) (G30be@find G30bf@sym G30c0@mark* G30c3@sym* (G2d09@rib-mark** G30b7@rib) (G2d0b@rib-label* G30b7@rib)))))) (G2d1f@find-label G30b7@rib G30bf@sym G30c0@mark*))) (G2d07@rib-sym* G30b7@rib))) (G2d72@id->sym G30b8@id) (G2d3e@stx-mark* G30b8@id))))) '#f))) (set! G2d23@extend-rib/nc! (lambda (G30d9@rib G30da@id G30db@label) ((lambda (G30df@sym G30e0@mark*) ((lambda (G30e3@sym*) (begin (if (G2d0f@rib-cache G30d9@rib) (hashtable-update! (G2d0f@rib-cache G30d9@rib) G30df@sym (lambda (G30e5@e) (cons (cons G30e0@mark* G30db@label) G30e5@e)) '()) (void)) (G2d11@set-rib-sym*! G30d9@rib (cons G30df@sym G30e3@sym*)) (G2d13@set-rib-mark**! G30d9@rib (cons G30e0@mark* (G2d09@rib-mark** G30d9@rib))) (G2d15@set-rib-label*! G30d9@rib (cons G30db@label (G2d0b@rib-label* G30d9@rib))))) (G2d07@rib-sym* G30d9@rib))) (G2d72@id->sym G30da@id) (G2d3e@stx-mark* G30da@id)))) (set! G2d25@make-rib-map (lambda (G30e7@sym*) ((lambda (G30e9@ht) ((letrec ((G30eb@f (lambda (G30ed@i G30ee@sym*) (if (null? G30ee@sym*) G30e9@ht (begin (hashtable-update! G30e9@ht (car G30ee@sym*) (lambda (G30f1@x) (cons G30ed@i G30f1@x)) '()) (G30eb@f (+ G30ed@i '1) (cdr G30ee@sym*))))))) G30eb@f) '0 G30e7@sym*)) (make-eq-hashtable)))) (set! G2d27@seal-rib! (lambda (G30f3@rib) ((lambda (G30f5@sym*) (if (not (null? G30f5@sym*)) (begin (G2d11@set-rib-sym*! G30f3@rib (list->vector G30f5@sym*)) (G2d13@set-rib-mark**! G30f3@rib (list->vector (G2d09@rib-mark** G30f3@rib))) (G2d15@set-rib-label*! G30f3@rib (list->vector (G2d0b@rib-label* G30f3@rib))) (G2d17@set-rib-sealed/freq! G30f3@rib (G2d25@make-rib-map G30f5@sym*))) (void))) (G2d07@rib-sym* G30f3@rib)))) (set! G2d29@unseal-rib! (lambda (G30f7@rib) (if (G2d0d@rib-sealed/freq G30f7@rib) (begin (G2d17@set-rib-sealed/freq! G30f7@rib '#f) (G2d11@set-rib-sym*! G30f7@rib (vector->list (G2d07@rib-sym* G30f7@rib))) (G2d13@set-rib-mark**! G30f7@rib (vector->list (G2d09@rib-mark** G30f7@rib))) (G2d15@set-rib-label*! G30f7@rib (vector->list (G2d0b@rib-label* G30f7@rib)))) (void)))) (set! G2d2b@make-full-rib (lambda (G30f9@id* G30fa@label*) ((lambda (G30fd@r) (begin (G2d27@seal-rib! G30fd@r) G30fd@r)) (G2d05@make-rib (map G2d72@id->sym G30f9@id*) (map G2d3e@stx-mark* G30f9@id*) G30fa@label* '#f '#f)))) (set! G2d31@G2d2c (make-record-type-descriptor 'stx '#f 'G2d2f '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d33@G2d2e '#f) (set! G2d35@G2d2d (make-record-constructor-descriptor G2d31@G2d2c '#f G2d33@G2d2e)) (set! G2d38@stx? (record-predicate G2d31@G2d2c)) (set! G2d3a@make-stx (record-constructor G2d35@G2d2d)) (set! G2d3c@stx-expr (record-accessor G2d31@G2d2c '0)) (set! G2d3e@stx-mark* (record-accessor G2d31@G2d2c '1)) (set! G2d40@stx-subst* (record-accessor G2d31@G2d2c '2)) (set! G2d42@stx-ae* (record-accessor G2d31@G2d2c '3)) (set! G2d44@set-stx-expr! (record-mutator G2d31@G2d2c '0)) (set! G2d46@set-stx-mark*! (record-mutator G2d31@G2d2c '1)) (set! G2d48@set-stx-subst*! (record-mutator G2d31@G2d2c '2)) (set! G2d4a@set-stx-ae*! (record-mutator G2d31@G2d2c '3)) (set! G2d4c@rp (G2909@G283c@make-record-printer 'stx (lambda (G30ff@x G3100@p G3101@wr) (begin (display '"#<syntax " G3100@p) (write (G2d86@stx->datum G30ff@x) G3100@p) ((lambda (G3105@expr) (if (G2901@G282c@annotation? G3105@expr) ((lambda (G3107@src) (if (pair? G3107@src) (begin (display '" [" G3100@p) (display (cdr G3107@src) G3100@p) (display '" of " G3100@p) (display (car G3107@src) G3100@p) (display '"]" G3100@p)) (void))) (G2902@G282e@annotation-source G3105@expr)) (void))) (G2d3c@stx-expr G30ff@x)) (display '">" G3100@p))))) (set! G2d4e@datum->stx (lambda (G3109@id G310a@datum) (G2d3a@make-stx G310a@datum (G2d3e@stx-mark* G3109@id) (G2d40@stx-subst* G3109@id) (G2d42@stx-ae* G3109@id)))) (set! G2d50@gen-mark (lambda () (string '#\m))) (set! G2d52@anti-mark '#f) (set! G2d54@anti-mark? not) (set! G2d56@join-wraps (lambda (G310d@m1* G310e@s1* G310f@ae1* G3110@e) ((lambda (G3116@cancel) (begin (set! G3116@cancel (lambda (G311d@ls1 G311e@ls2) ((letrec ((G3121@f (lambda (G3123@x G3124@ls1) (if (null? G3124@ls1) (cdr G311e@ls2) (cons G3123@x (G3121@f (car G3124@ls1) (cdr G3124@ls1))))))) G3121@f) (car G311d@ls1) (cdr G311d@ls1)))) ((lambda (G3117@m2* G3118@s2* G3119@ae2*) (if (and (not (null? G310d@m1*)) (not (null? G3117@m2*)) (G2d54@anti-mark? (car G3117@m2*))) (values (G3116@cancel G310d@m1* G3117@m2*) (G3116@cancel G310e@s1* G3118@s2*) (G3116@cancel G310f@ae1* G3119@ae2*)) (values (append G310d@m1* G3117@m2*) (append G310e@s1* G3118@s2*) (append G310f@ae1* G3119@ae2*)))) (G2d3e@stx-mark* G3110@e) (G2d40@stx-subst* G3110@e) (G2d42@stx-ae* G3110@e)))) '#f))) (set! G2d58@mkstx (lambda (G3127@e G3128@m* G3129@s* G312a@ae*) (if (and (G2d38@stx? G3127@e) (not (G2cea@top-marked? G3128@m*))) (call-with-values (lambda () (G2d56@join-wraps G3128@m* G3129@s* G312a@ae* G3127@e)) (lambda (G3132@G312f G3133@G3130 G3134@G3131) ((lambda (G3138@ae* G3139@s* G313a@m*) (G2d3a@make-stx (G2d3c@stx-expr G3127@e) G313a@m* G3139@s* G3138@ae*)) G3134@G3131 G3133@G3130 G3132@G312f))) (G2d3a@make-stx G3127@e G3128@m* G3129@s* G312a@ae*)))) (set! G2d5a@add-mark (lambda (G313e@m G313f@e G3140@ae) (G2d58@mkstx G313f@e (list G313e@m) '(shift) (list G3140@ae)))) (set! G2d5c@add-subst (lambda (G3144@subst G3145@e) (G2d58@mkstx G3145@e '() (list G3144@subst) '()))) (set! G2d5e@syntax-kind? (lambda (G3148@x G3149@p?) (if (G2d38@stx? G3148@x) (G2d5e@syntax-kind? (G2d3c@stx-expr G3148@x) G3149@p?) (if (G2901@G282c@annotation? G3148@x) (G2d5e@syntax-kind? (G2903@G2830@annotation-expression G3148@x) G3149@p?) (G3149@p? G3148@x))))) (set! G2d60@syntax-vector->list (lambda (G314c@x) (if (G2d38@stx? G314c@x) ((lambda (G314e@ls G314f@m* G3150@s* G3151@ae*) (map (lambda (G3156@x) (G2d58@mkstx G3156@x G314f@m* G3150@s* G3151@ae*)) G314e@ls)) (G2d60@syntax-vector->list (G2d3c@stx-expr G314c@x)) (G2d3e@stx-mark* G314c@x) (G2d40@stx-subst* G314c@x) (G2d42@stx-ae* G314c@x)) (if (G2901@G282c@annotation? G314c@x) (G2d60@syntax-vector->list (G2903@G2830@annotation-expression G314c@x)) (if (vector? G314c@x) (vector->list G314c@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G314c@x)))))) (set! G2d62@syntax-pair? (lambda (G3158@x) (G2d5e@syntax-kind? G3158@x pair?))) (set! G2d64@syntax-vector? (lambda (G315a@x) (G2d5e@syntax-kind? G315a@x vector?))) (set! G2d66@syntax-null? (lambda (G315c@x) (G2d5e@syntax-kind? G315c@x null?))) (set! G2d68@syntax-list? (lambda (G315e@x) (or (G2d66@syntax-null? G315e@x) (and (G2d62@syntax-pair? G315e@x) (G2d68@syntax-list? (G2d6c@syntax-cdr G315e@x)))))) (set! G2d6a@syntax-car (lambda (G3160@x) (if (G2d38@stx? G3160@x) (G2d58@mkstx (G2d6a@syntax-car (G2d3c@stx-expr G3160@x)) (G2d3e@stx-mark* G3160@x) (G2d40@stx-subst* G3160@x) (G2d42@stx-ae* G3160@x)) (if (G2901@G282c@annotation? G3160@x) (G2d6a@syntax-car (G2903@G2830@annotation-expression G3160@x)) (if (pair? G3160@x) (car G3160@x) (assertion-violation 'syntax-car '"BUG: not a pair" G3160@x)))))) (set! G2d6c@syntax-cdr (lambda (G3162@x) (if (G2d38@stx? G3162@x) (G2d58@mkstx (G2d6c@syntax-cdr (G2d3c@stx-expr G3162@x)) (G2d3e@stx-mark* G3162@x) (G2d40@stx-subst* G3162@x) (G2d42@stx-ae* G3162@x)) (if (G2901@G282c@annotation? G3162@x) (G2d6c@syntax-cdr (G2903@G2830@annotation-expression G3162@x)) (if (pair? G3162@x) (cdr G3162@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3162@x)))))) (set! G2d6e@syntax->list (lambda (G3164@x) (if (G2d62@syntax-pair? G3164@x) (cons (G2d6a@syntax-car G3164@x) (G2d6e@syntax->list (G2d6c@syntax-cdr G3164@x))) (if (G2d66@syntax-null? G3164@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3164@x))))) (set! G2d70@id? (lambda (G3166@x) (and (G2d38@stx? G3166@x) ((lambda (G3168@expr) (symbol? (if (G2901@G282c@annotation? G3168@expr) (G2900@G282a@annotation-stripped G3168@expr) G3168@expr))) (G2d3c@stx-expr G3166@x))))) (set! G2d72@id->sym (lambda (G316a@x) (begin (if (not (G2d38@stx? G316a@x)) (error 'id->sym '"BUG in ikarus: not an id" G316a@x) (void)) ((lambda (G316c@expr) ((lambda (G316e@sym) (if (symbol? G316e@sym) G316e@sym (error 'id->sym '"BUG in ikarus: not an id" G316a@x))) (if (G2901@G282c@annotation? G316c@expr) (G2900@G282a@annotation-stripped G316c@expr) G316c@expr))) (G2d3c@stx-expr G316a@x))))) (set! G2d74@same-marks? (lambda (G3170@x G3171@y) (or (and (null? G3170@x) (null? G3171@y)) (and (pair? G3170@x) (pair? G3171@y) (eq? (car G3170@x) (car G3171@y)) (G2d74@same-marks? (cdr G3170@x) (cdr G3171@y)))))) (set! G2d76@bound-id=? (lambda (G3174@x G3175@y) (and (eq? (G2d72@id->sym G3174@x) (G2d72@id->sym G3175@y)) (G2d74@same-marks? (G2d3e@stx-mark* G3174@x) (G2d3e@stx-mark* G3175@y))))) (set! G2d78@free-id=? (lambda (G3178@i G3179@j) ((lambda (G317c@t0 G317d@t1) (if (or G317c@t0 G317d@t1) (eq? G317c@t0 G317d@t1) (eq? (G2d72@id->sym G3178@i) (G2d72@id->sym G3179@j)))) (G2d8c@id->real-label G3178@i) (G2d8c@id->real-label G3179@j)))) (set! G2d7a@valid-bound-ids? (lambda (G3180@id*) (and (for-all G2d70@id? G3180@id*) (G2d7c@distinct-bound-ids? G3180@id*)))) (set! G2d7c@distinct-bound-ids? (lambda (G3182@id*) (or (null? G3182@id*) (and (not (G2d7e@bound-id-member? (car G3182@id*) (cdr G3182@id*))) (G2d7c@distinct-bound-ids? (cdr G3182@id*)))))) (set! G2d7e@bound-id-member? (lambda (G3184@id G3185@id*) (and (pair? G3185@id*) (or (G2d76@bound-id=? G3184@id (car G3185@id*)) (G2d7e@bound-id-member? G3184@id (cdr G3185@id*)))))) (set! G2d80@self-evaluating? (lambda (G3188@x) (or (number? G3188@x) (string? G3188@x) (char? G3188@x) (boolean? G3188@x) (regexp? G3188@x) (bytevector? G3188@x)))) (set! G2d82@strip-annotations (lambda (G318a@x) (if (pair? G318a@x) (cons (G2d82@strip-annotations (car G318a@x)) (G2d82@strip-annotations (cdr G318a@x))) (if (vector? G318a@x) (vector-map G2d82@strip-annotations G318a@x) (if (G2901@G282c@annotation? G318a@x) (G2900@G282a@annotation-stripped G318a@x) G318a@x))))) (set! G2d84@strip (lambda (G318c@x G318d@m*) (if (G2cea@top-marked? G318d@m*) (if (or (G2901@G282c@annotation? G318c@x) (and (pair? G318c@x) (G2901@G282c@annotation? (car G318c@x))) (and (vector? G318c@x) (> (vector-length G318c@x) '0) (G2901@G282c@annotation? (vector-ref G318c@x '0)))) (G2d82@strip-annotations G318c@x) G318c@x) ((letrec ((G3190@f (lambda (G3192@x) (if (G2d38@stx? G3192@x) (G2d84@strip (G2d3c@stx-expr G3192@x) (G2d3e@stx-mark* G3192@x)) (if (G2901@G282c@annotation? G3192@x) (G2900@G282a@annotation-stripped G3192@x) (if (pair? G3192@x) ((lambda (G3194@a G3195@d) (if (and (eq? G3194@a (car G3192@x)) (eq? G3195@d (cdr G3192@x))) G3192@x (cons G3194@a G3195@d))) (G3190@f (car G3192@x)) (G3190@f (cdr G3192@x))) (if (vector? G3192@x) ((lambda (G3198@old) ((lambda (G319a@new) (if (for-all eq? G3198@old G319a@new) G3192@x (list->vector G319a@new))) (map G3190@f G3198@old))) (vector->list G3192@x)) G3192@x))))))) G3190@f) G318c@x)))) (set! G2d86@stx->datum (lambda (G319c@x) (G2d84@strip G319c@x '()))) (set! G2d88@same-marks*? (lambda (G319e@mark* G319f@mark** G31a0@si) (if (null? G31a0@si) '#f (if (G2d74@same-marks? G319e@mark* (vector-ref G319f@mark** (car G31a0@si))) (car G31a0@si) (G2d88@same-marks*? G319e@mark* G319f@mark** (cdr G31a0@si)))))) (set! G2d8a@id->label (lambda (G31a4@id) (or (G2d8c@id->real-label G31a4@id) ((lambda (G31a6@t) (if G31a6@t ((lambda (G31a8@env) ((lambda (G31aa@rib) (call-with-values (lambda () (G2cf4@gen-define-label+loc G31a4@id G31aa@rib)) (lambda (G31ae@G31ac G31af@G31ad) ((lambda (G31b2@loc_ G31b3@lab) (begin (G2d21@extend-rib! G31aa@rib G31a4@id G31b3@lab) G31b3@lab)) G31af@G31ad G31ae@G31ac)))) (G301a@interaction-env-rib G31a8@env))) G31a6@t) '#f)) (G306a@top-level-context))))) (set! G2d8c@id->real-label (lambda (G31b6@id) ((lambda (G31b8@sym) ((letrec ((G31ba@search (lambda (G31bc@subst* G31bd@mark*) (if (null? G31bc@subst*) '#f (if (eq? (car G31bc@subst*) 'shift) (G31ba@search (cdr G31bc@subst*) (cdr G31bd@mark*)) ((lambda (G31c0@rib) ((lambda (G31c2@t) (if G31c2@t ((lambda (G31c4@ht) ((lambda (G31c6@si) ((lambda (G31c8@i) (if G31c8@i (vector-ref (G2d0b@rib-label* G31c0@rib) G31c8@i) (G31ba@search (cdr G31bc@subst*) G31bd@mark*))) (and G31c6@si (G2d88@same-marks*? G31bd@mark* (G2d09@rib-mark** G31c0@rib) (reverse G31c6@si))))) (hashtable-ref G31c4@ht G31b8@sym '#f))) G31c2@t) (or (G2d1f@find-label G31c0@rib G31b8@sym G31bd@mark*) ((letrec ((G31ca@f (lambda (G31cc@sym* G31cd@mark** G31ce@label*) (if (null? G31cc@sym*) (G31ba@search (cdr G31bc@subst*) G31bd@mark*) (if (and (eq? (car G31cc@sym*) G31b8@sym) (G2d74@same-marks? (car G31cd@mark**) G31bd@mark*)) (car G31ce@label*) (G31ca@f (cdr G31cc@sym*) (cdr G31cd@mark**) (cdr G31ce@label*))))))) G31ca@f) (G2d07@rib-sym* G31c0@rib) (G2d09@rib-mark** G31c0@rib) (G2d0b@rib-label* G31c0@rib))))) (G2d0d@rib-sealed/freq G31c0@rib))) (car G31bc@subst*))))))) G31ba@search) (G2d40@stx-subst* G31b6@id) (G2d3e@stx-mark* G31b6@id))) (G2d72@id->sym G31b6@id)))) (set! G2d8e@label->binding (lambda (G31d2@x G31d3@r) ((lambda (G31d6@t) (if G31d6@t ((lambda (G31d8@b) (if (and (pair? G31d8@b) (eq? (car G31d8@b) '$core-rtd)) (cons '$rtd (map G2f25@bless (cdr G31d8@b))) (if (and (pair? G31d8@b) (eq? (car G31d8@b) 'global-rtd)) ((lambda (G31da@lib G31db@loc) (cons '$rtd (symbol-value G31db@loc))) (cadr G31d8@b) (cddr G31d8@b)) G31d8@b))) G31d6@t) ((lambda (G31de@t) (if G31de@t (cdr G31de@t) ((lambda (G31e0@t) (if G31e0@t ((lambda (G31e2@env) ((lambda (G31e4@t) (if G31e4@t ((lambda (G31e6@p) (cons* 'lexical (cdr G31e6@p) '#f)) G31e4@t) '(displaced-lexical . #f))) (assq G31d2@x (G301e@interaction-env-locs G31e2@env)))) G31e0@t) '(displaced-lexical . #f))) (G306a@top-level-context)))) (assq G31d2@x G31d3@r)))) (G2b86@G2a2c@imported-label->binding G31d2@x)))) (set! G2d90@make-binding cons) (set! G2d92@binding-type car) (set! G2d94@binding-value cdr) (set! G2d96@raise-unbound-error (lambda (G31e8@id) (G305a@syntax-violation* '#f '"unbound identifier" G31e8@id (G4cb2@G4afc@make-undefined-violation)))) (set! G2d98@syntax-type (lambda (G31ea@e G31eb@r) (if (G2d70@id? G31ea@e) ((lambda (G31ee@id) ((lambda (G31f0@label) ((lambda (G31f2@b) ((lambda (G31f4@type) ((lambda () (begin (if (not G31f0@label) (G2d96@raise-unbound-error G31ee@id) (void)) ((lambda (G31f6@t) (if (memv G31f6@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31f4@type (G2d94@binding-value G31f2@b) G31ee@id) (values 'other '#f '#f))) G31f4@type))))) (G2d92@binding-type G31f2@b))) (G2d8e@label->binding G31f0@label G31eb@r))) (G2d8a@id->label G31ee@id))) G31ea@e) (if (G2d62@syntax-pair? G31ea@e) ((lambda (G31f8@id) (if (G2d70@id? G31f8@id) ((lambda (G31fa@label) ((lambda (G31fc@b) ((lambda (G31fe@type) ((lambda () (begin (if (not G31fa@label) (G2d96@raise-unbound-error G31f8@id) (void)) ((lambda (G3200@t) (if (memv G3200@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31fe@type (G2d94@binding-value G31fc@b) G31f8@id) (values 'call '#f '#f))) G31fe@type))))) (G2d92@binding-type G31fc@b))) (G2d8e@label->binding G31fa@label G31eb@r))) (G2d8a@id->label G31f8@id)) (values 'call '#f '#f))) (G2d6a@syntax-car G31ea@e)) ((lambda (G3202@d) (if (G2d80@self-evaluating? G3202@d) (values 'constant G3202@d '#f) (values 'other '#f '#f))) (G2d86@stx->datum G31ea@e)))))) (set! G2da8@sanitize-binding (lambda (G3204@x G3205@src) (if (procedure? G3204@x) (cons* 'local-macro G3204@x G3205@src) (if (and (pair? G3204@x) (eq? (car G3204@x) 'macro!) (procedure? (cdr G3204@x))) (cons* 'local-macro! (cdr G3204@x) G3205@src) (if (and (pair? G3204@x) (eq? (car G3204@x) '$rtd)) G3204@x (assertion-violation 'expand '"invalid transformer" G3204@x)))))) (set! G2daa@make-variable-transformer (lambda (G3208@x) (if (procedure? G3208@x) (cons 'macro! G3208@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3208@x)))) (set! G2dac@variable-transformer? (lambda (G320a@x) (and (pair? G320a@x) (eq? (car G320a@x) 'macro!) (procedure? (cdr G320a@x))))) (set! G2dae@variable-transformer-procedure (lambda (G320c@x) (if (G2dac@variable-transformer? G320c@x) (cdr G320c@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G320c@x)))) (set! G2db0@make-eval-transformer (lambda (G320e@x) (G2da8@sanitize-binding (eval-core (G2960@G2918@expanded->core G320e@x)) G320e@x))) (set! G2ef3@parse-define (lambda (G3210@x) ((lambda (G3212@t) ((lambda (G3214@ls/false) (if (and G3214@ls/false (apply (lambda (G3216@id G3217@fmls G3218@b G3219@b*) (G2d70@id? G3216@id)) G3214@ls/false)) (apply (lambda (G321e@id G321f@fmls G3220@b G3221@b*) (begin (G2f97@verify-formals G321f@fmls G3210@x) (values G321e@id (cons 'defun (cons G321f@fmls (cons G3220@b G3221@b*)))))) G3214@ls/false) ((lambda (G3226@t) ((lambda (G3228@ls/false) (if (and G3228@ls/false (apply (lambda (G322a@id G322b@val) (G2d70@id? G322a@id)) G3228@ls/false)) (apply (lambda (G322e@id G322f@val) (values G322e@id (cons 'expr G322f@val))) G3228@ls/false) ((lambda (G3232@t) ((lambda (G3234@ls/false) (if (and G3234@ls/false (apply (lambda (G3236@id) (G2d70@id? G3236@id)) G3234@ls/false)) (apply (lambda (G3238@id) (values G3238@id (cons 'expr (G2f25@bless '(void))))) G3234@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3232@t))) (G2f6f@syntax-dispatch G3232@t '(_ any)))) G3226@t))) (G2f6f@syntax-dispatch G3226@t '(_ any any)))) G3212@t))) (G2f6f@syntax-dispatch G3212@t '(_ (any . any) any . each-any)))) G3210@x))) (set! G2ef5@parse-define-syntax (lambda (G323a@x) ((lambda (G323c@t) ((lambda (G323e@ls/false) (if (and G323e@ls/false (apply (lambda (G3240@id G3241@val) (G2d70@id? G3240@id)) G323e@ls/false)) (apply (lambda (G3244@id G3245@val) (values G3244@id G3245@val)) G323e@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G323c@t))) (G2f6f@syntax-dispatch G323c@t '(_ any any)))) G323a@x))) (set! G2ef7@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ef9@scheme-stx (lambda (G3248@sym) (or (hashtable-ref G2ef7@scheme-stx-hashtable G3248@sym '#f) ((lambda (G324a@subst) ((lambda (G324c@stx) ((lambda (G324e@stx) ((lambda () (begin (hashtable-set! G2ef7@scheme-stx-hashtable G3248@sym G324e@stx) G324e@stx)))) ((lambda (G3250@t) (if G3250@t ((lambda (G3252@x) ((lambda (G3254@name G3255@label) (G2d5c@add-subst (G2d05@make-rib (list G3254@name) (list G2ce8@top-mark*) (list G3255@label) '#f '#f) G324c@stx)) (car G3252@x) (cdr G3252@x))) G3250@t) G324c@stx)) (assq G3248@sym G324a@subst)))) (G2d3a@make-stx G3248@sym G2ce8@top-mark* '() '()))) (G2b5c@G29d8@library-subst (G2b80@G2a20@find-library-by-name '(psyntax system $all))))))) (set! G2efb@lexical-var car) (set! G2efd@lexical-mutable? cdr) (set! G2eff@set-lexical-mutable! set-cdr!) (set! G2f01@add-lexical (lambda (G3258@lab G3259@lex G325a@r) (cons (cons* G3258@lab 'lexical G3259@lex '#f) G325a@r))) (set! G2f03@add-lexicals (lambda (G325e@lab* G325f@lex* G3260@r) (if (null? G325e@lab*) G3260@r (G2f03@add-lexicals (cdr G325e@lab*) (cdr G325f@lex*) (G2f01@add-lexical (car G325e@lab*) (car G325f@lex*) G3260@r))))) (set! G2f05@letrec-helper (lambda (G3264@e G3265@r G3266@mr G3267@build) ((lambda (G326c@t) ((lambda (G326e@ls/false) (if G326e@ls/false (apply (lambda (G3270@lhs* G3271@rhs* G3272@b G3273@b*) (if (not (G2d7a@valid-bound-ids? G3270@lhs*)) (G2f29@invalid-fmls-error G3264@e G3270@lhs*) ((lambda (G3278@lex* G3279@lab*) ((lambda (G327c@rib G327d@r) ((lambda (G3280@body G3281@rhs*) (G3267@build '#f G3278@lex* G3281@rhs* G3280@body)) (G2fa9@chi-internal (G2d5c@add-subst G327c@rib (cons G3272@b G3273@b*)) G327d@r G3266@mr) (G2f8f@chi-expr* (map (lambda (G3284@x) (G2d5c@add-subst G327c@rib G3284@x)) G3271@rhs*) G327d@r G3266@mr))) (G2d2b@make-full-rib G3270@lhs* G3279@lab*) (G2f03@add-lexicals G3279@lab* G3278@lex* G3265@r))) (map G2cec@gen-lexical G3270@lhs*) (map G2cf0@gen-label G3270@lhs*)))) G326e@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G326c@t))) (G2f6f@syntax-dispatch G326c@t '(_ #(each (any any)) any . each-any)))) G3264@e))) (set! G2f07@letrec-transformer (lambda (G3286@e G3287@r G3288@mr) (G2f05@letrec-helper G3286@e G3287@r G3288@mr G2ccf@G2c42@build-letrec))) (set! G2f09@letrec*-transformer (lambda (G328c@e G328d@r G328e@mr) (G2f05@letrec-helper G328c@e G328d@r G328e@mr G2cd0@G2c44@build-letrec*))) (set! G2f0b@fluid-let-syntax-transformer (lambda (G3292@e G3293@r G3294@mr) ((lambda (G3299@lookup) (begin (set! G3299@lookup (lambda (G32ac@x) (or (G2d8a@id->label G32ac@x) (G305c@syntax-violation '#f '"unbound identifier" G3292@e G32ac@x)))) ((lambda (G329a@t) ((lambda (G329c@ls/false) (if G329c@ls/false (apply (lambda (G329e@lhs* G329f@rhs* G32a0@b G32a1@b*) (if (not (G2d7a@valid-bound-ids? G329e@lhs*)) (G2f29@invalid-fmls-error G3292@e G329e@lhs*) ((lambda (G32a6@lab* G32a7@rhs*) (G2fa9@chi-internal (cons G32a0@b G32a1@b*) (append (map cons G32a6@lab* G32a7@rhs*) G3293@r) (append (map cons G32a6@lab* G32a7@rhs*) G3294@mr))) (map G3299@lookup G329e@lhs*) (map (lambda (G32aa@x) (G2db0@make-eval-transformer (G2fce@expand-transformer G32aa@x G3294@mr))) G329f@rhs*)))) G329c@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G329a@t))) (G2f6f@syntax-dispatch G329a@t '(_ #(each (any any)) any . each-any)))) G3292@e))) '#f))) (set! G2f0d@type-descriptor-transformer (lambda (G32ae@e G32af@r G32b0@mr) ((lambda (G32b4@t) ((lambda (G32b6@ls/false) (if (and G32b6@ls/false (apply (lambda (G32b8@id) (G2d70@id? G32b8@id)) G32b6@ls/false)) (apply (lambda (G32ba@id) ((lambda (G32bc@lab) ((lambda (G32be@b) ((lambda (G32c0@type) ((lambda () (begin (if (not G32bc@lab) (G2d96@raise-unbound-error G32ba@id) (void)) (if (not (and (eq? G32c0@type '$rtd) (not (list? (G2d94@binding-value G32be@b))))) (G305c@syntax-violation '#f '"not a record type" G32ae@e) (void)) (list 'quote (G2d94@binding-value G32be@b)))))) (G2d92@binding-type G32be@b))) (G2d8e@label->binding G32bc@lab G32af@r))) (G2d8a@id->label G32ba@id))) G32b6@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G32b4@t))) (G2f6f@syntax-dispatch G32b4@t '(_ any)))) G32ae@e))) (set! G2f0f@record-type-descriptor-transformer (lambda (G32c2@e G32c3@r G32c4@mr) ((lambda (G32c8@t) ((lambda (G32ca@ls/false) (if (and G32ca@ls/false (apply (lambda (G32cc@id) (G2d70@id? G32cc@id)) G32ca@ls/false)) (apply (lambda (G32ce@id) ((lambda (G32d0@lab) ((lambda (G32d2@b) ((lambda (G32d4@type) ((lambda () (begin (if (not G32d0@lab) (G2d96@raise-unbound-error G32ce@id) (void)) (if (not (and (eq? G32d4@type '$rtd) (list? (G2d94@binding-value G32d2@b)))) (G305c@syntax-violation '#f '"not a record type" G32c2@e) (void)) (G2f93@chi-expr (car (G2d94@binding-value G32d2@b)) G32c3@r G32c4@mr))))) (G2d92@binding-type G32d2@b))) (G2d8e@label->binding G32d0@lab G32c3@r))) (G2d8a@id->label G32ce@id))) G32ca@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G32c8@t))) (G2f6f@syntax-dispatch G32c8@t '(_ any)))) G32c2@e))) (set! G2f11@record-constructor-descriptor-transformer (lambda (G32d6@e G32d7@r G32d8@mr) ((lambda (G32dc@t) ((lambda (G32de@ls/false) (if (and G32de@ls/false (apply (lambda (G32e0@id) (G2d70@id? G32e0@id)) G32de@ls/false)) (apply (lambda (G32e2@id) ((lambda (G32e4@lab) ((lambda (G32e6@b) ((lambda (G32e8@type) ((lambda () (begin (if (not G32e4@lab) (G2d96@raise-unbound-error G32e2@id) (void)) (if (not (and (eq? G32e8@type '$rtd) (list? (G2d94@binding-value G32e6@b)))) (G305c@syntax-violation '#f '"invalid type" G32d6@e) (void)) (G2f93@chi-expr (cadr (G2d94@binding-value G32e6@b)) G32d7@r G32d8@mr))))) (G2d92@binding-type G32e6@b))) (G2d8e@label->binding G32e4@lab G32d7@r))) (G2d8a@id->label G32e2@id))) G32de@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G32dc@t))) (G2f6f@syntax-dispatch G32dc@t '(_ any)))) G32d6@e))) (set! G2f13@when-macro (lambda (G32ea@e) ((lambda (G32ec@t) ((lambda (G32ee@ls/false) (if G32ee@ls/false (apply (lambda (G32f0@test G32f1@e G32f2@e*) (G2f25@bless (list 'if G32f0@test (cons 'begin (cons G32f1@e G32f2@e*))))) G32ee@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G32ec@t))) (G2f6f@syntax-dispatch G32ec@t '(_ any any . each-any)))) G32ea@e))) (set! G2f15@unless-macro (lambda (G32f6@e) ((lambda (G32f8@t) ((lambda (G32fa@ls/false) (if G32fa@ls/false (apply (lambda (G32fc@test G32fd@e G32fe@e*) (G2f25@bless (list 'if (list 'not G32fc@test) (cons 'begin (cons G32fd@e G32fe@e*))))) G32fa@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G32f8@t))) (G2f6f@syntax-dispatch G32f8@t '(_ any any . each-any)))) G32f6@e))) (set! G2f17@if-transformer (lambda (G3302@e G3303@r G3304@mr) ((lambda (G3308@t) ((lambda (G330a@ls/false) (if G330a@ls/false (apply (lambda (G330c@e0 G330d@e1 G330e@e2) (list 'if (G2f93@chi-expr G330c@e0 G3303@r G3304@mr) (G2f93@chi-expr G330d@e1 G3303@r G3304@mr) (G2f93@chi-expr G330e@e2 G3303@r G3304@mr))) G330a@ls/false) ((lambda (G3312@t) ((lambda (G3314@ls/false) (if G3314@ls/false (apply (lambda (G3316@e0 G3317@e1) (list 'if (G2f93@chi-expr G3316@e0 G3303@r G3304@mr) (G2f93@chi-expr G3317@e1 G3303@r G3304@mr) (G2cce@G2c40@build-void))) G3314@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3312@t))) (G2f6f@syntax-dispatch G3312@t '(_ any any)))) G3308@t))) (G2f6f@syntax-dispatch G3308@t '(_ any any any)))) G3302@e))) (set! G2f19@and-transformer (lambda (G331a@e G331b@r G331c@mr) ((lambda (G3320@t) ((lambda (G3322@ls/false) (if G3322@ls/false (apply (lambda (G3324@e*) (cons 'and (G2f8f@chi-expr* G3324@e* G331b@r G331c@mr))) G3322@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3320@t))) (G2f6f@syntax-dispatch G3320@t '(_ . each-any)))) G331a@e))) (set! G2f1b@or-transformer (lambda (G3326@e G3327@r G3328@mr) ((lambda (G332c@t) ((lambda (G332e@ls/false) (if G332e@ls/false (apply (lambda (G3330@e*) (cons 'or (G2f8f@chi-expr* G3330@e* G3327@r G3328@mr))) G332e@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G332c@t))) (G2f6f@syntax-dispatch G332c@t '(_ . each-any)))) G3326@e))) (set! G2f1d@case-macro (lambda (G3332@e) ((lambda (G3335@build-last G3337@build-one) (begin (set! G3335@build-last (lambda (G335c@cls) ((lambda (G335e@t) ((lambda (G3360@ls/false) (if G3360@ls/false (apply (lambda (G3362@e G3363@e*) (cons 'begin (cons G3362@e G3363@e*))) G3360@ls/false) ((lambda (G3366@t) ((lambda (G3368@ls/false) (if G3368@ls/false (apply (lambda () (G3337@build-one G335c@cls '(if #f #f))) G3368@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3366@t))) (G2f6f@syntax-dispatch G3366@t '_))) G335e@t))) (G2f6f@syntax-dispatch G335e@t '(#(scheme-id else) any . each-any)))) G335c@cls))) (set! G3337@build-one (lambda (G334e@cls G334f@k) ((lambda (G3352@t) ((lambda (G3354@ls/false) (if G3354@ls/false (apply (lambda (G3356@d* G3357@e G3358@e*) (list 'if (list 'memv 't (list 'quote G3356@d*)) (cons 'begin (cons G3357@e G3358@e*)) G334f@k)) G3354@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3352@t))) (G2f6f@syntax-dispatch G3352@t '(each-any any . each-any)))) G334e@cls))) ((lambda (G3338@t) ((lambda (G333a@ls/false) (if G333a@ls/false (apply (lambda (G333c@expr) (G2f25@bless (cons 'let (cons (list (list 't G333c@expr)) '((if #f #f)))))) G333a@ls/false) ((lambda (G333e@t) ((lambda (G3340@ls/false) (if G3340@ls/false (apply (lambda (G3342@expr G3343@cls G3344@cls*) (G2f25@bless (list 'let (list (list 't G3342@expr)) ((letrec ((G3348@f (lambda (G334a@cls G334b@cls*) (if (null? G334b@cls*) (G3335@build-last G334a@cls) (G3337@build-one G334a@cls (G3348@f (car G334b@cls*) (cdr G334b@cls*))))))) G3348@f) G3343@cls G3344@cls*)))) G3340@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G333e@t))) (G2f6f@syntax-dispatch G333e@t '(_ any any . each-any)))) G3338@t))) (G2f6f@syntax-dispatch G3338@t '(_ any)))) G3332@e))) '#f '#f))) (set! G2f1f@quote-transformer (lambda (G336a@e G336b@r G336c@mr) ((lambda (G3370@t) ((lambda (G3372@ls/false) (if G3372@ls/false (apply (lambda (G3374@datum) (list 'quote (G2d86@stx->datum G3374@datum))) G3372@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3370@t))) (G2f6f@syntax-dispatch G3370@t '(_ any)))) G336a@e))) (set! G2f21@case-lambda-transformer (lambda (G3376@e G3377@r G3378@mr) ((lambda (G337c@t) ((lambda (G337e@ls/false) (if G337e@ls/false (apply (lambda (G3380@fmls* G3381@b* G3382@b**) (call-with-values (lambda () (G2f9b@chi-lambda-clause* G3376@e G3380@fmls* (map cons G3381@b* G3382@b**) G3377@r G3378@mr)) (lambda (G3388@G3386 G3389@G3387) ((lambda (G338c@body* G338d@fmls*) (G2ccb@G2c0a@build-case-lambda '#f G338d@fmls* G338c@body*)) G3389@G3387 G3388@G3386)))) G337e@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G337c@t))) (G2f6f@syntax-dispatch G337c@t '(_ . #(each (any any . each-any)))))) G3376@e))) (set! G2f23@lambda-transformer (lambda (G3390@e G3391@r G3392@mr) ((lambda (G3396@t) ((lambda (G3398@ls/false) (if G3398@ls/false (apply (lambda (G339a@fmls G339b@b G339c@b*) (call-with-values (lambda () (G2f99@chi-lambda-clause G3390@e G339a@fmls (cons G339b@b G339c@b*) G3391@r G3392@mr)) (lambda (G33a2@G33a0 G33a3@G33a1) ((lambda (G33a6@body G33a7@fmls) (G2cca@G2c08@build-lambda '#f G33a7@fmls G33a6@body)) G33a3@G33a1 G33a2@G33a0)))) G3398@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3396@t))) (G2f6f@syntax-dispatch G3396@t '(_ any any . each-any)))) G3390@e))) (set! G2f25@bless (lambda (G33aa@x) (G2d58@mkstx ((letrec ((G33ac@f (lambda (G33ae@x) (if (G2d38@stx? G33ae@x) G33ae@x (if (pair? G33ae@x) (cons (G33ac@f (car G33ae@x)) (G33ac@f (cdr G33ae@x))) (if (symbol? G33ae@x) (G2ef9@scheme-stx G33ae@x) (if (vector? G33ae@x) (vector-map G33ac@f G33ae@x) G33ae@x))))))) G33ac@f) G33aa@x) '() '() '()))) (set! G2f27@with-syntax-macro (lambda (G33b0@e) ((lambda (G33b2@t) ((lambda (G33b4@ls/false) (if G33b4@ls/false (apply (lambda (G33b6@pat* G33b7@expr* G33b8@b G33b9@b*) ((lambda (G33be@idn*) (begin (G2f97@verify-formals (map car G33be@idn*) G33b0@e) ((lambda (G33c0@t*) (G2f25@bless (list 'let (map list G33c0@t* G33b7@expr*) ((letrec ((G33c2@f (lambda (G33c4@pat* G33c5@t*) (if (null? G33c4@pat*) (cons 'begin (cons '#f (cons G33b8@b G33b9@b*))) (list 'syntax-case (car G33c5@t*) '() (list (car G33c4@pat*) (G33c2@f (cdr G33c4@pat*) (cdr G33c5@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33c4@pat*)) (car G33c5@t*)))))))) G33c2@f) G33b6@pat* G33c0@t*)))) (G3048@generate-temporaries G33b7@expr*)))) ((letrec ((G33c8@f (lambda (G33ca@pat*) (if (null? G33ca@pat*) '() (call-with-values (lambda () (G2f6d@convert-pattern (car G33ca@pat*) '())) (lambda (G33ce@G33cc G33cf@G33cd) ((lambda (G33d2@idn* G33d3@pat) (append G33d2@idn* (G33c8@f (cdr G33ca@pat*)))) G33cf@G33cd G33ce@G33cc))))))) G33c8@f) G33b6@pat*))) G33b4@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G33b2@t))) (G2f6f@syntax-dispatch G33b2@t '(_ #(each (any any)) any . each-any)))) G33b0@e))) (set! G2f29@invalid-fmls-error (lambda (G33d6@stx G33d7@fmls) ((lambda (G33da@t) ((lambda (G33dc@ls/false) (if G33dc@ls/false (apply (lambda (G33de@id* G33df@last) ((letrec ((G33e2@f (lambda (G33e4@id*) (if (null? G33e4@id*) (values) (if (not (G2d70@id? (car G33e4@id*))) (G305c@syntax-violation '#f '"not an identifier" G33d6@stx (car G33e4@id*)) (begin (G33e2@f (cdr G33e4@id*)) (if (G2d7e@bound-id-member? (car G33e4@id*) (cdr G33e4@id*)) (G305c@syntax-violation '#f '"duplicate binding" G33d6@stx (car G33e4@id*)) (void)))))))) G33e2@f) (if (G2d70@id? G33df@last) (cons G33df@last G33de@id*) (if (G2d66@syntax-null? G33df@last) G33de@id* (G305c@syntax-violation '#f '"not an identifier" G33d6@stx G33df@last))))) G33dc@ls/false) ((lambda (G33e6@t) ((lambda (G33e8@ls/false) (if G33e8@ls/false (apply (lambda () (G305c@syntax-violation '#f '"malformed binding form" G33d6@stx G33d7@fmls)) G33e8@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G33e6@t))) (G2f6f@syntax-dispatch G33e6@t '_))) G33da@t))) (G2f6f@syntax-dispatch G33da@t '#(each+ any () any)))) G33d7@fmls))) (set! G2f2b@let-macro (lambda (G33ea@stx) ((lambda (G33ec@t) ((lambda (G33ee@ls/false) (if G33ee@ls/false (apply (lambda (G33f0@lhs* G33f1@rhs* G33f2@b G33f3@b*) (if (G2d7a@valid-bound-ids? G33f0@lhs*) (G2f25@bless (cons (cons 'lambda (cons G33f0@lhs* (cons G33f2@b G33f3@b*))) G33f1@rhs*)) (G2f29@invalid-fmls-error G33ea@stx G33f0@lhs*))) G33ee@ls/false) ((lambda (G33f8@t) ((lambda (G33fa@ls/false) (if (and G33fa@ls/false (apply (lambda (G33fc@f G33fd@lhs* G33fe@rhs* G33ff@b G3400@b*) (G2d70@id? G33fc@f)) G33fa@ls/false)) (apply (lambda (G3406@f G3407@lhs* G3408@rhs* G3409@b G340a@b*) (if (G2d7a@valid-bound-ids? G3407@lhs*) (G2f25@bless (cons (list 'letrec (list (list G3406@f (cons 'lambda (cons G3407@lhs* (cons G3409@b G340a@b*))))) G3406@f) G3408@rhs*)) (G2f29@invalid-fmls-error G33ea@stx G3407@lhs*))) G33fa@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G33f8@t))) (G2f6f@syntax-dispatch G33f8@t '(_ any #(each (any any)) any . each-any)))) G33ec@t))) (G2f6f@syntax-dispatch G33ec@t '(_ #(each (any any)) any . each-any)))) G33ea@stx))) (set! G2f2d@let-values-macro (lambda (G3410@stx) ((lambda (G3413@rename G3415@rename*) (begin (set! G3413@rename (lambda (G3475@x G3476@old* G3477@new*) (begin (if (not (G2d70@id? G3475@x)) (G305c@syntax-violation '#f '"not an indentifier" G3410@stx G3475@x) (void)) (if (G2d7e@bound-id-member? G3475@x G3476@old*) (G305c@syntax-violation '#f '"duplicate binding" G3410@stx G3475@x) (void)) ((lambda (G347b@y) (values G347b@y (cons G3475@x G3476@old*) (cons G347b@y G3477@new*))) (gensym (G3062@syntax->datum G3475@x)))))) (set! G3415@rename* (lambda (G3463@x* G3464@old* G3465@new*) (if (null? G3463@x*) (values '() G3464@old* G3465@new*) (call-with-values (lambda () (G3413@rename (car G3463@x*) G3464@old* G3465@new*)) (lambda (G3469@x G346a@old* G346b@new*) (call-with-values (lambda () (G3415@rename* (cdr G3463@x*) G346a@old* G346b@new*)) (lambda (G346f@x* G3470@old* G3471@new*) (values (cons G3469@x G346f@x*) G3470@old* G3471@new*)))))))) ((lambda (G3416@t) ((lambda (G3418@ls/false) (if G3418@ls/false (apply (lambda (G341a@b G341b@b*) (cons* (G2f25@bless 'let) '() G341a@b G341b@b*)) G3418@ls/false) ((lambda (G341e@t) ((lambda (G3420@ls/false) (if G3420@ls/false (apply (lambda (G3422@lhs* G3423@rhs* G3424@b G3425@b*) (G2f25@bless ((letrec ((G342a@f (lambda (G342c@lhs* G342d@rhs* G342e@old* G342f@new*) (if (null? G342c@lhs*) (cons 'let (cons (map list G342e@old* G342f@new*) (cons G3424@b G3425@b*))) ((lambda (G3434@t) ((lambda (G3436@ls/false) (if G3436@ls/false (apply (lambda (G3438@x*) (call-with-values (lambda () (G3415@rename* G3438@x* G342e@old* G342f@new*)) (lambda (G343d@G343a G343e@G343b G343f@G343c) ((lambda (G3443@new* G3444@old* G3445@y*) (list 'call-with-values (list 'lambda '() (car G342d@rhs*)) (list 'lambda G3445@y* (G342a@f (cdr G342c@lhs*) (cdr G342d@rhs*) G3444@old* G3443@new*)))) G343f@G343c G343e@G343b G343d@G343a)))) G3436@ls/false) ((lambda (G3449@t) ((lambda (G344b@ls/false) (if G344b@ls/false (apply (lambda (G344d@x* G344e@x) (call-with-values (lambda () (G3413@rename G344e@x G342e@old* G342f@new*)) (lambda (G3451@y G3452@old* G3453@new*) (call-with-values (lambda () (G3415@rename* G344d@x* G3452@old* G3453@new*)) (lambda (G3457@y* G3458@old* G3459@new*) (list 'call-with-values (list 'lambda '() (car G342d@rhs*)) (list 'lambda (append G3457@y* G3451@y) (G342a@f (cdr G342c@lhs*) (cdr G342d@rhs*) G3458@old* G3459@new*)))))))) G344b@ls/false) ((lambda (G345d@t) ((lambda (G345f@ls/false) (if G345f@ls/false (apply (lambda (G3461@others) (G305c@syntax-violation '#f '"malformed bindings" G3410@stx G3461@others)) G345f@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G345d@t))) (G2f6f@syntax-dispatch G345d@t 'any))) G3449@t))) (G2f6f@syntax-dispatch G3449@t '#(each+ any () any)))) G3434@t))) (G2f6f@syntax-dispatch G3434@t 'each-any))) (car G342c@lhs*)))))) G342a@f) G3422@lhs* G3423@rhs* '() '()))) G3420@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G341e@t))) (G2f6f@syntax-dispatch G341e@t '(_ #(each (any any)) any . each-any)))) G3416@t))) (G2f6f@syntax-dispatch G3416@t '(_ () any . each-any)))) G3410@stx))) '#f '#f))) (set! G2f2f@let*-values-macro (lambda (G347d@stx) ((lambda (G3480@check) (begin (set! G3480@check (lambda (G34af@x*) (if (not (null? G34af@x*)) ((lambda (G34b1@x) (begin (if (not (G2d70@id? G34b1@x)) (G305c@syntax-violation '#f '"not an identifier" G347d@stx G34b1@x) (void)) (G3480@check (cdr G34af@x*)) (if (G2d7e@bound-id-member? G34b1@x (cdr G34af@x*)) (G305c@syntax-violation '#f '"duplicate identifier" G347d@stx G34b1@x) (void)))) (car G34af@x*)) (void)))) ((lambda (G3481@t) ((lambda (G3483@ls/false) (if G3483@ls/false (apply (lambda (G3485@b G3486@b*) (cons* (G2f25@bless 'let) '() G3485@b G3486@b*)) G3483@ls/false) ((lambda (G3489@t) ((lambda (G348b@ls/false) (if G348b@ls/false (apply (lambda (G348d@lhs* G348e@rhs* G348f@b G3490@b*) (G2f25@bless ((letrec ((G3495@f (lambda (G3497@lhs* G3498@rhs*) (if (null? G3497@lhs*) (cons 'begin (cons G348f@b G3490@b*)) ((lambda (G349b@t) ((lambda (G349d@ls/false) (if G349d@ls/false (apply (lambda (G349f@x*) (begin (G3480@check G349f@x*) (list 'call-with-values (list 'lambda '() (car G3498@rhs*)) (list 'lambda G349f@x* (G3495@f (cdr G3497@lhs*) (cdr G3498@rhs*)))))) G349d@ls/false) ((lambda (G34a1@t) ((lambda (G34a3@ls/false) (if G34a3@ls/false (apply (lambda (G34a5@x* G34a6@x) (begin (G3480@check (cons G34a6@x G34a5@x*)) (list 'call-with-values (list 'lambda '() (car G3498@rhs*)) (list 'lambda (append G34a5@x* G34a6@x) (G3495@f (cdr G3497@lhs*) (cdr G3498@rhs*)))))) G34a3@ls/false) ((lambda (G34a9@t) ((lambda (G34ab@ls/false) (if G34ab@ls/false (apply (lambda (G34ad@others) (G305c@syntax-violation '#f '"malformed bindings" G347d@stx G34ad@others)) G34ab@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G34a9@t))) (G2f6f@syntax-dispatch G34a9@t 'any))) G34a1@t))) (G2f6f@syntax-dispatch G34a1@t '#(each+ any () any)))) G349b@t))) (G2f6f@syntax-dispatch G349b@t 'each-any))) (car G3497@lhs*)))))) G3495@f) G348d@lhs* G348e@rhs*))) G348b@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3489@t))) (G2f6f@syntax-dispatch G3489@t '(_ #(each (any any)) any . each-any)))) G3481@t))) (G2f6f@syntax-dispatch G3481@t '(_ () any . each-any)))) G347d@stx))) '#f))) (set! G2f31@trace-lambda-macro (lambda (G34b3@stx) ((lambda (G34b5@t) ((lambda (G34b7@ls/false) (if G34b7@ls/false (apply (lambda (G34b9@who G34ba@fmls G34bb@b G34bc@b*) (if (G2d7a@valid-bound-ids? G34ba@fmls) (G2f25@bless (list 'make-traced-procedure (list 'quote G34b9@who) (cons 'lambda (cons G34ba@fmls (cons G34bb@b G34bc@b*))))) (G2f29@invalid-fmls-error G34b3@stx G34ba@fmls))) G34b7@ls/false) ((lambda (G34c1@t) ((lambda (G34c3@ls/false) (if G34c3@ls/false (apply (lambda (G34c5@who G34c6@fmls G34c7@last G34c8@b G34c9@b*) (if (G2d7a@valid-bound-ids? (cons G34c7@last G34c6@fmls)) (G2f25@bless (list 'make-traced-procedure (list 'quote G34c5@who) (cons 'lambda (cons (append G34c6@fmls G34c7@last) (cons G34c8@b G34c9@b*))))) (G2f29@invalid-fmls-error G34b3@stx (append G34c6@fmls G34c7@last)))) G34c3@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G34c1@t))) (G2f6f@syntax-dispatch G34c1@t '(_ any #(each+ any () any) any . each-any)))) G34b5@t))) (G2f6f@syntax-dispatch G34b5@t '(_ any each-any any . each-any)))) G34b3@stx))) (set! G2f33@trace-define-macro (lambda (G34cf@stx) ((lambda (G34d1@t) ((lambda (G34d3@ls/false) (if G34d3@ls/false (apply (lambda (G34d5@who G34d6@fmls G34d7@b G34d8@b*) (if (G2d7a@valid-bound-ids? G34d6@fmls) (G2f25@bless (list 'define G34d5@who (list 'make-traced-procedure (list 'quote G34d5@who) (cons 'lambda (cons G34d6@fmls (cons G34d7@b G34d8@b*)))))) (G2f29@invalid-fmls-error G34cf@stx G34d6@fmls))) G34d3@ls/false) ((lambda (G34dd@t) ((lambda (G34df@ls/false) (if G34df@ls/false (apply (lambda (G34e1@who G34e2@fmls G34e3@last G34e4@b G34e5@b*) (if (G2d7a@valid-bound-ids? (cons G34e3@last G34e2@fmls)) (G2f25@bless (list 'define G34e1@who (list 'make-traced-procedure (list 'quote G34e1@who) (cons 'lambda (cons (append G34e2@fmls G34e3@last) (cons G34e4@b G34e5@b*)))))) (G2f29@invalid-fmls-error G34cf@stx (append G34e2@fmls G34e3@last)))) G34df@ls/false) ((lambda (G34eb@t) ((lambda (G34ed@ls/false) (if G34ed@ls/false (apply (lambda (G34ef@who G34f0@expr) (if (G2d70@id? G34ef@who) (G2f25@bless (list 'define G34ef@who (list 'let (list (list 'v G34f0@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34ef@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G305c@syntax-violation '#f '"invalid name" G34cf@stx))) G34ed@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G34eb@t))) (G2f6f@syntax-dispatch G34eb@t '(_ any any)))) G34dd@t))) (G2f6f@syntax-dispatch G34dd@t '(_ (any . #(each+ any () any)) any . each-any)))) G34d1@t))) (G2f6f@syntax-dispatch G34d1@t '(_ (any . each-any) any . each-any)))) G34cf@stx))) (set! G2f35@trace-define-syntax-macro (lambda (G34f3@stx) ((lambda (G34f5@t) ((lambda (G34f7@ls/false) (if G34f7@ls/false (apply (lambda (G34f9@who G34fa@expr) (if (G2d70@id? G34f9@who) (G2f25@bless (list 'define-syntax G34f9@who (list 'make-traced-macro (list 'quote G34f9@who) G34fa@expr))) (G305c@syntax-violation '#f '"invalid name" G34f3@stx))) G34f7@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G34f5@t))) (G2f6f@syntax-dispatch G34f5@t '(_ any any)))) G34f3@stx))) (set! G2f37@trace-let/rec-syntax (lambda (G34fd@who) (lambda (G34ff@stx) ((lambda (G3501@t) ((lambda (G3503@ls/false) (if G3503@ls/false (apply (lambda (G3505@lhs* G3506@rhs* G3507@b G3508@b*) (if (G2d7a@valid-bound-ids? G3505@lhs*) ((lambda (G350d@rhs*) (G2f25@bless (cons G34fd@who (cons (map list G3505@lhs* G350d@rhs*) (cons G3507@b G3508@b*))))) (map (lambda (G350f@lhs G3510@rhs) (list 'make-traced-macro (list 'quote G350f@lhs) G3510@rhs)) G3505@lhs* G3506@rhs*)) (G2f29@invalid-fmls-error G34ff@stx G3505@lhs*))) G3503@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3501@t))) (G2f6f@syntax-dispatch G3501@t '(_ #(each (any any)) any . each-any)))) G34ff@stx)))) (set! G2f39@trace-let-syntax-macro (G2f37@trace-let/rec-syntax 'let-syntax)) (set! G2f3b@trace-letrec-syntax-macro (G2f37@trace-let/rec-syntax 'letrec-syntax)) (set! G2f3d@guard-macro (lambda (G3513@x) ((lambda (G3516@gen-clauses) (begin (set! G3516@gen-clauses (lambda (G352d@con G352e@outerk G352f@clause*) ((lambda (G3534@f G3536@f*) (begin (set! G3534@f (lambda (G3569@x G356a@k) ((lambda (G356d@t) ((lambda (G356f@ls/false) (if G356f@ls/false (apply (lambda (G3571@e G3572@p) ((lambda (G3575@t) (list 'let (list (list G3575@t G3571@e)) (list 'if G3575@t (list G3572@p G3575@t) G356a@k))) (gensym))) G356f@ls/false) ((lambda (G3577@t) ((lambda (G3579@ls/false) (if G3579@ls/false (apply (lambda (G357b@e) ((lambda (G357d@t) (list 'let (list (list G357d@t G357b@e)) (list 'if G357d@t G357d@t G356a@k))) (gensym))) G3579@ls/false) ((lambda (G357f@t) ((lambda (G3581@ls/false) (if G3581@ls/false (apply (lambda (G3583@e G3584@v G3585@v*) (list 'if G3583@e (cons 'begin (cons G3584@v G3585@v*)) G356a@k)) G3581@ls/false) ((lambda (G3589@t) ((lambda (G358b@ls/false) (if G358b@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid guard clause" G3569@x)) G358b@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3589@t))) (G2f6f@syntax-dispatch G3589@t '_))) G357f@t))) (G2f6f@syntax-dispatch G357f@t '(any any . each-any)))) G3577@t))) (G2f6f@syntax-dispatch G3577@t '(any)))) G356d@t))) (G2f6f@syntax-dispatch G356d@t '(any #(scheme-id =>) any)))) G3569@x))) (set! G3536@f* (lambda (G3541@x*) ((lambda (G3543@t) ((lambda (G3545@ls/false) (if G3545@ls/false (apply (lambda () ((lambda (G3547@g) (values (list G3547@g (list 'lambda '() (list 'raise-continuable G352d@con))) G3547@g)) (gensym))) G3545@ls/false) ((lambda (G3549@t) ((lambda (G354b@ls/false) (if G354b@ls/false (apply (lambda (G354d@e G354e@e*) (values (cons 'begin (cons G354d@e G354e@e*)) '#f)) G354b@ls/false) ((lambda (G3551@t) ((lambda (G3553@ls/false) (if G3553@ls/false (apply (lambda (G3555@cls G3556@cls*) (call-with-values (lambda () (G3536@f* G3556@cls*)) (lambda (G355b@G3559 G355c@G355a) ((lambda (G355f@g G3560@e) (values (G3534@f G3555@cls G3560@e) G355f@g)) G355c@G355a G355b@G3559)))) G3553@ls/false) ((lambda (G3563@t) ((lambda (G3565@ls/false) (if G3565@ls/false (apply (lambda (G3567@others) (G305c@syntax-violation '#f '"invalid guard clause" G3567@others)) G3565@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3563@t))) (G2f6f@syntax-dispatch G3563@t 'any))) G3551@t))) (G2f6f@syntax-dispatch G3551@t '(any . any)))) G3549@t))) (G2f6f@syntax-dispatch G3549@t '((#(scheme-id else) any . each-any))))) G3543@t))) (G2f6f@syntax-dispatch G3543@t '()))) G3541@x*))) (call-with-values (lambda () (G3536@f* G352f@clause*)) (lambda (G3539@G3537 G353a@G3538) ((lambda (G353d@raisek G353e@code) (if G353d@raisek (list (list 'call/cc (list 'lambda (list G353d@raisek) (list G352e@outerk (list 'lambda '() G353e@code))))) (list G352e@outerk (list 'lambda '() G353e@code)))) G353a@G3538 G3539@G3537))))) '#f '#f))) ((lambda (G3517@t) ((lambda (G3519@ls/false) (if (and G3519@ls/false (apply (lambda (G351b@con G351c@clause* G351d@b G351e@b*) (G2d70@id? G351b@con)) G3519@ls/false)) (apply (lambda (G3523@con G3524@clause* G3525@b G3526@b*) ((lambda (G352b@outerk) (G2f25@bless (list (list 'call/cc (list 'lambda (list G352b@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3523@con) (G3516@gen-clauses G3523@con G352b@outerk G3524@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3525@b G3526@b*))))))))))) (gensym))) G3519@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3517@t))) (G2f6f@syntax-dispatch G3517@t '(_ (any . each-any) any . each-any)))) G3513@x))) '#f))) (set! G2f3f@define-enumeration-macro (lambda (G358d@stx) ((lambda (G3590@set? G3592@remove-dups) (begin (set! G3590@set? (lambda (G35a9@x) (or (null? G35a9@x) (and (not (memq (car G35a9@x) (cdr G35a9@x))) (G3590@set? (cdr G35a9@x)))))) (set! G3592@remove-dups (lambda (G35a7@ls) (if (null? G35a7@ls) '() (cons (car G35a7@ls) (G3592@remove-dups (remq (car G35a7@ls) (cdr G35a7@ls))))))) ((lambda (G3593@t) ((lambda (G3595@ls/false) (if (and G3595@ls/false (apply (lambda (G3597@name G3598@id* G3599@maker) (and (G2d70@id? G3597@name) (G2d70@id? G3599@maker) (for-all G2d70@id? G3598@id*))) G3595@ls/false)) (apply (lambda (G359d@name G359e@id* G359f@maker) ((lambda (G35a3@name* G35a4@mk) (G2f25@bless (list 'begin (list 'define G35a4@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G35a3@name*)))) (list 'define-syntax G359d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G35a3@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G359d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G359f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G359f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G35a3@name*)) (cons 'syntax-violation (cons (list 'quote G359f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G35a4@mk '('(n* ...)))))))))))) (G3592@remove-dups (G3062@syntax->datum G359e@id*)) (gensym))) G3595@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3593@t))) (G2f6f@syntax-dispatch G3593@t '(_ any each-any any)))) G358d@stx))) '#f '#f))) (set! G2f41@time-macro (lambda (G35ab@stx) ((lambda (G35ad@t) ((lambda (G35af@ls/false) (if G35af@ls/false (apply (lambda (G35b1@expr) ((lambda (G35b3@str) (G2f25@bless (list 'time-it G35b3@str (list 'lambda '() G35b1@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G35b7@G35b5 G35b8@G35b6) ((lambda (G35bb@e G35bc@p) (begin (write (G3062@syntax->datum G35b1@expr) G35bc@p) (G35bb@e))) G35b8@G35b6 G35b7@G35b5))))) G35af@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G35ad@t))) (G2f6f@syntax-dispatch G35ad@t '(_ any)))) G35ab@stx))) (set! G2f43@delay-macro (lambda (G35bf@stx) ((lambda (G35c1@t) ((lambda (G35c3@ls/false) (if G35c3@ls/false (apply (lambda (G35c5@expr) (G2f25@bless (list 'make-promise (list 'lambda '() G35c5@expr)))) G35c3@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G35c1@t))) (G2f6f@syntax-dispatch G35c1@t '(_ any)))) G35bf@stx))) (set! G2f45@assert-macro (lambda (G35c7@stx) ((lambda (G35c9@t) ((lambda (G35cb@ls/false) (if G35cb@ls/false (apply (lambda (G35cd@expr) ((lambda (G35cf@pos) (G2f25@bless (list 'unless G35cd@expr (list 'assertion-error (list 'quote G35cd@expr) (list 'quote G35cf@pos))))) (or (G3052@expression-position G35c7@stx) (G3052@expression-position G35cd@expr)))) G35cb@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G35c9@t))) (G2f6f@syntax-dispatch G35c9@t '(_ any)))) G35c7@stx))) (set! G2f47@endianness-macro (lambda (G35d1@stx) ((lambda (G35d3@t) ((lambda (G35d5@ls/false) (if G35d5@ls/false (apply (lambda (G35d7@e) ((lambda (G35d9@t) (if (memv G35d9@t '(little)) (G2f25@bless ''little) (if (memv G35d9@t '(big)) (G2f25@bless ''big) (G305c@syntax-violation '#f '"endianness must be big or little" G35d1@stx)))) (G3062@syntax->datum G35d7@e))) G35d5@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G35d3@t))) (G2f6f@syntax-dispatch G35d3@t '(_ any)))) G35d1@stx))) (set! G2f49@identifier-syntax-macro (lambda (G35db@stx) ((lambda (G35dd@t) ((lambda (G35df@ls/false) (if G35df@ls/false (apply (lambda (G35e1@expr) (G2f25@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35e1@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35e1@expr) '((syntax (e* ...)))))))))) G35df@ls/false) ((lambda (G35e3@t) ((lambda (G35e5@ls/false) (if (and G35e5@ls/false (apply (lambda (G35e7@id1 G35e8@expr1 G35e9@id2 G35ea@expr2 G35eb@expr3) (and (G2d70@id? G35e7@id1) (G2d70@id? G35e9@id2) (G2d70@id? G35ea@expr2))) G35e5@ls/false)) (apply (lambda (G35f1@id1 G35f2@expr1 G35f3@id2 G35f4@expr2 G35f5@expr3) (G2f25@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35f2@expr1)) (list (list 'set! 'id G35f4@expr2) (list 'syntax G35f5@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35f2@expr1 '(e* ...))))))))) G35e5@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G35e3@t))) (G2f6f@syntax-dispatch G35e3@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35dd@t))) (G2f6f@syntax-dispatch G35dd@t '(_ any)))) G35db@stx))) (set! G2f4b@do-macro (lambda (G35fb@stx) ((lambda (G35fe@bind) (begin (set! G35fe@bind (lambda (G3615@x) ((lambda (G3617@t) ((lambda (G3619@ls/false) (if G3619@ls/false (apply (lambda (G361b@x G361c@init) (list G361b@x G361c@init G361b@x)) G3619@ls/false) ((lambda (G361f@t) ((lambda (G3621@ls/false) (if G3621@ls/false (apply (lambda (G3623@x G3624@init G3625@step) (list G3623@x G3624@init G3625@step)) G3621@ls/false) ((lambda (G3629@t) ((lambda (G362b@ls/false) (if G362b@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid binding" G35fb@stx)) G362b@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3629@t))) (G2f6f@syntax-dispatch G3629@t '_))) G361f@t))) (G2f6f@syntax-dispatch G361f@t '(any any any)))) G3617@t))) (G2f6f@syntax-dispatch G3617@t '(any any)))) G3615@x))) ((lambda (G35ff@t) ((lambda (G3601@ls/false) (if G3601@ls/false (apply (lambda (G3603@binding* G3604@test G3605@expr* G3606@command*) ((lambda (G360b@t) ((lambda (G360d@ls/false) (if G360d@ls/false (apply (lambda (G360f@x* G3610@init* G3611@step*) (if (G2d7a@valid-bound-ids? G360f@x*) (G2f25@bless (list 'letrec (list (list 'loop (list 'lambda G360f@x* (list 'if G3604@test (cons 'begin (cons '(if #f #f) G3605@expr*)) (cons 'begin (append G3606@command* (list (cons 'loop G3611@step*)))))))) (cons 'loop G3610@init*))) (G305c@syntax-violation '#f '"invalid bindings" G35fb@stx))) G360d@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G360b@t))) (G2f6f@syntax-dispatch G360b@t '#(each (any any any))))) (map G35fe@bind G3603@binding*))) G3601@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G35ff@t))) (G2f6f@syntax-dispatch G35ff@t '(_ each-any (any . each-any) . each-any)))) G35fb@stx))) '#f))) (set! G2f4d@let*-macro (lambda (G362d@stx) ((lambda (G362f@t) ((lambda (G3631@ls/false) (if (and G3631@ls/false (apply (lambda (G3633@lhs* G3634@rhs* G3635@b G3636@b*) (for-all G2d70@id? G3633@lhs*)) G3631@ls/false)) (apply (lambda (G363b@lhs* G363c@rhs* G363d@b G363e@b*) (G2f25@bless ((letrec ((G3643@f (lambda (G3645@x*) (if (null? G3645@x*) (cons 'let (cons '() (cons G363d@b G363e@b*))) (list 'let (list (car G3645@x*)) (G3643@f (cdr G3645@x*))))))) G3643@f) (map list G363b@lhs* G363c@rhs*)))) G3631@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G362f@t))) (G2f6f@syntax-dispatch G362f@t '(_ #(each (any any)) any . each-any)))) G362d@stx))) (set! G2f4f@or-macro (lambda (G3647@stx) ((lambda (G3649@t) ((lambda (G364b@ls/false) (if G364b@ls/false (apply (lambda () '#f) G364b@ls/false) ((lambda (G364d@t) ((lambda (G364f@ls/false) (if G364f@ls/false (apply (lambda (G3651@e G3652@e*) (G2f25@bless ((letrec ((G3655@f (lambda (G3657@e G3658@e*) (if (null? G3658@e*) (list 'begin '#f G3657@e) (list 'let (list (list 't G3657@e)) (list 'if 't 't (G3655@f (car G3658@e*) (cdr G3658@e*)))))))) G3655@f) G3651@e G3652@e*))) G364f@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G364d@t))) (G2f6f@syntax-dispatch G364d@t '(_ any . each-any)))) G3649@t))) (G2f6f@syntax-dispatch G3649@t '(_)))) G3647@stx))) (set! G2f51@and-macro (lambda (G365b@stx) ((lambda (G365d@t) ((lambda (G365f@ls/false) (if G365f@ls/false (apply (lambda () '#t) G365f@ls/false) ((lambda (G3661@t) ((lambda (G3663@ls/false) (if G3663@ls/false (apply (lambda (G3665@e G3666@e*) (G2f25@bless ((letrec ((G3669@f (lambda (G366b@e G366c@e*) (if (null? G366c@e*) (list 'begin '#f G366b@e) (cons 'if (cons G366b@e (cons (G3669@f (car G366c@e*) (cdr G366c@e*)) '(#f)))))))) G3669@f) G3665@e G3666@e*))) G3663@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3661@t))) (G2f6f@syntax-dispatch G3661@t '(_ any . each-any)))) G365d@t))) (G2f6f@syntax-dispatch G365d@t '(_)))) G365b@stx))) (set! G2f53@cond-macro (lambda (G366f@stx) ((lambda (G3671@t) ((lambda (G3673@ls/false) (if G3673@ls/false (apply (lambda (G3675@cls G3676@cls*) (G2f25@bless ((letrec ((G3679@f (lambda (G367b@cls G367c@cls*) (if (null? G367c@cls*) ((lambda (G367f@t) ((lambda (G3681@ls/false) (if G3681@ls/false (apply (lambda (G3683@e G3684@e*) (cons 'begin (cons G3683@e G3684@e*))) G3681@ls/false) ((lambda (G3687@t) ((lambda (G3689@ls/false) (if G3689@ls/false (apply (lambda (G368b@e G368c@p) (list 'let (list (list 't G368b@e)) (list 'if 't (cons G368c@p '(t))))) G3689@ls/false) ((lambda (G368f@t) ((lambda (G3691@ls/false) (if G3691@ls/false (apply (lambda (G3693@e) (cons 'or (cons G3693@e '((if #f #f))))) G3691@ls/false) ((lambda (G3695@t) ((lambda (G3697@ls/false) (if G3697@ls/false (apply (lambda (G3699@e G369a@e*) (list 'if G3699@e (cons 'begin G369a@e*))) G3697@ls/false) ((lambda (G369d@t) ((lambda (G369f@ls/false) (if G369f@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid last clause" G366f@stx)) G369f@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G369d@t))) (G2f6f@syntax-dispatch G369d@t '_))) G3695@t))) (G2f6f@syntax-dispatch G3695@t '(any . each-any)))) G368f@t))) (G2f6f@syntax-dispatch G368f@t '(any)))) G3687@t))) (G2f6f@syntax-dispatch G3687@t '(any #(scheme-id =>) any)))) G367f@t))) (G2f6f@syntax-dispatch G367f@t '(#(scheme-id else) any . each-any)))) G367b@cls) ((lambda (G36a1@t) ((lambda (G36a3@ls/false) (if G36a3@ls/false (apply (lambda (G36a5@e G36a6@e*) (G305c@syntax-violation '#f '"incorrect position of keyword else" G366f@stx)) G36a3@ls/false) ((lambda (G36a9@t) ((lambda (G36ab@ls/false) (if G36ab@ls/false (apply (lambda (G36ad@e G36ae@p) (list 'let (list (list 't G36ad@e)) (list 'if 't (cons G36ae@p '(t)) (G3679@f (car G367c@cls*) (cdr G367c@cls*))))) G36ab@ls/false) ((lambda (G36b1@t) ((lambda (G36b3@ls/false) (if G36b3@ls/false (apply (lambda (G36b5@e) (list 'or G36b5@e (G3679@f (car G367c@cls*) (cdr G367c@cls*)))) G36b3@ls/false) ((lambda (G36b7@t) ((lambda (G36b9@ls/false) (if G36b9@ls/false (apply (lambda (G36bb@e G36bc@e*) (list 'if G36bb@e (cons 'begin G36bc@e*) (G3679@f (car G367c@cls*) (cdr G367c@cls*)))) G36b9@ls/false) ((lambda (G36bf@t) ((lambda (G36c1@ls/false) (if G36c1@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid last clause" G366f@stx)) G36c1@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G36bf@t))) (G2f6f@syntax-dispatch G36bf@t '_))) G36b7@t))) (G2f6f@syntax-dispatch G36b7@t '(any . each-any)))) G36b1@t))) (G2f6f@syntax-dispatch G36b1@t '(any)))) G36a9@t))) (G2f6f@syntax-dispatch G36a9@t '(any #(scheme-id =>) any)))) G36a1@t))) (G2f6f@syntax-dispatch G36a1@t '(#(scheme-id else) any . each-any)))) G367b@cls))))) G3679@f) G3675@cls G3676@cls*))) G3673@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3671@t))) (G2f6f@syntax-dispatch G3671@t '(_ any . each-any)))) G366f@stx))) (set! G2f55@do-include (lambda (G36c3@stx G36c4@id G36c5@filename) ((lambda (G36c9@filename) (begin (if (not (and (string? G36c9@filename) (G2d70@id? G36c4@id))) (G305c@syntax-violation '#f '"invalid syntax" G36c3@stx) (void)) (cons (G2f25@bless 'begin) (with-input-from-file G36c9@filename (lambda () ((letrec ((G36cb@f (lambda (G36cd@ls) ((lambda (G36cf@x) (if (eof-object? G36cf@x) (reverse G36cd@ls) (G36cb@f (cons (G2d4e@datum->stx G36c4@id G36cf@x) G36cd@ls)))) (G28ff@G2828@read-annotated))))) G36cb@f) '())))))) (G2d86@stx->datum G36c5@filename)))) (set! G2f57@include-macro (lambda (G36d1@e) ((lambda (G36d3@t) ((lambda (G36d5@ls/false) (if G36d5@ls/false (apply (lambda (G36d7@id G36d8@filename) (G2f55@do-include G36d1@e G36d7@id G36d8@filename)) G36d5@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G36d3@t))) (G2f6f@syntax-dispatch G36d3@t '(any any)))) G36d1@e))) (set! G2f59@include-into-macro (lambda (G36db@e) ((lambda (G36dd@t) ((lambda (G36df@ls/false) (if G36df@ls/false (apply (lambda (G36e1@id G36e2@filename) (G2f55@do-include G36db@e G36e1@id G36e2@filename)) G36df@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G36dd@t))) (G2f6f@syntax-dispatch G36dd@t '(_ any any)))) G36db@e))) (set! G2f5b@syntax-rules-macro (lambda (G36e5@e) ((lambda (G36e7@t) ((lambda (G36e9@ls/false) (if G36e9@ls/false (apply (lambda (G36eb@lits G36ec@pat* G36ed@tmp*) (begin (G2f75@verify-literals G36eb@lits G36e5@e) (G2f25@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36eb@lits (map (lambda (G36f1@pat G36f2@tmp) ((lambda (G36f5@t) ((lambda (G36f7@ls/false) (if G36f7@ls/false (apply (lambda (G36f9@rest) (list (cons 'g G36f9@rest) (list 'syntax G36f2@tmp))) G36f7@ls/false) ((lambda (G36fb@t) ((lambda (G36fd@ls/false) (if G36fd@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid syntax-rules pattern" G36e5@e G36f1@pat)) G36fd@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G36fb@t))) (G2f6f@syntax-dispatch G36fb@t '_))) G36f5@t))) (G2f6f@syntax-dispatch G36f5@t '(_ . any)))) G36f1@pat)) G36ec@pat* G36ed@tmp*)))))))) G36e9@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G36e7@t))) (G2f6f@syntax-dispatch G36e7@t '(_ each-any . #(each (any any)))))) G36e5@e))) (set! G2f5d@quasiquote-macro ((lambda () ((lambda (G3700@datum G371e@quasicons* G3720@quasicons G3722@quasiappend G3724@quasivector G3726@vquasi G3728@quasi) (begin (set! G3700@datum (lambda (G3803@x) (list (G2ef9@scheme-stx 'quote) (G2d58@mkstx G3803@x '() '() '())))) (set! G371e@quasicons* (lambda (G37fb@x G37fc@y) ((letrec ((G37ff@f (lambda (G3801@x) (if (null? G3801@x) G37fc@y (G3720@quasicons (car G3801@x) (G37ff@f (cdr G3801@x))))))) G37ff@f) G37fb@x))) (set! G3720@quasicons (lambda (G37d5@x G37d6@y) ((lambda (G37d9@t) ((lambda (G37db@ls/false) (if G37db@ls/false (apply (lambda (G37dd@dy) ((lambda (G37df@t) ((lambda (G37e1@ls/false) (if G37e1@ls/false (apply (lambda (G37e3@dx) (list (G2ef9@scheme-stx 'quote) (cons G37e3@dx G37dd@dy))) G37e1@ls/false) ((lambda (G37e5@t) ((lambda (G37e7@ls/false) (if G37e7@ls/false (apply (lambda () ((lambda (G37e9@t) ((lambda (G37eb@ls/false) (if G37eb@ls/false (apply (lambda () (list (G2ef9@scheme-stx 'list) G37d5@x)) G37eb@ls/false) ((lambda (G37ed@t) ((lambda (G37ef@ls/false) (if G37ef@ls/false (apply (lambda () (list (G2ef9@scheme-stx 'cons) G37d5@x G37d6@y)) G37ef@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G37ed@t))) (G2f6f@syntax-dispatch G37ed@t '_))) G37e9@t))) (G2f6f@syntax-dispatch G37e9@t '()))) G37dd@dy)) G37e7@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G37e5@t))) (G2f6f@syntax-dispatch G37e5@t '_))) G37df@t))) (G2f6f@syntax-dispatch G37df@t '(#(scheme-id quote) any)))) G37d5@x)) G37db@ls/false) ((lambda (G37f1@t) ((lambda (G37f3@ls/false) (if G37f3@ls/false (apply (lambda (G37f5@stuff) (cons* (G2ef9@scheme-stx 'list) G37d5@x G37f5@stuff)) G37f3@ls/false) ((lambda (G37f7@t) ((lambda (G37f9@ls/false) (if G37f9@ls/false (apply (lambda () (list (G2ef9@scheme-stx 'cons) G37d5@x G37d6@y)) G37f9@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G37f7@t))) (G2f6f@syntax-dispatch G37f7@t '_))) G37f1@t))) (G2f6f@syntax-dispatch G37f1@t '(#(scheme-id list) . each-any)))) G37d9@t))) (G2f6f@syntax-dispatch G37d9@t '(#(scheme-id quote) any)))) G37d6@y))) (set! G3722@quasiappend (lambda (G37bb@x G37bc@y) ((lambda (G37bf@ls) (if (null? G37bf@ls) (list (G2ef9@scheme-stx 'quote) '()) (if (null? (cdr G37bf@ls)) (car G37bf@ls) (cons* (G2ef9@scheme-stx 'append) G37bf@ls)))) ((letrec ((G37c1@f (lambda (G37c3@x) (if (null? G37c3@x) ((lambda (G37c5@t) ((lambda (G37c7@ls/false) (if G37c7@ls/false (apply (lambda () '()) G37c7@ls/false) ((lambda (G37c9@t) ((lambda (G37cb@ls/false) (if G37cb@ls/false (apply (lambda () (list G37bc@y)) G37cb@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G37c9@t))) (G2f6f@syntax-dispatch G37c9@t '_))) G37c5@t))) (G2f6f@syntax-dispatch G37c5@t '(#(scheme-id quote) ())))) G37bc@y) ((lambda (G37cd@t) ((lambda (G37cf@ls/false) (if G37cf@ls/false (apply (lambda () (G37c1@f (cdr G37c3@x))) G37cf@ls/false) ((lambda (G37d1@t) ((lambda (G37d3@ls/false) (if G37d3@ls/false (apply (lambda () (cons (car G37c3@x) (G37c1@f (cdr G37c3@x)))) G37d3@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G37d1@t))) (G2f6f@syntax-dispatch G37d1@t '_))) G37cd@t))) (G2f6f@syntax-dispatch G37cd@t '(#(scheme-id quote) ())))) (car G37c3@x)))))) G37c1@f) G37bb@x)))) (set! G3724@quasivector (lambda (G3789@x) ((lambda (G378b@pat-x) ((lambda (G378d@t) ((lambda (G378f@ls/false) (if G378f@ls/false (apply (lambda (G3791@x*) (list (G2ef9@scheme-stx 'quote) (list->vector G3791@x*))) G378f@ls/false) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda () ((letrec ((G3797@f (lambda (G3799@x G379a@k) ((lambda (G379d@t) ((lambda (G379f@ls/false) (if G379f@ls/false (apply (lambda (G37a1@x*) (G379a@k (map (lambda (G37a3@x) (list (G2ef9@scheme-stx 'quote) G37a3@x)) G37a1@x*))) G379f@ls/false) ((lambda (G37a5@t) ((lambda (G37a7@ls/false) (if G37a7@ls/false (apply (lambda (G37a9@x*) (G379a@k G37a9@x*)) G37a7@ls/false) ((lambda (G37ab@t) ((lambda (G37ad@ls/false) (if G37ad@ls/false (apply (lambda (G37af@x G37b0@y) (G3797@f G37b0@y (lambda (G37b3@ls) (G379a@k (cons G37af@x G37b3@ls))))) G37ad@ls/false) ((lambda (G37b5@t) ((lambda (G37b7@ls/false) (if G37b7@ls/false (apply (lambda () (list (G2ef9@scheme-stx 'list->vector) G378b@pat-x)) G37b7@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G37b5@t))) (G2f6f@syntax-dispatch G37b5@t '_))) G37ab@t))) (G2f6f@syntax-dispatch G37ab@t '(#(scheme-id cons) any any)))) G37a5@t))) (G2f6f@syntax-dispatch G37a5@t '(#(scheme-id list) . each-any)))) G379d@t))) (G2f6f@syntax-dispatch G379d@t '(#(scheme-id quote) each-any)))) G3799@x)))) G3797@f) G3789@x (lambda (G37b9@ls) (cons* (G2ef9@scheme-stx 'vector) G37b9@ls)))) G3795@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3793@t))) (G2f6f@syntax-dispatch G3793@t '_))) G378d@t))) (G2f6f@syntax-dispatch G378d@t '(#(scheme-id quote) each-any)))) G378b@pat-x)) G3789@x))) (set! G3726@vquasi (lambda (G3767@p G3768@lev) ((lambda (G376b@t) ((lambda (G376d@ls/false) (if G376d@ls/false (apply (lambda (G376f@p G3770@q) ((lambda (G3773@t) ((lambda (G3775@ls/false) (if G3775@ls/false (apply (lambda (G3777@p) (if (= G3768@lev '0) (G371e@quasicons* G3777@p (G3726@vquasi G3770@q G3768@lev)) (G3720@quasicons (G3720@quasicons (G3700@datum 'unquote) (G3728@quasi G3777@p (- G3768@lev '1))) (G3726@vquasi G3770@q G3768@lev)))) G3775@ls/false) ((lambda (G3779@t) ((lambda (G377b@ls/false) (if G377b@ls/false (apply (lambda (G377d@p) (if (= G3768@lev '0) (G3722@quasiappend G377d@p (G3726@vquasi G3770@q G3768@lev)) (G3720@quasicons (G3720@quasicons (G3700@datum 'unquote-splicing) (G3728@quasi G377d@p (- G3768@lev '1))) (G3726@vquasi G3770@q G3768@lev)))) G377b@ls/false) ((lambda (G377f@t) ((lambda (G3781@ls/false) (if G3781@ls/false (apply (lambda (G3783@p) (G3720@quasicons (G3728@quasi G3783@p G3768@lev) (G3726@vquasi G3770@q G3768@lev))) G3781@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G377f@t))) (G2f6f@syntax-dispatch G377f@t 'any))) G3779@t))) (G2f6f@syntax-dispatch G3779@t '(#(scheme-id unquote-splicing) . each-any)))) G3773@t))) (G2f6f@syntax-dispatch G3773@t '(#(scheme-id unquote) . each-any)))) G376f@p)) G376d@ls/false) ((lambda (G3785@t) ((lambda (G3787@ls/false) (if G3787@ls/false (apply (lambda () (list (G2ef9@scheme-stx 'quote) '())) G3787@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3785@t))) (G2f6f@syntax-dispatch G3785@t '()))) G376b@t))) (G2f6f@syntax-dispatch G376b@t '(any . any)))) G3767@p))) (set! G3728@quasi (lambda (G3731@p G3732@lev) ((lambda (G3735@t) ((lambda (G3737@ls/false) (if G3737@ls/false (apply (lambda (G3739@p) (if (= G3732@lev '0) G3739@p (G3720@quasicons (G3700@datum 'unquote) (G3728@quasi (list G3739@p) (- G3732@lev '1))))) G3737@ls/false) ((lambda (G373b@t) ((lambda (G373d@ls/false) (if G373d@ls/false (apply (lambda (G373f@p G3740@q) (if (= G3732@lev '0) (G371e@quasicons* G373f@p (G3728@quasi G3740@q G3732@lev)) (G3720@quasicons (G3720@quasicons (G3700@datum 'unquote) (G3728@quasi G373f@p (- G3732@lev '1))) (G3728@quasi G3740@q G3732@lev)))) G373d@ls/false) ((lambda (G3743@t) ((lambda (G3745@ls/false) (if G3745@ls/false (apply (lambda (G3747@p G3748@q) (if (= G3732@lev '0) (G3722@quasiappend G3747@p (G3728@quasi G3748@q G3732@lev)) (G3720@quasicons (G3720@quasicons (G3700@datum 'unquote-splicing) (G3728@quasi G3747@p (- G3732@lev '1))) (G3728@quasi G3748@q G3732@lev)))) G3745@ls/false) ((lambda (G374b@t) ((lambda (G374d@ls/false) (if G374d@ls/false (apply (lambda (G374f@p) (G3720@quasicons (G3700@datum 'quasiquote) (G3728@quasi (list G374f@p) (+ G3732@lev '1)))) G374d@ls/false) ((lambda (G3751@t) ((lambda (G3753@ls/false) (if G3753@ls/false (apply (lambda (G3755@p G3756@q) (G3720@quasicons (G3728@quasi G3755@p G3732@lev) (G3728@quasi G3756@q G3732@lev))) G3753@ls/false) ((lambda (G3759@t) ((lambda (G375b@ls/false) (if (and G375b@ls/false (apply (lambda (G375d@x) (not (G2d38@stx? G375d@x))) G375b@ls/false)) (apply (lambda (G375f@x) (G3724@quasivector (G3726@vquasi G375f@x G3732@lev))) G375b@ls/false) ((lambda (G3761@t) ((lambda (G3763@ls/false) (if G3763@ls/false (apply (lambda (G3765@p) (list (G2ef9@scheme-stx 'quote) G3765@p)) G3763@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3761@t))) (G2f6f@syntax-dispatch G3761@t 'any))) G3759@t))) (G2f6f@syntax-dispatch G3759@t '#(vector each-any)))) G3751@t))) (G2f6f@syntax-dispatch G3751@t '(any . any)))) G374b@t))) (G2f6f@syntax-dispatch G374b@t '(#(scheme-id quasiquote) any)))) G3743@t))) (G2f6f@syntax-dispatch G3743@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G373b@t))) (G2f6f@syntax-dispatch G373b@t '((#(scheme-id unquote) . each-any) . any)))) G3735@t))) (G2f6f@syntax-dispatch G3735@t '(#(scheme-id unquote) any)))) G3731@p))) (lambda (G3729@x) ((lambda (G372b@t) ((lambda (G372d@ls/false) (if G372d@ls/false (apply (lambda (G372f@e) (G3728@quasi G372f@e '0)) G372d@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G372b@t))) (G2f6f@syntax-dispatch G372b@t '(_ any)))) G3729@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f5f@quasisyntax-macro ((lambda () ((lambda (G3806@quasi) (begin (set! G3806@quasi (lambda (G381e@p G381f@lev) ((lambda (G3822@t) ((lambda (G3824@ls/false) (if G3824@ls/false (apply (lambda (G3826@p) (if (= G381f@lev '0) ((lambda (G3828@g) (values (list G3828@g) (list G3826@p) G3828@g)) (gensym)) (call-with-values (lambda () (G3806@quasi G3826@p (- G381f@lev '1))) (lambda (G382d@G382a G382e@G382b G382f@G382c) ((lambda (G3833@p G3834@rhs* G3835@lhs*) (values G3835@lhs* G3834@rhs* (list 'unsyntax G3833@p))) G382f@G382c G382e@G382b G382d@G382a))))) G3824@ls/false) ((lambda (G3839@t) ((lambda (G383b@ls/false) (if (and G383b@ls/false (apply (lambda () (= G381f@lev '0)) G383b@ls/false)) (apply (lambda () (G305c@syntax-violation '#f '"incorrect use of unsyntax" G381e@p)) G383b@ls/false) ((lambda (G383d@t) ((lambda (G383f@ls/false) (if G383f@ls/false (apply (lambda (G3841@p* G3842@q) (call-with-values (lambda () (G3806@quasi G3842@q G381f@lev)) (lambda (G3848@G3845 G3849@G3846 G384a@G3847) ((lambda (G384e@q G384f@rhs* G3850@lhs*) (if (= G381f@lev '0) ((lambda (G3854@g*) (values (append G3854@g* G3850@lhs*) (append G3841@p* G384f@rhs*) (append G3854@g* G384e@q))) (map (lambda (G3856@x) (gensym)) G3841@p*)) (call-with-values (lambda () (G3806@quasi G3841@p* (- G381f@lev '1))) (lambda (G385b@G3858 G385c@G3859 G385d@G385a) ((lambda (G3861@p* G3862@rhs2* G3863@lhs2*) (values (append G3863@lhs2* G3850@lhs*) (append G3862@rhs2* G384f@rhs*) (cons (cons 'unsyntax G3861@p*) G384e@q))) G385d@G385a G385c@G3859 G385b@G3858))))) G384a@G3847 G3849@G3846 G3848@G3845)))) G383f@ls/false) ((lambda (G3867@t) ((lambda (G3869@ls/false) (if G3869@ls/false (apply (lambda (G386b@p* G386c@q) (call-with-values (lambda () (G3806@quasi G386c@q G381f@lev)) (lambda (G3872@G386f G3873@G3870 G3874@G3871) ((lambda (G3878@q G3879@rhs* G387a@lhs*) (if (= G381f@lev '0) ((lambda (G387e@g*) (values (append (map (lambda (G3880@g) (cons G3880@g '(...))) G387e@g*) G387a@lhs*) (append G386b@p* G3879@rhs*) (append (apply append (map (lambda (G3882@g) (cons G3882@g '(...))) G387e@g*)) G3878@q))) (map (lambda (G3884@x) (gensym)) G386b@p*)) (call-with-values (lambda () (G3806@quasi G386b@p* (- G381f@lev '1))) (lambda (G3889@G3886 G388a@G3887 G388b@G3888) ((lambda (G388f@p* G3890@rhs2* G3891@lhs2*) (values (append G3891@lhs2* G387a@lhs*) (append G3890@rhs2* G3879@rhs*) (cons (cons 'unsyntax-splicing G388f@p*) G3878@q))) G388b@G3888 G388a@G3887 G3889@G3886))))) G3874@G3871 G3873@G3870 G3872@G386f)))) G3869@ls/false) ((lambda (G3895@t) ((lambda (G3897@ls/false) (if (and G3897@ls/false (apply (lambda () (= G381f@lev '0)) G3897@ls/false)) (apply (lambda () (G305c@syntax-violation '#f '"incorrect use of unsyntax-splicing" G381e@p)) G3897@ls/false) ((lambda (G3899@t) ((lambda (G389b@ls/false) (if G389b@ls/false (apply (lambda (G389d@p) (call-with-values (lambda () (G3806@quasi G389d@p (+ G381f@lev '1))) (lambda (G38a2@G389f G38a3@G38a0 G38a4@G38a1) ((lambda (G38a8@p G38a9@rhs* G38aa@lhs*) (values G38aa@lhs* G38a9@rhs* (list 'quasisyntax G38a8@p))) G38a4@G38a1 G38a3@G38a0 G38a2@G389f)))) G389b@ls/false) ((lambda (G38ae@t) ((lambda (G38b0@ls/false) (if G38b0@ls/false (apply (lambda (G38b2@p G38b3@q) (call-with-values (lambda () (G3806@quasi G38b2@p G381f@lev)) (lambda (G38bc@G38b6 G38bd@G38b7 G38be@G38b8) (call-with-values (lambda () (G3806@quasi G38b3@q G381f@lev)) (lambda (G38c2@G38b9 G38c3@G38ba G38c4@G38bb) ((lambda (G38c8@q G38c9@rhs2* G38ca@lhs2* G38cb@p G38cc@rhs* G38cd@lhs*) (values (append G38ca@lhs2* G38cd@lhs*) (append G38c9@rhs2* G38cc@rhs*) (cons G38cb@p G38c8@q))) G38c4@G38bb G38c3@G38ba G38c2@G38b9 G38be@G38b8 G38bd@G38b7 G38bc@G38b6)))))) G38b0@ls/false) ((lambda (G38d4@t) ((lambda (G38d6@ls/false) (if G38d6@ls/false (apply (lambda (G38d8@x*) (call-with-values (lambda () (G3806@quasi G38d8@x* G381f@lev)) (lambda (G38dd@G38da G38de@G38db G38df@G38dc) ((lambda (G38e3@x* G38e4@rhs* G38e5@lhs*) (values G38e5@lhs* G38e4@rhs* (list->vector G38e3@x*))) G38df@G38dc G38de@G38db G38dd@G38da)))) G38d6@ls/false) ((lambda (G38e9@t) ((lambda (G38eb@ls/false) (if G38eb@ls/false (apply (lambda () (values '() '() G381e@p)) G38eb@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G38e9@t))) (G2f6f@syntax-dispatch G38e9@t '_))) G38d4@t))) (G2f6f@syntax-dispatch G38d4@t '#(vector each-any)))) G38ae@t))) (G2f6f@syntax-dispatch G38ae@t '(any . any)))) G3899@t))) (G2f6f@syntax-dispatch G3899@t '(#(scheme-id quasisyntax) any)))) G3895@t))) (G2f6f@syntax-dispatch G3895@t '#(scheme-id unsyntax-splicing)))) G3867@t))) (G2f6f@syntax-dispatch G3867@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G383d@t))) (G2f6f@syntax-dispatch G383d@t '((#(scheme-id unsyntax) . each-any) . any)))) G3839@t))) (G2f6f@syntax-dispatch G3839@t '#(scheme-id unsyntax)))) G3822@t))) (G2f6f@syntax-dispatch G3822@t '(#(scheme-id unsyntax) any)))) G381e@p))) (lambda (G3807@x) ((lambda (G3809@t) ((lambda (G380b@ls/false) (if G380b@ls/false (apply (lambda (G380d@e) (call-with-values (lambda () (G3806@quasi G380d@e '0)) (lambda (G3812@G380f G3813@G3810 G3814@G3811) ((lambda (G3818@v G3819@rhs* G381a@lhs*) (G2f25@bless (list 'syntax-case (cons 'list G3819@rhs*) '() (list G381a@lhs* (list 'syntax G3818@v))))) G3814@G3811 G3813@G3810 G3812@G380f)))) G380b@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3809@t))) (G2f6f@syntax-dispatch G3809@t '(_ any)))) G3807@x)))) '#f)))) (set! G2f61@define-struct-macro (lambda (G38ed@stx) (G305c@syntax-violation '#f '"define-struct not supported" G38ed@stx))) (set! G2f63@define-record-type-macro (lambda (G38ef@x) ((lambda (G38f2@id G38f4@get-record-name G38f6@get-record-constructor-name G38f8@get-record-predicate-name G38fa@get-clause G38fc@foo-rtd-code G38fe@parent-rtd-code G3900@parent-rcd-code G3902@foo-rcd-code G3904@get-protocol-code G3906@get-fields G3908@get-mutator-indices G390a@get-mutators G390c@get-accessors G390e@enumerate G3910@do-define-record G3912@verify-clauses) (begin (set! G38f2@id (lambda (G3ae5@ctxt . G3ae7@str*) (G3060@datum->syntax G3ae5@ctxt (string->symbol (apply string-append (map (lambda (G3ae9@x) (if (symbol? G3ae9@x) (symbol->string G3ae9@x) (if (string? G3ae9@x) G3ae9@x (assertion-violation 'define-record-type '"BUG")))) G3ae7@str*)))))) (set! G38f4@get-record-name (lambda (G3ad3@spec) ((lambda (G3ad5@t) ((lambda (G3ad7@ls/false) (if G3ad7@ls/false (apply (lambda (G3ad9@foo G3ada@make-foo G3adb@foo?) G3ad9@foo) G3ad7@ls/false) ((lambda (G3adf@t) ((lambda (G3ae1@ls/false) (if G3ae1@ls/false (apply (lambda (G3ae3@foo) G3ae3@foo) G3ae1@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3adf@t))) (G2f6f@syntax-dispatch G3adf@t 'any))) G3ad5@t))) (G2f6f@syntax-dispatch G3ad5@t '(any any any)))) G3ad3@spec))) (set! G38f6@get-record-constructor-name (lambda (G3abf@spec) ((lambda (G3ac1@t) ((lambda (G3ac3@ls/false) (if G3ac3@ls/false (apply (lambda (G3ac5@foo G3ac6@make-foo G3ac7@foo?) G3ac6@make-foo) G3ac3@ls/false) ((lambda (G3acb@t) ((lambda (G3acd@ls/false) (if (and G3acd@ls/false (apply (lambda (G3acf@foo) (G2d70@id? G3acf@foo)) G3acd@ls/false)) (apply (lambda (G3ad1@foo) (G38f2@id G3ad1@foo '"make-" (G2d86@stx->datum G3ad1@foo))) G3acd@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3acb@t))) (G2f6f@syntax-dispatch G3acb@t 'any))) G3ac1@t))) (G2f6f@syntax-dispatch G3ac1@t '(any any any)))) G3abf@spec))) (set! G38f8@get-record-predicate-name (lambda (G3aab@spec) ((lambda (G3aad@t) ((lambda (G3aaf@ls/false) (if G3aaf@ls/false (apply (lambda (G3ab1@foo G3ab2@make-foo G3ab3@foo?) G3ab3@foo?) G3aaf@ls/false) ((lambda (G3ab7@t) ((lambda (G3ab9@ls/false) (if (and G3ab9@ls/false (apply (lambda (G3abb@foo) (G2d70@id? G3abb@foo)) G3ab9@ls/false)) (apply (lambda (G3abd@foo) (G38f2@id G3abd@foo (G2d86@stx->datum G3abd@foo) '"?")) G3ab9@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3ab7@t))) (G2f6f@syntax-dispatch G3ab7@t 'any))) G3aad@t))) (G2f6f@syntax-dispatch G3aad@t '(any any any)))) G3aab@spec))) (set! G38fa@get-clause (lambda (G3a99@id G3a9a@ls) ((lambda (G3a9d@t) ((lambda (G3a9f@ls/false) (if G3a9f@ls/false (apply (lambda () '#f) G3a9f@ls/false) ((lambda (G3aa1@t) ((lambda (G3aa3@ls/false) (if G3aa3@ls/false (apply (lambda (G3aa5@x G3aa6@rest G3aa7@ls) (if (G2d78@free-id=? (G2f25@bless G3a99@id) G3aa5@x) (cons G3aa5@x G3aa6@rest) (G38fa@get-clause G3a99@id G3aa7@ls))) G3aa3@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3aa1@t))) (G2f6f@syntax-dispatch G3aa1@t '((any . any) . any)))) G3a9d@t))) (G2f6f@syntax-dispatch G3a9d@t '()))) G3a9a@ls))) (set! G38fc@foo-rtd-code (lambda (G3a47@name G3a48@clause* G3a49@parent-rtd-code) ((lambda (G3a4e@convert-field-spec*) (begin (set! G3a4e@convert-field-spec* (lambda (G3a7f@ls) (list->vector (map (lambda (G3a81@x) ((lambda (G3a83@t) ((lambda (G3a85@ls/false) (if G3a85@ls/false (apply (lambda (G3a87@name G3a88@rest) (list 'mutable G3a87@name)) G3a85@ls/false) ((lambda (G3a8b@t) ((lambda (G3a8d@ls/false) (if G3a8d@ls/false (apply (lambda (G3a8f@name G3a90@rest) (list 'immutable G3a8f@name)) G3a8d@ls/false) ((lambda (G3a93@t) ((lambda (G3a95@ls/false) (if G3a95@ls/false (apply (lambda (G3a97@name) (list 'immutable G3a97@name)) G3a95@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a93@t))) (G2f6f@syntax-dispatch G3a93@t 'any))) G3a8b@t))) (G2f6f@syntax-dispatch G3a8b@t '(#(scheme-id immutable) any . any)))) G3a83@t))) (G2f6f@syntax-dispatch G3a83@t '(#(scheme-id mutable) any . any)))) G3a81@x)) G3a7f@ls)))) ((lambda (G3a4f@uid-code G3a50@sealed? G3a51@opaque? G3a52@fields) (G2f25@bless (list 'make-record-type-descriptor (list 'quote G3a47@name) G3a49@parent-rtd-code G3a4f@uid-code G3a50@sealed? G3a51@opaque? G3a52@fields))) ((lambda (G3a57@t) ((lambda (G3a59@ls/false) (if G3a59@ls/false (apply (lambda () (list 'quote (gensym))) G3a59@ls/false) ((lambda (G3a5b@t) ((lambda (G3a5d@ls/false) (if G3a5d@ls/false (apply (lambda (G3a5f@uid) (list 'quote G3a5f@uid)) G3a5d@ls/false) ((lambda (G3a61@t) ((lambda (G3a63@ls/false) (if G3a63@ls/false (apply (lambda () '#f) G3a63@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a61@t))) (G2f6f@syntax-dispatch G3a61@t '_))) G3a5b@t))) (G2f6f@syntax-dispatch G3a5b@t '(_ any)))) G3a57@t))) (G2f6f@syntax-dispatch G3a57@t '(_)))) (G38fa@get-clause 'nongenerative G3a48@clause*)) ((lambda (G3a65@t) ((lambda (G3a67@ls/false) (if G3a67@ls/false (apply (lambda () '#t) G3a67@ls/false) ((lambda (G3a69@t) ((lambda (G3a6b@ls/false) (if G3a6b@ls/false (apply (lambda () '#f) G3a6b@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a69@t))) (G2f6f@syntax-dispatch G3a69@t '_))) G3a65@t))) (G2f6f@syntax-dispatch G3a65@t '(_ #(atom #t))))) (G38fa@get-clause 'sealed G3a48@clause*)) ((lambda (G3a6d@t) ((lambda (G3a6f@ls/false) (if G3a6f@ls/false (apply (lambda () '#t) G3a6f@ls/false) ((lambda (G3a71@t) ((lambda (G3a73@ls/false) (if G3a73@ls/false (apply (lambda () '#f) G3a73@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a71@t))) (G2f6f@syntax-dispatch G3a71@t '_))) G3a6d@t))) (G2f6f@syntax-dispatch G3a6d@t '(_ #(atom #t))))) (G38fa@get-clause 'opaque G3a48@clause*)) ((lambda (G3a75@t) ((lambda (G3a77@ls/false) (if G3a77@ls/false (apply (lambda (G3a79@field-spec*) (list 'quote (G3a4e@convert-field-spec* G3a79@field-spec*))) G3a77@ls/false) ((lambda (G3a7b@t) ((lambda (G3a7d@ls/false) (if G3a7d@ls/false (apply (lambda () ''#()) G3a7d@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a7b@t))) (G2f6f@syntax-dispatch G3a7b@t '_))) G3a75@t))) (G2f6f@syntax-dispatch G3a75@t '(_ . each-any)))) (G38fa@get-clause 'fields G3a48@clause*))))) '#f))) (set! G38fe@parent-rtd-code (lambda (G3a2f@clause*) ((lambda (G3a31@t) ((lambda (G3a33@ls/false) (if G3a33@ls/false (apply (lambda (G3a35@name) (list 'record-type-descriptor G3a35@name)) G3a33@ls/false) ((lambda (G3a37@t) ((lambda (G3a39@ls/false) (if G3a39@ls/false (apply (lambda () ((lambda (G3a3b@t) ((lambda (G3a3d@ls/false) (if G3a3d@ls/false (apply (lambda (G3a3f@rtd G3a40@rcd) G3a3f@rtd) G3a3d@ls/false) ((lambda (G3a43@t) ((lambda (G3a45@ls/false) (if G3a45@ls/false (apply (lambda () '#f) G3a45@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a43@t))) (G2f6f@syntax-dispatch G3a43@t '#(atom #f)))) G3a3b@t))) (G2f6f@syntax-dispatch G3a3b@t '(_ any any)))) (G38fa@get-clause 'parent-rtd G3a2f@clause*))) G3a39@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a37@t))) (G2f6f@syntax-dispatch G3a37@t '#(atom #f)))) G3a31@t))) (G2f6f@syntax-dispatch G3a31@t '(_ any)))) (G38fa@get-clause 'parent G3a2f@clause*)))) (set! G3900@parent-rcd-code (lambda (G3a17@clause*) ((lambda (G3a19@t) ((lambda (G3a1b@ls/false) (if G3a1b@ls/false (apply (lambda (G3a1d@name) (list 'record-constructor-descriptor G3a1d@name)) G3a1b@ls/false) ((lambda (G3a1f@t) ((lambda (G3a21@ls/false) (if G3a21@ls/false (apply (lambda () ((lambda (G3a23@t) ((lambda (G3a25@ls/false) (if G3a25@ls/false (apply (lambda (G3a27@rtd G3a28@rcd) G3a28@rcd) G3a25@ls/false) ((lambda (G3a2b@t) ((lambda (G3a2d@ls/false) (if G3a2d@ls/false (apply (lambda () '#f) G3a2d@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a2b@t))) (G2f6f@syntax-dispatch G3a2b@t '#(atom #f)))) G3a23@t))) (G2f6f@syntax-dispatch G3a23@t '(_ any any)))) (G38fa@get-clause 'parent-rtd G3a17@clause*))) G3a21@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a1f@t))) (G2f6f@syntax-dispatch G3a1f@t '#(atom #f)))) G3a19@t))) (G2f6f@syntax-dispatch G3a19@t '(_ any)))) (G38fa@get-clause 'parent G3a17@clause*)))) (set! G3902@foo-rcd-code (lambda (G3a0f@clause* G3a10@foo-rtd G3a11@protocol G3a12@parent-rcd-code) (list 'make-record-constructor-descriptor G3a10@foo-rtd G3a12@parent-rcd-code G3a11@protocol))) (set! G3904@get-protocol-code (lambda (G3a03@clause*) ((lambda (G3a05@t) ((lambda (G3a07@ls/false) (if G3a07@ls/false (apply (lambda (G3a09@expr) G3a09@expr) G3a07@ls/false) ((lambda (G3a0b@t) ((lambda (G3a0d@ls/false) (if G3a0d@ls/false (apply (lambda () '#f) G3a0d@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3a0b@t))) (G2f6f@syntax-dispatch G3a0b@t '_))) G3a05@t))) (G2f6f@syntax-dispatch G3a05@t '(_ any)))) (G38fa@get-clause 'protocol G3a03@clause*)))) (set! G3906@get-fields (lambda (G39f1@clause*) ((lambda (G39f3@t) ((lambda (G39f5@ls/false) (if G39f5@ls/false (apply (lambda () '()) G39f5@ls/false) ((lambda (G39f7@t) ((lambda (G39f9@ls/false) (if G39f9@ls/false (apply (lambda (G39fb@f*) G39fb@f*) G39f9@ls/false) ((lambda (G39fd@t) ((lambda (G39ff@ls/false) (if G39ff@ls/false (apply (lambda (G3a01@rest) (G3906@get-fields G3a01@rest)) G39ff@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G39fd@t))) (G2f6f@syntax-dispatch G39fd@t '(_ . any)))) G39f7@t))) (G2f6f@syntax-dispatch G39f7@t '((#(scheme-id fields) . each-any) . _)))) G39f3@t))) (G2f6f@syntax-dispatch G39f3@t '()))) G39f1@clause*))) (set! G3908@get-mutator-indices (lambda (G39d9@fields) ((letrec ((G39db@f (lambda (G39dd@fields G39de@i) ((lambda (G39e1@t) ((lambda (G39e3@ls/false) (if G39e3@ls/false (apply (lambda () '()) G39e3@ls/false) ((lambda (G39e5@t) ((lambda (G39e7@ls/false) (if G39e7@ls/false (apply (lambda (G39e9@rest) (cons G39de@i (G39db@f G39e9@rest (+ G39de@i '1)))) G39e7@ls/false) ((lambda (G39eb@t) ((lambda (G39ed@ls/false) (if G39ed@ls/false (apply (lambda (G39ef@rest) (G39db@f G39ef@rest (+ G39de@i '1))) G39ed@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G39eb@t))) (G2f6f@syntax-dispatch G39eb@t '(_ . any)))) G39e5@t))) (G2f6f@syntax-dispatch G39e5@t '((#(scheme-id mutable) . _) . any)))) G39e1@t))) (G2f6f@syntax-dispatch G39e1@t '()))) G39dd@fields)))) G39db@f) G39d9@fields '0))) (set! G390a@get-mutators (lambda (G39af@foo G39b0@fields) ((lambda (G39b4@gen-name) (begin (set! G39b4@gen-name (lambda (G39d7@x) (G3060@datum->syntax G39af@foo (string->symbol (string-append (symbol->string (G3062@syntax->datum G39af@foo)) '"-" (symbol->string (G3062@syntax->datum G39d7@x)) '"-set!"))))) ((letrec ((G39b5@f (lambda (G39b7@fields) ((lambda (G39b9@t) ((lambda (G39bb@ls/false) (if G39bb@ls/false (apply (lambda () '()) G39bb@ls/false) ((lambda (G39bd@t) ((lambda (G39bf@ls/false) (if G39bf@ls/false (apply (lambda (G39c1@name G39c2@accessor G39c3@mutator G39c4@rest) (cons G39c3@mutator (G39b5@f G39c4@rest))) G39bf@ls/false) ((lambda (G39c9@t) ((lambda (G39cb@ls/false) (if G39cb@ls/false (apply (lambda (G39cd@name G39ce@rest) (cons (G39b4@gen-name G39cd@name) (G39b5@f G39ce@rest))) G39cb@ls/false) ((lambda (G39d1@t) ((lambda (G39d3@ls/false) (if G39d3@ls/false (apply (lambda (G39d5@rest) (G39b5@f G39d5@rest)) G39d3@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G39d1@t))) (G2f6f@syntax-dispatch G39d1@t '(_ . any)))) G39c9@t))) (G2f6f@syntax-dispatch G39c9@t '((#(scheme-id mutable) any) . any)))) G39bd@t))) (G2f6f@syntax-dispatch G39bd@t '((#(scheme-id mutable) any any any) . any)))) G39b9@t))) (G2f6f@syntax-dispatch G39b9@t '()))) G39b7@fields)))) G39b5@f) G39b0@fields))) '#f))) (set! G390c@get-accessors (lambda (G396b@foo G396c@fields) ((lambda (G3970@gen-name) (begin (set! G3970@gen-name (lambda (G39ad@x) (G3060@datum->syntax G396b@foo (string->symbol (string-append (symbol->string (G3062@syntax->datum G396b@foo)) '"-" (symbol->string (G3062@syntax->datum G39ad@x))))))) (map (lambda (G3971@field) ((lambda (G3973@t) ((lambda (G3975@ls/false) (if (and G3975@ls/false (apply (lambda (G3977@name G3978@accessor G3979@mutator) (G2d70@id? G3978@accessor)) G3975@ls/false)) (apply (lambda (G397d@name G397e@accessor G397f@mutator) G397e@accessor) G3975@ls/false) ((lambda (G3983@t) ((lambda (G3985@ls/false) (if (and G3985@ls/false (apply (lambda (G3987@name G3988@accessor) (G2d70@id? G3988@accessor)) G3985@ls/false)) (apply (lambda (G398b@name G398c@accessor) G398c@accessor) G3985@ls/false) ((lambda (G398f@t) ((lambda (G3991@ls/false) (if (and G3991@ls/false (apply (lambda (G3993@name) (G2d70@id? G3993@name)) G3991@ls/false)) (apply (lambda (G3995@name) (G3970@gen-name G3995@name)) G3991@ls/false) ((lambda (G3997@t) ((lambda (G3999@ls/false) (if (and G3999@ls/false (apply (lambda (G399b@name) (G2d70@id? G399b@name)) G3999@ls/false)) (apply (lambda (G399d@name) (G3970@gen-name G399d@name)) G3999@ls/false) ((lambda (G399f@t) ((lambda (G39a1@ls/false) (if (and G39a1@ls/false (apply (lambda (G39a3@name) (G2d70@id? G39a3@name)) G39a1@ls/false)) (apply (lambda (G39a5@name) (G3970@gen-name G39a5@name)) G39a1@ls/false) ((lambda (G39a7@t) ((lambda (G39a9@ls/false) (if G39a9@ls/false (apply (lambda (G39ab@others) (G305c@syntax-violation '#f '"invalid field spec" G3971@field)) G39a9@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G39a7@t))) (G2f6f@syntax-dispatch G39a7@t 'any))) G399f@t))) (G2f6f@syntax-dispatch G399f@t 'any))) G3997@t))) (G2f6f@syntax-dispatch G3997@t '(#(scheme-id immutable) any)))) G398f@t))) (G2f6f@syntax-dispatch G398f@t '(#(scheme-id mutable) any)))) G3983@t))) (G2f6f@syntax-dispatch G3983@t '(#(scheme-id immutable) any any)))) G3973@t))) (G2f6f@syntax-dispatch G3973@t '(#(scheme-id mutable) any any any)))) G3971@field)) G396c@fields))) '#f))) (set! G390e@enumerate (lambda (G3963@ls) ((letrec ((G3965@f (lambda (G3967@ls G3968@i) (if (null? G3967@ls) '() (cons G3968@i (G3965@f (cdr G3967@ls) (+ G3968@i '1))))))) G3965@f) G3963@ls '0))) (set! G3910@do-define-record (lambda (G393b@namespec G393c@clause*) ((lambda (G393f@foo) ((lambda (G3941@foo-rtd) ((lambda (G3943@foo-rcd) ((lambda (G3945@protocol) ((lambda (G3947@make-foo) ((lambda (G3949@fields) ((lambda (G394b@idx*) ((lambda (G394d@foo-x*) ((lambda (G394f@set-foo-x!*) ((lambda (G3951@set-foo-idx*) ((lambda (G3953@foo?) ((lambda (G3955@foo-rtd-code) ((lambda (G3957@foo-rcd-code) ((lambda (G3959@protocol-code) ((lambda () (G2f25@bless (cons 'begin (cons (list 'define G3941@foo-rtd G3955@foo-rtd-code) (cons (list 'define G3945@protocol G3959@protocol-code) (cons (list 'define G3943@foo-rcd G3957@foo-rcd-code) (cons (list 'define-syntax G393f@foo (list 'list ''$rtd (list 'syntax G3941@foo-rtd) (list 'syntax G3943@foo-rcd))) (cons (list 'define G3953@foo? (list 'record-predicate G3941@foo-rtd)) (cons (list 'define G3947@make-foo (list 'record-constructor G3943@foo-rcd)) (append (map (lambda (G395b@foo-x G395c@idx) (list 'define G395b@foo-x (list 'record-accessor G3941@foo-rtd G395c@idx))) G394d@foo-x* G394b@idx*) (map (lambda (G395f@set-foo-x! G3960@idx) (list 'define G395f@set-foo-x! (list 'record-mutator G3941@foo-rtd G3960@idx))) G394f@set-foo-x!* G3951@set-foo-idx*))))))))))))) (G3904@get-protocol-code G393c@clause*))) (G3902@foo-rcd-code G393c@clause* G3941@foo-rtd G3945@protocol (G3900@parent-rcd-code G393c@clause*)))) (G38fc@foo-rtd-code G393f@foo G393c@clause* (G38fe@parent-rtd-code G393c@clause*)))) (G38f8@get-record-predicate-name G393b@namespec))) (G3908@get-mutator-indices G3949@fields))) (G390a@get-mutators G393f@foo G3949@fields))) (G390c@get-accessors G393f@foo G3949@fields))) (G390e@enumerate G3949@fields))) (G3906@get-fields G393c@clause*))) (G38f6@get-record-constructor-name G393b@namespec))) (gensym))) (gensym))) (gensym))) (G38f4@get-record-name G393b@namespec)))) (set! G3912@verify-clauses (lambda (G391b@x G391c@cls*) ((lambda (G3920@valid-kwds G3922@free-id-member?) (begin (set! G3920@valid-kwds (map G2f25@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3922@free-id-member? (lambda (G3937@x G3938@ls) (and (pair? G3938@ls) (or (G2d78@free-id=? G3937@x (car G3938@ls)) (G3922@free-id-member? G3937@x (cdr G3938@ls)))))) ((letrec ((G3923@f (lambda (G3925@cls* G3926@seen*) (if (not (null? G3925@cls*)) ((lambda (G3929@t) ((lambda (G392b@ls/false) (if G392b@ls/false (apply (lambda (G392d@kwd G392e@rest) (if (or (not (G2d70@id? G392d@kwd)) (not (G3922@free-id-member? G392d@kwd G3920@valid-kwds))) (G305c@syntax-violation '#f '"not a valid define-record-type keyword" G392d@kwd) (if (G2d7e@bound-id-member? G392d@kwd G3926@seen*) (G305c@syntax-violation '#f '"duplicate use of keyword " G391b@x G392d@kwd) (G3923@f (cdr G3925@cls*) (cons G392d@kwd G3926@seen*))))) G392b@ls/false) ((lambda (G3931@t) ((lambda (G3933@ls/false) (if G3933@ls/false (apply (lambda (G3935@cls) (G305c@syntax-violation '#f '"malformed define-record-type clause" G3935@cls)) G3933@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3931@t))) (G2f6f@syntax-dispatch G3931@t 'any))) G3929@t))) (G2f6f@syntax-dispatch G3929@t '(any . any)))) (car G3925@cls*)) (void))))) G3923@f) G391c@cls* '()))) '#f '#f))) ((lambda (G3913@t) ((lambda (G3915@ls/false) (if G3915@ls/false (apply (lambda (G3917@namespec G3918@clause*) (begin (G3912@verify-clauses G38ef@x G3918@clause*) (G3910@do-define-record G3917@namespec G3918@clause*))) G3915@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3913@t))) (G2f6f@syntax-dispatch G3913@t '(_ any . each-any)))) G38ef@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f65@define-condition-type-macro (lambda (G3aeb@x) ((lambda (G3aee@mkname) (begin (set! G3aee@mkname (lambda (G3b1b@name G3b1c@suffix) (G3060@datum->syntax G3b1b@name (string->symbol (string-append (symbol->string (G3062@syntax->datum G3b1b@name)) G3b1c@suffix))))) ((lambda (G3aef@t) ((lambda (G3af1@ls/false) (if (and G3af1@ls/false (apply (lambda (G3af3@ctxt G3af4@name G3af5@super G3af6@constructor G3af7@predicate G3af8@field* G3af9@accessor*) (and (G2d70@id? G3af4@name) (G2d70@id? G3af5@super) (G2d70@id? G3af6@constructor) (G2d70@id? G3af7@predicate) (for-all G2d70@id? G3af8@field*) (for-all G2d70@id? G3af9@accessor*))) G3af1@ls/false)) (apply (lambda (G3b01@ctxt G3b02@name G3b03@super G3b04@constructor G3b05@predicate G3b06@field* G3b07@accessor*) ((lambda (G3b0f@aux-accessor*) (G2f25@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3b02@name G3b04@constructor (gensym)) (cons (list 'parent G3b03@super) (cons (cons 'fields (map (lambda (G3b11@field G3b12@aux) (list 'immutable G3b11@field G3b12@aux)) G3b06@field* G3b0f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3b05@predicate (list 'condition-predicate (list 'record-type-descriptor G3b02@name))) (map (lambda (G3b15@accessor G3b16@aux) (list 'define G3b15@accessor (list 'condition-accessor (list 'record-type-descriptor G3b02@name) G3b16@aux))) G3b07@accessor* G3b0f@aux-accessor*)))))) (map (lambda (G3b19@x) (gensym)) G3b07@accessor*))) G3af1@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3aef@t))) (G2f6f@syntax-dispatch G3aef@t '(any any any any any . #(each (any any)))))) G3aeb@x))) '#f))) (set! G2f67@incorrect-usage-macro (lambda (G3b1f@e) (G305c@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b1f@e))) (set! G2f69@parameterize-macro (lambda (G3b21@e) ((lambda (G3b23@t) ((lambda (G3b25@ls/false) (if G3b25@ls/false (apply (lambda (G3b27@b G3b28@b*) (G2f25@bless (cons 'let (cons '() (cons G3b27@b G3b28@b*))))) G3b25@ls/false) ((lambda (G3b2b@t) ((lambda (G3b2d@ls/false) (if G3b2d@ls/false (apply (lambda (G3b2f@olhs* G3b30@orhs* G3b31@b G3b32@b*) ((lambda (G3b37@lhs* G3b38@rhs*) (G2f25@bless (cons (list 'lambda (append G3b37@lhs* G3b38@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b3b@lhs G3b3c@rhs) (list 'let (list (list 't (list G3b3b@lhs))) (list G3b3b@lhs G3b3c@rhs) (cons 'set! (cons G3b3c@rhs '(t))))) G3b37@lhs* G3b38@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b31@b G3b32@b*))) '(swap)))))) (append G3b2f@olhs* G3b30@orhs*)))) (G3048@generate-temporaries G3b2f@olhs*) (G3048@generate-temporaries G3b30@orhs*))) G3b2d@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3b2b@t))) (G2f6f@syntax-dispatch G3b2b@t '(_ #(each (any any)) any . each-any)))) G3b23@t))) (G2f6f@syntax-dispatch G3b23@t '(_ () any . each-any)))) G3b21@e))) (set! G2f6b@foreign-call-transformer (lambda (G3b3f@e G3b40@r G3b41@mr) ((lambda (G3b45@t) ((lambda (G3b47@ls/false) (if G3b47@ls/false (apply (lambda (G3b49@name G3b4a@arg*) (cons 'foreign-call (cons (G2f93@chi-expr G3b49@name G3b40@r G3b41@mr) (G2f8f@chi-expr* G3b4a@arg* G3b40@r G3b41@mr)))) G3b47@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3b45@t))) (G2f6f@syntax-dispatch G3b45@t '(_ any . each-any)))) G3b3f@e))) (set! G2f6d@convert-pattern (lambda (G3b4d@pattern G3b4e@keys) ((lambda (G3b52@cvt* G3b54@cvt) (begin (set! G3b52@cvt* (lambda (G3be3@p* G3be4@n G3be5@ids) (if (null? G3be3@p*) (values '() G3be5@ids) (call-with-values (lambda () (G3b52@cvt* (cdr G3be3@p*) G3be4@n G3be5@ids)) (lambda (G3beb@G3be9 G3bec@G3bea) ((lambda (G3bef@ids G3bf0@y) (call-with-values (lambda () (G3b54@cvt (car G3be3@p*) G3be4@n G3bef@ids)) (lambda (G3bf5@G3bf3 G3bf6@G3bf4) ((lambda (G3bf9@ids G3bfa@x) (values (cons G3bfa@x G3bf0@y) G3bf9@ids)) G3bf6@G3bf4 G3bf5@G3bf3)))) G3bec@G3bea G3beb@G3be9)))))) (set! G3b54@cvt (lambda (G3b55@p G3b56@n G3b57@ids) ((lambda (G3b5b@t) ((lambda (G3b5d@ls/false) (if (and G3b5d@ls/false (apply (lambda (G3b5f@id) (G2d70@id? G3b5f@id)) G3b5d@ls/false)) (apply (lambda (G3b61@id) (if (G2d7e@bound-id-member? G3b55@p G3b4e@keys) (values (vector 'free-id G3b55@p) G3b57@ids) (if (G2d78@free-id=? G3b55@p (G2ef9@scheme-stx '_)) (values '_ G3b57@ids) (values 'any (cons (cons G3b55@p G3b56@n) G3b57@ids))))) G3b5d@ls/false) ((lambda (G3b63@t) ((lambda (G3b65@ls/false) (if (and G3b65@ls/false (apply (lambda (G3b67@p G3b68@dots) (G2f71@ellipsis? G3b68@dots)) G3b65@ls/false)) (apply (lambda (G3b6b@p G3b6c@dots) (call-with-values (lambda () (G3b54@cvt G3b6b@p (+ G3b56@n '1) G3b57@ids)) (lambda (G3b71@G3b6f G3b72@G3b70) ((lambda (G3b75@ids G3b76@p) (values (if (eq? G3b76@p 'any) 'each-any (vector 'each G3b76@p)) G3b75@ids)) G3b72@G3b70 G3b71@G3b6f)))) G3b65@ls/false) ((lambda (G3b79@t) ((lambda (G3b7b@ls/false) (if (and G3b7b@ls/false (apply (lambda (G3b7d@x G3b7e@dots G3b7f@ys G3b80@z) (G2f71@ellipsis? G3b7e@dots)) G3b7b@ls/false)) (apply (lambda (G3b85@x G3b86@dots G3b87@ys G3b88@z) (call-with-values (lambda () (G3b54@cvt G3b88@z G3b56@n G3b57@ids)) (lambda (G3b8f@G3b8d G3b90@G3b8e) ((lambda (G3b93@ids G3b94@z) (call-with-values (lambda () (G3b52@cvt* G3b87@ys G3b56@n G3b93@ids)) (lambda (G3b99@G3b97 G3b9a@G3b98) ((lambda (G3b9d@ids G3b9e@ys) (call-with-values (lambda () (G3b54@cvt G3b85@x (+ G3b56@n '1) G3b9d@ids)) (lambda (G3ba3@G3ba1 G3ba4@G3ba2) ((lambda (G3ba7@ids G3ba8@x) (values (vector 'each+ G3ba8@x (reverse G3b9e@ys) G3b94@z) G3ba7@ids)) G3ba4@G3ba2 G3ba3@G3ba1)))) G3b9a@G3b98 G3b99@G3b97)))) G3b90@G3b8e G3b8f@G3b8d)))) G3b7b@ls/false) ((lambda (G3bab@t) ((lambda (G3bad@ls/false) (if G3bad@ls/false (apply (lambda (G3baf@x G3bb0@y) (call-with-values (lambda () (G3b54@cvt G3bb0@y G3b56@n G3b57@ids)) (lambda (G3bb5@G3bb3 G3bb6@G3bb4) ((lambda (G3bb9@ids G3bba@y) (call-with-values (lambda () (G3b54@cvt G3baf@x G3b56@n G3bb9@ids)) (lambda (G3bbf@G3bbd G3bc0@G3bbe) ((lambda (G3bc3@ids G3bc4@x) (values (cons G3bc4@x G3bba@y) G3bc3@ids)) G3bc0@G3bbe G3bbf@G3bbd)))) G3bb6@G3bb4 G3bb5@G3bb3)))) G3bad@ls/false) ((lambda (G3bc7@t) ((lambda (G3bc9@ls/false) (if G3bc9@ls/false (apply (lambda () (values '() G3b57@ids)) G3bc9@ls/false) ((lambda (G3bcb@t) ((lambda (G3bcd@ls/false) (if (and G3bcd@ls/false (apply (lambda (G3bcf@p) (not (G2d38@stx? G3bcf@p))) G3bcd@ls/false)) (apply (lambda (G3bd1@p) (call-with-values (lambda () (G3b54@cvt G3bd1@p G3b56@n G3b57@ids)) (lambda (G3bd5@G3bd3 G3bd6@G3bd4) ((lambda (G3bd9@ids G3bda@p) (values (vector 'vector G3bda@p) G3bd9@ids)) G3bd6@G3bd4 G3bd5@G3bd3)))) G3bcd@ls/false) ((lambda (G3bdd@t) ((lambda (G3bdf@ls/false) (if G3bdf@ls/false (apply (lambda (G3be1@datum) (values (vector 'atom (G2d86@stx->datum G3be1@datum)) G3b57@ids)) G3bdf@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3bdd@t))) (G2f6f@syntax-dispatch G3bdd@t 'any))) G3bcb@t))) (G2f6f@syntax-dispatch G3bcb@t '#(vector each-any)))) G3bc7@t))) (G2f6f@syntax-dispatch G3bc7@t '()))) G3bab@t))) (G2f6f@syntax-dispatch G3bab@t '(any . any)))) G3b79@t))) (G2f6f@syntax-dispatch G3b79@t '(any any . #(each+ any () any))))) G3b63@t))) (G2f6f@syntax-dispatch G3b63@t '(any any)))) G3b5b@t))) (G2f6f@syntax-dispatch G3b5b@t 'any))) G3b55@p))) (G3b54@cvt G3b4d@pattern '0 '()))) '#f '#f))) (set! G2f6f@syntax-dispatch ((lambda () ((lambda (G3bfe@stx^ G3c00@match-each G3c02@match-each+ G3c04@match-each-any G3c06@match-empty G3c08@combine G3c0a@match* G3c0c@match) (begin (set! G3bfe@stx^ (lambda (G3cc7@e G3cc8@m* G3cc9@s* G3cca@ae*) (if (and (null? G3cc8@m*) (null? G3cc9@s*) (null? G3cca@ae*)) G3cc7@e (G2d58@mkstx G3cc7@e G3cc8@m* G3cc9@s* G3cca@ae*)))) (set! G3c00@match-each (lambda (G3caa@e G3cab@p G3cac@m* G3cad@s* G3cae@ae*) (if (pair? G3caa@e) ((lambda (G3cb4@first) (and G3cb4@first ((lambda (G3cb6@rest) (and G3cb6@rest (cons G3cb4@first G3cb6@rest))) (G3c00@match-each (cdr G3caa@e) G3cab@p G3cac@m* G3cad@s* G3cae@ae*)))) (G3c0c@match (car G3caa@e) G3cab@p G3cac@m* G3cad@s* G3cae@ae* '())) (if (null? G3caa@e) '() (if (G2d38@stx? G3caa@e) (and (not (G2cea@top-marked? G3cac@m*)) (call-with-values (lambda () (G2d56@join-wraps G3cac@m* G3cad@s* G3cae@ae* G3caa@e)) (lambda (G3cbb@G3cb8 G3cbc@G3cb9 G3cbd@G3cba) ((lambda (G3cc1@ae* G3cc2@s* G3cc3@m*) (G3c00@match-each (G2d3c@stx-expr G3caa@e) G3cab@p G3cc3@m* G3cc2@s* G3cc1@ae*)) G3cbd@G3cba G3cbc@G3cb9 G3cbb@G3cb8)))) (if (G2901@G282c@annotation? G3caa@e) (G3c00@match-each (G2903@G2830@annotation-expression G3caa@e) G3cab@p G3cac@m* G3cad@s* G3cae@ae*) '#f)))))) (set! G3c02@match-each+ (lambda (G3c70@e G3c71@x-pat G3c72@y-pat G3c73@z-pat G3c74@m* G3c75@s* G3c76@ae* G3c77@r) ((letrec ((G3c80@f (lambda (G3c82@e G3c83@m* G3c84@s* G3c85@ae*) (if (pair? G3c82@e) (call-with-values (lambda () (G3c80@f (cdr G3c82@e) G3c83@m* G3c84@s* G3c85@ae*)) (lambda (G3c8d@G3c8a G3c8e@G3c8b G3c8f@G3c8c) ((lambda (G3c93@r G3c94@y-pat G3c95@xr*) (if G3c93@r (if (null? G3c94@y-pat) ((lambda (G3c99@xr) (if G3c99@xr (values (cons G3c99@xr G3c95@xr*) G3c94@y-pat G3c93@r) (values '#f '#f '#f))) (G3c0c@match (car G3c82@e) G3c71@x-pat G3c83@m* G3c84@s* G3c85@ae* '())) (values '() (cdr G3c94@y-pat) (G3c0c@match (car G3c82@e) (car G3c94@y-pat) G3c83@m* G3c84@s* G3c85@ae* G3c93@r))) (values '#f '#f '#f))) G3c8f@G3c8c G3c8e@G3c8b G3c8d@G3c8a))) (if (G2d38@stx? G3c82@e) (if (G2cea@top-marked? G3c83@m*) (values '() G3c72@y-pat (G3c0c@match G3c82@e G3c73@z-pat G3c83@m* G3c84@s* G3c85@ae* G3c77@r)) (call-with-values (lambda () (G2d56@join-wraps G3c83@m* G3c84@s* G3c85@ae* G3c82@e)) (lambda (G3c9e@G3c9b G3c9f@G3c9c G3ca0@G3c9d) ((lambda (G3ca4@ae* G3ca5@s* G3ca6@m*) (G3c80@f (G2d3c@stx-expr G3c82@e) G3ca6@m* G3ca5@s* G3ca4@ae*)) G3ca0@G3c9d G3c9f@G3c9c G3c9e@G3c9b)))) (if (G2901@G282c@annotation? G3c82@e) (G3c80@f (G2903@G2830@annotation-expression G3c82@e) G3c83@m* G3c84@s* G3c85@ae*) (values '() G3c72@y-pat (G3c0c@match G3c82@e G3c73@z-pat G3c83@m* G3c84@s* G3c85@ae* G3c77@r)))))))) G3c80@f) G3c70@e G3c74@m* G3c75@s* G3c76@ae*))) (set! G3c04@match-each-any (lambda (G3c57@e G3c58@m* G3c59@s* G3c5a@ae*) (if (pair? G3c57@e) ((lambda (G3c5f@l) (and G3c5f@l (cons (G3bfe@stx^ (car G3c57@e) G3c58@m* G3c59@s* G3c5a@ae*) G3c5f@l))) (G3c04@match-each-any (cdr G3c57@e) G3c58@m* G3c59@s* G3c5a@ae*)) (if (null? G3c57@e) '() (if (G2d38@stx? G3c57@e) (and (not (G2cea@top-marked? G3c58@m*)) (call-with-values (lambda () (G2d56@join-wraps G3c58@m* G3c59@s* G3c5a@ae* G3c57@e)) (lambda (G3c64@G3c61 G3c65@G3c62 G3c66@G3c63) ((lambda (G3c6a@ae* G3c6b@s* G3c6c@m*) (G3c04@match-each-any (G2d3c@stx-expr G3c57@e) G3c6c@m* G3c6b@s* G3c6a@ae*)) G3c66@G3c63 G3c65@G3c62 G3c64@G3c61)))) (if (G2901@G282c@annotation? G3c57@e) (G3c04@match-each-any (G2903@G2830@annotation-expression G3c57@e) G3c58@m* G3c59@s* G3c5a@ae*) '#f)))))) (set! G3c06@match-empty (lambda (G3c51@p G3c52@r) (if (null? G3c51@p) G3c52@r (if (eq? G3c51@p '_) G3c52@r (if (eq? G3c51@p 'any) (cons '() G3c52@r) (if (pair? G3c51@p) (G3c06@match-empty (car G3c51@p) (G3c06@match-empty (cdr G3c51@p) G3c52@r)) (if (eq? G3c51@p 'each-any) (cons '() G3c52@r) ((lambda (G3c55@t) (if (memv G3c55@t '(each)) (G3c06@match-empty (vector-ref G3c51@p '1) G3c52@r) (if (memv G3c55@t '(each+)) (G3c06@match-empty (vector-ref G3c51@p '1) (G3c06@match-empty (reverse (vector-ref G3c51@p '2)) (G3c06@match-empty (vector-ref G3c51@p '3) G3c52@r))) (if (memv G3c55@t '(free-id atom)) G3c52@r (if (memv G3c55@t '(scheme-id atom)) G3c52@r (if (memv G3c55@t '(vector)) (G3c06@match-empty (vector-ref G3c51@p '1) G3c52@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c51@p))))))) (vector-ref G3c51@p '0))))))))) (set! G3c08@combine (lambda (G3c4d@r* G3c4e@r) (if (null? (car G3c4d@r*)) G3c4e@r (cons (map car G3c4d@r*) (G3c08@combine (map cdr G3c4d@r*) G3c4e@r))))) (set! G3c0a@match* (lambda (G3c2c@e G3c2d@p G3c2e@m* G3c2f@s* G3c30@ae* G3c31@r) (if (null? G3c2d@p) (and (null? G3c2c@e) G3c31@r) (if (pair? G3c2d@p) (and (pair? G3c2c@e) (G3c0c@match (car G3c2c@e) (car G3c2d@p) G3c2e@m* G3c2f@s* G3c30@ae* (G3c0c@match (cdr G3c2c@e) (cdr G3c2d@p) G3c2e@m* G3c2f@s* G3c30@ae* G3c31@r))) (if (eq? G3c2d@p 'each-any) ((lambda (G3c38@l) (and G3c38@l (cons G3c38@l G3c31@r))) (G3c04@match-each-any G3c2c@e G3c2e@m* G3c2f@s* G3c30@ae*)) ((lambda (G3c3a@t) (if (memv G3c3a@t '(each)) (if (null? G3c2c@e) (G3c06@match-empty (vector-ref G3c2d@p '1) G3c31@r) ((lambda (G3c3c@r*) (and G3c3c@r* (G3c08@combine G3c3c@r* G3c31@r))) (G3c00@match-each G3c2c@e (vector-ref G3c2d@p '1) G3c2e@m* G3c2f@s* G3c30@ae*))) (if (memv G3c3a@t '(free-id)) (and (symbol? G3c2c@e) (G2cea@top-marked? G3c2e@m*) (G2d78@free-id=? (G3bfe@stx^ G3c2c@e G3c2e@m* G3c2f@s* G3c30@ae*) (vector-ref G3c2d@p '1)) G3c31@r) (if (memv G3c3a@t '(scheme-id)) (and (symbol? G3c2c@e) (G2cea@top-marked? G3c2e@m*) (G2d78@free-id=? (G3bfe@stx^ G3c2c@e G3c2e@m* G3c2f@s* G3c30@ae*) (G2ef9@scheme-stx (vector-ref G3c2d@p '1))) G3c31@r) (if (memv G3c3a@t '(each+)) (call-with-values (lambda () (G3c02@match-each+ G3c2c@e (vector-ref G3c2d@p '1) (vector-ref G3c2d@p '2) (vector-ref G3c2d@p '3) G3c2e@m* G3c2f@s* G3c30@ae* G3c31@r)) (lambda (G3c41@G3c3e G3c42@G3c3f G3c43@G3c40) ((lambda (G3c47@r G3c48@y-pat G3c49@xr*) (and G3c47@r (null? G3c48@y-pat) (if (null? G3c49@xr*) (G3c06@match-empty (vector-ref G3c2d@p '1) G3c47@r) (G3c08@combine G3c49@xr* G3c47@r)))) G3c43@G3c40 G3c42@G3c3f G3c41@G3c3e))) (if (memv G3c3a@t '(atom)) (and (fast-equal? (vector-ref G3c2d@p '1) (G2d84@strip G3c2c@e G3c2e@m*)) G3c31@r) (if (memv G3c3a@t '(vector)) (and (vector? G3c2c@e) (G3c0c@match (vector->list G3c2c@e) (vector-ref G3c2d@p '1) G3c2e@m* G3c2f@s* G3c30@ae* G3c31@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c2d@p)))))))) (vector-ref G3c2d@p '0))))))) (set! G3c0c@match (lambda (G3c11@e G3c12@p G3c13@m* G3c14@s* G3c15@ae* G3c16@r) (if (not G3c16@r) '#f (if (eq? G3c12@p '_) G3c16@r (if (eq? G3c12@p 'any) (cons (G3bfe@stx^ G3c11@e G3c13@m* G3c14@s* G3c15@ae*) G3c16@r) (if (G2d38@stx? G3c11@e) (and (not (G2cea@top-marked? G3c13@m*)) (call-with-values (lambda () (G2d56@join-wraps G3c13@m* G3c14@s* G3c15@ae* G3c11@e)) (lambda (G3c20@G3c1d G3c21@G3c1e G3c22@G3c1f) ((lambda (G3c26@ae* G3c27@s* G3c28@m*) (G3c0c@match (G2d3c@stx-expr G3c11@e) G3c12@p G3c28@m* G3c27@s* G3c26@ae* G3c16@r)) G3c22@G3c1f G3c21@G3c1e G3c20@G3c1d)))) (if (G2901@G282c@annotation? G3c11@e) (G3c0c@match (G2903@G2830@annotation-expression G3c11@e) G3c12@p G3c13@m* G3c14@s* G3c15@ae* G3c16@r) (G3c0a@match* G3c11@e G3c12@p G3c13@m* G3c14@s* G3c15@ae* G3c16@r)))))))) (lambda (G3c0d@e G3c0e@p) (G3c0c@match G3c0d@e G3c0e@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f71@ellipsis? (lambda (G3ccf@x) (and (G2d70@id? G3ccf@x) (G2d78@free-id=? G3ccf@x (G2ef9@scheme-stx '...))))) (set! G2f73@underscore? (lambda (G3cd1@x) (and (G2d70@id? G3cd1@x) (G2d78@free-id=? G3cd1@x (G2ef9@scheme-stx '_))))) (set! G2f75@verify-literals (lambda (G3cd3@lits G3cd4@expr) (for-each (lambda (G3cd7@x) (if (or (not (G2d70@id? G3cd7@x)) (G2f71@ellipsis? G3cd7@x) (G2f73@underscore? G3cd7@x)) (G305c@syntax-violation '#f '"invalid literal" G3cd4@expr G3cd7@x) (void))) G3cd3@lits))) (set! G2f77@syntax-case-transformer ((lambda () ((lambda (G3cda@build-dispatch-call G3cdc@invalid-ids-error G3cde@gen-clause G3ce0@gen-syntax-case) (begin (set! G3cda@build-dispatch-call (lambda (G3d49@pvars G3d4a@expr G3d4b@y G3d4c@r G3d4d@mr) ((lambda (G3d53@ids G3d54@levels) ((lambda (G3d57@labels G3d58@new-vars) ((lambda (G3d5b@body) (list '(primitive apply) (G2cca@G2c08@build-lambda '#f G3d58@new-vars G3d5b@body) G3d4b@y)) (G2f93@chi-expr (G2d5c@add-subst (G2d2b@make-full-rib G3d53@ids G3d57@labels) G3d4a@expr) (append (map (lambda (G3d5d@label G3d5e@var G3d5f@level) (cons G3d5d@label (G2d90@make-binding 'syntax (cons G3d5e@var G3d5f@level)))) G3d57@labels G3d58@new-vars (map cdr G3d49@pvars)) G3d4c@r) G3d4d@mr))) (map G2cf0@gen-label G3d53@ids) (map G2cec@gen-lexical G3d53@ids))) (map car G3d49@pvars) (map cdr G3d49@pvars)))) (set! G3cdc@invalid-ids-error (lambda (G3d3d@id* G3d3e@e G3d3f@class) ((letrec ((G3d43@find (lambda (G3d45@id* G3d46@ok*) (if (null? G3d45@id*) (G305c@syntax-violation '#f '"invalid syntax" G3d3e@e) (if (G2d70@id? (car G3d45@id*)) (if (G2d7e@bound-id-member? (car G3d45@id*) G3d46@ok*) (G3056@syntax-error (car G3d45@id*) '"duplicate " G3d3f@class) (G3d43@find (cdr G3d45@id*) (cons (car G3d45@id*) G3d46@ok*))) (G3056@syntax-error (car G3d45@id*) '"invalid " G3d3f@class)))))) G3d43@find) G3d3d@id* '()))) (set! G3cde@gen-clause (lambda (G3d17@x G3d18@keys G3d19@clauses G3d1a@r G3d1b@mr G3d1c@pat G3d1d@fender G3d1e@expr) (call-with-values (lambda () (G2f6d@convert-pattern G3d1c@pat G3d18@keys)) (lambda (G3d29@G3d27 G3d2a@G3d28) ((lambda (G3d2d@pvars G3d2e@p) (if (not (G2d7c@distinct-bound-ids? (map car G3d2d@pvars))) (G3cdc@invalid-ids-error (map car G3d2d@pvars) G3d1c@pat '"pattern variable") (if (not (for-all (lambda (G3d31@x) (not (G2f71@ellipsis? (car G3d31@x)))) G3d2d@pvars)) (G305c@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d1c@pat) ((lambda (G3d33@y) ((lambda (G3d35@test) ((lambda (G3d37@conseq) ((lambda (G3d39@altern) (list (G2cca@G2c08@build-lambda '#f (list G3d33@y) (list 'if G3d35@test G3d37@conseq G3d39@altern)) (list '(primitive syntax-dispatch) G3d17@x (list 'quote G3d2e@p)))) (G3ce0@gen-syntax-case G3d17@x G3d18@keys G3d19@clauses G3d1a@r G3d1b@mr))) (G3cda@build-dispatch-call G3d2d@pvars G3d1e@expr G3d33@y G3d1a@r G3d1b@mr))) (if (eq? G3d1d@fender '#t) G3d33@y ((lambda (G3d3b@call) (list 'if G3d33@y G3d3b@call (list 'quote '#f))) (G3cda@build-dispatch-call G3d2d@pvars G3d1d@fender G3d33@y G3d1a@r G3d1b@mr))))) (G2cec@gen-lexical 'tmp))))) G3d2a@G3d28 G3d29@G3d27))))) (set! G3ce0@gen-syntax-case (lambda (G3cf5@x G3cf6@keys G3cf7@clauses G3cf8@r G3cf9@mr) (if (null? G3cf7@clauses) (list '(primitive syntax-error) G3cf5@x) ((lambda (G3cff@t) ((lambda (G3d01@ls/false) (if G3d01@ls/false (apply (lambda (G3d03@pat G3d04@expr) (if (and (G2d70@id? G3d03@pat) (not (G2d7e@bound-id-member? G3d03@pat G3cf6@keys)) (not (G2f71@ellipsis? G3d03@pat))) (if (G2d78@free-id=? G3d03@pat (G2ef9@scheme-stx '_)) (G2f93@chi-expr G3d04@expr G3cf8@r G3cf9@mr) ((lambda (G3d07@lab G3d08@lex) ((lambda (G3d0b@body) (list (G2cca@G2c08@build-lambda '#f (list G3d08@lex) G3d0b@body) G3cf5@x)) (G2f93@chi-expr (G2d5c@add-subst (G2d2b@make-full-rib (list G3d03@pat) (list G3d07@lab)) G3d04@expr) (cons (cons G3d07@lab (G2d90@make-binding 'syntax (cons G3d08@lex '0))) G3cf8@r) G3cf9@mr))) (G2cf0@gen-label G3d03@pat) (G2cec@gen-lexical G3d03@pat))) (G3cde@gen-clause G3cf5@x G3cf6@keys (cdr G3cf7@clauses) G3cf8@r G3cf9@mr G3d03@pat '#t G3d04@expr))) G3d01@ls/false) ((lambda (G3d0d@t) ((lambda (G3d0f@ls/false) (if G3d0f@ls/false (apply (lambda (G3d11@pat G3d12@fender G3d13@expr) (G3cde@gen-clause G3cf5@x G3cf6@keys (cdr G3cf7@clauses) G3cf8@r G3cf9@mr G3d11@pat G3d12@fender G3d13@expr)) G3d0f@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3d0d@t))) (G2f6f@syntax-dispatch G3d0d@t '(any any any)))) G3cff@t))) (G2f6f@syntax-dispatch G3cff@t '(any any)))) (car G3cf7@clauses))))) (lambda (G3ce1@e G3ce2@r G3ce3@mr) ((lambda (G3ce7@t) ((lambda (G3ce9@ls/false) (if G3ce9@ls/false (apply (lambda (G3ceb@expr G3cec@keys G3ced@clauses) (begin (G2f75@verify-literals G3cec@keys G3ce1@e) ((lambda (G3cf1@x) ((lambda (G3cf3@body) (list (G2cca@G2c08@build-lambda '#f (list G3cf1@x) G3cf3@body) (G2f93@chi-expr G3ceb@expr G3ce2@r G3ce3@mr))) (G3ce0@gen-syntax-case G3cf1@x G3cec@keys G3ced@clauses G3ce2@r G3ce3@mr))) (G2cec@gen-lexical 'tmp)))) G3ce9@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3ce7@t))) (G2f6f@syntax-dispatch G3ce7@t '(_ any each-any . each-any)))) G3ce1@e)))) '#f '#f '#f '#f)))) (set! G2f79@ellipsis-map (lambda (G3d63@proc G3d64@ls . G3d67@ls*) ((lambda (G3d6a@who) (begin (set! G3d6a@who '...) (begin (if (not (list? G3d64@ls)) (assertion-violation G3d6a@who '"not a list" G3d64@ls) (void)) (if (not (null? G3d67@ls*)) ((lambda (G3d6b@n) (for-each (lambda (G3d6d@x) (begin (if (not (list? G3d6d@x)) (assertion-violation G3d6a@who '"not a list" G3d6d@x) (void)) (if (not (= (length G3d6d@x) G3d6b@n)) (assertion-violation G3d6a@who '"length mismatch" G3d64@ls G3d6d@x) (void)))) G3d67@ls*)) (length G3d64@ls)) (void)) (apply map G3d63@proc G3d64@ls G3d67@ls*)))) '#f))) (set! G2f7b@syntax-transformer ((lambda () ((lambda (G3d70@gen-syntax G3d72@gen-ref G3d74@gen-append G3d76@gen-mappend G3d78@gen-map G3d7a@gen-cons G3d7c@gen-vector G3d7e@regen) (begin (set! G3d70@gen-syntax (lambda (G3de3@src G3de4@e G3de5@r G3de6@maps G3de7@ellipsis? G3de8@vec?) ((lambda (G3def@t) ((lambda (G3df1@ls/false) (if (and G3df1@ls/false (apply (lambda (G3df3@dots) (G3de7@ellipsis? G3df3@dots)) G3df1@ls/false)) (apply (lambda (G3df5@dots) (G305c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3de3@src)) G3df1@ls/false) ((lambda (G3df7@t) ((lambda (G3df9@ls/false) (if (and G3df9@ls/false (apply (lambda (G3dfb@id) (G2d70@id? G3dfb@id)) G3df9@ls/false)) (apply (lambda (G3dfd@id) ((lambda (G3dff@label) ((lambda (G3e01@b) ((lambda () (if (eq? (G2d92@binding-type G3e01@b) 'syntax) (call-with-values (lambda () ((lambda (G3e05@var.lev) (G3d72@gen-ref G3de3@src (car G3e05@var.lev) (cdr G3e05@var.lev) G3de6@maps)) (G2d94@binding-value G3e01@b))) (lambda (G3e07@G3e03 G3e08@G3e04) ((lambda (G3e0b@maps G3e0c@var) (values (list 'ref G3e0c@var) G3e0b@maps)) G3e08@G3e04 G3e07@G3e03))) (values (list 'quote G3de4@e) G3de6@maps))))) (G2d8e@label->binding G3dff@label G3de5@r))) (G2d8a@id->label G3de4@e))) G3df9@ls/false) ((lambda (G3e0f@t) ((lambda (G3e11@ls/false) (if (and G3e11@ls/false (apply (lambda (G3e13@dots G3e14@e) (G3de7@ellipsis? G3e13@dots)) G3e11@ls/false)) (apply (lambda (G3e17@dots G3e18@e) (if G3de8@vec? (G305c@syntax-violation '#f '"misplaced ellipsis in syntax form" G3de3@src) (G3d70@gen-syntax G3de3@src G3e18@e G3de5@r G3de6@maps (lambda (G3e1b@x) '#f) '#f))) G3e11@ls/false) ((lambda (G3e1d@t) ((lambda (G3e1f@ls/false) (if (and G3e1f@ls/false (apply (lambda (G3e21@x G3e22@dots G3e23@y) (G3de7@ellipsis? G3e22@dots)) G3e1f@ls/false)) (apply (lambda (G3e27@x G3e28@dots G3e29@y) ((letrec ((G3e2d@f (lambda (G3e2f@y G3e30@k) ((lambda (G3e33@t) ((lambda (G3e35@ls/false) (if G3e35@ls/false (apply (lambda () (G3e30@k G3de6@maps)) G3e35@ls/false) ((lambda (G3e37@t) ((lambda (G3e39@ls/false) (if (and G3e39@ls/false (apply (lambda (G3e3b@dots G3e3c@y) (G3de7@ellipsis? G3e3b@dots)) G3e39@ls/false)) (apply (lambda (G3e3f@dots G3e40@y) (G3e2d@f G3e40@y (lambda (G3e43@maps) (call-with-values (lambda () (G3e30@k (cons '() G3e43@maps))) (lambda (G3e47@G3e45 G3e48@G3e46) ((lambda (G3e4b@maps G3e4c@x) (if (null? (car G3e4b@maps)) (G305c@syntax-violation '#f '"extra ellipsis in syntax form" G3de3@src) (values (G3d76@gen-mappend G3e4c@x (car G3e4b@maps)) (cdr G3e4b@maps)))) G3e48@G3e46 G3e47@G3e45)))))) G3e39@ls/false) ((lambda (G3e4f@t) ((lambda (G3e51@ls/false) (if G3e51@ls/false (apply (lambda () (call-with-values (lambda () (G3d70@gen-syntax G3de3@src G3e2f@y G3de5@r G3de6@maps G3de7@ellipsis? G3de8@vec?)) (lambda (G3e55@G3e53 G3e56@G3e54) ((lambda (G3e59@maps G3e5a@y) (call-with-values (lambda () (G3e30@k G3e59@maps)) (lambda (G3e5f@G3e5d G3e60@G3e5e) ((lambda (G3e63@maps G3e64@x) (values (G3d74@gen-append G3e64@x G3e5a@y) G3e63@maps)) G3e60@G3e5e G3e5f@G3e5d)))) G3e56@G3e54 G3e55@G3e53)))) G3e51@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3e4f@t))) (G2f6f@syntax-dispatch G3e4f@t '_))) G3e37@t))) (G2f6f@syntax-dispatch G3e37@t '(any . any)))) G3e33@t))) (G2f6f@syntax-dispatch G3e33@t '()))) G3e2f@y)))) G3e2d@f) G3e29@y (lambda (G3e67@maps) (call-with-values (lambda () (G3d70@gen-syntax G3de3@src G3e27@x G3de5@r (cons '() G3e67@maps) G3de7@ellipsis? '#f)) (lambda (G3e6b@G3e69 G3e6c@G3e6a) ((lambda (G3e6f@maps G3e70@x) (if (null? (car G3e6f@maps)) (G305c@syntax-violation '#f '"extra ellipsis in syntax form" G3de3@src) (values (G3d78@gen-map G3e70@x (car G3e6f@maps)) (cdr G3e6f@maps)))) G3e6c@G3e6a G3e6b@G3e69)))))) G3e1f@ls/false) ((lambda (G3e73@t) ((lambda (G3e75@ls/false) (if G3e75@ls/false (apply (lambda (G3e77@x G3e78@y) (call-with-values (lambda () (G3d70@gen-syntax G3de3@src G3e77@x G3de5@r G3de6@maps G3de7@ellipsis? '#f)) (lambda (G3e7d@G3e7b G3e7e@G3e7c) ((lambda (G3e81@maps G3e82@xnew) (call-with-values (lambda () (G3d70@gen-syntax G3de3@src G3e78@y G3de5@r G3e81@maps G3de7@ellipsis? G3de8@vec?)) (lambda (G3e87@G3e85 G3e88@G3e86) ((lambda (G3e8b@maps G3e8c@ynew) (values (G3d7a@gen-cons G3de4@e G3e77@x G3e78@y G3e82@xnew G3e8c@ynew) G3e8b@maps)) G3e88@G3e86 G3e87@G3e85)))) G3e7e@G3e7c G3e7d@G3e7b)))) G3e75@ls/false) ((lambda (G3e8f@t) ((lambda (G3e91@ls/false) (if G3e91@ls/false (apply (lambda (G3e93@ls) (call-with-values (lambda () (G3d70@gen-syntax G3de3@src G3e93@ls G3de5@r G3de6@maps G3de7@ellipsis? '#t)) (lambda (G3e97@G3e95 G3e98@G3e96) ((lambda (G3e9b@maps G3e9c@lsnew) (values (G3d7c@gen-vector G3de4@e G3e93@ls G3e9c@lsnew) G3e9b@maps)) G3e98@G3e96 G3e97@G3e95)))) G3e91@ls/false) ((lambda (G3e9f@t) ((lambda (G3ea1@ls/false) (if G3ea1@ls/false (apply (lambda () (values (list 'quote G3de4@e) G3de6@maps)) G3ea1@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3e9f@t))) (G2f6f@syntax-dispatch G3e9f@t '_))) G3e8f@t))) (G2f6f@syntax-dispatch G3e8f@t '#(vector each-any)))) G3e73@t))) (G2f6f@syntax-dispatch G3e73@t '(any . any)))) G3e1d@t))) (G2f6f@syntax-dispatch G3e1d@t '(any any . any)))) G3e0f@t))) (G2f6f@syntax-dispatch G3e0f@t '(any any)))) G3df7@t))) (G2f6f@syntax-dispatch G3df7@t 'any))) G3def@t))) (G2f6f@syntax-dispatch G3def@t 'any))) G3de4@e))) (set! G3d72@gen-ref (lambda (G3dcb@src G3dcc@var G3dcd@level G3dce@maps) (if (= G3dcd@level '0) (values G3dcc@var G3dce@maps) (if (null? G3dce@maps) (G305c@syntax-violation '#f '"missing ellipsis in syntax form" G3dcb@src) (call-with-values (lambda () (G3d72@gen-ref G3dcb@src G3dcc@var (- G3dcd@level '1) (cdr G3dce@maps))) (lambda (G3dd5@G3dd3 G3dd6@G3dd4) ((lambda (G3dd9@outer-maps G3dda@outer-var) ((lambda (G3ddd@t) (if G3ddd@t ((lambda (G3ddf@b) (values (cdr G3ddf@b) G3dce@maps)) G3ddd@t) ((lambda (G3de1@inner-var) (values G3de1@inner-var (cons (cons (cons G3dda@outer-var G3de1@inner-var) (car G3dce@maps)) G3dd9@outer-maps))) (G2cec@gen-lexical 'tmp)))) (assq G3dda@outer-var (car G3dce@maps)))) G3dd6@G3dd4 G3dd5@G3dd3))))))) (set! G3d74@gen-append (lambda (G3dc7@x G3dc8@y) (if (fast-equal? G3dc8@y ''()) G3dc7@x (list 'append G3dc7@x G3dc8@y)))) (set! G3d76@gen-mappend (lambda (G3dc3@e G3dc4@map-env) (list 'apply '(primitive append) (G3d78@gen-map G3dc3@e G3dc4@map-env)))) (set! G3d78@gen-map (lambda (G3db1@e G3db2@map-env) ((lambda (G3db5@formals G3db6@actuals) (if (eq? (car G3db1@e) 'ref) (car G3db6@actuals) (if (for-all (lambda (G3db9@x) (and (eq? (car G3db9@x) 'ref) (memq (cadr G3db9@x) G3db5@formals))) (cdr G3db1@e)) ((lambda (G3dbb@args) (cons 'map (cons (list 'primitive (car G3db1@e)) G3dbb@args))) (map ((lambda (G3dbd@r) (lambda (G3dbf@x) (cdr (assq (cadr G3dbf@x) G3dbd@r)))) (map cons G3db5@formals G3db6@actuals)) (cdr G3db1@e))) (cons* 'map (list 'lambda G3db5@formals G3db1@e) G3db6@actuals)))) (map cdr G3db2@map-env) (map (lambda (G3dc1@x) (list 'ref (car G3dc1@x))) G3db2@map-env)))) (set! G3d7a@gen-cons (lambda (G3da1@e G3da2@x G3da3@y G3da4@xnew G3da5@ynew) ((lambda (G3dab@t) (if (memv G3dab@t '(quote)) (if (eq? (car G3da4@xnew) 'quote) ((lambda (G3dad@xnew G3dae@ynew) (if (and (eq? G3dad@xnew G3da2@x) (eq? G3dae@ynew G3da3@y)) (list 'quote G3da1@e) (list 'quote (cons G3dad@xnew G3dae@ynew)))) (cadr G3da4@xnew) (cadr G3da5@ynew)) (if (null? (cadr G3da5@ynew)) (list 'list G3da4@xnew) (list 'cons G3da4@xnew G3da5@ynew))) (if (memv G3dab@t '(list)) (cons 'list (cons G3da4@xnew (cdr G3da5@ynew))) (list 'cons G3da4@xnew G3da5@ynew)))) (car G3da5@ynew)))) (set! G3d7c@gen-vector (lambda (G3d9b@e G3d9c@ls G3d9d@lsnew) (if (eq? (car G3d9d@lsnew) 'quote) (if (eq? (cadr G3d9d@lsnew) G3d9c@ls) (list 'quote G3d9b@e) (list 'quote (list->vector (cadr G3d9d@lsnew)))) (if (eq? (car G3d9d@lsnew) 'list) (cons 'vector (cdr G3d9d@lsnew)) (list 'list->vector G3d9d@lsnew))))) (set! G3d7e@regen (lambda (G3d95@x) ((lambda (G3d97@t) (if (memv G3d97@t '(ref)) (cadr G3d95@x) (if (memv G3d97@t '(primitive)) (list 'primitive (cadr G3d95@x)) (if (memv G3d97@t '(quote)) (list 'quote (cadr G3d95@x)) (if (memv G3d97@t '(lambda)) (G2cca@G2c08@build-lambda '#f (cadr G3d95@x) (G3d7e@regen (caddr G3d95@x))) (if (memv G3d97@t '(map)) ((lambda (G3d99@ls) (cons '(primitive ellipsis-map) G3d99@ls)) (map G3d7e@regen (cdr G3d95@x))) (cons (list 'primitive (car G3d95@x)) (map G3d7e@regen (cdr G3d95@x))))))))) (car G3d95@x)))) (lambda (G3d7f@e G3d80@r G3d81@mr) ((lambda (G3d85@t) ((lambda (G3d87@ls/false) (if G3d87@ls/false (apply (lambda (G3d89@x) (call-with-values (lambda () (G3d70@gen-syntax G3d7f@e G3d89@x G3d80@r '() G2f71@ellipsis? '#f)) (lambda (G3d8d@G3d8b G3d8e@G3d8c) ((lambda (G3d91@maps G3d92@e) (G3d7e@regen G3d92@e)) G3d8e@G3d8c G3d8d@G3d8b)))) G3d87@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3d85@t))) (G2f6f@syntax-dispatch G3d85@t '(_ any)))) G3d7f@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f7d@core-macro-transformer (lambda (G3ea3@name) ((lambda (G3ea5@t) (if (memv G3ea5@t '(quote)) G2f1f@quote-transformer (if (memv G3ea5@t '(lambda)) G2f23@lambda-transformer (if (memv G3ea5@t '(case-lambda)) G2f21@case-lambda-transformer (if (memv G3ea5@t '(letrec)) G2f07@letrec-transformer (if (memv G3ea5@t '(letrec*)) G2f09@letrec*-transformer (if (memv G3ea5@t '(if)) G2f17@if-transformer (if (memv G3ea5@t '(and)) G2f19@and-transformer (if (memv G3ea5@t '(or)) G2f1b@or-transformer (if (memv G3ea5@t '(foreign-call)) G2f6b@foreign-call-transformer (if (memv G3ea5@t '(syntax-case)) G2f77@syntax-case-transformer (if (memv G3ea5@t '(syntax)) G2f7b@syntax-transformer (if (memv G3ea5@t '(type-descriptor)) G2f0d@type-descriptor-transformer (if (memv G3ea5@t '(record-type-descriptor)) G2f0f@record-type-descriptor-transformer (if (memv G3ea5@t '(record-constructor-descriptor)) G2f11@record-constructor-descriptor-transformer (if (memv G3ea5@t '(fluid-let-syntax)) G2f0b@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3ea3@name))))))))))))))))) G3ea3@name))) (set! G2f7f@file-options-macro (lambda (G3ea7@x) ((lambda (G3eaa@valid-option?) (begin (set! G3eaa@valid-option? (lambda (G3eb3@x) (and (G2d70@id? G3eb3@x) (memq (G2d72@id->sym G3eb3@x) '(no-fail no-create no-truncate))))) ((lambda (G3eab@t) ((lambda (G3ead@ls/false) (if (and G3ead@ls/false (apply (lambda (G3eaf@opt*) (and (for-all G3eaa@valid-option? G3eaf@opt*) (G290d@G28ae@file-options-spec (map G2d72@id->sym G3eaf@opt*)))) G3ead@ls/false)) (apply (lambda (G3eb1@opt*) (G2f25@bless (list 'quote (G290d@G28ae@file-options-spec (map G2d72@id->sym G3eb1@opt*))))) G3ead@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3eab@t))) (G2f6f@syntax-dispatch G3eab@t '(_ . each-any)))) G3ea7@x))) '#f))) (set! G2f81@symbol-macro (lambda (G3eb5@x G3eb6@set) ((lambda (G3eb9@t) ((lambda (G3ebb@ls/false) (if (and G3ebb@ls/false (apply (lambda (G3ebd@name) (and (G2d70@id? G3ebd@name) (memq (G2d72@id->sym G3ebd@name) G3eb6@set))) G3ebb@ls/false)) (apply (lambda (G3ebf@name) (G2f25@bless (list 'quote G3ebf@name))) G3ebb@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3eb9@t))) (G2f6f@syntax-dispatch G3eb9@t '(_ any)))) G3eb5@x))) (set! G2f83@macro-transformer (lambda (G3ec1@x) (if (procedure? G3ec1@x) G3ec1@x (if (symbol? G3ec1@x) ((lambda (G3ec3@t) (if (memv G3ec3@t '(define-record-type)) G2f63@define-record-type-macro (if (memv G3ec3@t '(define-struct)) G2f61@define-struct-macro (if (memv G3ec3@t '(include)) G2f57@include-macro (if (memv G3ec3@t '(cond)) G2f53@cond-macro (if (memv G3ec3@t '(let)) G2f2b@let-macro (if (memv G3ec3@t '(do)) G2f4b@do-macro (if (memv G3ec3@t '(or)) G2f4f@or-macro (if (memv G3ec3@t '(and)) G2f51@and-macro (if (memv G3ec3@t '(let*)) G2f4d@let*-macro (if (memv G3ec3@t '(let-values)) G2f2d@let-values-macro (if (memv G3ec3@t '(let*-values)) G2f2f@let*-values-macro (if (memv G3ec3@t '(syntax-rules)) G2f5b@syntax-rules-macro (if (memv G3ec3@t '(quasiquote)) G2f5d@quasiquote-macro (if (memv G3ec3@t '(quasisyntax)) G2f5f@quasisyntax-macro (if (memv G3ec3@t '(with-syntax)) G2f27@with-syntax-macro (if (memv G3ec3@t '(when)) G2f13@when-macro (if (memv G3ec3@t '(unless)) G2f15@unless-macro (if (memv G3ec3@t '(case)) G2f1d@case-macro (if (memv G3ec3@t '(identifier-syntax)) G2f49@identifier-syntax-macro (if (memv G3ec3@t '(time)) G2f41@time-macro (if (memv G3ec3@t '(delay)) G2f43@delay-macro (if (memv G3ec3@t '(assert)) G2f45@assert-macro (if (memv G3ec3@t '(endianness)) G2f47@endianness-macro (if (memv G3ec3@t '(guard)) G2f3d@guard-macro (if (memv G3ec3@t '(define-enumeration)) G2f3f@define-enumeration-macro (if (memv G3ec3@t '(trace-lambda)) G2f31@trace-lambda-macro (if (memv G3ec3@t '(trace-define)) G2f33@trace-define-macro (if (memv G3ec3@t '(trace-define-syntax)) G2f35@trace-define-syntax-macro (if (memv G3ec3@t '(trace-let-syntax)) G2f39@trace-let-syntax-macro (if (memv G3ec3@t '(trace-letrec-syntax)) G2f3b@trace-letrec-syntax-macro (if (memv G3ec3@t '(define-condition-type)) G2f65@define-condition-type-macro (if (memv G3ec3@t '(parameterize)) G2f69@parameterize-macro (if (memv G3ec3@t '(include-into)) G2f59@include-into-macro (if (memv G3ec3@t '(eol-style)) (lambda (G3ec5@x) (G2f81@symbol-macro G3ec5@x '(none lf cr crlf nel crnel ls))) (if (memv G3ec3@t '(error-handling-mode)) (lambda (G3ec7@x) (G2f81@symbol-macro G3ec7@x '(ignore raise replace))) (if (memv G3ec3@t '(buffer-mode)) (lambda (G3ec9@x) (G2f81@symbol-macro G3ec9@x '(none line block))) (if (memv G3ec3@t '(file-options)) G2f7f@file-options-macro (if (memv G3ec3@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f67@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ec1@x)))))))))))))))))))))))))))))))))))))))) G3ec1@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ec1@x))))) (set! G2f85@local-macro-transformer (lambda (G3ecb@x) (car G3ecb@x))) (set! G2f87@do-macro-call (lambda (G3ecd@transformer G3ece@expr) ((lambda (G3ed1@out) (begin ((letrec ((G3ed3@f (lambda (G3ed5@x) (if (not (G2d38@stx? G3ed5@x)) (if (pair? G3ed5@x) (begin (G3ed3@f (car G3ed5@x)) (G3ed3@f (cdr G3ed5@x))) (if (vector? G3ed5@x) (vector-for-each G3ed3@f G3ed5@x) (if (symbol? G3ed5@x) (G305c@syntax-violation '#f '"raw symbol encountered in output of macro" G3ece@expr G3ed5@x) (void)))) (void))))) G3ed3@f) G3ed1@out) (G2d5a@add-mark (G2d50@gen-mark) G3ed1@out G3ece@expr))) (G3ecd@transformer (G2d5a@add-mark G2d52@anti-mark G3ece@expr '#f))))) (set! G2f89@chi-macro (lambda (G3ed7@p G3ed8@e) (G2f87@do-macro-call (G2f83@macro-transformer G3ed7@p) G3ed8@e))) (set! G2f8b@chi-local-macro (lambda (G3edb@p G3edc@e) (G2f87@do-macro-call (G2f85@local-macro-transformer G3edb@p) G3edc@e))) (set! G2f8d@chi-global-macro (lambda (G3edf@p G3ee0@e) ((lambda (G3ee3@lib G3ee4@loc) (begin (G2b88@G2a30@visit-library G3ee3@lib) ((lambda (G3ee7@x) ((lambda (G3ee9@transformer) (G2f87@do-macro-call G3ee9@transformer G3ee0@e)) (if (procedure? G3ee7@x) G3ee7@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ee7@x)))) (symbol-value G3ee4@loc)))) (car G3edf@p) (cdr G3edf@p)))) (set! G2f8f@chi-expr* (lambda (G3eeb@e* G3eec@r G3eed@mr) (if (null? G3eeb@e*) '() ((lambda (G3ef1@e) (cons G3ef1@e (G2f8f@chi-expr* (cdr G3eeb@e*) G3eec@r G3eed@mr))) (G2f93@chi-expr (car G3eeb@e*) G3eec@r G3eed@mr))))) (set! G2f91@chi-application (lambda (G3ef3@e G3ef4@r G3ef5@mr) ((lambda (G3ef9@t) ((lambda (G3efb@ls/false) (if G3efb@ls/false (apply (lambda (G3efd@rator G3efe@rands) ((lambda (G3f01@rator) (cons G3f01@rator (G2f8f@chi-expr* G3efe@rands G3ef4@r G3ef5@mr))) (G2f93@chi-expr G3efd@rator G3ef4@r G3ef5@mr))) G3efb@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3ef9@t))) (G2f6f@syntax-dispatch G3ef9@t '(any . each-any)))) G3ef3@e))) (set! G2f93@chi-expr (lambda (G3f03@e G3f04@r G3f05@mr) (call-with-values (lambda () (G2d98@syntax-type G3f03@e G3f04@r)) (lambda (G3f0c@G3f09 G3f0d@G3f0a G3f0e@G3f0b) ((lambda (G3f12@kwd G3f13@value G3f14@type) ((lambda (G3f18@t) (if (memv G3f18@t '(core-macro)) ((lambda (G3f1a@transformer) (G3f1a@transformer G3f03@e G3f04@r G3f05@mr)) (G2f7d@core-macro-transformer G3f13@value)) (if (memv G3f18@t '(global)) ((lambda (G3f1c@lib) ((lambda (G3f1e@loc) ((lambda () (begin ((G2fdc@inv-collector) G3f1c@lib) G3f1e@loc)))) (cdr G3f13@value))) (car G3f13@value)) (if (memv G3f18@t '(core-prim)) ((lambda (G3f20@name) (list 'primitive G3f20@name)) G3f13@value) (if (memv G3f18@t '(call)) (G2f91@chi-application G3f03@e G3f04@r G3f05@mr) (if (memv G3f18@t '(lexical)) ((lambda (G3f22@lex) G3f22@lex) (G2efb@lexical-var G3f13@value)) (if (memv G3f18@t '(global-macro global-macro!)) (G2f93@chi-expr (G2f8d@chi-global-macro G3f13@value G3f03@e) G3f04@r G3f05@mr) (if (memv G3f18@t '(local-macro local-macro!)) (G2f93@chi-expr (G2f8b@chi-local-macro G3f13@value G3f03@e) G3f04@r G3f05@mr) (if (memv G3f18@t '(macro macro!)) (G2f93@chi-expr (G2f89@chi-macro G3f13@value G3f03@e) G3f04@r G3f05@mr) (if (memv G3f18@t '(constant)) ((lambda (G3f24@datum) (list 'quote G3f24@datum)) G3f13@value) (if (memv G3f18@t '(set!)) (G2f95@chi-set! G3f03@e G3f04@r G3f05@mr) (if (memv G3f18@t '(begin)) ((lambda (G3f26@t) ((lambda (G3f28@ls/false) (if G3f28@ls/false (apply (lambda (G3f2a@x G3f2b@x*) (G2ccd@G2c3e@build-sequence '#f (G2f8f@chi-expr* (cons G3f2a@x G3f2b@x*) G3f04@r G3f05@mr))) G3f28@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3f26@t))) (G2f6f@syntax-dispatch G3f26@t '(_ any . each-any)))) G3f03@e) (if (memv G3f18@t '(let-syntax letrec-syntax)) ((lambda (G3f2e@t) ((lambda (G3f30@ls/false) (if (and G3f30@ls/false (apply (lambda (G3f32@xlhs* G3f33@xrhs* G3f34@xbody G3f35@xbody*) (if (not (G2d7a@valid-bound-ids? G3f32@xlhs*)) (G305c@syntax-violation '#f '"invalid identifiers" G3f03@e) (void))) G3f30@ls/false)) (apply (lambda (G3f3a@xlhs* G3f3b@xrhs* G3f3c@xbody G3f3d@xbody*) ((lambda (G3f42@xlab*) ((lambda (G3f44@xrib) ((lambda (G3f46@xb*) ((lambda () (G2ccd@G2c3e@build-sequence '#f (G2f8f@chi-expr* (map (lambda (G3f48@x) (G2d5c@add-subst G3f44@xrib G3f48@x)) (cons G3f3c@xbody G3f3d@xbody*)) (append (map cons G3f42@xlab* G3f46@xb*) G3f04@r) (append (map cons G3f42@xlab* G3f46@xb*) G3f05@mr)))))) (map (lambda (G3f4a@x) (G2db0@make-eval-transformer (G2fce@expand-transformer (if (eq? G3f14@type 'let-syntax) G3f4a@x (G2d5c@add-subst G3f44@xrib G3f4a@x)) G3f05@mr))) G3f3b@xrhs*))) (G2d2b@make-full-rib G3f3a@xlhs* G3f42@xlab*))) (map G2cf0@gen-label G3f3a@xlhs*))) G3f30@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3f2e@t))) (G2f6f@syntax-dispatch G3f2e@t '(_ #(each (any any)) any . each-any)))) G3f03@e) (if (memv G3f18@t '(displaced-lexical)) (G305c@syntax-violation '#f '"identifier out of context" G3f03@e) (if (memv G3f18@t '(syntax)) (G305c@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3f03@e) (if (memv G3f18@t '(define define-syntax module import library)) (G305c@syntax-violation '#f (string-append ((lambda (G3f4c@t) (if (memv G3f4c@t '(define)) '"a definition" (if (memv G3f4c@t '(define-syntax)) '"a define-syntax" (if (memv G3f4c@t '(module)) '"a module definition" (if (memv G3f4c@t '(library)) '"a library definition" (if (memv G3f4c@t '(import)) '"an import declaration" (if (memv G3f4c@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f14@type) '" was found where an expression was expected") G3f03@e) (if (memv G3f18@t '(mutable)) (G305c@syntax-violation '#f '"attempt to reference an unexportable variable" G3f03@e) (G305c@syntax-violation '#f '"invalid expression" G3f03@e)))))))))))))))))) G3f14@type)) G3f0e@G3f0b G3f0d@G3f0a G3f0c@G3f09))))) (set! G2f95@chi-set! (lambda (G3f4e@e G3f4f@r G3f50@mr) ((lambda (G3f54@t) ((lambda (G3f56@ls/false) (if (and G3f56@ls/false (apply (lambda (G3f58@x G3f59@v) (G2d70@id? G3f58@x)) G3f56@ls/false)) (apply (lambda (G3f5c@x G3f5d@v) (call-with-values (lambda () (G2d98@syntax-type G3f5c@x G3f4f@r)) (lambda (G3f63@G3f60 G3f64@G3f61 G3f65@G3f62) ((lambda (G3f69@kwd G3f6a@value G3f6b@type) ((lambda (G3f6f@t) (if (memv G3f6f@t '(lexical)) (begin (G2eff@set-lexical-mutable! G3f6a@value '#t) (list 'set! (G2efb@lexical-var G3f6a@value) (G2f93@chi-expr G3f5d@v G3f4f@r G3f50@mr))) (if (memv G3f6f@t '(core-prim)) (G305c@syntax-violation '#f '"cannot modify imported core primitive" G3f4e@e) (if (memv G3f6f@t '(global)) (G305c@syntax-violation '#f '"attempt to modify imported binding" G3f4e@e) (if (memv G3f6f@t '(global-macro!)) (G2f93@chi-expr (G2f8d@chi-global-macro G3f6a@value G3f4e@e) G3f4f@r G3f50@mr) (if (memv G3f6f@t '(local-macro!)) (G2f93@chi-expr (G2f8b@chi-local-macro G3f6a@value G3f4e@e) G3f4f@r G3f50@mr) (if (memv G3f6f@t '(mutable)) (G305c@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f4e@e) (G305c@syntax-violation '#f '"invalid syntax" G3f4e@e)))))))) G3f6b@type)) G3f65@G3f62 G3f64@G3f61 G3f63@G3f60)))) G3f56@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3f54@t))) (G2f6f@syntax-dispatch G3f54@t '(_ any any)))) G3f4e@e))) (set! G2f97@verify-formals (lambda (G3f71@fmls G3f72@stx) ((lambda (G3f75@t) ((lambda (G3f77@ls/false) (if G3f77@ls/false (apply (lambda (G3f79@x*) (if (not (G2d7a@valid-bound-ids? G3f79@x*)) (G2f29@invalid-fmls-error G3f72@stx G3f71@fmls) (void))) G3f77@ls/false) ((lambda (G3f7b@t) ((lambda (G3f7d@ls/false) (if G3f7d@ls/false (apply (lambda (G3f7f@x* G3f80@x) (if (not (G2d7a@valid-bound-ids? (cons G3f80@x G3f7f@x*))) (G2f29@invalid-fmls-error G3f72@stx G3f71@fmls) (void))) G3f7d@ls/false) ((lambda (G3f83@t) ((lambda (G3f85@ls/false) (if G3f85@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid syntax" G3f72@stx)) G3f85@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3f83@t))) (G2f6f@syntax-dispatch G3f83@t '_))) G3f7b@t))) (G2f6f@syntax-dispatch G3f7b@t '#(each+ any () any)))) G3f75@t))) (G2f6f@syntax-dispatch G3f75@t 'each-any))) G3f71@fmls))) (set! G2f99@chi-lambda-clause (lambda (G3f87@stx G3f88@fmls G3f89@body* G3f8a@r G3f8b@mr) ((lambda (G3f91@t) ((lambda (G3f93@ls/false) (if G3f93@ls/false (apply (lambda (G3f95@x*) (begin (G2f97@verify-formals G3f88@fmls G3f87@stx) ((lambda (G3f97@lex* G3f98@lab*) (values G3f97@lex* (G2fa9@chi-internal (G2d5c@add-subst (G2d2b@make-full-rib G3f95@x* G3f98@lab*) G3f89@body*) (G2f03@add-lexicals G3f98@lab* G3f97@lex* G3f8a@r) G3f8b@mr))) (map G2cec@gen-lexical G3f95@x*) (map G2cf0@gen-label G3f95@x*)))) G3f93@ls/false) ((lambda (G3f9b@t) ((lambda (G3f9d@ls/false) (if G3f9d@ls/false (apply (lambda (G3f9f@x* G3fa0@x) (begin (G2f97@verify-formals G3f88@fmls G3f87@stx) ((lambda (G3fa3@lex* G3fa4@lab* G3fa5@lex G3fa6@lab) (values (append G3fa3@lex* G3fa5@lex) (G2fa9@chi-internal (G2d5c@add-subst (G2d2b@make-full-rib (cons G3fa0@x G3f9f@x*) (cons G3fa6@lab G3fa4@lab*)) G3f89@body*) (G2f03@add-lexicals (cons G3fa6@lab G3fa4@lab*) (cons G3fa5@lex G3fa3@lex*) G3f8a@r) G3f8b@mr))) (map G2cec@gen-lexical G3f9f@x*) (map G2cf0@gen-label G3f9f@x*) (G2cec@gen-lexical G3fa0@x) (G2cf0@gen-label G3fa0@x)))) G3f9d@ls/false) ((lambda (G3fab@t) ((lambda (G3fad@ls/false) (if G3fad@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid syntax" G3f88@fmls)) G3fad@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G3fab@t))) (G2f6f@syntax-dispatch G3fab@t '_))) G3f9b@t))) (G2f6f@syntax-dispatch G3f9b@t '#(each+ any () any)))) G3f91@t))) (G2f6f@syntax-dispatch G3f91@t 'each-any))) G3f88@fmls))) (set! G2f9b@chi-lambda-clause* (lambda (G3faf@stx G3fb0@fmls* G3fb1@body** G3fb2@r G3fb3@mr) (if (null? G3fb0@fmls*) (values '() '()) (call-with-values (lambda () (G2f99@chi-lambda-clause G3faf@stx (car G3fb0@fmls*) (car G3fb1@body**) G3fb2@r G3fb3@mr)) (lambda (G3fbb@G3fb9 G3fbc@G3fba) ((lambda (G3fbf@b G3fc0@a) (call-with-values (lambda () (G2f9b@chi-lambda-clause* G3faf@stx (cdr G3fb0@fmls*) (cdr G3fb1@body**) G3fb2@r G3fb3@mr)) (lambda (G3fc5@G3fc3 G3fc6@G3fc4) ((lambda (G3fc9@b* G3fca@a*) (values (cons G3fc0@a G3fca@a*) (cons G3fbf@b G3fc9@b*))) G3fc6@G3fc4 G3fc5@G3fc3)))) G3fbc@G3fba G3fbb@G3fb9)))))) (set! G2f9d@chi-defun (lambda (G3fcd@x G3fce@r G3fcf@mr) ((lambda (G3fd3@fmls G3fd4@body*) (call-with-values (lambda () (G2f99@chi-lambda-clause G3fd3@fmls G3fd3@fmls G3fd4@body* G3fce@r G3fcf@mr)) (lambda (G3fd9@G3fd7 G3fda@G3fd8) ((lambda (G3fdd@body G3fde@fmls) (G2cca@G2c08@build-lambda '#f G3fde@fmls G3fdd@body)) G3fda@G3fd8 G3fd9@G3fd7)))) (car G3fcd@x) (cdr G3fcd@x)))) (set! G2f9f@chi-rhs (lambda (G3fe1@rhs G3fe2@r G3fe3@mr) ((lambda (G3fe7@t) (if (memv G3fe7@t '(defun)) (G2f9d@chi-defun (cdr G3fe1@rhs) G3fe2@r G3fe3@mr) (if (memv G3fe7@t '(expr)) ((lambda (G3fe9@expr) (G2f93@chi-expr G3fe9@expr G3fe2@r G3fe3@mr)) (cdr G3fe1@rhs)) (if (memv G3fe7@t '(top-expr)) ((lambda (G3feb@expr) (G2ccd@G2c3e@build-sequence '#f (list (G2f93@chi-expr G3feb@expr G3fe2@r G3fe3@mr) (G2cce@G2c40@build-void)))) (cdr G3fe1@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fe1@rhs))))) (car G3fe1@rhs)))) (set! G2fa1@expand-interaction-rhs*/init* (lambda (G3fed@lhs* G3fee@rhs* G3fef@init* G3ff0@r G3ff1@mr) ((letrec ((G3ff7@f (lambda (G3ff9@lhs* G3ffa@rhs*) (if (null? G3ff9@lhs*) (map (lambda (G3ffd@x) (G2f93@chi-expr G3ffd@x G3ff0@r G3ff1@mr)) G3fef@init*) ((lambda (G3fff@lhs G4000@rhs) ((lambda (G4003@t) (if (memv G4003@t '(defun)) ((lambda (G4005@rhs) (cons (list 'set! G3fff@lhs G4005@rhs) (G3ff7@f (cdr G3ff9@lhs*) (cdr G3ffa@rhs*)))) (G2f9d@chi-defun (cdr G4000@rhs) G3ff0@r G3ff1@mr)) (if (memv G4003@t '(expr)) ((lambda (G4007@rhs) (cons (list 'set! G3fff@lhs G4007@rhs) (G3ff7@f (cdr G3ff9@lhs*) (cdr G3ffa@rhs*)))) (G2f93@chi-expr (cdr G4000@rhs) G3ff0@r G3ff1@mr)) (if (memv G4003@t '(top-expr)) ((lambda (G4009@e) (cons G4009@e (G3ff7@f (cdr G3ff9@lhs*) (cdr G3ffa@rhs*)))) (G2f93@chi-expr (cdr G4000@rhs) G3ff0@r G3ff1@mr)) (error 'expand-interaction '"invallid" G4000@rhs))))) (car G4000@rhs))) (car G3ff9@lhs*) (car G3ffa@rhs*)))))) G3ff7@f) G3fed@lhs* G3fee@rhs*))) (set! G2fa3@chi-rhs* (lambda (G400b@rhs* G400c@r G400d@mr) ((letrec ((G4011@f (lambda (G4013@ls) (if (null? G4013@ls) '() ((lambda (G4015@a) (cons G4015@a (G4011@f (cdr G4013@ls)))) (G2f9f@chi-rhs (car G4013@ls) G400c@r G400d@mr)))))) G4011@f) G400b@rhs*))) (set! G2fa5@find-bound=? (lambda (G4017@x G4018@lhs* G4019@rhs*) (if (null? G4018@lhs*) '#f (if (G2d76@bound-id=? G4017@x (car G4018@lhs*)) (car G4019@rhs*) (G2fa5@find-bound=? G4017@x (cdr G4018@lhs*) (cdr G4019@rhs*)))))) (set! G2fa7@find-dups (lambda (G401d@ls) ((letrec ((G401f@f (lambda (G4021@ls G4022@dups) (if (null? G4021@ls) G4022@dups ((lambda (G4025@t) (if G4025@t ((lambda (G4027@x) (G401f@f (cdr G4021@ls) (cons (list (car G4021@ls) G4027@x) G4022@dups))) G4025@t) (G401f@f (cdr G4021@ls) G4022@dups))) (G2fa5@find-bound=? (car G4021@ls) (cdr G4021@ls) (cdr G4021@ls))))))) G401f@f) G401d@ls '()))) (set! G2fa9@chi-internal (lambda (G4029@e* G402a@r G402b@mr) ((lambda (G402f@rib) (call-with-values (lambda () (G2fcc@chi-body* (map (lambda (G4039@x) (G2d5c@add-subst G402f@rib G4039@x)) (G2d6e@syntax->list G4029@e*)) G402a@r G402b@mr '() '() '() '() '() G402f@rib '#f)) (lambda (G403b@G4031 G403c@G4032 G403d@G4033 G403e@G4034 G403f@G4035 G4040@G4036 G4041@G4037 G4042@G4038) ((lambda (G404b@_exp* G404c@kwd* G404d@mod** G404e@rhs* G404f@lex* G4050@mr G4051@r G4052@e*) (begin (if (null? G4052@e*) (G305c@syntax-violation '#f '"no expression in body" G4052@e*) (void)) ((lambda (G405b@init*) ((lambda (G405d@rhs*) ((lambda () (G2cd0@G2c44@build-letrec* '#f (reverse G404f@lex*) (reverse G405d@rhs*) (G2ccd@G2c3e@build-sequence '#f G405b@init*))))) (G2fa3@chi-rhs* G404e@rhs* G4051@r G4050@mr))) (G2f8f@chi-expr* (append (apply append (reverse G404d@mod**)) G4052@e*) G4051@r G4050@mr)))) G4042@G4038 G4041@G4037 G4040@G4036 G403f@G4035 G403e@G4034 G403d@G4033 G403c@G4032 G403b@G4031)))) (G2d1b@make-empty-rib)))) (set! G2fab@parse-module (lambda (G405f@e) ((lambda (G4061@t) ((lambda (G4063@ls/false) (if G4063@ls/false (apply (lambda (G4065@export* G4066@b*) (begin (if (not (for-all G2d70@id? G4065@export*)) (G305c@syntax-violation '#f '"module exports must be identifiers" G405f@e) (void)) (values '#f (list->vector G4065@export*) G4066@b*))) G4063@ls/false) ((lambda (G4069@t) ((lambda (G406b@ls/false) (if G406b@ls/false (apply (lambda (G406d@name G406e@export* G406f@b*) (begin (if (not (G2d70@id? G406d@name)) (G305c@syntax-violation '#f '"module name must be an identifier" G405f@e) (void)) (if (not (for-all G2d70@id? G406e@export*)) (G305c@syntax-violation '#f '"module exports must be identifiers" G405f@e) (void)) (values G406d@name (list->vector G406e@export*) G406f@b*))) G406b@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G4069@t))) (G2f6f@syntax-dispatch G4069@t '(_ any each-any . each-any)))) G4061@t))) (G2f6f@syntax-dispatch G4061@t '(_ each-any . each-any)))) G405f@e))) (set! G2fb1@G2fac (make-record-type-descriptor 'module-interface '#f 'G2faf '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2fb3@G2fae '#f) (set! G2fb5@G2fad (make-record-constructor-descriptor G2fb1@G2fac '#f G2fb3@G2fae)) (set! G2fb8@module-interface? (record-predicate G2fb1@G2fac)) (set! G2fba@make-module-interface (record-constructor G2fb5@G2fad)) (set! G2fbc@module-interface-first-mark (record-accessor G2fb1@G2fac '0)) (set! G2fbe@module-interface-exp-id-vec (record-accessor G2fb1@G2fac '1)) (set! G2fc0@module-interface-exp-lab-vec (record-accessor G2fb1@G2fac '2)) (set! G2fc2@set-module-interface-first-mark! (record-mutator G2fb1@G2fac '0)) (set! G2fc4@set-module-interface-exp-id-vec! (record-mutator G2fb1@G2fac '1)) (set! G2fc6@set-module-interface-exp-lab-vec! (record-mutator G2fb1@G2fac '2)) (set! G2fc8@module-interface-exp-id* (lambda (G4073@iface G4074@id) ((lambda (G4078@diff-marks) (begin (set! G4078@diff-marks (lambda (G407f@ls G4080@x) (begin (if (null? G407f@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4083@a) (if (eq? G4083@a G4080@x) '() (cons G4083@a (G4078@diff-marks (cdr G407f@ls) G4080@x)))) (car G407f@ls))))) ((lambda (G4079@diff G407a@id-vec) (if (null? G4079@diff) G407a@id-vec (vector-map (lambda (G407d@x) (G2d3a@make-stx (G2d3c@stx-expr G407d@x) (append G4079@diff (G2d3e@stx-mark* G407d@x)) '() '())) G407a@id-vec))) (G4078@diff-marks (G2d3e@stx-mark* G4074@id) (G2fbc@module-interface-first-mark G4073@iface)) (G2fbe@module-interface-exp-id-vec G4073@iface)))) '#f))) (set! G2fca@chi-internal-module (lambda (G4085@e G4086@r G4087@mr G4088@lex* G4089@rhs* G408a@mod** G408b@kwd*) (call-with-values (lambda () (G2fab@parse-module G4085@e)) (lambda (G4096@G4093 G4097@G4094 G4098@G4095) ((lambda (G409c@e* G409d@exp-id* G409e@name) ((lambda (G40a2@rib) ((lambda (G40a4@e*) ((lambda () (call-with-values (lambda () (G2fcc@chi-body* G40a4@e* G4086@r G4087@mr G4088@lex* G4089@rhs* G408a@mod** G408b@kwd* '() G40a2@rib '#f)) (lambda (G40ae@G40a6 G40af@G40a7 G40b0@G40a8 G40b1@G40a9 G40b2@G40aa G40b3@G40ab G40b4@G40ac G40b5@G40ad) ((lambda (G40be@_exp* G40bf@kwd* G40c0@mod** G40c1@rhs* G40c2@lex* G40c3@mr G40c4@r G40c5@e*) ((lambda (G40ce@exp-lab* G40cf@mod**) (if (not G409e@name) (values G40c2@lex* G40c1@rhs* G409d@exp-id* G40ce@exp-lab* G40c4@r G40c3@mr G40cf@mod** G40bf@kwd*) ((lambda (G40d2@lab G40d3@iface) (values G40c2@lex* G40c1@rhs* (vector G409e@name) (vector G40d2@lab) (cons (cons G40d2@lab (cons '$module G40d3@iface)) G40c4@r) (cons (cons G40d2@lab (cons '$module G40d3@iface)) G40c3@mr) G40cf@mod** G40bf@kwd*)) (G2cf0@gen-label 'module) (G2fba@make-module-interface (car (G2d3e@stx-mark* G409e@name)) (vector-map (lambda (G40d6@x) (G2d3a@make-stx (G2d3c@stx-expr G40d6@x) (G2d3e@stx-mark* G40d6@x) '() '())) G409d@exp-id*) G40ce@exp-lab*)))) (vector-map (lambda (G40d8@x) (or (G2d8a@id->label (G2d3a@make-stx (G2d72@id->sym G40d8@x) (G2d3e@stx-mark* G40d8@x) (list G40a2@rib) '())) (G305c@syntax-violation '#f '"cannot find module export" G40d8@x))) G409d@exp-id*) (cons G40c5@e* G40c0@mod**))) G40b5@G40ad G40b4@G40ac G40b3@G40ab G40b2@G40aa G40b1@G40a9 G40b0@G40a8 G40af@G40a7 G40ae@G40a6)))))) (map (lambda (G40da@x) (G2d5c@add-subst G40a2@rib G40da@x)) (G2d6e@syntax->list G409c@e*)))) (G2d1b@make-empty-rib))) G4098@G4095 G4097@G4094 G4096@G4093))))) (set! G2fcc@chi-body* (lambda (G40dc@e* G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G40e2@kwd* G40e3@exp* G40e4@rib G40e5@top?) (if (null? G40dc@e*) (values G40dc@e* G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G40e2@kwd* G40e3@exp*) ((lambda (G40f0@e) (call-with-values (lambda () (G2d98@syntax-type G40f0@e G40dd@r)) (lambda (G40f5@G40f2 G40f6@G40f3 G40f7@G40f4) ((lambda (G40fb@kwd G40fc@value G40fd@type) ((lambda (G4101@kwd*) ((lambda (G4103@t) (if (memv G4103@t '(define)) (call-with-values (lambda () (G2ef3@parse-define G40f0@e)) (lambda (G4107@G4105 G4108@G4106) ((lambda (G410b@rhs G410c@id) (begin (if (G2d7e@bound-id-member? G410c@id G4101@kwd*) (G305c@syntax-violation '#f '"cannot redefine keyword" G40f0@e) (void)) (call-with-values (lambda () (G2cf4@gen-define-label+loc G410c@id G40e4@rib)) (lambda (G4111@G410f G4112@G4110) ((lambda (G4115@lex G4116@lab) (begin (G2d21@extend-rib! G40e4@rib G410c@id G4116@lab) (G2fcc@chi-body* (cdr G40dc@e*) (G2f01@add-lexical G4116@lab G4115@lex G40dd@r) G40de@mr (cons G4115@lex G40df@lex*) (cons G410b@rhs G40e0@rhs*) G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?))) G4112@G4110 G4111@G410f))))) G4108@G4106 G4107@G4105))) (if (memv G4103@t '(define-syntax)) (call-with-values (lambda () (G2ef5@parse-define-syntax G40f0@e)) (lambda (G411b@G4119 G411c@G411a) ((lambda (G411f@rhs G4120@id) (begin (if (G2d7e@bound-id-member? G4120@id G4101@kwd*) (G305c@syntax-violation '#f '"cannot redefine keyword" G40f0@e) (void)) ((lambda (G4123@lab G4124@expanded-rhs) (begin (G2d21@extend-rib! G40e4@rib G4120@id G4123@lab) ((lambda (G4127@b) (G2fcc@chi-body* (cdr G40dc@e*) (cons (cons G4123@lab G4127@b) G40dd@r) (cons (cons G4123@lab G4127@b) G40de@mr) G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?)) (G2db0@make-eval-transformer G4124@expanded-rhs)))) (G2cf6@gen-define-label G4120@id G40e4@rib) (G2fce@expand-transformer G411f@rhs G40de@mr)))) G411c@G411a G411b@G4119))) (if (memv G4103@t '(let-syntax letrec-syntax)) ((lambda (G4129@t) ((lambda (G412b@ls/false) (if (and G412b@ls/false (apply (lambda (G412d@xlhs* G412e@xrhs* G412f@xbody*) (if (not (G2d7a@valid-bound-ids? G412d@xlhs*)) (G305c@syntax-violation '#f '"invalid identifiers" G40f0@e) (void))) G412b@ls/false)) (apply (lambda (G4133@xlhs* G4134@xrhs* G4135@xbody*) ((lambda (G4139@xlab*) ((lambda (G413b@xrib) ((lambda (G413d@xb*) ((lambda () (G2fcc@chi-body* (append (map (lambda (G413f@x) (G2d5c@add-subst G413b@xrib G413f@x)) G4135@xbody*) (cdr G40dc@e*)) (append (map cons G4139@xlab* G413d@xb*) G40dd@r) (append (map cons G4139@xlab* G413d@xb*) G40de@mr) G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?)))) (map (lambda (G4141@x) (G2db0@make-eval-transformer (G2fce@expand-transformer (if (eq? G40fd@type 'let-syntax) G4141@x (G2d5c@add-subst G413b@xrib G4141@x)) G40de@mr))) G4134@xrhs*))) (G2d2b@make-full-rib G4133@xlhs* G4139@xlab*))) (map G2cf0@gen-label G4133@xlhs*))) G412b@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G4129@t))) (G2f6f@syntax-dispatch G4129@t '(_ #(each (any any)) . each-any)))) G40f0@e) (if (memv G4103@t '(begin)) ((lambda (G4143@t) ((lambda (G4145@ls/false) (if G4145@ls/false (apply (lambda (G4147@x*) (G2fcc@chi-body* (append G4147@x* (cdr G40dc@e*)) G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?)) G4145@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G4143@t))) (G2f6f@syntax-dispatch G4143@t '(_ . each-any)))) G40f0@e) (if (memv G4103@t '(global-macro global-macro!)) (G2fcc@chi-body* (cons (G2d5c@add-subst G40e4@rib (G2f8d@chi-global-macro G40fc@value G40f0@e)) (cdr G40dc@e*)) G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?) (if (memv G4103@t '(local-macro local-macro!)) (G2fcc@chi-body* (cons (G2d5c@add-subst G40e4@rib (G2f8b@chi-local-macro G40fc@value G40f0@e)) (cdr G40dc@e*)) G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?) (if (memv G4103@t '(macro macro!)) (G2fcc@chi-body* (cons (G2d5c@add-subst G40e4@rib (G2f89@chi-macro G40fc@value G40f0@e)) (cdr G40dc@e*)) G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?) (if (memv G4103@t '(module)) (call-with-values (lambda () (G2fca@chi-internal-module G40f0@e G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd*)) (lambda (G4151@G4149 G4152@G414a G4153@G414b G4154@G414c G4155@G414d G4156@G414e G4157@G414f G4158@G4150) ((lambda (G4161@kwd* G4162@mod** G4163@mr G4164@r G4165@m-exp-lab* G4166@m-exp-id* G4167@rhs* G4168@lex*) (begin (vector-for-each (lambda (G4171@id G4172@lab) (G2d21@extend-rib! G40e4@rib G4171@id G4172@lab)) G4166@m-exp-id* G4165@m-exp-lab*) (G2fcc@chi-body* (cdr G40dc@e*) G4164@r G4163@mr G4168@lex* G4167@rhs* G4162@mod** G4161@kwd* G40e3@exp* G40e4@rib G40e5@top?))) G4158@G4150 G4157@G414f G4156@G414e G4155@G414d G4154@G414c G4153@G414b G4152@G414a G4151@G4149))) (if (memv G4103@t '(library)) (begin (G303c@library-expander (G2d86@stx->datum G40f0@e)) (G2fcc@chi-body* (cdr G40dc@e*) G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?)) (if (memv G4103@t '(export)) ((lambda (G4175@t) ((lambda (G4177@ls/false) (if G4177@ls/false (apply (lambda (G4179@exp-decl*) (G2fcc@chi-body* (cdr G40dc@e*) G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* (append G4179@exp-decl* G40e3@exp*) G40e4@rib G40e5@top?)) G4177@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G4175@t))) (G2f6f@syntax-dispatch G4175@t '(_ . each-any)))) G40f0@e) (if (memv G4103@t '(import)) ((lambda () ((lambda (G417c@module-import? G417e@module-import G4180@library-import) (begin (set! G417c@module-import? (lambda (G41c8@e) ((lambda (G41ca@t) ((lambda (G41cc@ls/false) (if (and G41cc@ls/false (apply (lambda (G41ce@id) (G2d70@id? G41ce@id)) G41cc@ls/false)) (apply (lambda (G41d0@id) '#t) G41cc@ls/false) ((lambda (G41d2@t) ((lambda (G41d4@ls/false) (if G41d4@ls/false (apply (lambda (G41d6@imp*) '#f) G41d4@ls/false) ((lambda (G41d8@t) ((lambda (G41da@ls/false) (if G41da@ls/false (apply (lambda () (G305c@syntax-violation '#f '"malformed import form" G41c8@e)) G41da@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G41d8@t))) (G2f6f@syntax-dispatch G41d8@t '_))) G41d2@t))) (G2f6f@syntax-dispatch G41d2@t '(_ . each-any)))) G41ca@t))) (G2f6f@syntax-dispatch G41ca@t '(_ any)))) G41c8@e))) (set! G417e@module-import (lambda (G41a9@e G41aa@r) ((lambda (G41ad@t) ((lambda (G41af@ls/false) (if (and G41af@ls/false (apply (lambda (G41b1@id) (G2d70@id? G41b1@id)) G41af@ls/false)) (apply (lambda (G41b3@id) (call-with-values (lambda () (G2d98@syntax-type G41b3@id G41aa@r)) (lambda (G41b8@G41b5 G41b9@G41b6 G41ba@G41b7) ((lambda (G41be@kwd G41bf@value G41c0@type) ((lambda (G41c4@t) (if (memv G41c4@t '($module)) ((lambda (G41c6@iface) (values (G2fc8@module-interface-exp-id* G41c6@iface G41b3@id) (G2fc0@module-interface-exp-lab-vec G41c6@iface))) G41bf@value) (G305c@syntax-violation '#f '"invalid import" G41a9@e))) G41c0@type)) G41ba@G41b7 G41b9@G41b6 G41b8@G41b5)))) G41af@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G41ad@t))) (G2f6f@syntax-dispatch G41ad@t '(_ any)))) G41a9@e))) (set! G4180@library-import (lambda (G418f@e) ((lambda (G4191@t) ((lambda (G4193@ls/false) (if G4193@ls/false (apply (lambda (G4195@ctxt G4196@imp*) (call-with-values (lambda () (G2fd6@parse-import-spec* (G3062@syntax->datum G4196@imp*))) (lambda (G419b@G4199 G419c@G419a) ((lambda (G419f@subst-labels G41a0@subst-names) (values (vector-map (lambda (G41a3@name) (G2d4e@datum->stx G4195@ctxt G41a3@name)) G41a0@subst-names) G419f@subst-labels)) G419c@G419a G419b@G4199)))) G4193@ls/false) ((lambda (G41a5@t) ((lambda (G41a7@ls/false) (if G41a7@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid import form" G418f@e)) G41a7@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G41a5@t))) (G2f6f@syntax-dispatch G41a5@t '_))) G4191@t))) (G2f6f@syntax-dispatch G4191@t '(any . each-any)))) G418f@e))) (begin (call-with-values (lambda () (if (G417c@module-import? G40f0@e) (G417e@module-import G40f0@e G40dd@r) (G4180@library-import G40f0@e))) (lambda (G4183@G4181 G4184@G4182) ((lambda (G4187@lab* G4188@id*) (vector-for-each (lambda (G418b@id G418c@lab) (G2d21@extend-rib! G40e4@rib G418b@id G418c@lab)) G4188@id* G4187@lab*)) G4184@G4182 G4183@G4181))) (G2fcc@chi-body* (cdr G40dc@e*) G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?)))) '#f '#f '#f))) (if G40e5@top? (G2fcc@chi-body* (cdr G40dc@e*) G40dd@r G40de@mr (cons (G2cec@gen-lexical 'dummy) G40df@lex*) (cons (cons 'top-expr G40f0@e) G40e0@rhs*) G40e1@mod** G4101@kwd* G40e3@exp* G40e4@rib G40e5@top?) (values G40dc@e* G40dd@r G40de@mr G40df@lex* G40e0@rhs* G40e1@mod** G4101@kwd* G40e3@exp*)))))))))))))) G40fd@type)) (if (G2d70@id? G40fb@kwd) (cons G40fb@kwd G40e2@kwd*) G40e2@kwd*))) G40f7@G40f4 G40f6@G40f3 G40f5@G40f2)))) (car G40dc@e*))))) (set! G2fce@expand-transformer (lambda (G41dc@expr G41dd@r) ((lambda (G41e0@rtc) ((lambda (G41e2@expanded-rhs) (begin (for-each ((lambda (G41e4@mark-visit) (lambda (G41e6@x) (begin (G2b87@G2a2e@invoke-library G41e6@x) (G41e4@mark-visit G41e6@x)))) (G2fde@vis-collector)) (G41e0@rtc)) G41e2@expanded-rhs)) ((lambda (G41ec@G41e8 G41ed@G41e9 G41ee@G41ea G41ef@G41eb) ((lambda (G41f4@swap) (dynamic-wind G41f4@swap (lambda () (G2f93@chi-expr G41dc@expr G41dd@r G41dd@r)) G41f4@swap)) (lambda () (begin ((lambda (G41f6@t) (begin (G41ec@G41e8 G41ee@G41ea) (set! G41ee@G41ea G41f6@t))) (G41ec@G41e8)) ((lambda (G41f8@t) (begin (G41ed@G41e9 G41ef@G41eb) (set! G41ef@G41eb G41f8@t))) (G41ed@G41e9)))))) G2fdc@inv-collector G2fde@vis-collector G41e0@rtc (lambda (G41fa@x) (values))))) (G2fda@make-collector)))) (set! G2fd0@parse-exports (lambda (G41fc@exp*) ((letrec ((G41fe@f (lambda (G4200@exp* G4201@int* G4202@ext*) (if (null? G4200@exp*) (begin (if (not (G2d7a@valid-bound-ids? G4202@ext*)) (G305c@syntax-violation 'export '"invalid exports" (G2fa7@find-dups G4202@ext*)) (void)) (values (map G3062@syntax->datum G4202@ext*) G4201@int*)) ((lambda (G4206@t) ((lambda (G4208@ls/false) (if G4208@ls/false (apply (lambda (G420a@rename G420b@i* G420c@e*) (begin (if (not (and (eq? (G3062@syntax->datum G420a@rename) 'rename) (for-all G2d70@id? G420b@i*) (for-all G2d70@id? G420c@e*))) (G305c@syntax-violation 'export '"invalid export specifier" (car G4200@exp*)) (void)) (G41fe@f (cdr G4200@exp*) (append G420b@i* G4201@int*) (append G420c@e* G4202@ext*)))) G4208@ls/false) ((lambda (G4210@t) ((lambda (G4212@ls/false) (if G4212@ls/false (apply (lambda (G4214@ie) (begin (if (not (G2d70@id? G4214@ie)) (G305c@syntax-violation 'export '"invalid export" G4214@ie) (void)) (G41fe@f (cdr G4200@exp*) (cons G4214@ie G4201@int*) (cons G4214@ie G4202@ext*)))) G4212@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G4210@t))) (G2f6f@syntax-dispatch G4210@t 'any))) G4206@t))) (G2f6f@syntax-dispatch G4206@t '(any . #(each (any any)))))) (car G4200@exp*)))))) G41fe@f) G41fc@exp* '() '()))) (set! G2fd2@parse-library-name (lambda (G4216@spec) ((lambda (G4219@parse) (begin (set! G4219@parse (lambda (G4224@x) ((lambda (G4226@t) ((lambda (G4228@ls/false) (if (and G4228@ls/false (apply (lambda (G422a@v*) (for-all (lambda (G422c@x) ((lambda (G422e@x) (and (integer? G422e@x) (exact? G422e@x))) (G3062@syntax->datum G422c@x))) G422a@v*)) G4228@ls/false)) (apply (lambda (G4230@v*) (values '() (map G3062@syntax->datum G4230@v*))) G4228@ls/false) ((lambda (G4232@t) ((lambda (G4234@ls/false) (if (and G4234@ls/false (apply (lambda (G4236@x G4237@rest) (symbol? (G3062@syntax->datum G4236@x))) G4234@ls/false)) (apply (lambda (G423a@x G423b@rest) (call-with-values (lambda () (G4219@parse G423b@rest)) (lambda (G4240@G423e G4241@G423f) ((lambda (G4244@v* G4245@x*) (values (cons (G3062@syntax->datum G423a@x) G4245@x*) G4244@v*)) G4241@G423f G4240@G423e)))) G4234@ls/false) ((lambda (G4248@t) ((lambda (G424a@ls/false) (if G424a@ls/false (apply (lambda () (values '() '())) G424a@ls/false) ((lambda (G424c@t) ((lambda (G424e@ls/false) (if G424e@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid library name" G4216@spec)) G424e@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G424c@t))) (G2f6f@syntax-dispatch G424c@t '_))) G4248@t))) (G2f6f@syntax-dispatch G4248@t '()))) G4232@t))) (G2f6f@syntax-dispatch G4232@t '(any . any)))) G4226@t))) (G2f6f@syntax-dispatch G4226@t '(each-any)))) G4224@x))) (call-with-values (lambda () (G4219@parse G4216@spec)) (lambda (G421c@G421a G421d@G421b) ((lambda (G4220@ver* G4221@name*) (begin (if (null? G4221@name*) (G305c@syntax-violation '#f '"empty library name" G4216@spec) (void)) (values G4221@name* G4220@ver*))) G421d@G421b G421c@G421a))))) '#f))) (set! G2fd4@parse-library (lambda (G4250@e) ((lambda (G4252@t) ((lambda (G4254@ls/false) (if (and G4254@ls/false (apply (lambda (G4256@library G4257@name* G4258@export G4259@exp* G425a@import G425b@imp* G425c@b*) (and (eq? (G3062@syntax->datum G4258@export) 'export) (eq? (G3062@syntax->datum G425a@import) 'import) (eq? (G3062@syntax->datum G4256@library) 'library))) G4254@ls/false)) (apply (lambda (G4264@library G4265@name* G4266@export G4267@exp* G4268@import G4269@imp* G426a@b*) (values G4265@name* G4267@exp* G4269@imp* G426a@b*)) G4254@ls/false) ((lambda (G4272@t) ((lambda (G4274@ls/false) (if G4274@ls/false (apply (lambda () (G305c@syntax-violation '#f '"malformed library" G4250@e)) G4274@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G4272@t))) (G2f6f@syntax-dispatch G4272@t '_))) G4252@t))) (G2f6f@syntax-dispatch G4252@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G4250@e))) (set! G2fd6@parse-import-spec* ((lambda () ((lambda (G4277@idsyn? G4279@dup-error G427b@merge-substs G427d@exclude* G427f@find* G4281@rem* G4283@remove-dups G4285@parse-library-name G4287@import-library G4289@get-import G428b@add-imports!) (begin (set! G4277@idsyn? (lambda (G4476@x) (symbol? (G3062@syntax->datum G4476@x)))) (set! G4279@dup-error (lambda (G4474@name) (G305c@syntax-violation 'import '"two imports with different bindings" G4474@name))) (set! G427b@merge-substs (lambda (G4462@s G4463@subst) ((lambda (G4467@insert-to-subst) (begin (set! G4467@insert-to-subst (lambda (G4468@a G4469@subst) ((lambda (G446c@name G446d@label) ((lambda (G4470@t) (if G4470@t ((lambda (G4472@x) (if (eq? (cdr G4472@x) G446d@label) G4469@subst (G4279@dup-error G446c@name))) G4470@t) (cons G4468@a G4469@subst))) (assq G446c@name G4469@subst))) (car G4468@a) (cdr G4468@a)))) (if (null? G4462@s) G4463@subst (G4467@insert-to-subst (car G4462@s) (G427b@merge-substs (cdr G4462@s) G4463@subst))))) '#f))) (set! G427d@exclude* (lambda (G4438@sym* G4439@subst) ((lambda (G443d@exclude) (begin (set! G443d@exclude (lambda (G4452@sym G4453@subst) (if (null? G4453@subst) (G305c@syntax-violation 'import '"cannot rename unbound identifier" G4452@sym) (if (eq? G4452@sym (caar G4453@subst)) (values (cdar G4453@subst) (cdr G4453@subst)) ((lambda (G4456@a) (call-with-values (lambda () (G443d@exclude G4452@sym (cdr G4453@subst))) (lambda (G445a@G4458 G445b@G4459) ((lambda (G445e@subst G445f@old) (values G445f@old (cons G4456@a G445e@subst))) G445b@G4459 G445a@G4458)))) (car G4453@subst)))))) (if (null? G4438@sym*) (values '() G4439@subst) (call-with-values (lambda () (G443d@exclude (car G4438@sym*) G4439@subst)) (lambda (G4440@G443e G4441@G443f) ((lambda (G4444@subst G4445@old) (call-with-values (lambda () (G427d@exclude* (cdr G4438@sym*) G4444@subst)) (lambda (G444a@G4448 G444b@G4449) ((lambda (G444e@subst G444f@old*) (values (cons G4445@old G444f@old*) G444e@subst)) G444b@G4449 G444a@G4448)))) G4441@G443f G4440@G443e)))))) '#f))) (set! G427f@find* (lambda (G4430@sym* G4431@subst) (map (lambda (G4434@x) ((lambda (G4436@t) (if G4436@t (cdr G4436@t) (G305c@syntax-violation 'import '"cannot find identifier" G4434@x))) (assq G4434@x G4431@subst))) G4430@sym*))) (set! G4281@rem* (lambda (G4428@sym* G4429@subst) ((letrec ((G442c@f (lambda (G442e@subst) (if (null? G442e@subst) '() (if (memq (caar G442e@subst) G4428@sym*) (G442c@f (cdr G442e@subst)) (cons (car G442e@subst) (G442c@f (cdr G442e@subst)))))))) G442c@f) G4429@subst))) (set! G4283@remove-dups (lambda (G4426@ls) (if (null? G4426@ls) '() (if (memq (car G4426@ls) (cdr G4426@ls)) (G4283@remove-dups (cdr G4426@ls)) (cons (car G4426@ls) (G4283@remove-dups (cdr G4426@ls))))))) (set! G4285@parse-library-name (lambda (G4340@spec) ((lambda (G4343@subversion? G4345@subversion-pred G4347@version-pred) (begin (set! G4343@subversion? (lambda (G4422@x) ((lambda (G4424@x) (and (integer? G4424@x) (exact? G4424@x) (>= G4424@x '0))) (G3062@syntax->datum G4422@x)))) (set! G4345@subversion-pred (lambda (G43c2@x*) ((lambda (G43c4@t) ((lambda (G43c6@ls/false) (if (and G43c6@ls/false (apply (lambda (G43c8@n) (G4343@subversion? G43c8@n)) G43c6@ls/false)) (apply (lambda (G43ca@n) (lambda (G43cc@x) (= G43cc@x (G3062@syntax->datum G43ca@n)))) G43c6@ls/false) ((lambda (G43ce@t) ((lambda (G43d0@ls/false) (if (and G43d0@ls/false (apply (lambda (G43d2@p? G43d3@sub*) (eq? (G3062@syntax->datum G43d2@p?) 'and)) G43d0@ls/false)) (apply (lambda (G43d6@p? G43d7@sub*) ((lambda (G43da@p*) (lambda (G43dc@x) (for-all (lambda (G43de@p) (G43de@p G43dc@x)) G43da@p*))) (map G4345@subversion-pred G43d7@sub*))) G43d0@ls/false) ((lambda (G43e0@t) ((lambda (G43e2@ls/false) (if (and G43e2@ls/false (apply (lambda (G43e4@p? G43e5@sub*) (eq? (G3062@syntax->datum G43e4@p?) 'or)) G43e2@ls/false)) (apply (lambda (G43e8@p? G43e9@sub*) ((lambda (G43ec@p*) (lambda (G43ee@x) (exists (lambda (G43f0@p) (G43f0@p G43ee@x)) G43ec@p*))) (map G4345@subversion-pred G43e9@sub*))) G43e2@ls/false) ((lambda (G43f2@t) ((lambda (G43f4@ls/false) (if (and G43f4@ls/false (apply (lambda (G43f6@p? G43f7@sub) (eq? (G3062@syntax->datum G43f6@p?) 'not)) G43f4@ls/false)) (apply (lambda (G43fa@p? G43fb@sub) ((lambda (G43fe@p) (lambda (G4400@x) (not (G43fe@p G4400@x)))) (G4345@subversion-pred G43fb@sub))) G43f4@ls/false) ((lambda (G4402@t) ((lambda (G4404@ls/false) (if (and G4404@ls/false (apply (lambda (G4406@p? G4407@n) (and (eq? (G3062@syntax->datum G4406@p?) '<=) (G4343@subversion? G4407@n))) G4404@ls/false)) (apply (lambda (G440a@p? G440b@n) (lambda (G440e@x) (<= G440e@x (G3062@syntax->datum G440b@n)))) G4404@ls/false) ((lambda (G4410@t) ((lambda (G4412@ls/false) (if (and G4412@ls/false (apply (lambda (G4414@p? G4415@n) (and (eq? (G3062@syntax->datum G4414@p?) '>=) (G4343@subversion? G4415@n))) G4412@ls/false)) (apply (lambda (G4418@p? G4419@n) (lambda (G441c@x) (>= G441c@x (G3062@syntax->datum G4419@n)))) G4412@ls/false) ((lambda (G441e@t) ((lambda (G4420@ls/false) (if G4420@ls/false (apply (lambda () (G305c@syntax-violation 'import '"invalid sub-version spec" G4340@spec G43c2@x*)) G4420@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G441e@t))) (G2f6f@syntax-dispatch G441e@t '_))) G4410@t))) (G2f6f@syntax-dispatch G4410@t '(any any)))) G4402@t))) (G2f6f@syntax-dispatch G4402@t '(any any)))) G43f2@t))) (G2f6f@syntax-dispatch G43f2@t '(any any)))) G43e0@t))) (G2f6f@syntax-dispatch G43e0@t '(any . each-any)))) G43ce@t))) (G2f6f@syntax-dispatch G43ce@t '(any . each-any)))) G43c4@t))) (G2f6f@syntax-dispatch G43c4@t 'any))) G43c2@x*))) (set! G4347@version-pred (lambda (G4372@x*) ((lambda (G4374@t) ((lambda (G4376@ls/false) (if G4376@ls/false (apply (lambda () (lambda (G4378@x) '#t)) G4376@ls/false) ((lambda (G437a@t) ((lambda (G437c@ls/false) (if (and G437c@ls/false (apply (lambda (G437e@c G437f@ver*) (eq? (G3062@syntax->datum G437e@c) 'and)) G437c@ls/false)) (apply (lambda (G4382@c G4383@ver*) ((lambda (G4386@p*) (lambda (G4388@x) (for-all (lambda (G438a@p) (G438a@p G4388@x)) G4386@p*))) (map G4347@version-pred G4383@ver*))) G437c@ls/false) ((lambda (G438c@t) ((lambda (G438e@ls/false) (if (and G438e@ls/false (apply (lambda (G4390@c G4391@ver*) (eq? (G3062@syntax->datum G4390@c) 'or)) G438e@ls/false)) (apply (lambda (G4394@c G4395@ver*) ((lambda (G4398@p*) (lambda (G439a@x) (exists (lambda (G439c@p) (G439c@p G439a@x)) G4398@p*))) (map G4347@version-pred G4395@ver*))) G438e@ls/false) ((lambda (G439e@t) ((lambda (G43a0@ls/false) (if (and G43a0@ls/false (apply (lambda (G43a2@c G43a3@ver) (eq? (G3062@syntax->datum G43a2@c) 'not)) G43a0@ls/false)) (apply (lambda (G43a6@c G43a7@ver) ((lambda (G43aa@p) (lambda (G43ac@x) (not (G43aa@p G43ac@x)))) (G4347@version-pred G43a7@ver))) G43a0@ls/false) ((lambda (G43ae@t) ((lambda (G43b0@ls/false) (if G43b0@ls/false (apply (lambda (G43b2@sub*) ((lambda (G43b4@p*) (lambda (G43b6@x) ((letrec ((G43b8@f (lambda (G43ba@p* G43bb@x) (if (null? G43ba@p*) '#t (if (null? G43bb@x) '#f (and ((car G43ba@p*) (car G43bb@x)) (G43b8@f (cdr G43ba@p*) (cdr G43bb@x)))))))) G43b8@f) G43b4@p* G43b6@x))) (map G4345@subversion-pred G43b2@sub*))) G43b0@ls/false) ((lambda (G43be@t) ((lambda (G43c0@ls/false) (if G43c0@ls/false (apply (lambda () (G305c@syntax-violation 'import '"invalid version spec" G4340@spec G4372@x*)) G43c0@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G43be@t))) (G2f6f@syntax-dispatch G43be@t '_))) G43ae@t))) (G2f6f@syntax-dispatch G43ae@t 'each-any))) G439e@t))) (G2f6f@syntax-dispatch G439e@t '(any any)))) G438c@t))) (G2f6f@syntax-dispatch G438c@t '(any . each-any)))) G437a@t))) (G2f6f@syntax-dispatch G437a@t '(any . each-any)))) G4374@t))) (G2f6f@syntax-dispatch G4374@t '()))) G4372@x*))) ((letrec ((G4348@f (lambda (G434a@x) ((lambda (G434c@t) ((lambda (G434e@ls/false) (if G434e@ls/false (apply (lambda (G4350@version-spec*) (values '() (G4347@version-pred G4350@version-spec*))) G434e@ls/false) ((lambda (G4352@t) ((lambda (G4354@ls/false) (if (and G4354@ls/false (apply (lambda (G4356@x G4357@x*) (G4277@idsyn? G4356@x)) G4354@ls/false)) (apply (lambda (G435a@x G435b@x*) (call-with-values (lambda () (G4348@f G435b@x*)) (lambda (G4360@G435e G4361@G435f) ((lambda (G4364@pred G4365@name) (values (cons (G3062@syntax->datum G435a@x) G4365@name) G4364@pred)) G4361@G435f G4360@G435e)))) G4354@ls/false) ((lambda (G4368@t) ((lambda (G436a@ls/false) (if G436a@ls/false (apply (lambda () (values '() (lambda (G436c@x) '#t))) G436a@ls/false) ((lambda (G436e@t) ((lambda (G4370@ls/false) (if G4370@ls/false (apply (lambda () (G305c@syntax-violation '#f '"invalid import spec" G4340@spec)) G4370@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G436e@t))) (G2f6f@syntax-dispatch G436e@t '_))) G4368@t))) (G2f6f@syntax-dispatch G4368@t '()))) G4352@t))) (G2f6f@syntax-dispatch G4352@t '(any . any)))) G434c@t))) (G2f6f@syntax-dispatch G434c@t '(each-any)))) G434a@x)))) G4348@f) G4340@spec))) '#f '#f '#f))) (set! G4287@import-library (lambda (G4332@spec*) (call-with-values (lambda () (G4285@parse-library-name G4332@spec*)) (lambda (G4336@G4334 G4337@G4335) ((lambda (G433a@pred G433b@name) (begin (if (null? G433b@name) (G305c@syntax-violation 'import '"empty library name" G4332@spec*) (void)) ((lambda (G433e@lib) (begin (if (not G433e@lib) (G305c@syntax-violation 'import '"cannot find library with required name" G433b@name) (void)) (if (not (G433a@pred (G2b58@G29d0@library-version G433e@lib))) (G305c@syntax-violation 'import '"library does not satisfy version specification" G4332@spec* G433e@lib) (void)) ((G2fe0@imp-collector) G433e@lib) (G2b5c@G29d8@library-subst G433e@lib))) (G2b80@G2a20@find-library-by-name G433b@name)))) G4337@G4335 G4336@G4334))))) (set! G4289@get-import (lambda (G42a4@spec) ((lambda (G42a6@t) ((lambda (G42a8@ls/false) (if (and G42a8@ls/false (apply (lambda (G42aa@x G42ab@x*) (not (memq (G3062@syntax->datum G42aa@x) '(for rename except only prefix library)))) G42a8@ls/false)) (apply (lambda (G42ae@x G42af@x*) (G4287@import-library (cons G42ae@x G42af@x*))) G42a8@ls/false) ((lambda (G42b2@t) ((lambda (G42b4@ls/false) (if (and G42b4@ls/false (apply (lambda (G42b6@rename G42b7@isp G42b8@old* G42b9@new*) (and (eq? (G3062@syntax->datum G42b6@rename) 'rename) (for-all G4277@idsyn? G42b8@old*) (for-all G4277@idsyn? G42b9@new*))) G42b4@ls/false)) (apply (lambda (G42be@rename G42bf@isp G42c0@old* G42c1@new*) ((lambda (G42c6@subst G42c7@old* G42c8@new*) ((lambda (G42cc@old-label*) ((lambda (G42ce@subst) (G427b@merge-substs (map cons G42c8@new* G42cc@old-label*) G42ce@subst)) (G4281@rem* G42c7@old* G42c6@subst))) (G427f@find* G42c7@old* G42c6@subst))) (G4289@get-import G42bf@isp) (map G3062@syntax->datum G42c0@old*) (map G3062@syntax->datum G42c1@new*))) G42b4@ls/false) ((lambda (G42d0@t) ((lambda (G42d2@ls/false) (if (and G42d2@ls/false (apply (lambda (G42d4@except G42d5@isp G42d6@sym*) (and (eq? (G3062@syntax->datum G42d4@except) 'except) (for-all G4277@idsyn? G42d6@sym*))) G42d2@ls/false)) (apply (lambda (G42da@except G42db@isp G42dc@sym*) ((lambda (G42e0@subst) (G4281@rem* (map G3062@syntax->datum G42dc@sym*) G42e0@subst)) (G4289@get-import G42db@isp))) G42d2@ls/false) ((lambda (G42e2@t) ((lambda (G42e4@ls/false) (if (and G42e4@ls/false (apply (lambda (G42e6@only G42e7@isp G42e8@sym*) (and (eq? (G3062@syntax->datum G42e6@only) 'only) (for-all G4277@idsyn? G42e8@sym*))) G42e4@ls/false)) (apply (lambda (G42ec@only G42ed@isp G42ee@sym*) ((lambda (G42f2@subst G42f3@sym*) ((lambda (G42f6@sym*) ((lambda (G42f8@lab*) (map cons G42f6@sym* G42f8@lab*)) (G427f@find* G42f6@sym* G42f2@subst))) (G4283@remove-dups G42f3@sym*))) (G4289@get-import G42ed@isp) (map G3062@syntax->datum G42ee@sym*))) G42e4@ls/false) ((lambda (G42fa@t) ((lambda (G42fc@ls/false) (if (and G42fc@ls/false (apply (lambda (G42fe@prefix G42ff@isp G4300@p) (and (eq? (G3062@syntax->datum G42fe@prefix) 'prefix) (G4277@idsyn? G4300@p))) G42fc@ls/false)) (apply (lambda (G4304@prefix G4305@isp G4306@p) ((lambda (G430a@subst G430b@prefix) (map (lambda (G430e@x) (cons (string->symbol (string-append G430b@prefix (symbol->string (car G430e@x)))) (cdr G430e@x))) G430a@subst)) (G4289@get-import G4305@isp) (symbol->string (G3062@syntax->datum G4306@p)))) G42fc@ls/false) ((lambda (G4310@t) ((lambda (G4312@ls/false) (if (and G4312@ls/false (apply (lambda (G4314@library G4315@spec*) (eq? (G3062@syntax->datum G4314@library) 'library)) G4312@ls/false)) (apply (lambda (G4318@library G4319@spec*) (G4287@import-library G4319@spec*)) G4312@ls/false) ((lambda (G431c@t) ((lambda (G431e@ls/false) (if (and G431e@ls/false (apply (lambda (G4320@for G4321@isp G4322@rest) (eq? (G3062@syntax->datum G4320@for) 'for)) G431e@ls/false)) (apply (lambda (G4326@for G4327@isp G4328@rest) (G4289@get-import G4327@isp)) G431e@ls/false) ((lambda (G432c@t) ((lambda (G432e@ls/false) (if G432e@ls/false (apply (lambda (G4330@spec) (G305c@syntax-violation 'import '"invalid import spec" G4330@spec)) G432e@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G432c@t))) (G2f6f@syntax-dispatch G432c@t 'any))) G431c@t))) (G2f6f@syntax-dispatch G431c@t '(any any . any)))) G4310@t))) (G2f6f@syntax-dispatch G4310@t '(any each-any)))) G42fa@t))) (G2f6f@syntax-dispatch G42fa@t '(any any any)))) G42e2@t))) (G2f6f@syntax-dispatch G42e2@t '(any any . each-any)))) G42d0@t))) (G2f6f@syntax-dispatch G42d0@t '(any any . each-any)))) G42b2@t))) (G2f6f@syntax-dispatch G42b2@t '(any any . #(each (any any)))))) G42a6@t))) (G2f6f@syntax-dispatch G42a6@t '(any . each-any)))) G42a4@spec))) (set! G428b@add-imports! (lambda (G4294@imp G4295@h) ((lambda (G4298@subst) (for-each (lambda (G429a@x) ((lambda (G429c@name G429d@label) ((lambda (G42a0@t) (if G42a0@t ((lambda (G42a2@l) (if (not (eq? G42a2@l G429d@label)) (G4279@dup-error G429c@name) (void))) G42a0@t) (hashtable-set! G4295@h G429c@name G429d@label))) (hashtable-ref G4295@h G429c@name '#f))) (car G429a@x) (cdr G429a@x))) G4298@subst)) (G4289@get-import G4294@imp)))) (lambda (G428c@imp*) ((letrec ((G428e@f (lambda (G4290@imp* G4291@h) (if (null? G4290@imp*) (hashtable-entries G4291@h) (begin (G428b@add-imports! (car G4290@imp*) G4291@h) (G428e@f (cdr G4290@imp*) G4291@h)))))) G428e@f) G428c@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fd8@make-top-rib (lambda (G4478@names G4479@labels) ((lambda (G447c@rib) (begin (vector-for-each (lambda (G447e@name G447f@label) (begin (if (not (symbol? G447e@name)) (error 'make-top-rib '"BUG: not a symbol" G447e@name) (void)) (G2d23@extend-rib/nc! G447c@rib (G2d3a@make-stx G447e@name G2ce8@top-mark* '() '()) G447f@label))) G4478@names G4479@labels) G447c@rib)) (G2d1d@make-cache-rib)))) (set! G2fda@make-collector (lambda () ((lambda (G4482@ls) (lambda G4486 ((lambda (G4487) (if (= G4487 '0) (apply (lambda () G4482@ls) G4486) (if (= G4487 '1) (apply (lambda (G4484@x) (set! G4482@ls (G2ce1@set-cons G4484@x G4482@ls))) G4486) (error 'apply '"invalid arg count")))) (length G4486)))) '()))) (set! G2fdc@inv-collector (G290c@G2842@make-parameter (lambda G4488@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G448a@x) (begin (if (not (procedure? G448a@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G448a@x) (void)) G448a@x)))) (set! G2fde@vis-collector (G290c@G2842@make-parameter (lambda G448c@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G448e@x) (begin (if (not (procedure? G448e@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G448e@x) (void)) G448e@x)))) (set! G2fe0@imp-collector (G290c@G2842@make-parameter (lambda G4490@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4492@x) (begin (if (not (procedure? G4492@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4492@x) (void)) G4492@x)))) (set! G2fe2@chi-library-internal (lambda (G4494@e* G4495@rib G4496@top?) (call-with-values (lambda () (G2fcc@chi-body* G4494@e* '() '() '() '() '() '() '() G4495@rib G4496@top?)) (lambda (G44a2@G449a G44a3@G449b G44a4@G449c G44a5@G449d G44a6@G449e G44a7@G449f G44a8@G44a0 G44a9@G44a1) ((lambda (G44b2@exp* G44b3@_kwd* G44b4@mod** G44b5@rhs* G44b6@lex* G44b7@mr G44b8@r G44b9@e*) (values (append (apply append (reverse G44b4@mod**)) G44b9@e*) G44b8@r G44b7@mr (reverse G44b6@lex*) (reverse G44b5@rhs*) G44b2@exp*)) G44a9@G44a1 G44a8@G44a0 G44a7@G449f G44a6@G449e G44a5@G449d G44a4@G449c G44a3@G449b G44a2@G449a))))) (set! G2fe4@chi-interaction-expr (lambda (G44c2@e G44c3@rib G44c4@r) (call-with-values (lambda () (G2fcc@chi-body* (list G44c2@e) G44c4@r G44c4@r '() '() '() '() '() G44c3@rib '#t)) (lambda (G44d0@G44c8 G44d1@G44c9 G44d2@G44ca G44d3@G44cb G44d4@G44cc G44d5@G44cd G44d6@G44ce G44d7@G44cf) ((lambda (G44e0@_exp* G44e1@_kwd* G44e2@mod** G44e3@rhs* G44e4@lex* G44e5@mr G44e6@r G44e7@e*) ((lambda (G44f0@e*) ((lambda (G44f2@e) (values G44f2@e G44e6@r)) (if (null? G44f0@e*) (G2cce@G2c40@build-void) (if (null? (cdr G44f0@e*)) (car G44f0@e*) (G2ccd@G2c3e@build-sequence '#f G44f0@e*))))) (G2fa1@expand-interaction-rhs*/init* (reverse G44e4@lex*) (reverse G44e3@rhs*) (append (apply append (reverse G44e2@mod**)) G44e7@e*) G44e6@r G44e5@mr))) G44d7@G44cf G44d6@G44ce G44d5@G44cd G44d4@G44cc G44d3@G44cb G44d2@G44ca G44d1@G44c9 G44d0@G44c8))))) (set! G2fe6@library-body-expander (lambda (G44f4@name G44f5@main-exp* G44f6@imp* G44f7@b* G44f8@top?) ((lambda (G44ff@itc) (begin (set! G44ff@itc (G2fda@make-collector)) ((lambda (G4504@G4500 G4505@G4501 G4506@G4502 G4507@G4503) ((lambda (G450c@swap) (dynamic-wind G450c@swap (lambda () (call-with-values (lambda () (G2fd6@parse-import-spec* G44f6@imp*)) (lambda (G4510@G450e G4511@G450f) ((lambda (G4514@subst-labels G4515@subst-names) ((lambda (G4518@rib) ((lambda (G451b@wrap) (begin (set! G451b@wrap (lambda (G4587@x) (G2d3a@make-stx G4587@x G2ce8@top-mark* (list G4518@rib) '()))) ((lambda (G451c@b* G451d@main-exp* G451e@rtc G451f@vtc) ((lambda (G4528@G4524 G4529@G4525 G452a@G4526 G452b@G4527) ((lambda (G4530@swap) (dynamic-wind G4530@swap (lambda () (call-with-values (lambda () (G2fe2@chi-library-internal G451c@b* G4518@rib G44f8@top?)) (lambda (G4538@G4532 G4539@G4533 G453a@G4534 G453b@G4535 G453c@G4536 G453d@G4537) ((lambda (G4544@internal-exp* G4545@rhs* G4546@lex* G4547@mr G4548@r G4549@init*) (call-with-values (lambda () (G2fd0@parse-exports (append G451d@main-exp* G4544@internal-exp*))) (lambda (G4552@G4550 G4553@G4551) ((lambda (G4556@exp-id* G4557@exp-name*) (begin (G2d27@seal-rib! G4518@rib) ((lambda (G455a@init*) ((lambda (G455c@rhs*) ((lambda () (begin (G2d29@unseal-rib! G4518@rib) ((lambda (G455e@loc* G455f@export-subst) ((lambda (G4563@errstr) (begin (set! G4563@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3046@make-export-env/macros G4546@lex* G455e@loc* G4548@r)) (lambda (G4567@G4564 G4568@G4565 G4569@G4566) ((lambda (G456d@macro* G456e@global* G456f@export-env) (begin (for-each (lambda (G4573@s) ((lambda (G4575@name G4576@label) ((lambda (G4579@p) (if G4579@p ((lambda (G457b@b) ((lambda (G457d@type) (if (eq? G457d@type 'mutable) (G305c@syntax-violation 'export G4563@errstr G4575@name) (void))) (car G457b@b))) (cdr G4579@p)) (void))) (assq G4576@label G456f@export-env))) (car G4573@s) (cdr G4573@s))) G455f@export-subst) ((lambda (G457f@invoke-body G4580@invoke-definitions) (values (G44ff@itc) (G451e@rtc) (G451f@vtc) (G2ccd@G2c3e@build-sequence '#f (append G4580@invoke-definitions (list G457f@invoke-body))) G456d@macro* G455f@export-subst G456f@export-env)) (G2cd0@G2c44@build-letrec* '#f G4546@lex* G455c@rhs* (G3042@build-exports G456e@global* G455a@init*)) (map G2cc9@G2b8e@build-global-define (map cdr G456e@global*))))) G4569@G4566 G4568@G4565 G4567@G4564))))) '#f)) (map G2cee@gen-global G4546@lex*) (G3044@make-export-subst G4557@exp-name* G4556@exp-id*)))))) (G2fa3@chi-rhs* G4545@rhs* G4548@r G4547@mr))) (G2f8f@chi-expr* G4549@init* G4548@r G4547@mr)))) G4553@G4551 G4552@G4550)))) G453d@G4537 G453c@G4536 G453b@G4535 G453a@G4534 G4539@G4533 G4538@G4532)))) G4530@swap)) (lambda () (begin ((lambda (G4583@t) (begin (G4528@G4524 G452a@G4526) (set! G452a@G4526 G4583@t))) (G4528@G4524)) ((lambda (G4585@t) (begin (G4529@G4525 G452b@G4527) (set! G452b@G4527 G4585@t))) (G4529@G4525)))))) G2fdc@inv-collector G2fde@vis-collector G451e@rtc G451f@vtc)) (map G451b@wrap G44f7@b*) (map G451b@wrap G44f5@main-exp*) (G2fda@make-collector) (G2fda@make-collector)))) '#f)) (G2fd8@make-top-rib G4515@subst-names G4514@subst-labels))) G4511@G450f G4510@G450e)))) G450c@swap)) (lambda () (begin ((lambda (G4589@t) (begin (G4504@G4500 G4506@G4502) (set! G4506@G4502 G4589@t))) (G4504@G4500)) ((lambda (G458b@t) (begin (G4505@G4501 G4507@G4503) (set! G4507@G4503 G458b@t))) (G4505@G4501)))))) G2fe0@imp-collector G306a@top-level-context G44ff@itc '#f))) '#f))) (set! G2fe8@core-library-expander (lambda (G458d@e G458e@verify-name) (call-with-values (lambda () (G2fd4@parse-library G458d@e)) (lambda (G4595@G4591 G4596@G4592 G4597@G4593 G4598@G4594) ((lambda (G459d@b* G459e@imp* G459f@exp* G45a0@name*) (call-with-values (lambda () (G2fd2@parse-library-name G45a0@name*)) (lambda (G45a7@G45a5 G45a8@G45a6) ((lambda (G45ab@ver G45ac@name) (begin (G458e@verify-name G45ac@name) (call-with-values (lambda () (G2fe6@library-body-expander G45ac@name G459f@exp* G459e@imp* G459d@b* '#f)) (lambda (G45b6@G45af G45b7@G45b0 G45b8@G45b1 G45b9@G45b2 G45ba@G45b3 G45bb@G45b4 G45bc@G45b5) ((lambda (G45c4@export-env G45c5@export-subst G45c6@visit-code G45c7@invoke-code G45c8@visit-req* G45c9@invoke-req* G45ca@imp*) (values G45ac@name G45ab@ver G45ca@imp* G45c9@invoke-req* G45c8@visit-req* G45c7@invoke-code G45c6@visit-code G45c5@export-subst G45c4@export-env)) G45bc@G45b5 G45bb@G45b4 G45ba@G45b3 G45b9@G45b2 G45b8@G45b1 G45b7@G45b0 G45b6@G45af))))) G45a8@G45a6 G45a7@G45a5)))) G4598@G4594 G4597@G4593 G4596@G4592 G4595@G4591))))) (set! G2fea@parse-top-level-program (lambda (G45d2@e*) ((lambda (G45d4@t) ((lambda (G45d6@ls/false) (if (and G45d6@ls/false (apply (lambda (G45d8@import G45d9@imp* G45da@b*) (eq? (G3062@syntax->datum G45d8@import) 'import)) G45d6@ls/false)) (apply (lambda (G45de@import G45df@imp* G45e0@b*) (values G45df@imp* G45e0@b*)) G45d6@ls/false) ((lambda (G45e4@t) ((lambda (G45e6@ls/false) (if (and G45e6@ls/false (apply (lambda (G45e8@import G45e9@x G45ea@y) (eq? (G3062@syntax->datum G45e8@import) 'import)) G45e6@ls/false)) (apply (lambda (G45ee@import G45ef@x G45f0@y) (G305c@syntax-violation 'expander '"invalid syntax of top-level program" (G2d6a@syntax-car G45d2@e*))) G45e6@ls/false) ((lambda (G45f4@t) ((lambda (G45f6@ls/false) (if G45f6@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45f6@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G45f4@t))) (G2f6f@syntax-dispatch G45f4@t '_))) G45e4@t))) (G2f6f@syntax-dispatch G45e4@t '((any . any) . any)))) G45d4@t))) (G2f6f@syntax-dispatch G45d4@t '((any . each-any) . each-any)))) G45d2@e*))) (set! G2fec@top-level-expander (lambda (G45f8@e*) (call-with-values (lambda () (G2fea@parse-top-level-program G45f8@e*)) (lambda (G45fc@G45fa G45fd@G45fb) ((lambda (G4600@b* G4601@imp*) (call-with-values (lambda () (G2fe6@library-body-expander '() '() G4601@imp* G4600@b* '#t)) (lambda (G460b@G4604 G460c@G4605 G460d@G4606 G460e@G4607 G460f@G4608 G4610@G4609 G4611@G460a) ((lambda (G4619@export-env G461a@export-subst G461b@visit-code G461c@invoke-code G461d@visit-req* G461e@invoke-req* G461f@imp*) (values G461e@invoke-req* G461c@invoke-code)) G4611@G460a G4610@G4609 G460f@G4608 G460e@G4607 G460d@G4606 G460c@G4605 G460b@G4604)))) G45fd@G45fb G45fc@G45fa))))) (set! G2ff2@G2fed (make-record-type-descriptor 'env '#f 'G2ff0 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2ff4@G2fef '#f) (set! G2ff6@G2fee (make-record-constructor-descriptor G2ff2@G2fed '#f G2ff4@G2fef)) (set! G2ff9@env? (record-predicate G2ff2@G2fed)) (set! G2ffb@make-env (record-constructor G2ff6@G2fee)) (set! G2ffd@env-names (record-accessor G2ff2@G2fed '0)) (set! G2fff@env-labels (record-accessor G2ff2@G2fed '1)) (set! G3001@env-itc (record-accessor G2ff2@G2fed '2)) (set! G3003@set-env-names! (record-mutator G2ff2@G2fed '0)) (set! G3005@set-env-labels! (record-mutator G2ff2@G2fed '1)) (set! G3007@set-env-itc! (record-mutator G2ff2@G2fed '2)) (set! G3009@rp (G2909@G283c@make-record-printer 'env (lambda (G4627@x G4628@p G4629@wr) (display '"#<environment>" G4628@p)))) (set! G300f@G300a (make-record-type-descriptor 'interaction-env '#f 'G300d '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3011@G300c '#f) (set! G3013@G300b (make-record-constructor-descriptor G300f@G300a '#f G3011@G300c)) (set! G3016@interaction-env? (record-predicate G300f@G300a)) (set! G3018@make-interaction-env (record-constructor G3013@G300b)) (set! G301a@interaction-env-rib (record-accessor G300f@G300a '0)) (set! G301c@interaction-env-r (record-accessor G300f@G300a '1)) (set! G301e@interaction-env-locs (record-accessor G300f@G300a '2)) (set! G3020@set-interaction-env-rib! (record-mutator G300f@G300a '0)) (set! G3022@set-interaction-env-r! (record-mutator G300f@G300a '1)) (set! G3024@set-interaction-env-locs! (record-mutator G300f@G300a '2)) (set! G3026@rp (G2909@G283c@make-record-printer 'interaction-env (lambda (G462d@x G462e@p G462f@wr) (display '"#<environment>" G462e@p)))) (set! G3028@interaction-environment-symbols (lambda () (G3030@environment-symbols (G3068@interaction-environment)))) (set! G302a@environment-bindings (lambda (G4633@e) (vector->list (vector-map (lambda (G4635@name G4636@label) (G302c@parse-binding (cons G4635@name (G2b86@G2a2c@imported-label->binding G4636@label)))) (G2ffd@env-names G4633@e) (G2fff@env-labels G4633@e))))) (set! G302c@parse-binding (lambda (G4639@b) (cons (car G4639@b) ((lambda (G463b@t) (if (memv G463b@t '(core-prim global)) 'procedure (if (memv G463b@t '(core-macro macro global-macro)) 'syntax (if (memv G463b@t '($core-rtd)) 'record (if (eq? (car G4639@b) (cadr G4639@b)) 'syntax 'unknown))))) (cadr G4639@b))))) (set! G302e@environment? (lambda (G463d@x) (or (G2ff9@env? G463d@x) (G3016@interaction-env? G463d@x)))) (set! G3030@environment-symbols (lambda (G463f@x) (if (G2ff9@env? G463f@x) (vector->list (G2ffd@env-names G463f@x)) (if (G3016@interaction-env? G463f@x) (map values (G2d07@rib-sym* (G301a@interaction-env-rib G463f@x))) (assertion-violation 'environment-symbols '"not an environment" G463f@x))))) (set! G3032@environment (lambda G4641@imp* ((lambda (G4643@itc) ((lambda (G4647@G4645 G4648@G4646) ((lambda (G464b@swap) (dynamic-wind G464b@swap (lambda () (call-with-values (lambda () (G2fd6@parse-import-spec* G4641@imp*)) (lambda (G464f@G464d G4650@G464e) ((lambda (G4653@subst-labels G4654@subst-names) (G2ffb@make-env G4654@subst-names G4653@subst-labels G4643@itc)) G4650@G464e G464f@G464d)))) G464b@swap)) (lambda () ((lambda (G4657@t) (begin (G4647@G4645 G4648@G4646) (set! G4648@G4646 G4657@t))) (G4647@G4645))))) G2fe0@imp-collector G4643@itc)) (G2fda@make-collector)))) (set! G3034@null-environment (lambda (G4659@n) (begin (if (not (eqv? G4659@n '5)) (assertion-violation 'null-environment '"not 5" G4659@n) (void)) (G3032@environment '(psyntax null-environment-5))))) (set! G3036@scheme-report-environment (lambda (G465b@n) (begin (if (not (eqv? G465b@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G465b@n) (void)) (G3032@environment '(psyntax scheme-report-environment-5))))) (set! G3038@expand (lambda (G465d@x G465e@env) (if (G2ff9@env? G465e@env) ((lambda (G4661@rib) ((lambda (G4663@x G4664@itc G4665@rtc G4666@vtc) ((lambda (G466b@x) (begin (G2d27@seal-rib! G4661@rib) (values G466b@x (G4665@rtc)))) ((lambda (G4675@G466d G4676@G466e G4677@G466f G4678@G4670 G4679@G4671 G467a@G4672 G467b@G4673 G467c@G4674) ((lambda (G4685@swap) (dynamic-wind G4685@swap (lambda () (G2f93@chi-expr G4663@x '() '())) G4685@swap)) (lambda () (begin ((lambda (G4687@t) (begin (G4675@G466d G4679@G4671) (set! G4679@G4671 G4687@t))) (G4675@G466d)) ((lambda (G4689@t) (begin (G4676@G466e G467a@G4672) (set! G467a@G4672 G4689@t))) (G4676@G466e)) ((lambda (G468b@t) (begin (G4677@G466f G467b@G4673) (set! G467b@G4673 G468b@t))) (G4677@G466f)) ((lambda (G468d@t) (begin (G4678@G4670 G467c@G4674) (set! G467c@G4674 G468d@t))) (G4678@G4670)))))) G306a@top-level-context G2fdc@inv-collector G2fde@vis-collector G2fe0@imp-collector '#f G4665@rtc G4666@vtc G4664@itc))) (G2d3a@make-stx G465d@x G2ce8@top-mark* (list G4661@rib) '()) (G3001@env-itc G465e@env) (G2fda@make-collector) (G2fda@make-collector))) (G2fd8@make-top-rib (G2ffd@env-names G465e@env) (G2fff@env-labels G465e@env))) (if (G3016@interaction-env? G465e@env) ((lambda (G468f@rib G4690@r G4691@rtc) ((lambda (G4695@x) (call-with-values (lambda () ((lambda (G46a1@G4699 G46a2@G469a G46a3@G469b G46a4@G469c G46a5@G469d G46a6@G469e G46a7@G469f G46a8@G46a0) ((lambda (G46b1@swap) (dynamic-wind G46b1@swap (lambda () (G2fe4@chi-interaction-expr G4695@x G468f@rib G4690@r)) G46b1@swap)) (lambda () (begin ((lambda (G46b3@t) (begin (G46a1@G4699 G46a5@G469d) (set! G46a5@G469d G46b3@t))) (G46a1@G4699)) ((lambda (G46b5@t) (begin (G46a2@G469a G46a6@G469e) (set! G46a6@G469e G46b5@t))) (G46a2@G469a)) ((lambda (G46b7@t) (begin (G46a3@G469b G46a7@G469f) (set! G46a7@G469f G46b7@t))) (G46a3@G469b)) ((lambda (G46b9@t) (begin (G46a4@G469c G46a8@G46a0) (set! G46a8@G46a0 G46b9@t))) (G46a4@G469c)))))) G306a@top-level-context G2fdc@inv-collector G2fde@vis-collector G2fe0@imp-collector G465e@env G4691@rtc (G2fda@make-collector) (G2fda@make-collector))) (lambda (G46bb@G4697 G46bc@G4698) ((lambda (G46bf@r^ G46c0@e) (begin (G3022@set-interaction-env-r! G465e@env G46bf@r^) (values G46c0@e (G4691@rtc)))) G46bc@G4698 G46bb@G4697)))) (G2d3a@make-stx G465d@x G2ce8@top-mark* (list G468f@rib) '()))) (G301a@interaction-env-rib G465e@env) (G301c@interaction-env-r G465e@env) (G2fda@make-collector)) (assertion-violation 'expand '"not an environment" G465e@env))))) (set! G303a@eval (lambda (G46c3@x G46c4@env) (begin (if (not (G302e@environment? G46c4@env)) (error 'eval '"not an environment" G46c4@env) (void)) (call-with-values (lambda () (G3038@expand G46c3@x G46c4@env)) (lambda (G46c9@G46c7 G46ca@G46c8) ((lambda (G46cd@invoke-req* G46ce@x) (begin (for-each G2b87@G2a2e@invoke-library G46cd@invoke-req*) (eval-core (G2960@G2918@expanded->core G46ce@x)))) G46ca@G46c8 G46c9@G46c7)))))) (set! G303c@library-expander (lambda G4736 ((lambda (G4737) (if (= G4737 '3) (apply (lambda (G46d1@x G46d2@filename G46d3@verify-name) ((lambda (G46d8@build-visit-code G46da@visit!) (begin (set! G46d8@build-visit-code (lambda (G4724@macro*) (if (null? G4724@macro*) (G2cce@G2c40@build-void) (G2ccd@G2c3e@build-sequence '#f (map (lambda (G4726@x) ((lambda (G4728@loc G4729@src) (list 'set! G4728@loc G4729@src)) (car G4726@x) (cddr G4726@x))) G4724@macro*))))) (set! G46da@visit! (lambda (G471c@macro*) (for-each (lambda (G471e@x) ((lambda (G4720@loc G4721@proc) (set-symbol-value! G4720@loc G4721@proc)) (car G471e@x) (cadr G471e@x))) G471c@macro*))) (call-with-values (lambda () (G2fe8@core-library-expander G46d1@x G46d3@verify-name)) (lambda (G46e4@G46db G46e5@G46dc G46e6@G46dd G46e7@G46de G46e8@G46df G46e9@G46e0 G46ea@G46e1 G46eb@G46e2 G46ec@G46e3) ((lambda (G46f6@export-env G46f7@export-subst G46f8@macro* G46f9@invoke-code G46fa@vis* G46fb@inv* G46fc@imp* G46fd@ver G46fe@name) ((lambda (G4708@id G4709@name G470a@ver G470b@imp* G470c@vis* G470d@inv* G470e@visit-proc G470f@invoke-proc G4710@visit-code G4711@invoke-code) (begin (G2b85@G2a2a@install-library G4708@id G4709@name G470a@ver G470b@imp* G470c@vis* G470d@inv* G46f7@export-subst G46f6@export-env G470e@visit-proc G470f@invoke-proc G4710@visit-code G4711@invoke-code '#t G46d2@filename) (values G4708@id G4709@name G470a@ver G470b@imp* G470c@vis* G470d@inv* G4711@invoke-code G4710@visit-code G46f7@export-subst G46f6@export-env))) (gensym) G46fe@name G46fd@ver (map G2b8b@G2a36@library-spec G46fc@imp*) (map G2b8b@G2a36@library-spec G46fa@vis*) (map G2b8b@G2a36@library-spec G46fb@inv*) (lambda () (G46da@visit! G46f8@macro*)) (lambda () (eval-core (G2960@G2918@expanded->core G46f9@invoke-code))) (G46d8@build-visit-code G46f8@macro*) G46f9@invoke-code)) G46ec@G46e3 G46eb@G46e2 G46ea@G46e1 G46e9@G46e0 G46e8@G46df G46e7@G46de G46e6@G46dd G46e5@G46dc G46e4@G46db))))) '#f '#f)) G4736) (if (= G4737 '2) (apply (lambda (G472c@x G472d@filename) (G303c@library-expander G472c@x G472d@filename (lambda (G4730@x) (values)))) G4736) (if (= G4737 '1) (apply (lambda (G4732@x) (G303c@library-expander G4732@x '#f (lambda (G4734@x) (values)))) G4736) (error 'apply '"invalid arg count"))))) (length G4736)))) (set! G303e@boot-library-expand (lambda (G4738@x) (call-with-values (lambda () (G303c@library-expander G4738@x)) (lambda (G4744@G473a G4745@G473b G4746@G473c G4747@G473d G4748@G473e G4749@G473f G474a@G4740 G474b@G4741 G474c@G4742 G474d@G4743) ((lambda (G4758@export-env G4759@export-subst G475a@visit-code G475b@invoke-code G475c@inv* G475d@vis* G475e@imp* G475f@ver G4760@name G4761@id) (values G4760@name G475b@invoke-code G4759@export-subst G4758@export-env)) G474d@G4743 G474c@G4742 G474b@G4741 G474a@G4740 G4749@G473f G4748@G473e G4747@G473d G4746@G473c G4745@G473b G4744@G473a))))) (set! G3040@rev-map-append (lambda (G476c@f G476d@ls G476e@ac) (if (null? G476d@ls) G476e@ac (G3040@rev-map-append G476c@f (cdr G476d@ls) (cons (G476c@f (car G476d@ls)) G476e@ac))))) (set! G3042@build-exports (lambda (G4772@lex*+loc* G4773@init*) (G2ccd@G2c3e@build-sequence '#f (cons (G2cce@G2c40@build-void) (G3040@rev-map-append (lambda (G4776@x) (list 'set! (cdr G4776@x) (car G4776@x))) G4772@lex*+loc* G4773@init*))))) (set! G3044@make-export-subst (lambda (G4778@name* G4779@id*) (map (lambda (G477c@name G477d@id) ((lambda (G4780@label) (begin (if (not G4780@label) (G305c@syntax-violation '#f '"cannot export unbound identifier" G477d@id) (void)) (cons G477c@name G4780@label))) (G2d8a@id->label G477d@id))) G4778@name* G4779@id*))) (set! G3046@make-export-env/macros (lambda (G4782@lex* G4783@loc* G4784@r) ((lambda (G4789@lookup) (begin (set! G4789@lookup (lambda (G47a6@x) ((letrec ((G47a8@f (lambda (G47aa@x G47ab@lex* G47ac@loc*) (if (pair? G47ab@lex*) (if (eq? G47aa@x (car G47ab@lex*)) (car G47ac@loc*) (G47a8@f G47aa@x (cdr G47ab@lex*) (cdr G47ac@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G47a8@f) G47a6@x G4782@lex* G4783@loc*))) ((letrec ((G478a@f (lambda (G478c@r G478d@env G478e@global* G478f@macro*) (if (null? G478c@r) (values G478d@env G478e@global* G478f@macro*) ((lambda (G4794@x) ((lambda (G4796@label G4797@b) ((lambda (G479a@t) (if (memv G479a@t '(lexical)) ((lambda (G479c@v) ((lambda (G479e@loc G479f@type) (G478a@f (cdr G478c@r) (cons (cons* G4796@label G479f@type G479e@loc) G478d@env) (cons (cons (G2efb@lexical-var G479c@v) G479e@loc) G478e@global*) G478f@macro*)) (G4789@lookup (G2efb@lexical-var G479c@v)) (if (G2efd@lexical-mutable? G479c@v) 'mutable 'global))) (G2d94@binding-value G4797@b)) (if (memv G479a@t '(local-macro)) ((lambda (G47a2@loc) (G478a@f (cdr G478c@r) (cons (cons* G4796@label 'global-macro G47a2@loc) G478d@env) G478e@global* (cons (cons G47a2@loc (G2d94@binding-value G4797@b)) G478f@macro*))) (gensym)) (if (memv G479a@t '(local-macro!)) ((lambda (G47a4@loc) (G478a@f (cdr G478c@r) (cons (cons* G4796@label 'global-macro! G47a4@loc) G478d@env) G478e@global* (cons (cons G47a4@loc (G2d94@binding-value G4797@b)) G478f@macro*))) (gensym)) (if (memv G479a@t '($rtd $module)) (G478a@f (cdr G478c@r) (cons G4794@x G478d@env) G478e@global* G478f@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d92@binding-type G4797@b) (G2d94@binding-value G4797@b))))))) (G2d92@binding-type G4797@b))) (car G4794@x) (cdr G4794@x))) (car G478c@r)))))) G478a@f) G4784@r '() '() '()))) '#f))) (set! G3048@generate-temporaries (lambda (G47b0@ls) ((lambda (G47b2@t) ((lambda (G47b4@ls/false) (if G47b4@ls/false (apply (lambda (G47b6@ls) (map (lambda (G47b8@x) (G2d3a@make-stx ((lambda (G47ba@x) (if (or (symbol? G47ba@x) (string? G47ba@x)) (gensym G47ba@x) (gensym 't))) (G3062@syntax->datum G47b8@x)) G2ce8@top-mark* '() '())) G47b6@ls)) G47b4@ls/false) ((lambda (G47bc@t) ((lambda (G47be@ls/false) (if G47be@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47be@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G47bc@t))) (G2f6f@syntax-dispatch G47bc@t '_))) G47b2@t))) (G2f6f@syntax-dispatch G47b2@t 'each-any))) G47b0@ls))) (set! G304a@free-identifier=? (lambda (G47c0@x G47c1@y) (if (G2d70@id? G47c0@x) (if (G2d70@id? G47c1@y) (G2d78@free-id=? G47c0@x G47c1@y) (assertion-violation 'free-identifier=? '"not an identifier" G47c1@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47c0@x)))) (set! G304c@bound-identifier=? (lambda (G47c4@x G47c5@y) (if (G2d70@id? G47c4@x) (if (G2d70@id? G47c5@y) (G2d76@bound-id=? G47c4@x G47c5@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47c5@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47c4@x)))) (set! G304e@make-source-condition (lambda (G47c8@x) ((lambda (G47d2@G47cd G47d4@G47cf G47d6@G47ce G47d9@G47cc G47db@make-source-condition G47dd@G47ca G47df@G47cb G47e1@source-condition? G47e3@source-filename G47e5@source-character) (begin (set! G47d2@G47cd (make-record-type-descriptor '&source-information G4c42@G4993@&condition-rtd 'G47d0 '#f '#f '#((immutable file-name) (immutable character)))) (set! G47d4@G47cf '#f) (set! G47d6@G47ce (make-record-constructor-descriptor G47d2@G47cd G4c43@G4995@&condition-rcd G47d4@G47cf)) (set! G47d9@G47cc (record-predicate G47d2@G47cd)) (set! G47db@make-source-condition (record-constructor G47d6@G47ce)) (set! G47dd@G47ca (record-accessor G47d2@G47cd '0)) (set! G47df@G47cb (record-accessor G47d2@G47cd '1)) (set! G47e1@source-condition? (condition-predicate G47d2@G47cd)) (set! G47e3@source-filename (condition-accessor G47d2@G47cd G47dd@G47ca)) (set! G47e5@source-character (condition-accessor G47d2@G47cd G47df@G47cb)) (if (pair? G47c8@x) (G47db@make-source-condition (car G47c8@x) (cdr G47c8@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3050@extract-position-condition (lambda (G47e6@x) (G304e@make-source-condition (G3052@expression-position G47e6@x)))) (set! G3052@expression-position (lambda (G47e8@x) (and (G2d38@stx? G47e8@x) ((lambda (G47ea@x) (and (G2901@G282c@annotation? G47ea@x) (G2902@G282e@annotation-source G47ea@x))) (G2d3c@stx-expr G47e8@x))))) (set! G3054@assertion-error (lambda (G47ec@expr G47ed@pos) (raise (condition (G4c72@G4a55@make-assertion-violation) (G4c84@G4a85@make-who-condition 'assert) (G4c48@G49e8@make-message-condition '"assertion failed") (G4c7a@G4a6b@make-irritants-condition (list G47ec@expr)) (G304e@make-source-condition G47ed@pos))))) (set! G3056@syntax-error (lambda (G47f0@x . G47f2@args) (begin (if (not (for-all string? G47f2@args)) (assertion-violation 'syntax-error '"invalid argument" G47f2@args) (void)) (raise (condition (G4c48@G49e8@make-message-condition (if (null? G47f2@args) '"invalid syntax" (apply string-append G47f2@args))) (G4ca6@G4adf@make-syntax-violation (G3062@syntax->datum G47f0@x) '#f) (G3050@extract-position-condition G47f0@x) (G3058@extract-trace G47f0@x)))))) (set! G3058@extract-trace (lambda (G47f4@x) ((lambda (G47fd@G47f8 G47ff@G47fa G4801@G47f9 G4804@G47f7 G4806@make-trace G4808@G47f6 G480a@trace? G480c@trace-form) (begin (set! G47fd@G47f8 (make-record-type-descriptor '&trace G4c42@G4993@&condition-rtd 'G47fb '#f '#f '#((immutable form)))) (set! G47ff@G47fa '#f) (set! G4801@G47f9 (make-record-constructor-descriptor G47fd@G47f8 G4c43@G4995@&condition-rcd G47ff@G47fa)) (set! G4804@G47f7 (record-predicate G47fd@G47f8)) (set! G4806@make-trace (record-constructor G4801@G47f9)) (set! G4808@G47f6 (record-accessor G47fd@G47f8 '0)) (set! G480a@trace? (condition-predicate G47fd@G47f8)) (set! G480c@trace-form (condition-accessor G47fd@G47f8 G4808@G47f6)) ((letrec ((G480d@f (lambda (G480f@x) (if (G2d38@stx? G480f@x) (apply condition (G4806@make-trace G480f@x) (map G480d@f (G2d42@stx-ae* G480f@x))) (if (G2901@G282c@annotation? G480f@x) (G4806@make-trace (G2d3a@make-stx G480f@x '() '() '())) (condition)))))) G480d@f) G47f4@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G305a@syntax-violation* (lambda (G4811@who G4812@msg G4813@form G4814@condition-object) (begin (if (not (string? G4812@msg)) (assertion-violation 'syntax-violation '"message is not a string" G4812@msg) (void)) ((lambda (G4819@who) (raise (condition (if G4819@who (G4c84@G4a85@make-who-condition G4819@who) (condition)) (G4c48@G49e8@make-message-condition G4812@msg) G4814@condition-object (G3050@extract-position-condition G4813@form) (G3058@extract-trace G4813@form)))) (if (or (string? G4811@who) (symbol? G4811@who)) G4811@who (if (not G4811@who) ((lambda (G481b@t) ((lambda (G481d@ls/false) (if (and G481d@ls/false (apply (lambda (G481f@id) (G2d70@id? G481f@id)) G481d@ls/false)) (apply (lambda (G4821@id) (G3062@syntax->datum G4821@id)) G481d@ls/false) ((lambda (G4823@t) ((lambda (G4825@ls/false) (if (and G4825@ls/false (apply (lambda (G4827@id G4828@rest) (G2d70@id? G4827@id)) G4825@ls/false)) (apply (lambda (G482b@id G482c@rest) (G3062@syntax->datum G482b@id)) G4825@ls/false) ((lambda (G482f@t) ((lambda (G4831@ls/false) (if G4831@ls/false (apply (lambda () '#f) G4831@ls/false) (G305c@syntax-violation '#f '"invalid syntax" G482f@t))) (G2f6f@syntax-dispatch G482f@t '_))) G4823@t))) (G2f6f@syntax-dispatch G4823@t '(any . any)))) G481b@t))) (G2f6f@syntax-dispatch G481b@t 'any))) G4813@form) (assertion-violation 'syntax-violation '"invalid who argument" G4811@who))))))) (set! G305c@syntax-violation (lambda G4841 ((lambda (G4842) (if (= G4842 '3) (apply (lambda (G4833@who G4834@msg G4835@form) (G305c@syntax-violation G4833@who G4834@msg G4835@form '#f)) G4841) (if (= G4842 '4) (apply (lambda (G4839@who G483a@msg G483b@form G483c@subform) (G305a@syntax-violation* G4839@who G483a@msg G483b@form (G4ca6@G4adf@make-syntax-violation (G3062@syntax->datum G483b@form) (G3062@syntax->datum G483c@subform)))) G4841) (error 'apply '"invalid arg count")))) (length G4841)))) (set! G305e@identifier? (lambda (G4843@x) (G2d70@id? G4843@x))) (set! G3060@datum->syntax (lambda (G4845@id G4846@datum) (if (G2d70@id? G4845@id) (G2d4e@datum->stx G4845@id G4846@datum) (assertion-violation 'datum->syntax '"not an identifier" G4845@id)))) (set! G3062@syntax->datum (lambda (G4849@x) (G2d86@stx->datum G4849@x))) (set! G3064@compile-r6rs-top-level (lambda (G484b@x*) (call-with-values (lambda () (G2fec@top-level-expander G484b@x*)) (lambda (G484f@G484d G4850@G484e) ((lambda (G4853@invoke-code G4854@lib*) (lambda () (begin (for-each G2b87@G2a2e@invoke-library G4854@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2960@G2918@expanded->core G4853@invoke-code)) (void)) (eval-core (G2960@G2918@expanded->core G4853@invoke-code))))) G4850@G484e G484f@G484d))))) (set! G3066@pre-compile-r6rs-top-level (lambda (G4857@x*) (call-with-values (lambda () (G2fec@top-level-expander G4857@x*)) (lambda (G485b@G4859 G485c@G485a) ((lambda (G485f@invoke-code G4860@lib*) (begin (for-each G2b87@G2a2e@invoke-library G4860@lib*) (G290a@G283e@compile-core (G2960@G2918@expanded->core G485f@invoke-code)))) G485c@G485a G485b@G4859))))) (set! G3068@interaction-environment ((lambda (G4863@the-env) (lambda () (or G4863@the-env ((lambda (G4865@lib G4866@rib) (begin ((lambda (G4869@subst) (begin (G2d11@set-rib-sym*! G4866@rib (map car G4869@subst)) (G2d13@set-rib-mark**! G4866@rib (map (lambda (G486b@x) G2ce8@top-mark*) G4869@subst)) (G2d15@set-rib-label*! G4866@rib (map cdr G4869@subst)))) (G2b5c@G29d8@library-subst G4865@lib)) ((lambda (G486d@env) (begin (set! G4863@the-env G486d@env) G486d@env)) (G3018@make-interaction-env G4866@rib '() '())))) (G2b80@G2a20@find-library-by-name '(mosh interaction)) (G2d1d@make-cache-rib))))) '#f)) (set! G306a@top-level-context (G290c@G2842@make-parameter '#f)) (begin (set! G497e@G306a@top-level-context G306a@top-level-context) (set! G497d@G3068@interaction-environment G3068@interaction-environment) (set! G497c@G3066@pre-compile-r6rs-top-level G3066@pre-compile-r6rs-top-level) (set! G497b@G3064@compile-r6rs-top-level G3064@compile-r6rs-top-level) (set! G497a@G3062@syntax->datum G3062@syntax->datum) (set! G4979@G3060@datum->syntax G3060@datum->syntax) (set! G4978@G305e@identifier? G305e@identifier?) (set! G4977@G305c@syntax-violation G305c@syntax-violation) (set! G4976@G305a@syntax-violation* G305a@syntax-violation*) (set! G4975@G3058@extract-trace G3058@extract-trace) (set! G4974@G3056@syntax-error G3056@syntax-error) (set! G4973@G3054@assertion-error G3054@assertion-error) (set! G4972@G3052@expression-position G3052@expression-position) (set! G4971@G3050@extract-position-condition G3050@extract-position-condition) (set! G4970@G304e@make-source-condition G304e@make-source-condition) (set! G496f@G304c@bound-identifier=? G304c@bound-identifier=?) (set! G496e@G304a@free-identifier=? G304a@free-identifier=?) (set! G496d@G3048@generate-temporaries G3048@generate-temporaries) (set! G496c@G3046@make-export-env/macros G3046@make-export-env/macros) (set! G496b@G3044@make-export-subst G3044@make-export-subst) (set! G496a@G3042@build-exports G3042@build-exports) (set! G4969@G3040@rev-map-append G3040@rev-map-append) (set! G4968@G303e@boot-library-expand G303e@boot-library-expand) (set! G4967@G303c@library-expander G303c@library-expander) (set! G4966@G303a@eval G303a@eval) (set! G4965@G3038@expand G3038@expand) (set! G4964@G3036@scheme-report-environment G3036@scheme-report-environment) (set! G4963@G3034@null-environment G3034@null-environment) (set! G4962@G3032@environment G3032@environment) (set! G4961@G3030@environment-symbols G3030@environment-symbols) (set! G4960@G302e@environment? G302e@environment?) (set! G495f@G302c@parse-binding G302c@parse-binding) (set! G495e@G302a@environment-bindings G302a@environment-bindings) (set! G495d@G3028@interaction-environment-symbols G3028@interaction-environment-symbols) (set! G495c@G3026@rp G3026@rp) (set! G495b@G3024@set-interaction-env-locs! G3024@set-interaction-env-locs!) (set! G495a@G3022@set-interaction-env-r! G3022@set-interaction-env-r!) (set! G4959@G3020@set-interaction-env-rib! G3020@set-interaction-env-rib!) (set! G4958@G301e@interaction-env-locs G301e@interaction-env-locs) (set! G4957@G301c@interaction-env-r G301c@interaction-env-r) (set! G4956@G301a@interaction-env-rib G301a@interaction-env-rib) (set! G4955@G3018@make-interaction-env G3018@make-interaction-env) (set! G4954@G3016@interaction-env? G3016@interaction-env?) (set! G4953@G3013@G300b G3013@G300b) (set! G4952@G3011@G300c G3011@G300c) (set! G4951@G300f@G300a G300f@G300a) (set! G4950@G3009@rp G3009@rp) (set! G494f@G3007@set-env-itc! G3007@set-env-itc!) (set! G494e@G3005@set-env-labels! G3005@set-env-labels!) (set! G494d@G3003@set-env-names! G3003@set-env-names!) (set! G494c@G3001@env-itc G3001@env-itc) (set! G494b@G2fff@env-labels G2fff@env-labels) (set! G494a@G2ffd@env-names G2ffd@env-names) (set! G4949@G2ffb@make-env G2ffb@make-env) (set! G4948@G2ff9@env? G2ff9@env?) (set! G4947@G2ff6@G2fee G2ff6@G2fee) (set! G4946@G2ff4@G2fef G2ff4@G2fef) (set! G4945@G2ff2@G2fed G2ff2@G2fed) (set! G4944@G2fec@top-level-expander G2fec@top-level-expander) (set! G4943@G2fea@parse-top-level-program G2fea@parse-top-level-program) (set! G4942@G2fe8@core-library-expander G2fe8@core-library-expander) (set! G4941@G2fe6@library-body-expander G2fe6@library-body-expander) (set! G4940@G2fe4@chi-interaction-expr G2fe4@chi-interaction-expr) (set! G493f@G2fe2@chi-library-internal G2fe2@chi-library-internal) (set! G493e@G2fe0@imp-collector G2fe0@imp-collector) (set! G493d@G2fde@vis-collector G2fde@vis-collector) (set! G493c@G2fdc@inv-collector G2fdc@inv-collector) (set! G493b@G2fda@make-collector G2fda@make-collector) (set! G493a@G2fd8@make-top-rib G2fd8@make-top-rib) (set! G4939@G2fd6@parse-import-spec* G2fd6@parse-import-spec*) (set! G4938@G2fd4@parse-library G2fd4@parse-library) (set! G4937@G2fd2@parse-library-name G2fd2@parse-library-name) (set! G4936@G2fd0@parse-exports G2fd0@parse-exports) (set! G4935@G2fce@expand-transformer G2fce@expand-transformer) (set! G4934@G2fcc@chi-body* G2fcc@chi-body*) (set! G4933@G2fca@chi-internal-module G2fca@chi-internal-module) (set! G4932@G2fc8@module-interface-exp-id* G2fc8@module-interface-exp-id*) (set! G4931@G2fc6@set-module-interface-exp-lab-vec! G2fc6@set-module-interface-exp-lab-vec!) (set! G4930@G2fc4@set-module-interface-exp-id-vec! G2fc4@set-module-interface-exp-id-vec!) (set! G492f@G2fc2@set-module-interface-first-mark! G2fc2@set-module-interface-first-mark!) (set! G492e@G2fc0@module-interface-exp-lab-vec G2fc0@module-interface-exp-lab-vec) (set! G492d@G2fbe@module-interface-exp-id-vec G2fbe@module-interface-exp-id-vec) (set! G492c@G2fbc@module-interface-first-mark G2fbc@module-interface-first-mark) (set! G492b@G2fba@make-module-interface G2fba@make-module-interface) (set! G492a@G2fb8@module-interface? G2fb8@module-interface?) (set! G4929@G2fb5@G2fad G2fb5@G2fad) (set! G4928@G2fb3@G2fae G2fb3@G2fae) (set! G4927@G2fb1@G2fac G2fb1@G2fac) (set! G4926@G2fab@parse-module G2fab@parse-module) (set! G4925@G2fa9@chi-internal G2fa9@chi-internal) (set! G4924@G2fa7@find-dups G2fa7@find-dups) (set! G4923@G2fa5@find-bound=? G2fa5@find-bound=?) (set! G4922@G2fa3@chi-rhs* G2fa3@chi-rhs*) (set! G4921@G2fa1@expand-interaction-rhs*/init* G2fa1@expand-interaction-rhs*/init*) (set! G4920@G2f9f@chi-rhs G2f9f@chi-rhs) (set! G491f@G2f9d@chi-defun G2f9d@chi-defun) (set! G491e@G2f9b@chi-lambda-clause* G2f9b@chi-lambda-clause*) (set! G491d@G2f99@chi-lambda-clause G2f99@chi-lambda-clause) (set! G491c@G2f97@verify-formals G2f97@verify-formals) (set! G491b@G2f95@chi-set! G2f95@chi-set!) (set! G491a@G2f93@chi-expr G2f93@chi-expr) (set! G4919@G2f91@chi-application G2f91@chi-application) (set! G4918@G2f8f@chi-expr* G2f8f@chi-expr*) (set! G4917@G2f8d@chi-global-macro G2f8d@chi-global-macro) (set! G4916@G2f8b@chi-local-macro G2f8b@chi-local-macro) (set! G4915@G2f89@chi-macro G2f89@chi-macro) (set! G4914@G2f87@do-macro-call G2f87@do-macro-call) (set! G4913@G2f85@local-macro-transformer G2f85@local-macro-transformer) (set! G4912@G2f83@macro-transformer G2f83@macro-transformer) (set! G4911@G2f81@symbol-macro G2f81@symbol-macro) (set! G4910@G2f7f@file-options-macro G2f7f@file-options-macro) (set! G490f@G2f7d@core-macro-transformer G2f7d@core-macro-transformer) (set! G490e@G2f7b@syntax-transformer G2f7b@syntax-transformer) (set! G490d@G2f79@ellipsis-map G2f79@ellipsis-map) (set! G490c@G2f77@syntax-case-transformer G2f77@syntax-case-transformer) (set! G490b@G2f75@verify-literals G2f75@verify-literals) (set! G490a@G2f73@underscore? G2f73@underscore?) (set! G4909@G2f71@ellipsis? G2f71@ellipsis?) (set! G4908@G2f6f@syntax-dispatch G2f6f@syntax-dispatch) (set! G4907@G2f6d@convert-pattern G2f6d@convert-pattern) (set! G4906@G2f6b@foreign-call-transformer G2f6b@foreign-call-transformer) (set! G4905@G2f69@parameterize-macro G2f69@parameterize-macro) (set! G4904@G2f67@incorrect-usage-macro G2f67@incorrect-usage-macro) (set! G4903@G2f65@define-condition-type-macro G2f65@define-condition-type-macro) (set! G4902@G2f63@define-record-type-macro G2f63@define-record-type-macro) (set! G4901@G2f61@define-struct-macro G2f61@define-struct-macro) (set! G4900@G2f5f@quasisyntax-macro G2f5f@quasisyntax-macro) (set! G48ff@G2f5d@quasiquote-macro G2f5d@quasiquote-macro) (set! G48fe@G2f5b@syntax-rules-macro G2f5b@syntax-rules-macro) (set! G48fd@G2f59@include-into-macro G2f59@include-into-macro) (set! G48fc@G2f57@include-macro G2f57@include-macro) (set! G48fb@G2f55@do-include G2f55@do-include) (set! G48fa@G2f53@cond-macro G2f53@cond-macro) (set! G48f9@G2f51@and-macro G2f51@and-macro) (set! G48f8@G2f4f@or-macro G2f4f@or-macro) (set! G48f7@G2f4d@let*-macro G2f4d@let*-macro) (set! G48f6@G2f4b@do-macro G2f4b@do-macro) (set! G48f5@G2f49@identifier-syntax-macro G2f49@identifier-syntax-macro) (set! G48f4@G2f47@endianness-macro G2f47@endianness-macro) (set! G48f3@G2f45@assert-macro G2f45@assert-macro) (set! G48f2@G2f43@delay-macro G2f43@delay-macro) (set! G48f1@G2f41@time-macro G2f41@time-macro) (set! G48f0@G2f3f@define-enumeration-macro G2f3f@define-enumeration-macro) (set! G48ef@G2f3d@guard-macro G2f3d@guard-macro) (set! G48ee@G2f3b@trace-letrec-syntax-macro G2f3b@trace-letrec-syntax-macro) (set! G48ed@G2f39@trace-let-syntax-macro G2f39@trace-let-syntax-macro) (set! G48ec@G2f37@trace-let/rec-syntax G2f37@trace-let/rec-syntax) (set! G48eb@G2f35@trace-define-syntax-macro G2f35@trace-define-syntax-macro) (set! G48ea@G2f33@trace-define-macro G2f33@trace-define-macro) (set! G48e9@G2f31@trace-lambda-macro G2f31@trace-lambda-macro) (set! G48e8@G2f2f@let*-values-macro G2f2f@let*-values-macro) (set! G48e7@G2f2d@let-values-macro G2f2d@let-values-macro) (set! G48e6@G2f2b@let-macro G2f2b@let-macro) (set! G48e5@G2f29@invalid-fmls-error G2f29@invalid-fmls-error) (set! G48e4@G2f27@with-syntax-macro G2f27@with-syntax-macro) (set! G48e3@G2f25@bless G2f25@bless) (set! G48e2@G2f23@lambda-transformer G2f23@lambda-transformer) (set! G48e1@G2f21@case-lambda-transformer G2f21@case-lambda-transformer) (set! G48e0@G2f1f@quote-transformer G2f1f@quote-transformer) (set! G48df@G2f1d@case-macro G2f1d@case-macro) (set! G48de@G2f1b@or-transformer G2f1b@or-transformer) (set! G48dd@G2f19@and-transformer G2f19@and-transformer) (set! G48dc@G2f17@if-transformer G2f17@if-transformer) (set! G48db@G2f15@unless-macro G2f15@unless-macro) (set! G48da@G2f13@when-macro G2f13@when-macro) (set! G48d9@G2f11@record-constructor-descriptor-transformer G2f11@record-constructor-descriptor-transformer) (set! G48d8@G2f0f@record-type-descriptor-transformer G2f0f@record-type-descriptor-transformer) (set! G48d7@G2f0d@type-descriptor-transformer G2f0d@type-descriptor-transformer) (set! G48d6@G2f0b@fluid-let-syntax-transformer G2f0b@fluid-let-syntax-transformer) (set! G48d5@G2f09@letrec*-transformer G2f09@letrec*-transformer) (set! G48d4@G2f07@letrec-transformer G2f07@letrec-transformer) (set! G48d3@G2f05@letrec-helper G2f05@letrec-helper) (set! G48d2@G2f03@add-lexicals G2f03@add-lexicals) (set! G48d1@G2f01@add-lexical G2f01@add-lexical) (set! G48d0@G2eff@set-lexical-mutable! G2eff@set-lexical-mutable!) (set! G48cf@G2efd@lexical-mutable? G2efd@lexical-mutable?) (set! G48ce@G2efb@lexical-var G2efb@lexical-var) (set! G48cd@G2ef9@scheme-stx G2ef9@scheme-stx) (set! G48cc@G2ef7@scheme-stx-hashtable G2ef7@scheme-stx-hashtable) (set! G48cb@G2ef5@parse-define-syntax G2ef5@parse-define-syntax) (set! G48ca@G2ef3@parse-define G2ef3@parse-define) (set! G48c9@G2db0@make-eval-transformer G2db0@make-eval-transformer) (set! G48c8@G2dae@variable-transformer-procedure G2dae@variable-transformer-procedure) (set! G48c7@G2dac@variable-transformer? G2dac@variable-transformer?) (set! G48c6@G2daa@make-variable-transformer G2daa@make-variable-transformer) (set! G48c5@G2da8@sanitize-binding G2da8@sanitize-binding) (set! G48c4@G2d98@syntax-type G2d98@syntax-type) (set! G48c3@G2d96@raise-unbound-error G2d96@raise-unbound-error) (set! G48c2@G2d94@binding-value G2d94@binding-value) (set! G48c1@G2d92@binding-type G2d92@binding-type) (set! G48c0@G2d90@make-binding G2d90@make-binding) (set! G48bf@G2d8e@label->binding G2d8e@label->binding) (set! G48be@G2d8c@id->real-label G2d8c@id->real-label) (set! G48bd@G2d8a@id->label G2d8a@id->label) (set! G48bc@G2d88@same-marks*? G2d88@same-marks*?) (set! G48bb@G2d86@stx->datum G2d86@stx->datum) (set! G48ba@G2d84@strip G2d84@strip) (set! G48b9@G2d82@strip-annotations G2d82@strip-annotations) (set! G48b8@G2d80@self-evaluating? G2d80@self-evaluating?) (set! G48b7@G2d7e@bound-id-member? G2d7e@bound-id-member?) (set! G48b6@G2d7c@distinct-bound-ids? G2d7c@distinct-bound-ids?) (set! G48b5@G2d7a@valid-bound-ids? G2d7a@valid-bound-ids?) (set! G48b4@G2d78@free-id=? G2d78@free-id=?) (set! G48b3@G2d76@bound-id=? G2d76@bound-id=?) (set! G48b2@G2d74@same-marks? G2d74@same-marks?) (set! G48b1@G2d72@id->sym G2d72@id->sym) (set! G48b0@G2d70@id? G2d70@id?) (set! G48af@G2d6e@syntax->list G2d6e@syntax->list) (set! G48ae@G2d6c@syntax-cdr G2d6c@syntax-cdr) (set! G48ad@G2d6a@syntax-car G2d6a@syntax-car) (set! G48ac@G2d68@syntax-list? G2d68@syntax-list?) (set! G48ab@G2d66@syntax-null? G2d66@syntax-null?) (set! G48aa@G2d64@syntax-vector? G2d64@syntax-vector?) (set! G48a9@G2d62@syntax-pair? G2d62@syntax-pair?) (set! G48a8@G2d60@syntax-vector->list G2d60@syntax-vector->list) (set! G48a7@G2d5e@syntax-kind? G2d5e@syntax-kind?) (set! G48a6@G2d5c@add-subst G2d5c@add-subst) (set! G48a5@G2d5a@add-mark G2d5a@add-mark) (set! G48a4@G2d58@mkstx G2d58@mkstx) (set! G48a3@G2d56@join-wraps G2d56@join-wraps) (set! G48a2@G2d54@anti-mark? G2d54@anti-mark?) (set! G48a1@G2d52@anti-mark G2d52@anti-mark) (set! G48a0@G2d50@gen-mark G2d50@gen-mark) (set! G489f@G2d4e@datum->stx G2d4e@datum->stx) (set! G489e@G2d4c@rp G2d4c@rp) (set! G489d@G2d4a@set-stx-ae*! G2d4a@set-stx-ae*!) (set! G489c@G2d48@set-stx-subst*! G2d48@set-stx-subst*!) (set! G489b@G2d46@set-stx-mark*! G2d46@set-stx-mark*!) (set! G489a@G2d44@set-stx-expr! G2d44@set-stx-expr!) (set! G4899@G2d42@stx-ae* G2d42@stx-ae*) (set! G4898@G2d40@stx-subst* G2d40@stx-subst*) (set! G4897@G2d3e@stx-mark* G2d3e@stx-mark*) (set! G4896@G2d3c@stx-expr G2d3c@stx-expr) (set! G4895@G2d3a@make-stx G2d3a@make-stx) (set! G4894@G2d38@stx? G2d38@stx?) (set! G4893@G2d35@G2d2d G2d35@G2d2d) (set! G4892@G2d33@G2d2e G2d33@G2d2e) (set! G4891@G2d31@G2d2c G2d31@G2d2c) (set! G4890@G2d2b@make-full-rib G2d2b@make-full-rib) (set! G488f@G2d29@unseal-rib! G2d29@unseal-rib!) (set! G488e@G2d27@seal-rib! G2d27@seal-rib!) (set! G488d@G2d25@make-rib-map G2d25@make-rib-map) (set! G488c@G2d23@extend-rib/nc! G2d23@extend-rib/nc!) (set! G488b@G2d21@extend-rib! G2d21@extend-rib!) (set! G488a@G2d1f@find-label G2d1f@find-label) (set! G4889@G2d1d@make-cache-rib G2d1d@make-cache-rib) (set! G4888@G2d1b@make-empty-rib G2d1b@make-empty-rib) (set! G4887@G2d19@set-rib-cache! G2d19@set-rib-cache!) (set! G4886@G2d17@set-rib-sealed/freq! G2d17@set-rib-sealed/freq!) (set! G4885@G2d15@set-rib-label*! G2d15@set-rib-label*!) (set! G4884@G2d13@set-rib-mark**! G2d13@set-rib-mark**!) (set! G4883@G2d11@set-rib-sym*! G2d11@set-rib-sym*!) (set! G4882@G2d0f@rib-cache G2d0f@rib-cache) (set! G4881@G2d0d@rib-sealed/freq G2d0d@rib-sealed/freq) (set! G4880@G2d0b@rib-label* G2d0b@rib-label*) (set! G487f@G2d09@rib-mark** G2d09@rib-mark**) (set! G487e@G2d07@rib-sym* G2d07@rib-sym*) (set! G487d@G2d05@make-rib G2d05@make-rib) (set! G487c@G2d03@rib? G2d03@rib?) (set! G487b@G2d00@G2cf8 G2d00@G2cf8) (set! G487a@G2cfe@G2cf9 G2cfe@G2cf9) (set! G4879@G2cfc@G2cf7 G2cfc@G2cf7) (set! G4878@G2cf6@gen-define-label G2cf6@gen-define-label) (set! G4877@G2cf4@gen-define-label+loc G2cf4@gen-define-label+loc) (set! G4876@G2cf2@gen-top-level-label G2cf2@gen-top-level-label) (set! G4875@G2cf0@gen-label G2cf0@gen-label) (set! G4874@G2cee@gen-global G2cee@gen-global) (set! G4873@G2cec@gen-lexical G2cec@gen-lexical) (set! G4872@G2cea@top-marked? G2cea@top-marked?) (set! G4871@G2ce8@top-mark* G2ce8@top-mark*) (set! G4870@G2ce3@set-union G2ce3@set-union) (set! G486f@G2ce1@set-cons G2ce1@set-cons) (G2b7d@G2a1a@current-library-expander G303c@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4988@G4983 G498a@G4985 G498c@G4984 G498f@&condition? G4991@make-&condition G4993@&condition-rtd G4995@&condition-rcd G49df@G49da G49e1@G49dc G49e3@G49db G49e6@p? G49e8@make-message-condition G49ea@G49d9 G49ec@message-condition? G49ee@condition-message G49f0@&message-rtd G49f2@&message-rcd G49f8@G49f3 G49fa@G49f5 G49fc@G49f4 G49ff@p? G4a01@make-warning G4a03@warning? G4a05@&warning-rtd G4a07@&warning-rcd G4a0d@G4a08 G4a0f@G4a0a G4a11@G4a09 G4a14@p? G4a16@make-serious-condition G4a18@serious-condition? G4a1a@&serious-rtd G4a1c@&serious-rcd G4a22@G4a1d G4a24@G4a1f G4a26@G4a1e G4a29@p? G4a2b@make-error G4a2d@error? G4a2f@&error-rtd G4a31@&error-rcd G4a37@G4a32 G4a39@G4a34 G4a3b@G4a33 G4a3e@p? G4a40@make-violation G4a42@violation? G4a44@&violation-rtd G4a46@&violation-rcd G4a4c@G4a47 G4a4e@G4a49 G4a50@G4a48 G4a53@p? G4a55@make-assertion-violation G4a57@assertion-violation? G4a59@&assertion-rtd G4a5b@&assertion-rcd G4a62@G4a5d G4a64@G4a5f G4a66@G4a5e G4a69@p? G4a6b@make-irritants-condition G4a6d@G4a5c G4a6f@irritants-condition? G4a71@condition-irritants G4a73@&irritants-rtd G4a75@&irritants-rcd G4a7c@G4a77 G4a7e@G4a79 G4a80@G4a78 G4a83@p? G4a85@make-who-condition G4a87@G4a76 G4a89@who-condition? G4a8b@condition-who G4a8d@&who-rtd G4a8f@&who-rcd G4a95@G4a90 G4a97@G4a92 G4a99@G4a91 G4a9c@p? G4a9e@make-non-continuable-violation G4aa0@non-continuable-violation? G4aa2@&non-continuable-rtd G4aa4@&non-continuable-rcd G4aaa@G4aa5 G4aac@G4aa7 G4aae@G4aa6 G4ab1@p? G4ab3@make-implementation-restriction-violation G4ab5@implementation-restriction-violation? G4ab7@&implementation-restriction-rtd G4ab9@&implementation-restriction-rcd G4abf@G4aba G4ac1@G4abc G4ac3@G4abb G4ac6@p? G4ac8@make-lexical-violation G4aca@lexical-violation? G4acc@&lexical-rtd G4ace@&lexical-rcd G4ad6@G4ad1 G4ad8@G4ad3 G4ada@G4ad2 G4add@p? G4adf@make-syntax-violation G4ae1@G4acf G4ae3@G4ad0 G4ae5@syntax-violation? G4ae7@syntax-violation-form G4ae9@syntax-violation-subform G4aeb@&syntax-rtd G4aed@&syntax-rcd G4af3@G4aee G4af5@G4af0 G4af7@G4aef G4afa@p? G4afc@make-undefined-violation G4afe@undefined-violation? G4b00@&undefined-rtd G4b02@&undefined-rcd G4b08@G4b03 G4b0a@G4b05 G4b0c@G4b04 G4b0f@p? G4b11@make-i/o-error G4b13@i/o-error? G4b15@&i/o-rtd G4b17@&i/o-rcd G4b1d@G4b18 G4b1f@G4b1a G4b21@G4b19 G4b24@p? G4b26@make-i/o-read-error G4b28@i/o-read-error? G4b2a@&i/o-read-rtd G4b2c@&i/o-read-rcd G4b32@G4b2d G4b34@G4b2f G4b36@G4b2e G4b39@p? G4b3b@make-i/o-write-error G4b3d@i/o-write-error? G4b3f@&i/o-write-rtd G4b41@&i/o-write-rcd G4b48@G4b43 G4b4a@G4b45 G4b4c@G4b44 G4b4f@p? G4b51@make-i/o-invalid-position-error G4b53@G4b42 G4b55@i/o-invalid-position-error? G4b57@i/o-error-position G4b59@&i/o-invalid-position-rtd G4b5b@&i/o-invalid-position-rcd G4b62@G4b5d G4b64@G4b5f G4b66@G4b5e G4b69@p? G4b6b@make-i/o-filename-error G4b6d@G4b5c G4b6f@i/o-filename-error? G4b71@i/o-error-filename G4b73@&i/o-filename-rtd G4b75@&i/o-filename-rcd G4b7b@G4b76 G4b7d@G4b78 G4b7f@G4b77 G4b82@p? G4b84@make-i/o-file-protection-error G4b86@i/o-file-protection-error? G4b88@&i/o-file-protection-rtd G4b8a@&i/o-file-protection-rcd G4b90@G4b8b G4b92@G4b8d G4b94@G4b8c G4b97@p? G4b99@make-i/o-file-is-read-only-error G4b9b@i/o-file-is-read-only-error? G4b9d@&i/o-file-is-read-only-rtd G4b9f@&i/o-file-is-read-only-rcd G4ba5@G4ba0 G4ba7@G4ba2 G4ba9@G4ba1 G4bac@p? G4bae@make-i/o-file-already-exists-error G4bb0@i/o-file-already-exists-error? G4bb2@&i/o-file-already-exists-rtd G4bb4@&i/o-file-already-exists-rcd G4bba@G4bb5 G4bbc@G4bb7 G4bbe@G4bb6 G4bc1@p? G4bc3@make-i/o-file-does-not-exist-error G4bc5@i/o-file-does-not-exist-error? G4bc7@&i/o-file-does-not-exist-rtd G4bc9@&i/o-file-does-not-exist-rcd G4bd0@G4bcb G4bd2@G4bcd G4bd4@G4bcc G4bd7@p? G4bd9@make-i/o-port-error G4bdb@G4bca G4bdd@i/o-port-error? G4bdf@i/o-error-port G4be1@&i/o-port-rtd G4be3@&i/o-port-rcd G4be9@G4be4 G4beb@G4be6 G4bed@G4be5 G4bf0@p? G4bf2@make-i/o-decoding-error G4bf4@i/o-decoding-error? G4bf6@&i/o-decoding-rtd G4bf8@&i/o-decoding-rcd G4bff@G4bfa G4c01@G4bfc G4c03@G4bfb G4c06@p? G4c08@make-i/o-encoding-error G4c0a@G4bf9 G4c0c@i/o-encoding-error? G4c0e@i/o-encoding-error-char G4c10@&i/o-encoding-rtd G4c12@&i/o-encoding-rcd G4c18@G4c13 G4c1a@G4c15 G4c1c@G4c14 G4c1f@p? G4c21@make-no-infinities-violation G4c23@no-infinities-violation? G4c25@&no-infinities-rtd G4c27@&no-infinities-rcd G4c2d@G4c28 G4c2f@G4c2a G4c31@G4c29 G4c34@p? G4c36@make-no-nans-violation G4c38@no-nans-violation? G4c3a@&no-nans-rtd G4c3c@&no-nans-rcd) (begin (set! G4988@G4983 (make-record-type-descriptor '&condition '#f 'G4986 '#f '#f '#())) (set! G498a@G4985 '#f) (set! G498c@G4984 (make-record-constructor-descriptor G4988@G4983 '#f G498a@G4985)) (set! G498f@&condition? (record-predicate G4988@G4983)) (set! G4991@make-&condition (record-constructor G498c@G4984)) (set! G4993@&condition-rtd G4988@G4983) (set! G4995@&condition-rcd G498c@G4984) (set! G49df@G49da (make-record-type-descriptor '&message G4988@G4983 'G49dd '#f '#f '#((immutable message)))) (set! G49e1@G49dc '#f) (set! G49e3@G49db (make-record-constructor-descriptor G49df@G49da G498c@G4984 G49e1@G49dc)) (set! G49e6@p? (record-predicate G49df@G49da)) (set! G49e8@make-message-condition (record-constructor G49e3@G49db)) (set! G49ea@G49d9 (record-accessor G49df@G49da '0)) (set! G49ec@message-condition? (condition-predicate G49df@G49da)) (set! G49ee@condition-message (condition-accessor G49df@G49da G49ea@G49d9)) (set! G49f0@&message-rtd G49df@G49da) (set! G49f2@&message-rcd G49e3@G49db) (set! G49f8@G49f3 (make-record-type-descriptor '&warning G4988@G4983 'G49f6 '#f '#f '#())) (set! G49fa@G49f5 '#f) (set! G49fc@G49f4 (make-record-constructor-descriptor G49f8@G49f3 G498c@G4984 G49fa@G49f5)) (set! G49ff@p? (record-predicate G49f8@G49f3)) (set! G4a01@make-warning (record-constructor G49fc@G49f4)) (set! G4a03@warning? (condition-predicate G49f8@G49f3)) (set! G4a05@&warning-rtd G49f8@G49f3) (set! G4a07@&warning-rcd G49fc@G49f4) (set! G4a0d@G4a08 (make-record-type-descriptor '&serious G4988@G4983 'G4a0b '#f '#f '#())) (set! G4a0f@G4a0a '#f) (set! G4a11@G4a09 (make-record-constructor-descriptor G4a0d@G4a08 G498c@G4984 G4a0f@G4a0a)) (set! G4a14@p? (record-predicate G4a0d@G4a08)) (set! G4a16@make-serious-condition (record-constructor G4a11@G4a09)) (set! G4a18@serious-condition? (condition-predicate G4a0d@G4a08)) (set! G4a1a@&serious-rtd G4a0d@G4a08) (set! G4a1c@&serious-rcd G4a11@G4a09) (set! G4a22@G4a1d (make-record-type-descriptor '&error G4a0d@G4a08 'G4a20 '#f '#f '#())) (set! G4a24@G4a1f '#f) (set! G4a26@G4a1e (make-record-constructor-descriptor G4a22@G4a1d G4a11@G4a09 G4a24@G4a1f)) (set! G4a29@p? (record-predicate G4a22@G4a1d)) (set! G4a2b@make-error (record-constructor G4a26@G4a1e)) (set! G4a2d@error? (condition-predicate G4a22@G4a1d)) (set! G4a2f@&error-rtd G4a22@G4a1d) (set! G4a31@&error-rcd G4a26@G4a1e) (set! G4a37@G4a32 (make-record-type-descriptor '&violation G4a0d@G4a08 'G4a35 '#f '#f '#())) (set! G4a39@G4a34 '#f) (set! G4a3b@G4a33 (make-record-constructor-descriptor G4a37@G4a32 G4a11@G4a09 G4a39@G4a34)) (set! G4a3e@p? (record-predicate G4a37@G4a32)) (set! G4a40@make-violation (record-constructor G4a3b@G4a33)) (set! G4a42@violation? (condition-predicate G4a37@G4a32)) (set! G4a44@&violation-rtd G4a37@G4a32) (set! G4a46@&violation-rcd G4a3b@G4a33) (set! G4a4c@G4a47 (make-record-type-descriptor '&assertion G4a37@G4a32 'G4a4a '#f '#f '#())) (set! G4a4e@G4a49 '#f) (set! G4a50@G4a48 (make-record-constructor-descriptor G4a4c@G4a47 G4a3b@G4a33 G4a4e@G4a49)) (set! G4a53@p? (record-predicate G4a4c@G4a47)) (set! G4a55@make-assertion-violation (record-constructor G4a50@G4a48)) (set! G4a57@assertion-violation? (condition-predicate G4a4c@G4a47)) (set! G4a59@&assertion-rtd G4a4c@G4a47) (set! G4a5b@&assertion-rcd G4a50@G4a48) (set! G4a62@G4a5d (make-record-type-descriptor '&irritants G4988@G4983 'G4a60 '#f '#f '#((immutable irritants)))) (set! G4a64@G4a5f '#f) (set! G4a66@G4a5e (make-record-constructor-descriptor G4a62@G4a5d G498c@G4984 G4a64@G4a5f)) (set! G4a69@p? (record-predicate G4a62@G4a5d)) (set! G4a6b@make-irritants-condition (record-constructor G4a66@G4a5e)) (set! G4a6d@G4a5c (record-accessor G4a62@G4a5d '0)) (set! G4a6f@irritants-condition? (condition-predicate G4a62@G4a5d)) (set! G4a71@condition-irritants (condition-accessor G4a62@G4a5d G4a6d@G4a5c)) (set! G4a73@&irritants-rtd G4a62@G4a5d) (set! G4a75@&irritants-rcd G4a66@G4a5e) (set! G4a7c@G4a77 (make-record-type-descriptor '&who G4988@G4983 'G4a7a '#f '#f '#((immutable who)))) (set! G4a7e@G4a79 '#f) (set! G4a80@G4a78 (make-record-constructor-descriptor G4a7c@G4a77 G498c@G4984 G4a7e@G4a79)) (set! G4a83@p? (record-predicate G4a7c@G4a77)) (set! G4a85@make-who-condition (record-constructor G4a80@G4a78)) (set! G4a87@G4a76 (record-accessor G4a7c@G4a77 '0)) (set! G4a89@who-condition? (condition-predicate G4a7c@G4a77)) (set! G4a8b@condition-who (condition-accessor G4a7c@G4a77 G4a87@G4a76)) (set! G4a8d@&who-rtd G4a7c@G4a77) (set! G4a8f@&who-rcd G4a80@G4a78) (set! G4a95@G4a90 (make-record-type-descriptor '&non-continuable G4a37@G4a32 'G4a93 '#f '#f '#())) (set! G4a97@G4a92 '#f) (set! G4a99@G4a91 (make-record-constructor-descriptor G4a95@G4a90 G4a3b@G4a33 G4a97@G4a92)) (set! G4a9c@p? (record-predicate G4a95@G4a90)) (set! G4a9e@make-non-continuable-violation (record-constructor G4a99@G4a91)) (set! G4aa0@non-continuable-violation? (condition-predicate G4a95@G4a90)) (set! G4aa2@&non-continuable-rtd G4a95@G4a90) (set! G4aa4@&non-continuable-rcd G4a99@G4a91) (set! G4aaa@G4aa5 (make-record-type-descriptor '&implementation-restriction G4a37@G4a32 'G4aa8 '#f '#f '#())) (set! G4aac@G4aa7 '#f) (set! G4aae@G4aa6 (make-record-constructor-descriptor G4aaa@G4aa5 G4a3b@G4a33 G4aac@G4aa7)) (set! G4ab1@p? (record-predicate G4aaa@G4aa5)) (set! G4ab3@make-implementation-restriction-violation (record-constructor G4aae@G4aa6)) (set! G4ab5@implementation-restriction-violation? (condition-predicate G4aaa@G4aa5)) (set! G4ab7@&implementation-restriction-rtd G4aaa@G4aa5) (set! G4ab9@&implementation-restriction-rcd G4aae@G4aa6) (set! G4abf@G4aba (make-record-type-descriptor '&lexical G4a37@G4a32 'G4abd '#f '#f '#())) (set! G4ac1@G4abc '#f) (set! G4ac3@G4abb (make-record-constructor-descriptor G4abf@G4aba G4a3b@G4a33 G4ac1@G4abc)) (set! G4ac6@p? (record-predicate G4abf@G4aba)) (set! G4ac8@make-lexical-violation (record-constructor G4ac3@G4abb)) (set! G4aca@lexical-violation? (condition-predicate G4abf@G4aba)) (set! G4acc@&lexical-rtd G4abf@G4aba) (set! G4ace@&lexical-rcd G4ac3@G4abb) (set! G4ad6@G4ad1 (make-record-type-descriptor '&syntax G4a37@G4a32 'G4ad4 '#f '#f '#((immutable form) (immutable subform)))) (set! G4ad8@G4ad3 '#f) (set! G4ada@G4ad2 (make-record-constructor-descriptor G4ad6@G4ad1 G4a3b@G4a33 G4ad8@G4ad3)) (set! G4add@p? (record-predicate G4ad6@G4ad1)) (set! G4adf@make-syntax-violation (record-constructor G4ada@G4ad2)) (set! G4ae1@G4acf (record-accessor G4ad6@G4ad1 '0)) (set! G4ae3@G4ad0 (record-accessor G4ad6@G4ad1 '1)) (set! G4ae5@syntax-violation? (condition-predicate G4ad6@G4ad1)) (set! G4ae7@syntax-violation-form (condition-accessor G4ad6@G4ad1 G4ae1@G4acf)) (set! G4ae9@syntax-violation-subform (condition-accessor G4ad6@G4ad1 G4ae3@G4ad0)) (set! G4aeb@&syntax-rtd G4ad6@G4ad1) (set! G4aed@&syntax-rcd G4ada@G4ad2) (set! G4af3@G4aee (make-record-type-descriptor '&undefined G4a37@G4a32 'G4af1 '#f '#f '#())) (set! G4af5@G4af0 '#f) (set! G4af7@G4aef (make-record-constructor-descriptor G4af3@G4aee G4a3b@G4a33 G4af5@G4af0)) (set! G4afa@p? (record-predicate G4af3@G4aee)) (set! G4afc@make-undefined-violation (record-constructor G4af7@G4aef)) (set! G4afe@undefined-violation? (condition-predicate G4af3@G4aee)) (set! G4b00@&undefined-rtd G4af3@G4aee) (set! G4b02@&undefined-rcd G4af7@G4aef) (set! G4b08@G4b03 (make-record-type-descriptor '&i/o G4a22@G4a1d 'G4b06 '#f '#f '#())) (set! G4b0a@G4b05 '#f) (set! G4b0c@G4b04 (make-record-constructor-descriptor G4b08@G4b03 G4a26@G4a1e G4b0a@G4b05)) (set! G4b0f@p? (record-predicate G4b08@G4b03)) (set! G4b11@make-i/o-error (record-constructor G4b0c@G4b04)) (set! G4b13@i/o-error? (condition-predicate G4b08@G4b03)) (set! G4b15@&i/o-rtd G4b08@G4b03) (set! G4b17@&i/o-rcd G4b0c@G4b04) (set! G4b1d@G4b18 (make-record-type-descriptor '&i/o-read G4b08@G4b03 'G4b1b '#f '#f '#())) (set! G4b1f@G4b1a '#f) (set! G4b21@G4b19 (make-record-constructor-descriptor G4b1d@G4b18 G4b0c@G4b04 G4b1f@G4b1a)) (set! G4b24@p? (record-predicate G4b1d@G4b18)) (set! G4b26@make-i/o-read-error (record-constructor G4b21@G4b19)) (set! G4b28@i/o-read-error? (condition-predicate G4b1d@G4b18)) (set! G4b2a@&i/o-read-rtd G4b1d@G4b18) (set! G4b2c@&i/o-read-rcd G4b21@G4b19) (set! G4b32@G4b2d (make-record-type-descriptor '&i/o-write G4b08@G4b03 'G4b30 '#f '#f '#())) (set! G4b34@G4b2f '#f) (set! G4b36@G4b2e (make-record-constructor-descriptor G4b32@G4b2d G4b0c@G4b04 G4b34@G4b2f)) (set! G4b39@p? (record-predicate G4b32@G4b2d)) (set! G4b3b@make-i/o-write-error (record-constructor G4b36@G4b2e)) (set! G4b3d@i/o-write-error? (condition-predicate G4b32@G4b2d)) (set! G4b3f@&i/o-write-rtd G4b32@G4b2d) (set! G4b41@&i/o-write-rcd G4b36@G4b2e) (set! G4b48@G4b43 (make-record-type-descriptor '&i/o-invalid-position G4b08@G4b03 'G4b46 '#f '#f '#((immutable position)))) (set! G4b4a@G4b45 '#f) (set! G4b4c@G4b44 (make-record-constructor-descriptor G4b48@G4b43 G4b0c@G4b04 G4b4a@G4b45)) (set! G4b4f@p? (record-predicate G4b48@G4b43)) (set! G4b51@make-i/o-invalid-position-error (record-constructor G4b4c@G4b44)) (set! G4b53@G4b42 (record-accessor G4b48@G4b43 '0)) (set! G4b55@i/o-invalid-position-error? (condition-predicate G4b48@G4b43)) (set! G4b57@i/o-error-position (condition-accessor G4b48@G4b43 G4b53@G4b42)) (set! G4b59@&i/o-invalid-position-rtd G4b48@G4b43) (set! G4b5b@&i/o-invalid-position-rcd G4b4c@G4b44) (set! G4b62@G4b5d (make-record-type-descriptor '&i/o-filename G4b08@G4b03 'G4b60 '#f '#f '#((immutable filename)))) (set! G4b64@G4b5f '#f) (set! G4b66@G4b5e (make-record-constructor-descriptor G4b62@G4b5d G4b0c@G4b04 G4b64@G4b5f)) (set! G4b69@p? (record-predicate G4b62@G4b5d)) (set! G4b6b@make-i/o-filename-error (record-constructor G4b66@G4b5e)) (set! G4b6d@G4b5c (record-accessor G4b62@G4b5d '0)) (set! G4b6f@i/o-filename-error? (condition-predicate G4b62@G4b5d)) (set! G4b71@i/o-error-filename (condition-accessor G4b62@G4b5d G4b6d@G4b5c)) (set! G4b73@&i/o-filename-rtd G4b62@G4b5d) (set! G4b75@&i/o-filename-rcd G4b66@G4b5e) (set! G4b7b@G4b76 (make-record-type-descriptor '&i/o-file-protection G4b62@G4b5d 'G4b79 '#f '#f '#())) (set! G4b7d@G4b78 '#f) (set! G4b7f@G4b77 (make-record-constructor-descriptor G4b7b@G4b76 G4b66@G4b5e G4b7d@G4b78)) (set! G4b82@p? (record-predicate G4b7b@G4b76)) (set! G4b84@make-i/o-file-protection-error (record-constructor G4b7f@G4b77)) (set! G4b86@i/o-file-protection-error? (condition-predicate G4b7b@G4b76)) (set! G4b88@&i/o-file-protection-rtd G4b7b@G4b76) (set! G4b8a@&i/o-file-protection-rcd G4b7f@G4b77) (set! G4b90@G4b8b (make-record-type-descriptor '&i/o-file-is-read-only G4b7b@G4b76 'G4b8e '#f '#f '#())) (set! G4b92@G4b8d '#f) (set! G4b94@G4b8c (make-record-constructor-descriptor G4b90@G4b8b G4b7f@G4b77 G4b92@G4b8d)) (set! G4b97@p? (record-predicate G4b90@G4b8b)) (set! G4b99@make-i/o-file-is-read-only-error (record-constructor G4b94@G4b8c)) (set! G4b9b@i/o-file-is-read-only-error? (condition-predicate G4b90@G4b8b)) (set! G4b9d@&i/o-file-is-read-only-rtd G4b90@G4b8b) (set! G4b9f@&i/o-file-is-read-only-rcd G4b94@G4b8c) (set! G4ba5@G4ba0 (make-record-type-descriptor '&i/o-file-already-exists G4b62@G4b5d 'G4ba3 '#f '#f '#())) (set! G4ba7@G4ba2 '#f) (set! G4ba9@G4ba1 (make-record-constructor-descriptor G4ba5@G4ba0 G4b66@G4b5e G4ba7@G4ba2)) (set! G4bac@p? (record-predicate G4ba5@G4ba0)) (set! G4bae@make-i/o-file-already-exists-error (record-constructor G4ba9@G4ba1)) (set! G4bb0@i/o-file-already-exists-error? (condition-predicate G4ba5@G4ba0)) (set! G4bb2@&i/o-file-already-exists-rtd G4ba5@G4ba0) (set! G4bb4@&i/o-file-already-exists-rcd G4ba9@G4ba1) (set! G4bba@G4bb5 (make-record-type-descriptor '&i/o-file-does-not-exist G4b62@G4b5d 'G4bb8 '#f '#f '#())) (set! G4bbc@G4bb7 '#f) (set! G4bbe@G4bb6 (make-record-constructor-descriptor G4bba@G4bb5 G4b66@G4b5e G4bbc@G4bb7)) (set! G4bc1@p? (record-predicate G4bba@G4bb5)) (set! G4bc3@make-i/o-file-does-not-exist-error (record-constructor G4bbe@G4bb6)) (set! G4bc5@i/o-file-does-not-exist-error? (condition-predicate G4bba@G4bb5)) (set! G4bc7@&i/o-file-does-not-exist-rtd G4bba@G4bb5) (set! G4bc9@&i/o-file-does-not-exist-rcd G4bbe@G4bb6) (set! G4bd0@G4bcb (make-record-type-descriptor '&i/o-port G4b08@G4b03 'G4bce '#f '#f '#((immutable port)))) (set! G4bd2@G4bcd '#f) (set! G4bd4@G4bcc (make-record-constructor-descriptor G4bd0@G4bcb G4b0c@G4b04 G4bd2@G4bcd)) (set! G4bd7@p? (record-predicate G4bd0@G4bcb)) (set! G4bd9@make-i/o-port-error (record-constructor G4bd4@G4bcc)) (set! G4bdb@G4bca (record-accessor G4bd0@G4bcb '0)) (set! G4bdd@i/o-port-error? (condition-predicate G4bd0@G4bcb)) (set! G4bdf@i/o-error-port (condition-accessor G4bd0@G4bcb G4bdb@G4bca)) (set! G4be1@&i/o-port-rtd G4bd0@G4bcb) (set! G4be3@&i/o-port-rcd G4bd4@G4bcc) (set! G4be9@G4be4 (make-record-type-descriptor '&i/o-decoding G4bd0@G4bcb 'G4be7 '#f '#f '#())) (set! G4beb@G4be6 '#f) (set! G4bed@G4be5 (make-record-constructor-descriptor G4be9@G4be4 G4bd4@G4bcc G4beb@G4be6)) (set! G4bf0@p? (record-predicate G4be9@G4be4)) (set! G4bf2@make-i/o-decoding-error (record-constructor G4bed@G4be5)) (set! G4bf4@i/o-decoding-error? (condition-predicate G4be9@G4be4)) (set! G4bf6@&i/o-decoding-rtd G4be9@G4be4) (set! G4bf8@&i/o-decoding-rcd G4bed@G4be5) (set! G4bff@G4bfa (make-record-type-descriptor '&i/o-encoding G4bd0@G4bcb 'G4bfd '#f '#f '#((immutable char)))) (set! G4c01@G4bfc '#f) (set! G4c03@G4bfb (make-record-constructor-descriptor G4bff@G4bfa G4bd4@G4bcc G4c01@G4bfc)) (set! G4c06@p? (record-predicate G4bff@G4bfa)) (set! G4c08@make-i/o-encoding-error (record-constructor G4c03@G4bfb)) (set! G4c0a@G4bf9 (record-accessor G4bff@G4bfa '0)) (set! G4c0c@i/o-encoding-error? (condition-predicate G4bff@G4bfa)) (set! G4c0e@i/o-encoding-error-char (condition-accessor G4bff@G4bfa G4c0a@G4bf9)) (set! G4c10@&i/o-encoding-rtd G4bff@G4bfa) (set! G4c12@&i/o-encoding-rcd G4c03@G4bfb) (set! G4c18@G4c13 (make-record-type-descriptor '&no-infinities G4aaa@G4aa5 'G4c16 '#f '#f '#())) (set! G4c1a@G4c15 '#f) (set! G4c1c@G4c14 (make-record-constructor-descriptor G4c18@G4c13 G4aae@G4aa6 G4c1a@G4c15)) (set! G4c1f@p? (record-predicate G4c18@G4c13)) (set! G4c21@make-no-infinities-violation (record-constructor G4c1c@G4c14)) (set! G4c23@no-infinities-violation? (condition-predicate G4c18@G4c13)) (set! G4c25@&no-infinities-rtd G4c18@G4c13) (set! G4c27@&no-infinities-rcd G4c1c@G4c14) (set! G4c2d@G4c28 (make-record-type-descriptor '&no-nans G4aaa@G4aa5 'G4c2b '#f '#f '#())) (set! G4c2f@G4c2a '#f) (set! G4c31@G4c29 (make-record-constructor-descriptor G4c2d@G4c28 G4aae@G4aa6 G4c2f@G4c2a)) (set! G4c34@p? (record-predicate G4c2d@G4c28)) (set! G4c36@make-no-nans-violation (record-constructor G4c31@G4c29)) (set! G4c38@no-nans-violation? (condition-predicate G4c2d@G4c28)) (set! G4c3a@&no-nans-rtd G4c2d@G4c28) (set! G4c3c@&no-nans-rcd G4c31@G4c29) (begin (set! G4d2d@G4c3c@&no-nans-rcd G4c3c@&no-nans-rcd) (set! G4d2c@G4c3a@&no-nans-rtd G4c3a@&no-nans-rtd) (set! G4d2b@G4c38@no-nans-violation? G4c38@no-nans-violation?) (set! G4d2a@G4c36@make-no-nans-violation G4c36@make-no-nans-violation) (set! G4d29@G4c34@p? G4c34@p?) (set! G4d28@G4c31@G4c29 G4c31@G4c29) (set! G4d27@G4c2f@G4c2a G4c2f@G4c2a) (set! G4d26@G4c2d@G4c28 G4c2d@G4c28) (set! G4d25@G4c27@&no-infinities-rcd G4c27@&no-infinities-rcd) (set! G4d24@G4c25@&no-infinities-rtd G4c25@&no-infinities-rtd) (set! G4d23@G4c23@no-infinities-violation? G4c23@no-infinities-violation?) (set! G4d22@G4c21@make-no-infinities-violation G4c21@make-no-infinities-violation) (set! G4d21@G4c1f@p? G4c1f@p?) (set! G4d20@G4c1c@G4c14 G4c1c@G4c14) (set! G4d1f@G4c1a@G4c15 G4c1a@G4c15) (set! G4d1e@G4c18@G4c13 G4c18@G4c13) (set! G4d1d@G4c12@&i/o-encoding-rcd G4c12@&i/o-encoding-rcd) (set! G4d1c@G4c10@&i/o-encoding-rtd G4c10@&i/o-encoding-rtd) (set! G4d1b@G4c0e@i/o-encoding-error-char G4c0e@i/o-encoding-error-char) (set! G4d1a@G4c0c@i/o-encoding-error? G4c0c@i/o-encoding-error?) (set! G4d19@G4c0a@G4bf9 G4c0a@G4bf9) (set! G4d18@G4c08@make-i/o-encoding-error G4c08@make-i/o-encoding-error) (set! G4d17@G4c06@p? G4c06@p?) (set! G4d16@G4c03@G4bfb G4c03@G4bfb) (set! G4d15@G4c01@G4bfc G4c01@G4bfc) (set! G4d14@G4bff@G4bfa G4bff@G4bfa) (set! G4d13@G4bf8@&i/o-decoding-rcd G4bf8@&i/o-decoding-rcd) (set! G4d12@G4bf6@&i/o-decoding-rtd G4bf6@&i/o-decoding-rtd) (set! G4d11@G4bf4@i/o-decoding-error? G4bf4@i/o-decoding-error?) (set! G4d10@G4bf2@make-i/o-decoding-error G4bf2@make-i/o-decoding-error) (set! G4d0f@G4bf0@p? G4bf0@p?) (set! G4d0e@G4bed@G4be5 G4bed@G4be5) (set! G4d0d@G4beb@G4be6 G4beb@G4be6) (set! G4d0c@G4be9@G4be4 G4be9@G4be4) (set! G4d0b@G4be3@&i/o-port-rcd G4be3@&i/o-port-rcd) (set! G4d0a@G4be1@&i/o-port-rtd G4be1@&i/o-port-rtd) (set! G4d09@G4bdf@i/o-error-port G4bdf@i/o-error-port) (set! G4d08@G4bdd@i/o-port-error? G4bdd@i/o-port-error?) (set! G4d07@G4bdb@G4bca G4bdb@G4bca) (set! G4d06@G4bd9@make-i/o-port-error G4bd9@make-i/o-port-error) (set! G4d05@G4bd7@p? G4bd7@p?) (set! G4d04@G4bd4@G4bcc G4bd4@G4bcc) (set! G4d03@G4bd2@G4bcd G4bd2@G4bcd) (set! G4d02@G4bd0@G4bcb G4bd0@G4bcb) (set! G4d01@G4bc9@&i/o-file-does-not-exist-rcd G4bc9@&i/o-file-does-not-exist-rcd) (set! G4d00@G4bc7@&i/o-file-does-not-exist-rtd G4bc7@&i/o-file-does-not-exist-rtd) (set! G4cff@G4bc5@i/o-file-does-not-exist-error? G4bc5@i/o-file-does-not-exist-error?) (set! G4cfe@G4bc3@make-i/o-file-does-not-exist-error G4bc3@make-i/o-file-does-not-exist-error) (set! G4cfd@G4bc1@p? G4bc1@p?) (set! G4cfc@G4bbe@G4bb6 G4bbe@G4bb6) (set! G4cfb@G4bbc@G4bb7 G4bbc@G4bb7) (set! G4cfa@G4bba@G4bb5 G4bba@G4bb5) (set! G4cf9@G4bb4@&i/o-file-already-exists-rcd G4bb4@&i/o-file-already-exists-rcd) (set! G4cf8@G4bb2@&i/o-file-already-exists-rtd G4bb2@&i/o-file-already-exists-rtd) (set! G4cf7@G4bb0@i/o-file-already-exists-error? G4bb0@i/o-file-already-exists-error?) (set! G4cf6@G4bae@make-i/o-file-already-exists-error G4bae@make-i/o-file-already-exists-error) (set! G4cf5@G4bac@p? G4bac@p?) (set! G4cf4@G4ba9@G4ba1 G4ba9@G4ba1) (set! G4cf3@G4ba7@G4ba2 G4ba7@G4ba2) (set! G4cf2@G4ba5@G4ba0 G4ba5@G4ba0) (set! G4cf1@G4b9f@&i/o-file-is-read-only-rcd G4b9f@&i/o-file-is-read-only-rcd) (set! G4cf0@G4b9d@&i/o-file-is-read-only-rtd G4b9d@&i/o-file-is-read-only-rtd) (set! G4cef@G4b9b@i/o-file-is-read-only-error? G4b9b@i/o-file-is-read-only-error?) (set! G4cee@G4b99@make-i/o-file-is-read-only-error G4b99@make-i/o-file-is-read-only-error) (set! G4ced@G4b97@p? G4b97@p?) (set! G4cec@G4b94@G4b8c G4b94@G4b8c) (set! G4ceb@G4b92@G4b8d G4b92@G4b8d) (set! G4cea@G4b90@G4b8b G4b90@G4b8b) (set! G4ce9@G4b8a@&i/o-file-protection-rcd G4b8a@&i/o-file-protection-rcd) (set! G4ce8@G4b88@&i/o-file-protection-rtd G4b88@&i/o-file-protection-rtd) (set! G4ce7@G4b86@i/o-file-protection-error? G4b86@i/o-file-protection-error?) (set! G4ce6@G4b84@make-i/o-file-protection-error G4b84@make-i/o-file-protection-error) (set! G4ce5@G4b82@p? G4b82@p?) (set! G4ce4@G4b7f@G4b77 G4b7f@G4b77) (set! G4ce3@G4b7d@G4b78 G4b7d@G4b78) (set! G4ce2@G4b7b@G4b76 G4b7b@G4b76) (set! G4ce1@G4b75@&i/o-filename-rcd G4b75@&i/o-filename-rcd) (set! G4ce0@G4b73@&i/o-filename-rtd G4b73@&i/o-filename-rtd) (set! G4cdf@G4b71@i/o-error-filename G4b71@i/o-error-filename) (set! G4cde@G4b6f@i/o-filename-error? G4b6f@i/o-filename-error?) (set! G4cdd@G4b6d@G4b5c G4b6d@G4b5c) (set! G4cdc@G4b6b@make-i/o-filename-error G4b6b@make-i/o-filename-error) (set! G4cdb@G4b69@p? G4b69@p?) (set! G4cda@G4b66@G4b5e G4b66@G4b5e) (set! G4cd9@G4b64@G4b5f G4b64@G4b5f) (set! G4cd8@G4b62@G4b5d G4b62@G4b5d) (set! G4cd7@G4b5b@&i/o-invalid-position-rcd G4b5b@&i/o-invalid-position-rcd) (set! G4cd6@G4b59@&i/o-invalid-position-rtd G4b59@&i/o-invalid-position-rtd) (set! G4cd5@G4b57@i/o-error-position G4b57@i/o-error-position) (set! G4cd4@G4b55@i/o-invalid-position-error? G4b55@i/o-invalid-position-error?) (set! G4cd3@G4b53@G4b42 G4b53@G4b42) (set! G4cd2@G4b51@make-i/o-invalid-position-error G4b51@make-i/o-invalid-position-error) (set! G4cd1@G4b4f@p? G4b4f@p?) (set! G4cd0@G4b4c@G4b44 G4b4c@G4b44) (set! G4ccf@G4b4a@G4b45 G4b4a@G4b45) (set! G4cce@G4b48@G4b43 G4b48@G4b43) (set! G4ccd@G4b41@&i/o-write-rcd G4b41@&i/o-write-rcd) (set! G4ccc@G4b3f@&i/o-write-rtd G4b3f@&i/o-write-rtd) (set! G4ccb@G4b3d@i/o-write-error? G4b3d@i/o-write-error?) (set! G4cca@G4b3b@make-i/o-write-error G4b3b@make-i/o-write-error) (set! G4cc9@G4b39@p? G4b39@p?) (set! G4cc8@G4b36@G4b2e G4b36@G4b2e) (set! G4cc7@G4b34@G4b2f G4b34@G4b2f) (set! G4cc6@G4b32@G4b2d G4b32@G4b2d) (set! G4cc5@G4b2c@&i/o-read-rcd G4b2c@&i/o-read-rcd) (set! G4cc4@G4b2a@&i/o-read-rtd G4b2a@&i/o-read-rtd) (set! G4cc3@G4b28@i/o-read-error? G4b28@i/o-read-error?) (set! G4cc2@G4b26@make-i/o-read-error G4b26@make-i/o-read-error) (set! G4cc1@G4b24@p? G4b24@p?) (set! G4cc0@G4b21@G4b19 G4b21@G4b19) (set! G4cbf@G4b1f@G4b1a G4b1f@G4b1a) (set! G4cbe@G4b1d@G4b18 G4b1d@G4b18) (set! G4cbd@G4b17@&i/o-rcd G4b17@&i/o-rcd) (set! G4cbc@G4b15@&i/o-rtd G4b15@&i/o-rtd) (set! G4cbb@G4b13@i/o-error? G4b13@i/o-error?) (set! G4cba@G4b11@make-i/o-error G4b11@make-i/o-error) (set! G4cb9@G4b0f@p? G4b0f@p?) (set! G4cb8@G4b0c@G4b04 G4b0c@G4b04) (set! G4cb7@G4b0a@G4b05 G4b0a@G4b05) (set! G4cb6@G4b08@G4b03 G4b08@G4b03) (set! G4cb5@G4b02@&undefined-rcd G4b02@&undefined-rcd) (set! G4cb4@G4b00@&undefined-rtd G4b00@&undefined-rtd) (set! G4cb3@G4afe@undefined-violation? G4afe@undefined-violation?) (set! G4cb2@G4afc@make-undefined-violation G4afc@make-undefined-violation) (set! G4cb1@G4afa@p? G4afa@p?) (set! G4cb0@G4af7@G4aef G4af7@G4aef) (set! G4caf@G4af5@G4af0 G4af5@G4af0) (set! G4cae@G4af3@G4aee G4af3@G4aee) (set! G4cad@G4aed@&syntax-rcd G4aed@&syntax-rcd) (set! G4cac@G4aeb@&syntax-rtd G4aeb@&syntax-rtd) (set! G4cab@G4ae9@syntax-violation-subform G4ae9@syntax-violation-subform) (set! G4caa@G4ae7@syntax-violation-form G4ae7@syntax-violation-form) (set! G4ca9@G4ae5@syntax-violation? G4ae5@syntax-violation?) (set! G4ca8@G4ae3@G4ad0 G4ae3@G4ad0) (set! G4ca7@G4ae1@G4acf G4ae1@G4acf) (set! G4ca6@G4adf@make-syntax-violation G4adf@make-syntax-violation) (set! G4ca5@G4add@p? G4add@p?) (set! G4ca4@G4ada@G4ad2 G4ada@G4ad2) (set! G4ca3@G4ad8@G4ad3 G4ad8@G4ad3) (set! G4ca2@G4ad6@G4ad1 G4ad6@G4ad1) (set! G4ca1@G4ace@&lexical-rcd G4ace@&lexical-rcd) (set! G4ca0@G4acc@&lexical-rtd G4acc@&lexical-rtd) (set! G4c9f@G4aca@lexical-violation? G4aca@lexical-violation?) (set! G4c9e@G4ac8@make-lexical-violation G4ac8@make-lexical-violation) (set! G4c9d@G4ac6@p? G4ac6@p?) (set! G4c9c@G4ac3@G4abb G4ac3@G4abb) (set! G4c9b@G4ac1@G4abc G4ac1@G4abc) (set! G4c9a@G4abf@G4aba G4abf@G4aba) (set! G4c99@G4ab9@&implementation-restriction-rcd G4ab9@&implementation-restriction-rcd) (set! G4c98@G4ab7@&implementation-restriction-rtd G4ab7@&implementation-restriction-rtd) (set! G4c97@G4ab5@implementation-restriction-violation? G4ab5@implementation-restriction-violation?) (set! G4c96@G4ab3@make-implementation-restriction-violation G4ab3@make-implementation-restriction-violation) (set! G4c95@G4ab1@p? G4ab1@p?) (set! G4c94@G4aae@G4aa6 G4aae@G4aa6) (set! G4c93@G4aac@G4aa7 G4aac@G4aa7) (set! G4c92@G4aaa@G4aa5 G4aaa@G4aa5) (set! G4c91@G4aa4@&non-continuable-rcd G4aa4@&non-continuable-rcd) (set! G4c90@G4aa2@&non-continuable-rtd G4aa2@&non-continuable-rtd) (set! G4c8f@G4aa0@non-continuable-violation? G4aa0@non-continuable-violation?) (set! G4c8e@G4a9e@make-non-continuable-violation G4a9e@make-non-continuable-violation) (set! G4c8d@G4a9c@p? G4a9c@p?) (set! G4c8c@G4a99@G4a91 G4a99@G4a91) (set! G4c8b@G4a97@G4a92 G4a97@G4a92) (set! G4c8a@G4a95@G4a90 G4a95@G4a90) (set! G4c89@G4a8f@&who-rcd G4a8f@&who-rcd) (set! G4c88@G4a8d@&who-rtd G4a8d@&who-rtd) (set! G4c87@G4a8b@condition-who G4a8b@condition-who) (set! G4c86@G4a89@who-condition? G4a89@who-condition?) (set! G4c85@G4a87@G4a76 G4a87@G4a76) (set! G4c84@G4a85@make-who-condition G4a85@make-who-condition) (set! G4c83@G4a83@p? G4a83@p?) (set! G4c82@G4a80@G4a78 G4a80@G4a78) (set! G4c81@G4a7e@G4a79 G4a7e@G4a79) (set! G4c80@G4a7c@G4a77 G4a7c@G4a77) (set! G4c7f@G4a75@&irritants-rcd G4a75@&irritants-rcd) (set! G4c7e@G4a73@&irritants-rtd G4a73@&irritants-rtd) (set! G4c7d@G4a71@condition-irritants G4a71@condition-irritants) (set! G4c7c@G4a6f@irritants-condition? G4a6f@irritants-condition?) (set! G4c7b@G4a6d@G4a5c G4a6d@G4a5c) (set! G4c7a@G4a6b@make-irritants-condition G4a6b@make-irritants-condition) (set! G4c79@G4a69@p? G4a69@p?) (set! G4c78@G4a66@G4a5e G4a66@G4a5e) (set! G4c77@G4a64@G4a5f G4a64@G4a5f) (set! G4c76@G4a62@G4a5d G4a62@G4a5d) (set! G4c75@G4a5b@&assertion-rcd G4a5b@&assertion-rcd) (set! G4c74@G4a59@&assertion-rtd G4a59@&assertion-rtd) (set! G4c73@G4a57@assertion-violation? G4a57@assertion-violation?) (set! G4c72@G4a55@make-assertion-violation G4a55@make-assertion-violation) (set! G4c71@G4a53@p? G4a53@p?) (set! G4c70@G4a50@G4a48 G4a50@G4a48) (set! G4c6f@G4a4e@G4a49 G4a4e@G4a49) (set! G4c6e@G4a4c@G4a47 G4a4c@G4a47) (set! G4c6d@G4a46@&violation-rcd G4a46@&violation-rcd) (set! G4c6c@G4a44@&violation-rtd G4a44@&violation-rtd) (set! G4c6b@G4a42@violation? G4a42@violation?) (set! G4c6a@G4a40@make-violation G4a40@make-violation) (set! G4c69@G4a3e@p? G4a3e@p?) (set! G4c68@G4a3b@G4a33 G4a3b@G4a33) (set! G4c67@G4a39@G4a34 G4a39@G4a34) (set! G4c66@G4a37@G4a32 G4a37@G4a32) (set! G4c65@G4a31@&error-rcd G4a31@&error-rcd) (set! G4c64@G4a2f@&error-rtd G4a2f@&error-rtd) (set! G4c63@G4a2d@error? G4a2d@error?) (set! G4c62@G4a2b@make-error G4a2b@make-error) (set! G4c61@G4a29@p? G4a29@p?) (set! G4c60@G4a26@G4a1e G4a26@G4a1e) (set! G4c5f@G4a24@G4a1f G4a24@G4a1f) (set! G4c5e@G4a22@G4a1d G4a22@G4a1d) (set! G4c5d@G4a1c@&serious-rcd G4a1c@&serious-rcd) (set! G4c5c@G4a1a@&serious-rtd G4a1a@&serious-rtd) (set! G4c5b@G4a18@serious-condition? G4a18@serious-condition?) (set! G4c5a@G4a16@make-serious-condition G4a16@make-serious-condition) (set! G4c59@G4a14@p? G4a14@p?) (set! G4c58@G4a11@G4a09 G4a11@G4a09) (set! G4c57@G4a0f@G4a0a G4a0f@G4a0a) (set! G4c56@G4a0d@G4a08 G4a0d@G4a08) (set! G4c55@G4a07@&warning-rcd G4a07@&warning-rcd) (set! G4c54@G4a05@&warning-rtd G4a05@&warning-rtd) (set! G4c53@G4a03@warning? G4a03@warning?) (set! G4c52@G4a01@make-warning G4a01@make-warning) (set! G4c51@G49ff@p? G49ff@p?) (set! G4c50@G49fc@G49f4 G49fc@G49f4) (set! G4c4f@G49fa@G49f5 G49fa@G49f5) (set! G4c4e@G49f8@G49f3 G49f8@G49f3) (set! G4c4d@G49f2@&message-rcd G49f2@&message-rcd) (set! G4c4c@G49f0@&message-rtd G49f0@&message-rtd) (set! G4c4b@G49ee@condition-message G49ee@condition-message) (set! G4c4a@G49ec@message-condition? G49ec@message-condition?) (set! G4c49@G49ea@G49d9 G49ea@G49d9) (set! G4c48@G49e8@make-message-condition G49e8@make-message-condition) (set! G4c47@G49e6@p? G49e6@p?) (set! G4c46@G49e3@G49db G49e3@G49db) (set! G4c45@G49e1@G49dc G49e1@G49dc) (set! G4c44@G49df@G49da G49df@G49da) (set! G4c43@G4995@&condition-rcd G4995@&condition-rcd) (set! G4c42@G4993@&condition-rtd G4993@&condition-rtd) (set! G4c41@G4991@make-&condition G4991@make-&condition) (set! G4c40@G498f@&condition? G498f@&condition?) (set! G4c3f@G498c@G4984 G498c@G4984) (set! G4c3e@G498a@G4985 G498a@G4985) (set! G4c3d@G4988@G4983 G4988@G4983)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G295d@G2912@current-primitive-locations (lambda (G50d4@x) ((lambda (G50d6@t) (if G50d6@t (cdr G50d6@t) '#f)) (assq G50d4@x '((&no-nans-rcd . G4d2d@G4c3c@&no-nans-rcd) (&no-nans-rtd . G4d2c@G4c3a@&no-nans-rtd) (&no-infinities-rcd . G4d25@G4c27@&no-infinities-rcd) (&no-infinities-rtd . G4d24@G4c25@&no-infinities-rtd) (&i/o-encoding-rcd . G4d1d@G4c12@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4d1c@G4c10@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4d13@G4bf8@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4d12@G4bf6@&i/o-decoding-rtd) (&i/o-port-rcd . G4d0b@G4be3@&i/o-port-rcd) (&i/o-port-rtd . G4d0a@G4be1@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4d01@G4bc9@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4d00@G4bc7@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cf9@G4bb4@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cf8@G4bb2@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cf1@G4b9f@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cf0@G4b9d@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4ce9@G4b8a@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4ce8@G4b88@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4ce1@G4b75@&i/o-filename-rcd) (&i/o-filename-rtd . G4ce0@G4b73@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4cd7@G4b5b@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4cd6@G4b59@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4ccd@G4b41@&i/o-write-rcd) (&i/o-write-rtd . G4ccc@G4b3f@&i/o-write-rtd) (&i/o-read-rcd . G4cc5@G4b2c@&i/o-read-rcd) (&i/o-read-rtd . G4cc4@G4b2a@&i/o-read-rtd) (&i/o-rcd . G4cbd@G4b17@&i/o-rcd) (&i/o-rtd . G4cbc@G4b15@&i/o-rtd) (&undefined-rcd . G4cb5@G4b02@&undefined-rcd) (&undefined-rtd . G4cb4@G4b00@&undefined-rtd) (&syntax-rcd . G4cad@G4aed@&syntax-rcd) (&syntax-rtd . G4cac@G4aeb@&syntax-rtd) (&lexical-rcd . G4ca1@G4ace@&lexical-rcd) (&lexical-rtd . G4ca0@G4acc@&lexical-rtd) (&implementation-restriction-rcd . G4c99@G4ab9@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c98@G4ab7@&implementation-restriction-rtd) (&non-continuable-rcd . G4c91@G4aa4@&non-continuable-rcd) (&non-continuable-rtd . G4c90@G4aa2@&non-continuable-rtd) (&who-rcd . G4c89@G4a8f@&who-rcd) (&who-rtd . G4c88@G4a8d@&who-rtd) (&irritants-rcd . G4c7f@G4a75@&irritants-rcd) (&irritants-rtd . G4c7e@G4a73@&irritants-rtd) (&assertion-rcd . G4c75@G4a5b@&assertion-rcd) (&assertion-rtd . G4c74@G4a59@&assertion-rtd) (&violation-rcd . G4c6d@G4a46@&violation-rcd) (&violation-rtd . G4c6c@G4a44@&violation-rtd) (&error-rcd . G4c65@G4a31@&error-rcd) (&error-rtd . G4c64@G4a2f@&error-rtd) (&serious-rcd . G4c5d@G4a1c@&serious-rcd) (&serious-rtd . G4c5c@G4a1a@&serious-rtd) (&warning-rcd . G4c55@G4a07@&warning-rcd) (&warning-rtd . G4c54@G4a05@&warning-rtd) (&message-rcd . G4c4d@G49f2@&message-rcd) (&message-rtd . G4c4c@G49f0@&message-rtd) (&condition-rcd . G4c43@G4995@&condition-rcd) (&condition-rtd . G4c42@G4993@&condition-rtd) (syntax-error . G4974@G3056@syntax-error) (syntax-dispatch . G4908@G2f6f@syntax-dispatch) (load . G4dd0@G4d3d@load) (interaction-environment . G497d@G3068@interaction-environment) (make-parameter . G290c@G2842@make-parameter) (make-variable-transformer . G48c6@G2daa@make-variable-transformer) (identifier? . G4978@G305e@identifier?) (generate-temporaries . G496d@G3048@generate-temporaries) (free-identifier=? . G496e@G304a@free-identifier=?) (syntax->datum . G497a@G3062@syntax->datum) (datum->syntax . G4979@G3060@datum->syntax) (bound-identifier=? . G496f@G304c@bound-identifier=?) (make-i/o-write-error . G4cca@G4b3b@make-i/o-write-error) (make-i/o-read-error . G4cc2@G4b26@make-i/o-read-error) (make-i/o-port-error . G4d06@G4bd9@make-i/o-port-error) (make-i/o-invalid-position-error . G4cd2@G4b51@make-i/o-invalid-position-error) (make-i/o-filename-error . G4cdc@G4b6b@make-i/o-filename-error) (make-i/o-file-protection-error . G4ce6@G4b84@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cee@G4b99@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cfe@G4bc3@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cf6@G4bae@make-i/o-file-already-exists-error) (make-i/o-error . G4cba@G4b11@make-i/o-error) (make-i/o-encoding-error . G4d18@G4c08@make-i/o-encoding-error) (make-i/o-decoding-error . G4d10@G4bf2@make-i/o-decoding-error) (i/o-write-error? . G4ccb@G4b3d@i/o-write-error?) (i/o-read-error? . G4cc3@G4b28@i/o-read-error?) (i/o-port-error? . G4d08@G4bdd@i/o-port-error?) (i/o-invalid-position-error? . G4cd4@G4b55@i/o-invalid-position-error?) (i/o-filename-error? . G4cde@G4b6f@i/o-filename-error?) (i/o-file-protection-error? . G4ce7@G4b86@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cef@G4b9b@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cff@G4bc5@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cf7@G4bb0@i/o-file-already-exists-error?) (i/o-error? . G4cbb@G4b13@i/o-error?) (i/o-error-position . G4cd5@G4b57@i/o-error-position) (i/o-error-port . G4d09@G4bdf@i/o-error-port) (i/o-error-filename . G4cdf@G4b71@i/o-error-filename) (i/o-encoding-error? . G4d1a@G4c0c@i/o-encoding-error?) (i/o-encoding-error-char . G4d1b@G4c0e@i/o-encoding-error-char) (i/o-decoding-error? . G4d11@G4bf4@i/o-decoding-error?) (scheme-report-environment . G4964@G3036@scheme-report-environment) (null-environment . G4963@G3034@null-environment) (command-line . G4dcd@G4d37@command-line) (eval . G4966@G303a@eval) (environment . G4962@G3032@environment) (who-condition? . G4c86@G4a89@who-condition?) (warning? . G4c53@G4a03@warning?) (violation? . G4c6b@G4a42@violation?) (undefined-violation? . G4cb3@G4afe@undefined-violation?) (syntax-violation? . G4ca9@G4ae5@syntax-violation?) (syntax-violation-subform . G4cab@G4ae9@syntax-violation-subform) (syntax-violation-form . G4caa@G4ae7@syntax-violation-form) (syntax-violation . G4977@G305c@syntax-violation) (serious-condition? . G4c5b@G4a18@serious-condition?) (non-continuable-violation? . G4c8f@G4aa0@non-continuable-violation?) (message-condition? . G4c4a@G49ec@message-condition?) (make-who-condition . G4c84@G4a85@make-who-condition) (make-warning . G4c52@G4a01@make-warning) (make-violation . G4c6a@G4a40@make-violation) (make-undefined-violation . G4cb2@G4afc@make-undefined-violation) (make-syntax-violation . G4ca6@G4adf@make-syntax-violation) (make-serious-condition . G4c5a@G4a16@make-serious-condition) (make-non-continuable-violation . G4c8e@G4a9e@make-non-continuable-violation) (make-message-condition . G4c48@G49e8@make-message-condition) (make-lexical-violation . G4c9e@G4ac8@make-lexical-violation) (make-irritants-condition . G4c7a@G4a6b@make-irritants-condition) (make-implementation-restriction-violation . G4c96@G4ab3@make-implementation-restriction-violation) (make-error . G4c62@G4a2b@make-error) (make-assertion-violation . G4c72@G4a55@make-assertion-violation) (lexical-violation? . G4c9f@G4aca@lexical-violation?) (irritants-condition? . G4c7c@G4a6f@irritants-condition?) (implementation-restriction-violation? . G4c97@G4ab5@implementation-restriction-violation?) (error? . G4c63@G4a2d@error?) (condition-who . G4c87@G4a8b@condition-who) (condition-message . G4c4b@G49ee@condition-message) (condition-irritants . G4c7d@G4a71@condition-irritants) (assertion-violation? . G4c73@G4a57@assertion-violation?) (no-nans-violation? . G4d2b@G4c38@no-nans-violation?) (no-infinities-violation? . G4d23@G4c23@no-infinities-violation?) (make-no-nans-violation . G4d2a@G4c36@make-no-nans-violation) (make-no-infinities-violation . G4d22@G4c21@make-no-infinities-violation)))))) (G2b85@G2a2a@install-library 'G50a7 '(mosh interaction) '() '() '() '() '((string-upcase . G5058) (string-titlecase . G5057) (string-normalize-nfkd . G5056) (string-normalize-nfkc . G5055) (string-normalize-nfd . G5054) (string-normalize-nfc . G5053) (string-foldcase . G5052) (string-downcase . G5051) (string-ci>? . G5050) (string-ci>=? . G504f) (string-ci=? . G504e) (string-ci<? . G504d) (string-ci<=? . G504c) (char-whitespace? . G504b) (char-upper-case? . G504a) (char-title-case? . G5049) (char-numeric? . G5048) (char-lower-case? . G5047) (char-general-category . G5046) (char-upcase . G5045) (char-titlecase . G5044) (char-foldcase . G5043) (char-downcase . G5042) (char-ci>? . G5041) (char-ci>=? . G5040) (char-ci=? . G503f) (char-ci<? . G503e) (char-ci<=? . G503d) (char-alphabetic? . G503c) (make-variable-transformer . G2da9) (identifier? . G305d) (generate-temporaries . G3047) (free-identifier=? . G3049) (syntax->datum . G3061) (datum->syntax . G305f) (bound-identifier=? . G304b) (record-type-descriptor? . G503b) (record-predicate . G503a) (record-mutator . G5039) (record-constructor . G5038) (record-accessor . G5037) (make-record-type-descriptor . G5036) (make-record-constructor-descriptor . G5035) (record? . G5034) (record-type-uid . G5033) (record-type-sealed? . G5032) (record-type-parent . G5031) (record-type-opaque? . G5030) (record-type-name . G502f) (record-type-generative? . G502e) (record-type-field-names . G502d) (record-rtd . G502c) (record-field-mutable? . G502b) (delete-file . G502a) (file-exists? . G5029) (vector-sort! . G5028) (vector-sort . G5027) (list-sort . G5026) (symbol-hash . G5025) (string-ci-hash . G5024) (string-hash . G5023) (equal-hash . G5022) (hashtable-equivalence-function . G5021) (make-hashtable . G5020) (hashtable-hash-function . G501f) (make-eqv-hashtable . G501e) (make-eq-hashtable . G501d) (hashtable? . G501c) (hashtable-update! . G501b) (hashtable-size . G501a) (hashtable-set! . G5019) (hashtable-ref . G5018) (hashtable-mutable? . G5017) (hashtable-keys . G5016) (hashtable-entries . G5015) (hashtable-delete! . G5014) (hashtable-copy . G5013) (hashtable-contains? . G5012) (hashtable-clear! . G5011) (call-with-output-file . G5010) (call-with-input-file . G500f) (write-char . G500e) (write . G500d) (with-output-to-file . G500c) (with-input-from-file . G500b) (read-char . G500a) (read . G5009) (peek-char . G5008) (open-output-file . G5007) (open-input-file . G5006) (newline . G5005) (display . G5004) (close-output-port . G5003) (close-input-port . G5002) (eof-object? . G5001) (eof-object . G5000) (current-error-port . G4fff) (current-output-port . G4ffe) (current-input-port . G4ffd) (output-port? . G4ffc) (input-port? . G4ffb) (utf-8-codec . G4ffa) (utf-16-codec . G4ff9) (transcoder-error-handling-mode . G4ff8) (transcoder-eol-style . G4ff7) (transcoder-codec . G4ff6) (transcoded-port . G4ff5) (textual-port? . G4ff4) (string->bytevector . G4ff3) (standard-output-port . G4ff2) (standard-input-port . G4ff1) (standard-error-port . G4ff0) (set-port-position! . G4fef) (put-u8 . G4fee) (put-string . G4fed) (put-datum . G4fec) (put-char . G4feb) (put-bytevector . G4fea) (port? . G4fe9) (port-transcoder . G4fe8) (port-position . G4fe7) (port-has-set-port-position!? . G4fe6) (port-has-port-position? . G4fe5) (port-eof? . G4fe4) (output-port-buffer-mode . G4fe3) (open-string-output-port . G4fe2) (open-string-input-port . G4fe1) (open-file-output-port . G4fe0) (open-file-input/output-port . G4fdf) (open-file-input-port . G4fde) (open-bytevector-output-port . G4fdd) (open-bytevector-input-port . G4fdc) (native-transcoder . G4fdb) (native-eol-style . G4fda) (make-transcoder . G4fd9) (latin-1-codec . G4fd8) (make-i/o-write-error . G4b3a) (make-i/o-read-error . G4b25) (make-i/o-port-error . G4bd8) (make-i/o-invalid-position-error . G4b50) (make-i/o-filename-error . G4b6a) (make-i/o-file-protection-error . G4b83) (make-i/o-file-is-read-only-error . G4b98) (make-i/o-file-does-not-exist-error . G4bc2) (make-i/o-file-already-exists-error . G4bad) (make-i/o-error . G4b10) (make-i/o-encoding-error . G4c07) (make-i/o-decoding-error . G4bf1) (make-custom-textual-output-port . G4fd7) (make-custom-textual-input/output-port . G4fd6) (make-custom-textual-input-port . G4fd5) (make-custom-binary-output-port . G4fd4) (make-custom-binary-input/output-port . G4fd3) (make-custom-binary-input-port . G4fd2) (make-bytevector . G4fd1) (lookahead-u8 . G4fd0) (lookahead-char . G4fcf) (i/o-write-error? . G4b3c) (i/o-read-error? . G4b27) (i/o-port-error? . G4bdc) (i/o-invalid-position-error? . G4b54) (i/o-filename-error? . G4b6e) (i/o-file-protection-error? . G4b85) (i/o-file-is-read-only-error? . G4b9a) (i/o-file-does-not-exist-error? . G4bc4) (i/o-file-already-exists-error? . G4baf) (i/o-error? . G4b12) (i/o-error-position . G4b56) (i/o-error-port . G4bde) (i/o-error-filename . G4b70) (i/o-encoding-error? . G4c0b) (i/o-encoding-error-char . G4c0d) (i/o-decoding-error? . G4bf3) (get-u8 . G4fce) (get-string-n! . G4fcd) (get-string-n . G4fcc) (get-string-all . G4fcb) (get-line . G4fca) (get-datum . G4fc9) (get-char . G4fc8) (get-bytevector-some . G4fc7) (get-bytevector-n! . G4fc6) (get-bytevector-n . G4fc5) (get-bytevector-all . G4fc4) (flush-output-port . G4fc3) (close-port . G4fc2) (exit . G4fba) (command-line . G4d36) (string-fill! . G4fb9) (string-set! . G4fb8) (set-cdr! . G4fb7) (set-car! . G4fb6) (remove . G4fb5) (remv . G4fb4) (remp . G4fb3) (remq . G4fb2) (partition . G4fb1) (memv . G4fb0) (memq . G4faf) (memp . G4fae) (member . G4fad) (exists . G4fac) (for-all . G4fab) (fold-right . G4faa) (fold-left . G4fa9) (find . G4fa8) (filter . G4fa7) (cons* . G4fa6) (assv . G4fa5) (assq . G4fa4) (assp . G4fa3) (assoc . G4fa2) (call-with-string-output-port . G4fa1) (call-with-port . G4fa0) (call-with-bytevector-output-port . G4f9f) (bytevector->string . G4f9e) (buffer-mode? . G4f9d) (binary-port? . G4f9c) (with-exception-handler . G4f9b) (raise-continuable . G4f9a) (raise . G4f99) (eval . G3039) (environment . G3031) (make-enumeration . G4f98) (enum-set=? . G4f97) (enum-set-universe . G4f96) (enum-set-union . G4f95) (enum-set-subset? . G4f94) (enum-set-projection . G4f93) (enum-set-member? . G4f92) (enum-set-intersection . G4f91) (enum-set-indexer . G4f90) (enum-set-difference . G4f8f) (enum-set-constructor . G4f8e) (enum-set-complement . G4f8d) (enum-set->list . G4f8c) (who-condition? . G4a88) (warning? . G4a02) (violation? . G4a41) (undefined-violation? . G4afd) (syntax-violation? . G4ae4) (syntax-violation-subform . G4ae8) (syntax-violation-form . G4ae6) (syntax-violation . G305b) (simple-conditions . G4f8b) (serious-condition? . G4a17) (non-continuable-violation? . G4a9f) (message-condition? . G49eb) (make-who-condition . G4a84) (make-warning . G4a00) (make-violation . G4a3f) (make-undefined-violation . G4afb) (make-syntax-violation . G4ade) (make-serious-condition . G4a15) (make-non-continuable-violation . G4a9d) (make-message-condition . G49e7) (make-lexical-violation . G4ac7) (make-irritants-condition . G4a6a) (make-implementation-restriction-violation . G4ab2) (make-error . G4a2a) (make-assertion-violation . G4a54) (lexical-violation? . G4ac9) (irritants-condition? . G4a6e) (implementation-restriction-violation? . G4ab4) (error? . G4a2c) (condition-who . G4a8a) (condition-predicate . G4f8a) (condition-message . G49ed) (condition-irritants . G4a70) (condition-accessor . G4f89) (condition . G4f88) (assertion-violation? . G4a56) (condition? . G4f87) (utf32->string . G4f86) (utf16->string . G4f85) (utf8->string . G4f84) (uint-list->bytevector . G4f83) (u8-list->bytevector . G4f82) (string->utf8 . G4f81) (string->utf32 . G4f80) (string->utf16 . G4f7f) (sint-list->bytevector . G4f7e) (native-endianness . G4f7d) (bytevector? . G4f7c) (bytevector=? . G4f7b) (bytevector-uint-set! . G4f7a) (bytevector-uint-ref . G4f79) (bytevector-u8-set! . G4f78) (bytevector-u8-ref . G4f77) (bytevector-u64-set! . G4f76) (bytevector-u64-ref . G4f75) (bytevector-u64-native-set! . G4f74) (bytevector-u64-native-ref . G4f73) (bytevector-u32-set! . G4f72) (bytevector-u32-ref . G4f71) (bytevector-u32-native-set! . G4f70) (bytevector-u32-native-ref . G4f6f) (bytevector-u16-set! . G4f6e) (bytevector-u16-ref . G4f6d) (bytevector-u16-native-set! . G4f6c) (bytevector-u16-native-ref . G4f6b) (bytevector-sint-set! . G4f6a) (bytevector-sint-ref . G4f69) (bytevector-s8-set! . G4f68) (bytevector-s8-ref . G4f67) (bytevector-s64-set! . G4f66) (bytevector-s64-ref . G4f65) (bytevector-s64-native-set! . G4f64) (bytevector-s64-native-ref . G4f63) (bytevector-s32-set! . G4f62) (bytevector-s32-ref . G4f61) (bytevector-s32-native-set! . G4f60) (bytevector-s32-native-ref . G4f5f) (bytevector-s16-set! . G4f5e) (bytevector-s16-ref . G4f5d) (bytevector-s16-native-set! . G4f5c) (bytevector-s16-native-ref . G4f5b) (bytevector-length . G4f5a) (bytevector-ieee-single-ref . G4f59) (bytevector-ieee-single-set! . G4f58) (bytevector-ieee-single-native-set! . G4f57) (bytevector-ieee-single-native-ref . G4f56) (bytevector-ieee-double-set! . G4f55) (bytevector-ieee-double-ref . G4f54) (bytevector-ieee-double-native-set! . G4f53) (bytevector-ieee-double-native-ref . G4f52) (bytevector-fill! . G4f51) (bytevector-copy! . G4f50) (bytevector-copy . G4f4f) (bytevector->uint-list . G4f4e) (bytevector->u8-list . G4f4d) (bytevector->sint-list . G4f4c) (no-nans-violation? . G4c37) (no-infinities-violation? . G4c22) (make-no-nans-violation . G4c35) (make-no-infinities-violation . G4c20) (real->flonum . G4f4b) (flzero? . G4f4a) (fltruncate . G4f49) (fltan . G4f48) (flsqrt . G4f47) (flsin . G4f46) (flround . G4f45) (flpositive? . G4f44) (flonum? . G4f43) (flodd? . G4f42) (flnumerator . G4f41) (flnegative? . G4f40) (flnan? . G4f3f) (flmod0 . G4f3e) (flmod . G4f3d) (flmin . G4f3c) (flmax . G4f3b) (fllog . G4f3a) (flinteger? . G4f39) (flinfinite? . G4f38) (flfloor . G4f37) (flfinite? . G4f36) (flexpt . G4f35) (flexp . G4f34) (fleven? . G4f33) (fldiv0-and-mod0 . G4f32) (fldiv0 . G4f31) (fldiv-and-mod . G4f30) (fldiv . G4f2f) (fldenominator . G4f2e) (flcos . G4f2d) (flceiling . G4f2c) (flatan . G4f2b) (flasin . G4f2a) (flacos . G4f29) (flabs . G4f28) (fl>? . G4f27) (fl>=? . G4f26) (fl=? . G4f25) (fl<? . G4f24) (fl<=? . G4f23) (fl/ . G4f22) (fl- . G4f21) (fl+ . G4f20) (fl* . G4f1f) (fixnum->flonum . G4f1e) (fxzero? . G4f1d) (fxxor . G4f1c) (fxrotate-bit-field . G4f1b) (fxreverse-bit-field . G4f1a) (fxpositive? . G4f19) (fxodd? . G4f18) (fxnot . G4f17) (fxnegative? . G4f16) (fxmod0 . G4f15) (fxmod . G4f14) (fxmin . G4f13) (fxmax . G4f12) (fxlength . G4f11) (fxior . G4f10) (fxif . G4f0f) (fxfirst-bit-set . G4f0e) (fxeven? . G4f0d) (fxdiv0-and-mod0 . G4f0c) (fxdiv0 . G4f0b) (fxdiv-and-mod . G4f0a) (fxdiv . G4f09) (fxcopy-bit-field . G4f08) (fxcopy-bit . G4f07) (fxbit-set? . G4f06) (fxbit-field . G4f05) (fxbit-count . G4f04) (fxarithmetic-shift-right . G4f03) (fxarithmetic-shift-left . G4f02) (fxarithmetic-shift . G4f01) (fxand . G4f00) (fx>? . G4eff) (fx>=? . G4efe) (fx=? . G4efd) (fx<? . G4efc) (fx<=? . G4efb) (fx-/carry . G4efa) (fx- . G4ef9) (fx+/carry . G4ef8) (fx+ . G4ef7) (fx*/carry . G4ef6) (fx* . G4ef5) (greatest-fixnum . G4ef4) (least-fixnum . G4ef3) (fixnum-width . G4ef2) (fixnum? . G4ef1) (bitwise-rotate-bit-field . G4ef0) (bitwise-reverse-bit-field . G4eef) (bitwise-length . G4eee) (bitwise-if . G4eed) (bitwise-first-bit-set . G4eec) (bitwise-copy-bit-field . G4eeb) (bitwise-copy-bit . G4eea) (bitwise-bit-set? . G4ee9) (bitwise-bit-field . G4ee8) (bitwise-bit-count . G4ee7) (bitwise-xor . G4ee6) (bitwise-ior . G4ee5) (bitwise-and . G4ee4) (bitwise-not . G4ee3) (bitwise-arithmetic-shift-right . G4ee2) (bitwise-arithmetic-shift-left . G4ee1) (bitwise-arithmetic-shift . G4ee0) (zero? . G4edf) (vector? . G4ede) (vector-set! . G4edd) (vector-ref . G4edc) (vector-map . G4edb) (vector-length . G4eda) (vector-for-each . G4ed9) (vector-fill! . G4ed8) (vector->list . G4ed7) (vector . G4ed6) (values . G4ed5) (truncate . G4ed4) (tan . G4ed3) (symbol? . G4ed2) (symbol=? . G4ed1) (symbol->string . G4ed0) (substring . G4ecf) (string? . G4ece) (string>? . G4ecd) (string>=? . G4ecc) (string=? . G4ecb) (string<? . G4eca) (string<=? . G4ec9) (string-ref . G4ec8) (string-length . G4ec7) (string-for-each . G4ec6) (string-copy . G4ec5) (string-append . G4ec4) (string->symbol . G4ec3) (string->number . G4ec2) (string->list . G4ec1) (string . G4ec0) (sqrt . G4ebf) (sin . G4ebe) (round . G4ebd) (reverse . G4ebc) (real? . G4ebb) (real-valued? . G4eba) (real-part . G4eb9) (rationalize . G4eb8) (rational? . G4eb7) (rational-valued? . G4eb6) (procedure? . G4eb5) (positive? . G4eb4) (pair? . G4eb3) (odd? . G4eb2) (numerator . G4eb1) (number? . G4eb0) (number->string . G4eaf) (null? . G4eae) (not . G4ead) (negative? . G4eac) (nan? . G4eab) (min . G4eaa) (max . G4ea9) (map . G4ea8) (make-vector . G4ea7) (make-string . G4ea6) (make-rectangular . G4ea5) (make-polar . G4ea4) (magnitude . G4ea3) (log . G4ea2) (list? . G4ea1) (list-tail . G4ea0) (list-ref . G4e9f) (list->vector . G4e9e) (list->string . G4e9d) (list . G4e9c) (length . G4e9b) (lcm . G4e9a) (integer? . G4e99) (integer-valued? . G4e98) (integer->char . G4e97) (infinite? . G4e96) (inexact? . G4e95) (inexact . G4e94) (imag-part . G4e93) (gcd . G4e92) (for-each . G4e91) (floor . G4e90) (finite? . G4e8f) (expt . G4e8e) (exp . G4e8d) (exact? . G4e8c) (exact-integer-sqrt . G4e8b) (exact . G4e8a) (even? . G4e89) (error . G4e88) (eqv? . G4e87) (equal? . G4e86) (eq? . G4e85) (dynamic-wind . G4e84) (div0-and-mod0 . G4e83) (mod0 . G4e82) (div0 . G4e81) (div-and-mod . G4e80) (mod . G4e7f) (div . G4e7e) (denominator . G4e7d) (cos . G4e7c) (cons . G4e7b) (complex? . G4e7a) (char? . G4e79) (char>? . G4e78) (char>=? . G4e77) (char=? . G4e76) (char<? . G4e75) (char<=? . G4e74) (char->integer . G4e73) (ceiling . G4e72) (call-with-values . G4e71) (call/cc . G4e70) (call-with-current-continuation . G4e6f) (cddddr . G4e6e) (cdddar . G4e6d) (cddadr . G4e6c) (cddaar . G4e6b) (cdaddr . G4e6a) (cdadar . G4e69) (cdaadr . G4e68) (cdaaar . G4e67) (cadddr . G4e66) (caddar . G4e65) (cadadr . G4e64) (cadaar . G4e63) (caaddr . G4e62) (caadar . G4e61) (caaadr . G4e60) (caaaar . G4e5f) (cdddr . G4e5e) (cddar . G4e5d) (cdadr . G4e5c) (cdaar . G4e5b) (caddr . G4e5a) (cadar . G4e59) (caadr . G4e58) (caaar . G4e57) (cddr . G4e56) (cdar . G4e55) (cadr . G4e54) (caar . G4e53) (cdr . G4e52) (car . G4e51) (boolean? . G4e50) (boolean=? . G4e4f) (atan . G4e4e) (assertion-violation . G4e4d) (asin . G4e4c) (apply . G4e4b) (append . G4e4a) (angle . G4e49) (acos . G4e48) (abs . G4e47) (/ . G4e46) (* . G4e45) (- . G4e44) (+ . G4e43) (>= . G4e42) (> . G4e41) (= . G4e40) (<= . G4e3f) (< . G4e3e) (library . G4e3d) (export . G4e3c) (&no-nans . G4e3b) (&no-infinities . G4e3a) (&i/o-encoding . G4e39) (&i/o-decoding . G4e38) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e) (&undefined . G4e2d) (&syntax . G4e2c) (&lexical . G4e2b) (&implementation-restriction . G4e2a) (&non-continuable . G4e29) (&who . G4e28) (&irritants . G4e27) (&assertion . G4e26) (&violation . G4e25) (&error . G4e24) (&serious . G4e23) (&warning . G4e22) (&message . G4e21) (&condition . G4e20) (define-condition-type . G4e1f) (define-enumeration . G4e1e) (define-record-type . G4e1d) (parent-rtd . G4e1c) (nongenerative . G4e1b) (opaque . G4e1a) (sealed . G4e19) (protocol . G4e18) (parent . G4e17) (immutable . G4e16) (mutable . G4e15) (fields . G4e14) (error-handling-mode . G4e13) (file-options . G4e12) (buffer-mode . G4e11) (eol-style . G4e10) (guard . G4e0f) (unsyntax-splicing . G4e0c) (unsyntax . G4e0b) (unquote-splicing . G4e0a) (unquote . G4e09) (assert . G4e04) (endianness . G4e03) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (let*-values . G4dfc) (let-values . G4dfb) (identifier-syntax . G4dfa) (with-syntax . G4df9) (quasisyntax . G4df8) (quasiquote . G4df7) (syntax-rules . G4df6) (include . G4df5) (record-constructor-descriptor . G4df3) (record-type-descriptor . G4df2) (case . G4df1) (unless . G4def) (when . G4dee) (or . G4ded) (and . G4dec) (if . G4deb) (letrec* . G4dea) (letrec . G4de9) (case-lambda . G4de7) (lambda . G4de6) (syntax . G4de5) (syntax-case . G4de4) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (import . G4dde) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50a8 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fbb) (unquote-splicing . G4e0a) (unquote . G4e09) (_ . G4e08) (else . G4e07) (=> . G4e06) (... . G4e05) (delay . G4e02) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (quasiquote . G4df7) (syntax-rules . G4df6) (case . G4df1) (or . G4ded) (and . G4dec) (if . G4deb) (letrec . G4de9) (lambda . G4de6) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50a9 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G5050) (string-ci>=? . G504f) (string-ci=? . G504e) (string-ci<? . G504d) (string-ci<=? . G504c) (char-whitespace? . G504b) (char-upper-case? . G504a) (char-numeric? . G5048) (char-lower-case? . G5047) (char-upcase . G5045) (char-downcase . G5042) (char-ci>? . G5041) (char-ci>=? . G5040) (char-ci=? . G503f) (char-ci<? . G503e) (char-ci<=? . G503d) (char-alphabetic? . G503c) (call-with-output-file . G5010) (call-with-input-file . G500f) (write-char . G500e) (write . G500d) (with-output-to-file . G500c) (with-input-from-file . G500b) (read-char . G500a) (read . G5009) (peek-char . G5008) (open-output-file . G5007) (open-input-file . G5006) (newline . G5005) (display . G5004) (close-output-port . G5003) (close-input-port . G5002) (eof-object . G5000) (current-output-port . G4ffe) (current-input-port . G4ffd) (output-port? . G4ffc) (input-port? . G4ffb) (scheme-report-environment . G3035) (quotient . G4fc1) (null-environment . G3033) (remainder . G4fc0) (modulo . G4fbf) (inexact->exact . G4fbe) (force . G4fbd) (exact->inexact . G4fbc) (make-promise . G4fbb) (string-fill! . G4fb9) (string-set! . G4fb8) (set-cdr! . G4fb7) (set-car! . G4fb6) (memv . G4fb0) (memq . G4faf) (member . G4fad) (assv . G4fa5) (assq . G4fa4) (assoc . G4fa2) (eval . G3039) (zero? . G4edf) (vector? . G4ede) (vector-set! . G4edd) (vector-ref . G4edc) (vector-length . G4eda) (vector-fill! . G4ed8) (vector->list . G4ed7) (vector . G4ed6) (values . G4ed5) (truncate . G4ed4) (tan . G4ed3) (symbol? . G4ed2) (symbol->string . G4ed0) (substring . G4ecf) (string? . G4ece) (string>? . G4ecd) (string>=? . G4ecc) (string=? . G4ecb) (string<? . G4eca) (string<=? . G4ec9) (string-ref . G4ec8) (string-length . G4ec7) (string-copy . G4ec5) (string-append . G4ec4) (string->symbol . G4ec3) (string->number . G4ec2) (string->list . G4ec1) (string . G4ec0) (sqrt . G4ebf) (sin . G4ebe) (round . G4ebd) (reverse . G4ebc) (real? . G4ebb) (real-part . G4eb9) (rationalize . G4eb8) (rational? . G4eb7) (procedure? . G4eb5) (positive? . G4eb4) (pair? . G4eb3) (odd? . G4eb2) (numerator . G4eb1) (number? . G4eb0) (number->string . G4eaf) (not . G4ead) (negative? . G4eac) (min . G4eaa) (max . G4ea9) (map . G4ea8) (make-vector . G4ea7) (make-string . G4ea6) (make-rectangular . G4ea5) (make-polar . G4ea4) (magnitude . G4ea3) (log . G4ea2) (list? . G4ea1) (list-tail . G4ea0) (list-ref . G4e9f) (list->vector . G4e9e) (list->string . G4e9d) (list . G4e9c) (length . G4e9b) (lcm . G4e9a) (integer? . G4e99) (integer->char . G4e97) (inexact? . G4e95) (imag-part . G4e93) (gcd . G4e92) (for-each . G4e91) (floor . G4e90) (expt . G4e8e) (exp . G4e8d) (exact? . G4e8c) (even? . G4e89) (eqv? . G4e87) (equal? . G4e86) (eq? . G4e85) (dynamic-wind . G4e84) (denominator . G4e7d) (cos . G4e7c) (cons . G4e7b) (complex? . G4e7a) (char? . G4e79) (char>? . G4e78) (char>=? . G4e77) (char=? . G4e76) (char<? . G4e75) (char<=? . G4e74) (char->integer . G4e73) (ceiling . G4e72) (call-with-values . G4e71) (call-with-current-continuation . G4e6f) (cddddr . G4e6e) (cdddar . G4e6d) (cddadr . G4e6c) (cddaar . G4e6b) (cdaddr . G4e6a) (cdadar . G4e69) (cdaadr . G4e68) (cdaaar . G4e67) (cadddr . G4e66) (caddar . G4e65) (cadadr . G4e64) (cadaar . G4e63) (caaddr . G4e62) (caadar . G4e61) (caaadr . G4e60) (caaaar . G4e5f) (cdddr . G4e5e) (cddar . G4e5d) (cdadr . G4e5c) (cdaar . G4e5b) (caddr . G4e5a) (cadar . G4e59) (caadr . G4e58) (caaar . G4e57) (cddr . G4e56) (cdar . G4e55) (cadr . G4e54) (caar . G4e53) (cdr . G4e52) (car . G4e51) (boolean? . G4e50) (atan . G4e4e) (asin . G4e4c) (apply . G4e4b) (append . G4e4a) (angle . G4e49) (acos . G4e48) (abs . G4e47) (/ . G4e46) (* . G4e45) (- . G4e44) (+ . G4e43) (>= . G4e42) (> . G4e41) (= . G4e40) (<= . G4e3f) (< . G4e3e) (unquote-splicing . G4e0a) (unquote . G4e09) (else . G4e07) (=> . G4e06) (... . G4e05) (delay . G4e02) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (quasiquote . G4df7) (syntax-rules . G4df6) (case . G4df1) (or . G4ded) (and . G4dec) (if . G4deb) (letrec . G4de9) (lambda . G4de6) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50aa '(psyntax modules) '() '() '() '() '((module . G4ddc)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50ab '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50ac '(rnrs) '(6) '() '() '() '((regexp? . G509f) (string-upcase . G5058) (string-titlecase . G5057) (string-normalize-nfkd . G5056) (string-normalize-nfkc . G5055) (string-normalize-nfd . G5054) (string-normalize-nfc . G5053) (string-foldcase . G5052) (string-downcase . G5051) (string-ci>? . G5050) (string-ci>=? . G504f) (string-ci=? . G504e) (string-ci<? . G504d) (string-ci<=? . G504c) (char-whitespace? . G504b) (char-upper-case? . G504a) (char-title-case? . G5049) (char-numeric? . G5048) (char-lower-case? . G5047) (char-general-category . G5046) (char-upcase . G5045) (char-titlecase . G5044) (char-foldcase . G5043) (char-downcase . G5042) (char-ci>? . G5041) (char-ci>=? . G5040) (char-ci=? . G503f) (char-ci<? . G503e) (char-ci<=? . G503d) (char-alphabetic? . G503c) (make-variable-transformer . G2da9) (identifier? . G305d) (generate-temporaries . G3047) (free-identifier=? . G3049) (syntax->datum . G3061) (datum->syntax . G305f) (bound-identifier=? . G304b) (record-type-descriptor? . G503b) (record-predicate . G503a) (record-mutator . G5039) (record-constructor . G5038) (record-accessor . G5037) (make-record-type-descriptor . G5036) (make-record-constructor-descriptor . G5035) (record? . G5034) (record-type-uid . G5033) (record-type-sealed? . G5032) (record-type-parent . G5031) (record-type-opaque? . G5030) (record-type-name . G502f) (record-type-generative? . G502e) (record-type-field-names . G502d) (record-rtd . G502c) (record-field-mutable? . G502b) (delete-file . G502a) (file-exists? . G5029) (vector-sort! . G5028) (vector-sort . G5027) (list-sort . G5026) (symbol-hash . G5025) (string-ci-hash . G5024) (string-hash . G5023) (equal-hash . G5022) (hashtable-equivalence-function . G5021) (make-hashtable . G5020) (hashtable-hash-function . G501f) (make-eqv-hashtable . G501e) (make-eq-hashtable . G501d) (hashtable? . G501c) (hashtable-update! . G501b) (hashtable-size . G501a) (hashtable-set! . G5019) (hashtable-ref . G5018) (hashtable-mutable? . G5017) (hashtable-keys . G5016) (hashtable-entries . G5015) (hashtable-delete! . G5014) (hashtable-copy . G5013) (hashtable-contains? . G5012) (hashtable-clear! . G5011) (call-with-output-file . G5010) (call-with-input-file . G500f) (write-char . G500e) (write . G500d) (with-output-to-file . G500c) (with-input-from-file . G500b) (read-char . G500a) (read . G5009) (peek-char . G5008) (open-output-file . G5007) (open-input-file . G5006) (newline . G5005) (display . G5004) (close-output-port . G5003) (close-input-port . G5002) (eof-object? . G5001) (eof-object . G5000) (current-error-port . G4fff) (current-output-port . G4ffe) (current-input-port . G4ffd) (output-port? . G4ffc) (input-port? . G4ffb) (utf-8-codec . G4ffa) (utf-16-codec . G4ff9) (transcoder-error-handling-mode . G4ff8) (transcoder-eol-style . G4ff7) (transcoder-codec . G4ff6) (transcoded-port . G4ff5) (textual-port? . G4ff4) (string->bytevector . G4ff3) (standard-output-port . G4ff2) (standard-input-port . G4ff1) (standard-error-port . G4ff0) (set-port-position! . G4fef) (put-u8 . G4fee) (put-string . G4fed) (put-datum . G4fec) (put-char . G4feb) (put-bytevector . G4fea) (port? . G4fe9) (port-transcoder . G4fe8) (port-position . G4fe7) (port-has-set-port-position!? . G4fe6) (port-has-port-position? . G4fe5) (port-eof? . G4fe4) (output-port-buffer-mode . G4fe3) (open-string-output-port . G4fe2) (open-string-input-port . G4fe1) (open-file-output-port . G4fe0) (open-file-input/output-port . G4fdf) (open-file-input-port . G4fde) (open-bytevector-output-port . G4fdd) (open-bytevector-input-port . G4fdc) (native-transcoder . G4fdb) (native-eol-style . G4fda) (make-transcoder . G4fd9) (latin-1-codec . G4fd8) (make-i/o-write-error . G4b3a) (make-i/o-read-error . G4b25) (make-i/o-port-error . G4bd8) (make-i/o-invalid-position-error . G4b50) (make-i/o-filename-error . G4b6a) (make-i/o-file-protection-error . G4b83) (make-i/o-file-is-read-only-error . G4b98) (make-i/o-file-does-not-exist-error . G4bc2) (make-i/o-file-already-exists-error . G4bad) (make-i/o-error . G4b10) (make-i/o-encoding-error . G4c07) (make-i/o-decoding-error . G4bf1) (make-custom-textual-output-port . G4fd7) (make-custom-textual-input/output-port . G4fd6) (make-custom-textual-input-port . G4fd5) (make-custom-binary-output-port . G4fd4) (make-custom-binary-input/output-port . G4fd3) (make-custom-binary-input-port . G4fd2) (make-bytevector . G4fd1) (lookahead-u8 . G4fd0) (lookahead-char . G4fcf) (i/o-write-error? . G4b3c) (i/o-read-error? . G4b27) (i/o-port-error? . G4bdc) (i/o-invalid-position-error? . G4b54) (i/o-filename-error? . G4b6e) (i/o-file-protection-error? . G4b85) (i/o-file-is-read-only-error? . G4b9a) (i/o-file-does-not-exist-error? . G4bc4) (i/o-file-already-exists-error? . G4baf) (i/o-error? . G4b12) (i/o-error-position . G4b56) (i/o-error-port . G4bde) (i/o-error-filename . G4b70) (i/o-encoding-error? . G4c0b) (i/o-encoding-error-char . G4c0d) (i/o-decoding-error? . G4bf3) (get-u8 . G4fce) (get-string-n! . G4fcd) (get-string-n . G4fcc) (get-string-all . G4fcb) (get-line . G4fca) (get-datum . G4fc9) (get-char . G4fc8) (get-bytevector-some . G4fc7) (get-bytevector-n! . G4fc6) (get-bytevector-n . G4fc5) (get-bytevector-all . G4fc4) (flush-output-port . G4fc3) (close-port . G4fc2) (exit . G4fba) (command-line . G4d36) (remove . G4fb5) (remv . G4fb4) (remp . G4fb3) (remq . G4fb2) (partition . G4fb1) (memv . G4fb0) (memq . G4faf) (memp . G4fae) (member . G4fad) (exists . G4fac) (for-all . G4fab) (fold-right . G4faa) (fold-left . G4fa9) (find . G4fa8) (filter . G4fa7) (cons* . G4fa6) (assv . G4fa5) (assq . G4fa4) (assp . G4fa3) (assoc . G4fa2) (call-with-string-output-port . G4fa1) (call-with-port . G4fa0) (call-with-bytevector-output-port . G4f9f) (bytevector->string . G4f9e) (buffer-mode? . G4f9d) (binary-port? . G4f9c) (with-exception-handler . G4f9b) (raise-continuable . G4f9a) (raise . G4f99) (make-enumeration . G4f98) (enum-set=? . G4f97) (enum-set-universe . G4f96) (enum-set-union . G4f95) (enum-set-subset? . G4f94) (enum-set-projection . G4f93) (enum-set-member? . G4f92) (enum-set-intersection . G4f91) (enum-set-indexer . G4f90) (enum-set-difference . G4f8f) (enum-set-constructor . G4f8e) (enum-set-complement . G4f8d) (enum-set->list . G4f8c) (who-condition? . G4a88) (warning? . G4a02) (violation? . G4a41) (undefined-violation? . G4afd) (syntax-violation? . G4ae4) (syntax-violation-subform . G4ae8) (syntax-violation-form . G4ae6) (syntax-violation . G305b) (simple-conditions . G4f8b) (serious-condition? . G4a17) (non-continuable-violation? . G4a9f) (message-condition? . G49eb) (make-who-condition . G4a84) (make-warning . G4a00) (make-violation . G4a3f) (make-undefined-violation . G4afb) (make-syntax-violation . G4ade) (make-serious-condition . G4a15) (make-non-continuable-violation . G4a9d) (make-message-condition . G49e7) (make-lexical-violation . G4ac7) (make-irritants-condition . G4a6a) (make-implementation-restriction-violation . G4ab2) (make-error . G4a2a) (make-assertion-violation . G4a54) (lexical-violation? . G4ac9) (irritants-condition? . G4a6e) (implementation-restriction-violation? . G4ab4) (error? . G4a2c) (condition-who . G4a8a) (condition-predicate . G4f8a) (condition-message . G49ed) (condition-irritants . G4a70) (condition-accessor . G4f89) (condition . G4f88) (assertion-violation? . G4a56) (condition? . G4f87) (utf32->string . G4f86) (utf16->string . G4f85) (utf8->string . G4f84) (uint-list->bytevector . G4f83) (u8-list->bytevector . G4f82) (string->utf8 . G4f81) (string->utf32 . G4f80) (string->utf16 . G4f7f) (sint-list->bytevector . G4f7e) (native-endianness . G4f7d) (bytevector? . G4f7c) (bytevector=? . G4f7b) (bytevector-uint-set! . G4f7a) (bytevector-uint-ref . G4f79) (bytevector-u8-set! . G4f78) (bytevector-u8-ref . G4f77) (bytevector-u64-set! . G4f76) (bytevector-u64-ref . G4f75) (bytevector-u64-native-set! . G4f74) (bytevector-u64-native-ref . G4f73) (bytevector-u32-set! . G4f72) (bytevector-u32-ref . G4f71) (bytevector-u32-native-set! . G4f70) (bytevector-u32-native-ref . G4f6f) (bytevector-u16-set! . G4f6e) (bytevector-u16-ref . G4f6d) (bytevector-u16-native-set! . G4f6c) (bytevector-u16-native-ref . G4f6b) (bytevector-sint-set! . G4f6a) (bytevector-sint-ref . G4f69) (bytevector-s8-set! . G4f68) (bytevector-s8-ref . G4f67) (bytevector-s64-set! . G4f66) (bytevector-s64-ref . G4f65) (bytevector-s64-native-set! . G4f64) (bytevector-s64-native-ref . G4f63) (bytevector-s32-set! . G4f62) (bytevector-s32-ref . G4f61) (bytevector-s32-native-set! . G4f60) (bytevector-s32-native-ref . G4f5f) (bytevector-s16-set! . G4f5e) (bytevector-s16-ref . G4f5d) (bytevector-s16-native-set! . G4f5c) (bytevector-s16-native-ref . G4f5b) (bytevector-length . G4f5a) (bytevector-ieee-single-ref . G4f59) (bytevector-ieee-single-set! . G4f58) (bytevector-ieee-single-native-set! . G4f57) (bytevector-ieee-single-native-ref . G4f56) (bytevector-ieee-double-set! . G4f55) (bytevector-ieee-double-ref . G4f54) (bytevector-ieee-double-native-set! . G4f53) (bytevector-ieee-double-native-ref . G4f52) (bytevector-fill! . G4f51) (bytevector-copy! . G4f50) (bytevector-copy . G4f4f) (bytevector->uint-list . G4f4e) (bytevector->u8-list . G4f4d) (bytevector->sint-list . G4f4c) (no-nans-violation? . G4c37) (no-infinities-violation? . G4c22) (make-no-nans-violation . G4c35) (make-no-infinities-violation . G4c20) (real->flonum . G4f4b) (flzero? . G4f4a) (fltruncate . G4f49) (fltan . G4f48) (flsqrt . G4f47) (flsin . G4f46) (flround . G4f45) (flpositive? . G4f44) (flonum? . G4f43) (flodd? . G4f42) (flnumerator . G4f41) (flnegative? . G4f40) (flnan? . G4f3f) (flmod0 . G4f3e) (flmod . G4f3d) (flmin . G4f3c) (flmax . G4f3b) (fllog . G4f3a) (flinteger? . G4f39) (flinfinite? . G4f38) (flfloor . G4f37) (flfinite? . G4f36) (flexpt . G4f35) (flexp . G4f34) (fleven? . G4f33) (fldiv0-and-mod0 . G4f32) (fldiv0 . G4f31) (fldiv-and-mod . G4f30) (fldiv . G4f2f) (fldenominator . G4f2e) (flcos . G4f2d) (flceiling . G4f2c) (flatan . G4f2b) (flasin . G4f2a) (flacos . G4f29) (flabs . G4f28) (fl>? . G4f27) (fl>=? . G4f26) (fl=? . G4f25) (fl<? . G4f24) (fl<=? . G4f23) (fl/ . G4f22) (fl- . G4f21) (fl+ . G4f20) (fl* . G4f1f) (fixnum->flonum . G4f1e) (fxzero? . G4f1d) (fxxor . G4f1c) (fxrotate-bit-field . G4f1b) (fxreverse-bit-field . G4f1a) (fxpositive? . G4f19) (fxodd? . G4f18) (fxnot . G4f17) (fxnegative? . G4f16) (fxmod0 . G4f15) (fxmod . G4f14) (fxmin . G4f13) (fxmax . G4f12) (fxlength . G4f11) (fxior . G4f10) (fxif . G4f0f) (fxfirst-bit-set . G4f0e) (fxeven? . G4f0d) (fxdiv0-and-mod0 . G4f0c) (fxdiv0 . G4f0b) (fxdiv-and-mod . G4f0a) (fxdiv . G4f09) (fxcopy-bit-field . G4f08) (fxcopy-bit . G4f07) (fxbit-set? . G4f06) (fxbit-field . G4f05) (fxbit-count . G4f04) (fxarithmetic-shift-right . G4f03) (fxarithmetic-shift-left . G4f02) (fxarithmetic-shift . G4f01) (fxand . G4f00) (fx>? . G4eff) (fx>=? . G4efe) (fx=? . G4efd) (fx<? . G4efc) (fx<=? . G4efb) (fx-/carry . G4efa) (fx- . G4ef9) (fx+/carry . G4ef8) (fx+ . G4ef7) (fx*/carry . G4ef6) (fx* . G4ef5) (greatest-fixnum . G4ef4) (least-fixnum . G4ef3) (fixnum-width . G4ef2) (fixnum? . G4ef1) (bitwise-rotate-bit-field . G4ef0) (bitwise-reverse-bit-field . G4eef) (bitwise-length . G4eee) (bitwise-if . G4eed) (bitwise-first-bit-set . G4eec) (bitwise-copy-bit-field . G4eeb) (bitwise-copy-bit . G4eea) (bitwise-bit-set? . G4ee9) (bitwise-bit-field . G4ee8) (bitwise-bit-count . G4ee7) (bitwise-xor . G4ee6) (bitwise-ior . G4ee5) (bitwise-and . G4ee4) (bitwise-not . G4ee3) (bitwise-arithmetic-shift-right . G4ee2) (bitwise-arithmetic-shift-left . G4ee1) (bitwise-arithmetic-shift . G4ee0) (zero? . G4edf) (vector? . G4ede) (vector-set! . G4edd) (vector-ref . G4edc) (vector-map . G4edb) (vector-length . G4eda) (vector-for-each . G4ed9) (vector-fill! . G4ed8) (vector->list . G4ed7) (vector . G4ed6) (values . G4ed5) (truncate . G4ed4) (tan . G4ed3) (symbol? . G4ed2) (symbol=? . G4ed1) (symbol->string . G4ed0) (substring . G4ecf) (string? . G4ece) (string>? . G4ecd) (string>=? . G4ecc) (string=? . G4ecb) (string<? . G4eca) (string<=? . G4ec9) (string-ref . G4ec8) (string-length . G4ec7) (string-for-each . G4ec6) (string-copy . G4ec5) (string-append . G4ec4) (string->symbol . G4ec3) (string->number . G4ec2) (string->list . G4ec1) (string . G4ec0) (sqrt . G4ebf) (sin . G4ebe) (round . G4ebd) (reverse . G4ebc) (real? . G4ebb) (real-valued? . G4eba) (real-part . G4eb9) (rationalize . G4eb8) (rational? . G4eb7) (rational-valued? . G4eb6) (procedure? . G4eb5) (positive? . G4eb4) (pair? . G4eb3) (odd? . G4eb2) (numerator . G4eb1) (number? . G4eb0) (number->string . G4eaf) (null? . G4eae) (not . G4ead) (negative? . G4eac) (nan? . G4eab) (min . G4eaa) (max . G4ea9) (map . G4ea8) (make-vector . G4ea7) (make-string . G4ea6) (make-rectangular . G4ea5) (make-polar . G4ea4) (magnitude . G4ea3) (log . G4ea2) (list? . G4ea1) (list-tail . G4ea0) (list-ref . G4e9f) (list->vector . G4e9e) (list->string . G4e9d) (list . G4e9c) (length . G4e9b) (lcm . G4e9a) (integer? . G4e99) (integer-valued? . G4e98) (integer->char . G4e97) (infinite? . G4e96) (inexact? . G4e95) (inexact . G4e94) (imag-part . G4e93) (gcd . G4e92) (for-each . G4e91) (floor . G4e90) (finite? . G4e8f) (expt . G4e8e) (exp . G4e8d) (exact? . G4e8c) (exact-integer-sqrt . G4e8b) (exact . G4e8a) (even? . G4e89) (error . G4e88) (eqv? . G4e87) (equal? . G4e86) (eq? . G4e85) (dynamic-wind . G4e84) (div0-and-mod0 . G4e83) (mod0 . G4e82) (div0 . G4e81) (div-and-mod . G4e80) (mod . G4e7f) (div . G4e7e) (denominator . G4e7d) (cos . G4e7c) (cons . G4e7b) (complex? . G4e7a) (char? . G4e79) (char>? . G4e78) (char>=? . G4e77) (char=? . G4e76) (char<? . G4e75) (char<=? . G4e74) (char->integer . G4e73) (ceiling . G4e72) (call-with-values . G4e71) (call/cc . G4e70) (call-with-current-continuation . G4e6f) (cddddr . G4e6e) (cdddar . G4e6d) (cddadr . G4e6c) (cddaar . G4e6b) (cdaddr . G4e6a) (cdadar . G4e69) (cdaadr . G4e68) (cdaaar . G4e67) (cadddr . G4e66) (caddar . G4e65) (cadadr . G4e64) (cadaar . G4e63) (caaddr . G4e62) (caadar . G4e61) (caaadr . G4e60) (caaaar . G4e5f) (cdddr . G4e5e) (cddar . G4e5d) (cdadr . G4e5c) (cdaar . G4e5b) (caddr . G4e5a) (cadar . G4e59) (caadr . G4e58) (caaar . G4e57) (cddr . G4e56) (cdar . G4e55) (cadr . G4e54) (caar . G4e53) (cdr . G4e52) (car . G4e51) (boolean? . G4e50) (boolean=? . G4e4f) (atan . G4e4e) (assertion-violation . G4e4d) (asin . G4e4c) (apply . G4e4b) (append . G4e4a) (angle . G4e49) (acos . G4e48) (abs . G4e47) (/ . G4e46) (* . G4e45) (- . G4e44) (+ . G4e43) (>= . G4e42) (> . G4e41) (= . G4e40) (<= . G4e3f) (< . G4e3e) (&no-nans . G4e3b) (&no-infinities . G4e3a) (&i/o-encoding . G4e39) (&i/o-decoding . G4e38) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e) (&undefined . G4e2d) (&syntax . G4e2c) (&lexical . G4e2b) (&implementation-restriction . G4e2a) (&non-continuable . G4e29) (&who . G4e28) (&irritants . G4e27) (&assertion . G4e26) (&violation . G4e25) (&error . G4e24) (&serious . G4e23) (&warning . G4e22) (&message . G4e21) (&condition . G4e20) (define-condition-type . G4e1f) (define-enumeration . G4e1e) (define-record-type . G4e1d) (parent-rtd . G4e1c) (nongenerative . G4e1b) (opaque . G4e1a) (sealed . G4e19) (protocol . G4e18) (parent . G4e17) (immutable . G4e16) (mutable . G4e15) (fields . G4e14) (error-handling-mode . G4e13) (file-options . G4e12) (buffer-mode . G4e11) (eol-style . G4e10) (guard . G4e0f) (unsyntax-splicing . G4e0c) (unsyntax . G4e0b) (unquote-splicing . G4e0a) (unquote . G4e09) (_ . G4e08) (else . G4e07) (=> . G4e06) (... . G4e05) (assert . G4e04) (endianness . G4e03) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (let*-values . G4dfc) (let-values . G4dfb) (identifier-syntax . G4dfa) (with-syntax . G4df9) (quasisyntax . G4df8) (quasiquote . G4df7) (syntax-rules . G4df6) (record-constructor-descriptor . G4df3) (record-type-descriptor . G4df2) (case . G4df1) (unless . G4def) (when . G4dee) (or . G4ded) (and . G4dec) (if . G4deb) (letrec* . G4dea) (letrec . G4de9) (case-lambda . G4de7) (lambda . G4de6) (syntax . G4de5) (syntax-case . G4de4) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50ad '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3035) (quotient . G4fc1) (null-environment . G3033) (remainder . G4fc0) (modulo . G4fbf) (inexact->exact . G4fbe) (force . G4fbd) (exact->inexact . G4fbc) (make-promise . G4fbb) (delay . G4e02)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50ae '(rnrs control) '(6) '() '() '() '((do . G4e00) (unless . G4def) (when . G4dee) (case-lambda . G4de7)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50af '(rnrs eval) '(6) '() '() '() '((eval . G3039) (environment . G3031)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b0 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fb7) (set-car! . G4fb6)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b1 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fb9) (string-set! . G4fb8)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b2 '(rnrs programs) '(6) '() '() '() '((exit . G4fba) (command-line . G4d36)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b3 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2da9) (identifier? . G305d) (generate-temporaries . G3047) (free-identifier=? . G3049) (syntax->datum . G3061) (datum->syntax . G305f) (bound-identifier=? . G304b) (syntax-violation . G305b) (unsyntax-splicing . G4e0c) (unsyntax . G4e0b) (_ . G4e08) (... . G4e05) (with-syntax . G4df9) (quasisyntax . G4df8) (syntax . G4de5) (syntax-case . G4de4)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b4 '(rnrs files) '(6) '() '() '() '((delete-file . G502a) (file-exists? . G5029) (make-i/o-write-error . G4b3a) (make-i/o-read-error . G4b25) (make-i/o-port-error . G4bd8) (make-i/o-invalid-position-error . G4b50) (make-i/o-filename-error . G4b6a) (make-i/o-file-protection-error . G4b83) (make-i/o-file-is-read-only-error . G4b98) (make-i/o-file-does-not-exist-error . G4bc2) (make-i/o-file-already-exists-error . G4bad) (make-i/o-error . G4b10) (i/o-write-error? . G4b3c) (i/o-read-error? . G4b27) (i/o-port-error? . G4bdc) (i/o-invalid-position-error? . G4b54) (i/o-filename-error? . G4b6e) (i/o-file-protection-error? . G4b85) (i/o-file-is-read-only-error? . G4b9a) (i/o-file-does-not-exist-error? . G4bc4) (i/o-file-already-exists-error? . G4baf) (i/o-error? . G4b12) (i/o-error-position . G4b56) (i/o-error-port . G4bde) (i/o-error-filename . G4b70) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b5 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5028) (vector-sort . G5027) (list-sort . G5026)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b6 '(rnrs base) '(6) '() '() '() '((zero? . G4edf) (vector? . G4ede) (vector-set! . G4edd) (vector-ref . G4edc) (vector-map . G4edb) (vector-length . G4eda) (vector-for-each . G4ed9) (vector-fill! . G4ed8) (vector->list . G4ed7) (vector . G4ed6) (values . G4ed5) (truncate . G4ed4) (tan . G4ed3) (symbol? . G4ed2) (symbol=? . G4ed1) (symbol->string . G4ed0) (substring . G4ecf) (string? . G4ece) (string>? . G4ecd) (string>=? . G4ecc) (string=? . G4ecb) (string<? . G4eca) (string<=? . G4ec9) (string-ref . G4ec8) (string-length . G4ec7) (string-for-each . G4ec6) (string-copy . G4ec5) (string-append . G4ec4) (string->symbol . G4ec3) (string->number . G4ec2) (string->list . G4ec1) (string . G4ec0) (sqrt . G4ebf) (sin . G4ebe) (round . G4ebd) (reverse . G4ebc) (real? . G4ebb) (real-valued? . G4eba) (real-part . G4eb9) (rationalize . G4eb8) (rational? . G4eb7) (rational-valued? . G4eb6) (procedure? . G4eb5) (positive? . G4eb4) (pair? . G4eb3) (odd? . G4eb2) (numerator . G4eb1) (number? . G4eb0) (number->string . G4eaf) (null? . G4eae) (not . G4ead) (negative? . G4eac) (nan? . G4eab) (min . G4eaa) (max . G4ea9) (map . G4ea8) (make-vector . G4ea7) (make-string . G4ea6) (make-rectangular . G4ea5) (make-polar . G4ea4) (magnitude . G4ea3) (log . G4ea2) (list? . G4ea1) (list-tail . G4ea0) (list-ref . G4e9f) (list->vector . G4e9e) (list->string . G4e9d) (list . G4e9c) (length . G4e9b) (lcm . G4e9a) (integer? . G4e99) (integer-valued? . G4e98) (integer->char . G4e97) (infinite? . G4e96) (inexact? . G4e95) (inexact . G4e94) (imag-part . G4e93) (gcd . G4e92) (for-each . G4e91) (floor . G4e90) (finite? . G4e8f) (expt . G4e8e) (exp . G4e8d) (exact? . G4e8c) (exact-integer-sqrt . G4e8b) (exact . G4e8a) (even? . G4e89) (error . G4e88) (eqv? . G4e87) (equal? . G4e86) (eq? . G4e85) (dynamic-wind . G4e84) (div0-and-mod0 . G4e83) (mod0 . G4e82) (div0 . G4e81) (div-and-mod . G4e80) (mod . G4e7f) (div . G4e7e) (denominator . G4e7d) (cos . G4e7c) (cons . G4e7b) (complex? . G4e7a) (char? . G4e79) (char>? . G4e78) (char>=? . G4e77) (char=? . G4e76) (char<? . G4e75) (char<=? . G4e74) (char->integer . G4e73) (ceiling . G4e72) (call-with-values . G4e71) (call/cc . G4e70) (call-with-current-continuation . G4e6f) (cddddr . G4e6e) (cdddar . G4e6d) (cddadr . G4e6c) (cddaar . G4e6b) (cdaddr . G4e6a) (cdadar . G4e69) (cdaadr . G4e68) (cdaaar . G4e67) (cadddr . G4e66) (caddar . G4e65) (cadadr . G4e64) (cadaar . G4e63) (caaddr . G4e62) (caadar . G4e61) (caaadr . G4e60) (caaaar . G4e5f) (cdddr . G4e5e) (cddar . G4e5d) (cdadr . G4e5c) (cdaar . G4e5b) (caddr . G4e5a) (cadar . G4e59) (caadr . G4e58) (caaar . G4e57) (cddr . G4e56) (cdar . G4e55) (cadr . G4e54) (caar . G4e53) (cdr . G4e52) (car . G4e51) (boolean? . G4e50) (boolean=? . G4e4f) (atan . G4e4e) (assertion-violation . G4e4d) (asin . G4e4c) (apply . G4e4b) (append . G4e4a) (angle . G4e49) (acos . G4e48) (abs . G4e47) (/ . G4e46) (* . G4e45) (- . G4e44) (+ . G4e43) (>= . G4e42) (> . G4e41) (= . G4e40) (<= . G4e3f) (< . G4e3e) (unquote-splicing . G4e0a) (unquote . G4e09) (_ . G4e08) (else . G4e07) (=> . G4e06) (... . G4e05) (assert . G4e04) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (let*-values . G4dfc) (let-values . G4dfb) (identifier-syntax . G4dfa) (quasiquote . G4df7) (syntax-rules . G4df6) (case . G4df1) (or . G4ded) (and . G4dec) (if . G4deb) (letrec* . G4dea) (letrec . G4de9) (lambda . G4de6) (quote . G4de3) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (begin . G4ddd) (define-syntax . G4ddb) (define . G4dda)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b7 '(rnrs lists) '(6) '() '() '() '((remove . G4fb5) (remv . G4fb4) (remp . G4fb3) (remq . G4fb2) (partition . G4fb1) (memv . G4fb0) (memq . G4faf) (memp . G4fae) (member . G4fad) (exists . G4fac) (for-all . G4fab) (fold-right . G4faa) (fold-left . G4fa9) (find . G4fa8) (filter . G4fa7) (cons* . G4fa6) (assv . G4fa5) (assq . G4fa4) (assp . G4fa3) (assoc . G4fa2)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b8 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G5010) (call-with-input-file . G500f) (write-char . G500e) (write . G500d) (with-output-to-file . G500c) (with-input-from-file . G500b) (read-char . G500a) (read . G5009) (peek-char . G5008) (open-output-file . G5007) (open-input-file . G5006) (newline . G5005) (display . G5004) (close-output-port . G5003) (close-input-port . G5002) (eof-object? . G5001) (eof-object . G5000) (current-error-port . G4fff) (current-output-port . G4ffe) (current-input-port . G4ffd) (output-port? . G4ffc) (input-port? . G4ffb) (make-i/o-write-error . G4b3a) (make-i/o-read-error . G4b25) (make-i/o-port-error . G4bd8) (make-i/o-invalid-position-error . G4b50) (make-i/o-filename-error . G4b6a) (make-i/o-file-protection-error . G4b83) (make-i/o-file-is-read-only-error . G4b98) (make-i/o-file-does-not-exist-error . G4bc2) (make-i/o-file-already-exists-error . G4bad) (make-i/o-error . G4b10) (i/o-write-error? . G4b3c) (i/o-read-error? . G4b27) (i/o-port-error? . G4bdc) (i/o-invalid-position-error? . G4b54) (i/o-filename-error? . G4b6e) (i/o-file-protection-error? . G4b85) (i/o-file-is-read-only-error? . G4b9a) (i/o-file-does-not-exist-error? . G4bc4) (i/o-file-already-exists-error? . G4baf) (i/o-error? . G4b12) (i/o-error-position . G4b56) (i/o-error-port . G4bde) (i/o-error-filename . G4b70) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50b9 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fd1) (utf32->string . G4f86) (utf16->string . G4f85) (utf8->string . G4f84) (uint-list->bytevector . G4f83) (u8-list->bytevector . G4f82) (string->utf8 . G4f81) (string->utf32 . G4f80) (string->utf16 . G4f7f) (sint-list->bytevector . G4f7e) (native-endianness . G4f7d) (bytevector? . G4f7c) (bytevector=? . G4f7b) (bytevector-uint-set! . G4f7a) (bytevector-uint-ref . G4f79) (bytevector-u8-set! . G4f78) (bytevector-u8-ref . G4f77) (bytevector-u64-set! . G4f76) (bytevector-u64-ref . G4f75) (bytevector-u64-native-set! . G4f74) (bytevector-u64-native-ref . G4f73) (bytevector-u32-set! . G4f72) (bytevector-u32-ref . G4f71) (bytevector-u32-native-set! . G4f70) (bytevector-u32-native-ref . G4f6f) (bytevector-u16-set! . G4f6e) (bytevector-u16-ref . G4f6d) (bytevector-u16-native-set! . G4f6c) (bytevector-u16-native-ref . G4f6b) (bytevector-sint-set! . G4f6a) (bytevector-sint-ref . G4f69) (bytevector-s8-set! . G4f68) (bytevector-s8-ref . G4f67) (bytevector-s64-set! . G4f66) (bytevector-s64-ref . G4f65) (bytevector-s64-native-set! . G4f64) (bytevector-s64-native-ref . G4f63) (bytevector-s32-set! . G4f62) (bytevector-s32-ref . G4f61) (bytevector-s32-native-set! . G4f60) (bytevector-s32-native-ref . G4f5f) (bytevector-s16-set! . G4f5e) (bytevector-s16-ref . G4f5d) (bytevector-s16-native-set! . G4f5c) (bytevector-s16-native-ref . G4f5b) (bytevector-length . G4f5a) (bytevector-ieee-single-ref . G4f59) (bytevector-ieee-single-set! . G4f58) (bytevector-ieee-single-native-set! . G4f57) (bytevector-ieee-single-native-ref . G4f56) (bytevector-ieee-double-set! . G4f55) (bytevector-ieee-double-ref . G4f54) (bytevector-ieee-double-native-set! . G4f53) (bytevector-ieee-double-native-ref . G4f52) (bytevector-fill! . G4f51) (bytevector-copy! . G4f50) (bytevector-copy . G4f4f) (bytevector->uint-list . G4f4e) (bytevector->u8-list . G4f4d) (bytevector->sint-list . G4f4c) (endianness . G4e03)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50ba '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5058) (string-titlecase . G5057) (string-normalize-nfkd . G5056) (string-normalize-nfkc . G5055) (string-normalize-nfd . G5054) (string-normalize-nfc . G5053) (string-foldcase . G5052) (string-downcase . G5051) (string-ci>? . G5050) (string-ci>=? . G504f) (string-ci=? . G504e) (string-ci<? . G504d) (string-ci<=? . G504c) (char-whitespace? . G504b) (char-upper-case? . G504a) (char-title-case? . G5049) (char-numeric? . G5048) (char-lower-case? . G5047) (char-general-category . G5046) (char-upcase . G5045) (char-titlecase . G5044) (char-foldcase . G5043) (char-downcase . G5042) (char-ci>? . G5041) (char-ci>=? . G5040) (char-ci=? . G503f) (char-ci<? . G503e) (char-ci<=? . G503d) (char-alphabetic? . G503c)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50bb '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f9b) (raise-continuable . G4f9a) (raise . G4f99) (guard . G4e0f) (else . G4e07) (=> . G4e06)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50bc '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4ef0) (bitwise-reverse-bit-field . G4eef) (bitwise-length . G4eee) (bitwise-if . G4eed) (bitwise-first-bit-set . G4eec) (bitwise-copy-bit-field . G4eeb) (bitwise-copy-bit . G4eea) (bitwise-bit-set? . G4ee9) (bitwise-bit-field . G4ee8) (bitwise-bit-count . G4ee7) (bitwise-xor . G4ee6) (bitwise-ior . G4ee5) (bitwise-and . G4ee4) (bitwise-not . G4ee3) (bitwise-arithmetic-shift-right . G4ee2) (bitwise-arithmetic-shift-left . G4ee1) (bitwise-arithmetic-shift . G4ee0)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50bd '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f1d) (fxxor . G4f1c) (fxrotate-bit-field . G4f1b) (fxreverse-bit-field . G4f1a) (fxpositive? . G4f19) (fxodd? . G4f18) (fxnot . G4f17) (fxnegative? . G4f16) (fxmod0 . G4f15) (fxmod . G4f14) (fxmin . G4f13) (fxmax . G4f12) (fxlength . G4f11) (fxior . G4f10) (fxif . G4f0f) (fxfirst-bit-set . G4f0e) (fxeven? . G4f0d) (fxdiv0-and-mod0 . G4f0c) (fxdiv0 . G4f0b) (fxdiv-and-mod . G4f0a) (fxdiv . G4f09) (fxcopy-bit-field . G4f08) (fxcopy-bit . G4f07) (fxbit-set? . G4f06) (fxbit-field . G4f05) (fxbit-count . G4f04) (fxarithmetic-shift-right . G4f03) (fxarithmetic-shift-left . G4f02) (fxarithmetic-shift . G4f01) (fxand . G4f00) (fx>? . G4eff) (fx>=? . G4efe) (fx=? . G4efd) (fx<? . G4efc) (fx<=? . G4efb) (fx-/carry . G4efa) (fx- . G4ef9) (fx+/carry . G4ef8) (fx+ . G4ef7) (fx*/carry . G4ef6) (fx* . G4ef5) (greatest-fixnum . G4ef4) (least-fixnum . G4ef3) (fixnum-width . G4ef2) (fixnum? . G4ef1)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50be '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c37) (no-infinities-violation? . G4c22) (make-no-nans-violation . G4c35) (make-no-infinities-violation . G4c20) (real->flonum . G4f4b) (flzero? . G4f4a) (fltruncate . G4f49) (fltan . G4f48) (flsqrt . G4f47) (flsin . G4f46) (flround . G4f45) (flpositive? . G4f44) (flonum? . G4f43) (flodd? . G4f42) (flnumerator . G4f41) (flnegative? . G4f40) (flnan? . G4f3f) (flmod0 . G4f3e) (flmod . G4f3d) (flmin . G4f3c) (flmax . G4f3b) (fllog . G4f3a) (flinteger? . G4f39) (flinfinite? . G4f38) (flfloor . G4f37) (flfinite? . G4f36) (flexpt . G4f35) (flexp . G4f34) (fleven? . G4f33) (fldiv0-and-mod0 . G4f32) (fldiv0 . G4f31) (fldiv-and-mod . G4f30) (fldiv . G4f2f) (fldenominator . G4f2e) (flcos . G4f2d) (flceiling . G4f2c) (flatan . G4f2b) (flasin . G4f2a) (flacos . G4f29) (flabs . G4f28) (fl>? . G4f27) (fl>=? . G4f26) (fl=? . G4f25) (fl<? . G4f24) (fl<=? . G4f23) (fl/ . G4f22) (fl- . G4f21) (fl+ . G4f20) (fl* . G4f1f) (fixnum->flonum . G4f1e) (&no-nans . G4e3b) (&no-infinities . G4e3a)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50bf '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5025) (string-ci-hash . G5024) (string-hash . G5023) (equal-hash . G5022) (hashtable-equivalence-function . G5021) (make-hashtable . G5020) (hashtable-hash-function . G501f) (make-eqv-hashtable . G501e) (make-eq-hashtable . G501d) (hashtable? . G501c) (hashtable-update! . G501b) (hashtable-size . G501a) (hashtable-set! . G5019) (hashtable-ref . G5018) (hashtable-mutable? . G5017) (hashtable-keys . G5016) (hashtable-entries . G5015) (hashtable-delete! . G5014) (hashtable-copy . G5013) (hashtable-contains? . G5012) (hashtable-clear! . G5011)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50c0 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5001) (eof-object . G5000) (current-error-port . G4fff) (current-output-port . G4ffe) (current-input-port . G4ffd) (output-port? . G4ffc) (input-port? . G4ffb) (utf-8-codec . G4ffa) (utf-16-codec . G4ff9) (transcoder-error-handling-mode . G4ff8) (transcoder-eol-style . G4ff7) (transcoder-codec . G4ff6) (transcoded-port . G4ff5) (textual-port? . G4ff4) (string->bytevector . G4ff3) (standard-output-port . G4ff2) (standard-input-port . G4ff1) (standard-error-port . G4ff0) (set-port-position! . G4fef) (put-u8 . G4fee) (put-string . G4fed) (put-datum . G4fec) (put-char . G4feb) (put-bytevector . G4fea) (port? . G4fe9) (port-transcoder . G4fe8) (port-position . G4fe7) (port-has-set-port-position!? . G4fe6) (port-has-port-position? . G4fe5) (port-eof? . G4fe4) (output-port-buffer-mode . G4fe3) (open-string-output-port . G4fe2) (open-string-input-port . G4fe1) (open-file-output-port . G4fe0) (open-file-input/output-port . G4fdf) (open-file-input-port . G4fde) (open-bytevector-output-port . G4fdd) (open-bytevector-input-port . G4fdc) (native-transcoder . G4fdb) (native-eol-style . G4fda) (make-transcoder . G4fd9) (latin-1-codec . G4fd8) (make-i/o-write-error . G4b3a) (make-i/o-read-error . G4b25) (make-i/o-port-error . G4bd8) (make-i/o-invalid-position-error . G4b50) (make-i/o-filename-error . G4b6a) (make-i/o-file-protection-error . G4b83) (make-i/o-file-is-read-only-error . G4b98) (make-i/o-file-does-not-exist-error . G4bc2) (make-i/o-file-already-exists-error . G4bad) (make-i/o-error . G4b10) (make-i/o-encoding-error . G4c07) (make-i/o-decoding-error . G4bf1) (make-custom-textual-output-port . G4fd7) (make-custom-textual-input/output-port . G4fd6) (make-custom-textual-input-port . G4fd5) (make-custom-binary-output-port . G4fd4) (make-custom-binary-input/output-port . G4fd3) (make-custom-binary-input-port . G4fd2) (lookahead-u8 . G4fd0) (lookahead-char . G4fcf) (i/o-write-error? . G4b3c) (i/o-read-error? . G4b27) (i/o-port-error? . G4bdc) (i/o-invalid-position-error? . G4b54) (i/o-filename-error? . G4b6e) (i/o-file-protection-error? . G4b85) (i/o-file-is-read-only-error? . G4b9a) (i/o-file-does-not-exist-error? . G4bc4) (i/o-file-already-exists-error? . G4baf) (i/o-error? . G4b12) (i/o-error-position . G4b56) (i/o-error-port . G4bde) (i/o-error-filename . G4b70) (i/o-encoding-error? . G4c0b) (i/o-encoding-error-char . G4c0d) (i/o-decoding-error? . G4bf3) (get-u8 . G4fce) (get-string-n! . G4fcd) (get-string-n . G4fcc) (get-string-all . G4fcb) (get-line . G4fca) (get-datum . G4fc9) (get-char . G4fc8) (get-bytevector-some . G4fc7) (get-bytevector-n! . G4fc6) (get-bytevector-n . G4fc5) (get-bytevector-all . G4fc4) (flush-output-port . G4fc3) (close-port . G4fc2) (call-with-string-output-port . G4fa1) (call-with-port . G4fa0) (call-with-bytevector-output-port . G4f9f) (bytevector->string . G4f9e) (buffer-mode? . G4f9d) (binary-port? . G4f9c) (&i/o-encoding . G4e39) (&i/o-decoding . G4e38) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e) (error-handling-mode . G4e13) (file-options . G4e12) (buffer-mode . G4e11) (eol-style . G4e10)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50c1 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f98) (enum-set=? . G4f97) (enum-set-universe . G4f96) (enum-set-union . G4f95) (enum-set-subset? . G4f94) (enum-set-projection . G4f93) (enum-set-member? . G4f92) (enum-set-intersection . G4f91) (enum-set-indexer . G4f90) (enum-set-difference . G4f8f) (enum-set-constructor . G4f8e) (enum-set-complement . G4f8d) (enum-set->list . G4f8c) (define-enumeration . G4e1e)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50c2 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a88) (warning? . G4a02) (violation? . G4a41) (undefined-violation? . G4afd) (syntax-violation? . G4ae4) (syntax-violation-subform . G4ae8) (syntax-violation-form . G4ae6) (syntax-violation . G305b) (simple-conditions . G4f8b) (serious-condition? . G4a17) (non-continuable-violation? . G4a9f) (message-condition? . G49eb) (make-who-condition . G4a84) (make-warning . G4a00) (make-violation . G4a3f) (make-undefined-violation . G4afb) (make-syntax-violation . G4ade) (make-serious-condition . G4a15) (make-non-continuable-violation . G4a9d) (make-message-condition . G49e7) (make-lexical-violation . G4ac7) (make-irritants-condition . G4a6a) (make-implementation-restriction-violation . G4ab2) (make-error . G4a2a) (make-assertion-violation . G4a54) (lexical-violation? . G4ac9) (irritants-condition? . G4a6e) (implementation-restriction-violation? . G4ab4) (error? . G4a2c) (condition-who . G4a8a) (condition-predicate . G4f8a) (condition-message . G49ed) (condition-irritants . G4a70) (condition-accessor . G4f89) (condition . G4f88) (assertion-violation? . G4a56) (condition? . G4f87) (&undefined . G4e2d) (&syntax . G4e2c) (&lexical . G4e2b) (&implementation-restriction . G4e2a) (&non-continuable . G4e29) (&who . G4e28) (&irritants . G4e27) (&assertion . G4e26) (&violation . G4e25) (&error . G4e24) (&serious . G4e23) (&warning . G4e22) (&message . G4e21) (&condition . G4e20) (define-condition-type . G4e1f)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50c3 '(rnrs records inspection) '(6) '() '() '() '((record? . G5034) (record-type-uid . G5033) (record-type-sealed? . G5032) (record-type-parent . G5031) (record-type-opaque? . G5030) (record-type-name . G502f) (record-type-generative? . G502e) (record-type-field-names . G502d) (record-rtd . G502c) (record-field-mutable? . G502b)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50c4 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G503b) (record-predicate . G503a) (record-mutator . G5039) (record-constructor . G5038) (record-accessor . G5037) (make-record-type-descriptor . G5036) (make-record-constructor-descriptor . G5035)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50c5 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e1d) (parent-rtd . G4e1c) (nongenerative . G4e1b) (opaque . G4e1a) (sealed . G4e19) (protocol . G4e18) (parent . G4e17) (immutable . G4e16) (mutable . G4e15) (fields . G4e14) (record-constructor-descriptor . G4df3) (record-type-descriptor . G4df2)) '() values values '#f '#f '#t '#f) (G2b85@G2a2a@install-library 'G50c6 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c3b) (&no-nans-rtd . G4c39) (&no-infinities-rcd . G4c26) (&no-infinities-rtd . G4c24) (&i/o-encoding-rcd . G4c11) (&i/o-encoding-rtd . G4c0f) (&i/o-decoding-rcd . G4bf7) (&i/o-decoding-rtd . G4bf5) (&i/o-port-rcd . G4be2) (&i/o-port-rtd . G4be0) (&i/o-file-does-not-exist-rcd . G4bc8) (&i/o-file-does-not-exist-rtd . G4bc6) (&i/o-file-already-exists-rcd . G4bb3) (&i/o-file-already-exists-rtd . G4bb1) (&i/o-file-is-read-only-rcd . G4b9e) (&i/o-file-is-read-only-rtd . G4b9c) (&i/o-file-protection-rcd . G4b89) (&i/o-file-protection-rtd . G4b87) (&i/o-filename-rcd . G4b74) (&i/o-filename-rtd . G4b72) (&i/o-invalid-position-rcd . G4b5a) (&i/o-invalid-position-rtd . G4b58) (&i/o-write-rcd . G4b40) (&i/o-write-rtd . G4b3e) (&i/o-read-rcd . G4b2b) (&i/o-read-rtd . G4b29) (&i/o-rcd . G4b16) (&i/o-rtd . G4b14) (&undefined-rcd . G4b01) (&undefined-rtd . G4aff) (&syntax-rcd . G4aec) (&syntax-rtd . G4aea) (&lexical-rcd . G4acd) (&lexical-rtd . G4acb) (&implementation-restriction-rcd . G4ab8) (&implementation-restriction-rtd . G4ab6) (&non-continuable-rcd . G4aa3) (&non-continuable-rtd . G4aa1) (&who-rcd . G4a8e) (&who-rtd . G4a8c) (&irritants-rcd . G4a74) (&irritants-rtd . G4a72) (&assertion-rcd . G4a5a) (&assertion-rtd . G4a58) (&violation-rcd . G4a45) (&violation-rtd . G4a43) (&error-rcd . G4a30) (&error-rtd . G4a2e) (&serious-rcd . G4a1b) (&serious-rtd . G4a19) (&warning-rcd . G4a06) (&warning-rtd . G4a04) (&message-rcd . G49f1) (&message-rtd . G49ef) (&condition-rcd . G4994) (&condition-rtd . G4992) (syntax-error . G3055) (syntax-dispatch . G2f6e) (pretty-print . G50a6) (eval-core . G50a5) (set-symbol-value! . G50a4) (symbol-value . G50a3) (gensym . G50a2) (void . G50a1) (load . G4d3c) (interaction-environment . G3067) (char-ready? . G50a0) (regexp? . G509f) (read-line . G509e) (dotted-list? . G509d) (circular-list? . G509c) (proper-list? . G509b) (circular-list . G509a) (last . G5099) (last-pair . G5098) (not-pair? . G5097) (split-at! . G5096) (split-at . G5095) (list= . G5094) (list-copy . G5093) (list-tabulate . G5092) (make-list . G5091) (xcons . G5090) (tenth . G508f) (ninth . G508e) (eighth . G508d) (seventh . G508c) (sixth . G508b) (fifth . G508a) (drop-right! . G5089) (drop-right . G5088) (take-right . G5087) (take! . G5086) (drop . G5085) (take . G5084) (car+cdr . G5083) (third . G5082) (second . G5081) (first . G5080) (iota . G507f) (every . G507e) (assoc-ref . G507d) (alist-cons . G507c) (append-map . G507b) (print . G507a) (format . G5079) (standard-library-path . G5078) (file-newer? . G5077) (stat-mtime . G5076) (current-directory . G5075) (write-to-file . G5074) (file->list . G5073) (file->string . G5072) (digit->integer . G5071) (call-with-string-input-port . G5070) (call-with-string-io . G506f) (string-split . G506e) (bytevector-for-each . G506d) (string->regexp . G506c) (rxmatch . G506b) (regexp-replace-all . G506a) (hashtable-for-each . G5069) (readdir . G5068) (get-environment-variables . G5067) (get-environment-variable . G5066) (get-timeofday . G5065) (get-command-line . G5064) (sys-display . G5063) (source-info . G5062) (make-compiler-instruction . G5061) (make-instruction . G5060) (set-source-info! . G505f) (bignum? . G505e) (make-complex . G505d) (fast-equal? . G505c) (fasl-read . G505b) (fasl-write . G505a) (receive . G5059) (make-parameter . G2841) (string-upcase . G5058) (string-titlecase . G5057) (string-normalize-nfkd . G5056) (string-normalize-nfkc . G5055) (string-normalize-nfd . G5054) (string-normalize-nfc . G5053) (string-foldcase . G5052) (string-downcase . G5051) (string-ci>? . G5050) (string-ci>=? . G504f) (string-ci=? . G504e) (string-ci<? . G504d) (string-ci<=? . G504c) (char-whitespace? . G504b) (char-upper-case? . G504a) (char-title-case? . G5049) (char-numeric? . G5048) (char-lower-case? . G5047) (char-general-category . G5046) (char-upcase . G5045) (char-titlecase . G5044) (char-foldcase . G5043) (char-downcase . G5042) (char-ci>? . G5041) (char-ci>=? . G5040) (char-ci=? . G503f) (char-ci<? . G503e) (char-ci<=? . G503d) (char-alphabetic? . G503c) (make-variable-transformer . G2da9) (identifier? . G305d) (generate-temporaries . G3047) (free-identifier=? . G3049) (syntax->datum . G3061) (datum->syntax . G305f) (bound-identifier=? . G304b) (record-type-descriptor? . G503b) (record-predicate . G503a) (record-mutator . G5039) (record-constructor . G5038) (record-accessor . G5037) (make-record-type-descriptor . G5036) (make-record-constructor-descriptor . G5035) (record? . G5034) (record-type-uid . G5033) (record-type-sealed? . G5032) (record-type-parent . G5031) (record-type-opaque? . G5030) (record-type-name . G502f) (record-type-generative? . G502e) (record-type-field-names . G502d) (record-rtd . G502c) (record-field-mutable? . G502b) (delete-file . G502a) (file-exists? . G5029) (vector-sort! . G5028) (vector-sort . G5027) (list-sort . G5026) (symbol-hash . G5025) (string-ci-hash . G5024) (string-hash . G5023) (equal-hash . G5022) (hashtable-equivalence-function . G5021) (make-hashtable . G5020) (hashtable-hash-function . G501f) (make-eqv-hashtable . G501e) (make-eq-hashtable . G501d) (hashtable? . G501c) (hashtable-update! . G501b) (hashtable-size . G501a) (hashtable-set! . G5019) (hashtable-ref . G5018) (hashtable-mutable? . G5017) (hashtable-keys . G5016) (hashtable-entries . G5015) (hashtable-delete! . G5014) (hashtable-copy . G5013) (hashtable-contains? . G5012) (hashtable-clear! . G5011) (call-with-output-file . G5010) (call-with-input-file . G500f) (write-char . G500e) (write . G500d) (with-output-to-file . G500c) (with-input-from-file . G500b) (read-char . G500a) (read . G5009) (peek-char . G5008) (open-output-file . G5007) (open-input-file . G5006) (newline . G5005) (display . G5004) (close-output-port . G5003) (close-input-port . G5002) (eof-object? . G5001) (eof-object . G5000) (current-error-port . G4fff) (current-output-port . G4ffe) (current-input-port . G4ffd) (output-port? . G4ffc) (input-port? . G4ffb) (utf-8-codec . G4ffa) (utf-16-codec . G4ff9) (transcoder-error-handling-mode . G4ff8) (transcoder-eol-style . G4ff7) (transcoder-codec . G4ff6) (transcoded-port . G4ff5) (textual-port? . G4ff4) (string->bytevector . G4ff3) (standard-output-port . G4ff2) (standard-input-port . G4ff1) (standard-error-port . G4ff0) (set-port-position! . G4fef) (put-u8 . G4fee) (put-string . G4fed) (put-datum . G4fec) (put-char . G4feb) (put-bytevector . G4fea) (port? . G4fe9) (port-transcoder . G4fe8) (port-position . G4fe7) (port-has-set-port-position!? . G4fe6) (port-has-port-position? . G4fe5) (port-eof? . G4fe4) (output-port-buffer-mode . G4fe3) (open-string-output-port . G4fe2) (open-string-input-port . G4fe1) (open-file-output-port . G4fe0) (open-file-input/output-port . G4fdf) (open-file-input-port . G4fde) (open-bytevector-output-port . G4fdd) (open-bytevector-input-port . G4fdc) (native-transcoder . G4fdb) (native-eol-style . G4fda) (make-transcoder . G4fd9) (latin-1-codec . G4fd8) (make-i/o-write-error . G4b3a) (make-i/o-read-error . G4b25) (make-i/o-port-error . G4bd8) (make-i/o-invalid-position-error . G4b50) (make-i/o-filename-error . G4b6a) (make-i/o-file-protection-error . G4b83) (make-i/o-file-is-read-only-error . G4b98) (make-i/o-file-does-not-exist-error . G4bc2) (make-i/o-file-already-exists-error . G4bad) (make-i/o-error . G4b10) (make-i/o-encoding-error . G4c07) (make-i/o-decoding-error . G4bf1) (make-custom-textual-output-port . G4fd7) (make-custom-textual-input/output-port . G4fd6) (make-custom-textual-input-port . G4fd5) (make-custom-binary-output-port . G4fd4) (make-custom-binary-input/output-port . G4fd3) (make-custom-binary-input-port . G4fd2) (make-bytevector . G4fd1) (lookahead-u8 . G4fd0) (lookahead-char . G4fcf) (i/o-write-error? . G4b3c) (i/o-read-error? . G4b27) (i/o-port-error? . G4bdc) (i/o-invalid-position-error? . G4b54) (i/o-filename-error? . G4b6e) (i/o-file-protection-error? . G4b85) (i/o-file-is-read-only-error? . G4b9a) (i/o-file-does-not-exist-error? . G4bc4) (i/o-file-already-exists-error? . G4baf) (i/o-error? . G4b12) (i/o-error-position . G4b56) (i/o-error-port . G4bde) (i/o-error-filename . G4b70) (i/o-encoding-error? . G4c0b) (i/o-encoding-error-char . G4c0d) (i/o-decoding-error? . G4bf3) (get-u8 . G4fce) (get-string-n! . G4fcd) (get-string-n . G4fcc) (get-string-all . G4fcb) (get-line . G4fca) (get-datum . G4fc9) (get-char . G4fc8) (get-bytevector-some . G4fc7) (get-bytevector-n! . G4fc6) (get-bytevector-n . G4fc5) (get-bytevector-all . G4fc4) (flush-output-port . G4fc3) (close-port . G4fc2) (scheme-report-environment . G3035) (quotient . G4fc1) (null-environment . G3033) (remainder . G4fc0) (modulo . G4fbf) (inexact->exact . G4fbe) (force . G4fbd) (exact->inexact . G4fbc) (make-promise . G4fbb) (exit . G4fba) (command-line . G4d36) (string-fill! . G4fb9) (string-set! . G4fb8) (set-cdr! . G4fb7) (set-car! . G4fb6) (remove . G4fb5) (remv . G4fb4) (remp . G4fb3) (remq . G4fb2) (partition . G4fb1) (memv . G4fb0) (memq . G4faf) (memp . G4fae) (member . G4fad) (exists . G4fac) (for-all . G4fab) (fold-right . G4faa) (fold-left . G4fa9) (find . G4fa8) (filter . G4fa7) (cons* . G4fa6) (assv . G4fa5) (assq . G4fa4) (assp . G4fa3) (assoc . G4fa2) (call-with-string-output-port . G4fa1) (call-with-port . G4fa0) (call-with-bytevector-output-port . G4f9f) (bytevector->string . G4f9e) (buffer-mode? . G4f9d) (binary-port? . G4f9c) (with-exception-handler . G4f9b) (raise-continuable . G4f9a) (raise . G4f99) (eval . G3039) (environment . G3031) (make-enumeration . G4f98) (enum-set=? . G4f97) (enum-set-universe . G4f96) (enum-set-union . G4f95) (enum-set-subset? . G4f94) (enum-set-projection . G4f93) (enum-set-member? . G4f92) (enum-set-intersection . G4f91) (enum-set-indexer . G4f90) (enum-set-difference . G4f8f) (enum-set-constructor . G4f8e) (enum-set-complement . G4f8d) (enum-set->list . G4f8c) (who-condition? . G4a88) (warning? . G4a02) (violation? . G4a41) (undefined-violation? . G4afd) (syntax-violation? . G4ae4) (syntax-violation-subform . G4ae8) (syntax-violation-form . G4ae6) (syntax-violation . G305b) (simple-conditions . G4f8b) (serious-condition? . G4a17) (non-continuable-violation? . G4a9f) (message-condition? . G49eb) (make-who-condition . G4a84) (make-warning . G4a00) (make-violation . G4a3f) (make-undefined-violation . G4afb) (make-syntax-violation . G4ade) (make-serious-condition . G4a15) (make-non-continuable-violation . G4a9d) (make-message-condition . G49e7) (make-lexical-violation . G4ac7) (make-irritants-condition . G4a6a) (make-implementation-restriction-violation . G4ab2) (make-error . G4a2a) (make-assertion-violation . G4a54) (lexical-violation? . G4ac9) (irritants-condition? . G4a6e) (implementation-restriction-violation? . G4ab4) (error? . G4a2c) (condition-who . G4a8a) (condition-predicate . G4f8a) (condition-message . G49ed) (condition-irritants . G4a70) (condition-accessor . G4f89) (condition . G4f88) (assertion-violation? . G4a56) (condition? . G4f87) (utf32->string . G4f86) (utf16->string . G4f85) (utf8->string . G4f84) (uint-list->bytevector . G4f83) (u8-list->bytevector . G4f82) (string->utf8 . G4f81) (string->utf32 . G4f80) (string->utf16 . G4f7f) (sint-list->bytevector . G4f7e) (native-endianness . G4f7d) (bytevector? . G4f7c) (bytevector=? . G4f7b) (bytevector-uint-set! . G4f7a) (bytevector-uint-ref . G4f79) (bytevector-u8-set! . G4f78) (bytevector-u8-ref . G4f77) (bytevector-u64-set! . G4f76) (bytevector-u64-ref . G4f75) (bytevector-u64-native-set! . G4f74) (bytevector-u64-native-ref . G4f73) (bytevector-u32-set! . G4f72) (bytevector-u32-ref . G4f71) (bytevector-u32-native-set! . G4f70) (bytevector-u32-native-ref . G4f6f) (bytevector-u16-set! . G4f6e) (bytevector-u16-ref . G4f6d) (bytevector-u16-native-set! . G4f6c) (bytevector-u16-native-ref . G4f6b) (bytevector-sint-set! . G4f6a) (bytevector-sint-ref . G4f69) (bytevector-s8-set! . G4f68) (bytevector-s8-ref . G4f67) (bytevector-s64-set! . G4f66) (bytevector-s64-ref . G4f65) (bytevector-s64-native-set! . G4f64) (bytevector-s64-native-ref . G4f63) (bytevector-s32-set! . G4f62) (bytevector-s32-ref . G4f61) (bytevector-s32-native-set! . G4f60) (bytevector-s32-native-ref . G4f5f) (bytevector-s16-set! . G4f5e) (bytevector-s16-ref . G4f5d) (bytevector-s16-native-set! . G4f5c) (bytevector-s16-native-ref . G4f5b) (bytevector-length . G4f5a) (bytevector-ieee-single-ref . G4f59) (bytevector-ieee-single-set! . G4f58) (bytevector-ieee-single-native-set! . G4f57) (bytevector-ieee-single-native-ref . G4f56) (bytevector-ieee-double-set! . G4f55) (bytevector-ieee-double-ref . G4f54) (bytevector-ieee-double-native-set! . G4f53) (bytevector-ieee-double-native-ref . G4f52) (bytevector-fill! . G4f51) (bytevector-copy! . G4f50) (bytevector-copy . G4f4f) (bytevector->uint-list . G4f4e) (bytevector->u8-list . G4f4d) (bytevector->sint-list . G4f4c) (no-nans-violation? . G4c37) (no-infinities-violation? . G4c22) (make-no-nans-violation . G4c35) (make-no-infinities-violation . G4c20) (real->flonum . G4f4b) (flzero? . G4f4a) (fltruncate . G4f49) (fltan . G4f48) (flsqrt . G4f47) (flsin . G4f46) (flround . G4f45) (flpositive? . G4f44) (flonum? . G4f43) (flodd? . G4f42) (flnumerator . G4f41) (flnegative? . G4f40) (flnan? . G4f3f) (flmod0 . G4f3e) (flmod . G4f3d) (flmin . G4f3c) (flmax . G4f3b) (fllog . G4f3a) (flinteger? . G4f39) (flinfinite? . G4f38) (flfloor . G4f37) (flfinite? . G4f36) (flexpt . G4f35) (flexp . G4f34) (fleven? . G4f33) (fldiv0-and-mod0 . G4f32) (fldiv0 . G4f31) (fldiv-and-mod . G4f30) (fldiv . G4f2f) (fldenominator . G4f2e) (flcos . G4f2d) (flceiling . G4f2c) (flatan . G4f2b) (flasin . G4f2a) (flacos . G4f29) (flabs . G4f28) (fl>? . G4f27) (fl>=? . G4f26) (fl=? . G4f25) (fl<? . G4f24) (fl<=? . G4f23) (fl/ . G4f22) (fl- . G4f21) (fl+ . G4f20) (fl* . G4f1f) (fixnum->flonum . G4f1e) (fxzero? . G4f1d) (fxxor . G4f1c) (fxrotate-bit-field . G4f1b) (fxreverse-bit-field . G4f1a) (fxpositive? . G4f19) (fxodd? . G4f18) (fxnot . G4f17) (fxnegative? . G4f16) (fxmod0 . G4f15) (fxmod . G4f14) (fxmin . G4f13) (fxmax . G4f12) (fxlength . G4f11) (fxior . G4f10) (fxif . G4f0f) (fxfirst-bit-set . G4f0e) (fxeven? . G4f0d) (fxdiv0-and-mod0 . G4f0c) (fxdiv0 . G4f0b) (fxdiv-and-mod . G4f0a) (fxdiv . G4f09) (fxcopy-bit-field . G4f08) (fxcopy-bit . G4f07) (fxbit-set? . G4f06) (fxbit-field . G4f05) (fxbit-count . G4f04) (fxarithmetic-shift-right . G4f03) (fxarithmetic-shift-left . G4f02) (fxarithmetic-shift . G4f01) (fxand . G4f00) (fx>? . G4eff) (fx>=? . G4efe) (fx=? . G4efd) (fx<? . G4efc) (fx<=? . G4efb) (fx-/carry . G4efa) (fx- . G4ef9) (fx+/carry . G4ef8) (fx+ . G4ef7) (fx*/carry . G4ef6) (fx* . G4ef5) (greatest-fixnum . G4ef4) (least-fixnum . G4ef3) (fixnum-width . G4ef2) (fixnum? . G4ef1) (bitwise-rotate-bit-field . G4ef0) (bitwise-reverse-bit-field . G4eef) (bitwise-length . G4eee) (bitwise-if . G4eed) (bitwise-first-bit-set . G4eec) (bitwise-copy-bit-field . G4eeb) (bitwise-copy-bit . G4eea) (bitwise-bit-set? . G4ee9) (bitwise-bit-field . G4ee8) (bitwise-bit-count . G4ee7) (bitwise-xor . G4ee6) (bitwise-ior . G4ee5) (bitwise-and . G4ee4) (bitwise-not . G4ee3) (bitwise-arithmetic-shift-right . G4ee2) (bitwise-arithmetic-shift-left . G4ee1) (bitwise-arithmetic-shift . G4ee0) (zero? . G4edf) (vector? . G4ede) (vector-set! . G4edd) (vector-ref . G4edc) (vector-map . G4edb) (vector-length . G4eda) (vector-for-each . G4ed9) (vector-fill! . G4ed8) (vector->list . G4ed7) (vector . G4ed6) (values . G4ed5) (truncate . G4ed4) (tan . G4ed3) (symbol? . G4ed2) (symbol=? . G4ed1) (symbol->string . G4ed0) (substring . G4ecf) (string? . G4ece) (string>? . G4ecd) (string>=? . G4ecc) (string=? . G4ecb) (string<? . G4eca) (string<=? . G4ec9) (string-ref . G4ec8) (string-length . G4ec7) (string-for-each . G4ec6) (string-copy . G4ec5) (string-append . G4ec4) (string->symbol . G4ec3) (string->number . G4ec2) (string->list . G4ec1) (string . G4ec0) (sqrt . G4ebf) (sin . G4ebe) (round . G4ebd) (reverse . G4ebc) (real? . G4ebb) (real-valued? . G4eba) (real-part . G4eb9) (rationalize . G4eb8) (rational? . G4eb7) (rational-valued? . G4eb6) (procedure? . G4eb5) (positive? . G4eb4) (pair? . G4eb3) (odd? . G4eb2) (numerator . G4eb1) (number? . G4eb0) (number->string . G4eaf) (null? . G4eae) (not . G4ead) (negative? . G4eac) (nan? . G4eab) (min . G4eaa) (max . G4ea9) (map . G4ea8) (make-vector . G4ea7) (make-string . G4ea6) (make-rectangular . G4ea5) (make-polar . G4ea4) (magnitude . G4ea3) (log . G4ea2) (list? . G4ea1) (list-tail . G4ea0) (list-ref . G4e9f) (list->vector . G4e9e) (list->string . G4e9d) (list . G4e9c) (length . G4e9b) (lcm . G4e9a) (integer? . G4e99) (integer-valued? . G4e98) (integer->char . G4e97) (infinite? . G4e96) (inexact? . G4e95) (inexact . G4e94) (imag-part . G4e93) (gcd . G4e92) (for-each . G4e91) (floor . G4e90) (finite? . G4e8f) (expt . G4e8e) (exp . G4e8d) (exact? . G4e8c) (exact-integer-sqrt . G4e8b) (exact . G4e8a) (even? . G4e89) (error . G4e88) (eqv? . G4e87) (equal? . G4e86) (eq? . G4e85) (dynamic-wind . G4e84) (div0-and-mod0 . G4e83) (mod0 . G4e82) (div0 . G4e81) (div-and-mod . G4e80) (mod . G4e7f) (div . G4e7e) (denominator . G4e7d) (cos . G4e7c) (cons . G4e7b) (complex? . G4e7a) (char? . G4e79) (char>? . G4e78) (char>=? . G4e77) (char=? . G4e76) (char<? . G4e75) (char<=? . G4e74) (char->integer . G4e73) (ceiling . G4e72) (call-with-values . G4e71) (call/cc . G4e70) (call-with-current-continuation . G4e6f) (cddddr . G4e6e) (cdddar . G4e6d) (cddadr . G4e6c) (cddaar . G4e6b) (cdaddr . G4e6a) (cdadar . G4e69) (cdaadr . G4e68) (cdaaar . G4e67) (cadddr . G4e66) (caddar . G4e65) (cadadr . G4e64) (cadaar . G4e63) (caaddr . G4e62) (caadar . G4e61) (caaadr . G4e60) (caaaar . G4e5f) (cdddr . G4e5e) (cddar . G4e5d) (cdadr . G4e5c) (cdaar . G4e5b) (caddr . G4e5a) (cadar . G4e59) (caadr . G4e58) (caaar . G4e57) (cddr . G4e56) (cdar . G4e55) (cadr . G4e54) (caar . G4e53) (cdr . G4e52) (car . G4e51) (boolean? . G4e50) (boolean=? . G4e4f) (atan . G4e4e) (assertion-violation . G4e4d) (asin . G4e4c) (apply . G4e4b) (append . G4e4a) (angle . G4e49) (acos . G4e48) (abs . G4e47) (/ . G4e46) (* . G4e45) (- . G4e44) (+ . G4e43) (>= . G4e42) (> . G4e41) (= . G4e40) (<= . G4e3f) (< . G4e3e) (library . G4e3d) (export . G4e3c) (&no-nans . G4e3b) (&no-infinities . G4e3a) (&i/o-encoding . G4e39) (&i/o-decoding . G4e38) (&i/o-port . G4e37) (&i/o-file-does-not-exist . G4e36) (&i/o-file-already-exists . G4e35) (&i/o-file-is-read-only . G4e34) (&i/o-file-protection . G4e33) (&i/o-filename . G4e32) (&i/o-invalid-position . G4e31) (&i/o-write . G4e30) (&i/o-read . G4e2f) (&i/o . G4e2e) (&undefined . G4e2d) (&syntax . G4e2c) (&lexical . G4e2b) (&implementation-restriction . G4e2a) (&non-continuable . G4e29) (&who . G4e28) (&irritants . G4e27) (&assertion . G4e26) (&violation . G4e25) (&error . G4e24) (&serious . G4e23) (&warning . G4e22) (&message . G4e21) (&condition . G4e20) (define-condition-type . G4e1f) (define-enumeration . G4e1e) (define-record-type . G4e1d) (parent-rtd . G4e1c) (nongenerative . G4e1b) (opaque . G4e1a) (sealed . G4e19) (protocol . G4e18) (parent . G4e17) (immutable . G4e16) (mutable . G4e15) (fields . G4e14) (error-handling-mode . G4e13) (file-options . G4e12) (buffer-mode . G4e11) (eol-style . G4e10) (guard . G4e0f) (trace-define . G4e0e) (trace-lambda . G4e0d) (unsyntax-splicing . G4e0c) (unsyntax . G4e0b) (unquote-splicing . G4e0a) (unquote . G4e09) (_ . G4e08) (else . G4e07) (=> . G4e06) (... . G4e05) (assert . G4e04) (endianness . G4e03) (delay . G4e02) (time . G4e01) (do . G4e00) (cond . G4dff) (let* . G4dfe) (let . G4dfd) (let*-values . G4dfc) (let-values . G4dfb) (identifier-syntax . G4dfa) (with-syntax . G4df9) (quasisyntax . G4df8) (quasiquote . G4df7) (syntax-rules . G4df6) (include . G4df5) (define-struct . G4df4) (record-constructor-descriptor . G4df3) (record-type-descriptor . G4df2) (case . G4df1) (parameterize . G4df0) (unless . G4def) (when . G4dee) (or . G4ded) (and . G4dec) (if . G4deb) (letrec* . G4dea) (letrec . G4de9) (type-descriptor . G4de8) (case-lambda . G4de7) (lambda . G4de6) (syntax . G4de5) (syntax-case . G4de4) (quote . G4de3) (foreign-call . G4de2) (letrec-syntax . G4de1) (let-syntax . G4de0) (set! . G4ddf) (import . G4dde) (begin . G4ddd) (module . G4ddc) (define-syntax . G4ddb) (define . G4dda)) '((G4c3b core-prim . &no-nans-rcd) (G4c39 core-prim . &no-nans-rtd) (G4c26 core-prim . &no-infinities-rcd) (G4c24 core-prim . &no-infinities-rtd) (G4c11 core-prim . &i/o-encoding-rcd) (G4c0f core-prim . &i/o-encoding-rtd) (G4bf7 core-prim . &i/o-decoding-rcd) (G4bf5 core-prim . &i/o-decoding-rtd) (G4be2 core-prim . &i/o-port-rcd) (G4be0 core-prim . &i/o-port-rtd) (G4bc8 core-prim . &i/o-file-does-not-exist-rcd) (G4bc6 core-prim . &i/o-file-does-not-exist-rtd) (G4bb3 core-prim . &i/o-file-already-exists-rcd) (G4bb1 core-prim . &i/o-file-already-exists-rtd) (G4b9e core-prim . &i/o-file-is-read-only-rcd) (G4b9c core-prim . &i/o-file-is-read-only-rtd) (G4b89 core-prim . &i/o-file-protection-rcd) (G4b87 core-prim . &i/o-file-protection-rtd) (G4b74 core-prim . &i/o-filename-rcd) (G4b72 core-prim . &i/o-filename-rtd) (G4b5a core-prim . &i/o-invalid-position-rcd) (G4b58 core-prim . &i/o-invalid-position-rtd) (G4b40 core-prim . &i/o-write-rcd) (G4b3e core-prim . &i/o-write-rtd) (G4b2b core-prim . &i/o-read-rcd) (G4b29 core-prim . &i/o-read-rtd) (G4b16 core-prim . &i/o-rcd) (G4b14 core-prim . &i/o-rtd) (G4b01 core-prim . &undefined-rcd) (G4aff core-prim . &undefined-rtd) (G4aec core-prim . &syntax-rcd) (G4aea core-prim . &syntax-rtd) (G4acd core-prim . &lexical-rcd) (G4acb core-prim . &lexical-rtd) (G4ab8 core-prim . &implementation-restriction-rcd) (G4ab6 core-prim . &implementation-restriction-rtd) (G4aa3 core-prim . &non-continuable-rcd) (G4aa1 core-prim . &non-continuable-rtd) (G4a8e core-prim . &who-rcd) (G4a8c core-prim . &who-rtd) (G4a74 core-prim . &irritants-rcd) (G4a72 core-prim . &irritants-rtd) (G4a5a core-prim . &assertion-rcd) (G4a58 core-prim . &assertion-rtd) (G4a45 core-prim . &violation-rcd) (G4a43 core-prim . &violation-rtd) (G4a30 core-prim . &error-rcd) (G4a2e core-prim . &error-rtd) (G4a1b core-prim . &serious-rcd) (G4a19 core-prim . &serious-rtd) (G4a06 core-prim . &warning-rcd) (G4a04 core-prim . &warning-rtd) (G49f1 core-prim . &message-rcd) (G49ef core-prim . &message-rtd) (G4994 core-prim . &condition-rcd) (G4992 core-prim . &condition-rtd) (G3055 core-prim . syntax-error) (G2f6e core-prim . syntax-dispatch) (G50a6 core-prim . pretty-print) (G50a5 core-prim . eval-core) (G50a4 core-prim . set-symbol-value!) (G50a3 core-prim . symbol-value) (G50a2 core-prim . gensym) (G50a1 core-prim . void) (G4d3c core-prim . load) (G3067 core-prim . interaction-environment) (G50a0 core-prim . char-ready?) (G509f core-prim . regexp?) (G509e core-prim . read-line) (G509d core-prim . dotted-list?) (G509c core-prim . circular-list?) (G509b core-prim . proper-list?) (G509a core-prim . circular-list) (G5099 core-prim . last) (G5098 core-prim . last-pair) (G5097 core-prim . not-pair?) (G5096 core-prim . split-at!) (G5095 core-prim . split-at) (G5094 core-prim . list=) (G5093 core-prim . list-copy) (G5092 core-prim . list-tabulate) (G5091 core-prim . make-list) (G5090 core-prim . xcons) (G508f core-prim . tenth) (G508e core-prim . ninth) (G508d core-prim . eighth) (G508c core-prim . seventh) (G508b core-prim . sixth) (G508a core-prim . fifth) (G5089 core-prim . drop-right!) (G5088 core-prim . drop-right) (G5087 core-prim . take-right) (G5086 core-prim . take!) (G5085 core-prim . drop) (G5084 core-prim . take) (G5083 core-prim . car+cdr) (G5082 core-prim . third) (G5081 core-prim . second) (G5080 core-prim . first) (G507f core-prim . iota) (G507e core-prim . every) (G507d core-prim . assoc-ref) (G507c core-prim . alist-cons) (G507b core-prim . append-map) (G507a core-prim . print) (G5079 core-prim . format) (G5078 core-prim . standard-library-path) (G5077 core-prim . file-newer?) (G5076 core-prim . stat-mtime) (G5075 core-prim . current-directory) (G5074 core-prim . write-to-file) (G5073 core-prim . file->list) (G5072 core-prim . file->string) (G5071 core-prim . digit->integer) (G5070 core-prim . call-with-string-input-port) (G506f core-prim . call-with-string-io) (G506e core-prim . string-split) (G506d core-prim . bytevector-for-each) (G506c core-prim . string->regexp) (G506b core-prim . rxmatch) (G506a core-prim . regexp-replace-all) (G5069 core-prim . hashtable-for-each) (G5068 core-prim . readdir) (G5067 core-prim . get-environment-variables) (G5066 core-prim . get-environment-variable) (G5065 core-prim . get-timeofday) (G5064 core-prim . get-command-line) (G5063 core-prim . sys-display) (G5062 core-prim . source-info) (G5061 core-prim . make-compiler-instruction) (G5060 core-prim . make-instruction) (G505f core-prim . set-source-info!) (G505e core-prim . bignum?) (G505d core-prim . make-complex) (G505c core-prim . fast-equal?) (G505b core-prim . fasl-read) (G505a core-prim . fasl-write) (G5059 core-prim . receive) (G2841 core-prim . make-parameter) (G5058 core-prim . string-upcase) (G5057 core-prim . string-titlecase) (G5056 core-prim . string-normalize-nfkd) (G5055 core-prim . string-normalize-nfkc) (G5054 core-prim . string-normalize-nfd) (G5053 core-prim . string-normalize-nfc) (G5052 core-prim . string-foldcase) (G5051 core-prim . string-downcase) (G5050 core-prim . string-ci>?) (G504f core-prim . string-ci>=?) (G504e core-prim . string-ci=?) (G504d core-prim . string-ci<?) (G504c core-prim . string-ci<=?) (G504b core-prim . char-whitespace?) (G504a core-prim . char-upper-case?) (G5049 core-prim . char-title-case?) (G5048 core-prim . char-numeric?) (G5047 core-prim . char-lower-case?) (G5046 core-prim . char-general-category) (G5045 core-prim . char-upcase) (G5044 core-prim . char-titlecase) (G5043 core-prim . char-foldcase) (G5042 core-prim . char-downcase) (G5041 core-prim . char-ci>?) (G5040 core-prim . char-ci>=?) (G503f core-prim . char-ci=?) (G503e core-prim . char-ci<?) (G503d core-prim . char-ci<=?) (G503c core-prim . char-alphabetic?) (G2da9 core-prim . make-variable-transformer) (G305d core-prim . identifier?) (G3047 core-prim . generate-temporaries) (G3049 core-prim . free-identifier=?) (G3061 core-prim . syntax->datum) (G305f core-prim . datum->syntax) (G304b core-prim . bound-identifier=?) (G503b core-prim . record-type-descriptor?) (G503a core-prim . record-predicate) (G5039 core-prim . record-mutator) (G5038 core-prim . record-constructor) (G5037 core-prim . record-accessor) (G5036 core-prim . make-record-type-descriptor) (G5035 core-prim . make-record-constructor-descriptor) (G5034 core-prim . record?) (G5033 core-prim . record-type-uid) (G5032 core-prim . record-type-sealed?) (G5031 core-prim . record-type-parent) (G5030 core-prim . record-type-opaque?) (G502f core-prim . record-type-name) (G502e core-prim . record-type-generative?) (G502d core-prim . record-type-field-names) (G502c core-prim . record-rtd) (G502b core-prim . record-field-mutable?) (G502a core-prim . delete-file) (G5029 core-prim . file-exists?) (G5028 core-prim . vector-sort!) (G5027 core-prim . vector-sort) (G5026 core-prim . list-sort) (G5025 core-prim . symbol-hash) (G5024 core-prim . string-ci-hash) (G5023 core-prim . string-hash) (G5022 core-prim . equal-hash) (G5021 core-prim . hashtable-equivalence-function) (G5020 core-prim . make-hashtable) (G501f core-prim . hashtable-hash-function) (G501e core-prim . make-eqv-hashtable) (G501d core-prim . make-eq-hashtable) (G501c core-prim . hashtable?) (G501b core-prim . hashtable-update!) (G501a core-prim . hashtable-size) (G5019 core-prim . hashtable-set!) (G5018 core-prim . hashtable-ref) (G5017 core-prim . hashtable-mutable?) (G5016 core-prim . hashtable-keys) (G5015 core-prim . hashtable-entries) (G5014 core-prim . hashtable-delete!) (G5013 core-prim . hashtable-copy) (G5012 core-prim . hashtable-contains?) (G5011 core-prim . hashtable-clear!) (G5010 core-prim . call-with-output-file) (G500f core-prim . call-with-input-file) (G500e core-prim . write-char) (G500d core-prim . write) (G500c core-prim . with-output-to-file) (G500b core-prim . with-input-from-file) (G500a core-prim . read-char) (G5009 core-prim . read) (G5008 core-prim . peek-char) (G5007 core-prim . open-output-file) (G5006 core-prim . open-input-file) (G5005 core-prim . newline) (G5004 core-prim . display) (G5003 core-prim . close-output-port) (G5002 core-prim . close-input-port) (G5001 core-prim . eof-object?) (G5000 core-prim . eof-object) (G4fff core-prim . current-error-port) (G4ffe core-prim . current-output-port) (G4ffd core-prim . current-input-port) (G4ffc core-prim . output-port?) (G4ffb core-prim . input-port?) (G4ffa core-prim . utf-8-codec) (G4ff9 core-prim . utf-16-codec) (G4ff8 core-prim . transcoder-error-handling-mode) (G4ff7 core-prim . transcoder-eol-style) (G4ff6 core-prim . transcoder-codec) (G4ff5 core-prim . transcoded-port) (G4ff4 core-prim . textual-port?) (G4ff3 core-prim . string->bytevector) (G4ff2 core-prim . standard-output-port) (G4ff1 core-prim . standard-input-port) (G4ff0 core-prim . standard-error-port) (G4fef core-prim . set-port-position!) (G4fee core-prim . put-u8) (G4fed core-prim . put-string) (G4fec core-prim . put-datum) (G4feb core-prim . put-char) (G4fea core-prim . put-bytevector) (G4fe9 core-prim . port?) (G4fe8 core-prim . port-transcoder) (G4fe7 core-prim . port-position) (G4fe6 core-prim . port-has-set-port-position!?) (G4fe5 core-prim . port-has-port-position?) (G4fe4 core-prim . port-eof?) (G4fe3 core-prim . output-port-buffer-mode) (G4fe2 core-prim . open-string-output-port) (G4fe1 core-prim . open-string-input-port) (G4fe0 core-prim . open-file-output-port) (G4fdf core-prim . open-file-input/output-port) (G4fde core-prim . open-file-input-port) (G4fdd core-prim . open-bytevector-output-port) (G4fdc core-prim . open-bytevector-input-port) (G4fdb core-prim . native-transcoder) (G4fda core-prim . native-eol-style) (G4fd9 core-prim . make-transcoder) (G4fd8 core-prim . latin-1-codec) (G4b3a core-prim . make-i/o-write-error) (G4b25 core-prim . make-i/o-read-error) (G4bd8 core-prim . make-i/o-port-error) (G4b50 core-prim . make-i/o-invalid-position-error) (G4b6a core-prim . make-i/o-filename-error) (G4b83 core-prim . make-i/o-file-protection-error) (G4b98 core-prim . make-i/o-file-is-read-only-error) (G4bc2 core-prim . make-i/o-file-does-not-exist-error) (G4bad core-prim . make-i/o-file-already-exists-error) (G4b10 core-prim . make-i/o-error) (G4c07 core-prim . make-i/o-encoding-error) (G4bf1 core-prim . make-i/o-decoding-error) (G4fd7 core-prim . make-custom-textual-output-port) (G4fd6 core-prim . make-custom-textual-input/output-port) (G4fd5 core-prim . make-custom-textual-input-port) (G4fd4 core-prim . make-custom-binary-output-port) (G4fd3 core-prim . make-custom-binary-input/output-port) (G4fd2 core-prim . make-custom-binary-input-port) (G4fd1 core-prim . make-bytevector) (G4fd0 core-prim . lookahead-u8) (G4fcf core-prim . lookahead-char) (G4b3c core-prim . i/o-write-error?) (G4b27 core-prim . i/o-read-error?) (G4bdc core-prim . i/o-port-error?) (G4b54 core-prim . i/o-invalid-position-error?) (G4b6e core-prim . i/o-filename-error?) (G4b85 core-prim . i/o-file-protection-error?) (G4b9a core-prim . i/o-file-is-read-only-error?) (G4bc4 core-prim . i/o-file-does-not-exist-error?) (G4baf core-prim . i/o-file-already-exists-error?) (G4b12 core-prim . i/o-error?) (G4b56 core-prim . i/o-error-position) (G4bde core-prim . i/o-error-port) (G4b70 core-prim . i/o-error-filename) (G4c0b core-prim . i/o-encoding-error?) (G4c0d core-prim . i/o-encoding-error-char) (G4bf3 core-prim . i/o-decoding-error?) (G4fce core-prim . get-u8) (G4fcd core-prim . get-string-n!) (G4fcc core-prim . get-string-n) (G4fcb core-prim . get-string-all) (G4fca core-prim . get-line) (G4fc9 core-prim . get-datum) (G4fc8 core-prim . get-char) (G4fc7 core-prim . get-bytevector-some) (G4fc6 core-prim . get-bytevector-n!) (G4fc5 core-prim . get-bytevector-n) (G4fc4 core-prim . get-bytevector-all) (G4fc3 core-prim . flush-output-port) (G4fc2 core-prim . close-port) (G3035 core-prim . scheme-report-environment) (G4fc1 core-prim . quotient) (G3033 core-prim . null-environment) (G4fc0 core-prim . remainder) (G4fbf core-prim . modulo) (G4fbe core-prim . inexact->exact) (G4fbd core-prim . force) (G4fbc core-prim . exact->inexact) (G4fbb core-prim . make-promise) (G4fba core-prim . exit) (G4d36 core-prim . command-line) (G4fb9 core-prim . string-fill!) (G4fb8 core-prim . string-set!) (G4fb7 core-prim . set-cdr!) (G4fb6 core-prim . set-car!) (G4fb5 core-prim . remove) (G4fb4 core-prim . remv) (G4fb3 core-prim . remp) (G4fb2 core-prim . remq) (G4fb1 core-prim . partition) (G4fb0 core-prim . memv) (G4faf core-prim . memq) (G4fae core-prim . memp) (G4fad core-prim . member) (G4fac core-prim . exists) (G4fab core-prim . for-all) (G4faa core-prim . fold-right) (G4fa9 core-prim . fold-left) (G4fa8 core-prim . find) (G4fa7 core-prim . filter) (G4fa6 core-prim . cons*) (G4fa5 core-prim . assv) (G4fa4 core-prim . assq) (G4fa3 core-prim . assp) (G4fa2 core-prim . assoc) (G4fa1 core-prim . call-with-string-output-port) (G4fa0 core-prim . call-with-port) (G4f9f core-prim . call-with-bytevector-output-port) (G4f9e core-prim . bytevector->string) (G4f9d core-prim . buffer-mode?) (G4f9c core-prim . binary-port?) (G4f9b core-prim . with-exception-handler) (G4f9a core-prim . raise-continuable) (G4f99 core-prim . raise) (G3039 core-prim . eval) (G3031 core-prim . environment) (G4f98 core-prim . make-enumeration) (G4f97 core-prim . enum-set=?) (G4f96 core-prim . enum-set-universe) (G4f95 core-prim . enum-set-union) (G4f94 core-prim . enum-set-subset?) (G4f93 core-prim . enum-set-projection) (G4f92 core-prim . enum-set-member?) (G4f91 core-prim . enum-set-intersection) (G4f90 core-prim . enum-set-indexer) (G4f8f core-prim . enum-set-difference) (G4f8e core-prim . enum-set-constructor) (G4f8d core-prim . enum-set-complement) (G4f8c core-prim . enum-set->list) (G4a88 core-prim . who-condition?) (G4a02 core-prim . warning?) (G4a41 core-prim . violation?) (G4afd core-prim . undefined-violation?) (G4ae4 core-prim . syntax-violation?) (G4ae8 core-prim . syntax-violation-subform) (G4ae6 core-prim . syntax-violation-form) (G305b core-prim . syntax-violation) (G4f8b core-prim . simple-conditions) (G4a17 core-prim . serious-condition?) (G4a9f core-prim . non-continuable-violation?) (G49eb core-prim . message-condition?) (G4a84 core-prim . make-who-condition) (G4a00 core-prim . make-warning) (G4a3f core-prim . make-violation) (G4afb core-prim . make-undefined-violation) (G4ade core-prim . make-syntax-violation) (G4a15 core-prim . make-serious-condition) (G4a9d core-prim . make-non-continuable-violation) (G49e7 core-prim . make-message-condition) (G4ac7 core-prim . make-lexical-violation) (G4a6a core-prim . make-irritants-condition) (G4ab2 core-prim . make-implementation-restriction-violation) (G4a2a core-prim . make-error) (G4a54 core-prim . make-assertion-violation) (G4ac9 core-prim . lexical-violation?) (G4a6e core-prim . irritants-condition?) (G4ab4 core-prim . implementation-restriction-violation?) (G4a2c core-prim . error?) (G4a8a core-prim . condition-who) (G4f8a core-prim . condition-predicate) (G49ed core-prim . condition-message) (G4a70 core-prim . condition-irritants) (G4f89 core-prim . condition-accessor) (G4f88 core-prim . condition) (G4a56 core-prim . assertion-violation?) (G4f87 core-prim . condition?) (G4f86 core-prim . utf32->string) (G4f85 core-prim . utf16->string) (G4f84 core-prim . utf8->string) (G4f83 core-prim . uint-list->bytevector) (G4f82 core-prim . u8-list->bytevector) (G4f81 core-prim . string->utf8) (G4f80 core-prim . string->utf32) (G4f7f core-prim . string->utf16) (G4f7e core-prim . sint-list->bytevector) (G4f7d core-prim . native-endianness) (G4f7c core-prim . bytevector?) (G4f7b core-prim . bytevector=?) (G4f7a core-prim . bytevector-uint-set!) (G4f79 core-prim . bytevector-uint-ref) (G4f78 core-prim . bytevector-u8-set!) (G4f77 core-prim . bytevector-u8-ref) (G4f76 core-prim . bytevector-u64-set!) (G4f75 core-prim . bytevector-u64-ref) (G4f74 core-prim . bytevector-u64-native-set!) (G4f73 core-prim . bytevector-u64-native-ref) (G4f72 core-prim . bytevector-u32-set!) (G4f71 core-prim . bytevector-u32-ref) (G4f70 core-prim . bytevector-u32-native-set!) (G4f6f core-prim . bytevector-u32-native-ref) (G4f6e core-prim . bytevector-u16-set!) (G4f6d core-prim . bytevector-u16-ref) (G4f6c core-prim . bytevector-u16-native-set!) (G4f6b core-prim . bytevector-u16-native-ref) (G4f6a core-prim . bytevector-sint-set!) (G4f69 core-prim . bytevector-sint-ref) (G4f68 core-prim . bytevector-s8-set!) (G4f67 core-prim . bytevector-s8-ref) (G4f66 core-prim . bytevector-s64-set!) (G4f65 core-prim . bytevector-s64-ref) (G4f64 core-prim . bytevector-s64-native-set!) (G4f63 core-prim . bytevector-s64-native-ref) (G4f62 core-prim . bytevector-s32-set!) (G4f61 core-prim . bytevector-s32-ref) (G4f60 core-prim . bytevector-s32-native-set!) (G4f5f core-prim . bytevector-s32-native-ref) (G4f5e core-prim . bytevector-s16-set!) (G4f5d core-prim . bytevector-s16-ref) (G4f5c core-prim . bytevector-s16-native-set!) (G4f5b core-prim . bytevector-s16-native-ref) (G4f5a core-prim . bytevector-length) (G4f59 core-prim . bytevector-ieee-single-ref) (G4f58 core-prim . bytevector-ieee-single-set!) (G4f57 core-prim . bytevector-ieee-single-native-set!) (G4f56 core-prim . bytevector-ieee-single-native-ref) (G4f55 core-prim . bytevector-ieee-double-set!) (G4f54 core-prim . bytevector-ieee-double-ref) (G4f53 core-prim . bytevector-ieee-double-native-set!) (G4f52 core-prim . bytevector-ieee-double-native-ref) (G4f51 core-prim . bytevector-fill!) (G4f50 core-prim . bytevector-copy!) (G4f4f core-prim . bytevector-copy) (G4f4e core-prim . bytevector->uint-list) (G4f4d core-prim . bytevector->u8-list) (G4f4c core-prim . bytevector->sint-list) (G4c37 core-prim . no-nans-violation?) (G4c22 core-prim . no-infinities-violation?) (G4c35 core-prim . make-no-nans-violation) (G4c20 core-prim . make-no-infinities-violation) (G4f4b core-prim . real->flonum) (G4f4a core-prim . flzero?) (G4f49 core-prim . fltruncate) (G4f48 core-prim . fltan) (G4f47 core-prim . flsqrt) (G4f46 core-prim . flsin) (G4f45 core-prim . flround) (G4f44 core-prim . flpositive?) (G4f43 core-prim . flonum?) (G4f42 core-prim . flodd?) (G4f41 core-prim . flnumerator) (G4f40 core-prim . flnegative?) (G4f3f core-prim . flnan?) (G4f3e core-prim . flmod0) (G4f3d core-prim . flmod) (G4f3c core-prim . flmin) (G4f3b core-prim . flmax) (G4f3a core-prim . fllog) (G4f39 core-prim . flinteger?) (G4f38 core-prim . flinfinite?) (G4f37 core-prim . flfloor) (G4f36 core-prim . flfinite?) (G4f35 core-prim . flexpt) (G4f34 core-prim . flexp) (G4f33 core-prim . fleven?) (G4f32 core-prim . fldiv0-and-mod0) (G4f31 core-prim . fldiv0) (G4f30 core-prim . fldiv-and-mod) (G4f2f core-prim . fldiv) (G4f2e core-prim . fldenominator) (G4f2d core-prim . flcos) (G4f2c core-prim . flceiling) (G4f2b core-prim . flatan) (G4f2a core-prim . flasin) (G4f29 core-prim . flacos) (G4f28 core-prim . flabs) (G4f27 core-prim . fl>?) (G4f26 core-prim . fl>=?) (G4f25 core-prim . fl=?) (G4f24 core-prim . fl<?) (G4f23 core-prim . fl<=?) (G4f22 core-prim . fl/) (G4f21 core-prim . fl-) (G4f20 core-prim . fl+) (G4f1f core-prim . fl*) (G4f1e core-prim . fixnum->flonum) (G4f1d core-prim . fxzero?) (G4f1c core-prim . fxxor) (G4f1b core-prim . fxrotate-bit-field) (G4f1a core-prim . fxreverse-bit-field) (G4f19 core-prim . fxpositive?) (G4f18 core-prim . fxodd?) (G4f17 core-prim . fxnot) (G4f16 core-prim . fxnegative?) (G4f15 core-prim . fxmod0) (G4f14 core-prim . fxmod) (G4f13 core-prim . fxmin) (G4f12 core-prim . fxmax) (G4f11 core-prim . fxlength) (G4f10 core-prim . fxior) (G4f0f core-prim . fxif) (G4f0e core-prim . fxfirst-bit-set) (G4f0d core-prim . fxeven?) (G4f0c core-prim . fxdiv0-and-mod0) (G4f0b core-prim . fxdiv0) (G4f0a core-prim . fxdiv-and-mod) (G4f09 core-prim . fxdiv) (G4f08 core-prim . fxcopy-bit-field) (G4f07 core-prim . fxcopy-bit) (G4f06 core-prim . fxbit-set?) (G4f05 core-prim . fxbit-field) (G4f04 core-prim . fxbit-count) (G4f03 core-prim . fxarithmetic-shift-right) (G4f02 core-prim . fxarithmetic-shift-left) (G4f01 core-prim . fxarithmetic-shift) (G4f00 core-prim . fxand) (G4eff core-prim . fx>?) (G4efe core-prim . fx>=?) (G4efd core-prim . fx=?) (G4efc core-prim . fx<?) (G4efb core-prim . fx<=?) (G4efa core-prim . fx-/carry) (G4ef9 core-prim . fx-) (G4ef8 core-prim . fx+/carry) (G4ef7 core-prim . fx+) (G4ef6 core-prim . fx*/carry) (G4ef5 core-prim . fx*) (G4ef4 core-prim . greatest-fixnum) (G4ef3 core-prim . least-fixnum) (G4ef2 core-prim . fixnum-width) (G4ef1 core-prim . fixnum?) (G4ef0 core-prim . bitwise-rotate-bit-field) (G4eef core-prim . bitwise-reverse-bit-field) (G4eee core-prim . bitwise-length) (G4eed core-prim . bitwise-if) (G4eec core-prim . bitwise-first-bit-set) (G4eeb core-prim . bitwise-copy-bit-field) (G4eea core-prim . bitwise-copy-bit) (G4ee9 core-prim . bitwise-bit-set?) (G4ee8 core-prim . bitwise-bit-field) (G4ee7 core-prim . bitwise-bit-count) (G4ee6 core-prim . bitwise-xor) (G4ee5 core-prim . bitwise-ior) (G4ee4 core-prim . bitwise-and) (G4ee3 core-prim . bitwise-not) (G4ee2 core-prim . bitwise-arithmetic-shift-right) (G4ee1 core-prim . bitwise-arithmetic-shift-left) (G4ee0 core-prim . bitwise-arithmetic-shift) (G4edf core-prim . zero?) (G4ede core-prim . vector?) (G4edd core-prim . vector-set!) (G4edc core-prim . vector-ref) (G4edb core-prim . vector-map) (G4eda core-prim . vector-length) (G4ed9 core-prim . vector-for-each) (G4ed8 core-prim . vector-fill!) (G4ed7 core-prim . vector->list) (G4ed6 core-prim . vector) (G4ed5 core-prim . values) (G4ed4 core-prim . truncate) (G4ed3 core-prim . tan) (G4ed2 core-prim . symbol?) (G4ed1 core-prim . symbol=?) (G4ed0 core-prim . symbol->string) (G4ecf core-prim . substring) (G4ece core-prim . string?) (G4ecd core-prim . string>?) (G4ecc core-prim . string>=?) (G4ecb core-prim . string=?) (G4eca core-prim . string<?) (G4ec9 core-prim . string<=?) (G4ec8 core-prim . string-ref) (G4ec7 core-prim . string-length) (G4ec6 core-prim . string-for-each) (G4ec5 core-prim . string-copy) (G4ec4 core-prim . string-append) (G4ec3 core-prim . string->symbol) (G4ec2 core-prim . string->number) (G4ec1 core-prim . string->list) (G4ec0 core-prim . string) (G4ebf core-prim . sqrt) (G4ebe core-prim . sin) (G4ebd core-prim . round) (G4ebc core-prim . reverse) (G4ebb core-prim . real?) (G4eba core-prim . real-valued?) (G4eb9 core-prim . real-part) (G4eb8 core-prim . rationalize) (G4eb7 core-prim . rational?) (G4eb6 core-prim . rational-valued?) (G4eb5 core-prim . procedure?) (G4eb4 core-prim . positive?) (G4eb3 core-prim . pair?) (G4eb2 core-prim . odd?) (G4eb1 core-prim . numerator) (G4eb0 core-prim . number?) (G4eaf core-prim . number->string) (G4eae core-prim . null?) (G4ead core-prim . not) (G4eac core-prim . negative?) (G4eab core-prim . nan?) (G4eaa core-prim . min) (G4ea9 core-prim . max) (G4ea8 core-prim . map) (G4ea7 core-prim . make-vector) (G4ea6 core-prim . make-string) (G4ea5 core-prim . make-rectangular) (G4ea4 core-prim . make-polar) (G4ea3 core-prim . magnitude) (G4ea2 core-prim . log) (G4ea1 core-prim . list?) (G4ea0 core-prim . list-tail) (G4e9f core-prim . list-ref) (G4e9e core-prim . list->vector) (G4e9d core-prim . list->string) (G4e9c core-prim . list) (G4e9b core-prim . length) (G4e9a core-prim . lcm) (G4e99 core-prim . integer?) (G4e98 core-prim . integer-valued?) (G4e97 core-prim . integer->char) (G4e96 core-prim . infinite?) (G4e95 core-prim . inexact?) (G4e94 core-prim . inexact) (G4e93 core-prim . imag-part) (G4e92 core-prim . gcd) (G4e91 core-prim . for-each) (G4e90 core-prim . floor) (G4e8f core-prim . finite?) (G4e8e core-prim . expt) (G4e8d core-prim . exp) (G4e8c core-prim . exact?) (G4e8b core-prim . exact-integer-sqrt) (G4e8a core-prim . exact) (G4e89 core-prim . even?) (G4e88 core-prim . error) (G4e87 core-prim . eqv?) (G4e86 core-prim . equal?) (G4e85 core-prim . eq?) (G4e84 core-prim . dynamic-wind) (G4e83 core-prim . div0-and-mod0) (G4e82 core-prim . mod0) (G4e81 core-prim . div0) (G4e80 core-prim . div-and-mod) (G4e7f core-prim . mod) (G4e7e core-prim . div) (G4e7d core-prim . denominator) (G4e7c core-prim . cos) (G4e7b core-prim . cons) (G4e7a core-prim . complex?) (G4e79 core-prim . char?) (G4e78 core-prim . char>?) (G4e77 core-prim . char>=?) (G4e76 core-prim . char=?) (G4e75 core-prim . char<?) (G4e74 core-prim . char<=?) (G4e73 core-prim . char->integer) (G4e72 core-prim . ceiling) (G4e71 core-prim . call-with-values) (G4e70 core-prim . call/cc) (G4e6f core-prim . call-with-current-continuation) (G4e6e core-prim . cddddr) (G4e6d core-prim . cdddar) (G4e6c core-prim . cddadr) (G4e6b core-prim . cddaar) (G4e6a core-prim . cdaddr) (G4e69 core-prim . cdadar) (G4e68 core-prim . cdaadr) (G4e67 core-prim . cdaaar) (G4e66 core-prim . cadddr) (G4e65 core-prim . caddar) (G4e64 core-prim . cadadr) (G4e63 core-prim . cadaar) (G4e62 core-prim . caaddr) (G4e61 core-prim . caadar) (G4e60 core-prim . caaadr) (G4e5f core-prim . caaaar) (G4e5e core-prim . cdddr) (G4e5d core-prim . cddar) (G4e5c core-prim . cdadr) (G4e5b core-prim . cdaar) (G4e5a core-prim . caddr) (G4e59 core-prim . cadar) (G4e58 core-prim . caadr) (G4e57 core-prim . caaar) (G4e56 core-prim . cddr) (G4e55 core-prim . cdar) (G4e54 core-prim . cadr) (G4e53 core-prim . caar) (G4e52 core-prim . cdr) (G4e51 core-prim . car) (G4e50 core-prim . boolean?) (G4e4f core-prim . boolean=?) (G4e4e core-prim . atan) (G4e4d core-prim . assertion-violation) (G4e4c core-prim . asin) (G4e4b core-prim . apply) (G4e4a core-prim . append) (G4e49 core-prim . angle) (G4e48 core-prim . acos) (G4e47 core-prim . abs) (G4e46 core-prim . /) (G4e45 core-prim . *) (G4e44 core-prim . -) (G4e43 core-prim . +) (G4e42 core-prim . >=) (G4e41 core-prim . >) (G4e40 core-prim . =) (G4e3f core-prim . <=) (G4e3e core-prim . <) (G4e3d core-prim . library) (G4e3c core-prim . export) (G4e3b $core-rtd &no-nans-rtd &no-nans-rcd) (G4e3a $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e39 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e38 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e37 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e36 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e35 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e34 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e33 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e32 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e31 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e30 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e2f $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e2e $core-rtd &i/o-rtd &i/o-rcd) (G4e2d $core-rtd &undefined-rtd &undefined-rcd) (G4e2c $core-rtd &syntax-rtd &syntax-rcd) (G4e2b $core-rtd &lexical-rtd &lexical-rcd) (G4e2a $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e29 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e28 $core-rtd &who-rtd &who-rcd) (G4e27 $core-rtd &irritants-rtd &irritants-rcd) (G4e26 $core-rtd &assertion-rtd &assertion-rcd) (G4e25 $core-rtd &violation-rtd &violation-rcd) (G4e24 $core-rtd &error-rtd &error-rcd) (G4e23 $core-rtd &serious-rtd &serious-rcd) (G4e22 $core-rtd &warning-rtd &warning-rcd) (G4e21 $core-rtd &message-rtd &message-rcd) (G4e20 $core-rtd &condition-rtd &condition-rcd) (G4e1f macro . define-condition-type) (G4e1e macro . define-enumeration) (G4e1d macro . define-record-type) (G4e1c macro . parent-rtd) (G4e1b macro . nongenerative) (G4e1a macro . opaque) (G4e19 macro . sealed) (G4e18 macro . protocol) (G4e17 macro . parent) (G4e16 macro . immutable) (G4e15 macro . mutable) (G4e14 macro . fields) (G4e13 macro . error-handling-mode) (G4e12 macro . file-options) (G4e11 macro . buffer-mode) (G4e10 macro . eol-style) (G4e0f macro . guard) (G4e0e macro . trace-define) (G4e0d macro . trace-lambda) (G4e0c macro . unsyntax-splicing) (G4e0b macro . unsyntax) (G4e0a macro . unquote-splicing) (G4e09 macro . unquote) (G4e08 macro . _) (G4e07 macro . else) (G4e06 macro . =>) (G4e05 macro . ...) (G4e04 macro . assert) (G4e03 macro . endianness) (G4e02 macro . delay) (G4e01 macro . time) (G4e00 macro . do) (G4dff macro . cond) (G4dfe macro . let*) (G4dfd macro . let) (G4dfc macro . let*-values) (G4dfb macro . let-values) (G4dfa macro . identifier-syntax) (G4df9 macro . with-syntax) (G4df8 macro . quasisyntax) (G4df7 macro . quasiquote) (G4df6 macro . syntax-rules) (G4df5 macro . include) (G4df4 macro . define-struct) (G4df3 core-macro . record-constructor-descriptor) (G4df2 core-macro . record-type-descriptor) (G4df1 macro . case) (G4df0 macro . parameterize) (G4def macro . unless) (G4dee macro . when) (G4ded core-macro . or) (G4dec core-macro . and) (G4deb core-macro . if) (G4dea core-macro . letrec*) (G4de9 core-macro . letrec) (G4de8 core-macro . type-descriptor) (G4de7 core-macro . case-lambda) (G4de6 core-macro . lambda) (G4de5 core-macro . syntax) (G4de4 core-macro . syntax-case) (G4de3 core-macro . quote) (G4de2 core-macro . foreign-call) (G4de1 letrec-syntax) (G4de0 let-syntax) (G4ddf set!) (G4dde import) (G4ddd begin) (G4ddc module) (G4ddb define-syntax) (G4dda define)) values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50c7 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50a6) (eval-core . G50a5) (set-symbol-value! . G50a4) (symbol-value . G50a3) (gensym . G50a2) (void . G50a1)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50c8 '(mosh) '() '() '() '() '((set-symbol-value! . G50a4) (symbol-value . G50a3) (assoc-ref . G507d) (alist-cons . G507c) (print . G507a) (format . G5079) (standard-library-path . G5078) (file-newer? . G5077) (stat-mtime . G5076) (current-directory . G5075) (write-to-file . G5074) (file->list . G5073) (file->string . G5072) (digit->integer . G5071) (call-with-string-input-port . G5070) (call-with-string-io . G506f) (string-split . G506e) (bytevector-for-each . G506d) (string->regexp . G506c) (rxmatch . G506b) (regexp-replace-all . G506a) (hashtable-for-each . G5069) (get-timeofday . G5065) (get-command-line . G5064) (sys-display . G5063) (source-info . G5062) (make-compiler-instruction . G5061) (make-instruction . G5060) (set-source-info! . G505f) (bignum? . G505e) (make-complex . G505d) (fast-equal? . G505c) (fasl-read . G505b) (fasl-write . G505a) (include . G4df5)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50c9 '(mosh backend) '() '() '() '() '((receive . G5059)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50ca '(mosh file) '() '() '() '() '((read-line . G509e) (file-newer? . G5077) (stat-mtime . G5076) (current-directory . G5075) (write-to-file . G5074) (file->list . G5073) (file->string . G5072)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50cb '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G506d)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50cc '(mosh number) '() '() '() '() '((digit->integer . G5071)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50cd '(mosh string) '() '() '() '() '((print . G507a) (format . G5079) (call-with-string-input-port . G5070) (call-with-string-io . G506f) (string-split . G506e) (string->regexp . G506c)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50ce '(mosh list) '() '() '() '() '((assoc-ref . G507d)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50cf '(mosh regexp) '() '() '() '() '((rxmatch . G506b) (regexp-replace-all . G506a)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50d0 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5069)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50d1 '(mosh parameters) '() '() '() '() '((make-parameter . G2841) (parameterize . G4df0)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50d2 '(system) '() '() '() '() '((readdir . G5068) (get-environment-variables . G5067) (get-environment-variable . G5066)) '() values values '#f '#f '#f '#f) (G2b85@G2a2a@install-library 'G50d3 '(srfi :1) '() '() '() '() '((dotted-list? . G509d) (circular-list? . G509c) (proper-list? . G509b) (circular-list . G509a) (last . G5099) (last-pair . G5098) (not-pair? . G5097) (split-at! . G5096) (split-at . G5095) (list= . G5094) (list-copy . G5093) (list-tabulate . G5092) (make-list . G5091) (xcons . G5090) (tenth . G508f) (ninth . G508e) (eighth . G508d) (seventh . G508c) (sixth . G508b) (fifth . G508a) (drop-right! . G5089) (drop-right . G5088) (take-right . G5087) (take! . G5086) (drop . G5085) (take . G5084) (car+cdr . G5083) (third . G5082) (second . G5081) (first . G5080) (iota . G507f) (every . G507e) (alist-cons . G507c) (append-map . G507b)) '() values values '#f '#f '#f '#f))
((lambda (G4d31@for-each-with-index G4d33@repl G4d35@trace-printer G4d37@command-line G4d39@local-library-path G4d3b@load/args G4d3d@load G4d3f@ironscheme-build G4d41@eval-top-level G4d43@compile-system-libraries G4d45@compile G4d47@compile->closure G4d49@pre-compile-r6rs-file G4d4b@load-r6rs-top-level G4d4d@write-record) (begin (set! G4d31@for-each-with-index (lambda (G4d64@proc G4d65@lst) (letrec ((G4d68@loop (lambda (G4d6a@i G4d6b@lst) (if (null? G4d6b@lst) (if '#f '#f (void)) (begin (G4d64@proc G4d6a@i (car G4d6b@lst)) (G4d68@loop (+ G4d6a@i '1) (cdr G4d6b@lst))))))) (G4d68@loop '1 G4d65@lst)))) (set! G4d33@repl (lambda G4d6e@x ((lambda (G4d71@rec) (begin (set! G4d71@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d74@G4d72) (lambda () (with-exception-handler (lambda (G4d76@e) ((call/cc (lambda (G4d78@G4d73) (G4d74@G4d72 (lambda () (if '#t (G4d31@for-each-with-index (lambda (G4d7a@i G4d7b@x) ((lambda (G4d7e@rtd) (begin (format '#t '"   ~d. ~a" G4d7a@i (record-type-name G4d7e@rtd)) ((lambda (G4d80@v) ((lambda (G4d82@t) (if (memv G4d82@t '(0)) (newline) (if (memv G4d82@t '(1)) (begin (display '": ") (write ((record-accessor G4d7e@rtd '0) G4d7b@x)) (newline)) (begin (display '":\n") ((letrec ((G4d84@f (lambda (G4d86@i) (if (not (= G4d86@i (vector-length G4d80@v))) (begin (display '"       ") (display (vector-ref G4d80@v G4d86@i)) (display '": ") (write ((record-accessor G4d7e@rtd G4d86@i) G4d7b@x)) (newline) (G4d84@f (+ G4d86@i '1))) (void))))) G4d84@f) '0))))) (vector-length G4d80@v))) (record-type-field-names G4d7e@rtd)))) (record-rtd G4d7b@x))) (simple-conditions G4d76@e)) (G4d78@G4d73 (lambda () (raise-continuable G4d76@e)))))))))) (lambda () (begin '#f ((lambda (G4d88@line) (if (eof-object? G4d88@line) (exit) (write (G4d41@eval-top-level (call-with-port (open-string-input-port G4d88@line) read))))) (get-line (current-input-port)))))))))) (newline) (G4d71@rec)))) (G4d71@rec))) '#f))) (set! G4d35@trace-printer (G290c@G2842@make-parameter write)) (set! G4d37@command-line (G290c@G2842@make-parameter (get-command-line))) (set! G4d39@local-library-path (lambda (G4d8a@filename) (cons '"." (G2b75@G2a0a@library-path)))) (set! G4d3b@load/args (lambda (G4d8c@filename . G4d8e@args) (begin (apply G4d4b@load-r6rs-top-level G4d8c@filename 'load G4d8e@args) (void)))) (set! G4d3d@load (lambda (G4d90@filename) (begin (apply G4d4b@load-r6rs-top-level G4d90@filename 'load (G4d37@command-line)) (void)))) (set! G4d3f@ironscheme-build (lambda () (G4d3d@load '"ironscheme-buildscript.ss"))) (set! G4d41@eval-top-level (lambda (G4d92@x) (G4966@G303a@eval G4d92@x (G497d@G3068@interaction-environment)))) (set! G4d43@compile-system-libraries (lambda () (G4d41@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d45@compile (lambda (G4d94@filename) (G4d4b@load-r6rs-top-level G4d94@filename 'compile))) (set! G4d47@compile->closure (lambda (G4d96@filename) (G4d4b@load-r6rs-top-level G4d96@filename 'closure))) (set! G4d49@pre-compile-r6rs-file (lambda (G4d98@filename) (G4d4b@load-r6rs-top-level G4d98@filename 'compile))) (set! G4d4b@load-r6rs-top-level (lambda (G4d9a@filename G4d9b@how . G4d9e@args) ((lambda (G4da2@G4da0 G4da3@G4da1) ((lambda (G4da6@swap) (dynamic-wind G4da6@swap (lambda () ((lambda (G4da8@x*) ((lambda (G4daa@t) (if (memv G4daa@t '(closure)) (G497c@G3066@pre-compile-r6rs-top-level G4da8@x*) (if (memv G4daa@t '(load)) ((lambda (G4dae@G4dac G4daf@G4dad) ((lambda (G4db2@swap) (dynamic-wind G4db2@swap (lambda () ((G497b@G3064@compile-r6rs-top-level G4da8@x*))) G4db2@swap)) (lambda () ((lambda (G4db4@t) (begin (G4dae@G4dac G4daf@G4dad) (set! G4daf@G4dad G4db4@t))) (G4dae@G4dac))))) G4d37@command-line (cons G4d9a@filename (car G4d9e@args))) (if (memv G4daa@t '(compile)) (begin (G497b@G3064@compile-r6rs-top-level G4da8@x*) (G2b79@G2a12@serialize-all G2907@G2838@serialize-library G2961@G291a@compile-core-expr)) (if '#f '#f (void)))))) G4d9b@how)) (with-input-from-file G4d9a@filename (lambda () ((letrec ((G4db6@f (lambda () ((lambda (G4db8@x) (if (eof-object? G4db8@x) '() (cons G4db8@x (G4db6@f)))) (G28ff@G2828@read-annotated))))) G4db6@f)))))) G4da6@swap)) (lambda () ((lambda (G4dba@t) (begin (G4da2@G4da0 G4da3@G4da1) (set! G4da3@G4da1 G4dba@t))) (G4da2@G4da0))))) G2b75@G2a0a@library-path (G4d39@local-library-path G4d9a@filename)))) (set! G4d4d@write-record (lambda (G4dbc@record G4dbd@port) ((lambda (G4dc0@rtd) (begin (format G4dbd@port '"    ~a" (record-type-name G4dc0@rtd)) ((lambda (G4dc2@v) ((lambda (G4dc4@t) (if (memv G4dc4@t '(0)) (newline) (if (memv G4dc4@t '(1)) (begin (display '": " G4dbd@port) (write ((record-accessor G4dc0@rtd '0) G4dbc@record) G4dbd@port) (newline G4dbd@port)) (begin (display '":\n") ((letrec ((G4dc6@f (lambda (G4dc8@i) (if (not (= G4dc8@i (vector-length G4dc2@v))) (begin (display '"       " G4dbd@port) (display (vector-ref G4dc2@v G4dc8@i) G4dbd@port) (display '": " G4dbd@port) (write ((record-accessor G4dc0@rtd G4dc8@i) G4dbc@record) G4dbd@port) (newline G4dbd@port) (G4dc6@f (+ G4dc8@i '1))) (void))))) G4dc6@f) '0))))) (vector-length G4dc2@v))) (record-type-field-names G4dc0@rtd)))) (record-rtd G4dbc@record)))) (begin (set! G4dd8@G4d4d@write-record G4d4d@write-record) (set! G4dd7@G4d4b@load-r6rs-top-level G4d4b@load-r6rs-top-level) (set! G4dd6@G4d49@pre-compile-r6rs-file G4d49@pre-compile-r6rs-file) (set! G4dd5@G4d47@compile->closure G4d47@compile->closure) (set! G4dd4@G4d45@compile G4d45@compile) (set! G4dd3@G4d43@compile-system-libraries G4d43@compile-system-libraries) (set! G4dd2@G4d41@eval-top-level G4d41@eval-top-level) (set! G4dd1@G4d3f@ironscheme-build G4d3f@ironscheme-build) (set! G4dd0@G4d3d@load G4d3d@load) (set! G4dcf@G4d3b@load/args G4d3b@load/args) (set! G4dce@G4d39@local-library-path G4d39@local-library-path) (set! G4dcd@G4d37@command-line G4d37@command-line) (set! G4dcc@G4d35@trace-printer G4d35@trace-printer) (set! G4dcb@G4d33@repl G4d33@repl) (set! G4dca@G4d31@for-each-with-index G4d31@for-each-with-index) (G2b7a@G2a14@current-precompiled-library-loader G2908@G283a@load-serialized-library) (set-symbol-value! 'load G4d3d@load) (set-symbol-value! 'pre-compile-r6rs-file G4d49@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d41@eval-top-level) (set-symbol-value! 'int-env-syms G495d@G3028@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2960@G2918@expanded->core) (set-symbol-value! 'trace-printer G4d35@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d4e@c) (condition (G4c8e@G4a9e@make-non-continuable-violation) (G4c84@G4a85@make-who-condition 'raise) (G4c48@G49e8@make-message-condition '"returned from non-continuable exception") (G4c7a@G4a6b@make-irritants-condition (list G4d4e@c))))) (G2b75@G2a0a@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4d50@args G4d51@port) (with-exception-handler (lambda (G4d54@c) (begin (display '" Condition components:\n" G4d51@port) (G4d31@for-each-with-index (lambda (G4d56@i G4d57@x) ((lambda (G4d5a@rtd) (begin (format G4d51@port '"   ~d. ~a" G4d56@i (record-type-name G4d5a@rtd)) ((lambda (G4d5c@v) ((lambda (G4d5e@t) (if (memv G4d5e@t '(0)) (newline) (if (memv G4d5e@t '(1)) (begin (display '": ") (write ((record-accessor G4d5a@rtd '0) G4d57@x)) (newline)) (begin (display '":\n") ((letrec ((G4d60@f (lambda (G4d62@i) (if (not (= G4d62@i (vector-length G4d5c@v))) (begin (display '"       ") (display (vector-ref G4d5c@v G4d62@i)) (display '": ") (write ((record-accessor G4d5a@rtd G4d62@i) G4d57@x)) (newline) (G4d60@f (+ G4d62@i '1))) (void))))) G4d60@f) '0))))) (vector-length G4d5c@v))) (record-type-field-names G4d5a@rtd)))) (record-rtd G4d57@x))) (simple-conditions G4d54@c)))) (lambda () (if (null? G4d50@args) (G4d33@repl) (G4d4b@load-r6rs-top-level (car G4d50@args) 'load (cdr G4d50@args)))))) (G4d37@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
