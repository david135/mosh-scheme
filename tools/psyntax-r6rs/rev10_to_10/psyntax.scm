;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2885@read-annotated G2887@annotation-stripped G2889@annotation? G288b@annotation-source G288d@annotation-expression G288f@scm->fasl G2891@fasl-save G2893@fasl-load G2895@serialize-library G2897@load-serialized-library G2899@make-record-printer G289b@compile-core G289d@read-library-source-file G289f@make-parameter G290b@file-options-spec) (begin (set! G2885@read-annotated read) (set! G2887@annotation-stripped (lambda (G290c@x) (G288d@annotation-expression G290c@x))) (set! G2889@annotation? (lambda (G290e@x) (source-info G290e@x))) (set! G288b@annotation-source (lambda (G2910@x) (source-info G2910@x))) (set! G288d@annotation-expression (lambda (G2912@x) (if (pair? G2912@x) (cons (car G2912@x) (cdr G2912@x)) (display '"line:46\n")))) (set! G288f@scm->fasl (lambda (G2914@filename) (string-append G2914@filename '".fasl"))) (set! G2891@fasl-save (lambda (G2916@filename G2917@obj) (call-with-port (open-file-output-port G2916@filename) (lambda (G291a@port) ((symbol-value 'fasl-write!) G2917@obj G291a@port))))) (set! G2893@fasl-load (lambda (G291c@filename) (call-with-port (open-file-input-port G291c@filename) (symbol-value 'fasl-read!)))) (set! G2895@serialize-library (lambda (G291e@filename G291f@obj) (begin (format '#t '"serialize-library ~a\n..." G291e@filename) ((lambda (G2922@fasl-file) (begin (if (file-exists? G2922@fasl-file) (delete-file G2922@fasl-file) (void)) (call/cc (lambda (G2925@G2924) (with-exception-handler (lambda (G2927@c) (G2925@G2924 (if '#t (begin (format '#t '"Warning:serialize-library failed " G291e@filename) (if (file-exists? G2922@fasl-file) (delete-file G2922@fasl-file) (void)) '#f) (raise G2927@c)))) (lambda () (begin '#f (G2891@fasl-save G2922@fasl-file G291f@obj) (display '"OK\n")))))))) (G288f@scm->fasl G291e@filename))))) (set! G2897@load-serialized-library (lambda (G2929@filename G292a@obj) ((lambda (G292d@fasl-file) (if (if (file-exists? G292d@fasl-file) (begin '#f ((symbol-value 'file-newer?) G292d@fasl-file G2929@filename)) '#f) ((lambda (G292f@expanded2core) ((lambda (G2931@code) ((lambda (G2933@pivot) ((lambda (G2935@visit) ((lambda (G2937@visit-proc) ((lambda () (begin (set-car! G2933@pivot G2937@visit-proc) ((lambda (G2939@pivot) ((lambda (G293b@invoke) ((lambda () (begin (set-car! G2939@pivot (lambda () (eval-core G293b@invoke))) (apply G292a@obj G2931@code))))) (G292f@expanded2core (car G2939@pivot)))) (cdr G2933@pivot)) '#t)))) (lambda () (eval-core G2935@visit)))) (G292f@expanded2core (car G2933@pivot)))) (cddddr (cddddr G2931@code)))) (G2893@fasl-load G292d@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G288f@scm->fasl G2929@filename)))) (set! G2899@make-record-printer (lambda (G293d@name G293e@printer) (lambda G2941@x (begin (display '"record printer") (for-each display G2941@x))))) (set! G289b@compile-core (lambda G2943@x (apply error 'comile-core '"not implementated" G2943@x))) (set! G289d@read-library-source-file (lambda (G2945@file-name) (with-input-from-file G2945@file-name G2885@read-annotated))) (set! G289f@make-parameter (lambda G2955 ((lambda (G2956) (if (= G2956 '1) (apply (lambda (G2947@x) (G289f@make-parameter G2947@x (lambda (G2949@x) G2949@x))) G2955) (if (= G2956 '2) (apply (lambda (G294b@x G294c@fender) ((lambda (G294f@x) (lambda G2953 ((lambda (G2954) (if (= G2954 '0) (apply (lambda () G294f@x) G2953) (if (= G2954 '1) (apply (lambda (G2951@v) (set! G294f@x (G294c@fender G2951@v))) G2953) (error 'apply '"invalid arg count")))) (length G2953)))) (G294c@fender G294b@x))) G2955) (error 'apply '"invalid arg count")))) (length G2955)))) (set! G290b@file-options-spec (lambda (G2957@x) G2957@x)) (begin (set! G2967@G290b@file-options-spec G290b@file-options-spec) (set! G2966@G289f@make-parameter G289f@make-parameter) (set! G2965@G289d@read-library-source-file G289d@read-library-source-file) (set! G2964@G289b@compile-core G289b@compile-core) (set! G2963@G2899@make-record-printer G2899@make-record-printer) (set! G2962@G2897@load-serialized-library G2897@load-serialized-library) (set! G2961@G2895@serialize-library G2895@serialize-library) (set! G2960@G2893@fasl-load G2893@fasl-load) (set! G295f@G2891@fasl-save G2891@fasl-save) (set! G295e@G288f@scm->fasl G288f@scm->fasl) (set! G295d@G288d@annotation-expression G288d@annotation-expression) (set! G295c@G288b@annotation-source G288b@annotation-source) (set! G295b@G2889@annotation? G2889@annotation?) (set! G295a@G2887@annotation-stripped G2887@annotation-stripped) (set! G2959@G2885@read-annotated G2885@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G296c@current-primitive-locations G296e@mutable? G2970@rewriter G2972@expanded->core G2974@compile-core-expr G2976@pretty-print G2978@compile-core-expr-to-port) (begin (set! G296c@current-primitive-locations (G2966@G289f@make-parameter (lambda (G2979@x) '#f) (lambda (G297b@p) G297b@p))) (set! G296e@mutable? (lambda (G297d@x) ((lambda (G297f@t) (if G297f@t G297f@t ((lambda (G2981@t) (if G2981@t G2981@t (begin '#f (hashtable? G297d@x)))) (vector? G297d@x)))) (pair? G297d@x)))) (set! G2970@rewriter (lambda (G2983@quote-hack?) ((lambda (G2986@f) (begin (set! G2986@f (lambda (G2987@x) (if (pair? G2987@x) ((lambda (G2989@t) (if (memv G2989@t '(quote)) (if (if G2983@quote-hack? (begin '#f (G296e@mutable? (cadr G2987@x))) '#f) ((lambda (G298b@g) (begin (set-symbol-value! G298b@g (cadr G2987@x)) G298b@g)) (gensym)) G2987@x) (if (memv G2989@t '(case-lambda)) (cons 'case-lambda (map (lambda (G298d@x) (cons (car G298d@x) (map G2986@f (cdr G298d@x)))) (cdr G2987@x))) (if (memv G2989@t '(lambda)) (cons* 'lambda (cadr G2987@x) (map G2986@f (cddr G2987@x))) (if (memv G2989@t '(letrec)) ((lambda (G298f@bindings G2990@body*) ((lambda (G2993@lhs* G2994@rhs*) (cons* 'letrec (map list G2993@lhs* (map G2986@f G2994@rhs*)) (map G2986@f G2990@body*))) (map car G298f@bindings) (map cadr G298f@bindings))) (cadr G2987@x) (cddr G2987@x)) (if (memv G2989@t '(letrec*)) ((lambda (G2997@bindings G2998@body*) ((lambda (G299b@lhs* G299c@rhs*) (cons* 'letrec* (map list G299b@lhs* (map G2986@f G299c@rhs*)) (map G2986@f G2998@body*))) (map car G2997@bindings) (map cadr G2997@bindings))) (cadr G2987@x) (cddr G2987@x)) (if (memv G2989@t '(library-letrec*)) ((lambda (G299f@name G29a0@x) ((lambda (G29a3@bindings G29a4@body*) ((lambda (G29a7@lhs* G29a8@lhs** G29a9@rhs*) (cons* 'library-letrec* G299f@name (map list G29a7@lhs* G29a8@lhs** (map G2986@f G29a9@rhs*)) (map G2986@f G29a4@body*))) (map car G29a3@bindings) (map cadr G29a3@bindings) (map caddr G29a3@bindings))) (cadr G29a0@x) (cddr G29a0@x))) (cadr G2987@x) (cdr G2987@x)) (if (memv G2989@t '(begin)) (cons 'begin (map G2986@f (cdr G2987@x))) (if (memv G2989@t '(set!)) (list 'set! (cadr G2987@x) (G2986@f (caddr G2987@x))) (if (memv G2989@t '(primitive)) ((lambda (G29ad@op) ((lambda (G29af@t) (if G29af@t ((lambda (G29b1@loc) G29b1@loc) G29af@t) G29ad@op)) ((G296c@current-primitive-locations) G29ad@op))) (cadr G2987@x)) (if (memv G2989@t '(define)) G2987@x (if (list? G2987@x) (map G2986@f G2987@x) (error 'rewrite '"invalid form ~s ~s" G2987@x (list? G2987@x)))))))))))))) (car G2987@x)) G2987@x))) G2986@f)) '#f))) (set! G2972@expanded->core (lambda (G29b3@x) ((G2970@rewriter '#t) G29b3@x))) (set! G2974@compile-core-expr (lambda (G29b5@x) ((G2970@rewriter '#f) G29b5@x))) (set! G2976@pretty-print write) (set! G2978@compile-core-expr-to-port (lambda (G29b7@x G29b8@p) (G2976@pretty-print ((G2970@rewriter '#f) G29b7@x) G29b8@p))) (begin (set! G29c1@G2978@compile-core-expr-to-port G2978@compile-core-expr-to-port) (set! G29c0@G2976@pretty-print G2976@pretty-print) (set! G29bf@G2974@compile-core-expr G2974@compile-core-expr) (set! G29be@G2972@expanded->core G2972@expanded->core) (set! G29bd@G2970@rewriter G2970@rewriter) (set! G29bc@G296e@mutable? G296e@mutable?) (set! G29bb@G296c@current-primitive-locations G296c@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a17@make-collection G2a19@current-library-collection G2a1f@G2a1a G2a21@G2a1c G2a23@G2a1b G2a26@library? G2a28@make-library G2a2a@library-id G2a2c@library-name G2a2e@library-version G2a30@library-imp* G2a32@library-vis* G2a34@library-inv* G2a36@library-subst G2a38@library-env G2a3a@library-visit-state G2a3c@library-invoke-state G2a3e@library-visit-code G2a40@library-invoke-code G2a42@library-visible? G2a44@library-source-file-name G2a46@set-library-id! G2a48@set-library-name! G2a4a@set-library-version! G2a4c@set-library-imp*! G2a4e@set-library-vis*! G2a50@set-library-inv*! G2a52@set-library-subst! G2a54@set-library-env! G2a56@set-library-visit-state! G2a58@set-library-invoke-state! G2a5a@set-library-visit-code! G2a5c@set-library-invoke-code! G2a5e@set-library-visible?! G2a60@set-library-source-file-name! G2a62@rp G2a64@find-dependencies G2a66@find-library-by G2a68@library-path G2a6a@library-extensions G2a6c@library-name->file-name G2a6e@file-locator G2a70@serialize-all G2a72@current-precompiled-library-loader G2a74@try-load-from-file G2a76@library-loader G2a78@current-library-expander G2a7a@external-pending-libraries G2a7c@find-external-library G2a7e@find-library-by-name G2a80@library-exists? G2a82@find-library-by-spec/die G2a84@label->binding-table G2a86@install-library-record G2a88@install-library G2a8a@imported-label->binding G2a8c@invoke-library G2a8e@visit-library G2a90@invoke-library-by-spec G2a92@installed-libraries G2a94@library-spec) (begin (set! G2a17@make-collection (lambda () ((lambda (G2a95@set) ((lambda (G2a98@set-cons) (begin (set! G2a98@set-cons (lambda (G2a9d@x G2a9e@ls) (if (memq G2a9d@x G2a9e@ls) G2a9e@ls (cons G2a9d@x G2a9e@ls)))) (lambda G2a9b ((lambda (G2a9c) (if (= G2a9c '0) (apply (lambda () G2a95@set) G2a9b) (if (= G2a9c '1) (apply (lambda (G2a99@x) (set! G2a95@set (G2a98@set-cons G2a99@x G2a95@set))) G2a9b) (error 'apply '"invalid arg count")))) (length G2a9b))))) '#f)) '()))) (set! G2a19@current-library-collection (G2966@G289f@make-parameter (G2a17@make-collection) (lambda (G2aa1@x) (begin (if (not (procedure? G2aa1@x)) (assertion-violation 'current-library-collection '"not a procedure" G2aa1@x) (void)) G2aa1@x)))) (set! G2a1f@G2a1a (make-record-type-descriptor 'library '#f 'G2a1d '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a21@G2a1c '#f) (set! G2a23@G2a1b (make-record-constructor-descriptor G2a1f@G2a1a '#f G2a21@G2a1c)) (set! G2a26@library? (record-predicate G2a1f@G2a1a)) (set! G2a28@make-library (record-constructor G2a23@G2a1b)) (set! G2a2a@library-id (record-accessor G2a1f@G2a1a '0)) (set! G2a2c@library-name (record-accessor G2a1f@G2a1a '1)) (set! G2a2e@library-version (record-accessor G2a1f@G2a1a '2)) (set! G2a30@library-imp* (record-accessor G2a1f@G2a1a '3)) (set! G2a32@library-vis* (record-accessor G2a1f@G2a1a '4)) (set! G2a34@library-inv* (record-accessor G2a1f@G2a1a '5)) (set! G2a36@library-subst (record-accessor G2a1f@G2a1a '6)) (set! G2a38@library-env (record-accessor G2a1f@G2a1a '7)) (set! G2a3a@library-visit-state (record-accessor G2a1f@G2a1a '8)) (set! G2a3c@library-invoke-state (record-accessor G2a1f@G2a1a '9)) (set! G2a3e@library-visit-code (record-accessor G2a1f@G2a1a '10)) (set! G2a40@library-invoke-code (record-accessor G2a1f@G2a1a '11)) (set! G2a42@library-visible? (record-accessor G2a1f@G2a1a '12)) (set! G2a44@library-source-file-name (record-accessor G2a1f@G2a1a '13)) (set! G2a46@set-library-id! (record-mutator G2a1f@G2a1a '0)) (set! G2a48@set-library-name! (record-mutator G2a1f@G2a1a '1)) (set! G2a4a@set-library-version! (record-mutator G2a1f@G2a1a '2)) (set! G2a4c@set-library-imp*! (record-mutator G2a1f@G2a1a '3)) (set! G2a4e@set-library-vis*! (record-mutator G2a1f@G2a1a '4)) (set! G2a50@set-library-inv*! (record-mutator G2a1f@G2a1a '5)) (set! G2a52@set-library-subst! (record-mutator G2a1f@G2a1a '6)) (set! G2a54@set-library-env! (record-mutator G2a1f@G2a1a '7)) (set! G2a56@set-library-visit-state! (record-mutator G2a1f@G2a1a '8)) (set! G2a58@set-library-invoke-state! (record-mutator G2a1f@G2a1a '9)) (set! G2a5a@set-library-visit-code! (record-mutator G2a1f@G2a1a '10)) (set! G2a5c@set-library-invoke-code! (record-mutator G2a1f@G2a1a '11)) (set! G2a5e@set-library-visible?! (record-mutator G2a1f@G2a1a '12)) (set! G2a60@set-library-source-file-name! (record-mutator G2a1f@G2a1a '13)) (set! G2a62@rp (G2963@G2899@make-record-printer 'library (lambda (G2aa3@x G2aa4@p G2aa5@wr) (begin (if (not (G2a26@library? G2aa3@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a2e@library-version G2aa3@x)) (G2a2c@library-name G2aa3@x) (append (G2a2c@library-name G2aa3@x) (list (G2a2e@library-version G2aa3@x))))) G2aa4@p))))) (set! G2a64@find-dependencies (lambda (G2aa9@ls) (if (null? G2aa9@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2a66@find-library-by (lambda (G2aab@pred) ((letrec ((G2aad@f (lambda (G2aaf@ls) (if (null? G2aaf@ls) '#f (if (G2aab@pred (car G2aaf@ls)) (car G2aaf@ls) (G2aad@f (cdr G2aaf@ls))))))) G2aad@f) ((G2a19@current-library-collection))))) (set! G2a68@library-path (G2966@G289f@make-parameter '(".") (lambda (G2ab1@x) (if (if (list? G2ab1@x) (begin '#f (for-all string? G2ab1@x)) '#f) (map (lambda (G2ab3@x) G2ab3@x) G2ab1@x) (assertion-violation 'library-path '"not a list of strings" G2ab1@x))))) (set! G2a6a@library-extensions (G2966@G289f@make-parameter '(".sls" ".ss" ".scm") (lambda (G2ab5@x) (if (if (list? G2ab5@x) (begin '#f (for-all string? G2ab5@x)) '#f) (map (lambda (G2ab7@x) G2ab7@x) G2ab5@x) (assertion-violation 'library-extensions '"not a list of strings" G2ab5@x))))) (set! G2a6c@library-name->file-name (lambda (G2ab9@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2abd@G2abb G2abe@G2abc) ((lambda (G2ac1@extract G2ac2@p) ((lambda (G2ac6@display-hex) (begin (set! G2ac6@display-hex (lambda (G2ad5@n) (if (<= '0 G2ad5@n '9) (display G2ad5@n G2ac2@p) (display (integer->char (+ (char->integer '#\A) (- G2ad5@n '10))) G2ac2@p)))) (begin ((letrec ((G2ac7@f (lambda (G2ac9@ls) (if (not (null? G2ac9@ls)) (begin (display '"/" G2ac2@p) (for-each (lambda (G2acb@c) (if ((lambda (G2acd@t) (if G2acd@t G2acd@t ((lambda (G2acf@t) (if G2acf@t G2acf@t ((lambda (G2ad1@t) (if G2ad1@t G2ad1@t (begin '#f (memv G2acb@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2acb@c '#\9)))) (char<=? '#\A G2acb@c '#\Z)))) (char<=? '#\a G2acb@c '#\z)) (display G2acb@c G2ac2@p) (begin (display '"%" G2ac2@p) ((lambda (G2ad3@n) (begin (G2ac6@display-hex (quotient G2ad3@n '16)) (G2ac6@display-hex (remainder G2ad3@n '16)))) (char->integer G2acb@c))))) (string->list (symbol->string (car G2ac9@ls)))) (G2ac7@f (cdr G2ac9@ls))) (void))))) G2ac7@f) G2ab9@x) (G2ac1@extract)))) '#f)) G2abe@G2abc G2abd@G2abb))))) (set! G2a6e@file-locator (G2966@G289f@make-parameter (lambda (G2ad7@x) ((lambda (G2ad9@str) ((letrec ((G2adb@f (lambda (G2add@ls G2ade@exts G2adf@failed-list) (if (null? G2add@ls) ((lambda () ((lambda (G2aeb@G2ae6 G2aed@G2ae8 G2aef@G2ae7 G2af2@G2ae5 G2af4@make-library-resolution-condition G2af6@G2ae3 G2af8@G2ae4 G2afa@library-resolution-condition? G2afc@condition-library G2afe@condition-files) (begin (set! G2aeb@G2ae6 (make-record-type-descriptor '&library-resolution &condition-rtd 'G2ae9 '#f '#f '#((immutable library) (immutable files)))) (set! G2aed@G2ae8 '#f) (set! G2aef@G2ae7 (make-record-constructor-descriptor G2aeb@G2ae6 &condition-rcd G2aed@G2ae8)) (set! G2af2@G2ae5 (record-predicate G2aeb@G2ae6)) (set! G2af4@make-library-resolution-condition (record-constructor G2aef@G2ae7)) (set! G2af6@G2ae3 (record-accessor G2aeb@G2ae6 '0)) (set! G2af8@G2ae4 (record-accessor G2aeb@G2ae6 '1)) (set! G2afa@library-resolution-condition? (condition-predicate G2aeb@G2ae6)) (set! G2afc@condition-library (condition-accessor G2aeb@G2ae6 G2af6@G2ae3)) (set! G2afe@condition-files (condition-accessor G2aeb@G2ae6 G2af8@G2ae4)) (raise (condition (G4b48@G4a4c@make-error) (G4b62@G4a9a@make-who-condition 'expander) (G4b34@G4a12@make-message-condition '"cannot locate library in library-path") (G2af4@make-library-resolution-condition G2ad7@x (reverse G2adf@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2ade@exts) (G2adb@f (cdr G2add@ls) (G2a6a@library-extensions) G2adf@failed-list) ((lambda (G2aff@name) (if (file-exists? G2aff@name) G2aff@name (G2adb@f G2add@ls (cdr G2ade@exts) (cons G2aff@name G2adf@failed-list)))) (string-append (car G2add@ls) G2ad9@str (car G2ade@exts)))))))) G2adb@f) (G2a68@library-path) (G2a6a@library-extensions) '())) (G2a6c@library-name->file-name G2ad7@x))) (lambda (G2b01@f) (if (procedure? G2b01@f) G2b01@f (assertion-violation 'file-locator '"not a procedure" G2b01@f))))) (set! G2a70@serialize-all (lambda (G2b03@serialize G2b04@compile) ((lambda (G2b08@library-desc) (begin (set! G2b08@library-desc (lambda (G2b0b@x) (list (G2a2a@library-id G2b0b@x) (G2a2c@library-name G2b0b@x)))) (for-each (lambda (G2b09@x) (if (G2a44@library-source-file-name G2b09@x) (G2b03@serialize (G2a44@library-source-file-name G2b09@x) (list (G2a2a@library-id G2b09@x) (G2a2c@library-name G2b09@x) (G2a2e@library-version G2b09@x) (map G2b08@library-desc (G2a30@library-imp* G2b09@x)) (map G2b08@library-desc (G2a32@library-vis* G2b09@x)) (map G2b08@library-desc (G2a34@library-inv* G2b09@x)) (G2a36@library-subst G2b09@x) (G2a38@library-env G2b09@x) (G2b04@compile (G2a3e@library-visit-code G2b09@x)) (G2b04@compile (G2a40@library-invoke-code G2b09@x)) (G2a42@library-visible? G2b09@x))) (void))) ((G2a19@current-library-collection))))) '#f))) (set! G2a72@current-precompiled-library-loader (G2966@G289f@make-parameter (lambda (G2b0d@filename G2b0e@sk) '#f))) (set! G2a74@try-load-from-file (lambda (G2b11@filename) ((G2a72@current-precompiled-library-loader) G2b11@filename (lambda G2b37 ((lambda (G2b38) (if (= G2b38 '11) (apply (lambda (G2b13@id G2b14@name G2b15@ver G2b16@imp* G2b17@vis* G2b18@inv* G2b19@exp-subst G2b1a@exp-env G2b1b@visit-proc G2b1c@invoke-proc G2b1d@visible?) ((letrec ((G2b29@f (lambda (G2b2b@deps) (if (null? G2b2b@deps) (begin (G2a88@install-library G2b13@id G2b14@name G2b15@ver G2b16@imp* G2b17@vis* G2b18@inv* G2b19@exp-subst G2b1a@exp-env G2b1b@visit-proc G2b1c@invoke-proc '#f '#f G2b1d@visible? '#f) '#t) ((lambda (G2b2d@d) ((lambda (G2b2f@label G2b30@dname) ((lambda (G2b33@l) (if (if (G2a26@library? G2b33@l) (begin '#f (eq? G2b2f@label (G2a2a@library-id G2b33@l))) '#f) (G2b29@f (cdr G2b2b@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b14@name G2b30@dname G2b11@filename G2b33@l G2b2f@label (G2a2a@library-id G2b33@l)) '#f))) (G2a7e@find-library-by-name G2b30@dname))) (car G2b2d@d) (cadr G2b2d@d))) (car G2b2b@deps)))))) G2b29@f) (append G2b16@imp* G2b17@vis* G2b18@inv*))) G2b37) (if (>= G2b38 '0) (apply (lambda G2b35@others '#f) G2b37) (error 'apply '"invalid arg count")))) (length G2b37)))))) (set! G2a76@library-loader (G2966@G289f@make-parameter (lambda (G2b39@x) ((lambda (G2b3b@file-name) (if (not G2b3b@file-name) (assertion-violation '#f '"cannot file library" G2b39@x) ((lambda (G2b3d@t) (if G2b3d@t G2b3d@t (begin '#f ((G2a78@current-library-expander) (G2965@G289d@read-library-source-file G2b3b@file-name) G2b3b@file-name (lambda (G2b3f@name) (if (not (equal? G2b3f@name G2b39@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b43@G2b41 G2b44@G2b42) ((lambda (G2b47@e G2b48@p) (begin (display '"expected to find library " G2b48@p) (write G2b39@x G2b48@p) (display '" in file " G2b48@p) (display G2b3b@file-name G2b48@p) (display '", found " G2b48@p) (write G2b3f@name G2b48@p) (display '" instead" G2b48@p) (G2b47@e))) G2b44@G2b42 G2b43@G2b41)))) (void))))))) (G2a74@try-load-from-file G2b3b@file-name)))) ((G2a6e@file-locator) G2b39@x))) (lambda (G2b4b@f) (if (procedure? G2b4b@f) G2b4b@f (assertion-violation 'library-locator '"not a procedure" G2b4b@f))))) (set! G2a78@current-library-expander (G2966@G289f@make-parameter (lambda (G2b4d@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b4f@f) (if (procedure? G2b4f@f) G2b4f@f (assertion-violation 'library-expander '"not a procedure" G2b4f@f))))) (set! G2a7a@external-pending-libraries (G2966@G289f@make-parameter '())) (set! G2a7c@find-external-library (lambda (G2b51@name) (begin (if (member G2b51@name (G2a7a@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b51@name) (void)) ((lambda (G2b55@G2b53@external-pending-libraries G2b56@G2b54@external-pending-libraries) ((lambda (G2b59@swap) (dynamic-wind G2b59@swap (lambda () (begin ((G2a76@library-loader) G2b51@name) ((lambda (G2b5b@t) (if G2b5b@t G2b5b@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b51@name)))) (G2a66@find-library-by (lambda (G2b5d@x) (equal? (G2a2c@library-name G2b5d@x) G2b51@name)))))) G2b59@swap)) (lambda () ((lambda (G2b5f@t) (begin (G2b55@G2b53@external-pending-libraries G2b56@G2b54@external-pending-libraries) (set! G2b56@G2b54@external-pending-libraries G2b5f@t))) (G2b55@G2b53@external-pending-libraries))))) G2a7a@external-pending-libraries (cons G2b51@name (G2a7a@external-pending-libraries)))))) (set! G2a7e@find-library-by-name (lambda (G2b61@name) ((lambda (G2b63@t) (if G2b63@t G2b63@t (begin '#f (G2a7c@find-external-library G2b61@name)))) (G2a66@find-library-by (lambda (G2b65@x) (equal? (G2a2c@library-name G2b65@x) G2b61@name)))))) (set! G2a80@library-exists? (lambda (G2b67@name) (if (G2a66@find-library-by (lambda (G2b69@x) (equal? (G2a2c@library-name G2b69@x) G2b67@name))) (begin '#f '#t) '#f))) (set! G2a82@find-library-by-spec/die (lambda (G2b6b@spec) ((lambda (G2b6d@id) ((lambda (G2b6f@t) (if G2b6f@t G2b6f@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2b6b@spec)))) (G2a66@find-library-by (lambda (G2b71@x) (eq? G2b6d@id (G2a2a@library-id G2b71@x)))))) (car G2b6b@spec)))) (set! G2a84@label->binding-table (make-eq-hashtable)) (set! G2a86@install-library-record (lambda (G2b73@lib) (begin ((lambda (G2b75@exp-env) (for-each (lambda (G2b77@x) ((lambda (G2b79@label G2b7a@binding) ((lambda (G2b7d@binding) (hashtable-set! G2a84@label->binding-table G2b79@label G2b7d@binding)) ((lambda (G2b7f@t) (if (memv G2b7f@t '(global)) (cons 'global (cons G2b73@lib (cdr G2b7a@binding))) (if (memv G2b7f@t '(global-macro)) (cons 'global-macro (cons G2b73@lib (cdr G2b7a@binding))) (if (memv G2b7f@t '(global-macro!)) (cons 'global-macro! (cons G2b73@lib (cdr G2b7a@binding))) G2b7a@binding)))) (car G2b7a@binding)))) (car G2b77@x) (cdr G2b77@x))) G2b75@exp-env)) (G2a38@library-env G2b73@lib)) ((G2a19@current-library-collection) G2b73@lib)))) (set! G2a88@install-library (lambda (G2b81@id G2b82@name G2b83@ver G2b84@imp* G2b85@vis* G2b86@inv* G2b87@exp-subst G2b88@exp-env G2b89@visit-proc G2b8a@invoke-proc G2b8b@visit-code G2b8c@invoke-code G2b8d@visible? G2b8e@source-file-name) ((lambda (G2b9d@imp-lib* G2b9e@vis-lib* G2b9f@inv-lib*) (begin (if (not (if (symbol? G2b81@id) (if (list? G2b82@name) (begin '#f (list? G2b83@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b81@id G2b82@name G2b83@ver) (void)) (if (G2a80@library-exists? G2b82@name) (assertion-violation 'install-library '"library is already installed" G2b82@name) (void)) ((lambda (G2ba3@lib) (G2a86@install-library-record G2ba3@lib)) (G2a28@make-library G2b81@id G2b82@name G2b83@ver G2b9d@imp-lib* G2b9e@vis-lib* G2b9f@inv-lib* G2b87@exp-subst G2b88@exp-env G2b89@visit-proc G2b8a@invoke-proc G2b8b@visit-code G2b8c@invoke-code G2b8d@visible? G2b8e@source-file-name)))) (map G2a82@find-library-by-spec/die G2b84@imp*) (map G2a82@find-library-by-spec/die G2b85@vis*) (map G2a82@find-library-by-spec/die G2b86@inv*)))) (set! G2a8a@imported-label->binding (lambda (G2ba5@lab) (hashtable-ref G2a84@label->binding-table G2ba5@lab '#f))) (set! G2a8c@invoke-library (lambda (G2ba7@lib) ((lambda (G2ba9@invoke) (if (procedure? G2ba9@invoke) (begin (G2a58@set-library-invoke-state! G2ba7@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2ba7@lib))) (for-each G2a8c@invoke-library (G2a34@library-inv* G2ba7@lib)) (G2a58@set-library-invoke-state! G2ba7@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2ba7@lib))) (G2ba9@invoke) (G2a58@set-library-invoke-state! G2ba7@lib '#t)) (void))) (G2a3c@library-invoke-state G2ba7@lib)))) (set! G2a8e@visit-library (lambda (G2bab@lib) ((lambda (G2bad@visit) (if (procedure? G2bad@visit) (begin (G2a56@set-library-visit-state! G2bab@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bab@lib))) (for-each G2a8c@invoke-library (G2a32@library-vis* G2bab@lib)) (G2a56@set-library-visit-state! G2bab@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bab@lib))) (G2bad@visit) (G2a56@set-library-visit-state! G2bab@lib '#t)) (void))) (G2a3a@library-visit-state G2bab@lib)))) (set! G2a90@invoke-library-by-spec (lambda (G2baf@spec) (G2a8c@invoke-library (G2a82@find-library-by-spec/die G2baf@spec)))) (set! G2a92@installed-libraries (lambda G2bb9 ((lambda (G2bba) (if (= G2bba '1) (apply (lambda (G2bb1@all?) ((letrec ((G2bb3@f (lambda (G2bb5@ls) (if (null? G2bb5@ls) '() (if ((lambda (G2bb7@t) (if G2bb7@t G2bb7@t (begin '#f (G2a42@library-visible? (car G2bb5@ls))))) G2bb1@all?) (cons (car G2bb5@ls) (G2bb3@f (cdr G2bb5@ls))) (G2bb3@f (cdr G2bb5@ls))))))) G2bb3@f) ((G2a19@current-library-collection)))) G2bb9) (if (= G2bba '0) (apply (lambda () (G2a92@installed-libraries '#f)) G2bb9) (error 'apply '"invalid arg count")))) (length G2bb9)))) (set! G2a94@library-spec (lambda (G2bbb@x) (begin (if (not (G2a26@library? G2bbb@x)) (assertion-violation 'library-spec '"not a library" G2bbb@x) (void)) (list (G2a2a@library-id G2bbb@x) (G2a2c@library-name G2bbb@x) (G2a2e@library-version G2bbb@x))))) (begin (set! G2bf9@G2a94@library-spec G2a94@library-spec) (set! G2bf8@G2a92@installed-libraries G2a92@installed-libraries) (set! G2bf7@G2a90@invoke-library-by-spec G2a90@invoke-library-by-spec) (set! G2bf6@G2a8e@visit-library G2a8e@visit-library) (set! G2bf5@G2a8c@invoke-library G2a8c@invoke-library) (set! G2bf4@G2a8a@imported-label->binding G2a8a@imported-label->binding) (set! G2bf3@G2a88@install-library G2a88@install-library) (set! G2bf2@G2a86@install-library-record G2a86@install-library-record) (set! G2bf1@G2a84@label->binding-table G2a84@label->binding-table) (set! G2bf0@G2a82@find-library-by-spec/die G2a82@find-library-by-spec/die) (set! G2bef@G2a80@library-exists? G2a80@library-exists?) (set! G2bee@G2a7e@find-library-by-name G2a7e@find-library-by-name) (set! G2bed@G2a7c@find-external-library G2a7c@find-external-library) (set! G2bec@G2a7a@external-pending-libraries G2a7a@external-pending-libraries) (set! G2beb@G2a78@current-library-expander G2a78@current-library-expander) (set! G2bea@G2a76@library-loader G2a76@library-loader) (set! G2be9@G2a74@try-load-from-file G2a74@try-load-from-file) (set! G2be8@G2a72@current-precompiled-library-loader G2a72@current-precompiled-library-loader) (set! G2be7@G2a70@serialize-all G2a70@serialize-all) (set! G2be6@G2a6e@file-locator G2a6e@file-locator) (set! G2be5@G2a6c@library-name->file-name G2a6c@library-name->file-name) (set! G2be4@G2a6a@library-extensions G2a6a@library-extensions) (set! G2be3@G2a68@library-path G2a68@library-path) (set! G2be2@G2a66@find-library-by G2a66@find-library-by) (set! G2be1@G2a64@find-dependencies G2a64@find-dependencies) (set! G2be0@G2a62@rp G2a62@rp) (set! G2bdf@G2a60@set-library-source-file-name! G2a60@set-library-source-file-name!) (set! G2bde@G2a5e@set-library-visible?! G2a5e@set-library-visible?!) (set! G2bdd@G2a5c@set-library-invoke-code! G2a5c@set-library-invoke-code!) (set! G2bdc@G2a5a@set-library-visit-code! G2a5a@set-library-visit-code!) (set! G2bdb@G2a58@set-library-invoke-state! G2a58@set-library-invoke-state!) (set! G2bda@G2a56@set-library-visit-state! G2a56@set-library-visit-state!) (set! G2bd9@G2a54@set-library-env! G2a54@set-library-env!) (set! G2bd8@G2a52@set-library-subst! G2a52@set-library-subst!) (set! G2bd7@G2a50@set-library-inv*! G2a50@set-library-inv*!) (set! G2bd6@G2a4e@set-library-vis*! G2a4e@set-library-vis*!) (set! G2bd5@G2a4c@set-library-imp*! G2a4c@set-library-imp*!) (set! G2bd4@G2a4a@set-library-version! G2a4a@set-library-version!) (set! G2bd3@G2a48@set-library-name! G2a48@set-library-name!) (set! G2bd2@G2a46@set-library-id! G2a46@set-library-id!) (set! G2bd1@G2a44@library-source-file-name G2a44@library-source-file-name) (set! G2bd0@G2a42@library-visible? G2a42@library-visible?) (set! G2bcf@G2a40@library-invoke-code G2a40@library-invoke-code) (set! G2bce@G2a3e@library-visit-code G2a3e@library-visit-code) (set! G2bcd@G2a3c@library-invoke-state G2a3c@library-invoke-state) (set! G2bcc@G2a3a@library-visit-state G2a3a@library-visit-state) (set! G2bcb@G2a38@library-env G2a38@library-env) (set! G2bca@G2a36@library-subst G2a36@library-subst) (set! G2bc9@G2a34@library-inv* G2a34@library-inv*) (set! G2bc8@G2a32@library-vis* G2a32@library-vis*) (set! G2bc7@G2a30@library-imp* G2a30@library-imp*) (set! G2bc6@G2a2e@library-version G2a2e@library-version) (set! G2bc5@G2a2c@library-name G2a2c@library-name) (set! G2bc4@G2a2a@library-id G2a2a@library-id) (set! G2bc3@G2a28@make-library G2a28@make-library) (set! G2bc2@G2a26@library? G2a26@library?) (set! G2bc1@G2a23@G2a1b G2a23@G2a1b) (set! G2bc0@G2a21@G2a1c G2a21@G2a1c) (set! G2bbf@G2a1f@G2a1a G2a1f@G2a1a) (set! G2bbe@G2a19@current-library-collection G2a19@current-library-collection) (set! G2bbd@G2a17@make-collection G2a17@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2bfc@build-global-define G2c5e@build-lambda G2c60@build-case-lambda G2c62@build-let G2c94@build-sequence G2c96@build-void G2c98@build-letrec G2c9a@build-letrec* G2c9c@build-library-letrec* G2c9e@build-receive) (begin (set! G2bfc@build-global-define (lambda (G2c9f@x) (G2c96@build-void))) (set! G2c5e@build-lambda (lambda (G2ca1@ae G2ca2@vars G2ca3@exp) (list 'lambda G2ca2@vars G2ca3@exp))) (set! G2c60@build-case-lambda (lambda (G2ca7@ae G2ca8@vars* G2ca9@exp*) ((lambda (G2cae@build-error G2cb0@build-pred G2cb2@build-apply G2cb4@expand-case-lambda) (begin (set! G2cae@build-error (lambda (G2ce3@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2cb0@build-pred (lambda (G2ccd@ae G2cce@n G2ccf@vars) (call-with-values (lambda () ((letrec ((G2cd5@f (lambda (G2cd7@vars G2cd8@count) (if (pair? G2cd7@vars) (G2cd5@f (cdr G2cd7@vars) (+ G2cd8@count '1)) (if (null? G2cd7@vars) (values G2cd8@count '=) (values G2cd8@count '>=)))))) G2cd5@f) G2ccf@vars '0)) (lambda (G2cdb@G2cd3 G2cdc@G2cd4) ((lambda (G2cdf@pred G2ce0@count) (list (list 'primitive G2cdf@pred) G2cce@n (list 'quote G2ce0@count))) G2cdc@G2cd4 G2cdb@G2cd3))))) (set! G2cb2@build-apply (lambda (G2cc5@ae G2cc6@g G2cc7@vars G2cc8@exp) (list '(primitive apply) (G2c5e@build-lambda G2cc5@ae G2cc7@vars G2cc8@exp) G2cc6@g))) (set! G2cb4@expand-case-lambda (lambda (G2cb5@ae G2cb6@vars G2cb7@exp*) ((lambda (G2cbb@g G2cbc@n) (list 'lambda G2cbb@g (G2c62@build-let G2cb5@ae (list G2cbc@n) (list (list '(primitive length) G2cbb@g)) ((letrec ((G2cbf@f (lambda (G2cc1@vars* G2cc2@exp*) (if (null? G2cc1@vars*) (G2cae@build-error G2cb5@ae) (list 'if (G2cb0@build-pred G2cb5@ae G2cbc@n (car G2cc1@vars*)) (G2cb2@build-apply G2cb5@ae G2cbb@g (car G2cc1@vars*) (car G2cc2@exp*)) (G2cbf@f (cdr G2cc1@vars*) (cdr G2cc2@exp*))))))) G2cbf@f) G2ca8@vars* G2cb7@exp*)))) (gensym) (gensym)))) (if (= (length G2ca9@exp*) '1) (G2c5e@build-lambda G2ca7@ae (car G2ca8@vars*) (car G2ca9@exp*)) (G2cb4@expand-case-lambda G2ca7@ae G2ca8@vars* G2ca9@exp*)))) '#f '#f '#f '#f))) (set! G2c62@build-let (lambda (G2ce5@ae G2ce6@lhs* G2ce7@rhs* G2ce8@body) (cons (G2c5e@build-lambda G2ce5@ae G2ce6@lhs* G2ce8@body) G2ce7@rhs*))) (set! G2c94@build-sequence (lambda (G2ced@ae G2cee@exps) ((letrec ((G2cf1@loop (lambda (G2cf3@exps) (if (null? (cdr G2cf3@exps)) (car G2cf3@exps) (if (equal? (car G2cf3@exps) (G2c96@build-void)) (G2cf1@loop (cdr G2cf3@exps)) (cons 'begin G2cf3@exps)))))) G2cf1@loop) G2cee@exps))) (set! G2c96@build-void (lambda () '((primitive void)))) (set! G2c98@build-letrec (lambda (G2cf5@ae G2cf6@vars G2cf7@val-exps G2cf8@body-exp) (if (null? G2cf6@vars) G2cf8@body-exp (list 'letrec (map list G2cf6@vars G2cf7@val-exps) G2cf8@body-exp)))) (set! G2c9a@build-letrec* (lambda (G2cfd@ae G2cfe@vars G2cff@val-exps G2d00@body-exp) (if (null? G2cfe@vars) G2d00@body-exp (G2c62@build-let G2cfd@ae G2cfe@vars (map (lambda (G2d05@x) (list 'quote '#f)) G2cfe@vars) (G2c94@build-sequence G2cfd@ae (append (map (lambda (G2d07@lhs G2d08@rhs) (list 'set! G2d07@lhs G2d08@rhs)) G2cfe@vars G2cff@val-exps) (list G2d00@body-exp))))))) (set! G2c9c@build-library-letrec* (lambda (G2d0b@ae G2d0c@name G2d0d@vars G2d0e@locs G2d0f@val-exps G2d10@body-exp) (list 'library-letrec* G2d0c@name (map list G2d0d@vars G2d0e@locs G2d0f@val-exps) G2d10@body-exp))) (set! G2c9e@build-receive (lambda (G2d17@ae G2d18@vars G2d19@producer G2d1a@body*) (begin (display '"************** in ") (cons 'receive (cons G2d18@vars (cons G2d19@producer G2d1a@body*)))))) (begin (set! G2d28@G2c9e@build-receive G2c9e@build-receive) (set! G2d27@G2c9c@build-library-letrec* G2c9c@build-library-letrec*) (set! G2d26@G2c9a@build-letrec* G2c9a@build-letrec*) (set! G2d25@G2c98@build-letrec G2c98@build-letrec) (set! G2d24@G2c96@build-void G2c96@build-void) (set! G2d23@G2c94@build-sequence G2c94@build-sequence) (set! G2d22@G2c62@build-let G2c62@build-let) (set! G2d21@G2c60@build-case-lambda G2c60@build-case-lambda) (set! G2d20@G2c5e@build-lambda G2c5e@build-lambda) (set! G2d1f@G2bfc@build-global-define G2bfc@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2d35@set-cons G2d37@set-union G2d3c@top-mark* G2d3e@top-marked? G2d40@gen-lexical G2d42@gen-global G2d44@gen-label G2d46@gen-top-level-label G2d48@gen-define-label+loc G2d4a@gen-define-label G2d50@G2d4b G2d52@G2d4d G2d54@G2d4c G2d57@rib? G2d59@make-rib G2d5b@rib-sym* G2d5d@rib-mark** G2d5f@rib-label* G2d61@rib-sealed/freq G2d63@rib-cache G2d65@set-rib-sym*! G2d67@set-rib-mark**! G2d69@set-rib-label*! G2d6b@set-rib-sealed/freq! G2d6d@set-rib-cache! G2d6f@make-empty-rib G2d71@make-cache-rib G2d73@find-label G2d75@extend-rib! G2d77@extend-rib/nc! G2d79@make-rib-map G2d7b@seal-rib! G2d7d@unseal-rib! G2d7f@make-full-rib G2d85@G2d80 G2d87@G2d82 G2d89@G2d81 G2d8c@stx? G2d8e@make-stx G2d90@stx-expr G2d92@stx-mark* G2d94@stx-subst* G2d96@stx-ae* G2d98@set-stx-expr! G2d9a@set-stx-mark*! G2d9c@set-stx-subst*! G2d9e@set-stx-ae*! G2da0@rp G2da2@datum->stx G2da4@gen-mark G2da6@anti-mark G2da8@anti-mark? G2daa@join-wraps G2dac@mkstx G2dae@add-mark G2db0@add-subst G2db2@syntax-kind? G2db4@syntax-vector->list G2db6@syntax-pair? G2db8@syntax-vector? G2dba@syntax-null? G2dbc@syntax-list? G2dbe@syntax-car G2dc0@syntax-cdr G2dc2@syntax->list G2dc4@id? G2dc6@id->sym G2dc8@same-marks? G2dca@bound-id=? G2dcc@free-id=? G2dce@valid-bound-ids? G2dd0@distinct-bound-ids? G2dd2@bound-id-member? G2dd4@self-evaluating? G2dd6@strip-annotations G2dd8@strip G2dda@stx->datum G2ddc@same-marks*? G2dde@id->label G2de0@id->real-label G2de2@label->binding G2de4@make-binding G2de6@binding-type G2de8@binding-value G2dea@raise-unbound-error G2dec@syntax-type G2dfc@sanitize-binding G2dfe@make-variable-transformer G2e00@variable-transformer? G2e02@variable-transformer-procedure G2e04@make-eval-transformer G2f49@parse-define G2f4b@parse-define-syntax G2f4d@scheme-stx-hashtable G2f4f@scheme-stx G2f51@lexical-var G2f53@lexical-mutable? G2f55@set-lexical-mutable! G2f57@add-lexical G2f59@add-lexicals G2f5b@letrec-helper G2f5d@letrec-transformer G2f5f@letrec*-transformer G2f61@fluid-let-syntax-transformer G2f63@type-descriptor-transformer G2f65@record-type-descriptor-transformer G2f67@record-constructor-descriptor-transformer G2f69@when-macro G2f6b@unless-macro G2f6d@if-transformer G2f6f@case-macro G2f71@quote-transformer G2f73@case-lambda-transformer G2f75@lambda-transformer G2f77@bless G2f79@with-syntax-macro G2f7b@invalid-fmls-error G2f7d@let-macro G2f7f@let-values-macro G2f81@let*-values-macro G2f83@trace-lambda-macro G2f85@trace-define-macro G2f87@trace-define-syntax-macro G2f89@trace-let/rec-syntax G2f8b@trace-let-syntax-macro G2f8d@trace-letrec-syntax-macro G2f8f@guard-macro G2f91@define-enumeration-macro G2f93@time-macro G2f95@delay-macro G2f97@assert-macro G2f99@endianness-macro G2f9b@identifier-syntax-macro G2f9d@do-macro G2f9f@let*-macro G2fa1@or-macro G2fa3@and-macro G2fa5@cond-macro G2fa7@do-include G2fa9@include-macro G2fab@include-into-macro G2fad@syntax-rules-macro G2faf@quasiquote-macro G2fb1@quasisyntax-macro G2fb3@define-struct-macro G2fb5@define-record-type-macro G2fb7@define-condition-type-macro G2fb9@incorrect-usage-macro G2fbb@parameterize-macro G2fbd@foreign-call-transformer G2fbf@convert-pattern G2fc1@syntax-dispatch G2fc3@ellipsis? G2fc5@underscore? G2fc7@verify-literals G2fc9@syntax-case-transformer G2fcb@ellipsis-map G2fcd@syntax-transformer G2fcf@core-macro-transformer G2fd1@file-options-macro G2fd3@symbol-macro G2fd5@macro-transformer G2fd7@local-macro-transformer G2fd9@do-macro-call G2fdb@chi-macro G2fdd@chi-local-macro G2fdf@chi-global-macro G2fe1@chi-expr* G2fe3@chi-application G2fe5@chi-expr G2fe7@chi-set! G2fe9@verify-formals G2feb@chi-lambda-clause G2fed@chi-lambda-clause* G2fef@chi-defun G2ff1@chi-rhs G2ff3@expand-interaction-rhs*/init* G2ff5@chi-rhs* G2ff7@find-bound=? G2ff9@find-dups G2ffb@chi-internal G2ffd@parse-module G3003@G2ffe G3005@G3000 G3007@G2fff G300a@module-interface? G300c@make-module-interface G300e@module-interface-first-mark G3010@module-interface-exp-id-vec G3012@module-interface-exp-lab-vec G3014@set-module-interface-first-mark! G3016@set-module-interface-exp-id-vec! G3018@set-module-interface-exp-lab-vec! G301a@module-interface-exp-id* G301c@chi-internal-module G301e@chi-body* G3020@expand-transformer G3022@parse-exports G3024@parse-library-name G3026@parse-library G3028@parse-import-spec* G302a@make-top-rib G302c@make-collector G302e@inv-collector G3030@vis-collector G3032@imp-collector G3034@chi-library-internal G3036@chi-interaction-expr G3038@library-body-expander G303a@core-library-expander G303c@parse-top-level-program G303e@top-level-expander G3044@G303f G3046@G3041 G3048@G3040 G304b@env? G304d@make-env G304f@env-names G3051@env-labels G3053@env-itc G3055@set-env-names! G3057@set-env-labels! G3059@set-env-itc! G305b@rp G3061@G305c G3063@G305e G3065@G305d G3068@interaction-env? G306a@make-interaction-env G306c@interaction-env-rib G306e@interaction-env-r G3070@interaction-env-locs G3072@set-interaction-env-rib! G3074@set-interaction-env-r! G3076@set-interaction-env-locs! G3078@rp G307a@interaction-environment-symbols G307c@environment-bindings G307e@parse-binding G3080@environment? G3082@environment-symbols G3084@environment G3086@null-environment G3088@scheme-report-environment G308a@expand G308c@eval G308e@library-expander G3090@boot-library-expand G3092@rev-map-append G3094@build-exports G3096@make-export-subst G3098@make-export-env/macros G309a@generate-temporaries G309c@free-identifier=? G309e@bound-identifier=? G30a0@make-source-condition G30a2@extract-position-condition G30a4@expression-position G30a6@assertion-error G30a8@syntax-error G30aa@extract-trace G30ac@syntax-violation* G30ae@syntax-violation G30b0@identifier? G30b2@datum->syntax G30b4@syntax->datum G30b6@compile-r6rs-top-level G30b8@pre-compile-r6rs-top-level G30ba@interaction-environment G30bc@top-level-context) (begin (set! G2d35@set-cons (lambda (G30bd@x G30be@ls) (if (memq G30bd@x G30be@ls) G30be@ls (cons G30bd@x G30be@ls)))) (set! G2d37@set-union (lambda (G30c1@ls1 G30c2@ls2) (if (null? G30c1@ls1) G30c2@ls2 (if (memq (car G30c1@ls1) G30c2@ls2) (G2d37@set-union (cdr G30c1@ls1) G30c2@ls2) (cons (car G30c1@ls1) (G2d37@set-union (cdr G30c1@ls1) G30c2@ls2)))))) (set! G2d3c@top-mark* '(top)) (set! G2d3e@top-marked? (lambda (G30c5@m*) (memq 'top G30c5@m*))) (set! G2d40@gen-lexical (lambda (G30c7@sym) (if (symbol? G30c7@sym) (gensym G30c7@sym) (if (G2d8c@stx? G30c7@sym) (G2d40@gen-lexical (G2dc6@id->sym G30c7@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G30c7@sym))))) (set! G2d42@gen-global (lambda (G30c9@x) (G2d40@gen-lexical G30c9@x))) (set! G2d44@gen-label (lambda (G30cb@_) (gensym))) (set! G2d46@gen-top-level-label (lambda (G30cd@id G30ce@rib) ((lambda (G30d2@find) (begin (set! G30d2@find (lambda (G30dd@sym G30de@mark* G30df@sym* G30e0@mark** G30e1@label*) (if (pair? G30df@sym*) (begin '#f (if (if (eq? G30dd@sym (car G30df@sym*)) (begin '#f (G2dc8@same-marks? G30de@mark* (car G30e0@mark**))) '#f) (car G30e1@label*) (G30d2@find G30dd@sym G30de@mark* (cdr G30df@sym*) (cdr G30e0@mark**) (cdr G30e1@label*)))) '#f))) ((lambda (G30d3@sym G30d4@mark*) ((lambda (G30d7@sym*) ((lambda (G30d9@t) (if G30d9@t ((lambda (G30db@label) (if (G2bf4@G2a8a@imported-label->binding G30db@label) (gensym) G30db@label)) G30d9@t) (gensym))) (if (memq G30d3@sym (G2d5b@rib-sym* G30ce@rib)) (begin '#f (G30d2@find G30d3@sym G30d4@mark* G30d7@sym* (G2d5d@rib-mark** G30ce@rib) (G2d5f@rib-label* G30ce@rib))) '#f))) (G2d5b@rib-sym* G30ce@rib))) (G2dc6@id->sym G30cd@id) (G2d92@stx-mark* G30cd@id)))) '#f))) (set! G2d48@gen-define-label+loc (lambda (G30e7@id G30e8@rib) ((lambda (G30eb@t) (if G30eb@t ((lambda (G30ed@env) ((lambda (G30ef@label G30f0@locs) (values G30ef@label ((lambda (G30f3@t) (if G30f3@t (cdr G30f3@t) ((lambda (G30f5@loc) (begin (G3076@set-interaction-env-locs! G30ed@env (cons (cons G30ef@label G30f5@loc) G30f0@locs)) G30f5@loc)) (G2d40@gen-lexical G30e7@id)))) (assq G30ef@label G30f0@locs)))) (G2d46@gen-top-level-label G30e7@id G30e8@rib) (G3070@interaction-env-locs G30ed@env))) G30eb@t) (values (gensym) (G2d40@gen-lexical G30e7@id)))) (G30bc@top-level-context)))) (set! G2d4a@gen-define-label (lambda (G30f7@id G30f8@rib) (if (G30bc@top-level-context) (G2d46@gen-top-level-label G30f7@id G30f8@rib) (gensym)))) (set! G2d50@G2d4b (make-record-type-descriptor 'rib '#f 'G2d4e '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2d52@G2d4d '#f) (set! G2d54@G2d4c (make-record-constructor-descriptor G2d50@G2d4b '#f G2d52@G2d4d)) (set! G2d57@rib? (record-predicate G2d50@G2d4b)) (set! G2d59@make-rib (record-constructor G2d54@G2d4c)) (set! G2d5b@rib-sym* (record-accessor G2d50@G2d4b '0)) (set! G2d5d@rib-mark** (record-accessor G2d50@G2d4b '1)) (set! G2d5f@rib-label* (record-accessor G2d50@G2d4b '2)) (set! G2d61@rib-sealed/freq (record-accessor G2d50@G2d4b '3)) (set! G2d63@rib-cache (record-accessor G2d50@G2d4b '4)) (set! G2d65@set-rib-sym*! (record-mutator G2d50@G2d4b '0)) (set! G2d67@set-rib-mark**! (record-mutator G2d50@G2d4b '1)) (set! G2d69@set-rib-label*! (record-mutator G2d50@G2d4b '2)) (set! G2d6b@set-rib-sealed/freq! (record-mutator G2d50@G2d4b '3)) (set! G2d6d@set-rib-cache! (record-mutator G2d50@G2d4b '4)) (set! G2d6f@make-empty-rib (lambda () (G2d59@make-rib '() '() '() '#f '#f))) (set! G2d71@make-cache-rib (lambda () (G2d59@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d73@find-label (lambda (G30fb@rib G30fc@sym G30fd@mark*) ((lambda (G3101@ht) (if G3101@ht (begin '#f ((lambda (G3103@cv) ((lambda (G3105@t) (if G3105@t (cdr G3105@t) '#f)) (if G3103@cv (begin '#f (assp (lambda (G3107@m) (G2dc8@same-marks? G30fd@mark* G3107@m)) G3103@cv)) '#f))) (hashtable-ref G3101@ht G30fc@sym '#f))) '#f)) (G2d63@rib-cache G30fb@rib)))) (set! G2d75@extend-rib! (lambda (G3109@rib G310a@id G310b@label) ((lambda (G3110@find) (begin (set! G3110@find (lambda (G3121@sym G3122@mark* G3123@sym* G3124@mark** G3125@label*) (if (pair? G3123@sym*) (begin '#f (if (if (eq? G3121@sym (car G3123@sym*)) (begin '#f (G2dc8@same-marks? G3122@mark* (car G3124@mark**))) '#f) G3125@label* (G3110@find G3121@sym G3122@mark* (cdr G3123@sym*) (cdr G3124@mark**) (cdr G3125@label*)))) '#f))) (begin (if (G2d61@rib-sealed/freq G3109@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G3109@rib) (void)) ((lambda (G3111@sym G3112@mark*) ((lambda (G3115@sym*) ((lambda (G3117@t) (if G3117@t ((lambda (G3119@p) (if (not (eq? G310b@label G3119@p)) (G30ae@syntax-violation '#f '"multiple definitions of identifier" G310a@id) (void))) G3117@t) ((lambda (G311b@t) (if G311b@t ((lambda (G311d@p) (if (not (eq? G310b@label (car G311d@p))) (if (G30bc@top-level-context) (set-car! G311d@p G310b@label) (G30ae@syntax-violation '#f '"multiple definitions of identifier" G310a@id)) (void))) G311b@t) (begin (if (G2d63@rib-cache G3109@rib) (hashtable-update! (G2d63@rib-cache G3109@rib) G3111@sym (lambda (G311f@e) (cons (cons G3112@mark* G310b@label) G311f@e)) '()) (void)) (G2d65@set-rib-sym*! G3109@rib (cons G3111@sym G3115@sym*)) (G2d67@set-rib-mark**! G3109@rib (cons G3112@mark* (G2d5d@rib-mark** G3109@rib))) (G2d69@set-rib-label*! G3109@rib (cons G310b@label (G2d5f@rib-label* G3109@rib)))))) (if (memq G3111@sym (G2d5b@rib-sym* G3109@rib)) (begin '#f (G3110@find G3111@sym G3112@mark* G3115@sym* (G2d5d@rib-mark** G3109@rib) (G2d5f@rib-label* G3109@rib))) '#f)))) (G2d73@find-label G3109@rib G3111@sym G3112@mark*))) (G2d5b@rib-sym* G3109@rib))) (G2dc6@id->sym G310a@id) (G2d92@stx-mark* G310a@id))))) '#f))) (set! G2d77@extend-rib/nc! (lambda (G312b@rib G312c@id G312d@label) ((lambda (G3131@sym G3132@mark*) ((lambda (G3135@sym*) (begin (if (G2d63@rib-cache G312b@rib) (hashtable-update! (G2d63@rib-cache G312b@rib) G3131@sym (lambda (G3137@e) (cons (cons G3132@mark* G312d@label) G3137@e)) '()) (void)) (G2d65@set-rib-sym*! G312b@rib (cons G3131@sym G3135@sym*)) (G2d67@set-rib-mark**! G312b@rib (cons G3132@mark* (G2d5d@rib-mark** G312b@rib))) (G2d69@set-rib-label*! G312b@rib (cons G312d@label (G2d5f@rib-label* G312b@rib))))) (G2d5b@rib-sym* G312b@rib))) (G2dc6@id->sym G312c@id) (G2d92@stx-mark* G312c@id)))) (set! G2d79@make-rib-map (lambda (G3139@sym*) ((lambda (G313b@ht) ((letrec ((G313d@f (lambda (G313f@i G3140@sym*) (if (null? G3140@sym*) G313b@ht (begin (hashtable-update! G313b@ht (car G3140@sym*) (lambda (G3143@x) (cons G313f@i G3143@x)) '()) (G313d@f (+ G313f@i '1) (cdr G3140@sym*))))))) G313d@f) '0 G3139@sym*)) (make-eq-hashtable)))) (set! G2d7b@seal-rib! (lambda (G3145@rib) ((lambda (G3147@sym*) (if (not (null? G3147@sym*)) (begin (G2d65@set-rib-sym*! G3145@rib (list->vector G3147@sym*)) (G2d67@set-rib-mark**! G3145@rib (list->vector (G2d5d@rib-mark** G3145@rib))) (G2d69@set-rib-label*! G3145@rib (list->vector (G2d5f@rib-label* G3145@rib))) (G2d6b@set-rib-sealed/freq! G3145@rib (G2d79@make-rib-map G3147@sym*))) (void))) (G2d5b@rib-sym* G3145@rib)))) (set! G2d7d@unseal-rib! (lambda (G3149@rib) (if (G2d61@rib-sealed/freq G3149@rib) (begin (G2d6b@set-rib-sealed/freq! G3149@rib '#f) (G2d65@set-rib-sym*! G3149@rib (vector->list (G2d5b@rib-sym* G3149@rib))) (G2d67@set-rib-mark**! G3149@rib (vector->list (G2d5d@rib-mark** G3149@rib))) (G2d69@set-rib-label*! G3149@rib (vector->list (G2d5f@rib-label* G3149@rib)))) (void)))) (set! G2d7f@make-full-rib (lambda (G314b@id* G314c@label*) ((lambda (G314f@r) (begin (G2d7b@seal-rib! G314f@r) G314f@r)) (G2d59@make-rib (map G2dc6@id->sym G314b@id*) (map G2d92@stx-mark* G314b@id*) G314c@label* '#f '#f)))) (set! G2d85@G2d80 (make-record-type-descriptor 'stx '#f 'G2d83 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d87@G2d82 '#f) (set! G2d89@G2d81 (make-record-constructor-descriptor G2d85@G2d80 '#f G2d87@G2d82)) (set! G2d8c@stx? (record-predicate G2d85@G2d80)) (set! G2d8e@make-stx (record-constructor G2d89@G2d81)) (set! G2d90@stx-expr (record-accessor G2d85@G2d80 '0)) (set! G2d92@stx-mark* (record-accessor G2d85@G2d80 '1)) (set! G2d94@stx-subst* (record-accessor G2d85@G2d80 '2)) (set! G2d96@stx-ae* (record-accessor G2d85@G2d80 '3)) (set! G2d98@set-stx-expr! (record-mutator G2d85@G2d80 '0)) (set! G2d9a@set-stx-mark*! (record-mutator G2d85@G2d80 '1)) (set! G2d9c@set-stx-subst*! (record-mutator G2d85@G2d80 '2)) (set! G2d9e@set-stx-ae*! (record-mutator G2d85@G2d80 '3)) (set! G2da0@rp (G2963@G2899@make-record-printer 'stx (lambda (G3151@x G3152@p G3153@wr) (begin (display '"#<syntax " G3152@p) (write (G2dda@stx->datum G3151@x) G3152@p) ((lambda (G3157@expr) (if (G295b@G2889@annotation? G3157@expr) ((lambda (G3159@src) (if (pair? G3159@src) (begin (display '" [" G3152@p) (display (cdr G3159@src) G3152@p) (display '" of " G3152@p) (display (car G3159@src) G3152@p) (display '"]" G3152@p)) (void))) (G295c@G288b@annotation-source G3157@expr)) (void))) (G2d90@stx-expr G3151@x)) (display '">" G3152@p))))) (set! G2da2@datum->stx (lambda (G315b@id G315c@datum) (G2d8e@make-stx G315c@datum (G2d92@stx-mark* G315b@id) (G2d94@stx-subst* G315b@id) (G2d96@stx-ae* G315b@id)))) (set! G2da4@gen-mark (lambda () (string '#\m))) (set! G2da6@anti-mark '#f) (set! G2da8@anti-mark? not) (set! G2daa@join-wraps (lambda (G315f@m1* G3160@s1* G3161@ae1* G3162@e) ((lambda (G3168@cancel) (begin (set! G3168@cancel (lambda (G316f@ls1 G3170@ls2) ((letrec ((G3173@f (lambda (G3175@x G3176@ls1) (if (null? G3176@ls1) (cdr G3170@ls2) (cons G3175@x (G3173@f (car G3176@ls1) (cdr G3176@ls1))))))) G3173@f) (car G316f@ls1) (cdr G316f@ls1)))) ((lambda (G3169@m2* G316a@s2* G316b@ae2*) (if (if (not (null? G315f@m1*)) (if (not (null? G3169@m2*)) (begin '#f (G2da8@anti-mark? (car G3169@m2*))) '#f) '#f) (values (G3168@cancel G315f@m1* G3169@m2*) (G3168@cancel G3160@s1* G316a@s2*) (G3168@cancel G3161@ae1* G316b@ae2*)) (values (append G315f@m1* G3169@m2*) (append G3160@s1* G316a@s2*) (append G3161@ae1* G316b@ae2*)))) (G2d92@stx-mark* G3162@e) (G2d94@stx-subst* G3162@e) (G2d96@stx-ae* G3162@e)))) '#f))) (set! G2dac@mkstx (lambda (G3179@e G317a@m* G317b@s* G317c@ae*) (if (if (G2d8c@stx? G3179@e) (begin '#f (not (G2d3e@top-marked? G317a@m*))) '#f) (call-with-values (lambda () (G2daa@join-wraps G317a@m* G317b@s* G317c@ae* G3179@e)) (lambda (G3184@G3181 G3185@G3182 G3186@G3183) ((lambda (G318a@ae* G318b@s* G318c@m*) (G2d8e@make-stx (G2d90@stx-expr G3179@e) G318c@m* G318b@s* G318a@ae*)) G3186@G3183 G3185@G3182 G3184@G3181))) (G2d8e@make-stx G3179@e G317a@m* G317b@s* G317c@ae*)))) (set! G2dae@add-mark (lambda (G3190@m G3191@e G3192@ae) (G2dac@mkstx G3191@e (list G3190@m) '(shift) (list G3192@ae)))) (set! G2db0@add-subst (lambda (G3196@subst G3197@e) (G2dac@mkstx G3197@e '() (list G3196@subst) '()))) (set! G2db2@syntax-kind? (lambda (G319a@x G319b@p?) (if (G2d8c@stx? G319a@x) (G2db2@syntax-kind? (G2d90@stx-expr G319a@x) G319b@p?) (if (G295b@G2889@annotation? G319a@x) (G2db2@syntax-kind? (G295d@G288d@annotation-expression G319a@x) G319b@p?) (G319b@p? G319a@x))))) (set! G2db4@syntax-vector->list (lambda (G319e@x) (if (G2d8c@stx? G319e@x) ((lambda (G31a0@ls G31a1@m* G31a2@s* G31a3@ae*) (map (lambda (G31a8@x) (G2dac@mkstx G31a8@x G31a1@m* G31a2@s* G31a3@ae*)) G31a0@ls)) (G2db4@syntax-vector->list (G2d90@stx-expr G319e@x)) (G2d92@stx-mark* G319e@x) (G2d94@stx-subst* G319e@x) (G2d96@stx-ae* G319e@x)) (if (G295b@G2889@annotation? G319e@x) (G2db4@syntax-vector->list (G295d@G288d@annotation-expression G319e@x)) (if (vector? G319e@x) (vector->list G319e@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G319e@x)))))) (set! G2db6@syntax-pair? (lambda (G31aa@x) (G2db2@syntax-kind? G31aa@x pair?))) (set! G2db8@syntax-vector? (lambda (G31ac@x) (G2db2@syntax-kind? G31ac@x vector?))) (set! G2dba@syntax-null? (lambda (G31ae@x) (G2db2@syntax-kind? G31ae@x null?))) (set! G2dbc@syntax-list? (lambda (G31b0@x) ((lambda (G31b2@t) (if G31b2@t G31b2@t (begin '#f (if (G2db6@syntax-pair? G31b0@x) (begin '#f (G2dbc@syntax-list? (G2dc0@syntax-cdr G31b0@x))) '#f)))) (G2dba@syntax-null? G31b0@x)))) (set! G2dbe@syntax-car (lambda (G31b4@x) (if (G2d8c@stx? G31b4@x) (G2dac@mkstx (G2dbe@syntax-car (G2d90@stx-expr G31b4@x)) (G2d92@stx-mark* G31b4@x) (G2d94@stx-subst* G31b4@x) (G2d96@stx-ae* G31b4@x)) (if (G295b@G2889@annotation? G31b4@x) (G2dbe@syntax-car (G295d@G288d@annotation-expression G31b4@x)) (if (pair? G31b4@x) (car G31b4@x) (assertion-violation 'syntax-car '"BUG: not a pair" G31b4@x)))))) (set! G2dc0@syntax-cdr (lambda (G31b6@x) (if (G2d8c@stx? G31b6@x) (G2dac@mkstx (G2dc0@syntax-cdr (G2d90@stx-expr G31b6@x)) (G2d92@stx-mark* G31b6@x) (G2d94@stx-subst* G31b6@x) (G2d96@stx-ae* G31b6@x)) (if (G295b@G2889@annotation? G31b6@x) (G2dc0@syntax-cdr (G295d@G288d@annotation-expression G31b6@x)) (if (pair? G31b6@x) (cdr G31b6@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G31b6@x)))))) (set! G2dc2@syntax->list (lambda (G31b8@x) (if (G2db6@syntax-pair? G31b8@x) (cons (G2dbe@syntax-car G31b8@x) (G2dc2@syntax->list (G2dc0@syntax-cdr G31b8@x))) (if (G2dba@syntax-null? G31b8@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G31b8@x))))) (set! G2dc4@id? (lambda (G31ba@x) (if (G2d8c@stx? G31ba@x) (begin '#f ((lambda (G31bc@expr) (symbol? (if (G295b@G2889@annotation? G31bc@expr) (G295a@G2887@annotation-stripped G31bc@expr) G31bc@expr))) (G2d90@stx-expr G31ba@x))) '#f))) (set! G2dc6@id->sym (lambda (G31be@x) (begin (if (not (G2d8c@stx? G31be@x)) (error 'id->sym '"BUG in ikarus: not an id" G31be@x) (void)) ((lambda (G31c0@expr) ((lambda (G31c2@sym) (if (symbol? G31c2@sym) G31c2@sym (error 'id->sym '"BUG in ikarus: not an id" G31be@x))) (if (G295b@G2889@annotation? G31c0@expr) (G295a@G2887@annotation-stripped G31c0@expr) G31c0@expr))) (G2d90@stx-expr G31be@x))))) (set! G2dc8@same-marks? (lambda (G31c4@x G31c5@y) ((lambda (G31c8@t) (if G31c8@t G31c8@t (begin '#f (if (pair? G31c4@x) (if (pair? G31c5@y) (if (eq? (car G31c4@x) (car G31c5@y)) (begin '#f (G2dc8@same-marks? (cdr G31c4@x) (cdr G31c5@y))) '#f) '#f) '#f)))) (if (null? G31c4@x) (begin '#f (null? G31c5@y)) '#f)))) (set! G2dca@bound-id=? (lambda (G31ca@x G31cb@y) (if (eq? (G2dc6@id->sym G31ca@x) (G2dc6@id->sym G31cb@y)) (begin '#f (G2dc8@same-marks? (G2d92@stx-mark* G31ca@x) (G2d92@stx-mark* G31cb@y))) '#f))) (set! G2dcc@free-id=? (lambda (G31ce@i G31cf@j) ((lambda (G31d2@t0 G31d3@t1) (if ((lambda (G31d6@t) (if G31d6@t G31d6@t (begin '#f G31d3@t1))) G31d2@t0) (eq? G31d2@t0 G31d3@t1) (eq? (G2dc6@id->sym G31ce@i) (G2dc6@id->sym G31cf@j)))) (G2de0@id->real-label G31ce@i) (G2de0@id->real-label G31cf@j)))) (set! G2dce@valid-bound-ids? (lambda (G31d8@id*) (if (for-all G2dc4@id? G31d8@id*) (begin '#f (G2dd0@distinct-bound-ids? G31d8@id*)) '#f))) (set! G2dd0@distinct-bound-ids? (lambda (G31da@id*) ((lambda (G31dc@t) (if G31dc@t G31dc@t (begin '#f (if (not (G2dd2@bound-id-member? (car G31da@id*) (cdr G31da@id*))) (begin '#f (G2dd0@distinct-bound-ids? (cdr G31da@id*))) '#f)))) (null? G31da@id*)))) (set! G2dd2@bound-id-member? (lambda (G31de@id G31df@id*) (if (pair? G31df@id*) (begin '#f ((lambda (G31e2@t) (if G31e2@t G31e2@t (begin '#f (G2dd2@bound-id-member? G31de@id (cdr G31df@id*))))) (G2dca@bound-id=? G31de@id (car G31df@id*)))) '#f))) (set! G2dd4@self-evaluating? (lambda (G31e4@x) ((lambda (G31e6@t) (if G31e6@t G31e6@t ((lambda (G31e8@t) (if G31e8@t G31e8@t ((lambda (G31ea@t) (if G31ea@t G31ea@t ((lambda (G31ec@t) (if G31ec@t G31ec@t ((lambda (G31ee@t) (if G31ee@t G31ee@t (begin '#f (bytevector? G31e4@x)))) (regexp? G31e4@x)))) (boolean? G31e4@x)))) (char? G31e4@x)))) (string? G31e4@x)))) (number? G31e4@x)))) (set! G2dd6@strip-annotations (lambda (G31f0@x) (if (pair? G31f0@x) (cons (G2dd6@strip-annotations (car G31f0@x)) (G2dd6@strip-annotations (cdr G31f0@x))) (if (vector? G31f0@x) (vector-map G2dd6@strip-annotations G31f0@x) (if (G295b@G2889@annotation? G31f0@x) (G295a@G2887@annotation-stripped G31f0@x) G31f0@x))))) (set! G2dd8@strip (lambda (G31f2@x G31f3@m*) (if (G2d3e@top-marked? G31f3@m*) (if ((lambda (G31f6@t) (if G31f6@t G31f6@t ((lambda (G31f8@t) (if G31f8@t G31f8@t (begin '#f (if (vector? G31f2@x) (if (> (vector-length G31f2@x) '0) (begin '#f (G295b@G2889@annotation? (vector-ref G31f2@x '0))) '#f) '#f)))) (if (pair? G31f2@x) (begin '#f (G295b@G2889@annotation? (car G31f2@x))) '#f)))) (G295b@G2889@annotation? G31f2@x)) (G2dd6@strip-annotations G31f2@x) G31f2@x) ((letrec ((G31fa@f (lambda (G31fc@x) (if (G2d8c@stx? G31fc@x) (G2dd8@strip (G2d90@stx-expr G31fc@x) (G2d92@stx-mark* G31fc@x)) (if (G295b@G2889@annotation? G31fc@x) (G295a@G2887@annotation-stripped G31fc@x) (if (pair? G31fc@x) ((lambda (G31fe@a G31ff@d) (if (if (eq? G31fe@a (car G31fc@x)) (begin '#f (eq? G31ff@d (cdr G31fc@x))) '#f) G31fc@x (cons G31fe@a G31ff@d))) (G31fa@f (car G31fc@x)) (G31fa@f (cdr G31fc@x))) (if (vector? G31fc@x) ((lambda (G3202@old) ((lambda (G3204@new) (if (for-all eq? G3202@old G3204@new) G31fc@x (list->vector G3204@new))) (map G31fa@f G3202@old))) (vector->list G31fc@x)) G31fc@x))))))) G31fa@f) G31f2@x)))) (set! G2dda@stx->datum (lambda (G3206@x) (G2dd8@strip G3206@x '()))) (set! G2ddc@same-marks*? (lambda (G3208@mark* G3209@mark** G320a@si) (if (null? G320a@si) '#f (if (G2dc8@same-marks? G3208@mark* (vector-ref G3209@mark** (car G320a@si))) (car G320a@si) (G2ddc@same-marks*? G3208@mark* G3209@mark** (cdr G320a@si)))))) (set! G2dde@id->label (lambda (G320e@id) ((lambda (G3210@t) (if G3210@t G3210@t (begin '#f ((lambda (G3212@t) (if G3212@t ((lambda (G3214@env) ((lambda (G3216@rib) (call-with-values (lambda () (G2d48@gen-define-label+loc G320e@id G3216@rib)) (lambda (G321a@G3218 G321b@G3219) ((lambda (G321e@loc_ G321f@lab) (begin (G2d75@extend-rib! G3216@rib G320e@id G321f@lab) G321f@lab)) G321b@G3219 G321a@G3218)))) (G306c@interaction-env-rib G3214@env))) G3212@t) '#f)) (G30bc@top-level-context))))) (G2de0@id->real-label G320e@id)))) (set! G2de0@id->real-label (lambda (G3222@id) ((lambda (G3224@sym) ((letrec ((G3226@search (lambda (G3228@subst* G3229@mark*) (if (null? G3228@subst*) '#f (if (eq? (car G3228@subst*) 'shift) (G3226@search (cdr G3228@subst*) (cdr G3229@mark*)) ((lambda (G322c@rib) ((lambda (G322e@t) (if G322e@t ((lambda (G3230@ht) ((lambda (G3232@si) ((lambda (G3234@i) (if G3234@i (vector-ref (G2d5f@rib-label* G322c@rib) G3234@i) (G3226@search (cdr G3228@subst*) G3229@mark*))) (if G3232@si (begin '#f (G2ddc@same-marks*? G3229@mark* (G2d5d@rib-mark** G322c@rib) (reverse G3232@si))) '#f))) (hashtable-ref G3230@ht G3224@sym '#f))) G322e@t) ((lambda (G3236@t) (if G3236@t G3236@t (begin '#f ((letrec ((G3238@f (lambda (G323a@sym* G323b@mark** G323c@label*) (if (null? G323a@sym*) (G3226@search (cdr G3228@subst*) G3229@mark*) (if (if (eq? (car G323a@sym*) G3224@sym) (begin '#f (G2dc8@same-marks? (car G323b@mark**) G3229@mark*)) '#f) (car G323c@label*) (G3238@f (cdr G323a@sym*) (cdr G323b@mark**) (cdr G323c@label*))))))) G3238@f) (G2d5b@rib-sym* G322c@rib) (G2d5d@rib-mark** G322c@rib) (G2d5f@rib-label* G322c@rib))))) (G2d73@find-label G322c@rib G3224@sym G3229@mark*)))) (G2d61@rib-sealed/freq G322c@rib))) (car G3228@subst*))))))) G3226@search) (G2d94@stx-subst* G3222@id) (G2d92@stx-mark* G3222@id))) (G2dc6@id->sym G3222@id)))) (set! G2de2@label->binding (lambda (G3240@x G3241@r) ((lambda (G3244@t) (if G3244@t ((lambda (G3246@b) (if (if (pair? G3246@b) (begin '#f (eq? (car G3246@b) '$core-rtd)) '#f) (cons '$rtd (map G2f77@bless (cdr G3246@b))) (if (if (pair? G3246@b) (begin '#f (eq? (car G3246@b) 'global-rtd)) '#f) ((lambda (G3248@lib G3249@loc) (cons '$rtd (symbol-value G3249@loc))) (cadr G3246@b) (cddr G3246@b)) G3246@b))) G3244@t) ((lambda (G324c@t) (if G324c@t (cdr G324c@t) ((lambda (G324e@t) (if G324e@t ((lambda (G3250@env) ((lambda (G3252@t) (if G3252@t ((lambda (G3254@p) (cons* 'lexical (cdr G3254@p) '#f)) G3252@t) '(displaced-lexical . #f))) (assq G3240@x (G3070@interaction-env-locs G3250@env)))) G324e@t) '(displaced-lexical . #f))) (G30bc@top-level-context)))) (assq G3240@x G3241@r)))) (G2bf4@G2a8a@imported-label->binding G3240@x)))) (set! G2de4@make-binding cons) (set! G2de6@binding-type car) (set! G2de8@binding-value cdr) (set! G2dea@raise-unbound-error (lambda (G3256@id) (G30ac@syntax-violation* '#f '"unbound identifier" G3256@id (G4b86@G4b02@make-undefined-violation)))) (set! G2dec@syntax-type (lambda (G3258@e G3259@r) (if (G2dc4@id? G3258@e) ((lambda (G325c@id) ((lambda (G325e@label) ((lambda (G3260@b) ((lambda (G3262@type) ((lambda () (begin (if (not G325e@label) (G2dea@raise-unbound-error G325c@id) (void)) ((lambda (G3264@t) (if (memv G3264@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3262@type (G2de8@binding-value G3260@b) G325c@id) (values 'other '#f '#f))) G3262@type))))) (G2de6@binding-type G3260@b))) (G2de2@label->binding G325e@label G3259@r))) (G2dde@id->label G325c@id))) G3258@e) (if (G2db6@syntax-pair? G3258@e) ((lambda (G3266@id) (if (G2dc4@id? G3266@id) ((lambda (G3268@label) ((lambda (G326a@b) ((lambda (G326c@type) ((lambda () (begin (if (not G3268@label) (G2dea@raise-unbound-error G3266@id) (void)) ((lambda (G326e@t) (if (memv G326e@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G326c@type (G2de8@binding-value G326a@b) G3266@id) (values 'call '#f '#f))) G326c@type))))) (G2de6@binding-type G326a@b))) (G2de2@label->binding G3268@label G3259@r))) (G2dde@id->label G3266@id)) (values 'call '#f '#f))) (G2dbe@syntax-car G3258@e)) ((lambda (G3270@d) (if (G2dd4@self-evaluating? G3270@d) (values 'constant G3270@d '#f) (values 'other '#f '#f))) (G2dda@stx->datum G3258@e)))))) (set! G2dfc@sanitize-binding (lambda (G3272@x G3273@src) (if (procedure? G3272@x) (cons* 'local-macro G3272@x G3273@src) (if (if (pair? G3272@x) (if (eq? (car G3272@x) 'macro!) (begin '#f (procedure? (cdr G3272@x))) '#f) '#f) (cons* 'local-macro! (cdr G3272@x) G3273@src) (if (if (pair? G3272@x) (begin '#f (eq? (car G3272@x) '$rtd)) '#f) G3272@x (assertion-violation 'expand '"invalid transformer" G3272@x)))))) (set! G2dfe@make-variable-transformer (lambda (G3276@x) (if (procedure? G3276@x) (cons 'macro! G3276@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3276@x)))) (set! G2e00@variable-transformer? (lambda (G3278@x) (if (pair? G3278@x) (if (eq? (car G3278@x) 'macro!) (begin '#f (procedure? (cdr G3278@x))) '#f) '#f))) (set! G2e02@variable-transformer-procedure (lambda (G327a@x) (if (G2e00@variable-transformer? G327a@x) (cdr G327a@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G327a@x)))) (set! G2e04@make-eval-transformer (lambda (G327c@x) (G2dfc@sanitize-binding (eval-core (G29be@G2972@expanded->core G327c@x)) G327c@x))) (set! G2f49@parse-define (lambda (G327e@x) ((lambda (G3280@t) ((lambda (G3282@ls/false) (if (if G3282@ls/false (begin '#f (apply (lambda (G3284@id G3285@fmls G3286@b G3287@b*) (G2dc4@id? G3284@id)) G3282@ls/false)) '#f) (apply (lambda (G328c@id G328d@fmls G328e@b G328f@b*) (begin (G2fe9@verify-formals G328d@fmls G327e@x) (values G328c@id (cons 'defun (cons G328d@fmls (cons G328e@b G328f@b*)))))) G3282@ls/false) ((lambda (G3294@t) ((lambda (G3296@ls/false) (if (if G3296@ls/false (begin '#f (apply (lambda (G3298@id G3299@val) (G2dc4@id? G3298@id)) G3296@ls/false)) '#f) (apply (lambda (G329c@id G329d@val) (values G329c@id (cons 'expr G329d@val))) G3296@ls/false) ((lambda (G32a0@t) ((lambda (G32a2@ls/false) (if (if G32a2@ls/false (begin '#f (apply (lambda (G32a4@id) (G2dc4@id? G32a4@id)) G32a2@ls/false)) '#f) (apply (lambda (G32a6@id) (values G32a6@id (cons 'expr (G2f77@bless '(void))))) G32a2@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G32a0@t))) (G2fc1@syntax-dispatch G32a0@t '(_ any)))) G3294@t))) (G2fc1@syntax-dispatch G3294@t '(_ any any)))) G3280@t))) (G2fc1@syntax-dispatch G3280@t '(_ (any . any) any . each-any)))) G327e@x))) (set! G2f4b@parse-define-syntax (lambda (G32a8@x) ((lambda (G32aa@t) ((lambda (G32ac@ls/false) (if (if G32ac@ls/false (begin '#f (apply (lambda (G32ae@id G32af@val) (G2dc4@id? G32ae@id)) G32ac@ls/false)) '#f) (apply (lambda (G32b2@id G32b3@val) (values G32b2@id G32b3@val)) G32ac@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G32aa@t))) (G2fc1@syntax-dispatch G32aa@t '(_ any any)))) G32a8@x))) (set! G2f4d@scheme-stx-hashtable (make-eq-hashtable)) (set! G2f4f@scheme-stx (lambda (G32b6@sym) ((lambda (G32b8@t) (if G32b8@t G32b8@t (begin '#f ((lambda (G32ba@subst) ((lambda (G32bc@stx) ((lambda (G32be@stx) ((lambda () (begin (hashtable-set! G2f4d@scheme-stx-hashtable G32b6@sym G32be@stx) G32be@stx)))) ((lambda (G32c0@t) (if G32c0@t ((lambda (G32c2@x) ((lambda (G32c4@name G32c5@label) (G2db0@add-subst (G2d59@make-rib (list G32c4@name) (list G2d3c@top-mark*) (list G32c5@label) '#f '#f) G32bc@stx)) (car G32c2@x) (cdr G32c2@x))) G32c0@t) G32bc@stx)) (assq G32b6@sym G32ba@subst)))) (G2d8e@make-stx G32b6@sym G2d3c@top-mark* '() '()))) (G2bca@G2a36@library-subst (G2bee@G2a7e@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G2f4d@scheme-stx-hashtable G32b6@sym '#f)))) (set! G2f51@lexical-var car) (set! G2f53@lexical-mutable? cdr) (set! G2f55@set-lexical-mutable! set-cdr!) (set! G2f57@add-lexical (lambda (G32c8@lab G32c9@lex G32ca@r) (cons (cons* G32c8@lab 'lexical G32c9@lex '#f) G32ca@r))) (set! G2f59@add-lexicals (lambda (G32ce@lab* G32cf@lex* G32d0@r) (if (null? G32ce@lab*) G32d0@r (G2f59@add-lexicals (cdr G32ce@lab*) (cdr G32cf@lex*) (G2f57@add-lexical (car G32ce@lab*) (car G32cf@lex*) G32d0@r))))) (set! G2f5b@letrec-helper (lambda (G32d4@e G32d5@r G32d6@mr G32d7@build) ((lambda (G32dc@t) ((lambda (G32de@ls/false) (if G32de@ls/false (apply (lambda (G32e0@lhs* G32e1@rhs* G32e2@b G32e3@b*) (if (not (G2dce@valid-bound-ids? G32e0@lhs*)) (G2f7b@invalid-fmls-error G32d4@e G32e0@lhs*) ((lambda (G32e8@lex* G32e9@lab*) ((lambda (G32ec@rib G32ed@r) ((lambda (G32f0@body G32f1@rhs*) (G32d7@build '#f G32e8@lex* G32f1@rhs* G32f0@body)) (G2ffb@chi-internal (G2db0@add-subst G32ec@rib (cons G32e2@b G32e3@b*)) G32ed@r G32d6@mr) (G2fe1@chi-expr* (map (lambda (G32f4@x) (G2db0@add-subst G32ec@rib G32f4@x)) G32e1@rhs*) G32ed@r G32d6@mr))) (G2d7f@make-full-rib G32e0@lhs* G32e9@lab*) (G2f59@add-lexicals G32e9@lab* G32e8@lex* G32d5@r))) (map G2d40@gen-lexical G32e0@lhs*) (map G2d44@gen-label G32e0@lhs*)))) G32de@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G32dc@t))) (G2fc1@syntax-dispatch G32dc@t '(_ #(each (any any)) any . each-any)))) G32d4@e))) (set! G2f5d@letrec-transformer (lambda (G32f6@e G32f7@r G32f8@mr) (G2f5b@letrec-helper G32f6@e G32f7@r G32f8@mr G2d25@G2c98@build-letrec))) (set! G2f5f@letrec*-transformer (lambda (G32fc@e G32fd@r G32fe@mr) (G2f5b@letrec-helper G32fc@e G32fd@r G32fe@mr G2d26@G2c9a@build-letrec*))) (set! G2f61@fluid-let-syntax-transformer (lambda (G3302@e G3303@r G3304@mr) ((lambda (G3309@lookup) (begin (set! G3309@lookup (lambda (G331c@x) ((lambda (G331e@t) (if G331e@t G331e@t (begin '#f (G30ae@syntax-violation '#f '"unbound identifier" G3302@e G331c@x)))) (G2dde@id->label G331c@x)))) ((lambda (G330a@t) ((lambda (G330c@ls/false) (if G330c@ls/false (apply (lambda (G330e@lhs* G330f@rhs* G3310@b G3311@b*) (if (not (G2dce@valid-bound-ids? G330e@lhs*)) (G2f7b@invalid-fmls-error G3302@e G330e@lhs*) ((lambda (G3316@lab* G3317@rhs*) (G2ffb@chi-internal (cons G3310@b G3311@b*) (append (map cons G3316@lab* G3317@rhs*) G3303@r) (append (map cons G3316@lab* G3317@rhs*) G3304@mr))) (map G3309@lookup G330e@lhs*) (map (lambda (G331a@x) (G2e04@make-eval-transformer (G3020@expand-transformer G331a@x G3304@mr))) G330f@rhs*)))) G330c@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G330a@t))) (G2fc1@syntax-dispatch G330a@t '(_ #(each (any any)) any . each-any)))) G3302@e))) '#f))) (set! G2f63@type-descriptor-transformer (lambda (G3320@e G3321@r G3322@mr) ((lambda (G3326@t) ((lambda (G3328@ls/false) (if (if G3328@ls/false (begin '#f (apply (lambda (G332a@id) (G2dc4@id? G332a@id)) G3328@ls/false)) '#f) (apply (lambda (G332c@id) ((lambda (G332e@lab) ((lambda (G3330@b) ((lambda (G3332@type) ((lambda () (begin (if (not G332e@lab) (G2dea@raise-unbound-error G332c@id) (void)) (if (not (if (eq? G3332@type '$rtd) (begin '#f (not (list? (G2de8@binding-value G3330@b)))) '#f)) (G30ae@syntax-violation '#f '"not a record type" G3320@e) (void)) (list 'quote (G2de8@binding-value G3330@b)))))) (G2de6@binding-type G3330@b))) (G2de2@label->binding G332e@lab G3321@r))) (G2dde@id->label G332c@id))) G3328@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3326@t))) (G2fc1@syntax-dispatch G3326@t '(_ any)))) G3320@e))) (set! G2f65@record-type-descriptor-transformer (lambda (G3334@e G3335@r G3336@mr) ((lambda (G333a@t) ((lambda (G333c@ls/false) (if (if G333c@ls/false (begin '#f (apply (lambda (G333e@id) (G2dc4@id? G333e@id)) G333c@ls/false)) '#f) (apply (lambda (G3340@id) ((lambda (G3342@lab) ((lambda (G3344@b) ((lambda (G3346@type) ((lambda () (begin (if (not G3342@lab) (G2dea@raise-unbound-error G3340@id) (void)) (if (not (if (eq? G3346@type '$rtd) (begin '#f (list? (G2de8@binding-value G3344@b))) '#f)) (G30ae@syntax-violation '#f '"not a record type" G3334@e) (void)) (G2fe5@chi-expr (car (G2de8@binding-value G3344@b)) G3335@r G3336@mr))))) (G2de6@binding-type G3344@b))) (G2de2@label->binding G3342@lab G3335@r))) (G2dde@id->label G3340@id))) G333c@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G333a@t))) (G2fc1@syntax-dispatch G333a@t '(_ any)))) G3334@e))) (set! G2f67@record-constructor-descriptor-transformer (lambda (G3348@e G3349@r G334a@mr) ((lambda (G334e@t) ((lambda (G3350@ls/false) (if (if G3350@ls/false (begin '#f (apply (lambda (G3352@id) (G2dc4@id? G3352@id)) G3350@ls/false)) '#f) (apply (lambda (G3354@id) ((lambda (G3356@lab) ((lambda (G3358@b) ((lambda (G335a@type) ((lambda () (begin (if (not G3356@lab) (G2dea@raise-unbound-error G3354@id) (void)) (if (not (if (eq? G335a@type '$rtd) (begin '#f (list? (G2de8@binding-value G3358@b))) '#f)) (G30ae@syntax-violation '#f '"invalid type" G3348@e) (void)) (G2fe5@chi-expr (cadr (G2de8@binding-value G3358@b)) G3349@r G334a@mr))))) (G2de6@binding-type G3358@b))) (G2de2@label->binding G3356@lab G3349@r))) (G2dde@id->label G3354@id))) G3350@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G334e@t))) (G2fc1@syntax-dispatch G334e@t '(_ any)))) G3348@e))) (set! G2f69@when-macro (lambda (G335c@e) ((lambda (G335e@t) ((lambda (G3360@ls/false) (if G3360@ls/false (apply (lambda (G3362@test G3363@e G3364@e*) (G2f77@bless (list 'if G3362@test (cons 'begin (cons G3363@e G3364@e*))))) G3360@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G335e@t))) (G2fc1@syntax-dispatch G335e@t '(_ any any . each-any)))) G335c@e))) (set! G2f6b@unless-macro (lambda (G3368@e) ((lambda (G336a@t) ((lambda (G336c@ls/false) (if G336c@ls/false (apply (lambda (G336e@test G336f@e G3370@e*) (G2f77@bless (list 'if (list 'not G336e@test) (cons 'begin (cons G336f@e G3370@e*))))) G336c@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G336a@t))) (G2fc1@syntax-dispatch G336a@t '(_ any any . each-any)))) G3368@e))) (set! G2f6d@if-transformer (lambda (G3374@e G3375@r G3376@mr) ((lambda (G337a@t) ((lambda (G337c@ls/false) (if G337c@ls/false (apply (lambda (G337e@e0 G337f@e1 G3380@e2) (list 'if (G2fe5@chi-expr G337e@e0 G3375@r G3376@mr) (G2fe5@chi-expr G337f@e1 G3375@r G3376@mr) (G2fe5@chi-expr G3380@e2 G3375@r G3376@mr))) G337c@ls/false) ((lambda (G3384@t) ((lambda (G3386@ls/false) (if G3386@ls/false (apply (lambda (G3388@e0 G3389@e1) (list 'if (G2fe5@chi-expr G3388@e0 G3375@r G3376@mr) (G2fe5@chi-expr G3389@e1 G3375@r G3376@mr) (G2d24@G2c96@build-void))) G3386@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3384@t))) (G2fc1@syntax-dispatch G3384@t '(_ any any)))) G337a@t))) (G2fc1@syntax-dispatch G337a@t '(_ any any any)))) G3374@e))) (set! G2f6f@case-macro (lambda (G338c@e) ((lambda (G338f@build-last G3391@build-one) (begin (set! G338f@build-last (lambda (G33b6@cls) ((lambda (G33b8@t) ((lambda (G33ba@ls/false) (if G33ba@ls/false (apply (lambda (G33bc@e G33bd@e*) (cons 'begin (cons G33bc@e G33bd@e*))) G33ba@ls/false) ((lambda (G33c0@t) ((lambda (G33c2@ls/false) (if G33c2@ls/false (apply (lambda () (G3391@build-one G33b6@cls '(if #f #f))) G33c2@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G33c0@t))) (G2fc1@syntax-dispatch G33c0@t '_))) G33b8@t))) (G2fc1@syntax-dispatch G33b8@t '(#(scheme-id else) any . each-any)))) G33b6@cls))) (set! G3391@build-one (lambda (G33a8@cls G33a9@k) ((lambda (G33ac@t) ((lambda (G33ae@ls/false) (if G33ae@ls/false (apply (lambda (G33b0@d* G33b1@e G33b2@e*) (list 'if (list 'memv 't (list 'quote G33b0@d*)) (cons 'begin (cons G33b1@e G33b2@e*)) G33a9@k)) G33ae@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G33ac@t))) (G2fc1@syntax-dispatch G33ac@t '(each-any any . each-any)))) G33a8@cls))) ((lambda (G3392@t) ((lambda (G3394@ls/false) (if G3394@ls/false (apply (lambda (G3396@expr) (G2f77@bless (cons 'let (cons (list (list 't G3396@expr)) '((if #f #f)))))) G3394@ls/false) ((lambda (G3398@t) ((lambda (G339a@ls/false) (if G339a@ls/false (apply (lambda (G339c@expr G339d@cls G339e@cls*) (G2f77@bless (list 'let (list (list 't G339c@expr)) ((letrec ((G33a2@f (lambda (G33a4@cls G33a5@cls*) (if (null? G33a5@cls*) (G338f@build-last G33a4@cls) (G3391@build-one G33a4@cls (G33a2@f (car G33a5@cls*) (cdr G33a5@cls*))))))) G33a2@f) G339d@cls G339e@cls*)))) G339a@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3398@t))) (G2fc1@syntax-dispatch G3398@t '(_ any any . each-any)))) G3392@t))) (G2fc1@syntax-dispatch G3392@t '(_ any)))) G338c@e))) '#f '#f))) (set! G2f71@quote-transformer (lambda (G33c4@e G33c5@r G33c6@mr) ((lambda (G33ca@t) ((lambda (G33cc@ls/false) (if G33cc@ls/false (apply (lambda (G33ce@datum) (list 'quote (G2dda@stx->datum G33ce@datum))) G33cc@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G33ca@t))) (G2fc1@syntax-dispatch G33ca@t '(_ any)))) G33c4@e))) (set! G2f73@case-lambda-transformer (lambda (G33d0@e G33d1@r G33d2@mr) ((lambda (G33d6@t) ((lambda (G33d8@ls/false) (if G33d8@ls/false (apply (lambda (G33da@fmls* G33db@b* G33dc@b**) (call-with-values (lambda () (G2fed@chi-lambda-clause* G33d0@e G33da@fmls* (map cons G33db@b* G33dc@b**) G33d1@r G33d2@mr)) (lambda (G33e2@G33e0 G33e3@G33e1) ((lambda (G33e6@body* G33e7@fmls*) (G2d21@G2c60@build-case-lambda '#f G33e7@fmls* G33e6@body*)) G33e3@G33e1 G33e2@G33e0)))) G33d8@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G33d6@t))) (G2fc1@syntax-dispatch G33d6@t '(_ . #(each (any any . each-any)))))) G33d0@e))) (set! G2f75@lambda-transformer (lambda (G33ea@e G33eb@r G33ec@mr) ((lambda (G33f0@t) ((lambda (G33f2@ls/false) (if G33f2@ls/false (apply (lambda (G33f4@fmls G33f5@b G33f6@b*) (call-with-values (lambda () (G2feb@chi-lambda-clause G33ea@e G33f4@fmls (cons G33f5@b G33f6@b*) G33eb@r G33ec@mr)) (lambda (G33fc@G33fa G33fd@G33fb) ((lambda (G3400@body G3401@fmls) (G2d20@G2c5e@build-lambda '#f G3401@fmls G3400@body)) G33fd@G33fb G33fc@G33fa)))) G33f2@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G33f0@t))) (G2fc1@syntax-dispatch G33f0@t '(_ any any . each-any)))) G33ea@e))) (set! G2f77@bless (lambda (G3404@x) (G2dac@mkstx ((letrec ((G3406@f (lambda (G3408@x) (if (G2d8c@stx? G3408@x) G3408@x (if (pair? G3408@x) (cons (G3406@f (car G3408@x)) (G3406@f (cdr G3408@x))) (if (symbol? G3408@x) (G2f4f@scheme-stx G3408@x) (if (vector? G3408@x) (vector-map G3406@f G3408@x) G3408@x))))))) G3406@f) G3404@x) '() '() '()))) (set! G2f79@with-syntax-macro (lambda (G340a@e) ((lambda (G340c@t) ((lambda (G340e@ls/false) (if G340e@ls/false (apply (lambda (G3410@pat* G3411@expr* G3412@b G3413@b*) ((lambda (G3418@idn*) (begin (G2fe9@verify-formals (map car G3418@idn*) G340a@e) ((lambda (G341a@t*) (G2f77@bless (list 'let (map list G341a@t* G3411@expr*) ((letrec ((G341c@f (lambda (G341e@pat* G341f@t*) (if (null? G341e@pat*) (cons 'begin (cons '#f (cons G3412@b G3413@b*))) (list 'syntax-case (car G341f@t*) '() (list (car G341e@pat*) (G341c@f (cdr G341e@pat*) (cdr G341f@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G341e@pat*)) (car G341f@t*)))))))) G341c@f) G3410@pat* G341a@t*)))) (G309a@generate-temporaries G3411@expr*)))) ((letrec ((G3422@f (lambda (G3424@pat*) (if (null? G3424@pat*) '() (call-with-values (lambda () (G2fbf@convert-pattern (car G3424@pat*) '())) (lambda (G3428@G3426 G3429@G3427) ((lambda (G342c@idn* G342d@pat) (append G342c@idn* (G3422@f (cdr G3424@pat*)))) G3429@G3427 G3428@G3426))))))) G3422@f) G3410@pat*))) G340e@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G340c@t))) (G2fc1@syntax-dispatch G340c@t '(_ #(each (any any)) any . each-any)))) G340a@e))) (set! G2f7b@invalid-fmls-error (lambda (G3430@stx G3431@fmls) ((lambda (G3434@t) ((lambda (G3436@ls/false) (if G3436@ls/false (apply (lambda (G3438@id* G3439@last) ((letrec ((G343c@f (lambda (G343e@id*) (if (null? G343e@id*) (values) (if (not (G2dc4@id? (car G343e@id*))) (G30ae@syntax-violation '#f '"not an identifier" G3430@stx (car G343e@id*)) (begin (G343c@f (cdr G343e@id*)) (if (G2dd2@bound-id-member? (car G343e@id*) (cdr G343e@id*)) (G30ae@syntax-violation '#f '"duplicate binding" G3430@stx (car G343e@id*)) (void)))))))) G343c@f) (if (G2dc4@id? G3439@last) (cons G3439@last G3438@id*) (if (G2dba@syntax-null? G3439@last) G3438@id* (G30ae@syntax-violation '#f '"not an identifier" G3430@stx G3439@last))))) G3436@ls/false) ((lambda (G3440@t) ((lambda (G3442@ls/false) (if G3442@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"malformed binding form" G3430@stx G3431@fmls)) G3442@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3440@t))) (G2fc1@syntax-dispatch G3440@t '_))) G3434@t))) (G2fc1@syntax-dispatch G3434@t '#(each+ any () any)))) G3431@fmls))) (set! G2f7d@let-macro (lambda (G3444@stx) ((lambda (G3446@t) ((lambda (G3448@ls/false) (if G3448@ls/false (apply (lambda (G344a@lhs* G344b@rhs* G344c@b G344d@b*) (if (G2dce@valid-bound-ids? G344a@lhs*) (G2f77@bless (cons (cons 'lambda (cons G344a@lhs* (cons G344c@b G344d@b*))) G344b@rhs*)) (G2f7b@invalid-fmls-error G3444@stx G344a@lhs*))) G3448@ls/false) ((lambda (G3452@t) ((lambda (G3454@ls/false) (if (if G3454@ls/false (begin '#f (apply (lambda (G3456@f G3457@lhs* G3458@rhs* G3459@b G345a@b*) (G2dc4@id? G3456@f)) G3454@ls/false)) '#f) (apply (lambda (G3460@f G3461@lhs* G3462@rhs* G3463@b G3464@b*) (if (G2dce@valid-bound-ids? G3461@lhs*) (G2f77@bless (cons (list 'letrec (list (list G3460@f (cons 'lambda (cons G3461@lhs* (cons G3463@b G3464@b*))))) G3460@f) G3462@rhs*)) (G2f7b@invalid-fmls-error G3444@stx G3461@lhs*))) G3454@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3452@t))) (G2fc1@syntax-dispatch G3452@t '(_ any #(each (any any)) any . each-any)))) G3446@t))) (G2fc1@syntax-dispatch G3446@t '(_ #(each (any any)) any . each-any)))) G3444@stx))) (set! G2f7f@let-values-macro (lambda (G346a@stx) ((lambda (G346d@rename G346f@rename*) (begin (set! G346d@rename (lambda (G34cf@x G34d0@old* G34d1@new*) (begin (if (not (G2dc4@id? G34cf@x)) (G30ae@syntax-violation '#f '"not an indentifier" G346a@stx G34cf@x) (void)) (if (G2dd2@bound-id-member? G34cf@x G34d0@old*) (G30ae@syntax-violation '#f '"duplicate binding" G346a@stx G34cf@x) (void)) ((lambda (G34d5@y) (values G34d5@y (cons G34cf@x G34d0@old*) (cons G34d5@y G34d1@new*))) (gensym (G30b4@syntax->datum G34cf@x)))))) (set! G346f@rename* (lambda (G34bd@x* G34be@old* G34bf@new*) (if (null? G34bd@x*) (values '() G34be@old* G34bf@new*) (call-with-values (lambda () (G346d@rename (car G34bd@x*) G34be@old* G34bf@new*)) (lambda (G34c3@x G34c4@old* G34c5@new*) (call-with-values (lambda () (G346f@rename* (cdr G34bd@x*) G34c4@old* G34c5@new*)) (lambda (G34c9@x* G34ca@old* G34cb@new*) (values (cons G34c3@x G34c9@x*) G34ca@old* G34cb@new*)))))))) ((lambda (G3470@t) ((lambda (G3472@ls/false) (if G3472@ls/false (apply (lambda (G3474@b G3475@b*) (cons* (G2f77@bless 'let) '() G3474@b G3475@b*)) G3472@ls/false) ((lambda (G3478@t) ((lambda (G347a@ls/false) (if G347a@ls/false (apply (lambda (G347c@lhs* G347d@rhs* G347e@b G347f@b*) (G2f77@bless ((letrec ((G3484@f (lambda (G3486@lhs* G3487@rhs* G3488@old* G3489@new*) (if (null? G3486@lhs*) (cons 'let (cons (map list G3488@old* G3489@new*) (cons G347e@b G347f@b*))) ((lambda (G348e@t) ((lambda (G3490@ls/false) (if G3490@ls/false (apply (lambda (G3492@x*) (call-with-values (lambda () (G346f@rename* G3492@x* G3488@old* G3489@new*)) (lambda (G3497@G3494 G3498@G3495 G3499@G3496) ((lambda (G349d@new* G349e@old* G349f@y*) (list 'call-with-values (list 'lambda '() (car G3487@rhs*)) (list 'lambda G349f@y* (G3484@f (cdr G3486@lhs*) (cdr G3487@rhs*) G349e@old* G349d@new*)))) G3499@G3496 G3498@G3495 G3497@G3494)))) G3490@ls/false) ((lambda (G34a3@t) ((lambda (G34a5@ls/false) (if G34a5@ls/false (apply (lambda (G34a7@x* G34a8@x) (call-with-values (lambda () (G346d@rename G34a8@x G3488@old* G3489@new*)) (lambda (G34ab@y G34ac@old* G34ad@new*) (call-with-values (lambda () (G346f@rename* G34a7@x* G34ac@old* G34ad@new*)) (lambda (G34b1@y* G34b2@old* G34b3@new*) (list 'call-with-values (list 'lambda '() (car G3487@rhs*)) (list 'lambda (append G34b1@y* G34ab@y) (G3484@f (cdr G3486@lhs*) (cdr G3487@rhs*) G34b2@old* G34b3@new*)))))))) G34a5@ls/false) ((lambda (G34b7@t) ((lambda (G34b9@ls/false) (if G34b9@ls/false (apply (lambda (G34bb@others) (G30ae@syntax-violation '#f '"malformed bindings" G346a@stx G34bb@others)) G34b9@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G34b7@t))) (G2fc1@syntax-dispatch G34b7@t 'any))) G34a3@t))) (G2fc1@syntax-dispatch G34a3@t '#(each+ any () any)))) G348e@t))) (G2fc1@syntax-dispatch G348e@t 'each-any))) (car G3486@lhs*)))))) G3484@f) G347c@lhs* G347d@rhs* '() '()))) G347a@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3478@t))) (G2fc1@syntax-dispatch G3478@t '(_ #(each (any any)) any . each-any)))) G3470@t))) (G2fc1@syntax-dispatch G3470@t '(_ () any . each-any)))) G346a@stx))) '#f '#f))) (set! G2f81@let*-values-macro (lambda (G34d7@stx) ((lambda (G34da@check) (begin (set! G34da@check (lambda (G3509@x*) (if (not (null? G3509@x*)) ((lambda (G350b@x) (begin (if (not (G2dc4@id? G350b@x)) (G30ae@syntax-violation '#f '"not an identifier" G34d7@stx G350b@x) (void)) (G34da@check (cdr G3509@x*)) (if (G2dd2@bound-id-member? G350b@x (cdr G3509@x*)) (G30ae@syntax-violation '#f '"duplicate identifier" G34d7@stx G350b@x) (void)))) (car G3509@x*)) (void)))) ((lambda (G34db@t) ((lambda (G34dd@ls/false) (if G34dd@ls/false (apply (lambda (G34df@b G34e0@b*) (cons* (G2f77@bless 'let) '() G34df@b G34e0@b*)) G34dd@ls/false) ((lambda (G34e3@t) ((lambda (G34e5@ls/false) (if G34e5@ls/false (apply (lambda (G34e7@lhs* G34e8@rhs* G34e9@b G34ea@b*) (G2f77@bless ((letrec ((G34ef@f (lambda (G34f1@lhs* G34f2@rhs*) (if (null? G34f1@lhs*) (cons 'begin (cons G34e9@b G34ea@b*)) ((lambda (G34f5@t) ((lambda (G34f7@ls/false) (if G34f7@ls/false (apply (lambda (G34f9@x*) (begin (G34da@check G34f9@x*) (list 'call-with-values (list 'lambda '() (car G34f2@rhs*)) (list 'lambda G34f9@x* (G34ef@f (cdr G34f1@lhs*) (cdr G34f2@rhs*)))))) G34f7@ls/false) ((lambda (G34fb@t) ((lambda (G34fd@ls/false) (if G34fd@ls/false (apply (lambda (G34ff@x* G3500@x) (begin (G34da@check (cons G3500@x G34ff@x*)) (list 'call-with-values (list 'lambda '() (car G34f2@rhs*)) (list 'lambda (append G34ff@x* G3500@x) (G34ef@f (cdr G34f1@lhs*) (cdr G34f2@rhs*)))))) G34fd@ls/false) ((lambda (G3503@t) ((lambda (G3505@ls/false) (if G3505@ls/false (apply (lambda (G3507@others) (G30ae@syntax-violation '#f '"malformed bindings" G34d7@stx G3507@others)) G3505@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3503@t))) (G2fc1@syntax-dispatch G3503@t 'any))) G34fb@t))) (G2fc1@syntax-dispatch G34fb@t '#(each+ any () any)))) G34f5@t))) (G2fc1@syntax-dispatch G34f5@t 'each-any))) (car G34f1@lhs*)))))) G34ef@f) G34e7@lhs* G34e8@rhs*))) G34e5@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G34e3@t))) (G2fc1@syntax-dispatch G34e3@t '(_ #(each (any any)) any . each-any)))) G34db@t))) (G2fc1@syntax-dispatch G34db@t '(_ () any . each-any)))) G34d7@stx))) '#f))) (set! G2f83@trace-lambda-macro (lambda (G350d@stx) ((lambda (G350f@t) ((lambda (G3511@ls/false) (if G3511@ls/false (apply (lambda (G3513@who G3514@fmls G3515@b G3516@b*) (if (G2dce@valid-bound-ids? G3514@fmls) (G2f77@bless (list 'make-traced-procedure (list 'quote G3513@who) (cons 'lambda (cons G3514@fmls (cons G3515@b G3516@b*))))) (G2f7b@invalid-fmls-error G350d@stx G3514@fmls))) G3511@ls/false) ((lambda (G351b@t) ((lambda (G351d@ls/false) (if G351d@ls/false (apply (lambda (G351f@who G3520@fmls G3521@last G3522@b G3523@b*) (if (G2dce@valid-bound-ids? (cons G3521@last G3520@fmls)) (G2f77@bless (list 'make-traced-procedure (list 'quote G351f@who) (cons 'lambda (cons (append G3520@fmls G3521@last) (cons G3522@b G3523@b*))))) (G2f7b@invalid-fmls-error G350d@stx (append G3520@fmls G3521@last)))) G351d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G351b@t))) (G2fc1@syntax-dispatch G351b@t '(_ any #(each+ any () any) any . each-any)))) G350f@t))) (G2fc1@syntax-dispatch G350f@t '(_ any each-any any . each-any)))) G350d@stx))) (set! G2f85@trace-define-macro (lambda (G3529@stx) ((lambda (G352b@t) ((lambda (G352d@ls/false) (if G352d@ls/false (apply (lambda (G352f@who G3530@fmls G3531@b G3532@b*) (if (G2dce@valid-bound-ids? G3530@fmls) (G2f77@bless (list 'define G352f@who (list 'make-traced-procedure (list 'quote G352f@who) (cons 'lambda (cons G3530@fmls (cons G3531@b G3532@b*)))))) (G2f7b@invalid-fmls-error G3529@stx G3530@fmls))) G352d@ls/false) ((lambda (G3537@t) ((lambda (G3539@ls/false) (if G3539@ls/false (apply (lambda (G353b@who G353c@fmls G353d@last G353e@b G353f@b*) (if (G2dce@valid-bound-ids? (cons G353d@last G353c@fmls)) (G2f77@bless (list 'define G353b@who (list 'make-traced-procedure (list 'quote G353b@who) (cons 'lambda (cons (append G353c@fmls G353d@last) (cons G353e@b G353f@b*)))))) (G2f7b@invalid-fmls-error G3529@stx (append G353c@fmls G353d@last)))) G3539@ls/false) ((lambda (G3545@t) ((lambda (G3547@ls/false) (if G3547@ls/false (apply (lambda (G3549@who G354a@expr) (if (G2dc4@id? G3549@who) (G2f77@bless (list 'define G3549@who (list 'let (list (list 'v G354a@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G3549@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G30ae@syntax-violation '#f '"invalid name" G3529@stx))) G3547@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3545@t))) (G2fc1@syntax-dispatch G3545@t '(_ any any)))) G3537@t))) (G2fc1@syntax-dispatch G3537@t '(_ (any . #(each+ any () any)) any . each-any)))) G352b@t))) (G2fc1@syntax-dispatch G352b@t '(_ (any . each-any) any . each-any)))) G3529@stx))) (set! G2f87@trace-define-syntax-macro (lambda (G354d@stx) ((lambda (G354f@t) ((lambda (G3551@ls/false) (if G3551@ls/false (apply (lambda (G3553@who G3554@expr) (if (G2dc4@id? G3553@who) (G2f77@bless (list 'define-syntax G3553@who (list 'make-traced-macro (list 'quote G3553@who) G3554@expr))) (G30ae@syntax-violation '#f '"invalid name" G354d@stx))) G3551@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G354f@t))) (G2fc1@syntax-dispatch G354f@t '(_ any any)))) G354d@stx))) (set! G2f89@trace-let/rec-syntax (lambda (G3557@who) (lambda (G3559@stx) ((lambda (G355b@t) ((lambda (G355d@ls/false) (if G355d@ls/false (apply (lambda (G355f@lhs* G3560@rhs* G3561@b G3562@b*) (if (G2dce@valid-bound-ids? G355f@lhs*) ((lambda (G3567@rhs*) (G2f77@bless (cons G3557@who (cons (map list G355f@lhs* G3567@rhs*) (cons G3561@b G3562@b*))))) (map (lambda (G3569@lhs G356a@rhs) (list 'make-traced-macro (list 'quote G3569@lhs) G356a@rhs)) G355f@lhs* G3560@rhs*)) (G2f7b@invalid-fmls-error G3559@stx G355f@lhs*))) G355d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G355b@t))) (G2fc1@syntax-dispatch G355b@t '(_ #(each (any any)) any . each-any)))) G3559@stx)))) (set! G2f8b@trace-let-syntax-macro (G2f89@trace-let/rec-syntax 'let-syntax)) (set! G2f8d@trace-letrec-syntax-macro (G2f89@trace-let/rec-syntax 'letrec-syntax)) (set! G2f8f@guard-macro (lambda (G356d@x) ((lambda (G3570@gen-clauses) (begin (set! G3570@gen-clauses (lambda (G3587@con G3588@outerk G3589@clause*) ((lambda (G358e@f G3590@f*) (begin (set! G358e@f (lambda (G35c1@x G35c2@k) ((lambda (G35c5@t) ((lambda (G35c7@ls/false) (if G35c7@ls/false (apply (lambda (G35c9@e G35ca@p) ((lambda (G35cd@t) (list 'let (list (list G35cd@t G35c9@e)) (list 'if G35cd@t (list G35ca@p G35cd@t) G35c2@k))) (gensym))) G35c7@ls/false) ((lambda (G35cf@t) ((lambda (G35d1@ls/false) (if G35d1@ls/false (apply (lambda (G35d3@e) ((lambda (G35d5@t) (list 'let (list (list G35d5@t G35d3@e)) (list 'if G35d5@t G35d5@t G35c2@k))) (gensym))) G35d1@ls/false) ((lambda (G35d7@t) ((lambda (G35d9@ls/false) (if G35d9@ls/false (apply (lambda (G35db@e G35dc@v G35dd@v*) (list 'if G35db@e (cons 'begin (cons G35dc@v G35dd@v*)) G35c2@k)) G35d9@ls/false) ((lambda (G35e1@t) ((lambda (G35e3@ls/false) (if G35e3@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid guard clause" G35c1@x)) G35e3@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G35e1@t))) (G2fc1@syntax-dispatch G35e1@t '_))) G35d7@t))) (G2fc1@syntax-dispatch G35d7@t '(any any . each-any)))) G35cf@t))) (G2fc1@syntax-dispatch G35cf@t '(any)))) G35c5@t))) (G2fc1@syntax-dispatch G35c5@t '(any #(scheme-id =>) any)))) G35c1@x))) (set! G3590@f* (lambda (G359b@x*) ((lambda (G359d@t) ((lambda (G359f@ls/false) (if G359f@ls/false (apply (lambda () (values (list 'raise G3587@con) '#t)) G359f@ls/false) ((lambda (G35a1@t) ((lambda (G35a3@ls/false) (if G35a3@ls/false (apply (lambda (G35a5@e G35a6@e*) (values (cons 'begin (cons G35a5@e G35a6@e*)) '#f)) G35a3@ls/false) ((lambda (G35a9@t) ((lambda (G35ab@ls/false) (if G35ab@ls/false (apply (lambda (G35ad@cls G35ae@cls*) (call-with-values (lambda () (G3590@f* G35ae@cls*)) (lambda (G35b3@G35b1 G35b4@G35b2) ((lambda (G35b7@g G35b8@e) (values (G358e@f G35ad@cls G35b8@e) G35b7@g)) G35b4@G35b2 G35b3@G35b1)))) G35ab@ls/false) ((lambda (G35bb@t) ((lambda (G35bd@ls/false) (if G35bd@ls/false (apply (lambda (G35bf@others) (G30ae@syntax-violation '#f '"invalid guard clause" G35bf@others)) G35bd@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G35bb@t))) (G2fc1@syntax-dispatch G35bb@t 'any))) G35a9@t))) (G2fc1@syntax-dispatch G35a9@t '(any . any)))) G35a1@t))) (G2fc1@syntax-dispatch G35a1@t '((#(scheme-id else) any . each-any))))) G359d@t))) (G2fc1@syntax-dispatch G359d@t '()))) G359b@x*))) (call-with-values (lambda () (G3590@f* G3589@clause*)) (lambda (G3593@G3591 G3594@G3592) ((lambda (G3597@raisek G3598@code) (if G3597@raisek (list G3588@outerk G3598@code) G3598@code)) G3594@G3592 G3593@G3591))))) '#f '#f))) ((lambda (G3571@t) ((lambda (G3573@ls/false) (if (if G3573@ls/false (begin '#f (apply (lambda (G3575@con G3576@clause* G3577@b G3578@b*) (G2dc4@id? G3575@con)) G3573@ls/false)) '#f) (apply (lambda (G357d@con G357e@clause* G357f@b G3580@b*) ((lambda (G3585@outerk) (G2f77@bless (list 'call/cc (list 'lambda (list G3585@outerk) (list 'with-exception-handler (list 'lambda (list G357d@con) (G3570@gen-clauses G357d@con G3585@outerk G357e@clause*)) (cons 'lambda (cons '() (cons '#f (cons G357f@b G3580@b*))))))))) (gensym))) G3573@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3571@t))) (G2fc1@syntax-dispatch G3571@t '(_ (any . each-any) any . each-any)))) G356d@x))) '#f))) (set! G2f91@define-enumeration-macro (lambda (G35e5@stx) ((lambda (G35e8@set? G35ea@remove-dups) (begin (set! G35e8@set? (lambda (G3601@x) ((lambda (G3603@t) (if G3603@t G3603@t (begin '#f (if (not (memq (car G3601@x) (cdr G3601@x))) (begin '#f (G35e8@set? (cdr G3601@x))) '#f)))) (null? G3601@x)))) (set! G35ea@remove-dups (lambda (G35ff@ls) (if (null? G35ff@ls) '() (cons (car G35ff@ls) (G35ea@remove-dups (remq (car G35ff@ls) (cdr G35ff@ls))))))) ((lambda (G35eb@t) ((lambda (G35ed@ls/false) (if (if G35ed@ls/false (begin '#f (apply (lambda (G35ef@name G35f0@id* G35f1@maker) (if (G2dc4@id? G35ef@name) (if (G2dc4@id? G35f1@maker) (begin '#f (for-all G2dc4@id? G35f0@id*)) '#f) '#f)) G35ed@ls/false)) '#f) (apply (lambda (G35f5@name G35f6@id* G35f7@maker) ((lambda (G35fb@name* G35fc@mk) (G2f77@bless (list 'begin (list 'define G35fc@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G35fb@name*)))) (list 'define-syntax G35f5@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G35fb@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G35f5@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G35f7@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G35f7@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G35fb@name*)) (cons 'syntax-violation (cons (list 'quote G35f7@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G35fc@mk '('(n* ...)))))))))))) (G35ea@remove-dups (G30b4@syntax->datum G35f6@id*)) (gensym))) G35ed@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G35eb@t))) (G2fc1@syntax-dispatch G35eb@t '(_ any each-any any)))) G35e5@stx))) '#f '#f))) (set! G2f93@time-macro (lambda (G3605@stx) ((lambda (G3607@t) ((lambda (G3609@ls/false) (if G3609@ls/false (apply (lambda (G360b@expr) ((lambda (G360d@str) (G2f77@bless (list 'time-it G360d@str (list 'lambda '() G360b@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3611@G360f G3612@G3610) ((lambda (G3615@e G3616@p) (begin (write (G30b4@syntax->datum G360b@expr) G3616@p) (G3615@e))) G3612@G3610 G3611@G360f))))) G3609@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3607@t))) (G2fc1@syntax-dispatch G3607@t '(_ any)))) G3605@stx))) (set! G2f95@delay-macro (lambda (G3619@stx) ((lambda (G361b@t) ((lambda (G361d@ls/false) (if G361d@ls/false (apply (lambda (G361f@expr) (G2f77@bless (list 'make-promise (list 'lambda '() G361f@expr)))) G361d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G361b@t))) (G2fc1@syntax-dispatch G361b@t '(_ any)))) G3619@stx))) (set! G2f97@assert-macro (lambda (G3621@stx) ((lambda (G3623@t) ((lambda (G3625@ls/false) (if G3625@ls/false (apply (lambda (G3627@expr) ((lambda (G3629@pos) (G2f77@bless (list 'unless G3627@expr (list 'assertion-error (list 'quote G3627@expr) (list 'quote G3629@pos))))) ((lambda (G362b@t) (if G362b@t G362b@t (begin '#f (G30a4@expression-position G3627@expr)))) (G30a4@expression-position G3621@stx)))) G3625@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3623@t))) (G2fc1@syntax-dispatch G3623@t '(_ any)))) G3621@stx))) (set! G2f99@endianness-macro (lambda (G362d@stx) ((lambda (G362f@t) ((lambda (G3631@ls/false) (if G3631@ls/false (apply (lambda (G3633@e) ((lambda (G3635@t) (if (memv G3635@t '(little)) (G2f77@bless ''little) (if (memv G3635@t '(big)) (G2f77@bless ''big) (G30ae@syntax-violation '#f '"endianness must be big or little" G362d@stx)))) (G30b4@syntax->datum G3633@e))) G3631@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G362f@t))) (G2fc1@syntax-dispatch G362f@t '(_ any)))) G362d@stx))) (set! G2f9b@identifier-syntax-macro (lambda (G3637@stx) ((lambda (G3639@t) ((lambda (G363b@ls/false) (if G363b@ls/false (apply (lambda (G363d@expr) (G2f77@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G363d@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G363d@expr) '((syntax (e* ...)))))))))) G363b@ls/false) ((lambda (G363f@t) ((lambda (G3641@ls/false) (if (if G3641@ls/false (begin '#f (apply (lambda (G3643@id1 G3644@expr1 G3645@id2 G3646@expr2 G3647@expr3) (if (G2dc4@id? G3643@id1) (if (G2dc4@id? G3645@id2) (begin '#f (G2dc4@id? G3646@expr2)) '#f) '#f)) G3641@ls/false)) '#f) (apply (lambda (G364d@id1 G364e@expr1 G364f@id2 G3650@expr2 G3651@expr3) (G2f77@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G364e@expr1)) (list (list 'set! 'id G3650@expr2) (list 'syntax G3651@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G364e@expr1 '(e* ...))))))))) G3641@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G363f@t))) (G2fc1@syntax-dispatch G363f@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G3639@t))) (G2fc1@syntax-dispatch G3639@t '(_ any)))) G3637@stx))) (set! G2f9d@do-macro (lambda (G3657@stx) ((lambda (G365a@bind) (begin (set! G365a@bind (lambda (G3671@x) ((lambda (G3673@t) ((lambda (G3675@ls/false) (if G3675@ls/false (apply (lambda (G3677@x G3678@init) (list G3677@x G3678@init G3677@x)) G3675@ls/false) ((lambda (G367b@t) ((lambda (G367d@ls/false) (if G367d@ls/false (apply (lambda (G367f@x G3680@init G3681@step) (list G367f@x G3680@init G3681@step)) G367d@ls/false) ((lambda (G3685@t) ((lambda (G3687@ls/false) (if G3687@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid binding" G3657@stx)) G3687@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3685@t))) (G2fc1@syntax-dispatch G3685@t '_))) G367b@t))) (G2fc1@syntax-dispatch G367b@t '(any any any)))) G3673@t))) (G2fc1@syntax-dispatch G3673@t '(any any)))) G3671@x))) ((lambda (G365b@t) ((lambda (G365d@ls/false) (if G365d@ls/false (apply (lambda (G365f@binding* G3660@test G3661@expr* G3662@command*) ((lambda (G3667@t) ((lambda (G3669@ls/false) (if G3669@ls/false (apply (lambda (G366b@x* G366c@init* G366d@step*) (if (G2dce@valid-bound-ids? G366b@x*) (G2f77@bless (list 'letrec (list (list 'loop (list 'lambda G366b@x* (list 'if G3660@test (cons 'begin (cons '(if #f #f) G3661@expr*)) (cons 'begin (append G3662@command* (list (cons 'loop G366d@step*)))))))) (cons 'loop G366c@init*))) (G30ae@syntax-violation '#f '"invalid bindings" G3657@stx))) G3669@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3667@t))) (G2fc1@syntax-dispatch G3667@t '#(each (any any any))))) (map G365a@bind G365f@binding*))) G365d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G365b@t))) (G2fc1@syntax-dispatch G365b@t '(_ each-any (any . each-any) . each-any)))) G3657@stx))) '#f))) (set! G2f9f@let*-macro (lambda (G3689@stx) ((lambda (G368b@t) ((lambda (G368d@ls/false) (if (if G368d@ls/false (begin '#f (apply (lambda (G368f@lhs* G3690@rhs* G3691@b G3692@b*) (for-all G2dc4@id? G368f@lhs*)) G368d@ls/false)) '#f) (apply (lambda (G3697@lhs* G3698@rhs* G3699@b G369a@b*) (G2f77@bless ((letrec ((G369f@f (lambda (G36a1@x*) (if (null? G36a1@x*) (cons 'let (cons '() (cons G3699@b G369a@b*))) (list 'let (list (car G36a1@x*)) (G369f@f (cdr G36a1@x*))))))) G369f@f) (map list G3697@lhs* G3698@rhs*)))) G368d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G368b@t))) (G2fc1@syntax-dispatch G368b@t '(_ #(each (any any)) any . each-any)))) G3689@stx))) (set! G2fa1@or-macro (lambda (G36a3@stx) ((lambda (G36a5@t) ((lambda (G36a7@ls/false) (if G36a7@ls/false (apply (lambda () '#f) G36a7@ls/false) ((lambda (G36a9@t) ((lambda (G36ab@ls/false) (if G36ab@ls/false (apply (lambda (G36ad@e G36ae@e*) (G2f77@bless ((letrec ((G36b1@f (lambda (G36b3@e G36b4@e*) (if (null? G36b4@e*) (list 'begin '#f G36b3@e) (list 'let (list (list 't G36b3@e)) (list 'if 't 't (G36b1@f (car G36b4@e*) (cdr G36b4@e*)))))))) G36b1@f) G36ad@e G36ae@e*))) G36ab@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G36a9@t))) (G2fc1@syntax-dispatch G36a9@t '(_ any . each-any)))) G36a5@t))) (G2fc1@syntax-dispatch G36a5@t '(_)))) G36a3@stx))) (set! G2fa3@and-macro (lambda (G36b7@stx) ((lambda (G36b9@t) ((lambda (G36bb@ls/false) (if G36bb@ls/false (apply (lambda () '#t) G36bb@ls/false) ((lambda (G36bd@t) ((lambda (G36bf@ls/false) (if G36bf@ls/false (apply (lambda (G36c1@e G36c2@e*) (G2f77@bless ((letrec ((G36c5@f (lambda (G36c7@e G36c8@e*) (if (null? G36c8@e*) (list 'begin '#f G36c7@e) (cons 'if (cons G36c7@e (cons (G36c5@f (car G36c8@e*) (cdr G36c8@e*)) '(#f)))))))) G36c5@f) G36c1@e G36c2@e*))) G36bf@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G36bd@t))) (G2fc1@syntax-dispatch G36bd@t '(_ any . each-any)))) G36b9@t))) (G2fc1@syntax-dispatch G36b9@t '(_)))) G36b7@stx))) (set! G2fa5@cond-macro (lambda (G36cb@stx) ((lambda (G36cd@t) ((lambda (G36cf@ls/false) (if G36cf@ls/false (apply (lambda (G36d1@cls G36d2@cls*) (G2f77@bless ((letrec ((G36d5@f (lambda (G36d7@cls G36d8@cls*) (if (null? G36d8@cls*) ((lambda (G36db@t) ((lambda (G36dd@ls/false) (if G36dd@ls/false (apply (lambda (G36df@e G36e0@e*) (cons 'begin (cons G36df@e G36e0@e*))) G36dd@ls/false) ((lambda (G36e3@t) ((lambda (G36e5@ls/false) (if G36e5@ls/false (apply (lambda (G36e7@e G36e8@p) (list 'let (list (list 't G36e7@e)) (list 'if 't (cons G36e8@p '(t))))) G36e5@ls/false) ((lambda (G36eb@t) ((lambda (G36ed@ls/false) (if G36ed@ls/false (apply (lambda (G36ef@e) (cons 'or (cons G36ef@e '((if #f #f))))) G36ed@ls/false) ((lambda (G36f1@t) ((lambda (G36f3@ls/false) (if G36f3@ls/false (apply (lambda (G36f5@e G36f6@e*) (list 'if G36f5@e (cons 'begin G36f6@e*))) G36f3@ls/false) ((lambda (G36f9@t) ((lambda (G36fb@ls/false) (if G36fb@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid last clause" G36cb@stx)) G36fb@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G36f9@t))) (G2fc1@syntax-dispatch G36f9@t '_))) G36f1@t))) (G2fc1@syntax-dispatch G36f1@t '(any . each-any)))) G36eb@t))) (G2fc1@syntax-dispatch G36eb@t '(any)))) G36e3@t))) (G2fc1@syntax-dispatch G36e3@t '(any #(scheme-id =>) any)))) G36db@t))) (G2fc1@syntax-dispatch G36db@t '(#(scheme-id else) any . each-any)))) G36d7@cls) ((lambda (G36fd@t) ((lambda (G36ff@ls/false) (if G36ff@ls/false (apply (lambda (G3701@e G3702@e*) (G30ae@syntax-violation '#f '"incorrect position of keyword else" G36cb@stx)) G36ff@ls/false) ((lambda (G3705@t) ((lambda (G3707@ls/false) (if G3707@ls/false (apply (lambda (G3709@e G370a@p) (list 'let (list (list 't G3709@e)) (list 'if 't (cons G370a@p '(t)) (G36d5@f (car G36d8@cls*) (cdr G36d8@cls*))))) G3707@ls/false) ((lambda (G370d@t) ((lambda (G370f@ls/false) (if G370f@ls/false (apply (lambda (G3711@e) (list 'or G3711@e (G36d5@f (car G36d8@cls*) (cdr G36d8@cls*)))) G370f@ls/false) ((lambda (G3713@t) ((lambda (G3715@ls/false) (if G3715@ls/false (apply (lambda (G3717@e G3718@e*) (list 'if G3717@e (cons 'begin G3718@e*) (G36d5@f (car G36d8@cls*) (cdr G36d8@cls*)))) G3715@ls/false) ((lambda (G371b@t) ((lambda (G371d@ls/false) (if G371d@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid last clause" G36cb@stx)) G371d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G371b@t))) (G2fc1@syntax-dispatch G371b@t '_))) G3713@t))) (G2fc1@syntax-dispatch G3713@t '(any . each-any)))) G370d@t))) (G2fc1@syntax-dispatch G370d@t '(any)))) G3705@t))) (G2fc1@syntax-dispatch G3705@t '(any #(scheme-id =>) any)))) G36fd@t))) (G2fc1@syntax-dispatch G36fd@t '(#(scheme-id else) any . each-any)))) G36d7@cls))))) G36d5@f) G36d1@cls G36d2@cls*))) G36cf@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G36cd@t))) (G2fc1@syntax-dispatch G36cd@t '(_ any . each-any)))) G36cb@stx))) (set! G2fa7@do-include (lambda (G371f@stx G3720@id G3721@filename) ((lambda (G3725@filename) (begin (if (not (if (string? G3725@filename) (begin '#f (G2dc4@id? G3720@id)) '#f)) (G30ae@syntax-violation '#f '"invalid syntax" G371f@stx) (void)) (cons (G2f77@bless 'begin) (with-input-from-file G3725@filename (lambda () ((letrec ((G3727@f (lambda (G3729@ls) ((lambda (G372b@x) (if (eof-object? G372b@x) (reverse G3729@ls) (G3727@f (cons (G2da2@datum->stx G3720@id G372b@x) G3729@ls)))) (G2959@G2885@read-annotated))))) G3727@f) '())))))) (G2dda@stx->datum G3721@filename)))) (set! G2fa9@include-macro (lambda (G372d@e) ((lambda (G372f@t) ((lambda (G3731@ls/false) (if G3731@ls/false (apply (lambda (G3733@id G3734@filename) (G2fa7@do-include G372d@e G3733@id G3734@filename)) G3731@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G372f@t))) (G2fc1@syntax-dispatch G372f@t '(any any)))) G372d@e))) (set! G2fab@include-into-macro (lambda (G3737@e) ((lambda (G3739@t) ((lambda (G373b@ls/false) (if G373b@ls/false (apply (lambda (G373d@id G373e@filename) (G2fa7@do-include G3737@e G373d@id G373e@filename)) G373b@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3739@t))) (G2fc1@syntax-dispatch G3739@t '(_ any any)))) G3737@e))) (set! G2fad@syntax-rules-macro (lambda (G3741@e) ((lambda (G3743@t) ((lambda (G3745@ls/false) (if G3745@ls/false (apply (lambda (G3747@lits G3748@pat* G3749@tmp*) (begin (G2fc7@verify-literals G3747@lits G3741@e) (G2f77@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3747@lits (map (lambda (G374d@pat G374e@tmp) ((lambda (G3751@t) ((lambda (G3753@ls/false) (if G3753@ls/false (apply (lambda (G3755@rest) (list (cons 'g G3755@rest) (list 'syntax G374e@tmp))) G3753@ls/false) ((lambda (G3757@t) ((lambda (G3759@ls/false) (if G3759@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid syntax-rules pattern" G3741@e G374d@pat)) G3759@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3757@t))) (G2fc1@syntax-dispatch G3757@t '_))) G3751@t))) (G2fc1@syntax-dispatch G3751@t '(_ . any)))) G374d@pat)) G3748@pat* G3749@tmp*)))))))) G3745@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3743@t))) (G2fc1@syntax-dispatch G3743@t '(_ each-any . #(each (any any)))))) G3741@e))) (set! G2faf@quasiquote-macro ((lambda () ((lambda (G375c@datum G377a@quasicons* G377c@quasicons G377e@quasiappend G3780@quasivector G3782@vquasi G3784@quasi) (begin (set! G375c@datum (lambda (G385f@x) (list (G2f4f@scheme-stx 'quote) (G2dac@mkstx G385f@x '() '() '())))) (set! G377a@quasicons* (lambda (G3857@x G3858@y) ((letrec ((G385b@f (lambda (G385d@x) (if (null? G385d@x) G3858@y (G377c@quasicons (car G385d@x) (G385b@f (cdr G385d@x))))))) G385b@f) G3857@x))) (set! G377c@quasicons (lambda (G3831@x G3832@y) ((lambda (G3835@t) ((lambda (G3837@ls/false) (if G3837@ls/false (apply (lambda (G3839@dy) ((lambda (G383b@t) ((lambda (G383d@ls/false) (if G383d@ls/false (apply (lambda (G383f@dx) (list (G2f4f@scheme-stx 'quote) (cons G383f@dx G3839@dy))) G383d@ls/false) ((lambda (G3841@t) ((lambda (G3843@ls/false) (if G3843@ls/false (apply (lambda () ((lambda (G3845@t) ((lambda (G3847@ls/false) (if G3847@ls/false (apply (lambda () (list (G2f4f@scheme-stx 'list) G3831@x)) G3847@ls/false) ((lambda (G3849@t) ((lambda (G384b@ls/false) (if G384b@ls/false (apply (lambda () (list (G2f4f@scheme-stx 'cons) G3831@x G3832@y)) G384b@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3849@t))) (G2fc1@syntax-dispatch G3849@t '_))) G3845@t))) (G2fc1@syntax-dispatch G3845@t '()))) G3839@dy)) G3843@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3841@t))) (G2fc1@syntax-dispatch G3841@t '_))) G383b@t))) (G2fc1@syntax-dispatch G383b@t '(#(scheme-id quote) any)))) G3831@x)) G3837@ls/false) ((lambda (G384d@t) ((lambda (G384f@ls/false) (if G384f@ls/false (apply (lambda (G3851@stuff) (cons* (G2f4f@scheme-stx 'list) G3831@x G3851@stuff)) G384f@ls/false) ((lambda (G3853@t) ((lambda (G3855@ls/false) (if G3855@ls/false (apply (lambda () (list (G2f4f@scheme-stx 'cons) G3831@x G3832@y)) G3855@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3853@t))) (G2fc1@syntax-dispatch G3853@t '_))) G384d@t))) (G2fc1@syntax-dispatch G384d@t '(#(scheme-id list) . each-any)))) G3835@t))) (G2fc1@syntax-dispatch G3835@t '(#(scheme-id quote) any)))) G3832@y))) (set! G377e@quasiappend (lambda (G3817@x G3818@y) ((lambda (G381b@ls) (if (null? G381b@ls) (list (G2f4f@scheme-stx 'quote) '()) (if (null? (cdr G381b@ls)) (car G381b@ls) (cons* (G2f4f@scheme-stx 'append) G381b@ls)))) ((letrec ((G381d@f (lambda (G381f@x) (if (null? G381f@x) ((lambda (G3821@t) ((lambda (G3823@ls/false) (if G3823@ls/false (apply (lambda () '()) G3823@ls/false) ((lambda (G3825@t) ((lambda (G3827@ls/false) (if G3827@ls/false (apply (lambda () (list G3818@y)) G3827@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3825@t))) (G2fc1@syntax-dispatch G3825@t '_))) G3821@t))) (G2fc1@syntax-dispatch G3821@t '(#(scheme-id quote) ())))) G3818@y) ((lambda (G3829@t) ((lambda (G382b@ls/false) (if G382b@ls/false (apply (lambda () (G381d@f (cdr G381f@x))) G382b@ls/false) ((lambda (G382d@t) ((lambda (G382f@ls/false) (if G382f@ls/false (apply (lambda () (cons (car G381f@x) (G381d@f (cdr G381f@x)))) G382f@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G382d@t))) (G2fc1@syntax-dispatch G382d@t '_))) G3829@t))) (G2fc1@syntax-dispatch G3829@t '(#(scheme-id quote) ())))) (car G381f@x)))))) G381d@f) G3817@x)))) (set! G3780@quasivector (lambda (G37e5@x) ((lambda (G37e7@pat-x) ((lambda (G37e9@t) ((lambda (G37eb@ls/false) (if G37eb@ls/false (apply (lambda (G37ed@x*) (list (G2f4f@scheme-stx 'quote) (list->vector G37ed@x*))) G37eb@ls/false) ((lambda (G37ef@t) ((lambda (G37f1@ls/false) (if G37f1@ls/false (apply (lambda () ((letrec ((G37f3@f (lambda (G37f5@x G37f6@k) ((lambda (G37f9@t) ((lambda (G37fb@ls/false) (if G37fb@ls/false (apply (lambda (G37fd@x*) (G37f6@k (map (lambda (G37ff@x) (list (G2f4f@scheme-stx 'quote) G37ff@x)) G37fd@x*))) G37fb@ls/false) ((lambda (G3801@t) ((lambda (G3803@ls/false) (if G3803@ls/false (apply (lambda (G3805@x*) (G37f6@k G3805@x*)) G3803@ls/false) ((lambda (G3807@t) ((lambda (G3809@ls/false) (if G3809@ls/false (apply (lambda (G380b@x G380c@y) (G37f3@f G380c@y (lambda (G380f@ls) (G37f6@k (cons G380b@x G380f@ls))))) G3809@ls/false) ((lambda (G3811@t) ((lambda (G3813@ls/false) (if G3813@ls/false (apply (lambda () (list (G2f4f@scheme-stx 'list->vector) G37e7@pat-x)) G3813@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3811@t))) (G2fc1@syntax-dispatch G3811@t '_))) G3807@t))) (G2fc1@syntax-dispatch G3807@t '(#(scheme-id cons) any any)))) G3801@t))) (G2fc1@syntax-dispatch G3801@t '(#(scheme-id list) . each-any)))) G37f9@t))) (G2fc1@syntax-dispatch G37f9@t '(#(scheme-id quote) each-any)))) G37f5@x)))) G37f3@f) G37e5@x (lambda (G3815@ls) (cons* (G2f4f@scheme-stx 'vector) G3815@ls)))) G37f1@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G37ef@t))) (G2fc1@syntax-dispatch G37ef@t '_))) G37e9@t))) (G2fc1@syntax-dispatch G37e9@t '(#(scheme-id quote) each-any)))) G37e7@pat-x)) G37e5@x))) (set! G3782@vquasi (lambda (G37c3@p G37c4@lev) ((lambda (G37c7@t) ((lambda (G37c9@ls/false) (if G37c9@ls/false (apply (lambda (G37cb@p G37cc@q) ((lambda (G37cf@t) ((lambda (G37d1@ls/false) (if G37d1@ls/false (apply (lambda (G37d3@p) (if (= G37c4@lev '0) (G377a@quasicons* G37d3@p (G3782@vquasi G37cc@q G37c4@lev)) (G377c@quasicons (G377c@quasicons (G375c@datum 'unquote) (G3784@quasi G37d3@p (- G37c4@lev '1))) (G3782@vquasi G37cc@q G37c4@lev)))) G37d1@ls/false) ((lambda (G37d5@t) ((lambda (G37d7@ls/false) (if G37d7@ls/false (apply (lambda (G37d9@p) (if (= G37c4@lev '0) (G377e@quasiappend G37d9@p (G3782@vquasi G37cc@q G37c4@lev)) (G377c@quasicons (G377c@quasicons (G375c@datum 'unquote-splicing) (G3784@quasi G37d9@p (- G37c4@lev '1))) (G3782@vquasi G37cc@q G37c4@lev)))) G37d7@ls/false) ((lambda (G37db@t) ((lambda (G37dd@ls/false) (if G37dd@ls/false (apply (lambda (G37df@p) (G377c@quasicons (G3784@quasi G37df@p G37c4@lev) (G3782@vquasi G37cc@q G37c4@lev))) G37dd@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G37db@t))) (G2fc1@syntax-dispatch G37db@t 'any))) G37d5@t))) (G2fc1@syntax-dispatch G37d5@t '(#(scheme-id unquote-splicing) . each-any)))) G37cf@t))) (G2fc1@syntax-dispatch G37cf@t '(#(scheme-id unquote) . each-any)))) G37cb@p)) G37c9@ls/false) ((lambda (G37e1@t) ((lambda (G37e3@ls/false) (if G37e3@ls/false (apply (lambda () (list (G2f4f@scheme-stx 'quote) '())) G37e3@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G37e1@t))) (G2fc1@syntax-dispatch G37e1@t '()))) G37c7@t))) (G2fc1@syntax-dispatch G37c7@t '(any . any)))) G37c3@p))) (set! G3784@quasi (lambda (G378d@p G378e@lev) ((lambda (G3791@t) ((lambda (G3793@ls/false) (if G3793@ls/false (apply (lambda (G3795@p) (if (= G378e@lev '0) G3795@p (G377c@quasicons (G375c@datum 'unquote) (G3784@quasi (list G3795@p) (- G378e@lev '1))))) G3793@ls/false) ((lambda (G3797@t) ((lambda (G3799@ls/false) (if G3799@ls/false (apply (lambda (G379b@p G379c@q) (if (= G378e@lev '0) (G377a@quasicons* G379b@p (G3784@quasi G379c@q G378e@lev)) (G377c@quasicons (G377c@quasicons (G375c@datum 'unquote) (G3784@quasi G379b@p (- G378e@lev '1))) (G3784@quasi G379c@q G378e@lev)))) G3799@ls/false) ((lambda (G379f@t) ((lambda (G37a1@ls/false) (if G37a1@ls/false (apply (lambda (G37a3@p G37a4@q) (if (= G378e@lev '0) (G377e@quasiappend G37a3@p (G3784@quasi G37a4@q G378e@lev)) (G377c@quasicons (G377c@quasicons (G375c@datum 'unquote-splicing) (G3784@quasi G37a3@p (- G378e@lev '1))) (G3784@quasi G37a4@q G378e@lev)))) G37a1@ls/false) ((lambda (G37a7@t) ((lambda (G37a9@ls/false) (if G37a9@ls/false (apply (lambda (G37ab@p) (G377c@quasicons (G375c@datum 'quasiquote) (G3784@quasi (list G37ab@p) (+ G378e@lev '1)))) G37a9@ls/false) ((lambda (G37ad@t) ((lambda (G37af@ls/false) (if G37af@ls/false (apply (lambda (G37b1@p G37b2@q) (G377c@quasicons (G3784@quasi G37b1@p G378e@lev) (G3784@quasi G37b2@q G378e@lev))) G37af@ls/false) ((lambda (G37b5@t) ((lambda (G37b7@ls/false) (if (if G37b7@ls/false (begin '#f (apply (lambda (G37b9@x) (not (G2d8c@stx? G37b9@x))) G37b7@ls/false)) '#f) (apply (lambda (G37bb@x) (G3780@quasivector (G3782@vquasi G37bb@x G378e@lev))) G37b7@ls/false) ((lambda (G37bd@t) ((lambda (G37bf@ls/false) (if G37bf@ls/false (apply (lambda (G37c1@p) (list (G2f4f@scheme-stx 'quote) G37c1@p)) G37bf@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G37bd@t))) (G2fc1@syntax-dispatch G37bd@t 'any))) G37b5@t))) (G2fc1@syntax-dispatch G37b5@t '#(vector each-any)))) G37ad@t))) (G2fc1@syntax-dispatch G37ad@t '(any . any)))) G37a7@t))) (G2fc1@syntax-dispatch G37a7@t '(#(scheme-id quasiquote) any)))) G379f@t))) (G2fc1@syntax-dispatch G379f@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3797@t))) (G2fc1@syntax-dispatch G3797@t '((#(scheme-id unquote) . each-any) . any)))) G3791@t))) (G2fc1@syntax-dispatch G3791@t '(#(scheme-id unquote) any)))) G378d@p))) (lambda (G3785@x) ((lambda (G3787@t) ((lambda (G3789@ls/false) (if G3789@ls/false (apply (lambda (G378b@e) (G3784@quasi G378b@e '0)) G3789@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3787@t))) (G2fc1@syntax-dispatch G3787@t '(_ any)))) G3785@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fb1@quasisyntax-macro ((lambda () ((lambda (G3862@quasi) (begin (set! G3862@quasi (lambda (G387a@p G387b@lev) ((lambda (G387e@t) ((lambda (G3880@ls/false) (if G3880@ls/false (apply (lambda (G3882@p) (if (= G387b@lev '0) ((lambda (G3884@g) (values (list G3884@g) (list G3882@p) G3884@g)) (gensym)) (call-with-values (lambda () (G3862@quasi G3882@p (- G387b@lev '1))) (lambda (G3889@G3886 G388a@G3887 G388b@G3888) ((lambda (G388f@p G3890@rhs* G3891@lhs*) (values G3891@lhs* G3890@rhs* (list 'unsyntax G388f@p))) G388b@G3888 G388a@G3887 G3889@G3886))))) G3880@ls/false) ((lambda (G3895@t) ((lambda (G3897@ls/false) (if (if G3897@ls/false (begin '#f (apply (lambda () (= G387b@lev '0)) G3897@ls/false)) '#f) (apply (lambda () (G30ae@syntax-violation '#f '"incorrect use of unsyntax" G387a@p)) G3897@ls/false) ((lambda (G3899@t) ((lambda (G389b@ls/false) (if G389b@ls/false (apply (lambda (G389d@p* G389e@q) (call-with-values (lambda () (G3862@quasi G389e@q G387b@lev)) (lambda (G38a4@G38a1 G38a5@G38a2 G38a6@G38a3) ((lambda (G38aa@q G38ab@rhs* G38ac@lhs*) (if (= G387b@lev '0) ((lambda (G38b0@g*) (values (append G38b0@g* G38ac@lhs*) (append G389d@p* G38ab@rhs*) (append G38b0@g* G38aa@q))) (map (lambda (G38b2@x) (gensym)) G389d@p*)) (call-with-values (lambda () (G3862@quasi G389d@p* (- G387b@lev '1))) (lambda (G38b7@G38b4 G38b8@G38b5 G38b9@G38b6) ((lambda (G38bd@p* G38be@rhs2* G38bf@lhs2*) (values (append G38bf@lhs2* G38ac@lhs*) (append G38be@rhs2* G38ab@rhs*) (cons (cons 'unsyntax G38bd@p*) G38aa@q))) G38b9@G38b6 G38b8@G38b5 G38b7@G38b4))))) G38a6@G38a3 G38a5@G38a2 G38a4@G38a1)))) G389b@ls/false) ((lambda (G38c3@t) ((lambda (G38c5@ls/false) (if G38c5@ls/false (apply (lambda (G38c7@p* G38c8@q) (call-with-values (lambda () (G3862@quasi G38c8@q G387b@lev)) (lambda (G38ce@G38cb G38cf@G38cc G38d0@G38cd) ((lambda (G38d4@q G38d5@rhs* G38d6@lhs*) (if (= G387b@lev '0) ((lambda (G38da@g*) (values (append (map (lambda (G38dc@g) (cons G38dc@g '(...))) G38da@g*) G38d6@lhs*) (append G38c7@p* G38d5@rhs*) (append (apply append (map (lambda (G38de@g) (cons G38de@g '(...))) G38da@g*)) G38d4@q))) (map (lambda (G38e0@x) (gensym)) G38c7@p*)) (call-with-values (lambda () (G3862@quasi G38c7@p* (- G387b@lev '1))) (lambda (G38e5@G38e2 G38e6@G38e3 G38e7@G38e4) ((lambda (G38eb@p* G38ec@rhs2* G38ed@lhs2*) (values (append G38ed@lhs2* G38d6@lhs*) (append G38ec@rhs2* G38d5@rhs*) (cons (cons 'unsyntax-splicing G38eb@p*) G38d4@q))) G38e7@G38e4 G38e6@G38e3 G38e5@G38e2))))) G38d0@G38cd G38cf@G38cc G38ce@G38cb)))) G38c5@ls/false) ((lambda (G38f1@t) ((lambda (G38f3@ls/false) (if (if G38f3@ls/false (begin '#f (apply (lambda () (= G387b@lev '0)) G38f3@ls/false)) '#f) (apply (lambda () (G30ae@syntax-violation '#f '"incorrect use of unsyntax-splicing" G387a@p)) G38f3@ls/false) ((lambda (G38f5@t) ((lambda (G38f7@ls/false) (if G38f7@ls/false (apply (lambda (G38f9@p) (call-with-values (lambda () (G3862@quasi G38f9@p (+ G387b@lev '1))) (lambda (G38fe@G38fb G38ff@G38fc G3900@G38fd) ((lambda (G3904@p G3905@rhs* G3906@lhs*) (values G3906@lhs* G3905@rhs* (list 'quasisyntax G3904@p))) G3900@G38fd G38ff@G38fc G38fe@G38fb)))) G38f7@ls/false) ((lambda (G390a@t) ((lambda (G390c@ls/false) (if G390c@ls/false (apply (lambda (G390e@p G390f@q) (call-with-values (lambda () (G3862@quasi G390e@p G387b@lev)) (lambda (G3918@G3912 G3919@G3913 G391a@G3914) (call-with-values (lambda () (G3862@quasi G390f@q G387b@lev)) (lambda (G391e@G3915 G391f@G3916 G3920@G3917) ((lambda (G3924@q G3925@rhs2* G3926@lhs2* G3927@p G3928@rhs* G3929@lhs*) (values (append G3926@lhs2* G3929@lhs*) (append G3925@rhs2* G3928@rhs*) (cons G3927@p G3924@q))) G3920@G3917 G391f@G3916 G391e@G3915 G391a@G3914 G3919@G3913 G3918@G3912)))))) G390c@ls/false) ((lambda (G3930@t) ((lambda (G3932@ls/false) (if G3932@ls/false (apply (lambda (G3934@x*) (call-with-values (lambda () (G3862@quasi G3934@x* G387b@lev)) (lambda (G3939@G3936 G393a@G3937 G393b@G3938) ((lambda (G393f@x* G3940@rhs* G3941@lhs*) (values G3941@lhs* G3940@rhs* (list->vector G393f@x*))) G393b@G3938 G393a@G3937 G3939@G3936)))) G3932@ls/false) ((lambda (G3945@t) ((lambda (G3947@ls/false) (if G3947@ls/false (apply (lambda () (values '() '() G387a@p)) G3947@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3945@t))) (G2fc1@syntax-dispatch G3945@t '_))) G3930@t))) (G2fc1@syntax-dispatch G3930@t '#(vector each-any)))) G390a@t))) (G2fc1@syntax-dispatch G390a@t '(any . any)))) G38f5@t))) (G2fc1@syntax-dispatch G38f5@t '(#(scheme-id quasisyntax) any)))) G38f1@t))) (G2fc1@syntax-dispatch G38f1@t '#(scheme-id unsyntax-splicing)))) G38c3@t))) (G2fc1@syntax-dispatch G38c3@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3899@t))) (G2fc1@syntax-dispatch G3899@t '((#(scheme-id unsyntax) . each-any) . any)))) G3895@t))) (G2fc1@syntax-dispatch G3895@t '#(scheme-id unsyntax)))) G387e@t))) (G2fc1@syntax-dispatch G387e@t '(#(scheme-id unsyntax) any)))) G387a@p))) (lambda (G3863@x) ((lambda (G3865@t) ((lambda (G3867@ls/false) (if G3867@ls/false (apply (lambda (G3869@e) (call-with-values (lambda () (G3862@quasi G3869@e '0)) (lambda (G386e@G386b G386f@G386c G3870@G386d) ((lambda (G3874@v G3875@rhs* G3876@lhs*) (G2f77@bless (list 'syntax-case (cons 'list G3875@rhs*) '() (list G3876@lhs* (list 'syntax G3874@v))))) G3870@G386d G386f@G386c G386e@G386b)))) G3867@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3865@t))) (G2fc1@syntax-dispatch G3865@t '(_ any)))) G3863@x)))) '#f)))) (set! G2fb3@define-struct-macro (lambda (G3949@stx) (G30ae@syntax-violation '#f '"define-struct not supported" G3949@stx))) (set! G2fb5@define-record-type-macro (lambda (G394b@x) ((lambda (G394e@id G3950@get-record-name G3952@get-record-constructor-name G3954@get-record-predicate-name G3956@get-clause G3958@foo-rtd-code G395a@parent-rtd-code G395c@parent-rcd-code G395e@foo-rcd-code G3960@get-protocol-code G3962@get-fields G3964@get-mutator-indices G3966@get-mutators G3968@get-accessors G396a@enumerate G396c@do-define-record G396e@verify-clauses) (begin (set! G394e@id (lambda (G3b45@ctxt . G3b47@str*) (G30b2@datum->syntax G3b45@ctxt (string->symbol (apply string-append (map (lambda (G3b49@x) (if (symbol? G3b49@x) (symbol->string G3b49@x) (if (string? G3b49@x) G3b49@x (assertion-violation 'define-record-type '"BUG")))) G3b47@str*)))))) (set! G3950@get-record-name (lambda (G3b33@spec) ((lambda (G3b35@t) ((lambda (G3b37@ls/false) (if G3b37@ls/false (apply (lambda (G3b39@foo G3b3a@make-foo G3b3b@foo?) G3b39@foo) G3b37@ls/false) ((lambda (G3b3f@t) ((lambda (G3b41@ls/false) (if G3b41@ls/false (apply (lambda (G3b43@foo) G3b43@foo) G3b41@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3b3f@t))) (G2fc1@syntax-dispatch G3b3f@t 'any))) G3b35@t))) (G2fc1@syntax-dispatch G3b35@t '(any any any)))) G3b33@spec))) (set! G3952@get-record-constructor-name (lambda (G3b1f@spec) ((lambda (G3b21@t) ((lambda (G3b23@ls/false) (if G3b23@ls/false (apply (lambda (G3b25@foo G3b26@make-foo G3b27@foo?) G3b26@make-foo) G3b23@ls/false) ((lambda (G3b2b@t) ((lambda (G3b2d@ls/false) (if (if G3b2d@ls/false (begin '#f (apply (lambda (G3b2f@foo) (G2dc4@id? G3b2f@foo)) G3b2d@ls/false)) '#f) (apply (lambda (G3b31@foo) (G394e@id G3b31@foo '"make-" (G2dda@stx->datum G3b31@foo))) G3b2d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3b2b@t))) (G2fc1@syntax-dispatch G3b2b@t 'any))) G3b21@t))) (G2fc1@syntax-dispatch G3b21@t '(any any any)))) G3b1f@spec))) (set! G3954@get-record-predicate-name (lambda (G3b0b@spec) ((lambda (G3b0d@t) ((lambda (G3b0f@ls/false) (if G3b0f@ls/false (apply (lambda (G3b11@foo G3b12@make-foo G3b13@foo?) G3b13@foo?) G3b0f@ls/false) ((lambda (G3b17@t) ((lambda (G3b19@ls/false) (if (if G3b19@ls/false (begin '#f (apply (lambda (G3b1b@foo) (G2dc4@id? G3b1b@foo)) G3b19@ls/false)) '#f) (apply (lambda (G3b1d@foo) (G394e@id G3b1d@foo (G2dda@stx->datum G3b1d@foo) '"?")) G3b19@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3b17@t))) (G2fc1@syntax-dispatch G3b17@t 'any))) G3b0d@t))) (G2fc1@syntax-dispatch G3b0d@t '(any any any)))) G3b0b@spec))) (set! G3956@get-clause (lambda (G3af9@id G3afa@ls) ((lambda (G3afd@t) ((lambda (G3aff@ls/false) (if G3aff@ls/false (apply (lambda () '#f) G3aff@ls/false) ((lambda (G3b01@t) ((lambda (G3b03@ls/false) (if G3b03@ls/false (apply (lambda (G3b05@x G3b06@rest G3b07@ls) (if (G2dcc@free-id=? (G2f77@bless G3af9@id) G3b05@x) (cons G3b05@x G3b06@rest) (G3956@get-clause G3af9@id G3b07@ls))) G3b03@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3b01@t))) (G2fc1@syntax-dispatch G3b01@t '((any . any) . any)))) G3afd@t))) (G2fc1@syntax-dispatch G3afd@t '()))) G3afa@ls))) (set! G3958@foo-rtd-code (lambda (G3aa7@name G3aa8@clause* G3aa9@parent-rtd-code) ((lambda (G3aae@convert-field-spec*) (begin (set! G3aae@convert-field-spec* (lambda (G3adf@ls) (list->vector (map (lambda (G3ae1@x) ((lambda (G3ae3@t) ((lambda (G3ae5@ls/false) (if G3ae5@ls/false (apply (lambda (G3ae7@name G3ae8@rest) (list 'mutable G3ae7@name)) G3ae5@ls/false) ((lambda (G3aeb@t) ((lambda (G3aed@ls/false) (if G3aed@ls/false (apply (lambda (G3aef@name G3af0@rest) (list 'immutable G3aef@name)) G3aed@ls/false) ((lambda (G3af3@t) ((lambda (G3af5@ls/false) (if G3af5@ls/false (apply (lambda (G3af7@name) (list 'immutable G3af7@name)) G3af5@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3af3@t))) (G2fc1@syntax-dispatch G3af3@t 'any))) G3aeb@t))) (G2fc1@syntax-dispatch G3aeb@t '(#(scheme-id immutable) any . any)))) G3ae3@t))) (G2fc1@syntax-dispatch G3ae3@t '(#(scheme-id mutable) any . any)))) G3ae1@x)) G3adf@ls)))) ((lambda (G3aaf@uid-code G3ab0@sealed? G3ab1@opaque? G3ab2@fields) (G2f77@bless (list 'make-record-type-descriptor (list 'quote G3aa7@name) G3aa9@parent-rtd-code G3aaf@uid-code G3ab0@sealed? G3ab1@opaque? G3ab2@fields))) ((lambda (G3ab7@t) ((lambda (G3ab9@ls/false) (if G3ab9@ls/false (apply (lambda () (list 'quote (gensym))) G3ab9@ls/false) ((lambda (G3abb@t) ((lambda (G3abd@ls/false) (if G3abd@ls/false (apply (lambda (G3abf@uid) (list 'quote G3abf@uid)) G3abd@ls/false) ((lambda (G3ac1@t) ((lambda (G3ac3@ls/false) (if G3ac3@ls/false (apply (lambda () '#f) G3ac3@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3ac1@t))) (G2fc1@syntax-dispatch G3ac1@t '_))) G3abb@t))) (G2fc1@syntax-dispatch G3abb@t '(_ any)))) G3ab7@t))) (G2fc1@syntax-dispatch G3ab7@t '(_)))) (G3956@get-clause 'nongenerative G3aa8@clause*)) ((lambda (G3ac5@t) ((lambda (G3ac7@ls/false) (if G3ac7@ls/false (apply (lambda () '#t) G3ac7@ls/false) ((lambda (G3ac9@t) ((lambda (G3acb@ls/false) (if G3acb@ls/false (apply (lambda () '#f) G3acb@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3ac9@t))) (G2fc1@syntax-dispatch G3ac9@t '_))) G3ac5@t))) (G2fc1@syntax-dispatch G3ac5@t '(_ #(atom #t))))) (G3956@get-clause 'sealed G3aa8@clause*)) ((lambda (G3acd@t) ((lambda (G3acf@ls/false) (if G3acf@ls/false (apply (lambda () '#t) G3acf@ls/false) ((lambda (G3ad1@t) ((lambda (G3ad3@ls/false) (if G3ad3@ls/false (apply (lambda () '#f) G3ad3@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3ad1@t))) (G2fc1@syntax-dispatch G3ad1@t '_))) G3acd@t))) (G2fc1@syntax-dispatch G3acd@t '(_ #(atom #t))))) (G3956@get-clause 'opaque G3aa8@clause*)) ((lambda (G3ad5@t) ((lambda (G3ad7@ls/false) (if G3ad7@ls/false (apply (lambda (G3ad9@field-spec*) (list 'quote (G3aae@convert-field-spec* G3ad9@field-spec*))) G3ad7@ls/false) ((lambda (G3adb@t) ((lambda (G3add@ls/false) (if G3add@ls/false (apply (lambda () ''#()) G3add@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3adb@t))) (G2fc1@syntax-dispatch G3adb@t '_))) G3ad5@t))) (G2fc1@syntax-dispatch G3ad5@t '(_ . each-any)))) (G3956@get-clause 'fields G3aa8@clause*))))) '#f))) (set! G395a@parent-rtd-code (lambda (G3a8f@clause*) ((lambda (G3a91@t) ((lambda (G3a93@ls/false) (if G3a93@ls/false (apply (lambda (G3a95@name) (list 'record-type-descriptor G3a95@name)) G3a93@ls/false) ((lambda (G3a97@t) ((lambda (G3a99@ls/false) (if G3a99@ls/false (apply (lambda () ((lambda (G3a9b@t) ((lambda (G3a9d@ls/false) (if G3a9d@ls/false (apply (lambda (G3a9f@rtd G3aa0@rcd) G3a9f@rtd) G3a9d@ls/false) ((lambda (G3aa3@t) ((lambda (G3aa5@ls/false) (if G3aa5@ls/false (apply (lambda () '#f) G3aa5@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3aa3@t))) (G2fc1@syntax-dispatch G3aa3@t '#(atom #f)))) G3a9b@t))) (G2fc1@syntax-dispatch G3a9b@t '(_ any any)))) (G3956@get-clause 'parent-rtd G3a8f@clause*))) G3a99@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3a97@t))) (G2fc1@syntax-dispatch G3a97@t '#(atom #f)))) G3a91@t))) (G2fc1@syntax-dispatch G3a91@t '(_ any)))) (G3956@get-clause 'parent G3a8f@clause*)))) (set! G395c@parent-rcd-code (lambda (G3a77@clause*) ((lambda (G3a79@t) ((lambda (G3a7b@ls/false) (if G3a7b@ls/false (apply (lambda (G3a7d@name) (list 'record-constructor-descriptor G3a7d@name)) G3a7b@ls/false) ((lambda (G3a7f@t) ((lambda (G3a81@ls/false) (if G3a81@ls/false (apply (lambda () ((lambda (G3a83@t) ((lambda (G3a85@ls/false) (if G3a85@ls/false (apply (lambda (G3a87@rtd G3a88@rcd) G3a88@rcd) G3a85@ls/false) ((lambda (G3a8b@t) ((lambda (G3a8d@ls/false) (if G3a8d@ls/false (apply (lambda () '#f) G3a8d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3a8b@t))) (G2fc1@syntax-dispatch G3a8b@t '#(atom #f)))) G3a83@t))) (G2fc1@syntax-dispatch G3a83@t '(_ any any)))) (G3956@get-clause 'parent-rtd G3a77@clause*))) G3a81@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3a7f@t))) (G2fc1@syntax-dispatch G3a7f@t '#(atom #f)))) G3a79@t))) (G2fc1@syntax-dispatch G3a79@t '(_ any)))) (G3956@get-clause 'parent G3a77@clause*)))) (set! G395e@foo-rcd-code (lambda (G3a6f@clause* G3a70@foo-rtd G3a71@protocol G3a72@parent-rcd-code) (list 'make-record-constructor-descriptor G3a70@foo-rtd G3a72@parent-rcd-code G3a71@protocol))) (set! G3960@get-protocol-code (lambda (G3a63@clause*) ((lambda (G3a65@t) ((lambda (G3a67@ls/false) (if G3a67@ls/false (apply (lambda (G3a69@expr) G3a69@expr) G3a67@ls/false) ((lambda (G3a6b@t) ((lambda (G3a6d@ls/false) (if G3a6d@ls/false (apply (lambda () '#f) G3a6d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3a6b@t))) (G2fc1@syntax-dispatch G3a6b@t '_))) G3a65@t))) (G2fc1@syntax-dispatch G3a65@t '(_ any)))) (G3956@get-clause 'protocol G3a63@clause*)))) (set! G3962@get-fields (lambda (G3a51@clause*) ((lambda (G3a53@t) ((lambda (G3a55@ls/false) (if G3a55@ls/false (apply (lambda () '()) G3a55@ls/false) ((lambda (G3a57@t) ((lambda (G3a59@ls/false) (if G3a59@ls/false (apply (lambda (G3a5b@f*) G3a5b@f*) G3a59@ls/false) ((lambda (G3a5d@t) ((lambda (G3a5f@ls/false) (if G3a5f@ls/false (apply (lambda (G3a61@rest) (G3962@get-fields G3a61@rest)) G3a5f@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3a5d@t))) (G2fc1@syntax-dispatch G3a5d@t '(_ . any)))) G3a57@t))) (G2fc1@syntax-dispatch G3a57@t '((#(scheme-id fields) . each-any) . _)))) G3a53@t))) (G2fc1@syntax-dispatch G3a53@t '()))) G3a51@clause*))) (set! G3964@get-mutator-indices (lambda (G3a39@fields) ((letrec ((G3a3b@f (lambda (G3a3d@fields G3a3e@i) ((lambda (G3a41@t) ((lambda (G3a43@ls/false) (if G3a43@ls/false (apply (lambda () '()) G3a43@ls/false) ((lambda (G3a45@t) ((lambda (G3a47@ls/false) (if G3a47@ls/false (apply (lambda (G3a49@rest) (cons G3a3e@i (G3a3b@f G3a49@rest (+ G3a3e@i '1)))) G3a47@ls/false) ((lambda (G3a4b@t) ((lambda (G3a4d@ls/false) (if G3a4d@ls/false (apply (lambda (G3a4f@rest) (G3a3b@f G3a4f@rest (+ G3a3e@i '1))) G3a4d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3a4b@t))) (G2fc1@syntax-dispatch G3a4b@t '(_ . any)))) G3a45@t))) (G2fc1@syntax-dispatch G3a45@t '((#(scheme-id mutable) . _) . any)))) G3a41@t))) (G2fc1@syntax-dispatch G3a41@t '()))) G3a3d@fields)))) G3a3b@f) G3a39@fields '0))) (set! G3966@get-mutators (lambda (G3a0f@foo G3a10@fields) ((lambda (G3a14@gen-name) (begin (set! G3a14@gen-name (lambda (G3a37@x) (G30b2@datum->syntax G3a0f@foo (string->symbol (string-append (symbol->string (G30b4@syntax->datum G3a0f@foo)) '"-" (symbol->string (G30b4@syntax->datum G3a37@x)) '"-set!"))))) ((letrec ((G3a15@f (lambda (G3a17@fields) ((lambda (G3a19@t) ((lambda (G3a1b@ls/false) (if G3a1b@ls/false (apply (lambda () '()) G3a1b@ls/false) ((lambda (G3a1d@t) ((lambda (G3a1f@ls/false) (if G3a1f@ls/false (apply (lambda (G3a21@name G3a22@accessor G3a23@mutator G3a24@rest) (cons G3a23@mutator (G3a15@f G3a24@rest))) G3a1f@ls/false) ((lambda (G3a29@t) ((lambda (G3a2b@ls/false) (if G3a2b@ls/false (apply (lambda (G3a2d@name G3a2e@rest) (cons (G3a14@gen-name G3a2d@name) (G3a15@f G3a2e@rest))) G3a2b@ls/false) ((lambda (G3a31@t) ((lambda (G3a33@ls/false) (if G3a33@ls/false (apply (lambda (G3a35@rest) (G3a15@f G3a35@rest)) G3a33@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3a31@t))) (G2fc1@syntax-dispatch G3a31@t '(_ . any)))) G3a29@t))) (G2fc1@syntax-dispatch G3a29@t '((#(scheme-id mutable) any) . any)))) G3a1d@t))) (G2fc1@syntax-dispatch G3a1d@t '((#(scheme-id mutable) any any any) . any)))) G3a19@t))) (G2fc1@syntax-dispatch G3a19@t '()))) G3a17@fields)))) G3a15@f) G3a10@fields))) '#f))) (set! G3968@get-accessors (lambda (G39cb@foo G39cc@fields) ((lambda (G39d0@gen-name) (begin (set! G39d0@gen-name (lambda (G3a0d@x) (G30b2@datum->syntax G39cb@foo (string->symbol (string-append (symbol->string (G30b4@syntax->datum G39cb@foo)) '"-" (symbol->string (G30b4@syntax->datum G3a0d@x))))))) (map (lambda (G39d1@field) ((lambda (G39d3@t) ((lambda (G39d5@ls/false) (if (if G39d5@ls/false (begin '#f (apply (lambda (G39d7@name G39d8@accessor G39d9@mutator) (G2dc4@id? G39d8@accessor)) G39d5@ls/false)) '#f) (apply (lambda (G39dd@name G39de@accessor G39df@mutator) G39de@accessor) G39d5@ls/false) ((lambda (G39e3@t) ((lambda (G39e5@ls/false) (if (if G39e5@ls/false (begin '#f (apply (lambda (G39e7@name G39e8@accessor) (G2dc4@id? G39e8@accessor)) G39e5@ls/false)) '#f) (apply (lambda (G39eb@name G39ec@accessor) G39ec@accessor) G39e5@ls/false) ((lambda (G39ef@t) ((lambda (G39f1@ls/false) (if (if G39f1@ls/false (begin '#f (apply (lambda (G39f3@name) (G2dc4@id? G39f3@name)) G39f1@ls/false)) '#f) (apply (lambda (G39f5@name) (G39d0@gen-name G39f5@name)) G39f1@ls/false) ((lambda (G39f7@t) ((lambda (G39f9@ls/false) (if (if G39f9@ls/false (begin '#f (apply (lambda (G39fb@name) (G2dc4@id? G39fb@name)) G39f9@ls/false)) '#f) (apply (lambda (G39fd@name) (G39d0@gen-name G39fd@name)) G39f9@ls/false) ((lambda (G39ff@t) ((lambda (G3a01@ls/false) (if (if G3a01@ls/false (begin '#f (apply (lambda (G3a03@name) (G2dc4@id? G3a03@name)) G3a01@ls/false)) '#f) (apply (lambda (G3a05@name) (G39d0@gen-name G3a05@name)) G3a01@ls/false) ((lambda (G3a07@t) ((lambda (G3a09@ls/false) (if G3a09@ls/false (apply (lambda (G3a0b@others) (G30ae@syntax-violation '#f '"invalid field spec" G39d1@field)) G3a09@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3a07@t))) (G2fc1@syntax-dispatch G3a07@t 'any))) G39ff@t))) (G2fc1@syntax-dispatch G39ff@t 'any))) G39f7@t))) (G2fc1@syntax-dispatch G39f7@t '(#(scheme-id immutable) any)))) G39ef@t))) (G2fc1@syntax-dispatch G39ef@t '(#(scheme-id mutable) any)))) G39e3@t))) (G2fc1@syntax-dispatch G39e3@t '(#(scheme-id immutable) any any)))) G39d3@t))) (G2fc1@syntax-dispatch G39d3@t '(#(scheme-id mutable) any any any)))) G39d1@field)) G39cc@fields))) '#f))) (set! G396a@enumerate (lambda (G39c3@ls) ((letrec ((G39c5@f (lambda (G39c7@ls G39c8@i) (if (null? G39c7@ls) '() (cons G39c8@i (G39c5@f (cdr G39c7@ls) (+ G39c8@i '1))))))) G39c5@f) G39c3@ls '0))) (set! G396c@do-define-record (lambda (G399b@namespec G399c@clause*) ((lambda (G399f@foo) ((lambda (G39a1@foo-rtd) ((lambda (G39a3@foo-rcd) ((lambda (G39a5@protocol) ((lambda (G39a7@make-foo) ((lambda (G39a9@fields) ((lambda (G39ab@idx*) ((lambda (G39ad@foo-x*) ((lambda (G39af@set-foo-x!*) ((lambda (G39b1@set-foo-idx*) ((lambda (G39b3@foo?) ((lambda (G39b5@foo-rtd-code) ((lambda (G39b7@foo-rcd-code) ((lambda (G39b9@protocol-code) ((lambda () (G2f77@bless (cons 'begin (cons (list 'define G39a1@foo-rtd G39b5@foo-rtd-code) (cons (list 'define G39a5@protocol G39b9@protocol-code) (cons (list 'define G39a3@foo-rcd G39b7@foo-rcd-code) (cons (list 'define-syntax G399f@foo (list 'list ''$rtd (list 'syntax G39a1@foo-rtd) (list 'syntax G39a3@foo-rcd))) (cons (list 'define G39b3@foo? (list 'record-predicate G39a1@foo-rtd)) (cons (list 'define G39a7@make-foo (list 'record-constructor G39a3@foo-rcd)) (append (map (lambda (G39bb@foo-x G39bc@idx) (list 'define G39bb@foo-x (list 'record-accessor G39a1@foo-rtd G39bc@idx))) G39ad@foo-x* G39ab@idx*) (map (lambda (G39bf@set-foo-x! G39c0@idx) (list 'define G39bf@set-foo-x! (list 'record-mutator G39a1@foo-rtd G39c0@idx))) G39af@set-foo-x!* G39b1@set-foo-idx*))))))))))))) (G3960@get-protocol-code G399c@clause*))) (G395e@foo-rcd-code G399c@clause* G39a1@foo-rtd G39a5@protocol (G395c@parent-rcd-code G399c@clause*)))) (G3958@foo-rtd-code G399f@foo G399c@clause* (G395a@parent-rtd-code G399c@clause*)))) (G3954@get-record-predicate-name G399b@namespec))) (G3964@get-mutator-indices G39a9@fields))) (G3966@get-mutators G399f@foo G39a9@fields))) (G3968@get-accessors G399f@foo G39a9@fields))) (G396a@enumerate G39a9@fields))) (G3962@get-fields G399c@clause*))) (G3952@get-record-constructor-name G399b@namespec))) (gensym))) (gensym))) (gensym))) (G3950@get-record-name G399b@namespec)))) (set! G396e@verify-clauses (lambda (G3977@x G3978@cls*) ((lambda (G397c@valid-kwds G397e@free-id-member?) (begin (set! G397c@valid-kwds (map G2f77@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G397e@free-id-member? (lambda (G3995@x G3996@ls) (if (pair? G3996@ls) (begin '#f ((lambda (G3999@t) (if G3999@t G3999@t (begin '#f (G397e@free-id-member? G3995@x (cdr G3996@ls))))) (G2dcc@free-id=? G3995@x (car G3996@ls)))) '#f))) ((letrec ((G397f@f (lambda (G3981@cls* G3982@seen*) (if (not (null? G3981@cls*)) ((lambda (G3985@t) ((lambda (G3987@ls/false) (if G3987@ls/false (apply (lambda (G3989@kwd G398a@rest) (if ((lambda (G398d@t) (if G398d@t G398d@t (begin '#f (not (G397e@free-id-member? G3989@kwd G397c@valid-kwds))))) (not (G2dc4@id? G3989@kwd))) (G30ae@syntax-violation '#f '"not a valid define-record-type keyword" G3989@kwd) (if (G2dd2@bound-id-member? G3989@kwd G3982@seen*) (G30ae@syntax-violation '#f '"duplicate use of keyword " G3977@x G3989@kwd) (G397f@f (cdr G3981@cls*) (cons G3989@kwd G3982@seen*))))) G3987@ls/false) ((lambda (G398f@t) ((lambda (G3991@ls/false) (if G3991@ls/false (apply (lambda (G3993@cls) (G30ae@syntax-violation '#f '"malformed define-record-type clause" G3993@cls)) G3991@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G398f@t))) (G2fc1@syntax-dispatch G398f@t 'any))) G3985@t))) (G2fc1@syntax-dispatch G3985@t '(any . any)))) (car G3981@cls*)) (void))))) G397f@f) G3978@cls* '()))) '#f '#f))) ((lambda (G396f@t) ((lambda (G3971@ls/false) (if G3971@ls/false (apply (lambda (G3973@namespec G3974@clause*) (begin (G396e@verify-clauses G394b@x G3974@clause*) (G396c@do-define-record G3973@namespec G3974@clause*))) G3971@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G396f@t))) (G2fc1@syntax-dispatch G396f@t '(_ any . each-any)))) G394b@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2fb7@define-condition-type-macro (lambda (G3b4b@x) ((lambda (G3b4e@mkname) (begin (set! G3b4e@mkname (lambda (G3b7b@name G3b7c@suffix) (G30b2@datum->syntax G3b7b@name (string->symbol (string-append (symbol->string (G30b4@syntax->datum G3b7b@name)) G3b7c@suffix))))) ((lambda (G3b4f@t) ((lambda (G3b51@ls/false) (if (if G3b51@ls/false (begin '#f (apply (lambda (G3b53@ctxt G3b54@name G3b55@super G3b56@constructor G3b57@predicate G3b58@field* G3b59@accessor*) (if (G2dc4@id? G3b54@name) (if (G2dc4@id? G3b55@super) (if (G2dc4@id? G3b56@constructor) (if (G2dc4@id? G3b57@predicate) (if (for-all G2dc4@id? G3b58@field*) (begin '#f (for-all G2dc4@id? G3b59@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3b51@ls/false)) '#f) (apply (lambda (G3b61@ctxt G3b62@name G3b63@super G3b64@constructor G3b65@predicate G3b66@field* G3b67@accessor*) ((lambda (G3b6f@aux-accessor*) (G2f77@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3b62@name G3b64@constructor (gensym)) (cons (list 'parent G3b63@super) (cons (cons 'fields (map (lambda (G3b71@field G3b72@aux) (list 'immutable G3b71@field G3b72@aux)) G3b66@field* G3b6f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3b65@predicate (list 'condition-predicate (list 'record-type-descriptor G3b62@name))) (map (lambda (G3b75@accessor G3b76@aux) (list 'define G3b75@accessor (list 'condition-accessor (list 'record-type-descriptor G3b62@name) G3b76@aux))) G3b67@accessor* G3b6f@aux-accessor*)))))) (map (lambda (G3b79@x) (gensym)) G3b67@accessor*))) G3b51@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3b4f@t))) (G2fc1@syntax-dispatch G3b4f@t '(any any any any any . #(each (any any)))))) G3b4b@x))) '#f))) (set! G2fb9@incorrect-usage-macro (lambda (G3b7f@e) (G30ae@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b7f@e))) (set! G2fbb@parameterize-macro (lambda (G3b81@e) ((lambda (G3b83@t) ((lambda (G3b85@ls/false) (if G3b85@ls/false (apply (lambda (G3b87@b G3b88@b*) (G2f77@bless (cons 'let (cons '() (cons G3b87@b G3b88@b*))))) G3b85@ls/false) ((lambda (G3b8b@t) ((lambda (G3b8d@ls/false) (if G3b8d@ls/false (apply (lambda (G3b8f@olhs* G3b90@orhs* G3b91@b G3b92@b*) ((lambda (G3b97@lhs* G3b98@rhs*) (G2f77@bless (cons (list 'lambda (append G3b97@lhs* G3b98@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b9b@lhs G3b9c@rhs) (list 'let (list (list 't (list G3b9b@lhs))) (list G3b9b@lhs G3b9c@rhs) (cons 'set! (cons G3b9c@rhs '(t))))) G3b97@lhs* G3b98@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b91@b G3b92@b*))) '(swap)))))) (append G3b8f@olhs* G3b90@orhs*)))) (G309a@generate-temporaries G3b8f@olhs*) (G309a@generate-temporaries G3b90@orhs*))) G3b8d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3b8b@t))) (G2fc1@syntax-dispatch G3b8b@t '(_ #(each (any any)) any . each-any)))) G3b83@t))) (G2fc1@syntax-dispatch G3b83@t '(_ () any . each-any)))) G3b81@e))) (set! G2fbd@foreign-call-transformer (lambda (G3b9f@e G3ba0@r G3ba1@mr) ((lambda (G3ba5@t) ((lambda (G3ba7@ls/false) (if G3ba7@ls/false (apply (lambda (G3ba9@name G3baa@arg*) (cons 'foreign-call (cons (G2fe5@chi-expr G3ba9@name G3ba0@r G3ba1@mr) (G2fe1@chi-expr* G3baa@arg* G3ba0@r G3ba1@mr)))) G3ba7@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3ba5@t))) (G2fc1@syntax-dispatch G3ba5@t '(_ any . each-any)))) G3b9f@e))) (set! G2fbf@convert-pattern (lambda (G3bad@pattern G3bae@keys) ((lambda (G3bb2@cvt* G3bb4@cvt) (begin (set! G3bb2@cvt* (lambda (G3c43@p* G3c44@n G3c45@ids) (if (null? G3c43@p*) (values '() G3c45@ids) (call-with-values (lambda () (G3bb2@cvt* (cdr G3c43@p*) G3c44@n G3c45@ids)) (lambda (G3c4b@G3c49 G3c4c@G3c4a) ((lambda (G3c4f@ids G3c50@y) (call-with-values (lambda () (G3bb4@cvt (car G3c43@p*) G3c44@n G3c4f@ids)) (lambda (G3c55@G3c53 G3c56@G3c54) ((lambda (G3c59@ids G3c5a@x) (values (cons G3c5a@x G3c50@y) G3c59@ids)) G3c56@G3c54 G3c55@G3c53)))) G3c4c@G3c4a G3c4b@G3c49)))))) (set! G3bb4@cvt (lambda (G3bb5@p G3bb6@n G3bb7@ids) ((lambda (G3bbb@t) ((lambda (G3bbd@ls/false) (if (if G3bbd@ls/false (begin '#f (apply (lambda (G3bbf@id) (G2dc4@id? G3bbf@id)) G3bbd@ls/false)) '#f) (apply (lambda (G3bc1@id) (if (G2dd2@bound-id-member? G3bb5@p G3bae@keys) (values (vector 'free-id G3bb5@p) G3bb7@ids) (if (G2dcc@free-id=? G3bb5@p (G2f4f@scheme-stx '_)) (values '_ G3bb7@ids) (values 'any (cons (cons G3bb5@p G3bb6@n) G3bb7@ids))))) G3bbd@ls/false) ((lambda (G3bc3@t) ((lambda (G3bc5@ls/false) (if (if G3bc5@ls/false (begin '#f (apply (lambda (G3bc7@p G3bc8@dots) (G2fc3@ellipsis? G3bc8@dots)) G3bc5@ls/false)) '#f) (apply (lambda (G3bcb@p G3bcc@dots) (call-with-values (lambda () (G3bb4@cvt G3bcb@p (+ G3bb6@n '1) G3bb7@ids)) (lambda (G3bd1@G3bcf G3bd2@G3bd0) ((lambda (G3bd5@ids G3bd6@p) (values (if (eq? G3bd6@p 'any) 'each-any (vector 'each G3bd6@p)) G3bd5@ids)) G3bd2@G3bd0 G3bd1@G3bcf)))) G3bc5@ls/false) ((lambda (G3bd9@t) ((lambda (G3bdb@ls/false) (if (if G3bdb@ls/false (begin '#f (apply (lambda (G3bdd@x G3bde@dots G3bdf@ys G3be0@z) (G2fc3@ellipsis? G3bde@dots)) G3bdb@ls/false)) '#f) (apply (lambda (G3be5@x G3be6@dots G3be7@ys G3be8@z) (call-with-values (lambda () (G3bb4@cvt G3be8@z G3bb6@n G3bb7@ids)) (lambda (G3bef@G3bed G3bf0@G3bee) ((lambda (G3bf3@ids G3bf4@z) (call-with-values (lambda () (G3bb2@cvt* G3be7@ys G3bb6@n G3bf3@ids)) (lambda (G3bf9@G3bf7 G3bfa@G3bf8) ((lambda (G3bfd@ids G3bfe@ys) (call-with-values (lambda () (G3bb4@cvt G3be5@x (+ G3bb6@n '1) G3bfd@ids)) (lambda (G3c03@G3c01 G3c04@G3c02) ((lambda (G3c07@ids G3c08@x) (values (vector 'each+ G3c08@x (reverse G3bfe@ys) G3bf4@z) G3c07@ids)) G3c04@G3c02 G3c03@G3c01)))) G3bfa@G3bf8 G3bf9@G3bf7)))) G3bf0@G3bee G3bef@G3bed)))) G3bdb@ls/false) ((lambda (G3c0b@t) ((lambda (G3c0d@ls/false) (if G3c0d@ls/false (apply (lambda (G3c0f@x G3c10@y) (call-with-values (lambda () (G3bb4@cvt G3c10@y G3bb6@n G3bb7@ids)) (lambda (G3c15@G3c13 G3c16@G3c14) ((lambda (G3c19@ids G3c1a@y) (call-with-values (lambda () (G3bb4@cvt G3c0f@x G3bb6@n G3c19@ids)) (lambda (G3c1f@G3c1d G3c20@G3c1e) ((lambda (G3c23@ids G3c24@x) (values (cons G3c24@x G3c1a@y) G3c23@ids)) G3c20@G3c1e G3c1f@G3c1d)))) G3c16@G3c14 G3c15@G3c13)))) G3c0d@ls/false) ((lambda (G3c27@t) ((lambda (G3c29@ls/false) (if G3c29@ls/false (apply (lambda () (values '() G3bb7@ids)) G3c29@ls/false) ((lambda (G3c2b@t) ((lambda (G3c2d@ls/false) (if (if G3c2d@ls/false (begin '#f (apply (lambda (G3c2f@p) (not (G2d8c@stx? G3c2f@p))) G3c2d@ls/false)) '#f) (apply (lambda (G3c31@p) (call-with-values (lambda () (G3bb4@cvt G3c31@p G3bb6@n G3bb7@ids)) (lambda (G3c35@G3c33 G3c36@G3c34) ((lambda (G3c39@ids G3c3a@p) (values (vector 'vector G3c3a@p) G3c39@ids)) G3c36@G3c34 G3c35@G3c33)))) G3c2d@ls/false) ((lambda (G3c3d@t) ((lambda (G3c3f@ls/false) (if G3c3f@ls/false (apply (lambda (G3c41@datum) (values (vector 'atom (G2dda@stx->datum G3c41@datum)) G3bb7@ids)) G3c3f@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3c3d@t))) (G2fc1@syntax-dispatch G3c3d@t 'any))) G3c2b@t))) (G2fc1@syntax-dispatch G3c2b@t '#(vector each-any)))) G3c27@t))) (G2fc1@syntax-dispatch G3c27@t '()))) G3c0b@t))) (G2fc1@syntax-dispatch G3c0b@t '(any . any)))) G3bd9@t))) (G2fc1@syntax-dispatch G3bd9@t '(any any . #(each+ any () any))))) G3bc3@t))) (G2fc1@syntax-dispatch G3bc3@t '(any any)))) G3bbb@t))) (G2fc1@syntax-dispatch G3bbb@t 'any))) G3bb5@p))) (G3bb4@cvt G3bad@pattern '0 '()))) '#f '#f))) (set! G2fc1@syntax-dispatch ((lambda () ((lambda (G3c5e@stx^ G3c60@match-each G3c62@match-each+ G3c64@match-each-any G3c66@match-empty G3c68@combine G3c6a@match* G3c6c@match) (begin (set! G3c5e@stx^ (lambda (G3d27@e G3d28@m* G3d29@s* G3d2a@ae*) (if (if (null? G3d28@m*) (if (null? G3d29@s*) (begin '#f (null? G3d2a@ae*)) '#f) '#f) G3d27@e (G2dac@mkstx G3d27@e G3d28@m* G3d29@s* G3d2a@ae*)))) (set! G3c60@match-each (lambda (G3d0a@e G3d0b@p G3d0c@m* G3d0d@s* G3d0e@ae*) (if (pair? G3d0a@e) ((lambda (G3d14@first) (if G3d14@first (begin '#f ((lambda (G3d16@rest) (if G3d16@rest (begin '#f (cons G3d14@first G3d16@rest)) '#f)) (G3c60@match-each (cdr G3d0a@e) G3d0b@p G3d0c@m* G3d0d@s* G3d0e@ae*))) '#f)) (G3c6c@match (car G3d0a@e) G3d0b@p G3d0c@m* G3d0d@s* G3d0e@ae* '())) (if (null? G3d0a@e) '() (if (G2d8c@stx? G3d0a@e) (if (not (G2d3e@top-marked? G3d0c@m*)) (begin '#f (call-with-values (lambda () (G2daa@join-wraps G3d0c@m* G3d0d@s* G3d0e@ae* G3d0a@e)) (lambda (G3d1b@G3d18 G3d1c@G3d19 G3d1d@G3d1a) ((lambda (G3d21@ae* G3d22@s* G3d23@m*) (G3c60@match-each (G2d90@stx-expr G3d0a@e) G3d0b@p G3d23@m* G3d22@s* G3d21@ae*)) G3d1d@G3d1a G3d1c@G3d19 G3d1b@G3d18)))) '#f) (if (G295b@G2889@annotation? G3d0a@e) (G3c60@match-each (G295d@G288d@annotation-expression G3d0a@e) G3d0b@p G3d0c@m* G3d0d@s* G3d0e@ae*) '#f)))))) (set! G3c62@match-each+ (lambda (G3cd0@e G3cd1@x-pat G3cd2@y-pat G3cd3@z-pat G3cd4@m* G3cd5@s* G3cd6@ae* G3cd7@r) ((letrec ((G3ce0@f (lambda (G3ce2@e G3ce3@m* G3ce4@s* G3ce5@ae*) (if (pair? G3ce2@e) (call-with-values (lambda () (G3ce0@f (cdr G3ce2@e) G3ce3@m* G3ce4@s* G3ce5@ae*)) (lambda (G3ced@G3cea G3cee@G3ceb G3cef@G3cec) ((lambda (G3cf3@r G3cf4@y-pat G3cf5@xr*) (if G3cf3@r (if (null? G3cf4@y-pat) ((lambda (G3cf9@xr) (if G3cf9@xr (values (cons G3cf9@xr G3cf5@xr*) G3cf4@y-pat G3cf3@r) (values '#f '#f '#f))) (G3c6c@match (car G3ce2@e) G3cd1@x-pat G3ce3@m* G3ce4@s* G3ce5@ae* '())) (values '() (cdr G3cf4@y-pat) (G3c6c@match (car G3ce2@e) (car G3cf4@y-pat) G3ce3@m* G3ce4@s* G3ce5@ae* G3cf3@r))) (values '#f '#f '#f))) G3cef@G3cec G3cee@G3ceb G3ced@G3cea))) (if (G2d8c@stx? G3ce2@e) (if (G2d3e@top-marked? G3ce3@m*) (values '() G3cd2@y-pat (G3c6c@match G3ce2@e G3cd3@z-pat G3ce3@m* G3ce4@s* G3ce5@ae* G3cd7@r)) (call-with-values (lambda () (G2daa@join-wraps G3ce3@m* G3ce4@s* G3ce5@ae* G3ce2@e)) (lambda (G3cfe@G3cfb G3cff@G3cfc G3d00@G3cfd) ((lambda (G3d04@ae* G3d05@s* G3d06@m*) (G3ce0@f (G2d90@stx-expr G3ce2@e) G3d06@m* G3d05@s* G3d04@ae*)) G3d00@G3cfd G3cff@G3cfc G3cfe@G3cfb)))) (if (G295b@G2889@annotation? G3ce2@e) (G3ce0@f (G295d@G288d@annotation-expression G3ce2@e) G3ce3@m* G3ce4@s* G3ce5@ae*) (values '() G3cd2@y-pat (G3c6c@match G3ce2@e G3cd3@z-pat G3ce3@m* G3ce4@s* G3ce5@ae* G3cd7@r)))))))) G3ce0@f) G3cd0@e G3cd4@m* G3cd5@s* G3cd6@ae*))) (set! G3c64@match-each-any (lambda (G3cb7@e G3cb8@m* G3cb9@s* G3cba@ae*) (if (pair? G3cb7@e) ((lambda (G3cbf@l) (if G3cbf@l (begin '#f (cons (G3c5e@stx^ (car G3cb7@e) G3cb8@m* G3cb9@s* G3cba@ae*) G3cbf@l)) '#f)) (G3c64@match-each-any (cdr G3cb7@e) G3cb8@m* G3cb9@s* G3cba@ae*)) (if (null? G3cb7@e) '() (if (G2d8c@stx? G3cb7@e) (if (not (G2d3e@top-marked? G3cb8@m*)) (begin '#f (call-with-values (lambda () (G2daa@join-wraps G3cb8@m* G3cb9@s* G3cba@ae* G3cb7@e)) (lambda (G3cc4@G3cc1 G3cc5@G3cc2 G3cc6@G3cc3) ((lambda (G3cca@ae* G3ccb@s* G3ccc@m*) (G3c64@match-each-any (G2d90@stx-expr G3cb7@e) G3ccc@m* G3ccb@s* G3cca@ae*)) G3cc6@G3cc3 G3cc5@G3cc2 G3cc4@G3cc1)))) '#f) (if (G295b@G2889@annotation? G3cb7@e) (G3c64@match-each-any (G295d@G288d@annotation-expression G3cb7@e) G3cb8@m* G3cb9@s* G3cba@ae*) '#f)))))) (set! G3c66@match-empty (lambda (G3cb1@p G3cb2@r) (if (null? G3cb1@p) G3cb2@r (if (eq? G3cb1@p '_) G3cb2@r (if (eq? G3cb1@p 'any) (cons '() G3cb2@r) (if (pair? G3cb1@p) (G3c66@match-empty (car G3cb1@p) (G3c66@match-empty (cdr G3cb1@p) G3cb2@r)) (if (eq? G3cb1@p 'each-any) (cons '() G3cb2@r) ((lambda (G3cb5@t) (if (memv G3cb5@t '(each)) (G3c66@match-empty (vector-ref G3cb1@p '1) G3cb2@r) (if (memv G3cb5@t '(each+)) (G3c66@match-empty (vector-ref G3cb1@p '1) (G3c66@match-empty (reverse (vector-ref G3cb1@p '2)) (G3c66@match-empty (vector-ref G3cb1@p '3) G3cb2@r))) (if (memv G3cb5@t '(free-id atom)) G3cb2@r (if (memv G3cb5@t '(scheme-id atom)) G3cb2@r (if (memv G3cb5@t '(vector)) (G3c66@match-empty (vector-ref G3cb1@p '1) G3cb2@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3cb1@p))))))) (vector-ref G3cb1@p '0))))))))) (set! G3c68@combine (lambda (G3cad@r* G3cae@r) (if (null? (car G3cad@r*)) G3cae@r (cons (map car G3cad@r*) (G3c68@combine (map cdr G3cad@r*) G3cae@r))))) (set! G3c6a@match* (lambda (G3c8c@e G3c8d@p G3c8e@m* G3c8f@s* G3c90@ae* G3c91@r) (if (null? G3c8d@p) (if (null? G3c8c@e) (begin '#f G3c91@r) '#f) (if (pair? G3c8d@p) (if (pair? G3c8c@e) (begin '#f (G3c6c@match (car G3c8c@e) (car G3c8d@p) G3c8e@m* G3c8f@s* G3c90@ae* (G3c6c@match (cdr G3c8c@e) (cdr G3c8d@p) G3c8e@m* G3c8f@s* G3c90@ae* G3c91@r))) '#f) (if (eq? G3c8d@p 'each-any) ((lambda (G3c98@l) (if G3c98@l (begin '#f (cons G3c98@l G3c91@r)) '#f)) (G3c64@match-each-any G3c8c@e G3c8e@m* G3c8f@s* G3c90@ae*)) ((lambda (G3c9a@t) (if (memv G3c9a@t '(each)) (if (null? G3c8c@e) (G3c66@match-empty (vector-ref G3c8d@p '1) G3c91@r) ((lambda (G3c9c@r*) (if G3c9c@r* (begin '#f (G3c68@combine G3c9c@r* G3c91@r)) '#f)) (G3c60@match-each G3c8c@e (vector-ref G3c8d@p '1) G3c8e@m* G3c8f@s* G3c90@ae*))) (if (memv G3c9a@t '(free-id)) (if (symbol? G3c8c@e) (if (G2d3e@top-marked? G3c8e@m*) (if (G2dcc@free-id=? (G3c5e@stx^ G3c8c@e G3c8e@m* G3c8f@s* G3c90@ae*) (vector-ref G3c8d@p '1)) (begin '#f G3c91@r) '#f) '#f) '#f) (if (memv G3c9a@t '(scheme-id)) (if (symbol? G3c8c@e) (if (G2d3e@top-marked? G3c8e@m*) (if (G2dcc@free-id=? (G3c5e@stx^ G3c8c@e G3c8e@m* G3c8f@s* G3c90@ae*) (G2f4f@scheme-stx (vector-ref G3c8d@p '1))) (begin '#f G3c91@r) '#f) '#f) '#f) (if (memv G3c9a@t '(each+)) (call-with-values (lambda () (G3c62@match-each+ G3c8c@e (vector-ref G3c8d@p '1) (vector-ref G3c8d@p '2) (vector-ref G3c8d@p '3) G3c8e@m* G3c8f@s* G3c90@ae* G3c91@r)) (lambda (G3ca1@G3c9e G3ca2@G3c9f G3ca3@G3ca0) ((lambda (G3ca7@r G3ca8@y-pat G3ca9@xr*) (if G3ca7@r (if (null? G3ca8@y-pat) (begin '#f (if (null? G3ca9@xr*) (G3c66@match-empty (vector-ref G3c8d@p '1) G3ca7@r) (G3c68@combine G3ca9@xr* G3ca7@r))) '#f) '#f)) G3ca3@G3ca0 G3ca2@G3c9f G3ca1@G3c9e))) (if (memv G3c9a@t '(atom)) (if (equal? (vector-ref G3c8d@p '1) (G2dd8@strip G3c8c@e G3c8e@m*)) (begin '#f G3c91@r) '#f) (if (memv G3c9a@t '(vector)) (if (vector? G3c8c@e) (begin '#f (G3c6c@match (vector->list G3c8c@e) (vector-ref G3c8d@p '1) G3c8e@m* G3c8f@s* G3c90@ae* G3c91@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c8d@p)))))))) (vector-ref G3c8d@p '0))))))) (set! G3c6c@match (lambda (G3c71@e G3c72@p G3c73@m* G3c74@s* G3c75@ae* G3c76@r) (if (not G3c76@r) '#f (if (eq? G3c72@p '_) G3c76@r (if (eq? G3c72@p 'any) (cons (G3c5e@stx^ G3c71@e G3c73@m* G3c74@s* G3c75@ae*) G3c76@r) (if (G2d8c@stx? G3c71@e) (if (not (G2d3e@top-marked? G3c73@m*)) (begin '#f (call-with-values (lambda () (G2daa@join-wraps G3c73@m* G3c74@s* G3c75@ae* G3c71@e)) (lambda (G3c80@G3c7d G3c81@G3c7e G3c82@G3c7f) ((lambda (G3c86@ae* G3c87@s* G3c88@m*) (G3c6c@match (G2d90@stx-expr G3c71@e) G3c72@p G3c88@m* G3c87@s* G3c86@ae* G3c76@r)) G3c82@G3c7f G3c81@G3c7e G3c80@G3c7d)))) '#f) (if (G295b@G2889@annotation? G3c71@e) (G3c6c@match (G295d@G288d@annotation-expression G3c71@e) G3c72@p G3c73@m* G3c74@s* G3c75@ae* G3c76@r) (G3c6a@match* G3c71@e G3c72@p G3c73@m* G3c74@s* G3c75@ae* G3c76@r)))))))) (lambda (G3c6d@e G3c6e@p) (G3c6c@match G3c6d@e G3c6e@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fc3@ellipsis? (lambda (G3d2f@x) (if (G2dc4@id? G3d2f@x) (begin '#f (G2dcc@free-id=? G3d2f@x (G2f4f@scheme-stx '...))) '#f))) (set! G2fc5@underscore? (lambda (G3d31@x) (if (G2dc4@id? G3d31@x) (begin '#f (G2dcc@free-id=? G3d31@x (G2f4f@scheme-stx '_))) '#f))) (set! G2fc7@verify-literals (lambda (G3d33@lits G3d34@expr) (for-each (lambda (G3d37@x) (if ((lambda (G3d39@t) (if G3d39@t G3d39@t ((lambda (G3d3b@t) (if G3d3b@t G3d3b@t (begin '#f (G2fc5@underscore? G3d37@x)))) (G2fc3@ellipsis? G3d37@x)))) (not (G2dc4@id? G3d37@x))) (G30ae@syntax-violation '#f '"invalid literal" G3d34@expr G3d37@x) (void))) G3d33@lits))) (set! G2fc9@syntax-case-transformer ((lambda () ((lambda (G3d3e@build-dispatch-call G3d40@invalid-ids-error G3d42@gen-clause G3d44@gen-syntax-case) (begin (set! G3d3e@build-dispatch-call (lambda (G3dad@pvars G3dae@expr G3daf@y G3db0@r G3db1@mr) ((lambda (G3db7@ids G3db8@levels) ((lambda (G3dbb@labels G3dbc@new-vars) ((lambda (G3dbf@body) (list '(primitive apply) (G2d20@G2c5e@build-lambda '#f G3dbc@new-vars G3dbf@body) G3daf@y)) (G2fe5@chi-expr (G2db0@add-subst (G2d7f@make-full-rib G3db7@ids G3dbb@labels) G3dae@expr) (append (map (lambda (G3dc1@label G3dc2@var G3dc3@level) (cons G3dc1@label (G2de4@make-binding 'syntax (cons G3dc2@var G3dc3@level)))) G3dbb@labels G3dbc@new-vars (map cdr G3dad@pvars)) G3db0@r) G3db1@mr))) (map G2d44@gen-label G3db7@ids) (map G2d40@gen-lexical G3db7@ids))) (map car G3dad@pvars) (map cdr G3dad@pvars)))) (set! G3d40@invalid-ids-error (lambda (G3da1@id* G3da2@e G3da3@class) ((letrec ((G3da7@find (lambda (G3da9@id* G3daa@ok*) (if (null? G3da9@id*) (G30ae@syntax-violation '#f '"invalid syntax" G3da2@e) (if (G2dc4@id? (car G3da9@id*)) (if (G2dd2@bound-id-member? (car G3da9@id*) G3daa@ok*) (G30a8@syntax-error (car G3da9@id*) '"duplicate " G3da3@class) (G3da7@find (cdr G3da9@id*) (cons (car G3da9@id*) G3daa@ok*))) (G30a8@syntax-error (car G3da9@id*) '"invalid " G3da3@class)))))) G3da7@find) G3da1@id* '()))) (set! G3d42@gen-clause (lambda (G3d7b@x G3d7c@keys G3d7d@clauses G3d7e@r G3d7f@mr G3d80@pat G3d81@fender G3d82@expr) (call-with-values (lambda () (G2fbf@convert-pattern G3d80@pat G3d7c@keys)) (lambda (G3d8d@G3d8b G3d8e@G3d8c) ((lambda (G3d91@pvars G3d92@p) (if (not (G2dd0@distinct-bound-ids? (map car G3d91@pvars))) (G3d40@invalid-ids-error (map car G3d91@pvars) G3d80@pat '"pattern variable") (if (not (for-all (lambda (G3d95@x) (not (G2fc3@ellipsis? (car G3d95@x)))) G3d91@pvars)) (G30ae@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d80@pat) ((lambda (G3d97@y) ((lambda (G3d99@test) ((lambda (G3d9b@conseq) ((lambda (G3d9d@altern) (list (G2d20@G2c5e@build-lambda '#f (list G3d97@y) (list 'if G3d99@test G3d9b@conseq G3d9d@altern)) (list '(primitive syntax-dispatch) G3d7b@x (list 'quote G3d92@p)))) (G3d44@gen-syntax-case G3d7b@x G3d7c@keys G3d7d@clauses G3d7e@r G3d7f@mr))) (G3d3e@build-dispatch-call G3d91@pvars G3d82@expr G3d97@y G3d7e@r G3d7f@mr))) (if (eq? G3d81@fender '#t) G3d97@y ((lambda (G3d9f@call) (list 'if G3d97@y G3d9f@call (list 'quote '#f))) (G3d3e@build-dispatch-call G3d91@pvars G3d81@fender G3d97@y G3d7e@r G3d7f@mr))))) (G2d40@gen-lexical 'tmp))))) G3d8e@G3d8c G3d8d@G3d8b))))) (set! G3d44@gen-syntax-case (lambda (G3d59@x G3d5a@keys G3d5b@clauses G3d5c@r G3d5d@mr) (if (null? G3d5b@clauses) (list '(primitive syntax-error) G3d59@x) ((lambda (G3d63@t) ((lambda (G3d65@ls/false) (if G3d65@ls/false (apply (lambda (G3d67@pat G3d68@expr) (if (if (G2dc4@id? G3d67@pat) (if (not (G2dd2@bound-id-member? G3d67@pat G3d5a@keys)) (begin '#f (not (G2fc3@ellipsis? G3d67@pat))) '#f) '#f) (if (G2dcc@free-id=? G3d67@pat (G2f4f@scheme-stx '_)) (G2fe5@chi-expr G3d68@expr G3d5c@r G3d5d@mr) ((lambda (G3d6b@lab G3d6c@lex) ((lambda (G3d6f@body) (list (G2d20@G2c5e@build-lambda '#f (list G3d6c@lex) G3d6f@body) G3d59@x)) (G2fe5@chi-expr (G2db0@add-subst (G2d7f@make-full-rib (list G3d67@pat) (list G3d6b@lab)) G3d68@expr) (cons (cons G3d6b@lab (G2de4@make-binding 'syntax (cons G3d6c@lex '0))) G3d5c@r) G3d5d@mr))) (G2d44@gen-label G3d67@pat) (G2d40@gen-lexical G3d67@pat))) (G3d42@gen-clause G3d59@x G3d5a@keys (cdr G3d5b@clauses) G3d5c@r G3d5d@mr G3d67@pat '#t G3d68@expr))) G3d65@ls/false) ((lambda (G3d71@t) ((lambda (G3d73@ls/false) (if G3d73@ls/false (apply (lambda (G3d75@pat G3d76@fender G3d77@expr) (G3d42@gen-clause G3d59@x G3d5a@keys (cdr G3d5b@clauses) G3d5c@r G3d5d@mr G3d75@pat G3d76@fender G3d77@expr)) G3d73@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3d71@t))) (G2fc1@syntax-dispatch G3d71@t '(any any any)))) G3d63@t))) (G2fc1@syntax-dispatch G3d63@t '(any any)))) (car G3d5b@clauses))))) (lambda (G3d45@e G3d46@r G3d47@mr) ((lambda (G3d4b@t) ((lambda (G3d4d@ls/false) (if G3d4d@ls/false (apply (lambda (G3d4f@expr G3d50@keys G3d51@clauses) (begin (G2fc7@verify-literals G3d50@keys G3d45@e) ((lambda (G3d55@x) ((lambda (G3d57@body) (list (G2d20@G2c5e@build-lambda '#f (list G3d55@x) G3d57@body) (G2fe5@chi-expr G3d4f@expr G3d46@r G3d47@mr))) (G3d44@gen-syntax-case G3d55@x G3d50@keys G3d51@clauses G3d46@r G3d47@mr))) (G2d40@gen-lexical 'tmp)))) G3d4d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3d4b@t))) (G2fc1@syntax-dispatch G3d4b@t '(_ any each-any . each-any)))) G3d45@e)))) '#f '#f '#f '#f)))) (set! G2fcb@ellipsis-map (lambda (G3dc7@proc G3dc8@ls . G3dcb@ls*) ((lambda (G3dce@who) (begin (set! G3dce@who '...) (begin (if (not (list? G3dc8@ls)) (assertion-violation G3dce@who '"not a list" G3dc8@ls) (void)) (if (not (null? G3dcb@ls*)) ((lambda (G3dcf@n) (for-each (lambda (G3dd1@x) (begin (if (not (list? G3dd1@x)) (assertion-violation G3dce@who '"not a list" G3dd1@x) (void)) (if (not (= (length G3dd1@x) G3dcf@n)) (assertion-violation G3dce@who '"length mismatch" G3dc8@ls G3dd1@x) (void)))) G3dcb@ls*)) (length G3dc8@ls)) (void)) (apply map G3dc7@proc G3dc8@ls G3dcb@ls*)))) '#f))) (set! G2fcd@syntax-transformer ((lambda () ((lambda (G3dd4@gen-syntax G3dd6@gen-ref G3dd8@gen-append G3dda@gen-mappend G3ddc@gen-map G3dde@gen-cons G3de0@gen-vector G3de2@regen) (begin (set! G3dd4@gen-syntax (lambda (G3e47@src G3e48@e G3e49@r G3e4a@maps G3e4b@ellipsis? G3e4c@vec?) ((lambda (G3e53@t) ((lambda (G3e55@ls/false) (if (if G3e55@ls/false (begin '#f (apply (lambda (G3e57@dots) (G3e4b@ellipsis? G3e57@dots)) G3e55@ls/false)) '#f) (apply (lambda (G3e59@dots) (G30ae@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e47@src)) G3e55@ls/false) ((lambda (G3e5b@t) ((lambda (G3e5d@ls/false) (if (if G3e5d@ls/false (begin '#f (apply (lambda (G3e5f@id) (G2dc4@id? G3e5f@id)) G3e5d@ls/false)) '#f) (apply (lambda (G3e61@id) ((lambda (G3e63@label) ((lambda (G3e65@b) ((lambda () (if (eq? (G2de6@binding-type G3e65@b) 'syntax) (call-with-values (lambda () ((lambda (G3e69@var.lev) (G3dd6@gen-ref G3e47@src (car G3e69@var.lev) (cdr G3e69@var.lev) G3e4a@maps)) (G2de8@binding-value G3e65@b))) (lambda (G3e6b@G3e67 G3e6c@G3e68) ((lambda (G3e6f@maps G3e70@var) (values (list 'ref G3e70@var) G3e6f@maps)) G3e6c@G3e68 G3e6b@G3e67))) (values (list 'quote G3e48@e) G3e4a@maps))))) (G2de2@label->binding G3e63@label G3e49@r))) (G2dde@id->label G3e48@e))) G3e5d@ls/false) ((lambda (G3e73@t) ((lambda (G3e75@ls/false) (if (if G3e75@ls/false (begin '#f (apply (lambda (G3e77@dots G3e78@e) (G3e4b@ellipsis? G3e77@dots)) G3e75@ls/false)) '#f) (apply (lambda (G3e7b@dots G3e7c@e) (if G3e4c@vec? (G30ae@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e47@src) (G3dd4@gen-syntax G3e47@src G3e7c@e G3e49@r G3e4a@maps (lambda (G3e7f@x) '#f) '#f))) G3e75@ls/false) ((lambda (G3e81@t) ((lambda (G3e83@ls/false) (if (if G3e83@ls/false (begin '#f (apply (lambda (G3e85@x G3e86@dots G3e87@y) (G3e4b@ellipsis? G3e86@dots)) G3e83@ls/false)) '#f) (apply (lambda (G3e8b@x G3e8c@dots G3e8d@y) ((letrec ((G3e91@f (lambda (G3e93@y G3e94@k) ((lambda (G3e97@t) ((lambda (G3e99@ls/false) (if G3e99@ls/false (apply (lambda () (G3e94@k G3e4a@maps)) G3e99@ls/false) ((lambda (G3e9b@t) ((lambda (G3e9d@ls/false) (if (if G3e9d@ls/false (begin '#f (apply (lambda (G3e9f@dots G3ea0@y) (G3e4b@ellipsis? G3e9f@dots)) G3e9d@ls/false)) '#f) (apply (lambda (G3ea3@dots G3ea4@y) (G3e91@f G3ea4@y (lambda (G3ea7@maps) (call-with-values (lambda () (G3e94@k (cons '() G3ea7@maps))) (lambda (G3eab@G3ea9 G3eac@G3eaa) ((lambda (G3eaf@maps G3eb0@x) (if (null? (car G3eaf@maps)) (G30ae@syntax-violation '#f '"extra ellipsis in syntax form" G3e47@src) (values (G3dda@gen-mappend G3eb0@x (car G3eaf@maps)) (cdr G3eaf@maps)))) G3eac@G3eaa G3eab@G3ea9)))))) G3e9d@ls/false) ((lambda (G3eb3@t) ((lambda (G3eb5@ls/false) (if G3eb5@ls/false (apply (lambda () (call-with-values (lambda () (G3dd4@gen-syntax G3e47@src G3e93@y G3e49@r G3e4a@maps G3e4b@ellipsis? G3e4c@vec?)) (lambda (G3eb9@G3eb7 G3eba@G3eb8) ((lambda (G3ebd@maps G3ebe@y) (call-with-values (lambda () (G3e94@k G3ebd@maps)) (lambda (G3ec3@G3ec1 G3ec4@G3ec2) ((lambda (G3ec7@maps G3ec8@x) (values (G3dd8@gen-append G3ec8@x G3ebe@y) G3ec7@maps)) G3ec4@G3ec2 G3ec3@G3ec1)))) G3eba@G3eb8 G3eb9@G3eb7)))) G3eb5@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3eb3@t))) (G2fc1@syntax-dispatch G3eb3@t '_))) G3e9b@t))) (G2fc1@syntax-dispatch G3e9b@t '(any . any)))) G3e97@t))) (G2fc1@syntax-dispatch G3e97@t '()))) G3e93@y)))) G3e91@f) G3e8d@y (lambda (G3ecb@maps) (call-with-values (lambda () (G3dd4@gen-syntax G3e47@src G3e8b@x G3e49@r (cons '() G3ecb@maps) G3e4b@ellipsis? '#f)) (lambda (G3ecf@G3ecd G3ed0@G3ece) ((lambda (G3ed3@maps G3ed4@x) (if (null? (car G3ed3@maps)) (G30ae@syntax-violation '#f '"extra ellipsis in syntax form" G3e47@src) (values (G3ddc@gen-map G3ed4@x (car G3ed3@maps)) (cdr G3ed3@maps)))) G3ed0@G3ece G3ecf@G3ecd)))))) G3e83@ls/false) ((lambda (G3ed7@t) ((lambda (G3ed9@ls/false) (if G3ed9@ls/false (apply (lambda (G3edb@x G3edc@y) (call-with-values (lambda () (G3dd4@gen-syntax G3e47@src G3edb@x G3e49@r G3e4a@maps G3e4b@ellipsis? '#f)) (lambda (G3ee1@G3edf G3ee2@G3ee0) ((lambda (G3ee5@maps G3ee6@xnew) (call-with-values (lambda () (G3dd4@gen-syntax G3e47@src G3edc@y G3e49@r G3ee5@maps G3e4b@ellipsis? G3e4c@vec?)) (lambda (G3eeb@G3ee9 G3eec@G3eea) ((lambda (G3eef@maps G3ef0@ynew) (values (G3dde@gen-cons G3e48@e G3edb@x G3edc@y G3ee6@xnew G3ef0@ynew) G3eef@maps)) G3eec@G3eea G3eeb@G3ee9)))) G3ee2@G3ee0 G3ee1@G3edf)))) G3ed9@ls/false) ((lambda (G3ef3@t) ((lambda (G3ef5@ls/false) (if G3ef5@ls/false (apply (lambda (G3ef7@ls) (call-with-values (lambda () (G3dd4@gen-syntax G3e47@src G3ef7@ls G3e49@r G3e4a@maps G3e4b@ellipsis? '#t)) (lambda (G3efb@G3ef9 G3efc@G3efa) ((lambda (G3eff@maps G3f00@lsnew) (values (G3de0@gen-vector G3e48@e G3ef7@ls G3f00@lsnew) G3eff@maps)) G3efc@G3efa G3efb@G3ef9)))) G3ef5@ls/false) ((lambda (G3f03@t) ((lambda (G3f05@ls/false) (if G3f05@ls/false (apply (lambda () (values (list 'quote G3e48@e) G3e4a@maps)) G3f05@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3f03@t))) (G2fc1@syntax-dispatch G3f03@t '_))) G3ef3@t))) (G2fc1@syntax-dispatch G3ef3@t '#(vector each-any)))) G3ed7@t))) (G2fc1@syntax-dispatch G3ed7@t '(any . any)))) G3e81@t))) (G2fc1@syntax-dispatch G3e81@t '(any any . any)))) G3e73@t))) (G2fc1@syntax-dispatch G3e73@t '(any any)))) G3e5b@t))) (G2fc1@syntax-dispatch G3e5b@t 'any))) G3e53@t))) (G2fc1@syntax-dispatch G3e53@t 'any))) G3e48@e))) (set! G3dd6@gen-ref (lambda (G3e2f@src G3e30@var G3e31@level G3e32@maps) (if (= G3e31@level '0) (values G3e30@var G3e32@maps) (if (null? G3e32@maps) (G30ae@syntax-violation '#f '"missing ellipsis in syntax form" G3e2f@src) (call-with-values (lambda () (G3dd6@gen-ref G3e2f@src G3e30@var (- G3e31@level '1) (cdr G3e32@maps))) (lambda (G3e39@G3e37 G3e3a@G3e38) ((lambda (G3e3d@outer-maps G3e3e@outer-var) ((lambda (G3e41@t) (if G3e41@t ((lambda (G3e43@b) (values (cdr G3e43@b) G3e32@maps)) G3e41@t) ((lambda (G3e45@inner-var) (values G3e45@inner-var (cons (cons (cons G3e3e@outer-var G3e45@inner-var) (car G3e32@maps)) G3e3d@outer-maps))) (G2d40@gen-lexical 'tmp)))) (assq G3e3e@outer-var (car G3e32@maps)))) G3e3a@G3e38 G3e39@G3e37))))))) (set! G3dd8@gen-append (lambda (G3e2b@x G3e2c@y) (if (equal? G3e2c@y ''()) G3e2b@x (list 'append G3e2b@x G3e2c@y)))) (set! G3dda@gen-mappend (lambda (G3e27@e G3e28@map-env) (list 'apply '(primitive append) (G3ddc@gen-map G3e27@e G3e28@map-env)))) (set! G3ddc@gen-map (lambda (G3e15@e G3e16@map-env) ((lambda (G3e19@formals G3e1a@actuals) (if (eq? (car G3e15@e) 'ref) (car G3e1a@actuals) (if (for-all (lambda (G3e1d@x) (if (eq? (car G3e1d@x) 'ref) (begin '#f (memq (cadr G3e1d@x) G3e19@formals)) '#f)) (cdr G3e15@e)) ((lambda (G3e1f@args) (cons 'map (cons (list 'primitive (car G3e15@e)) G3e1f@args))) (map ((lambda (G3e21@r) (lambda (G3e23@x) (cdr (assq (cadr G3e23@x) G3e21@r)))) (map cons G3e19@formals G3e1a@actuals)) (cdr G3e15@e))) (cons* 'map (list 'lambda G3e19@formals G3e15@e) G3e1a@actuals)))) (map cdr G3e16@map-env) (map (lambda (G3e25@x) (list 'ref (car G3e25@x))) G3e16@map-env)))) (set! G3dde@gen-cons (lambda (G3e05@e G3e06@x G3e07@y G3e08@xnew G3e09@ynew) ((lambda (G3e0f@t) (if (memv G3e0f@t '(quote)) (if (eq? (car G3e08@xnew) 'quote) ((lambda (G3e11@xnew G3e12@ynew) (if (if (eq? G3e11@xnew G3e06@x) (begin '#f (eq? G3e12@ynew G3e07@y)) '#f) (list 'quote G3e05@e) (list 'quote (cons G3e11@xnew G3e12@ynew)))) (cadr G3e08@xnew) (cadr G3e09@ynew)) (if (null? (cadr G3e09@ynew)) (list 'list G3e08@xnew) (list 'cons G3e08@xnew G3e09@ynew))) (if (memv G3e0f@t '(list)) (cons 'list (cons G3e08@xnew (cdr G3e09@ynew))) (list 'cons G3e08@xnew G3e09@ynew)))) (car G3e09@ynew)))) (set! G3de0@gen-vector (lambda (G3dff@e G3e00@ls G3e01@lsnew) (if (eq? (car G3e01@lsnew) 'quote) (if (eq? (cadr G3e01@lsnew) G3e00@ls) (list 'quote G3dff@e) (list 'quote (list->vector (cadr G3e01@lsnew)))) (if (eq? (car G3e01@lsnew) 'list) (cons 'vector (cdr G3e01@lsnew)) (list 'list->vector G3e01@lsnew))))) (set! G3de2@regen (lambda (G3df9@x) ((lambda (G3dfb@t) (if (memv G3dfb@t '(ref)) (cadr G3df9@x) (if (memv G3dfb@t '(primitive)) (list 'primitive (cadr G3df9@x)) (if (memv G3dfb@t '(quote)) (list 'quote (cadr G3df9@x)) (if (memv G3dfb@t '(lambda)) (G2d20@G2c5e@build-lambda '#f (cadr G3df9@x) (G3de2@regen (caddr G3df9@x))) (if (memv G3dfb@t '(map)) ((lambda (G3dfd@ls) (cons '(primitive ellipsis-map) G3dfd@ls)) (map G3de2@regen (cdr G3df9@x))) (cons (list 'primitive (car G3df9@x)) (map G3de2@regen (cdr G3df9@x))))))))) (car G3df9@x)))) (lambda (G3de3@e G3de4@r G3de5@mr) ((lambda (G3de9@t) ((lambda (G3deb@ls/false) (if G3deb@ls/false (apply (lambda (G3ded@x) (call-with-values (lambda () (G3dd4@gen-syntax G3de3@e G3ded@x G3de4@r '() G2fc3@ellipsis? '#f)) (lambda (G3df1@G3def G3df2@G3df0) ((lambda (G3df5@maps G3df6@e) (G3de2@regen G3df6@e)) G3df2@G3df0 G3df1@G3def)))) G3deb@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3de9@t))) (G2fc1@syntax-dispatch G3de9@t '(_ any)))) G3de3@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fcf@core-macro-transformer (lambda (G3f07@name) ((lambda (G3f09@t) (if (memv G3f09@t '(quote)) G2f71@quote-transformer (if (memv G3f09@t '(lambda)) G2f75@lambda-transformer (if (memv G3f09@t '(case-lambda)) G2f73@case-lambda-transformer (if (memv G3f09@t '(letrec)) G2f5d@letrec-transformer (if (memv G3f09@t '(letrec*)) G2f5f@letrec*-transformer (if (memv G3f09@t '(if)) G2f6d@if-transformer (if (memv G3f09@t '(foreign-call)) G2fbd@foreign-call-transformer (if (memv G3f09@t '(syntax-case)) G2fc9@syntax-case-transformer (if (memv G3f09@t '(syntax)) G2fcd@syntax-transformer (if (memv G3f09@t '(type-descriptor)) G2f63@type-descriptor-transformer (if (memv G3f09@t '(record-type-descriptor)) G2f65@record-type-descriptor-transformer (if (memv G3f09@t '(record-constructor-descriptor)) G2f67@record-constructor-descriptor-transformer (if (memv G3f09@t '(fluid-let-syntax)) G2f61@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3f07@name))))))))))))))) G3f07@name))) (set! G2fd1@file-options-macro (lambda (G3f0b@x) ((lambda (G3f0e@valid-option?) (begin (set! G3f0e@valid-option? (lambda (G3f17@x) (if (G2dc4@id? G3f17@x) (begin '#f (memq (G2dc6@id->sym G3f17@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3f0f@t) ((lambda (G3f11@ls/false) (if (if G3f11@ls/false (begin '#f (apply (lambda (G3f13@opt*) (if (for-all G3f0e@valid-option? G3f13@opt*) (begin '#f (G2967@G290b@file-options-spec (map G2dc6@id->sym G3f13@opt*))) '#f)) G3f11@ls/false)) '#f) (apply (lambda (G3f15@opt*) (G2f77@bless (list 'quote (G2967@G290b@file-options-spec (map G2dc6@id->sym G3f15@opt*))))) G3f11@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3f0f@t))) (G2fc1@syntax-dispatch G3f0f@t '(_ . each-any)))) G3f0b@x))) '#f))) (set! G2fd3@symbol-macro (lambda (G3f19@x G3f1a@set) ((lambda (G3f1d@t) ((lambda (G3f1f@ls/false) (if (if G3f1f@ls/false (begin '#f (apply (lambda (G3f21@name) (if (G2dc4@id? G3f21@name) (begin '#f (memq (G2dc6@id->sym G3f21@name) G3f1a@set)) '#f)) G3f1f@ls/false)) '#f) (apply (lambda (G3f23@name) (G2f77@bless (list 'quote G3f23@name))) G3f1f@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3f1d@t))) (G2fc1@syntax-dispatch G3f1d@t '(_ any)))) G3f19@x))) (set! G2fd5@macro-transformer (lambda (G3f25@x) (if (procedure? G3f25@x) G3f25@x (if (symbol? G3f25@x) ((lambda (G3f27@t) (if (memv G3f27@t '(define-record-type)) G2fb5@define-record-type-macro (if (memv G3f27@t '(define-struct)) G2fb3@define-struct-macro (if (memv G3f27@t '(include)) G2fa9@include-macro (if (memv G3f27@t '(cond)) G2fa5@cond-macro (if (memv G3f27@t '(let)) G2f7d@let-macro (if (memv G3f27@t '(do)) G2f9d@do-macro (if (memv G3f27@t '(or)) G2fa1@or-macro (if (memv G3f27@t '(and)) G2fa3@and-macro (if (memv G3f27@t '(let*)) G2f9f@let*-macro (if (memv G3f27@t '(let-values)) G2f7f@let-values-macro (if (memv G3f27@t '(let*-values)) G2f81@let*-values-macro (if (memv G3f27@t '(syntax-rules)) G2fad@syntax-rules-macro (if (memv G3f27@t '(quasiquote)) G2faf@quasiquote-macro (if (memv G3f27@t '(quasisyntax)) G2fb1@quasisyntax-macro (if (memv G3f27@t '(with-syntax)) G2f79@with-syntax-macro (if (memv G3f27@t '(when)) G2f69@when-macro (if (memv G3f27@t '(unless)) G2f6b@unless-macro (if (memv G3f27@t '(case)) G2f6f@case-macro (if (memv G3f27@t '(identifier-syntax)) G2f9b@identifier-syntax-macro (if (memv G3f27@t '(time)) G2f93@time-macro (if (memv G3f27@t '(delay)) G2f95@delay-macro (if (memv G3f27@t '(assert)) G2f97@assert-macro (if (memv G3f27@t '(endianness)) G2f99@endianness-macro (if (memv G3f27@t '(guard)) G2f8f@guard-macro (if (memv G3f27@t '(define-enumeration)) G2f91@define-enumeration-macro (if (memv G3f27@t '(trace-lambda)) G2f83@trace-lambda-macro (if (memv G3f27@t '(trace-define)) G2f85@trace-define-macro (if (memv G3f27@t '(trace-define-syntax)) G2f87@trace-define-syntax-macro (if (memv G3f27@t '(trace-let-syntax)) G2f8b@trace-let-syntax-macro (if (memv G3f27@t '(trace-letrec-syntax)) G2f8d@trace-letrec-syntax-macro (if (memv G3f27@t '(define-condition-type)) G2fb7@define-condition-type-macro (if (memv G3f27@t '(parameterize)) G2fbb@parameterize-macro (if (memv G3f27@t '(include-into)) G2fab@include-into-macro (if (memv G3f27@t '(eol-style)) (lambda (G3f29@x) (G2fd3@symbol-macro G3f29@x '(none lf cr crlf nel crnel ls))) (if (memv G3f27@t '(error-handling-mode)) (lambda (G3f2b@x) (G2fd3@symbol-macro G3f2b@x '(ignore raise replace))) (if (memv G3f27@t '(buffer-mode)) (lambda (G3f2d@x) (G2fd3@symbol-macro G3f2d@x '(none line block))) (if (memv G3f27@t '(file-options)) G2fd1@file-options-macro (if (memv G3f27@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2fb9@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3f25@x)))))))))))))))))))))))))))))))))))))))) G3f25@x) (error 'core-macro-transformer '"BUG: invalid macro" G3f25@x))))) (set! G2fd7@local-macro-transformer (lambda (G3f2f@x) (car G3f2f@x))) (set! G2fd9@do-macro-call (lambda (G3f31@transformer G3f32@expr) ((lambda (G3f35@out) (begin ((letrec ((G3f37@f (lambda (G3f39@x) (if (not (G2d8c@stx? G3f39@x)) (if (pair? G3f39@x) (begin (G3f37@f (car G3f39@x)) (G3f37@f (cdr G3f39@x))) (if (vector? G3f39@x) (vector-for-each G3f37@f G3f39@x) (if (symbol? G3f39@x) (G30ae@syntax-violation '#f '"raw symbol encountered in output of macro" G3f32@expr G3f39@x) (void)))) (void))))) G3f37@f) G3f35@out) (G2dae@add-mark (G2da4@gen-mark) G3f35@out G3f32@expr))) (G3f31@transformer (G2dae@add-mark G2da6@anti-mark G3f32@expr '#f))))) (set! G2fdb@chi-macro (lambda (G3f3b@p G3f3c@e) (G2fd9@do-macro-call (G2fd5@macro-transformer G3f3b@p) G3f3c@e))) (set! G2fdd@chi-local-macro (lambda (G3f3f@p G3f40@e) (G2fd9@do-macro-call (G2fd7@local-macro-transformer G3f3f@p) G3f40@e))) (set! G2fdf@chi-global-macro (lambda (G3f43@p G3f44@e) ((lambda (G3f47@lib G3f48@loc) (begin (G2bf6@G2a8e@visit-library G3f47@lib) ((lambda (G3f4b@x) ((lambda (G3f4d@transformer) (G2fd9@do-macro-call G3f4d@transformer G3f44@e)) (if (procedure? G3f4b@x) G3f4b@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3f4b@x)))) (symbol-value G3f48@loc)))) (car G3f43@p) (cdr G3f43@p)))) (set! G2fe1@chi-expr* (lambda (G3f4f@e* G3f50@r G3f51@mr) (if (null? G3f4f@e*) '() ((lambda (G3f55@e) (cons G3f55@e (G2fe1@chi-expr* (cdr G3f4f@e*) G3f50@r G3f51@mr))) (G2fe5@chi-expr (car G3f4f@e*) G3f50@r G3f51@mr))))) (set! G2fe3@chi-application (lambda (G3f57@e G3f58@r G3f59@mr) ((lambda (G3f5d@t) ((lambda (G3f5f@ls/false) (if G3f5f@ls/false (apply (lambda (G3f61@rator G3f62@rands) ((lambda (G3f65@rator) (cons G3f65@rator (G2fe1@chi-expr* G3f62@rands G3f58@r G3f59@mr))) (G2fe5@chi-expr G3f61@rator G3f58@r G3f59@mr))) G3f5f@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3f5d@t))) (G2fc1@syntax-dispatch G3f5d@t '(any . each-any)))) G3f57@e))) (set! G2fe5@chi-expr (lambda (G3f67@e G3f68@r G3f69@mr) (call-with-values (lambda () (G2dec@syntax-type G3f67@e G3f68@r)) (lambda (G3f70@G3f6d G3f71@G3f6e G3f72@G3f6f) ((lambda (G3f76@kwd G3f77@value G3f78@type) ((lambda (G3f7c@t) (if (memv G3f7c@t '(core-macro)) ((lambda (G3f7e@transformer) (G3f7e@transformer G3f67@e G3f68@r G3f69@mr)) (G2fcf@core-macro-transformer G3f77@value)) (if (memv G3f7c@t '(global)) ((lambda (G3f80@lib) ((lambda (G3f82@loc) ((lambda () (begin ((G302e@inv-collector) G3f80@lib) G3f82@loc)))) (cdr G3f77@value))) (car G3f77@value)) (if (memv G3f7c@t '(core-prim)) ((lambda (G3f84@name) (list 'primitive G3f84@name)) G3f77@value) (if (memv G3f7c@t '(call)) (G2fe3@chi-application G3f67@e G3f68@r G3f69@mr) (if (memv G3f7c@t '(lexical)) ((lambda (G3f86@lex) G3f86@lex) (G2f51@lexical-var G3f77@value)) (if (memv G3f7c@t '(global-macro global-macro!)) (G2fe5@chi-expr (G2fdf@chi-global-macro G3f77@value G3f67@e) G3f68@r G3f69@mr) (if (memv G3f7c@t '(local-macro local-macro!)) (G2fe5@chi-expr (G2fdd@chi-local-macro G3f77@value G3f67@e) G3f68@r G3f69@mr) (if (memv G3f7c@t '(macro macro!)) (G2fe5@chi-expr (G2fdb@chi-macro G3f77@value G3f67@e) G3f68@r G3f69@mr) (if (memv G3f7c@t '(constant)) ((lambda (G3f88@datum) (list 'quote G3f88@datum)) G3f77@value) (if (memv G3f7c@t '(set!)) (G2fe7@chi-set! G3f67@e G3f68@r G3f69@mr) (if (memv G3f7c@t '(begin)) ((lambda (G3f8a@t) ((lambda (G3f8c@ls/false) (if G3f8c@ls/false (apply (lambda (G3f8e@x G3f8f@x*) (G2d23@G2c94@build-sequence '#f (G2fe1@chi-expr* (cons G3f8e@x G3f8f@x*) G3f68@r G3f69@mr))) G3f8c@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3f8a@t))) (G2fc1@syntax-dispatch G3f8a@t '(_ any . each-any)))) G3f67@e) (if (memv G3f7c@t '(let-syntax letrec-syntax)) ((lambda (G3f92@t) ((lambda (G3f94@ls/false) (if (if G3f94@ls/false (begin '#f (apply (lambda (G3f96@xlhs* G3f97@xrhs* G3f98@xbody G3f99@xbody*) (if (not (G2dce@valid-bound-ids? G3f96@xlhs*)) (G30ae@syntax-violation '#f '"invalid identifiers" G3f67@e) (void))) G3f94@ls/false)) '#f) (apply (lambda (G3f9e@xlhs* G3f9f@xrhs* G3fa0@xbody G3fa1@xbody*) ((lambda (G3fa6@xlab*) ((lambda (G3fa8@xrib) ((lambda (G3faa@xb*) ((lambda () (G2d23@G2c94@build-sequence '#f (G2fe1@chi-expr* (map (lambda (G3fac@x) (G2db0@add-subst G3fa8@xrib G3fac@x)) (cons G3fa0@xbody G3fa1@xbody*)) (append (map cons G3fa6@xlab* G3faa@xb*) G3f68@r) (append (map cons G3fa6@xlab* G3faa@xb*) G3f69@mr)))))) (map (lambda (G3fae@x) (G2e04@make-eval-transformer (G3020@expand-transformer (if (eq? G3f78@type 'let-syntax) G3fae@x (G2db0@add-subst G3fa8@xrib G3fae@x)) G3f69@mr))) G3f9f@xrhs*))) (G2d7f@make-full-rib G3f9e@xlhs* G3fa6@xlab*))) (map G2d44@gen-label G3f9e@xlhs*))) G3f94@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3f92@t))) (G2fc1@syntax-dispatch G3f92@t '(_ #(each (any any)) any . each-any)))) G3f67@e) (if (memv G3f7c@t '(displaced-lexical)) (G30ae@syntax-violation '#f '"identifier out of context" G3f67@e) (if (memv G3f7c@t '(syntax)) (G30ae@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3f67@e) (if (memv G3f7c@t '(define define-syntax module import library)) (G30ae@syntax-violation '#f (string-append ((lambda (G3fb0@t) (if (memv G3fb0@t '(define)) '"a definition" (if (memv G3fb0@t '(define-syntax)) '"a define-syntax" (if (memv G3fb0@t '(module)) '"a module definition" (if (memv G3fb0@t '(library)) '"a library definition" (if (memv G3fb0@t '(import)) '"an import declaration" (if (memv G3fb0@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f78@type) '" was found where an expression was expected") G3f67@e) (if (memv G3f7c@t '(mutable)) (G30ae@syntax-violation '#f '"attempt to reference an unexportable variable" G3f67@e) (G30ae@syntax-violation '#f '"invalid expression" G3f67@e)))))))))))))))))) G3f78@type)) G3f72@G3f6f G3f71@G3f6e G3f70@G3f6d))))) (set! G2fe7@chi-set! (lambda (G3fb2@e G3fb3@r G3fb4@mr) ((lambda (G3fb8@t) ((lambda (G3fba@ls/false) (if (if G3fba@ls/false (begin '#f (apply (lambda (G3fbc@x G3fbd@v) (G2dc4@id? G3fbc@x)) G3fba@ls/false)) '#f) (apply (lambda (G3fc0@x G3fc1@v) (call-with-values (lambda () (G2dec@syntax-type G3fc0@x G3fb3@r)) (lambda (G3fc7@G3fc4 G3fc8@G3fc5 G3fc9@G3fc6) ((lambda (G3fcd@kwd G3fce@value G3fcf@type) ((lambda (G3fd3@t) (if (memv G3fd3@t '(lexical)) (begin (G2f55@set-lexical-mutable! G3fce@value '#t) (list 'set! (G2f51@lexical-var G3fce@value) (G2fe5@chi-expr G3fc1@v G3fb3@r G3fb4@mr))) (if (memv G3fd3@t '(core-prim)) (G30ae@syntax-violation '#f '"cannot modify imported core primitive" G3fb2@e) (if (memv G3fd3@t '(global)) (G30ae@syntax-violation '#f '"attempt to modify imported binding" G3fb2@e) (if (memv G3fd3@t '(global-macro!)) (G2fe5@chi-expr (G2fdf@chi-global-macro G3fce@value G3fb2@e) G3fb3@r G3fb4@mr) (if (memv G3fd3@t '(local-macro!)) (G2fe5@chi-expr (G2fdd@chi-local-macro G3fce@value G3fb2@e) G3fb3@r G3fb4@mr) (if (memv G3fd3@t '(mutable)) (G30ae@syntax-violation '#f '"attempt to assign to an unexportable variable" G3fb2@e) (G30ae@syntax-violation '#f '"invalid syntax" G3fb2@e)))))))) G3fcf@type)) G3fc9@G3fc6 G3fc8@G3fc5 G3fc7@G3fc4)))) G3fba@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3fb8@t))) (G2fc1@syntax-dispatch G3fb8@t '(_ any any)))) G3fb2@e))) (set! G2fe9@verify-formals (lambda (G3fd5@fmls G3fd6@stx) ((lambda (G3fd9@t) ((lambda (G3fdb@ls/false) (if G3fdb@ls/false (apply (lambda (G3fdd@x*) (if (not (G2dce@valid-bound-ids? G3fdd@x*)) (G2f7b@invalid-fmls-error G3fd6@stx G3fd5@fmls) (void))) G3fdb@ls/false) ((lambda (G3fdf@t) ((lambda (G3fe1@ls/false) (if G3fe1@ls/false (apply (lambda (G3fe3@x* G3fe4@x) (if (not (G2dce@valid-bound-ids? (cons G3fe4@x G3fe3@x*))) (G2f7b@invalid-fmls-error G3fd6@stx G3fd5@fmls) (void))) G3fe1@ls/false) ((lambda (G3fe7@t) ((lambda (G3fe9@ls/false) (if G3fe9@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid syntax" G3fd6@stx)) G3fe9@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G3fe7@t))) (G2fc1@syntax-dispatch G3fe7@t '_))) G3fdf@t))) (G2fc1@syntax-dispatch G3fdf@t '#(each+ any () any)))) G3fd9@t))) (G2fc1@syntax-dispatch G3fd9@t 'each-any))) G3fd5@fmls))) (set! G2feb@chi-lambda-clause (lambda (G3feb@stx G3fec@fmls G3fed@body* G3fee@r G3fef@mr) ((lambda (G3ff5@t) ((lambda (G3ff7@ls/false) (if G3ff7@ls/false (apply (lambda (G3ff9@x*) (begin (G2fe9@verify-formals G3fec@fmls G3feb@stx) ((lambda (G3ffb@lex* G3ffc@lab*) (values G3ffb@lex* (G2ffb@chi-internal (G2db0@add-subst (G2d7f@make-full-rib G3ff9@x* G3ffc@lab*) G3fed@body*) (G2f59@add-lexicals G3ffc@lab* G3ffb@lex* G3fee@r) G3fef@mr))) (map G2d40@gen-lexical G3ff9@x*) (map G2d44@gen-label G3ff9@x*)))) G3ff7@ls/false) ((lambda (G3fff@t) ((lambda (G4001@ls/false) (if G4001@ls/false (apply (lambda (G4003@x* G4004@x) (begin (G2fe9@verify-formals G3fec@fmls G3feb@stx) ((lambda (G4007@lex* G4008@lab* G4009@lex G400a@lab) (values (append G4007@lex* G4009@lex) (G2ffb@chi-internal (G2db0@add-subst (G2d7f@make-full-rib (cons G4004@x G4003@x*) (cons G400a@lab G4008@lab*)) G3fed@body*) (G2f59@add-lexicals (cons G400a@lab G4008@lab*) (cons G4009@lex G4007@lex*) G3fee@r) G3fef@mr))) (map G2d40@gen-lexical G4003@x*) (map G2d44@gen-label G4003@x*) (G2d40@gen-lexical G4004@x) (G2d44@gen-label G4004@x)))) G4001@ls/false) ((lambda (G400f@t) ((lambda (G4011@ls/false) (if G4011@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid syntax" G3fec@fmls)) G4011@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G400f@t))) (G2fc1@syntax-dispatch G400f@t '_))) G3fff@t))) (G2fc1@syntax-dispatch G3fff@t '#(each+ any () any)))) G3ff5@t))) (G2fc1@syntax-dispatch G3ff5@t 'each-any))) G3fec@fmls))) (set! G2fed@chi-lambda-clause* (lambda (G4013@stx G4014@fmls* G4015@body** G4016@r G4017@mr) (if (null? G4014@fmls*) (values '() '()) (call-with-values (lambda () (G2feb@chi-lambda-clause G4013@stx (car G4014@fmls*) (car G4015@body**) G4016@r G4017@mr)) (lambda (G401f@G401d G4020@G401e) ((lambda (G4023@b G4024@a) (call-with-values (lambda () (G2fed@chi-lambda-clause* G4013@stx (cdr G4014@fmls*) (cdr G4015@body**) G4016@r G4017@mr)) (lambda (G4029@G4027 G402a@G4028) ((lambda (G402d@b* G402e@a*) (values (cons G4024@a G402e@a*) (cons G4023@b G402d@b*))) G402a@G4028 G4029@G4027)))) G4020@G401e G401f@G401d)))))) (set! G2fef@chi-defun (lambda (G4031@x G4032@r G4033@mr) ((lambda (G4037@fmls G4038@body*) (call-with-values (lambda () (G2feb@chi-lambda-clause G4037@fmls G4037@fmls G4038@body* G4032@r G4033@mr)) (lambda (G403d@G403b G403e@G403c) ((lambda (G4041@body G4042@fmls) (G2d20@G2c5e@build-lambda '#f G4042@fmls G4041@body)) G403e@G403c G403d@G403b)))) (car G4031@x) (cdr G4031@x)))) (set! G2ff1@chi-rhs (lambda (G4045@rhs G4046@r G4047@mr) ((lambda (G404b@t) (if (memv G404b@t '(defun)) (G2fef@chi-defun (cdr G4045@rhs) G4046@r G4047@mr) (if (memv G404b@t '(expr)) ((lambda (G404d@expr) (G2fe5@chi-expr G404d@expr G4046@r G4047@mr)) (cdr G4045@rhs)) (if (memv G404b@t '(top-expr)) ((lambda (G404f@expr) (G2d23@G2c94@build-sequence '#f (list (G2fe5@chi-expr G404f@expr G4046@r G4047@mr) (G2d24@G2c96@build-void)))) (cdr G4045@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G4045@rhs))))) (car G4045@rhs)))) (set! G2ff3@expand-interaction-rhs*/init* (lambda (G4051@lhs* G4052@rhs* G4053@init* G4054@r G4055@mr) ((letrec ((G405b@f (lambda (G405d@lhs* G405e@rhs*) (if (null? G405d@lhs*) (map (lambda (G4061@x) (G2fe5@chi-expr G4061@x G4054@r G4055@mr)) G4053@init*) ((lambda (G4063@lhs G4064@rhs) ((lambda (G4067@t) (if (memv G4067@t '(defun)) ((lambda (G4069@rhs) (cons (list 'set! G4063@lhs G4069@rhs) (G405b@f (cdr G405d@lhs*) (cdr G405e@rhs*)))) (G2fef@chi-defun (cdr G4064@rhs) G4054@r G4055@mr)) (if (memv G4067@t '(expr)) ((lambda (G406b@rhs) (cons (list 'set! G4063@lhs G406b@rhs) (G405b@f (cdr G405d@lhs*) (cdr G405e@rhs*)))) (G2fe5@chi-expr (cdr G4064@rhs) G4054@r G4055@mr)) (if (memv G4067@t '(top-expr)) ((lambda (G406d@e) (cons G406d@e (G405b@f (cdr G405d@lhs*) (cdr G405e@rhs*)))) (G2fe5@chi-expr (cdr G4064@rhs) G4054@r G4055@mr)) (error 'expand-interaction '"invallid" G4064@rhs))))) (car G4064@rhs))) (car G405d@lhs*) (car G405e@rhs*)))))) G405b@f) G4051@lhs* G4052@rhs*))) (set! G2ff5@chi-rhs* (lambda (G406f@rhs* G4070@r G4071@mr) ((letrec ((G4075@f (lambda (G4077@ls) (if (null? G4077@ls) '() ((lambda (G4079@a) (cons G4079@a (G4075@f (cdr G4077@ls)))) (G2ff1@chi-rhs (car G4077@ls) G4070@r G4071@mr)))))) G4075@f) G406f@rhs*))) (set! G2ff7@find-bound=? (lambda (G407b@x G407c@lhs* G407d@rhs*) (if (null? G407c@lhs*) '#f (if (G2dca@bound-id=? G407b@x (car G407c@lhs*)) (car G407d@rhs*) (G2ff7@find-bound=? G407b@x (cdr G407c@lhs*) (cdr G407d@rhs*)))))) (set! G2ff9@find-dups (lambda (G4081@ls) ((letrec ((G4083@f (lambda (G4085@ls G4086@dups) (if (null? G4085@ls) G4086@dups ((lambda (G4089@t) (if G4089@t ((lambda (G408b@x) (G4083@f (cdr G4085@ls) (cons (list (car G4085@ls) G408b@x) G4086@dups))) G4089@t) (G4083@f (cdr G4085@ls) G4086@dups))) (G2ff7@find-bound=? (car G4085@ls) (cdr G4085@ls) (cdr G4085@ls))))))) G4083@f) G4081@ls '()))) (set! G2ffb@chi-internal (lambda (G408d@e* G408e@r G408f@mr) ((lambda (G4093@rib) (call-with-values (lambda () (G301e@chi-body* (map (lambda (G409d@x) (G2db0@add-subst G4093@rib G409d@x)) (G2dc2@syntax->list G408d@e*)) G408e@r G408f@mr '() '() '() '() '() G4093@rib '#f)) (lambda (G409f@G4095 G40a0@G4096 G40a1@G4097 G40a2@G4098 G40a3@G4099 G40a4@G409a G40a5@G409b G40a6@G409c) ((lambda (G40af@_exp* G40b0@kwd* G40b1@mod** G40b2@rhs* G40b3@lex* G40b4@mr G40b5@r G40b6@e*) (begin (if (null? G40b6@e*) (G30ae@syntax-violation '#f '"no expression in body" G40b6@e*) (void)) ((lambda (G40bf@init*) ((lambda (G40c1@rhs*) ((lambda () (G2d26@G2c9a@build-letrec* '#f (reverse G40b3@lex*) (reverse G40c1@rhs*) (G2d23@G2c94@build-sequence '#f G40bf@init*))))) (G2ff5@chi-rhs* G40b2@rhs* G40b5@r G40b4@mr))) (G2fe1@chi-expr* (append (apply append (reverse G40b1@mod**)) G40b6@e*) G40b5@r G40b4@mr)))) G40a6@G409c G40a5@G409b G40a4@G409a G40a3@G4099 G40a2@G4098 G40a1@G4097 G40a0@G4096 G409f@G4095)))) (G2d6f@make-empty-rib)))) (set! G2ffd@parse-module (lambda (G40c3@e) ((lambda (G40c5@t) ((lambda (G40c7@ls/false) (if G40c7@ls/false (apply (lambda (G40c9@export* G40ca@b*) (begin (if (not (for-all G2dc4@id? G40c9@export*)) (G30ae@syntax-violation '#f '"module exports must be identifiers" G40c3@e) (void)) (values '#f (list->vector G40c9@export*) G40ca@b*))) G40c7@ls/false) ((lambda (G40cd@t) ((lambda (G40cf@ls/false) (if G40cf@ls/false (apply (lambda (G40d1@name G40d2@export* G40d3@b*) (begin (if (not (G2dc4@id? G40d1@name)) (G30ae@syntax-violation '#f '"module name must be an identifier" G40c3@e) (void)) (if (not (for-all G2dc4@id? G40d2@export*)) (G30ae@syntax-violation '#f '"module exports must be identifiers" G40c3@e) (void)) (values G40d1@name (list->vector G40d2@export*) G40d3@b*))) G40cf@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G40cd@t))) (G2fc1@syntax-dispatch G40cd@t '(_ any each-any . each-any)))) G40c5@t))) (G2fc1@syntax-dispatch G40c5@t '(_ each-any . each-any)))) G40c3@e))) (set! G3003@G2ffe (make-record-type-descriptor 'module-interface '#f 'G3001 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G3005@G3000 '#f) (set! G3007@G2fff (make-record-constructor-descriptor G3003@G2ffe '#f G3005@G3000)) (set! G300a@module-interface? (record-predicate G3003@G2ffe)) (set! G300c@make-module-interface (record-constructor G3007@G2fff)) (set! G300e@module-interface-first-mark (record-accessor G3003@G2ffe '0)) (set! G3010@module-interface-exp-id-vec (record-accessor G3003@G2ffe '1)) (set! G3012@module-interface-exp-lab-vec (record-accessor G3003@G2ffe '2)) (set! G3014@set-module-interface-first-mark! (record-mutator G3003@G2ffe '0)) (set! G3016@set-module-interface-exp-id-vec! (record-mutator G3003@G2ffe '1)) (set! G3018@set-module-interface-exp-lab-vec! (record-mutator G3003@G2ffe '2)) (set! G301a@module-interface-exp-id* (lambda (G40d7@iface G40d8@id) ((lambda (G40dc@diff-marks) (begin (set! G40dc@diff-marks (lambda (G40e3@ls G40e4@x) (begin (if (null? G40e3@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G40e7@a) (if (eq? G40e7@a G40e4@x) '() (cons G40e7@a (G40dc@diff-marks (cdr G40e3@ls) G40e4@x)))) (car G40e3@ls))))) ((lambda (G40dd@diff G40de@id-vec) (if (null? G40dd@diff) G40de@id-vec (vector-map (lambda (G40e1@x) (G2d8e@make-stx (G2d90@stx-expr G40e1@x) (append G40dd@diff (G2d92@stx-mark* G40e1@x)) '() '())) G40de@id-vec))) (G40dc@diff-marks (G2d92@stx-mark* G40d8@id) (G300e@module-interface-first-mark G40d7@iface)) (G3010@module-interface-exp-id-vec G40d7@iface)))) '#f))) (set! G301c@chi-internal-module (lambda (G40e9@e G40ea@r G40eb@mr G40ec@lex* G40ed@rhs* G40ee@mod** G40ef@kwd*) (call-with-values (lambda () (G2ffd@parse-module G40e9@e)) (lambda (G40fa@G40f7 G40fb@G40f8 G40fc@G40f9) ((lambda (G4100@e* G4101@exp-id* G4102@name) ((lambda (G4106@rib) ((lambda (G4108@e*) ((lambda () (call-with-values (lambda () (G301e@chi-body* G4108@e* G40ea@r G40eb@mr G40ec@lex* G40ed@rhs* G40ee@mod** G40ef@kwd* '() G4106@rib '#f)) (lambda (G4112@G410a G4113@G410b G4114@G410c G4115@G410d G4116@G410e G4117@G410f G4118@G4110 G4119@G4111) ((lambda (G4122@_exp* G4123@kwd* G4124@mod** G4125@rhs* G4126@lex* G4127@mr G4128@r G4129@e*) ((lambda (G4132@exp-lab* G4133@mod**) (if (not G4102@name) (values G4126@lex* G4125@rhs* G4101@exp-id* G4132@exp-lab* G4128@r G4127@mr G4133@mod** G4123@kwd*) ((lambda (G4136@lab G4137@iface) (values G4126@lex* G4125@rhs* (vector G4102@name) (vector G4136@lab) (cons (cons G4136@lab (cons '$module G4137@iface)) G4128@r) (cons (cons G4136@lab (cons '$module G4137@iface)) G4127@mr) G4133@mod** G4123@kwd*)) (G2d44@gen-label 'module) (G300c@make-module-interface (car (G2d92@stx-mark* G4102@name)) (vector-map (lambda (G413a@x) (G2d8e@make-stx (G2d90@stx-expr G413a@x) (G2d92@stx-mark* G413a@x) '() '())) G4101@exp-id*) G4132@exp-lab*)))) (vector-map (lambda (G413c@x) ((lambda (G413e@t) (if G413e@t G413e@t (begin '#f (G30ae@syntax-violation '#f '"cannot find module export" G413c@x)))) (G2dde@id->label (G2d8e@make-stx (G2dc6@id->sym G413c@x) (G2d92@stx-mark* G413c@x) (list G4106@rib) '())))) G4101@exp-id*) (cons G4129@e* G4124@mod**))) G4119@G4111 G4118@G4110 G4117@G410f G4116@G410e G4115@G410d G4114@G410c G4113@G410b G4112@G410a)))))) (map (lambda (G4140@x) (G2db0@add-subst G4106@rib G4140@x)) (G2dc2@syntax->list G4100@e*)))) (G2d6f@make-empty-rib))) G40fc@G40f9 G40fb@G40f8 G40fa@G40f7))))) (set! G301e@chi-body* (lambda (G4142@e* G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4148@kwd* G4149@exp* G414a@rib G414b@top?) (if (null? G4142@e*) (values G4142@e* G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4148@kwd* G4149@exp*) ((lambda (G4156@e) (call-with-values (lambda () (G2dec@syntax-type G4156@e G4143@r)) (lambda (G415b@G4158 G415c@G4159 G415d@G415a) ((lambda (G4161@kwd G4162@value G4163@type) ((lambda (G4167@kwd*) ((lambda (G4169@t) (if (memv G4169@t '(define)) (call-with-values (lambda () (G2f49@parse-define G4156@e)) (lambda (G416d@G416b G416e@G416c) ((lambda (G4171@rhs G4172@id) (begin (if (G2dd2@bound-id-member? G4172@id G4167@kwd*) (G30ae@syntax-violation '#f '"cannot redefine keyword" G4156@e) (void)) (call-with-values (lambda () (G2d48@gen-define-label+loc G4172@id G414a@rib)) (lambda (G4177@G4175 G4178@G4176) ((lambda (G417b@lex G417c@lab) (begin (G2d75@extend-rib! G414a@rib G4172@id G417c@lab) (G301e@chi-body* (cdr G4142@e*) (G2f57@add-lexical G417c@lab G417b@lex G4143@r) G4144@mr (cons G417b@lex G4145@lex*) (cons G4171@rhs G4146@rhs*) G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?))) G4178@G4176 G4177@G4175))))) G416e@G416c G416d@G416b))) (if (memv G4169@t '(define-syntax)) (call-with-values (lambda () (G2f4b@parse-define-syntax G4156@e)) (lambda (G4181@G417f G4182@G4180) ((lambda (G4185@rhs G4186@id) (begin (if (G2dd2@bound-id-member? G4186@id G4167@kwd*) (G30ae@syntax-violation '#f '"cannot redefine keyword" G4156@e) (void)) ((lambda (G4189@lab G418a@expanded-rhs) (begin (G2d75@extend-rib! G414a@rib G4186@id G4189@lab) ((lambda (G418d@b) (G301e@chi-body* (cdr G4142@e*) (cons (cons G4189@lab G418d@b) G4143@r) (cons (cons G4189@lab G418d@b) G4144@mr) G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?)) (G2e04@make-eval-transformer G418a@expanded-rhs)))) (G2d4a@gen-define-label G4186@id G414a@rib) (G3020@expand-transformer G4185@rhs G4144@mr)))) G4182@G4180 G4181@G417f))) (if (memv G4169@t '(let-syntax letrec-syntax)) ((lambda (G418f@t) ((lambda (G4191@ls/false) (if (if G4191@ls/false (begin '#f (apply (lambda (G4193@xlhs* G4194@xrhs* G4195@xbody*) (if (not (G2dce@valid-bound-ids? G4193@xlhs*)) (G30ae@syntax-violation '#f '"invalid identifiers" G4156@e) (void))) G4191@ls/false)) '#f) (apply (lambda (G4199@xlhs* G419a@xrhs* G419b@xbody*) ((lambda (G419f@xlab*) ((lambda (G41a1@xrib) ((lambda (G41a3@xb*) ((lambda () (G301e@chi-body* (append (map (lambda (G41a5@x) (G2db0@add-subst G41a1@xrib G41a5@x)) G419b@xbody*) (cdr G4142@e*)) (append (map cons G419f@xlab* G41a3@xb*) G4143@r) (append (map cons G419f@xlab* G41a3@xb*) G4144@mr) G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?)))) (map (lambda (G41a7@x) (G2e04@make-eval-transformer (G3020@expand-transformer (if (eq? G4163@type 'let-syntax) G41a7@x (G2db0@add-subst G41a1@xrib G41a7@x)) G4144@mr))) G419a@xrhs*))) (G2d7f@make-full-rib G4199@xlhs* G419f@xlab*))) (map G2d44@gen-label G4199@xlhs*))) G4191@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G418f@t))) (G2fc1@syntax-dispatch G418f@t '(_ #(each (any any)) . each-any)))) G4156@e) (if (memv G4169@t '(begin)) ((lambda (G41a9@t) ((lambda (G41ab@ls/false) (if G41ab@ls/false (apply (lambda (G41ad@x*) (G301e@chi-body* (append G41ad@x* (cdr G4142@e*)) G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?)) G41ab@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G41a9@t))) (G2fc1@syntax-dispatch G41a9@t '(_ . each-any)))) G4156@e) (if (memv G4169@t '(global-macro global-macro!)) (G301e@chi-body* (cons (G2db0@add-subst G414a@rib (G2fdf@chi-global-macro G4162@value G4156@e)) (cdr G4142@e*)) G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?) (if (memv G4169@t '(local-macro local-macro!)) (G301e@chi-body* (cons (G2db0@add-subst G414a@rib (G2fdd@chi-local-macro G4162@value G4156@e)) (cdr G4142@e*)) G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?) (if (memv G4169@t '(macro macro!)) (G301e@chi-body* (cons (G2db0@add-subst G414a@rib (G2fdb@chi-macro G4162@value G4156@e)) (cdr G4142@e*)) G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?) (if (memv G4169@t '(module)) (call-with-values (lambda () (G301c@chi-internal-module G4156@e G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4167@kwd*)) (lambda (G41b7@G41af G41b8@G41b0 G41b9@G41b1 G41ba@G41b2 G41bb@G41b3 G41bc@G41b4 G41bd@G41b5 G41be@G41b6) ((lambda (G41c7@kwd* G41c8@mod** G41c9@mr G41ca@r G41cb@m-exp-lab* G41cc@m-exp-id* G41cd@rhs* G41ce@lex*) (begin (vector-for-each (lambda (G41d7@id G41d8@lab) (G2d75@extend-rib! G414a@rib G41d7@id G41d8@lab)) G41cc@m-exp-id* G41cb@m-exp-lab*) (G301e@chi-body* (cdr G4142@e*) G41ca@r G41c9@mr G41ce@lex* G41cd@rhs* G41c8@mod** G41c7@kwd* G4149@exp* G414a@rib G414b@top?))) G41be@G41b6 G41bd@G41b5 G41bc@G41b4 G41bb@G41b3 G41ba@G41b2 G41b9@G41b1 G41b8@G41b0 G41b7@G41af))) (if (memv G4169@t '(library)) (begin (G308e@library-expander (G2dda@stx->datum G4156@e)) (G301e@chi-body* (cdr G4142@e*) G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?)) (if (memv G4169@t '(export)) ((lambda (G41db@t) ((lambda (G41dd@ls/false) (if G41dd@ls/false (apply (lambda (G41df@exp-decl*) (G301e@chi-body* (cdr G4142@e*) G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* (append G41df@exp-decl* G4149@exp*) G414a@rib G414b@top?)) G41dd@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G41db@t))) (G2fc1@syntax-dispatch G41db@t '(_ . each-any)))) G4156@e) (if (memv G4169@t '(import)) ((lambda () ((lambda (G41e2@module-import? G41e4@module-import G41e6@library-import) (begin (set! G41e2@module-import? (lambda (G422e@e) ((lambda (G4230@t) ((lambda (G4232@ls/false) (if (if G4232@ls/false (begin '#f (apply (lambda (G4234@id) (G2dc4@id? G4234@id)) G4232@ls/false)) '#f) (apply (lambda (G4236@id) '#t) G4232@ls/false) ((lambda (G4238@t) ((lambda (G423a@ls/false) (if G423a@ls/false (apply (lambda (G423c@imp*) '#f) G423a@ls/false) ((lambda (G423e@t) ((lambda (G4240@ls/false) (if G4240@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"malformed import form" G422e@e)) G4240@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G423e@t))) (G2fc1@syntax-dispatch G423e@t '_))) G4238@t))) (G2fc1@syntax-dispatch G4238@t '(_ . each-any)))) G4230@t))) (G2fc1@syntax-dispatch G4230@t '(_ any)))) G422e@e))) (set! G41e4@module-import (lambda (G420f@e G4210@r) ((lambda (G4213@t) ((lambda (G4215@ls/false) (if (if G4215@ls/false (begin '#f (apply (lambda (G4217@id) (G2dc4@id? G4217@id)) G4215@ls/false)) '#f) (apply (lambda (G4219@id) (call-with-values (lambda () (G2dec@syntax-type G4219@id G4210@r)) (lambda (G421e@G421b G421f@G421c G4220@G421d) ((lambda (G4224@kwd G4225@value G4226@type) ((lambda (G422a@t) (if (memv G422a@t '($module)) ((lambda (G422c@iface) (values (G301a@module-interface-exp-id* G422c@iface G4219@id) (G3012@module-interface-exp-lab-vec G422c@iface))) G4225@value) (G30ae@syntax-violation '#f '"invalid import" G420f@e))) G4226@type)) G4220@G421d G421f@G421c G421e@G421b)))) G4215@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G4213@t))) (G2fc1@syntax-dispatch G4213@t '(_ any)))) G420f@e))) (set! G41e6@library-import (lambda (G41f5@e) ((lambda (G41f7@t) ((lambda (G41f9@ls/false) (if G41f9@ls/false (apply (lambda (G41fb@ctxt G41fc@imp*) (call-with-values (lambda () (G3028@parse-import-spec* (G30b4@syntax->datum G41fc@imp*))) (lambda (G4201@G41ff G4202@G4200) ((lambda (G4205@subst-labels G4206@subst-names) (values (vector-map (lambda (G4209@name) (G2da2@datum->stx G41fb@ctxt G4209@name)) G4206@subst-names) G4205@subst-labels)) G4202@G4200 G4201@G41ff)))) G41f9@ls/false) ((lambda (G420b@t) ((lambda (G420d@ls/false) (if G420d@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid import form" G41f5@e)) G420d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G420b@t))) (G2fc1@syntax-dispatch G420b@t '_))) G41f7@t))) (G2fc1@syntax-dispatch G41f7@t '(any . each-any)))) G41f5@e))) (begin (call-with-values (lambda () (if (G41e2@module-import? G4156@e) (G41e4@module-import G4156@e G4143@r) (G41e6@library-import G4156@e))) (lambda (G41e9@G41e7 G41ea@G41e8) ((lambda (G41ed@lab* G41ee@id*) (vector-for-each (lambda (G41f1@id G41f2@lab) (G2d75@extend-rib! G414a@rib G41f1@id G41f2@lab)) G41ee@id* G41ed@lab*)) G41ea@G41e8 G41e9@G41e7))) (G301e@chi-body* (cdr G4142@e*) G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?)))) '#f '#f '#f))) (if G414b@top? (G301e@chi-body* (cdr G4142@e*) G4143@r G4144@mr (cons (G2d40@gen-lexical 'dummy) G4145@lex*) (cons (cons 'top-expr G4156@e) G4146@rhs*) G4147@mod** G4167@kwd* G4149@exp* G414a@rib G414b@top?) (values G4142@e* G4143@r G4144@mr G4145@lex* G4146@rhs* G4147@mod** G4167@kwd* G4149@exp*)))))))))))))) G4163@type)) (if (G2dc4@id? G4161@kwd) (cons G4161@kwd G4148@kwd*) G4148@kwd*))) G415d@G415a G415c@G4159 G415b@G4158)))) (car G4142@e*))))) (set! G3020@expand-transformer (lambda (G4242@expr G4243@r) ((lambda (G4246@rtc) ((lambda (G4248@expanded-rhs) (begin (for-each ((lambda (G424a@mark-visit) (lambda (G424c@x) (begin (G2bf5@G2a8c@invoke-library G424c@x) (G424a@mark-visit G424c@x)))) (G3030@vis-collector)) (G4246@rtc)) G4248@expanded-rhs)) ((lambda (G4252@G424e@inv-collector G4253@G424f@vis-collector G4254@G4250@inv-collector G4255@G4251@vis-collector) ((lambda (G425a@swap) (dynamic-wind G425a@swap (lambda () (G2fe5@chi-expr G4242@expr G4243@r G4243@r)) G425a@swap)) (lambda () (begin ((lambda (G425c@t) (begin (G4252@G424e@inv-collector G4254@G4250@inv-collector) (set! G4254@G4250@inv-collector G425c@t))) (G4252@G424e@inv-collector)) ((lambda (G425e@t) (begin (G4253@G424f@vis-collector G4255@G4251@vis-collector) (set! G4255@G4251@vis-collector G425e@t))) (G4253@G424f@vis-collector)))))) G302e@inv-collector G3030@vis-collector G4246@rtc (lambda (G4260@x) (values))))) (G302c@make-collector)))) (set! G3022@parse-exports (lambda (G4262@exp*) ((letrec ((G4264@f (lambda (G4266@exp* G4267@int* G4268@ext*) (if (null? G4266@exp*) (begin (if (not (G2dce@valid-bound-ids? G4268@ext*)) (G30ae@syntax-violation 'export '"invalid exports" (G2ff9@find-dups G4268@ext*)) (void)) (values (map G30b4@syntax->datum G4268@ext*) G4267@int*)) ((lambda (G426c@t) ((lambda (G426e@ls/false) (if G426e@ls/false (apply (lambda (G4270@rename G4271@i* G4272@e*) (begin (if (not (if (eq? (G30b4@syntax->datum G4270@rename) 'rename) (if (for-all G2dc4@id? G4271@i*) (begin '#f (for-all G2dc4@id? G4272@e*)) '#f) '#f)) (G30ae@syntax-violation 'export '"invalid export specifier" (car G4266@exp*)) (void)) (G4264@f (cdr G4266@exp*) (append G4271@i* G4267@int*) (append G4272@e* G4268@ext*)))) G426e@ls/false) ((lambda (G4276@t) ((lambda (G4278@ls/false) (if G4278@ls/false (apply (lambda (G427a@ie) (begin (if (not (G2dc4@id? G427a@ie)) (G30ae@syntax-violation 'export '"invalid export" G427a@ie) (void)) (G4264@f (cdr G4266@exp*) (cons G427a@ie G4267@int*) (cons G427a@ie G4268@ext*)))) G4278@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G4276@t))) (G2fc1@syntax-dispatch G4276@t 'any))) G426c@t))) (G2fc1@syntax-dispatch G426c@t '(any . #(each (any any)))))) (car G4266@exp*)))))) G4264@f) G4262@exp* '() '()))) (set! G3024@parse-library-name (lambda (G427c@spec) ((lambda (G427f@parse) (begin (set! G427f@parse (lambda (G428a@x) ((lambda (G428c@t) ((lambda (G428e@ls/false) (if (if G428e@ls/false (begin '#f (apply (lambda (G4290@v*) (for-all (lambda (G4292@x) ((lambda (G4294@x) (if (integer? G4294@x) (begin '#f (exact? G4294@x)) '#f)) (G30b4@syntax->datum G4292@x))) G4290@v*)) G428e@ls/false)) '#f) (apply (lambda (G4296@v*) (values '() (map G30b4@syntax->datum G4296@v*))) G428e@ls/false) ((lambda (G4298@t) ((lambda (G429a@ls/false) (if (if G429a@ls/false (begin '#f (apply (lambda (G429c@x G429d@rest) (symbol? (G30b4@syntax->datum G429c@x))) G429a@ls/false)) '#f) (apply (lambda (G42a0@x G42a1@rest) (call-with-values (lambda () (G427f@parse G42a1@rest)) (lambda (G42a6@G42a4 G42a7@G42a5) ((lambda (G42aa@v* G42ab@x*) (values (cons (G30b4@syntax->datum G42a0@x) G42ab@x*) G42aa@v*)) G42a7@G42a5 G42a6@G42a4)))) G429a@ls/false) ((lambda (G42ae@t) ((lambda (G42b0@ls/false) (if G42b0@ls/false (apply (lambda () (values '() '())) G42b0@ls/false) ((lambda (G42b2@t) ((lambda (G42b4@ls/false) (if G42b4@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid library name" G427c@spec)) G42b4@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G42b2@t))) (G2fc1@syntax-dispatch G42b2@t '_))) G42ae@t))) (G2fc1@syntax-dispatch G42ae@t '()))) G4298@t))) (G2fc1@syntax-dispatch G4298@t '(any . any)))) G428c@t))) (G2fc1@syntax-dispatch G428c@t '(each-any)))) G428a@x))) (call-with-values (lambda () (G427f@parse G427c@spec)) (lambda (G4282@G4280 G4283@G4281) ((lambda (G4286@ver* G4287@name*) (begin (if (null? G4287@name*) (G30ae@syntax-violation '#f '"empty library name" G427c@spec) (void)) (values G4287@name* G4286@ver*))) G4283@G4281 G4282@G4280))))) '#f))) (set! G3026@parse-library (lambda (G42b6@e) ((lambda (G42b8@t) ((lambda (G42ba@ls/false) (if (if G42ba@ls/false (begin '#f (apply (lambda (G42bc@library G42bd@name* G42be@export G42bf@exp* G42c0@import G42c1@imp* G42c2@b*) (if (eq? (G30b4@syntax->datum G42be@export) 'export) (if (eq? (G30b4@syntax->datum G42c0@import) 'import) (begin '#f (eq? (G30b4@syntax->datum G42bc@library) 'library)) '#f) '#f)) G42ba@ls/false)) '#f) (apply (lambda (G42ca@library G42cb@name* G42cc@export G42cd@exp* G42ce@import G42cf@imp* G42d0@b*) (values G42cb@name* G42cd@exp* G42cf@imp* G42d0@b*)) G42ba@ls/false) ((lambda (G42d8@t) ((lambda (G42da@ls/false) (if G42da@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"malformed library" G42b6@e)) G42da@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G42d8@t))) (G2fc1@syntax-dispatch G42d8@t '_))) G42b8@t))) (G2fc1@syntax-dispatch G42b8@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G42b6@e))) (set! G3028@parse-import-spec* ((lambda () ((lambda (G42dd@idsyn? G42df@dup-error G42e1@merge-substs G42e3@exclude* G42e5@find* G42e7@rem* G42e9@remove-dups G42eb@parse-library-name G42ed@import-library G42ef@get-import G42f1@add-imports!) (begin (set! G42dd@idsyn? (lambda (G44dc@x) (symbol? (G30b4@syntax->datum G44dc@x)))) (set! G42df@dup-error (lambda (G44da@name) (G30ae@syntax-violation 'import '"two imports with different bindings" G44da@name))) (set! G42e1@merge-substs (lambda (G44c8@s G44c9@subst) ((lambda (G44cd@insert-to-subst) (begin (set! G44cd@insert-to-subst (lambda (G44ce@a G44cf@subst) ((lambda (G44d2@name G44d3@label) ((lambda (G44d6@t) (if G44d6@t ((lambda (G44d8@x) (if (eq? (cdr G44d8@x) G44d3@label) G44cf@subst (G42df@dup-error G44d2@name))) G44d6@t) (cons G44ce@a G44cf@subst))) (assq G44d2@name G44cf@subst))) (car G44ce@a) (cdr G44ce@a)))) (if (null? G44c8@s) G44c9@subst (G44cd@insert-to-subst (car G44c8@s) (G42e1@merge-substs (cdr G44c8@s) G44c9@subst))))) '#f))) (set! G42e3@exclude* (lambda (G449e@sym* G449f@subst) ((lambda (G44a3@exclude) (begin (set! G44a3@exclude (lambda (G44b8@sym G44b9@subst) (if (null? G44b9@subst) (G30ae@syntax-violation 'import '"cannot rename unbound identifier" G44b8@sym) (if (eq? G44b8@sym (caar G44b9@subst)) (values (cdar G44b9@subst) (cdr G44b9@subst)) ((lambda (G44bc@a) (call-with-values (lambda () (G44a3@exclude G44b8@sym (cdr G44b9@subst))) (lambda (G44c0@G44be G44c1@G44bf) ((lambda (G44c4@subst G44c5@old) (values G44c5@old (cons G44bc@a G44c4@subst))) G44c1@G44bf G44c0@G44be)))) (car G44b9@subst)))))) (if (null? G449e@sym*) (values '() G449f@subst) (call-with-values (lambda () (G44a3@exclude (car G449e@sym*) G449f@subst)) (lambda (G44a6@G44a4 G44a7@G44a5) ((lambda (G44aa@subst G44ab@old) (call-with-values (lambda () (G42e3@exclude* (cdr G449e@sym*) G44aa@subst)) (lambda (G44b0@G44ae G44b1@G44af) ((lambda (G44b4@subst G44b5@old*) (values (cons G44ab@old G44b5@old*) G44b4@subst)) G44b1@G44af G44b0@G44ae)))) G44a7@G44a5 G44a6@G44a4)))))) '#f))) (set! G42e5@find* (lambda (G4496@sym* G4497@subst) (map (lambda (G449a@x) ((lambda (G449c@t) (if G449c@t (cdr G449c@t) (G30ae@syntax-violation 'import '"cannot find identifier" G449a@x))) (assq G449a@x G4497@subst))) G4496@sym*))) (set! G42e7@rem* (lambda (G448e@sym* G448f@subst) ((letrec ((G4492@f (lambda (G4494@subst) (if (null? G4494@subst) '() (if (memq (caar G4494@subst) G448e@sym*) (G4492@f (cdr G4494@subst)) (cons (car G4494@subst) (G4492@f (cdr G4494@subst)))))))) G4492@f) G448f@subst))) (set! G42e9@remove-dups (lambda (G448c@ls) (if (null? G448c@ls) '() (if (memq (car G448c@ls) (cdr G448c@ls)) (G42e9@remove-dups (cdr G448c@ls)) (cons (car G448c@ls) (G42e9@remove-dups (cdr G448c@ls))))))) (set! G42eb@parse-library-name (lambda (G43a6@spec) ((lambda (G43a9@subversion? G43ab@subversion-pred G43ad@version-pred) (begin (set! G43a9@subversion? (lambda (G4488@x) ((lambda (G448a@x) (if (integer? G448a@x) (if (exact? G448a@x) (begin '#f (>= G448a@x '0)) '#f) '#f)) (G30b4@syntax->datum G4488@x)))) (set! G43ab@subversion-pred (lambda (G4428@x*) ((lambda (G442a@t) ((lambda (G442c@ls/false) (if (if G442c@ls/false (begin '#f (apply (lambda (G442e@n) (G43a9@subversion? G442e@n)) G442c@ls/false)) '#f) (apply (lambda (G4430@n) (lambda (G4432@x) (= G4432@x (G30b4@syntax->datum G4430@n)))) G442c@ls/false) ((lambda (G4434@t) ((lambda (G4436@ls/false) (if (if G4436@ls/false (begin '#f (apply (lambda (G4438@p? G4439@sub*) (eq? (G30b4@syntax->datum G4438@p?) 'and)) G4436@ls/false)) '#f) (apply (lambda (G443c@p? G443d@sub*) ((lambda (G4440@p*) (lambda (G4442@x) (for-all (lambda (G4444@p) (G4444@p G4442@x)) G4440@p*))) (map G43ab@subversion-pred G443d@sub*))) G4436@ls/false) ((lambda (G4446@t) ((lambda (G4448@ls/false) (if (if G4448@ls/false (begin '#f (apply (lambda (G444a@p? G444b@sub*) (eq? (G30b4@syntax->datum G444a@p?) 'or)) G4448@ls/false)) '#f) (apply (lambda (G444e@p? G444f@sub*) ((lambda (G4452@p*) (lambda (G4454@x) (exists (lambda (G4456@p) (G4456@p G4454@x)) G4452@p*))) (map G43ab@subversion-pred G444f@sub*))) G4448@ls/false) ((lambda (G4458@t) ((lambda (G445a@ls/false) (if (if G445a@ls/false (begin '#f (apply (lambda (G445c@p? G445d@sub) (eq? (G30b4@syntax->datum G445c@p?) 'not)) G445a@ls/false)) '#f) (apply (lambda (G4460@p? G4461@sub) ((lambda (G4464@p) (lambda (G4466@x) (not (G4464@p G4466@x)))) (G43ab@subversion-pred G4461@sub))) G445a@ls/false) ((lambda (G4468@t) ((lambda (G446a@ls/false) (if (if G446a@ls/false (begin '#f (apply (lambda (G446c@p? G446d@n) (if (eq? (G30b4@syntax->datum G446c@p?) '<=) (begin '#f (G43a9@subversion? G446d@n)) '#f)) G446a@ls/false)) '#f) (apply (lambda (G4470@p? G4471@n) (lambda (G4474@x) (<= G4474@x (G30b4@syntax->datum G4471@n)))) G446a@ls/false) ((lambda (G4476@t) ((lambda (G4478@ls/false) (if (if G4478@ls/false (begin '#f (apply (lambda (G447a@p? G447b@n) (if (eq? (G30b4@syntax->datum G447a@p?) '>=) (begin '#f (G43a9@subversion? G447b@n)) '#f)) G4478@ls/false)) '#f) (apply (lambda (G447e@p? G447f@n) (lambda (G4482@x) (>= G4482@x (G30b4@syntax->datum G447f@n)))) G4478@ls/false) ((lambda (G4484@t) ((lambda (G4486@ls/false) (if G4486@ls/false (apply (lambda () (G30ae@syntax-violation 'import '"invalid sub-version spec" G43a6@spec G4428@x*)) G4486@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G4484@t))) (G2fc1@syntax-dispatch G4484@t '_))) G4476@t))) (G2fc1@syntax-dispatch G4476@t '(any any)))) G4468@t))) (G2fc1@syntax-dispatch G4468@t '(any any)))) G4458@t))) (G2fc1@syntax-dispatch G4458@t '(any any)))) G4446@t))) (G2fc1@syntax-dispatch G4446@t '(any . each-any)))) G4434@t))) (G2fc1@syntax-dispatch G4434@t '(any . each-any)))) G442a@t))) (G2fc1@syntax-dispatch G442a@t 'any))) G4428@x*))) (set! G43ad@version-pred (lambda (G43d8@x*) ((lambda (G43da@t) ((lambda (G43dc@ls/false) (if G43dc@ls/false (apply (lambda () (lambda (G43de@x) '#t)) G43dc@ls/false) ((lambda (G43e0@t) ((lambda (G43e2@ls/false) (if (if G43e2@ls/false (begin '#f (apply (lambda (G43e4@c G43e5@ver*) (eq? (G30b4@syntax->datum G43e4@c) 'and)) G43e2@ls/false)) '#f) (apply (lambda (G43e8@c G43e9@ver*) ((lambda (G43ec@p*) (lambda (G43ee@x) (for-all (lambda (G43f0@p) (G43f0@p G43ee@x)) G43ec@p*))) (map G43ad@version-pred G43e9@ver*))) G43e2@ls/false) ((lambda (G43f2@t) ((lambda (G43f4@ls/false) (if (if G43f4@ls/false (begin '#f (apply (lambda (G43f6@c G43f7@ver*) (eq? (G30b4@syntax->datum G43f6@c) 'or)) G43f4@ls/false)) '#f) (apply (lambda (G43fa@c G43fb@ver*) ((lambda (G43fe@p*) (lambda (G4400@x) (exists (lambda (G4402@p) (G4402@p G4400@x)) G43fe@p*))) (map G43ad@version-pred G43fb@ver*))) G43f4@ls/false) ((lambda (G4404@t) ((lambda (G4406@ls/false) (if (if G4406@ls/false (begin '#f (apply (lambda (G4408@c G4409@ver) (eq? (G30b4@syntax->datum G4408@c) 'not)) G4406@ls/false)) '#f) (apply (lambda (G440c@c G440d@ver) ((lambda (G4410@p) (lambda (G4412@x) (not (G4410@p G4412@x)))) (G43ad@version-pred G440d@ver))) G4406@ls/false) ((lambda (G4414@t) ((lambda (G4416@ls/false) (if G4416@ls/false (apply (lambda (G4418@sub*) ((lambda (G441a@p*) (lambda (G441c@x) ((letrec ((G441e@f (lambda (G4420@p* G4421@x) (if (null? G4420@p*) '#t (if (null? G4421@x) '#f (if ((car G4420@p*) (car G4421@x)) (begin '#f (G441e@f (cdr G4420@p*) (cdr G4421@x))) '#f)))))) G441e@f) G441a@p* G441c@x))) (map G43ab@subversion-pred G4418@sub*))) G4416@ls/false) ((lambda (G4424@t) ((lambda (G4426@ls/false) (if G4426@ls/false (apply (lambda () (G30ae@syntax-violation 'import '"invalid version spec" G43a6@spec G43d8@x*)) G4426@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G4424@t))) (G2fc1@syntax-dispatch G4424@t '_))) G4414@t))) (G2fc1@syntax-dispatch G4414@t 'each-any))) G4404@t))) (G2fc1@syntax-dispatch G4404@t '(any any)))) G43f2@t))) (G2fc1@syntax-dispatch G43f2@t '(any . each-any)))) G43e0@t))) (G2fc1@syntax-dispatch G43e0@t '(any . each-any)))) G43da@t))) (G2fc1@syntax-dispatch G43da@t '()))) G43d8@x*))) ((letrec ((G43ae@f (lambda (G43b0@x) ((lambda (G43b2@t) ((lambda (G43b4@ls/false) (if G43b4@ls/false (apply (lambda (G43b6@version-spec*) (values '() (G43ad@version-pred G43b6@version-spec*))) G43b4@ls/false) ((lambda (G43b8@t) ((lambda (G43ba@ls/false) (if (if G43ba@ls/false (begin '#f (apply (lambda (G43bc@x G43bd@x*) (G42dd@idsyn? G43bc@x)) G43ba@ls/false)) '#f) (apply (lambda (G43c0@x G43c1@x*) (call-with-values (lambda () (G43ae@f G43c1@x*)) (lambda (G43c6@G43c4 G43c7@G43c5) ((lambda (G43ca@pred G43cb@name) (values (cons (G30b4@syntax->datum G43c0@x) G43cb@name) G43ca@pred)) G43c7@G43c5 G43c6@G43c4)))) G43ba@ls/false) ((lambda (G43ce@t) ((lambda (G43d0@ls/false) (if G43d0@ls/false (apply (lambda () (values '() (lambda (G43d2@x) '#t))) G43d0@ls/false) ((lambda (G43d4@t) ((lambda (G43d6@ls/false) (if G43d6@ls/false (apply (lambda () (G30ae@syntax-violation '#f '"invalid import spec" G43a6@spec)) G43d6@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G43d4@t))) (G2fc1@syntax-dispatch G43d4@t '_))) G43ce@t))) (G2fc1@syntax-dispatch G43ce@t '()))) G43b8@t))) (G2fc1@syntax-dispatch G43b8@t '(any . any)))) G43b2@t))) (G2fc1@syntax-dispatch G43b2@t '(each-any)))) G43b0@x)))) G43ae@f) G43a6@spec))) '#f '#f '#f))) (set! G42ed@import-library (lambda (G4398@spec*) (call-with-values (lambda () (G42eb@parse-library-name G4398@spec*)) (lambda (G439c@G439a G439d@G439b) ((lambda (G43a0@pred G43a1@name) (begin (if (null? G43a1@name) (G30ae@syntax-violation 'import '"empty library name" G4398@spec*) (void)) ((lambda (G43a4@lib) (begin (if (not G43a4@lib) (G30ae@syntax-violation 'import '"cannot find library with required name" G43a1@name) (void)) (if (not (G43a0@pred (G2bc6@G2a2e@library-version G43a4@lib))) (G30ae@syntax-violation 'import '"library does not satisfy version specification" G4398@spec* G43a4@lib) (void)) ((G3032@imp-collector) G43a4@lib) (G2bca@G2a36@library-subst G43a4@lib))) (G2bee@G2a7e@find-library-by-name G43a1@name)))) G439d@G439b G439c@G439a))))) (set! G42ef@get-import (lambda (G430a@spec) ((lambda (G430c@t) ((lambda (G430e@ls/false) (if (if G430e@ls/false (begin '#f (apply (lambda (G4310@x G4311@x*) (not (memq (G30b4@syntax->datum G4310@x) '(for rename except only prefix library)))) G430e@ls/false)) '#f) (apply (lambda (G4314@x G4315@x*) (G42ed@import-library (cons G4314@x G4315@x*))) G430e@ls/false) ((lambda (G4318@t) ((lambda (G431a@ls/false) (if (if G431a@ls/false (begin '#f (apply (lambda (G431c@rename G431d@isp G431e@old* G431f@new*) (if (eq? (G30b4@syntax->datum G431c@rename) 'rename) (if (for-all G42dd@idsyn? G431e@old*) (begin '#f (for-all G42dd@idsyn? G431f@new*)) '#f) '#f)) G431a@ls/false)) '#f) (apply (lambda (G4324@rename G4325@isp G4326@old* G4327@new*) ((lambda (G432c@subst G432d@old* G432e@new*) ((lambda (G4332@old-label*) ((lambda (G4334@subst) (G42e1@merge-substs (map cons G432e@new* G4332@old-label*) G4334@subst)) (G42e7@rem* G432d@old* G432c@subst))) (G42e5@find* G432d@old* G432c@subst))) (G42ef@get-import G4325@isp) (map G30b4@syntax->datum G4326@old*) (map G30b4@syntax->datum G4327@new*))) G431a@ls/false) ((lambda (G4336@t) ((lambda (G4338@ls/false) (if (if G4338@ls/false (begin '#f (apply (lambda (G433a@except G433b@isp G433c@sym*) (if (eq? (G30b4@syntax->datum G433a@except) 'except) (begin '#f (for-all G42dd@idsyn? G433c@sym*)) '#f)) G4338@ls/false)) '#f) (apply (lambda (G4340@except G4341@isp G4342@sym*) ((lambda (G4346@subst) (G42e7@rem* (map G30b4@syntax->datum G4342@sym*) G4346@subst)) (G42ef@get-import G4341@isp))) G4338@ls/false) ((lambda (G4348@t) ((lambda (G434a@ls/false) (if (if G434a@ls/false (begin '#f (apply (lambda (G434c@only G434d@isp G434e@sym*) (if (eq? (G30b4@syntax->datum G434c@only) 'only) (begin '#f (for-all G42dd@idsyn? G434e@sym*)) '#f)) G434a@ls/false)) '#f) (apply (lambda (G4352@only G4353@isp G4354@sym*) ((lambda (G4358@subst G4359@sym*) ((lambda (G435c@sym*) ((lambda (G435e@lab*) (map cons G435c@sym* G435e@lab*)) (G42e5@find* G435c@sym* G4358@subst))) (G42e9@remove-dups G4359@sym*))) (G42ef@get-import G4353@isp) (map G30b4@syntax->datum G4354@sym*))) G434a@ls/false) ((lambda (G4360@t) ((lambda (G4362@ls/false) (if (if G4362@ls/false (begin '#f (apply (lambda (G4364@prefix G4365@isp G4366@p) (if (eq? (G30b4@syntax->datum G4364@prefix) 'prefix) (begin '#f (G42dd@idsyn? G4366@p)) '#f)) G4362@ls/false)) '#f) (apply (lambda (G436a@prefix G436b@isp G436c@p) ((lambda (G4370@subst G4371@prefix) (map (lambda (G4374@x) (cons (string->symbol (string-append G4371@prefix (symbol->string (car G4374@x)))) (cdr G4374@x))) G4370@subst)) (G42ef@get-import G436b@isp) (symbol->string (G30b4@syntax->datum G436c@p)))) G4362@ls/false) ((lambda (G4376@t) ((lambda (G4378@ls/false) (if (if G4378@ls/false (begin '#f (apply (lambda (G437a@library G437b@spec*) (eq? (G30b4@syntax->datum G437a@library) 'library)) G4378@ls/false)) '#f) (apply (lambda (G437e@library G437f@spec*) (G42ed@import-library G437f@spec*)) G4378@ls/false) ((lambda (G4382@t) ((lambda (G4384@ls/false) (if (if G4384@ls/false (begin '#f (apply (lambda (G4386@for G4387@isp G4388@rest) (eq? (G30b4@syntax->datum G4386@for) 'for)) G4384@ls/false)) '#f) (apply (lambda (G438c@for G438d@isp G438e@rest) (G42ef@get-import G438d@isp)) G4384@ls/false) ((lambda (G4392@t) ((lambda (G4394@ls/false) (if G4394@ls/false (apply (lambda (G4396@spec) (G30ae@syntax-violation 'import '"invalid import spec" G4396@spec)) G4394@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G4392@t))) (G2fc1@syntax-dispatch G4392@t 'any))) G4382@t))) (G2fc1@syntax-dispatch G4382@t '(any any . any)))) G4376@t))) (G2fc1@syntax-dispatch G4376@t '(any each-any)))) G4360@t))) (G2fc1@syntax-dispatch G4360@t '(any any any)))) G4348@t))) (G2fc1@syntax-dispatch G4348@t '(any any . each-any)))) G4336@t))) (G2fc1@syntax-dispatch G4336@t '(any any . each-any)))) G4318@t))) (G2fc1@syntax-dispatch G4318@t '(any any . #(each (any any)))))) G430c@t))) (G2fc1@syntax-dispatch G430c@t '(any . each-any)))) G430a@spec))) (set! G42f1@add-imports! (lambda (G42fa@imp G42fb@h) ((lambda (G42fe@subst) (for-each (lambda (G4300@x) ((lambda (G4302@name G4303@label) ((lambda (G4306@t) (if G4306@t ((lambda (G4308@l) (if (not (eq? G4308@l G4303@label)) (G42df@dup-error G4302@name) (void))) G4306@t) (hashtable-set! G42fb@h G4302@name G4303@label))) (hashtable-ref G42fb@h G4302@name '#f))) (car G4300@x) (cdr G4300@x))) G42fe@subst)) (G42ef@get-import G42fa@imp)))) (lambda (G42f2@imp*) ((letrec ((G42f4@f (lambda (G42f6@imp* G42f7@h) (if (null? G42f6@imp*) (hashtable-entries G42f7@h) (begin (G42f1@add-imports! (car G42f6@imp*) G42f7@h) (G42f4@f (cdr G42f6@imp*) G42f7@h)))))) G42f4@f) G42f2@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G302a@make-top-rib (lambda (G44de@names G44df@labels) ((lambda (G44e2@rib) (begin (vector-for-each (lambda (G44e4@name G44e5@label) (begin (if (not (symbol? G44e4@name)) (error 'make-top-rib '"BUG: not a symbol" G44e4@name) (void)) (G2d77@extend-rib/nc! G44e2@rib (G2d8e@make-stx G44e4@name G2d3c@top-mark* '() '()) G44e5@label))) G44de@names G44df@labels) G44e2@rib)) (G2d71@make-cache-rib)))) (set! G302c@make-collector (lambda () ((lambda (G44e8@ls) (lambda G44ec ((lambda (G44ed) (if (= G44ed '0) (apply (lambda () G44e8@ls) G44ec) (if (= G44ed '1) (apply (lambda (G44ea@x) (set! G44e8@ls (G2d35@set-cons G44ea@x G44e8@ls))) G44ec) (error 'apply '"invalid arg count")))) (length G44ec)))) '()))) (set! G302e@inv-collector (G2966@G289f@make-parameter (lambda G44ee@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G44f0@x) (begin (if (not (procedure? G44f0@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G44f0@x) (void)) G44f0@x)))) (set! G3030@vis-collector (G2966@G289f@make-parameter (lambda G44f2@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G44f4@x) (begin (if (not (procedure? G44f4@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G44f4@x) (void)) G44f4@x)))) (set! G3032@imp-collector (G2966@G289f@make-parameter (lambda G44f6@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G44f8@x) (begin (if (not (procedure? G44f8@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G44f8@x) (void)) G44f8@x)))) (set! G3034@chi-library-internal (lambda (G44fa@e* G44fb@rib G44fc@top?) (call-with-values (lambda () (G301e@chi-body* G44fa@e* '() '() '() '() '() '() '() G44fb@rib G44fc@top?)) (lambda (G4508@G4500 G4509@G4501 G450a@G4502 G450b@G4503 G450c@G4504 G450d@G4505 G450e@G4506 G450f@G4507) ((lambda (G4518@exp* G4519@_kwd* G451a@mod** G451b@rhs* G451c@lex* G451d@mr G451e@r G451f@e*) (values (append (apply append (reverse G451a@mod**)) G451f@e*) G451e@r G451d@mr (reverse G451c@lex*) (reverse G451b@rhs*) G4518@exp*)) G450f@G4507 G450e@G4506 G450d@G4505 G450c@G4504 G450b@G4503 G450a@G4502 G4509@G4501 G4508@G4500))))) (set! G3036@chi-interaction-expr (lambda (G4528@e G4529@rib G452a@r) (call-with-values (lambda () (G301e@chi-body* (list G4528@e) G452a@r G452a@r '() '() '() '() '() G4529@rib '#t)) (lambda (G4536@G452e G4537@G452f G4538@G4530 G4539@G4531 G453a@G4532 G453b@G4533 G453c@G4534 G453d@G4535) ((lambda (G4546@_exp* G4547@_kwd* G4548@mod** G4549@rhs* G454a@lex* G454b@mr G454c@r G454d@e*) ((lambda (G4556@e*) ((lambda (G4558@e) (values G4558@e G454c@r)) (if (null? G4556@e*) (G2d24@G2c96@build-void) (if (null? (cdr G4556@e*)) (car G4556@e*) (G2d23@G2c94@build-sequence '#f G4556@e*))))) (G2ff3@expand-interaction-rhs*/init* (reverse G454a@lex*) (reverse G4549@rhs*) (append (apply append (reverse G4548@mod**)) G454d@e*) G454c@r G454b@mr))) G453d@G4535 G453c@G4534 G453b@G4533 G453a@G4532 G4539@G4531 G4538@G4530 G4537@G452f G4536@G452e))))) (set! G3038@library-body-expander (lambda (G455a@name G455b@main-exp* G455c@imp* G455d@b* G455e@top?) ((lambda (G4565@itc) (begin (set! G4565@itc (G302c@make-collector)) ((lambda (G456a@G4566@imp-collector G456b@G4567@top-level-context G456c@G4568@imp-collector G456d@G4569@top-level-context) ((lambda (G4572@swap) (dynamic-wind G4572@swap (lambda () (call-with-values (lambda () (G3028@parse-import-spec* G455c@imp*)) (lambda (G4576@G4574 G4577@G4575) ((lambda (G457a@subst-labels G457b@subst-names) ((lambda (G457e@rib) ((lambda (G4581@wrap) (begin (set! G4581@wrap (lambda (G45ed@x) (G2d8e@make-stx G45ed@x G2d3c@top-mark* (list G457e@rib) '()))) ((lambda (G4582@b* G4583@main-exp* G4584@rtc G4585@vtc) ((lambda (G458e@G458a@inv-collector G458f@G458b@vis-collector G4590@G458c@inv-collector G4591@G458d@vis-collector) ((lambda (G4596@swap) (dynamic-wind G4596@swap (lambda () (call-with-values (lambda () (G3034@chi-library-internal G4582@b* G457e@rib G455e@top?)) (lambda (G459e@G4598 G459f@G4599 G45a0@G459a G45a1@G459b G45a2@G459c G45a3@G459d) ((lambda (G45aa@internal-exp* G45ab@rhs* G45ac@lex* G45ad@mr G45ae@r G45af@init*) (call-with-values (lambda () (G3022@parse-exports (append G4583@main-exp* G45aa@internal-exp*))) (lambda (G45b8@G45b6 G45b9@G45b7) ((lambda (G45bc@exp-id* G45bd@exp-name*) (begin (G2d7b@seal-rib! G457e@rib) ((lambda (G45c0@init*) ((lambda (G45c2@rhs*) ((lambda () (begin (G2d7d@unseal-rib! G457e@rib) ((lambda (G45c4@loc* G45c5@export-subst) ((lambda (G45c9@errstr) (begin (set! G45c9@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3098@make-export-env/macros G45ac@lex* G45c4@loc* G45ae@r)) (lambda (G45cd@G45ca G45ce@G45cb G45cf@G45cc) ((lambda (G45d3@macro* G45d4@global* G45d5@export-env) (begin (for-each (lambda (G45d9@s) ((lambda (G45db@name G45dc@label) ((lambda (G45df@p) (if G45df@p ((lambda (G45e1@b) ((lambda (G45e3@type) (if (eq? G45e3@type 'mutable) (G30ae@syntax-violation 'export G45c9@errstr G45db@name) (void))) (car G45e1@b))) (cdr G45df@p)) (void))) (assq G45dc@label G45d5@export-env))) (car G45d9@s) (cdr G45d9@s))) G45c5@export-subst) ((lambda (G45e5@invoke-body G45e6@invoke-definitions) (values (G4565@itc) (G4584@rtc) (G4585@vtc) (G2d23@G2c94@build-sequence '#f (append G45e6@invoke-definitions (list G45e5@invoke-body))) G45d3@macro* G45c5@export-subst G45d5@export-env)) (G2d26@G2c9a@build-letrec* '#f G45ac@lex* G45c2@rhs* (G3094@build-exports G45d4@global* G45c0@init*)) (map G2d1f@G2bfc@build-global-define (map cdr G45d4@global*))))) G45cf@G45cc G45ce@G45cb G45cd@G45ca))))) '#f)) (map G2d42@gen-global G45ac@lex*) (G3096@make-export-subst G45bd@exp-name* G45bc@exp-id*)))))) (G2ff5@chi-rhs* G45ab@rhs* G45ae@r G45ad@mr))) (G2fe1@chi-expr* G45af@init* G45ae@r G45ad@mr)))) G45b9@G45b7 G45b8@G45b6)))) G45a3@G459d G45a2@G459c G45a1@G459b G45a0@G459a G459f@G4599 G459e@G4598)))) G4596@swap)) (lambda () (begin ((lambda (G45e9@t) (begin (G458e@G458a@inv-collector G4590@G458c@inv-collector) (set! G4590@G458c@inv-collector G45e9@t))) (G458e@G458a@inv-collector)) ((lambda (G45eb@t) (begin (G458f@G458b@vis-collector G4591@G458d@vis-collector) (set! G4591@G458d@vis-collector G45eb@t))) (G458f@G458b@vis-collector)))))) G302e@inv-collector G3030@vis-collector G4584@rtc G4585@vtc)) (map G4581@wrap G455d@b*) (map G4581@wrap G455b@main-exp*) (G302c@make-collector) (G302c@make-collector)))) '#f)) (G302a@make-top-rib G457b@subst-names G457a@subst-labels))) G4577@G4575 G4576@G4574)))) G4572@swap)) (lambda () (begin ((lambda (G45ef@t) (begin (G456a@G4566@imp-collector G456c@G4568@imp-collector) (set! G456c@G4568@imp-collector G45ef@t))) (G456a@G4566@imp-collector)) ((lambda (G45f1@t) (begin (G456b@G4567@top-level-context G456d@G4569@top-level-context) (set! G456d@G4569@top-level-context G45f1@t))) (G456b@G4567@top-level-context)))))) G3032@imp-collector G30bc@top-level-context G4565@itc '#f))) '#f))) (set! G303a@core-library-expander (lambda (G45f3@e G45f4@verify-name) (call-with-values (lambda () (G3026@parse-library G45f3@e)) (lambda (G45fb@G45f7 G45fc@G45f8 G45fd@G45f9 G45fe@G45fa) ((lambda (G4603@b* G4604@imp* G4605@exp* G4606@name*) (call-with-values (lambda () (G3024@parse-library-name G4606@name*)) (lambda (G460d@G460b G460e@G460c) ((lambda (G4611@ver G4612@name) (begin (G45f4@verify-name G4612@name) (call-with-values (lambda () (G3038@library-body-expander G4612@name G4605@exp* G4604@imp* G4603@b* '#f)) (lambda (G461c@G4615 G461d@G4616 G461e@G4617 G461f@G4618 G4620@G4619 G4621@G461a G4622@G461b) ((lambda (G462a@export-env G462b@export-subst G462c@visit-code G462d@invoke-code G462e@visit-req* G462f@invoke-req* G4630@imp*) (values G4612@name G4611@ver G4630@imp* G462f@invoke-req* G462e@visit-req* G462d@invoke-code G462c@visit-code G462b@export-subst G462a@export-env)) G4622@G461b G4621@G461a G4620@G4619 G461f@G4618 G461e@G4617 G461d@G4616 G461c@G4615))))) G460e@G460c G460d@G460b)))) G45fe@G45fa G45fd@G45f9 G45fc@G45f8 G45fb@G45f7))))) (set! G303c@parse-top-level-program (lambda (G4638@e*) ((lambda (G463a@t) ((lambda (G463c@ls/false) (if (if G463c@ls/false (begin '#f (apply (lambda (G463e@import G463f@imp* G4640@b*) (eq? (G30b4@syntax->datum G463e@import) 'import)) G463c@ls/false)) '#f) (apply (lambda (G4644@import G4645@imp* G4646@b*) (values G4645@imp* G4646@b*)) G463c@ls/false) ((lambda (G464a@t) ((lambda (G464c@ls/false) (if (if G464c@ls/false (begin '#f (apply (lambda (G464e@import G464f@x G4650@y) (eq? (G30b4@syntax->datum G464e@import) 'import)) G464c@ls/false)) '#f) (apply (lambda (G4654@import G4655@x G4656@y) (G30ae@syntax-violation 'expander '"invalid syntax of top-level program" (G2dbe@syntax-car G4638@e*))) G464c@ls/false) ((lambda (G465a@t) ((lambda (G465c@ls/false) (if G465c@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G465c@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G465a@t))) (G2fc1@syntax-dispatch G465a@t '_))) G464a@t))) (G2fc1@syntax-dispatch G464a@t '((any . any) . any)))) G463a@t))) (G2fc1@syntax-dispatch G463a@t '((any . each-any) . each-any)))) G4638@e*))) (set! G303e@top-level-expander (lambda (G465e@e*) (call-with-values (lambda () (G303c@parse-top-level-program G465e@e*)) (lambda (G4662@G4660 G4663@G4661) ((lambda (G4666@b* G4667@imp*) (call-with-values (lambda () (G3038@library-body-expander '() '() G4667@imp* G4666@b* '#t)) (lambda (G4671@G466a G4672@G466b G4673@G466c G4674@G466d G4675@G466e G4676@G466f G4677@G4670) ((lambda (G467f@export-env G4680@export-subst G4681@visit-code G4682@invoke-code G4683@visit-req* G4684@invoke-req* G4685@imp*) (values G4684@invoke-req* G4682@invoke-code)) G4677@G4670 G4676@G466f G4675@G466e G4674@G466d G4673@G466c G4672@G466b G4671@G466a)))) G4663@G4661 G4662@G4660))))) (set! G3044@G303f (make-record-type-descriptor 'env '#f 'G3042 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G3046@G3041 '#f) (set! G3048@G3040 (make-record-constructor-descriptor G3044@G303f '#f G3046@G3041)) (set! G304b@env? (record-predicate G3044@G303f)) (set! G304d@make-env (record-constructor G3048@G3040)) (set! G304f@env-names (record-accessor G3044@G303f '0)) (set! G3051@env-labels (record-accessor G3044@G303f '1)) (set! G3053@env-itc (record-accessor G3044@G303f '2)) (set! G3055@set-env-names! (record-mutator G3044@G303f '0)) (set! G3057@set-env-labels! (record-mutator G3044@G303f '1)) (set! G3059@set-env-itc! (record-mutator G3044@G303f '2)) (set! G305b@rp (G2963@G2899@make-record-printer 'env (lambda (G468d@x G468e@p G468f@wr) (display '"#<environment>" G468e@p)))) (set! G3061@G305c (make-record-type-descriptor 'interaction-env '#f 'G305f '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3063@G305e '#f) (set! G3065@G305d (make-record-constructor-descriptor G3061@G305c '#f G3063@G305e)) (set! G3068@interaction-env? (record-predicate G3061@G305c)) (set! G306a@make-interaction-env (record-constructor G3065@G305d)) (set! G306c@interaction-env-rib (record-accessor G3061@G305c '0)) (set! G306e@interaction-env-r (record-accessor G3061@G305c '1)) (set! G3070@interaction-env-locs (record-accessor G3061@G305c '2)) (set! G3072@set-interaction-env-rib! (record-mutator G3061@G305c '0)) (set! G3074@set-interaction-env-r! (record-mutator G3061@G305c '1)) (set! G3076@set-interaction-env-locs! (record-mutator G3061@G305c '2)) (set! G3078@rp (G2963@G2899@make-record-printer 'interaction-env (lambda (G4693@x G4694@p G4695@wr) (display '"#<environment>" G4694@p)))) (set! G307a@interaction-environment-symbols (lambda () (G3082@environment-symbols (G30ba@interaction-environment)))) (set! G307c@environment-bindings (lambda (G4699@e) (vector->list (vector-map (lambda (G469b@name G469c@label) (G307e@parse-binding (cons G469b@name (G2bf4@G2a8a@imported-label->binding G469c@label)))) (G304f@env-names G4699@e) (G3051@env-labels G4699@e))))) (set! G307e@parse-binding (lambda (G469f@b) (cons (car G469f@b) ((lambda (G46a1@t) (if (memv G46a1@t '(core-prim global)) 'procedure (if (memv G46a1@t '(core-macro macro global-macro)) 'syntax (if (memv G46a1@t '($core-rtd)) 'record (if (eq? (car G469f@b) (cadr G469f@b)) 'syntax 'unknown))))) (cadr G469f@b))))) (set! G3080@environment? (lambda (G46a3@x) ((lambda (G46a5@t) (if G46a5@t G46a5@t (begin '#f (G3068@interaction-env? G46a3@x)))) (G304b@env? G46a3@x)))) (set! G3082@environment-symbols (lambda (G46a7@x) (if (G304b@env? G46a7@x) (vector->list (G304f@env-names G46a7@x)) (if (G3068@interaction-env? G46a7@x) (map values (G2d5b@rib-sym* (G306c@interaction-env-rib G46a7@x))) (assertion-violation 'environment-symbols '"not an environment" G46a7@x))))) (set! G3084@environment (lambda G46a9@imp* ((lambda (G46ab@itc) ((lambda (G46af@G46ad@imp-collector G46b0@G46ae@imp-collector) ((lambda (G46b3@swap) (dynamic-wind G46b3@swap (lambda () (call-with-values (lambda () (G3028@parse-import-spec* G46a9@imp*)) (lambda (G46b7@G46b5 G46b8@G46b6) ((lambda (G46bb@subst-labels G46bc@subst-names) (G304d@make-env G46bc@subst-names G46bb@subst-labels G46ab@itc)) G46b8@G46b6 G46b7@G46b5)))) G46b3@swap)) (lambda () ((lambda (G46bf@t) (begin (G46af@G46ad@imp-collector G46b0@G46ae@imp-collector) (set! G46b0@G46ae@imp-collector G46bf@t))) (G46af@G46ad@imp-collector))))) G3032@imp-collector G46ab@itc)) (G302c@make-collector)))) (set! G3086@null-environment (lambda (G46c1@n) (begin (if (not (eqv? G46c1@n '5)) (assertion-violation 'null-environment '"not 5" G46c1@n) (void)) (G3084@environment '(psyntax null-environment-5))))) (set! G3088@scheme-report-environment (lambda (G46c3@n) (begin (if (not (eqv? G46c3@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G46c3@n) (void)) (G3084@environment '(psyntax scheme-report-environment-5))))) (set! G308a@expand (lambda (G46c5@x G46c6@env) (if (G304b@env? G46c6@env) ((lambda (G46c9@rib) ((lambda (G46cb@x G46cc@itc G46cd@rtc G46ce@vtc) ((lambda (G46d3@x) (begin (G2d7b@seal-rib! G46c9@rib) (values G46d3@x (G46cd@rtc)))) ((lambda (G46dd@G46d5@top-level-context G46de@G46d6@inv-collector G46df@G46d7@vis-collector G46e0@G46d8@imp-collector G46e1@G46d9@top-level-context G46e2@G46da@inv-collector G46e3@G46db@vis-collector G46e4@G46dc@imp-collector) ((lambda (G46ed@swap) (dynamic-wind G46ed@swap (lambda () (G2fe5@chi-expr G46cb@x '() '())) G46ed@swap)) (lambda () (begin ((lambda (G46ef@t) (begin (G46dd@G46d5@top-level-context G46e1@G46d9@top-level-context) (set! G46e1@G46d9@top-level-context G46ef@t))) (G46dd@G46d5@top-level-context)) ((lambda (G46f1@t) (begin (G46de@G46d6@inv-collector G46e2@G46da@inv-collector) (set! G46e2@G46da@inv-collector G46f1@t))) (G46de@G46d6@inv-collector)) ((lambda (G46f3@t) (begin (G46df@G46d7@vis-collector G46e3@G46db@vis-collector) (set! G46e3@G46db@vis-collector G46f3@t))) (G46df@G46d7@vis-collector)) ((lambda (G46f5@t) (begin (G46e0@G46d8@imp-collector G46e4@G46dc@imp-collector) (set! G46e4@G46dc@imp-collector G46f5@t))) (G46e0@G46d8@imp-collector)))))) G30bc@top-level-context G302e@inv-collector G3030@vis-collector G3032@imp-collector '#f G46cd@rtc G46ce@vtc G46cc@itc))) (G2d8e@make-stx G46c5@x G2d3c@top-mark* (list G46c9@rib) '()) (G3053@env-itc G46c6@env) (G302c@make-collector) (G302c@make-collector))) (G302a@make-top-rib (G304f@env-names G46c6@env) (G3051@env-labels G46c6@env))) (if (G3068@interaction-env? G46c6@env) ((lambda (G46f7@rib G46f8@r G46f9@rtc) ((lambda (G46fd@x) (call-with-values (lambda () ((lambda (G4709@G4701@top-level-context G470a@G4702@inv-collector G470b@G4703@vis-collector G470c@G4704@imp-collector G470d@G4705@top-level-context G470e@G4706@inv-collector G470f@G4707@vis-collector G4710@G4708@imp-collector) ((lambda (G4719@swap) (dynamic-wind G4719@swap (lambda () (G3036@chi-interaction-expr G46fd@x G46f7@rib G46f8@r)) G4719@swap)) (lambda () (begin ((lambda (G471b@t) (begin (G4709@G4701@top-level-context G470d@G4705@top-level-context) (set! G470d@G4705@top-level-context G471b@t))) (G4709@G4701@top-level-context)) ((lambda (G471d@t) (begin (G470a@G4702@inv-collector G470e@G4706@inv-collector) (set! G470e@G4706@inv-collector G471d@t))) (G470a@G4702@inv-collector)) ((lambda (G471f@t) (begin (G470b@G4703@vis-collector G470f@G4707@vis-collector) (set! G470f@G4707@vis-collector G471f@t))) (G470b@G4703@vis-collector)) ((lambda (G4721@t) (begin (G470c@G4704@imp-collector G4710@G4708@imp-collector) (set! G4710@G4708@imp-collector G4721@t))) (G470c@G4704@imp-collector)))))) G30bc@top-level-context G302e@inv-collector G3030@vis-collector G3032@imp-collector G46c6@env G46f9@rtc (G302c@make-collector) (G302c@make-collector))) (lambda (G4723@G46ff G4724@G4700) ((lambda (G4727@r^ G4728@e) (begin (G3074@set-interaction-env-r! G46c6@env G4727@r^) (values G4728@e (G46f9@rtc)))) G4724@G4700 G4723@G46ff)))) (G2d8e@make-stx G46c5@x G2d3c@top-mark* (list G46f7@rib) '()))) (G306c@interaction-env-rib G46c6@env) (G306e@interaction-env-r G46c6@env) (G302c@make-collector)) (assertion-violation 'expand '"not an environment" G46c6@env))))) (set! G308c@eval (lambda (G472b@x G472c@env) (begin (if (not (G3080@environment? G472c@env)) (error 'eval '"not an environment" G472c@env) (void)) (call-with-values (lambda () (G308a@expand G472b@x G472c@env)) (lambda (G4731@G472f G4732@G4730) ((lambda (G4735@invoke-req* G4736@x) (begin (for-each G2bf5@G2a8c@invoke-library G4735@invoke-req*) (eval-core (G29be@G2972@expanded->core G4736@x)))) G4732@G4730 G4731@G472f)))))) (set! G308e@library-expander (lambda G479e ((lambda (G479f) (if (= G479f '3) (apply (lambda (G4739@x G473a@filename G473b@verify-name) ((lambda (G4740@build-visit-code G4742@visit!) (begin (set! G4740@build-visit-code (lambda (G478c@macro*) (if (null? G478c@macro*) (G2d24@G2c96@build-void) (G2d23@G2c94@build-sequence '#f (map (lambda (G478e@x) ((lambda (G4790@loc G4791@src) (list 'set! G4790@loc G4791@src)) (car G478e@x) (cddr G478e@x))) G478c@macro*))))) (set! G4742@visit! (lambda (G4784@macro*) (for-each (lambda (G4786@x) ((lambda (G4788@loc G4789@proc) (set-symbol-value! G4788@loc G4789@proc)) (car G4786@x) (cadr G4786@x))) G4784@macro*))) (call-with-values (lambda () (G303a@core-library-expander G4739@x G473b@verify-name)) (lambda (G474c@G4743 G474d@G4744 G474e@G4745 G474f@G4746 G4750@G4747 G4751@G4748 G4752@G4749 G4753@G474a G4754@G474b) ((lambda (G475e@export-env G475f@export-subst G4760@macro* G4761@invoke-code G4762@vis* G4763@inv* G4764@imp* G4765@ver G4766@name) ((lambda (G4770@id G4771@name G4772@ver G4773@imp* G4774@vis* G4775@inv* G4776@visit-proc G4777@invoke-proc G4778@visit-code G4779@invoke-code) (begin (G2bf3@G2a88@install-library G4770@id G4771@name G4772@ver G4773@imp* G4774@vis* G4775@inv* G475f@export-subst G475e@export-env G4776@visit-proc G4777@invoke-proc G4778@visit-code G4779@invoke-code '#t G473a@filename) (values G4770@id G4771@name G4772@ver G4773@imp* G4774@vis* G4775@inv* G4779@invoke-code G4778@visit-code G475f@export-subst G475e@export-env))) (gensym) G4766@name G4765@ver (map G2bf9@G2a94@library-spec G4764@imp*) (map G2bf9@G2a94@library-spec G4762@vis*) (map G2bf9@G2a94@library-spec G4763@inv*) (lambda () (G4742@visit! G4760@macro*)) (lambda () (eval-core (G29be@G2972@expanded->core G4761@invoke-code))) (G4740@build-visit-code G4760@macro*) G4761@invoke-code)) G4754@G474b G4753@G474a G4752@G4749 G4751@G4748 G4750@G4747 G474f@G4746 G474e@G4745 G474d@G4744 G474c@G4743))))) '#f '#f)) G479e) (if (= G479f '2) (apply (lambda (G4794@x G4795@filename) (G308e@library-expander G4794@x G4795@filename (lambda (G4798@x) (values)))) G479e) (if (= G479f '1) (apply (lambda (G479a@x) (G308e@library-expander G479a@x '#f (lambda (G479c@x) (values)))) G479e) (error 'apply '"invalid arg count"))))) (length G479e)))) (set! G3090@boot-library-expand (lambda (G47a0@x) (call-with-values (lambda () (G308e@library-expander G47a0@x)) (lambda (G47ac@G47a2 G47ad@G47a3 G47ae@G47a4 G47af@G47a5 G47b0@G47a6 G47b1@G47a7 G47b2@G47a8 G47b3@G47a9 G47b4@G47aa G47b5@G47ab) ((lambda (G47c0@export-env G47c1@export-subst G47c2@visit-code G47c3@invoke-code G47c4@inv* G47c5@vis* G47c6@imp* G47c7@ver G47c8@name G47c9@id) (values G47c8@name G47c3@invoke-code G47c1@export-subst G47c0@export-env)) G47b5@G47ab G47b4@G47aa G47b3@G47a9 G47b2@G47a8 G47b1@G47a7 G47b0@G47a6 G47af@G47a5 G47ae@G47a4 G47ad@G47a3 G47ac@G47a2))))) (set! G3092@rev-map-append (lambda (G47d4@f G47d5@ls G47d6@ac) (if (null? G47d5@ls) G47d6@ac (G3092@rev-map-append G47d4@f (cdr G47d5@ls) (cons (G47d4@f (car G47d5@ls)) G47d6@ac))))) (set! G3094@build-exports (lambda (G47da@lex*+loc* G47db@init*) (G2d23@G2c94@build-sequence '#f (cons (G2d24@G2c96@build-void) (G3092@rev-map-append (lambda (G47de@x) (list 'set! (cdr G47de@x) (car G47de@x))) G47da@lex*+loc* G47db@init*))))) (set! G3096@make-export-subst (lambda (G47e0@name* G47e1@id*) (map (lambda (G47e4@name G47e5@id) ((lambda (G47e8@label) (begin (if (not G47e8@label) (G30ae@syntax-violation '#f '"cannot export unbound identifier" G47e5@id) (void)) (cons G47e4@name G47e8@label))) (G2dde@id->label G47e5@id))) G47e0@name* G47e1@id*))) (set! G3098@make-export-env/macros (lambda (G47ea@lex* G47eb@loc* G47ec@r) ((lambda (G47f1@lookup) (begin (set! G47f1@lookup (lambda (G480e@x) ((letrec ((G4810@f (lambda (G4812@x G4813@lex* G4814@loc*) (if (pair? G4813@lex*) (if (eq? G4812@x (car G4813@lex*)) (car G4814@loc*) (G4810@f G4812@x (cdr G4813@lex*) (cdr G4814@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4810@f) G480e@x G47ea@lex* G47eb@loc*))) ((letrec ((G47f2@f (lambda (G47f4@r G47f5@env G47f6@global* G47f7@macro*) (if (null? G47f4@r) (values G47f5@env G47f6@global* G47f7@macro*) ((lambda (G47fc@x) ((lambda (G47fe@label G47ff@b) ((lambda (G4802@t) (if (memv G4802@t '(lexical)) ((lambda (G4804@v) ((lambda (G4806@loc G4807@type) (G47f2@f (cdr G47f4@r) (cons (cons* G47fe@label G4807@type G4806@loc) G47f5@env) (cons (cons (G2f51@lexical-var G4804@v) G4806@loc) G47f6@global*) G47f7@macro*)) (G47f1@lookup (G2f51@lexical-var G4804@v)) (if (G2f53@lexical-mutable? G4804@v) 'mutable 'global))) (G2de8@binding-value G47ff@b)) (if (memv G4802@t '(local-macro)) ((lambda (G480a@loc) (G47f2@f (cdr G47f4@r) (cons (cons* G47fe@label 'global-macro G480a@loc) G47f5@env) G47f6@global* (cons (cons G480a@loc (G2de8@binding-value G47ff@b)) G47f7@macro*))) (gensym)) (if (memv G4802@t '(local-macro!)) ((lambda (G480c@loc) (G47f2@f (cdr G47f4@r) (cons (cons* G47fe@label 'global-macro! G480c@loc) G47f5@env) G47f6@global* (cons (cons G480c@loc (G2de8@binding-value G47ff@b)) G47f7@macro*))) (gensym)) (if (memv G4802@t '($rtd $module)) (G47f2@f (cdr G47f4@r) (cons G47fc@x G47f5@env) G47f6@global* G47f7@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2de6@binding-type G47ff@b) (G2de8@binding-value G47ff@b))))))) (G2de6@binding-type G47ff@b))) (car G47fc@x) (cdr G47fc@x))) (car G47f4@r)))))) G47f2@f) G47ec@r '() '() '()))) '#f))) (set! G309a@generate-temporaries (lambda (G4818@ls) ((lambda (G481a@t) ((lambda (G481c@ls/false) (if G481c@ls/false (apply (lambda (G481e@ls) (map (lambda (G4820@x) (G2d8e@make-stx ((lambda (G4822@x) (if ((lambda (G4824@t) (if G4824@t G4824@t (begin '#f (string? G4822@x)))) (symbol? G4822@x)) (gensym G4822@x) (gensym 't))) (G30b4@syntax->datum G4820@x)) G2d3c@top-mark* '() '())) G481e@ls)) G481c@ls/false) ((lambda (G4826@t) ((lambda (G4828@ls/false) (if G4828@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4828@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G4826@t))) (G2fc1@syntax-dispatch G4826@t '_))) G481a@t))) (G2fc1@syntax-dispatch G481a@t 'each-any))) G4818@ls))) (set! G309c@free-identifier=? (lambda (G482a@x G482b@y) (if (G2dc4@id? G482a@x) (if (G2dc4@id? G482b@y) (G2dcc@free-id=? G482a@x G482b@y) (assertion-violation 'free-identifier=? '"not an identifier" G482b@y)) (assertion-violation 'free-identifier=? '"not an identifier" G482a@x)))) (set! G309e@bound-identifier=? (lambda (G482e@x G482f@y) (if (G2dc4@id? G482e@x) (if (G2dc4@id? G482f@y) (G2dca@bound-id=? G482e@x G482f@y) (assertion-violation 'bound-identifier=? '"not an identifier" G482f@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G482e@x)))) (set! G30a0@make-source-condition (lambda (G4832@x) ((lambda (G483c@G4837 G483e@G4839 G4840@G4838 G4843@G4836 G4845@make-source-condition G4847@G4834 G4849@G4835 G484b@source-condition? G484d@source-filename G484f@source-character) (begin (set! G483c@G4837 (make-record-type-descriptor '&source-information &condition-rtd 'G483a '#f '#f '#((immutable file-name) (immutable character)))) (set! G483e@G4839 '#f) (set! G4840@G4838 (make-record-constructor-descriptor G483c@G4837 &condition-rcd G483e@G4839)) (set! G4843@G4836 (record-predicate G483c@G4837)) (set! G4845@make-source-condition (record-constructor G4840@G4838)) (set! G4847@G4834 (record-accessor G483c@G4837 '0)) (set! G4849@G4835 (record-accessor G483c@G4837 '1)) (set! G484b@source-condition? (condition-predicate G483c@G4837)) (set! G484d@source-filename (condition-accessor G483c@G4837 G4847@G4834)) (set! G484f@source-character (condition-accessor G483c@G4837 G4849@G4835)) (if (pair? G4832@x) (G4845@make-source-condition (car G4832@x) (cdr G4832@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30a2@extract-position-condition (lambda (G4850@x) (G30a0@make-source-condition (G30a4@expression-position G4850@x)))) (set! G30a4@expression-position (lambda (G4852@x) (if (G2d8c@stx? G4852@x) (begin '#f ((lambda (G4854@x) (if (G295b@G2889@annotation? G4854@x) (begin '#f (G295c@G288b@annotation-source G4854@x)) '#f)) (G2d90@stx-expr G4852@x))) '#f))) (set! G30a6@assertion-error (lambda (G4856@expr G4857@pos) (raise (condition (G4b54@G4a70@make-assertion-violation) (G4b62@G4a9a@make-who-condition 'assert) (G4b34@G4a12@make-message-condition '"assertion failed") (G4b5a@G4a83@make-irritants-condition (list G4856@expr)) (G30a0@make-source-condition G4857@pos))))) (set! G30a8@syntax-error (lambda (G485a@x . G485c@args) (begin (if (not (for-all string? G485c@args)) (assertion-violation 'syntax-error '"invalid argument" G485c@args) (void)) (raise (condition (G4b34@G4a12@make-message-condition (if (null? G485c@args) '"invalid syntax" (apply string-append G485c@args))) (G4b7c@G4ae8@make-syntax-violation (G30b4@syntax->datum G485a@x) '#f) (G30a2@extract-position-condition G485a@x) (G30aa@extract-trace G485a@x)))))) (set! G30aa@extract-trace (lambda (G485e@x) ((lambda (G4867@G4862 G4869@G4864 G486b@G4863 G486e@G4861 G4870@make-trace G4872@G4860 G4874@trace? G4876@trace-form) (begin (set! G4867@G4862 (make-record-type-descriptor '&trace &condition-rtd 'G4865 '#f '#f '#((immutable form)))) (set! G4869@G4864 '#f) (set! G486b@G4863 (make-record-constructor-descriptor G4867@G4862 &condition-rcd G4869@G4864)) (set! G486e@G4861 (record-predicate G4867@G4862)) (set! G4870@make-trace (record-constructor G486b@G4863)) (set! G4872@G4860 (record-accessor G4867@G4862 '0)) (set! G4874@trace? (condition-predicate G4867@G4862)) (set! G4876@trace-form (condition-accessor G4867@G4862 G4872@G4860)) ((letrec ((G4877@f (lambda (G4879@x) (if (G2d8c@stx? G4879@x) (apply condition (G4870@make-trace G4879@x) (map G4877@f (G2d96@stx-ae* G4879@x))) (if (G295b@G2889@annotation? G4879@x) (G4870@make-trace (G2d8e@make-stx G4879@x '() '() '())) (condition)))))) G4877@f) G485e@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30ac@syntax-violation* (lambda (G487b@who G487c@msg G487d@form G487e@condition-object) (begin (if (not (string? G487c@msg)) (assertion-violation 'syntax-violation '"message is not a string" G487c@msg) (void)) ((lambda (G4883@who) (raise (condition (if G4883@who (G4b62@G4a9a@make-who-condition G4883@who) (condition)) (G4b34@G4a12@make-message-condition G487c@msg) G487e@condition-object (G30a2@extract-position-condition G487d@form) (G30aa@extract-trace G487d@form)))) (if ((lambda (G4885@t) (if G4885@t G4885@t (begin '#f (symbol? G487b@who)))) (string? G487b@who)) G487b@who (if (not G487b@who) ((lambda (G4887@t) ((lambda (G4889@ls/false) (if (if G4889@ls/false (begin '#f (apply (lambda (G488b@id) (G2dc4@id? G488b@id)) G4889@ls/false)) '#f) (apply (lambda (G488d@id) (G30b4@syntax->datum G488d@id)) G4889@ls/false) ((lambda (G488f@t) ((lambda (G4891@ls/false) (if (if G4891@ls/false (begin '#f (apply (lambda (G4893@id G4894@rest) (G2dc4@id? G4893@id)) G4891@ls/false)) '#f) (apply (lambda (G4897@id G4898@rest) (G30b4@syntax->datum G4897@id)) G4891@ls/false) ((lambda (G489b@t) ((lambda (G489d@ls/false) (if G489d@ls/false (apply (lambda () '#f) G489d@ls/false) (G30ae@syntax-violation '#f '"invalid syntax" G489b@t))) (G2fc1@syntax-dispatch G489b@t '_))) G488f@t))) (G2fc1@syntax-dispatch G488f@t '(any . any)))) G4887@t))) (G2fc1@syntax-dispatch G4887@t 'any))) G487d@form) (assertion-violation 'syntax-violation '"invalid who argument" G487b@who))))))) (set! G30ae@syntax-violation (lambda G48ad ((lambda (G48ae) (if (= G48ae '3) (apply (lambda (G489f@who G48a0@msg G48a1@form) (G30ae@syntax-violation G489f@who G48a0@msg G48a1@form '#f)) G48ad) (if (= G48ae '4) (apply (lambda (G48a5@who G48a6@msg G48a7@form G48a8@subform) (G30ac@syntax-violation* G48a5@who G48a6@msg G48a7@form (G4b7c@G4ae8@make-syntax-violation (G30b4@syntax->datum G48a7@form) (G30b4@syntax->datum G48a8@subform)))) G48ad) (error 'apply '"invalid arg count")))) (length G48ad)))) (set! G30b0@identifier? (lambda (G48af@x) (G2dc4@id? G48af@x))) (set! G30b2@datum->syntax (lambda (G48b1@id G48b2@datum) (if (G2dc4@id? G48b1@id) (G2da2@datum->stx G48b1@id G48b2@datum) (assertion-violation 'datum->syntax '"not an identifier" G48b1@id)))) (set! G30b4@syntax->datum (lambda (G48b5@x) (G2dda@stx->datum G48b5@x))) (set! G30b6@compile-r6rs-top-level (lambda (G48b7@x*) (call-with-values (lambda () (G303e@top-level-expander G48b7@x*)) (lambda (G48bb@G48b9 G48bc@G48ba) ((lambda (G48bf@invoke-code G48c0@lib*) (lambda () (begin (for-each G2bf5@G2a8c@invoke-library G48c0@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29be@G2972@expanded->core G48bf@invoke-code)) (void)) (eval-core (G29be@G2972@expanded->core G48bf@invoke-code))))) G48bc@G48ba G48bb@G48b9))))) (set! G30b8@pre-compile-r6rs-top-level (lambda (G48c3@x*) (call-with-values (lambda () (G303e@top-level-expander G48c3@x*)) (lambda (G48c7@G48c5 G48c8@G48c6) ((lambda (G48cb@invoke-code G48cc@lib*) (begin (for-each G2bf5@G2a8c@invoke-library G48cc@lib*) (G2964@G289b@compile-core (G29be@G2972@expanded->core G48cb@invoke-code)))) G48c8@G48c6 G48c7@G48c5))))) (set! G30ba@interaction-environment ((lambda (G48cf@the-env) (lambda () ((lambda (G48d1@t) (if G48d1@t G48d1@t (begin '#f ((lambda (G48d3@lib G48d4@rib) (begin ((lambda (G48d7@subst) (begin (G2d65@set-rib-sym*! G48d4@rib (map car G48d7@subst)) (G2d67@set-rib-mark**! G48d4@rib (map (lambda (G48d9@x) G2d3c@top-mark*) G48d7@subst)) (G2d69@set-rib-label*! G48d4@rib (map cdr G48d7@subst)))) (G2bca@G2a36@library-subst G48d3@lib)) ((lambda (G48db@env) (begin (set! G48cf@the-env G48db@env) G48db@env)) (G306a@make-interaction-env G48d4@rib '() '())))) (G2bee@G2a7e@find-library-by-name '(mosh interaction)) (G2d71@make-cache-rib))))) G48cf@the-env))) '#f)) (set! G30bc@top-level-context (G2966@G289f@make-parameter '#f)) (begin (set! G49ea@G30bc@top-level-context G30bc@top-level-context) (set! G49e9@G30ba@interaction-environment G30ba@interaction-environment) (set! G49e8@G30b8@pre-compile-r6rs-top-level G30b8@pre-compile-r6rs-top-level) (set! G49e7@G30b6@compile-r6rs-top-level G30b6@compile-r6rs-top-level) (set! G49e6@G30b4@syntax->datum G30b4@syntax->datum) (set! G49e5@G30b2@datum->syntax G30b2@datum->syntax) (set! G49e4@G30b0@identifier? G30b0@identifier?) (set! G49e3@G30ae@syntax-violation G30ae@syntax-violation) (set! G49e2@G30ac@syntax-violation* G30ac@syntax-violation*) (set! G49e1@G30aa@extract-trace G30aa@extract-trace) (set! G49e0@G30a8@syntax-error G30a8@syntax-error) (set! G49df@G30a6@assertion-error G30a6@assertion-error) (set! G49de@G30a4@expression-position G30a4@expression-position) (set! G49dd@G30a2@extract-position-condition G30a2@extract-position-condition) (set! G49dc@G30a0@make-source-condition G30a0@make-source-condition) (set! G49db@G309e@bound-identifier=? G309e@bound-identifier=?) (set! G49da@G309c@free-identifier=? G309c@free-identifier=?) (set! G49d9@G309a@generate-temporaries G309a@generate-temporaries) (set! G49d8@G3098@make-export-env/macros G3098@make-export-env/macros) (set! G49d7@G3096@make-export-subst G3096@make-export-subst) (set! G49d6@G3094@build-exports G3094@build-exports) (set! G49d5@G3092@rev-map-append G3092@rev-map-append) (set! G49d4@G3090@boot-library-expand G3090@boot-library-expand) (set! G49d3@G308e@library-expander G308e@library-expander) (set! G49d2@G308c@eval G308c@eval) (set! G49d1@G308a@expand G308a@expand) (set! G49d0@G3088@scheme-report-environment G3088@scheme-report-environment) (set! G49cf@G3086@null-environment G3086@null-environment) (set! G49ce@G3084@environment G3084@environment) (set! G49cd@G3082@environment-symbols G3082@environment-symbols) (set! G49cc@G3080@environment? G3080@environment?) (set! G49cb@G307e@parse-binding G307e@parse-binding) (set! G49ca@G307c@environment-bindings G307c@environment-bindings) (set! G49c9@G307a@interaction-environment-symbols G307a@interaction-environment-symbols) (set! G49c8@G3078@rp G3078@rp) (set! G49c7@G3076@set-interaction-env-locs! G3076@set-interaction-env-locs!) (set! G49c6@G3074@set-interaction-env-r! G3074@set-interaction-env-r!) (set! G49c5@G3072@set-interaction-env-rib! G3072@set-interaction-env-rib!) (set! G49c4@G3070@interaction-env-locs G3070@interaction-env-locs) (set! G49c3@G306e@interaction-env-r G306e@interaction-env-r) (set! G49c2@G306c@interaction-env-rib G306c@interaction-env-rib) (set! G49c1@G306a@make-interaction-env G306a@make-interaction-env) (set! G49c0@G3068@interaction-env? G3068@interaction-env?) (set! G49bf@G3065@G305d G3065@G305d) (set! G49be@G3063@G305e G3063@G305e) (set! G49bd@G3061@G305c G3061@G305c) (set! G49bc@G305b@rp G305b@rp) (set! G49bb@G3059@set-env-itc! G3059@set-env-itc!) (set! G49ba@G3057@set-env-labels! G3057@set-env-labels!) (set! G49b9@G3055@set-env-names! G3055@set-env-names!) (set! G49b8@G3053@env-itc G3053@env-itc) (set! G49b7@G3051@env-labels G3051@env-labels) (set! G49b6@G304f@env-names G304f@env-names) (set! G49b5@G304d@make-env G304d@make-env) (set! G49b4@G304b@env? G304b@env?) (set! G49b3@G3048@G3040 G3048@G3040) (set! G49b2@G3046@G3041 G3046@G3041) (set! G49b1@G3044@G303f G3044@G303f) (set! G49b0@G303e@top-level-expander G303e@top-level-expander) (set! G49af@G303c@parse-top-level-program G303c@parse-top-level-program) (set! G49ae@G303a@core-library-expander G303a@core-library-expander) (set! G49ad@G3038@library-body-expander G3038@library-body-expander) (set! G49ac@G3036@chi-interaction-expr G3036@chi-interaction-expr) (set! G49ab@G3034@chi-library-internal G3034@chi-library-internal) (set! G49aa@G3032@imp-collector G3032@imp-collector) (set! G49a9@G3030@vis-collector G3030@vis-collector) (set! G49a8@G302e@inv-collector G302e@inv-collector) (set! G49a7@G302c@make-collector G302c@make-collector) (set! G49a6@G302a@make-top-rib G302a@make-top-rib) (set! G49a5@G3028@parse-import-spec* G3028@parse-import-spec*) (set! G49a4@G3026@parse-library G3026@parse-library) (set! G49a3@G3024@parse-library-name G3024@parse-library-name) (set! G49a2@G3022@parse-exports G3022@parse-exports) (set! G49a1@G3020@expand-transformer G3020@expand-transformer) (set! G49a0@G301e@chi-body* G301e@chi-body*) (set! G499f@G301c@chi-internal-module G301c@chi-internal-module) (set! G499e@G301a@module-interface-exp-id* G301a@module-interface-exp-id*) (set! G499d@G3018@set-module-interface-exp-lab-vec! G3018@set-module-interface-exp-lab-vec!) (set! G499c@G3016@set-module-interface-exp-id-vec! G3016@set-module-interface-exp-id-vec!) (set! G499b@G3014@set-module-interface-first-mark! G3014@set-module-interface-first-mark!) (set! G499a@G3012@module-interface-exp-lab-vec G3012@module-interface-exp-lab-vec) (set! G4999@G3010@module-interface-exp-id-vec G3010@module-interface-exp-id-vec) (set! G4998@G300e@module-interface-first-mark G300e@module-interface-first-mark) (set! G4997@G300c@make-module-interface G300c@make-module-interface) (set! G4996@G300a@module-interface? G300a@module-interface?) (set! G4995@G3007@G2fff G3007@G2fff) (set! G4994@G3005@G3000 G3005@G3000) (set! G4993@G3003@G2ffe G3003@G2ffe) (set! G4992@G2ffd@parse-module G2ffd@parse-module) (set! G4991@G2ffb@chi-internal G2ffb@chi-internal) (set! G4990@G2ff9@find-dups G2ff9@find-dups) (set! G498f@G2ff7@find-bound=? G2ff7@find-bound=?) (set! G498e@G2ff5@chi-rhs* G2ff5@chi-rhs*) (set! G498d@G2ff3@expand-interaction-rhs*/init* G2ff3@expand-interaction-rhs*/init*) (set! G498c@G2ff1@chi-rhs G2ff1@chi-rhs) (set! G498b@G2fef@chi-defun G2fef@chi-defun) (set! G498a@G2fed@chi-lambda-clause* G2fed@chi-lambda-clause*) (set! G4989@G2feb@chi-lambda-clause G2feb@chi-lambda-clause) (set! G4988@G2fe9@verify-formals G2fe9@verify-formals) (set! G4987@G2fe7@chi-set! G2fe7@chi-set!) (set! G4986@G2fe5@chi-expr G2fe5@chi-expr) (set! G4985@G2fe3@chi-application G2fe3@chi-application) (set! G4984@G2fe1@chi-expr* G2fe1@chi-expr*) (set! G4983@G2fdf@chi-global-macro G2fdf@chi-global-macro) (set! G4982@G2fdd@chi-local-macro G2fdd@chi-local-macro) (set! G4981@G2fdb@chi-macro G2fdb@chi-macro) (set! G4980@G2fd9@do-macro-call G2fd9@do-macro-call) (set! G497f@G2fd7@local-macro-transformer G2fd7@local-macro-transformer) (set! G497e@G2fd5@macro-transformer G2fd5@macro-transformer) (set! G497d@G2fd3@symbol-macro G2fd3@symbol-macro) (set! G497c@G2fd1@file-options-macro G2fd1@file-options-macro) (set! G497b@G2fcf@core-macro-transformer G2fcf@core-macro-transformer) (set! G497a@G2fcd@syntax-transformer G2fcd@syntax-transformer) (set! G4979@G2fcb@ellipsis-map G2fcb@ellipsis-map) (set! G4978@G2fc9@syntax-case-transformer G2fc9@syntax-case-transformer) (set! G4977@G2fc7@verify-literals G2fc7@verify-literals) (set! G4976@G2fc5@underscore? G2fc5@underscore?) (set! G4975@G2fc3@ellipsis? G2fc3@ellipsis?) (set! G4974@G2fc1@syntax-dispatch G2fc1@syntax-dispatch) (set! G4973@G2fbf@convert-pattern G2fbf@convert-pattern) (set! G4972@G2fbd@foreign-call-transformer G2fbd@foreign-call-transformer) (set! G4971@G2fbb@parameterize-macro G2fbb@parameterize-macro) (set! G4970@G2fb9@incorrect-usage-macro G2fb9@incorrect-usage-macro) (set! G496f@G2fb7@define-condition-type-macro G2fb7@define-condition-type-macro) (set! G496e@G2fb5@define-record-type-macro G2fb5@define-record-type-macro) (set! G496d@G2fb3@define-struct-macro G2fb3@define-struct-macro) (set! G496c@G2fb1@quasisyntax-macro G2fb1@quasisyntax-macro) (set! G496b@G2faf@quasiquote-macro G2faf@quasiquote-macro) (set! G496a@G2fad@syntax-rules-macro G2fad@syntax-rules-macro) (set! G4969@G2fab@include-into-macro G2fab@include-into-macro) (set! G4968@G2fa9@include-macro G2fa9@include-macro) (set! G4967@G2fa7@do-include G2fa7@do-include) (set! G4966@G2fa5@cond-macro G2fa5@cond-macro) (set! G4965@G2fa3@and-macro G2fa3@and-macro) (set! G4964@G2fa1@or-macro G2fa1@or-macro) (set! G4963@G2f9f@let*-macro G2f9f@let*-macro) (set! G4962@G2f9d@do-macro G2f9d@do-macro) (set! G4961@G2f9b@identifier-syntax-macro G2f9b@identifier-syntax-macro) (set! G4960@G2f99@endianness-macro G2f99@endianness-macro) (set! G495f@G2f97@assert-macro G2f97@assert-macro) (set! G495e@G2f95@delay-macro G2f95@delay-macro) (set! G495d@G2f93@time-macro G2f93@time-macro) (set! G495c@G2f91@define-enumeration-macro G2f91@define-enumeration-macro) (set! G495b@G2f8f@guard-macro G2f8f@guard-macro) (set! G495a@G2f8d@trace-letrec-syntax-macro G2f8d@trace-letrec-syntax-macro) (set! G4959@G2f8b@trace-let-syntax-macro G2f8b@trace-let-syntax-macro) (set! G4958@G2f89@trace-let/rec-syntax G2f89@trace-let/rec-syntax) (set! G4957@G2f87@trace-define-syntax-macro G2f87@trace-define-syntax-macro) (set! G4956@G2f85@trace-define-macro G2f85@trace-define-macro) (set! G4955@G2f83@trace-lambda-macro G2f83@trace-lambda-macro) (set! G4954@G2f81@let*-values-macro G2f81@let*-values-macro) (set! G4953@G2f7f@let-values-macro G2f7f@let-values-macro) (set! G4952@G2f7d@let-macro G2f7d@let-macro) (set! G4951@G2f7b@invalid-fmls-error G2f7b@invalid-fmls-error) (set! G4950@G2f79@with-syntax-macro G2f79@with-syntax-macro) (set! G494f@G2f77@bless G2f77@bless) (set! G494e@G2f75@lambda-transformer G2f75@lambda-transformer) (set! G494d@G2f73@case-lambda-transformer G2f73@case-lambda-transformer) (set! G494c@G2f71@quote-transformer G2f71@quote-transformer) (set! G494b@G2f6f@case-macro G2f6f@case-macro) (set! G494a@G2f6d@if-transformer G2f6d@if-transformer) (set! G4949@G2f6b@unless-macro G2f6b@unless-macro) (set! G4948@G2f69@when-macro G2f69@when-macro) (set! G4947@G2f67@record-constructor-descriptor-transformer G2f67@record-constructor-descriptor-transformer) (set! G4946@G2f65@record-type-descriptor-transformer G2f65@record-type-descriptor-transformer) (set! G4945@G2f63@type-descriptor-transformer G2f63@type-descriptor-transformer) (set! G4944@G2f61@fluid-let-syntax-transformer G2f61@fluid-let-syntax-transformer) (set! G4943@G2f5f@letrec*-transformer G2f5f@letrec*-transformer) (set! G4942@G2f5d@letrec-transformer G2f5d@letrec-transformer) (set! G4941@G2f5b@letrec-helper G2f5b@letrec-helper) (set! G4940@G2f59@add-lexicals G2f59@add-lexicals) (set! G493f@G2f57@add-lexical G2f57@add-lexical) (set! G493e@G2f55@set-lexical-mutable! G2f55@set-lexical-mutable!) (set! G493d@G2f53@lexical-mutable? G2f53@lexical-mutable?) (set! G493c@G2f51@lexical-var G2f51@lexical-var) (set! G493b@G2f4f@scheme-stx G2f4f@scheme-stx) (set! G493a@G2f4d@scheme-stx-hashtable G2f4d@scheme-stx-hashtable) (set! G4939@G2f4b@parse-define-syntax G2f4b@parse-define-syntax) (set! G4938@G2f49@parse-define G2f49@parse-define) (set! G4937@G2e04@make-eval-transformer G2e04@make-eval-transformer) (set! G4936@G2e02@variable-transformer-procedure G2e02@variable-transformer-procedure) (set! G4935@G2e00@variable-transformer? G2e00@variable-transformer?) (set! G4934@G2dfe@make-variable-transformer G2dfe@make-variable-transformer) (set! G4933@G2dfc@sanitize-binding G2dfc@sanitize-binding) (set! G4932@G2dec@syntax-type G2dec@syntax-type) (set! G4931@G2dea@raise-unbound-error G2dea@raise-unbound-error) (set! G4930@G2de8@binding-value G2de8@binding-value) (set! G492f@G2de6@binding-type G2de6@binding-type) (set! G492e@G2de4@make-binding G2de4@make-binding) (set! G492d@G2de2@label->binding G2de2@label->binding) (set! G492c@G2de0@id->real-label G2de0@id->real-label) (set! G492b@G2dde@id->label G2dde@id->label) (set! G492a@G2ddc@same-marks*? G2ddc@same-marks*?) (set! G4929@G2dda@stx->datum G2dda@stx->datum) (set! G4928@G2dd8@strip G2dd8@strip) (set! G4927@G2dd6@strip-annotations G2dd6@strip-annotations) (set! G4926@G2dd4@self-evaluating? G2dd4@self-evaluating?) (set! G4925@G2dd2@bound-id-member? G2dd2@bound-id-member?) (set! G4924@G2dd0@distinct-bound-ids? G2dd0@distinct-bound-ids?) (set! G4923@G2dce@valid-bound-ids? G2dce@valid-bound-ids?) (set! G4922@G2dcc@free-id=? G2dcc@free-id=?) (set! G4921@G2dca@bound-id=? G2dca@bound-id=?) (set! G4920@G2dc8@same-marks? G2dc8@same-marks?) (set! G491f@G2dc6@id->sym G2dc6@id->sym) (set! G491e@G2dc4@id? G2dc4@id?) (set! G491d@G2dc2@syntax->list G2dc2@syntax->list) (set! G491c@G2dc0@syntax-cdr G2dc0@syntax-cdr) (set! G491b@G2dbe@syntax-car G2dbe@syntax-car) (set! G491a@G2dbc@syntax-list? G2dbc@syntax-list?) (set! G4919@G2dba@syntax-null? G2dba@syntax-null?) (set! G4918@G2db8@syntax-vector? G2db8@syntax-vector?) (set! G4917@G2db6@syntax-pair? G2db6@syntax-pair?) (set! G4916@G2db4@syntax-vector->list G2db4@syntax-vector->list) (set! G4915@G2db2@syntax-kind? G2db2@syntax-kind?) (set! G4914@G2db0@add-subst G2db0@add-subst) (set! G4913@G2dae@add-mark G2dae@add-mark) (set! G4912@G2dac@mkstx G2dac@mkstx) (set! G4911@G2daa@join-wraps G2daa@join-wraps) (set! G4910@G2da8@anti-mark? G2da8@anti-mark?) (set! G490f@G2da6@anti-mark G2da6@anti-mark) (set! G490e@G2da4@gen-mark G2da4@gen-mark) (set! G490d@G2da2@datum->stx G2da2@datum->stx) (set! G490c@G2da0@rp G2da0@rp) (set! G490b@G2d9e@set-stx-ae*! G2d9e@set-stx-ae*!) (set! G490a@G2d9c@set-stx-subst*! G2d9c@set-stx-subst*!) (set! G4909@G2d9a@set-stx-mark*! G2d9a@set-stx-mark*!) (set! G4908@G2d98@set-stx-expr! G2d98@set-stx-expr!) (set! G4907@G2d96@stx-ae* G2d96@stx-ae*) (set! G4906@G2d94@stx-subst* G2d94@stx-subst*) (set! G4905@G2d92@stx-mark* G2d92@stx-mark*) (set! G4904@G2d90@stx-expr G2d90@stx-expr) (set! G4903@G2d8e@make-stx G2d8e@make-stx) (set! G4902@G2d8c@stx? G2d8c@stx?) (set! G4901@G2d89@G2d81 G2d89@G2d81) (set! G4900@G2d87@G2d82 G2d87@G2d82) (set! G48ff@G2d85@G2d80 G2d85@G2d80) (set! G48fe@G2d7f@make-full-rib G2d7f@make-full-rib) (set! G48fd@G2d7d@unseal-rib! G2d7d@unseal-rib!) (set! G48fc@G2d7b@seal-rib! G2d7b@seal-rib!) (set! G48fb@G2d79@make-rib-map G2d79@make-rib-map) (set! G48fa@G2d77@extend-rib/nc! G2d77@extend-rib/nc!) (set! G48f9@G2d75@extend-rib! G2d75@extend-rib!) (set! G48f8@G2d73@find-label G2d73@find-label) (set! G48f7@G2d71@make-cache-rib G2d71@make-cache-rib) (set! G48f6@G2d6f@make-empty-rib G2d6f@make-empty-rib) (set! G48f5@G2d6d@set-rib-cache! G2d6d@set-rib-cache!) (set! G48f4@G2d6b@set-rib-sealed/freq! G2d6b@set-rib-sealed/freq!) (set! G48f3@G2d69@set-rib-label*! G2d69@set-rib-label*!) (set! G48f2@G2d67@set-rib-mark**! G2d67@set-rib-mark**!) (set! G48f1@G2d65@set-rib-sym*! G2d65@set-rib-sym*!) (set! G48f0@G2d63@rib-cache G2d63@rib-cache) (set! G48ef@G2d61@rib-sealed/freq G2d61@rib-sealed/freq) (set! G48ee@G2d5f@rib-label* G2d5f@rib-label*) (set! G48ed@G2d5d@rib-mark** G2d5d@rib-mark**) (set! G48ec@G2d5b@rib-sym* G2d5b@rib-sym*) (set! G48eb@G2d59@make-rib G2d59@make-rib) (set! G48ea@G2d57@rib? G2d57@rib?) (set! G48e9@G2d54@G2d4c G2d54@G2d4c) (set! G48e8@G2d52@G2d4d G2d52@G2d4d) (set! G48e7@G2d50@G2d4b G2d50@G2d4b) (set! G48e6@G2d4a@gen-define-label G2d4a@gen-define-label) (set! G48e5@G2d48@gen-define-label+loc G2d48@gen-define-label+loc) (set! G48e4@G2d46@gen-top-level-label G2d46@gen-top-level-label) (set! G48e3@G2d44@gen-label G2d44@gen-label) (set! G48e2@G2d42@gen-global G2d42@gen-global) (set! G48e1@G2d40@gen-lexical G2d40@gen-lexical) (set! G48e0@G2d3e@top-marked? G2d3e@top-marked?) (set! G48df@G2d3c@top-mark* G2d3c@top-mark*) (set! G48de@G2d37@set-union G2d37@set-union) (set! G48dd@G2d35@set-cons G2d35@set-cons) (G2beb@G2a78@current-library-expander G308e@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G49f4@G49ef G49f6@G49f1 G49f8@G49f0 G49fb@&condition? G49fd@make-&condition G49ff@&condition-rtd G4a01@&condition-rcd G4a09@G4a04 G4a0b@G4a06 G4a0d@G4a05 G4a10@G4a03 G4a12@make-message-condition G4a14@G4a02 G4a16@message-condition? G4a18@condition-message G4a1f@G4a1a G4a21@G4a1c G4a23@G4a1b G4a26@G4a19 G4a28@make-warning G4a2a@warning? G4a31@G4a2c G4a33@G4a2e G4a35@G4a2d G4a38@G4a2b G4a3a@make-serious-condition G4a3c@serious-condition? G4a43@G4a3e G4a45@G4a40 G4a47@G4a3f G4a4a@G4a3d G4a4c@make-error G4a4e@error? G4a55@G4a50 G4a57@G4a52 G4a59@G4a51 G4a5c@G4a4f G4a5e@make-violation G4a60@violation? G4a67@G4a62 G4a69@G4a64 G4a6b@G4a63 G4a6e@G4a61 G4a70@make-assertion-violation G4a72@assertion-violation? G4a7a@G4a75 G4a7c@G4a77 G4a7e@G4a76 G4a81@G4a74 G4a83@make-irritants-condition G4a85@G4a73 G4a87@irritants-condition? G4a89@condition-irritants G4a91@G4a8c G4a93@G4a8e G4a95@G4a8d G4a98@G4a8b G4a9a@make-who-condition G4a9c@G4a8a G4a9e@who-condition? G4aa0@condition-who G4aa7@G4aa2 G4aa9@G4aa4 G4aab@G4aa3 G4aae@G4aa1 G4ab0@make-non-continuable-violation G4ab2@non-continuable-violation? G4ab9@G4ab4 G4abb@G4ab6 G4abd@G4ab5 G4ac0@G4ab3 G4ac2@make-implementation-restriction-violation G4ac4@implementation-restriction-violation? G4acb@G4ac6 G4acd@G4ac8 G4acf@G4ac7 G4ad2@G4ac5 G4ad4@make-lexical-violation G4ad6@lexical-violation? G4adf@G4ada G4ae1@G4adc G4ae3@G4adb G4ae6@G4ad9 G4ae8@make-syntax-violation G4aea@G4ad7 G4aec@G4ad8 G4aee@syntax-violation? G4af0@syntax-violation-form G4af2@syntax-violation-subform G4af9@G4af4 G4afb@G4af6 G4afd@G4af5 G4b00@G4af3 G4b02@make-undefined-violation G4b04@undefined-violation? G4b0b@G4b06 G4b0d@G4b08 G4b0f@G4b07 G4b12@G4b05 G4b14@make-no-infinities-violation G4b16@no-infinities-violation? G4b1d@G4b18 G4b1f@G4b1a G4b21@G4b19 G4b24@G4b17 G4b26@make-no-nans-violation G4b28@no-nans-violation?) (begin (set! G49f4@G49ef (make-record-type-descriptor '&condition '#f 'G49f2 '#f '#f '#())) (set! G49f6@G49f1 '#f) (set! G49f8@G49f0 (make-record-constructor-descriptor G49f4@G49ef '#f G49f6@G49f1)) (set! G49fb@&condition? (record-predicate G49f4@G49ef)) (set! G49fd@make-&condition (record-constructor G49f8@G49f0)) (set! G49ff@&condition-rtd G49f4@G49ef) (set! G4a01@&condition-rcd G49f8@G49f0) (set! G4a09@G4a04 (make-record-type-descriptor '&message G49f4@G49ef 'G4a07 '#f '#f '#((immutable message)))) (set! G4a0b@G4a06 '#f) (set! G4a0d@G4a05 (make-record-constructor-descriptor G4a09@G4a04 G49f8@G49f0 G4a0b@G4a06)) (set! G4a10@G4a03 (record-predicate G4a09@G4a04)) (set! G4a12@make-message-condition (record-constructor G4a0d@G4a05)) (set! G4a14@G4a02 (record-accessor G4a09@G4a04 '0)) (set! G4a16@message-condition? (condition-predicate G4a09@G4a04)) (set! G4a18@condition-message (condition-accessor G4a09@G4a04 G4a14@G4a02)) (set! G4a1f@G4a1a (make-record-type-descriptor '&warning G49f4@G49ef 'G4a1d '#f '#f '#())) (set! G4a21@G4a1c '#f) (set! G4a23@G4a1b (make-record-constructor-descriptor G4a1f@G4a1a G49f8@G49f0 G4a21@G4a1c)) (set! G4a26@G4a19 (record-predicate G4a1f@G4a1a)) (set! G4a28@make-warning (record-constructor G4a23@G4a1b)) (set! G4a2a@warning? (condition-predicate G4a1f@G4a1a)) (set! G4a31@G4a2c (make-record-type-descriptor '&serious G49f4@G49ef 'G4a2f '#f '#f '#())) (set! G4a33@G4a2e '#f) (set! G4a35@G4a2d (make-record-constructor-descriptor G4a31@G4a2c G49f8@G49f0 G4a33@G4a2e)) (set! G4a38@G4a2b (record-predicate G4a31@G4a2c)) (set! G4a3a@make-serious-condition (record-constructor G4a35@G4a2d)) (set! G4a3c@serious-condition? (condition-predicate G4a31@G4a2c)) (set! G4a43@G4a3e (make-record-type-descriptor '&error G4a31@G4a2c 'G4a41 '#f '#f '#())) (set! G4a45@G4a40 '#f) (set! G4a47@G4a3f (make-record-constructor-descriptor G4a43@G4a3e G4a35@G4a2d G4a45@G4a40)) (set! G4a4a@G4a3d (record-predicate G4a43@G4a3e)) (set! G4a4c@make-error (record-constructor G4a47@G4a3f)) (set! G4a4e@error? (condition-predicate G4a43@G4a3e)) (set! G4a55@G4a50 (make-record-type-descriptor '&violation G4a31@G4a2c 'G4a53 '#f '#f '#())) (set! G4a57@G4a52 '#f) (set! G4a59@G4a51 (make-record-constructor-descriptor G4a55@G4a50 G4a35@G4a2d G4a57@G4a52)) (set! G4a5c@G4a4f (record-predicate G4a55@G4a50)) (set! G4a5e@make-violation (record-constructor G4a59@G4a51)) (set! G4a60@violation? (condition-predicate G4a55@G4a50)) (set! G4a67@G4a62 (make-record-type-descriptor '&assertion G4a55@G4a50 'G4a65 '#f '#f '#())) (set! G4a69@G4a64 '#f) (set! G4a6b@G4a63 (make-record-constructor-descriptor G4a67@G4a62 G4a59@G4a51 G4a69@G4a64)) (set! G4a6e@G4a61 (record-predicate G4a67@G4a62)) (set! G4a70@make-assertion-violation (record-constructor G4a6b@G4a63)) (set! G4a72@assertion-violation? (condition-predicate G4a67@G4a62)) (set! G4a7a@G4a75 (make-record-type-descriptor '&irritants G49f4@G49ef 'G4a78 '#f '#f '#((immutable irritants)))) (set! G4a7c@G4a77 '#f) (set! G4a7e@G4a76 (make-record-constructor-descriptor G4a7a@G4a75 G49f8@G49f0 G4a7c@G4a77)) (set! G4a81@G4a74 (record-predicate G4a7a@G4a75)) (set! G4a83@make-irritants-condition (record-constructor G4a7e@G4a76)) (set! G4a85@G4a73 (record-accessor G4a7a@G4a75 '0)) (set! G4a87@irritants-condition? (condition-predicate G4a7a@G4a75)) (set! G4a89@condition-irritants (condition-accessor G4a7a@G4a75 G4a85@G4a73)) (set! G4a91@G4a8c (make-record-type-descriptor '&who G49f4@G49ef 'G4a8f '#f '#f '#((immutable who)))) (set! G4a93@G4a8e '#f) (set! G4a95@G4a8d (make-record-constructor-descriptor G4a91@G4a8c G49f8@G49f0 G4a93@G4a8e)) (set! G4a98@G4a8b (record-predicate G4a91@G4a8c)) (set! G4a9a@make-who-condition (record-constructor G4a95@G4a8d)) (set! G4a9c@G4a8a (record-accessor G4a91@G4a8c '0)) (set! G4a9e@who-condition? (condition-predicate G4a91@G4a8c)) (set! G4aa0@condition-who (condition-accessor G4a91@G4a8c G4a9c@G4a8a)) (set! G4aa7@G4aa2 (make-record-type-descriptor '&non-continuable G4a55@G4a50 'G4aa5 '#f '#f '#())) (set! G4aa9@G4aa4 '#f) (set! G4aab@G4aa3 (make-record-constructor-descriptor G4aa7@G4aa2 G4a59@G4a51 G4aa9@G4aa4)) (set! G4aae@G4aa1 (record-predicate G4aa7@G4aa2)) (set! G4ab0@make-non-continuable-violation (record-constructor G4aab@G4aa3)) (set! G4ab2@non-continuable-violation? (condition-predicate G4aa7@G4aa2)) (set! G4ab9@G4ab4 (make-record-type-descriptor '&implementation-restriction G4a55@G4a50 'G4ab7 '#f '#f '#())) (set! G4abb@G4ab6 '#f) (set! G4abd@G4ab5 (make-record-constructor-descriptor G4ab9@G4ab4 G4a59@G4a51 G4abb@G4ab6)) (set! G4ac0@G4ab3 (record-predicate G4ab9@G4ab4)) (set! G4ac2@make-implementation-restriction-violation (record-constructor G4abd@G4ab5)) (set! G4ac4@implementation-restriction-violation? (condition-predicate G4ab9@G4ab4)) (set! G4acb@G4ac6 (make-record-type-descriptor '&lexical G4a55@G4a50 'G4ac9 '#f '#f '#())) (set! G4acd@G4ac8 '#f) (set! G4acf@G4ac7 (make-record-constructor-descriptor G4acb@G4ac6 G4a59@G4a51 G4acd@G4ac8)) (set! G4ad2@G4ac5 (record-predicate G4acb@G4ac6)) (set! G4ad4@make-lexical-violation (record-constructor G4acf@G4ac7)) (set! G4ad6@lexical-violation? (condition-predicate G4acb@G4ac6)) (set! G4adf@G4ada (make-record-type-descriptor '&syntax G4a55@G4a50 'G4add '#f '#f '#((immutable form) (immutable subform)))) (set! G4ae1@G4adc '#f) (set! G4ae3@G4adb (make-record-constructor-descriptor G4adf@G4ada G4a59@G4a51 G4ae1@G4adc)) (set! G4ae6@G4ad9 (record-predicate G4adf@G4ada)) (set! G4ae8@make-syntax-violation (record-constructor G4ae3@G4adb)) (set! G4aea@G4ad7 (record-accessor G4adf@G4ada '0)) (set! G4aec@G4ad8 (record-accessor G4adf@G4ada '1)) (set! G4aee@syntax-violation? (condition-predicate G4adf@G4ada)) (set! G4af0@syntax-violation-form (condition-accessor G4adf@G4ada G4aea@G4ad7)) (set! G4af2@syntax-violation-subform (condition-accessor G4adf@G4ada G4aec@G4ad8)) (set! G4af9@G4af4 (make-record-type-descriptor '&undefined G4a55@G4a50 'G4af7 '#f '#f '#())) (set! G4afb@G4af6 '#f) (set! G4afd@G4af5 (make-record-constructor-descriptor G4af9@G4af4 G4a59@G4a51 G4afb@G4af6)) (set! G4b00@G4af3 (record-predicate G4af9@G4af4)) (set! G4b02@make-undefined-violation (record-constructor G4afd@G4af5)) (set! G4b04@undefined-violation? (condition-predicate G4af9@G4af4)) (set! G4b0b@G4b06 (make-record-type-descriptor '&no-infinities G4ab9@G4ab4 'G4b09 '#f '#f '#())) (set! G4b0d@G4b08 '#f) (set! G4b0f@G4b07 (make-record-constructor-descriptor G4b0b@G4b06 G4abd@G4ab5 G4b0d@G4b08)) (set! G4b12@G4b05 (record-predicate G4b0b@G4b06)) (set! G4b14@make-no-infinities-violation (record-constructor G4b0f@G4b07)) (set! G4b16@no-infinities-violation? (condition-predicate G4b0b@G4b06)) (set! G4b1d@G4b18 (make-record-type-descriptor '&no-nans G4ab9@G4ab4 'G4b1b '#f '#f '#())) (set! G4b1f@G4b1a '#f) (set! G4b21@G4b19 (make-record-constructor-descriptor G4b1d@G4b18 G4abd@G4ab5 G4b1f@G4b1a)) (set! G4b24@G4b17 (record-predicate G4b1d@G4b18)) (set! G4b26@make-no-nans-violation (record-constructor G4b21@G4b19)) (set! G4b28@no-nans-violation? (condition-predicate G4b1d@G4b18)) (begin (set! G4b93@G4b28@no-nans-violation? G4b28@no-nans-violation?) (set! G4b92@G4b26@make-no-nans-violation G4b26@make-no-nans-violation) (set! G4b91@G4b24@G4b17 G4b24@G4b17) (set! G4b90@G4b21@G4b19 G4b21@G4b19) (set! G4b8f@G4b1f@G4b1a G4b1f@G4b1a) (set! G4b8e@G4b1d@G4b18 G4b1d@G4b18) (set! G4b8d@G4b16@no-infinities-violation? G4b16@no-infinities-violation?) (set! G4b8c@G4b14@make-no-infinities-violation G4b14@make-no-infinities-violation) (set! G4b8b@G4b12@G4b05 G4b12@G4b05) (set! G4b8a@G4b0f@G4b07 G4b0f@G4b07) (set! G4b89@G4b0d@G4b08 G4b0d@G4b08) (set! G4b88@G4b0b@G4b06 G4b0b@G4b06) (set! G4b87@G4b04@undefined-violation? G4b04@undefined-violation?) (set! G4b86@G4b02@make-undefined-violation G4b02@make-undefined-violation) (set! G4b85@G4b00@G4af3 G4b00@G4af3) (set! G4b84@G4afd@G4af5 G4afd@G4af5) (set! G4b83@G4afb@G4af6 G4afb@G4af6) (set! G4b82@G4af9@G4af4 G4af9@G4af4) (set! G4b81@G4af2@syntax-violation-subform G4af2@syntax-violation-subform) (set! G4b80@G4af0@syntax-violation-form G4af0@syntax-violation-form) (set! G4b7f@G4aee@syntax-violation? G4aee@syntax-violation?) (set! G4b7e@G4aec@G4ad8 G4aec@G4ad8) (set! G4b7d@G4aea@G4ad7 G4aea@G4ad7) (set! G4b7c@G4ae8@make-syntax-violation G4ae8@make-syntax-violation) (set! G4b7b@G4ae6@G4ad9 G4ae6@G4ad9) (set! G4b7a@G4ae3@G4adb G4ae3@G4adb) (set! G4b79@G4ae1@G4adc G4ae1@G4adc) (set! G4b78@G4adf@G4ada G4adf@G4ada) (set! G4b77@G4ad6@lexical-violation? G4ad6@lexical-violation?) (set! G4b76@G4ad4@make-lexical-violation G4ad4@make-lexical-violation) (set! G4b75@G4ad2@G4ac5 G4ad2@G4ac5) (set! G4b74@G4acf@G4ac7 G4acf@G4ac7) (set! G4b73@G4acd@G4ac8 G4acd@G4ac8) (set! G4b72@G4acb@G4ac6 G4acb@G4ac6) (set! G4b71@G4ac4@implementation-restriction-violation? G4ac4@implementation-restriction-violation?) (set! G4b70@G4ac2@make-implementation-restriction-violation G4ac2@make-implementation-restriction-violation) (set! G4b6f@G4ac0@G4ab3 G4ac0@G4ab3) (set! G4b6e@G4abd@G4ab5 G4abd@G4ab5) (set! G4b6d@G4abb@G4ab6 G4abb@G4ab6) (set! G4b6c@G4ab9@G4ab4 G4ab9@G4ab4) (set! G4b6b@G4ab2@non-continuable-violation? G4ab2@non-continuable-violation?) (set! G4b6a@G4ab0@make-non-continuable-violation G4ab0@make-non-continuable-violation) (set! G4b69@G4aae@G4aa1 G4aae@G4aa1) (set! G4b68@G4aab@G4aa3 G4aab@G4aa3) (set! G4b67@G4aa9@G4aa4 G4aa9@G4aa4) (set! G4b66@G4aa7@G4aa2 G4aa7@G4aa2) (set! G4b65@G4aa0@condition-who G4aa0@condition-who) (set! G4b64@G4a9e@who-condition? G4a9e@who-condition?) (set! G4b63@G4a9c@G4a8a G4a9c@G4a8a) (set! G4b62@G4a9a@make-who-condition G4a9a@make-who-condition) (set! G4b61@G4a98@G4a8b G4a98@G4a8b) (set! G4b60@G4a95@G4a8d G4a95@G4a8d) (set! G4b5f@G4a93@G4a8e G4a93@G4a8e) (set! G4b5e@G4a91@G4a8c G4a91@G4a8c) (set! G4b5d@G4a89@condition-irritants G4a89@condition-irritants) (set! G4b5c@G4a87@irritants-condition? G4a87@irritants-condition?) (set! G4b5b@G4a85@G4a73 G4a85@G4a73) (set! G4b5a@G4a83@make-irritants-condition G4a83@make-irritants-condition) (set! G4b59@G4a81@G4a74 G4a81@G4a74) (set! G4b58@G4a7e@G4a76 G4a7e@G4a76) (set! G4b57@G4a7c@G4a77 G4a7c@G4a77) (set! G4b56@G4a7a@G4a75 G4a7a@G4a75) (set! G4b55@G4a72@assertion-violation? G4a72@assertion-violation?) (set! G4b54@G4a70@make-assertion-violation G4a70@make-assertion-violation) (set! G4b53@G4a6e@G4a61 G4a6e@G4a61) (set! G4b52@G4a6b@G4a63 G4a6b@G4a63) (set! G4b51@G4a69@G4a64 G4a69@G4a64) (set! G4b50@G4a67@G4a62 G4a67@G4a62) (set! G4b4f@G4a60@violation? G4a60@violation?) (set! G4b4e@G4a5e@make-violation G4a5e@make-violation) (set! G4b4d@G4a5c@G4a4f G4a5c@G4a4f) (set! G4b4c@G4a59@G4a51 G4a59@G4a51) (set! G4b4b@G4a57@G4a52 G4a57@G4a52) (set! G4b4a@G4a55@G4a50 G4a55@G4a50) (set! G4b49@G4a4e@error? G4a4e@error?) (set! G4b48@G4a4c@make-error G4a4c@make-error) (set! G4b47@G4a4a@G4a3d G4a4a@G4a3d) (set! G4b46@G4a47@G4a3f G4a47@G4a3f) (set! G4b45@G4a45@G4a40 G4a45@G4a40) (set! G4b44@G4a43@G4a3e G4a43@G4a3e) (set! G4b43@G4a3c@serious-condition? G4a3c@serious-condition?) (set! G4b42@G4a3a@make-serious-condition G4a3a@make-serious-condition) (set! G4b41@G4a38@G4a2b G4a38@G4a2b) (set! G4b40@G4a35@G4a2d G4a35@G4a2d) (set! G4b3f@G4a33@G4a2e G4a33@G4a2e) (set! G4b3e@G4a31@G4a2c G4a31@G4a2c) (set! G4b3d@G4a2a@warning? G4a2a@warning?) (set! G4b3c@G4a28@make-warning G4a28@make-warning) (set! G4b3b@G4a26@G4a19 G4a26@G4a19) (set! G4b3a@G4a23@G4a1b G4a23@G4a1b) (set! G4b39@G4a21@G4a1c G4a21@G4a1c) (set! G4b38@G4a1f@G4a1a G4a1f@G4a1a) (set! G4b37@G4a18@condition-message G4a18@condition-message) (set! G4b36@G4a16@message-condition? G4a16@message-condition?) (set! G4b35@G4a14@G4a02 G4a14@G4a02) (set! G4b34@G4a12@make-message-condition G4a12@make-message-condition) (set! G4b33@G4a10@G4a03 G4a10@G4a03) (set! G4b32@G4a0d@G4a05 G4a0d@G4a05) (set! G4b31@G4a0b@G4a06 G4a0b@G4a06) (set! G4b30@G4a09@G4a04 G4a09@G4a04) (set! G4b2f@G4a01@&condition-rcd G4a01@&condition-rcd) (set! G4b2e@G49ff@&condition-rtd G49ff@&condition-rtd) (set! G4b2d@G49fd@make-&condition G49fd@make-&condition) (set! G4b2c@G49fb@&condition? G49fb@&condition?) (set! G4b2b@G49f8@G49f0 G49f8@G49f0) (set! G4b2a@G49f6@G49f1 G49f6@G49f1) (set! G4b29@G49f4@G49ef G49f4@G49ef)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4b9b@G4b96 G4b9d@G4b98 G4b9f@G4b97 G4ba2@G4b95 G4ba4@make-i/o-error G4ba6@i/o-error? G4bad@G4ba8 G4baf@G4baa G4bb1@G4ba9 G4bb4@G4ba7 G4bb6@make-i/o-read-error G4bb8@i/o-read-error? G4bbf@G4bba G4bc1@G4bbc G4bc3@G4bbb G4bc6@G4bb9 G4bc8@make-i/o-write-error G4bca@i/o-write-error? G4bd2@G4bcd G4bd4@G4bcf G4bd6@G4bce G4bd9@G4bcc G4bdb@make-i/o-invalid-position-error G4bdd@G4bcb G4bdf@i/o-invalid-position-error? G4be1@i/o-error-position G4be9@G4be4 G4beb@G4be6 G4bed@G4be5 G4bf0@G4be3 G4bf2@make-i/o-filename-error G4bf4@G4be2 G4bf6@i/o-filename-error? G4bf8@i/o-error-filename G4bff@G4bfa G4c01@G4bfc G4c03@G4bfb G4c06@G4bf9 G4c08@make-i/o-file-protection-error G4c0a@i/o-file-protection-error? G4c11@G4c0c G4c13@G4c0e G4c15@G4c0d G4c18@G4c0b G4c1a@make-i/o-file-is-read-only-error G4c1c@i/o-file-is-read-only-error? G4c23@G4c1e G4c25@G4c20 G4c27@G4c1f G4c2a@G4c1d G4c2c@make-i/o-file-already-exists-error G4c2e@i/o-file-already-exists-error? G4c35@G4c30 G4c37@G4c32 G4c39@G4c31 G4c3c@G4c2f G4c3e@make-i/o-file-does-not-exist-error G4c40@i/o-file-does-not-exist-error? G4c48@G4c43 G4c4a@G4c45 G4c4c@G4c44 G4c4f@G4c42 G4c51@make-i/o-port-error G4c53@G4c41 G4c55@i/o-port-error? G4c57@i/o-error-port G4c5e@G4c59 G4c60@G4c5b G4c62@G4c5a G4c65@G4c58 G4c67@make-i/o-decoding-error G4c69@i/o-decoding-error? G4c71@G4c6c G4c73@G4c6e G4c75@G4c6d G4c78@G4c6b G4c7a@make-i/o-encoding-error G4c7c@G4c6a G4c7e@i/o-encoding-error? G4c80@i/o-encoding-error-char) (begin (set! G4b9b@G4b96 (make-record-type-descriptor '&i/o &error-rtd 'G4b99 '#f '#f '#())) (set! G4b9d@G4b98 '#f) (set! G4b9f@G4b97 (make-record-constructor-descriptor G4b9b@G4b96 &error-rcd G4b9d@G4b98)) (set! G4ba2@G4b95 (record-predicate G4b9b@G4b96)) (set! G4ba4@make-i/o-error (record-constructor G4b9f@G4b97)) (set! G4ba6@i/o-error? (condition-predicate G4b9b@G4b96)) (set! G4bad@G4ba8 (make-record-type-descriptor '&i/o-read G4b9b@G4b96 'G4bab '#f '#f '#())) (set! G4baf@G4baa '#f) (set! G4bb1@G4ba9 (make-record-constructor-descriptor G4bad@G4ba8 G4b9f@G4b97 G4baf@G4baa)) (set! G4bb4@G4ba7 (record-predicate G4bad@G4ba8)) (set! G4bb6@make-i/o-read-error (record-constructor G4bb1@G4ba9)) (set! G4bb8@i/o-read-error? (condition-predicate G4bad@G4ba8)) (set! G4bbf@G4bba (make-record-type-descriptor '&i/o-write G4b9b@G4b96 'G4bbd '#f '#f '#())) (set! G4bc1@G4bbc '#f) (set! G4bc3@G4bbb (make-record-constructor-descriptor G4bbf@G4bba G4b9f@G4b97 G4bc1@G4bbc)) (set! G4bc6@G4bb9 (record-predicate G4bbf@G4bba)) (set! G4bc8@make-i/o-write-error (record-constructor G4bc3@G4bbb)) (set! G4bca@i/o-write-error? (condition-predicate G4bbf@G4bba)) (set! G4bd2@G4bcd (make-record-type-descriptor '&i/o-invalid-position G4b9b@G4b96 'G4bd0 '#f '#f '#((immutable position)))) (set! G4bd4@G4bcf '#f) (set! G4bd6@G4bce (make-record-constructor-descriptor G4bd2@G4bcd G4b9f@G4b97 G4bd4@G4bcf)) (set! G4bd9@G4bcc (record-predicate G4bd2@G4bcd)) (set! G4bdb@make-i/o-invalid-position-error (record-constructor G4bd6@G4bce)) (set! G4bdd@G4bcb (record-accessor G4bd2@G4bcd '0)) (set! G4bdf@i/o-invalid-position-error? (condition-predicate G4bd2@G4bcd)) (set! G4be1@i/o-error-position (condition-accessor G4bd2@G4bcd G4bdd@G4bcb)) (set! G4be9@G4be4 (make-record-type-descriptor '&i/o-filename G4b9b@G4b96 'G4be7 '#f '#f '#((immutable filename)))) (set! G4beb@G4be6 '#f) (set! G4bed@G4be5 (make-record-constructor-descriptor G4be9@G4be4 G4b9f@G4b97 G4beb@G4be6)) (set! G4bf0@G4be3 (record-predicate G4be9@G4be4)) (set! G4bf2@make-i/o-filename-error (record-constructor G4bed@G4be5)) (set! G4bf4@G4be2 (record-accessor G4be9@G4be4 '0)) (set! G4bf6@i/o-filename-error? (condition-predicate G4be9@G4be4)) (set! G4bf8@i/o-error-filename (condition-accessor G4be9@G4be4 G4bf4@G4be2)) (set! G4bff@G4bfa (make-record-type-descriptor '&i/o-file-protection G4b9b@G4b96 'G4bfd '#f '#f '#())) (set! G4c01@G4bfc '#f) (set! G4c03@G4bfb (make-record-constructor-descriptor G4bff@G4bfa G4b9f@G4b97 G4c01@G4bfc)) (set! G4c06@G4bf9 (record-predicate G4bff@G4bfa)) (set! G4c08@make-i/o-file-protection-error (record-constructor G4c03@G4bfb)) (set! G4c0a@i/o-file-protection-error? (condition-predicate G4bff@G4bfa)) (set! G4c11@G4c0c (make-record-type-descriptor '&i/o-file-is-read-only G4bff@G4bfa 'G4c0f '#f '#f '#())) (set! G4c13@G4c0e '#f) (set! G4c15@G4c0d (make-record-constructor-descriptor G4c11@G4c0c G4c03@G4bfb G4c13@G4c0e)) (set! G4c18@G4c0b (record-predicate G4c11@G4c0c)) (set! G4c1a@make-i/o-file-is-read-only-error (record-constructor G4c15@G4c0d)) (set! G4c1c@i/o-file-is-read-only-error? (condition-predicate G4c11@G4c0c)) (set! G4c23@G4c1e (make-record-type-descriptor '&i/o-file-already-exists G4be9@G4be4 'G4c21 '#f '#f '#())) (set! G4c25@G4c20 '#f) (set! G4c27@G4c1f (make-record-constructor-descriptor G4c23@G4c1e G4bed@G4be5 G4c25@G4c20)) (set! G4c2a@G4c1d (record-predicate G4c23@G4c1e)) (set! G4c2c@make-i/o-file-already-exists-error (record-constructor G4c27@G4c1f)) (set! G4c2e@i/o-file-already-exists-error? (condition-predicate G4c23@G4c1e)) (set! G4c35@G4c30 (make-record-type-descriptor '&i/o-file-does-not-exist G4be9@G4be4 'G4c33 '#f '#f '#())) (set! G4c37@G4c32 '#f) (set! G4c39@G4c31 (make-record-constructor-descriptor G4c35@G4c30 G4bed@G4be5 G4c37@G4c32)) (set! G4c3c@G4c2f (record-predicate G4c35@G4c30)) (set! G4c3e@make-i/o-file-does-not-exist-error (record-constructor G4c39@G4c31)) (set! G4c40@i/o-file-does-not-exist-error? (condition-predicate G4c35@G4c30)) (set! G4c48@G4c43 (make-record-type-descriptor '&i/o-port G4b9b@G4b96 'G4c46 '#f '#f '#((immutable port)))) (set! G4c4a@G4c45 '#f) (set! G4c4c@G4c44 (make-record-constructor-descriptor G4c48@G4c43 G4b9f@G4b97 G4c4a@G4c45)) (set! G4c4f@G4c42 (record-predicate G4c48@G4c43)) (set! G4c51@make-i/o-port-error (record-constructor G4c4c@G4c44)) (set! G4c53@G4c41 (record-accessor G4c48@G4c43 '0)) (set! G4c55@i/o-port-error? (condition-predicate G4c48@G4c43)) (set! G4c57@i/o-error-port (condition-accessor G4c48@G4c43 G4c53@G4c41)) (set! G4c5e@G4c59 (make-record-type-descriptor '&i/o-decoding G4c48@G4c43 'G4c5c '#f '#f '#())) (set! G4c60@G4c5b '#f) (set! G4c62@G4c5a (make-record-constructor-descriptor G4c5e@G4c59 G4c4c@G4c44 G4c60@G4c5b)) (set! G4c65@G4c58 (record-predicate G4c5e@G4c59)) (set! G4c67@make-i/o-decoding-error (record-constructor G4c62@G4c5a)) (set! G4c69@i/o-decoding-error? (condition-predicate G4c5e@G4c59)) (set! G4c71@G4c6c (make-record-type-descriptor '&i/o-encoding G4c48@G4c43 'G4c6f '#f '#f '#((immutable char)))) (set! G4c73@G4c6e '#f) (set! G4c75@G4c6d (make-record-constructor-descriptor G4c71@G4c6c G4c4c@G4c44 G4c73@G4c6e)) (set! G4c78@G4c6b (record-predicate G4c71@G4c6c)) (set! G4c7a@make-i/o-encoding-error (record-constructor G4c75@G4c6d)) (set! G4c7c@G4c6a (record-accessor G4c71@G4c6c '0)) (set! G4c7e@i/o-encoding-error? (condition-predicate G4c71@G4c6c)) (set! G4c80@i/o-encoding-error-char (condition-accessor G4c71@G4c6c G4c7c@G4c6a)) (begin (set! G4cd0@G4c80@i/o-encoding-error-char G4c80@i/o-encoding-error-char) (set! G4ccf@G4c7e@i/o-encoding-error? G4c7e@i/o-encoding-error?) (set! G4cce@G4c7c@G4c6a G4c7c@G4c6a) (set! G4ccd@G4c7a@make-i/o-encoding-error G4c7a@make-i/o-encoding-error) (set! G4ccc@G4c78@G4c6b G4c78@G4c6b) (set! G4ccb@G4c75@G4c6d G4c75@G4c6d) (set! G4cca@G4c73@G4c6e G4c73@G4c6e) (set! G4cc9@G4c71@G4c6c G4c71@G4c6c) (set! G4cc8@G4c69@i/o-decoding-error? G4c69@i/o-decoding-error?) (set! G4cc7@G4c67@make-i/o-decoding-error G4c67@make-i/o-decoding-error) (set! G4cc6@G4c65@G4c58 G4c65@G4c58) (set! G4cc5@G4c62@G4c5a G4c62@G4c5a) (set! G4cc4@G4c60@G4c5b G4c60@G4c5b) (set! G4cc3@G4c5e@G4c59 G4c5e@G4c59) (set! G4cc2@G4c57@i/o-error-port G4c57@i/o-error-port) (set! G4cc1@G4c55@i/o-port-error? G4c55@i/o-port-error?) (set! G4cc0@G4c53@G4c41 G4c53@G4c41) (set! G4cbf@G4c51@make-i/o-port-error G4c51@make-i/o-port-error) (set! G4cbe@G4c4f@G4c42 G4c4f@G4c42) (set! G4cbd@G4c4c@G4c44 G4c4c@G4c44) (set! G4cbc@G4c4a@G4c45 G4c4a@G4c45) (set! G4cbb@G4c48@G4c43 G4c48@G4c43) (set! G4cba@G4c40@i/o-file-does-not-exist-error? G4c40@i/o-file-does-not-exist-error?) (set! G4cb9@G4c3e@make-i/o-file-does-not-exist-error G4c3e@make-i/o-file-does-not-exist-error) (set! G4cb8@G4c3c@G4c2f G4c3c@G4c2f) (set! G4cb7@G4c39@G4c31 G4c39@G4c31) (set! G4cb6@G4c37@G4c32 G4c37@G4c32) (set! G4cb5@G4c35@G4c30 G4c35@G4c30) (set! G4cb4@G4c2e@i/o-file-already-exists-error? G4c2e@i/o-file-already-exists-error?) (set! G4cb3@G4c2c@make-i/o-file-already-exists-error G4c2c@make-i/o-file-already-exists-error) (set! G4cb2@G4c2a@G4c1d G4c2a@G4c1d) (set! G4cb1@G4c27@G4c1f G4c27@G4c1f) (set! G4cb0@G4c25@G4c20 G4c25@G4c20) (set! G4caf@G4c23@G4c1e G4c23@G4c1e) (set! G4cae@G4c1c@i/o-file-is-read-only-error? G4c1c@i/o-file-is-read-only-error?) (set! G4cad@G4c1a@make-i/o-file-is-read-only-error G4c1a@make-i/o-file-is-read-only-error) (set! G4cac@G4c18@G4c0b G4c18@G4c0b) (set! G4cab@G4c15@G4c0d G4c15@G4c0d) (set! G4caa@G4c13@G4c0e G4c13@G4c0e) (set! G4ca9@G4c11@G4c0c G4c11@G4c0c) (set! G4ca8@G4c0a@i/o-file-protection-error? G4c0a@i/o-file-protection-error?) (set! G4ca7@G4c08@make-i/o-file-protection-error G4c08@make-i/o-file-protection-error) (set! G4ca6@G4c06@G4bf9 G4c06@G4bf9) (set! G4ca5@G4c03@G4bfb G4c03@G4bfb) (set! G4ca4@G4c01@G4bfc G4c01@G4bfc) (set! G4ca3@G4bff@G4bfa G4bff@G4bfa) (set! G4ca2@G4bf8@i/o-error-filename G4bf8@i/o-error-filename) (set! G4ca1@G4bf6@i/o-filename-error? G4bf6@i/o-filename-error?) (set! G4ca0@G4bf4@G4be2 G4bf4@G4be2) (set! G4c9f@G4bf2@make-i/o-filename-error G4bf2@make-i/o-filename-error) (set! G4c9e@G4bf0@G4be3 G4bf0@G4be3) (set! G4c9d@G4bed@G4be5 G4bed@G4be5) (set! G4c9c@G4beb@G4be6 G4beb@G4be6) (set! G4c9b@G4be9@G4be4 G4be9@G4be4) (set! G4c9a@G4be1@i/o-error-position G4be1@i/o-error-position) (set! G4c99@G4bdf@i/o-invalid-position-error? G4bdf@i/o-invalid-position-error?) (set! G4c98@G4bdd@G4bcb G4bdd@G4bcb) (set! G4c97@G4bdb@make-i/o-invalid-position-error G4bdb@make-i/o-invalid-position-error) (set! G4c96@G4bd9@G4bcc G4bd9@G4bcc) (set! G4c95@G4bd6@G4bce G4bd6@G4bce) (set! G4c94@G4bd4@G4bcf G4bd4@G4bcf) (set! G4c93@G4bd2@G4bcd G4bd2@G4bcd) (set! G4c92@G4bca@i/o-write-error? G4bca@i/o-write-error?) (set! G4c91@G4bc8@make-i/o-write-error G4bc8@make-i/o-write-error) (set! G4c90@G4bc6@G4bb9 G4bc6@G4bb9) (set! G4c8f@G4bc3@G4bbb G4bc3@G4bbb) (set! G4c8e@G4bc1@G4bbc G4bc1@G4bbc) (set! G4c8d@G4bbf@G4bba G4bbf@G4bba) (set! G4c8c@G4bb8@i/o-read-error? G4bb8@i/o-read-error?) (set! G4c8b@G4bb6@make-i/o-read-error G4bb6@make-i/o-read-error) (set! G4c8a@G4bb4@G4ba7 G4bb4@G4ba7) (set! G4c89@G4bb1@G4ba9 G4bb1@G4ba9) (set! G4c88@G4baf@G4baa G4baf@G4baa) (set! G4c87@G4bad@G4ba8 G4bad@G4ba8) (set! G4c86@G4ba6@i/o-error? G4ba6@i/o-error?) (set! G4c85@G4ba4@make-i/o-error G4ba4@make-i/o-error) (set! G4c84@G4ba2@G4b95 G4ba2@G4b95) (set! G4c83@G4b9f@G4b97 G4b9f@G4b97) (set! G4c82@G4b9d@G4b98 G4b9d@G4b98) (set! G4c81@G4b9b@G4b96 G4b9b@G4b96)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29bb@G296c@current-primitive-locations (lambda (G50a7@x) ((lambda (G50a9@t) (if G50a9@t (cdr G50a9@t) '#f)) (assq G50a7@x '((syntax-error . G49e0@G30a8@syntax-error) (syntax-dispatch . G4974@G2fc1@syntax-dispatch) (load . G4d6d@G4cdf@load) (interaction-environment . G49e9@G30ba@interaction-environment) (make-parameter . G2966@G289f@make-parameter) (make-variable-transformer . G4934@G2dfe@make-variable-transformer) (identifier? . G49e4@G30b0@identifier?) (generate-temporaries . G49d9@G309a@generate-temporaries) (free-identifier=? . G49da@G309c@free-identifier=?) (syntax->datum . G49e6@G30b4@syntax->datum) (datum->syntax . G49e5@G30b2@datum->syntax) (bound-identifier=? . G49db@G309e@bound-identifier=?) (make-i/o-write-error . G4c91@G4bc8@make-i/o-write-error) (make-i/o-read-error . G4c8b@G4bb6@make-i/o-read-error) (make-i/o-port-error . G4cbf@G4c51@make-i/o-port-error) (make-i/o-invalid-position-error . G4c97@G4bdb@make-i/o-invalid-position-error) (make-i/o-filename-error . G4c9f@G4bf2@make-i/o-filename-error) (make-i/o-file-protection-error . G4ca7@G4c08@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cad@G4c1a@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cb9@G4c3e@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cb3@G4c2c@make-i/o-file-already-exists-error) (make-i/o-error . G4c85@G4ba4@make-i/o-error) (make-i/o-encoding-error . G4ccd@G4c7a@make-i/o-encoding-error) (make-i/o-decoding-error . G4cc7@G4c67@make-i/o-decoding-error) (i/o-write-error? . G4c92@G4bca@i/o-write-error?) (i/o-read-error? . G4c8c@G4bb8@i/o-read-error?) (i/o-port-error? . G4cc1@G4c55@i/o-port-error?) (i/o-invalid-position-error? . G4c99@G4bdf@i/o-invalid-position-error?) (i/o-filename-error? . G4ca1@G4bf6@i/o-filename-error?) (i/o-file-protection-error? . G4ca8@G4c0a@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cae@G4c1c@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cba@G4c40@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cb4@G4c2e@i/o-file-already-exists-error?) (i/o-error? . G4c86@G4ba6@i/o-error?) (i/o-error-port . G4cc2@G4c57@i/o-error-port) (i/o-error-filename . G4ca2@G4bf8@i/o-error-filename) (i/o-encoding-error? . G4ccf@G4c7e@i/o-encoding-error?) (i/o-encoding-error-char . G4cd0@G4c80@i/o-encoding-error-char) (i/o-decoding-error? . G4cc8@G4c69@i/o-decoding-error?) (scheme-report-environment . G49d0@G3088@scheme-report-environment) (null-environment . G49cf@G3086@null-environment) (command-line . G4d6a@G4cd9@command-line) (eval . G49d2@G308c@eval) (environment . G49ce@G3084@environment) (who-condition? . G4b64@G4a9e@who-condition?) (warning? . G4b3d@G4a2a@warning?) (violation? . G4b4f@G4a60@violation?) (undefined-violation? . G4b87@G4b04@undefined-violation?) (syntax-violation? . G4b7f@G4aee@syntax-violation?) (syntax-violation-subform . G4b81@G4af2@syntax-violation-subform) (syntax-violation-form . G4b80@G4af0@syntax-violation-form) (syntax-violation . G49e3@G30ae@syntax-violation) (serious-condition? . G4b43@G4a3c@serious-condition?) (non-continuable-violation? . G4b6b@G4ab2@non-continuable-violation?) (message-condition? . G4b36@G4a16@message-condition?) (make-who-condition . G4b62@G4a9a@make-who-condition) (make-warning . G4b3c@G4a28@make-warning) (make-violation . G4b4e@G4a5e@make-violation) (make-undefined-violation . G4b86@G4b02@make-undefined-violation) (make-syntax-violation . G4b7c@G4ae8@make-syntax-violation) (make-serious-condition . G4b42@G4a3a@make-serious-condition) (make-non-continuable-violation . G4b6a@G4ab0@make-non-continuable-violation) (make-message-condition . G4b34@G4a12@make-message-condition) (make-lexical-violation . G4b76@G4ad4@make-lexical-violation) (make-irritants-condition . G4b5a@G4a83@make-irritants-condition) (make-implementation-restriction-violation . G4b70@G4ac2@make-implementation-restriction-violation) (make-error . G4b48@G4a4c@make-error) (make-assertion-violation . G4b54@G4a70@make-assertion-violation) (lexical-violation? . G4b77@G4ad6@lexical-violation?) (irritants-condition? . G4b5c@G4a87@irritants-condition?) (implementation-restriction-violation? . G4b71@G4ac4@implementation-restriction-violation?) (error? . G4b49@G4a4e@error?) (condition-who . G4b65@G4aa0@condition-who) (condition-message . G4b37@G4a18@condition-message) (condition-irritants . G4b5d@G4a89@condition-irritants) (assertion-violation? . G4b55@G4a72@assertion-violation?) (no-nans-violation? . G4b93@G4b28@no-nans-violation?) (no-infinities-violation? . G4b8d@G4b16@no-infinities-violation?) (make-no-nans-violation . G4b92@G4b26@make-no-nans-violation) (make-no-infinities-violation . G4b8c@G4b14@make-no-infinities-violation)))))) (G2bf3@G2a88@install-library 'G507a '(mosh interaction) '() '() '() '() '((string-upcase . G4ff4) (string-titlecase . G4ff3) (string-normalize-nfkd . G4ff2) (string-normalize-nfkc . G4ff1) (string-normalize-nfd . G4ff0) (string-normalize-nfc . G4fef) (string-foldcase . G4fee) (string-downcase . G4fed) (string-ci>? . G4fec) (string-ci>=? . G4feb) (string-ci=? . G4fea) (string-ci<? . G4fe9) (string-ci<=? . G4fe8) (char-whitespace? . G4fe7) (char-upper-case? . G4fe6) (char-title-case? . G4fe5) (char-numeric? . G4fe4) (char-lower-case? . G4fe3) (char-general-category . G4fe2) (char-upcase . G4fe1) (char-titlecase . G4fe0) (char-foldcase . G4fdf) (char-downcase . G4fde) (char-ci>? . G4fdd) (char-ci>=? . G4fdc) (char-ci=? . G4fdb) (char-ci<? . G4fda) (char-ci<=? . G4fd9) (char-alphabetic? . G4fd8) (make-variable-transformer . G2dfd) (identifier? . G30af) (generate-temporaries . G3099) (free-identifier=? . G309b) (syntax->datum . G30b3) (datum->syntax . G30b1) (bound-identifier=? . G309d) (record-type-descriptor? . G4fd7) (record-predicate . G4fd6) (record-mutator . G4fd5) (record-constructor . G4fd4) (record-accessor . G4fd3) (make-record-type-descriptor . G4fd2) (make-record-constructor-descriptor . G4fd1) (record? . G4fd0) (record-type-uid . G4fcf) (record-type-sealed? . G4fce) (record-type-parent . G4fcd) (record-type-opaque? . G4fcc) (record-type-name . G4fcb) (record-type-generative? . G4fca) (record-type-field-names . G4fc9) (record-rtd . G4fc8) (record-field-mutable? . G4fc7) (delete-file . G4fc6) (file-exists? . G4fc5) (vector-sort! . G4fc4) (vector-sort . G4fc3) (list-sort . G4fc2) (symbol-hash . G4fc1) (string-ci-hash . G4fc0) (string-hash . G4fbf) (equal-hash . G4fbe) (hashtable-equivalence-function . G4fbd) (make-hashtable . G4fbc) (hashtable-hash-function . G4fbb) (make-eqv-hashtable . G4fba) (make-eq-hashtable . G4fb9) (hashtable? . G4fb8) (hashtable-update! . G4fb7) (hashtable-size . G4fb6) (hashtable-set! . G4fb5) (hashtable-ref . G4fb4) (hashtable-mutable? . G4fb3) (hashtable-keys . G4fb2) (hashtable-entries . G4fb1) (hashtable-delete! . G4fb0) (hashtable-copy . G4faf) (hashtable-contains? . G4fae) (hashtable-clear! . G4fad) (call-with-output-file . G4fac) (call-with-input-file . G4fab) (write-char . G4faa) (write . G4fa9) (with-output-to-file . G4fa8) (with-input-from-file . G4fa7) (read-char . G4fa6) (read . G4fa5) (peek-char . G4fa4) (open-output-file . G4fa3) (open-input-file . G4fa2) (newline . G4fa1) (display . G4fa0) (close-output-port . G4f9f) (close-input-port . G4f9e) (eof-object? . G4f9d) (eof-object . G4f9c) (current-error-port . G4f9b) (current-output-port . G4f9a) (current-input-port . G4f99) (output-port? . G4f98) (input-port? . G4f97) (utf-8-codec . G4f96) (utf-16-codec . G4f95) (transcoder-error-handling-mode . G4f94) (transcoder-eol-style . G4f93) (transcoder-codec . G4f92) (transcoded-port . G4f91) (textual-port? . G4f90) (string->bytevector . G4f8f) (standard-output-port . G4f8e) (standard-input-port . G4f8d) (standard-error-port . G4f8c) (set-port-position! . G4f8b) (put-u8 . G4f8a) (put-string . G4f89) (put-datum . G4f88) (put-char . G4f87) (put-bytevector . G4f86) (port? . G4f85) (port-transcoder . G4f84) (port-position . G4f83) (port-has-set-port-position!? . G4f82) (port-has-port-position? . G4f81) (port-eof? . G4f80) (output-port-buffer-mode . G4f7f) (open-string-output-port . G4f7e) (open-string-input-port . G4f7d) (open-file-output-port . G4f7c) (open-file-input/output-port . G4f7b) (open-file-input-port . G4f7a) (open-bytevector-output-port . G4f79) (open-bytevector-input-port . G4f78) (native-transcoder . G4f77) (native-eol-style . G4f76) (make-transcoder . G4f75) (latin-1-codec . G4f74) (make-i/o-write-error . G4bc7) (make-i/o-read-error . G4bb5) (make-i/o-port-error . G4c50) (make-i/o-invalid-position-error . G4bda) (make-i/o-filename-error . G4bf1) (make-i/o-file-protection-error . G4c07) (make-i/o-file-is-read-only-error . G4c19) (make-i/o-file-does-not-exist-error . G4c3d) (make-i/o-file-already-exists-error . G4c2b) (make-i/o-error . G4ba3) (make-i/o-encoding-error . G4c79) (make-i/o-decoding-error . G4c66) (make-custom-textual-output-port . G4f73) (make-custom-textual-input/output-port . G4f72) (make-custom-textual-input-port . G4f71) (make-custom-binary-output-port . G4f70) (make-custom-binary-input/output-port . G4f6f) (make-custom-binary-input-port . G4f6e) (make-bytevector . G4f6d) (lookahead-u8 . G4f6c) (lookahead-char . G4f6b) (i/o-write-error? . G4bc9) (i/o-read-error? . G4bb7) (i/o-port-error? . G4c54) (i/o-invalid-position-error? . G4bde) (i/o-filename-error? . G4bf5) (i/o-file-protection-error? . G4c09) (i/o-file-is-read-only-error? . G4c1b) (i/o-file-does-not-exist-error? . G4c3f) (i/o-file-already-exists-error? . G4c2d) (i/o-error? . G4ba5) (i/o-error-port . G4c56) (i/o-error-filename . G4bf7) (i/o-encoding-error? . G4c7d) (i/o-encoding-error-char . G4c7f) (i/o-decoding-error? . G4c68) (get-u8 . G4f6a) (get-string-n! . G4f69) (get-string-n . G4f68) (get-string-all . G4f67) (get-line . G4f66) (get-datum . G4f65) (get-char . G4f64) (get-bytevector-some . G4f63) (get-bytevector-n! . G4f62) (get-bytevector-n . G4f61) (get-bytevector-all . G4f60) (flush-output-port . G4f5f) (close-port . G4f5e) (exit . G4f57) (command-line . G4cd8) (string-fill! . G4f56) (string-set! . G4f55) (set-cdr! . G4f54) (set-car! . G4f53) (remove . G4f52) (remv . G4f51) (remp . G4f50) (remq . G4f4f) (partition . G4f4e) (memv . G4f4d) (memq . G4f4c) (memp . G4f4b) (member . G4f4a) (exists . G4f49) (for-all . G4f48) (fold-right . G4f47) (fold-left . G4f46) (find . G4f45) (filter . G4f44) (cons* . G4f43) (assv . G4f42) (assq . G4f41) (assp . G4f40) (assoc . G4f3f) (call-with-string-output-port . G4f3e) (call-with-port . G4f3d) (call-with-bytevector-output-port . G4f3c) (bytevector->string . G4f3b) (buffer-mode? . G4f3a) (binary-port? . G4f39) (with-exception-handler . G4f38) (raise-continuable . G4f37) (raise . G4f36) (eval . G308b) (environment . G3083) (make-enumeration . G4f35) (enum-set=? . G4f34) (enum-set-universe . G4f33) (enum-set-union . G4f32) (enum-set-subset? . G4f31) (enum-set-projection . G4f30) (enum-set-member? . G4f2f) (enum-set-intersection . G4f2e) (enum-set-indexer . G4f2d) (enum-set-difference . G4f2c) (enum-set-constructor . G4f2b) (enum-set-complement . G4f2a) (enum-set->list . G4f29) (who-condition? . G4a9d) (warning? . G4a29) (violation? . G4a5f) (undefined-violation? . G4b03) (syntax-violation? . G4aed) (syntax-violation-subform . G4af1) (syntax-violation-form . G4aef) (syntax-violation . G30ad) (simple-conditions . G4f28) (serious-condition? . G4a3b) (non-continuable-violation? . G4ab1) (message-condition? . G4a15) (make-who-condition . G4a99) (make-warning . G4a27) (make-violation . G4a5d) (make-undefined-violation . G4b01) (make-syntax-violation . G4ae7) (make-serious-condition . G4a39) (make-non-continuable-violation . G4aaf) (make-message-condition . G4a11) (make-lexical-violation . G4ad3) (make-irritants-condition . G4a82) (make-implementation-restriction-violation . G4ac1) (make-error . G4a4b) (make-assertion-violation . G4a6f) (lexical-violation? . G4ad5) (irritants-condition? . G4a86) (implementation-restriction-violation? . G4ac3) (error? . G4a4d) (condition-who . G4a9f) (condition-predicate . G4f27) (condition-message . G4a17) (condition-irritants . G4a88) (condition-accessor . G4f26) (condition . G4f25) (assertion-violation? . G4a71) (condition? . G4f24) (utf32->string . G4f23) (utf16->string . G4f22) (utf8->string . G4f21) (uint-list->bytevector . G4f20) (u8-list->bytevector . G4f1f) (string->utf8 . G4f1e) (string->utf32 . G4f1d) (string->utf16 . G4f1c) (sint-list->bytevector . G4f1b) (native-endianness . G4f1a) (bytevector? . G4f19) (bytevector=? . G4f18) (bytevector-uint-set! . G4f17) (bytevector-uint-ref . G4f16) (bytevector-u8-set! . G4f15) (bytevector-u8-ref . G4f14) (bytevector-u64-set! . G4f13) (bytevector-u64-ref . G4f12) (bytevector-u64-native-set! . G4f11) (bytevector-u64-native-ref . G4f10) (bytevector-u32-set! . G4f0f) (bytevector-u32-ref . G4f0e) (bytevector-u32-native-set! . G4f0d) (bytevector-u32-native-ref . G4f0c) (bytevector-u16-set! . G4f0b) (bytevector-u16-ref . G4f0a) (bytevector-u16-native-set! . G4f09) (bytevector-u16-native-ref . G4f08) (bytevector-sint-set! . G4f07) (bytevector-sint-ref . G4f06) (bytevector-s8-set! . G4f05) (bytevector-s8-ref . G4f04) (bytevector-s64-set! . G4f03) (bytevector-s64-ref . G4f02) (bytevector-s64-native-set! . G4f01) (bytevector-s64-native-ref . G4f00) (bytevector-s32-set! . G4eff) (bytevector-s32-ref . G4efe) (bytevector-s32-native-set! . G4efd) (bytevector-s32-native-ref . G4efc) (bytevector-s16-set! . G4efb) (bytevector-s16-ref . G4efa) (bytevector-s16-native-set! . G4ef9) (bytevector-s16-native-ref . G4ef8) (bytevector-length . G4ef7) (bytevector-ieee-single-ref . G4ef6) (bytevector-ieee-single-set! . G4ef5) (bytevector-ieee-single-native-set! . G4ef4) (bytevector-ieee-single-native-ref . G4ef3) (bytevector-ieee-double-set! . G4ef2) (bytevector-ieee-double-ref . G4ef1) (bytevector-ieee-double-native-set! . G4ef0) (bytevector-ieee-double-native-ref . G4eef) (bytevector-fill! . G4eee) (bytevector-copy! . G4eed) (bytevector-copy . G4eec) (bytevector->uint-list . G4eeb) (bytevector->u8-list . G4eea) (bytevector->sint-list . G4ee9) (no-nans-violation? . G4b27) (no-infinities-violation? . G4b15) (make-no-nans-violation . G4b25) (make-no-infinities-violation . G4b13) (real->flonum . G4ee8) (flzero? . G4ee7) (fltruncate . G4ee6) (fltan . G4ee5) (flsqrt . G4ee4) (flsin . G4ee3) (flround . G4ee2) (flpositive? . G4ee1) (flonum? . G4ee0) (flodd? . G4edf) (flnumerator . G4ede) (flnegative? . G4edd) (flnan? . G4edc) (flmod0 . G4edb) (flmod . G4eda) (flmin . G4ed9) (flmax . G4ed8) (fllog . G4ed7) (flinteger? . G4ed6) (flinfinite? . G4ed5) (flfloor . G4ed4) (flfinite? . G4ed3) (flexpt . G4ed2) (flexp . G4ed1) (fleven? . G4ed0) (fldiv0-and-mod0 . G4ecf) (fldiv0 . G4ece) (fldiv-and-mod . G4ecd) (fldiv . G4ecc) (fldenominator . G4ecb) (flcos . G4eca) (flceiling . G4ec9) (flatan . G4ec8) (flasin . G4ec7) (flacos . G4ec6) (flabs . G4ec5) (fl>? . G4ec4) (fl>=? . G4ec3) (fl=? . G4ec2) (fl<? . G4ec1) (fl<=? . G4ec0) (fl/ . G4ebf) (fl- . G4ebe) (fl+ . G4ebd) (fl* . G4ebc) (fixnum->flonum . G4ebb) (fxzero? . G4eba) (fxxor . G4eb9) (fxrotate-bit-field . G4eb8) (fxreverse-bit-field . G4eb7) (fxpositive? . G4eb6) (fxodd? . G4eb5) (fxnot . G4eb4) (fxnegative? . G4eb3) (fxmod0 . G4eb2) (fxmod . G4eb1) (fxmin . G4eb0) (fxmax . G4eaf) (fxlength . G4eae) (fxior . G4ead) (fxif . G4eac) (fxfirst-bit-set . G4eab) (fxeven? . G4eaa) (fxdiv0-and-mod0 . G4ea9) (fxdiv0 . G4ea8) (fxdiv-and-mod . G4ea7) (fxdiv . G4ea6) (fxcopy-bit-field . G4ea5) (fxcopy-bit . G4ea4) (fxbit-set? . G4ea3) (fxbit-field . G4ea2) (fxbit-count . G4ea1) (fxarithmetic-shift-right . G4ea0) (fxarithmetic-shift-left . G4e9f) (fxarithmetic-shift . G4e9e) (fxand . G4e9d) (fx>? . G4e9c) (fx>=? . G4e9b) (fx=? . G4e9a) (fx<? . G4e99) (fx<=? . G4e98) (fx-/carry . G4e97) (fx- . G4e96) (fx+/carry . G4e95) (fx+ . G4e94) (fx*/carry . G4e93) (fx* . G4e92) (greatest-fixnum . G4e91) (least-fixnum . G4e90) (fixnum-width . G4e8f) (fixnum? . G4e8e) (bitwise-rotate-bit-field . G4e8d) (bitwise-reverse-bit-field . G4e8c) (bitwise-length . G4e8b) (bitwise-if . G4e8a) (bitwise-first-bit-set . G4e89) (bitwise-copy-bit-field . G4e88) (bitwise-copy-bit . G4e87) (bitwise-bit-set? . G4e86) (bitwise-bit-field . G4e85) (bitwise-bit-count . G4e84) (bitwise-xor . G4e83) (bitwise-ior . G4e82) (bitwise-and . G4e81) (bitwise-not . G4e80) (bitwise-arithmetic-shift-right . G4e7f) (bitwise-arithmetic-shift-left . G4e7e) (bitwise-arithmetic-shift . G4e7d) (zero? . G4e7c) (vector? . G4e7b) (vector-set! . G4e7a) (vector-ref . G4e79) (vector-map . G4e78) (vector-length . G4e77) (vector-for-each . G4e76) (vector-fill! . G4e75) (vector->list . G4e74) (vector . G4e73) (values . G4e72) (truncate . G4e71) (tan . G4e70) (symbol? . G4e6f) (symbol=? . G4e6e) (symbol->string . G4e6d) (substring . G4e6c) (string? . G4e6b) (string>? . G4e6a) (string>=? . G4e69) (string=? . G4e68) (string<? . G4e67) (string<=? . G4e66) (string-ref . G4e65) (string-length . G4e64) (string-for-each . G4e63) (string-copy . G4e62) (string-append . G4e61) (string->symbol . G4e60) (string->number . G4e5f) (string->list . G4e5e) (string . G4e5d) (sqrt . G4e5c) (sin . G4e5b) (round . G4e5a) (reverse . G4e59) (real? . G4e58) (real-valued? . G4e57) (real-part . G4e56) (rationalize . G4e55) (rational? . G4e54) (rational-valued? . G4e53) (procedure? . G4e52) (positive? . G4e51) (pair? . G4e50) (odd? . G4e4f) (numerator . G4e4e) (number? . G4e4d) (number->string . G4e4c) (null? . G4e4b) (not . G4e4a) (negative? . G4e49) (nan? . G4e48) (min . G4e47) (max . G4e46) (map . G4e45) (make-vector . G4e44) (make-string . G4e43) (make-rectangular . G4e42) (make-polar . G4e41) (magnitude . G4e40) (log . G4e3f) (list? . G4e3e) (list-tail . G4e3d) (list-ref . G4e3c) (list->vector . G4e3b) (list->string . G4e3a) (list . G4e39) (length . G4e38) (lcm . G4e37) (integer? . G4e36) (integer-valued? . G4e35) (integer->char . G4e34) (infinite? . G4e33) (inexact? . G4e32) (inexact . G4e31) (imag-part . G4e30) (gcd . G4e2f) (for-each . G4e2e) (floor . G4e2d) (finite? . G4e2c) (expt . G4e2b) (exp . G4e2a) (exact? . G4e29) (exact-integer-sqrt . G4e28) (exact . G4e27) (even? . G4e26) (error . G4e25) (eqv? . G4e24) (equal? . G4e23) (eq? . G4e22) (dynamic-wind . G4e21) (div0-and-mod0 . G4e20) (mod0 . G4e1f) (div0 . G4e1e) (div-and-mod . G4e1d) (mod . G4e1c) (div . G4e1b) (denominator . G4e1a) (cos . G4e19) (cons . G4e18) (complex? . G4e17) (char? . G4e16) (char>? . G4e15) (char>=? . G4e14) (char=? . G4e13) (char<? . G4e12) (char<=? . G4e11) (char->integer . G4e10) (ceiling . G4e0f) (call-with-values . G4e0e) (call/cc . G4e0d) (call-with-current-continuation . G4e0c) (cddddr . G4e0b) (cdddar . G4e0a) (cddadr . G4e09) (cddaar . G4e08) (cdaddr . G4e07) (cdadar . G4e06) (cdaadr . G4e05) (cdaaar . G4e04) (cadddr . G4e03) (caddar . G4e02) (cadadr . G4e01) (cadaar . G4e00) (caaddr . G4dff) (caadar . G4dfe) (caaadr . G4dfd) (caaaar . G4dfc) (cdddr . G4dfb) (cddar . G4dfa) (cdadr . G4df9) (cdaar . G4df8) (caddr . G4df7) (cadar . G4df6) (caadr . G4df5) (caaar . G4df4) (cddr . G4df3) (cdar . G4df2) (cadr . G4df1) (caar . G4df0) (cdr . G4def) (car . G4dee) (boolean? . G4ded) (boolean=? . G4dec) (atan . G4deb) (assertion-violation . G4dea) (asin . G4de9) (apply . G4de8) (append . G4de7) (angle . G4de6) (acos . G4de5) (abs . G4de4) (/ . G4de3) (* . G4de2) (- . G4de1) (+ . G4de0) (>= . G4ddf) (> . G4dde) (= . G4ddd) (<= . G4ddc) (< . G4ddb) (library . G4dda) (export . G4dd9) (&no-nans . G4dd8) (&no-infinities . G4dd7) (&i/o-encoding . G4dd6) (&i/o-decoding . G4dd5) (&i/o-port . G4dd4) (&i/o-file-does-not-exist . G4dd3) (&i/o-file-already-exists . G4dd2) (&i/o-file-is-read-only . G4dd1) (&i/o-file-protection . G4dd0) (&i/o-filename . G4dcf) (&i/o-invalid-position . G4dce) (&i/o-write . G4dcd) (&i/o-read . G4dcc) (&i/o . G4dcb) (&undefined . G4dca) (&syntax . G4dc9) (&lexical . G4dc8) (&implementation-restriction . G4dc7) (&non-continuable . G4dc6) (&who . G4dc5) (&irritants . G4dc4) (&assertion . G4dc3) (&violation . G4dc2) (&error . G4dc1) (&serious . G4dc0) (&warning . G4dbf) (&message . G4dbe) (&condition . G4dbd) (define-condition-type . G4dbc) (define-enumeration . G4dbb) (define-record-type . G4dba) (parent-rtd . G4db9) (nongenerative . G4db8) (opaque . G4db7) (sealed . G4db6) (protocol . G4db5) (parent . G4db4) (immutable . G4db3) (mutable . G4db2) (fields . G4db1) (error-handling-mode . G4db0) (file-options . G4daf) (buffer-mode . G4dae) (eol-style . G4dad) (guard . G4dac) (unsyntax-splicing . G4da9) (unsyntax . G4da8) (unquote-splicing . G4da7) (unquote . G4da6) (_ . G4da5) (else . G4da4) (=> . G4da3) (... . G4da2) (assert . G4da1) (endianness . G4da0) (or . G4d9d) (and . G4d9c) (do . G4d9b) (cond . G4d9a) (let* . G4d99) (let . G4d98) (let*-values . G4d97) (let-values . G4d96) (identifier-syntax . G4d95) (with-syntax . G4d94) (quasisyntax . G4d93) (quasiquote . G4d92) (syntax-rules . G4d91) (include . G4d90) (record-constructor-descriptor . G4d8e) (record-type-descriptor . G4d8d) (case . G4d8c) (unless . G4d8a) (when . G4d89) (if . G4d88) (letrec* . G4d87) (letrec . G4d86) (case-lambda . G4d84) (lambda . G4d83) (syntax . G4d82) (syntax-case . G4d81) (quote . G4d80) (letrec-syntax . G4d7e) (let-syntax . G4d7d) (set! . G4d7c) (import . G4d7b) (begin . G4d7a) (define-syntax . G4d78) (define . G4d77)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G507b '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4da7) (unquote . G4da6) (delay . G4d9f) (or . G4d9d) (and . G4d9c) (do . G4d9b) (cond . G4d9a) (let* . G4d99) (let . G4d98) (quasiquote . G4d92) (syntax-rules . G4d91) (case . G4d8c) (if . G4d88) (letrec . G4d86) (lambda . G4d83) (quote . G4d80) (letrec-syntax . G4d7e) (let-syntax . G4d7d) (set! . G4d7c) (begin . G4d7a) (define-syntax . G4d78) (define . G4d77)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G507c '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4fec) (string-ci>=? . G4feb) (string-ci=? . G4fea) (string-ci<? . G4fe9) (string-ci<=? . G4fe8) (char-whitespace? . G4fe7) (char-upper-case? . G4fe6) (char-numeric? . G4fe4) (char-lower-case? . G4fe3) (char-upcase . G4fe1) (char-downcase . G4fde) (char-ci>? . G4fdd) (char-ci>=? . G4fdc) (char-ci=? . G4fdb) (char-ci<? . G4fda) (char-ci<=? . G4fd9) (char-alphabetic? . G4fd8) (call-with-output-file . G4fac) (call-with-input-file . G4fab) (write-char . G4faa) (write . G4fa9) (with-output-to-file . G4fa8) (with-input-from-file . G4fa7) (read-char . G4fa6) (read . G4fa5) (peek-char . G4fa4) (open-output-file . G4fa3) (open-input-file . G4fa2) (newline . G4fa1) (display . G4fa0) (close-output-port . G4f9f) (close-input-port . G4f9e) (eof-object . G4f9c) (current-output-port . G4f9a) (current-input-port . G4f99) (output-port? . G4f98) (input-port? . G4f97) (scheme-report-environment . G3087) (quotient . G4f5d) (null-environment . G3085) (remainder . G4f5c) (modulo . G4f5b) (inexact->exact . G4f5a) (force . G4f59) (exact->inexact . G4f58) (string-fill! . G4f56) (string-set! . G4f55) (set-cdr! . G4f54) (set-car! . G4f53) (memv . G4f4d) (memq . G4f4c) (member . G4f4a) (assv . G4f42) (assq . G4f41) (assoc . G4f3f) (eval . G308b) (zero? . G4e7c) (vector? . G4e7b) (vector-set! . G4e7a) (vector-ref . G4e79) (vector-length . G4e77) (vector-fill! . G4e75) (vector->list . G4e74) (vector . G4e73) (values . G4e72) (truncate . G4e71) (tan . G4e70) (symbol? . G4e6f) (symbol->string . G4e6d) (substring . G4e6c) (string? . G4e6b) (string>? . G4e6a) (string>=? . G4e69) (string=? . G4e68) (string<? . G4e67) (string<=? . G4e66) (string-ref . G4e65) (string-length . G4e64) (string-copy . G4e62) (string-append . G4e61) (string->symbol . G4e60) (string->number . G4e5f) (string->list . G4e5e) (string . G4e5d) (sqrt . G4e5c) (sin . G4e5b) (round . G4e5a) (reverse . G4e59) (real? . G4e58) (real-part . G4e56) (rationalize . G4e55) (rational? . G4e54) (procedure? . G4e52) (positive? . G4e51) (pair? . G4e50) (odd? . G4e4f) (numerator . G4e4e) (number? . G4e4d) (number->string . G4e4c) (not . G4e4a) (negative? . G4e49) (min . G4e47) (max . G4e46) (map . G4e45) (make-vector . G4e44) (make-string . G4e43) (make-rectangular . G4e42) (make-polar . G4e41) (magnitude . G4e40) (log . G4e3f) (list? . G4e3e) (list-tail . G4e3d) (list-ref . G4e3c) (list->vector . G4e3b) (list->string . G4e3a) (list . G4e39) (length . G4e38) (lcm . G4e37) (integer? . G4e36) (integer->char . G4e34) (inexact? . G4e32) (imag-part . G4e30) (gcd . G4e2f) (for-each . G4e2e) (floor . G4e2d) (expt . G4e2b) (exp . G4e2a) (exact? . G4e29) (even? . G4e26) (eqv? . G4e24) (equal? . G4e23) (eq? . G4e22) (dynamic-wind . G4e21) (denominator . G4e1a) (cos . G4e19) (cons . G4e18) (complex? . G4e17) (char? . G4e16) (char>? . G4e15) (char>=? . G4e14) (char=? . G4e13) (char<? . G4e12) (char<=? . G4e11) (char->integer . G4e10) (ceiling . G4e0f) (call-with-values . G4e0e) (call-with-current-continuation . G4e0c) (cddddr . G4e0b) (cdddar . G4e0a) (cddadr . G4e09) (cddaar . G4e08) (cdaddr . G4e07) (cdadar . G4e06) (cdaadr . G4e05) (cdaaar . G4e04) (cadddr . G4e03) (caddar . G4e02) (cadadr . G4e01) (cadaar . G4e00) (caaddr . G4dff) (caadar . G4dfe) (caaadr . G4dfd) (caaaar . G4dfc) (cdddr . G4dfb) (cddar . G4dfa) (cdadr . G4df9) (cdaar . G4df8) (caddr . G4df7) (cadar . G4df6) (caadr . G4df5) (caaar . G4df4) (cddr . G4df3) (cdar . G4df2) (cadr . G4df1) (caar . G4df0) (cdr . G4def) (car . G4dee) (boolean? . G4ded) (atan . G4deb) (asin . G4de9) (apply . G4de8) (append . G4de7) (angle . G4de6) (acos . G4de5) (abs . G4de4) (/ . G4de3) (* . G4de2) (- . G4de1) (+ . G4de0) (>= . G4ddf) (> . G4dde) (= . G4ddd) (<= . G4ddc) (< . G4ddb) (unquote-splicing . G4da7) (unquote . G4da6) (delay . G4d9f) (or . G4d9d) (and . G4d9c) (do . G4d9b) (cond . G4d9a) (let* . G4d99) (let . G4d98) (quasiquote . G4d92) (syntax-rules . G4d91) (case . G4d8c) (if . G4d88) (letrec . G4d86) (lambda . G4d83) (quote . G4d80) (letrec-syntax . G4d7e) (let-syntax . G4d7d) (set! . G4d7c) (begin . G4d7a) (define-syntax . G4d78) (define . G4d77)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G507d '(psyntax modules) '() '() '() '() '((module . G4d79)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G507e '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G507f '(rnrs) '(6) '() '() '() '((regexp? . G503a) (string-upcase . G4ff4) (string-titlecase . G4ff3) (string-normalize-nfkd . G4ff2) (string-normalize-nfkc . G4ff1) (string-normalize-nfd . G4ff0) (string-normalize-nfc . G4fef) (string-foldcase . G4fee) (string-downcase . G4fed) (string-ci>? . G4fec) (string-ci>=? . G4feb) (string-ci=? . G4fea) (string-ci<? . G4fe9) (string-ci<=? . G4fe8) (char-whitespace? . G4fe7) (char-upper-case? . G4fe6) (char-title-case? . G4fe5) (char-numeric? . G4fe4) (char-lower-case? . G4fe3) (char-general-category . G4fe2) (char-upcase . G4fe1) (char-titlecase . G4fe0) (char-foldcase . G4fdf) (char-downcase . G4fde) (char-ci>? . G4fdd) (char-ci>=? . G4fdc) (char-ci=? . G4fdb) (char-ci<? . G4fda) (char-ci<=? . G4fd9) (char-alphabetic? . G4fd8) (make-variable-transformer . G2dfd) (identifier? . G30af) (generate-temporaries . G3099) (free-identifier=? . G309b) (syntax->datum . G30b3) (datum->syntax . G30b1) (bound-identifier=? . G309d) (record-type-descriptor? . G4fd7) (record-predicate . G4fd6) (record-mutator . G4fd5) (record-constructor . G4fd4) (record-accessor . G4fd3) (make-record-type-descriptor . G4fd2) (make-record-constructor-descriptor . G4fd1) (record? . G4fd0) (record-type-uid . G4fcf) (record-type-sealed? . G4fce) (record-type-parent . G4fcd) (record-type-opaque? . G4fcc) (record-type-name . G4fcb) (record-type-generative? . G4fca) (record-type-field-names . G4fc9) (record-rtd . G4fc8) (record-field-mutable? . G4fc7) (delete-file . G4fc6) (file-exists? . G4fc5) (vector-sort! . G4fc4) (vector-sort . G4fc3) (list-sort . G4fc2) (symbol-hash . G4fc1) (string-ci-hash . G4fc0) (string-hash . G4fbf) (equal-hash . G4fbe) (hashtable-equivalence-function . G4fbd) (make-hashtable . G4fbc) (hashtable-hash-function . G4fbb) (make-eqv-hashtable . G4fba) (make-eq-hashtable . G4fb9) (hashtable? . G4fb8) (hashtable-update! . G4fb7) (hashtable-size . G4fb6) (hashtable-set! . G4fb5) (hashtable-ref . G4fb4) (hashtable-mutable? . G4fb3) (hashtable-keys . G4fb2) (hashtable-entries . G4fb1) (hashtable-delete! . G4fb0) (hashtable-copy . G4faf) (hashtable-contains? . G4fae) (hashtable-clear! . G4fad) (call-with-output-file . G4fac) (call-with-input-file . G4fab) (write-char . G4faa) (write . G4fa9) (with-output-to-file . G4fa8) (with-input-from-file . G4fa7) (read-char . G4fa6) (read . G4fa5) (peek-char . G4fa4) (open-output-file . G4fa3) (open-input-file . G4fa2) (newline . G4fa1) (display . G4fa0) (close-output-port . G4f9f) (close-input-port . G4f9e) (eof-object? . G4f9d) (eof-object . G4f9c) (current-error-port . G4f9b) (current-output-port . G4f9a) (current-input-port . G4f99) (output-port? . G4f98) (input-port? . G4f97) (utf-8-codec . G4f96) (utf-16-codec . G4f95) (transcoder-error-handling-mode . G4f94) (transcoder-eol-style . G4f93) (transcoder-codec . G4f92) (transcoded-port . G4f91) (textual-port? . G4f90) (string->bytevector . G4f8f) (standard-output-port . G4f8e) (standard-input-port . G4f8d) (standard-error-port . G4f8c) (set-port-position! . G4f8b) (put-u8 . G4f8a) (put-string . G4f89) (put-datum . G4f88) (put-char . G4f87) (put-bytevector . G4f86) (port? . G4f85) (port-transcoder . G4f84) (port-position . G4f83) (port-has-set-port-position!? . G4f82) (port-has-port-position? . G4f81) (port-eof? . G4f80) (output-port-buffer-mode . G4f7f) (open-string-output-port . G4f7e) (open-string-input-port . G4f7d) (open-file-output-port . G4f7c) (open-file-input/output-port . G4f7b) (open-file-input-port . G4f7a) (open-bytevector-output-port . G4f79) (open-bytevector-input-port . G4f78) (native-transcoder . G4f77) (native-eol-style . G4f76) (make-transcoder . G4f75) (latin-1-codec . G4f74) (make-i/o-write-error . G4bc7) (make-i/o-read-error . G4bb5) (make-i/o-port-error . G4c50) (make-i/o-invalid-position-error . G4bda) (make-i/o-filename-error . G4bf1) (make-i/o-file-protection-error . G4c07) (make-i/o-file-is-read-only-error . G4c19) (make-i/o-file-does-not-exist-error . G4c3d) (make-i/o-file-already-exists-error . G4c2b) (make-i/o-error . G4ba3) (make-i/o-encoding-error . G4c79) (make-i/o-decoding-error . G4c66) (make-custom-textual-output-port . G4f73) (make-custom-textual-input/output-port . G4f72) (make-custom-textual-input-port . G4f71) (make-custom-binary-output-port . G4f70) (make-custom-binary-input/output-port . G4f6f) (make-custom-binary-input-port . G4f6e) (make-bytevector . G4f6d) (lookahead-u8 . G4f6c) (lookahead-char . G4f6b) (i/o-write-error? . G4bc9) (i/o-read-error? . G4bb7) (i/o-port-error? . G4c54) (i/o-invalid-position-error? . G4bde) (i/o-filename-error? . G4bf5) (i/o-file-protection-error? . G4c09) (i/o-file-is-read-only-error? . G4c1b) (i/o-file-does-not-exist-error? . G4c3f) (i/o-file-already-exists-error? . G4c2d) (i/o-error? . G4ba5) (i/o-error-port . G4c56) (i/o-error-filename . G4bf7) (i/o-encoding-error? . G4c7d) (i/o-encoding-error-char . G4c7f) (i/o-decoding-error? . G4c68) (get-u8 . G4f6a) (get-string-n! . G4f69) (get-string-n . G4f68) (get-string-all . G4f67) (get-line . G4f66) (get-datum . G4f65) (get-char . G4f64) (get-bytevector-some . G4f63) (get-bytevector-n! . G4f62) (get-bytevector-n . G4f61) (get-bytevector-all . G4f60) (flush-output-port . G4f5f) (close-port . G4f5e) (exit . G4f57) (command-line . G4cd8) (remove . G4f52) (remv . G4f51) (remp . G4f50) (remq . G4f4f) (partition . G4f4e) (memv . G4f4d) (memq . G4f4c) (memp . G4f4b) (member . G4f4a) (exists . G4f49) (for-all . G4f48) (fold-right . G4f47) (fold-left . G4f46) (find . G4f45) (filter . G4f44) (cons* . G4f43) (assv . G4f42) (assq . G4f41) (assp . G4f40) (assoc . G4f3f) (call-with-string-output-port . G4f3e) (call-with-port . G4f3d) (call-with-bytevector-output-port . G4f3c) (bytevector->string . G4f3b) (buffer-mode? . G4f3a) (binary-port? . G4f39) (with-exception-handler . G4f38) (raise-continuable . G4f37) (raise . G4f36) (make-enumeration . G4f35) (enum-set=? . G4f34) (enum-set-universe . G4f33) (enum-set-union . G4f32) (enum-set-subset? . G4f31) (enum-set-projection . G4f30) (enum-set-member? . G4f2f) (enum-set-intersection . G4f2e) (enum-set-indexer . G4f2d) (enum-set-difference . G4f2c) (enum-set-constructor . G4f2b) (enum-set-complement . G4f2a) (enum-set->list . G4f29) (who-condition? . G4a9d) (warning? . G4a29) (violation? . G4a5f) (undefined-violation? . G4b03) (syntax-violation? . G4aed) (syntax-violation-subform . G4af1) (syntax-violation-form . G4aef) (syntax-violation . G30ad) (simple-conditions . G4f28) (serious-condition? . G4a3b) (non-continuable-violation? . G4ab1) (message-condition? . G4a15) (make-who-condition . G4a99) (make-warning . G4a27) (make-violation . G4a5d) (make-undefined-violation . G4b01) (make-syntax-violation . G4ae7) (make-serious-condition . G4a39) (make-non-continuable-violation . G4aaf) (make-message-condition . G4a11) (make-lexical-violation . G4ad3) (make-irritants-condition . G4a82) (make-implementation-restriction-violation . G4ac1) (make-error . G4a4b) (make-assertion-violation . G4a6f) (lexical-violation? . G4ad5) (irritants-condition? . G4a86) (implementation-restriction-violation? . G4ac3) (error? . G4a4d) (condition-who . G4a9f) (condition-predicate . G4f27) (condition-message . G4a17) (condition-irritants . G4a88) (condition-accessor . G4f26) (condition . G4f25) (assertion-violation? . G4a71) (condition? . G4f24) (utf32->string . G4f23) (utf16->string . G4f22) (utf8->string . G4f21) (uint-list->bytevector . G4f20) (u8-list->bytevector . G4f1f) (string->utf8 . G4f1e) (string->utf32 . G4f1d) (string->utf16 . G4f1c) (sint-list->bytevector . G4f1b) (native-endianness . G4f1a) (bytevector? . G4f19) (bytevector=? . G4f18) (bytevector-uint-set! . G4f17) (bytevector-uint-ref . G4f16) (bytevector-u8-set! . G4f15) (bytevector-u8-ref . G4f14) (bytevector-u64-set! . G4f13) (bytevector-u64-ref . G4f12) (bytevector-u64-native-set! . G4f11) (bytevector-u64-native-ref . G4f10) (bytevector-u32-set! . G4f0f) (bytevector-u32-ref . G4f0e) (bytevector-u32-native-set! . G4f0d) (bytevector-u32-native-ref . G4f0c) (bytevector-u16-set! . G4f0b) (bytevector-u16-ref . G4f0a) (bytevector-u16-native-set! . G4f09) (bytevector-u16-native-ref . G4f08) (bytevector-sint-set! . G4f07) (bytevector-sint-ref . G4f06) (bytevector-s8-set! . G4f05) (bytevector-s8-ref . G4f04) (bytevector-s64-set! . G4f03) (bytevector-s64-ref . G4f02) (bytevector-s64-native-set! . G4f01) (bytevector-s64-native-ref . G4f00) (bytevector-s32-set! . G4eff) (bytevector-s32-ref . G4efe) (bytevector-s32-native-set! . G4efd) (bytevector-s32-native-ref . G4efc) (bytevector-s16-set! . G4efb) (bytevector-s16-ref . G4efa) (bytevector-s16-native-set! . G4ef9) (bytevector-s16-native-ref . G4ef8) (bytevector-length . G4ef7) (bytevector-ieee-single-ref . G4ef6) (bytevector-ieee-single-set! . G4ef5) (bytevector-ieee-single-native-set! . G4ef4) (bytevector-ieee-single-native-ref . G4ef3) (bytevector-ieee-double-set! . G4ef2) (bytevector-ieee-double-ref . G4ef1) (bytevector-ieee-double-native-set! . G4ef0) (bytevector-ieee-double-native-ref . G4eef) (bytevector-fill! . G4eee) (bytevector-copy! . G4eed) (bytevector-copy . G4eec) (bytevector->uint-list . G4eeb) (bytevector->u8-list . G4eea) (bytevector->sint-list . G4ee9) (no-nans-violation? . G4b27) (no-infinities-violation? . G4b15) (make-no-nans-violation . G4b25) (make-no-infinities-violation . G4b13) (real->flonum . G4ee8) (flzero? . G4ee7) (fltruncate . G4ee6) (fltan . G4ee5) (flsqrt . G4ee4) (flsin . G4ee3) (flround . G4ee2) (flpositive? . G4ee1) (flonum? . G4ee0) (flodd? . G4edf) (flnumerator . G4ede) (flnegative? . G4edd) (flnan? . G4edc) (flmod0 . G4edb) (flmod . G4eda) (flmin . G4ed9) (flmax . G4ed8) (fllog . G4ed7) (flinteger? . G4ed6) (flinfinite? . G4ed5) (flfloor . G4ed4) (flfinite? . G4ed3) (flexpt . G4ed2) (flexp . G4ed1) (fleven? . G4ed0) (fldiv0-and-mod0 . G4ecf) (fldiv0 . G4ece) (fldiv-and-mod . G4ecd) (fldiv . G4ecc) (fldenominator . G4ecb) (flcos . G4eca) (flceiling . G4ec9) (flatan . G4ec8) (flasin . G4ec7) (flacos . G4ec6) (flabs . G4ec5) (fl>? . G4ec4) (fl>=? . G4ec3) (fl=? . G4ec2) (fl<? . G4ec1) (fl<=? . G4ec0) (fl/ . G4ebf) (fl- . G4ebe) (fl+ . G4ebd) (fl* . G4ebc) (fixnum->flonum . G4ebb) (fxzero? . G4eba) (fxxor . G4eb9) (fxrotate-bit-field . G4eb8) (fxreverse-bit-field . G4eb7) (fxpositive? . G4eb6) (fxodd? . G4eb5) (fxnot . G4eb4) (fxnegative? . G4eb3) (fxmod0 . G4eb2) (fxmod . G4eb1) (fxmin . G4eb0) (fxmax . G4eaf) (fxlength . G4eae) (fxior . G4ead) (fxif . G4eac) (fxfirst-bit-set . G4eab) (fxeven? . G4eaa) (fxdiv0-and-mod0 . G4ea9) (fxdiv0 . G4ea8) (fxdiv-and-mod . G4ea7) (fxdiv . G4ea6) (fxcopy-bit-field . G4ea5) (fxcopy-bit . G4ea4) (fxbit-set? . G4ea3) (fxbit-field . G4ea2) (fxbit-count . G4ea1) (fxarithmetic-shift-right . G4ea0) (fxarithmetic-shift-left . G4e9f) (fxarithmetic-shift . G4e9e) (fxand . G4e9d) (fx>? . G4e9c) (fx>=? . G4e9b) (fx=? . G4e9a) (fx<? . G4e99) (fx<=? . G4e98) (fx-/carry . G4e97) (fx- . G4e96) (fx+/carry . G4e95) (fx+ . G4e94) (fx*/carry . G4e93) (fx* . G4e92) (greatest-fixnum . G4e91) (least-fixnum . G4e90) (fixnum-width . G4e8f) (fixnum? . G4e8e) (bitwise-rotate-bit-field . G4e8d) (bitwise-reverse-bit-field . G4e8c) (bitwise-length . G4e8b) (bitwise-if . G4e8a) (bitwise-first-bit-set . G4e89) (bitwise-copy-bit-field . G4e88) (bitwise-copy-bit . G4e87) (bitwise-bit-set? . G4e86) (bitwise-bit-field . G4e85) (bitwise-bit-count . G4e84) (bitwise-xor . G4e83) (bitwise-ior . G4e82) (bitwise-and . G4e81) (bitwise-not . G4e80) (bitwise-arithmetic-shift-right . G4e7f) (bitwise-arithmetic-shift-left . G4e7e) (bitwise-arithmetic-shift . G4e7d) (zero? . G4e7c) (vector? . G4e7b) (vector-set! . G4e7a) (vector-ref . G4e79) (vector-map . G4e78) (vector-length . G4e77) (vector-for-each . G4e76) (vector-fill! . G4e75) (vector->list . G4e74) (vector . G4e73) (values . G4e72) (truncate . G4e71) (tan . G4e70) (symbol? . G4e6f) (symbol=? . G4e6e) (symbol->string . G4e6d) (substring . G4e6c) (string? . G4e6b) (string>? . G4e6a) (string>=? . G4e69) (string=? . G4e68) (string<? . G4e67) (string<=? . G4e66) (string-ref . G4e65) (string-length . G4e64) (string-for-each . G4e63) (string-copy . G4e62) (string-append . G4e61) (string->symbol . G4e60) (string->number . G4e5f) (string->list . G4e5e) (string . G4e5d) (sqrt . G4e5c) (sin . G4e5b) (round . G4e5a) (reverse . G4e59) (real? . G4e58) (real-valued? . G4e57) (real-part . G4e56) (rationalize . G4e55) (rational? . G4e54) (rational-valued? . G4e53) (procedure? . G4e52) (positive? . G4e51) (pair? . G4e50) (odd? . G4e4f) (numerator . G4e4e) (number? . G4e4d) (number->string . G4e4c) (null? . G4e4b) (not . G4e4a) (negative? . G4e49) (nan? . G4e48) (min . G4e47) (max . G4e46) (map . G4e45) (make-vector . G4e44) (make-string . G4e43) (make-rectangular . G4e42) (make-polar . G4e41) (magnitude . G4e40) (log . G4e3f) (list? . G4e3e) (list-tail . G4e3d) (list-ref . G4e3c) (list->vector . G4e3b) (list->string . G4e3a) (list . G4e39) (length . G4e38) (lcm . G4e37) (integer? . G4e36) (integer-valued? . G4e35) (integer->char . G4e34) (infinite? . G4e33) (inexact? . G4e32) (inexact . G4e31) (imag-part . G4e30) (gcd . G4e2f) (for-each . G4e2e) (floor . G4e2d) (finite? . G4e2c) (expt . G4e2b) (exp . G4e2a) (exact? . G4e29) (exact-integer-sqrt . G4e28) (exact . G4e27) (even? . G4e26) (error . G4e25) (eqv? . G4e24) (equal? . G4e23) (eq? . G4e22) (dynamic-wind . G4e21) (div0-and-mod0 . G4e20) (mod0 . G4e1f) (div0 . G4e1e) (div-and-mod . G4e1d) (mod . G4e1c) (div . G4e1b) (denominator . G4e1a) (cos . G4e19) (cons . G4e18) (complex? . G4e17) (char? . G4e16) (char>? . G4e15) (char>=? . G4e14) (char=? . G4e13) (char<? . G4e12) (char<=? . G4e11) (char->integer . G4e10) (ceiling . G4e0f) (call-with-values . G4e0e) (call/cc . G4e0d) (call-with-current-continuation . G4e0c) (cddddr . G4e0b) (cdddar . G4e0a) (cddadr . G4e09) (cddaar . G4e08) (cdaddr . G4e07) (cdadar . G4e06) (cdaadr . G4e05) (cdaaar . G4e04) (cadddr . G4e03) (caddar . G4e02) (cadadr . G4e01) (cadaar . G4e00) (caaddr . G4dff) (caadar . G4dfe) (caaadr . G4dfd) (caaaar . G4dfc) (cdddr . G4dfb) (cddar . G4dfa) (cdadr . G4df9) (cdaar . G4df8) (caddr . G4df7) (cadar . G4df6) (caadr . G4df5) (caaar . G4df4) (cddr . G4df3) (cdar . G4df2) (cadr . G4df1) (caar . G4df0) (cdr . G4def) (car . G4dee) (boolean? . G4ded) (boolean=? . G4dec) (atan . G4deb) (assertion-violation . G4dea) (asin . G4de9) (apply . G4de8) (append . G4de7) (angle . G4de6) (acos . G4de5) (abs . G4de4) (/ . G4de3) (* . G4de2) (- . G4de1) (+ . G4de0) (>= . G4ddf) (> . G4dde) (= . G4ddd) (<= . G4ddc) (< . G4ddb) (&no-nans . G4dd8) (&no-infinities . G4dd7) (&i/o-encoding . G4dd6) (&i/o-decoding . G4dd5) (&i/o-port . G4dd4) (&i/o-file-does-not-exist . G4dd3) (&i/o-file-already-exists . G4dd2) (&i/o-file-is-read-only . G4dd1) (&i/o-file-protection . G4dd0) (&i/o-filename . G4dcf) (&i/o-invalid-position . G4dce) (&i/o-write . G4dcd) (&i/o-read . G4dcc) (&i/o . G4dcb) (&undefined . G4dca) (&syntax . G4dc9) (&lexical . G4dc8) (&implementation-restriction . G4dc7) (&non-continuable . G4dc6) (&who . G4dc5) (&irritants . G4dc4) (&assertion . G4dc3) (&violation . G4dc2) (&error . G4dc1) (&serious . G4dc0) (&warning . G4dbf) (&message . G4dbe) (&condition . G4dbd) (define-condition-type . G4dbc) (define-enumeration . G4dbb) (define-record-type . G4dba) (parent-rtd . G4db9) (nongenerative . G4db8) (opaque . G4db7) (sealed . G4db6) (protocol . G4db5) (parent . G4db4) (immutable . G4db3) (mutable . G4db2) (fields . G4db1) (error-handling-mode . G4db0) (file-options . G4daf) (buffer-mode . G4dae) (eol-style . G4dad) (guard . G4dac) (unsyntax-splicing . G4da9) (unsyntax . G4da8) (unquote-splicing . G4da7) (unquote . G4da6) (_ . G4da5) (else . G4da4) (=> . G4da3) (... . G4da2) (assert . G4da1) (endianness . G4da0) (or . G4d9d) (and . G4d9c) (do . G4d9b) (cond . G4d9a) (let* . G4d99) (let . G4d98) (let*-values . G4d97) (let-values . G4d96) (identifier-syntax . G4d95) (with-syntax . G4d94) (quasisyntax . G4d93) (quasiquote . G4d92) (syntax-rules . G4d91) (record-constructor-descriptor . G4d8e) (record-type-descriptor . G4d8d) (case . G4d8c) (unless . G4d8a) (when . G4d89) (if . G4d88) (letrec* . G4d87) (letrec . G4d86) (case-lambda . G4d84) (lambda . G4d83) (syntax . G4d82) (syntax-case . G4d81) (quote . G4d80) (letrec-syntax . G4d7e) (let-syntax . G4d7d) (set! . G4d7c) (begin . G4d7a) (define-syntax . G4d78) (define . G4d77)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5080 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3087) (quotient . G4f5d) (null-environment . G3085) (remainder . G4f5c) (modulo . G4f5b) (inexact->exact . G4f5a) (force . G4f59) (exact->inexact . G4f58) (delay . G4d9f)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5081 '(rnrs control) '(6) '() '() '() '((do . G4d9b) (unless . G4d8a) (when . G4d89) (case-lambda . G4d84)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5082 '(rnrs eval) '(6) '() '() '() '((eval . G308b) (environment . G3083)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5083 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4f54) (set-car! . G4f53)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5084 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4f56) (string-set! . G4f55)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5085 '(rnrs programs) '(6) '() '() '() '((exit . G4f57) (command-line . G4cd8)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5086 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2dfd) (identifier? . G30af) (generate-temporaries . G3099) (free-identifier=? . G309b) (syntax->datum . G30b3) (datum->syntax . G30b1) (bound-identifier=? . G309d) (syntax-violation . G30ad) (unsyntax-splicing . G4da9) (unsyntax . G4da8) (_ . G4da5) (... . G4da2) (with-syntax . G4d94) (quasisyntax . G4d93) (syntax . G4d82) (syntax-case . G4d81)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5087 '(rnrs files) '(6) '() '() '() '((delete-file . G4fc6) (file-exists? . G4fc5) (make-i/o-write-error . G4bc7) (make-i/o-read-error . G4bb5) (make-i/o-port-error . G4c50) (make-i/o-invalid-position-error . G4bda) (make-i/o-filename-error . G4bf1) (make-i/o-file-protection-error . G4c07) (make-i/o-file-is-read-only-error . G4c19) (make-i/o-file-does-not-exist-error . G4c3d) (make-i/o-file-already-exists-error . G4c2b) (make-i/o-error . G4ba3) (i/o-write-error? . G4bc9) (i/o-read-error? . G4bb7) (i/o-port-error? . G4c54) (i/o-invalid-position-error? . G4bde) (i/o-filename-error? . G4bf5) (i/o-file-protection-error? . G4c09) (i/o-file-is-read-only-error? . G4c1b) (i/o-file-does-not-exist-error? . G4c3f) (i/o-file-already-exists-error? . G4c2d) (i/o-error? . G4ba5) (i/o-error-port . G4c56) (i/o-error-filename . G4bf7) (&i/o-port . G4dd4) (&i/o-file-does-not-exist . G4dd3) (&i/o-file-already-exists . G4dd2) (&i/o-file-is-read-only . G4dd1) (&i/o-file-protection . G4dd0) (&i/o-filename . G4dcf) (&i/o-invalid-position . G4dce) (&i/o-write . G4dcd) (&i/o-read . G4dcc) (&i/o . G4dcb)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5088 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4fc4) (vector-sort . G4fc3) (list-sort . G4fc2)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5089 '(rnrs base) '(6) '() '() '() '((zero? . G4e7c) (vector? . G4e7b) (vector-set! . G4e7a) (vector-ref . G4e79) (vector-map . G4e78) (vector-length . G4e77) (vector-for-each . G4e76) (vector-fill! . G4e75) (vector->list . G4e74) (vector . G4e73) (values . G4e72) (truncate . G4e71) (tan . G4e70) (symbol? . G4e6f) (symbol=? . G4e6e) (symbol->string . G4e6d) (substring . G4e6c) (string? . G4e6b) (string>? . G4e6a) (string>=? . G4e69) (string=? . G4e68) (string<? . G4e67) (string<=? . G4e66) (string-ref . G4e65) (string-length . G4e64) (string-for-each . G4e63) (string-copy . G4e62) (string-append . G4e61) (string->symbol . G4e60) (string->number . G4e5f) (string->list . G4e5e) (string . G4e5d) (sqrt . G4e5c) (sin . G4e5b) (round . G4e5a) (reverse . G4e59) (real? . G4e58) (real-valued? . G4e57) (real-part . G4e56) (rationalize . G4e55) (rational? . G4e54) (rational-valued? . G4e53) (procedure? . G4e52) (positive? . G4e51) (pair? . G4e50) (odd? . G4e4f) (numerator . G4e4e) (number? . G4e4d) (number->string . G4e4c) (null? . G4e4b) (not . G4e4a) (negative? . G4e49) (nan? . G4e48) (min . G4e47) (max . G4e46) (map . G4e45) (make-vector . G4e44) (make-string . G4e43) (make-rectangular . G4e42) (make-polar . G4e41) (magnitude . G4e40) (log . G4e3f) (list? . G4e3e) (list-tail . G4e3d) (list-ref . G4e3c) (list->vector . G4e3b) (list->string . G4e3a) (list . G4e39) (length . G4e38) (lcm . G4e37) (integer? . G4e36) (integer-valued? . G4e35) (integer->char . G4e34) (infinite? . G4e33) (inexact? . G4e32) (inexact . G4e31) (imag-part . G4e30) (gcd . G4e2f) (for-each . G4e2e) (floor . G4e2d) (finite? . G4e2c) (expt . G4e2b) (exp . G4e2a) (exact? . G4e29) (exact-integer-sqrt . G4e28) (exact . G4e27) (even? . G4e26) (error . G4e25) (eqv? . G4e24) (equal? . G4e23) (eq? . G4e22) (dynamic-wind . G4e21) (div0-and-mod0 . G4e20) (mod0 . G4e1f) (div0 . G4e1e) (div-and-mod . G4e1d) (mod . G4e1c) (div . G4e1b) (denominator . G4e1a) (cos . G4e19) (cons . G4e18) (complex? . G4e17) (char? . G4e16) (char>? . G4e15) (char>=? . G4e14) (char=? . G4e13) (char<? . G4e12) (char<=? . G4e11) (char->integer . G4e10) (ceiling . G4e0f) (call-with-values . G4e0e) (call/cc . G4e0d) (call-with-current-continuation . G4e0c) (cddddr . G4e0b) (cdddar . G4e0a) (cddadr . G4e09) (cddaar . G4e08) (cdaddr . G4e07) (cdadar . G4e06) (cdaadr . G4e05) (cdaaar . G4e04) (cadddr . G4e03) (caddar . G4e02) (cadadr . G4e01) (cadaar . G4e00) (caaddr . G4dff) (caadar . G4dfe) (caaadr . G4dfd) (caaaar . G4dfc) (cdddr . G4dfb) (cddar . G4dfa) (cdadr . G4df9) (cdaar . G4df8) (caddr . G4df7) (cadar . G4df6) (caadr . G4df5) (caaar . G4df4) (cddr . G4df3) (cdar . G4df2) (cadr . G4df1) (caar . G4df0) (cdr . G4def) (car . G4dee) (boolean? . G4ded) (boolean=? . G4dec) (atan . G4deb) (assertion-violation . G4dea) (asin . G4de9) (apply . G4de8) (append . G4de7) (angle . G4de6) (acos . G4de5) (abs . G4de4) (/ . G4de3) (* . G4de2) (- . G4de1) (+ . G4de0) (>= . G4ddf) (> . G4dde) (= . G4ddd) (<= . G4ddc) (< . G4ddb) (unquote-splicing . G4da7) (unquote . G4da6) (_ . G4da5) (else . G4da4) (=> . G4da3) (... . G4da2) (assert . G4da1) (or . G4d9d) (and . G4d9c) (cond . G4d9a) (let* . G4d99) (let . G4d98) (let*-values . G4d97) (let-values . G4d96) (identifier-syntax . G4d95) (quasiquote . G4d92) (syntax-rules . G4d91) (case . G4d8c) (if . G4d88) (letrec* . G4d87) (letrec . G4d86) (lambda . G4d83) (quote . G4d80) (letrec-syntax . G4d7e) (let-syntax . G4d7d) (set! . G4d7c) (begin . G4d7a) (define-syntax . G4d78) (define . G4d77)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G508a '(rnrs lists) '(6) '() '() '() '((remove . G4f52) (remv . G4f51) (remp . G4f50) (remq . G4f4f) (partition . G4f4e) (memv . G4f4d) (memq . G4f4c) (memp . G4f4b) (member . G4f4a) (exists . G4f49) (for-all . G4f48) (fold-right . G4f47) (fold-left . G4f46) (find . G4f45) (filter . G4f44) (cons* . G4f43) (assv . G4f42) (assq . G4f41) (assp . G4f40) (assoc . G4f3f)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G508b '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4fac) (call-with-input-file . G4fab) (write-char . G4faa) (write . G4fa9) (with-output-to-file . G4fa8) (with-input-from-file . G4fa7) (read-char . G4fa6) (read . G4fa5) (peek-char . G4fa4) (open-output-file . G4fa3) (open-input-file . G4fa2) (newline . G4fa1) (display . G4fa0) (close-output-port . G4f9f) (close-input-port . G4f9e) (eof-object? . G4f9d) (eof-object . G4f9c) (current-error-port . G4f9b) (current-output-port . G4f9a) (current-input-port . G4f99) (output-port? . G4f98) (input-port? . G4f97) (make-i/o-write-error . G4bc7) (make-i/o-read-error . G4bb5) (make-i/o-port-error . G4c50) (make-i/o-invalid-position-error . G4bda) (make-i/o-filename-error . G4bf1) (make-i/o-file-protection-error . G4c07) (make-i/o-file-is-read-only-error . G4c19) (make-i/o-file-does-not-exist-error . G4c3d) (make-i/o-file-already-exists-error . G4c2b) (make-i/o-error . G4ba3) (i/o-write-error? . G4bc9) (i/o-read-error? . G4bb7) (i/o-port-error? . G4c54) (i/o-invalid-position-error? . G4bde) (i/o-filename-error? . G4bf5) (i/o-file-protection-error? . G4c09) (i/o-file-is-read-only-error? . G4c1b) (i/o-file-does-not-exist-error? . G4c3f) (i/o-file-already-exists-error? . G4c2d) (i/o-error? . G4ba5) (i/o-error-port . G4c56) (i/o-error-filename . G4bf7) (&i/o-port . G4dd4) (&i/o-file-does-not-exist . G4dd3) (&i/o-file-already-exists . G4dd2) (&i/o-file-is-read-only . G4dd1) (&i/o-file-protection . G4dd0) (&i/o-filename . G4dcf) (&i/o-invalid-position . G4dce) (&i/o-write . G4dcd) (&i/o-read . G4dcc) (&i/o . G4dcb)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G508c '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4f6d) (utf32->string . G4f23) (utf16->string . G4f22) (utf8->string . G4f21) (uint-list->bytevector . G4f20) (u8-list->bytevector . G4f1f) (string->utf8 . G4f1e) (string->utf32 . G4f1d) (string->utf16 . G4f1c) (sint-list->bytevector . G4f1b) (native-endianness . G4f1a) (bytevector? . G4f19) (bytevector=? . G4f18) (bytevector-uint-set! . G4f17) (bytevector-uint-ref . G4f16) (bytevector-u8-set! . G4f15) (bytevector-u8-ref . G4f14) (bytevector-u64-set! . G4f13) (bytevector-u64-ref . G4f12) (bytevector-u64-native-set! . G4f11) (bytevector-u64-native-ref . G4f10) (bytevector-u32-set! . G4f0f) (bytevector-u32-ref . G4f0e) (bytevector-u32-native-set! . G4f0d) (bytevector-u32-native-ref . G4f0c) (bytevector-u16-set! . G4f0b) (bytevector-u16-ref . G4f0a) (bytevector-u16-native-set! . G4f09) (bytevector-u16-native-ref . G4f08) (bytevector-sint-set! . G4f07) (bytevector-sint-ref . G4f06) (bytevector-s8-set! . G4f05) (bytevector-s8-ref . G4f04) (bytevector-s64-set! . G4f03) (bytevector-s64-ref . G4f02) (bytevector-s64-native-set! . G4f01) (bytevector-s64-native-ref . G4f00) (bytevector-s32-set! . G4eff) (bytevector-s32-ref . G4efe) (bytevector-s32-native-set! . G4efd) (bytevector-s32-native-ref . G4efc) (bytevector-s16-set! . G4efb) (bytevector-s16-ref . G4efa) (bytevector-s16-native-set! . G4ef9) (bytevector-s16-native-ref . G4ef8) (bytevector-length . G4ef7) (bytevector-ieee-single-ref . G4ef6) (bytevector-ieee-single-set! . G4ef5) (bytevector-ieee-single-native-set! . G4ef4) (bytevector-ieee-single-native-ref . G4ef3) (bytevector-ieee-double-set! . G4ef2) (bytevector-ieee-double-ref . G4ef1) (bytevector-ieee-double-native-set! . G4ef0) (bytevector-ieee-double-native-ref . G4eef) (bytevector-fill! . G4eee) (bytevector-copy! . G4eed) (bytevector-copy . G4eec) (bytevector->uint-list . G4eeb) (bytevector->u8-list . G4eea) (bytevector->sint-list . G4ee9) (endianness . G4da0)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G508d '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4ff4) (string-titlecase . G4ff3) (string-normalize-nfkd . G4ff2) (string-normalize-nfkc . G4ff1) (string-normalize-nfd . G4ff0) (string-normalize-nfc . G4fef) (string-foldcase . G4fee) (string-downcase . G4fed) (string-ci>? . G4fec) (string-ci>=? . G4feb) (string-ci=? . G4fea) (string-ci<? . G4fe9) (string-ci<=? . G4fe8) (char-whitespace? . G4fe7) (char-upper-case? . G4fe6) (char-title-case? . G4fe5) (char-numeric? . G4fe4) (char-lower-case? . G4fe3) (char-general-category . G4fe2) (char-upcase . G4fe1) (char-titlecase . G4fe0) (char-foldcase . G4fdf) (char-downcase . G4fde) (char-ci>? . G4fdd) (char-ci>=? . G4fdc) (char-ci=? . G4fdb) (char-ci<? . G4fda) (char-ci<=? . G4fd9) (char-alphabetic? . G4fd8)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G508e '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f38) (raise-continuable . G4f37) (raise . G4f36) (guard . G4dac) (else . G4da4) (=> . G4da3)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G508f '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4e8d) (bitwise-reverse-bit-field . G4e8c) (bitwise-length . G4e8b) (bitwise-if . G4e8a) (bitwise-first-bit-set . G4e89) (bitwise-copy-bit-field . G4e88) (bitwise-copy-bit . G4e87) (bitwise-bit-set? . G4e86) (bitwise-bit-field . G4e85) (bitwise-bit-count . G4e84) (bitwise-xor . G4e83) (bitwise-ior . G4e82) (bitwise-and . G4e81) (bitwise-not . G4e80) (bitwise-arithmetic-shift-right . G4e7f) (bitwise-arithmetic-shift-left . G4e7e) (bitwise-arithmetic-shift . G4e7d)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5090 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4eba) (fxxor . G4eb9) (fxrotate-bit-field . G4eb8) (fxreverse-bit-field . G4eb7) (fxpositive? . G4eb6) (fxodd? . G4eb5) (fxnot . G4eb4) (fxnegative? . G4eb3) (fxmod0 . G4eb2) (fxmod . G4eb1) (fxmin . G4eb0) (fxmax . G4eaf) (fxlength . G4eae) (fxior . G4ead) (fxif . G4eac) (fxfirst-bit-set . G4eab) (fxeven? . G4eaa) (fxdiv0-and-mod0 . G4ea9) (fxdiv0 . G4ea8) (fxdiv-and-mod . G4ea7) (fxdiv . G4ea6) (fxcopy-bit-field . G4ea5) (fxcopy-bit . G4ea4) (fxbit-set? . G4ea3) (fxbit-field . G4ea2) (fxbit-count . G4ea1) (fxarithmetic-shift-right . G4ea0) (fxarithmetic-shift-left . G4e9f) (fxarithmetic-shift . G4e9e) (fxand . G4e9d) (fx>? . G4e9c) (fx>=? . G4e9b) (fx=? . G4e9a) (fx<? . G4e99) (fx<=? . G4e98) (fx-/carry . G4e97) (fx- . G4e96) (fx+/carry . G4e95) (fx+ . G4e94) (fx*/carry . G4e93) (fx* . G4e92) (greatest-fixnum . G4e91) (least-fixnum . G4e90) (fixnum-width . G4e8f) (fixnum? . G4e8e)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5091 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4b27) (no-infinities-violation? . G4b15) (make-no-nans-violation . G4b25) (make-no-infinities-violation . G4b13) (real->flonum . G4ee8) (flzero? . G4ee7) (fltruncate . G4ee6) (fltan . G4ee5) (flsqrt . G4ee4) (flsin . G4ee3) (flround . G4ee2) (flpositive? . G4ee1) (flonum? . G4ee0) (flodd? . G4edf) (flnumerator . G4ede) (flnegative? . G4edd) (flnan? . G4edc) (flmod0 . G4edb) (flmod . G4eda) (flmin . G4ed9) (flmax . G4ed8) (fllog . G4ed7) (flinteger? . G4ed6) (flinfinite? . G4ed5) (flfloor . G4ed4) (flfinite? . G4ed3) (flexpt . G4ed2) (flexp . G4ed1) (fleven? . G4ed0) (fldiv0-and-mod0 . G4ecf) (fldiv0 . G4ece) (fldiv-and-mod . G4ecd) (fldiv . G4ecc) (fldenominator . G4ecb) (flcos . G4eca) (flceiling . G4ec9) (flatan . G4ec8) (flasin . G4ec7) (flacos . G4ec6) (flabs . G4ec5) (fl>? . G4ec4) (fl>=? . G4ec3) (fl=? . G4ec2) (fl<? . G4ec1) (fl<=? . G4ec0) (fl/ . G4ebf) (fl- . G4ebe) (fl+ . G4ebd) (fl* . G4ebc) (fixnum->flonum . G4ebb) (&no-nans . G4dd8) (&no-infinities . G4dd7)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5092 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4fc1) (string-ci-hash . G4fc0) (string-hash . G4fbf) (equal-hash . G4fbe) (hashtable-equivalence-function . G4fbd) (make-hashtable . G4fbc) (hashtable-hash-function . G4fbb) (make-eqv-hashtable . G4fba) (make-eq-hashtable . G4fb9) (hashtable? . G4fb8) (hashtable-update! . G4fb7) (hashtable-size . G4fb6) (hashtable-set! . G4fb5) (hashtable-ref . G4fb4) (hashtable-mutable? . G4fb3) (hashtable-keys . G4fb2) (hashtable-entries . G4fb1) (hashtable-delete! . G4fb0) (hashtable-copy . G4faf) (hashtable-contains? . G4fae) (hashtable-clear! . G4fad)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5093 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4f9d) (eof-object . G4f9c) (current-error-port . G4f9b) (current-output-port . G4f9a) (current-input-port . G4f99) (output-port? . G4f98) (input-port? . G4f97) (utf-8-codec . G4f96) (utf-16-codec . G4f95) (transcoder-error-handling-mode . G4f94) (transcoder-eol-style . G4f93) (transcoder-codec . G4f92) (transcoded-port . G4f91) (textual-port? . G4f90) (string->bytevector . G4f8f) (standard-output-port . G4f8e) (standard-input-port . G4f8d) (standard-error-port . G4f8c) (set-port-position! . G4f8b) (put-u8 . G4f8a) (put-string . G4f89) (put-datum . G4f88) (put-char . G4f87) (put-bytevector . G4f86) (port? . G4f85) (port-transcoder . G4f84) (port-position . G4f83) (port-has-set-port-position!? . G4f82) (port-has-port-position? . G4f81) (port-eof? . G4f80) (output-port-buffer-mode . G4f7f) (open-string-output-port . G4f7e) (open-string-input-port . G4f7d) (open-file-output-port . G4f7c) (open-file-input/output-port . G4f7b) (open-file-input-port . G4f7a) (open-bytevector-output-port . G4f79) (open-bytevector-input-port . G4f78) (native-transcoder . G4f77) (native-eol-style . G4f76) (make-transcoder . G4f75) (latin-1-codec . G4f74) (make-i/o-write-error . G4bc7) (make-i/o-read-error . G4bb5) (make-i/o-port-error . G4c50) (make-i/o-invalid-position-error . G4bda) (make-i/o-filename-error . G4bf1) (make-i/o-file-protection-error . G4c07) (make-i/o-file-is-read-only-error . G4c19) (make-i/o-file-does-not-exist-error . G4c3d) (make-i/o-file-already-exists-error . G4c2b) (make-i/o-error . G4ba3) (make-i/o-encoding-error . G4c79) (make-i/o-decoding-error . G4c66) (make-custom-textual-output-port . G4f73) (make-custom-textual-input/output-port . G4f72) (make-custom-textual-input-port . G4f71) (make-custom-binary-output-port . G4f70) (make-custom-binary-input/output-port . G4f6f) (make-custom-binary-input-port . G4f6e) (lookahead-u8 . G4f6c) (lookahead-char . G4f6b) (i/o-write-error? . G4bc9) (i/o-read-error? . G4bb7) (i/o-port-error? . G4c54) (i/o-invalid-position-error? . G4bde) (i/o-filename-error? . G4bf5) (i/o-file-protection-error? . G4c09) (i/o-file-is-read-only-error? . G4c1b) (i/o-file-does-not-exist-error? . G4c3f) (i/o-file-already-exists-error? . G4c2d) (i/o-error? . G4ba5) (i/o-error-port . G4c56) (i/o-error-filename . G4bf7) (i/o-encoding-error? . G4c7d) (i/o-encoding-error-char . G4c7f) (i/o-decoding-error? . G4c68) (get-u8 . G4f6a) (get-string-n! . G4f69) (get-string-n . G4f68) (get-string-all . G4f67) (get-line . G4f66) (get-datum . G4f65) (get-char . G4f64) (get-bytevector-some . G4f63) (get-bytevector-n! . G4f62) (get-bytevector-n . G4f61) (get-bytevector-all . G4f60) (flush-output-port . G4f5f) (close-port . G4f5e) (call-with-string-output-port . G4f3e) (call-with-port . G4f3d) (call-with-bytevector-output-port . G4f3c) (bytevector->string . G4f3b) (buffer-mode? . G4f3a) (binary-port? . G4f39) (&i/o-encoding . G4dd6) (&i/o-decoding . G4dd5) (&i/o-port . G4dd4) (&i/o-file-does-not-exist . G4dd3) (&i/o-file-already-exists . G4dd2) (&i/o-file-is-read-only . G4dd1) (&i/o-file-protection . G4dd0) (&i/o-filename . G4dcf) (&i/o-invalid-position . G4dce) (&i/o-write . G4dcd) (&i/o-read . G4dcc) (&i/o . G4dcb) (error-handling-mode . G4db0) (file-options . G4daf) (buffer-mode . G4dae) (eol-style . G4dad)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5094 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f35) (enum-set=? . G4f34) (enum-set-universe . G4f33) (enum-set-union . G4f32) (enum-set-subset? . G4f31) (enum-set-projection . G4f30) (enum-set-member? . G4f2f) (enum-set-intersection . G4f2e) (enum-set-indexer . G4f2d) (enum-set-difference . G4f2c) (enum-set-constructor . G4f2b) (enum-set-complement . G4f2a) (enum-set->list . G4f29) (define-enumeration . G4dbb)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5095 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a9d) (warning? . G4a29) (violation? . G4a5f) (undefined-violation? . G4b03) (syntax-violation? . G4aed) (syntax-violation-subform . G4af1) (syntax-violation-form . G4aef) (syntax-violation . G30ad) (simple-conditions . G4f28) (serious-condition? . G4a3b) (non-continuable-violation? . G4ab1) (message-condition? . G4a15) (make-who-condition . G4a99) (make-warning . G4a27) (make-violation . G4a5d) (make-undefined-violation . G4b01) (make-syntax-violation . G4ae7) (make-serious-condition . G4a39) (make-non-continuable-violation . G4aaf) (make-message-condition . G4a11) (make-lexical-violation . G4ad3) (make-irritants-condition . G4a82) (make-implementation-restriction-violation . G4ac1) (make-error . G4a4b) (make-assertion-violation . G4a6f) (lexical-violation? . G4ad5) (irritants-condition? . G4a86) (implementation-restriction-violation? . G4ac3) (error? . G4a4d) (condition-who . G4a9f) (condition-predicate . G4f27) (condition-message . G4a17) (condition-irritants . G4a88) (condition-accessor . G4f26) (condition . G4f25) (assertion-violation? . G4a71) (condition? . G4f24) (&undefined . G4dca) (&syntax . G4dc9) (&lexical . G4dc8) (&implementation-restriction . G4dc7) (&non-continuable . G4dc6) (&who . G4dc5) (&irritants . G4dc4) (&assertion . G4dc3) (&violation . G4dc2) (&error . G4dc1) (&serious . G4dc0) (&warning . G4dbf) (&message . G4dbe) (&condition . G4dbd) (define-condition-type . G4dbc)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5096 '(rnrs records inspection) '(6) '() '() '() '((record? . G4fd0) (record-type-uid . G4fcf) (record-type-sealed? . G4fce) (record-type-parent . G4fcd) (record-type-opaque? . G4fcc) (record-type-name . G4fcb) (record-type-generative? . G4fca) (record-type-field-names . G4fc9) (record-rtd . G4fc8) (record-field-mutable? . G4fc7)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5097 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4fd7) (record-predicate . G4fd6) (record-mutator . G4fd5) (record-constructor . G4fd4) (record-accessor . G4fd3) (make-record-type-descriptor . G4fd2) (make-record-constructor-descriptor . G4fd1)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5098 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4dba) (parent-rtd . G4db9) (nongenerative . G4db8) (opaque . G4db7) (sealed . G4db6) (protocol . G4db5) (parent . G4db4) (immutable . G4db3) (mutable . G4db2) (fields . G4db1) (record-constructor-descriptor . G4d8e) (record-type-descriptor . G4d8d)) '() values values '#f '#f '#t '#f) (G2bf3@G2a88@install-library 'G5099 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5079) (&no-nans-rtd . G5078) (&no-infinities-rcd . G5077) (&no-infinities-rtd . G5076) (&i/o-encoding-rcd . G5075) (&i/o-encoding-rtd . G5074) (&i/o-decoding-rcd . G5073) (&i/o-decoding-rtd . G5072) (&i/o-port-rcd . G5071) (&i/o-port-rtd . G5070) (&i/o-file-does-not-exist-rcd . G506f) (&i/o-file-does-not-exist-rtd . G506e) (&i/o-file-already-exists-rcd . G506d) (&i/o-file-already-exists-rtd . G506c) (&i/o-file-is-read-only-rcd . G506b) (&i/o-file-is-read-only-rtd . G506a) (&i/o-file-protection-rcd . G5069) (&i/o-file-protection-rtd . G5068) (&i/o-filename-rcd . G5067) (&i/o-filename-rtd . G5066) (&i/o-invalid-position-rcd . G5065) (&i/o-invalid-position-rtd . G5064) (&i/o-write-rcd . G5063) (&i/o-write-rtd . G5062) (&i/o-read-rcd . G5061) (&i/o-read-rtd . G5060) (&i/o-rcd . G505f) (&i/o-rtd . G505e) (&undefined-rcd . G505d) (&undefined-rtd . G505c) (&syntax-rcd . G505b) (&syntax-rtd . G505a) (&lexical-rcd . G5059) (&lexical-rtd . G5058) (&implementation-restriction-rcd . G5057) (&implementation-restriction-rtd . G5056) (&non-continuable-rcd . G5055) (&non-continuable-rtd . G5054) (&who-rcd . G5053) (&who-rtd . G5052) (&irritants-rcd . G5051) (&irritants-rtd . G5050) (&assertion-rcd . G504f) (&assertion-rtd . G504e) (&violation-rcd . G504d) (&violation-rtd . G504c) (&error-rcd . G504b) (&error-rtd . G504a) (&serious-rcd . G5049) (&serious-rtd . G5048) (&warning-rcd . G5047) (&warning-rtd . G5046) (&message-rcd . G5045) (&message-rtd . G5044) (&condition-rcd . G5043) (&condition-rtd . G5042) (syntax-error . G30a7) (syntax-dispatch . G2fc0) (pretty-print . G5041) (eval-core . G5040) (set-symbol-value! . G503f) (symbol-value . G503e) (gensym . G503d) (void . G503c) (load . G4cde) (interaction-environment . G30b9) (char-ready? . G503b) (regexp? . G503a) (read-line . G5039) (dotted-list? . G5038) (circular-list? . G5037) (proper-list? . G5036) (circular-list . G5035) (last . G5034) (last-pair . G5033) (not-pair? . G5032) (split-at! . G5031) (split-at . G5030) (list= . G502f) (list-copy . G502e) (list-tabulate . G502d) (make-list . G502c) (xcons . G502b) (tenth . G502a) (ninth . G5029) (eighth . G5028) (seventh . G5027) (sixth . G5026) (fifth . G5025) (drop-right! . G5024) (drop-right . G5023) (take-right . G5022) (take! . G5021) (drop . G5020) (take . G501f) (car+cdr . G501e) (third . G501d) (second . G501c) (first . G501b) (iota . G501a) (every . G5019) (assoc-ref . G5018) (alist-cons . G5017) (append-map . G5016) (print . G5015) (format . G5014) (standard-library-path . G5013) (file-newer? . G5012) (stat-mtime . G5011) (current-directory . G5010) (write-to-file . G500f) (file->list . G500e) (file->string . G500d) (digit->integer . G500c) (call-with-string-input-port . G500b) (call-with-string-io . G500a) (string-split . G5009) (bytevector-for-each . G5008) (string->regexp . G5007) (rxmatch . G5006) (regexp-replace-all . G5005) (hashtable-for-each . G5004) (readdir . G5003) (get-environment-variables . G5002) (get-environment-variable . G5001) (get-timeofday . G5000) (get-command-line . G4fff) (sys-display . G4ffe) (source-info . G4ffd) (make-compiler-instruction . G4ffc) (make-instruction . G4ffb) (set-source-info! . G4ffa) (bignum? . G4ff9) (make-complex . G4ff8) (fasl-read . G4ff7) (fasl-write . G4ff6) (receive . G4ff5) (make-parameter . G289e) (string-upcase . G4ff4) (string-titlecase . G4ff3) (string-normalize-nfkd . G4ff2) (string-normalize-nfkc . G4ff1) (string-normalize-nfd . G4ff0) (string-normalize-nfc . G4fef) (string-foldcase . G4fee) (string-downcase . G4fed) (string-ci>? . G4fec) (string-ci>=? . G4feb) (string-ci=? . G4fea) (string-ci<? . G4fe9) (string-ci<=? . G4fe8) (char-whitespace? . G4fe7) (char-upper-case? . G4fe6) (char-title-case? . G4fe5) (char-numeric? . G4fe4) (char-lower-case? . G4fe3) (char-general-category . G4fe2) (char-upcase . G4fe1) (char-titlecase . G4fe0) (char-foldcase . G4fdf) (char-downcase . G4fde) (char-ci>? . G4fdd) (char-ci>=? . G4fdc) (char-ci=? . G4fdb) (char-ci<? . G4fda) (char-ci<=? . G4fd9) (char-alphabetic? . G4fd8) (make-variable-transformer . G2dfd) (identifier? . G30af) (generate-temporaries . G3099) (free-identifier=? . G309b) (syntax->datum . G30b3) (datum->syntax . G30b1) (bound-identifier=? . G309d) (record-type-descriptor? . G4fd7) (record-predicate . G4fd6) (record-mutator . G4fd5) (record-constructor . G4fd4) (record-accessor . G4fd3) (make-record-type-descriptor . G4fd2) (make-record-constructor-descriptor . G4fd1) (record? . G4fd0) (record-type-uid . G4fcf) (record-type-sealed? . G4fce) (record-type-parent . G4fcd) (record-type-opaque? . G4fcc) (record-type-name . G4fcb) (record-type-generative? . G4fca) (record-type-field-names . G4fc9) (record-rtd . G4fc8) (record-field-mutable? . G4fc7) (delete-file . G4fc6) (file-exists? . G4fc5) (vector-sort! . G4fc4) (vector-sort . G4fc3) (list-sort . G4fc2) (symbol-hash . G4fc1) (string-ci-hash . G4fc0) (string-hash . G4fbf) (equal-hash . G4fbe) (hashtable-equivalence-function . G4fbd) (make-hashtable . G4fbc) (hashtable-hash-function . G4fbb) (make-eqv-hashtable . G4fba) (make-eq-hashtable . G4fb9) (hashtable? . G4fb8) (hashtable-update! . G4fb7) (hashtable-size . G4fb6) (hashtable-set! . G4fb5) (hashtable-ref . G4fb4) (hashtable-mutable? . G4fb3) (hashtable-keys . G4fb2) (hashtable-entries . G4fb1) (hashtable-delete! . G4fb0) (hashtable-copy . G4faf) (hashtable-contains? . G4fae) (hashtable-clear! . G4fad) (call-with-output-file . G4fac) (call-with-input-file . G4fab) (write-char . G4faa) (write . G4fa9) (with-output-to-file . G4fa8) (with-input-from-file . G4fa7) (read-char . G4fa6) (read . G4fa5) (peek-char . G4fa4) (open-output-file . G4fa3) (open-input-file . G4fa2) (newline . G4fa1) (display . G4fa0) (close-output-port . G4f9f) (close-input-port . G4f9e) (eof-object? . G4f9d) (eof-object . G4f9c) (current-error-port . G4f9b) (current-output-port . G4f9a) (current-input-port . G4f99) (output-port? . G4f98) (input-port? . G4f97) (utf-8-codec . G4f96) (utf-16-codec . G4f95) (transcoder-error-handling-mode . G4f94) (transcoder-eol-style . G4f93) (transcoder-codec . G4f92) (transcoded-port . G4f91) (textual-port? . G4f90) (string->bytevector . G4f8f) (standard-output-port . G4f8e) (standard-input-port . G4f8d) (standard-error-port . G4f8c) (set-port-position! . G4f8b) (put-u8 . G4f8a) (put-string . G4f89) (put-datum . G4f88) (put-char . G4f87) (put-bytevector . G4f86) (port? . G4f85) (port-transcoder . G4f84) (port-position . G4f83) (port-has-set-port-position!? . G4f82) (port-has-port-position? . G4f81) (port-eof? . G4f80) (output-port-buffer-mode . G4f7f) (open-string-output-port . G4f7e) (open-string-input-port . G4f7d) (open-file-output-port . G4f7c) (open-file-input/output-port . G4f7b) (open-file-input-port . G4f7a) (open-bytevector-output-port . G4f79) (open-bytevector-input-port . G4f78) (native-transcoder . G4f77) (native-eol-style . G4f76) (make-transcoder . G4f75) (latin-1-codec . G4f74) (make-i/o-write-error . G4bc7) (make-i/o-read-error . G4bb5) (make-i/o-port-error . G4c50) (make-i/o-invalid-position-error . G4bda) (make-i/o-filename-error . G4bf1) (make-i/o-file-protection-error . G4c07) (make-i/o-file-is-read-only-error . G4c19) (make-i/o-file-does-not-exist-error . G4c3d) (make-i/o-file-already-exists-error . G4c2b) (make-i/o-error . G4ba3) (make-i/o-encoding-error . G4c79) (make-i/o-decoding-error . G4c66) (make-custom-textual-output-port . G4f73) (make-custom-textual-input/output-port . G4f72) (make-custom-textual-input-port . G4f71) (make-custom-binary-output-port . G4f70) (make-custom-binary-input/output-port . G4f6f) (make-custom-binary-input-port . G4f6e) (make-bytevector . G4f6d) (lookahead-u8 . G4f6c) (lookahead-char . G4f6b) (i/o-write-error? . G4bc9) (i/o-read-error? . G4bb7) (i/o-port-error? . G4c54) (i/o-invalid-position-error? . G4bde) (i/o-filename-error? . G4bf5) (i/o-file-protection-error? . G4c09) (i/o-file-is-read-only-error? . G4c1b) (i/o-file-does-not-exist-error? . G4c3f) (i/o-file-already-exists-error? . G4c2d) (i/o-error? . G4ba5) (i/o-error-port . G4c56) (i/o-error-filename . G4bf7) (i/o-encoding-error? . G4c7d) (i/o-encoding-error-char . G4c7f) (i/o-decoding-error? . G4c68) (get-u8 . G4f6a) (get-string-n! . G4f69) (get-string-n . G4f68) (get-string-all . G4f67) (get-line . G4f66) (get-datum . G4f65) (get-char . G4f64) (get-bytevector-some . G4f63) (get-bytevector-n! . G4f62) (get-bytevector-n . G4f61) (get-bytevector-all . G4f60) (flush-output-port . G4f5f) (close-port . G4f5e) (scheme-report-environment . G3087) (quotient . G4f5d) (null-environment . G3085) (remainder . G4f5c) (modulo . G4f5b) (inexact->exact . G4f5a) (force . G4f59) (exact->inexact . G4f58) (exit . G4f57) (command-line . G4cd8) (string-fill! . G4f56) (string-set! . G4f55) (set-cdr! . G4f54) (set-car! . G4f53) (remove . G4f52) (remv . G4f51) (remp . G4f50) (remq . G4f4f) (partition . G4f4e) (memv . G4f4d) (memq . G4f4c) (memp . G4f4b) (member . G4f4a) (exists . G4f49) (for-all . G4f48) (fold-right . G4f47) (fold-left . G4f46) (find . G4f45) (filter . G4f44) (cons* . G4f43) (assv . G4f42) (assq . G4f41) (assp . G4f40) (assoc . G4f3f) (call-with-string-output-port . G4f3e) (call-with-port . G4f3d) (call-with-bytevector-output-port . G4f3c) (bytevector->string . G4f3b) (buffer-mode? . G4f3a) (binary-port? . G4f39) (with-exception-handler . G4f38) (raise-continuable . G4f37) (raise . G4f36) (eval . G308b) (environment . G3083) (make-enumeration . G4f35) (enum-set=? . G4f34) (enum-set-universe . G4f33) (enum-set-union . G4f32) (enum-set-subset? . G4f31) (enum-set-projection . G4f30) (enum-set-member? . G4f2f) (enum-set-intersection . G4f2e) (enum-set-indexer . G4f2d) (enum-set-difference . G4f2c) (enum-set-constructor . G4f2b) (enum-set-complement . G4f2a) (enum-set->list . G4f29) (who-condition? . G4a9d) (warning? . G4a29) (violation? . G4a5f) (undefined-violation? . G4b03) (syntax-violation? . G4aed) (syntax-violation-subform . G4af1) (syntax-violation-form . G4aef) (syntax-violation . G30ad) (simple-conditions . G4f28) (serious-condition? . G4a3b) (non-continuable-violation? . G4ab1) (message-condition? . G4a15) (make-who-condition . G4a99) (make-warning . G4a27) (make-violation . G4a5d) (make-undefined-violation . G4b01) (make-syntax-violation . G4ae7) (make-serious-condition . G4a39) (make-non-continuable-violation . G4aaf) (make-message-condition . G4a11) (make-lexical-violation . G4ad3) (make-irritants-condition . G4a82) (make-implementation-restriction-violation . G4ac1) (make-error . G4a4b) (make-assertion-violation . G4a6f) (lexical-violation? . G4ad5) (irritants-condition? . G4a86) (implementation-restriction-violation? . G4ac3) (error? . G4a4d) (condition-who . G4a9f) (condition-predicate . G4f27) (condition-message . G4a17) (condition-irritants . G4a88) (condition-accessor . G4f26) (condition . G4f25) (assertion-violation? . G4a71) (condition? . G4f24) (utf32->string . G4f23) (utf16->string . G4f22) (utf8->string . G4f21) (uint-list->bytevector . G4f20) (u8-list->bytevector . G4f1f) (string->utf8 . G4f1e) (string->utf32 . G4f1d) (string->utf16 . G4f1c) (sint-list->bytevector . G4f1b) (native-endianness . G4f1a) (bytevector? . G4f19) (bytevector=? . G4f18) (bytevector-uint-set! . G4f17) (bytevector-uint-ref . G4f16) (bytevector-u8-set! . G4f15) (bytevector-u8-ref . G4f14) (bytevector-u64-set! . G4f13) (bytevector-u64-ref . G4f12) (bytevector-u64-native-set! . G4f11) (bytevector-u64-native-ref . G4f10) (bytevector-u32-set! . G4f0f) (bytevector-u32-ref . G4f0e) (bytevector-u32-native-set! . G4f0d) (bytevector-u32-native-ref . G4f0c) (bytevector-u16-set! . G4f0b) (bytevector-u16-ref . G4f0a) (bytevector-u16-native-set! . G4f09) (bytevector-u16-native-ref . G4f08) (bytevector-sint-set! . G4f07) (bytevector-sint-ref . G4f06) (bytevector-s8-set! . G4f05) (bytevector-s8-ref . G4f04) (bytevector-s64-set! . G4f03) (bytevector-s64-ref . G4f02) (bytevector-s64-native-set! . G4f01) (bytevector-s64-native-ref . G4f00) (bytevector-s32-set! . G4eff) (bytevector-s32-ref . G4efe) (bytevector-s32-native-set! . G4efd) (bytevector-s32-native-ref . G4efc) (bytevector-s16-set! . G4efb) (bytevector-s16-ref . G4efa) (bytevector-s16-native-set! . G4ef9) (bytevector-s16-native-ref . G4ef8) (bytevector-length . G4ef7) (bytevector-ieee-single-ref . G4ef6) (bytevector-ieee-single-set! . G4ef5) (bytevector-ieee-single-native-set! . G4ef4) (bytevector-ieee-single-native-ref . G4ef3) (bytevector-ieee-double-set! . G4ef2) (bytevector-ieee-double-ref . G4ef1) (bytevector-ieee-double-native-set! . G4ef0) (bytevector-ieee-double-native-ref . G4eef) (bytevector-fill! . G4eee) (bytevector-copy! . G4eed) (bytevector-copy . G4eec) (bytevector->uint-list . G4eeb) (bytevector->u8-list . G4eea) (bytevector->sint-list . G4ee9) (no-nans-violation? . G4b27) (no-infinities-violation? . G4b15) (make-no-nans-violation . G4b25) (make-no-infinities-violation . G4b13) (real->flonum . G4ee8) (flzero? . G4ee7) (fltruncate . G4ee6) (fltan . G4ee5) (flsqrt . G4ee4) (flsin . G4ee3) (flround . G4ee2) (flpositive? . G4ee1) (flonum? . G4ee0) (flodd? . G4edf) (flnumerator . G4ede) (flnegative? . G4edd) (flnan? . G4edc) (flmod0 . G4edb) (flmod . G4eda) (flmin . G4ed9) (flmax . G4ed8) (fllog . G4ed7) (flinteger? . G4ed6) (flinfinite? . G4ed5) (flfloor . G4ed4) (flfinite? . G4ed3) (flexpt . G4ed2) (flexp . G4ed1) (fleven? . G4ed0) (fldiv0-and-mod0 . G4ecf) (fldiv0 . G4ece) (fldiv-and-mod . G4ecd) (fldiv . G4ecc) (fldenominator . G4ecb) (flcos . G4eca) (flceiling . G4ec9) (flatan . G4ec8) (flasin . G4ec7) (flacos . G4ec6) (flabs . G4ec5) (fl>? . G4ec4) (fl>=? . G4ec3) (fl=? . G4ec2) (fl<? . G4ec1) (fl<=? . G4ec0) (fl/ . G4ebf) (fl- . G4ebe) (fl+ . G4ebd) (fl* . G4ebc) (fixnum->flonum . G4ebb) (fxzero? . G4eba) (fxxor . G4eb9) (fxrotate-bit-field . G4eb8) (fxreverse-bit-field . G4eb7) (fxpositive? . G4eb6) (fxodd? . G4eb5) (fxnot . G4eb4) (fxnegative? . G4eb3) (fxmod0 . G4eb2) (fxmod . G4eb1) (fxmin . G4eb0) (fxmax . G4eaf) (fxlength . G4eae) (fxior . G4ead) (fxif . G4eac) (fxfirst-bit-set . G4eab) (fxeven? . G4eaa) (fxdiv0-and-mod0 . G4ea9) (fxdiv0 . G4ea8) (fxdiv-and-mod . G4ea7) (fxdiv . G4ea6) (fxcopy-bit-field . G4ea5) (fxcopy-bit . G4ea4) (fxbit-set? . G4ea3) (fxbit-field . G4ea2) (fxbit-count . G4ea1) (fxarithmetic-shift-right . G4ea0) (fxarithmetic-shift-left . G4e9f) (fxarithmetic-shift . G4e9e) (fxand . G4e9d) (fx>? . G4e9c) (fx>=? . G4e9b) (fx=? . G4e9a) (fx<? . G4e99) (fx<=? . G4e98) (fx-/carry . G4e97) (fx- . G4e96) (fx+/carry . G4e95) (fx+ . G4e94) (fx*/carry . G4e93) (fx* . G4e92) (greatest-fixnum . G4e91) (least-fixnum . G4e90) (fixnum-width . G4e8f) (fixnum? . G4e8e) (bitwise-rotate-bit-field . G4e8d) (bitwise-reverse-bit-field . G4e8c) (bitwise-length . G4e8b) (bitwise-if . G4e8a) (bitwise-first-bit-set . G4e89) (bitwise-copy-bit-field . G4e88) (bitwise-copy-bit . G4e87) (bitwise-bit-set? . G4e86) (bitwise-bit-field . G4e85) (bitwise-bit-count . G4e84) (bitwise-xor . G4e83) (bitwise-ior . G4e82) (bitwise-and . G4e81) (bitwise-not . G4e80) (bitwise-arithmetic-shift-right . G4e7f) (bitwise-arithmetic-shift-left . G4e7e) (bitwise-arithmetic-shift . G4e7d) (zero? . G4e7c) (vector? . G4e7b) (vector-set! . G4e7a) (vector-ref . G4e79) (vector-map . G4e78) (vector-length . G4e77) (vector-for-each . G4e76) (vector-fill! . G4e75) (vector->list . G4e74) (vector . G4e73) (values . G4e72) (truncate . G4e71) (tan . G4e70) (symbol? . G4e6f) (symbol=? . G4e6e) (symbol->string . G4e6d) (substring . G4e6c) (string? . G4e6b) (string>? . G4e6a) (string>=? . G4e69) (string=? . G4e68) (string<? . G4e67) (string<=? . G4e66) (string-ref . G4e65) (string-length . G4e64) (string-for-each . G4e63) (string-copy . G4e62) (string-append . G4e61) (string->symbol . G4e60) (string->number . G4e5f) (string->list . G4e5e) (string . G4e5d) (sqrt . G4e5c) (sin . G4e5b) (round . G4e5a) (reverse . G4e59) (real? . G4e58) (real-valued? . G4e57) (real-part . G4e56) (rationalize . G4e55) (rational? . G4e54) (rational-valued? . G4e53) (procedure? . G4e52) (positive? . G4e51) (pair? . G4e50) (odd? . G4e4f) (numerator . G4e4e) (number? . G4e4d) (number->string . G4e4c) (null? . G4e4b) (not . G4e4a) (negative? . G4e49) (nan? . G4e48) (min . G4e47) (max . G4e46) (map . G4e45) (make-vector . G4e44) (make-string . G4e43) (make-rectangular . G4e42) (make-polar . G4e41) (magnitude . G4e40) (log . G4e3f) (list? . G4e3e) (list-tail . G4e3d) (list-ref . G4e3c) (list->vector . G4e3b) (list->string . G4e3a) (list . G4e39) (length . G4e38) (lcm . G4e37) (integer? . G4e36) (integer-valued? . G4e35) (integer->char . G4e34) (infinite? . G4e33) (inexact? . G4e32) (inexact . G4e31) (imag-part . G4e30) (gcd . G4e2f) (for-each . G4e2e) (floor . G4e2d) (finite? . G4e2c) (expt . G4e2b) (exp . G4e2a) (exact? . G4e29) (exact-integer-sqrt . G4e28) (exact . G4e27) (even? . G4e26) (error . G4e25) (eqv? . G4e24) (equal? . G4e23) (eq? . G4e22) (dynamic-wind . G4e21) (div0-and-mod0 . G4e20) (mod0 . G4e1f) (div0 . G4e1e) (div-and-mod . G4e1d) (mod . G4e1c) (div . G4e1b) (denominator . G4e1a) (cos . G4e19) (cons . G4e18) (complex? . G4e17) (char? . G4e16) (char>? . G4e15) (char>=? . G4e14) (char=? . G4e13) (char<? . G4e12) (char<=? . G4e11) (char->integer . G4e10) (ceiling . G4e0f) (call-with-values . G4e0e) (call/cc . G4e0d) (call-with-current-continuation . G4e0c) (cddddr . G4e0b) (cdddar . G4e0a) (cddadr . G4e09) (cddaar . G4e08) (cdaddr . G4e07) (cdadar . G4e06) (cdaadr . G4e05) (cdaaar . G4e04) (cadddr . G4e03) (caddar . G4e02) (cadadr . G4e01) (cadaar . G4e00) (caaddr . G4dff) (caadar . G4dfe) (caaadr . G4dfd) (caaaar . G4dfc) (cdddr . G4dfb) (cddar . G4dfa) (cdadr . G4df9) (cdaar . G4df8) (caddr . G4df7) (cadar . G4df6) (caadr . G4df5) (caaar . G4df4) (cddr . G4df3) (cdar . G4df2) (cadr . G4df1) (caar . G4df0) (cdr . G4def) (car . G4dee) (boolean? . G4ded) (boolean=? . G4dec) (atan . G4deb) (assertion-violation . G4dea) (asin . G4de9) (apply . G4de8) (append . G4de7) (angle . G4de6) (acos . G4de5) (abs . G4de4) (/ . G4de3) (* . G4de2) (- . G4de1) (+ . G4de0) (>= . G4ddf) (> . G4dde) (= . G4ddd) (<= . G4ddc) (< . G4ddb) (library . G4dda) (export . G4dd9) (&no-nans . G4dd8) (&no-infinities . G4dd7) (&i/o-encoding . G4dd6) (&i/o-decoding . G4dd5) (&i/o-port . G4dd4) (&i/o-file-does-not-exist . G4dd3) (&i/o-file-already-exists . G4dd2) (&i/o-file-is-read-only . G4dd1) (&i/o-file-protection . G4dd0) (&i/o-filename . G4dcf) (&i/o-invalid-position . G4dce) (&i/o-write . G4dcd) (&i/o-read . G4dcc) (&i/o . G4dcb) (&undefined . G4dca) (&syntax . G4dc9) (&lexical . G4dc8) (&implementation-restriction . G4dc7) (&non-continuable . G4dc6) (&who . G4dc5) (&irritants . G4dc4) (&assertion . G4dc3) (&violation . G4dc2) (&error . G4dc1) (&serious . G4dc0) (&warning . G4dbf) (&message . G4dbe) (&condition . G4dbd) (define-condition-type . G4dbc) (define-enumeration . G4dbb) (define-record-type . G4dba) (parent-rtd . G4db9) (nongenerative . G4db8) (opaque . G4db7) (sealed . G4db6) (protocol . G4db5) (parent . G4db4) (immutable . G4db3) (mutable . G4db2) (fields . G4db1) (error-handling-mode . G4db0) (file-options . G4daf) (buffer-mode . G4dae) (eol-style . G4dad) (guard . G4dac) (trace-define . G4dab) (trace-lambda . G4daa) (unsyntax-splicing . G4da9) (unsyntax . G4da8) (unquote-splicing . G4da7) (unquote . G4da6) (_ . G4da5) (else . G4da4) (=> . G4da3) (... . G4da2) (assert . G4da1) (endianness . G4da0) (delay . G4d9f) (time . G4d9e) (or . G4d9d) (and . G4d9c) (do . G4d9b) (cond . G4d9a) (let* . G4d99) (let . G4d98) (let*-values . G4d97) (let-values . G4d96) (identifier-syntax . G4d95) (with-syntax . G4d94) (quasisyntax . G4d93) (quasiquote . G4d92) (syntax-rules . G4d91) (include . G4d90) (define-struct . G4d8f) (record-constructor-descriptor . G4d8e) (record-type-descriptor . G4d8d) (case . G4d8c) (parameterize . G4d8b) (unless . G4d8a) (when . G4d89) (if . G4d88) (letrec* . G4d87) (letrec . G4d86) (type-descriptor . G4d85) (case-lambda . G4d84) (lambda . G4d83) (syntax . G4d82) (syntax-case . G4d81) (quote . G4d80) (foreign-call . G4d7f) (letrec-syntax . G4d7e) (let-syntax . G4d7d) (set! . G4d7c) (import . G4d7b) (begin . G4d7a) (module . G4d79) (define-syntax . G4d78) (define . G4d77)) '((G5079 core-prim . &no-nans-rcd) (G5078 core-prim . &no-nans-rtd) (G5077 core-prim . &no-infinities-rcd) (G5076 core-prim . &no-infinities-rtd) (G5075 core-prim . &i/o-encoding-rcd) (G5074 core-prim . &i/o-encoding-rtd) (G5073 core-prim . &i/o-decoding-rcd) (G5072 core-prim . &i/o-decoding-rtd) (G5071 core-prim . &i/o-port-rcd) (G5070 core-prim . &i/o-port-rtd) (G506f core-prim . &i/o-file-does-not-exist-rcd) (G506e core-prim . &i/o-file-does-not-exist-rtd) (G506d core-prim . &i/o-file-already-exists-rcd) (G506c core-prim . &i/o-file-already-exists-rtd) (G506b core-prim . &i/o-file-is-read-only-rcd) (G506a core-prim . &i/o-file-is-read-only-rtd) (G5069 core-prim . &i/o-file-protection-rcd) (G5068 core-prim . &i/o-file-protection-rtd) (G5067 core-prim . &i/o-filename-rcd) (G5066 core-prim . &i/o-filename-rtd) (G5065 core-prim . &i/o-invalid-position-rcd) (G5064 core-prim . &i/o-invalid-position-rtd) (G5063 core-prim . &i/o-write-rcd) (G5062 core-prim . &i/o-write-rtd) (G5061 core-prim . &i/o-read-rcd) (G5060 core-prim . &i/o-read-rtd) (G505f core-prim . &i/o-rcd) (G505e core-prim . &i/o-rtd) (G505d core-prim . &undefined-rcd) (G505c core-prim . &undefined-rtd) (G505b core-prim . &syntax-rcd) (G505a core-prim . &syntax-rtd) (G5059 core-prim . &lexical-rcd) (G5058 core-prim . &lexical-rtd) (G5057 core-prim . &implementation-restriction-rcd) (G5056 core-prim . &implementation-restriction-rtd) (G5055 core-prim . &non-continuable-rcd) (G5054 core-prim . &non-continuable-rtd) (G5053 core-prim . &who-rcd) (G5052 core-prim . &who-rtd) (G5051 core-prim . &irritants-rcd) (G5050 core-prim . &irritants-rtd) (G504f core-prim . &assertion-rcd) (G504e core-prim . &assertion-rtd) (G504d core-prim . &violation-rcd) (G504c core-prim . &violation-rtd) (G504b core-prim . &error-rcd) (G504a core-prim . &error-rtd) (G5049 core-prim . &serious-rcd) (G5048 core-prim . &serious-rtd) (G5047 core-prim . &warning-rcd) (G5046 core-prim . &warning-rtd) (G5045 core-prim . &message-rcd) (G5044 core-prim . &message-rtd) (G5043 core-prim . &condition-rcd) (G5042 core-prim . &condition-rtd) (G30a7 core-prim . syntax-error) (G2fc0 core-prim . syntax-dispatch) (G5041 core-prim . pretty-print) (G5040 core-prim . eval-core) (G503f core-prim . set-symbol-value!) (G503e core-prim . symbol-value) (G503d core-prim . gensym) (G503c core-prim . void) (G4cde core-prim . load) (G30b9 core-prim . interaction-environment) (G503b core-prim . char-ready?) (G503a core-prim . regexp?) (G5039 core-prim . read-line) (G5038 core-prim . dotted-list?) (G5037 core-prim . circular-list?) (G5036 core-prim . proper-list?) (G5035 core-prim . circular-list) (G5034 core-prim . last) (G5033 core-prim . last-pair) (G5032 core-prim . not-pair?) (G5031 core-prim . split-at!) (G5030 core-prim . split-at) (G502f core-prim . list=) (G502e core-prim . list-copy) (G502d core-prim . list-tabulate) (G502c core-prim . make-list) (G502b core-prim . xcons) (G502a core-prim . tenth) (G5029 core-prim . ninth) (G5028 core-prim . eighth) (G5027 core-prim . seventh) (G5026 core-prim . sixth) (G5025 core-prim . fifth) (G5024 core-prim . drop-right!) (G5023 core-prim . drop-right) (G5022 core-prim . take-right) (G5021 core-prim . take!) (G5020 core-prim . drop) (G501f core-prim . take) (G501e core-prim . car+cdr) (G501d core-prim . third) (G501c core-prim . second) (G501b core-prim . first) (G501a core-prim . iota) (G5019 core-prim . every) (G5018 core-prim . assoc-ref) (G5017 core-prim . alist-cons) (G5016 core-prim . append-map) (G5015 core-prim . print) (G5014 core-prim . format) (G5013 core-prim . standard-library-path) (G5012 core-prim . file-newer?) (G5011 core-prim . stat-mtime) (G5010 core-prim . current-directory) (G500f core-prim . write-to-file) (G500e core-prim . file->list) (G500d core-prim . file->string) (G500c core-prim . digit->integer) (G500b core-prim . call-with-string-input-port) (G500a core-prim . call-with-string-io) (G5009 core-prim . string-split) (G5008 core-prim . bytevector-for-each) (G5007 core-prim . string->regexp) (G5006 core-prim . rxmatch) (G5005 core-prim . regexp-replace-all) (G5004 core-prim . hashtable-for-each) (G5003 core-prim . readdir) (G5002 core-prim . get-environment-variables) (G5001 core-prim . get-environment-variable) (G5000 core-prim . get-timeofday) (G4fff core-prim . get-command-line) (G4ffe core-prim . sys-display) (G4ffd core-prim . source-info) (G4ffc core-prim . make-compiler-instruction) (G4ffb core-prim . make-instruction) (G4ffa core-prim . set-source-info!) (G4ff9 core-prim . bignum?) (G4ff8 core-prim . make-complex) (G4ff7 core-prim . fasl-read) (G4ff6 core-prim . fasl-write) (G4ff5 core-prim . receive) (G289e core-prim . make-parameter) (G4ff4 core-prim . string-upcase) (G4ff3 core-prim . string-titlecase) (G4ff2 core-prim . string-normalize-nfkd) (G4ff1 core-prim . string-normalize-nfkc) (G4ff0 core-prim . string-normalize-nfd) (G4fef core-prim . string-normalize-nfc) (G4fee core-prim . string-foldcase) (G4fed core-prim . string-downcase) (G4fec core-prim . string-ci>?) (G4feb core-prim . string-ci>=?) (G4fea core-prim . string-ci=?) (G4fe9 core-prim . string-ci<?) (G4fe8 core-prim . string-ci<=?) (G4fe7 core-prim . char-whitespace?) (G4fe6 core-prim . char-upper-case?) (G4fe5 core-prim . char-title-case?) (G4fe4 core-prim . char-numeric?) (G4fe3 core-prim . char-lower-case?) (G4fe2 core-prim . char-general-category) (G4fe1 core-prim . char-upcase) (G4fe0 core-prim . char-titlecase) (G4fdf core-prim . char-foldcase) (G4fde core-prim . char-downcase) (G4fdd core-prim . char-ci>?) (G4fdc core-prim . char-ci>=?) (G4fdb core-prim . char-ci=?) (G4fda core-prim . char-ci<?) (G4fd9 core-prim . char-ci<=?) (G4fd8 core-prim . char-alphabetic?) (G2dfd core-prim . make-variable-transformer) (G30af core-prim . identifier?) (G3099 core-prim . generate-temporaries) (G309b core-prim . free-identifier=?) (G30b3 core-prim . syntax->datum) (G30b1 core-prim . datum->syntax) (G309d core-prim . bound-identifier=?) (G4fd7 core-prim . record-type-descriptor?) (G4fd6 core-prim . record-predicate) (G4fd5 core-prim . record-mutator) (G4fd4 core-prim . record-constructor) (G4fd3 core-prim . record-accessor) (G4fd2 core-prim . make-record-type-descriptor) (G4fd1 core-prim . make-record-constructor-descriptor) (G4fd0 core-prim . record?) (G4fcf core-prim . record-type-uid) (G4fce core-prim . record-type-sealed?) (G4fcd core-prim . record-type-parent) (G4fcc core-prim . record-type-opaque?) (G4fcb core-prim . record-type-name) (G4fca core-prim . record-type-generative?) (G4fc9 core-prim . record-type-field-names) (G4fc8 core-prim . record-rtd) (G4fc7 core-prim . record-field-mutable?) (G4fc6 core-prim . delete-file) (G4fc5 core-prim . file-exists?) (G4fc4 core-prim . vector-sort!) (G4fc3 core-prim . vector-sort) (G4fc2 core-prim . list-sort) (G4fc1 core-prim . symbol-hash) (G4fc0 core-prim . string-ci-hash) (G4fbf core-prim . string-hash) (G4fbe core-prim . equal-hash) (G4fbd core-prim . hashtable-equivalence-function) (G4fbc core-prim . make-hashtable) (G4fbb core-prim . hashtable-hash-function) (G4fba core-prim . make-eqv-hashtable) (G4fb9 core-prim . make-eq-hashtable) (G4fb8 core-prim . hashtable?) (G4fb7 core-prim . hashtable-update!) (G4fb6 core-prim . hashtable-size) (G4fb5 core-prim . hashtable-set!) (G4fb4 core-prim . hashtable-ref) (G4fb3 core-prim . hashtable-mutable?) (G4fb2 core-prim . hashtable-keys) (G4fb1 core-prim . hashtable-entries) (G4fb0 core-prim . hashtable-delete!) (G4faf core-prim . hashtable-copy) (G4fae core-prim . hashtable-contains?) (G4fad core-prim . hashtable-clear!) (G4fac core-prim . call-with-output-file) (G4fab core-prim . call-with-input-file) (G4faa core-prim . write-char) (G4fa9 core-prim . write) (G4fa8 core-prim . with-output-to-file) (G4fa7 core-prim . with-input-from-file) (G4fa6 core-prim . read-char) (G4fa5 core-prim . read) (G4fa4 core-prim . peek-char) (G4fa3 core-prim . open-output-file) (G4fa2 core-prim . open-input-file) (G4fa1 core-prim . newline) (G4fa0 core-prim . display) (G4f9f core-prim . close-output-port) (G4f9e core-prim . close-input-port) (G4f9d core-prim . eof-object?) (G4f9c core-prim . eof-object) (G4f9b core-prim . current-error-port) (G4f9a core-prim . current-output-port) (G4f99 core-prim . current-input-port) (G4f98 core-prim . output-port?) (G4f97 core-prim . input-port?) (G4f96 core-prim . utf-8-codec) (G4f95 core-prim . utf-16-codec) (G4f94 core-prim . transcoder-error-handling-mode) (G4f93 core-prim . transcoder-eol-style) (G4f92 core-prim . transcoder-codec) (G4f91 core-prim . transcoded-port) (G4f90 core-prim . textual-port?) (G4f8f core-prim . string->bytevector) (G4f8e core-prim . standard-output-port) (G4f8d core-prim . standard-input-port) (G4f8c core-prim . standard-error-port) (G4f8b core-prim . set-port-position!) (G4f8a core-prim . put-u8) (G4f89 core-prim . put-string) (G4f88 core-prim . put-datum) (G4f87 core-prim . put-char) (G4f86 core-prim . put-bytevector) (G4f85 core-prim . port?) (G4f84 core-prim . port-transcoder) (G4f83 core-prim . port-position) (G4f82 core-prim . port-has-set-port-position!?) (G4f81 core-prim . port-has-port-position?) (G4f80 core-prim . port-eof?) (G4f7f core-prim . output-port-buffer-mode) (G4f7e core-prim . open-string-output-port) (G4f7d core-prim . open-string-input-port) (G4f7c core-prim . open-file-output-port) (G4f7b core-prim . open-file-input/output-port) (G4f7a core-prim . open-file-input-port) (G4f79 core-prim . open-bytevector-output-port) (G4f78 core-prim . open-bytevector-input-port) (G4f77 core-prim . native-transcoder) (G4f76 core-prim . native-eol-style) (G4f75 core-prim . make-transcoder) (G4f74 core-prim . latin-1-codec) (G4bc7 core-prim . make-i/o-write-error) (G4bb5 core-prim . make-i/o-read-error) (G4c50 core-prim . make-i/o-port-error) (G4bda core-prim . make-i/o-invalid-position-error) (G4bf1 core-prim . make-i/o-filename-error) (G4c07 core-prim . make-i/o-file-protection-error) (G4c19 core-prim . make-i/o-file-is-read-only-error) (G4c3d core-prim . make-i/o-file-does-not-exist-error) (G4c2b core-prim . make-i/o-file-already-exists-error) (G4ba3 core-prim . make-i/o-error) (G4c79 core-prim . make-i/o-encoding-error) (G4c66 core-prim . make-i/o-decoding-error) (G4f73 core-prim . make-custom-textual-output-port) (G4f72 core-prim . make-custom-textual-input/output-port) (G4f71 core-prim . make-custom-textual-input-port) (G4f70 core-prim . make-custom-binary-output-port) (G4f6f core-prim . make-custom-binary-input/output-port) (G4f6e core-prim . make-custom-binary-input-port) (G4f6d core-prim . make-bytevector) (G4f6c core-prim . lookahead-u8) (G4f6b core-prim . lookahead-char) (G4bc9 core-prim . i/o-write-error?) (G4bb7 core-prim . i/o-read-error?) (G4c54 core-prim . i/o-port-error?) (G4bde core-prim . i/o-invalid-position-error?) (G4bf5 core-prim . i/o-filename-error?) (G4c09 core-prim . i/o-file-protection-error?) (G4c1b core-prim . i/o-file-is-read-only-error?) (G4c3f core-prim . i/o-file-does-not-exist-error?) (G4c2d core-prim . i/o-file-already-exists-error?) (G4ba5 core-prim . i/o-error?) (G4c56 core-prim . i/o-error-port) (G4bf7 core-prim . i/o-error-filename) (G4c7d core-prim . i/o-encoding-error?) (G4c7f core-prim . i/o-encoding-error-char) (G4c68 core-prim . i/o-decoding-error?) (G4f6a core-prim . get-u8) (G4f69 core-prim . get-string-n!) (G4f68 core-prim . get-string-n) (G4f67 core-prim . get-string-all) (G4f66 core-prim . get-line) (G4f65 core-prim . get-datum) (G4f64 core-prim . get-char) (G4f63 core-prim . get-bytevector-some) (G4f62 core-prim . get-bytevector-n!) (G4f61 core-prim . get-bytevector-n) (G4f60 core-prim . get-bytevector-all) (G4f5f core-prim . flush-output-port) (G4f5e core-prim . close-port) (G3087 core-prim . scheme-report-environment) (G4f5d core-prim . quotient) (G3085 core-prim . null-environment) (G4f5c core-prim . remainder) (G4f5b core-prim . modulo) (G4f5a core-prim . inexact->exact) (G4f59 core-prim . force) (G4f58 core-prim . exact->inexact) (G4f57 core-prim . exit) (G4cd8 core-prim . command-line) (G4f56 core-prim . string-fill!) (G4f55 core-prim . string-set!) (G4f54 core-prim . set-cdr!) (G4f53 core-prim . set-car!) (G4f52 core-prim . remove) (G4f51 core-prim . remv) (G4f50 core-prim . remp) (G4f4f core-prim . remq) (G4f4e core-prim . partition) (G4f4d core-prim . memv) (G4f4c core-prim . memq) (G4f4b core-prim . memp) (G4f4a core-prim . member) (G4f49 core-prim . exists) (G4f48 core-prim . for-all) (G4f47 core-prim . fold-right) (G4f46 core-prim . fold-left) (G4f45 core-prim . find) (G4f44 core-prim . filter) (G4f43 core-prim . cons*) (G4f42 core-prim . assv) (G4f41 core-prim . assq) (G4f40 core-prim . assp) (G4f3f core-prim . assoc) (G4f3e core-prim . call-with-string-output-port) (G4f3d core-prim . call-with-port) (G4f3c core-prim . call-with-bytevector-output-port) (G4f3b core-prim . bytevector->string) (G4f3a core-prim . buffer-mode?) (G4f39 core-prim . binary-port?) (G4f38 core-prim . with-exception-handler) (G4f37 core-prim . raise-continuable) (G4f36 core-prim . raise) (G308b core-prim . eval) (G3083 core-prim . environment) (G4f35 core-prim . make-enumeration) (G4f34 core-prim . enum-set=?) (G4f33 core-prim . enum-set-universe) (G4f32 core-prim . enum-set-union) (G4f31 core-prim . enum-set-subset?) (G4f30 core-prim . enum-set-projection) (G4f2f core-prim . enum-set-member?) (G4f2e core-prim . enum-set-intersection) (G4f2d core-prim . enum-set-indexer) (G4f2c core-prim . enum-set-difference) (G4f2b core-prim . enum-set-constructor) (G4f2a core-prim . enum-set-complement) (G4f29 core-prim . enum-set->list) (G4a9d core-prim . who-condition?) (G4a29 core-prim . warning?) (G4a5f core-prim . violation?) (G4b03 core-prim . undefined-violation?) (G4aed core-prim . syntax-violation?) (G4af1 core-prim . syntax-violation-subform) (G4aef core-prim . syntax-violation-form) (G30ad core-prim . syntax-violation) (G4f28 core-prim . simple-conditions) (G4a3b core-prim . serious-condition?) (G4ab1 core-prim . non-continuable-violation?) (G4a15 core-prim . message-condition?) (G4a99 core-prim . make-who-condition) (G4a27 core-prim . make-warning) (G4a5d core-prim . make-violation) (G4b01 core-prim . make-undefined-violation) (G4ae7 core-prim . make-syntax-violation) (G4a39 core-prim . make-serious-condition) (G4aaf core-prim . make-non-continuable-violation) (G4a11 core-prim . make-message-condition) (G4ad3 core-prim . make-lexical-violation) (G4a82 core-prim . make-irritants-condition) (G4ac1 core-prim . make-implementation-restriction-violation) (G4a4b core-prim . make-error) (G4a6f core-prim . make-assertion-violation) (G4ad5 core-prim . lexical-violation?) (G4a86 core-prim . irritants-condition?) (G4ac3 core-prim . implementation-restriction-violation?) (G4a4d core-prim . error?) (G4a9f core-prim . condition-who) (G4f27 core-prim . condition-predicate) (G4a17 core-prim . condition-message) (G4a88 core-prim . condition-irritants) (G4f26 core-prim . condition-accessor) (G4f25 core-prim . condition) (G4a71 core-prim . assertion-violation?) (G4f24 core-prim . condition?) (G4f23 core-prim . utf32->string) (G4f22 core-prim . utf16->string) (G4f21 core-prim . utf8->string) (G4f20 core-prim . uint-list->bytevector) (G4f1f core-prim . u8-list->bytevector) (G4f1e core-prim . string->utf8) (G4f1d core-prim . string->utf32) (G4f1c core-prim . string->utf16) (G4f1b core-prim . sint-list->bytevector) (G4f1a core-prim . native-endianness) (G4f19 core-prim . bytevector?) (G4f18 core-prim . bytevector=?) (G4f17 core-prim . bytevector-uint-set!) (G4f16 core-prim . bytevector-uint-ref) (G4f15 core-prim . bytevector-u8-set!) (G4f14 core-prim . bytevector-u8-ref) (G4f13 core-prim . bytevector-u64-set!) (G4f12 core-prim . bytevector-u64-ref) (G4f11 core-prim . bytevector-u64-native-set!) (G4f10 core-prim . bytevector-u64-native-ref) (G4f0f core-prim . bytevector-u32-set!) (G4f0e core-prim . bytevector-u32-ref) (G4f0d core-prim . bytevector-u32-native-set!) (G4f0c core-prim . bytevector-u32-native-ref) (G4f0b core-prim . bytevector-u16-set!) (G4f0a core-prim . bytevector-u16-ref) (G4f09 core-prim . bytevector-u16-native-set!) (G4f08 core-prim . bytevector-u16-native-ref) (G4f07 core-prim . bytevector-sint-set!) (G4f06 core-prim . bytevector-sint-ref) (G4f05 core-prim . bytevector-s8-set!) (G4f04 core-prim . bytevector-s8-ref) (G4f03 core-prim . bytevector-s64-set!) (G4f02 core-prim . bytevector-s64-ref) (G4f01 core-prim . bytevector-s64-native-set!) (G4f00 core-prim . bytevector-s64-native-ref) (G4eff core-prim . bytevector-s32-set!) (G4efe core-prim . bytevector-s32-ref) (G4efd core-prim . bytevector-s32-native-set!) (G4efc core-prim . bytevector-s32-native-ref) (G4efb core-prim . bytevector-s16-set!) (G4efa core-prim . bytevector-s16-ref) (G4ef9 core-prim . bytevector-s16-native-set!) (G4ef8 core-prim . bytevector-s16-native-ref) (G4ef7 core-prim . bytevector-length) (G4ef6 core-prim . bytevector-ieee-single-ref) (G4ef5 core-prim . bytevector-ieee-single-set!) (G4ef4 core-prim . bytevector-ieee-single-native-set!) (G4ef3 core-prim . bytevector-ieee-single-native-ref) (G4ef2 core-prim . bytevector-ieee-double-set!) (G4ef1 core-prim . bytevector-ieee-double-ref) (G4ef0 core-prim . bytevector-ieee-double-native-set!) (G4eef core-prim . bytevector-ieee-double-native-ref) (G4eee core-prim . bytevector-fill!) (G4eed core-prim . bytevector-copy!) (G4eec core-prim . bytevector-copy) (G4eeb core-prim . bytevector->uint-list) (G4eea core-prim . bytevector->u8-list) (G4ee9 core-prim . bytevector->sint-list) (G4b27 core-prim . no-nans-violation?) (G4b15 core-prim . no-infinities-violation?) (G4b25 core-prim . make-no-nans-violation) (G4b13 core-prim . make-no-infinities-violation) (G4ee8 core-prim . real->flonum) (G4ee7 core-prim . flzero?) (G4ee6 core-prim . fltruncate) (G4ee5 core-prim . fltan) (G4ee4 core-prim . flsqrt) (G4ee3 core-prim . flsin) (G4ee2 core-prim . flround) (G4ee1 core-prim . flpositive?) (G4ee0 core-prim . flonum?) (G4edf core-prim . flodd?) (G4ede core-prim . flnumerator) (G4edd core-prim . flnegative?) (G4edc core-prim . flnan?) (G4edb core-prim . flmod0) (G4eda core-prim . flmod) (G4ed9 core-prim . flmin) (G4ed8 core-prim . flmax) (G4ed7 core-prim . fllog) (G4ed6 core-prim . flinteger?) (G4ed5 core-prim . flinfinite?) (G4ed4 core-prim . flfloor) (G4ed3 core-prim . flfinite?) (G4ed2 core-prim . flexpt) (G4ed1 core-prim . flexp) (G4ed0 core-prim . fleven?) (G4ecf core-prim . fldiv0-and-mod0) (G4ece core-prim . fldiv0) (G4ecd core-prim . fldiv-and-mod) (G4ecc core-prim . fldiv) (G4ecb core-prim . fldenominator) (G4eca core-prim . flcos) (G4ec9 core-prim . flceiling) (G4ec8 core-prim . flatan) (G4ec7 core-prim . flasin) (G4ec6 core-prim . flacos) (G4ec5 core-prim . flabs) (G4ec4 core-prim . fl>?) (G4ec3 core-prim . fl>=?) (G4ec2 core-prim . fl=?) (G4ec1 core-prim . fl<?) (G4ec0 core-prim . fl<=?) (G4ebf core-prim . fl/) (G4ebe core-prim . fl-) (G4ebd core-prim . fl+) (G4ebc core-prim . fl*) (G4ebb core-prim . fixnum->flonum) (G4eba core-prim . fxzero?) (G4eb9 core-prim . fxxor) (G4eb8 core-prim . fxrotate-bit-field) (G4eb7 core-prim . fxreverse-bit-field) (G4eb6 core-prim . fxpositive?) (G4eb5 core-prim . fxodd?) (G4eb4 core-prim . fxnot) (G4eb3 core-prim . fxnegative?) (G4eb2 core-prim . fxmod0) (G4eb1 core-prim . fxmod) (G4eb0 core-prim . fxmin) (G4eaf core-prim . fxmax) (G4eae core-prim . fxlength) (G4ead core-prim . fxior) (G4eac core-prim . fxif) (G4eab core-prim . fxfirst-bit-set) (G4eaa core-prim . fxeven?) (G4ea9 core-prim . fxdiv0-and-mod0) (G4ea8 core-prim . fxdiv0) (G4ea7 core-prim . fxdiv-and-mod) (G4ea6 core-prim . fxdiv) (G4ea5 core-prim . fxcopy-bit-field) (G4ea4 core-prim . fxcopy-bit) (G4ea3 core-prim . fxbit-set?) (G4ea2 core-prim . fxbit-field) (G4ea1 core-prim . fxbit-count) (G4ea0 core-prim . fxarithmetic-shift-right) (G4e9f core-prim . fxarithmetic-shift-left) (G4e9e core-prim . fxarithmetic-shift) (G4e9d core-prim . fxand) (G4e9c core-prim . fx>?) (G4e9b core-prim . fx>=?) (G4e9a core-prim . fx=?) (G4e99 core-prim . fx<?) (G4e98 core-prim . fx<=?) (G4e97 core-prim . fx-/carry) (G4e96 core-prim . fx-) (G4e95 core-prim . fx+/carry) (G4e94 core-prim . fx+) (G4e93 core-prim . fx*/carry) (G4e92 core-prim . fx*) (G4e91 core-prim . greatest-fixnum) (G4e90 core-prim . least-fixnum) (G4e8f core-prim . fixnum-width) (G4e8e core-prim . fixnum?) (G4e8d core-prim . bitwise-rotate-bit-field) (G4e8c core-prim . bitwise-reverse-bit-field) (G4e8b core-prim . bitwise-length) (G4e8a core-prim . bitwise-if) (G4e89 core-prim . bitwise-first-bit-set) (G4e88 core-prim . bitwise-copy-bit-field) (G4e87 core-prim . bitwise-copy-bit) (G4e86 core-prim . bitwise-bit-set?) (G4e85 core-prim . bitwise-bit-field) (G4e84 core-prim . bitwise-bit-count) (G4e83 core-prim . bitwise-xor) (G4e82 core-prim . bitwise-ior) (G4e81 core-prim . bitwise-and) (G4e80 core-prim . bitwise-not) (G4e7f core-prim . bitwise-arithmetic-shift-right) (G4e7e core-prim . bitwise-arithmetic-shift-left) (G4e7d core-prim . bitwise-arithmetic-shift) (G4e7c core-prim . zero?) (G4e7b core-prim . vector?) (G4e7a core-prim . vector-set!) (G4e79 core-prim . vector-ref) (G4e78 core-prim . vector-map) (G4e77 core-prim . vector-length) (G4e76 core-prim . vector-for-each) (G4e75 core-prim . vector-fill!) (G4e74 core-prim . vector->list) (G4e73 core-prim . vector) (G4e72 core-prim . values) (G4e71 core-prim . truncate) (G4e70 core-prim . tan) (G4e6f core-prim . symbol?) (G4e6e core-prim . symbol=?) (G4e6d core-prim . symbol->string) (G4e6c core-prim . substring) (G4e6b core-prim . string?) (G4e6a core-prim . string>?) (G4e69 core-prim . string>=?) (G4e68 core-prim . string=?) (G4e67 core-prim . string<?) (G4e66 core-prim . string<=?) (G4e65 core-prim . string-ref) (G4e64 core-prim . string-length) (G4e63 core-prim . string-for-each) (G4e62 core-prim . string-copy) (G4e61 core-prim . string-append) (G4e60 core-prim . string->symbol) (G4e5f core-prim . string->number) (G4e5e core-prim . string->list) (G4e5d core-prim . string) (G4e5c core-prim . sqrt) (G4e5b core-prim . sin) (G4e5a core-prim . round) (G4e59 core-prim . reverse) (G4e58 core-prim . real?) (G4e57 core-prim . real-valued?) (G4e56 core-prim . real-part) (G4e55 core-prim . rationalize) (G4e54 core-prim . rational?) (G4e53 core-prim . rational-valued?) (G4e52 core-prim . procedure?) (G4e51 core-prim . positive?) (G4e50 core-prim . pair?) (G4e4f core-prim . odd?) (G4e4e core-prim . numerator) (G4e4d core-prim . number?) (G4e4c core-prim . number->string) (G4e4b core-prim . null?) (G4e4a core-prim . not) (G4e49 core-prim . negative?) (G4e48 core-prim . nan?) (G4e47 core-prim . min) (G4e46 core-prim . max) (G4e45 core-prim . map) (G4e44 core-prim . make-vector) (G4e43 core-prim . make-string) (G4e42 core-prim . make-rectangular) (G4e41 core-prim . make-polar) (G4e40 core-prim . magnitude) (G4e3f core-prim . log) (G4e3e core-prim . list?) (G4e3d core-prim . list-tail) (G4e3c core-prim . list-ref) (G4e3b core-prim . list->vector) (G4e3a core-prim . list->string) (G4e39 core-prim . list) (G4e38 core-prim . length) (G4e37 core-prim . lcm) (G4e36 core-prim . integer?) (G4e35 core-prim . integer-valued?) (G4e34 core-prim . integer->char) (G4e33 core-prim . infinite?) (G4e32 core-prim . inexact?) (G4e31 core-prim . inexact) (G4e30 core-prim . imag-part) (G4e2f core-prim . gcd) (G4e2e core-prim . for-each) (G4e2d core-prim . floor) (G4e2c core-prim . finite?) (G4e2b core-prim . expt) (G4e2a core-prim . exp) (G4e29 core-prim . exact?) (G4e28 core-prim . exact-integer-sqrt) (G4e27 core-prim . exact) (G4e26 core-prim . even?) (G4e25 core-prim . error) (G4e24 core-prim . eqv?) (G4e23 core-prim . equal?) (G4e22 core-prim . eq?) (G4e21 core-prim . dynamic-wind) (G4e20 core-prim . div0-and-mod0) (G4e1f core-prim . mod0) (G4e1e core-prim . div0) (G4e1d core-prim . div-and-mod) (G4e1c core-prim . mod) (G4e1b core-prim . div) (G4e1a core-prim . denominator) (G4e19 core-prim . cos) (G4e18 core-prim . cons) (G4e17 core-prim . complex?) (G4e16 core-prim . char?) (G4e15 core-prim . char>?) (G4e14 core-prim . char>=?) (G4e13 core-prim . char=?) (G4e12 core-prim . char<?) (G4e11 core-prim . char<=?) (G4e10 core-prim . char->integer) (G4e0f core-prim . ceiling) (G4e0e core-prim . call-with-values) (G4e0d core-prim . call/cc) (G4e0c core-prim . call-with-current-continuation) (G4e0b core-prim . cddddr) (G4e0a core-prim . cdddar) (G4e09 core-prim . cddadr) (G4e08 core-prim . cddaar) (G4e07 core-prim . cdaddr) (G4e06 core-prim . cdadar) (G4e05 core-prim . cdaadr) (G4e04 core-prim . cdaaar) (G4e03 core-prim . cadddr) (G4e02 core-prim . caddar) (G4e01 core-prim . cadadr) (G4e00 core-prim . cadaar) (G4dff core-prim . caaddr) (G4dfe core-prim . caadar) (G4dfd core-prim . caaadr) (G4dfc core-prim . caaaar) (G4dfb core-prim . cdddr) (G4dfa core-prim . cddar) (G4df9 core-prim . cdadr) (G4df8 core-prim . cdaar) (G4df7 core-prim . caddr) (G4df6 core-prim . cadar) (G4df5 core-prim . caadr) (G4df4 core-prim . caaar) (G4df3 core-prim . cddr) (G4df2 core-prim . cdar) (G4df1 core-prim . cadr) (G4df0 core-prim . caar) (G4def core-prim . cdr) (G4dee core-prim . car) (G4ded core-prim . boolean?) (G4dec core-prim . boolean=?) (G4deb core-prim . atan) (G4dea core-prim . assertion-violation) (G4de9 core-prim . asin) (G4de8 core-prim . apply) (G4de7 core-prim . append) (G4de6 core-prim . angle) (G4de5 core-prim . acos) (G4de4 core-prim . abs) (G4de3 core-prim . /) (G4de2 core-prim . *) (G4de1 core-prim . -) (G4de0 core-prim . +) (G4ddf core-prim . >=) (G4dde core-prim . >) (G4ddd core-prim . =) (G4ddc core-prim . <=) (G4ddb core-prim . <) (G4dda core-prim . library) (G4dd9 core-prim . export) (G4dd8 $core-rtd &no-nans-rtd &no-nans-rcd) (G4dd7 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4dd6 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4dd5 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4dd4 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4dd3 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4dd2 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4dd1 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4dd0 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4dcf $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4dce $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4dcd $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4dcc $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4dcb $core-rtd &i/o-rtd &i/o-rcd) (G4dca $core-rtd &undefined-rtd &undefined-rcd) (G4dc9 $core-rtd &syntax-rtd &syntax-rcd) (G4dc8 $core-rtd &lexical-rtd &lexical-rcd) (G4dc7 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4dc6 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4dc5 $core-rtd &who-rtd &who-rcd) (G4dc4 $core-rtd &irritants-rtd &irritants-rcd) (G4dc3 $core-rtd &assertion-rtd &assertion-rcd) (G4dc2 $core-rtd &violation-rtd &violation-rcd) (G4dc1 $core-rtd &error-rtd &error-rcd) (G4dc0 $core-rtd &serious-rtd &serious-rcd) (G4dbf $core-rtd &warning-rtd &warning-rcd) (G4dbe $core-rtd &message-rtd &message-rcd) (G4dbd $core-rtd &condition-rtd &condition-rcd) (G4dbc macro . define-condition-type) (G4dbb macro . define-enumeration) (G4dba macro . define-record-type) (G4db9 macro . parent-rtd) (G4db8 macro . nongenerative) (G4db7 macro . opaque) (G4db6 macro . sealed) (G4db5 macro . protocol) (G4db4 macro . parent) (G4db3 macro . immutable) (G4db2 macro . mutable) (G4db1 macro . fields) (G4db0 macro . error-handling-mode) (G4daf macro . file-options) (G4dae macro . buffer-mode) (G4dad macro . eol-style) (G4dac macro . guard) (G4dab macro . trace-define) (G4daa macro . trace-lambda) (G4da9 macro . unsyntax-splicing) (G4da8 macro . unsyntax) (G4da7 macro . unquote-splicing) (G4da6 macro . unquote) (G4da5 macro . _) (G4da4 macro . else) (G4da3 macro . =>) (G4da2 macro . ...) (G4da1 macro . assert) (G4da0 macro . endianness) (G4d9f macro . delay) (G4d9e macro . time) (G4d9d macro . or) (G4d9c macro . and) (G4d9b macro . do) (G4d9a macro . cond) (G4d99 macro . let*) (G4d98 macro . let) (G4d97 macro . let*-values) (G4d96 macro . let-values) (G4d95 macro . identifier-syntax) (G4d94 macro . with-syntax) (G4d93 macro . quasisyntax) (G4d92 macro . quasiquote) (G4d91 macro . syntax-rules) (G4d90 macro . include) (G4d8f macro . define-struct) (G4d8e core-macro . record-constructor-descriptor) (G4d8d core-macro . record-type-descriptor) (G4d8c macro . case) (G4d8b macro . parameterize) (G4d8a macro . unless) (G4d89 macro . when) (G4d88 core-macro . if) (G4d87 core-macro . letrec*) (G4d86 core-macro . letrec) (G4d85 core-macro . type-descriptor) (G4d84 core-macro . case-lambda) (G4d83 core-macro . lambda) (G4d82 core-macro . syntax) (G4d81 core-macro . syntax-case) (G4d80 core-macro . quote) (G4d7f core-macro . foreign-call) (G4d7e letrec-syntax) (G4d7d let-syntax) (G4d7c set!) (G4d7b import) (G4d7a begin) (G4d79 module) (G4d78 define-syntax) (G4d77 define)) values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G509a '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5041) (eval-core . G5040) (set-symbol-value! . G503f) (symbol-value . G503e) (gensym . G503d) (void . G503c)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G509b '(mosh) '() '() '() '() '((set-symbol-value! . G503f) (symbol-value . G503e) (assoc-ref . G5018) (alist-cons . G5017) (print . G5015) (format . G5014) (standard-library-path . G5013) (file-newer? . G5012) (stat-mtime . G5011) (current-directory . G5010) (write-to-file . G500f) (file->list . G500e) (file->string . G500d) (digit->integer . G500c) (call-with-string-input-port . G500b) (call-with-string-io . G500a) (string-split . G5009) (bytevector-for-each . G5008) (string->regexp . G5007) (rxmatch . G5006) (regexp-replace-all . G5005) (hashtable-for-each . G5004) (get-timeofday . G5000) (get-command-line . G4fff) (sys-display . G4ffe) (source-info . G4ffd) (make-compiler-instruction . G4ffc) (make-instruction . G4ffb) (set-source-info! . G4ffa) (bignum? . G4ff9) (make-complex . G4ff8) (fasl-read . G4ff7) (fasl-write . G4ff6) (include . G4d90)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G509c '(mosh backend) '() '() '() '() '((receive . G4ff5)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G509d '(mosh file) '() '() '() '() '((read-line . G5039) (file-newer? . G5012) (stat-mtime . G5011) (current-directory . G5010) (write-to-file . G500f) (file->list . G500e) (file->string . G500d)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G509e '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5008)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G509f '(mosh number) '() '() '() '() '((digit->integer . G500c)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G50a0 '(mosh string) '() '() '() '() '((print . G5015) (format . G5014) (call-with-string-input-port . G500b) (call-with-string-io . G500a) (string-split . G5009) (string->regexp . G5007)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G50a1 '(mosh list) '() '() '() '() '((assoc-ref . G5018)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G50a2 '(mosh regexp) '() '() '() '() '((rxmatch . G5006) (regexp-replace-all . G5005)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G50a3 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5004)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G50a4 '(mosh parameters) '() '() '() '() '((make-parameter . G289e) (parameterize . G4d8b)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G50a5 '(system) '() '() '() '() '((readdir . G5003) (get-environment-variables . G5002) (get-environment-variable . G5001)) '() values values '#f '#f '#f '#f) (G2bf3@G2a88@install-library 'G50a6 '(srfi :1) '() '() '() '() '((dotted-list? . G5038) (circular-list? . G5037) (proper-list? . G5036) (circular-list . G5035) (last . G5034) (last-pair . G5033) (not-pair? . G5032) (split-at! . G5031) (split-at . G5030) (list= . G502f) (list-copy . G502e) (list-tabulate . G502d) (make-list . G502c) (xcons . G502b) (tenth . G502a) (ninth . G5029) (eighth . G5028) (seventh . G5027) (sixth . G5026) (fifth . G5025) (drop-right! . G5024) (drop-right . G5023) (take-right . G5022) (take! . G5021) (drop . G5020) (take . G501f) (car+cdr . G501e) (third . G501d) (second . G501c) (first . G501b) (iota . G501a) (every . G5019) (alist-cons . G5017) (append-map . G5016)) '() values values '#f '#f '#f '#f))
((lambda (G4cd3@for-each-with-index G4cd5@repl G4cd7@trace-printer G4cd9@command-line G4cdb@local-library-path G4cdd@load/args G4cdf@load G4ce1@ironscheme-build G4ce3@eval-top-level G4ce5@compile-system-libraries G4ce7@compile G4ce9@compile->closure G4ceb@pre-compile-r6rs-file G4ced@load-r6rs-top-level G4cef@write-record) (begin (set! G4cd3@for-each-with-index (lambda (G4d04@proc G4d05@lst) (letrec ((G4d08@loop (lambda (G4d0a@i G4d0b@lst) (if (null? G4d0b@lst) (if '#f '#f (void)) (begin (G4d04@proc G4d0a@i (car G4d0b@lst)) (G4d08@loop (+ G4d0a@i '1) (cdr G4d0b@lst))))))) (G4d08@loop '1 G4d05@lst)))) (set! G4cd5@repl (lambda G4d0e@x ((lambda (G4d11@rec) (begin (set! G4d11@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4d13@G4d12) (with-exception-handler (lambda (G4d15@e) (G4d13@G4d12 (if '#t (G4cd3@for-each-with-index (lambda (G4d17@i G4d18@x) ((lambda (G4d1b@rtd) (begin (format '#t '"   ~d. ~a" G4d17@i (record-type-name G4d1b@rtd)) ((lambda (G4d1d@v) ((lambda (G4d1f@t) (if (memv G4d1f@t '(0)) (newline) (if (memv G4d1f@t '(1)) (begin (display '": ") (write ((record-accessor G4d1b@rtd '0) G4d18@x)) (newline)) (begin (display '":\n") ((letrec ((G4d21@f (lambda (G4d23@i) (if (not (= G4d23@i (vector-length G4d1d@v))) (begin (display '"       ") (display (vector-ref G4d1d@v G4d23@i)) (display '": ") (write ((record-accessor G4d1b@rtd G4d23@i) G4d18@x)) (newline) (G4d21@f (+ G4d23@i '1))) (void))))) G4d21@f) '0))))) (vector-length G4d1d@v))) (record-type-field-names G4d1b@rtd)))) (record-rtd G4d18@x))) (simple-conditions G4d15@e)) (raise G4d15@e)))) (lambda () (begin '#f ((lambda (G4d25@line) (if (eof-object? G4d25@line) (exit) (write (G4ce3@eval-top-level (call-with-port (open-string-input-port G4d25@line) read))))) (get-line (current-input-port)))))))) (newline) (G4d11@rec)))) (G4d11@rec))) '#f))) (set! G4cd7@trace-printer (G2966@G289f@make-parameter write)) (set! G4cd9@command-line (G2966@G289f@make-parameter (get-command-line))) (set! G4cdb@local-library-path (lambda (G4d27@filename) (cons '"." (G2be3@G2a68@library-path)))) (set! G4cdd@load/args (lambda (G4d29@filename . G4d2b@args) (begin (apply G4ced@load-r6rs-top-level G4d29@filename 'load G4d2b@args) (void)))) (set! G4cdf@load (lambda (G4d2d@filename) (begin (apply G4ced@load-r6rs-top-level G4d2d@filename 'load (G4cd9@command-line)) (void)))) (set! G4ce1@ironscheme-build (lambda () (G4cdf@load '"ironscheme-buildscript.ss"))) (set! G4ce3@eval-top-level (lambda (G4d2f@x) (G49d2@G308c@eval G4d2f@x (G49e9@G30ba@interaction-environment)))) (set! G4ce5@compile-system-libraries (lambda () (G4ce3@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4ce7@compile (lambda (G4d31@filename) (G4ced@load-r6rs-top-level G4d31@filename 'compile))) (set! G4ce9@compile->closure (lambda (G4d33@filename) (G4ced@load-r6rs-top-level G4d33@filename 'closure))) (set! G4ceb@pre-compile-r6rs-file (lambda (G4d35@filename) (G4ced@load-r6rs-top-level G4d35@filename 'compile))) (set! G4ced@load-r6rs-top-level (lambda (G4d37@filename G4d38@how . G4d3b@args) ((lambda (G4d3f@G4d3d@library-path G4d40@G4d3e@library-path) ((lambda (G4d43@swap) (dynamic-wind G4d43@swap (lambda () ((lambda (G4d45@x*) ((lambda (G4d47@t) (if (memv G4d47@t '(closure)) (G49e8@G30b8@pre-compile-r6rs-top-level G4d45@x*) (if (memv G4d47@t '(load)) ((lambda (G4d4b@G4d49@command-line G4d4c@G4d4a@command-line) ((lambda (G4d4f@swap) (dynamic-wind G4d4f@swap (lambda () ((G49e7@G30b6@compile-r6rs-top-level G4d45@x*))) G4d4f@swap)) (lambda () ((lambda (G4d51@t) (begin (G4d4b@G4d49@command-line G4d4c@G4d4a@command-line) (set! G4d4c@G4d4a@command-line G4d51@t))) (G4d4b@G4d49@command-line))))) G4cd9@command-line (cons G4d37@filename (car G4d3b@args))) (if (memv G4d47@t '(compile)) (begin (G49e7@G30b6@compile-r6rs-top-level G4d45@x*) (G2be7@G2a70@serialize-all G2961@G2895@serialize-library G29bf@G2974@compile-core-expr)) (if '#f '#f (void)))))) G4d38@how)) (with-input-from-file G4d37@filename (lambda () ((letrec ((G4d53@f (lambda () ((lambda (G4d55@x) (if (eof-object? G4d55@x) '() (cons G4d55@x (G4d53@f)))) (G2959@G2885@read-annotated))))) G4d53@f)))))) G4d43@swap)) (lambda () ((lambda (G4d57@t) (begin (G4d3f@G4d3d@library-path G4d40@G4d3e@library-path) (set! G4d40@G4d3e@library-path G4d57@t))) (G4d3f@G4d3d@library-path))))) G2be3@G2a68@library-path (G4cdb@local-library-path G4d37@filename)))) (set! G4cef@write-record (lambda (G4d59@record G4d5a@port) ((lambda (G4d5d@rtd) (begin (format G4d5a@port '"    ~a" (record-type-name G4d5d@rtd)) ((lambda (G4d5f@v) ((lambda (G4d61@t) (if (memv G4d61@t '(0)) (newline) (if (memv G4d61@t '(1)) (begin (display '": " G4d5a@port) (write ((record-accessor G4d5d@rtd '0) G4d59@record) G4d5a@port) (newline G4d5a@port)) (begin (display '":\n") ((letrec ((G4d63@f (lambda (G4d65@i) (if (not (= G4d65@i (vector-length G4d5f@v))) (begin (display '"       " G4d5a@port) (display (vector-ref G4d5f@v G4d65@i) G4d5a@port) (display '": " G4d5a@port) (write ((record-accessor G4d5d@rtd G4d65@i) G4d59@record) G4d5a@port) (newline G4d5a@port) (G4d63@f (+ G4d65@i '1))) (void))))) G4d63@f) '0))))) (vector-length G4d5f@v))) (record-type-field-names G4d5d@rtd)))) (record-rtd G4d59@record)))) (begin (set! G4d75@G4cef@write-record G4cef@write-record) (set! G4d74@G4ced@load-r6rs-top-level G4ced@load-r6rs-top-level) (set! G4d73@G4ceb@pre-compile-r6rs-file G4ceb@pre-compile-r6rs-file) (set! G4d72@G4ce9@compile->closure G4ce9@compile->closure) (set! G4d71@G4ce7@compile G4ce7@compile) (set! G4d70@G4ce5@compile-system-libraries G4ce5@compile-system-libraries) (set! G4d6f@G4ce3@eval-top-level G4ce3@eval-top-level) (set! G4d6e@G4ce1@ironscheme-build G4ce1@ironscheme-build) (set! G4d6d@G4cdf@load G4cdf@load) (set! G4d6c@G4cdd@load/args G4cdd@load/args) (set! G4d6b@G4cdb@local-library-path G4cdb@local-library-path) (set! G4d6a@G4cd9@command-line G4cd9@command-line) (set! G4d69@G4cd7@trace-printer G4cd7@trace-printer) (set! G4d68@G4cd5@repl G4cd5@repl) (set! G4d67@G4cd3@for-each-with-index G4cd3@for-each-with-index) (G2be8@G2a72@current-precompiled-library-loader G2962@G2897@load-serialized-library) (set-symbol-value! 'load G4cdf@load) (set-symbol-value! 'pre-compile-r6rs-file G4ceb@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4ce3@eval-top-level) (set-symbol-value! 'int-env-syms G49c9@G307a@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29be@G2972@expanded->core) (set-symbol-value! 'trace-printer G4cd7@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2be3@G2a68@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4cf0@args G4cf1@port) (with-exception-handler (lambda (G4cf4@c) (begin (display '" Condition components:\n" G4cf1@port) (G4cd3@for-each-with-index (lambda (G4cf6@i G4cf7@x) ((lambda (G4cfa@rtd) (begin (format G4cf1@port '"   ~d. ~a" G4cf6@i (record-type-name G4cfa@rtd)) ((lambda (G4cfc@v) ((lambda (G4cfe@t) (if (memv G4cfe@t '(0)) (newline) (if (memv G4cfe@t '(1)) (begin (display '": ") (write ((record-accessor G4cfa@rtd '0) G4cf7@x)) (newline)) (begin (display '":\n") ((letrec ((G4d00@f (lambda (G4d02@i) (if (not (= G4d02@i (vector-length G4cfc@v))) (begin (display '"       ") (display (vector-ref G4cfc@v G4d02@i)) (display '": ") (write ((record-accessor G4cfa@rtd G4d02@i) G4cf7@x)) (newline) (G4d00@f (+ G4d02@i '1))) (void))))) G4d00@f) '0))))) (vector-length G4cfc@v))) (record-type-field-names G4cfa@rtd)))) (record-rtd G4cf7@x))) (simple-conditions G4cf4@c)))) (lambda () (if (null? G4cf0@args) (G4cd5@repl) (G4ced@load-r6rs-top-level (car G4cf0@args) 'load (cdr G4cf0@args)))))) (G4cd9@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
