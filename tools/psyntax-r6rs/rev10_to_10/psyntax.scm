;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G27fe@read-annotated G2800@annotation-stripped G2802@annotation? G2804@annotation-source G2806@annotation-expression G2808@serialize-library G280a@load-serialized-library G280c@make-record-printer G280e@compile-core G2810@read-library-source-file G2812@make-parameter G28ac@file-options-spec) (begin (set! G27fe@read-annotated read) (set! G2800@annotation-stripped (lambda (G28ad@x) (G2806@annotation-expression G28ad@x))) (set! G2802@annotation? (lambda (G28af@x) (source-info G28af@x))) (set! G2804@annotation-source (lambda (G28b1@x) (source-info G28b1@x))) (set! G2806@annotation-expression (lambda (G28b3@x) (if (pair? G28b3@x) (cons (car G28b3@x) (cdr G28b3@x)) (display '"line:46\n")))) (set! G2808@serialize-library (lambda G28b5@x (begin (display G28b5@x) '#f))) (set! G280a@load-serialized-library (lambda G28b7@x '#f)) (set! G280c@make-record-printer (lambda (G28b9@name G28ba@printer) (lambda G28bd@x (begin (display '"record printer") (for-each display G28bd@x))))) (set! G280e@compile-core (lambda G28bf@x (apply error 'comile-core '"not implementated" G28bf@x))) (set! G2810@read-library-source-file (lambda (G28c1@file-name) (with-input-from-file G28c1@file-name G27fe@read-annotated))) (set! G2812@make-parameter (lambda G28d1 ((lambda (G28d2) (if (= G28d2 '1) (apply (lambda (G28c3@x) (G2812@make-parameter G28c3@x (lambda (G28c5@x) G28c5@x))) G28d1) (if (= G28d2 '2) (apply (lambda (G28c7@x G28c8@fender) (begin (if (procedure? G28c8@fender) (void) (assertion-violation 'assert '"assertion failed" '(procedure? fender))) ((lambda (G28cb@x) (lambda G28cf ((lambda (G28d0) (if (= G28d0 '0) (apply (lambda () G28cb@x) G28cf) (if (= G28d0 '1) (apply (lambda (G28cd@v) (set! G28cb@x (G28c8@fender G28cd@v))) G28cf) (error 'apply '"invalid arg count")))) (length G28cf)))) (G28c8@fender G28c7@x)))) G28d1) (error 'apply '"invalid arg count")))) (length G28d1)))) (set! G28ac@file-options-spec (lambda (G28d3@x) G28d3@x)) (begin (set! G28e0@G28ac@file-options-spec G28ac@file-options-spec) (set! G28df@G2812@make-parameter G2812@make-parameter) (set! G28de@G2810@read-library-source-file G2810@read-library-source-file) (set! G28dd@G280e@compile-core G280e@compile-core) (set! G28dc@G280c@make-record-printer G280c@make-record-printer) (set! G28db@G280a@load-serialized-library G280a@load-serialized-library) (set! G28da@G2808@serialize-library G2808@serialize-library) (set! G28d9@G2806@annotation-expression G2806@annotation-expression) (set! G28d8@G2804@annotation-source G2804@annotation-source) (set! G28d7@G2802@annotation? G2802@annotation?) (set! G28d6@G2800@annotation-stripped G2800@annotation-stripped) (set! G28d5@G27fe@read-annotated G27fe@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G28e5@current-primitive-locations G28e7@mutable? G28e9@rewriter G28eb@expanded->core G28ed@compile-core-expr G28ef@pretty-print G28f1@compile-core-expr-to-port) (begin (set! G28e5@current-primitive-locations (G28df@G2812@make-parameter (lambda (G28f2@x) '#f) (lambda (G28f4@p) (begin (if (procedure? G28f4@p) (void) (assertion-violation 'assert '"assertion failed" '(procedure? p))) G28f4@p)))) (set! G28e7@mutable? (lambda (G28f6@x) ((lambda (G28f9@simple?) (begin (set! G28f9@simple? (lambda (G28fa@x) ((lambda (G28fc@t) (if G28fc@t G28fc@t ((lambda (G28fe@t) (if G28fe@t G28fe@t ((lambda (G2900@t) (if G2900@t G2900@t ((lambda (G2902@t) (if G2902@t G2902@t ((lambda (G2904@t) (if G2904@t G2904@t ((lambda (G2906@t) (if G2906@t G2906@t (begin '#f (number? G28fa@x)))) (bytevector? G28fa@x)))) (string? G28fa@x)))) (boolean? G28fa@x)))) (symbol? G28fa@x)))) (char? G28fa@x)))) (null? G28fa@x)))) (not (G28f9@simple? G28f6@x)))) '#f))) (set! G28e9@rewriter (lambda (G2908@quote-hack?) ((lambda (G290b@f) (begin (set! G290b@f (lambda (G290c@x) (if (pair? G290c@x) ((lambda (G290e@t) (if (eqv? G290e@t 'quote) (if (if G2908@quote-hack? (begin '#f (G28e7@mutable? (cadr G290c@x))) '#f) ((lambda (G2935@g) (begin (set-symbol-value! G2935@g (cadr G290c@x)) G2935@g)) (gensym)) G290c@x) (if (eqv? G290e@t 'case-lambda) (cons 'case-lambda (map (lambda (G2933@x) (cons (car G2933@x) (map G290b@f (cdr G2933@x)))) (cdr G290c@x))) (if (eqv? G290e@t 'lambda) (cons* 'lambda (cadr G290c@x) (map G290b@f (cddr G290c@x))) (if (eqv? G290e@t 'letrec) ((lambda (G292b@bindings G292c@body*) ((lambda (G292f@lhs* G2930@rhs*) (cons* 'letrec (map list G292f@lhs* (map G290b@f G2930@rhs*)) (map G290b@f G292c@body*))) (map car G292b@bindings) (map cadr G292b@bindings))) (cadr G290c@x) (cddr G290c@x)) (if (eqv? G290e@t 'letrec*) ((lambda (G2923@bindings G2924@body*) ((lambda (G2927@lhs* G2928@rhs*) (cons* 'letrec* (map list G2927@lhs* (map G290b@f G2928@rhs*)) (map G290b@f G2924@body*))) (map car G2923@bindings) (map cadr G2923@bindings))) (cadr G290c@x) (cddr G290c@x)) (if (eqv? G290e@t 'library-letrec*) ((lambda (G2915@name G2916@x) ((lambda (G2919@bindings G291a@body*) ((lambda (G291d@lhs* G291e@lhs** G291f@rhs*) (cons* 'library-letrec* G2915@name (map list G291d@lhs* G291e@lhs** (map G290b@f G291f@rhs*)) (map G290b@f G291a@body*))) (map car G2919@bindings) (map cadr G2919@bindings) (map caddr G2919@bindings))) (cadr G2916@x) (cddr G2916@x))) (cadr G290c@x) (cdr G290c@x)) (if (eqv? G290e@t 'begin) (cons 'begin (map G290b@f (cdr G290c@x))) (if (eqv? G290e@t 'set!) (list 'set! (cadr G290c@x) (G290b@f (caddr G290c@x))) (if (eqv? G290e@t 'primitive) ((lambda (G290f@op) ((lambda (G2911@t) (if G2911@t ((lambda (G2913@loc) G2913@loc) G2911@t) G290f@op)) ((G28e5@current-primitive-locations) G290f@op))) (cadr G290c@x)) (if (eqv? G290e@t 'define) G290c@x (if (list? G290c@x) (map G290b@f G290c@x) (error 'rewrite '"invalid form ~s ~s" G290c@x (list? G290c@x)))))))))))))) (car G290c@x)) G290c@x))) G290b@f)) '#f))) (set! G28eb@expanded->core (lambda (G2937@x) ((G28e9@rewriter '#t) G2937@x))) (set! G28ed@compile-core-expr (lambda (G2939@x) ((G28e9@rewriter '#f) G2939@x))) (set! G28ef@pretty-print write) (set! G28f1@compile-core-expr-to-port (lambda (G293b@x G293c@p) (G28ef@pretty-print ((G28e9@rewriter '#f) G293b@x) G293c@p))) (begin (set! G2945@G28f1@compile-core-expr-to-port G28f1@compile-core-expr-to-port) (set! G2944@G28ef@pretty-print G28ef@pretty-print) (set! G2943@G28ed@compile-core-expr G28ed@compile-core-expr) (set! G2942@G28eb@expanded->core G28eb@expanded->core) (set! G2941@G28e9@rewriter G28e9@rewriter) (set! G2940@G28e7@mutable? G28e7@mutable?) (set! G293f@G28e5@current-primitive-locations G28e5@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G299f@make-collection G29a1@current-library-collection G29a7@G29a2 G29a9@G29a4 G29ab@G29a3 G29b0@library? G29b2@make-library G29b4@library-id G29b6@library-name G29b8@library-version G29ba@library-imp* G29bc@library-vis* G29be@library-inv* G29c0@library-subst G29c2@library-env G29c4@library-visit-state G29c6@library-invoke-state G29c8@library-visit-code G29ca@library-invoke-code G29cc@library-visible? G29ce@library-source-file-name G29d0@set-library-id! G29d2@set-library-name! G29d4@set-library-version! G29d6@set-library-imp*! G29d8@set-library-vis*! G29da@set-library-inv*! G29dc@set-library-subst! G29de@set-library-env! G29e0@set-library-visit-state! G29e2@set-library-invoke-state! G29e4@set-library-visit-code! G29e6@set-library-invoke-code! G29e8@set-library-visible?! G29ea@set-library-source-file-name! G29ec@rp G29ee@find-dependencies G29f0@find-library-by G29f2@library-path G29f4@library-extensions G29f6@library-name->file-name G29f8@file-locator G29fa@serialize-all G29fc@current-precompiled-library-loader G29fe@try-load-from-file G2a00@library-loader G2a02@current-library-expander G2a04@external-pending-libraries G2a06@find-external-library G2a08@find-library-by-name G2a0a@library-exists? G2a0c@find-library-by-spec/die G2a0e@label->binding-table G2a10@install-library-record G2a12@install-library G2a14@imported-label->binding G2a16@invoke-library G2a18@visit-library G2a1a@invoke-library-by-spec G2a1c@installed-libraries G2a1e@library-spec) (begin (set! G299f@make-collection (lambda () ((lambda (G2a1f@set) ((lambda (G2a22@set-cons) (begin (set! G2a22@set-cons (lambda (G2a27@x G2a28@ls) (if (memq G2a27@x G2a28@ls) G2a28@ls (cons G2a27@x G2a28@ls)))) (lambda G2a25 ((lambda (G2a26) (if (= G2a26 '0) (apply (lambda () G2a1f@set) G2a25) (if (= G2a26 '1) (apply (lambda (G2a23@x) (set! G2a1f@set (G2a22@set-cons G2a23@x G2a1f@set))) G2a25) (error 'apply '"invalid arg count")))) (length G2a25))))) '#f)) '()))) (set! G29a1@current-library-collection (G28df@G2812@make-parameter (G299f@make-collection) (lambda (G2a2b@x) (begin (if (procedure? G2a2b@x) (void) (assertion-violation 'current-library-collection '"not a procedure" G2a2b@x)) G2a2b@x)))) (set! G29a7@G29a2 (make-record-type-descriptor 'library '#f 'G29a5 '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29a9@G29a4 '#f) (set! G29ab@G29a3 (make-record-constructor-descriptor G29a7@G29a2 '#f G29a9@G29a4)) (set! G29b0@library? (record-predicate G29a7@G29a2)) (set! G29b2@make-library (record-constructor G29ab@G29a3)) (set! G29b4@library-id (record-accessor G29a7@G29a2 '0)) (set! G29b6@library-name (record-accessor G29a7@G29a2 '1)) (set! G29b8@library-version (record-accessor G29a7@G29a2 '2)) (set! G29ba@library-imp* (record-accessor G29a7@G29a2 '3)) (set! G29bc@library-vis* (record-accessor G29a7@G29a2 '4)) (set! G29be@library-inv* (record-accessor G29a7@G29a2 '5)) (set! G29c0@library-subst (record-accessor G29a7@G29a2 '6)) (set! G29c2@library-env (record-accessor G29a7@G29a2 '7)) (set! G29c4@library-visit-state (record-accessor G29a7@G29a2 '8)) (set! G29c6@library-invoke-state (record-accessor G29a7@G29a2 '9)) (set! G29c8@library-visit-code (record-accessor G29a7@G29a2 '10)) (set! G29ca@library-invoke-code (record-accessor G29a7@G29a2 '11)) (set! G29cc@library-visible? (record-accessor G29a7@G29a2 '12)) (set! G29ce@library-source-file-name (record-accessor G29a7@G29a2 '13)) (set! G29d0@set-library-id! (record-mutator G29a7@G29a2 '0)) (set! G29d2@set-library-name! (record-mutator G29a7@G29a2 '1)) (set! G29d4@set-library-version! (record-mutator G29a7@G29a2 '2)) (set! G29d6@set-library-imp*! (record-mutator G29a7@G29a2 '3)) (set! G29d8@set-library-vis*! (record-mutator G29a7@G29a2 '4)) (set! G29da@set-library-inv*! (record-mutator G29a7@G29a2 '5)) (set! G29dc@set-library-subst! (record-mutator G29a7@G29a2 '6)) (set! G29de@set-library-env! (record-mutator G29a7@G29a2 '7)) (set! G29e0@set-library-visit-state! (record-mutator G29a7@G29a2 '8)) (set! G29e2@set-library-invoke-state! (record-mutator G29a7@G29a2 '9)) (set! G29e4@set-library-visit-code! (record-mutator G29a7@G29a2 '10)) (set! G29e6@set-library-invoke-code! (record-mutator G29a7@G29a2 '11)) (set! G29e8@set-library-visible?! (record-mutator G29a7@G29a2 '12)) (set! G29ea@set-library-source-file-name! (record-mutator G29a7@G29a2 '13)) (set! G29ec@rp (G28dc@G280c@make-record-printer 'library (lambda (G2a2d@x G2a2e@p) (begin (if (G29b0@library? G2a2d@x) (void) (assertion-violation 'record-type-printer '"not a library")) (display (format '"#<library ~s>" (if (null? (G29b8@library-version G2a2d@x)) (G29b6@library-name G2a2d@x) (append (G29b6@library-name G2a2d@x) (list (G29b8@library-version G2a2d@x))))) G2a2e@p))))) (set! G29ee@find-dependencies (lambda (G2a31@ls) (if (null? G2a31@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29f0@find-library-by (lambda (G2a33@pred) ((letrec ((G2a35@f (lambda (G2a37@ls) (if (null? G2a37@ls) '#f (if (G2a33@pred (car G2a37@ls)) (car G2a37@ls) (G2a35@f (cdr G2a37@ls))))))) G2a35@f) ((G29a1@current-library-collection))))) (set! G29f2@library-path (G28df@G2812@make-parameter '(".") (lambda (G2a39@x) (if (if (list? G2a39@x) (begin '#f (for-all string? G2a39@x)) '#f) (map (lambda (G2a3b@x) G2a3b@x) G2a39@x) (assertion-violation 'library-path '"not a list of strings" G2a39@x))))) (set! G29f4@library-extensions (G28df@G2812@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a3d@x) (if (if (list? G2a3d@x) (begin '#f (for-all string? G2a3d@x)) '#f) (map (lambda (G2a3f@x) G2a3f@x) G2a3d@x) (assertion-violation 'library-extensions '"not a list of strings" G2a3d@x))))) (set! G29f6@library-name->file-name (lambda (G2a41@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a45@G2a43 G2a46@G2a44) ((lambda (G2a49@extract G2a4a@p) ((lambda (G2a4e@display-hex) (begin (set! G2a4e@display-hex (lambda (G2a5d@n) (if (<= '0 G2a5d@n '9) (display G2a5d@n G2a4a@p) (display (integer->char (+ (char->integer '#\A) (- G2a5d@n '10))) G2a4a@p)))) (begin ((letrec ((G2a4f@f (lambda (G2a51@ls) (if (null? G2a51@ls) (void) (begin (display '"/" G2a4a@p) (for-each (lambda (G2a53@c) (if ((lambda (G2a55@t) (if G2a55@t G2a55@t ((lambda (G2a57@t) (if G2a57@t G2a57@t ((lambda (G2a59@t) (if G2a59@t G2a59@t (begin '#f (memv G2a53@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2a53@c '#\9)))) (char<=? '#\A G2a53@c '#\Z)))) (char<=? '#\a G2a53@c '#\z)) (display G2a53@c G2a4a@p) (begin (display '"%" G2a4a@p) ((lambda (G2a5b@n) (begin (G2a4e@display-hex (quotient G2a5b@n '16)) (G2a4e@display-hex (remainder G2a5b@n '16)))) (char->integer G2a53@c))))) (string->list (symbol->string (car G2a51@ls)))) (G2a4f@f (cdr G2a51@ls))))))) G2a4f@f) G2a41@x) (G2a49@extract)))) '#f)) G2a46@G2a44 G2a45@G2a43))))) (set! G29f8@file-locator (G28df@G2812@make-parameter (lambda (G2a5f@x) ((lambda (G2a61@str) ((letrec ((G2a63@f (lambda (G2a65@ls G2a66@exts G2a67@failed-list) (if (null? G2a65@ls) ((lambda () ((lambda (G2a73@G2a6e G2a75@G2a70 G2a77@G2a6f G2a7c@G2a6d G2a7e@make-library-resolution-condition G2a80@G2a6b G2a82@G2a6c G2a84@library-resolution-condition? G2a86@condition-library G2a88@condition-files) (begin (set! G2a73@G2a6e (make-record-type-descriptor '&library-resolution &condition-rtd 'G2a71 '#f '#f '#((immutable library) (immutable files)))) (set! G2a75@G2a70 '#f) (set! G2a77@G2a6f (make-record-constructor-descriptor G2a73@G2a6e &condition-rcd G2a75@G2a70)) (set! G2a7c@G2a6d (record-predicate G2a73@G2a6e)) (set! G2a7e@make-library-resolution-condition (record-constructor G2a77@G2a6f)) (set! G2a80@G2a6b (record-accessor G2a73@G2a6e '0)) (set! G2a82@G2a6c (record-accessor G2a73@G2a6e '1)) (set! G2a84@library-resolution-condition? (condition-predicate G2a73@G2a6e)) (set! G2a86@condition-library (condition-accessor G2a73@G2a6e G2a80@G2a6b)) (set! G2a88@condition-files (condition-accessor G2a73@G2a6e G2a82@G2a6c)) (raise (condition (G4af8@G4a0e@make-error) (G4b12@G4a64@make-who-condition 'expander) (G4ae4@G49ce@make-message-condition '"cannot locate library in library-path") (G2a7e@make-library-resolution-condition G2a5f@x (reverse G2a67@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a66@exts) (G2a63@f (cdr G2a65@ls) (G29f4@library-extensions) G2a67@failed-list) ((lambda (G2a89@name) (if (file-exists? G2a89@name) G2a89@name (G2a63@f G2a65@ls (cdr G2a66@exts) (cons G2a89@name G2a67@failed-list)))) (string-append (car G2a65@ls) G2a61@str (car G2a66@exts)))))))) G2a63@f) (G29f2@library-path) (G29f4@library-extensions) '())) (G29f6@library-name->file-name G2a5f@x))) (lambda (G2a8b@f) (if (procedure? G2a8b@f) G2a8b@f (assertion-violation 'file-locator '"not a procedure" G2a8b@f))))) (set! G29fa@serialize-all (lambda (G2a8d@serialize G2a8e@compile) ((lambda (G2a92@library-desc) (begin (set! G2a92@library-desc (lambda (G2a95@x) (list (G29b4@library-id G2a95@x) (G29b6@library-name G2a95@x)))) (for-each (lambda (G2a93@x) (if (G29ce@library-source-file-name G2a93@x) (G2a8d@serialize (G29ce@library-source-file-name G2a93@x) (list (G29b4@library-id G2a93@x) (G29b6@library-name G2a93@x) (G29b8@library-version G2a93@x) (map G2a92@library-desc (G29ba@library-imp* G2a93@x)) (map G2a92@library-desc (G29bc@library-vis* G2a93@x)) (map G2a92@library-desc (G29be@library-inv* G2a93@x)) (G29c0@library-subst G2a93@x) (G29c2@library-env G2a93@x) (G2a8e@compile (G29c8@library-visit-code G2a93@x)) (G2a8e@compile (G29ca@library-invoke-code G2a93@x)) (G29cc@library-visible? G2a93@x))) (void))) ((G29a1@current-library-collection))))) '#f))) (set! G29fc@current-precompiled-library-loader (G28df@G2812@make-parameter (lambda (G2a97@filename G2a98@sk) '#f))) (set! G29fe@try-load-from-file (lambda (G2a9b@filename) ((G29fc@current-precompiled-library-loader) G2a9b@filename (lambda G2ac1 ((lambda (G2ac2) (if (= G2ac2 '11) (apply (lambda (G2a9d@id G2a9e@name G2a9f@ver G2aa0@imp* G2aa1@vis* G2aa2@inv* G2aa3@exp-subst G2aa4@exp-env G2aa5@visit-proc G2aa6@invoke-proc G2aa7@visible?) ((letrec ((G2ab3@f (lambda (G2ab5@deps) (if (null? G2ab5@deps) (begin (G2a12@install-library G2a9d@id G2a9e@name G2a9f@ver G2aa0@imp* G2aa1@vis* G2aa2@inv* G2aa3@exp-subst G2aa4@exp-env G2aa5@visit-proc G2aa6@invoke-proc '#f '#f G2aa7@visible? '#f) '#t) ((lambda (G2ab7@d) ((lambda (G2ab9@label G2aba@dname) ((lambda (G2abd@l) (if (if (G29b0@library? G2abd@l) (begin '#f (eq? G2ab9@label (G29b4@library-id G2abd@l))) '#f) (G2ab3@f (cdr G2ab5@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source.\n" G2a9e@name G2aba@dname G2a9b@filename) '#f))) (G2a08@find-library-by-name G2aba@dname))) (car G2ab7@d) (cadr G2ab7@d))) (car G2ab5@deps)))))) G2ab3@f) (append G2aa0@imp* G2aa1@vis* G2aa2@inv*))) G2ac1) (if (>= G2ac2 '0) (apply (lambda G2abf@others '#f) G2ac1) (error 'apply '"invalid arg count")))) (length G2ac1)))))) (set! G2a00@library-loader (G28df@G2812@make-parameter (lambda (G2ac3@x) ((lambda (G2ac5@file-name) (if (not G2ac5@file-name) (assertion-violation '#f '"cannot file library" G2ac3@x) ((lambda (G2ac7@t) (if G2ac7@t G2ac7@t (begin '#f ((G2a02@current-library-expander) (G28de@G2810@read-library-source-file G2ac5@file-name) G2ac5@file-name (lambda (G2ac9@name) (if (equal? G2ac9@name G2ac3@x) (void) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2acd@G2acb G2ace@G2acc) ((lambda (G2ad1@e G2ad2@p) (begin (display '"expected to find library " G2ad2@p) (write G2ac3@x G2ad2@p) (display '" in file " G2ad2@p) (display G2ac5@file-name G2ad2@p) (display '", found " G2ad2@p) (write G2ac9@name G2ad2@p) (display '" instead" G2ad2@p) (G2ad1@e))) G2ace@G2acc G2acd@G2acb)))))))))) (G29fe@try-load-from-file G2ac5@file-name)))) ((G29f8@file-locator) G2ac3@x))) (lambda (G2ad5@f) (if (procedure? G2ad5@f) G2ad5@f (assertion-violation 'library-locator '"not a procedure" G2ad5@f))))) (set! G2a02@current-library-expander (G28df@G2812@make-parameter (lambda (G2ad7@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ad9@f) (if (procedure? G2ad9@f) G2ad9@f (assertion-violation 'library-expander '"not a procedure" G2ad9@f))))) (set! G2a04@external-pending-libraries (G28df@G2812@make-parameter '())) (set! G2a06@find-external-library (lambda (G2adb@name) (begin (if (member G2adb@name (G2a04@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2adb@name) (void)) ((lambda (G2adf@G2add@external-pending-libraries G2ae0@G2ade@external-pending-libraries) ((lambda (G2ae3@swap) (dynamic-wind G2ae3@swap (lambda () (begin ((G2a00@library-loader) G2adb@name) ((lambda (G2ae5@t) (if G2ae5@t G2ae5@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2adb@name)))) (G29f0@find-library-by (lambda (G2ae7@x) (equal? (G29b6@library-name G2ae7@x) G2adb@name)))))) G2ae3@swap)) (lambda () ((lambda (G2ae9@t) (begin (G2adf@G2add@external-pending-libraries G2ae0@G2ade@external-pending-libraries) (set! G2ae0@G2ade@external-pending-libraries G2ae9@t))) (G2adf@G2add@external-pending-libraries))))) G2a04@external-pending-libraries (cons G2adb@name (G2a04@external-pending-libraries)))))) (set! G2a08@find-library-by-name (lambda (G2aeb@name) ((lambda (G2aed@t) (if G2aed@t G2aed@t (begin '#f (G2a06@find-external-library G2aeb@name)))) (G29f0@find-library-by (lambda (G2aef@x) (equal? (G29b6@library-name G2aef@x) G2aeb@name)))))) (set! G2a0a@library-exists? (lambda (G2af1@name) (if (G29f0@find-library-by (lambda (G2af3@x) (equal? (G29b6@library-name G2af3@x) G2af1@name))) (begin '#f '#t) '#f))) (set! G2a0c@find-library-by-spec/die (lambda (G2af5@spec) ((lambda (G2af7@id) ((lambda (G2af9@t) (if G2af9@t G2af9@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2af5@spec)))) (G29f0@find-library-by (lambda (G2afb@x) (eq? G2af7@id (G29b4@library-id G2afb@x)))))) (car G2af5@spec)))) (set! G2a0e@label->binding-table (make-eq-hashtable)) (set! G2a10@install-library-record (lambda (G2afd@lib) (begin ((lambda (G2aff@exp-env) (for-each (lambda (G2b01@x) ((lambda (G2b03@label G2b04@binding) ((lambda (G2b07@binding) (hashtable-set! G2a0e@label->binding-table G2b03@label G2b07@binding)) ((lambda (G2b09@t) (if (eqv? G2b09@t 'global) (cons 'global (cons G2afd@lib (cdr G2b04@binding))) (if (eqv? G2b09@t 'global-macro) (cons 'global-macro (cons G2afd@lib (cdr G2b04@binding))) (if (eqv? G2b09@t 'global-macro!) (cons 'global-macro! (cons G2afd@lib (cdr G2b04@binding))) G2b04@binding)))) (car G2b04@binding)))) (car G2b01@x) (cdr G2b01@x))) G2aff@exp-env)) (G29c2@library-env G2afd@lib)) ((G29a1@current-library-collection) G2afd@lib)))) (set! G2a12@install-library (lambda (G2b0a@id G2b0b@name G2b0c@ver G2b0d@imp* G2b0e@vis* G2b0f@inv* G2b10@exp-subst G2b11@exp-env G2b12@visit-proc G2b13@invoke-proc G2b14@visit-code G2b15@invoke-code G2b16@visible? G2b17@source-file-name) ((lambda (G2b26@imp-lib* G2b27@vis-lib* G2b28@inv-lib*) (begin (if (if (symbol? G2b0a@id) (if (list? G2b0b@name) (begin '#f (list? G2b0c@ver)) '#f) '#f) (void) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b0a@id G2b0b@name G2b0c@ver)) (if (G2a0a@library-exists? G2b0b@name) (assertion-violation 'install-library '"library is already installed" G2b0b@name) (void)) ((lambda (G2b2c@lib) (G2a10@install-library-record G2b2c@lib)) (G29b2@make-library G2b0a@id G2b0b@name G2b0c@ver G2b26@imp-lib* G2b27@vis-lib* G2b28@inv-lib* G2b10@exp-subst G2b11@exp-env G2b12@visit-proc G2b13@invoke-proc G2b14@visit-code G2b15@invoke-code G2b16@visible? G2b17@source-file-name)))) (map G2a0c@find-library-by-spec/die G2b0d@imp*) (map G2a0c@find-library-by-spec/die G2b0e@vis*) (map G2a0c@find-library-by-spec/die G2b0f@inv*)))) (set! G2a14@imported-label->binding (lambda (G2b2e@lab) (hashtable-ref G2a0e@label->binding-table G2b2e@lab '#f))) (set! G2a16@invoke-library (lambda (G2b30@lib) ((lambda (G2b32@invoke) (if (procedure? G2b32@invoke) (begin (G29e2@set-library-invoke-state! G2b30@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b30@lib))) (for-each G2a16@invoke-library (G29be@library-inv* G2b30@lib)) (G29e2@set-library-invoke-state! G2b30@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b30@lib))) (G2b32@invoke) (G29e2@set-library-invoke-state! G2b30@lib '#t)) (void))) (G29c6@library-invoke-state G2b30@lib)))) (set! G2a18@visit-library (lambda (G2b34@lib) ((lambda (G2b36@visit) (if (procedure? G2b36@visit) (begin (G29e0@set-library-visit-state! G2b34@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b34@lib))) (for-each G2a16@invoke-library (G29bc@library-vis* G2b34@lib)) (G29e0@set-library-visit-state! G2b34@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b34@lib))) (G2b36@visit) (G29e0@set-library-visit-state! G2b34@lib '#t)) (void))) (G29c4@library-visit-state G2b34@lib)))) (set! G2a1a@invoke-library-by-spec (lambda (G2b38@spec) (G2a16@invoke-library (G2a0c@find-library-by-spec/die G2b38@spec)))) (set! G2a1c@installed-libraries (lambda G2b42 ((lambda (G2b43) (if (= G2b43 '1) (apply (lambda (G2b3a@all?) ((letrec ((G2b3c@f (lambda (G2b3e@ls) (if (null? G2b3e@ls) '() (if ((lambda (G2b40@t) (if G2b40@t G2b40@t (begin '#f (G29cc@library-visible? (car G2b3e@ls))))) G2b3a@all?) (cons (car G2b3e@ls) (G2b3c@f (cdr G2b3e@ls))) (G2b3c@f (cdr G2b3e@ls))))))) G2b3c@f) ((G29a1@current-library-collection)))) G2b42) (if (= G2b43 '0) (apply (lambda () (G2a1c@installed-libraries '#f)) G2b42) (error 'apply '"invalid arg count")))) (length G2b42)))) (set! G2a1e@library-spec (lambda (G2b44@x) (begin (if (G29b0@library? G2b44@x) (void) (assertion-violation 'library-spec '"not a library" G2b44@x)) (list (G29b4@library-id G2b44@x) (G29b6@library-name G2b44@x) (G29b8@library-version G2b44@x))))) (begin (set! G2b82@G2a1e@library-spec G2a1e@library-spec) (set! G2b81@G2a1c@installed-libraries G2a1c@installed-libraries) (set! G2b80@G2a1a@invoke-library-by-spec G2a1a@invoke-library-by-spec) (set! G2b7f@G2a18@visit-library G2a18@visit-library) (set! G2b7e@G2a16@invoke-library G2a16@invoke-library) (set! G2b7d@G2a14@imported-label->binding G2a14@imported-label->binding) (set! G2b7c@G2a12@install-library G2a12@install-library) (set! G2b7b@G2a10@install-library-record G2a10@install-library-record) (set! G2b7a@G2a0e@label->binding-table G2a0e@label->binding-table) (set! G2b79@G2a0c@find-library-by-spec/die G2a0c@find-library-by-spec/die) (set! G2b78@G2a0a@library-exists? G2a0a@library-exists?) (set! G2b77@G2a08@find-library-by-name G2a08@find-library-by-name) (set! G2b76@G2a06@find-external-library G2a06@find-external-library) (set! G2b75@G2a04@external-pending-libraries G2a04@external-pending-libraries) (set! G2b74@G2a02@current-library-expander G2a02@current-library-expander) (set! G2b73@G2a00@library-loader G2a00@library-loader) (set! G2b72@G29fe@try-load-from-file G29fe@try-load-from-file) (set! G2b71@G29fc@current-precompiled-library-loader G29fc@current-precompiled-library-loader) (set! G2b70@G29fa@serialize-all G29fa@serialize-all) (set! G2b6f@G29f8@file-locator G29f8@file-locator) (set! G2b6e@G29f6@library-name->file-name G29f6@library-name->file-name) (set! G2b6d@G29f4@library-extensions G29f4@library-extensions) (set! G2b6c@G29f2@library-path G29f2@library-path) (set! G2b6b@G29f0@find-library-by G29f0@find-library-by) (set! G2b6a@G29ee@find-dependencies G29ee@find-dependencies) (set! G2b69@G29ec@rp G29ec@rp) (set! G2b68@G29ea@set-library-source-file-name! G29ea@set-library-source-file-name!) (set! G2b67@G29e8@set-library-visible?! G29e8@set-library-visible?!) (set! G2b66@G29e6@set-library-invoke-code! G29e6@set-library-invoke-code!) (set! G2b65@G29e4@set-library-visit-code! G29e4@set-library-visit-code!) (set! G2b64@G29e2@set-library-invoke-state! G29e2@set-library-invoke-state!) (set! G2b63@G29e0@set-library-visit-state! G29e0@set-library-visit-state!) (set! G2b62@G29de@set-library-env! G29de@set-library-env!) (set! G2b61@G29dc@set-library-subst! G29dc@set-library-subst!) (set! G2b60@G29da@set-library-inv*! G29da@set-library-inv*!) (set! G2b5f@G29d8@set-library-vis*! G29d8@set-library-vis*!) (set! G2b5e@G29d6@set-library-imp*! G29d6@set-library-imp*!) (set! G2b5d@G29d4@set-library-version! G29d4@set-library-version!) (set! G2b5c@G29d2@set-library-name! G29d2@set-library-name!) (set! G2b5b@G29d0@set-library-id! G29d0@set-library-id!) (set! G2b5a@G29ce@library-source-file-name G29ce@library-source-file-name) (set! G2b59@G29cc@library-visible? G29cc@library-visible?) (set! G2b58@G29ca@library-invoke-code G29ca@library-invoke-code) (set! G2b57@G29c8@library-visit-code G29c8@library-visit-code) (set! G2b56@G29c6@library-invoke-state G29c6@library-invoke-state) (set! G2b55@G29c4@library-visit-state G29c4@library-visit-state) (set! G2b54@G29c2@library-env G29c2@library-env) (set! G2b53@G29c0@library-subst G29c0@library-subst) (set! G2b52@G29be@library-inv* G29be@library-inv*) (set! G2b51@G29bc@library-vis* G29bc@library-vis*) (set! G2b50@G29ba@library-imp* G29ba@library-imp*) (set! G2b4f@G29b8@library-version G29b8@library-version) (set! G2b4e@G29b6@library-name G29b6@library-name) (set! G2b4d@G29b4@library-id G29b4@library-id) (set! G2b4c@G29b2@make-library G29b2@make-library) (set! G2b4b@G29b0@library? G29b0@library?) (set! G2b4a@G29ab@G29a3 G29ab@G29a3) (set! G2b49@G29a9@G29a4 G29a9@G29a4) (set! G2b48@G29a7@G29a2 G29a7@G29a2) (set! G2b47@G29a1@current-library-collection G29a1@current-library-collection) (set! G2b46@G299f@make-collection G299f@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b85@build-global-define G2c09@build-lambda G2c0b@build-case-lambda G2c0d@build-let G2c55@build-sequence G2c57@build-void G2c59@build-letrec G2c5b@build-letrec* G2c5d@build-library-letrec* G2c5f@build-receive) (begin (set! G2b85@build-global-define (lambda (G2c60@x) (G2c57@build-void))) (set! G2c09@build-lambda (lambda (G2c62@ae G2c63@vars G2c64@exp) (list 'lambda G2c63@vars G2c64@exp))) (set! G2c0b@build-case-lambda (lambda (G2c68@ae G2c69@vars* G2c6a@exp*) ((lambda (G2c6f@build-error G2c71@build-pred G2c73@build-apply G2c75@expand-case-lambda) (begin (set! G2c6f@build-error (lambda (G2ca4@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c71@build-pred (lambda (G2c8e@ae G2c8f@n G2c90@vars) (call-with-values (lambda () ((letrec ((G2c96@f (lambda (G2c98@vars G2c99@count) (if (pair? G2c98@vars) (G2c96@f (cdr G2c98@vars) (+ G2c99@count '1)) (if (null? G2c98@vars) (values G2c99@count '=) (values G2c99@count '>=)))))) G2c96@f) G2c90@vars '0)) (lambda (G2c9c@G2c94 G2c9d@G2c95) ((lambda (G2ca0@pred G2ca1@count) (list (list 'primitive G2ca0@pred) G2c8f@n (list 'quote G2ca1@count))) G2c9d@G2c95 G2c9c@G2c94))))) (set! G2c73@build-apply (lambda (G2c86@ae G2c87@g G2c88@vars G2c89@exp) (list '(primitive apply) (G2c09@build-lambda G2c86@ae G2c88@vars G2c89@exp) G2c87@g))) (set! G2c75@expand-case-lambda (lambda (G2c76@ae G2c77@vars G2c78@exp*) ((lambda (G2c7c@g G2c7d@n) (list 'lambda G2c7c@g (G2c0d@build-let G2c76@ae (list G2c7d@n) (list (list '(primitive length) G2c7c@g)) ((letrec ((G2c80@f (lambda (G2c82@vars* G2c83@exp*) (if (null? G2c82@vars*) (G2c6f@build-error G2c76@ae) (list 'if (G2c71@build-pred G2c76@ae G2c7d@n (car G2c82@vars*)) (G2c73@build-apply G2c76@ae G2c7c@g (car G2c82@vars*) (car G2c83@exp*)) (G2c80@f (cdr G2c82@vars*) (cdr G2c83@exp*))))))) G2c80@f) G2c69@vars* G2c78@exp*)))) (gensym) (gensym)))) (if (= (length G2c6a@exp*) '1) (G2c09@build-lambda G2c68@ae (car G2c69@vars*) (car G2c6a@exp*)) (G2c75@expand-case-lambda G2c68@ae G2c69@vars* G2c6a@exp*)))) '#f '#f '#f '#f))) (set! G2c0d@build-let (lambda (G2ca6@ae G2ca7@lhs* G2ca8@rhs* G2ca9@body) (cons (G2c09@build-lambda G2ca6@ae G2ca7@lhs* G2ca9@body) G2ca8@rhs*))) (set! G2c55@build-sequence (lambda (G2cae@ae G2caf@exps) ((letrec ((G2cb2@loop (lambda (G2cb4@exps) (if (null? (cdr G2cb4@exps)) (car G2cb4@exps) (if (equal? (car G2cb4@exps) (G2c57@build-void)) (G2cb2@loop (cdr G2cb4@exps)) (cons 'begin G2cb4@exps)))))) G2cb2@loop) G2caf@exps))) (set! G2c57@build-void (lambda () '((primitive void)))) (set! G2c59@build-letrec (lambda (G2cb6@ae G2cb7@vars G2cb8@val-exps G2cb9@body-exp) (if (null? G2cb7@vars) G2cb9@body-exp (list 'letrec (map list G2cb7@vars G2cb8@val-exps) G2cb9@body-exp)))) (set! G2c5b@build-letrec* (lambda (G2cbe@ae G2cbf@vars G2cc0@val-exps G2cc1@body-exp) (if (null? G2cbf@vars) G2cc1@body-exp (G2c0d@build-let G2cbe@ae G2cbf@vars (map (lambda (G2cc6@x) (list 'quote '#f)) G2cbf@vars) (G2c55@build-sequence G2cbe@ae (append (map (lambda (G2cc8@lhs G2cc9@rhs) (list 'set! G2cc8@lhs G2cc9@rhs)) G2cbf@vars G2cc0@val-exps) (list G2cc1@body-exp))))))) (set! G2c5d@build-library-letrec* (lambda (G2ccc@ae G2ccd@name G2cce@vars G2ccf@locs G2cd0@val-exps G2cd1@body-exp) (list 'library-letrec* G2ccd@name (map list G2cce@vars G2ccf@locs G2cd0@val-exps) G2cd1@body-exp))) (set! G2c5f@build-receive (lambda (G2cd8@ae G2cd9@vars G2cda@producer G2cdb@body*) (begin (display '"************** in ") (cons 'receive (cons G2cd9@vars (cons G2cda@producer G2cdb@body*)))))) (begin (set! G2ce9@G2c5f@build-receive G2c5f@build-receive) (set! G2ce8@G2c5d@build-library-letrec* G2c5d@build-library-letrec*) (set! G2ce7@G2c5b@build-letrec* G2c5b@build-letrec*) (set! G2ce6@G2c59@build-letrec G2c59@build-letrec) (set! G2ce5@G2c57@build-void G2c57@build-void) (set! G2ce4@G2c55@build-sequence G2c55@build-sequence) (set! G2ce3@G2c0d@build-let G2c0d@build-let) (set! G2ce2@G2c0b@build-case-lambda G2c0b@build-case-lambda) (set! G2ce1@G2c09@build-lambda G2c09@build-lambda) (set! G2ce0@G2b85@build-global-define G2b85@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cf6@set-cons G2cf8@set-union G2cfd@top-mark* G2cff@top-marked? G2d01@gen-lexical G2d03@gen-global G2d05@gen-label G2d07@gen-top-level-label G2d09@gen-define-label+loc G2d0b@gen-define-label G2d11@G2d0c G2d13@G2d0e G2d15@G2d0d G2d1a@rib? G2d1c@make-rib G2d1e@rib-sym* G2d20@rib-mark** G2d22@rib-label* G2d24@rib-sealed/freq G2d26@set-rib-sym*! G2d28@set-rib-mark**! G2d2a@set-rib-label*! G2d2c@set-rib-sealed/freq! G2d2e@make-empty-rib G2d30@extend-rib! G2d32@make-rib-map G2d34@seal-rib! G2d36@unseal-rib! G2d38@make-full-rib G2d3e@G2d39 G2d40@G2d3b G2d42@G2d3a G2d47@stx? G2d49@make-stx G2d4b@stx-expr G2d4d@stx-mark* G2d4f@stx-subst* G2d51@stx-ae* G2d53@set-stx-expr! G2d55@set-stx-mark*! G2d57@set-stx-subst*! G2d59@set-stx-ae*! G2d5b@rp G2d5d@datum->stx G2d5f@gen-mark G2d61@anti-mark G2d63@anti-mark? G2d65@join-wraps G2d67@mkstx G2d69@add-mark G2d6b@add-subst G2d6d@syntax-kind? G2d6f@syntax-vector->list G2d71@syntax-pair? G2d73@syntax-vector? G2d75@syntax-null? G2d77@syntax-list? G2d79@syntax-car G2d7b@syntax-cdr G2d7d@syntax->list G2d7f@id? G2d81@id->sym G2d83@same-marks? G2d85@bound-id=? G2d87@free-id=? G2d89@valid-bound-ids? G2d8b@distinct-bound-ids? G2d8d@bound-id-member? G2d8f@self-evaluating? G2d91@strip-annotations G2d93@strip G2d95@stx->datum G2d97@same-marks*? G2d99@id->label G2d9b@id->real-label G2d9d@label->binding G2d9f@make-binding G2da1@binding-type G2da3@binding-value G2da5@raise-unbound-error G2da7@syntax-type G2dbe@sanitize-binding G2dc0@make-variable-transformer G2dc2@variable-transformer? G2dc4@variable-transformer-procedure G2dc6@make-eval-transformer G2f4a@parse-define G2f4c@parse-define-syntax G2f4e@scheme-stx-hashtable G2f50@scheme-stx G2f52@lexical-var G2f54@lexical-mutable? G2f56@set-lexical-mutable! G2f58@add-lexical G2f5a@add-lexicals G2f5c@letrec-helper G2f5e@letrec-transformer G2f60@letrec*-transformer G2f62@fluid-let-syntax-transformer G2f64@type-descriptor-transformer G2f66@record-type-descriptor-transformer G2f68@record-constructor-descriptor-transformer G2f6a@when-transformer G2f6c@unless-transformer G2f6e@if-transformer G2f70@case-transformer G2f72@quote-transformer G2f74@case-lambda-transformer G2f76@lambda-transformer G2f78@bless G2f7a@with-syntax-macro G2f7c@invalid-fmls-error G2f7e@let-macro G2f80@let-values-macro G2f82@let*-values-macro G2f84@trace-lambda-macro G2f86@trace-define-macro G2f88@trace-define-syntax-macro G2f8a@trace-let/rec-syntax G2f8c@trace-let-syntax-macro G2f8e@trace-letrec-syntax-macro G2f90@guard-macro G2f92@define-enumeration-macro G2f94@time-macro G2f96@delay-macro G2f98@assert-macro G2f9a@endianness-macro G2f9c@identifier-syntax-macro G2f9e@do-macro G2fa0@let*-macro G2fa2@or-macro G2fa4@and-macro G2fa6@cond-macro G2fa8@do-include G2faa@include-macro G2fac@include-into-macro G2fae@syntax-rules-macro G2fb0@quasiquote-macro G2fb2@quasisyntax-macro G2fb4@define-struct-macro G2fb6@define-record-type-macro G2fb8@define-condition-type-macro G2fba@incorrect-usage-macro G2fbc@parameterize-transformer G2fbe@foreign-call-transformer G2fc0@convert-pattern G2fc2@syntax-dispatch G2fc4@ellipsis? G2fc6@underscore? G2fc8@verify-literals G2fca@syntax-case-transformer G2fcc@ellipsis-map G2fce@syntax-transformer G2fd0@core-macro-transformer G2fd2@file-options-macro G2fd4@symbol-macro G2fd6@macro-transformer G2fd8@local-macro-transformer G2fda@do-macro-call G2fdc@chi-macro G2fde@chi-local-macro G2fe0@chi-global-macro G2fe2@chi-expr* G2fe4@chi-application G2fe6@chi-expr G2fe8@chi-set! G2fea@verify-formals G2fec@chi-lambda-clause G2fee@chi-lambda-clause* G2ff0@chi-defun G2ff2@chi-rhs G2ff4@expand-interaction-rhs*/init* G2ff6@chi-rhs* G2ff8@find-bound=? G2ffa@find-dups G2ffc@chi-internal G2ffe@parse-module G3004@G2fff G3006@G3001 G3008@G3000 G300d@module-interface? G300f@make-module-interface G3011@module-interface-first-mark G3013@module-interface-exp-id-vec G3015@module-interface-exp-lab-vec G3017@set-module-interface-first-mark! G3019@set-module-interface-exp-id-vec! G301b@set-module-interface-exp-lab-vec! G301d@module-interface-exp-id* G301f@chi-internal-module G3021@chi-body* G3023@expand-transformer G3025@parse-exports G3027@parse-library-name G3029@parse-library G302b@parse-import-spec* G302d@make-top-rib G302f@make-collector G3031@inv-collector G3033@vis-collector G3035@imp-collector G3037@chi-library-internal G3039@chi-interaction-expr G303b@library-body-expander G303d@core-library-expander G303f@parse-top-level-program G3041@top-level-expander G3047@G3042 G3049@G3044 G304b@G3043 G3050@env? G3052@make-env G3054@env-names G3056@env-labels G3058@env-itc G305a@set-env-names! G305c@set-env-labels! G305e@set-env-itc! G3060@rp G3066@G3061 G3068@G3063 G306a@G3062 G306f@interaction-env? G3071@make-interaction-env G3073@interaction-env-rib G3075@interaction-env-r G3077@interaction-env-locs G3079@set-interaction-env-rib! G307b@set-interaction-env-r! G307d@set-interaction-env-locs! G307f@rp G3081@interaction-environment-symbols G3083@environment-symbols G3085@environment? G3087@environment G3089@null-environment G308b@scheme-report-environment G308d@expand G308f@eval G3091@library-expander G3093@boot-library-expand G3095@rev-map-append G3097@build-exports G3099@make-export-subst G309b@make-export-env/macros G309d@generate-temporaries G309f@free-identifier=? G30a1@bound-identifier=? G30a3@extract-position-condition G30a5@syntax-error G30a7@extract-trace G30a9@syntax-violation* G30ab@syntax-violation G30ad@identifier? G30af@datum->syntax G30b1@syntax->datum G30b3@compile-r6rs-top-level G30b5@pre-compile-r6rs-top-level G30b7@interaction-environment G30b9@top-level-context) (begin (set! G2cf6@set-cons (lambda (G30ba@x G30bb@ls) (if (memq G30ba@x G30bb@ls) G30bb@ls (cons G30ba@x G30bb@ls)))) (set! G2cf8@set-union (lambda (G30be@ls1 G30bf@ls2) (if (null? G30be@ls1) G30bf@ls2 (if (memq (car G30be@ls1) G30bf@ls2) (G2cf8@set-union (cdr G30be@ls1) G30bf@ls2) (cons (car G30be@ls1) (G2cf8@set-union (cdr G30be@ls1) G30bf@ls2)))))) (set! G2cfd@top-mark* '(top)) (set! G2cff@top-marked? (lambda (G30c2@m*) (memq 'top G30c2@m*))) (set! G2d01@gen-lexical (lambda (G30c4@sym) (if (symbol? G30c4@sym) (gensym G30c4@sym) (if (G2d47@stx? G30c4@sym) (G2d01@gen-lexical (G2d81@id->sym G30c4@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G30c4@sym))))) (set! G2d03@gen-global (lambda (G30c6@x) (G2d01@gen-lexical G30c6@x))) (set! G2d05@gen-label (lambda (G30c8@_) (gensym))) (set! G2d07@gen-top-level-label (lambda (G30ca@id G30cb@rib) ((lambda (G30cf@find) (begin (set! G30cf@find (lambda (G30da@sym G30db@mark* G30dc@sym* G30dd@mark** G30de@label*) (if (pair? G30dc@sym*) (begin '#f (if (if (eq? G30da@sym (car G30dc@sym*)) (begin '#f (G2d83@same-marks? G30db@mark* (car G30dd@mark**))) '#f) (car G30de@label*) (G30cf@find G30da@sym G30db@mark* (cdr G30dc@sym*) (cdr G30dd@mark**) (cdr G30de@label*)))) '#f))) ((lambda (G30d0@sym G30d1@mark*) ((lambda (G30d4@sym*) ((lambda (G30d6@t) (if G30d6@t ((lambda (G30d8@label) (if (G2b7d@G2a14@imported-label->binding G30d8@label) (gensym) G30d8@label)) G30d6@t) (gensym))) (if (memq G30d0@sym (G2d1e@rib-sym* G30cb@rib)) (begin '#f (G30cf@find G30d0@sym G30d1@mark* G30d4@sym* (G2d20@rib-mark** G30cb@rib) (G2d22@rib-label* G30cb@rib))) '#f))) (G2d1e@rib-sym* G30cb@rib))) (G2d81@id->sym G30ca@id) (G2d4d@stx-mark* G30ca@id)))) '#f))) (set! G2d09@gen-define-label+loc (lambda (G30e4@id G30e5@rib) ((lambda (G30e8@t) (if G30e8@t ((lambda (G30ea@env) ((lambda (G30ec@label G30ed@locs) (values G30ec@label ((lambda (G30f0@t) (if G30f0@t (cdr G30f0@t) ((lambda (G30f2@loc) (begin (G307d@set-interaction-env-locs! G30ea@env (cons (cons G30ec@label G30f2@loc) G30ed@locs)) G30f2@loc)) (G2d01@gen-lexical G30e4@id)))) (assq G30ec@label G30ed@locs)))) (G2d07@gen-top-level-label G30e4@id G30e5@rib) (G3077@interaction-env-locs G30ea@env))) G30e8@t) (values (gensym) (G2d01@gen-lexical G30e4@id)))) (G30b9@top-level-context)))) (set! G2d0b@gen-define-label (lambda (G30f4@id G30f5@rib) (if (G30b9@top-level-context) (G2d07@gen-top-level-label G30f4@id G30f5@rib) (gensym)))) (set! G2d11@G2d0c (make-record-type-descriptor 'rib '#f 'G2d0f '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq)))) (set! G2d13@G2d0e '#f) (set! G2d15@G2d0d (make-record-constructor-descriptor G2d11@G2d0c '#f G2d13@G2d0e)) (set! G2d1a@rib? (record-predicate G2d11@G2d0c)) (set! G2d1c@make-rib (record-constructor G2d15@G2d0d)) (set! G2d1e@rib-sym* (record-accessor G2d11@G2d0c '0)) (set! G2d20@rib-mark** (record-accessor G2d11@G2d0c '1)) (set! G2d22@rib-label* (record-accessor G2d11@G2d0c '2)) (set! G2d24@rib-sealed/freq (record-accessor G2d11@G2d0c '3)) (set! G2d26@set-rib-sym*! (record-mutator G2d11@G2d0c '0)) (set! G2d28@set-rib-mark**! (record-mutator G2d11@G2d0c '1)) (set! G2d2a@set-rib-label*! (record-mutator G2d11@G2d0c '2)) (set! G2d2c@set-rib-sealed/freq! (record-mutator G2d11@G2d0c '3)) (set! G2d2e@make-empty-rib (lambda () (G2d1c@make-rib '() '() '() '#f))) (set! G2d30@extend-rib! (lambda (G30f8@rib G30f9@id G30fa@label) ((lambda (G30ff@find) (begin (set! G30ff@find (lambda (G310a@sym G310b@mark* G310c@sym* G310d@mark** G310e@label*) (if (pair? G310c@sym*) (begin '#f (if (if (eq? G310a@sym (car G310c@sym*)) (begin '#f (G2d83@same-marks? G310b@mark* (car G310d@mark**))) '#f) G310e@label* (G30ff@find G310a@sym G310b@mark* (cdr G310c@sym*) (cdr G310d@mark**) (cdr G310e@label*)))) '#f))) (begin (if (G2d24@rib-sealed/freq G30f8@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30f8@rib) (void)) ((lambda (G3100@sym G3101@mark*) ((lambda (G3104@sym*) ((lambda (G3106@t) (if G3106@t ((lambda (G3108@p) (if (eq? G30fa@label (car G3108@p)) (void) (if (G30b9@top-level-context) (set-car! G3108@p G30fa@label) (G30ab@syntax-violation '#f '"cannot redefine" G30f9@id)))) G3106@t) (begin (G2d26@set-rib-sym*! G30f8@rib (cons G3100@sym G3104@sym*)) (G2d28@set-rib-mark**! G30f8@rib (cons G3101@mark* (G2d20@rib-mark** G30f8@rib))) (G2d2a@set-rib-label*! G30f8@rib (cons G30fa@label (G2d22@rib-label* G30f8@rib)))))) (if (memq G3100@sym (G2d1e@rib-sym* G30f8@rib)) (begin '#f (G30ff@find G3100@sym G3101@mark* G3104@sym* (G2d20@rib-mark** G30f8@rib) (G2d22@rib-label* G30f8@rib))) '#f))) (G2d1e@rib-sym* G30f8@rib))) (G2d81@id->sym G30f9@id) (G2d4d@stx-mark* G30f9@id))))) '#f))) (set! G2d32@make-rib-map (lambda (G3114@sym*) ((lambda (G3116@ht) ((letrec ((G3118@f (lambda (G311a@i G311b@sym*) (if (null? G311b@sym*) G3116@ht (begin (hashtable-update! G3116@ht (car G311b@sym*) (lambda (G311e@x) (cons G311a@i G311e@x)) '()) (G3118@f (+ G311a@i '1) (cdr G311b@sym*))))))) G3118@f) '0 G3114@sym*)) (make-eq-hashtable)))) (set! G2d34@seal-rib! (lambda (G3120@rib) ((lambda (G3122@sym*) (if (null? G3122@sym*) (void) (begin (G2d26@set-rib-sym*! G3120@rib (list->vector G3122@sym*)) (G2d28@set-rib-mark**! G3120@rib (list->vector (G2d20@rib-mark** G3120@rib))) (G2d2a@set-rib-label*! G3120@rib (list->vector (G2d22@rib-label* G3120@rib))) (G2d2c@set-rib-sealed/freq! G3120@rib (G2d32@make-rib-map G3122@sym*))))) (G2d1e@rib-sym* G3120@rib)))) (set! G2d36@unseal-rib! (lambda (G3124@rib) (if (G2d24@rib-sealed/freq G3124@rib) (begin (G2d2c@set-rib-sealed/freq! G3124@rib '#f) (G2d26@set-rib-sym*! G3124@rib (vector->list (G2d1e@rib-sym* G3124@rib))) (G2d28@set-rib-mark**! G3124@rib (vector->list (G2d20@rib-mark** G3124@rib))) (G2d2a@set-rib-label*! G3124@rib (vector->list (G2d22@rib-label* G3124@rib)))) (void)))) (set! G2d38@make-full-rib (lambda (G3126@id* G3127@label*) ((lambda (G312a@r) (begin (G2d34@seal-rib! G312a@r) G312a@r)) (G2d1c@make-rib (map G2d81@id->sym G3126@id*) (map G2d4d@stx-mark* G3126@id*) G3127@label* '#f)))) (set! G2d3e@G2d39 (make-record-type-descriptor 'stx '#f 'G2d3c '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d40@G2d3b '#f) (set! G2d42@G2d3a (make-record-constructor-descriptor G2d3e@G2d39 '#f G2d40@G2d3b)) (set! G2d47@stx? (record-predicate G2d3e@G2d39)) (set! G2d49@make-stx (record-constructor G2d42@G2d3a)) (set! G2d4b@stx-expr (record-accessor G2d3e@G2d39 '0)) (set! G2d4d@stx-mark* (record-accessor G2d3e@G2d39 '1)) (set! G2d4f@stx-subst* (record-accessor G2d3e@G2d39 '2)) (set! G2d51@stx-ae* (record-accessor G2d3e@G2d39 '3)) (set! G2d53@set-stx-expr! (record-mutator G2d3e@G2d39 '0)) (set! G2d55@set-stx-mark*! (record-mutator G2d3e@G2d39 '1)) (set! G2d57@set-stx-subst*! (record-mutator G2d3e@G2d39 '2)) (set! G2d59@set-stx-ae*! (record-mutator G2d3e@G2d39 '3)) (set! G2d5b@rp (G28dc@G280c@make-record-printer 'stx (lambda (G312c@x G312d@p) (begin (display '"#<syntax " G312d@p) (write (G2d95@stx->datum G312c@x) G312d@p) ((lambda (G3130@expr) (if (G28d7@G2802@annotation? G3130@expr) ((lambda (G3132@src) (if (pair? G3132@src) (begin (display '" [" G312d@p) (display (cdr G3132@src) G312d@p) (display '" of " G312d@p) (display (car G3132@src) G312d@p) (display '"]" G312d@p)) (void))) (G28d8@G2804@annotation-source G3130@expr)) (void))) (G2d4b@stx-expr G312c@x)) (display '">" G312d@p))))) (set! G2d5d@datum->stx (lambda (G3134@id G3135@datum) (G2d49@make-stx G3135@datum (G2d4d@stx-mark* G3134@id) (G2d4f@stx-subst* G3134@id) (G2d51@stx-ae* G3134@id)))) (set! G2d5f@gen-mark (lambda () (string '#\m))) (set! G2d61@anti-mark '#f) (set! G2d63@anti-mark? not) (set! G2d65@join-wraps (lambda (G3138@m1* G3139@s1* G313a@ae1* G313b@e) ((lambda (G3141@cancel) (begin (set! G3141@cancel (lambda (G3148@ls1 G3149@ls2) ((letrec ((G314c@f (lambda (G314e@x G314f@ls1) (if (null? G314f@ls1) (cdr G3149@ls2) (cons G314e@x (G314c@f (car G314f@ls1) (cdr G314f@ls1))))))) G314c@f) (car G3148@ls1) (cdr G3148@ls1)))) ((lambda (G3142@m2* G3143@s2* G3144@ae2*) (if (if (not (null? G3138@m1*)) (if (not (null? G3142@m2*)) (begin '#f (G2d63@anti-mark? (car G3142@m2*))) '#f) '#f) (values (G3141@cancel G3138@m1* G3142@m2*) (G3141@cancel G3139@s1* G3143@s2*) (G3141@cancel G313a@ae1* G3144@ae2*)) (values (append G3138@m1* G3142@m2*) (append G3139@s1* G3143@s2*) (append G313a@ae1* G3144@ae2*)))) (G2d4d@stx-mark* G313b@e) (G2d4f@stx-subst* G313b@e) (G2d51@stx-ae* G313b@e)))) '#f))) (set! G2d67@mkstx (lambda (G3152@e G3153@m* G3154@s* G3155@ae*) (if (G2d47@stx? G3152@e) (call-with-values (lambda () (G2d65@join-wraps G3153@m* G3154@s* G3155@ae* G3152@e)) (lambda (G315d@G315a G315e@G315b G315f@G315c) ((lambda (G3163@ae* G3164@s* G3165@m*) (G2d49@make-stx (G2d4b@stx-expr G3152@e) G3165@m* G3164@s* G3163@ae*)) G315f@G315c G315e@G315b G315d@G315a))) (G2d49@make-stx G3152@e G3153@m* G3154@s* G3155@ae*)))) (set! G2d69@add-mark (lambda (G3169@m G316a@e G316b@ae) (G2d67@mkstx G316a@e (list G3169@m) '(shift) (list G316b@ae)))) (set! G2d6b@add-subst (lambda (G316f@subst G3170@e) (G2d67@mkstx G3170@e '() (list G316f@subst) '()))) (set! G2d6d@syntax-kind? (lambda (G3173@x G3174@p?) (if (G2d47@stx? G3173@x) (G2d6d@syntax-kind? (G2d4b@stx-expr G3173@x) G3174@p?) (if (G28d7@G2802@annotation? G3173@x) (G2d6d@syntax-kind? (G28d9@G2806@annotation-expression G3173@x) G3174@p?) (G3174@p? G3173@x))))) (set! G2d6f@syntax-vector->list (lambda (G3177@x) (if (G2d47@stx? G3177@x) ((lambda (G3179@ls G317a@m* G317b@s* G317c@ae*) (map (lambda (G3181@x) (G2d67@mkstx G3181@x G317a@m* G317b@s* G317c@ae*)) G3179@ls)) (G2d6f@syntax-vector->list (G2d4b@stx-expr G3177@x)) (G2d4d@stx-mark* G3177@x) (G2d4f@stx-subst* G3177@x) (G2d51@stx-ae* G3177@x)) (if (G28d7@G2802@annotation? G3177@x) (G2d6f@syntax-vector->list (G28d9@G2806@annotation-expression G3177@x)) (if (vector? G3177@x) (vector->list G3177@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3177@x)))))) (set! G2d71@syntax-pair? (lambda (G3183@x) (G2d6d@syntax-kind? G3183@x pair?))) (set! G2d73@syntax-vector? (lambda (G3185@x) (G2d6d@syntax-kind? G3185@x vector?))) (set! G2d75@syntax-null? (lambda (G3187@x) (G2d6d@syntax-kind? G3187@x null?))) (set! G2d77@syntax-list? (lambda (G3189@x) ((lambda (G318b@t) (if G318b@t G318b@t (begin '#f (if (G2d71@syntax-pair? G3189@x) (begin '#f (G2d77@syntax-list? (G2d7b@syntax-cdr G3189@x))) '#f)))) (G2d75@syntax-null? G3189@x)))) (set! G2d79@syntax-car (lambda (G318d@x) (if (G2d47@stx? G318d@x) (G2d67@mkstx (G2d79@syntax-car (G2d4b@stx-expr G318d@x)) (G2d4d@stx-mark* G318d@x) (G2d4f@stx-subst* G318d@x) (G2d51@stx-ae* G318d@x)) (if (G28d7@G2802@annotation? G318d@x) (G2d79@syntax-car (G28d9@G2806@annotation-expression G318d@x)) (if (pair? G318d@x) (car G318d@x) (assertion-violation 'syntax-car '"BUG: not a pair" G318d@x)))))) (set! G2d7b@syntax-cdr (lambda (G318f@x) (if (G2d47@stx? G318f@x) (G2d67@mkstx (G2d7b@syntax-cdr (G2d4b@stx-expr G318f@x)) (G2d4d@stx-mark* G318f@x) (G2d4f@stx-subst* G318f@x) (G2d51@stx-ae* G318f@x)) (if (G28d7@G2802@annotation? G318f@x) (G2d7b@syntax-cdr (G28d9@G2806@annotation-expression G318f@x)) (if (pair? G318f@x) (cdr G318f@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G318f@x)))))) (set! G2d7d@syntax->list (lambda (G3191@x) (if (G2d71@syntax-pair? G3191@x) (cons (G2d79@syntax-car G3191@x) (G2d7d@syntax->list (G2d7b@syntax-cdr G3191@x))) (if (G2d75@syntax-null? G3191@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3191@x))))) (set! G2d7f@id? (lambda (G3193@x) (if (G2d47@stx? G3193@x) (begin '#f ((lambda (G3195@expr) (symbol? (if (G28d7@G2802@annotation? G3195@expr) (G28d6@G2800@annotation-stripped G3195@expr) G3195@expr))) (G2d4b@stx-expr G3193@x))) '#f))) (set! G2d81@id->sym (lambda (G3197@x) (begin (if (G2d47@stx? G3197@x) (void) (error 'id->sym '"BUG in ikarus: not an id" G3197@x)) ((lambda (G3199@expr) ((lambda (G319b@sym) (if (symbol? G319b@sym) G319b@sym (error 'id->sym '"BUG in ikarus: not an id" G3197@x))) (if (G28d7@G2802@annotation? G3199@expr) (G28d6@G2800@annotation-stripped G3199@expr) G3199@expr))) (G2d4b@stx-expr G3197@x))))) (set! G2d83@same-marks? (lambda (G319d@x G319e@y) ((lambda (G31a1@t) (if G31a1@t G31a1@t (begin '#f (if (pair? G319d@x) (if (pair? G319e@y) (if (eq? (car G319d@x) (car G319e@y)) (begin '#f (G2d83@same-marks? (cdr G319d@x) (cdr G319e@y))) '#f) '#f) '#f)))) (if (null? G319d@x) (begin '#f (null? G319e@y)) '#f)))) (set! G2d85@bound-id=? (lambda (G31a3@x G31a4@y) (if (eq? (G2d81@id->sym G31a3@x) (G2d81@id->sym G31a4@y)) (begin '#f (G2d83@same-marks? (G2d4d@stx-mark* G31a3@x) (G2d4d@stx-mark* G31a4@y))) '#f))) (set! G2d87@free-id=? (lambda (G31a7@i G31a8@j) ((lambda (G31ab@t0 G31ac@t1) (if ((lambda (G31af@t) (if G31af@t G31af@t (begin '#f G31ac@t1))) G31ab@t0) (eq? G31ab@t0 G31ac@t1) (eq? (G2d81@id->sym G31a7@i) (G2d81@id->sym G31a8@j)))) (G2d9b@id->real-label G31a7@i) (G2d9b@id->real-label G31a8@j)))) (set! G2d89@valid-bound-ids? (lambda (G31b1@id*) (if (for-all G2d7f@id? G31b1@id*) (begin '#f (G2d8b@distinct-bound-ids? G31b1@id*)) '#f))) (set! G2d8b@distinct-bound-ids? (lambda (G31b3@id*) ((lambda (G31b5@t) (if G31b5@t G31b5@t (begin '#f (if (not (G2d8d@bound-id-member? (car G31b3@id*) (cdr G31b3@id*))) (begin '#f (G2d8b@distinct-bound-ids? (cdr G31b3@id*))) '#f)))) (null? G31b3@id*)))) (set! G2d8d@bound-id-member? (lambda (G31b7@id G31b8@id*) (if (pair? G31b8@id*) (begin '#f ((lambda (G31bb@t) (if G31bb@t G31bb@t (begin '#f (G2d8d@bound-id-member? G31b7@id (cdr G31b8@id*))))) (G2d85@bound-id=? G31b7@id (car G31b8@id*)))) '#f))) (set! G2d8f@self-evaluating? (lambda (G31bd@x) ((lambda (G31bf@t) (if G31bf@t G31bf@t ((lambda (G31c1@t) (if G31c1@t G31c1@t ((lambda (G31c3@t) (if G31c3@t G31c3@t ((lambda (G31c5@t) (if G31c5@t G31c5@t (begin '#f (bytevector? G31bd@x)))) (boolean? G31bd@x)))) (char? G31bd@x)))) (string? G31bd@x)))) (number? G31bd@x)))) (set! G2d91@strip-annotations (lambda (G31c7@x) (if (pair? G31c7@x) (cons (G2d91@strip-annotations (car G31c7@x)) (G2d91@strip-annotations (cdr G31c7@x))) (if (vector? G31c7@x) (vector-map G2d91@strip-annotations G31c7@x) (if (G28d7@G2802@annotation? G31c7@x) (G28d6@G2800@annotation-stripped G31c7@x) G31c7@x))))) (set! G2d93@strip (lambda (G31c9@x G31ca@m*) (if (G2cff@top-marked? G31ca@m*) (if ((lambda (G31cd@t) (if G31cd@t G31cd@t ((lambda (G31cf@t) (if G31cf@t G31cf@t (begin '#f (if (vector? G31c9@x) (if (> (vector-length G31c9@x) '0) (begin '#f (G28d7@G2802@annotation? (vector-ref G31c9@x '0))) '#f) '#f)))) (if (pair? G31c9@x) (begin '#f (G28d7@G2802@annotation? (car G31c9@x))) '#f)))) (G28d7@G2802@annotation? G31c9@x)) (G2d91@strip-annotations G31c9@x) G31c9@x) ((letrec ((G31d1@f (lambda (G31d3@x) (if (G2d47@stx? G31d3@x) (G2d93@strip (G2d4b@stx-expr G31d3@x) (G2d4d@stx-mark* G31d3@x)) (if (G28d7@G2802@annotation? G31d3@x) (G28d6@G2800@annotation-stripped G31d3@x) (if (pair? G31d3@x) ((lambda (G31d5@a G31d6@d) (if (if (eq? G31d5@a (car G31d3@x)) (begin '#f (eq? G31d6@d (cdr G31d3@x))) '#f) G31d3@x (cons G31d5@a G31d6@d))) (G31d1@f (car G31d3@x)) (G31d1@f (cdr G31d3@x))) (if (vector? G31d3@x) ((lambda (G31d9@old) ((lambda (G31db@new) (if (for-all eq? G31d9@old G31db@new) G31d3@x (list->vector G31db@new))) (map G31d1@f G31d9@old))) (vector->list G31d3@x)) G31d3@x))))))) G31d1@f) G31c9@x)))) (set! G2d95@stx->datum (lambda (G31dd@x) (G2d93@strip G31dd@x '()))) (set! G2d97@same-marks*? (lambda (G31df@mark* G31e0@mark** G31e1@si) (if (null? G31e1@si) '#f (if (G2d83@same-marks? G31df@mark* (vector-ref G31e0@mark** (car G31e1@si))) (car G31e1@si) (G2d97@same-marks*? G31df@mark* G31e0@mark** (cdr G31e1@si)))))) (set! G2d99@id->label (lambda (G31e5@id) ((lambda (G31e7@t) (if G31e7@t G31e7@t (begin '#f ((lambda (G31e9@t) (if G31e9@t ((lambda (G31eb@env) ((lambda (G31ed@rib) (call-with-values (lambda () (G2d09@gen-define-label+loc G31e5@id G31ed@rib)) (lambda (G31f1@G31ef G31f2@G31f0) ((lambda (G31f5@loc_ G31f6@lab) (begin (G2d30@extend-rib! G31ed@rib G31e5@id G31f6@lab) G31f6@lab)) G31f2@G31f0 G31f1@G31ef)))) (G3073@interaction-env-rib G31eb@env))) G31e9@t) '#f)) (G30b9@top-level-context))))) (G2d9b@id->real-label G31e5@id)))) (set! G2d9b@id->real-label (lambda (G31f9@id) ((lambda (G31fb@sym) ((letrec ((G31fd@search (lambda (G31ff@subst* G3200@mark*) (if (null? G31ff@subst*) '#f (if (eq? (car G31ff@subst*) 'shift) (G31fd@search (cdr G31ff@subst*) (cdr G3200@mark*)) ((lambda (G3203@rib) ((lambda (G3205@t) (if G3205@t ((lambda (G3207@ht) ((lambda (G3209@si) ((lambda (G320b@i) (if G320b@i (vector-ref (G2d22@rib-label* G3203@rib) G320b@i) (G31fd@search (cdr G31ff@subst*) G3200@mark*))) (if G3209@si (begin '#f (G2d97@same-marks*? G3200@mark* (G2d20@rib-mark** G3203@rib) (reverse G3209@si))) '#f))) (hashtable-ref G3207@ht G31fb@sym '#f))) G3205@t) ((letrec ((G320d@f (lambda (G320f@sym* G3210@mark** G3211@label*) (if (null? G320f@sym*) (G31fd@search (cdr G31ff@subst*) G3200@mark*) (if (if (eq? (car G320f@sym*) G31fb@sym) (begin '#f (G2d83@same-marks? (car G3210@mark**) G3200@mark*)) '#f) (car G3211@label*) (G320d@f (cdr G320f@sym*) (cdr G3210@mark**) (cdr G3211@label*))))))) G320d@f) (G2d1e@rib-sym* G3203@rib) (G2d20@rib-mark** G3203@rib) (G2d22@rib-label* G3203@rib)))) (G2d24@rib-sealed/freq G3203@rib))) (car G31ff@subst*))))))) G31fd@search) (G2d4f@stx-subst* G31f9@id) (G2d4d@stx-mark* G31f9@id))) (G2d81@id->sym G31f9@id)))) (set! G2d9d@label->binding (lambda (G3215@x G3216@r) ((lambda (G3219@t) (if G3219@t ((lambda (G321b@b) (if (if (pair? G321b@b) (begin '#f (eq? (car G321b@b) '$core-rtd)) '#f) (cons '$rtd (map G2f78@bless (cdr G321b@b))) (if (if (pair? G321b@b) (begin '#f (eq? (car G321b@b) 'global-rtd)) '#f) ((lambda (G321d@lib G321e@loc) (cons '$rtd (symbol-value G321e@loc))) (cadr G321b@b) (cddr G321b@b)) G321b@b))) G3219@t) ((lambda (G3221@t) (if G3221@t (cdr G3221@t) ((lambda (G3223@t) (if G3223@t ((lambda (G3225@env) ((lambda (G3227@t) (if G3227@t ((lambda (G3229@p) (cons* 'lexical (cdr G3229@p) '#f)) G3227@t) '(displaced-lexical . #f))) (assq G3215@x (G3077@interaction-env-locs G3225@env)))) G3223@t) '(displaced-lexical . #f))) (G30b9@top-level-context)))) (assq G3215@x G3216@r)))) (G2b7d@G2a14@imported-label->binding G3215@x)))) (set! G2d9f@make-binding cons) (set! G2da1@binding-type car) (set! G2da3@binding-value cdr) (set! G2da5@raise-unbound-error (lambda (G322b@id) (G30a9@syntax-violation* '#f '"unbound identifier" G322b@id (G4b36@G4ad6@make-undefined-violation)))) (set! G2da7@syntax-type (lambda (G322d@e G322e@r) (if (G2d7f@id? G322d@e) ((lambda (G3231@id) ((lambda (G3233@label) ((lambda (G3235@b) ((lambda (G3237@type) ((lambda () (begin (if G3233@label (void) (G2da5@raise-unbound-error G3231@id)) ((lambda (G3239@t) (if (memv G3239@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module $core-rtd library mutable)) (values G3237@type (G2da3@binding-value G3235@b) G3231@id) (values 'other '#f '#f))) G3237@type))))) (G2da1@binding-type G3235@b))) (G2d9d@label->binding G3233@label G322e@r))) (G2d99@id->label G3231@id))) G322d@e) (if (G2d71@syntax-pair? G322d@e) ((lambda (G323a@id) (if (G2d7f@id? G323a@id) ((lambda (G323c@label) ((lambda (G323e@b) ((lambda (G3240@type) ((lambda () (begin (if G323c@label (void) (G2da5@raise-unbound-error G323a@id)) ((lambda (G3242@t) (if (memv G3242@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import $core-rtd)) (values G3240@type (G2da3@binding-value G323e@b) G323a@id) (values 'call '#f '#f))) G3240@type))))) (G2da1@binding-type G323e@b))) (G2d9d@label->binding G323c@label G322e@r))) (G2d99@id->label G323a@id)) (values 'call '#f '#f))) (G2d79@syntax-car G322d@e)) ((lambda (G3243@d) (if (G2d8f@self-evaluating? G3243@d) (values 'constant G3243@d '#f) (values 'other '#f '#f))) (G2d95@stx->datum G322d@e)))))) (set! G2dbe@sanitize-binding (lambda (G3245@x G3246@src) (if (procedure? G3245@x) (cons* 'local-macro G3245@x G3246@src) (if (if (pair? G3245@x) (if (eq? (car G3245@x) 'macro!) (begin '#f (procedure? (cdr G3245@x))) '#f) '#f) (cons* 'local-macro! (cdr G3245@x) G3246@src) (if (if (pair? G3245@x) (begin '#f (eq? (car G3245@x) '$rtd)) '#f) G3245@x (assertion-violation 'expand '"invalid transformer" G3245@x)))))) (set! G2dc0@make-variable-transformer (lambda (G3249@x) (if (procedure? G3249@x) (cons 'macro! G3249@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3249@x)))) (set! G2dc2@variable-transformer? (lambda (G324b@x) (if (pair? G324b@x) (if (eq? (car G324b@x) 'macro!) (begin '#f (procedure? (cdr G324b@x))) '#f) '#f))) (set! G2dc4@variable-transformer-procedure (lambda (G324d@x) (if (G2dc2@variable-transformer? G324d@x) (cdr G324d@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G324d@x)))) (set! G2dc6@make-eval-transformer (lambda (G324f@x) (G2dbe@sanitize-binding (eval-core (G2942@G28eb@expanded->core G324f@x)) G324f@x))) (set! G2f4a@parse-define (lambda (G3251@x) ((lambda (G3253@t) ((lambda (G3255@ls/false) (if (if G3255@ls/false (begin '#f (apply (lambda (G3257@id G3258@fmls G3259@b G325a@b*) (G2d7f@id? G3257@id)) G3255@ls/false)) '#f) (apply (lambda (G325f@id G3260@fmls G3261@b G3262@b*) (begin (G2fea@verify-formals G3260@fmls G3251@x) (values G325f@id (cons 'defun (cons G3260@fmls (cons G3261@b G3262@b*)))))) G3255@ls/false) ((lambda (G3267@t) ((lambda (G3269@ls/false) (if (if G3269@ls/false (begin '#f (apply (lambda (G326b@id G326c@val) (G2d7f@id? G326b@id)) G3269@ls/false)) '#f) (apply (lambda (G326f@id G3270@val) (values G326f@id (cons 'expr G3270@val))) G3269@ls/false) ((lambda (G3273@t) ((lambda (G3275@ls/false) (if (if G3275@ls/false (begin '#f (apply (lambda (G3277@id) (G2d7f@id? G3277@id)) G3275@ls/false)) '#f) (apply (lambda (G3279@id) (values G3279@id (cons 'expr (G2f78@bless '(void))))) G3275@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3273@t))) (G2fc2@syntax-dispatch G3273@t '(_ any)))) G3267@t))) (G2fc2@syntax-dispatch G3267@t '(_ any any)))) G3253@t))) (G2fc2@syntax-dispatch G3253@t '(_ (any . any) any . each-any)))) G3251@x))) (set! G2f4c@parse-define-syntax (lambda (G327b@x) ((lambda (G327d@t) ((lambda (G327f@ls/false) (if (if G327f@ls/false (begin '#f (apply (lambda (G3281@id G3282@val) (G2d7f@id? G3281@id)) G327f@ls/false)) '#f) (apply (lambda (G3285@id G3286@val) (values G3285@id G3286@val)) G327f@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G327d@t))) (G2fc2@syntax-dispatch G327d@t '(_ any any)))) G327b@x))) (set! G2f4e@scheme-stx-hashtable (make-eq-hashtable)) (set! G2f50@scheme-stx (lambda (G3289@sym) ((lambda (G328b@t) (if G328b@t G328b@t (begin '#f ((lambda (G328d@subst) ((lambda (G328f@stx) ((lambda (G3291@stx) ((lambda () (begin (hashtable-set! G2f4e@scheme-stx-hashtable G3289@sym G3291@stx) G3291@stx)))) ((lambda (G3293@t) (if G3293@t ((lambda (G3295@x) ((lambda (G3297@name G3298@label) (G2d6b@add-subst (G2d1c@make-rib (list G3297@name) (list G2cfd@top-mark*) (list G3298@label) '#f) G328f@stx)) (car G3295@x) (cdr G3295@x))) G3293@t) G328f@stx)) (assq G3289@sym G328d@subst)))) (G2d49@make-stx G3289@sym G2cfd@top-mark* '() '()))) (G2b53@G29c0@library-subst (G2b77@G2a08@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G2f4e@scheme-stx-hashtable G3289@sym '#f)))) (set! G2f52@lexical-var car) (set! G2f54@lexical-mutable? cdr) (set! G2f56@set-lexical-mutable! set-cdr!) (set! G2f58@add-lexical (lambda (G329b@lab G329c@lex G329d@r) (cons (cons* G329b@lab 'lexical G329c@lex '#f) G329d@r))) (set! G2f5a@add-lexicals (lambda (G32a1@lab* G32a2@lex* G32a3@r) (if (null? G32a1@lab*) G32a3@r (G2f5a@add-lexicals (cdr G32a1@lab*) (cdr G32a2@lex*) (G2f58@add-lexical (car G32a1@lab*) (car G32a2@lex*) G32a3@r))))) (set! G2f5c@letrec-helper (lambda (G32a7@e G32a8@r G32a9@mr G32aa@build) ((lambda (G32af@t) ((lambda (G32b1@ls/false) (if G32b1@ls/false (apply (lambda (G32b3@lhs* G32b4@rhs* G32b5@b G32b6@b*) (if (not (G2d89@valid-bound-ids? G32b3@lhs*)) (G2f7c@invalid-fmls-error G32a7@e G32b3@lhs*) ((lambda (G32bb@lex* G32bc@lab*) ((lambda (G32bf@rib G32c0@r) ((lambda (G32c3@body G32c4@rhs*) (G32aa@build '#f G32bb@lex* G32c4@rhs* G32c3@body)) (G2ffc@chi-internal (G2d6b@add-subst G32bf@rib (cons G32b5@b G32b6@b*)) G32c0@r G32a9@mr) (G2fe2@chi-expr* (map (lambda (G32c7@x) (G2d6b@add-subst G32bf@rib G32c7@x)) G32b4@rhs*) G32c0@r G32a9@mr))) (G2d38@make-full-rib G32b3@lhs* G32bc@lab*) (G2f5a@add-lexicals G32bc@lab* G32bb@lex* G32a8@r))) (map G2d01@gen-lexical G32b3@lhs*) (map G2d05@gen-label G32b3@lhs*)))) G32b1@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G32af@t))) (G2fc2@syntax-dispatch G32af@t '(_ #(each (any any)) any . each-any)))) G32a7@e))) (set! G2f5e@letrec-transformer (lambda (G32c9@e G32ca@r G32cb@mr) (G2f5c@letrec-helper G32c9@e G32ca@r G32cb@mr G2ce6@G2c59@build-letrec))) (set! G2f60@letrec*-transformer (lambda (G32cf@e G32d0@r G32d1@mr) (G2f5c@letrec-helper G32cf@e G32d0@r G32d1@mr G2ce7@G2c5b@build-letrec*))) (set! G2f62@fluid-let-syntax-transformer (lambda (G32d5@e G32d6@r G32d7@mr) ((lambda (G32dc@lookup) (begin (set! G32dc@lookup (lambda (G32ef@x) ((lambda (G32f1@t) (if G32f1@t G32f1@t (begin '#f (G30ab@syntax-violation '#f '"unbound identifier" G32d5@e G32ef@x)))) (G2d99@id->label G32ef@x)))) ((lambda (G32dd@t) ((lambda (G32df@ls/false) (if G32df@ls/false (apply (lambda (G32e1@lhs* G32e2@rhs* G32e3@b G32e4@b*) (if (not (G2d89@valid-bound-ids? G32e1@lhs*)) (G2f7c@invalid-fmls-error G32d5@e G32e1@lhs*) ((lambda (G32e9@lab* G32ea@rhs*) (G2ffc@chi-internal (cons G32e3@b G32e4@b*) (append (map cons G32e9@lab* G32ea@rhs*) G32d6@r) (append (map cons G32e9@lab* G32ea@rhs*) G32d7@mr))) (map G32dc@lookup G32e1@lhs*) (map (lambda (G32ed@x) (G2dc6@make-eval-transformer (G3023@expand-transformer G32ed@x G32d7@mr))) G32e2@rhs*)))) G32df@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G32dd@t))) (G2fc2@syntax-dispatch G32dd@t '(_ #(each (any any)) any . each-any)))) G32d5@e))) '#f))) (set! G2f64@type-descriptor-transformer (lambda (G32f3@e G32f4@r G32f5@mr) ((lambda (G32f9@t) ((lambda (G32fb@ls/false) (if (if G32fb@ls/false (begin '#f (apply (lambda (G32fd@id) (G2d7f@id? G32fd@id)) G32fb@ls/false)) '#f) (apply (lambda (G32ff@id) ((lambda (G3301@lab) ((lambda (G3303@b) ((lambda (G3305@type) ((lambda () (begin (if G3301@lab (void) (G2da5@raise-unbound-error G32ff@id)) (if (if (eq? G3305@type '$rtd) (begin '#f (not (list? (G2da3@binding-value G3303@b)))) '#f) (void) (G30ab@syntax-violation '#f '"not a record type" G32f3@e)) (list 'quote (G2da3@binding-value G3303@b)))))) (G2da1@binding-type G3303@b))) (G2d9d@label->binding G3301@lab G32f4@r))) (G2d99@id->label G32ff@id))) G32fb@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G32f9@t))) (G2fc2@syntax-dispatch G32f9@t '(_ any)))) G32f3@e))) (set! G2f66@record-type-descriptor-transformer (lambda (G3307@e G3308@r G3309@mr) ((lambda (G330d@t) ((lambda (G330f@ls/false) (if (if G330f@ls/false (begin '#f (apply (lambda (G3311@id) (G2d7f@id? G3311@id)) G330f@ls/false)) '#f) (apply (lambda (G3313@id) ((lambda (G3315@lab) ((lambda (G3317@b) ((lambda (G3319@type) ((lambda () (begin (if G3315@lab (void) (G2da5@raise-unbound-error G3313@id)) (if (if (eq? G3319@type '$rtd) (begin '#f (list? (G2da3@binding-value G3317@b))) '#f) (void) (G30ab@syntax-violation '#f '"not a record type" G3307@e)) (G2fe6@chi-expr (car (G2da3@binding-value G3317@b)) G3308@r G3309@mr))))) (G2da1@binding-type G3317@b))) (G2d9d@label->binding G3315@lab G3308@r))) (G2d99@id->label G3313@id))) G330f@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G330d@t))) (G2fc2@syntax-dispatch G330d@t '(_ any)))) G3307@e))) (set! G2f68@record-constructor-descriptor-transformer (lambda (G331b@e G331c@r G331d@mr) ((lambda (G3321@t) ((lambda (G3323@ls/false) (if (if G3323@ls/false (begin '#f (apply (lambda (G3325@id) (G2d7f@id? G3325@id)) G3323@ls/false)) '#f) (apply (lambda (G3327@id) ((lambda (G3329@lab) ((lambda (G332b@b) ((lambda (G332d@type) ((lambda () (begin (if G3329@lab (void) (G2da5@raise-unbound-error G3327@id)) (if (if (eq? G332d@type '$rtd) (begin '#f (list? (G2da3@binding-value G332b@b))) '#f) (void) (G30ab@syntax-violation '#f '"invalid type" G331b@e)) (G2fe6@chi-expr (cadr (G2da3@binding-value G332b@b)) G331c@r G331d@mr))))) (G2da1@binding-type G332b@b))) (G2d9d@label->binding G3329@lab G331c@r))) (G2d99@id->label G3327@id))) G3323@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3321@t))) (G2fc2@syntax-dispatch G3321@t '(_ any)))) G331b@e))) (set! G2f6a@when-transformer (lambda (G332f@e G3330@r G3331@mr) ((lambda (G3335@t) ((lambda (G3337@ls/false) (if G3337@ls/false (apply (lambda (G3339@test G333a@e G333b@e*) (list 'if (G2fe6@chi-expr G3339@test G3330@r G3331@mr) (G2ce4@G2c55@build-sequence '#f (G2fe2@chi-expr* (cons G333a@e G333b@e*) G3330@r G3331@mr)) (G2ce5@G2c57@build-void))) G3337@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3335@t))) (G2fc2@syntax-dispatch G3335@t '(_ any any . each-any)))) G332f@e))) (set! G2f6c@unless-transformer (lambda (G333f@e G3340@r G3341@mr) ((lambda (G3345@t) ((lambda (G3347@ls/false) (if G3347@ls/false (apply (lambda (G3349@test G334a@e G334b@e*) (list 'if (G2fe6@chi-expr G3349@test G3340@r G3341@mr) (G2ce5@G2c57@build-void) (G2ce4@G2c55@build-sequence '#f (G2fe2@chi-expr* (cons G334a@e G334b@e*) G3340@r G3341@mr)))) G3347@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3345@t))) (G2fc2@syntax-dispatch G3345@t '(_ any any . each-any)))) G333f@e))) (set! G2f6e@if-transformer (lambda (G334f@e G3350@r G3351@mr) ((lambda (G3355@t) ((lambda (G3357@ls/false) (if G3357@ls/false (apply (lambda (G3359@e0 G335a@e1 G335b@e2) (list 'if (G2fe6@chi-expr G3359@e0 G3350@r G3351@mr) (G2fe6@chi-expr G335a@e1 G3350@r G3351@mr) (G2fe6@chi-expr G335b@e2 G3350@r G3351@mr))) G3357@ls/false) ((lambda (G335f@t) ((lambda (G3361@ls/false) (if G3361@ls/false (apply (lambda (G3363@e0 G3364@e1) (list 'if (G2fe6@chi-expr G3363@e0 G3350@r G3351@mr) (G2fe6@chi-expr G3364@e1 G3350@r G3351@mr) (G2ce5@G2c57@build-void))) G3361@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G335f@t))) (G2fc2@syntax-dispatch G335f@t '(_ any any)))) G3355@t))) (G2fc2@syntax-dispatch G3355@t '(_ any any any)))) G334f@e))) (set! G2f70@case-transformer (lambda (G3367@e G3368@r G3369@mr) ((lambda (G336e@build-one G3370@build-last) (begin (set! G336e@build-one (lambda (G33a7@t G33a8@cls G33a9@rest) ((lambda (G33ad@t) ((lambda (G33af@ls/false) (if G33af@ls/false (apply (lambda (G33b1@d* G33b2@e G33b3@e*) (list 'if ((lambda (G33b7@data) (if (= '1 (length G33b7@data)) (list '(primitive eqv?) G33a7@t (list 'quote (car G33b7@data))) (list '(primitive memv) G33a7@t (list 'quote G33b7@data)))) (G2d95@stx->datum G33b1@d*)) (G2ce4@G2c55@build-sequence '#f (G2fe2@chi-expr* (cons G33b2@e G33b3@e*) G3368@r G3369@mr)) G33a9@rest)) G33af@ls/false) ((lambda (G33b9@t) ((lambda (G33bb@ls/false) (if G33bb@ls/false (apply (lambda (G33bd@else) (G30ab@syntax-violation '#f '"invalid syntax" G3367@e)) G33bb@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G33b9@t))) (G2fc2@syntax-dispatch G33b9@t 'any))) G33ad@t))) (G2fc2@syntax-dispatch G33ad@t '(each-any any . each-any)))) G33a8@cls))) (set! G3370@build-last (lambda (G3389@t G338a@cls) ((lambda (G338d@t) ((lambda (G338f@ls/false) (if G338f@ls/false (apply (lambda (G3391@d* G3392@e G3393@e*) (G336e@build-one G3389@t G338a@cls (G2ce5@G2c57@build-void))) G338f@ls/false) ((lambda (G3397@t) ((lambda (G3399@ls/false) (if G3399@ls/false (apply (lambda (G339b@else-kwd G339c@x G339d@x*) (if (if (G2d7f@id? G339b@else-kwd) (begin '#f (G2d87@free-id=? G339b@else-kwd (G2f50@scheme-stx 'else))) '#f) (G2ce4@G2c55@build-sequence '#f (G2fe2@chi-expr* (cons G339c@x G339d@x*) G3368@r G3369@mr)) (G30ab@syntax-violation '#f '"invalid syntax" G3367@e))) G3399@ls/false) ((lambda (G33a1@t) ((lambda (G33a3@ls/false) (if G33a3@ls/false (apply (lambda (G33a5@else) (G30ab@syntax-violation '#f '"invalid syntax" G3367@e)) G33a3@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G33a1@t))) (G2fc2@syntax-dispatch G33a1@t 'any))) G3397@t))) (G2fc2@syntax-dispatch G3397@t '(any any . each-any)))) G338d@t))) (G2fc2@syntax-dispatch G338d@t '(each-any any . each-any)))) G338a@cls))) ((lambda (G3371@t) ((lambda (G3373@ls/false) (if G3373@ls/false (apply (lambda (G3375@expr) (G2ce4@G2c55@build-sequence '#f (list (G2fe6@chi-expr G3375@expr G3368@r G3369@mr) (G2ce5@G2c57@build-void)))) G3373@ls/false) ((lambda (G3377@t) ((lambda (G3379@ls/false) (if G3379@ls/false (apply (lambda (G337b@expr G337c@cls G337d@cls*) ((lambda (G3381@t) (G2ce3@G2c0d@build-let '#f (list G3381@t) (list (G2fe6@chi-expr G337b@expr G3368@r G3369@mr)) ((letrec ((G3383@f (lambda (G3385@cls G3386@cls*) (if (null? G3386@cls*) (G3370@build-last G3381@t G3385@cls) (G336e@build-one G3381@t G3385@cls (G3383@f (car G3386@cls*) (cdr G3386@cls*))))))) G3383@f) G337c@cls G337d@cls*))) (G2d01@gen-lexical 't))) G3379@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3377@t))) (G2fc2@syntax-dispatch G3377@t '(_ any any . each-any)))) G3371@t))) (G2fc2@syntax-dispatch G3371@t '(_ any)))) G3367@e))) '#f '#f))) (set! G2f72@quote-transformer (lambda (G33bf@e G33c0@r G33c1@mr) ((lambda (G33c5@t) ((lambda (G33c7@ls/false) (if G33c7@ls/false (apply (lambda (G33c9@datum) (list 'quote (G2d95@stx->datum G33c9@datum))) G33c7@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G33c5@t))) (G2fc2@syntax-dispatch G33c5@t '(_ any)))) G33bf@e))) (set! G2f74@case-lambda-transformer (lambda (G33cb@e G33cc@r G33cd@mr) ((lambda (G33d1@t) ((lambda (G33d3@ls/false) (if G33d3@ls/false (apply (lambda (G33d5@fmls* G33d6@b* G33d7@b**) (call-with-values (lambda () (G2fee@chi-lambda-clause* G33cb@e G33d5@fmls* (map cons G33d6@b* G33d7@b**) G33cc@r G33cd@mr)) (lambda (G33dd@G33db G33de@G33dc) ((lambda (G33e1@body* G33e2@fmls*) (G2ce2@G2c0b@build-case-lambda '#f G33e2@fmls* G33e1@body*)) G33de@G33dc G33dd@G33db)))) G33d3@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G33d1@t))) (G2fc2@syntax-dispatch G33d1@t '(_ . #(each (any any . each-any)))))) G33cb@e))) (set! G2f76@lambda-transformer (lambda (G33e5@e G33e6@r G33e7@mr) ((lambda (G33eb@t) ((lambda (G33ed@ls/false) (if G33ed@ls/false (apply (lambda (G33ef@fmls G33f0@b G33f1@b*) (call-with-values (lambda () (G2fec@chi-lambda-clause G33e5@e G33ef@fmls (cons G33f0@b G33f1@b*) G33e6@r G33e7@mr)) (lambda (G33f7@G33f5 G33f8@G33f6) ((lambda (G33fb@body G33fc@fmls) (G2ce1@G2c09@build-lambda '#f G33fc@fmls G33fb@body)) G33f8@G33f6 G33f7@G33f5)))) G33ed@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G33eb@t))) (G2fc2@syntax-dispatch G33eb@t '(_ any any . each-any)))) G33e5@e))) (set! G2f78@bless (lambda (G33ff@x) (G2d67@mkstx ((letrec ((G3401@f (lambda (G3403@x) (if (G2d47@stx? G3403@x) G3403@x (if (pair? G3403@x) (cons (G3401@f (car G3403@x)) (G3401@f (cdr G3403@x))) (if (symbol? G3403@x) (G2f50@scheme-stx G3403@x) (if (vector? G3403@x) (vector-map G3401@f G3403@x) G3403@x))))))) G3401@f) G33ff@x) '() '() '()))) (set! G2f7a@with-syntax-macro (lambda (G3405@e) ((lambda (G3407@t) ((lambda (G3409@ls/false) (if G3409@ls/false (apply (lambda (G340b@pat* G340c@expr* G340d@b G340e@b*) ((lambda (G3413@idn*) (begin (G2fea@verify-formals (map car G3413@idn*) G3405@e) ((lambda (G3415@t*) (G2f78@bless (list 'let (map list G3415@t* G340c@expr*) ((letrec ((G3417@f (lambda (G3419@pat* G341a@t*) (if (null? G3419@pat*) (cons 'begin (cons '#f (cons G340d@b G340e@b*))) (list 'syntax-case (car G341a@t*) '() (list (car G3419@pat*) (G3417@f (cdr G3419@pat*) (cdr G341a@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G3419@pat*)) (car G341a@t*)))))))) G3417@f) G340b@pat* G3415@t*)))) (G309d@generate-temporaries G340c@expr*)))) ((letrec ((G341d@f (lambda (G341f@pat*) (if (null? G341f@pat*) '() (call-with-values (lambda () (G2fc0@convert-pattern (car G341f@pat*) '())) (lambda (G3423@G3421 G3424@G3422) ((lambda (G3427@idn* G3428@pat) (append G3427@idn* (G341d@f (cdr G341f@pat*)))) G3424@G3422 G3423@G3421))))))) G341d@f) G340b@pat*))) G3409@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3407@t))) (G2fc2@syntax-dispatch G3407@t '(_ #(each (any any)) any . each-any)))) G3405@e))) (set! G2f7c@invalid-fmls-error (lambda (G342b@stx G342c@fmls) ((lambda (G342f@t) ((lambda (G3431@ls/false) (if G3431@ls/false (apply (lambda (G3433@id* G3434@last) ((letrec ((G3437@f (lambda (G3439@id*) (if (null? G3439@id*) (values) (if (not (G2d7f@id? (car G3439@id*))) (G30ab@syntax-violation '#f '"not an identifier" G342b@stx (car G3439@id*)) (begin (G3437@f (cdr G3439@id*)) (if (G2d8d@bound-id-member? (car G3439@id*) (cdr G3439@id*)) (G30ab@syntax-violation '#f '"duplicate binding" G342b@stx (car G3439@id*)) (void)))))))) G3437@f) (if (G2d7f@id? G3434@last) (cons G3434@last G3433@id*) (if (G2d75@syntax-null? G3434@last) G3433@id* (G30ab@syntax-violation '#f '"not an identifier" G342b@stx G3434@last))))) G3431@ls/false) ((lambda (G343b@t) ((lambda (G343d@ls/false) (if G343d@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"malformed binding form" G342b@stx G342c@fmls)) G343d@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G343b@t))) (G2fc2@syntax-dispatch G343b@t '_))) G342f@t))) (G2fc2@syntax-dispatch G342f@t '#(each+ any () any)))) G342c@fmls))) (set! G2f7e@let-macro (lambda (G343f@stx) ((lambda (G3441@t) ((lambda (G3443@ls/false) (if G3443@ls/false (apply (lambda (G3445@lhs* G3446@rhs* G3447@b G3448@b*) (if (G2d89@valid-bound-ids? G3445@lhs*) (G2f78@bless (cons (cons 'lambda (cons G3445@lhs* (cons G3447@b G3448@b*))) G3446@rhs*)) (G2f7c@invalid-fmls-error G343f@stx G3445@lhs*))) G3443@ls/false) ((lambda (G344d@t) ((lambda (G344f@ls/false) (if (if G344f@ls/false (begin '#f (apply (lambda (G3451@f G3452@lhs* G3453@rhs* G3454@b G3455@b*) (G2d7f@id? G3451@f)) G344f@ls/false)) '#f) (apply (lambda (G345b@f G345c@lhs* G345d@rhs* G345e@b G345f@b*) (if (G2d89@valid-bound-ids? G345c@lhs*) (G2f78@bless (cons (list 'letrec (list (list G345b@f (cons 'lambda (cons G345c@lhs* (cons G345e@b G345f@b*))))) G345b@f) G345d@rhs*)) (G2f7c@invalid-fmls-error G343f@stx G345c@lhs*))) G344f@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G344d@t))) (G2fc2@syntax-dispatch G344d@t '(_ any #(each (any any)) any . each-any)))) G3441@t))) (G2fc2@syntax-dispatch G3441@t '(_ #(each (any any)) any . each-any)))) G343f@stx))) (set! G2f80@let-values-macro (lambda (G3465@stx) ((lambda (G3468@rename G346a@rename*) (begin (set! G3468@rename (lambda (G34ca@x G34cb@old* G34cc@new*) (begin (if (G2d7f@id? G34ca@x) (void) (G30ab@syntax-violation '#f '"not an indentifier" G3465@stx G34ca@x)) (if (G2d8d@bound-id-member? G34ca@x G34cb@old*) (G30ab@syntax-violation '#f '"duplicate binding" G3465@stx G34ca@x) (void)) ((lambda (G34d0@y) (values G34d0@y (cons G34ca@x G34cb@old*) (cons G34d0@y G34cc@new*))) (gensym (G30b1@syntax->datum G34ca@x)))))) (set! G346a@rename* (lambda (G34b8@x* G34b9@old* G34ba@new*) (if (null? G34b8@x*) (values '() G34b9@old* G34ba@new*) (call-with-values (lambda () (G3468@rename (car G34b8@x*) G34b9@old* G34ba@new*)) (lambda (G34be@x G34bf@old* G34c0@new*) (call-with-values (lambda () (G346a@rename* (cdr G34b8@x*) G34bf@old* G34c0@new*)) (lambda (G34c4@x* G34c5@old* G34c6@new*) (values (cons G34be@x G34c4@x*) G34c5@old* G34c6@new*)))))))) ((lambda (G346b@t) ((lambda (G346d@ls/false) (if G346d@ls/false (apply (lambda (G346f@b G3470@b*) (cons* (G2f78@bless 'let) '() G346f@b G3470@b*)) G346d@ls/false) ((lambda (G3473@t) ((lambda (G3475@ls/false) (if G3475@ls/false (apply (lambda (G3477@lhs* G3478@rhs* G3479@b G347a@b*) (G2f78@bless ((letrec ((G347f@f (lambda (G3481@lhs* G3482@rhs* G3483@old* G3484@new*) (if (null? G3481@lhs*) (cons 'let (cons (map list G3483@old* G3484@new*) (cons G3479@b G347a@b*))) ((lambda (G3489@t) ((lambda (G348b@ls/false) (if G348b@ls/false (apply (lambda (G348d@x*) (call-with-values (lambda () (G346a@rename* G348d@x* G3483@old* G3484@new*)) (lambda (G3492@G348f G3493@G3490 G3494@G3491) ((lambda (G3498@new* G3499@old* G349a@y*) (list 'call-with-values (list 'lambda '() (car G3482@rhs*)) (list 'lambda G349a@y* (G347f@f (cdr G3481@lhs*) (cdr G3482@rhs*) G3499@old* G3498@new*)))) G3494@G3491 G3493@G3490 G3492@G348f)))) G348b@ls/false) ((lambda (G349e@t) ((lambda (G34a0@ls/false) (if G34a0@ls/false (apply (lambda (G34a2@x* G34a3@x) (call-with-values (lambda () (G3468@rename G34a3@x G3483@old* G3484@new*)) (lambda (G34a6@y G34a7@old* G34a8@new*) (call-with-values (lambda () (G346a@rename* G34a2@x* G34a7@old* G34a8@new*)) (lambda (G34ac@y* G34ad@old* G34ae@new*) (list 'call-with-values (list 'lambda '() (car G3482@rhs*)) (list 'lambda (append G34ac@y* G34a6@y) (G347f@f (cdr G3481@lhs*) (cdr G3482@rhs*) G34ad@old* G34ae@new*)))))))) G34a0@ls/false) ((lambda (G34b2@t) ((lambda (G34b4@ls/false) (if G34b4@ls/false (apply (lambda (G34b6@others) (G30ab@syntax-violation '#f '"malformed bindings" G3465@stx G34b6@others)) G34b4@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G34b2@t))) (G2fc2@syntax-dispatch G34b2@t 'any))) G349e@t))) (G2fc2@syntax-dispatch G349e@t '#(each+ any () any)))) G3489@t))) (G2fc2@syntax-dispatch G3489@t 'each-any))) (car G3481@lhs*)))))) G347f@f) G3477@lhs* G3478@rhs* '() '()))) G3475@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3473@t))) (G2fc2@syntax-dispatch G3473@t '(_ #(each (any any)) any . each-any)))) G346b@t))) (G2fc2@syntax-dispatch G346b@t '(_ () any . each-any)))) G3465@stx))) '#f '#f))) (set! G2f82@let*-values-macro (lambda (G34d2@stx) ((lambda (G34d5@check) (begin (set! G34d5@check (lambda (G3504@x*) (if (null? G3504@x*) (void) ((lambda (G3506@x) (begin (if (G2d7f@id? G3506@x) (void) (G30ab@syntax-violation '#f '"not an identifier" G34d2@stx G3506@x)) (G34d5@check (cdr G3504@x*)) (if (G2d8d@bound-id-member? G3506@x (cdr G3504@x*)) (G30ab@syntax-violation '#f '"duplicate identifier" G34d2@stx G3506@x) (void)))) (car G3504@x*))))) ((lambda (G34d6@t) ((lambda (G34d8@ls/false) (if G34d8@ls/false (apply (lambda (G34da@b G34db@b*) (cons* (G2f78@bless 'let) '() G34da@b G34db@b*)) G34d8@ls/false) ((lambda (G34de@t) ((lambda (G34e0@ls/false) (if G34e0@ls/false (apply (lambda (G34e2@lhs* G34e3@rhs* G34e4@b G34e5@b*) (G2f78@bless ((letrec ((G34ea@f (lambda (G34ec@lhs* G34ed@rhs*) (if (null? G34ec@lhs*) (cons 'begin (cons G34e4@b G34e5@b*)) ((lambda (G34f0@t) ((lambda (G34f2@ls/false) (if G34f2@ls/false (apply (lambda (G34f4@x*) (begin (G34d5@check G34f4@x*) (list 'call-with-values (list 'lambda '() (car G34ed@rhs*)) (list 'lambda G34f4@x* (G34ea@f (cdr G34ec@lhs*) (cdr G34ed@rhs*)))))) G34f2@ls/false) ((lambda (G34f6@t) ((lambda (G34f8@ls/false) (if G34f8@ls/false (apply (lambda (G34fa@x* G34fb@x) (begin (G34d5@check (cons G34fb@x G34fa@x*)) (list 'call-with-values (list 'lambda '() (car G34ed@rhs*)) (list 'lambda (append G34fa@x* G34fb@x) (G34ea@f (cdr G34ec@lhs*) (cdr G34ed@rhs*)))))) G34f8@ls/false) ((lambda (G34fe@t) ((lambda (G3500@ls/false) (if G3500@ls/false (apply (lambda (G3502@others) (G30ab@syntax-violation '#f '"malformed bindings" G34d2@stx G3502@others)) G3500@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G34fe@t))) (G2fc2@syntax-dispatch G34fe@t 'any))) G34f6@t))) (G2fc2@syntax-dispatch G34f6@t '#(each+ any () any)))) G34f0@t))) (G2fc2@syntax-dispatch G34f0@t 'each-any))) (car G34ec@lhs*)))))) G34ea@f) G34e2@lhs* G34e3@rhs*))) G34e0@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G34de@t))) (G2fc2@syntax-dispatch G34de@t '(_ #(each (any any)) any . each-any)))) G34d6@t))) (G2fc2@syntax-dispatch G34d6@t '(_ () any . each-any)))) G34d2@stx))) '#f))) (set! G2f84@trace-lambda-macro (lambda (G3508@stx) ((lambda (G350a@t) ((lambda (G350c@ls/false) (if G350c@ls/false (apply (lambda (G350e@who G350f@fmls G3510@b G3511@b*) (if (G2d89@valid-bound-ids? G350f@fmls) (G2f78@bless (list 'make-traced-procedure (list 'quote G350e@who) (cons 'lambda (cons G350f@fmls (cons G3510@b G3511@b*))))) (G2f7c@invalid-fmls-error G3508@stx G350f@fmls))) G350c@ls/false) ((lambda (G3516@t) ((lambda (G3518@ls/false) (if G3518@ls/false (apply (lambda (G351a@who G351b@fmls G351c@last G351d@b G351e@b*) (if (G2d89@valid-bound-ids? (cons G351c@last G351b@fmls)) (G2f78@bless (list 'make-traced-procedure (list 'quote G351a@who) (cons 'lambda (cons (append G351b@fmls G351c@last) (cons G351d@b G351e@b*))))) (G2f7c@invalid-fmls-error G3508@stx (append G351b@fmls G351c@last)))) G3518@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3516@t))) (G2fc2@syntax-dispatch G3516@t '(_ any #(each+ any () any) any . each-any)))) G350a@t))) (G2fc2@syntax-dispatch G350a@t '(_ any each-any any . each-any)))) G3508@stx))) (set! G2f86@trace-define-macro (lambda (G3524@stx) ((lambda (G3526@t) ((lambda (G3528@ls/false) (if G3528@ls/false (apply (lambda (G352a@who G352b@fmls G352c@b G352d@b*) (if (G2d89@valid-bound-ids? G352b@fmls) (G2f78@bless (list 'define G352a@who (list 'make-traced-procedure (list 'quote G352a@who) (cons 'lambda (cons G352b@fmls (cons G352c@b G352d@b*)))))) (G2f7c@invalid-fmls-error G3524@stx G352b@fmls))) G3528@ls/false) ((lambda (G3532@t) ((lambda (G3534@ls/false) (if G3534@ls/false (apply (lambda (G3536@who G3537@fmls G3538@last G3539@b G353a@b*) (if (G2d89@valid-bound-ids? (cons G3538@last G3537@fmls)) (G2f78@bless (list 'define G3536@who (list 'make-traced-procedure (list 'quote G3536@who) (cons 'lambda (cons (append G3537@fmls G3538@last) (cons G3539@b G353a@b*)))))) (G2f7c@invalid-fmls-error G3524@stx (append G3537@fmls G3538@last)))) G3534@ls/false) ((lambda (G3540@t) ((lambda (G3542@ls/false) (if G3542@ls/false (apply (lambda (G3544@who G3545@expr) (if (G2d7f@id? G3544@who) (G2f78@bless (list 'define G3544@who (list 'let (list (list 'v G3545@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G3544@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G30ab@syntax-violation '#f '"invalid name" G3524@stx))) G3542@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3540@t))) (G2fc2@syntax-dispatch G3540@t '(_ any any)))) G3532@t))) (G2fc2@syntax-dispatch G3532@t '(_ (any . #(each+ any () any)) any . each-any)))) G3526@t))) (G2fc2@syntax-dispatch G3526@t '(_ (any . each-any) any . each-any)))) G3524@stx))) (set! G2f88@trace-define-syntax-macro (lambda (G3548@stx) ((lambda (G354a@t) ((lambda (G354c@ls/false) (if G354c@ls/false (apply (lambda (G354e@who G354f@expr) (if (G2d7f@id? G354e@who) (G2f78@bless (list 'define-syntax G354e@who (list 'make-traced-macro (list 'quote G354e@who) G354f@expr))) (G30ab@syntax-violation '#f '"invalid name" G3548@stx))) G354c@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G354a@t))) (G2fc2@syntax-dispatch G354a@t '(_ any any)))) G3548@stx))) (set! G2f8a@trace-let/rec-syntax (lambda (G3552@who) (lambda (G3554@stx) ((lambda (G3556@t) ((lambda (G3558@ls/false) (if G3558@ls/false (apply (lambda (G355a@lhs* G355b@rhs* G355c@b G355d@b*) (if (G2d89@valid-bound-ids? G355a@lhs*) ((lambda (G3562@rhs*) (G2f78@bless (cons G3552@who (cons (map list G355a@lhs* G3562@rhs*) (cons G355c@b G355d@b*))))) (map (lambda (G3564@lhs G3565@rhs) (list 'make-traced-macro (list 'quote G3564@lhs) G3565@rhs)) G355a@lhs* G355b@rhs*)) (G2f7c@invalid-fmls-error G3554@stx G355a@lhs*))) G3558@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3556@t))) (G2fc2@syntax-dispatch G3556@t '(_ #(each (any any)) any . each-any)))) G3554@stx)))) (set! G2f8c@trace-let-syntax-macro (G2f8a@trace-let/rec-syntax 'let-syntax)) (set! G2f8e@trace-letrec-syntax-macro (G2f8a@trace-let/rec-syntax 'letrec-syntax)) (set! G2f90@guard-macro (lambda (G3568@x) ((lambda (G356b@gen-clauses) (begin (set! G356b@gen-clauses (lambda (G3582@con G3583@outerk G3584@clause*) ((lambda (G3589@f G358b@f*) (begin (set! G3589@f (lambda (G35bc@x G35bd@k) ((lambda (G35c0@t) ((lambda (G35c2@ls/false) (if G35c2@ls/false (apply (lambda (G35c4@e G35c5@p) ((lambda (G35c8@t) (list 'let (list (list G35c8@t G35c4@e)) (list 'if G35c8@t (list G35c5@p G35c8@t) G35bd@k))) (gensym))) G35c2@ls/false) ((lambda (G35ca@t) ((lambda (G35cc@ls/false) (if G35cc@ls/false (apply (lambda (G35ce@e) ((lambda (G35d0@t) (list 'let (list (list G35d0@t G35ce@e)) (list 'if G35d0@t G35d0@t G35bd@k))) (gensym))) G35cc@ls/false) ((lambda (G35d2@t) ((lambda (G35d4@ls/false) (if G35d4@ls/false (apply (lambda (G35d6@e G35d7@v G35d8@v*) (list 'if G35d6@e (cons 'begin (cons G35d7@v G35d8@v*)) G35bd@k)) G35d4@ls/false) ((lambda (G35dc@t) ((lambda (G35de@ls/false) (if G35de@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid guard clause" G35bc@x)) G35de@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G35dc@t))) (G2fc2@syntax-dispatch G35dc@t '_))) G35d2@t))) (G2fc2@syntax-dispatch G35d2@t '(any any . each-any)))) G35ca@t))) (G2fc2@syntax-dispatch G35ca@t '(any)))) G35c0@t))) (G2fc2@syntax-dispatch G35c0@t '(any #(scheme-id =>) any)))) G35bc@x))) (set! G358b@f* (lambda (G3596@x*) ((lambda (G3598@t) ((lambda (G359a@ls/false) (if G359a@ls/false (apply (lambda () (values (list 'raise G3582@con) '#t)) G359a@ls/false) ((lambda (G359c@t) ((lambda (G359e@ls/false) (if G359e@ls/false (apply (lambda (G35a0@e G35a1@e*) (values (cons 'begin (cons G35a0@e G35a1@e*)) '#f)) G359e@ls/false) ((lambda (G35a4@t) ((lambda (G35a6@ls/false) (if G35a6@ls/false (apply (lambda (G35a8@cls G35a9@cls*) (call-with-values (lambda () (G358b@f* G35a9@cls*)) (lambda (G35ae@G35ac G35af@G35ad) ((lambda (G35b2@g G35b3@e) (values (G3589@f G35a8@cls G35b3@e) G35b2@g)) G35af@G35ad G35ae@G35ac)))) G35a6@ls/false) ((lambda (G35b6@t) ((lambda (G35b8@ls/false) (if G35b8@ls/false (apply (lambda (G35ba@others) (G30ab@syntax-violation '#f '"invalid guard clause" G35ba@others)) G35b8@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G35b6@t))) (G2fc2@syntax-dispatch G35b6@t 'any))) G35a4@t))) (G2fc2@syntax-dispatch G35a4@t '(any . any)))) G359c@t))) (G2fc2@syntax-dispatch G359c@t '((#(scheme-id else) any . each-any))))) G3598@t))) (G2fc2@syntax-dispatch G3598@t '()))) G3596@x*))) (call-with-values (lambda () (G358b@f* G3584@clause*)) (lambda (G358e@G358c G358f@G358d) ((lambda (G3592@raisek G3593@code) (if G3592@raisek (list G3583@outerk G3593@code) G3593@code)) G358f@G358d G358e@G358c))))) '#f '#f))) ((lambda (G356c@t) ((lambda (G356e@ls/false) (if (if G356e@ls/false (begin '#f (apply (lambda (G3570@con G3571@clause* G3572@b G3573@b*) (G2d7f@id? G3570@con)) G356e@ls/false)) '#f) (apply (lambda (G3578@con G3579@clause* G357a@b G357b@b*) ((lambda (G3580@outerk) (G2f78@bless (list 'call/cc (list 'lambda (list G3580@outerk) (list 'with-exception-handler (list 'lambda (list G3578@con) (G356b@gen-clauses G3578@con G3580@outerk G3579@clause*)) (cons 'lambda (cons '() (cons '#f (cons G357a@b G357b@b*))))))))) (gensym))) G356e@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G356c@t))) (G2fc2@syntax-dispatch G356c@t '(_ (any . each-any) any . each-any)))) G3568@x))) '#f))) (set! G2f92@define-enumeration-macro (lambda (G35e0@stx) ((lambda (G35e3@set? G35e5@remove-dups) (begin (set! G35e3@set? (lambda (G35fc@x) ((lambda (G35fe@t) (if G35fe@t G35fe@t (begin '#f (if (not (memq (car G35fc@x) (cdr G35fc@x))) (begin '#f (G35e3@set? (cdr G35fc@x))) '#f)))) (null? G35fc@x)))) (set! G35e5@remove-dups (lambda (G35fa@ls) (if (null? G35fa@ls) '() (cons (car G35fa@ls) (G35e5@remove-dups (remq (car G35fa@ls) (cdr G35fa@ls))))))) ((lambda (G35e6@t) ((lambda (G35e8@ls/false) (if (if G35e8@ls/false (begin '#f (apply (lambda (G35ea@name G35eb@id* G35ec@maker) (if (G2d7f@id? G35ea@name) (if (G2d7f@id? G35ec@maker) (begin '#f (for-all G2d7f@id? G35eb@id*)) '#f) '#f)) G35e8@ls/false)) '#f) (apply (lambda (G35f0@name G35f1@id* G35f2@maker) ((lambda (G35f6@name* G35f7@mk) (G2f78@bless (list 'begin (list 'define G35f7@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G35f6@name*)))) (list 'define-syntax G35f0@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G35f6@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G35f0@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G35f2@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G35f2@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G35f6@name*)) (cons 'syntax-violation (cons (list 'quote G35f2@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G35f7@mk '('(n* ...)))))))))))) (G35e5@remove-dups (G30b1@syntax->datum G35f1@id*)) (gensym))) G35e8@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G35e6@t))) (G2fc2@syntax-dispatch G35e6@t '(_ any each-any any)))) G35e0@stx))) '#f '#f))) (set! G2f94@time-macro (lambda (G3600@stx) ((lambda (G3602@t) ((lambda (G3604@ls/false) (if G3604@ls/false (apply (lambda (G3606@expr) ((lambda (G3608@str) (G2f78@bless (list 'time-it G3608@str (list 'lambda '() G3606@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G360c@G360a G360d@G360b) ((lambda (G3610@e G3611@p) (begin (write (G30b1@syntax->datum G3606@expr) G3611@p) (G3610@e))) G360d@G360b G360c@G360a))))) G3604@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3602@t))) (G2fc2@syntax-dispatch G3602@t '(_ any)))) G3600@stx))) (set! G2f96@delay-macro (lambda (G3614@stx) ((lambda (G3616@t) ((lambda (G3618@ls/false) (if G3618@ls/false (apply (lambda (G361a@expr) (G2f78@bless (list 'make-promise (list 'lambda '() G361a@expr)))) G3618@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3616@t))) (G2fc2@syntax-dispatch G3616@t '(_ any)))) G3614@stx))) (set! G2f98@assert-macro (lambda (G361c@stx) ((lambda (G361e@t) ((lambda (G3620@ls/false) (if G3620@ls/false (apply (lambda (G3622@expr) (G2f78@bless (list 'unless G3622@expr (list 'assertion-violation ''assert '"assertion failed" (list 'quote G3622@expr))))) G3620@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G361e@t))) (G2fc2@syntax-dispatch G361e@t '(_ any)))) G361c@stx))) (set! G2f9a@endianness-macro (lambda (G3624@stx) ((lambda (G3626@t) ((lambda (G3628@ls/false) (if G3628@ls/false (apply (lambda (G362a@e) ((lambda (G362c@t) (if (eqv? G362c@t 'little) (G2f78@bless ''little) (if (eqv? G362c@t 'big) (G2f78@bless ''big) (G30ab@syntax-violation '#f '"endianness must be big or little" G3624@stx)))) (G30b1@syntax->datum G362a@e))) G3628@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3626@t))) (G2fc2@syntax-dispatch G3626@t '(_ any)))) G3624@stx))) (set! G2f9c@identifier-syntax-macro (lambda (G362d@stx) ((lambda (G362f@t) ((lambda (G3631@ls/false) (if G3631@ls/false (apply (lambda (G3633@expr) (G2f78@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G3633@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G3633@expr) '((syntax (e* ...)))))))))) G3631@ls/false) ((lambda (G3635@t) ((lambda (G3637@ls/false) (if (if G3637@ls/false (begin '#f (apply (lambda (G3639@id1 G363a@expr1 G363b@id2 G363c@expr2 G363d@expr3) (if (G2d7f@id? G3639@id1) (if (G2d7f@id? G363b@id2) (begin '#f (G2d7f@id? G363c@expr2)) '#f) '#f)) G3637@ls/false)) '#f) (apply (lambda (G3643@id1 G3644@expr1 G3645@id2 G3646@expr2 G3647@expr3) (G2f78@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G3644@expr1)) (list (list 'set! 'id G3646@expr2) (list 'syntax G3647@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G3644@expr1 '(e* ...))))))))) G3637@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3635@t))) (G2fc2@syntax-dispatch G3635@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G362f@t))) (G2fc2@syntax-dispatch G362f@t '(_ any)))) G362d@stx))) (set! G2f9e@do-macro (lambda (G364d@stx) ((lambda (G3650@bind) (begin (set! G3650@bind (lambda (G3667@x) ((lambda (G3669@t) ((lambda (G366b@ls/false) (if G366b@ls/false (apply (lambda (G366d@x G366e@init) (list G366d@x G366e@init G366d@x)) G366b@ls/false) ((lambda (G3671@t) ((lambda (G3673@ls/false) (if G3673@ls/false (apply (lambda (G3675@x G3676@init G3677@step) (list G3675@x G3676@init G3677@step)) G3673@ls/false) ((lambda (G367b@t) ((lambda (G367d@ls/false) (if G367d@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid binding" G364d@stx)) G367d@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G367b@t))) (G2fc2@syntax-dispatch G367b@t '_))) G3671@t))) (G2fc2@syntax-dispatch G3671@t '(any any any)))) G3669@t))) (G2fc2@syntax-dispatch G3669@t '(any any)))) G3667@x))) ((lambda (G3651@t) ((lambda (G3653@ls/false) (if G3653@ls/false (apply (lambda (G3655@binding* G3656@test G3657@expr* G3658@command*) ((lambda (G365d@t) ((lambda (G365f@ls/false) (if G365f@ls/false (apply (lambda (G3661@x* G3662@init* G3663@step*) (if (G2d89@valid-bound-ids? G3661@x*) (G2f78@bless (list 'letrec (list (list 'loop (list 'lambda G3661@x* (list 'if G3656@test (cons 'begin (cons '(if #f #f) G3657@expr*)) (cons 'begin (append G3658@command* (list (cons 'loop G3663@step*)))))))) (cons 'loop G3662@init*))) (G30ab@syntax-violation '#f '"invalid bindings" G364d@stx))) G365f@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G365d@t))) (G2fc2@syntax-dispatch G365d@t '#(each (any any any))))) (map G3650@bind G3655@binding*))) G3653@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3651@t))) (G2fc2@syntax-dispatch G3651@t '(_ each-any (any . each-any) . each-any)))) G364d@stx))) '#f))) (set! G2fa0@let*-macro (lambda (G367f@stx) ((lambda (G3681@t) ((lambda (G3683@ls/false) (if (if G3683@ls/false (begin '#f (apply (lambda (G3685@lhs* G3686@rhs* G3687@b G3688@b*) (for-all G2d7f@id? G3685@lhs*)) G3683@ls/false)) '#f) (apply (lambda (G368d@lhs* G368e@rhs* G368f@b G3690@b*) (G2f78@bless ((letrec ((G3695@f (lambda (G3697@x*) (if (null? G3697@x*) (cons 'let (cons '() (cons G368f@b G3690@b*))) (list 'let (list (car G3697@x*)) (G3695@f (cdr G3697@x*))))))) G3695@f) (map list G368d@lhs* G368e@rhs*)))) G3683@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3681@t))) (G2fc2@syntax-dispatch G3681@t '(_ #(each (any any)) any . each-any)))) G367f@stx))) (set! G2fa2@or-macro (lambda (G3699@stx) ((lambda (G369b@t) ((lambda (G369d@ls/false) (if G369d@ls/false (apply (lambda () '#f) G369d@ls/false) ((lambda (G369f@t) ((lambda (G36a1@ls/false) (if G36a1@ls/false (apply (lambda (G36a3@e G36a4@e*) (G2f78@bless ((letrec ((G36a7@f (lambda (G36a9@e G36aa@e*) (if (null? G36aa@e*) (list 'begin '#f G36a9@e) (list 'let (list (list 't G36a9@e)) (list 'if 't 't (G36a7@f (car G36aa@e*) (cdr G36aa@e*)))))))) G36a7@f) G36a3@e G36a4@e*))) G36a1@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G369f@t))) (G2fc2@syntax-dispatch G369f@t '(_ any . each-any)))) G369b@t))) (G2fc2@syntax-dispatch G369b@t '(_)))) G3699@stx))) (set! G2fa4@and-macro (lambda (G36ad@stx) ((lambda (G36af@t) ((lambda (G36b1@ls/false) (if G36b1@ls/false (apply (lambda () '#t) G36b1@ls/false) ((lambda (G36b3@t) ((lambda (G36b5@ls/false) (if G36b5@ls/false (apply (lambda (G36b7@e G36b8@e*) (G2f78@bless ((letrec ((G36bb@f (lambda (G36bd@e G36be@e*) (if (null? G36be@e*) (list 'begin '#f G36bd@e) (cons 'if (cons G36bd@e (cons (G36bb@f (car G36be@e*) (cdr G36be@e*)) '(#f)))))))) G36bb@f) G36b7@e G36b8@e*))) G36b5@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G36b3@t))) (G2fc2@syntax-dispatch G36b3@t '(_ any . each-any)))) G36af@t))) (G2fc2@syntax-dispatch G36af@t '(_)))) G36ad@stx))) (set! G2fa6@cond-macro (lambda (G36c1@stx) ((lambda (G36c3@t) ((lambda (G36c5@ls/false) (if G36c5@ls/false (apply (lambda (G36c7@cls G36c8@cls*) (G2f78@bless ((letrec ((G36cb@f (lambda (G36cd@cls G36ce@cls*) (if (null? G36ce@cls*) ((lambda (G36d1@t) ((lambda (G36d3@ls/false) (if G36d3@ls/false (apply (lambda (G36d5@e G36d6@e*) (cons 'begin (cons G36d5@e G36d6@e*))) G36d3@ls/false) ((lambda (G36d9@t) ((lambda (G36db@ls/false) (if G36db@ls/false (apply (lambda (G36dd@e G36de@p) (list 'let (list (list 't G36dd@e)) (list 'if 't (cons G36de@p '(t))))) G36db@ls/false) ((lambda (G36e1@t) ((lambda (G36e3@ls/false) (if G36e3@ls/false (apply (lambda (G36e5@e) (cons 'or (cons G36e5@e '((if #f #f))))) G36e3@ls/false) ((lambda (G36e7@t) ((lambda (G36e9@ls/false) (if G36e9@ls/false (apply (lambda (G36eb@e G36ec@e*) (list 'if G36eb@e (cons 'begin G36ec@e*))) G36e9@ls/false) ((lambda (G36ef@t) ((lambda (G36f1@ls/false) (if G36f1@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid last clause" G36c1@stx)) G36f1@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G36ef@t))) (G2fc2@syntax-dispatch G36ef@t '_))) G36e7@t))) (G2fc2@syntax-dispatch G36e7@t '(any . each-any)))) G36e1@t))) (G2fc2@syntax-dispatch G36e1@t '(any)))) G36d9@t))) (G2fc2@syntax-dispatch G36d9@t '(any #(scheme-id =>) any)))) G36d1@t))) (G2fc2@syntax-dispatch G36d1@t '(#(scheme-id else) any . each-any)))) G36cd@cls) ((lambda (G36f3@t) ((lambda (G36f5@ls/false) (if G36f5@ls/false (apply (lambda (G36f7@e G36f8@e*) (G30ab@syntax-violation '#f '"incorrect position of keyword else" G36c1@stx)) G36f5@ls/false) ((lambda (G36fb@t) ((lambda (G36fd@ls/false) (if G36fd@ls/false (apply (lambda (G36ff@e G3700@p) (list 'let (list (list 't G36ff@e)) (list 'if 't (cons G3700@p '(t)) (G36cb@f (car G36ce@cls*) (cdr G36ce@cls*))))) G36fd@ls/false) ((lambda (G3703@t) ((lambda (G3705@ls/false) (if G3705@ls/false (apply (lambda (G3707@e) (list 'or G3707@e (G36cb@f (car G36ce@cls*) (cdr G36ce@cls*)))) G3705@ls/false) ((lambda (G3709@t) ((lambda (G370b@ls/false) (if G370b@ls/false (apply (lambda (G370d@e G370e@e*) (list 'if G370d@e (cons 'begin G370e@e*) (G36cb@f (car G36ce@cls*) (cdr G36ce@cls*)))) G370b@ls/false) ((lambda (G3711@t) ((lambda (G3713@ls/false) (if G3713@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid last clause" G36c1@stx)) G3713@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3711@t))) (G2fc2@syntax-dispatch G3711@t '_))) G3709@t))) (G2fc2@syntax-dispatch G3709@t '(any . each-any)))) G3703@t))) (G2fc2@syntax-dispatch G3703@t '(any)))) G36fb@t))) (G2fc2@syntax-dispatch G36fb@t '(any #(scheme-id =>) any)))) G36f3@t))) (G2fc2@syntax-dispatch G36f3@t '(#(scheme-id else) any . each-any)))) G36cd@cls))))) G36cb@f) G36c7@cls G36c8@cls*))) G36c5@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G36c3@t))) (G2fc2@syntax-dispatch G36c3@t '(_ any . each-any)))) G36c1@stx))) (set! G2fa8@do-include (lambda (G3715@stx G3716@id G3717@filename) ((lambda (G371b@filename) (begin (if (if (string? G371b@filename) (begin '#f (G2d7f@id? G3716@id)) '#f) (void) (G30ab@syntax-violation '#f '"invalid syntax" G3715@stx)) (cons (G2f78@bless 'begin) (with-input-from-file G371b@filename (lambda () ((letrec ((G371d@f (lambda (G371f@ls) ((lambda (G3721@x) (if (eof-object? G3721@x) (reverse G371f@ls) (G371d@f (cons (G2d5d@datum->stx G3716@id G3721@x) G371f@ls)))) (G28d5@G27fe@read-annotated))))) G371d@f) '())))))) (G2d95@stx->datum G3717@filename)))) (set! G2faa@include-macro (lambda (G3723@e) ((lambda (G3725@t) ((lambda (G3727@ls/false) (if G3727@ls/false (apply (lambda (G3729@id G372a@filename) (G2fa8@do-include G3723@e G3729@id G372a@filename)) G3727@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3725@t))) (G2fc2@syntax-dispatch G3725@t '(any any)))) G3723@e))) (set! G2fac@include-into-macro (lambda (G372d@e) ((lambda (G372f@t) ((lambda (G3731@ls/false) (if G3731@ls/false (apply (lambda (G3733@id G3734@filename) (G2fa8@do-include G372d@e G3733@id G3734@filename)) G3731@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G372f@t))) (G2fc2@syntax-dispatch G372f@t '(_ any any)))) G372d@e))) (set! G2fae@syntax-rules-macro (lambda (G3737@e) ((lambda (G3739@t) ((lambda (G373b@ls/false) (if G373b@ls/false (apply (lambda (G373d@lits G373e@pat* G373f@tmp*) (begin (G2fc8@verify-literals G373d@lits G3737@e) (G2f78@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G373d@lits (map (lambda (G3743@pat G3744@tmp) ((lambda (G3747@t) ((lambda (G3749@ls/false) (if G3749@ls/false (apply (lambda (G374b@rest) (list (cons 'g G374b@rest) (list 'syntax G3744@tmp))) G3749@ls/false) ((lambda (G374d@t) ((lambda (G374f@ls/false) (if G374f@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid syntax-rules pattern" G3737@e G3743@pat)) G374f@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G374d@t))) (G2fc2@syntax-dispatch G374d@t '_))) G3747@t))) (G2fc2@syntax-dispatch G3747@t '(_ . any)))) G3743@pat)) G373e@pat* G373f@tmp*)))))))) G373b@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3739@t))) (G2fc2@syntax-dispatch G3739@t '(_ each-any . #(each (any any)))))) G3737@e))) (set! G2fb0@quasiquote-macro ((lambda () ((lambda (G3752@datum G377b@quasicons* G377d@quasicons G377f@quasiappend G3781@quasivector G3783@vquasi G3785@quasi) (begin (set! G3752@datum (lambda (G3860@x) (list (G2f50@scheme-stx 'quote) (G2d67@mkstx G3860@x '() '() '())))) (set! G377b@quasicons* (lambda (G3858@x G3859@y) ((letrec ((G385c@f (lambda (G385e@x) (if (null? G385e@x) G3859@y (G377d@quasicons (car G385e@x) (G385c@f (cdr G385e@x))))))) G385c@f) G3858@x))) (set! G377d@quasicons (lambda (G3832@x G3833@y) ((lambda (G3836@t) ((lambda (G3838@ls/false) (if G3838@ls/false (apply (lambda (G383a@dy) ((lambda (G383c@t) ((lambda (G383e@ls/false) (if G383e@ls/false (apply (lambda (G3840@dx) (list (G2f50@scheme-stx 'quote) (cons G3840@dx G383a@dy))) G383e@ls/false) ((lambda (G3842@t) ((lambda (G3844@ls/false) (if G3844@ls/false (apply (lambda () ((lambda (G3846@t) ((lambda (G3848@ls/false) (if G3848@ls/false (apply (lambda () (list (G2f50@scheme-stx 'list) G3832@x)) G3848@ls/false) ((lambda (G384a@t) ((lambda (G384c@ls/false) (if G384c@ls/false (apply (lambda () (list (G2f50@scheme-stx 'cons) G3832@x G3833@y)) G384c@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G384a@t))) (G2fc2@syntax-dispatch G384a@t '_))) G3846@t))) (G2fc2@syntax-dispatch G3846@t '()))) G383a@dy)) G3844@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3842@t))) (G2fc2@syntax-dispatch G3842@t '_))) G383c@t))) (G2fc2@syntax-dispatch G383c@t '(#(scheme-id quote) any)))) G3832@x)) G3838@ls/false) ((lambda (G384e@t) ((lambda (G3850@ls/false) (if G3850@ls/false (apply (lambda (G3852@stuff) (cons* (G2f50@scheme-stx 'list) G3832@x G3852@stuff)) G3850@ls/false) ((lambda (G3854@t) ((lambda (G3856@ls/false) (if G3856@ls/false (apply (lambda () (list (G2f50@scheme-stx 'cons) G3832@x G3833@y)) G3856@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3854@t))) (G2fc2@syntax-dispatch G3854@t '_))) G384e@t))) (G2fc2@syntax-dispatch G384e@t '(#(scheme-id list) . each-any)))) G3836@t))) (G2fc2@syntax-dispatch G3836@t '(#(scheme-id quote) any)))) G3833@y))) (set! G377f@quasiappend (lambda (G3818@x G3819@y) ((lambda (G381c@ls) (if (null? G381c@ls) (list (G2f50@scheme-stx 'quote) '()) (if (null? (cdr G381c@ls)) (car G381c@ls) (cons* (G2f50@scheme-stx 'append) G381c@ls)))) ((letrec ((G381e@f (lambda (G3820@x) (if (null? G3820@x) ((lambda (G3822@t) ((lambda (G3824@ls/false) (if G3824@ls/false (apply (lambda () '()) G3824@ls/false) ((lambda (G3826@t) ((lambda (G3828@ls/false) (if G3828@ls/false (apply (lambda () (list G3819@y)) G3828@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3826@t))) (G2fc2@syntax-dispatch G3826@t '_))) G3822@t))) (G2fc2@syntax-dispatch G3822@t '(#(scheme-id quote) ())))) G3819@y) ((lambda (G382a@t) ((lambda (G382c@ls/false) (if G382c@ls/false (apply (lambda () (G381e@f (cdr G3820@x))) G382c@ls/false) ((lambda (G382e@t) ((lambda (G3830@ls/false) (if G3830@ls/false (apply (lambda () (cons (car G3820@x) (G381e@f (cdr G3820@x)))) G3830@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G382e@t))) (G2fc2@syntax-dispatch G382e@t '_))) G382a@t))) (G2fc2@syntax-dispatch G382a@t '(#(scheme-id quote) ())))) (car G3820@x)))))) G381e@f) G3818@x)))) (set! G3781@quasivector (lambda (G37e6@x) ((lambda (G37e8@pat-x) ((lambda (G37ea@t) ((lambda (G37ec@ls/false) (if G37ec@ls/false (apply (lambda (G37ee@x*) (list (G2f50@scheme-stx 'quote) (list->vector G37ee@x*))) G37ec@ls/false) ((lambda (G37f0@t) ((lambda (G37f2@ls/false) (if G37f2@ls/false (apply (lambda () ((letrec ((G37f4@f (lambda (G37f6@x G37f7@k) ((lambda (G37fa@t) ((lambda (G37fc@ls/false) (if G37fc@ls/false (apply (lambda (G37fe@x*) (G37f7@k (map (lambda (G3800@x) (list (G2f50@scheme-stx 'quote) G3800@x)) G37fe@x*))) G37fc@ls/false) ((lambda (G3802@t) ((lambda (G3804@ls/false) (if G3804@ls/false (apply (lambda (G3806@x*) (G37f7@k G3806@x*)) G3804@ls/false) ((lambda (G3808@t) ((lambda (G380a@ls/false) (if G380a@ls/false (apply (lambda (G380c@x G380d@y) (G37f4@f G380d@y (lambda (G3810@ls) (G37f7@k (cons G380c@x G3810@ls))))) G380a@ls/false) ((lambda (G3812@t) ((lambda (G3814@ls/false) (if G3814@ls/false (apply (lambda () (list (G2f50@scheme-stx 'list->vector) G37e8@pat-x)) G3814@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3812@t))) (G2fc2@syntax-dispatch G3812@t '_))) G3808@t))) (G2fc2@syntax-dispatch G3808@t '(#(scheme-id cons) any any)))) G3802@t))) (G2fc2@syntax-dispatch G3802@t '(#(scheme-id list) . each-any)))) G37fa@t))) (G2fc2@syntax-dispatch G37fa@t '(#(scheme-id quote) each-any)))) G37f6@x)))) G37f4@f) G37e6@x (lambda (G3816@ls) (cons* (G2f50@scheme-stx 'vector) G3816@ls)))) G37f2@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G37f0@t))) (G2fc2@syntax-dispatch G37f0@t '_))) G37ea@t))) (G2fc2@syntax-dispatch G37ea@t '(#(scheme-id quote) each-any)))) G37e8@pat-x)) G37e6@x))) (set! G3783@vquasi (lambda (G37c4@p G37c5@lev) ((lambda (G37c8@t) ((lambda (G37ca@ls/false) (if G37ca@ls/false (apply (lambda (G37cc@p G37cd@q) ((lambda (G37d0@t) ((lambda (G37d2@ls/false) (if G37d2@ls/false (apply (lambda (G37d4@p) (if (= G37c5@lev '0) (G377b@quasicons* G37d4@p (G3783@vquasi G37cd@q G37c5@lev)) (G377d@quasicons (G377d@quasicons (G3752@datum 'unquote) (G3785@quasi G37d4@p (- G37c5@lev '1))) (G3783@vquasi G37cd@q G37c5@lev)))) G37d2@ls/false) ((lambda (G37d6@t) ((lambda (G37d8@ls/false) (if G37d8@ls/false (apply (lambda (G37da@p) (if (= G37c5@lev '0) (G377f@quasiappend G37da@p (G3783@vquasi G37cd@q G37c5@lev)) (G377d@quasicons (G377d@quasicons (G3752@datum 'unquote-splicing) (G3785@quasi G37da@p (- G37c5@lev '1))) (G3783@vquasi G37cd@q G37c5@lev)))) G37d8@ls/false) ((lambda (G37dc@t) ((lambda (G37de@ls/false) (if G37de@ls/false (apply (lambda (G37e0@p) (G377d@quasicons (G3785@quasi G37e0@p G37c5@lev) (G3783@vquasi G37cd@q G37c5@lev))) G37de@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G37dc@t))) (G2fc2@syntax-dispatch G37dc@t 'any))) G37d6@t))) (G2fc2@syntax-dispatch G37d6@t '(#(scheme-id unquote-splicing) . each-any)))) G37d0@t))) (G2fc2@syntax-dispatch G37d0@t '(#(scheme-id unquote) . each-any)))) G37cc@p)) G37ca@ls/false) ((lambda (G37e2@t) ((lambda (G37e4@ls/false) (if G37e4@ls/false (apply (lambda () (list (G2f50@scheme-stx 'quote) '())) G37e4@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G37e2@t))) (G2fc2@syntax-dispatch G37e2@t '()))) G37c8@t))) (G2fc2@syntax-dispatch G37c8@t '(any . any)))) G37c4@p))) (set! G3785@quasi (lambda (G378e@p G378f@lev) ((lambda (G3792@t) ((lambda (G3794@ls/false) (if G3794@ls/false (apply (lambda (G3796@p) (if (= G378f@lev '0) G3796@p (G377d@quasicons (G3752@datum 'unquote) (G3785@quasi (list G3796@p) (- G378f@lev '1))))) G3794@ls/false) ((lambda (G3798@t) ((lambda (G379a@ls/false) (if G379a@ls/false (apply (lambda (G379c@p G379d@q) (if (= G378f@lev '0) (G377b@quasicons* G379c@p (G3785@quasi G379d@q G378f@lev)) (G377d@quasicons (G377d@quasicons (G3752@datum 'unquote) (G3785@quasi G379c@p (- G378f@lev '1))) (G3785@quasi G379d@q G378f@lev)))) G379a@ls/false) ((lambda (G37a0@t) ((lambda (G37a2@ls/false) (if G37a2@ls/false (apply (lambda (G37a4@p G37a5@q) (if (= G378f@lev '0) (G377f@quasiappend G37a4@p (G3785@quasi G37a5@q G378f@lev)) (G377d@quasicons (G377d@quasicons (G3752@datum 'unquote-splicing) (G3785@quasi G37a4@p (- G378f@lev '1))) (G3785@quasi G37a5@q G378f@lev)))) G37a2@ls/false) ((lambda (G37a8@t) ((lambda (G37aa@ls/false) (if G37aa@ls/false (apply (lambda (G37ac@p) (G377d@quasicons (G3752@datum 'quasiquote) (G3785@quasi (list G37ac@p) (+ G378f@lev '1)))) G37aa@ls/false) ((lambda (G37ae@t) ((lambda (G37b0@ls/false) (if G37b0@ls/false (apply (lambda (G37b2@p G37b3@q) (G377d@quasicons (G3785@quasi G37b2@p G378f@lev) (G3785@quasi G37b3@q G378f@lev))) G37b0@ls/false) ((lambda (G37b6@t) ((lambda (G37b8@ls/false) (if (if G37b8@ls/false (begin '#f (apply (lambda (G37ba@x) (not (G2d47@stx? G37ba@x))) G37b8@ls/false)) '#f) (apply (lambda (G37bc@x) (G3781@quasivector (G3783@vquasi G37bc@x G378f@lev))) G37b8@ls/false) ((lambda (G37be@t) ((lambda (G37c0@ls/false) (if G37c0@ls/false (apply (lambda (G37c2@p) (list (G2f50@scheme-stx 'quote) G37c2@p)) G37c0@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G37be@t))) (G2fc2@syntax-dispatch G37be@t 'any))) G37b6@t))) (G2fc2@syntax-dispatch G37b6@t '#(vector each-any)))) G37ae@t))) (G2fc2@syntax-dispatch G37ae@t '(any . any)))) G37a8@t))) (G2fc2@syntax-dispatch G37a8@t '(#(scheme-id quasiquote) any)))) G37a0@t))) (G2fc2@syntax-dispatch G37a0@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3798@t))) (G2fc2@syntax-dispatch G3798@t '((#(scheme-id unquote) . each-any) . any)))) G3792@t))) (G2fc2@syntax-dispatch G3792@t '(#(scheme-id unquote) any)))) G378e@p))) (lambda (G3786@x) ((lambda (G3788@t) ((lambda (G378a@ls/false) (if G378a@ls/false (apply (lambda (G378c@e) (G3785@quasi G378c@e '0)) G378a@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3788@t))) (G2fc2@syntax-dispatch G3788@t '(_ any)))) G3786@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fb2@quasisyntax-macro ((lambda () ((lambda (G3863@quasi) (begin (set! G3863@quasi (lambda (G387b@p G387c@lev) ((lambda (G387f@t) ((lambda (G3881@ls/false) (if G3881@ls/false (apply (lambda (G3883@p) (if (= G387c@lev '0) ((lambda (G3885@g) (values (list G3885@g) (list G3883@p) G3885@g)) (gensym)) (call-with-values (lambda () (G3863@quasi G3883@p (- G387c@lev '1))) (lambda (G388a@G3887 G388b@G3888 G388c@G3889) ((lambda (G3890@p G3891@rhs* G3892@lhs*) (values G3892@lhs* G3891@rhs* (list 'unsyntax G3890@p))) G388c@G3889 G388b@G3888 G388a@G3887))))) G3881@ls/false) ((lambda (G3896@t) ((lambda (G3898@ls/false) (if (if G3898@ls/false (begin '#f (apply (lambda () (= G387c@lev '0)) G3898@ls/false)) '#f) (apply (lambda () (G30ab@syntax-violation '#f '"incorrect use of unsyntax" G387b@p)) G3898@ls/false) ((lambda (G389a@t) ((lambda (G389c@ls/false) (if G389c@ls/false (apply (lambda (G389e@p G389f@q) (call-with-values (lambda () (G3863@quasi G389f@q G387c@lev)) (lambda (G38a5@G38a2 G38a6@G38a3 G38a7@G38a4) ((lambda (G38ab@q G38ac@rhs* G38ad@lhs*) (if (= G387c@lev '0) ((lambda (G38b1@g) (values (cons (cons G38b1@g '(...)) G38ad@lhs*) (cons G389e@p G38ac@rhs*) (cons G38b1@g (cons '... G38ab@q)))) (gensym)) (call-with-values (lambda () (G3863@quasi G389e@p (- G387c@lev '1))) (lambda (G38b6@G38b3 G38b7@G38b4 G38b8@G38b5) ((lambda (G38bc@p G38bd@rhs2* G38be@lhs2*) (values (append G38be@lhs2* G38ad@lhs*) (append G38bd@rhs2* G38ac@rhs*) (cons (list 'unsyntax-splicing G38bc@p) G38ab@q))) G38b8@G38b5 G38b7@G38b4 G38b6@G38b3))))) G38a7@G38a4 G38a6@G38a3 G38a5@G38a2)))) G389c@ls/false) ((lambda (G38c2@t) ((lambda (G38c4@ls/false) (if (if G38c4@ls/false (begin '#f (apply (lambda () (= G387c@lev '0)) G38c4@ls/false)) '#f) (apply (lambda () (G30ab@syntax-violation '#f '"incorrect use of unsyntax-splicing" G387b@p)) G38c4@ls/false) ((lambda (G38c6@t) ((lambda (G38c8@ls/false) (if G38c8@ls/false (apply (lambda (G38ca@p) (call-with-values (lambda () (G3863@quasi G38ca@p (+ G387c@lev '1))) (lambda (G38cf@G38cc G38d0@G38cd G38d1@G38ce) ((lambda (G38d5@p G38d6@rhs* G38d7@lhs*) (values G38d7@lhs* G38d6@rhs* (list 'quasisyntax G38d5@p))) G38d1@G38ce G38d0@G38cd G38cf@G38cc)))) G38c8@ls/false) ((lambda (G38db@t) ((lambda (G38dd@ls/false) (if G38dd@ls/false (apply (lambda (G38df@p G38e0@q) (call-with-values (lambda () (G3863@quasi G38df@p G387c@lev)) (lambda (G38e9@G38e3 G38ea@G38e4 G38eb@G38e5) (call-with-values (lambda () (G3863@quasi G38e0@q G387c@lev)) (lambda (G38ef@G38e6 G38f0@G38e7 G38f1@G38e8) ((lambda (G38f5@q G38f6@rhs2* G38f7@lhs2* G38f8@p G38f9@rhs* G38fa@lhs*) (values (append G38f7@lhs2* G38fa@lhs*) (append G38f6@rhs2* G38f9@rhs*) (cons G38f8@p G38f5@q))) G38f1@G38e8 G38f0@G38e7 G38ef@G38e6 G38eb@G38e5 G38ea@G38e4 G38e9@G38e3)))))) G38dd@ls/false) ((lambda (G3901@t) ((lambda (G3903@ls/false) (if (if G3903@ls/false (begin '#f (apply (lambda (G3905@x) (not (G2d47@stx? G387b@p))) G3903@ls/false)) '#f) (apply (lambda (G3907@x) (call-with-values (lambda () ((letrec ((G390c@f (lambda (G390e@x) (if (null? G390e@x) (values '() '() '()) (call-with-values (lambda () (G3863@quasi (car G390e@x) G387c@lev)) (lambda (G3913@G3910 G3914@G3911 G3915@G3912) ((lambda (G3919@a G391a@rhs* G391b@lhs*) (call-with-values (lambda () (G390c@f (cdr G390e@x))) (lambda (G3922@G391f G3923@G3920 G3924@G3921) ((lambda (G3928@d G3929@rhs2* G392a@lhs2*) (values (append G391b@lhs* G392a@lhs2*) (append G391a@rhs* G3929@rhs2*) (cons G3919@a G3928@d))) G3924@G3921 G3923@G3920 G3922@G391f)))) G3915@G3912 G3914@G3911 G3913@G3910))))))) G390c@f) G3907@x)) (lambda (G392e@G3909 G392f@G390a G3930@G390b) ((lambda (G3934@x* G3935@rhs* G3936@lhs*) (values G3936@lhs* G3935@rhs* (list->vector G3934@x*))) G3930@G390b G392f@G390a G392e@G3909)))) G3903@ls/false) ((lambda (G393a@t) ((lambda (G393c@ls/false) (if G393c@ls/false (apply (lambda () (values '() '() G387b@p)) G393c@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G393a@t))) (G2fc2@syntax-dispatch G393a@t '_))) G3901@t))) (G2fc2@syntax-dispatch G3901@t '#(vector each-any)))) G38db@t))) (G2fc2@syntax-dispatch G38db@t '(any . any)))) G38c6@t))) (G2fc2@syntax-dispatch G38c6@t '(#(scheme-id quasisyntax) any)))) G38c2@t))) (G2fc2@syntax-dispatch G38c2@t '#(scheme-id unsyntax-splicing)))) G389a@t))) (G2fc2@syntax-dispatch G389a@t '((#(scheme-id unsyntax-splicing) any) . any)))) G3896@t))) (G2fc2@syntax-dispatch G3896@t '#(scheme-id unsyntax)))) G387f@t))) (G2fc2@syntax-dispatch G387f@t '(#(scheme-id unsyntax) any)))) G387b@p))) (lambda (G3864@x) ((lambda (G3866@t) ((lambda (G3868@ls/false) (if G3868@ls/false (apply (lambda (G386a@e) (call-with-values (lambda () (G3863@quasi G386a@e '0)) (lambda (G386f@G386c G3870@G386d G3871@G386e) ((lambda (G3875@v G3876@rhs* G3877@lhs*) (G2f78@bless (list 'syntax-case (cons 'list G3876@rhs*) '() (list G3877@lhs* (list 'syntax G3875@v))))) G3871@G386e G3870@G386d G386f@G386c)))) G3868@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3866@t))) (G2fc2@syntax-dispatch G3866@t '(_ any)))) G3864@x)))) '#f)))) (set! G2fb4@define-struct-macro (lambda (G393e@stx) (G30ab@syntax-violation '#f '"define-struct not supported" G393e@stx))) (set! G2fb6@define-record-type-macro (lambda (G3940@x) ((lambda (G3943@id G3945@get-record-name G3947@get-record-constructor-name G3949@get-record-predicate-name G394b@get-clause G394d@foo-rtd-code G394f@parent-rtd-code G3951@parent-rcd-code G3953@foo-rcd-code G3955@get-protocol-code G3957@get-fields G3959@get-mutator-indices G395b@get-mutators G395d@get-accessors G395f@enumerate G3961@do-define-record G3963@verify-clauses) (begin (set! G3943@id (lambda (G3b3a@ctxt . G3b3c@str*) (G30af@datum->syntax G3b3a@ctxt (string->symbol (apply string-append (map (lambda (G3b3e@x) (if (symbol? G3b3e@x) (symbol->string G3b3e@x) (if (string? G3b3e@x) G3b3e@x (assertion-violation 'define-record-type '"BUG")))) G3b3c@str*)))))) (set! G3945@get-record-name (lambda (G3b28@spec) ((lambda (G3b2a@t) ((lambda (G3b2c@ls/false) (if G3b2c@ls/false (apply (lambda (G3b2e@foo G3b2f@make-foo G3b30@foo?) G3b2e@foo) G3b2c@ls/false) ((lambda (G3b34@t) ((lambda (G3b36@ls/false) (if G3b36@ls/false (apply (lambda (G3b38@foo) G3b38@foo) G3b36@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3b34@t))) (G2fc2@syntax-dispatch G3b34@t 'any))) G3b2a@t))) (G2fc2@syntax-dispatch G3b2a@t '(any any any)))) G3b28@spec))) (set! G3947@get-record-constructor-name (lambda (G3b14@spec) ((lambda (G3b16@t) ((lambda (G3b18@ls/false) (if G3b18@ls/false (apply (lambda (G3b1a@foo G3b1b@make-foo G3b1c@foo?) G3b1b@make-foo) G3b18@ls/false) ((lambda (G3b20@t) ((lambda (G3b22@ls/false) (if (if G3b22@ls/false (begin '#f (apply (lambda (G3b24@foo) (G2d7f@id? G3b24@foo)) G3b22@ls/false)) '#f) (apply (lambda (G3b26@foo) (G3943@id G3b26@foo '"make-" (G2d95@stx->datum G3b26@foo))) G3b22@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3b20@t))) (G2fc2@syntax-dispatch G3b20@t 'any))) G3b16@t))) (G2fc2@syntax-dispatch G3b16@t '(any any any)))) G3b14@spec))) (set! G3949@get-record-predicate-name (lambda (G3b00@spec) ((lambda (G3b02@t) ((lambda (G3b04@ls/false) (if G3b04@ls/false (apply (lambda (G3b06@foo G3b07@make-foo G3b08@foo?) G3b08@foo?) G3b04@ls/false) ((lambda (G3b0c@t) ((lambda (G3b0e@ls/false) (if (if G3b0e@ls/false (begin '#f (apply (lambda (G3b10@foo) (G2d7f@id? G3b10@foo)) G3b0e@ls/false)) '#f) (apply (lambda (G3b12@foo) (G3943@id G3b12@foo (G2d95@stx->datum G3b12@foo) '"?")) G3b0e@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3b0c@t))) (G2fc2@syntax-dispatch G3b0c@t 'any))) G3b02@t))) (G2fc2@syntax-dispatch G3b02@t '(any any any)))) G3b00@spec))) (set! G394b@get-clause (lambda (G3aee@id G3aef@ls) ((lambda (G3af2@t) ((lambda (G3af4@ls/false) (if G3af4@ls/false (apply (lambda () '#f) G3af4@ls/false) ((lambda (G3af6@t) ((lambda (G3af8@ls/false) (if G3af8@ls/false (apply (lambda (G3afa@x G3afb@rest G3afc@ls) (if (G2d87@free-id=? (G2f78@bless G3aee@id) G3afa@x) (cons G3afa@x G3afb@rest) (G394b@get-clause G3aee@id G3afc@ls))) G3af8@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3af6@t))) (G2fc2@syntax-dispatch G3af6@t '((any . any) . any)))) G3af2@t))) (G2fc2@syntax-dispatch G3af2@t '()))) G3aef@ls))) (set! G394d@foo-rtd-code (lambda (G3a9c@name G3a9d@clause* G3a9e@parent-rtd-code) ((lambda (G3aa3@convert-field-spec*) (begin (set! G3aa3@convert-field-spec* (lambda (G3ad4@ls) (list->vector (map (lambda (G3ad6@x) ((lambda (G3ad8@t) ((lambda (G3ada@ls/false) (if G3ada@ls/false (apply (lambda (G3adc@name G3add@rest) (list 'mutable G3adc@name)) G3ada@ls/false) ((lambda (G3ae0@t) ((lambda (G3ae2@ls/false) (if G3ae2@ls/false (apply (lambda (G3ae4@name G3ae5@rest) (list 'immutable G3ae4@name)) G3ae2@ls/false) ((lambda (G3ae8@t) ((lambda (G3aea@ls/false) (if G3aea@ls/false (apply (lambda (G3aec@name) (list 'immutable G3aec@name)) G3aea@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3ae8@t))) (G2fc2@syntax-dispatch G3ae8@t 'any))) G3ae0@t))) (G2fc2@syntax-dispatch G3ae0@t '(#(scheme-id immutable) any . any)))) G3ad8@t))) (G2fc2@syntax-dispatch G3ad8@t '(#(scheme-id mutable) any . any)))) G3ad6@x)) G3ad4@ls)))) ((lambda (G3aa4@uid-code G3aa5@sealed? G3aa6@opaque? G3aa7@fields) (G2f78@bless (list 'make-record-type-descriptor (list 'quote G3a9c@name) G3a9e@parent-rtd-code G3aa4@uid-code G3aa5@sealed? G3aa6@opaque? G3aa7@fields))) ((lambda (G3aac@t) ((lambda (G3aae@ls/false) (if G3aae@ls/false (apply (lambda () (list 'quote (gensym))) G3aae@ls/false) ((lambda (G3ab0@t) ((lambda (G3ab2@ls/false) (if G3ab2@ls/false (apply (lambda (G3ab4@uid) (list 'quote G3ab4@uid)) G3ab2@ls/false) ((lambda (G3ab6@t) ((lambda (G3ab8@ls/false) (if G3ab8@ls/false (apply (lambda () '#f) G3ab8@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3ab6@t))) (G2fc2@syntax-dispatch G3ab6@t '_))) G3ab0@t))) (G2fc2@syntax-dispatch G3ab0@t '(_ any)))) G3aac@t))) (G2fc2@syntax-dispatch G3aac@t '(_)))) (G394b@get-clause 'nongenerative G3a9d@clause*)) ((lambda (G3aba@t) ((lambda (G3abc@ls/false) (if G3abc@ls/false (apply (lambda () '#t) G3abc@ls/false) ((lambda (G3abe@t) ((lambda (G3ac0@ls/false) (if G3ac0@ls/false (apply (lambda () '#f) G3ac0@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3abe@t))) (G2fc2@syntax-dispatch G3abe@t '_))) G3aba@t))) (G2fc2@syntax-dispatch G3aba@t '(_ #(atom #t))))) (G394b@get-clause 'sealed G3a9d@clause*)) ((lambda (G3ac2@t) ((lambda (G3ac4@ls/false) (if G3ac4@ls/false (apply (lambda () '#t) G3ac4@ls/false) ((lambda (G3ac6@t) ((lambda (G3ac8@ls/false) (if G3ac8@ls/false (apply (lambda () '#f) G3ac8@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3ac6@t))) (G2fc2@syntax-dispatch G3ac6@t '_))) G3ac2@t))) (G2fc2@syntax-dispatch G3ac2@t '(_ #(atom #t))))) (G394b@get-clause 'opaque G3a9d@clause*)) ((lambda (G3aca@t) ((lambda (G3acc@ls/false) (if G3acc@ls/false (apply (lambda (G3ace@field-spec*) (list 'quote (G3aa3@convert-field-spec* G3ace@field-spec*))) G3acc@ls/false) ((lambda (G3ad0@t) ((lambda (G3ad2@ls/false) (if G3ad2@ls/false (apply (lambda () ''#()) G3ad2@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3ad0@t))) (G2fc2@syntax-dispatch G3ad0@t '_))) G3aca@t))) (G2fc2@syntax-dispatch G3aca@t '(_ . each-any)))) (G394b@get-clause 'fields G3a9d@clause*))))) '#f))) (set! G394f@parent-rtd-code (lambda (G3a84@clause*) ((lambda (G3a86@t) ((lambda (G3a88@ls/false) (if G3a88@ls/false (apply (lambda (G3a8a@name) (list 'record-type-descriptor G3a8a@name)) G3a88@ls/false) ((lambda (G3a8c@t) ((lambda (G3a8e@ls/false) (if G3a8e@ls/false (apply (lambda () ((lambda (G3a90@t) ((lambda (G3a92@ls/false) (if G3a92@ls/false (apply (lambda (G3a94@rtd G3a95@rcd) G3a94@rtd) G3a92@ls/false) ((lambda (G3a98@t) ((lambda (G3a9a@ls/false) (if G3a9a@ls/false (apply (lambda () '#f) G3a9a@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3a98@t))) (G2fc2@syntax-dispatch G3a98@t '#(atom #f)))) G3a90@t))) (G2fc2@syntax-dispatch G3a90@t '(_ any any)))) (G394b@get-clause 'parent-rtd G3a84@clause*))) G3a8e@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3a8c@t))) (G2fc2@syntax-dispatch G3a8c@t '#(atom #f)))) G3a86@t))) (G2fc2@syntax-dispatch G3a86@t '(_ any)))) (G394b@get-clause 'parent G3a84@clause*)))) (set! G3951@parent-rcd-code (lambda (G3a6c@clause*) ((lambda (G3a6e@t) ((lambda (G3a70@ls/false) (if G3a70@ls/false (apply (lambda (G3a72@name) (list 'record-constructor-descriptor G3a72@name)) G3a70@ls/false) ((lambda (G3a74@t) ((lambda (G3a76@ls/false) (if G3a76@ls/false (apply (lambda () ((lambda (G3a78@t) ((lambda (G3a7a@ls/false) (if G3a7a@ls/false (apply (lambda (G3a7c@rtd G3a7d@rcd) G3a7d@rcd) G3a7a@ls/false) ((lambda (G3a80@t) ((lambda (G3a82@ls/false) (if G3a82@ls/false (apply (lambda () '#f) G3a82@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3a80@t))) (G2fc2@syntax-dispatch G3a80@t '#(atom #f)))) G3a78@t))) (G2fc2@syntax-dispatch G3a78@t '(_ any any)))) (G394b@get-clause 'parent-rtd G3a6c@clause*))) G3a76@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3a74@t))) (G2fc2@syntax-dispatch G3a74@t '#(atom #f)))) G3a6e@t))) (G2fc2@syntax-dispatch G3a6e@t '(_ any)))) (G394b@get-clause 'parent G3a6c@clause*)))) (set! G3953@foo-rcd-code (lambda (G3a64@clause* G3a65@foo-rtd G3a66@protocol G3a67@parent-rcd-code) (list 'make-record-constructor-descriptor G3a65@foo-rtd G3a67@parent-rcd-code G3a66@protocol))) (set! G3955@get-protocol-code (lambda (G3a58@clause*) ((lambda (G3a5a@t) ((lambda (G3a5c@ls/false) (if G3a5c@ls/false (apply (lambda (G3a5e@expr) G3a5e@expr) G3a5c@ls/false) ((lambda (G3a60@t) ((lambda (G3a62@ls/false) (if G3a62@ls/false (apply (lambda () '#f) G3a62@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3a60@t))) (G2fc2@syntax-dispatch G3a60@t '_))) G3a5a@t))) (G2fc2@syntax-dispatch G3a5a@t '(_ any)))) (G394b@get-clause 'protocol G3a58@clause*)))) (set! G3957@get-fields (lambda (G3a46@clause*) ((lambda (G3a48@t) ((lambda (G3a4a@ls/false) (if G3a4a@ls/false (apply (lambda () '()) G3a4a@ls/false) ((lambda (G3a4c@t) ((lambda (G3a4e@ls/false) (if G3a4e@ls/false (apply (lambda (G3a50@f*) G3a50@f*) G3a4e@ls/false) ((lambda (G3a52@t) ((lambda (G3a54@ls/false) (if G3a54@ls/false (apply (lambda (G3a56@rest) (G3957@get-fields G3a56@rest)) G3a54@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3a52@t))) (G2fc2@syntax-dispatch G3a52@t '(_ . any)))) G3a4c@t))) (G2fc2@syntax-dispatch G3a4c@t '((#(scheme-id fields) . each-any) . _)))) G3a48@t))) (G2fc2@syntax-dispatch G3a48@t '()))) G3a46@clause*))) (set! G3959@get-mutator-indices (lambda (G3a2e@fields) ((letrec ((G3a30@f (lambda (G3a32@fields G3a33@i) ((lambda (G3a36@t) ((lambda (G3a38@ls/false) (if G3a38@ls/false (apply (lambda () '()) G3a38@ls/false) ((lambda (G3a3a@t) ((lambda (G3a3c@ls/false) (if G3a3c@ls/false (apply (lambda (G3a3e@rest) (cons G3a33@i (G3a30@f G3a3e@rest (+ G3a33@i '1)))) G3a3c@ls/false) ((lambda (G3a40@t) ((lambda (G3a42@ls/false) (if G3a42@ls/false (apply (lambda (G3a44@rest) (G3a30@f G3a44@rest (+ G3a33@i '1))) G3a42@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3a40@t))) (G2fc2@syntax-dispatch G3a40@t '(_ . any)))) G3a3a@t))) (G2fc2@syntax-dispatch G3a3a@t '((#(scheme-id mutable) . _) . any)))) G3a36@t))) (G2fc2@syntax-dispatch G3a36@t '()))) G3a32@fields)))) G3a30@f) G3a2e@fields '0))) (set! G395b@get-mutators (lambda (G3a04@foo G3a05@fields) ((lambda (G3a09@gen-name) (begin (set! G3a09@gen-name (lambda (G3a2c@x) (G30af@datum->syntax G3a04@foo (string->symbol (string-append (symbol->string (G30b1@syntax->datum G3a04@foo)) '"-" (symbol->string (G30b1@syntax->datum G3a2c@x)) '"-set!"))))) ((letrec ((G3a0a@f (lambda (G3a0c@fields) ((lambda (G3a0e@t) ((lambda (G3a10@ls/false) (if G3a10@ls/false (apply (lambda () '()) G3a10@ls/false) ((lambda (G3a12@t) ((lambda (G3a14@ls/false) (if G3a14@ls/false (apply (lambda (G3a16@name G3a17@accessor G3a18@mutator G3a19@rest) (cons G3a18@mutator (G3a0a@f G3a19@rest))) G3a14@ls/false) ((lambda (G3a1e@t) ((lambda (G3a20@ls/false) (if G3a20@ls/false (apply (lambda (G3a22@name G3a23@rest) (cons (G3a09@gen-name G3a22@name) (G3a0a@f G3a23@rest))) G3a20@ls/false) ((lambda (G3a26@t) ((lambda (G3a28@ls/false) (if G3a28@ls/false (apply (lambda (G3a2a@rest) (G3a0a@f G3a2a@rest)) G3a28@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3a26@t))) (G2fc2@syntax-dispatch G3a26@t '(_ . any)))) G3a1e@t))) (G2fc2@syntax-dispatch G3a1e@t '((#(scheme-id mutable) any) . any)))) G3a12@t))) (G2fc2@syntax-dispatch G3a12@t '((#(scheme-id mutable) any any any) . any)))) G3a0e@t))) (G2fc2@syntax-dispatch G3a0e@t '()))) G3a0c@fields)))) G3a0a@f) G3a05@fields))) '#f))) (set! G395d@get-accessors (lambda (G39c0@foo G39c1@fields) ((lambda (G39c5@gen-name) (begin (set! G39c5@gen-name (lambda (G3a02@x) (G30af@datum->syntax G39c0@foo (string->symbol (string-append (symbol->string (G30b1@syntax->datum G39c0@foo)) '"-" (symbol->string (G30b1@syntax->datum G3a02@x))))))) (map (lambda (G39c6@field) ((lambda (G39c8@t) ((lambda (G39ca@ls/false) (if (if G39ca@ls/false (begin '#f (apply (lambda (G39cc@name G39cd@accessor G39ce@mutator) (G2d7f@id? G39cd@accessor)) G39ca@ls/false)) '#f) (apply (lambda (G39d2@name G39d3@accessor G39d4@mutator) G39d3@accessor) G39ca@ls/false) ((lambda (G39d8@t) ((lambda (G39da@ls/false) (if (if G39da@ls/false (begin '#f (apply (lambda (G39dc@name G39dd@accessor) (G2d7f@id? G39dd@accessor)) G39da@ls/false)) '#f) (apply (lambda (G39e0@name G39e1@accessor) G39e1@accessor) G39da@ls/false) ((lambda (G39e4@t) ((lambda (G39e6@ls/false) (if (if G39e6@ls/false (begin '#f (apply (lambda (G39e8@name) (G2d7f@id? G39e8@name)) G39e6@ls/false)) '#f) (apply (lambda (G39ea@name) (G39c5@gen-name G39ea@name)) G39e6@ls/false) ((lambda (G39ec@t) ((lambda (G39ee@ls/false) (if (if G39ee@ls/false (begin '#f (apply (lambda (G39f0@name) (G2d7f@id? G39f0@name)) G39ee@ls/false)) '#f) (apply (lambda (G39f2@name) (G39c5@gen-name G39f2@name)) G39ee@ls/false) ((lambda (G39f4@t) ((lambda (G39f6@ls/false) (if (if G39f6@ls/false (begin '#f (apply (lambda (G39f8@name) (G2d7f@id? G39f8@name)) G39f6@ls/false)) '#f) (apply (lambda (G39fa@name) (G39c5@gen-name G39fa@name)) G39f6@ls/false) ((lambda (G39fc@t) ((lambda (G39fe@ls/false) (if G39fe@ls/false (apply (lambda (G3a00@others) (G30ab@syntax-violation '#f '"invalid field spec" G39c6@field)) G39fe@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G39fc@t))) (G2fc2@syntax-dispatch G39fc@t 'any))) G39f4@t))) (G2fc2@syntax-dispatch G39f4@t 'any))) G39ec@t))) (G2fc2@syntax-dispatch G39ec@t '(#(scheme-id immutable) any)))) G39e4@t))) (G2fc2@syntax-dispatch G39e4@t '(#(scheme-id mutable) any)))) G39d8@t))) (G2fc2@syntax-dispatch G39d8@t '(#(scheme-id immutable) any any)))) G39c8@t))) (G2fc2@syntax-dispatch G39c8@t '(#(scheme-id mutable) any any any)))) G39c6@field)) G39c1@fields))) '#f))) (set! G395f@enumerate (lambda (G39b8@ls) ((letrec ((G39ba@f (lambda (G39bc@ls G39bd@i) (if (null? G39bc@ls) '() (cons G39bd@i (G39ba@f (cdr G39bc@ls) (+ G39bd@i '1))))))) G39ba@f) G39b8@ls '0))) (set! G3961@do-define-record (lambda (G3990@namespec G3991@clause*) ((lambda (G3994@foo) ((lambda (G3996@foo-rtd) ((lambda (G3998@foo-rcd) ((lambda (G399a@protocol) ((lambda (G399c@make-foo) ((lambda (G399e@fields) ((lambda (G39a0@idx*) ((lambda (G39a2@foo-x*) ((lambda (G39a4@set-foo-x!*) ((lambda (G39a6@set-foo-idx*) ((lambda (G39a8@foo?) ((lambda (G39aa@foo-rtd-code) ((lambda (G39ac@foo-rcd-code) ((lambda (G39ae@protocol-code) ((lambda () (G2f78@bless (cons 'begin (cons (list 'define G3996@foo-rtd G39aa@foo-rtd-code) (cons (list 'define G399a@protocol G39ae@protocol-code) (cons (list 'define G3998@foo-rcd G39ac@foo-rcd-code) (cons (list 'define-syntax G3994@foo (list 'list ''$rtd (list 'syntax G3996@foo-rtd) (list 'syntax G3998@foo-rcd))) (cons (list 'define G39a8@foo? (list 'record-predicate G3996@foo-rtd)) (cons (list 'define G399c@make-foo (list 'record-constructor G3998@foo-rcd)) (append (map (lambda (G39b0@foo-x G39b1@idx) (list 'define G39b0@foo-x (list 'record-accessor G3996@foo-rtd G39b1@idx))) G39a2@foo-x* G39a0@idx*) (map (lambda (G39b4@set-foo-x! G39b5@idx) (list 'define G39b4@set-foo-x! (list 'record-mutator G3996@foo-rtd G39b5@idx))) G39a4@set-foo-x!* G39a6@set-foo-idx*))))))))))))) (G3955@get-protocol-code G3991@clause*))) (G3953@foo-rcd-code G3991@clause* G3996@foo-rtd G399a@protocol (G3951@parent-rcd-code G3991@clause*)))) (G394d@foo-rtd-code G3994@foo G3991@clause* (G394f@parent-rtd-code G3991@clause*)))) (G3949@get-record-predicate-name G3990@namespec))) (G3959@get-mutator-indices G399e@fields))) (G395b@get-mutators G3994@foo G399e@fields))) (G395d@get-accessors G3994@foo G399e@fields))) (G395f@enumerate G399e@fields))) (G3957@get-fields G3991@clause*))) (G3947@get-record-constructor-name G3990@namespec))) (gensym))) (gensym))) (gensym))) (G3945@get-record-name G3990@namespec)))) (set! G3963@verify-clauses (lambda (G396c@x G396d@cls*) ((lambda (G3971@valid-kwds G3973@free-id-member?) (begin (set! G3971@valid-kwds (map G2f78@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3973@free-id-member? (lambda (G398a@x G398b@ls) (if (pair? G398b@ls) (begin '#f ((lambda (G398e@t) (if G398e@t G398e@t (begin '#f (G3973@free-id-member? G398a@x (cdr G398b@ls))))) (G2d87@free-id=? G398a@x (car G398b@ls)))) '#f))) ((letrec ((G3974@f (lambda (G3976@cls* G3977@seen*) (if (null? G3976@cls*) (void) ((lambda (G397a@t) ((lambda (G397c@ls/false) (if G397c@ls/false (apply (lambda (G397e@kwd G397f@rest) (if ((lambda (G3982@t) (if G3982@t G3982@t (begin '#f (not (G3973@free-id-member? G397e@kwd G3971@valid-kwds))))) (not (G2d7f@id? G397e@kwd))) (G30ab@syntax-violation '#f '"not a valid define-record-type keyword" G397e@kwd) (if (G2d8d@bound-id-member? G397e@kwd G3977@seen*) (G30ab@syntax-violation '#f '"duplicate use of keyword " G396c@x G397e@kwd) (G3974@f (cdr G3976@cls*) (cons G397e@kwd G3977@seen*))))) G397c@ls/false) ((lambda (G3984@t) ((lambda (G3986@ls/false) (if G3986@ls/false (apply (lambda (G3988@cls) (G30ab@syntax-violation '#f '"malformed define-record-type clause" G3988@cls)) G3986@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3984@t))) (G2fc2@syntax-dispatch G3984@t 'any))) G397a@t))) (G2fc2@syntax-dispatch G397a@t '(any . any)))) (car G3976@cls*)))))) G3974@f) G396d@cls* '()))) '#f '#f))) ((lambda (G3964@t) ((lambda (G3966@ls/false) (if G3966@ls/false (apply (lambda (G3968@namespec G3969@clause*) (begin (G3963@verify-clauses G3940@x G3969@clause*) (G3961@do-define-record G3968@namespec G3969@clause*))) G3966@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3964@t))) (G2fc2@syntax-dispatch G3964@t '(_ any . each-any)))) G3940@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2fb8@define-condition-type-macro (lambda (G3b40@x) ((lambda (G3b43@mkname) (begin (set! G3b43@mkname (lambda (G3b70@name G3b71@suffix) (G30af@datum->syntax G3b70@name (string->symbol (string-append (symbol->string (G30b1@syntax->datum G3b70@name)) G3b71@suffix))))) ((lambda (G3b44@t) ((lambda (G3b46@ls/false) (if (if G3b46@ls/false (begin '#f (apply (lambda (G3b48@ctxt G3b49@name G3b4a@super G3b4b@constructor G3b4c@predicate G3b4d@field* G3b4e@accessor*) (if (G2d7f@id? G3b49@name) (if (G2d7f@id? G3b4a@super) (if (G2d7f@id? G3b4b@constructor) (if (G2d7f@id? G3b4c@predicate) (if (for-all G2d7f@id? G3b4d@field*) (begin '#f (for-all G2d7f@id? G3b4e@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3b46@ls/false)) '#f) (apply (lambda (G3b56@ctxt G3b57@name G3b58@super G3b59@constructor G3b5a@predicate G3b5b@field* G3b5c@accessor*) ((lambda (G3b64@aux-accessor*) (G2f78@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3b57@name G3b59@constructor (gensym)) (cons (list 'parent G3b58@super) (cons (cons 'fields (map (lambda (G3b66@field G3b67@aux) (list 'immutable G3b66@field G3b67@aux)) G3b5b@field* G3b64@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3b5a@predicate (list 'condition-predicate (list 'record-type-descriptor G3b57@name))) (map (lambda (G3b6a@accessor G3b6b@aux) (list 'define G3b6a@accessor (list 'condition-accessor (list 'record-type-descriptor G3b57@name) G3b6b@aux))) G3b5c@accessor* G3b64@aux-accessor*)))))) (map (lambda (G3b6e@x) (gensym)) G3b5c@accessor*))) G3b46@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3b44@t))) (G2fc2@syntax-dispatch G3b44@t '(any any any any any . #(each (any any)))))) G3b40@x))) '#f))) (set! G2fba@incorrect-usage-macro (lambda (G3b74@e) (G30ab@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b74@e))) (set! G2fbc@parameterize-transformer (lambda (G3b76@e G3b77@r G3b78@mr) ((lambda (G3b7c@t) ((lambda (G3b7e@ls/false) (if G3b7e@ls/false (apply (lambda (G3b80@b G3b81@b*) (G2ffc@chi-internal (cons G3b80@b G3b81@b*) G3b77@r G3b78@mr)) G3b7e@ls/false) ((lambda (G3b84@t) ((lambda (G3b86@ls/false) (if G3b86@ls/false (apply (lambda (G3b88@olhs* G3b89@orhs* G3b8a@b G3b8b@b*) ((lambda (G3b90@lhs* G3b91@rhs* G3b92@t* G3b93@swap) (G2ce3@G2c0d@build-let '#f (append G3b90@lhs* G3b91@rhs*) (append (G2fe2@chi-expr* G3b88@olhs* G3b77@r G3b78@mr) (G2fe2@chi-expr* G3b89@orhs* G3b77@r G3b78@mr)) (G2ce3@G2c0d@build-let '#f (list G3b93@swap) (list (G2ce1@G2c09@build-lambda '#f '() (G2ce4@G2c55@build-sequence '#f (map (lambda (G3b98@t G3b99@lhs G3b9a@rhs) (G2ce3@G2c0d@build-let '#f (list G3b98@t) (list (list G3b99@lhs)) (G2ce4@G2c55@build-sequence '#f (list (list G3b99@lhs G3b9a@rhs) (list 'set! G3b9a@rhs G3b98@t))))) G3b92@t* G3b90@lhs* G3b91@rhs*)))) (list '(primitive dynamic-wind) G3b93@swap (G2ce1@G2c09@build-lambda '#f '() (G2ffc@chi-internal (cons G3b8a@b G3b8b@b*) G3b77@r G3b78@mr)) G3b93@swap)))) (map (lambda (G3b9e@x) (G2d01@gen-lexical 'lhs)) G3b88@olhs*) (map (lambda (G3ba0@x) (G2d01@gen-lexical 'rhs)) G3b88@olhs*) (map (lambda (G3ba2@x) (G2d01@gen-lexical 't)) G3b88@olhs*) (G2d01@gen-lexical 'swap))) G3b86@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3b84@t))) (G2fc2@syntax-dispatch G3b84@t '(_ #(each (any any)) any . each-any)))) G3b7c@t))) (G2fc2@syntax-dispatch G3b7c@t '(_ () any . each-any)))) G3b76@e))) (set! G2fbe@foreign-call-transformer (lambda (G3ba4@e G3ba5@r G3ba6@mr) ((lambda (G3baa@t) ((lambda (G3bac@ls/false) (if G3bac@ls/false (apply (lambda (G3bae@name G3baf@arg*) (cons 'foreign-call (cons (G2fe6@chi-expr G3bae@name G3ba5@r G3ba6@mr) (G2fe2@chi-expr* G3baf@arg* G3ba5@r G3ba6@mr)))) G3bac@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3baa@t))) (G2fc2@syntax-dispatch G3baa@t '(_ any . each-any)))) G3ba4@e))) (set! G2fc0@convert-pattern (lambda (G3bb2@pattern G3bb3@keys) ((lambda (G3bb7@cvt* G3bb9@cvt) (begin (set! G3bb7@cvt* (lambda (G3c48@p* G3c49@n G3c4a@ids) (if (null? G3c48@p*) (values '() G3c4a@ids) (call-with-values (lambda () (G3bb7@cvt* (cdr G3c48@p*) G3c49@n G3c4a@ids)) (lambda (G3c50@G3c4e G3c51@G3c4f) ((lambda (G3c54@ids G3c55@y) (call-with-values (lambda () (G3bb9@cvt (car G3c48@p*) G3c49@n G3c54@ids)) (lambda (G3c5a@G3c58 G3c5b@G3c59) ((lambda (G3c5e@ids G3c5f@x) (values (cons G3c5f@x G3c55@y) G3c5e@ids)) G3c5b@G3c59 G3c5a@G3c58)))) G3c51@G3c4f G3c50@G3c4e)))))) (set! G3bb9@cvt (lambda (G3bba@p G3bbb@n G3bbc@ids) ((lambda (G3bc0@t) ((lambda (G3bc2@ls/false) (if (if G3bc2@ls/false (begin '#f (apply (lambda (G3bc4@id) (G2d7f@id? G3bc4@id)) G3bc2@ls/false)) '#f) (apply (lambda (G3bc6@id) (if (G2d8d@bound-id-member? G3bba@p G3bb3@keys) (values (vector 'free-id G3bba@p) G3bbc@ids) (if (G2d87@free-id=? G3bba@p (G2f50@scheme-stx '_)) (values '_ G3bbc@ids) (values 'any (cons (cons G3bba@p G3bbb@n) G3bbc@ids))))) G3bc2@ls/false) ((lambda (G3bc8@t) ((lambda (G3bca@ls/false) (if (if G3bca@ls/false (begin '#f (apply (lambda (G3bcc@p G3bcd@dots) (G2fc4@ellipsis? G3bcd@dots)) G3bca@ls/false)) '#f) (apply (lambda (G3bd0@p G3bd1@dots) (call-with-values (lambda () (G3bb9@cvt G3bd0@p (+ G3bbb@n '1) G3bbc@ids)) (lambda (G3bd6@G3bd4 G3bd7@G3bd5) ((lambda (G3bda@ids G3bdb@p) (values (if (eq? G3bdb@p 'any) 'each-any (vector 'each G3bdb@p)) G3bda@ids)) G3bd7@G3bd5 G3bd6@G3bd4)))) G3bca@ls/false) ((lambda (G3bde@t) ((lambda (G3be0@ls/false) (if (if G3be0@ls/false (begin '#f (apply (lambda (G3be2@x G3be3@dots G3be4@ys G3be5@z) (G2fc4@ellipsis? G3be3@dots)) G3be0@ls/false)) '#f) (apply (lambda (G3bea@x G3beb@dots G3bec@ys G3bed@z) (call-with-values (lambda () (G3bb9@cvt G3bed@z G3bbb@n G3bbc@ids)) (lambda (G3bf4@G3bf2 G3bf5@G3bf3) ((lambda (G3bf8@ids G3bf9@z) (call-with-values (lambda () (G3bb7@cvt* G3bec@ys G3bbb@n G3bf8@ids)) (lambda (G3bfe@G3bfc G3bff@G3bfd) ((lambda (G3c02@ids G3c03@ys) (call-with-values (lambda () (G3bb9@cvt G3bea@x (+ G3bbb@n '1) G3c02@ids)) (lambda (G3c08@G3c06 G3c09@G3c07) ((lambda (G3c0c@ids G3c0d@x) (values (vector 'each+ G3c0d@x (reverse G3c03@ys) G3bf9@z) G3c0c@ids)) G3c09@G3c07 G3c08@G3c06)))) G3bff@G3bfd G3bfe@G3bfc)))) G3bf5@G3bf3 G3bf4@G3bf2)))) G3be0@ls/false) ((lambda (G3c10@t) ((lambda (G3c12@ls/false) (if G3c12@ls/false (apply (lambda (G3c14@x G3c15@y) (call-with-values (lambda () (G3bb9@cvt G3c15@y G3bbb@n G3bbc@ids)) (lambda (G3c1a@G3c18 G3c1b@G3c19) ((lambda (G3c1e@ids G3c1f@y) (call-with-values (lambda () (G3bb9@cvt G3c14@x G3bbb@n G3c1e@ids)) (lambda (G3c24@G3c22 G3c25@G3c23) ((lambda (G3c28@ids G3c29@x) (values (cons G3c29@x G3c1f@y) G3c28@ids)) G3c25@G3c23 G3c24@G3c22)))) G3c1b@G3c19 G3c1a@G3c18)))) G3c12@ls/false) ((lambda (G3c2c@t) ((lambda (G3c2e@ls/false) (if G3c2e@ls/false (apply (lambda () (values '() G3bbc@ids)) G3c2e@ls/false) ((lambda (G3c30@t) ((lambda (G3c32@ls/false) (if (if G3c32@ls/false (begin '#f (apply (lambda (G3c34@p) (not (G2d47@stx? G3c34@p))) G3c32@ls/false)) '#f) (apply (lambda (G3c36@p) (call-with-values (lambda () (G3bb9@cvt G3c36@p G3bbb@n G3bbc@ids)) (lambda (G3c3a@G3c38 G3c3b@G3c39) ((lambda (G3c3e@ids G3c3f@p) (values (vector 'vector G3c3f@p) G3c3e@ids)) G3c3b@G3c39 G3c3a@G3c38)))) G3c32@ls/false) ((lambda (G3c42@t) ((lambda (G3c44@ls/false) (if G3c44@ls/false (apply (lambda (G3c46@datum) (values (vector 'atom (G2d95@stx->datum G3c46@datum)) G3bbc@ids)) G3c44@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3c42@t))) (G2fc2@syntax-dispatch G3c42@t 'any))) G3c30@t))) (G2fc2@syntax-dispatch G3c30@t '#(vector each-any)))) G3c2c@t))) (G2fc2@syntax-dispatch G3c2c@t '()))) G3c10@t))) (G2fc2@syntax-dispatch G3c10@t '(any . any)))) G3bde@t))) (G2fc2@syntax-dispatch G3bde@t '(any any . #(each+ any () any))))) G3bc8@t))) (G2fc2@syntax-dispatch G3bc8@t '(any any)))) G3bc0@t))) (G2fc2@syntax-dispatch G3bc0@t 'any))) G3bba@p))) (G3bb9@cvt G3bb2@pattern '0 '()))) '#f '#f))) (set! G2fc2@syntax-dispatch (lambda (G3c62@e G3c63@p) ((lambda (G3c67@stx^ G3c69@match-each G3c6b@match-each+ G3c6d@match-each-any G3c6f@match-empty G3c71@combine G3c73@match* G3c75@match) (begin (set! G3c67@stx^ (lambda (G3d2a@e G3d2b@m* G3d2c@s* G3d2d@ae*) (if (if (null? G3d2b@m*) (if (null? G3d2c@s*) (begin '#f (null? G3d2d@ae*)) '#f) '#f) G3d2a@e (G2d67@mkstx G3d2a@e G3d2b@m* G3d2c@s* G3d2d@ae*)))) (set! G3c69@match-each (lambda (G3d0d@e G3d0e@p G3d0f@m* G3d10@s* G3d11@ae*) (if (pair? G3d0d@e) ((lambda (G3d17@first) (if G3d17@first (begin '#f ((lambda (G3d19@rest) (if G3d19@rest (begin '#f (cons G3d17@first G3d19@rest)) '#f)) (G3c69@match-each (cdr G3d0d@e) G3d0e@p G3d0f@m* G3d10@s* G3d11@ae*))) '#f)) (G3c75@match (car G3d0d@e) G3d0e@p G3d0f@m* G3d10@s* G3d11@ae* '())) (if (null? G3d0d@e) '() (if (G2d47@stx? G3d0d@e) (if (not (G2cff@top-marked? G3d0f@m*)) (begin '#f (call-with-values (lambda () (G2d65@join-wraps G3d0f@m* G3d10@s* G3d11@ae* G3d0d@e)) (lambda (G3d1e@G3d1b G3d1f@G3d1c G3d20@G3d1d) ((lambda (G3d24@ae* G3d25@s* G3d26@m*) (G3c69@match-each (G2d4b@stx-expr G3d0d@e) G3d0e@p G3d26@m* G3d25@s* G3d24@ae*)) G3d20@G3d1d G3d1f@G3d1c G3d1e@G3d1b)))) '#f) (if (G28d7@G2802@annotation? G3d0d@e) (G3c69@match-each (G28d9@G2806@annotation-expression G3d0d@e) G3d0e@p G3d0f@m* G3d10@s* G3d11@ae*) '#f)))))) (set! G3c6b@match-each+ (lambda (G3cd3@e G3cd4@x-pat G3cd5@y-pat G3cd6@z-pat G3cd7@m* G3cd8@s* G3cd9@ae* G3cda@r) ((letrec ((G3ce3@f (lambda (G3ce5@e G3ce6@m* G3ce7@s* G3ce8@ae*) (if (pair? G3ce5@e) (call-with-values (lambda () (G3ce3@f (cdr G3ce5@e) G3ce6@m* G3ce7@s* G3ce8@ae*)) (lambda (G3cf0@G3ced G3cf1@G3cee G3cf2@G3cef) ((lambda (G3cf6@r G3cf7@y-pat G3cf8@xr*) (if G3cf6@r (if (null? G3cf7@y-pat) ((lambda (G3cfc@xr) (if G3cfc@xr (values (cons G3cfc@xr G3cf8@xr*) G3cf7@y-pat G3cf6@r) (values '#f '#f '#f))) (G3c75@match (car G3ce5@e) G3cd4@x-pat G3ce6@m* G3ce7@s* G3ce8@ae* '())) (values '() (cdr G3cf7@y-pat) (G3c75@match (car G3ce5@e) (car G3cf7@y-pat) G3ce6@m* G3ce7@s* G3ce8@ae* G3cf6@r))) (values '#f '#f '#f))) G3cf2@G3cef G3cf1@G3cee G3cf0@G3ced))) (if (G2d47@stx? G3ce5@e) (if (G2cff@top-marked? G3ce6@m*) (values '() G3cd5@y-pat (G3c75@match G3ce5@e G3cd6@z-pat G3ce6@m* G3ce7@s* G3ce8@ae* G3cda@r)) (call-with-values (lambda () (G2d65@join-wraps G3ce6@m* G3ce7@s* G3ce8@ae* G3ce5@e)) (lambda (G3d01@G3cfe G3d02@G3cff G3d03@G3d00) ((lambda (G3d07@ae* G3d08@s* G3d09@m*) (G3ce3@f (G2d4b@stx-expr G3ce5@e) G3d09@m* G3d08@s* G3d07@ae*)) G3d03@G3d00 G3d02@G3cff G3d01@G3cfe)))) (if (G28d7@G2802@annotation? G3ce5@e) (G3ce3@f (G28d9@G2806@annotation-expression G3ce5@e) G3ce6@m* G3ce7@s* G3ce8@ae*) (values '() G3cd5@y-pat (G3c75@match G3ce5@e G3cd6@z-pat G3ce6@m* G3ce7@s* G3ce8@ae* G3cda@r)))))))) G3ce3@f) G3cd3@e G3cd7@m* G3cd8@s* G3cd9@ae*))) (set! G3c6d@match-each-any (lambda (G3cba@e G3cbb@m* G3cbc@s* G3cbd@ae*) (if (pair? G3cba@e) ((lambda (G3cc2@l) (if G3cc2@l (begin '#f (cons (G3c67@stx^ (car G3cba@e) G3cbb@m* G3cbc@s* G3cbd@ae*) G3cc2@l)) '#f)) (G3c6d@match-each-any (cdr G3cba@e) G3cbb@m* G3cbc@s* G3cbd@ae*)) (if (null? G3cba@e) '() (if (G2d47@stx? G3cba@e) (if (not (G2cff@top-marked? G3cbb@m*)) (begin '#f (call-with-values (lambda () (G2d65@join-wraps G3cbb@m* G3cbc@s* G3cbd@ae* G3cba@e)) (lambda (G3cc7@G3cc4 G3cc8@G3cc5 G3cc9@G3cc6) ((lambda (G3ccd@ae* G3cce@s* G3ccf@m*) (G3c6d@match-each-any (G2d4b@stx-expr G3cba@e) G3ccf@m* G3cce@s* G3ccd@ae*)) G3cc9@G3cc6 G3cc8@G3cc5 G3cc7@G3cc4)))) '#f) (if (G28d7@G2802@annotation? G3cba@e) (G3c6d@match-each-any (G28d9@G2806@annotation-expression G3cba@e) G3cbb@m* G3cbc@s* G3cbd@ae*) '#f)))))) (set! G3c6f@match-empty (lambda (G3cb5@p G3cb6@r) (if (null? G3cb5@p) G3cb6@r (if (eq? G3cb5@p '_) G3cb6@r (if (eq? G3cb5@p 'any) (cons '() G3cb6@r) (if (pair? G3cb5@p) (G3c6f@match-empty (car G3cb5@p) (G3c6f@match-empty (cdr G3cb5@p) G3cb6@r)) (if (eq? G3cb5@p 'each-any) (cons '() G3cb6@r) ((lambda (G3cb9@t) (if (eqv? G3cb9@t 'each) (G3c6f@match-empty (vector-ref G3cb5@p '1) G3cb6@r) (if (eqv? G3cb9@t 'each+) (G3c6f@match-empty (vector-ref G3cb5@p '1) (G3c6f@match-empty (reverse (vector-ref G3cb5@p '2)) (G3c6f@match-empty (vector-ref G3cb5@p '3) G3cb6@r))) (if (memv G3cb9@t '(free-id atom)) G3cb6@r (if (memv G3cb9@t '(scheme-id atom)) G3cb6@r (if (eqv? G3cb9@t 'vector) (G3c6f@match-empty (vector-ref G3cb5@p '1) G3cb6@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3cb5@p))))))) (vector-ref G3cb5@p '0))))))))) (set! G3c71@combine (lambda (G3cb1@r* G3cb2@r) (if (null? (car G3cb1@r*)) G3cb2@r (cons (map car G3cb1@r*) (G3c71@combine (map cdr G3cb1@r*) G3cb2@r))))) (set! G3c73@match* (lambda (G3c91@e G3c92@p G3c93@m* G3c94@s* G3c95@ae* G3c96@r) (if (null? G3c92@p) (if (null? G3c91@e) (begin '#f G3c96@r) '#f) (if (pair? G3c92@p) (if (pair? G3c91@e) (begin '#f (G3c75@match (car G3c91@e) (car G3c92@p) G3c93@m* G3c94@s* G3c95@ae* (G3c75@match (cdr G3c91@e) (cdr G3c92@p) G3c93@m* G3c94@s* G3c95@ae* G3c96@r))) '#f) (if (eq? G3c92@p 'each-any) ((lambda (G3c9d@l) (if G3c9d@l (begin '#f (cons G3c9d@l G3c96@r)) '#f)) (G3c6d@match-each-any G3c91@e G3c93@m* G3c94@s* G3c95@ae*)) ((lambda (G3c9f@t) (if (eqv? G3c9f@t 'each) (if (null? G3c91@e) (G3c6f@match-empty (vector-ref G3c92@p '1) G3c96@r) ((lambda (G3caf@r*) (if G3caf@r* (begin '#f (G3c71@combine G3caf@r* G3c96@r)) '#f)) (G3c69@match-each G3c91@e (vector-ref G3c92@p '1) G3c93@m* G3c94@s* G3c95@ae*))) (if (eqv? G3c9f@t 'free-id) (if (symbol? G3c91@e) (if (G2cff@top-marked? G3c93@m*) (if (G2d87@free-id=? (G3c67@stx^ G3c91@e G3c93@m* G3c94@s* G3c95@ae*) (vector-ref G3c92@p '1)) (begin '#f G3c96@r) '#f) '#f) '#f) (if (eqv? G3c9f@t 'scheme-id) (if (symbol? G3c91@e) (if (G2cff@top-marked? G3c93@m*) (if (G2d87@free-id=? (G3c67@stx^ G3c91@e G3c93@m* G3c94@s* G3c95@ae*) (G2f50@scheme-stx (vector-ref G3c92@p '1))) (begin '#f G3c96@r) '#f) '#f) '#f) (if (eqv? G3c9f@t 'each+) (call-with-values (lambda () (G3c6b@match-each+ G3c91@e (vector-ref G3c92@p '1) (vector-ref G3c92@p '2) (vector-ref G3c92@p '3) G3c93@m* G3c94@s* G3c95@ae* G3c96@r)) (lambda (G3ca3@G3ca0 G3ca4@G3ca1 G3ca5@G3ca2) ((lambda (G3ca9@r G3caa@y-pat G3cab@xr*) (if G3ca9@r (if (null? G3caa@y-pat) (begin '#f (if (null? G3cab@xr*) (G3c6f@match-empty (vector-ref G3c92@p '1) G3ca9@r) (G3c71@combine G3cab@xr* G3ca9@r))) '#f) '#f)) G3ca5@G3ca2 G3ca4@G3ca1 G3ca3@G3ca0))) (if (eqv? G3c9f@t 'atom) (if (equal? (vector-ref G3c92@p '1) (G2d93@strip G3c91@e G3c93@m*)) (begin '#f G3c96@r) '#f) (if (eqv? G3c9f@t 'vector) (if (vector? G3c91@e) (begin '#f (G3c75@match (vector->list G3c91@e) (vector-ref G3c92@p '1) G3c93@m* G3c94@s* G3c95@ae* G3c96@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c92@p)))))))) (vector-ref G3c92@p '0))))))) (set! G3c75@match (lambda (G3c76@e G3c77@p G3c78@m* G3c79@s* G3c7a@ae* G3c7b@r) (if (not G3c7b@r) '#f (if (eq? G3c77@p '_) G3c7b@r (if (eq? G3c77@p 'any) (cons (G3c67@stx^ G3c76@e G3c78@m* G3c79@s* G3c7a@ae*) G3c7b@r) (if (G2d47@stx? G3c76@e) (if (not (G2cff@top-marked? G3c78@m*)) (begin '#f (call-with-values (lambda () (G2d65@join-wraps G3c78@m* G3c79@s* G3c7a@ae* G3c76@e)) (lambda (G3c85@G3c82 G3c86@G3c83 G3c87@G3c84) ((lambda (G3c8b@ae* G3c8c@s* G3c8d@m*) (G3c75@match (G2d4b@stx-expr G3c76@e) G3c77@p G3c8d@m* G3c8c@s* G3c8b@ae* G3c7b@r)) G3c87@G3c84 G3c86@G3c83 G3c85@G3c82)))) '#f) (if (G28d7@G2802@annotation? G3c76@e) (G3c75@match (G28d9@G2806@annotation-expression G3c76@e) G3c77@p G3c78@m* G3c79@s* G3c7a@ae* G3c7b@r) (G3c73@match* G3c76@e G3c77@p G3c78@m* G3c79@s* G3c7a@ae* G3c7b@r)))))))) (G3c75@match G3c62@e G3c63@p '() '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2fc4@ellipsis? (lambda (G3d32@x) (if (G2d7f@id? G3d32@x) (begin '#f (G2d87@free-id=? G3d32@x (G2f50@scheme-stx '...))) '#f))) (set! G2fc6@underscore? (lambda (G3d34@x) (if (G2d7f@id? G3d34@x) (begin '#f (G2d87@free-id=? G3d34@x (G2f50@scheme-stx '_))) '#f))) (set! G2fc8@verify-literals (lambda (G3d36@lits G3d37@expr) (for-each (lambda (G3d3a@x) (if ((lambda (G3d3c@t) (if G3d3c@t G3d3c@t ((lambda (G3d3e@t) (if G3d3e@t G3d3e@t (begin '#f (G2fc6@underscore? G3d3a@x)))) (G2fc4@ellipsis? G3d3a@x)))) (not (G2d7f@id? G3d3a@x))) (G30ab@syntax-violation '#f '"invalid literal" G3d37@expr G3d3a@x) (void))) G3d36@lits))) (set! G2fca@syntax-case-transformer ((lambda () ((lambda (G3d41@build-dispatch-call G3d43@invalid-ids-error G3d45@gen-clause G3d47@gen-syntax-case) (begin (set! G3d41@build-dispatch-call (lambda (G3db0@pvars G3db1@expr G3db2@y G3db3@r G3db4@mr) ((lambda (G3dba@ids G3dbb@levels) ((lambda (G3dbe@labels G3dbf@new-vars) ((lambda (G3dc2@body) (list '(primitive apply) (G2ce1@G2c09@build-lambda '#f G3dbf@new-vars G3dc2@body) G3db2@y)) (G2fe6@chi-expr (G2d6b@add-subst (G2d38@make-full-rib G3dba@ids G3dbe@labels) G3db1@expr) (append (map (lambda (G3dc4@label G3dc5@var G3dc6@level) (cons G3dc4@label (G2d9f@make-binding 'syntax (cons G3dc5@var G3dc6@level)))) G3dbe@labels G3dbf@new-vars (map cdr G3db0@pvars)) G3db3@r) G3db4@mr))) (map G2d05@gen-label G3dba@ids) (map G2d01@gen-lexical G3dba@ids))) (map car G3db0@pvars) (map cdr G3db0@pvars)))) (set! G3d43@invalid-ids-error (lambda (G3da4@id* G3da5@e G3da6@class) ((letrec ((G3daa@find (lambda (G3dac@id* G3dad@ok*) (if (null? G3dac@id*) (G30ab@syntax-violation '#f '"invalid syntax" G3da5@e) (if (G2d7f@id? (car G3dac@id*)) (if (G2d8d@bound-id-member? (car G3dac@id*) G3dad@ok*) (G30a5@syntax-error (car G3dac@id*) '"duplicate " G3da6@class) (G3daa@find (cdr G3dac@id*) (cons (car G3dac@id*) G3dad@ok*))) (G30a5@syntax-error (car G3dac@id*) '"invalid " G3da6@class)))))) G3daa@find) G3da4@id* '()))) (set! G3d45@gen-clause (lambda (G3d7e@x G3d7f@keys G3d80@clauses G3d81@r G3d82@mr G3d83@pat G3d84@fender G3d85@expr) (call-with-values (lambda () (G2fc0@convert-pattern G3d83@pat G3d7f@keys)) (lambda (G3d90@G3d8e G3d91@G3d8f) ((lambda (G3d94@pvars G3d95@p) (if (not (G2d8b@distinct-bound-ids? (map car G3d94@pvars))) (G3d43@invalid-ids-error (map car G3d94@pvars) G3d83@pat '"pattern variable") (if (not (for-all (lambda (G3d98@x) (not (G2fc4@ellipsis? (car G3d98@x)))) G3d94@pvars)) (G30ab@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d83@pat) ((lambda (G3d9a@y) ((lambda (G3d9c@test) ((lambda (G3d9e@conseq) ((lambda (G3da0@altern) (list (G2ce1@G2c09@build-lambda '#f (list G3d9a@y) (list 'if G3d9c@test G3d9e@conseq G3da0@altern)) (list '(primitive syntax-dispatch) G3d7e@x (list 'quote G3d95@p)))) (G3d47@gen-syntax-case G3d7e@x G3d7f@keys G3d80@clauses G3d81@r G3d82@mr))) (G3d41@build-dispatch-call G3d94@pvars G3d85@expr G3d9a@y G3d81@r G3d82@mr))) (if (eq? G3d84@fender '#t) G3d9a@y ((lambda (G3da2@call) (list 'if G3d9a@y G3da2@call (list 'quote '#f))) (G3d41@build-dispatch-call G3d94@pvars G3d84@fender G3d9a@y G3d81@r G3d82@mr))))) (G2d01@gen-lexical 'tmp))))) G3d91@G3d8f G3d90@G3d8e))))) (set! G3d47@gen-syntax-case (lambda (G3d5c@x G3d5d@keys G3d5e@clauses G3d5f@r G3d60@mr) (if (null? G3d5e@clauses) (list '(primitive syntax-error) G3d5c@x) ((lambda (G3d66@t) ((lambda (G3d68@ls/false) (if G3d68@ls/false (apply (lambda (G3d6a@pat G3d6b@expr) (if (if (G2d7f@id? G3d6a@pat) (if (not (G2d8d@bound-id-member? G3d6a@pat G3d5d@keys)) (begin '#f (not (G2fc4@ellipsis? G3d6a@pat))) '#f) '#f) (if (G2d87@free-id=? G3d6a@pat (G2f50@scheme-stx '_)) (G2fe6@chi-expr G3d6b@expr G3d5f@r G3d60@mr) ((lambda (G3d6e@lab G3d6f@lex) ((lambda (G3d72@body) (list (G2ce1@G2c09@build-lambda '#f (list G3d6f@lex) G3d72@body) G3d5c@x)) (G2fe6@chi-expr (G2d6b@add-subst (G2d38@make-full-rib (list G3d6a@pat) (list G3d6e@lab)) G3d6b@expr) (cons (cons G3d6e@lab (G2d9f@make-binding 'syntax (cons G3d6f@lex '0))) G3d5f@r) G3d60@mr))) (G2d05@gen-label G3d6a@pat) (G2d01@gen-lexical G3d6a@pat))) (G3d45@gen-clause G3d5c@x G3d5d@keys (cdr G3d5e@clauses) G3d5f@r G3d60@mr G3d6a@pat '#t G3d6b@expr))) G3d68@ls/false) ((lambda (G3d74@t) ((lambda (G3d76@ls/false) (if G3d76@ls/false (apply (lambda (G3d78@pat G3d79@fender G3d7a@expr) (G3d45@gen-clause G3d5c@x G3d5d@keys (cdr G3d5e@clauses) G3d5f@r G3d60@mr G3d78@pat G3d79@fender G3d7a@expr)) G3d76@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3d74@t))) (G2fc2@syntax-dispatch G3d74@t '(any any any)))) G3d66@t))) (G2fc2@syntax-dispatch G3d66@t '(any any)))) (car G3d5e@clauses))))) (lambda (G3d48@e G3d49@r G3d4a@mr) ((lambda (G3d4e@t) ((lambda (G3d50@ls/false) (if G3d50@ls/false (apply (lambda (G3d52@expr G3d53@keys G3d54@clauses) (begin (G2fc8@verify-literals G3d53@keys G3d48@e) ((lambda (G3d58@x) ((lambda (G3d5a@body) (list (G2ce1@G2c09@build-lambda '#f (list G3d58@x) G3d5a@body) (G2fe6@chi-expr G3d52@expr G3d49@r G3d4a@mr))) (G3d47@gen-syntax-case G3d58@x G3d53@keys G3d54@clauses G3d49@r G3d4a@mr))) (G2d01@gen-lexical 'tmp)))) G3d50@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3d4e@t))) (G2fc2@syntax-dispatch G3d4e@t '(_ any each-any . each-any)))) G3d48@e)))) '#f '#f '#f '#f)))) (set! G2fcc@ellipsis-map (lambda (G3dca@proc G3dcb@ls . G3dce@ls*) ((lambda (G3dd1@who) (begin (set! G3dd1@who '...) (begin (if (list? G3dcb@ls) (void) (assertion-violation G3dd1@who '"not a list" G3dcb@ls)) (if (null? G3dce@ls*) (void) ((lambda (G3dd2@n) (for-each (lambda (G3dd4@x) (begin (if (list? G3dd4@x) (void) (assertion-violation G3dd1@who '"not a list" G3dd4@x)) (if (= (length G3dd4@x) G3dd2@n) (void) (assertion-violation G3dd1@who '"length mismatch" G3dcb@ls G3dd4@x)))) G3dce@ls*)) (length G3dcb@ls))) (apply map G3dca@proc G3dcb@ls G3dce@ls*)))) '#f))) (set! G2fce@syntax-transformer ((lambda () ((lambda (G3dd7@gen-syntax G3dd9@gen-ref G3ddb@gen-append G3ddd@gen-mappend G3ddf@gen-map G3de1@gen-cons G3de3@gen-vector G3de5@regen) (begin (set! G3dd7@gen-syntax (lambda (G3e48@src G3e49@e G3e4a@r G3e4b@maps G3e4c@ellipsis? G3e4d@vec?) ((lambda (G3e54@t) ((lambda (G3e56@ls/false) (if (if G3e56@ls/false (begin '#f (apply (lambda (G3e58@dots) (G3e4c@ellipsis? G3e58@dots)) G3e56@ls/false)) '#f) (apply (lambda (G3e5a@dots) (G30ab@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e48@src)) G3e56@ls/false) ((lambda (G3e5c@t) ((lambda (G3e5e@ls/false) (if (if G3e5e@ls/false (begin '#f (apply (lambda (G3e60@id) (G2d7f@id? G3e60@id)) G3e5e@ls/false)) '#f) (apply (lambda (G3e62@id) ((lambda (G3e64@label) ((lambda (G3e66@b) ((lambda () (if (eq? (G2da1@binding-type G3e66@b) 'syntax) (call-with-values (lambda () ((lambda (G3e6a@var.lev) (G3dd9@gen-ref G3e48@src (car G3e6a@var.lev) (cdr G3e6a@var.lev) G3e4b@maps)) (G2da3@binding-value G3e66@b))) (lambda (G3e6c@G3e68 G3e6d@G3e69) ((lambda (G3e70@maps G3e71@var) (values (list 'ref G3e71@var) G3e70@maps)) G3e6d@G3e69 G3e6c@G3e68))) (values (list 'quote G3e49@e) G3e4b@maps))))) (G2d9d@label->binding G3e64@label G3e4a@r))) (G2d99@id->label G3e49@e))) G3e5e@ls/false) ((lambda (G3e74@t) ((lambda (G3e76@ls/false) (if (if G3e76@ls/false (begin '#f (apply (lambda (G3e78@dots G3e79@e) (G3e4c@ellipsis? G3e78@dots)) G3e76@ls/false)) '#f) (apply (lambda (G3e7c@dots G3e7d@e) (if G3e4d@vec? (G30ab@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e48@src) (G3dd7@gen-syntax G3e48@src G3e7d@e G3e4a@r G3e4b@maps (lambda (G3e80@x) '#f) '#f))) G3e76@ls/false) ((lambda (G3e82@t) ((lambda (G3e84@ls/false) (if (if G3e84@ls/false (begin '#f (apply (lambda (G3e86@x G3e87@dots G3e88@y) (G3e4c@ellipsis? G3e87@dots)) G3e84@ls/false)) '#f) (apply (lambda (G3e8c@x G3e8d@dots G3e8e@y) ((letrec ((G3e92@f (lambda (G3e94@y G3e95@k) ((lambda (G3e98@t) ((lambda (G3e9a@ls/false) (if G3e9a@ls/false (apply (lambda () (G3e95@k G3e4b@maps)) G3e9a@ls/false) ((lambda (G3e9c@t) ((lambda (G3e9e@ls/false) (if (if G3e9e@ls/false (begin '#f (apply (lambda (G3ea0@dots G3ea1@y) (G3e4c@ellipsis? G3ea0@dots)) G3e9e@ls/false)) '#f) (apply (lambda (G3ea4@dots G3ea5@y) (G3e92@f G3ea5@y (lambda (G3ea8@maps) (call-with-values (lambda () (G3e95@k (cons '() G3ea8@maps))) (lambda (G3eac@G3eaa G3ead@G3eab) ((lambda (G3eb0@maps G3eb1@x) (if (null? (car G3eb0@maps)) (G30ab@syntax-violation '#f '"extra ellipsis in syntax form" G3e48@src) (values (G3ddd@gen-mappend G3eb1@x (car G3eb0@maps)) (cdr G3eb0@maps)))) G3ead@G3eab G3eac@G3eaa)))))) G3e9e@ls/false) ((lambda (G3eb4@t) ((lambda (G3eb6@ls/false) (if G3eb6@ls/false (apply (lambda () (call-with-values (lambda () (G3dd7@gen-syntax G3e48@src G3e94@y G3e4a@r G3e4b@maps G3e4c@ellipsis? G3e4d@vec?)) (lambda (G3eba@G3eb8 G3ebb@G3eb9) ((lambda (G3ebe@maps G3ebf@y) (call-with-values (lambda () (G3e95@k G3ebe@maps)) (lambda (G3ec4@G3ec2 G3ec5@G3ec3) ((lambda (G3ec8@maps G3ec9@x) (values (G3ddb@gen-append G3ec9@x G3ebf@y) G3ec8@maps)) G3ec5@G3ec3 G3ec4@G3ec2)))) G3ebb@G3eb9 G3eba@G3eb8)))) G3eb6@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3eb4@t))) (G2fc2@syntax-dispatch G3eb4@t '_))) G3e9c@t))) (G2fc2@syntax-dispatch G3e9c@t '(any . any)))) G3e98@t))) (G2fc2@syntax-dispatch G3e98@t '()))) G3e94@y)))) G3e92@f) G3e8e@y (lambda (G3ecc@maps) (call-with-values (lambda () (G3dd7@gen-syntax G3e48@src G3e8c@x G3e4a@r (cons '() G3ecc@maps) G3e4c@ellipsis? '#f)) (lambda (G3ed0@G3ece G3ed1@G3ecf) ((lambda (G3ed4@maps G3ed5@x) (if (null? (car G3ed4@maps)) (G30ab@syntax-violation '#f '"extra ellipsis in syntax form" G3e48@src) (values (G3ddf@gen-map G3ed5@x (car G3ed4@maps)) (cdr G3ed4@maps)))) G3ed1@G3ecf G3ed0@G3ece)))))) G3e84@ls/false) ((lambda (G3ed8@t) ((lambda (G3eda@ls/false) (if G3eda@ls/false (apply (lambda (G3edc@x G3edd@y) (call-with-values (lambda () (G3dd7@gen-syntax G3e48@src G3edc@x G3e4a@r G3e4b@maps G3e4c@ellipsis? '#f)) (lambda (G3ee2@G3ee0 G3ee3@G3ee1) ((lambda (G3ee6@maps G3ee7@xnew) (call-with-values (lambda () (G3dd7@gen-syntax G3e48@src G3edd@y G3e4a@r G3ee6@maps G3e4c@ellipsis? G3e4d@vec?)) (lambda (G3eec@G3eea G3eed@G3eeb) ((lambda (G3ef0@maps G3ef1@ynew) (values (G3de1@gen-cons G3e49@e G3edc@x G3edd@y G3ee7@xnew G3ef1@ynew) G3ef0@maps)) G3eed@G3eeb G3eec@G3eea)))) G3ee3@G3ee1 G3ee2@G3ee0)))) G3eda@ls/false) ((lambda (G3ef4@t) ((lambda (G3ef6@ls/false) (if G3ef6@ls/false (apply (lambda (G3ef8@ls) (call-with-values (lambda () (G3dd7@gen-syntax G3e48@src G3ef8@ls G3e4a@r G3e4b@maps G3e4c@ellipsis? '#t)) (lambda (G3efc@G3efa G3efd@G3efb) ((lambda (G3f00@maps G3f01@lsnew) (values (G3de3@gen-vector G3e49@e G3ef8@ls G3f01@lsnew) G3f00@maps)) G3efd@G3efb G3efc@G3efa)))) G3ef6@ls/false) ((lambda (G3f04@t) ((lambda (G3f06@ls/false) (if G3f06@ls/false (apply (lambda () (values (list 'quote G3e49@e) G3e4b@maps)) G3f06@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3f04@t))) (G2fc2@syntax-dispatch G3f04@t '_))) G3ef4@t))) (G2fc2@syntax-dispatch G3ef4@t '#(vector each-any)))) G3ed8@t))) (G2fc2@syntax-dispatch G3ed8@t '(any . any)))) G3e82@t))) (G2fc2@syntax-dispatch G3e82@t '(any any . any)))) G3e74@t))) (G2fc2@syntax-dispatch G3e74@t '(any any)))) G3e5c@t))) (G2fc2@syntax-dispatch G3e5c@t 'any))) G3e54@t))) (G2fc2@syntax-dispatch G3e54@t 'any))) G3e49@e))) (set! G3dd9@gen-ref (lambda (G3e30@src G3e31@var G3e32@level G3e33@maps) (if (= G3e32@level '0) (values G3e31@var G3e33@maps) (if (null? G3e33@maps) (G30ab@syntax-violation '#f '"missing ellipsis in syntax form" G3e30@src) (call-with-values (lambda () (G3dd9@gen-ref G3e30@src G3e31@var (- G3e32@level '1) (cdr G3e33@maps))) (lambda (G3e3a@G3e38 G3e3b@G3e39) ((lambda (G3e3e@outer-maps G3e3f@outer-var) ((lambda (G3e42@t) (if G3e42@t ((lambda (G3e44@b) (values (cdr G3e44@b) G3e33@maps)) G3e42@t) ((lambda (G3e46@inner-var) (values G3e46@inner-var (cons (cons (cons G3e3f@outer-var G3e46@inner-var) (car G3e33@maps)) G3e3e@outer-maps))) (G2d01@gen-lexical 'tmp)))) (assq G3e3f@outer-var (car G3e33@maps)))) G3e3b@G3e39 G3e3a@G3e38))))))) (set! G3ddb@gen-append (lambda (G3e2c@x G3e2d@y) (if (equal? G3e2d@y ''()) G3e2c@x (list 'append G3e2c@x G3e2d@y)))) (set! G3ddd@gen-mappend (lambda (G3e28@e G3e29@map-env) (list 'apply '(primitive append) (G3ddf@gen-map G3e28@e G3e29@map-env)))) (set! G3ddf@gen-map (lambda (G3e16@e G3e17@map-env) ((lambda (G3e1a@formals G3e1b@actuals) (if (eq? (car G3e16@e) 'ref) (car G3e1b@actuals) (if (for-all (lambda (G3e1e@x) (if (eq? (car G3e1e@x) 'ref) (begin '#f (memq (cadr G3e1e@x) G3e1a@formals)) '#f)) (cdr G3e16@e)) ((lambda (G3e20@args) (cons 'map (cons (list 'primitive (car G3e16@e)) G3e20@args))) (map ((lambda (G3e22@r) (lambda (G3e24@x) (cdr (assq (cadr G3e24@x) G3e22@r)))) (map cons G3e1a@formals G3e1b@actuals)) (cdr G3e16@e))) (cons* 'map (list 'lambda G3e1a@formals G3e16@e) G3e1b@actuals)))) (map cdr G3e17@map-env) (map (lambda (G3e26@x) (list 'ref (car G3e26@x))) G3e17@map-env)))) (set! G3de1@gen-cons (lambda (G3e07@e G3e08@x G3e09@y G3e0a@xnew G3e0b@ynew) ((lambda (G3e11@t) (if (eqv? G3e11@t 'quote) (if (eq? (car G3e0a@xnew) 'quote) ((lambda (G3e12@xnew G3e13@ynew) (if (if (eq? G3e12@xnew G3e08@x) (begin '#f (eq? G3e13@ynew G3e09@y)) '#f) (list 'quote G3e07@e) (list 'quote (cons G3e12@xnew G3e13@ynew)))) (cadr G3e0a@xnew) (cadr G3e0b@ynew)) (if (null? (cadr G3e0b@ynew)) (list 'list G3e0a@xnew) (list 'cons G3e0a@xnew G3e0b@ynew))) (if (eqv? G3e11@t 'list) (cons 'list (cons G3e0a@xnew (cdr G3e0b@ynew))) (list 'cons G3e0a@xnew G3e0b@ynew)))) (car G3e0b@ynew)))) (set! G3de3@gen-vector (lambda (G3e01@e G3e02@ls G3e03@lsnew) (if (eq? (car G3e03@lsnew) 'quote) (if (eq? (cadr G3e03@lsnew) G3e02@ls) (list 'quote G3e01@e) (list 'quote (list->vector (cadr G3e03@lsnew)))) (if (eq? (car G3e03@lsnew) 'list) (cons 'vector (cdr G3e03@lsnew)) (list 'list->vector G3e03@lsnew))))) (set! G3de5@regen (lambda (G3dfc@x) ((lambda (G3dfe@t) (if (eqv? G3dfe@t 'ref) (cadr G3dfc@x) (if (eqv? G3dfe@t 'primitive) (list 'primitive (cadr G3dfc@x)) (if (eqv? G3dfe@t 'quote) (list 'quote (cadr G3dfc@x)) (if (eqv? G3dfe@t 'lambda) (G2ce1@G2c09@build-lambda '#f (cadr G3dfc@x) (G3de5@regen (caddr G3dfc@x))) (if (eqv? G3dfe@t 'map) ((lambda (G3dff@ls) (cons '(primitive ellipsis-map) G3dff@ls)) (map G3de5@regen (cdr G3dfc@x))) (cons (list 'primitive (car G3dfc@x)) (map G3de5@regen (cdr G3dfc@x))))))))) (car G3dfc@x)))) (lambda (G3de6@e G3de7@r G3de8@mr) ((lambda (G3dec@t) ((lambda (G3dee@ls/false) (if G3dee@ls/false (apply (lambda (G3df0@x) (call-with-values (lambda () (G3dd7@gen-syntax G3de6@e G3df0@x G3de7@r '() G2fc4@ellipsis? '#f)) (lambda (G3df4@G3df2 G3df5@G3df3) ((lambda (G3df8@maps G3df9@e) (G3de5@regen G3df9@e)) G3df5@G3df3 G3df4@G3df2)))) G3dee@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3dec@t))) (G2fc2@syntax-dispatch G3dec@t '(_ any)))) G3de6@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fd0@core-macro-transformer (lambda (G3f08@name) ((lambda (G3f0a@t) (if (eqv? G3f0a@t 'quote) G2f72@quote-transformer (if (eqv? G3f0a@t 'lambda) G2f76@lambda-transformer (if (eqv? G3f0a@t 'case-lambda) G2f74@case-lambda-transformer (if (eqv? G3f0a@t 'letrec) G2f5e@letrec-transformer (if (eqv? G3f0a@t 'letrec*) G2f60@letrec*-transformer (if (eqv? G3f0a@t 'case) G2f70@case-transformer (if (eqv? G3f0a@t 'if) G2f6e@if-transformer (if (eqv? G3f0a@t 'when) G2f6a@when-transformer (if (eqv? G3f0a@t 'unless) G2f6c@unless-transformer (if (eqv? G3f0a@t 'parameterize) G2fbc@parameterize-transformer (if (eqv? G3f0a@t 'foreign-call) G2fbe@foreign-call-transformer (if (eqv? G3f0a@t 'syntax-case) G2fca@syntax-case-transformer (if (eqv? G3f0a@t 'syntax) G2fce@syntax-transformer (if (eqv? G3f0a@t 'type-descriptor) G2f64@type-descriptor-transformer (if (eqv? G3f0a@t 'record-type-descriptor) G2f66@record-type-descriptor-transformer (if (eqv? G3f0a@t 'record-constructor-descriptor) G2f68@record-constructor-descriptor-transformer (if (eqv? G3f0a@t 'fluid-let-syntax) G2f62@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3f08@name))))))))))))))))))) G3f08@name))) (set! G2fd2@file-options-macro (lambda (G3f0b@x) ((lambda (G3f0d@t) ((lambda (G3f0f@ls/false) (if (if G3f0f@ls/false (begin '#f (apply (lambda (G3f11@opt*) (if (for-all G2d7f@id? G3f11@opt*) (begin '#f (G28e0@G28ac@file-options-spec (map G2d81@id->sym G3f11@opt*))) '#f)) G3f0f@ls/false)) '#f) (apply (lambda (G3f13@opt*) (G2f78@bless (list 'quote (G28e0@G28ac@file-options-spec (map G2d81@id->sym G3f13@opt*))))) G3f0f@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3f0d@t))) (G2fc2@syntax-dispatch G3f0d@t '(_ . each-any)))) G3f0b@x))) (set! G2fd4@symbol-macro (lambda (G3f15@x G3f16@set) ((lambda (G3f19@t) ((lambda (G3f1b@ls/false) (if (if G3f1b@ls/false (begin '#f (apply (lambda (G3f1d@name) (if (G2d7f@id? G3f1d@name) (begin '#f (memq (G2d81@id->sym G3f1d@name) G3f16@set)) '#f)) G3f1b@ls/false)) '#f) (apply (lambda (G3f1f@name) (G2f78@bless (list 'quote G3f1f@name))) G3f1b@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3f19@t))) (G2fc2@syntax-dispatch G3f19@t '(_ any)))) G3f15@x))) (set! G2fd6@macro-transformer (lambda (G3f21@x) (if (procedure? G3f21@x) G3f21@x (if (symbol? G3f21@x) ((lambda (G3f23@t) (if (eqv? G3f23@t 'define-record-type) G2fb6@define-record-type-macro (if (eqv? G3f23@t 'define-struct) G2fb4@define-struct-macro (if (eqv? G3f23@t 'include) G2faa@include-macro (if (eqv? G3f23@t 'cond) G2fa6@cond-macro (if (eqv? G3f23@t 'let) G2f7e@let-macro (if (eqv? G3f23@t 'do) G2f9e@do-macro (if (eqv? G3f23@t 'or) G2fa2@or-macro (if (eqv? G3f23@t 'and) G2fa4@and-macro (if (eqv? G3f23@t 'let*) G2fa0@let*-macro (if (eqv? G3f23@t 'let-values) G2f80@let-values-macro (if (eqv? G3f23@t 'let*-values) G2f82@let*-values-macro (if (eqv? G3f23@t 'syntax-rules) G2fae@syntax-rules-macro (if (eqv? G3f23@t 'quasiquote) G2fb0@quasiquote-macro (if (eqv? G3f23@t 'quasisyntax) G2fb2@quasisyntax-macro (if (eqv? G3f23@t 'with-syntax) G2f7a@with-syntax-macro (if (eqv? G3f23@t 'identifier-syntax) G2f9c@identifier-syntax-macro (if (eqv? G3f23@t 'time) G2f94@time-macro (if (eqv? G3f23@t 'delay) G2f96@delay-macro (if (eqv? G3f23@t 'assert) G2f98@assert-macro (if (eqv? G3f23@t 'endianness) G2f9a@endianness-macro (if (eqv? G3f23@t 'guard) G2f90@guard-macro (if (eqv? G3f23@t 'define-enumeration) G2f92@define-enumeration-macro (if (eqv? G3f23@t 'trace-lambda) G2f84@trace-lambda-macro (if (eqv? G3f23@t 'trace-define) G2f86@trace-define-macro (if (eqv? G3f23@t 'trace-define-syntax) G2f88@trace-define-syntax-macro (if (eqv? G3f23@t 'trace-let-syntax) G2f8c@trace-let-syntax-macro (if (eqv? G3f23@t 'trace-letrec-syntax) G2f8e@trace-letrec-syntax-macro (if (eqv? G3f23@t 'define-condition-type) G2fb8@define-condition-type-macro (if (eqv? G3f23@t 'include-into) G2fac@include-into-macro (if (eqv? G3f23@t 'eol-style) (lambda (G3f28@x) (G2fd4@symbol-macro G3f28@x '(none lf cr crlf nel crnel ls))) (if (eqv? G3f23@t 'error-handling-mode) (lambda (G3f26@x) (G2fd4@symbol-macro G3f26@x '(ignore raise replace))) (if (eqv? G3f23@t 'buffer-mode) (lambda (G3f24@x) (G2fd4@symbol-macro G3f24@x '(none line block))) (if (eqv? G3f23@t 'file-options) G2fd2@file-options-macro (if (memv G3f23@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2fba@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3f21@x)))))))))))))))))))))))))))))))))))) G3f21@x) (error 'core-macro-transformer '"BUG: invalid macro" G3f21@x))))) (set! G2fd8@local-macro-transformer (lambda (G3f2a@x) (car G3f2a@x))) (set! G2fda@do-macro-call (lambda (G3f2c@transformer G3f2d@expr) ((lambda (G3f30@out) (begin ((letrec ((G3f32@f (lambda (G3f34@x) (if (G2d47@stx? G3f34@x) (void) (if (pair? G3f34@x) (begin (G3f32@f (car G3f34@x)) (G3f32@f (cdr G3f34@x))) (if (vector? G3f34@x) (vector-for-each G3f32@f G3f34@x) (if (symbol? G3f34@x) (G30ab@syntax-violation '#f '"raw symbol encountered in output of macro" G3f2d@expr G3f34@x) (void)))))))) G3f32@f) G3f30@out) (G2d69@add-mark (G2d5f@gen-mark) G3f30@out G3f2d@expr))) (G3f2c@transformer (G2d69@add-mark G2d61@anti-mark G3f2d@expr '#f))))) (set! G2fdc@chi-macro (lambda (G3f36@p G3f37@e) (G2fda@do-macro-call (G2fd6@macro-transformer G3f36@p) G3f37@e))) (set! G2fde@chi-local-macro (lambda (G3f3a@p G3f3b@e) (G2fda@do-macro-call (G2fd8@local-macro-transformer G3f3a@p) G3f3b@e))) (set! G2fe0@chi-global-macro (lambda (G3f3e@p G3f3f@e) ((lambda (G3f42@lib G3f43@loc) (begin (G2b7f@G2a18@visit-library G3f42@lib) ((lambda (G3f46@x) ((lambda (G3f48@transformer) (G2fda@do-macro-call G3f48@transformer G3f3f@e)) (if (procedure? G3f46@x) G3f46@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3f46@x)))) (symbol-value G3f43@loc)))) (car G3f3e@p) (cdr G3f3e@p)))) (set! G2fe2@chi-expr* (lambda (G3f4a@e* G3f4b@r G3f4c@mr) (if (null? G3f4a@e*) '() ((lambda (G3f50@e) (cons G3f50@e (G2fe2@chi-expr* (cdr G3f4a@e*) G3f4b@r G3f4c@mr))) (G2fe6@chi-expr (car G3f4a@e*) G3f4b@r G3f4c@mr))))) (set! G2fe4@chi-application (lambda (G3f52@e G3f53@r G3f54@mr) ((lambda (G3f58@t) ((lambda (G3f5a@ls/false) (if G3f5a@ls/false (apply (lambda (G3f5c@rator G3f5d@rands) ((lambda (G3f60@rator) (cons G3f60@rator (G2fe2@chi-expr* G3f5d@rands G3f53@r G3f54@mr))) (G2fe6@chi-expr G3f5c@rator G3f53@r G3f54@mr))) G3f5a@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3f58@t))) (G2fc2@syntax-dispatch G3f58@t '(any . each-any)))) G3f52@e))) (set! G2fe6@chi-expr (lambda (G3f62@e G3f63@r G3f64@mr) (call-with-values (lambda () (G2da7@syntax-type G3f62@e G3f63@r)) (lambda (G3f6b@G3f68 G3f6c@G3f69 G3f6d@G3f6a) ((lambda (G3f71@kwd G3f72@value G3f73@type) ((lambda (G3f77@t) (if (eqv? G3f77@t 'core-macro) ((lambda (G3fa9@transformer) (G3fa9@transformer G3f62@e G3f63@r G3f64@mr)) (G2fd0@core-macro-transformer G3f72@value)) (if (eqv? G3f77@t 'global) ((lambda (G3fa5@lib) ((lambda (G3fa7@loc) ((lambda () (begin ((G3031@inv-collector) G3fa5@lib) G3fa7@loc)))) (cdr G3f72@value))) (car G3f72@value)) (if (eqv? G3f77@t 'core-prim) ((lambda (G3fa3@name) (list 'primitive G3fa3@name)) G3f72@value) (if (eqv? G3f77@t 'call) (G2fe4@chi-application G3f62@e G3f63@r G3f64@mr) (if (eqv? G3f77@t 'lexical) ((lambda (G3fa1@lex) G3fa1@lex) (G2f52@lexical-var G3f72@value)) (if (memv G3f77@t '(global-macro global-macro!)) (G2fe6@chi-expr (G2fe0@chi-global-macro G3f72@value G3f62@e) G3f63@r G3f64@mr) (if (memv G3f77@t '(local-macro local-macro!)) (G2fe6@chi-expr (G2fde@chi-local-macro G3f72@value G3f62@e) G3f63@r G3f64@mr) (if (memv G3f77@t '(macro macro!)) (G2fe6@chi-expr (G2fdc@chi-macro G3f72@value G3f62@e) G3f63@r G3f64@mr) (if (eqv? G3f77@t 'constant) ((lambda (G3f9f@datum) (list 'quote G3f9f@datum)) G3f72@value) (if (eqv? G3f77@t 'set!) (G2fe8@chi-set! G3f62@e G3f63@r G3f64@mr) (if (eqv? G3f77@t 'begin) ((lambda (G3f97@t) ((lambda (G3f99@ls/false) (if G3f99@ls/false (apply (lambda (G3f9b@x G3f9c@x*) (G2ce4@G2c55@build-sequence '#f (G2fe2@chi-expr* (cons G3f9b@x G3f9c@x*) G3f63@r G3f64@mr))) G3f99@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3f97@t))) (G2fc2@syntax-dispatch G3f97@t '(_ any . each-any)))) G3f62@e) (if (memv G3f77@t '(let-syntax letrec-syntax)) ((lambda (G3f79@t) ((lambda (G3f7b@ls/false) (if (if G3f7b@ls/false (begin '#f (apply (lambda (G3f7d@xlhs* G3f7e@xrhs* G3f7f@xbody G3f80@xbody*) (if (G2d89@valid-bound-ids? G3f7d@xlhs*) (void) (G30ab@syntax-violation '#f '"invalid identifiers" G3f62@e))) G3f7b@ls/false)) '#f) (apply (lambda (G3f85@xlhs* G3f86@xrhs* G3f87@xbody G3f88@xbody*) ((lambda (G3f8d@xlab*) ((lambda (G3f8f@xrib) ((lambda (G3f91@xb*) ((lambda () (G2ce4@G2c55@build-sequence '#f (G2fe2@chi-expr* (map (lambda (G3f93@x) (G2d6b@add-subst G3f8f@xrib G3f93@x)) (cons G3f87@xbody G3f88@xbody*)) (append (map cons G3f8d@xlab* G3f91@xb*) G3f63@r) (append (map cons G3f8d@xlab* G3f91@xb*) G3f64@mr)))))) (map (lambda (G3f95@x) (G2dc6@make-eval-transformer (G3023@expand-transformer (if (eq? G3f73@type 'let-syntax) G3f95@x (G2d6b@add-subst G3f8f@xrib G3f95@x)) G3f64@mr))) G3f86@xrhs*))) (G2d38@make-full-rib G3f85@xlhs* G3f8d@xlab*))) (map G2d05@gen-label G3f85@xlhs*))) G3f7b@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3f79@t))) (G2fc2@syntax-dispatch G3f79@t '(_ #(each (any any)) any . each-any)))) G3f62@e) (if (eqv? G3f77@t 'displaced-lexical) (G30ab@syntax-violation '#f '"identifier out of context" G3f62@e) (if (eqv? G3f77@t 'syntax) (G30ab@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3f62@e) (if (memv G3f77@t '(define define-syntax module import library)) (G30ab@syntax-violation '#f (string-append ((lambda (G3f78@t) (if (eqv? G3f78@t 'define) '"a definition" (if (eqv? G3f78@t 'define-syntax) '"a define-syntax" (if (eqv? G3f78@t 'module) '"a module definition" (if (eqv? G3f78@t 'library) '"a library definition" (if (eqv? G3f78@t 'import) '"an import declaration" '"a non-expression")))))) G3f73@type) '" was found where an expression was expected") G3f62@e) (if (eqv? G3f77@t 'mutable) (G30ab@syntax-violation '#f '"attempt to reference an unexportable variable" G3f62@e) (G30ab@syntax-violation '#f '"invalid expression" G3f62@e)))))))))))))))))) G3f73@type)) G3f6d@G3f6a G3f6c@G3f69 G3f6b@G3f68))))) (set! G2fe8@chi-set! (lambda (G3fab@e G3fac@r G3fad@mr) ((lambda (G3fb1@t) ((lambda (G3fb3@ls/false) (if (if G3fb3@ls/false (begin '#f (apply (lambda (G3fb5@x G3fb6@v) (G2d7f@id? G3fb5@x)) G3fb3@ls/false)) '#f) (apply (lambda (G3fb9@x G3fba@v) (call-with-values (lambda () (G2da7@syntax-type G3fb9@x G3fac@r)) (lambda (G3fc0@G3fbd G3fc1@G3fbe G3fc2@G3fbf) ((lambda (G3fc6@kwd G3fc7@value G3fc8@type) ((lambda (G3fcc@t) (if (eqv? G3fcc@t 'lexical) (begin (G2f56@set-lexical-mutable! G3fc7@value '#t) (list 'set! (G2f52@lexical-var G3fc7@value) (G2fe6@chi-expr G3fba@v G3fac@r G3fad@mr))) (if (eqv? G3fcc@t 'core-prim) (G30ab@syntax-violation '#f '"cannot modify imported core primitive" G3fab@e) (if (eqv? G3fcc@t 'global) (G30ab@syntax-violation '#f '"attempt to modify imported binding" G3fab@e) (if (eqv? G3fcc@t 'global-macro!) (G2fe6@chi-expr (G2fe0@chi-global-macro G3fc7@value G3fab@e) G3fac@r G3fad@mr) (if (eqv? G3fcc@t 'local-macro!) (G2fe6@chi-expr (G2fde@chi-local-macro G3fc7@value G3fab@e) G3fac@r G3fad@mr) (if (eqv? G3fcc@t 'mutable) (G30ab@syntax-violation '#f '"attempt to assign to an unexportable variable" G3fab@e) (G30ab@syntax-violation '#f '"invalid syntax" G3fab@e)))))))) G3fc8@type)) G3fc2@G3fbf G3fc1@G3fbe G3fc0@G3fbd)))) G3fb3@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3fb1@t))) (G2fc2@syntax-dispatch G3fb1@t '(_ any any)))) G3fab@e))) (set! G2fea@verify-formals (lambda (G3fcd@fmls G3fce@stx) ((lambda (G3fd1@t) ((lambda (G3fd3@ls/false) (if G3fd3@ls/false (apply (lambda (G3fd5@x*) (if (G2d89@valid-bound-ids? G3fd5@x*) (void) (G2f7c@invalid-fmls-error G3fce@stx G3fcd@fmls))) G3fd3@ls/false) ((lambda (G3fd7@t) ((lambda (G3fd9@ls/false) (if G3fd9@ls/false (apply (lambda (G3fdb@x* G3fdc@x) (if (G2d89@valid-bound-ids? (cons G3fdc@x G3fdb@x*)) (void) (G2f7c@invalid-fmls-error G3fce@stx G3fcd@fmls))) G3fd9@ls/false) ((lambda (G3fdf@t) ((lambda (G3fe1@ls/false) (if G3fe1@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid syntax" G3fce@stx)) G3fe1@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G3fdf@t))) (G2fc2@syntax-dispatch G3fdf@t '_))) G3fd7@t))) (G2fc2@syntax-dispatch G3fd7@t '#(each+ any () any)))) G3fd1@t))) (G2fc2@syntax-dispatch G3fd1@t 'each-any))) G3fcd@fmls))) (set! G2fec@chi-lambda-clause (lambda (G3fe3@stx G3fe4@fmls G3fe5@body* G3fe6@r G3fe7@mr) ((lambda (G3fed@t) ((lambda (G3fef@ls/false) (if G3fef@ls/false (apply (lambda (G3ff1@x*) (begin (G2fea@verify-formals G3fe4@fmls G3fe3@stx) ((lambda (G3ff3@lex* G3ff4@lab*) (values G3ff3@lex* (G2ffc@chi-internal (G2d6b@add-subst (G2d38@make-full-rib G3ff1@x* G3ff4@lab*) G3fe5@body*) (G2f5a@add-lexicals G3ff4@lab* G3ff3@lex* G3fe6@r) G3fe7@mr))) (map G2d01@gen-lexical G3ff1@x*) (map G2d05@gen-label G3ff1@x*)))) G3fef@ls/false) ((lambda (G3ff7@t) ((lambda (G3ff9@ls/false) (if G3ff9@ls/false (apply (lambda (G3ffb@x* G3ffc@x) (begin (G2fea@verify-formals G3fe4@fmls G3fe3@stx) ((lambda (G3fff@lex* G4000@lab* G4001@lex G4002@lab) (values (append G3fff@lex* G4001@lex) (G2ffc@chi-internal (G2d6b@add-subst (G2d38@make-full-rib (cons G3ffc@x G3ffb@x*) (cons G4002@lab G4000@lab*)) G3fe5@body*) (G2f5a@add-lexicals (cons G4002@lab G4000@lab*) (cons G4001@lex G3fff@lex*) G3fe6@r) G3fe7@mr))) (map G2d01@gen-lexical G3ffb@x*) (map G2d05@gen-label G3ffb@x*) (G2d01@gen-lexical G3ffc@x) (G2d05@gen-label G3ffc@x)))) G3ff9@ls/false) ((lambda (G4007@t) ((lambda (G4009@ls/false) (if G4009@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid syntax" G3fe4@fmls)) G4009@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G4007@t))) (G2fc2@syntax-dispatch G4007@t '_))) G3ff7@t))) (G2fc2@syntax-dispatch G3ff7@t '#(each+ any () any)))) G3fed@t))) (G2fc2@syntax-dispatch G3fed@t 'each-any))) G3fe4@fmls))) (set! G2fee@chi-lambda-clause* (lambda (G400b@stx G400c@fmls* G400d@body** G400e@r G400f@mr) (if (null? G400c@fmls*) (values '() '()) (call-with-values (lambda () (G2fec@chi-lambda-clause G400b@stx (car G400c@fmls*) (car G400d@body**) G400e@r G400f@mr)) (lambda (G4017@G4015 G4018@G4016) ((lambda (G401b@b G401c@a) (call-with-values (lambda () (G2fee@chi-lambda-clause* G400b@stx (cdr G400c@fmls*) (cdr G400d@body**) G400e@r G400f@mr)) (lambda (G4021@G401f G4022@G4020) ((lambda (G4025@b* G4026@a*) (values (cons G401c@a G4026@a*) (cons G401b@b G4025@b*))) G4022@G4020 G4021@G401f)))) G4018@G4016 G4017@G4015)))))) (set! G2ff0@chi-defun (lambda (G4029@x G402a@r G402b@mr) ((lambda (G402f@fmls G4030@body*) (call-with-values (lambda () (G2fec@chi-lambda-clause G402f@fmls G402f@fmls G4030@body* G402a@r G402b@mr)) (lambda (G4035@G4033 G4036@G4034) ((lambda (G4039@body G403a@fmls) (G2ce1@G2c09@build-lambda '#f G403a@fmls G4039@body)) G4036@G4034 G4035@G4033)))) (car G4029@x) (cdr G4029@x)))) (set! G2ff2@chi-rhs (lambda (G403d@rhs G403e@r G403f@mr) ((lambda (G4043@t) (if (eqv? G4043@t 'defun) (G2ff0@chi-defun (cdr G403d@rhs) G403e@r G403f@mr) (if (eqv? G4043@t 'expr) ((lambda (G4046@expr) (G2fe6@chi-expr G4046@expr G403e@r G403f@mr)) (cdr G403d@rhs)) (if (eqv? G4043@t 'top-expr) ((lambda (G4044@expr) (G2ce4@G2c55@build-sequence '#f (list (G2fe6@chi-expr G4044@expr G403e@r G403f@mr) (G2ce5@G2c57@build-void)))) (cdr G403d@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G403d@rhs))))) (car G403d@rhs)))) (set! G2ff4@expand-interaction-rhs*/init* (lambda (G4048@lhs* G4049@rhs* G404a@init* G404b@r G404c@mr) ((letrec ((G4052@f (lambda (G4054@lhs* G4055@rhs*) (if (null? G4054@lhs*) (map (lambda (G4058@x) (G2fe6@chi-expr G4058@x G404b@r G404c@mr)) G404a@init*) ((lambda (G405a@lhs G405b@rhs) ((lambda (G405e@t) (if (eqv? G405e@t 'defun) ((lambda (G4063@rhs) (cons (list 'set! G405a@lhs G4063@rhs) (G4052@f (cdr G4054@lhs*) (cdr G4055@rhs*)))) (G2ff0@chi-defun (cdr G405b@rhs) G404b@r G404c@mr)) (if (eqv? G405e@t 'expr) ((lambda (G4061@rhs) (cons (list 'set! G405a@lhs G4061@rhs) (G4052@f (cdr G4054@lhs*) (cdr G4055@rhs*)))) (G2fe6@chi-expr (cdr G405b@rhs) G404b@r G404c@mr)) (if (eqv? G405e@t 'top-expr) ((lambda (G405f@e) (cons G405f@e (G4052@f (cdr G4054@lhs*) (cdr G4055@rhs*)))) (G2fe6@chi-expr (cdr G405b@rhs) G404b@r G404c@mr)) (error 'expand-interaction '"invallid" G405b@rhs))))) (car G405b@rhs))) (car G4054@lhs*) (car G4055@rhs*)))))) G4052@f) G4048@lhs* G4049@rhs*))) (set! G2ff6@chi-rhs* (lambda (G4065@rhs* G4066@r G4067@mr) ((letrec ((G406b@f (lambda (G406d@ls) (if (null? G406d@ls) '() ((lambda (G406f@a) (cons G406f@a (G406b@f (cdr G406d@ls)))) (G2ff2@chi-rhs (car G406d@ls) G4066@r G4067@mr)))))) G406b@f) G4065@rhs*))) (set! G2ff8@find-bound=? (lambda (G4071@x G4072@lhs* G4073@rhs*) (if (null? G4072@lhs*) '#f (if (G2d85@bound-id=? G4071@x (car G4072@lhs*)) (car G4073@rhs*) (G2ff8@find-bound=? G4071@x (cdr G4072@lhs*) (cdr G4073@rhs*)))))) (set! G2ffa@find-dups (lambda (G4077@ls) ((letrec ((G4079@f (lambda (G407b@ls G407c@dups) (if (null? G407b@ls) G407c@dups ((lambda (G407f@t) (if G407f@t ((lambda (G4081@x) (G4079@f (cdr G407b@ls) (cons (list (car G407b@ls) G4081@x) G407c@dups))) G407f@t) (G4079@f (cdr G407b@ls) G407c@dups))) (G2ff8@find-bound=? (car G407b@ls) (cdr G407b@ls) (cdr G407b@ls))))))) G4079@f) G4077@ls '()))) (set! G2ffc@chi-internal (lambda (G4083@e* G4084@r G4085@mr) ((lambda (G4089@rib) (call-with-values (lambda () (G3021@chi-body* (map (lambda (G4092@x) (G2d6b@add-subst G4089@rib G4092@x)) (G2d7d@syntax->list G4083@e*)) G4084@r G4085@mr '() '() '() '() G4089@rib '#f)) (lambda (G4094@G408b G4095@G408c G4096@G408d G4097@G408e G4098@G408f G4099@G4090 G409a@G4091) ((lambda (G40a2@kwd* G40a3@mod** G40a4@rhs* G40a5@lex* G40a6@mr G40a7@r G40a8@e*) (begin (if (null? G40a8@e*) (G30ab@syntax-violation '#f '"no expression in body" G40a8@e*) (void)) ((lambda (G40b0@init*) ((lambda (G40b2@rhs*) ((lambda () (G2ce7@G2c5b@build-letrec* '#f (reverse G40a5@lex*) (reverse G40b2@rhs*) (G2ce4@G2c55@build-sequence '#f G40b0@init*))))) (G2ff6@chi-rhs* G40a4@rhs* G40a7@r G40a6@mr))) (G2fe2@chi-expr* (append (apply append (reverse G40a3@mod**)) G40a8@e*) G40a7@r G40a6@mr)))) G409a@G4091 G4099@G4090 G4098@G408f G4097@G408e G4096@G408d G4095@G408c G4094@G408b)))) (G2d2e@make-empty-rib)))) (set! G2ffe@parse-module (lambda (G40b4@e) ((lambda (G40b6@t) ((lambda (G40b8@ls/false) (if G40b8@ls/false (apply (lambda (G40ba@export* G40bb@b*) (begin (if (for-all G2d7f@id? G40ba@export*) (void) (G30ab@syntax-violation '#f '"module exports must be identifiers" G40b4@e)) (values '#f (list->vector G40ba@export*) G40bb@b*))) G40b8@ls/false) ((lambda (G40be@t) ((lambda (G40c0@ls/false) (if G40c0@ls/false (apply (lambda (G40c2@name G40c3@export* G40c4@b*) (begin (if (G2d7f@id? G40c2@name) (void) (G30ab@syntax-violation '#f '"module name must be an identifier" G40b4@e)) (if (for-all G2d7f@id? G40c3@export*) (void) (G30ab@syntax-violation '#f '"module exports must be identifiers" G40b4@e)) (values G40c2@name (list->vector G40c3@export*) G40c4@b*))) G40c0@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G40be@t))) (G2fc2@syntax-dispatch G40be@t '(_ any each-any . each-any)))) G40b6@t))) (G2fc2@syntax-dispatch G40b6@t '(_ each-any . each-any)))) G40b4@e))) (set! G3004@G2fff (make-record-type-descriptor 'module-interface '#f 'G3002 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G3006@G3001 '#f) (set! G3008@G3000 (make-record-constructor-descriptor G3004@G2fff '#f G3006@G3001)) (set! G300d@module-interface? (record-predicate G3004@G2fff)) (set! G300f@make-module-interface (record-constructor G3008@G3000)) (set! G3011@module-interface-first-mark (record-accessor G3004@G2fff '0)) (set! G3013@module-interface-exp-id-vec (record-accessor G3004@G2fff '1)) (set! G3015@module-interface-exp-lab-vec (record-accessor G3004@G2fff '2)) (set! G3017@set-module-interface-first-mark! (record-mutator G3004@G2fff '0)) (set! G3019@set-module-interface-exp-id-vec! (record-mutator G3004@G2fff '1)) (set! G301b@set-module-interface-exp-lab-vec! (record-mutator G3004@G2fff '2)) (set! G301d@module-interface-exp-id* (lambda (G40c8@iface G40c9@id) ((lambda (G40cd@diff-marks) (begin (set! G40cd@diff-marks (lambda (G40d4@ls G40d5@x) (begin (if (null? G40d4@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G40d8@a) (if (eq? G40d8@a G40d5@x) '() (cons G40d8@a (G40cd@diff-marks (cdr G40d4@ls) G40d5@x)))) (car G40d4@ls))))) ((lambda (G40ce@diff G40cf@id-vec) (if (null? G40ce@diff) G40cf@id-vec (vector-map (lambda (G40d2@x) (G2d49@make-stx (G2d4b@stx-expr G40d2@x) (append G40ce@diff (G2d4d@stx-mark* G40d2@x)) '() '())) G40cf@id-vec))) (G40cd@diff-marks (G2d4d@stx-mark* G40c9@id) (G3011@module-interface-first-mark G40c8@iface)) (G3013@module-interface-exp-id-vec G40c8@iface)))) '#f))) (set! G301f@chi-internal-module (lambda (G40da@e G40db@r G40dc@mr G40dd@lex* G40de@rhs* G40df@mod** G40e0@kwd*) (call-with-values (lambda () (G2ffe@parse-module G40da@e)) (lambda (G40eb@G40e8 G40ec@G40e9 G40ed@G40ea) ((lambda (G40f1@e* G40f2@exp-id* G40f3@name) ((lambda (G40f7@rib) ((lambda (G40f9@e*) ((lambda () (call-with-values (lambda () (G3021@chi-body* G40f9@e* G40db@r G40dc@mr G40dd@lex* G40de@rhs* G40df@mod** G40e0@kwd* G40f7@rib '#f)) (lambda (G4102@G40fb G4103@G40fc G4104@G40fd G4105@G40fe G4106@G40ff G4107@G4100 G4108@G4101) ((lambda (G4110@kwd* G4111@mod** G4112@rhs* G4113@lex* G4114@mr G4115@r G4116@e*) ((lambda (G411e@exp-lab* G411f@mod**) (if (not G40f3@name) (values G4113@lex* G4112@rhs* G40f2@exp-id* G411e@exp-lab* G4115@r G4114@mr G411f@mod** G4110@kwd*) ((lambda (G4122@lab G4123@iface) (values G4113@lex* G4112@rhs* (vector G40f3@name) (vector G4122@lab) (cons (cons G4122@lab (cons '$module G4123@iface)) G4115@r) (cons (cons G4122@lab (cons '$module G4123@iface)) G4114@mr) G411f@mod** G4110@kwd*)) (G2d05@gen-label 'module) (G300f@make-module-interface (car (G2d4d@stx-mark* G40f3@name)) (vector-map (lambda (G4126@x) (G2d49@make-stx (G2d4b@stx-expr G4126@x) (G2d4d@stx-mark* G4126@x) '() '())) G40f2@exp-id*) G411e@exp-lab*)))) (vector-map (lambda (G4128@x) ((lambda (G412a@t) (if G412a@t G412a@t (begin '#f (G30ab@syntax-violation '#f '"cannot find module export" G4128@x)))) (G2d99@id->label (G2d49@make-stx (G2d81@id->sym G4128@x) (G2d4d@stx-mark* G4128@x) (list G40f7@rib) '())))) G40f2@exp-id*) (cons G4116@e* G4111@mod**))) G4108@G4101 G4107@G4100 G4106@G40ff G4105@G40fe G4104@G40fd G4103@G40fc G4102@G40fb)))))) (map (lambda (G412c@x) (G2d6b@add-subst G40f7@rib G412c@x)) (G2d7d@syntax->list G40f1@e*)))) (G2d2e@make-empty-rib))) G40ed@G40ea G40ec@G40e9 G40eb@G40e8))))) (set! G3021@chi-body* (lambda (G412e@e* G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4134@kwd* G4135@rib G4136@top?) (if (null? G412e@e*) (values G412e@e* G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4134@kwd*) ((lambda (G4140@e) (call-with-values (lambda () (G2da7@syntax-type G4140@e G412f@r)) (lambda (G4145@G4142 G4146@G4143 G4147@G4144) ((lambda (G414b@kwd G414c@value G414d@type) ((lambda (G4151@kwd*) ((lambda (G4153@t) (if (eqv? G4153@t 'define) (call-with-values (lambda () (G2f4a@parse-define G4140@e)) (lambda (G4212@G4210 G4213@G4211) ((lambda (G4216@rhs G4217@id) (begin (if (G2d8d@bound-id-member? G4217@id G4151@kwd*) (G30ab@syntax-violation '#f '"cannot redefine keyword" G4140@e) (void)) (call-with-values (lambda () (G2d09@gen-define-label+loc G4217@id G4135@rib)) (lambda (G421c@G421a G421d@G421b) ((lambda (G4220@lex G4221@lab) (begin (G2d30@extend-rib! G4135@rib G4217@id G4221@lab) (G3021@chi-body* (cdr G412e@e*) (G2f58@add-lexical G4221@lab G4220@lex G412f@r) G4130@mr (cons G4220@lex G4131@lex*) (cons G4216@rhs G4132@rhs*) G4133@mod** G4151@kwd* G4135@rib G4136@top?))) G421d@G421b G421c@G421a))))) G4213@G4211 G4212@G4210))) (if (eqv? G4153@t 'define-syntax) (call-with-values (lambda () (G2f4c@parse-define-syntax G4140@e)) (lambda (G4202@G4200 G4203@G4201) ((lambda (G4206@rhs G4207@id) (begin (if (G2d8d@bound-id-member? G4207@id G4151@kwd*) (G30ab@syntax-violation '#f '"cannot redefine keyword" G4140@e) (void)) ((lambda (G420a@lab G420b@expanded-rhs) (begin (G2d30@extend-rib! G4135@rib G4207@id G420a@lab) ((lambda (G420e@b) (G3021@chi-body* (cdr G412e@e*) (cons (cons G420a@lab G420e@b) G412f@r) (cons (cons G420a@lab G420e@b) G4130@mr) G4131@lex* G4132@rhs* G4133@mod** G4151@kwd* G4135@rib G4136@top?)) (G2dc6@make-eval-transformer G420b@expanded-rhs)))) (G2d0b@gen-define-label G4207@id G4135@rib) (G3023@expand-transformer G4206@rhs G4130@mr)))) G4203@G4201 G4202@G4200))) (if (memv G4153@t '(let-syntax letrec-syntax)) ((lambda (G41e6@t) ((lambda (G41e8@ls/false) (if (if G41e8@ls/false (begin '#f (apply (lambda (G41ea@xlhs* G41eb@xrhs* G41ec@xbody*) (if (G2d89@valid-bound-ids? G41ea@xlhs*) (void) (G30ab@syntax-violation '#f '"invalid identifiers" G4140@e))) G41e8@ls/false)) '#f) (apply (lambda (G41f0@xlhs* G41f1@xrhs* G41f2@xbody*) ((lambda (G41f6@xlab*) ((lambda (G41f8@xrib) ((lambda (G41fa@xb*) ((lambda () (G3021@chi-body* (append (map (lambda (G41fc@x) (G2d6b@add-subst G41f8@xrib G41fc@x)) G41f2@xbody*) (cdr G412e@e*)) (append (map cons G41f6@xlab* G41fa@xb*) G412f@r) (append (map cons G41f6@xlab* G41fa@xb*) G4130@mr) G4131@lex* G4132@rhs* G4133@mod** G4151@kwd* G4135@rib G4136@top?)))) (map (lambda (G41fe@x) (G2dc6@make-eval-transformer (G3023@expand-transformer (if (eq? G414d@type 'let-syntax) G41fe@x (G2d6b@add-subst G41f8@xrib G41fe@x)) G4130@mr))) G41f1@xrhs*))) (G2d38@make-full-rib G41f0@xlhs* G41f6@xlab*))) (map G2d05@gen-label G41f0@xlhs*))) G41e8@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G41e6@t))) (G2fc2@syntax-dispatch G41e6@t '(_ #(each (any any)) . each-any)))) G4140@e) (if (eqv? G4153@t 'begin) ((lambda (G41e0@t) ((lambda (G41e2@ls/false) (if G41e2@ls/false (apply (lambda (G41e4@x*) (G3021@chi-body* (append G41e4@x* (cdr G412e@e*)) G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4151@kwd* G4135@rib G4136@top?)) G41e2@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G41e0@t))) (G2fc2@syntax-dispatch G41e0@t '(_ . each-any)))) G4140@e) (if (memv G4153@t '(global-macro global-macro!)) (G3021@chi-body* (cons (G2d6b@add-subst G4135@rib (G2fe0@chi-global-macro G414c@value G4140@e)) (cdr G412e@e*)) G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4151@kwd* G4135@rib G4136@top?) (if (memv G4153@t '(local-macro local-macro!)) (G3021@chi-body* (cons (G2d6b@add-subst G4135@rib (G2fde@chi-local-macro G414c@value G4140@e)) (cdr G412e@e*)) G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4151@kwd* G4135@rib G4136@top?) (if (memv G4153@t '(macro macro!)) (G3021@chi-body* (cons (G2d6b@add-subst G4135@rib (G2fdc@chi-macro G414c@value G4140@e)) (cdr G412e@e*)) G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4151@kwd* G4135@rib G4136@top?) (if (eqv? G4153@t 'module) (call-with-values (lambda () (G301f@chi-internal-module G4140@e G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4151@kwd*)) (lambda (G41bc@G41b4 G41bd@G41b5 G41be@G41b6 G41bf@G41b7 G41c0@G41b8 G41c1@G41b9 G41c2@G41ba G41c3@G41bb) ((lambda (G41cc@kwd* G41cd@mod** G41ce@mr G41cf@r G41d0@m-exp-lab* G41d1@m-exp-id* G41d2@rhs* G41d3@lex*) (begin (vector-for-each (lambda (G41dc@id G41dd@lab) (G2d30@extend-rib! G4135@rib G41dc@id G41dd@lab)) G41d1@m-exp-id* G41d0@m-exp-lab*) (G3021@chi-body* (cdr G412e@e*) G41cf@r G41ce@mr G41d3@lex* G41d2@rhs* G41cd@mod** G41cc@kwd* G4135@rib G4136@top?))) G41c3@G41bb G41c2@G41ba G41c1@G41b9 G41c0@G41b8 G41bf@G41b7 G41be@G41b6 G41bd@G41b5 G41bc@G41b4))) (if (eqv? G4153@t 'library) (begin (G3091@library-expander (G2d95@stx->datum G4140@e)) (G3021@chi-body* (cdr G412e@e*) G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4151@kwd* G4135@rib G4136@top?)) (if (eqv? G4153@t 'import) (begin ((lambda () ((lambda (G4155@module-import? G4157@module-import G4159@library-import) (begin (set! G4155@module-import? (lambda (G41a0@e) ((lambda (G41a2@t) ((lambda (G41a4@ls/false) (if (if G41a4@ls/false (begin '#f (apply (lambda (G41a6@id) (G2d7f@id? G41a6@id)) G41a4@ls/false)) '#f) (apply (lambda (G41a8@id) '#t) G41a4@ls/false) ((lambda (G41aa@t) ((lambda (G41ac@ls/false) (if G41ac@ls/false (apply (lambda (G41ae@imp*) '#f) G41ac@ls/false) ((lambda (G41b0@t) ((lambda (G41b2@ls/false) (if G41b2@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"malformed import form" G41a0@e)) G41b2@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G41b0@t))) (G2fc2@syntax-dispatch G41b0@t '_))) G41aa@t))) (G2fc2@syntax-dispatch G41aa@t '(_ . each-any)))) G41a2@t))) (G2fc2@syntax-dispatch G41a2@t '(_ any)))) G41a0@e))) (set! G4157@module-import (lambda (G4182@e G4183@r) ((lambda (G4186@t) ((lambda (G4188@ls/false) (if (if G4188@ls/false (begin '#f (apply (lambda (G418a@id) (G2d7f@id? G418a@id)) G4188@ls/false)) '#f) (apply (lambda (G418c@id) (call-with-values (lambda () (G2da7@syntax-type G418c@id G4183@r)) (lambda (G4191@G418e G4192@G418f G4193@G4190) ((lambda (G4197@kwd G4198@value G4199@type) ((lambda (G419d@t) (if (eqv? G419d@t '$module) ((lambda (G419e@iface) (values (G301d@module-interface-exp-id* G419e@iface G418c@id) (G3015@module-interface-exp-lab-vec G419e@iface))) G4198@value) (G30ab@syntax-violation '#f '"invalid import" G4182@e))) G4199@type)) G4193@G4190 G4192@G418f G4191@G418e)))) G4188@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G4186@t))) (G2fc2@syntax-dispatch G4186@t '(_ any)))) G4182@e))) (set! G4159@library-import (lambda (G4168@e) ((lambda (G416a@t) ((lambda (G416c@ls/false) (if G416c@ls/false (apply (lambda (G416e@ctxt G416f@imp*) (call-with-values (lambda () (G302b@parse-import-spec* (G30b1@syntax->datum G416f@imp*))) (lambda (G4174@G4172 G4175@G4173) ((lambda (G4178@subst-labels G4179@subst-names) (values (vector-map (lambda (G417c@name) (G2d5d@datum->stx G416e@ctxt G417c@name)) G4179@subst-names) G4178@subst-labels)) G4175@G4173 G4174@G4172)))) G416c@ls/false) ((lambda (G417e@t) ((lambda (G4180@ls/false) (if G4180@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid import form" G4168@e)) G4180@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G417e@t))) (G2fc2@syntax-dispatch G417e@t '_))) G416a@t))) (G2fc2@syntax-dispatch G416a@t '(any . each-any)))) G4168@e))) (call-with-values (lambda () (if (G4155@module-import? G4140@e) (G4157@module-import G4140@e G412f@r) (G4159@library-import G4140@e))) (lambda (G415c@G415a G415d@G415b) ((lambda (G4160@lab* G4161@id*) (vector-for-each (lambda (G4164@id G4165@lab) (G2d30@extend-rib! G4135@rib G4164@id G4165@lab)) G4161@id* G4160@lab*)) G415d@G415b G415c@G415a))))) '#f '#f '#f))) (G3021@chi-body* (cdr G412e@e*) G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4151@kwd* G4135@rib G4136@top?)) (if G4136@top? (G3021@chi-body* (cdr G412e@e*) G412f@r G4130@mr (cons (G2d01@gen-lexical 'dummy) G4131@lex*) (cons (cons 'top-expr G4140@e) G4132@rhs*) G4133@mod** G4151@kwd* G4135@rib G4136@top?) (values G412e@e* G412f@r G4130@mr G4131@lex* G4132@rhs* G4133@mod** G4151@kwd*))))))))))))) G414d@type)) (if (G2d7f@id? G414b@kwd) (cons G414b@kwd G4134@kwd*) G4134@kwd*))) G4147@G4144 G4146@G4143 G4145@G4142)))) (car G412e@e*))))) (set! G3023@expand-transformer (lambda (G4224@expr G4225@r) ((lambda (G4228@rtc) ((lambda (G422a@expanded-rhs) (begin (for-each ((lambda (G422c@mark-visit) (lambda (G422e@x) (begin (G2b7e@G2a16@invoke-library G422e@x) (G422c@mark-visit G422e@x)))) (G3033@vis-collector)) (G4228@rtc)) G422a@expanded-rhs)) ((lambda (G4234@G4230@inv-collector G4235@G4231@vis-collector G4236@G4232@inv-collector G4237@G4233@vis-collector) ((lambda (G423c@swap) (dynamic-wind G423c@swap (lambda () (G2fe6@chi-expr G4224@expr G4225@r G4225@r)) G423c@swap)) (lambda () (begin ((lambda (G423e@t) (begin (G4234@G4230@inv-collector G4236@G4232@inv-collector) (set! G4236@G4232@inv-collector G423e@t))) (G4234@G4230@inv-collector)) ((lambda (G4240@t) (begin (G4235@G4231@vis-collector G4237@G4233@vis-collector) (set! G4237@G4233@vis-collector G4240@t))) (G4235@G4231@vis-collector)))))) G3031@inv-collector G3033@vis-collector G4228@rtc (lambda (G4242@x) (values))))) (G302f@make-collector)))) (set! G3025@parse-exports (lambda (G4244@exp*) ((lambda (G4247@idsyn?) (begin (set! G4247@idsyn? (lambda (G4264@x) (symbol? (G30b1@syntax->datum G4264@x)))) ((letrec ((G4248@f (lambda (G424a@exp* G424b@int* G424c@ext*) (if (null? G424a@exp*) (begin ((lambda (G4250@id*) (if (G2d89@valid-bound-ids? G4250@id*) (void) (G30ab@syntax-violation 'export '"invalid exports" (G2ffa@find-dups G4250@id*)))) (map (lambda (G4252@x) (G2d49@make-stx G4252@x G2cfd@top-mark* '() '())) G424c@ext*)) (values (map G30b1@syntax->datum G424b@int*) (map G30b1@syntax->datum G424c@ext*))) ((lambda (G4254@t) ((lambda (G4256@ls/false) (if G4256@ls/false (apply (lambda (G4258@rename G4259@i* G425a@e*) (begin (if (if (eq? (G30b1@syntax->datum G4258@rename) 'rename) (if (for-all G4247@idsyn? G4259@i*) (begin '#f (for-all G4247@idsyn? G425a@e*)) '#f) '#f) (void) (G30ab@syntax-violation 'export '"invalid export specifier" (car G424a@exp*))) (G4248@f (cdr G424a@exp*) (append G4259@i* G424b@int*) (append G425a@e* G424c@ext*)))) G4256@ls/false) ((lambda (G425e@t) ((lambda (G4260@ls/false) (if G4260@ls/false (apply (lambda (G4262@ie) (begin (if (G4247@idsyn? G4262@ie) (void) (G30ab@syntax-violation 'export '"invalid export" G4262@ie)) (G4248@f (cdr G424a@exp*) (cons G4262@ie G424b@int*) (cons G4262@ie G424c@ext*)))) G4260@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G425e@t))) (G2fc2@syntax-dispatch G425e@t 'any))) G4254@t))) (G2fc2@syntax-dispatch G4254@t '(any . #(each (any any)))))) (car G424a@exp*)))))) G4248@f) G4244@exp* '() '()))) '#f))) (set! G3027@parse-library-name (lambda (G4266@spec) ((lambda (G4269@parse) (begin (set! G4269@parse (lambda (G4274@x) ((lambda (G4276@t) ((lambda (G4278@ls/false) (if (if G4278@ls/false (begin '#f (apply (lambda (G427a@v*) (for-all (lambda (G427c@x) ((lambda (G427e@x) (if (integer? G427e@x) (begin '#f (exact? G427e@x)) '#f)) (G30b1@syntax->datum G427c@x))) G427a@v*)) G4278@ls/false)) '#f) (apply (lambda (G4280@v*) (values '() (map G30b1@syntax->datum G4280@v*))) G4278@ls/false) ((lambda (G4282@t) ((lambda (G4284@ls/false) (if (if G4284@ls/false (begin '#f (apply (lambda (G4286@x G4287@rest) (symbol? (G30b1@syntax->datum G4286@x))) G4284@ls/false)) '#f) (apply (lambda (G428a@x G428b@rest) (call-with-values (lambda () (G4269@parse G428b@rest)) (lambda (G4290@G428e G4291@G428f) ((lambda (G4294@v* G4295@x*) (values (cons (G30b1@syntax->datum G428a@x) G4295@x*) G4294@v*)) G4291@G428f G4290@G428e)))) G4284@ls/false) ((lambda (G4298@t) ((lambda (G429a@ls/false) (if G429a@ls/false (apply (lambda () (values '() '())) G429a@ls/false) ((lambda (G429c@t) ((lambda (G429e@ls/false) (if G429e@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid library name" G4266@spec)) G429e@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G429c@t))) (G2fc2@syntax-dispatch G429c@t '_))) G4298@t))) (G2fc2@syntax-dispatch G4298@t '()))) G4282@t))) (G2fc2@syntax-dispatch G4282@t '(any . any)))) G4276@t))) (G2fc2@syntax-dispatch G4276@t '(each-any)))) G4274@x))) (call-with-values (lambda () (G4269@parse G4266@spec)) (lambda (G426c@G426a G426d@G426b) ((lambda (G4270@ver* G4271@name*) (begin (if (null? G4271@name*) (G30ab@syntax-violation '#f '"empty library name" G4266@spec) (void)) (values G4271@name* G4270@ver*))) G426d@G426b G426c@G426a))))) '#f))) (set! G3029@parse-library (lambda (G42a0@e) ((lambda (G42a2@t) ((lambda (G42a4@ls/false) (if (if G42a4@ls/false (begin '#f (apply (lambda (G42a6@library G42a7@name* G42a8@export G42a9@exp* G42aa@import G42ab@imp* G42ac@b*) (if (eq? (G30b1@syntax->datum G42a8@export) 'export) (if (eq? (G30b1@syntax->datum G42aa@import) 'import) (begin '#f (eq? (G30b1@syntax->datum G42a6@library) 'library)) '#f) '#f)) G42a4@ls/false)) '#f) (apply (lambda (G42b4@library G42b5@name* G42b6@export G42b7@exp* G42b8@import G42b9@imp* G42ba@b*) (values G42b5@name* G42b7@exp* G42b9@imp* G42ba@b*)) G42a4@ls/false) ((lambda (G42c2@t) ((lambda (G42c4@ls/false) (if G42c4@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"malformed library" G42a0@e)) G42c4@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G42c2@t))) (G2fc2@syntax-dispatch G42c2@t '_))) G42a2@t))) (G2fc2@syntax-dispatch G42a2@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G42a0@e))) (set! G302b@parse-import-spec* (lambda (G42c6@imp*) ((lambda (G42c9@idsyn? G42cb@dup-error G42cd@merge-substs G42cf@exclude* G42d1@find* G42d3@rem* G42d5@remove-dups G42d7@parse-library-name G42d9@import-library G42db@get-import G42dd@add-imports!) (begin (set! G42c9@idsyn? (lambda (G44c4@x) (symbol? (G30b1@syntax->datum G44c4@x)))) (set! G42cb@dup-error (lambda (G44c2@name) (G30ab@syntax-violation 'import '"two imports with different bindings" G44c2@name))) (set! G42cd@merge-substs (lambda (G44b0@s G44b1@subst) ((lambda (G44b5@insert-to-subst) (begin (set! G44b5@insert-to-subst (lambda (G44b6@a G44b7@subst) ((lambda (G44ba@name G44bb@label) ((lambda (G44be@t) (if G44be@t ((lambda (G44c0@x) (if (eq? (cdr G44c0@x) G44bb@label) G44b7@subst (G42cb@dup-error G44ba@name))) G44be@t) (cons G44b6@a G44b7@subst))) (assq G44ba@name G44b7@subst))) (car G44b6@a) (cdr G44b6@a)))) (if (null? G44b0@s) G44b1@subst (G44b5@insert-to-subst (car G44b0@s) (G42cd@merge-substs (cdr G44b0@s) G44b1@subst))))) '#f))) (set! G42cf@exclude* (lambda (G4486@sym* G4487@subst) ((lambda (G448b@exclude) (begin (set! G448b@exclude (lambda (G44a0@sym G44a1@subst) (if (null? G44a1@subst) (G30ab@syntax-violation 'import '"cannot rename unbound identifier" G44a0@sym) (if (eq? G44a0@sym (caar G44a1@subst)) (values (cdar G44a1@subst) (cdr G44a1@subst)) ((lambda (G44a4@a) (call-with-values (lambda () (G448b@exclude G44a0@sym (cdr G44a1@subst))) (lambda (G44a8@G44a6 G44a9@G44a7) ((lambda (G44ac@subst G44ad@old) (values G44ad@old (cons G44a4@a G44ac@subst))) G44a9@G44a7 G44a8@G44a6)))) (car G44a1@subst)))))) (if (null? G4486@sym*) (values '() G4487@subst) (call-with-values (lambda () (G448b@exclude (car G4486@sym*) G4487@subst)) (lambda (G448e@G448c G448f@G448d) ((lambda (G4492@subst G4493@old) (call-with-values (lambda () (G42cf@exclude* (cdr G4486@sym*) G4492@subst)) (lambda (G4498@G4496 G4499@G4497) ((lambda (G449c@subst G449d@old*) (values (cons G4493@old G449d@old*) G449c@subst)) G4499@G4497 G4498@G4496)))) G448f@G448d G448e@G448c)))))) '#f))) (set! G42d1@find* (lambda (G447e@sym* G447f@subst) (map (lambda (G4482@x) ((lambda (G4484@t) (if G4484@t (cdr G4484@t) (G30ab@syntax-violation 'import '"cannot find identifier" G4482@x))) (assq G4482@x G447f@subst))) G447e@sym*))) (set! G42d3@rem* (lambda (G4476@sym* G4477@subst) ((letrec ((G447a@f (lambda (G447c@subst) (if (null? G447c@subst) '() (if (memq (caar G447c@subst) G4476@sym*) (G447a@f (cdr G447c@subst)) (cons (car G447c@subst) (G447a@f (cdr G447c@subst)))))))) G447a@f) G4477@subst))) (set! G42d5@remove-dups (lambda (G4474@ls) (if (null? G4474@ls) '() (if (memq (car G4474@ls) (cdr G4474@ls)) (G42d5@remove-dups (cdr G4474@ls)) (cons (car G4474@ls) (G42d5@remove-dups (cdr G4474@ls))))))) (set! G42d7@parse-library-name (lambda (G4390@spec) ((lambda (G4393@subversion? G4395@subversion-pred G4397@version-pred) (begin (set! G4393@subversion? (lambda (G4472@x) (if (integer? G4472@x) (if (exact? G4472@x) (begin '#f (>= G4472@x '0)) '#f) '#f))) (set! G4395@subversion-pred (lambda (G4412@x*) ((lambda (G4414@t) ((lambda (G4416@ls/false) (if (if G4416@ls/false (begin '#f (apply (lambda (G4418@n) (G4393@subversion? (G30b1@syntax->datum G4418@n))) G4416@ls/false)) '#f) (apply (lambda (G441a@n) (lambda (G441c@x) (= G441c@x (G30b1@syntax->datum G441a@n)))) G4416@ls/false) ((lambda (G441e@t) ((lambda (G4420@ls/false) (if (if G4420@ls/false (begin '#f (apply (lambda (G4422@p? G4423@sub*) (eq? (G30b1@syntax->datum G4422@p?) 'and)) G4420@ls/false)) '#f) (apply (lambda (G4426@p? G4427@sub*) ((lambda (G442a@p*) (lambda (G442c@x) (for-all (lambda (G442e@p) (G442e@p G442c@x)) G442a@p*))) (map G4395@subversion-pred G4427@sub*))) G4420@ls/false) ((lambda (G4430@t) ((lambda (G4432@ls/false) (if (if G4432@ls/false (begin '#f (apply (lambda (G4434@p? G4435@sub*) (eq? (G30b1@syntax->datum G4434@p?) 'or)) G4432@ls/false)) '#f) (apply (lambda (G4438@p? G4439@sub*) ((lambda (G443c@p*) (lambda (G443e@x) (exists (lambda (G4440@p) (G4440@p G443e@x)) G443c@p*))) (map G4395@subversion-pred G4439@sub*))) G4432@ls/false) ((lambda (G4442@t) ((lambda (G4444@ls/false) (if (if G4444@ls/false (begin '#f (apply (lambda (G4446@p? G4447@sub) (eq? (G30b1@syntax->datum G4446@p?) 'not)) G4444@ls/false)) '#f) (apply (lambda (G444a@p? G444b@sub) ((lambda (G444e@p) (lambda (G4450@x) (not (G444e@p G4450@x)))) (G4395@subversion-pred G444b@sub))) G4444@ls/false) ((lambda (G4452@t) ((lambda (G4454@ls/false) (if (if G4454@ls/false (begin '#f (apply (lambda (G4456@p? G4457@n) (if (eq? (G30b1@syntax->datum G4456@p?) '<=) (begin '#f (G4393@subversion? (G30b1@syntax->datum G4457@n))) '#f)) G4454@ls/false)) '#f) (apply (lambda (G445a@p? G445b@n) (lambda (G445e@x) (<= G445e@x (G30b1@syntax->datum G445b@n)))) G4454@ls/false) ((lambda (G4460@t) ((lambda (G4462@ls/false) (if (if G4462@ls/false (begin '#f (apply (lambda (G4464@p? G4465@n) (if (eq? (G30b1@syntax->datum G4464@p?) '>=) (begin '#f (G4393@subversion? G4465@n)) '#f)) G4462@ls/false)) '#f) (apply (lambda (G4468@p? G4469@n) (lambda (G446c@x) (>= G446c@x (G30b1@syntax->datum G4469@n)))) G4462@ls/false) ((lambda (G446e@t) ((lambda (G4470@ls/false) (if G4470@ls/false (apply (lambda () (G30ab@syntax-violation 'import '"invalid sub-version spec" G4390@spec G4412@x*)) G4470@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G446e@t))) (G2fc2@syntax-dispatch G446e@t '_))) G4460@t))) (G2fc2@syntax-dispatch G4460@t '(any any)))) G4452@t))) (G2fc2@syntax-dispatch G4452@t '(any any)))) G4442@t))) (G2fc2@syntax-dispatch G4442@t '(any any)))) G4430@t))) (G2fc2@syntax-dispatch G4430@t '(any . each-any)))) G441e@t))) (G2fc2@syntax-dispatch G441e@t '(any . each-any)))) G4414@t))) (G2fc2@syntax-dispatch G4414@t 'any))) G4412@x*))) (set! G4397@version-pred (lambda (G43c2@x*) ((lambda (G43c4@t) ((lambda (G43c6@ls/false) (if G43c6@ls/false (apply (lambda () (lambda (G43c8@x) '#t)) G43c6@ls/false) ((lambda (G43ca@t) ((lambda (G43cc@ls/false) (if (if G43cc@ls/false (begin '#f (apply (lambda (G43ce@c G43cf@ver*) (eq? (G30b1@syntax->datum G43ce@c) 'and)) G43cc@ls/false)) '#f) (apply (lambda (G43d2@c G43d3@ver*) ((lambda (G43d6@p*) (lambda (G43d8@x) (for-all (lambda (G43da@p) (G43da@p G43d8@x)) G43d6@p*))) (map G4397@version-pred G43d3@ver*))) G43cc@ls/false) ((lambda (G43dc@t) ((lambda (G43de@ls/false) (if (if G43de@ls/false (begin '#f (apply (lambda (G43e0@c G43e1@ver*) (eq? (G30b1@syntax->datum G43e0@c) 'or)) G43de@ls/false)) '#f) (apply (lambda (G43e4@c G43e5@ver*) ((lambda (G43e8@p*) (lambda (G43ea@x) (exists (lambda (G43ec@p) (G43ec@p G43ea@x)) G43e8@p*))) (map G4397@version-pred G43e5@ver*))) G43de@ls/false) ((lambda (G43ee@t) ((lambda (G43f0@ls/false) (if (if G43f0@ls/false (begin '#f (apply (lambda (G43f2@c G43f3@ver) (eq? (G30b1@syntax->datum G43f2@c) 'not)) G43f0@ls/false)) '#f) (apply (lambda (G43f6@c G43f7@ver) ((lambda (G43fa@p) (lambda (G43fc@x) (not (G43fa@p G43fc@x)))) (G4397@version-pred G43f7@ver))) G43f0@ls/false) ((lambda (G43fe@t) ((lambda (G4400@ls/false) (if G4400@ls/false (apply (lambda (G4402@sub*) ((lambda (G4404@p*) (lambda (G4406@x) ((letrec ((G4408@f (lambda (G440a@p* G440b@x) (if (null? G440a@p*) '#t (if (null? G440b@x) '#f (if ((car G440a@p*) (car G440b@x)) (begin '#f (G4408@f (cdr G440a@p*) (cdr G440b@x))) '#f)))))) G4408@f) G4404@p* G4406@x))) (map G4395@subversion-pred G4402@sub*))) G4400@ls/false) ((lambda (G440e@t) ((lambda (G4410@ls/false) (if G4410@ls/false (apply (lambda () (G30ab@syntax-violation 'import '"invalid version spec" G4390@spec G43c2@x*)) G4410@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G440e@t))) (G2fc2@syntax-dispatch G440e@t '_))) G43fe@t))) (G2fc2@syntax-dispatch G43fe@t 'each-any))) G43ee@t))) (G2fc2@syntax-dispatch G43ee@t '(any any)))) G43dc@t))) (G2fc2@syntax-dispatch G43dc@t '(any . each-any)))) G43ca@t))) (G2fc2@syntax-dispatch G43ca@t '(any . each-any)))) G43c4@t))) (G2fc2@syntax-dispatch G43c4@t '()))) G43c2@x*))) ((letrec ((G4398@f (lambda (G439a@x) ((lambda (G439c@t) ((lambda (G439e@ls/false) (if G439e@ls/false (apply (lambda (G43a0@version-spec*) (values '() (G4397@version-pred G43a0@version-spec*))) G439e@ls/false) ((lambda (G43a2@t) ((lambda (G43a4@ls/false) (if (if G43a4@ls/false (begin '#f (apply (lambda (G43a6@x G43a7@x*) (G42c9@idsyn? G43a6@x)) G43a4@ls/false)) '#f) (apply (lambda (G43aa@x G43ab@x*) (call-with-values (lambda () (G4398@f G43ab@x*)) (lambda (G43b0@G43ae G43b1@G43af) ((lambda (G43b4@pred G43b5@name) (values (cons (G30b1@syntax->datum G43aa@x) G43b5@name) G43b4@pred)) G43b1@G43af G43b0@G43ae)))) G43a4@ls/false) ((lambda (G43b8@t) ((lambda (G43ba@ls/false) (if G43ba@ls/false (apply (lambda () (values '() (lambda (G43bc@x) '#t))) G43ba@ls/false) ((lambda (G43be@t) ((lambda (G43c0@ls/false) (if G43c0@ls/false (apply (lambda () (G30ab@syntax-violation '#f '"invalid import spec" G4390@spec)) G43c0@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G43be@t))) (G2fc2@syntax-dispatch G43be@t '_))) G43b8@t))) (G2fc2@syntax-dispatch G43b8@t '()))) G43a2@t))) (G2fc2@syntax-dispatch G43a2@t '(any . any)))) G439c@t))) (G2fc2@syntax-dispatch G439c@t '(each-any)))) G439a@x)))) G4398@f) G4390@spec))) '#f '#f '#f))) (set! G42d9@import-library (lambda (G4382@spec*) (call-with-values (lambda () (G42d7@parse-library-name G4382@spec*)) (lambda (G4386@G4384 G4387@G4385) ((lambda (G438a@pred G438b@name) (begin (if (null? G438b@name) (G30ab@syntax-violation 'import '"empty library name" G4382@spec*) (void)) ((lambda (G438e@lib) (begin (if G438e@lib (void) (G30ab@syntax-violation 'import '"cannot find library with required name" G438b@name)) (if (G438a@pred (G2b4f@G29b8@library-version G438e@lib)) (void) (G30ab@syntax-violation 'import '"library does not satisfy version specification" G4382@spec* G438e@lib)) ((G3035@imp-collector) G438e@lib) (G2b53@G29c0@library-subst G438e@lib))) (G2b77@G2a08@find-library-by-name G438b@name)))) G4387@G4385 G4386@G4384))))) (set! G42db@get-import (lambda (G42f4@spec) ((lambda (G42f6@t) ((lambda (G42f8@ls/false) (if (if G42f8@ls/false (begin '#f (apply (lambda (G42fa@x G42fb@x*) (not (memq (G30b1@syntax->datum G42fa@x) '(for rename except only prefix library)))) G42f8@ls/false)) '#f) (apply (lambda (G42fe@x G42ff@x*) (G42d9@import-library (cons G42fe@x G42ff@x*))) G42f8@ls/false) ((lambda (G4302@t) ((lambda (G4304@ls/false) (if (if G4304@ls/false (begin '#f (apply (lambda (G4306@rename G4307@isp G4308@old* G4309@new*) (if (eq? (G30b1@syntax->datum G4306@rename) 'rename) (if (for-all G42c9@idsyn? G4308@old*) (begin '#f (for-all G42c9@idsyn? G4309@new*)) '#f) '#f)) G4304@ls/false)) '#f) (apply (lambda (G430e@rename G430f@isp G4310@old* G4311@new*) ((lambda (G4316@subst G4317@old* G4318@new*) ((lambda (G431c@old-label*) ((lambda (G431e@subst) (G42cd@merge-substs (map cons G4318@new* G431c@old-label*) G431e@subst)) (G42d3@rem* G4317@old* G4316@subst))) (G42d1@find* G4317@old* G4316@subst))) (G42db@get-import G430f@isp) (map G30b1@syntax->datum G4310@old*) (map G30b1@syntax->datum G4311@new*))) G4304@ls/false) ((lambda (G4320@t) ((lambda (G4322@ls/false) (if (if G4322@ls/false (begin '#f (apply (lambda (G4324@except G4325@isp G4326@sym*) (if (eq? (G30b1@syntax->datum G4324@except) 'except) (begin '#f (for-all G42c9@idsyn? G4326@sym*)) '#f)) G4322@ls/false)) '#f) (apply (lambda (G432a@except G432b@isp G432c@sym*) ((lambda (G4330@subst) (G42d3@rem* (map G30b1@syntax->datum G432c@sym*) G4330@subst)) (G42db@get-import G432b@isp))) G4322@ls/false) ((lambda (G4332@t) ((lambda (G4334@ls/false) (if (if G4334@ls/false (begin '#f (apply (lambda (G4336@only G4337@isp G4338@sym*) (if (eq? (G30b1@syntax->datum G4336@only) 'only) (begin '#f (for-all G42c9@idsyn? G4338@sym*)) '#f)) G4334@ls/false)) '#f) (apply (lambda (G433c@only G433d@isp G433e@sym*) ((lambda (G4342@subst G4343@sym*) ((lambda (G4346@sym*) ((lambda (G4348@lab*) (map cons G4346@sym* G4348@lab*)) (G42d1@find* G4346@sym* G4342@subst))) (G42d5@remove-dups G4343@sym*))) (G42db@get-import G433d@isp) (map G30b1@syntax->datum G433e@sym*))) G4334@ls/false) ((lambda (G434a@t) ((lambda (G434c@ls/false) (if (if G434c@ls/false (begin '#f (apply (lambda (G434e@prefix G434f@isp G4350@p) (if (eq? (G30b1@syntax->datum G434e@prefix) 'prefix) (begin '#f (G42c9@idsyn? G4350@p)) '#f)) G434c@ls/false)) '#f) (apply (lambda (G4354@prefix G4355@isp G4356@p) ((lambda (G435a@subst G435b@prefix) (map (lambda (G435e@x) (cons (string->symbol (string-append G435b@prefix (symbol->string (car G435e@x)))) (cdr G435e@x))) G435a@subst)) (G42db@get-import G4355@isp) (symbol->string (G30b1@syntax->datum G4356@p)))) G434c@ls/false) ((lambda (G4360@t) ((lambda (G4362@ls/false) (if (if G4362@ls/false (begin '#f (apply (lambda (G4364@library G4365@spec*) (eq? (G30b1@syntax->datum G4364@library) 'library)) G4362@ls/false)) '#f) (apply (lambda (G4368@library G4369@spec*) (G42d9@import-library G4369@spec*)) G4362@ls/false) ((lambda (G436c@t) ((lambda (G436e@ls/false) (if (if G436e@ls/false (begin '#f (apply (lambda (G4370@for G4371@isp G4372@rest) (eq? (G30b1@syntax->datum G4370@for) 'for)) G436e@ls/false)) '#f) (apply (lambda (G4376@for G4377@isp G4378@rest) (G42db@get-import G4377@isp)) G436e@ls/false) ((lambda (G437c@t) ((lambda (G437e@ls/false) (if G437e@ls/false (apply (lambda (G4380@spec) (G30ab@syntax-violation 'import '"invalid import spec" G4380@spec)) G437e@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G437c@t))) (G2fc2@syntax-dispatch G437c@t 'any))) G436c@t))) (G2fc2@syntax-dispatch G436c@t '(any any . any)))) G4360@t))) (G2fc2@syntax-dispatch G4360@t '(any each-any)))) G434a@t))) (G2fc2@syntax-dispatch G434a@t '(any any any)))) G4332@t))) (G2fc2@syntax-dispatch G4332@t '(any any . each-any)))) G4320@t))) (G2fc2@syntax-dispatch G4320@t '(any any . each-any)))) G4302@t))) (G2fc2@syntax-dispatch G4302@t '(any any . #(each (any any)))))) G42f6@t))) (G2fc2@syntax-dispatch G42f6@t '(any . each-any)))) G42f4@spec))) (set! G42dd@add-imports! (lambda (G42e4@imp G42e5@h) ((lambda (G42e8@subst) (for-each (lambda (G42ea@x) ((lambda (G42ec@name G42ed@label) ((lambda (G42f0@t) (if G42f0@t ((lambda (G42f2@l) (if (eq? G42f2@l G42ed@label) (void) (G42cb@dup-error G42ec@name))) G42f0@t) (hashtable-set! G42e5@h G42ec@name G42ed@label))) (hashtable-ref G42e5@h G42ec@name '#f))) (car G42ea@x) (cdr G42ea@x))) G42e8@subst)) (G42db@get-import G42e4@imp)))) ((letrec ((G42de@f (lambda (G42e0@imp* G42e1@h) (if (null? G42e0@imp*) (hashtable-entries G42e1@h) (begin (G42dd@add-imports! (car G42e0@imp*) G42e1@h) (G42de@f (cdr G42e0@imp*) G42e1@h)))))) G42de@f) G42c6@imp* (make-eq-hashtable)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G302d@make-top-rib (lambda (G44c6@names G44c7@labels) ((lambda (G44ca@rib) (begin (vector-for-each (lambda (G44cc@name G44cd@label) (begin (if (symbol? G44cc@name) (void) (error 'make-top-rib '"BUG: not a symbol" G44cc@name)) (G2d30@extend-rib! G44ca@rib (G2d49@make-stx G44cc@name G2cfd@top-mark* '() '()) G44cd@label))) G44c6@names G44c7@labels) G44ca@rib)) (G2d2e@make-empty-rib)))) (set! G302f@make-collector (lambda () ((lambda (G44d0@ls) (lambda G44d4 ((lambda (G44d5) (if (= G44d5 '0) (apply (lambda () G44d0@ls) G44d4) (if (= G44d5 '1) (apply (lambda (G44d2@x) (set! G44d0@ls (G2cf6@set-cons G44d2@x G44d0@ls))) G44d4) (error 'apply '"invalid arg count")))) (length G44d4)))) '()))) (set! G3031@inv-collector (G28df@G2812@make-parameter (lambda G44d6@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G44d8@x) (begin (if (procedure? G44d8@x) (void) (assertion-violation 'inv-collector '"BUG: not a procedure" G44d8@x)) G44d8@x)))) (set! G3033@vis-collector (G28df@G2812@make-parameter (lambda G44da@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G44dc@x) (begin (if (procedure? G44dc@x) (void) (assertion-violation 'vis-collector '"BUG: not a procedure" G44dc@x)) G44dc@x)))) (set! G3035@imp-collector (G28df@G2812@make-parameter (lambda G44de@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G44e0@x) (begin (if (procedure? G44e0@x) (void) (assertion-violation 'imp-collector '"BUG: not a procedure" G44e0@x)) G44e0@x)))) (set! G3037@chi-library-internal (lambda (G44e2@e* G44e3@rib G44e4@top?) (call-with-values (lambda () (G3021@chi-body* G44e2@e* '() '() '() '() '() '() G44e3@rib G44e4@top?)) (lambda (G44ef@G44e8 G44f0@G44e9 G44f1@G44ea G44f2@G44eb G44f3@G44ec G44f4@G44ed G44f5@G44ee) ((lambda (G44fd@_kwd* G44fe@mod** G44ff@rhs* G4500@lex* G4501@mr G4502@r G4503@e*) (values (append (apply append (reverse G44fe@mod**)) G4503@e*) G4502@r G4501@mr (reverse G4500@lex*) (reverse G44ff@rhs*))) G44f5@G44ee G44f4@G44ed G44f3@G44ec G44f2@G44eb G44f1@G44ea G44f0@G44e9 G44ef@G44e8))))) (set! G3039@chi-interaction-expr (lambda (G450b@e G450c@rib G450d@r) (call-with-values (lambda () (G3021@chi-body* (list G450b@e) G450d@r G450d@r '() '() '() '() G450c@rib '#t)) (lambda (G4518@G4511 G4519@G4512 G451a@G4513 G451b@G4514 G451c@G4515 G451d@G4516 G451e@G4517) ((lambda (G4526@_kwd* G4527@mod** G4528@rhs* G4529@lex* G452a@mr G452b@r G452c@e*) ((lambda (G4534@e*) ((lambda (G4536@e) (values G4536@e G452b@r)) (if (null? G4534@e*) (G2ce5@G2c57@build-void) (if (null? (cdr G4534@e*)) (car G4534@e*) (G2ce4@G2c55@build-sequence '#f G4534@e*))))) (G2ff4@expand-interaction-rhs*/init* (reverse G4529@lex*) (reverse G4528@rhs*) (append (apply append (reverse G4527@mod**)) G452c@e*) G452b@r G452a@mr))) G451e@G4517 G451d@G4516 G451c@G4515 G451b@G4514 G451a@G4513 G4519@G4512 G4518@G4511))))) (set! G303b@library-body-expander (lambda (G4538@name G4539@exp* G453a@imp* G453b@b* G453c@top?) ((lambda (G4543@itc) (begin (set! G4543@itc (G302f@make-collector)) ((lambda (G4548@G4544@imp-collector G4549@G4545@top-level-context G454a@G4546@imp-collector G454b@G4547@top-level-context) ((lambda (G4550@swap) (dynamic-wind G4550@swap (lambda () (call-with-values (lambda () (G3025@parse-exports G4539@exp*)) (lambda (G4554@G4552 G4555@G4553) ((lambda (G4558@exp-ext* G4559@exp-int*) (call-with-values (lambda () (G302b@parse-import-spec* G453a@imp*)) (lambda (G455e@G455c G455f@G455d) ((lambda (G4562@subst-labels G4563@subst-names) ((lambda (G4566@rib) ((lambda (G4568@b* G4569@rtc G456a@vtc) ((lambda (G4572@G456e@inv-collector G4573@G456f@vis-collector G4574@G4570@inv-collector G4575@G4571@vis-collector) ((lambda (G457a@swap) (dynamic-wind G457a@swap (lambda () (call-with-values (lambda () (G3037@chi-library-internal G4568@b* G4566@rib G453c@top?)) (lambda (G4581@G457c G4582@G457d G4583@G457e G4584@G457f G4585@G4580) ((lambda (G458b@rhs* G458c@lex* G458d@mr G458e@r G458f@init*) (begin (G2d34@seal-rib! G4566@rib) ((lambda (G4595@init*) ((lambda (G4597@rhs*) ((lambda () (begin (G2d36@unseal-rib! G4566@rib) ((lambda (G4599@loc* G459a@export-subst) ((lambda (G459e@errstr) (begin (set! G459e@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G309b@make-export-env/macros G458c@lex* G4599@loc* G458e@r)) (lambda (G45a2@G459f G45a3@G45a0 G45a4@G45a1) ((lambda (G45a8@macro* G45a9@global* G45aa@export-env) (begin (for-each (lambda (G45ae@s) ((lambda (G45b0@name G45b1@label) ((lambda (G45b4@p) (if G45b4@p ((lambda (G45b6@b) ((lambda (G45b8@type) (if (eq? G45b8@type 'mutable) (G30ab@syntax-violation 'export G459e@errstr G45b0@name) (void))) (car G45b6@b))) (cdr G45b4@p)) (void))) (assq G45b1@label G45aa@export-env))) (car G45ae@s) (cdr G45ae@s))) G459a@export-subst) ((lambda (G45ba@invoke-body G45bb@invoke-definitions) (values (G4543@itc) (G4569@rtc) (G456a@vtc) (G2ce4@G2c55@build-sequence '#f (append G45bb@invoke-definitions (list G45ba@invoke-body))) G45a8@macro* G459a@export-subst G45aa@export-env)) (G2ce7@G2c5b@build-letrec* '#f G458c@lex* G4597@rhs* (G3097@build-exports G45a9@global* G4595@init*)) (map G2ce0@G2b85@build-global-define (map cdr G45a9@global*))))) G45a4@G45a1 G45a3@G45a0 G45a2@G459f))))) '#f)) (map G2d03@gen-global G458c@lex*) (G3099@make-export-subst G4559@exp-int* G4558@exp-ext* G4566@rib)))))) (G2ff6@chi-rhs* G458b@rhs* G458e@r G458d@mr))) (G2fe2@chi-expr* G458f@init* G458e@r G458d@mr)))) G4585@G4580 G4584@G457f G4583@G457e G4582@G457d G4581@G457c)))) G457a@swap)) (lambda () (begin ((lambda (G45be@t) (begin (G4572@G456e@inv-collector G4574@G4570@inv-collector) (set! G4574@G4570@inv-collector G45be@t))) (G4572@G456e@inv-collector)) ((lambda (G45c0@t) (begin (G4573@G456f@vis-collector G4575@G4571@vis-collector) (set! G4575@G4571@vis-collector G45c0@t))) (G4573@G456f@vis-collector)))))) G3031@inv-collector G3033@vis-collector G4569@rtc G456a@vtc)) (map (lambda (G45c2@x) (G2d49@make-stx G45c2@x G2cfd@top-mark* (list G4566@rib) '())) G453b@b*) (G302f@make-collector) (G302f@make-collector))) (G302d@make-top-rib G4563@subst-names G4562@subst-labels))) G455f@G455d G455e@G455c)))) G4555@G4553 G4554@G4552)))) G4550@swap)) (lambda () (begin ((lambda (G45c4@t) (begin (G4548@G4544@imp-collector G454a@G4546@imp-collector) (set! G454a@G4546@imp-collector G45c4@t))) (G4548@G4544@imp-collector)) ((lambda (G45c6@t) (begin (G4549@G4545@top-level-context G454b@G4547@top-level-context) (set! G454b@G4547@top-level-context G45c6@t))) (G4549@G4545@top-level-context)))))) G3035@imp-collector G30b9@top-level-context G4543@itc '#f))) '#f))) (set! G303d@core-library-expander (lambda (G45c8@e G45c9@verify-name) (call-with-values (lambda () (G3029@parse-library G45c8@e)) (lambda (G45d0@G45cc G45d1@G45cd G45d2@G45ce G45d3@G45cf) ((lambda (G45d8@b* G45d9@imp* G45da@exp* G45db@name*) (call-with-values (lambda () (G3027@parse-library-name G45db@name*)) (lambda (G45e2@G45e0 G45e3@G45e1) ((lambda (G45e6@ver G45e7@name) (begin (G45c9@verify-name G45e7@name) (call-with-values (lambda () (G303b@library-body-expander G45e7@name G45da@exp* G45d9@imp* G45d8@b* '#f)) (lambda (G45f1@G45ea G45f2@G45eb G45f3@G45ec G45f4@G45ed G45f5@G45ee G45f6@G45ef G45f7@G45f0) ((lambda (G45ff@export-env G4600@export-subst G4601@visit-code G4602@invoke-code G4603@visit-req* G4604@invoke-req* G4605@imp*) (values G45e7@name G45e6@ver G4605@imp* G4604@invoke-req* G4603@visit-req* G4602@invoke-code G4601@visit-code G4600@export-subst G45ff@export-env)) G45f7@G45f0 G45f6@G45ef G45f5@G45ee G45f4@G45ed G45f3@G45ec G45f2@G45eb G45f1@G45ea))))) G45e3@G45e1 G45e2@G45e0)))) G45d3@G45cf G45d2@G45ce G45d1@G45cd G45d0@G45cc))))) (set! G303f@parse-top-level-program (lambda (G460d@e*) ((lambda (G460f@t) ((lambda (G4611@ls/false) (if (if G4611@ls/false (begin '#f (apply (lambda (G4613@import G4614@imp* G4615@b*) (eq? (G30b1@syntax->datum G4613@import) 'import)) G4611@ls/false)) '#f) (apply (lambda (G4619@import G461a@imp* G461b@b*) (values G461a@imp* G461b@b*)) G4611@ls/false) ((lambda (G461f@t) ((lambda (G4621@ls/false) (if (if G4621@ls/false (begin '#f (apply (lambda (G4623@import G4624@x G4625@y) (eq? (G30b1@syntax->datum G4623@import) 'import)) G4621@ls/false)) '#f) (apply (lambda (G4629@import G462a@x G462b@y) (G30ab@syntax-violation 'expander '"invalid syntax of top-level program" (G2d79@syntax-car G460d@e*))) G4621@ls/false) ((lambda (G462f@t) ((lambda (G4631@ls/false) (if G4631@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G4631@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G462f@t))) (G2fc2@syntax-dispatch G462f@t '_))) G461f@t))) (G2fc2@syntax-dispatch G461f@t '((any . any) . any)))) G460f@t))) (G2fc2@syntax-dispatch G460f@t '((any . each-any) . each-any)))) G460d@e*))) (set! G3041@top-level-expander (lambda (G4633@e*) (call-with-values (lambda () (G303f@parse-top-level-program G4633@e*)) (lambda (G4637@G4635 G4638@G4636) ((lambda (G463b@b* G463c@imp*) (call-with-values (lambda () (G303b@library-body-expander '() '() G463c@imp* G463b@b* '#t)) (lambda (G4646@G463f G4647@G4640 G4648@G4641 G4649@G4642 G464a@G4643 G464b@G4644 G464c@G4645) ((lambda (G4654@export-env G4655@export-subst G4656@visit-code G4657@invoke-code G4658@visit-req* G4659@invoke-req* G465a@imp*) (values G4659@invoke-req* G4657@invoke-code)) G464c@G4645 G464b@G4644 G464a@G4643 G4649@G4642 G4648@G4641 G4647@G4640 G4646@G463f)))) G4638@G4636 G4637@G4635))))) (set! G3047@G3042 (make-record-type-descriptor 'env '#f 'G3045 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G3049@G3044 '#f) (set! G304b@G3043 (make-record-constructor-descriptor G3047@G3042 '#f G3049@G3044)) (set! G3050@env? (record-predicate G3047@G3042)) (set! G3052@make-env (record-constructor G304b@G3043)) (set! G3054@env-names (record-accessor G3047@G3042 '0)) (set! G3056@env-labels (record-accessor G3047@G3042 '1)) (set! G3058@env-itc (record-accessor G3047@G3042 '2)) (set! G305a@set-env-names! (record-mutator G3047@G3042 '0)) (set! G305c@set-env-labels! (record-mutator G3047@G3042 '1)) (set! G305e@set-env-itc! (record-mutator G3047@G3042 '2)) (set! G3060@rp (G28dc@G280c@make-record-printer 'env (lambda (G4662@x G4663@p) (display '"#<environment>" G4663@p)))) (set! G3066@G3061 (make-record-type-descriptor 'interaction-env '#f 'G3064 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3068@G3063 '#f) (set! G306a@G3062 (make-record-constructor-descriptor G3066@G3061 '#f G3068@G3063)) (set! G306f@interaction-env? (record-predicate G3066@G3061)) (set! G3071@make-interaction-env (record-constructor G306a@G3062)) (set! G3073@interaction-env-rib (record-accessor G3066@G3061 '0)) (set! G3075@interaction-env-r (record-accessor G3066@G3061 '1)) (set! G3077@interaction-env-locs (record-accessor G3066@G3061 '2)) (set! G3079@set-interaction-env-rib! (record-mutator G3066@G3061 '0)) (set! G307b@set-interaction-env-r! (record-mutator G3066@G3061 '1)) (set! G307d@set-interaction-env-locs! (record-mutator G3066@G3061 '2)) (set! G307f@rp (G28dc@G280c@make-record-printer 'interaction-env (lambda (G4666@x G4667@p) (display '"#<environment>" G4667@p)))) (set! G3081@interaction-environment-symbols (lambda () (map (lambda (G466a@x) G466a@x) (G2d1e@rib-sym* (G3073@interaction-env-rib (G30b7@interaction-environment)))))) (set! G3083@environment-symbols (lambda (G466c@e) (vector->list (G3054@env-names G466c@e)))) (set! G3085@environment? (lambda (G466e@x) ((lambda (G4670@t) (if G4670@t G4670@t (begin '#f (G306f@interaction-env? G466e@x)))) (G3050@env? G466e@x)))) (set! G3087@environment (lambda G4672@imp* ((lambda (G4674@itc) ((lambda (G4678@G4676@imp-collector G4679@G4677@imp-collector) ((lambda (G467c@swap) (dynamic-wind G467c@swap (lambda () (call-with-values (lambda () (G302b@parse-import-spec* G4672@imp*)) (lambda (G4680@G467e G4681@G467f) ((lambda (G4684@subst-labels G4685@subst-names) (G3052@make-env G4685@subst-names G4684@subst-labels G4674@itc)) G4681@G467f G4680@G467e)))) G467c@swap)) (lambda () ((lambda (G4688@t) (begin (G4678@G4676@imp-collector G4679@G4677@imp-collector) (set! G4679@G4677@imp-collector G4688@t))) (G4678@G4676@imp-collector))))) G3035@imp-collector G4674@itc)) (G302f@make-collector)))) (set! G3089@null-environment (lambda (G468a@n) (begin (if (eqv? G468a@n '5) (void) (assertion-violation 'null-environment '"not 5" G468a@n)) (G3087@environment '(psyntax null-environment-5))))) (set! G308b@scheme-report-environment (lambda (G468c@n) (begin (if (eqv? G468c@n '5) (void) (assertion-violation 'scheme-report-environment '"not 5" G468c@n)) (G3087@environment '(psyntax scheme-report-environment-5))))) (set! G308d@expand (lambda (G468e@x G468f@env) (if (G3050@env? G468f@env) ((lambda (G4692@rib) ((lambda (G4694@x G4695@itc G4696@rtc G4697@vtc) ((lambda (G469c@x) (begin (G2d34@seal-rib! G4692@rib) (values G469c@x (G4696@rtc)))) ((lambda (G46a4@G469e@inv-collector G46a5@G469f@vis-collector G46a6@G46a0@imp-collector G46a7@G46a1@inv-collector G46a8@G46a2@vis-collector G46a9@G46a3@imp-collector) ((lambda (G46b0@swap) (dynamic-wind G46b0@swap (lambda () (G2fe6@chi-expr G4694@x '() '())) G46b0@swap)) (lambda () (begin ((lambda (G46b2@t) (begin (G46a4@G469e@inv-collector G46a7@G46a1@inv-collector) (set! G46a7@G46a1@inv-collector G46b2@t))) (G46a4@G469e@inv-collector)) ((lambda (G46b4@t) (begin (G46a5@G469f@vis-collector G46a8@G46a2@vis-collector) (set! G46a8@G46a2@vis-collector G46b4@t))) (G46a5@G469f@vis-collector)) ((lambda (G46b6@t) (begin (G46a6@G46a0@imp-collector G46a9@G46a3@imp-collector) (set! G46a9@G46a3@imp-collector G46b6@t))) (G46a6@G46a0@imp-collector)))))) G3031@inv-collector G3033@vis-collector G3035@imp-collector G4696@rtc G4697@vtc G4695@itc))) (G2d49@make-stx G468e@x G2cfd@top-mark* (list G4692@rib) '()) (G3058@env-itc G468f@env) (G302f@make-collector) (G302f@make-collector))) (G302d@make-top-rib (G3054@env-names G468f@env) (G3056@env-labels G468f@env))) (if (G306f@interaction-env? G468f@env) ((lambda (G46b8@rib G46b9@r G46ba@rtc) ((lambda (G46be@x) (call-with-values (lambda () ((lambda (G46ca@G46c2@top-level-context G46cb@G46c3@inv-collector G46cc@G46c4@vis-collector G46cd@G46c5@imp-collector G46ce@G46c6@top-level-context G46cf@G46c7@inv-collector G46d0@G46c8@vis-collector G46d1@G46c9@imp-collector) ((lambda (G46da@swap) (dynamic-wind G46da@swap (lambda () (G3039@chi-interaction-expr G46be@x G46b8@rib G46b9@r)) G46da@swap)) (lambda () (begin ((lambda (G46dc@t) (begin (G46ca@G46c2@top-level-context G46ce@G46c6@top-level-context) (set! G46ce@G46c6@top-level-context G46dc@t))) (G46ca@G46c2@top-level-context)) ((lambda (G46de@t) (begin (G46cb@G46c3@inv-collector G46cf@G46c7@inv-collector) (set! G46cf@G46c7@inv-collector G46de@t))) (G46cb@G46c3@inv-collector)) ((lambda (G46e0@t) (begin (G46cc@G46c4@vis-collector G46d0@G46c8@vis-collector) (set! G46d0@G46c8@vis-collector G46e0@t))) (G46cc@G46c4@vis-collector)) ((lambda (G46e2@t) (begin (G46cd@G46c5@imp-collector G46d1@G46c9@imp-collector) (set! G46d1@G46c9@imp-collector G46e2@t))) (G46cd@G46c5@imp-collector)))))) G30b9@top-level-context G3031@inv-collector G3033@vis-collector G3035@imp-collector G468f@env G46ba@rtc (G302f@make-collector) (G302f@make-collector))) (lambda (G46e4@G46c0 G46e5@G46c1) ((lambda (G46e8@r^ G46e9@e) (begin (G307b@set-interaction-env-r! G468f@env G46e8@r^) (values G46e9@e (G46ba@rtc)))) G46e5@G46c1 G46e4@G46c0)))) (G2d49@make-stx G468e@x G2cfd@top-mark* (list G46b8@rib) '()))) (G3073@interaction-env-rib G468f@env) (G3075@interaction-env-r G468f@env) (G302f@make-collector)) (assertion-violation 'expand '"not an environment" G468f@env))))) (set! G308f@eval (lambda (G46ec@x G46ed@env) (begin (if (G3085@environment? G46ed@env) (void) (error 'eval '"not an environment" G46ed@env)) (call-with-values (lambda () (G308d@expand G46ec@x G46ed@env)) (lambda (G46f2@G46f0 G46f3@G46f1) ((lambda (G46f6@invoke-req* G46f7@x) (begin (for-each G2b7e@G2a16@invoke-library G46f6@invoke-req*) (eval-core (G2942@G28eb@expanded->core G46f7@x)))) G46f3@G46f1 G46f2@G46f0)))))) (set! G3091@library-expander (lambda G475f ((lambda (G4760) (if (= G4760 '3) (apply (lambda (G46fa@x G46fb@filename G46fc@verify-name) ((lambda (G4701@build-visit-code G4703@visit!) (begin (set! G4701@build-visit-code (lambda (G474d@macro*) (if (null? G474d@macro*) (G2ce5@G2c57@build-void) (G2ce4@G2c55@build-sequence '#f (map (lambda (G474f@x) ((lambda (G4751@loc G4752@src) (list 'set! G4751@loc G4752@src)) (car G474f@x) (cddr G474f@x))) G474d@macro*))))) (set! G4703@visit! (lambda (G4745@macro*) (for-each (lambda (G4747@x) ((lambda (G4749@loc G474a@proc) (set-symbol-value! G4749@loc G474a@proc)) (car G4747@x) (cadr G4747@x))) G4745@macro*))) (call-with-values (lambda () (G303d@core-library-expander G46fa@x G46fc@verify-name)) (lambda (G470d@G4704 G470e@G4705 G470f@G4706 G4710@G4707 G4711@G4708 G4712@G4709 G4713@G470a G4714@G470b G4715@G470c) ((lambda (G471f@export-env G4720@export-subst G4721@macro* G4722@invoke-code G4723@vis* G4724@inv* G4725@imp* G4726@ver G4727@name) ((lambda (G4731@id G4732@name G4733@ver G4734@imp* G4735@vis* G4736@inv* G4737@visit-proc G4738@invoke-proc G4739@visit-code G473a@invoke-code) (begin (G2b7c@G2a12@install-library G4731@id G4732@name G4733@ver G4734@imp* G4735@vis* G4736@inv* G4720@export-subst G471f@export-env G4737@visit-proc G4738@invoke-proc G4739@visit-code G473a@invoke-code '#t G46fb@filename) (values G4731@id G4732@name G4733@ver G4734@imp* G4735@vis* G4736@inv* G473a@invoke-code G4739@visit-code G4720@export-subst G471f@export-env))) (gensym) G4727@name G4726@ver (map G2b82@G2a1e@library-spec G4725@imp*) (map G2b82@G2a1e@library-spec G4723@vis*) (map G2b82@G2a1e@library-spec G4724@inv*) (lambda () (G4703@visit! G4721@macro*)) (lambda () (eval-core (G2942@G28eb@expanded->core G4722@invoke-code))) (G4701@build-visit-code G4721@macro*) G4722@invoke-code)) G4715@G470c G4714@G470b G4713@G470a G4712@G4709 G4711@G4708 G4710@G4707 G470f@G4706 G470e@G4705 G470d@G4704))))) '#f '#f)) G475f) (if (= G4760 '2) (apply (lambda (G4755@x G4756@filename) (G3091@library-expander G4755@x G4756@filename (lambda (G4759@x) (values)))) G475f) (if (= G4760 '1) (apply (lambda (G475b@x) (G3091@library-expander G475b@x '#f (lambda (G475d@x) (values)))) G475f) (error 'apply '"invalid arg count"))))) (length G475f)))) (set! G3093@boot-library-expand (lambda (G4761@x) (call-with-values (lambda () (G3091@library-expander G4761@x)) (lambda (G476d@G4763 G476e@G4764 G476f@G4765 G4770@G4766 G4771@G4767 G4772@G4768 G4773@G4769 G4774@G476a G4775@G476b G4776@G476c) ((lambda (G4781@export-env G4782@export-subst G4783@visit-code G4784@invoke-code G4785@inv* G4786@vis* G4787@imp* G4788@ver G4789@name G478a@id) (values G4789@name G4784@invoke-code G4782@export-subst G4781@export-env)) G4776@G476c G4775@G476b G4774@G476a G4773@G4769 G4772@G4768 G4771@G4767 G4770@G4766 G476f@G4765 G476e@G4764 G476d@G4763))))) (set! G3095@rev-map-append (lambda (G4795@f G4796@ls G4797@ac) (if (null? G4796@ls) G4797@ac (G3095@rev-map-append G4795@f (cdr G4796@ls) (cons (G4795@f (car G4796@ls)) G4797@ac))))) (set! G3097@build-exports (lambda (G479b@lex*+loc* G479c@init*) (G2ce4@G2c55@build-sequence '#f (cons (G2ce5@G2c57@build-void) (G3095@rev-map-append (lambda (G479f@x) (list 'set! (cdr G479f@x) (car G479f@x))) G479b@lex*+loc* G479c@init*))))) (set! G3099@make-export-subst (lambda (G47a1@int* G47a2@ext* G47a3@rib) (map (lambda (G47a7@int G47a8@ext) ((lambda (G47ab@id) ((lambda (G47ad@label) ((lambda () (begin (if G47ad@label (void) (G30ab@syntax-violation '#f '"cannot export unbound identifier" G47ab@id)) (cons G47a8@ext G47ad@label))))) (G2d99@id->label G47ab@id))) (G2d49@make-stx G47a7@int G2cfd@top-mark* (list G47a3@rib) '()))) G47a1@int* G47a2@ext*))) (set! G309b@make-export-env/macros (lambda (G47af@lex* G47b0@loc* G47b1@r) ((lambda (G47b6@lookup) (begin (set! G47b6@lookup (lambda (G47d2@x) ((letrec ((G47d4@f (lambda (G47d6@x G47d7@lex* G47d8@loc*) (if (pair? G47d7@lex*) (if (eq? G47d6@x (car G47d7@lex*)) (car G47d8@loc*) (G47d4@f G47d6@x (cdr G47d7@lex*) (cdr G47d8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G47d4@f) G47d2@x G47af@lex* G47b0@loc*))) ((letrec ((G47b7@f (lambda (G47b9@r G47ba@env G47bb@global* G47bc@macro*) (if (null? G47b9@r) (values G47ba@env G47bb@global* G47bc@macro*) ((lambda (G47c1@x) ((lambda (G47c3@label G47c4@b) ((lambda (G47c7@t) (if (eqv? G47c7@t 'lexical) ((lambda (G47cc@v) ((lambda (G47ce@loc G47cf@type) (G47b7@f (cdr G47b9@r) (cons (cons* G47c3@label G47cf@type G47ce@loc) G47ba@env) (cons (cons (G2f52@lexical-var G47cc@v) G47ce@loc) G47bb@global*) G47bc@macro*)) (G47b6@lookup (G2f52@lexical-var G47cc@v)) (if (G2f54@lexical-mutable? G47cc@v) 'mutable 'global))) (G2da3@binding-value G47c4@b)) (if (eqv? G47c7@t 'local-macro) ((lambda (G47ca@loc) (G47b7@f (cdr G47b9@r) (cons (cons* G47c3@label 'global-macro G47ca@loc) G47ba@env) G47bb@global* (cons (cons G47ca@loc (G2da3@binding-value G47c4@b)) G47bc@macro*))) (gensym)) (if (eqv? G47c7@t 'local-macro!) ((lambda (G47c8@loc) (G47b7@f (cdr G47b9@r) (cons (cons* G47c3@label 'global-macro! G47c8@loc) G47ba@env) G47bb@global* (cons (cons G47c8@loc (G2da3@binding-value G47c4@b)) G47bc@macro*))) (gensym)) (if (memv G47c7@t '($rtd $module)) (G47b7@f (cdr G47b9@r) (cons G47c1@x G47ba@env) G47bb@global* G47bc@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2da1@binding-type G47c4@b) (G2da3@binding-value G47c4@b))))))) (G2da1@binding-type G47c4@b))) (car G47c1@x) (cdr G47c1@x))) (car G47b9@r)))))) G47b7@f) G47b1@r '() '() '()))) '#f))) (set! G309d@generate-temporaries (lambda (G47dc@ls) ((lambda (G47de@t) ((lambda (G47e0@ls/false) (if G47e0@ls/false (apply (lambda (G47e2@ls) (map (lambda (G47e4@x) (G2d49@make-stx ((lambda (G47e6@x) (if ((lambda (G47e8@t) (if G47e8@t G47e8@t (begin '#f (string? G47e6@x)))) (symbol? G47e6@x)) (gensym G47e6@x) (gensym 't))) (G30b1@syntax->datum G47e4@x)) G2cfd@top-mark* '() '())) G47e2@ls)) G47e0@ls/false) ((lambda (G47ea@t) ((lambda (G47ec@ls/false) (if G47ec@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47ec@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G47ea@t))) (G2fc2@syntax-dispatch G47ea@t '_))) G47de@t))) (G2fc2@syntax-dispatch G47de@t 'each-any))) G47dc@ls))) (set! G309f@free-identifier=? (lambda (G47ee@x G47ef@y) (if (G2d7f@id? G47ee@x) (if (G2d7f@id? G47ef@y) (G2d87@free-id=? G47ee@x G47ef@y) (assertion-violation 'free-identifier=? '"not an identifier" G47ef@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47ee@x)))) (set! G30a1@bound-identifier=? (lambda (G47f2@x G47f3@y) (if (G2d7f@id? G47f2@x) (if (G2d7f@id? G47f3@y) (G2d85@bound-id=? G47f2@x G47f3@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47f3@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47f2@x)))) (set! G30a3@extract-position-condition (lambda (G47f6@x) ((lambda (G4800@G47fb G4802@G47fd G4804@G47fc G4809@G47fa G480b@make-source-condition G480d@G47f8 G480f@G47f9 G4811@source-condition? G4813@source-filename G4815@source-line) (begin (set! G4800@G47fb (make-record-type-descriptor '&source-information &condition-rtd 'G47fe '#f '#f '#((immutable file-name) (immutable line)))) (set! G4802@G47fd '#f) (set! G4804@G47fc (make-record-constructor-descriptor G4800@G47fb &condition-rcd G4802@G47fd)) (set! G4809@G47fa (record-predicate G4800@G47fb)) (set! G480b@make-source-condition (record-constructor G4804@G47fc)) (set! G480d@G47f8 (record-accessor G4800@G47fb '0)) (set! G480f@G47f9 (record-accessor G4800@G47fb '1)) (set! G4811@source-condition? (condition-predicate G4800@G47fb)) (set! G4813@source-filename (condition-accessor G4800@G47fb G480d@G47f8)) (set! G4815@source-line (condition-accessor G4800@G47fb G480f@G47f9)) (if (G2d47@stx? G47f6@x) ((lambda (G4816@x) (if (G28d7@G2802@annotation? G4816@x) ((lambda (G4818@src) (if (pair? G4818@src) (G480b@make-source-condition (car G4818@src) (cdr G4818@src)) (condition))) (G28d8@G2804@annotation-source G4816@x)) (condition))) (G2d4b@stx-expr G47f6@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30a5@syntax-error (lambda (G481a@x . G481c@args) (begin (if (for-all string? G481c@args) (void) (assertion-violation 'syntax-error '"invalid argument" G481c@args)) (raise (condition (G4ae4@G49ce@make-message-condition (if (null? G481c@args) '"invalid syntax" (apply string-append G481c@args))) (G4b2c@G4aba@make-syntax-violation (G30b1@syntax->datum G481a@x) '#f) (G30a3@extract-position-condition G481a@x) (G30a7@extract-trace G481a@x)))))) (set! G30a7@extract-trace (lambda (G481e@x) ((lambda (G4827@G4822 G4829@G4824 G482b@G4823 G4830@G4821 G4832@make-trace G4834@G4820 G4836@trace? G4838@trace-form) (begin (set! G4827@G4822 (make-record-type-descriptor '&trace &condition-rtd 'G4825 '#f '#f '#((immutable form)))) (set! G4829@G4824 '#f) (set! G482b@G4823 (make-record-constructor-descriptor G4827@G4822 &condition-rcd G4829@G4824)) (set! G4830@G4821 (record-predicate G4827@G4822)) (set! G4832@make-trace (record-constructor G482b@G4823)) (set! G4834@G4820 (record-accessor G4827@G4822 '0)) (set! G4836@trace? (condition-predicate G4827@G4822)) (set! G4838@trace-form (condition-accessor G4827@G4822 G4834@G4820)) ((letrec ((G4839@f (lambda (G483b@x) (if (G2d47@stx? G483b@x) (apply condition (G4832@make-trace G483b@x) (map G4839@f (G2d51@stx-ae* G483b@x))) (if (G28d7@G2802@annotation? G483b@x) (G4832@make-trace (G2d49@make-stx G483b@x '() '() '())) (condition)))))) G4839@f) G481e@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30a9@syntax-violation* (lambda (G483d@who G483e@msg G483f@form G4840@condition-object) (begin (if (string? G483e@msg) (void) (assertion-violation 'syntax-violation '"message is not a string" G483e@msg)) ((lambda (G4845@who) (raise (condition (if G4845@who (G4b12@G4a64@make-who-condition G4845@who) (condition)) (G4ae4@G49ce@make-message-condition G483e@msg) G4840@condition-object (G30a3@extract-position-condition G483f@form) (G30a7@extract-trace G483f@form)))) (if ((lambda (G4847@t) (if G4847@t G4847@t (begin '#f (symbol? G483d@who)))) (string? G483d@who)) G483d@who (if (not G483d@who) ((lambda (G4849@t) ((lambda (G484b@ls/false) (if (if G484b@ls/false (begin '#f (apply (lambda (G484d@id) (G2d7f@id? G484d@id)) G484b@ls/false)) '#f) (apply (lambda (G484f@id) (G30b1@syntax->datum G484f@id)) G484b@ls/false) ((lambda (G4851@t) ((lambda (G4853@ls/false) (if (if G4853@ls/false (begin '#f (apply (lambda (G4855@id G4856@rest) (G2d7f@id? G4855@id)) G4853@ls/false)) '#f) (apply (lambda (G4859@id G485a@rest) (G30b1@syntax->datum G4859@id)) G4853@ls/false) ((lambda (G485d@t) ((lambda (G485f@ls/false) (if G485f@ls/false (apply (lambda () '#f) G485f@ls/false) (G30ab@syntax-violation '#f '"invalid syntax" G485d@t))) (G2fc2@syntax-dispatch G485d@t '_))) G4851@t))) (G2fc2@syntax-dispatch G4851@t '(any . any)))) G4849@t))) (G2fc2@syntax-dispatch G4849@t 'any))) G483f@form) (assertion-violation 'syntax-violation '"invalid who argument" G483d@who))))))) (set! G30ab@syntax-violation (lambda G486f ((lambda (G4870) (if (= G4870 '3) (apply (lambda (G4861@who G4862@msg G4863@form) (G30ab@syntax-violation G4861@who G4862@msg G4863@form '#f)) G486f) (if (= G4870 '4) (apply (lambda (G4867@who G4868@msg G4869@form G486a@subform) (G30a9@syntax-violation* G4867@who G4868@msg G4869@form (G4b2c@G4aba@make-syntax-violation (G30b1@syntax->datum G4869@form) (G30b1@syntax->datum G486a@subform)))) G486f) (error 'apply '"invalid arg count")))) (length G486f)))) (set! G30ad@identifier? (lambda (G4871@x) (G2d7f@id? G4871@x))) (set! G30af@datum->syntax (lambda (G4873@id G4874@datum) (if (G2d7f@id? G4873@id) (G2d5d@datum->stx G4873@id G4874@datum) (assertion-violation 'datum->syntax '"not an identifier" G4873@id)))) (set! G30b1@syntax->datum (lambda (G4877@x) (G2d95@stx->datum G4877@x))) (set! G30b3@compile-r6rs-top-level (lambda (G4879@x*) (call-with-values (lambda () (G3041@top-level-expander G4879@x*)) (lambda (G487d@G487b G487e@G487c) ((lambda (G4881@invoke-code G4882@lib*) (lambda () (begin (for-each G2b7e@G2a16@invoke-library G4882@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2942@G28eb@expanded->core G4881@invoke-code)) (void)) (eval-core (G2942@G28eb@expanded->core G4881@invoke-code))))) G487e@G487c G487d@G487b))))) (set! G30b5@pre-compile-r6rs-top-level (lambda (G4885@x*) (call-with-values (lambda () (G3041@top-level-expander G4885@x*)) (lambda (G4889@G4887 G488a@G4888) ((lambda (G488d@invoke-code G488e@lib*) (begin (for-each G2b7e@G2a16@invoke-library G488e@lib*) (G28dd@G280e@compile-core (G2942@G28eb@expanded->core G488d@invoke-code)))) G488a@G4888 G4889@G4887))))) (set! G30b7@interaction-environment ((lambda (G4891@the-env) (lambda () ((lambda (G4893@t) (if G4893@t G4893@t (begin '#f ((lambda (G4895@lib G4896@rib) (begin ((lambda (G4899@subst) (begin (G2d26@set-rib-sym*! G4896@rib (map car G4899@subst)) (G2d28@set-rib-mark**! G4896@rib (map (lambda (G489b@x) G2cfd@top-mark*) G4899@subst)) (G2d2a@set-rib-label*! G4896@rib (map cdr G4899@subst)))) (G2b53@G29c0@library-subst G4895@lib)) ((lambda (G489d@env) (begin (set! G4891@the-env G489d@env) G489d@env)) (G3071@make-interaction-env G4896@rib '() '())))) (G2b77@G2a08@find-library-by-name '(mosh interaction)) (G2d2e@make-empty-rib))))) G4891@the-env))) '#f)) (set! G30b9@top-level-context (G28df@G2812@make-parameter '#f)) (begin (set! G49a2@G30b9@top-level-context G30b9@top-level-context) (set! G49a1@G30b7@interaction-environment G30b7@interaction-environment) (set! G49a0@G30b5@pre-compile-r6rs-top-level G30b5@pre-compile-r6rs-top-level) (set! G499f@G30b3@compile-r6rs-top-level G30b3@compile-r6rs-top-level) (set! G499e@G30b1@syntax->datum G30b1@syntax->datum) (set! G499d@G30af@datum->syntax G30af@datum->syntax) (set! G499c@G30ad@identifier? G30ad@identifier?) (set! G499b@G30ab@syntax-violation G30ab@syntax-violation) (set! G499a@G30a9@syntax-violation* G30a9@syntax-violation*) (set! G4999@G30a7@extract-trace G30a7@extract-trace) (set! G4998@G30a5@syntax-error G30a5@syntax-error) (set! G4997@G30a3@extract-position-condition G30a3@extract-position-condition) (set! G4996@G30a1@bound-identifier=? G30a1@bound-identifier=?) (set! G4995@G309f@free-identifier=? G309f@free-identifier=?) (set! G4994@G309d@generate-temporaries G309d@generate-temporaries) (set! G4993@G309b@make-export-env/macros G309b@make-export-env/macros) (set! G4992@G3099@make-export-subst G3099@make-export-subst) (set! G4991@G3097@build-exports G3097@build-exports) (set! G4990@G3095@rev-map-append G3095@rev-map-append) (set! G498f@G3093@boot-library-expand G3093@boot-library-expand) (set! G498e@G3091@library-expander G3091@library-expander) (set! G498d@G308f@eval G308f@eval) (set! G498c@G308d@expand G308d@expand) (set! G498b@G308b@scheme-report-environment G308b@scheme-report-environment) (set! G498a@G3089@null-environment G3089@null-environment) (set! G4989@G3087@environment G3087@environment) (set! G4988@G3085@environment? G3085@environment?) (set! G4987@G3083@environment-symbols G3083@environment-symbols) (set! G4986@G3081@interaction-environment-symbols G3081@interaction-environment-symbols) (set! G4985@G307f@rp G307f@rp) (set! G4984@G307d@set-interaction-env-locs! G307d@set-interaction-env-locs!) (set! G4983@G307b@set-interaction-env-r! G307b@set-interaction-env-r!) (set! G4982@G3079@set-interaction-env-rib! G3079@set-interaction-env-rib!) (set! G4981@G3077@interaction-env-locs G3077@interaction-env-locs) (set! G4980@G3075@interaction-env-r G3075@interaction-env-r) (set! G497f@G3073@interaction-env-rib G3073@interaction-env-rib) (set! G497e@G3071@make-interaction-env G3071@make-interaction-env) (set! G497d@G306f@interaction-env? G306f@interaction-env?) (set! G497c@G306a@G3062 G306a@G3062) (set! G497b@G3068@G3063 G3068@G3063) (set! G497a@G3066@G3061 G3066@G3061) (set! G4979@G3060@rp G3060@rp) (set! G4978@G305e@set-env-itc! G305e@set-env-itc!) (set! G4977@G305c@set-env-labels! G305c@set-env-labels!) (set! G4976@G305a@set-env-names! G305a@set-env-names!) (set! G4975@G3058@env-itc G3058@env-itc) (set! G4974@G3056@env-labels G3056@env-labels) (set! G4973@G3054@env-names G3054@env-names) (set! G4972@G3052@make-env G3052@make-env) (set! G4971@G3050@env? G3050@env?) (set! G4970@G304b@G3043 G304b@G3043) (set! G496f@G3049@G3044 G3049@G3044) (set! G496e@G3047@G3042 G3047@G3042) (set! G496d@G3041@top-level-expander G3041@top-level-expander) (set! G496c@G303f@parse-top-level-program G303f@parse-top-level-program) (set! G496b@G303d@core-library-expander G303d@core-library-expander) (set! G496a@G303b@library-body-expander G303b@library-body-expander) (set! G4969@G3039@chi-interaction-expr G3039@chi-interaction-expr) (set! G4968@G3037@chi-library-internal G3037@chi-library-internal) (set! G4967@G3035@imp-collector G3035@imp-collector) (set! G4966@G3033@vis-collector G3033@vis-collector) (set! G4965@G3031@inv-collector G3031@inv-collector) (set! G4964@G302f@make-collector G302f@make-collector) (set! G4963@G302d@make-top-rib G302d@make-top-rib) (set! G4962@G302b@parse-import-spec* G302b@parse-import-spec*) (set! G4961@G3029@parse-library G3029@parse-library) (set! G4960@G3027@parse-library-name G3027@parse-library-name) (set! G495f@G3025@parse-exports G3025@parse-exports) (set! G495e@G3023@expand-transformer G3023@expand-transformer) (set! G495d@G3021@chi-body* G3021@chi-body*) (set! G495c@G301f@chi-internal-module G301f@chi-internal-module) (set! G495b@G301d@module-interface-exp-id* G301d@module-interface-exp-id*) (set! G495a@G301b@set-module-interface-exp-lab-vec! G301b@set-module-interface-exp-lab-vec!) (set! G4959@G3019@set-module-interface-exp-id-vec! G3019@set-module-interface-exp-id-vec!) (set! G4958@G3017@set-module-interface-first-mark! G3017@set-module-interface-first-mark!) (set! G4957@G3015@module-interface-exp-lab-vec G3015@module-interface-exp-lab-vec) (set! G4956@G3013@module-interface-exp-id-vec G3013@module-interface-exp-id-vec) (set! G4955@G3011@module-interface-first-mark G3011@module-interface-first-mark) (set! G4954@G300f@make-module-interface G300f@make-module-interface) (set! G4953@G300d@module-interface? G300d@module-interface?) (set! G4952@G3008@G3000 G3008@G3000) (set! G4951@G3006@G3001 G3006@G3001) (set! G4950@G3004@G2fff G3004@G2fff) (set! G494f@G2ffe@parse-module G2ffe@parse-module) (set! G494e@G2ffc@chi-internal G2ffc@chi-internal) (set! G494d@G2ffa@find-dups G2ffa@find-dups) (set! G494c@G2ff8@find-bound=? G2ff8@find-bound=?) (set! G494b@G2ff6@chi-rhs* G2ff6@chi-rhs*) (set! G494a@G2ff4@expand-interaction-rhs*/init* G2ff4@expand-interaction-rhs*/init*) (set! G4949@G2ff2@chi-rhs G2ff2@chi-rhs) (set! G4948@G2ff0@chi-defun G2ff0@chi-defun) (set! G4947@G2fee@chi-lambda-clause* G2fee@chi-lambda-clause*) (set! G4946@G2fec@chi-lambda-clause G2fec@chi-lambda-clause) (set! G4945@G2fea@verify-formals G2fea@verify-formals) (set! G4944@G2fe8@chi-set! G2fe8@chi-set!) (set! G4943@G2fe6@chi-expr G2fe6@chi-expr) (set! G4942@G2fe4@chi-application G2fe4@chi-application) (set! G4941@G2fe2@chi-expr* G2fe2@chi-expr*) (set! G4940@G2fe0@chi-global-macro G2fe0@chi-global-macro) (set! G493f@G2fde@chi-local-macro G2fde@chi-local-macro) (set! G493e@G2fdc@chi-macro G2fdc@chi-macro) (set! G493d@G2fda@do-macro-call G2fda@do-macro-call) (set! G493c@G2fd8@local-macro-transformer G2fd8@local-macro-transformer) (set! G493b@G2fd6@macro-transformer G2fd6@macro-transformer) (set! G493a@G2fd4@symbol-macro G2fd4@symbol-macro) (set! G4939@G2fd2@file-options-macro G2fd2@file-options-macro) (set! G4938@G2fd0@core-macro-transformer G2fd0@core-macro-transformer) (set! G4937@G2fce@syntax-transformer G2fce@syntax-transformer) (set! G4936@G2fcc@ellipsis-map G2fcc@ellipsis-map) (set! G4935@G2fca@syntax-case-transformer G2fca@syntax-case-transformer) (set! G4934@G2fc8@verify-literals G2fc8@verify-literals) (set! G4933@G2fc6@underscore? G2fc6@underscore?) (set! G4932@G2fc4@ellipsis? G2fc4@ellipsis?) (set! G4931@G2fc2@syntax-dispatch G2fc2@syntax-dispatch) (set! G4930@G2fc0@convert-pattern G2fc0@convert-pattern) (set! G492f@G2fbe@foreign-call-transformer G2fbe@foreign-call-transformer) (set! G492e@G2fbc@parameterize-transformer G2fbc@parameterize-transformer) (set! G492d@G2fba@incorrect-usage-macro G2fba@incorrect-usage-macro) (set! G492c@G2fb8@define-condition-type-macro G2fb8@define-condition-type-macro) (set! G492b@G2fb6@define-record-type-macro G2fb6@define-record-type-macro) (set! G492a@G2fb4@define-struct-macro G2fb4@define-struct-macro) (set! G4929@G2fb2@quasisyntax-macro G2fb2@quasisyntax-macro) (set! G4928@G2fb0@quasiquote-macro G2fb0@quasiquote-macro) (set! G4927@G2fae@syntax-rules-macro G2fae@syntax-rules-macro) (set! G4926@G2fac@include-into-macro G2fac@include-into-macro) (set! G4925@G2faa@include-macro G2faa@include-macro) (set! G4924@G2fa8@do-include G2fa8@do-include) (set! G4923@G2fa6@cond-macro G2fa6@cond-macro) (set! G4922@G2fa4@and-macro G2fa4@and-macro) (set! G4921@G2fa2@or-macro G2fa2@or-macro) (set! G4920@G2fa0@let*-macro G2fa0@let*-macro) (set! G491f@G2f9e@do-macro G2f9e@do-macro) (set! G491e@G2f9c@identifier-syntax-macro G2f9c@identifier-syntax-macro) (set! G491d@G2f9a@endianness-macro G2f9a@endianness-macro) (set! G491c@G2f98@assert-macro G2f98@assert-macro) (set! G491b@G2f96@delay-macro G2f96@delay-macro) (set! G491a@G2f94@time-macro G2f94@time-macro) (set! G4919@G2f92@define-enumeration-macro G2f92@define-enumeration-macro) (set! G4918@G2f90@guard-macro G2f90@guard-macro) (set! G4917@G2f8e@trace-letrec-syntax-macro G2f8e@trace-letrec-syntax-macro) (set! G4916@G2f8c@trace-let-syntax-macro G2f8c@trace-let-syntax-macro) (set! G4915@G2f8a@trace-let/rec-syntax G2f8a@trace-let/rec-syntax) (set! G4914@G2f88@trace-define-syntax-macro G2f88@trace-define-syntax-macro) (set! G4913@G2f86@trace-define-macro G2f86@trace-define-macro) (set! G4912@G2f84@trace-lambda-macro G2f84@trace-lambda-macro) (set! G4911@G2f82@let*-values-macro G2f82@let*-values-macro) (set! G4910@G2f80@let-values-macro G2f80@let-values-macro) (set! G490f@G2f7e@let-macro G2f7e@let-macro) (set! G490e@G2f7c@invalid-fmls-error G2f7c@invalid-fmls-error) (set! G490d@G2f7a@with-syntax-macro G2f7a@with-syntax-macro) (set! G490c@G2f78@bless G2f78@bless) (set! G490b@G2f76@lambda-transformer G2f76@lambda-transformer) (set! G490a@G2f74@case-lambda-transformer G2f74@case-lambda-transformer) (set! G4909@G2f72@quote-transformer G2f72@quote-transformer) (set! G4908@G2f70@case-transformer G2f70@case-transformer) (set! G4907@G2f6e@if-transformer G2f6e@if-transformer) (set! G4906@G2f6c@unless-transformer G2f6c@unless-transformer) (set! G4905@G2f6a@when-transformer G2f6a@when-transformer) (set! G4904@G2f68@record-constructor-descriptor-transformer G2f68@record-constructor-descriptor-transformer) (set! G4903@G2f66@record-type-descriptor-transformer G2f66@record-type-descriptor-transformer) (set! G4902@G2f64@type-descriptor-transformer G2f64@type-descriptor-transformer) (set! G4901@G2f62@fluid-let-syntax-transformer G2f62@fluid-let-syntax-transformer) (set! G4900@G2f60@letrec*-transformer G2f60@letrec*-transformer) (set! G48ff@G2f5e@letrec-transformer G2f5e@letrec-transformer) (set! G48fe@G2f5c@letrec-helper G2f5c@letrec-helper) (set! G48fd@G2f5a@add-lexicals G2f5a@add-lexicals) (set! G48fc@G2f58@add-lexical G2f58@add-lexical) (set! G48fb@G2f56@set-lexical-mutable! G2f56@set-lexical-mutable!) (set! G48fa@G2f54@lexical-mutable? G2f54@lexical-mutable?) (set! G48f9@G2f52@lexical-var G2f52@lexical-var) (set! G48f8@G2f50@scheme-stx G2f50@scheme-stx) (set! G48f7@G2f4e@scheme-stx-hashtable G2f4e@scheme-stx-hashtable) (set! G48f6@G2f4c@parse-define-syntax G2f4c@parse-define-syntax) (set! G48f5@G2f4a@parse-define G2f4a@parse-define) (set! G48f4@G2dc6@make-eval-transformer G2dc6@make-eval-transformer) (set! G48f3@G2dc4@variable-transformer-procedure G2dc4@variable-transformer-procedure) (set! G48f2@G2dc2@variable-transformer? G2dc2@variable-transformer?) (set! G48f1@G2dc0@make-variable-transformer G2dc0@make-variable-transformer) (set! G48f0@G2dbe@sanitize-binding G2dbe@sanitize-binding) (set! G48ef@G2da7@syntax-type G2da7@syntax-type) (set! G48ee@G2da5@raise-unbound-error G2da5@raise-unbound-error) (set! G48ed@G2da3@binding-value G2da3@binding-value) (set! G48ec@G2da1@binding-type G2da1@binding-type) (set! G48eb@G2d9f@make-binding G2d9f@make-binding) (set! G48ea@G2d9d@label->binding G2d9d@label->binding) (set! G48e9@G2d9b@id->real-label G2d9b@id->real-label) (set! G48e8@G2d99@id->label G2d99@id->label) (set! G48e7@G2d97@same-marks*? G2d97@same-marks*?) (set! G48e6@G2d95@stx->datum G2d95@stx->datum) (set! G48e5@G2d93@strip G2d93@strip) (set! G48e4@G2d91@strip-annotations G2d91@strip-annotations) (set! G48e3@G2d8f@self-evaluating? G2d8f@self-evaluating?) (set! G48e2@G2d8d@bound-id-member? G2d8d@bound-id-member?) (set! G48e1@G2d8b@distinct-bound-ids? G2d8b@distinct-bound-ids?) (set! G48e0@G2d89@valid-bound-ids? G2d89@valid-bound-ids?) (set! G48df@G2d87@free-id=? G2d87@free-id=?) (set! G48de@G2d85@bound-id=? G2d85@bound-id=?) (set! G48dd@G2d83@same-marks? G2d83@same-marks?) (set! G48dc@G2d81@id->sym G2d81@id->sym) (set! G48db@G2d7f@id? G2d7f@id?) (set! G48da@G2d7d@syntax->list G2d7d@syntax->list) (set! G48d9@G2d7b@syntax-cdr G2d7b@syntax-cdr) (set! G48d8@G2d79@syntax-car G2d79@syntax-car) (set! G48d7@G2d77@syntax-list? G2d77@syntax-list?) (set! G48d6@G2d75@syntax-null? G2d75@syntax-null?) (set! G48d5@G2d73@syntax-vector? G2d73@syntax-vector?) (set! G48d4@G2d71@syntax-pair? G2d71@syntax-pair?) (set! G48d3@G2d6f@syntax-vector->list G2d6f@syntax-vector->list) (set! G48d2@G2d6d@syntax-kind? G2d6d@syntax-kind?) (set! G48d1@G2d6b@add-subst G2d6b@add-subst) (set! G48d0@G2d69@add-mark G2d69@add-mark) (set! G48cf@G2d67@mkstx G2d67@mkstx) (set! G48ce@G2d65@join-wraps G2d65@join-wraps) (set! G48cd@G2d63@anti-mark? G2d63@anti-mark?) (set! G48cc@G2d61@anti-mark G2d61@anti-mark) (set! G48cb@G2d5f@gen-mark G2d5f@gen-mark) (set! G48ca@G2d5d@datum->stx G2d5d@datum->stx) (set! G48c9@G2d5b@rp G2d5b@rp) (set! G48c8@G2d59@set-stx-ae*! G2d59@set-stx-ae*!) (set! G48c7@G2d57@set-stx-subst*! G2d57@set-stx-subst*!) (set! G48c6@G2d55@set-stx-mark*! G2d55@set-stx-mark*!) (set! G48c5@G2d53@set-stx-expr! G2d53@set-stx-expr!) (set! G48c4@G2d51@stx-ae* G2d51@stx-ae*) (set! G48c3@G2d4f@stx-subst* G2d4f@stx-subst*) (set! G48c2@G2d4d@stx-mark* G2d4d@stx-mark*) (set! G48c1@G2d4b@stx-expr G2d4b@stx-expr) (set! G48c0@G2d49@make-stx G2d49@make-stx) (set! G48bf@G2d47@stx? G2d47@stx?) (set! G48be@G2d42@G2d3a G2d42@G2d3a) (set! G48bd@G2d40@G2d3b G2d40@G2d3b) (set! G48bc@G2d3e@G2d39 G2d3e@G2d39) (set! G48bb@G2d38@make-full-rib G2d38@make-full-rib) (set! G48ba@G2d36@unseal-rib! G2d36@unseal-rib!) (set! G48b9@G2d34@seal-rib! G2d34@seal-rib!) (set! G48b8@G2d32@make-rib-map G2d32@make-rib-map) (set! G48b7@G2d30@extend-rib! G2d30@extend-rib!) (set! G48b6@G2d2e@make-empty-rib G2d2e@make-empty-rib) (set! G48b5@G2d2c@set-rib-sealed/freq! G2d2c@set-rib-sealed/freq!) (set! G48b4@G2d2a@set-rib-label*! G2d2a@set-rib-label*!) (set! G48b3@G2d28@set-rib-mark**! G2d28@set-rib-mark**!) (set! G48b2@G2d26@set-rib-sym*! G2d26@set-rib-sym*!) (set! G48b1@G2d24@rib-sealed/freq G2d24@rib-sealed/freq) (set! G48b0@G2d22@rib-label* G2d22@rib-label*) (set! G48af@G2d20@rib-mark** G2d20@rib-mark**) (set! G48ae@G2d1e@rib-sym* G2d1e@rib-sym*) (set! G48ad@G2d1c@make-rib G2d1c@make-rib) (set! G48ac@G2d1a@rib? G2d1a@rib?) (set! G48ab@G2d15@G2d0d G2d15@G2d0d) (set! G48aa@G2d13@G2d0e G2d13@G2d0e) (set! G48a9@G2d11@G2d0c G2d11@G2d0c) (set! G48a8@G2d0b@gen-define-label G2d0b@gen-define-label) (set! G48a7@G2d09@gen-define-label+loc G2d09@gen-define-label+loc) (set! G48a6@G2d07@gen-top-level-label G2d07@gen-top-level-label) (set! G48a5@G2d05@gen-label G2d05@gen-label) (set! G48a4@G2d03@gen-global G2d03@gen-global) (set! G48a3@G2d01@gen-lexical G2d01@gen-lexical) (set! G48a2@G2cff@top-marked? G2cff@top-marked?) (set! G48a1@G2cfd@top-mark* G2cfd@top-mark*) (set! G48a0@G2cf8@set-union G2cf8@set-union) (set! G489f@G2cf6@set-cons G2cf6@set-cons) (G2b74@G2a02@current-library-expander G3091@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G49ac@G49a7 G49ae@G49a9 G49b0@G49a8 G49b5@&condition? G49b7@make-&condition G49b9@&condition-rtd G49bb@&condition-rcd G49c3@G49be G49c5@G49c0 G49c7@G49bf G49cc@G49bd G49ce@make-message-condition G49d0@G49bc G49d2@message-condition? G49d4@condition-message G49db@G49d6 G49dd@G49d8 G49df@G49d7 G49e4@G49d5 G49e6@make-warning G49e8@warning? G49ef@G49ea G49f1@G49ec G49f3@G49eb G49f8@G49e9 G49fa@make-serious-condition G49fc@serious-condition? G4a03@G49fe G4a05@G4a00 G4a07@G49ff G4a0c@G49fd G4a0e@make-error G4a10@error? G4a17@G4a12 G4a19@G4a14 G4a1b@G4a13 G4a20@G4a11 G4a22@make-violation G4a24@violation? G4a2b@G4a26 G4a2d@G4a28 G4a2f@G4a27 G4a34@G4a25 G4a36@make-assertion-violation G4a38@assertion-violation? G4a40@G4a3b G4a42@G4a3d G4a44@G4a3c G4a49@G4a3a G4a4b@make-irritants-condition G4a4d@G4a39 G4a4f@irritants-condition? G4a51@condition-irritants G4a59@G4a54 G4a5b@G4a56 G4a5d@G4a55 G4a62@G4a53 G4a64@make-who-condition G4a66@G4a52 G4a68@who-condition? G4a6a@condition-who G4a71@G4a6c G4a73@G4a6e G4a75@G4a6d G4a7a@G4a6b G4a7c@make-non-continuable-violation G4a7e@non-continuable-violation? G4a85@G4a80 G4a87@G4a82 G4a89@G4a81 G4a8e@G4a7f G4a90@make-implementation-restriction-violation G4a92@implementation-restriction-violation? G4a99@G4a94 G4a9b@G4a96 G4a9d@G4a95 G4aa2@G4a93 G4aa4@make-lexical-violation G4aa6@lexical-violation? G4aaf@G4aaa G4ab1@G4aac G4ab3@G4aab G4ab8@G4aa9 G4aba@make-syntax-violation G4abc@G4aa7 G4abe@G4aa8 G4ac0@syntax-violation? G4ac2@syntax-violation-form G4ac4@syntax-violation-subform G4acb@G4ac6 G4acd@G4ac8 G4acf@G4ac7 G4ad4@G4ac5 G4ad6@make-undefined-violation G4ad8@undefined-violation?) (begin (set! G49ac@G49a7 (make-record-type-descriptor '&condition '#f 'G49aa '#f '#f '#())) (set! G49ae@G49a9 '#f) (set! G49b0@G49a8 (make-record-constructor-descriptor G49ac@G49a7 '#f G49ae@G49a9)) (set! G49b5@&condition? (record-predicate G49ac@G49a7)) (set! G49b7@make-&condition (record-constructor G49b0@G49a8)) (set! G49b9@&condition-rtd G49ac@G49a7) (set! G49bb@&condition-rcd G49b0@G49a8) (set! G49c3@G49be (make-record-type-descriptor '&message G49ac@G49a7 'G49c1 '#f '#f '#((immutable message)))) (set! G49c5@G49c0 '#f) (set! G49c7@G49bf (make-record-constructor-descriptor G49c3@G49be G49b0@G49a8 G49c5@G49c0)) (set! G49cc@G49bd (record-predicate G49c3@G49be)) (set! G49ce@make-message-condition (record-constructor G49c7@G49bf)) (set! G49d0@G49bc (record-accessor G49c3@G49be '0)) (set! G49d2@message-condition? (condition-predicate G49c3@G49be)) (set! G49d4@condition-message (condition-accessor G49c3@G49be G49d0@G49bc)) (set! G49db@G49d6 (make-record-type-descriptor '&warning G49ac@G49a7 'G49d9 '#f '#f '#())) (set! G49dd@G49d8 '#f) (set! G49df@G49d7 (make-record-constructor-descriptor G49db@G49d6 G49b0@G49a8 G49dd@G49d8)) (set! G49e4@G49d5 (record-predicate G49db@G49d6)) (set! G49e6@make-warning (record-constructor G49df@G49d7)) (set! G49e8@warning? (condition-predicate G49db@G49d6)) (set! G49ef@G49ea (make-record-type-descriptor '&serious G49ac@G49a7 'G49ed '#f '#f '#())) (set! G49f1@G49ec '#f) (set! G49f3@G49eb (make-record-constructor-descriptor G49ef@G49ea G49b0@G49a8 G49f1@G49ec)) (set! G49f8@G49e9 (record-predicate G49ef@G49ea)) (set! G49fa@make-serious-condition (record-constructor G49f3@G49eb)) (set! G49fc@serious-condition? (condition-predicate G49ef@G49ea)) (set! G4a03@G49fe (make-record-type-descriptor '&error G49ef@G49ea 'G4a01 '#f '#f '#())) (set! G4a05@G4a00 '#f) (set! G4a07@G49ff (make-record-constructor-descriptor G4a03@G49fe G49f3@G49eb G4a05@G4a00)) (set! G4a0c@G49fd (record-predicate G4a03@G49fe)) (set! G4a0e@make-error (record-constructor G4a07@G49ff)) (set! G4a10@error? (condition-predicate G4a03@G49fe)) (set! G4a17@G4a12 (make-record-type-descriptor '&violation G49ef@G49ea 'G4a15 '#f '#f '#())) (set! G4a19@G4a14 '#f) (set! G4a1b@G4a13 (make-record-constructor-descriptor G4a17@G4a12 G49f3@G49eb G4a19@G4a14)) (set! G4a20@G4a11 (record-predicate G4a17@G4a12)) (set! G4a22@make-violation (record-constructor G4a1b@G4a13)) (set! G4a24@violation? (condition-predicate G4a17@G4a12)) (set! G4a2b@G4a26 (make-record-type-descriptor '&assertion G4a17@G4a12 'G4a29 '#f '#f '#())) (set! G4a2d@G4a28 '#f) (set! G4a2f@G4a27 (make-record-constructor-descriptor G4a2b@G4a26 G4a1b@G4a13 G4a2d@G4a28)) (set! G4a34@G4a25 (record-predicate G4a2b@G4a26)) (set! G4a36@make-assertion-violation (record-constructor G4a2f@G4a27)) (set! G4a38@assertion-violation? (condition-predicate G4a2b@G4a26)) (set! G4a40@G4a3b (make-record-type-descriptor '&irritants G49ac@G49a7 'G4a3e '#f '#f '#((immutable irritants)))) (set! G4a42@G4a3d '#f) (set! G4a44@G4a3c (make-record-constructor-descriptor G4a40@G4a3b G49b0@G49a8 G4a42@G4a3d)) (set! G4a49@G4a3a (record-predicate G4a40@G4a3b)) (set! G4a4b@make-irritants-condition (record-constructor G4a44@G4a3c)) (set! G4a4d@G4a39 (record-accessor G4a40@G4a3b '0)) (set! G4a4f@irritants-condition? (condition-predicate G4a40@G4a3b)) (set! G4a51@condition-irritants (condition-accessor G4a40@G4a3b G4a4d@G4a39)) (set! G4a59@G4a54 (make-record-type-descriptor '&who G49ac@G49a7 'G4a57 '#f '#f '#((immutable who)))) (set! G4a5b@G4a56 '#f) (set! G4a5d@G4a55 (make-record-constructor-descriptor G4a59@G4a54 G49b0@G49a8 G4a5b@G4a56)) (set! G4a62@G4a53 (record-predicate G4a59@G4a54)) (set! G4a64@make-who-condition (record-constructor G4a5d@G4a55)) (set! G4a66@G4a52 (record-accessor G4a59@G4a54 '0)) (set! G4a68@who-condition? (condition-predicate G4a59@G4a54)) (set! G4a6a@condition-who (condition-accessor G4a59@G4a54 G4a66@G4a52)) (set! G4a71@G4a6c (make-record-type-descriptor '&non-continuable G4a17@G4a12 'G4a6f '#f '#f '#())) (set! G4a73@G4a6e '#f) (set! G4a75@G4a6d (make-record-constructor-descriptor G4a71@G4a6c G4a1b@G4a13 G4a73@G4a6e)) (set! G4a7a@G4a6b (record-predicate G4a71@G4a6c)) (set! G4a7c@make-non-continuable-violation (record-constructor G4a75@G4a6d)) (set! G4a7e@non-continuable-violation? (condition-predicate G4a71@G4a6c)) (set! G4a85@G4a80 (make-record-type-descriptor '&implementation-restriction G4a17@G4a12 'G4a83 '#f '#f '#())) (set! G4a87@G4a82 '#f) (set! G4a89@G4a81 (make-record-constructor-descriptor G4a85@G4a80 G4a1b@G4a13 G4a87@G4a82)) (set! G4a8e@G4a7f (record-predicate G4a85@G4a80)) (set! G4a90@make-implementation-restriction-violation (record-constructor G4a89@G4a81)) (set! G4a92@implementation-restriction-violation? (condition-predicate G4a85@G4a80)) (set! G4a99@G4a94 (make-record-type-descriptor '&lexical G4a17@G4a12 'G4a97 '#f '#f '#())) (set! G4a9b@G4a96 '#f) (set! G4a9d@G4a95 (make-record-constructor-descriptor G4a99@G4a94 G4a1b@G4a13 G4a9b@G4a96)) (set! G4aa2@G4a93 (record-predicate G4a99@G4a94)) (set! G4aa4@make-lexical-violation (record-constructor G4a9d@G4a95)) (set! G4aa6@lexical-violation? (condition-predicate G4a99@G4a94)) (set! G4aaf@G4aaa (make-record-type-descriptor '&syntax G4a17@G4a12 'G4aad '#f '#f '#((immutable form) (immutable subform)))) (set! G4ab1@G4aac '#f) (set! G4ab3@G4aab (make-record-constructor-descriptor G4aaf@G4aaa G4a1b@G4a13 G4ab1@G4aac)) (set! G4ab8@G4aa9 (record-predicate G4aaf@G4aaa)) (set! G4aba@make-syntax-violation (record-constructor G4ab3@G4aab)) (set! G4abc@G4aa7 (record-accessor G4aaf@G4aaa '0)) (set! G4abe@G4aa8 (record-accessor G4aaf@G4aaa '1)) (set! G4ac0@syntax-violation? (condition-predicate G4aaf@G4aaa)) (set! G4ac2@syntax-violation-form (condition-accessor G4aaf@G4aaa G4abc@G4aa7)) (set! G4ac4@syntax-violation-subform (condition-accessor G4aaf@G4aaa G4abe@G4aa8)) (set! G4acb@G4ac6 (make-record-type-descriptor '&undefined G4a17@G4a12 'G4ac9 '#f '#f '#())) (set! G4acd@G4ac8 '#f) (set! G4acf@G4ac7 (make-record-constructor-descriptor G4acb@G4ac6 G4a1b@G4a13 G4acd@G4ac8)) (set! G4ad4@G4ac5 (record-predicate G4acb@G4ac6)) (set! G4ad6@make-undefined-violation (record-constructor G4acf@G4ac7)) (set! G4ad8@undefined-violation? (condition-predicate G4acb@G4ac6)) (begin (set! G4b37@G4ad8@undefined-violation? G4ad8@undefined-violation?) (set! G4b36@G4ad6@make-undefined-violation G4ad6@make-undefined-violation) (set! G4b35@G4ad4@G4ac5 G4ad4@G4ac5) (set! G4b34@G4acf@G4ac7 G4acf@G4ac7) (set! G4b33@G4acd@G4ac8 G4acd@G4ac8) (set! G4b32@G4acb@G4ac6 G4acb@G4ac6) (set! G4b31@G4ac4@syntax-violation-subform G4ac4@syntax-violation-subform) (set! G4b30@G4ac2@syntax-violation-form G4ac2@syntax-violation-form) (set! G4b2f@G4ac0@syntax-violation? G4ac0@syntax-violation?) (set! G4b2e@G4abe@G4aa8 G4abe@G4aa8) (set! G4b2d@G4abc@G4aa7 G4abc@G4aa7) (set! G4b2c@G4aba@make-syntax-violation G4aba@make-syntax-violation) (set! G4b2b@G4ab8@G4aa9 G4ab8@G4aa9) (set! G4b2a@G4ab3@G4aab G4ab3@G4aab) (set! G4b29@G4ab1@G4aac G4ab1@G4aac) (set! G4b28@G4aaf@G4aaa G4aaf@G4aaa) (set! G4b27@G4aa6@lexical-violation? G4aa6@lexical-violation?) (set! G4b26@G4aa4@make-lexical-violation G4aa4@make-lexical-violation) (set! G4b25@G4aa2@G4a93 G4aa2@G4a93) (set! G4b24@G4a9d@G4a95 G4a9d@G4a95) (set! G4b23@G4a9b@G4a96 G4a9b@G4a96) (set! G4b22@G4a99@G4a94 G4a99@G4a94) (set! G4b21@G4a92@implementation-restriction-violation? G4a92@implementation-restriction-violation?) (set! G4b20@G4a90@make-implementation-restriction-violation G4a90@make-implementation-restriction-violation) (set! G4b1f@G4a8e@G4a7f G4a8e@G4a7f) (set! G4b1e@G4a89@G4a81 G4a89@G4a81) (set! G4b1d@G4a87@G4a82 G4a87@G4a82) (set! G4b1c@G4a85@G4a80 G4a85@G4a80) (set! G4b1b@G4a7e@non-continuable-violation? G4a7e@non-continuable-violation?) (set! G4b1a@G4a7c@make-non-continuable-violation G4a7c@make-non-continuable-violation) (set! G4b19@G4a7a@G4a6b G4a7a@G4a6b) (set! G4b18@G4a75@G4a6d G4a75@G4a6d) (set! G4b17@G4a73@G4a6e G4a73@G4a6e) (set! G4b16@G4a71@G4a6c G4a71@G4a6c) (set! G4b15@G4a6a@condition-who G4a6a@condition-who) (set! G4b14@G4a68@who-condition? G4a68@who-condition?) (set! G4b13@G4a66@G4a52 G4a66@G4a52) (set! G4b12@G4a64@make-who-condition G4a64@make-who-condition) (set! G4b11@G4a62@G4a53 G4a62@G4a53) (set! G4b10@G4a5d@G4a55 G4a5d@G4a55) (set! G4b0f@G4a5b@G4a56 G4a5b@G4a56) (set! G4b0e@G4a59@G4a54 G4a59@G4a54) (set! G4b0d@G4a51@condition-irritants G4a51@condition-irritants) (set! G4b0c@G4a4f@irritants-condition? G4a4f@irritants-condition?) (set! G4b0b@G4a4d@G4a39 G4a4d@G4a39) (set! G4b0a@G4a4b@make-irritants-condition G4a4b@make-irritants-condition) (set! G4b09@G4a49@G4a3a G4a49@G4a3a) (set! G4b08@G4a44@G4a3c G4a44@G4a3c) (set! G4b07@G4a42@G4a3d G4a42@G4a3d) (set! G4b06@G4a40@G4a3b G4a40@G4a3b) (set! G4b05@G4a38@assertion-violation? G4a38@assertion-violation?) (set! G4b04@G4a36@make-assertion-violation G4a36@make-assertion-violation) (set! G4b03@G4a34@G4a25 G4a34@G4a25) (set! G4b02@G4a2f@G4a27 G4a2f@G4a27) (set! G4b01@G4a2d@G4a28 G4a2d@G4a28) (set! G4b00@G4a2b@G4a26 G4a2b@G4a26) (set! G4aff@G4a24@violation? G4a24@violation?) (set! G4afe@G4a22@make-violation G4a22@make-violation) (set! G4afd@G4a20@G4a11 G4a20@G4a11) (set! G4afc@G4a1b@G4a13 G4a1b@G4a13) (set! G4afb@G4a19@G4a14 G4a19@G4a14) (set! G4afa@G4a17@G4a12 G4a17@G4a12) (set! G4af9@G4a10@error? G4a10@error?) (set! G4af8@G4a0e@make-error G4a0e@make-error) (set! G4af7@G4a0c@G49fd G4a0c@G49fd) (set! G4af6@G4a07@G49ff G4a07@G49ff) (set! G4af5@G4a05@G4a00 G4a05@G4a00) (set! G4af4@G4a03@G49fe G4a03@G49fe) (set! G4af3@G49fc@serious-condition? G49fc@serious-condition?) (set! G4af2@G49fa@make-serious-condition G49fa@make-serious-condition) (set! G4af1@G49f8@G49e9 G49f8@G49e9) (set! G4af0@G49f3@G49eb G49f3@G49eb) (set! G4aef@G49f1@G49ec G49f1@G49ec) (set! G4aee@G49ef@G49ea G49ef@G49ea) (set! G4aed@G49e8@warning? G49e8@warning?) (set! G4aec@G49e6@make-warning G49e6@make-warning) (set! G4aeb@G49e4@G49d5 G49e4@G49d5) (set! G4aea@G49df@G49d7 G49df@G49d7) (set! G4ae9@G49dd@G49d8 G49dd@G49d8) (set! G4ae8@G49db@G49d6 G49db@G49d6) (set! G4ae7@G49d4@condition-message G49d4@condition-message) (set! G4ae6@G49d2@message-condition? G49d2@message-condition?) (set! G4ae5@G49d0@G49bc G49d0@G49bc) (set! G4ae4@G49ce@make-message-condition G49ce@make-message-condition) (set! G4ae3@G49cc@G49bd G49cc@G49bd) (set! G4ae2@G49c7@G49bf G49c7@G49bf) (set! G4ae1@G49c5@G49c0 G49c5@G49c0) (set! G4ae0@G49c3@G49be G49c3@G49be) (set! G4adf@G49bb@&condition-rcd G49bb@&condition-rcd) (set! G4ade@G49b9@&condition-rtd G49b9@&condition-rtd) (set! G4add@G49b7@make-&condition G49b7@make-&condition) (set! G4adc@G49b5@&condition? G49b5@&condition?) (set! G4adb@G49b0@G49a8 G49b0@G49a8) (set! G4ada@G49ae@G49a9 G49ae@G49a9) (set! G4ad9@G49ac@G49a7 G49ac@G49a7)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4b3f@G4b3a G4b41@G4b3c G4b43@G4b3b G4b48@G4b39 G4b4a@make-i/o-error G4b4c@i/o-error? G4b53@G4b4e G4b55@G4b50 G4b57@G4b4f G4b5c@G4b4d G4b5e@make-i/o-read-error G4b60@i/o-read-error? G4b67@G4b62 G4b69@G4b64 G4b6b@G4b63 G4b70@G4b61 G4b72@make-i/o-write-error G4b74@i/o-write-error? G4b7c@G4b77 G4b7e@G4b79 G4b80@G4b78 G4b85@G4b76 G4b87@make-i/o-invalid-position-error G4b89@G4b75 G4b8b@i/o-invalid-position-error? G4b8d@i/o-error-position G4b95@G4b90 G4b97@G4b92 G4b99@G4b91 G4b9e@G4b8f G4ba0@make-i/o-filename-error G4ba2@G4b8e G4ba4@i/o-filename-error? G4ba6@i/o-error-filename G4bad@G4ba8 G4baf@G4baa G4bb1@G4ba9 G4bb6@G4ba7 G4bb8@make-i/o-file-protection-error G4bba@i/o-file-protection-error? G4bc1@G4bbc G4bc3@G4bbe G4bc5@G4bbd G4bca@G4bbb G4bcc@make-i/o-file-is-read-only-error G4bce@i/o-file-is-read-only-error? G4bd5@G4bd0 G4bd7@G4bd2 G4bd9@G4bd1 G4bde@G4bcf G4be0@make-i/o-file-already-exists-error G4be2@i/o-file-already-exists-error? G4be9@G4be4 G4beb@G4be6 G4bed@G4be5 G4bf2@G4be3 G4bf4@make-i/o-file-does-not-exist-error G4bf6@i/o-file-does-not-exist-error? G4bfe@G4bf9 G4c00@G4bfb G4c02@G4bfa G4c07@G4bf8 G4c09@make-i/o-port-error G4c0b@G4bf7 G4c0d@i/o-port-error? G4c0f@i/o-error-port G4c16@G4c11 G4c18@G4c13 G4c1a@G4c12 G4c1f@G4c10 G4c21@make-i/o-decoding-error G4c23@i/o-decoding-error? G4c2b@G4c26 G4c2d@G4c28 G4c2f@G4c27 G4c34@G4c25 G4c36@make-i/o-encoding-error G4c38@G4c24 G4c3a@i/o-encoding-error? G4c3c@i/o-encoding-error-char) (begin (set! G4b3f@G4b3a (make-record-type-descriptor '&i/o &error-rtd 'G4b3d '#f '#f '#())) (set! G4b41@G4b3c '#f) (set! G4b43@G4b3b (make-record-constructor-descriptor G4b3f@G4b3a &error-rcd G4b41@G4b3c)) (set! G4b48@G4b39 (record-predicate G4b3f@G4b3a)) (set! G4b4a@make-i/o-error (record-constructor G4b43@G4b3b)) (set! G4b4c@i/o-error? (condition-predicate G4b3f@G4b3a)) (set! G4b53@G4b4e (make-record-type-descriptor '&i/o-read G4b3f@G4b3a 'G4b51 '#f '#f '#())) (set! G4b55@G4b50 '#f) (set! G4b57@G4b4f (make-record-constructor-descriptor G4b53@G4b4e G4b43@G4b3b G4b55@G4b50)) (set! G4b5c@G4b4d (record-predicate G4b53@G4b4e)) (set! G4b5e@make-i/o-read-error (record-constructor G4b57@G4b4f)) (set! G4b60@i/o-read-error? (condition-predicate G4b53@G4b4e)) (set! G4b67@G4b62 (make-record-type-descriptor '&i/o-write G4b3f@G4b3a 'G4b65 '#f '#f '#())) (set! G4b69@G4b64 '#f) (set! G4b6b@G4b63 (make-record-constructor-descriptor G4b67@G4b62 G4b43@G4b3b G4b69@G4b64)) (set! G4b70@G4b61 (record-predicate G4b67@G4b62)) (set! G4b72@make-i/o-write-error (record-constructor G4b6b@G4b63)) (set! G4b74@i/o-write-error? (condition-predicate G4b67@G4b62)) (set! G4b7c@G4b77 (make-record-type-descriptor '&i/o-invalid-position G4b3f@G4b3a 'G4b7a '#f '#f '#((immutable position)))) (set! G4b7e@G4b79 '#f) (set! G4b80@G4b78 (make-record-constructor-descriptor G4b7c@G4b77 G4b43@G4b3b G4b7e@G4b79)) (set! G4b85@G4b76 (record-predicate G4b7c@G4b77)) (set! G4b87@make-i/o-invalid-position-error (record-constructor G4b80@G4b78)) (set! G4b89@G4b75 (record-accessor G4b7c@G4b77 '0)) (set! G4b8b@i/o-invalid-position-error? (condition-predicate G4b7c@G4b77)) (set! G4b8d@i/o-error-position (condition-accessor G4b7c@G4b77 G4b89@G4b75)) (set! G4b95@G4b90 (make-record-type-descriptor '&i/o-filename G4b3f@G4b3a 'G4b93 '#f '#f '#((immutable filename)))) (set! G4b97@G4b92 '#f) (set! G4b99@G4b91 (make-record-constructor-descriptor G4b95@G4b90 G4b43@G4b3b G4b97@G4b92)) (set! G4b9e@G4b8f (record-predicate G4b95@G4b90)) (set! G4ba0@make-i/o-filename-error (record-constructor G4b99@G4b91)) (set! G4ba2@G4b8e (record-accessor G4b95@G4b90 '0)) (set! G4ba4@i/o-filename-error? (condition-predicate G4b95@G4b90)) (set! G4ba6@i/o-error-filename (condition-accessor G4b95@G4b90 G4ba2@G4b8e)) (set! G4bad@G4ba8 (make-record-type-descriptor '&i/o-file-protection G4b3f@G4b3a 'G4bab '#f '#f '#())) (set! G4baf@G4baa '#f) (set! G4bb1@G4ba9 (make-record-constructor-descriptor G4bad@G4ba8 G4b43@G4b3b G4baf@G4baa)) (set! G4bb6@G4ba7 (record-predicate G4bad@G4ba8)) (set! G4bb8@make-i/o-file-protection-error (record-constructor G4bb1@G4ba9)) (set! G4bba@i/o-file-protection-error? (condition-predicate G4bad@G4ba8)) (set! G4bc1@G4bbc (make-record-type-descriptor '&i/o-file-is-read-only G4bad@G4ba8 'G4bbf '#f '#f '#())) (set! G4bc3@G4bbe '#f) (set! G4bc5@G4bbd (make-record-constructor-descriptor G4bc1@G4bbc G4bb1@G4ba9 G4bc3@G4bbe)) (set! G4bca@G4bbb (record-predicate G4bc1@G4bbc)) (set! G4bcc@make-i/o-file-is-read-only-error (record-constructor G4bc5@G4bbd)) (set! G4bce@i/o-file-is-read-only-error? (condition-predicate G4bc1@G4bbc)) (set! G4bd5@G4bd0 (make-record-type-descriptor '&i/o-file-already-exists G4b95@G4b90 'G4bd3 '#f '#f '#())) (set! G4bd7@G4bd2 '#f) (set! G4bd9@G4bd1 (make-record-constructor-descriptor G4bd5@G4bd0 G4b99@G4b91 G4bd7@G4bd2)) (set! G4bde@G4bcf (record-predicate G4bd5@G4bd0)) (set! G4be0@make-i/o-file-already-exists-error (record-constructor G4bd9@G4bd1)) (set! G4be2@i/o-file-already-exists-error? (condition-predicate G4bd5@G4bd0)) (set! G4be9@G4be4 (make-record-type-descriptor '&i/o-file-does-not-exist G4b95@G4b90 'G4be7 '#f '#f '#())) (set! G4beb@G4be6 '#f) (set! G4bed@G4be5 (make-record-constructor-descriptor G4be9@G4be4 G4b99@G4b91 G4beb@G4be6)) (set! G4bf2@G4be3 (record-predicate G4be9@G4be4)) (set! G4bf4@make-i/o-file-does-not-exist-error (record-constructor G4bed@G4be5)) (set! G4bf6@i/o-file-does-not-exist-error? (condition-predicate G4be9@G4be4)) (set! G4bfe@G4bf9 (make-record-type-descriptor '&i/o-port G4b3f@G4b3a 'G4bfc '#f '#f '#((immutable port)))) (set! G4c00@G4bfb '#f) (set! G4c02@G4bfa (make-record-constructor-descriptor G4bfe@G4bf9 G4b43@G4b3b G4c00@G4bfb)) (set! G4c07@G4bf8 (record-predicate G4bfe@G4bf9)) (set! G4c09@make-i/o-port-error (record-constructor G4c02@G4bfa)) (set! G4c0b@G4bf7 (record-accessor G4bfe@G4bf9 '0)) (set! G4c0d@i/o-port-error? (condition-predicate G4bfe@G4bf9)) (set! G4c0f@i/o-error-port (condition-accessor G4bfe@G4bf9 G4c0b@G4bf7)) (set! G4c16@G4c11 (make-record-type-descriptor '&i/o-decoding G4bfe@G4bf9 'G4c14 '#f '#f '#())) (set! G4c18@G4c13 '#f) (set! G4c1a@G4c12 (make-record-constructor-descriptor G4c16@G4c11 G4c02@G4bfa G4c18@G4c13)) (set! G4c1f@G4c10 (record-predicate G4c16@G4c11)) (set! G4c21@make-i/o-decoding-error (record-constructor G4c1a@G4c12)) (set! G4c23@i/o-decoding-error? (condition-predicate G4c16@G4c11)) (set! G4c2b@G4c26 (make-record-type-descriptor '&i/o-encoding G4bfe@G4bf9 'G4c29 '#f '#f '#((immutable char)))) (set! G4c2d@G4c28 '#f) (set! G4c2f@G4c27 (make-record-constructor-descriptor G4c2b@G4c26 G4c02@G4bfa G4c2d@G4c28)) (set! G4c34@G4c25 (record-predicate G4c2b@G4c26)) (set! G4c36@make-i/o-encoding-error (record-constructor G4c2f@G4c27)) (set! G4c38@G4c24 (record-accessor G4c2b@G4c26 '0)) (set! G4c3a@i/o-encoding-error? (condition-predicate G4c2b@G4c26)) (set! G4c3c@i/o-encoding-error-char (condition-accessor G4c2b@G4c26 G4c38@G4c24)) (begin (set! G4c8c@G4c3c@i/o-encoding-error-char G4c3c@i/o-encoding-error-char) (set! G4c8b@G4c3a@i/o-encoding-error? G4c3a@i/o-encoding-error?) (set! G4c8a@G4c38@G4c24 G4c38@G4c24) (set! G4c89@G4c36@make-i/o-encoding-error G4c36@make-i/o-encoding-error) (set! G4c88@G4c34@G4c25 G4c34@G4c25) (set! G4c87@G4c2f@G4c27 G4c2f@G4c27) (set! G4c86@G4c2d@G4c28 G4c2d@G4c28) (set! G4c85@G4c2b@G4c26 G4c2b@G4c26) (set! G4c84@G4c23@i/o-decoding-error? G4c23@i/o-decoding-error?) (set! G4c83@G4c21@make-i/o-decoding-error G4c21@make-i/o-decoding-error) (set! G4c82@G4c1f@G4c10 G4c1f@G4c10) (set! G4c81@G4c1a@G4c12 G4c1a@G4c12) (set! G4c80@G4c18@G4c13 G4c18@G4c13) (set! G4c7f@G4c16@G4c11 G4c16@G4c11) (set! G4c7e@G4c0f@i/o-error-port G4c0f@i/o-error-port) (set! G4c7d@G4c0d@i/o-port-error? G4c0d@i/o-port-error?) (set! G4c7c@G4c0b@G4bf7 G4c0b@G4bf7) (set! G4c7b@G4c09@make-i/o-port-error G4c09@make-i/o-port-error) (set! G4c7a@G4c07@G4bf8 G4c07@G4bf8) (set! G4c79@G4c02@G4bfa G4c02@G4bfa) (set! G4c78@G4c00@G4bfb G4c00@G4bfb) (set! G4c77@G4bfe@G4bf9 G4bfe@G4bf9) (set! G4c76@G4bf6@i/o-file-does-not-exist-error? G4bf6@i/o-file-does-not-exist-error?) (set! G4c75@G4bf4@make-i/o-file-does-not-exist-error G4bf4@make-i/o-file-does-not-exist-error) (set! G4c74@G4bf2@G4be3 G4bf2@G4be3) (set! G4c73@G4bed@G4be5 G4bed@G4be5) (set! G4c72@G4beb@G4be6 G4beb@G4be6) (set! G4c71@G4be9@G4be4 G4be9@G4be4) (set! G4c70@G4be2@i/o-file-already-exists-error? G4be2@i/o-file-already-exists-error?) (set! G4c6f@G4be0@make-i/o-file-already-exists-error G4be0@make-i/o-file-already-exists-error) (set! G4c6e@G4bde@G4bcf G4bde@G4bcf) (set! G4c6d@G4bd9@G4bd1 G4bd9@G4bd1) (set! G4c6c@G4bd7@G4bd2 G4bd7@G4bd2) (set! G4c6b@G4bd5@G4bd0 G4bd5@G4bd0) (set! G4c6a@G4bce@i/o-file-is-read-only-error? G4bce@i/o-file-is-read-only-error?) (set! G4c69@G4bcc@make-i/o-file-is-read-only-error G4bcc@make-i/o-file-is-read-only-error) (set! G4c68@G4bca@G4bbb G4bca@G4bbb) (set! G4c67@G4bc5@G4bbd G4bc5@G4bbd) (set! G4c66@G4bc3@G4bbe G4bc3@G4bbe) (set! G4c65@G4bc1@G4bbc G4bc1@G4bbc) (set! G4c64@G4bba@i/o-file-protection-error? G4bba@i/o-file-protection-error?) (set! G4c63@G4bb8@make-i/o-file-protection-error G4bb8@make-i/o-file-protection-error) (set! G4c62@G4bb6@G4ba7 G4bb6@G4ba7) (set! G4c61@G4bb1@G4ba9 G4bb1@G4ba9) (set! G4c60@G4baf@G4baa G4baf@G4baa) (set! G4c5f@G4bad@G4ba8 G4bad@G4ba8) (set! G4c5e@G4ba6@i/o-error-filename G4ba6@i/o-error-filename) (set! G4c5d@G4ba4@i/o-filename-error? G4ba4@i/o-filename-error?) (set! G4c5c@G4ba2@G4b8e G4ba2@G4b8e) (set! G4c5b@G4ba0@make-i/o-filename-error G4ba0@make-i/o-filename-error) (set! G4c5a@G4b9e@G4b8f G4b9e@G4b8f) (set! G4c59@G4b99@G4b91 G4b99@G4b91) (set! G4c58@G4b97@G4b92 G4b97@G4b92) (set! G4c57@G4b95@G4b90 G4b95@G4b90) (set! G4c56@G4b8d@i/o-error-position G4b8d@i/o-error-position) (set! G4c55@G4b8b@i/o-invalid-position-error? G4b8b@i/o-invalid-position-error?) (set! G4c54@G4b89@G4b75 G4b89@G4b75) (set! G4c53@G4b87@make-i/o-invalid-position-error G4b87@make-i/o-invalid-position-error) (set! G4c52@G4b85@G4b76 G4b85@G4b76) (set! G4c51@G4b80@G4b78 G4b80@G4b78) (set! G4c50@G4b7e@G4b79 G4b7e@G4b79) (set! G4c4f@G4b7c@G4b77 G4b7c@G4b77) (set! G4c4e@G4b74@i/o-write-error? G4b74@i/o-write-error?) (set! G4c4d@G4b72@make-i/o-write-error G4b72@make-i/o-write-error) (set! G4c4c@G4b70@G4b61 G4b70@G4b61) (set! G4c4b@G4b6b@G4b63 G4b6b@G4b63) (set! G4c4a@G4b69@G4b64 G4b69@G4b64) (set! G4c49@G4b67@G4b62 G4b67@G4b62) (set! G4c48@G4b60@i/o-read-error? G4b60@i/o-read-error?) (set! G4c47@G4b5e@make-i/o-read-error G4b5e@make-i/o-read-error) (set! G4c46@G4b5c@G4b4d G4b5c@G4b4d) (set! G4c45@G4b57@G4b4f G4b57@G4b4f) (set! G4c44@G4b55@G4b50 G4b55@G4b50) (set! G4c43@G4b53@G4b4e G4b53@G4b4e) (set! G4c42@G4b4c@i/o-error? G4b4c@i/o-error?) (set! G4c41@G4b4a@make-i/o-error G4b4a@make-i/o-error) (set! G4c40@G4b48@G4b39 G4b48@G4b39) (set! G4c3f@G4b43@G4b3b G4b43@G4b3b) (set! G4c3e@G4b41@G4b3c G4b41@G4b3c) (set! G4c3d@G4b3f@G4b3a G4b3f@G4b3a)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G293f@G28e5@current-primitive-locations (lambda (G5052@x) ((lambda (G5054@t) (if G5054@t (cdr G5054@t) '#f)) (assq G5052@x '((syntax-error . G4998@G30a5@syntax-error) (syntax-dispatch . G4931@G2fc2@syntax-dispatch) (load . G4d21@G4c9b@load) (interaction-environment . G49a1@G30b7@interaction-environment) (make-variable-transformer . G48f1@G2dc0@make-variable-transformer) (identifier? . G499c@G30ad@identifier?) (generate-temporaries . G4994@G309d@generate-temporaries) (free-identifier=? . G4995@G309f@free-identifier=?) (syntax->datum . G499e@G30b1@syntax->datum) (datum->syntax . G499d@G30af@datum->syntax) (bound-identifier=? . G4996@G30a1@bound-identifier=?) (make-i/o-write-error . G4c4d@G4b72@make-i/o-write-error) (make-i/o-read-error . G4c47@G4b5e@make-i/o-read-error) (make-i/o-port-error . G4c7b@G4c09@make-i/o-port-error) (make-i/o-invalid-position-error . G4c53@G4b87@make-i/o-invalid-position-error) (make-i/o-filename-error . G4c5b@G4ba0@make-i/o-filename-error) (make-i/o-file-protection-error . G4c63@G4bb8@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4c69@G4bcc@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4c75@G4bf4@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4c6f@G4be0@make-i/o-file-already-exists-error) (make-i/o-error . G4c41@G4b4a@make-i/o-error) (make-i/o-encoding-error . G4c89@G4c36@make-i/o-encoding-error) (make-i/o-decoding-error . G4c83@G4c21@make-i/o-decoding-error) (i/o-write-error? . G4c4e@G4b74@i/o-write-error?) (i/o-read-error? . G4c48@G4b60@i/o-read-error?) (i/o-port-error? . G4c7d@G4c0d@i/o-port-error?) (i/o-invalid-position-error? . G4c55@G4b8b@i/o-invalid-position-error?) (i/o-filename-error? . G4c5d@G4ba4@i/o-filename-error?) (i/o-file-protection-error? . G4c64@G4bba@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4c6a@G4bce@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4c76@G4bf6@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4c70@G4be2@i/o-file-already-exists-error?) (i/o-error? . G4c42@G4b4c@i/o-error?) (i/o-error-port . G4c7e@G4c0f@i/o-error-port) (i/o-error-filename . G4c5e@G4ba6@i/o-error-filename) (i/o-encoding-error? . G4c8b@G4c3a@i/o-encoding-error?) (i/o-encoding-error-char . G4c8c@G4c3c@i/o-encoding-error-char) (i/o-decoding-error? . G4c84@G4c23@i/o-decoding-error?) (scheme-report-environment . G498b@G308b@scheme-report-environment) (null-environment . G498a@G3089@null-environment) (command-line . G4d1e@G4c95@command-line) (eval . G498d@G308f@eval) (environment . G4989@G3087@environment) (who-condition? . G4b14@G4a68@who-condition?) (warning? . G4aed@G49e8@warning?) (violation? . G4aff@G4a24@violation?) (undefined-violation? . G4b37@G4ad8@undefined-violation?) (syntax-violation? . G4b2f@G4ac0@syntax-violation?) (syntax-violation-subform . G4b31@G4ac4@syntax-violation-subform) (syntax-violation-form . G4b30@G4ac2@syntax-violation-form) (syntax-violation . G499b@G30ab@syntax-violation) (serious-condition? . G4af3@G49fc@serious-condition?) (non-continuable-violation? . G4b1b@G4a7e@non-continuable-violation?) (message-condition? . G4ae6@G49d2@message-condition?) (make-who-condition . G4b12@G4a64@make-who-condition) (make-warning . G4aec@G49e6@make-warning) (make-violation . G4afe@G4a22@make-violation) (make-undefined-violation . G4b36@G4ad6@make-undefined-violation) (make-syntax-violation . G4b2c@G4aba@make-syntax-violation) (make-serious-condition . G4af2@G49fa@make-serious-condition) (make-non-continuable-violation . G4b1a@G4a7c@make-non-continuable-violation) (make-message-condition . G4ae4@G49ce@make-message-condition) (make-lexical-violation . G4b26@G4aa4@make-lexical-violation) (make-irritants-condition . G4b0a@G4a4b@make-irritants-condition) (make-implementation-restriction-violation . G4b20@G4a90@make-implementation-restriction-violation) (make-error . G4af8@G4a0e@make-error) (make-assertion-violation . G4b04@G4a36@make-assertion-violation) (lexical-violation? . G4b27@G4aa6@lexical-violation?) (irritants-condition? . G4b0c@G4a4f@irritants-condition?) (implementation-restriction-violation? . G4b21@G4a92@implementation-restriction-violation?) (error? . G4af9@G4a10@error?) (condition-who . G4b15@G4a6a@condition-who) (condition-message . G4ae7@G49d4@condition-message) (condition-irritants . G4b0d@G4a51@condition-irritants) (assertion-violation? . G4b05@G4a38@assertion-violation?)))))) (G2b7c@G2a12@install-library 'G5026 '(mosh interaction) '() '() '() '() '((string-upcase . G4fa9) (string-titlecase . G4fa8) (string-normalize-nfkd . G4fa7) (string-normalize-nfkc . G4fa6) (string-normalize-nfd . G4fa5) (string-normalize-nfc . G4fa4) (string-foldcase . G4fa3) (string-downcase . G4fa2) (string-ci>? . G4fa1) (string-ci>=? . G4fa0) (string-ci=? . G4f9f) (string-ci<? . G4f9e) (string-ci<=? . G4f9d) (char-whitespace? . G4f9c) (char-upper-case? . G4f9b) (char-title-case? . G4f9a) (char-numeric? . G4f99) (char-lower-case? . G4f98) (char-general-category . G4f97) (char-upcase . G4f96) (char-titlecase . G4f95) (char-foldcase . G4f94) (char-downcase . G4f93) (char-ci>? . G4f92) (char-ci>=? . G4f91) (char-ci=? . G4f90) (char-ci<? . G4f8f) (char-ci<=? . G4f8e) (char-alphabetic? . G4f8d) (make-variable-transformer . G2dbf) (identifier? . G30ac) (generate-temporaries . G309c) (free-identifier=? . G309e) (syntax->datum . G30b0) (datum->syntax . G30ae) (bound-identifier=? . G30a0) (record-type-descriptor? . G4f8c) (record-predicate . G4f8b) (record-mutator . G4f8a) (record-constructor . G4f89) (record-accessor . G4f88) (make-record-type-descriptor . G4f87) (make-record-constructor-descriptor . G4f86) (record? . G4f85) (record-type-uid . G4f84) (record-type-sealed? . G4f83) (record-type-parent . G4f82) (record-type-opaque? . G4f81) (record-type-name . G4f80) (record-type-generative? . G4f7f) (record-type-field-names . G4f7e) (record-rtd . G4f7d) (record-field-mutable? . G4f7c) (delete-file . G4f7b) (file-exists? . G4f7a) (vector-sort! . G4f79) (vector-sort . G4f78) (list-sort . G4f77) (symbol-hash . G4f76) (string-ci-hash . G4f75) (string-hash . G4f74) (equal-hash . G4f73) (hashtable-equivalence-function . G4f72) (make-hashtable . G4f71) (hashtable-hash-function . G4f70) (make-eqv-hashtable . G4f6f) (make-eq-hashtable . G4f6e) (hashtable? . G4f6d) (hashtable-update! . G4f6c) (hashtable-size . G4f6b) (hashtable-set! . G4f6a) (hashtable-ref . G4f69) (hashtable-mutable? . G4f68) (hashtable-keys . G4f67) (hashtable-entries . G4f66) (hashtable-delete! . G4f65) (hashtable-copy . G4f64) (hashtable-contains? . G4f63) (hashtable-clear! . G4f62) (call-with-output-file . G4f61) (call-with-input-file . G4f60) (write-char . G4f5f) (write . G4f5e) (with-output-to-file . G4f5d) (with-input-from-file . G4f5c) (read-char . G4f5b) (read . G4f5a) (peek-char . G4f59) (open-output-file . G4f58) (open-input-file . G4f57) (newline . G4f56) (display . G4f55) (close-output-port . G4f54) (close-input-port . G4f53) (eof-object? . G4f52) (eof-object . G4f51) (current-error-port . G4f50) (current-output-port . G4f4f) (current-input-port . G4f4e) (output-port? . G4f4d) (input-port? . G4f4c) (utf-8-codec . G4f4b) (utf-16-codec . G4f4a) (transcoder-error-handling-mode . G4f49) (transcoder-eol-style . G4f48) (transcoder-codec . G4f47) (transcoded-port . G4f46) (textual-port? . G4f45) (string->bytevector . G4f44) (standard-output-port . G4f43) (standard-input-port . G4f42) (standard-error-port . G4f41) (set-port-position! . G4f40) (put-u8 . G4f3f) (put-string . G4f3e) (put-datum . G4f3d) (put-char . G4f3c) (put-bytevector . G4f3b) (port? . G4f3a) (port-transcoder . G4f39) (port-position . G4f38) (port-has-set-port-position!? . G4f37) (port-has-port-position? . G4f36) (port-eof? . G4f35) (output-port-buffer-mode . G4f34) (open-string-output-port . G4f33) (open-string-input-port . G4f32) (open-file-output-port . G4f31) (open-file-input/output-port . G4f30) (open-file-input-port . G4f2f) (open-bytevector-output-port . G4f2e) (open-bytevector-input-port . G4f2d) (native-transcoder . G4f2c) (native-eol-style . G4f2b) (make-transcoder . G4f2a) (latin-1-codec . G4f29) (make-i/o-write-error . G4b71) (make-i/o-read-error . G4b5d) (make-i/o-port-error . G4c08) (make-i/o-invalid-position-error . G4b86) (make-i/o-filename-error . G4b9f) (make-i/o-file-protection-error . G4bb7) (make-i/o-file-is-read-only-error . G4bcb) (make-i/o-file-does-not-exist-error . G4bf3) (make-i/o-file-already-exists-error . G4bdf) (make-i/o-error . G4b49) (make-i/o-encoding-error . G4c35) (make-i/o-decoding-error . G4c20) (make-custom-textual-output-port . G4f28) (make-custom-textual-input/output-port . G4f27) (make-custom-textual-input-port . G4f26) (make-custom-binary-output-port . G4f25) (make-custom-binary-input/output-port . G4f24) (make-custom-binary-input-port . G4f23) (make-bytevector . G4f22) (lookahead-u8 . G4f21) (lookahead-char . G4f20) (i/o-write-error? . G4b73) (i/o-read-error? . G4b5f) (i/o-port-error? . G4c0c) (i/o-invalid-position-error? . G4b8a) (i/o-filename-error? . G4ba3) (i/o-file-protection-error? . G4bb9) (i/o-file-is-read-only-error? . G4bcd) (i/o-file-does-not-exist-error? . G4bf5) (i/o-file-already-exists-error? . G4be1) (i/o-error? . G4b4b) (i/o-error-port . G4c0e) (i/o-error-filename . G4ba5) (i/o-encoding-error? . G4c39) (i/o-encoding-error-char . G4c3b) (i/o-decoding-error? . G4c22) (get-u8 . G4f1f) (get-string-n! . G4f1e) (get-string-n . G4f1d) (get-string-all . G4f1c) (get-line . G4f1b) (get-datum . G4f1a) (get-char . G4f19) (get-bytevector-some . G4f18) (get-bytevector-n! . G4f17) (get-bytevector-n . G4f16) (get-bytevector-all . G4f15) (flush-output-port . G4f14) (close-port . G4f13) (exit . G4f0c) (command-line . G4c94) (string-fill! . G4f0b) (string-set! . G4f0a) (set-cdr! . G4f09) (set-car! . G4f08) (remove . G4f07) (remv . G4f06) (remp . G4f05) (remq . G4f04) (partition . G4f03) (memv . G4f02) (memq . G4f01) (memp . G4f00) (member . G4eff) (exists . G4efe) (for-all . G4efd) (fold-right . G4efc) (fold-left . G4efb) (find . G4efa) (filter . G4ef9) (cons* . G4ef8) (assv . G4ef7) (assq . G4ef6) (assp . G4ef5) (assoc . G4ef4) (call-with-string-output-port . G4ef3) (call-with-port . G4ef2) (call-with-bytevector-output-port . G4ef1) (bytevector->string . G4ef0) (buffer-mode? . G4eef) (binary-port? . G4eee) (with-exception-handler . G4eed) (raise-continuable . G4eec) (raise . G4eeb) (eval . G308e) (environment . G3086) (make-enumeration . G4eea) (enum-set=? . G4ee9) (enum-set-universe . G4ee8) (enum-set-union . G4ee7) (enum-set-subset? . G4ee6) (enum-set-projection . G4ee5) (enum-set-member? . G4ee4) (enum-set-intersection . G4ee3) (enum-set-indexer . G4ee2) (enum-set-difference . G4ee1) (enum-set-constructor . G4ee0) (enum-set-complement . G4edf) (enum-set->list . G4ede) (who-condition? . G4a67) (warning? . G49e7) (violation? . G4a23) (undefined-violation? . G4ad7) (syntax-violation? . G4abf) (syntax-violation-subform . G4ac3) (syntax-violation-form . G4ac1) (syntax-violation . G30aa) (simple-conditions . G4edd) (serious-condition? . G49fb) (non-continuable-violation? . G4a7d) (message-condition? . G49d1) (make-who-condition . G4a63) (make-warning . G49e5) (make-violation . G4a21) (make-undefined-violation . G4ad5) (make-syntax-violation . G4ab9) (make-serious-condition . G49f9) (make-non-continuable-violation . G4a7b) (make-message-condition . G49cd) (make-lexical-violation . G4aa3) (make-irritants-condition . G4a4a) (make-implementation-restriction-violation . G4a8f) (make-error . G4a0d) (make-assertion-violation . G4a35) (lexical-violation? . G4aa5) (irritants-condition? . G4a4e) (implementation-restriction-violation? . G4a91) (error? . G4a0f) (condition-who . G4a69) (condition-predicate . G4edc) (condition-message . G49d3) (condition-irritants . G4a50) (condition-accessor . G4edb) (condition . G4eda) (assertion-violation? . G4a37) (condition? . G4ed9) (utf32->string . G4ed8) (utf16->string . G4ed7) (utf8->string . G4ed6) (uint-list->bytevector . G4ed5) (u8-list->bytevector . G4ed4) (string->utf8 . G4ed3) (string->utf32 . G4ed2) (string->utf16 . G4ed1) (sint-list->bytevector . G4ed0) (native-endianness . G4ecf) (bytevector? . G4ece) (bytevector=? . G4ecd) (bytevector-uint-set! . G4ecc) (bytevector-uint-ref . G4ecb) (bytevector-u8-set! . G4eca) (bytevector-u8-ref . G4ec9) (bytevector-u64-set! . G4ec8) (bytevector-u64-ref . G4ec7) (bytevector-u64-native-set! . G4ec6) (bytevector-u64-native-ref . G4ec5) (bytevector-u32-set! . G4ec4) (bytevector-u32-ref . G4ec3) (bytevector-u32-native-set! . G4ec2) (bytevector-u32-native-ref . G4ec1) (bytevector-u16-set! . G4ec0) (bytevector-u16-ref . G4ebf) (bytevector-u16-native-set! . G4ebe) (bytevector-u16-native-ref . G4ebd) (bytevector-sint-set! . G4ebc) (bytevector-sint-ref . G4ebb) (bytevector-s8-set! . G4eba) (bytevector-s8-ref . G4eb9) (bytevector-s64-set! . G4eb8) (bytevector-s64-ref . G4eb7) (bytevector-s64-native-set! . G4eb6) (bytevector-s64-native-ref . G4eb5) (bytevector-s32-set! . G4eb4) (bytevector-s32-ref . G4eb3) (bytevector-s32-native-set! . G4eb2) (bytevector-s32-native-ref . G4eb1) (bytevector-s16-set! . G4eb0) (bytevector-s16-ref . G4eaf) (bytevector-s16-native-set! . G4eae) (bytevector-s16-native-ref . G4ead) (bytevector-length . G4eac) (bytevector-ieee-single-ref . G4eab) (bytevector-ieee-single-native-set! . G4eaa) (bytevector-ieee-single-native-ref . G4ea9) (bytevector-ieee-double-ref . G4ea8) (bytevector-ieee-double-native-set! . G4ea7) (bytevector-ieee-double-native-ref . G4ea6) (bytevector-fill! . G4ea5) (bytevector-copy! . G4ea4) (bytevector-copy . G4ea3) (bytevector->uint-list . G4ea2) (bytevector->u8-list . G4ea1) (bytevector->sint-list . G4ea0) (no-nans-violation? . G4e9f) (no-infinities-violation? . G4e9e) (make-no-nans-violation . G4e9d) (make-no-infinities-violation . G4e9c) (real->flonum . G4e9b) (flzero? . G4e9a) (fltruncate . G4e99) (fltan . G4e98) (flsqrt . G4e97) (flsin . G4e96) (flround . G4e95) (flpositive? . G4e94) (flonum? . G4e93) (flodd? . G4e92) (flnumerator . G4e91) (flnegative? . G4e90) (flnan? . G4e8f) (flmod0 . G4e8e) (flmod . G4e8d) (flmin . G4e8c) (flmax . G4e8b) (fllog . G4e8a) (flinteger? . G4e89) (flinfinite? . G4e88) (flfloor . G4e87) (flfinite? . G4e86) (flexpt . G4e85) (flexp . G4e84) (fleven? . G4e83) (fldiv0-and-mod0 . G4e82) (fldiv0 . G4e81) (fldiv-and-mod . G4e80) (fldiv . G4e7f) (fldenominator . G4e7e) (flcos . G4e7d) (flceiling . G4e7c) (flatan . G4e7b) (flasin . G4e7a) (flacos . G4e79) (flabs . G4e78) (fl>? . G4e77) (fl>=? . G4e76) (fl=? . G4e75) (fl<? . G4e74) (fl<=? . G4e73) (fl/ . G4e72) (fl- . G4e71) (fl+ . G4e70) (fl* . G4e6f) (fixnum->flonum . G4e6e) (fxzero? . G4e6d) (fxxor . G4e6c) (fxrotate-bit-field . G4e6b) (fxreverse-bit-field . G4e6a) (fxpositive? . G4e69) (fxodd? . G4e68) (fxnot . G4e67) (fxnegative? . G4e66) (fxmod0 . G4e65) (fxmod . G4e64) (fxmin . G4e63) (fxmax . G4e62) (fxlength . G4e61) (fxior . G4e60) (fxif . G4e5f) (fxfirst-bit-set . G4e5e) (fxeven? . G4e5d) (fxdiv0-and-mod0 . G4e5c) (fxdiv0 . G4e5b) (fxdiv-and-mod . G4e5a) (fxdiv . G4e59) (fxcopy-bit-field . G4e58) (fxcopy-bit . G4e57) (fxbit-set? . G4e56) (fxbit-field . G4e55) (fxbit-count . G4e54) (fxarithmetic-shift-right . G4e53) (fxarithmetic-shift-left . G4e52) (fxarithmetic-shift . G4e51) (fxand . G4e50) (fx>? . G4e4f) (fx>=? . G4e4e) (fx=? . G4e4d) (fx<? . G4e4c) (fx<=? . G4e4b) (fx-/carry . G4e4a) (fx- . G4e49) (fx+/carry . G4e48) (fx+ . G4e47) (fx*/carry . G4e46) (fx* . G4e45) (greatest-fixnum . G4e44) (least-fixnum . G4e43) (fixnum-width . G4e42) (fixnum? . G4e41) (bitwise-rotate-bit-field . G4e40) (bitwise-reverse-bit-field . G4e3f) (bitwise-length . G4e3e) (bitwise-if . G4e3d) (bitwise-first-bit-set . G4e3c) (bitwise-copy-bit-field . G4e3b) (bitwise-copy-bit . G4e3a) (bitwise-bit-set? . G4e39) (bitwise-bit-field . G4e38) (bitwise-bit-count . G4e37) (bitwise-xor . G4e36) (bitwise-ior . G4e35) (bitwise-and . G4e34) (bitwise-not . G4e33) (bitwise-arithmetic-shift-right . G4e32) (bitwise-arithmetic-shift-left . G4e31) (bitwise-arithmetic-shift . G4e30) (zero? . G4e2f) (vector? . G4e2e) (vector-set! . G4e2d) (vector-ref . G4e2c) (vector-map . G4e2b) (vector-length . G4e2a) (vector-for-each . G4e29) (vector-fill! . G4e28) (vector->list . G4e27) (vector . G4e26) (values . G4e25) (truncate . G4e24) (tan . G4e23) (symbol? . G4e22) (symbol=? . G4e21) (symbol->string . G4e20) (substring . G4e1f) (string? . G4e1e) (string>? . G4e1d) (string>=? . G4e1c) (string=? . G4e1b) (string<? . G4e1a) (string<=? . G4e19) (string-ref . G4e18) (string-length . G4e17) (string-for-each . G4e16) (string-copy . G4e15) (string-append . G4e14) (string->symbol . G4e13) (string->number . G4e12) (string->list . G4e11) (string . G4e10) (sqrt . G4e0f) (sin . G4e0e) (round . G4e0d) (reverse . G4e0c) (real? . G4e0b) (real-valued? . G4e0a) (real-part . G4e09) (rationalize . G4e08) (rational? . G4e07) (rational-valued? . G4e06) (procedure? . G4e05) (positive? . G4e04) (pair? . G4e03) (odd? . G4e02) (numerator . G4e01) (number? . G4e00) (number->string . G4dff) (null? . G4dfe) (not . G4dfd) (negative? . G4dfc) (nan? . G4dfb) (min . G4dfa) (max . G4df9) (map . G4df8) (make-vector . G4df7) (make-string . G4df6) (make-rectangular . G4df5) (make-polar . G4df4) (magnitude . G4df3) (log . G4df2) (list? . G4df1) (list-tail . G4df0) (list-ref . G4def) (list->vector . G4dee) (list->string . G4ded) (list . G4dec) (length . G4deb) (lcm . G4dea) (integer? . G4de9) (integer-valued? . G4de8) (integer->char . G4de7) (infinite? . G4de6) (inexact? . G4de5) (inexact . G4de4) (imag-part . G4de3) (gcd . G4de2) (for-each . G4de1) (floor . G4de0) (finite? . G4ddf) (expt . G4dde) (exp . G4ddd) (exact? . G4ddc) (exact-integer-sqrt . G4ddb) (exact . G4dda) (even? . G4dd9) (error . G4dd8) (eqv? . G4dd7) (equal? . G4dd6) (eq? . G4dd5) (dynamic-wind . G4dd4) (div0-and-mod0 . G4dd3) (mod0 . G4dd2) (div0 . G4dd1) (div-and-mod . G4dd0) (mod . G4dcf) (div . G4dce) (denominator . G4dcd) (cos . G4dcc) (cons . G4dcb) (complex? . G4dca) (char? . G4dc9) (char>? . G4dc8) (char>=? . G4dc7) (char=? . G4dc6) (char<? . G4dc5) (char<=? . G4dc4) (char->integer . G4dc3) (ceiling . G4dc2) (call-with-values . G4dc1) (call/cc . G4dc0) (call-with-current-continuation . G4dbf) (cddddr . G4dbe) (cdddar . G4dbd) (cddadr . G4dbc) (cddaar . G4dbb) (cdaddr . G4dba) (cdadar . G4db9) (cdaadr . G4db8) (cdaaar . G4db7) (cadddr . G4db6) (caddar . G4db5) (cadadr . G4db4) (cadaar . G4db3) (caaddr . G4db2) (caadar . G4db1) (caaadr . G4db0) (caaaar . G4daf) (cdddr . G4dae) (cddar . G4dad) (cdadr . G4dac) (cdaar . G4dab) (caddr . G4daa) (cadar . G4da9) (caadr . G4da8) (caaar . G4da7) (cddr . G4da6) (cdar . G4da5) (cadr . G4da4) (caar . G4da3) (cdr . G4da2) (car . G4da1) (boolean? . G4da0) (boolean=? . G4d9f) (atan . G4d9e) (assertion-violation . G4d9d) (asin . G4d9c) (apply . G4d9b) (append . G4d9a) (angle . G4d99) (acos . G4d98) (abs . G4d97) (/ . G4d96) (* . G4d95) (- . G4d94) (+ . G4d93) (>= . G4d92) (> . G4d91) (= . G4d90) (<= . G4d8f) (< . G4d8e) (library . G4d8d) (export . G4d8c) (&no-nans . G4d8b) (&no-infinities . G4d8a) (&i/o-encoding . G4d89) (&i/o-decoding . G4d88) (&i/o-port . G4d87) (&i/o-file-does-not-exist . G4d86) (&i/o-file-already-exists . G4d85) (&i/o-file-is-read-only . G4d84) (&i/o-file-protection . G4d83) (&i/o-filename . G4d82) (&i/o-invalid-position . G4d81) (&i/o-write . G4d80) (&i/o-read . G4d7f) (&i/o . G4d7e) (&undefined . G4d7d) (&syntax . G4d7c) (&lexical . G4d7b) (&implementation-restriction . G4d7a) (&non-continuable . G4d79) (&who . G4d78) (&irritants . G4d77) (&assertion . G4d76) (&violation . G4d75) (&error . G4d74) (&serious . G4d73) (&warning . G4d72) (&message . G4d71) (&condition . G4d70) (define-condition-type . G4d6f) (define-enumeration . G4d6e) (define-record-type . G4d6d) (parent-rtd . G4d6c) (nongenerative . G4d6b) (opaque . G4d6a) (sealed . G4d69) (protocol . G4d68) (parent . G4d67) (immutable . G4d66) (mutable . G4d65) (fields . G4d64) (error-handling-mode . G4d63) (file-options . G4d62) (buffer-mode . G4d61) (eol-style . G4d60) (guard . G4d5f) (unsyntax-splicing . G4d5c) (unsyntax . G4d5b) (unquote-splicing . G4d5a) (unquote . G4d59) (_ . G4d58) (else . G4d57) (=> . G4d56) (... . G4d55) (assert . G4d54) (endianness . G4d53) (or . G4d50) (and . G4d4f) (do . G4d4e) (cond . G4d4d) (let* . G4d4c) (let . G4d4b) (let*-values . G4d4a) (let-values . G4d49) (identifier-syntax . G4d48) (with-syntax . G4d47) (quasisyntax . G4d46) (quasiquote . G4d45) (syntax-rules . G4d44) (include . G4d43) (record-constructor-descriptor . G4d41) (record-type-descriptor . G4d40) (case . G4d3f) (unless . G4d3d) (when . G4d3c) (if . G4d3b) (letrec* . G4d3a) (letrec . G4d39) (case-lambda . G4d37) (lambda . G4d36) (syntax . G4d35) (syntax-case . G4d34) (quote . G4d33) (letrec-syntax . G4d31) (let-syntax . G4d30) (set! . G4d2f) (import . G4d2e) (begin . G4d2d) (define-syntax . G4d2b) (define . G4d2a)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5027 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . G4d5a) (unquote . G4d59) (delay . G4d52) (or . G4d50) (and . G4d4f) (do . G4d4e) (cond . G4d4d) (let* . G4d4c) (let . G4d4b) (quasiquote . G4d45) (syntax-rules . G4d44) (case . G4d3f) (if . G4d3b) (letrec . G4d39) (lambda . G4d36) (quote . G4d33) (letrec-syntax . G4d31) (let-syntax . G4d30) (set! . G4d2f) (begin . G4d2d) (define-syntax . G4d2b) (define . G4d2a)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5028 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4fa1) (string-ci>=? . G4fa0) (string-ci=? . G4f9f) (string-ci<? . G4f9e) (string-ci<=? . G4f9d) (char-whitespace? . G4f9c) (char-upper-case? . G4f9b) (char-numeric? . G4f99) (char-lower-case? . G4f98) (char-upcase . G4f96) (char-downcase . G4f93) (char-ci>? . G4f92) (char-ci>=? . G4f91) (char-ci=? . G4f90) (char-ci<? . G4f8f) (char-ci<=? . G4f8e) (char-alphabetic? . G4f8d) (call-with-output-file . G4f61) (call-with-input-file . G4f60) (write-char . G4f5f) (write . G4f5e) (with-output-to-file . G4f5d) (with-input-from-file . G4f5c) (read-char . G4f5b) (read . G4f5a) (peek-char . G4f59) (open-output-file . G4f58) (open-input-file . G4f57) (newline . G4f56) (display . G4f55) (close-output-port . G4f54) (close-input-port . G4f53) (eof-object . G4f51) (current-output-port . G4f4f) (current-input-port . G4f4e) (output-port? . G4f4d) (input-port? . G4f4c) (scheme-report-environment . G308a) (quotient . G4f12) (null-environment . G3088) (remainder . G4f11) (modulo . G4f10) (inexact->exact . G4f0f) (force . G4f0e) (exact->inexact . G4f0d) (string-fill! . G4f0b) (string-set! . G4f0a) (set-cdr! . G4f09) (set-car! . G4f08) (memv . G4f02) (memq . G4f01) (member . G4eff) (assv . G4ef7) (assq . G4ef6) (assoc . G4ef4) (eval . G308e) (zero? . G4e2f) (vector? . G4e2e) (vector-set! . G4e2d) (vector-ref . G4e2c) (vector-length . G4e2a) (vector-fill! . G4e28) (vector->list . G4e27) (vector . G4e26) (values . G4e25) (truncate . G4e24) (tan . G4e23) (symbol? . G4e22) (symbol->string . G4e20) (substring . G4e1f) (string? . G4e1e) (string>? . G4e1d) (string>=? . G4e1c) (string=? . G4e1b) (string<? . G4e1a) (string<=? . G4e19) (string-ref . G4e18) (string-length . G4e17) (string-copy . G4e15) (string-append . G4e14) (string->symbol . G4e13) (string->number . G4e12) (string->list . G4e11) (string . G4e10) (sqrt . G4e0f) (sin . G4e0e) (round . G4e0d) (reverse . G4e0c) (real? . G4e0b) (real-part . G4e09) (rationalize . G4e08) (rational? . G4e07) (procedure? . G4e05) (positive? . G4e04) (pair? . G4e03) (odd? . G4e02) (numerator . G4e01) (number? . G4e00) (number->string . G4dff) (not . G4dfd) (negative? . G4dfc) (min . G4dfa) (max . G4df9) (map . G4df8) (make-vector . G4df7) (make-string . G4df6) (make-rectangular . G4df5) (make-polar . G4df4) (magnitude . G4df3) (log . G4df2) (list? . G4df1) (list-tail . G4df0) (list-ref . G4def) (list->vector . G4dee) (list->string . G4ded) (list . G4dec) (length . G4deb) (lcm . G4dea) (integer? . G4de9) (integer->char . G4de7) (inexact? . G4de5) (imag-part . G4de3) (gcd . G4de2) (for-each . G4de1) (floor . G4de0) (expt . G4dde) (exp . G4ddd) (exact? . G4ddc) (even? . G4dd9) (eqv? . G4dd7) (equal? . G4dd6) (eq? . G4dd5) (dynamic-wind . G4dd4) (denominator . G4dcd) (cos . G4dcc) (cons . G4dcb) (complex? . G4dca) (char? . G4dc9) (char>? . G4dc8) (char>=? . G4dc7) (char=? . G4dc6) (char<? . G4dc5) (char<=? . G4dc4) (char->integer . G4dc3) (ceiling . G4dc2) (call-with-values . G4dc1) (call-with-current-continuation . G4dbf) (cddddr . G4dbe) (cdddar . G4dbd) (cddadr . G4dbc) (cddaar . G4dbb) (cdaddr . G4dba) (cdadar . G4db9) (cdaadr . G4db8) (cdaaar . G4db7) (cadddr . G4db6) (caddar . G4db5) (cadadr . G4db4) (cadaar . G4db3) (caaddr . G4db2) (caadar . G4db1) (caaadr . G4db0) (caaaar . G4daf) (cdddr . G4dae) (cddar . G4dad) (cdadr . G4dac) (cdaar . G4dab) (caddr . G4daa) (cadar . G4da9) (caadr . G4da8) (caaar . G4da7) (cddr . G4da6) (cdar . G4da5) (cadr . G4da4) (caar . G4da3) (cdr . G4da2) (car . G4da1) (boolean? . G4da0) (atan . G4d9e) (asin . G4d9c) (apply . G4d9b) (append . G4d9a) (angle . G4d99) (acos . G4d98) (abs . G4d97) (/ . G4d96) (* . G4d95) (- . G4d94) (+ . G4d93) (>= . G4d92) (> . G4d91) (= . G4d90) (<= . G4d8f) (< . G4d8e) (unquote-splicing . G4d5a) (unquote . G4d59) (delay . G4d52) (or . G4d50) (and . G4d4f) (do . G4d4e) (cond . G4d4d) (let* . G4d4c) (let . G4d4b) (quasiquote . G4d45) (syntax-rules . G4d44) (case . G4d3f) (if . G4d3b) (letrec . G4d39) (lambda . G4d36) (quote . G4d33) (letrec-syntax . G4d31) (let-syntax . G4d30) (set! . G4d2f) (begin . G4d2d) (define-syntax . G4d2b) (define . G4d2a)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5029 '(psyntax modules) '() '() '() '() '((module . G4d2c)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G502a '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G502b '(rnrs) '(6) '() '() '() '((regexp? . G4fe6) (string-upcase . G4fa9) (string-titlecase . G4fa8) (string-normalize-nfkd . G4fa7) (string-normalize-nfkc . G4fa6) (string-normalize-nfd . G4fa5) (string-normalize-nfc . G4fa4) (string-foldcase . G4fa3) (string-downcase . G4fa2) (string-ci>? . G4fa1) (string-ci>=? . G4fa0) (string-ci=? . G4f9f) (string-ci<? . G4f9e) (string-ci<=? . G4f9d) (char-whitespace? . G4f9c) (char-upper-case? . G4f9b) (char-title-case? . G4f9a) (char-numeric? . G4f99) (char-lower-case? . G4f98) (char-general-category . G4f97) (char-upcase . G4f96) (char-titlecase . G4f95) (char-foldcase . G4f94) (char-downcase . G4f93) (char-ci>? . G4f92) (char-ci>=? . G4f91) (char-ci=? . G4f90) (char-ci<? . G4f8f) (char-ci<=? . G4f8e) (char-alphabetic? . G4f8d) (make-variable-transformer . G2dbf) (identifier? . G30ac) (generate-temporaries . G309c) (free-identifier=? . G309e) (syntax->datum . G30b0) (datum->syntax . G30ae) (bound-identifier=? . G30a0) (record-type-descriptor? . G4f8c) (record-predicate . G4f8b) (record-mutator . G4f8a) (record-constructor . G4f89) (record-accessor . G4f88) (make-record-type-descriptor . G4f87) (make-record-constructor-descriptor . G4f86) (record? . G4f85) (record-type-uid . G4f84) (record-type-sealed? . G4f83) (record-type-parent . G4f82) (record-type-opaque? . G4f81) (record-type-name . G4f80) (record-type-generative? . G4f7f) (record-type-field-names . G4f7e) (record-rtd . G4f7d) (record-field-mutable? . G4f7c) (delete-file . G4f7b) (file-exists? . G4f7a) (vector-sort! . G4f79) (vector-sort . G4f78) (list-sort . G4f77) (symbol-hash . G4f76) (string-ci-hash . G4f75) (string-hash . G4f74) (equal-hash . G4f73) (hashtable-equivalence-function . G4f72) (make-hashtable . G4f71) (hashtable-hash-function . G4f70) (make-eqv-hashtable . G4f6f) (make-eq-hashtable . G4f6e) (hashtable? . G4f6d) (hashtable-update! . G4f6c) (hashtable-size . G4f6b) (hashtable-set! . G4f6a) (hashtable-ref . G4f69) (hashtable-mutable? . G4f68) (hashtable-keys . G4f67) (hashtable-entries . G4f66) (hashtable-delete! . G4f65) (hashtable-copy . G4f64) (hashtable-contains? . G4f63) (hashtable-clear! . G4f62) (call-with-output-file . G4f61) (call-with-input-file . G4f60) (write-char . G4f5f) (write . G4f5e) (with-output-to-file . G4f5d) (with-input-from-file . G4f5c) (read-char . G4f5b) (read . G4f5a) (peek-char . G4f59) (open-output-file . G4f58) (open-input-file . G4f57) (newline . G4f56) (display . G4f55) (close-output-port . G4f54) (close-input-port . G4f53) (eof-object? . G4f52) (eof-object . G4f51) (current-error-port . G4f50) (current-output-port . G4f4f) (current-input-port . G4f4e) (output-port? . G4f4d) (input-port? . G4f4c) (utf-8-codec . G4f4b) (utf-16-codec . G4f4a) (transcoder-error-handling-mode . G4f49) (transcoder-eol-style . G4f48) (transcoder-codec . G4f47) (transcoded-port . G4f46) (textual-port? . G4f45) (string->bytevector . G4f44) (standard-output-port . G4f43) (standard-input-port . G4f42) (standard-error-port . G4f41) (set-port-position! . G4f40) (put-u8 . G4f3f) (put-string . G4f3e) (put-datum . G4f3d) (put-char . G4f3c) (put-bytevector . G4f3b) (port? . G4f3a) (port-transcoder . G4f39) (port-position . G4f38) (port-has-set-port-position!? . G4f37) (port-has-port-position? . G4f36) (port-eof? . G4f35) (output-port-buffer-mode . G4f34) (open-string-output-port . G4f33) (open-string-input-port . G4f32) (open-file-output-port . G4f31) (open-file-input/output-port . G4f30) (open-file-input-port . G4f2f) (open-bytevector-output-port . G4f2e) (open-bytevector-input-port . G4f2d) (native-transcoder . G4f2c) (native-eol-style . G4f2b) (make-transcoder . G4f2a) (latin-1-codec . G4f29) (make-i/o-write-error . G4b71) (make-i/o-read-error . G4b5d) (make-i/o-port-error . G4c08) (make-i/o-invalid-position-error . G4b86) (make-i/o-filename-error . G4b9f) (make-i/o-file-protection-error . G4bb7) (make-i/o-file-is-read-only-error . G4bcb) (make-i/o-file-does-not-exist-error . G4bf3) (make-i/o-file-already-exists-error . G4bdf) (make-i/o-error . G4b49) (make-i/o-encoding-error . G4c35) (make-i/o-decoding-error . G4c20) (make-custom-textual-output-port . G4f28) (make-custom-textual-input/output-port . G4f27) (make-custom-textual-input-port . G4f26) (make-custom-binary-output-port . G4f25) (make-custom-binary-input/output-port . G4f24) (make-custom-binary-input-port . G4f23) (make-bytevector . G4f22) (lookahead-u8 . G4f21) (lookahead-char . G4f20) (i/o-write-error? . G4b73) (i/o-read-error? . G4b5f) (i/o-port-error? . G4c0c) (i/o-invalid-position-error? . G4b8a) (i/o-filename-error? . G4ba3) (i/o-file-protection-error? . G4bb9) (i/o-file-is-read-only-error? . G4bcd) (i/o-file-does-not-exist-error? . G4bf5) (i/o-file-already-exists-error? . G4be1) (i/o-error? . G4b4b) (i/o-error-port . G4c0e) (i/o-error-filename . G4ba5) (i/o-encoding-error? . G4c39) (i/o-encoding-error-char . G4c3b) (i/o-decoding-error? . G4c22) (get-u8 . G4f1f) (get-string-n! . G4f1e) (get-string-n . G4f1d) (get-string-all . G4f1c) (get-line . G4f1b) (get-datum . G4f1a) (get-char . G4f19) (get-bytevector-some . G4f18) (get-bytevector-n! . G4f17) (get-bytevector-n . G4f16) (get-bytevector-all . G4f15) (flush-output-port . G4f14) (close-port . G4f13) (exit . G4f0c) (command-line . G4c94) (remove . G4f07) (remv . G4f06) (remp . G4f05) (remq . G4f04) (partition . G4f03) (memv . G4f02) (memq . G4f01) (memp . G4f00) (member . G4eff) (exists . G4efe) (for-all . G4efd) (fold-right . G4efc) (fold-left . G4efb) (find . G4efa) (filter . G4ef9) (cons* . G4ef8) (assv . G4ef7) (assq . G4ef6) (assp . G4ef5) (assoc . G4ef4) (call-with-string-output-port . G4ef3) (call-with-port . G4ef2) (call-with-bytevector-output-port . G4ef1) (bytevector->string . G4ef0) (buffer-mode? . G4eef) (binary-port? . G4eee) (with-exception-handler . G4eed) (raise-continuable . G4eec) (raise . G4eeb) (make-enumeration . G4eea) (enum-set=? . G4ee9) (enum-set-universe . G4ee8) (enum-set-union . G4ee7) (enum-set-subset? . G4ee6) (enum-set-projection . G4ee5) (enum-set-member? . G4ee4) (enum-set-intersection . G4ee3) (enum-set-indexer . G4ee2) (enum-set-difference . G4ee1) (enum-set-constructor . G4ee0) (enum-set-complement . G4edf) (enum-set->list . G4ede) (who-condition? . G4a67) (warning? . G49e7) (violation? . G4a23) (undefined-violation? . G4ad7) (syntax-violation? . G4abf) (syntax-violation-subform . G4ac3) (syntax-violation-form . G4ac1) (syntax-violation . G30aa) (simple-conditions . G4edd) (serious-condition? . G49fb) (non-continuable-violation? . G4a7d) (message-condition? . G49d1) (make-who-condition . G4a63) (make-warning . G49e5) (make-violation . G4a21) (make-undefined-violation . G4ad5) (make-syntax-violation . G4ab9) (make-serious-condition . G49f9) (make-non-continuable-violation . G4a7b) (make-message-condition . G49cd) (make-lexical-violation . G4aa3) (make-irritants-condition . G4a4a) (make-implementation-restriction-violation . G4a8f) (make-error . G4a0d) (make-assertion-violation . G4a35) (lexical-violation? . G4aa5) (irritants-condition? . G4a4e) (implementation-restriction-violation? . G4a91) (error? . G4a0f) (condition-who . G4a69) (condition-predicate . G4edc) (condition-message . G49d3) (condition-irritants . G4a50) (condition-accessor . G4edb) (condition . G4eda) (assertion-violation? . G4a37) (condition? . G4ed9) (utf32->string . G4ed8) (utf16->string . G4ed7) (utf8->string . G4ed6) (uint-list->bytevector . G4ed5) (u8-list->bytevector . G4ed4) (string->utf8 . G4ed3) (string->utf32 . G4ed2) (string->utf16 . G4ed1) (sint-list->bytevector . G4ed0) (native-endianness . G4ecf) (bytevector? . G4ece) (bytevector=? . G4ecd) (bytevector-uint-set! . G4ecc) (bytevector-uint-ref . G4ecb) (bytevector-u8-set! . G4eca) (bytevector-u8-ref . G4ec9) (bytevector-u64-set! . G4ec8) (bytevector-u64-ref . G4ec7) (bytevector-u64-native-set! . G4ec6) (bytevector-u64-native-ref . G4ec5) (bytevector-u32-set! . G4ec4) (bytevector-u32-ref . G4ec3) (bytevector-u32-native-set! . G4ec2) (bytevector-u32-native-ref . G4ec1) (bytevector-u16-set! . G4ec0) (bytevector-u16-ref . G4ebf) (bytevector-u16-native-set! . G4ebe) (bytevector-u16-native-ref . G4ebd) (bytevector-sint-set! . G4ebc) (bytevector-sint-ref . G4ebb) (bytevector-s8-set! . G4eba) (bytevector-s8-ref . G4eb9) (bytevector-s64-set! . G4eb8) (bytevector-s64-ref . G4eb7) (bytevector-s64-native-set! . G4eb6) (bytevector-s64-native-ref . G4eb5) (bytevector-s32-set! . G4eb4) (bytevector-s32-ref . G4eb3) (bytevector-s32-native-set! . G4eb2) (bytevector-s32-native-ref . G4eb1) (bytevector-s16-set! . G4eb0) (bytevector-s16-ref . G4eaf) (bytevector-s16-native-set! . G4eae) (bytevector-s16-native-ref . G4ead) (bytevector-length . G4eac) (bytevector-ieee-single-ref . G4eab) (bytevector-ieee-single-native-set! . G4eaa) (bytevector-ieee-single-native-ref . G4ea9) (bytevector-ieee-double-ref . G4ea8) (bytevector-ieee-double-native-set! . G4ea7) (bytevector-ieee-double-native-ref . G4ea6) (bytevector-fill! . G4ea5) (bytevector-copy! . G4ea4) (bytevector-copy . G4ea3) (bytevector->uint-list . G4ea2) (bytevector->u8-list . G4ea1) (bytevector->sint-list . G4ea0) (no-nans-violation? . G4e9f) (no-infinities-violation? . G4e9e) (make-no-nans-violation . G4e9d) (make-no-infinities-violation . G4e9c) (real->flonum . G4e9b) (flzero? . G4e9a) (fltruncate . G4e99) (fltan . G4e98) (flsqrt . G4e97) (flsin . G4e96) (flround . G4e95) (flpositive? . G4e94) (flonum? . G4e93) (flodd? . G4e92) (flnumerator . G4e91) (flnegative? . G4e90) (flnan? . G4e8f) (flmod0 . G4e8e) (flmod . G4e8d) (flmin . G4e8c) (flmax . G4e8b) (fllog . G4e8a) (flinteger? . G4e89) (flinfinite? . G4e88) (flfloor . G4e87) (flfinite? . G4e86) (flexpt . G4e85) (flexp . G4e84) (fleven? . G4e83) (fldiv0-and-mod0 . G4e82) (fldiv0 . G4e81) (fldiv-and-mod . G4e80) (fldiv . G4e7f) (fldenominator . G4e7e) (flcos . G4e7d) (flceiling . G4e7c) (flatan . G4e7b) (flasin . G4e7a) (flacos . G4e79) (flabs . G4e78) (fl>? . G4e77) (fl>=? . G4e76) (fl=? . G4e75) (fl<? . G4e74) (fl<=? . G4e73) (fl/ . G4e72) (fl- . G4e71) (fl+ . G4e70) (fl* . G4e6f) (fixnum->flonum . G4e6e) (fxzero? . G4e6d) (fxxor . G4e6c) (fxrotate-bit-field . G4e6b) (fxreverse-bit-field . G4e6a) (fxpositive? . G4e69) (fxodd? . G4e68) (fxnot . G4e67) (fxnegative? . G4e66) (fxmod0 . G4e65) (fxmod . G4e64) (fxmin . G4e63) (fxmax . G4e62) (fxlength . G4e61) (fxior . G4e60) (fxif . G4e5f) (fxfirst-bit-set . G4e5e) (fxeven? . G4e5d) (fxdiv0-and-mod0 . G4e5c) (fxdiv0 . G4e5b) (fxdiv-and-mod . G4e5a) (fxdiv . G4e59) (fxcopy-bit-field . G4e58) (fxcopy-bit . G4e57) (fxbit-set? . G4e56) (fxbit-field . G4e55) (fxbit-count . G4e54) (fxarithmetic-shift-right . G4e53) (fxarithmetic-shift-left . G4e52) (fxarithmetic-shift . G4e51) (fxand . G4e50) (fx>? . G4e4f) (fx>=? . G4e4e) (fx=? . G4e4d) (fx<? . G4e4c) (fx<=? . G4e4b) (fx-/carry . G4e4a) (fx- . G4e49) (fx+/carry . G4e48) (fx+ . G4e47) (fx*/carry . G4e46) (fx* . G4e45) (greatest-fixnum . G4e44) (least-fixnum . G4e43) (fixnum-width . G4e42) (fixnum? . G4e41) (bitwise-rotate-bit-field . G4e40) (bitwise-reverse-bit-field . G4e3f) (bitwise-length . G4e3e) (bitwise-if . G4e3d) (bitwise-first-bit-set . G4e3c) (bitwise-copy-bit-field . G4e3b) (bitwise-copy-bit . G4e3a) (bitwise-bit-set? . G4e39) (bitwise-bit-field . G4e38) (bitwise-bit-count . G4e37) (bitwise-xor . G4e36) (bitwise-ior . G4e35) (bitwise-and . G4e34) (bitwise-not . G4e33) (bitwise-arithmetic-shift-right . G4e32) (bitwise-arithmetic-shift-left . G4e31) (bitwise-arithmetic-shift . G4e30) (zero? . G4e2f) (vector? . G4e2e) (vector-set! . G4e2d) (vector-ref . G4e2c) (vector-map . G4e2b) (vector-length . G4e2a) (vector-for-each . G4e29) (vector-fill! . G4e28) (vector->list . G4e27) (vector . G4e26) (values . G4e25) (truncate . G4e24) (tan . G4e23) (symbol? . G4e22) (symbol=? . G4e21) (symbol->string . G4e20) (substring . G4e1f) (string? . G4e1e) (string>? . G4e1d) (string>=? . G4e1c) (string=? . G4e1b) (string<? . G4e1a) (string<=? . G4e19) (string-ref . G4e18) (string-length . G4e17) (string-for-each . G4e16) (string-copy . G4e15) (string-append . G4e14) (string->symbol . G4e13) (string->number . G4e12) (string->list . G4e11) (string . G4e10) (sqrt . G4e0f) (sin . G4e0e) (round . G4e0d) (reverse . G4e0c) (real? . G4e0b) (real-valued? . G4e0a) (real-part . G4e09) (rationalize . G4e08) (rational? . G4e07) (rational-valued? . G4e06) (procedure? . G4e05) (positive? . G4e04) (pair? . G4e03) (odd? . G4e02) (numerator . G4e01) (number? . G4e00) (number->string . G4dff) (null? . G4dfe) (not . G4dfd) (negative? . G4dfc) (nan? . G4dfb) (min . G4dfa) (max . G4df9) (map . G4df8) (make-vector . G4df7) (make-string . G4df6) (make-rectangular . G4df5) (make-polar . G4df4) (magnitude . G4df3) (log . G4df2) (list? . G4df1) (list-tail . G4df0) (list-ref . G4def) (list->vector . G4dee) (list->string . G4ded) (list . G4dec) (length . G4deb) (lcm . G4dea) (integer? . G4de9) (integer-valued? . G4de8) (integer->char . G4de7) (infinite? . G4de6) (inexact? . G4de5) (inexact . G4de4) (imag-part . G4de3) (gcd . G4de2) (for-each . G4de1) (floor . G4de0) (finite? . G4ddf) (expt . G4dde) (exp . G4ddd) (exact? . G4ddc) (exact-integer-sqrt . G4ddb) (exact . G4dda) (even? . G4dd9) (error . G4dd8) (eqv? . G4dd7) (equal? . G4dd6) (eq? . G4dd5) (dynamic-wind . G4dd4) (div0-and-mod0 . G4dd3) (mod0 . G4dd2) (div0 . G4dd1) (div-and-mod . G4dd0) (mod . G4dcf) (div . G4dce) (denominator . G4dcd) (cos . G4dcc) (cons . G4dcb) (complex? . G4dca) (char? . G4dc9) (char>? . G4dc8) (char>=? . G4dc7) (char=? . G4dc6) (char<? . G4dc5) (char<=? . G4dc4) (char->integer . G4dc3) (ceiling . G4dc2) (call-with-values . G4dc1) (call/cc . G4dc0) (call-with-current-continuation . G4dbf) (cddddr . G4dbe) (cdddar . G4dbd) (cddadr . G4dbc) (cddaar . G4dbb) (cdaddr . G4dba) (cdadar . G4db9) (cdaadr . G4db8) (cdaaar . G4db7) (cadddr . G4db6) (caddar . G4db5) (cadadr . G4db4) (cadaar . G4db3) (caaddr . G4db2) (caadar . G4db1) (caaadr . G4db0) (caaaar . G4daf) (cdddr . G4dae) (cddar . G4dad) (cdadr . G4dac) (cdaar . G4dab) (caddr . G4daa) (cadar . G4da9) (caadr . G4da8) (caaar . G4da7) (cddr . G4da6) (cdar . G4da5) (cadr . G4da4) (caar . G4da3) (cdr . G4da2) (car . G4da1) (boolean? . G4da0) (boolean=? . G4d9f) (atan . G4d9e) (assertion-violation . G4d9d) (asin . G4d9c) (apply . G4d9b) (append . G4d9a) (angle . G4d99) (acos . G4d98) (abs . G4d97) (/ . G4d96) (* . G4d95) (- . G4d94) (+ . G4d93) (>= . G4d92) (> . G4d91) (= . G4d90) (<= . G4d8f) (< . G4d8e) (&no-nans . G4d8b) (&no-infinities . G4d8a) (&i/o-encoding . G4d89) (&i/o-decoding . G4d88) (&i/o-port . G4d87) (&i/o-file-does-not-exist . G4d86) (&i/o-file-already-exists . G4d85) (&i/o-file-is-read-only . G4d84) (&i/o-file-protection . G4d83) (&i/o-filename . G4d82) (&i/o-invalid-position . G4d81) (&i/o-write . G4d80) (&i/o-read . G4d7f) (&i/o . G4d7e) (&undefined . G4d7d) (&syntax . G4d7c) (&lexical . G4d7b) (&implementation-restriction . G4d7a) (&non-continuable . G4d79) (&who . G4d78) (&irritants . G4d77) (&assertion . G4d76) (&violation . G4d75) (&error . G4d74) (&serious . G4d73) (&warning . G4d72) (&message . G4d71) (&condition . G4d70) (define-condition-type . G4d6f) (define-enumeration . G4d6e) (define-record-type . G4d6d) (parent-rtd . G4d6c) (nongenerative . G4d6b) (opaque . G4d6a) (sealed . G4d69) (protocol . G4d68) (parent . G4d67) (immutable . G4d66) (mutable . G4d65) (fields . G4d64) (error-handling-mode . G4d63) (file-options . G4d62) (buffer-mode . G4d61) (eol-style . G4d60) (guard . G4d5f) (unsyntax-splicing . G4d5c) (unsyntax . G4d5b) (unquote-splicing . G4d5a) (unquote . G4d59) (_ . G4d58) (else . G4d57) (=> . G4d56) (... . G4d55) (assert . G4d54) (endianness . G4d53) (or . G4d50) (and . G4d4f) (do . G4d4e) (cond . G4d4d) (let* . G4d4c) (let . G4d4b) (let*-values . G4d4a) (let-values . G4d49) (identifier-syntax . G4d48) (with-syntax . G4d47) (quasisyntax . G4d46) (quasiquote . G4d45) (syntax-rules . G4d44) (record-constructor-descriptor . G4d41) (record-type-descriptor . G4d40) (case . G4d3f) (unless . G4d3d) (when . G4d3c) (if . G4d3b) (letrec* . G4d3a) (letrec . G4d39) (case-lambda . G4d37) (lambda . G4d36) (syntax . G4d35) (syntax-case . G4d34) (quote . G4d33) (letrec-syntax . G4d31) (let-syntax . G4d30) (set! . G4d2f) (begin . G4d2d) (define-syntax . G4d2b) (define . G4d2a)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G502c '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G308a) (quotient . G4f12) (null-environment . G3088) (remainder . G4f11) (modulo . G4f10) (inexact->exact . G4f0f) (force . G4f0e) (exact->inexact . G4f0d) (delay . G4d52)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G502d '(rnrs control) '(6) '() '() '() '((do . G4d4e) (unless . G4d3d) (when . G4d3c) (case-lambda . G4d37)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G502e '(rnrs eval) '(6) '() '() '() '((eval . G308e) (environment . G3086)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G502f '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4f09) (set-car! . G4f08)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5030 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4f0b) (string-set! . G4f0a)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5031 '(rnrs programs) '(6) '() '() '() '((exit . G4f0c) (command-line . G4c94)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5032 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2dbf) (identifier? . G30ac) (generate-temporaries . G309c) (free-identifier=? . G309e) (syntax->datum . G30b0) (datum->syntax . G30ae) (bound-identifier=? . G30a0) (syntax-violation . G30aa) (unsyntax-splicing . G4d5c) (unsyntax . G4d5b) (_ . G4d58) (... . G4d55) (with-syntax . G4d47) (quasisyntax . G4d46) (syntax . G4d35) (syntax-case . G4d34)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5033 '(rnrs files) '(6) '() '() '() '((delete-file . G4f7b) (file-exists? . G4f7a) (make-i/o-write-error . G4b71) (make-i/o-read-error . G4b5d) (make-i/o-port-error . G4c08) (make-i/o-invalid-position-error . G4b86) (make-i/o-filename-error . G4b9f) (make-i/o-file-protection-error . G4bb7) (make-i/o-file-is-read-only-error . G4bcb) (make-i/o-file-does-not-exist-error . G4bf3) (make-i/o-file-already-exists-error . G4bdf) (make-i/o-error . G4b49) (i/o-write-error? . G4b73) (i/o-read-error? . G4b5f) (i/o-port-error? . G4c0c) (i/o-invalid-position-error? . G4b8a) (i/o-filename-error? . G4ba3) (i/o-file-protection-error? . G4bb9) (i/o-file-is-read-only-error? . G4bcd) (i/o-file-does-not-exist-error? . G4bf5) (i/o-file-already-exists-error? . G4be1) (i/o-error? . G4b4b) (i/o-error-port . G4c0e) (i/o-error-filename . G4ba5) (&i/o-port . G4d87) (&i/o-file-does-not-exist . G4d86) (&i/o-file-already-exists . G4d85) (&i/o-file-is-read-only . G4d84) (&i/o-file-protection . G4d83) (&i/o-filename . G4d82) (&i/o-invalid-position . G4d81) (&i/o-write . G4d80) (&i/o-read . G4d7f) (&i/o . G4d7e)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5034 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4f79) (vector-sort . G4f78) (list-sort . G4f77)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5035 '(rnrs base) '(6) '() '() '() '((zero? . G4e2f) (vector? . G4e2e) (vector-set! . G4e2d) (vector-ref . G4e2c) (vector-map . G4e2b) (vector-length . G4e2a) (vector-for-each . G4e29) (vector-fill! . G4e28) (vector->list . G4e27) (vector . G4e26) (values . G4e25) (truncate . G4e24) (tan . G4e23) (symbol? . G4e22) (symbol=? . G4e21) (symbol->string . G4e20) (substring . G4e1f) (string? . G4e1e) (string>? . G4e1d) (string>=? . G4e1c) (string=? . G4e1b) (string<? . G4e1a) (string<=? . G4e19) (string-ref . G4e18) (string-length . G4e17) (string-for-each . G4e16) (string-copy . G4e15) (string-append . G4e14) (string->symbol . G4e13) (string->number . G4e12) (string->list . G4e11) (string . G4e10) (sqrt . G4e0f) (sin . G4e0e) (round . G4e0d) (reverse . G4e0c) (real? . G4e0b) (real-valued? . G4e0a) (real-part . G4e09) (rationalize . G4e08) (rational? . G4e07) (rational-valued? . G4e06) (procedure? . G4e05) (positive? . G4e04) (pair? . G4e03) (odd? . G4e02) (numerator . G4e01) (number? . G4e00) (number->string . G4dff) (null? . G4dfe) (not . G4dfd) (negative? . G4dfc) (nan? . G4dfb) (min . G4dfa) (max . G4df9) (map . G4df8) (make-vector . G4df7) (make-string . G4df6) (make-rectangular . G4df5) (make-polar . G4df4) (magnitude . G4df3) (log . G4df2) (list? . G4df1) (list-tail . G4df0) (list-ref . G4def) (list->vector . G4dee) (list->string . G4ded) (list . G4dec) (length . G4deb) (lcm . G4dea) (integer? . G4de9) (integer-valued? . G4de8) (integer->char . G4de7) (infinite? . G4de6) (inexact? . G4de5) (inexact . G4de4) (imag-part . G4de3) (gcd . G4de2) (for-each . G4de1) (floor . G4de0) (finite? . G4ddf) (expt . G4dde) (exp . G4ddd) (exact? . G4ddc) (exact-integer-sqrt . G4ddb) (exact . G4dda) (even? . G4dd9) (error . G4dd8) (eqv? . G4dd7) (equal? . G4dd6) (eq? . G4dd5) (dynamic-wind . G4dd4) (div0-and-mod0 . G4dd3) (mod0 . G4dd2) (div0 . G4dd1) (div-and-mod . G4dd0) (mod . G4dcf) (div . G4dce) (denominator . G4dcd) (cos . G4dcc) (cons . G4dcb) (complex? . G4dca) (char? . G4dc9) (char>? . G4dc8) (char>=? . G4dc7) (char=? . G4dc6) (char<? . G4dc5) (char<=? . G4dc4) (char->integer . G4dc3) (ceiling . G4dc2) (call-with-values . G4dc1) (call/cc . G4dc0) (call-with-current-continuation . G4dbf) (cddddr . G4dbe) (cdddar . G4dbd) (cddadr . G4dbc) (cddaar . G4dbb) (cdaddr . G4dba) (cdadar . G4db9) (cdaadr . G4db8) (cdaaar . G4db7) (cadddr . G4db6) (caddar . G4db5) (cadadr . G4db4) (cadaar . G4db3) (caaddr . G4db2) (caadar . G4db1) (caaadr . G4db0) (caaaar . G4daf) (cdddr . G4dae) (cddar . G4dad) (cdadr . G4dac) (cdaar . G4dab) (caddr . G4daa) (cadar . G4da9) (caadr . G4da8) (caaar . G4da7) (cddr . G4da6) (cdar . G4da5) (cadr . G4da4) (caar . G4da3) (cdr . G4da2) (car . G4da1) (boolean? . G4da0) (boolean=? . G4d9f) (atan . G4d9e) (assertion-violation . G4d9d) (asin . G4d9c) (apply . G4d9b) (append . G4d9a) (angle . G4d99) (acos . G4d98) (abs . G4d97) (/ . G4d96) (* . G4d95) (- . G4d94) (+ . G4d93) (>= . G4d92) (> . G4d91) (= . G4d90) (<= . G4d8f) (< . G4d8e) (unquote-splicing . G4d5a) (unquote . G4d59) (_ . G4d58) (else . G4d57) (=> . G4d56) (... . G4d55) (assert . G4d54) (or . G4d50) (and . G4d4f) (cond . G4d4d) (let* . G4d4c) (let . G4d4b) (let*-values . G4d4a) (let-values . G4d49) (identifier-syntax . G4d48) (quasiquote . G4d45) (syntax-rules . G4d44) (case . G4d3f) (if . G4d3b) (letrec* . G4d3a) (letrec . G4d39) (lambda . G4d36) (quote . G4d33) (letrec-syntax . G4d31) (let-syntax . G4d30) (set! . G4d2f) (begin . G4d2d) (define-syntax . G4d2b) (define . G4d2a)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5036 '(rnrs lists) '(6) '() '() '() '((remove . G4f07) (remv . G4f06) (remp . G4f05) (remq . G4f04) (partition . G4f03) (memv . G4f02) (memq . G4f01) (memp . G4f00) (member . G4eff) (exists . G4efe) (for-all . G4efd) (fold-right . G4efc) (fold-left . G4efb) (find . G4efa) (filter . G4ef9) (cons* . G4ef8) (assv . G4ef7) (assq . G4ef6) (assp . G4ef5) (assoc . G4ef4)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5037 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4f61) (call-with-input-file . G4f60) (write-char . G4f5f) (write . G4f5e) (with-output-to-file . G4f5d) (with-input-from-file . G4f5c) (read-char . G4f5b) (read . G4f5a) (peek-char . G4f59) (open-output-file . G4f58) (open-input-file . G4f57) (newline . G4f56) (display . G4f55) (close-output-port . G4f54) (close-input-port . G4f53) (eof-object? . G4f52) (eof-object . G4f51) (current-error-port . G4f50) (current-output-port . G4f4f) (current-input-port . G4f4e) (output-port? . G4f4d) (input-port? . G4f4c) (make-i/o-write-error . G4b71) (make-i/o-read-error . G4b5d) (make-i/o-port-error . G4c08) (make-i/o-invalid-position-error . G4b86) (make-i/o-filename-error . G4b9f) (make-i/o-file-protection-error . G4bb7) (make-i/o-file-is-read-only-error . G4bcb) (make-i/o-file-does-not-exist-error . G4bf3) (make-i/o-file-already-exists-error . G4bdf) (make-i/o-error . G4b49) (i/o-write-error? . G4b73) (i/o-read-error? . G4b5f) (i/o-port-error? . G4c0c) (i/o-invalid-position-error? . G4b8a) (i/o-filename-error? . G4ba3) (i/o-file-protection-error? . G4bb9) (i/o-file-is-read-only-error? . G4bcd) (i/o-file-does-not-exist-error? . G4bf5) (i/o-file-already-exists-error? . G4be1) (i/o-error? . G4b4b) (i/o-error-port . G4c0e) (i/o-error-filename . G4ba5) (&i/o-port . G4d87) (&i/o-file-does-not-exist . G4d86) (&i/o-file-already-exists . G4d85) (&i/o-file-is-read-only . G4d84) (&i/o-file-protection . G4d83) (&i/o-filename . G4d82) (&i/o-invalid-position . G4d81) (&i/o-write . G4d80) (&i/o-read . G4d7f) (&i/o . G4d7e)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5038 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4f22) (utf32->string . G4ed8) (utf16->string . G4ed7) (utf8->string . G4ed6) (uint-list->bytevector . G4ed5) (u8-list->bytevector . G4ed4) (string->utf8 . G4ed3) (string->utf32 . G4ed2) (string->utf16 . G4ed1) (sint-list->bytevector . G4ed0) (native-endianness . G4ecf) (bytevector? . G4ece) (bytevector=? . G4ecd) (bytevector-uint-set! . G4ecc) (bytevector-uint-ref . G4ecb) (bytevector-u8-set! . G4eca) (bytevector-u8-ref . G4ec9) (bytevector-u64-set! . G4ec8) (bytevector-u64-ref . G4ec7) (bytevector-u64-native-set! . G4ec6) (bytevector-u64-native-ref . G4ec5) (bytevector-u32-set! . G4ec4) (bytevector-u32-ref . G4ec3) (bytevector-u32-native-set! . G4ec2) (bytevector-u32-native-ref . G4ec1) (bytevector-u16-set! . G4ec0) (bytevector-u16-ref . G4ebf) (bytevector-u16-native-set! . G4ebe) (bytevector-u16-native-ref . G4ebd) (bytevector-sint-set! . G4ebc) (bytevector-sint-ref . G4ebb) (bytevector-s8-set! . G4eba) (bytevector-s8-ref . G4eb9) (bytevector-s64-set! . G4eb8) (bytevector-s64-ref . G4eb7) (bytevector-s64-native-set! . G4eb6) (bytevector-s64-native-ref . G4eb5) (bytevector-s32-set! . G4eb4) (bytevector-s32-ref . G4eb3) (bytevector-s32-native-set! . G4eb2) (bytevector-s32-native-ref . G4eb1) (bytevector-s16-set! . G4eb0) (bytevector-s16-ref . G4eaf) (bytevector-s16-native-set! . G4eae) (bytevector-s16-native-ref . G4ead) (bytevector-length . G4eac) (bytevector-ieee-single-ref . G4eab) (bytevector-ieee-single-native-set! . G4eaa) (bytevector-ieee-single-native-ref . G4ea9) (bytevector-ieee-double-ref . G4ea8) (bytevector-ieee-double-native-set! . G4ea7) (bytevector-ieee-double-native-ref . G4ea6) (bytevector-fill! . G4ea5) (bytevector-copy! . G4ea4) (bytevector-copy . G4ea3) (bytevector->uint-list . G4ea2) (bytevector->u8-list . G4ea1) (bytevector->sint-list . G4ea0) (endianness . G4d53)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5039 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4fa9) (string-titlecase . G4fa8) (string-normalize-nfkd . G4fa7) (string-normalize-nfkc . G4fa6) (string-normalize-nfd . G4fa5) (string-normalize-nfc . G4fa4) (string-foldcase . G4fa3) (string-downcase . G4fa2) (string-ci>? . G4fa1) (string-ci>=? . G4fa0) (string-ci=? . G4f9f) (string-ci<? . G4f9e) (string-ci<=? . G4f9d) (char-whitespace? . G4f9c) (char-upper-case? . G4f9b) (char-title-case? . G4f9a) (char-numeric? . G4f99) (char-lower-case? . G4f98) (char-general-category . G4f97) (char-upcase . G4f96) (char-titlecase . G4f95) (char-foldcase . G4f94) (char-downcase . G4f93) (char-ci>? . G4f92) (char-ci>=? . G4f91) (char-ci=? . G4f90) (char-ci<? . G4f8f) (char-ci<=? . G4f8e) (char-alphabetic? . G4f8d)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G503a '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4eed) (raise-continuable . G4eec) (raise . G4eeb) (guard . G4d5f) (else . G4d57) (=> . G4d56)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G503b '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4e40) (bitwise-reverse-bit-field . G4e3f) (bitwise-length . G4e3e) (bitwise-if . G4e3d) (bitwise-first-bit-set . G4e3c) (bitwise-copy-bit-field . G4e3b) (bitwise-copy-bit . G4e3a) (bitwise-bit-set? . G4e39) (bitwise-bit-field . G4e38) (bitwise-bit-count . G4e37) (bitwise-xor . G4e36) (bitwise-ior . G4e35) (bitwise-and . G4e34) (bitwise-not . G4e33) (bitwise-arithmetic-shift-right . G4e32) (bitwise-arithmetic-shift-left . G4e31) (bitwise-arithmetic-shift . G4e30)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G503c '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4e6d) (fxxor . G4e6c) (fxrotate-bit-field . G4e6b) (fxreverse-bit-field . G4e6a) (fxpositive? . G4e69) (fxodd? . G4e68) (fxnot . G4e67) (fxnegative? . G4e66) (fxmod0 . G4e65) (fxmod . G4e64) (fxmin . G4e63) (fxmax . G4e62) (fxlength . G4e61) (fxior . G4e60) (fxif . G4e5f) (fxfirst-bit-set . G4e5e) (fxeven? . G4e5d) (fxdiv0-and-mod0 . G4e5c) (fxdiv0 . G4e5b) (fxdiv-and-mod . G4e5a) (fxdiv . G4e59) (fxcopy-bit-field . G4e58) (fxcopy-bit . G4e57) (fxbit-set? . G4e56) (fxbit-field . G4e55) (fxbit-count . G4e54) (fxarithmetic-shift-right . G4e53) (fxarithmetic-shift-left . G4e52) (fxarithmetic-shift . G4e51) (fxand . G4e50) (fx>? . G4e4f) (fx>=? . G4e4e) (fx=? . G4e4d) (fx<? . G4e4c) (fx<=? . G4e4b) (fx-/carry . G4e4a) (fx- . G4e49) (fx+/carry . G4e48) (fx+ . G4e47) (fx*/carry . G4e46) (fx* . G4e45) (greatest-fixnum . G4e44) (least-fixnum . G4e43) (fixnum-width . G4e42) (fixnum? . G4e41)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G503d '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4e9f) (no-infinities-violation? . G4e9e) (make-no-nans-violation . G4e9d) (make-no-infinities-violation . G4e9c) (real->flonum . G4e9b) (flzero? . G4e9a) (fltruncate . G4e99) (fltan . G4e98) (flsqrt . G4e97) (flsin . G4e96) (flround . G4e95) (flpositive? . G4e94) (flonum? . G4e93) (flodd? . G4e92) (flnumerator . G4e91) (flnegative? . G4e90) (flnan? . G4e8f) (flmod0 . G4e8e) (flmod . G4e8d) (flmin . G4e8c) (flmax . G4e8b) (fllog . G4e8a) (flinteger? . G4e89) (flinfinite? . G4e88) (flfloor . G4e87) (flfinite? . G4e86) (flexpt . G4e85) (flexp . G4e84) (fleven? . G4e83) (fldiv0-and-mod0 . G4e82) (fldiv0 . G4e81) (fldiv-and-mod . G4e80) (fldiv . G4e7f) (fldenominator . G4e7e) (flcos . G4e7d) (flceiling . G4e7c) (flatan . G4e7b) (flasin . G4e7a) (flacos . G4e79) (flabs . G4e78) (fl>? . G4e77) (fl>=? . G4e76) (fl=? . G4e75) (fl<? . G4e74) (fl<=? . G4e73) (fl/ . G4e72) (fl- . G4e71) (fl+ . G4e70) (fl* . G4e6f) (fixnum->flonum . G4e6e) (&no-nans . G4d8b) (&no-infinities . G4d8a)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G503e '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4f76) (string-ci-hash . G4f75) (string-hash . G4f74) (equal-hash . G4f73) (hashtable-equivalence-function . G4f72) (make-hashtable . G4f71) (hashtable-hash-function . G4f70) (make-eqv-hashtable . G4f6f) (make-eq-hashtable . G4f6e) (hashtable? . G4f6d) (hashtable-update! . G4f6c) (hashtable-size . G4f6b) (hashtable-set! . G4f6a) (hashtable-ref . G4f69) (hashtable-mutable? . G4f68) (hashtable-keys . G4f67) (hashtable-entries . G4f66) (hashtable-delete! . G4f65) (hashtable-copy . G4f64) (hashtable-contains? . G4f63) (hashtable-clear! . G4f62)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G503f '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4f52) (eof-object . G4f51) (current-error-port . G4f50) (current-output-port . G4f4f) (current-input-port . G4f4e) (output-port? . G4f4d) (input-port? . G4f4c) (utf-8-codec . G4f4b) (utf-16-codec . G4f4a) (transcoder-error-handling-mode . G4f49) (transcoder-eol-style . G4f48) (transcoder-codec . G4f47) (transcoded-port . G4f46) (textual-port? . G4f45) (string->bytevector . G4f44) (standard-output-port . G4f43) (standard-input-port . G4f42) (standard-error-port . G4f41) (set-port-position! . G4f40) (put-u8 . G4f3f) (put-string . G4f3e) (put-datum . G4f3d) (put-char . G4f3c) (put-bytevector . G4f3b) (port? . G4f3a) (port-transcoder . G4f39) (port-position . G4f38) (port-has-set-port-position!? . G4f37) (port-has-port-position? . G4f36) (port-eof? . G4f35) (output-port-buffer-mode . G4f34) (open-string-output-port . G4f33) (open-string-input-port . G4f32) (open-file-output-port . G4f31) (open-file-input/output-port . G4f30) (open-file-input-port . G4f2f) (open-bytevector-output-port . G4f2e) (open-bytevector-input-port . G4f2d) (native-transcoder . G4f2c) (native-eol-style . G4f2b) (make-transcoder . G4f2a) (latin-1-codec . G4f29) (make-i/o-write-error . G4b71) (make-i/o-read-error . G4b5d) (make-i/o-port-error . G4c08) (make-i/o-invalid-position-error . G4b86) (make-i/o-filename-error . G4b9f) (make-i/o-file-protection-error . G4bb7) (make-i/o-file-is-read-only-error . G4bcb) (make-i/o-file-does-not-exist-error . G4bf3) (make-i/o-file-already-exists-error . G4bdf) (make-i/o-error . G4b49) (make-i/o-encoding-error . G4c35) (make-i/o-decoding-error . G4c20) (make-custom-textual-output-port . G4f28) (make-custom-textual-input/output-port . G4f27) (make-custom-textual-input-port . G4f26) (make-custom-binary-output-port . G4f25) (make-custom-binary-input/output-port . G4f24) (make-custom-binary-input-port . G4f23) (lookahead-u8 . G4f21) (lookahead-char . G4f20) (i/o-write-error? . G4b73) (i/o-read-error? . G4b5f) (i/o-port-error? . G4c0c) (i/o-invalid-position-error? . G4b8a) (i/o-filename-error? . G4ba3) (i/o-file-protection-error? . G4bb9) (i/o-file-is-read-only-error? . G4bcd) (i/o-file-does-not-exist-error? . G4bf5) (i/o-file-already-exists-error? . G4be1) (i/o-error? . G4b4b) (i/o-error-port . G4c0e) (i/o-error-filename . G4ba5) (i/o-encoding-error? . G4c39) (i/o-encoding-error-char . G4c3b) (i/o-decoding-error? . G4c22) (get-u8 . G4f1f) (get-string-n! . G4f1e) (get-string-n . G4f1d) (get-string-all . G4f1c) (get-line . G4f1b) (get-datum . G4f1a) (get-char . G4f19) (get-bytevector-some . G4f18) (get-bytevector-n! . G4f17) (get-bytevector-n . G4f16) (get-bytevector-all . G4f15) (flush-output-port . G4f14) (close-port . G4f13) (call-with-string-output-port . G4ef3) (call-with-port . G4ef2) (call-with-bytevector-output-port . G4ef1) (bytevector->string . G4ef0) (buffer-mode? . G4eef) (binary-port? . G4eee) (&i/o-encoding . G4d89) (&i/o-decoding . G4d88) (&i/o-port . G4d87) (&i/o-file-does-not-exist . G4d86) (&i/o-file-already-exists . G4d85) (&i/o-file-is-read-only . G4d84) (&i/o-file-protection . G4d83) (&i/o-filename . G4d82) (&i/o-invalid-position . G4d81) (&i/o-write . G4d80) (&i/o-read . G4d7f) (&i/o . G4d7e) (error-handling-mode . G4d63) (file-options . G4d62) (buffer-mode . G4d61) (eol-style . G4d60)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5040 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4eea) (enum-set=? . G4ee9) (enum-set-universe . G4ee8) (enum-set-union . G4ee7) (enum-set-subset? . G4ee6) (enum-set-projection . G4ee5) (enum-set-member? . G4ee4) (enum-set-intersection . G4ee3) (enum-set-indexer . G4ee2) (enum-set-difference . G4ee1) (enum-set-constructor . G4ee0) (enum-set-complement . G4edf) (enum-set->list . G4ede) (define-enumeration . G4d6e)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5041 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a67) (warning? . G49e7) (violation? . G4a23) (undefined-violation? . G4ad7) (syntax-violation? . G4abf) (syntax-violation-subform . G4ac3) (syntax-violation-form . G4ac1) (syntax-violation . G30aa) (simple-conditions . G4edd) (serious-condition? . G49fb) (non-continuable-violation? . G4a7d) (message-condition? . G49d1) (make-who-condition . G4a63) (make-warning . G49e5) (make-violation . G4a21) (make-undefined-violation . G4ad5) (make-syntax-violation . G4ab9) (make-serious-condition . G49f9) (make-non-continuable-violation . G4a7b) (make-message-condition . G49cd) (make-lexical-violation . G4aa3) (make-irritants-condition . G4a4a) (make-implementation-restriction-violation . G4a8f) (make-error . G4a0d) (make-assertion-violation . G4a35) (lexical-violation? . G4aa5) (irritants-condition? . G4a4e) (implementation-restriction-violation? . G4a91) (error? . G4a0f) (condition-who . G4a69) (condition-predicate . G4edc) (condition-message . G49d3) (condition-irritants . G4a50) (condition-accessor . G4edb) (condition . G4eda) (assertion-violation? . G4a37) (condition? . G4ed9) (&undefined . G4d7d) (&syntax . G4d7c) (&lexical . G4d7b) (&implementation-restriction . G4d7a) (&non-continuable . G4d79) (&who . G4d78) (&irritants . G4d77) (&assertion . G4d76) (&violation . G4d75) (&error . G4d74) (&serious . G4d73) (&warning . G4d72) (&message . G4d71) (&condition . G4d70) (define-condition-type . G4d6f)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5042 '(rnrs records inspection) '(6) '() '() '() '((record? . G4f85) (record-type-uid . G4f84) (record-type-sealed? . G4f83) (record-type-parent . G4f82) (record-type-opaque? . G4f81) (record-type-name . G4f80) (record-type-generative? . G4f7f) (record-type-field-names . G4f7e) (record-rtd . G4f7d) (record-field-mutable? . G4f7c)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5043 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4f8c) (record-predicate . G4f8b) (record-mutator . G4f8a) (record-constructor . G4f89) (record-accessor . G4f88) (make-record-type-descriptor . G4f87) (make-record-constructor-descriptor . G4f86)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5044 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4d6d) (parent-rtd . G4d6c) (nongenerative . G4d6b) (opaque . G4d6a) (sealed . G4d69) (protocol . G4d68) (parent . G4d67) (immutable . G4d66) (mutable . G4d65) (fields . G4d64) (record-constructor-descriptor . G4d41) (record-type-descriptor . G4d40)) '() values values '#f '#f '#t '#f) (G2b7c@G2a12@install-library 'G5045 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G5025) (&no-nans-rtd . G5024) (&no-infinities-rcd . G5023) (&no-infinities-rtd . G5022) (&i/o-encoding-rcd . G5021) (&i/o-encoding-rtd . G5020) (&i/o-decoding-rcd . G501f) (&i/o-decoding-rtd . G501e) (&i/o-port-rcd . G501d) (&i/o-port-rtd . G501c) (&i/o-file-does-not-exist-rcd . G501b) (&i/o-file-does-not-exist-rtd . G501a) (&i/o-file-already-exists-rcd . G5019) (&i/o-file-already-exists-rtd . G5018) (&i/o-file-is-read-only-rcd . G5017) (&i/o-file-is-read-only-rtd . G5016) (&i/o-file-protection-rcd . G5015) (&i/o-file-protection-rtd . G5014) (&i/o-filename-rcd . G5013) (&i/o-filename-rtd . G5012) (&i/o-invalid-position-rcd . G5011) (&i/o-invalid-position-rtd . G5010) (&i/o-write-rcd . G500f) (&i/o-write-rtd . G500e) (&i/o-read-rcd . G500d) (&i/o-read-rtd . G500c) (&i/o-rcd . G500b) (&i/o-rtd . G500a) (&undefined-rcd . G5009) (&undefined-rtd . G5008) (&syntax-rcd . G5007) (&syntax-rtd . G5006) (&lexical-rcd . G5005) (&lexical-rtd . G5004) (&implementation-restriction-rcd . G5003) (&implementation-restriction-rtd . G5002) (&non-continuable-rcd . G5001) (&non-continuable-rtd . G5000) (&who-rcd . G4fff) (&who-rtd . G4ffe) (&irritants-rcd . G4ffd) (&irritants-rtd . G4ffc) (&assertion-rcd . G4ffb) (&assertion-rtd . G4ffa) (&violation-rcd . G4ff9) (&violation-rtd . G4ff8) (&error-rcd . G4ff7) (&error-rtd . G4ff6) (&serious-rcd . G4ff5) (&serious-rtd . G4ff4) (&warning-rcd . G4ff3) (&warning-rtd . G4ff2) (&message-rcd . G4ff1) (&message-rtd . G4ff0) (&condition-rcd . G4fef) (&condition-rtd . G4fee) (syntax-error . G30a4) (syntax-dispatch . G2fc1) (pretty-print . G4fed) (eval-core . G4fec) (set-symbol-value! . G4feb) (symbol-value . G4fea) (gensym . G4fe9) (void . G4fe8) (load . G4c9a) (interaction-environment . G30b6) (char-ready? . G4fe7) (regexp? . G4fe6) (read-line . G4fe5) (dotted-list? . G4fe4) (circular-list? . G4fe3) (proper-list? . G4fe2) (circular-list . G4fe1) (last . G4fe0) (last-pair . G4fdf) (not-pair? . G4fde) (split-at! . G4fdd) (split-at . G4fdc) (list= . G4fdb) (list-copy . G4fda) (list-tabulate . G4fd9) (make-list . G4fd8) (xcons . G4fd7) (tenth . G4fd6) (ninth . G4fd5) (eighth . G4fd4) (seventh . G4fd3) (sixth . G4fd2) (fifth . G4fd1) (drop-right! . G4fd0) (drop-right . G4fcf) (take-right . G4fce) (take! . G4fcd) (drop . G4fcc) (take . G4fcb) (car+cdr . G4fca) (third . G4fc9) (second . G4fc8) (first . G4fc7) (assoc-ref . G4fc6) (alist-cons . G4fc5) (print . G4fc4) (format . G4fc3) (standard-library-path . G4fc2) (current-directory . G4fc1) (write-to-file . G4fc0) (file->list . G4fbf) (file->string . G4fbe) (digit->integer . G4fbd) (call-with-string-input-port . G4fbc) (call-with-string-io . G4fbb) (string-split . G4fba) (bytevector-for-each . G4fb9) (string->regexp . G4fb8) (rxmatch . G4fb7) (regexp-replace-all . G4fb6) (hashtable-for-each . G4fb5) (readdir . G4fb4) (get-environment-variables . G4fb3) (get-environment-variable . G4fb2) (get-command-line . G4fb1) (sys-display . G4fb0) (source-info . G4faf) (make-compiler-instruction . G4fae) (make-instruction . G4fad) (set-source-info! . G4fac) (fasl-write . G4fab) (receive . G4faa) (string-upcase . G4fa9) (string-titlecase . G4fa8) (string-normalize-nfkd . G4fa7) (string-normalize-nfkc . G4fa6) (string-normalize-nfd . G4fa5) (string-normalize-nfc . G4fa4) (string-foldcase . G4fa3) (string-downcase . G4fa2) (string-ci>? . G4fa1) (string-ci>=? . G4fa0) (string-ci=? . G4f9f) (string-ci<? . G4f9e) (string-ci<=? . G4f9d) (char-whitespace? . G4f9c) (char-upper-case? . G4f9b) (char-title-case? . G4f9a) (char-numeric? . G4f99) (char-lower-case? . G4f98) (char-general-category . G4f97) (char-upcase . G4f96) (char-titlecase . G4f95) (char-foldcase . G4f94) (char-downcase . G4f93) (char-ci>? . G4f92) (char-ci>=? . G4f91) (char-ci=? . G4f90) (char-ci<? . G4f8f) (char-ci<=? . G4f8e) (char-alphabetic? . G4f8d) (make-variable-transformer . G2dbf) (identifier? . G30ac) (generate-temporaries . G309c) (free-identifier=? . G309e) (syntax->datum . G30b0) (datum->syntax . G30ae) (bound-identifier=? . G30a0) (record-type-descriptor? . G4f8c) (record-predicate . G4f8b) (record-mutator . G4f8a) (record-constructor . G4f89) (record-accessor . G4f88) (make-record-type-descriptor . G4f87) (make-record-constructor-descriptor . G4f86) (record? . G4f85) (record-type-uid . G4f84) (record-type-sealed? . G4f83) (record-type-parent . G4f82) (record-type-opaque? . G4f81) (record-type-name . G4f80) (record-type-generative? . G4f7f) (record-type-field-names . G4f7e) (record-rtd . G4f7d) (record-field-mutable? . G4f7c) (delete-file . G4f7b) (file-exists? . G4f7a) (vector-sort! . G4f79) (vector-sort . G4f78) (list-sort . G4f77) (symbol-hash . G4f76) (string-ci-hash . G4f75) (string-hash . G4f74) (equal-hash . G4f73) (hashtable-equivalence-function . G4f72) (make-hashtable . G4f71) (hashtable-hash-function . G4f70) (make-eqv-hashtable . G4f6f) (make-eq-hashtable . G4f6e) (hashtable? . G4f6d) (hashtable-update! . G4f6c) (hashtable-size . G4f6b) (hashtable-set! . G4f6a) (hashtable-ref . G4f69) (hashtable-mutable? . G4f68) (hashtable-keys . G4f67) (hashtable-entries . G4f66) (hashtable-delete! . G4f65) (hashtable-copy . G4f64) (hashtable-contains? . G4f63) (hashtable-clear! . G4f62) (call-with-output-file . G4f61) (call-with-input-file . G4f60) (write-char . G4f5f) (write . G4f5e) (with-output-to-file . G4f5d) (with-input-from-file . G4f5c) (read-char . G4f5b) (read . G4f5a) (peek-char . G4f59) (open-output-file . G4f58) (open-input-file . G4f57) (newline . G4f56) (display . G4f55) (close-output-port . G4f54) (close-input-port . G4f53) (eof-object? . G4f52) (eof-object . G4f51) (current-error-port . G4f50) (current-output-port . G4f4f) (current-input-port . G4f4e) (output-port? . G4f4d) (input-port? . G4f4c) (utf-8-codec . G4f4b) (utf-16-codec . G4f4a) (transcoder-error-handling-mode . G4f49) (transcoder-eol-style . G4f48) (transcoder-codec . G4f47) (transcoded-port . G4f46) (textual-port? . G4f45) (string->bytevector . G4f44) (standard-output-port . G4f43) (standard-input-port . G4f42) (standard-error-port . G4f41) (set-port-position! . G4f40) (put-u8 . G4f3f) (put-string . G4f3e) (put-datum . G4f3d) (put-char . G4f3c) (put-bytevector . G4f3b) (port? . G4f3a) (port-transcoder . G4f39) (port-position . G4f38) (port-has-set-port-position!? . G4f37) (port-has-port-position? . G4f36) (port-eof? . G4f35) (output-port-buffer-mode . G4f34) (open-string-output-port . G4f33) (open-string-input-port . G4f32) (open-file-output-port . G4f31) (open-file-input/output-port . G4f30) (open-file-input-port . G4f2f) (open-bytevector-output-port . G4f2e) (open-bytevector-input-port . G4f2d) (native-transcoder . G4f2c) (native-eol-style . G4f2b) (make-transcoder . G4f2a) (latin-1-codec . G4f29) (make-i/o-write-error . G4b71) (make-i/o-read-error . G4b5d) (make-i/o-port-error . G4c08) (make-i/o-invalid-position-error . G4b86) (make-i/o-filename-error . G4b9f) (make-i/o-file-protection-error . G4bb7) (make-i/o-file-is-read-only-error . G4bcb) (make-i/o-file-does-not-exist-error . G4bf3) (make-i/o-file-already-exists-error . G4bdf) (make-i/o-error . G4b49) (make-i/o-encoding-error . G4c35) (make-i/o-decoding-error . G4c20) (make-custom-textual-output-port . G4f28) (make-custom-textual-input/output-port . G4f27) (make-custom-textual-input-port . G4f26) (make-custom-binary-output-port . G4f25) (make-custom-binary-input/output-port . G4f24) (make-custom-binary-input-port . G4f23) (make-bytevector . G4f22) (lookahead-u8 . G4f21) (lookahead-char . G4f20) (i/o-write-error? . G4b73) (i/o-read-error? . G4b5f) (i/o-port-error? . G4c0c) (i/o-invalid-position-error? . G4b8a) (i/o-filename-error? . G4ba3) (i/o-file-protection-error? . G4bb9) (i/o-file-is-read-only-error? . G4bcd) (i/o-file-does-not-exist-error? . G4bf5) (i/o-file-already-exists-error? . G4be1) (i/o-error? . G4b4b) (i/o-error-port . G4c0e) (i/o-error-filename . G4ba5) (i/o-encoding-error? . G4c39) (i/o-encoding-error-char . G4c3b) (i/o-decoding-error? . G4c22) (get-u8 . G4f1f) (get-string-n! . G4f1e) (get-string-n . G4f1d) (get-string-all . G4f1c) (get-line . G4f1b) (get-datum . G4f1a) (get-char . G4f19) (get-bytevector-some . G4f18) (get-bytevector-n! . G4f17) (get-bytevector-n . G4f16) (get-bytevector-all . G4f15) (flush-output-port . G4f14) (close-port . G4f13) (scheme-report-environment . G308a) (quotient . G4f12) (null-environment . G3088) (remainder . G4f11) (modulo . G4f10) (inexact->exact . G4f0f) (force . G4f0e) (exact->inexact . G4f0d) (exit . G4f0c) (command-line . G4c94) (string-fill! . G4f0b) (string-set! . G4f0a) (set-cdr! . G4f09) (set-car! . G4f08) (remove . G4f07) (remv . G4f06) (remp . G4f05) (remq . G4f04) (partition . G4f03) (memv . G4f02) (memq . G4f01) (memp . G4f00) (member . G4eff) (exists . G4efe) (for-all . G4efd) (fold-right . G4efc) (fold-left . G4efb) (find . G4efa) (filter . G4ef9) (cons* . G4ef8) (assv . G4ef7) (assq . G4ef6) (assp . G4ef5) (assoc . G4ef4) (call-with-string-output-port . G4ef3) (call-with-port . G4ef2) (call-with-bytevector-output-port . G4ef1) (bytevector->string . G4ef0) (buffer-mode? . G4eef) (binary-port? . G4eee) (with-exception-handler . G4eed) (raise-continuable . G4eec) (raise . G4eeb) (eval . G308e) (environment . G3086) (make-enumeration . G4eea) (enum-set=? . G4ee9) (enum-set-universe . G4ee8) (enum-set-union . G4ee7) (enum-set-subset? . G4ee6) (enum-set-projection . G4ee5) (enum-set-member? . G4ee4) (enum-set-intersection . G4ee3) (enum-set-indexer . G4ee2) (enum-set-difference . G4ee1) (enum-set-constructor . G4ee0) (enum-set-complement . G4edf) (enum-set->list . G4ede) (who-condition? . G4a67) (warning? . G49e7) (violation? . G4a23) (undefined-violation? . G4ad7) (syntax-violation? . G4abf) (syntax-violation-subform . G4ac3) (syntax-violation-form . G4ac1) (syntax-violation . G30aa) (simple-conditions . G4edd) (serious-condition? . G49fb) (non-continuable-violation? . G4a7d) (message-condition? . G49d1) (make-who-condition . G4a63) (make-warning . G49e5) (make-violation . G4a21) (make-undefined-violation . G4ad5) (make-syntax-violation . G4ab9) (make-serious-condition . G49f9) (make-non-continuable-violation . G4a7b) (make-message-condition . G49cd) (make-lexical-violation . G4aa3) (make-irritants-condition . G4a4a) (make-implementation-restriction-violation . G4a8f) (make-error . G4a0d) (make-assertion-violation . G4a35) (lexical-violation? . G4aa5) (irritants-condition? . G4a4e) (implementation-restriction-violation? . G4a91) (error? . G4a0f) (condition-who . G4a69) (condition-predicate . G4edc) (condition-message . G49d3) (condition-irritants . G4a50) (condition-accessor . G4edb) (condition . G4eda) (assertion-violation? . G4a37) (condition? . G4ed9) (utf32->string . G4ed8) (utf16->string . G4ed7) (utf8->string . G4ed6) (uint-list->bytevector . G4ed5) (u8-list->bytevector . G4ed4) (string->utf8 . G4ed3) (string->utf32 . G4ed2) (string->utf16 . G4ed1) (sint-list->bytevector . G4ed0) (native-endianness . G4ecf) (bytevector? . G4ece) (bytevector=? . G4ecd) (bytevector-uint-set! . G4ecc) (bytevector-uint-ref . G4ecb) (bytevector-u8-set! . G4eca) (bytevector-u8-ref . G4ec9) (bytevector-u64-set! . G4ec8) (bytevector-u64-ref . G4ec7) (bytevector-u64-native-set! . G4ec6) (bytevector-u64-native-ref . G4ec5) (bytevector-u32-set! . G4ec4) (bytevector-u32-ref . G4ec3) (bytevector-u32-native-set! . G4ec2) (bytevector-u32-native-ref . G4ec1) (bytevector-u16-set! . G4ec0) (bytevector-u16-ref . G4ebf) (bytevector-u16-native-set! . G4ebe) (bytevector-u16-native-ref . G4ebd) (bytevector-sint-set! . G4ebc) (bytevector-sint-ref . G4ebb) (bytevector-s8-set! . G4eba) (bytevector-s8-ref . G4eb9) (bytevector-s64-set! . G4eb8) (bytevector-s64-ref . G4eb7) (bytevector-s64-native-set! . G4eb6) (bytevector-s64-native-ref . G4eb5) (bytevector-s32-set! . G4eb4) (bytevector-s32-ref . G4eb3) (bytevector-s32-native-set! . G4eb2) (bytevector-s32-native-ref . G4eb1) (bytevector-s16-set! . G4eb0) (bytevector-s16-ref . G4eaf) (bytevector-s16-native-set! . G4eae) (bytevector-s16-native-ref . G4ead) (bytevector-length . G4eac) (bytevector-ieee-single-ref . G4eab) (bytevector-ieee-single-native-set! . G4eaa) (bytevector-ieee-single-native-ref . G4ea9) (bytevector-ieee-double-ref . G4ea8) (bytevector-ieee-double-native-set! . G4ea7) (bytevector-ieee-double-native-ref . G4ea6) (bytevector-fill! . G4ea5) (bytevector-copy! . G4ea4) (bytevector-copy . G4ea3) (bytevector->uint-list . G4ea2) (bytevector->u8-list . G4ea1) (bytevector->sint-list . G4ea0) (no-nans-violation? . G4e9f) (no-infinities-violation? . G4e9e) (make-no-nans-violation . G4e9d) (make-no-infinities-violation . G4e9c) (real->flonum . G4e9b) (flzero? . G4e9a) (fltruncate . G4e99) (fltan . G4e98) (flsqrt . G4e97) (flsin . G4e96) (flround . G4e95) (flpositive? . G4e94) (flonum? . G4e93) (flodd? . G4e92) (flnumerator . G4e91) (flnegative? . G4e90) (flnan? . G4e8f) (flmod0 . G4e8e) (flmod . G4e8d) (flmin . G4e8c) (flmax . G4e8b) (fllog . G4e8a) (flinteger? . G4e89) (flinfinite? . G4e88) (flfloor . G4e87) (flfinite? . G4e86) (flexpt . G4e85) (flexp . G4e84) (fleven? . G4e83) (fldiv0-and-mod0 . G4e82) (fldiv0 . G4e81) (fldiv-and-mod . G4e80) (fldiv . G4e7f) (fldenominator . G4e7e) (flcos . G4e7d) (flceiling . G4e7c) (flatan . G4e7b) (flasin . G4e7a) (flacos . G4e79) (flabs . G4e78) (fl>? . G4e77) (fl>=? . G4e76) (fl=? . G4e75) (fl<? . G4e74) (fl<=? . G4e73) (fl/ . G4e72) (fl- . G4e71) (fl+ . G4e70) (fl* . G4e6f) (fixnum->flonum . G4e6e) (fxzero? . G4e6d) (fxxor . G4e6c) (fxrotate-bit-field . G4e6b) (fxreverse-bit-field . G4e6a) (fxpositive? . G4e69) (fxodd? . G4e68) (fxnot . G4e67) (fxnegative? . G4e66) (fxmod0 . G4e65) (fxmod . G4e64) (fxmin . G4e63) (fxmax . G4e62) (fxlength . G4e61) (fxior . G4e60) (fxif . G4e5f) (fxfirst-bit-set . G4e5e) (fxeven? . G4e5d) (fxdiv0-and-mod0 . G4e5c) (fxdiv0 . G4e5b) (fxdiv-and-mod . G4e5a) (fxdiv . G4e59) (fxcopy-bit-field . G4e58) (fxcopy-bit . G4e57) (fxbit-set? . G4e56) (fxbit-field . G4e55) (fxbit-count . G4e54) (fxarithmetic-shift-right . G4e53) (fxarithmetic-shift-left . G4e52) (fxarithmetic-shift . G4e51) (fxand . G4e50) (fx>? . G4e4f) (fx>=? . G4e4e) (fx=? . G4e4d) (fx<? . G4e4c) (fx<=? . G4e4b) (fx-/carry . G4e4a) (fx- . G4e49) (fx+/carry . G4e48) (fx+ . G4e47) (fx*/carry . G4e46) (fx* . G4e45) (greatest-fixnum . G4e44) (least-fixnum . G4e43) (fixnum-width . G4e42) (fixnum? . G4e41) (bitwise-rotate-bit-field . G4e40) (bitwise-reverse-bit-field . G4e3f) (bitwise-length . G4e3e) (bitwise-if . G4e3d) (bitwise-first-bit-set . G4e3c) (bitwise-copy-bit-field . G4e3b) (bitwise-copy-bit . G4e3a) (bitwise-bit-set? . G4e39) (bitwise-bit-field . G4e38) (bitwise-bit-count . G4e37) (bitwise-xor . G4e36) (bitwise-ior . G4e35) (bitwise-and . G4e34) (bitwise-not . G4e33) (bitwise-arithmetic-shift-right . G4e32) (bitwise-arithmetic-shift-left . G4e31) (bitwise-arithmetic-shift . G4e30) (zero? . G4e2f) (vector? . G4e2e) (vector-set! . G4e2d) (vector-ref . G4e2c) (vector-map . G4e2b) (vector-length . G4e2a) (vector-for-each . G4e29) (vector-fill! . G4e28) (vector->list . G4e27) (vector . G4e26) (values . G4e25) (truncate . G4e24) (tan . G4e23) (symbol? . G4e22) (symbol=? . G4e21) (symbol->string . G4e20) (substring . G4e1f) (string? . G4e1e) (string>? . G4e1d) (string>=? . G4e1c) (string=? . G4e1b) (string<? . G4e1a) (string<=? . G4e19) (string-ref . G4e18) (string-length . G4e17) (string-for-each . G4e16) (string-copy . G4e15) (string-append . G4e14) (string->symbol . G4e13) (string->number . G4e12) (string->list . G4e11) (string . G4e10) (sqrt . G4e0f) (sin . G4e0e) (round . G4e0d) (reverse . G4e0c) (real? . G4e0b) (real-valued? . G4e0a) (real-part . G4e09) (rationalize . G4e08) (rational? . G4e07) (rational-valued? . G4e06) (procedure? . G4e05) (positive? . G4e04) (pair? . G4e03) (odd? . G4e02) (numerator . G4e01) (number? . G4e00) (number->string . G4dff) (null? . G4dfe) (not . G4dfd) (negative? . G4dfc) (nan? . G4dfb) (min . G4dfa) (max . G4df9) (map . G4df8) (make-vector . G4df7) (make-string . G4df6) (make-rectangular . G4df5) (make-polar . G4df4) (magnitude . G4df3) (log . G4df2) (list? . G4df1) (list-tail . G4df0) (list-ref . G4def) (list->vector . G4dee) (list->string . G4ded) (list . G4dec) (length . G4deb) (lcm . G4dea) (integer? . G4de9) (integer-valued? . G4de8) (integer->char . G4de7) (infinite? . G4de6) (inexact? . G4de5) (inexact . G4de4) (imag-part . G4de3) (gcd . G4de2) (for-each . G4de1) (floor . G4de0) (finite? . G4ddf) (expt . G4dde) (exp . G4ddd) (exact? . G4ddc) (exact-integer-sqrt . G4ddb) (exact . G4dda) (even? . G4dd9) (error . G4dd8) (eqv? . G4dd7) (equal? . G4dd6) (eq? . G4dd5) (dynamic-wind . G4dd4) (div0-and-mod0 . G4dd3) (mod0 . G4dd2) (div0 . G4dd1) (div-and-mod . G4dd0) (mod . G4dcf) (div . G4dce) (denominator . G4dcd) (cos . G4dcc) (cons . G4dcb) (complex? . G4dca) (char? . G4dc9) (char>? . G4dc8) (char>=? . G4dc7) (char=? . G4dc6) (char<? . G4dc5) (char<=? . G4dc4) (char->integer . G4dc3) (ceiling . G4dc2) (call-with-values . G4dc1) (call/cc . G4dc0) (call-with-current-continuation . G4dbf) (cddddr . G4dbe) (cdddar . G4dbd) (cddadr . G4dbc) (cddaar . G4dbb) (cdaddr . G4dba) (cdadar . G4db9) (cdaadr . G4db8) (cdaaar . G4db7) (cadddr . G4db6) (caddar . G4db5) (cadadr . G4db4) (cadaar . G4db3) (caaddr . G4db2) (caadar . G4db1) (caaadr . G4db0) (caaaar . G4daf) (cdddr . G4dae) (cddar . G4dad) (cdadr . G4dac) (cdaar . G4dab) (caddr . G4daa) (cadar . G4da9) (caadr . G4da8) (caaar . G4da7) (cddr . G4da6) (cdar . G4da5) (cadr . G4da4) (caar . G4da3) (cdr . G4da2) (car . G4da1) (boolean? . G4da0) (boolean=? . G4d9f) (atan . G4d9e) (assertion-violation . G4d9d) (asin . G4d9c) (apply . G4d9b) (append . G4d9a) (angle . G4d99) (acos . G4d98) (abs . G4d97) (/ . G4d96) (* . G4d95) (- . G4d94) (+ . G4d93) (>= . G4d92) (> . G4d91) (= . G4d90) (<= . G4d8f) (< . G4d8e) (library . G4d8d) (export . G4d8c) (&no-nans . G4d8b) (&no-infinities . G4d8a) (&i/o-encoding . G4d89) (&i/o-decoding . G4d88) (&i/o-port . G4d87) (&i/o-file-does-not-exist . G4d86) (&i/o-file-already-exists . G4d85) (&i/o-file-is-read-only . G4d84) (&i/o-file-protection . G4d83) (&i/o-filename . G4d82) (&i/o-invalid-position . G4d81) (&i/o-write . G4d80) (&i/o-read . G4d7f) (&i/o . G4d7e) (&undefined . G4d7d) (&syntax . G4d7c) (&lexical . G4d7b) (&implementation-restriction . G4d7a) (&non-continuable . G4d79) (&who . G4d78) (&irritants . G4d77) (&assertion . G4d76) (&violation . G4d75) (&error . G4d74) (&serious . G4d73) (&warning . G4d72) (&message . G4d71) (&condition . G4d70) (define-condition-type . G4d6f) (define-enumeration . G4d6e) (define-record-type . G4d6d) (parent-rtd . G4d6c) (nongenerative . G4d6b) (opaque . G4d6a) (sealed . G4d69) (protocol . G4d68) (parent . G4d67) (immutable . G4d66) (mutable . G4d65) (fields . G4d64) (error-handling-mode . G4d63) (file-options . G4d62) (buffer-mode . G4d61) (eol-style . G4d60) (guard . G4d5f) (trace-define . G4d5e) (trace-lambda . G4d5d) (unsyntax-splicing . G4d5c) (unsyntax . G4d5b) (unquote-splicing . G4d5a) (unquote . G4d59) (_ . G4d58) (else . G4d57) (=> . G4d56) (... . G4d55) (assert . G4d54) (endianness . G4d53) (delay . G4d52) (time . G4d51) (or . G4d50) (and . G4d4f) (do . G4d4e) (cond . G4d4d) (let* . G4d4c) (let . G4d4b) (let*-values . G4d4a) (let-values . G4d49) (identifier-syntax . G4d48) (with-syntax . G4d47) (quasisyntax . G4d46) (quasiquote . G4d45) (syntax-rules . G4d44) (include . G4d43) (define-struct . G4d42) (record-constructor-descriptor . G4d41) (record-type-descriptor . G4d40) (case . G4d3f) (parameterize . G4d3e) (unless . G4d3d) (when . G4d3c) (if . G4d3b) (letrec* . G4d3a) (letrec . G4d39) (type-descriptor . G4d38) (case-lambda . G4d37) (lambda . G4d36) (syntax . G4d35) (syntax-case . G4d34) (quote . G4d33) (foreign-call . G4d32) (letrec-syntax . G4d31) (let-syntax . G4d30) (set! . G4d2f) (import . G4d2e) (begin . G4d2d) (module . G4d2c) (define-syntax . G4d2b) (define . G4d2a)) '((G5025 core-prim . &no-nans-rcd) (G5024 core-prim . &no-nans-rtd) (G5023 core-prim . &no-infinities-rcd) (G5022 core-prim . &no-infinities-rtd) (G5021 core-prim . &i/o-encoding-rcd) (G5020 core-prim . &i/o-encoding-rtd) (G501f core-prim . &i/o-decoding-rcd) (G501e core-prim . &i/o-decoding-rtd) (G501d core-prim . &i/o-port-rcd) (G501c core-prim . &i/o-port-rtd) (G501b core-prim . &i/o-file-does-not-exist-rcd) (G501a core-prim . &i/o-file-does-not-exist-rtd) (G5019 core-prim . &i/o-file-already-exists-rcd) (G5018 core-prim . &i/o-file-already-exists-rtd) (G5017 core-prim . &i/o-file-is-read-only-rcd) (G5016 core-prim . &i/o-file-is-read-only-rtd) (G5015 core-prim . &i/o-file-protection-rcd) (G5014 core-prim . &i/o-file-protection-rtd) (G5013 core-prim . &i/o-filename-rcd) (G5012 core-prim . &i/o-filename-rtd) (G5011 core-prim . &i/o-invalid-position-rcd) (G5010 core-prim . &i/o-invalid-position-rtd) (G500f core-prim . &i/o-write-rcd) (G500e core-prim . &i/o-write-rtd) (G500d core-prim . &i/o-read-rcd) (G500c core-prim . &i/o-read-rtd) (G500b core-prim . &i/o-rcd) (G500a core-prim . &i/o-rtd) (G5009 core-prim . &undefined-rcd) (G5008 core-prim . &undefined-rtd) (G5007 core-prim . &syntax-rcd) (G5006 core-prim . &syntax-rtd) (G5005 core-prim . &lexical-rcd) (G5004 core-prim . &lexical-rtd) (G5003 core-prim . &implementation-restriction-rcd) (G5002 core-prim . &implementation-restriction-rtd) (G5001 core-prim . &non-continuable-rcd) (G5000 core-prim . &non-continuable-rtd) (G4fff core-prim . &who-rcd) (G4ffe core-prim . &who-rtd) (G4ffd core-prim . &irritants-rcd) (G4ffc core-prim . &irritants-rtd) (G4ffb core-prim . &assertion-rcd) (G4ffa core-prim . &assertion-rtd) (G4ff9 core-prim . &violation-rcd) (G4ff8 core-prim . &violation-rtd) (G4ff7 core-prim . &error-rcd) (G4ff6 core-prim . &error-rtd) (G4ff5 core-prim . &serious-rcd) (G4ff4 core-prim . &serious-rtd) (G4ff3 core-prim . &warning-rcd) (G4ff2 core-prim . &warning-rtd) (G4ff1 core-prim . &message-rcd) (G4ff0 core-prim . &message-rtd) (G4fef core-prim . &condition-rcd) (G4fee core-prim . &condition-rtd) (G30a4 core-prim . syntax-error) (G2fc1 core-prim . syntax-dispatch) (G4fed core-prim . pretty-print) (G4fec core-prim . eval-core) (G4feb core-prim . set-symbol-value!) (G4fea core-prim . symbol-value) (G4fe9 core-prim . gensym) (G4fe8 core-prim . void) (G4c9a core-prim . load) (G30b6 core-prim . interaction-environment) (G4fe7 core-prim . char-ready?) (G4fe6 core-prim . regexp?) (G4fe5 core-prim . read-line) (G4fe4 core-prim . dotted-list?) (G4fe3 core-prim . circular-list?) (G4fe2 core-prim . proper-list?) (G4fe1 core-prim . circular-list) (G4fe0 core-prim . last) (G4fdf core-prim . last-pair) (G4fde core-prim . not-pair?) (G4fdd core-prim . split-at!) (G4fdc core-prim . split-at) (G4fdb core-prim . list=) (G4fda core-prim . list-copy) (G4fd9 core-prim . list-tabulate) (G4fd8 core-prim . make-list) (G4fd7 core-prim . xcons) (G4fd6 core-prim . tenth) (G4fd5 core-prim . ninth) (G4fd4 core-prim . eighth) (G4fd3 core-prim . seventh) (G4fd2 core-prim . sixth) (G4fd1 core-prim . fifth) (G4fd0 core-prim . drop-right!) (G4fcf core-prim . drop-right) (G4fce core-prim . take-right) (G4fcd core-prim . take!) (G4fcc core-prim . drop) (G4fcb core-prim . take) (G4fca core-prim . car+cdr) (G4fc9 core-prim . third) (G4fc8 core-prim . second) (G4fc7 core-prim . first) (G4fc6 core-prim . assoc-ref) (G4fc5 core-prim . alist-cons) (G4fc4 core-prim . print) (G4fc3 core-prim . format) (G4fc2 core-prim . standard-library-path) (G4fc1 core-prim . current-directory) (G4fc0 core-prim . write-to-file) (G4fbf core-prim . file->list) (G4fbe core-prim . file->string) (G4fbd core-prim . digit->integer) (G4fbc core-prim . call-with-string-input-port) (G4fbb core-prim . call-with-string-io) (G4fba core-prim . string-split) (G4fb9 core-prim . bytevector-for-each) (G4fb8 core-prim . string->regexp) (G4fb7 core-prim . rxmatch) (G4fb6 core-prim . regexp-replace-all) (G4fb5 core-prim . hashtable-for-each) (G4fb4 core-prim . readdir) (G4fb3 core-prim . get-environment-variables) (G4fb2 core-prim . get-environment-variable) (G4fb1 core-prim . get-command-line) (G4fb0 core-prim . sys-display) (G4faf core-prim . source-info) (G4fae core-prim . make-compiler-instruction) (G4fad core-prim . make-instruction) (G4fac core-prim . set-source-info!) (G4fab core-prim . fasl-write) (G4faa core-prim . receive) (G4fa9 core-prim . string-upcase) (G4fa8 core-prim . string-titlecase) (G4fa7 core-prim . string-normalize-nfkd) (G4fa6 core-prim . string-normalize-nfkc) (G4fa5 core-prim . string-normalize-nfd) (G4fa4 core-prim . string-normalize-nfc) (G4fa3 core-prim . string-foldcase) (G4fa2 core-prim . string-downcase) (G4fa1 core-prim . string-ci>?) (G4fa0 core-prim . string-ci>=?) (G4f9f core-prim . string-ci=?) (G4f9e core-prim . string-ci<?) (G4f9d core-prim . string-ci<=?) (G4f9c core-prim . char-whitespace?) (G4f9b core-prim . char-upper-case?) (G4f9a core-prim . char-title-case?) (G4f99 core-prim . char-numeric?) (G4f98 core-prim . char-lower-case?) (G4f97 core-prim . char-general-category) (G4f96 core-prim . char-upcase) (G4f95 core-prim . char-titlecase) (G4f94 core-prim . char-foldcase) (G4f93 core-prim . char-downcase) (G4f92 core-prim . char-ci>?) (G4f91 core-prim . char-ci>=?) (G4f90 core-prim . char-ci=?) (G4f8f core-prim . char-ci<?) (G4f8e core-prim . char-ci<=?) (G4f8d core-prim . char-alphabetic?) (G2dbf core-prim . make-variable-transformer) (G30ac core-prim . identifier?) (G309c core-prim . generate-temporaries) (G309e core-prim . free-identifier=?) (G30b0 core-prim . syntax->datum) (G30ae core-prim . datum->syntax) (G30a0 core-prim . bound-identifier=?) (G4f8c core-prim . record-type-descriptor?) (G4f8b core-prim . record-predicate) (G4f8a core-prim . record-mutator) (G4f89 core-prim . record-constructor) (G4f88 core-prim . record-accessor) (G4f87 core-prim . make-record-type-descriptor) (G4f86 core-prim . make-record-constructor-descriptor) (G4f85 core-prim . record?) (G4f84 core-prim . record-type-uid) (G4f83 core-prim . record-type-sealed?) (G4f82 core-prim . record-type-parent) (G4f81 core-prim . record-type-opaque?) (G4f80 core-prim . record-type-name) (G4f7f core-prim . record-type-generative?) (G4f7e core-prim . record-type-field-names) (G4f7d core-prim . record-rtd) (G4f7c core-prim . record-field-mutable?) (G4f7b core-prim . delete-file) (G4f7a core-prim . file-exists?) (G4f79 core-prim . vector-sort!) (G4f78 core-prim . vector-sort) (G4f77 core-prim . list-sort) (G4f76 core-prim . symbol-hash) (G4f75 core-prim . string-ci-hash) (G4f74 core-prim . string-hash) (G4f73 core-prim . equal-hash) (G4f72 core-prim . hashtable-equivalence-function) (G4f71 core-prim . make-hashtable) (G4f70 core-prim . hashtable-hash-function) (G4f6f core-prim . make-eqv-hashtable) (G4f6e core-prim . make-eq-hashtable) (G4f6d core-prim . hashtable?) (G4f6c core-prim . hashtable-update!) (G4f6b core-prim . hashtable-size) (G4f6a core-prim . hashtable-set!) (G4f69 core-prim . hashtable-ref) (G4f68 core-prim . hashtable-mutable?) (G4f67 core-prim . hashtable-keys) (G4f66 core-prim . hashtable-entries) (G4f65 core-prim . hashtable-delete!) (G4f64 core-prim . hashtable-copy) (G4f63 core-prim . hashtable-contains?) (G4f62 core-prim . hashtable-clear!) (G4f61 core-prim . call-with-output-file) (G4f60 core-prim . call-with-input-file) (G4f5f core-prim . write-char) (G4f5e core-prim . write) (G4f5d core-prim . with-output-to-file) (G4f5c core-prim . with-input-from-file) (G4f5b core-prim . read-char) (G4f5a core-prim . read) (G4f59 core-prim . peek-char) (G4f58 core-prim . open-output-file) (G4f57 core-prim . open-input-file) (G4f56 core-prim . newline) (G4f55 core-prim . display) (G4f54 core-prim . close-output-port) (G4f53 core-prim . close-input-port) (G4f52 core-prim . eof-object?) (G4f51 core-prim . eof-object) (G4f50 core-prim . current-error-port) (G4f4f core-prim . current-output-port) (G4f4e core-prim . current-input-port) (G4f4d core-prim . output-port?) (G4f4c core-prim . input-port?) (G4f4b core-prim . utf-8-codec) (G4f4a core-prim . utf-16-codec) (G4f49 core-prim . transcoder-error-handling-mode) (G4f48 core-prim . transcoder-eol-style) (G4f47 core-prim . transcoder-codec) (G4f46 core-prim . transcoded-port) (G4f45 core-prim . textual-port?) (G4f44 core-prim . string->bytevector) (G4f43 core-prim . standard-output-port) (G4f42 core-prim . standard-input-port) (G4f41 core-prim . standard-error-port) (G4f40 core-prim . set-port-position!) (G4f3f core-prim . put-u8) (G4f3e core-prim . put-string) (G4f3d core-prim . put-datum) (G4f3c core-prim . put-char) (G4f3b core-prim . put-bytevector) (G4f3a core-prim . port?) (G4f39 core-prim . port-transcoder) (G4f38 core-prim . port-position) (G4f37 core-prim . port-has-set-port-position!?) (G4f36 core-prim . port-has-port-position?) (G4f35 core-prim . port-eof?) (G4f34 core-prim . output-port-buffer-mode) (G4f33 core-prim . open-string-output-port) (G4f32 core-prim . open-string-input-port) (G4f31 core-prim . open-file-output-port) (G4f30 core-prim . open-file-input/output-port) (G4f2f core-prim . open-file-input-port) (G4f2e core-prim . open-bytevector-output-port) (G4f2d core-prim . open-bytevector-input-port) (G4f2c core-prim . native-transcoder) (G4f2b core-prim . native-eol-style) (G4f2a core-prim . make-transcoder) (G4f29 core-prim . latin-1-codec) (G4b71 core-prim . make-i/o-write-error) (G4b5d core-prim . make-i/o-read-error) (G4c08 core-prim . make-i/o-port-error) (G4b86 core-prim . make-i/o-invalid-position-error) (G4b9f core-prim . make-i/o-filename-error) (G4bb7 core-prim . make-i/o-file-protection-error) (G4bcb core-prim . make-i/o-file-is-read-only-error) (G4bf3 core-prim . make-i/o-file-does-not-exist-error) (G4bdf core-prim . make-i/o-file-already-exists-error) (G4b49 core-prim . make-i/o-error) (G4c35 core-prim . make-i/o-encoding-error) (G4c20 core-prim . make-i/o-decoding-error) (G4f28 core-prim . make-custom-textual-output-port) (G4f27 core-prim . make-custom-textual-input/output-port) (G4f26 core-prim . make-custom-textual-input-port) (G4f25 core-prim . make-custom-binary-output-port) (G4f24 core-prim . make-custom-binary-input/output-port) (G4f23 core-prim . make-custom-binary-input-port) (G4f22 core-prim . make-bytevector) (G4f21 core-prim . lookahead-u8) (G4f20 core-prim . lookahead-char) (G4b73 core-prim . i/o-write-error?) (G4b5f core-prim . i/o-read-error?) (G4c0c core-prim . i/o-port-error?) (G4b8a core-prim . i/o-invalid-position-error?) (G4ba3 core-prim . i/o-filename-error?) (G4bb9 core-prim . i/o-file-protection-error?) (G4bcd core-prim . i/o-file-is-read-only-error?) (G4bf5 core-prim . i/o-file-does-not-exist-error?) (G4be1 core-prim . i/o-file-already-exists-error?) (G4b4b core-prim . i/o-error?) (G4c0e core-prim . i/o-error-port) (G4ba5 core-prim . i/o-error-filename) (G4c39 core-prim . i/o-encoding-error?) (G4c3b core-prim . i/o-encoding-error-char) (G4c22 core-prim . i/o-decoding-error?) (G4f1f core-prim . get-u8) (G4f1e core-prim . get-string-n!) (G4f1d core-prim . get-string-n) (G4f1c core-prim . get-string-all) (G4f1b core-prim . get-line) (G4f1a core-prim . get-datum) (G4f19 core-prim . get-char) (G4f18 core-prim . get-bytevector-some) (G4f17 core-prim . get-bytevector-n!) (G4f16 core-prim . get-bytevector-n) (G4f15 core-prim . get-bytevector-all) (G4f14 core-prim . flush-output-port) (G4f13 core-prim . close-port) (G308a core-prim . scheme-report-environment) (G4f12 core-prim . quotient) (G3088 core-prim . null-environment) (G4f11 core-prim . remainder) (G4f10 core-prim . modulo) (G4f0f core-prim . inexact->exact) (G4f0e core-prim . force) (G4f0d core-prim . exact->inexact) (G4f0c core-prim . exit) (G4c94 core-prim . command-line) (G4f0b core-prim . string-fill!) (G4f0a core-prim . string-set!) (G4f09 core-prim . set-cdr!) (G4f08 core-prim . set-car!) (G4f07 core-prim . remove) (G4f06 core-prim . remv) (G4f05 core-prim . remp) (G4f04 core-prim . remq) (G4f03 core-prim . partition) (G4f02 core-prim . memv) (G4f01 core-prim . memq) (G4f00 core-prim . memp) (G4eff core-prim . member) (G4efe core-prim . exists) (G4efd core-prim . for-all) (G4efc core-prim . fold-right) (G4efb core-prim . fold-left) (G4efa core-prim . find) (G4ef9 core-prim . filter) (G4ef8 core-prim . cons*) (G4ef7 core-prim . assv) (G4ef6 core-prim . assq) (G4ef5 core-prim . assp) (G4ef4 core-prim . assoc) (G4ef3 core-prim . call-with-string-output-port) (G4ef2 core-prim . call-with-port) (G4ef1 core-prim . call-with-bytevector-output-port) (G4ef0 core-prim . bytevector->string) (G4eef core-prim . buffer-mode?) (G4eee core-prim . binary-port?) (G4eed core-prim . with-exception-handler) (G4eec core-prim . raise-continuable) (G4eeb core-prim . raise) (G308e core-prim . eval) (G3086 core-prim . environment) (G4eea core-prim . make-enumeration) (G4ee9 core-prim . enum-set=?) (G4ee8 core-prim . enum-set-universe) (G4ee7 core-prim . enum-set-union) (G4ee6 core-prim . enum-set-subset?) (G4ee5 core-prim . enum-set-projection) (G4ee4 core-prim . enum-set-member?) (G4ee3 core-prim . enum-set-intersection) (G4ee2 core-prim . enum-set-indexer) (G4ee1 core-prim . enum-set-difference) (G4ee0 core-prim . enum-set-constructor) (G4edf core-prim . enum-set-complement) (G4ede core-prim . enum-set->list) (G4a67 core-prim . who-condition?) (G49e7 core-prim . warning?) (G4a23 core-prim . violation?) (G4ad7 core-prim . undefined-violation?) (G4abf core-prim . syntax-violation?) (G4ac3 core-prim . syntax-violation-subform) (G4ac1 core-prim . syntax-violation-form) (G30aa core-prim . syntax-violation) (G4edd core-prim . simple-conditions) (G49fb core-prim . serious-condition?) (G4a7d core-prim . non-continuable-violation?) (G49d1 core-prim . message-condition?) (G4a63 core-prim . make-who-condition) (G49e5 core-prim . make-warning) (G4a21 core-prim . make-violation) (G4ad5 core-prim . make-undefined-violation) (G4ab9 core-prim . make-syntax-violation) (G49f9 core-prim . make-serious-condition) (G4a7b core-prim . make-non-continuable-violation) (G49cd core-prim . make-message-condition) (G4aa3 core-prim . make-lexical-violation) (G4a4a core-prim . make-irritants-condition) (G4a8f core-prim . make-implementation-restriction-violation) (G4a0d core-prim . make-error) (G4a35 core-prim . make-assertion-violation) (G4aa5 core-prim . lexical-violation?) (G4a4e core-prim . irritants-condition?) (G4a91 core-prim . implementation-restriction-violation?) (G4a0f core-prim . error?) (G4a69 core-prim . condition-who) (G4edc core-prim . condition-predicate) (G49d3 core-prim . condition-message) (G4a50 core-prim . condition-irritants) (G4edb core-prim . condition-accessor) (G4eda core-prim . condition) (G4a37 core-prim . assertion-violation?) (G4ed9 core-prim . condition?) (G4ed8 core-prim . utf32->string) (G4ed7 core-prim . utf16->string) (G4ed6 core-prim . utf8->string) (G4ed5 core-prim . uint-list->bytevector) (G4ed4 core-prim . u8-list->bytevector) (G4ed3 core-prim . string->utf8) (G4ed2 core-prim . string->utf32) (G4ed1 core-prim . string->utf16) (G4ed0 core-prim . sint-list->bytevector) (G4ecf core-prim . native-endianness) (G4ece core-prim . bytevector?) (G4ecd core-prim . bytevector=?) (G4ecc core-prim . bytevector-uint-set!) (G4ecb core-prim . bytevector-uint-ref) (G4eca core-prim . bytevector-u8-set!) (G4ec9 core-prim . bytevector-u8-ref) (G4ec8 core-prim . bytevector-u64-set!) (G4ec7 core-prim . bytevector-u64-ref) (G4ec6 core-prim . bytevector-u64-native-set!) (G4ec5 core-prim . bytevector-u64-native-ref) (G4ec4 core-prim . bytevector-u32-set!) (G4ec3 core-prim . bytevector-u32-ref) (G4ec2 core-prim . bytevector-u32-native-set!) (G4ec1 core-prim . bytevector-u32-native-ref) (G4ec0 core-prim . bytevector-u16-set!) (G4ebf core-prim . bytevector-u16-ref) (G4ebe core-prim . bytevector-u16-native-set!) (G4ebd core-prim . bytevector-u16-native-ref) (G4ebc core-prim . bytevector-sint-set!) (G4ebb core-prim . bytevector-sint-ref) (G4eba core-prim . bytevector-s8-set!) (G4eb9 core-prim . bytevector-s8-ref) (G4eb8 core-prim . bytevector-s64-set!) (G4eb7 core-prim . bytevector-s64-ref) (G4eb6 core-prim . bytevector-s64-native-set!) (G4eb5 core-prim . bytevector-s64-native-ref) (G4eb4 core-prim . bytevector-s32-set!) (G4eb3 core-prim . bytevector-s32-ref) (G4eb2 core-prim . bytevector-s32-native-set!) (G4eb1 core-prim . bytevector-s32-native-ref) (G4eb0 core-prim . bytevector-s16-set!) (G4eaf core-prim . bytevector-s16-ref) (G4eae core-prim . bytevector-s16-native-set!) (G4ead core-prim . bytevector-s16-native-ref) (G4eac core-prim . bytevector-length) (G4eab core-prim . bytevector-ieee-single-ref) (G4eaa core-prim . bytevector-ieee-single-native-set!) (G4ea9 core-prim . bytevector-ieee-single-native-ref) (G4ea8 core-prim . bytevector-ieee-double-ref) (G4ea7 core-prim . bytevector-ieee-double-native-set!) (G4ea6 core-prim . bytevector-ieee-double-native-ref) (G4ea5 core-prim . bytevector-fill!) (G4ea4 core-prim . bytevector-copy!) (G4ea3 core-prim . bytevector-copy) (G4ea2 core-prim . bytevector->uint-list) (G4ea1 core-prim . bytevector->u8-list) (G4ea0 core-prim . bytevector->sint-list) (G4e9f core-prim . no-nans-violation?) (G4e9e core-prim . no-infinities-violation?) (G4e9d core-prim . make-no-nans-violation) (G4e9c core-prim . make-no-infinities-violation) (G4e9b core-prim . real->flonum) (G4e9a core-prim . flzero?) (G4e99 core-prim . fltruncate) (G4e98 core-prim . fltan) (G4e97 core-prim . flsqrt) (G4e96 core-prim . flsin) (G4e95 core-prim . flround) (G4e94 core-prim . flpositive?) (G4e93 core-prim . flonum?) (G4e92 core-prim . flodd?) (G4e91 core-prim . flnumerator) (G4e90 core-prim . flnegative?) (G4e8f core-prim . flnan?) (G4e8e core-prim . flmod0) (G4e8d core-prim . flmod) (G4e8c core-prim . flmin) (G4e8b core-prim . flmax) (G4e8a core-prim . fllog) (G4e89 core-prim . flinteger?) (G4e88 core-prim . flinfinite?) (G4e87 core-prim . flfloor) (G4e86 core-prim . flfinite?) (G4e85 core-prim . flexpt) (G4e84 core-prim . flexp) (G4e83 core-prim . fleven?) (G4e82 core-prim . fldiv0-and-mod0) (G4e81 core-prim . fldiv0) (G4e80 core-prim . fldiv-and-mod) (G4e7f core-prim . fldiv) (G4e7e core-prim . fldenominator) (G4e7d core-prim . flcos) (G4e7c core-prim . flceiling) (G4e7b core-prim . flatan) (G4e7a core-prim . flasin) (G4e79 core-prim . flacos) (G4e78 core-prim . flabs) (G4e77 core-prim . fl>?) (G4e76 core-prim . fl>=?) (G4e75 core-prim . fl=?) (G4e74 core-prim . fl<?) (G4e73 core-prim . fl<=?) (G4e72 core-prim . fl/) (G4e71 core-prim . fl-) (G4e70 core-prim . fl+) (G4e6f core-prim . fl*) (G4e6e core-prim . fixnum->flonum) (G4e6d core-prim . fxzero?) (G4e6c core-prim . fxxor) (G4e6b core-prim . fxrotate-bit-field) (G4e6a core-prim . fxreverse-bit-field) (G4e69 core-prim . fxpositive?) (G4e68 core-prim . fxodd?) (G4e67 core-prim . fxnot) (G4e66 core-prim . fxnegative?) (G4e65 core-prim . fxmod0) (G4e64 core-prim . fxmod) (G4e63 core-prim . fxmin) (G4e62 core-prim . fxmax) (G4e61 core-prim . fxlength) (G4e60 core-prim . fxior) (G4e5f core-prim . fxif) (G4e5e core-prim . fxfirst-bit-set) (G4e5d core-prim . fxeven?) (G4e5c core-prim . fxdiv0-and-mod0) (G4e5b core-prim . fxdiv0) (G4e5a core-prim . fxdiv-and-mod) (G4e59 core-prim . fxdiv) (G4e58 core-prim . fxcopy-bit-field) (G4e57 core-prim . fxcopy-bit) (G4e56 core-prim . fxbit-set?) (G4e55 core-prim . fxbit-field) (G4e54 core-prim . fxbit-count) (G4e53 core-prim . fxarithmetic-shift-right) (G4e52 core-prim . fxarithmetic-shift-left) (G4e51 core-prim . fxarithmetic-shift) (G4e50 core-prim . fxand) (G4e4f core-prim . fx>?) (G4e4e core-prim . fx>=?) (G4e4d core-prim . fx=?) (G4e4c core-prim . fx<?) (G4e4b core-prim . fx<=?) (G4e4a core-prim . fx-/carry) (G4e49 core-prim . fx-) (G4e48 core-prim . fx+/carry) (G4e47 core-prim . fx+) (G4e46 core-prim . fx*/carry) (G4e45 core-prim . fx*) (G4e44 core-prim . greatest-fixnum) (G4e43 core-prim . least-fixnum) (G4e42 core-prim . fixnum-width) (G4e41 core-prim . fixnum?) (G4e40 core-prim . bitwise-rotate-bit-field) (G4e3f core-prim . bitwise-reverse-bit-field) (G4e3e core-prim . bitwise-length) (G4e3d core-prim . bitwise-if) (G4e3c core-prim . bitwise-first-bit-set) (G4e3b core-prim . bitwise-copy-bit-field) (G4e3a core-prim . bitwise-copy-bit) (G4e39 core-prim . bitwise-bit-set?) (G4e38 core-prim . bitwise-bit-field) (G4e37 core-prim . bitwise-bit-count) (G4e36 core-prim . bitwise-xor) (G4e35 core-prim . bitwise-ior) (G4e34 core-prim . bitwise-and) (G4e33 core-prim . bitwise-not) (G4e32 core-prim . bitwise-arithmetic-shift-right) (G4e31 core-prim . bitwise-arithmetic-shift-left) (G4e30 core-prim . bitwise-arithmetic-shift) (G4e2f core-prim . zero?) (G4e2e core-prim . vector?) (G4e2d core-prim . vector-set!) (G4e2c core-prim . vector-ref) (G4e2b core-prim . vector-map) (G4e2a core-prim . vector-length) (G4e29 core-prim . vector-for-each) (G4e28 core-prim . vector-fill!) (G4e27 core-prim . vector->list) (G4e26 core-prim . vector) (G4e25 core-prim . values) (G4e24 core-prim . truncate) (G4e23 core-prim . tan) (G4e22 core-prim . symbol?) (G4e21 core-prim . symbol=?) (G4e20 core-prim . symbol->string) (G4e1f core-prim . substring) (G4e1e core-prim . string?) (G4e1d core-prim . string>?) (G4e1c core-prim . string>=?) (G4e1b core-prim . string=?) (G4e1a core-prim . string<?) (G4e19 core-prim . string<=?) (G4e18 core-prim . string-ref) (G4e17 core-prim . string-length) (G4e16 core-prim . string-for-each) (G4e15 core-prim . string-copy) (G4e14 core-prim . string-append) (G4e13 core-prim . string->symbol) (G4e12 core-prim . string->number) (G4e11 core-prim . string->list) (G4e10 core-prim . string) (G4e0f core-prim . sqrt) (G4e0e core-prim . sin) (G4e0d core-prim . round) (G4e0c core-prim . reverse) (G4e0b core-prim . real?) (G4e0a core-prim . real-valued?) (G4e09 core-prim . real-part) (G4e08 core-prim . rationalize) (G4e07 core-prim . rational?) (G4e06 core-prim . rational-valued?) (G4e05 core-prim . procedure?) (G4e04 core-prim . positive?) (G4e03 core-prim . pair?) (G4e02 core-prim . odd?) (G4e01 core-prim . numerator) (G4e00 core-prim . number?) (G4dff core-prim . number->string) (G4dfe core-prim . null?) (G4dfd core-prim . not) (G4dfc core-prim . negative?) (G4dfb core-prim . nan?) (G4dfa core-prim . min) (G4df9 core-prim . max) (G4df8 core-prim . map) (G4df7 core-prim . make-vector) (G4df6 core-prim . make-string) (G4df5 core-prim . make-rectangular) (G4df4 core-prim . make-polar) (G4df3 core-prim . magnitude) (G4df2 core-prim . log) (G4df1 core-prim . list?) (G4df0 core-prim . list-tail) (G4def core-prim . list-ref) (G4dee core-prim . list->vector) (G4ded core-prim . list->string) (G4dec core-prim . list) (G4deb core-prim . length) (G4dea core-prim . lcm) (G4de9 core-prim . integer?) (G4de8 core-prim . integer-valued?) (G4de7 core-prim . integer->char) (G4de6 core-prim . infinite?) (G4de5 core-prim . inexact?) (G4de4 core-prim . inexact) (G4de3 core-prim . imag-part) (G4de2 core-prim . gcd) (G4de1 core-prim . for-each) (G4de0 core-prim . floor) (G4ddf core-prim . finite?) (G4dde core-prim . expt) (G4ddd core-prim . exp) (G4ddc core-prim . exact?) (G4ddb core-prim . exact-integer-sqrt) (G4dda core-prim . exact) (G4dd9 core-prim . even?) (G4dd8 core-prim . error) (G4dd7 core-prim . eqv?) (G4dd6 core-prim . equal?) (G4dd5 core-prim . eq?) (G4dd4 core-prim . dynamic-wind) (G4dd3 core-prim . div0-and-mod0) (G4dd2 core-prim . mod0) (G4dd1 core-prim . div0) (G4dd0 core-prim . div-and-mod) (G4dcf core-prim . mod) (G4dce core-prim . div) (G4dcd core-prim . denominator) (G4dcc core-prim . cos) (G4dcb core-prim . cons) (G4dca core-prim . complex?) (G4dc9 core-prim . char?) (G4dc8 core-prim . char>?) (G4dc7 core-prim . char>=?) (G4dc6 core-prim . char=?) (G4dc5 core-prim . char<?) (G4dc4 core-prim . char<=?) (G4dc3 core-prim . char->integer) (G4dc2 core-prim . ceiling) (G4dc1 core-prim . call-with-values) (G4dc0 core-prim . call/cc) (G4dbf core-prim . call-with-current-continuation) (G4dbe core-prim . cddddr) (G4dbd core-prim . cdddar) (G4dbc core-prim . cddadr) (G4dbb core-prim . cddaar) (G4dba core-prim . cdaddr) (G4db9 core-prim . cdadar) (G4db8 core-prim . cdaadr) (G4db7 core-prim . cdaaar) (G4db6 core-prim . cadddr) (G4db5 core-prim . caddar) (G4db4 core-prim . cadadr) (G4db3 core-prim . cadaar) (G4db2 core-prim . caaddr) (G4db1 core-prim . caadar) (G4db0 core-prim . caaadr) (G4daf core-prim . caaaar) (G4dae core-prim . cdddr) (G4dad core-prim . cddar) (G4dac core-prim . cdadr) (G4dab core-prim . cdaar) (G4daa core-prim . caddr) (G4da9 core-prim . cadar) (G4da8 core-prim . caadr) (G4da7 core-prim . caaar) (G4da6 core-prim . cddr) (G4da5 core-prim . cdar) (G4da4 core-prim . cadr) (G4da3 core-prim . caar) (G4da2 core-prim . cdr) (G4da1 core-prim . car) (G4da0 core-prim . boolean?) (G4d9f core-prim . boolean=?) (G4d9e core-prim . atan) (G4d9d core-prim . assertion-violation) (G4d9c core-prim . asin) (G4d9b core-prim . apply) (G4d9a core-prim . append) (G4d99 core-prim . angle) (G4d98 core-prim . acos) (G4d97 core-prim . abs) (G4d96 core-prim . /) (G4d95 core-prim . *) (G4d94 core-prim . -) (G4d93 core-prim . +) (G4d92 core-prim . >=) (G4d91 core-prim . >) (G4d90 core-prim . =) (G4d8f core-prim . <=) (G4d8e core-prim . <) (G4d8d core-prim . library) (G4d8c core-prim . export) (G4d8b $core-rtd &no-nans-rtd &no-nans-rcd) (G4d8a $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4d89 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4d88 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4d87 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4d86 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4d85 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4d84 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4d83 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4d82 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4d81 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4d80 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4d7f $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4d7e $core-rtd &i/o-rtd &i/o-rcd) (G4d7d $core-rtd &undefined-rtd &undefined-rcd) (G4d7c $core-rtd &syntax-rtd &syntax-rcd) (G4d7b $core-rtd &lexical-rtd &lexical-rcd) (G4d7a $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4d79 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4d78 $core-rtd &who-rtd &who-rcd) (G4d77 $core-rtd &irritants-rtd &irritants-rcd) (G4d76 $core-rtd &assertion-rtd &assertion-rcd) (G4d75 $core-rtd &violation-rtd &violation-rcd) (G4d74 $core-rtd &error-rtd &error-rcd) (G4d73 $core-rtd &serious-rtd &serious-rcd) (G4d72 $core-rtd &warning-rtd &warning-rcd) (G4d71 $core-rtd &message-rtd &message-rcd) (G4d70 $core-rtd &condition-rtd &condition-rcd) (G4d6f macro . define-condition-type) (G4d6e macro . define-enumeration) (G4d6d macro . define-record-type) (G4d6c macro . parent-rtd) (G4d6b macro . nongenerative) (G4d6a macro . opaque) (G4d69 macro . sealed) (G4d68 macro . protocol) (G4d67 macro . parent) (G4d66 macro . immutable) (G4d65 macro . mutable) (G4d64 macro . fields) (G4d63 macro . error-handling-mode) (G4d62 macro . file-options) (G4d61 macro . buffer-mode) (G4d60 macro . eol-style) (G4d5f macro . guard) (G4d5e macro . trace-define) (G4d5d macro . trace-lambda) (G4d5c macro . unsyntax-splicing) (G4d5b macro . unsyntax) (G4d5a macro . unquote-splicing) (G4d59 macro . unquote) (G4d58 macro . _) (G4d57 macro . else) (G4d56 macro . =>) (G4d55 macro . ...) (G4d54 macro . assert) (G4d53 macro . endianness) (G4d52 macro . delay) (G4d51 macro . time) (G4d50 macro . or) (G4d4f macro . and) (G4d4e macro . do) (G4d4d macro . cond) (G4d4c macro . let*) (G4d4b macro . let) (G4d4a macro . let*-values) (G4d49 macro . let-values) (G4d48 macro . identifier-syntax) (G4d47 macro . with-syntax) (G4d46 macro . quasisyntax) (G4d45 macro . quasiquote) (G4d44 macro . syntax-rules) (G4d43 macro . include) (G4d42 macro . define-struct) (G4d41 core-macro . record-constructor-descriptor) (G4d40 core-macro . record-type-descriptor) (G4d3f core-macro . case) (G4d3e core-macro . parameterize) (G4d3d core-macro . unless) (G4d3c core-macro . when) (G4d3b core-macro . if) (G4d3a core-macro . letrec*) (G4d39 core-macro . letrec) (G4d38 core-macro . type-descriptor) (G4d37 core-macro . case-lambda) (G4d36 core-macro . lambda) (G4d35 core-macro . syntax) (G4d34 core-macro . syntax-case) (G4d33 core-macro . quote) (G4d32 core-macro . foreign-call) (G4d31 letrec-syntax) (G4d30 let-syntax) (G4d2f set!) (G4d2e import) (G4d2d begin) (G4d2c module) (G4d2b define-syntax) (G4d2a define)) values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G5046 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G4fed) (eval-core . G4fec) (set-symbol-value! . G4feb) (symbol-value . G4fea) (gensym . G4fe9) (void . G4fe8)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G5047 '(mosh) '() '() '() '() '((symbol-value . G4fea) (standard-library-path . G4fc2) (get-command-line . G4fb1) (sys-display . G4fb0) (source-info . G4faf) (make-compiler-instruction . G4fae) (make-instruction . G4fad) (set-source-info! . G4fac) (fasl-write . G4fab) (include . G4d43)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G5048 '(mosh backend) '() '() '() '() '((receive . G4faa)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G5049 '(mosh file) '() '() '() '() '((read-line . G4fe5) (current-directory . G4fc1) (write-to-file . G4fc0) (file->list . G4fbf) (file->string . G4fbe)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G504a '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G4fb9)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G504b '(mosh number) '() '() '() '() '((digit->integer . G4fbd)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G504c '(mosh string) '() '() '() '() '((print . G4fc4) (format . G4fc3) (call-with-string-input-port . G4fbc) (call-with-string-io . G4fbb) (string-split . G4fba) (string->regexp . G4fb8)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G504d '(mosh list) '() '() '() '() '((assoc-ref . G4fc6)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G504e '(mosh regexp) '() '() '() '() '((rxmatch . G4fb7) (regexp-replace-all . G4fb6)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G504f '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G4fb5)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G5050 '(system) '() '() '() '() '((readdir . G4fb4) (get-environment-variables . G4fb3) (get-environment-variable . G4fb2)) '() values values '#f '#f '#f '#f) (G2b7c@G2a12@install-library 'G5051 '(srfi :1) '() '() '() '() '((dotted-list? . G4fe4) (circular-list? . G4fe3) (proper-list? . G4fe2) (circular-list . G4fe1) (last . G4fe0) (last-pair . G4fdf) (not-pair? . G4fde) (split-at! . G4fdd) (split-at . G4fdc) (list= . G4fdb) (list-copy . G4fda) (list-tabulate . G4fd9) (make-list . G4fd8) (xcons . G4fd7) (tenth . G4fd6) (ninth . G4fd5) (eighth . G4fd4) (seventh . G4fd3) (sixth . G4fd2) (fifth . G4fd1) (drop-right! . G4fd0) (drop-right . G4fcf) (take-right . G4fce) (take! . G4fcd) (drop . G4fcc) (take . G4fcb) (car+cdr . G4fca) (third . G4fc9) (second . G4fc8) (first . G4fc7) (alist-cons . G4fc5)) '() values values '#f '#f '#f '#f))
((lambda (G4c8f@for-each-with-index G4c91@repl G4c93@trace-printer G4c95@command-line G4c97@local-library-path G4c99@load/args G4c9b@load G4c9d@ironscheme-build G4c9f@eval-top-level G4ca1@compile-system-libraries G4ca3@compile G4ca5@compile->closure G4ca7@load-r6rs-top-level G4ca9@write-record) (begin (set! G4c8f@for-each-with-index (lambda (G4cbd@proc G4cbe@lst) (letrec ((G4cc1@loop (lambda (G4cc3@i G4cc4@lst) (if (null? G4cc4@lst) (if '#f '#f (void)) (begin (G4cbd@proc G4cc3@i (car G4cc4@lst)) (G4cc1@loop (+ G4cc3@i '1) (cdr G4cc4@lst))))))) (G4cc1@loop '1 G4cbe@lst)))) (set! G4c91@repl (lambda G4cc7@x ((lambda (G4cca@rec) (begin (set! G4cca@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4ccc@G4ccb) (with-exception-handler (lambda (G4cce@e) (G4ccc@G4ccb (if '#t (G4c8f@for-each-with-index (lambda (G4cd0@i G4cd1@x) ((lambda (G4cd4@rtd) (begin (format '#t '"   ~d. ~a" G4cd0@i (record-type-name G4cd4@rtd)) ((lambda (G4cd6@v) ((lambda (G4cd8@t) (if (eqv? G4cd8@t '0) (newline) (if (eqv? G4cd8@t '1) (begin (display '": ") (write ((record-accessor G4cd4@rtd '0) G4cd1@x)) (newline)) (begin (display '":\n") ((letrec ((G4cd9@f (lambda (G4cdb@i) (if (= G4cdb@i (vector-length G4cd6@v)) (void) (begin (display '"       ") (display (vector-ref G4cd6@v G4cdb@i)) (display '": ") (write ((record-accessor G4cd4@rtd G4cdb@i) G4cd1@x)) (newline) (G4cd9@f (+ G4cdb@i '1))))))) G4cd9@f) '0))))) (vector-length G4cd6@v))) (record-type-field-names G4cd4@rtd)))) (record-rtd G4cd1@x))) (simple-conditions G4cce@e)) (raise G4cce@e)))) (lambda () (begin '#f ((lambda (G4cdd@line) (if (eof-object? G4cdd@line) (exit) (write (G4c9f@eval-top-level (call-with-port (open-string-input-port G4cdd@line) read))))) (get-line (current-input-port)))))))) (newline) (G4cca@rec)))) (G4cca@rec))) '#f))) (set! G4c93@trace-printer (G28df@G2812@make-parameter write)) (set! G4c95@command-line (G28df@G2812@make-parameter (get-command-line))) (set! G4c97@local-library-path (lambda (G4cdf@filename) (cons '"." (G2b6c@G29f2@library-path)))) (set! G4c99@load/args (lambda (G4ce1@filename . G4ce3@args) (begin (apply G4ca7@load-r6rs-top-level G4ce1@filename 'load G4ce3@args) (void)))) (set! G4c9b@load (lambda (G4ce5@filename) (begin (apply G4ca7@load-r6rs-top-level G4ce5@filename 'load (G4c95@command-line)) (void)))) (set! G4c9d@ironscheme-build (lambda () (G4c9b@load '"ironscheme-buildscript.ss"))) (set! G4c9f@eval-top-level (lambda (G4ce7@x) (G498d@G308f@eval G4ce7@x (G49a1@G30b7@interaction-environment)))) (set! G4ca1@compile-system-libraries (lambda () (G4c9f@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4ca3@compile (lambda (G4ce9@filename) (G4ca7@load-r6rs-top-level G4ce9@filename 'compile))) (set! G4ca5@compile->closure (lambda (G4ceb@filename) (G4ca7@load-r6rs-top-level G4ceb@filename 'closure))) (set! G4ca7@load-r6rs-top-level (lambda (G4ced@filename G4cee@how . G4cf1@args) ((lambda (G4cf5@G4cf3@library-path G4cf6@G4cf4@library-path) ((lambda (G4cf9@swap) (dynamic-wind G4cf9@swap (lambda () ((lambda (G4cfb@x*) ((lambda (G4cfd@t) (if (eqv? G4cfd@t 'closure) (G49a0@G30b5@pre-compile-r6rs-top-level G4cfb@x*) (if (eqv? G4cfd@t 'load) ((lambda (G4d00@G4cfe@command-line G4d01@G4cff@command-line) ((lambda (G4d04@swap) (dynamic-wind G4d04@swap (lambda () ((G499f@G30b3@compile-r6rs-top-level G4cfb@x*))) G4d04@swap)) (lambda () ((lambda (G4d06@t) (begin (G4d00@G4cfe@command-line G4d01@G4cff@command-line) (set! G4d01@G4cff@command-line G4d06@t))) (G4d00@G4cfe@command-line))))) G4c95@command-line (cons G4ced@filename (car G4cf1@args))) (if (eqv? G4cfd@t 'compile) (begin (G499f@G30b3@compile-r6rs-top-level G4cfb@x*) (G2b70@G29fa@serialize-all G28da@G2808@serialize-library G2943@G28ed@compile-core-expr)) (void))))) G4cee@how)) (with-input-from-file G4ced@filename (lambda () ((letrec ((G4d08@f (lambda () ((lambda (G4d0a@x) (if (eof-object? G4d0a@x) '() (cons G4d0a@x (G4d08@f)))) (G28d5@G27fe@read-annotated))))) G4d08@f)))))) G4cf9@swap)) (lambda () ((lambda (G4d0c@t) (begin (G4cf5@G4cf3@library-path G4cf6@G4cf4@library-path) (set! G4cf6@G4cf4@library-path G4d0c@t))) (G4cf5@G4cf3@library-path))))) G2b6c@G29f2@library-path (G4c97@local-library-path G4ced@filename)))) (set! G4ca9@write-record (lambda (G4d0e@record G4d0f@port) ((lambda (G4d12@rtd) (begin (format G4d0f@port '"    ~a" (record-type-name G4d12@rtd)) ((lambda (G4d14@v) ((lambda (G4d16@t) (if (eqv? G4d16@t '0) (newline) (if (eqv? G4d16@t '1) (begin (display '": " G4d0f@port) (write ((record-accessor G4d12@rtd '0) G4d0e@record) G4d0f@port) (newline G4d0f@port)) (begin (display '":\n") ((letrec ((G4d17@f (lambda (G4d19@i) (if (= G4d19@i (vector-length G4d14@v)) (void) (begin (display '"       " G4d0f@port) (display (vector-ref G4d14@v G4d19@i) G4d0f@port) (display '": " G4d0f@port) (write ((record-accessor G4d12@rtd G4d19@i) G4d0e@record) G4d0f@port) (newline G4d0f@port) (G4d17@f (+ G4d19@i '1))))))) G4d17@f) '0))))) (vector-length G4d14@v))) (record-type-field-names G4d12@rtd)))) (record-rtd G4d0e@record)))) (begin (set! G4d28@G4ca9@write-record G4ca9@write-record) (set! G4d27@G4ca7@load-r6rs-top-level G4ca7@load-r6rs-top-level) (set! G4d26@G4ca5@compile->closure G4ca5@compile->closure) (set! G4d25@G4ca3@compile G4ca3@compile) (set! G4d24@G4ca1@compile-system-libraries G4ca1@compile-system-libraries) (set! G4d23@G4c9f@eval-top-level G4c9f@eval-top-level) (set! G4d22@G4c9d@ironscheme-build G4c9d@ironscheme-build) (set! G4d21@G4c9b@load G4c9b@load) (set! G4d20@G4c99@load/args G4c99@load/args) (set! G4d1f@G4c97@local-library-path G4c97@local-library-path) (set! G4d1e@G4c95@command-line G4c95@command-line) (set! G4d1d@G4c93@trace-printer G4c93@trace-printer) (set! G4d1c@G4c91@repl G4c91@repl) (set! G4d1b@G4c8f@for-each-with-index G4c8f@for-each-with-index) (G2b71@G29fc@current-precompiled-library-loader G28db@G280a@load-serialized-library) (set-symbol-value! 'load G4c9b@load) (set-symbol-value! 'eval-r6rs G4c9f@eval-top-level) (set-symbol-value! 'int-env-syms G4986@G3081@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2942@G28eb@expanded->core) (set-symbol-value! 'trace-printer G4c93@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2b6c@G29f2@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4caa@args G4cab@port) (with-exception-handler (lambda (G4cae@c) (begin (display '" Condition components:\n" G4cab@port) (G4c8f@for-each-with-index (lambda (G4cb0@i G4cb1@x) ((lambda (G4cb4@rtd) (begin (format G4cab@port '"   ~d. ~a" G4cb0@i (record-type-name G4cb4@rtd)) ((lambda (G4cb6@v) ((lambda (G4cb8@t) (if (eqv? G4cb8@t '0) (newline) (if (eqv? G4cb8@t '1) (begin (display '": ") (write ((record-accessor G4cb4@rtd '0) G4cb1@x)) (newline)) (begin (display '":\n") ((letrec ((G4cb9@f (lambda (G4cbb@i) (if (= G4cbb@i (vector-length G4cb6@v)) (void) (begin (display '"       ") (display (vector-ref G4cb6@v G4cbb@i)) (display '": ") (write ((record-accessor G4cb4@rtd G4cbb@i) G4cb1@x)) (newline) (G4cb9@f (+ G4cbb@i '1))))))) G4cb9@f) '0))))) (vector-length G4cb6@v))) (record-type-field-names G4cb4@rtd)))) (record-rtd G4cb1@x))) (simple-conditions G4cae@c)))) (lambda () (if (null? G4caa@args) (G4c91@repl) (G4ca7@load-r6rs-top-level (car G4caa@args) 'load (cdr G4caa@args)))))) (G4c95@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
