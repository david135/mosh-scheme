;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2818@read-annotated G281a@annotation-stripped G281c@annotation? G281e@annotation-source G2820@annotation-expression G2822@scm->fasl G2824@fasl-save G2826@fasl-load G2828@serialize-library G282a@load-serialized-library G282c@make-record-printer G282e@compile-core G2830@read-library-source-file G2832@make-parameter G289e@file-options-spec) (begin (set! G2818@read-annotated read) (set! G281a@annotation-stripped (lambda (G289f@x) (G2820@annotation-expression G289f@x))) (set! G281c@annotation? (lambda (G28a1@x) (source-info G28a1@x))) (set! G281e@annotation-source (lambda (G28a3@x) (source-info G28a3@x))) (set! G2820@annotation-expression (lambda (G28a5@x) (if (pair? G28a5@x) (cons (car G28a5@x) (cdr G28a5@x)) (display '"line:46\n")))) (set! G2822@scm->fasl (lambda (G28a7@filename) (string-append G28a7@filename '".fasl"))) (set! G2824@fasl-save (lambda (G28a9@filename G28aa@obj) (call-with-port (open-file-output-port G28a9@filename) (lambda (G28ad@port) ((symbol-value 'fasl-write!) G28aa@obj G28ad@port))))) (set! G2826@fasl-load (lambda (G28af@filename) (call-with-port (open-file-input-port G28af@filename) (symbol-value 'fasl-read!)))) (set! G2828@serialize-library (lambda (G28b1@filename G28b2@obj) (begin (format '#t '"serialize-library ~a\n..." G28b1@filename) ((lambda (G28b5@fasl-file) (begin (if (file-exists? G28b5@fasl-file) (delete-file G28b5@fasl-file) (void)) ((call/cc (lambda (G28b9@G28b7) (lambda () (with-exception-handler (lambda (G28bb@c) ((call/cc (lambda (G28bd@G28b8) (G28b9@G28b7 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28b1@filename) (if (file-exists? G28b5@fasl-file) (delete-file G28b5@fasl-file) (void)) '#f) (G28bd@G28b8 (lambda () (raise-continuable G28bb@c)))))))))) (lambda () (begin (G2824@fasl-save G28b5@fasl-file G28b2@obj) (display '"OK\n")))))))))) (G2822@scm->fasl G28b1@filename))))) (set! G282a@load-serialized-library (lambda (G28bf@filename G28c0@obj) ((lambda (G28c3@fasl-file) (if (and (file-exists? G28c3@fasl-file) ((symbol-value 'file-newer?) G28c3@fasl-file G28bf@filename)) ((lambda (G28c5@expanded2core) ((lambda (G28c7@code) ((lambda (G28c9@pivot) ((lambda (G28cb@visit) ((lambda (G28cd@visit-proc) ((lambda () (begin (set-car! G28c9@pivot G28cd@visit-proc) ((lambda (G28cf@pivot) ((lambda (G28d1@invoke) ((lambda () (begin (set-car! G28cf@pivot (lambda () (eval-core G28d1@invoke))) (apply G28c0@obj G28c7@code))))) (G28c5@expanded2core (car G28cf@pivot)))) (cdr G28c9@pivot)) '#t)))) (lambda () (eval-core G28cb@visit)))) (G28c5@expanded2core (car G28c9@pivot)))) (cddddr (cddddr G28c7@code)))) (G2826@fasl-load G28c3@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2822@scm->fasl G28bf@filename)))) (set! G282c@make-record-printer (lambda (G28d3@name G28d4@printer) (lambda G28d7@x (begin (display '"record printer") (for-each display G28d7@x))))) (set! G282e@compile-core (lambda G28d9@x (apply error 'comile-core '"not implementated" G28d9@x))) (set! G2830@read-library-source-file (lambda (G28db@file-name) (with-input-from-file G28db@file-name G2818@read-annotated))) (set! G2832@make-parameter (lambda G28eb ((lambda (G28ec) (if (= G28ec '1) (apply (lambda (G28dd@x) (G2832@make-parameter G28dd@x (lambda (G28df@x) G28df@x))) G28eb) (if (= G28ec '2) (apply (lambda (G28e1@x G28e2@fender) ((lambda (G28e5@x) (lambda G28e9 ((lambda (G28ea) (if (= G28ea '0) (apply (lambda () G28e5@x) G28e9) (if (= G28ea '1) (apply (lambda (G28e7@v) (set! G28e5@x (G28e2@fender G28e7@v))) G28e9) (error 'apply '"invalid arg count")))) (length G28e9)))) (G28e2@fender G28e1@x))) G28eb) (error 'apply '"invalid arg count")))) (length G28eb)))) (set! G289e@file-options-spec (lambda (G28ed@x) G28ed@x)) (begin (set! G28fd@G289e@file-options-spec G289e@file-options-spec) (set! G28fc@G2832@make-parameter G2832@make-parameter) (set! G28fb@G2830@read-library-source-file G2830@read-library-source-file) (set! G28fa@G282e@compile-core G282e@compile-core) (set! G28f9@G282c@make-record-printer G282c@make-record-printer) (set! G28f8@G282a@load-serialized-library G282a@load-serialized-library) (set! G28f7@G2828@serialize-library G2828@serialize-library) (set! G28f6@G2826@fasl-load G2826@fasl-load) (set! G28f5@G2824@fasl-save G2824@fasl-save) (set! G28f4@G2822@scm->fasl G2822@scm->fasl) (set! G28f3@G2820@annotation-expression G2820@annotation-expression) (set! G28f2@G281e@annotation-source G281e@annotation-source) (set! G28f1@G281c@annotation? G281c@annotation?) (set! G28f0@G281a@annotation-stripped G281a@annotation-stripped) (set! G28ef@G2818@read-annotated G2818@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2902@current-primitive-locations G2904@mutable? G2906@rewriter G2908@expanded->core G290a@compile-core-expr G290c@pretty-print G290e@compile-core-expr-to-port) (begin (set! G2902@current-primitive-locations (G28fc@G2832@make-parameter (lambda (G290f@x) '#f) (lambda (G2911@p) G2911@p))) (set! G2904@mutable? (lambda (G2913@x) (or (pair? G2913@x) (vector? G2913@x) (hashtable? G2913@x)))) (set! G2906@rewriter (lambda (G2915@quote-hack?) ((lambda (G2918@f) (begin (set! G2918@f (lambda (G2919@x) (if (pair? G2919@x) ((lambda (G291b@t) (if (memv G291b@t '(quote)) (if (and G2915@quote-hack? (G2904@mutable? (cadr G2919@x))) ((lambda (G291d@g) (begin (set-symbol-value! G291d@g (cadr G2919@x)) G291d@g)) (gensym)) G2919@x) (if (memv G291b@t '(case-lambda)) (cons 'case-lambda (map (lambda (G291f@x) (cons (car G291f@x) (map G2918@f (cdr G291f@x)))) (cdr G2919@x))) (if (memv G291b@t '(lambda)) (cons* 'lambda (cadr G2919@x) (map G2918@f (cddr G2919@x))) (if (memv G291b@t '(letrec)) ((lambda (G2921@bindings G2922@body*) ((lambda (G2925@lhs* G2926@rhs*) (cons* 'letrec (map list G2925@lhs* (map G2918@f G2926@rhs*)) (map G2918@f G2922@body*))) (map car G2921@bindings) (map cadr G2921@bindings))) (cadr G2919@x) (cddr G2919@x)) (if (memv G291b@t '(letrec*)) ((lambda (G2929@bindings G292a@body*) ((lambda (G292d@lhs* G292e@rhs*) (cons* 'letrec* (map list G292d@lhs* (map G2918@f G292e@rhs*)) (map G2918@f G292a@body*))) (map car G2929@bindings) (map cadr G2929@bindings))) (cadr G2919@x) (cddr G2919@x)) (if (memv G291b@t '(library-letrec*)) ((lambda (G2931@name G2932@x) ((lambda (G2935@bindings G2936@body*) ((lambda (G2939@lhs* G293a@lhs** G293b@rhs*) (cons* 'library-letrec* G2931@name (map list G2939@lhs* G293a@lhs** (map G2918@f G293b@rhs*)) (map G2918@f G2936@body*))) (map car G2935@bindings) (map cadr G2935@bindings) (map caddr G2935@bindings))) (cadr G2932@x) (cddr G2932@x))) (cadr G2919@x) (cdr G2919@x)) (if (memv G291b@t '(begin)) (cons 'begin (map G2918@f (cdr G2919@x))) (if (memv G291b@t '(set!)) (list 'set! (cadr G2919@x) (G2918@f (caddr G2919@x))) (if (memv G291b@t '(primitive)) ((lambda (G293f@op) ((lambda (G2941@t) (if G2941@t ((lambda (G2943@loc) G2943@loc) G2941@t) G293f@op)) ((G2902@current-primitive-locations) G293f@op))) (cadr G2919@x)) (if (memv G291b@t '(define)) G2919@x (if (list? G2919@x) (map G2918@f G2919@x) (error 'rewrite '"invalid form ~s ~s" G2919@x (list? G2919@x)))))))))))))) (car G2919@x)) G2919@x))) G2918@f)) '#f))) (set! G2908@expanded->core (lambda (G2945@x) ((G2906@rewriter '#t) G2945@x))) (set! G290a@compile-core-expr (lambda (G2947@x) ((G2906@rewriter '#f) G2947@x))) (set! G290c@pretty-print write) (set! G290e@compile-core-expr-to-port (lambda (G2949@x G294a@p) (G290c@pretty-print ((G2906@rewriter '#f) G2949@x) G294a@p))) (begin (set! G2953@G290e@compile-core-expr-to-port G290e@compile-core-expr-to-port) (set! G2952@G290c@pretty-print G290c@pretty-print) (set! G2951@G290a@compile-core-expr G290a@compile-core-expr) (set! G2950@G2908@expanded->core G2908@expanded->core) (set! G294f@G2906@rewriter G2906@rewriter) (set! G294e@G2904@mutable? G2904@mutable?) (set! G294d@G2902@current-primitive-locations G2902@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29a9@make-collection G29ab@current-library-collection G29b1@G29ac G29b3@G29ae G29b5@G29ad G29b8@library? G29ba@make-library G29bc@library-id G29be@library-name G29c0@library-version G29c2@library-imp* G29c4@library-vis* G29c6@library-inv* G29c8@library-subst G29ca@library-env G29cc@library-visit-state G29ce@library-invoke-state G29d0@library-visit-code G29d2@library-invoke-code G29d4@library-visible? G29d6@library-source-file-name G29d8@set-library-id! G29da@set-library-name! G29dc@set-library-version! G29de@set-library-imp*! G29e0@set-library-vis*! G29e2@set-library-inv*! G29e4@set-library-subst! G29e6@set-library-env! G29e8@set-library-visit-state! G29ea@set-library-invoke-state! G29ec@set-library-visit-code! G29ee@set-library-invoke-code! G29f0@set-library-visible?! G29f2@set-library-source-file-name! G29f4@rp G29f6@find-dependencies G29f8@find-library-by G29fa@library-path G29fc@library-extensions G29fe@library-name->file-name G2a00@file-locator G2a02@serialize-all G2a04@current-precompiled-library-loader G2a06@try-load-from-file G2a08@library-loader G2a0a@current-library-expander G2a0c@external-pending-libraries G2a0e@find-external-library G2a10@find-library-by-name G2a12@library-exists? G2a14@find-library-by-spec/die G2a16@label->binding-table G2a18@install-library-record G2a1a@install-library G2a1c@imported-label->binding G2a1e@invoke-library G2a20@visit-library G2a22@invoke-library-by-spec G2a24@installed-libraries G2a26@library-spec) (begin (set! G29a9@make-collection (lambda () ((lambda (G2a27@set) ((lambda (G2a2a@set-cons) (begin (set! G2a2a@set-cons (lambda (G2a2f@x G2a30@ls) (if (memq G2a2f@x G2a30@ls) G2a30@ls (cons G2a2f@x G2a30@ls)))) (lambda G2a2d ((lambda (G2a2e) (if (= G2a2e '0) (apply (lambda () G2a27@set) G2a2d) (if (= G2a2e '1) (apply (lambda (G2a2b@x) (set! G2a27@set (G2a2a@set-cons G2a2b@x G2a27@set))) G2a2d) (error 'apply '"invalid arg count")))) (length G2a2d))))) '#f)) '()))) (set! G29ab@current-library-collection (G28fc@G2832@make-parameter (G29a9@make-collection) (lambda (G2a33@x) (begin (if (not (procedure? G2a33@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a33@x) (void)) G2a33@x)))) (set! G29b1@G29ac (make-record-type-descriptor 'library '#f 'G29af '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29b3@G29ae '#f) (set! G29b5@G29ad (make-record-constructor-descriptor G29b1@G29ac '#f G29b3@G29ae)) (set! G29b8@library? (record-predicate G29b1@G29ac)) (set! G29ba@make-library (record-constructor G29b5@G29ad)) (set! G29bc@library-id (record-accessor G29b1@G29ac '0)) (set! G29be@library-name (record-accessor G29b1@G29ac '1)) (set! G29c0@library-version (record-accessor G29b1@G29ac '2)) (set! G29c2@library-imp* (record-accessor G29b1@G29ac '3)) (set! G29c4@library-vis* (record-accessor G29b1@G29ac '4)) (set! G29c6@library-inv* (record-accessor G29b1@G29ac '5)) (set! G29c8@library-subst (record-accessor G29b1@G29ac '6)) (set! G29ca@library-env (record-accessor G29b1@G29ac '7)) (set! G29cc@library-visit-state (record-accessor G29b1@G29ac '8)) (set! G29ce@library-invoke-state (record-accessor G29b1@G29ac '9)) (set! G29d0@library-visit-code (record-accessor G29b1@G29ac '10)) (set! G29d2@library-invoke-code (record-accessor G29b1@G29ac '11)) (set! G29d4@library-visible? (record-accessor G29b1@G29ac '12)) (set! G29d6@library-source-file-name (record-accessor G29b1@G29ac '13)) (set! G29d8@set-library-id! (record-mutator G29b1@G29ac '0)) (set! G29da@set-library-name! (record-mutator G29b1@G29ac '1)) (set! G29dc@set-library-version! (record-mutator G29b1@G29ac '2)) (set! G29de@set-library-imp*! (record-mutator G29b1@G29ac '3)) (set! G29e0@set-library-vis*! (record-mutator G29b1@G29ac '4)) (set! G29e2@set-library-inv*! (record-mutator G29b1@G29ac '5)) (set! G29e4@set-library-subst! (record-mutator G29b1@G29ac '6)) (set! G29e6@set-library-env! (record-mutator G29b1@G29ac '7)) (set! G29e8@set-library-visit-state! (record-mutator G29b1@G29ac '8)) (set! G29ea@set-library-invoke-state! (record-mutator G29b1@G29ac '9)) (set! G29ec@set-library-visit-code! (record-mutator G29b1@G29ac '10)) (set! G29ee@set-library-invoke-code! (record-mutator G29b1@G29ac '11)) (set! G29f0@set-library-visible?! (record-mutator G29b1@G29ac '12)) (set! G29f2@set-library-source-file-name! (record-mutator G29b1@G29ac '13)) (set! G29f4@rp (G28f9@G282c@make-record-printer 'library (lambda (G2a35@x G2a36@p G2a37@wr) (begin (if (not (G29b8@library? G2a35@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29c0@library-version G2a35@x)) (G29be@library-name G2a35@x) (append (G29be@library-name G2a35@x) (list (G29c0@library-version G2a35@x))))) G2a36@p))))) (set! G29f6@find-dependencies (lambda (G2a3b@ls) (if (null? G2a3b@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G29f8@find-library-by (lambda (G2a3d@pred) ((letrec ((G2a3f@f (lambda (G2a41@ls) (if (null? G2a41@ls) '#f (if (G2a3d@pred (car G2a41@ls)) (car G2a41@ls) (G2a3f@f (cdr G2a41@ls))))))) G2a3f@f) ((G29ab@current-library-collection))))) (set! G29fa@library-path (G28fc@G2832@make-parameter '(".") (lambda (G2a43@x) (if (and (list? G2a43@x) (for-all string? G2a43@x)) (map (lambda (G2a45@x) G2a45@x) G2a43@x) (assertion-violation 'library-path '"not a list of strings" G2a43@x))))) (set! G29fc@library-extensions (G28fc@G2832@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a47@x) (if (and (list? G2a47@x) (for-all string? G2a47@x)) (map (lambda (G2a49@x) G2a49@x) G2a47@x) (assertion-violation 'library-extensions '"not a list of strings" G2a47@x))))) (set! G29fe@library-name->file-name (lambda (G2a4b@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a4f@G2a4d G2a50@G2a4e) ((lambda (G2a53@extract G2a54@p) ((lambda (G2a58@display-hex) (begin (set! G2a58@display-hex (lambda (G2a61@n) (if (<= '0 G2a61@n '9) (display G2a61@n G2a54@p) (display (integer->char (+ (char->integer '#\A) (- G2a61@n '10))) G2a54@p)))) (begin ((letrec ((G2a59@f (lambda (G2a5b@ls) (if (not (null? G2a5b@ls)) (begin (display '"/" G2a54@p) (for-each (lambda (G2a5d@c) (if (or (char<=? '#\a G2a5d@c '#\z) (char<=? '#\A G2a5d@c '#\Z) (char<=? '#\0 G2a5d@c '#\9) (memv G2a5d@c '(#\- #\. #\_ #\~))) (display G2a5d@c G2a54@p) (begin (display '"%" G2a54@p) ((lambda (G2a5f@n) (begin (G2a58@display-hex (quotient G2a5f@n '16)) (G2a58@display-hex (remainder G2a5f@n '16)))) (char->integer G2a5d@c))))) (string->list (symbol->string (car G2a5b@ls)))) (G2a59@f (cdr G2a5b@ls))) (void))))) G2a59@f) G2a4b@x) (G2a53@extract)))) '#f)) G2a50@G2a4e G2a4f@G2a4d))))) (set! G2a00@file-locator (G28fc@G2832@make-parameter (lambda (G2a63@x) ((lambda (G2a65@str) ((letrec ((G2a67@f (lambda (G2a69@ls G2a6a@exts G2a6b@failed-list) (if (null? G2a69@ls) ((lambda () ((lambda (G2a77@G2a72 G2a79@G2a74 G2a7b@G2a73 G2a7e@G2a71 G2a80@make-library-resolution-condition G2a82@G2a6f G2a84@G2a70 G2a86@library-resolution-condition? G2a88@condition-library G2a8a@condition-files) (begin (set! G2a77@G2a72 (make-record-type-descriptor '&library-resolution G4c12@G4963@&condition-rtd 'G2a75 '#f '#f '#((immutable library) (immutable files)))) (set! G2a79@G2a74 '#f) (set! G2a7b@G2a73 (make-record-constructor-descriptor G2a77@G2a72 G4c13@G4965@&condition-rcd G2a79@G2a74)) (set! G2a7e@G2a71 (record-predicate G2a77@G2a72)) (set! G2a80@make-library-resolution-condition (record-constructor G2a7b@G2a73)) (set! G2a82@G2a6f (record-accessor G2a77@G2a72 '0)) (set! G2a84@G2a70 (record-accessor G2a77@G2a72 '1)) (set! G2a86@library-resolution-condition? (condition-predicate G2a77@G2a72)) (set! G2a88@condition-library (condition-accessor G2a77@G2a72 G2a82@G2a6f)) (set! G2a8a@condition-files (condition-accessor G2a77@G2a72 G2a84@G2a70)) (raise (condition (G4c32@G49fb@make-error) (G4c54@G4a55@make-who-condition 'expander) (G4c18@G49b8@make-message-condition '"cannot locate library in library-path") (G2a80@make-library-resolution-condition G2a63@x (reverse G2a6b@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a6a@exts) (G2a67@f (cdr G2a69@ls) (G29fc@library-extensions) G2a6b@failed-list) ((lambda (G2a8b@name) (if (file-exists? G2a8b@name) G2a8b@name (G2a67@f G2a69@ls (cdr G2a6a@exts) (cons G2a8b@name G2a6b@failed-list)))) (string-append (car G2a69@ls) G2a65@str (car G2a6a@exts)))))))) G2a67@f) (G29fa@library-path) (G29fc@library-extensions) '())) (G29fe@library-name->file-name G2a63@x))) (lambda (G2a8d@f) (if (procedure? G2a8d@f) G2a8d@f (assertion-violation 'file-locator '"not a procedure" G2a8d@f))))) (set! G2a02@serialize-all (lambda (G2a8f@serialize G2a90@compile) ((lambda (G2a94@library-desc) (begin (set! G2a94@library-desc (lambda (G2a97@x) (list (G29bc@library-id G2a97@x) (G29be@library-name G2a97@x)))) (for-each (lambda (G2a95@x) (if (G29d6@library-source-file-name G2a95@x) (G2a8f@serialize (G29d6@library-source-file-name G2a95@x) (list (G29bc@library-id G2a95@x) (G29be@library-name G2a95@x) (G29c0@library-version G2a95@x) (map G2a94@library-desc (G29c2@library-imp* G2a95@x)) (map G2a94@library-desc (G29c4@library-vis* G2a95@x)) (map G2a94@library-desc (G29c6@library-inv* G2a95@x)) (G29c8@library-subst G2a95@x) (G29ca@library-env G2a95@x) (G2a90@compile (G29d0@library-visit-code G2a95@x)) (G2a90@compile (G29d2@library-invoke-code G2a95@x)) (G29d4@library-visible? G2a95@x))) (void))) ((G29ab@current-library-collection))))) '#f))) (set! G2a04@current-precompiled-library-loader (G28fc@G2832@make-parameter (lambda (G2a99@filename G2a9a@sk) '#f))) (set! G2a06@try-load-from-file (lambda (G2a9d@filename) ((G2a04@current-precompiled-library-loader) G2a9d@filename (lambda G2ac3 ((lambda (G2ac4) (if (= G2ac4 '11) (apply (lambda (G2a9f@id G2aa0@name G2aa1@ver G2aa2@imp* G2aa3@vis* G2aa4@inv* G2aa5@exp-subst G2aa6@exp-env G2aa7@visit-proc G2aa8@invoke-proc G2aa9@visible?) ((letrec ((G2ab5@f (lambda (G2ab7@deps) (if (null? G2ab7@deps) (begin (G2a1a@install-library G2a9f@id G2aa0@name G2aa1@ver G2aa2@imp* G2aa3@vis* G2aa4@inv* G2aa5@exp-subst G2aa6@exp-env G2aa7@visit-proc G2aa8@invoke-proc '#f '#f G2aa9@visible? '#f) '#t) ((lambda (G2ab9@d) ((lambda (G2abb@label G2abc@dname) ((lambda (G2abf@l) (if (and (G29b8@library? G2abf@l) (eq? G2abb@label (G29bc@library-id G2abf@l))) (G2ab5@f (cdr G2ab7@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\r\n                           on library ~s; file ~s will be recompiled from \\\r\n                           source. l=~a label=~a (library-id l)=~a\n" G2aa0@name G2abc@dname G2a9d@filename G2abf@l G2abb@label (G29bc@library-id G2abf@l)) '#f))) (G2a10@find-library-by-name G2abc@dname))) (car G2ab9@d) (cadr G2ab9@d))) (car G2ab7@deps)))))) G2ab5@f) (append G2aa2@imp* G2aa3@vis* G2aa4@inv*))) G2ac3) (if (>= G2ac4 '0) (apply (lambda G2ac1@others '#f) G2ac3) (error 'apply '"invalid arg count")))) (length G2ac3)))))) (set! G2a08@library-loader (G28fc@G2832@make-parameter (lambda (G2ac5@x) ((lambda (G2ac7@file-name) (if (not G2ac7@file-name) (assertion-violation '#f '"cannot file library" G2ac5@x) (or (G2a06@try-load-from-file G2ac7@file-name) ((G2a0a@current-library-expander) (G28fb@G2830@read-library-source-file G2ac7@file-name) G2ac7@file-name (lambda (G2ac9@name) (if (not (fast-equal? G2ac9@name G2ac5@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2acd@G2acb G2ace@G2acc) ((lambda (G2ad1@e G2ad2@p) (begin (display '"expected to find library " G2ad2@p) (write G2ac5@x G2ad2@p) (display '" in file " G2ad2@p) (display G2ac7@file-name G2ad2@p) (display '", found " G2ad2@p) (write G2ac9@name G2ad2@p) (display '" instead" G2ad2@p) (G2ad1@e))) G2ace@G2acc G2acd@G2acb)))) (void))))))) ((G2a00@file-locator) G2ac5@x))) (lambda (G2ad5@f) (if (procedure? G2ad5@f) G2ad5@f (assertion-violation 'library-locator '"not a procedure" G2ad5@f))))) (set! G2a0a@current-library-expander (G28fc@G2832@make-parameter (lambda (G2ad7@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ad9@f) (if (procedure? G2ad9@f) G2ad9@f (assertion-violation 'library-expander '"not a procedure" G2ad9@f))))) (set! G2a0c@external-pending-libraries (G28fc@G2832@make-parameter '())) (set! G2a0e@find-external-library (lambda (G2adb@name) (begin (if (member G2adb@name (G2a0c@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2adb@name) (void)) ((lambda (G2adf@G2add G2ae0@G2ade) ((lambda (G2ae3@swap) (dynamic-wind G2ae3@swap (lambda () (begin ((G2a08@library-loader) G2adb@name) (or (G29f8@find-library-by (lambda (G2ae5@x) (fast-equal? (G29be@library-name G2ae5@x) G2adb@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2adb@name)))) G2ae3@swap)) (lambda () ((lambda (G2ae7@t) (begin (G2adf@G2add G2ae0@G2ade) (set! G2ae0@G2ade G2ae7@t))) (G2adf@G2add))))) G2a0c@external-pending-libraries (cons G2adb@name (G2a0c@external-pending-libraries)))))) (set! G2a10@find-library-by-name (lambda (G2ae9@name) (or (G29f8@find-library-by (lambda (G2aeb@x) (fast-equal? (G29be@library-name G2aeb@x) G2ae9@name))) (G2a0e@find-external-library G2ae9@name)))) (set! G2a12@library-exists? (lambda (G2aed@name) (and (G29f8@find-library-by (lambda (G2aef@x) (fast-equal? (G29be@library-name G2aef@x) G2aed@name))) '#t))) (set! G2a14@find-library-by-spec/die (lambda (G2af1@spec) ((lambda (G2af3@id) (or (G29f8@find-library-by (lambda (G2af5@x) (eq? G2af3@id (G29bc@library-id G2af5@x)))) (assertion-violation '#f '"cannot find library with required spec" G2af1@spec))) (car G2af1@spec)))) (set! G2a16@label->binding-table (make-eq-hashtable)) (set! G2a18@install-library-record (lambda (G2af7@lib) (begin ((lambda (G2af9@exp-env) (for-each (lambda (G2afb@x) ((lambda (G2afd@label G2afe@binding) ((lambda (G2b01@binding) (hashtable-set! G2a16@label->binding-table G2afd@label G2b01@binding)) ((lambda (G2b03@t) (if (memv G2b03@t '(global)) (cons 'global (cons G2af7@lib (cdr G2afe@binding))) (if (memv G2b03@t '(global-macro)) (cons 'global-macro (cons G2af7@lib (cdr G2afe@binding))) (if (memv G2b03@t '(global-macro!)) (cons 'global-macro! (cons G2af7@lib (cdr G2afe@binding))) G2afe@binding)))) (car G2afe@binding)))) (car G2afb@x) (cdr G2afb@x))) G2af9@exp-env)) (G29ca@library-env G2af7@lib)) ((G29ab@current-library-collection) G2af7@lib)))) (set! G2a1a@install-library (lambda (G2b05@id G2b06@name G2b07@ver G2b08@imp* G2b09@vis* G2b0a@inv* G2b0b@exp-subst G2b0c@exp-env G2b0d@visit-proc G2b0e@invoke-proc G2b0f@visit-code G2b10@invoke-code G2b11@visible? G2b12@source-file-name) ((lambda (G2b21@imp-lib* G2b22@vis-lib* G2b23@inv-lib*) (begin (if (not (and (symbol? G2b05@id) (list? G2b06@name) (list? G2b07@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b05@id G2b06@name G2b07@ver) (void)) (if (G2a12@library-exists? G2b06@name) (assertion-violation 'install-library '"library is already installed" G2b06@name) (void)) ((lambda (G2b27@lib) (G2a18@install-library-record G2b27@lib)) (G29ba@make-library G2b05@id G2b06@name G2b07@ver G2b21@imp-lib* G2b22@vis-lib* G2b23@inv-lib* G2b0b@exp-subst G2b0c@exp-env G2b0d@visit-proc G2b0e@invoke-proc G2b0f@visit-code G2b10@invoke-code G2b11@visible? G2b12@source-file-name)))) (map G2a14@find-library-by-spec/die G2b08@imp*) (map G2a14@find-library-by-spec/die G2b09@vis*) (map G2a14@find-library-by-spec/die G2b0a@inv*)))) (set! G2a1c@imported-label->binding (lambda (G2b29@lab) (hashtable-ref G2a16@label->binding-table G2b29@lab '#f))) (set! G2a1e@invoke-library (lambda (G2b2b@lib) ((lambda (G2b2d@invoke) (if (procedure? G2b2d@invoke) (begin (G29ea@set-library-invoke-state! G2b2b@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b2b@lib))) (for-each G2a1e@invoke-library (G29c6@library-inv* G2b2b@lib)) (G29ea@set-library-invoke-state! G2b2b@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b2b@lib))) (G2b2d@invoke) (G29ea@set-library-invoke-state! G2b2b@lib '#t)) (void))) (G29ce@library-invoke-state G2b2b@lib)))) (set! G2a20@visit-library (lambda (G2b2f@lib) ((lambda (G2b31@visit) (if (procedure? G2b31@visit) (begin (G29e8@set-library-visit-state! G2b2f@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b2f@lib))) (for-each G2a1e@invoke-library (G29c4@library-vis* G2b2f@lib)) (G29e8@set-library-visit-state! G2b2f@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b2f@lib))) (G2b31@visit) (G29e8@set-library-visit-state! G2b2f@lib '#t)) (void))) (G29cc@library-visit-state G2b2f@lib)))) (set! G2a22@invoke-library-by-spec (lambda (G2b33@spec) (G2a1e@invoke-library (G2a14@find-library-by-spec/die G2b33@spec)))) (set! G2a24@installed-libraries (lambda G2b3b ((lambda (G2b3c) (if (= G2b3c '1) (apply (lambda (G2b35@all?) ((letrec ((G2b37@f (lambda (G2b39@ls) (if (null? G2b39@ls) '() (if (or G2b35@all? (G29d4@library-visible? (car G2b39@ls))) (cons (car G2b39@ls) (G2b37@f (cdr G2b39@ls))) (G2b37@f (cdr G2b39@ls))))))) G2b37@f) ((G29ab@current-library-collection)))) G2b3b) (if (= G2b3c '0) (apply (lambda () (G2a24@installed-libraries '#f)) G2b3b) (error 'apply '"invalid arg count")))) (length G2b3b)))) (set! G2a26@library-spec (lambda (G2b3d@x) (begin (if (not (G29b8@library? G2b3d@x)) (assertion-violation 'library-spec '"not a library" G2b3d@x) (void)) (list (G29bc@library-id G2b3d@x) (G29be@library-name G2b3d@x) (G29c0@library-version G2b3d@x))))) (begin (set! G2b7b@G2a26@library-spec G2a26@library-spec) (set! G2b7a@G2a24@installed-libraries G2a24@installed-libraries) (set! G2b79@G2a22@invoke-library-by-spec G2a22@invoke-library-by-spec) (set! G2b78@G2a20@visit-library G2a20@visit-library) (set! G2b77@G2a1e@invoke-library G2a1e@invoke-library) (set! G2b76@G2a1c@imported-label->binding G2a1c@imported-label->binding) (set! G2b75@G2a1a@install-library G2a1a@install-library) (set! G2b74@G2a18@install-library-record G2a18@install-library-record) (set! G2b73@G2a16@label->binding-table G2a16@label->binding-table) (set! G2b72@G2a14@find-library-by-spec/die G2a14@find-library-by-spec/die) (set! G2b71@G2a12@library-exists? G2a12@library-exists?) (set! G2b70@G2a10@find-library-by-name G2a10@find-library-by-name) (set! G2b6f@G2a0e@find-external-library G2a0e@find-external-library) (set! G2b6e@G2a0c@external-pending-libraries G2a0c@external-pending-libraries) (set! G2b6d@G2a0a@current-library-expander G2a0a@current-library-expander) (set! G2b6c@G2a08@library-loader G2a08@library-loader) (set! G2b6b@G2a06@try-load-from-file G2a06@try-load-from-file) (set! G2b6a@G2a04@current-precompiled-library-loader G2a04@current-precompiled-library-loader) (set! G2b69@G2a02@serialize-all G2a02@serialize-all) (set! G2b68@G2a00@file-locator G2a00@file-locator) (set! G2b67@G29fe@library-name->file-name G29fe@library-name->file-name) (set! G2b66@G29fc@library-extensions G29fc@library-extensions) (set! G2b65@G29fa@library-path G29fa@library-path) (set! G2b64@G29f8@find-library-by G29f8@find-library-by) (set! G2b63@G29f6@find-dependencies G29f6@find-dependencies) (set! G2b62@G29f4@rp G29f4@rp) (set! G2b61@G29f2@set-library-source-file-name! G29f2@set-library-source-file-name!) (set! G2b60@G29f0@set-library-visible?! G29f0@set-library-visible?!) (set! G2b5f@G29ee@set-library-invoke-code! G29ee@set-library-invoke-code!) (set! G2b5e@G29ec@set-library-visit-code! G29ec@set-library-visit-code!) (set! G2b5d@G29ea@set-library-invoke-state! G29ea@set-library-invoke-state!) (set! G2b5c@G29e8@set-library-visit-state! G29e8@set-library-visit-state!) (set! G2b5b@G29e6@set-library-env! G29e6@set-library-env!) (set! G2b5a@G29e4@set-library-subst! G29e4@set-library-subst!) (set! G2b59@G29e2@set-library-inv*! G29e2@set-library-inv*!) (set! G2b58@G29e0@set-library-vis*! G29e0@set-library-vis*!) (set! G2b57@G29de@set-library-imp*! G29de@set-library-imp*!) (set! G2b56@G29dc@set-library-version! G29dc@set-library-version!) (set! G2b55@G29da@set-library-name! G29da@set-library-name!) (set! G2b54@G29d8@set-library-id! G29d8@set-library-id!) (set! G2b53@G29d6@library-source-file-name G29d6@library-source-file-name) (set! G2b52@G29d4@library-visible? G29d4@library-visible?) (set! G2b51@G29d2@library-invoke-code G29d2@library-invoke-code) (set! G2b50@G29d0@library-visit-code G29d0@library-visit-code) (set! G2b4f@G29ce@library-invoke-state G29ce@library-invoke-state) (set! G2b4e@G29cc@library-visit-state G29cc@library-visit-state) (set! G2b4d@G29ca@library-env G29ca@library-env) (set! G2b4c@G29c8@library-subst G29c8@library-subst) (set! G2b4b@G29c6@library-inv* G29c6@library-inv*) (set! G2b4a@G29c4@library-vis* G29c4@library-vis*) (set! G2b49@G29c2@library-imp* G29c2@library-imp*) (set! G2b48@G29c0@library-version G29c0@library-version) (set! G2b47@G29be@library-name G29be@library-name) (set! G2b46@G29bc@library-id G29bc@library-id) (set! G2b45@G29ba@make-library G29ba@make-library) (set! G2b44@G29b8@library? G29b8@library?) (set! G2b43@G29b5@G29ad G29b5@G29ad) (set! G2b42@G29b3@G29ae G29b3@G29ae) (set! G2b41@G29b1@G29ac G29b1@G29ac) (set! G2b40@G29ab@current-library-collection G29ab@current-library-collection) (set! G2b3f@G29a9@make-collection G29a9@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b7e@build-global-define G2bf8@build-lambda G2bfa@build-case-lambda G2bfc@build-let G2c2e@build-sequence G2c30@build-void G2c32@build-letrec G2c34@build-letrec* G2c36@build-library-letrec* G2c38@build-receive) (begin (set! G2b7e@build-global-define (lambda (G2c39@x) (G2c30@build-void))) (set! G2bf8@build-lambda (lambda (G2c3b@ae G2c3c@vars G2c3d@exp) (list 'lambda G2c3c@vars G2c3d@exp))) (set! G2bfa@build-case-lambda (lambda (G2c41@ae G2c42@vars* G2c43@exp*) ((lambda (G2c48@build-error G2c4a@build-pred G2c4c@build-apply G2c4e@expand-case-lambda) (begin (set! G2c48@build-error (lambda (G2c7d@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c4a@build-pred (lambda (G2c67@ae G2c68@n G2c69@vars) (call-with-values (lambda () ((letrec ((G2c6f@f (lambda (G2c71@vars G2c72@count) (if (pair? G2c71@vars) (G2c6f@f (cdr G2c71@vars) (+ G2c72@count '1)) (if (null? G2c71@vars) (values G2c72@count '=) (values G2c72@count '>=)))))) G2c6f@f) G2c69@vars '0)) (lambda (G2c75@G2c6d G2c76@G2c6e) ((lambda (G2c79@pred G2c7a@count) (list (list 'primitive G2c79@pred) G2c68@n (list 'quote G2c7a@count))) G2c76@G2c6e G2c75@G2c6d))))) (set! G2c4c@build-apply (lambda (G2c5f@ae G2c60@g G2c61@vars G2c62@exp) (list '(primitive apply) (G2bf8@build-lambda G2c5f@ae G2c61@vars G2c62@exp) G2c60@g))) (set! G2c4e@expand-case-lambda (lambda (G2c4f@ae G2c50@vars G2c51@exp*) ((lambda (G2c55@g G2c56@n) (list 'lambda G2c55@g (G2bfc@build-let G2c4f@ae (list G2c56@n) (list (list '(primitive length) G2c55@g)) ((letrec ((G2c59@f (lambda (G2c5b@vars* G2c5c@exp*) (if (null? G2c5b@vars*) (G2c48@build-error G2c4f@ae) (list 'if (G2c4a@build-pred G2c4f@ae G2c56@n (car G2c5b@vars*)) (G2c4c@build-apply G2c4f@ae G2c55@g (car G2c5b@vars*) (car G2c5c@exp*)) (G2c59@f (cdr G2c5b@vars*) (cdr G2c5c@exp*))))))) G2c59@f) G2c42@vars* G2c51@exp*)))) (gensym) (gensym)))) (if (= (length G2c43@exp*) '1) (G2bf8@build-lambda G2c41@ae (car G2c42@vars*) (car G2c43@exp*)) (G2c4e@expand-case-lambda G2c41@ae G2c42@vars* G2c43@exp*)))) '#f '#f '#f '#f))) (set! G2bfc@build-let (lambda (G2c7f@ae G2c80@lhs* G2c81@rhs* G2c82@body) (cons (G2bf8@build-lambda G2c7f@ae G2c80@lhs* G2c82@body) G2c81@rhs*))) (set! G2c2e@build-sequence (lambda (G2c87@ae G2c88@exps) ((letrec ((G2c8b@loop (lambda (G2c8d@exps) (if (null? (cdr G2c8d@exps)) (car G2c8d@exps) (if (equal? (car G2c8d@exps) (G2c30@build-void)) (G2c8b@loop (cdr G2c8d@exps)) (cons 'begin G2c8d@exps)))))) G2c8b@loop) G2c88@exps))) (set! G2c30@build-void (lambda () '((primitive void)))) (set! G2c32@build-letrec (lambda (G2c8f@ae G2c90@vars G2c91@val-exps G2c92@body-exp) (if (null? G2c90@vars) G2c92@body-exp (list 'letrec (map list G2c90@vars G2c91@val-exps) G2c92@body-exp)))) (set! G2c34@build-letrec* (lambda (G2c97@ae G2c98@vars G2c99@val-exps G2c9a@body-exp) (if (null? G2c98@vars) G2c9a@body-exp (G2bfc@build-let G2c97@ae G2c98@vars (map (lambda (G2c9f@x) (list 'quote '#f)) G2c98@vars) (G2c2e@build-sequence G2c97@ae (append (map (lambda (G2ca1@lhs G2ca2@rhs) (list 'set! G2ca1@lhs G2ca2@rhs)) G2c98@vars G2c99@val-exps) (list G2c9a@body-exp))))))) (set! G2c36@build-library-letrec* (lambda (G2ca5@ae G2ca6@name G2ca7@vars G2ca8@locs G2ca9@val-exps G2caa@body-exp) (list 'library-letrec* G2ca6@name (map list G2ca7@vars G2ca8@locs G2ca9@val-exps) G2caa@body-exp))) (set! G2c38@build-receive (lambda (G2cb1@ae G2cb2@vars G2cb3@producer G2cb4@body*) (begin (display '"************** in ") (cons 'receive (cons G2cb2@vars (cons G2cb3@producer G2cb4@body*)))))) (begin (set! G2cc2@G2c38@build-receive G2c38@build-receive) (set! G2cc1@G2c36@build-library-letrec* G2c36@build-library-letrec*) (set! G2cc0@G2c34@build-letrec* G2c34@build-letrec*) (set! G2cbf@G2c32@build-letrec G2c32@build-letrec) (set! G2cbe@G2c30@build-void G2c30@build-void) (set! G2cbd@G2c2e@build-sequence G2c2e@build-sequence) (set! G2cbc@G2bfc@build-let G2bfc@build-let) (set! G2cbb@G2bfa@build-case-lambda G2bfa@build-case-lambda) (set! G2cba@G2bf8@build-lambda G2bf8@build-lambda) (set! G2cb9@G2b7e@build-global-define G2b7e@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cd1@set-cons G2cd3@set-union G2cd8@top-mark* G2cda@top-marked? G2cdc@gen-lexical G2cde@gen-global G2ce0@gen-label G2ce2@gen-top-level-label G2ce4@gen-define-label+loc G2ce6@gen-define-label G2cec@G2ce7 G2cee@G2ce9 G2cf0@G2ce8 G2cf3@rib? G2cf5@make-rib G2cf7@rib-sym* G2cf9@rib-mark** G2cfb@rib-label* G2cfd@rib-sealed/freq G2cff@rib-cache G2d01@set-rib-sym*! G2d03@set-rib-mark**! G2d05@set-rib-label*! G2d07@set-rib-sealed/freq! G2d09@set-rib-cache! G2d0b@make-empty-rib G2d0d@make-cache-rib G2d0f@find-label G2d11@extend-rib! G2d13@extend-rib/nc! G2d15@make-rib-map G2d17@seal-rib! G2d19@unseal-rib! G2d1b@make-full-rib G2d21@G2d1c G2d23@G2d1e G2d25@G2d1d G2d28@stx? G2d2a@make-stx G2d2c@stx-expr G2d2e@stx-mark* G2d30@stx-subst* G2d32@stx-ae* G2d34@set-stx-expr! G2d36@set-stx-mark*! G2d38@set-stx-subst*! G2d3a@set-stx-ae*! G2d3c@rp G2d3e@datum->stx G2d40@gen-mark G2d42@anti-mark G2d44@anti-mark? G2d46@join-wraps G2d48@mkstx G2d4a@add-mark G2d4c@add-subst G2d4e@syntax-kind? G2d50@syntax-vector->list G2d52@syntax-pair? G2d54@syntax-vector? G2d56@syntax-null? G2d58@syntax-list? G2d5a@syntax-car G2d5c@syntax-cdr G2d5e@syntax->list G2d60@id? G2d62@id->sym G2d64@same-marks? G2d66@bound-id=? G2d68@free-id=? G2d6a@valid-bound-ids? G2d6c@distinct-bound-ids? G2d6e@bound-id-member? G2d70@self-evaluating? G2d72@strip-annotations G2d74@strip G2d76@stx->datum G2d78@same-marks*? G2d7a@id->label G2d7c@id->real-label G2d7e@label->binding G2d80@make-binding G2d82@binding-type G2d84@binding-value G2d86@raise-unbound-error G2d88@syntax-type G2d98@sanitize-binding G2d9a@make-variable-transformer G2d9c@variable-transformer? G2d9e@variable-transformer-procedure G2da0@make-eval-transformer G2ee3@parse-define G2ee5@parse-define-syntax G2ee7@scheme-stx-hashtable G2ee9@scheme-stx G2eeb@lexical-var G2eed@lexical-mutable? G2eef@set-lexical-mutable! G2ef1@add-lexical G2ef3@add-lexicals G2ef5@letrec-helper G2ef7@letrec-transformer G2ef9@letrec*-transformer G2efb@fluid-let-syntax-transformer G2efd@type-descriptor-transformer G2eff@record-type-descriptor-transformer G2f01@record-constructor-descriptor-transformer G2f03@when-macro G2f05@unless-macro G2f07@if-transformer G2f09@and-transformer G2f0b@or-transformer G2f0d@case-macro G2f0f@quote-transformer G2f11@case-lambda-transformer G2f13@lambda-transformer G2f15@bless G2f17@with-syntax-macro G2f19@invalid-fmls-error G2f1b@let-macro G2f1d@let-values-macro G2f1f@let*-values-macro G2f21@trace-lambda-macro G2f23@trace-define-macro G2f25@trace-define-syntax-macro G2f27@trace-let/rec-syntax G2f29@trace-let-syntax-macro G2f2b@trace-letrec-syntax-macro G2f2d@guard-macro G2f2f@define-enumeration-macro G2f31@time-macro G2f33@delay-macro G2f35@assert-macro G2f37@endianness-macro G2f39@identifier-syntax-macro G2f3b@do-macro G2f3d@let*-macro G2f3f@or-macro G2f41@and-macro G2f43@cond-macro G2f45@do-include G2f47@include-macro G2f49@include-into-macro G2f4b@syntax-rules-macro G2f4d@quasiquote-macro G2f4f@quasisyntax-macro G2f51@define-struct-macro G2f53@define-record-type-macro G2f55@define-condition-type-macro G2f57@incorrect-usage-macro G2f59@parameterize-macro G2f5b@foreign-call-transformer G2f5d@convert-pattern G2f5f@syntax-dispatch G2f61@ellipsis? G2f63@underscore? G2f65@verify-literals G2f67@syntax-case-transformer G2f69@ellipsis-map G2f6b@syntax-transformer G2f6d@core-macro-transformer G2f6f@file-options-macro G2f71@symbol-macro G2f73@macro-transformer G2f75@local-macro-transformer G2f77@do-macro-call G2f79@chi-macro G2f7b@chi-local-macro G2f7d@chi-global-macro G2f7f@chi-expr* G2f81@chi-application G2f83@chi-expr G2f85@chi-set! G2f87@verify-formals G2f89@chi-lambda-clause G2f8b@chi-lambda-clause* G2f8d@chi-defun G2f8f@chi-rhs G2f91@expand-interaction-rhs*/init* G2f93@chi-rhs* G2f95@find-bound=? G2f97@find-dups G2f99@chi-internal G2f9b@parse-module G2fa1@G2f9c G2fa3@G2f9e G2fa5@G2f9d G2fa8@module-interface? G2faa@make-module-interface G2fac@module-interface-first-mark G2fae@module-interface-exp-id-vec G2fb0@module-interface-exp-lab-vec G2fb2@set-module-interface-first-mark! G2fb4@set-module-interface-exp-id-vec! G2fb6@set-module-interface-exp-lab-vec! G2fb8@module-interface-exp-id* G2fba@chi-internal-module G2fbc@chi-body* G2fbe@expand-transformer G2fc0@parse-exports G2fc2@parse-library-name G2fc4@parse-library G2fc6@parse-import-spec* G2fc8@make-top-rib G2fca@make-collector G2fcc@inv-collector G2fce@vis-collector G2fd0@imp-collector G2fd2@chi-library-internal G2fd4@chi-interaction-expr G2fd6@library-body-expander G2fd8@core-library-expander G2fda@parse-top-level-program G2fdc@top-level-expander G2fe2@G2fdd G2fe4@G2fdf G2fe6@G2fde G2fe9@env? G2feb@make-env G2fed@env-names G2fef@env-labels G2ff1@env-itc G2ff3@set-env-names! G2ff5@set-env-labels! G2ff7@set-env-itc! G2ff9@rp G2fff@G2ffa G3001@G2ffc G3003@G2ffb G3006@interaction-env? G3008@make-interaction-env G300a@interaction-env-rib G300c@interaction-env-r G300e@interaction-env-locs G3010@set-interaction-env-rib! G3012@set-interaction-env-r! G3014@set-interaction-env-locs! G3016@rp G3018@interaction-environment-symbols G301a@environment-bindings G301c@parse-binding G301e@environment? G3020@environment-symbols G3022@environment G3024@null-environment G3026@scheme-report-environment G3028@expand G302a@eval G302c@library-expander G302e@boot-library-expand G3030@rev-map-append G3032@build-exports G3034@make-export-subst G3036@make-export-env/macros G3038@generate-temporaries G303a@free-identifier=? G303c@bound-identifier=? G303e@make-source-condition G3040@extract-position-condition G3042@expression-position G3044@assertion-error G3046@syntax-error G3048@syntax-violation* G304a@syntax-violation G304c@identifier? G304e@datum->syntax G3050@syntax->datum G3052@compile-r6rs-top-level G3054@pre-compile-r6rs-top-level G3056@interaction-environment G3058@top-level-context) (begin (set! G2cd1@set-cons (lambda (G3059@x G305a@ls) (if (memq G3059@x G305a@ls) G305a@ls (cons G3059@x G305a@ls)))) (set! G2cd3@set-union (lambda (G305d@ls1 G305e@ls2) (if (null? G305d@ls1) G305e@ls2 (if (memq (car G305d@ls1) G305e@ls2) (G2cd3@set-union (cdr G305d@ls1) G305e@ls2) (cons (car G305d@ls1) (G2cd3@set-union (cdr G305d@ls1) G305e@ls2)))))) (set! G2cd8@top-mark* '(top)) (set! G2cda@top-marked? (lambda (G3061@m*) (memq 'top G3061@m*))) (set! G2cdc@gen-lexical (lambda (G3063@sym) (if (symbol? G3063@sym) (gensym G3063@sym) (if (G2d28@stx? G3063@sym) (G2cdc@gen-lexical (G2d62@id->sym G3063@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3063@sym))))) (set! G2cde@gen-global (lambda (G3065@x) (G2cdc@gen-lexical G3065@x))) (set! G2ce0@gen-label (lambda (G3067@_) (gensym))) (set! G2ce2@gen-top-level-label (lambda (G3069@id G306a@rib) ((lambda (G306e@find) (begin (set! G306e@find (lambda (G3079@sym G307a@mark* G307b@sym* G307c@mark** G307d@label*) (and (pair? G307b@sym*) (if (and (eq? G3079@sym (car G307b@sym*)) (G2d64@same-marks? G307a@mark* (car G307c@mark**))) (car G307d@label*) (G306e@find G3079@sym G307a@mark* (cdr G307b@sym*) (cdr G307c@mark**) (cdr G307d@label*)))))) ((lambda (G306f@sym G3070@mark*) ((lambda (G3073@sym*) ((lambda (G3075@t) (if G3075@t ((lambda (G3077@label) (if (G2b76@G2a1c@imported-label->binding G3077@label) (gensym) G3077@label)) G3075@t) (gensym))) (and (memq G306f@sym (G2cf7@rib-sym* G306a@rib)) (G306e@find G306f@sym G3070@mark* G3073@sym* (G2cf9@rib-mark** G306a@rib) (G2cfb@rib-label* G306a@rib))))) (G2cf7@rib-sym* G306a@rib))) (G2d62@id->sym G3069@id) (G2d2e@stx-mark* G3069@id)))) '#f))) (set! G2ce4@gen-define-label+loc (lambda (G3083@id G3084@rib) ((lambda (G3087@t) (if G3087@t ((lambda (G3089@env) ((lambda (G308b@label G308c@locs) (values G308b@label ((lambda (G308f@t) (if G308f@t (cdr G308f@t) ((lambda (G3091@loc) (begin (G3014@set-interaction-env-locs! G3089@env (cons (cons G308b@label G3091@loc) G308c@locs)) G3091@loc)) (G2cdc@gen-lexical G3083@id)))) (assq G308b@label G308c@locs)))) (G2ce2@gen-top-level-label G3083@id G3084@rib) (G300e@interaction-env-locs G3089@env))) G3087@t) (values (gensym) (G2cdc@gen-lexical G3083@id)))) (G3058@top-level-context)))) (set! G2ce6@gen-define-label (lambda (G3093@id G3094@rib) (if (G3058@top-level-context) (G2ce2@gen-top-level-label G3093@id G3094@rib) (gensym)))) (set! G2cec@G2ce7 (make-record-type-descriptor 'rib '#f 'G2cea '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cee@G2ce9 '#f) (set! G2cf0@G2ce8 (make-record-constructor-descriptor G2cec@G2ce7 '#f G2cee@G2ce9)) (set! G2cf3@rib? (record-predicate G2cec@G2ce7)) (set! G2cf5@make-rib (record-constructor G2cf0@G2ce8)) (set! G2cf7@rib-sym* (record-accessor G2cec@G2ce7 '0)) (set! G2cf9@rib-mark** (record-accessor G2cec@G2ce7 '1)) (set! G2cfb@rib-label* (record-accessor G2cec@G2ce7 '2)) (set! G2cfd@rib-sealed/freq (record-accessor G2cec@G2ce7 '3)) (set! G2cff@rib-cache (record-accessor G2cec@G2ce7 '4)) (set! G2d01@set-rib-sym*! (record-mutator G2cec@G2ce7 '0)) (set! G2d03@set-rib-mark**! (record-mutator G2cec@G2ce7 '1)) (set! G2d05@set-rib-label*! (record-mutator G2cec@G2ce7 '2)) (set! G2d07@set-rib-sealed/freq! (record-mutator G2cec@G2ce7 '3)) (set! G2d09@set-rib-cache! (record-mutator G2cec@G2ce7 '4)) (set! G2d0b@make-empty-rib (lambda () (G2cf5@make-rib '() '() '() '#f '#f))) (set! G2d0d@make-cache-rib (lambda () (G2cf5@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d0f@find-label (lambda (G3097@rib G3098@sym G3099@mark*) ((lambda (G309d@ht) (and G309d@ht ((lambda (G309f@cv) ((lambda (G30a1@t) (if G30a1@t (cdr G30a1@t) '#f)) (and G309f@cv (assp (lambda (G30a3@m) (G2d64@same-marks? G3099@mark* G30a3@m)) G309f@cv)))) (hashtable-ref G309d@ht G3098@sym '#f)))) (G2cff@rib-cache G3097@rib)))) (set! G2d11@extend-rib! (lambda (G30a5@rib G30a6@id G30a7@label) ((lambda (G30ac@find) (begin (set! G30ac@find (lambda (G30bd@sym G30be@mark* G30bf@sym* G30c0@mark** G30c1@label*) (and (pair? G30bf@sym*) (if (and (eq? G30bd@sym (car G30bf@sym*)) (G2d64@same-marks? G30be@mark* (car G30c0@mark**))) G30c1@label* (G30ac@find G30bd@sym G30be@mark* (cdr G30bf@sym*) (cdr G30c0@mark**) (cdr G30c1@label*)))))) (begin (if (G2cfd@rib-sealed/freq G30a5@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30a5@rib) (void)) ((lambda (G30ad@sym G30ae@mark*) ((lambda (G30b1@sym*) ((lambda (G30b3@t) (if G30b3@t ((lambda (G30b5@p) (if (not (eq? G30a7@label G30b5@p)) (G304a@syntax-violation '#f '"multiple definitions of identifier" G30a6@id) (void))) G30b3@t) ((lambda (G30b7@t) (if G30b7@t ((lambda (G30b9@p) (if (not (eq? G30a7@label (car G30b9@p))) (if (G3058@top-level-context) (set-car! G30b9@p G30a7@label) (G304a@syntax-violation '#f '"multiple definitions of identifier" G30a6@id)) (void))) G30b7@t) (begin (if (G2cff@rib-cache G30a5@rib) (hashtable-update! (G2cff@rib-cache G30a5@rib) G30ad@sym (lambda (G30bb@e) (cons (cons G30ae@mark* G30a7@label) G30bb@e)) '()) (void)) (G2d01@set-rib-sym*! G30a5@rib (cons G30ad@sym G30b1@sym*)) (G2d03@set-rib-mark**! G30a5@rib (cons G30ae@mark* (G2cf9@rib-mark** G30a5@rib))) (G2d05@set-rib-label*! G30a5@rib (cons G30a7@label (G2cfb@rib-label* G30a5@rib)))))) (and (memq G30ad@sym (G2cf7@rib-sym* G30a5@rib)) (G30ac@find G30ad@sym G30ae@mark* G30b1@sym* (G2cf9@rib-mark** G30a5@rib) (G2cfb@rib-label* G30a5@rib)))))) (G2d0f@find-label G30a5@rib G30ad@sym G30ae@mark*))) (G2cf7@rib-sym* G30a5@rib))) (G2d62@id->sym G30a6@id) (G2d2e@stx-mark* G30a6@id))))) '#f))) (set! G2d13@extend-rib/nc! (lambda (G30c7@rib G30c8@id G30c9@label) ((lambda (G30cd@sym G30ce@mark*) ((lambda (G30d1@sym*) (begin (if (G2cff@rib-cache G30c7@rib) (hashtable-update! (G2cff@rib-cache G30c7@rib) G30cd@sym (lambda (G30d3@e) (cons (cons G30ce@mark* G30c9@label) G30d3@e)) '()) (void)) (G2d01@set-rib-sym*! G30c7@rib (cons G30cd@sym G30d1@sym*)) (G2d03@set-rib-mark**! G30c7@rib (cons G30ce@mark* (G2cf9@rib-mark** G30c7@rib))) (G2d05@set-rib-label*! G30c7@rib (cons G30c9@label (G2cfb@rib-label* G30c7@rib))))) (G2cf7@rib-sym* G30c7@rib))) (G2d62@id->sym G30c8@id) (G2d2e@stx-mark* G30c8@id)))) (set! G2d15@make-rib-map (lambda (G30d5@sym*) ((lambda (G30d7@ht) ((letrec ((G30d9@f (lambda (G30db@i G30dc@sym*) (if (null? G30dc@sym*) G30d7@ht (begin (hashtable-update! G30d7@ht (car G30dc@sym*) (lambda (G30df@x) (cons G30db@i G30df@x)) '()) (G30d9@f (+ G30db@i '1) (cdr G30dc@sym*))))))) G30d9@f) '0 G30d5@sym*)) (make-eq-hashtable)))) (set! G2d17@seal-rib! (lambda (G30e1@rib) ((lambda (G30e3@sym*) (if (not (null? G30e3@sym*)) (begin (G2d01@set-rib-sym*! G30e1@rib (list->vector G30e3@sym*)) (G2d03@set-rib-mark**! G30e1@rib (list->vector (G2cf9@rib-mark** G30e1@rib))) (G2d05@set-rib-label*! G30e1@rib (list->vector (G2cfb@rib-label* G30e1@rib))) (G2d07@set-rib-sealed/freq! G30e1@rib (G2d15@make-rib-map G30e3@sym*))) (void))) (G2cf7@rib-sym* G30e1@rib)))) (set! G2d19@unseal-rib! (lambda (G30e5@rib) (if (G2cfd@rib-sealed/freq G30e5@rib) (begin (G2d07@set-rib-sealed/freq! G30e5@rib '#f) (G2d01@set-rib-sym*! G30e5@rib (vector->list (G2cf7@rib-sym* G30e5@rib))) (G2d03@set-rib-mark**! G30e5@rib (vector->list (G2cf9@rib-mark** G30e5@rib))) (G2d05@set-rib-label*! G30e5@rib (vector->list (G2cfb@rib-label* G30e5@rib)))) (void)))) (set! G2d1b@make-full-rib (lambda (G30e7@id* G30e8@label*) ((lambda (G30eb@r) (begin (G2d17@seal-rib! G30eb@r) G30eb@r)) (G2cf5@make-rib (map G2d62@id->sym G30e7@id*) (map G2d2e@stx-mark* G30e7@id*) G30e8@label* '#f '#f)))) (set! G2d21@G2d1c (make-record-type-descriptor 'stx '#f 'G2d1f '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d23@G2d1e '#f) (set! G2d25@G2d1d (make-record-constructor-descriptor G2d21@G2d1c '#f G2d23@G2d1e)) (set! G2d28@stx? (record-predicate G2d21@G2d1c)) (set! G2d2a@make-stx (record-constructor G2d25@G2d1d)) (set! G2d2c@stx-expr (record-accessor G2d21@G2d1c '0)) (set! G2d2e@stx-mark* (record-accessor G2d21@G2d1c '1)) (set! G2d30@stx-subst* (record-accessor G2d21@G2d1c '2)) (set! G2d32@stx-ae* (record-accessor G2d21@G2d1c '3)) (set! G2d34@set-stx-expr! (record-mutator G2d21@G2d1c '0)) (set! G2d36@set-stx-mark*! (record-mutator G2d21@G2d1c '1)) (set! G2d38@set-stx-subst*! (record-mutator G2d21@G2d1c '2)) (set! G2d3a@set-stx-ae*! (record-mutator G2d21@G2d1c '3)) (set! G2d3c@rp (G28f9@G282c@make-record-printer 'stx (lambda (G30ed@x G30ee@p G30ef@wr) (begin (display '"#<syntax " G30ee@p) (write (G2d76@stx->datum G30ed@x) G30ee@p) ((lambda (G30f3@expr) (if (G28f1@G281c@annotation? G30f3@expr) ((lambda (G30f5@src) (if (pair? G30f5@src) (begin (display '" [" G30ee@p) (display (cdr G30f5@src) G30ee@p) (display '" of " G30ee@p) (display (car G30f5@src) G30ee@p) (display '"]" G30ee@p)) (void))) (G28f2@G281e@annotation-source G30f3@expr)) (void))) (G2d2c@stx-expr G30ed@x)) (display '">" G30ee@p))))) (set! G2d3e@datum->stx (lambda (G30f7@id G30f8@datum) (G2d2a@make-stx G30f8@datum (G2d2e@stx-mark* G30f7@id) (G2d30@stx-subst* G30f7@id) (G2d32@stx-ae* G30f7@id)))) (set! G2d40@gen-mark (lambda () (string '#\m))) (set! G2d42@anti-mark '#f) (set! G2d44@anti-mark? not) (set! G2d46@join-wraps (lambda (G30fb@m1* G30fc@s1* G30fd@ae1* G30fe@e) ((lambda (G3104@cancel) (begin (set! G3104@cancel (lambda (G310b@ls1 G310c@ls2) ((letrec ((G310f@f (lambda (G3111@x G3112@ls1) (if (null? G3112@ls1) (cdr G310c@ls2) (cons G3111@x (G310f@f (car G3112@ls1) (cdr G3112@ls1))))))) G310f@f) (car G310b@ls1) (cdr G310b@ls1)))) ((lambda (G3105@m2* G3106@s2* G3107@ae2*) (if (and (not (null? G30fb@m1*)) (not (null? G3105@m2*)) (G2d44@anti-mark? (car G3105@m2*))) (values (G3104@cancel G30fb@m1* G3105@m2*) (G3104@cancel G30fc@s1* G3106@s2*) (G3104@cancel G30fd@ae1* G3107@ae2*)) (values (append G30fb@m1* G3105@m2*) (append G30fc@s1* G3106@s2*) (append G30fd@ae1* G3107@ae2*)))) (G2d2e@stx-mark* G30fe@e) (G2d30@stx-subst* G30fe@e) (G2d32@stx-ae* G30fe@e)))) '#f))) (set! G2d48@mkstx (lambda (G3115@e G3116@m* G3117@s* G3118@ae*) (if (and (G2d28@stx? G3115@e) (not (G2cda@top-marked? G3116@m*))) (call-with-values (lambda () (G2d46@join-wraps G3116@m* G3117@s* G3118@ae* G3115@e)) (lambda (G3120@G311d G3121@G311e G3122@G311f) ((lambda (G3126@ae* G3127@s* G3128@m*) (G2d2a@make-stx (G2d2c@stx-expr G3115@e) G3128@m* G3127@s* G3126@ae*)) G3122@G311f G3121@G311e G3120@G311d))) (G2d2a@make-stx G3115@e G3116@m* G3117@s* G3118@ae*)))) (set! G2d4a@add-mark (lambda (G312c@m G312d@e G312e@ae) (G2d48@mkstx G312d@e (list G312c@m) '(shift) (list G312e@ae)))) (set! G2d4c@add-subst (lambda (G3132@subst G3133@e) (G2d48@mkstx G3133@e '() (list G3132@subst) '()))) (set! G2d4e@syntax-kind? (lambda (G3136@x G3137@p?) (if (G2d28@stx? G3136@x) (G2d4e@syntax-kind? (G2d2c@stx-expr G3136@x) G3137@p?) (if (G28f1@G281c@annotation? G3136@x) (G2d4e@syntax-kind? (G28f3@G2820@annotation-expression G3136@x) G3137@p?) (G3137@p? G3136@x))))) (set! G2d50@syntax-vector->list (lambda (G313a@x) (if (G2d28@stx? G313a@x) ((lambda (G313c@ls G313d@m* G313e@s* G313f@ae*) (map (lambda (G3144@x) (G2d48@mkstx G3144@x G313d@m* G313e@s* G313f@ae*)) G313c@ls)) (G2d50@syntax-vector->list (G2d2c@stx-expr G313a@x)) (G2d2e@stx-mark* G313a@x) (G2d30@stx-subst* G313a@x) (G2d32@stx-ae* G313a@x)) (if (G28f1@G281c@annotation? G313a@x) (G2d50@syntax-vector->list (G28f3@G2820@annotation-expression G313a@x)) (if (vector? G313a@x) (vector->list G313a@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G313a@x)))))) (set! G2d52@syntax-pair? (lambda (G3146@x) (G2d4e@syntax-kind? G3146@x pair?))) (set! G2d54@syntax-vector? (lambda (G3148@x) (G2d4e@syntax-kind? G3148@x vector?))) (set! G2d56@syntax-null? (lambda (G314a@x) (G2d4e@syntax-kind? G314a@x null?))) (set! G2d58@syntax-list? (lambda (G314c@x) (or (G2d56@syntax-null? G314c@x) (and (G2d52@syntax-pair? G314c@x) (G2d58@syntax-list? (G2d5c@syntax-cdr G314c@x)))))) (set! G2d5a@syntax-car (lambda (G314e@x) (if (G2d28@stx? G314e@x) (G2d48@mkstx (G2d5a@syntax-car (G2d2c@stx-expr G314e@x)) (G2d2e@stx-mark* G314e@x) (G2d30@stx-subst* G314e@x) (G2d32@stx-ae* G314e@x)) (if (G28f1@G281c@annotation? G314e@x) (G2d5a@syntax-car (G28f3@G2820@annotation-expression G314e@x)) (if (pair? G314e@x) (car G314e@x) (assertion-violation 'syntax-car '"BUG: not a pair" G314e@x)))))) (set! G2d5c@syntax-cdr (lambda (G3150@x) (if (G2d28@stx? G3150@x) (G2d48@mkstx (G2d5c@syntax-cdr (G2d2c@stx-expr G3150@x)) (G2d2e@stx-mark* G3150@x) (G2d30@stx-subst* G3150@x) (G2d32@stx-ae* G3150@x)) (if (G28f1@G281c@annotation? G3150@x) (G2d5c@syntax-cdr (G28f3@G2820@annotation-expression G3150@x)) (if (pair? G3150@x) (cdr G3150@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3150@x)))))) (set! G2d5e@syntax->list (lambda (G3152@x) (if (G2d52@syntax-pair? G3152@x) (cons (G2d5a@syntax-car G3152@x) (G2d5e@syntax->list (G2d5c@syntax-cdr G3152@x))) (if (G2d56@syntax-null? G3152@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3152@x))))) (set! G2d60@id? (lambda (G3154@x) (and (G2d28@stx? G3154@x) ((lambda (G3156@expr) (symbol? (if (G28f1@G281c@annotation? G3156@expr) (G28f0@G281a@annotation-stripped G3156@expr) G3156@expr))) (G2d2c@stx-expr G3154@x))))) (set! G2d62@id->sym (lambda (G3158@x) (begin (if (not (G2d28@stx? G3158@x)) (error 'id->sym '"BUG in ikarus: not an id" G3158@x) (void)) ((lambda (G315a@expr) ((lambda (G315c@sym) (if (symbol? G315c@sym) G315c@sym (error 'id->sym '"BUG in ikarus: not an id" G3158@x))) (if (G28f1@G281c@annotation? G315a@expr) (G28f0@G281a@annotation-stripped G315a@expr) G315a@expr))) (G2d2c@stx-expr G3158@x))))) (set! G2d64@same-marks? (lambda (G315e@x G315f@y) (or (and (null? G315e@x) (null? G315f@y)) (and (pair? G315e@x) (pair? G315f@y) (eq? (car G315e@x) (car G315f@y)) (G2d64@same-marks? (cdr G315e@x) (cdr G315f@y)))))) (set! G2d66@bound-id=? (lambda (G3162@x G3163@y) (and (eq? (G2d62@id->sym G3162@x) (G2d62@id->sym G3163@y)) (G2d64@same-marks? (G2d2e@stx-mark* G3162@x) (G2d2e@stx-mark* G3163@y))))) (set! G2d68@free-id=? (lambda (G3166@i G3167@j) ((lambda (G316a@t0 G316b@t1) (if (or G316a@t0 G316b@t1) (eq? G316a@t0 G316b@t1) (eq? (G2d62@id->sym G3166@i) (G2d62@id->sym G3167@j)))) (G2d7c@id->real-label G3166@i) (G2d7c@id->real-label G3167@j)))) (set! G2d6a@valid-bound-ids? (lambda (G316e@id*) (and (for-all G2d60@id? G316e@id*) (G2d6c@distinct-bound-ids? G316e@id*)))) (set! G2d6c@distinct-bound-ids? (lambda (G3170@id*) (or (null? G3170@id*) (and (not (G2d6e@bound-id-member? (car G3170@id*) (cdr G3170@id*))) (G2d6c@distinct-bound-ids? (cdr G3170@id*)))))) (set! G2d6e@bound-id-member? (lambda (G3172@id G3173@id*) (and (pair? G3173@id*) (or (G2d66@bound-id=? G3172@id (car G3173@id*)) (G2d6e@bound-id-member? G3172@id (cdr G3173@id*)))))) (set! G2d70@self-evaluating? (lambda (G3176@x) (or (number? G3176@x) (string? G3176@x) (char? G3176@x) (boolean? G3176@x) (regexp? G3176@x) (bytevector? G3176@x)))) (set! G2d72@strip-annotations (lambda (G3178@x) (if (pair? G3178@x) (cons (G2d72@strip-annotations (car G3178@x)) (G2d72@strip-annotations (cdr G3178@x))) (if (vector? G3178@x) (vector-map G2d72@strip-annotations G3178@x) (if (G28f1@G281c@annotation? G3178@x) (G28f0@G281a@annotation-stripped G3178@x) G3178@x))))) (set! G2d74@strip (lambda (G317a@x G317b@m*) (if (G2cda@top-marked? G317b@m*) (if (or (G28f1@G281c@annotation? G317a@x) (and (pair? G317a@x) (G28f1@G281c@annotation? (car G317a@x))) (and (vector? G317a@x) (> (vector-length G317a@x) '0) (G28f1@G281c@annotation? (vector-ref G317a@x '0)))) (G2d72@strip-annotations G317a@x) G317a@x) ((letrec ((G317e@f (lambda (G3180@x) (if (G2d28@stx? G3180@x) (G2d74@strip (G2d2c@stx-expr G3180@x) (G2d2e@stx-mark* G3180@x)) (if (G28f1@G281c@annotation? G3180@x) (G28f0@G281a@annotation-stripped G3180@x) (if (pair? G3180@x) ((lambda (G3182@a G3183@d) (if (and (eq? G3182@a (car G3180@x)) (eq? G3183@d (cdr G3180@x))) G3180@x (cons G3182@a G3183@d))) (G317e@f (car G3180@x)) (G317e@f (cdr G3180@x))) (if (vector? G3180@x) ((lambda (G3186@old) ((lambda (G3188@new) (if (for-all eq? G3186@old G3188@new) G3180@x (list->vector G3188@new))) (map G317e@f G3186@old))) (vector->list G3180@x)) G3180@x))))))) G317e@f) G317a@x)))) (set! G2d76@stx->datum (lambda (G318a@x) (G2d74@strip G318a@x '()))) (set! G2d78@same-marks*? (lambda (G318c@mark* G318d@mark** G318e@si) (if (null? G318e@si) '#f (if (G2d64@same-marks? G318c@mark* (vector-ref G318d@mark** (car G318e@si))) (car G318e@si) (G2d78@same-marks*? G318c@mark* G318d@mark** (cdr G318e@si)))))) (set! G2d7a@id->label (lambda (G3192@id) (or (G2d7c@id->real-label G3192@id) ((lambda (G3194@t) (if G3194@t ((lambda (G3196@env) ((lambda (G3198@rib) (call-with-values (lambda () (G2ce4@gen-define-label+loc G3192@id G3198@rib)) (lambda (G319c@G319a G319d@G319b) ((lambda (G31a0@loc_ G31a1@lab) (begin (G2d11@extend-rib! G3198@rib G3192@id G31a1@lab) G31a1@lab)) G319d@G319b G319c@G319a)))) (G300a@interaction-env-rib G3196@env))) G3194@t) '#f)) (G3058@top-level-context))))) (set! G2d7c@id->real-label (lambda (G31a4@id) ((lambda (G31a6@sym) ((letrec ((G31a8@search (lambda (G31aa@subst* G31ab@mark*) (if (null? G31aa@subst*) '#f (if (eq? (car G31aa@subst*) 'shift) (G31a8@search (cdr G31aa@subst*) (cdr G31ab@mark*)) ((lambda (G31ae@rib) ((lambda (G31b0@t) (if G31b0@t ((lambda (G31b2@ht) ((lambda (G31b4@si) ((lambda (G31b6@i) (if G31b6@i (vector-ref (G2cfb@rib-label* G31ae@rib) G31b6@i) (G31a8@search (cdr G31aa@subst*) G31ab@mark*))) (and G31b4@si (G2d78@same-marks*? G31ab@mark* (G2cf9@rib-mark** G31ae@rib) (reverse G31b4@si))))) (hashtable-ref G31b2@ht G31a6@sym '#f))) G31b0@t) (or (G2d0f@find-label G31ae@rib G31a6@sym G31ab@mark*) ((letrec ((G31b8@f (lambda (G31ba@sym* G31bb@mark** G31bc@label*) (if (null? G31ba@sym*) (G31a8@search (cdr G31aa@subst*) G31ab@mark*) (if (and (eq? (car G31ba@sym*) G31a6@sym) (G2d64@same-marks? (car G31bb@mark**) G31ab@mark*)) (car G31bc@label*) (G31b8@f (cdr G31ba@sym*) (cdr G31bb@mark**) (cdr G31bc@label*))))))) G31b8@f) (G2cf7@rib-sym* G31ae@rib) (G2cf9@rib-mark** G31ae@rib) (G2cfb@rib-label* G31ae@rib))))) (G2cfd@rib-sealed/freq G31ae@rib))) (car G31aa@subst*))))))) G31a8@search) (G2d30@stx-subst* G31a4@id) (G2d2e@stx-mark* G31a4@id))) (G2d62@id->sym G31a4@id)))) (set! G2d7e@label->binding (lambda (G31c0@x G31c1@r) ((lambda (G31c4@t) (if G31c4@t ((lambda (G31c6@b) (if (and (pair? G31c6@b) (eq? (car G31c6@b) '$core-rtd)) (cons '$rtd (map G2f15@bless (cdr G31c6@b))) (if (and (pair? G31c6@b) (eq? (car G31c6@b) 'global-rtd)) ((lambda (G31c8@lib G31c9@loc) (cons '$rtd (symbol-value G31c9@loc))) (cadr G31c6@b) (cddr G31c6@b)) G31c6@b))) G31c4@t) ((lambda (G31cc@t) (if G31cc@t (cdr G31cc@t) ((lambda (G31ce@t) (if G31ce@t ((lambda (G31d0@env) ((lambda (G31d2@t) (if G31d2@t ((lambda (G31d4@p) (cons* 'lexical (cdr G31d4@p) '#f)) G31d2@t) '(displaced-lexical . #f))) (assq G31c0@x (G300e@interaction-env-locs G31d0@env)))) G31ce@t) '(displaced-lexical . #f))) (G3058@top-level-context)))) (assq G31c0@x G31c1@r)))) (G2b76@G2a1c@imported-label->binding G31c0@x)))) (set! G2d80@make-binding cons) (set! G2d82@binding-type car) (set! G2d84@binding-value cdr) (set! G2d86@raise-unbound-error (lambda (G31d6@id) (G3048@syntax-violation* '#f '"unbound identifier" G31d6@id (G4c82@G4acc@make-undefined-violation)))) (set! G2d88@syntax-type (lambda (G31d8@e G31d9@r) (if (G2d60@id? G31d8@e) ((lambda (G31dc@id) ((lambda (G31de@label) ((lambda (G31e0@b) ((lambda (G31e2@type) ((lambda () (begin (if (not G31de@label) (G2d86@raise-unbound-error G31dc@id) (void)) ((lambda (G31e4@t) (if (memv G31e4@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31e2@type (G2d84@binding-value G31e0@b) G31dc@id) (values 'other '#f '#f))) G31e2@type))))) (G2d82@binding-type G31e0@b))) (G2d7e@label->binding G31de@label G31d9@r))) (G2d7a@id->label G31dc@id))) G31d8@e) (if (G2d52@syntax-pair? G31d8@e) ((lambda (G31e6@id) (if (G2d60@id? G31e6@id) ((lambda (G31e8@label) ((lambda (G31ea@b) ((lambda (G31ec@type) ((lambda () (begin (if (not G31e8@label) (G2d86@raise-unbound-error G31e6@id) (void)) ((lambda (G31ee@t) (if (memv G31ee@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31ec@type (G2d84@binding-value G31ea@b) G31e6@id) (values 'call '#f '#f))) G31ec@type))))) (G2d82@binding-type G31ea@b))) (G2d7e@label->binding G31e8@label G31d9@r))) (G2d7a@id->label G31e6@id)) (values 'call '#f '#f))) (G2d5a@syntax-car G31d8@e)) ((lambda (G31f0@d) (if (G2d70@self-evaluating? G31f0@d) (values 'constant G31f0@d '#f) (values 'other '#f '#f))) (G2d76@stx->datum G31d8@e)))))) (set! G2d98@sanitize-binding (lambda (G31f2@x G31f3@src) (if (procedure? G31f2@x) (cons* 'local-macro G31f2@x G31f3@src) (if (and (pair? G31f2@x) (eq? (car G31f2@x) 'macro!) (procedure? (cdr G31f2@x))) (cons* 'local-macro! (cdr G31f2@x) G31f3@src) (if (and (pair? G31f2@x) (eq? (car G31f2@x) '$rtd)) G31f2@x (assertion-violation 'expand '"invalid transformer" G31f2@x)))))) (set! G2d9a@make-variable-transformer (lambda (G31f6@x) (if (procedure? G31f6@x) (cons 'macro! G31f6@x) (assertion-violation 'make-variable-transformer '"not a procedure" G31f6@x)))) (set! G2d9c@variable-transformer? (lambda (G31f8@x) (and (pair? G31f8@x) (eq? (car G31f8@x) 'macro!) (procedure? (cdr G31f8@x))))) (set! G2d9e@variable-transformer-procedure (lambda (G31fa@x) (if (G2d9c@variable-transformer? G31fa@x) (cdr G31fa@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G31fa@x)))) (set! G2da0@make-eval-transformer (lambda (G31fc@x) (G2d98@sanitize-binding (eval-core (G2950@G2908@expanded->core G31fc@x)) G31fc@x))) (set! G2ee3@parse-define (lambda (G31fe@x) ((lambda (G3200@t) ((lambda (G3202@ls/false) (if (and G3202@ls/false (apply (lambda (G3204@id G3205@fmls G3206@b G3207@b*) (G2d60@id? G3204@id)) G3202@ls/false)) (apply (lambda (G320c@id G320d@fmls G320e@b G320f@b*) (begin (G2f87@verify-formals G320d@fmls G31fe@x) (values G320c@id (cons 'defun (cons G320d@fmls (cons G320e@b G320f@b*)))))) G3202@ls/false) ((lambda (G3214@t) ((lambda (G3216@ls/false) (if (and G3216@ls/false (apply (lambda (G3218@id G3219@val) (G2d60@id? G3218@id)) G3216@ls/false)) (apply (lambda (G321c@id G321d@val) (values G321c@id (cons 'expr G321d@val))) G3216@ls/false) ((lambda (G3220@t) ((lambda (G3222@ls/false) (if (and G3222@ls/false (apply (lambda (G3224@id) (G2d60@id? G3224@id)) G3222@ls/false)) (apply (lambda (G3226@id) (values G3226@id (cons 'expr (G2f15@bless '(void))))) G3222@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3220@t))) (G2f5f@syntax-dispatch G3220@t '(_ any)))) G3214@t))) (G2f5f@syntax-dispatch G3214@t '(_ any any)))) G3200@t))) (G2f5f@syntax-dispatch G3200@t '(_ (any . any) any . each-any)))) G31fe@x))) (set! G2ee5@parse-define-syntax (lambda (G3228@x) ((lambda (G322a@t) ((lambda (G322c@ls/false) (if (and G322c@ls/false (apply (lambda (G322e@id G322f@val) (G2d60@id? G322e@id)) G322c@ls/false)) (apply (lambda (G3232@id G3233@val) (values G3232@id G3233@val)) G322c@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G322a@t))) (G2f5f@syntax-dispatch G322a@t '(_ any any)))) G3228@x))) (set! G2ee7@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ee9@scheme-stx (lambda (G3236@sym) (or (hashtable-ref G2ee7@scheme-stx-hashtable G3236@sym '#f) ((lambda (G3238@subst) ((lambda (G323a@stx) ((lambda (G323c@stx) ((lambda () (begin (hashtable-set! G2ee7@scheme-stx-hashtable G3236@sym G323c@stx) G323c@stx)))) ((lambda (G323e@t) (if G323e@t ((lambda (G3240@x) ((lambda (G3242@name G3243@label) (G2d4c@add-subst (G2cf5@make-rib (list G3242@name) (list G2cd8@top-mark*) (list G3243@label) '#f '#f) G323a@stx)) (car G3240@x) (cdr G3240@x))) G323e@t) G323a@stx)) (assq G3236@sym G3238@subst)))) (G2d2a@make-stx G3236@sym G2cd8@top-mark* '() '()))) (G2b4c@G29c8@library-subst (G2b70@G2a10@find-library-by-name '(psyntax system $all))))))) (set! G2eeb@lexical-var car) (set! G2eed@lexical-mutable? cdr) (set! G2eef@set-lexical-mutable! set-cdr!) (set! G2ef1@add-lexical (lambda (G3246@lab G3247@lex G3248@r) (cons (cons* G3246@lab 'lexical G3247@lex '#f) G3248@r))) (set! G2ef3@add-lexicals (lambda (G324c@lab* G324d@lex* G324e@r) (if (null? G324c@lab*) G324e@r (G2ef3@add-lexicals (cdr G324c@lab*) (cdr G324d@lex*) (G2ef1@add-lexical (car G324c@lab*) (car G324d@lex*) G324e@r))))) (set! G2ef5@letrec-helper (lambda (G3252@e G3253@r G3254@mr G3255@build) ((lambda (G325a@t) ((lambda (G325c@ls/false) (if G325c@ls/false (apply (lambda (G325e@lhs* G325f@rhs* G3260@b G3261@b*) (if (not (G2d6a@valid-bound-ids? G325e@lhs*)) (G2f19@invalid-fmls-error G3252@e G325e@lhs*) ((lambda (G3266@lex* G3267@lab*) ((lambda (G326a@rib G326b@r) ((lambda (G326e@body G326f@rhs*) (G3255@build '#f G3266@lex* G326f@rhs* G326e@body)) (G2f99@chi-internal (G2d4c@add-subst G326a@rib (cons G3260@b G3261@b*)) G326b@r G3254@mr) (G2f7f@chi-expr* (map (lambda (G3272@x) (G2d4c@add-subst G326a@rib G3272@x)) G325f@rhs*) G326b@r G3254@mr))) (G2d1b@make-full-rib G325e@lhs* G3267@lab*) (G2ef3@add-lexicals G3267@lab* G3266@lex* G3253@r))) (map G2cdc@gen-lexical G325e@lhs*) (map G2ce0@gen-label G325e@lhs*)))) G325c@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G325a@t))) (G2f5f@syntax-dispatch G325a@t '(_ #(each (any any)) any . each-any)))) G3252@e))) (set! G2ef7@letrec-transformer (lambda (G3274@e G3275@r G3276@mr) (G2ef5@letrec-helper G3274@e G3275@r G3276@mr G2cbf@G2c32@build-letrec))) (set! G2ef9@letrec*-transformer (lambda (G327a@e G327b@r G327c@mr) (G2ef5@letrec-helper G327a@e G327b@r G327c@mr G2cc0@G2c34@build-letrec*))) (set! G2efb@fluid-let-syntax-transformer (lambda (G3280@e G3281@r G3282@mr) ((lambda (G3287@lookup) (begin (set! G3287@lookup (lambda (G329a@x) (or (G2d7a@id->label G329a@x) (G304a@syntax-violation '#f '"unbound identifier" G3280@e G329a@x)))) ((lambda (G3288@t) ((lambda (G328a@ls/false) (if G328a@ls/false (apply (lambda (G328c@lhs* G328d@rhs* G328e@b G328f@b*) (if (not (G2d6a@valid-bound-ids? G328c@lhs*)) (G2f19@invalid-fmls-error G3280@e G328c@lhs*) ((lambda (G3294@lab* G3295@rhs*) (G2f99@chi-internal (cons G328e@b G328f@b*) (append (map cons G3294@lab* G3295@rhs*) G3281@r) (append (map cons G3294@lab* G3295@rhs*) G3282@mr))) (map G3287@lookup G328c@lhs*) (map (lambda (G3298@x) (G2da0@make-eval-transformer (G2fbe@expand-transformer G3298@x G3282@mr))) G328d@rhs*)))) G328a@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3288@t))) (G2f5f@syntax-dispatch G3288@t '(_ #(each (any any)) any . each-any)))) G3280@e))) '#f))) (set! G2efd@type-descriptor-transformer (lambda (G329c@e G329d@r G329e@mr) ((lambda (G32a2@t) ((lambda (G32a4@ls/false) (if (and G32a4@ls/false (apply (lambda (G32a6@id) (G2d60@id? G32a6@id)) G32a4@ls/false)) (apply (lambda (G32a8@id) ((lambda (G32aa@lab) ((lambda (G32ac@b) ((lambda (G32ae@type) ((lambda () (begin (if (not G32aa@lab) (G2d86@raise-unbound-error G32a8@id) (void)) (if (not (and (eq? G32ae@type '$rtd) (not (list? (G2d84@binding-value G32ac@b))))) (G304a@syntax-violation '#f '"not a record type" G329c@e) (void)) (list 'quote (G2d84@binding-value G32ac@b)))))) (G2d82@binding-type G32ac@b))) (G2d7e@label->binding G32aa@lab G329d@r))) (G2d7a@id->label G32a8@id))) G32a4@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G32a2@t))) (G2f5f@syntax-dispatch G32a2@t '(_ any)))) G329c@e))) (set! G2eff@record-type-descriptor-transformer (lambda (G32b0@e G32b1@r G32b2@mr) ((lambda (G32b6@t) ((lambda (G32b8@ls/false) (if (and G32b8@ls/false (apply (lambda (G32ba@id) (G2d60@id? G32ba@id)) G32b8@ls/false)) (apply (lambda (G32bc@id) ((lambda (G32be@lab) ((lambda (G32c0@b) ((lambda (G32c2@type) ((lambda () (begin (if (not G32be@lab) (G2d86@raise-unbound-error G32bc@id) (void)) (if (not (and (eq? G32c2@type '$rtd) (list? (G2d84@binding-value G32c0@b)))) (G304a@syntax-violation '#f '"not a record type" G32b0@e) (void)) (G2f83@chi-expr (car (G2d84@binding-value G32c0@b)) G32b1@r G32b2@mr))))) (G2d82@binding-type G32c0@b))) (G2d7e@label->binding G32be@lab G32b1@r))) (G2d7a@id->label G32bc@id))) G32b8@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G32b6@t))) (G2f5f@syntax-dispatch G32b6@t '(_ any)))) G32b0@e))) (set! G2f01@record-constructor-descriptor-transformer (lambda (G32c4@e G32c5@r G32c6@mr) ((lambda (G32ca@t) ((lambda (G32cc@ls/false) (if (and G32cc@ls/false (apply (lambda (G32ce@id) (G2d60@id? G32ce@id)) G32cc@ls/false)) (apply (lambda (G32d0@id) ((lambda (G32d2@lab) ((lambda (G32d4@b) ((lambda (G32d6@type) ((lambda () (begin (if (not G32d2@lab) (G2d86@raise-unbound-error G32d0@id) (void)) (if (not (and (eq? G32d6@type '$rtd) (list? (G2d84@binding-value G32d4@b)))) (G304a@syntax-violation '#f '"invalid type" G32c4@e) (void)) (G2f83@chi-expr (cadr (G2d84@binding-value G32d4@b)) G32c5@r G32c6@mr))))) (G2d82@binding-type G32d4@b))) (G2d7e@label->binding G32d2@lab G32c5@r))) (G2d7a@id->label G32d0@id))) G32cc@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G32ca@t))) (G2f5f@syntax-dispatch G32ca@t '(_ any)))) G32c4@e))) (set! G2f03@when-macro (lambda (G32d8@e) ((lambda (G32da@t) ((lambda (G32dc@ls/false) (if G32dc@ls/false (apply (lambda (G32de@test G32df@e G32e0@e*) (G2f15@bless (list 'if G32de@test (cons 'begin (cons G32df@e G32e0@e*))))) G32dc@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G32da@t))) (G2f5f@syntax-dispatch G32da@t '(_ any any . each-any)))) G32d8@e))) (set! G2f05@unless-macro (lambda (G32e4@e) ((lambda (G32e6@t) ((lambda (G32e8@ls/false) (if G32e8@ls/false (apply (lambda (G32ea@test G32eb@e G32ec@e*) (G2f15@bless (list 'if (list 'not G32ea@test) (cons 'begin (cons G32eb@e G32ec@e*))))) G32e8@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G32e6@t))) (G2f5f@syntax-dispatch G32e6@t '(_ any any . each-any)))) G32e4@e))) (set! G2f07@if-transformer (lambda (G32f0@e G32f1@r G32f2@mr) ((lambda (G32f6@t) ((lambda (G32f8@ls/false) (if G32f8@ls/false (apply (lambda (G32fa@e0 G32fb@e1 G32fc@e2) (list 'if (G2f83@chi-expr G32fa@e0 G32f1@r G32f2@mr) (G2f83@chi-expr G32fb@e1 G32f1@r G32f2@mr) (G2f83@chi-expr G32fc@e2 G32f1@r G32f2@mr))) G32f8@ls/false) ((lambda (G3300@t) ((lambda (G3302@ls/false) (if G3302@ls/false (apply (lambda (G3304@e0 G3305@e1) (list 'if (G2f83@chi-expr G3304@e0 G32f1@r G32f2@mr) (G2f83@chi-expr G3305@e1 G32f1@r G32f2@mr) (G2cbe@G2c30@build-void))) G3302@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3300@t))) (G2f5f@syntax-dispatch G3300@t '(_ any any)))) G32f6@t))) (G2f5f@syntax-dispatch G32f6@t '(_ any any any)))) G32f0@e))) (set! G2f09@and-transformer (lambda (G3308@e G3309@r G330a@mr) ((lambda (G330e@t) ((lambda (G3310@ls/false) (if G3310@ls/false (apply (lambda (G3312@e*) (cons 'and (G2f7f@chi-expr* G3312@e* G3309@r G330a@mr))) G3310@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G330e@t))) (G2f5f@syntax-dispatch G330e@t '(_ . each-any)))) G3308@e))) (set! G2f0b@or-transformer (lambda (G3314@e G3315@r G3316@mr) ((lambda (G331a@t) ((lambda (G331c@ls/false) (if G331c@ls/false (apply (lambda (G331e@e*) (cons 'or (G2f7f@chi-expr* G331e@e* G3315@r G3316@mr))) G331c@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G331a@t))) (G2f5f@syntax-dispatch G331a@t '(_ . each-any)))) G3314@e))) (set! G2f0d@case-macro (lambda (G3320@e) ((lambda (G3323@build-last G3325@build-one) (begin (set! G3323@build-last (lambda (G334a@cls) ((lambda (G334c@t) ((lambda (G334e@ls/false) (if G334e@ls/false (apply (lambda (G3350@e G3351@e*) (cons 'begin (cons G3350@e G3351@e*))) G334e@ls/false) ((lambda (G3354@t) ((lambda (G3356@ls/false) (if G3356@ls/false (apply (lambda () (G3325@build-one G334a@cls '(if #f #f))) G3356@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3354@t))) (G2f5f@syntax-dispatch G3354@t '_))) G334c@t))) (G2f5f@syntax-dispatch G334c@t '(#(scheme-id else) any . each-any)))) G334a@cls))) (set! G3325@build-one (lambda (G333c@cls G333d@k) ((lambda (G3340@t) ((lambda (G3342@ls/false) (if G3342@ls/false (apply (lambda (G3344@d* G3345@e G3346@e*) (list 'if (list 'memv 't (list 'quote G3344@d*)) (cons 'begin (cons G3345@e G3346@e*)) G333d@k)) G3342@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3340@t))) (G2f5f@syntax-dispatch G3340@t '(each-any any . each-any)))) G333c@cls))) ((lambda (G3326@t) ((lambda (G3328@ls/false) (if G3328@ls/false (apply (lambda (G332a@expr) (G2f15@bless (cons 'let (cons (list (list 't G332a@expr)) '((if #f #f)))))) G3328@ls/false) ((lambda (G332c@t) ((lambda (G332e@ls/false) (if G332e@ls/false (apply (lambda (G3330@expr G3331@cls G3332@cls*) (G2f15@bless (list 'let (list (list 't G3330@expr)) ((letrec ((G3336@f (lambda (G3338@cls G3339@cls*) (if (null? G3339@cls*) (G3323@build-last G3338@cls) (G3325@build-one G3338@cls (G3336@f (car G3339@cls*) (cdr G3339@cls*))))))) G3336@f) G3331@cls G3332@cls*)))) G332e@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G332c@t))) (G2f5f@syntax-dispatch G332c@t '(_ any any . each-any)))) G3326@t))) (G2f5f@syntax-dispatch G3326@t '(_ any)))) G3320@e))) '#f '#f))) (set! G2f0f@quote-transformer (lambda (G3358@e G3359@r G335a@mr) ((lambda (G335e@t) ((lambda (G3360@ls/false) (if G3360@ls/false (apply (lambda (G3362@datum) (list 'quote (G2d76@stx->datum G3362@datum))) G3360@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G335e@t))) (G2f5f@syntax-dispatch G335e@t '(_ any)))) G3358@e))) (set! G2f11@case-lambda-transformer (lambda (G3364@e G3365@r G3366@mr) ((lambda (G336a@t) ((lambda (G336c@ls/false) (if G336c@ls/false (apply (lambda (G336e@fmls* G336f@b* G3370@b**) (call-with-values (lambda () (G2f8b@chi-lambda-clause* G3364@e G336e@fmls* (map cons G336f@b* G3370@b**) G3365@r G3366@mr)) (lambda (G3376@G3374 G3377@G3375) ((lambda (G337a@body* G337b@fmls*) (G2cbb@G2bfa@build-case-lambda '#f G337b@fmls* G337a@body*)) G3377@G3375 G3376@G3374)))) G336c@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G336a@t))) (G2f5f@syntax-dispatch G336a@t '(_ . #(each (any any . each-any)))))) G3364@e))) (set! G2f13@lambda-transformer (lambda (G337e@e G337f@r G3380@mr) ((lambda (G3384@t) ((lambda (G3386@ls/false) (if G3386@ls/false (apply (lambda (G3388@fmls G3389@b G338a@b*) (call-with-values (lambda () (G2f89@chi-lambda-clause G337e@e G3388@fmls (cons G3389@b G338a@b*) G337f@r G3380@mr)) (lambda (G3390@G338e G3391@G338f) ((lambda (G3394@body G3395@fmls) (G2cba@G2bf8@build-lambda '#f G3395@fmls G3394@body)) G3391@G338f G3390@G338e)))) G3386@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3384@t))) (G2f5f@syntax-dispatch G3384@t '(_ any any . each-any)))) G337e@e))) (set! G2f15@bless (lambda (G3398@x) (G2d48@mkstx ((letrec ((G339a@f (lambda (G339c@x) (if (G2d28@stx? G339c@x) G339c@x (if (pair? G339c@x) (cons (G339a@f (car G339c@x)) (G339a@f (cdr G339c@x))) (if (symbol? G339c@x) (G2ee9@scheme-stx G339c@x) (if (vector? G339c@x) (vector-map G339a@f G339c@x) G339c@x))))))) G339a@f) G3398@x) '() '() '()))) (set! G2f17@with-syntax-macro (lambda (G339e@e) ((lambda (G33a0@t) ((lambda (G33a2@ls/false) (if G33a2@ls/false (apply (lambda (G33a4@pat* G33a5@expr* G33a6@b G33a7@b*) ((lambda (G33ac@idn*) (begin (G2f87@verify-formals (map car G33ac@idn*) G339e@e) ((lambda (G33ae@t*) (G2f15@bless (list 'let (map list G33ae@t* G33a5@expr*) ((letrec ((G33b0@f (lambda (G33b2@pat* G33b3@t*) (if (null? G33b2@pat*) (cons 'begin (cons '#f (cons G33a6@b G33a7@b*))) (list 'syntax-case (car G33b3@t*) '() (list (car G33b2@pat*) (G33b0@f (cdr G33b2@pat*) (cdr G33b3@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33b2@pat*)) (car G33b3@t*)))))))) G33b0@f) G33a4@pat* G33ae@t*)))) (G3038@generate-temporaries G33a5@expr*)))) ((letrec ((G33b6@f (lambda (G33b8@pat*) (if (null? G33b8@pat*) '() (call-with-values (lambda () (G2f5d@convert-pattern (car G33b8@pat*) '())) (lambda (G33bc@G33ba G33bd@G33bb) ((lambda (G33c0@idn* G33c1@pat) (append G33c0@idn* (G33b6@f (cdr G33b8@pat*)))) G33bd@G33bb G33bc@G33ba))))))) G33b6@f) G33a4@pat*))) G33a2@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G33a0@t))) (G2f5f@syntax-dispatch G33a0@t '(_ #(each (any any)) any . each-any)))) G339e@e))) (set! G2f19@invalid-fmls-error (lambda (G33c4@stx G33c5@fmls) ((lambda (G33c8@t) ((lambda (G33ca@ls/false) (if G33ca@ls/false (apply (lambda (G33cc@id* G33cd@last) ((letrec ((G33d0@f (lambda (G33d2@id*) (if (null? G33d2@id*) (values) (if (not (G2d60@id? (car G33d2@id*))) (G304a@syntax-violation '#f '"not an identifier" G33c4@stx (car G33d2@id*)) (begin (G33d0@f (cdr G33d2@id*)) (if (G2d6e@bound-id-member? (car G33d2@id*) (cdr G33d2@id*)) (G304a@syntax-violation '#f '"duplicate binding" G33c4@stx (car G33d2@id*)) (void)))))))) G33d0@f) (if (G2d60@id? G33cd@last) (cons G33cd@last G33cc@id*) (if (G2d56@syntax-null? G33cd@last) G33cc@id* (G304a@syntax-violation '#f '"not an identifier" G33c4@stx G33cd@last))))) G33ca@ls/false) ((lambda (G33d4@t) ((lambda (G33d6@ls/false) (if G33d6@ls/false (apply (lambda () (G304a@syntax-violation '#f '"malformed binding form" G33c4@stx G33c5@fmls)) G33d6@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G33d4@t))) (G2f5f@syntax-dispatch G33d4@t '_))) G33c8@t))) (G2f5f@syntax-dispatch G33c8@t '#(each+ any () any)))) G33c5@fmls))) (set! G2f1b@let-macro (lambda (G33d8@stx) ((lambda (G33da@t) ((lambda (G33dc@ls/false) (if G33dc@ls/false (apply (lambda (G33de@lhs* G33df@rhs* G33e0@b G33e1@b*) (if (G2d6a@valid-bound-ids? G33de@lhs*) (G2f15@bless (cons (cons 'lambda (cons G33de@lhs* (cons G33e0@b G33e1@b*))) G33df@rhs*)) (G2f19@invalid-fmls-error G33d8@stx G33de@lhs*))) G33dc@ls/false) ((lambda (G33e6@t) ((lambda (G33e8@ls/false) (if (and G33e8@ls/false (apply (lambda (G33ea@f G33eb@lhs* G33ec@rhs* G33ed@b G33ee@b*) (G2d60@id? G33ea@f)) G33e8@ls/false)) (apply (lambda (G33f4@f G33f5@lhs* G33f6@rhs* G33f7@b G33f8@b*) (if (G2d6a@valid-bound-ids? G33f5@lhs*) (G2f15@bless (cons (list 'letrec (list (list G33f4@f (cons 'lambda (cons G33f5@lhs* (cons G33f7@b G33f8@b*))))) G33f4@f) G33f6@rhs*)) (G2f19@invalid-fmls-error G33d8@stx G33f5@lhs*))) G33e8@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G33e6@t))) (G2f5f@syntax-dispatch G33e6@t '(_ any #(each (any any)) any . each-any)))) G33da@t))) (G2f5f@syntax-dispatch G33da@t '(_ #(each (any any)) any . each-any)))) G33d8@stx))) (set! G2f1d@let-values-macro (lambda (G33fe@stx) ((lambda (G3401@rename G3403@rename*) (begin (set! G3401@rename (lambda (G3463@x G3464@old* G3465@new*) (begin (if (not (G2d60@id? G3463@x)) (G304a@syntax-violation '#f '"not an indentifier" G33fe@stx G3463@x) (void)) (if (G2d6e@bound-id-member? G3463@x G3464@old*) (G304a@syntax-violation '#f '"duplicate binding" G33fe@stx G3463@x) (void)) ((lambda (G3469@y) (values G3469@y (cons G3463@x G3464@old*) (cons G3469@y G3465@new*))) (gensym (G3050@syntax->datum G3463@x)))))) (set! G3403@rename* (lambda (G3451@x* G3452@old* G3453@new*) (if (null? G3451@x*) (values '() G3452@old* G3453@new*) (call-with-values (lambda () (G3401@rename (car G3451@x*) G3452@old* G3453@new*)) (lambda (G3457@x G3458@old* G3459@new*) (call-with-values (lambda () (G3403@rename* (cdr G3451@x*) G3458@old* G3459@new*)) (lambda (G345d@x* G345e@old* G345f@new*) (values (cons G3457@x G345d@x*) G345e@old* G345f@new*)))))))) ((lambda (G3404@t) ((lambda (G3406@ls/false) (if G3406@ls/false (apply (lambda (G3408@b G3409@b*) (cons* (G2f15@bless 'let) '() G3408@b G3409@b*)) G3406@ls/false) ((lambda (G340c@t) ((lambda (G340e@ls/false) (if G340e@ls/false (apply (lambda (G3410@lhs* G3411@rhs* G3412@b G3413@b*) (G2f15@bless ((letrec ((G3418@f (lambda (G341a@lhs* G341b@rhs* G341c@old* G341d@new*) (if (null? G341a@lhs*) (cons 'let (cons (map list G341c@old* G341d@new*) (cons G3412@b G3413@b*))) ((lambda (G3422@t) ((lambda (G3424@ls/false) (if G3424@ls/false (apply (lambda (G3426@x*) (call-with-values (lambda () (G3403@rename* G3426@x* G341c@old* G341d@new*)) (lambda (G342b@G3428 G342c@G3429 G342d@G342a) ((lambda (G3431@new* G3432@old* G3433@y*) (list 'call-with-values (list 'lambda '() (car G341b@rhs*)) (list 'lambda G3433@y* (G3418@f (cdr G341a@lhs*) (cdr G341b@rhs*) G3432@old* G3431@new*)))) G342d@G342a G342c@G3429 G342b@G3428)))) G3424@ls/false) ((lambda (G3437@t) ((lambda (G3439@ls/false) (if G3439@ls/false (apply (lambda (G343b@x* G343c@x) (call-with-values (lambda () (G3401@rename G343c@x G341c@old* G341d@new*)) (lambda (G343f@y G3440@old* G3441@new*) (call-with-values (lambda () (G3403@rename* G343b@x* G3440@old* G3441@new*)) (lambda (G3445@y* G3446@old* G3447@new*) (list 'call-with-values (list 'lambda '() (car G341b@rhs*)) (list 'lambda (append G3445@y* G343f@y) (G3418@f (cdr G341a@lhs*) (cdr G341b@rhs*) G3446@old* G3447@new*)))))))) G3439@ls/false) ((lambda (G344b@t) ((lambda (G344d@ls/false) (if G344d@ls/false (apply (lambda (G344f@others) (G304a@syntax-violation '#f '"malformed bindings" G33fe@stx G344f@others)) G344d@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G344b@t))) (G2f5f@syntax-dispatch G344b@t 'any))) G3437@t))) (G2f5f@syntax-dispatch G3437@t '#(each+ any () any)))) G3422@t))) (G2f5f@syntax-dispatch G3422@t 'each-any))) (car G341a@lhs*)))))) G3418@f) G3410@lhs* G3411@rhs* '() '()))) G340e@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G340c@t))) (G2f5f@syntax-dispatch G340c@t '(_ #(each (any any)) any . each-any)))) G3404@t))) (G2f5f@syntax-dispatch G3404@t '(_ () any . each-any)))) G33fe@stx))) '#f '#f))) (set! G2f1f@let*-values-macro (lambda (G346b@stx) ((lambda (G346e@check) (begin (set! G346e@check (lambda (G349d@x*) (if (not (null? G349d@x*)) ((lambda (G349f@x) (begin (if (not (G2d60@id? G349f@x)) (G304a@syntax-violation '#f '"not an identifier" G346b@stx G349f@x) (void)) (G346e@check (cdr G349d@x*)) (if (G2d6e@bound-id-member? G349f@x (cdr G349d@x*)) (G304a@syntax-violation '#f '"duplicate identifier" G346b@stx G349f@x) (void)))) (car G349d@x*)) (void)))) ((lambda (G346f@t) ((lambda (G3471@ls/false) (if G3471@ls/false (apply (lambda (G3473@b G3474@b*) (cons* (G2f15@bless 'let) '() G3473@b G3474@b*)) G3471@ls/false) ((lambda (G3477@t) ((lambda (G3479@ls/false) (if G3479@ls/false (apply (lambda (G347b@lhs* G347c@rhs* G347d@b G347e@b*) (G2f15@bless ((letrec ((G3483@f (lambda (G3485@lhs* G3486@rhs*) (if (null? G3485@lhs*) (cons 'begin (cons G347d@b G347e@b*)) ((lambda (G3489@t) ((lambda (G348b@ls/false) (if G348b@ls/false (apply (lambda (G348d@x*) (begin (G346e@check G348d@x*) (list 'call-with-values (list 'lambda '() (car G3486@rhs*)) (list 'lambda G348d@x* (G3483@f (cdr G3485@lhs*) (cdr G3486@rhs*)))))) G348b@ls/false) ((lambda (G348f@t) ((lambda (G3491@ls/false) (if G3491@ls/false (apply (lambda (G3493@x* G3494@x) (begin (G346e@check (cons G3494@x G3493@x*)) (list 'call-with-values (list 'lambda '() (car G3486@rhs*)) (list 'lambda (append G3493@x* G3494@x) (G3483@f (cdr G3485@lhs*) (cdr G3486@rhs*)))))) G3491@ls/false) ((lambda (G3497@t) ((lambda (G3499@ls/false) (if G3499@ls/false (apply (lambda (G349b@others) (G304a@syntax-violation '#f '"malformed bindings" G346b@stx G349b@others)) G3499@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3497@t))) (G2f5f@syntax-dispatch G3497@t 'any))) G348f@t))) (G2f5f@syntax-dispatch G348f@t '#(each+ any () any)))) G3489@t))) (G2f5f@syntax-dispatch G3489@t 'each-any))) (car G3485@lhs*)))))) G3483@f) G347b@lhs* G347c@rhs*))) G3479@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3477@t))) (G2f5f@syntax-dispatch G3477@t '(_ #(each (any any)) any . each-any)))) G346f@t))) (G2f5f@syntax-dispatch G346f@t '(_ () any . each-any)))) G346b@stx))) '#f))) (set! G2f21@trace-lambda-macro (lambda (G34a1@stx) ((lambda (G34a3@t) ((lambda (G34a5@ls/false) (if G34a5@ls/false (apply (lambda (G34a7@who G34a8@fmls G34a9@b G34aa@b*) (if (G2d6a@valid-bound-ids? G34a8@fmls) (G2f15@bless (list 'make-traced-procedure (list 'quote G34a7@who) (cons 'lambda (cons G34a8@fmls (cons G34a9@b G34aa@b*))))) (G2f19@invalid-fmls-error G34a1@stx G34a8@fmls))) G34a5@ls/false) ((lambda (G34af@t) ((lambda (G34b1@ls/false) (if G34b1@ls/false (apply (lambda (G34b3@who G34b4@fmls G34b5@last G34b6@b G34b7@b*) (if (G2d6a@valid-bound-ids? (cons G34b5@last G34b4@fmls)) (G2f15@bless (list 'make-traced-procedure (list 'quote G34b3@who) (cons 'lambda (cons (append G34b4@fmls G34b5@last) (cons G34b6@b G34b7@b*))))) (G2f19@invalid-fmls-error G34a1@stx (append G34b4@fmls G34b5@last)))) G34b1@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G34af@t))) (G2f5f@syntax-dispatch G34af@t '(_ any #(each+ any () any) any . each-any)))) G34a3@t))) (G2f5f@syntax-dispatch G34a3@t '(_ any each-any any . each-any)))) G34a1@stx))) (set! G2f23@trace-define-macro (lambda (G34bd@stx) ((lambda (G34bf@t) ((lambda (G34c1@ls/false) (if G34c1@ls/false (apply (lambda (G34c3@who G34c4@fmls G34c5@b G34c6@b*) (if (G2d6a@valid-bound-ids? G34c4@fmls) (G2f15@bless (list 'define G34c3@who (list 'make-traced-procedure (list 'quote G34c3@who) (cons 'lambda (cons G34c4@fmls (cons G34c5@b G34c6@b*)))))) (G2f19@invalid-fmls-error G34bd@stx G34c4@fmls))) G34c1@ls/false) ((lambda (G34cb@t) ((lambda (G34cd@ls/false) (if G34cd@ls/false (apply (lambda (G34cf@who G34d0@fmls G34d1@last G34d2@b G34d3@b*) (if (G2d6a@valid-bound-ids? (cons G34d1@last G34d0@fmls)) (G2f15@bless (list 'define G34cf@who (list 'make-traced-procedure (list 'quote G34cf@who) (cons 'lambda (cons (append G34d0@fmls G34d1@last) (cons G34d2@b G34d3@b*)))))) (G2f19@invalid-fmls-error G34bd@stx (append G34d0@fmls G34d1@last)))) G34cd@ls/false) ((lambda (G34d9@t) ((lambda (G34db@ls/false) (if G34db@ls/false (apply (lambda (G34dd@who G34de@expr) (if (G2d60@id? G34dd@who) (G2f15@bless (list 'define G34dd@who (list 'let (list (list 'v G34de@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34dd@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G304a@syntax-violation '#f '"invalid name" G34bd@stx))) G34db@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G34d9@t))) (G2f5f@syntax-dispatch G34d9@t '(_ any any)))) G34cb@t))) (G2f5f@syntax-dispatch G34cb@t '(_ (any . #(each+ any () any)) any . each-any)))) G34bf@t))) (G2f5f@syntax-dispatch G34bf@t '(_ (any . each-any) any . each-any)))) G34bd@stx))) (set! G2f25@trace-define-syntax-macro (lambda (G34e1@stx) ((lambda (G34e3@t) ((lambda (G34e5@ls/false) (if G34e5@ls/false (apply (lambda (G34e7@who G34e8@expr) (if (G2d60@id? G34e7@who) (G2f15@bless (list 'define-syntax G34e7@who (list 'make-traced-macro (list 'quote G34e7@who) G34e8@expr))) (G304a@syntax-violation '#f '"invalid name" G34e1@stx))) G34e5@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G34e3@t))) (G2f5f@syntax-dispatch G34e3@t '(_ any any)))) G34e1@stx))) (set! G2f27@trace-let/rec-syntax (lambda (G34eb@who) (lambda (G34ed@stx) ((lambda (G34ef@t) ((lambda (G34f1@ls/false) (if G34f1@ls/false (apply (lambda (G34f3@lhs* G34f4@rhs* G34f5@b G34f6@b*) (if (G2d6a@valid-bound-ids? G34f3@lhs*) ((lambda (G34fb@rhs*) (G2f15@bless (cons G34eb@who (cons (map list G34f3@lhs* G34fb@rhs*) (cons G34f5@b G34f6@b*))))) (map (lambda (G34fd@lhs G34fe@rhs) (list 'make-traced-macro (list 'quote G34fd@lhs) G34fe@rhs)) G34f3@lhs* G34f4@rhs*)) (G2f19@invalid-fmls-error G34ed@stx G34f3@lhs*))) G34f1@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G34ef@t))) (G2f5f@syntax-dispatch G34ef@t '(_ #(each (any any)) any . each-any)))) G34ed@stx)))) (set! G2f29@trace-let-syntax-macro (G2f27@trace-let/rec-syntax 'let-syntax)) (set! G2f2b@trace-letrec-syntax-macro (G2f27@trace-let/rec-syntax 'letrec-syntax)) (set! G2f2d@guard-macro (lambda (G3501@x) ((lambda (G3504@gen-clauses) (begin (set! G3504@gen-clauses (lambda (G351b@con G351c@outerk G351d@clause*) ((lambda (G3522@f G3524@f*) (begin (set! G3522@f (lambda (G3557@x G3558@k) ((lambda (G355b@t) ((lambda (G355d@ls/false) (if G355d@ls/false (apply (lambda (G355f@e G3560@p) ((lambda (G3563@t) (list 'let (list (list G3563@t G355f@e)) (list 'if G3563@t (list G3560@p G3563@t) G3558@k))) (gensym))) G355d@ls/false) ((lambda (G3565@t) ((lambda (G3567@ls/false) (if G3567@ls/false (apply (lambda (G3569@e) ((lambda (G356b@t) (list 'let (list (list G356b@t G3569@e)) (list 'if G356b@t G356b@t G3558@k))) (gensym))) G3567@ls/false) ((lambda (G356d@t) ((lambda (G356f@ls/false) (if G356f@ls/false (apply (lambda (G3571@e G3572@v G3573@v*) (list 'if G3571@e (cons 'begin (cons G3572@v G3573@v*)) G3558@k)) G356f@ls/false) ((lambda (G3577@t) ((lambda (G3579@ls/false) (if G3579@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid guard clause" G3557@x)) G3579@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3577@t))) (G2f5f@syntax-dispatch G3577@t '_))) G356d@t))) (G2f5f@syntax-dispatch G356d@t '(any any . each-any)))) G3565@t))) (G2f5f@syntax-dispatch G3565@t '(any)))) G355b@t))) (G2f5f@syntax-dispatch G355b@t '(any #(scheme-id =>) any)))) G3557@x))) (set! G3524@f* (lambda (G352f@x*) ((lambda (G3531@t) ((lambda (G3533@ls/false) (if G3533@ls/false (apply (lambda () ((lambda (G3535@g) (values (list G3535@g (list 'lambda '() (list 'raise-continuable G351b@con))) G3535@g)) (gensym))) G3533@ls/false) ((lambda (G3537@t) ((lambda (G3539@ls/false) (if G3539@ls/false (apply (lambda (G353b@e G353c@e*) (values (cons 'begin (cons G353b@e G353c@e*)) '#f)) G3539@ls/false) ((lambda (G353f@t) ((lambda (G3541@ls/false) (if G3541@ls/false (apply (lambda (G3543@cls G3544@cls*) (call-with-values (lambda () (G3524@f* G3544@cls*)) (lambda (G3549@G3547 G354a@G3548) ((lambda (G354d@g G354e@e) (values (G3522@f G3543@cls G354e@e) G354d@g)) G354a@G3548 G3549@G3547)))) G3541@ls/false) ((lambda (G3551@t) ((lambda (G3553@ls/false) (if G3553@ls/false (apply (lambda (G3555@others) (G304a@syntax-violation '#f '"invalid guard clause" G3555@others)) G3553@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3551@t))) (G2f5f@syntax-dispatch G3551@t 'any))) G353f@t))) (G2f5f@syntax-dispatch G353f@t '(any . any)))) G3537@t))) (G2f5f@syntax-dispatch G3537@t '((#(scheme-id else) any . each-any))))) G3531@t))) (G2f5f@syntax-dispatch G3531@t '()))) G352f@x*))) (call-with-values (lambda () (G3524@f* G351d@clause*)) (lambda (G3527@G3525 G3528@G3526) ((lambda (G352b@raisek G352c@code) (if G352b@raisek (list (list 'call/cc (list 'lambda (list G352b@raisek) (list G351c@outerk (list 'lambda '() G352c@code))))) (list G351c@outerk (list 'lambda '() G352c@code)))) G3528@G3526 G3527@G3525))))) '#f '#f))) ((lambda (G3505@t) ((lambda (G3507@ls/false) (if (and G3507@ls/false (apply (lambda (G3509@con G350a@clause* G350b@b G350c@b*) (G2d60@id? G3509@con)) G3507@ls/false)) (apply (lambda (G3511@con G3512@clause* G3513@b G3514@b*) ((lambda (G3519@outerk) (G2f15@bless (list (list 'call/cc (list 'lambda (list G3519@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G3511@con) (G3504@gen-clauses G3511@con G3519@outerk G3512@clause*)) (cons 'lambda (cons '() (cons G3513@b G3514@b*)))))))))) (gensym))) G3507@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3505@t))) (G2f5f@syntax-dispatch G3505@t '(_ (any . each-any) any . each-any)))) G3501@x))) '#f))) (set! G2f2f@define-enumeration-macro (lambda (G357b@stx) ((lambda (G357e@set? G3580@remove-dups) (begin (set! G357e@set? (lambda (G3597@x) (or (null? G3597@x) (and (not (memq (car G3597@x) (cdr G3597@x))) (G357e@set? (cdr G3597@x)))))) (set! G3580@remove-dups (lambda (G3595@ls) (if (null? G3595@ls) '() (cons (car G3595@ls) (G3580@remove-dups (remq (car G3595@ls) (cdr G3595@ls))))))) ((lambda (G3581@t) ((lambda (G3583@ls/false) (if (and G3583@ls/false (apply (lambda (G3585@name G3586@id* G3587@maker) (and (G2d60@id? G3585@name) (G2d60@id? G3587@maker) (for-all G2d60@id? G3586@id*))) G3583@ls/false)) (apply (lambda (G358b@name G358c@id* G358d@maker) ((lambda (G3591@name* G3592@mk) (G2f15@bless (list 'begin (list 'define G3592@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3591@name*)))) (list 'define-syntax G358b@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3591@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G358b@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G358d@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G358d@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3591@name*)) (cons 'syntax-violation (cons (list 'quote G358d@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3592@mk '('(n* ...)))))))))))) (G3580@remove-dups (G3050@syntax->datum G358c@id*)) (gensym))) G3583@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3581@t))) (G2f5f@syntax-dispatch G3581@t '(_ any each-any any)))) G357b@stx))) '#f '#f))) (set! G2f31@time-macro (lambda (G3599@stx) ((lambda (G359b@t) ((lambda (G359d@ls/false) (if G359d@ls/false (apply (lambda (G359f@expr) ((lambda (G35a1@str) (G2f15@bless (list 'time-it G35a1@str (list 'lambda '() G359f@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G35a5@G35a3 G35a6@G35a4) ((lambda (G35a9@e G35aa@p) (begin (write (G3050@syntax->datum G359f@expr) G35aa@p) (G35a9@e))) G35a6@G35a4 G35a5@G35a3))))) G359d@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G359b@t))) (G2f5f@syntax-dispatch G359b@t '(_ any)))) G3599@stx))) (set! G2f33@delay-macro (lambda (G35ad@stx) ((lambda (G35af@t) ((lambda (G35b1@ls/false) (if G35b1@ls/false (apply (lambda (G35b3@expr) (G2f15@bless (list 'make-promise (list 'lambda '() G35b3@expr)))) G35b1@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G35af@t))) (G2f5f@syntax-dispatch G35af@t '(_ any)))) G35ad@stx))) (set! G2f35@assert-macro (lambda (G35b5@stx) ((lambda (G35b7@t) ((lambda (G35b9@ls/false) (if G35b9@ls/false (apply (lambda (G35bb@expr) ((lambda (G35bd@pos) (G2f15@bless (list 'unless G35bb@expr (list 'assertion-error (list 'quote G35bb@expr) (list 'quote G35bd@pos))))) (or (G3042@expression-position G35b5@stx) (G3042@expression-position G35bb@expr)))) G35b9@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G35b7@t))) (G2f5f@syntax-dispatch G35b7@t '(_ any)))) G35b5@stx))) (set! G2f37@endianness-macro (lambda (G35bf@stx) ((lambda (G35c1@t) ((lambda (G35c3@ls/false) (if G35c3@ls/false (apply (lambda (G35c5@e) ((lambda (G35c7@t) (if (memv G35c7@t '(little)) (G2f15@bless ''little) (if (memv G35c7@t '(big)) (G2f15@bless ''big) (G304a@syntax-violation '#f '"endianness must be big or little" G35bf@stx)))) (G3050@syntax->datum G35c5@e))) G35c3@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G35c1@t))) (G2f5f@syntax-dispatch G35c1@t '(_ any)))) G35bf@stx))) (set! G2f39@identifier-syntax-macro (lambda (G35c9@stx) ((lambda (G35cb@t) ((lambda (G35cd@ls/false) (if G35cd@ls/false (apply (lambda (G35cf@expr) (G2f15@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35cf@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35cf@expr) '((syntax (e* ...)))))))))) G35cd@ls/false) ((lambda (G35d1@t) ((lambda (G35d3@ls/false) (if (and G35d3@ls/false (apply (lambda (G35d5@id1 G35d6@expr1 G35d7@id2 G35d8@expr2 G35d9@expr3) (and (G2d60@id? G35d5@id1) (G2d60@id? G35d7@id2) (G2d60@id? G35d8@expr2))) G35d3@ls/false)) (apply (lambda (G35df@id1 G35e0@expr1 G35e1@id2 G35e2@expr2 G35e3@expr3) (G2f15@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35e0@expr1)) (list (list 'set! 'id G35e2@expr2) (list 'syntax G35e3@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35e0@expr1 '(e* ...))))))))) G35d3@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G35d1@t))) (G2f5f@syntax-dispatch G35d1@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35cb@t))) (G2f5f@syntax-dispatch G35cb@t '(_ any)))) G35c9@stx))) (set! G2f3b@do-macro (lambda (G35e9@stx) ((lambda (G35ec@bind) (begin (set! G35ec@bind (lambda (G3603@x) ((lambda (G3605@t) ((lambda (G3607@ls/false) (if G3607@ls/false (apply (lambda (G3609@x G360a@init) (list G3609@x G360a@init G3609@x)) G3607@ls/false) ((lambda (G360d@t) ((lambda (G360f@ls/false) (if G360f@ls/false (apply (lambda (G3611@x G3612@init G3613@step) (list G3611@x G3612@init G3613@step)) G360f@ls/false) ((lambda (G3617@t) ((lambda (G3619@ls/false) (if G3619@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid binding" G35e9@stx)) G3619@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3617@t))) (G2f5f@syntax-dispatch G3617@t '_))) G360d@t))) (G2f5f@syntax-dispatch G360d@t '(any any any)))) G3605@t))) (G2f5f@syntax-dispatch G3605@t '(any any)))) G3603@x))) ((lambda (G35ed@t) ((lambda (G35ef@ls/false) (if G35ef@ls/false (apply (lambda (G35f1@binding* G35f2@test G35f3@expr* G35f4@command*) ((lambda (G35f9@t) ((lambda (G35fb@ls/false) (if G35fb@ls/false (apply (lambda (G35fd@x* G35fe@init* G35ff@step*) (if (G2d6a@valid-bound-ids? G35fd@x*) (G2f15@bless (list 'letrec (list (list 'loop (list 'lambda G35fd@x* (list 'if G35f2@test (cons 'begin (cons '(if #f #f) G35f3@expr*)) (cons 'begin (append G35f4@command* (list (cons 'loop G35ff@step*)))))))) (cons 'loop G35fe@init*))) (G304a@syntax-violation '#f '"invalid bindings" G35e9@stx))) G35fb@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G35f9@t))) (G2f5f@syntax-dispatch G35f9@t '#(each (any any any))))) (map G35ec@bind G35f1@binding*))) G35ef@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G35ed@t))) (G2f5f@syntax-dispatch G35ed@t '(_ each-any (any . each-any) . each-any)))) G35e9@stx))) '#f))) (set! G2f3d@let*-macro (lambda (G361b@stx) ((lambda (G361d@t) ((lambda (G361f@ls/false) (if (and G361f@ls/false (apply (lambda (G3621@lhs* G3622@rhs* G3623@b G3624@b*) (for-all G2d60@id? G3621@lhs*)) G361f@ls/false)) (apply (lambda (G3629@lhs* G362a@rhs* G362b@b G362c@b*) (G2f15@bless ((letrec ((G3631@f (lambda (G3633@x*) (if (null? G3633@x*) (cons 'let (cons '() (cons G362b@b G362c@b*))) (list 'let (list (car G3633@x*)) (G3631@f (cdr G3633@x*))))))) G3631@f) (map list G3629@lhs* G362a@rhs*)))) G361f@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G361d@t))) (G2f5f@syntax-dispatch G361d@t '(_ #(each (any any)) any . each-any)))) G361b@stx))) (set! G2f3f@or-macro (lambda (G3635@stx) ((lambda (G3637@t) ((lambda (G3639@ls/false) (if G3639@ls/false (apply (lambda () '#f) G3639@ls/false) ((lambda (G363b@t) ((lambda (G363d@ls/false) (if G363d@ls/false (apply (lambda (G363f@e G3640@e*) (G2f15@bless ((letrec ((G3643@f (lambda (G3645@e G3646@e*) (if (null? G3646@e*) (list 'begin '#f G3645@e) (list 'let (list (list 't G3645@e)) (list 'if 't 't (G3643@f (car G3646@e*) (cdr G3646@e*)))))))) G3643@f) G363f@e G3640@e*))) G363d@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G363b@t))) (G2f5f@syntax-dispatch G363b@t '(_ any . each-any)))) G3637@t))) (G2f5f@syntax-dispatch G3637@t '(_)))) G3635@stx))) (set! G2f41@and-macro (lambda (G3649@stx) ((lambda (G364b@t) ((lambda (G364d@ls/false) (if G364d@ls/false (apply (lambda () '#t) G364d@ls/false) ((lambda (G364f@t) ((lambda (G3651@ls/false) (if G3651@ls/false (apply (lambda (G3653@e G3654@e*) (G2f15@bless ((letrec ((G3657@f (lambda (G3659@e G365a@e*) (if (null? G365a@e*) (list 'begin '#f G3659@e) (cons 'if (cons G3659@e (cons (G3657@f (car G365a@e*) (cdr G365a@e*)) '(#f)))))))) G3657@f) G3653@e G3654@e*))) G3651@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G364f@t))) (G2f5f@syntax-dispatch G364f@t '(_ any . each-any)))) G364b@t))) (G2f5f@syntax-dispatch G364b@t '(_)))) G3649@stx))) (set! G2f43@cond-macro (lambda (G365d@stx) ((lambda (G365f@t) ((lambda (G3661@ls/false) (if G3661@ls/false (apply (lambda (G3663@cls G3664@cls*) (G2f15@bless ((letrec ((G3667@f (lambda (G3669@cls G366a@cls*) (if (null? G366a@cls*) ((lambda (G366d@t) ((lambda (G366f@ls/false) (if G366f@ls/false (apply (lambda (G3671@e G3672@e*) (cons 'begin (cons G3671@e G3672@e*))) G366f@ls/false) ((lambda (G3675@t) ((lambda (G3677@ls/false) (if G3677@ls/false (apply (lambda (G3679@e G367a@p) (list 'let (list (list 't G3679@e)) (list 'if 't (cons G367a@p '(t))))) G3677@ls/false) ((lambda (G367d@t) ((lambda (G367f@ls/false) (if G367f@ls/false (apply (lambda (G3681@e) (cons 'or (cons G3681@e '((if #f #f))))) G367f@ls/false) ((lambda (G3683@t) ((lambda (G3685@ls/false) (if G3685@ls/false (apply (lambda (G3687@e G3688@e*) (list 'if G3687@e (cons 'begin G3688@e*))) G3685@ls/false) ((lambda (G368b@t) ((lambda (G368d@ls/false) (if G368d@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid last clause" G365d@stx)) G368d@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G368b@t))) (G2f5f@syntax-dispatch G368b@t '_))) G3683@t))) (G2f5f@syntax-dispatch G3683@t '(any . each-any)))) G367d@t))) (G2f5f@syntax-dispatch G367d@t '(any)))) G3675@t))) (G2f5f@syntax-dispatch G3675@t '(any #(scheme-id =>) any)))) G366d@t))) (G2f5f@syntax-dispatch G366d@t '(#(scheme-id else) any . each-any)))) G3669@cls) ((lambda (G368f@t) ((lambda (G3691@ls/false) (if G3691@ls/false (apply (lambda (G3693@e G3694@e*) (G304a@syntax-violation '#f '"incorrect position of keyword else" G365d@stx)) G3691@ls/false) ((lambda (G3697@t) ((lambda (G3699@ls/false) (if G3699@ls/false (apply (lambda (G369b@e G369c@p) (list 'let (list (list 't G369b@e)) (list 'if 't (cons G369c@p '(t)) (G3667@f (car G366a@cls*) (cdr G366a@cls*))))) G3699@ls/false) ((lambda (G369f@t) ((lambda (G36a1@ls/false) (if G36a1@ls/false (apply (lambda (G36a3@e) (list 'or G36a3@e (G3667@f (car G366a@cls*) (cdr G366a@cls*)))) G36a1@ls/false) ((lambda (G36a5@t) ((lambda (G36a7@ls/false) (if G36a7@ls/false (apply (lambda (G36a9@e G36aa@e*) (list 'if G36a9@e (cons 'begin G36aa@e*) (G3667@f (car G366a@cls*) (cdr G366a@cls*)))) G36a7@ls/false) ((lambda (G36ad@t) ((lambda (G36af@ls/false) (if G36af@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid last clause" G365d@stx)) G36af@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G36ad@t))) (G2f5f@syntax-dispatch G36ad@t '_))) G36a5@t))) (G2f5f@syntax-dispatch G36a5@t '(any . each-any)))) G369f@t))) (G2f5f@syntax-dispatch G369f@t '(any)))) G3697@t))) (G2f5f@syntax-dispatch G3697@t '(any #(scheme-id =>) any)))) G368f@t))) (G2f5f@syntax-dispatch G368f@t '(#(scheme-id else) any . each-any)))) G3669@cls))))) G3667@f) G3663@cls G3664@cls*))) G3661@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G365f@t))) (G2f5f@syntax-dispatch G365f@t '(_ any . each-any)))) G365d@stx))) (set! G2f45@do-include (lambda (G36b1@stx G36b2@id G36b3@filename) ((lambda (G36b7@filename) (begin (if (not (and (string? G36b7@filename) (G2d60@id? G36b2@id))) (G304a@syntax-violation '#f '"invalid syntax" G36b1@stx) (void)) (cons (G2f15@bless 'begin) (with-input-from-file G36b7@filename (lambda () ((letrec ((G36b9@f (lambda (G36bb@ls) ((lambda (G36bd@x) (if (eof-object? G36bd@x) (reverse G36bb@ls) (G36b9@f (cons (G2d3e@datum->stx G36b2@id G36bd@x) G36bb@ls)))) (G28ef@G2818@read-annotated))))) G36b9@f) '())))))) (G2d76@stx->datum G36b3@filename)))) (set! G2f47@include-macro (lambda (G36bf@e) ((lambda (G36c1@t) ((lambda (G36c3@ls/false) (if G36c3@ls/false (apply (lambda (G36c5@id G36c6@filename) (G2f45@do-include G36bf@e G36c5@id G36c6@filename)) G36c3@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G36c1@t))) (G2f5f@syntax-dispatch G36c1@t '(any any)))) G36bf@e))) (set! G2f49@include-into-macro (lambda (G36c9@e) ((lambda (G36cb@t) ((lambda (G36cd@ls/false) (if G36cd@ls/false (apply (lambda (G36cf@id G36d0@filename) (G2f45@do-include G36c9@e G36cf@id G36d0@filename)) G36cd@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G36cb@t))) (G2f5f@syntax-dispatch G36cb@t '(_ any any)))) G36c9@e))) (set! G2f4b@syntax-rules-macro (lambda (G36d3@e) ((lambda (G36d5@t) ((lambda (G36d7@ls/false) (if G36d7@ls/false (apply (lambda (G36d9@lits G36da@pat* G36db@tmp*) (begin (G2f65@verify-literals G36d9@lits G36d3@e) (G2f15@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36d9@lits (map (lambda (G36df@pat G36e0@tmp) ((lambda (G36e3@t) ((lambda (G36e5@ls/false) (if G36e5@ls/false (apply (lambda (G36e7@rest) (list (cons 'g G36e7@rest) (list 'syntax G36e0@tmp))) G36e5@ls/false) ((lambda (G36e9@t) ((lambda (G36eb@ls/false) (if G36eb@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid syntax-rules pattern" G36d3@e G36df@pat)) G36eb@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G36e9@t))) (G2f5f@syntax-dispatch G36e9@t '_))) G36e3@t))) (G2f5f@syntax-dispatch G36e3@t '(_ . any)))) G36df@pat)) G36da@pat* G36db@tmp*)))))))) G36d7@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G36d5@t))) (G2f5f@syntax-dispatch G36d5@t '(_ each-any . #(each (any any)))))) G36d3@e))) (set! G2f4d@quasiquote-macro ((lambda () ((lambda (G36ee@datum G370c@quasicons* G370e@quasicons G3710@quasiappend G3712@quasivector G3714@vquasi G3716@quasi) (begin (set! G36ee@datum (lambda (G37f1@x) (list (G2ee9@scheme-stx 'quote) (G2d48@mkstx G37f1@x '() '() '())))) (set! G370c@quasicons* (lambda (G37e9@x G37ea@y) ((letrec ((G37ed@f (lambda (G37ef@x) (if (null? G37ef@x) G37ea@y (G370e@quasicons (car G37ef@x) (G37ed@f (cdr G37ef@x))))))) G37ed@f) G37e9@x))) (set! G370e@quasicons (lambda (G37c3@x G37c4@y) ((lambda (G37c7@t) ((lambda (G37c9@ls/false) (if G37c9@ls/false (apply (lambda (G37cb@dy) ((lambda (G37cd@t) ((lambda (G37cf@ls/false) (if G37cf@ls/false (apply (lambda (G37d1@dx) (list (G2ee9@scheme-stx 'quote) (cons G37d1@dx G37cb@dy))) G37cf@ls/false) ((lambda (G37d3@t) ((lambda (G37d5@ls/false) (if G37d5@ls/false (apply (lambda () ((lambda (G37d7@t) ((lambda (G37d9@ls/false) (if G37d9@ls/false (apply (lambda () (list (G2ee9@scheme-stx 'list) G37c3@x)) G37d9@ls/false) ((lambda (G37db@t) ((lambda (G37dd@ls/false) (if G37dd@ls/false (apply (lambda () (list (G2ee9@scheme-stx 'cons) G37c3@x G37c4@y)) G37dd@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G37db@t))) (G2f5f@syntax-dispatch G37db@t '_))) G37d7@t))) (G2f5f@syntax-dispatch G37d7@t '()))) G37cb@dy)) G37d5@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G37d3@t))) (G2f5f@syntax-dispatch G37d3@t '_))) G37cd@t))) (G2f5f@syntax-dispatch G37cd@t '(#(scheme-id quote) any)))) G37c3@x)) G37c9@ls/false) ((lambda (G37df@t) ((lambda (G37e1@ls/false) (if G37e1@ls/false (apply (lambda (G37e3@stuff) (cons* (G2ee9@scheme-stx 'list) G37c3@x G37e3@stuff)) G37e1@ls/false) ((lambda (G37e5@t) ((lambda (G37e7@ls/false) (if G37e7@ls/false (apply (lambda () (list (G2ee9@scheme-stx 'cons) G37c3@x G37c4@y)) G37e7@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G37e5@t))) (G2f5f@syntax-dispatch G37e5@t '_))) G37df@t))) (G2f5f@syntax-dispatch G37df@t '(#(scheme-id list) . each-any)))) G37c7@t))) (G2f5f@syntax-dispatch G37c7@t '(#(scheme-id quote) any)))) G37c4@y))) (set! G3710@quasiappend (lambda (G37a9@x G37aa@y) ((lambda (G37ad@ls) (if (null? G37ad@ls) (list (G2ee9@scheme-stx 'quote) '()) (if (null? (cdr G37ad@ls)) (car G37ad@ls) (cons* (G2ee9@scheme-stx 'append) G37ad@ls)))) ((letrec ((G37af@f (lambda (G37b1@x) (if (null? G37b1@x) ((lambda (G37b3@t) ((lambda (G37b5@ls/false) (if G37b5@ls/false (apply (lambda () '()) G37b5@ls/false) ((lambda (G37b7@t) ((lambda (G37b9@ls/false) (if G37b9@ls/false (apply (lambda () (list G37aa@y)) G37b9@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G37b7@t))) (G2f5f@syntax-dispatch G37b7@t '_))) G37b3@t))) (G2f5f@syntax-dispatch G37b3@t '(#(scheme-id quote) ())))) G37aa@y) ((lambda (G37bb@t) ((lambda (G37bd@ls/false) (if G37bd@ls/false (apply (lambda () (G37af@f (cdr G37b1@x))) G37bd@ls/false) ((lambda (G37bf@t) ((lambda (G37c1@ls/false) (if G37c1@ls/false (apply (lambda () (cons (car G37b1@x) (G37af@f (cdr G37b1@x)))) G37c1@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G37bf@t))) (G2f5f@syntax-dispatch G37bf@t '_))) G37bb@t))) (G2f5f@syntax-dispatch G37bb@t '(#(scheme-id quote) ())))) (car G37b1@x)))))) G37af@f) G37a9@x)))) (set! G3712@quasivector (lambda (G3777@x) ((lambda (G3779@pat-x) ((lambda (G377b@t) ((lambda (G377d@ls/false) (if G377d@ls/false (apply (lambda (G377f@x*) (list (G2ee9@scheme-stx 'quote) (list->vector G377f@x*))) G377d@ls/false) ((lambda (G3781@t) ((lambda (G3783@ls/false) (if G3783@ls/false (apply (lambda () ((letrec ((G3785@f (lambda (G3787@x G3788@k) ((lambda (G378b@t) ((lambda (G378d@ls/false) (if G378d@ls/false (apply (lambda (G378f@x*) (G3788@k (map (lambda (G3791@x) (list (G2ee9@scheme-stx 'quote) G3791@x)) G378f@x*))) G378d@ls/false) ((lambda (G3793@t) ((lambda (G3795@ls/false) (if G3795@ls/false (apply (lambda (G3797@x*) (G3788@k G3797@x*)) G3795@ls/false) ((lambda (G3799@t) ((lambda (G379b@ls/false) (if G379b@ls/false (apply (lambda (G379d@x G379e@y) (G3785@f G379e@y (lambda (G37a1@ls) (G3788@k (cons G379d@x G37a1@ls))))) G379b@ls/false) ((lambda (G37a3@t) ((lambda (G37a5@ls/false) (if G37a5@ls/false (apply (lambda () (list (G2ee9@scheme-stx 'list->vector) G3779@pat-x)) G37a5@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G37a3@t))) (G2f5f@syntax-dispatch G37a3@t '_))) G3799@t))) (G2f5f@syntax-dispatch G3799@t '(#(scheme-id cons) any any)))) G3793@t))) (G2f5f@syntax-dispatch G3793@t '(#(scheme-id list) . each-any)))) G378b@t))) (G2f5f@syntax-dispatch G378b@t '(#(scheme-id quote) each-any)))) G3787@x)))) G3785@f) G3777@x (lambda (G37a7@ls) (cons* (G2ee9@scheme-stx 'vector) G37a7@ls)))) G3783@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3781@t))) (G2f5f@syntax-dispatch G3781@t '_))) G377b@t))) (G2f5f@syntax-dispatch G377b@t '(#(scheme-id quote) each-any)))) G3779@pat-x)) G3777@x))) (set! G3714@vquasi (lambda (G3755@p G3756@lev) ((lambda (G3759@t) ((lambda (G375b@ls/false) (if G375b@ls/false (apply (lambda (G375d@p G375e@q) ((lambda (G3761@t) ((lambda (G3763@ls/false) (if G3763@ls/false (apply (lambda (G3765@p) (if (= G3756@lev '0) (G370c@quasicons* G3765@p (G3714@vquasi G375e@q G3756@lev)) (G370e@quasicons (G370e@quasicons (G36ee@datum 'unquote) (G3716@quasi G3765@p (- G3756@lev '1))) (G3714@vquasi G375e@q G3756@lev)))) G3763@ls/false) ((lambda (G3767@t) ((lambda (G3769@ls/false) (if G3769@ls/false (apply (lambda (G376b@p) (if (= G3756@lev '0) (G3710@quasiappend G376b@p (G3714@vquasi G375e@q G3756@lev)) (G370e@quasicons (G370e@quasicons (G36ee@datum 'unquote-splicing) (G3716@quasi G376b@p (- G3756@lev '1))) (G3714@vquasi G375e@q G3756@lev)))) G3769@ls/false) ((lambda (G376d@t) ((lambda (G376f@ls/false) (if G376f@ls/false (apply (lambda (G3771@p) (G370e@quasicons (G3716@quasi G3771@p G3756@lev) (G3714@vquasi G375e@q G3756@lev))) G376f@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G376d@t))) (G2f5f@syntax-dispatch G376d@t 'any))) G3767@t))) (G2f5f@syntax-dispatch G3767@t '(#(scheme-id unquote-splicing) . each-any)))) G3761@t))) (G2f5f@syntax-dispatch G3761@t '(#(scheme-id unquote) . each-any)))) G375d@p)) G375b@ls/false) ((lambda (G3773@t) ((lambda (G3775@ls/false) (if G3775@ls/false (apply (lambda () (list (G2ee9@scheme-stx 'quote) '())) G3775@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3773@t))) (G2f5f@syntax-dispatch G3773@t '()))) G3759@t))) (G2f5f@syntax-dispatch G3759@t '(any . any)))) G3755@p))) (set! G3716@quasi (lambda (G371f@p G3720@lev) ((lambda (G3723@t) ((lambda (G3725@ls/false) (if G3725@ls/false (apply (lambda (G3727@p) (if (= G3720@lev '0) G3727@p (G370e@quasicons (G36ee@datum 'unquote) (G3716@quasi (list G3727@p) (- G3720@lev '1))))) G3725@ls/false) ((lambda (G3729@t) ((lambda (G372b@ls/false) (if G372b@ls/false (apply (lambda (G372d@p G372e@q) (if (= G3720@lev '0) (G370c@quasicons* G372d@p (G3716@quasi G372e@q G3720@lev)) (G370e@quasicons (G370e@quasicons (G36ee@datum 'unquote) (G3716@quasi G372d@p (- G3720@lev '1))) (G3716@quasi G372e@q G3720@lev)))) G372b@ls/false) ((lambda (G3731@t) ((lambda (G3733@ls/false) (if G3733@ls/false (apply (lambda (G3735@p G3736@q) (if (= G3720@lev '0) (G3710@quasiappend G3735@p (G3716@quasi G3736@q G3720@lev)) (G370e@quasicons (G370e@quasicons (G36ee@datum 'unquote-splicing) (G3716@quasi G3735@p (- G3720@lev '1))) (G3716@quasi G3736@q G3720@lev)))) G3733@ls/false) ((lambda (G3739@t) ((lambda (G373b@ls/false) (if G373b@ls/false (apply (lambda (G373d@p) (G370e@quasicons (G36ee@datum 'quasiquote) (G3716@quasi (list G373d@p) (+ G3720@lev '1)))) G373b@ls/false) ((lambda (G373f@t) ((lambda (G3741@ls/false) (if G3741@ls/false (apply (lambda (G3743@p G3744@q) (G370e@quasicons (G3716@quasi G3743@p G3720@lev) (G3716@quasi G3744@q G3720@lev))) G3741@ls/false) ((lambda (G3747@t) ((lambda (G3749@ls/false) (if (and G3749@ls/false (apply (lambda (G374b@x) (not (G2d28@stx? G374b@x))) G3749@ls/false)) (apply (lambda (G374d@x) (G3712@quasivector (G3714@vquasi G374d@x G3720@lev))) G3749@ls/false) ((lambda (G374f@t) ((lambda (G3751@ls/false) (if G3751@ls/false (apply (lambda (G3753@p) (list (G2ee9@scheme-stx 'quote) G3753@p)) G3751@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G374f@t))) (G2f5f@syntax-dispatch G374f@t 'any))) G3747@t))) (G2f5f@syntax-dispatch G3747@t '#(vector each-any)))) G373f@t))) (G2f5f@syntax-dispatch G373f@t '(any . any)))) G3739@t))) (G2f5f@syntax-dispatch G3739@t '(#(scheme-id quasiquote) any)))) G3731@t))) (G2f5f@syntax-dispatch G3731@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3729@t))) (G2f5f@syntax-dispatch G3729@t '((#(scheme-id unquote) . each-any) . any)))) G3723@t))) (G2f5f@syntax-dispatch G3723@t '(#(scheme-id unquote) any)))) G371f@p))) (lambda (G3717@x) ((lambda (G3719@t) ((lambda (G371b@ls/false) (if G371b@ls/false (apply (lambda (G371d@e) (G3716@quasi G371d@e '0)) G371b@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3719@t))) (G2f5f@syntax-dispatch G3719@t '(_ any)))) G3717@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f4f@quasisyntax-macro ((lambda () ((lambda (G37f4@quasi) (begin (set! G37f4@quasi (lambda (G380c@p G380d@lev) ((lambda (G3810@t) ((lambda (G3812@ls/false) (if G3812@ls/false (apply (lambda (G3814@p) (if (= G380d@lev '0) ((lambda (G3816@g) (values (list G3816@g) (list G3814@p) G3816@g)) (gensym)) (call-with-values (lambda () (G37f4@quasi G3814@p (- G380d@lev '1))) (lambda (G381b@G3818 G381c@G3819 G381d@G381a) ((lambda (G3821@p G3822@rhs* G3823@lhs*) (values G3823@lhs* G3822@rhs* (list 'unsyntax G3821@p))) G381d@G381a G381c@G3819 G381b@G3818))))) G3812@ls/false) ((lambda (G3827@t) ((lambda (G3829@ls/false) (if (and G3829@ls/false (apply (lambda () (= G380d@lev '0)) G3829@ls/false)) (apply (lambda () (G304a@syntax-violation '#f '"incorrect use of unsyntax" G380c@p)) G3829@ls/false) ((lambda (G382b@t) ((lambda (G382d@ls/false) (if G382d@ls/false (apply (lambda (G382f@p* G3830@q) (call-with-values (lambda () (G37f4@quasi G3830@q G380d@lev)) (lambda (G3836@G3833 G3837@G3834 G3838@G3835) ((lambda (G383c@q G383d@rhs* G383e@lhs*) (if (= G380d@lev '0) ((lambda (G3842@g*) (values (append G3842@g* G383e@lhs*) (append G382f@p* G383d@rhs*) (append G3842@g* G383c@q))) (map (lambda (G3844@x) (gensym)) G382f@p*)) (call-with-values (lambda () (G37f4@quasi G382f@p* (- G380d@lev '1))) (lambda (G3849@G3846 G384a@G3847 G384b@G3848) ((lambda (G384f@p* G3850@rhs2* G3851@lhs2*) (values (append G3851@lhs2* G383e@lhs*) (append G3850@rhs2* G383d@rhs*) (cons (cons 'unsyntax G384f@p*) G383c@q))) G384b@G3848 G384a@G3847 G3849@G3846))))) G3838@G3835 G3837@G3834 G3836@G3833)))) G382d@ls/false) ((lambda (G3855@t) ((lambda (G3857@ls/false) (if G3857@ls/false (apply (lambda (G3859@p* G385a@q) (call-with-values (lambda () (G37f4@quasi G385a@q G380d@lev)) (lambda (G3860@G385d G3861@G385e G3862@G385f) ((lambda (G3866@q G3867@rhs* G3868@lhs*) (if (= G380d@lev '0) ((lambda (G386c@g*) (values (append (map (lambda (G386e@g) (cons G386e@g '(...))) G386c@g*) G3868@lhs*) (append G3859@p* G3867@rhs*) (append (apply append (map (lambda (G3870@g) (cons G3870@g '(...))) G386c@g*)) G3866@q))) (map (lambda (G3872@x) (gensym)) G3859@p*)) (call-with-values (lambda () (G37f4@quasi G3859@p* (- G380d@lev '1))) (lambda (G3877@G3874 G3878@G3875 G3879@G3876) ((lambda (G387d@p* G387e@rhs2* G387f@lhs2*) (values (append G387f@lhs2* G3868@lhs*) (append G387e@rhs2* G3867@rhs*) (cons (cons 'unsyntax-splicing G387d@p*) G3866@q))) G3879@G3876 G3878@G3875 G3877@G3874))))) G3862@G385f G3861@G385e G3860@G385d)))) G3857@ls/false) ((lambda (G3883@t) ((lambda (G3885@ls/false) (if (and G3885@ls/false (apply (lambda () (= G380d@lev '0)) G3885@ls/false)) (apply (lambda () (G304a@syntax-violation '#f '"incorrect use of unsyntax-splicing" G380c@p)) G3885@ls/false) ((lambda (G3887@t) ((lambda (G3889@ls/false) (if G3889@ls/false (apply (lambda (G388b@p) (call-with-values (lambda () (G37f4@quasi G388b@p (+ G380d@lev '1))) (lambda (G3890@G388d G3891@G388e G3892@G388f) ((lambda (G3896@p G3897@rhs* G3898@lhs*) (values G3898@lhs* G3897@rhs* (list 'quasisyntax G3896@p))) G3892@G388f G3891@G388e G3890@G388d)))) G3889@ls/false) ((lambda (G389c@t) ((lambda (G389e@ls/false) (if G389e@ls/false (apply (lambda (G38a0@p G38a1@q) (call-with-values (lambda () (G37f4@quasi G38a0@p G380d@lev)) (lambda (G38aa@G38a4 G38ab@G38a5 G38ac@G38a6) (call-with-values (lambda () (G37f4@quasi G38a1@q G380d@lev)) (lambda (G38b0@G38a7 G38b1@G38a8 G38b2@G38a9) ((lambda (G38b6@q G38b7@rhs2* G38b8@lhs2* G38b9@p G38ba@rhs* G38bb@lhs*) (values (append G38b8@lhs2* G38bb@lhs*) (append G38b7@rhs2* G38ba@rhs*) (cons G38b9@p G38b6@q))) G38b2@G38a9 G38b1@G38a8 G38b0@G38a7 G38ac@G38a6 G38ab@G38a5 G38aa@G38a4)))))) G389e@ls/false) ((lambda (G38c2@t) ((lambda (G38c4@ls/false) (if G38c4@ls/false (apply (lambda (G38c6@x*) (call-with-values (lambda () (G37f4@quasi G38c6@x* G380d@lev)) (lambda (G38cb@G38c8 G38cc@G38c9 G38cd@G38ca) ((lambda (G38d1@x* G38d2@rhs* G38d3@lhs*) (values G38d3@lhs* G38d2@rhs* (list->vector G38d1@x*))) G38cd@G38ca G38cc@G38c9 G38cb@G38c8)))) G38c4@ls/false) ((lambda (G38d7@t) ((lambda (G38d9@ls/false) (if G38d9@ls/false (apply (lambda () (values '() '() G380c@p)) G38d9@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G38d7@t))) (G2f5f@syntax-dispatch G38d7@t '_))) G38c2@t))) (G2f5f@syntax-dispatch G38c2@t '#(vector each-any)))) G389c@t))) (G2f5f@syntax-dispatch G389c@t '(any . any)))) G3887@t))) (G2f5f@syntax-dispatch G3887@t '(#(scheme-id quasisyntax) any)))) G3883@t))) (G2f5f@syntax-dispatch G3883@t '#(scheme-id unsyntax-splicing)))) G3855@t))) (G2f5f@syntax-dispatch G3855@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G382b@t))) (G2f5f@syntax-dispatch G382b@t '((#(scheme-id unsyntax) . each-any) . any)))) G3827@t))) (G2f5f@syntax-dispatch G3827@t '#(scheme-id unsyntax)))) G3810@t))) (G2f5f@syntax-dispatch G3810@t '(#(scheme-id unsyntax) any)))) G380c@p))) (lambda (G37f5@x) ((lambda (G37f7@t) ((lambda (G37f9@ls/false) (if G37f9@ls/false (apply (lambda (G37fb@e) (call-with-values (lambda () (G37f4@quasi G37fb@e '0)) (lambda (G3800@G37fd G3801@G37fe G3802@G37ff) ((lambda (G3806@v G3807@rhs* G3808@lhs*) (G2f15@bless (list 'syntax-case (cons 'list G3807@rhs*) '() (list G3808@lhs* (list 'syntax G3806@v))))) G3802@G37ff G3801@G37fe G3800@G37fd)))) G37f9@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G37f7@t))) (G2f5f@syntax-dispatch G37f7@t '(_ any)))) G37f5@x)))) '#f)))) (set! G2f51@define-struct-macro (lambda (G38db@stx) (G304a@syntax-violation '#f '"define-struct not supported" G38db@stx))) (set! G2f53@define-record-type-macro (lambda (G38dd@x) ((lambda (G38e0@id G38e2@get-record-name G38e4@get-record-constructor-name G38e6@get-record-predicate-name G38e8@get-clause G38ea@foo-rtd-code G38ec@parent-rtd-code G38ee@parent-rcd-code G38f0@foo-rcd-code G38f2@get-protocol-code G38f4@get-fields G38f6@get-mutator-indices G38f8@get-mutators G38fa@get-accessors G38fc@enumerate G38fe@do-define-record G3900@verify-clauses) (begin (set! G38e0@id (lambda (G3ad3@ctxt . G3ad5@str*) (G304e@datum->syntax G3ad3@ctxt (string->symbol (apply string-append (map (lambda (G3ad7@x) (if (symbol? G3ad7@x) (symbol->string G3ad7@x) (if (string? G3ad7@x) G3ad7@x (assertion-violation 'define-record-type '"BUG")))) G3ad5@str*)))))) (set! G38e2@get-record-name (lambda (G3ac1@spec) ((lambda (G3ac3@t) ((lambda (G3ac5@ls/false) (if G3ac5@ls/false (apply (lambda (G3ac7@foo G3ac8@make-foo G3ac9@foo?) G3ac7@foo) G3ac5@ls/false) ((lambda (G3acd@t) ((lambda (G3acf@ls/false) (if G3acf@ls/false (apply (lambda (G3ad1@foo) G3ad1@foo) G3acf@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3acd@t))) (G2f5f@syntax-dispatch G3acd@t 'any))) G3ac3@t))) (G2f5f@syntax-dispatch G3ac3@t '(any any any)))) G3ac1@spec))) (set! G38e4@get-record-constructor-name (lambda (G3aad@spec) ((lambda (G3aaf@t) ((lambda (G3ab1@ls/false) (if G3ab1@ls/false (apply (lambda (G3ab3@foo G3ab4@make-foo G3ab5@foo?) G3ab4@make-foo) G3ab1@ls/false) ((lambda (G3ab9@t) ((lambda (G3abb@ls/false) (if (and G3abb@ls/false (apply (lambda (G3abd@foo) (G2d60@id? G3abd@foo)) G3abb@ls/false)) (apply (lambda (G3abf@foo) (G38e0@id G3abf@foo '"make-" (G2d76@stx->datum G3abf@foo))) G3abb@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3ab9@t))) (G2f5f@syntax-dispatch G3ab9@t 'any))) G3aaf@t))) (G2f5f@syntax-dispatch G3aaf@t '(any any any)))) G3aad@spec))) (set! G38e6@get-record-predicate-name (lambda (G3a99@spec) ((lambda (G3a9b@t) ((lambda (G3a9d@ls/false) (if G3a9d@ls/false (apply (lambda (G3a9f@foo G3aa0@make-foo G3aa1@foo?) G3aa1@foo?) G3a9d@ls/false) ((lambda (G3aa5@t) ((lambda (G3aa7@ls/false) (if (and G3aa7@ls/false (apply (lambda (G3aa9@foo) (G2d60@id? G3aa9@foo)) G3aa7@ls/false)) (apply (lambda (G3aab@foo) (G38e0@id G3aab@foo (G2d76@stx->datum G3aab@foo) '"?")) G3aa7@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3aa5@t))) (G2f5f@syntax-dispatch G3aa5@t 'any))) G3a9b@t))) (G2f5f@syntax-dispatch G3a9b@t '(any any any)))) G3a99@spec))) (set! G38e8@get-clause (lambda (G3a87@id G3a88@ls) ((lambda (G3a8b@t) ((lambda (G3a8d@ls/false) (if G3a8d@ls/false (apply (lambda () '#f) G3a8d@ls/false) ((lambda (G3a8f@t) ((lambda (G3a91@ls/false) (if G3a91@ls/false (apply (lambda (G3a93@x G3a94@rest G3a95@ls) (if (G2d68@free-id=? (G2f15@bless G3a87@id) G3a93@x) (cons G3a93@x G3a94@rest) (G38e8@get-clause G3a87@id G3a95@ls))) G3a91@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a8f@t))) (G2f5f@syntax-dispatch G3a8f@t '((any . any) . any)))) G3a8b@t))) (G2f5f@syntax-dispatch G3a8b@t '()))) G3a88@ls))) (set! G38ea@foo-rtd-code (lambda (G3a35@name G3a36@clause* G3a37@parent-rtd-code) ((lambda (G3a3c@convert-field-spec*) (begin (set! G3a3c@convert-field-spec* (lambda (G3a6d@ls) (list->vector (map (lambda (G3a6f@x) ((lambda (G3a71@t) ((lambda (G3a73@ls/false) (if G3a73@ls/false (apply (lambda (G3a75@name G3a76@rest) (list 'mutable G3a75@name)) G3a73@ls/false) ((lambda (G3a79@t) ((lambda (G3a7b@ls/false) (if G3a7b@ls/false (apply (lambda (G3a7d@name G3a7e@rest) (list 'immutable G3a7d@name)) G3a7b@ls/false) ((lambda (G3a81@t) ((lambda (G3a83@ls/false) (if G3a83@ls/false (apply (lambda (G3a85@name) (list 'immutable G3a85@name)) G3a83@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a81@t))) (G2f5f@syntax-dispatch G3a81@t 'any))) G3a79@t))) (G2f5f@syntax-dispatch G3a79@t '(#(scheme-id immutable) any . any)))) G3a71@t))) (G2f5f@syntax-dispatch G3a71@t '(#(scheme-id mutable) any . any)))) G3a6f@x)) G3a6d@ls)))) ((lambda (G3a3d@uid-code G3a3e@sealed? G3a3f@opaque? G3a40@fields) (G2f15@bless (list 'make-record-type-descriptor (list 'quote G3a35@name) G3a37@parent-rtd-code G3a3d@uid-code G3a3e@sealed? G3a3f@opaque? G3a40@fields))) ((lambda (G3a45@t) ((lambda (G3a47@ls/false) (if G3a47@ls/false (apply (lambda () (list 'quote (gensym))) G3a47@ls/false) ((lambda (G3a49@t) ((lambda (G3a4b@ls/false) (if G3a4b@ls/false (apply (lambda (G3a4d@uid) (list 'quote G3a4d@uid)) G3a4b@ls/false) ((lambda (G3a4f@t) ((lambda (G3a51@ls/false) (if G3a51@ls/false (apply (lambda () '#f) G3a51@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a4f@t))) (G2f5f@syntax-dispatch G3a4f@t '_))) G3a49@t))) (G2f5f@syntax-dispatch G3a49@t '(_ any)))) G3a45@t))) (G2f5f@syntax-dispatch G3a45@t '(_)))) (G38e8@get-clause 'nongenerative G3a36@clause*)) ((lambda (G3a53@t) ((lambda (G3a55@ls/false) (if G3a55@ls/false (apply (lambda () '#t) G3a55@ls/false) ((lambda (G3a57@t) ((lambda (G3a59@ls/false) (if G3a59@ls/false (apply (lambda () '#f) G3a59@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a57@t))) (G2f5f@syntax-dispatch G3a57@t '_))) G3a53@t))) (G2f5f@syntax-dispatch G3a53@t '(_ #(atom #t))))) (G38e8@get-clause 'sealed G3a36@clause*)) ((lambda (G3a5b@t) ((lambda (G3a5d@ls/false) (if G3a5d@ls/false (apply (lambda () '#t) G3a5d@ls/false) ((lambda (G3a5f@t) ((lambda (G3a61@ls/false) (if G3a61@ls/false (apply (lambda () '#f) G3a61@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a5f@t))) (G2f5f@syntax-dispatch G3a5f@t '_))) G3a5b@t))) (G2f5f@syntax-dispatch G3a5b@t '(_ #(atom #t))))) (G38e8@get-clause 'opaque G3a36@clause*)) ((lambda (G3a63@t) ((lambda (G3a65@ls/false) (if G3a65@ls/false (apply (lambda (G3a67@field-spec*) (list 'quote (G3a3c@convert-field-spec* G3a67@field-spec*))) G3a65@ls/false) ((lambda (G3a69@t) ((lambda (G3a6b@ls/false) (if G3a6b@ls/false (apply (lambda () ''#()) G3a6b@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a69@t))) (G2f5f@syntax-dispatch G3a69@t '_))) G3a63@t))) (G2f5f@syntax-dispatch G3a63@t '(_ . each-any)))) (G38e8@get-clause 'fields G3a36@clause*))))) '#f))) (set! G38ec@parent-rtd-code (lambda (G3a1d@clause*) ((lambda (G3a1f@t) ((lambda (G3a21@ls/false) (if G3a21@ls/false (apply (lambda (G3a23@name) (list 'record-type-descriptor G3a23@name)) G3a21@ls/false) ((lambda (G3a25@t) ((lambda (G3a27@ls/false) (if G3a27@ls/false (apply (lambda () ((lambda (G3a29@t) ((lambda (G3a2b@ls/false) (if G3a2b@ls/false (apply (lambda (G3a2d@rtd G3a2e@rcd) G3a2d@rtd) G3a2b@ls/false) ((lambda (G3a31@t) ((lambda (G3a33@ls/false) (if G3a33@ls/false (apply (lambda () '#f) G3a33@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a31@t))) (G2f5f@syntax-dispatch G3a31@t '#(atom #f)))) G3a29@t))) (G2f5f@syntax-dispatch G3a29@t '(_ any any)))) (G38e8@get-clause 'parent-rtd G3a1d@clause*))) G3a27@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a25@t))) (G2f5f@syntax-dispatch G3a25@t '#(atom #f)))) G3a1f@t))) (G2f5f@syntax-dispatch G3a1f@t '(_ any)))) (G38e8@get-clause 'parent G3a1d@clause*)))) (set! G38ee@parent-rcd-code (lambda (G3a05@clause*) ((lambda (G3a07@t) ((lambda (G3a09@ls/false) (if G3a09@ls/false (apply (lambda (G3a0b@name) (list 'record-constructor-descriptor G3a0b@name)) G3a09@ls/false) ((lambda (G3a0d@t) ((lambda (G3a0f@ls/false) (if G3a0f@ls/false (apply (lambda () ((lambda (G3a11@t) ((lambda (G3a13@ls/false) (if G3a13@ls/false (apply (lambda (G3a15@rtd G3a16@rcd) G3a16@rcd) G3a13@ls/false) ((lambda (G3a19@t) ((lambda (G3a1b@ls/false) (if G3a1b@ls/false (apply (lambda () '#f) G3a1b@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a19@t))) (G2f5f@syntax-dispatch G3a19@t '#(atom #f)))) G3a11@t))) (G2f5f@syntax-dispatch G3a11@t '(_ any any)))) (G38e8@get-clause 'parent-rtd G3a05@clause*))) G3a0f@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3a0d@t))) (G2f5f@syntax-dispatch G3a0d@t '#(atom #f)))) G3a07@t))) (G2f5f@syntax-dispatch G3a07@t '(_ any)))) (G38e8@get-clause 'parent G3a05@clause*)))) (set! G38f0@foo-rcd-code (lambda (G39fd@clause* G39fe@foo-rtd G39ff@protocol G3a00@parent-rcd-code) (list 'make-record-constructor-descriptor G39fe@foo-rtd G3a00@parent-rcd-code G39ff@protocol))) (set! G38f2@get-protocol-code (lambda (G39f1@clause*) ((lambda (G39f3@t) ((lambda (G39f5@ls/false) (if G39f5@ls/false (apply (lambda (G39f7@expr) G39f7@expr) G39f5@ls/false) ((lambda (G39f9@t) ((lambda (G39fb@ls/false) (if G39fb@ls/false (apply (lambda () '#f) G39fb@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G39f9@t))) (G2f5f@syntax-dispatch G39f9@t '_))) G39f3@t))) (G2f5f@syntax-dispatch G39f3@t '(_ any)))) (G38e8@get-clause 'protocol G39f1@clause*)))) (set! G38f4@get-fields (lambda (G39df@clause*) ((lambda (G39e1@t) ((lambda (G39e3@ls/false) (if G39e3@ls/false (apply (lambda () '()) G39e3@ls/false) ((lambda (G39e5@t) ((lambda (G39e7@ls/false) (if G39e7@ls/false (apply (lambda (G39e9@f*) G39e9@f*) G39e7@ls/false) ((lambda (G39eb@t) ((lambda (G39ed@ls/false) (if G39ed@ls/false (apply (lambda (G39ef@rest) (G38f4@get-fields G39ef@rest)) G39ed@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G39eb@t))) (G2f5f@syntax-dispatch G39eb@t '(_ . any)))) G39e5@t))) (G2f5f@syntax-dispatch G39e5@t '((#(scheme-id fields) . each-any) . _)))) G39e1@t))) (G2f5f@syntax-dispatch G39e1@t '()))) G39df@clause*))) (set! G38f6@get-mutator-indices (lambda (G39c7@fields) ((letrec ((G39c9@f (lambda (G39cb@fields G39cc@i) ((lambda (G39cf@t) ((lambda (G39d1@ls/false) (if G39d1@ls/false (apply (lambda () '()) G39d1@ls/false) ((lambda (G39d3@t) ((lambda (G39d5@ls/false) (if G39d5@ls/false (apply (lambda (G39d7@rest) (cons G39cc@i (G39c9@f G39d7@rest (+ G39cc@i '1)))) G39d5@ls/false) ((lambda (G39d9@t) ((lambda (G39db@ls/false) (if G39db@ls/false (apply (lambda (G39dd@rest) (G39c9@f G39dd@rest (+ G39cc@i '1))) G39db@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G39d9@t))) (G2f5f@syntax-dispatch G39d9@t '(_ . any)))) G39d3@t))) (G2f5f@syntax-dispatch G39d3@t '((#(scheme-id mutable) . _) . any)))) G39cf@t))) (G2f5f@syntax-dispatch G39cf@t '()))) G39cb@fields)))) G39c9@f) G39c7@fields '0))) (set! G38f8@get-mutators (lambda (G399d@foo G399e@fields) ((lambda (G39a2@gen-name) (begin (set! G39a2@gen-name (lambda (G39c5@x) (G304e@datum->syntax G399d@foo (string->symbol (string-append (symbol->string (G3050@syntax->datum G399d@foo)) '"-" (symbol->string (G3050@syntax->datum G39c5@x)) '"-set!"))))) ((letrec ((G39a3@f (lambda (G39a5@fields) ((lambda (G39a7@t) ((lambda (G39a9@ls/false) (if G39a9@ls/false (apply (lambda () '()) G39a9@ls/false) ((lambda (G39ab@t) ((lambda (G39ad@ls/false) (if G39ad@ls/false (apply (lambda (G39af@name G39b0@accessor G39b1@mutator G39b2@rest) (cons G39b1@mutator (G39a3@f G39b2@rest))) G39ad@ls/false) ((lambda (G39b7@t) ((lambda (G39b9@ls/false) (if G39b9@ls/false (apply (lambda (G39bb@name G39bc@rest) (cons (G39a2@gen-name G39bb@name) (G39a3@f G39bc@rest))) G39b9@ls/false) ((lambda (G39bf@t) ((lambda (G39c1@ls/false) (if G39c1@ls/false (apply (lambda (G39c3@rest) (G39a3@f G39c3@rest)) G39c1@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G39bf@t))) (G2f5f@syntax-dispatch G39bf@t '(_ . any)))) G39b7@t))) (G2f5f@syntax-dispatch G39b7@t '((#(scheme-id mutable) any) . any)))) G39ab@t))) (G2f5f@syntax-dispatch G39ab@t '((#(scheme-id mutable) any any any) . any)))) G39a7@t))) (G2f5f@syntax-dispatch G39a7@t '()))) G39a5@fields)))) G39a3@f) G399e@fields))) '#f))) (set! G38fa@get-accessors (lambda (G3959@foo G395a@fields) ((lambda (G395e@gen-name) (begin (set! G395e@gen-name (lambda (G399b@x) (G304e@datum->syntax G3959@foo (string->symbol (string-append (symbol->string (G3050@syntax->datum G3959@foo)) '"-" (symbol->string (G3050@syntax->datum G399b@x))))))) (map (lambda (G395f@field) ((lambda (G3961@t) ((lambda (G3963@ls/false) (if (and G3963@ls/false (apply (lambda (G3965@name G3966@accessor G3967@mutator) (G2d60@id? G3966@accessor)) G3963@ls/false)) (apply (lambda (G396b@name G396c@accessor G396d@mutator) G396c@accessor) G3963@ls/false) ((lambda (G3971@t) ((lambda (G3973@ls/false) (if (and G3973@ls/false (apply (lambda (G3975@name G3976@accessor) (G2d60@id? G3976@accessor)) G3973@ls/false)) (apply (lambda (G3979@name G397a@accessor) G397a@accessor) G3973@ls/false) ((lambda (G397d@t) ((lambda (G397f@ls/false) (if (and G397f@ls/false (apply (lambda (G3981@name) (G2d60@id? G3981@name)) G397f@ls/false)) (apply (lambda (G3983@name) (G395e@gen-name G3983@name)) G397f@ls/false) ((lambda (G3985@t) ((lambda (G3987@ls/false) (if (and G3987@ls/false (apply (lambda (G3989@name) (G2d60@id? G3989@name)) G3987@ls/false)) (apply (lambda (G398b@name) (G395e@gen-name G398b@name)) G3987@ls/false) ((lambda (G398d@t) ((lambda (G398f@ls/false) (if (and G398f@ls/false (apply (lambda (G3991@name) (G2d60@id? G3991@name)) G398f@ls/false)) (apply (lambda (G3993@name) (G395e@gen-name G3993@name)) G398f@ls/false) ((lambda (G3995@t) ((lambda (G3997@ls/false) (if G3997@ls/false (apply (lambda (G3999@others) (G304a@syntax-violation '#f '"invalid field spec" G395f@field)) G3997@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3995@t))) (G2f5f@syntax-dispatch G3995@t 'any))) G398d@t))) (G2f5f@syntax-dispatch G398d@t 'any))) G3985@t))) (G2f5f@syntax-dispatch G3985@t '(#(scheme-id immutable) any)))) G397d@t))) (G2f5f@syntax-dispatch G397d@t '(#(scheme-id mutable) any)))) G3971@t))) (G2f5f@syntax-dispatch G3971@t '(#(scheme-id immutable) any any)))) G3961@t))) (G2f5f@syntax-dispatch G3961@t '(#(scheme-id mutable) any any any)))) G395f@field)) G395a@fields))) '#f))) (set! G38fc@enumerate (lambda (G3951@ls) ((letrec ((G3953@f (lambda (G3955@ls G3956@i) (if (null? G3955@ls) '() (cons G3956@i (G3953@f (cdr G3955@ls) (+ G3956@i '1))))))) G3953@f) G3951@ls '0))) (set! G38fe@do-define-record (lambda (G3929@namespec G392a@clause*) ((lambda (G392d@foo) ((lambda (G392f@foo-rtd) ((lambda (G3931@foo-rcd) ((lambda (G3933@protocol) ((lambda (G3935@make-foo) ((lambda (G3937@fields) ((lambda (G3939@idx*) ((lambda (G393b@foo-x*) ((lambda (G393d@set-foo-x!*) ((lambda (G393f@set-foo-idx*) ((lambda (G3941@foo?) ((lambda (G3943@foo-rtd-code) ((lambda (G3945@foo-rcd-code) ((lambda (G3947@protocol-code) ((lambda () (G2f15@bless (cons 'begin (cons (list 'define G392f@foo-rtd G3943@foo-rtd-code) (cons (list 'define G3933@protocol G3947@protocol-code) (cons (list 'define G3931@foo-rcd G3945@foo-rcd-code) (cons (list 'define-syntax G392d@foo (list 'list ''$rtd (list 'syntax G392f@foo-rtd) (list 'syntax G3931@foo-rcd))) (cons (list 'define G3941@foo? (list 'record-predicate G392f@foo-rtd)) (cons (list 'define G3935@make-foo (list 'record-constructor G3931@foo-rcd)) (append (map (lambda (G3949@foo-x G394a@idx) (list 'define G3949@foo-x (list 'record-accessor G392f@foo-rtd G394a@idx))) G393b@foo-x* G3939@idx*) (map (lambda (G394d@set-foo-x! G394e@idx) (list 'define G394d@set-foo-x! (list 'record-mutator G392f@foo-rtd G394e@idx))) G393d@set-foo-x!* G393f@set-foo-idx*))))))))))))) (G38f2@get-protocol-code G392a@clause*))) (G38f0@foo-rcd-code G392a@clause* G392f@foo-rtd G3933@protocol (G38ee@parent-rcd-code G392a@clause*)))) (G38ea@foo-rtd-code G392d@foo G392a@clause* (G38ec@parent-rtd-code G392a@clause*)))) (G38e6@get-record-predicate-name G3929@namespec))) (G38f6@get-mutator-indices G3937@fields))) (G38f8@get-mutators G392d@foo G3937@fields))) (G38fa@get-accessors G392d@foo G3937@fields))) (G38fc@enumerate G3937@fields))) (G38f4@get-fields G392a@clause*))) (G38e4@get-record-constructor-name G3929@namespec))) (gensym))) (gensym))) (gensym))) (G38e2@get-record-name G3929@namespec)))) (set! G3900@verify-clauses (lambda (G3909@x G390a@cls*) ((lambda (G390e@valid-kwds G3910@free-id-member?) (begin (set! G390e@valid-kwds (map G2f15@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G3910@free-id-member? (lambda (G3925@x G3926@ls) (and (pair? G3926@ls) (or (G2d68@free-id=? G3925@x (car G3926@ls)) (G3910@free-id-member? G3925@x (cdr G3926@ls)))))) ((letrec ((G3911@f (lambda (G3913@cls* G3914@seen*) (if (not (null? G3913@cls*)) ((lambda (G3917@t) ((lambda (G3919@ls/false) (if G3919@ls/false (apply (lambda (G391b@kwd G391c@rest) (if (or (not (G2d60@id? G391b@kwd)) (not (G3910@free-id-member? G391b@kwd G390e@valid-kwds))) (G304a@syntax-violation '#f '"not a valid define-record-type keyword" G391b@kwd) (if (G2d6e@bound-id-member? G391b@kwd G3914@seen*) (G304a@syntax-violation '#f '"duplicate use of keyword " G3909@x G391b@kwd) (G3911@f (cdr G3913@cls*) (cons G391b@kwd G3914@seen*))))) G3919@ls/false) ((lambda (G391f@t) ((lambda (G3921@ls/false) (if G3921@ls/false (apply (lambda (G3923@cls) (G304a@syntax-violation '#f '"malformed define-record-type clause" G3923@cls)) G3921@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G391f@t))) (G2f5f@syntax-dispatch G391f@t 'any))) G3917@t))) (G2f5f@syntax-dispatch G3917@t '(any . any)))) (car G3913@cls*)) (void))))) G3911@f) G390a@cls* '()))) '#f '#f))) ((lambda (G3901@t) ((lambda (G3903@ls/false) (if G3903@ls/false (apply (lambda (G3905@namespec G3906@clause*) (begin (G3900@verify-clauses G38dd@x G3906@clause*) (G38fe@do-define-record G3905@namespec G3906@clause*))) G3903@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3901@t))) (G2f5f@syntax-dispatch G3901@t '(_ any . each-any)))) G38dd@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f55@define-condition-type-macro (lambda (G3ad9@x) ((lambda (G3adc@mkname) (begin (set! G3adc@mkname (lambda (G3b09@name G3b0a@suffix) (G304e@datum->syntax G3b09@name (string->symbol (string-append (symbol->string (G3050@syntax->datum G3b09@name)) G3b0a@suffix))))) ((lambda (G3add@t) ((lambda (G3adf@ls/false) (if (and G3adf@ls/false (apply (lambda (G3ae1@ctxt G3ae2@name G3ae3@super G3ae4@constructor G3ae5@predicate G3ae6@field* G3ae7@accessor*) (and (G2d60@id? G3ae2@name) (G2d60@id? G3ae3@super) (G2d60@id? G3ae4@constructor) (G2d60@id? G3ae5@predicate) (for-all G2d60@id? G3ae6@field*) (for-all G2d60@id? G3ae7@accessor*))) G3adf@ls/false)) (apply (lambda (G3aef@ctxt G3af0@name G3af1@super G3af2@constructor G3af3@predicate G3af4@field* G3af5@accessor*) ((lambda (G3afd@aux-accessor*) (G2f15@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3af0@name G3af2@constructor (gensym)) (cons (list 'parent G3af1@super) (cons (cons 'fields (map (lambda (G3aff@field G3b00@aux) (list 'immutable G3aff@field G3b00@aux)) G3af4@field* G3afd@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3af3@predicate (list 'condition-predicate (list 'record-type-descriptor G3af0@name))) (map (lambda (G3b03@accessor G3b04@aux) (list 'define G3b03@accessor (list 'condition-accessor (list 'record-type-descriptor G3af0@name) G3b04@aux))) G3af5@accessor* G3afd@aux-accessor*)))))) (map (lambda (G3b07@x) (gensym)) G3af5@accessor*))) G3adf@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3add@t))) (G2f5f@syntax-dispatch G3add@t '(any any any any any . #(each (any any)))))) G3ad9@x))) '#f))) (set! G2f57@incorrect-usage-macro (lambda (G3b0d@e) (G304a@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b0d@e))) (set! G2f59@parameterize-macro (lambda (G3b0f@e) ((lambda (G3b11@t) ((lambda (G3b13@ls/false) (if G3b13@ls/false (apply (lambda (G3b15@b G3b16@b*) (G2f15@bless (cons 'let (cons '() (cons G3b15@b G3b16@b*))))) G3b13@ls/false) ((lambda (G3b19@t) ((lambda (G3b1b@ls/false) (if G3b1b@ls/false (apply (lambda (G3b1d@olhs* G3b1e@orhs* G3b1f@b G3b20@b*) ((lambda (G3b25@lhs* G3b26@rhs*) (G2f15@bless (cons (list 'lambda (append G3b25@lhs* G3b26@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b29@lhs G3b2a@rhs) (list 'let (list (list 't (list G3b29@lhs))) (list G3b29@lhs G3b2a@rhs) (cons 'set! (cons G3b2a@rhs '(t))))) G3b25@lhs* G3b26@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b1f@b G3b20@b*))) '(swap)))))) (append G3b1d@olhs* G3b1e@orhs*)))) (G3038@generate-temporaries G3b1d@olhs*) (G3038@generate-temporaries G3b1e@orhs*))) G3b1b@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3b19@t))) (G2f5f@syntax-dispatch G3b19@t '(_ #(each (any any)) any . each-any)))) G3b11@t))) (G2f5f@syntax-dispatch G3b11@t '(_ () any . each-any)))) G3b0f@e))) (set! G2f5b@foreign-call-transformer (lambda (G3b2d@e G3b2e@r G3b2f@mr) ((lambda (G3b33@t) ((lambda (G3b35@ls/false) (if G3b35@ls/false (apply (lambda (G3b37@name G3b38@arg*) (cons 'foreign-call (cons (G2f83@chi-expr G3b37@name G3b2e@r G3b2f@mr) (G2f7f@chi-expr* G3b38@arg* G3b2e@r G3b2f@mr)))) G3b35@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3b33@t))) (G2f5f@syntax-dispatch G3b33@t '(_ any . each-any)))) G3b2d@e))) (set! G2f5d@convert-pattern (lambda (G3b3b@pattern G3b3c@keys) ((lambda (G3b40@cvt* G3b42@cvt) (begin (set! G3b40@cvt* (lambda (G3bd1@p* G3bd2@n G3bd3@ids) (if (null? G3bd1@p*) (values '() G3bd3@ids) (call-with-values (lambda () (G3b40@cvt* (cdr G3bd1@p*) G3bd2@n G3bd3@ids)) (lambda (G3bd9@G3bd7 G3bda@G3bd8) ((lambda (G3bdd@ids G3bde@y) (call-with-values (lambda () (G3b42@cvt (car G3bd1@p*) G3bd2@n G3bdd@ids)) (lambda (G3be3@G3be1 G3be4@G3be2) ((lambda (G3be7@ids G3be8@x) (values (cons G3be8@x G3bde@y) G3be7@ids)) G3be4@G3be2 G3be3@G3be1)))) G3bda@G3bd8 G3bd9@G3bd7)))))) (set! G3b42@cvt (lambda (G3b43@p G3b44@n G3b45@ids) ((lambda (G3b49@t) ((lambda (G3b4b@ls/false) (if (and G3b4b@ls/false (apply (lambda (G3b4d@id) (G2d60@id? G3b4d@id)) G3b4b@ls/false)) (apply (lambda (G3b4f@id) (if (G2d6e@bound-id-member? G3b43@p G3b3c@keys) (values (vector 'free-id G3b43@p) G3b45@ids) (if (G2d68@free-id=? G3b43@p (G2ee9@scheme-stx '_)) (values '_ G3b45@ids) (values 'any (cons (cons G3b43@p G3b44@n) G3b45@ids))))) G3b4b@ls/false) ((lambda (G3b51@t) ((lambda (G3b53@ls/false) (if (and G3b53@ls/false (apply (lambda (G3b55@p G3b56@dots) (G2f61@ellipsis? G3b56@dots)) G3b53@ls/false)) (apply (lambda (G3b59@p G3b5a@dots) (call-with-values (lambda () (G3b42@cvt G3b59@p (+ G3b44@n '1) G3b45@ids)) (lambda (G3b5f@G3b5d G3b60@G3b5e) ((lambda (G3b63@ids G3b64@p) (values (if (eq? G3b64@p 'any) 'each-any (vector 'each G3b64@p)) G3b63@ids)) G3b60@G3b5e G3b5f@G3b5d)))) G3b53@ls/false) ((lambda (G3b67@t) ((lambda (G3b69@ls/false) (if (and G3b69@ls/false (apply (lambda (G3b6b@x G3b6c@dots G3b6d@ys G3b6e@z) (G2f61@ellipsis? G3b6c@dots)) G3b69@ls/false)) (apply (lambda (G3b73@x G3b74@dots G3b75@ys G3b76@z) (call-with-values (lambda () (G3b42@cvt G3b76@z G3b44@n G3b45@ids)) (lambda (G3b7d@G3b7b G3b7e@G3b7c) ((lambda (G3b81@ids G3b82@z) (call-with-values (lambda () (G3b40@cvt* G3b75@ys G3b44@n G3b81@ids)) (lambda (G3b87@G3b85 G3b88@G3b86) ((lambda (G3b8b@ids G3b8c@ys) (call-with-values (lambda () (G3b42@cvt G3b73@x (+ G3b44@n '1) G3b8b@ids)) (lambda (G3b91@G3b8f G3b92@G3b90) ((lambda (G3b95@ids G3b96@x) (values (vector 'each+ G3b96@x (reverse G3b8c@ys) G3b82@z) G3b95@ids)) G3b92@G3b90 G3b91@G3b8f)))) G3b88@G3b86 G3b87@G3b85)))) G3b7e@G3b7c G3b7d@G3b7b)))) G3b69@ls/false) ((lambda (G3b99@t) ((lambda (G3b9b@ls/false) (if G3b9b@ls/false (apply (lambda (G3b9d@x G3b9e@y) (call-with-values (lambda () (G3b42@cvt G3b9e@y G3b44@n G3b45@ids)) (lambda (G3ba3@G3ba1 G3ba4@G3ba2) ((lambda (G3ba7@ids G3ba8@y) (call-with-values (lambda () (G3b42@cvt G3b9d@x G3b44@n G3ba7@ids)) (lambda (G3bad@G3bab G3bae@G3bac) ((lambda (G3bb1@ids G3bb2@x) (values (cons G3bb2@x G3ba8@y) G3bb1@ids)) G3bae@G3bac G3bad@G3bab)))) G3ba4@G3ba2 G3ba3@G3ba1)))) G3b9b@ls/false) ((lambda (G3bb5@t) ((lambda (G3bb7@ls/false) (if G3bb7@ls/false (apply (lambda () (values '() G3b45@ids)) G3bb7@ls/false) ((lambda (G3bb9@t) ((lambda (G3bbb@ls/false) (if (and G3bbb@ls/false (apply (lambda (G3bbd@p) (not (G2d28@stx? G3bbd@p))) G3bbb@ls/false)) (apply (lambda (G3bbf@p) (call-with-values (lambda () (G3b42@cvt G3bbf@p G3b44@n G3b45@ids)) (lambda (G3bc3@G3bc1 G3bc4@G3bc2) ((lambda (G3bc7@ids G3bc8@p) (values (vector 'vector G3bc8@p) G3bc7@ids)) G3bc4@G3bc2 G3bc3@G3bc1)))) G3bbb@ls/false) ((lambda (G3bcb@t) ((lambda (G3bcd@ls/false) (if G3bcd@ls/false (apply (lambda (G3bcf@datum) (values (vector 'atom (G2d76@stx->datum G3bcf@datum)) G3b45@ids)) G3bcd@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3bcb@t))) (G2f5f@syntax-dispatch G3bcb@t 'any))) G3bb9@t))) (G2f5f@syntax-dispatch G3bb9@t '#(vector each-any)))) G3bb5@t))) (G2f5f@syntax-dispatch G3bb5@t '()))) G3b99@t))) (G2f5f@syntax-dispatch G3b99@t '(any . any)))) G3b67@t))) (G2f5f@syntax-dispatch G3b67@t '(any any . #(each+ any () any))))) G3b51@t))) (G2f5f@syntax-dispatch G3b51@t '(any any)))) G3b49@t))) (G2f5f@syntax-dispatch G3b49@t 'any))) G3b43@p))) (G3b42@cvt G3b3b@pattern '0 '()))) '#f '#f))) (set! G2f5f@syntax-dispatch ((lambda () ((lambda (G3bec@stx^ G3bee@match-each G3bf0@match-each+ G3bf2@match-each-any G3bf4@match-empty G3bf6@combine G3bf8@match* G3bfa@match) (begin (set! G3bec@stx^ (lambda (G3cb5@e G3cb6@m* G3cb7@s* G3cb8@ae*) (if (and (null? G3cb6@m*) (null? G3cb7@s*) (null? G3cb8@ae*)) G3cb5@e (G2d48@mkstx G3cb5@e G3cb6@m* G3cb7@s* G3cb8@ae*)))) (set! G3bee@match-each (lambda (G3c98@e G3c99@p G3c9a@m* G3c9b@s* G3c9c@ae*) (if (pair? G3c98@e) ((lambda (G3ca2@first) (and G3ca2@first ((lambda (G3ca4@rest) (and G3ca4@rest (cons G3ca2@first G3ca4@rest))) (G3bee@match-each (cdr G3c98@e) G3c99@p G3c9a@m* G3c9b@s* G3c9c@ae*)))) (G3bfa@match (car G3c98@e) G3c99@p G3c9a@m* G3c9b@s* G3c9c@ae* '())) (if (null? G3c98@e) '() (if (G2d28@stx? G3c98@e) (and (not (G2cda@top-marked? G3c9a@m*)) (call-with-values (lambda () (G2d46@join-wraps G3c9a@m* G3c9b@s* G3c9c@ae* G3c98@e)) (lambda (G3ca9@G3ca6 G3caa@G3ca7 G3cab@G3ca8) ((lambda (G3caf@ae* G3cb0@s* G3cb1@m*) (G3bee@match-each (G2d2c@stx-expr G3c98@e) G3c99@p G3cb1@m* G3cb0@s* G3caf@ae*)) G3cab@G3ca8 G3caa@G3ca7 G3ca9@G3ca6)))) (if (G28f1@G281c@annotation? G3c98@e) (G3bee@match-each (G28f3@G2820@annotation-expression G3c98@e) G3c99@p G3c9a@m* G3c9b@s* G3c9c@ae*) '#f)))))) (set! G3bf0@match-each+ (lambda (G3c5e@e G3c5f@x-pat G3c60@y-pat G3c61@z-pat G3c62@m* G3c63@s* G3c64@ae* G3c65@r) ((letrec ((G3c6e@f (lambda (G3c70@e G3c71@m* G3c72@s* G3c73@ae*) (if (pair? G3c70@e) (call-with-values (lambda () (G3c6e@f (cdr G3c70@e) G3c71@m* G3c72@s* G3c73@ae*)) (lambda (G3c7b@G3c78 G3c7c@G3c79 G3c7d@G3c7a) ((lambda (G3c81@r G3c82@y-pat G3c83@xr*) (if G3c81@r (if (null? G3c82@y-pat) ((lambda (G3c87@xr) (if G3c87@xr (values (cons G3c87@xr G3c83@xr*) G3c82@y-pat G3c81@r) (values '#f '#f '#f))) (G3bfa@match (car G3c70@e) G3c5f@x-pat G3c71@m* G3c72@s* G3c73@ae* '())) (values '() (cdr G3c82@y-pat) (G3bfa@match (car G3c70@e) (car G3c82@y-pat) G3c71@m* G3c72@s* G3c73@ae* G3c81@r))) (values '#f '#f '#f))) G3c7d@G3c7a G3c7c@G3c79 G3c7b@G3c78))) (if (G2d28@stx? G3c70@e) (if (G2cda@top-marked? G3c71@m*) (values '() G3c60@y-pat (G3bfa@match G3c70@e G3c61@z-pat G3c71@m* G3c72@s* G3c73@ae* G3c65@r)) (call-with-values (lambda () (G2d46@join-wraps G3c71@m* G3c72@s* G3c73@ae* G3c70@e)) (lambda (G3c8c@G3c89 G3c8d@G3c8a G3c8e@G3c8b) ((lambda (G3c92@ae* G3c93@s* G3c94@m*) (G3c6e@f (G2d2c@stx-expr G3c70@e) G3c94@m* G3c93@s* G3c92@ae*)) G3c8e@G3c8b G3c8d@G3c8a G3c8c@G3c89)))) (if (G28f1@G281c@annotation? G3c70@e) (G3c6e@f (G28f3@G2820@annotation-expression G3c70@e) G3c71@m* G3c72@s* G3c73@ae*) (values '() G3c60@y-pat (G3bfa@match G3c70@e G3c61@z-pat G3c71@m* G3c72@s* G3c73@ae* G3c65@r)))))))) G3c6e@f) G3c5e@e G3c62@m* G3c63@s* G3c64@ae*))) (set! G3bf2@match-each-any (lambda (G3c45@e G3c46@m* G3c47@s* G3c48@ae*) (if (pair? G3c45@e) ((lambda (G3c4d@l) (and G3c4d@l (cons (G3bec@stx^ (car G3c45@e) G3c46@m* G3c47@s* G3c48@ae*) G3c4d@l))) (G3bf2@match-each-any (cdr G3c45@e) G3c46@m* G3c47@s* G3c48@ae*)) (if (null? G3c45@e) '() (if (G2d28@stx? G3c45@e) (and (not (G2cda@top-marked? G3c46@m*)) (call-with-values (lambda () (G2d46@join-wraps G3c46@m* G3c47@s* G3c48@ae* G3c45@e)) (lambda (G3c52@G3c4f G3c53@G3c50 G3c54@G3c51) ((lambda (G3c58@ae* G3c59@s* G3c5a@m*) (G3bf2@match-each-any (G2d2c@stx-expr G3c45@e) G3c5a@m* G3c59@s* G3c58@ae*)) G3c54@G3c51 G3c53@G3c50 G3c52@G3c4f)))) (if (G28f1@G281c@annotation? G3c45@e) (G3bf2@match-each-any (G28f3@G2820@annotation-expression G3c45@e) G3c46@m* G3c47@s* G3c48@ae*) '#f)))))) (set! G3bf4@match-empty (lambda (G3c3f@p G3c40@r) (if (null? G3c3f@p) G3c40@r (if (eq? G3c3f@p '_) G3c40@r (if (eq? G3c3f@p 'any) (cons '() G3c40@r) (if (pair? G3c3f@p) (G3bf4@match-empty (car G3c3f@p) (G3bf4@match-empty (cdr G3c3f@p) G3c40@r)) (if (eq? G3c3f@p 'each-any) (cons '() G3c40@r) ((lambda (G3c43@t) (if (memv G3c43@t '(each)) (G3bf4@match-empty (vector-ref G3c3f@p '1) G3c40@r) (if (memv G3c43@t '(each+)) (G3bf4@match-empty (vector-ref G3c3f@p '1) (G3bf4@match-empty (reverse (vector-ref G3c3f@p '2)) (G3bf4@match-empty (vector-ref G3c3f@p '3) G3c40@r))) (if (memv G3c43@t '(free-id atom)) G3c40@r (if (memv G3c43@t '(scheme-id atom)) G3c40@r (if (memv G3c43@t '(vector)) (G3bf4@match-empty (vector-ref G3c3f@p '1) G3c40@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c3f@p))))))) (vector-ref G3c3f@p '0))))))))) (set! G3bf6@combine (lambda (G3c3b@r* G3c3c@r) (if (null? (car G3c3b@r*)) G3c3c@r (cons (map car G3c3b@r*) (G3bf6@combine (map cdr G3c3b@r*) G3c3c@r))))) (set! G3bf8@match* (lambda (G3c1a@e G3c1b@p G3c1c@m* G3c1d@s* G3c1e@ae* G3c1f@r) (if (null? G3c1b@p) (and (null? G3c1a@e) G3c1f@r) (if (pair? G3c1b@p) (and (pair? G3c1a@e) (G3bfa@match (car G3c1a@e) (car G3c1b@p) G3c1c@m* G3c1d@s* G3c1e@ae* (G3bfa@match (cdr G3c1a@e) (cdr G3c1b@p) G3c1c@m* G3c1d@s* G3c1e@ae* G3c1f@r))) (if (eq? G3c1b@p 'each-any) ((lambda (G3c26@l) (and G3c26@l (cons G3c26@l G3c1f@r))) (G3bf2@match-each-any G3c1a@e G3c1c@m* G3c1d@s* G3c1e@ae*)) ((lambda (G3c28@t) (if (memv G3c28@t '(each)) (if (null? G3c1a@e) (G3bf4@match-empty (vector-ref G3c1b@p '1) G3c1f@r) ((lambda (G3c2a@r*) (and G3c2a@r* (G3bf6@combine G3c2a@r* G3c1f@r))) (G3bee@match-each G3c1a@e (vector-ref G3c1b@p '1) G3c1c@m* G3c1d@s* G3c1e@ae*))) (if (memv G3c28@t '(free-id)) (and (symbol? G3c1a@e) (G2cda@top-marked? G3c1c@m*) (G2d68@free-id=? (G3bec@stx^ G3c1a@e G3c1c@m* G3c1d@s* G3c1e@ae*) (vector-ref G3c1b@p '1)) G3c1f@r) (if (memv G3c28@t '(scheme-id)) (and (symbol? G3c1a@e) (G2cda@top-marked? G3c1c@m*) (G2d68@free-id=? (G3bec@stx^ G3c1a@e G3c1c@m* G3c1d@s* G3c1e@ae*) (G2ee9@scheme-stx (vector-ref G3c1b@p '1))) G3c1f@r) (if (memv G3c28@t '(each+)) (call-with-values (lambda () (G3bf0@match-each+ G3c1a@e (vector-ref G3c1b@p '1) (vector-ref G3c1b@p '2) (vector-ref G3c1b@p '3) G3c1c@m* G3c1d@s* G3c1e@ae* G3c1f@r)) (lambda (G3c2f@G3c2c G3c30@G3c2d G3c31@G3c2e) ((lambda (G3c35@r G3c36@y-pat G3c37@xr*) (and G3c35@r (null? G3c36@y-pat) (if (null? G3c37@xr*) (G3bf4@match-empty (vector-ref G3c1b@p '1) G3c35@r) (G3bf6@combine G3c37@xr* G3c35@r)))) G3c31@G3c2e G3c30@G3c2d G3c2f@G3c2c))) (if (memv G3c28@t '(atom)) (and (fast-equal? (vector-ref G3c1b@p '1) (G2d74@strip G3c1a@e G3c1c@m*)) G3c1f@r) (if (memv G3c28@t '(vector)) (and (vector? G3c1a@e) (G3bfa@match (vector->list G3c1a@e) (vector-ref G3c1b@p '1) G3c1c@m* G3c1d@s* G3c1e@ae* G3c1f@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c1b@p)))))))) (vector-ref G3c1b@p '0))))))) (set! G3bfa@match (lambda (G3bff@e G3c00@p G3c01@m* G3c02@s* G3c03@ae* G3c04@r) (if (not G3c04@r) '#f (if (eq? G3c00@p '_) G3c04@r (if (eq? G3c00@p 'any) (cons (G3bec@stx^ G3bff@e G3c01@m* G3c02@s* G3c03@ae*) G3c04@r) (if (G2d28@stx? G3bff@e) (and (not (G2cda@top-marked? G3c01@m*)) (call-with-values (lambda () (G2d46@join-wraps G3c01@m* G3c02@s* G3c03@ae* G3bff@e)) (lambda (G3c0e@G3c0b G3c0f@G3c0c G3c10@G3c0d) ((lambda (G3c14@ae* G3c15@s* G3c16@m*) (G3bfa@match (G2d2c@stx-expr G3bff@e) G3c00@p G3c16@m* G3c15@s* G3c14@ae* G3c04@r)) G3c10@G3c0d G3c0f@G3c0c G3c0e@G3c0b)))) (if (G28f1@G281c@annotation? G3bff@e) (G3bfa@match (G28f3@G2820@annotation-expression G3bff@e) G3c00@p G3c01@m* G3c02@s* G3c03@ae* G3c04@r) (G3bf8@match* G3bff@e G3c00@p G3c01@m* G3c02@s* G3c03@ae* G3c04@r)))))))) (lambda (G3bfb@e G3bfc@p) (G3bfa@match G3bfb@e G3bfc@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f61@ellipsis? (lambda (G3cbd@x) (and (G2d60@id? G3cbd@x) (G2d68@free-id=? G3cbd@x (G2ee9@scheme-stx '...))))) (set! G2f63@underscore? (lambda (G3cbf@x) (and (G2d60@id? G3cbf@x) (G2d68@free-id=? G3cbf@x (G2ee9@scheme-stx '_))))) (set! G2f65@verify-literals (lambda (G3cc1@lits G3cc2@expr) (for-each (lambda (G3cc5@x) (if (or (not (G2d60@id? G3cc5@x)) (G2f61@ellipsis? G3cc5@x) (G2f63@underscore? G3cc5@x)) (G304a@syntax-violation '#f '"invalid literal" G3cc2@expr G3cc5@x) (void))) G3cc1@lits))) (set! G2f67@syntax-case-transformer ((lambda () ((lambda (G3cc8@build-dispatch-call G3cca@invalid-ids-error G3ccc@gen-clause G3cce@gen-syntax-case) (begin (set! G3cc8@build-dispatch-call (lambda (G3d37@pvars G3d38@expr G3d39@y G3d3a@r G3d3b@mr) ((lambda (G3d41@ids G3d42@levels) ((lambda (G3d45@labels G3d46@new-vars) ((lambda (G3d49@body) (list '(primitive apply) (G2cba@G2bf8@build-lambda '#f G3d46@new-vars G3d49@body) G3d39@y)) (G2f83@chi-expr (G2d4c@add-subst (G2d1b@make-full-rib G3d41@ids G3d45@labels) G3d38@expr) (append (map (lambda (G3d4b@label G3d4c@var G3d4d@level) (cons G3d4b@label (G2d80@make-binding 'syntax (cons G3d4c@var G3d4d@level)))) G3d45@labels G3d46@new-vars (map cdr G3d37@pvars)) G3d3a@r) G3d3b@mr))) (map G2ce0@gen-label G3d41@ids) (map G2cdc@gen-lexical G3d41@ids))) (map car G3d37@pvars) (map cdr G3d37@pvars)))) (set! G3cca@invalid-ids-error (lambda (G3d2b@id* G3d2c@e G3d2d@class) ((letrec ((G3d31@find (lambda (G3d33@id* G3d34@ok*) (if (null? G3d33@id*) (G304a@syntax-violation '#f '"invalid syntax" G3d2c@e) (if (G2d60@id? (car G3d33@id*)) (if (G2d6e@bound-id-member? (car G3d33@id*) G3d34@ok*) (G3046@syntax-error (car G3d33@id*) '"duplicate " G3d2d@class) (G3d31@find (cdr G3d33@id*) (cons (car G3d33@id*) G3d34@ok*))) (G3046@syntax-error (car G3d33@id*) '"invalid " G3d2d@class)))))) G3d31@find) G3d2b@id* '()))) (set! G3ccc@gen-clause (lambda (G3d05@x G3d06@keys G3d07@clauses G3d08@r G3d09@mr G3d0a@pat G3d0b@fender G3d0c@expr) (call-with-values (lambda () (G2f5d@convert-pattern G3d0a@pat G3d06@keys)) (lambda (G3d17@G3d15 G3d18@G3d16) ((lambda (G3d1b@pvars G3d1c@p) (if (not (G2d6c@distinct-bound-ids? (map car G3d1b@pvars))) (G3cca@invalid-ids-error (map car G3d1b@pvars) G3d0a@pat '"pattern variable") (if (not (for-all (lambda (G3d1f@x) (not (G2f61@ellipsis? (car G3d1f@x)))) G3d1b@pvars)) (G304a@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d0a@pat) ((lambda (G3d21@y) ((lambda (G3d23@test) ((lambda (G3d25@conseq) ((lambda (G3d27@altern) (list (G2cba@G2bf8@build-lambda '#f (list G3d21@y) (list 'if G3d23@test G3d25@conseq G3d27@altern)) (list '(primitive syntax-dispatch) G3d05@x (list 'quote G3d1c@p)))) (G3cce@gen-syntax-case G3d05@x G3d06@keys G3d07@clauses G3d08@r G3d09@mr))) (G3cc8@build-dispatch-call G3d1b@pvars G3d0c@expr G3d21@y G3d08@r G3d09@mr))) (if (eq? G3d0b@fender '#t) G3d21@y ((lambda (G3d29@call) (list 'if G3d21@y G3d29@call (list 'quote '#f))) (G3cc8@build-dispatch-call G3d1b@pvars G3d0b@fender G3d21@y G3d08@r G3d09@mr))))) (G2cdc@gen-lexical 'tmp))))) G3d18@G3d16 G3d17@G3d15))))) (set! G3cce@gen-syntax-case (lambda (G3ce3@x G3ce4@keys G3ce5@clauses G3ce6@r G3ce7@mr) (if (null? G3ce5@clauses) (list '(primitive syntax-error) G3ce3@x) ((lambda (G3ced@t) ((lambda (G3cef@ls/false) (if G3cef@ls/false (apply (lambda (G3cf1@pat G3cf2@expr) (if (and (G2d60@id? G3cf1@pat) (not (G2d6e@bound-id-member? G3cf1@pat G3ce4@keys)) (not (G2f61@ellipsis? G3cf1@pat))) (if (G2d68@free-id=? G3cf1@pat (G2ee9@scheme-stx '_)) (G2f83@chi-expr G3cf2@expr G3ce6@r G3ce7@mr) ((lambda (G3cf5@lab G3cf6@lex) ((lambda (G3cf9@body) (list (G2cba@G2bf8@build-lambda '#f (list G3cf6@lex) G3cf9@body) G3ce3@x)) (G2f83@chi-expr (G2d4c@add-subst (G2d1b@make-full-rib (list G3cf1@pat) (list G3cf5@lab)) G3cf2@expr) (cons (cons G3cf5@lab (G2d80@make-binding 'syntax (cons G3cf6@lex '0))) G3ce6@r) G3ce7@mr))) (G2ce0@gen-label G3cf1@pat) (G2cdc@gen-lexical G3cf1@pat))) (G3ccc@gen-clause G3ce3@x G3ce4@keys (cdr G3ce5@clauses) G3ce6@r G3ce7@mr G3cf1@pat '#t G3cf2@expr))) G3cef@ls/false) ((lambda (G3cfb@t) ((lambda (G3cfd@ls/false) (if G3cfd@ls/false (apply (lambda (G3cff@pat G3d00@fender G3d01@expr) (G3ccc@gen-clause G3ce3@x G3ce4@keys (cdr G3ce5@clauses) G3ce6@r G3ce7@mr G3cff@pat G3d00@fender G3d01@expr)) G3cfd@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3cfb@t))) (G2f5f@syntax-dispatch G3cfb@t '(any any any)))) G3ced@t))) (G2f5f@syntax-dispatch G3ced@t '(any any)))) (car G3ce5@clauses))))) (lambda (G3ccf@e G3cd0@r G3cd1@mr) ((lambda (G3cd5@t) ((lambda (G3cd7@ls/false) (if G3cd7@ls/false (apply (lambda (G3cd9@expr G3cda@keys G3cdb@clauses) (begin (G2f65@verify-literals G3cda@keys G3ccf@e) ((lambda (G3cdf@x) ((lambda (G3ce1@body) (list (G2cba@G2bf8@build-lambda '#f (list G3cdf@x) G3ce1@body) (G2f83@chi-expr G3cd9@expr G3cd0@r G3cd1@mr))) (G3cce@gen-syntax-case G3cdf@x G3cda@keys G3cdb@clauses G3cd0@r G3cd1@mr))) (G2cdc@gen-lexical 'tmp)))) G3cd7@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3cd5@t))) (G2f5f@syntax-dispatch G3cd5@t '(_ any each-any . each-any)))) G3ccf@e)))) '#f '#f '#f '#f)))) (set! G2f69@ellipsis-map (lambda (G3d51@proc G3d52@ls . G3d55@ls*) ((lambda (G3d58@who) (begin (set! G3d58@who '...) (begin (if (not (list? G3d52@ls)) (assertion-violation G3d58@who '"not a list" G3d52@ls) (void)) (if (not (null? G3d55@ls*)) ((lambda (G3d59@n) (for-each (lambda (G3d5b@x) (begin (if (not (list? G3d5b@x)) (assertion-violation G3d58@who '"not a list" G3d5b@x) (void)) (if (not (= (length G3d5b@x) G3d59@n)) (assertion-violation G3d58@who '"length mismatch" G3d52@ls G3d5b@x) (void)))) G3d55@ls*)) (length G3d52@ls)) (void)) (apply map G3d51@proc G3d52@ls G3d55@ls*)))) '#f))) (set! G2f6b@syntax-transformer ((lambda () ((lambda (G3d5e@gen-syntax G3d60@gen-ref G3d62@gen-append G3d64@gen-mappend G3d66@gen-map G3d68@gen-cons G3d6a@gen-vector G3d6c@regen) (begin (set! G3d5e@gen-syntax (lambda (G3dd1@src G3dd2@e G3dd3@r G3dd4@maps G3dd5@ellipsis? G3dd6@vec?) ((lambda (G3ddd@t) ((lambda (G3ddf@ls/false) (if (and G3ddf@ls/false (apply (lambda (G3de1@dots) (G3dd5@ellipsis? G3de1@dots)) G3ddf@ls/false)) (apply (lambda (G3de3@dots) (G304a@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd1@src)) G3ddf@ls/false) ((lambda (G3de5@t) ((lambda (G3de7@ls/false) (if (and G3de7@ls/false (apply (lambda (G3de9@id) (G2d60@id? G3de9@id)) G3de7@ls/false)) (apply (lambda (G3deb@id) ((lambda (G3ded@label) ((lambda (G3def@b) ((lambda () (if (eq? (G2d82@binding-type G3def@b) 'syntax) (call-with-values (lambda () ((lambda (G3df3@var.lev) (G3d60@gen-ref G3dd1@src (car G3df3@var.lev) (cdr G3df3@var.lev) G3dd4@maps)) (G2d84@binding-value G3def@b))) (lambda (G3df5@G3df1 G3df6@G3df2) ((lambda (G3df9@maps G3dfa@var) (values (list 'ref G3dfa@var) G3df9@maps)) G3df6@G3df2 G3df5@G3df1))) (values (list 'quote G3dd2@e) G3dd4@maps))))) (G2d7e@label->binding G3ded@label G3dd3@r))) (G2d7a@id->label G3dd2@e))) G3de7@ls/false) ((lambda (G3dfd@t) ((lambda (G3dff@ls/false) (if (and G3dff@ls/false (apply (lambda (G3e01@dots G3e02@e) (G3dd5@ellipsis? G3e01@dots)) G3dff@ls/false)) (apply (lambda (G3e05@dots G3e06@e) (if G3dd6@vec? (G304a@syntax-violation '#f '"misplaced ellipsis in syntax form" G3dd1@src) (G3d5e@gen-syntax G3dd1@src G3e06@e G3dd3@r G3dd4@maps (lambda (G3e09@x) '#f) '#f))) G3dff@ls/false) ((lambda (G3e0b@t) ((lambda (G3e0d@ls/false) (if (and G3e0d@ls/false (apply (lambda (G3e0f@x G3e10@dots G3e11@y) (G3dd5@ellipsis? G3e10@dots)) G3e0d@ls/false)) (apply (lambda (G3e15@x G3e16@dots G3e17@y) ((letrec ((G3e1b@f (lambda (G3e1d@y G3e1e@k) ((lambda (G3e21@t) ((lambda (G3e23@ls/false) (if G3e23@ls/false (apply (lambda () (G3e1e@k G3dd4@maps)) G3e23@ls/false) ((lambda (G3e25@t) ((lambda (G3e27@ls/false) (if (and G3e27@ls/false (apply (lambda (G3e29@dots G3e2a@y) (G3dd5@ellipsis? G3e29@dots)) G3e27@ls/false)) (apply (lambda (G3e2d@dots G3e2e@y) (G3e1b@f G3e2e@y (lambda (G3e31@maps) (call-with-values (lambda () (G3e1e@k (cons '() G3e31@maps))) (lambda (G3e35@G3e33 G3e36@G3e34) ((lambda (G3e39@maps G3e3a@x) (if (null? (car G3e39@maps)) (G304a@syntax-violation '#f '"extra ellipsis in syntax form" G3dd1@src) (values (G3d64@gen-mappend G3e3a@x (car G3e39@maps)) (cdr G3e39@maps)))) G3e36@G3e34 G3e35@G3e33)))))) G3e27@ls/false) ((lambda (G3e3d@t) ((lambda (G3e3f@ls/false) (if G3e3f@ls/false (apply (lambda () (call-with-values (lambda () (G3d5e@gen-syntax G3dd1@src G3e1d@y G3dd3@r G3dd4@maps G3dd5@ellipsis? G3dd6@vec?)) (lambda (G3e43@G3e41 G3e44@G3e42) ((lambda (G3e47@maps G3e48@y) (call-with-values (lambda () (G3e1e@k G3e47@maps)) (lambda (G3e4d@G3e4b G3e4e@G3e4c) ((lambda (G3e51@maps G3e52@x) (values (G3d62@gen-append G3e52@x G3e48@y) G3e51@maps)) G3e4e@G3e4c G3e4d@G3e4b)))) G3e44@G3e42 G3e43@G3e41)))) G3e3f@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3e3d@t))) (G2f5f@syntax-dispatch G3e3d@t '_))) G3e25@t))) (G2f5f@syntax-dispatch G3e25@t '(any . any)))) G3e21@t))) (G2f5f@syntax-dispatch G3e21@t '()))) G3e1d@y)))) G3e1b@f) G3e17@y (lambda (G3e55@maps) (call-with-values (lambda () (G3d5e@gen-syntax G3dd1@src G3e15@x G3dd3@r (cons '() G3e55@maps) G3dd5@ellipsis? '#f)) (lambda (G3e59@G3e57 G3e5a@G3e58) ((lambda (G3e5d@maps G3e5e@x) (if (null? (car G3e5d@maps)) (G304a@syntax-violation '#f '"extra ellipsis in syntax form" G3dd1@src) (values (G3d66@gen-map G3e5e@x (car G3e5d@maps)) (cdr G3e5d@maps)))) G3e5a@G3e58 G3e59@G3e57)))))) G3e0d@ls/false) ((lambda (G3e61@t) ((lambda (G3e63@ls/false) (if G3e63@ls/false (apply (lambda (G3e65@x G3e66@y) (call-with-values (lambda () (G3d5e@gen-syntax G3dd1@src G3e65@x G3dd3@r G3dd4@maps G3dd5@ellipsis? '#f)) (lambda (G3e6b@G3e69 G3e6c@G3e6a) ((lambda (G3e6f@maps G3e70@xnew) (call-with-values (lambda () (G3d5e@gen-syntax G3dd1@src G3e66@y G3dd3@r G3e6f@maps G3dd5@ellipsis? G3dd6@vec?)) (lambda (G3e75@G3e73 G3e76@G3e74) ((lambda (G3e79@maps G3e7a@ynew) (values (G3d68@gen-cons G3dd2@e G3e65@x G3e66@y G3e70@xnew G3e7a@ynew) G3e79@maps)) G3e76@G3e74 G3e75@G3e73)))) G3e6c@G3e6a G3e6b@G3e69)))) G3e63@ls/false) ((lambda (G3e7d@t) ((lambda (G3e7f@ls/false) (if G3e7f@ls/false (apply (lambda (G3e81@ls) (call-with-values (lambda () (G3d5e@gen-syntax G3dd1@src G3e81@ls G3dd3@r G3dd4@maps G3dd5@ellipsis? '#t)) (lambda (G3e85@G3e83 G3e86@G3e84) ((lambda (G3e89@maps G3e8a@lsnew) (values (G3d6a@gen-vector G3dd2@e G3e81@ls G3e8a@lsnew) G3e89@maps)) G3e86@G3e84 G3e85@G3e83)))) G3e7f@ls/false) ((lambda (G3e8d@t) ((lambda (G3e8f@ls/false) (if G3e8f@ls/false (apply (lambda () (values (list 'quote G3dd2@e) G3dd4@maps)) G3e8f@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3e8d@t))) (G2f5f@syntax-dispatch G3e8d@t '_))) G3e7d@t))) (G2f5f@syntax-dispatch G3e7d@t '#(vector each-any)))) G3e61@t))) (G2f5f@syntax-dispatch G3e61@t '(any . any)))) G3e0b@t))) (G2f5f@syntax-dispatch G3e0b@t '(any any . any)))) G3dfd@t))) (G2f5f@syntax-dispatch G3dfd@t '(any any)))) G3de5@t))) (G2f5f@syntax-dispatch G3de5@t 'any))) G3ddd@t))) (G2f5f@syntax-dispatch G3ddd@t 'any))) G3dd2@e))) (set! G3d60@gen-ref (lambda (G3db9@src G3dba@var G3dbb@level G3dbc@maps) (if (= G3dbb@level '0) (values G3dba@var G3dbc@maps) (if (null? G3dbc@maps) (G304a@syntax-violation '#f '"missing ellipsis in syntax form" G3db9@src) (call-with-values (lambda () (G3d60@gen-ref G3db9@src G3dba@var (- G3dbb@level '1) (cdr G3dbc@maps))) (lambda (G3dc3@G3dc1 G3dc4@G3dc2) ((lambda (G3dc7@outer-maps G3dc8@outer-var) ((lambda (G3dcb@t) (if G3dcb@t ((lambda (G3dcd@b) (values (cdr G3dcd@b) G3dbc@maps)) G3dcb@t) ((lambda (G3dcf@inner-var) (values G3dcf@inner-var (cons (cons (cons G3dc8@outer-var G3dcf@inner-var) (car G3dbc@maps)) G3dc7@outer-maps))) (G2cdc@gen-lexical 'tmp)))) (assq G3dc8@outer-var (car G3dbc@maps)))) G3dc4@G3dc2 G3dc3@G3dc1))))))) (set! G3d62@gen-append (lambda (G3db5@x G3db6@y) (if (fast-equal? G3db6@y ''()) G3db5@x (list 'append G3db5@x G3db6@y)))) (set! G3d64@gen-mappend (lambda (G3db1@e G3db2@map-env) (list 'apply '(primitive append) (G3d66@gen-map G3db1@e G3db2@map-env)))) (set! G3d66@gen-map (lambda (G3d9f@e G3da0@map-env) ((lambda (G3da3@formals G3da4@actuals) (if (eq? (car G3d9f@e) 'ref) (car G3da4@actuals) (if (for-all (lambda (G3da7@x) (and (eq? (car G3da7@x) 'ref) (memq (cadr G3da7@x) G3da3@formals))) (cdr G3d9f@e)) ((lambda (G3da9@args) (cons 'map (cons (list 'primitive (car G3d9f@e)) G3da9@args))) (map ((lambda (G3dab@r) (lambda (G3dad@x) (cdr (assq (cadr G3dad@x) G3dab@r)))) (map cons G3da3@formals G3da4@actuals)) (cdr G3d9f@e))) (cons* 'map (list 'lambda G3da3@formals G3d9f@e) G3da4@actuals)))) (map cdr G3da0@map-env) (map (lambda (G3daf@x) (list 'ref (car G3daf@x))) G3da0@map-env)))) (set! G3d68@gen-cons (lambda (G3d8f@e G3d90@x G3d91@y G3d92@xnew G3d93@ynew) ((lambda (G3d99@t) (if (memv G3d99@t '(quote)) (if (eq? (car G3d92@xnew) 'quote) ((lambda (G3d9b@xnew G3d9c@ynew) (if (and (eq? G3d9b@xnew G3d90@x) (eq? G3d9c@ynew G3d91@y)) (list 'quote G3d8f@e) (list 'quote (cons G3d9b@xnew G3d9c@ynew)))) (cadr G3d92@xnew) (cadr G3d93@ynew)) (if (null? (cadr G3d93@ynew)) (list 'list G3d92@xnew) (list 'cons G3d92@xnew G3d93@ynew))) (if (memv G3d99@t '(list)) (cons 'list (cons G3d92@xnew (cdr G3d93@ynew))) (list 'cons G3d92@xnew G3d93@ynew)))) (car G3d93@ynew)))) (set! G3d6a@gen-vector (lambda (G3d89@e G3d8a@ls G3d8b@lsnew) (if (eq? (car G3d8b@lsnew) 'quote) (if (eq? (cadr G3d8b@lsnew) G3d8a@ls) (list 'quote G3d89@e) (list 'quote (list->vector (cadr G3d8b@lsnew)))) (if (eq? (car G3d8b@lsnew) 'list) (cons 'vector (cdr G3d8b@lsnew)) (list 'list->vector G3d8b@lsnew))))) (set! G3d6c@regen (lambda (G3d83@x) ((lambda (G3d85@t) (if (memv G3d85@t '(ref)) (cadr G3d83@x) (if (memv G3d85@t '(primitive)) (list 'primitive (cadr G3d83@x)) (if (memv G3d85@t '(quote)) (list 'quote (cadr G3d83@x)) (if (memv G3d85@t '(lambda)) (G2cba@G2bf8@build-lambda '#f (cadr G3d83@x) (G3d6c@regen (caddr G3d83@x))) (if (memv G3d85@t '(map)) ((lambda (G3d87@ls) (cons '(primitive ellipsis-map) G3d87@ls)) (map G3d6c@regen (cdr G3d83@x))) (cons (list 'primitive (car G3d83@x)) (map G3d6c@regen (cdr G3d83@x))))))))) (car G3d83@x)))) (lambda (G3d6d@e G3d6e@r G3d6f@mr) ((lambda (G3d73@t) ((lambda (G3d75@ls/false) (if G3d75@ls/false (apply (lambda (G3d77@x) (call-with-values (lambda () (G3d5e@gen-syntax G3d6d@e G3d77@x G3d6e@r '() G2f61@ellipsis? '#f)) (lambda (G3d7b@G3d79 G3d7c@G3d7a) ((lambda (G3d7f@maps G3d80@e) (G3d6c@regen G3d80@e)) G3d7c@G3d7a G3d7b@G3d79)))) G3d75@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3d73@t))) (G2f5f@syntax-dispatch G3d73@t '(_ any)))) G3d6d@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f6d@core-macro-transformer (lambda (G3e91@name) ((lambda (G3e93@t) (if (memv G3e93@t '(quote)) G2f0f@quote-transformer (if (memv G3e93@t '(lambda)) G2f13@lambda-transformer (if (memv G3e93@t '(case-lambda)) G2f11@case-lambda-transformer (if (memv G3e93@t '(letrec)) G2ef7@letrec-transformer (if (memv G3e93@t '(letrec*)) G2ef9@letrec*-transformer (if (memv G3e93@t '(if)) G2f07@if-transformer (if (memv G3e93@t '(and)) G2f09@and-transformer (if (memv G3e93@t '(or)) G2f0b@or-transformer (if (memv G3e93@t '(foreign-call)) G2f5b@foreign-call-transformer (if (memv G3e93@t '(syntax-case)) G2f67@syntax-case-transformer (if (memv G3e93@t '(syntax)) G2f6b@syntax-transformer (if (memv G3e93@t '(type-descriptor)) G2efd@type-descriptor-transformer (if (memv G3e93@t '(record-type-descriptor)) G2eff@record-type-descriptor-transformer (if (memv G3e93@t '(record-constructor-descriptor)) G2f01@record-constructor-descriptor-transformer (if (memv G3e93@t '(fluid-let-syntax)) G2efb@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e91@name))))))))))))))))) G3e91@name))) (set! G2f6f@file-options-macro (lambda (G3e95@x) ((lambda (G3e98@valid-option?) (begin (set! G3e98@valid-option? (lambda (G3ea1@x) (and (G2d60@id? G3ea1@x) (memq (G2d62@id->sym G3ea1@x) '(no-fail no-create no-truncate))))) ((lambda (G3e99@t) ((lambda (G3e9b@ls/false) (if (and G3e9b@ls/false (apply (lambda (G3e9d@opt*) (and (for-all G3e98@valid-option? G3e9d@opt*) (G28fd@G289e@file-options-spec (map G2d62@id->sym G3e9d@opt*)))) G3e9b@ls/false)) (apply (lambda (G3e9f@opt*) (G2f15@bless (list 'quote (G28fd@G289e@file-options-spec (map G2d62@id->sym G3e9f@opt*))))) G3e9b@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3e99@t))) (G2f5f@syntax-dispatch G3e99@t '(_ . each-any)))) G3e95@x))) '#f))) (set! G2f71@symbol-macro (lambda (G3ea3@x G3ea4@set) ((lambda (G3ea7@t) ((lambda (G3ea9@ls/false) (if (and G3ea9@ls/false (apply (lambda (G3eab@name) (and (G2d60@id? G3eab@name) (memq (G2d62@id->sym G3eab@name) G3ea4@set))) G3ea9@ls/false)) (apply (lambda (G3ead@name) (G2f15@bless (list 'quote G3ead@name))) G3ea9@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3ea7@t))) (G2f5f@syntax-dispatch G3ea7@t '(_ any)))) G3ea3@x))) (set! G2f73@macro-transformer (lambda (G3eaf@x) (if (procedure? G3eaf@x) G3eaf@x (if (symbol? G3eaf@x) ((lambda (G3eb1@t) (if (memv G3eb1@t '(define-record-type)) G2f53@define-record-type-macro (if (memv G3eb1@t '(define-struct)) G2f51@define-struct-macro (if (memv G3eb1@t '(include)) G2f47@include-macro (if (memv G3eb1@t '(cond)) G2f43@cond-macro (if (memv G3eb1@t '(let)) G2f1b@let-macro (if (memv G3eb1@t '(do)) G2f3b@do-macro (if (memv G3eb1@t '(or)) G2f3f@or-macro (if (memv G3eb1@t '(and)) G2f41@and-macro (if (memv G3eb1@t '(let*)) G2f3d@let*-macro (if (memv G3eb1@t '(let-values)) G2f1d@let-values-macro (if (memv G3eb1@t '(let*-values)) G2f1f@let*-values-macro (if (memv G3eb1@t '(syntax-rules)) G2f4b@syntax-rules-macro (if (memv G3eb1@t '(quasiquote)) G2f4d@quasiquote-macro (if (memv G3eb1@t '(quasisyntax)) G2f4f@quasisyntax-macro (if (memv G3eb1@t '(with-syntax)) G2f17@with-syntax-macro (if (memv G3eb1@t '(when)) G2f03@when-macro (if (memv G3eb1@t '(unless)) G2f05@unless-macro (if (memv G3eb1@t '(case)) G2f0d@case-macro (if (memv G3eb1@t '(identifier-syntax)) G2f39@identifier-syntax-macro (if (memv G3eb1@t '(time)) G2f31@time-macro (if (memv G3eb1@t '(delay)) G2f33@delay-macro (if (memv G3eb1@t '(assert)) G2f35@assert-macro (if (memv G3eb1@t '(endianness)) G2f37@endianness-macro (if (memv G3eb1@t '(guard)) G2f2d@guard-macro (if (memv G3eb1@t '(define-enumeration)) G2f2f@define-enumeration-macro (if (memv G3eb1@t '(trace-lambda)) G2f21@trace-lambda-macro (if (memv G3eb1@t '(trace-define)) G2f23@trace-define-macro (if (memv G3eb1@t '(trace-define-syntax)) G2f25@trace-define-syntax-macro (if (memv G3eb1@t '(trace-let-syntax)) G2f29@trace-let-syntax-macro (if (memv G3eb1@t '(trace-letrec-syntax)) G2f2b@trace-letrec-syntax-macro (if (memv G3eb1@t '(define-condition-type)) G2f55@define-condition-type-macro (if (memv G3eb1@t '(parameterize)) G2f59@parameterize-macro (if (memv G3eb1@t '(include-into)) G2f49@include-into-macro (if (memv G3eb1@t '(eol-style)) (lambda (G3eb3@x) (G2f71@symbol-macro G3eb3@x '(none lf cr crlf nel crnel ls))) (if (memv G3eb1@t '(error-handling-mode)) (lambda (G3eb5@x) (G2f71@symbol-macro G3eb5@x '(ignore raise replace))) (if (memv G3eb1@t '(buffer-mode)) (lambda (G3eb7@x) (G2f71@symbol-macro G3eb7@x '(none line block))) (if (memv G3eb1@t '(file-options)) G2f6f@file-options-macro (if (memv G3eb1@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f57@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3eaf@x)))))))))))))))))))))))))))))))))))))))) G3eaf@x) (error 'core-macro-transformer '"BUG: invalid macro" G3eaf@x))))) (set! G2f75@local-macro-transformer (lambda (G3eb9@x) (car G3eb9@x))) (set! G2f77@do-macro-call (lambda (G3ebb@transformer G3ebc@expr) ((lambda (G3ebf@out) (begin ((letrec ((G3ec1@f (lambda (G3ec3@x) (if (not (G2d28@stx? G3ec3@x)) (if (pair? G3ec3@x) (begin (G3ec1@f (car G3ec3@x)) (G3ec1@f (cdr G3ec3@x))) (if (vector? G3ec3@x) (vector-for-each G3ec1@f G3ec3@x) (if (symbol? G3ec3@x) (G304a@syntax-violation '#f '"raw symbol encountered in output of macro" G3ebc@expr G3ec3@x) (void)))) (void))))) G3ec1@f) G3ebf@out) (G2d4a@add-mark (G2d40@gen-mark) G3ebf@out G3ebc@expr))) (G3ebb@transformer (G2d4a@add-mark G2d42@anti-mark G3ebc@expr '#f))))) (set! G2f79@chi-macro (lambda (G3ec5@p G3ec6@e) (G2f77@do-macro-call (G2f73@macro-transformer G3ec5@p) G3ec6@e))) (set! G2f7b@chi-local-macro (lambda (G3ec9@p G3eca@e) (G2f77@do-macro-call (G2f75@local-macro-transformer G3ec9@p) G3eca@e))) (set! G2f7d@chi-global-macro (lambda (G3ecd@p G3ece@e) ((lambda (G3ed1@lib G3ed2@loc) (begin (G2b78@G2a20@visit-library G3ed1@lib) ((lambda (G3ed5@x) ((lambda (G3ed7@transformer) (G2f77@do-macro-call G3ed7@transformer G3ece@e)) (if (procedure? G3ed5@x) G3ed5@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ed5@x)))) (symbol-value G3ed2@loc)))) (car G3ecd@p) (cdr G3ecd@p)))) (set! G2f7f@chi-expr* (lambda (G3ed9@e* G3eda@r G3edb@mr) (if (null? G3ed9@e*) '() ((lambda (G3edf@e) (cons G3edf@e (G2f7f@chi-expr* (cdr G3ed9@e*) G3eda@r G3edb@mr))) (G2f83@chi-expr (car G3ed9@e*) G3eda@r G3edb@mr))))) (set! G2f81@chi-application (lambda (G3ee1@e G3ee2@r G3ee3@mr) ((lambda (G3ee7@t) ((lambda (G3ee9@ls/false) (if G3ee9@ls/false (apply (lambda (G3eeb@rator G3eec@rands) ((lambda (G3eef@rator) (cons G3eef@rator (G2f7f@chi-expr* G3eec@rands G3ee2@r G3ee3@mr))) (G2f83@chi-expr G3eeb@rator G3ee2@r G3ee3@mr))) G3ee9@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3ee7@t))) (G2f5f@syntax-dispatch G3ee7@t '(any . each-any)))) G3ee1@e))) (set! G2f83@chi-expr (lambda (G3ef1@e G3ef2@r G3ef3@mr) (call-with-values (lambda () (G2d88@syntax-type G3ef1@e G3ef2@r)) (lambda (G3efa@G3ef7 G3efb@G3ef8 G3efc@G3ef9) ((lambda (G3f00@kwd G3f01@value G3f02@type) ((lambda (G3f06@t) (if (memv G3f06@t '(core-macro)) ((lambda (G3f08@transformer) (G3f08@transformer G3ef1@e G3ef2@r G3ef3@mr)) (G2f6d@core-macro-transformer G3f01@value)) (if (memv G3f06@t '(global)) ((lambda (G3f0a@lib) ((lambda (G3f0c@loc) ((lambda () (begin ((G2fcc@inv-collector) G3f0a@lib) G3f0c@loc)))) (cdr G3f01@value))) (car G3f01@value)) (if (memv G3f06@t '(core-prim)) ((lambda (G3f0e@name) (list 'primitive G3f0e@name)) G3f01@value) (if (memv G3f06@t '(call)) (G2f81@chi-application G3ef1@e G3ef2@r G3ef3@mr) (if (memv G3f06@t '(lexical)) ((lambda (G3f10@lex) G3f10@lex) (G2eeb@lexical-var G3f01@value)) (if (memv G3f06@t '(global-macro global-macro!)) (G2f83@chi-expr (G2f7d@chi-global-macro G3f01@value G3ef1@e) G3ef2@r G3ef3@mr) (if (memv G3f06@t '(local-macro local-macro!)) (G2f83@chi-expr (G2f7b@chi-local-macro G3f01@value G3ef1@e) G3ef2@r G3ef3@mr) (if (memv G3f06@t '(macro macro!)) (G2f83@chi-expr (G2f79@chi-macro G3f01@value G3ef1@e) G3ef2@r G3ef3@mr) (if (memv G3f06@t '(constant)) ((lambda (G3f12@datum) (list 'quote G3f12@datum)) G3f01@value) (if (memv G3f06@t '(set!)) (G2f85@chi-set! G3ef1@e G3ef2@r G3ef3@mr) (if (memv G3f06@t '(begin)) ((lambda (G3f14@t) ((lambda (G3f16@ls/false) (if G3f16@ls/false (apply (lambda (G3f18@x G3f19@x*) (G2cbd@G2c2e@build-sequence '#f (G2f7f@chi-expr* (cons G3f18@x G3f19@x*) G3ef2@r G3ef3@mr))) G3f16@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3f14@t))) (G2f5f@syntax-dispatch G3f14@t '(_ any . each-any)))) G3ef1@e) (if (memv G3f06@t '(let-syntax letrec-syntax)) ((lambda (G3f1c@t) ((lambda (G3f1e@ls/false) (if (and G3f1e@ls/false (apply (lambda (G3f20@xlhs* G3f21@xrhs* G3f22@xbody G3f23@xbody*) (if (not (G2d6a@valid-bound-ids? G3f20@xlhs*)) (G304a@syntax-violation '#f '"invalid identifiers" G3ef1@e) (void))) G3f1e@ls/false)) (apply (lambda (G3f28@xlhs* G3f29@xrhs* G3f2a@xbody G3f2b@xbody*) ((lambda (G3f30@xlab*) ((lambda (G3f32@xrib) ((lambda (G3f34@xb*) ((lambda () (G2cbd@G2c2e@build-sequence '#f (G2f7f@chi-expr* (map (lambda (G3f36@x) (G2d4c@add-subst G3f32@xrib G3f36@x)) (cons G3f2a@xbody G3f2b@xbody*)) (append (map cons G3f30@xlab* G3f34@xb*) G3ef2@r) (append (map cons G3f30@xlab* G3f34@xb*) G3ef3@mr)))))) (map (lambda (G3f38@x) (G2da0@make-eval-transformer (G2fbe@expand-transformer (if (eq? G3f02@type 'let-syntax) G3f38@x (G2d4c@add-subst G3f32@xrib G3f38@x)) G3ef3@mr))) G3f29@xrhs*))) (G2d1b@make-full-rib G3f28@xlhs* G3f30@xlab*))) (map G2ce0@gen-label G3f28@xlhs*))) G3f1e@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3f1c@t))) (G2f5f@syntax-dispatch G3f1c@t '(_ #(each (any any)) any . each-any)))) G3ef1@e) (if (memv G3f06@t '(displaced-lexical)) (G304a@syntax-violation '#f '"identifier out of context" G3ef1@e) (if (memv G3f06@t '(syntax)) (G304a@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3ef1@e) (if (memv G3f06@t '(define define-syntax module import library)) (G304a@syntax-violation '#f (string-append ((lambda (G3f3a@t) (if (memv G3f3a@t '(define)) '"a definition" (if (memv G3f3a@t '(define-syntax)) '"a define-syntax" (if (memv G3f3a@t '(module)) '"a module definition" (if (memv G3f3a@t '(library)) '"a library definition" (if (memv G3f3a@t '(import)) '"an import declaration" (if (memv G3f3a@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f02@type) '" was found where an expression was expected") G3ef1@e) (if (memv G3f06@t '(mutable)) (G304a@syntax-violation '#f '"attempt to reference an unexportable variable" G3ef1@e) (G304a@syntax-violation '#f '"invalid expression" G3ef1@e)))))))))))))))))) G3f02@type)) G3efc@G3ef9 G3efb@G3ef8 G3efa@G3ef7))))) (set! G2f85@chi-set! (lambda (G3f3c@e G3f3d@r G3f3e@mr) ((lambda (G3f42@t) ((lambda (G3f44@ls/false) (if (and G3f44@ls/false (apply (lambda (G3f46@x G3f47@v) (G2d60@id? G3f46@x)) G3f44@ls/false)) (apply (lambda (G3f4a@x G3f4b@v) (call-with-values (lambda () (G2d88@syntax-type G3f4a@x G3f3d@r)) (lambda (G3f51@G3f4e G3f52@G3f4f G3f53@G3f50) ((lambda (G3f57@kwd G3f58@value G3f59@type) ((lambda (G3f5d@t) (if (memv G3f5d@t '(lexical)) (begin (G2eef@set-lexical-mutable! G3f58@value '#t) (list 'set! (G2eeb@lexical-var G3f58@value) (G2f83@chi-expr G3f4b@v G3f3d@r G3f3e@mr))) (if (memv G3f5d@t '(core-prim)) (G304a@syntax-violation '#f '"cannot modify imported core primitive" G3f3c@e) (if (memv G3f5d@t '(global)) (G304a@syntax-violation '#f '"attempt to modify imported binding" G3f3c@e) (if (memv G3f5d@t '(global-macro!)) (G2f83@chi-expr (G2f7d@chi-global-macro G3f58@value G3f3c@e) G3f3d@r G3f3e@mr) (if (memv G3f5d@t '(local-macro!)) (G2f83@chi-expr (G2f7b@chi-local-macro G3f58@value G3f3c@e) G3f3d@r G3f3e@mr) (if (memv G3f5d@t '(mutable)) (G304a@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f3c@e) (G304a@syntax-violation '#f '"invalid syntax" G3f3c@e)))))))) G3f59@type)) G3f53@G3f50 G3f52@G3f4f G3f51@G3f4e)))) G3f44@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3f42@t))) (G2f5f@syntax-dispatch G3f42@t '(_ any any)))) G3f3c@e))) (set! G2f87@verify-formals (lambda (G3f5f@fmls G3f60@stx) ((lambda (G3f63@t) ((lambda (G3f65@ls/false) (if G3f65@ls/false (apply (lambda (G3f67@x*) (if (not (G2d6a@valid-bound-ids? G3f67@x*)) (G2f19@invalid-fmls-error G3f60@stx G3f5f@fmls) (void))) G3f65@ls/false) ((lambda (G3f69@t) ((lambda (G3f6b@ls/false) (if G3f6b@ls/false (apply (lambda (G3f6d@x* G3f6e@x) (if (not (G2d6a@valid-bound-ids? (cons G3f6e@x G3f6d@x*))) (G2f19@invalid-fmls-error G3f60@stx G3f5f@fmls) (void))) G3f6b@ls/false) ((lambda (G3f71@t) ((lambda (G3f73@ls/false) (if G3f73@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid syntax" G3f60@stx)) G3f73@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3f71@t))) (G2f5f@syntax-dispatch G3f71@t '_))) G3f69@t))) (G2f5f@syntax-dispatch G3f69@t '#(each+ any () any)))) G3f63@t))) (G2f5f@syntax-dispatch G3f63@t 'each-any))) G3f5f@fmls))) (set! G2f89@chi-lambda-clause (lambda (G3f75@stx G3f76@fmls G3f77@body* G3f78@r G3f79@mr) ((lambda (G3f7f@t) ((lambda (G3f81@ls/false) (if G3f81@ls/false (apply (lambda (G3f83@x*) (begin (G2f87@verify-formals G3f76@fmls G3f75@stx) ((lambda (G3f85@lex* G3f86@lab*) (values G3f85@lex* (G2f99@chi-internal (G2d4c@add-subst (G2d1b@make-full-rib G3f83@x* G3f86@lab*) G3f77@body*) (G2ef3@add-lexicals G3f86@lab* G3f85@lex* G3f78@r) G3f79@mr))) (map G2cdc@gen-lexical G3f83@x*) (map G2ce0@gen-label G3f83@x*)))) G3f81@ls/false) ((lambda (G3f89@t) ((lambda (G3f8b@ls/false) (if G3f8b@ls/false (apply (lambda (G3f8d@x* G3f8e@x) (begin (G2f87@verify-formals G3f76@fmls G3f75@stx) ((lambda (G3f91@lex* G3f92@lab* G3f93@lex G3f94@lab) (values (append G3f91@lex* G3f93@lex) (G2f99@chi-internal (G2d4c@add-subst (G2d1b@make-full-rib (cons G3f8e@x G3f8d@x*) (cons G3f94@lab G3f92@lab*)) G3f77@body*) (G2ef3@add-lexicals (cons G3f94@lab G3f92@lab*) (cons G3f93@lex G3f91@lex*) G3f78@r) G3f79@mr))) (map G2cdc@gen-lexical G3f8d@x*) (map G2ce0@gen-label G3f8d@x*) (G2cdc@gen-lexical G3f8e@x) (G2ce0@gen-label G3f8e@x)))) G3f8b@ls/false) ((lambda (G3f99@t) ((lambda (G3f9b@ls/false) (if G3f9b@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid syntax" G3f76@fmls)) G3f9b@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G3f99@t))) (G2f5f@syntax-dispatch G3f99@t '_))) G3f89@t))) (G2f5f@syntax-dispatch G3f89@t '#(each+ any () any)))) G3f7f@t))) (G2f5f@syntax-dispatch G3f7f@t 'each-any))) G3f76@fmls))) (set! G2f8b@chi-lambda-clause* (lambda (G3f9d@stx G3f9e@fmls* G3f9f@body** G3fa0@r G3fa1@mr) (if (null? G3f9e@fmls*) (values '() '()) (call-with-values (lambda () (G2f89@chi-lambda-clause G3f9d@stx (car G3f9e@fmls*) (car G3f9f@body**) G3fa0@r G3fa1@mr)) (lambda (G3fa9@G3fa7 G3faa@G3fa8) ((lambda (G3fad@b G3fae@a) (call-with-values (lambda () (G2f8b@chi-lambda-clause* G3f9d@stx (cdr G3f9e@fmls*) (cdr G3f9f@body**) G3fa0@r G3fa1@mr)) (lambda (G3fb3@G3fb1 G3fb4@G3fb2) ((lambda (G3fb7@b* G3fb8@a*) (values (cons G3fae@a G3fb8@a*) (cons G3fad@b G3fb7@b*))) G3fb4@G3fb2 G3fb3@G3fb1)))) G3faa@G3fa8 G3fa9@G3fa7)))))) (set! G2f8d@chi-defun (lambda (G3fbb@x G3fbc@r G3fbd@mr) ((lambda (G3fc1@fmls G3fc2@body*) (call-with-values (lambda () (G2f89@chi-lambda-clause G3fc1@fmls G3fc1@fmls G3fc2@body* G3fbc@r G3fbd@mr)) (lambda (G3fc7@G3fc5 G3fc8@G3fc6) ((lambda (G3fcb@body G3fcc@fmls) (G2cba@G2bf8@build-lambda '#f G3fcc@fmls G3fcb@body)) G3fc8@G3fc6 G3fc7@G3fc5)))) (car G3fbb@x) (cdr G3fbb@x)))) (set! G2f8f@chi-rhs (lambda (G3fcf@rhs G3fd0@r G3fd1@mr) ((lambda (G3fd5@t) (if (memv G3fd5@t '(defun)) (G2f8d@chi-defun (cdr G3fcf@rhs) G3fd0@r G3fd1@mr) (if (memv G3fd5@t '(expr)) ((lambda (G3fd7@expr) (G2f83@chi-expr G3fd7@expr G3fd0@r G3fd1@mr)) (cdr G3fcf@rhs)) (if (memv G3fd5@t '(top-expr)) ((lambda (G3fd9@expr) (G2cbd@G2c2e@build-sequence '#f (list (G2f83@chi-expr G3fd9@expr G3fd0@r G3fd1@mr) (G2cbe@G2c30@build-void)))) (cdr G3fcf@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fcf@rhs))))) (car G3fcf@rhs)))) (set! G2f91@expand-interaction-rhs*/init* (lambda (G3fdb@lhs* G3fdc@rhs* G3fdd@init* G3fde@r G3fdf@mr) ((letrec ((G3fe5@f (lambda (G3fe7@lhs* G3fe8@rhs*) (if (null? G3fe7@lhs*) (map (lambda (G3feb@x) (G2f83@chi-expr G3feb@x G3fde@r G3fdf@mr)) G3fdd@init*) ((lambda (G3fed@lhs G3fee@rhs) ((lambda (G3ff1@t) (if (memv G3ff1@t '(defun)) ((lambda (G3ff3@rhs) (cons (list 'set! G3fed@lhs G3ff3@rhs) (G3fe5@f (cdr G3fe7@lhs*) (cdr G3fe8@rhs*)))) (G2f8d@chi-defun (cdr G3fee@rhs) G3fde@r G3fdf@mr)) (if (memv G3ff1@t '(expr)) ((lambda (G3ff5@rhs) (cons (list 'set! G3fed@lhs G3ff5@rhs) (G3fe5@f (cdr G3fe7@lhs*) (cdr G3fe8@rhs*)))) (G2f83@chi-expr (cdr G3fee@rhs) G3fde@r G3fdf@mr)) (if (memv G3ff1@t '(top-expr)) ((lambda (G3ff7@e) (cons G3ff7@e (G3fe5@f (cdr G3fe7@lhs*) (cdr G3fe8@rhs*)))) (G2f83@chi-expr (cdr G3fee@rhs) G3fde@r G3fdf@mr)) (error 'expand-interaction '"invallid" G3fee@rhs))))) (car G3fee@rhs))) (car G3fe7@lhs*) (car G3fe8@rhs*)))))) G3fe5@f) G3fdb@lhs* G3fdc@rhs*))) (set! G2f93@chi-rhs* (lambda (G3ff9@rhs* G3ffa@r G3ffb@mr) ((letrec ((G3fff@f (lambda (G4001@ls) (if (null? G4001@ls) '() ((lambda (G4003@a) (cons G4003@a (G3fff@f (cdr G4001@ls)))) (G2f8f@chi-rhs (car G4001@ls) G3ffa@r G3ffb@mr)))))) G3fff@f) G3ff9@rhs*))) (set! G2f95@find-bound=? (lambda (G4005@x G4006@lhs* G4007@rhs*) (if (null? G4006@lhs*) '#f (if (G2d66@bound-id=? G4005@x (car G4006@lhs*)) (car G4007@rhs*) (G2f95@find-bound=? G4005@x (cdr G4006@lhs*) (cdr G4007@rhs*)))))) (set! G2f97@find-dups (lambda (G400b@ls) ((letrec ((G400d@f (lambda (G400f@ls G4010@dups) (if (null? G400f@ls) G4010@dups ((lambda (G4013@t) (if G4013@t ((lambda (G4015@x) (G400d@f (cdr G400f@ls) (cons (list (car G400f@ls) G4015@x) G4010@dups))) G4013@t) (G400d@f (cdr G400f@ls) G4010@dups))) (G2f95@find-bound=? (car G400f@ls) (cdr G400f@ls) (cdr G400f@ls))))))) G400d@f) G400b@ls '()))) (set! G2f99@chi-internal (lambda (G4017@e* G4018@r G4019@mr) ((lambda (G401d@rib) (call-with-values (lambda () (G2fbc@chi-body* (map (lambda (G4027@x) (G2d4c@add-subst G401d@rib G4027@x)) (G2d5e@syntax->list G4017@e*)) G4018@r G4019@mr '() '() '() '() '() G401d@rib '#f)) (lambda (G4029@G401f G402a@G4020 G402b@G4021 G402c@G4022 G402d@G4023 G402e@G4024 G402f@G4025 G4030@G4026) ((lambda (G4039@_exp* G403a@kwd* G403b@mod** G403c@rhs* G403d@lex* G403e@mr G403f@r G4040@e*) (begin (if (null? G4040@e*) (G304a@syntax-violation '#f '"no expression in body" G4040@e*) (void)) ((lambda (G4049@init*) ((lambda (G404b@rhs*) ((lambda () (G2cc0@G2c34@build-letrec* '#f (reverse G403d@lex*) (reverse G404b@rhs*) (G2cbd@G2c2e@build-sequence '#f G4049@init*))))) (G2f93@chi-rhs* G403c@rhs* G403f@r G403e@mr))) (G2f7f@chi-expr* (append (apply append (reverse G403b@mod**)) G4040@e*) G403f@r G403e@mr)))) G4030@G4026 G402f@G4025 G402e@G4024 G402d@G4023 G402c@G4022 G402b@G4021 G402a@G4020 G4029@G401f)))) (G2d0b@make-empty-rib)))) (set! G2f9b@parse-module (lambda (G404d@e) ((lambda (G404f@t) ((lambda (G4051@ls/false) (if G4051@ls/false (apply (lambda (G4053@export* G4054@b*) (begin (if (not (for-all G2d60@id? G4053@export*)) (G304a@syntax-violation '#f '"module exports must be identifiers" G404d@e) (void)) (values '#f (list->vector G4053@export*) G4054@b*))) G4051@ls/false) ((lambda (G4057@t) ((lambda (G4059@ls/false) (if G4059@ls/false (apply (lambda (G405b@name G405c@export* G405d@b*) (begin (if (not (G2d60@id? G405b@name)) (G304a@syntax-violation '#f '"module name must be an identifier" G404d@e) (void)) (if (not (for-all G2d60@id? G405c@export*)) (G304a@syntax-violation '#f '"module exports must be identifiers" G404d@e) (void)) (values G405b@name (list->vector G405c@export*) G405d@b*))) G4059@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G4057@t))) (G2f5f@syntax-dispatch G4057@t '(_ any each-any . each-any)))) G404f@t))) (G2f5f@syntax-dispatch G404f@t '(_ each-any . each-any)))) G404d@e))) (set! G2fa1@G2f9c (make-record-type-descriptor 'module-interface '#f 'G2f9f '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2fa3@G2f9e '#f) (set! G2fa5@G2f9d (make-record-constructor-descriptor G2fa1@G2f9c '#f G2fa3@G2f9e)) (set! G2fa8@module-interface? (record-predicate G2fa1@G2f9c)) (set! G2faa@make-module-interface (record-constructor G2fa5@G2f9d)) (set! G2fac@module-interface-first-mark (record-accessor G2fa1@G2f9c '0)) (set! G2fae@module-interface-exp-id-vec (record-accessor G2fa1@G2f9c '1)) (set! G2fb0@module-interface-exp-lab-vec (record-accessor G2fa1@G2f9c '2)) (set! G2fb2@set-module-interface-first-mark! (record-mutator G2fa1@G2f9c '0)) (set! G2fb4@set-module-interface-exp-id-vec! (record-mutator G2fa1@G2f9c '1)) (set! G2fb6@set-module-interface-exp-lab-vec! (record-mutator G2fa1@G2f9c '2)) (set! G2fb8@module-interface-exp-id* (lambda (G4061@iface G4062@id) ((lambda (G4066@diff-marks) (begin (set! G4066@diff-marks (lambda (G406d@ls G406e@x) (begin (if (null? G406d@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4071@a) (if (eq? G4071@a G406e@x) '() (cons G4071@a (G4066@diff-marks (cdr G406d@ls) G406e@x)))) (car G406d@ls))))) ((lambda (G4067@diff G4068@id-vec) (if (null? G4067@diff) G4068@id-vec (vector-map (lambda (G406b@x) (G2d2a@make-stx (G2d2c@stx-expr G406b@x) (append G4067@diff (G2d2e@stx-mark* G406b@x)) '() '())) G4068@id-vec))) (G4066@diff-marks (G2d2e@stx-mark* G4062@id) (G2fac@module-interface-first-mark G4061@iface)) (G2fae@module-interface-exp-id-vec G4061@iface)))) '#f))) (set! G2fba@chi-internal-module (lambda (G4073@e G4074@r G4075@mr G4076@lex* G4077@rhs* G4078@mod** G4079@kwd*) (call-with-values (lambda () (G2f9b@parse-module G4073@e)) (lambda (G4084@G4081 G4085@G4082 G4086@G4083) ((lambda (G408a@e* G408b@exp-id* G408c@name) ((lambda (G4090@rib) ((lambda (G4092@e*) ((lambda () (call-with-values (lambda () (G2fbc@chi-body* G4092@e* G4074@r G4075@mr G4076@lex* G4077@rhs* G4078@mod** G4079@kwd* '() G4090@rib '#f)) (lambda (G409c@G4094 G409d@G4095 G409e@G4096 G409f@G4097 G40a0@G4098 G40a1@G4099 G40a2@G409a G40a3@G409b) ((lambda (G40ac@_exp* G40ad@kwd* G40ae@mod** G40af@rhs* G40b0@lex* G40b1@mr G40b2@r G40b3@e*) ((lambda (G40bc@exp-lab* G40bd@mod**) (if (not G408c@name) (values G40b0@lex* G40af@rhs* G408b@exp-id* G40bc@exp-lab* G40b2@r G40b1@mr G40bd@mod** G40ad@kwd*) ((lambda (G40c0@lab G40c1@iface) (values G40b0@lex* G40af@rhs* (vector G408c@name) (vector G40c0@lab) (cons (cons G40c0@lab (cons '$module G40c1@iface)) G40b2@r) (cons (cons G40c0@lab (cons '$module G40c1@iface)) G40b1@mr) G40bd@mod** G40ad@kwd*)) (G2ce0@gen-label 'module) (G2faa@make-module-interface (car (G2d2e@stx-mark* G408c@name)) (vector-map (lambda (G40c4@x) (G2d2a@make-stx (G2d2c@stx-expr G40c4@x) (G2d2e@stx-mark* G40c4@x) '() '())) G408b@exp-id*) G40bc@exp-lab*)))) (vector-map (lambda (G40c6@x) (or (G2d7a@id->label (G2d2a@make-stx (G2d62@id->sym G40c6@x) (G2d2e@stx-mark* G40c6@x) (list G4090@rib) '())) (G304a@syntax-violation '#f '"cannot find module export" G40c6@x))) G408b@exp-id*) (cons G40b3@e* G40ae@mod**))) G40a3@G409b G40a2@G409a G40a1@G4099 G40a0@G4098 G409f@G4097 G409e@G4096 G409d@G4095 G409c@G4094)))))) (map (lambda (G40c8@x) (G2d4c@add-subst G4090@rib G40c8@x)) (G2d5e@syntax->list G408a@e*)))) (G2d0b@make-empty-rib))) G4086@G4083 G4085@G4082 G4084@G4081))))) (set! G2fbc@chi-body* (lambda (G40ca@e* G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40d0@kwd* G40d1@exp* G40d2@rib G40d3@top?) (if (null? G40ca@e*) (values G40ca@e* G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40d0@kwd* G40d1@exp*) ((lambda (G40de@e) (call-with-values (lambda () (G2d88@syntax-type G40de@e G40cb@r)) (lambda (G40e3@G40e0 G40e4@G40e1 G40e5@G40e2) ((lambda (G40e9@kwd G40ea@value G40eb@type) ((lambda (G40ef@kwd*) ((lambda (G40f1@t) (if (memv G40f1@t '(define)) (call-with-values (lambda () (G2ee3@parse-define G40de@e)) (lambda (G40f5@G40f3 G40f6@G40f4) ((lambda (G40f9@rhs G40fa@id) (begin (if (G2d6e@bound-id-member? G40fa@id G40ef@kwd*) (G304a@syntax-violation '#f '"cannot redefine keyword" G40de@e) (void)) (call-with-values (lambda () (G2ce4@gen-define-label+loc G40fa@id G40d2@rib)) (lambda (G40ff@G40fd G4100@G40fe) ((lambda (G4103@lex G4104@lab) (begin (G2d11@extend-rib! G40d2@rib G40fa@id G4104@lab) (G2fbc@chi-body* (cdr G40ca@e*) (G2ef1@add-lexical G4104@lab G4103@lex G40cb@r) G40cc@mr (cons G4103@lex G40cd@lex*) (cons G40f9@rhs G40ce@rhs*) G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?))) G4100@G40fe G40ff@G40fd))))) G40f6@G40f4 G40f5@G40f3))) (if (memv G40f1@t '(define-syntax)) (call-with-values (lambda () (G2ee5@parse-define-syntax G40de@e)) (lambda (G4109@G4107 G410a@G4108) ((lambda (G410d@rhs G410e@id) (begin (if (G2d6e@bound-id-member? G410e@id G40ef@kwd*) (G304a@syntax-violation '#f '"cannot redefine keyword" G40de@e) (void)) ((lambda (G4111@lab G4112@expanded-rhs) (begin (G2d11@extend-rib! G40d2@rib G410e@id G4111@lab) ((lambda (G4115@b) (G2fbc@chi-body* (cdr G40ca@e*) (cons (cons G4111@lab G4115@b) G40cb@r) (cons (cons G4111@lab G4115@b) G40cc@mr) G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?)) (G2da0@make-eval-transformer G4112@expanded-rhs)))) (G2ce6@gen-define-label G410e@id G40d2@rib) (G2fbe@expand-transformer G410d@rhs G40cc@mr)))) G410a@G4108 G4109@G4107))) (if (memv G40f1@t '(let-syntax letrec-syntax)) ((lambda (G4117@t) ((lambda (G4119@ls/false) (if (and G4119@ls/false (apply (lambda (G411b@xlhs* G411c@xrhs* G411d@xbody*) (if (not (G2d6a@valid-bound-ids? G411b@xlhs*)) (G304a@syntax-violation '#f '"invalid identifiers" G40de@e) (void))) G4119@ls/false)) (apply (lambda (G4121@xlhs* G4122@xrhs* G4123@xbody*) ((lambda (G4127@xlab*) ((lambda (G4129@xrib) ((lambda (G412b@xb*) ((lambda () (G2fbc@chi-body* (append (map (lambda (G412d@x) (G2d4c@add-subst G4129@xrib G412d@x)) G4123@xbody*) (cdr G40ca@e*)) (append (map cons G4127@xlab* G412b@xb*) G40cb@r) (append (map cons G4127@xlab* G412b@xb*) G40cc@mr) G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?)))) (map (lambda (G412f@x) (G2da0@make-eval-transformer (G2fbe@expand-transformer (if (eq? G40eb@type 'let-syntax) G412f@x (G2d4c@add-subst G4129@xrib G412f@x)) G40cc@mr))) G4122@xrhs*))) (G2d1b@make-full-rib G4121@xlhs* G4127@xlab*))) (map G2ce0@gen-label G4121@xlhs*))) G4119@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G4117@t))) (G2f5f@syntax-dispatch G4117@t '(_ #(each (any any)) . each-any)))) G40de@e) (if (memv G40f1@t '(begin)) ((lambda (G4131@t) ((lambda (G4133@ls/false) (if G4133@ls/false (apply (lambda (G4135@x*) (G2fbc@chi-body* (append G4135@x* (cdr G40ca@e*)) G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?)) G4133@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G4131@t))) (G2f5f@syntax-dispatch G4131@t '(_ . each-any)))) G40de@e) (if (memv G40f1@t '(global-macro global-macro!)) (G2fbc@chi-body* (cons (G2d4c@add-subst G40d2@rib (G2f7d@chi-global-macro G40ea@value G40de@e)) (cdr G40ca@e*)) G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?) (if (memv G40f1@t '(local-macro local-macro!)) (G2fbc@chi-body* (cons (G2d4c@add-subst G40d2@rib (G2f7b@chi-local-macro G40ea@value G40de@e)) (cdr G40ca@e*)) G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?) (if (memv G40f1@t '(macro macro!)) (G2fbc@chi-body* (cons (G2d4c@add-subst G40d2@rib (G2f79@chi-macro G40ea@value G40de@e)) (cdr G40ca@e*)) G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?) (if (memv G40f1@t '(module)) (call-with-values (lambda () (G2fba@chi-internal-module G40de@e G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd*)) (lambda (G413f@G4137 G4140@G4138 G4141@G4139 G4142@G413a G4143@G413b G4144@G413c G4145@G413d G4146@G413e) ((lambda (G414f@kwd* G4150@mod** G4151@mr G4152@r G4153@m-exp-lab* G4154@m-exp-id* G4155@rhs* G4156@lex*) (begin (vector-for-each (lambda (G415f@id G4160@lab) (G2d11@extend-rib! G40d2@rib G415f@id G4160@lab)) G4154@m-exp-id* G4153@m-exp-lab*) (G2fbc@chi-body* (cdr G40ca@e*) G4152@r G4151@mr G4156@lex* G4155@rhs* G4150@mod** G414f@kwd* G40d1@exp* G40d2@rib G40d3@top?))) G4146@G413e G4145@G413d G4144@G413c G4143@G413b G4142@G413a G4141@G4139 G4140@G4138 G413f@G4137))) (if (memv G40f1@t '(library)) (begin (G302c@library-expander (G2d76@stx->datum G40de@e)) (G2fbc@chi-body* (cdr G40ca@e*) G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?)) (if (memv G40f1@t '(export)) ((lambda (G4163@t) ((lambda (G4165@ls/false) (if G4165@ls/false (apply (lambda (G4167@exp-decl*) (G2fbc@chi-body* (cdr G40ca@e*) G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* (append G4167@exp-decl* G40d1@exp*) G40d2@rib G40d3@top?)) G4165@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G4163@t))) (G2f5f@syntax-dispatch G4163@t '(_ . each-any)))) G40de@e) (if (memv G40f1@t '(import)) ((lambda () ((lambda (G416a@module-import? G416c@module-import G416e@library-import) (begin (set! G416a@module-import? (lambda (G41b6@e) ((lambda (G41b8@t) ((lambda (G41ba@ls/false) (if (and G41ba@ls/false (apply (lambda (G41bc@id) (G2d60@id? G41bc@id)) G41ba@ls/false)) (apply (lambda (G41be@id) '#t) G41ba@ls/false) ((lambda (G41c0@t) ((lambda (G41c2@ls/false) (if G41c2@ls/false (apply (lambda (G41c4@imp*) '#f) G41c2@ls/false) ((lambda (G41c6@t) ((lambda (G41c8@ls/false) (if G41c8@ls/false (apply (lambda () (G304a@syntax-violation '#f '"malformed import form" G41b6@e)) G41c8@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G41c6@t))) (G2f5f@syntax-dispatch G41c6@t '_))) G41c0@t))) (G2f5f@syntax-dispatch G41c0@t '(_ . each-any)))) G41b8@t))) (G2f5f@syntax-dispatch G41b8@t '(_ any)))) G41b6@e))) (set! G416c@module-import (lambda (G4197@e G4198@r) ((lambda (G419b@t) ((lambda (G419d@ls/false) (if (and G419d@ls/false (apply (lambda (G419f@id) (G2d60@id? G419f@id)) G419d@ls/false)) (apply (lambda (G41a1@id) (call-with-values (lambda () (G2d88@syntax-type G41a1@id G4198@r)) (lambda (G41a6@G41a3 G41a7@G41a4 G41a8@G41a5) ((lambda (G41ac@kwd G41ad@value G41ae@type) ((lambda (G41b2@t) (if (memv G41b2@t '($module)) ((lambda (G41b4@iface) (values (G2fb8@module-interface-exp-id* G41b4@iface G41a1@id) (G2fb0@module-interface-exp-lab-vec G41b4@iface))) G41ad@value) (G304a@syntax-violation '#f '"invalid import" G4197@e))) G41ae@type)) G41a8@G41a5 G41a7@G41a4 G41a6@G41a3)))) G419d@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G419b@t))) (G2f5f@syntax-dispatch G419b@t '(_ any)))) G4197@e))) (set! G416e@library-import (lambda (G417d@e) ((lambda (G417f@t) ((lambda (G4181@ls/false) (if G4181@ls/false (apply (lambda (G4183@ctxt G4184@imp*) (call-with-values (lambda () (G2fc6@parse-import-spec* (G3050@syntax->datum G4184@imp*))) (lambda (G4189@G4187 G418a@G4188) ((lambda (G418d@subst-labels G418e@subst-names) (values (vector-map (lambda (G4191@name) (G2d3e@datum->stx G4183@ctxt G4191@name)) G418e@subst-names) G418d@subst-labels)) G418a@G4188 G4189@G4187)))) G4181@ls/false) ((lambda (G4193@t) ((lambda (G4195@ls/false) (if G4195@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid import form" G417d@e)) G4195@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G4193@t))) (G2f5f@syntax-dispatch G4193@t '_))) G417f@t))) (G2f5f@syntax-dispatch G417f@t '(any . each-any)))) G417d@e))) (begin (call-with-values (lambda () (if (G416a@module-import? G40de@e) (G416c@module-import G40de@e G40cb@r) (G416e@library-import G40de@e))) (lambda (G4171@G416f G4172@G4170) ((lambda (G4175@lab* G4176@id*) (vector-for-each (lambda (G4179@id G417a@lab) (G2d11@extend-rib! G40d2@rib G4179@id G417a@lab)) G4176@id* G4175@lab*)) G4172@G4170 G4171@G416f))) (G2fbc@chi-body* (cdr G40ca@e*) G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?)))) '#f '#f '#f))) (if G40d3@top? (G2fbc@chi-body* (cdr G40ca@e*) G40cb@r G40cc@mr (cons (G2cdc@gen-lexical 'dummy) G40cd@lex*) (cons (cons 'top-expr G40de@e) G40ce@rhs*) G40cf@mod** G40ef@kwd* G40d1@exp* G40d2@rib G40d3@top?) (values G40ca@e* G40cb@r G40cc@mr G40cd@lex* G40ce@rhs* G40cf@mod** G40ef@kwd* G40d1@exp*)))))))))))))) G40eb@type)) (if (G2d60@id? G40e9@kwd) (cons G40e9@kwd G40d0@kwd*) G40d0@kwd*))) G40e5@G40e2 G40e4@G40e1 G40e3@G40e0)))) (car G40ca@e*))))) (set! G2fbe@expand-transformer (lambda (G41ca@expr G41cb@r) ((lambda (G41ce@rtc) ((lambda (G41d0@expanded-rhs) (begin (for-each ((lambda (G41d2@mark-visit) (lambda (G41d4@x) (begin (G2b77@G2a1e@invoke-library G41d4@x) (G41d2@mark-visit G41d4@x)))) (G2fce@vis-collector)) (G41ce@rtc)) G41d0@expanded-rhs)) ((lambda (G41da@G41d6 G41db@G41d7 G41dc@G41d8 G41dd@G41d9) ((lambda (G41e2@swap) (dynamic-wind G41e2@swap (lambda () (G2f83@chi-expr G41ca@expr G41cb@r G41cb@r)) G41e2@swap)) (lambda () (begin ((lambda (G41e4@t) (begin (G41da@G41d6 G41dc@G41d8) (set! G41dc@G41d8 G41e4@t))) (G41da@G41d6)) ((lambda (G41e6@t) (begin (G41db@G41d7 G41dd@G41d9) (set! G41dd@G41d9 G41e6@t))) (G41db@G41d7)))))) G2fcc@inv-collector G2fce@vis-collector G41ce@rtc (lambda (G41e8@x) (values))))) (G2fca@make-collector)))) (set! G2fc0@parse-exports (lambda (G41ea@exp*) ((letrec ((G41ec@f (lambda (G41ee@exp* G41ef@int* G41f0@ext*) (if (null? G41ee@exp*) (begin (if (not (G2d6a@valid-bound-ids? G41f0@ext*)) (G304a@syntax-violation 'export '"invalid exports" (G2f97@find-dups G41f0@ext*)) (void)) (values (map G3050@syntax->datum G41f0@ext*) G41ef@int*)) ((lambda (G41f4@t) ((lambda (G41f6@ls/false) (if G41f6@ls/false (apply (lambda (G41f8@rename G41f9@i* G41fa@e*) (begin (if (not (and (eq? (G3050@syntax->datum G41f8@rename) 'rename) (for-all G2d60@id? G41f9@i*) (for-all G2d60@id? G41fa@e*))) (G304a@syntax-violation 'export '"invalid export specifier" (car G41ee@exp*)) (void)) (G41ec@f (cdr G41ee@exp*) (append G41f9@i* G41ef@int*) (append G41fa@e* G41f0@ext*)))) G41f6@ls/false) ((lambda (G41fe@t) ((lambda (G4200@ls/false) (if G4200@ls/false (apply (lambda (G4202@ie) (begin (if (not (G2d60@id? G4202@ie)) (G304a@syntax-violation 'export '"invalid export" G4202@ie) (void)) (G41ec@f (cdr G41ee@exp*) (cons G4202@ie G41ef@int*) (cons G4202@ie G41f0@ext*)))) G4200@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G41fe@t))) (G2f5f@syntax-dispatch G41fe@t 'any))) G41f4@t))) (G2f5f@syntax-dispatch G41f4@t '(any . #(each (any any)))))) (car G41ee@exp*)))))) G41ec@f) G41ea@exp* '() '()))) (set! G2fc2@parse-library-name (lambda (G4204@spec) ((lambda (G4207@parse) (begin (set! G4207@parse (lambda (G4212@x) ((lambda (G4214@t) ((lambda (G4216@ls/false) (if (and G4216@ls/false (apply (lambda (G4218@v*) (for-all (lambda (G421a@x) ((lambda (G421c@x) (and (integer? G421c@x) (exact? G421c@x))) (G3050@syntax->datum G421a@x))) G4218@v*)) G4216@ls/false)) (apply (lambda (G421e@v*) (values '() (map G3050@syntax->datum G421e@v*))) G4216@ls/false) ((lambda (G4220@t) ((lambda (G4222@ls/false) (if (and G4222@ls/false (apply (lambda (G4224@x G4225@rest) (symbol? (G3050@syntax->datum G4224@x))) G4222@ls/false)) (apply (lambda (G4228@x G4229@rest) (call-with-values (lambda () (G4207@parse G4229@rest)) (lambda (G422e@G422c G422f@G422d) ((lambda (G4232@v* G4233@x*) (values (cons (G3050@syntax->datum G4228@x) G4233@x*) G4232@v*)) G422f@G422d G422e@G422c)))) G4222@ls/false) ((lambda (G4236@t) ((lambda (G4238@ls/false) (if G4238@ls/false (apply (lambda () (values '() '())) G4238@ls/false) ((lambda (G423a@t) ((lambda (G423c@ls/false) (if G423c@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid library name" G4204@spec)) G423c@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G423a@t))) (G2f5f@syntax-dispatch G423a@t '_))) G4236@t))) (G2f5f@syntax-dispatch G4236@t '()))) G4220@t))) (G2f5f@syntax-dispatch G4220@t '(any . any)))) G4214@t))) (G2f5f@syntax-dispatch G4214@t '(each-any)))) G4212@x))) (call-with-values (lambda () (G4207@parse G4204@spec)) (lambda (G420a@G4208 G420b@G4209) ((lambda (G420e@ver* G420f@name*) (begin (if (null? G420f@name*) (G304a@syntax-violation '#f '"empty library name" G4204@spec) (void)) (values G420f@name* G420e@ver*))) G420b@G4209 G420a@G4208))))) '#f))) (set! G2fc4@parse-library (lambda (G423e@e) ((lambda (G4240@t) ((lambda (G4242@ls/false) (if (and G4242@ls/false (apply (lambda (G4244@library G4245@name* G4246@export G4247@exp* G4248@import G4249@imp* G424a@b*) (and (eq? (G3050@syntax->datum G4246@export) 'export) (eq? (G3050@syntax->datum G4248@import) 'import) (eq? (G3050@syntax->datum G4244@library) 'library))) G4242@ls/false)) (apply (lambda (G4252@library G4253@name* G4254@export G4255@exp* G4256@import G4257@imp* G4258@b*) (values G4253@name* G4255@exp* G4257@imp* G4258@b*)) G4242@ls/false) ((lambda (G4260@t) ((lambda (G4262@ls/false) (if G4262@ls/false (apply (lambda () (G304a@syntax-violation '#f '"malformed library" G423e@e)) G4262@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G4260@t))) (G2f5f@syntax-dispatch G4260@t '_))) G4240@t))) (G2f5f@syntax-dispatch G4240@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G423e@e))) (set! G2fc6@parse-import-spec* ((lambda () ((lambda (G4265@idsyn? G4267@dup-error G4269@merge-substs G426b@exclude* G426d@find* G426f@rem* G4271@remove-dups G4273@parse-library-name G4275@import-library G4277@get-import G4279@add-imports!) (begin (set! G4265@idsyn? (lambda (G4464@x) (symbol? (G3050@syntax->datum G4464@x)))) (set! G4267@dup-error (lambda (G4462@name) (G304a@syntax-violation 'import '"two imports with different bindings" G4462@name))) (set! G4269@merge-substs (lambda (G4450@s G4451@subst) ((lambda (G4455@insert-to-subst) (begin (set! G4455@insert-to-subst (lambda (G4456@a G4457@subst) ((lambda (G445a@name G445b@label) ((lambda (G445e@t) (if G445e@t ((lambda (G4460@x) (if (eq? (cdr G4460@x) G445b@label) G4457@subst (G4267@dup-error G445a@name))) G445e@t) (cons G4456@a G4457@subst))) (assq G445a@name G4457@subst))) (car G4456@a) (cdr G4456@a)))) (if (null? G4450@s) G4451@subst (G4455@insert-to-subst (car G4450@s) (G4269@merge-substs (cdr G4450@s) G4451@subst))))) '#f))) (set! G426b@exclude* (lambda (G4426@sym* G4427@subst) ((lambda (G442b@exclude) (begin (set! G442b@exclude (lambda (G4440@sym G4441@subst) (if (null? G4441@subst) (G304a@syntax-violation 'import '"cannot rename unbound identifier" G4440@sym) (if (eq? G4440@sym (caar G4441@subst)) (values (cdar G4441@subst) (cdr G4441@subst)) ((lambda (G4444@a) (call-with-values (lambda () (G442b@exclude G4440@sym (cdr G4441@subst))) (lambda (G4448@G4446 G4449@G4447) ((lambda (G444c@subst G444d@old) (values G444d@old (cons G4444@a G444c@subst))) G4449@G4447 G4448@G4446)))) (car G4441@subst)))))) (if (null? G4426@sym*) (values '() G4427@subst) (call-with-values (lambda () (G442b@exclude (car G4426@sym*) G4427@subst)) (lambda (G442e@G442c G442f@G442d) ((lambda (G4432@subst G4433@old) (call-with-values (lambda () (G426b@exclude* (cdr G4426@sym*) G4432@subst)) (lambda (G4438@G4436 G4439@G4437) ((lambda (G443c@subst G443d@old*) (values (cons G4433@old G443d@old*) G443c@subst)) G4439@G4437 G4438@G4436)))) G442f@G442d G442e@G442c)))))) '#f))) (set! G426d@find* (lambda (G441e@sym* G441f@subst) (map (lambda (G4422@x) ((lambda (G4424@t) (if G4424@t (cdr G4424@t) (G304a@syntax-violation 'import '"cannot find identifier" G4422@x))) (assq G4422@x G441f@subst))) G441e@sym*))) (set! G426f@rem* (lambda (G4416@sym* G4417@subst) ((letrec ((G441a@f (lambda (G441c@subst) (if (null? G441c@subst) '() (if (memq (caar G441c@subst) G4416@sym*) (G441a@f (cdr G441c@subst)) (cons (car G441c@subst) (G441a@f (cdr G441c@subst)))))))) G441a@f) G4417@subst))) (set! G4271@remove-dups (lambda (G4414@ls) (if (null? G4414@ls) '() (if (memq (car G4414@ls) (cdr G4414@ls)) (G4271@remove-dups (cdr G4414@ls)) (cons (car G4414@ls) (G4271@remove-dups (cdr G4414@ls))))))) (set! G4273@parse-library-name (lambda (G432e@spec) ((lambda (G4331@subversion? G4333@subversion-pred G4335@version-pred) (begin (set! G4331@subversion? (lambda (G4410@x) ((lambda (G4412@x) (and (integer? G4412@x) (exact? G4412@x) (>= G4412@x '0))) (G3050@syntax->datum G4410@x)))) (set! G4333@subversion-pred (lambda (G43b0@x*) ((lambda (G43b2@t) ((lambda (G43b4@ls/false) (if (and G43b4@ls/false (apply (lambda (G43b6@n) (G4331@subversion? G43b6@n)) G43b4@ls/false)) (apply (lambda (G43b8@n) (lambda (G43ba@x) (= G43ba@x (G3050@syntax->datum G43b8@n)))) G43b4@ls/false) ((lambda (G43bc@t) ((lambda (G43be@ls/false) (if (and G43be@ls/false (apply (lambda (G43c0@p? G43c1@sub*) (eq? (G3050@syntax->datum G43c0@p?) 'and)) G43be@ls/false)) (apply (lambda (G43c4@p? G43c5@sub*) ((lambda (G43c8@p*) (lambda (G43ca@x) (for-all (lambda (G43cc@p) (G43cc@p G43ca@x)) G43c8@p*))) (map G4333@subversion-pred G43c5@sub*))) G43be@ls/false) ((lambda (G43ce@t) ((lambda (G43d0@ls/false) (if (and G43d0@ls/false (apply (lambda (G43d2@p? G43d3@sub*) (eq? (G3050@syntax->datum G43d2@p?) 'or)) G43d0@ls/false)) (apply (lambda (G43d6@p? G43d7@sub*) ((lambda (G43da@p*) (lambda (G43dc@x) (exists (lambda (G43de@p) (G43de@p G43dc@x)) G43da@p*))) (map G4333@subversion-pred G43d7@sub*))) G43d0@ls/false) ((lambda (G43e0@t) ((lambda (G43e2@ls/false) (if (and G43e2@ls/false (apply (lambda (G43e4@p? G43e5@sub) (eq? (G3050@syntax->datum G43e4@p?) 'not)) G43e2@ls/false)) (apply (lambda (G43e8@p? G43e9@sub) ((lambda (G43ec@p) (lambda (G43ee@x) (not (G43ec@p G43ee@x)))) (G4333@subversion-pred G43e9@sub))) G43e2@ls/false) ((lambda (G43f0@t) ((lambda (G43f2@ls/false) (if (and G43f2@ls/false (apply (lambda (G43f4@p? G43f5@n) (and (eq? (G3050@syntax->datum G43f4@p?) '<=) (G4331@subversion? G43f5@n))) G43f2@ls/false)) (apply (lambda (G43f8@p? G43f9@n) (lambda (G43fc@x) (<= G43fc@x (G3050@syntax->datum G43f9@n)))) G43f2@ls/false) ((lambda (G43fe@t) ((lambda (G4400@ls/false) (if (and G4400@ls/false (apply (lambda (G4402@p? G4403@n) (and (eq? (G3050@syntax->datum G4402@p?) '>=) (G4331@subversion? G4403@n))) G4400@ls/false)) (apply (lambda (G4406@p? G4407@n) (lambda (G440a@x) (>= G440a@x (G3050@syntax->datum G4407@n)))) G4400@ls/false) ((lambda (G440c@t) ((lambda (G440e@ls/false) (if G440e@ls/false (apply (lambda () (G304a@syntax-violation 'import '"invalid sub-version spec" G432e@spec G43b0@x*)) G440e@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G440c@t))) (G2f5f@syntax-dispatch G440c@t '_))) G43fe@t))) (G2f5f@syntax-dispatch G43fe@t '(any any)))) G43f0@t))) (G2f5f@syntax-dispatch G43f0@t '(any any)))) G43e0@t))) (G2f5f@syntax-dispatch G43e0@t '(any any)))) G43ce@t))) (G2f5f@syntax-dispatch G43ce@t '(any . each-any)))) G43bc@t))) (G2f5f@syntax-dispatch G43bc@t '(any . each-any)))) G43b2@t))) (G2f5f@syntax-dispatch G43b2@t 'any))) G43b0@x*))) (set! G4335@version-pred (lambda (G4360@x*) ((lambda (G4362@t) ((lambda (G4364@ls/false) (if G4364@ls/false (apply (lambda () (lambda (G4366@x) '#t)) G4364@ls/false) ((lambda (G4368@t) ((lambda (G436a@ls/false) (if (and G436a@ls/false (apply (lambda (G436c@c G436d@ver*) (eq? (G3050@syntax->datum G436c@c) 'and)) G436a@ls/false)) (apply (lambda (G4370@c G4371@ver*) ((lambda (G4374@p*) (lambda (G4376@x) (for-all (lambda (G4378@p) (G4378@p G4376@x)) G4374@p*))) (map G4335@version-pred G4371@ver*))) G436a@ls/false) ((lambda (G437a@t) ((lambda (G437c@ls/false) (if (and G437c@ls/false (apply (lambda (G437e@c G437f@ver*) (eq? (G3050@syntax->datum G437e@c) 'or)) G437c@ls/false)) (apply (lambda (G4382@c G4383@ver*) ((lambda (G4386@p*) (lambda (G4388@x) (exists (lambda (G438a@p) (G438a@p G4388@x)) G4386@p*))) (map G4335@version-pred G4383@ver*))) G437c@ls/false) ((lambda (G438c@t) ((lambda (G438e@ls/false) (if (and G438e@ls/false (apply (lambda (G4390@c G4391@ver) (eq? (G3050@syntax->datum G4390@c) 'not)) G438e@ls/false)) (apply (lambda (G4394@c G4395@ver) ((lambda (G4398@p) (lambda (G439a@x) (not (G4398@p G439a@x)))) (G4335@version-pred G4395@ver))) G438e@ls/false) ((lambda (G439c@t) ((lambda (G439e@ls/false) (if G439e@ls/false (apply (lambda (G43a0@sub*) ((lambda (G43a2@p*) (lambda (G43a4@x) ((letrec ((G43a6@f (lambda (G43a8@p* G43a9@x) (if (null? G43a8@p*) '#t (if (null? G43a9@x) '#f (and ((car G43a8@p*) (car G43a9@x)) (G43a6@f (cdr G43a8@p*) (cdr G43a9@x)))))))) G43a6@f) G43a2@p* G43a4@x))) (map G4333@subversion-pred G43a0@sub*))) G439e@ls/false) ((lambda (G43ac@t) ((lambda (G43ae@ls/false) (if G43ae@ls/false (apply (lambda () (G304a@syntax-violation 'import '"invalid version spec" G432e@spec G4360@x*)) G43ae@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G43ac@t))) (G2f5f@syntax-dispatch G43ac@t '_))) G439c@t))) (G2f5f@syntax-dispatch G439c@t 'each-any))) G438c@t))) (G2f5f@syntax-dispatch G438c@t '(any any)))) G437a@t))) (G2f5f@syntax-dispatch G437a@t '(any . each-any)))) G4368@t))) (G2f5f@syntax-dispatch G4368@t '(any . each-any)))) G4362@t))) (G2f5f@syntax-dispatch G4362@t '()))) G4360@x*))) ((letrec ((G4336@f (lambda (G4338@x) ((lambda (G433a@t) ((lambda (G433c@ls/false) (if G433c@ls/false (apply (lambda (G433e@version-spec*) (values '() (G4335@version-pred G433e@version-spec*))) G433c@ls/false) ((lambda (G4340@t) ((lambda (G4342@ls/false) (if (and G4342@ls/false (apply (lambda (G4344@x G4345@x*) (G4265@idsyn? G4344@x)) G4342@ls/false)) (apply (lambda (G4348@x G4349@x*) (call-with-values (lambda () (G4336@f G4349@x*)) (lambda (G434e@G434c G434f@G434d) ((lambda (G4352@pred G4353@name) (values (cons (G3050@syntax->datum G4348@x) G4353@name) G4352@pred)) G434f@G434d G434e@G434c)))) G4342@ls/false) ((lambda (G4356@t) ((lambda (G4358@ls/false) (if G4358@ls/false (apply (lambda () (values '() (lambda (G435a@x) '#t))) G4358@ls/false) ((lambda (G435c@t) ((lambda (G435e@ls/false) (if G435e@ls/false (apply (lambda () (G304a@syntax-violation '#f '"invalid import spec" G432e@spec)) G435e@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G435c@t))) (G2f5f@syntax-dispatch G435c@t '_))) G4356@t))) (G2f5f@syntax-dispatch G4356@t '()))) G4340@t))) (G2f5f@syntax-dispatch G4340@t '(any . any)))) G433a@t))) (G2f5f@syntax-dispatch G433a@t '(each-any)))) G4338@x)))) G4336@f) G432e@spec))) '#f '#f '#f))) (set! G4275@import-library (lambda (G4320@spec*) (call-with-values (lambda () (G4273@parse-library-name G4320@spec*)) (lambda (G4324@G4322 G4325@G4323) ((lambda (G4328@pred G4329@name) (begin (if (null? G4329@name) (G304a@syntax-violation 'import '"empty library name" G4320@spec*) (void)) ((lambda (G432c@lib) (begin (if (not G432c@lib) (G304a@syntax-violation 'import '"cannot find library with required name" G4329@name) (void)) (if (not (G4328@pred (G2b48@G29c0@library-version G432c@lib))) (G304a@syntax-violation 'import '"library does not satisfy version specification" G4320@spec* G432c@lib) (void)) ((G2fd0@imp-collector) G432c@lib) (G2b4c@G29c8@library-subst G432c@lib))) (G2b70@G2a10@find-library-by-name G4329@name)))) G4325@G4323 G4324@G4322))))) (set! G4277@get-import (lambda (G4292@spec) ((lambda (G4294@t) ((lambda (G4296@ls/false) (if (and G4296@ls/false (apply (lambda (G4298@x G4299@x*) (not (memq (G3050@syntax->datum G4298@x) '(for rename except only prefix library)))) G4296@ls/false)) (apply (lambda (G429c@x G429d@x*) (G4275@import-library (cons G429c@x G429d@x*))) G4296@ls/false) ((lambda (G42a0@t) ((lambda (G42a2@ls/false) (if (and G42a2@ls/false (apply (lambda (G42a4@rename G42a5@isp G42a6@old* G42a7@new*) (and (eq? (G3050@syntax->datum G42a4@rename) 'rename) (for-all G4265@idsyn? G42a6@old*) (for-all G4265@idsyn? G42a7@new*))) G42a2@ls/false)) (apply (lambda (G42ac@rename G42ad@isp G42ae@old* G42af@new*) ((lambda (G42b4@subst G42b5@old* G42b6@new*) ((lambda (G42ba@old-label*) ((lambda (G42bc@subst) (G4269@merge-substs (map cons G42b6@new* G42ba@old-label*) G42bc@subst)) (G426f@rem* G42b5@old* G42b4@subst))) (G426d@find* G42b5@old* G42b4@subst))) (G4277@get-import G42ad@isp) (map G3050@syntax->datum G42ae@old*) (map G3050@syntax->datum G42af@new*))) G42a2@ls/false) ((lambda (G42be@t) ((lambda (G42c0@ls/false) (if (and G42c0@ls/false (apply (lambda (G42c2@except G42c3@isp G42c4@sym*) (and (eq? (G3050@syntax->datum G42c2@except) 'except) (for-all G4265@idsyn? G42c4@sym*))) G42c0@ls/false)) (apply (lambda (G42c8@except G42c9@isp G42ca@sym*) ((lambda (G42ce@subst) (G426f@rem* (map G3050@syntax->datum G42ca@sym*) G42ce@subst)) (G4277@get-import G42c9@isp))) G42c0@ls/false) ((lambda (G42d0@t) ((lambda (G42d2@ls/false) (if (and G42d2@ls/false (apply (lambda (G42d4@only G42d5@isp G42d6@sym*) (and (eq? (G3050@syntax->datum G42d4@only) 'only) (for-all G4265@idsyn? G42d6@sym*))) G42d2@ls/false)) (apply (lambda (G42da@only G42db@isp G42dc@sym*) ((lambda (G42e0@subst G42e1@sym*) ((lambda (G42e4@sym*) ((lambda (G42e6@lab*) (map cons G42e4@sym* G42e6@lab*)) (G426d@find* G42e4@sym* G42e0@subst))) (G4271@remove-dups G42e1@sym*))) (G4277@get-import G42db@isp) (map G3050@syntax->datum G42dc@sym*))) G42d2@ls/false) ((lambda (G42e8@t) ((lambda (G42ea@ls/false) (if (and G42ea@ls/false (apply (lambda (G42ec@prefix G42ed@isp G42ee@p) (and (eq? (G3050@syntax->datum G42ec@prefix) 'prefix) (G4265@idsyn? G42ee@p))) G42ea@ls/false)) (apply (lambda (G42f2@prefix G42f3@isp G42f4@p) ((lambda (G42f8@subst G42f9@prefix) (map (lambda (G42fc@x) (cons (string->symbol (string-append G42f9@prefix (symbol->string (car G42fc@x)))) (cdr G42fc@x))) G42f8@subst)) (G4277@get-import G42f3@isp) (symbol->string (G3050@syntax->datum G42f4@p)))) G42ea@ls/false) ((lambda (G42fe@t) ((lambda (G4300@ls/false) (if (and G4300@ls/false (apply (lambda (G4302@library G4303@spec*) (eq? (G3050@syntax->datum G4302@library) 'library)) G4300@ls/false)) (apply (lambda (G4306@library G4307@spec*) (G4275@import-library G4307@spec*)) G4300@ls/false) ((lambda (G430a@t) ((lambda (G430c@ls/false) (if (and G430c@ls/false (apply (lambda (G430e@for G430f@isp G4310@rest) (eq? (G3050@syntax->datum G430e@for) 'for)) G430c@ls/false)) (apply (lambda (G4314@for G4315@isp G4316@rest) (G4277@get-import G4315@isp)) G430c@ls/false) ((lambda (G431a@t) ((lambda (G431c@ls/false) (if G431c@ls/false (apply (lambda (G431e@spec) (G304a@syntax-violation 'import '"invalid import spec" G431e@spec)) G431c@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G431a@t))) (G2f5f@syntax-dispatch G431a@t 'any))) G430a@t))) (G2f5f@syntax-dispatch G430a@t '(any any . any)))) G42fe@t))) (G2f5f@syntax-dispatch G42fe@t '(any each-any)))) G42e8@t))) (G2f5f@syntax-dispatch G42e8@t '(any any any)))) G42d0@t))) (G2f5f@syntax-dispatch G42d0@t '(any any . each-any)))) G42be@t))) (G2f5f@syntax-dispatch G42be@t '(any any . each-any)))) G42a0@t))) (G2f5f@syntax-dispatch G42a0@t '(any any . #(each (any any)))))) G4294@t))) (G2f5f@syntax-dispatch G4294@t '(any . each-any)))) G4292@spec))) (set! G4279@add-imports! (lambda (G4282@imp G4283@h) ((lambda (G4286@subst) (for-each (lambda (G4288@x) ((lambda (G428a@name G428b@label) ((lambda (G428e@t) (if G428e@t ((lambda (G4290@l) (if (not (eq? G4290@l G428b@label)) (G4267@dup-error G428a@name) (void))) G428e@t) (hashtable-set! G4283@h G428a@name G428b@label))) (hashtable-ref G4283@h G428a@name '#f))) (car G4288@x) (cdr G4288@x))) G4286@subst)) (G4277@get-import G4282@imp)))) (lambda (G427a@imp*) ((letrec ((G427c@f (lambda (G427e@imp* G427f@h) (if (null? G427e@imp*) (hashtable-entries G427f@h) (begin (G4279@add-imports! (car G427e@imp*) G427f@h) (G427c@f (cdr G427e@imp*) G427f@h)))))) G427c@f) G427a@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fc8@make-top-rib (lambda (G4466@names G4467@labels) ((lambda (G446a@rib) (begin (vector-for-each (lambda (G446c@name G446d@label) (begin (if (not (symbol? G446c@name)) (error 'make-top-rib '"BUG: not a symbol" G446c@name) (void)) (G2d13@extend-rib/nc! G446a@rib (G2d2a@make-stx G446c@name G2cd8@top-mark* '() '()) G446d@label))) G4466@names G4467@labels) G446a@rib)) (G2d0d@make-cache-rib)))) (set! G2fca@make-collector (lambda () ((lambda (G4470@ls) (lambda G4474 ((lambda (G4475) (if (= G4475 '0) (apply (lambda () G4470@ls) G4474) (if (= G4475 '1) (apply (lambda (G4472@x) (set! G4470@ls (G2cd1@set-cons G4472@x G4470@ls))) G4474) (error 'apply '"invalid arg count")))) (length G4474)))) '()))) (set! G2fcc@inv-collector (G28fc@G2832@make-parameter (lambda G4476@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4478@x) (begin (if (not (procedure? G4478@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4478@x) (void)) G4478@x)))) (set! G2fce@vis-collector (G28fc@G2832@make-parameter (lambda G447a@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G447c@x) (begin (if (not (procedure? G447c@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G447c@x) (void)) G447c@x)))) (set! G2fd0@imp-collector (G28fc@G2832@make-parameter (lambda G447e@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G4480@x) (begin (if (not (procedure? G4480@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G4480@x) (void)) G4480@x)))) (set! G2fd2@chi-library-internal (lambda (G4482@e* G4483@rib G4484@top?) (call-with-values (lambda () (G2fbc@chi-body* G4482@e* '() '() '() '() '() '() '() G4483@rib G4484@top?)) (lambda (G4490@G4488 G4491@G4489 G4492@G448a G4493@G448b G4494@G448c G4495@G448d G4496@G448e G4497@G448f) ((lambda (G44a0@exp* G44a1@_kwd* G44a2@mod** G44a3@rhs* G44a4@lex* G44a5@mr G44a6@r G44a7@e*) (values (append (apply append (reverse G44a2@mod**)) G44a7@e*) G44a6@r G44a5@mr (reverse G44a4@lex*) (reverse G44a3@rhs*) G44a0@exp*)) G4497@G448f G4496@G448e G4495@G448d G4494@G448c G4493@G448b G4492@G448a G4491@G4489 G4490@G4488))))) (set! G2fd4@chi-interaction-expr (lambda (G44b0@e G44b1@rib G44b2@r) (call-with-values (lambda () (G2fbc@chi-body* (list G44b0@e) G44b2@r G44b2@r '() '() '() '() '() G44b1@rib '#t)) (lambda (G44be@G44b6 G44bf@G44b7 G44c0@G44b8 G44c1@G44b9 G44c2@G44ba G44c3@G44bb G44c4@G44bc G44c5@G44bd) ((lambda (G44ce@_exp* G44cf@_kwd* G44d0@mod** G44d1@rhs* G44d2@lex* G44d3@mr G44d4@r G44d5@e*) ((lambda (G44de@e*) ((lambda (G44e0@e) (values G44e0@e G44d4@r)) (if (null? G44de@e*) (G2cbe@G2c30@build-void) (if (null? (cdr G44de@e*)) (car G44de@e*) (G2cbd@G2c2e@build-sequence '#f G44de@e*))))) (G2f91@expand-interaction-rhs*/init* (reverse G44d2@lex*) (reverse G44d1@rhs*) (append (apply append (reverse G44d0@mod**)) G44d5@e*) G44d4@r G44d3@mr))) G44c5@G44bd G44c4@G44bc G44c3@G44bb G44c2@G44ba G44c1@G44b9 G44c0@G44b8 G44bf@G44b7 G44be@G44b6))))) (set! G2fd6@library-body-expander (lambda (G44e2@name G44e3@main-exp* G44e4@imp* G44e5@b* G44e6@top?) ((lambda (G44ed@itc) (begin (set! G44ed@itc (G2fca@make-collector)) ((lambda (G44f2@G44ee G44f3@G44ef G44f4@G44f0 G44f5@G44f1) ((lambda (G44fa@swap) (dynamic-wind G44fa@swap (lambda () (call-with-values (lambda () (G2fc6@parse-import-spec* G44e4@imp*)) (lambda (G44fe@G44fc G44ff@G44fd) ((lambda (G4502@subst-labels G4503@subst-names) ((lambda (G4506@rib) ((lambda (G4509@wrap) (begin (set! G4509@wrap (lambda (G4575@x) (G2d2a@make-stx G4575@x G2cd8@top-mark* (list G4506@rib) '()))) ((lambda (G450a@b* G450b@main-exp* G450c@rtc G450d@vtc) ((lambda (G4516@G4512 G4517@G4513 G4518@G4514 G4519@G4515) ((lambda (G451e@swap) (dynamic-wind G451e@swap (lambda () (call-with-values (lambda () (G2fd2@chi-library-internal G450a@b* G4506@rib G44e6@top?)) (lambda (G4526@G4520 G4527@G4521 G4528@G4522 G4529@G4523 G452a@G4524 G452b@G4525) ((lambda (G4532@internal-exp* G4533@rhs* G4534@lex* G4535@mr G4536@r G4537@init*) (call-with-values (lambda () (G2fc0@parse-exports (append G450b@main-exp* G4532@internal-exp*))) (lambda (G4540@G453e G4541@G453f) ((lambda (G4544@exp-id* G4545@exp-name*) (begin (G2d17@seal-rib! G4506@rib) ((lambda (G4548@init*) ((lambda (G454a@rhs*) ((lambda () (begin (G2d19@unseal-rib! G4506@rib) ((lambda (G454c@loc* G454d@export-subst) ((lambda (G4551@errstr) (begin (set! G4551@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3036@make-export-env/macros G4534@lex* G454c@loc* G4536@r)) (lambda (G4555@G4552 G4556@G4553 G4557@G4554) ((lambda (G455b@macro* G455c@global* G455d@export-env) (begin (for-each (lambda (G4561@s) ((lambda (G4563@name G4564@label) ((lambda (G4567@p) (if G4567@p ((lambda (G4569@b) ((lambda (G456b@type) (if (eq? G456b@type 'mutable) (G304a@syntax-violation 'export G4551@errstr G4563@name) (void))) (car G4569@b))) (cdr G4567@p)) (void))) (assq G4564@label G455d@export-env))) (car G4561@s) (cdr G4561@s))) G454d@export-subst) ((lambda (G456d@invoke-body G456e@invoke-definitions) (values (G44ed@itc) (G450c@rtc) (G450d@vtc) (G2cbd@G2c2e@build-sequence '#f (append G456e@invoke-definitions (list G456d@invoke-body))) G455b@macro* G454d@export-subst G455d@export-env)) (G2cc0@G2c34@build-letrec* '#f G4534@lex* G454a@rhs* (G3032@build-exports G455c@global* G4548@init*)) (map G2cb9@G2b7e@build-global-define (map cdr G455c@global*))))) G4557@G4554 G4556@G4553 G4555@G4552))))) '#f)) (map G2cde@gen-global G4534@lex*) (G3034@make-export-subst G4545@exp-name* G4544@exp-id*)))))) (G2f93@chi-rhs* G4533@rhs* G4536@r G4535@mr))) (G2f7f@chi-expr* G4537@init* G4536@r G4535@mr)))) G4541@G453f G4540@G453e)))) G452b@G4525 G452a@G4524 G4529@G4523 G4528@G4522 G4527@G4521 G4526@G4520)))) G451e@swap)) (lambda () (begin ((lambda (G4571@t) (begin (G4516@G4512 G4518@G4514) (set! G4518@G4514 G4571@t))) (G4516@G4512)) ((lambda (G4573@t) (begin (G4517@G4513 G4519@G4515) (set! G4519@G4515 G4573@t))) (G4517@G4513)))))) G2fcc@inv-collector G2fce@vis-collector G450c@rtc G450d@vtc)) (map G4509@wrap G44e5@b*) (map G4509@wrap G44e3@main-exp*) (G2fca@make-collector) (G2fca@make-collector)))) '#f)) (G2fc8@make-top-rib G4503@subst-names G4502@subst-labels))) G44ff@G44fd G44fe@G44fc)))) G44fa@swap)) (lambda () (begin ((lambda (G4577@t) (begin (G44f2@G44ee G44f4@G44f0) (set! G44f4@G44f0 G4577@t))) (G44f2@G44ee)) ((lambda (G4579@t) (begin (G44f3@G44ef G44f5@G44f1) (set! G44f5@G44f1 G4579@t))) (G44f3@G44ef)))))) G2fd0@imp-collector G3058@top-level-context G44ed@itc '#f))) '#f))) (set! G2fd8@core-library-expander (lambda (G457b@e G457c@verify-name) (call-with-values (lambda () (G2fc4@parse-library G457b@e)) (lambda (G4583@G457f G4584@G4580 G4585@G4581 G4586@G4582) ((lambda (G458b@b* G458c@imp* G458d@exp* G458e@name*) (call-with-values (lambda () (G2fc2@parse-library-name G458e@name*)) (lambda (G4595@G4593 G4596@G4594) ((lambda (G4599@ver G459a@name) (begin (G457c@verify-name G459a@name) (call-with-values (lambda () (G2fd6@library-body-expander G459a@name G458d@exp* G458c@imp* G458b@b* '#f)) (lambda (G45a4@G459d G45a5@G459e G45a6@G459f G45a7@G45a0 G45a8@G45a1 G45a9@G45a2 G45aa@G45a3) ((lambda (G45b2@export-env G45b3@export-subst G45b4@visit-code G45b5@invoke-code G45b6@visit-req* G45b7@invoke-req* G45b8@imp*) (values G459a@name G4599@ver G45b8@imp* G45b7@invoke-req* G45b6@visit-req* G45b5@invoke-code G45b4@visit-code G45b3@export-subst G45b2@export-env)) G45aa@G45a3 G45a9@G45a2 G45a8@G45a1 G45a7@G45a0 G45a6@G459f G45a5@G459e G45a4@G459d))))) G4596@G4594 G4595@G4593)))) G4586@G4582 G4585@G4581 G4584@G4580 G4583@G457f))))) (set! G2fda@parse-top-level-program (lambda (G45c0@e*) ((lambda (G45c2@t) ((lambda (G45c4@ls/false) (if (and G45c4@ls/false (apply (lambda (G45c6@import G45c7@imp* G45c8@b*) (eq? (G3050@syntax->datum G45c6@import) 'import)) G45c4@ls/false)) (apply (lambda (G45cc@import G45cd@imp* G45ce@b*) (values G45cd@imp* G45ce@b*)) G45c4@ls/false) ((lambda (G45d2@t) ((lambda (G45d4@ls/false) (if (and G45d4@ls/false (apply (lambda (G45d6@import G45d7@x G45d8@y) (eq? (G3050@syntax->datum G45d6@import) 'import)) G45d4@ls/false)) (apply (lambda (G45dc@import G45dd@x G45de@y) (G304a@syntax-violation 'expander '"invalid syntax of top-level program" (G2d5a@syntax-car G45c0@e*))) G45d4@ls/false) ((lambda (G45e2@t) ((lambda (G45e4@ls/false) (if G45e4@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45e4@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G45e2@t))) (G2f5f@syntax-dispatch G45e2@t '_))) G45d2@t))) (G2f5f@syntax-dispatch G45d2@t '((any . any) . any)))) G45c2@t))) (G2f5f@syntax-dispatch G45c2@t '((any . each-any) . each-any)))) G45c0@e*))) (set! G2fdc@top-level-expander (lambda (G45e6@e*) (call-with-values (lambda () (G2fda@parse-top-level-program G45e6@e*)) (lambda (G45ea@G45e8 G45eb@G45e9) ((lambda (G45ee@b* G45ef@imp*) (call-with-values (lambda () (G2fd6@library-body-expander '() '() G45ef@imp* G45ee@b* '#t)) (lambda (G45f9@G45f2 G45fa@G45f3 G45fb@G45f4 G45fc@G45f5 G45fd@G45f6 G45fe@G45f7 G45ff@G45f8) ((lambda (G4607@export-env G4608@export-subst G4609@visit-code G460a@invoke-code G460b@visit-req* G460c@invoke-req* G460d@imp*) (values G460c@invoke-req* G460a@invoke-code)) G45ff@G45f8 G45fe@G45f7 G45fd@G45f6 G45fc@G45f5 G45fb@G45f4 G45fa@G45f3 G45f9@G45f2)))) G45eb@G45e9 G45ea@G45e8))))) (set! G2fe2@G2fdd (make-record-type-descriptor 'env '#f 'G2fe0 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2fe4@G2fdf '#f) (set! G2fe6@G2fde (make-record-constructor-descriptor G2fe2@G2fdd '#f G2fe4@G2fdf)) (set! G2fe9@env? (record-predicate G2fe2@G2fdd)) (set! G2feb@make-env (record-constructor G2fe6@G2fde)) (set! G2fed@env-names (record-accessor G2fe2@G2fdd '0)) (set! G2fef@env-labels (record-accessor G2fe2@G2fdd '1)) (set! G2ff1@env-itc (record-accessor G2fe2@G2fdd '2)) (set! G2ff3@set-env-names! (record-mutator G2fe2@G2fdd '0)) (set! G2ff5@set-env-labels! (record-mutator G2fe2@G2fdd '1)) (set! G2ff7@set-env-itc! (record-mutator G2fe2@G2fdd '2)) (set! G2ff9@rp (G28f9@G282c@make-record-printer 'env (lambda (G4615@x G4616@p G4617@wr) (display '"#<environment>" G4616@p)))) (set! G2fff@G2ffa (make-record-type-descriptor 'interaction-env '#f 'G2ffd '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3001@G2ffc '#f) (set! G3003@G2ffb (make-record-constructor-descriptor G2fff@G2ffa '#f G3001@G2ffc)) (set! G3006@interaction-env? (record-predicate G2fff@G2ffa)) (set! G3008@make-interaction-env (record-constructor G3003@G2ffb)) (set! G300a@interaction-env-rib (record-accessor G2fff@G2ffa '0)) (set! G300c@interaction-env-r (record-accessor G2fff@G2ffa '1)) (set! G300e@interaction-env-locs (record-accessor G2fff@G2ffa '2)) (set! G3010@set-interaction-env-rib! (record-mutator G2fff@G2ffa '0)) (set! G3012@set-interaction-env-r! (record-mutator G2fff@G2ffa '1)) (set! G3014@set-interaction-env-locs! (record-mutator G2fff@G2ffa '2)) (set! G3016@rp (G28f9@G282c@make-record-printer 'interaction-env (lambda (G461b@x G461c@p G461d@wr) (display '"#<environment>" G461c@p)))) (set! G3018@interaction-environment-symbols (lambda () (G3020@environment-symbols (G3056@interaction-environment)))) (set! G301a@environment-bindings (lambda (G4621@e) (vector->list (vector-map (lambda (G4623@name G4624@label) (G301c@parse-binding (cons G4623@name (G2b76@G2a1c@imported-label->binding G4624@label)))) (G2fed@env-names G4621@e) (G2fef@env-labels G4621@e))))) (set! G301c@parse-binding (lambda (G4627@b) (cons (car G4627@b) ((lambda (G4629@t) (if (memv G4629@t '(core-prim global)) 'procedure (if (memv G4629@t '(core-macro macro global-macro)) 'syntax (if (memv G4629@t '($core-rtd)) 'record (if (eq? (car G4627@b) (cadr G4627@b)) 'syntax 'unknown))))) (cadr G4627@b))))) (set! G301e@environment? (lambda (G462b@x) (or (G2fe9@env? G462b@x) (G3006@interaction-env? G462b@x)))) (set! G3020@environment-symbols (lambda (G462d@x) (if (G2fe9@env? G462d@x) (vector->list (G2fed@env-names G462d@x)) (if (G3006@interaction-env? G462d@x) (map values (G2cf7@rib-sym* (G300a@interaction-env-rib G462d@x))) (assertion-violation 'environment-symbols '"not an environment" G462d@x))))) (set! G3022@environment (lambda G462f@imp* ((lambda (G4631@itc) ((lambda (G4635@G4633 G4636@G4634) ((lambda (G4639@swap) (dynamic-wind G4639@swap (lambda () (call-with-values (lambda () (G2fc6@parse-import-spec* G462f@imp*)) (lambda (G463d@G463b G463e@G463c) ((lambda (G4641@subst-labels G4642@subst-names) (G2feb@make-env G4642@subst-names G4641@subst-labels G4631@itc)) G463e@G463c G463d@G463b)))) G4639@swap)) (lambda () ((lambda (G4645@t) (begin (G4635@G4633 G4636@G4634) (set! G4636@G4634 G4645@t))) (G4635@G4633))))) G2fd0@imp-collector G4631@itc)) (G2fca@make-collector)))) (set! G3024@null-environment (lambda (G4647@n) (begin (if (not (eqv? G4647@n '5)) (assertion-violation 'null-environment '"not 5" G4647@n) (void)) (G3022@environment '(psyntax null-environment-5))))) (set! G3026@scheme-report-environment (lambda (G4649@n) (begin (if (not (eqv? G4649@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4649@n) (void)) (G3022@environment '(psyntax scheme-report-environment-5))))) (set! G3028@expand (lambda (G464b@x G464c@env) (if (G2fe9@env? G464c@env) ((lambda (G464f@rib) ((lambda (G4651@x G4652@itc G4653@rtc G4654@vtc) ((lambda (G4659@x) (begin (G2d17@seal-rib! G464f@rib) (values G4659@x (G4653@rtc)))) ((lambda (G4663@G465b G4664@G465c G4665@G465d G4666@G465e G4667@G465f G4668@G4660 G4669@G4661 G466a@G4662) ((lambda (G4673@swap) (dynamic-wind G4673@swap (lambda () (G2f83@chi-expr G4651@x '() '())) G4673@swap)) (lambda () (begin ((lambda (G4675@t) (begin (G4663@G465b G4667@G465f) (set! G4667@G465f G4675@t))) (G4663@G465b)) ((lambda (G4677@t) (begin (G4664@G465c G4668@G4660) (set! G4668@G4660 G4677@t))) (G4664@G465c)) ((lambda (G4679@t) (begin (G4665@G465d G4669@G4661) (set! G4669@G4661 G4679@t))) (G4665@G465d)) ((lambda (G467b@t) (begin (G4666@G465e G466a@G4662) (set! G466a@G4662 G467b@t))) (G4666@G465e)))))) G3058@top-level-context G2fcc@inv-collector G2fce@vis-collector G2fd0@imp-collector '#f G4653@rtc G4654@vtc G4652@itc))) (G2d2a@make-stx G464b@x G2cd8@top-mark* (list G464f@rib) '()) (G2ff1@env-itc G464c@env) (G2fca@make-collector) (G2fca@make-collector))) (G2fc8@make-top-rib (G2fed@env-names G464c@env) (G2fef@env-labels G464c@env))) (if (G3006@interaction-env? G464c@env) ((lambda (G467d@rib G467e@r G467f@rtc) ((lambda (G4683@x) (call-with-values (lambda () ((lambda (G468f@G4687 G4690@G4688 G4691@G4689 G4692@G468a G4693@G468b G4694@G468c G4695@G468d G4696@G468e) ((lambda (G469f@swap) (dynamic-wind G469f@swap (lambda () (G2fd4@chi-interaction-expr G4683@x G467d@rib G467e@r)) G469f@swap)) (lambda () (begin ((lambda (G46a1@t) (begin (G468f@G4687 G4693@G468b) (set! G4693@G468b G46a1@t))) (G468f@G4687)) ((lambda (G46a3@t) (begin (G4690@G4688 G4694@G468c) (set! G4694@G468c G46a3@t))) (G4690@G4688)) ((lambda (G46a5@t) (begin (G4691@G4689 G4695@G468d) (set! G4695@G468d G46a5@t))) (G4691@G4689)) ((lambda (G46a7@t) (begin (G4692@G468a G4696@G468e) (set! G4696@G468e G46a7@t))) (G4692@G468a)))))) G3058@top-level-context G2fcc@inv-collector G2fce@vis-collector G2fd0@imp-collector G464c@env G467f@rtc (G2fca@make-collector) (G2fca@make-collector))) (lambda (G46a9@G4685 G46aa@G4686) ((lambda (G46ad@r^ G46ae@e) (begin (G3012@set-interaction-env-r! G464c@env G46ad@r^) (values G46ae@e (G467f@rtc)))) G46aa@G4686 G46a9@G4685)))) (G2d2a@make-stx G464b@x G2cd8@top-mark* (list G467d@rib) '()))) (G300a@interaction-env-rib G464c@env) (G300c@interaction-env-r G464c@env) (G2fca@make-collector)) (assertion-violation 'expand '"not an environment" G464c@env))))) (set! G302a@eval (lambda (G46b1@x G46b2@env) (begin (if (not (G301e@environment? G46b2@env)) (error 'eval '"not an environment" G46b2@env) (void)) (call-with-values (lambda () (G3028@expand G46b1@x G46b2@env)) (lambda (G46b7@G46b5 G46b8@G46b6) ((lambda (G46bb@invoke-req* G46bc@x) (begin (for-each G2b77@G2a1e@invoke-library G46bb@invoke-req*) (eval-core (G2950@G2908@expanded->core G46bc@x)))) G46b8@G46b6 G46b7@G46b5)))))) (set! G302c@library-expander (lambda G4724 ((lambda (G4725) (if (= G4725 '3) (apply (lambda (G46bf@x G46c0@filename G46c1@verify-name) ((lambda (G46c6@build-visit-code G46c8@visit!) (begin (set! G46c6@build-visit-code (lambda (G4712@macro*) (if (null? G4712@macro*) (G2cbe@G2c30@build-void) (G2cbd@G2c2e@build-sequence '#f (map (lambda (G4714@x) ((lambda (G4716@loc G4717@src) (list 'set! G4716@loc G4717@src)) (car G4714@x) (cddr G4714@x))) G4712@macro*))))) (set! G46c8@visit! (lambda (G470a@macro*) (for-each (lambda (G470c@x) ((lambda (G470e@loc G470f@proc) (set-symbol-value! G470e@loc G470f@proc)) (car G470c@x) (cadr G470c@x))) G470a@macro*))) (call-with-values (lambda () (G2fd8@core-library-expander G46bf@x G46c1@verify-name)) (lambda (G46d2@G46c9 G46d3@G46ca G46d4@G46cb G46d5@G46cc G46d6@G46cd G46d7@G46ce G46d8@G46cf G46d9@G46d0 G46da@G46d1) ((lambda (G46e4@export-env G46e5@export-subst G46e6@macro* G46e7@invoke-code G46e8@vis* G46e9@inv* G46ea@imp* G46eb@ver G46ec@name) ((lambda (G46f6@id G46f7@name G46f8@ver G46f9@imp* G46fa@vis* G46fb@inv* G46fc@visit-proc G46fd@invoke-proc G46fe@visit-code G46ff@invoke-code) (begin (G2b75@G2a1a@install-library G46f6@id G46f7@name G46f8@ver G46f9@imp* G46fa@vis* G46fb@inv* G46e5@export-subst G46e4@export-env G46fc@visit-proc G46fd@invoke-proc G46fe@visit-code G46ff@invoke-code '#t G46c0@filename) (values G46f6@id G46f7@name G46f8@ver G46f9@imp* G46fa@vis* G46fb@inv* G46ff@invoke-code G46fe@visit-code G46e5@export-subst G46e4@export-env))) (gensym) G46ec@name G46eb@ver (map G2b7b@G2a26@library-spec G46ea@imp*) (map G2b7b@G2a26@library-spec G46e8@vis*) (map G2b7b@G2a26@library-spec G46e9@inv*) (lambda () (G46c8@visit! G46e6@macro*)) (lambda () (eval-core (G2950@G2908@expanded->core G46e7@invoke-code))) (G46c6@build-visit-code G46e6@macro*) G46e7@invoke-code)) G46da@G46d1 G46d9@G46d0 G46d8@G46cf G46d7@G46ce G46d6@G46cd G46d5@G46cc G46d4@G46cb G46d3@G46ca G46d2@G46c9))))) '#f '#f)) G4724) (if (= G4725 '2) (apply (lambda (G471a@x G471b@filename) (G302c@library-expander G471a@x G471b@filename (lambda (G471e@x) (values)))) G4724) (if (= G4725 '1) (apply (lambda (G4720@x) (G302c@library-expander G4720@x '#f (lambda (G4722@x) (values)))) G4724) (error 'apply '"invalid arg count"))))) (length G4724)))) (set! G302e@boot-library-expand (lambda (G4726@x) (call-with-values (lambda () (G302c@library-expander G4726@x)) (lambda (G4732@G4728 G4733@G4729 G4734@G472a G4735@G472b G4736@G472c G4737@G472d G4738@G472e G4739@G472f G473a@G4730 G473b@G4731) ((lambda (G4746@export-env G4747@export-subst G4748@visit-code G4749@invoke-code G474a@inv* G474b@vis* G474c@imp* G474d@ver G474e@name G474f@id) (values G474e@name G4749@invoke-code G4747@export-subst G4746@export-env)) G473b@G4731 G473a@G4730 G4739@G472f G4738@G472e G4737@G472d G4736@G472c G4735@G472b G4734@G472a G4733@G4729 G4732@G4728))))) (set! G3030@rev-map-append (lambda (G475a@f G475b@ls G475c@ac) (if (null? G475b@ls) G475c@ac (G3030@rev-map-append G475a@f (cdr G475b@ls) (cons (G475a@f (car G475b@ls)) G475c@ac))))) (set! G3032@build-exports (lambda (G4760@lex*+loc* G4761@init*) (G2cbd@G2c2e@build-sequence '#f (cons (G2cbe@G2c30@build-void) (G3030@rev-map-append (lambda (G4764@x) (list 'set! (cdr G4764@x) (car G4764@x))) G4760@lex*+loc* G4761@init*))))) (set! G3034@make-export-subst (lambda (G4766@name* G4767@id*) (map (lambda (G476a@name G476b@id) ((lambda (G476e@label) (begin (if (not G476e@label) (G304a@syntax-violation '#f '"cannot export unbound identifier" G476b@id) (void)) (cons G476a@name G476e@label))) (G2d7a@id->label G476b@id))) G4766@name* G4767@id*))) (set! G3036@make-export-env/macros (lambda (G4770@lex* G4771@loc* G4772@r) ((lambda (G4777@lookup) (begin (set! G4777@lookup (lambda (G4794@x) ((letrec ((G4796@f (lambda (G4798@x G4799@lex* G479a@loc*) (if (pair? G4799@lex*) (if (eq? G4798@x (car G4799@lex*)) (car G479a@loc*) (G4796@f G4798@x (cdr G4799@lex*) (cdr G479a@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4796@f) G4794@x G4770@lex* G4771@loc*))) ((letrec ((G4778@f (lambda (G477a@r G477b@env G477c@global* G477d@macro*) (if (null? G477a@r) (values G477b@env G477c@global* G477d@macro*) ((lambda (G4782@x) ((lambda (G4784@label G4785@b) ((lambda (G4788@t) (if (memv G4788@t '(lexical)) ((lambda (G478a@v) ((lambda (G478c@loc G478d@type) (G4778@f (cdr G477a@r) (cons (cons* G4784@label G478d@type G478c@loc) G477b@env) (cons (cons (G2eeb@lexical-var G478a@v) G478c@loc) G477c@global*) G477d@macro*)) (G4777@lookup (G2eeb@lexical-var G478a@v)) (if (G2eed@lexical-mutable? G478a@v) 'mutable 'global))) (G2d84@binding-value G4785@b)) (if (memv G4788@t '(local-macro)) ((lambda (G4790@loc) (G4778@f (cdr G477a@r) (cons (cons* G4784@label 'global-macro G4790@loc) G477b@env) G477c@global* (cons (cons G4790@loc (G2d84@binding-value G4785@b)) G477d@macro*))) (gensym)) (if (memv G4788@t '(local-macro!)) ((lambda (G4792@loc) (G4778@f (cdr G477a@r) (cons (cons* G4784@label 'global-macro! G4792@loc) G477b@env) G477c@global* (cons (cons G4792@loc (G2d84@binding-value G4785@b)) G477d@macro*))) (gensym)) (if (memv G4788@t '($rtd $module)) (G4778@f (cdr G477a@r) (cons G4782@x G477b@env) G477c@global* G477d@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d82@binding-type G4785@b) (G2d84@binding-value G4785@b))))))) (G2d82@binding-type G4785@b))) (car G4782@x) (cdr G4782@x))) (car G477a@r)))))) G4778@f) G4772@r '() '() '()))) '#f))) (set! G3038@generate-temporaries (lambda (G479e@ls) ((lambda (G47a0@t) ((lambda (G47a2@ls/false) (if G47a2@ls/false (apply (lambda (G47a4@ls) (map (lambda (G47a6@x) (G2d2a@make-stx ((lambda (G47a8@x) (if (or (symbol? G47a8@x) (string? G47a8@x)) (gensym G47a8@x) (gensym 't))) (G3050@syntax->datum G47a6@x)) G2cd8@top-mark* '() '())) G47a4@ls)) G47a2@ls/false) ((lambda (G47aa@t) ((lambda (G47ac@ls/false) (if G47ac@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47ac@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G47aa@t))) (G2f5f@syntax-dispatch G47aa@t '_))) G47a0@t))) (G2f5f@syntax-dispatch G47a0@t 'each-any))) G479e@ls))) (set! G303a@free-identifier=? (lambda (G47ae@x G47af@y) (if (G2d60@id? G47ae@x) (if (G2d60@id? G47af@y) (G2d68@free-id=? G47ae@x G47af@y) (assertion-violation 'free-identifier=? '"not an identifier" G47af@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47ae@x)))) (set! G303c@bound-identifier=? (lambda (G47b2@x G47b3@y) (if (G2d60@id? G47b2@x) (if (G2d60@id? G47b3@y) (G2d66@bound-id=? G47b2@x G47b3@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47b3@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47b2@x)))) (set! G303e@make-source-condition (lambda (G47b6@x) ((lambda (G47c0@G47bb G47c2@G47bd G47c4@G47bc G47c7@G47ba G47c9@make-source-condition G47cb@G47b8 G47cd@G47b9 G47cf@source-condition? G47d1@source-filename G47d3@source-character) (begin (set! G47c0@G47bb (make-record-type-descriptor '&source-information G4c12@G4963@&condition-rtd 'G47be '#f '#f '#((immutable file-name) (immutable character)))) (set! G47c2@G47bd '#f) (set! G47c4@G47bc (make-record-constructor-descriptor G47c0@G47bb G4c13@G4965@&condition-rcd G47c2@G47bd)) (set! G47c7@G47ba (record-predicate G47c0@G47bb)) (set! G47c9@make-source-condition (record-constructor G47c4@G47bc)) (set! G47cb@G47b8 (record-accessor G47c0@G47bb '0)) (set! G47cd@G47b9 (record-accessor G47c0@G47bb '1)) (set! G47cf@source-condition? (condition-predicate G47c0@G47bb)) (set! G47d1@source-filename (condition-accessor G47c0@G47bb G47cb@G47b8)) (set! G47d3@source-character (condition-accessor G47c0@G47bb G47cd@G47b9)) (if (pair? G47b6@x) (G47c9@make-source-condition (car G47b6@x) (cdr G47b6@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3040@extract-position-condition (lambda (G47d4@x) (G303e@make-source-condition (G3042@expression-position G47d4@x)))) (set! G3042@expression-position (lambda (G47d6@x) (and (G2d28@stx? G47d6@x) ((lambda (G47d8@x) (and (G28f1@G281c@annotation? G47d8@x) (G28f2@G281e@annotation-source G47d8@x))) (G2d2c@stx-expr G47d6@x))))) (set! G3044@assertion-error (lambda (G47da@expr G47db@pos) (raise (condition (G4c42@G4a25@make-assertion-violation) (G4c54@G4a55@make-who-condition 'assert) (G4c18@G49b8@make-message-condition '"assertion failed") (G4c4a@G4a3b@make-irritants-condition (list G47da@expr)) (G303e@make-source-condition G47db@pos))))) (set! G3046@syntax-error (lambda (G47de@x . G47e0@args) (begin (if (not (for-all string? G47e0@args)) (assertion-violation 'syntax-error '"invalid argument" G47e0@args) (void)) (raise (condition (G4c18@G49b8@make-message-condition (if (null? G47e0@args) '"invalid syntax" (apply string-append G47e0@args))) (G4c76@G4aaf@make-syntax-violation (G3050@syntax->datum G47de@x) '#f) (G3040@extract-position-condition G47de@x)))))) (set! G3048@syntax-violation* (lambda (G47e2@who G47e3@msg G47e4@form G47e5@condition-object) (begin (if (not (string? G47e3@msg)) (assertion-violation 'syntax-violation '"message is not a string" G47e3@msg) (void)) ((lambda (G47ea@who) (raise (condition (if G47ea@who (G4c54@G4a55@make-who-condition G47ea@who) (condition)) (G4c18@G49b8@make-message-condition G47e3@msg) G47e5@condition-object (G3040@extract-position-condition G47e4@form)))) (if (or (string? G47e2@who) (symbol? G47e2@who)) G47e2@who (if (not G47e2@who) ((lambda (G47ec@t) ((lambda (G47ee@ls/false) (if (and G47ee@ls/false (apply (lambda (G47f0@id) (G2d60@id? G47f0@id)) G47ee@ls/false)) (apply (lambda (G47f2@id) (G3050@syntax->datum G47f2@id)) G47ee@ls/false) ((lambda (G47f4@t) ((lambda (G47f6@ls/false) (if (and G47f6@ls/false (apply (lambda (G47f8@id G47f9@rest) (G2d60@id? G47f8@id)) G47f6@ls/false)) (apply (lambda (G47fc@id G47fd@rest) (G3050@syntax->datum G47fc@id)) G47f6@ls/false) ((lambda (G4800@t) ((lambda (G4802@ls/false) (if G4802@ls/false (apply (lambda () '#f) G4802@ls/false) (G304a@syntax-violation '#f '"invalid syntax" G4800@t))) (G2f5f@syntax-dispatch G4800@t '_))) G47f4@t))) (G2f5f@syntax-dispatch G47f4@t '(any . any)))) G47ec@t))) (G2f5f@syntax-dispatch G47ec@t 'any))) G47e4@form) (assertion-violation 'syntax-violation '"invalid who argument" G47e2@who))))))) (set! G304a@syntax-violation (lambda G4812 ((lambda (G4813) (if (= G4813 '3) (apply (lambda (G4804@who G4805@msg G4806@form) (G304a@syntax-violation G4804@who G4805@msg G4806@form '#f)) G4812) (if (= G4813 '4) (apply (lambda (G480a@who G480b@msg G480c@form G480d@subform) (G3048@syntax-violation* G480a@who G480b@msg G480c@form (G4c76@G4aaf@make-syntax-violation (G3050@syntax->datum G480c@form) (G3050@syntax->datum G480d@subform)))) G4812) (error 'apply '"invalid arg count")))) (length G4812)))) (set! G304c@identifier? (lambda (G4814@x) (G2d60@id? G4814@x))) (set! G304e@datum->syntax (lambda (G4816@id G4817@datum) (if (G2d60@id? G4816@id) (G2d3e@datum->stx G4816@id G4817@datum) (assertion-violation 'datum->syntax '"not an identifier" G4816@id)))) (set! G3050@syntax->datum (lambda (G481a@x) (G2d76@stx->datum G481a@x))) (set! G3052@compile-r6rs-top-level (lambda (G481c@x*) (call-with-values (lambda () (G2fdc@top-level-expander G481c@x*)) (lambda (G4820@G481e G4821@G481f) ((lambda (G4824@invoke-code G4825@lib*) (lambda () (begin (for-each G2b77@G2a1e@invoke-library G4825@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G2950@G2908@expanded->core G4824@invoke-code)) (void)) (eval-core (G2950@G2908@expanded->core G4824@invoke-code))))) G4821@G481f G4820@G481e))))) (set! G3054@pre-compile-r6rs-top-level (lambda (G4828@x*) (call-with-values (lambda () (G2fdc@top-level-expander G4828@x*)) (lambda (G482c@G482a G482d@G482b) ((lambda (G4830@invoke-code G4831@lib*) (begin (for-each G2b77@G2a1e@invoke-library G4831@lib*) (G28fa@G282e@compile-core (G2950@G2908@expanded->core G4830@invoke-code)))) G482d@G482b G482c@G482a))))) (set! G3056@interaction-environment ((lambda (G4834@the-env) (lambda () (or G4834@the-env ((lambda (G4836@lib G4837@rib) (begin ((lambda (G483a@subst) (begin (G2d01@set-rib-sym*! G4837@rib (map car G483a@subst)) (G2d03@set-rib-mark**! G4837@rib (map (lambda (G483c@x) G2cd8@top-mark*) G483a@subst)) (G2d05@set-rib-label*! G4837@rib (map cdr G483a@subst)))) (G2b4c@G29c8@library-subst G4836@lib)) ((lambda (G483e@env) (begin (set! G4834@the-env G483e@env) G483e@env)) (G3008@make-interaction-env G4837@rib '() '())))) (G2b70@G2a10@find-library-by-name '(mosh interaction)) (G2d0b@make-empty-rib))))) '#f)) (set! G3058@top-level-context (G28fc@G2832@make-parameter '#f)) (begin (set! G494e@G3058@top-level-context G3058@top-level-context) (set! G494d@G3056@interaction-environment G3056@interaction-environment) (set! G494c@G3054@pre-compile-r6rs-top-level G3054@pre-compile-r6rs-top-level) (set! G494b@G3052@compile-r6rs-top-level G3052@compile-r6rs-top-level) (set! G494a@G3050@syntax->datum G3050@syntax->datum) (set! G4949@G304e@datum->syntax G304e@datum->syntax) (set! G4948@G304c@identifier? G304c@identifier?) (set! G4947@G304a@syntax-violation G304a@syntax-violation) (set! G4946@G3048@syntax-violation* G3048@syntax-violation*) (set! G4945@G3046@syntax-error G3046@syntax-error) (set! G4944@G3044@assertion-error G3044@assertion-error) (set! G4943@G3042@expression-position G3042@expression-position) (set! G4942@G3040@extract-position-condition G3040@extract-position-condition) (set! G4941@G303e@make-source-condition G303e@make-source-condition) (set! G4940@G303c@bound-identifier=? G303c@bound-identifier=?) (set! G493f@G303a@free-identifier=? G303a@free-identifier=?) (set! G493e@G3038@generate-temporaries G3038@generate-temporaries) (set! G493d@G3036@make-export-env/macros G3036@make-export-env/macros) (set! G493c@G3034@make-export-subst G3034@make-export-subst) (set! G493b@G3032@build-exports G3032@build-exports) (set! G493a@G3030@rev-map-append G3030@rev-map-append) (set! G4939@G302e@boot-library-expand G302e@boot-library-expand) (set! G4938@G302c@library-expander G302c@library-expander) (set! G4937@G302a@eval G302a@eval) (set! G4936@G3028@expand G3028@expand) (set! G4935@G3026@scheme-report-environment G3026@scheme-report-environment) (set! G4934@G3024@null-environment G3024@null-environment) (set! G4933@G3022@environment G3022@environment) (set! G4932@G3020@environment-symbols G3020@environment-symbols) (set! G4931@G301e@environment? G301e@environment?) (set! G4930@G301c@parse-binding G301c@parse-binding) (set! G492f@G301a@environment-bindings G301a@environment-bindings) (set! G492e@G3018@interaction-environment-symbols G3018@interaction-environment-symbols) (set! G492d@G3016@rp G3016@rp) (set! G492c@G3014@set-interaction-env-locs! G3014@set-interaction-env-locs!) (set! G492b@G3012@set-interaction-env-r! G3012@set-interaction-env-r!) (set! G492a@G3010@set-interaction-env-rib! G3010@set-interaction-env-rib!) (set! G4929@G300e@interaction-env-locs G300e@interaction-env-locs) (set! G4928@G300c@interaction-env-r G300c@interaction-env-r) (set! G4927@G300a@interaction-env-rib G300a@interaction-env-rib) (set! G4926@G3008@make-interaction-env G3008@make-interaction-env) (set! G4925@G3006@interaction-env? G3006@interaction-env?) (set! G4924@G3003@G2ffb G3003@G2ffb) (set! G4923@G3001@G2ffc G3001@G2ffc) (set! G4922@G2fff@G2ffa G2fff@G2ffa) (set! G4921@G2ff9@rp G2ff9@rp) (set! G4920@G2ff7@set-env-itc! G2ff7@set-env-itc!) (set! G491f@G2ff5@set-env-labels! G2ff5@set-env-labels!) (set! G491e@G2ff3@set-env-names! G2ff3@set-env-names!) (set! G491d@G2ff1@env-itc G2ff1@env-itc) (set! G491c@G2fef@env-labels G2fef@env-labels) (set! G491b@G2fed@env-names G2fed@env-names) (set! G491a@G2feb@make-env G2feb@make-env) (set! G4919@G2fe9@env? G2fe9@env?) (set! G4918@G2fe6@G2fde G2fe6@G2fde) (set! G4917@G2fe4@G2fdf G2fe4@G2fdf) (set! G4916@G2fe2@G2fdd G2fe2@G2fdd) (set! G4915@G2fdc@top-level-expander G2fdc@top-level-expander) (set! G4914@G2fda@parse-top-level-program G2fda@parse-top-level-program) (set! G4913@G2fd8@core-library-expander G2fd8@core-library-expander) (set! G4912@G2fd6@library-body-expander G2fd6@library-body-expander) (set! G4911@G2fd4@chi-interaction-expr G2fd4@chi-interaction-expr) (set! G4910@G2fd2@chi-library-internal G2fd2@chi-library-internal) (set! G490f@G2fd0@imp-collector G2fd0@imp-collector) (set! G490e@G2fce@vis-collector G2fce@vis-collector) (set! G490d@G2fcc@inv-collector G2fcc@inv-collector) (set! G490c@G2fca@make-collector G2fca@make-collector) (set! G490b@G2fc8@make-top-rib G2fc8@make-top-rib) (set! G490a@G2fc6@parse-import-spec* G2fc6@parse-import-spec*) (set! G4909@G2fc4@parse-library G2fc4@parse-library) (set! G4908@G2fc2@parse-library-name G2fc2@parse-library-name) (set! G4907@G2fc0@parse-exports G2fc0@parse-exports) (set! G4906@G2fbe@expand-transformer G2fbe@expand-transformer) (set! G4905@G2fbc@chi-body* G2fbc@chi-body*) (set! G4904@G2fba@chi-internal-module G2fba@chi-internal-module) (set! G4903@G2fb8@module-interface-exp-id* G2fb8@module-interface-exp-id*) (set! G4902@G2fb6@set-module-interface-exp-lab-vec! G2fb6@set-module-interface-exp-lab-vec!) (set! G4901@G2fb4@set-module-interface-exp-id-vec! G2fb4@set-module-interface-exp-id-vec!) (set! G4900@G2fb2@set-module-interface-first-mark! G2fb2@set-module-interface-first-mark!) (set! G48ff@G2fb0@module-interface-exp-lab-vec G2fb0@module-interface-exp-lab-vec) (set! G48fe@G2fae@module-interface-exp-id-vec G2fae@module-interface-exp-id-vec) (set! G48fd@G2fac@module-interface-first-mark G2fac@module-interface-first-mark) (set! G48fc@G2faa@make-module-interface G2faa@make-module-interface) (set! G48fb@G2fa8@module-interface? G2fa8@module-interface?) (set! G48fa@G2fa5@G2f9d G2fa5@G2f9d) (set! G48f9@G2fa3@G2f9e G2fa3@G2f9e) (set! G48f8@G2fa1@G2f9c G2fa1@G2f9c) (set! G48f7@G2f9b@parse-module G2f9b@parse-module) (set! G48f6@G2f99@chi-internal G2f99@chi-internal) (set! G48f5@G2f97@find-dups G2f97@find-dups) (set! G48f4@G2f95@find-bound=? G2f95@find-bound=?) (set! G48f3@G2f93@chi-rhs* G2f93@chi-rhs*) (set! G48f2@G2f91@expand-interaction-rhs*/init* G2f91@expand-interaction-rhs*/init*) (set! G48f1@G2f8f@chi-rhs G2f8f@chi-rhs) (set! G48f0@G2f8d@chi-defun G2f8d@chi-defun) (set! G48ef@G2f8b@chi-lambda-clause* G2f8b@chi-lambda-clause*) (set! G48ee@G2f89@chi-lambda-clause G2f89@chi-lambda-clause) (set! G48ed@G2f87@verify-formals G2f87@verify-formals) (set! G48ec@G2f85@chi-set! G2f85@chi-set!) (set! G48eb@G2f83@chi-expr G2f83@chi-expr) (set! G48ea@G2f81@chi-application G2f81@chi-application) (set! G48e9@G2f7f@chi-expr* G2f7f@chi-expr*) (set! G48e8@G2f7d@chi-global-macro G2f7d@chi-global-macro) (set! G48e7@G2f7b@chi-local-macro G2f7b@chi-local-macro) (set! G48e6@G2f79@chi-macro G2f79@chi-macro) (set! G48e5@G2f77@do-macro-call G2f77@do-macro-call) (set! G48e4@G2f75@local-macro-transformer G2f75@local-macro-transformer) (set! G48e3@G2f73@macro-transformer G2f73@macro-transformer) (set! G48e2@G2f71@symbol-macro G2f71@symbol-macro) (set! G48e1@G2f6f@file-options-macro G2f6f@file-options-macro) (set! G48e0@G2f6d@core-macro-transformer G2f6d@core-macro-transformer) (set! G48df@G2f6b@syntax-transformer G2f6b@syntax-transformer) (set! G48de@G2f69@ellipsis-map G2f69@ellipsis-map) (set! G48dd@G2f67@syntax-case-transformer G2f67@syntax-case-transformer) (set! G48dc@G2f65@verify-literals G2f65@verify-literals) (set! G48db@G2f63@underscore? G2f63@underscore?) (set! G48da@G2f61@ellipsis? G2f61@ellipsis?) (set! G48d9@G2f5f@syntax-dispatch G2f5f@syntax-dispatch) (set! G48d8@G2f5d@convert-pattern G2f5d@convert-pattern) (set! G48d7@G2f5b@foreign-call-transformer G2f5b@foreign-call-transformer) (set! G48d6@G2f59@parameterize-macro G2f59@parameterize-macro) (set! G48d5@G2f57@incorrect-usage-macro G2f57@incorrect-usage-macro) (set! G48d4@G2f55@define-condition-type-macro G2f55@define-condition-type-macro) (set! G48d3@G2f53@define-record-type-macro G2f53@define-record-type-macro) (set! G48d2@G2f51@define-struct-macro G2f51@define-struct-macro) (set! G48d1@G2f4f@quasisyntax-macro G2f4f@quasisyntax-macro) (set! G48d0@G2f4d@quasiquote-macro G2f4d@quasiquote-macro) (set! G48cf@G2f4b@syntax-rules-macro G2f4b@syntax-rules-macro) (set! G48ce@G2f49@include-into-macro G2f49@include-into-macro) (set! G48cd@G2f47@include-macro G2f47@include-macro) (set! G48cc@G2f45@do-include G2f45@do-include) (set! G48cb@G2f43@cond-macro G2f43@cond-macro) (set! G48ca@G2f41@and-macro G2f41@and-macro) (set! G48c9@G2f3f@or-macro G2f3f@or-macro) (set! G48c8@G2f3d@let*-macro G2f3d@let*-macro) (set! G48c7@G2f3b@do-macro G2f3b@do-macro) (set! G48c6@G2f39@identifier-syntax-macro G2f39@identifier-syntax-macro) (set! G48c5@G2f37@endianness-macro G2f37@endianness-macro) (set! G48c4@G2f35@assert-macro G2f35@assert-macro) (set! G48c3@G2f33@delay-macro G2f33@delay-macro) (set! G48c2@G2f31@time-macro G2f31@time-macro) (set! G48c1@G2f2f@define-enumeration-macro G2f2f@define-enumeration-macro) (set! G48c0@G2f2d@guard-macro G2f2d@guard-macro) (set! G48bf@G2f2b@trace-letrec-syntax-macro G2f2b@trace-letrec-syntax-macro) (set! G48be@G2f29@trace-let-syntax-macro G2f29@trace-let-syntax-macro) (set! G48bd@G2f27@trace-let/rec-syntax G2f27@trace-let/rec-syntax) (set! G48bc@G2f25@trace-define-syntax-macro G2f25@trace-define-syntax-macro) (set! G48bb@G2f23@trace-define-macro G2f23@trace-define-macro) (set! G48ba@G2f21@trace-lambda-macro G2f21@trace-lambda-macro) (set! G48b9@G2f1f@let*-values-macro G2f1f@let*-values-macro) (set! G48b8@G2f1d@let-values-macro G2f1d@let-values-macro) (set! G48b7@G2f1b@let-macro G2f1b@let-macro) (set! G48b6@G2f19@invalid-fmls-error G2f19@invalid-fmls-error) (set! G48b5@G2f17@with-syntax-macro G2f17@with-syntax-macro) (set! G48b4@G2f15@bless G2f15@bless) (set! G48b3@G2f13@lambda-transformer G2f13@lambda-transformer) (set! G48b2@G2f11@case-lambda-transformer G2f11@case-lambda-transformer) (set! G48b1@G2f0f@quote-transformer G2f0f@quote-transformer) (set! G48b0@G2f0d@case-macro G2f0d@case-macro) (set! G48af@G2f0b@or-transformer G2f0b@or-transformer) (set! G48ae@G2f09@and-transformer G2f09@and-transformer) (set! G48ad@G2f07@if-transformer G2f07@if-transformer) (set! G48ac@G2f05@unless-macro G2f05@unless-macro) (set! G48ab@G2f03@when-macro G2f03@when-macro) (set! G48aa@G2f01@record-constructor-descriptor-transformer G2f01@record-constructor-descriptor-transformer) (set! G48a9@G2eff@record-type-descriptor-transformer G2eff@record-type-descriptor-transformer) (set! G48a8@G2efd@type-descriptor-transformer G2efd@type-descriptor-transformer) (set! G48a7@G2efb@fluid-let-syntax-transformer G2efb@fluid-let-syntax-transformer) (set! G48a6@G2ef9@letrec*-transformer G2ef9@letrec*-transformer) (set! G48a5@G2ef7@letrec-transformer G2ef7@letrec-transformer) (set! G48a4@G2ef5@letrec-helper G2ef5@letrec-helper) (set! G48a3@G2ef3@add-lexicals G2ef3@add-lexicals) (set! G48a2@G2ef1@add-lexical G2ef1@add-lexical) (set! G48a1@G2eef@set-lexical-mutable! G2eef@set-lexical-mutable!) (set! G48a0@G2eed@lexical-mutable? G2eed@lexical-mutable?) (set! G489f@G2eeb@lexical-var G2eeb@lexical-var) (set! G489e@G2ee9@scheme-stx G2ee9@scheme-stx) (set! G489d@G2ee7@scheme-stx-hashtable G2ee7@scheme-stx-hashtable) (set! G489c@G2ee5@parse-define-syntax G2ee5@parse-define-syntax) (set! G489b@G2ee3@parse-define G2ee3@parse-define) (set! G489a@G2da0@make-eval-transformer G2da0@make-eval-transformer) (set! G4899@G2d9e@variable-transformer-procedure G2d9e@variable-transformer-procedure) (set! G4898@G2d9c@variable-transformer? G2d9c@variable-transformer?) (set! G4897@G2d9a@make-variable-transformer G2d9a@make-variable-transformer) (set! G4896@G2d98@sanitize-binding G2d98@sanitize-binding) (set! G4895@G2d88@syntax-type G2d88@syntax-type) (set! G4894@G2d86@raise-unbound-error G2d86@raise-unbound-error) (set! G4893@G2d84@binding-value G2d84@binding-value) (set! G4892@G2d82@binding-type G2d82@binding-type) (set! G4891@G2d80@make-binding G2d80@make-binding) (set! G4890@G2d7e@label->binding G2d7e@label->binding) (set! G488f@G2d7c@id->real-label G2d7c@id->real-label) (set! G488e@G2d7a@id->label G2d7a@id->label) (set! G488d@G2d78@same-marks*? G2d78@same-marks*?) (set! G488c@G2d76@stx->datum G2d76@stx->datum) (set! G488b@G2d74@strip G2d74@strip) (set! G488a@G2d72@strip-annotations G2d72@strip-annotations) (set! G4889@G2d70@self-evaluating? G2d70@self-evaluating?) (set! G4888@G2d6e@bound-id-member? G2d6e@bound-id-member?) (set! G4887@G2d6c@distinct-bound-ids? G2d6c@distinct-bound-ids?) (set! G4886@G2d6a@valid-bound-ids? G2d6a@valid-bound-ids?) (set! G4885@G2d68@free-id=? G2d68@free-id=?) (set! G4884@G2d66@bound-id=? G2d66@bound-id=?) (set! G4883@G2d64@same-marks? G2d64@same-marks?) (set! G4882@G2d62@id->sym G2d62@id->sym) (set! G4881@G2d60@id? G2d60@id?) (set! G4880@G2d5e@syntax->list G2d5e@syntax->list) (set! G487f@G2d5c@syntax-cdr G2d5c@syntax-cdr) (set! G487e@G2d5a@syntax-car G2d5a@syntax-car) (set! G487d@G2d58@syntax-list? G2d58@syntax-list?) (set! G487c@G2d56@syntax-null? G2d56@syntax-null?) (set! G487b@G2d54@syntax-vector? G2d54@syntax-vector?) (set! G487a@G2d52@syntax-pair? G2d52@syntax-pair?) (set! G4879@G2d50@syntax-vector->list G2d50@syntax-vector->list) (set! G4878@G2d4e@syntax-kind? G2d4e@syntax-kind?) (set! G4877@G2d4c@add-subst G2d4c@add-subst) (set! G4876@G2d4a@add-mark G2d4a@add-mark) (set! G4875@G2d48@mkstx G2d48@mkstx) (set! G4874@G2d46@join-wraps G2d46@join-wraps) (set! G4873@G2d44@anti-mark? G2d44@anti-mark?) (set! G4872@G2d42@anti-mark G2d42@anti-mark) (set! G4871@G2d40@gen-mark G2d40@gen-mark) (set! G4870@G2d3e@datum->stx G2d3e@datum->stx) (set! G486f@G2d3c@rp G2d3c@rp) (set! G486e@G2d3a@set-stx-ae*! G2d3a@set-stx-ae*!) (set! G486d@G2d38@set-stx-subst*! G2d38@set-stx-subst*!) (set! G486c@G2d36@set-stx-mark*! G2d36@set-stx-mark*!) (set! G486b@G2d34@set-stx-expr! G2d34@set-stx-expr!) (set! G486a@G2d32@stx-ae* G2d32@stx-ae*) (set! G4869@G2d30@stx-subst* G2d30@stx-subst*) (set! G4868@G2d2e@stx-mark* G2d2e@stx-mark*) (set! G4867@G2d2c@stx-expr G2d2c@stx-expr) (set! G4866@G2d2a@make-stx G2d2a@make-stx) (set! G4865@G2d28@stx? G2d28@stx?) (set! G4864@G2d25@G2d1d G2d25@G2d1d) (set! G4863@G2d23@G2d1e G2d23@G2d1e) (set! G4862@G2d21@G2d1c G2d21@G2d1c) (set! G4861@G2d1b@make-full-rib G2d1b@make-full-rib) (set! G4860@G2d19@unseal-rib! G2d19@unseal-rib!) (set! G485f@G2d17@seal-rib! G2d17@seal-rib!) (set! G485e@G2d15@make-rib-map G2d15@make-rib-map) (set! G485d@G2d13@extend-rib/nc! G2d13@extend-rib/nc!) (set! G485c@G2d11@extend-rib! G2d11@extend-rib!) (set! G485b@G2d0f@find-label G2d0f@find-label) (set! G485a@G2d0d@make-cache-rib G2d0d@make-cache-rib) (set! G4859@G2d0b@make-empty-rib G2d0b@make-empty-rib) (set! G4858@G2d09@set-rib-cache! G2d09@set-rib-cache!) (set! G4857@G2d07@set-rib-sealed/freq! G2d07@set-rib-sealed/freq!) (set! G4856@G2d05@set-rib-label*! G2d05@set-rib-label*!) (set! G4855@G2d03@set-rib-mark**! G2d03@set-rib-mark**!) (set! G4854@G2d01@set-rib-sym*! G2d01@set-rib-sym*!) (set! G4853@G2cff@rib-cache G2cff@rib-cache) (set! G4852@G2cfd@rib-sealed/freq G2cfd@rib-sealed/freq) (set! G4851@G2cfb@rib-label* G2cfb@rib-label*) (set! G4850@G2cf9@rib-mark** G2cf9@rib-mark**) (set! G484f@G2cf7@rib-sym* G2cf7@rib-sym*) (set! G484e@G2cf5@make-rib G2cf5@make-rib) (set! G484d@G2cf3@rib? G2cf3@rib?) (set! G484c@G2cf0@G2ce8 G2cf0@G2ce8) (set! G484b@G2cee@G2ce9 G2cee@G2ce9) (set! G484a@G2cec@G2ce7 G2cec@G2ce7) (set! G4849@G2ce6@gen-define-label G2ce6@gen-define-label) (set! G4848@G2ce4@gen-define-label+loc G2ce4@gen-define-label+loc) (set! G4847@G2ce2@gen-top-level-label G2ce2@gen-top-level-label) (set! G4846@G2ce0@gen-label G2ce0@gen-label) (set! G4845@G2cde@gen-global G2cde@gen-global) (set! G4844@G2cdc@gen-lexical G2cdc@gen-lexical) (set! G4843@G2cda@top-marked? G2cda@top-marked?) (set! G4842@G2cd8@top-mark* G2cd8@top-mark*) (set! G4841@G2cd3@set-union G2cd3@set-union) (set! G4840@G2cd1@set-cons G2cd1@set-cons) (G2b6d@G2a0a@current-library-expander G302c@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4958@G4953 G495a@G4955 G495c@G4954 G495f@&condition? G4961@make-&condition G4963@&condition-rtd G4965@&condition-rcd G49af@G49aa G49b1@G49ac G49b3@G49ab G49b6@p? G49b8@make-message-condition G49ba@G49a9 G49bc@message-condition? G49be@condition-message G49c0@&message-rtd G49c2@&message-rcd G49c8@G49c3 G49ca@G49c5 G49cc@G49c4 G49cf@p? G49d1@make-warning G49d3@warning? G49d5@&warning-rtd G49d7@&warning-rcd G49dd@G49d8 G49df@G49da G49e1@G49d9 G49e4@p? G49e6@make-serious-condition G49e8@serious-condition? G49ea@&serious-rtd G49ec@&serious-rcd G49f2@G49ed G49f4@G49ef G49f6@G49ee G49f9@p? G49fb@make-error G49fd@error? G49ff@&error-rtd G4a01@&error-rcd G4a07@G4a02 G4a09@G4a04 G4a0b@G4a03 G4a0e@p? G4a10@make-violation G4a12@violation? G4a14@&violation-rtd G4a16@&violation-rcd G4a1c@G4a17 G4a1e@G4a19 G4a20@G4a18 G4a23@p? G4a25@make-assertion-violation G4a27@assertion-violation? G4a29@&assertion-rtd G4a2b@&assertion-rcd G4a32@G4a2d G4a34@G4a2f G4a36@G4a2e G4a39@p? G4a3b@make-irritants-condition G4a3d@G4a2c G4a3f@irritants-condition? G4a41@condition-irritants G4a43@&irritants-rtd G4a45@&irritants-rcd G4a4c@G4a47 G4a4e@G4a49 G4a50@G4a48 G4a53@p? G4a55@make-who-condition G4a57@G4a46 G4a59@who-condition? G4a5b@condition-who G4a5d@&who-rtd G4a5f@&who-rcd G4a65@G4a60 G4a67@G4a62 G4a69@G4a61 G4a6c@p? G4a6e@make-non-continuable-violation G4a70@non-continuable-violation? G4a72@&non-continuable-rtd G4a74@&non-continuable-rcd G4a7a@G4a75 G4a7c@G4a77 G4a7e@G4a76 G4a81@p? G4a83@make-implementation-restriction-violation G4a85@implementation-restriction-violation? G4a87@&implementation-restriction-rtd G4a89@&implementation-restriction-rcd G4a8f@G4a8a G4a91@G4a8c G4a93@G4a8b G4a96@p? G4a98@make-lexical-violation G4a9a@lexical-violation? G4a9c@&lexical-rtd G4a9e@&lexical-rcd G4aa6@G4aa1 G4aa8@G4aa3 G4aaa@G4aa2 G4aad@p? G4aaf@make-syntax-violation G4ab1@G4a9f G4ab3@G4aa0 G4ab5@syntax-violation? G4ab7@syntax-violation-form G4ab9@syntax-violation-subform G4abb@&syntax-rtd G4abd@&syntax-rcd G4ac3@G4abe G4ac5@G4ac0 G4ac7@G4abf G4aca@p? G4acc@make-undefined-violation G4ace@undefined-violation? G4ad0@&undefined-rtd G4ad2@&undefined-rcd G4ad8@G4ad3 G4ada@G4ad5 G4adc@G4ad4 G4adf@p? G4ae1@make-i/o-error G4ae3@i/o-error? G4ae5@&i/o-rtd G4ae7@&i/o-rcd G4aed@G4ae8 G4aef@G4aea G4af1@G4ae9 G4af4@p? G4af6@make-i/o-read-error G4af8@i/o-read-error? G4afa@&i/o-read-rtd G4afc@&i/o-read-rcd G4b02@G4afd G4b04@G4aff G4b06@G4afe G4b09@p? G4b0b@make-i/o-write-error G4b0d@i/o-write-error? G4b0f@&i/o-write-rtd G4b11@&i/o-write-rcd G4b18@G4b13 G4b1a@G4b15 G4b1c@G4b14 G4b1f@p? G4b21@make-i/o-invalid-position-error G4b23@G4b12 G4b25@i/o-invalid-position-error? G4b27@i/o-error-position G4b29@&i/o-invalid-position-rtd G4b2b@&i/o-invalid-position-rcd G4b32@G4b2d G4b34@G4b2f G4b36@G4b2e G4b39@p? G4b3b@make-i/o-filename-error G4b3d@G4b2c G4b3f@i/o-filename-error? G4b41@i/o-error-filename G4b43@&i/o-filename-rtd G4b45@&i/o-filename-rcd G4b4b@G4b46 G4b4d@G4b48 G4b4f@G4b47 G4b52@p? G4b54@make-i/o-file-protection-error G4b56@i/o-file-protection-error? G4b58@&i/o-file-protection-rtd G4b5a@&i/o-file-protection-rcd G4b60@G4b5b G4b62@G4b5d G4b64@G4b5c G4b67@p? G4b69@make-i/o-file-is-read-only-error G4b6b@i/o-file-is-read-only-error? G4b6d@&i/o-file-is-read-only-rtd G4b6f@&i/o-file-is-read-only-rcd G4b75@G4b70 G4b77@G4b72 G4b79@G4b71 G4b7c@p? G4b7e@make-i/o-file-already-exists-error G4b80@i/o-file-already-exists-error? G4b82@&i/o-file-already-exists-rtd G4b84@&i/o-file-already-exists-rcd G4b8a@G4b85 G4b8c@G4b87 G4b8e@G4b86 G4b91@p? G4b93@make-i/o-file-does-not-exist-error G4b95@i/o-file-does-not-exist-error? G4b97@&i/o-file-does-not-exist-rtd G4b99@&i/o-file-does-not-exist-rcd G4ba0@G4b9b G4ba2@G4b9d G4ba4@G4b9c G4ba7@p? G4ba9@make-i/o-port-error G4bab@G4b9a G4bad@i/o-port-error? G4baf@i/o-error-port G4bb1@&i/o-port-rtd G4bb3@&i/o-port-rcd G4bb9@G4bb4 G4bbb@G4bb6 G4bbd@G4bb5 G4bc0@p? G4bc2@make-i/o-decoding-error G4bc4@i/o-decoding-error? G4bc6@&i/o-decoding-rtd G4bc8@&i/o-decoding-rcd G4bcf@G4bca G4bd1@G4bcc G4bd3@G4bcb G4bd6@p? G4bd8@make-i/o-encoding-error G4bda@G4bc9 G4bdc@i/o-encoding-error? G4bde@i/o-encoding-error-char G4be0@&i/o-encoding-rtd G4be2@&i/o-encoding-rcd G4be8@G4be3 G4bea@G4be5 G4bec@G4be4 G4bef@p? G4bf1@make-no-infinities-violation G4bf3@no-infinities-violation? G4bf5@&no-infinities-rtd G4bf7@&no-infinities-rcd G4bfd@G4bf8 G4bff@G4bfa G4c01@G4bf9 G4c04@p? G4c06@make-no-nans-violation G4c08@no-nans-violation? G4c0a@&no-nans-rtd G4c0c@&no-nans-rcd) (begin (set! G4958@G4953 (make-record-type-descriptor '&condition '#f 'G4956 '#f '#f '#())) (set! G495a@G4955 '#f) (set! G495c@G4954 (make-record-constructor-descriptor G4958@G4953 '#f G495a@G4955)) (set! G495f@&condition? (record-predicate G4958@G4953)) (set! G4961@make-&condition (record-constructor G495c@G4954)) (set! G4963@&condition-rtd G4958@G4953) (set! G4965@&condition-rcd G495c@G4954) (set! G49af@G49aa (make-record-type-descriptor '&message G4958@G4953 'G49ad '#f '#f '#((immutable message)))) (set! G49b1@G49ac '#f) (set! G49b3@G49ab (make-record-constructor-descriptor G49af@G49aa G495c@G4954 G49b1@G49ac)) (set! G49b6@p? (record-predicate G49af@G49aa)) (set! G49b8@make-message-condition (record-constructor G49b3@G49ab)) (set! G49ba@G49a9 (record-accessor G49af@G49aa '0)) (set! G49bc@message-condition? (condition-predicate G49af@G49aa)) (set! G49be@condition-message (condition-accessor G49af@G49aa G49ba@G49a9)) (set! G49c0@&message-rtd G49af@G49aa) (set! G49c2@&message-rcd G49b3@G49ab) (set! G49c8@G49c3 (make-record-type-descriptor '&warning G4958@G4953 'G49c6 '#f '#f '#())) (set! G49ca@G49c5 '#f) (set! G49cc@G49c4 (make-record-constructor-descriptor G49c8@G49c3 G495c@G4954 G49ca@G49c5)) (set! G49cf@p? (record-predicate G49c8@G49c3)) (set! G49d1@make-warning (record-constructor G49cc@G49c4)) (set! G49d3@warning? (condition-predicate G49c8@G49c3)) (set! G49d5@&warning-rtd G49c8@G49c3) (set! G49d7@&warning-rcd G49cc@G49c4) (set! G49dd@G49d8 (make-record-type-descriptor '&serious G4958@G4953 'G49db '#f '#f '#())) (set! G49df@G49da '#f) (set! G49e1@G49d9 (make-record-constructor-descriptor G49dd@G49d8 G495c@G4954 G49df@G49da)) (set! G49e4@p? (record-predicate G49dd@G49d8)) (set! G49e6@make-serious-condition (record-constructor G49e1@G49d9)) (set! G49e8@serious-condition? (condition-predicate G49dd@G49d8)) (set! G49ea@&serious-rtd G49dd@G49d8) (set! G49ec@&serious-rcd G49e1@G49d9) (set! G49f2@G49ed (make-record-type-descriptor '&error G49dd@G49d8 'G49f0 '#f '#f '#())) (set! G49f4@G49ef '#f) (set! G49f6@G49ee (make-record-constructor-descriptor G49f2@G49ed G49e1@G49d9 G49f4@G49ef)) (set! G49f9@p? (record-predicate G49f2@G49ed)) (set! G49fb@make-error (record-constructor G49f6@G49ee)) (set! G49fd@error? (condition-predicate G49f2@G49ed)) (set! G49ff@&error-rtd G49f2@G49ed) (set! G4a01@&error-rcd G49f6@G49ee) (set! G4a07@G4a02 (make-record-type-descriptor '&violation G49dd@G49d8 'G4a05 '#f '#f '#())) (set! G4a09@G4a04 '#f) (set! G4a0b@G4a03 (make-record-constructor-descriptor G4a07@G4a02 G49e1@G49d9 G4a09@G4a04)) (set! G4a0e@p? (record-predicate G4a07@G4a02)) (set! G4a10@make-violation (record-constructor G4a0b@G4a03)) (set! G4a12@violation? (condition-predicate G4a07@G4a02)) (set! G4a14@&violation-rtd G4a07@G4a02) (set! G4a16@&violation-rcd G4a0b@G4a03) (set! G4a1c@G4a17 (make-record-type-descriptor '&assertion G4a07@G4a02 'G4a1a '#f '#f '#())) (set! G4a1e@G4a19 '#f) (set! G4a20@G4a18 (make-record-constructor-descriptor G4a1c@G4a17 G4a0b@G4a03 G4a1e@G4a19)) (set! G4a23@p? (record-predicate G4a1c@G4a17)) (set! G4a25@make-assertion-violation (record-constructor G4a20@G4a18)) (set! G4a27@assertion-violation? (condition-predicate G4a1c@G4a17)) (set! G4a29@&assertion-rtd G4a1c@G4a17) (set! G4a2b@&assertion-rcd G4a20@G4a18) (set! G4a32@G4a2d (make-record-type-descriptor '&irritants G4958@G4953 'G4a30 '#f '#f '#((immutable irritants)))) (set! G4a34@G4a2f '#f) (set! G4a36@G4a2e (make-record-constructor-descriptor G4a32@G4a2d G495c@G4954 G4a34@G4a2f)) (set! G4a39@p? (record-predicate G4a32@G4a2d)) (set! G4a3b@make-irritants-condition (record-constructor G4a36@G4a2e)) (set! G4a3d@G4a2c (record-accessor G4a32@G4a2d '0)) (set! G4a3f@irritants-condition? (condition-predicate G4a32@G4a2d)) (set! G4a41@condition-irritants (condition-accessor G4a32@G4a2d G4a3d@G4a2c)) (set! G4a43@&irritants-rtd G4a32@G4a2d) (set! G4a45@&irritants-rcd G4a36@G4a2e) (set! G4a4c@G4a47 (make-record-type-descriptor '&who G4958@G4953 'G4a4a '#f '#f '#((immutable who)))) (set! G4a4e@G4a49 '#f) (set! G4a50@G4a48 (make-record-constructor-descriptor G4a4c@G4a47 G495c@G4954 G4a4e@G4a49)) (set! G4a53@p? (record-predicate G4a4c@G4a47)) (set! G4a55@make-who-condition (record-constructor G4a50@G4a48)) (set! G4a57@G4a46 (record-accessor G4a4c@G4a47 '0)) (set! G4a59@who-condition? (condition-predicate G4a4c@G4a47)) (set! G4a5b@condition-who (condition-accessor G4a4c@G4a47 G4a57@G4a46)) (set! G4a5d@&who-rtd G4a4c@G4a47) (set! G4a5f@&who-rcd G4a50@G4a48) (set! G4a65@G4a60 (make-record-type-descriptor '&non-continuable G4a07@G4a02 'G4a63 '#f '#f '#())) (set! G4a67@G4a62 '#f) (set! G4a69@G4a61 (make-record-constructor-descriptor G4a65@G4a60 G4a0b@G4a03 G4a67@G4a62)) (set! G4a6c@p? (record-predicate G4a65@G4a60)) (set! G4a6e@make-non-continuable-violation (record-constructor G4a69@G4a61)) (set! G4a70@non-continuable-violation? (condition-predicate G4a65@G4a60)) (set! G4a72@&non-continuable-rtd G4a65@G4a60) (set! G4a74@&non-continuable-rcd G4a69@G4a61) (set! G4a7a@G4a75 (make-record-type-descriptor '&implementation-restriction G4a07@G4a02 'G4a78 '#f '#f '#())) (set! G4a7c@G4a77 '#f) (set! G4a7e@G4a76 (make-record-constructor-descriptor G4a7a@G4a75 G4a0b@G4a03 G4a7c@G4a77)) (set! G4a81@p? (record-predicate G4a7a@G4a75)) (set! G4a83@make-implementation-restriction-violation (record-constructor G4a7e@G4a76)) (set! G4a85@implementation-restriction-violation? (condition-predicate G4a7a@G4a75)) (set! G4a87@&implementation-restriction-rtd G4a7a@G4a75) (set! G4a89@&implementation-restriction-rcd G4a7e@G4a76) (set! G4a8f@G4a8a (make-record-type-descriptor '&lexical G4a07@G4a02 'G4a8d '#f '#f '#())) (set! G4a91@G4a8c '#f) (set! G4a93@G4a8b (make-record-constructor-descriptor G4a8f@G4a8a G4a0b@G4a03 G4a91@G4a8c)) (set! G4a96@p? (record-predicate G4a8f@G4a8a)) (set! G4a98@make-lexical-violation (record-constructor G4a93@G4a8b)) (set! G4a9a@lexical-violation? (condition-predicate G4a8f@G4a8a)) (set! G4a9c@&lexical-rtd G4a8f@G4a8a) (set! G4a9e@&lexical-rcd G4a93@G4a8b) (set! G4aa6@G4aa1 (make-record-type-descriptor '&syntax G4a07@G4a02 'G4aa4 '#f '#f '#((immutable form) (immutable subform)))) (set! G4aa8@G4aa3 '#f) (set! G4aaa@G4aa2 (make-record-constructor-descriptor G4aa6@G4aa1 G4a0b@G4a03 G4aa8@G4aa3)) (set! G4aad@p? (record-predicate G4aa6@G4aa1)) (set! G4aaf@make-syntax-violation (record-constructor G4aaa@G4aa2)) (set! G4ab1@G4a9f (record-accessor G4aa6@G4aa1 '0)) (set! G4ab3@G4aa0 (record-accessor G4aa6@G4aa1 '1)) (set! G4ab5@syntax-violation? (condition-predicate G4aa6@G4aa1)) (set! G4ab7@syntax-violation-form (condition-accessor G4aa6@G4aa1 G4ab1@G4a9f)) (set! G4ab9@syntax-violation-subform (condition-accessor G4aa6@G4aa1 G4ab3@G4aa0)) (set! G4abb@&syntax-rtd G4aa6@G4aa1) (set! G4abd@&syntax-rcd G4aaa@G4aa2) (set! G4ac3@G4abe (make-record-type-descriptor '&undefined G4a07@G4a02 'G4ac1 '#f '#f '#())) (set! G4ac5@G4ac0 '#f) (set! G4ac7@G4abf (make-record-constructor-descriptor G4ac3@G4abe G4a0b@G4a03 G4ac5@G4ac0)) (set! G4aca@p? (record-predicate G4ac3@G4abe)) (set! G4acc@make-undefined-violation (record-constructor G4ac7@G4abf)) (set! G4ace@undefined-violation? (condition-predicate G4ac3@G4abe)) (set! G4ad0@&undefined-rtd G4ac3@G4abe) (set! G4ad2@&undefined-rcd G4ac7@G4abf) (set! G4ad8@G4ad3 (make-record-type-descriptor '&i/o G49f2@G49ed 'G4ad6 '#f '#f '#())) (set! G4ada@G4ad5 '#f) (set! G4adc@G4ad4 (make-record-constructor-descriptor G4ad8@G4ad3 G49f6@G49ee G4ada@G4ad5)) (set! G4adf@p? (record-predicate G4ad8@G4ad3)) (set! G4ae1@make-i/o-error (record-constructor G4adc@G4ad4)) (set! G4ae3@i/o-error? (condition-predicate G4ad8@G4ad3)) (set! G4ae5@&i/o-rtd G4ad8@G4ad3) (set! G4ae7@&i/o-rcd G4adc@G4ad4) (set! G4aed@G4ae8 (make-record-type-descriptor '&i/o-read G4ad8@G4ad3 'G4aeb '#f '#f '#())) (set! G4aef@G4aea '#f) (set! G4af1@G4ae9 (make-record-constructor-descriptor G4aed@G4ae8 G4adc@G4ad4 G4aef@G4aea)) (set! G4af4@p? (record-predicate G4aed@G4ae8)) (set! G4af6@make-i/o-read-error (record-constructor G4af1@G4ae9)) (set! G4af8@i/o-read-error? (condition-predicate G4aed@G4ae8)) (set! G4afa@&i/o-read-rtd G4aed@G4ae8) (set! G4afc@&i/o-read-rcd G4af1@G4ae9) (set! G4b02@G4afd (make-record-type-descriptor '&i/o-write G4ad8@G4ad3 'G4b00 '#f '#f '#())) (set! G4b04@G4aff '#f) (set! G4b06@G4afe (make-record-constructor-descriptor G4b02@G4afd G4adc@G4ad4 G4b04@G4aff)) (set! G4b09@p? (record-predicate G4b02@G4afd)) (set! G4b0b@make-i/o-write-error (record-constructor G4b06@G4afe)) (set! G4b0d@i/o-write-error? (condition-predicate G4b02@G4afd)) (set! G4b0f@&i/o-write-rtd G4b02@G4afd) (set! G4b11@&i/o-write-rcd G4b06@G4afe) (set! G4b18@G4b13 (make-record-type-descriptor '&i/o-invalid-position G4ad8@G4ad3 'G4b16 '#f '#f '#((immutable position)))) (set! G4b1a@G4b15 '#f) (set! G4b1c@G4b14 (make-record-constructor-descriptor G4b18@G4b13 G4adc@G4ad4 G4b1a@G4b15)) (set! G4b1f@p? (record-predicate G4b18@G4b13)) (set! G4b21@make-i/o-invalid-position-error (record-constructor G4b1c@G4b14)) (set! G4b23@G4b12 (record-accessor G4b18@G4b13 '0)) (set! G4b25@i/o-invalid-position-error? (condition-predicate G4b18@G4b13)) (set! G4b27@i/o-error-position (condition-accessor G4b18@G4b13 G4b23@G4b12)) (set! G4b29@&i/o-invalid-position-rtd G4b18@G4b13) (set! G4b2b@&i/o-invalid-position-rcd G4b1c@G4b14) (set! G4b32@G4b2d (make-record-type-descriptor '&i/o-filename G4ad8@G4ad3 'G4b30 '#f '#f '#((immutable filename)))) (set! G4b34@G4b2f '#f) (set! G4b36@G4b2e (make-record-constructor-descriptor G4b32@G4b2d G4adc@G4ad4 G4b34@G4b2f)) (set! G4b39@p? (record-predicate G4b32@G4b2d)) (set! G4b3b@make-i/o-filename-error (record-constructor G4b36@G4b2e)) (set! G4b3d@G4b2c (record-accessor G4b32@G4b2d '0)) (set! G4b3f@i/o-filename-error? (condition-predicate G4b32@G4b2d)) (set! G4b41@i/o-error-filename (condition-accessor G4b32@G4b2d G4b3d@G4b2c)) (set! G4b43@&i/o-filename-rtd G4b32@G4b2d) (set! G4b45@&i/o-filename-rcd G4b36@G4b2e) (set! G4b4b@G4b46 (make-record-type-descriptor '&i/o-file-protection G4b32@G4b2d 'G4b49 '#f '#f '#())) (set! G4b4d@G4b48 '#f) (set! G4b4f@G4b47 (make-record-constructor-descriptor G4b4b@G4b46 G4b36@G4b2e G4b4d@G4b48)) (set! G4b52@p? (record-predicate G4b4b@G4b46)) (set! G4b54@make-i/o-file-protection-error (record-constructor G4b4f@G4b47)) (set! G4b56@i/o-file-protection-error? (condition-predicate G4b4b@G4b46)) (set! G4b58@&i/o-file-protection-rtd G4b4b@G4b46) (set! G4b5a@&i/o-file-protection-rcd G4b4f@G4b47) (set! G4b60@G4b5b (make-record-type-descriptor '&i/o-file-is-read-only G4b4b@G4b46 'G4b5e '#f '#f '#())) (set! G4b62@G4b5d '#f) (set! G4b64@G4b5c (make-record-constructor-descriptor G4b60@G4b5b G4b4f@G4b47 G4b62@G4b5d)) (set! G4b67@p? (record-predicate G4b60@G4b5b)) (set! G4b69@make-i/o-file-is-read-only-error (record-constructor G4b64@G4b5c)) (set! G4b6b@i/o-file-is-read-only-error? (condition-predicate G4b60@G4b5b)) (set! G4b6d@&i/o-file-is-read-only-rtd G4b60@G4b5b) (set! G4b6f@&i/o-file-is-read-only-rcd G4b64@G4b5c) (set! G4b75@G4b70 (make-record-type-descriptor '&i/o-file-already-exists G4b32@G4b2d 'G4b73 '#f '#f '#())) (set! G4b77@G4b72 '#f) (set! G4b79@G4b71 (make-record-constructor-descriptor G4b75@G4b70 G4b36@G4b2e G4b77@G4b72)) (set! G4b7c@p? (record-predicate G4b75@G4b70)) (set! G4b7e@make-i/o-file-already-exists-error (record-constructor G4b79@G4b71)) (set! G4b80@i/o-file-already-exists-error? (condition-predicate G4b75@G4b70)) (set! G4b82@&i/o-file-already-exists-rtd G4b75@G4b70) (set! G4b84@&i/o-file-already-exists-rcd G4b79@G4b71) (set! G4b8a@G4b85 (make-record-type-descriptor '&i/o-file-does-not-exist G4b32@G4b2d 'G4b88 '#f '#f '#())) (set! G4b8c@G4b87 '#f) (set! G4b8e@G4b86 (make-record-constructor-descriptor G4b8a@G4b85 G4b36@G4b2e G4b8c@G4b87)) (set! G4b91@p? (record-predicate G4b8a@G4b85)) (set! G4b93@make-i/o-file-does-not-exist-error (record-constructor G4b8e@G4b86)) (set! G4b95@i/o-file-does-not-exist-error? (condition-predicate G4b8a@G4b85)) (set! G4b97@&i/o-file-does-not-exist-rtd G4b8a@G4b85) (set! G4b99@&i/o-file-does-not-exist-rcd G4b8e@G4b86) (set! G4ba0@G4b9b (make-record-type-descriptor '&i/o-port G4ad8@G4ad3 'G4b9e '#f '#f '#((immutable port)))) (set! G4ba2@G4b9d '#f) (set! G4ba4@G4b9c (make-record-constructor-descriptor G4ba0@G4b9b G4adc@G4ad4 G4ba2@G4b9d)) (set! G4ba7@p? (record-predicate G4ba0@G4b9b)) (set! G4ba9@make-i/o-port-error (record-constructor G4ba4@G4b9c)) (set! G4bab@G4b9a (record-accessor G4ba0@G4b9b '0)) (set! G4bad@i/o-port-error? (condition-predicate G4ba0@G4b9b)) (set! G4baf@i/o-error-port (condition-accessor G4ba0@G4b9b G4bab@G4b9a)) (set! G4bb1@&i/o-port-rtd G4ba0@G4b9b) (set! G4bb3@&i/o-port-rcd G4ba4@G4b9c) (set! G4bb9@G4bb4 (make-record-type-descriptor '&i/o-decoding G4ba0@G4b9b 'G4bb7 '#f '#f '#())) (set! G4bbb@G4bb6 '#f) (set! G4bbd@G4bb5 (make-record-constructor-descriptor G4bb9@G4bb4 G4ba4@G4b9c G4bbb@G4bb6)) (set! G4bc0@p? (record-predicate G4bb9@G4bb4)) (set! G4bc2@make-i/o-decoding-error (record-constructor G4bbd@G4bb5)) (set! G4bc4@i/o-decoding-error? (condition-predicate G4bb9@G4bb4)) (set! G4bc6@&i/o-decoding-rtd G4bb9@G4bb4) (set! G4bc8@&i/o-decoding-rcd G4bbd@G4bb5) (set! G4bcf@G4bca (make-record-type-descriptor '&i/o-encoding G4ba0@G4b9b 'G4bcd '#f '#f '#((immutable char)))) (set! G4bd1@G4bcc '#f) (set! G4bd3@G4bcb (make-record-constructor-descriptor G4bcf@G4bca G4ba4@G4b9c G4bd1@G4bcc)) (set! G4bd6@p? (record-predicate G4bcf@G4bca)) (set! G4bd8@make-i/o-encoding-error (record-constructor G4bd3@G4bcb)) (set! G4bda@G4bc9 (record-accessor G4bcf@G4bca '0)) (set! G4bdc@i/o-encoding-error? (condition-predicate G4bcf@G4bca)) (set! G4bde@i/o-encoding-error-char (condition-accessor G4bcf@G4bca G4bda@G4bc9)) (set! G4be0@&i/o-encoding-rtd G4bcf@G4bca) (set! G4be2@&i/o-encoding-rcd G4bd3@G4bcb) (set! G4be8@G4be3 (make-record-type-descriptor '&no-infinities G4a7a@G4a75 'G4be6 '#f '#f '#())) (set! G4bea@G4be5 '#f) (set! G4bec@G4be4 (make-record-constructor-descriptor G4be8@G4be3 G4a7e@G4a76 G4bea@G4be5)) (set! G4bef@p? (record-predicate G4be8@G4be3)) (set! G4bf1@make-no-infinities-violation (record-constructor G4bec@G4be4)) (set! G4bf3@no-infinities-violation? (condition-predicate G4be8@G4be3)) (set! G4bf5@&no-infinities-rtd G4be8@G4be3) (set! G4bf7@&no-infinities-rcd G4bec@G4be4) (set! G4bfd@G4bf8 (make-record-type-descriptor '&no-nans G4a7a@G4a75 'G4bfb '#f '#f '#())) (set! G4bff@G4bfa '#f) (set! G4c01@G4bf9 (make-record-constructor-descriptor G4bfd@G4bf8 G4a7e@G4a76 G4bff@G4bfa)) (set! G4c04@p? (record-predicate G4bfd@G4bf8)) (set! G4c06@make-no-nans-violation (record-constructor G4c01@G4bf9)) (set! G4c08@no-nans-violation? (condition-predicate G4bfd@G4bf8)) (set! G4c0a@&no-nans-rtd G4bfd@G4bf8) (set! G4c0c@&no-nans-rcd G4c01@G4bf9) (begin (set! G4cfd@G4c0c@&no-nans-rcd G4c0c@&no-nans-rcd) (set! G4cfc@G4c0a@&no-nans-rtd G4c0a@&no-nans-rtd) (set! G4cfb@G4c08@no-nans-violation? G4c08@no-nans-violation?) (set! G4cfa@G4c06@make-no-nans-violation G4c06@make-no-nans-violation) (set! G4cf9@G4c04@p? G4c04@p?) (set! G4cf8@G4c01@G4bf9 G4c01@G4bf9) (set! G4cf7@G4bff@G4bfa G4bff@G4bfa) (set! G4cf6@G4bfd@G4bf8 G4bfd@G4bf8) (set! G4cf5@G4bf7@&no-infinities-rcd G4bf7@&no-infinities-rcd) (set! G4cf4@G4bf5@&no-infinities-rtd G4bf5@&no-infinities-rtd) (set! G4cf3@G4bf3@no-infinities-violation? G4bf3@no-infinities-violation?) (set! G4cf2@G4bf1@make-no-infinities-violation G4bf1@make-no-infinities-violation) (set! G4cf1@G4bef@p? G4bef@p?) (set! G4cf0@G4bec@G4be4 G4bec@G4be4) (set! G4cef@G4bea@G4be5 G4bea@G4be5) (set! G4cee@G4be8@G4be3 G4be8@G4be3) (set! G4ced@G4be2@&i/o-encoding-rcd G4be2@&i/o-encoding-rcd) (set! G4cec@G4be0@&i/o-encoding-rtd G4be0@&i/o-encoding-rtd) (set! G4ceb@G4bde@i/o-encoding-error-char G4bde@i/o-encoding-error-char) (set! G4cea@G4bdc@i/o-encoding-error? G4bdc@i/o-encoding-error?) (set! G4ce9@G4bda@G4bc9 G4bda@G4bc9) (set! G4ce8@G4bd8@make-i/o-encoding-error G4bd8@make-i/o-encoding-error) (set! G4ce7@G4bd6@p? G4bd6@p?) (set! G4ce6@G4bd3@G4bcb G4bd3@G4bcb) (set! G4ce5@G4bd1@G4bcc G4bd1@G4bcc) (set! G4ce4@G4bcf@G4bca G4bcf@G4bca) (set! G4ce3@G4bc8@&i/o-decoding-rcd G4bc8@&i/o-decoding-rcd) (set! G4ce2@G4bc6@&i/o-decoding-rtd G4bc6@&i/o-decoding-rtd) (set! G4ce1@G4bc4@i/o-decoding-error? G4bc4@i/o-decoding-error?) (set! G4ce0@G4bc2@make-i/o-decoding-error G4bc2@make-i/o-decoding-error) (set! G4cdf@G4bc0@p? G4bc0@p?) (set! G4cde@G4bbd@G4bb5 G4bbd@G4bb5) (set! G4cdd@G4bbb@G4bb6 G4bbb@G4bb6) (set! G4cdc@G4bb9@G4bb4 G4bb9@G4bb4) (set! G4cdb@G4bb3@&i/o-port-rcd G4bb3@&i/o-port-rcd) (set! G4cda@G4bb1@&i/o-port-rtd G4bb1@&i/o-port-rtd) (set! G4cd9@G4baf@i/o-error-port G4baf@i/o-error-port) (set! G4cd8@G4bad@i/o-port-error? G4bad@i/o-port-error?) (set! G4cd7@G4bab@G4b9a G4bab@G4b9a) (set! G4cd6@G4ba9@make-i/o-port-error G4ba9@make-i/o-port-error) (set! G4cd5@G4ba7@p? G4ba7@p?) (set! G4cd4@G4ba4@G4b9c G4ba4@G4b9c) (set! G4cd3@G4ba2@G4b9d G4ba2@G4b9d) (set! G4cd2@G4ba0@G4b9b G4ba0@G4b9b) (set! G4cd1@G4b99@&i/o-file-does-not-exist-rcd G4b99@&i/o-file-does-not-exist-rcd) (set! G4cd0@G4b97@&i/o-file-does-not-exist-rtd G4b97@&i/o-file-does-not-exist-rtd) (set! G4ccf@G4b95@i/o-file-does-not-exist-error? G4b95@i/o-file-does-not-exist-error?) (set! G4cce@G4b93@make-i/o-file-does-not-exist-error G4b93@make-i/o-file-does-not-exist-error) (set! G4ccd@G4b91@p? G4b91@p?) (set! G4ccc@G4b8e@G4b86 G4b8e@G4b86) (set! G4ccb@G4b8c@G4b87 G4b8c@G4b87) (set! G4cca@G4b8a@G4b85 G4b8a@G4b85) (set! G4cc9@G4b84@&i/o-file-already-exists-rcd G4b84@&i/o-file-already-exists-rcd) (set! G4cc8@G4b82@&i/o-file-already-exists-rtd G4b82@&i/o-file-already-exists-rtd) (set! G4cc7@G4b80@i/o-file-already-exists-error? G4b80@i/o-file-already-exists-error?) (set! G4cc6@G4b7e@make-i/o-file-already-exists-error G4b7e@make-i/o-file-already-exists-error) (set! G4cc5@G4b7c@p? G4b7c@p?) (set! G4cc4@G4b79@G4b71 G4b79@G4b71) (set! G4cc3@G4b77@G4b72 G4b77@G4b72) (set! G4cc2@G4b75@G4b70 G4b75@G4b70) (set! G4cc1@G4b6f@&i/o-file-is-read-only-rcd G4b6f@&i/o-file-is-read-only-rcd) (set! G4cc0@G4b6d@&i/o-file-is-read-only-rtd G4b6d@&i/o-file-is-read-only-rtd) (set! G4cbf@G4b6b@i/o-file-is-read-only-error? G4b6b@i/o-file-is-read-only-error?) (set! G4cbe@G4b69@make-i/o-file-is-read-only-error G4b69@make-i/o-file-is-read-only-error) (set! G4cbd@G4b67@p? G4b67@p?) (set! G4cbc@G4b64@G4b5c G4b64@G4b5c) (set! G4cbb@G4b62@G4b5d G4b62@G4b5d) (set! G4cba@G4b60@G4b5b G4b60@G4b5b) (set! G4cb9@G4b5a@&i/o-file-protection-rcd G4b5a@&i/o-file-protection-rcd) (set! G4cb8@G4b58@&i/o-file-protection-rtd G4b58@&i/o-file-protection-rtd) (set! G4cb7@G4b56@i/o-file-protection-error? G4b56@i/o-file-protection-error?) (set! G4cb6@G4b54@make-i/o-file-protection-error G4b54@make-i/o-file-protection-error) (set! G4cb5@G4b52@p? G4b52@p?) (set! G4cb4@G4b4f@G4b47 G4b4f@G4b47) (set! G4cb3@G4b4d@G4b48 G4b4d@G4b48) (set! G4cb2@G4b4b@G4b46 G4b4b@G4b46) (set! G4cb1@G4b45@&i/o-filename-rcd G4b45@&i/o-filename-rcd) (set! G4cb0@G4b43@&i/o-filename-rtd G4b43@&i/o-filename-rtd) (set! G4caf@G4b41@i/o-error-filename G4b41@i/o-error-filename) (set! G4cae@G4b3f@i/o-filename-error? G4b3f@i/o-filename-error?) (set! G4cad@G4b3d@G4b2c G4b3d@G4b2c) (set! G4cac@G4b3b@make-i/o-filename-error G4b3b@make-i/o-filename-error) (set! G4cab@G4b39@p? G4b39@p?) (set! G4caa@G4b36@G4b2e G4b36@G4b2e) (set! G4ca9@G4b34@G4b2f G4b34@G4b2f) (set! G4ca8@G4b32@G4b2d G4b32@G4b2d) (set! G4ca7@G4b2b@&i/o-invalid-position-rcd G4b2b@&i/o-invalid-position-rcd) (set! G4ca6@G4b29@&i/o-invalid-position-rtd G4b29@&i/o-invalid-position-rtd) (set! G4ca5@G4b27@i/o-error-position G4b27@i/o-error-position) (set! G4ca4@G4b25@i/o-invalid-position-error? G4b25@i/o-invalid-position-error?) (set! G4ca3@G4b23@G4b12 G4b23@G4b12) (set! G4ca2@G4b21@make-i/o-invalid-position-error G4b21@make-i/o-invalid-position-error) (set! G4ca1@G4b1f@p? G4b1f@p?) (set! G4ca0@G4b1c@G4b14 G4b1c@G4b14) (set! G4c9f@G4b1a@G4b15 G4b1a@G4b15) (set! G4c9e@G4b18@G4b13 G4b18@G4b13) (set! G4c9d@G4b11@&i/o-write-rcd G4b11@&i/o-write-rcd) (set! G4c9c@G4b0f@&i/o-write-rtd G4b0f@&i/o-write-rtd) (set! G4c9b@G4b0d@i/o-write-error? G4b0d@i/o-write-error?) (set! G4c9a@G4b0b@make-i/o-write-error G4b0b@make-i/o-write-error) (set! G4c99@G4b09@p? G4b09@p?) (set! G4c98@G4b06@G4afe G4b06@G4afe) (set! G4c97@G4b04@G4aff G4b04@G4aff) (set! G4c96@G4b02@G4afd G4b02@G4afd) (set! G4c95@G4afc@&i/o-read-rcd G4afc@&i/o-read-rcd) (set! G4c94@G4afa@&i/o-read-rtd G4afa@&i/o-read-rtd) (set! G4c93@G4af8@i/o-read-error? G4af8@i/o-read-error?) (set! G4c92@G4af6@make-i/o-read-error G4af6@make-i/o-read-error) (set! G4c91@G4af4@p? G4af4@p?) (set! G4c90@G4af1@G4ae9 G4af1@G4ae9) (set! G4c8f@G4aef@G4aea G4aef@G4aea) (set! G4c8e@G4aed@G4ae8 G4aed@G4ae8) (set! G4c8d@G4ae7@&i/o-rcd G4ae7@&i/o-rcd) (set! G4c8c@G4ae5@&i/o-rtd G4ae5@&i/o-rtd) (set! G4c8b@G4ae3@i/o-error? G4ae3@i/o-error?) (set! G4c8a@G4ae1@make-i/o-error G4ae1@make-i/o-error) (set! G4c89@G4adf@p? G4adf@p?) (set! G4c88@G4adc@G4ad4 G4adc@G4ad4) (set! G4c87@G4ada@G4ad5 G4ada@G4ad5) (set! G4c86@G4ad8@G4ad3 G4ad8@G4ad3) (set! G4c85@G4ad2@&undefined-rcd G4ad2@&undefined-rcd) (set! G4c84@G4ad0@&undefined-rtd G4ad0@&undefined-rtd) (set! G4c83@G4ace@undefined-violation? G4ace@undefined-violation?) (set! G4c82@G4acc@make-undefined-violation G4acc@make-undefined-violation) (set! G4c81@G4aca@p? G4aca@p?) (set! G4c80@G4ac7@G4abf G4ac7@G4abf) (set! G4c7f@G4ac5@G4ac0 G4ac5@G4ac0) (set! G4c7e@G4ac3@G4abe G4ac3@G4abe) (set! G4c7d@G4abd@&syntax-rcd G4abd@&syntax-rcd) (set! G4c7c@G4abb@&syntax-rtd G4abb@&syntax-rtd) (set! G4c7b@G4ab9@syntax-violation-subform G4ab9@syntax-violation-subform) (set! G4c7a@G4ab7@syntax-violation-form G4ab7@syntax-violation-form) (set! G4c79@G4ab5@syntax-violation? G4ab5@syntax-violation?) (set! G4c78@G4ab3@G4aa0 G4ab3@G4aa0) (set! G4c77@G4ab1@G4a9f G4ab1@G4a9f) (set! G4c76@G4aaf@make-syntax-violation G4aaf@make-syntax-violation) (set! G4c75@G4aad@p? G4aad@p?) (set! G4c74@G4aaa@G4aa2 G4aaa@G4aa2) (set! G4c73@G4aa8@G4aa3 G4aa8@G4aa3) (set! G4c72@G4aa6@G4aa1 G4aa6@G4aa1) (set! G4c71@G4a9e@&lexical-rcd G4a9e@&lexical-rcd) (set! G4c70@G4a9c@&lexical-rtd G4a9c@&lexical-rtd) (set! G4c6f@G4a9a@lexical-violation? G4a9a@lexical-violation?) (set! G4c6e@G4a98@make-lexical-violation G4a98@make-lexical-violation) (set! G4c6d@G4a96@p? G4a96@p?) (set! G4c6c@G4a93@G4a8b G4a93@G4a8b) (set! G4c6b@G4a91@G4a8c G4a91@G4a8c) (set! G4c6a@G4a8f@G4a8a G4a8f@G4a8a) (set! G4c69@G4a89@&implementation-restriction-rcd G4a89@&implementation-restriction-rcd) (set! G4c68@G4a87@&implementation-restriction-rtd G4a87@&implementation-restriction-rtd) (set! G4c67@G4a85@implementation-restriction-violation? G4a85@implementation-restriction-violation?) (set! G4c66@G4a83@make-implementation-restriction-violation G4a83@make-implementation-restriction-violation) (set! G4c65@G4a81@p? G4a81@p?) (set! G4c64@G4a7e@G4a76 G4a7e@G4a76) (set! G4c63@G4a7c@G4a77 G4a7c@G4a77) (set! G4c62@G4a7a@G4a75 G4a7a@G4a75) (set! G4c61@G4a74@&non-continuable-rcd G4a74@&non-continuable-rcd) (set! G4c60@G4a72@&non-continuable-rtd G4a72@&non-continuable-rtd) (set! G4c5f@G4a70@non-continuable-violation? G4a70@non-continuable-violation?) (set! G4c5e@G4a6e@make-non-continuable-violation G4a6e@make-non-continuable-violation) (set! G4c5d@G4a6c@p? G4a6c@p?) (set! G4c5c@G4a69@G4a61 G4a69@G4a61) (set! G4c5b@G4a67@G4a62 G4a67@G4a62) (set! G4c5a@G4a65@G4a60 G4a65@G4a60) (set! G4c59@G4a5f@&who-rcd G4a5f@&who-rcd) (set! G4c58@G4a5d@&who-rtd G4a5d@&who-rtd) (set! G4c57@G4a5b@condition-who G4a5b@condition-who) (set! G4c56@G4a59@who-condition? G4a59@who-condition?) (set! G4c55@G4a57@G4a46 G4a57@G4a46) (set! G4c54@G4a55@make-who-condition G4a55@make-who-condition) (set! G4c53@G4a53@p? G4a53@p?) (set! G4c52@G4a50@G4a48 G4a50@G4a48) (set! G4c51@G4a4e@G4a49 G4a4e@G4a49) (set! G4c50@G4a4c@G4a47 G4a4c@G4a47) (set! G4c4f@G4a45@&irritants-rcd G4a45@&irritants-rcd) (set! G4c4e@G4a43@&irritants-rtd G4a43@&irritants-rtd) (set! G4c4d@G4a41@condition-irritants G4a41@condition-irritants) (set! G4c4c@G4a3f@irritants-condition? G4a3f@irritants-condition?) (set! G4c4b@G4a3d@G4a2c G4a3d@G4a2c) (set! G4c4a@G4a3b@make-irritants-condition G4a3b@make-irritants-condition) (set! G4c49@G4a39@p? G4a39@p?) (set! G4c48@G4a36@G4a2e G4a36@G4a2e) (set! G4c47@G4a34@G4a2f G4a34@G4a2f) (set! G4c46@G4a32@G4a2d G4a32@G4a2d) (set! G4c45@G4a2b@&assertion-rcd G4a2b@&assertion-rcd) (set! G4c44@G4a29@&assertion-rtd G4a29@&assertion-rtd) (set! G4c43@G4a27@assertion-violation? G4a27@assertion-violation?) (set! G4c42@G4a25@make-assertion-violation G4a25@make-assertion-violation) (set! G4c41@G4a23@p? G4a23@p?) (set! G4c40@G4a20@G4a18 G4a20@G4a18) (set! G4c3f@G4a1e@G4a19 G4a1e@G4a19) (set! G4c3e@G4a1c@G4a17 G4a1c@G4a17) (set! G4c3d@G4a16@&violation-rcd G4a16@&violation-rcd) (set! G4c3c@G4a14@&violation-rtd G4a14@&violation-rtd) (set! G4c3b@G4a12@violation? G4a12@violation?) (set! G4c3a@G4a10@make-violation G4a10@make-violation) (set! G4c39@G4a0e@p? G4a0e@p?) (set! G4c38@G4a0b@G4a03 G4a0b@G4a03) (set! G4c37@G4a09@G4a04 G4a09@G4a04) (set! G4c36@G4a07@G4a02 G4a07@G4a02) (set! G4c35@G4a01@&error-rcd G4a01@&error-rcd) (set! G4c34@G49ff@&error-rtd G49ff@&error-rtd) (set! G4c33@G49fd@error? G49fd@error?) (set! G4c32@G49fb@make-error G49fb@make-error) (set! G4c31@G49f9@p? G49f9@p?) (set! G4c30@G49f6@G49ee G49f6@G49ee) (set! G4c2f@G49f4@G49ef G49f4@G49ef) (set! G4c2e@G49f2@G49ed G49f2@G49ed) (set! G4c2d@G49ec@&serious-rcd G49ec@&serious-rcd) (set! G4c2c@G49ea@&serious-rtd G49ea@&serious-rtd) (set! G4c2b@G49e8@serious-condition? G49e8@serious-condition?) (set! G4c2a@G49e6@make-serious-condition G49e6@make-serious-condition) (set! G4c29@G49e4@p? G49e4@p?) (set! G4c28@G49e1@G49d9 G49e1@G49d9) (set! G4c27@G49df@G49da G49df@G49da) (set! G4c26@G49dd@G49d8 G49dd@G49d8) (set! G4c25@G49d7@&warning-rcd G49d7@&warning-rcd) (set! G4c24@G49d5@&warning-rtd G49d5@&warning-rtd) (set! G4c23@G49d3@warning? G49d3@warning?) (set! G4c22@G49d1@make-warning G49d1@make-warning) (set! G4c21@G49cf@p? G49cf@p?) (set! G4c20@G49cc@G49c4 G49cc@G49c4) (set! G4c1f@G49ca@G49c5 G49ca@G49c5) (set! G4c1e@G49c8@G49c3 G49c8@G49c3) (set! G4c1d@G49c2@&message-rcd G49c2@&message-rcd) (set! G4c1c@G49c0@&message-rtd G49c0@&message-rtd) (set! G4c1b@G49be@condition-message G49be@condition-message) (set! G4c1a@G49bc@message-condition? G49bc@message-condition?) (set! G4c19@G49ba@G49a9 G49ba@G49a9) (set! G4c18@G49b8@make-message-condition G49b8@make-message-condition) (set! G4c17@G49b6@p? G49b6@p?) (set! G4c16@G49b3@G49ab G49b3@G49ab) (set! G4c15@G49b1@G49ac G49b1@G49ac) (set! G4c14@G49af@G49aa G49af@G49aa) (set! G4c13@G4965@&condition-rcd G4965@&condition-rcd) (set! G4c12@G4963@&condition-rtd G4963@&condition-rtd) (set! G4c11@G4961@make-&condition G4961@make-&condition) (set! G4c10@G495f@&condition? G495f@&condition?) (set! G4c0f@G495c@G4954 G495c@G4954) (set! G4c0e@G495a@G4955 G495a@G4955) (set! G4c0d@G4958@G4953 G4958@G4953)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G294d@G2902@current-primitive-locations (lambda (G50e3@x) ((lambda (G50e5@t) (if G50e5@t (cdr G50e5@t) '#f)) (assq G50e3@x '((&no-nans-rcd . G4cfd@G4c0c@&no-nans-rcd) (&no-nans-rtd . G4cfc@G4c0a@&no-nans-rtd) (&no-infinities-rcd . G4cf5@G4bf7@&no-infinities-rcd) (&no-infinities-rtd . G4cf4@G4bf5@&no-infinities-rtd) (&i/o-encoding-rcd . G4ced@G4be2@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4cec@G4be0@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4ce3@G4bc8@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4ce2@G4bc6@&i/o-decoding-rtd) (&i/o-port-rcd . G4cdb@G4bb3@&i/o-port-rcd) (&i/o-port-rtd . G4cda@G4bb1@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cd1@G4b99@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cd0@G4b97@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cc9@G4b84@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cc8@G4b82@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4cc1@G4b6f@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cc0@G4b6d@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4cb9@G4b5a@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4cb8@G4b58@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4cb1@G4b45@&i/o-filename-rcd) (&i/o-filename-rtd . G4cb0@G4b43@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4ca7@G4b2b@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4ca6@G4b29@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4c9d@G4b11@&i/o-write-rcd) (&i/o-write-rtd . G4c9c@G4b0f@&i/o-write-rtd) (&i/o-read-rcd . G4c95@G4afc@&i/o-read-rcd) (&i/o-read-rtd . G4c94@G4afa@&i/o-read-rtd) (&i/o-rcd . G4c8d@G4ae7@&i/o-rcd) (&i/o-rtd . G4c8c@G4ae5@&i/o-rtd) (&undefined-rcd . G4c85@G4ad2@&undefined-rcd) (&undefined-rtd . G4c84@G4ad0@&undefined-rtd) (&syntax-rcd . G4c7d@G4abd@&syntax-rcd) (&syntax-rtd . G4c7c@G4abb@&syntax-rtd) (&lexical-rcd . G4c71@G4a9e@&lexical-rcd) (&lexical-rtd . G4c70@G4a9c@&lexical-rtd) (&implementation-restriction-rcd . G4c69@G4a89@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c68@G4a87@&implementation-restriction-rtd) (&non-continuable-rcd . G4c61@G4a74@&non-continuable-rcd) (&non-continuable-rtd . G4c60@G4a72@&non-continuable-rtd) (&who-rcd . G4c59@G4a5f@&who-rcd) (&who-rtd . G4c58@G4a5d@&who-rtd) (&irritants-rcd . G4c4f@G4a45@&irritants-rcd) (&irritants-rtd . G4c4e@G4a43@&irritants-rtd) (&assertion-rcd . G4c45@G4a2b@&assertion-rcd) (&assertion-rtd . G4c44@G4a29@&assertion-rtd) (&violation-rcd . G4c3d@G4a16@&violation-rcd) (&violation-rtd . G4c3c@G4a14@&violation-rtd) (&error-rcd . G4c35@G4a01@&error-rcd) (&error-rtd . G4c34@G49ff@&error-rtd) (&serious-rcd . G4c2d@G49ec@&serious-rcd) (&serious-rtd . G4c2c@G49ea@&serious-rtd) (&warning-rcd . G4c25@G49d7@&warning-rcd) (&warning-rtd . G4c24@G49d5@&warning-rtd) (&message-rcd . G4c1d@G49c2@&message-rcd) (&message-rtd . G4c1c@G49c0@&message-rtd) (&condition-rcd . G4c13@G4965@&condition-rcd) (&condition-rtd . G4c12@G4963@&condition-rtd) (syntax-error . G4945@G3046@syntax-error) (syntax-dispatch . G48d9@G2f5f@syntax-dispatch) (load . G4dcf@G4d13@load) (interaction-environment . G494d@G3056@interaction-environment) (make-parameter . G28fc@G2832@make-parameter) (make-variable-transformer . G4897@G2d9a@make-variable-transformer) (identifier? . G4948@G304c@identifier?) (generate-temporaries . G493e@G3038@generate-temporaries) (free-identifier=? . G493f@G303a@free-identifier=?) (syntax->datum . G494a@G3050@syntax->datum) (datum->syntax . G4949@G304e@datum->syntax) (bound-identifier=? . G4940@G303c@bound-identifier=?) (make-i/o-write-error . G4c9a@G4b0b@make-i/o-write-error) (make-i/o-read-error . G4c92@G4af6@make-i/o-read-error) (make-i/o-port-error . G4cd6@G4ba9@make-i/o-port-error) (make-i/o-invalid-position-error . G4ca2@G4b21@make-i/o-invalid-position-error) (make-i/o-filename-error . G4cac@G4b3b@make-i/o-filename-error) (make-i/o-file-protection-error . G4cb6@G4b54@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cbe@G4b69@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cce@G4b93@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cc6@G4b7e@make-i/o-file-already-exists-error) (make-i/o-error . G4c8a@G4ae1@make-i/o-error) (make-i/o-encoding-error . G4ce8@G4bd8@make-i/o-encoding-error) (make-i/o-decoding-error . G4ce0@G4bc2@make-i/o-decoding-error) (i/o-write-error? . G4c9b@G4b0d@i/o-write-error?) (i/o-read-error? . G4c93@G4af8@i/o-read-error?) (i/o-port-error? . G4cd8@G4bad@i/o-port-error?) (i/o-invalid-position-error? . G4ca4@G4b25@i/o-invalid-position-error?) (i/o-filename-error? . G4cae@G4b3f@i/o-filename-error?) (i/o-file-protection-error? . G4cb7@G4b56@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4cbf@G4b6b@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4ccf@G4b95@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cc7@G4b80@i/o-file-already-exists-error?) (i/o-error? . G4c8b@G4ae3@i/o-error?) (i/o-error-position . G4ca5@G4b27@i/o-error-position) (i/o-error-port . G4cd9@G4baf@i/o-error-port) (i/o-error-filename . G4caf@G4b41@i/o-error-filename) (i/o-encoding-error? . G4cea@G4bdc@i/o-encoding-error?) (i/o-encoding-error-char . G4ceb@G4bde@i/o-encoding-error-char) (i/o-decoding-error? . G4ce1@G4bc4@i/o-decoding-error?) (scheme-report-environment . G4935@G3026@scheme-report-environment) (null-environment . G4934@G3024@null-environment) (command-line . G4dcc@G4d0d@command-line) (eval . G4937@G302a@eval) (environment . G4933@G3022@environment) (who-condition? . G4c56@G4a59@who-condition?) (warning? . G4c23@G49d3@warning?) (violation? . G4c3b@G4a12@violation?) (undefined-violation? . G4c83@G4ace@undefined-violation?) (syntax-violation? . G4c79@G4ab5@syntax-violation?) (syntax-violation-subform . G4c7b@G4ab9@syntax-violation-subform) (syntax-violation-form . G4c7a@G4ab7@syntax-violation-form) (syntax-violation . G4947@G304a@syntax-violation) (serious-condition? . G4c2b@G49e8@serious-condition?) (non-continuable-violation? . G4c5f@G4a70@non-continuable-violation?) (message-condition? . G4c1a@G49bc@message-condition?) (make-who-condition . G4c54@G4a55@make-who-condition) (make-warning . G4c22@G49d1@make-warning) (make-violation . G4c3a@G4a10@make-violation) (make-undefined-violation . G4c82@G4acc@make-undefined-violation) (make-syntax-violation . G4c76@G4aaf@make-syntax-violation) (make-serious-condition . G4c2a@G49e6@make-serious-condition) (make-non-continuable-violation . G4c5e@G4a6e@make-non-continuable-violation) (make-message-condition . G4c18@G49b8@make-message-condition) (make-lexical-violation . G4c6e@G4a98@make-lexical-violation) (make-irritants-condition . G4c4a@G4a3b@make-irritants-condition) (make-implementation-restriction-violation . G4c66@G4a83@make-implementation-restriction-violation) (make-error . G4c32@G49fb@make-error) (make-assertion-violation . G4c42@G4a25@make-assertion-violation) (lexical-violation? . G4c6f@G4a9a@lexical-violation?) (irritants-condition? . G4c4c@G4a3f@irritants-condition?) (implementation-restriction-violation? . G4c67@G4a85@implementation-restriction-violation?) (error? . G4c33@G49fd@error?) (condition-who . G4c57@G4a5b@condition-who) (condition-message . G4c1b@G49be@condition-message) (condition-irritants . G4c4d@G4a41@condition-irritants) (assertion-violation? . G4c43@G4a27@assertion-violation?) (no-nans-violation? . G4cfb@G4c08@no-nans-violation?) (no-infinities-violation? . G4cf3@G4bf3@no-infinities-violation?) (make-no-nans-violation . G4cfa@G4c06@make-no-nans-violation) (make-no-infinities-violation . G4cf2@G4bf1@make-no-infinities-violation)))))) (G2b75@G2a1a@install-library 'G50b6 '(mosh interaction) '() '() '() '() '((format . G5087) (string-split . G507d) (call-process . G5077) (set-current-directory! . G5073) (expand-path . G5072) (current-directory . G5071) (%spawn . G5070) (%waitpid . G506f) (%ffi-pointer-ref . G506e) (%ffi-void*->string . G506d) (%ffi-call->void* . G506c) (%ffi-call->void . G506b) (%ffi-call->int . G506a) (%ffi-lookup . G5069) (%ffi-open . G5068) (%fork . G5067) (%pipe . G5066) (string-upcase . G5056) (string-titlecase . G5055) (string-normalize-nfkd . G5054) (string-normalize-nfkc . G5053) (string-normalize-nfd . G5052) (string-normalize-nfc . G5051) (string-foldcase . G5050) (string-downcase . G504f) (string-ci>? . G504e) (string-ci>=? . G504d) (string-ci=? . G504c) (string-ci<? . G504b) (string-ci<=? . G504a) (char-whitespace? . G5049) (char-upper-case? . G5048) (char-title-case? . G5047) (char-numeric? . G5046) (char-lower-case? . G5045) (char-general-category . G5044) (char-upcase . G5043) (char-titlecase . G5042) (char-foldcase . G5041) (char-downcase . G5040) (char-ci>? . G503f) (char-ci>=? . G503e) (char-ci=? . G503d) (char-ci<? . G503c) (char-ci<=? . G503b) (char-alphabetic? . G503a) (make-variable-transformer . G2d99) (identifier? . G304b) (generate-temporaries . G3037) (free-identifier=? . G3039) (syntax->datum . G304f) (datum->syntax . G304d) (bound-identifier=? . G303b) (record-type-descriptor? . G5039) (record-predicate . G5038) (record-mutator . G5037) (record-constructor . G5036) (record-accessor . G5035) (make-record-type-descriptor . G5034) (make-record-constructor-descriptor . G5033) (record? . G5032) (record-type-uid . G5031) (record-type-sealed? . G5030) (record-type-parent . G502f) (record-type-opaque? . G502e) (record-type-name . G502d) (record-type-generative? . G502c) (record-type-field-names . G502b) (record-rtd . G502a) (record-field-mutable? . G5029) (delete-file . G5028) (file-exists? . G5027) (vector-sort! . G5026) (vector-sort . G5025) (list-sort . G5024) (symbol-hash . G5023) (string-ci-hash . G5022) (string-hash . G5021) (equal-hash . G5020) (hashtable-equivalence-function . G501f) (make-hashtable . G501e) (hashtable-hash-function . G501d) (make-eqv-hashtable . G501c) (make-eq-hashtable . G501b) (hashtable? . G501a) (hashtable-update! . G5019) (hashtable-size . G5018) (hashtable-set! . G5017) (hashtable-ref . G5016) (hashtable-mutable? . G5015) (hashtable-keys . G5014) (hashtable-entries . G5013) (hashtable-delete! . G5012) (hashtable-copy . G5011) (hashtable-contains? . G5010) (hashtable-clear! . G500f) (call-with-output-file . G500e) (call-with-input-file . G500d) (write-char . G500c) (write . G500b) (with-output-to-file . G500a) (with-input-from-file . G5009) (read-char . G5008) (read . G5007) (peek-char . G5006) (open-output-file . G5005) (open-input-file . G5004) (newline . G5003) (display . G5002) (close-output-port . G5001) (close-input-port . G5000) (eof-object? . G4fff) (eof-object . G4ffe) (current-error-port . G4ffd) (current-output-port . G4ffc) (current-input-port . G4ffb) (output-port? . G4ffa) (input-port? . G4ff9) (utf-8-codec . G4ff8) (utf-16-codec . G4ff7) (transcoder-error-handling-mode . G4ff6) (transcoder-eol-style . G4ff5) (transcoder-codec . G4ff4) (transcoded-port . G4ff3) (textual-port? . G4ff2) (string->bytevector . G4ff1) (standard-output-port . G4ff0) (standard-input-port . G4fef) (standard-error-port . G4fee) (set-port-position! . G4fed) (put-u8 . G4fec) (put-string . G4feb) (put-datum . G4fea) (put-char . G4fe9) (put-bytevector . G4fe8) (port? . G4fe7) (port-transcoder . G4fe6) (port-position . G4fe5) (port-has-set-port-position!? . G4fe4) (port-has-port-position? . G4fe3) (port-eof? . G4fe2) (output-port-buffer-mode . G4fe1) (open-string-output-port . G4fe0) (open-string-input-port . G4fdf) (open-file-output-port . G4fde) (open-file-input/output-port . G4fdd) (open-file-input-port . G4fdc) (open-bytevector-output-port . G4fdb) (open-bytevector-input-port . G4fda) (native-transcoder . G4fd9) (native-eol-style . G4fd8) (make-transcoder . G4fd7) (latin-1-codec . G4fd6) (make-i/o-write-error . G4b0a) (make-i/o-read-error . G4af5) (make-i/o-port-error . G4ba8) (make-i/o-invalid-position-error . G4b20) (make-i/o-filename-error . G4b3a) (make-i/o-file-protection-error . G4b53) (make-i/o-file-is-read-only-error . G4b68) (make-i/o-file-does-not-exist-error . G4b92) (make-i/o-file-already-exists-error . G4b7d) (make-i/o-error . G4ae0) (make-i/o-encoding-error . G4bd7) (make-i/o-decoding-error . G4bc1) (make-custom-textual-output-port . G4fd5) (make-custom-textual-input/output-port . G4fd4) (make-custom-textual-input-port . G4fd3) (make-custom-binary-output-port . G4fd2) (make-custom-binary-input/output-port . G4fd1) (make-custom-binary-input-port . G4fd0) (make-bytevector . G4fcf) (lookahead-u8 . G4fce) (lookahead-char . G4fcd) (i/o-write-error? . G4b0c) (i/o-read-error? . G4af7) (i/o-port-error? . G4bac) (i/o-invalid-position-error? . G4b24) (i/o-filename-error? . G4b3e) (i/o-file-protection-error? . G4b55) (i/o-file-is-read-only-error? . G4b6a) (i/o-file-does-not-exist-error? . G4b94) (i/o-file-already-exists-error? . G4b7f) (i/o-error? . G4ae2) (i/o-error-position . G4b26) (i/o-error-port . G4bae) (i/o-error-filename . G4b40) (i/o-encoding-error? . G4bdb) (i/o-encoding-error-char . G4bdd) (i/o-decoding-error? . G4bc3) (get-u8 . G4fcc) (get-string-n! . G4fcb) (get-string-n . G4fca) (get-string-all . G4fc9) (get-line . G4fc8) (get-datum . G4fc7) (get-char . G4fc6) (get-bytevector-some . G4fc5) (get-bytevector-n! . G4fc4) (get-bytevector-n . G4fc3) (get-bytevector-all . G4fc2) (flush-output-port . G4fc1) (close-port . G4fc0) (exit . G4fb8) (command-line . G4d0c) (string-fill! . G4fb7) (string-set! . G4fb6) (set-cdr! . G4fb5) (set-car! . G4fb4) (remove . G4fb3) (remv . G4fb2) (remp . G4fb1) (remq . G4fb0) (partition . G4faf) (memv . G4fae) (memq . G4fad) (memp . G4fac) (member . G4fab) (exists . G4faa) (for-all . G4fa9) (fold-right . G4fa8) (fold-left . G4fa7) (find . G4fa6) (filter . G4fa5) (cons* . G4fa4) (assv . G4fa3) (assq . G4fa2) (assp . G4fa1) (assoc . G4fa0) (call-with-string-output-port . G4f9f) (call-with-port . G4f9e) (call-with-bytevector-output-port . G4f9d) (bytevector->string . G4f9c) (buffer-mode? . G4f9b) (binary-port? . G4f9a) (with-exception-handler . G4f99) (raise-continuable . G4f98) (raise . G4f97) (eval . G3029) (environment . G3021) (make-enumeration . G4f96) (enum-set=? . G4f95) (enum-set-universe . G4f94) (enum-set-union . G4f93) (enum-set-subset? . G4f92) (enum-set-projection . G4f91) (enum-set-member? . G4f90) (enum-set-intersection . G4f8f) (enum-set-indexer . G4f8e) (enum-set-difference . G4f8d) (enum-set-constructor . G4f8c) (enum-set-complement . G4f8b) (enum-set->list . G4f8a) (who-condition? . G4a58) (warning? . G49d2) (violation? . G4a11) (undefined-violation? . G4acd) (syntax-violation? . G4ab4) (syntax-violation-subform . G4ab8) (syntax-violation-form . G4ab6) (syntax-violation . G3049) (simple-conditions . G4f89) (serious-condition? . G49e7) (non-continuable-violation? . G4a6f) (message-condition? . G49bb) (make-who-condition . G4a54) (make-warning . G49d0) (make-violation . G4a0f) (make-undefined-violation . G4acb) (make-syntax-violation . G4aae) (make-serious-condition . G49e5) (make-non-continuable-violation . G4a6d) (make-message-condition . G49b7) (make-lexical-violation . G4a97) (make-irritants-condition . G4a3a) (make-implementation-restriction-violation . G4a82) (make-error . G49fa) (make-assertion-violation . G4a24) (lexical-violation? . G4a99) (irritants-condition? . G4a3e) (implementation-restriction-violation? . G4a84) (error? . G49fc) (condition-who . G4a5a) (condition-predicate . G4f88) (condition-message . G49bd) (condition-irritants . G4a40) (condition-accessor . G4f87) (condition . G4f86) (assertion-violation? . G4a26) (condition? . G4f85) (utf32->string . G4f84) (utf16->string . G4f83) (utf8->string . G4f82) (uint-list->bytevector . G4f81) (u8-list->bytevector . G4f80) (string->utf8 . G4f7f) (string->utf32 . G4f7e) (string->utf16 . G4f7d) (sint-list->bytevector . G4f7c) (native-endianness . G4f7b) (bytevector? . G4f7a) (bytevector=? . G4f79) (bytevector-uint-set! . G4f78) (bytevector-uint-ref . G4f77) (bytevector-u8-set! . G4f76) (bytevector-u8-ref . G4f75) (bytevector-u64-set! . G4f74) (bytevector-u64-ref . G4f73) (bytevector-u64-native-set! . G4f72) (bytevector-u64-native-ref . G4f71) (bytevector-u32-set! . G4f70) (bytevector-u32-ref . G4f6f) (bytevector-u32-native-set! . G4f6e) (bytevector-u32-native-ref . G4f6d) (bytevector-u16-set! . G4f6c) (bytevector-u16-ref . G4f6b) (bytevector-u16-native-set! . G4f6a) (bytevector-u16-native-ref . G4f69) (bytevector-sint-set! . G4f68) (bytevector-sint-ref . G4f67) (bytevector-s8-set! . G4f66) (bytevector-s8-ref . G4f65) (bytevector-s64-set! . G4f64) (bytevector-s64-ref . G4f63) (bytevector-s64-native-set! . G4f62) (bytevector-s64-native-ref . G4f61) (bytevector-s32-set! . G4f60) (bytevector-s32-ref . G4f5f) (bytevector-s32-native-set! . G4f5e) (bytevector-s32-native-ref . G4f5d) (bytevector-s16-set! . G4f5c) (bytevector-s16-ref . G4f5b) (bytevector-s16-native-set! . G4f5a) (bytevector-s16-native-ref . G4f59) (bytevector-length . G4f58) (bytevector-ieee-single-ref . G4f57) (bytevector-ieee-single-set! . G4f56) (bytevector-ieee-single-native-set! . G4f55) (bytevector-ieee-single-native-ref . G4f54) (bytevector-ieee-double-set! . G4f53) (bytevector-ieee-double-ref . G4f52) (bytevector-ieee-double-native-set! . G4f51) (bytevector-ieee-double-native-ref . G4f50) (bytevector-fill! . G4f4f) (bytevector-copy! . G4f4e) (bytevector-copy . G4f4d) (bytevector->uint-list . G4f4c) (bytevector->u8-list . G4f4b) (bytevector->sint-list . G4f4a) (no-nans-violation? . G4c07) (no-infinities-violation? . G4bf2) (make-no-nans-violation . G4c05) (make-no-infinities-violation . G4bf0) (real->flonum . G4f49) (flzero? . G4f48) (fltruncate . G4f47) (fltan . G4f46) (flsqrt . G4f45) (flsin . G4f44) (flround . G4f43) (flpositive? . G4f42) (flonum? . G4f41) (flodd? . G4f40) (flnumerator . G4f3f) (flnegative? . G4f3e) (flnan? . G4f3d) (flmod0 . G4f3c) (flmod . G4f3b) (flmin . G4f3a) (flmax . G4f39) (fllog . G4f38) (flinteger? . G4f37) (flinfinite? . G4f36) (flfloor . G4f35) (flfinite? . G4f34) (flexpt . G4f33) (flexp . G4f32) (fleven? . G4f31) (fldiv0-and-mod0 . G4f30) (fldiv0 . G4f2f) (fldiv-and-mod . G4f2e) (fldiv . G4f2d) (fldenominator . G4f2c) (flcos . G4f2b) (flceiling . G4f2a) (flatan . G4f29) (flasin . G4f28) (flacos . G4f27) (flabs . G4f26) (fl>? . G4f25) (fl>=? . G4f24) (fl=? . G4f23) (fl<? . G4f22) (fl<=? . G4f21) (fl/ . G4f20) (fl- . G4f1f) (fl+ . G4f1e) (fl* . G4f1d) (fixnum->flonum . G4f1c) (fxzero? . G4f1b) (fxxor . G4f1a) (fxrotate-bit-field . G4f19) (fxreverse-bit-field . G4f18) (fxpositive? . G4f17) (fxodd? . G4f16) (fxnot . G4f15) (fxnegative? . G4f14) (fxmod0 . G4f13) (fxmod . G4f12) (fxmin . G4f11) (fxmax . G4f10) (fxlength . G4f0f) (fxior . G4f0e) (fxif . G4f0d) (fxfirst-bit-set . G4f0c) (fxeven? . G4f0b) (fxdiv0-and-mod0 . G4f0a) (fxdiv0 . G4f09) (fxdiv-and-mod . G4f08) (fxdiv . G4f07) (fxcopy-bit-field . G4f06) (fxcopy-bit . G4f05) (fxbit-set? . G4f04) (fxbit-field . G4f03) (fxbit-count . G4f02) (fxarithmetic-shift-right . G4f01) (fxarithmetic-shift-left . G4f00) (fxarithmetic-shift . G4eff) (fxand . G4efe) (fx>? . G4efd) (fx>=? . G4efc) (fx=? . G4efb) (fx<? . G4efa) (fx<=? . G4ef9) (fx-/carry . G4ef8) (fx- . G4ef7) (fx+/carry . G4ef6) (fx+ . G4ef5) (fx*/carry . G4ef4) (fx* . G4ef3) (greatest-fixnum . G4ef2) (least-fixnum . G4ef1) (fixnum-width . G4ef0) (fixnum? . G4eef) (bitwise-rotate-bit-field . G4eee) (bitwise-reverse-bit-field . G4eed) (bitwise-length . G4eec) (bitwise-if . G4eeb) (bitwise-first-bit-set . G4eea) (bitwise-copy-bit-field . G4ee9) (bitwise-copy-bit . G4ee8) (bitwise-bit-set? . G4ee7) (bitwise-bit-field . G4ee6) (bitwise-bit-count . G4ee5) (bitwise-xor . G4ee4) (bitwise-ior . G4ee3) (bitwise-and . G4ee2) (bitwise-not . G4ee1) (bitwise-arithmetic-shift-right . G4ee0) (bitwise-arithmetic-shift-left . G4edf) (bitwise-arithmetic-shift . G4ede) (zero? . G4edd) (vector? . G4edc) (vector-set! . G4edb) (vector-ref . G4eda) (vector-map . G4ed9) (vector-length . G4ed8) (vector-for-each . G4ed7) (vector-fill! . G4ed6) (vector->list . G4ed5) (vector . G4ed4) (values . G4ed3) (truncate . G4ed2) (tan . G4ed1) (symbol? . G4ed0) (symbol=? . G4ecf) (symbol->string . G4ece) (substring . G4ecd) (string? . G4ecc) (string>? . G4ecb) (string>=? . G4eca) (string=? . G4ec9) (string<? . G4ec8) (string<=? . G4ec7) (string-ref . G4ec6) (string-length . G4ec5) (string-for-each . G4ec4) (string-copy . G4ec3) (string-append . G4ec2) (string->symbol . G4ec1) (string->number . G4ec0) (string->list . G4ebf) (string . G4ebe) (sqrt . G4ebd) (sin . G4ebc) (round . G4ebb) (reverse . G4eba) (real? . G4eb9) (real-valued? . G4eb8) (real-part . G4eb7) (rationalize . G4eb6) (rational? . G4eb5) (rational-valued? . G4eb4) (procedure? . G4eb3) (positive? . G4eb2) (pair? . G4eb1) (odd? . G4eb0) (numerator . G4eaf) (number? . G4eae) (number->string . G4ead) (null? . G4eac) (not . G4eab) (negative? . G4eaa) (nan? . G4ea9) (min . G4ea8) (max . G4ea7) (map . G4ea6) (make-vector . G4ea5) (make-string . G4ea4) (make-rectangular . G4ea3) (make-polar . G4ea2) (magnitude . G4ea1) (log . G4ea0) (list? . G4e9f) (list-tail . G4e9e) (list-ref . G4e9d) (list->vector . G4e9c) (list->string . G4e9b) (list . G4e9a) (length . G4e99) (lcm . G4e98) (integer? . G4e97) (integer-valued? . G4e96) (integer->char . G4e95) (infinite? . G4e94) (inexact? . G4e93) (inexact . G4e92) (imag-part . G4e91) (gcd . G4e90) (for-each . G4e8f) (floor . G4e8e) (finite? . G4e8d) (expt . G4e8c) (exp . G4e8b) (exact? . G4e8a) (exact-integer-sqrt . G4e89) (exact . G4e88) (even? . G4e87) (error . G4e86) (eqv? . G4e85) (equal? . G4e84) (eq? . G4e83) (dynamic-wind . G4e82) (div0-and-mod0 . G4e81) (mod0 . G4e80) (div0 . G4e7f) (div-and-mod . G4e7e) (mod . G4e7d) (div . G4e7c) (denominator . G4e7b) (cos . G4e7a) (cons . G4e79) (complex? . G4e78) (char? . G4e77) (char>? . G4e76) (char>=? . G4e75) (char=? . G4e74) (char<? . G4e73) (char<=? . G4e72) (char->integer . G4e71) (ceiling . G4e70) (call-with-values . G4e6f) (call/cc . G4e6e) (call-with-current-continuation . G4e6d) (cddddr . G4e6c) (cdddar . G4e6b) (cddadr . G4e6a) (cddaar . G4e69) (cdaddr . G4e68) (cdadar . G4e67) (cdaadr . G4e66) (cdaaar . G4e65) (cadddr . G4e64) (caddar . G4e63) (cadadr . G4e62) (cadaar . G4e61) (caaddr . G4e60) (caadar . G4e5f) (caaadr . G4e5e) (caaaar . G4e5d) (cdddr . G4e5c) (cddar . G4e5b) (cdadr . G4e5a) (cdaar . G4e59) (caddr . G4e58) (cadar . G4e57) (caadr . G4e56) (caaar . G4e55) (cddr . G4e54) (cdar . G4e53) (cadr . G4e52) (caar . G4e51) (cdr . G4e50) (car . G4e4f) (boolean? . G4e4e) (boolean=? . G4e4d) (atan . G4e4c) (assertion-violation . G4e4b) (asin . G4e4a) (apply . G4e49) (append . G4e48) (angle . G4e47) (acos . G4e46) (abs . G4e45) (/ . G4e44) (* . G4e43) (- . G4e42) (+ . G4e41) (>= . G4e40) (> . G4e3f) (= . G4e3e) (<= . G4e3d) (< . G4e3c) (library . G4e3b) (export . G4e3a) (&no-nans . G4e39) (&no-infinities . G4e38) (&i/o-encoding . G4e37) (&i/o-decoding . G4e36) (&i/o-port . G4e35) (&i/o-file-does-not-exist . G4e34) (&i/o-file-already-exists . G4e33) (&i/o-file-is-read-only . G4e32) (&i/o-file-protection . G4e31) (&i/o-filename . G4e30) (&i/o-invalid-position . G4e2f) (&i/o-write . G4e2e) (&i/o-read . G4e2d) (&i/o . G4e2c) (&undefined . G4e2b) (&syntax . G4e2a) (&lexical . G4e29) (&implementation-restriction . G4e28) (&non-continuable . G4e27) (&who . G4e26) (&irritants . G4e25) (&assertion . G4e24) (&violation . G4e23) (&error . G4e22) (&serious . G4e21) (&warning . G4e20) (&message . G4e1f) (&condition . G4e1e) (define-condition-type . G4e1d) (define-enumeration . G4e1c) (define-record-type . G4e1b) (parent-rtd . G4e1a) (nongenerative . G4e19) (opaque . G4e18) (sealed . G4e17) (protocol . G4e16) (parent . G4e15) (immutable . G4e14) (mutable . G4e13) (fields . G4e12) (error-handling-mode . G4e11) (file-options . G4e10) (buffer-mode . G4e0f) (eol-style . G4e0e) (guard . G4e0d) (unsyntax-splicing . G4e0a) (unsyntax . G4e09) (unquote-splicing . G4e08) (unquote . G4e07) (_ . G4e06) (else . G4e05) (=> . G4e04) (... . G4e03) (assert . G4e02) (endianness . G4e01) (do . G4dfe) (cond . G4dfd) (let* . G4dfc) (let . G4dfb) (let*-values . G4dfa) (let-values . G4df9) (identifier-syntax . G4df8) (with-syntax . G4df7) (quasisyntax . G4df6) (quasiquote . G4df5) (syntax-rules . G4df4) (include . G4df3) (record-constructor-descriptor . G4df1) (record-type-descriptor . G4df0) (case . G4def) (unless . G4ded) (when . G4dec) (or . G4deb) (and . G4dea) (if . G4de9) (letrec* . G4de8) (letrec . G4de7) (case-lambda . G4de5) (lambda . G4de4) (syntax . G4de3) (syntax-case . G4de2) (quote . G4de1) (letrec-syntax . G4ddf) (let-syntax . G4dde) (set! . G4ddd) (import . G4ddc) (begin . G4ddb) (define-syntax . G4dd9) (define . G4dd8)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50b7 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fb9) (unquote-splicing . G4e08) (unquote . G4e07) (_ . G4e06) (else . G4e05) (=> . G4e04) (... . G4e03) (delay . G4e00) (do . G4dfe) (cond . G4dfd) (let* . G4dfc) (let . G4dfb) (quasiquote . G4df5) (syntax-rules . G4df4) (case . G4def) (or . G4deb) (and . G4dea) (if . G4de9) (letrec . G4de7) (lambda . G4de4) (quote . G4de1) (letrec-syntax . G4ddf) (let-syntax . G4dde) (set! . G4ddd) (begin . G4ddb) (define-syntax . G4dd9) (define . G4dd8)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50b8 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G504e) (string-ci>=? . G504d) (string-ci=? . G504c) (string-ci<? . G504b) (string-ci<=? . G504a) (char-whitespace? . G5049) (char-upper-case? . G5048) (char-numeric? . G5046) (char-lower-case? . G5045) (char-upcase . G5043) (char-downcase . G5040) (char-ci>? . G503f) (char-ci>=? . G503e) (char-ci=? . G503d) (char-ci<? . G503c) (char-ci<=? . G503b) (char-alphabetic? . G503a) (call-with-output-file . G500e) (call-with-input-file . G500d) (write-char . G500c) (write . G500b) (with-output-to-file . G500a) (with-input-from-file . G5009) (read-char . G5008) (read . G5007) (peek-char . G5006) (open-output-file . G5005) (open-input-file . G5004) (newline . G5003) (display . G5002) (close-output-port . G5001) (close-input-port . G5000) (eof-object . G4ffe) (current-output-port . G4ffc) (current-input-port . G4ffb) (output-port? . G4ffa) (input-port? . G4ff9) (scheme-report-environment . G3025) (quotient . G4fbf) (null-environment . G3023) (remainder . G4fbe) (modulo . G4fbd) (inexact->exact . G4fbc) (force . G4fbb) (exact->inexact . G4fba) (make-promise . G4fb9) (string-fill! . G4fb7) (string-set! . G4fb6) (set-cdr! . G4fb5) (set-car! . G4fb4) (memv . G4fae) (memq . G4fad) (member . G4fab) (assv . G4fa3) (assq . G4fa2) (assoc . G4fa0) (eval . G3029) (zero? . G4edd) (vector? . G4edc) (vector-set! . G4edb) (vector-ref . G4eda) (vector-length . G4ed8) (vector-fill! . G4ed6) (vector->list . G4ed5) (vector . G4ed4) (values . G4ed3) (truncate . G4ed2) (tan . G4ed1) (symbol? . G4ed0) (symbol->string . G4ece) (substring . G4ecd) (string? . G4ecc) (string>? . G4ecb) (string>=? . G4eca) (string=? . G4ec9) (string<? . G4ec8) (string<=? . G4ec7) (string-ref . G4ec6) (string-length . G4ec5) (string-copy . G4ec3) (string-append . G4ec2) (string->symbol . G4ec1) (string->number . G4ec0) (string->list . G4ebf) (string . G4ebe) (sqrt . G4ebd) (sin . G4ebc) (round . G4ebb) (reverse . G4eba) (real? . G4eb9) (real-part . G4eb7) (rationalize . G4eb6) (rational? . G4eb5) (procedure? . G4eb3) (positive? . G4eb2) (pair? . G4eb1) (odd? . G4eb0) (numerator . G4eaf) (number? . G4eae) (number->string . G4ead) (not . G4eab) (negative? . G4eaa) (min . G4ea8) (max . G4ea7) (map . G4ea6) (make-vector . G4ea5) (make-string . G4ea4) (make-rectangular . G4ea3) (make-polar . G4ea2) (magnitude . G4ea1) (log . G4ea0) (list? . G4e9f) (list-tail . G4e9e) (list-ref . G4e9d) (list->vector . G4e9c) (list->string . G4e9b) (list . G4e9a) (length . G4e99) (lcm . G4e98) (integer? . G4e97) (integer->char . G4e95) (inexact? . G4e93) (imag-part . G4e91) (gcd . G4e90) (for-each . G4e8f) (floor . G4e8e) (expt . G4e8c) (exp . G4e8b) (exact? . G4e8a) (even? . G4e87) (eqv? . G4e85) (equal? . G4e84) (eq? . G4e83) (dynamic-wind . G4e82) (denominator . G4e7b) (cos . G4e7a) (cons . G4e79) (complex? . G4e78) (char? . G4e77) (char>? . G4e76) (char>=? . G4e75) (char=? . G4e74) (char<? . G4e73) (char<=? . G4e72) (char->integer . G4e71) (ceiling . G4e70) (call-with-values . G4e6f) (call-with-current-continuation . G4e6d) (cddddr . G4e6c) (cdddar . G4e6b) (cddadr . G4e6a) (cddaar . G4e69) (cdaddr . G4e68) (cdadar . G4e67) (cdaadr . G4e66) (cdaaar . G4e65) (cadddr . G4e64) (caddar . G4e63) (cadadr . G4e62) (cadaar . G4e61) (caaddr . G4e60) (caadar . G4e5f) (caaadr . G4e5e) (caaaar . G4e5d) (cdddr . G4e5c) (cddar . G4e5b) (cdadr . G4e5a) (cdaar . G4e59) (caddr . G4e58) (cadar . G4e57) (caadr . G4e56) (caaar . G4e55) (cddr . G4e54) (cdar . G4e53) (cadr . G4e52) (caar . G4e51) (cdr . G4e50) (car . G4e4f) (boolean? . G4e4e) (atan . G4e4c) (asin . G4e4a) (apply . G4e49) (append . G4e48) (angle . G4e47) (acos . G4e46) (abs . G4e45) (/ . G4e44) (* . G4e43) (- . G4e42) (+ . G4e41) (>= . G4e40) (> . G4e3f) (= . G4e3e) (<= . G4e3d) (< . G4e3c) (unquote-splicing . G4e08) (unquote . G4e07) (else . G4e05) (=> . G4e04) (... . G4e03) (delay . G4e00) (do . G4dfe) (cond . G4dfd) (let* . G4dfc) (let . G4dfb) (quasiquote . G4df5) (syntax-rules . G4df4) (case . G4def) (or . G4deb) (and . G4dea) (if . G4de9) (letrec . G4de7) (lambda . G4de4) (quote . G4de1) (letrec-syntax . G4ddf) (let-syntax . G4dde) (set! . G4ddd) (begin . G4ddb) (define-syntax . G4dd9) (define . G4dd8)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50b9 '(psyntax modules) '() '() '() '() '((module . G4dda)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50ba '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50bb '(rnrs) '(6) '() '() '() '((regexp? . G50ae) (string-upcase . G5056) (string-titlecase . G5055) (string-normalize-nfkd . G5054) (string-normalize-nfkc . G5053) (string-normalize-nfd . G5052) (string-normalize-nfc . G5051) (string-foldcase . G5050) (string-downcase . G504f) (string-ci>? . G504e) (string-ci>=? . G504d) (string-ci=? . G504c) (string-ci<? . G504b) (string-ci<=? . G504a) (char-whitespace? . G5049) (char-upper-case? . G5048) (char-title-case? . G5047) (char-numeric? . G5046) (char-lower-case? . G5045) (char-general-category . G5044) (char-upcase . G5043) (char-titlecase . G5042) (char-foldcase . G5041) (char-downcase . G5040) (char-ci>? . G503f) (char-ci>=? . G503e) (char-ci=? . G503d) (char-ci<? . G503c) (char-ci<=? . G503b) (char-alphabetic? . G503a) (make-variable-transformer . G2d99) (identifier? . G304b) (generate-temporaries . G3037) (free-identifier=? . G3039) (syntax->datum . G304f) (datum->syntax . G304d) (bound-identifier=? . G303b) (record-type-descriptor? . G5039) (record-predicate . G5038) (record-mutator . G5037) (record-constructor . G5036) (record-accessor . G5035) (make-record-type-descriptor . G5034) (make-record-constructor-descriptor . G5033) (record? . G5032) (record-type-uid . G5031) (record-type-sealed? . G5030) (record-type-parent . G502f) (record-type-opaque? . G502e) (record-type-name . G502d) (record-type-generative? . G502c) (record-type-field-names . G502b) (record-rtd . G502a) (record-field-mutable? . G5029) (delete-file . G5028) (file-exists? . G5027) (vector-sort! . G5026) (vector-sort . G5025) (list-sort . G5024) (symbol-hash . G5023) (string-ci-hash . G5022) (string-hash . G5021) (equal-hash . G5020) (hashtable-equivalence-function . G501f) (make-hashtable . G501e) (hashtable-hash-function . G501d) (make-eqv-hashtable . G501c) (make-eq-hashtable . G501b) (hashtable? . G501a) (hashtable-update! . G5019) (hashtable-size . G5018) (hashtable-set! . G5017) (hashtable-ref . G5016) (hashtable-mutable? . G5015) (hashtable-keys . G5014) (hashtable-entries . G5013) (hashtable-delete! . G5012) (hashtable-copy . G5011) (hashtable-contains? . G5010) (hashtable-clear! . G500f) (call-with-output-file . G500e) (call-with-input-file . G500d) (write-char . G500c) (write . G500b) (with-output-to-file . G500a) (with-input-from-file . G5009) (read-char . G5008) (read . G5007) (peek-char . G5006) (open-output-file . G5005) (open-input-file . G5004) (newline . G5003) (display . G5002) (close-output-port . G5001) (close-input-port . G5000) (eof-object? . G4fff) (eof-object . G4ffe) (current-error-port . G4ffd) (current-output-port . G4ffc) (current-input-port . G4ffb) (output-port? . G4ffa) (input-port? . G4ff9) (utf-8-codec . G4ff8) (utf-16-codec . G4ff7) (transcoder-error-handling-mode . G4ff6) (transcoder-eol-style . G4ff5) (transcoder-codec . G4ff4) (transcoded-port . G4ff3) (textual-port? . G4ff2) (string->bytevector . G4ff1) (standard-output-port . G4ff0) (standard-input-port . G4fef) (standard-error-port . G4fee) (set-port-position! . G4fed) (put-u8 . G4fec) (put-string . G4feb) (put-datum . G4fea) (put-char . G4fe9) (put-bytevector . G4fe8) (port? . G4fe7) (port-transcoder . G4fe6) (port-position . G4fe5) (port-has-set-port-position!? . G4fe4) (port-has-port-position? . G4fe3) (port-eof? . G4fe2) (output-port-buffer-mode . G4fe1) (open-string-output-port . G4fe0) (open-string-input-port . G4fdf) (open-file-output-port . G4fde) (open-file-input/output-port . G4fdd) (open-file-input-port . G4fdc) (open-bytevector-output-port . G4fdb) (open-bytevector-input-port . G4fda) (native-transcoder . G4fd9) (native-eol-style . G4fd8) (make-transcoder . G4fd7) (latin-1-codec . G4fd6) (make-i/o-write-error . G4b0a) (make-i/o-read-error . G4af5) (make-i/o-port-error . G4ba8) (make-i/o-invalid-position-error . G4b20) (make-i/o-filename-error . G4b3a) (make-i/o-file-protection-error . G4b53) (make-i/o-file-is-read-only-error . G4b68) (make-i/o-file-does-not-exist-error . G4b92) (make-i/o-file-already-exists-error . G4b7d) (make-i/o-error . G4ae0) (make-i/o-encoding-error . G4bd7) (make-i/o-decoding-error . G4bc1) (make-custom-textual-output-port . G4fd5) (make-custom-textual-input/output-port . G4fd4) (make-custom-textual-input-port . G4fd3) (make-custom-binary-output-port . G4fd2) (make-custom-binary-input/output-port . G4fd1) (make-custom-binary-input-port . G4fd0) (make-bytevector . G4fcf) (lookahead-u8 . G4fce) (lookahead-char . G4fcd) (i/o-write-error? . G4b0c) (i/o-read-error? . G4af7) (i/o-port-error? . G4bac) (i/o-invalid-position-error? . G4b24) (i/o-filename-error? . G4b3e) (i/o-file-protection-error? . G4b55) (i/o-file-is-read-only-error? . G4b6a) (i/o-file-does-not-exist-error? . G4b94) (i/o-file-already-exists-error? . G4b7f) (i/o-error? . G4ae2) (i/o-error-position . G4b26) (i/o-error-port . G4bae) (i/o-error-filename . G4b40) (i/o-encoding-error? . G4bdb) (i/o-encoding-error-char . G4bdd) (i/o-decoding-error? . G4bc3) (get-u8 . G4fcc) (get-string-n! . G4fcb) (get-string-n . G4fca) (get-string-all . G4fc9) (get-line . G4fc8) (get-datum . G4fc7) (get-char . G4fc6) (get-bytevector-some . G4fc5) (get-bytevector-n! . G4fc4) (get-bytevector-n . G4fc3) (get-bytevector-all . G4fc2) (flush-output-port . G4fc1) (close-port . G4fc0) (exit . G4fb8) (command-line . G4d0c) (remove . G4fb3) (remv . G4fb2) (remp . G4fb1) (remq . G4fb0) (partition . G4faf) (memv . G4fae) (memq . G4fad) (memp . G4fac) (member . G4fab) (exists . G4faa) (for-all . G4fa9) (fold-right . G4fa8) (fold-left . G4fa7) (find . G4fa6) (filter . G4fa5) (cons* . G4fa4) (assv . G4fa3) (assq . G4fa2) (assp . G4fa1) (assoc . G4fa0) (call-with-string-output-port . G4f9f) (call-with-port . G4f9e) (call-with-bytevector-output-port . G4f9d) (bytevector->string . G4f9c) (buffer-mode? . G4f9b) (binary-port? . G4f9a) (with-exception-handler . G4f99) (raise-continuable . G4f98) (raise . G4f97) (make-enumeration . G4f96) (enum-set=? . G4f95) (enum-set-universe . G4f94) (enum-set-union . G4f93) (enum-set-subset? . G4f92) (enum-set-projection . G4f91) (enum-set-member? . G4f90) (enum-set-intersection . G4f8f) (enum-set-indexer . G4f8e) (enum-set-difference . G4f8d) (enum-set-constructor . G4f8c) (enum-set-complement . G4f8b) (enum-set->list . G4f8a) (who-condition? . G4a58) (warning? . G49d2) (violation? . G4a11) (undefined-violation? . G4acd) (syntax-violation? . G4ab4) (syntax-violation-subform . G4ab8) (syntax-violation-form . G4ab6) (syntax-violation . G3049) (simple-conditions . G4f89) (serious-condition? . G49e7) (non-continuable-violation? . G4a6f) (message-condition? . G49bb) (make-who-condition . G4a54) (make-warning . G49d0) (make-violation . G4a0f) (make-undefined-violation . G4acb) (make-syntax-violation . G4aae) (make-serious-condition . G49e5) (make-non-continuable-violation . G4a6d) (make-message-condition . G49b7) (make-lexical-violation . G4a97) (make-irritants-condition . G4a3a) (make-implementation-restriction-violation . G4a82) (make-error . G49fa) (make-assertion-violation . G4a24) (lexical-violation? . G4a99) (irritants-condition? . G4a3e) (implementation-restriction-violation? . G4a84) (error? . G49fc) (condition-who . G4a5a) (condition-predicate . G4f88) (condition-message . G49bd) (condition-irritants . G4a40) (condition-accessor . G4f87) (condition . G4f86) (assertion-violation? . G4a26) (condition? . G4f85) (utf32->string . G4f84) (utf16->string . G4f83) (utf8->string . G4f82) (uint-list->bytevector . G4f81) (u8-list->bytevector . G4f80) (string->utf8 . G4f7f) (string->utf32 . G4f7e) (string->utf16 . G4f7d) (sint-list->bytevector . G4f7c) (native-endianness . G4f7b) (bytevector? . G4f7a) (bytevector=? . G4f79) (bytevector-uint-set! . G4f78) (bytevector-uint-ref . G4f77) (bytevector-u8-set! . G4f76) (bytevector-u8-ref . G4f75) (bytevector-u64-set! . G4f74) (bytevector-u64-ref . G4f73) (bytevector-u64-native-set! . G4f72) (bytevector-u64-native-ref . G4f71) (bytevector-u32-set! . G4f70) (bytevector-u32-ref . G4f6f) (bytevector-u32-native-set! . G4f6e) (bytevector-u32-native-ref . G4f6d) (bytevector-u16-set! . G4f6c) (bytevector-u16-ref . G4f6b) (bytevector-u16-native-set! . G4f6a) (bytevector-u16-native-ref . G4f69) (bytevector-sint-set! . G4f68) (bytevector-sint-ref . G4f67) (bytevector-s8-set! . G4f66) (bytevector-s8-ref . G4f65) (bytevector-s64-set! . G4f64) (bytevector-s64-ref . G4f63) (bytevector-s64-native-set! . G4f62) (bytevector-s64-native-ref . G4f61) (bytevector-s32-set! . G4f60) (bytevector-s32-ref . G4f5f) (bytevector-s32-native-set! . G4f5e) (bytevector-s32-native-ref . G4f5d) (bytevector-s16-set! . G4f5c) (bytevector-s16-ref . G4f5b) (bytevector-s16-native-set! . G4f5a) (bytevector-s16-native-ref . G4f59) (bytevector-length . G4f58) (bytevector-ieee-single-ref . G4f57) (bytevector-ieee-single-set! . G4f56) (bytevector-ieee-single-native-set! . G4f55) (bytevector-ieee-single-native-ref . G4f54) (bytevector-ieee-double-set! . G4f53) (bytevector-ieee-double-ref . G4f52) (bytevector-ieee-double-native-set! . G4f51) (bytevector-ieee-double-native-ref . G4f50) (bytevector-fill! . G4f4f) (bytevector-copy! . G4f4e) (bytevector-copy . G4f4d) (bytevector->uint-list . G4f4c) (bytevector->u8-list . G4f4b) (bytevector->sint-list . G4f4a) (no-nans-violation? . G4c07) (no-infinities-violation? . G4bf2) (make-no-nans-violation . G4c05) (make-no-infinities-violation . G4bf0) (real->flonum . G4f49) (flzero? . G4f48) (fltruncate . G4f47) (fltan . G4f46) (flsqrt . G4f45) (flsin . G4f44) (flround . G4f43) (flpositive? . G4f42) (flonum? . G4f41) (flodd? . G4f40) (flnumerator . G4f3f) (flnegative? . G4f3e) (flnan? . G4f3d) (flmod0 . G4f3c) (flmod . G4f3b) (flmin . G4f3a) (flmax . G4f39) (fllog . G4f38) (flinteger? . G4f37) (flinfinite? . G4f36) (flfloor . G4f35) (flfinite? . G4f34) (flexpt . G4f33) (flexp . G4f32) (fleven? . G4f31) (fldiv0-and-mod0 . G4f30) (fldiv0 . G4f2f) (fldiv-and-mod . G4f2e) (fldiv . G4f2d) (fldenominator . G4f2c) (flcos . G4f2b) (flceiling . G4f2a) (flatan . G4f29) (flasin . G4f28) (flacos . G4f27) (flabs . G4f26) (fl>? . G4f25) (fl>=? . G4f24) (fl=? . G4f23) (fl<? . G4f22) (fl<=? . G4f21) (fl/ . G4f20) (fl- . G4f1f) (fl+ . G4f1e) (fl* . G4f1d) (fixnum->flonum . G4f1c) (fxzero? . G4f1b) (fxxor . G4f1a) (fxrotate-bit-field . G4f19) (fxreverse-bit-field . G4f18) (fxpositive? . G4f17) (fxodd? . G4f16) (fxnot . G4f15) (fxnegative? . G4f14) (fxmod0 . G4f13) (fxmod . G4f12) (fxmin . G4f11) (fxmax . G4f10) (fxlength . G4f0f) (fxior . G4f0e) (fxif . G4f0d) (fxfirst-bit-set . G4f0c) (fxeven? . G4f0b) (fxdiv0-and-mod0 . G4f0a) (fxdiv0 . G4f09) (fxdiv-and-mod . G4f08) (fxdiv . G4f07) (fxcopy-bit-field . G4f06) (fxcopy-bit . G4f05) (fxbit-set? . G4f04) (fxbit-field . G4f03) (fxbit-count . G4f02) (fxarithmetic-shift-right . G4f01) (fxarithmetic-shift-left . G4f00) (fxarithmetic-shift . G4eff) (fxand . G4efe) (fx>? . G4efd) (fx>=? . G4efc) (fx=? . G4efb) (fx<? . G4efa) (fx<=? . G4ef9) (fx-/carry . G4ef8) (fx- . G4ef7) (fx+/carry . G4ef6) (fx+ . G4ef5) (fx*/carry . G4ef4) (fx* . G4ef3) (greatest-fixnum . G4ef2) (least-fixnum . G4ef1) (fixnum-width . G4ef0) (fixnum? . G4eef) (bitwise-rotate-bit-field . G4eee) (bitwise-reverse-bit-field . G4eed) (bitwise-length . G4eec) (bitwise-if . G4eeb) (bitwise-first-bit-set . G4eea) (bitwise-copy-bit-field . G4ee9) (bitwise-copy-bit . G4ee8) (bitwise-bit-set? . G4ee7) (bitwise-bit-field . G4ee6) (bitwise-bit-count . G4ee5) (bitwise-xor . G4ee4) (bitwise-ior . G4ee3) (bitwise-and . G4ee2) (bitwise-not . G4ee1) (bitwise-arithmetic-shift-right . G4ee0) (bitwise-arithmetic-shift-left . G4edf) (bitwise-arithmetic-shift . G4ede) (zero? . G4edd) (vector? . G4edc) (vector-set! . G4edb) (vector-ref . G4eda) (vector-map . G4ed9) (vector-length . G4ed8) (vector-for-each . G4ed7) (vector-fill! . G4ed6) (vector->list . G4ed5) (vector . G4ed4) (values . G4ed3) (truncate . G4ed2) (tan . G4ed1) (symbol? . G4ed0) (symbol=? . G4ecf) (symbol->string . G4ece) (substring . G4ecd) (string? . G4ecc) (string>? . G4ecb) (string>=? . G4eca) (string=? . G4ec9) (string<? . G4ec8) (string<=? . G4ec7) (string-ref . G4ec6) (string-length . G4ec5) (string-for-each . G4ec4) (string-copy . G4ec3) (string-append . G4ec2) (string->symbol . G4ec1) (string->number . G4ec0) (string->list . G4ebf) (string . G4ebe) (sqrt . G4ebd) (sin . G4ebc) (round . G4ebb) (reverse . G4eba) (real? . G4eb9) (real-valued? . G4eb8) (real-part . G4eb7) (rationalize . G4eb6) (rational? . G4eb5) (rational-valued? . G4eb4) (procedure? . G4eb3) (positive? . G4eb2) (pair? . G4eb1) (odd? . G4eb0) (numerator . G4eaf) (number? . G4eae) (number->string . G4ead) (null? . G4eac) (not . G4eab) (negative? . G4eaa) (nan? . G4ea9) (min . G4ea8) (max . G4ea7) (map . G4ea6) (make-vector . G4ea5) (make-string . G4ea4) (make-rectangular . G4ea3) (make-polar . G4ea2) (magnitude . G4ea1) (log . G4ea0) (list? . G4e9f) (list-tail . G4e9e) (list-ref . G4e9d) (list->vector . G4e9c) (list->string . G4e9b) (list . G4e9a) (length . G4e99) (lcm . G4e98) (integer? . G4e97) (integer-valued? . G4e96) (integer->char . G4e95) (infinite? . G4e94) (inexact? . G4e93) (inexact . G4e92) (imag-part . G4e91) (gcd . G4e90) (for-each . G4e8f) (floor . G4e8e) (finite? . G4e8d) (expt . G4e8c) (exp . G4e8b) (exact? . G4e8a) (exact-integer-sqrt . G4e89) (exact . G4e88) (even? . G4e87) (error . G4e86) (eqv? . G4e85) (equal? . G4e84) (eq? . G4e83) (dynamic-wind . G4e82) (div0-and-mod0 . G4e81) (mod0 . G4e80) (div0 . G4e7f) (div-and-mod . G4e7e) (mod . G4e7d) (div . G4e7c) (denominator . G4e7b) (cos . G4e7a) (cons . G4e79) (complex? . G4e78) (char? . G4e77) (char>? . G4e76) (char>=? . G4e75) (char=? . G4e74) (char<? . G4e73) (char<=? . G4e72) (char->integer . G4e71) (ceiling . G4e70) (call-with-values . G4e6f) (call/cc . G4e6e) (call-with-current-continuation . G4e6d) (cddddr . G4e6c) (cdddar . G4e6b) (cddadr . G4e6a) (cddaar . G4e69) (cdaddr . G4e68) (cdadar . G4e67) (cdaadr . G4e66) (cdaaar . G4e65) (cadddr . G4e64) (caddar . G4e63) (cadadr . G4e62) (cadaar . G4e61) (caaddr . G4e60) (caadar . G4e5f) (caaadr . G4e5e) (caaaar . G4e5d) (cdddr . G4e5c) (cddar . G4e5b) (cdadr . G4e5a) (cdaar . G4e59) (caddr . G4e58) (cadar . G4e57) (caadr . G4e56) (caaar . G4e55) (cddr . G4e54) (cdar . G4e53) (cadr . G4e52) (caar . G4e51) (cdr . G4e50) (car . G4e4f) (boolean? . G4e4e) (boolean=? . G4e4d) (atan . G4e4c) (assertion-violation . G4e4b) (asin . G4e4a) (apply . G4e49) (append . G4e48) (angle . G4e47) (acos . G4e46) (abs . G4e45) (/ . G4e44) (* . G4e43) (- . G4e42) (+ . G4e41) (>= . G4e40) (> . G4e3f) (= . G4e3e) (<= . G4e3d) (< . G4e3c) (&no-nans . G4e39) (&no-infinities . G4e38) (&i/o-encoding . G4e37) (&i/o-decoding . G4e36) (&i/o-port . G4e35) (&i/o-file-does-not-exist . G4e34) (&i/o-file-already-exists . G4e33) (&i/o-file-is-read-only . G4e32) (&i/o-file-protection . G4e31) (&i/o-filename . G4e30) (&i/o-invalid-position . G4e2f) (&i/o-write . G4e2e) (&i/o-read . G4e2d) (&i/o . G4e2c) (&undefined . G4e2b) (&syntax . G4e2a) (&lexical . G4e29) (&implementation-restriction . G4e28) (&non-continuable . G4e27) (&who . G4e26) (&irritants . G4e25) (&assertion . G4e24) (&violation . G4e23) (&error . G4e22) (&serious . G4e21) (&warning . G4e20) (&message . G4e1f) (&condition . G4e1e) (define-condition-type . G4e1d) (define-enumeration . G4e1c) (define-record-type . G4e1b) (parent-rtd . G4e1a) (nongenerative . G4e19) (opaque . G4e18) (sealed . G4e17) (protocol . G4e16) (parent . G4e15) (immutable . G4e14) (mutable . G4e13) (fields . G4e12) (error-handling-mode . G4e11) (file-options . G4e10) (buffer-mode . G4e0f) (eol-style . G4e0e) (guard . G4e0d) (unsyntax-splicing . G4e0a) (unsyntax . G4e09) (unquote-splicing . G4e08) (unquote . G4e07) (_ . G4e06) (else . G4e05) (=> . G4e04) (... . G4e03) (assert . G4e02) (endianness . G4e01) (do . G4dfe) (cond . G4dfd) (let* . G4dfc) (let . G4dfb) (let*-values . G4dfa) (let-values . G4df9) (identifier-syntax . G4df8) (with-syntax . G4df7) (quasisyntax . G4df6) (quasiquote . G4df5) (syntax-rules . G4df4) (record-constructor-descriptor . G4df1) (record-type-descriptor . G4df0) (case . G4def) (unless . G4ded) (when . G4dec) (or . G4deb) (and . G4dea) (if . G4de9) (letrec* . G4de8) (letrec . G4de7) (case-lambda . G4de5) (lambda . G4de4) (syntax . G4de3) (syntax-case . G4de2) (quote . G4de1) (letrec-syntax . G4ddf) (let-syntax . G4dde) (set! . G4ddd) (begin . G4ddb) (define-syntax . G4dd9) (define . G4dd8)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50bc '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3025) (quotient . G4fbf) (null-environment . G3023) (remainder . G4fbe) (modulo . G4fbd) (inexact->exact . G4fbc) (force . G4fbb) (exact->inexact . G4fba) (make-promise . G4fb9) (delay . G4e00)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50bd '(rnrs control) '(6) '() '() '() '((do . G4dfe) (unless . G4ded) (when . G4dec) (case-lambda . G4de5)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50be '(rnrs eval) '(6) '() '() '() '((eval . G3029) (environment . G3021)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50bf '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fb5) (set-car! . G4fb4)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c0 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fb7) (string-set! . G4fb6)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c1 '(rnrs programs) '(6) '() '() '() '((exit . G4fb8) (command-line . G4d0c)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c2 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2d99) (identifier? . G304b) (generate-temporaries . G3037) (free-identifier=? . G3039) (syntax->datum . G304f) (datum->syntax . G304d) (bound-identifier=? . G303b) (syntax-violation . G3049) (unsyntax-splicing . G4e0a) (unsyntax . G4e09) (_ . G4e06) (... . G4e03) (with-syntax . G4df7) (quasisyntax . G4df6) (syntax . G4de3) (syntax-case . G4de2)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c3 '(rnrs files) '(6) '() '() '() '((delete-file . G5028) (file-exists? . G5027) (make-i/o-write-error . G4b0a) (make-i/o-read-error . G4af5) (make-i/o-port-error . G4ba8) (make-i/o-invalid-position-error . G4b20) (make-i/o-filename-error . G4b3a) (make-i/o-file-protection-error . G4b53) (make-i/o-file-is-read-only-error . G4b68) (make-i/o-file-does-not-exist-error . G4b92) (make-i/o-file-already-exists-error . G4b7d) (make-i/o-error . G4ae0) (i/o-write-error? . G4b0c) (i/o-read-error? . G4af7) (i/o-port-error? . G4bac) (i/o-invalid-position-error? . G4b24) (i/o-filename-error? . G4b3e) (i/o-file-protection-error? . G4b55) (i/o-file-is-read-only-error? . G4b6a) (i/o-file-does-not-exist-error? . G4b94) (i/o-file-already-exists-error? . G4b7f) (i/o-error? . G4ae2) (i/o-error-position . G4b26) (i/o-error-port . G4bae) (i/o-error-filename . G4b40) (&i/o-port . G4e35) (&i/o-file-does-not-exist . G4e34) (&i/o-file-already-exists . G4e33) (&i/o-file-is-read-only . G4e32) (&i/o-file-protection . G4e31) (&i/o-filename . G4e30) (&i/o-invalid-position . G4e2f) (&i/o-write . G4e2e) (&i/o-read . G4e2d) (&i/o . G4e2c)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c4 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5026) (vector-sort . G5025) (list-sort . G5024)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c5 '(rnrs base) '(6) '() '() '() '((zero? . G4edd) (vector? . G4edc) (vector-set! . G4edb) (vector-ref . G4eda) (vector-map . G4ed9) (vector-length . G4ed8) (vector-for-each . G4ed7) (vector-fill! . G4ed6) (vector->list . G4ed5) (vector . G4ed4) (values . G4ed3) (truncate . G4ed2) (tan . G4ed1) (symbol? . G4ed0) (symbol=? . G4ecf) (symbol->string . G4ece) (substring . G4ecd) (string? . G4ecc) (string>? . G4ecb) (string>=? . G4eca) (string=? . G4ec9) (string<? . G4ec8) (string<=? . G4ec7) (string-ref . G4ec6) (string-length . G4ec5) (string-for-each . G4ec4) (string-copy . G4ec3) (string-append . G4ec2) (string->symbol . G4ec1) (string->number . G4ec0) (string->list . G4ebf) (string . G4ebe) (sqrt . G4ebd) (sin . G4ebc) (round . G4ebb) (reverse . G4eba) (real? . G4eb9) (real-valued? . G4eb8) (real-part . G4eb7) (rationalize . G4eb6) (rational? . G4eb5) (rational-valued? . G4eb4) (procedure? . G4eb3) (positive? . G4eb2) (pair? . G4eb1) (odd? . G4eb0) (numerator . G4eaf) (number? . G4eae) (number->string . G4ead) (null? . G4eac) (not . G4eab) (negative? . G4eaa) (nan? . G4ea9) (min . G4ea8) (max . G4ea7) (map . G4ea6) (make-vector . G4ea5) (make-string . G4ea4) (make-rectangular . G4ea3) (make-polar . G4ea2) (magnitude . G4ea1) (log . G4ea0) (list? . G4e9f) (list-tail . G4e9e) (list-ref . G4e9d) (list->vector . G4e9c) (list->string . G4e9b) (list . G4e9a) (length . G4e99) (lcm . G4e98) (integer? . G4e97) (integer-valued? . G4e96) (integer->char . G4e95) (infinite? . G4e94) (inexact? . G4e93) (inexact . G4e92) (imag-part . G4e91) (gcd . G4e90) (for-each . G4e8f) (floor . G4e8e) (finite? . G4e8d) (expt . G4e8c) (exp . G4e8b) (exact? . G4e8a) (exact-integer-sqrt . G4e89) (exact . G4e88) (even? . G4e87) (error . G4e86) (eqv? . G4e85) (equal? . G4e84) (eq? . G4e83) (dynamic-wind . G4e82) (div0-and-mod0 . G4e81) (mod0 . G4e80) (div0 . G4e7f) (div-and-mod . G4e7e) (mod . G4e7d) (div . G4e7c) (denominator . G4e7b) (cos . G4e7a) (cons . G4e79) (complex? . G4e78) (char? . G4e77) (char>? . G4e76) (char>=? . G4e75) (char=? . G4e74) (char<? . G4e73) (char<=? . G4e72) (char->integer . G4e71) (ceiling . G4e70) (call-with-values . G4e6f) (call/cc . G4e6e) (call-with-current-continuation . G4e6d) (cddddr . G4e6c) (cdddar . G4e6b) (cddadr . G4e6a) (cddaar . G4e69) (cdaddr . G4e68) (cdadar . G4e67) (cdaadr . G4e66) (cdaaar . G4e65) (cadddr . G4e64) (caddar . G4e63) (cadadr . G4e62) (cadaar . G4e61) (caaddr . G4e60) (caadar . G4e5f) (caaadr . G4e5e) (caaaar . G4e5d) (cdddr . G4e5c) (cddar . G4e5b) (cdadr . G4e5a) (cdaar . G4e59) (caddr . G4e58) (cadar . G4e57) (caadr . G4e56) (caaar . G4e55) (cddr . G4e54) (cdar . G4e53) (cadr . G4e52) (caar . G4e51) (cdr . G4e50) (car . G4e4f) (boolean? . G4e4e) (boolean=? . G4e4d) (atan . G4e4c) (assertion-violation . G4e4b) (asin . G4e4a) (apply . G4e49) (append . G4e48) (angle . G4e47) (acos . G4e46) (abs . G4e45) (/ . G4e44) (* . G4e43) (- . G4e42) (+ . G4e41) (>= . G4e40) (> . G4e3f) (= . G4e3e) (<= . G4e3d) (< . G4e3c) (unquote-splicing . G4e08) (unquote . G4e07) (_ . G4e06) (else . G4e05) (=> . G4e04) (... . G4e03) (assert . G4e02) (cond . G4dfd) (let* . G4dfc) (let . G4dfb) (let*-values . G4dfa) (let-values . G4df9) (identifier-syntax . G4df8) (quasiquote . G4df5) (syntax-rules . G4df4) (case . G4def) (or . G4deb) (and . G4dea) (if . G4de9) (letrec* . G4de8) (letrec . G4de7) (lambda . G4de4) (quote . G4de1) (letrec-syntax . G4ddf) (let-syntax . G4dde) (set! . G4ddd) (begin . G4ddb) (define-syntax . G4dd9) (define . G4dd8)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c6 '(rnrs lists) '(6) '() '() '() '((remove . G4fb3) (remv . G4fb2) (remp . G4fb1) (remq . G4fb0) (partition . G4faf) (memv . G4fae) (memq . G4fad) (memp . G4fac) (member . G4fab) (exists . G4faa) (for-all . G4fa9) (fold-right . G4fa8) (fold-left . G4fa7) (find . G4fa6) (filter . G4fa5) (cons* . G4fa4) (assv . G4fa3) (assq . G4fa2) (assp . G4fa1) (assoc . G4fa0)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c7 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G500e) (call-with-input-file . G500d) (write-char . G500c) (write . G500b) (with-output-to-file . G500a) (with-input-from-file . G5009) (read-char . G5008) (read . G5007) (peek-char . G5006) (open-output-file . G5005) (open-input-file . G5004) (newline . G5003) (display . G5002) (close-output-port . G5001) (close-input-port . G5000) (eof-object? . G4fff) (eof-object . G4ffe) (current-error-port . G4ffd) (current-output-port . G4ffc) (current-input-port . G4ffb) (output-port? . G4ffa) (input-port? . G4ff9) (make-i/o-write-error . G4b0a) (make-i/o-read-error . G4af5) (make-i/o-port-error . G4ba8) (make-i/o-invalid-position-error . G4b20) (make-i/o-filename-error . G4b3a) (make-i/o-file-protection-error . G4b53) (make-i/o-file-is-read-only-error . G4b68) (make-i/o-file-does-not-exist-error . G4b92) (make-i/o-file-already-exists-error . G4b7d) (make-i/o-error . G4ae0) (i/o-write-error? . G4b0c) (i/o-read-error? . G4af7) (i/o-port-error? . G4bac) (i/o-invalid-position-error? . G4b24) (i/o-filename-error? . G4b3e) (i/o-file-protection-error? . G4b55) (i/o-file-is-read-only-error? . G4b6a) (i/o-file-does-not-exist-error? . G4b94) (i/o-file-already-exists-error? . G4b7f) (i/o-error? . G4ae2) (i/o-error-position . G4b26) (i/o-error-port . G4bae) (i/o-error-filename . G4b40) (&i/o-port . G4e35) (&i/o-file-does-not-exist . G4e34) (&i/o-file-already-exists . G4e33) (&i/o-file-is-read-only . G4e32) (&i/o-file-protection . G4e31) (&i/o-filename . G4e30) (&i/o-invalid-position . G4e2f) (&i/o-write . G4e2e) (&i/o-read . G4e2d) (&i/o . G4e2c)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c8 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fcf) (utf32->string . G4f84) (utf16->string . G4f83) (utf8->string . G4f82) (uint-list->bytevector . G4f81) (u8-list->bytevector . G4f80) (string->utf8 . G4f7f) (string->utf32 . G4f7e) (string->utf16 . G4f7d) (sint-list->bytevector . G4f7c) (native-endianness . G4f7b) (bytevector? . G4f7a) (bytevector=? . G4f79) (bytevector-uint-set! . G4f78) (bytevector-uint-ref . G4f77) (bytevector-u8-set! . G4f76) (bytevector-u8-ref . G4f75) (bytevector-u64-set! . G4f74) (bytevector-u64-ref . G4f73) (bytevector-u64-native-set! . G4f72) (bytevector-u64-native-ref . G4f71) (bytevector-u32-set! . G4f70) (bytevector-u32-ref . G4f6f) (bytevector-u32-native-set! . G4f6e) (bytevector-u32-native-ref . G4f6d) (bytevector-u16-set! . G4f6c) (bytevector-u16-ref . G4f6b) (bytevector-u16-native-set! . G4f6a) (bytevector-u16-native-ref . G4f69) (bytevector-sint-set! . G4f68) (bytevector-sint-ref . G4f67) (bytevector-s8-set! . G4f66) (bytevector-s8-ref . G4f65) (bytevector-s64-set! . G4f64) (bytevector-s64-ref . G4f63) (bytevector-s64-native-set! . G4f62) (bytevector-s64-native-ref . G4f61) (bytevector-s32-set! . G4f60) (bytevector-s32-ref . G4f5f) (bytevector-s32-native-set! . G4f5e) (bytevector-s32-native-ref . G4f5d) (bytevector-s16-set! . G4f5c) (bytevector-s16-ref . G4f5b) (bytevector-s16-native-set! . G4f5a) (bytevector-s16-native-ref . G4f59) (bytevector-length . G4f58) (bytevector-ieee-single-ref . G4f57) (bytevector-ieee-single-set! . G4f56) (bytevector-ieee-single-native-set! . G4f55) (bytevector-ieee-single-native-ref . G4f54) (bytevector-ieee-double-set! . G4f53) (bytevector-ieee-double-ref . G4f52) (bytevector-ieee-double-native-set! . G4f51) (bytevector-ieee-double-native-ref . G4f50) (bytevector-fill! . G4f4f) (bytevector-copy! . G4f4e) (bytevector-copy . G4f4d) (bytevector->uint-list . G4f4c) (bytevector->u8-list . G4f4b) (bytevector->sint-list . G4f4a) (endianness . G4e01)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50c9 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5056) (string-titlecase . G5055) (string-normalize-nfkd . G5054) (string-normalize-nfkc . G5053) (string-normalize-nfd . G5052) (string-normalize-nfc . G5051) (string-foldcase . G5050) (string-downcase . G504f) (string-ci>? . G504e) (string-ci>=? . G504d) (string-ci=? . G504c) (string-ci<? . G504b) (string-ci<=? . G504a) (char-whitespace? . G5049) (char-upper-case? . G5048) (char-title-case? . G5047) (char-numeric? . G5046) (char-lower-case? . G5045) (char-general-category . G5044) (char-upcase . G5043) (char-titlecase . G5042) (char-foldcase . G5041) (char-downcase . G5040) (char-ci>? . G503f) (char-ci>=? . G503e) (char-ci=? . G503d) (char-ci<? . G503c) (char-ci<=? . G503b) (char-alphabetic? . G503a)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50ca '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f99) (raise-continuable . G4f98) (raise . G4f97) (guard . G4e0d) (else . G4e05) (=> . G4e04)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50cb '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4eee) (bitwise-reverse-bit-field . G4eed) (bitwise-length . G4eec) (bitwise-if . G4eeb) (bitwise-first-bit-set . G4eea) (bitwise-copy-bit-field . G4ee9) (bitwise-copy-bit . G4ee8) (bitwise-bit-set? . G4ee7) (bitwise-bit-field . G4ee6) (bitwise-bit-count . G4ee5) (bitwise-xor . G4ee4) (bitwise-ior . G4ee3) (bitwise-and . G4ee2) (bitwise-not . G4ee1) (bitwise-arithmetic-shift-right . G4ee0) (bitwise-arithmetic-shift-left . G4edf) (bitwise-arithmetic-shift . G4ede)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50cc '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f1b) (fxxor . G4f1a) (fxrotate-bit-field . G4f19) (fxreverse-bit-field . G4f18) (fxpositive? . G4f17) (fxodd? . G4f16) (fxnot . G4f15) (fxnegative? . G4f14) (fxmod0 . G4f13) (fxmod . G4f12) (fxmin . G4f11) (fxmax . G4f10) (fxlength . G4f0f) (fxior . G4f0e) (fxif . G4f0d) (fxfirst-bit-set . G4f0c) (fxeven? . G4f0b) (fxdiv0-and-mod0 . G4f0a) (fxdiv0 . G4f09) (fxdiv-and-mod . G4f08) (fxdiv . G4f07) (fxcopy-bit-field . G4f06) (fxcopy-bit . G4f05) (fxbit-set? . G4f04) (fxbit-field . G4f03) (fxbit-count . G4f02) (fxarithmetic-shift-right . G4f01) (fxarithmetic-shift-left . G4f00) (fxarithmetic-shift . G4eff) (fxand . G4efe) (fx>? . G4efd) (fx>=? . G4efc) (fx=? . G4efb) (fx<? . G4efa) (fx<=? . G4ef9) (fx-/carry . G4ef8) (fx- . G4ef7) (fx+/carry . G4ef6) (fx+ . G4ef5) (fx*/carry . G4ef4) (fx* . G4ef3) (greatest-fixnum . G4ef2) (least-fixnum . G4ef1) (fixnum-width . G4ef0) (fixnum? . G4eef)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50cd '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c07) (no-infinities-violation? . G4bf2) (make-no-nans-violation . G4c05) (make-no-infinities-violation . G4bf0) (real->flonum . G4f49) (flzero? . G4f48) (fltruncate . G4f47) (fltan . G4f46) (flsqrt . G4f45) (flsin . G4f44) (flround . G4f43) (flpositive? . G4f42) (flonum? . G4f41) (flodd? . G4f40) (flnumerator . G4f3f) (flnegative? . G4f3e) (flnan? . G4f3d) (flmod0 . G4f3c) (flmod . G4f3b) (flmin . G4f3a) (flmax . G4f39) (fllog . G4f38) (flinteger? . G4f37) (flinfinite? . G4f36) (flfloor . G4f35) (flfinite? . G4f34) (flexpt . G4f33) (flexp . G4f32) (fleven? . G4f31) (fldiv0-and-mod0 . G4f30) (fldiv0 . G4f2f) (fldiv-and-mod . G4f2e) (fldiv . G4f2d) (fldenominator . G4f2c) (flcos . G4f2b) (flceiling . G4f2a) (flatan . G4f29) (flasin . G4f28) (flacos . G4f27) (flabs . G4f26) (fl>? . G4f25) (fl>=? . G4f24) (fl=? . G4f23) (fl<? . G4f22) (fl<=? . G4f21) (fl/ . G4f20) (fl- . G4f1f) (fl+ . G4f1e) (fl* . G4f1d) (fixnum->flonum . G4f1c) (&no-nans . G4e39) (&no-infinities . G4e38)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50ce '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5023) (string-ci-hash . G5022) (string-hash . G5021) (equal-hash . G5020) (hashtable-equivalence-function . G501f) (make-hashtable . G501e) (hashtable-hash-function . G501d) (make-eqv-hashtable . G501c) (make-eq-hashtable . G501b) (hashtable? . G501a) (hashtable-update! . G5019) (hashtable-size . G5018) (hashtable-set! . G5017) (hashtable-ref . G5016) (hashtable-mutable? . G5015) (hashtable-keys . G5014) (hashtable-entries . G5013) (hashtable-delete! . G5012) (hashtable-copy . G5011) (hashtable-contains? . G5010) (hashtable-clear! . G500f)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50cf '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4fff) (eof-object . G4ffe) (current-error-port . G4ffd) (current-output-port . G4ffc) (current-input-port . G4ffb) (output-port? . G4ffa) (input-port? . G4ff9) (utf-8-codec . G4ff8) (utf-16-codec . G4ff7) (transcoder-error-handling-mode . G4ff6) (transcoder-eol-style . G4ff5) (transcoder-codec . G4ff4) (transcoded-port . G4ff3) (textual-port? . G4ff2) (string->bytevector . G4ff1) (standard-output-port . G4ff0) (standard-input-port . G4fef) (standard-error-port . G4fee) (set-port-position! . G4fed) (put-u8 . G4fec) (put-string . G4feb) (put-datum . G4fea) (put-char . G4fe9) (put-bytevector . G4fe8) (port? . G4fe7) (port-transcoder . G4fe6) (port-position . G4fe5) (port-has-set-port-position!? . G4fe4) (port-has-port-position? . G4fe3) (port-eof? . G4fe2) (output-port-buffer-mode . G4fe1) (open-string-output-port . G4fe0) (open-string-input-port . G4fdf) (open-file-output-port . G4fde) (open-file-input/output-port . G4fdd) (open-file-input-port . G4fdc) (open-bytevector-output-port . G4fdb) (open-bytevector-input-port . G4fda) (native-transcoder . G4fd9) (native-eol-style . G4fd8) (make-transcoder . G4fd7) (latin-1-codec . G4fd6) (make-i/o-write-error . G4b0a) (make-i/o-read-error . G4af5) (make-i/o-port-error . G4ba8) (make-i/o-invalid-position-error . G4b20) (make-i/o-filename-error . G4b3a) (make-i/o-file-protection-error . G4b53) (make-i/o-file-is-read-only-error . G4b68) (make-i/o-file-does-not-exist-error . G4b92) (make-i/o-file-already-exists-error . G4b7d) (make-i/o-error . G4ae0) (make-i/o-encoding-error . G4bd7) (make-i/o-decoding-error . G4bc1) (make-custom-textual-output-port . G4fd5) (make-custom-textual-input/output-port . G4fd4) (make-custom-textual-input-port . G4fd3) (make-custom-binary-output-port . G4fd2) (make-custom-binary-input/output-port . G4fd1) (make-custom-binary-input-port . G4fd0) (lookahead-u8 . G4fce) (lookahead-char . G4fcd) (i/o-write-error? . G4b0c) (i/o-read-error? . G4af7) (i/o-port-error? . G4bac) (i/o-invalid-position-error? . G4b24) (i/o-filename-error? . G4b3e) (i/o-file-protection-error? . G4b55) (i/o-file-is-read-only-error? . G4b6a) (i/o-file-does-not-exist-error? . G4b94) (i/o-file-already-exists-error? . G4b7f) (i/o-error? . G4ae2) (i/o-error-position . G4b26) (i/o-error-port . G4bae) (i/o-error-filename . G4b40) (i/o-encoding-error? . G4bdb) (i/o-encoding-error-char . G4bdd) (i/o-decoding-error? . G4bc3) (get-u8 . G4fcc) (get-string-n! . G4fcb) (get-string-n . G4fca) (get-string-all . G4fc9) (get-line . G4fc8) (get-datum . G4fc7) (get-char . G4fc6) (get-bytevector-some . G4fc5) (get-bytevector-n! . G4fc4) (get-bytevector-n . G4fc3) (get-bytevector-all . G4fc2) (flush-output-port . G4fc1) (close-port . G4fc0) (call-with-string-output-port . G4f9f) (call-with-port . G4f9e) (call-with-bytevector-output-port . G4f9d) (bytevector->string . G4f9c) (buffer-mode? . G4f9b) (binary-port? . G4f9a) (&i/o-encoding . G4e37) (&i/o-decoding . G4e36) (&i/o-port . G4e35) (&i/o-file-does-not-exist . G4e34) (&i/o-file-already-exists . G4e33) (&i/o-file-is-read-only . G4e32) (&i/o-file-protection . G4e31) (&i/o-filename . G4e30) (&i/o-invalid-position . G4e2f) (&i/o-write . G4e2e) (&i/o-read . G4e2d) (&i/o . G4e2c) (error-handling-mode . G4e11) (file-options . G4e10) (buffer-mode . G4e0f) (eol-style . G4e0e)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50d0 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f96) (enum-set=? . G4f95) (enum-set-universe . G4f94) (enum-set-union . G4f93) (enum-set-subset? . G4f92) (enum-set-projection . G4f91) (enum-set-member? . G4f90) (enum-set-intersection . G4f8f) (enum-set-indexer . G4f8e) (enum-set-difference . G4f8d) (enum-set-constructor . G4f8c) (enum-set-complement . G4f8b) (enum-set->list . G4f8a) (define-enumeration . G4e1c)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50d1 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a58) (warning? . G49d2) (violation? . G4a11) (undefined-violation? . G4acd) (syntax-violation? . G4ab4) (syntax-violation-subform . G4ab8) (syntax-violation-form . G4ab6) (syntax-violation . G3049) (simple-conditions . G4f89) (serious-condition? . G49e7) (non-continuable-violation? . G4a6f) (message-condition? . G49bb) (make-who-condition . G4a54) (make-warning . G49d0) (make-violation . G4a0f) (make-undefined-violation . G4acb) (make-syntax-violation . G4aae) (make-serious-condition . G49e5) (make-non-continuable-violation . G4a6d) (make-message-condition . G49b7) (make-lexical-violation . G4a97) (make-irritants-condition . G4a3a) (make-implementation-restriction-violation . G4a82) (make-error . G49fa) (make-assertion-violation . G4a24) (lexical-violation? . G4a99) (irritants-condition? . G4a3e) (implementation-restriction-violation? . G4a84) (error? . G49fc) (condition-who . G4a5a) (condition-predicate . G4f88) (condition-message . G49bd) (condition-irritants . G4a40) (condition-accessor . G4f87) (condition . G4f86) (assertion-violation? . G4a26) (condition? . G4f85) (&undefined . G4e2b) (&syntax . G4e2a) (&lexical . G4e29) (&implementation-restriction . G4e28) (&non-continuable . G4e27) (&who . G4e26) (&irritants . G4e25) (&assertion . G4e24) (&violation . G4e23) (&error . G4e22) (&serious . G4e21) (&warning . G4e20) (&message . G4e1f) (&condition . G4e1e) (define-condition-type . G4e1d)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50d2 '(rnrs records inspection) '(6) '() '() '() '((record? . G5032) (record-type-uid . G5031) (record-type-sealed? . G5030) (record-type-parent . G502f) (record-type-opaque? . G502e) (record-type-name . G502d) (record-type-generative? . G502c) (record-type-field-names . G502b) (record-rtd . G502a) (record-field-mutable? . G5029)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50d3 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5039) (record-predicate . G5038) (record-mutator . G5037) (record-constructor . G5036) (record-accessor . G5035) (make-record-type-descriptor . G5034) (make-record-constructor-descriptor . G5033)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50d4 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e1b) (parent-rtd . G4e1a) (nongenerative . G4e19) (opaque . G4e18) (sealed . G4e17) (protocol . G4e16) (parent . G4e15) (immutable . G4e14) (mutable . G4e13) (fields . G4e12) (record-constructor-descriptor . G4df1) (record-type-descriptor . G4df0)) '() values values '#f '#f '#t '#f) (G2b75@G2a1a@install-library 'G50d5 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c0b) (&no-nans-rtd . G4c09) (&no-infinities-rcd . G4bf6) (&no-infinities-rtd . G4bf4) (&i/o-encoding-rcd . G4be1) (&i/o-encoding-rtd . G4bdf) (&i/o-decoding-rcd . G4bc7) (&i/o-decoding-rtd . G4bc5) (&i/o-port-rcd . G4bb2) (&i/o-port-rtd . G4bb0) (&i/o-file-does-not-exist-rcd . G4b98) (&i/o-file-does-not-exist-rtd . G4b96) (&i/o-file-already-exists-rcd . G4b83) (&i/o-file-already-exists-rtd . G4b81) (&i/o-file-is-read-only-rcd . G4b6e) (&i/o-file-is-read-only-rtd . G4b6c) (&i/o-file-protection-rcd . G4b59) (&i/o-file-protection-rtd . G4b57) (&i/o-filename-rcd . G4b44) (&i/o-filename-rtd . G4b42) (&i/o-invalid-position-rcd . G4b2a) (&i/o-invalid-position-rtd . G4b28) (&i/o-write-rcd . G4b10) (&i/o-write-rtd . G4b0e) (&i/o-read-rcd . G4afb) (&i/o-read-rtd . G4af9) (&i/o-rcd . G4ae6) (&i/o-rtd . G4ae4) (&undefined-rcd . G4ad1) (&undefined-rtd . G4acf) (&syntax-rcd . G4abc) (&syntax-rtd . G4aba) (&lexical-rcd . G4a9d) (&lexical-rtd . G4a9b) (&implementation-restriction-rcd . G4a88) (&implementation-restriction-rtd . G4a86) (&non-continuable-rcd . G4a73) (&non-continuable-rtd . G4a71) (&who-rcd . G4a5e) (&who-rtd . G4a5c) (&irritants-rcd . G4a44) (&irritants-rtd . G4a42) (&assertion-rcd . G4a2a) (&assertion-rtd . G4a28) (&violation-rcd . G4a15) (&violation-rtd . G4a13) (&error-rcd . G4a00) (&error-rtd . G49fe) (&serious-rcd . G49eb) (&serious-rtd . G49e9) (&warning-rcd . G49d6) (&warning-rtd . G49d4) (&message-rcd . G49c1) (&message-rtd . G49bf) (&condition-rcd . G4964) (&condition-rtd . G4962) (syntax-error . G3045) (syntax-dispatch . G2f5e) (pretty-print . G50b5) (eval-core . G50b4) (set-symbol-value! . G50b3) (symbol-value . G50b2) (gensym . G50b1) (void . G50b0) (load . G4d12) (interaction-environment . G3055) (char-ready? . G50af) (regexp? . G50ae) (read-line . G50ad) (dotted-list? . G50ac) (circular-list? . G50ab) (proper-list? . G50aa) (circular-list . G50a9) (last . G50a8) (last-pair . G50a7) (not-pair? . G50a6) (split-at! . G50a5) (split-at . G50a4) (list= . G50a3) (list-copy . G50a2) (list-tabulate . G50a1) (make-list . G50a0) (xcons . G509f) (tenth . G509e) (ninth . G509d) (eighth . G509c) (seventh . G509b) (sixth . G509a) (fifth . G5099) (drop-right! . G5098) (drop-right . G5097) (take-right . G5096) (take! . G5095) (drop . G5094) (take . G5093) (car+cdr . G5092) (third . G5091) (second . G5090) (first . G508f) (iota . G508e) (every . G508d) (ungensym . G508c) (assoc-ref . G508b) (alist-cons . G508a) (append-map . G5089) (print . G5088) (format . G5087) (standard-library-path . G5086) (file-newer? . G5085) (stat-mtime . G5084) (write-to-file . G5083) (file->list . G5082) (file->string . G5081) (digit->integer . G5080) (call-with-string-input-port . G507f) (call-with-string-io . G507e) (string-split . G507d) (bytevector-for-each . G507c) (string->regexp . G507b) (rxmatch . G507a) (regexp-replace-all . G5079) (hashtable-for-each . G5078) (call-process . G5077) (local-tz-offset . G5076) (microseconds . G5075) (readdir . G5074) (set-current-directory! . G5073) (expand-path . G5072) (current-directory . G5071) (%spawn . G5070) (%waitpid . G506f) (%ffi-pointer-ref . G506e) (%ffi-void*->string . G506d) (%ffi-call->void* . G506c) (%ffi-call->void . G506b) (%ffi-call->int . G506a) (%ffi-lookup . G5069) (%ffi-open . G5068) (%fork . G5067) (%pipe . G5066) (get-environment-variables . G5065) (get-environment-variable . G5064) (get-timeofday . G5063) (get-command-line . G5062) (sys-display . G5061) (source-info . G5060) (make-compiler-instruction . G505f) (make-instruction . G505e) (set-source-info! . G505d) (bignum? . G505c) (make-complex . G505b) (fast-equal? . G505a) (fasl-read . G5059) (fasl-write . G5058) (receive . G5057) (make-parameter . G2831) (string-upcase . G5056) (string-titlecase . G5055) (string-normalize-nfkd . G5054) (string-normalize-nfkc . G5053) (string-normalize-nfd . G5052) (string-normalize-nfc . G5051) (string-foldcase . G5050) (string-downcase . G504f) (string-ci>? . G504e) (string-ci>=? . G504d) (string-ci=? . G504c) (string-ci<? . G504b) (string-ci<=? . G504a) (char-whitespace? . G5049) (char-upper-case? . G5048) (char-title-case? . G5047) (char-numeric? . G5046) (char-lower-case? . G5045) (char-general-category . G5044) (char-upcase . G5043) (char-titlecase . G5042) (char-foldcase . G5041) (char-downcase . G5040) (char-ci>? . G503f) (char-ci>=? . G503e) (char-ci=? . G503d) (char-ci<? . G503c) (char-ci<=? . G503b) (char-alphabetic? . G503a) (make-variable-transformer . G2d99) (identifier? . G304b) (generate-temporaries . G3037) (free-identifier=? . G3039) (syntax->datum . G304f) (datum->syntax . G304d) (bound-identifier=? . G303b) (record-type-descriptor? . G5039) (record-predicate . G5038) (record-mutator . G5037) (record-constructor . G5036) (record-accessor . G5035) (make-record-type-descriptor . G5034) (make-record-constructor-descriptor . G5033) (record? . G5032) (record-type-uid . G5031) (record-type-sealed? . G5030) (record-type-parent . G502f) (record-type-opaque? . G502e) (record-type-name . G502d) (record-type-generative? . G502c) (record-type-field-names . G502b) (record-rtd . G502a) (record-field-mutable? . G5029) (delete-file . G5028) (file-exists? . G5027) (vector-sort! . G5026) (vector-sort . G5025) (list-sort . G5024) (symbol-hash . G5023) (string-ci-hash . G5022) (string-hash . G5021) (equal-hash . G5020) (hashtable-equivalence-function . G501f) (make-hashtable . G501e) (hashtable-hash-function . G501d) (make-eqv-hashtable . G501c) (make-eq-hashtable . G501b) (hashtable? . G501a) (hashtable-update! . G5019) (hashtable-size . G5018) (hashtable-set! . G5017) (hashtable-ref . G5016) (hashtable-mutable? . G5015) (hashtable-keys . G5014) (hashtable-entries . G5013) (hashtable-delete! . G5012) (hashtable-copy . G5011) (hashtable-contains? . G5010) (hashtable-clear! . G500f) (call-with-output-file . G500e) (call-with-input-file . G500d) (write-char . G500c) (write . G500b) (with-output-to-file . G500a) (with-input-from-file . G5009) (read-char . G5008) (read . G5007) (peek-char . G5006) (open-output-file . G5005) (open-input-file . G5004) (newline . G5003) (display . G5002) (close-output-port . G5001) (close-input-port . G5000) (eof-object? . G4fff) (eof-object . G4ffe) (current-error-port . G4ffd) (current-output-port . G4ffc) (current-input-port . G4ffb) (output-port? . G4ffa) (input-port? . G4ff9) (utf-8-codec . G4ff8) (utf-16-codec . G4ff7) (transcoder-error-handling-mode . G4ff6) (transcoder-eol-style . G4ff5) (transcoder-codec . G4ff4) (transcoded-port . G4ff3) (textual-port? . G4ff2) (string->bytevector . G4ff1) (standard-output-port . G4ff0) (standard-input-port . G4fef) (standard-error-port . G4fee) (set-port-position! . G4fed) (put-u8 . G4fec) (put-string . G4feb) (put-datum . G4fea) (put-char . G4fe9) (put-bytevector . G4fe8) (port? . G4fe7) (port-transcoder . G4fe6) (port-position . G4fe5) (port-has-set-port-position!? . G4fe4) (port-has-port-position? . G4fe3) (port-eof? . G4fe2) (output-port-buffer-mode . G4fe1) (open-string-output-port . G4fe0) (open-string-input-port . G4fdf) (open-file-output-port . G4fde) (open-file-input/output-port . G4fdd) (open-file-input-port . G4fdc) (open-bytevector-output-port . G4fdb) (open-bytevector-input-port . G4fda) (native-transcoder . G4fd9) (native-eol-style . G4fd8) (make-transcoder . G4fd7) (latin-1-codec . G4fd6) (make-i/o-write-error . G4b0a) (make-i/o-read-error . G4af5) (make-i/o-port-error . G4ba8) (make-i/o-invalid-position-error . G4b20) (make-i/o-filename-error . G4b3a) (make-i/o-file-protection-error . G4b53) (make-i/o-file-is-read-only-error . G4b68) (make-i/o-file-does-not-exist-error . G4b92) (make-i/o-file-already-exists-error . G4b7d) (make-i/o-error . G4ae0) (make-i/o-encoding-error . G4bd7) (make-i/o-decoding-error . G4bc1) (make-custom-textual-output-port . G4fd5) (make-custom-textual-input/output-port . G4fd4) (make-custom-textual-input-port . G4fd3) (make-custom-binary-output-port . G4fd2) (make-custom-binary-input/output-port . G4fd1) (make-custom-binary-input-port . G4fd0) (make-bytevector . G4fcf) (lookahead-u8 . G4fce) (lookahead-char . G4fcd) (i/o-write-error? . G4b0c) (i/o-read-error? . G4af7) (i/o-port-error? . G4bac) (i/o-invalid-position-error? . G4b24) (i/o-filename-error? . G4b3e) (i/o-file-protection-error? . G4b55) (i/o-file-is-read-only-error? . G4b6a) (i/o-file-does-not-exist-error? . G4b94) (i/o-file-already-exists-error? . G4b7f) (i/o-error? . G4ae2) (i/o-error-position . G4b26) (i/o-error-port . G4bae) (i/o-error-filename . G4b40) (i/o-encoding-error? . G4bdb) (i/o-encoding-error-char . G4bdd) (i/o-decoding-error? . G4bc3) (get-u8 . G4fcc) (get-string-n! . G4fcb) (get-string-n . G4fca) (get-string-all . G4fc9) (get-line . G4fc8) (get-datum . G4fc7) (get-char . G4fc6) (get-bytevector-some . G4fc5) (get-bytevector-n! . G4fc4) (get-bytevector-n . G4fc3) (get-bytevector-all . G4fc2) (flush-output-port . G4fc1) (close-port . G4fc0) (scheme-report-environment . G3025) (quotient . G4fbf) (null-environment . G3023) (remainder . G4fbe) (modulo . G4fbd) (inexact->exact . G4fbc) (force . G4fbb) (exact->inexact . G4fba) (make-promise . G4fb9) (exit . G4fb8) (command-line . G4d0c) (string-fill! . G4fb7) (string-set! . G4fb6) (set-cdr! . G4fb5) (set-car! . G4fb4) (remove . G4fb3) (remv . G4fb2) (remp . G4fb1) (remq . G4fb0) (partition . G4faf) (memv . G4fae) (memq . G4fad) (memp . G4fac) (member . G4fab) (exists . G4faa) (for-all . G4fa9) (fold-right . G4fa8) (fold-left . G4fa7) (find . G4fa6) (filter . G4fa5) (cons* . G4fa4) (assv . G4fa3) (assq . G4fa2) (assp . G4fa1) (assoc . G4fa0) (call-with-string-output-port . G4f9f) (call-with-port . G4f9e) (call-with-bytevector-output-port . G4f9d) (bytevector->string . G4f9c) (buffer-mode? . G4f9b) (binary-port? . G4f9a) (with-exception-handler . G4f99) (raise-continuable . G4f98) (raise . G4f97) (eval . G3029) (environment . G3021) (make-enumeration . G4f96) (enum-set=? . G4f95) (enum-set-universe . G4f94) (enum-set-union . G4f93) (enum-set-subset? . G4f92) (enum-set-projection . G4f91) (enum-set-member? . G4f90) (enum-set-intersection . G4f8f) (enum-set-indexer . G4f8e) (enum-set-difference . G4f8d) (enum-set-constructor . G4f8c) (enum-set-complement . G4f8b) (enum-set->list . G4f8a) (who-condition? . G4a58) (warning? . G49d2) (violation? . G4a11) (undefined-violation? . G4acd) (syntax-violation? . G4ab4) (syntax-violation-subform . G4ab8) (syntax-violation-form . G4ab6) (syntax-violation . G3049) (simple-conditions . G4f89) (serious-condition? . G49e7) (non-continuable-violation? . G4a6f) (message-condition? . G49bb) (make-who-condition . G4a54) (make-warning . G49d0) (make-violation . G4a0f) (make-undefined-violation . G4acb) (make-syntax-violation . G4aae) (make-serious-condition . G49e5) (make-non-continuable-violation . G4a6d) (make-message-condition . G49b7) (make-lexical-violation . G4a97) (make-irritants-condition . G4a3a) (make-implementation-restriction-violation . G4a82) (make-error . G49fa) (make-assertion-violation . G4a24) (lexical-violation? . G4a99) (irritants-condition? . G4a3e) (implementation-restriction-violation? . G4a84) (error? . G49fc) (condition-who . G4a5a) (condition-predicate . G4f88) (condition-message . G49bd) (condition-irritants . G4a40) (condition-accessor . G4f87) (condition . G4f86) (assertion-violation? . G4a26) (condition? . G4f85) (utf32->string . G4f84) (utf16->string . G4f83) (utf8->string . G4f82) (uint-list->bytevector . G4f81) (u8-list->bytevector . G4f80) (string->utf8 . G4f7f) (string->utf32 . G4f7e) (string->utf16 . G4f7d) (sint-list->bytevector . G4f7c) (native-endianness . G4f7b) (bytevector? . G4f7a) (bytevector=? . G4f79) (bytevector-uint-set! . G4f78) (bytevector-uint-ref . G4f77) (bytevector-u8-set! . G4f76) (bytevector-u8-ref . G4f75) (bytevector-u64-set! . G4f74) (bytevector-u64-ref . G4f73) (bytevector-u64-native-set! . G4f72) (bytevector-u64-native-ref . G4f71) (bytevector-u32-set! . G4f70) (bytevector-u32-ref . G4f6f) (bytevector-u32-native-set! . G4f6e) (bytevector-u32-native-ref . G4f6d) (bytevector-u16-set! . G4f6c) (bytevector-u16-ref . G4f6b) (bytevector-u16-native-set! . G4f6a) (bytevector-u16-native-ref . G4f69) (bytevector-sint-set! . G4f68) (bytevector-sint-ref . G4f67) (bytevector-s8-set! . G4f66) (bytevector-s8-ref . G4f65) (bytevector-s64-set! . G4f64) (bytevector-s64-ref . G4f63) (bytevector-s64-native-set! . G4f62) (bytevector-s64-native-ref . G4f61) (bytevector-s32-set! . G4f60) (bytevector-s32-ref . G4f5f) (bytevector-s32-native-set! . G4f5e) (bytevector-s32-native-ref . G4f5d) (bytevector-s16-set! . G4f5c) (bytevector-s16-ref . G4f5b) (bytevector-s16-native-set! . G4f5a) (bytevector-s16-native-ref . G4f59) (bytevector-length . G4f58) (bytevector-ieee-single-ref . G4f57) (bytevector-ieee-single-set! . G4f56) (bytevector-ieee-single-native-set! . G4f55) (bytevector-ieee-single-native-ref . G4f54) (bytevector-ieee-double-set! . G4f53) (bytevector-ieee-double-ref . G4f52) (bytevector-ieee-double-native-set! . G4f51) (bytevector-ieee-double-native-ref . G4f50) (bytevector-fill! . G4f4f) (bytevector-copy! . G4f4e) (bytevector-copy . G4f4d) (bytevector->uint-list . G4f4c) (bytevector->u8-list . G4f4b) (bytevector->sint-list . G4f4a) (no-nans-violation? . G4c07) (no-infinities-violation? . G4bf2) (make-no-nans-violation . G4c05) (make-no-infinities-violation . G4bf0) (real->flonum . G4f49) (flzero? . G4f48) (fltruncate . G4f47) (fltan . G4f46) (flsqrt . G4f45) (flsin . G4f44) (flround . G4f43) (flpositive? . G4f42) (flonum? . G4f41) (flodd? . G4f40) (flnumerator . G4f3f) (flnegative? . G4f3e) (flnan? . G4f3d) (flmod0 . G4f3c) (flmod . G4f3b) (flmin . G4f3a) (flmax . G4f39) (fllog . G4f38) (flinteger? . G4f37) (flinfinite? . G4f36) (flfloor . G4f35) (flfinite? . G4f34) (flexpt . G4f33) (flexp . G4f32) (fleven? . G4f31) (fldiv0-and-mod0 . G4f30) (fldiv0 . G4f2f) (fldiv-and-mod . G4f2e) (fldiv . G4f2d) (fldenominator . G4f2c) (flcos . G4f2b) (flceiling . G4f2a) (flatan . G4f29) (flasin . G4f28) (flacos . G4f27) (flabs . G4f26) (fl>? . G4f25) (fl>=? . G4f24) (fl=? . G4f23) (fl<? . G4f22) (fl<=? . G4f21) (fl/ . G4f20) (fl- . G4f1f) (fl+ . G4f1e) (fl* . G4f1d) (fixnum->flonum . G4f1c) (fxzero? . G4f1b) (fxxor . G4f1a) (fxrotate-bit-field . G4f19) (fxreverse-bit-field . G4f18) (fxpositive? . G4f17) (fxodd? . G4f16) (fxnot . G4f15) (fxnegative? . G4f14) (fxmod0 . G4f13) (fxmod . G4f12) (fxmin . G4f11) (fxmax . G4f10) (fxlength . G4f0f) (fxior . G4f0e) (fxif . G4f0d) (fxfirst-bit-set . G4f0c) (fxeven? . G4f0b) (fxdiv0-and-mod0 . G4f0a) (fxdiv0 . G4f09) (fxdiv-and-mod . G4f08) (fxdiv . G4f07) (fxcopy-bit-field . G4f06) (fxcopy-bit . G4f05) (fxbit-set? . G4f04) (fxbit-field . G4f03) (fxbit-count . G4f02) (fxarithmetic-shift-right . G4f01) (fxarithmetic-shift-left . G4f00) (fxarithmetic-shift . G4eff) (fxand . G4efe) (fx>? . G4efd) (fx>=? . G4efc) (fx=? . G4efb) (fx<? . G4efa) (fx<=? . G4ef9) (fx-/carry . G4ef8) (fx- . G4ef7) (fx+/carry . G4ef6) (fx+ . G4ef5) (fx*/carry . G4ef4) (fx* . G4ef3) (greatest-fixnum . G4ef2) (least-fixnum . G4ef1) (fixnum-width . G4ef0) (fixnum? . G4eef) (bitwise-rotate-bit-field . G4eee) (bitwise-reverse-bit-field . G4eed) (bitwise-length . G4eec) (bitwise-if . G4eeb) (bitwise-first-bit-set . G4eea) (bitwise-copy-bit-field . G4ee9) (bitwise-copy-bit . G4ee8) (bitwise-bit-set? . G4ee7) (bitwise-bit-field . G4ee6) (bitwise-bit-count . G4ee5) (bitwise-xor . G4ee4) (bitwise-ior . G4ee3) (bitwise-and . G4ee2) (bitwise-not . G4ee1) (bitwise-arithmetic-shift-right . G4ee0) (bitwise-arithmetic-shift-left . G4edf) (bitwise-arithmetic-shift . G4ede) (zero? . G4edd) (vector? . G4edc) (vector-set! . G4edb) (vector-ref . G4eda) (vector-map . G4ed9) (vector-length . G4ed8) (vector-for-each . G4ed7) (vector-fill! . G4ed6) (vector->list . G4ed5) (vector . G4ed4) (values . G4ed3) (truncate . G4ed2) (tan . G4ed1) (symbol? . G4ed0) (symbol=? . G4ecf) (symbol->string . G4ece) (substring . G4ecd) (string? . G4ecc) (string>? . G4ecb) (string>=? . G4eca) (string=? . G4ec9) (string<? . G4ec8) (string<=? . G4ec7) (string-ref . G4ec6) (string-length . G4ec5) (string-for-each . G4ec4) (string-copy . G4ec3) (string-append . G4ec2) (string->symbol . G4ec1) (string->number . G4ec0) (string->list . G4ebf) (string . G4ebe) (sqrt . G4ebd) (sin . G4ebc) (round . G4ebb) (reverse . G4eba) (real? . G4eb9) (real-valued? . G4eb8) (real-part . G4eb7) (rationalize . G4eb6) (rational? . G4eb5) (rational-valued? . G4eb4) (procedure? . G4eb3) (positive? . G4eb2) (pair? . G4eb1) (odd? . G4eb0) (numerator . G4eaf) (number? . G4eae) (number->string . G4ead) (null? . G4eac) (not . G4eab) (negative? . G4eaa) (nan? . G4ea9) (min . G4ea8) (max . G4ea7) (map . G4ea6) (make-vector . G4ea5) (make-string . G4ea4) (make-rectangular . G4ea3) (make-polar . G4ea2) (magnitude . G4ea1) (log . G4ea0) (list? . G4e9f) (list-tail . G4e9e) (list-ref . G4e9d) (list->vector . G4e9c) (list->string . G4e9b) (list . G4e9a) (length . G4e99) (lcm . G4e98) (integer? . G4e97) (integer-valued? . G4e96) (integer->char . G4e95) (infinite? . G4e94) (inexact? . G4e93) (inexact . G4e92) (imag-part . G4e91) (gcd . G4e90) (for-each . G4e8f) (floor . G4e8e) (finite? . G4e8d) (expt . G4e8c) (exp . G4e8b) (exact? . G4e8a) (exact-integer-sqrt . G4e89) (exact . G4e88) (even? . G4e87) (error . G4e86) (eqv? . G4e85) (equal? . G4e84) (eq? . G4e83) (dynamic-wind . G4e82) (div0-and-mod0 . G4e81) (mod0 . G4e80) (div0 . G4e7f) (div-and-mod . G4e7e) (mod . G4e7d) (div . G4e7c) (denominator . G4e7b) (cos . G4e7a) (cons . G4e79) (complex? . G4e78) (char? . G4e77) (char>? . G4e76) (char>=? . G4e75) (char=? . G4e74) (char<? . G4e73) (char<=? . G4e72) (char->integer . G4e71) (ceiling . G4e70) (call-with-values . G4e6f) (call/cc . G4e6e) (call-with-current-continuation . G4e6d) (cddddr . G4e6c) (cdddar . G4e6b) (cddadr . G4e6a) (cddaar . G4e69) (cdaddr . G4e68) (cdadar . G4e67) (cdaadr . G4e66) (cdaaar . G4e65) (cadddr . G4e64) (caddar . G4e63) (cadadr . G4e62) (cadaar . G4e61) (caaddr . G4e60) (caadar . G4e5f) (caaadr . G4e5e) (caaaar . G4e5d) (cdddr . G4e5c) (cddar . G4e5b) (cdadr . G4e5a) (cdaar . G4e59) (caddr . G4e58) (cadar . G4e57) (caadr . G4e56) (caaar . G4e55) (cddr . G4e54) (cdar . G4e53) (cadr . G4e52) (caar . G4e51) (cdr . G4e50) (car . G4e4f) (boolean? . G4e4e) (boolean=? . G4e4d) (atan . G4e4c) (assertion-violation . G4e4b) (asin . G4e4a) (apply . G4e49) (append . G4e48) (angle . G4e47) (acos . G4e46) (abs . G4e45) (/ . G4e44) (* . G4e43) (- . G4e42) (+ . G4e41) (>= . G4e40) (> . G4e3f) (= . G4e3e) (<= . G4e3d) (< . G4e3c) (library . G4e3b) (export . G4e3a) (&no-nans . G4e39) (&no-infinities . G4e38) (&i/o-encoding . G4e37) (&i/o-decoding . G4e36) (&i/o-port . G4e35) (&i/o-file-does-not-exist . G4e34) (&i/o-file-already-exists . G4e33) (&i/o-file-is-read-only . G4e32) (&i/o-file-protection . G4e31) (&i/o-filename . G4e30) (&i/o-invalid-position . G4e2f) (&i/o-write . G4e2e) (&i/o-read . G4e2d) (&i/o . G4e2c) (&undefined . G4e2b) (&syntax . G4e2a) (&lexical . G4e29) (&implementation-restriction . G4e28) (&non-continuable . G4e27) (&who . G4e26) (&irritants . G4e25) (&assertion . G4e24) (&violation . G4e23) (&error . G4e22) (&serious . G4e21) (&warning . G4e20) (&message . G4e1f) (&condition . G4e1e) (define-condition-type . G4e1d) (define-enumeration . G4e1c) (define-record-type . G4e1b) (parent-rtd . G4e1a) (nongenerative . G4e19) (opaque . G4e18) (sealed . G4e17) (protocol . G4e16) (parent . G4e15) (immutable . G4e14) (mutable . G4e13) (fields . G4e12) (error-handling-mode . G4e11) (file-options . G4e10) (buffer-mode . G4e0f) (eol-style . G4e0e) (guard . G4e0d) (trace-define . G4e0c) (trace-lambda . G4e0b) (unsyntax-splicing . G4e0a) (unsyntax . G4e09) (unquote-splicing . G4e08) (unquote . G4e07) (_ . G4e06) (else . G4e05) (=> . G4e04) (... . G4e03) (assert . G4e02) (endianness . G4e01) (delay . G4e00) (time . G4dff) (do . G4dfe) (cond . G4dfd) (let* . G4dfc) (let . G4dfb) (let*-values . G4dfa) (let-values . G4df9) (identifier-syntax . G4df8) (with-syntax . G4df7) (quasisyntax . G4df6) (quasiquote . G4df5) (syntax-rules . G4df4) (include . G4df3) (define-struct . G4df2) (record-constructor-descriptor . G4df1) (record-type-descriptor . G4df0) (case . G4def) (parameterize . G4dee) (unless . G4ded) (when . G4dec) (or . G4deb) (and . G4dea) (if . G4de9) (letrec* . G4de8) (letrec . G4de7) (type-descriptor . G4de6) (case-lambda . G4de5) (lambda . G4de4) (syntax . G4de3) (syntax-case . G4de2) (quote . G4de1) (foreign-call . G4de0) (letrec-syntax . G4ddf) (let-syntax . G4dde) (set! . G4ddd) (import . G4ddc) (begin . G4ddb) (module . G4dda) (define-syntax . G4dd9) (define . G4dd8)) '((G4c0b core-prim . &no-nans-rcd) (G4c09 core-prim . &no-nans-rtd) (G4bf6 core-prim . &no-infinities-rcd) (G4bf4 core-prim . &no-infinities-rtd) (G4be1 core-prim . &i/o-encoding-rcd) (G4bdf core-prim . &i/o-encoding-rtd) (G4bc7 core-prim . &i/o-decoding-rcd) (G4bc5 core-prim . &i/o-decoding-rtd) (G4bb2 core-prim . &i/o-port-rcd) (G4bb0 core-prim . &i/o-port-rtd) (G4b98 core-prim . &i/o-file-does-not-exist-rcd) (G4b96 core-prim . &i/o-file-does-not-exist-rtd) (G4b83 core-prim . &i/o-file-already-exists-rcd) (G4b81 core-prim . &i/o-file-already-exists-rtd) (G4b6e core-prim . &i/o-file-is-read-only-rcd) (G4b6c core-prim . &i/o-file-is-read-only-rtd) (G4b59 core-prim . &i/o-file-protection-rcd) (G4b57 core-prim . &i/o-file-protection-rtd) (G4b44 core-prim . &i/o-filename-rcd) (G4b42 core-prim . &i/o-filename-rtd) (G4b2a core-prim . &i/o-invalid-position-rcd) (G4b28 core-prim . &i/o-invalid-position-rtd) (G4b10 core-prim . &i/o-write-rcd) (G4b0e core-prim . &i/o-write-rtd) (G4afb core-prim . &i/o-read-rcd) (G4af9 core-prim . &i/o-read-rtd) (G4ae6 core-prim . &i/o-rcd) (G4ae4 core-prim . &i/o-rtd) (G4ad1 core-prim . &undefined-rcd) (G4acf core-prim . &undefined-rtd) (G4abc core-prim . &syntax-rcd) (G4aba core-prim . &syntax-rtd) (G4a9d core-prim . &lexical-rcd) (G4a9b core-prim . &lexical-rtd) (G4a88 core-prim . &implementation-restriction-rcd) (G4a86 core-prim . &implementation-restriction-rtd) (G4a73 core-prim . &non-continuable-rcd) (G4a71 core-prim . &non-continuable-rtd) (G4a5e core-prim . &who-rcd) (G4a5c core-prim . &who-rtd) (G4a44 core-prim . &irritants-rcd) (G4a42 core-prim . &irritants-rtd) (G4a2a core-prim . &assertion-rcd) (G4a28 core-prim . &assertion-rtd) (G4a15 core-prim . &violation-rcd) (G4a13 core-prim . &violation-rtd) (G4a00 core-prim . &error-rcd) (G49fe core-prim . &error-rtd) (G49eb core-prim . &serious-rcd) (G49e9 core-prim . &serious-rtd) (G49d6 core-prim . &warning-rcd) (G49d4 core-prim . &warning-rtd) (G49c1 core-prim . &message-rcd) (G49bf core-prim . &message-rtd) (G4964 core-prim . &condition-rcd) (G4962 core-prim . &condition-rtd) (G3045 core-prim . syntax-error) (G2f5e core-prim . syntax-dispatch) (G50b5 core-prim . pretty-print) (G50b4 core-prim . eval-core) (G50b3 core-prim . set-symbol-value!) (G50b2 core-prim . symbol-value) (G50b1 core-prim . gensym) (G50b0 core-prim . void) (G4d12 core-prim . load) (G3055 core-prim . interaction-environment) (G50af core-prim . char-ready?) (G50ae core-prim . regexp?) (G50ad core-prim . read-line) (G50ac core-prim . dotted-list?) (G50ab core-prim . circular-list?) (G50aa core-prim . proper-list?) (G50a9 core-prim . circular-list) (G50a8 core-prim . last) (G50a7 core-prim . last-pair) (G50a6 core-prim . not-pair?) (G50a5 core-prim . split-at!) (G50a4 core-prim . split-at) (G50a3 core-prim . list=) (G50a2 core-prim . list-copy) (G50a1 core-prim . list-tabulate) (G50a0 core-prim . make-list) (G509f core-prim . xcons) (G509e core-prim . tenth) (G509d core-prim . ninth) (G509c core-prim . eighth) (G509b core-prim . seventh) (G509a core-prim . sixth) (G5099 core-prim . fifth) (G5098 core-prim . drop-right!) (G5097 core-prim . drop-right) (G5096 core-prim . take-right) (G5095 core-prim . take!) (G5094 core-prim . drop) (G5093 core-prim . take) (G5092 core-prim . car+cdr) (G5091 core-prim . third) (G5090 core-prim . second) (G508f core-prim . first) (G508e core-prim . iota) (G508d core-prim . every) (G508c core-prim . ungensym) (G508b core-prim . assoc-ref) (G508a core-prim . alist-cons) (G5089 core-prim . append-map) (G5088 core-prim . print) (G5087 core-prim . format) (G5086 core-prim . standard-library-path) (G5085 core-prim . file-newer?) (G5084 core-prim . stat-mtime) (G5083 core-prim . write-to-file) (G5082 core-prim . file->list) (G5081 core-prim . file->string) (G5080 core-prim . digit->integer) (G507f core-prim . call-with-string-input-port) (G507e core-prim . call-with-string-io) (G507d core-prim . string-split) (G507c core-prim . bytevector-for-each) (G507b core-prim . string->regexp) (G507a core-prim . rxmatch) (G5079 core-prim . regexp-replace-all) (G5078 core-prim . hashtable-for-each) (G5077 core-prim . call-process) (G5076 core-prim . local-tz-offset) (G5075 core-prim . microseconds) (G5074 core-prim . readdir) (G5073 core-prim . set-current-directory!) (G5072 core-prim . expand-path) (G5071 core-prim . current-directory) (G5070 core-prim . %spawn) (G506f core-prim . %waitpid) (G506e core-prim . %ffi-pointer-ref) (G506d core-prim . %ffi-void*->string) (G506c core-prim . %ffi-call->void*) (G506b core-prim . %ffi-call->void) (G506a core-prim . %ffi-call->int) (G5069 core-prim . %ffi-lookup) (G5068 core-prim . %ffi-open) (G5067 core-prim . %fork) (G5066 core-prim . %pipe) (G5065 core-prim . get-environment-variables) (G5064 core-prim . get-environment-variable) (G5063 core-prim . get-timeofday) (G5062 core-prim . get-command-line) (G5061 core-prim . sys-display) (G5060 core-prim . source-info) (G505f core-prim . make-compiler-instruction) (G505e core-prim . make-instruction) (G505d core-prim . set-source-info!) (G505c core-prim . bignum?) (G505b core-prim . make-complex) (G505a core-prim . fast-equal?) (G5059 core-prim . fasl-read) (G5058 core-prim . fasl-write) (G5057 core-prim . receive) (G2831 core-prim . make-parameter) (G5056 core-prim . string-upcase) (G5055 core-prim . string-titlecase) (G5054 core-prim . string-normalize-nfkd) (G5053 core-prim . string-normalize-nfkc) (G5052 core-prim . string-normalize-nfd) (G5051 core-prim . string-normalize-nfc) (G5050 core-prim . string-foldcase) (G504f core-prim . string-downcase) (G504e core-prim . string-ci>?) (G504d core-prim . string-ci>=?) (G504c core-prim . string-ci=?) (G504b core-prim . string-ci<?) (G504a core-prim . string-ci<=?) (G5049 core-prim . char-whitespace?) (G5048 core-prim . char-upper-case?) (G5047 core-prim . char-title-case?) (G5046 core-prim . char-numeric?) (G5045 core-prim . char-lower-case?) (G5044 core-prim . char-general-category) (G5043 core-prim . char-upcase) (G5042 core-prim . char-titlecase) (G5041 core-prim . char-foldcase) (G5040 core-prim . char-downcase) (G503f core-prim . char-ci>?) (G503e core-prim . char-ci>=?) (G503d core-prim . char-ci=?) (G503c core-prim . char-ci<?) (G503b core-prim . char-ci<=?) (G503a core-prim . char-alphabetic?) (G2d99 core-prim . make-variable-transformer) (G304b core-prim . identifier?) (G3037 core-prim . generate-temporaries) (G3039 core-prim . free-identifier=?) (G304f core-prim . syntax->datum) (G304d core-prim . datum->syntax) (G303b core-prim . bound-identifier=?) (G5039 core-prim . record-type-descriptor?) (G5038 core-prim . record-predicate) (G5037 core-prim . record-mutator) (G5036 core-prim . record-constructor) (G5035 core-prim . record-accessor) (G5034 core-prim . make-record-type-descriptor) (G5033 core-prim . make-record-constructor-descriptor) (G5032 core-prim . record?) (G5031 core-prim . record-type-uid) (G5030 core-prim . record-type-sealed?) (G502f core-prim . record-type-parent) (G502e core-prim . record-type-opaque?) (G502d core-prim . record-type-name) (G502c core-prim . record-type-generative?) (G502b core-prim . record-type-field-names) (G502a core-prim . record-rtd) (G5029 core-prim . record-field-mutable?) (G5028 core-prim . delete-file) (G5027 core-prim . file-exists?) (G5026 core-prim . vector-sort!) (G5025 core-prim . vector-sort) (G5024 core-prim . list-sort) (G5023 core-prim . symbol-hash) (G5022 core-prim . string-ci-hash) (G5021 core-prim . string-hash) (G5020 core-prim . equal-hash) (G501f core-prim . hashtable-equivalence-function) (G501e core-prim . make-hashtable) (G501d core-prim . hashtable-hash-function) (G501c core-prim . make-eqv-hashtable) (G501b core-prim . make-eq-hashtable) (G501a core-prim . hashtable?) (G5019 core-prim . hashtable-update!) (G5018 core-prim . hashtable-size) (G5017 core-prim . hashtable-set!) (G5016 core-prim . hashtable-ref) (G5015 core-prim . hashtable-mutable?) (G5014 core-prim . hashtable-keys) (G5013 core-prim . hashtable-entries) (G5012 core-prim . hashtable-delete!) (G5011 core-prim . hashtable-copy) (G5010 core-prim . hashtable-contains?) (G500f core-prim . hashtable-clear!) (G500e core-prim . call-with-output-file) (G500d core-prim . call-with-input-file) (G500c core-prim . write-char) (G500b core-prim . write) (G500a core-prim . with-output-to-file) (G5009 core-prim . with-input-from-file) (G5008 core-prim . read-char) (G5007 core-prim . read) (G5006 core-prim . peek-char) (G5005 core-prim . open-output-file) (G5004 core-prim . open-input-file) (G5003 core-prim . newline) (G5002 core-prim . display) (G5001 core-prim . close-output-port) (G5000 core-prim . close-input-port) (G4fff core-prim . eof-object?) (G4ffe core-prim . eof-object) (G4ffd core-prim . current-error-port) (G4ffc core-prim . current-output-port) (G4ffb core-prim . current-input-port) (G4ffa core-prim . output-port?) (G4ff9 core-prim . input-port?) (G4ff8 core-prim . utf-8-codec) (G4ff7 core-prim . utf-16-codec) (G4ff6 core-prim . transcoder-error-handling-mode) (G4ff5 core-prim . transcoder-eol-style) (G4ff4 core-prim . transcoder-codec) (G4ff3 core-prim . transcoded-port) (G4ff2 core-prim . textual-port?) (G4ff1 core-prim . string->bytevector) (G4ff0 core-prim . standard-output-port) (G4fef core-prim . standard-input-port) (G4fee core-prim . standard-error-port) (G4fed core-prim . set-port-position!) (G4fec core-prim . put-u8) (G4feb core-prim . put-string) (G4fea core-prim . put-datum) (G4fe9 core-prim . put-char) (G4fe8 core-prim . put-bytevector) (G4fe7 core-prim . port?) (G4fe6 core-prim . port-transcoder) (G4fe5 core-prim . port-position) (G4fe4 core-prim . port-has-set-port-position!?) (G4fe3 core-prim . port-has-port-position?) (G4fe2 core-prim . port-eof?) (G4fe1 core-prim . output-port-buffer-mode) (G4fe0 core-prim . open-string-output-port) (G4fdf core-prim . open-string-input-port) (G4fde core-prim . open-file-output-port) (G4fdd core-prim . open-file-input/output-port) (G4fdc core-prim . open-file-input-port) (G4fdb core-prim . open-bytevector-output-port) (G4fda core-prim . open-bytevector-input-port) (G4fd9 core-prim . native-transcoder) (G4fd8 core-prim . native-eol-style) (G4fd7 core-prim . make-transcoder) (G4fd6 core-prim . latin-1-codec) (G4b0a core-prim . make-i/o-write-error) (G4af5 core-prim . make-i/o-read-error) (G4ba8 core-prim . make-i/o-port-error) (G4b20 core-prim . make-i/o-invalid-position-error) (G4b3a core-prim . make-i/o-filename-error) (G4b53 core-prim . make-i/o-file-protection-error) (G4b68 core-prim . make-i/o-file-is-read-only-error) (G4b92 core-prim . make-i/o-file-does-not-exist-error) (G4b7d core-prim . make-i/o-file-already-exists-error) (G4ae0 core-prim . make-i/o-error) (G4bd7 core-prim . make-i/o-encoding-error) (G4bc1 core-prim . make-i/o-decoding-error) (G4fd5 core-prim . make-custom-textual-output-port) (G4fd4 core-prim . make-custom-textual-input/output-port) (G4fd3 core-prim . make-custom-textual-input-port) (G4fd2 core-prim . make-custom-binary-output-port) (G4fd1 core-prim . make-custom-binary-input/output-port) (G4fd0 core-prim . make-custom-binary-input-port) (G4fcf core-prim . make-bytevector) (G4fce core-prim . lookahead-u8) (G4fcd core-prim . lookahead-char) (G4b0c core-prim . i/o-write-error?) (G4af7 core-prim . i/o-read-error?) (G4bac core-prim . i/o-port-error?) (G4b24 core-prim . i/o-invalid-position-error?) (G4b3e core-prim . i/o-filename-error?) (G4b55 core-prim . i/o-file-protection-error?) (G4b6a core-prim . i/o-file-is-read-only-error?) (G4b94 core-prim . i/o-file-does-not-exist-error?) (G4b7f core-prim . i/o-file-already-exists-error?) (G4ae2 core-prim . i/o-error?) (G4b26 core-prim . i/o-error-position) (G4bae core-prim . i/o-error-port) (G4b40 core-prim . i/o-error-filename) (G4bdb core-prim . i/o-encoding-error?) (G4bdd core-prim . i/o-encoding-error-char) (G4bc3 core-prim . i/o-decoding-error?) (G4fcc core-prim . get-u8) (G4fcb core-prim . get-string-n!) (G4fca core-prim . get-string-n) (G4fc9 core-prim . get-string-all) (G4fc8 core-prim . get-line) (G4fc7 core-prim . get-datum) (G4fc6 core-prim . get-char) (G4fc5 core-prim . get-bytevector-some) (G4fc4 core-prim . get-bytevector-n!) (G4fc3 core-prim . get-bytevector-n) (G4fc2 core-prim . get-bytevector-all) (G4fc1 core-prim . flush-output-port) (G4fc0 core-prim . close-port) (G3025 core-prim . scheme-report-environment) (G4fbf core-prim . quotient) (G3023 core-prim . null-environment) (G4fbe core-prim . remainder) (G4fbd core-prim . modulo) (G4fbc core-prim . inexact->exact) (G4fbb core-prim . force) (G4fba core-prim . exact->inexact) (G4fb9 core-prim . make-promise) (G4fb8 core-prim . exit) (G4d0c core-prim . command-line) (G4fb7 core-prim . string-fill!) (G4fb6 core-prim . string-set!) (G4fb5 core-prim . set-cdr!) (G4fb4 core-prim . set-car!) (G4fb3 core-prim . remove) (G4fb2 core-prim . remv) (G4fb1 core-prim . remp) (G4fb0 core-prim . remq) (G4faf core-prim . partition) (G4fae core-prim . memv) (G4fad core-prim . memq) (G4fac core-prim . memp) (G4fab core-prim . member) (G4faa core-prim . exists) (G4fa9 core-prim . for-all) (G4fa8 core-prim . fold-right) (G4fa7 core-prim . fold-left) (G4fa6 core-prim . find) (G4fa5 core-prim . filter) (G4fa4 core-prim . cons*) (G4fa3 core-prim . assv) (G4fa2 core-prim . assq) (G4fa1 core-prim . assp) (G4fa0 core-prim . assoc) (G4f9f core-prim . call-with-string-output-port) (G4f9e core-prim . call-with-port) (G4f9d core-prim . call-with-bytevector-output-port) (G4f9c core-prim . bytevector->string) (G4f9b core-prim . buffer-mode?) (G4f9a core-prim . binary-port?) (G4f99 core-prim . with-exception-handler) (G4f98 core-prim . raise-continuable) (G4f97 core-prim . raise) (G3029 core-prim . eval) (G3021 core-prim . environment) (G4f96 core-prim . make-enumeration) (G4f95 core-prim . enum-set=?) (G4f94 core-prim . enum-set-universe) (G4f93 core-prim . enum-set-union) (G4f92 core-prim . enum-set-subset?) (G4f91 core-prim . enum-set-projection) (G4f90 core-prim . enum-set-member?) (G4f8f core-prim . enum-set-intersection) (G4f8e core-prim . enum-set-indexer) (G4f8d core-prim . enum-set-difference) (G4f8c core-prim . enum-set-constructor) (G4f8b core-prim . enum-set-complement) (G4f8a core-prim . enum-set->list) (G4a58 core-prim . who-condition?) (G49d2 core-prim . warning?) (G4a11 core-prim . violation?) (G4acd core-prim . undefined-violation?) (G4ab4 core-prim . syntax-violation?) (G4ab8 core-prim . syntax-violation-subform) (G4ab6 core-prim . syntax-violation-form) (G3049 core-prim . syntax-violation) (G4f89 core-prim . simple-conditions) (G49e7 core-prim . serious-condition?) (G4a6f core-prim . non-continuable-violation?) (G49bb core-prim . message-condition?) (G4a54 core-prim . make-who-condition) (G49d0 core-prim . make-warning) (G4a0f core-prim . make-violation) (G4acb core-prim . make-undefined-violation) (G4aae core-prim . make-syntax-violation) (G49e5 core-prim . make-serious-condition) (G4a6d core-prim . make-non-continuable-violation) (G49b7 core-prim . make-message-condition) (G4a97 core-prim . make-lexical-violation) (G4a3a core-prim . make-irritants-condition) (G4a82 core-prim . make-implementation-restriction-violation) (G49fa core-prim . make-error) (G4a24 core-prim . make-assertion-violation) (G4a99 core-prim . lexical-violation?) (G4a3e core-prim . irritants-condition?) (G4a84 core-prim . implementation-restriction-violation?) (G49fc core-prim . error?) (G4a5a core-prim . condition-who) (G4f88 core-prim . condition-predicate) (G49bd core-prim . condition-message) (G4a40 core-prim . condition-irritants) (G4f87 core-prim . condition-accessor) (G4f86 core-prim . condition) (G4a26 core-prim . assertion-violation?) (G4f85 core-prim . condition?) (G4f84 core-prim . utf32->string) (G4f83 core-prim . utf16->string) (G4f82 core-prim . utf8->string) (G4f81 core-prim . uint-list->bytevector) (G4f80 core-prim . u8-list->bytevector) (G4f7f core-prim . string->utf8) (G4f7e core-prim . string->utf32) (G4f7d core-prim . string->utf16) (G4f7c core-prim . sint-list->bytevector) (G4f7b core-prim . native-endianness) (G4f7a core-prim . bytevector?) (G4f79 core-prim . bytevector=?) (G4f78 core-prim . bytevector-uint-set!) (G4f77 core-prim . bytevector-uint-ref) (G4f76 core-prim . bytevector-u8-set!) (G4f75 core-prim . bytevector-u8-ref) (G4f74 core-prim . bytevector-u64-set!) (G4f73 core-prim . bytevector-u64-ref) (G4f72 core-prim . bytevector-u64-native-set!) (G4f71 core-prim . bytevector-u64-native-ref) (G4f70 core-prim . bytevector-u32-set!) (G4f6f core-prim . bytevector-u32-ref) (G4f6e core-prim . bytevector-u32-native-set!) (G4f6d core-prim . bytevector-u32-native-ref) (G4f6c core-prim . bytevector-u16-set!) (G4f6b core-prim . bytevector-u16-ref) (G4f6a core-prim . bytevector-u16-native-set!) (G4f69 core-prim . bytevector-u16-native-ref) (G4f68 core-prim . bytevector-sint-set!) (G4f67 core-prim . bytevector-sint-ref) (G4f66 core-prim . bytevector-s8-set!) (G4f65 core-prim . bytevector-s8-ref) (G4f64 core-prim . bytevector-s64-set!) (G4f63 core-prim . bytevector-s64-ref) (G4f62 core-prim . bytevector-s64-native-set!) (G4f61 core-prim . bytevector-s64-native-ref) (G4f60 core-prim . bytevector-s32-set!) (G4f5f core-prim . bytevector-s32-ref) (G4f5e core-prim . bytevector-s32-native-set!) (G4f5d core-prim . bytevector-s32-native-ref) (G4f5c core-prim . bytevector-s16-set!) (G4f5b core-prim . bytevector-s16-ref) (G4f5a core-prim . bytevector-s16-native-set!) (G4f59 core-prim . bytevector-s16-native-ref) (G4f58 core-prim . bytevector-length) (G4f57 core-prim . bytevector-ieee-single-ref) (G4f56 core-prim . bytevector-ieee-single-set!) (G4f55 core-prim . bytevector-ieee-single-native-set!) (G4f54 core-prim . bytevector-ieee-single-native-ref) (G4f53 core-prim . bytevector-ieee-double-set!) (G4f52 core-prim . bytevector-ieee-double-ref) (G4f51 core-prim . bytevector-ieee-double-native-set!) (G4f50 core-prim . bytevector-ieee-double-native-ref) (G4f4f core-prim . bytevector-fill!) (G4f4e core-prim . bytevector-copy!) (G4f4d core-prim . bytevector-copy) (G4f4c core-prim . bytevector->uint-list) (G4f4b core-prim . bytevector->u8-list) (G4f4a core-prim . bytevector->sint-list) (G4c07 core-prim . no-nans-violation?) (G4bf2 core-prim . no-infinities-violation?) (G4c05 core-prim . make-no-nans-violation) (G4bf0 core-prim . make-no-infinities-violation) (G4f49 core-prim . real->flonum) (G4f48 core-prim . flzero?) (G4f47 core-prim . fltruncate) (G4f46 core-prim . fltan) (G4f45 core-prim . flsqrt) (G4f44 core-prim . flsin) (G4f43 core-prim . flround) (G4f42 core-prim . flpositive?) (G4f41 core-prim . flonum?) (G4f40 core-prim . flodd?) (G4f3f core-prim . flnumerator) (G4f3e core-prim . flnegative?) (G4f3d core-prim . flnan?) (G4f3c core-prim . flmod0) (G4f3b core-prim . flmod) (G4f3a core-prim . flmin) (G4f39 core-prim . flmax) (G4f38 core-prim . fllog) (G4f37 core-prim . flinteger?) (G4f36 core-prim . flinfinite?) (G4f35 core-prim . flfloor) (G4f34 core-prim . flfinite?) (G4f33 core-prim . flexpt) (G4f32 core-prim . flexp) (G4f31 core-prim . fleven?) (G4f30 core-prim . fldiv0-and-mod0) (G4f2f core-prim . fldiv0) (G4f2e core-prim . fldiv-and-mod) (G4f2d core-prim . fldiv) (G4f2c core-prim . fldenominator) (G4f2b core-prim . flcos) (G4f2a core-prim . flceiling) (G4f29 core-prim . flatan) (G4f28 core-prim . flasin) (G4f27 core-prim . flacos) (G4f26 core-prim . flabs) (G4f25 core-prim . fl>?) (G4f24 core-prim . fl>=?) (G4f23 core-prim . fl=?) (G4f22 core-prim . fl<?) (G4f21 core-prim . fl<=?) (G4f20 core-prim . fl/) (G4f1f core-prim . fl-) (G4f1e core-prim . fl+) (G4f1d core-prim . fl*) (G4f1c core-prim . fixnum->flonum) (G4f1b core-prim . fxzero?) (G4f1a core-prim . fxxor) (G4f19 core-prim . fxrotate-bit-field) (G4f18 core-prim . fxreverse-bit-field) (G4f17 core-prim . fxpositive?) (G4f16 core-prim . fxodd?) (G4f15 core-prim . fxnot) (G4f14 core-prim . fxnegative?) (G4f13 core-prim . fxmod0) (G4f12 core-prim . fxmod) (G4f11 core-prim . fxmin) (G4f10 core-prim . fxmax) (G4f0f core-prim . fxlength) (G4f0e core-prim . fxior) (G4f0d core-prim . fxif) (G4f0c core-prim . fxfirst-bit-set) (G4f0b core-prim . fxeven?) (G4f0a core-prim . fxdiv0-and-mod0) (G4f09 core-prim . fxdiv0) (G4f08 core-prim . fxdiv-and-mod) (G4f07 core-prim . fxdiv) (G4f06 core-prim . fxcopy-bit-field) (G4f05 core-prim . fxcopy-bit) (G4f04 core-prim . fxbit-set?) (G4f03 core-prim . fxbit-field) (G4f02 core-prim . fxbit-count) (G4f01 core-prim . fxarithmetic-shift-right) (G4f00 core-prim . fxarithmetic-shift-left) (G4eff core-prim . fxarithmetic-shift) (G4efe core-prim . fxand) (G4efd core-prim . fx>?) (G4efc core-prim . fx>=?) (G4efb core-prim . fx=?) (G4efa core-prim . fx<?) (G4ef9 core-prim . fx<=?) (G4ef8 core-prim . fx-/carry) (G4ef7 core-prim . fx-) (G4ef6 core-prim . fx+/carry) (G4ef5 core-prim . fx+) (G4ef4 core-prim . fx*/carry) (G4ef3 core-prim . fx*) (G4ef2 core-prim . greatest-fixnum) (G4ef1 core-prim . least-fixnum) (G4ef0 core-prim . fixnum-width) (G4eef core-prim . fixnum?) (G4eee core-prim . bitwise-rotate-bit-field) (G4eed core-prim . bitwise-reverse-bit-field) (G4eec core-prim . bitwise-length) (G4eeb core-prim . bitwise-if) (G4eea core-prim . bitwise-first-bit-set) (G4ee9 core-prim . bitwise-copy-bit-field) (G4ee8 core-prim . bitwise-copy-bit) (G4ee7 core-prim . bitwise-bit-set?) (G4ee6 core-prim . bitwise-bit-field) (G4ee5 core-prim . bitwise-bit-count) (G4ee4 core-prim . bitwise-xor) (G4ee3 core-prim . bitwise-ior) (G4ee2 core-prim . bitwise-and) (G4ee1 core-prim . bitwise-not) (G4ee0 core-prim . bitwise-arithmetic-shift-right) (G4edf core-prim . bitwise-arithmetic-shift-left) (G4ede core-prim . bitwise-arithmetic-shift) (G4edd core-prim . zero?) (G4edc core-prim . vector?) (G4edb core-prim . vector-set!) (G4eda core-prim . vector-ref) (G4ed9 core-prim . vector-map) (G4ed8 core-prim . vector-length) (G4ed7 core-prim . vector-for-each) (G4ed6 core-prim . vector-fill!) (G4ed5 core-prim . vector->list) (G4ed4 core-prim . vector) (G4ed3 core-prim . values) (G4ed2 core-prim . truncate) (G4ed1 core-prim . tan) (G4ed0 core-prim . symbol?) (G4ecf core-prim . symbol=?) (G4ece core-prim . symbol->string) (G4ecd core-prim . substring) (G4ecc core-prim . string?) (G4ecb core-prim . string>?) (G4eca core-prim . string>=?) (G4ec9 core-prim . string=?) (G4ec8 core-prim . string<?) (G4ec7 core-prim . string<=?) (G4ec6 core-prim . string-ref) (G4ec5 core-prim . string-length) (G4ec4 core-prim . string-for-each) (G4ec3 core-prim . string-copy) (G4ec2 core-prim . string-append) (G4ec1 core-prim . string->symbol) (G4ec0 core-prim . string->number) (G4ebf core-prim . string->list) (G4ebe core-prim . string) (G4ebd core-prim . sqrt) (G4ebc core-prim . sin) (G4ebb core-prim . round) (G4eba core-prim . reverse) (G4eb9 core-prim . real?) (G4eb8 core-prim . real-valued?) (G4eb7 core-prim . real-part) (G4eb6 core-prim . rationalize) (G4eb5 core-prim . rational?) (G4eb4 core-prim . rational-valued?) (G4eb3 core-prim . procedure?) (G4eb2 core-prim . positive?) (G4eb1 core-prim . pair?) (G4eb0 core-prim . odd?) (G4eaf core-prim . numerator) (G4eae core-prim . number?) (G4ead core-prim . number->string) (G4eac core-prim . null?) (G4eab core-prim . not) (G4eaa core-prim . negative?) (G4ea9 core-prim . nan?) (G4ea8 core-prim . min) (G4ea7 core-prim . max) (G4ea6 core-prim . map) (G4ea5 core-prim . make-vector) (G4ea4 core-prim . make-string) (G4ea3 core-prim . make-rectangular) (G4ea2 core-prim . make-polar) (G4ea1 core-prim . magnitude) (G4ea0 core-prim . log) (G4e9f core-prim . list?) (G4e9e core-prim . list-tail) (G4e9d core-prim . list-ref) (G4e9c core-prim . list->vector) (G4e9b core-prim . list->string) (G4e9a core-prim . list) (G4e99 core-prim . length) (G4e98 core-prim . lcm) (G4e97 core-prim . integer?) (G4e96 core-prim . integer-valued?) (G4e95 core-prim . integer->char) (G4e94 core-prim . infinite?) (G4e93 core-prim . inexact?) (G4e92 core-prim . inexact) (G4e91 core-prim . imag-part) (G4e90 core-prim . gcd) (G4e8f core-prim . for-each) (G4e8e core-prim . floor) (G4e8d core-prim . finite?) (G4e8c core-prim . expt) (G4e8b core-prim . exp) (G4e8a core-prim . exact?) (G4e89 core-prim . exact-integer-sqrt) (G4e88 core-prim . exact) (G4e87 core-prim . even?) (G4e86 core-prim . error) (G4e85 core-prim . eqv?) (G4e84 core-prim . equal?) (G4e83 core-prim . eq?) (G4e82 core-prim . dynamic-wind) (G4e81 core-prim . div0-and-mod0) (G4e80 core-prim . mod0) (G4e7f core-prim . div0) (G4e7e core-prim . div-and-mod) (G4e7d core-prim . mod) (G4e7c core-prim . div) (G4e7b core-prim . denominator) (G4e7a core-prim . cos) (G4e79 core-prim . cons) (G4e78 core-prim . complex?) (G4e77 core-prim . char?) (G4e76 core-prim . char>?) (G4e75 core-prim . char>=?) (G4e74 core-prim . char=?) (G4e73 core-prim . char<?) (G4e72 core-prim . char<=?) (G4e71 core-prim . char->integer) (G4e70 core-prim . ceiling) (G4e6f core-prim . call-with-values) (G4e6e core-prim . call/cc) (G4e6d core-prim . call-with-current-continuation) (G4e6c core-prim . cddddr) (G4e6b core-prim . cdddar) (G4e6a core-prim . cddadr) (G4e69 core-prim . cddaar) (G4e68 core-prim . cdaddr) (G4e67 core-prim . cdadar) (G4e66 core-prim . cdaadr) (G4e65 core-prim . cdaaar) (G4e64 core-prim . cadddr) (G4e63 core-prim . caddar) (G4e62 core-prim . cadadr) (G4e61 core-prim . cadaar) (G4e60 core-prim . caaddr) (G4e5f core-prim . caadar) (G4e5e core-prim . caaadr) (G4e5d core-prim . caaaar) (G4e5c core-prim . cdddr) (G4e5b core-prim . cddar) (G4e5a core-prim . cdadr) (G4e59 core-prim . cdaar) (G4e58 core-prim . caddr) (G4e57 core-prim . cadar) (G4e56 core-prim . caadr) (G4e55 core-prim . caaar) (G4e54 core-prim . cddr) (G4e53 core-prim . cdar) (G4e52 core-prim . cadr) (G4e51 core-prim . caar) (G4e50 core-prim . cdr) (G4e4f core-prim . car) (G4e4e core-prim . boolean?) (G4e4d core-prim . boolean=?) (G4e4c core-prim . atan) (G4e4b core-prim . assertion-violation) (G4e4a core-prim . asin) (G4e49 core-prim . apply) (G4e48 core-prim . append) (G4e47 core-prim . angle) (G4e46 core-prim . acos) (G4e45 core-prim . abs) (G4e44 core-prim . /) (G4e43 core-prim . *) (G4e42 core-prim . -) (G4e41 core-prim . +) (G4e40 core-prim . >=) (G4e3f core-prim . >) (G4e3e core-prim . =) (G4e3d core-prim . <=) (G4e3c core-prim . <) (G4e3b core-prim . library) (G4e3a core-prim . export) (G4e39 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e38 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e37 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e36 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e35 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e34 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e33 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e32 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e31 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e30 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e2f $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e2e $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e2d $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e2c $core-rtd &i/o-rtd &i/o-rcd) (G4e2b $core-rtd &undefined-rtd &undefined-rcd) (G4e2a $core-rtd &syntax-rtd &syntax-rcd) (G4e29 $core-rtd &lexical-rtd &lexical-rcd) (G4e28 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e27 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e26 $core-rtd &who-rtd &who-rcd) (G4e25 $core-rtd &irritants-rtd &irritants-rcd) (G4e24 $core-rtd &assertion-rtd &assertion-rcd) (G4e23 $core-rtd &violation-rtd &violation-rcd) (G4e22 $core-rtd &error-rtd &error-rcd) (G4e21 $core-rtd &serious-rtd &serious-rcd) (G4e20 $core-rtd &warning-rtd &warning-rcd) (G4e1f $core-rtd &message-rtd &message-rcd) (G4e1e $core-rtd &condition-rtd &condition-rcd) (G4e1d macro . define-condition-type) (G4e1c macro . define-enumeration) (G4e1b macro . define-record-type) (G4e1a macro . parent-rtd) (G4e19 macro . nongenerative) (G4e18 macro . opaque) (G4e17 macro . sealed) (G4e16 macro . protocol) (G4e15 macro . parent) (G4e14 macro . immutable) (G4e13 macro . mutable) (G4e12 macro . fields) (G4e11 macro . error-handling-mode) (G4e10 macro . file-options) (G4e0f macro . buffer-mode) (G4e0e macro . eol-style) (G4e0d macro . guard) (G4e0c macro . trace-define) (G4e0b macro . trace-lambda) (G4e0a macro . unsyntax-splicing) (G4e09 macro . unsyntax) (G4e08 macro . unquote-splicing) (G4e07 macro . unquote) (G4e06 macro . _) (G4e05 macro . else) (G4e04 macro . =>) (G4e03 macro . ...) (G4e02 macro . assert) (G4e01 macro . endianness) (G4e00 macro . delay) (G4dff macro . time) (G4dfe macro . do) (G4dfd macro . cond) (G4dfc macro . let*) (G4dfb macro . let) (G4dfa macro . let*-values) (G4df9 macro . let-values) (G4df8 macro . identifier-syntax) (G4df7 macro . with-syntax) (G4df6 macro . quasisyntax) (G4df5 macro . quasiquote) (G4df4 macro . syntax-rules) (G4df3 macro . include) (G4df2 macro . define-struct) (G4df1 core-macro . record-constructor-descriptor) (G4df0 core-macro . record-type-descriptor) (G4def macro . case) (G4dee macro . parameterize) (G4ded macro . unless) (G4dec macro . when) (G4deb core-macro . or) (G4dea core-macro . and) (G4de9 core-macro . if) (G4de8 core-macro . letrec*) (G4de7 core-macro . letrec) (G4de6 core-macro . type-descriptor) (G4de5 core-macro . case-lambda) (G4de4 core-macro . lambda) (G4de3 core-macro . syntax) (G4de2 core-macro . syntax-case) (G4de1 core-macro . quote) (G4de0 core-macro . foreign-call) (G4ddf letrec-syntax) (G4dde let-syntax) (G4ddd set!) (G4ddc import) (G4ddb begin) (G4dda module) (G4dd9 define-syntax) (G4dd8 define)) values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50d6 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50b5) (eval-core . G50b4) (set-symbol-value! . G50b3) (symbol-value . G50b2) (gensym . G50b1) (void . G50b0)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50d7 '(mosh) '() '() '() '() '((set-symbol-value! . G50b3) (symbol-value . G50b2) (ungensym . G508c) (assoc-ref . G508b) (alist-cons . G508a) (print . G5088) (format . G5087) (standard-library-path . G5086) (file-newer? . G5085) (stat-mtime . G5084) (write-to-file . G5083) (file->list . G5082) (file->string . G5081) (digit->integer . G5080) (call-with-string-input-port . G507f) (call-with-string-io . G507e) (string-split . G507d) (bytevector-for-each . G507c) (string->regexp . G507b) (rxmatch . G507a) (regexp-replace-all . G5079) (hashtable-for-each . G5078) (set-current-directory! . G5073) (expand-path . G5072) (current-directory . G5071) (get-timeofday . G5063) (get-command-line . G5062) (sys-display . G5061) (source-info . G5060) (make-compiler-instruction . G505f) (make-instruction . G505e) (set-source-info! . G505d) (bignum? . G505c) (make-complex . G505b) (fast-equal? . G505a) (fasl-read . G5059) (fasl-write . G5058) (include . G4df3)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50d8 '(mosh backend) '() '() '() '() '((receive . G5057)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50d9 '(mosh file) '() '() '() '() '((read-line . G50ad) (file-newer? . G5085) (stat-mtime . G5084) (write-to-file . G5083) (file->list . G5082) (file->string . G5081)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50da '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G507c)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50db '(mosh number) '() '() '() '() '((digit->integer . G5080)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50dc '(mosh string) '() '() '() '() '((print . G5088) (format . G5087) (call-with-string-input-port . G507f) (call-with-string-io . G507e) (string-split . G507d) (string->regexp . G507b)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50dd '(mosh list) '() '() '() '() '((assoc-ref . G508b)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50de '(mosh regexp) '() '() '() '() '((rxmatch . G507a) (regexp-replace-all . G5079)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50df '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5078)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50e0 '(mosh parameters) '() '() '() '() '((make-parameter . G2831) (parameterize . G4dee)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50e1 '(system) '() '() '() '() '((call-process . G5077) (local-tz-offset . G5076) (microseconds . G5075) (readdir . G5074) (set-current-directory! . G5073) (expand-path . G5072) (current-directory . G5071) (%spawn . G5070) (%waitpid . G506f) (%ffi-pointer-ref . G506e) (%ffi-void*->string . G506d) (%ffi-call->void* . G506c) (%ffi-call->void . G506b) (%ffi-call->int . G506a) (%ffi-lookup . G5069) (%ffi-open . G5068) (%fork . G5067) (%pipe . G5066) (get-environment-variables . G5065) (get-environment-variable . G5064)) '() values values '#f '#f '#f '#f) (G2b75@G2a1a@install-library 'G50e2 '(srfi :1) '() '() '() '() '((dotted-list? . G50ac) (circular-list? . G50ab) (proper-list? . G50aa) (circular-list . G50a9) (last . G50a8) (last-pair . G50a7) (not-pair? . G50a6) (split-at! . G50a5) (split-at . G50a4) (list= . G50a3) (list-copy . G50a2) (list-tabulate . G50a1) (make-list . G50a0) (xcons . G509f) (tenth . G509e) (ninth . G509d) (eighth . G509c) (seventh . G509b) (sixth . G509a) (fifth . G5099) (drop-right! . G5098) (drop-right . G5097) (take-right . G5096) (take! . G5095) (drop . G5094) (take . G5093) (car+cdr . G5092) (third . G5091) (second . G5090) (first . G508f) (iota . G508e) (every . G508d) (alist-cons . G508a) (append-map . G5089)) '() values values '#f '#f '#f '#f))
((lambda (G4d01@add-library-path! G4d03@parse-and-add-library-path G4d05@for-each-with-index G4d07@conditioon-printer G4d09@repl G4d0b@trace-printer G4d0d@command-line G4d0f@local-library-path G4d11@load/args G4d13@load G4d15@ironscheme-build G4d17@eval-top-level G4d19@compile-system-libraries G4d1b@compile G4d1d@compile->closure G4d1f@pre-compile-r6rs-file G4d21@load-r6rs-top-level) (begin (set! G4d01@add-library-path! (lambda (G4d3c@path) (G2b65@G29fa@library-path (append (G2b65@G29fa@library-path) (list G4d3c@path))))) (set! G4d03@parse-and-add-library-path (lambda (G4d3e@paths G4d3f@message) ((lambda (G4d42@t) (if G4d42@t ((lambda (G4d44@paths) (for-each (lambda (G4d46@path) (if (file-exists? G4d46@path) (G4d01@add-library-path! (expand-path G4d46@path)) (format (current-error-port) G4d3f@message G4d46@path))) (reverse (string-split G4d44@paths '#\:)))) G4d42@t) (void))) G4d3e@paths))) (set! G4d05@for-each-with-index (lambda (G4d48@proc G4d49@lst) (letrec ((G4d4c@loop (lambda (G4d4e@i G4d4f@lst) (if (null? G4d4f@lst) (if '#f '#f (void)) (begin (G4d48@proc G4d4e@i (car G4d4f@lst)) (G4d4c@loop (+ G4d4e@i '1) (cdr G4d4f@lst))))))) (G4d4c@loop '1 G4d49@lst)))) (set! G4d07@conditioon-printer (lambda (G4d52@e G4d53@port) ((lambda (G4d57@ref) (begin (set! G4d57@ref (lambda (G4d66@rtd G4d67@i G4d68@x) ((lambda (G4d6c@val) (if (symbol? G4d6c@val) (ungensym G4d6c@val) G4d6c@val)) ((record-accessor G4d66@rtd G4d67@i) G4d68@x)))) (begin (display '" Condition components:\n" G4d53@port) (G4d05@for-each-with-index (lambda (G4d58@i G4d59@x) ((lambda (G4d5c@rtd) (begin (format G4d53@port '"   ~d. ~a" G4d58@i (record-type-name G4d5c@rtd)) ((lambda (G4d5e@v) ((lambda (G4d60@t) (if (memv G4d60@t '(0)) (newline G4d53@port) (if (memv G4d60@t '(1)) (begin (display '": " G4d53@port) (write (G4d57@ref G4d5c@rtd '0 G4d59@x) G4d53@port) (newline G4d53@port)) (begin (display '":\n" G4d53@port) ((letrec ((G4d62@f (lambda (G4d64@i) (if (not (= G4d64@i (vector-length G4d5e@v))) (begin (display '"       " G4d53@port) (display (vector-ref G4d5e@v G4d64@i) G4d53@port) (display '": " G4d53@port) (write (G4d57@ref G4d5c@rtd G4d64@i G4d59@x) G4d53@port) (newline G4d53@port) (G4d62@f (+ G4d64@i '1))) (void))))) G4d62@f) '0))))) (vector-length G4d5e@v))) (record-type-field-names G4d5c@rtd)))) (record-rtd G4d59@x))) (simple-conditions G4d52@e))))) '#f))) (set! G4d09@repl (lambda G4d6e@x ((lambda (G4d71@rec) (begin (set! G4d71@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d74@G4d72) (lambda () (with-exception-handler (lambda (G4d76@e) ((call/cc (lambda (G4d78@G4d73) (G4d74@G4d72 (lambda () (if '#t (begin (display '"\n" (current-error-port)) (G4d07@conditioon-printer G4d76@e (current-error-port))) (G4d78@G4d73 (lambda () (raise-continuable G4d76@e)))))))))) (lambda () ((letrec ((G4d7a@loop (lambda (G4d7c@line G4d7d@accum) ((lambda (G4d81@parentheses-ok? G4d83@eval-string-print) (begin (set! G4d81@parentheses-ok? (lambda (G4d88@text) ((letrec ((G4d8a@loop (lambda (G4d8c@chars G4d8d@p0 G4d8e@p1) (if (null? G4d8c@chars) (= '0 G4d8d@p0 G4d8e@p1) ((lambda (G4d92@t) (if (memv G4d92@t '(#\()) (G4d8a@loop (cdr G4d8c@chars) (+ G4d8d@p0 '1) G4d8e@p1) (if (memv G4d92@t '(#\))) (G4d8a@loop (cdr G4d8c@chars) (- G4d8d@p0 '1) G4d8e@p1) (if (memv G4d92@t '(#\[)) (G4d8a@loop (cdr G4d8c@chars) G4d8d@p0 (+ G4d8e@p1 '1)) (if (memv G4d92@t '(#\])) (G4d8a@loop (cdr G4d8c@chars) G4d8d@p0 (- G4d8e@p1 '1)) (G4d8a@loop (cdr G4d8c@chars) G4d8d@p0 G4d8e@p1)))))) (car G4d8c@chars)))))) G4d8a@loop) (string->list G4d88@text) '0 '0))) (set! G4d83@eval-string-print (lambda (G4d86@text) (if (not (or (string=? '"\n" G4d86@text) (= '0 (string-length G4d86@text)))) (write (G4d17@eval-top-level (call-with-port (open-string-input-port G4d86@text) read))) (void)))) (if (eof-object? G4d7c@line) (begin (G4d83@eval-string-print G4d7d@accum) (exit)) ((lambda (G4d84@current) (if (G4d81@parentheses-ok? G4d84@current) (G4d83@eval-string-print G4d84@current) (G4d7a@loop (get-line (current-input-port)) G4d84@current))) (string-append G4d7d@accum G4d7c@line))))) '#f '#f)))) G4d7a@loop) (get-line (current-input-port)) '""))))))) (newline) (G4d71@rec)))) (G4d71@rec))) '#f))) (set! G4d0b@trace-printer (G28fc@G2832@make-parameter write)) (set! G4d0d@command-line (G28fc@G2832@make-parameter (get-command-line))) (set! G4d0f@local-library-path (lambda (G4d94@filename) (cons (expand-path '".") (G2b65@G29fa@library-path)))) (set! G4d11@load/args (lambda (G4d96@filename . G4d98@args) (begin (apply G4d21@load-r6rs-top-level G4d96@filename 'load G4d98@args) (void)))) (set! G4d13@load (lambda (G4d9a@filename) (begin (apply G4d21@load-r6rs-top-level G4d9a@filename 'load (G4d0d@command-line)) (void)))) (set! G4d15@ironscheme-build (lambda () (G4d13@load '"ironscheme-buildscript.ss"))) (set! G4d17@eval-top-level (lambda (G4d9c@x) (G4937@G302a@eval G4d9c@x (G494d@G3056@interaction-environment)))) (set! G4d19@compile-system-libraries (lambda () (G4d17@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d1b@compile (lambda (G4d9e@filename) (G4d21@load-r6rs-top-level G4d9e@filename 'compile))) (set! G4d1d@compile->closure (lambda (G4da0@filename) (G4d21@load-r6rs-top-level G4da0@filename 'closure))) (set! G4d1f@pre-compile-r6rs-file (lambda (G4da2@filename) (G4d21@load-r6rs-top-level G4da2@filename 'compile))) (set! G4d21@load-r6rs-top-level (lambda (G4da4@filename G4da5@how . G4da8@args) ((lambda (G4dac@G4daa G4dad@G4dab) ((lambda (G4db0@swap) (dynamic-wind G4db0@swap (lambda () ((lambda (G4db2@x*) ((lambda (G4db4@t) (if (memv G4db4@t '(closure)) (G494c@G3054@pre-compile-r6rs-top-level G4db2@x*) (if (memv G4db4@t '(load)) ((lambda (G4db8@G4db6 G4db9@G4db7) ((lambda (G4dbc@swap) (dynamic-wind G4dbc@swap (lambda () ((G494b@G3052@compile-r6rs-top-level G4db2@x*))) G4dbc@swap)) (lambda () ((lambda (G4dbe@t) (begin (G4db8@G4db6 G4db9@G4db7) (set! G4db9@G4db7 G4dbe@t))) (G4db8@G4db6))))) G4d0d@command-line (cons G4da4@filename (car G4da8@args))) (if (memv G4db4@t '(compile)) (begin (G494b@G3052@compile-r6rs-top-level G4db2@x*) (G2b69@G2a02@serialize-all G28f7@G2828@serialize-library G2951@G290a@compile-core-expr)) (if '#f '#f (void)))))) G4da5@how)) (with-input-from-file G4da4@filename (lambda () ((letrec ((G4dc0@f (lambda () ((lambda (G4dc2@x) (if (eof-object? G4dc2@x) '() (cons G4dc2@x (G4dc0@f)))) (G28ef@G2818@read-annotated))))) G4dc0@f)))))) G4db0@swap)) (lambda () ((lambda (G4dc4@t) (begin (G4dac@G4daa G4dad@G4dab) (set! G4dad@G4dab G4dc4@t))) (G4dac@G4daa))))) G2b65@G29fa@library-path (G4d0f@local-library-path G4da4@filename)))) (begin (set! G4dd6@G4d21@load-r6rs-top-level G4d21@load-r6rs-top-level) (set! G4dd5@G4d1f@pre-compile-r6rs-file G4d1f@pre-compile-r6rs-file) (set! G4dd4@G4d1d@compile->closure G4d1d@compile->closure) (set! G4dd3@G4d1b@compile G4d1b@compile) (set! G4dd2@G4d19@compile-system-libraries G4d19@compile-system-libraries) (set! G4dd1@G4d17@eval-top-level G4d17@eval-top-level) (set! G4dd0@G4d15@ironscheme-build G4d15@ironscheme-build) (set! G4dcf@G4d13@load G4d13@load) (set! G4dce@G4d11@load/args G4d11@load/args) (set! G4dcd@G4d0f@local-library-path G4d0f@local-library-path) (set! G4dcc@G4d0d@command-line G4d0d@command-line) (set! G4dcb@G4d0b@trace-printer G4d0b@trace-printer) (set! G4dca@G4d09@repl G4d09@repl) (set! G4dc9@G4d07@conditioon-printer G4d07@conditioon-printer) (set! G4dc8@G4d05@for-each-with-index G4d05@for-each-with-index) (set! G4dc7@G4d03@parse-and-add-library-path G4d03@parse-and-add-library-path) (set! G4dc6@G4d01@add-library-path! G4d01@add-library-path!) (G2b6a@G2a04@current-precompiled-library-loader G28f8@G282a@load-serialized-library) (set-symbol-value! 'load G4d13@load) (set-symbol-value! 'pre-compile-r6rs-file G4d1f@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d17@eval-top-level) (set-symbol-value! 'int-env-syms G492e@G3018@interaction-environment-symbols) (set-symbol-value! 'expanded2core G2950@G2908@expanded->core) (set-symbol-value! 'trace-printer G4d0b@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d22@c) (condition (G4c5e@G4a6e@make-non-continuable-violation) (G4c54@G4a55@make-who-condition 'raise) (G4c18@G49b8@make-message-condition '"returned from non-continuable exception") (G4c4a@G4a3b@make-irritants-condition (list G4d22@c))))) (G4d03@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (G4d03@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (G2b65@G29fa@library-path (append (G2b65@G29fa@library-path) (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib")))) ((lambda (G4d24@prefix) (G2b66@G29fc@library-extensions (G4d24@prefix '".mosh" (G2b66@G29fc@library-extensions)))) (lambda (G4d26@ext G4d27@ls) (append (map (lambda (G4d2a@x) (string-append G4d26@ext G4d2a@x)) G4d27@ls) G4d27@ls))) ((lambda (G4d2c@args G4d2d@port) ((lambda (G4d31@ref) (begin (set! G4d31@ref (lambda (G4d34@rtd G4d35@i G4d36@x) ((lambda (G4d3a@val) (if (symbol? G4d3a@val) (ungensym G4d3a@val) G4d3a@val)) ((record-accessor G4d34@rtd G4d35@i) G4d36@x)))) (with-exception-handler (lambda (G4d32@c) (G4d07@conditioon-printer G4d32@c (current-error-port))) (lambda () (if (null? G4d2c@args) (G4d09@repl) (G4d21@load-r6rs-top-level (car G4d2c@args) 'load (cdr G4d2c@args))))))) '#f)) (G4d0d@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
