;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2886@read-annotated G2888@annotation-stripped G288a@annotation? G288c@annotation-source G288e@annotation-expression G2890@scm->fasl G2892@fasl-save G2894@fasl-load G2896@serialize-library G2898@load-serialized-library G289a@make-record-printer G289c@compile-core G289e@read-library-source-file G28a0@make-parameter G290c@file-options-spec) (begin (set! G2886@read-annotated read) (set! G2888@annotation-stripped (lambda (G290d@x) (G288e@annotation-expression G290d@x))) (set! G288a@annotation? (lambda (G290f@x) (source-info G290f@x))) (set! G288c@annotation-source (lambda (G2911@x) (source-info G2911@x))) (set! G288e@annotation-expression (lambda (G2913@x) (if (pair? G2913@x) (cons (car G2913@x) (cdr G2913@x)) (display '"line:46\n")))) (set! G2890@scm->fasl (lambda (G2915@filename) (string-append G2915@filename '".fasl"))) (set! G2892@fasl-save (lambda (G2917@filename G2918@obj) (call-with-port (open-file-output-port G2917@filename) (lambda (G291b@port) ((symbol-value 'fasl-write!) G2918@obj G291b@port))))) (set! G2894@fasl-load (lambda (G291d@filename) (call-with-port (open-file-input-port G291d@filename) (symbol-value 'fasl-read!)))) (set! G2896@serialize-library (lambda (G291f@filename G2920@obj) (begin (format '#t '"serialize-library ~a\n..." G291f@filename) ((lambda (G2923@fasl-file) (begin (if (file-exists? G2923@fasl-file) (delete-file G2923@fasl-file) (void)) (call/cc (lambda (G2926@G2925) (with-exception-handler (lambda (G2928@c) (G2926@G2925 (if '#t (begin (format '#t '"Warning:serialize-library failed " G291f@filename) (if (file-exists? G2923@fasl-file) (delete-file G2923@fasl-file) (void)) '#f) (raise G2928@c)))) (lambda () (begin '#f (G2892@fasl-save G2923@fasl-file G2920@obj) (display '"OK\n")))))))) (G2890@scm->fasl G291f@filename))))) (set! G2898@load-serialized-library (lambda (G292a@filename G292b@obj) ((lambda (G292e@fasl-file) (if (if (file-exists? G292e@fasl-file) (begin '#f ((symbol-value 'file-newer?) G292e@fasl-file G292a@filename)) '#f) ((lambda (G2930@expanded2core) ((lambda (G2932@code) ((lambda (G2934@pivot) ((lambda (G2936@visit) ((lambda (G2938@visit-proc) ((lambda () (begin (set-car! G2934@pivot G2938@visit-proc) ((lambda (G293a@pivot) ((lambda (G293c@invoke) ((lambda () (begin (set-car! G293a@pivot (lambda () (eval-core G293c@invoke))) (apply G292b@obj G2932@code))))) (G2930@expanded2core (car G293a@pivot)))) (cdr G2934@pivot)) '#t)))) (lambda () (eval-core G2936@visit)))) (G2930@expanded2core (car G2934@pivot)))) (cddddr (cddddr G2932@code)))) (G2894@fasl-load G292e@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G2890@scm->fasl G292a@filename)))) (set! G289a@make-record-printer (lambda (G293e@name G293f@printer) (lambda G2942@x (begin (display '"record printer") (for-each display G2942@x))))) (set! G289c@compile-core (lambda G2944@x (apply error 'comile-core '"not implementated" G2944@x))) (set! G289e@read-library-source-file (lambda (G2946@file-name) (with-input-from-file G2946@file-name G2886@read-annotated))) (set! G28a0@make-parameter (lambda G2956 ((lambda (G2957) (if (= G2957 '1) (apply (lambda (G2948@x) (G28a0@make-parameter G2948@x (lambda (G294a@x) G294a@x))) G2956) (if (= G2957 '2) (apply (lambda (G294c@x G294d@fender) ((lambda (G2950@x) (lambda G2954 ((lambda (G2955) (if (= G2955 '0) (apply (lambda () G2950@x) G2954) (if (= G2955 '1) (apply (lambda (G2952@v) (set! G2950@x (G294d@fender G2952@v))) G2954) (error 'apply '"invalid arg count")))) (length G2954)))) (G294d@fender G294c@x))) G2956) (error 'apply '"invalid arg count")))) (length G2956)))) (set! G290c@file-options-spec (lambda (G2958@x) G2958@x)) (begin (set! G2968@G290c@file-options-spec G290c@file-options-spec) (set! G2967@G28a0@make-parameter G28a0@make-parameter) (set! G2966@G289e@read-library-source-file G289e@read-library-source-file) (set! G2965@G289c@compile-core G289c@compile-core) (set! G2964@G289a@make-record-printer G289a@make-record-printer) (set! G2963@G2898@load-serialized-library G2898@load-serialized-library) (set! G2962@G2896@serialize-library G2896@serialize-library) (set! G2961@G2894@fasl-load G2894@fasl-load) (set! G2960@G2892@fasl-save G2892@fasl-save) (set! G295f@G2890@scm->fasl G2890@scm->fasl) (set! G295e@G288e@annotation-expression G288e@annotation-expression) (set! G295d@G288c@annotation-source G288c@annotation-source) (set! G295c@G288a@annotation? G288a@annotation?) (set! G295b@G2888@annotation-stripped G2888@annotation-stripped) (set! G295a@G2886@read-annotated G2886@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G296d@current-primitive-locations G296f@mutable? G2971@rewriter G2973@expanded->core G2975@compile-core-expr G2977@pretty-print G2979@compile-core-expr-to-port) (begin (set! G296d@current-primitive-locations (G2967@G28a0@make-parameter (lambda (G297a@x) '#f) (lambda (G297c@p) G297c@p))) (set! G296f@mutable? (lambda (G297e@x) ((lambda (G2980@t) (if G2980@t G2980@t ((lambda (G2982@t) (if G2982@t G2982@t (begin '#f (hashtable? G297e@x)))) (vector? G297e@x)))) (pair? G297e@x)))) (set! G2971@rewriter (lambda (G2984@quote-hack?) ((lambda (G2987@f) (begin (set! G2987@f (lambda (G2988@x) (if (pair? G2988@x) ((lambda (G298a@t) (if (memv G298a@t '(quote)) (if (if G2984@quote-hack? (begin '#f (G296f@mutable? (cadr G2988@x))) '#f) ((lambda (G298c@g) (begin (set-symbol-value! G298c@g (cadr G2988@x)) G298c@g)) (gensym)) G2988@x) (if (memv G298a@t '(case-lambda)) (cons 'case-lambda (map (lambda (G298e@x) (cons (car G298e@x) (map G2987@f (cdr G298e@x)))) (cdr G2988@x))) (if (memv G298a@t '(lambda)) (cons* 'lambda (cadr G2988@x) (map G2987@f (cddr G2988@x))) (if (memv G298a@t '(letrec)) ((lambda (G2990@bindings G2991@body*) ((lambda (G2994@lhs* G2995@rhs*) (cons* 'letrec (map list G2994@lhs* (map G2987@f G2995@rhs*)) (map G2987@f G2991@body*))) (map car G2990@bindings) (map cadr G2990@bindings))) (cadr G2988@x) (cddr G2988@x)) (if (memv G298a@t '(letrec*)) ((lambda (G2998@bindings G2999@body*) ((lambda (G299c@lhs* G299d@rhs*) (cons* 'letrec* (map list G299c@lhs* (map G2987@f G299d@rhs*)) (map G2987@f G2999@body*))) (map car G2998@bindings) (map cadr G2998@bindings))) (cadr G2988@x) (cddr G2988@x)) (if (memv G298a@t '(library-letrec*)) ((lambda (G29a0@name G29a1@x) ((lambda (G29a4@bindings G29a5@body*) ((lambda (G29a8@lhs* G29a9@lhs** G29aa@rhs*) (cons* 'library-letrec* G29a0@name (map list G29a8@lhs* G29a9@lhs** (map G2987@f G29aa@rhs*)) (map G2987@f G29a5@body*))) (map car G29a4@bindings) (map cadr G29a4@bindings) (map caddr G29a4@bindings))) (cadr G29a1@x) (cddr G29a1@x))) (cadr G2988@x) (cdr G2988@x)) (if (memv G298a@t '(begin)) (cons 'begin (map G2987@f (cdr G2988@x))) (if (memv G298a@t '(set!)) (list 'set! (cadr G2988@x) (G2987@f (caddr G2988@x))) (if (memv G298a@t '(primitive)) ((lambda (G29ae@op) ((lambda (G29b0@t) (if G29b0@t ((lambda (G29b2@loc) G29b2@loc) G29b0@t) G29ae@op)) ((G296d@current-primitive-locations) G29ae@op))) (cadr G2988@x)) (if (memv G298a@t '(define)) G2988@x (if (list? G2988@x) (map G2987@f G2988@x) (error 'rewrite '"invalid form ~s ~s" G2988@x (list? G2988@x)))))))))))))) (car G2988@x)) G2988@x))) G2987@f)) '#f))) (set! G2973@expanded->core (lambda (G29b4@x) ((G2971@rewriter '#t) G29b4@x))) (set! G2975@compile-core-expr (lambda (G29b6@x) ((G2971@rewriter '#f) G29b6@x))) (set! G2977@pretty-print write) (set! G2979@compile-core-expr-to-port (lambda (G29b8@x G29b9@p) (G2977@pretty-print ((G2971@rewriter '#f) G29b8@x) G29b9@p))) (begin (set! G29c2@G2979@compile-core-expr-to-port G2979@compile-core-expr-to-port) (set! G29c1@G2977@pretty-print G2977@pretty-print) (set! G29c0@G2975@compile-core-expr G2975@compile-core-expr) (set! G29bf@G2973@expanded->core G2973@expanded->core) (set! G29be@G2971@rewriter G2971@rewriter) (set! G29bd@G296f@mutable? G296f@mutable?) (set! G29bc@G296d@current-primitive-locations G296d@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a18@make-collection G2a1a@current-library-collection G2a20@G2a1b G2a22@G2a1d G2a24@G2a1c G2a27@library? G2a29@make-library G2a2b@library-id G2a2d@library-name G2a2f@library-version G2a31@library-imp* G2a33@library-vis* G2a35@library-inv* G2a37@library-subst G2a39@library-env G2a3b@library-visit-state G2a3d@library-invoke-state G2a3f@library-visit-code G2a41@library-invoke-code G2a43@library-visible? G2a45@library-source-file-name G2a47@set-library-id! G2a49@set-library-name! G2a4b@set-library-version! G2a4d@set-library-imp*! G2a4f@set-library-vis*! G2a51@set-library-inv*! G2a53@set-library-subst! G2a55@set-library-env! G2a57@set-library-visit-state! G2a59@set-library-invoke-state! G2a5b@set-library-visit-code! G2a5d@set-library-invoke-code! G2a5f@set-library-visible?! G2a61@set-library-source-file-name! G2a63@rp G2a65@find-dependencies G2a67@find-library-by G2a69@library-path G2a6b@library-extensions G2a6d@library-name->file-name G2a6f@file-locator G2a71@serialize-all G2a73@current-precompiled-library-loader G2a75@try-load-from-file G2a77@library-loader G2a79@current-library-expander G2a7b@external-pending-libraries G2a7d@find-external-library G2a7f@find-library-by-name G2a81@library-exists? G2a83@find-library-by-spec/die G2a85@label->binding-table G2a87@install-library-record G2a89@install-library G2a8b@imported-label->binding G2a8d@invoke-library G2a8f@visit-library G2a91@invoke-library-by-spec G2a93@installed-libraries G2a95@library-spec) (begin (set! G2a18@make-collection (lambda () ((lambda (G2a96@set) ((lambda (G2a99@set-cons) (begin (set! G2a99@set-cons (lambda (G2a9e@x G2a9f@ls) (if (memq G2a9e@x G2a9f@ls) G2a9f@ls (cons G2a9e@x G2a9f@ls)))) (lambda G2a9c ((lambda (G2a9d) (if (= G2a9d '0) (apply (lambda () G2a96@set) G2a9c) (if (= G2a9d '1) (apply (lambda (G2a9a@x) (set! G2a96@set (G2a99@set-cons G2a9a@x G2a96@set))) G2a9c) (error 'apply '"invalid arg count")))) (length G2a9c))))) '#f)) '()))) (set! G2a1a@current-library-collection (G2967@G28a0@make-parameter (G2a18@make-collection) (lambda (G2aa2@x) (begin (if (not (procedure? G2aa2@x)) (assertion-violation 'current-library-collection '"not a procedure" G2aa2@x) (void)) G2aa2@x)))) (set! G2a20@G2a1b (make-record-type-descriptor 'library '#f 'G2a1e '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a22@G2a1d '#f) (set! G2a24@G2a1c (make-record-constructor-descriptor G2a20@G2a1b '#f G2a22@G2a1d)) (set! G2a27@library? (record-predicate G2a20@G2a1b)) (set! G2a29@make-library (record-constructor G2a24@G2a1c)) (set! G2a2b@library-id (record-accessor G2a20@G2a1b '0)) (set! G2a2d@library-name (record-accessor G2a20@G2a1b '1)) (set! G2a2f@library-version (record-accessor G2a20@G2a1b '2)) (set! G2a31@library-imp* (record-accessor G2a20@G2a1b '3)) (set! G2a33@library-vis* (record-accessor G2a20@G2a1b '4)) (set! G2a35@library-inv* (record-accessor G2a20@G2a1b '5)) (set! G2a37@library-subst (record-accessor G2a20@G2a1b '6)) (set! G2a39@library-env (record-accessor G2a20@G2a1b '7)) (set! G2a3b@library-visit-state (record-accessor G2a20@G2a1b '8)) (set! G2a3d@library-invoke-state (record-accessor G2a20@G2a1b '9)) (set! G2a3f@library-visit-code (record-accessor G2a20@G2a1b '10)) (set! G2a41@library-invoke-code (record-accessor G2a20@G2a1b '11)) (set! G2a43@library-visible? (record-accessor G2a20@G2a1b '12)) (set! G2a45@library-source-file-name (record-accessor G2a20@G2a1b '13)) (set! G2a47@set-library-id! (record-mutator G2a20@G2a1b '0)) (set! G2a49@set-library-name! (record-mutator G2a20@G2a1b '1)) (set! G2a4b@set-library-version! (record-mutator G2a20@G2a1b '2)) (set! G2a4d@set-library-imp*! (record-mutator G2a20@G2a1b '3)) (set! G2a4f@set-library-vis*! (record-mutator G2a20@G2a1b '4)) (set! G2a51@set-library-inv*! (record-mutator G2a20@G2a1b '5)) (set! G2a53@set-library-subst! (record-mutator G2a20@G2a1b '6)) (set! G2a55@set-library-env! (record-mutator G2a20@G2a1b '7)) (set! G2a57@set-library-visit-state! (record-mutator G2a20@G2a1b '8)) (set! G2a59@set-library-invoke-state! (record-mutator G2a20@G2a1b '9)) (set! G2a5b@set-library-visit-code! (record-mutator G2a20@G2a1b '10)) (set! G2a5d@set-library-invoke-code! (record-mutator G2a20@G2a1b '11)) (set! G2a5f@set-library-visible?! (record-mutator G2a20@G2a1b '12)) (set! G2a61@set-library-source-file-name! (record-mutator G2a20@G2a1b '13)) (set! G2a63@rp (G2964@G289a@make-record-printer 'library (lambda (G2aa4@x G2aa5@p G2aa6@wr) (begin (if (not (G2a27@library? G2aa4@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a2f@library-version G2aa4@x)) (G2a2d@library-name G2aa4@x) (append (G2a2d@library-name G2aa4@x) (list (G2a2f@library-version G2aa4@x))))) G2aa5@p))))) (set! G2a65@find-dependencies (lambda (G2aaa@ls) (if (null? G2aaa@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2a67@find-library-by (lambda (G2aac@pred) ((letrec ((G2aae@f (lambda (G2ab0@ls) (if (null? G2ab0@ls) '#f (if (G2aac@pred (car G2ab0@ls)) (car G2ab0@ls) (G2aae@f (cdr G2ab0@ls))))))) G2aae@f) ((G2a1a@current-library-collection))))) (set! G2a69@library-path (G2967@G28a0@make-parameter '(".") (lambda (G2ab2@x) (if (if (list? G2ab2@x) (begin '#f (for-all string? G2ab2@x)) '#f) (map (lambda (G2ab4@x) G2ab4@x) G2ab2@x) (assertion-violation 'library-path '"not a list of strings" G2ab2@x))))) (set! G2a6b@library-extensions (G2967@G28a0@make-parameter '(".sls" ".ss" ".scm") (lambda (G2ab6@x) (if (if (list? G2ab6@x) (begin '#f (for-all string? G2ab6@x)) '#f) (map (lambda (G2ab8@x) G2ab8@x) G2ab6@x) (assertion-violation 'library-extensions '"not a list of strings" G2ab6@x))))) (set! G2a6d@library-name->file-name (lambda (G2aba@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2abe@G2abc G2abf@G2abd) ((lambda (G2ac2@extract G2ac3@p) ((lambda (G2ac7@display-hex) (begin (set! G2ac7@display-hex (lambda (G2ad6@n) (if (<= '0 G2ad6@n '9) (display G2ad6@n G2ac3@p) (display (integer->char (+ (char->integer '#\A) (- G2ad6@n '10))) G2ac3@p)))) (begin ((letrec ((G2ac8@f (lambda (G2aca@ls) (if (not (null? G2aca@ls)) (begin (display '"/" G2ac3@p) (for-each (lambda (G2acc@c) (if ((lambda (G2ace@t) (if G2ace@t G2ace@t ((lambda (G2ad0@t) (if G2ad0@t G2ad0@t ((lambda (G2ad2@t) (if G2ad2@t G2ad2@t (begin '#f (memv G2acc@c '(#\- #\. #\_ #\~))))) (char<=? '#\nul G2acc@c '#\9)))) (char<=? '#\A G2acc@c '#\Z)))) (char<=? '#\a G2acc@c '#\z)) (display G2acc@c G2ac3@p) (begin (display '"%" G2ac3@p) ((lambda (G2ad4@n) (begin (G2ac7@display-hex (quotient G2ad4@n '16)) (G2ac7@display-hex (remainder G2ad4@n '16)))) (char->integer G2acc@c))))) (string->list (symbol->string (car G2aca@ls)))) (G2ac8@f (cdr G2aca@ls))) (void))))) G2ac8@f) G2aba@x) (G2ac2@extract)))) '#f)) G2abf@G2abd G2abe@G2abc))))) (set! G2a6f@file-locator (G2967@G28a0@make-parameter (lambda (G2ad8@x) ((lambda (G2ada@str) ((letrec ((G2adc@f (lambda (G2ade@ls G2adf@exts G2ae0@failed-list) (if (null? G2ade@ls) ((lambda () ((lambda (G2aec@G2ae7 G2aee@G2ae9 G2af0@G2ae8 G2af3@G2ae6 G2af5@make-library-resolution-condition G2af7@G2ae4 G2af9@G2ae5 G2afb@library-resolution-condition? G2afd@condition-library G2aff@condition-files) (begin (set! G2aec@G2ae7 (make-record-type-descriptor '&library-resolution &condition-rtd 'G2aea '#f '#f '#((immutable library) (immutable files)))) (set! G2aee@G2ae9 '#f) (set! G2af0@G2ae8 (make-record-constructor-descriptor G2aec@G2ae7 &condition-rcd G2aee@G2ae9)) (set! G2af3@G2ae6 (record-predicate G2aec@G2ae7)) (set! G2af5@make-library-resolution-condition (record-constructor G2af0@G2ae8)) (set! G2af7@G2ae4 (record-accessor G2aec@G2ae7 '0)) (set! G2af9@G2ae5 (record-accessor G2aec@G2ae7 '1)) (set! G2afb@library-resolution-condition? (condition-predicate G2aec@G2ae7)) (set! G2afd@condition-library (condition-accessor G2aec@G2ae7 G2af7@G2ae4)) (set! G2aff@condition-files (condition-accessor G2aec@G2ae7 G2af9@G2ae5)) (raise (condition (G4b49@G4a4d@make-error) (G4b63@G4a9b@make-who-condition 'expander) (G4b35@G4a13@make-message-condition '"cannot locate library in library-path") (G2af5@make-library-resolution-condition G2ad8@x (reverse G2ae0@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2adf@exts) (G2adc@f (cdr G2ade@ls) (G2a6b@library-extensions) G2ae0@failed-list) ((lambda (G2b00@name) (if (file-exists? G2b00@name) G2b00@name (G2adc@f G2ade@ls (cdr G2adf@exts) (cons G2b00@name G2ae0@failed-list)))) (string-append (car G2ade@ls) G2ada@str (car G2adf@exts)))))))) G2adc@f) (G2a69@library-path) (G2a6b@library-extensions) '())) (G2a6d@library-name->file-name G2ad8@x))) (lambda (G2b02@f) (if (procedure? G2b02@f) G2b02@f (assertion-violation 'file-locator '"not a procedure" G2b02@f))))) (set! G2a71@serialize-all (lambda (G2b04@serialize G2b05@compile) ((lambda (G2b09@library-desc) (begin (set! G2b09@library-desc (lambda (G2b0c@x) (list (G2a2b@library-id G2b0c@x) (G2a2d@library-name G2b0c@x)))) (for-each (lambda (G2b0a@x) (if (G2a45@library-source-file-name G2b0a@x) (G2b04@serialize (G2a45@library-source-file-name G2b0a@x) (list (G2a2b@library-id G2b0a@x) (G2a2d@library-name G2b0a@x) (G2a2f@library-version G2b0a@x) (map G2b09@library-desc (G2a31@library-imp* G2b0a@x)) (map G2b09@library-desc (G2a33@library-vis* G2b0a@x)) (map G2b09@library-desc (G2a35@library-inv* G2b0a@x)) (G2a37@library-subst G2b0a@x) (G2a39@library-env G2b0a@x) (G2b05@compile (G2a3f@library-visit-code G2b0a@x)) (G2b05@compile (G2a41@library-invoke-code G2b0a@x)) (G2a43@library-visible? G2b0a@x))) (void))) ((G2a1a@current-library-collection))))) '#f))) (set! G2a73@current-precompiled-library-loader (G2967@G28a0@make-parameter (lambda (G2b0e@filename G2b0f@sk) '#f))) (set! G2a75@try-load-from-file (lambda (G2b12@filename) ((G2a73@current-precompiled-library-loader) G2b12@filename (lambda G2b38 ((lambda (G2b39) (if (= G2b39 '11) (apply (lambda (G2b14@id G2b15@name G2b16@ver G2b17@imp* G2b18@vis* G2b19@inv* G2b1a@exp-subst G2b1b@exp-env G2b1c@visit-proc G2b1d@invoke-proc G2b1e@visible?) ((letrec ((G2b2a@f (lambda (G2b2c@deps) (if (null? G2b2c@deps) (begin (G2a89@install-library G2b14@id G2b15@name G2b16@ver G2b17@imp* G2b18@vis* G2b19@inv* G2b1a@exp-subst G2b1b@exp-env G2b1c@visit-proc G2b1d@invoke-proc '#f '#f G2b1e@visible? '#f) '#t) ((lambda (G2b2e@d) ((lambda (G2b30@label G2b31@dname) ((lambda (G2b34@l) (if (if (G2a27@library? G2b34@l) (begin '#f (eq? G2b30@label (G2a2b@library-id G2b34@l))) '#f) (G2b2a@f (cdr G2b2c@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b15@name G2b31@dname G2b12@filename G2b34@l G2b30@label (G2a2b@library-id G2b34@l)) '#f))) (G2a7f@find-library-by-name G2b31@dname))) (car G2b2e@d) (cadr G2b2e@d))) (car G2b2c@deps)))))) G2b2a@f) (append G2b17@imp* G2b18@vis* G2b19@inv*))) G2b38) (if (>= G2b39 '0) (apply (lambda G2b36@others '#f) G2b38) (error 'apply '"invalid arg count")))) (length G2b38)))))) (set! G2a77@library-loader (G2967@G28a0@make-parameter (lambda (G2b3a@x) ((lambda (G2b3c@file-name) (if (not G2b3c@file-name) (assertion-violation '#f '"cannot file library" G2b3a@x) ((lambda (G2b3e@t) (if G2b3e@t G2b3e@t (begin '#f ((G2a79@current-library-expander) (G2966@G289e@read-library-source-file G2b3c@file-name) G2b3c@file-name (lambda (G2b40@name) (if (not (equal? G2b40@name G2b3a@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b44@G2b42 G2b45@G2b43) ((lambda (G2b48@e G2b49@p) (begin (display '"expected to find library " G2b49@p) (write G2b3a@x G2b49@p) (display '" in file " G2b49@p) (display G2b3c@file-name G2b49@p) (display '", found " G2b49@p) (write G2b40@name G2b49@p) (display '" instead" G2b49@p) (G2b48@e))) G2b45@G2b43 G2b44@G2b42)))) (void))))))) (G2a75@try-load-from-file G2b3c@file-name)))) ((G2a6f@file-locator) G2b3a@x))) (lambda (G2b4c@f) (if (procedure? G2b4c@f) G2b4c@f (assertion-violation 'library-locator '"not a procedure" G2b4c@f))))) (set! G2a79@current-library-expander (G2967@G28a0@make-parameter (lambda (G2b4e@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b50@f) (if (procedure? G2b50@f) G2b50@f (assertion-violation 'library-expander '"not a procedure" G2b50@f))))) (set! G2a7b@external-pending-libraries (G2967@G28a0@make-parameter '())) (set! G2a7d@find-external-library (lambda (G2b52@name) (begin (if (member G2b52@name (G2a7b@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b52@name) (void)) ((lambda (G2b56@G2b54@external-pending-libraries G2b57@G2b55@external-pending-libraries) ((lambda (G2b5a@swap) (dynamic-wind G2b5a@swap (lambda () (begin ((G2a77@library-loader) G2b52@name) ((lambda (G2b5c@t) (if G2b5c@t G2b5c@t (begin '#f (assertion-violation '#f '"handling external library did not yield the correct library" G2b52@name)))) (G2a67@find-library-by (lambda (G2b5e@x) (equal? (G2a2d@library-name G2b5e@x) G2b52@name)))))) G2b5a@swap)) (lambda () ((lambda (G2b60@t) (begin (G2b56@G2b54@external-pending-libraries G2b57@G2b55@external-pending-libraries) (set! G2b57@G2b55@external-pending-libraries G2b60@t))) (G2b56@G2b54@external-pending-libraries))))) G2a7b@external-pending-libraries (cons G2b52@name (G2a7b@external-pending-libraries)))))) (set! G2a7f@find-library-by-name (lambda (G2b62@name) ((lambda (G2b64@t) (if G2b64@t G2b64@t (begin '#f (G2a7d@find-external-library G2b62@name)))) (G2a67@find-library-by (lambda (G2b66@x) (equal? (G2a2d@library-name G2b66@x) G2b62@name)))))) (set! G2a81@library-exists? (lambda (G2b68@name) (if (G2a67@find-library-by (lambda (G2b6a@x) (equal? (G2a2d@library-name G2b6a@x) G2b68@name))) (begin '#f '#t) '#f))) (set! G2a83@find-library-by-spec/die (lambda (G2b6c@spec) ((lambda (G2b6e@id) ((lambda (G2b70@t) (if G2b70@t G2b70@t (begin '#f (assertion-violation '#f '"cannot find library with required spec" G2b6c@spec)))) (G2a67@find-library-by (lambda (G2b72@x) (eq? G2b6e@id (G2a2b@library-id G2b72@x)))))) (car G2b6c@spec)))) (set! G2a85@label->binding-table (make-eq-hashtable)) (set! G2a87@install-library-record (lambda (G2b74@lib) (begin ((lambda (G2b76@exp-env) (for-each (lambda (G2b78@x) ((lambda (G2b7a@label G2b7b@binding) ((lambda (G2b7e@binding) (hashtable-set! G2a85@label->binding-table G2b7a@label G2b7e@binding)) ((lambda (G2b80@t) (if (memv G2b80@t '(global)) (cons 'global (cons G2b74@lib (cdr G2b7b@binding))) (if (memv G2b80@t '(global-macro)) (cons 'global-macro (cons G2b74@lib (cdr G2b7b@binding))) (if (memv G2b80@t '(global-macro!)) (cons 'global-macro! (cons G2b74@lib (cdr G2b7b@binding))) G2b7b@binding)))) (car G2b7b@binding)))) (car G2b78@x) (cdr G2b78@x))) G2b76@exp-env)) (G2a39@library-env G2b74@lib)) ((G2a1a@current-library-collection) G2b74@lib)))) (set! G2a89@install-library (lambda (G2b82@id G2b83@name G2b84@ver G2b85@imp* G2b86@vis* G2b87@inv* G2b88@exp-subst G2b89@exp-env G2b8a@visit-proc G2b8b@invoke-proc G2b8c@visit-code G2b8d@invoke-code G2b8e@visible? G2b8f@source-file-name) ((lambda (G2b9e@imp-lib* G2b9f@vis-lib* G2ba0@inv-lib*) (begin (if (not (if (symbol? G2b82@id) (if (list? G2b83@name) (begin '#f (list? G2b84@ver)) '#f) '#f)) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b82@id G2b83@name G2b84@ver) (void)) (if (G2a81@library-exists? G2b83@name) (assertion-violation 'install-library '"library is already installed" G2b83@name) (void)) ((lambda (G2ba4@lib) (G2a87@install-library-record G2ba4@lib)) (G2a29@make-library G2b82@id G2b83@name G2b84@ver G2b9e@imp-lib* G2b9f@vis-lib* G2ba0@inv-lib* G2b88@exp-subst G2b89@exp-env G2b8a@visit-proc G2b8b@invoke-proc G2b8c@visit-code G2b8d@invoke-code G2b8e@visible? G2b8f@source-file-name)))) (map G2a83@find-library-by-spec/die G2b85@imp*) (map G2a83@find-library-by-spec/die G2b86@vis*) (map G2a83@find-library-by-spec/die G2b87@inv*)))) (set! G2a8b@imported-label->binding (lambda (G2ba6@lab) (hashtable-ref G2a85@label->binding-table G2ba6@lab '#f))) (set! G2a8d@invoke-library (lambda (G2ba8@lib) ((lambda (G2baa@invoke) (if (procedure? G2baa@invoke) (begin (G2a59@set-library-invoke-state! G2ba8@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2ba8@lib))) (for-each G2a8d@invoke-library (G2a35@library-inv* G2ba8@lib)) (G2a59@set-library-invoke-state! G2ba8@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2ba8@lib))) (G2baa@invoke) (G2a59@set-library-invoke-state! G2ba8@lib '#t)) (void))) (G2a3d@library-invoke-state G2ba8@lib)))) (set! G2a8f@visit-library (lambda (G2bac@lib) ((lambda (G2bae@visit) (if (procedure? G2bae@visit) (begin (G2a57@set-library-visit-state! G2bac@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bac@lib))) (for-each G2a8d@invoke-library (G2a33@library-vis* G2bac@lib)) (G2a57@set-library-visit-state! G2bac@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bac@lib))) (G2bae@visit) (G2a57@set-library-visit-state! G2bac@lib '#t)) (void))) (G2a3b@library-visit-state G2bac@lib)))) (set! G2a91@invoke-library-by-spec (lambda (G2bb0@spec) (G2a8d@invoke-library (G2a83@find-library-by-spec/die G2bb0@spec)))) (set! G2a93@installed-libraries (lambda G2bba ((lambda (G2bbb) (if (= G2bbb '1) (apply (lambda (G2bb2@all?) ((letrec ((G2bb4@f (lambda (G2bb6@ls) (if (null? G2bb6@ls) '() (if ((lambda (G2bb8@t) (if G2bb8@t G2bb8@t (begin '#f (G2a43@library-visible? (car G2bb6@ls))))) G2bb2@all?) (cons (car G2bb6@ls) (G2bb4@f (cdr G2bb6@ls))) (G2bb4@f (cdr G2bb6@ls))))))) G2bb4@f) ((G2a1a@current-library-collection)))) G2bba) (if (= G2bbb '0) (apply (lambda () (G2a93@installed-libraries '#f)) G2bba) (error 'apply '"invalid arg count")))) (length G2bba)))) (set! G2a95@library-spec (lambda (G2bbc@x) (begin (if (not (G2a27@library? G2bbc@x)) (assertion-violation 'library-spec '"not a library" G2bbc@x) (void)) (list (G2a2b@library-id G2bbc@x) (G2a2d@library-name G2bbc@x) (G2a2f@library-version G2bbc@x))))) (begin (set! G2bfa@G2a95@library-spec G2a95@library-spec) (set! G2bf9@G2a93@installed-libraries G2a93@installed-libraries) (set! G2bf8@G2a91@invoke-library-by-spec G2a91@invoke-library-by-spec) (set! G2bf7@G2a8f@visit-library G2a8f@visit-library) (set! G2bf6@G2a8d@invoke-library G2a8d@invoke-library) (set! G2bf5@G2a8b@imported-label->binding G2a8b@imported-label->binding) (set! G2bf4@G2a89@install-library G2a89@install-library) (set! G2bf3@G2a87@install-library-record G2a87@install-library-record) (set! G2bf2@G2a85@label->binding-table G2a85@label->binding-table) (set! G2bf1@G2a83@find-library-by-spec/die G2a83@find-library-by-spec/die) (set! G2bf0@G2a81@library-exists? G2a81@library-exists?) (set! G2bef@G2a7f@find-library-by-name G2a7f@find-library-by-name) (set! G2bee@G2a7d@find-external-library G2a7d@find-external-library) (set! G2bed@G2a7b@external-pending-libraries G2a7b@external-pending-libraries) (set! G2bec@G2a79@current-library-expander G2a79@current-library-expander) (set! G2beb@G2a77@library-loader G2a77@library-loader) (set! G2bea@G2a75@try-load-from-file G2a75@try-load-from-file) (set! G2be9@G2a73@current-precompiled-library-loader G2a73@current-precompiled-library-loader) (set! G2be8@G2a71@serialize-all G2a71@serialize-all) (set! G2be7@G2a6f@file-locator G2a6f@file-locator) (set! G2be6@G2a6d@library-name->file-name G2a6d@library-name->file-name) (set! G2be5@G2a6b@library-extensions G2a6b@library-extensions) (set! G2be4@G2a69@library-path G2a69@library-path) (set! G2be3@G2a67@find-library-by G2a67@find-library-by) (set! G2be2@G2a65@find-dependencies G2a65@find-dependencies) (set! G2be1@G2a63@rp G2a63@rp) (set! G2be0@G2a61@set-library-source-file-name! G2a61@set-library-source-file-name!) (set! G2bdf@G2a5f@set-library-visible?! G2a5f@set-library-visible?!) (set! G2bde@G2a5d@set-library-invoke-code! G2a5d@set-library-invoke-code!) (set! G2bdd@G2a5b@set-library-visit-code! G2a5b@set-library-visit-code!) (set! G2bdc@G2a59@set-library-invoke-state! G2a59@set-library-invoke-state!) (set! G2bdb@G2a57@set-library-visit-state! G2a57@set-library-visit-state!) (set! G2bda@G2a55@set-library-env! G2a55@set-library-env!) (set! G2bd9@G2a53@set-library-subst! G2a53@set-library-subst!) (set! G2bd8@G2a51@set-library-inv*! G2a51@set-library-inv*!) (set! G2bd7@G2a4f@set-library-vis*! G2a4f@set-library-vis*!) (set! G2bd6@G2a4d@set-library-imp*! G2a4d@set-library-imp*!) (set! G2bd5@G2a4b@set-library-version! G2a4b@set-library-version!) (set! G2bd4@G2a49@set-library-name! G2a49@set-library-name!) (set! G2bd3@G2a47@set-library-id! G2a47@set-library-id!) (set! G2bd2@G2a45@library-source-file-name G2a45@library-source-file-name) (set! G2bd1@G2a43@library-visible? G2a43@library-visible?) (set! G2bd0@G2a41@library-invoke-code G2a41@library-invoke-code) (set! G2bcf@G2a3f@library-visit-code G2a3f@library-visit-code) (set! G2bce@G2a3d@library-invoke-state G2a3d@library-invoke-state) (set! G2bcd@G2a3b@library-visit-state G2a3b@library-visit-state) (set! G2bcc@G2a39@library-env G2a39@library-env) (set! G2bcb@G2a37@library-subst G2a37@library-subst) (set! G2bca@G2a35@library-inv* G2a35@library-inv*) (set! G2bc9@G2a33@library-vis* G2a33@library-vis*) (set! G2bc8@G2a31@library-imp* G2a31@library-imp*) (set! G2bc7@G2a2f@library-version G2a2f@library-version) (set! G2bc6@G2a2d@library-name G2a2d@library-name) (set! G2bc5@G2a2b@library-id G2a2b@library-id) (set! G2bc4@G2a29@make-library G2a29@make-library) (set! G2bc3@G2a27@library? G2a27@library?) (set! G2bc2@G2a24@G2a1c G2a24@G2a1c) (set! G2bc1@G2a22@G2a1d G2a22@G2a1d) (set! G2bc0@G2a20@G2a1b G2a20@G2a1b) (set! G2bbf@G2a1a@current-library-collection G2a1a@current-library-collection) (set! G2bbe@G2a18@make-collection G2a18@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2bfd@build-global-define G2c5f@build-lambda G2c61@build-case-lambda G2c63@build-let G2c95@build-sequence G2c97@build-void G2c99@build-letrec G2c9b@build-letrec* G2c9d@build-library-letrec* G2c9f@build-receive) (begin (set! G2bfd@build-global-define (lambda (G2ca0@x) (G2c97@build-void))) (set! G2c5f@build-lambda (lambda (G2ca2@ae G2ca3@vars G2ca4@exp) (list 'lambda G2ca3@vars G2ca4@exp))) (set! G2c61@build-case-lambda (lambda (G2ca8@ae G2ca9@vars* G2caa@exp*) ((lambda (G2caf@build-error G2cb1@build-pred G2cb3@build-apply G2cb5@expand-case-lambda) (begin (set! G2caf@build-error (lambda (G2ce4@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2cb1@build-pred (lambda (G2cce@ae G2ccf@n G2cd0@vars) (call-with-values (lambda () ((letrec ((G2cd6@f (lambda (G2cd8@vars G2cd9@count) (if (pair? G2cd8@vars) (G2cd6@f (cdr G2cd8@vars) (+ G2cd9@count '1)) (if (null? G2cd8@vars) (values G2cd9@count '=) (values G2cd9@count '>=)))))) G2cd6@f) G2cd0@vars '0)) (lambda (G2cdc@G2cd4 G2cdd@G2cd5) ((lambda (G2ce0@pred G2ce1@count) (list (list 'primitive G2ce0@pred) G2ccf@n (list 'quote G2ce1@count))) G2cdd@G2cd5 G2cdc@G2cd4))))) (set! G2cb3@build-apply (lambda (G2cc6@ae G2cc7@g G2cc8@vars G2cc9@exp) (list '(primitive apply) (G2c5f@build-lambda G2cc6@ae G2cc8@vars G2cc9@exp) G2cc7@g))) (set! G2cb5@expand-case-lambda (lambda (G2cb6@ae G2cb7@vars G2cb8@exp*) ((lambda (G2cbc@g G2cbd@n) (list 'lambda G2cbc@g (G2c63@build-let G2cb6@ae (list G2cbd@n) (list (list '(primitive length) G2cbc@g)) ((letrec ((G2cc0@f (lambda (G2cc2@vars* G2cc3@exp*) (if (null? G2cc2@vars*) (G2caf@build-error G2cb6@ae) (list 'if (G2cb1@build-pred G2cb6@ae G2cbd@n (car G2cc2@vars*)) (G2cb3@build-apply G2cb6@ae G2cbc@g (car G2cc2@vars*) (car G2cc3@exp*)) (G2cc0@f (cdr G2cc2@vars*) (cdr G2cc3@exp*))))))) G2cc0@f) G2ca9@vars* G2cb8@exp*)))) (gensym) (gensym)))) (if (= (length G2caa@exp*) '1) (G2c5f@build-lambda G2ca8@ae (car G2ca9@vars*) (car G2caa@exp*)) (G2cb5@expand-case-lambda G2ca8@ae G2ca9@vars* G2caa@exp*)))) '#f '#f '#f '#f))) (set! G2c63@build-let (lambda (G2ce6@ae G2ce7@lhs* G2ce8@rhs* G2ce9@body) (cons (G2c5f@build-lambda G2ce6@ae G2ce7@lhs* G2ce9@body) G2ce8@rhs*))) (set! G2c95@build-sequence (lambda (G2cee@ae G2cef@exps) ((letrec ((G2cf2@loop (lambda (G2cf4@exps) (if (null? (cdr G2cf4@exps)) (car G2cf4@exps) (if (equal? (car G2cf4@exps) (G2c97@build-void)) (G2cf2@loop (cdr G2cf4@exps)) (cons 'begin G2cf4@exps)))))) G2cf2@loop) G2cef@exps))) (set! G2c97@build-void (lambda () '((primitive void)))) (set! G2c99@build-letrec (lambda (G2cf6@ae G2cf7@vars G2cf8@val-exps G2cf9@body-exp) (if (null? G2cf7@vars) G2cf9@body-exp (list 'letrec (map list G2cf7@vars G2cf8@val-exps) G2cf9@body-exp)))) (set! G2c9b@build-letrec* (lambda (G2cfe@ae G2cff@vars G2d00@val-exps G2d01@body-exp) (if (null? G2cff@vars) G2d01@body-exp (G2c63@build-let G2cfe@ae G2cff@vars (map (lambda (G2d06@x) (list 'quote '#f)) G2cff@vars) (G2c95@build-sequence G2cfe@ae (append (map (lambda (G2d08@lhs G2d09@rhs) (list 'set! G2d08@lhs G2d09@rhs)) G2cff@vars G2d00@val-exps) (list G2d01@body-exp))))))) (set! G2c9d@build-library-letrec* (lambda (G2d0c@ae G2d0d@name G2d0e@vars G2d0f@locs G2d10@val-exps G2d11@body-exp) (list 'library-letrec* G2d0d@name (map list G2d0e@vars G2d0f@locs G2d10@val-exps) G2d11@body-exp))) (set! G2c9f@build-receive (lambda (G2d18@ae G2d19@vars G2d1a@producer G2d1b@body*) (begin (display '"************** in ") (cons 'receive (cons G2d19@vars (cons G2d1a@producer G2d1b@body*)))))) (begin (set! G2d29@G2c9f@build-receive G2c9f@build-receive) (set! G2d28@G2c9d@build-library-letrec* G2c9d@build-library-letrec*) (set! G2d27@G2c9b@build-letrec* G2c9b@build-letrec*) (set! G2d26@G2c99@build-letrec G2c99@build-letrec) (set! G2d25@G2c97@build-void G2c97@build-void) (set! G2d24@G2c95@build-sequence G2c95@build-sequence) (set! G2d23@G2c63@build-let G2c63@build-let) (set! G2d22@G2c61@build-case-lambda G2c61@build-case-lambda) (set! G2d21@G2c5f@build-lambda G2c5f@build-lambda) (set! G2d20@G2bfd@build-global-define G2bfd@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2d36@set-cons G2d38@set-union G2d3d@top-mark* G2d3f@top-marked? G2d41@gen-lexical G2d43@gen-global G2d45@gen-label G2d47@gen-top-level-label G2d49@gen-define-label+loc G2d4b@gen-define-label G2d51@G2d4c G2d53@G2d4e G2d55@G2d4d G2d58@rib? G2d5a@make-rib G2d5c@rib-sym* G2d5e@rib-mark** G2d60@rib-label* G2d62@rib-sealed/freq G2d64@rib-cache G2d66@set-rib-sym*! G2d68@set-rib-mark**! G2d6a@set-rib-label*! G2d6c@set-rib-sealed/freq! G2d6e@set-rib-cache! G2d70@make-empty-rib G2d72@make-cache-rib G2d74@find-label G2d76@extend-rib! G2d78@extend-rib/nc! G2d7a@make-rib-map G2d7c@seal-rib! G2d7e@unseal-rib! G2d80@make-full-rib G2d86@G2d81 G2d88@G2d83 G2d8a@G2d82 G2d8d@stx? G2d8f@make-stx G2d91@stx-expr G2d93@stx-mark* G2d95@stx-subst* G2d97@stx-ae* G2d99@set-stx-expr! G2d9b@set-stx-mark*! G2d9d@set-stx-subst*! G2d9f@set-stx-ae*! G2da1@rp G2da3@datum->stx G2da5@gen-mark G2da7@anti-mark G2da9@anti-mark? G2dab@join-wraps G2dad@mkstx G2daf@add-mark G2db1@add-subst G2db3@syntax-kind? G2db5@syntax-vector->list G2db7@syntax-pair? G2db9@syntax-vector? G2dbb@syntax-null? G2dbd@syntax-list? G2dbf@syntax-car G2dc1@syntax-cdr G2dc3@syntax->list G2dc5@id? G2dc7@id->sym G2dc9@same-marks? G2dcb@bound-id=? G2dcd@free-id=? G2dcf@valid-bound-ids? G2dd1@distinct-bound-ids? G2dd3@bound-id-member? G2dd5@self-evaluating? G2dd7@strip-annotations G2dd9@strip G2ddb@stx->datum G2ddd@same-marks*? G2ddf@id->label G2de1@id->real-label G2de3@label->binding G2de5@make-binding G2de7@binding-type G2de9@binding-value G2deb@raise-unbound-error G2ded@syntax-type G2dfd@sanitize-binding G2dff@make-variable-transformer G2e01@variable-transformer? G2e03@variable-transformer-procedure G2e05@make-eval-transformer G2f4a@parse-define G2f4c@parse-define-syntax G2f4e@scheme-stx-hashtable G2f50@scheme-stx G2f52@lexical-var G2f54@lexical-mutable? G2f56@set-lexical-mutable! G2f58@add-lexical G2f5a@add-lexicals G2f5c@letrec-helper G2f5e@letrec-transformer G2f60@letrec*-transformer G2f62@fluid-let-syntax-transformer G2f64@type-descriptor-transformer G2f66@record-type-descriptor-transformer G2f68@record-constructor-descriptor-transformer G2f6a@when-macro G2f6c@unless-macro G2f6e@if-transformer G2f70@case-macro G2f72@quote-transformer G2f74@case-lambda-transformer G2f76@lambda-transformer G2f78@bless G2f7a@with-syntax-macro G2f7c@invalid-fmls-error G2f7e@let-macro G2f80@let-values-macro G2f82@let*-values-macro G2f84@trace-lambda-macro G2f86@trace-define-macro G2f88@trace-define-syntax-macro G2f8a@trace-let/rec-syntax G2f8c@trace-let-syntax-macro G2f8e@trace-letrec-syntax-macro G2f90@guard-macro G2f92@define-enumeration-macro G2f94@time-macro G2f96@delay-macro G2f98@assert-macro G2f9a@endianness-macro G2f9c@identifier-syntax-macro G2f9e@do-macro G2fa0@let*-macro G2fa2@or-macro G2fa4@and-macro G2fa6@cond-macro G2fa8@do-include G2faa@include-macro G2fac@include-into-macro G2fae@syntax-rules-macro G2fb0@quasiquote-macro G2fb2@quasisyntax-macro G2fb4@define-struct-macro G2fb6@define-record-type-macro G2fb8@define-condition-type-macro G2fba@incorrect-usage-macro G2fbc@parameterize-macro G2fbe@foreign-call-transformer G2fc0@convert-pattern G2fc2@syntax-dispatch G2fc4@ellipsis? G2fc6@underscore? G2fc8@verify-literals G2fca@syntax-case-transformer G2fcc@ellipsis-map G2fce@syntax-transformer G2fd0@core-macro-transformer G2fd2@file-options-macro G2fd4@symbol-macro G2fd6@macro-transformer G2fd8@local-macro-transformer G2fda@do-macro-call G2fdc@chi-macro G2fde@chi-local-macro G2fe0@chi-global-macro G2fe2@chi-expr* G2fe4@chi-application G2fe6@chi-expr G2fe8@chi-set! G2fea@verify-formals G2fec@chi-lambda-clause G2fee@chi-lambda-clause* G2ff0@chi-defun G2ff2@chi-rhs G2ff4@expand-interaction-rhs*/init* G2ff6@chi-rhs* G2ff8@find-bound=? G2ffa@find-dups G2ffc@chi-internal G2ffe@parse-module G3004@G2fff G3006@G3001 G3008@G3000 G300b@module-interface? G300d@make-module-interface G300f@module-interface-first-mark G3011@module-interface-exp-id-vec G3013@module-interface-exp-lab-vec G3015@set-module-interface-first-mark! G3017@set-module-interface-exp-id-vec! G3019@set-module-interface-exp-lab-vec! G301b@module-interface-exp-id* G301d@chi-internal-module G301f@chi-body* G3021@expand-transformer G3023@parse-exports G3025@parse-library-name G3027@parse-library G3029@parse-import-spec* G302b@make-top-rib G302d@make-collector G302f@inv-collector G3031@vis-collector G3033@imp-collector G3035@chi-library-internal G3037@chi-interaction-expr G3039@library-body-expander G303b@core-library-expander G303d@parse-top-level-program G303f@top-level-expander G3045@G3040 G3047@G3042 G3049@G3041 G304c@env? G304e@make-env G3050@env-names G3052@env-labels G3054@env-itc G3056@set-env-names! G3058@set-env-labels! G305a@set-env-itc! G305c@rp G3062@G305d G3064@G305f G3066@G305e G3069@interaction-env? G306b@make-interaction-env G306d@interaction-env-rib G306f@interaction-env-r G3071@interaction-env-locs G3073@set-interaction-env-rib! G3075@set-interaction-env-r! G3077@set-interaction-env-locs! G3079@rp G307b@interaction-environment-symbols G307d@environment-bindings G307f@parse-binding G3081@environment? G3083@environment-symbols G3085@environment G3087@null-environment G3089@scheme-report-environment G308b@expand G308d@eval G308f@library-expander G3091@boot-library-expand G3093@rev-map-append G3095@build-exports G3097@make-export-subst G3099@make-export-env/macros G309b@generate-temporaries G309d@free-identifier=? G309f@bound-identifier=? G30a1@make-source-condition G30a3@extract-position-condition G30a5@expression-position G30a7@assertion-error G30a9@syntax-error G30ab@extract-trace G30ad@syntax-violation* G30af@syntax-violation G30b1@identifier? G30b3@datum->syntax G30b5@syntax->datum G30b7@compile-r6rs-top-level G30b9@pre-compile-r6rs-top-level G30bb@interaction-environment G30bd@top-level-context) (begin (set! G2d36@set-cons (lambda (G30be@x G30bf@ls) (if (memq G30be@x G30bf@ls) G30bf@ls (cons G30be@x G30bf@ls)))) (set! G2d38@set-union (lambda (G30c2@ls1 G30c3@ls2) (if (null? G30c2@ls1) G30c3@ls2 (if (memq (car G30c2@ls1) G30c3@ls2) (G2d38@set-union (cdr G30c2@ls1) G30c3@ls2) (cons (car G30c2@ls1) (G2d38@set-union (cdr G30c2@ls1) G30c3@ls2)))))) (set! G2d3d@top-mark* '(top)) (set! G2d3f@top-marked? (lambda (G30c6@m*) (memq 'top G30c6@m*))) (set! G2d41@gen-lexical (lambda (G30c8@sym) (if (symbol? G30c8@sym) (gensym G30c8@sym) (if (G2d8d@stx? G30c8@sym) (G2d41@gen-lexical (G2dc7@id->sym G30c8@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G30c8@sym))))) (set! G2d43@gen-global (lambda (G30ca@x) (G2d41@gen-lexical G30ca@x))) (set! G2d45@gen-label (lambda (G30cc@_) (gensym))) (set! G2d47@gen-top-level-label (lambda (G30ce@id G30cf@rib) ((lambda (G30d3@find) (begin (set! G30d3@find (lambda (G30de@sym G30df@mark* G30e0@sym* G30e1@mark** G30e2@label*) (if (pair? G30e0@sym*) (begin '#f (if (if (eq? G30de@sym (car G30e0@sym*)) (begin '#f (G2dc9@same-marks? G30df@mark* (car G30e1@mark**))) '#f) (car G30e2@label*) (G30d3@find G30de@sym G30df@mark* (cdr G30e0@sym*) (cdr G30e1@mark**) (cdr G30e2@label*)))) '#f))) ((lambda (G30d4@sym G30d5@mark*) ((lambda (G30d8@sym*) ((lambda (G30da@t) (if G30da@t ((lambda (G30dc@label) (if (G2bf5@G2a8b@imported-label->binding G30dc@label) (gensym) G30dc@label)) G30da@t) (gensym))) (if (memq G30d4@sym (G2d5c@rib-sym* G30cf@rib)) (begin '#f (G30d3@find G30d4@sym G30d5@mark* G30d8@sym* (G2d5e@rib-mark** G30cf@rib) (G2d60@rib-label* G30cf@rib))) '#f))) (G2d5c@rib-sym* G30cf@rib))) (G2dc7@id->sym G30ce@id) (G2d93@stx-mark* G30ce@id)))) '#f))) (set! G2d49@gen-define-label+loc (lambda (G30e8@id G30e9@rib) ((lambda (G30ec@t) (if G30ec@t ((lambda (G30ee@env) ((lambda (G30f0@label G30f1@locs) (values G30f0@label ((lambda (G30f4@t) (if G30f4@t (cdr G30f4@t) ((lambda (G30f6@loc) (begin (G3077@set-interaction-env-locs! G30ee@env (cons (cons G30f0@label G30f6@loc) G30f1@locs)) G30f6@loc)) (G2d41@gen-lexical G30e8@id)))) (assq G30f0@label G30f1@locs)))) (G2d47@gen-top-level-label G30e8@id G30e9@rib) (G3071@interaction-env-locs G30ee@env))) G30ec@t) (values (gensym) (G2d41@gen-lexical G30e8@id)))) (G30bd@top-level-context)))) (set! G2d4b@gen-define-label (lambda (G30f8@id G30f9@rib) (if (G30bd@top-level-context) (G2d47@gen-top-level-label G30f8@id G30f9@rib) (gensym)))) (set! G2d51@G2d4c (make-record-type-descriptor 'rib '#f 'G2d4f '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2d53@G2d4e '#f) (set! G2d55@G2d4d (make-record-constructor-descriptor G2d51@G2d4c '#f G2d53@G2d4e)) (set! G2d58@rib? (record-predicate G2d51@G2d4c)) (set! G2d5a@make-rib (record-constructor G2d55@G2d4d)) (set! G2d5c@rib-sym* (record-accessor G2d51@G2d4c '0)) (set! G2d5e@rib-mark** (record-accessor G2d51@G2d4c '1)) (set! G2d60@rib-label* (record-accessor G2d51@G2d4c '2)) (set! G2d62@rib-sealed/freq (record-accessor G2d51@G2d4c '3)) (set! G2d64@rib-cache (record-accessor G2d51@G2d4c '4)) (set! G2d66@set-rib-sym*! (record-mutator G2d51@G2d4c '0)) (set! G2d68@set-rib-mark**! (record-mutator G2d51@G2d4c '1)) (set! G2d6a@set-rib-label*! (record-mutator G2d51@G2d4c '2)) (set! G2d6c@set-rib-sealed/freq! (record-mutator G2d51@G2d4c '3)) (set! G2d6e@set-rib-cache! (record-mutator G2d51@G2d4c '4)) (set! G2d70@make-empty-rib (lambda () (G2d5a@make-rib '() '() '() '#f '#f))) (set! G2d72@make-cache-rib (lambda () (G2d5a@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d74@find-label (lambda (G30fc@rib G30fd@sym G30fe@mark*) ((lambda (G3102@ht) (if G3102@ht (begin '#f ((lambda (G3104@cv) ((lambda (G3106@t) (if G3106@t (cdr G3106@t) '#f)) (if G3104@cv (begin '#f (assp (lambda (G3108@m) (G2dc9@same-marks? G30fe@mark* G3108@m)) G3104@cv)) '#f))) (hashtable-ref G3102@ht G30fd@sym '#f))) '#f)) (G2d64@rib-cache G30fc@rib)))) (set! G2d76@extend-rib! (lambda (G310a@rib G310b@id G310c@label) ((lambda (G3111@find) (begin (set! G3111@find (lambda (G3122@sym G3123@mark* G3124@sym* G3125@mark** G3126@label*) (if (pair? G3124@sym*) (begin '#f (if (if (eq? G3122@sym (car G3124@sym*)) (begin '#f (G2dc9@same-marks? G3123@mark* (car G3125@mark**))) '#f) G3126@label* (G3111@find G3122@sym G3123@mark* (cdr G3124@sym*) (cdr G3125@mark**) (cdr G3126@label*)))) '#f))) (begin (if (G2d62@rib-sealed/freq G310a@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G310a@rib) (void)) ((lambda (G3112@sym G3113@mark*) ((lambda (G3116@sym*) ((lambda (G3118@t) (if G3118@t ((lambda (G311a@p) (if (not (eq? G310c@label G311a@p)) (G30af@syntax-violation '#f '"multiple definitions of identifier" G310b@id) (void))) G3118@t) ((lambda (G311c@t) (if G311c@t ((lambda (G311e@p) (if (not (eq? G310c@label (car G311e@p))) (if (G30bd@top-level-context) (set-car! G311e@p G310c@label) (G30af@syntax-violation '#f '"multiple definitions of identifier" G310b@id)) (void))) G311c@t) (begin (if (G2d64@rib-cache G310a@rib) (hashtable-update! (G2d64@rib-cache G310a@rib) G3112@sym (lambda (G3120@e) (cons (cons G3113@mark* G310c@label) G3120@e)) '()) (void)) (G2d66@set-rib-sym*! G310a@rib (cons G3112@sym G3116@sym*)) (G2d68@set-rib-mark**! G310a@rib (cons G3113@mark* (G2d5e@rib-mark** G310a@rib))) (G2d6a@set-rib-label*! G310a@rib (cons G310c@label (G2d60@rib-label* G310a@rib)))))) (if (memq G3112@sym (G2d5c@rib-sym* G310a@rib)) (begin '#f (G3111@find G3112@sym G3113@mark* G3116@sym* (G2d5e@rib-mark** G310a@rib) (G2d60@rib-label* G310a@rib))) '#f)))) (G2d74@find-label G310a@rib G3112@sym G3113@mark*))) (G2d5c@rib-sym* G310a@rib))) (G2dc7@id->sym G310b@id) (G2d93@stx-mark* G310b@id))))) '#f))) (set! G2d78@extend-rib/nc! (lambda (G312c@rib G312d@id G312e@label) ((lambda (G3132@sym G3133@mark*) ((lambda (G3136@sym*) (begin (if (G2d64@rib-cache G312c@rib) (hashtable-update! (G2d64@rib-cache G312c@rib) G3132@sym (lambda (G3138@e) (cons (cons G3133@mark* G312e@label) G3138@e)) '()) (void)) (G2d66@set-rib-sym*! G312c@rib (cons G3132@sym G3136@sym*)) (G2d68@set-rib-mark**! G312c@rib (cons G3133@mark* (G2d5e@rib-mark** G312c@rib))) (G2d6a@set-rib-label*! G312c@rib (cons G312e@label (G2d60@rib-label* G312c@rib))))) (G2d5c@rib-sym* G312c@rib))) (G2dc7@id->sym G312d@id) (G2d93@stx-mark* G312d@id)))) (set! G2d7a@make-rib-map (lambda (G313a@sym*) ((lambda (G313c@ht) ((letrec ((G313e@f (lambda (G3140@i G3141@sym*) (if (null? G3141@sym*) G313c@ht (begin (hashtable-update! G313c@ht (car G3141@sym*) (lambda (G3144@x) (cons G3140@i G3144@x)) '()) (G313e@f (+ G3140@i '1) (cdr G3141@sym*))))))) G313e@f) '0 G313a@sym*)) (make-eq-hashtable)))) (set! G2d7c@seal-rib! (lambda (G3146@rib) ((lambda (G3148@sym*) (if (not (null? G3148@sym*)) (begin (G2d66@set-rib-sym*! G3146@rib (list->vector G3148@sym*)) (G2d68@set-rib-mark**! G3146@rib (list->vector (G2d5e@rib-mark** G3146@rib))) (G2d6a@set-rib-label*! G3146@rib (list->vector (G2d60@rib-label* G3146@rib))) (G2d6c@set-rib-sealed/freq! G3146@rib (G2d7a@make-rib-map G3148@sym*))) (void))) (G2d5c@rib-sym* G3146@rib)))) (set! G2d7e@unseal-rib! (lambda (G314a@rib) (if (G2d62@rib-sealed/freq G314a@rib) (begin (G2d6c@set-rib-sealed/freq! G314a@rib '#f) (G2d66@set-rib-sym*! G314a@rib (vector->list (G2d5c@rib-sym* G314a@rib))) (G2d68@set-rib-mark**! G314a@rib (vector->list (G2d5e@rib-mark** G314a@rib))) (G2d6a@set-rib-label*! G314a@rib (vector->list (G2d60@rib-label* G314a@rib)))) (void)))) (set! G2d80@make-full-rib (lambda (G314c@id* G314d@label*) ((lambda (G3150@r) (begin (G2d7c@seal-rib! G3150@r) G3150@r)) (G2d5a@make-rib (map G2dc7@id->sym G314c@id*) (map G2d93@stx-mark* G314c@id*) G314d@label* '#f '#f)))) (set! G2d86@G2d81 (make-record-type-descriptor 'stx '#f 'G2d84 '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d88@G2d83 '#f) (set! G2d8a@G2d82 (make-record-constructor-descriptor G2d86@G2d81 '#f G2d88@G2d83)) (set! G2d8d@stx? (record-predicate G2d86@G2d81)) (set! G2d8f@make-stx (record-constructor G2d8a@G2d82)) (set! G2d91@stx-expr (record-accessor G2d86@G2d81 '0)) (set! G2d93@stx-mark* (record-accessor G2d86@G2d81 '1)) (set! G2d95@stx-subst* (record-accessor G2d86@G2d81 '2)) (set! G2d97@stx-ae* (record-accessor G2d86@G2d81 '3)) (set! G2d99@set-stx-expr! (record-mutator G2d86@G2d81 '0)) (set! G2d9b@set-stx-mark*! (record-mutator G2d86@G2d81 '1)) (set! G2d9d@set-stx-subst*! (record-mutator G2d86@G2d81 '2)) (set! G2d9f@set-stx-ae*! (record-mutator G2d86@G2d81 '3)) (set! G2da1@rp (G2964@G289a@make-record-printer 'stx (lambda (G3152@x G3153@p G3154@wr) (begin (display '"#<syntax " G3153@p) (write (G2ddb@stx->datum G3152@x) G3153@p) ((lambda (G3158@expr) (if (G295c@G288a@annotation? G3158@expr) ((lambda (G315a@src) (if (pair? G315a@src) (begin (display '" [" G3153@p) (display (cdr G315a@src) G3153@p) (display '" of " G3153@p) (display (car G315a@src) G3153@p) (display '"]" G3153@p)) (void))) (G295d@G288c@annotation-source G3158@expr)) (void))) (G2d91@stx-expr G3152@x)) (display '">" G3153@p))))) (set! G2da3@datum->stx (lambda (G315c@id G315d@datum) (G2d8f@make-stx G315d@datum (G2d93@stx-mark* G315c@id) (G2d95@stx-subst* G315c@id) (G2d97@stx-ae* G315c@id)))) (set! G2da5@gen-mark (lambda () (string '#\m))) (set! G2da7@anti-mark '#f) (set! G2da9@anti-mark? not) (set! G2dab@join-wraps (lambda (G3160@m1* G3161@s1* G3162@ae1* G3163@e) ((lambda (G3169@cancel) (begin (set! G3169@cancel (lambda (G3170@ls1 G3171@ls2) ((letrec ((G3174@f (lambda (G3176@x G3177@ls1) (if (null? G3177@ls1) (cdr G3171@ls2) (cons G3176@x (G3174@f (car G3177@ls1) (cdr G3177@ls1))))))) G3174@f) (car G3170@ls1) (cdr G3170@ls1)))) ((lambda (G316a@m2* G316b@s2* G316c@ae2*) (if (if (not (null? G3160@m1*)) (if (not (null? G316a@m2*)) (begin '#f (G2da9@anti-mark? (car G316a@m2*))) '#f) '#f) (values (G3169@cancel G3160@m1* G316a@m2*) (G3169@cancel G3161@s1* G316b@s2*) (G3169@cancel G3162@ae1* G316c@ae2*)) (values (append G3160@m1* G316a@m2*) (append G3161@s1* G316b@s2*) (append G3162@ae1* G316c@ae2*)))) (G2d93@stx-mark* G3163@e) (G2d95@stx-subst* G3163@e) (G2d97@stx-ae* G3163@e)))) '#f))) (set! G2dad@mkstx (lambda (G317a@e G317b@m* G317c@s* G317d@ae*) (if (if (G2d8d@stx? G317a@e) (begin '#f (not (G2d3f@top-marked? G317b@m*))) '#f) (call-with-values (lambda () (G2dab@join-wraps G317b@m* G317c@s* G317d@ae* G317a@e)) (lambda (G3185@G3182 G3186@G3183 G3187@G3184) ((lambda (G318b@ae* G318c@s* G318d@m*) (G2d8f@make-stx (G2d91@stx-expr G317a@e) G318d@m* G318c@s* G318b@ae*)) G3187@G3184 G3186@G3183 G3185@G3182))) (G2d8f@make-stx G317a@e G317b@m* G317c@s* G317d@ae*)))) (set! G2daf@add-mark (lambda (G3191@m G3192@e G3193@ae) (G2dad@mkstx G3192@e (list G3191@m) '(shift) (list G3193@ae)))) (set! G2db1@add-subst (lambda (G3197@subst G3198@e) (G2dad@mkstx G3198@e '() (list G3197@subst) '()))) (set! G2db3@syntax-kind? (lambda (G319b@x G319c@p?) (if (G2d8d@stx? G319b@x) (G2db3@syntax-kind? (G2d91@stx-expr G319b@x) G319c@p?) (if (G295c@G288a@annotation? G319b@x) (G2db3@syntax-kind? (G295e@G288e@annotation-expression G319b@x) G319c@p?) (G319c@p? G319b@x))))) (set! G2db5@syntax-vector->list (lambda (G319f@x) (if (G2d8d@stx? G319f@x) ((lambda (G31a1@ls G31a2@m* G31a3@s* G31a4@ae*) (map (lambda (G31a9@x) (G2dad@mkstx G31a9@x G31a2@m* G31a3@s* G31a4@ae*)) G31a1@ls)) (G2db5@syntax-vector->list (G2d91@stx-expr G319f@x)) (G2d93@stx-mark* G319f@x) (G2d95@stx-subst* G319f@x) (G2d97@stx-ae* G319f@x)) (if (G295c@G288a@annotation? G319f@x) (G2db5@syntax-vector->list (G295e@G288e@annotation-expression G319f@x)) (if (vector? G319f@x) (vector->list G319f@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G319f@x)))))) (set! G2db7@syntax-pair? (lambda (G31ab@x) (G2db3@syntax-kind? G31ab@x pair?))) (set! G2db9@syntax-vector? (lambda (G31ad@x) (G2db3@syntax-kind? G31ad@x vector?))) (set! G2dbb@syntax-null? (lambda (G31af@x) (G2db3@syntax-kind? G31af@x null?))) (set! G2dbd@syntax-list? (lambda (G31b1@x) ((lambda (G31b3@t) (if G31b3@t G31b3@t (begin '#f (if (G2db7@syntax-pair? G31b1@x) (begin '#f (G2dbd@syntax-list? (G2dc1@syntax-cdr G31b1@x))) '#f)))) (G2dbb@syntax-null? G31b1@x)))) (set! G2dbf@syntax-car (lambda (G31b5@x) (if (G2d8d@stx? G31b5@x) (G2dad@mkstx (G2dbf@syntax-car (G2d91@stx-expr G31b5@x)) (G2d93@stx-mark* G31b5@x) (G2d95@stx-subst* G31b5@x) (G2d97@stx-ae* G31b5@x)) (if (G295c@G288a@annotation? G31b5@x) (G2dbf@syntax-car (G295e@G288e@annotation-expression G31b5@x)) (if (pair? G31b5@x) (car G31b5@x) (assertion-violation 'syntax-car '"BUG: not a pair" G31b5@x)))))) (set! G2dc1@syntax-cdr (lambda (G31b7@x) (if (G2d8d@stx? G31b7@x) (G2dad@mkstx (G2dc1@syntax-cdr (G2d91@stx-expr G31b7@x)) (G2d93@stx-mark* G31b7@x) (G2d95@stx-subst* G31b7@x) (G2d97@stx-ae* G31b7@x)) (if (G295c@G288a@annotation? G31b7@x) (G2dc1@syntax-cdr (G295e@G288e@annotation-expression G31b7@x)) (if (pair? G31b7@x) (cdr G31b7@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G31b7@x)))))) (set! G2dc3@syntax->list (lambda (G31b9@x) (if (G2db7@syntax-pair? G31b9@x) (cons (G2dbf@syntax-car G31b9@x) (G2dc3@syntax->list (G2dc1@syntax-cdr G31b9@x))) (if (G2dbb@syntax-null? G31b9@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G31b9@x))))) (set! G2dc5@id? (lambda (G31bb@x) (if (G2d8d@stx? G31bb@x) (begin '#f ((lambda (G31bd@expr) (symbol? (if (G295c@G288a@annotation? G31bd@expr) (G295b@G2888@annotation-stripped G31bd@expr) G31bd@expr))) (G2d91@stx-expr G31bb@x))) '#f))) (set! G2dc7@id->sym (lambda (G31bf@x) (begin (if (not (G2d8d@stx? G31bf@x)) (error 'id->sym '"BUG in ikarus: not an id" G31bf@x) (void)) ((lambda (G31c1@expr) ((lambda (G31c3@sym) (if (symbol? G31c3@sym) G31c3@sym (error 'id->sym '"BUG in ikarus: not an id" G31bf@x))) (if (G295c@G288a@annotation? G31c1@expr) (G295b@G2888@annotation-stripped G31c1@expr) G31c1@expr))) (G2d91@stx-expr G31bf@x))))) (set! G2dc9@same-marks? (lambda (G31c5@x G31c6@y) ((lambda (G31c9@t) (if G31c9@t G31c9@t (begin '#f (if (pair? G31c5@x) (if (pair? G31c6@y) (if (eq? (car G31c5@x) (car G31c6@y)) (begin '#f (G2dc9@same-marks? (cdr G31c5@x) (cdr G31c6@y))) '#f) '#f) '#f)))) (if (null? G31c5@x) (begin '#f (null? G31c6@y)) '#f)))) (set! G2dcb@bound-id=? (lambda (G31cb@x G31cc@y) (if (eq? (G2dc7@id->sym G31cb@x) (G2dc7@id->sym G31cc@y)) (begin '#f (G2dc9@same-marks? (G2d93@stx-mark* G31cb@x) (G2d93@stx-mark* G31cc@y))) '#f))) (set! G2dcd@free-id=? (lambda (G31cf@i G31d0@j) ((lambda (G31d3@t0 G31d4@t1) (if ((lambda (G31d7@t) (if G31d7@t G31d7@t (begin '#f G31d4@t1))) G31d3@t0) (eq? G31d3@t0 G31d4@t1) (eq? (G2dc7@id->sym G31cf@i) (G2dc7@id->sym G31d0@j)))) (G2de1@id->real-label G31cf@i) (G2de1@id->real-label G31d0@j)))) (set! G2dcf@valid-bound-ids? (lambda (G31d9@id*) (if (for-all G2dc5@id? G31d9@id*) (begin '#f (G2dd1@distinct-bound-ids? G31d9@id*)) '#f))) (set! G2dd1@distinct-bound-ids? (lambda (G31db@id*) ((lambda (G31dd@t) (if G31dd@t G31dd@t (begin '#f (if (not (G2dd3@bound-id-member? (car G31db@id*) (cdr G31db@id*))) (begin '#f (G2dd1@distinct-bound-ids? (cdr G31db@id*))) '#f)))) (null? G31db@id*)))) (set! G2dd3@bound-id-member? (lambda (G31df@id G31e0@id*) (if (pair? G31e0@id*) (begin '#f ((lambda (G31e3@t) (if G31e3@t G31e3@t (begin '#f (G2dd3@bound-id-member? G31df@id (cdr G31e0@id*))))) (G2dcb@bound-id=? G31df@id (car G31e0@id*)))) '#f))) (set! G2dd5@self-evaluating? (lambda (G31e5@x) ((lambda (G31e7@t) (if G31e7@t G31e7@t ((lambda (G31e9@t) (if G31e9@t G31e9@t ((lambda (G31eb@t) (if G31eb@t G31eb@t ((lambda (G31ed@t) (if G31ed@t G31ed@t ((lambda (G31ef@t) (if G31ef@t G31ef@t (begin '#f (bytevector? G31e5@x)))) (regexp? G31e5@x)))) (boolean? G31e5@x)))) (char? G31e5@x)))) (string? G31e5@x)))) (number? G31e5@x)))) (set! G2dd7@strip-annotations (lambda (G31f1@x) (if (pair? G31f1@x) (cons (G2dd7@strip-annotations (car G31f1@x)) (G2dd7@strip-annotations (cdr G31f1@x))) (if (vector? G31f1@x) (vector-map G2dd7@strip-annotations G31f1@x) (if (G295c@G288a@annotation? G31f1@x) (G295b@G2888@annotation-stripped G31f1@x) G31f1@x))))) (set! G2dd9@strip (lambda (G31f3@x G31f4@m*) (if (G2d3f@top-marked? G31f4@m*) (if ((lambda (G31f7@t) (if G31f7@t G31f7@t ((lambda (G31f9@t) (if G31f9@t G31f9@t (begin '#f (if (vector? G31f3@x) (if (> (vector-length G31f3@x) '0) (begin '#f (G295c@G288a@annotation? (vector-ref G31f3@x '0))) '#f) '#f)))) (if (pair? G31f3@x) (begin '#f (G295c@G288a@annotation? (car G31f3@x))) '#f)))) (G295c@G288a@annotation? G31f3@x)) (G2dd7@strip-annotations G31f3@x) G31f3@x) ((letrec ((G31fb@f (lambda (G31fd@x) (if (G2d8d@stx? G31fd@x) (G2dd9@strip (G2d91@stx-expr G31fd@x) (G2d93@stx-mark* G31fd@x)) (if (G295c@G288a@annotation? G31fd@x) (G295b@G2888@annotation-stripped G31fd@x) (if (pair? G31fd@x) ((lambda (G31ff@a G3200@d) (if (if (eq? G31ff@a (car G31fd@x)) (begin '#f (eq? G3200@d (cdr G31fd@x))) '#f) G31fd@x (cons G31ff@a G3200@d))) (G31fb@f (car G31fd@x)) (G31fb@f (cdr G31fd@x))) (if (vector? G31fd@x) ((lambda (G3203@old) ((lambda (G3205@new) (if (for-all eq? G3203@old G3205@new) G31fd@x (list->vector G3205@new))) (map G31fb@f G3203@old))) (vector->list G31fd@x)) G31fd@x))))))) G31fb@f) G31f3@x)))) (set! G2ddb@stx->datum (lambda (G3207@x) (G2dd9@strip G3207@x '()))) (set! G2ddd@same-marks*? (lambda (G3209@mark* G320a@mark** G320b@si) (if (null? G320b@si) '#f (if (G2dc9@same-marks? G3209@mark* (vector-ref G320a@mark** (car G320b@si))) (car G320b@si) (G2ddd@same-marks*? G3209@mark* G320a@mark** (cdr G320b@si)))))) (set! G2ddf@id->label (lambda (G320f@id) ((lambda (G3211@t) (if G3211@t G3211@t (begin '#f ((lambda (G3213@t) (if G3213@t ((lambda (G3215@env) ((lambda (G3217@rib) (call-with-values (lambda () (G2d49@gen-define-label+loc G320f@id G3217@rib)) (lambda (G321b@G3219 G321c@G321a) ((lambda (G321f@loc_ G3220@lab) (begin (G2d76@extend-rib! G3217@rib G320f@id G3220@lab) G3220@lab)) G321c@G321a G321b@G3219)))) (G306d@interaction-env-rib G3215@env))) G3213@t) '#f)) (G30bd@top-level-context))))) (G2de1@id->real-label G320f@id)))) (set! G2de1@id->real-label (lambda (G3223@id) ((lambda (G3225@sym) ((letrec ((G3227@search (lambda (G3229@subst* G322a@mark*) (if (null? G3229@subst*) '#f (if (eq? (car G3229@subst*) 'shift) (G3227@search (cdr G3229@subst*) (cdr G322a@mark*)) ((lambda (G322d@rib) ((lambda (G322f@t) (if G322f@t ((lambda (G3231@ht) ((lambda (G3233@si) ((lambda (G3235@i) (if G3235@i (vector-ref (G2d60@rib-label* G322d@rib) G3235@i) (G3227@search (cdr G3229@subst*) G322a@mark*))) (if G3233@si (begin '#f (G2ddd@same-marks*? G322a@mark* (G2d5e@rib-mark** G322d@rib) (reverse G3233@si))) '#f))) (hashtable-ref G3231@ht G3225@sym '#f))) G322f@t) ((lambda (G3237@t) (if G3237@t G3237@t (begin '#f ((letrec ((G3239@f (lambda (G323b@sym* G323c@mark** G323d@label*) (if (null? G323b@sym*) (G3227@search (cdr G3229@subst*) G322a@mark*) (if (if (eq? (car G323b@sym*) G3225@sym) (begin '#f (G2dc9@same-marks? (car G323c@mark**) G322a@mark*)) '#f) (car G323d@label*) (G3239@f (cdr G323b@sym*) (cdr G323c@mark**) (cdr G323d@label*))))))) G3239@f) (G2d5c@rib-sym* G322d@rib) (G2d5e@rib-mark** G322d@rib) (G2d60@rib-label* G322d@rib))))) (G2d74@find-label G322d@rib G3225@sym G322a@mark*)))) (G2d62@rib-sealed/freq G322d@rib))) (car G3229@subst*))))))) G3227@search) (G2d95@stx-subst* G3223@id) (G2d93@stx-mark* G3223@id))) (G2dc7@id->sym G3223@id)))) (set! G2de3@label->binding (lambda (G3241@x G3242@r) ((lambda (G3245@t) (if G3245@t ((lambda (G3247@b) (if (if (pair? G3247@b) (begin '#f (eq? (car G3247@b) '$core-rtd)) '#f) (cons '$rtd (map G2f78@bless (cdr G3247@b))) (if (if (pair? G3247@b) (begin '#f (eq? (car G3247@b) 'global-rtd)) '#f) ((lambda (G3249@lib G324a@loc) (cons '$rtd (symbol-value G324a@loc))) (cadr G3247@b) (cddr G3247@b)) G3247@b))) G3245@t) ((lambda (G324d@t) (if G324d@t (cdr G324d@t) ((lambda (G324f@t) (if G324f@t ((lambda (G3251@env) ((lambda (G3253@t) (if G3253@t ((lambda (G3255@p) (cons* 'lexical (cdr G3255@p) '#f)) G3253@t) '(displaced-lexical . #f))) (assq G3241@x (G3071@interaction-env-locs G3251@env)))) G324f@t) '(displaced-lexical . #f))) (G30bd@top-level-context)))) (assq G3241@x G3242@r)))) (G2bf5@G2a8b@imported-label->binding G3241@x)))) (set! G2de5@make-binding cons) (set! G2de7@binding-type car) (set! G2de9@binding-value cdr) (set! G2deb@raise-unbound-error (lambda (G3257@id) (G30ad@syntax-violation* '#f '"unbound identifier" G3257@id (G4b87@G4b03@make-undefined-violation)))) (set! G2ded@syntax-type (lambda (G3259@e G325a@r) (if (G2dc5@id? G3259@e) ((lambda (G325d@id) ((lambda (G325f@label) ((lambda (G3261@b) ((lambda (G3263@type) ((lambda () (begin (if (not G325f@label) (G2deb@raise-unbound-error G325d@id) (void)) ((lambda (G3265@t) (if (memv G3265@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3263@type (G2de9@binding-value G3261@b) G325d@id) (values 'other '#f '#f))) G3263@type))))) (G2de7@binding-type G3261@b))) (G2de3@label->binding G325f@label G325a@r))) (G2ddf@id->label G325d@id))) G3259@e) (if (G2db7@syntax-pair? G3259@e) ((lambda (G3267@id) (if (G2dc5@id? G3267@id) ((lambda (G3269@label) ((lambda (G326b@b) ((lambda (G326d@type) ((lambda () (begin (if (not G3269@label) (G2deb@raise-unbound-error G3267@id) (void)) ((lambda (G326f@t) (if (memv G326f@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G326d@type (G2de9@binding-value G326b@b) G3267@id) (values 'call '#f '#f))) G326d@type))))) (G2de7@binding-type G326b@b))) (G2de3@label->binding G3269@label G325a@r))) (G2ddf@id->label G3267@id)) (values 'call '#f '#f))) (G2dbf@syntax-car G3259@e)) ((lambda (G3271@d) (if (G2dd5@self-evaluating? G3271@d) (values 'constant G3271@d '#f) (values 'other '#f '#f))) (G2ddb@stx->datum G3259@e)))))) (set! G2dfd@sanitize-binding (lambda (G3273@x G3274@src) (if (procedure? G3273@x) (cons* 'local-macro G3273@x G3274@src) (if (if (pair? G3273@x) (if (eq? (car G3273@x) 'macro!) (begin '#f (procedure? (cdr G3273@x))) '#f) '#f) (cons* 'local-macro! (cdr G3273@x) G3274@src) (if (if (pair? G3273@x) (begin '#f (eq? (car G3273@x) '$rtd)) '#f) G3273@x (assertion-violation 'expand '"invalid transformer" G3273@x)))))) (set! G2dff@make-variable-transformer (lambda (G3277@x) (if (procedure? G3277@x) (cons 'macro! G3277@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3277@x)))) (set! G2e01@variable-transformer? (lambda (G3279@x) (if (pair? G3279@x) (if (eq? (car G3279@x) 'macro!) (begin '#f (procedure? (cdr G3279@x))) '#f) '#f))) (set! G2e03@variable-transformer-procedure (lambda (G327b@x) (if (G2e01@variable-transformer? G327b@x) (cdr G327b@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G327b@x)))) (set! G2e05@make-eval-transformer (lambda (G327d@x) (G2dfd@sanitize-binding (eval-core (G29bf@G2973@expanded->core G327d@x)) G327d@x))) (set! G2f4a@parse-define (lambda (G327f@x) ((lambda (G3281@t) ((lambda (G3283@ls/false) (if (if G3283@ls/false (begin '#f (apply (lambda (G3285@id G3286@fmls G3287@b G3288@b*) (G2dc5@id? G3285@id)) G3283@ls/false)) '#f) (apply (lambda (G328d@id G328e@fmls G328f@b G3290@b*) (begin (G2fea@verify-formals G328e@fmls G327f@x) (values G328d@id (cons 'defun (cons G328e@fmls (cons G328f@b G3290@b*)))))) G3283@ls/false) ((lambda (G3295@t) ((lambda (G3297@ls/false) (if (if G3297@ls/false (begin '#f (apply (lambda (G3299@id G329a@val) (G2dc5@id? G3299@id)) G3297@ls/false)) '#f) (apply (lambda (G329d@id G329e@val) (values G329d@id (cons 'expr G329e@val))) G3297@ls/false) ((lambda (G32a1@t) ((lambda (G32a3@ls/false) (if (if G32a3@ls/false (begin '#f (apply (lambda (G32a5@id) (G2dc5@id? G32a5@id)) G32a3@ls/false)) '#f) (apply (lambda (G32a7@id) (values G32a7@id (cons 'expr (G2f78@bless '(void))))) G32a3@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G32a1@t))) (G2fc2@syntax-dispatch G32a1@t '(_ any)))) G3295@t))) (G2fc2@syntax-dispatch G3295@t '(_ any any)))) G3281@t))) (G2fc2@syntax-dispatch G3281@t '(_ (any . any) any . each-any)))) G327f@x))) (set! G2f4c@parse-define-syntax (lambda (G32a9@x) ((lambda (G32ab@t) ((lambda (G32ad@ls/false) (if (if G32ad@ls/false (begin '#f (apply (lambda (G32af@id G32b0@val) (G2dc5@id? G32af@id)) G32ad@ls/false)) '#f) (apply (lambda (G32b3@id G32b4@val) (values G32b3@id G32b4@val)) G32ad@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G32ab@t))) (G2fc2@syntax-dispatch G32ab@t '(_ any any)))) G32a9@x))) (set! G2f4e@scheme-stx-hashtable (make-eq-hashtable)) (set! G2f50@scheme-stx (lambda (G32b7@sym) ((lambda (G32b9@t) (if G32b9@t G32b9@t (begin '#f ((lambda (G32bb@subst) ((lambda (G32bd@stx) ((lambda (G32bf@stx) ((lambda () (begin (hashtable-set! G2f4e@scheme-stx-hashtable G32b7@sym G32bf@stx) G32bf@stx)))) ((lambda (G32c1@t) (if G32c1@t ((lambda (G32c3@x) ((lambda (G32c5@name G32c6@label) (G2db1@add-subst (G2d5a@make-rib (list G32c5@name) (list G2d3d@top-mark*) (list G32c6@label) '#f '#f) G32bd@stx)) (car G32c3@x) (cdr G32c3@x))) G32c1@t) G32bd@stx)) (assq G32b7@sym G32bb@subst)))) (G2d8f@make-stx G32b7@sym G2d3d@top-mark* '() '()))) (G2bcb@G2a37@library-subst (G2bef@G2a7f@find-library-by-name '(psyntax system $all))))))) (hashtable-ref G2f4e@scheme-stx-hashtable G32b7@sym '#f)))) (set! G2f52@lexical-var car) (set! G2f54@lexical-mutable? cdr) (set! G2f56@set-lexical-mutable! set-cdr!) (set! G2f58@add-lexical (lambda (G32c9@lab G32ca@lex G32cb@r) (cons (cons* G32c9@lab 'lexical G32ca@lex '#f) G32cb@r))) (set! G2f5a@add-lexicals (lambda (G32cf@lab* G32d0@lex* G32d1@r) (if (null? G32cf@lab*) G32d1@r (G2f5a@add-lexicals (cdr G32cf@lab*) (cdr G32d0@lex*) (G2f58@add-lexical (car G32cf@lab*) (car G32d0@lex*) G32d1@r))))) (set! G2f5c@letrec-helper (lambda (G32d5@e G32d6@r G32d7@mr G32d8@build) ((lambda (G32dd@t) ((lambda (G32df@ls/false) (if G32df@ls/false (apply (lambda (G32e1@lhs* G32e2@rhs* G32e3@b G32e4@b*) (if (not (G2dcf@valid-bound-ids? G32e1@lhs*)) (G2f7c@invalid-fmls-error G32d5@e G32e1@lhs*) ((lambda (G32e9@lex* G32ea@lab*) ((lambda (G32ed@rib G32ee@r) ((lambda (G32f1@body G32f2@rhs*) (G32d8@build '#f G32e9@lex* G32f2@rhs* G32f1@body)) (G2ffc@chi-internal (G2db1@add-subst G32ed@rib (cons G32e3@b G32e4@b*)) G32ee@r G32d7@mr) (G2fe2@chi-expr* (map (lambda (G32f5@x) (G2db1@add-subst G32ed@rib G32f5@x)) G32e2@rhs*) G32ee@r G32d7@mr))) (G2d80@make-full-rib G32e1@lhs* G32ea@lab*) (G2f5a@add-lexicals G32ea@lab* G32e9@lex* G32d6@r))) (map G2d41@gen-lexical G32e1@lhs*) (map G2d45@gen-label G32e1@lhs*)))) G32df@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G32dd@t))) (G2fc2@syntax-dispatch G32dd@t '(_ #(each (any any)) any . each-any)))) G32d5@e))) (set! G2f5e@letrec-transformer (lambda (G32f7@e G32f8@r G32f9@mr) (G2f5c@letrec-helper G32f7@e G32f8@r G32f9@mr G2d26@G2c99@build-letrec))) (set! G2f60@letrec*-transformer (lambda (G32fd@e G32fe@r G32ff@mr) (G2f5c@letrec-helper G32fd@e G32fe@r G32ff@mr G2d27@G2c9b@build-letrec*))) (set! G2f62@fluid-let-syntax-transformer (lambda (G3303@e G3304@r G3305@mr) ((lambda (G330a@lookup) (begin (set! G330a@lookup (lambda (G331d@x) ((lambda (G331f@t) (if G331f@t G331f@t (begin '#f (G30af@syntax-violation '#f '"unbound identifier" G3303@e G331d@x)))) (G2ddf@id->label G331d@x)))) ((lambda (G330b@t) ((lambda (G330d@ls/false) (if G330d@ls/false (apply (lambda (G330f@lhs* G3310@rhs* G3311@b G3312@b*) (if (not (G2dcf@valid-bound-ids? G330f@lhs*)) (G2f7c@invalid-fmls-error G3303@e G330f@lhs*) ((lambda (G3317@lab* G3318@rhs*) (G2ffc@chi-internal (cons G3311@b G3312@b*) (append (map cons G3317@lab* G3318@rhs*) G3304@r) (append (map cons G3317@lab* G3318@rhs*) G3305@mr))) (map G330a@lookup G330f@lhs*) (map (lambda (G331b@x) (G2e05@make-eval-transformer (G3021@expand-transformer G331b@x G3305@mr))) G3310@rhs*)))) G330d@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G330b@t))) (G2fc2@syntax-dispatch G330b@t '(_ #(each (any any)) any . each-any)))) G3303@e))) '#f))) (set! G2f64@type-descriptor-transformer (lambda (G3321@e G3322@r G3323@mr) ((lambda (G3327@t) ((lambda (G3329@ls/false) (if (if G3329@ls/false (begin '#f (apply (lambda (G332b@id) (G2dc5@id? G332b@id)) G3329@ls/false)) '#f) (apply (lambda (G332d@id) ((lambda (G332f@lab) ((lambda (G3331@b) ((lambda (G3333@type) ((lambda () (begin (if (not G332f@lab) (G2deb@raise-unbound-error G332d@id) (void)) (if (not (if (eq? G3333@type '$rtd) (begin '#f (not (list? (G2de9@binding-value G3331@b)))) '#f)) (G30af@syntax-violation '#f '"not a record type" G3321@e) (void)) (list 'quote (G2de9@binding-value G3331@b)))))) (G2de7@binding-type G3331@b))) (G2de3@label->binding G332f@lab G3322@r))) (G2ddf@id->label G332d@id))) G3329@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3327@t))) (G2fc2@syntax-dispatch G3327@t '(_ any)))) G3321@e))) (set! G2f66@record-type-descriptor-transformer (lambda (G3335@e G3336@r G3337@mr) ((lambda (G333b@t) ((lambda (G333d@ls/false) (if (if G333d@ls/false (begin '#f (apply (lambda (G333f@id) (G2dc5@id? G333f@id)) G333d@ls/false)) '#f) (apply (lambda (G3341@id) ((lambda (G3343@lab) ((lambda (G3345@b) ((lambda (G3347@type) ((lambda () (begin (if (not G3343@lab) (G2deb@raise-unbound-error G3341@id) (void)) (if (not (if (eq? G3347@type '$rtd) (begin '#f (list? (G2de9@binding-value G3345@b))) '#f)) (G30af@syntax-violation '#f '"not a record type" G3335@e) (void)) (G2fe6@chi-expr (car (G2de9@binding-value G3345@b)) G3336@r G3337@mr))))) (G2de7@binding-type G3345@b))) (G2de3@label->binding G3343@lab G3336@r))) (G2ddf@id->label G3341@id))) G333d@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G333b@t))) (G2fc2@syntax-dispatch G333b@t '(_ any)))) G3335@e))) (set! G2f68@record-constructor-descriptor-transformer (lambda (G3349@e G334a@r G334b@mr) ((lambda (G334f@t) ((lambda (G3351@ls/false) (if (if G3351@ls/false (begin '#f (apply (lambda (G3353@id) (G2dc5@id? G3353@id)) G3351@ls/false)) '#f) (apply (lambda (G3355@id) ((lambda (G3357@lab) ((lambda (G3359@b) ((lambda (G335b@type) ((lambda () (begin (if (not G3357@lab) (G2deb@raise-unbound-error G3355@id) (void)) (if (not (if (eq? G335b@type '$rtd) (begin '#f (list? (G2de9@binding-value G3359@b))) '#f)) (G30af@syntax-violation '#f '"invalid type" G3349@e) (void)) (G2fe6@chi-expr (cadr (G2de9@binding-value G3359@b)) G334a@r G334b@mr))))) (G2de7@binding-type G3359@b))) (G2de3@label->binding G3357@lab G334a@r))) (G2ddf@id->label G3355@id))) G3351@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G334f@t))) (G2fc2@syntax-dispatch G334f@t '(_ any)))) G3349@e))) (set! G2f6a@when-macro (lambda (G335d@e) ((lambda (G335f@t) ((lambda (G3361@ls/false) (if G3361@ls/false (apply (lambda (G3363@test G3364@e G3365@e*) (G2f78@bless (list 'if G3363@test (cons 'begin (cons G3364@e G3365@e*))))) G3361@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G335f@t))) (G2fc2@syntax-dispatch G335f@t '(_ any any . each-any)))) G335d@e))) (set! G2f6c@unless-macro (lambda (G3369@e) ((lambda (G336b@t) ((lambda (G336d@ls/false) (if G336d@ls/false (apply (lambda (G336f@test G3370@e G3371@e*) (G2f78@bless (list 'if (list 'not G336f@test) (cons 'begin (cons G3370@e G3371@e*))))) G336d@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G336b@t))) (G2fc2@syntax-dispatch G336b@t '(_ any any . each-any)))) G3369@e))) (set! G2f6e@if-transformer (lambda (G3375@e G3376@r G3377@mr) ((lambda (G337b@t) ((lambda (G337d@ls/false) (if G337d@ls/false (apply (lambda (G337f@e0 G3380@e1 G3381@e2) (list 'if (G2fe6@chi-expr G337f@e0 G3376@r G3377@mr) (G2fe6@chi-expr G3380@e1 G3376@r G3377@mr) (G2fe6@chi-expr G3381@e2 G3376@r G3377@mr))) G337d@ls/false) ((lambda (G3385@t) ((lambda (G3387@ls/false) (if G3387@ls/false (apply (lambda (G3389@e0 G338a@e1) (list 'if (G2fe6@chi-expr G3389@e0 G3376@r G3377@mr) (G2fe6@chi-expr G338a@e1 G3376@r G3377@mr) (G2d25@G2c97@build-void))) G3387@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3385@t))) (G2fc2@syntax-dispatch G3385@t '(_ any any)))) G337b@t))) (G2fc2@syntax-dispatch G337b@t '(_ any any any)))) G3375@e))) (set! G2f70@case-macro (lambda (G338d@e) ((lambda (G3390@build-last G3392@build-one) (begin (set! G3390@build-last (lambda (G33b7@cls) ((lambda (G33b9@t) ((lambda (G33bb@ls/false) (if G33bb@ls/false (apply (lambda (G33bd@e G33be@e*) (cons 'begin (cons G33bd@e G33be@e*))) G33bb@ls/false) ((lambda (G33c1@t) ((lambda (G33c3@ls/false) (if G33c3@ls/false (apply (lambda () (G3392@build-one G33b7@cls '(if #f #f))) G33c3@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G33c1@t))) (G2fc2@syntax-dispatch G33c1@t '_))) G33b9@t))) (G2fc2@syntax-dispatch G33b9@t '(#(scheme-id else) any . each-any)))) G33b7@cls))) (set! G3392@build-one (lambda (G33a9@cls G33aa@k) ((lambda (G33ad@t) ((lambda (G33af@ls/false) (if G33af@ls/false (apply (lambda (G33b1@d* G33b2@e G33b3@e*) (list 'if (list 'memv 't (list 'quote G33b1@d*)) (cons 'begin (cons G33b2@e G33b3@e*)) G33aa@k)) G33af@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G33ad@t))) (G2fc2@syntax-dispatch G33ad@t '(each-any any . each-any)))) G33a9@cls))) ((lambda (G3393@t) ((lambda (G3395@ls/false) (if G3395@ls/false (apply (lambda (G3397@expr) (G2f78@bless (cons 'let (cons (list (list 't G3397@expr)) '((if #f #f)))))) G3395@ls/false) ((lambda (G3399@t) ((lambda (G339b@ls/false) (if G339b@ls/false (apply (lambda (G339d@expr G339e@cls G339f@cls*) (G2f78@bless (list 'let (list (list 't G339d@expr)) ((letrec ((G33a3@f (lambda (G33a5@cls G33a6@cls*) (if (null? G33a6@cls*) (G3390@build-last G33a5@cls) (G3392@build-one G33a5@cls (G33a3@f (car G33a6@cls*) (cdr G33a6@cls*))))))) G33a3@f) G339e@cls G339f@cls*)))) G339b@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3399@t))) (G2fc2@syntax-dispatch G3399@t '(_ any any . each-any)))) G3393@t))) (G2fc2@syntax-dispatch G3393@t '(_ any)))) G338d@e))) '#f '#f))) (set! G2f72@quote-transformer (lambda (G33c5@e G33c6@r G33c7@mr) ((lambda (G33cb@t) ((lambda (G33cd@ls/false) (if G33cd@ls/false (apply (lambda (G33cf@datum) (list 'quote (G2ddb@stx->datum G33cf@datum))) G33cd@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G33cb@t))) (G2fc2@syntax-dispatch G33cb@t '(_ any)))) G33c5@e))) (set! G2f74@case-lambda-transformer (lambda (G33d1@e G33d2@r G33d3@mr) ((lambda (G33d7@t) ((lambda (G33d9@ls/false) (if G33d9@ls/false (apply (lambda (G33db@fmls* G33dc@b* G33dd@b**) (call-with-values (lambda () (G2fee@chi-lambda-clause* G33d1@e G33db@fmls* (map cons G33dc@b* G33dd@b**) G33d2@r G33d3@mr)) (lambda (G33e3@G33e1 G33e4@G33e2) ((lambda (G33e7@body* G33e8@fmls*) (G2d22@G2c61@build-case-lambda '#f G33e8@fmls* G33e7@body*)) G33e4@G33e2 G33e3@G33e1)))) G33d9@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G33d7@t))) (G2fc2@syntax-dispatch G33d7@t '(_ . #(each (any any . each-any)))))) G33d1@e))) (set! G2f76@lambda-transformer (lambda (G33eb@e G33ec@r G33ed@mr) ((lambda (G33f1@t) ((lambda (G33f3@ls/false) (if G33f3@ls/false (apply (lambda (G33f5@fmls G33f6@b G33f7@b*) (call-with-values (lambda () (G2fec@chi-lambda-clause G33eb@e G33f5@fmls (cons G33f6@b G33f7@b*) G33ec@r G33ed@mr)) (lambda (G33fd@G33fb G33fe@G33fc) ((lambda (G3401@body G3402@fmls) (G2d21@G2c5f@build-lambda '#f G3402@fmls G3401@body)) G33fe@G33fc G33fd@G33fb)))) G33f3@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G33f1@t))) (G2fc2@syntax-dispatch G33f1@t '(_ any any . each-any)))) G33eb@e))) (set! G2f78@bless (lambda (G3405@x) (G2dad@mkstx ((letrec ((G3407@f (lambda (G3409@x) (if (G2d8d@stx? G3409@x) G3409@x (if (pair? G3409@x) (cons (G3407@f (car G3409@x)) (G3407@f (cdr G3409@x))) (if (symbol? G3409@x) (G2f50@scheme-stx G3409@x) (if (vector? G3409@x) (vector-map G3407@f G3409@x) G3409@x))))))) G3407@f) G3405@x) '() '() '()))) (set! G2f7a@with-syntax-macro (lambda (G340b@e) ((lambda (G340d@t) ((lambda (G340f@ls/false) (if G340f@ls/false (apply (lambda (G3411@pat* G3412@expr* G3413@b G3414@b*) ((lambda (G3419@idn*) (begin (G2fea@verify-formals (map car G3419@idn*) G340b@e) ((lambda (G341b@t*) (G2f78@bless (list 'let (map list G341b@t* G3412@expr*) ((letrec ((G341d@f (lambda (G341f@pat* G3420@t*) (if (null? G341f@pat*) (cons 'begin (cons '#f (cons G3413@b G3414@b*))) (list 'syntax-case (car G3420@t*) '() (list (car G341f@pat*) (G341d@f (cdr G341f@pat*) (cdr G3420@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G341f@pat*)) (car G3420@t*)))))))) G341d@f) G3411@pat* G341b@t*)))) (G309b@generate-temporaries G3412@expr*)))) ((letrec ((G3423@f (lambda (G3425@pat*) (if (null? G3425@pat*) '() (call-with-values (lambda () (G2fc0@convert-pattern (car G3425@pat*) '())) (lambda (G3429@G3427 G342a@G3428) ((lambda (G342d@idn* G342e@pat) (append G342d@idn* (G3423@f (cdr G3425@pat*)))) G342a@G3428 G3429@G3427))))))) G3423@f) G3411@pat*))) G340f@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G340d@t))) (G2fc2@syntax-dispatch G340d@t '(_ #(each (any any)) any . each-any)))) G340b@e))) (set! G2f7c@invalid-fmls-error (lambda (G3431@stx G3432@fmls) ((lambda (G3435@t) ((lambda (G3437@ls/false) (if G3437@ls/false (apply (lambda (G3439@id* G343a@last) ((letrec ((G343d@f (lambda (G343f@id*) (if (null? G343f@id*) (values) (if (not (G2dc5@id? (car G343f@id*))) (G30af@syntax-violation '#f '"not an identifier" G3431@stx (car G343f@id*)) (begin (G343d@f (cdr G343f@id*)) (if (G2dd3@bound-id-member? (car G343f@id*) (cdr G343f@id*)) (G30af@syntax-violation '#f '"duplicate binding" G3431@stx (car G343f@id*)) (void)))))))) G343d@f) (if (G2dc5@id? G343a@last) (cons G343a@last G3439@id*) (if (G2dbb@syntax-null? G343a@last) G3439@id* (G30af@syntax-violation '#f '"not an identifier" G3431@stx G343a@last))))) G3437@ls/false) ((lambda (G3441@t) ((lambda (G3443@ls/false) (if G3443@ls/false (apply (lambda () (G30af@syntax-violation '#f '"malformed binding form" G3431@stx G3432@fmls)) G3443@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3441@t))) (G2fc2@syntax-dispatch G3441@t '_))) G3435@t))) (G2fc2@syntax-dispatch G3435@t '#(each+ any () any)))) G3432@fmls))) (set! G2f7e@let-macro (lambda (G3445@stx) ((lambda (G3447@t) ((lambda (G3449@ls/false) (if G3449@ls/false (apply (lambda (G344b@lhs* G344c@rhs* G344d@b G344e@b*) (if (G2dcf@valid-bound-ids? G344b@lhs*) (G2f78@bless (cons (cons 'lambda (cons G344b@lhs* (cons G344d@b G344e@b*))) G344c@rhs*)) (G2f7c@invalid-fmls-error G3445@stx G344b@lhs*))) G3449@ls/false) ((lambda (G3453@t) ((lambda (G3455@ls/false) (if (if G3455@ls/false (begin '#f (apply (lambda (G3457@f G3458@lhs* G3459@rhs* G345a@b G345b@b*) (G2dc5@id? G3457@f)) G3455@ls/false)) '#f) (apply (lambda (G3461@f G3462@lhs* G3463@rhs* G3464@b G3465@b*) (if (G2dcf@valid-bound-ids? G3462@lhs*) (G2f78@bless (cons (list 'letrec (list (list G3461@f (cons 'lambda (cons G3462@lhs* (cons G3464@b G3465@b*))))) G3461@f) G3463@rhs*)) (G2f7c@invalid-fmls-error G3445@stx G3462@lhs*))) G3455@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3453@t))) (G2fc2@syntax-dispatch G3453@t '(_ any #(each (any any)) any . each-any)))) G3447@t))) (G2fc2@syntax-dispatch G3447@t '(_ #(each (any any)) any . each-any)))) G3445@stx))) (set! G2f80@let-values-macro (lambda (G346b@stx) ((lambda (G346e@rename G3470@rename*) (begin (set! G346e@rename (lambda (G34d0@x G34d1@old* G34d2@new*) (begin (if (not (G2dc5@id? G34d0@x)) (G30af@syntax-violation '#f '"not an indentifier" G346b@stx G34d0@x) (void)) (if (G2dd3@bound-id-member? G34d0@x G34d1@old*) (G30af@syntax-violation '#f '"duplicate binding" G346b@stx G34d0@x) (void)) ((lambda (G34d6@y) (values G34d6@y (cons G34d0@x G34d1@old*) (cons G34d6@y G34d2@new*))) (gensym (G30b5@syntax->datum G34d0@x)))))) (set! G3470@rename* (lambda (G34be@x* G34bf@old* G34c0@new*) (if (null? G34be@x*) (values '() G34bf@old* G34c0@new*) (call-with-values (lambda () (G346e@rename (car G34be@x*) G34bf@old* G34c0@new*)) (lambda (G34c4@x G34c5@old* G34c6@new*) (call-with-values (lambda () (G3470@rename* (cdr G34be@x*) G34c5@old* G34c6@new*)) (lambda (G34ca@x* G34cb@old* G34cc@new*) (values (cons G34c4@x G34ca@x*) G34cb@old* G34cc@new*)))))))) ((lambda (G3471@t) ((lambda (G3473@ls/false) (if G3473@ls/false (apply (lambda (G3475@b G3476@b*) (cons* (G2f78@bless 'let) '() G3475@b G3476@b*)) G3473@ls/false) ((lambda (G3479@t) ((lambda (G347b@ls/false) (if G347b@ls/false (apply (lambda (G347d@lhs* G347e@rhs* G347f@b G3480@b*) (G2f78@bless ((letrec ((G3485@f (lambda (G3487@lhs* G3488@rhs* G3489@old* G348a@new*) (if (null? G3487@lhs*) (cons 'let (cons (map list G3489@old* G348a@new*) (cons G347f@b G3480@b*))) ((lambda (G348f@t) ((lambda (G3491@ls/false) (if G3491@ls/false (apply (lambda (G3493@x*) (call-with-values (lambda () (G3470@rename* G3493@x* G3489@old* G348a@new*)) (lambda (G3498@G3495 G3499@G3496 G349a@G3497) ((lambda (G349e@new* G349f@old* G34a0@y*) (list 'call-with-values (list 'lambda '() (car G3488@rhs*)) (list 'lambda G34a0@y* (G3485@f (cdr G3487@lhs*) (cdr G3488@rhs*) G349f@old* G349e@new*)))) G349a@G3497 G3499@G3496 G3498@G3495)))) G3491@ls/false) ((lambda (G34a4@t) ((lambda (G34a6@ls/false) (if G34a6@ls/false (apply (lambda (G34a8@x* G34a9@x) (call-with-values (lambda () (G346e@rename G34a9@x G3489@old* G348a@new*)) (lambda (G34ac@y G34ad@old* G34ae@new*) (call-with-values (lambda () (G3470@rename* G34a8@x* G34ad@old* G34ae@new*)) (lambda (G34b2@y* G34b3@old* G34b4@new*) (list 'call-with-values (list 'lambda '() (car G3488@rhs*)) (list 'lambda (append G34b2@y* G34ac@y) (G3485@f (cdr G3487@lhs*) (cdr G3488@rhs*) G34b3@old* G34b4@new*)))))))) G34a6@ls/false) ((lambda (G34b8@t) ((lambda (G34ba@ls/false) (if G34ba@ls/false (apply (lambda (G34bc@others) (G30af@syntax-violation '#f '"malformed bindings" G346b@stx G34bc@others)) G34ba@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G34b8@t))) (G2fc2@syntax-dispatch G34b8@t 'any))) G34a4@t))) (G2fc2@syntax-dispatch G34a4@t '#(each+ any () any)))) G348f@t))) (G2fc2@syntax-dispatch G348f@t 'each-any))) (car G3487@lhs*)))))) G3485@f) G347d@lhs* G347e@rhs* '() '()))) G347b@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3479@t))) (G2fc2@syntax-dispatch G3479@t '(_ #(each (any any)) any . each-any)))) G3471@t))) (G2fc2@syntax-dispatch G3471@t '(_ () any . each-any)))) G346b@stx))) '#f '#f))) (set! G2f82@let*-values-macro (lambda (G34d8@stx) ((lambda (G34db@check) (begin (set! G34db@check (lambda (G350a@x*) (if (not (null? G350a@x*)) ((lambda (G350c@x) (begin (if (not (G2dc5@id? G350c@x)) (G30af@syntax-violation '#f '"not an identifier" G34d8@stx G350c@x) (void)) (G34db@check (cdr G350a@x*)) (if (G2dd3@bound-id-member? G350c@x (cdr G350a@x*)) (G30af@syntax-violation '#f '"duplicate identifier" G34d8@stx G350c@x) (void)))) (car G350a@x*)) (void)))) ((lambda (G34dc@t) ((lambda (G34de@ls/false) (if G34de@ls/false (apply (lambda (G34e0@b G34e1@b*) (cons* (G2f78@bless 'let) '() G34e0@b G34e1@b*)) G34de@ls/false) ((lambda (G34e4@t) ((lambda (G34e6@ls/false) (if G34e6@ls/false (apply (lambda (G34e8@lhs* G34e9@rhs* G34ea@b G34eb@b*) (G2f78@bless ((letrec ((G34f0@f (lambda (G34f2@lhs* G34f3@rhs*) (if (null? G34f2@lhs*) (cons 'begin (cons G34ea@b G34eb@b*)) ((lambda (G34f6@t) ((lambda (G34f8@ls/false) (if G34f8@ls/false (apply (lambda (G34fa@x*) (begin (G34db@check G34fa@x*) (list 'call-with-values (list 'lambda '() (car G34f3@rhs*)) (list 'lambda G34fa@x* (G34f0@f (cdr G34f2@lhs*) (cdr G34f3@rhs*)))))) G34f8@ls/false) ((lambda (G34fc@t) ((lambda (G34fe@ls/false) (if G34fe@ls/false (apply (lambda (G3500@x* G3501@x) (begin (G34db@check (cons G3501@x G3500@x*)) (list 'call-with-values (list 'lambda '() (car G34f3@rhs*)) (list 'lambda (append G3500@x* G3501@x) (G34f0@f (cdr G34f2@lhs*) (cdr G34f3@rhs*)))))) G34fe@ls/false) ((lambda (G3504@t) ((lambda (G3506@ls/false) (if G3506@ls/false (apply (lambda (G3508@others) (G30af@syntax-violation '#f '"malformed bindings" G34d8@stx G3508@others)) G3506@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3504@t))) (G2fc2@syntax-dispatch G3504@t 'any))) G34fc@t))) (G2fc2@syntax-dispatch G34fc@t '#(each+ any () any)))) G34f6@t))) (G2fc2@syntax-dispatch G34f6@t 'each-any))) (car G34f2@lhs*)))))) G34f0@f) G34e8@lhs* G34e9@rhs*))) G34e6@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G34e4@t))) (G2fc2@syntax-dispatch G34e4@t '(_ #(each (any any)) any . each-any)))) G34dc@t))) (G2fc2@syntax-dispatch G34dc@t '(_ () any . each-any)))) G34d8@stx))) '#f))) (set! G2f84@trace-lambda-macro (lambda (G350e@stx) ((lambda (G3510@t) ((lambda (G3512@ls/false) (if G3512@ls/false (apply (lambda (G3514@who G3515@fmls G3516@b G3517@b*) (if (G2dcf@valid-bound-ids? G3515@fmls) (G2f78@bless (list 'make-traced-procedure (list 'quote G3514@who) (cons 'lambda (cons G3515@fmls (cons G3516@b G3517@b*))))) (G2f7c@invalid-fmls-error G350e@stx G3515@fmls))) G3512@ls/false) ((lambda (G351c@t) ((lambda (G351e@ls/false) (if G351e@ls/false (apply (lambda (G3520@who G3521@fmls G3522@last G3523@b G3524@b*) (if (G2dcf@valid-bound-ids? (cons G3522@last G3521@fmls)) (G2f78@bless (list 'make-traced-procedure (list 'quote G3520@who) (cons 'lambda (cons (append G3521@fmls G3522@last) (cons G3523@b G3524@b*))))) (G2f7c@invalid-fmls-error G350e@stx (append G3521@fmls G3522@last)))) G351e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G351c@t))) (G2fc2@syntax-dispatch G351c@t '(_ any #(each+ any () any) any . each-any)))) G3510@t))) (G2fc2@syntax-dispatch G3510@t '(_ any each-any any . each-any)))) G350e@stx))) (set! G2f86@trace-define-macro (lambda (G352a@stx) ((lambda (G352c@t) ((lambda (G352e@ls/false) (if G352e@ls/false (apply (lambda (G3530@who G3531@fmls G3532@b G3533@b*) (if (G2dcf@valid-bound-ids? G3531@fmls) (G2f78@bless (list 'define G3530@who (list 'make-traced-procedure (list 'quote G3530@who) (cons 'lambda (cons G3531@fmls (cons G3532@b G3533@b*)))))) (G2f7c@invalid-fmls-error G352a@stx G3531@fmls))) G352e@ls/false) ((lambda (G3538@t) ((lambda (G353a@ls/false) (if G353a@ls/false (apply (lambda (G353c@who G353d@fmls G353e@last G353f@b G3540@b*) (if (G2dcf@valid-bound-ids? (cons G353e@last G353d@fmls)) (G2f78@bless (list 'define G353c@who (list 'make-traced-procedure (list 'quote G353c@who) (cons 'lambda (cons (append G353d@fmls G353e@last) (cons G353f@b G3540@b*)))))) (G2f7c@invalid-fmls-error G352a@stx (append G353d@fmls G353e@last)))) G353a@ls/false) ((lambda (G3546@t) ((lambda (G3548@ls/false) (if G3548@ls/false (apply (lambda (G354a@who G354b@expr) (if (G2dc5@id? G354a@who) (G2f78@bless (list 'define G354a@who (list 'let (list (list 'v G354b@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G354a@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G30af@syntax-violation '#f '"invalid name" G352a@stx))) G3548@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3546@t))) (G2fc2@syntax-dispatch G3546@t '(_ any any)))) G3538@t))) (G2fc2@syntax-dispatch G3538@t '(_ (any . #(each+ any () any)) any . each-any)))) G352c@t))) (G2fc2@syntax-dispatch G352c@t '(_ (any . each-any) any . each-any)))) G352a@stx))) (set! G2f88@trace-define-syntax-macro (lambda (G354e@stx) ((lambda (G3550@t) ((lambda (G3552@ls/false) (if G3552@ls/false (apply (lambda (G3554@who G3555@expr) (if (G2dc5@id? G3554@who) (G2f78@bless (list 'define-syntax G3554@who (list 'make-traced-macro (list 'quote G3554@who) G3555@expr))) (G30af@syntax-violation '#f '"invalid name" G354e@stx))) G3552@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3550@t))) (G2fc2@syntax-dispatch G3550@t '(_ any any)))) G354e@stx))) (set! G2f8a@trace-let/rec-syntax (lambda (G3558@who) (lambda (G355a@stx) ((lambda (G355c@t) ((lambda (G355e@ls/false) (if G355e@ls/false (apply (lambda (G3560@lhs* G3561@rhs* G3562@b G3563@b*) (if (G2dcf@valid-bound-ids? G3560@lhs*) ((lambda (G3568@rhs*) (G2f78@bless (cons G3558@who (cons (map list G3560@lhs* G3568@rhs*) (cons G3562@b G3563@b*))))) (map (lambda (G356a@lhs G356b@rhs) (list 'make-traced-macro (list 'quote G356a@lhs) G356b@rhs)) G3560@lhs* G3561@rhs*)) (G2f7c@invalid-fmls-error G355a@stx G3560@lhs*))) G355e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G355c@t))) (G2fc2@syntax-dispatch G355c@t '(_ #(each (any any)) any . each-any)))) G355a@stx)))) (set! G2f8c@trace-let-syntax-macro (G2f8a@trace-let/rec-syntax 'let-syntax)) (set! G2f8e@trace-letrec-syntax-macro (G2f8a@trace-let/rec-syntax 'letrec-syntax)) (set! G2f90@guard-macro (lambda (G356e@x) ((lambda (G3571@gen-clauses) (begin (set! G3571@gen-clauses (lambda (G3588@con G3589@outerk G358a@clause*) ((lambda (G358f@f G3591@f*) (begin (set! G358f@f (lambda (G35c2@x G35c3@k) ((lambda (G35c6@t) ((lambda (G35c8@ls/false) (if G35c8@ls/false (apply (lambda (G35ca@e G35cb@p) ((lambda (G35ce@t) (list 'let (list (list G35ce@t G35ca@e)) (list 'if G35ce@t (list G35cb@p G35ce@t) G35c3@k))) (gensym))) G35c8@ls/false) ((lambda (G35d0@t) ((lambda (G35d2@ls/false) (if G35d2@ls/false (apply (lambda (G35d4@e) ((lambda (G35d6@t) (list 'let (list (list G35d6@t G35d4@e)) (list 'if G35d6@t G35d6@t G35c3@k))) (gensym))) G35d2@ls/false) ((lambda (G35d8@t) ((lambda (G35da@ls/false) (if G35da@ls/false (apply (lambda (G35dc@e G35dd@v G35de@v*) (list 'if G35dc@e (cons 'begin (cons G35dd@v G35de@v*)) G35c3@k)) G35da@ls/false) ((lambda (G35e2@t) ((lambda (G35e4@ls/false) (if G35e4@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid guard clause" G35c2@x)) G35e4@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G35e2@t))) (G2fc2@syntax-dispatch G35e2@t '_))) G35d8@t))) (G2fc2@syntax-dispatch G35d8@t '(any any . each-any)))) G35d0@t))) (G2fc2@syntax-dispatch G35d0@t '(any)))) G35c6@t))) (G2fc2@syntax-dispatch G35c6@t '(any #(scheme-id =>) any)))) G35c2@x))) (set! G3591@f* (lambda (G359c@x*) ((lambda (G359e@t) ((lambda (G35a0@ls/false) (if G35a0@ls/false (apply (lambda () (values (list 'raise G3588@con) '#t)) G35a0@ls/false) ((lambda (G35a2@t) ((lambda (G35a4@ls/false) (if G35a4@ls/false (apply (lambda (G35a6@e G35a7@e*) (values (cons 'begin (cons G35a6@e G35a7@e*)) '#f)) G35a4@ls/false) ((lambda (G35aa@t) ((lambda (G35ac@ls/false) (if G35ac@ls/false (apply (lambda (G35ae@cls G35af@cls*) (call-with-values (lambda () (G3591@f* G35af@cls*)) (lambda (G35b4@G35b2 G35b5@G35b3) ((lambda (G35b8@g G35b9@e) (values (G358f@f G35ae@cls G35b9@e) G35b8@g)) G35b5@G35b3 G35b4@G35b2)))) G35ac@ls/false) ((lambda (G35bc@t) ((lambda (G35be@ls/false) (if G35be@ls/false (apply (lambda (G35c0@others) (G30af@syntax-violation '#f '"invalid guard clause" G35c0@others)) G35be@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G35bc@t))) (G2fc2@syntax-dispatch G35bc@t 'any))) G35aa@t))) (G2fc2@syntax-dispatch G35aa@t '(any . any)))) G35a2@t))) (G2fc2@syntax-dispatch G35a2@t '((#(scheme-id else) any . each-any))))) G359e@t))) (G2fc2@syntax-dispatch G359e@t '()))) G359c@x*))) (call-with-values (lambda () (G3591@f* G358a@clause*)) (lambda (G3594@G3592 G3595@G3593) ((lambda (G3598@raisek G3599@code) (if G3598@raisek (list G3589@outerk G3599@code) G3599@code)) G3595@G3593 G3594@G3592))))) '#f '#f))) ((lambda (G3572@t) ((lambda (G3574@ls/false) (if (if G3574@ls/false (begin '#f (apply (lambda (G3576@con G3577@clause* G3578@b G3579@b*) (G2dc5@id? G3576@con)) G3574@ls/false)) '#f) (apply (lambda (G357e@con G357f@clause* G3580@b G3581@b*) ((lambda (G3586@outerk) (G2f78@bless (list 'call/cc (list 'lambda (list G3586@outerk) (list 'with-exception-handler (list 'lambda (list G357e@con) (G3571@gen-clauses G357e@con G3586@outerk G357f@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3580@b G3581@b*))))))))) (gensym))) G3574@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3572@t))) (G2fc2@syntax-dispatch G3572@t '(_ (any . each-any) any . each-any)))) G356e@x))) '#f))) (set! G2f92@define-enumeration-macro (lambda (G35e6@stx) ((lambda (G35e9@set? G35eb@remove-dups) (begin (set! G35e9@set? (lambda (G3602@x) ((lambda (G3604@t) (if G3604@t G3604@t (begin '#f (if (not (memq (car G3602@x) (cdr G3602@x))) (begin '#f (G35e9@set? (cdr G3602@x))) '#f)))) (null? G3602@x)))) (set! G35eb@remove-dups (lambda (G3600@ls) (if (null? G3600@ls) '() (cons (car G3600@ls) (G35eb@remove-dups (remq (car G3600@ls) (cdr G3600@ls))))))) ((lambda (G35ec@t) ((lambda (G35ee@ls/false) (if (if G35ee@ls/false (begin '#f (apply (lambda (G35f0@name G35f1@id* G35f2@maker) (if (G2dc5@id? G35f0@name) (if (G2dc5@id? G35f2@maker) (begin '#f (for-all G2dc5@id? G35f1@id*)) '#f) '#f)) G35ee@ls/false)) '#f) (apply (lambda (G35f6@name G35f7@id* G35f8@maker) ((lambda (G35fc@name* G35fd@mk) (G2f78@bless (list 'begin (list 'define G35fd@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G35fc@name*)))) (list 'define-syntax G35f6@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G35fc@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G35f6@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G35f8@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G35f8@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G35fc@name*)) (cons 'syntax-violation (cons (list 'quote G35f8@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G35fd@mk '('(n* ...)))))))))))) (G35eb@remove-dups (G30b5@syntax->datum G35f7@id*)) (gensym))) G35ee@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G35ec@t))) (G2fc2@syntax-dispatch G35ec@t '(_ any each-any any)))) G35e6@stx))) '#f '#f))) (set! G2f94@time-macro (lambda (G3606@stx) ((lambda (G3608@t) ((lambda (G360a@ls/false) (if G360a@ls/false (apply (lambda (G360c@expr) ((lambda (G360e@str) (G2f78@bless (list 'time-it G360e@str (list 'lambda '() G360c@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3612@G3610 G3613@G3611) ((lambda (G3616@e G3617@p) (begin (write (G30b5@syntax->datum G360c@expr) G3617@p) (G3616@e))) G3613@G3611 G3612@G3610))))) G360a@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3608@t))) (G2fc2@syntax-dispatch G3608@t '(_ any)))) G3606@stx))) (set! G2f96@delay-macro (lambda (G361a@stx) ((lambda (G361c@t) ((lambda (G361e@ls/false) (if G361e@ls/false (apply (lambda (G3620@expr) (G2f78@bless (list 'make-promise (list 'lambda '() G3620@expr)))) G361e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G361c@t))) (G2fc2@syntax-dispatch G361c@t '(_ any)))) G361a@stx))) (set! G2f98@assert-macro (lambda (G3622@stx) ((lambda (G3624@t) ((lambda (G3626@ls/false) (if G3626@ls/false (apply (lambda (G3628@expr) ((lambda (G362a@pos) (G2f78@bless (list 'unless G3628@expr (list 'assertion-error (list 'quote G3628@expr) (list 'quote G362a@pos))))) ((lambda (G362c@t) (if G362c@t G362c@t (begin '#f (G30a5@expression-position G3628@expr)))) (G30a5@expression-position G3622@stx)))) G3626@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3624@t))) (G2fc2@syntax-dispatch G3624@t '(_ any)))) G3622@stx))) (set! G2f9a@endianness-macro (lambda (G362e@stx) ((lambda (G3630@t) ((lambda (G3632@ls/false) (if G3632@ls/false (apply (lambda (G3634@e) ((lambda (G3636@t) (if (memv G3636@t '(little)) (G2f78@bless ''little) (if (memv G3636@t '(big)) (G2f78@bless ''big) (G30af@syntax-violation '#f '"endianness must be big or little" G362e@stx)))) (G30b5@syntax->datum G3634@e))) G3632@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3630@t))) (G2fc2@syntax-dispatch G3630@t '(_ any)))) G362e@stx))) (set! G2f9c@identifier-syntax-macro (lambda (G3638@stx) ((lambda (G363a@t) ((lambda (G363c@ls/false) (if G363c@ls/false (apply (lambda (G363e@expr) (G2f78@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G363e@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G363e@expr) '((syntax (e* ...)))))))))) G363c@ls/false) ((lambda (G3640@t) ((lambda (G3642@ls/false) (if (if G3642@ls/false (begin '#f (apply (lambda (G3644@id1 G3645@expr1 G3646@id2 G3647@expr2 G3648@expr3) (if (G2dc5@id? G3644@id1) (if (G2dc5@id? G3646@id2) (begin '#f (G2dc5@id? G3647@expr2)) '#f) '#f)) G3642@ls/false)) '#f) (apply (lambda (G364e@id1 G364f@expr1 G3650@id2 G3651@expr2 G3652@expr3) (G2f78@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G364f@expr1)) (list (list 'set! 'id G3651@expr2) (list 'syntax G3652@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G364f@expr1 '(e* ...))))))))) G3642@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3640@t))) (G2fc2@syntax-dispatch G3640@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G363a@t))) (G2fc2@syntax-dispatch G363a@t '(_ any)))) G3638@stx))) (set! G2f9e@do-macro (lambda (G3658@stx) ((lambda (G365b@bind) (begin (set! G365b@bind (lambda (G3672@x) ((lambda (G3674@t) ((lambda (G3676@ls/false) (if G3676@ls/false (apply (lambda (G3678@x G3679@init) (list G3678@x G3679@init G3678@x)) G3676@ls/false) ((lambda (G367c@t) ((lambda (G367e@ls/false) (if G367e@ls/false (apply (lambda (G3680@x G3681@init G3682@step) (list G3680@x G3681@init G3682@step)) G367e@ls/false) ((lambda (G3686@t) ((lambda (G3688@ls/false) (if G3688@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid binding" G3658@stx)) G3688@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3686@t))) (G2fc2@syntax-dispatch G3686@t '_))) G367c@t))) (G2fc2@syntax-dispatch G367c@t '(any any any)))) G3674@t))) (G2fc2@syntax-dispatch G3674@t '(any any)))) G3672@x))) ((lambda (G365c@t) ((lambda (G365e@ls/false) (if G365e@ls/false (apply (lambda (G3660@binding* G3661@test G3662@expr* G3663@command*) ((lambda (G3668@t) ((lambda (G366a@ls/false) (if G366a@ls/false (apply (lambda (G366c@x* G366d@init* G366e@step*) (if (G2dcf@valid-bound-ids? G366c@x*) (G2f78@bless (list 'letrec (list (list 'loop (list 'lambda G366c@x* (list 'if G3661@test (cons 'begin (cons '(if #f #f) G3662@expr*)) (cons 'begin (append G3663@command* (list (cons 'loop G366e@step*)))))))) (cons 'loop G366d@init*))) (G30af@syntax-violation '#f '"invalid bindings" G3658@stx))) G366a@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3668@t))) (G2fc2@syntax-dispatch G3668@t '#(each (any any any))))) (map G365b@bind G3660@binding*))) G365e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G365c@t))) (G2fc2@syntax-dispatch G365c@t '(_ each-any (any . each-any) . each-any)))) G3658@stx))) '#f))) (set! G2fa0@let*-macro (lambda (G368a@stx) ((lambda (G368c@t) ((lambda (G368e@ls/false) (if (if G368e@ls/false (begin '#f (apply (lambda (G3690@lhs* G3691@rhs* G3692@b G3693@b*) (for-all G2dc5@id? G3690@lhs*)) G368e@ls/false)) '#f) (apply (lambda (G3698@lhs* G3699@rhs* G369a@b G369b@b*) (G2f78@bless ((letrec ((G36a0@f (lambda (G36a2@x*) (if (null? G36a2@x*) (cons 'let (cons '() (cons G369a@b G369b@b*))) (list 'let (list (car G36a2@x*)) (G36a0@f (cdr G36a2@x*))))))) G36a0@f) (map list G3698@lhs* G3699@rhs*)))) G368e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G368c@t))) (G2fc2@syntax-dispatch G368c@t '(_ #(each (any any)) any . each-any)))) G368a@stx))) (set! G2fa2@or-macro (lambda (G36a4@stx) ((lambda (G36a6@t) ((lambda (G36a8@ls/false) (if G36a8@ls/false (apply (lambda () '#f) G36a8@ls/false) ((lambda (G36aa@t) ((lambda (G36ac@ls/false) (if G36ac@ls/false (apply (lambda (G36ae@e G36af@e*) (G2f78@bless ((letrec ((G36b2@f (lambda (G36b4@e G36b5@e*) (if (null? G36b5@e*) (list 'begin '#f G36b4@e) (list 'let (list (list 't G36b4@e)) (list 'if 't 't (G36b2@f (car G36b5@e*) (cdr G36b5@e*)))))))) G36b2@f) G36ae@e G36af@e*))) G36ac@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G36aa@t))) (G2fc2@syntax-dispatch G36aa@t '(_ any . each-any)))) G36a6@t))) (G2fc2@syntax-dispatch G36a6@t '(_)))) G36a4@stx))) (set! G2fa4@and-macro (lambda (G36b8@stx) ((lambda (G36ba@t) ((lambda (G36bc@ls/false) (if G36bc@ls/false (apply (lambda () '#t) G36bc@ls/false) ((lambda (G36be@t) ((lambda (G36c0@ls/false) (if G36c0@ls/false (apply (lambda (G36c2@e G36c3@e*) (G2f78@bless ((letrec ((G36c6@f (lambda (G36c8@e G36c9@e*) (if (null? G36c9@e*) (list 'begin '#f G36c8@e) (cons 'if (cons G36c8@e (cons (G36c6@f (car G36c9@e*) (cdr G36c9@e*)) '(#f)))))))) G36c6@f) G36c2@e G36c3@e*))) G36c0@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G36be@t))) (G2fc2@syntax-dispatch G36be@t '(_ any . each-any)))) G36ba@t))) (G2fc2@syntax-dispatch G36ba@t '(_)))) G36b8@stx))) (set! G2fa6@cond-macro (lambda (G36cc@stx) ((lambda (G36ce@t) ((lambda (G36d0@ls/false) (if G36d0@ls/false (apply (lambda (G36d2@cls G36d3@cls*) (G2f78@bless ((letrec ((G36d6@f (lambda (G36d8@cls G36d9@cls*) (if (null? G36d9@cls*) ((lambda (G36dc@t) ((lambda (G36de@ls/false) (if G36de@ls/false (apply (lambda (G36e0@e G36e1@e*) (cons 'begin (cons G36e0@e G36e1@e*))) G36de@ls/false) ((lambda (G36e4@t) ((lambda (G36e6@ls/false) (if G36e6@ls/false (apply (lambda (G36e8@e G36e9@p) (list 'let (list (list 't G36e8@e)) (list 'if 't (cons G36e9@p '(t))))) G36e6@ls/false) ((lambda (G36ec@t) ((lambda (G36ee@ls/false) (if G36ee@ls/false (apply (lambda (G36f0@e) (cons 'or (cons G36f0@e '((if #f #f))))) G36ee@ls/false) ((lambda (G36f2@t) ((lambda (G36f4@ls/false) (if G36f4@ls/false (apply (lambda (G36f6@e G36f7@e*) (list 'if G36f6@e (cons 'begin G36f7@e*))) G36f4@ls/false) ((lambda (G36fa@t) ((lambda (G36fc@ls/false) (if G36fc@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid last clause" G36cc@stx)) G36fc@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G36fa@t))) (G2fc2@syntax-dispatch G36fa@t '_))) G36f2@t))) (G2fc2@syntax-dispatch G36f2@t '(any . each-any)))) G36ec@t))) (G2fc2@syntax-dispatch G36ec@t '(any)))) G36e4@t))) (G2fc2@syntax-dispatch G36e4@t '(any #(scheme-id =>) any)))) G36dc@t))) (G2fc2@syntax-dispatch G36dc@t '(#(scheme-id else) any . each-any)))) G36d8@cls) ((lambda (G36fe@t) ((lambda (G3700@ls/false) (if G3700@ls/false (apply (lambda (G3702@e G3703@e*) (G30af@syntax-violation '#f '"incorrect position of keyword else" G36cc@stx)) G3700@ls/false) ((lambda (G3706@t) ((lambda (G3708@ls/false) (if G3708@ls/false (apply (lambda (G370a@e G370b@p) (list 'let (list (list 't G370a@e)) (list 'if 't (cons G370b@p '(t)) (G36d6@f (car G36d9@cls*) (cdr G36d9@cls*))))) G3708@ls/false) ((lambda (G370e@t) ((lambda (G3710@ls/false) (if G3710@ls/false (apply (lambda (G3712@e) (list 'or G3712@e (G36d6@f (car G36d9@cls*) (cdr G36d9@cls*)))) G3710@ls/false) ((lambda (G3714@t) ((lambda (G3716@ls/false) (if G3716@ls/false (apply (lambda (G3718@e G3719@e*) (list 'if G3718@e (cons 'begin G3719@e*) (G36d6@f (car G36d9@cls*) (cdr G36d9@cls*)))) G3716@ls/false) ((lambda (G371c@t) ((lambda (G371e@ls/false) (if G371e@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid last clause" G36cc@stx)) G371e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G371c@t))) (G2fc2@syntax-dispatch G371c@t '_))) G3714@t))) (G2fc2@syntax-dispatch G3714@t '(any . each-any)))) G370e@t))) (G2fc2@syntax-dispatch G370e@t '(any)))) G3706@t))) (G2fc2@syntax-dispatch G3706@t '(any #(scheme-id =>) any)))) G36fe@t))) (G2fc2@syntax-dispatch G36fe@t '(#(scheme-id else) any . each-any)))) G36d8@cls))))) G36d6@f) G36d2@cls G36d3@cls*))) G36d0@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G36ce@t))) (G2fc2@syntax-dispatch G36ce@t '(_ any . each-any)))) G36cc@stx))) (set! G2fa8@do-include (lambda (G3720@stx G3721@id G3722@filename) ((lambda (G3726@filename) (begin (if (not (if (string? G3726@filename) (begin '#f (G2dc5@id? G3721@id)) '#f)) (G30af@syntax-violation '#f '"invalid syntax" G3720@stx) (void)) (cons (G2f78@bless 'begin) (with-input-from-file G3726@filename (lambda () ((letrec ((G3728@f (lambda (G372a@ls) ((lambda (G372c@x) (if (eof-object? G372c@x) (reverse G372a@ls) (G3728@f (cons (G2da3@datum->stx G3721@id G372c@x) G372a@ls)))) (G295a@G2886@read-annotated))))) G3728@f) '())))))) (G2ddb@stx->datum G3722@filename)))) (set! G2faa@include-macro (lambda (G372e@e) ((lambda (G3730@t) ((lambda (G3732@ls/false) (if G3732@ls/false (apply (lambda (G3734@id G3735@filename) (G2fa8@do-include G372e@e G3734@id G3735@filename)) G3732@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3730@t))) (G2fc2@syntax-dispatch G3730@t '(any any)))) G372e@e))) (set! G2fac@include-into-macro (lambda (G3738@e) ((lambda (G373a@t) ((lambda (G373c@ls/false) (if G373c@ls/false (apply (lambda (G373e@id G373f@filename) (G2fa8@do-include G3738@e G373e@id G373f@filename)) G373c@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G373a@t))) (G2fc2@syntax-dispatch G373a@t '(_ any any)))) G3738@e))) (set! G2fae@syntax-rules-macro (lambda (G3742@e) ((lambda (G3744@t) ((lambda (G3746@ls/false) (if G3746@ls/false (apply (lambda (G3748@lits G3749@pat* G374a@tmp*) (begin (G2fc8@verify-literals G3748@lits G3742@e) (G2f78@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3748@lits (map (lambda (G374e@pat G374f@tmp) ((lambda (G3752@t) ((lambda (G3754@ls/false) (if G3754@ls/false (apply (lambda (G3756@rest) (list (cons 'g G3756@rest) (list 'syntax G374f@tmp))) G3754@ls/false) ((lambda (G3758@t) ((lambda (G375a@ls/false) (if G375a@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid syntax-rules pattern" G3742@e G374e@pat)) G375a@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3758@t))) (G2fc2@syntax-dispatch G3758@t '_))) G3752@t))) (G2fc2@syntax-dispatch G3752@t '(_ . any)))) G374e@pat)) G3749@pat* G374a@tmp*)))))))) G3746@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3744@t))) (G2fc2@syntax-dispatch G3744@t '(_ each-any . #(each (any any)))))) G3742@e))) (set! G2fb0@quasiquote-macro ((lambda () ((lambda (G375d@datum G377b@quasicons* G377d@quasicons G377f@quasiappend G3781@quasivector G3783@vquasi G3785@quasi) (begin (set! G375d@datum (lambda (G3860@x) (list (G2f50@scheme-stx 'quote) (G2dad@mkstx G3860@x '() '() '())))) (set! G377b@quasicons* (lambda (G3858@x G3859@y) ((letrec ((G385c@f (lambda (G385e@x) (if (null? G385e@x) G3859@y (G377d@quasicons (car G385e@x) (G385c@f (cdr G385e@x))))))) G385c@f) G3858@x))) (set! G377d@quasicons (lambda (G3832@x G3833@y) ((lambda (G3836@t) ((lambda (G3838@ls/false) (if G3838@ls/false (apply (lambda (G383a@dy) ((lambda (G383c@t) ((lambda (G383e@ls/false) (if G383e@ls/false (apply (lambda (G3840@dx) (list (G2f50@scheme-stx 'quote) (cons G3840@dx G383a@dy))) G383e@ls/false) ((lambda (G3842@t) ((lambda (G3844@ls/false) (if G3844@ls/false (apply (lambda () ((lambda (G3846@t) ((lambda (G3848@ls/false) (if G3848@ls/false (apply (lambda () (list (G2f50@scheme-stx 'list) G3832@x)) G3848@ls/false) ((lambda (G384a@t) ((lambda (G384c@ls/false) (if G384c@ls/false (apply (lambda () (list (G2f50@scheme-stx 'cons) G3832@x G3833@y)) G384c@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G384a@t))) (G2fc2@syntax-dispatch G384a@t '_))) G3846@t))) (G2fc2@syntax-dispatch G3846@t '()))) G383a@dy)) G3844@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3842@t))) (G2fc2@syntax-dispatch G3842@t '_))) G383c@t))) (G2fc2@syntax-dispatch G383c@t '(#(scheme-id quote) any)))) G3832@x)) G3838@ls/false) ((lambda (G384e@t) ((lambda (G3850@ls/false) (if G3850@ls/false (apply (lambda (G3852@stuff) (cons* (G2f50@scheme-stx 'list) G3832@x G3852@stuff)) G3850@ls/false) ((lambda (G3854@t) ((lambda (G3856@ls/false) (if G3856@ls/false (apply (lambda () (list (G2f50@scheme-stx 'cons) G3832@x G3833@y)) G3856@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3854@t))) (G2fc2@syntax-dispatch G3854@t '_))) G384e@t))) (G2fc2@syntax-dispatch G384e@t '(#(scheme-id list) . each-any)))) G3836@t))) (G2fc2@syntax-dispatch G3836@t '(#(scheme-id quote) any)))) G3833@y))) (set! G377f@quasiappend (lambda (G3818@x G3819@y) ((lambda (G381c@ls) (if (null? G381c@ls) (list (G2f50@scheme-stx 'quote) '()) (if (null? (cdr G381c@ls)) (car G381c@ls) (cons* (G2f50@scheme-stx 'append) G381c@ls)))) ((letrec ((G381e@f (lambda (G3820@x) (if (null? G3820@x) ((lambda (G3822@t) ((lambda (G3824@ls/false) (if G3824@ls/false (apply (lambda () '()) G3824@ls/false) ((lambda (G3826@t) ((lambda (G3828@ls/false) (if G3828@ls/false (apply (lambda () (list G3819@y)) G3828@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3826@t))) (G2fc2@syntax-dispatch G3826@t '_))) G3822@t))) (G2fc2@syntax-dispatch G3822@t '(#(scheme-id quote) ())))) G3819@y) ((lambda (G382a@t) ((lambda (G382c@ls/false) (if G382c@ls/false (apply (lambda () (G381e@f (cdr G3820@x))) G382c@ls/false) ((lambda (G382e@t) ((lambda (G3830@ls/false) (if G3830@ls/false (apply (lambda () (cons (car G3820@x) (G381e@f (cdr G3820@x)))) G3830@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G382e@t))) (G2fc2@syntax-dispatch G382e@t '_))) G382a@t))) (G2fc2@syntax-dispatch G382a@t '(#(scheme-id quote) ())))) (car G3820@x)))))) G381e@f) G3818@x)))) (set! G3781@quasivector (lambda (G37e6@x) ((lambda (G37e8@pat-x) ((lambda (G37ea@t) ((lambda (G37ec@ls/false) (if G37ec@ls/false (apply (lambda (G37ee@x*) (list (G2f50@scheme-stx 'quote) (list->vector G37ee@x*))) G37ec@ls/false) ((lambda (G37f0@t) ((lambda (G37f2@ls/false) (if G37f2@ls/false (apply (lambda () ((letrec ((G37f4@f (lambda (G37f6@x G37f7@k) ((lambda (G37fa@t) ((lambda (G37fc@ls/false) (if G37fc@ls/false (apply (lambda (G37fe@x*) (G37f7@k (map (lambda (G3800@x) (list (G2f50@scheme-stx 'quote) G3800@x)) G37fe@x*))) G37fc@ls/false) ((lambda (G3802@t) ((lambda (G3804@ls/false) (if G3804@ls/false (apply (lambda (G3806@x*) (G37f7@k G3806@x*)) G3804@ls/false) ((lambda (G3808@t) ((lambda (G380a@ls/false) (if G380a@ls/false (apply (lambda (G380c@x G380d@y) (G37f4@f G380d@y (lambda (G3810@ls) (G37f7@k (cons G380c@x G3810@ls))))) G380a@ls/false) ((lambda (G3812@t) ((lambda (G3814@ls/false) (if G3814@ls/false (apply (lambda () (list (G2f50@scheme-stx 'list->vector) G37e8@pat-x)) G3814@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3812@t))) (G2fc2@syntax-dispatch G3812@t '_))) G3808@t))) (G2fc2@syntax-dispatch G3808@t '(#(scheme-id cons) any any)))) G3802@t))) (G2fc2@syntax-dispatch G3802@t '(#(scheme-id list) . each-any)))) G37fa@t))) (G2fc2@syntax-dispatch G37fa@t '(#(scheme-id quote) each-any)))) G37f6@x)))) G37f4@f) G37e6@x (lambda (G3816@ls) (cons* (G2f50@scheme-stx 'vector) G3816@ls)))) G37f2@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G37f0@t))) (G2fc2@syntax-dispatch G37f0@t '_))) G37ea@t))) (G2fc2@syntax-dispatch G37ea@t '(#(scheme-id quote) each-any)))) G37e8@pat-x)) G37e6@x))) (set! G3783@vquasi (lambda (G37c4@p G37c5@lev) ((lambda (G37c8@t) ((lambda (G37ca@ls/false) (if G37ca@ls/false (apply (lambda (G37cc@p G37cd@q) ((lambda (G37d0@t) ((lambda (G37d2@ls/false) (if G37d2@ls/false (apply (lambda (G37d4@p) (if (= G37c5@lev '0) (G377b@quasicons* G37d4@p (G3783@vquasi G37cd@q G37c5@lev)) (G377d@quasicons (G377d@quasicons (G375d@datum 'unquote) (G3785@quasi G37d4@p (- G37c5@lev '1))) (G3783@vquasi G37cd@q G37c5@lev)))) G37d2@ls/false) ((lambda (G37d6@t) ((lambda (G37d8@ls/false) (if G37d8@ls/false (apply (lambda (G37da@p) (if (= G37c5@lev '0) (G377f@quasiappend G37da@p (G3783@vquasi G37cd@q G37c5@lev)) (G377d@quasicons (G377d@quasicons (G375d@datum 'unquote-splicing) (G3785@quasi G37da@p (- G37c5@lev '1))) (G3783@vquasi G37cd@q G37c5@lev)))) G37d8@ls/false) ((lambda (G37dc@t) ((lambda (G37de@ls/false) (if G37de@ls/false (apply (lambda (G37e0@p) (G377d@quasicons (G3785@quasi G37e0@p G37c5@lev) (G3783@vquasi G37cd@q G37c5@lev))) G37de@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G37dc@t))) (G2fc2@syntax-dispatch G37dc@t 'any))) G37d6@t))) (G2fc2@syntax-dispatch G37d6@t '(#(scheme-id unquote-splicing) . each-any)))) G37d0@t))) (G2fc2@syntax-dispatch G37d0@t '(#(scheme-id unquote) . each-any)))) G37cc@p)) G37ca@ls/false) ((lambda (G37e2@t) ((lambda (G37e4@ls/false) (if G37e4@ls/false (apply (lambda () (list (G2f50@scheme-stx 'quote) '())) G37e4@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G37e2@t))) (G2fc2@syntax-dispatch G37e2@t '()))) G37c8@t))) (G2fc2@syntax-dispatch G37c8@t '(any . any)))) G37c4@p))) (set! G3785@quasi (lambda (G378e@p G378f@lev) ((lambda (G3792@t) ((lambda (G3794@ls/false) (if G3794@ls/false (apply (lambda (G3796@p) (if (= G378f@lev '0) G3796@p (G377d@quasicons (G375d@datum 'unquote) (G3785@quasi (list G3796@p) (- G378f@lev '1))))) G3794@ls/false) ((lambda (G3798@t) ((lambda (G379a@ls/false) (if G379a@ls/false (apply (lambda (G379c@p G379d@q) (if (= G378f@lev '0) (G377b@quasicons* G379c@p (G3785@quasi G379d@q G378f@lev)) (G377d@quasicons (G377d@quasicons (G375d@datum 'unquote) (G3785@quasi G379c@p (- G378f@lev '1))) (G3785@quasi G379d@q G378f@lev)))) G379a@ls/false) ((lambda (G37a0@t) ((lambda (G37a2@ls/false) (if G37a2@ls/false (apply (lambda (G37a4@p G37a5@q) (if (= G378f@lev '0) (G377f@quasiappend G37a4@p (G3785@quasi G37a5@q G378f@lev)) (G377d@quasicons (G377d@quasicons (G375d@datum 'unquote-splicing) (G3785@quasi G37a4@p (- G378f@lev '1))) (G3785@quasi G37a5@q G378f@lev)))) G37a2@ls/false) ((lambda (G37a8@t) ((lambda (G37aa@ls/false) (if G37aa@ls/false (apply (lambda (G37ac@p) (G377d@quasicons (G375d@datum 'quasiquote) (G3785@quasi (list G37ac@p) (+ G378f@lev '1)))) G37aa@ls/false) ((lambda (G37ae@t) ((lambda (G37b0@ls/false) (if G37b0@ls/false (apply (lambda (G37b2@p G37b3@q) (G377d@quasicons (G3785@quasi G37b2@p G378f@lev) (G3785@quasi G37b3@q G378f@lev))) G37b0@ls/false) ((lambda (G37b6@t) ((lambda (G37b8@ls/false) (if (if G37b8@ls/false (begin '#f (apply (lambda (G37ba@x) (not (G2d8d@stx? G37ba@x))) G37b8@ls/false)) '#f) (apply (lambda (G37bc@x) (G3781@quasivector (G3783@vquasi G37bc@x G378f@lev))) G37b8@ls/false) ((lambda (G37be@t) ((lambda (G37c0@ls/false) (if G37c0@ls/false (apply (lambda (G37c2@p) (list (G2f50@scheme-stx 'quote) G37c2@p)) G37c0@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G37be@t))) (G2fc2@syntax-dispatch G37be@t 'any))) G37b6@t))) (G2fc2@syntax-dispatch G37b6@t '#(vector each-any)))) G37ae@t))) (G2fc2@syntax-dispatch G37ae@t '(any . any)))) G37a8@t))) (G2fc2@syntax-dispatch G37a8@t '(#(scheme-id quasiquote) any)))) G37a0@t))) (G2fc2@syntax-dispatch G37a0@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3798@t))) (G2fc2@syntax-dispatch G3798@t '((#(scheme-id unquote) . each-any) . any)))) G3792@t))) (G2fc2@syntax-dispatch G3792@t '(#(scheme-id unquote) any)))) G378e@p))) (lambda (G3786@x) ((lambda (G3788@t) ((lambda (G378a@ls/false) (if G378a@ls/false (apply (lambda (G378c@e) (G3785@quasi G378c@e '0)) G378a@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3788@t))) (G2fc2@syntax-dispatch G3788@t '(_ any)))) G3786@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fb2@quasisyntax-macro ((lambda () ((lambda (G3863@quasi) (begin (set! G3863@quasi (lambda (G387b@p G387c@lev) ((lambda (G387f@t) ((lambda (G3881@ls/false) (if G3881@ls/false (apply (lambda (G3883@p) (if (= G387c@lev '0) ((lambda (G3885@g) (values (list G3885@g) (list G3883@p) G3885@g)) (gensym)) (call-with-values (lambda () (G3863@quasi G3883@p (- G387c@lev '1))) (lambda (G388a@G3887 G388b@G3888 G388c@G3889) ((lambda (G3890@p G3891@rhs* G3892@lhs*) (values G3892@lhs* G3891@rhs* (list 'unsyntax G3890@p))) G388c@G3889 G388b@G3888 G388a@G3887))))) G3881@ls/false) ((lambda (G3896@t) ((lambda (G3898@ls/false) (if (if G3898@ls/false (begin '#f (apply (lambda () (= G387c@lev '0)) G3898@ls/false)) '#f) (apply (lambda () (G30af@syntax-violation '#f '"incorrect use of unsyntax" G387b@p)) G3898@ls/false) ((lambda (G389a@t) ((lambda (G389c@ls/false) (if G389c@ls/false (apply (lambda (G389e@p* G389f@q) (call-with-values (lambda () (G3863@quasi G389f@q G387c@lev)) (lambda (G38a5@G38a2 G38a6@G38a3 G38a7@G38a4) ((lambda (G38ab@q G38ac@rhs* G38ad@lhs*) (if (= G387c@lev '0) ((lambda (G38b1@g*) (values (append G38b1@g* G38ad@lhs*) (append G389e@p* G38ac@rhs*) (append G38b1@g* G38ab@q))) (map (lambda (G38b3@x) (gensym)) G389e@p*)) (call-with-values (lambda () (G3863@quasi G389e@p* (- G387c@lev '1))) (lambda (G38b8@G38b5 G38b9@G38b6 G38ba@G38b7) ((lambda (G38be@p* G38bf@rhs2* G38c0@lhs2*) (values (append G38c0@lhs2* G38ad@lhs*) (append G38bf@rhs2* G38ac@rhs*) (cons (cons 'unsyntax G38be@p*) G38ab@q))) G38ba@G38b7 G38b9@G38b6 G38b8@G38b5))))) G38a7@G38a4 G38a6@G38a3 G38a5@G38a2)))) G389c@ls/false) ((lambda (G38c4@t) ((lambda (G38c6@ls/false) (if G38c6@ls/false (apply (lambda (G38c8@p* G38c9@q) (call-with-values (lambda () (G3863@quasi G38c9@q G387c@lev)) (lambda (G38cf@G38cc G38d0@G38cd G38d1@G38ce) ((lambda (G38d5@q G38d6@rhs* G38d7@lhs*) (if (= G387c@lev '0) ((lambda (G38db@g*) (values (append (map (lambda (G38dd@g) (cons G38dd@g '(...))) G38db@g*) G38d7@lhs*) (append G38c8@p* G38d6@rhs*) (append (apply append (map (lambda (G38df@g) (cons G38df@g '(...))) G38db@g*)) G38d5@q))) (map (lambda (G38e1@x) (gensym)) G38c8@p*)) (call-with-values (lambda () (G3863@quasi G38c8@p* (- G387c@lev '1))) (lambda (G38e6@G38e3 G38e7@G38e4 G38e8@G38e5) ((lambda (G38ec@p* G38ed@rhs2* G38ee@lhs2*) (values (append G38ee@lhs2* G38d7@lhs*) (append G38ed@rhs2* G38d6@rhs*) (cons (cons 'unsyntax-splicing G38ec@p*) G38d5@q))) G38e8@G38e5 G38e7@G38e4 G38e6@G38e3))))) G38d1@G38ce G38d0@G38cd G38cf@G38cc)))) G38c6@ls/false) ((lambda (G38f2@t) ((lambda (G38f4@ls/false) (if (if G38f4@ls/false (begin '#f (apply (lambda () (= G387c@lev '0)) G38f4@ls/false)) '#f) (apply (lambda () (G30af@syntax-violation '#f '"incorrect use of unsyntax-splicing" G387b@p)) G38f4@ls/false) ((lambda (G38f6@t) ((lambda (G38f8@ls/false) (if G38f8@ls/false (apply (lambda (G38fa@p) (call-with-values (lambda () (G3863@quasi G38fa@p (+ G387c@lev '1))) (lambda (G38ff@G38fc G3900@G38fd G3901@G38fe) ((lambda (G3905@p G3906@rhs* G3907@lhs*) (values G3907@lhs* G3906@rhs* (list 'quasisyntax G3905@p))) G3901@G38fe G3900@G38fd G38ff@G38fc)))) G38f8@ls/false) ((lambda (G390b@t) ((lambda (G390d@ls/false) (if G390d@ls/false (apply (lambda (G390f@p G3910@q) (call-with-values (lambda () (G3863@quasi G390f@p G387c@lev)) (lambda (G3919@G3913 G391a@G3914 G391b@G3915) (call-with-values (lambda () (G3863@quasi G3910@q G387c@lev)) (lambda (G391f@G3916 G3920@G3917 G3921@G3918) ((lambda (G3925@q G3926@rhs2* G3927@lhs2* G3928@p G3929@rhs* G392a@lhs*) (values (append G3927@lhs2* G392a@lhs*) (append G3926@rhs2* G3929@rhs*) (cons G3928@p G3925@q))) G3921@G3918 G3920@G3917 G391f@G3916 G391b@G3915 G391a@G3914 G3919@G3913)))))) G390d@ls/false) ((lambda (G3931@t) ((lambda (G3933@ls/false) (if G3933@ls/false (apply (lambda (G3935@x*) (call-with-values (lambda () (G3863@quasi G3935@x* G387c@lev)) (lambda (G393a@G3937 G393b@G3938 G393c@G3939) ((lambda (G3940@x* G3941@rhs* G3942@lhs*) (values G3942@lhs* G3941@rhs* (list->vector G3940@x*))) G393c@G3939 G393b@G3938 G393a@G3937)))) G3933@ls/false) ((lambda (G3946@t) ((lambda (G3948@ls/false) (if G3948@ls/false (apply (lambda () (values '() '() G387b@p)) G3948@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3946@t))) (G2fc2@syntax-dispatch G3946@t '_))) G3931@t))) (G2fc2@syntax-dispatch G3931@t '#(vector each-any)))) G390b@t))) (G2fc2@syntax-dispatch G390b@t '(any . any)))) G38f6@t))) (G2fc2@syntax-dispatch G38f6@t '(#(scheme-id quasisyntax) any)))) G38f2@t))) (G2fc2@syntax-dispatch G38f2@t '#(scheme-id unsyntax-splicing)))) G38c4@t))) (G2fc2@syntax-dispatch G38c4@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G389a@t))) (G2fc2@syntax-dispatch G389a@t '((#(scheme-id unsyntax) . each-any) . any)))) G3896@t))) (G2fc2@syntax-dispatch G3896@t '#(scheme-id unsyntax)))) G387f@t))) (G2fc2@syntax-dispatch G387f@t '(#(scheme-id unsyntax) any)))) G387b@p))) (lambda (G3864@x) ((lambda (G3866@t) ((lambda (G3868@ls/false) (if G3868@ls/false (apply (lambda (G386a@e) (call-with-values (lambda () (G3863@quasi G386a@e '0)) (lambda (G386f@G386c G3870@G386d G3871@G386e) ((lambda (G3875@v G3876@rhs* G3877@lhs*) (G2f78@bless (list 'syntax-case (cons 'list G3876@rhs*) '() (list G3877@lhs* (list 'syntax G3875@v))))) G3871@G386e G3870@G386d G386f@G386c)))) G3868@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3866@t))) (G2fc2@syntax-dispatch G3866@t '(_ any)))) G3864@x)))) '#f)))) (set! G2fb4@define-struct-macro (lambda (G394a@stx) (G30af@syntax-violation '#f '"define-struct not supported" G394a@stx))) (set! G2fb6@define-record-type-macro (lambda (G394c@x) ((lambda (G394f@id G3951@get-record-name G3953@get-record-constructor-name G3955@get-record-predicate-name G3957@get-clause G3959@foo-rtd-code G395b@parent-rtd-code G395d@parent-rcd-code G395f@foo-rcd-code G3961@get-protocol-code G3963@get-fields G3965@get-mutator-indices G3967@get-mutators G3969@get-accessors G396b@enumerate G396d@do-define-record G396f@verify-clauses) (begin (set! G394f@id (lambda (G3b46@ctxt . G3b48@str*) (G30b3@datum->syntax G3b46@ctxt (string->symbol (apply string-append (map (lambda (G3b4a@x) (if (symbol? G3b4a@x) (symbol->string G3b4a@x) (if (string? G3b4a@x) G3b4a@x (assertion-violation 'define-record-type '"BUG")))) G3b48@str*)))))) (set! G3951@get-record-name (lambda (G3b34@spec) ((lambda (G3b36@t) ((lambda (G3b38@ls/false) (if G3b38@ls/false (apply (lambda (G3b3a@foo G3b3b@make-foo G3b3c@foo?) G3b3a@foo) G3b38@ls/false) ((lambda (G3b40@t) ((lambda (G3b42@ls/false) (if G3b42@ls/false (apply (lambda (G3b44@foo) G3b44@foo) G3b42@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3b40@t))) (G2fc2@syntax-dispatch G3b40@t 'any))) G3b36@t))) (G2fc2@syntax-dispatch G3b36@t '(any any any)))) G3b34@spec))) (set! G3953@get-record-constructor-name (lambda (G3b20@spec) ((lambda (G3b22@t) ((lambda (G3b24@ls/false) (if G3b24@ls/false (apply (lambda (G3b26@foo G3b27@make-foo G3b28@foo?) G3b27@make-foo) G3b24@ls/false) ((lambda (G3b2c@t) ((lambda (G3b2e@ls/false) (if (if G3b2e@ls/false (begin '#f (apply (lambda (G3b30@foo) (G2dc5@id? G3b30@foo)) G3b2e@ls/false)) '#f) (apply (lambda (G3b32@foo) (G394f@id G3b32@foo '"make-" (G2ddb@stx->datum G3b32@foo))) G3b2e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3b2c@t))) (G2fc2@syntax-dispatch G3b2c@t 'any))) G3b22@t))) (G2fc2@syntax-dispatch G3b22@t '(any any any)))) G3b20@spec))) (set! G3955@get-record-predicate-name (lambda (G3b0c@spec) ((lambda (G3b0e@t) ((lambda (G3b10@ls/false) (if G3b10@ls/false (apply (lambda (G3b12@foo G3b13@make-foo G3b14@foo?) G3b14@foo?) G3b10@ls/false) ((lambda (G3b18@t) ((lambda (G3b1a@ls/false) (if (if G3b1a@ls/false (begin '#f (apply (lambda (G3b1c@foo) (G2dc5@id? G3b1c@foo)) G3b1a@ls/false)) '#f) (apply (lambda (G3b1e@foo) (G394f@id G3b1e@foo (G2ddb@stx->datum G3b1e@foo) '"?")) G3b1a@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3b18@t))) (G2fc2@syntax-dispatch G3b18@t 'any))) G3b0e@t))) (G2fc2@syntax-dispatch G3b0e@t '(any any any)))) G3b0c@spec))) (set! G3957@get-clause (lambda (G3afa@id G3afb@ls) ((lambda (G3afe@t) ((lambda (G3b00@ls/false) (if G3b00@ls/false (apply (lambda () '#f) G3b00@ls/false) ((lambda (G3b02@t) ((lambda (G3b04@ls/false) (if G3b04@ls/false (apply (lambda (G3b06@x G3b07@rest G3b08@ls) (if (G2dcd@free-id=? (G2f78@bless G3afa@id) G3b06@x) (cons G3b06@x G3b07@rest) (G3957@get-clause G3afa@id G3b08@ls))) G3b04@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3b02@t))) (G2fc2@syntax-dispatch G3b02@t '((any . any) . any)))) G3afe@t))) (G2fc2@syntax-dispatch G3afe@t '()))) G3afb@ls))) (set! G3959@foo-rtd-code (lambda (G3aa8@name G3aa9@clause* G3aaa@parent-rtd-code) ((lambda (G3aaf@convert-field-spec*) (begin (set! G3aaf@convert-field-spec* (lambda (G3ae0@ls) (list->vector (map (lambda (G3ae2@x) ((lambda (G3ae4@t) ((lambda (G3ae6@ls/false) (if G3ae6@ls/false (apply (lambda (G3ae8@name G3ae9@rest) (list 'mutable G3ae8@name)) G3ae6@ls/false) ((lambda (G3aec@t) ((lambda (G3aee@ls/false) (if G3aee@ls/false (apply (lambda (G3af0@name G3af1@rest) (list 'immutable G3af0@name)) G3aee@ls/false) ((lambda (G3af4@t) ((lambda (G3af6@ls/false) (if G3af6@ls/false (apply (lambda (G3af8@name) (list 'immutable G3af8@name)) G3af6@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3af4@t))) (G2fc2@syntax-dispatch G3af4@t 'any))) G3aec@t))) (G2fc2@syntax-dispatch G3aec@t '(#(scheme-id immutable) any . any)))) G3ae4@t))) (G2fc2@syntax-dispatch G3ae4@t '(#(scheme-id mutable) any . any)))) G3ae2@x)) G3ae0@ls)))) ((lambda (G3ab0@uid-code G3ab1@sealed? G3ab2@opaque? G3ab3@fields) (G2f78@bless (list 'make-record-type-descriptor (list 'quote G3aa8@name) G3aaa@parent-rtd-code G3ab0@uid-code G3ab1@sealed? G3ab2@opaque? G3ab3@fields))) ((lambda (G3ab8@t) ((lambda (G3aba@ls/false) (if G3aba@ls/false (apply (lambda () (list 'quote (gensym))) G3aba@ls/false) ((lambda (G3abc@t) ((lambda (G3abe@ls/false) (if G3abe@ls/false (apply (lambda (G3ac0@uid) (list 'quote G3ac0@uid)) G3abe@ls/false) ((lambda (G3ac2@t) ((lambda (G3ac4@ls/false) (if G3ac4@ls/false (apply (lambda () '#f) G3ac4@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3ac2@t))) (G2fc2@syntax-dispatch G3ac2@t '_))) G3abc@t))) (G2fc2@syntax-dispatch G3abc@t '(_ any)))) G3ab8@t))) (G2fc2@syntax-dispatch G3ab8@t '(_)))) (G3957@get-clause 'nongenerative G3aa9@clause*)) ((lambda (G3ac6@t) ((lambda (G3ac8@ls/false) (if G3ac8@ls/false (apply (lambda () '#t) G3ac8@ls/false) ((lambda (G3aca@t) ((lambda (G3acc@ls/false) (if G3acc@ls/false (apply (lambda () '#f) G3acc@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3aca@t))) (G2fc2@syntax-dispatch G3aca@t '_))) G3ac6@t))) (G2fc2@syntax-dispatch G3ac6@t '(_ #(atom #t))))) (G3957@get-clause 'sealed G3aa9@clause*)) ((lambda (G3ace@t) ((lambda (G3ad0@ls/false) (if G3ad0@ls/false (apply (lambda () '#t) G3ad0@ls/false) ((lambda (G3ad2@t) ((lambda (G3ad4@ls/false) (if G3ad4@ls/false (apply (lambda () '#f) G3ad4@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3ad2@t))) (G2fc2@syntax-dispatch G3ad2@t '_))) G3ace@t))) (G2fc2@syntax-dispatch G3ace@t '(_ #(atom #t))))) (G3957@get-clause 'opaque G3aa9@clause*)) ((lambda (G3ad6@t) ((lambda (G3ad8@ls/false) (if G3ad8@ls/false (apply (lambda (G3ada@field-spec*) (list 'quote (G3aaf@convert-field-spec* G3ada@field-spec*))) G3ad8@ls/false) ((lambda (G3adc@t) ((lambda (G3ade@ls/false) (if G3ade@ls/false (apply (lambda () ''#()) G3ade@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3adc@t))) (G2fc2@syntax-dispatch G3adc@t '_))) G3ad6@t))) (G2fc2@syntax-dispatch G3ad6@t '(_ . each-any)))) (G3957@get-clause 'fields G3aa9@clause*))))) '#f))) (set! G395b@parent-rtd-code (lambda (G3a90@clause*) ((lambda (G3a92@t) ((lambda (G3a94@ls/false) (if G3a94@ls/false (apply (lambda (G3a96@name) (list 'record-type-descriptor G3a96@name)) G3a94@ls/false) ((lambda (G3a98@t) ((lambda (G3a9a@ls/false) (if G3a9a@ls/false (apply (lambda () ((lambda (G3a9c@t) ((lambda (G3a9e@ls/false) (if G3a9e@ls/false (apply (lambda (G3aa0@rtd G3aa1@rcd) G3aa0@rtd) G3a9e@ls/false) ((lambda (G3aa4@t) ((lambda (G3aa6@ls/false) (if G3aa6@ls/false (apply (lambda () '#f) G3aa6@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3aa4@t))) (G2fc2@syntax-dispatch G3aa4@t '#(atom #f)))) G3a9c@t))) (G2fc2@syntax-dispatch G3a9c@t '(_ any any)))) (G3957@get-clause 'parent-rtd G3a90@clause*))) G3a9a@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3a98@t))) (G2fc2@syntax-dispatch G3a98@t '#(atom #f)))) G3a92@t))) (G2fc2@syntax-dispatch G3a92@t '(_ any)))) (G3957@get-clause 'parent G3a90@clause*)))) (set! G395d@parent-rcd-code (lambda (G3a78@clause*) ((lambda (G3a7a@t) ((lambda (G3a7c@ls/false) (if G3a7c@ls/false (apply (lambda (G3a7e@name) (list 'record-constructor-descriptor G3a7e@name)) G3a7c@ls/false) ((lambda (G3a80@t) ((lambda (G3a82@ls/false) (if G3a82@ls/false (apply (lambda () ((lambda (G3a84@t) ((lambda (G3a86@ls/false) (if G3a86@ls/false (apply (lambda (G3a88@rtd G3a89@rcd) G3a89@rcd) G3a86@ls/false) ((lambda (G3a8c@t) ((lambda (G3a8e@ls/false) (if G3a8e@ls/false (apply (lambda () '#f) G3a8e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3a8c@t))) (G2fc2@syntax-dispatch G3a8c@t '#(atom #f)))) G3a84@t))) (G2fc2@syntax-dispatch G3a84@t '(_ any any)))) (G3957@get-clause 'parent-rtd G3a78@clause*))) G3a82@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3a80@t))) (G2fc2@syntax-dispatch G3a80@t '#(atom #f)))) G3a7a@t))) (G2fc2@syntax-dispatch G3a7a@t '(_ any)))) (G3957@get-clause 'parent G3a78@clause*)))) (set! G395f@foo-rcd-code (lambda (G3a70@clause* G3a71@foo-rtd G3a72@protocol G3a73@parent-rcd-code) (list 'make-record-constructor-descriptor G3a71@foo-rtd G3a73@parent-rcd-code G3a72@protocol))) (set! G3961@get-protocol-code (lambda (G3a64@clause*) ((lambda (G3a66@t) ((lambda (G3a68@ls/false) (if G3a68@ls/false (apply (lambda (G3a6a@expr) G3a6a@expr) G3a68@ls/false) ((lambda (G3a6c@t) ((lambda (G3a6e@ls/false) (if G3a6e@ls/false (apply (lambda () '#f) G3a6e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3a6c@t))) (G2fc2@syntax-dispatch G3a6c@t '_))) G3a66@t))) (G2fc2@syntax-dispatch G3a66@t '(_ any)))) (G3957@get-clause 'protocol G3a64@clause*)))) (set! G3963@get-fields (lambda (G3a52@clause*) ((lambda (G3a54@t) ((lambda (G3a56@ls/false) (if G3a56@ls/false (apply (lambda () '()) G3a56@ls/false) ((lambda (G3a58@t) ((lambda (G3a5a@ls/false) (if G3a5a@ls/false (apply (lambda (G3a5c@f*) G3a5c@f*) G3a5a@ls/false) ((lambda (G3a5e@t) ((lambda (G3a60@ls/false) (if G3a60@ls/false (apply (lambda (G3a62@rest) (G3963@get-fields G3a62@rest)) G3a60@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3a5e@t))) (G2fc2@syntax-dispatch G3a5e@t '(_ . any)))) G3a58@t))) (G2fc2@syntax-dispatch G3a58@t '((#(scheme-id fields) . each-any) . _)))) G3a54@t))) (G2fc2@syntax-dispatch G3a54@t '()))) G3a52@clause*))) (set! G3965@get-mutator-indices (lambda (G3a3a@fields) ((letrec ((G3a3c@f (lambda (G3a3e@fields G3a3f@i) ((lambda (G3a42@t) ((lambda (G3a44@ls/false) (if G3a44@ls/false (apply (lambda () '()) G3a44@ls/false) ((lambda (G3a46@t) ((lambda (G3a48@ls/false) (if G3a48@ls/false (apply (lambda (G3a4a@rest) (cons G3a3f@i (G3a3c@f G3a4a@rest (+ G3a3f@i '1)))) G3a48@ls/false) ((lambda (G3a4c@t) ((lambda (G3a4e@ls/false) (if G3a4e@ls/false (apply (lambda (G3a50@rest) (G3a3c@f G3a50@rest (+ G3a3f@i '1))) G3a4e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3a4c@t))) (G2fc2@syntax-dispatch G3a4c@t '(_ . any)))) G3a46@t))) (G2fc2@syntax-dispatch G3a46@t '((#(scheme-id mutable) . _) . any)))) G3a42@t))) (G2fc2@syntax-dispatch G3a42@t '()))) G3a3e@fields)))) G3a3c@f) G3a3a@fields '0))) (set! G3967@get-mutators (lambda (G3a10@foo G3a11@fields) ((lambda (G3a15@gen-name) (begin (set! G3a15@gen-name (lambda (G3a38@x) (G30b3@datum->syntax G3a10@foo (string->symbol (string-append (symbol->string (G30b5@syntax->datum G3a10@foo)) '"-" (symbol->string (G30b5@syntax->datum G3a38@x)) '"-set!"))))) ((letrec ((G3a16@f (lambda (G3a18@fields) ((lambda (G3a1a@t) ((lambda (G3a1c@ls/false) (if G3a1c@ls/false (apply (lambda () '()) G3a1c@ls/false) ((lambda (G3a1e@t) ((lambda (G3a20@ls/false) (if G3a20@ls/false (apply (lambda (G3a22@name G3a23@accessor G3a24@mutator G3a25@rest) (cons G3a24@mutator (G3a16@f G3a25@rest))) G3a20@ls/false) ((lambda (G3a2a@t) ((lambda (G3a2c@ls/false) (if G3a2c@ls/false (apply (lambda (G3a2e@name G3a2f@rest) (cons (G3a15@gen-name G3a2e@name) (G3a16@f G3a2f@rest))) G3a2c@ls/false) ((lambda (G3a32@t) ((lambda (G3a34@ls/false) (if G3a34@ls/false (apply (lambda (G3a36@rest) (G3a16@f G3a36@rest)) G3a34@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3a32@t))) (G2fc2@syntax-dispatch G3a32@t '(_ . any)))) G3a2a@t))) (G2fc2@syntax-dispatch G3a2a@t '((#(scheme-id mutable) any) . any)))) G3a1e@t))) (G2fc2@syntax-dispatch G3a1e@t '((#(scheme-id mutable) any any any) . any)))) G3a1a@t))) (G2fc2@syntax-dispatch G3a1a@t '()))) G3a18@fields)))) G3a16@f) G3a11@fields))) '#f))) (set! G3969@get-accessors (lambda (G39cc@foo G39cd@fields) ((lambda (G39d1@gen-name) (begin (set! G39d1@gen-name (lambda (G3a0e@x) (G30b3@datum->syntax G39cc@foo (string->symbol (string-append (symbol->string (G30b5@syntax->datum G39cc@foo)) '"-" (symbol->string (G30b5@syntax->datum G3a0e@x))))))) (map (lambda (G39d2@field) ((lambda (G39d4@t) ((lambda (G39d6@ls/false) (if (if G39d6@ls/false (begin '#f (apply (lambda (G39d8@name G39d9@accessor G39da@mutator) (G2dc5@id? G39d9@accessor)) G39d6@ls/false)) '#f) (apply (lambda (G39de@name G39df@accessor G39e0@mutator) G39df@accessor) G39d6@ls/false) ((lambda (G39e4@t) ((lambda (G39e6@ls/false) (if (if G39e6@ls/false (begin '#f (apply (lambda (G39e8@name G39e9@accessor) (G2dc5@id? G39e9@accessor)) G39e6@ls/false)) '#f) (apply (lambda (G39ec@name G39ed@accessor) G39ed@accessor) G39e6@ls/false) ((lambda (G39f0@t) ((lambda (G39f2@ls/false) (if (if G39f2@ls/false (begin '#f (apply (lambda (G39f4@name) (G2dc5@id? G39f4@name)) G39f2@ls/false)) '#f) (apply (lambda (G39f6@name) (G39d1@gen-name G39f6@name)) G39f2@ls/false) ((lambda (G39f8@t) ((lambda (G39fa@ls/false) (if (if G39fa@ls/false (begin '#f (apply (lambda (G39fc@name) (G2dc5@id? G39fc@name)) G39fa@ls/false)) '#f) (apply (lambda (G39fe@name) (G39d1@gen-name G39fe@name)) G39fa@ls/false) ((lambda (G3a00@t) ((lambda (G3a02@ls/false) (if (if G3a02@ls/false (begin '#f (apply (lambda (G3a04@name) (G2dc5@id? G3a04@name)) G3a02@ls/false)) '#f) (apply (lambda (G3a06@name) (G39d1@gen-name G3a06@name)) G3a02@ls/false) ((lambda (G3a08@t) ((lambda (G3a0a@ls/false) (if G3a0a@ls/false (apply (lambda (G3a0c@others) (G30af@syntax-violation '#f '"invalid field spec" G39d2@field)) G3a0a@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3a08@t))) (G2fc2@syntax-dispatch G3a08@t 'any))) G3a00@t))) (G2fc2@syntax-dispatch G3a00@t 'any))) G39f8@t))) (G2fc2@syntax-dispatch G39f8@t '(#(scheme-id immutable) any)))) G39f0@t))) (G2fc2@syntax-dispatch G39f0@t '(#(scheme-id mutable) any)))) G39e4@t))) (G2fc2@syntax-dispatch G39e4@t '(#(scheme-id immutable) any any)))) G39d4@t))) (G2fc2@syntax-dispatch G39d4@t '(#(scheme-id mutable) any any any)))) G39d2@field)) G39cd@fields))) '#f))) (set! G396b@enumerate (lambda (G39c4@ls) ((letrec ((G39c6@f (lambda (G39c8@ls G39c9@i) (if (null? G39c8@ls) '() (cons G39c9@i (G39c6@f (cdr G39c8@ls) (+ G39c9@i '1))))))) G39c6@f) G39c4@ls '0))) (set! G396d@do-define-record (lambda (G399c@namespec G399d@clause*) ((lambda (G39a0@foo) ((lambda (G39a2@foo-rtd) ((lambda (G39a4@foo-rcd) ((lambda (G39a6@protocol) ((lambda (G39a8@make-foo) ((lambda (G39aa@fields) ((lambda (G39ac@idx*) ((lambda (G39ae@foo-x*) ((lambda (G39b0@set-foo-x!*) ((lambda (G39b2@set-foo-idx*) ((lambda (G39b4@foo?) ((lambda (G39b6@foo-rtd-code) ((lambda (G39b8@foo-rcd-code) ((lambda (G39ba@protocol-code) ((lambda () (G2f78@bless (cons 'begin (cons (list 'define G39a2@foo-rtd G39b6@foo-rtd-code) (cons (list 'define G39a6@protocol G39ba@protocol-code) (cons (list 'define G39a4@foo-rcd G39b8@foo-rcd-code) (cons (list 'define-syntax G39a0@foo (list 'list ''$rtd (list 'syntax G39a2@foo-rtd) (list 'syntax G39a4@foo-rcd))) (cons (list 'define G39b4@foo? (list 'record-predicate G39a2@foo-rtd)) (cons (list 'define G39a8@make-foo (list 'record-constructor G39a4@foo-rcd)) (append (map (lambda (G39bc@foo-x G39bd@idx) (list 'define G39bc@foo-x (list 'record-accessor G39a2@foo-rtd G39bd@idx))) G39ae@foo-x* G39ac@idx*) (map (lambda (G39c0@set-foo-x! G39c1@idx) (list 'define G39c0@set-foo-x! (list 'record-mutator G39a2@foo-rtd G39c1@idx))) G39b0@set-foo-x!* G39b2@set-foo-idx*))))))))))))) (G3961@get-protocol-code G399d@clause*))) (G395f@foo-rcd-code G399d@clause* G39a2@foo-rtd G39a6@protocol (G395d@parent-rcd-code G399d@clause*)))) (G3959@foo-rtd-code G39a0@foo G399d@clause* (G395b@parent-rtd-code G399d@clause*)))) (G3955@get-record-predicate-name G399c@namespec))) (G3965@get-mutator-indices G39aa@fields))) (G3967@get-mutators G39a0@foo G39aa@fields))) (G3969@get-accessors G39a0@foo G39aa@fields))) (G396b@enumerate G39aa@fields))) (G3963@get-fields G399d@clause*))) (G3953@get-record-constructor-name G399c@namespec))) (gensym))) (gensym))) (gensym))) (G3951@get-record-name G399c@namespec)))) (set! G396f@verify-clauses (lambda (G3978@x G3979@cls*) ((lambda (G397d@valid-kwds G397f@free-id-member?) (begin (set! G397d@valid-kwds (map G2f78@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G397f@free-id-member? (lambda (G3996@x G3997@ls) (if (pair? G3997@ls) (begin '#f ((lambda (G399a@t) (if G399a@t G399a@t (begin '#f (G397f@free-id-member? G3996@x (cdr G3997@ls))))) (G2dcd@free-id=? G3996@x (car G3997@ls)))) '#f))) ((letrec ((G3980@f (lambda (G3982@cls* G3983@seen*) (if (not (null? G3982@cls*)) ((lambda (G3986@t) ((lambda (G3988@ls/false) (if G3988@ls/false (apply (lambda (G398a@kwd G398b@rest) (if ((lambda (G398e@t) (if G398e@t G398e@t (begin '#f (not (G397f@free-id-member? G398a@kwd G397d@valid-kwds))))) (not (G2dc5@id? G398a@kwd))) (G30af@syntax-violation '#f '"not a valid define-record-type keyword" G398a@kwd) (if (G2dd3@bound-id-member? G398a@kwd G3983@seen*) (G30af@syntax-violation '#f '"duplicate use of keyword " G3978@x G398a@kwd) (G3980@f (cdr G3982@cls*) (cons G398a@kwd G3983@seen*))))) G3988@ls/false) ((lambda (G3990@t) ((lambda (G3992@ls/false) (if G3992@ls/false (apply (lambda (G3994@cls) (G30af@syntax-violation '#f '"malformed define-record-type clause" G3994@cls)) G3992@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3990@t))) (G2fc2@syntax-dispatch G3990@t 'any))) G3986@t))) (G2fc2@syntax-dispatch G3986@t '(any . any)))) (car G3982@cls*)) (void))))) G3980@f) G3979@cls* '()))) '#f '#f))) ((lambda (G3970@t) ((lambda (G3972@ls/false) (if G3972@ls/false (apply (lambda (G3974@namespec G3975@clause*) (begin (G396f@verify-clauses G394c@x G3975@clause*) (G396d@do-define-record G3974@namespec G3975@clause*))) G3972@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3970@t))) (G2fc2@syntax-dispatch G3970@t '(_ any . each-any)))) G394c@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2fb8@define-condition-type-macro (lambda (G3b4c@x) ((lambda (G3b4f@mkname) (begin (set! G3b4f@mkname (lambda (G3b7c@name G3b7d@suffix) (G30b3@datum->syntax G3b7c@name (string->symbol (string-append (symbol->string (G30b5@syntax->datum G3b7c@name)) G3b7d@suffix))))) ((lambda (G3b50@t) ((lambda (G3b52@ls/false) (if (if G3b52@ls/false (begin '#f (apply (lambda (G3b54@ctxt G3b55@name G3b56@super G3b57@constructor G3b58@predicate G3b59@field* G3b5a@accessor*) (if (G2dc5@id? G3b55@name) (if (G2dc5@id? G3b56@super) (if (G2dc5@id? G3b57@constructor) (if (G2dc5@id? G3b58@predicate) (if (for-all G2dc5@id? G3b59@field*) (begin '#f (for-all G2dc5@id? G3b5a@accessor*)) '#f) '#f) '#f) '#f) '#f)) G3b52@ls/false)) '#f) (apply (lambda (G3b62@ctxt G3b63@name G3b64@super G3b65@constructor G3b66@predicate G3b67@field* G3b68@accessor*) ((lambda (G3b70@aux-accessor*) (G2f78@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3b63@name G3b65@constructor (gensym)) (cons (list 'parent G3b64@super) (cons (cons 'fields (map (lambda (G3b72@field G3b73@aux) (list 'immutable G3b72@field G3b73@aux)) G3b67@field* G3b70@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3b66@predicate (list 'condition-predicate (list 'record-type-descriptor G3b63@name))) (map (lambda (G3b76@accessor G3b77@aux) (list 'define G3b76@accessor (list 'condition-accessor (list 'record-type-descriptor G3b63@name) G3b77@aux))) G3b68@accessor* G3b70@aux-accessor*)))))) (map (lambda (G3b7a@x) (gensym)) G3b68@accessor*))) G3b52@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3b50@t))) (G2fc2@syntax-dispatch G3b50@t '(any any any any any . #(each (any any)))))) G3b4c@x))) '#f))) (set! G2fba@incorrect-usage-macro (lambda (G3b80@e) (G30af@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b80@e))) (set! G2fbc@parameterize-macro (lambda (G3b82@e) ((lambda (G3b84@t) ((lambda (G3b86@ls/false) (if G3b86@ls/false (apply (lambda (G3b88@b G3b89@b*) (G2f78@bless (cons 'let (cons '() (cons G3b88@b G3b89@b*))))) G3b86@ls/false) ((lambda (G3b8c@t) ((lambda (G3b8e@ls/false) (if G3b8e@ls/false (apply (lambda (G3b90@olhs* G3b91@orhs* G3b92@b G3b93@b*) ((lambda (G3b98@lhs* G3b99@rhs*) (G2f78@bless (cons (list 'lambda (append G3b98@lhs* G3b99@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b9c@lhs G3b9d@rhs) (list 'let (list (list 't (list G3b9c@lhs))) (list G3b9c@lhs G3b9d@rhs) (cons 'set! (cons G3b9d@rhs '(t))))) G3b98@lhs* G3b99@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b92@b G3b93@b*))) '(swap)))))) (append G3b90@olhs* G3b91@orhs*)))) (G309b@generate-temporaries G3b90@olhs*) (G309b@generate-temporaries G3b91@orhs*))) G3b8e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3b8c@t))) (G2fc2@syntax-dispatch G3b8c@t '(_ #(each (any any)) any . each-any)))) G3b84@t))) (G2fc2@syntax-dispatch G3b84@t '(_ () any . each-any)))) G3b82@e))) (set! G2fbe@foreign-call-transformer (lambda (G3ba0@e G3ba1@r G3ba2@mr) ((lambda (G3ba6@t) ((lambda (G3ba8@ls/false) (if G3ba8@ls/false (apply (lambda (G3baa@name G3bab@arg*) (cons 'foreign-call (cons (G2fe6@chi-expr G3baa@name G3ba1@r G3ba2@mr) (G2fe2@chi-expr* G3bab@arg* G3ba1@r G3ba2@mr)))) G3ba8@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3ba6@t))) (G2fc2@syntax-dispatch G3ba6@t '(_ any . each-any)))) G3ba0@e))) (set! G2fc0@convert-pattern (lambda (G3bae@pattern G3baf@keys) ((lambda (G3bb3@cvt* G3bb5@cvt) (begin (set! G3bb3@cvt* (lambda (G3c44@p* G3c45@n G3c46@ids) (if (null? G3c44@p*) (values '() G3c46@ids) (call-with-values (lambda () (G3bb3@cvt* (cdr G3c44@p*) G3c45@n G3c46@ids)) (lambda (G3c4c@G3c4a G3c4d@G3c4b) ((lambda (G3c50@ids G3c51@y) (call-with-values (lambda () (G3bb5@cvt (car G3c44@p*) G3c45@n G3c50@ids)) (lambda (G3c56@G3c54 G3c57@G3c55) ((lambda (G3c5a@ids G3c5b@x) (values (cons G3c5b@x G3c51@y) G3c5a@ids)) G3c57@G3c55 G3c56@G3c54)))) G3c4d@G3c4b G3c4c@G3c4a)))))) (set! G3bb5@cvt (lambda (G3bb6@p G3bb7@n G3bb8@ids) ((lambda (G3bbc@t) ((lambda (G3bbe@ls/false) (if (if G3bbe@ls/false (begin '#f (apply (lambda (G3bc0@id) (G2dc5@id? G3bc0@id)) G3bbe@ls/false)) '#f) (apply (lambda (G3bc2@id) (if (G2dd3@bound-id-member? G3bb6@p G3baf@keys) (values (vector 'free-id G3bb6@p) G3bb8@ids) (if (G2dcd@free-id=? G3bb6@p (G2f50@scheme-stx '_)) (values '_ G3bb8@ids) (values 'any (cons (cons G3bb6@p G3bb7@n) G3bb8@ids))))) G3bbe@ls/false) ((lambda (G3bc4@t) ((lambda (G3bc6@ls/false) (if (if G3bc6@ls/false (begin '#f (apply (lambda (G3bc8@p G3bc9@dots) (G2fc4@ellipsis? G3bc9@dots)) G3bc6@ls/false)) '#f) (apply (lambda (G3bcc@p G3bcd@dots) (call-with-values (lambda () (G3bb5@cvt G3bcc@p (+ G3bb7@n '1) G3bb8@ids)) (lambda (G3bd2@G3bd0 G3bd3@G3bd1) ((lambda (G3bd6@ids G3bd7@p) (values (if (eq? G3bd7@p 'any) 'each-any (vector 'each G3bd7@p)) G3bd6@ids)) G3bd3@G3bd1 G3bd2@G3bd0)))) G3bc6@ls/false) ((lambda (G3bda@t) ((lambda (G3bdc@ls/false) (if (if G3bdc@ls/false (begin '#f (apply (lambda (G3bde@x G3bdf@dots G3be0@ys G3be1@z) (G2fc4@ellipsis? G3bdf@dots)) G3bdc@ls/false)) '#f) (apply (lambda (G3be6@x G3be7@dots G3be8@ys G3be9@z) (call-with-values (lambda () (G3bb5@cvt G3be9@z G3bb7@n G3bb8@ids)) (lambda (G3bf0@G3bee G3bf1@G3bef) ((lambda (G3bf4@ids G3bf5@z) (call-with-values (lambda () (G3bb3@cvt* G3be8@ys G3bb7@n G3bf4@ids)) (lambda (G3bfa@G3bf8 G3bfb@G3bf9) ((lambda (G3bfe@ids G3bff@ys) (call-with-values (lambda () (G3bb5@cvt G3be6@x (+ G3bb7@n '1) G3bfe@ids)) (lambda (G3c04@G3c02 G3c05@G3c03) ((lambda (G3c08@ids G3c09@x) (values (vector 'each+ G3c09@x (reverse G3bff@ys) G3bf5@z) G3c08@ids)) G3c05@G3c03 G3c04@G3c02)))) G3bfb@G3bf9 G3bfa@G3bf8)))) G3bf1@G3bef G3bf0@G3bee)))) G3bdc@ls/false) ((lambda (G3c0c@t) ((lambda (G3c0e@ls/false) (if G3c0e@ls/false (apply (lambda (G3c10@x G3c11@y) (call-with-values (lambda () (G3bb5@cvt G3c11@y G3bb7@n G3bb8@ids)) (lambda (G3c16@G3c14 G3c17@G3c15) ((lambda (G3c1a@ids G3c1b@y) (call-with-values (lambda () (G3bb5@cvt G3c10@x G3bb7@n G3c1a@ids)) (lambda (G3c20@G3c1e G3c21@G3c1f) ((lambda (G3c24@ids G3c25@x) (values (cons G3c25@x G3c1b@y) G3c24@ids)) G3c21@G3c1f G3c20@G3c1e)))) G3c17@G3c15 G3c16@G3c14)))) G3c0e@ls/false) ((lambda (G3c28@t) ((lambda (G3c2a@ls/false) (if G3c2a@ls/false (apply (lambda () (values '() G3bb8@ids)) G3c2a@ls/false) ((lambda (G3c2c@t) ((lambda (G3c2e@ls/false) (if (if G3c2e@ls/false (begin '#f (apply (lambda (G3c30@p) (not (G2d8d@stx? G3c30@p))) G3c2e@ls/false)) '#f) (apply (lambda (G3c32@p) (call-with-values (lambda () (G3bb5@cvt G3c32@p G3bb7@n G3bb8@ids)) (lambda (G3c36@G3c34 G3c37@G3c35) ((lambda (G3c3a@ids G3c3b@p) (values (vector 'vector G3c3b@p) G3c3a@ids)) G3c37@G3c35 G3c36@G3c34)))) G3c2e@ls/false) ((lambda (G3c3e@t) ((lambda (G3c40@ls/false) (if G3c40@ls/false (apply (lambda (G3c42@datum) (values (vector 'atom (G2ddb@stx->datum G3c42@datum)) G3bb8@ids)) G3c40@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3c3e@t))) (G2fc2@syntax-dispatch G3c3e@t 'any))) G3c2c@t))) (G2fc2@syntax-dispatch G3c2c@t '#(vector each-any)))) G3c28@t))) (G2fc2@syntax-dispatch G3c28@t '()))) G3c0c@t))) (G2fc2@syntax-dispatch G3c0c@t '(any . any)))) G3bda@t))) (G2fc2@syntax-dispatch G3bda@t '(any any . #(each+ any () any))))) G3bc4@t))) (G2fc2@syntax-dispatch G3bc4@t '(any any)))) G3bbc@t))) (G2fc2@syntax-dispatch G3bbc@t 'any))) G3bb6@p))) (G3bb5@cvt G3bae@pattern '0 '()))) '#f '#f))) (set! G2fc2@syntax-dispatch ((lambda () ((lambda (G3c5f@stx^ G3c61@match-each G3c63@match-each+ G3c65@match-each-any G3c67@match-empty G3c69@combine G3c6b@match* G3c6d@match) (begin (set! G3c5f@stx^ (lambda (G3d28@e G3d29@m* G3d2a@s* G3d2b@ae*) (if (if (null? G3d29@m*) (if (null? G3d2a@s*) (begin '#f (null? G3d2b@ae*)) '#f) '#f) G3d28@e (G2dad@mkstx G3d28@e G3d29@m* G3d2a@s* G3d2b@ae*)))) (set! G3c61@match-each (lambda (G3d0b@e G3d0c@p G3d0d@m* G3d0e@s* G3d0f@ae*) (if (pair? G3d0b@e) ((lambda (G3d15@first) (if G3d15@first (begin '#f ((lambda (G3d17@rest) (if G3d17@rest (begin '#f (cons G3d15@first G3d17@rest)) '#f)) (G3c61@match-each (cdr G3d0b@e) G3d0c@p G3d0d@m* G3d0e@s* G3d0f@ae*))) '#f)) (G3c6d@match (car G3d0b@e) G3d0c@p G3d0d@m* G3d0e@s* G3d0f@ae* '())) (if (null? G3d0b@e) '() (if (G2d8d@stx? G3d0b@e) (if (not (G2d3f@top-marked? G3d0d@m*)) (begin '#f (call-with-values (lambda () (G2dab@join-wraps G3d0d@m* G3d0e@s* G3d0f@ae* G3d0b@e)) (lambda (G3d1c@G3d19 G3d1d@G3d1a G3d1e@G3d1b) ((lambda (G3d22@ae* G3d23@s* G3d24@m*) (G3c61@match-each (G2d91@stx-expr G3d0b@e) G3d0c@p G3d24@m* G3d23@s* G3d22@ae*)) G3d1e@G3d1b G3d1d@G3d1a G3d1c@G3d19)))) '#f) (if (G295c@G288a@annotation? G3d0b@e) (G3c61@match-each (G295e@G288e@annotation-expression G3d0b@e) G3d0c@p G3d0d@m* G3d0e@s* G3d0f@ae*) '#f)))))) (set! G3c63@match-each+ (lambda (G3cd1@e G3cd2@x-pat G3cd3@y-pat G3cd4@z-pat G3cd5@m* G3cd6@s* G3cd7@ae* G3cd8@r) ((letrec ((G3ce1@f (lambda (G3ce3@e G3ce4@m* G3ce5@s* G3ce6@ae*) (if (pair? G3ce3@e) (call-with-values (lambda () (G3ce1@f (cdr G3ce3@e) G3ce4@m* G3ce5@s* G3ce6@ae*)) (lambda (G3cee@G3ceb G3cef@G3cec G3cf0@G3ced) ((lambda (G3cf4@r G3cf5@y-pat G3cf6@xr*) (if G3cf4@r (if (null? G3cf5@y-pat) ((lambda (G3cfa@xr) (if G3cfa@xr (values (cons G3cfa@xr G3cf6@xr*) G3cf5@y-pat G3cf4@r) (values '#f '#f '#f))) (G3c6d@match (car G3ce3@e) G3cd2@x-pat G3ce4@m* G3ce5@s* G3ce6@ae* '())) (values '() (cdr G3cf5@y-pat) (G3c6d@match (car G3ce3@e) (car G3cf5@y-pat) G3ce4@m* G3ce5@s* G3ce6@ae* G3cf4@r))) (values '#f '#f '#f))) G3cf0@G3ced G3cef@G3cec G3cee@G3ceb))) (if (G2d8d@stx? G3ce3@e) (if (G2d3f@top-marked? G3ce4@m*) (values '() G3cd3@y-pat (G3c6d@match G3ce3@e G3cd4@z-pat G3ce4@m* G3ce5@s* G3ce6@ae* G3cd8@r)) (call-with-values (lambda () (G2dab@join-wraps G3ce4@m* G3ce5@s* G3ce6@ae* G3ce3@e)) (lambda (G3cff@G3cfc G3d00@G3cfd G3d01@G3cfe) ((lambda (G3d05@ae* G3d06@s* G3d07@m*) (G3ce1@f (G2d91@stx-expr G3ce3@e) G3d07@m* G3d06@s* G3d05@ae*)) G3d01@G3cfe G3d00@G3cfd G3cff@G3cfc)))) (if (G295c@G288a@annotation? G3ce3@e) (G3ce1@f (G295e@G288e@annotation-expression G3ce3@e) G3ce4@m* G3ce5@s* G3ce6@ae*) (values '() G3cd3@y-pat (G3c6d@match G3ce3@e G3cd4@z-pat G3ce4@m* G3ce5@s* G3ce6@ae* G3cd8@r)))))))) G3ce1@f) G3cd1@e G3cd5@m* G3cd6@s* G3cd7@ae*))) (set! G3c65@match-each-any (lambda (G3cb8@e G3cb9@m* G3cba@s* G3cbb@ae*) (if (pair? G3cb8@e) ((lambda (G3cc0@l) (if G3cc0@l (begin '#f (cons (G3c5f@stx^ (car G3cb8@e) G3cb9@m* G3cba@s* G3cbb@ae*) G3cc0@l)) '#f)) (G3c65@match-each-any (cdr G3cb8@e) G3cb9@m* G3cba@s* G3cbb@ae*)) (if (null? G3cb8@e) '() (if (G2d8d@stx? G3cb8@e) (if (not (G2d3f@top-marked? G3cb9@m*)) (begin '#f (call-with-values (lambda () (G2dab@join-wraps G3cb9@m* G3cba@s* G3cbb@ae* G3cb8@e)) (lambda (G3cc5@G3cc2 G3cc6@G3cc3 G3cc7@G3cc4) ((lambda (G3ccb@ae* G3ccc@s* G3ccd@m*) (G3c65@match-each-any (G2d91@stx-expr G3cb8@e) G3ccd@m* G3ccc@s* G3ccb@ae*)) G3cc7@G3cc4 G3cc6@G3cc3 G3cc5@G3cc2)))) '#f) (if (G295c@G288a@annotation? G3cb8@e) (G3c65@match-each-any (G295e@G288e@annotation-expression G3cb8@e) G3cb9@m* G3cba@s* G3cbb@ae*) '#f)))))) (set! G3c67@match-empty (lambda (G3cb2@p G3cb3@r) (if (null? G3cb2@p) G3cb3@r (if (eq? G3cb2@p '_) G3cb3@r (if (eq? G3cb2@p 'any) (cons '() G3cb3@r) (if (pair? G3cb2@p) (G3c67@match-empty (car G3cb2@p) (G3c67@match-empty (cdr G3cb2@p) G3cb3@r)) (if (eq? G3cb2@p 'each-any) (cons '() G3cb3@r) ((lambda (G3cb6@t) (if (memv G3cb6@t '(each)) (G3c67@match-empty (vector-ref G3cb2@p '1) G3cb3@r) (if (memv G3cb6@t '(each+)) (G3c67@match-empty (vector-ref G3cb2@p '1) (G3c67@match-empty (reverse (vector-ref G3cb2@p '2)) (G3c67@match-empty (vector-ref G3cb2@p '3) G3cb3@r))) (if (memv G3cb6@t '(free-id atom)) G3cb3@r (if (memv G3cb6@t '(scheme-id atom)) G3cb3@r (if (memv G3cb6@t '(vector)) (G3c67@match-empty (vector-ref G3cb2@p '1) G3cb3@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3cb2@p))))))) (vector-ref G3cb2@p '0))))))))) (set! G3c69@combine (lambda (G3cae@r* G3caf@r) (if (null? (car G3cae@r*)) G3caf@r (cons (map car G3cae@r*) (G3c69@combine (map cdr G3cae@r*) G3caf@r))))) (set! G3c6b@match* (lambda (G3c8d@e G3c8e@p G3c8f@m* G3c90@s* G3c91@ae* G3c92@r) (if (null? G3c8e@p) (if (null? G3c8d@e) (begin '#f G3c92@r) '#f) (if (pair? G3c8e@p) (if (pair? G3c8d@e) (begin '#f (G3c6d@match (car G3c8d@e) (car G3c8e@p) G3c8f@m* G3c90@s* G3c91@ae* (G3c6d@match (cdr G3c8d@e) (cdr G3c8e@p) G3c8f@m* G3c90@s* G3c91@ae* G3c92@r))) '#f) (if (eq? G3c8e@p 'each-any) ((lambda (G3c99@l) (if G3c99@l (begin '#f (cons G3c99@l G3c92@r)) '#f)) (G3c65@match-each-any G3c8d@e G3c8f@m* G3c90@s* G3c91@ae*)) ((lambda (G3c9b@t) (if (memv G3c9b@t '(each)) (if (null? G3c8d@e) (G3c67@match-empty (vector-ref G3c8e@p '1) G3c92@r) ((lambda (G3c9d@r*) (if G3c9d@r* (begin '#f (G3c69@combine G3c9d@r* G3c92@r)) '#f)) (G3c61@match-each G3c8d@e (vector-ref G3c8e@p '1) G3c8f@m* G3c90@s* G3c91@ae*))) (if (memv G3c9b@t '(free-id)) (if (symbol? G3c8d@e) (if (G2d3f@top-marked? G3c8f@m*) (if (G2dcd@free-id=? (G3c5f@stx^ G3c8d@e G3c8f@m* G3c90@s* G3c91@ae*) (vector-ref G3c8e@p '1)) (begin '#f G3c92@r) '#f) '#f) '#f) (if (memv G3c9b@t '(scheme-id)) (if (symbol? G3c8d@e) (if (G2d3f@top-marked? G3c8f@m*) (if (G2dcd@free-id=? (G3c5f@stx^ G3c8d@e G3c8f@m* G3c90@s* G3c91@ae*) (G2f50@scheme-stx (vector-ref G3c8e@p '1))) (begin '#f G3c92@r) '#f) '#f) '#f) (if (memv G3c9b@t '(each+)) (call-with-values (lambda () (G3c63@match-each+ G3c8d@e (vector-ref G3c8e@p '1) (vector-ref G3c8e@p '2) (vector-ref G3c8e@p '3) G3c8f@m* G3c90@s* G3c91@ae* G3c92@r)) (lambda (G3ca2@G3c9f G3ca3@G3ca0 G3ca4@G3ca1) ((lambda (G3ca8@r G3ca9@y-pat G3caa@xr*) (if G3ca8@r (if (null? G3ca9@y-pat) (begin '#f (if (null? G3caa@xr*) (G3c67@match-empty (vector-ref G3c8e@p '1) G3ca8@r) (G3c69@combine G3caa@xr* G3ca8@r))) '#f) '#f)) G3ca4@G3ca1 G3ca3@G3ca0 G3ca2@G3c9f))) (if (memv G3c9b@t '(atom)) (if (equal? (vector-ref G3c8e@p '1) (G2dd9@strip G3c8d@e G3c8f@m*)) (begin '#f G3c92@r) '#f) (if (memv G3c9b@t '(vector)) (if (vector? G3c8d@e) (begin '#f (G3c6d@match (vector->list G3c8d@e) (vector-ref G3c8e@p '1) G3c8f@m* G3c90@s* G3c91@ae* G3c92@r)) '#f) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c8e@p)))))))) (vector-ref G3c8e@p '0))))))) (set! G3c6d@match (lambda (G3c72@e G3c73@p G3c74@m* G3c75@s* G3c76@ae* G3c77@r) (if (not G3c77@r) '#f (if (eq? G3c73@p '_) G3c77@r (if (eq? G3c73@p 'any) (cons (G3c5f@stx^ G3c72@e G3c74@m* G3c75@s* G3c76@ae*) G3c77@r) (if (G2d8d@stx? G3c72@e) (if (not (G2d3f@top-marked? G3c74@m*)) (begin '#f (call-with-values (lambda () (G2dab@join-wraps G3c74@m* G3c75@s* G3c76@ae* G3c72@e)) (lambda (G3c81@G3c7e G3c82@G3c7f G3c83@G3c80) ((lambda (G3c87@ae* G3c88@s* G3c89@m*) (G3c6d@match (G2d91@stx-expr G3c72@e) G3c73@p G3c89@m* G3c88@s* G3c87@ae* G3c77@r)) G3c83@G3c80 G3c82@G3c7f G3c81@G3c7e)))) '#f) (if (G295c@G288a@annotation? G3c72@e) (G3c6d@match (G295e@G288e@annotation-expression G3c72@e) G3c73@p G3c74@m* G3c75@s* G3c76@ae* G3c77@r) (G3c6b@match* G3c72@e G3c73@p G3c74@m* G3c75@s* G3c76@ae* G3c77@r)))))))) (lambda (G3c6e@e G3c6f@p) (G3c6d@match G3c6e@e G3c6f@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fc4@ellipsis? (lambda (G3d30@x) (if (G2dc5@id? G3d30@x) (begin '#f (G2dcd@free-id=? G3d30@x (G2f50@scheme-stx '...))) '#f))) (set! G2fc6@underscore? (lambda (G3d32@x) (if (G2dc5@id? G3d32@x) (begin '#f (G2dcd@free-id=? G3d32@x (G2f50@scheme-stx '_))) '#f))) (set! G2fc8@verify-literals (lambda (G3d34@lits G3d35@expr) (for-each (lambda (G3d38@x) (if ((lambda (G3d3a@t) (if G3d3a@t G3d3a@t ((lambda (G3d3c@t) (if G3d3c@t G3d3c@t (begin '#f (G2fc6@underscore? G3d38@x)))) (G2fc4@ellipsis? G3d38@x)))) (not (G2dc5@id? G3d38@x))) (G30af@syntax-violation '#f '"invalid literal" G3d35@expr G3d38@x) (void))) G3d34@lits))) (set! G2fca@syntax-case-transformer ((lambda () ((lambda (G3d3f@build-dispatch-call G3d41@invalid-ids-error G3d43@gen-clause G3d45@gen-syntax-case) (begin (set! G3d3f@build-dispatch-call (lambda (G3dae@pvars G3daf@expr G3db0@y G3db1@r G3db2@mr) ((lambda (G3db8@ids G3db9@levels) ((lambda (G3dbc@labels G3dbd@new-vars) ((lambda (G3dc0@body) (list '(primitive apply) (G2d21@G2c5f@build-lambda '#f G3dbd@new-vars G3dc0@body) G3db0@y)) (G2fe6@chi-expr (G2db1@add-subst (G2d80@make-full-rib G3db8@ids G3dbc@labels) G3daf@expr) (append (map (lambda (G3dc2@label G3dc3@var G3dc4@level) (cons G3dc2@label (G2de5@make-binding 'syntax (cons G3dc3@var G3dc4@level)))) G3dbc@labels G3dbd@new-vars (map cdr G3dae@pvars)) G3db1@r) G3db2@mr))) (map G2d45@gen-label G3db8@ids) (map G2d41@gen-lexical G3db8@ids))) (map car G3dae@pvars) (map cdr G3dae@pvars)))) (set! G3d41@invalid-ids-error (lambda (G3da2@id* G3da3@e G3da4@class) ((letrec ((G3da8@find (lambda (G3daa@id* G3dab@ok*) (if (null? G3daa@id*) (G30af@syntax-violation '#f '"invalid syntax" G3da3@e) (if (G2dc5@id? (car G3daa@id*)) (if (G2dd3@bound-id-member? (car G3daa@id*) G3dab@ok*) (G30a9@syntax-error (car G3daa@id*) '"duplicate " G3da4@class) (G3da8@find (cdr G3daa@id*) (cons (car G3daa@id*) G3dab@ok*))) (G30a9@syntax-error (car G3daa@id*) '"invalid " G3da4@class)))))) G3da8@find) G3da2@id* '()))) (set! G3d43@gen-clause (lambda (G3d7c@x G3d7d@keys G3d7e@clauses G3d7f@r G3d80@mr G3d81@pat G3d82@fender G3d83@expr) (call-with-values (lambda () (G2fc0@convert-pattern G3d81@pat G3d7d@keys)) (lambda (G3d8e@G3d8c G3d8f@G3d8d) ((lambda (G3d92@pvars G3d93@p) (if (not (G2dd1@distinct-bound-ids? (map car G3d92@pvars))) (G3d41@invalid-ids-error (map car G3d92@pvars) G3d81@pat '"pattern variable") (if (not (for-all (lambda (G3d96@x) (not (G2fc4@ellipsis? (car G3d96@x)))) G3d92@pvars)) (G30af@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d81@pat) ((lambda (G3d98@y) ((lambda (G3d9a@test) ((lambda (G3d9c@conseq) ((lambda (G3d9e@altern) (list (G2d21@G2c5f@build-lambda '#f (list G3d98@y) (list 'if G3d9a@test G3d9c@conseq G3d9e@altern)) (list '(primitive syntax-dispatch) G3d7c@x (list 'quote G3d93@p)))) (G3d45@gen-syntax-case G3d7c@x G3d7d@keys G3d7e@clauses G3d7f@r G3d80@mr))) (G3d3f@build-dispatch-call G3d92@pvars G3d83@expr G3d98@y G3d7f@r G3d80@mr))) (if (eq? G3d82@fender '#t) G3d98@y ((lambda (G3da0@call) (list 'if G3d98@y G3da0@call (list 'quote '#f))) (G3d3f@build-dispatch-call G3d92@pvars G3d82@fender G3d98@y G3d7f@r G3d80@mr))))) (G2d41@gen-lexical 'tmp))))) G3d8f@G3d8d G3d8e@G3d8c))))) (set! G3d45@gen-syntax-case (lambda (G3d5a@x G3d5b@keys G3d5c@clauses G3d5d@r G3d5e@mr) (if (null? G3d5c@clauses) (list '(primitive syntax-error) G3d5a@x) ((lambda (G3d64@t) ((lambda (G3d66@ls/false) (if G3d66@ls/false (apply (lambda (G3d68@pat G3d69@expr) (if (if (G2dc5@id? G3d68@pat) (if (not (G2dd3@bound-id-member? G3d68@pat G3d5b@keys)) (begin '#f (not (G2fc4@ellipsis? G3d68@pat))) '#f) '#f) (if (G2dcd@free-id=? G3d68@pat (G2f50@scheme-stx '_)) (G2fe6@chi-expr G3d69@expr G3d5d@r G3d5e@mr) ((lambda (G3d6c@lab G3d6d@lex) ((lambda (G3d70@body) (list (G2d21@G2c5f@build-lambda '#f (list G3d6d@lex) G3d70@body) G3d5a@x)) (G2fe6@chi-expr (G2db1@add-subst (G2d80@make-full-rib (list G3d68@pat) (list G3d6c@lab)) G3d69@expr) (cons (cons G3d6c@lab (G2de5@make-binding 'syntax (cons G3d6d@lex '0))) G3d5d@r) G3d5e@mr))) (G2d45@gen-label G3d68@pat) (G2d41@gen-lexical G3d68@pat))) (G3d43@gen-clause G3d5a@x G3d5b@keys (cdr G3d5c@clauses) G3d5d@r G3d5e@mr G3d68@pat '#t G3d69@expr))) G3d66@ls/false) ((lambda (G3d72@t) ((lambda (G3d74@ls/false) (if G3d74@ls/false (apply (lambda (G3d76@pat G3d77@fender G3d78@expr) (G3d43@gen-clause G3d5a@x G3d5b@keys (cdr G3d5c@clauses) G3d5d@r G3d5e@mr G3d76@pat G3d77@fender G3d78@expr)) G3d74@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3d72@t))) (G2fc2@syntax-dispatch G3d72@t '(any any any)))) G3d64@t))) (G2fc2@syntax-dispatch G3d64@t '(any any)))) (car G3d5c@clauses))))) (lambda (G3d46@e G3d47@r G3d48@mr) ((lambda (G3d4c@t) ((lambda (G3d4e@ls/false) (if G3d4e@ls/false (apply (lambda (G3d50@expr G3d51@keys G3d52@clauses) (begin (G2fc8@verify-literals G3d51@keys G3d46@e) ((lambda (G3d56@x) ((lambda (G3d58@body) (list (G2d21@G2c5f@build-lambda '#f (list G3d56@x) G3d58@body) (G2fe6@chi-expr G3d50@expr G3d47@r G3d48@mr))) (G3d45@gen-syntax-case G3d56@x G3d51@keys G3d52@clauses G3d47@r G3d48@mr))) (G2d41@gen-lexical 'tmp)))) G3d4e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3d4c@t))) (G2fc2@syntax-dispatch G3d4c@t '(_ any each-any . each-any)))) G3d46@e)))) '#f '#f '#f '#f)))) (set! G2fcc@ellipsis-map (lambda (G3dc8@proc G3dc9@ls . G3dcc@ls*) ((lambda (G3dcf@who) (begin (set! G3dcf@who '...) (begin (if (not (list? G3dc9@ls)) (assertion-violation G3dcf@who '"not a list" G3dc9@ls) (void)) (if (not (null? G3dcc@ls*)) ((lambda (G3dd0@n) (for-each (lambda (G3dd2@x) (begin (if (not (list? G3dd2@x)) (assertion-violation G3dcf@who '"not a list" G3dd2@x) (void)) (if (not (= (length G3dd2@x) G3dd0@n)) (assertion-violation G3dcf@who '"length mismatch" G3dc9@ls G3dd2@x) (void)))) G3dcc@ls*)) (length G3dc9@ls)) (void)) (apply map G3dc8@proc G3dc9@ls G3dcc@ls*)))) '#f))) (set! G2fce@syntax-transformer ((lambda () ((lambda (G3dd5@gen-syntax G3dd7@gen-ref G3dd9@gen-append G3ddb@gen-mappend G3ddd@gen-map G3ddf@gen-cons G3de1@gen-vector G3de3@regen) (begin (set! G3dd5@gen-syntax (lambda (G3e48@src G3e49@e G3e4a@r G3e4b@maps G3e4c@ellipsis? G3e4d@vec?) ((lambda (G3e54@t) ((lambda (G3e56@ls/false) (if (if G3e56@ls/false (begin '#f (apply (lambda (G3e58@dots) (G3e4c@ellipsis? G3e58@dots)) G3e56@ls/false)) '#f) (apply (lambda (G3e5a@dots) (G30af@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e48@src)) G3e56@ls/false) ((lambda (G3e5c@t) ((lambda (G3e5e@ls/false) (if (if G3e5e@ls/false (begin '#f (apply (lambda (G3e60@id) (G2dc5@id? G3e60@id)) G3e5e@ls/false)) '#f) (apply (lambda (G3e62@id) ((lambda (G3e64@label) ((lambda (G3e66@b) ((lambda () (if (eq? (G2de7@binding-type G3e66@b) 'syntax) (call-with-values (lambda () ((lambda (G3e6a@var.lev) (G3dd7@gen-ref G3e48@src (car G3e6a@var.lev) (cdr G3e6a@var.lev) G3e4b@maps)) (G2de9@binding-value G3e66@b))) (lambda (G3e6c@G3e68 G3e6d@G3e69) ((lambda (G3e70@maps G3e71@var) (values (list 'ref G3e71@var) G3e70@maps)) G3e6d@G3e69 G3e6c@G3e68))) (values (list 'quote G3e49@e) G3e4b@maps))))) (G2de3@label->binding G3e64@label G3e4a@r))) (G2ddf@id->label G3e49@e))) G3e5e@ls/false) ((lambda (G3e74@t) ((lambda (G3e76@ls/false) (if (if G3e76@ls/false (begin '#f (apply (lambda (G3e78@dots G3e79@e) (G3e4c@ellipsis? G3e78@dots)) G3e76@ls/false)) '#f) (apply (lambda (G3e7c@dots G3e7d@e) (if G3e4d@vec? (G30af@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e48@src) (G3dd5@gen-syntax G3e48@src G3e7d@e G3e4a@r G3e4b@maps (lambda (G3e80@x) '#f) '#f))) G3e76@ls/false) ((lambda (G3e82@t) ((lambda (G3e84@ls/false) (if (if G3e84@ls/false (begin '#f (apply (lambda (G3e86@x G3e87@dots G3e88@y) (G3e4c@ellipsis? G3e87@dots)) G3e84@ls/false)) '#f) (apply (lambda (G3e8c@x G3e8d@dots G3e8e@y) ((letrec ((G3e92@f (lambda (G3e94@y G3e95@k) ((lambda (G3e98@t) ((lambda (G3e9a@ls/false) (if G3e9a@ls/false (apply (lambda () (G3e95@k G3e4b@maps)) G3e9a@ls/false) ((lambda (G3e9c@t) ((lambda (G3e9e@ls/false) (if (if G3e9e@ls/false (begin '#f (apply (lambda (G3ea0@dots G3ea1@y) (G3e4c@ellipsis? G3ea0@dots)) G3e9e@ls/false)) '#f) (apply (lambda (G3ea4@dots G3ea5@y) (G3e92@f G3ea5@y (lambda (G3ea8@maps) (call-with-values (lambda () (G3e95@k (cons '() G3ea8@maps))) (lambda (G3eac@G3eaa G3ead@G3eab) ((lambda (G3eb0@maps G3eb1@x) (if (null? (car G3eb0@maps)) (G30af@syntax-violation '#f '"extra ellipsis in syntax form" G3e48@src) (values (G3ddb@gen-mappend G3eb1@x (car G3eb0@maps)) (cdr G3eb0@maps)))) G3ead@G3eab G3eac@G3eaa)))))) G3e9e@ls/false) ((lambda (G3eb4@t) ((lambda (G3eb6@ls/false) (if G3eb6@ls/false (apply (lambda () (call-with-values (lambda () (G3dd5@gen-syntax G3e48@src G3e94@y G3e4a@r G3e4b@maps G3e4c@ellipsis? G3e4d@vec?)) (lambda (G3eba@G3eb8 G3ebb@G3eb9) ((lambda (G3ebe@maps G3ebf@y) (call-with-values (lambda () (G3e95@k G3ebe@maps)) (lambda (G3ec4@G3ec2 G3ec5@G3ec3) ((lambda (G3ec8@maps G3ec9@x) (values (G3dd9@gen-append G3ec9@x G3ebf@y) G3ec8@maps)) G3ec5@G3ec3 G3ec4@G3ec2)))) G3ebb@G3eb9 G3eba@G3eb8)))) G3eb6@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3eb4@t))) (G2fc2@syntax-dispatch G3eb4@t '_))) G3e9c@t))) (G2fc2@syntax-dispatch G3e9c@t '(any . any)))) G3e98@t))) (G2fc2@syntax-dispatch G3e98@t '()))) G3e94@y)))) G3e92@f) G3e8e@y (lambda (G3ecc@maps) (call-with-values (lambda () (G3dd5@gen-syntax G3e48@src G3e8c@x G3e4a@r (cons '() G3ecc@maps) G3e4c@ellipsis? '#f)) (lambda (G3ed0@G3ece G3ed1@G3ecf) ((lambda (G3ed4@maps G3ed5@x) (if (null? (car G3ed4@maps)) (G30af@syntax-violation '#f '"extra ellipsis in syntax form" G3e48@src) (values (G3ddd@gen-map G3ed5@x (car G3ed4@maps)) (cdr G3ed4@maps)))) G3ed1@G3ecf G3ed0@G3ece)))))) G3e84@ls/false) ((lambda (G3ed8@t) ((lambda (G3eda@ls/false) (if G3eda@ls/false (apply (lambda (G3edc@x G3edd@y) (call-with-values (lambda () (G3dd5@gen-syntax G3e48@src G3edc@x G3e4a@r G3e4b@maps G3e4c@ellipsis? '#f)) (lambda (G3ee2@G3ee0 G3ee3@G3ee1) ((lambda (G3ee6@maps G3ee7@xnew) (call-with-values (lambda () (G3dd5@gen-syntax G3e48@src G3edd@y G3e4a@r G3ee6@maps G3e4c@ellipsis? G3e4d@vec?)) (lambda (G3eec@G3eea G3eed@G3eeb) ((lambda (G3ef0@maps G3ef1@ynew) (values (G3ddf@gen-cons G3e49@e G3edc@x G3edd@y G3ee7@xnew G3ef1@ynew) G3ef0@maps)) G3eed@G3eeb G3eec@G3eea)))) G3ee3@G3ee1 G3ee2@G3ee0)))) G3eda@ls/false) ((lambda (G3ef4@t) ((lambda (G3ef6@ls/false) (if G3ef6@ls/false (apply (lambda (G3ef8@ls) (call-with-values (lambda () (G3dd5@gen-syntax G3e48@src G3ef8@ls G3e4a@r G3e4b@maps G3e4c@ellipsis? '#t)) (lambda (G3efc@G3efa G3efd@G3efb) ((lambda (G3f00@maps G3f01@lsnew) (values (G3de1@gen-vector G3e49@e G3ef8@ls G3f01@lsnew) G3f00@maps)) G3efd@G3efb G3efc@G3efa)))) G3ef6@ls/false) ((lambda (G3f04@t) ((lambda (G3f06@ls/false) (if G3f06@ls/false (apply (lambda () (values (list 'quote G3e49@e) G3e4b@maps)) G3f06@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3f04@t))) (G2fc2@syntax-dispatch G3f04@t '_))) G3ef4@t))) (G2fc2@syntax-dispatch G3ef4@t '#(vector each-any)))) G3ed8@t))) (G2fc2@syntax-dispatch G3ed8@t '(any . any)))) G3e82@t))) (G2fc2@syntax-dispatch G3e82@t '(any any . any)))) G3e74@t))) (G2fc2@syntax-dispatch G3e74@t '(any any)))) G3e5c@t))) (G2fc2@syntax-dispatch G3e5c@t 'any))) G3e54@t))) (G2fc2@syntax-dispatch G3e54@t 'any))) G3e49@e))) (set! G3dd7@gen-ref (lambda (G3e30@src G3e31@var G3e32@level G3e33@maps) (if (= G3e32@level '0) (values G3e31@var G3e33@maps) (if (null? G3e33@maps) (G30af@syntax-violation '#f '"missing ellipsis in syntax form" G3e30@src) (call-with-values (lambda () (G3dd7@gen-ref G3e30@src G3e31@var (- G3e32@level '1) (cdr G3e33@maps))) (lambda (G3e3a@G3e38 G3e3b@G3e39) ((lambda (G3e3e@outer-maps G3e3f@outer-var) ((lambda (G3e42@t) (if G3e42@t ((lambda (G3e44@b) (values (cdr G3e44@b) G3e33@maps)) G3e42@t) ((lambda (G3e46@inner-var) (values G3e46@inner-var (cons (cons (cons G3e3f@outer-var G3e46@inner-var) (car G3e33@maps)) G3e3e@outer-maps))) (G2d41@gen-lexical 'tmp)))) (assq G3e3f@outer-var (car G3e33@maps)))) G3e3b@G3e39 G3e3a@G3e38))))))) (set! G3dd9@gen-append (lambda (G3e2c@x G3e2d@y) (if (equal? G3e2d@y ''()) G3e2c@x (list 'append G3e2c@x G3e2d@y)))) (set! G3ddb@gen-mappend (lambda (G3e28@e G3e29@map-env) (list 'apply '(primitive append) (G3ddd@gen-map G3e28@e G3e29@map-env)))) (set! G3ddd@gen-map (lambda (G3e16@e G3e17@map-env) ((lambda (G3e1a@formals G3e1b@actuals) (if (eq? (car G3e16@e) 'ref) (car G3e1b@actuals) (if (for-all (lambda (G3e1e@x) (if (eq? (car G3e1e@x) 'ref) (begin '#f (memq (cadr G3e1e@x) G3e1a@formals)) '#f)) (cdr G3e16@e)) ((lambda (G3e20@args) (cons 'map (cons (list 'primitive (car G3e16@e)) G3e20@args))) (map ((lambda (G3e22@r) (lambda (G3e24@x) (cdr (assq (cadr G3e24@x) G3e22@r)))) (map cons G3e1a@formals G3e1b@actuals)) (cdr G3e16@e))) (cons* 'map (list 'lambda G3e1a@formals G3e16@e) G3e1b@actuals)))) (map cdr G3e17@map-env) (map (lambda (G3e26@x) (list 'ref (car G3e26@x))) G3e17@map-env)))) (set! G3ddf@gen-cons (lambda (G3e06@e G3e07@x G3e08@y G3e09@xnew G3e0a@ynew) ((lambda (G3e10@t) (if (memv G3e10@t '(quote)) (if (eq? (car G3e09@xnew) 'quote) ((lambda (G3e12@xnew G3e13@ynew) (if (if (eq? G3e12@xnew G3e07@x) (begin '#f (eq? G3e13@ynew G3e08@y)) '#f) (list 'quote G3e06@e) (list 'quote (cons G3e12@xnew G3e13@ynew)))) (cadr G3e09@xnew) (cadr G3e0a@ynew)) (if (null? (cadr G3e0a@ynew)) (list 'list G3e09@xnew) (list 'cons G3e09@xnew G3e0a@ynew))) (if (memv G3e10@t '(list)) (cons 'list (cons G3e09@xnew (cdr G3e0a@ynew))) (list 'cons G3e09@xnew G3e0a@ynew)))) (car G3e0a@ynew)))) (set! G3de1@gen-vector (lambda (G3e00@e G3e01@ls G3e02@lsnew) (if (eq? (car G3e02@lsnew) 'quote) (if (eq? (cadr G3e02@lsnew) G3e01@ls) (list 'quote G3e00@e) (list 'quote (list->vector (cadr G3e02@lsnew)))) (if (eq? (car G3e02@lsnew) 'list) (cons 'vector (cdr G3e02@lsnew)) (list 'list->vector G3e02@lsnew))))) (set! G3de3@regen (lambda (G3dfa@x) ((lambda (G3dfc@t) (if (memv G3dfc@t '(ref)) (cadr G3dfa@x) (if (memv G3dfc@t '(primitive)) (list 'primitive (cadr G3dfa@x)) (if (memv G3dfc@t '(quote)) (list 'quote (cadr G3dfa@x)) (if (memv G3dfc@t '(lambda)) (G2d21@G2c5f@build-lambda '#f (cadr G3dfa@x) (G3de3@regen (caddr G3dfa@x))) (if (memv G3dfc@t '(map)) ((lambda (G3dfe@ls) (cons '(primitive ellipsis-map) G3dfe@ls)) (map G3de3@regen (cdr G3dfa@x))) (cons (list 'primitive (car G3dfa@x)) (map G3de3@regen (cdr G3dfa@x))))))))) (car G3dfa@x)))) (lambda (G3de4@e G3de5@r G3de6@mr) ((lambda (G3dea@t) ((lambda (G3dec@ls/false) (if G3dec@ls/false (apply (lambda (G3dee@x) (call-with-values (lambda () (G3dd5@gen-syntax G3de4@e G3dee@x G3de5@r '() G2fc4@ellipsis? '#f)) (lambda (G3df2@G3df0 G3df3@G3df1) ((lambda (G3df6@maps G3df7@e) (G3de3@regen G3df7@e)) G3df3@G3df1 G3df2@G3df0)))) G3dec@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3dea@t))) (G2fc2@syntax-dispatch G3dea@t '(_ any)))) G3de4@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fd0@core-macro-transformer (lambda (G3f08@name) ((lambda (G3f0a@t) (if (memv G3f0a@t '(quote)) G2f72@quote-transformer (if (memv G3f0a@t '(lambda)) G2f76@lambda-transformer (if (memv G3f0a@t '(case-lambda)) G2f74@case-lambda-transformer (if (memv G3f0a@t '(letrec)) G2f5e@letrec-transformer (if (memv G3f0a@t '(letrec*)) G2f60@letrec*-transformer (if (memv G3f0a@t '(if)) G2f6e@if-transformer (if (memv G3f0a@t '(foreign-call)) G2fbe@foreign-call-transformer (if (memv G3f0a@t '(syntax-case)) G2fca@syntax-case-transformer (if (memv G3f0a@t '(syntax)) G2fce@syntax-transformer (if (memv G3f0a@t '(type-descriptor)) G2f64@type-descriptor-transformer (if (memv G3f0a@t '(record-type-descriptor)) G2f66@record-type-descriptor-transformer (if (memv G3f0a@t '(record-constructor-descriptor)) G2f68@record-constructor-descriptor-transformer (if (memv G3f0a@t '(fluid-let-syntax)) G2f62@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3f08@name))))))))))))))) G3f08@name))) (set! G2fd2@file-options-macro (lambda (G3f0c@x) ((lambda (G3f0f@valid-option?) (begin (set! G3f0f@valid-option? (lambda (G3f18@x) (if (G2dc5@id? G3f18@x) (begin '#f (memq (G2dc7@id->sym G3f18@x) '(no-fail no-create no-truncate))) '#f))) ((lambda (G3f10@t) ((lambda (G3f12@ls/false) (if (if G3f12@ls/false (begin '#f (apply (lambda (G3f14@opt*) (if (for-all G3f0f@valid-option? G3f14@opt*) (begin '#f (G2968@G290c@file-options-spec (map G2dc7@id->sym G3f14@opt*))) '#f)) G3f12@ls/false)) '#f) (apply (lambda (G3f16@opt*) (G2f78@bless (list 'quote (G2968@G290c@file-options-spec (map G2dc7@id->sym G3f16@opt*))))) G3f12@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3f10@t))) (G2fc2@syntax-dispatch G3f10@t '(_ . each-any)))) G3f0c@x))) '#f))) (set! G2fd4@symbol-macro (lambda (G3f1a@x G3f1b@set) ((lambda (G3f1e@t) ((lambda (G3f20@ls/false) (if (if G3f20@ls/false (begin '#f (apply (lambda (G3f22@name) (if (G2dc5@id? G3f22@name) (begin '#f (memq (G2dc7@id->sym G3f22@name) G3f1b@set)) '#f)) G3f20@ls/false)) '#f) (apply (lambda (G3f24@name) (G2f78@bless (list 'quote G3f24@name))) G3f20@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3f1e@t))) (G2fc2@syntax-dispatch G3f1e@t '(_ any)))) G3f1a@x))) (set! G2fd6@macro-transformer (lambda (G3f26@x) (if (procedure? G3f26@x) G3f26@x (if (symbol? G3f26@x) ((lambda (G3f28@t) (if (memv G3f28@t '(define-record-type)) G2fb6@define-record-type-macro (if (memv G3f28@t '(define-struct)) G2fb4@define-struct-macro (if (memv G3f28@t '(include)) G2faa@include-macro (if (memv G3f28@t '(cond)) G2fa6@cond-macro (if (memv G3f28@t '(let)) G2f7e@let-macro (if (memv G3f28@t '(do)) G2f9e@do-macro (if (memv G3f28@t '(or)) G2fa2@or-macro (if (memv G3f28@t '(and)) G2fa4@and-macro (if (memv G3f28@t '(let*)) G2fa0@let*-macro (if (memv G3f28@t '(let-values)) G2f80@let-values-macro (if (memv G3f28@t '(let*-values)) G2f82@let*-values-macro (if (memv G3f28@t '(syntax-rules)) G2fae@syntax-rules-macro (if (memv G3f28@t '(quasiquote)) G2fb0@quasiquote-macro (if (memv G3f28@t '(quasisyntax)) G2fb2@quasisyntax-macro (if (memv G3f28@t '(with-syntax)) G2f7a@with-syntax-macro (if (memv G3f28@t '(when)) G2f6a@when-macro (if (memv G3f28@t '(unless)) G2f6c@unless-macro (if (memv G3f28@t '(case)) G2f70@case-macro (if (memv G3f28@t '(identifier-syntax)) G2f9c@identifier-syntax-macro (if (memv G3f28@t '(time)) G2f94@time-macro (if (memv G3f28@t '(delay)) G2f96@delay-macro (if (memv G3f28@t '(assert)) G2f98@assert-macro (if (memv G3f28@t '(endianness)) G2f9a@endianness-macro (if (memv G3f28@t '(guard)) G2f90@guard-macro (if (memv G3f28@t '(define-enumeration)) G2f92@define-enumeration-macro (if (memv G3f28@t '(trace-lambda)) G2f84@trace-lambda-macro (if (memv G3f28@t '(trace-define)) G2f86@trace-define-macro (if (memv G3f28@t '(trace-define-syntax)) G2f88@trace-define-syntax-macro (if (memv G3f28@t '(trace-let-syntax)) G2f8c@trace-let-syntax-macro (if (memv G3f28@t '(trace-letrec-syntax)) G2f8e@trace-letrec-syntax-macro (if (memv G3f28@t '(define-condition-type)) G2fb8@define-condition-type-macro (if (memv G3f28@t '(parameterize)) G2fbc@parameterize-macro (if (memv G3f28@t '(include-into)) G2fac@include-into-macro (if (memv G3f28@t '(eol-style)) (lambda (G3f2a@x) (G2fd4@symbol-macro G3f2a@x '(none lf cr crlf nel crnel ls))) (if (memv G3f28@t '(error-handling-mode)) (lambda (G3f2c@x) (G2fd4@symbol-macro G3f2c@x '(ignore raise replace))) (if (memv G3f28@t '(buffer-mode)) (lambda (G3f2e@x) (G2fd4@symbol-macro G3f2e@x '(none line block))) (if (memv G3f28@t '(file-options)) G2fd2@file-options-macro (if (memv G3f28@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2fba@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3f26@x)))))))))))))))))))))))))))))))))))))))) G3f26@x) (error 'core-macro-transformer '"BUG: invalid macro" G3f26@x))))) (set! G2fd8@local-macro-transformer (lambda (G3f30@x) (car G3f30@x))) (set! G2fda@do-macro-call (lambda (G3f32@transformer G3f33@expr) ((lambda (G3f36@out) (begin ((letrec ((G3f38@f (lambda (G3f3a@x) (if (not (G2d8d@stx? G3f3a@x)) (if (pair? G3f3a@x) (begin (G3f38@f (car G3f3a@x)) (G3f38@f (cdr G3f3a@x))) (if (vector? G3f3a@x) (vector-for-each G3f38@f G3f3a@x) (if (symbol? G3f3a@x) (G30af@syntax-violation '#f '"raw symbol encountered in output of macro" G3f33@expr G3f3a@x) (void)))) (void))))) G3f38@f) G3f36@out) (G2daf@add-mark (G2da5@gen-mark) G3f36@out G3f33@expr))) (G3f32@transformer (G2daf@add-mark G2da7@anti-mark G3f33@expr '#f))))) (set! G2fdc@chi-macro (lambda (G3f3c@p G3f3d@e) (G2fda@do-macro-call (G2fd6@macro-transformer G3f3c@p) G3f3d@e))) (set! G2fde@chi-local-macro (lambda (G3f40@p G3f41@e) (G2fda@do-macro-call (G2fd8@local-macro-transformer G3f40@p) G3f41@e))) (set! G2fe0@chi-global-macro (lambda (G3f44@p G3f45@e) ((lambda (G3f48@lib G3f49@loc) (begin (G2bf7@G2a8f@visit-library G3f48@lib) ((lambda (G3f4c@x) ((lambda (G3f4e@transformer) (G2fda@do-macro-call G3f4e@transformer G3f45@e)) (if (procedure? G3f4c@x) G3f4c@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3f4c@x)))) (symbol-value G3f49@loc)))) (car G3f44@p) (cdr G3f44@p)))) (set! G2fe2@chi-expr* (lambda (G3f50@e* G3f51@r G3f52@mr) (if (null? G3f50@e*) '() ((lambda (G3f56@e) (cons G3f56@e (G2fe2@chi-expr* (cdr G3f50@e*) G3f51@r G3f52@mr))) (G2fe6@chi-expr (car G3f50@e*) G3f51@r G3f52@mr))))) (set! G2fe4@chi-application (lambda (G3f58@e G3f59@r G3f5a@mr) ((lambda (G3f5e@t) ((lambda (G3f60@ls/false) (if G3f60@ls/false (apply (lambda (G3f62@rator G3f63@rands) ((lambda (G3f66@rator) (cons G3f66@rator (G2fe2@chi-expr* G3f63@rands G3f59@r G3f5a@mr))) (G2fe6@chi-expr G3f62@rator G3f59@r G3f5a@mr))) G3f60@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3f5e@t))) (G2fc2@syntax-dispatch G3f5e@t '(any . each-any)))) G3f58@e))) (set! G2fe6@chi-expr (lambda (G3f68@e G3f69@r G3f6a@mr) (call-with-values (lambda () (G2ded@syntax-type G3f68@e G3f69@r)) (lambda (G3f71@G3f6e G3f72@G3f6f G3f73@G3f70) ((lambda (G3f77@kwd G3f78@value G3f79@type) ((lambda (G3f7d@t) (if (memv G3f7d@t '(core-macro)) ((lambda (G3f7f@transformer) (G3f7f@transformer G3f68@e G3f69@r G3f6a@mr)) (G2fd0@core-macro-transformer G3f78@value)) (if (memv G3f7d@t '(global)) ((lambda (G3f81@lib) ((lambda (G3f83@loc) ((lambda () (begin ((G302f@inv-collector) G3f81@lib) G3f83@loc)))) (cdr G3f78@value))) (car G3f78@value)) (if (memv G3f7d@t '(core-prim)) ((lambda (G3f85@name) (list 'primitive G3f85@name)) G3f78@value) (if (memv G3f7d@t '(call)) (G2fe4@chi-application G3f68@e G3f69@r G3f6a@mr) (if (memv G3f7d@t '(lexical)) ((lambda (G3f87@lex) G3f87@lex) (G2f52@lexical-var G3f78@value)) (if (memv G3f7d@t '(global-macro global-macro!)) (G2fe6@chi-expr (G2fe0@chi-global-macro G3f78@value G3f68@e) G3f69@r G3f6a@mr) (if (memv G3f7d@t '(local-macro local-macro!)) (G2fe6@chi-expr (G2fde@chi-local-macro G3f78@value G3f68@e) G3f69@r G3f6a@mr) (if (memv G3f7d@t '(macro macro!)) (G2fe6@chi-expr (G2fdc@chi-macro G3f78@value G3f68@e) G3f69@r G3f6a@mr) (if (memv G3f7d@t '(constant)) ((lambda (G3f89@datum) (list 'quote G3f89@datum)) G3f78@value) (if (memv G3f7d@t '(set!)) (G2fe8@chi-set! G3f68@e G3f69@r G3f6a@mr) (if (memv G3f7d@t '(begin)) ((lambda (G3f8b@t) ((lambda (G3f8d@ls/false) (if G3f8d@ls/false (apply (lambda (G3f8f@x G3f90@x*) (G2d24@G2c95@build-sequence '#f (G2fe2@chi-expr* (cons G3f8f@x G3f90@x*) G3f69@r G3f6a@mr))) G3f8d@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3f8b@t))) (G2fc2@syntax-dispatch G3f8b@t '(_ any . each-any)))) G3f68@e) (if (memv G3f7d@t '(let-syntax letrec-syntax)) ((lambda (G3f93@t) ((lambda (G3f95@ls/false) (if (if G3f95@ls/false (begin '#f (apply (lambda (G3f97@xlhs* G3f98@xrhs* G3f99@xbody G3f9a@xbody*) (if (not (G2dcf@valid-bound-ids? G3f97@xlhs*)) (G30af@syntax-violation '#f '"invalid identifiers" G3f68@e) (void))) G3f95@ls/false)) '#f) (apply (lambda (G3f9f@xlhs* G3fa0@xrhs* G3fa1@xbody G3fa2@xbody*) ((lambda (G3fa7@xlab*) ((lambda (G3fa9@xrib) ((lambda (G3fab@xb*) ((lambda () (G2d24@G2c95@build-sequence '#f (G2fe2@chi-expr* (map (lambda (G3fad@x) (G2db1@add-subst G3fa9@xrib G3fad@x)) (cons G3fa1@xbody G3fa2@xbody*)) (append (map cons G3fa7@xlab* G3fab@xb*) G3f69@r) (append (map cons G3fa7@xlab* G3fab@xb*) G3f6a@mr)))))) (map (lambda (G3faf@x) (G2e05@make-eval-transformer (G3021@expand-transformer (if (eq? G3f79@type 'let-syntax) G3faf@x (G2db1@add-subst G3fa9@xrib G3faf@x)) G3f6a@mr))) G3fa0@xrhs*))) (G2d80@make-full-rib G3f9f@xlhs* G3fa7@xlab*))) (map G2d45@gen-label G3f9f@xlhs*))) G3f95@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3f93@t))) (G2fc2@syntax-dispatch G3f93@t '(_ #(each (any any)) any . each-any)))) G3f68@e) (if (memv G3f7d@t '(displaced-lexical)) (G30af@syntax-violation '#f '"identifier out of context" G3f68@e) (if (memv G3f7d@t '(syntax)) (G30af@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3f68@e) (if (memv G3f7d@t '(define define-syntax module import library)) (G30af@syntax-violation '#f (string-append ((lambda (G3fb1@t) (if (memv G3fb1@t '(define)) '"a definition" (if (memv G3fb1@t '(define-syntax)) '"a define-syntax" (if (memv G3fb1@t '(module)) '"a module definition" (if (memv G3fb1@t '(library)) '"a library definition" (if (memv G3fb1@t '(import)) '"an import declaration" (if (memv G3fb1@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f79@type) '" was found where an expression was expected") G3f68@e) (if (memv G3f7d@t '(mutable)) (G30af@syntax-violation '#f '"attempt to reference an unexportable variable" G3f68@e) (G30af@syntax-violation '#f '"invalid expression" G3f68@e)))))))))))))))))) G3f79@type)) G3f73@G3f70 G3f72@G3f6f G3f71@G3f6e))))) (set! G2fe8@chi-set! (lambda (G3fb3@e G3fb4@r G3fb5@mr) ((lambda (G3fb9@t) ((lambda (G3fbb@ls/false) (if (if G3fbb@ls/false (begin '#f (apply (lambda (G3fbd@x G3fbe@v) (G2dc5@id? G3fbd@x)) G3fbb@ls/false)) '#f) (apply (lambda (G3fc1@x G3fc2@v) (call-with-values (lambda () (G2ded@syntax-type G3fc1@x G3fb4@r)) (lambda (G3fc8@G3fc5 G3fc9@G3fc6 G3fca@G3fc7) ((lambda (G3fce@kwd G3fcf@value G3fd0@type) ((lambda (G3fd4@t) (if (memv G3fd4@t '(lexical)) (begin (G2f56@set-lexical-mutable! G3fcf@value '#t) (list 'set! (G2f52@lexical-var G3fcf@value) (G2fe6@chi-expr G3fc2@v G3fb4@r G3fb5@mr))) (if (memv G3fd4@t '(core-prim)) (G30af@syntax-violation '#f '"cannot modify imported core primitive" G3fb3@e) (if (memv G3fd4@t '(global)) (G30af@syntax-violation '#f '"attempt to modify imported binding" G3fb3@e) (if (memv G3fd4@t '(global-macro!)) (G2fe6@chi-expr (G2fe0@chi-global-macro G3fcf@value G3fb3@e) G3fb4@r G3fb5@mr) (if (memv G3fd4@t '(local-macro!)) (G2fe6@chi-expr (G2fde@chi-local-macro G3fcf@value G3fb3@e) G3fb4@r G3fb5@mr) (if (memv G3fd4@t '(mutable)) (G30af@syntax-violation '#f '"attempt to assign to an unexportable variable" G3fb3@e) (G30af@syntax-violation '#f '"invalid syntax" G3fb3@e)))))))) G3fd0@type)) G3fca@G3fc7 G3fc9@G3fc6 G3fc8@G3fc5)))) G3fbb@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3fb9@t))) (G2fc2@syntax-dispatch G3fb9@t '(_ any any)))) G3fb3@e))) (set! G2fea@verify-formals (lambda (G3fd6@fmls G3fd7@stx) ((lambda (G3fda@t) ((lambda (G3fdc@ls/false) (if G3fdc@ls/false (apply (lambda (G3fde@x*) (if (not (G2dcf@valid-bound-ids? G3fde@x*)) (G2f7c@invalid-fmls-error G3fd7@stx G3fd6@fmls) (void))) G3fdc@ls/false) ((lambda (G3fe0@t) ((lambda (G3fe2@ls/false) (if G3fe2@ls/false (apply (lambda (G3fe4@x* G3fe5@x) (if (not (G2dcf@valid-bound-ids? (cons G3fe5@x G3fe4@x*))) (G2f7c@invalid-fmls-error G3fd7@stx G3fd6@fmls) (void))) G3fe2@ls/false) ((lambda (G3fe8@t) ((lambda (G3fea@ls/false) (if G3fea@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid syntax" G3fd7@stx)) G3fea@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G3fe8@t))) (G2fc2@syntax-dispatch G3fe8@t '_))) G3fe0@t))) (G2fc2@syntax-dispatch G3fe0@t '#(each+ any () any)))) G3fda@t))) (G2fc2@syntax-dispatch G3fda@t 'each-any))) G3fd6@fmls))) (set! G2fec@chi-lambda-clause (lambda (G3fec@stx G3fed@fmls G3fee@body* G3fef@r G3ff0@mr) ((lambda (G3ff6@t) ((lambda (G3ff8@ls/false) (if G3ff8@ls/false (apply (lambda (G3ffa@x*) (begin (G2fea@verify-formals G3fed@fmls G3fec@stx) ((lambda (G3ffc@lex* G3ffd@lab*) (values G3ffc@lex* (G2ffc@chi-internal (G2db1@add-subst (G2d80@make-full-rib G3ffa@x* G3ffd@lab*) G3fee@body*) (G2f5a@add-lexicals G3ffd@lab* G3ffc@lex* G3fef@r) G3ff0@mr))) (map G2d41@gen-lexical G3ffa@x*) (map G2d45@gen-label G3ffa@x*)))) G3ff8@ls/false) ((lambda (G4000@t) ((lambda (G4002@ls/false) (if G4002@ls/false (apply (lambda (G4004@x* G4005@x) (begin (G2fea@verify-formals G3fed@fmls G3fec@stx) ((lambda (G4008@lex* G4009@lab* G400a@lex G400b@lab) (values (append G4008@lex* G400a@lex) (G2ffc@chi-internal (G2db1@add-subst (G2d80@make-full-rib (cons G4005@x G4004@x*) (cons G400b@lab G4009@lab*)) G3fee@body*) (G2f5a@add-lexicals (cons G400b@lab G4009@lab*) (cons G400a@lex G4008@lex*) G3fef@r) G3ff0@mr))) (map G2d41@gen-lexical G4004@x*) (map G2d45@gen-label G4004@x*) (G2d41@gen-lexical G4005@x) (G2d45@gen-label G4005@x)))) G4002@ls/false) ((lambda (G4010@t) ((lambda (G4012@ls/false) (if G4012@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid syntax" G3fed@fmls)) G4012@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G4010@t))) (G2fc2@syntax-dispatch G4010@t '_))) G4000@t))) (G2fc2@syntax-dispatch G4000@t '#(each+ any () any)))) G3ff6@t))) (G2fc2@syntax-dispatch G3ff6@t 'each-any))) G3fed@fmls))) (set! G2fee@chi-lambda-clause* (lambda (G4014@stx G4015@fmls* G4016@body** G4017@r G4018@mr) (if (null? G4015@fmls*) (values '() '()) (call-with-values (lambda () (G2fec@chi-lambda-clause G4014@stx (car G4015@fmls*) (car G4016@body**) G4017@r G4018@mr)) (lambda (G4020@G401e G4021@G401f) ((lambda (G4024@b G4025@a) (call-with-values (lambda () (G2fee@chi-lambda-clause* G4014@stx (cdr G4015@fmls*) (cdr G4016@body**) G4017@r G4018@mr)) (lambda (G402a@G4028 G402b@G4029) ((lambda (G402e@b* G402f@a*) (values (cons G4025@a G402f@a*) (cons G4024@b G402e@b*))) G402b@G4029 G402a@G4028)))) G4021@G401f G4020@G401e)))))) (set! G2ff0@chi-defun (lambda (G4032@x G4033@r G4034@mr) ((lambda (G4038@fmls G4039@body*) (call-with-values (lambda () (G2fec@chi-lambda-clause G4038@fmls G4038@fmls G4039@body* G4033@r G4034@mr)) (lambda (G403e@G403c G403f@G403d) ((lambda (G4042@body G4043@fmls) (G2d21@G2c5f@build-lambda '#f G4043@fmls G4042@body)) G403f@G403d G403e@G403c)))) (car G4032@x) (cdr G4032@x)))) (set! G2ff2@chi-rhs (lambda (G4046@rhs G4047@r G4048@mr) ((lambda (G404c@t) (if (memv G404c@t '(defun)) (G2ff0@chi-defun (cdr G4046@rhs) G4047@r G4048@mr) (if (memv G404c@t '(expr)) ((lambda (G404e@expr) (G2fe6@chi-expr G404e@expr G4047@r G4048@mr)) (cdr G4046@rhs)) (if (memv G404c@t '(top-expr)) ((lambda (G4050@expr) (G2d24@G2c95@build-sequence '#f (list (G2fe6@chi-expr G4050@expr G4047@r G4048@mr) (G2d25@G2c97@build-void)))) (cdr G4046@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G4046@rhs))))) (car G4046@rhs)))) (set! G2ff4@expand-interaction-rhs*/init* (lambda (G4052@lhs* G4053@rhs* G4054@init* G4055@r G4056@mr) ((letrec ((G405c@f (lambda (G405e@lhs* G405f@rhs*) (if (null? G405e@lhs*) (map (lambda (G4062@x) (G2fe6@chi-expr G4062@x G4055@r G4056@mr)) G4054@init*) ((lambda (G4064@lhs G4065@rhs) ((lambda (G4068@t) (if (memv G4068@t '(defun)) ((lambda (G406a@rhs) (cons (list 'set! G4064@lhs G406a@rhs) (G405c@f (cdr G405e@lhs*) (cdr G405f@rhs*)))) (G2ff0@chi-defun (cdr G4065@rhs) G4055@r G4056@mr)) (if (memv G4068@t '(expr)) ((lambda (G406c@rhs) (cons (list 'set! G4064@lhs G406c@rhs) (G405c@f (cdr G405e@lhs*) (cdr G405f@rhs*)))) (G2fe6@chi-expr (cdr G4065@rhs) G4055@r G4056@mr)) (if (memv G4068@t '(top-expr)) ((lambda (G406e@e) (cons G406e@e (G405c@f (cdr G405e@lhs*) (cdr G405f@rhs*)))) (G2fe6@chi-expr (cdr G4065@rhs) G4055@r G4056@mr)) (error 'expand-interaction '"invallid" G4065@rhs))))) (car G4065@rhs))) (car G405e@lhs*) (car G405f@rhs*)))))) G405c@f) G4052@lhs* G4053@rhs*))) (set! G2ff6@chi-rhs* (lambda (G4070@rhs* G4071@r G4072@mr) ((letrec ((G4076@f (lambda (G4078@ls) (if (null? G4078@ls) '() ((lambda (G407a@a) (cons G407a@a (G4076@f (cdr G4078@ls)))) (G2ff2@chi-rhs (car G4078@ls) G4071@r G4072@mr)))))) G4076@f) G4070@rhs*))) (set! G2ff8@find-bound=? (lambda (G407c@x G407d@lhs* G407e@rhs*) (if (null? G407d@lhs*) '#f (if (G2dcb@bound-id=? G407c@x (car G407d@lhs*)) (car G407e@rhs*) (G2ff8@find-bound=? G407c@x (cdr G407d@lhs*) (cdr G407e@rhs*)))))) (set! G2ffa@find-dups (lambda (G4082@ls) ((letrec ((G4084@f (lambda (G4086@ls G4087@dups) (if (null? G4086@ls) G4087@dups ((lambda (G408a@t) (if G408a@t ((lambda (G408c@x) (G4084@f (cdr G4086@ls) (cons (list (car G4086@ls) G408c@x) G4087@dups))) G408a@t) (G4084@f (cdr G4086@ls) G4087@dups))) (G2ff8@find-bound=? (car G4086@ls) (cdr G4086@ls) (cdr G4086@ls))))))) G4084@f) G4082@ls '()))) (set! G2ffc@chi-internal (lambda (G408e@e* G408f@r G4090@mr) ((lambda (G4094@rib) (call-with-values (lambda () (G301f@chi-body* (map (lambda (G409e@x) (G2db1@add-subst G4094@rib G409e@x)) (G2dc3@syntax->list G408e@e*)) G408f@r G4090@mr '() '() '() '() '() G4094@rib '#f)) (lambda (G40a0@G4096 G40a1@G4097 G40a2@G4098 G40a3@G4099 G40a4@G409a G40a5@G409b G40a6@G409c G40a7@G409d) ((lambda (G40b0@_exp* G40b1@kwd* G40b2@mod** G40b3@rhs* G40b4@lex* G40b5@mr G40b6@r G40b7@e*) (begin (if (null? G40b7@e*) (G30af@syntax-violation '#f '"no expression in body" G40b7@e*) (void)) ((lambda (G40c0@init*) ((lambda (G40c2@rhs*) ((lambda () (G2d27@G2c9b@build-letrec* '#f (reverse G40b4@lex*) (reverse G40c2@rhs*) (G2d24@G2c95@build-sequence '#f G40c0@init*))))) (G2ff6@chi-rhs* G40b3@rhs* G40b6@r G40b5@mr))) (G2fe2@chi-expr* (append (apply append (reverse G40b2@mod**)) G40b7@e*) G40b6@r G40b5@mr)))) G40a7@G409d G40a6@G409c G40a5@G409b G40a4@G409a G40a3@G4099 G40a2@G4098 G40a1@G4097 G40a0@G4096)))) (G2d70@make-empty-rib)))) (set! G2ffe@parse-module (lambda (G40c4@e) ((lambda (G40c6@t) ((lambda (G40c8@ls/false) (if G40c8@ls/false (apply (lambda (G40ca@export* G40cb@b*) (begin (if (not (for-all G2dc5@id? G40ca@export*)) (G30af@syntax-violation '#f '"module exports must be identifiers" G40c4@e) (void)) (values '#f (list->vector G40ca@export*) G40cb@b*))) G40c8@ls/false) ((lambda (G40ce@t) ((lambda (G40d0@ls/false) (if G40d0@ls/false (apply (lambda (G40d2@name G40d3@export* G40d4@b*) (begin (if (not (G2dc5@id? G40d2@name)) (G30af@syntax-violation '#f '"module name must be an identifier" G40c4@e) (void)) (if (not (for-all G2dc5@id? G40d3@export*)) (G30af@syntax-violation '#f '"module exports must be identifiers" G40c4@e) (void)) (values G40d2@name (list->vector G40d3@export*) G40d4@b*))) G40d0@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G40ce@t))) (G2fc2@syntax-dispatch G40ce@t '(_ any each-any . each-any)))) G40c6@t))) (G2fc2@syntax-dispatch G40c6@t '(_ each-any . each-any)))) G40c4@e))) (set! G3004@G2fff (make-record-type-descriptor 'module-interface '#f 'G3002 '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G3006@G3001 '#f) (set! G3008@G3000 (make-record-constructor-descriptor G3004@G2fff '#f G3006@G3001)) (set! G300b@module-interface? (record-predicate G3004@G2fff)) (set! G300d@make-module-interface (record-constructor G3008@G3000)) (set! G300f@module-interface-first-mark (record-accessor G3004@G2fff '0)) (set! G3011@module-interface-exp-id-vec (record-accessor G3004@G2fff '1)) (set! G3013@module-interface-exp-lab-vec (record-accessor G3004@G2fff '2)) (set! G3015@set-module-interface-first-mark! (record-mutator G3004@G2fff '0)) (set! G3017@set-module-interface-exp-id-vec! (record-mutator G3004@G2fff '1)) (set! G3019@set-module-interface-exp-lab-vec! (record-mutator G3004@G2fff '2)) (set! G301b@module-interface-exp-id* (lambda (G40d8@iface G40d9@id) ((lambda (G40dd@diff-marks) (begin (set! G40dd@diff-marks (lambda (G40e4@ls G40e5@x) (begin (if (null? G40e4@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G40e8@a) (if (eq? G40e8@a G40e5@x) '() (cons G40e8@a (G40dd@diff-marks (cdr G40e4@ls) G40e5@x)))) (car G40e4@ls))))) ((lambda (G40de@diff G40df@id-vec) (if (null? G40de@diff) G40df@id-vec (vector-map (lambda (G40e2@x) (G2d8f@make-stx (G2d91@stx-expr G40e2@x) (append G40de@diff (G2d93@stx-mark* G40e2@x)) '() '())) G40df@id-vec))) (G40dd@diff-marks (G2d93@stx-mark* G40d9@id) (G300f@module-interface-first-mark G40d8@iface)) (G3011@module-interface-exp-id-vec G40d8@iface)))) '#f))) (set! G301d@chi-internal-module (lambda (G40ea@e G40eb@r G40ec@mr G40ed@lex* G40ee@rhs* G40ef@mod** G40f0@kwd*) (call-with-values (lambda () (G2ffe@parse-module G40ea@e)) (lambda (G40fb@G40f8 G40fc@G40f9 G40fd@G40fa) ((lambda (G4101@e* G4102@exp-id* G4103@name) ((lambda (G4107@rib) ((lambda (G4109@e*) ((lambda () (call-with-values (lambda () (G301f@chi-body* G4109@e* G40eb@r G40ec@mr G40ed@lex* G40ee@rhs* G40ef@mod** G40f0@kwd* '() G4107@rib '#f)) (lambda (G4113@G410b G4114@G410c G4115@G410d G4116@G410e G4117@G410f G4118@G4110 G4119@G4111 G411a@G4112) ((lambda (G4123@_exp* G4124@kwd* G4125@mod** G4126@rhs* G4127@lex* G4128@mr G4129@r G412a@e*) ((lambda (G4133@exp-lab* G4134@mod**) (if (not G4103@name) (values G4127@lex* G4126@rhs* G4102@exp-id* G4133@exp-lab* G4129@r G4128@mr G4134@mod** G4124@kwd*) ((lambda (G4137@lab G4138@iface) (values G4127@lex* G4126@rhs* (vector G4103@name) (vector G4137@lab) (cons (cons G4137@lab (cons '$module G4138@iface)) G4129@r) (cons (cons G4137@lab (cons '$module G4138@iface)) G4128@mr) G4134@mod** G4124@kwd*)) (G2d45@gen-label 'module) (G300d@make-module-interface (car (G2d93@stx-mark* G4103@name)) (vector-map (lambda (G413b@x) (G2d8f@make-stx (G2d91@stx-expr G413b@x) (G2d93@stx-mark* G413b@x) '() '())) G4102@exp-id*) G4133@exp-lab*)))) (vector-map (lambda (G413d@x) ((lambda (G413f@t) (if G413f@t G413f@t (begin '#f (G30af@syntax-violation '#f '"cannot find module export" G413d@x)))) (G2ddf@id->label (G2d8f@make-stx (G2dc7@id->sym G413d@x) (G2d93@stx-mark* G413d@x) (list G4107@rib) '())))) G4102@exp-id*) (cons G412a@e* G4125@mod**))) G411a@G4112 G4119@G4111 G4118@G4110 G4117@G410f G4116@G410e G4115@G410d G4114@G410c G4113@G410b)))))) (map (lambda (G4141@x) (G2db1@add-subst G4107@rib G4141@x)) (G2dc3@syntax->list G4101@e*)))) (G2d70@make-empty-rib))) G40fd@G40fa G40fc@G40f9 G40fb@G40f8))))) (set! G301f@chi-body* (lambda (G4143@e* G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4149@kwd* G414a@exp* G414b@rib G414c@top?) (if (null? G4143@e*) (values G4143@e* G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4149@kwd* G414a@exp*) ((lambda (G4157@e) (call-with-values (lambda () (G2ded@syntax-type G4157@e G4144@r)) (lambda (G415c@G4159 G415d@G415a G415e@G415b) ((lambda (G4162@kwd G4163@value G4164@type) ((lambda (G4168@kwd*) ((lambda (G416a@t) (if (memv G416a@t '(define)) (call-with-values (lambda () (G2f4a@parse-define G4157@e)) (lambda (G416e@G416c G416f@G416d) ((lambda (G4172@rhs G4173@id) (begin (if (G2dd3@bound-id-member? G4173@id G4168@kwd*) (G30af@syntax-violation '#f '"cannot redefine keyword" G4157@e) (void)) (call-with-values (lambda () (G2d49@gen-define-label+loc G4173@id G414b@rib)) (lambda (G4178@G4176 G4179@G4177) ((lambda (G417c@lex G417d@lab) (begin (G2d76@extend-rib! G414b@rib G4173@id G417d@lab) (G301f@chi-body* (cdr G4143@e*) (G2f58@add-lexical G417d@lab G417c@lex G4144@r) G4145@mr (cons G417c@lex G4146@lex*) (cons G4172@rhs G4147@rhs*) G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?))) G4179@G4177 G4178@G4176))))) G416f@G416d G416e@G416c))) (if (memv G416a@t '(define-syntax)) (call-with-values (lambda () (G2f4c@parse-define-syntax G4157@e)) (lambda (G4182@G4180 G4183@G4181) ((lambda (G4186@rhs G4187@id) (begin (if (G2dd3@bound-id-member? G4187@id G4168@kwd*) (G30af@syntax-violation '#f '"cannot redefine keyword" G4157@e) (void)) ((lambda (G418a@lab G418b@expanded-rhs) (begin (G2d76@extend-rib! G414b@rib G4187@id G418a@lab) ((lambda (G418e@b) (G301f@chi-body* (cdr G4143@e*) (cons (cons G418a@lab G418e@b) G4144@r) (cons (cons G418a@lab G418e@b) G4145@mr) G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?)) (G2e05@make-eval-transformer G418b@expanded-rhs)))) (G2d4b@gen-define-label G4187@id G414b@rib) (G3021@expand-transformer G4186@rhs G4145@mr)))) G4183@G4181 G4182@G4180))) (if (memv G416a@t '(let-syntax letrec-syntax)) ((lambda (G4190@t) ((lambda (G4192@ls/false) (if (if G4192@ls/false (begin '#f (apply (lambda (G4194@xlhs* G4195@xrhs* G4196@xbody*) (if (not (G2dcf@valid-bound-ids? G4194@xlhs*)) (G30af@syntax-violation '#f '"invalid identifiers" G4157@e) (void))) G4192@ls/false)) '#f) (apply (lambda (G419a@xlhs* G419b@xrhs* G419c@xbody*) ((lambda (G41a0@xlab*) ((lambda (G41a2@xrib) ((lambda (G41a4@xb*) ((lambda () (G301f@chi-body* (append (map (lambda (G41a6@x) (G2db1@add-subst G41a2@xrib G41a6@x)) G419c@xbody*) (cdr G4143@e*)) (append (map cons G41a0@xlab* G41a4@xb*) G4144@r) (append (map cons G41a0@xlab* G41a4@xb*) G4145@mr) G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?)))) (map (lambda (G41a8@x) (G2e05@make-eval-transformer (G3021@expand-transformer (if (eq? G4164@type 'let-syntax) G41a8@x (G2db1@add-subst G41a2@xrib G41a8@x)) G4145@mr))) G419b@xrhs*))) (G2d80@make-full-rib G419a@xlhs* G41a0@xlab*))) (map G2d45@gen-label G419a@xlhs*))) G4192@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G4190@t))) (G2fc2@syntax-dispatch G4190@t '(_ #(each (any any)) . each-any)))) G4157@e) (if (memv G416a@t '(begin)) ((lambda (G41aa@t) ((lambda (G41ac@ls/false) (if G41ac@ls/false (apply (lambda (G41ae@x*) (G301f@chi-body* (append G41ae@x* (cdr G4143@e*)) G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?)) G41ac@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G41aa@t))) (G2fc2@syntax-dispatch G41aa@t '(_ . each-any)))) G4157@e) (if (memv G416a@t '(global-macro global-macro!)) (G301f@chi-body* (cons (G2db1@add-subst G414b@rib (G2fe0@chi-global-macro G4163@value G4157@e)) (cdr G4143@e*)) G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?) (if (memv G416a@t '(local-macro local-macro!)) (G301f@chi-body* (cons (G2db1@add-subst G414b@rib (G2fde@chi-local-macro G4163@value G4157@e)) (cdr G4143@e*)) G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?) (if (memv G416a@t '(macro macro!)) (G301f@chi-body* (cons (G2db1@add-subst G414b@rib (G2fdc@chi-macro G4163@value G4157@e)) (cdr G4143@e*)) G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?) (if (memv G416a@t '(module)) (call-with-values (lambda () (G301d@chi-internal-module G4157@e G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4168@kwd*)) (lambda (G41b8@G41b0 G41b9@G41b1 G41ba@G41b2 G41bb@G41b3 G41bc@G41b4 G41bd@G41b5 G41be@G41b6 G41bf@G41b7) ((lambda (G41c8@kwd* G41c9@mod** G41ca@mr G41cb@r G41cc@m-exp-lab* G41cd@m-exp-id* G41ce@rhs* G41cf@lex*) (begin (vector-for-each (lambda (G41d8@id G41d9@lab) (G2d76@extend-rib! G414b@rib G41d8@id G41d9@lab)) G41cd@m-exp-id* G41cc@m-exp-lab*) (G301f@chi-body* (cdr G4143@e*) G41cb@r G41ca@mr G41cf@lex* G41ce@rhs* G41c9@mod** G41c8@kwd* G414a@exp* G414b@rib G414c@top?))) G41bf@G41b7 G41be@G41b6 G41bd@G41b5 G41bc@G41b4 G41bb@G41b3 G41ba@G41b2 G41b9@G41b1 G41b8@G41b0))) (if (memv G416a@t '(library)) (begin (G308f@library-expander (G2ddb@stx->datum G4157@e)) (G301f@chi-body* (cdr G4143@e*) G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?)) (if (memv G416a@t '(export)) ((lambda (G41dc@t) ((lambda (G41de@ls/false) (if G41de@ls/false (apply (lambda (G41e0@exp-decl*) (G301f@chi-body* (cdr G4143@e*) G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* (append G41e0@exp-decl* G414a@exp*) G414b@rib G414c@top?)) G41de@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G41dc@t))) (G2fc2@syntax-dispatch G41dc@t '(_ . each-any)))) G4157@e) (if (memv G416a@t '(import)) ((lambda () ((lambda (G41e3@module-import? G41e5@module-import G41e7@library-import) (begin (set! G41e3@module-import? (lambda (G422f@e) ((lambda (G4231@t) ((lambda (G4233@ls/false) (if (if G4233@ls/false (begin '#f (apply (lambda (G4235@id) (G2dc5@id? G4235@id)) G4233@ls/false)) '#f) (apply (lambda (G4237@id) '#t) G4233@ls/false) ((lambda (G4239@t) ((lambda (G423b@ls/false) (if G423b@ls/false (apply (lambda (G423d@imp*) '#f) G423b@ls/false) ((lambda (G423f@t) ((lambda (G4241@ls/false) (if G4241@ls/false (apply (lambda () (G30af@syntax-violation '#f '"malformed import form" G422f@e)) G4241@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G423f@t))) (G2fc2@syntax-dispatch G423f@t '_))) G4239@t))) (G2fc2@syntax-dispatch G4239@t '(_ . each-any)))) G4231@t))) (G2fc2@syntax-dispatch G4231@t '(_ any)))) G422f@e))) (set! G41e5@module-import (lambda (G4210@e G4211@r) ((lambda (G4214@t) ((lambda (G4216@ls/false) (if (if G4216@ls/false (begin '#f (apply (lambda (G4218@id) (G2dc5@id? G4218@id)) G4216@ls/false)) '#f) (apply (lambda (G421a@id) (call-with-values (lambda () (G2ded@syntax-type G421a@id G4211@r)) (lambda (G421f@G421c G4220@G421d G4221@G421e) ((lambda (G4225@kwd G4226@value G4227@type) ((lambda (G422b@t) (if (memv G422b@t '($module)) ((lambda (G422d@iface) (values (G301b@module-interface-exp-id* G422d@iface G421a@id) (G3013@module-interface-exp-lab-vec G422d@iface))) G4226@value) (G30af@syntax-violation '#f '"invalid import" G4210@e))) G4227@type)) G4221@G421e G4220@G421d G421f@G421c)))) G4216@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G4214@t))) (G2fc2@syntax-dispatch G4214@t '(_ any)))) G4210@e))) (set! G41e7@library-import (lambda (G41f6@e) ((lambda (G41f8@t) ((lambda (G41fa@ls/false) (if G41fa@ls/false (apply (lambda (G41fc@ctxt G41fd@imp*) (call-with-values (lambda () (G3029@parse-import-spec* (G30b5@syntax->datum G41fd@imp*))) (lambda (G4202@G4200 G4203@G4201) ((lambda (G4206@subst-labels G4207@subst-names) (values (vector-map (lambda (G420a@name) (G2da3@datum->stx G41fc@ctxt G420a@name)) G4207@subst-names) G4206@subst-labels)) G4203@G4201 G4202@G4200)))) G41fa@ls/false) ((lambda (G420c@t) ((lambda (G420e@ls/false) (if G420e@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid import form" G41f6@e)) G420e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G420c@t))) (G2fc2@syntax-dispatch G420c@t '_))) G41f8@t))) (G2fc2@syntax-dispatch G41f8@t '(any . each-any)))) G41f6@e))) (begin (call-with-values (lambda () (if (G41e3@module-import? G4157@e) (G41e5@module-import G4157@e G4144@r) (G41e7@library-import G4157@e))) (lambda (G41ea@G41e8 G41eb@G41e9) ((lambda (G41ee@lab* G41ef@id*) (vector-for-each (lambda (G41f2@id G41f3@lab) (G2d76@extend-rib! G414b@rib G41f2@id G41f3@lab)) G41ef@id* G41ee@lab*)) G41eb@G41e9 G41ea@G41e8))) (G301f@chi-body* (cdr G4143@e*) G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?)))) '#f '#f '#f))) (if G414c@top? (G301f@chi-body* (cdr G4143@e*) G4144@r G4145@mr (cons (G2d41@gen-lexical 'dummy) G4146@lex*) (cons (cons 'top-expr G4157@e) G4147@rhs*) G4148@mod** G4168@kwd* G414a@exp* G414b@rib G414c@top?) (values G4143@e* G4144@r G4145@mr G4146@lex* G4147@rhs* G4148@mod** G4168@kwd* G414a@exp*)))))))))))))) G4164@type)) (if (G2dc5@id? G4162@kwd) (cons G4162@kwd G4149@kwd*) G4149@kwd*))) G415e@G415b G415d@G415a G415c@G4159)))) (car G4143@e*))))) (set! G3021@expand-transformer (lambda (G4243@expr G4244@r) ((lambda (G4247@rtc) ((lambda (G4249@expanded-rhs) (begin (for-each ((lambda (G424b@mark-visit) (lambda (G424d@x) (begin (G2bf6@G2a8d@invoke-library G424d@x) (G424b@mark-visit G424d@x)))) (G3031@vis-collector)) (G4247@rtc)) G4249@expanded-rhs)) ((lambda (G4253@G424f@inv-collector G4254@G4250@vis-collector G4255@G4251@inv-collector G4256@G4252@vis-collector) ((lambda (G425b@swap) (dynamic-wind G425b@swap (lambda () (G2fe6@chi-expr G4243@expr G4244@r G4244@r)) G425b@swap)) (lambda () (begin ((lambda (G425d@t) (begin (G4253@G424f@inv-collector G4255@G4251@inv-collector) (set! G4255@G4251@inv-collector G425d@t))) (G4253@G424f@inv-collector)) ((lambda (G425f@t) (begin (G4254@G4250@vis-collector G4256@G4252@vis-collector) (set! G4256@G4252@vis-collector G425f@t))) (G4254@G4250@vis-collector)))))) G302f@inv-collector G3031@vis-collector G4247@rtc (lambda (G4261@x) (values))))) (G302d@make-collector)))) (set! G3023@parse-exports (lambda (G4263@exp*) ((letrec ((G4265@f (lambda (G4267@exp* G4268@int* G4269@ext*) (if (null? G4267@exp*) (begin (if (not (G2dcf@valid-bound-ids? G4269@ext*)) (G30af@syntax-violation 'export '"invalid exports" (G2ffa@find-dups G4269@ext*)) (void)) (values (map G30b5@syntax->datum G4269@ext*) G4268@int*)) ((lambda (G426d@t) ((lambda (G426f@ls/false) (if G426f@ls/false (apply (lambda (G4271@rename G4272@i* G4273@e*) (begin (if (not (if (eq? (G30b5@syntax->datum G4271@rename) 'rename) (if (for-all G2dc5@id? G4272@i*) (begin '#f (for-all G2dc5@id? G4273@e*)) '#f) '#f)) (G30af@syntax-violation 'export '"invalid export specifier" (car G4267@exp*)) (void)) (G4265@f (cdr G4267@exp*) (append G4272@i* G4268@int*) (append G4273@e* G4269@ext*)))) G426f@ls/false) ((lambda (G4277@t) ((lambda (G4279@ls/false) (if G4279@ls/false (apply (lambda (G427b@ie) (begin (if (not (G2dc5@id? G427b@ie)) (G30af@syntax-violation 'export '"invalid export" G427b@ie) (void)) (G4265@f (cdr G4267@exp*) (cons G427b@ie G4268@int*) (cons G427b@ie G4269@ext*)))) G4279@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G4277@t))) (G2fc2@syntax-dispatch G4277@t 'any))) G426d@t))) (G2fc2@syntax-dispatch G426d@t '(any . #(each (any any)))))) (car G4267@exp*)))))) G4265@f) G4263@exp* '() '()))) (set! G3025@parse-library-name (lambda (G427d@spec) ((lambda (G4280@parse) (begin (set! G4280@parse (lambda (G428b@x) ((lambda (G428d@t) ((lambda (G428f@ls/false) (if (if G428f@ls/false (begin '#f (apply (lambda (G4291@v*) (for-all (lambda (G4293@x) ((lambda (G4295@x) (if (integer? G4295@x) (begin '#f (exact? G4295@x)) '#f)) (G30b5@syntax->datum G4293@x))) G4291@v*)) G428f@ls/false)) '#f) (apply (lambda (G4297@v*) (values '() (map G30b5@syntax->datum G4297@v*))) G428f@ls/false) ((lambda (G4299@t) ((lambda (G429b@ls/false) (if (if G429b@ls/false (begin '#f (apply (lambda (G429d@x G429e@rest) (symbol? (G30b5@syntax->datum G429d@x))) G429b@ls/false)) '#f) (apply (lambda (G42a1@x G42a2@rest) (call-with-values (lambda () (G4280@parse G42a2@rest)) (lambda (G42a7@G42a5 G42a8@G42a6) ((lambda (G42ab@v* G42ac@x*) (values (cons (G30b5@syntax->datum G42a1@x) G42ac@x*) G42ab@v*)) G42a8@G42a6 G42a7@G42a5)))) G429b@ls/false) ((lambda (G42af@t) ((lambda (G42b1@ls/false) (if G42b1@ls/false (apply (lambda () (values '() '())) G42b1@ls/false) ((lambda (G42b3@t) ((lambda (G42b5@ls/false) (if G42b5@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid library name" G427d@spec)) G42b5@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G42b3@t))) (G2fc2@syntax-dispatch G42b3@t '_))) G42af@t))) (G2fc2@syntax-dispatch G42af@t '()))) G4299@t))) (G2fc2@syntax-dispatch G4299@t '(any . any)))) G428d@t))) (G2fc2@syntax-dispatch G428d@t '(each-any)))) G428b@x))) (call-with-values (lambda () (G4280@parse G427d@spec)) (lambda (G4283@G4281 G4284@G4282) ((lambda (G4287@ver* G4288@name*) (begin (if (null? G4288@name*) (G30af@syntax-violation '#f '"empty library name" G427d@spec) (void)) (values G4288@name* G4287@ver*))) G4284@G4282 G4283@G4281))))) '#f))) (set! G3027@parse-library (lambda (G42b7@e) ((lambda (G42b9@t) ((lambda (G42bb@ls/false) (if (if G42bb@ls/false (begin '#f (apply (lambda (G42bd@library G42be@name* G42bf@export G42c0@exp* G42c1@import G42c2@imp* G42c3@b*) (if (eq? (G30b5@syntax->datum G42bf@export) 'export) (if (eq? (G30b5@syntax->datum G42c1@import) 'import) (begin '#f (eq? (G30b5@syntax->datum G42bd@library) 'library)) '#f) '#f)) G42bb@ls/false)) '#f) (apply (lambda (G42cb@library G42cc@name* G42cd@export G42ce@exp* G42cf@import G42d0@imp* G42d1@b*) (values G42cc@name* G42ce@exp* G42d0@imp* G42d1@b*)) G42bb@ls/false) ((lambda (G42d9@t) ((lambda (G42db@ls/false) (if G42db@ls/false (apply (lambda () (G30af@syntax-violation '#f '"malformed library" G42b7@e)) G42db@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G42d9@t))) (G2fc2@syntax-dispatch G42d9@t '_))) G42b9@t))) (G2fc2@syntax-dispatch G42b9@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G42b7@e))) (set! G3029@parse-import-spec* ((lambda () ((lambda (G42de@idsyn? G42e0@dup-error G42e2@merge-substs G42e4@exclude* G42e6@find* G42e8@rem* G42ea@remove-dups G42ec@parse-library-name G42ee@import-library G42f0@get-import G42f2@add-imports!) (begin (set! G42de@idsyn? (lambda (G44dd@x) (symbol? (G30b5@syntax->datum G44dd@x)))) (set! G42e0@dup-error (lambda (G44db@name) (G30af@syntax-violation 'import '"two imports with different bindings" G44db@name))) (set! G42e2@merge-substs (lambda (G44c9@s G44ca@subst) ((lambda (G44ce@insert-to-subst) (begin (set! G44ce@insert-to-subst (lambda (G44cf@a G44d0@subst) ((lambda (G44d3@name G44d4@label) ((lambda (G44d7@t) (if G44d7@t ((lambda (G44d9@x) (if (eq? (cdr G44d9@x) G44d4@label) G44d0@subst (G42e0@dup-error G44d3@name))) G44d7@t) (cons G44cf@a G44d0@subst))) (assq G44d3@name G44d0@subst))) (car G44cf@a) (cdr G44cf@a)))) (if (null? G44c9@s) G44ca@subst (G44ce@insert-to-subst (car G44c9@s) (G42e2@merge-substs (cdr G44c9@s) G44ca@subst))))) '#f))) (set! G42e4@exclude* (lambda (G449f@sym* G44a0@subst) ((lambda (G44a4@exclude) (begin (set! G44a4@exclude (lambda (G44b9@sym G44ba@subst) (if (null? G44ba@subst) (G30af@syntax-violation 'import '"cannot rename unbound identifier" G44b9@sym) (if (eq? G44b9@sym (caar G44ba@subst)) (values (cdar G44ba@subst) (cdr G44ba@subst)) ((lambda (G44bd@a) (call-with-values (lambda () (G44a4@exclude G44b9@sym (cdr G44ba@subst))) (lambda (G44c1@G44bf G44c2@G44c0) ((lambda (G44c5@subst G44c6@old) (values G44c6@old (cons G44bd@a G44c5@subst))) G44c2@G44c0 G44c1@G44bf)))) (car G44ba@subst)))))) (if (null? G449f@sym*) (values '() G44a0@subst) (call-with-values (lambda () (G44a4@exclude (car G449f@sym*) G44a0@subst)) (lambda (G44a7@G44a5 G44a8@G44a6) ((lambda (G44ab@subst G44ac@old) (call-with-values (lambda () (G42e4@exclude* (cdr G449f@sym*) G44ab@subst)) (lambda (G44b1@G44af G44b2@G44b0) ((lambda (G44b5@subst G44b6@old*) (values (cons G44ac@old G44b6@old*) G44b5@subst)) G44b2@G44b0 G44b1@G44af)))) G44a8@G44a6 G44a7@G44a5)))))) '#f))) (set! G42e6@find* (lambda (G4497@sym* G4498@subst) (map (lambda (G449b@x) ((lambda (G449d@t) (if G449d@t (cdr G449d@t) (G30af@syntax-violation 'import '"cannot find identifier" G449b@x))) (assq G449b@x G4498@subst))) G4497@sym*))) (set! G42e8@rem* (lambda (G448f@sym* G4490@subst) ((letrec ((G4493@f (lambda (G4495@subst) (if (null? G4495@subst) '() (if (memq (caar G4495@subst) G448f@sym*) (G4493@f (cdr G4495@subst)) (cons (car G4495@subst) (G4493@f (cdr G4495@subst)))))))) G4493@f) G4490@subst))) (set! G42ea@remove-dups (lambda (G448d@ls) (if (null? G448d@ls) '() (if (memq (car G448d@ls) (cdr G448d@ls)) (G42ea@remove-dups (cdr G448d@ls)) (cons (car G448d@ls) (G42ea@remove-dups (cdr G448d@ls))))))) (set! G42ec@parse-library-name (lambda (G43a7@spec) ((lambda (G43aa@subversion? G43ac@subversion-pred G43ae@version-pred) (begin (set! G43aa@subversion? (lambda (G4489@x) ((lambda (G448b@x) (if (integer? G448b@x) (if (exact? G448b@x) (begin '#f (>= G448b@x '0)) '#f) '#f)) (G30b5@syntax->datum G4489@x)))) (set! G43ac@subversion-pred (lambda (G4429@x*) ((lambda (G442b@t) ((lambda (G442d@ls/false) (if (if G442d@ls/false (begin '#f (apply (lambda (G442f@n) (G43aa@subversion? G442f@n)) G442d@ls/false)) '#f) (apply (lambda (G4431@n) (lambda (G4433@x) (= G4433@x (G30b5@syntax->datum G4431@n)))) G442d@ls/false) ((lambda (G4435@t) ((lambda (G4437@ls/false) (if (if G4437@ls/false (begin '#f (apply (lambda (G4439@p? G443a@sub*) (eq? (G30b5@syntax->datum G4439@p?) 'and)) G4437@ls/false)) '#f) (apply (lambda (G443d@p? G443e@sub*) ((lambda (G4441@p*) (lambda (G4443@x) (for-all (lambda (G4445@p) (G4445@p G4443@x)) G4441@p*))) (map G43ac@subversion-pred G443e@sub*))) G4437@ls/false) ((lambda (G4447@t) ((lambda (G4449@ls/false) (if (if G4449@ls/false (begin '#f (apply (lambda (G444b@p? G444c@sub*) (eq? (G30b5@syntax->datum G444b@p?) 'or)) G4449@ls/false)) '#f) (apply (lambda (G444f@p? G4450@sub*) ((lambda (G4453@p*) (lambda (G4455@x) (exists (lambda (G4457@p) (G4457@p G4455@x)) G4453@p*))) (map G43ac@subversion-pred G4450@sub*))) G4449@ls/false) ((lambda (G4459@t) ((lambda (G445b@ls/false) (if (if G445b@ls/false (begin '#f (apply (lambda (G445d@p? G445e@sub) (eq? (G30b5@syntax->datum G445d@p?) 'not)) G445b@ls/false)) '#f) (apply (lambda (G4461@p? G4462@sub) ((lambda (G4465@p) (lambda (G4467@x) (not (G4465@p G4467@x)))) (G43ac@subversion-pred G4462@sub))) G445b@ls/false) ((lambda (G4469@t) ((lambda (G446b@ls/false) (if (if G446b@ls/false (begin '#f (apply (lambda (G446d@p? G446e@n) (if (eq? (G30b5@syntax->datum G446d@p?) '<=) (begin '#f (G43aa@subversion? G446e@n)) '#f)) G446b@ls/false)) '#f) (apply (lambda (G4471@p? G4472@n) (lambda (G4475@x) (<= G4475@x (G30b5@syntax->datum G4472@n)))) G446b@ls/false) ((lambda (G4477@t) ((lambda (G4479@ls/false) (if (if G4479@ls/false (begin '#f (apply (lambda (G447b@p? G447c@n) (if (eq? (G30b5@syntax->datum G447b@p?) '>=) (begin '#f (G43aa@subversion? G447c@n)) '#f)) G4479@ls/false)) '#f) (apply (lambda (G447f@p? G4480@n) (lambda (G4483@x) (>= G4483@x (G30b5@syntax->datum G4480@n)))) G4479@ls/false) ((lambda (G4485@t) ((lambda (G4487@ls/false) (if G4487@ls/false (apply (lambda () (G30af@syntax-violation 'import '"invalid sub-version spec" G43a7@spec G4429@x*)) G4487@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G4485@t))) (G2fc2@syntax-dispatch G4485@t '_))) G4477@t))) (G2fc2@syntax-dispatch G4477@t '(any any)))) G4469@t))) (G2fc2@syntax-dispatch G4469@t '(any any)))) G4459@t))) (G2fc2@syntax-dispatch G4459@t '(any any)))) G4447@t))) (G2fc2@syntax-dispatch G4447@t '(any . each-any)))) G4435@t))) (G2fc2@syntax-dispatch G4435@t '(any . each-any)))) G442b@t))) (G2fc2@syntax-dispatch G442b@t 'any))) G4429@x*))) (set! G43ae@version-pred (lambda (G43d9@x*) ((lambda (G43db@t) ((lambda (G43dd@ls/false) (if G43dd@ls/false (apply (lambda () (lambda (G43df@x) '#t)) G43dd@ls/false) ((lambda (G43e1@t) ((lambda (G43e3@ls/false) (if (if G43e3@ls/false (begin '#f (apply (lambda (G43e5@c G43e6@ver*) (eq? (G30b5@syntax->datum G43e5@c) 'and)) G43e3@ls/false)) '#f) (apply (lambda (G43e9@c G43ea@ver*) ((lambda (G43ed@p*) (lambda (G43ef@x) (for-all (lambda (G43f1@p) (G43f1@p G43ef@x)) G43ed@p*))) (map G43ae@version-pred G43ea@ver*))) G43e3@ls/false) ((lambda (G43f3@t) ((lambda (G43f5@ls/false) (if (if G43f5@ls/false (begin '#f (apply (lambda (G43f7@c G43f8@ver*) (eq? (G30b5@syntax->datum G43f7@c) 'or)) G43f5@ls/false)) '#f) (apply (lambda (G43fb@c G43fc@ver*) ((lambda (G43ff@p*) (lambda (G4401@x) (exists (lambda (G4403@p) (G4403@p G4401@x)) G43ff@p*))) (map G43ae@version-pred G43fc@ver*))) G43f5@ls/false) ((lambda (G4405@t) ((lambda (G4407@ls/false) (if (if G4407@ls/false (begin '#f (apply (lambda (G4409@c G440a@ver) (eq? (G30b5@syntax->datum G4409@c) 'not)) G4407@ls/false)) '#f) (apply (lambda (G440d@c G440e@ver) ((lambda (G4411@p) (lambda (G4413@x) (not (G4411@p G4413@x)))) (G43ae@version-pred G440e@ver))) G4407@ls/false) ((lambda (G4415@t) ((lambda (G4417@ls/false) (if G4417@ls/false (apply (lambda (G4419@sub*) ((lambda (G441b@p*) (lambda (G441d@x) ((letrec ((G441f@f (lambda (G4421@p* G4422@x) (if (null? G4421@p*) '#t (if (null? G4422@x) '#f (if ((car G4421@p*) (car G4422@x)) (begin '#f (G441f@f (cdr G4421@p*) (cdr G4422@x))) '#f)))))) G441f@f) G441b@p* G441d@x))) (map G43ac@subversion-pred G4419@sub*))) G4417@ls/false) ((lambda (G4425@t) ((lambda (G4427@ls/false) (if G4427@ls/false (apply (lambda () (G30af@syntax-violation 'import '"invalid version spec" G43a7@spec G43d9@x*)) G4427@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G4425@t))) (G2fc2@syntax-dispatch G4425@t '_))) G4415@t))) (G2fc2@syntax-dispatch G4415@t 'each-any))) G4405@t))) (G2fc2@syntax-dispatch G4405@t '(any any)))) G43f3@t))) (G2fc2@syntax-dispatch G43f3@t '(any . each-any)))) G43e1@t))) (G2fc2@syntax-dispatch G43e1@t '(any . each-any)))) G43db@t))) (G2fc2@syntax-dispatch G43db@t '()))) G43d9@x*))) ((letrec ((G43af@f (lambda (G43b1@x) ((lambda (G43b3@t) ((lambda (G43b5@ls/false) (if G43b5@ls/false (apply (lambda (G43b7@version-spec*) (values '() (G43ae@version-pred G43b7@version-spec*))) G43b5@ls/false) ((lambda (G43b9@t) ((lambda (G43bb@ls/false) (if (if G43bb@ls/false (begin '#f (apply (lambda (G43bd@x G43be@x*) (G42de@idsyn? G43bd@x)) G43bb@ls/false)) '#f) (apply (lambda (G43c1@x G43c2@x*) (call-with-values (lambda () (G43af@f G43c2@x*)) (lambda (G43c7@G43c5 G43c8@G43c6) ((lambda (G43cb@pred G43cc@name) (values (cons (G30b5@syntax->datum G43c1@x) G43cc@name) G43cb@pred)) G43c8@G43c6 G43c7@G43c5)))) G43bb@ls/false) ((lambda (G43cf@t) ((lambda (G43d1@ls/false) (if G43d1@ls/false (apply (lambda () (values '() (lambda (G43d3@x) '#t))) G43d1@ls/false) ((lambda (G43d5@t) ((lambda (G43d7@ls/false) (if G43d7@ls/false (apply (lambda () (G30af@syntax-violation '#f '"invalid import spec" G43a7@spec)) G43d7@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G43d5@t))) (G2fc2@syntax-dispatch G43d5@t '_))) G43cf@t))) (G2fc2@syntax-dispatch G43cf@t '()))) G43b9@t))) (G2fc2@syntax-dispatch G43b9@t '(any . any)))) G43b3@t))) (G2fc2@syntax-dispatch G43b3@t '(each-any)))) G43b1@x)))) G43af@f) G43a7@spec))) '#f '#f '#f))) (set! G42ee@import-library (lambda (G4399@spec*) (call-with-values (lambda () (G42ec@parse-library-name G4399@spec*)) (lambda (G439d@G439b G439e@G439c) ((lambda (G43a1@pred G43a2@name) (begin (if (null? G43a2@name) (G30af@syntax-violation 'import '"empty library name" G4399@spec*) (void)) ((lambda (G43a5@lib) (begin (if (not G43a5@lib) (G30af@syntax-violation 'import '"cannot find library with required name" G43a2@name) (void)) (if (not (G43a1@pred (G2bc7@G2a2f@library-version G43a5@lib))) (G30af@syntax-violation 'import '"library does not satisfy version specification" G4399@spec* G43a5@lib) (void)) ((G3033@imp-collector) G43a5@lib) (G2bcb@G2a37@library-subst G43a5@lib))) (G2bef@G2a7f@find-library-by-name G43a2@name)))) G439e@G439c G439d@G439b))))) (set! G42f0@get-import (lambda (G430b@spec) ((lambda (G430d@t) ((lambda (G430f@ls/false) (if (if G430f@ls/false (begin '#f (apply (lambda (G4311@x G4312@x*) (not (memq (G30b5@syntax->datum G4311@x) '(for rename except only prefix library)))) G430f@ls/false)) '#f) (apply (lambda (G4315@x G4316@x*) (G42ee@import-library (cons G4315@x G4316@x*))) G430f@ls/false) ((lambda (G4319@t) ((lambda (G431b@ls/false) (if (if G431b@ls/false (begin '#f (apply (lambda (G431d@rename G431e@isp G431f@old* G4320@new*) (if (eq? (G30b5@syntax->datum G431d@rename) 'rename) (if (for-all G42de@idsyn? G431f@old*) (begin '#f (for-all G42de@idsyn? G4320@new*)) '#f) '#f)) G431b@ls/false)) '#f) (apply (lambda (G4325@rename G4326@isp G4327@old* G4328@new*) ((lambda (G432d@subst G432e@old* G432f@new*) ((lambda (G4333@old-label*) ((lambda (G4335@subst) (G42e2@merge-substs (map cons G432f@new* G4333@old-label*) G4335@subst)) (G42e8@rem* G432e@old* G432d@subst))) (G42e6@find* G432e@old* G432d@subst))) (G42f0@get-import G4326@isp) (map G30b5@syntax->datum G4327@old*) (map G30b5@syntax->datum G4328@new*))) G431b@ls/false) ((lambda (G4337@t) ((lambda (G4339@ls/false) (if (if G4339@ls/false (begin '#f (apply (lambda (G433b@except G433c@isp G433d@sym*) (if (eq? (G30b5@syntax->datum G433b@except) 'except) (begin '#f (for-all G42de@idsyn? G433d@sym*)) '#f)) G4339@ls/false)) '#f) (apply (lambda (G4341@except G4342@isp G4343@sym*) ((lambda (G4347@subst) (G42e8@rem* (map G30b5@syntax->datum G4343@sym*) G4347@subst)) (G42f0@get-import G4342@isp))) G4339@ls/false) ((lambda (G4349@t) ((lambda (G434b@ls/false) (if (if G434b@ls/false (begin '#f (apply (lambda (G434d@only G434e@isp G434f@sym*) (if (eq? (G30b5@syntax->datum G434d@only) 'only) (begin '#f (for-all G42de@idsyn? G434f@sym*)) '#f)) G434b@ls/false)) '#f) (apply (lambda (G4353@only G4354@isp G4355@sym*) ((lambda (G4359@subst G435a@sym*) ((lambda (G435d@sym*) ((lambda (G435f@lab*) (map cons G435d@sym* G435f@lab*)) (G42e6@find* G435d@sym* G4359@subst))) (G42ea@remove-dups G435a@sym*))) (G42f0@get-import G4354@isp) (map G30b5@syntax->datum G4355@sym*))) G434b@ls/false) ((lambda (G4361@t) ((lambda (G4363@ls/false) (if (if G4363@ls/false (begin '#f (apply (lambda (G4365@prefix G4366@isp G4367@p) (if (eq? (G30b5@syntax->datum G4365@prefix) 'prefix) (begin '#f (G42de@idsyn? G4367@p)) '#f)) G4363@ls/false)) '#f) (apply (lambda (G436b@prefix G436c@isp G436d@p) ((lambda (G4371@subst G4372@prefix) (map (lambda (G4375@x) (cons (string->symbol (string-append G4372@prefix (symbol->string (car G4375@x)))) (cdr G4375@x))) G4371@subst)) (G42f0@get-import G436c@isp) (symbol->string (G30b5@syntax->datum G436d@p)))) G4363@ls/false) ((lambda (G4377@t) ((lambda (G4379@ls/false) (if (if G4379@ls/false (begin '#f (apply (lambda (G437b@library G437c@spec*) (eq? (G30b5@syntax->datum G437b@library) 'library)) G4379@ls/false)) '#f) (apply (lambda (G437f@library G4380@spec*) (G42ee@import-library G4380@spec*)) G4379@ls/false) ((lambda (G4383@t) ((lambda (G4385@ls/false) (if (if G4385@ls/false (begin '#f (apply (lambda (G4387@for G4388@isp G4389@rest) (eq? (G30b5@syntax->datum G4387@for) 'for)) G4385@ls/false)) '#f) (apply (lambda (G438d@for G438e@isp G438f@rest) (G42f0@get-import G438e@isp)) G4385@ls/false) ((lambda (G4393@t) ((lambda (G4395@ls/false) (if G4395@ls/false (apply (lambda (G4397@spec) (G30af@syntax-violation 'import '"invalid import spec" G4397@spec)) G4395@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G4393@t))) (G2fc2@syntax-dispatch G4393@t 'any))) G4383@t))) (G2fc2@syntax-dispatch G4383@t '(any any . any)))) G4377@t))) (G2fc2@syntax-dispatch G4377@t '(any each-any)))) G4361@t))) (G2fc2@syntax-dispatch G4361@t '(any any any)))) G4349@t))) (G2fc2@syntax-dispatch G4349@t '(any any . each-any)))) G4337@t))) (G2fc2@syntax-dispatch G4337@t '(any any . each-any)))) G4319@t))) (G2fc2@syntax-dispatch G4319@t '(any any . #(each (any any)))))) G430d@t))) (G2fc2@syntax-dispatch G430d@t '(any . each-any)))) G430b@spec))) (set! G42f2@add-imports! (lambda (G42fb@imp G42fc@h) ((lambda (G42ff@subst) (for-each (lambda (G4301@x) ((lambda (G4303@name G4304@label) ((lambda (G4307@t) (if G4307@t ((lambda (G4309@l) (if (not (eq? G4309@l G4304@label)) (G42e0@dup-error G4303@name) (void))) G4307@t) (hashtable-set! G42fc@h G4303@name G4304@label))) (hashtable-ref G42fc@h G4303@name '#f))) (car G4301@x) (cdr G4301@x))) G42ff@subst)) (G42f0@get-import G42fb@imp)))) (lambda (G42f3@imp*) ((letrec ((G42f5@f (lambda (G42f7@imp* G42f8@h) (if (null? G42f7@imp*) (hashtable-entries G42f8@h) (begin (G42f2@add-imports! (car G42f7@imp*) G42f8@h) (G42f5@f (cdr G42f7@imp*) G42f8@h)))))) G42f5@f) G42f3@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G302b@make-top-rib (lambda (G44df@names G44e0@labels) ((lambda (G44e3@rib) (begin (vector-for-each (lambda (G44e5@name G44e6@label) (begin (if (not (symbol? G44e5@name)) (error 'make-top-rib '"BUG: not a symbol" G44e5@name) (void)) (G2d78@extend-rib/nc! G44e3@rib (G2d8f@make-stx G44e5@name G2d3d@top-mark* '() '()) G44e6@label))) G44df@names G44e0@labels) G44e3@rib)) (G2d72@make-cache-rib)))) (set! G302d@make-collector (lambda () ((lambda (G44e9@ls) (lambda G44ed ((lambda (G44ee) (if (= G44ee '0) (apply (lambda () G44e9@ls) G44ed) (if (= G44ee '1) (apply (lambda (G44eb@x) (set! G44e9@ls (G2d36@set-cons G44eb@x G44e9@ls))) G44ed) (error 'apply '"invalid arg count")))) (length G44ed)))) '()))) (set! G302f@inv-collector (G2967@G28a0@make-parameter (lambda G44ef@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G44f1@x) (begin (if (not (procedure? G44f1@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G44f1@x) (void)) G44f1@x)))) (set! G3031@vis-collector (G2967@G28a0@make-parameter (lambda G44f3@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G44f5@x) (begin (if (not (procedure? G44f5@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G44f5@x) (void)) G44f5@x)))) (set! G3033@imp-collector (G2967@G28a0@make-parameter (lambda G44f7@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G44f9@x) (begin (if (not (procedure? G44f9@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G44f9@x) (void)) G44f9@x)))) (set! G3035@chi-library-internal (lambda (G44fb@e* G44fc@rib G44fd@top?) (call-with-values (lambda () (G301f@chi-body* G44fb@e* '() '() '() '() '() '() '() G44fc@rib G44fd@top?)) (lambda (G4509@G4501 G450a@G4502 G450b@G4503 G450c@G4504 G450d@G4505 G450e@G4506 G450f@G4507 G4510@G4508) ((lambda (G4519@exp* G451a@_kwd* G451b@mod** G451c@rhs* G451d@lex* G451e@mr G451f@r G4520@e*) (values (append (apply append (reverse G451b@mod**)) G4520@e*) G451f@r G451e@mr (reverse G451d@lex*) (reverse G451c@rhs*) G4519@exp*)) G4510@G4508 G450f@G4507 G450e@G4506 G450d@G4505 G450c@G4504 G450b@G4503 G450a@G4502 G4509@G4501))))) (set! G3037@chi-interaction-expr (lambda (G4529@e G452a@rib G452b@r) (call-with-values (lambda () (G301f@chi-body* (list G4529@e) G452b@r G452b@r '() '() '() '() '() G452a@rib '#t)) (lambda (G4537@G452f G4538@G4530 G4539@G4531 G453a@G4532 G453b@G4533 G453c@G4534 G453d@G4535 G453e@G4536) ((lambda (G4547@_exp* G4548@_kwd* G4549@mod** G454a@rhs* G454b@lex* G454c@mr G454d@r G454e@e*) ((lambda (G4557@e*) ((lambda (G4559@e) (values G4559@e G454d@r)) (if (null? G4557@e*) (G2d25@G2c97@build-void) (if (null? (cdr G4557@e*)) (car G4557@e*) (G2d24@G2c95@build-sequence '#f G4557@e*))))) (G2ff4@expand-interaction-rhs*/init* (reverse G454b@lex*) (reverse G454a@rhs*) (append (apply append (reverse G4549@mod**)) G454e@e*) G454d@r G454c@mr))) G453e@G4536 G453d@G4535 G453c@G4534 G453b@G4533 G453a@G4532 G4539@G4531 G4538@G4530 G4537@G452f))))) (set! G3039@library-body-expander (lambda (G455b@name G455c@main-exp* G455d@imp* G455e@b* G455f@top?) ((lambda (G4566@itc) (begin (set! G4566@itc (G302d@make-collector)) ((lambda (G456b@G4567@imp-collector G456c@G4568@top-level-context G456d@G4569@imp-collector G456e@G456a@top-level-context) ((lambda (G4573@swap) (dynamic-wind G4573@swap (lambda () (call-with-values (lambda () (G3029@parse-import-spec* G455d@imp*)) (lambda (G4577@G4575 G4578@G4576) ((lambda (G457b@subst-labels G457c@subst-names) ((lambda (G457f@rib) ((lambda (G4582@wrap) (begin (set! G4582@wrap (lambda (G45ee@x) (G2d8f@make-stx G45ee@x G2d3d@top-mark* (list G457f@rib) '()))) ((lambda (G4583@b* G4584@main-exp* G4585@rtc G4586@vtc) ((lambda (G458f@G458b@inv-collector G4590@G458c@vis-collector G4591@G458d@inv-collector G4592@G458e@vis-collector) ((lambda (G4597@swap) (dynamic-wind G4597@swap (lambda () (call-with-values (lambda () (G3035@chi-library-internal G4583@b* G457f@rib G455f@top?)) (lambda (G459f@G4599 G45a0@G459a G45a1@G459b G45a2@G459c G45a3@G459d G45a4@G459e) ((lambda (G45ab@internal-exp* G45ac@rhs* G45ad@lex* G45ae@mr G45af@r G45b0@init*) (call-with-values (lambda () (G3023@parse-exports (append G4584@main-exp* G45ab@internal-exp*))) (lambda (G45b9@G45b7 G45ba@G45b8) ((lambda (G45bd@exp-id* G45be@exp-name*) (begin (G2d7c@seal-rib! G457f@rib) ((lambda (G45c1@init*) ((lambda (G45c3@rhs*) ((lambda () (begin (G2d7e@unseal-rib! G457f@rib) ((lambda (G45c5@loc* G45c6@export-subst) ((lambda (G45ca@errstr) (begin (set! G45ca@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3099@make-export-env/macros G45ad@lex* G45c5@loc* G45af@r)) (lambda (G45ce@G45cb G45cf@G45cc G45d0@G45cd) ((lambda (G45d4@macro* G45d5@global* G45d6@export-env) (begin (for-each (lambda (G45da@s) ((lambda (G45dc@name G45dd@label) ((lambda (G45e0@p) (if G45e0@p ((lambda (G45e2@b) ((lambda (G45e4@type) (if (eq? G45e4@type 'mutable) (G30af@syntax-violation 'export G45ca@errstr G45dc@name) (void))) (car G45e2@b))) (cdr G45e0@p)) (void))) (assq G45dd@label G45d6@export-env))) (car G45da@s) (cdr G45da@s))) G45c6@export-subst) ((lambda (G45e6@invoke-body G45e7@invoke-definitions) (values (G4566@itc) (G4585@rtc) (G4586@vtc) (G2d24@G2c95@build-sequence '#f (append G45e7@invoke-definitions (list G45e6@invoke-body))) G45d4@macro* G45c6@export-subst G45d6@export-env)) (G2d27@G2c9b@build-letrec* '#f G45ad@lex* G45c3@rhs* (G3095@build-exports G45d5@global* G45c1@init*)) (map G2d20@G2bfd@build-global-define (map cdr G45d5@global*))))) G45d0@G45cd G45cf@G45cc G45ce@G45cb))))) '#f)) (map G2d43@gen-global G45ad@lex*) (G3097@make-export-subst G45be@exp-name* G45bd@exp-id*)))))) (G2ff6@chi-rhs* G45ac@rhs* G45af@r G45ae@mr))) (G2fe2@chi-expr* G45b0@init* G45af@r G45ae@mr)))) G45ba@G45b8 G45b9@G45b7)))) G45a4@G459e G45a3@G459d G45a2@G459c G45a1@G459b G45a0@G459a G459f@G4599)))) G4597@swap)) (lambda () (begin ((lambda (G45ea@t) (begin (G458f@G458b@inv-collector G4591@G458d@inv-collector) (set! G4591@G458d@inv-collector G45ea@t))) (G458f@G458b@inv-collector)) ((lambda (G45ec@t) (begin (G4590@G458c@vis-collector G4592@G458e@vis-collector) (set! G4592@G458e@vis-collector G45ec@t))) (G4590@G458c@vis-collector)))))) G302f@inv-collector G3031@vis-collector G4585@rtc G4586@vtc)) (map G4582@wrap G455e@b*) (map G4582@wrap G455c@main-exp*) (G302d@make-collector) (G302d@make-collector)))) '#f)) (G302b@make-top-rib G457c@subst-names G457b@subst-labels))) G4578@G4576 G4577@G4575)))) G4573@swap)) (lambda () (begin ((lambda (G45f0@t) (begin (G456b@G4567@imp-collector G456d@G4569@imp-collector) (set! G456d@G4569@imp-collector G45f0@t))) (G456b@G4567@imp-collector)) ((lambda (G45f2@t) (begin (G456c@G4568@top-level-context G456e@G456a@top-level-context) (set! G456e@G456a@top-level-context G45f2@t))) (G456c@G4568@top-level-context)))))) G3033@imp-collector G30bd@top-level-context G4566@itc '#f))) '#f))) (set! G303b@core-library-expander (lambda (G45f4@e G45f5@verify-name) (call-with-values (lambda () (G3027@parse-library G45f4@e)) (lambda (G45fc@G45f8 G45fd@G45f9 G45fe@G45fa G45ff@G45fb) ((lambda (G4604@b* G4605@imp* G4606@exp* G4607@name*) (call-with-values (lambda () (G3025@parse-library-name G4607@name*)) (lambda (G460e@G460c G460f@G460d) ((lambda (G4612@ver G4613@name) (begin (G45f5@verify-name G4613@name) (call-with-values (lambda () (G3039@library-body-expander G4613@name G4606@exp* G4605@imp* G4604@b* '#f)) (lambda (G461d@G4616 G461e@G4617 G461f@G4618 G4620@G4619 G4621@G461a G4622@G461b G4623@G461c) ((lambda (G462b@export-env G462c@export-subst G462d@visit-code G462e@invoke-code G462f@visit-req* G4630@invoke-req* G4631@imp*) (values G4613@name G4612@ver G4631@imp* G4630@invoke-req* G462f@visit-req* G462e@invoke-code G462d@visit-code G462c@export-subst G462b@export-env)) G4623@G461c G4622@G461b G4621@G461a G4620@G4619 G461f@G4618 G461e@G4617 G461d@G4616))))) G460f@G460d G460e@G460c)))) G45ff@G45fb G45fe@G45fa G45fd@G45f9 G45fc@G45f8))))) (set! G303d@parse-top-level-program (lambda (G4639@e*) ((lambda (G463b@t) ((lambda (G463d@ls/false) (if (if G463d@ls/false (begin '#f (apply (lambda (G463f@import G4640@imp* G4641@b*) (eq? (G30b5@syntax->datum G463f@import) 'import)) G463d@ls/false)) '#f) (apply (lambda (G4645@import G4646@imp* G4647@b*) (values G4646@imp* G4647@b*)) G463d@ls/false) ((lambda (G464b@t) ((lambda (G464d@ls/false) (if (if G464d@ls/false (begin '#f (apply (lambda (G464f@import G4650@x G4651@y) (eq? (G30b5@syntax->datum G464f@import) 'import)) G464d@ls/false)) '#f) (apply (lambda (G4655@import G4656@x G4657@y) (G30af@syntax-violation 'expander '"invalid syntax of top-level program" (G2dbf@syntax-car G4639@e*))) G464d@ls/false) ((lambda (G465b@t) ((lambda (G465d@ls/false) (if G465d@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G465d@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G465b@t))) (G2fc2@syntax-dispatch G465b@t '_))) G464b@t))) (G2fc2@syntax-dispatch G464b@t '((any . any) . any)))) G463b@t))) (G2fc2@syntax-dispatch G463b@t '((any . each-any) . each-any)))) G4639@e*))) (set! G303f@top-level-expander (lambda (G465f@e*) (call-with-values (lambda () (G303d@parse-top-level-program G465f@e*)) (lambda (G4663@G4661 G4664@G4662) ((lambda (G4667@b* G4668@imp*) (call-with-values (lambda () (G3039@library-body-expander '() '() G4668@imp* G4667@b* '#t)) (lambda (G4672@G466b G4673@G466c G4674@G466d G4675@G466e G4676@G466f G4677@G4670 G4678@G4671) ((lambda (G4680@export-env G4681@export-subst G4682@visit-code G4683@invoke-code G4684@visit-req* G4685@invoke-req* G4686@imp*) (values G4685@invoke-req* G4683@invoke-code)) G4678@G4671 G4677@G4670 G4676@G466f G4675@G466e G4674@G466d G4673@G466c G4672@G466b)))) G4664@G4662 G4663@G4661))))) (set! G3045@G3040 (make-record-type-descriptor 'env '#f 'G3043 '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G3047@G3042 '#f) (set! G3049@G3041 (make-record-constructor-descriptor G3045@G3040 '#f G3047@G3042)) (set! G304c@env? (record-predicate G3045@G3040)) (set! G304e@make-env (record-constructor G3049@G3041)) (set! G3050@env-names (record-accessor G3045@G3040 '0)) (set! G3052@env-labels (record-accessor G3045@G3040 '1)) (set! G3054@env-itc (record-accessor G3045@G3040 '2)) (set! G3056@set-env-names! (record-mutator G3045@G3040 '0)) (set! G3058@set-env-labels! (record-mutator G3045@G3040 '1)) (set! G305a@set-env-itc! (record-mutator G3045@G3040 '2)) (set! G305c@rp (G2964@G289a@make-record-printer 'env (lambda (G468e@x G468f@p G4690@wr) (display '"#<environment>" G468f@p)))) (set! G3062@G305d (make-record-type-descriptor 'interaction-env '#f 'G3060 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G3064@G305f '#f) (set! G3066@G305e (make-record-constructor-descriptor G3062@G305d '#f G3064@G305f)) (set! G3069@interaction-env? (record-predicate G3062@G305d)) (set! G306b@make-interaction-env (record-constructor G3066@G305e)) (set! G306d@interaction-env-rib (record-accessor G3062@G305d '0)) (set! G306f@interaction-env-r (record-accessor G3062@G305d '1)) (set! G3071@interaction-env-locs (record-accessor G3062@G305d '2)) (set! G3073@set-interaction-env-rib! (record-mutator G3062@G305d '0)) (set! G3075@set-interaction-env-r! (record-mutator G3062@G305d '1)) (set! G3077@set-interaction-env-locs! (record-mutator G3062@G305d '2)) (set! G3079@rp (G2964@G289a@make-record-printer 'interaction-env (lambda (G4694@x G4695@p G4696@wr) (display '"#<environment>" G4695@p)))) (set! G307b@interaction-environment-symbols (lambda () (G3083@environment-symbols (G30bb@interaction-environment)))) (set! G307d@environment-bindings (lambda (G469a@e) (vector->list (vector-map (lambda (G469c@name G469d@label) (G307f@parse-binding (cons G469c@name (G2bf5@G2a8b@imported-label->binding G469d@label)))) (G3050@env-names G469a@e) (G3052@env-labels G469a@e))))) (set! G307f@parse-binding (lambda (G46a0@b) (cons (car G46a0@b) ((lambda (G46a2@t) (if (memv G46a2@t '(core-prim global)) 'procedure (if (memv G46a2@t '(core-macro macro global-macro)) 'syntax (if (memv G46a2@t '($core-rtd)) 'record (if (eq? (car G46a0@b) (cadr G46a0@b)) 'syntax 'unknown))))) (cadr G46a0@b))))) (set! G3081@environment? (lambda (G46a4@x) ((lambda (G46a6@t) (if G46a6@t G46a6@t (begin '#f (G3069@interaction-env? G46a4@x)))) (G304c@env? G46a4@x)))) (set! G3083@environment-symbols (lambda (G46a8@x) (if (G304c@env? G46a8@x) (vector->list (G3050@env-names G46a8@x)) (if (G3069@interaction-env? G46a8@x) (map values (G2d5c@rib-sym* (G306d@interaction-env-rib G46a8@x))) (assertion-violation 'environment-symbols '"not an environment" G46a8@x))))) (set! G3085@environment (lambda G46aa@imp* ((lambda (G46ac@itc) ((lambda (G46b0@G46ae@imp-collector G46b1@G46af@imp-collector) ((lambda (G46b4@swap) (dynamic-wind G46b4@swap (lambda () (call-with-values (lambda () (G3029@parse-import-spec* G46aa@imp*)) (lambda (G46b8@G46b6 G46b9@G46b7) ((lambda (G46bc@subst-labels G46bd@subst-names) (G304e@make-env G46bd@subst-names G46bc@subst-labels G46ac@itc)) G46b9@G46b7 G46b8@G46b6)))) G46b4@swap)) (lambda () ((lambda (G46c0@t) (begin (G46b0@G46ae@imp-collector G46b1@G46af@imp-collector) (set! G46b1@G46af@imp-collector G46c0@t))) (G46b0@G46ae@imp-collector))))) G3033@imp-collector G46ac@itc)) (G302d@make-collector)))) (set! G3087@null-environment (lambda (G46c2@n) (begin (if (not (eqv? G46c2@n '5)) (assertion-violation 'null-environment '"not 5" G46c2@n) (void)) (G3085@environment '(psyntax null-environment-5))))) (set! G3089@scheme-report-environment (lambda (G46c4@n) (begin (if (not (eqv? G46c4@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G46c4@n) (void)) (G3085@environment '(psyntax scheme-report-environment-5))))) (set! G308b@expand (lambda (G46c6@x G46c7@env) (if (G304c@env? G46c7@env) ((lambda (G46ca@rib) ((lambda (G46cc@x G46cd@itc G46ce@rtc G46cf@vtc) ((lambda (G46d4@x) (begin (G2d7c@seal-rib! G46ca@rib) (values G46d4@x (G46ce@rtc)))) ((lambda (G46de@G46d6@top-level-context G46df@G46d7@inv-collector G46e0@G46d8@vis-collector G46e1@G46d9@imp-collector G46e2@G46da@top-level-context G46e3@G46db@inv-collector G46e4@G46dc@vis-collector G46e5@G46dd@imp-collector) ((lambda (G46ee@swap) (dynamic-wind G46ee@swap (lambda () (G2fe6@chi-expr G46cc@x '() '())) G46ee@swap)) (lambda () (begin ((lambda (G46f0@t) (begin (G46de@G46d6@top-level-context G46e2@G46da@top-level-context) (set! G46e2@G46da@top-level-context G46f0@t))) (G46de@G46d6@top-level-context)) ((lambda (G46f2@t) (begin (G46df@G46d7@inv-collector G46e3@G46db@inv-collector) (set! G46e3@G46db@inv-collector G46f2@t))) (G46df@G46d7@inv-collector)) ((lambda (G46f4@t) (begin (G46e0@G46d8@vis-collector G46e4@G46dc@vis-collector) (set! G46e4@G46dc@vis-collector G46f4@t))) (G46e0@G46d8@vis-collector)) ((lambda (G46f6@t) (begin (G46e1@G46d9@imp-collector G46e5@G46dd@imp-collector) (set! G46e5@G46dd@imp-collector G46f6@t))) (G46e1@G46d9@imp-collector)))))) G30bd@top-level-context G302f@inv-collector G3031@vis-collector G3033@imp-collector '#f G46ce@rtc G46cf@vtc G46cd@itc))) (G2d8f@make-stx G46c6@x G2d3d@top-mark* (list G46ca@rib) '()) (G3054@env-itc G46c7@env) (G302d@make-collector) (G302d@make-collector))) (G302b@make-top-rib (G3050@env-names G46c7@env) (G3052@env-labels G46c7@env))) (if (G3069@interaction-env? G46c7@env) ((lambda (G46f8@rib G46f9@r G46fa@rtc) ((lambda (G46fe@x) (call-with-values (lambda () ((lambda (G470a@G4702@top-level-context G470b@G4703@inv-collector G470c@G4704@vis-collector G470d@G4705@imp-collector G470e@G4706@top-level-context G470f@G4707@inv-collector G4710@G4708@vis-collector G4711@G4709@imp-collector) ((lambda (G471a@swap) (dynamic-wind G471a@swap (lambda () (G3037@chi-interaction-expr G46fe@x G46f8@rib G46f9@r)) G471a@swap)) (lambda () (begin ((lambda (G471c@t) (begin (G470a@G4702@top-level-context G470e@G4706@top-level-context) (set! G470e@G4706@top-level-context G471c@t))) (G470a@G4702@top-level-context)) ((lambda (G471e@t) (begin (G470b@G4703@inv-collector G470f@G4707@inv-collector) (set! G470f@G4707@inv-collector G471e@t))) (G470b@G4703@inv-collector)) ((lambda (G4720@t) (begin (G470c@G4704@vis-collector G4710@G4708@vis-collector) (set! G4710@G4708@vis-collector G4720@t))) (G470c@G4704@vis-collector)) ((lambda (G4722@t) (begin (G470d@G4705@imp-collector G4711@G4709@imp-collector) (set! G4711@G4709@imp-collector G4722@t))) (G470d@G4705@imp-collector)))))) G30bd@top-level-context G302f@inv-collector G3031@vis-collector G3033@imp-collector G46c7@env G46fa@rtc (G302d@make-collector) (G302d@make-collector))) (lambda (G4724@G4700 G4725@G4701) ((lambda (G4728@r^ G4729@e) (begin (G3075@set-interaction-env-r! G46c7@env G4728@r^) (values G4729@e (G46fa@rtc)))) G4725@G4701 G4724@G4700)))) (G2d8f@make-stx G46c6@x G2d3d@top-mark* (list G46f8@rib) '()))) (G306d@interaction-env-rib G46c7@env) (G306f@interaction-env-r G46c7@env) (G302d@make-collector)) (assertion-violation 'expand '"not an environment" G46c7@env))))) (set! G308d@eval (lambda (G472c@x G472d@env) (begin (if (not (G3081@environment? G472d@env)) (error 'eval '"not an environment" G472d@env) (void)) (call-with-values (lambda () (G308b@expand G472c@x G472d@env)) (lambda (G4732@G4730 G4733@G4731) ((lambda (G4736@invoke-req* G4737@x) (begin (for-each G2bf6@G2a8d@invoke-library G4736@invoke-req*) (eval-core (G29bf@G2973@expanded->core G4737@x)))) G4733@G4731 G4732@G4730)))))) (set! G308f@library-expander (lambda G479f ((lambda (G47a0) (if (= G47a0 '3) (apply (lambda (G473a@x G473b@filename G473c@verify-name) ((lambda (G4741@build-visit-code G4743@visit!) (begin (set! G4741@build-visit-code (lambda (G478d@macro*) (if (null? G478d@macro*) (G2d25@G2c97@build-void) (G2d24@G2c95@build-sequence '#f (map (lambda (G478f@x) ((lambda (G4791@loc G4792@src) (list 'set! G4791@loc G4792@src)) (car G478f@x) (cddr G478f@x))) G478d@macro*))))) (set! G4743@visit! (lambda (G4785@macro*) (for-each (lambda (G4787@x) ((lambda (G4789@loc G478a@proc) (set-symbol-value! G4789@loc G478a@proc)) (car G4787@x) (cadr G4787@x))) G4785@macro*))) (call-with-values (lambda () (G303b@core-library-expander G473a@x G473c@verify-name)) (lambda (G474d@G4744 G474e@G4745 G474f@G4746 G4750@G4747 G4751@G4748 G4752@G4749 G4753@G474a G4754@G474b G4755@G474c) ((lambda (G475f@export-env G4760@export-subst G4761@macro* G4762@invoke-code G4763@vis* G4764@inv* G4765@imp* G4766@ver G4767@name) ((lambda (G4771@id G4772@name G4773@ver G4774@imp* G4775@vis* G4776@inv* G4777@visit-proc G4778@invoke-proc G4779@visit-code G477a@invoke-code) (begin (G2bf4@G2a89@install-library G4771@id G4772@name G4773@ver G4774@imp* G4775@vis* G4776@inv* G4760@export-subst G475f@export-env G4777@visit-proc G4778@invoke-proc G4779@visit-code G477a@invoke-code '#t G473b@filename) (values G4771@id G4772@name G4773@ver G4774@imp* G4775@vis* G4776@inv* G477a@invoke-code G4779@visit-code G4760@export-subst G475f@export-env))) (gensym) G4767@name G4766@ver (map G2bfa@G2a95@library-spec G4765@imp*) (map G2bfa@G2a95@library-spec G4763@vis*) (map G2bfa@G2a95@library-spec G4764@inv*) (lambda () (G4743@visit! G4761@macro*)) (lambda () (eval-core (G29bf@G2973@expanded->core G4762@invoke-code))) (G4741@build-visit-code G4761@macro*) G4762@invoke-code)) G4755@G474c G4754@G474b G4753@G474a G4752@G4749 G4751@G4748 G4750@G4747 G474f@G4746 G474e@G4745 G474d@G4744))))) '#f '#f)) G479f) (if (= G47a0 '2) (apply (lambda (G4795@x G4796@filename) (G308f@library-expander G4795@x G4796@filename (lambda (G4799@x) (values)))) G479f) (if (= G47a0 '1) (apply (lambda (G479b@x) (G308f@library-expander G479b@x '#f (lambda (G479d@x) (values)))) G479f) (error 'apply '"invalid arg count"))))) (length G479f)))) (set! G3091@boot-library-expand (lambda (G47a1@x) (call-with-values (lambda () (G308f@library-expander G47a1@x)) (lambda (G47ad@G47a3 G47ae@G47a4 G47af@G47a5 G47b0@G47a6 G47b1@G47a7 G47b2@G47a8 G47b3@G47a9 G47b4@G47aa G47b5@G47ab G47b6@G47ac) ((lambda (G47c1@export-env G47c2@export-subst G47c3@visit-code G47c4@invoke-code G47c5@inv* G47c6@vis* G47c7@imp* G47c8@ver G47c9@name G47ca@id) (values G47c9@name G47c4@invoke-code G47c2@export-subst G47c1@export-env)) G47b6@G47ac G47b5@G47ab G47b4@G47aa G47b3@G47a9 G47b2@G47a8 G47b1@G47a7 G47b0@G47a6 G47af@G47a5 G47ae@G47a4 G47ad@G47a3))))) (set! G3093@rev-map-append (lambda (G47d5@f G47d6@ls G47d7@ac) (if (null? G47d6@ls) G47d7@ac (G3093@rev-map-append G47d5@f (cdr G47d6@ls) (cons (G47d5@f (car G47d6@ls)) G47d7@ac))))) (set! G3095@build-exports (lambda (G47db@lex*+loc* G47dc@init*) (G2d24@G2c95@build-sequence '#f (cons (G2d25@G2c97@build-void) (G3093@rev-map-append (lambda (G47df@x) (list 'set! (cdr G47df@x) (car G47df@x))) G47db@lex*+loc* G47dc@init*))))) (set! G3097@make-export-subst (lambda (G47e1@name* G47e2@id*) (map (lambda (G47e5@name G47e6@id) ((lambda (G47e9@label) (begin (if (not G47e9@label) (G30af@syntax-violation '#f '"cannot export unbound identifier" G47e6@id) (void)) (cons G47e5@name G47e9@label))) (G2ddf@id->label G47e6@id))) G47e1@name* G47e2@id*))) (set! G3099@make-export-env/macros (lambda (G47eb@lex* G47ec@loc* G47ed@r) ((lambda (G47f2@lookup) (begin (set! G47f2@lookup (lambda (G480f@x) ((letrec ((G4811@f (lambda (G4813@x G4814@lex* G4815@loc*) (if (pair? G4814@lex*) (if (eq? G4813@x (car G4814@lex*)) (car G4815@loc*) (G4811@f G4813@x (cdr G4814@lex*) (cdr G4815@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4811@f) G480f@x G47eb@lex* G47ec@loc*))) ((letrec ((G47f3@f (lambda (G47f5@r G47f6@env G47f7@global* G47f8@macro*) (if (null? G47f5@r) (values G47f6@env G47f7@global* G47f8@macro*) ((lambda (G47fd@x) ((lambda (G47ff@label G4800@b) ((lambda (G4803@t) (if (memv G4803@t '(lexical)) ((lambda (G4805@v) ((lambda (G4807@loc G4808@type) (G47f3@f (cdr G47f5@r) (cons (cons* G47ff@label G4808@type G4807@loc) G47f6@env) (cons (cons (G2f52@lexical-var G4805@v) G4807@loc) G47f7@global*) G47f8@macro*)) (G47f2@lookup (G2f52@lexical-var G4805@v)) (if (G2f54@lexical-mutable? G4805@v) 'mutable 'global))) (G2de9@binding-value G4800@b)) (if (memv G4803@t '(local-macro)) ((lambda (G480b@loc) (G47f3@f (cdr G47f5@r) (cons (cons* G47ff@label 'global-macro G480b@loc) G47f6@env) G47f7@global* (cons (cons G480b@loc (G2de9@binding-value G4800@b)) G47f8@macro*))) (gensym)) (if (memv G4803@t '(local-macro!)) ((lambda (G480d@loc) (G47f3@f (cdr G47f5@r) (cons (cons* G47ff@label 'global-macro! G480d@loc) G47f6@env) G47f7@global* (cons (cons G480d@loc (G2de9@binding-value G4800@b)) G47f8@macro*))) (gensym)) (if (memv G4803@t '($rtd $module)) (G47f3@f (cdr G47f5@r) (cons G47fd@x G47f6@env) G47f7@global* G47f8@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2de7@binding-type G4800@b) (G2de9@binding-value G4800@b))))))) (G2de7@binding-type G4800@b))) (car G47fd@x) (cdr G47fd@x))) (car G47f5@r)))))) G47f3@f) G47ed@r '() '() '()))) '#f))) (set! G309b@generate-temporaries (lambda (G4819@ls) ((lambda (G481b@t) ((lambda (G481d@ls/false) (if G481d@ls/false (apply (lambda (G481f@ls) (map (lambda (G4821@x) (G2d8f@make-stx ((lambda (G4823@x) (if ((lambda (G4825@t) (if G4825@t G4825@t (begin '#f (string? G4823@x)))) (symbol? G4823@x)) (gensym G4823@x) (gensym 't))) (G30b5@syntax->datum G4821@x)) G2d3d@top-mark* '() '())) G481f@ls)) G481d@ls/false) ((lambda (G4827@t) ((lambda (G4829@ls/false) (if G4829@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G4829@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G4827@t))) (G2fc2@syntax-dispatch G4827@t '_))) G481b@t))) (G2fc2@syntax-dispatch G481b@t 'each-any))) G4819@ls))) (set! G309d@free-identifier=? (lambda (G482b@x G482c@y) (if (G2dc5@id? G482b@x) (if (G2dc5@id? G482c@y) (G2dcd@free-id=? G482b@x G482c@y) (assertion-violation 'free-identifier=? '"not an identifier" G482c@y)) (assertion-violation 'free-identifier=? '"not an identifier" G482b@x)))) (set! G309f@bound-identifier=? (lambda (G482f@x G4830@y) (if (G2dc5@id? G482f@x) (if (G2dc5@id? G4830@y) (G2dcb@bound-id=? G482f@x G4830@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4830@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G482f@x)))) (set! G30a1@make-source-condition (lambda (G4833@x) ((lambda (G483d@G4838 G483f@G483a G4841@G4839 G4844@G4837 G4846@make-source-condition G4848@G4835 G484a@G4836 G484c@source-condition? G484e@source-filename G4850@source-character) (begin (set! G483d@G4838 (make-record-type-descriptor '&source-information &condition-rtd 'G483b '#f '#f '#((immutable file-name) (immutable character)))) (set! G483f@G483a '#f) (set! G4841@G4839 (make-record-constructor-descriptor G483d@G4838 &condition-rcd G483f@G483a)) (set! G4844@G4837 (record-predicate G483d@G4838)) (set! G4846@make-source-condition (record-constructor G4841@G4839)) (set! G4848@G4835 (record-accessor G483d@G4838 '0)) (set! G484a@G4836 (record-accessor G483d@G4838 '1)) (set! G484c@source-condition? (condition-predicate G483d@G4838)) (set! G484e@source-filename (condition-accessor G483d@G4838 G4848@G4835)) (set! G4850@source-character (condition-accessor G483d@G4838 G484a@G4836)) (if (pair? G4833@x) (G4846@make-source-condition (car G4833@x) (cdr G4833@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30a3@extract-position-condition (lambda (G4851@x) (G30a1@make-source-condition (G30a5@expression-position G4851@x)))) (set! G30a5@expression-position (lambda (G4853@x) (if (G2d8d@stx? G4853@x) (begin '#f ((lambda (G4855@x) (if (G295c@G288a@annotation? G4855@x) (begin '#f (G295d@G288c@annotation-source G4855@x)) '#f)) (G2d91@stx-expr G4853@x))) '#f))) (set! G30a7@assertion-error (lambda (G4857@expr G4858@pos) (raise (condition (G4b55@G4a71@make-assertion-violation) (G4b63@G4a9b@make-who-condition 'assert) (G4b35@G4a13@make-message-condition '"assertion failed") (G4b5b@G4a84@make-irritants-condition (list G4857@expr)) (G30a1@make-source-condition G4858@pos))))) (set! G30a9@syntax-error (lambda (G485b@x . G485d@args) (begin (if (not (for-all string? G485d@args)) (assertion-violation 'syntax-error '"invalid argument" G485d@args) (void)) (raise (condition (G4b35@G4a13@make-message-condition (if (null? G485d@args) '"invalid syntax" (apply string-append G485d@args))) (G4b7d@G4ae9@make-syntax-violation (G30b5@syntax->datum G485b@x) '#f) (G30a3@extract-position-condition G485b@x) (G30ab@extract-trace G485b@x)))))) (set! G30ab@extract-trace (lambda (G485f@x) ((lambda (G4868@G4863 G486a@G4865 G486c@G4864 G486f@G4862 G4871@make-trace G4873@G4861 G4875@trace? G4877@trace-form) (begin (set! G4868@G4863 (make-record-type-descriptor '&trace &condition-rtd 'G4866 '#f '#f '#((immutable form)))) (set! G486a@G4865 '#f) (set! G486c@G4864 (make-record-constructor-descriptor G4868@G4863 &condition-rcd G486a@G4865)) (set! G486f@G4862 (record-predicate G4868@G4863)) (set! G4871@make-trace (record-constructor G486c@G4864)) (set! G4873@G4861 (record-accessor G4868@G4863 '0)) (set! G4875@trace? (condition-predicate G4868@G4863)) (set! G4877@trace-form (condition-accessor G4868@G4863 G4873@G4861)) ((letrec ((G4878@f (lambda (G487a@x) (if (G2d8d@stx? G487a@x) (apply condition (G4871@make-trace G487a@x) (map G4878@f (G2d97@stx-ae* G487a@x))) (if (G295c@G288a@annotation? G487a@x) (G4871@make-trace (G2d8f@make-stx G487a@x '() '() '())) (condition)))))) G4878@f) G485f@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30ad@syntax-violation* (lambda (G487c@who G487d@msg G487e@form G487f@condition-object) (begin (if (not (string? G487d@msg)) (assertion-violation 'syntax-violation '"message is not a string" G487d@msg) (void)) ((lambda (G4884@who) (raise (condition (if G4884@who (G4b63@G4a9b@make-who-condition G4884@who) (condition)) (G4b35@G4a13@make-message-condition G487d@msg) G487f@condition-object (G30a3@extract-position-condition G487e@form) (G30ab@extract-trace G487e@form)))) (if ((lambda (G4886@t) (if G4886@t G4886@t (begin '#f (symbol? G487c@who)))) (string? G487c@who)) G487c@who (if (not G487c@who) ((lambda (G4888@t) ((lambda (G488a@ls/false) (if (if G488a@ls/false (begin '#f (apply (lambda (G488c@id) (G2dc5@id? G488c@id)) G488a@ls/false)) '#f) (apply (lambda (G488e@id) (G30b5@syntax->datum G488e@id)) G488a@ls/false) ((lambda (G4890@t) ((lambda (G4892@ls/false) (if (if G4892@ls/false (begin '#f (apply (lambda (G4894@id G4895@rest) (G2dc5@id? G4894@id)) G4892@ls/false)) '#f) (apply (lambda (G4898@id G4899@rest) (G30b5@syntax->datum G4898@id)) G4892@ls/false) ((lambda (G489c@t) ((lambda (G489e@ls/false) (if G489e@ls/false (apply (lambda () '#f) G489e@ls/false) (G30af@syntax-violation '#f '"invalid syntax" G489c@t))) (G2fc2@syntax-dispatch G489c@t '_))) G4890@t))) (G2fc2@syntax-dispatch G4890@t '(any . any)))) G4888@t))) (G2fc2@syntax-dispatch G4888@t 'any))) G487e@form) (assertion-violation 'syntax-violation '"invalid who argument" G487c@who))))))) (set! G30af@syntax-violation (lambda G48ae ((lambda (G48af) (if (= G48af '3) (apply (lambda (G48a0@who G48a1@msg G48a2@form) (G30af@syntax-violation G48a0@who G48a1@msg G48a2@form '#f)) G48ae) (if (= G48af '4) (apply (lambda (G48a6@who G48a7@msg G48a8@form G48a9@subform) (G30ad@syntax-violation* G48a6@who G48a7@msg G48a8@form (G4b7d@G4ae9@make-syntax-violation (G30b5@syntax->datum G48a8@form) (G30b5@syntax->datum G48a9@subform)))) G48ae) (error 'apply '"invalid arg count")))) (length G48ae)))) (set! G30b1@identifier? (lambda (G48b0@x) (G2dc5@id? G48b0@x))) (set! G30b3@datum->syntax (lambda (G48b2@id G48b3@datum) (if (G2dc5@id? G48b2@id) (G2da3@datum->stx G48b2@id G48b3@datum) (assertion-violation 'datum->syntax '"not an identifier" G48b2@id)))) (set! G30b5@syntax->datum (lambda (G48b6@x) (G2ddb@stx->datum G48b6@x))) (set! G30b7@compile-r6rs-top-level (lambda (G48b8@x*) (call-with-values (lambda () (G303f@top-level-expander G48b8@x*)) (lambda (G48bc@G48ba G48bd@G48bb) ((lambda (G48c0@invoke-code G48c1@lib*) (lambda () (begin (for-each G2bf6@G2a8d@invoke-library G48c1@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29bf@G2973@expanded->core G48c0@invoke-code)) (void)) (eval-core (G29bf@G2973@expanded->core G48c0@invoke-code))))) G48bd@G48bb G48bc@G48ba))))) (set! G30b9@pre-compile-r6rs-top-level (lambda (G48c4@x*) (call-with-values (lambda () (G303f@top-level-expander G48c4@x*)) (lambda (G48c8@G48c6 G48c9@G48c7) ((lambda (G48cc@invoke-code G48cd@lib*) (begin (for-each G2bf6@G2a8d@invoke-library G48cd@lib*) (G2965@G289c@compile-core (G29bf@G2973@expanded->core G48cc@invoke-code)))) G48c9@G48c7 G48c8@G48c6))))) (set! G30bb@interaction-environment ((lambda (G48d0@the-env) (lambda () ((lambda (G48d2@t) (if G48d2@t G48d2@t (begin '#f ((lambda (G48d4@lib G48d5@rib) (begin ((lambda (G48d8@subst) (begin (G2d66@set-rib-sym*! G48d5@rib (map car G48d8@subst)) (G2d68@set-rib-mark**! G48d5@rib (map (lambda (G48da@x) G2d3d@top-mark*) G48d8@subst)) (G2d6a@set-rib-label*! G48d5@rib (map cdr G48d8@subst)))) (G2bcb@G2a37@library-subst G48d4@lib)) ((lambda (G48dc@env) (begin (set! G48d0@the-env G48dc@env) G48dc@env)) (G306b@make-interaction-env G48d5@rib '() '())))) (G2bef@G2a7f@find-library-by-name '(mosh interaction)) (G2d72@make-cache-rib))))) G48d0@the-env))) '#f)) (set! G30bd@top-level-context (G2967@G28a0@make-parameter '#f)) (begin (set! G49eb@G30bd@top-level-context G30bd@top-level-context) (set! G49ea@G30bb@interaction-environment G30bb@interaction-environment) (set! G49e9@G30b9@pre-compile-r6rs-top-level G30b9@pre-compile-r6rs-top-level) (set! G49e8@G30b7@compile-r6rs-top-level G30b7@compile-r6rs-top-level) (set! G49e7@G30b5@syntax->datum G30b5@syntax->datum) (set! G49e6@G30b3@datum->syntax G30b3@datum->syntax) (set! G49e5@G30b1@identifier? G30b1@identifier?) (set! G49e4@G30af@syntax-violation G30af@syntax-violation) (set! G49e3@G30ad@syntax-violation* G30ad@syntax-violation*) (set! G49e2@G30ab@extract-trace G30ab@extract-trace) (set! G49e1@G30a9@syntax-error G30a9@syntax-error) (set! G49e0@G30a7@assertion-error G30a7@assertion-error) (set! G49df@G30a5@expression-position G30a5@expression-position) (set! G49de@G30a3@extract-position-condition G30a3@extract-position-condition) (set! G49dd@G30a1@make-source-condition G30a1@make-source-condition) (set! G49dc@G309f@bound-identifier=? G309f@bound-identifier=?) (set! G49db@G309d@free-identifier=? G309d@free-identifier=?) (set! G49da@G309b@generate-temporaries G309b@generate-temporaries) (set! G49d9@G3099@make-export-env/macros G3099@make-export-env/macros) (set! G49d8@G3097@make-export-subst G3097@make-export-subst) (set! G49d7@G3095@build-exports G3095@build-exports) (set! G49d6@G3093@rev-map-append G3093@rev-map-append) (set! G49d5@G3091@boot-library-expand G3091@boot-library-expand) (set! G49d4@G308f@library-expander G308f@library-expander) (set! G49d3@G308d@eval G308d@eval) (set! G49d2@G308b@expand G308b@expand) (set! G49d1@G3089@scheme-report-environment G3089@scheme-report-environment) (set! G49d0@G3087@null-environment G3087@null-environment) (set! G49cf@G3085@environment G3085@environment) (set! G49ce@G3083@environment-symbols G3083@environment-symbols) (set! G49cd@G3081@environment? G3081@environment?) (set! G49cc@G307f@parse-binding G307f@parse-binding) (set! G49cb@G307d@environment-bindings G307d@environment-bindings) (set! G49ca@G307b@interaction-environment-symbols G307b@interaction-environment-symbols) (set! G49c9@G3079@rp G3079@rp) (set! G49c8@G3077@set-interaction-env-locs! G3077@set-interaction-env-locs!) (set! G49c7@G3075@set-interaction-env-r! G3075@set-interaction-env-r!) (set! G49c6@G3073@set-interaction-env-rib! G3073@set-interaction-env-rib!) (set! G49c5@G3071@interaction-env-locs G3071@interaction-env-locs) (set! G49c4@G306f@interaction-env-r G306f@interaction-env-r) (set! G49c3@G306d@interaction-env-rib G306d@interaction-env-rib) (set! G49c2@G306b@make-interaction-env G306b@make-interaction-env) (set! G49c1@G3069@interaction-env? G3069@interaction-env?) (set! G49c0@G3066@G305e G3066@G305e) (set! G49bf@G3064@G305f G3064@G305f) (set! G49be@G3062@G305d G3062@G305d) (set! G49bd@G305c@rp G305c@rp) (set! G49bc@G305a@set-env-itc! G305a@set-env-itc!) (set! G49bb@G3058@set-env-labels! G3058@set-env-labels!) (set! G49ba@G3056@set-env-names! G3056@set-env-names!) (set! G49b9@G3054@env-itc G3054@env-itc) (set! G49b8@G3052@env-labels G3052@env-labels) (set! G49b7@G3050@env-names G3050@env-names) (set! G49b6@G304e@make-env G304e@make-env) (set! G49b5@G304c@env? G304c@env?) (set! G49b4@G3049@G3041 G3049@G3041) (set! G49b3@G3047@G3042 G3047@G3042) (set! G49b2@G3045@G3040 G3045@G3040) (set! G49b1@G303f@top-level-expander G303f@top-level-expander) (set! G49b0@G303d@parse-top-level-program G303d@parse-top-level-program) (set! G49af@G303b@core-library-expander G303b@core-library-expander) (set! G49ae@G3039@library-body-expander G3039@library-body-expander) (set! G49ad@G3037@chi-interaction-expr G3037@chi-interaction-expr) (set! G49ac@G3035@chi-library-internal G3035@chi-library-internal) (set! G49ab@G3033@imp-collector G3033@imp-collector) (set! G49aa@G3031@vis-collector G3031@vis-collector) (set! G49a9@G302f@inv-collector G302f@inv-collector) (set! G49a8@G302d@make-collector G302d@make-collector) (set! G49a7@G302b@make-top-rib G302b@make-top-rib) (set! G49a6@G3029@parse-import-spec* G3029@parse-import-spec*) (set! G49a5@G3027@parse-library G3027@parse-library) (set! G49a4@G3025@parse-library-name G3025@parse-library-name) (set! G49a3@G3023@parse-exports G3023@parse-exports) (set! G49a2@G3021@expand-transformer G3021@expand-transformer) (set! G49a1@G301f@chi-body* G301f@chi-body*) (set! G49a0@G301d@chi-internal-module G301d@chi-internal-module) (set! G499f@G301b@module-interface-exp-id* G301b@module-interface-exp-id*) (set! G499e@G3019@set-module-interface-exp-lab-vec! G3019@set-module-interface-exp-lab-vec!) (set! G499d@G3017@set-module-interface-exp-id-vec! G3017@set-module-interface-exp-id-vec!) (set! G499c@G3015@set-module-interface-first-mark! G3015@set-module-interface-first-mark!) (set! G499b@G3013@module-interface-exp-lab-vec G3013@module-interface-exp-lab-vec) (set! G499a@G3011@module-interface-exp-id-vec G3011@module-interface-exp-id-vec) (set! G4999@G300f@module-interface-first-mark G300f@module-interface-first-mark) (set! G4998@G300d@make-module-interface G300d@make-module-interface) (set! G4997@G300b@module-interface? G300b@module-interface?) (set! G4996@G3008@G3000 G3008@G3000) (set! G4995@G3006@G3001 G3006@G3001) (set! G4994@G3004@G2fff G3004@G2fff) (set! G4993@G2ffe@parse-module G2ffe@parse-module) (set! G4992@G2ffc@chi-internal G2ffc@chi-internal) (set! G4991@G2ffa@find-dups G2ffa@find-dups) (set! G4990@G2ff8@find-bound=? G2ff8@find-bound=?) (set! G498f@G2ff6@chi-rhs* G2ff6@chi-rhs*) (set! G498e@G2ff4@expand-interaction-rhs*/init* G2ff4@expand-interaction-rhs*/init*) (set! G498d@G2ff2@chi-rhs G2ff2@chi-rhs) (set! G498c@G2ff0@chi-defun G2ff0@chi-defun) (set! G498b@G2fee@chi-lambda-clause* G2fee@chi-lambda-clause*) (set! G498a@G2fec@chi-lambda-clause G2fec@chi-lambda-clause) (set! G4989@G2fea@verify-formals G2fea@verify-formals) (set! G4988@G2fe8@chi-set! G2fe8@chi-set!) (set! G4987@G2fe6@chi-expr G2fe6@chi-expr) (set! G4986@G2fe4@chi-application G2fe4@chi-application) (set! G4985@G2fe2@chi-expr* G2fe2@chi-expr*) (set! G4984@G2fe0@chi-global-macro G2fe0@chi-global-macro) (set! G4983@G2fde@chi-local-macro G2fde@chi-local-macro) (set! G4982@G2fdc@chi-macro G2fdc@chi-macro) (set! G4981@G2fda@do-macro-call G2fda@do-macro-call) (set! G4980@G2fd8@local-macro-transformer G2fd8@local-macro-transformer) (set! G497f@G2fd6@macro-transformer G2fd6@macro-transformer) (set! G497e@G2fd4@symbol-macro G2fd4@symbol-macro) (set! G497d@G2fd2@file-options-macro G2fd2@file-options-macro) (set! G497c@G2fd0@core-macro-transformer G2fd0@core-macro-transformer) (set! G497b@G2fce@syntax-transformer G2fce@syntax-transformer) (set! G497a@G2fcc@ellipsis-map G2fcc@ellipsis-map) (set! G4979@G2fca@syntax-case-transformer G2fca@syntax-case-transformer) (set! G4978@G2fc8@verify-literals G2fc8@verify-literals) (set! G4977@G2fc6@underscore? G2fc6@underscore?) (set! G4976@G2fc4@ellipsis? G2fc4@ellipsis?) (set! G4975@G2fc2@syntax-dispatch G2fc2@syntax-dispatch) (set! G4974@G2fc0@convert-pattern G2fc0@convert-pattern) (set! G4973@G2fbe@foreign-call-transformer G2fbe@foreign-call-transformer) (set! G4972@G2fbc@parameterize-macro G2fbc@parameterize-macro) (set! G4971@G2fba@incorrect-usage-macro G2fba@incorrect-usage-macro) (set! G4970@G2fb8@define-condition-type-macro G2fb8@define-condition-type-macro) (set! G496f@G2fb6@define-record-type-macro G2fb6@define-record-type-macro) (set! G496e@G2fb4@define-struct-macro G2fb4@define-struct-macro) (set! G496d@G2fb2@quasisyntax-macro G2fb2@quasisyntax-macro) (set! G496c@G2fb0@quasiquote-macro G2fb0@quasiquote-macro) (set! G496b@G2fae@syntax-rules-macro G2fae@syntax-rules-macro) (set! G496a@G2fac@include-into-macro G2fac@include-into-macro) (set! G4969@G2faa@include-macro G2faa@include-macro) (set! G4968@G2fa8@do-include G2fa8@do-include) (set! G4967@G2fa6@cond-macro G2fa6@cond-macro) (set! G4966@G2fa4@and-macro G2fa4@and-macro) (set! G4965@G2fa2@or-macro G2fa2@or-macro) (set! G4964@G2fa0@let*-macro G2fa0@let*-macro) (set! G4963@G2f9e@do-macro G2f9e@do-macro) (set! G4962@G2f9c@identifier-syntax-macro G2f9c@identifier-syntax-macro) (set! G4961@G2f9a@endianness-macro G2f9a@endianness-macro) (set! G4960@G2f98@assert-macro G2f98@assert-macro) (set! G495f@G2f96@delay-macro G2f96@delay-macro) (set! G495e@G2f94@time-macro G2f94@time-macro) (set! G495d@G2f92@define-enumeration-macro G2f92@define-enumeration-macro) (set! G495c@G2f90@guard-macro G2f90@guard-macro) (set! G495b@G2f8e@trace-letrec-syntax-macro G2f8e@trace-letrec-syntax-macro) (set! G495a@G2f8c@trace-let-syntax-macro G2f8c@trace-let-syntax-macro) (set! G4959@G2f8a@trace-let/rec-syntax G2f8a@trace-let/rec-syntax) (set! G4958@G2f88@trace-define-syntax-macro G2f88@trace-define-syntax-macro) (set! G4957@G2f86@trace-define-macro G2f86@trace-define-macro) (set! G4956@G2f84@trace-lambda-macro G2f84@trace-lambda-macro) (set! G4955@G2f82@let*-values-macro G2f82@let*-values-macro) (set! G4954@G2f80@let-values-macro G2f80@let-values-macro) (set! G4953@G2f7e@let-macro G2f7e@let-macro) (set! G4952@G2f7c@invalid-fmls-error G2f7c@invalid-fmls-error) (set! G4951@G2f7a@with-syntax-macro G2f7a@with-syntax-macro) (set! G4950@G2f78@bless G2f78@bless) (set! G494f@G2f76@lambda-transformer G2f76@lambda-transformer) (set! G494e@G2f74@case-lambda-transformer G2f74@case-lambda-transformer) (set! G494d@G2f72@quote-transformer G2f72@quote-transformer) (set! G494c@G2f70@case-macro G2f70@case-macro) (set! G494b@G2f6e@if-transformer G2f6e@if-transformer) (set! G494a@G2f6c@unless-macro G2f6c@unless-macro) (set! G4949@G2f6a@when-macro G2f6a@when-macro) (set! G4948@G2f68@record-constructor-descriptor-transformer G2f68@record-constructor-descriptor-transformer) (set! G4947@G2f66@record-type-descriptor-transformer G2f66@record-type-descriptor-transformer) (set! G4946@G2f64@type-descriptor-transformer G2f64@type-descriptor-transformer) (set! G4945@G2f62@fluid-let-syntax-transformer G2f62@fluid-let-syntax-transformer) (set! G4944@G2f60@letrec*-transformer G2f60@letrec*-transformer) (set! G4943@G2f5e@letrec-transformer G2f5e@letrec-transformer) (set! G4942@G2f5c@letrec-helper G2f5c@letrec-helper) (set! G4941@G2f5a@add-lexicals G2f5a@add-lexicals) (set! G4940@G2f58@add-lexical G2f58@add-lexical) (set! G493f@G2f56@set-lexical-mutable! G2f56@set-lexical-mutable!) (set! G493e@G2f54@lexical-mutable? G2f54@lexical-mutable?) (set! G493d@G2f52@lexical-var G2f52@lexical-var) (set! G493c@G2f50@scheme-stx G2f50@scheme-stx) (set! G493b@G2f4e@scheme-stx-hashtable G2f4e@scheme-stx-hashtable) (set! G493a@G2f4c@parse-define-syntax G2f4c@parse-define-syntax) (set! G4939@G2f4a@parse-define G2f4a@parse-define) (set! G4938@G2e05@make-eval-transformer G2e05@make-eval-transformer) (set! G4937@G2e03@variable-transformer-procedure G2e03@variable-transformer-procedure) (set! G4936@G2e01@variable-transformer? G2e01@variable-transformer?) (set! G4935@G2dff@make-variable-transformer G2dff@make-variable-transformer) (set! G4934@G2dfd@sanitize-binding G2dfd@sanitize-binding) (set! G4933@G2ded@syntax-type G2ded@syntax-type) (set! G4932@G2deb@raise-unbound-error G2deb@raise-unbound-error) (set! G4931@G2de9@binding-value G2de9@binding-value) (set! G4930@G2de7@binding-type G2de7@binding-type) (set! G492f@G2de5@make-binding G2de5@make-binding) (set! G492e@G2de3@label->binding G2de3@label->binding) (set! G492d@G2de1@id->real-label G2de1@id->real-label) (set! G492c@G2ddf@id->label G2ddf@id->label) (set! G492b@G2ddd@same-marks*? G2ddd@same-marks*?) (set! G492a@G2ddb@stx->datum G2ddb@stx->datum) (set! G4929@G2dd9@strip G2dd9@strip) (set! G4928@G2dd7@strip-annotations G2dd7@strip-annotations) (set! G4927@G2dd5@self-evaluating? G2dd5@self-evaluating?) (set! G4926@G2dd3@bound-id-member? G2dd3@bound-id-member?) (set! G4925@G2dd1@distinct-bound-ids? G2dd1@distinct-bound-ids?) (set! G4924@G2dcf@valid-bound-ids? G2dcf@valid-bound-ids?) (set! G4923@G2dcd@free-id=? G2dcd@free-id=?) (set! G4922@G2dcb@bound-id=? G2dcb@bound-id=?) (set! G4921@G2dc9@same-marks? G2dc9@same-marks?) (set! G4920@G2dc7@id->sym G2dc7@id->sym) (set! G491f@G2dc5@id? G2dc5@id?) (set! G491e@G2dc3@syntax->list G2dc3@syntax->list) (set! G491d@G2dc1@syntax-cdr G2dc1@syntax-cdr) (set! G491c@G2dbf@syntax-car G2dbf@syntax-car) (set! G491b@G2dbd@syntax-list? G2dbd@syntax-list?) (set! G491a@G2dbb@syntax-null? G2dbb@syntax-null?) (set! G4919@G2db9@syntax-vector? G2db9@syntax-vector?) (set! G4918@G2db7@syntax-pair? G2db7@syntax-pair?) (set! G4917@G2db5@syntax-vector->list G2db5@syntax-vector->list) (set! G4916@G2db3@syntax-kind? G2db3@syntax-kind?) (set! G4915@G2db1@add-subst G2db1@add-subst) (set! G4914@G2daf@add-mark G2daf@add-mark) (set! G4913@G2dad@mkstx G2dad@mkstx) (set! G4912@G2dab@join-wraps G2dab@join-wraps) (set! G4911@G2da9@anti-mark? G2da9@anti-mark?) (set! G4910@G2da7@anti-mark G2da7@anti-mark) (set! G490f@G2da5@gen-mark G2da5@gen-mark) (set! G490e@G2da3@datum->stx G2da3@datum->stx) (set! G490d@G2da1@rp G2da1@rp) (set! G490c@G2d9f@set-stx-ae*! G2d9f@set-stx-ae*!) (set! G490b@G2d9d@set-stx-subst*! G2d9d@set-stx-subst*!) (set! G490a@G2d9b@set-stx-mark*! G2d9b@set-stx-mark*!) (set! G4909@G2d99@set-stx-expr! G2d99@set-stx-expr!) (set! G4908@G2d97@stx-ae* G2d97@stx-ae*) (set! G4907@G2d95@stx-subst* G2d95@stx-subst*) (set! G4906@G2d93@stx-mark* G2d93@stx-mark*) (set! G4905@G2d91@stx-expr G2d91@stx-expr) (set! G4904@G2d8f@make-stx G2d8f@make-stx) (set! G4903@G2d8d@stx? G2d8d@stx?) (set! G4902@G2d8a@G2d82 G2d8a@G2d82) (set! G4901@G2d88@G2d83 G2d88@G2d83) (set! G4900@G2d86@G2d81 G2d86@G2d81) (set! G48ff@G2d80@make-full-rib G2d80@make-full-rib) (set! G48fe@G2d7e@unseal-rib! G2d7e@unseal-rib!) (set! G48fd@G2d7c@seal-rib! G2d7c@seal-rib!) (set! G48fc@G2d7a@make-rib-map G2d7a@make-rib-map) (set! G48fb@G2d78@extend-rib/nc! G2d78@extend-rib/nc!) (set! G48fa@G2d76@extend-rib! G2d76@extend-rib!) (set! G48f9@G2d74@find-label G2d74@find-label) (set! G48f8@G2d72@make-cache-rib G2d72@make-cache-rib) (set! G48f7@G2d70@make-empty-rib G2d70@make-empty-rib) (set! G48f6@G2d6e@set-rib-cache! G2d6e@set-rib-cache!) (set! G48f5@G2d6c@set-rib-sealed/freq! G2d6c@set-rib-sealed/freq!) (set! G48f4@G2d6a@set-rib-label*! G2d6a@set-rib-label*!) (set! G48f3@G2d68@set-rib-mark**! G2d68@set-rib-mark**!) (set! G48f2@G2d66@set-rib-sym*! G2d66@set-rib-sym*!) (set! G48f1@G2d64@rib-cache G2d64@rib-cache) (set! G48f0@G2d62@rib-sealed/freq G2d62@rib-sealed/freq) (set! G48ef@G2d60@rib-label* G2d60@rib-label*) (set! G48ee@G2d5e@rib-mark** G2d5e@rib-mark**) (set! G48ed@G2d5c@rib-sym* G2d5c@rib-sym*) (set! G48ec@G2d5a@make-rib G2d5a@make-rib) (set! G48eb@G2d58@rib? G2d58@rib?) (set! G48ea@G2d55@G2d4d G2d55@G2d4d) (set! G48e9@G2d53@G2d4e G2d53@G2d4e) (set! G48e8@G2d51@G2d4c G2d51@G2d4c) (set! G48e7@G2d4b@gen-define-label G2d4b@gen-define-label) (set! G48e6@G2d49@gen-define-label+loc G2d49@gen-define-label+loc) (set! G48e5@G2d47@gen-top-level-label G2d47@gen-top-level-label) (set! G48e4@G2d45@gen-label G2d45@gen-label) (set! G48e3@G2d43@gen-global G2d43@gen-global) (set! G48e2@G2d41@gen-lexical G2d41@gen-lexical) (set! G48e1@G2d3f@top-marked? G2d3f@top-marked?) (set! G48e0@G2d3d@top-mark* G2d3d@top-mark*) (set! G48df@G2d38@set-union G2d38@set-union) (set! G48de@G2d36@set-cons G2d36@set-cons) (G2bec@G2a79@current-library-expander G308f@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G49f5@G49f0 G49f7@G49f2 G49f9@G49f1 G49fc@&condition? G49fe@make-&condition G4a00@&condition-rtd G4a02@&condition-rcd G4a0a@G4a05 G4a0c@G4a07 G4a0e@G4a06 G4a11@G4a04 G4a13@make-message-condition G4a15@G4a03 G4a17@message-condition? G4a19@condition-message G4a20@G4a1b G4a22@G4a1d G4a24@G4a1c G4a27@G4a1a G4a29@make-warning G4a2b@warning? G4a32@G4a2d G4a34@G4a2f G4a36@G4a2e G4a39@G4a2c G4a3b@make-serious-condition G4a3d@serious-condition? G4a44@G4a3f G4a46@G4a41 G4a48@G4a40 G4a4b@G4a3e G4a4d@make-error G4a4f@error? G4a56@G4a51 G4a58@G4a53 G4a5a@G4a52 G4a5d@G4a50 G4a5f@make-violation G4a61@violation? G4a68@G4a63 G4a6a@G4a65 G4a6c@G4a64 G4a6f@G4a62 G4a71@make-assertion-violation G4a73@assertion-violation? G4a7b@G4a76 G4a7d@G4a78 G4a7f@G4a77 G4a82@G4a75 G4a84@make-irritants-condition G4a86@G4a74 G4a88@irritants-condition? G4a8a@condition-irritants G4a92@G4a8d G4a94@G4a8f G4a96@G4a8e G4a99@G4a8c G4a9b@make-who-condition G4a9d@G4a8b G4a9f@who-condition? G4aa1@condition-who G4aa8@G4aa3 G4aaa@G4aa5 G4aac@G4aa4 G4aaf@G4aa2 G4ab1@make-non-continuable-violation G4ab3@non-continuable-violation? G4aba@G4ab5 G4abc@G4ab7 G4abe@G4ab6 G4ac1@G4ab4 G4ac3@make-implementation-restriction-violation G4ac5@implementation-restriction-violation? G4acc@G4ac7 G4ace@G4ac9 G4ad0@G4ac8 G4ad3@G4ac6 G4ad5@make-lexical-violation G4ad7@lexical-violation? G4ae0@G4adb G4ae2@G4add G4ae4@G4adc G4ae7@G4ada G4ae9@make-syntax-violation G4aeb@G4ad8 G4aed@G4ad9 G4aef@syntax-violation? G4af1@syntax-violation-form G4af3@syntax-violation-subform G4afa@G4af5 G4afc@G4af7 G4afe@G4af6 G4b01@G4af4 G4b03@make-undefined-violation G4b05@undefined-violation? G4b0c@G4b07 G4b0e@G4b09 G4b10@G4b08 G4b13@G4b06 G4b15@make-no-infinities-violation G4b17@no-infinities-violation? G4b1e@G4b19 G4b20@G4b1b G4b22@G4b1a G4b25@G4b18 G4b27@make-no-nans-violation G4b29@no-nans-violation?) (begin (set! G49f5@G49f0 (make-record-type-descriptor '&condition '#f 'G49f3 '#f '#f '#())) (set! G49f7@G49f2 '#f) (set! G49f9@G49f1 (make-record-constructor-descriptor G49f5@G49f0 '#f G49f7@G49f2)) (set! G49fc@&condition? (record-predicate G49f5@G49f0)) (set! G49fe@make-&condition (record-constructor G49f9@G49f1)) (set! G4a00@&condition-rtd G49f5@G49f0) (set! G4a02@&condition-rcd G49f9@G49f1) (set! G4a0a@G4a05 (make-record-type-descriptor '&message G49f5@G49f0 'G4a08 '#f '#f '#((immutable message)))) (set! G4a0c@G4a07 '#f) (set! G4a0e@G4a06 (make-record-constructor-descriptor G4a0a@G4a05 G49f9@G49f1 G4a0c@G4a07)) (set! G4a11@G4a04 (record-predicate G4a0a@G4a05)) (set! G4a13@make-message-condition (record-constructor G4a0e@G4a06)) (set! G4a15@G4a03 (record-accessor G4a0a@G4a05 '0)) (set! G4a17@message-condition? (condition-predicate G4a0a@G4a05)) (set! G4a19@condition-message (condition-accessor G4a0a@G4a05 G4a15@G4a03)) (set! G4a20@G4a1b (make-record-type-descriptor '&warning G49f5@G49f0 'G4a1e '#f '#f '#())) (set! G4a22@G4a1d '#f) (set! G4a24@G4a1c (make-record-constructor-descriptor G4a20@G4a1b G49f9@G49f1 G4a22@G4a1d)) (set! G4a27@G4a1a (record-predicate G4a20@G4a1b)) (set! G4a29@make-warning (record-constructor G4a24@G4a1c)) (set! G4a2b@warning? (condition-predicate G4a20@G4a1b)) (set! G4a32@G4a2d (make-record-type-descriptor '&serious G49f5@G49f0 'G4a30 '#f '#f '#())) (set! G4a34@G4a2f '#f) (set! G4a36@G4a2e (make-record-constructor-descriptor G4a32@G4a2d G49f9@G49f1 G4a34@G4a2f)) (set! G4a39@G4a2c (record-predicate G4a32@G4a2d)) (set! G4a3b@make-serious-condition (record-constructor G4a36@G4a2e)) (set! G4a3d@serious-condition? (condition-predicate G4a32@G4a2d)) (set! G4a44@G4a3f (make-record-type-descriptor '&error G4a32@G4a2d 'G4a42 '#f '#f '#())) (set! G4a46@G4a41 '#f) (set! G4a48@G4a40 (make-record-constructor-descriptor G4a44@G4a3f G4a36@G4a2e G4a46@G4a41)) (set! G4a4b@G4a3e (record-predicate G4a44@G4a3f)) (set! G4a4d@make-error (record-constructor G4a48@G4a40)) (set! G4a4f@error? (condition-predicate G4a44@G4a3f)) (set! G4a56@G4a51 (make-record-type-descriptor '&violation G4a32@G4a2d 'G4a54 '#f '#f '#())) (set! G4a58@G4a53 '#f) (set! G4a5a@G4a52 (make-record-constructor-descriptor G4a56@G4a51 G4a36@G4a2e G4a58@G4a53)) (set! G4a5d@G4a50 (record-predicate G4a56@G4a51)) (set! G4a5f@make-violation (record-constructor G4a5a@G4a52)) (set! G4a61@violation? (condition-predicate G4a56@G4a51)) (set! G4a68@G4a63 (make-record-type-descriptor '&assertion G4a56@G4a51 'G4a66 '#f '#f '#())) (set! G4a6a@G4a65 '#f) (set! G4a6c@G4a64 (make-record-constructor-descriptor G4a68@G4a63 G4a5a@G4a52 G4a6a@G4a65)) (set! G4a6f@G4a62 (record-predicate G4a68@G4a63)) (set! G4a71@make-assertion-violation (record-constructor G4a6c@G4a64)) (set! G4a73@assertion-violation? (condition-predicate G4a68@G4a63)) (set! G4a7b@G4a76 (make-record-type-descriptor '&irritants G49f5@G49f0 'G4a79 '#f '#f '#((immutable irritants)))) (set! G4a7d@G4a78 '#f) (set! G4a7f@G4a77 (make-record-constructor-descriptor G4a7b@G4a76 G49f9@G49f1 G4a7d@G4a78)) (set! G4a82@G4a75 (record-predicate G4a7b@G4a76)) (set! G4a84@make-irritants-condition (record-constructor G4a7f@G4a77)) (set! G4a86@G4a74 (record-accessor G4a7b@G4a76 '0)) (set! G4a88@irritants-condition? (condition-predicate G4a7b@G4a76)) (set! G4a8a@condition-irritants (condition-accessor G4a7b@G4a76 G4a86@G4a74)) (set! G4a92@G4a8d (make-record-type-descriptor '&who G49f5@G49f0 'G4a90 '#f '#f '#((immutable who)))) (set! G4a94@G4a8f '#f) (set! G4a96@G4a8e (make-record-constructor-descriptor G4a92@G4a8d G49f9@G49f1 G4a94@G4a8f)) (set! G4a99@G4a8c (record-predicate G4a92@G4a8d)) (set! G4a9b@make-who-condition (record-constructor G4a96@G4a8e)) (set! G4a9d@G4a8b (record-accessor G4a92@G4a8d '0)) (set! G4a9f@who-condition? (condition-predicate G4a92@G4a8d)) (set! G4aa1@condition-who (condition-accessor G4a92@G4a8d G4a9d@G4a8b)) (set! G4aa8@G4aa3 (make-record-type-descriptor '&non-continuable G4a56@G4a51 'G4aa6 '#f '#f '#())) (set! G4aaa@G4aa5 '#f) (set! G4aac@G4aa4 (make-record-constructor-descriptor G4aa8@G4aa3 G4a5a@G4a52 G4aaa@G4aa5)) (set! G4aaf@G4aa2 (record-predicate G4aa8@G4aa3)) (set! G4ab1@make-non-continuable-violation (record-constructor G4aac@G4aa4)) (set! G4ab3@non-continuable-violation? (condition-predicate G4aa8@G4aa3)) (set! G4aba@G4ab5 (make-record-type-descriptor '&implementation-restriction G4a56@G4a51 'G4ab8 '#f '#f '#())) (set! G4abc@G4ab7 '#f) (set! G4abe@G4ab6 (make-record-constructor-descriptor G4aba@G4ab5 G4a5a@G4a52 G4abc@G4ab7)) (set! G4ac1@G4ab4 (record-predicate G4aba@G4ab5)) (set! G4ac3@make-implementation-restriction-violation (record-constructor G4abe@G4ab6)) (set! G4ac5@implementation-restriction-violation? (condition-predicate G4aba@G4ab5)) (set! G4acc@G4ac7 (make-record-type-descriptor '&lexical G4a56@G4a51 'G4aca '#f '#f '#())) (set! G4ace@G4ac9 '#f) (set! G4ad0@G4ac8 (make-record-constructor-descriptor G4acc@G4ac7 G4a5a@G4a52 G4ace@G4ac9)) (set! G4ad3@G4ac6 (record-predicate G4acc@G4ac7)) (set! G4ad5@make-lexical-violation (record-constructor G4ad0@G4ac8)) (set! G4ad7@lexical-violation? (condition-predicate G4acc@G4ac7)) (set! G4ae0@G4adb (make-record-type-descriptor '&syntax G4a56@G4a51 'G4ade '#f '#f '#((immutable form) (immutable subform)))) (set! G4ae2@G4add '#f) (set! G4ae4@G4adc (make-record-constructor-descriptor G4ae0@G4adb G4a5a@G4a52 G4ae2@G4add)) (set! G4ae7@G4ada (record-predicate G4ae0@G4adb)) (set! G4ae9@make-syntax-violation (record-constructor G4ae4@G4adc)) (set! G4aeb@G4ad8 (record-accessor G4ae0@G4adb '0)) (set! G4aed@G4ad9 (record-accessor G4ae0@G4adb '1)) (set! G4aef@syntax-violation? (condition-predicate G4ae0@G4adb)) (set! G4af1@syntax-violation-form (condition-accessor G4ae0@G4adb G4aeb@G4ad8)) (set! G4af3@syntax-violation-subform (condition-accessor G4ae0@G4adb G4aed@G4ad9)) (set! G4afa@G4af5 (make-record-type-descriptor '&undefined G4a56@G4a51 'G4af8 '#f '#f '#())) (set! G4afc@G4af7 '#f) (set! G4afe@G4af6 (make-record-constructor-descriptor G4afa@G4af5 G4a5a@G4a52 G4afc@G4af7)) (set! G4b01@G4af4 (record-predicate G4afa@G4af5)) (set! G4b03@make-undefined-violation (record-constructor G4afe@G4af6)) (set! G4b05@undefined-violation? (condition-predicate G4afa@G4af5)) (set! G4b0c@G4b07 (make-record-type-descriptor '&no-infinities G4aba@G4ab5 'G4b0a '#f '#f '#())) (set! G4b0e@G4b09 '#f) (set! G4b10@G4b08 (make-record-constructor-descriptor G4b0c@G4b07 G4abe@G4ab6 G4b0e@G4b09)) (set! G4b13@G4b06 (record-predicate G4b0c@G4b07)) (set! G4b15@make-no-infinities-violation (record-constructor G4b10@G4b08)) (set! G4b17@no-infinities-violation? (condition-predicate G4b0c@G4b07)) (set! G4b1e@G4b19 (make-record-type-descriptor '&no-nans G4aba@G4ab5 'G4b1c '#f '#f '#())) (set! G4b20@G4b1b '#f) (set! G4b22@G4b1a (make-record-constructor-descriptor G4b1e@G4b19 G4abe@G4ab6 G4b20@G4b1b)) (set! G4b25@G4b18 (record-predicate G4b1e@G4b19)) (set! G4b27@make-no-nans-violation (record-constructor G4b22@G4b1a)) (set! G4b29@no-nans-violation? (condition-predicate G4b1e@G4b19)) (begin (set! G4b94@G4b29@no-nans-violation? G4b29@no-nans-violation?) (set! G4b93@G4b27@make-no-nans-violation G4b27@make-no-nans-violation) (set! G4b92@G4b25@G4b18 G4b25@G4b18) (set! G4b91@G4b22@G4b1a G4b22@G4b1a) (set! G4b90@G4b20@G4b1b G4b20@G4b1b) (set! G4b8f@G4b1e@G4b19 G4b1e@G4b19) (set! G4b8e@G4b17@no-infinities-violation? G4b17@no-infinities-violation?) (set! G4b8d@G4b15@make-no-infinities-violation G4b15@make-no-infinities-violation) (set! G4b8c@G4b13@G4b06 G4b13@G4b06) (set! G4b8b@G4b10@G4b08 G4b10@G4b08) (set! G4b8a@G4b0e@G4b09 G4b0e@G4b09) (set! G4b89@G4b0c@G4b07 G4b0c@G4b07) (set! G4b88@G4b05@undefined-violation? G4b05@undefined-violation?) (set! G4b87@G4b03@make-undefined-violation G4b03@make-undefined-violation) (set! G4b86@G4b01@G4af4 G4b01@G4af4) (set! G4b85@G4afe@G4af6 G4afe@G4af6) (set! G4b84@G4afc@G4af7 G4afc@G4af7) (set! G4b83@G4afa@G4af5 G4afa@G4af5) (set! G4b82@G4af3@syntax-violation-subform G4af3@syntax-violation-subform) (set! G4b81@G4af1@syntax-violation-form G4af1@syntax-violation-form) (set! G4b80@G4aef@syntax-violation? G4aef@syntax-violation?) (set! G4b7f@G4aed@G4ad9 G4aed@G4ad9) (set! G4b7e@G4aeb@G4ad8 G4aeb@G4ad8) (set! G4b7d@G4ae9@make-syntax-violation G4ae9@make-syntax-violation) (set! G4b7c@G4ae7@G4ada G4ae7@G4ada) (set! G4b7b@G4ae4@G4adc G4ae4@G4adc) (set! G4b7a@G4ae2@G4add G4ae2@G4add) (set! G4b79@G4ae0@G4adb G4ae0@G4adb) (set! G4b78@G4ad7@lexical-violation? G4ad7@lexical-violation?) (set! G4b77@G4ad5@make-lexical-violation G4ad5@make-lexical-violation) (set! G4b76@G4ad3@G4ac6 G4ad3@G4ac6) (set! G4b75@G4ad0@G4ac8 G4ad0@G4ac8) (set! G4b74@G4ace@G4ac9 G4ace@G4ac9) (set! G4b73@G4acc@G4ac7 G4acc@G4ac7) (set! G4b72@G4ac5@implementation-restriction-violation? G4ac5@implementation-restriction-violation?) (set! G4b71@G4ac3@make-implementation-restriction-violation G4ac3@make-implementation-restriction-violation) (set! G4b70@G4ac1@G4ab4 G4ac1@G4ab4) (set! G4b6f@G4abe@G4ab6 G4abe@G4ab6) (set! G4b6e@G4abc@G4ab7 G4abc@G4ab7) (set! G4b6d@G4aba@G4ab5 G4aba@G4ab5) (set! G4b6c@G4ab3@non-continuable-violation? G4ab3@non-continuable-violation?) (set! G4b6b@G4ab1@make-non-continuable-violation G4ab1@make-non-continuable-violation) (set! G4b6a@G4aaf@G4aa2 G4aaf@G4aa2) (set! G4b69@G4aac@G4aa4 G4aac@G4aa4) (set! G4b68@G4aaa@G4aa5 G4aaa@G4aa5) (set! G4b67@G4aa8@G4aa3 G4aa8@G4aa3) (set! G4b66@G4aa1@condition-who G4aa1@condition-who) (set! G4b65@G4a9f@who-condition? G4a9f@who-condition?) (set! G4b64@G4a9d@G4a8b G4a9d@G4a8b) (set! G4b63@G4a9b@make-who-condition G4a9b@make-who-condition) (set! G4b62@G4a99@G4a8c G4a99@G4a8c) (set! G4b61@G4a96@G4a8e G4a96@G4a8e) (set! G4b60@G4a94@G4a8f G4a94@G4a8f) (set! G4b5f@G4a92@G4a8d G4a92@G4a8d) (set! G4b5e@G4a8a@condition-irritants G4a8a@condition-irritants) (set! G4b5d@G4a88@irritants-condition? G4a88@irritants-condition?) (set! G4b5c@G4a86@G4a74 G4a86@G4a74) (set! G4b5b@G4a84@make-irritants-condition G4a84@make-irritants-condition) (set! G4b5a@G4a82@G4a75 G4a82@G4a75) (set! G4b59@G4a7f@G4a77 G4a7f@G4a77) (set! G4b58@G4a7d@G4a78 G4a7d@G4a78) (set! G4b57@G4a7b@G4a76 G4a7b@G4a76) (set! G4b56@G4a73@assertion-violation? G4a73@assertion-violation?) (set! G4b55@G4a71@make-assertion-violation G4a71@make-assertion-violation) (set! G4b54@G4a6f@G4a62 G4a6f@G4a62) (set! G4b53@G4a6c@G4a64 G4a6c@G4a64) (set! G4b52@G4a6a@G4a65 G4a6a@G4a65) (set! G4b51@G4a68@G4a63 G4a68@G4a63) (set! G4b50@G4a61@violation? G4a61@violation?) (set! G4b4f@G4a5f@make-violation G4a5f@make-violation) (set! G4b4e@G4a5d@G4a50 G4a5d@G4a50) (set! G4b4d@G4a5a@G4a52 G4a5a@G4a52) (set! G4b4c@G4a58@G4a53 G4a58@G4a53) (set! G4b4b@G4a56@G4a51 G4a56@G4a51) (set! G4b4a@G4a4f@error? G4a4f@error?) (set! G4b49@G4a4d@make-error G4a4d@make-error) (set! G4b48@G4a4b@G4a3e G4a4b@G4a3e) (set! G4b47@G4a48@G4a40 G4a48@G4a40) (set! G4b46@G4a46@G4a41 G4a46@G4a41) (set! G4b45@G4a44@G4a3f G4a44@G4a3f) (set! G4b44@G4a3d@serious-condition? G4a3d@serious-condition?) (set! G4b43@G4a3b@make-serious-condition G4a3b@make-serious-condition) (set! G4b42@G4a39@G4a2c G4a39@G4a2c) (set! G4b41@G4a36@G4a2e G4a36@G4a2e) (set! G4b40@G4a34@G4a2f G4a34@G4a2f) (set! G4b3f@G4a32@G4a2d G4a32@G4a2d) (set! G4b3e@G4a2b@warning? G4a2b@warning?) (set! G4b3d@G4a29@make-warning G4a29@make-warning) (set! G4b3c@G4a27@G4a1a G4a27@G4a1a) (set! G4b3b@G4a24@G4a1c G4a24@G4a1c) (set! G4b3a@G4a22@G4a1d G4a22@G4a1d) (set! G4b39@G4a20@G4a1b G4a20@G4a1b) (set! G4b38@G4a19@condition-message G4a19@condition-message) (set! G4b37@G4a17@message-condition? G4a17@message-condition?) (set! G4b36@G4a15@G4a03 G4a15@G4a03) (set! G4b35@G4a13@make-message-condition G4a13@make-message-condition) (set! G4b34@G4a11@G4a04 G4a11@G4a04) (set! G4b33@G4a0e@G4a06 G4a0e@G4a06) (set! G4b32@G4a0c@G4a07 G4a0c@G4a07) (set! G4b31@G4a0a@G4a05 G4a0a@G4a05) (set! G4b30@G4a02@&condition-rcd G4a02@&condition-rcd) (set! G4b2f@G4a00@&condition-rtd G4a00@&condition-rtd) (set! G4b2e@G49fe@make-&condition G49fe@make-&condition) (set! G4b2d@G49fc@&condition? G49fc@&condition?) (set! G4b2c@G49f9@G49f1 G49f9@G49f1) (set! G4b2b@G49f7@G49f2 G49f7@G49f2) (set! G4b2a@G49f5@G49f0 G49f5@G49f0)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4b9c@G4b97 G4b9e@G4b99 G4ba0@G4b98 G4ba3@G4b96 G4ba5@make-i/o-error G4ba7@i/o-error? G4bae@G4ba9 G4bb0@G4bab G4bb2@G4baa G4bb5@G4ba8 G4bb7@make-i/o-read-error G4bb9@i/o-read-error? G4bc0@G4bbb G4bc2@G4bbd G4bc4@G4bbc G4bc7@G4bba G4bc9@make-i/o-write-error G4bcb@i/o-write-error? G4bd3@G4bce G4bd5@G4bd0 G4bd7@G4bcf G4bda@G4bcd G4bdc@make-i/o-invalid-position-error G4bde@G4bcc G4be0@i/o-invalid-position-error? G4be2@i/o-error-position G4bea@G4be5 G4bec@G4be7 G4bee@G4be6 G4bf1@G4be4 G4bf3@make-i/o-filename-error G4bf5@G4be3 G4bf7@i/o-filename-error? G4bf9@i/o-error-filename G4c00@G4bfb G4c02@G4bfd G4c04@G4bfc G4c07@G4bfa G4c09@make-i/o-file-protection-error G4c0b@i/o-file-protection-error? G4c12@G4c0d G4c14@G4c0f G4c16@G4c0e G4c19@G4c0c G4c1b@make-i/o-file-is-read-only-error G4c1d@i/o-file-is-read-only-error? G4c24@G4c1f G4c26@G4c21 G4c28@G4c20 G4c2b@G4c1e G4c2d@make-i/o-file-already-exists-error G4c2f@i/o-file-already-exists-error? G4c36@G4c31 G4c38@G4c33 G4c3a@G4c32 G4c3d@G4c30 G4c3f@make-i/o-file-does-not-exist-error G4c41@i/o-file-does-not-exist-error? G4c49@G4c44 G4c4b@G4c46 G4c4d@G4c45 G4c50@G4c43 G4c52@make-i/o-port-error G4c54@G4c42 G4c56@i/o-port-error? G4c58@i/o-error-port G4c5f@G4c5a G4c61@G4c5c G4c63@G4c5b G4c66@G4c59 G4c68@make-i/o-decoding-error G4c6a@i/o-decoding-error? G4c72@G4c6d G4c74@G4c6f G4c76@G4c6e G4c79@G4c6c G4c7b@make-i/o-encoding-error G4c7d@G4c6b G4c7f@i/o-encoding-error? G4c81@i/o-encoding-error-char) (begin (set! G4b9c@G4b97 (make-record-type-descriptor '&i/o &error-rtd 'G4b9a '#f '#f '#())) (set! G4b9e@G4b99 '#f) (set! G4ba0@G4b98 (make-record-constructor-descriptor G4b9c@G4b97 &error-rcd G4b9e@G4b99)) (set! G4ba3@G4b96 (record-predicate G4b9c@G4b97)) (set! G4ba5@make-i/o-error (record-constructor G4ba0@G4b98)) (set! G4ba7@i/o-error? (condition-predicate G4b9c@G4b97)) (set! G4bae@G4ba9 (make-record-type-descriptor '&i/o-read G4b9c@G4b97 'G4bac '#f '#f '#())) (set! G4bb0@G4bab '#f) (set! G4bb2@G4baa (make-record-constructor-descriptor G4bae@G4ba9 G4ba0@G4b98 G4bb0@G4bab)) (set! G4bb5@G4ba8 (record-predicate G4bae@G4ba9)) (set! G4bb7@make-i/o-read-error (record-constructor G4bb2@G4baa)) (set! G4bb9@i/o-read-error? (condition-predicate G4bae@G4ba9)) (set! G4bc0@G4bbb (make-record-type-descriptor '&i/o-write G4b9c@G4b97 'G4bbe '#f '#f '#())) (set! G4bc2@G4bbd '#f) (set! G4bc4@G4bbc (make-record-constructor-descriptor G4bc0@G4bbb G4ba0@G4b98 G4bc2@G4bbd)) (set! G4bc7@G4bba (record-predicate G4bc0@G4bbb)) (set! G4bc9@make-i/o-write-error (record-constructor G4bc4@G4bbc)) (set! G4bcb@i/o-write-error? (condition-predicate G4bc0@G4bbb)) (set! G4bd3@G4bce (make-record-type-descriptor '&i/o-invalid-position G4b9c@G4b97 'G4bd1 '#f '#f '#((immutable position)))) (set! G4bd5@G4bd0 '#f) (set! G4bd7@G4bcf (make-record-constructor-descriptor G4bd3@G4bce G4ba0@G4b98 G4bd5@G4bd0)) (set! G4bda@G4bcd (record-predicate G4bd3@G4bce)) (set! G4bdc@make-i/o-invalid-position-error (record-constructor G4bd7@G4bcf)) (set! G4bde@G4bcc (record-accessor G4bd3@G4bce '0)) (set! G4be0@i/o-invalid-position-error? (condition-predicate G4bd3@G4bce)) (set! G4be2@i/o-error-position (condition-accessor G4bd3@G4bce G4bde@G4bcc)) (set! G4bea@G4be5 (make-record-type-descriptor '&i/o-filename G4b9c@G4b97 'G4be8 '#f '#f '#((immutable filename)))) (set! G4bec@G4be7 '#f) (set! G4bee@G4be6 (make-record-constructor-descriptor G4bea@G4be5 G4ba0@G4b98 G4bec@G4be7)) (set! G4bf1@G4be4 (record-predicate G4bea@G4be5)) (set! G4bf3@make-i/o-filename-error (record-constructor G4bee@G4be6)) (set! G4bf5@G4be3 (record-accessor G4bea@G4be5 '0)) (set! G4bf7@i/o-filename-error? (condition-predicate G4bea@G4be5)) (set! G4bf9@i/o-error-filename (condition-accessor G4bea@G4be5 G4bf5@G4be3)) (set! G4c00@G4bfb (make-record-type-descriptor '&i/o-file-protection G4b9c@G4b97 'G4bfe '#f '#f '#())) (set! G4c02@G4bfd '#f) (set! G4c04@G4bfc (make-record-constructor-descriptor G4c00@G4bfb G4ba0@G4b98 G4c02@G4bfd)) (set! G4c07@G4bfa (record-predicate G4c00@G4bfb)) (set! G4c09@make-i/o-file-protection-error (record-constructor G4c04@G4bfc)) (set! G4c0b@i/o-file-protection-error? (condition-predicate G4c00@G4bfb)) (set! G4c12@G4c0d (make-record-type-descriptor '&i/o-file-is-read-only G4c00@G4bfb 'G4c10 '#f '#f '#())) (set! G4c14@G4c0f '#f) (set! G4c16@G4c0e (make-record-constructor-descriptor G4c12@G4c0d G4c04@G4bfc G4c14@G4c0f)) (set! G4c19@G4c0c (record-predicate G4c12@G4c0d)) (set! G4c1b@make-i/o-file-is-read-only-error (record-constructor G4c16@G4c0e)) (set! G4c1d@i/o-file-is-read-only-error? (condition-predicate G4c12@G4c0d)) (set! G4c24@G4c1f (make-record-type-descriptor '&i/o-file-already-exists G4bea@G4be5 'G4c22 '#f '#f '#())) (set! G4c26@G4c21 '#f) (set! G4c28@G4c20 (make-record-constructor-descriptor G4c24@G4c1f G4bee@G4be6 G4c26@G4c21)) (set! G4c2b@G4c1e (record-predicate G4c24@G4c1f)) (set! G4c2d@make-i/o-file-already-exists-error (record-constructor G4c28@G4c20)) (set! G4c2f@i/o-file-already-exists-error? (condition-predicate G4c24@G4c1f)) (set! G4c36@G4c31 (make-record-type-descriptor '&i/o-file-does-not-exist G4bea@G4be5 'G4c34 '#f '#f '#())) (set! G4c38@G4c33 '#f) (set! G4c3a@G4c32 (make-record-constructor-descriptor G4c36@G4c31 G4bee@G4be6 G4c38@G4c33)) (set! G4c3d@G4c30 (record-predicate G4c36@G4c31)) (set! G4c3f@make-i/o-file-does-not-exist-error (record-constructor G4c3a@G4c32)) (set! G4c41@i/o-file-does-not-exist-error? (condition-predicate G4c36@G4c31)) (set! G4c49@G4c44 (make-record-type-descriptor '&i/o-port G4b9c@G4b97 'G4c47 '#f '#f '#((immutable port)))) (set! G4c4b@G4c46 '#f) (set! G4c4d@G4c45 (make-record-constructor-descriptor G4c49@G4c44 G4ba0@G4b98 G4c4b@G4c46)) (set! G4c50@G4c43 (record-predicate G4c49@G4c44)) (set! G4c52@make-i/o-port-error (record-constructor G4c4d@G4c45)) (set! G4c54@G4c42 (record-accessor G4c49@G4c44 '0)) (set! G4c56@i/o-port-error? (condition-predicate G4c49@G4c44)) (set! G4c58@i/o-error-port (condition-accessor G4c49@G4c44 G4c54@G4c42)) (set! G4c5f@G4c5a (make-record-type-descriptor '&i/o-decoding G4c49@G4c44 'G4c5d '#f '#f '#())) (set! G4c61@G4c5c '#f) (set! G4c63@G4c5b (make-record-constructor-descriptor G4c5f@G4c5a G4c4d@G4c45 G4c61@G4c5c)) (set! G4c66@G4c59 (record-predicate G4c5f@G4c5a)) (set! G4c68@make-i/o-decoding-error (record-constructor G4c63@G4c5b)) (set! G4c6a@i/o-decoding-error? (condition-predicate G4c5f@G4c5a)) (set! G4c72@G4c6d (make-record-type-descriptor '&i/o-encoding G4c49@G4c44 'G4c70 '#f '#f '#((immutable char)))) (set! G4c74@G4c6f '#f) (set! G4c76@G4c6e (make-record-constructor-descriptor G4c72@G4c6d G4c4d@G4c45 G4c74@G4c6f)) (set! G4c79@G4c6c (record-predicate G4c72@G4c6d)) (set! G4c7b@make-i/o-encoding-error (record-constructor G4c76@G4c6e)) (set! G4c7d@G4c6b (record-accessor G4c72@G4c6d '0)) (set! G4c7f@i/o-encoding-error? (condition-predicate G4c72@G4c6d)) (set! G4c81@i/o-encoding-error-char (condition-accessor G4c72@G4c6d G4c7d@G4c6b)) (begin (set! G4cd1@G4c81@i/o-encoding-error-char G4c81@i/o-encoding-error-char) (set! G4cd0@G4c7f@i/o-encoding-error? G4c7f@i/o-encoding-error?) (set! G4ccf@G4c7d@G4c6b G4c7d@G4c6b) (set! G4cce@G4c7b@make-i/o-encoding-error G4c7b@make-i/o-encoding-error) (set! G4ccd@G4c79@G4c6c G4c79@G4c6c) (set! G4ccc@G4c76@G4c6e G4c76@G4c6e) (set! G4ccb@G4c74@G4c6f G4c74@G4c6f) (set! G4cca@G4c72@G4c6d G4c72@G4c6d) (set! G4cc9@G4c6a@i/o-decoding-error? G4c6a@i/o-decoding-error?) (set! G4cc8@G4c68@make-i/o-decoding-error G4c68@make-i/o-decoding-error) (set! G4cc7@G4c66@G4c59 G4c66@G4c59) (set! G4cc6@G4c63@G4c5b G4c63@G4c5b) (set! G4cc5@G4c61@G4c5c G4c61@G4c5c) (set! G4cc4@G4c5f@G4c5a G4c5f@G4c5a) (set! G4cc3@G4c58@i/o-error-port G4c58@i/o-error-port) (set! G4cc2@G4c56@i/o-port-error? G4c56@i/o-port-error?) (set! G4cc1@G4c54@G4c42 G4c54@G4c42) (set! G4cc0@G4c52@make-i/o-port-error G4c52@make-i/o-port-error) (set! G4cbf@G4c50@G4c43 G4c50@G4c43) (set! G4cbe@G4c4d@G4c45 G4c4d@G4c45) (set! G4cbd@G4c4b@G4c46 G4c4b@G4c46) (set! G4cbc@G4c49@G4c44 G4c49@G4c44) (set! G4cbb@G4c41@i/o-file-does-not-exist-error? G4c41@i/o-file-does-not-exist-error?) (set! G4cba@G4c3f@make-i/o-file-does-not-exist-error G4c3f@make-i/o-file-does-not-exist-error) (set! G4cb9@G4c3d@G4c30 G4c3d@G4c30) (set! G4cb8@G4c3a@G4c32 G4c3a@G4c32) (set! G4cb7@G4c38@G4c33 G4c38@G4c33) (set! G4cb6@G4c36@G4c31 G4c36@G4c31) (set! G4cb5@G4c2f@i/o-file-already-exists-error? G4c2f@i/o-file-already-exists-error?) (set! G4cb4@G4c2d@make-i/o-file-already-exists-error G4c2d@make-i/o-file-already-exists-error) (set! G4cb3@G4c2b@G4c1e G4c2b@G4c1e) (set! G4cb2@G4c28@G4c20 G4c28@G4c20) (set! G4cb1@G4c26@G4c21 G4c26@G4c21) (set! G4cb0@G4c24@G4c1f G4c24@G4c1f) (set! G4caf@G4c1d@i/o-file-is-read-only-error? G4c1d@i/o-file-is-read-only-error?) (set! G4cae@G4c1b@make-i/o-file-is-read-only-error G4c1b@make-i/o-file-is-read-only-error) (set! G4cad@G4c19@G4c0c G4c19@G4c0c) (set! G4cac@G4c16@G4c0e G4c16@G4c0e) (set! G4cab@G4c14@G4c0f G4c14@G4c0f) (set! G4caa@G4c12@G4c0d G4c12@G4c0d) (set! G4ca9@G4c0b@i/o-file-protection-error? G4c0b@i/o-file-protection-error?) (set! G4ca8@G4c09@make-i/o-file-protection-error G4c09@make-i/o-file-protection-error) (set! G4ca7@G4c07@G4bfa G4c07@G4bfa) (set! G4ca6@G4c04@G4bfc G4c04@G4bfc) (set! G4ca5@G4c02@G4bfd G4c02@G4bfd) (set! G4ca4@G4c00@G4bfb G4c00@G4bfb) (set! G4ca3@G4bf9@i/o-error-filename G4bf9@i/o-error-filename) (set! G4ca2@G4bf7@i/o-filename-error? G4bf7@i/o-filename-error?) (set! G4ca1@G4bf5@G4be3 G4bf5@G4be3) (set! G4ca0@G4bf3@make-i/o-filename-error G4bf3@make-i/o-filename-error) (set! G4c9f@G4bf1@G4be4 G4bf1@G4be4) (set! G4c9e@G4bee@G4be6 G4bee@G4be6) (set! G4c9d@G4bec@G4be7 G4bec@G4be7) (set! G4c9c@G4bea@G4be5 G4bea@G4be5) (set! G4c9b@G4be2@i/o-error-position G4be2@i/o-error-position) (set! G4c9a@G4be0@i/o-invalid-position-error? G4be0@i/o-invalid-position-error?) (set! G4c99@G4bde@G4bcc G4bde@G4bcc) (set! G4c98@G4bdc@make-i/o-invalid-position-error G4bdc@make-i/o-invalid-position-error) (set! G4c97@G4bda@G4bcd G4bda@G4bcd) (set! G4c96@G4bd7@G4bcf G4bd7@G4bcf) (set! G4c95@G4bd5@G4bd0 G4bd5@G4bd0) (set! G4c94@G4bd3@G4bce G4bd3@G4bce) (set! G4c93@G4bcb@i/o-write-error? G4bcb@i/o-write-error?) (set! G4c92@G4bc9@make-i/o-write-error G4bc9@make-i/o-write-error) (set! G4c91@G4bc7@G4bba G4bc7@G4bba) (set! G4c90@G4bc4@G4bbc G4bc4@G4bbc) (set! G4c8f@G4bc2@G4bbd G4bc2@G4bbd) (set! G4c8e@G4bc0@G4bbb G4bc0@G4bbb) (set! G4c8d@G4bb9@i/o-read-error? G4bb9@i/o-read-error?) (set! G4c8c@G4bb7@make-i/o-read-error G4bb7@make-i/o-read-error) (set! G4c8b@G4bb5@G4ba8 G4bb5@G4ba8) (set! G4c8a@G4bb2@G4baa G4bb2@G4baa) (set! G4c89@G4bb0@G4bab G4bb0@G4bab) (set! G4c88@G4bae@G4ba9 G4bae@G4ba9) (set! G4c87@G4ba7@i/o-error? G4ba7@i/o-error?) (set! G4c86@G4ba5@make-i/o-error G4ba5@make-i/o-error) (set! G4c85@G4ba3@G4b96 G4ba3@G4b96) (set! G4c84@G4ba0@G4b98 G4ba0@G4b98) (set! G4c83@G4b9e@G4b99 G4b9e@G4b99) (set! G4c82@G4b9c@G4b97 G4b9c@G4b97)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29bc@G296d@current-primitive-locations (lambda (G50a9@x) ((lambda (G50ab@t) (if G50ab@t (cdr G50ab@t) '#f)) (assq G50a9@x '((syntax-error . G49e1@G30a9@syntax-error) (syntax-dispatch . G4975@G2fc2@syntax-dispatch) (load . G4d6e@G4ce0@load) (interaction-environment . G49ea@G30bb@interaction-environment) (make-parameter . G2967@G28a0@make-parameter) (make-variable-transformer . G4935@G2dff@make-variable-transformer) (identifier? . G49e5@G30b1@identifier?) (generate-temporaries . G49da@G309b@generate-temporaries) (free-identifier=? . G49db@G309d@free-identifier=?) (syntax->datum . G49e7@G30b5@syntax->datum) (datum->syntax . G49e6@G30b3@datum->syntax) (bound-identifier=? . G49dc@G309f@bound-identifier=?) (make-i/o-write-error . G4c92@G4bc9@make-i/o-write-error) (make-i/o-read-error . G4c8c@G4bb7@make-i/o-read-error) (make-i/o-port-error . G4cc0@G4c52@make-i/o-port-error) (make-i/o-invalid-position-error . G4c98@G4bdc@make-i/o-invalid-position-error) (make-i/o-filename-error . G4ca0@G4bf3@make-i/o-filename-error) (make-i/o-file-protection-error . G4ca8@G4c09@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cae@G4c1b@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cba@G4c3f@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cb4@G4c2d@make-i/o-file-already-exists-error) (make-i/o-error . G4c86@G4ba5@make-i/o-error) (make-i/o-encoding-error . G4cce@G4c7b@make-i/o-encoding-error) (make-i/o-decoding-error . G4cc8@G4c68@make-i/o-decoding-error) (i/o-write-error? . G4c93@G4bcb@i/o-write-error?) (i/o-read-error? . G4c8d@G4bb9@i/o-read-error?) (i/o-port-error? . G4cc2@G4c56@i/o-port-error?) (i/o-invalid-position-error? . G4c9a@G4be0@i/o-invalid-position-error?) (i/o-filename-error? . G4ca2@G4bf7@i/o-filename-error?) (i/o-file-protection-error? . G4ca9@G4c0b@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4caf@G4c1d@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cbb@G4c41@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cb5@G4c2f@i/o-file-already-exists-error?) (i/o-error? . G4c87@G4ba7@i/o-error?) (i/o-error-port . G4cc3@G4c58@i/o-error-port) (i/o-error-filename . G4ca3@G4bf9@i/o-error-filename) (i/o-encoding-error? . G4cd0@G4c7f@i/o-encoding-error?) (i/o-encoding-error-char . G4cd1@G4c81@i/o-encoding-error-char) (i/o-decoding-error? . G4cc9@G4c6a@i/o-decoding-error?) (scheme-report-environment . G49d1@G3089@scheme-report-environment) (null-environment . G49d0@G3087@null-environment) (command-line . G4d6b@G4cda@command-line) (eval . G49d3@G308d@eval) (environment . G49cf@G3085@environment) (who-condition? . G4b65@G4a9f@who-condition?) (warning? . G4b3e@G4a2b@warning?) (violation? . G4b50@G4a61@violation?) (undefined-violation? . G4b88@G4b05@undefined-violation?) (syntax-violation? . G4b80@G4aef@syntax-violation?) (syntax-violation-subform . G4b82@G4af3@syntax-violation-subform) (syntax-violation-form . G4b81@G4af1@syntax-violation-form) (syntax-violation . G49e4@G30af@syntax-violation) (serious-condition? . G4b44@G4a3d@serious-condition?) (non-continuable-violation? . G4b6c@G4ab3@non-continuable-violation?) (message-condition? . G4b37@G4a17@message-condition?) (make-who-condition . G4b63@G4a9b@make-who-condition) (make-warning . G4b3d@G4a29@make-warning) (make-violation . G4b4f@G4a5f@make-violation) (make-undefined-violation . G4b87@G4b03@make-undefined-violation) (make-syntax-violation . G4b7d@G4ae9@make-syntax-violation) (make-serious-condition . G4b43@G4a3b@make-serious-condition) (make-non-continuable-violation . G4b6b@G4ab1@make-non-continuable-violation) (make-message-condition . G4b35@G4a13@make-message-condition) (make-lexical-violation . G4b77@G4ad5@make-lexical-violation) (make-irritants-condition . G4b5b@G4a84@make-irritants-condition) (make-implementation-restriction-violation . G4b71@G4ac3@make-implementation-restriction-violation) (make-error . G4b49@G4a4d@make-error) (make-assertion-violation . G4b55@G4a71@make-assertion-violation) (lexical-violation? . G4b78@G4ad7@lexical-violation?) (irritants-condition? . G4b5d@G4a88@irritants-condition?) (implementation-restriction-violation? . G4b72@G4ac5@implementation-restriction-violation?) (error? . G4b4a@G4a4f@error?) (condition-who . G4b66@G4aa1@condition-who) (condition-message . G4b38@G4a19@condition-message) (condition-irritants . G4b5e@G4a8a@condition-irritants) (assertion-violation? . G4b56@G4a73@assertion-violation?) (no-nans-violation? . G4b94@G4b29@no-nans-violation?) (no-infinities-violation? . G4b8e@G4b17@no-infinities-violation?) (make-no-nans-violation . G4b93@G4b27@make-no-nans-violation) (make-no-infinities-violation . G4b8d@G4b15@make-no-infinities-violation)))))) (G2bf4@G2a89@install-library 'G507c '(mosh interaction) '() '() '() '() '((string-upcase . G4ff6) (string-titlecase . G4ff5) (string-normalize-nfkd . G4ff4) (string-normalize-nfkc . G4ff3) (string-normalize-nfd . G4ff2) (string-normalize-nfc . G4ff1) (string-foldcase . G4ff0) (string-downcase . G4fef) (string-ci>? . G4fee) (string-ci>=? . G4fed) (string-ci=? . G4fec) (string-ci<? . G4feb) (string-ci<=? . G4fea) (char-whitespace? . G4fe9) (char-upper-case? . G4fe8) (char-title-case? . G4fe7) (char-numeric? . G4fe6) (char-lower-case? . G4fe5) (char-general-category . G4fe4) (char-upcase . G4fe3) (char-titlecase . G4fe2) (char-foldcase . G4fe1) (char-downcase . G4fe0) (char-ci>? . G4fdf) (char-ci>=? . G4fde) (char-ci=? . G4fdd) (char-ci<? . G4fdc) (char-ci<=? . G4fdb) (char-alphabetic? . G4fda) (make-variable-transformer . G2dfe) (identifier? . G30b0) (generate-temporaries . G309a) (free-identifier=? . G309c) (syntax->datum . G30b4) (datum->syntax . G30b2) (bound-identifier=? . G309e) (record-type-descriptor? . G4fd9) (record-predicate . G4fd8) (record-mutator . G4fd7) (record-constructor . G4fd6) (record-accessor . G4fd5) (make-record-type-descriptor . G4fd4) (make-record-constructor-descriptor . G4fd3) (record? . G4fd2) (record-type-uid . G4fd1) (record-type-sealed? . G4fd0) (record-type-parent . G4fcf) (record-type-opaque? . G4fce) (record-type-name . G4fcd) (record-type-generative? . G4fcc) (record-type-field-names . G4fcb) (record-rtd . G4fca) (record-field-mutable? . G4fc9) (delete-file . G4fc8) (file-exists? . G4fc7) (vector-sort! . G4fc6) (vector-sort . G4fc5) (list-sort . G4fc4) (symbol-hash . G4fc3) (string-ci-hash . G4fc2) (string-hash . G4fc1) (equal-hash . G4fc0) (hashtable-equivalence-function . G4fbf) (make-hashtable . G4fbe) (hashtable-hash-function . G4fbd) (make-eqv-hashtable . G4fbc) (make-eq-hashtable . G4fbb) (hashtable? . G4fba) (hashtable-update! . G4fb9) (hashtable-size . G4fb8) (hashtable-set! . G4fb7) (hashtable-ref . G4fb6) (hashtable-mutable? . G4fb5) (hashtable-keys . G4fb4) (hashtable-entries . G4fb3) (hashtable-delete! . G4fb2) (hashtable-copy . G4fb1) (hashtable-contains? . G4fb0) (hashtable-clear! . G4faf) (call-with-output-file . G4fae) (call-with-input-file . G4fad) (write-char . G4fac) (write . G4fab) (with-output-to-file . G4faa) (with-input-from-file . G4fa9) (read-char . G4fa8) (read . G4fa7) (peek-char . G4fa6) (open-output-file . G4fa5) (open-input-file . G4fa4) (newline . G4fa3) (display . G4fa2) (close-output-port . G4fa1) (close-input-port . G4fa0) (eof-object? . G4f9f) (eof-object . G4f9e) (current-error-port . G4f9d) (current-output-port . G4f9c) (current-input-port . G4f9b) (output-port? . G4f9a) (input-port? . G4f99) (utf-8-codec . G4f98) (utf-16-codec . G4f97) (transcoder-error-handling-mode . G4f96) (transcoder-eol-style . G4f95) (transcoder-codec . G4f94) (transcoded-port . G4f93) (textual-port? . G4f92) (string->bytevector . G4f91) (standard-output-port . G4f90) (standard-input-port . G4f8f) (standard-error-port . G4f8e) (set-port-position! . G4f8d) (put-u8 . G4f8c) (put-string . G4f8b) (put-datum . G4f8a) (put-char . G4f89) (put-bytevector . G4f88) (port? . G4f87) (port-transcoder . G4f86) (port-position . G4f85) (port-has-set-port-position!? . G4f84) (port-has-port-position? . G4f83) (port-eof? . G4f82) (output-port-buffer-mode . G4f81) (open-string-output-port . G4f80) (open-string-input-port . G4f7f) (open-file-output-port . G4f7e) (open-file-input/output-port . G4f7d) (open-file-input-port . G4f7c) (open-bytevector-output-port . G4f7b) (open-bytevector-input-port . G4f7a) (native-transcoder . G4f79) (native-eol-style . G4f78) (make-transcoder . G4f77) (latin-1-codec . G4f76) (make-i/o-write-error . G4bc8) (make-i/o-read-error . G4bb6) (make-i/o-port-error . G4c51) (make-i/o-invalid-position-error . G4bdb) (make-i/o-filename-error . G4bf2) (make-i/o-file-protection-error . G4c08) (make-i/o-file-is-read-only-error . G4c1a) (make-i/o-file-does-not-exist-error . G4c3e) (make-i/o-file-already-exists-error . G4c2c) (make-i/o-error . G4ba4) (make-i/o-encoding-error . G4c7a) (make-i/o-decoding-error . G4c67) (make-custom-textual-output-port . G4f75) (make-custom-textual-input/output-port . G4f74) (make-custom-textual-input-port . G4f73) (make-custom-binary-output-port . G4f72) (make-custom-binary-input/output-port . G4f71) (make-custom-binary-input-port . G4f70) (make-bytevector . G4f6f) (lookahead-u8 . G4f6e) (lookahead-char . G4f6d) (i/o-write-error? . G4bca) (i/o-read-error? . G4bb8) (i/o-port-error? . G4c55) (i/o-invalid-position-error? . G4bdf) (i/o-filename-error? . G4bf6) (i/o-file-protection-error? . G4c0a) (i/o-file-is-read-only-error? . G4c1c) (i/o-file-does-not-exist-error? . G4c40) (i/o-file-already-exists-error? . G4c2e) (i/o-error? . G4ba6) (i/o-error-port . G4c57) (i/o-error-filename . G4bf8) (i/o-encoding-error? . G4c7e) (i/o-encoding-error-char . G4c80) (i/o-decoding-error? . G4c69) (get-u8 . G4f6c) (get-string-n! . G4f6b) (get-string-n . G4f6a) (get-string-all . G4f69) (get-line . G4f68) (get-datum . G4f67) (get-char . G4f66) (get-bytevector-some . G4f65) (get-bytevector-n! . G4f64) (get-bytevector-n . G4f63) (get-bytevector-all . G4f62) (flush-output-port . G4f61) (close-port . G4f60) (exit . G4f58) (command-line . G4cd9) (string-fill! . G4f57) (string-set! . G4f56) (set-cdr! . G4f55) (set-car! . G4f54) (remove . G4f53) (remv . G4f52) (remp . G4f51) (remq . G4f50) (partition . G4f4f) (memv . G4f4e) (memq . G4f4d) (memp . G4f4c) (member . G4f4b) (exists . G4f4a) (for-all . G4f49) (fold-right . G4f48) (fold-left . G4f47) (find . G4f46) (filter . G4f45) (cons* . G4f44) (assv . G4f43) (assq . G4f42) (assp . G4f41) (assoc . G4f40) (call-with-string-output-port . G4f3f) (call-with-port . G4f3e) (call-with-bytevector-output-port . G4f3d) (bytevector->string . G4f3c) (buffer-mode? . G4f3b) (binary-port? . G4f3a) (with-exception-handler . G4f39) (raise-continuable . G4f38) (raise . G4f37) (eval . G308c) (environment . G3084) (make-enumeration . G4f36) (enum-set=? . G4f35) (enum-set-universe . G4f34) (enum-set-union . G4f33) (enum-set-subset? . G4f32) (enum-set-projection . G4f31) (enum-set-member? . G4f30) (enum-set-intersection . G4f2f) (enum-set-indexer . G4f2e) (enum-set-difference . G4f2d) (enum-set-constructor . G4f2c) (enum-set-complement . G4f2b) (enum-set->list . G4f2a) (who-condition? . G4a9e) (warning? . G4a2a) (violation? . G4a60) (undefined-violation? . G4b04) (syntax-violation? . G4aee) (syntax-violation-subform . G4af2) (syntax-violation-form . G4af0) (syntax-violation . G30ae) (simple-conditions . G4f29) (serious-condition? . G4a3c) (non-continuable-violation? . G4ab2) (message-condition? . G4a16) (make-who-condition . G4a9a) (make-warning . G4a28) (make-violation . G4a5e) (make-undefined-violation . G4b02) (make-syntax-violation . G4ae8) (make-serious-condition . G4a3a) (make-non-continuable-violation . G4ab0) (make-message-condition . G4a12) (make-lexical-violation . G4ad4) (make-irritants-condition . G4a83) (make-implementation-restriction-violation . G4ac2) (make-error . G4a4c) (make-assertion-violation . G4a70) (lexical-violation? . G4ad6) (irritants-condition? . G4a87) (implementation-restriction-violation? . G4ac4) (error? . G4a4e) (condition-who . G4aa0) (condition-predicate . G4f28) (condition-message . G4a18) (condition-irritants . G4a89) (condition-accessor . G4f27) (condition . G4f26) (assertion-violation? . G4a72) (condition? . G4f25) (utf32->string . G4f24) (utf16->string . G4f23) (utf8->string . G4f22) (uint-list->bytevector . G4f21) (u8-list->bytevector . G4f20) (string->utf8 . G4f1f) (string->utf32 . G4f1e) (string->utf16 . G4f1d) (sint-list->bytevector . G4f1c) (native-endianness . G4f1b) (bytevector? . G4f1a) (bytevector=? . G4f19) (bytevector-uint-set! . G4f18) (bytevector-uint-ref . G4f17) (bytevector-u8-set! . G4f16) (bytevector-u8-ref . G4f15) (bytevector-u64-set! . G4f14) (bytevector-u64-ref . G4f13) (bytevector-u64-native-set! . G4f12) (bytevector-u64-native-ref . G4f11) (bytevector-u32-set! . G4f10) (bytevector-u32-ref . G4f0f) (bytevector-u32-native-set! . G4f0e) (bytevector-u32-native-ref . G4f0d) (bytevector-u16-set! . G4f0c) (bytevector-u16-ref . G4f0b) (bytevector-u16-native-set! . G4f0a) (bytevector-u16-native-ref . G4f09) (bytevector-sint-set! . G4f08) (bytevector-sint-ref . G4f07) (bytevector-s8-set! . G4f06) (bytevector-s8-ref . G4f05) (bytevector-s64-set! . G4f04) (bytevector-s64-ref . G4f03) (bytevector-s64-native-set! . G4f02) (bytevector-s64-native-ref . G4f01) (bytevector-s32-set! . G4f00) (bytevector-s32-ref . G4eff) (bytevector-s32-native-set! . G4efe) (bytevector-s32-native-ref . G4efd) (bytevector-s16-set! . G4efc) (bytevector-s16-ref . G4efb) (bytevector-s16-native-set! . G4efa) (bytevector-s16-native-ref . G4ef9) (bytevector-length . G4ef8) (bytevector-ieee-single-ref . G4ef7) (bytevector-ieee-single-set! . G4ef6) (bytevector-ieee-single-native-set! . G4ef5) (bytevector-ieee-single-native-ref . G4ef4) (bytevector-ieee-double-set! . G4ef3) (bytevector-ieee-double-ref . G4ef2) (bytevector-ieee-double-native-set! . G4ef1) (bytevector-ieee-double-native-ref . G4ef0) (bytevector-fill! . G4eef) (bytevector-copy! . G4eee) (bytevector-copy . G4eed) (bytevector->uint-list . G4eec) (bytevector->u8-list . G4eeb) (bytevector->sint-list . G4eea) (no-nans-violation? . G4b28) (no-infinities-violation? . G4b16) (make-no-nans-violation . G4b26) (make-no-infinities-violation . G4b14) (real->flonum . G4ee9) (flzero? . G4ee8) (fltruncate . G4ee7) (fltan . G4ee6) (flsqrt . G4ee5) (flsin . G4ee4) (flround . G4ee3) (flpositive? . G4ee2) (flonum? . G4ee1) (flodd? . G4ee0) (flnumerator . G4edf) (flnegative? . G4ede) (flnan? . G4edd) (flmod0 . G4edc) (flmod . G4edb) (flmin . G4eda) (flmax . G4ed9) (fllog . G4ed8) (flinteger? . G4ed7) (flinfinite? . G4ed6) (flfloor . G4ed5) (flfinite? . G4ed4) (flexpt . G4ed3) (flexp . G4ed2) (fleven? . G4ed1) (fldiv0-and-mod0 . G4ed0) (fldiv0 . G4ecf) (fldiv-and-mod . G4ece) (fldiv . G4ecd) (fldenominator . G4ecc) (flcos . G4ecb) (flceiling . G4eca) (flatan . G4ec9) (flasin . G4ec8) (flacos . G4ec7) (flabs . G4ec6) (fl>? . G4ec5) (fl>=? . G4ec4) (fl=? . G4ec3) (fl<? . G4ec2) (fl<=? . G4ec1) (fl/ . G4ec0) (fl- . G4ebf) (fl+ . G4ebe) (fl* . G4ebd) (fixnum->flonum . G4ebc) (fxzero? . G4ebb) (fxxor . G4eba) (fxrotate-bit-field . G4eb9) (fxreverse-bit-field . G4eb8) (fxpositive? . G4eb7) (fxodd? . G4eb6) (fxnot . G4eb5) (fxnegative? . G4eb4) (fxmod0 . G4eb3) (fxmod . G4eb2) (fxmin . G4eb1) (fxmax . G4eb0) (fxlength . G4eaf) (fxior . G4eae) (fxif . G4ead) (fxfirst-bit-set . G4eac) (fxeven? . G4eab) (fxdiv0-and-mod0 . G4eaa) (fxdiv0 . G4ea9) (fxdiv-and-mod . G4ea8) (fxdiv . G4ea7) (fxcopy-bit-field . G4ea6) (fxcopy-bit . G4ea5) (fxbit-set? . G4ea4) (fxbit-field . G4ea3) (fxbit-count . G4ea2) (fxarithmetic-shift-right . G4ea1) (fxarithmetic-shift-left . G4ea0) (fxarithmetic-shift . G4e9f) (fxand . G4e9e) (fx>? . G4e9d) (fx>=? . G4e9c) (fx=? . G4e9b) (fx<? . G4e9a) (fx<=? . G4e99) (fx-/carry . G4e98) (fx- . G4e97) (fx+/carry . G4e96) (fx+ . G4e95) (fx*/carry . G4e94) (fx* . G4e93) (greatest-fixnum . G4e92) (least-fixnum . G4e91) (fixnum-width . G4e90) (fixnum? . G4e8f) (bitwise-rotate-bit-field . G4e8e) (bitwise-reverse-bit-field . G4e8d) (bitwise-length . G4e8c) (bitwise-if . G4e8b) (bitwise-first-bit-set . G4e8a) (bitwise-copy-bit-field . G4e89) (bitwise-copy-bit . G4e88) (bitwise-bit-set? . G4e87) (bitwise-bit-field . G4e86) (bitwise-bit-count . G4e85) (bitwise-xor . G4e84) (bitwise-ior . G4e83) (bitwise-and . G4e82) (bitwise-not . G4e81) (bitwise-arithmetic-shift-right . G4e80) (bitwise-arithmetic-shift-left . G4e7f) (bitwise-arithmetic-shift . G4e7e) (zero? . G4e7d) (vector? . G4e7c) (vector-set! . G4e7b) (vector-ref . G4e7a) (vector-map . G4e79) (vector-length . G4e78) (vector-for-each . G4e77) (vector-fill! . G4e76) (vector->list . G4e75) (vector . G4e74) (values . G4e73) (truncate . G4e72) (tan . G4e71) (symbol? . G4e70) (symbol=? . G4e6f) (symbol->string . G4e6e) (substring . G4e6d) (string? . G4e6c) (string>? . G4e6b) (string>=? . G4e6a) (string=? . G4e69) (string<? . G4e68) (string<=? . G4e67) (string-ref . G4e66) (string-length . G4e65) (string-for-each . G4e64) (string-copy . G4e63) (string-append . G4e62) (string->symbol . G4e61) (string->number . G4e60) (string->list . G4e5f) (string . G4e5e) (sqrt . G4e5d) (sin . G4e5c) (round . G4e5b) (reverse . G4e5a) (real? . G4e59) (real-valued? . G4e58) (real-part . G4e57) (rationalize . G4e56) (rational? . G4e55) (rational-valued? . G4e54) (procedure? . G4e53) (positive? . G4e52) (pair? . G4e51) (odd? . G4e50) (numerator . G4e4f) (number? . G4e4e) (number->string . G4e4d) (null? . G4e4c) (not . G4e4b) (negative? . G4e4a) (nan? . G4e49) (min . G4e48) (max . G4e47) (map . G4e46) (make-vector . G4e45) (make-string . G4e44) (make-rectangular . G4e43) (make-polar . G4e42) (magnitude . G4e41) (log . G4e40) (list? . G4e3f) (list-tail . G4e3e) (list-ref . G4e3d) (list->vector . G4e3c) (list->string . G4e3b) (list . G4e3a) (length . G4e39) (lcm . G4e38) (integer? . G4e37) (integer-valued? . G4e36) (integer->char . G4e35) (infinite? . G4e34) (inexact? . G4e33) (inexact . G4e32) (imag-part . G4e31) (gcd . G4e30) (for-each . G4e2f) (floor . G4e2e) (finite? . G4e2d) (expt . G4e2c) (exp . G4e2b) (exact? . G4e2a) (exact-integer-sqrt . G4e29) (exact . G4e28) (even? . G4e27) (error . G4e26) (eqv? . G4e25) (equal? . G4e24) (eq? . G4e23) (dynamic-wind . G4e22) (div0-and-mod0 . G4e21) (mod0 . G4e20) (div0 . G4e1f) (div-and-mod . G4e1e) (mod . G4e1d) (div . G4e1c) (denominator . G4e1b) (cos . G4e1a) (cons . G4e19) (complex? . G4e18) (char? . G4e17) (char>? . G4e16) (char>=? . G4e15) (char=? . G4e14) (char<? . G4e13) (char<=? . G4e12) (char->integer . G4e11) (ceiling . G4e10) (call-with-values . G4e0f) (call/cc . G4e0e) (call-with-current-continuation . G4e0d) (cddddr . G4e0c) (cdddar . G4e0b) (cddadr . G4e0a) (cddaar . G4e09) (cdaddr . G4e08) (cdadar . G4e07) (cdaadr . G4e06) (cdaaar . G4e05) (cadddr . G4e04) (caddar . G4e03) (cadadr . G4e02) (cadaar . G4e01) (caaddr . G4e00) (caadar . G4dff) (caaadr . G4dfe) (caaaar . G4dfd) (cdddr . G4dfc) (cddar . G4dfb) (cdadr . G4dfa) (cdaar . G4df9) (caddr . G4df8) (cadar . G4df7) (caadr . G4df6) (caaar . G4df5) (cddr . G4df4) (cdar . G4df3) (cadr . G4df2) (caar . G4df1) (cdr . G4df0) (car . G4def) (boolean? . G4dee) (boolean=? . G4ded) (atan . G4dec) (assertion-violation . G4deb) (asin . G4dea) (apply . G4de9) (append . G4de8) (angle . G4de7) (acos . G4de6) (abs . G4de5) (/ . G4de4) (* . G4de3) (- . G4de2) (+ . G4de1) (>= . G4de0) (> . G4ddf) (= . G4dde) (<= . G4ddd) (< . G4ddc) (library . G4ddb) (export . G4dda) (&no-nans . G4dd9) (&no-infinities . G4dd8) (&i/o-encoding . G4dd7) (&i/o-decoding . G4dd6) (&i/o-port . G4dd5) (&i/o-file-does-not-exist . G4dd4) (&i/o-file-already-exists . G4dd3) (&i/o-file-is-read-only . G4dd2) (&i/o-file-protection . G4dd1) (&i/o-filename . G4dd0) (&i/o-invalid-position . G4dcf) (&i/o-write . G4dce) (&i/o-read . G4dcd) (&i/o . G4dcc) (&undefined . G4dcb) (&syntax . G4dca) (&lexical . G4dc9) (&implementation-restriction . G4dc8) (&non-continuable . G4dc7) (&who . G4dc6) (&irritants . G4dc5) (&assertion . G4dc4) (&violation . G4dc3) (&error . G4dc2) (&serious . G4dc1) (&warning . G4dc0) (&message . G4dbf) (&condition . G4dbe) (define-condition-type . G4dbd) (define-enumeration . G4dbc) (define-record-type . G4dbb) (parent-rtd . G4dba) (nongenerative . G4db9) (opaque . G4db8) (sealed . G4db7) (protocol . G4db6) (parent . G4db5) (immutable . G4db4) (mutable . G4db3) (fields . G4db2) (error-handling-mode . G4db1) (file-options . G4db0) (buffer-mode . G4daf) (eol-style . G4dae) (guard . G4dad) (unsyntax-splicing . G4daa) (unsyntax . G4da9) (unquote-splicing . G4da8) (unquote . G4da7) (_ . G4da6) (else . G4da5) (=> . G4da4) (... . G4da3) (assert . G4da2) (endianness . G4da1) (or . G4d9e) (and . G4d9d) (do . G4d9c) (cond . G4d9b) (let* . G4d9a) (let . G4d99) (let*-values . G4d98) (let-values . G4d97) (identifier-syntax . G4d96) (with-syntax . G4d95) (quasisyntax . G4d94) (quasiquote . G4d93) (syntax-rules . G4d92) (include . G4d91) (record-constructor-descriptor . G4d8f) (record-type-descriptor . G4d8e) (case . G4d8d) (unless . G4d8b) (when . G4d8a) (if . G4d89) (letrec* . G4d88) (letrec . G4d87) (case-lambda . G4d85) (lambda . G4d84) (syntax . G4d83) (syntax-case . G4d82) (quote . G4d81) (letrec-syntax . G4d7f) (let-syntax . G4d7e) (set! . G4d7d) (import . G4d7c) (begin . G4d7b) (define-syntax . G4d79) (define . G4d78)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G507d '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4f59) (unquote-splicing . G4da8) (unquote . G4da7) (delay . G4da0) (or . G4d9e) (and . G4d9d) (do . G4d9c) (cond . G4d9b) (let* . G4d9a) (let . G4d99) (quasiquote . G4d93) (syntax-rules . G4d92) (case . G4d8d) (if . G4d89) (letrec . G4d87) (lambda . G4d84) (quote . G4d81) (letrec-syntax . G4d7f) (let-syntax . G4d7e) (set! . G4d7d) (begin . G4d7b) (define-syntax . G4d79) (define . G4d78)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G507e '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G4fee) (string-ci>=? . G4fed) (string-ci=? . G4fec) (string-ci<? . G4feb) (string-ci<=? . G4fea) (char-whitespace? . G4fe9) (char-upper-case? . G4fe8) (char-numeric? . G4fe6) (char-lower-case? . G4fe5) (char-upcase . G4fe3) (char-downcase . G4fe0) (char-ci>? . G4fdf) (char-ci>=? . G4fde) (char-ci=? . G4fdd) (char-ci<? . G4fdc) (char-ci<=? . G4fdb) (char-alphabetic? . G4fda) (call-with-output-file . G4fae) (call-with-input-file . G4fad) (write-char . G4fac) (write . G4fab) (with-output-to-file . G4faa) (with-input-from-file . G4fa9) (read-char . G4fa8) (read . G4fa7) (peek-char . G4fa6) (open-output-file . G4fa5) (open-input-file . G4fa4) (newline . G4fa3) (display . G4fa2) (close-output-port . G4fa1) (close-input-port . G4fa0) (eof-object . G4f9e) (current-output-port . G4f9c) (current-input-port . G4f9b) (output-port? . G4f9a) (input-port? . G4f99) (scheme-report-environment . G3088) (quotient . G4f5f) (null-environment . G3086) (remainder . G4f5e) (modulo . G4f5d) (inexact->exact . G4f5c) (force . G4f5b) (exact->inexact . G4f5a) (make-promise . G4f59) (string-fill! . G4f57) (string-set! . G4f56) (set-cdr! . G4f55) (set-car! . G4f54) (memv . G4f4e) (memq . G4f4d) (member . G4f4b) (assv . G4f43) (assq . G4f42) (assoc . G4f40) (eval . G308c) (zero? . G4e7d) (vector? . G4e7c) (vector-set! . G4e7b) (vector-ref . G4e7a) (vector-length . G4e78) (vector-fill! . G4e76) (vector->list . G4e75) (vector . G4e74) (values . G4e73) (truncate . G4e72) (tan . G4e71) (symbol? . G4e70) (symbol->string . G4e6e) (substring . G4e6d) (string? . G4e6c) (string>? . G4e6b) (string>=? . G4e6a) (string=? . G4e69) (string<? . G4e68) (string<=? . G4e67) (string-ref . G4e66) (string-length . G4e65) (string-copy . G4e63) (string-append . G4e62) (string->symbol . G4e61) (string->number . G4e60) (string->list . G4e5f) (string . G4e5e) (sqrt . G4e5d) (sin . G4e5c) (round . G4e5b) (reverse . G4e5a) (real? . G4e59) (real-part . G4e57) (rationalize . G4e56) (rational? . G4e55) (procedure? . G4e53) (positive? . G4e52) (pair? . G4e51) (odd? . G4e50) (numerator . G4e4f) (number? . G4e4e) (number->string . G4e4d) (not . G4e4b) (negative? . G4e4a) (min . G4e48) (max . G4e47) (map . G4e46) (make-vector . G4e45) (make-string . G4e44) (make-rectangular . G4e43) (make-polar . G4e42) (magnitude . G4e41) (log . G4e40) (list? . G4e3f) (list-tail . G4e3e) (list-ref . G4e3d) (list->vector . G4e3c) (list->string . G4e3b) (list . G4e3a) (length . G4e39) (lcm . G4e38) (integer? . G4e37) (integer->char . G4e35) (inexact? . G4e33) (imag-part . G4e31) (gcd . G4e30) (for-each . G4e2f) (floor . G4e2e) (expt . G4e2c) (exp . G4e2b) (exact? . G4e2a) (even? . G4e27) (eqv? . G4e25) (equal? . G4e24) (eq? . G4e23) (dynamic-wind . G4e22) (denominator . G4e1b) (cos . G4e1a) (cons . G4e19) (complex? . G4e18) (char? . G4e17) (char>? . G4e16) (char>=? . G4e15) (char=? . G4e14) (char<? . G4e13) (char<=? . G4e12) (char->integer . G4e11) (ceiling . G4e10) (call-with-values . G4e0f) (call-with-current-continuation . G4e0d) (cddddr . G4e0c) (cdddar . G4e0b) (cddadr . G4e0a) (cddaar . G4e09) (cdaddr . G4e08) (cdadar . G4e07) (cdaadr . G4e06) (cdaaar . G4e05) (cadddr . G4e04) (caddar . G4e03) (cadadr . G4e02) (cadaar . G4e01) (caaddr . G4e00) (caadar . G4dff) (caaadr . G4dfe) (caaaar . G4dfd) (cdddr . G4dfc) (cddar . G4dfb) (cdadr . G4dfa) (cdaar . G4df9) (caddr . G4df8) (cadar . G4df7) (caadr . G4df6) (caaar . G4df5) (cddr . G4df4) (cdar . G4df3) (cadr . G4df2) (caar . G4df1) (cdr . G4df0) (car . G4def) (boolean? . G4dee) (atan . G4dec) (asin . G4dea) (apply . G4de9) (append . G4de8) (angle . G4de7) (acos . G4de6) (abs . G4de5) (/ . G4de4) (* . G4de3) (- . G4de2) (+ . G4de1) (>= . G4de0) (> . G4ddf) (= . G4dde) (<= . G4ddd) (< . G4ddc) (unquote-splicing . G4da8) (unquote . G4da7) (delay . G4da0) (or . G4d9e) (and . G4d9d) (do . G4d9c) (cond . G4d9b) (let* . G4d9a) (let . G4d99) (quasiquote . G4d93) (syntax-rules . G4d92) (case . G4d8d) (if . G4d89) (letrec . G4d87) (lambda . G4d84) (quote . G4d81) (letrec-syntax . G4d7f) (let-syntax . G4d7e) (set! . G4d7d) (begin . G4d7b) (define-syntax . G4d79) (define . G4d78)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G507f '(psyntax modules) '() '() '() '() '((module . G4d7a)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5080 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5081 '(rnrs) '(6) '() '() '() '((regexp? . G503c) (string-upcase . G4ff6) (string-titlecase . G4ff5) (string-normalize-nfkd . G4ff4) (string-normalize-nfkc . G4ff3) (string-normalize-nfd . G4ff2) (string-normalize-nfc . G4ff1) (string-foldcase . G4ff0) (string-downcase . G4fef) (string-ci>? . G4fee) (string-ci>=? . G4fed) (string-ci=? . G4fec) (string-ci<? . G4feb) (string-ci<=? . G4fea) (char-whitespace? . G4fe9) (char-upper-case? . G4fe8) (char-title-case? . G4fe7) (char-numeric? . G4fe6) (char-lower-case? . G4fe5) (char-general-category . G4fe4) (char-upcase . G4fe3) (char-titlecase . G4fe2) (char-foldcase . G4fe1) (char-downcase . G4fe0) (char-ci>? . G4fdf) (char-ci>=? . G4fde) (char-ci=? . G4fdd) (char-ci<? . G4fdc) (char-ci<=? . G4fdb) (char-alphabetic? . G4fda) (make-variable-transformer . G2dfe) (identifier? . G30b0) (generate-temporaries . G309a) (free-identifier=? . G309c) (syntax->datum . G30b4) (datum->syntax . G30b2) (bound-identifier=? . G309e) (record-type-descriptor? . G4fd9) (record-predicate . G4fd8) (record-mutator . G4fd7) (record-constructor . G4fd6) (record-accessor . G4fd5) (make-record-type-descriptor . G4fd4) (make-record-constructor-descriptor . G4fd3) (record? . G4fd2) (record-type-uid . G4fd1) (record-type-sealed? . G4fd0) (record-type-parent . G4fcf) (record-type-opaque? . G4fce) (record-type-name . G4fcd) (record-type-generative? . G4fcc) (record-type-field-names . G4fcb) (record-rtd . G4fca) (record-field-mutable? . G4fc9) (delete-file . G4fc8) (file-exists? . G4fc7) (vector-sort! . G4fc6) (vector-sort . G4fc5) (list-sort . G4fc4) (symbol-hash . G4fc3) (string-ci-hash . G4fc2) (string-hash . G4fc1) (equal-hash . G4fc0) (hashtable-equivalence-function . G4fbf) (make-hashtable . G4fbe) (hashtable-hash-function . G4fbd) (make-eqv-hashtable . G4fbc) (make-eq-hashtable . G4fbb) (hashtable? . G4fba) (hashtable-update! . G4fb9) (hashtable-size . G4fb8) (hashtable-set! . G4fb7) (hashtable-ref . G4fb6) (hashtable-mutable? . G4fb5) (hashtable-keys . G4fb4) (hashtable-entries . G4fb3) (hashtable-delete! . G4fb2) (hashtable-copy . G4fb1) (hashtable-contains? . G4fb0) (hashtable-clear! . G4faf) (call-with-output-file . G4fae) (call-with-input-file . G4fad) (write-char . G4fac) (write . G4fab) (with-output-to-file . G4faa) (with-input-from-file . G4fa9) (read-char . G4fa8) (read . G4fa7) (peek-char . G4fa6) (open-output-file . G4fa5) (open-input-file . G4fa4) (newline . G4fa3) (display . G4fa2) (close-output-port . G4fa1) (close-input-port . G4fa0) (eof-object? . G4f9f) (eof-object . G4f9e) (current-error-port . G4f9d) (current-output-port . G4f9c) (current-input-port . G4f9b) (output-port? . G4f9a) (input-port? . G4f99) (utf-8-codec . G4f98) (utf-16-codec . G4f97) (transcoder-error-handling-mode . G4f96) (transcoder-eol-style . G4f95) (transcoder-codec . G4f94) (transcoded-port . G4f93) (textual-port? . G4f92) (string->bytevector . G4f91) (standard-output-port . G4f90) (standard-input-port . G4f8f) (standard-error-port . G4f8e) (set-port-position! . G4f8d) (put-u8 . G4f8c) (put-string . G4f8b) (put-datum . G4f8a) (put-char . G4f89) (put-bytevector . G4f88) (port? . G4f87) (port-transcoder . G4f86) (port-position . G4f85) (port-has-set-port-position!? . G4f84) (port-has-port-position? . G4f83) (port-eof? . G4f82) (output-port-buffer-mode . G4f81) (open-string-output-port . G4f80) (open-string-input-port . G4f7f) (open-file-output-port . G4f7e) (open-file-input/output-port . G4f7d) (open-file-input-port . G4f7c) (open-bytevector-output-port . G4f7b) (open-bytevector-input-port . G4f7a) (native-transcoder . G4f79) (native-eol-style . G4f78) (make-transcoder . G4f77) (latin-1-codec . G4f76) (make-i/o-write-error . G4bc8) (make-i/o-read-error . G4bb6) (make-i/o-port-error . G4c51) (make-i/o-invalid-position-error . G4bdb) (make-i/o-filename-error . G4bf2) (make-i/o-file-protection-error . G4c08) (make-i/o-file-is-read-only-error . G4c1a) (make-i/o-file-does-not-exist-error . G4c3e) (make-i/o-file-already-exists-error . G4c2c) (make-i/o-error . G4ba4) (make-i/o-encoding-error . G4c7a) (make-i/o-decoding-error . G4c67) (make-custom-textual-output-port . G4f75) (make-custom-textual-input/output-port . G4f74) (make-custom-textual-input-port . G4f73) (make-custom-binary-output-port . G4f72) (make-custom-binary-input/output-port . G4f71) (make-custom-binary-input-port . G4f70) (make-bytevector . G4f6f) (lookahead-u8 . G4f6e) (lookahead-char . G4f6d) (i/o-write-error? . G4bca) (i/o-read-error? . G4bb8) (i/o-port-error? . G4c55) (i/o-invalid-position-error? . G4bdf) (i/o-filename-error? . G4bf6) (i/o-file-protection-error? . G4c0a) (i/o-file-is-read-only-error? . G4c1c) (i/o-file-does-not-exist-error? . G4c40) (i/o-file-already-exists-error? . G4c2e) (i/o-error? . G4ba6) (i/o-error-port . G4c57) (i/o-error-filename . G4bf8) (i/o-encoding-error? . G4c7e) (i/o-encoding-error-char . G4c80) (i/o-decoding-error? . G4c69) (get-u8 . G4f6c) (get-string-n! . G4f6b) (get-string-n . G4f6a) (get-string-all . G4f69) (get-line . G4f68) (get-datum . G4f67) (get-char . G4f66) (get-bytevector-some . G4f65) (get-bytevector-n! . G4f64) (get-bytevector-n . G4f63) (get-bytevector-all . G4f62) (flush-output-port . G4f61) (close-port . G4f60) (exit . G4f58) (command-line . G4cd9) (remove . G4f53) (remv . G4f52) (remp . G4f51) (remq . G4f50) (partition . G4f4f) (memv . G4f4e) (memq . G4f4d) (memp . G4f4c) (member . G4f4b) (exists . G4f4a) (for-all . G4f49) (fold-right . G4f48) (fold-left . G4f47) (find . G4f46) (filter . G4f45) (cons* . G4f44) (assv . G4f43) (assq . G4f42) (assp . G4f41) (assoc . G4f40) (call-with-string-output-port . G4f3f) (call-with-port . G4f3e) (call-with-bytevector-output-port . G4f3d) (bytevector->string . G4f3c) (buffer-mode? . G4f3b) (binary-port? . G4f3a) (with-exception-handler . G4f39) (raise-continuable . G4f38) (raise . G4f37) (make-enumeration . G4f36) (enum-set=? . G4f35) (enum-set-universe . G4f34) (enum-set-union . G4f33) (enum-set-subset? . G4f32) (enum-set-projection . G4f31) (enum-set-member? . G4f30) (enum-set-intersection . G4f2f) (enum-set-indexer . G4f2e) (enum-set-difference . G4f2d) (enum-set-constructor . G4f2c) (enum-set-complement . G4f2b) (enum-set->list . G4f2a) (who-condition? . G4a9e) (warning? . G4a2a) (violation? . G4a60) (undefined-violation? . G4b04) (syntax-violation? . G4aee) (syntax-violation-subform . G4af2) (syntax-violation-form . G4af0) (syntax-violation . G30ae) (simple-conditions . G4f29) (serious-condition? . G4a3c) (non-continuable-violation? . G4ab2) (message-condition? . G4a16) (make-who-condition . G4a9a) (make-warning . G4a28) (make-violation . G4a5e) (make-undefined-violation . G4b02) (make-syntax-violation . G4ae8) (make-serious-condition . G4a3a) (make-non-continuable-violation . G4ab0) (make-message-condition . G4a12) (make-lexical-violation . G4ad4) (make-irritants-condition . G4a83) (make-implementation-restriction-violation . G4ac2) (make-error . G4a4c) (make-assertion-violation . G4a70) (lexical-violation? . G4ad6) (irritants-condition? . G4a87) (implementation-restriction-violation? . G4ac4) (error? . G4a4e) (condition-who . G4aa0) (condition-predicate . G4f28) (condition-message . G4a18) (condition-irritants . G4a89) (condition-accessor . G4f27) (condition . G4f26) (assertion-violation? . G4a72) (condition? . G4f25) (utf32->string . G4f24) (utf16->string . G4f23) (utf8->string . G4f22) (uint-list->bytevector . G4f21) (u8-list->bytevector . G4f20) (string->utf8 . G4f1f) (string->utf32 . G4f1e) (string->utf16 . G4f1d) (sint-list->bytevector . G4f1c) (native-endianness . G4f1b) (bytevector? . G4f1a) (bytevector=? . G4f19) (bytevector-uint-set! . G4f18) (bytevector-uint-ref . G4f17) (bytevector-u8-set! . G4f16) (bytevector-u8-ref . G4f15) (bytevector-u64-set! . G4f14) (bytevector-u64-ref . G4f13) (bytevector-u64-native-set! . G4f12) (bytevector-u64-native-ref . G4f11) (bytevector-u32-set! . G4f10) (bytevector-u32-ref . G4f0f) (bytevector-u32-native-set! . G4f0e) (bytevector-u32-native-ref . G4f0d) (bytevector-u16-set! . G4f0c) (bytevector-u16-ref . G4f0b) (bytevector-u16-native-set! . G4f0a) (bytevector-u16-native-ref . G4f09) (bytevector-sint-set! . G4f08) (bytevector-sint-ref . G4f07) (bytevector-s8-set! . G4f06) (bytevector-s8-ref . G4f05) (bytevector-s64-set! . G4f04) (bytevector-s64-ref . G4f03) (bytevector-s64-native-set! . G4f02) (bytevector-s64-native-ref . G4f01) (bytevector-s32-set! . G4f00) (bytevector-s32-ref . G4eff) (bytevector-s32-native-set! . G4efe) (bytevector-s32-native-ref . G4efd) (bytevector-s16-set! . G4efc) (bytevector-s16-ref . G4efb) (bytevector-s16-native-set! . G4efa) (bytevector-s16-native-ref . G4ef9) (bytevector-length . G4ef8) (bytevector-ieee-single-ref . G4ef7) (bytevector-ieee-single-set! . G4ef6) (bytevector-ieee-single-native-set! . G4ef5) (bytevector-ieee-single-native-ref . G4ef4) (bytevector-ieee-double-set! . G4ef3) (bytevector-ieee-double-ref . G4ef2) (bytevector-ieee-double-native-set! . G4ef1) (bytevector-ieee-double-native-ref . G4ef0) (bytevector-fill! . G4eef) (bytevector-copy! . G4eee) (bytevector-copy . G4eed) (bytevector->uint-list . G4eec) (bytevector->u8-list . G4eeb) (bytevector->sint-list . G4eea) (no-nans-violation? . G4b28) (no-infinities-violation? . G4b16) (make-no-nans-violation . G4b26) (make-no-infinities-violation . G4b14) (real->flonum . G4ee9) (flzero? . G4ee8) (fltruncate . G4ee7) (fltan . G4ee6) (flsqrt . G4ee5) (flsin . G4ee4) (flround . G4ee3) (flpositive? . G4ee2) (flonum? . G4ee1) (flodd? . G4ee0) (flnumerator . G4edf) (flnegative? . G4ede) (flnan? . G4edd) (flmod0 . G4edc) (flmod . G4edb) (flmin . G4eda) (flmax . G4ed9) (fllog . G4ed8) (flinteger? . G4ed7) (flinfinite? . G4ed6) (flfloor . G4ed5) (flfinite? . G4ed4) (flexpt . G4ed3) (flexp . G4ed2) (fleven? . G4ed1) (fldiv0-and-mod0 . G4ed0) (fldiv0 . G4ecf) (fldiv-and-mod . G4ece) (fldiv . G4ecd) (fldenominator . G4ecc) (flcos . G4ecb) (flceiling . G4eca) (flatan . G4ec9) (flasin . G4ec8) (flacos . G4ec7) (flabs . G4ec6) (fl>? . G4ec5) (fl>=? . G4ec4) (fl=? . G4ec3) (fl<? . G4ec2) (fl<=? . G4ec1) (fl/ . G4ec0) (fl- . G4ebf) (fl+ . G4ebe) (fl* . G4ebd) (fixnum->flonum . G4ebc) (fxzero? . G4ebb) (fxxor . G4eba) (fxrotate-bit-field . G4eb9) (fxreverse-bit-field . G4eb8) (fxpositive? . G4eb7) (fxodd? . G4eb6) (fxnot . G4eb5) (fxnegative? . G4eb4) (fxmod0 . G4eb3) (fxmod . G4eb2) (fxmin . G4eb1) (fxmax . G4eb0) (fxlength . G4eaf) (fxior . G4eae) (fxif . G4ead) (fxfirst-bit-set . G4eac) (fxeven? . G4eab) (fxdiv0-and-mod0 . G4eaa) (fxdiv0 . G4ea9) (fxdiv-and-mod . G4ea8) (fxdiv . G4ea7) (fxcopy-bit-field . G4ea6) (fxcopy-bit . G4ea5) (fxbit-set? . G4ea4) (fxbit-field . G4ea3) (fxbit-count . G4ea2) (fxarithmetic-shift-right . G4ea1) (fxarithmetic-shift-left . G4ea0) (fxarithmetic-shift . G4e9f) (fxand . G4e9e) (fx>? . G4e9d) (fx>=? . G4e9c) (fx=? . G4e9b) (fx<? . G4e9a) (fx<=? . G4e99) (fx-/carry . G4e98) (fx- . G4e97) (fx+/carry . G4e96) (fx+ . G4e95) (fx*/carry . G4e94) (fx* . G4e93) (greatest-fixnum . G4e92) (least-fixnum . G4e91) (fixnum-width . G4e90) (fixnum? . G4e8f) (bitwise-rotate-bit-field . G4e8e) (bitwise-reverse-bit-field . G4e8d) (bitwise-length . G4e8c) (bitwise-if . G4e8b) (bitwise-first-bit-set . G4e8a) (bitwise-copy-bit-field . G4e89) (bitwise-copy-bit . G4e88) (bitwise-bit-set? . G4e87) (bitwise-bit-field . G4e86) (bitwise-bit-count . G4e85) (bitwise-xor . G4e84) (bitwise-ior . G4e83) (bitwise-and . G4e82) (bitwise-not . G4e81) (bitwise-arithmetic-shift-right . G4e80) (bitwise-arithmetic-shift-left . G4e7f) (bitwise-arithmetic-shift . G4e7e) (zero? . G4e7d) (vector? . G4e7c) (vector-set! . G4e7b) (vector-ref . G4e7a) (vector-map . G4e79) (vector-length . G4e78) (vector-for-each . G4e77) (vector-fill! . G4e76) (vector->list . G4e75) (vector . G4e74) (values . G4e73) (truncate . G4e72) (tan . G4e71) (symbol? . G4e70) (symbol=? . G4e6f) (symbol->string . G4e6e) (substring . G4e6d) (string? . G4e6c) (string>? . G4e6b) (string>=? . G4e6a) (string=? . G4e69) (string<? . G4e68) (string<=? . G4e67) (string-ref . G4e66) (string-length . G4e65) (string-for-each . G4e64) (string-copy . G4e63) (string-append . G4e62) (string->symbol . G4e61) (string->number . G4e60) (string->list . G4e5f) (string . G4e5e) (sqrt . G4e5d) (sin . G4e5c) (round . G4e5b) (reverse . G4e5a) (real? . G4e59) (real-valued? . G4e58) (real-part . G4e57) (rationalize . G4e56) (rational? . G4e55) (rational-valued? . G4e54) (procedure? . G4e53) (positive? . G4e52) (pair? . G4e51) (odd? . G4e50) (numerator . G4e4f) (number? . G4e4e) (number->string . G4e4d) (null? . G4e4c) (not . G4e4b) (negative? . G4e4a) (nan? . G4e49) (min . G4e48) (max . G4e47) (map . G4e46) (make-vector . G4e45) (make-string . G4e44) (make-rectangular . G4e43) (make-polar . G4e42) (magnitude . G4e41) (log . G4e40) (list? . G4e3f) (list-tail . G4e3e) (list-ref . G4e3d) (list->vector . G4e3c) (list->string . G4e3b) (list . G4e3a) (length . G4e39) (lcm . G4e38) (integer? . G4e37) (integer-valued? . G4e36) (integer->char . G4e35) (infinite? . G4e34) (inexact? . G4e33) (inexact . G4e32) (imag-part . G4e31) (gcd . G4e30) (for-each . G4e2f) (floor . G4e2e) (finite? . G4e2d) (expt . G4e2c) (exp . G4e2b) (exact? . G4e2a) (exact-integer-sqrt . G4e29) (exact . G4e28) (even? . G4e27) (error . G4e26) (eqv? . G4e25) (equal? . G4e24) (eq? . G4e23) (dynamic-wind . G4e22) (div0-and-mod0 . G4e21) (mod0 . G4e20) (div0 . G4e1f) (div-and-mod . G4e1e) (mod . G4e1d) (div . G4e1c) (denominator . G4e1b) (cos . G4e1a) (cons . G4e19) (complex? . G4e18) (char? . G4e17) (char>? . G4e16) (char>=? . G4e15) (char=? . G4e14) (char<? . G4e13) (char<=? . G4e12) (char->integer . G4e11) (ceiling . G4e10) (call-with-values . G4e0f) (call/cc . G4e0e) (call-with-current-continuation . G4e0d) (cddddr . G4e0c) (cdddar . G4e0b) (cddadr . G4e0a) (cddaar . G4e09) (cdaddr . G4e08) (cdadar . G4e07) (cdaadr . G4e06) (cdaaar . G4e05) (cadddr . G4e04) (caddar . G4e03) (cadadr . G4e02) (cadaar . G4e01) (caaddr . G4e00) (caadar . G4dff) (caaadr . G4dfe) (caaaar . G4dfd) (cdddr . G4dfc) (cddar . G4dfb) (cdadr . G4dfa) (cdaar . G4df9) (caddr . G4df8) (cadar . G4df7) (caadr . G4df6) (caaar . G4df5) (cddr . G4df4) (cdar . G4df3) (cadr . G4df2) (caar . G4df1) (cdr . G4df0) (car . G4def) (boolean? . G4dee) (boolean=? . G4ded) (atan . G4dec) (assertion-violation . G4deb) (asin . G4dea) (apply . G4de9) (append . G4de8) (angle . G4de7) (acos . G4de6) (abs . G4de5) (/ . G4de4) (* . G4de3) (- . G4de2) (+ . G4de1) (>= . G4de0) (> . G4ddf) (= . G4dde) (<= . G4ddd) (< . G4ddc) (&no-nans . G4dd9) (&no-infinities . G4dd8) (&i/o-encoding . G4dd7) (&i/o-decoding . G4dd6) (&i/o-port . G4dd5) (&i/o-file-does-not-exist . G4dd4) (&i/o-file-already-exists . G4dd3) (&i/o-file-is-read-only . G4dd2) (&i/o-file-protection . G4dd1) (&i/o-filename . G4dd0) (&i/o-invalid-position . G4dcf) (&i/o-write . G4dce) (&i/o-read . G4dcd) (&i/o . G4dcc) (&undefined . G4dcb) (&syntax . G4dca) (&lexical . G4dc9) (&implementation-restriction . G4dc8) (&non-continuable . G4dc7) (&who . G4dc6) (&irritants . G4dc5) (&assertion . G4dc4) (&violation . G4dc3) (&error . G4dc2) (&serious . G4dc1) (&warning . G4dc0) (&message . G4dbf) (&condition . G4dbe) (define-condition-type . G4dbd) (define-enumeration . G4dbc) (define-record-type . G4dbb) (parent-rtd . G4dba) (nongenerative . G4db9) (opaque . G4db8) (sealed . G4db7) (protocol . G4db6) (parent . G4db5) (immutable . G4db4) (mutable . G4db3) (fields . G4db2) (error-handling-mode . G4db1) (file-options . G4db0) (buffer-mode . G4daf) (eol-style . G4dae) (guard . G4dad) (unsyntax-splicing . G4daa) (unsyntax . G4da9) (unquote-splicing . G4da8) (unquote . G4da7) (_ . G4da6) (else . G4da5) (=> . G4da4) (... . G4da3) (assert . G4da2) (endianness . G4da1) (or . G4d9e) (and . G4d9d) (do . G4d9c) (cond . G4d9b) (let* . G4d9a) (let . G4d99) (let*-values . G4d98) (let-values . G4d97) (identifier-syntax . G4d96) (with-syntax . G4d95) (quasisyntax . G4d94) (quasiquote . G4d93) (syntax-rules . G4d92) (record-constructor-descriptor . G4d8f) (record-type-descriptor . G4d8e) (case . G4d8d) (unless . G4d8b) (when . G4d8a) (if . G4d89) (letrec* . G4d88) (letrec . G4d87) (case-lambda . G4d85) (lambda . G4d84) (syntax . G4d83) (syntax-case . G4d82) (quote . G4d81) (letrec-syntax . G4d7f) (let-syntax . G4d7e) (set! . G4d7d) (begin . G4d7b) (define-syntax . G4d79) (define . G4d78)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5082 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3088) (quotient . G4f5f) (null-environment . G3086) (remainder . G4f5e) (modulo . G4f5d) (inexact->exact . G4f5c) (force . G4f5b) (exact->inexact . G4f5a) (make-promise . G4f59) (delay . G4da0)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5083 '(rnrs control) '(6) '() '() '() '((do . G4d9c) (unless . G4d8b) (when . G4d8a) (case-lambda . G4d85)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5084 '(rnrs eval) '(6) '() '() '() '((eval . G308c) (environment . G3084)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5085 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4f55) (set-car! . G4f54)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5086 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4f57) (string-set! . G4f56)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5087 '(rnrs programs) '(6) '() '() '() '((exit . G4f58) (command-line . G4cd9)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5088 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2dfe) (identifier? . G30b0) (generate-temporaries . G309a) (free-identifier=? . G309c) (syntax->datum . G30b4) (datum->syntax . G30b2) (bound-identifier=? . G309e) (syntax-violation . G30ae) (unsyntax-splicing . G4daa) (unsyntax . G4da9) (_ . G4da6) (... . G4da3) (with-syntax . G4d95) (quasisyntax . G4d94) (syntax . G4d83) (syntax-case . G4d82)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5089 '(rnrs files) '(6) '() '() '() '((delete-file . G4fc8) (file-exists? . G4fc7) (make-i/o-write-error . G4bc8) (make-i/o-read-error . G4bb6) (make-i/o-port-error . G4c51) (make-i/o-invalid-position-error . G4bdb) (make-i/o-filename-error . G4bf2) (make-i/o-file-protection-error . G4c08) (make-i/o-file-is-read-only-error . G4c1a) (make-i/o-file-does-not-exist-error . G4c3e) (make-i/o-file-already-exists-error . G4c2c) (make-i/o-error . G4ba4) (i/o-write-error? . G4bca) (i/o-read-error? . G4bb8) (i/o-port-error? . G4c55) (i/o-invalid-position-error? . G4bdf) (i/o-filename-error? . G4bf6) (i/o-file-protection-error? . G4c0a) (i/o-file-is-read-only-error? . G4c1c) (i/o-file-does-not-exist-error? . G4c40) (i/o-file-already-exists-error? . G4c2e) (i/o-error? . G4ba6) (i/o-error-port . G4c57) (i/o-error-filename . G4bf8) (&i/o-port . G4dd5) (&i/o-file-does-not-exist . G4dd4) (&i/o-file-already-exists . G4dd3) (&i/o-file-is-read-only . G4dd2) (&i/o-file-protection . G4dd1) (&i/o-filename . G4dd0) (&i/o-invalid-position . G4dcf) (&i/o-write . G4dce) (&i/o-read . G4dcd) (&i/o . G4dcc)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G508a '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G4fc6) (vector-sort . G4fc5) (list-sort . G4fc4)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G508b '(rnrs base) '(6) '() '() '() '((zero? . G4e7d) (vector? . G4e7c) (vector-set! . G4e7b) (vector-ref . G4e7a) (vector-map . G4e79) (vector-length . G4e78) (vector-for-each . G4e77) (vector-fill! . G4e76) (vector->list . G4e75) (vector . G4e74) (values . G4e73) (truncate . G4e72) (tan . G4e71) (symbol? . G4e70) (symbol=? . G4e6f) (symbol->string . G4e6e) (substring . G4e6d) (string? . G4e6c) (string>? . G4e6b) (string>=? . G4e6a) (string=? . G4e69) (string<? . G4e68) (string<=? . G4e67) (string-ref . G4e66) (string-length . G4e65) (string-for-each . G4e64) (string-copy . G4e63) (string-append . G4e62) (string->symbol . G4e61) (string->number . G4e60) (string->list . G4e5f) (string . G4e5e) (sqrt . G4e5d) (sin . G4e5c) (round . G4e5b) (reverse . G4e5a) (real? . G4e59) (real-valued? . G4e58) (real-part . G4e57) (rationalize . G4e56) (rational? . G4e55) (rational-valued? . G4e54) (procedure? . G4e53) (positive? . G4e52) (pair? . G4e51) (odd? . G4e50) (numerator . G4e4f) (number? . G4e4e) (number->string . G4e4d) (null? . G4e4c) (not . G4e4b) (negative? . G4e4a) (nan? . G4e49) (min . G4e48) (max . G4e47) (map . G4e46) (make-vector . G4e45) (make-string . G4e44) (make-rectangular . G4e43) (make-polar . G4e42) (magnitude . G4e41) (log . G4e40) (list? . G4e3f) (list-tail . G4e3e) (list-ref . G4e3d) (list->vector . G4e3c) (list->string . G4e3b) (list . G4e3a) (length . G4e39) (lcm . G4e38) (integer? . G4e37) (integer-valued? . G4e36) (integer->char . G4e35) (infinite? . G4e34) (inexact? . G4e33) (inexact . G4e32) (imag-part . G4e31) (gcd . G4e30) (for-each . G4e2f) (floor . G4e2e) (finite? . G4e2d) (expt . G4e2c) (exp . G4e2b) (exact? . G4e2a) (exact-integer-sqrt . G4e29) (exact . G4e28) (even? . G4e27) (error . G4e26) (eqv? . G4e25) (equal? . G4e24) (eq? . G4e23) (dynamic-wind . G4e22) (div0-and-mod0 . G4e21) (mod0 . G4e20) (div0 . G4e1f) (div-and-mod . G4e1e) (mod . G4e1d) (div . G4e1c) (denominator . G4e1b) (cos . G4e1a) (cons . G4e19) (complex? . G4e18) (char? . G4e17) (char>? . G4e16) (char>=? . G4e15) (char=? . G4e14) (char<? . G4e13) (char<=? . G4e12) (char->integer . G4e11) (ceiling . G4e10) (call-with-values . G4e0f) (call/cc . G4e0e) (call-with-current-continuation . G4e0d) (cddddr . G4e0c) (cdddar . G4e0b) (cddadr . G4e0a) (cddaar . G4e09) (cdaddr . G4e08) (cdadar . G4e07) (cdaadr . G4e06) (cdaaar . G4e05) (cadddr . G4e04) (caddar . G4e03) (cadadr . G4e02) (cadaar . G4e01) (caaddr . G4e00) (caadar . G4dff) (caaadr . G4dfe) (caaaar . G4dfd) (cdddr . G4dfc) (cddar . G4dfb) (cdadr . G4dfa) (cdaar . G4df9) (caddr . G4df8) (cadar . G4df7) (caadr . G4df6) (caaar . G4df5) (cddr . G4df4) (cdar . G4df3) (cadr . G4df2) (caar . G4df1) (cdr . G4df0) (car . G4def) (boolean? . G4dee) (boolean=? . G4ded) (atan . G4dec) (assertion-violation . G4deb) (asin . G4dea) (apply . G4de9) (append . G4de8) (angle . G4de7) (acos . G4de6) (abs . G4de5) (/ . G4de4) (* . G4de3) (- . G4de2) (+ . G4de1) (>= . G4de0) (> . G4ddf) (= . G4dde) (<= . G4ddd) (< . G4ddc) (unquote-splicing . G4da8) (unquote . G4da7) (_ . G4da6) (else . G4da5) (=> . G4da4) (... . G4da3) (assert . G4da2) (or . G4d9e) (and . G4d9d) (cond . G4d9b) (let* . G4d9a) (let . G4d99) (let*-values . G4d98) (let-values . G4d97) (identifier-syntax . G4d96) (quasiquote . G4d93) (syntax-rules . G4d92) (case . G4d8d) (if . G4d89) (letrec* . G4d88) (letrec . G4d87) (lambda . G4d84) (quote . G4d81) (letrec-syntax . G4d7f) (let-syntax . G4d7e) (set! . G4d7d) (begin . G4d7b) (define-syntax . G4d79) (define . G4d78)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G508c '(rnrs lists) '(6) '() '() '() '((remove . G4f53) (remv . G4f52) (remp . G4f51) (remq . G4f50) (partition . G4f4f) (memv . G4f4e) (memq . G4f4d) (memp . G4f4c) (member . G4f4b) (exists . G4f4a) (for-all . G4f49) (fold-right . G4f48) (fold-left . G4f47) (find . G4f46) (filter . G4f45) (cons* . G4f44) (assv . G4f43) (assq . G4f42) (assp . G4f41) (assoc . G4f40)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G508d '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G4fae) (call-with-input-file . G4fad) (write-char . G4fac) (write . G4fab) (with-output-to-file . G4faa) (with-input-from-file . G4fa9) (read-char . G4fa8) (read . G4fa7) (peek-char . G4fa6) (open-output-file . G4fa5) (open-input-file . G4fa4) (newline . G4fa3) (display . G4fa2) (close-output-port . G4fa1) (close-input-port . G4fa0) (eof-object? . G4f9f) (eof-object . G4f9e) (current-error-port . G4f9d) (current-output-port . G4f9c) (current-input-port . G4f9b) (output-port? . G4f9a) (input-port? . G4f99) (make-i/o-write-error . G4bc8) (make-i/o-read-error . G4bb6) (make-i/o-port-error . G4c51) (make-i/o-invalid-position-error . G4bdb) (make-i/o-filename-error . G4bf2) (make-i/o-file-protection-error . G4c08) (make-i/o-file-is-read-only-error . G4c1a) (make-i/o-file-does-not-exist-error . G4c3e) (make-i/o-file-already-exists-error . G4c2c) (make-i/o-error . G4ba4) (i/o-write-error? . G4bca) (i/o-read-error? . G4bb8) (i/o-port-error? . G4c55) (i/o-invalid-position-error? . G4bdf) (i/o-filename-error? . G4bf6) (i/o-file-protection-error? . G4c0a) (i/o-file-is-read-only-error? . G4c1c) (i/o-file-does-not-exist-error? . G4c40) (i/o-file-already-exists-error? . G4c2e) (i/o-error? . G4ba6) (i/o-error-port . G4c57) (i/o-error-filename . G4bf8) (&i/o-port . G4dd5) (&i/o-file-does-not-exist . G4dd4) (&i/o-file-already-exists . G4dd3) (&i/o-file-is-read-only . G4dd2) (&i/o-file-protection . G4dd1) (&i/o-filename . G4dd0) (&i/o-invalid-position . G4dcf) (&i/o-write . G4dce) (&i/o-read . G4dcd) (&i/o . G4dcc)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G508e '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4f6f) (utf32->string . G4f24) (utf16->string . G4f23) (utf8->string . G4f22) (uint-list->bytevector . G4f21) (u8-list->bytevector . G4f20) (string->utf8 . G4f1f) (string->utf32 . G4f1e) (string->utf16 . G4f1d) (sint-list->bytevector . G4f1c) (native-endianness . G4f1b) (bytevector? . G4f1a) (bytevector=? . G4f19) (bytevector-uint-set! . G4f18) (bytevector-uint-ref . G4f17) (bytevector-u8-set! . G4f16) (bytevector-u8-ref . G4f15) (bytevector-u64-set! . G4f14) (bytevector-u64-ref . G4f13) (bytevector-u64-native-set! . G4f12) (bytevector-u64-native-ref . G4f11) (bytevector-u32-set! . G4f10) (bytevector-u32-ref . G4f0f) (bytevector-u32-native-set! . G4f0e) (bytevector-u32-native-ref . G4f0d) (bytevector-u16-set! . G4f0c) (bytevector-u16-ref . G4f0b) (bytevector-u16-native-set! . G4f0a) (bytevector-u16-native-ref . G4f09) (bytevector-sint-set! . G4f08) (bytevector-sint-ref . G4f07) (bytevector-s8-set! . G4f06) (bytevector-s8-ref . G4f05) (bytevector-s64-set! . G4f04) (bytevector-s64-ref . G4f03) (bytevector-s64-native-set! . G4f02) (bytevector-s64-native-ref . G4f01) (bytevector-s32-set! . G4f00) (bytevector-s32-ref . G4eff) (bytevector-s32-native-set! . G4efe) (bytevector-s32-native-ref . G4efd) (bytevector-s16-set! . G4efc) (bytevector-s16-ref . G4efb) (bytevector-s16-native-set! . G4efa) (bytevector-s16-native-ref . G4ef9) (bytevector-length . G4ef8) (bytevector-ieee-single-ref . G4ef7) (bytevector-ieee-single-set! . G4ef6) (bytevector-ieee-single-native-set! . G4ef5) (bytevector-ieee-single-native-ref . G4ef4) (bytevector-ieee-double-set! . G4ef3) (bytevector-ieee-double-ref . G4ef2) (bytevector-ieee-double-native-set! . G4ef1) (bytevector-ieee-double-native-ref . G4ef0) (bytevector-fill! . G4eef) (bytevector-copy! . G4eee) (bytevector-copy . G4eed) (bytevector->uint-list . G4eec) (bytevector->u8-list . G4eeb) (bytevector->sint-list . G4eea) (endianness . G4da1)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G508f '(rnrs unicode) '(6) '() '() '() '((string-upcase . G4ff6) (string-titlecase . G4ff5) (string-normalize-nfkd . G4ff4) (string-normalize-nfkc . G4ff3) (string-normalize-nfd . G4ff2) (string-normalize-nfc . G4ff1) (string-foldcase . G4ff0) (string-downcase . G4fef) (string-ci>? . G4fee) (string-ci>=? . G4fed) (string-ci=? . G4fec) (string-ci<? . G4feb) (string-ci<=? . G4fea) (char-whitespace? . G4fe9) (char-upper-case? . G4fe8) (char-title-case? . G4fe7) (char-numeric? . G4fe6) (char-lower-case? . G4fe5) (char-general-category . G4fe4) (char-upcase . G4fe3) (char-titlecase . G4fe2) (char-foldcase . G4fe1) (char-downcase . G4fe0) (char-ci>? . G4fdf) (char-ci>=? . G4fde) (char-ci=? . G4fdd) (char-ci<? . G4fdc) (char-ci<=? . G4fdb) (char-alphabetic? . G4fda)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5090 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f39) (raise-continuable . G4f38) (raise . G4f37) (guard . G4dad) (else . G4da5) (=> . G4da4)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5091 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4e8e) (bitwise-reverse-bit-field . G4e8d) (bitwise-length . G4e8c) (bitwise-if . G4e8b) (bitwise-first-bit-set . G4e8a) (bitwise-copy-bit-field . G4e89) (bitwise-copy-bit . G4e88) (bitwise-bit-set? . G4e87) (bitwise-bit-field . G4e86) (bitwise-bit-count . G4e85) (bitwise-xor . G4e84) (bitwise-ior . G4e83) (bitwise-and . G4e82) (bitwise-not . G4e81) (bitwise-arithmetic-shift-right . G4e80) (bitwise-arithmetic-shift-left . G4e7f) (bitwise-arithmetic-shift . G4e7e)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5092 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4ebb) (fxxor . G4eba) (fxrotate-bit-field . G4eb9) (fxreverse-bit-field . G4eb8) (fxpositive? . G4eb7) (fxodd? . G4eb6) (fxnot . G4eb5) (fxnegative? . G4eb4) (fxmod0 . G4eb3) (fxmod . G4eb2) (fxmin . G4eb1) (fxmax . G4eb0) (fxlength . G4eaf) (fxior . G4eae) (fxif . G4ead) (fxfirst-bit-set . G4eac) (fxeven? . G4eab) (fxdiv0-and-mod0 . G4eaa) (fxdiv0 . G4ea9) (fxdiv-and-mod . G4ea8) (fxdiv . G4ea7) (fxcopy-bit-field . G4ea6) (fxcopy-bit . G4ea5) (fxbit-set? . G4ea4) (fxbit-field . G4ea3) (fxbit-count . G4ea2) (fxarithmetic-shift-right . G4ea1) (fxarithmetic-shift-left . G4ea0) (fxarithmetic-shift . G4e9f) (fxand . G4e9e) (fx>? . G4e9d) (fx>=? . G4e9c) (fx=? . G4e9b) (fx<? . G4e9a) (fx<=? . G4e99) (fx-/carry . G4e98) (fx- . G4e97) (fx+/carry . G4e96) (fx+ . G4e95) (fx*/carry . G4e94) (fx* . G4e93) (greatest-fixnum . G4e92) (least-fixnum . G4e91) (fixnum-width . G4e90) (fixnum? . G4e8f)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5093 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4b28) (no-infinities-violation? . G4b16) (make-no-nans-violation . G4b26) (make-no-infinities-violation . G4b14) (real->flonum . G4ee9) (flzero? . G4ee8) (fltruncate . G4ee7) (fltan . G4ee6) (flsqrt . G4ee5) (flsin . G4ee4) (flround . G4ee3) (flpositive? . G4ee2) (flonum? . G4ee1) (flodd? . G4ee0) (flnumerator . G4edf) (flnegative? . G4ede) (flnan? . G4edd) (flmod0 . G4edc) (flmod . G4edb) (flmin . G4eda) (flmax . G4ed9) (fllog . G4ed8) (flinteger? . G4ed7) (flinfinite? . G4ed6) (flfloor . G4ed5) (flfinite? . G4ed4) (flexpt . G4ed3) (flexp . G4ed2) (fleven? . G4ed1) (fldiv0-and-mod0 . G4ed0) (fldiv0 . G4ecf) (fldiv-and-mod . G4ece) (fldiv . G4ecd) (fldenominator . G4ecc) (flcos . G4ecb) (flceiling . G4eca) (flatan . G4ec9) (flasin . G4ec8) (flacos . G4ec7) (flabs . G4ec6) (fl>? . G4ec5) (fl>=? . G4ec4) (fl=? . G4ec3) (fl<? . G4ec2) (fl<=? . G4ec1) (fl/ . G4ec0) (fl- . G4ebf) (fl+ . G4ebe) (fl* . G4ebd) (fixnum->flonum . G4ebc) (&no-nans . G4dd9) (&no-infinities . G4dd8)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5094 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G4fc3) (string-ci-hash . G4fc2) (string-hash . G4fc1) (equal-hash . G4fc0) (hashtable-equivalence-function . G4fbf) (make-hashtable . G4fbe) (hashtable-hash-function . G4fbd) (make-eqv-hashtable . G4fbc) (make-eq-hashtable . G4fbb) (hashtable? . G4fba) (hashtable-update! . G4fb9) (hashtable-size . G4fb8) (hashtable-set! . G4fb7) (hashtable-ref . G4fb6) (hashtable-mutable? . G4fb5) (hashtable-keys . G4fb4) (hashtable-entries . G4fb3) (hashtable-delete! . G4fb2) (hashtable-copy . G4fb1) (hashtable-contains? . G4fb0) (hashtable-clear! . G4faf)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5095 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4f9f) (eof-object . G4f9e) (current-error-port . G4f9d) (current-output-port . G4f9c) (current-input-port . G4f9b) (output-port? . G4f9a) (input-port? . G4f99) (utf-8-codec . G4f98) (utf-16-codec . G4f97) (transcoder-error-handling-mode . G4f96) (transcoder-eol-style . G4f95) (transcoder-codec . G4f94) (transcoded-port . G4f93) (textual-port? . G4f92) (string->bytevector . G4f91) (standard-output-port . G4f90) (standard-input-port . G4f8f) (standard-error-port . G4f8e) (set-port-position! . G4f8d) (put-u8 . G4f8c) (put-string . G4f8b) (put-datum . G4f8a) (put-char . G4f89) (put-bytevector . G4f88) (port? . G4f87) (port-transcoder . G4f86) (port-position . G4f85) (port-has-set-port-position!? . G4f84) (port-has-port-position? . G4f83) (port-eof? . G4f82) (output-port-buffer-mode . G4f81) (open-string-output-port . G4f80) (open-string-input-port . G4f7f) (open-file-output-port . G4f7e) (open-file-input/output-port . G4f7d) (open-file-input-port . G4f7c) (open-bytevector-output-port . G4f7b) (open-bytevector-input-port . G4f7a) (native-transcoder . G4f79) (native-eol-style . G4f78) (make-transcoder . G4f77) (latin-1-codec . G4f76) (make-i/o-write-error . G4bc8) (make-i/o-read-error . G4bb6) (make-i/o-port-error . G4c51) (make-i/o-invalid-position-error . G4bdb) (make-i/o-filename-error . G4bf2) (make-i/o-file-protection-error . G4c08) (make-i/o-file-is-read-only-error . G4c1a) (make-i/o-file-does-not-exist-error . G4c3e) (make-i/o-file-already-exists-error . G4c2c) (make-i/o-error . G4ba4) (make-i/o-encoding-error . G4c7a) (make-i/o-decoding-error . G4c67) (make-custom-textual-output-port . G4f75) (make-custom-textual-input/output-port . G4f74) (make-custom-textual-input-port . G4f73) (make-custom-binary-output-port . G4f72) (make-custom-binary-input/output-port . G4f71) (make-custom-binary-input-port . G4f70) (lookahead-u8 . G4f6e) (lookahead-char . G4f6d) (i/o-write-error? . G4bca) (i/o-read-error? . G4bb8) (i/o-port-error? . G4c55) (i/o-invalid-position-error? . G4bdf) (i/o-filename-error? . G4bf6) (i/o-file-protection-error? . G4c0a) (i/o-file-is-read-only-error? . G4c1c) (i/o-file-does-not-exist-error? . G4c40) (i/o-file-already-exists-error? . G4c2e) (i/o-error? . G4ba6) (i/o-error-port . G4c57) (i/o-error-filename . G4bf8) (i/o-encoding-error? . G4c7e) (i/o-encoding-error-char . G4c80) (i/o-decoding-error? . G4c69) (get-u8 . G4f6c) (get-string-n! . G4f6b) (get-string-n . G4f6a) (get-string-all . G4f69) (get-line . G4f68) (get-datum . G4f67) (get-char . G4f66) (get-bytevector-some . G4f65) (get-bytevector-n! . G4f64) (get-bytevector-n . G4f63) (get-bytevector-all . G4f62) (flush-output-port . G4f61) (close-port . G4f60) (call-with-string-output-port . G4f3f) (call-with-port . G4f3e) (call-with-bytevector-output-port . G4f3d) (bytevector->string . G4f3c) (buffer-mode? . G4f3b) (binary-port? . G4f3a) (&i/o-encoding . G4dd7) (&i/o-decoding . G4dd6) (&i/o-port . G4dd5) (&i/o-file-does-not-exist . G4dd4) (&i/o-file-already-exists . G4dd3) (&i/o-file-is-read-only . G4dd2) (&i/o-file-protection . G4dd1) (&i/o-filename . G4dd0) (&i/o-invalid-position . G4dcf) (&i/o-write . G4dce) (&i/o-read . G4dcd) (&i/o . G4dcc) (error-handling-mode . G4db1) (file-options . G4db0) (buffer-mode . G4daf) (eol-style . G4dae)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5096 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f36) (enum-set=? . G4f35) (enum-set-universe . G4f34) (enum-set-union . G4f33) (enum-set-subset? . G4f32) (enum-set-projection . G4f31) (enum-set-member? . G4f30) (enum-set-intersection . G4f2f) (enum-set-indexer . G4f2e) (enum-set-difference . G4f2d) (enum-set-constructor . G4f2c) (enum-set-complement . G4f2b) (enum-set->list . G4f2a) (define-enumeration . G4dbc)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5097 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a9e) (warning? . G4a2a) (violation? . G4a60) (undefined-violation? . G4b04) (syntax-violation? . G4aee) (syntax-violation-subform . G4af2) (syntax-violation-form . G4af0) (syntax-violation . G30ae) (simple-conditions . G4f29) (serious-condition? . G4a3c) (non-continuable-violation? . G4ab2) (message-condition? . G4a16) (make-who-condition . G4a9a) (make-warning . G4a28) (make-violation . G4a5e) (make-undefined-violation . G4b02) (make-syntax-violation . G4ae8) (make-serious-condition . G4a3a) (make-non-continuable-violation . G4ab0) (make-message-condition . G4a12) (make-lexical-violation . G4ad4) (make-irritants-condition . G4a83) (make-implementation-restriction-violation . G4ac2) (make-error . G4a4c) (make-assertion-violation . G4a70) (lexical-violation? . G4ad6) (irritants-condition? . G4a87) (implementation-restriction-violation? . G4ac4) (error? . G4a4e) (condition-who . G4aa0) (condition-predicate . G4f28) (condition-message . G4a18) (condition-irritants . G4a89) (condition-accessor . G4f27) (condition . G4f26) (assertion-violation? . G4a72) (condition? . G4f25) (&undefined . G4dcb) (&syntax . G4dca) (&lexical . G4dc9) (&implementation-restriction . G4dc8) (&non-continuable . G4dc7) (&who . G4dc6) (&irritants . G4dc5) (&assertion . G4dc4) (&violation . G4dc3) (&error . G4dc2) (&serious . G4dc1) (&warning . G4dc0) (&message . G4dbf) (&condition . G4dbe) (define-condition-type . G4dbd)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5098 '(rnrs records inspection) '(6) '() '() '() '((record? . G4fd2) (record-type-uid . G4fd1) (record-type-sealed? . G4fd0) (record-type-parent . G4fcf) (record-type-opaque? . G4fce) (record-type-name . G4fcd) (record-type-generative? . G4fcc) (record-type-field-names . G4fcb) (record-rtd . G4fca) (record-field-mutable? . G4fc9)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G5099 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G4fd9) (record-predicate . G4fd8) (record-mutator . G4fd7) (record-constructor . G4fd6) (record-accessor . G4fd5) (make-record-type-descriptor . G4fd4) (make-record-constructor-descriptor . G4fd3)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G509a '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4dbb) (parent-rtd . G4dba) (nongenerative . G4db9) (opaque . G4db8) (sealed . G4db7) (protocol . G4db6) (parent . G4db5) (immutable . G4db4) (mutable . G4db3) (fields . G4db2) (record-constructor-descriptor . G4d8f) (record-type-descriptor . G4d8e)) '() values values '#f '#f '#t '#f) (G2bf4@G2a89@install-library 'G509b '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G507b) (&no-nans-rtd . G507a) (&no-infinities-rcd . G5079) (&no-infinities-rtd . G5078) (&i/o-encoding-rcd . G5077) (&i/o-encoding-rtd . G5076) (&i/o-decoding-rcd . G5075) (&i/o-decoding-rtd . G5074) (&i/o-port-rcd . G5073) (&i/o-port-rtd . G5072) (&i/o-file-does-not-exist-rcd . G5071) (&i/o-file-does-not-exist-rtd . G5070) (&i/o-file-already-exists-rcd . G506f) (&i/o-file-already-exists-rtd . G506e) (&i/o-file-is-read-only-rcd . G506d) (&i/o-file-is-read-only-rtd . G506c) (&i/o-file-protection-rcd . G506b) (&i/o-file-protection-rtd . G506a) (&i/o-filename-rcd . G5069) (&i/o-filename-rtd . G5068) (&i/o-invalid-position-rcd . G5067) (&i/o-invalid-position-rtd . G5066) (&i/o-write-rcd . G5065) (&i/o-write-rtd . G5064) (&i/o-read-rcd . G5063) (&i/o-read-rtd . G5062) (&i/o-rcd . G5061) (&i/o-rtd . G5060) (&undefined-rcd . G505f) (&undefined-rtd . G505e) (&syntax-rcd . G505d) (&syntax-rtd . G505c) (&lexical-rcd . G505b) (&lexical-rtd . G505a) (&implementation-restriction-rcd . G5059) (&implementation-restriction-rtd . G5058) (&non-continuable-rcd . G5057) (&non-continuable-rtd . G5056) (&who-rcd . G5055) (&who-rtd . G5054) (&irritants-rcd . G5053) (&irritants-rtd . G5052) (&assertion-rcd . G5051) (&assertion-rtd . G5050) (&violation-rcd . G504f) (&violation-rtd . G504e) (&error-rcd . G504d) (&error-rtd . G504c) (&serious-rcd . G504b) (&serious-rtd . G504a) (&warning-rcd . G5049) (&warning-rtd . G5048) (&message-rcd . G5047) (&message-rtd . G5046) (&condition-rcd . G5045) (&condition-rtd . G5044) (syntax-error . G30a8) (syntax-dispatch . G2fc1) (pretty-print . G5043) (eval-core . G5042) (set-symbol-value! . G5041) (symbol-value . G5040) (gensym . G503f) (void . G503e) (load . G4cdf) (interaction-environment . G30ba) (char-ready? . G503d) (regexp? . G503c) (read-line . G503b) (dotted-list? . G503a) (circular-list? . G5039) (proper-list? . G5038) (circular-list . G5037) (last . G5036) (last-pair . G5035) (not-pair? . G5034) (split-at! . G5033) (split-at . G5032) (list= . G5031) (list-copy . G5030) (list-tabulate . G502f) (make-list . G502e) (xcons . G502d) (tenth . G502c) (ninth . G502b) (eighth . G502a) (seventh . G5029) (sixth . G5028) (fifth . G5027) (drop-right! . G5026) (drop-right . G5025) (take-right . G5024) (take! . G5023) (drop . G5022) (take . G5021) (car+cdr . G5020) (third . G501f) (second . G501e) (first . G501d) (iota . G501c) (every . G501b) (assoc-ref . G501a) (alist-cons . G5019) (append-map . G5018) (print . G5017) (format . G5016) (standard-library-path . G5015) (file-newer? . G5014) (stat-mtime . G5013) (current-directory . G5012) (write-to-file . G5011) (file->list . G5010) (file->string . G500f) (digit->integer . G500e) (call-with-string-input-port . G500d) (call-with-string-io . G500c) (string-split . G500b) (bytevector-for-each . G500a) (string->regexp . G5009) (rxmatch . G5008) (regexp-replace-all . G5007) (hashtable-for-each . G5006) (readdir . G5005) (get-environment-variables . G5004) (get-environment-variable . G5003) (get-timeofday . G5002) (get-command-line . G5001) (sys-display . G5000) (source-info . G4fff) (make-compiler-instruction . G4ffe) (make-instruction . G4ffd) (set-source-info! . G4ffc) (bignum? . G4ffb) (make-complex . G4ffa) (fasl-read . G4ff9) (fasl-write . G4ff8) (receive . G4ff7) (make-parameter . G289f) (string-upcase . G4ff6) (string-titlecase . G4ff5) (string-normalize-nfkd . G4ff4) (string-normalize-nfkc . G4ff3) (string-normalize-nfd . G4ff2) (string-normalize-nfc . G4ff1) (string-foldcase . G4ff0) (string-downcase . G4fef) (string-ci>? . G4fee) (string-ci>=? . G4fed) (string-ci=? . G4fec) (string-ci<? . G4feb) (string-ci<=? . G4fea) (char-whitespace? . G4fe9) (char-upper-case? . G4fe8) (char-title-case? . G4fe7) (char-numeric? . G4fe6) (char-lower-case? . G4fe5) (char-general-category . G4fe4) (char-upcase . G4fe3) (char-titlecase . G4fe2) (char-foldcase . G4fe1) (char-downcase . G4fe0) (char-ci>? . G4fdf) (char-ci>=? . G4fde) (char-ci=? . G4fdd) (char-ci<? . G4fdc) (char-ci<=? . G4fdb) (char-alphabetic? . G4fda) (make-variable-transformer . G2dfe) (identifier? . G30b0) (generate-temporaries . G309a) (free-identifier=? . G309c) (syntax->datum . G30b4) (datum->syntax . G30b2) (bound-identifier=? . G309e) (record-type-descriptor? . G4fd9) (record-predicate . G4fd8) (record-mutator . G4fd7) (record-constructor . G4fd6) (record-accessor . G4fd5) (make-record-type-descriptor . G4fd4) (make-record-constructor-descriptor . G4fd3) (record? . G4fd2) (record-type-uid . G4fd1) (record-type-sealed? . G4fd0) (record-type-parent . G4fcf) (record-type-opaque? . G4fce) (record-type-name . G4fcd) (record-type-generative? . G4fcc) (record-type-field-names . G4fcb) (record-rtd . G4fca) (record-field-mutable? . G4fc9) (delete-file . G4fc8) (file-exists? . G4fc7) (vector-sort! . G4fc6) (vector-sort . G4fc5) (list-sort . G4fc4) (symbol-hash . G4fc3) (string-ci-hash . G4fc2) (string-hash . G4fc1) (equal-hash . G4fc0) (hashtable-equivalence-function . G4fbf) (make-hashtable . G4fbe) (hashtable-hash-function . G4fbd) (make-eqv-hashtable . G4fbc) (make-eq-hashtable . G4fbb) (hashtable? . G4fba) (hashtable-update! . G4fb9) (hashtable-size . G4fb8) (hashtable-set! . G4fb7) (hashtable-ref . G4fb6) (hashtable-mutable? . G4fb5) (hashtable-keys . G4fb4) (hashtable-entries . G4fb3) (hashtable-delete! . G4fb2) (hashtable-copy . G4fb1) (hashtable-contains? . G4fb0) (hashtable-clear! . G4faf) (call-with-output-file . G4fae) (call-with-input-file . G4fad) (write-char . G4fac) (write . G4fab) (with-output-to-file . G4faa) (with-input-from-file . G4fa9) (read-char . G4fa8) (read . G4fa7) (peek-char . G4fa6) (open-output-file . G4fa5) (open-input-file . G4fa4) (newline . G4fa3) (display . G4fa2) (close-output-port . G4fa1) (close-input-port . G4fa0) (eof-object? . G4f9f) (eof-object . G4f9e) (current-error-port . G4f9d) (current-output-port . G4f9c) (current-input-port . G4f9b) (output-port? . G4f9a) (input-port? . G4f99) (utf-8-codec . G4f98) (utf-16-codec . G4f97) (transcoder-error-handling-mode . G4f96) (transcoder-eol-style . G4f95) (transcoder-codec . G4f94) (transcoded-port . G4f93) (textual-port? . G4f92) (string->bytevector . G4f91) (standard-output-port . G4f90) (standard-input-port . G4f8f) (standard-error-port . G4f8e) (set-port-position! . G4f8d) (put-u8 . G4f8c) (put-string . G4f8b) (put-datum . G4f8a) (put-char . G4f89) (put-bytevector . G4f88) (port? . G4f87) (port-transcoder . G4f86) (port-position . G4f85) (port-has-set-port-position!? . G4f84) (port-has-port-position? . G4f83) (port-eof? . G4f82) (output-port-buffer-mode . G4f81) (open-string-output-port . G4f80) (open-string-input-port . G4f7f) (open-file-output-port . G4f7e) (open-file-input/output-port . G4f7d) (open-file-input-port . G4f7c) (open-bytevector-output-port . G4f7b) (open-bytevector-input-port . G4f7a) (native-transcoder . G4f79) (native-eol-style . G4f78) (make-transcoder . G4f77) (latin-1-codec . G4f76) (make-i/o-write-error . G4bc8) (make-i/o-read-error . G4bb6) (make-i/o-port-error . G4c51) (make-i/o-invalid-position-error . G4bdb) (make-i/o-filename-error . G4bf2) (make-i/o-file-protection-error . G4c08) (make-i/o-file-is-read-only-error . G4c1a) (make-i/o-file-does-not-exist-error . G4c3e) (make-i/o-file-already-exists-error . G4c2c) (make-i/o-error . G4ba4) (make-i/o-encoding-error . G4c7a) (make-i/o-decoding-error . G4c67) (make-custom-textual-output-port . G4f75) (make-custom-textual-input/output-port . G4f74) (make-custom-textual-input-port . G4f73) (make-custom-binary-output-port . G4f72) (make-custom-binary-input/output-port . G4f71) (make-custom-binary-input-port . G4f70) (make-bytevector . G4f6f) (lookahead-u8 . G4f6e) (lookahead-char . G4f6d) (i/o-write-error? . G4bca) (i/o-read-error? . G4bb8) (i/o-port-error? . G4c55) (i/o-invalid-position-error? . G4bdf) (i/o-filename-error? . G4bf6) (i/o-file-protection-error? . G4c0a) (i/o-file-is-read-only-error? . G4c1c) (i/o-file-does-not-exist-error? . G4c40) (i/o-file-already-exists-error? . G4c2e) (i/o-error? . G4ba6) (i/o-error-port . G4c57) (i/o-error-filename . G4bf8) (i/o-encoding-error? . G4c7e) (i/o-encoding-error-char . G4c80) (i/o-decoding-error? . G4c69) (get-u8 . G4f6c) (get-string-n! . G4f6b) (get-string-n . G4f6a) (get-string-all . G4f69) (get-line . G4f68) (get-datum . G4f67) (get-char . G4f66) (get-bytevector-some . G4f65) (get-bytevector-n! . G4f64) (get-bytevector-n . G4f63) (get-bytevector-all . G4f62) (flush-output-port . G4f61) (close-port . G4f60) (scheme-report-environment . G3088) (quotient . G4f5f) (null-environment . G3086) (remainder . G4f5e) (modulo . G4f5d) (inexact->exact . G4f5c) (force . G4f5b) (exact->inexact . G4f5a) (make-promise . G4f59) (exit . G4f58) (command-line . G4cd9) (string-fill! . G4f57) (string-set! . G4f56) (set-cdr! . G4f55) (set-car! . G4f54) (remove . G4f53) (remv . G4f52) (remp . G4f51) (remq . G4f50) (partition . G4f4f) (memv . G4f4e) (memq . G4f4d) (memp . G4f4c) (member . G4f4b) (exists . G4f4a) (for-all . G4f49) (fold-right . G4f48) (fold-left . G4f47) (find . G4f46) (filter . G4f45) (cons* . G4f44) (assv . G4f43) (assq . G4f42) (assp . G4f41) (assoc . G4f40) (call-with-string-output-port . G4f3f) (call-with-port . G4f3e) (call-with-bytevector-output-port . G4f3d) (bytevector->string . G4f3c) (buffer-mode? . G4f3b) (binary-port? . G4f3a) (with-exception-handler . G4f39) (raise-continuable . G4f38) (raise . G4f37) (eval . G308c) (environment . G3084) (make-enumeration . G4f36) (enum-set=? . G4f35) (enum-set-universe . G4f34) (enum-set-union . G4f33) (enum-set-subset? . G4f32) (enum-set-projection . G4f31) (enum-set-member? . G4f30) (enum-set-intersection . G4f2f) (enum-set-indexer . G4f2e) (enum-set-difference . G4f2d) (enum-set-constructor . G4f2c) (enum-set-complement . G4f2b) (enum-set->list . G4f2a) (who-condition? . G4a9e) (warning? . G4a2a) (violation? . G4a60) (undefined-violation? . G4b04) (syntax-violation? . G4aee) (syntax-violation-subform . G4af2) (syntax-violation-form . G4af0) (syntax-violation . G30ae) (simple-conditions . G4f29) (serious-condition? . G4a3c) (non-continuable-violation? . G4ab2) (message-condition? . G4a16) (make-who-condition . G4a9a) (make-warning . G4a28) (make-violation . G4a5e) (make-undefined-violation . G4b02) (make-syntax-violation . G4ae8) (make-serious-condition . G4a3a) (make-non-continuable-violation . G4ab0) (make-message-condition . G4a12) (make-lexical-violation . G4ad4) (make-irritants-condition . G4a83) (make-implementation-restriction-violation . G4ac2) (make-error . G4a4c) (make-assertion-violation . G4a70) (lexical-violation? . G4ad6) (irritants-condition? . G4a87) (implementation-restriction-violation? . G4ac4) (error? . G4a4e) (condition-who . G4aa0) (condition-predicate . G4f28) (condition-message . G4a18) (condition-irritants . G4a89) (condition-accessor . G4f27) (condition . G4f26) (assertion-violation? . G4a72) (condition? . G4f25) (utf32->string . G4f24) (utf16->string . G4f23) (utf8->string . G4f22) (uint-list->bytevector . G4f21) (u8-list->bytevector . G4f20) (string->utf8 . G4f1f) (string->utf32 . G4f1e) (string->utf16 . G4f1d) (sint-list->bytevector . G4f1c) (native-endianness . G4f1b) (bytevector? . G4f1a) (bytevector=? . G4f19) (bytevector-uint-set! . G4f18) (bytevector-uint-ref . G4f17) (bytevector-u8-set! . G4f16) (bytevector-u8-ref . G4f15) (bytevector-u64-set! . G4f14) (bytevector-u64-ref . G4f13) (bytevector-u64-native-set! . G4f12) (bytevector-u64-native-ref . G4f11) (bytevector-u32-set! . G4f10) (bytevector-u32-ref . G4f0f) (bytevector-u32-native-set! . G4f0e) (bytevector-u32-native-ref . G4f0d) (bytevector-u16-set! . G4f0c) (bytevector-u16-ref . G4f0b) (bytevector-u16-native-set! . G4f0a) (bytevector-u16-native-ref . G4f09) (bytevector-sint-set! . G4f08) (bytevector-sint-ref . G4f07) (bytevector-s8-set! . G4f06) (bytevector-s8-ref . G4f05) (bytevector-s64-set! . G4f04) (bytevector-s64-ref . G4f03) (bytevector-s64-native-set! . G4f02) (bytevector-s64-native-ref . G4f01) (bytevector-s32-set! . G4f00) (bytevector-s32-ref . G4eff) (bytevector-s32-native-set! . G4efe) (bytevector-s32-native-ref . G4efd) (bytevector-s16-set! . G4efc) (bytevector-s16-ref . G4efb) (bytevector-s16-native-set! . G4efa) (bytevector-s16-native-ref . G4ef9) (bytevector-length . G4ef8) (bytevector-ieee-single-ref . G4ef7) (bytevector-ieee-single-set! . G4ef6) (bytevector-ieee-single-native-set! . G4ef5) (bytevector-ieee-single-native-ref . G4ef4) (bytevector-ieee-double-set! . G4ef3) (bytevector-ieee-double-ref . G4ef2) (bytevector-ieee-double-native-set! . G4ef1) (bytevector-ieee-double-native-ref . G4ef0) (bytevector-fill! . G4eef) (bytevector-copy! . G4eee) (bytevector-copy . G4eed) (bytevector->uint-list . G4eec) (bytevector->u8-list . G4eeb) (bytevector->sint-list . G4eea) (no-nans-violation? . G4b28) (no-infinities-violation? . G4b16) (make-no-nans-violation . G4b26) (make-no-infinities-violation . G4b14) (real->flonum . G4ee9) (flzero? . G4ee8) (fltruncate . G4ee7) (fltan . G4ee6) (flsqrt . G4ee5) (flsin . G4ee4) (flround . G4ee3) (flpositive? . G4ee2) (flonum? . G4ee1) (flodd? . G4ee0) (flnumerator . G4edf) (flnegative? . G4ede) (flnan? . G4edd) (flmod0 . G4edc) (flmod . G4edb) (flmin . G4eda) (flmax . G4ed9) (fllog . G4ed8) (flinteger? . G4ed7) (flinfinite? . G4ed6) (flfloor . G4ed5) (flfinite? . G4ed4) (flexpt . G4ed3) (flexp . G4ed2) (fleven? . G4ed1) (fldiv0-and-mod0 . G4ed0) (fldiv0 . G4ecf) (fldiv-and-mod . G4ece) (fldiv . G4ecd) (fldenominator . G4ecc) (flcos . G4ecb) (flceiling . G4eca) (flatan . G4ec9) (flasin . G4ec8) (flacos . G4ec7) (flabs . G4ec6) (fl>? . G4ec5) (fl>=? . G4ec4) (fl=? . G4ec3) (fl<? . G4ec2) (fl<=? . G4ec1) (fl/ . G4ec0) (fl- . G4ebf) (fl+ . G4ebe) (fl* . G4ebd) (fixnum->flonum . G4ebc) (fxzero? . G4ebb) (fxxor . G4eba) (fxrotate-bit-field . G4eb9) (fxreverse-bit-field . G4eb8) (fxpositive? . G4eb7) (fxodd? . G4eb6) (fxnot . G4eb5) (fxnegative? . G4eb4) (fxmod0 . G4eb3) (fxmod . G4eb2) (fxmin . G4eb1) (fxmax . G4eb0) (fxlength . G4eaf) (fxior . G4eae) (fxif . G4ead) (fxfirst-bit-set . G4eac) (fxeven? . G4eab) (fxdiv0-and-mod0 . G4eaa) (fxdiv0 . G4ea9) (fxdiv-and-mod . G4ea8) (fxdiv . G4ea7) (fxcopy-bit-field . G4ea6) (fxcopy-bit . G4ea5) (fxbit-set? . G4ea4) (fxbit-field . G4ea3) (fxbit-count . G4ea2) (fxarithmetic-shift-right . G4ea1) (fxarithmetic-shift-left . G4ea0) (fxarithmetic-shift . G4e9f) (fxand . G4e9e) (fx>? . G4e9d) (fx>=? . G4e9c) (fx=? . G4e9b) (fx<? . G4e9a) (fx<=? . G4e99) (fx-/carry . G4e98) (fx- . G4e97) (fx+/carry . G4e96) (fx+ . G4e95) (fx*/carry . G4e94) (fx* . G4e93) (greatest-fixnum . G4e92) (least-fixnum . G4e91) (fixnum-width . G4e90) (fixnum? . G4e8f) (bitwise-rotate-bit-field . G4e8e) (bitwise-reverse-bit-field . G4e8d) (bitwise-length . G4e8c) (bitwise-if . G4e8b) (bitwise-first-bit-set . G4e8a) (bitwise-copy-bit-field . G4e89) (bitwise-copy-bit . G4e88) (bitwise-bit-set? . G4e87) (bitwise-bit-field . G4e86) (bitwise-bit-count . G4e85) (bitwise-xor . G4e84) (bitwise-ior . G4e83) (bitwise-and . G4e82) (bitwise-not . G4e81) (bitwise-arithmetic-shift-right . G4e80) (bitwise-arithmetic-shift-left . G4e7f) (bitwise-arithmetic-shift . G4e7e) (zero? . G4e7d) (vector? . G4e7c) (vector-set! . G4e7b) (vector-ref . G4e7a) (vector-map . G4e79) (vector-length . G4e78) (vector-for-each . G4e77) (vector-fill! . G4e76) (vector->list . G4e75) (vector . G4e74) (values . G4e73) (truncate . G4e72) (tan . G4e71) (symbol? . G4e70) (symbol=? . G4e6f) (symbol->string . G4e6e) (substring . G4e6d) (string? . G4e6c) (string>? . G4e6b) (string>=? . G4e6a) (string=? . G4e69) (string<? . G4e68) (string<=? . G4e67) (string-ref . G4e66) (string-length . G4e65) (string-for-each . G4e64) (string-copy . G4e63) (string-append . G4e62) (string->symbol . G4e61) (string->number . G4e60) (string->list . G4e5f) (string . G4e5e) (sqrt . G4e5d) (sin . G4e5c) (round . G4e5b) (reverse . G4e5a) (real? . G4e59) (real-valued? . G4e58) (real-part . G4e57) (rationalize . G4e56) (rational? . G4e55) (rational-valued? . G4e54) (procedure? . G4e53) (positive? . G4e52) (pair? . G4e51) (odd? . G4e50) (numerator . G4e4f) (number? . G4e4e) (number->string . G4e4d) (null? . G4e4c) (not . G4e4b) (negative? . G4e4a) (nan? . G4e49) (min . G4e48) (max . G4e47) (map . G4e46) (make-vector . G4e45) (make-string . G4e44) (make-rectangular . G4e43) (make-polar . G4e42) (magnitude . G4e41) (log . G4e40) (list? . G4e3f) (list-tail . G4e3e) (list-ref . G4e3d) (list->vector . G4e3c) (list->string . G4e3b) (list . G4e3a) (length . G4e39) (lcm . G4e38) (integer? . G4e37) (integer-valued? . G4e36) (integer->char . G4e35) (infinite? . G4e34) (inexact? . G4e33) (inexact . G4e32) (imag-part . G4e31) (gcd . G4e30) (for-each . G4e2f) (floor . G4e2e) (finite? . G4e2d) (expt . G4e2c) (exp . G4e2b) (exact? . G4e2a) (exact-integer-sqrt . G4e29) (exact . G4e28) (even? . G4e27) (error . G4e26) (eqv? . G4e25) (equal? . G4e24) (eq? . G4e23) (dynamic-wind . G4e22) (div0-and-mod0 . G4e21) (mod0 . G4e20) (div0 . G4e1f) (div-and-mod . G4e1e) (mod . G4e1d) (div . G4e1c) (denominator . G4e1b) (cos . G4e1a) (cons . G4e19) (complex? . G4e18) (char? . G4e17) (char>? . G4e16) (char>=? . G4e15) (char=? . G4e14) (char<? . G4e13) (char<=? . G4e12) (char->integer . G4e11) (ceiling . G4e10) (call-with-values . G4e0f) (call/cc . G4e0e) (call-with-current-continuation . G4e0d) (cddddr . G4e0c) (cdddar . G4e0b) (cddadr . G4e0a) (cddaar . G4e09) (cdaddr . G4e08) (cdadar . G4e07) (cdaadr . G4e06) (cdaaar . G4e05) (cadddr . G4e04) (caddar . G4e03) (cadadr . G4e02) (cadaar . G4e01) (caaddr . G4e00) (caadar . G4dff) (caaadr . G4dfe) (caaaar . G4dfd) (cdddr . G4dfc) (cddar . G4dfb) (cdadr . G4dfa) (cdaar . G4df9) (caddr . G4df8) (cadar . G4df7) (caadr . G4df6) (caaar . G4df5) (cddr . G4df4) (cdar . G4df3) (cadr . G4df2) (caar . G4df1) (cdr . G4df0) (car . G4def) (boolean? . G4dee) (boolean=? . G4ded) (atan . G4dec) (assertion-violation . G4deb) (asin . G4dea) (apply . G4de9) (append . G4de8) (angle . G4de7) (acos . G4de6) (abs . G4de5) (/ . G4de4) (* . G4de3) (- . G4de2) (+ . G4de1) (>= . G4de0) (> . G4ddf) (= . G4dde) (<= . G4ddd) (< . G4ddc) (library . G4ddb) (export . G4dda) (&no-nans . G4dd9) (&no-infinities . G4dd8) (&i/o-encoding . G4dd7) (&i/o-decoding . G4dd6) (&i/o-port . G4dd5) (&i/o-file-does-not-exist . G4dd4) (&i/o-file-already-exists . G4dd3) (&i/o-file-is-read-only . G4dd2) (&i/o-file-protection . G4dd1) (&i/o-filename . G4dd0) (&i/o-invalid-position . G4dcf) (&i/o-write . G4dce) (&i/o-read . G4dcd) (&i/o . G4dcc) (&undefined . G4dcb) (&syntax . G4dca) (&lexical . G4dc9) (&implementation-restriction . G4dc8) (&non-continuable . G4dc7) (&who . G4dc6) (&irritants . G4dc5) (&assertion . G4dc4) (&violation . G4dc3) (&error . G4dc2) (&serious . G4dc1) (&warning . G4dc0) (&message . G4dbf) (&condition . G4dbe) (define-condition-type . G4dbd) (define-enumeration . G4dbc) (define-record-type . G4dbb) (parent-rtd . G4dba) (nongenerative . G4db9) (opaque . G4db8) (sealed . G4db7) (protocol . G4db6) (parent . G4db5) (immutable . G4db4) (mutable . G4db3) (fields . G4db2) (error-handling-mode . G4db1) (file-options . G4db0) (buffer-mode . G4daf) (eol-style . G4dae) (guard . G4dad) (trace-define . G4dac) (trace-lambda . G4dab) (unsyntax-splicing . G4daa) (unsyntax . G4da9) (unquote-splicing . G4da8) (unquote . G4da7) (_ . G4da6) (else . G4da5) (=> . G4da4) (... . G4da3) (assert . G4da2) (endianness . G4da1) (delay . G4da0) (time . G4d9f) (or . G4d9e) (and . G4d9d) (do . G4d9c) (cond . G4d9b) (let* . G4d9a) (let . G4d99) (let*-values . G4d98) (let-values . G4d97) (identifier-syntax . G4d96) (with-syntax . G4d95) (quasisyntax . G4d94) (quasiquote . G4d93) (syntax-rules . G4d92) (include . G4d91) (define-struct . G4d90) (record-constructor-descriptor . G4d8f) (record-type-descriptor . G4d8e) (case . G4d8d) (parameterize . G4d8c) (unless . G4d8b) (when . G4d8a) (if . G4d89) (letrec* . G4d88) (letrec . G4d87) (type-descriptor . G4d86) (case-lambda . G4d85) (lambda . G4d84) (syntax . G4d83) (syntax-case . G4d82) (quote . G4d81) (foreign-call . G4d80) (letrec-syntax . G4d7f) (let-syntax . G4d7e) (set! . G4d7d) (import . G4d7c) (begin . G4d7b) (module . G4d7a) (define-syntax . G4d79) (define . G4d78)) '((G507b core-prim . &no-nans-rcd) (G507a core-prim . &no-nans-rtd) (G5079 core-prim . &no-infinities-rcd) (G5078 core-prim . &no-infinities-rtd) (G5077 core-prim . &i/o-encoding-rcd) (G5076 core-prim . &i/o-encoding-rtd) (G5075 core-prim . &i/o-decoding-rcd) (G5074 core-prim . &i/o-decoding-rtd) (G5073 core-prim . &i/o-port-rcd) (G5072 core-prim . &i/o-port-rtd) (G5071 core-prim . &i/o-file-does-not-exist-rcd) (G5070 core-prim . &i/o-file-does-not-exist-rtd) (G506f core-prim . &i/o-file-already-exists-rcd) (G506e core-prim . &i/o-file-already-exists-rtd) (G506d core-prim . &i/o-file-is-read-only-rcd) (G506c core-prim . &i/o-file-is-read-only-rtd) (G506b core-prim . &i/o-file-protection-rcd) (G506a core-prim . &i/o-file-protection-rtd) (G5069 core-prim . &i/o-filename-rcd) (G5068 core-prim . &i/o-filename-rtd) (G5067 core-prim . &i/o-invalid-position-rcd) (G5066 core-prim . &i/o-invalid-position-rtd) (G5065 core-prim . &i/o-write-rcd) (G5064 core-prim . &i/o-write-rtd) (G5063 core-prim . &i/o-read-rcd) (G5062 core-prim . &i/o-read-rtd) (G5061 core-prim . &i/o-rcd) (G5060 core-prim . &i/o-rtd) (G505f core-prim . &undefined-rcd) (G505e core-prim . &undefined-rtd) (G505d core-prim . &syntax-rcd) (G505c core-prim . &syntax-rtd) (G505b core-prim . &lexical-rcd) (G505a core-prim . &lexical-rtd) (G5059 core-prim . &implementation-restriction-rcd) (G5058 core-prim . &implementation-restriction-rtd) (G5057 core-prim . &non-continuable-rcd) (G5056 core-prim . &non-continuable-rtd) (G5055 core-prim . &who-rcd) (G5054 core-prim . &who-rtd) (G5053 core-prim . &irritants-rcd) (G5052 core-prim . &irritants-rtd) (G5051 core-prim . &assertion-rcd) (G5050 core-prim . &assertion-rtd) (G504f core-prim . &violation-rcd) (G504e core-prim . &violation-rtd) (G504d core-prim . &error-rcd) (G504c core-prim . &error-rtd) (G504b core-prim . &serious-rcd) (G504a core-prim . &serious-rtd) (G5049 core-prim . &warning-rcd) (G5048 core-prim . &warning-rtd) (G5047 core-prim . &message-rcd) (G5046 core-prim . &message-rtd) (G5045 core-prim . &condition-rcd) (G5044 core-prim . &condition-rtd) (G30a8 core-prim . syntax-error) (G2fc1 core-prim . syntax-dispatch) (G5043 core-prim . pretty-print) (G5042 core-prim . eval-core) (G5041 core-prim . set-symbol-value!) (G5040 core-prim . symbol-value) (G503f core-prim . gensym) (G503e core-prim . void) (G4cdf core-prim . load) (G30ba core-prim . interaction-environment) (G503d core-prim . char-ready?) (G503c core-prim . regexp?) (G503b core-prim . read-line) (G503a core-prim . dotted-list?) (G5039 core-prim . circular-list?) (G5038 core-prim . proper-list?) (G5037 core-prim . circular-list) (G5036 core-prim . last) (G5035 core-prim . last-pair) (G5034 core-prim . not-pair?) (G5033 core-prim . split-at!) (G5032 core-prim . split-at) (G5031 core-prim . list=) (G5030 core-prim . list-copy) (G502f core-prim . list-tabulate) (G502e core-prim . make-list) (G502d core-prim . xcons) (G502c core-prim . tenth) (G502b core-prim . ninth) (G502a core-prim . eighth) (G5029 core-prim . seventh) (G5028 core-prim . sixth) (G5027 core-prim . fifth) (G5026 core-prim . drop-right!) (G5025 core-prim . drop-right) (G5024 core-prim . take-right) (G5023 core-prim . take!) (G5022 core-prim . drop) (G5021 core-prim . take) (G5020 core-prim . car+cdr) (G501f core-prim . third) (G501e core-prim . second) (G501d core-prim . first) (G501c core-prim . iota) (G501b core-prim . every) (G501a core-prim . assoc-ref) (G5019 core-prim . alist-cons) (G5018 core-prim . append-map) (G5017 core-prim . print) (G5016 core-prim . format) (G5015 core-prim . standard-library-path) (G5014 core-prim . file-newer?) (G5013 core-prim . stat-mtime) (G5012 core-prim . current-directory) (G5011 core-prim . write-to-file) (G5010 core-prim . file->list) (G500f core-prim . file->string) (G500e core-prim . digit->integer) (G500d core-prim . call-with-string-input-port) (G500c core-prim . call-with-string-io) (G500b core-prim . string-split) (G500a core-prim . bytevector-for-each) (G5009 core-prim . string->regexp) (G5008 core-prim . rxmatch) (G5007 core-prim . regexp-replace-all) (G5006 core-prim . hashtable-for-each) (G5005 core-prim . readdir) (G5004 core-prim . get-environment-variables) (G5003 core-prim . get-environment-variable) (G5002 core-prim . get-timeofday) (G5001 core-prim . get-command-line) (G5000 core-prim . sys-display) (G4fff core-prim . source-info) (G4ffe core-prim . make-compiler-instruction) (G4ffd core-prim . make-instruction) (G4ffc core-prim . set-source-info!) (G4ffb core-prim . bignum?) (G4ffa core-prim . make-complex) (G4ff9 core-prim . fasl-read) (G4ff8 core-prim . fasl-write) (G4ff7 core-prim . receive) (G289f core-prim . make-parameter) (G4ff6 core-prim . string-upcase) (G4ff5 core-prim . string-titlecase) (G4ff4 core-prim . string-normalize-nfkd) (G4ff3 core-prim . string-normalize-nfkc) (G4ff2 core-prim . string-normalize-nfd) (G4ff1 core-prim . string-normalize-nfc) (G4ff0 core-prim . string-foldcase) (G4fef core-prim . string-downcase) (G4fee core-prim . string-ci>?) (G4fed core-prim . string-ci>=?) (G4fec core-prim . string-ci=?) (G4feb core-prim . string-ci<?) (G4fea core-prim . string-ci<=?) (G4fe9 core-prim . char-whitespace?) (G4fe8 core-prim . char-upper-case?) (G4fe7 core-prim . char-title-case?) (G4fe6 core-prim . char-numeric?) (G4fe5 core-prim . char-lower-case?) (G4fe4 core-prim . char-general-category) (G4fe3 core-prim . char-upcase) (G4fe2 core-prim . char-titlecase) (G4fe1 core-prim . char-foldcase) (G4fe0 core-prim . char-downcase) (G4fdf core-prim . char-ci>?) (G4fde core-prim . char-ci>=?) (G4fdd core-prim . char-ci=?) (G4fdc core-prim . char-ci<?) (G4fdb core-prim . char-ci<=?) (G4fda core-prim . char-alphabetic?) (G2dfe core-prim . make-variable-transformer) (G30b0 core-prim . identifier?) (G309a core-prim . generate-temporaries) (G309c core-prim . free-identifier=?) (G30b4 core-prim . syntax->datum) (G30b2 core-prim . datum->syntax) (G309e core-prim . bound-identifier=?) (G4fd9 core-prim . record-type-descriptor?) (G4fd8 core-prim . record-predicate) (G4fd7 core-prim . record-mutator) (G4fd6 core-prim . record-constructor) (G4fd5 core-prim . record-accessor) (G4fd4 core-prim . make-record-type-descriptor) (G4fd3 core-prim . make-record-constructor-descriptor) (G4fd2 core-prim . record?) (G4fd1 core-prim . record-type-uid) (G4fd0 core-prim . record-type-sealed?) (G4fcf core-prim . record-type-parent) (G4fce core-prim . record-type-opaque?) (G4fcd core-prim . record-type-name) (G4fcc core-prim . record-type-generative?) (G4fcb core-prim . record-type-field-names) (G4fca core-prim . record-rtd) (G4fc9 core-prim . record-field-mutable?) (G4fc8 core-prim . delete-file) (G4fc7 core-prim . file-exists?) (G4fc6 core-prim . vector-sort!) (G4fc5 core-prim . vector-sort) (G4fc4 core-prim . list-sort) (G4fc3 core-prim . symbol-hash) (G4fc2 core-prim . string-ci-hash) (G4fc1 core-prim . string-hash) (G4fc0 core-prim . equal-hash) (G4fbf core-prim . hashtable-equivalence-function) (G4fbe core-prim . make-hashtable) (G4fbd core-prim . hashtable-hash-function) (G4fbc core-prim . make-eqv-hashtable) (G4fbb core-prim . make-eq-hashtable) (G4fba core-prim . hashtable?) (G4fb9 core-prim . hashtable-update!) (G4fb8 core-prim . hashtable-size) (G4fb7 core-prim . hashtable-set!) (G4fb6 core-prim . hashtable-ref) (G4fb5 core-prim . hashtable-mutable?) (G4fb4 core-prim . hashtable-keys) (G4fb3 core-prim . hashtable-entries) (G4fb2 core-prim . hashtable-delete!) (G4fb1 core-prim . hashtable-copy) (G4fb0 core-prim . hashtable-contains?) (G4faf core-prim . hashtable-clear!) (G4fae core-prim . call-with-output-file) (G4fad core-prim . call-with-input-file) (G4fac core-prim . write-char) (G4fab core-prim . write) (G4faa core-prim . with-output-to-file) (G4fa9 core-prim . with-input-from-file) (G4fa8 core-prim . read-char) (G4fa7 core-prim . read) (G4fa6 core-prim . peek-char) (G4fa5 core-prim . open-output-file) (G4fa4 core-prim . open-input-file) (G4fa3 core-prim . newline) (G4fa2 core-prim . display) (G4fa1 core-prim . close-output-port) (G4fa0 core-prim . close-input-port) (G4f9f core-prim . eof-object?) (G4f9e core-prim . eof-object) (G4f9d core-prim . current-error-port) (G4f9c core-prim . current-output-port) (G4f9b core-prim . current-input-port) (G4f9a core-prim . output-port?) (G4f99 core-prim . input-port?) (G4f98 core-prim . utf-8-codec) (G4f97 core-prim . utf-16-codec) (G4f96 core-prim . transcoder-error-handling-mode) (G4f95 core-prim . transcoder-eol-style) (G4f94 core-prim . transcoder-codec) (G4f93 core-prim . transcoded-port) (G4f92 core-prim . textual-port?) (G4f91 core-prim . string->bytevector) (G4f90 core-prim . standard-output-port) (G4f8f core-prim . standard-input-port) (G4f8e core-prim . standard-error-port) (G4f8d core-prim . set-port-position!) (G4f8c core-prim . put-u8) (G4f8b core-prim . put-string) (G4f8a core-prim . put-datum) (G4f89 core-prim . put-char) (G4f88 core-prim . put-bytevector) (G4f87 core-prim . port?) (G4f86 core-prim . port-transcoder) (G4f85 core-prim . port-position) (G4f84 core-prim . port-has-set-port-position!?) (G4f83 core-prim . port-has-port-position?) (G4f82 core-prim . port-eof?) (G4f81 core-prim . output-port-buffer-mode) (G4f80 core-prim . open-string-output-port) (G4f7f core-prim . open-string-input-port) (G4f7e core-prim . open-file-output-port) (G4f7d core-prim . open-file-input/output-port) (G4f7c core-prim . open-file-input-port) (G4f7b core-prim . open-bytevector-output-port) (G4f7a core-prim . open-bytevector-input-port) (G4f79 core-prim . native-transcoder) (G4f78 core-prim . native-eol-style) (G4f77 core-prim . make-transcoder) (G4f76 core-prim . latin-1-codec) (G4bc8 core-prim . make-i/o-write-error) (G4bb6 core-prim . make-i/o-read-error) (G4c51 core-prim . make-i/o-port-error) (G4bdb core-prim . make-i/o-invalid-position-error) (G4bf2 core-prim . make-i/o-filename-error) (G4c08 core-prim . make-i/o-file-protection-error) (G4c1a core-prim . make-i/o-file-is-read-only-error) (G4c3e core-prim . make-i/o-file-does-not-exist-error) (G4c2c core-prim . make-i/o-file-already-exists-error) (G4ba4 core-prim . make-i/o-error) (G4c7a core-prim . make-i/o-encoding-error) (G4c67 core-prim . make-i/o-decoding-error) (G4f75 core-prim . make-custom-textual-output-port) (G4f74 core-prim . make-custom-textual-input/output-port) (G4f73 core-prim . make-custom-textual-input-port) (G4f72 core-prim . make-custom-binary-output-port) (G4f71 core-prim . make-custom-binary-input/output-port) (G4f70 core-prim . make-custom-binary-input-port) (G4f6f core-prim . make-bytevector) (G4f6e core-prim . lookahead-u8) (G4f6d core-prim . lookahead-char) (G4bca core-prim . i/o-write-error?) (G4bb8 core-prim . i/o-read-error?) (G4c55 core-prim . i/o-port-error?) (G4bdf core-prim . i/o-invalid-position-error?) (G4bf6 core-prim . i/o-filename-error?) (G4c0a core-prim . i/o-file-protection-error?) (G4c1c core-prim . i/o-file-is-read-only-error?) (G4c40 core-prim . i/o-file-does-not-exist-error?) (G4c2e core-prim . i/o-file-already-exists-error?) (G4ba6 core-prim . i/o-error?) (G4c57 core-prim . i/o-error-port) (G4bf8 core-prim . i/o-error-filename) (G4c7e core-prim . i/o-encoding-error?) (G4c80 core-prim . i/o-encoding-error-char) (G4c69 core-prim . i/o-decoding-error?) (G4f6c core-prim . get-u8) (G4f6b core-prim . get-string-n!) (G4f6a core-prim . get-string-n) (G4f69 core-prim . get-string-all) (G4f68 core-prim . get-line) (G4f67 core-prim . get-datum) (G4f66 core-prim . get-char) (G4f65 core-prim . get-bytevector-some) (G4f64 core-prim . get-bytevector-n!) (G4f63 core-prim . get-bytevector-n) (G4f62 core-prim . get-bytevector-all) (G4f61 core-prim . flush-output-port) (G4f60 core-prim . close-port) (G3088 core-prim . scheme-report-environment) (G4f5f core-prim . quotient) (G3086 core-prim . null-environment) (G4f5e core-prim . remainder) (G4f5d core-prim . modulo) (G4f5c core-prim . inexact->exact) (G4f5b core-prim . force) (G4f5a core-prim . exact->inexact) (G4f59 core-prim . make-promise) (G4f58 core-prim . exit) (G4cd9 core-prim . command-line) (G4f57 core-prim . string-fill!) (G4f56 core-prim . string-set!) (G4f55 core-prim . set-cdr!) (G4f54 core-prim . set-car!) (G4f53 core-prim . remove) (G4f52 core-prim . remv) (G4f51 core-prim . remp) (G4f50 core-prim . remq) (G4f4f core-prim . partition) (G4f4e core-prim . memv) (G4f4d core-prim . memq) (G4f4c core-prim . memp) (G4f4b core-prim . member) (G4f4a core-prim . exists) (G4f49 core-prim . for-all) (G4f48 core-prim . fold-right) (G4f47 core-prim . fold-left) (G4f46 core-prim . find) (G4f45 core-prim . filter) (G4f44 core-prim . cons*) (G4f43 core-prim . assv) (G4f42 core-prim . assq) (G4f41 core-prim . assp) (G4f40 core-prim . assoc) (G4f3f core-prim . call-with-string-output-port) (G4f3e core-prim . call-with-port) (G4f3d core-prim . call-with-bytevector-output-port) (G4f3c core-prim . bytevector->string) (G4f3b core-prim . buffer-mode?) (G4f3a core-prim . binary-port?) (G4f39 core-prim . with-exception-handler) (G4f38 core-prim . raise-continuable) (G4f37 core-prim . raise) (G308c core-prim . eval) (G3084 core-prim . environment) (G4f36 core-prim . make-enumeration) (G4f35 core-prim . enum-set=?) (G4f34 core-prim . enum-set-universe) (G4f33 core-prim . enum-set-union) (G4f32 core-prim . enum-set-subset?) (G4f31 core-prim . enum-set-projection) (G4f30 core-prim . enum-set-member?) (G4f2f core-prim . enum-set-intersection) (G4f2e core-prim . enum-set-indexer) (G4f2d core-prim . enum-set-difference) (G4f2c core-prim . enum-set-constructor) (G4f2b core-prim . enum-set-complement) (G4f2a core-prim . enum-set->list) (G4a9e core-prim . who-condition?) (G4a2a core-prim . warning?) (G4a60 core-prim . violation?) (G4b04 core-prim . undefined-violation?) (G4aee core-prim . syntax-violation?) (G4af2 core-prim . syntax-violation-subform) (G4af0 core-prim . syntax-violation-form) (G30ae core-prim . syntax-violation) (G4f29 core-prim . simple-conditions) (G4a3c core-prim . serious-condition?) (G4ab2 core-prim . non-continuable-violation?) (G4a16 core-prim . message-condition?) (G4a9a core-prim . make-who-condition) (G4a28 core-prim . make-warning) (G4a5e core-prim . make-violation) (G4b02 core-prim . make-undefined-violation) (G4ae8 core-prim . make-syntax-violation) (G4a3a core-prim . make-serious-condition) (G4ab0 core-prim . make-non-continuable-violation) (G4a12 core-prim . make-message-condition) (G4ad4 core-prim . make-lexical-violation) (G4a83 core-prim . make-irritants-condition) (G4ac2 core-prim . make-implementation-restriction-violation) (G4a4c core-prim . make-error) (G4a70 core-prim . make-assertion-violation) (G4ad6 core-prim . lexical-violation?) (G4a87 core-prim . irritants-condition?) (G4ac4 core-prim . implementation-restriction-violation?) (G4a4e core-prim . error?) (G4aa0 core-prim . condition-who) (G4f28 core-prim . condition-predicate) (G4a18 core-prim . condition-message) (G4a89 core-prim . condition-irritants) (G4f27 core-prim . condition-accessor) (G4f26 core-prim . condition) (G4a72 core-prim . assertion-violation?) (G4f25 core-prim . condition?) (G4f24 core-prim . utf32->string) (G4f23 core-prim . utf16->string) (G4f22 core-prim . utf8->string) (G4f21 core-prim . uint-list->bytevector) (G4f20 core-prim . u8-list->bytevector) (G4f1f core-prim . string->utf8) (G4f1e core-prim . string->utf32) (G4f1d core-prim . string->utf16) (G4f1c core-prim . sint-list->bytevector) (G4f1b core-prim . native-endianness) (G4f1a core-prim . bytevector?) (G4f19 core-prim . bytevector=?) (G4f18 core-prim . bytevector-uint-set!) (G4f17 core-prim . bytevector-uint-ref) (G4f16 core-prim . bytevector-u8-set!) (G4f15 core-prim . bytevector-u8-ref) (G4f14 core-prim . bytevector-u64-set!) (G4f13 core-prim . bytevector-u64-ref) (G4f12 core-prim . bytevector-u64-native-set!) (G4f11 core-prim . bytevector-u64-native-ref) (G4f10 core-prim . bytevector-u32-set!) (G4f0f core-prim . bytevector-u32-ref) (G4f0e core-prim . bytevector-u32-native-set!) (G4f0d core-prim . bytevector-u32-native-ref) (G4f0c core-prim . bytevector-u16-set!) (G4f0b core-prim . bytevector-u16-ref) (G4f0a core-prim . bytevector-u16-native-set!) (G4f09 core-prim . bytevector-u16-native-ref) (G4f08 core-prim . bytevector-sint-set!) (G4f07 core-prim . bytevector-sint-ref) (G4f06 core-prim . bytevector-s8-set!) (G4f05 core-prim . bytevector-s8-ref) (G4f04 core-prim . bytevector-s64-set!) (G4f03 core-prim . bytevector-s64-ref) (G4f02 core-prim . bytevector-s64-native-set!) (G4f01 core-prim . bytevector-s64-native-ref) (G4f00 core-prim . bytevector-s32-set!) (G4eff core-prim . bytevector-s32-ref) (G4efe core-prim . bytevector-s32-native-set!) (G4efd core-prim . bytevector-s32-native-ref) (G4efc core-prim . bytevector-s16-set!) (G4efb core-prim . bytevector-s16-ref) (G4efa core-prim . bytevector-s16-native-set!) (G4ef9 core-prim . bytevector-s16-native-ref) (G4ef8 core-prim . bytevector-length) (G4ef7 core-prim . bytevector-ieee-single-ref) (G4ef6 core-prim . bytevector-ieee-single-set!) (G4ef5 core-prim . bytevector-ieee-single-native-set!) (G4ef4 core-prim . bytevector-ieee-single-native-ref) (G4ef3 core-prim . bytevector-ieee-double-set!) (G4ef2 core-prim . bytevector-ieee-double-ref) (G4ef1 core-prim . bytevector-ieee-double-native-set!) (G4ef0 core-prim . bytevector-ieee-double-native-ref) (G4eef core-prim . bytevector-fill!) (G4eee core-prim . bytevector-copy!) (G4eed core-prim . bytevector-copy) (G4eec core-prim . bytevector->uint-list) (G4eeb core-prim . bytevector->u8-list) (G4eea core-prim . bytevector->sint-list) (G4b28 core-prim . no-nans-violation?) (G4b16 core-prim . no-infinities-violation?) (G4b26 core-prim . make-no-nans-violation) (G4b14 core-prim . make-no-infinities-violation) (G4ee9 core-prim . real->flonum) (G4ee8 core-prim . flzero?) (G4ee7 core-prim . fltruncate) (G4ee6 core-prim . fltan) (G4ee5 core-prim . flsqrt) (G4ee4 core-prim . flsin) (G4ee3 core-prim . flround) (G4ee2 core-prim . flpositive?) (G4ee1 core-prim . flonum?) (G4ee0 core-prim . flodd?) (G4edf core-prim . flnumerator) (G4ede core-prim . flnegative?) (G4edd core-prim . flnan?) (G4edc core-prim . flmod0) (G4edb core-prim . flmod) (G4eda core-prim . flmin) (G4ed9 core-prim . flmax) (G4ed8 core-prim . fllog) (G4ed7 core-prim . flinteger?) (G4ed6 core-prim . flinfinite?) (G4ed5 core-prim . flfloor) (G4ed4 core-prim . flfinite?) (G4ed3 core-prim . flexpt) (G4ed2 core-prim . flexp) (G4ed1 core-prim . fleven?) (G4ed0 core-prim . fldiv0-and-mod0) (G4ecf core-prim . fldiv0) (G4ece core-prim . fldiv-and-mod) (G4ecd core-prim . fldiv) (G4ecc core-prim . fldenominator) (G4ecb core-prim . flcos) (G4eca core-prim . flceiling) (G4ec9 core-prim . flatan) (G4ec8 core-prim . flasin) (G4ec7 core-prim . flacos) (G4ec6 core-prim . flabs) (G4ec5 core-prim . fl>?) (G4ec4 core-prim . fl>=?) (G4ec3 core-prim . fl=?) (G4ec2 core-prim . fl<?) (G4ec1 core-prim . fl<=?) (G4ec0 core-prim . fl/) (G4ebf core-prim . fl-) (G4ebe core-prim . fl+) (G4ebd core-prim . fl*) (G4ebc core-prim . fixnum->flonum) (G4ebb core-prim . fxzero?) (G4eba core-prim . fxxor) (G4eb9 core-prim . fxrotate-bit-field) (G4eb8 core-prim . fxreverse-bit-field) (G4eb7 core-prim . fxpositive?) (G4eb6 core-prim . fxodd?) (G4eb5 core-prim . fxnot) (G4eb4 core-prim . fxnegative?) (G4eb3 core-prim . fxmod0) (G4eb2 core-prim . fxmod) (G4eb1 core-prim . fxmin) (G4eb0 core-prim . fxmax) (G4eaf core-prim . fxlength) (G4eae core-prim . fxior) (G4ead core-prim . fxif) (G4eac core-prim . fxfirst-bit-set) (G4eab core-prim . fxeven?) (G4eaa core-prim . fxdiv0-and-mod0) (G4ea9 core-prim . fxdiv0) (G4ea8 core-prim . fxdiv-and-mod) (G4ea7 core-prim . fxdiv) (G4ea6 core-prim . fxcopy-bit-field) (G4ea5 core-prim . fxcopy-bit) (G4ea4 core-prim . fxbit-set?) (G4ea3 core-prim . fxbit-field) (G4ea2 core-prim . fxbit-count) (G4ea1 core-prim . fxarithmetic-shift-right) (G4ea0 core-prim . fxarithmetic-shift-left) (G4e9f core-prim . fxarithmetic-shift) (G4e9e core-prim . fxand) (G4e9d core-prim . fx>?) (G4e9c core-prim . fx>=?) (G4e9b core-prim . fx=?) (G4e9a core-prim . fx<?) (G4e99 core-prim . fx<=?) (G4e98 core-prim . fx-/carry) (G4e97 core-prim . fx-) (G4e96 core-prim . fx+/carry) (G4e95 core-prim . fx+) (G4e94 core-prim . fx*/carry) (G4e93 core-prim . fx*) (G4e92 core-prim . greatest-fixnum) (G4e91 core-prim . least-fixnum) (G4e90 core-prim . fixnum-width) (G4e8f core-prim . fixnum?) (G4e8e core-prim . bitwise-rotate-bit-field) (G4e8d core-prim . bitwise-reverse-bit-field) (G4e8c core-prim . bitwise-length) (G4e8b core-prim . bitwise-if) (G4e8a core-prim . bitwise-first-bit-set) (G4e89 core-prim . bitwise-copy-bit-field) (G4e88 core-prim . bitwise-copy-bit) (G4e87 core-prim . bitwise-bit-set?) (G4e86 core-prim . bitwise-bit-field) (G4e85 core-prim . bitwise-bit-count) (G4e84 core-prim . bitwise-xor) (G4e83 core-prim . bitwise-ior) (G4e82 core-prim . bitwise-and) (G4e81 core-prim . bitwise-not) (G4e80 core-prim . bitwise-arithmetic-shift-right) (G4e7f core-prim . bitwise-arithmetic-shift-left) (G4e7e core-prim . bitwise-arithmetic-shift) (G4e7d core-prim . zero?) (G4e7c core-prim . vector?) (G4e7b core-prim . vector-set!) (G4e7a core-prim . vector-ref) (G4e79 core-prim . vector-map) (G4e78 core-prim . vector-length) (G4e77 core-prim . vector-for-each) (G4e76 core-prim . vector-fill!) (G4e75 core-prim . vector->list) (G4e74 core-prim . vector) (G4e73 core-prim . values) (G4e72 core-prim . truncate) (G4e71 core-prim . tan) (G4e70 core-prim . symbol?) (G4e6f core-prim . symbol=?) (G4e6e core-prim . symbol->string) (G4e6d core-prim . substring) (G4e6c core-prim . string?) (G4e6b core-prim . string>?) (G4e6a core-prim . string>=?) (G4e69 core-prim . string=?) (G4e68 core-prim . string<?) (G4e67 core-prim . string<=?) (G4e66 core-prim . string-ref) (G4e65 core-prim . string-length) (G4e64 core-prim . string-for-each) (G4e63 core-prim . string-copy) (G4e62 core-prim . string-append) (G4e61 core-prim . string->symbol) (G4e60 core-prim . string->number) (G4e5f core-prim . string->list) (G4e5e core-prim . string) (G4e5d core-prim . sqrt) (G4e5c core-prim . sin) (G4e5b core-prim . round) (G4e5a core-prim . reverse) (G4e59 core-prim . real?) (G4e58 core-prim . real-valued?) (G4e57 core-prim . real-part) (G4e56 core-prim . rationalize) (G4e55 core-prim . rational?) (G4e54 core-prim . rational-valued?) (G4e53 core-prim . procedure?) (G4e52 core-prim . positive?) (G4e51 core-prim . pair?) (G4e50 core-prim . odd?) (G4e4f core-prim . numerator) (G4e4e core-prim . number?) (G4e4d core-prim . number->string) (G4e4c core-prim . null?) (G4e4b core-prim . not) (G4e4a core-prim . negative?) (G4e49 core-prim . nan?) (G4e48 core-prim . min) (G4e47 core-prim . max) (G4e46 core-prim . map) (G4e45 core-prim . make-vector) (G4e44 core-prim . make-string) (G4e43 core-prim . make-rectangular) (G4e42 core-prim . make-polar) (G4e41 core-prim . magnitude) (G4e40 core-prim . log) (G4e3f core-prim . list?) (G4e3e core-prim . list-tail) (G4e3d core-prim . list-ref) (G4e3c core-prim . list->vector) (G4e3b core-prim . list->string) (G4e3a core-prim . list) (G4e39 core-prim . length) (G4e38 core-prim . lcm) (G4e37 core-prim . integer?) (G4e36 core-prim . integer-valued?) (G4e35 core-prim . integer->char) (G4e34 core-prim . infinite?) (G4e33 core-prim . inexact?) (G4e32 core-prim . inexact) (G4e31 core-prim . imag-part) (G4e30 core-prim . gcd) (G4e2f core-prim . for-each) (G4e2e core-prim . floor) (G4e2d core-prim . finite?) (G4e2c core-prim . expt) (G4e2b core-prim . exp) (G4e2a core-prim . exact?) (G4e29 core-prim . exact-integer-sqrt) (G4e28 core-prim . exact) (G4e27 core-prim . even?) (G4e26 core-prim . error) (G4e25 core-prim . eqv?) (G4e24 core-prim . equal?) (G4e23 core-prim . eq?) (G4e22 core-prim . dynamic-wind) (G4e21 core-prim . div0-and-mod0) (G4e20 core-prim . mod0) (G4e1f core-prim . div0) (G4e1e core-prim . div-and-mod) (G4e1d core-prim . mod) (G4e1c core-prim . div) (G4e1b core-prim . denominator) (G4e1a core-prim . cos) (G4e19 core-prim . cons) (G4e18 core-prim . complex?) (G4e17 core-prim . char?) (G4e16 core-prim . char>?) (G4e15 core-prim . char>=?) (G4e14 core-prim . char=?) (G4e13 core-prim . char<?) (G4e12 core-prim . char<=?) (G4e11 core-prim . char->integer) (G4e10 core-prim . ceiling) (G4e0f core-prim . call-with-values) (G4e0e core-prim . call/cc) (G4e0d core-prim . call-with-current-continuation) (G4e0c core-prim . cddddr) (G4e0b core-prim . cdddar) (G4e0a core-prim . cddadr) (G4e09 core-prim . cddaar) (G4e08 core-prim . cdaddr) (G4e07 core-prim . cdadar) (G4e06 core-prim . cdaadr) (G4e05 core-prim . cdaaar) (G4e04 core-prim . cadddr) (G4e03 core-prim . caddar) (G4e02 core-prim . cadadr) (G4e01 core-prim . cadaar) (G4e00 core-prim . caaddr) (G4dff core-prim . caadar) (G4dfe core-prim . caaadr) (G4dfd core-prim . caaaar) (G4dfc core-prim . cdddr) (G4dfb core-prim . cddar) (G4dfa core-prim . cdadr) (G4df9 core-prim . cdaar) (G4df8 core-prim . caddr) (G4df7 core-prim . cadar) (G4df6 core-prim . caadr) (G4df5 core-prim . caaar) (G4df4 core-prim . cddr) (G4df3 core-prim . cdar) (G4df2 core-prim . cadr) (G4df1 core-prim . caar) (G4df0 core-prim . cdr) (G4def core-prim . car) (G4dee core-prim . boolean?) (G4ded core-prim . boolean=?) (G4dec core-prim . atan) (G4deb core-prim . assertion-violation) (G4dea core-prim . asin) (G4de9 core-prim . apply) (G4de8 core-prim . append) (G4de7 core-prim . angle) (G4de6 core-prim . acos) (G4de5 core-prim . abs) (G4de4 core-prim . /) (G4de3 core-prim . *) (G4de2 core-prim . -) (G4de1 core-prim . +) (G4de0 core-prim . >=) (G4ddf core-prim . >) (G4dde core-prim . =) (G4ddd core-prim . <=) (G4ddc core-prim . <) (G4ddb core-prim . library) (G4dda core-prim . export) (G4dd9 $core-rtd &no-nans-rtd &no-nans-rcd) (G4dd8 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4dd7 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4dd6 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4dd5 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4dd4 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4dd3 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4dd2 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4dd1 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4dd0 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4dcf $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4dce $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4dcd $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4dcc $core-rtd &i/o-rtd &i/o-rcd) (G4dcb $core-rtd &undefined-rtd &undefined-rcd) (G4dca $core-rtd &syntax-rtd &syntax-rcd) (G4dc9 $core-rtd &lexical-rtd &lexical-rcd) (G4dc8 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4dc7 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4dc6 $core-rtd &who-rtd &who-rcd) (G4dc5 $core-rtd &irritants-rtd &irritants-rcd) (G4dc4 $core-rtd &assertion-rtd &assertion-rcd) (G4dc3 $core-rtd &violation-rtd &violation-rcd) (G4dc2 $core-rtd &error-rtd &error-rcd) (G4dc1 $core-rtd &serious-rtd &serious-rcd) (G4dc0 $core-rtd &warning-rtd &warning-rcd) (G4dbf $core-rtd &message-rtd &message-rcd) (G4dbe $core-rtd &condition-rtd &condition-rcd) (G4dbd macro . define-condition-type) (G4dbc macro . define-enumeration) (G4dbb macro . define-record-type) (G4dba macro . parent-rtd) (G4db9 macro . nongenerative) (G4db8 macro . opaque) (G4db7 macro . sealed) (G4db6 macro . protocol) (G4db5 macro . parent) (G4db4 macro . immutable) (G4db3 macro . mutable) (G4db2 macro . fields) (G4db1 macro . error-handling-mode) (G4db0 macro . file-options) (G4daf macro . buffer-mode) (G4dae macro . eol-style) (G4dad macro . guard) (G4dac macro . trace-define) (G4dab macro . trace-lambda) (G4daa macro . unsyntax-splicing) (G4da9 macro . unsyntax) (G4da8 macro . unquote-splicing) (G4da7 macro . unquote) (G4da6 macro . _) (G4da5 macro . else) (G4da4 macro . =>) (G4da3 macro . ...) (G4da2 macro . assert) (G4da1 macro . endianness) (G4da0 macro . delay) (G4d9f macro . time) (G4d9e macro . or) (G4d9d macro . and) (G4d9c macro . do) (G4d9b macro . cond) (G4d9a macro . let*) (G4d99 macro . let) (G4d98 macro . let*-values) (G4d97 macro . let-values) (G4d96 macro . identifier-syntax) (G4d95 macro . with-syntax) (G4d94 macro . quasisyntax) (G4d93 macro . quasiquote) (G4d92 macro . syntax-rules) (G4d91 macro . include) (G4d90 macro . define-struct) (G4d8f core-macro . record-constructor-descriptor) (G4d8e core-macro . record-type-descriptor) (G4d8d macro . case) (G4d8c macro . parameterize) (G4d8b macro . unless) (G4d8a macro . when) (G4d89 core-macro . if) (G4d88 core-macro . letrec*) (G4d87 core-macro . letrec) (G4d86 core-macro . type-descriptor) (G4d85 core-macro . case-lambda) (G4d84 core-macro . lambda) (G4d83 core-macro . syntax) (G4d82 core-macro . syntax-case) (G4d81 core-macro . quote) (G4d80 core-macro . foreign-call) (G4d7f letrec-syntax) (G4d7e let-syntax) (G4d7d set!) (G4d7c import) (G4d7b begin) (G4d7a module) (G4d79 define-syntax) (G4d78 define)) values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G509c '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G5043) (eval-core . G5042) (set-symbol-value! . G5041) (symbol-value . G5040) (gensym . G503f) (void . G503e)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G509d '(mosh) '() '() '() '() '((set-symbol-value! . G5041) (symbol-value . G5040) (assoc-ref . G501a) (alist-cons . G5019) (print . G5017) (format . G5016) (standard-library-path . G5015) (file-newer? . G5014) (stat-mtime . G5013) (current-directory . G5012) (write-to-file . G5011) (file->list . G5010) (file->string . G500f) (digit->integer . G500e) (call-with-string-input-port . G500d) (call-with-string-io . G500c) (string-split . G500b) (bytevector-for-each . G500a) (string->regexp . G5009) (rxmatch . G5008) (regexp-replace-all . G5007) (hashtable-for-each . G5006) (get-timeofday . G5002) (get-command-line . G5001) (sys-display . G5000) (source-info . G4fff) (make-compiler-instruction . G4ffe) (make-instruction . G4ffd) (set-source-info! . G4ffc) (bignum? . G4ffb) (make-complex . G4ffa) (fasl-read . G4ff9) (fasl-write . G4ff8) (include . G4d91)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G509e '(mosh backend) '() '() '() '() '((receive . G4ff7)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G509f '(mosh file) '() '() '() '() '((read-line . G503b) (file-newer? . G5014) (stat-mtime . G5013) (current-directory . G5012) (write-to-file . G5011) (file->list . G5010) (file->string . G500f)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G50a0 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G500a)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G50a1 '(mosh number) '() '() '() '() '((digit->integer . G500e)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G50a2 '(mosh string) '() '() '() '() '((print . G5017) (format . G5016) (call-with-string-input-port . G500d) (call-with-string-io . G500c) (string-split . G500b) (string->regexp . G5009)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G50a3 '(mosh list) '() '() '() '() '((assoc-ref . G501a)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G50a4 '(mosh regexp) '() '() '() '() '((rxmatch . G5008) (regexp-replace-all . G5007)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G50a5 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5006)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G50a6 '(mosh parameters) '() '() '() '() '((make-parameter . G289f) (parameterize . G4d8c)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G50a7 '(system) '() '() '() '() '((readdir . G5005) (get-environment-variables . G5004) (get-environment-variable . G5003)) '() values values '#f '#f '#f '#f) (G2bf4@G2a89@install-library 'G50a8 '(srfi :1) '() '() '() '() '((dotted-list? . G503a) (circular-list? . G5039) (proper-list? . G5038) (circular-list . G5037) (last . G5036) (last-pair . G5035) (not-pair? . G5034) (split-at! . G5033) (split-at . G5032) (list= . G5031) (list-copy . G5030) (list-tabulate . G502f) (make-list . G502e) (xcons . G502d) (tenth . G502c) (ninth . G502b) (eighth . G502a) (seventh . G5029) (sixth . G5028) (fifth . G5027) (drop-right! . G5026) (drop-right . G5025) (take-right . G5024) (take! . G5023) (drop . G5022) (take . G5021) (car+cdr . G5020) (third . G501f) (second . G501e) (first . G501d) (iota . G501c) (every . G501b) (alist-cons . G5019) (append-map . G5018)) '() values values '#f '#f '#f '#f))
((lambda (G4cd4@for-each-with-index G4cd6@repl G4cd8@trace-printer G4cda@command-line G4cdc@local-library-path G4cde@load/args G4ce0@load G4ce2@ironscheme-build G4ce4@eval-top-level G4ce6@compile-system-libraries G4ce8@compile G4cea@compile->closure G4cec@pre-compile-r6rs-file G4cee@load-r6rs-top-level G4cf0@write-record) (begin (set! G4cd4@for-each-with-index (lambda (G4d05@proc G4d06@lst) (letrec ((G4d09@loop (lambda (G4d0b@i G4d0c@lst) (if (null? G4d0c@lst) (if '#f '#f (void)) (begin (G4d05@proc G4d0b@i (car G4d0c@lst)) (G4d09@loop (+ G4d0b@i '1) (cdr G4d0c@lst))))))) (G4d09@loop '1 G4d06@lst)))) (set! G4cd6@repl (lambda G4d0f@x ((lambda (G4d12@rec) (begin (set! G4d12@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4d14@G4d13) (with-exception-handler (lambda (G4d16@e) (G4d14@G4d13 (if '#t (G4cd4@for-each-with-index (lambda (G4d18@i G4d19@x) ((lambda (G4d1c@rtd) (begin (format '#t '"   ~d. ~a" G4d18@i (record-type-name G4d1c@rtd)) ((lambda (G4d1e@v) ((lambda (G4d20@t) (if (memv G4d20@t '(0)) (newline) (if (memv G4d20@t '(1)) (begin (display '": ") (write ((record-accessor G4d1c@rtd '0) G4d19@x)) (newline)) (begin (display '":\n") ((letrec ((G4d22@f (lambda (G4d24@i) (if (not (= G4d24@i (vector-length G4d1e@v))) (begin (display '"       ") (display (vector-ref G4d1e@v G4d24@i)) (display '": ") (write ((record-accessor G4d1c@rtd G4d24@i) G4d19@x)) (newline) (G4d22@f (+ G4d24@i '1))) (void))))) G4d22@f) '0))))) (vector-length G4d1e@v))) (record-type-field-names G4d1c@rtd)))) (record-rtd G4d19@x))) (simple-conditions G4d16@e)) (raise G4d16@e)))) (lambda () (begin '#f ((lambda (G4d26@line) (if (eof-object? G4d26@line) (exit) (write (G4ce4@eval-top-level (call-with-port (open-string-input-port G4d26@line) read))))) (get-line (current-input-port)))))))) (newline) (G4d12@rec)))) (G4d12@rec))) '#f))) (set! G4cd8@trace-printer (G2967@G28a0@make-parameter write)) (set! G4cda@command-line (G2967@G28a0@make-parameter (get-command-line))) (set! G4cdc@local-library-path (lambda (G4d28@filename) (cons '"." (G2be4@G2a69@library-path)))) (set! G4cde@load/args (lambda (G4d2a@filename . G4d2c@args) (begin (apply G4cee@load-r6rs-top-level G4d2a@filename 'load G4d2c@args) (void)))) (set! G4ce0@load (lambda (G4d2e@filename) (begin (apply G4cee@load-r6rs-top-level G4d2e@filename 'load (G4cda@command-line)) (void)))) (set! G4ce2@ironscheme-build (lambda () (G4ce0@load '"ironscheme-buildscript.ss"))) (set! G4ce4@eval-top-level (lambda (G4d30@x) (G49d3@G308d@eval G4d30@x (G49ea@G30bb@interaction-environment)))) (set! G4ce6@compile-system-libraries (lambda () (G4ce4@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4ce8@compile (lambda (G4d32@filename) (G4cee@load-r6rs-top-level G4d32@filename 'compile))) (set! G4cea@compile->closure (lambda (G4d34@filename) (G4cee@load-r6rs-top-level G4d34@filename 'closure))) (set! G4cec@pre-compile-r6rs-file (lambda (G4d36@filename) (G4cee@load-r6rs-top-level G4d36@filename 'compile))) (set! G4cee@load-r6rs-top-level (lambda (G4d38@filename G4d39@how . G4d3c@args) ((lambda (G4d40@G4d3e@library-path G4d41@G4d3f@library-path) ((lambda (G4d44@swap) (dynamic-wind G4d44@swap (lambda () ((lambda (G4d46@x*) ((lambda (G4d48@t) (if (memv G4d48@t '(closure)) (G49e9@G30b9@pre-compile-r6rs-top-level G4d46@x*) (if (memv G4d48@t '(load)) ((lambda (G4d4c@G4d4a@command-line G4d4d@G4d4b@command-line) ((lambda (G4d50@swap) (dynamic-wind G4d50@swap (lambda () ((G49e8@G30b7@compile-r6rs-top-level G4d46@x*))) G4d50@swap)) (lambda () ((lambda (G4d52@t) (begin (G4d4c@G4d4a@command-line G4d4d@G4d4b@command-line) (set! G4d4d@G4d4b@command-line G4d52@t))) (G4d4c@G4d4a@command-line))))) G4cda@command-line (cons G4d38@filename (car G4d3c@args))) (if (memv G4d48@t '(compile)) (begin (G49e8@G30b7@compile-r6rs-top-level G4d46@x*) (G2be8@G2a71@serialize-all G2962@G2896@serialize-library G29c0@G2975@compile-core-expr)) (if '#f '#f (void)))))) G4d39@how)) (with-input-from-file G4d38@filename (lambda () ((letrec ((G4d54@f (lambda () ((lambda (G4d56@x) (if (eof-object? G4d56@x) '() (cons G4d56@x (G4d54@f)))) (G295a@G2886@read-annotated))))) G4d54@f)))))) G4d44@swap)) (lambda () ((lambda (G4d58@t) (begin (G4d40@G4d3e@library-path G4d41@G4d3f@library-path) (set! G4d41@G4d3f@library-path G4d58@t))) (G4d40@G4d3e@library-path))))) G2be4@G2a69@library-path (G4cdc@local-library-path G4d38@filename)))) (set! G4cf0@write-record (lambda (G4d5a@record G4d5b@port) ((lambda (G4d5e@rtd) (begin (format G4d5b@port '"    ~a" (record-type-name G4d5e@rtd)) ((lambda (G4d60@v) ((lambda (G4d62@t) (if (memv G4d62@t '(0)) (newline) (if (memv G4d62@t '(1)) (begin (display '": " G4d5b@port) (write ((record-accessor G4d5e@rtd '0) G4d5a@record) G4d5b@port) (newline G4d5b@port)) (begin (display '":\n") ((letrec ((G4d64@f (lambda (G4d66@i) (if (not (= G4d66@i (vector-length G4d60@v))) (begin (display '"       " G4d5b@port) (display (vector-ref G4d60@v G4d66@i) G4d5b@port) (display '": " G4d5b@port) (write ((record-accessor G4d5e@rtd G4d66@i) G4d5a@record) G4d5b@port) (newline G4d5b@port) (G4d64@f (+ G4d66@i '1))) (void))))) G4d64@f) '0))))) (vector-length G4d60@v))) (record-type-field-names G4d5e@rtd)))) (record-rtd G4d5a@record)))) (begin (set! G4d76@G4cf0@write-record G4cf0@write-record) (set! G4d75@G4cee@load-r6rs-top-level G4cee@load-r6rs-top-level) (set! G4d74@G4cec@pre-compile-r6rs-file G4cec@pre-compile-r6rs-file) (set! G4d73@G4cea@compile->closure G4cea@compile->closure) (set! G4d72@G4ce8@compile G4ce8@compile) (set! G4d71@G4ce6@compile-system-libraries G4ce6@compile-system-libraries) (set! G4d70@G4ce4@eval-top-level G4ce4@eval-top-level) (set! G4d6f@G4ce2@ironscheme-build G4ce2@ironscheme-build) (set! G4d6e@G4ce0@load G4ce0@load) (set! G4d6d@G4cde@load/args G4cde@load/args) (set! G4d6c@G4cdc@local-library-path G4cdc@local-library-path) (set! G4d6b@G4cda@command-line G4cda@command-line) (set! G4d6a@G4cd8@trace-printer G4cd8@trace-printer) (set! G4d69@G4cd6@repl G4cd6@repl) (set! G4d68@G4cd4@for-each-with-index G4cd4@for-each-with-index) (G2be9@G2a73@current-precompiled-library-loader G2963@G2898@load-serialized-library) (set-symbol-value! 'load G4ce0@load) (set-symbol-value! 'pre-compile-r6rs-file G4cec@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4ce4@eval-top-level) (set-symbol-value! 'int-env-syms G49ca@G307b@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29bf@G2973@expanded->core) (set-symbol-value! 'trace-printer G4cd8@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2be4@G2a69@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4cf1@args G4cf2@port) (with-exception-handler (lambda (G4cf5@c) (begin (display '" Condition components:\n" G4cf2@port) (G4cd4@for-each-with-index (lambda (G4cf7@i G4cf8@x) ((lambda (G4cfb@rtd) (begin (format G4cf2@port '"   ~d. ~a" G4cf7@i (record-type-name G4cfb@rtd)) ((lambda (G4cfd@v) ((lambda (G4cff@t) (if (memv G4cff@t '(0)) (newline) (if (memv G4cff@t '(1)) (begin (display '": ") (write ((record-accessor G4cfb@rtd '0) G4cf8@x)) (newline)) (begin (display '":\n") ((letrec ((G4d01@f (lambda (G4d03@i) (if (not (= G4d03@i (vector-length G4cfd@v))) (begin (display '"       ") (display (vector-ref G4cfd@v G4d03@i)) (display '": ") (write ((record-accessor G4cfb@rtd G4d03@i) G4cf8@x)) (newline) (G4d01@f (+ G4d03@i '1))) (void))))) G4d01@f) '0))))) (vector-length G4cfd@v))) (record-type-field-names G4cfb@rtd)))) (record-rtd G4cf8@x))) (simple-conditions G4cf5@c)))) (lambda () (if (null? G4cf1@args) (G4cd6@repl) (G4cee@load-r6rs-top-level (car G4cf1@args) 'load (cdr G4cf1@args)))))) (G4cda@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
