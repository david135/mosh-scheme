;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G2824@read-annotated G2826@annotation-stripped G2828@annotation? G282a@annotation-source G282c@annotation-expression G282e@scm->fasl G2830@fasl-save G2832@fasl-load G2834@serialize-library G2836@load-serialized-library G2838@make-record-printer G283a@compile-core G283c@read-library-source-file G283e@make-parameter G28aa@file-options-spec) (begin (set! G2824@read-annotated read) (set! G2826@annotation-stripped (lambda (G28ab@x) (G282c@annotation-expression G28ab@x))) (set! G2828@annotation? (lambda (G28ad@x) (source-info G28ad@x))) (set! G282a@annotation-source (lambda (G28af@x) (source-info G28af@x))) (set! G282c@annotation-expression (lambda (G28b1@x) (if (pair? G28b1@x) (cons (car G28b1@x) (cdr G28b1@x)) (display '"line:46\n")))) (set! G282e@scm->fasl (lambda (G28b3@filename) (string-append G28b3@filename '".fasl"))) (set! G2830@fasl-save (lambda (G28b5@filename G28b6@obj) (call-with-port (open-file-output-port G28b5@filename) (lambda (G28b9@port) ((symbol-value 'fasl-write!) G28b6@obj G28b9@port))))) (set! G2832@fasl-load (lambda (G28bb@filename) (call-with-port (open-file-input-port G28bb@filename) (symbol-value 'fasl-read!)))) (set! G2834@serialize-library (lambda (G28bd@filename G28be@obj) (begin (format '#t '"serialize-library ~a\n..." G28bd@filename) ((lambda (G28c1@fasl-file) (begin (if (file-exists? G28c1@fasl-file) (delete-file G28c1@fasl-file) (void)) ((call/cc (lambda (G28c5@G28c3) (lambda () (with-exception-handler (lambda (G28c7@c) ((call/cc (lambda (G28c9@G28c4) (G28c5@G28c3 (lambda () (if '#t (begin (format '#t '"Warning:serialize-library failed " G28bd@filename) (if (file-exists? G28c1@fasl-file) (delete-file G28c1@fasl-file) (void)) '#f) (G28c9@G28c4 (lambda () (raise-continuable G28c7@c)))))))))) (lambda () (begin '#f (G2830@fasl-save G28c1@fasl-file G28be@obj) (display '"OK\n")))))))))) (G282e@scm->fasl G28bd@filename))))) (set! G2836@load-serialized-library (lambda (G28cb@filename G28cc@obj) ((lambda (G28cf@fasl-file) (if (and (file-exists? G28cf@fasl-file) ((symbol-value 'file-newer?) G28cf@fasl-file G28cb@filename)) ((lambda (G28d1@expanded2core) ((lambda (G28d3@code) ((lambda (G28d5@pivot) ((lambda (G28d7@visit) ((lambda (G28d9@visit-proc) ((lambda () (begin (set-car! G28d5@pivot G28d9@visit-proc) ((lambda (G28db@pivot) ((lambda (G28dd@invoke) ((lambda () (begin (set-car! G28db@pivot (lambda () (eval-core G28dd@invoke))) (apply G28cc@obj G28d3@code))))) (G28d1@expanded2core (car G28db@pivot)))) (cdr G28d5@pivot)) '#t)))) (lambda () (eval-core G28d7@visit)))) (G28d1@expanded2core (car G28d5@pivot)))) (cddddr (cddddr G28d3@code)))) (G2832@fasl-load G28cf@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G282e@scm->fasl G28cb@filename)))) (set! G2838@make-record-printer (lambda (G28df@name G28e0@printer) (lambda G28e3@x (begin (display '"record printer") (for-each display G28e3@x))))) (set! G283a@compile-core (lambda G28e5@x (apply error 'comile-core '"not implementated" G28e5@x))) (set! G283c@read-library-source-file (lambda (G28e7@file-name) (with-input-from-file G28e7@file-name G2824@read-annotated))) (set! G283e@make-parameter (lambda G28f7 ((lambda (G28f8) (if (= G28f8 '1) (apply (lambda (G28e9@x) (G283e@make-parameter G28e9@x (lambda (G28eb@x) G28eb@x))) G28f7) (if (= G28f8 '2) (apply (lambda (G28ed@x G28ee@fender) ((lambda (G28f1@x) (lambda G28f5 ((lambda (G28f6) (if (= G28f6 '0) (apply (lambda () G28f1@x) G28f5) (if (= G28f6 '1) (apply (lambda (G28f3@v) (set! G28f1@x (G28ee@fender G28f3@v))) G28f5) (error 'apply '"invalid arg count")))) (length G28f5)))) (G28ee@fender G28ed@x))) G28f7) (error 'apply '"invalid arg count")))) (length G28f7)))) (set! G28aa@file-options-spec (lambda (G28f9@x) G28f9@x)) (begin (set! G2909@G28aa@file-options-spec G28aa@file-options-spec) (set! G2908@G283e@make-parameter G283e@make-parameter) (set! G2907@G283c@read-library-source-file G283c@read-library-source-file) (set! G2906@G283a@compile-core G283a@compile-core) (set! G2905@G2838@make-record-printer G2838@make-record-printer) (set! G2904@G2836@load-serialized-library G2836@load-serialized-library) (set! G2903@G2834@serialize-library G2834@serialize-library) (set! G2902@G2832@fasl-load G2832@fasl-load) (set! G2901@G2830@fasl-save G2830@fasl-save) (set! G2900@G282e@scm->fasl G282e@scm->fasl) (set! G28ff@G282c@annotation-expression G282c@annotation-expression) (set! G28fe@G282a@annotation-source G282a@annotation-source) (set! G28fd@G2828@annotation? G2828@annotation?) (set! G28fc@G2826@annotation-stripped G2826@annotation-stripped) (set! G28fb@G2824@read-annotated G2824@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G290e@current-primitive-locations G2910@mutable? G2912@rewriter G2914@expanded->core G2916@compile-core-expr G2918@pretty-print G291a@compile-core-expr-to-port) (begin (set! G290e@current-primitive-locations (G2908@G283e@make-parameter (lambda (G291b@x) '#f) (lambda (G291d@p) G291d@p))) (set! G2910@mutable? (lambda (G291f@x) (or (pair? G291f@x) (vector? G291f@x) (hashtable? G291f@x)))) (set! G2912@rewriter (lambda (G2921@quote-hack?) ((lambda (G2924@f) (begin (set! G2924@f (lambda (G2925@x) (if (pair? G2925@x) ((lambda (G2927@t) (if (memv G2927@t '(quote)) (if (and G2921@quote-hack? (G2910@mutable? (cadr G2925@x))) ((lambda (G2929@g) (begin (set-symbol-value! G2929@g (cadr G2925@x)) G2929@g)) (gensym)) G2925@x) (if (memv G2927@t '(case-lambda)) (cons 'case-lambda (map (lambda (G292b@x) (cons (car G292b@x) (map G2924@f (cdr G292b@x)))) (cdr G2925@x))) (if (memv G2927@t '(lambda)) (cons* 'lambda (cadr G2925@x) (map G2924@f (cddr G2925@x))) (if (memv G2927@t '(letrec)) ((lambda (G292d@bindings G292e@body*) ((lambda (G2931@lhs* G2932@rhs*) (cons* 'letrec (map list G2931@lhs* (map G2924@f G2932@rhs*)) (map G2924@f G292e@body*))) (map car G292d@bindings) (map cadr G292d@bindings))) (cadr G2925@x) (cddr G2925@x)) (if (memv G2927@t '(letrec*)) ((lambda (G2935@bindings G2936@body*) ((lambda (G2939@lhs* G293a@rhs*) (cons* 'letrec* (map list G2939@lhs* (map G2924@f G293a@rhs*)) (map G2924@f G2936@body*))) (map car G2935@bindings) (map cadr G2935@bindings))) (cadr G2925@x) (cddr G2925@x)) (if (memv G2927@t '(library-letrec*)) ((lambda (G293d@name G293e@x) ((lambda (G2941@bindings G2942@body*) ((lambda (G2945@lhs* G2946@lhs** G2947@rhs*) (cons* 'library-letrec* G293d@name (map list G2945@lhs* G2946@lhs** (map G2924@f G2947@rhs*)) (map G2924@f G2942@body*))) (map car G2941@bindings) (map cadr G2941@bindings) (map caddr G2941@bindings))) (cadr G293e@x) (cddr G293e@x))) (cadr G2925@x) (cdr G2925@x)) (if (memv G2927@t '(begin)) (cons 'begin (map G2924@f (cdr G2925@x))) (if (memv G2927@t '(set!)) (list 'set! (cadr G2925@x) (G2924@f (caddr G2925@x))) (if (memv G2927@t '(primitive)) ((lambda (G294b@op) ((lambda (G294d@t) (if G294d@t ((lambda (G294f@loc) G294f@loc) G294d@t) G294b@op)) ((G290e@current-primitive-locations) G294b@op))) (cadr G2925@x)) (if (memv G2927@t '(define)) G2925@x (if (list? G2925@x) (map G2924@f G2925@x) (error 'rewrite '"invalid form ~s ~s" G2925@x (list? G2925@x)))))))))))))) (car G2925@x)) G2925@x))) G2924@f)) '#f))) (set! G2914@expanded->core (lambda (G2951@x) ((G2912@rewriter '#t) G2951@x))) (set! G2916@compile-core-expr (lambda (G2953@x) ((G2912@rewriter '#f) G2953@x))) (set! G2918@pretty-print write) (set! G291a@compile-core-expr-to-port (lambda (G2955@x G2956@p) (G2918@pretty-print ((G2912@rewriter '#f) G2955@x) G2956@p))) (begin (set! G295f@G291a@compile-core-expr-to-port G291a@compile-core-expr-to-port) (set! G295e@G2918@pretty-print G2918@pretty-print) (set! G295d@G2916@compile-core-expr G2916@compile-core-expr) (set! G295c@G2914@expanded->core G2914@expanded->core) (set! G295b@G2912@rewriter G2912@rewriter) (set! G295a@G2910@mutable? G2910@mutable?) (set! G2959@G290e@current-primitive-locations G290e@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G29b5@make-collection G29b7@current-library-collection G29bd@G29b8 G29bf@G29ba G29c1@G29b9 G29c4@library? G29c6@make-library G29c8@library-id G29ca@library-name G29cc@library-version G29ce@library-imp* G29d0@library-vis* G29d2@library-inv* G29d4@library-subst G29d6@library-env G29d8@library-visit-state G29da@library-invoke-state G29dc@library-visit-code G29de@library-invoke-code G29e0@library-visible? G29e2@library-source-file-name G29e4@set-library-id! G29e6@set-library-name! G29e8@set-library-version! G29ea@set-library-imp*! G29ec@set-library-vis*! G29ee@set-library-inv*! G29f0@set-library-subst! G29f2@set-library-env! G29f4@set-library-visit-state! G29f6@set-library-invoke-state! G29f8@set-library-visit-code! G29fa@set-library-invoke-code! G29fc@set-library-visible?! G29fe@set-library-source-file-name! G2a00@rp G2a02@find-dependencies G2a04@find-library-by G2a06@library-path G2a08@library-extensions G2a0a@library-name->file-name G2a0c@file-locator G2a0e@serialize-all G2a10@current-precompiled-library-loader G2a12@try-load-from-file G2a14@library-loader G2a16@current-library-expander G2a18@external-pending-libraries G2a1a@find-external-library G2a1c@find-library-by-name G2a1e@library-exists? G2a20@find-library-by-spec/die G2a22@label->binding-table G2a24@install-library-record G2a26@install-library G2a28@imported-label->binding G2a2a@invoke-library G2a2c@visit-library G2a2e@invoke-library-by-spec G2a30@installed-libraries G2a32@library-spec) (begin (set! G29b5@make-collection (lambda () ((lambda (G2a33@set) ((lambda (G2a36@set-cons) (begin (set! G2a36@set-cons (lambda (G2a3b@x G2a3c@ls) (if (memq G2a3b@x G2a3c@ls) G2a3c@ls (cons G2a3b@x G2a3c@ls)))) (lambda G2a39 ((lambda (G2a3a) (if (= G2a3a '0) (apply (lambda () G2a33@set) G2a39) (if (= G2a3a '1) (apply (lambda (G2a37@x) (set! G2a33@set (G2a36@set-cons G2a37@x G2a33@set))) G2a39) (error 'apply '"invalid arg count")))) (length G2a39))))) '#f)) '()))) (set! G29b7@current-library-collection (G2908@G283e@make-parameter (G29b5@make-collection) (lambda (G2a3f@x) (begin (if (not (procedure? G2a3f@x)) (assertion-violation 'current-library-collection '"not a procedure" G2a3f@x) (void)) G2a3f@x)))) (set! G29bd@G29b8 (make-record-type-descriptor 'library '#f 'G29bb '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G29bf@G29ba '#f) (set! G29c1@G29b9 (make-record-constructor-descriptor G29bd@G29b8 '#f G29bf@G29ba)) (set! G29c4@library? (record-predicate G29bd@G29b8)) (set! G29c6@make-library (record-constructor G29c1@G29b9)) (set! G29c8@library-id (record-accessor G29bd@G29b8 '0)) (set! G29ca@library-name (record-accessor G29bd@G29b8 '1)) (set! G29cc@library-version (record-accessor G29bd@G29b8 '2)) (set! G29ce@library-imp* (record-accessor G29bd@G29b8 '3)) (set! G29d0@library-vis* (record-accessor G29bd@G29b8 '4)) (set! G29d2@library-inv* (record-accessor G29bd@G29b8 '5)) (set! G29d4@library-subst (record-accessor G29bd@G29b8 '6)) (set! G29d6@library-env (record-accessor G29bd@G29b8 '7)) (set! G29d8@library-visit-state (record-accessor G29bd@G29b8 '8)) (set! G29da@library-invoke-state (record-accessor G29bd@G29b8 '9)) (set! G29dc@library-visit-code (record-accessor G29bd@G29b8 '10)) (set! G29de@library-invoke-code (record-accessor G29bd@G29b8 '11)) (set! G29e0@library-visible? (record-accessor G29bd@G29b8 '12)) (set! G29e2@library-source-file-name (record-accessor G29bd@G29b8 '13)) (set! G29e4@set-library-id! (record-mutator G29bd@G29b8 '0)) (set! G29e6@set-library-name! (record-mutator G29bd@G29b8 '1)) (set! G29e8@set-library-version! (record-mutator G29bd@G29b8 '2)) (set! G29ea@set-library-imp*! (record-mutator G29bd@G29b8 '3)) (set! G29ec@set-library-vis*! (record-mutator G29bd@G29b8 '4)) (set! G29ee@set-library-inv*! (record-mutator G29bd@G29b8 '5)) (set! G29f0@set-library-subst! (record-mutator G29bd@G29b8 '6)) (set! G29f2@set-library-env! (record-mutator G29bd@G29b8 '7)) (set! G29f4@set-library-visit-state! (record-mutator G29bd@G29b8 '8)) (set! G29f6@set-library-invoke-state! (record-mutator G29bd@G29b8 '9)) (set! G29f8@set-library-visit-code! (record-mutator G29bd@G29b8 '10)) (set! G29fa@set-library-invoke-code! (record-mutator G29bd@G29b8 '11)) (set! G29fc@set-library-visible?! (record-mutator G29bd@G29b8 '12)) (set! G29fe@set-library-source-file-name! (record-mutator G29bd@G29b8 '13)) (set! G2a00@rp (G2905@G2838@make-record-printer 'library (lambda (G2a41@x G2a42@p G2a43@wr) (begin (if (not (G29c4@library? G2a41@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G29cc@library-version G2a41@x)) (G29ca@library-name G2a41@x) (append (G29ca@library-name G2a41@x) (list (G29cc@library-version G2a41@x))))) G2a42@p))))) (set! G2a02@find-dependencies (lambda (G2a47@ls) (if (null? G2a47@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2a04@find-library-by (lambda (G2a49@pred) ((letrec ((G2a4b@f (lambda (G2a4d@ls) (if (null? G2a4d@ls) '#f (if (G2a49@pred (car G2a4d@ls)) (car G2a4d@ls) (G2a4b@f (cdr G2a4d@ls))))))) G2a4b@f) ((G29b7@current-library-collection))))) (set! G2a06@library-path (G2908@G283e@make-parameter '(".") (lambda (G2a4f@x) (if (and (list? G2a4f@x) (for-all string? G2a4f@x)) (map (lambda (G2a51@x) G2a51@x) G2a4f@x) (assertion-violation 'library-path '"not a list of strings" G2a4f@x))))) (set! G2a08@library-extensions (G2908@G283e@make-parameter '(".sls" ".ss" ".scm") (lambda (G2a53@x) (if (and (list? G2a53@x) (for-all string? G2a53@x)) (map (lambda (G2a55@x) G2a55@x) G2a53@x) (assertion-violation 'library-extensions '"not a list of strings" G2a53@x))))) (set! G2a0a@library-name->file-name (lambda (G2a57@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2a5b@G2a59 G2a5c@G2a5a) ((lambda (G2a5f@extract G2a60@p) ((lambda (G2a64@display-hex) (begin (set! G2a64@display-hex (lambda (G2a6d@n) (if (<= '0 G2a6d@n '9) (display G2a6d@n G2a60@p) (display (integer->char (+ (char->integer '#\A) (- G2a6d@n '10))) G2a60@p)))) (begin ((letrec ((G2a65@f (lambda (G2a67@ls) (if (not (null? G2a67@ls)) (begin (display '"/" G2a60@p) (for-each (lambda (G2a69@c) (if (or (char<=? '#\a G2a69@c '#\z) (char<=? '#\A G2a69@c '#\Z) (char<=? '#\nul G2a69@c '#\9) (memv G2a69@c '(#\- #\. #\_ #\~))) (display G2a69@c G2a60@p) (begin (display '"%" G2a60@p) ((lambda (G2a6b@n) (begin (G2a64@display-hex (quotient G2a6b@n '16)) (G2a64@display-hex (remainder G2a6b@n '16)))) (char->integer G2a69@c))))) (string->list (symbol->string (car G2a67@ls)))) (G2a65@f (cdr G2a67@ls))) (void))))) G2a65@f) G2a57@x) (G2a5f@extract)))) '#f)) G2a5c@G2a5a G2a5b@G2a59))))) (set! G2a0c@file-locator (G2908@G283e@make-parameter (lambda (G2a6f@x) ((lambda (G2a71@str) ((letrec ((G2a73@f (lambda (G2a75@ls G2a76@exts G2a77@failed-list) (if (null? G2a75@ls) ((lambda () ((lambda (G2a83@G2a7e G2a85@G2a80 G2a87@G2a7f G2a8a@G2a7d G2a8c@make-library-resolution-condition G2a8e@G2a7b G2a90@G2a7c G2a92@library-resolution-condition? G2a94@condition-library G2a96@condition-files) (begin (set! G2a83@G2a7e (make-record-type-descriptor '&library-resolution G4c3e@G498f@&condition-rtd 'G2a81 '#f '#f '#((immutable library) (immutable files)))) (set! G2a85@G2a80 '#f) (set! G2a87@G2a7f (make-record-constructor-descriptor G2a83@G2a7e G4c3f@G4991@&condition-rcd G2a85@G2a80)) (set! G2a8a@G2a7d (record-predicate G2a83@G2a7e)) (set! G2a8c@make-library-resolution-condition (record-constructor G2a87@G2a7f)) (set! G2a8e@G2a7b (record-accessor G2a83@G2a7e '0)) (set! G2a90@G2a7c (record-accessor G2a83@G2a7e '1)) (set! G2a92@library-resolution-condition? (condition-predicate G2a83@G2a7e)) (set! G2a94@condition-library (condition-accessor G2a83@G2a7e G2a8e@G2a7b)) (set! G2a96@condition-files (condition-accessor G2a83@G2a7e G2a90@G2a7c)) (raise (condition (G4c5e@G4a27@make-error) (G4c80@G4a81@make-who-condition 'expander) (G4c44@G49e4@make-message-condition '"cannot locate library in library-path") (G2a8c@make-library-resolution-condition G2a6f@x (reverse G2a77@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2a76@exts) (G2a73@f (cdr G2a75@ls) (G2a08@library-extensions) G2a77@failed-list) ((lambda (G2a97@name) (if (file-exists? G2a97@name) G2a97@name (G2a73@f G2a75@ls (cdr G2a76@exts) (cons G2a97@name G2a77@failed-list)))) (string-append (car G2a75@ls) G2a71@str (car G2a76@exts)))))))) G2a73@f) (G2a06@library-path) (G2a08@library-extensions) '())) (G2a0a@library-name->file-name G2a6f@x))) (lambda (G2a99@f) (if (procedure? G2a99@f) G2a99@f (assertion-violation 'file-locator '"not a procedure" G2a99@f))))) (set! G2a0e@serialize-all (lambda (G2a9b@serialize G2a9c@compile) ((lambda (G2aa0@library-desc) (begin (set! G2aa0@library-desc (lambda (G2aa3@x) (list (G29c8@library-id G2aa3@x) (G29ca@library-name G2aa3@x)))) (for-each (lambda (G2aa1@x) (if (G29e2@library-source-file-name G2aa1@x) (G2a9b@serialize (G29e2@library-source-file-name G2aa1@x) (list (G29c8@library-id G2aa1@x) (G29ca@library-name G2aa1@x) (G29cc@library-version G2aa1@x) (map G2aa0@library-desc (G29ce@library-imp* G2aa1@x)) (map G2aa0@library-desc (G29d0@library-vis* G2aa1@x)) (map G2aa0@library-desc (G29d2@library-inv* G2aa1@x)) (G29d4@library-subst G2aa1@x) (G29d6@library-env G2aa1@x) (G2a9c@compile (G29dc@library-visit-code G2aa1@x)) (G2a9c@compile (G29de@library-invoke-code G2aa1@x)) (G29e0@library-visible? G2aa1@x))) (void))) ((G29b7@current-library-collection))))) '#f))) (set! G2a10@current-precompiled-library-loader (G2908@G283e@make-parameter (lambda (G2aa5@filename G2aa6@sk) '#f))) (set! G2a12@try-load-from-file (lambda (G2aa9@filename) ((G2a10@current-precompiled-library-loader) G2aa9@filename (lambda G2acf ((lambda (G2ad0) (if (= G2ad0 '11) (apply (lambda (G2aab@id G2aac@name G2aad@ver G2aae@imp* G2aaf@vis* G2ab0@inv* G2ab1@exp-subst G2ab2@exp-env G2ab3@visit-proc G2ab4@invoke-proc G2ab5@visible?) ((letrec ((G2ac1@f (lambda (G2ac3@deps) (if (null? G2ac3@deps) (begin (G2a26@install-library G2aab@id G2aac@name G2aad@ver G2aae@imp* G2aaf@vis* G2ab0@inv* G2ab1@exp-subst G2ab2@exp-env G2ab3@visit-proc G2ab4@invoke-proc '#f '#f G2ab5@visible? '#f) '#t) ((lambda (G2ac5@d) ((lambda (G2ac7@label G2ac8@dname) ((lambda (G2acb@l) (if (and (G29c4@library? G2acb@l) (eq? G2ac7@label (G29c8@library-id G2acb@l))) (G2ac1@f (cdr G2ac3@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2aac@name G2ac8@dname G2aa9@filename G2acb@l G2ac7@label (G29c8@library-id G2acb@l)) '#f))) (G2a1c@find-library-by-name G2ac8@dname))) (car G2ac5@d) (cadr G2ac5@d))) (car G2ac3@deps)))))) G2ac1@f) (append G2aae@imp* G2aaf@vis* G2ab0@inv*))) G2acf) (if (>= G2ad0 '0) (apply (lambda G2acd@others '#f) G2acf) (error 'apply '"invalid arg count")))) (length G2acf)))))) (set! G2a14@library-loader (G2908@G283e@make-parameter (lambda (G2ad1@x) ((lambda (G2ad3@file-name) (if (not G2ad3@file-name) (assertion-violation '#f '"cannot file library" G2ad1@x) (or (G2a12@try-load-from-file G2ad3@file-name) ((G2a16@current-library-expander) (G2907@G283c@read-library-source-file G2ad3@file-name) G2ad3@file-name (lambda (G2ad5@name) (if (not (fast-equal? G2ad5@name G2ad1@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2ad9@G2ad7 G2ada@G2ad8) ((lambda (G2add@e G2ade@p) (begin (display '"expected to find library " G2ade@p) (write G2ad1@x G2ade@p) (display '" in file " G2ade@p) (display G2ad3@file-name G2ade@p) (display '", found " G2ade@p) (write G2ad5@name G2ade@p) (display '" instead" G2ade@p) (G2add@e))) G2ada@G2ad8 G2ad9@G2ad7)))) (void))))))) ((G2a0c@file-locator) G2ad1@x))) (lambda (G2ae1@f) (if (procedure? G2ae1@f) G2ae1@f (assertion-violation 'library-locator '"not a procedure" G2ae1@f))))) (set! G2a16@current-library-expander (G2908@G283e@make-parameter (lambda (G2ae3@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2ae5@f) (if (procedure? G2ae5@f) G2ae5@f (assertion-violation 'library-expander '"not a procedure" G2ae5@f))))) (set! G2a18@external-pending-libraries (G2908@G283e@make-parameter '())) (set! G2a1a@find-external-library (lambda (G2ae7@name) (begin (if (member G2ae7@name (G2a18@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2ae7@name) (void)) ((lambda (G2aeb@G2ae9 G2aec@G2aea) ((lambda (G2aef@swap) (dynamic-wind G2aef@swap (lambda () (begin ((G2a14@library-loader) G2ae7@name) (or (G2a04@find-library-by (lambda (G2af1@x) (fast-equal? (G29ca@library-name G2af1@x) G2ae7@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2ae7@name)))) G2aef@swap)) (lambda () ((lambda (G2af3@t) (begin (G2aeb@G2ae9 G2aec@G2aea) (set! G2aec@G2aea G2af3@t))) (G2aeb@G2ae9))))) G2a18@external-pending-libraries (cons G2ae7@name (G2a18@external-pending-libraries)))))) (set! G2a1c@find-library-by-name (lambda (G2af5@name) (or (G2a04@find-library-by (lambda (G2af7@x) (fast-equal? (G29ca@library-name G2af7@x) G2af5@name))) (G2a1a@find-external-library G2af5@name)))) (set! G2a1e@library-exists? (lambda (G2af9@name) (and (G2a04@find-library-by (lambda (G2afb@x) (fast-equal? (G29ca@library-name G2afb@x) G2af9@name))) '#t))) (set! G2a20@find-library-by-spec/die (lambda (G2afd@spec) ((lambda (G2aff@id) (or (G2a04@find-library-by (lambda (G2b01@x) (eq? G2aff@id (G29c8@library-id G2b01@x)))) (assertion-violation '#f '"cannot find library with required spec" G2afd@spec))) (car G2afd@spec)))) (set! G2a22@label->binding-table (make-eq-hashtable)) (set! G2a24@install-library-record (lambda (G2b03@lib) (begin ((lambda (G2b05@exp-env) (for-each (lambda (G2b07@x) ((lambda (G2b09@label G2b0a@binding) ((lambda (G2b0d@binding) (hashtable-set! G2a22@label->binding-table G2b09@label G2b0d@binding)) ((lambda (G2b0f@t) (if (memv G2b0f@t '(global)) (cons 'global (cons G2b03@lib (cdr G2b0a@binding))) (if (memv G2b0f@t '(global-macro)) (cons 'global-macro (cons G2b03@lib (cdr G2b0a@binding))) (if (memv G2b0f@t '(global-macro!)) (cons 'global-macro! (cons G2b03@lib (cdr G2b0a@binding))) G2b0a@binding)))) (car G2b0a@binding)))) (car G2b07@x) (cdr G2b07@x))) G2b05@exp-env)) (G29d6@library-env G2b03@lib)) ((G29b7@current-library-collection) G2b03@lib)))) (set! G2a26@install-library (lambda (G2b11@id G2b12@name G2b13@ver G2b14@imp* G2b15@vis* G2b16@inv* G2b17@exp-subst G2b18@exp-env G2b19@visit-proc G2b1a@invoke-proc G2b1b@visit-code G2b1c@invoke-code G2b1d@visible? G2b1e@source-file-name) ((lambda (G2b2d@imp-lib* G2b2e@vis-lib* G2b2f@inv-lib*) (begin (if (not (and (symbol? G2b11@id) (list? G2b12@name) (list? G2b13@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2b11@id G2b12@name G2b13@ver) (void)) (if (G2a1e@library-exists? G2b12@name) (assertion-violation 'install-library '"library is already installed" G2b12@name) (void)) ((lambda (G2b33@lib) (G2a24@install-library-record G2b33@lib)) (G29c6@make-library G2b11@id G2b12@name G2b13@ver G2b2d@imp-lib* G2b2e@vis-lib* G2b2f@inv-lib* G2b17@exp-subst G2b18@exp-env G2b19@visit-proc G2b1a@invoke-proc G2b1b@visit-code G2b1c@invoke-code G2b1d@visible? G2b1e@source-file-name)))) (map G2a20@find-library-by-spec/die G2b14@imp*) (map G2a20@find-library-by-spec/die G2b15@vis*) (map G2a20@find-library-by-spec/die G2b16@inv*)))) (set! G2a28@imported-label->binding (lambda (G2b35@lab) (hashtable-ref G2a22@label->binding-table G2b35@lab '#f))) (set! G2a2a@invoke-library (lambda (G2b37@lib) ((lambda (G2b39@invoke) (if (procedure? G2b39@invoke) (begin (G29f6@set-library-invoke-state! G2b37@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2b37@lib))) (for-each G2a2a@invoke-library (G29d2@library-inv* G2b37@lib)) (G29f6@set-library-invoke-state! G2b37@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2b37@lib))) (G2b39@invoke) (G29f6@set-library-invoke-state! G2b37@lib '#t)) (void))) (G29da@library-invoke-state G2b37@lib)))) (set! G2a2c@visit-library (lambda (G2b3b@lib) ((lambda (G2b3d@visit) (if (procedure? G2b3d@visit) (begin (G29f4@set-library-visit-state! G2b3b@lib (lambda () (assertion-violation 'visit '"circularity detected" G2b3b@lib))) (for-each G2a2a@invoke-library (G29d0@library-vis* G2b3b@lib)) (G29f4@set-library-visit-state! G2b3b@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2b3b@lib))) (G2b3d@visit) (G29f4@set-library-visit-state! G2b3b@lib '#t)) (void))) (G29d8@library-visit-state G2b3b@lib)))) (set! G2a2e@invoke-library-by-spec (lambda (G2b3f@spec) (G2a2a@invoke-library (G2a20@find-library-by-spec/die G2b3f@spec)))) (set! G2a30@installed-libraries (lambda G2b47 ((lambda (G2b48) (if (= G2b48 '1) (apply (lambda (G2b41@all?) ((letrec ((G2b43@f (lambda (G2b45@ls) (if (null? G2b45@ls) '() (if (or G2b41@all? (G29e0@library-visible? (car G2b45@ls))) (cons (car G2b45@ls) (G2b43@f (cdr G2b45@ls))) (G2b43@f (cdr G2b45@ls))))))) G2b43@f) ((G29b7@current-library-collection)))) G2b47) (if (= G2b48 '0) (apply (lambda () (G2a30@installed-libraries '#f)) G2b47) (error 'apply '"invalid arg count")))) (length G2b47)))) (set! G2a32@library-spec (lambda (G2b49@x) (begin (if (not (G29c4@library? G2b49@x)) (assertion-violation 'library-spec '"not a library" G2b49@x) (void)) (list (G29c8@library-id G2b49@x) (G29ca@library-name G2b49@x) (G29cc@library-version G2b49@x))))) (begin (set! G2b87@G2a32@library-spec G2a32@library-spec) (set! G2b86@G2a30@installed-libraries G2a30@installed-libraries) (set! G2b85@G2a2e@invoke-library-by-spec G2a2e@invoke-library-by-spec) (set! G2b84@G2a2c@visit-library G2a2c@visit-library) (set! G2b83@G2a2a@invoke-library G2a2a@invoke-library) (set! G2b82@G2a28@imported-label->binding G2a28@imported-label->binding) (set! G2b81@G2a26@install-library G2a26@install-library) (set! G2b80@G2a24@install-library-record G2a24@install-library-record) (set! G2b7f@G2a22@label->binding-table G2a22@label->binding-table) (set! G2b7e@G2a20@find-library-by-spec/die G2a20@find-library-by-spec/die) (set! G2b7d@G2a1e@library-exists? G2a1e@library-exists?) (set! G2b7c@G2a1c@find-library-by-name G2a1c@find-library-by-name) (set! G2b7b@G2a1a@find-external-library G2a1a@find-external-library) (set! G2b7a@G2a18@external-pending-libraries G2a18@external-pending-libraries) (set! G2b79@G2a16@current-library-expander G2a16@current-library-expander) (set! G2b78@G2a14@library-loader G2a14@library-loader) (set! G2b77@G2a12@try-load-from-file G2a12@try-load-from-file) (set! G2b76@G2a10@current-precompiled-library-loader G2a10@current-precompiled-library-loader) (set! G2b75@G2a0e@serialize-all G2a0e@serialize-all) (set! G2b74@G2a0c@file-locator G2a0c@file-locator) (set! G2b73@G2a0a@library-name->file-name G2a0a@library-name->file-name) (set! G2b72@G2a08@library-extensions G2a08@library-extensions) (set! G2b71@G2a06@library-path G2a06@library-path) (set! G2b70@G2a04@find-library-by G2a04@find-library-by) (set! G2b6f@G2a02@find-dependencies G2a02@find-dependencies) (set! G2b6e@G2a00@rp G2a00@rp) (set! G2b6d@G29fe@set-library-source-file-name! G29fe@set-library-source-file-name!) (set! G2b6c@G29fc@set-library-visible?! G29fc@set-library-visible?!) (set! G2b6b@G29fa@set-library-invoke-code! G29fa@set-library-invoke-code!) (set! G2b6a@G29f8@set-library-visit-code! G29f8@set-library-visit-code!) (set! G2b69@G29f6@set-library-invoke-state! G29f6@set-library-invoke-state!) (set! G2b68@G29f4@set-library-visit-state! G29f4@set-library-visit-state!) (set! G2b67@G29f2@set-library-env! G29f2@set-library-env!) (set! G2b66@G29f0@set-library-subst! G29f0@set-library-subst!) (set! G2b65@G29ee@set-library-inv*! G29ee@set-library-inv*!) (set! G2b64@G29ec@set-library-vis*! G29ec@set-library-vis*!) (set! G2b63@G29ea@set-library-imp*! G29ea@set-library-imp*!) (set! G2b62@G29e8@set-library-version! G29e8@set-library-version!) (set! G2b61@G29e6@set-library-name! G29e6@set-library-name!) (set! G2b60@G29e4@set-library-id! G29e4@set-library-id!) (set! G2b5f@G29e2@library-source-file-name G29e2@library-source-file-name) (set! G2b5e@G29e0@library-visible? G29e0@library-visible?) (set! G2b5d@G29de@library-invoke-code G29de@library-invoke-code) (set! G2b5c@G29dc@library-visit-code G29dc@library-visit-code) (set! G2b5b@G29da@library-invoke-state G29da@library-invoke-state) (set! G2b5a@G29d8@library-visit-state G29d8@library-visit-state) (set! G2b59@G29d6@library-env G29d6@library-env) (set! G2b58@G29d4@library-subst G29d4@library-subst) (set! G2b57@G29d2@library-inv* G29d2@library-inv*) (set! G2b56@G29d0@library-vis* G29d0@library-vis*) (set! G2b55@G29ce@library-imp* G29ce@library-imp*) (set! G2b54@G29cc@library-version G29cc@library-version) (set! G2b53@G29ca@library-name G29ca@library-name) (set! G2b52@G29c8@library-id G29c8@library-id) (set! G2b51@G29c6@make-library G29c6@make-library) (set! G2b50@G29c4@library? G29c4@library?) (set! G2b4f@G29c1@G29b9 G29c1@G29b9) (set! G2b4e@G29bf@G29ba G29bf@G29ba) (set! G2b4d@G29bd@G29b8 G29bd@G29b8) (set! G2b4c@G29b7@current-library-collection G29b7@current-library-collection) (set! G2b4b@G29b5@make-collection G29b5@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2b8a@build-global-define G2c04@build-lambda G2c06@build-case-lambda G2c08@build-let G2c3a@build-sequence G2c3c@build-void G2c3e@build-letrec G2c40@build-letrec* G2c42@build-library-letrec* G2c44@build-receive) (begin (set! G2b8a@build-global-define (lambda (G2c45@x) (G2c3c@build-void))) (set! G2c04@build-lambda (lambda (G2c47@ae G2c48@vars G2c49@exp) (list 'lambda G2c48@vars G2c49@exp))) (set! G2c06@build-case-lambda (lambda (G2c4d@ae G2c4e@vars* G2c4f@exp*) ((lambda (G2c54@build-error G2c56@build-pred G2c58@build-apply G2c5a@expand-case-lambda) (begin (set! G2c54@build-error (lambda (G2c89@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2c56@build-pred (lambda (G2c73@ae G2c74@n G2c75@vars) (call-with-values (lambda () ((letrec ((G2c7b@f (lambda (G2c7d@vars G2c7e@count) (if (pair? G2c7d@vars) (G2c7b@f (cdr G2c7d@vars) (+ G2c7e@count '1)) (if (null? G2c7d@vars) (values G2c7e@count '=) (values G2c7e@count '>=)))))) G2c7b@f) G2c75@vars '0)) (lambda (G2c81@G2c79 G2c82@G2c7a) ((lambda (G2c85@pred G2c86@count) (list (list 'primitive G2c85@pred) G2c74@n (list 'quote G2c86@count))) G2c82@G2c7a G2c81@G2c79))))) (set! G2c58@build-apply (lambda (G2c6b@ae G2c6c@g G2c6d@vars G2c6e@exp) (list '(primitive apply) (G2c04@build-lambda G2c6b@ae G2c6d@vars G2c6e@exp) G2c6c@g))) (set! G2c5a@expand-case-lambda (lambda (G2c5b@ae G2c5c@vars G2c5d@exp*) ((lambda (G2c61@g G2c62@n) (list 'lambda G2c61@g (G2c08@build-let G2c5b@ae (list G2c62@n) (list (list '(primitive length) G2c61@g)) ((letrec ((G2c65@f (lambda (G2c67@vars* G2c68@exp*) (if (null? G2c67@vars*) (G2c54@build-error G2c5b@ae) (list 'if (G2c56@build-pred G2c5b@ae G2c62@n (car G2c67@vars*)) (G2c58@build-apply G2c5b@ae G2c61@g (car G2c67@vars*) (car G2c68@exp*)) (G2c65@f (cdr G2c67@vars*) (cdr G2c68@exp*))))))) G2c65@f) G2c4e@vars* G2c5d@exp*)))) (gensym) (gensym)))) (if (= (length G2c4f@exp*) '1) (G2c04@build-lambda G2c4d@ae (car G2c4e@vars*) (car G2c4f@exp*)) (G2c5a@expand-case-lambda G2c4d@ae G2c4e@vars* G2c4f@exp*)))) '#f '#f '#f '#f))) (set! G2c08@build-let (lambda (G2c8b@ae G2c8c@lhs* G2c8d@rhs* G2c8e@body) (cons (G2c04@build-lambda G2c8b@ae G2c8c@lhs* G2c8e@body) G2c8d@rhs*))) (set! G2c3a@build-sequence (lambda (G2c93@ae G2c94@exps) ((letrec ((G2c97@loop (lambda (G2c99@exps) (if (null? (cdr G2c99@exps)) (car G2c99@exps) (if (equal? (car G2c99@exps) (G2c3c@build-void)) (G2c97@loop (cdr G2c99@exps)) (cons 'begin G2c99@exps)))))) G2c97@loop) G2c94@exps))) (set! G2c3c@build-void (lambda () '((primitive void)))) (set! G2c3e@build-letrec (lambda (G2c9b@ae G2c9c@vars G2c9d@val-exps G2c9e@body-exp) (if (null? G2c9c@vars) G2c9e@body-exp (list 'letrec (map list G2c9c@vars G2c9d@val-exps) G2c9e@body-exp)))) (set! G2c40@build-letrec* (lambda (G2ca3@ae G2ca4@vars G2ca5@val-exps G2ca6@body-exp) (if (null? G2ca4@vars) G2ca6@body-exp (G2c08@build-let G2ca3@ae G2ca4@vars (map (lambda (G2cab@x) (list 'quote '#f)) G2ca4@vars) (G2c3a@build-sequence G2ca3@ae (append (map (lambda (G2cad@lhs G2cae@rhs) (list 'set! G2cad@lhs G2cae@rhs)) G2ca4@vars G2ca5@val-exps) (list G2ca6@body-exp))))))) (set! G2c42@build-library-letrec* (lambda (G2cb1@ae G2cb2@name G2cb3@vars G2cb4@locs G2cb5@val-exps G2cb6@body-exp) (list 'library-letrec* G2cb2@name (map list G2cb3@vars G2cb4@locs G2cb5@val-exps) G2cb6@body-exp))) (set! G2c44@build-receive (lambda (G2cbd@ae G2cbe@vars G2cbf@producer G2cc0@body*) (begin (display '"************** in ") (cons 'receive (cons G2cbe@vars (cons G2cbf@producer G2cc0@body*)))))) (begin (set! G2cce@G2c44@build-receive G2c44@build-receive) (set! G2ccd@G2c42@build-library-letrec* G2c42@build-library-letrec*) (set! G2ccc@G2c40@build-letrec* G2c40@build-letrec*) (set! G2ccb@G2c3e@build-letrec G2c3e@build-letrec) (set! G2cca@G2c3c@build-void G2c3c@build-void) (set! G2cc9@G2c3a@build-sequence G2c3a@build-sequence) (set! G2cc8@G2c08@build-let G2c08@build-let) (set! G2cc7@G2c06@build-case-lambda G2c06@build-case-lambda) (set! G2cc6@G2c04@build-lambda G2c04@build-lambda) (set! G2cc5@G2b8a@build-global-define G2b8a@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2cdd@set-cons G2cdf@set-union G2ce4@top-mark* G2ce6@top-marked? G2ce8@gen-lexical G2cea@gen-global G2cec@gen-label G2cee@gen-top-level-label G2cf0@gen-define-label+loc G2cf2@gen-define-label G2cf8@G2cf3 G2cfa@G2cf5 G2cfc@G2cf4 G2cff@rib? G2d01@make-rib G2d03@rib-sym* G2d05@rib-mark** G2d07@rib-label* G2d09@rib-sealed/freq G2d0b@rib-cache G2d0d@set-rib-sym*! G2d0f@set-rib-mark**! G2d11@set-rib-label*! G2d13@set-rib-sealed/freq! G2d15@set-rib-cache! G2d17@make-empty-rib G2d19@make-cache-rib G2d1b@find-label G2d1d@extend-rib! G2d1f@extend-rib/nc! G2d21@make-rib-map G2d23@seal-rib! G2d25@unseal-rib! G2d27@make-full-rib G2d2d@G2d28 G2d2f@G2d2a G2d31@G2d29 G2d34@stx? G2d36@make-stx G2d38@stx-expr G2d3a@stx-mark* G2d3c@stx-subst* G2d3e@stx-ae* G2d40@set-stx-expr! G2d42@set-stx-mark*! G2d44@set-stx-subst*! G2d46@set-stx-ae*! G2d48@rp G2d4a@datum->stx G2d4c@gen-mark G2d4e@anti-mark G2d50@anti-mark? G2d52@join-wraps G2d54@mkstx G2d56@add-mark G2d58@add-subst G2d5a@syntax-kind? G2d5c@syntax-vector->list G2d5e@syntax-pair? G2d60@syntax-vector? G2d62@syntax-null? G2d64@syntax-list? G2d66@syntax-car G2d68@syntax-cdr G2d6a@syntax->list G2d6c@id? G2d6e@id->sym G2d70@same-marks? G2d72@bound-id=? G2d74@free-id=? G2d76@valid-bound-ids? G2d78@distinct-bound-ids? G2d7a@bound-id-member? G2d7c@self-evaluating? G2d7e@strip-annotations G2d80@strip G2d82@stx->datum G2d84@same-marks*? G2d86@id->label G2d88@id->real-label G2d8a@label->binding G2d8c@make-binding G2d8e@binding-type G2d90@binding-value G2d92@raise-unbound-error G2d94@syntax-type G2da4@sanitize-binding G2da6@make-variable-transformer G2da8@variable-transformer? G2daa@variable-transformer-procedure G2dac@make-eval-transformer G2eef@parse-define G2ef1@parse-define-syntax G2ef3@scheme-stx-hashtable G2ef5@scheme-stx G2ef7@lexical-var G2ef9@lexical-mutable? G2efb@set-lexical-mutable! G2efd@add-lexical G2eff@add-lexicals G2f01@letrec-helper G2f03@letrec-transformer G2f05@letrec*-transformer G2f07@fluid-let-syntax-transformer G2f09@type-descriptor-transformer G2f0b@record-type-descriptor-transformer G2f0d@record-constructor-descriptor-transformer G2f0f@when-macro G2f11@unless-macro G2f13@if-transformer G2f15@and-transformer G2f17@or-transformer G2f19@case-macro G2f1b@quote-transformer G2f1d@case-lambda-transformer G2f1f@lambda-transformer G2f21@bless G2f23@with-syntax-macro G2f25@invalid-fmls-error G2f27@let-macro G2f29@let-values-macro G2f2b@let*-values-macro G2f2d@trace-lambda-macro G2f2f@trace-define-macro G2f31@trace-define-syntax-macro G2f33@trace-let/rec-syntax G2f35@trace-let-syntax-macro G2f37@trace-letrec-syntax-macro G2f39@guard-macro G2f3b@define-enumeration-macro G2f3d@time-macro G2f3f@delay-macro G2f41@assert-macro G2f43@endianness-macro G2f45@identifier-syntax-macro G2f47@do-macro G2f49@let*-macro G2f4b@or-macro G2f4d@and-macro G2f4f@cond-macro G2f51@do-include G2f53@include-macro G2f55@include-into-macro G2f57@syntax-rules-macro G2f59@quasiquote-macro G2f5b@quasisyntax-macro G2f5d@define-struct-macro G2f5f@define-record-type-macro G2f61@define-condition-type-macro G2f63@incorrect-usage-macro G2f65@parameterize-macro G2f67@foreign-call-transformer G2f69@convert-pattern G2f6b@syntax-dispatch G2f6d@ellipsis? G2f6f@underscore? G2f71@verify-literals G2f73@syntax-case-transformer G2f75@ellipsis-map G2f77@syntax-transformer G2f79@core-macro-transformer G2f7b@file-options-macro G2f7d@symbol-macro G2f7f@macro-transformer G2f81@local-macro-transformer G2f83@do-macro-call G2f85@chi-macro G2f87@chi-local-macro G2f89@chi-global-macro G2f8b@chi-expr* G2f8d@chi-application G2f8f@chi-expr G2f91@chi-set! G2f93@verify-formals G2f95@chi-lambda-clause G2f97@chi-lambda-clause* G2f99@chi-defun G2f9b@chi-rhs G2f9d@expand-interaction-rhs*/init* G2f9f@chi-rhs* G2fa1@find-bound=? G2fa3@find-dups G2fa5@chi-internal G2fa7@parse-module G2fad@G2fa8 G2faf@G2faa G2fb1@G2fa9 G2fb4@module-interface? G2fb6@make-module-interface G2fb8@module-interface-first-mark G2fba@module-interface-exp-id-vec G2fbc@module-interface-exp-lab-vec G2fbe@set-module-interface-first-mark! G2fc0@set-module-interface-exp-id-vec! G2fc2@set-module-interface-exp-lab-vec! G2fc4@module-interface-exp-id* G2fc6@chi-internal-module G2fc8@chi-body* G2fca@expand-transformer G2fcc@parse-exports G2fce@parse-library-name G2fd0@parse-library G2fd2@parse-import-spec* G2fd4@make-top-rib G2fd6@make-collector G2fd8@inv-collector G2fda@vis-collector G2fdc@imp-collector G2fde@chi-library-internal G2fe0@chi-interaction-expr G2fe2@library-body-expander G2fe4@core-library-expander G2fe6@parse-top-level-program G2fe8@top-level-expander G2fee@G2fe9 G2ff0@G2feb G2ff2@G2fea G2ff5@env? G2ff7@make-env G2ff9@env-names G2ffb@env-labels G2ffd@env-itc G2fff@set-env-names! G3001@set-env-labels! G3003@set-env-itc! G3005@rp G300b@G3006 G300d@G3008 G300f@G3007 G3012@interaction-env? G3014@make-interaction-env G3016@interaction-env-rib G3018@interaction-env-r G301a@interaction-env-locs G301c@set-interaction-env-rib! G301e@set-interaction-env-r! G3020@set-interaction-env-locs! G3022@rp G3024@interaction-environment-symbols G3026@environment-bindings G3028@parse-binding G302a@environment? G302c@environment-symbols G302e@environment G3030@null-environment G3032@scheme-report-environment G3034@expand G3036@eval G3038@library-expander G303a@boot-library-expand G303c@rev-map-append G303e@build-exports G3040@make-export-subst G3042@make-export-env/macros G3044@generate-temporaries G3046@free-identifier=? G3048@bound-identifier=? G304a@make-source-condition G304c@extract-position-condition G304e@expression-position G3050@assertion-error G3052@syntax-error G3054@extract-trace G3056@syntax-violation* G3058@syntax-violation G305a@identifier? G305c@datum->syntax G305e@syntax->datum G3060@compile-r6rs-top-level G3062@pre-compile-r6rs-top-level G3064@interaction-environment G3066@top-level-context) (begin (set! G2cdd@set-cons (lambda (G3067@x G3068@ls) (if (memq G3067@x G3068@ls) G3068@ls (cons G3067@x G3068@ls)))) (set! G2cdf@set-union (lambda (G306b@ls1 G306c@ls2) (if (null? G306b@ls1) G306c@ls2 (if (memq (car G306b@ls1) G306c@ls2) (G2cdf@set-union (cdr G306b@ls1) G306c@ls2) (cons (car G306b@ls1) (G2cdf@set-union (cdr G306b@ls1) G306c@ls2)))))) (set! G2ce4@top-mark* '(top)) (set! G2ce6@top-marked? (lambda (G306f@m*) (memq 'top G306f@m*))) (set! G2ce8@gen-lexical (lambda (G3071@sym) (if (symbol? G3071@sym) (gensym G3071@sym) (if (G2d34@stx? G3071@sym) (G2ce8@gen-lexical (G2d6e@id->sym G3071@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3071@sym))))) (set! G2cea@gen-global (lambda (G3073@x) (G2ce8@gen-lexical G3073@x))) (set! G2cec@gen-label (lambda (G3075@_) (gensym))) (set! G2cee@gen-top-level-label (lambda (G3077@id G3078@rib) ((lambda (G307c@find) (begin (set! G307c@find (lambda (G3087@sym G3088@mark* G3089@sym* G308a@mark** G308b@label*) (and (pair? G3089@sym*) (if (and (eq? G3087@sym (car G3089@sym*)) (G2d70@same-marks? G3088@mark* (car G308a@mark**))) (car G308b@label*) (G307c@find G3087@sym G3088@mark* (cdr G3089@sym*) (cdr G308a@mark**) (cdr G308b@label*)))))) ((lambda (G307d@sym G307e@mark*) ((lambda (G3081@sym*) ((lambda (G3083@t) (if G3083@t ((lambda (G3085@label) (if (G2b82@G2a28@imported-label->binding G3085@label) (gensym) G3085@label)) G3083@t) (gensym))) (and (memq G307d@sym (G2d03@rib-sym* G3078@rib)) (G307c@find G307d@sym G307e@mark* G3081@sym* (G2d05@rib-mark** G3078@rib) (G2d07@rib-label* G3078@rib))))) (G2d03@rib-sym* G3078@rib))) (G2d6e@id->sym G3077@id) (G2d3a@stx-mark* G3077@id)))) '#f))) (set! G2cf0@gen-define-label+loc (lambda (G3091@id G3092@rib) ((lambda (G3095@t) (if G3095@t ((lambda (G3097@env) ((lambda (G3099@label G309a@locs) (values G3099@label ((lambda (G309d@t) (if G309d@t (cdr G309d@t) ((lambda (G309f@loc) (begin (G3020@set-interaction-env-locs! G3097@env (cons (cons G3099@label G309f@loc) G309a@locs)) G309f@loc)) (G2ce8@gen-lexical G3091@id)))) (assq G3099@label G309a@locs)))) (G2cee@gen-top-level-label G3091@id G3092@rib) (G301a@interaction-env-locs G3097@env))) G3095@t) (values (gensym) (G2ce8@gen-lexical G3091@id)))) (G3066@top-level-context)))) (set! G2cf2@gen-define-label (lambda (G30a1@id G30a2@rib) (if (G3066@top-level-context) (G2cee@gen-top-level-label G30a1@id G30a2@rib) (gensym)))) (set! G2cf8@G2cf3 (make-record-type-descriptor 'rib '#f 'G2cf6 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2cfa@G2cf5 '#f) (set! G2cfc@G2cf4 (make-record-constructor-descriptor G2cf8@G2cf3 '#f G2cfa@G2cf5)) (set! G2cff@rib? (record-predicate G2cf8@G2cf3)) (set! G2d01@make-rib (record-constructor G2cfc@G2cf4)) (set! G2d03@rib-sym* (record-accessor G2cf8@G2cf3 '0)) (set! G2d05@rib-mark** (record-accessor G2cf8@G2cf3 '1)) (set! G2d07@rib-label* (record-accessor G2cf8@G2cf3 '2)) (set! G2d09@rib-sealed/freq (record-accessor G2cf8@G2cf3 '3)) (set! G2d0b@rib-cache (record-accessor G2cf8@G2cf3 '4)) (set! G2d0d@set-rib-sym*! (record-mutator G2cf8@G2cf3 '0)) (set! G2d0f@set-rib-mark**! (record-mutator G2cf8@G2cf3 '1)) (set! G2d11@set-rib-label*! (record-mutator G2cf8@G2cf3 '2)) (set! G2d13@set-rib-sealed/freq! (record-mutator G2cf8@G2cf3 '3)) (set! G2d15@set-rib-cache! (record-mutator G2cf8@G2cf3 '4)) (set! G2d17@make-empty-rib (lambda () (G2d01@make-rib '() '() '() '#f '#f))) (set! G2d19@make-cache-rib (lambda () (G2d01@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2d1b@find-label (lambda (G30a5@rib G30a6@sym G30a7@mark*) ((lambda (G30ab@ht) (and G30ab@ht ((lambda (G30ad@cv) ((lambda (G30af@t) (if G30af@t (cdr G30af@t) '#f)) (and G30ad@cv (assp (lambda (G30b1@m) (G2d70@same-marks? G30a7@mark* G30b1@m)) G30ad@cv)))) (hashtable-ref G30ab@ht G30a6@sym '#f)))) (G2d0b@rib-cache G30a5@rib)))) (set! G2d1d@extend-rib! (lambda (G30b3@rib G30b4@id G30b5@label) ((lambda (G30ba@find) (begin (set! G30ba@find (lambda (G30cb@sym G30cc@mark* G30cd@sym* G30ce@mark** G30cf@label*) (and (pair? G30cd@sym*) (if (and (eq? G30cb@sym (car G30cd@sym*)) (G2d70@same-marks? G30cc@mark* (car G30ce@mark**))) G30cf@label* (G30ba@find G30cb@sym G30cc@mark* (cdr G30cd@sym*) (cdr G30ce@mark**) (cdr G30cf@label*)))))) (begin (if (G2d09@rib-sealed/freq G30b3@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G30b3@rib) (void)) ((lambda (G30bb@sym G30bc@mark*) ((lambda (G30bf@sym*) ((lambda (G30c1@t) (if G30c1@t ((lambda (G30c3@p) (if (not (eq? G30b5@label G30c3@p)) (G3058@syntax-violation '#f '"multiple definitions of identifier" G30b4@id) (void))) G30c1@t) ((lambda (G30c5@t) (if G30c5@t ((lambda (G30c7@p) (if (not (eq? G30b5@label (car G30c7@p))) (if (G3066@top-level-context) (set-car! G30c7@p G30b5@label) (G3058@syntax-violation '#f '"multiple definitions of identifier" G30b4@id)) (void))) G30c5@t) (begin (if (G2d0b@rib-cache G30b3@rib) (hashtable-update! (G2d0b@rib-cache G30b3@rib) G30bb@sym (lambda (G30c9@e) (cons (cons G30bc@mark* G30b5@label) G30c9@e)) '()) (void)) (G2d0d@set-rib-sym*! G30b3@rib (cons G30bb@sym G30bf@sym*)) (G2d0f@set-rib-mark**! G30b3@rib (cons G30bc@mark* (G2d05@rib-mark** G30b3@rib))) (G2d11@set-rib-label*! G30b3@rib (cons G30b5@label (G2d07@rib-label* G30b3@rib)))))) (and (memq G30bb@sym (G2d03@rib-sym* G30b3@rib)) (G30ba@find G30bb@sym G30bc@mark* G30bf@sym* (G2d05@rib-mark** G30b3@rib) (G2d07@rib-label* G30b3@rib)))))) (G2d1b@find-label G30b3@rib G30bb@sym G30bc@mark*))) (G2d03@rib-sym* G30b3@rib))) (G2d6e@id->sym G30b4@id) (G2d3a@stx-mark* G30b4@id))))) '#f))) (set! G2d1f@extend-rib/nc! (lambda (G30d5@rib G30d6@id G30d7@label) ((lambda (G30db@sym G30dc@mark*) ((lambda (G30df@sym*) (begin (if (G2d0b@rib-cache G30d5@rib) (hashtable-update! (G2d0b@rib-cache G30d5@rib) G30db@sym (lambda (G30e1@e) (cons (cons G30dc@mark* G30d7@label) G30e1@e)) '()) (void)) (G2d0d@set-rib-sym*! G30d5@rib (cons G30db@sym G30df@sym*)) (G2d0f@set-rib-mark**! G30d5@rib (cons G30dc@mark* (G2d05@rib-mark** G30d5@rib))) (G2d11@set-rib-label*! G30d5@rib (cons G30d7@label (G2d07@rib-label* G30d5@rib))))) (G2d03@rib-sym* G30d5@rib))) (G2d6e@id->sym G30d6@id) (G2d3a@stx-mark* G30d6@id)))) (set! G2d21@make-rib-map (lambda (G30e3@sym*) ((lambda (G30e5@ht) ((letrec ((G30e7@f (lambda (G30e9@i G30ea@sym*) (if (null? G30ea@sym*) G30e5@ht (begin (hashtable-update! G30e5@ht (car G30ea@sym*) (lambda (G30ed@x) (cons G30e9@i G30ed@x)) '()) (G30e7@f (+ G30e9@i '1) (cdr G30ea@sym*))))))) G30e7@f) '0 G30e3@sym*)) (make-eq-hashtable)))) (set! G2d23@seal-rib! (lambda (G30ef@rib) ((lambda (G30f1@sym*) (if (not (null? G30f1@sym*)) (begin (G2d0d@set-rib-sym*! G30ef@rib (list->vector G30f1@sym*)) (G2d0f@set-rib-mark**! G30ef@rib (list->vector (G2d05@rib-mark** G30ef@rib))) (G2d11@set-rib-label*! G30ef@rib (list->vector (G2d07@rib-label* G30ef@rib))) (G2d13@set-rib-sealed/freq! G30ef@rib (G2d21@make-rib-map G30f1@sym*))) (void))) (G2d03@rib-sym* G30ef@rib)))) (set! G2d25@unseal-rib! (lambda (G30f3@rib) (if (G2d09@rib-sealed/freq G30f3@rib) (begin (G2d13@set-rib-sealed/freq! G30f3@rib '#f) (G2d0d@set-rib-sym*! G30f3@rib (vector->list (G2d03@rib-sym* G30f3@rib))) (G2d0f@set-rib-mark**! G30f3@rib (vector->list (G2d05@rib-mark** G30f3@rib))) (G2d11@set-rib-label*! G30f3@rib (vector->list (G2d07@rib-label* G30f3@rib)))) (void)))) (set! G2d27@make-full-rib (lambda (G30f5@id* G30f6@label*) ((lambda (G30f9@r) (begin (G2d23@seal-rib! G30f9@r) G30f9@r)) (G2d01@make-rib (map G2d6e@id->sym G30f5@id*) (map G2d3a@stx-mark* G30f5@id*) G30f6@label* '#f '#f)))) (set! G2d2d@G2d28 (make-record-type-descriptor 'stx '#f 'G2d2b '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2d2f@G2d2a '#f) (set! G2d31@G2d29 (make-record-constructor-descriptor G2d2d@G2d28 '#f G2d2f@G2d2a)) (set! G2d34@stx? (record-predicate G2d2d@G2d28)) (set! G2d36@make-stx (record-constructor G2d31@G2d29)) (set! G2d38@stx-expr (record-accessor G2d2d@G2d28 '0)) (set! G2d3a@stx-mark* (record-accessor G2d2d@G2d28 '1)) (set! G2d3c@stx-subst* (record-accessor G2d2d@G2d28 '2)) (set! G2d3e@stx-ae* (record-accessor G2d2d@G2d28 '3)) (set! G2d40@set-stx-expr! (record-mutator G2d2d@G2d28 '0)) (set! G2d42@set-stx-mark*! (record-mutator G2d2d@G2d28 '1)) (set! G2d44@set-stx-subst*! (record-mutator G2d2d@G2d28 '2)) (set! G2d46@set-stx-ae*! (record-mutator G2d2d@G2d28 '3)) (set! G2d48@rp (G2905@G2838@make-record-printer 'stx (lambda (G30fb@x G30fc@p G30fd@wr) (begin (display '"#<syntax " G30fc@p) (write (G2d82@stx->datum G30fb@x) G30fc@p) ((lambda (G3101@expr) (if (G28fd@G2828@annotation? G3101@expr) ((lambda (G3103@src) (if (pair? G3103@src) (begin (display '" [" G30fc@p) (display (cdr G3103@src) G30fc@p) (display '" of " G30fc@p) (display (car G3103@src) G30fc@p) (display '"]" G30fc@p)) (void))) (G28fe@G282a@annotation-source G3101@expr)) (void))) (G2d38@stx-expr G30fb@x)) (display '">" G30fc@p))))) (set! G2d4a@datum->stx (lambda (G3105@id G3106@datum) (G2d36@make-stx G3106@datum (G2d3a@stx-mark* G3105@id) (G2d3c@stx-subst* G3105@id) (G2d3e@stx-ae* G3105@id)))) (set! G2d4c@gen-mark (lambda () (string '#\m))) (set! G2d4e@anti-mark '#f) (set! G2d50@anti-mark? not) (set! G2d52@join-wraps (lambda (G3109@m1* G310a@s1* G310b@ae1* G310c@e) ((lambda (G3112@cancel) (begin (set! G3112@cancel (lambda (G3119@ls1 G311a@ls2) ((letrec ((G311d@f (lambda (G311f@x G3120@ls1) (if (null? G3120@ls1) (cdr G311a@ls2) (cons G311f@x (G311d@f (car G3120@ls1) (cdr G3120@ls1))))))) G311d@f) (car G3119@ls1) (cdr G3119@ls1)))) ((lambda (G3113@m2* G3114@s2* G3115@ae2*) (if (and (not (null? G3109@m1*)) (not (null? G3113@m2*)) (G2d50@anti-mark? (car G3113@m2*))) (values (G3112@cancel G3109@m1* G3113@m2*) (G3112@cancel G310a@s1* G3114@s2*) (G3112@cancel G310b@ae1* G3115@ae2*)) (values (append G3109@m1* G3113@m2*) (append G310a@s1* G3114@s2*) (append G310b@ae1* G3115@ae2*)))) (G2d3a@stx-mark* G310c@e) (G2d3c@stx-subst* G310c@e) (G2d3e@stx-ae* G310c@e)))) '#f))) (set! G2d54@mkstx (lambda (G3123@e G3124@m* G3125@s* G3126@ae*) (if (and (G2d34@stx? G3123@e) (not (G2ce6@top-marked? G3124@m*))) (call-with-values (lambda () (G2d52@join-wraps G3124@m* G3125@s* G3126@ae* G3123@e)) (lambda (G312e@G312b G312f@G312c G3130@G312d) ((lambda (G3134@ae* G3135@s* G3136@m*) (G2d36@make-stx (G2d38@stx-expr G3123@e) G3136@m* G3135@s* G3134@ae*)) G3130@G312d G312f@G312c G312e@G312b))) (G2d36@make-stx G3123@e G3124@m* G3125@s* G3126@ae*)))) (set! G2d56@add-mark (lambda (G313a@m G313b@e G313c@ae) (G2d54@mkstx G313b@e (list G313a@m) '(shift) (list G313c@ae)))) (set! G2d58@add-subst (lambda (G3140@subst G3141@e) (G2d54@mkstx G3141@e '() (list G3140@subst) '()))) (set! G2d5a@syntax-kind? (lambda (G3144@x G3145@p?) (if (G2d34@stx? G3144@x) (G2d5a@syntax-kind? (G2d38@stx-expr G3144@x) G3145@p?) (if (G28fd@G2828@annotation? G3144@x) (G2d5a@syntax-kind? (G28ff@G282c@annotation-expression G3144@x) G3145@p?) (G3145@p? G3144@x))))) (set! G2d5c@syntax-vector->list (lambda (G3148@x) (if (G2d34@stx? G3148@x) ((lambda (G314a@ls G314b@m* G314c@s* G314d@ae*) (map (lambda (G3152@x) (G2d54@mkstx G3152@x G314b@m* G314c@s* G314d@ae*)) G314a@ls)) (G2d5c@syntax-vector->list (G2d38@stx-expr G3148@x)) (G2d3a@stx-mark* G3148@x) (G2d3c@stx-subst* G3148@x) (G2d3e@stx-ae* G3148@x)) (if (G28fd@G2828@annotation? G3148@x) (G2d5c@syntax-vector->list (G28ff@G282c@annotation-expression G3148@x)) (if (vector? G3148@x) (vector->list G3148@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G3148@x)))))) (set! G2d5e@syntax-pair? (lambda (G3154@x) (G2d5a@syntax-kind? G3154@x pair?))) (set! G2d60@syntax-vector? (lambda (G3156@x) (G2d5a@syntax-kind? G3156@x vector?))) (set! G2d62@syntax-null? (lambda (G3158@x) (G2d5a@syntax-kind? G3158@x null?))) (set! G2d64@syntax-list? (lambda (G315a@x) (or (G2d62@syntax-null? G315a@x) (and (G2d5e@syntax-pair? G315a@x) (G2d64@syntax-list? (G2d68@syntax-cdr G315a@x)))))) (set! G2d66@syntax-car (lambda (G315c@x) (if (G2d34@stx? G315c@x) (G2d54@mkstx (G2d66@syntax-car (G2d38@stx-expr G315c@x)) (G2d3a@stx-mark* G315c@x) (G2d3c@stx-subst* G315c@x) (G2d3e@stx-ae* G315c@x)) (if (G28fd@G2828@annotation? G315c@x) (G2d66@syntax-car (G28ff@G282c@annotation-expression G315c@x)) (if (pair? G315c@x) (car G315c@x) (assertion-violation 'syntax-car '"BUG: not a pair" G315c@x)))))) (set! G2d68@syntax-cdr (lambda (G315e@x) (if (G2d34@stx? G315e@x) (G2d54@mkstx (G2d68@syntax-cdr (G2d38@stx-expr G315e@x)) (G2d3a@stx-mark* G315e@x) (G2d3c@stx-subst* G315e@x) (G2d3e@stx-ae* G315e@x)) (if (G28fd@G2828@annotation? G315e@x) (G2d68@syntax-cdr (G28ff@G282c@annotation-expression G315e@x)) (if (pair? G315e@x) (cdr G315e@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G315e@x)))))) (set! G2d6a@syntax->list (lambda (G3160@x) (if (G2d5e@syntax-pair? G3160@x) (cons (G2d66@syntax-car G3160@x) (G2d6a@syntax->list (G2d68@syntax-cdr G3160@x))) (if (G2d62@syntax-null? G3160@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3160@x))))) (set! G2d6c@id? (lambda (G3162@x) (and (G2d34@stx? G3162@x) ((lambda (G3164@expr) (symbol? (if (G28fd@G2828@annotation? G3164@expr) (G28fc@G2826@annotation-stripped G3164@expr) G3164@expr))) (G2d38@stx-expr G3162@x))))) (set! G2d6e@id->sym (lambda (G3166@x) (begin (if (not (G2d34@stx? G3166@x)) (error 'id->sym '"BUG in ikarus: not an id" G3166@x) (void)) ((lambda (G3168@expr) ((lambda (G316a@sym) (if (symbol? G316a@sym) G316a@sym (error 'id->sym '"BUG in ikarus: not an id" G3166@x))) (if (G28fd@G2828@annotation? G3168@expr) (G28fc@G2826@annotation-stripped G3168@expr) G3168@expr))) (G2d38@stx-expr G3166@x))))) (set! G2d70@same-marks? (lambda (G316c@x G316d@y) (or (and (null? G316c@x) (null? G316d@y)) (and (pair? G316c@x) (pair? G316d@y) (eq? (car G316c@x) (car G316d@y)) (G2d70@same-marks? (cdr G316c@x) (cdr G316d@y)))))) (set! G2d72@bound-id=? (lambda (G3170@x G3171@y) (and (eq? (G2d6e@id->sym G3170@x) (G2d6e@id->sym G3171@y)) (G2d70@same-marks? (G2d3a@stx-mark* G3170@x) (G2d3a@stx-mark* G3171@y))))) (set! G2d74@free-id=? (lambda (G3174@i G3175@j) ((lambda (G3178@t0 G3179@t1) (if (or G3178@t0 G3179@t1) (eq? G3178@t0 G3179@t1) (eq? (G2d6e@id->sym G3174@i) (G2d6e@id->sym G3175@j)))) (G2d88@id->real-label G3174@i) (G2d88@id->real-label G3175@j)))) (set! G2d76@valid-bound-ids? (lambda (G317c@id*) (and (for-all G2d6c@id? G317c@id*) (G2d78@distinct-bound-ids? G317c@id*)))) (set! G2d78@distinct-bound-ids? (lambda (G317e@id*) (or (null? G317e@id*) (and (not (G2d7a@bound-id-member? (car G317e@id*) (cdr G317e@id*))) (G2d78@distinct-bound-ids? (cdr G317e@id*)))))) (set! G2d7a@bound-id-member? (lambda (G3180@id G3181@id*) (and (pair? G3181@id*) (or (G2d72@bound-id=? G3180@id (car G3181@id*)) (G2d7a@bound-id-member? G3180@id (cdr G3181@id*)))))) (set! G2d7c@self-evaluating? (lambda (G3184@x) (or (number? G3184@x) (string? G3184@x) (char? G3184@x) (boolean? G3184@x) (regexp? G3184@x) (bytevector? G3184@x)))) (set! G2d7e@strip-annotations (lambda (G3186@x) (if (pair? G3186@x) (cons (G2d7e@strip-annotations (car G3186@x)) (G2d7e@strip-annotations (cdr G3186@x))) (if (vector? G3186@x) (vector-map G2d7e@strip-annotations G3186@x) (if (G28fd@G2828@annotation? G3186@x) (G28fc@G2826@annotation-stripped G3186@x) G3186@x))))) (set! G2d80@strip (lambda (G3188@x G3189@m*) (if (G2ce6@top-marked? G3189@m*) (if (or (G28fd@G2828@annotation? G3188@x) (and (pair? G3188@x) (G28fd@G2828@annotation? (car G3188@x))) (and (vector? G3188@x) (> (vector-length G3188@x) '0) (G28fd@G2828@annotation? (vector-ref G3188@x '0)))) (G2d7e@strip-annotations G3188@x) G3188@x) ((letrec ((G318c@f (lambda (G318e@x) (if (G2d34@stx? G318e@x) (G2d80@strip (G2d38@stx-expr G318e@x) (G2d3a@stx-mark* G318e@x)) (if (G28fd@G2828@annotation? G318e@x) (G28fc@G2826@annotation-stripped G318e@x) (if (pair? G318e@x) ((lambda (G3190@a G3191@d) (if (and (eq? G3190@a (car G318e@x)) (eq? G3191@d (cdr G318e@x))) G318e@x (cons G3190@a G3191@d))) (G318c@f (car G318e@x)) (G318c@f (cdr G318e@x))) (if (vector? G318e@x) ((lambda (G3194@old) ((lambda (G3196@new) (if (for-all eq? G3194@old G3196@new) G318e@x (list->vector G3196@new))) (map G318c@f G3194@old))) (vector->list G318e@x)) G318e@x))))))) G318c@f) G3188@x)))) (set! G2d82@stx->datum (lambda (G3198@x) (G2d80@strip G3198@x '()))) (set! G2d84@same-marks*? (lambda (G319a@mark* G319b@mark** G319c@si) (if (null? G319c@si) '#f (if (G2d70@same-marks? G319a@mark* (vector-ref G319b@mark** (car G319c@si))) (car G319c@si) (G2d84@same-marks*? G319a@mark* G319b@mark** (cdr G319c@si)))))) (set! G2d86@id->label (lambda (G31a0@id) (or (G2d88@id->real-label G31a0@id) ((lambda (G31a2@t) (if G31a2@t ((lambda (G31a4@env) ((lambda (G31a6@rib) (call-with-values (lambda () (G2cf0@gen-define-label+loc G31a0@id G31a6@rib)) (lambda (G31aa@G31a8 G31ab@G31a9) ((lambda (G31ae@loc_ G31af@lab) (begin (G2d1d@extend-rib! G31a6@rib G31a0@id G31af@lab) G31af@lab)) G31ab@G31a9 G31aa@G31a8)))) (G3016@interaction-env-rib G31a4@env))) G31a2@t) '#f)) (G3066@top-level-context))))) (set! G2d88@id->real-label (lambda (G31b2@id) ((lambda (G31b4@sym) ((letrec ((G31b6@search (lambda (G31b8@subst* G31b9@mark*) (if (null? G31b8@subst*) '#f (if (eq? (car G31b8@subst*) 'shift) (G31b6@search (cdr G31b8@subst*) (cdr G31b9@mark*)) ((lambda (G31bc@rib) ((lambda (G31be@t) (if G31be@t ((lambda (G31c0@ht) ((lambda (G31c2@si) ((lambda (G31c4@i) (if G31c4@i (vector-ref (G2d07@rib-label* G31bc@rib) G31c4@i) (G31b6@search (cdr G31b8@subst*) G31b9@mark*))) (and G31c2@si (G2d84@same-marks*? G31b9@mark* (G2d05@rib-mark** G31bc@rib) (reverse G31c2@si))))) (hashtable-ref G31c0@ht G31b4@sym '#f))) G31be@t) (or (G2d1b@find-label G31bc@rib G31b4@sym G31b9@mark*) ((letrec ((G31c6@f (lambda (G31c8@sym* G31c9@mark** G31ca@label*) (if (null? G31c8@sym*) (G31b6@search (cdr G31b8@subst*) G31b9@mark*) (if (and (eq? (car G31c8@sym*) G31b4@sym) (G2d70@same-marks? (car G31c9@mark**) G31b9@mark*)) (car G31ca@label*) (G31c6@f (cdr G31c8@sym*) (cdr G31c9@mark**) (cdr G31ca@label*))))))) G31c6@f) (G2d03@rib-sym* G31bc@rib) (G2d05@rib-mark** G31bc@rib) (G2d07@rib-label* G31bc@rib))))) (G2d09@rib-sealed/freq G31bc@rib))) (car G31b8@subst*))))))) G31b6@search) (G2d3c@stx-subst* G31b2@id) (G2d3a@stx-mark* G31b2@id))) (G2d6e@id->sym G31b2@id)))) (set! G2d8a@label->binding (lambda (G31ce@x G31cf@r) ((lambda (G31d2@t) (if G31d2@t ((lambda (G31d4@b) (if (and (pair? G31d4@b) (eq? (car G31d4@b) '$core-rtd)) (cons '$rtd (map G2f21@bless (cdr G31d4@b))) (if (and (pair? G31d4@b) (eq? (car G31d4@b) 'global-rtd)) ((lambda (G31d6@lib G31d7@loc) (cons '$rtd (symbol-value G31d7@loc))) (cadr G31d4@b) (cddr G31d4@b)) G31d4@b))) G31d2@t) ((lambda (G31da@t) (if G31da@t (cdr G31da@t) ((lambda (G31dc@t) (if G31dc@t ((lambda (G31de@env) ((lambda (G31e0@t) (if G31e0@t ((lambda (G31e2@p) (cons* 'lexical (cdr G31e2@p) '#f)) G31e0@t) '(displaced-lexical . #f))) (assq G31ce@x (G301a@interaction-env-locs G31de@env)))) G31dc@t) '(displaced-lexical . #f))) (G3066@top-level-context)))) (assq G31ce@x G31cf@r)))) (G2b82@G2a28@imported-label->binding G31ce@x)))) (set! G2d8c@make-binding cons) (set! G2d8e@binding-type car) (set! G2d90@binding-value cdr) (set! G2d92@raise-unbound-error (lambda (G31e4@id) (G3056@syntax-violation* '#f '"unbound identifier" G31e4@id (G4cae@G4af8@make-undefined-violation)))) (set! G2d94@syntax-type (lambda (G31e6@e G31e7@r) (if (G2d6c@id? G31e6@e) ((lambda (G31ea@id) ((lambda (G31ec@label) ((lambda (G31ee@b) ((lambda (G31f0@type) ((lambda () (begin (if (not G31ec@label) (G2d92@raise-unbound-error G31ea@id) (void)) ((lambda (G31f2@t) (if (memv G31f2@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G31f0@type (G2d90@binding-value G31ee@b) G31ea@id) (values 'other '#f '#f))) G31f0@type))))) (G2d8e@binding-type G31ee@b))) (G2d8a@label->binding G31ec@label G31e7@r))) (G2d86@id->label G31ea@id))) G31e6@e) (if (G2d5e@syntax-pair? G31e6@e) ((lambda (G31f4@id) (if (G2d6c@id? G31f4@id) ((lambda (G31f6@label) ((lambda (G31f8@b) ((lambda (G31fa@type) ((lambda () (begin (if (not G31f6@label) (G2d92@raise-unbound-error G31f4@id) (void)) ((lambda (G31fc@t) (if (memv G31fc@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G31fa@type (G2d90@binding-value G31f8@b) G31f4@id) (values 'call '#f '#f))) G31fa@type))))) (G2d8e@binding-type G31f8@b))) (G2d8a@label->binding G31f6@label G31e7@r))) (G2d86@id->label G31f4@id)) (values 'call '#f '#f))) (G2d66@syntax-car G31e6@e)) ((lambda (G31fe@d) (if (G2d7c@self-evaluating? G31fe@d) (values 'constant G31fe@d '#f) (values 'other '#f '#f))) (G2d82@stx->datum G31e6@e)))))) (set! G2da4@sanitize-binding (lambda (G3200@x G3201@src) (if (procedure? G3200@x) (cons* 'local-macro G3200@x G3201@src) (if (and (pair? G3200@x) (eq? (car G3200@x) 'macro!) (procedure? (cdr G3200@x))) (cons* 'local-macro! (cdr G3200@x) G3201@src) (if (and (pair? G3200@x) (eq? (car G3200@x) '$rtd)) G3200@x (assertion-violation 'expand '"invalid transformer" G3200@x)))))) (set! G2da6@make-variable-transformer (lambda (G3204@x) (if (procedure? G3204@x) (cons 'macro! G3204@x) (assertion-violation 'make-variable-transformer '"not a procedure" G3204@x)))) (set! G2da8@variable-transformer? (lambda (G3206@x) (and (pair? G3206@x) (eq? (car G3206@x) 'macro!) (procedure? (cdr G3206@x))))) (set! G2daa@variable-transformer-procedure (lambda (G3208@x) (if (G2da8@variable-transformer? G3208@x) (cdr G3208@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G3208@x)))) (set! G2dac@make-eval-transformer (lambda (G320a@x) (G2da4@sanitize-binding (eval-core (G295c@G2914@expanded->core G320a@x)) G320a@x))) (set! G2eef@parse-define (lambda (G320c@x) ((lambda (G320e@t) ((lambda (G3210@ls/false) (if (and G3210@ls/false (apply (lambda (G3212@id G3213@fmls G3214@b G3215@b*) (G2d6c@id? G3212@id)) G3210@ls/false)) (apply (lambda (G321a@id G321b@fmls G321c@b G321d@b*) (begin (G2f93@verify-formals G321b@fmls G320c@x) (values G321a@id (cons 'defun (cons G321b@fmls (cons G321c@b G321d@b*)))))) G3210@ls/false) ((lambda (G3222@t) ((lambda (G3224@ls/false) (if (and G3224@ls/false (apply (lambda (G3226@id G3227@val) (G2d6c@id? G3226@id)) G3224@ls/false)) (apply (lambda (G322a@id G322b@val) (values G322a@id (cons 'expr G322b@val))) G3224@ls/false) ((lambda (G322e@t) ((lambda (G3230@ls/false) (if (and G3230@ls/false (apply (lambda (G3232@id) (G2d6c@id? G3232@id)) G3230@ls/false)) (apply (lambda (G3234@id) (values G3234@id (cons 'expr (G2f21@bless '(void))))) G3230@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G322e@t))) (G2f6b@syntax-dispatch G322e@t '(_ any)))) G3222@t))) (G2f6b@syntax-dispatch G3222@t '(_ any any)))) G320e@t))) (G2f6b@syntax-dispatch G320e@t '(_ (any . any) any . each-any)))) G320c@x))) (set! G2ef1@parse-define-syntax (lambda (G3236@x) ((lambda (G3238@t) ((lambda (G323a@ls/false) (if (and G323a@ls/false (apply (lambda (G323c@id G323d@val) (G2d6c@id? G323c@id)) G323a@ls/false)) (apply (lambda (G3240@id G3241@val) (values G3240@id G3241@val)) G323a@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3238@t))) (G2f6b@syntax-dispatch G3238@t '(_ any any)))) G3236@x))) (set! G2ef3@scheme-stx-hashtable (make-eq-hashtable)) (set! G2ef5@scheme-stx (lambda (G3244@sym) (or (hashtable-ref G2ef3@scheme-stx-hashtable G3244@sym '#f) ((lambda (G3246@subst) ((lambda (G3248@stx) ((lambda (G324a@stx) ((lambda () (begin (hashtable-set! G2ef3@scheme-stx-hashtable G3244@sym G324a@stx) G324a@stx)))) ((lambda (G324c@t) (if G324c@t ((lambda (G324e@x) ((lambda (G3250@name G3251@label) (G2d58@add-subst (G2d01@make-rib (list G3250@name) (list G2ce4@top-mark*) (list G3251@label) '#f '#f) G3248@stx)) (car G324e@x) (cdr G324e@x))) G324c@t) G3248@stx)) (assq G3244@sym G3246@subst)))) (G2d36@make-stx G3244@sym G2ce4@top-mark* '() '()))) (G2b58@G29d4@library-subst (G2b7c@G2a1c@find-library-by-name '(psyntax system $all))))))) (set! G2ef7@lexical-var car) (set! G2ef9@lexical-mutable? cdr) (set! G2efb@set-lexical-mutable! set-cdr!) (set! G2efd@add-lexical (lambda (G3254@lab G3255@lex G3256@r) (cons (cons* G3254@lab 'lexical G3255@lex '#f) G3256@r))) (set! G2eff@add-lexicals (lambda (G325a@lab* G325b@lex* G325c@r) (if (null? G325a@lab*) G325c@r (G2eff@add-lexicals (cdr G325a@lab*) (cdr G325b@lex*) (G2efd@add-lexical (car G325a@lab*) (car G325b@lex*) G325c@r))))) (set! G2f01@letrec-helper (lambda (G3260@e G3261@r G3262@mr G3263@build) ((lambda (G3268@t) ((lambda (G326a@ls/false) (if G326a@ls/false (apply (lambda (G326c@lhs* G326d@rhs* G326e@b G326f@b*) (if (not (G2d76@valid-bound-ids? G326c@lhs*)) (G2f25@invalid-fmls-error G3260@e G326c@lhs*) ((lambda (G3274@lex* G3275@lab*) ((lambda (G3278@rib G3279@r) ((lambda (G327c@body G327d@rhs*) (G3263@build '#f G3274@lex* G327d@rhs* G327c@body)) (G2fa5@chi-internal (G2d58@add-subst G3278@rib (cons G326e@b G326f@b*)) G3279@r G3262@mr) (G2f8b@chi-expr* (map (lambda (G3280@x) (G2d58@add-subst G3278@rib G3280@x)) G326d@rhs*) G3279@r G3262@mr))) (G2d27@make-full-rib G326c@lhs* G3275@lab*) (G2eff@add-lexicals G3275@lab* G3274@lex* G3261@r))) (map G2ce8@gen-lexical G326c@lhs*) (map G2cec@gen-label G326c@lhs*)))) G326a@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3268@t))) (G2f6b@syntax-dispatch G3268@t '(_ #(each (any any)) any . each-any)))) G3260@e))) (set! G2f03@letrec-transformer (lambda (G3282@e G3283@r G3284@mr) (G2f01@letrec-helper G3282@e G3283@r G3284@mr G2ccb@G2c3e@build-letrec))) (set! G2f05@letrec*-transformer (lambda (G3288@e G3289@r G328a@mr) (G2f01@letrec-helper G3288@e G3289@r G328a@mr G2ccc@G2c40@build-letrec*))) (set! G2f07@fluid-let-syntax-transformer (lambda (G328e@e G328f@r G3290@mr) ((lambda (G3295@lookup) (begin (set! G3295@lookup (lambda (G32a8@x) (or (G2d86@id->label G32a8@x) (G3058@syntax-violation '#f '"unbound identifier" G328e@e G32a8@x)))) ((lambda (G3296@t) ((lambda (G3298@ls/false) (if G3298@ls/false (apply (lambda (G329a@lhs* G329b@rhs* G329c@b G329d@b*) (if (not (G2d76@valid-bound-ids? G329a@lhs*)) (G2f25@invalid-fmls-error G328e@e G329a@lhs*) ((lambda (G32a2@lab* G32a3@rhs*) (G2fa5@chi-internal (cons G329c@b G329d@b*) (append (map cons G32a2@lab* G32a3@rhs*) G328f@r) (append (map cons G32a2@lab* G32a3@rhs*) G3290@mr))) (map G3295@lookup G329a@lhs*) (map (lambda (G32a6@x) (G2dac@make-eval-transformer (G2fca@expand-transformer G32a6@x G3290@mr))) G329b@rhs*)))) G3298@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3296@t))) (G2f6b@syntax-dispatch G3296@t '(_ #(each (any any)) any . each-any)))) G328e@e))) '#f))) (set! G2f09@type-descriptor-transformer (lambda (G32aa@e G32ab@r G32ac@mr) ((lambda (G32b0@t) ((lambda (G32b2@ls/false) (if (and G32b2@ls/false (apply (lambda (G32b4@id) (G2d6c@id? G32b4@id)) G32b2@ls/false)) (apply (lambda (G32b6@id) ((lambda (G32b8@lab) ((lambda (G32ba@b) ((lambda (G32bc@type) ((lambda () (begin (if (not G32b8@lab) (G2d92@raise-unbound-error G32b6@id) (void)) (if (not (and (eq? G32bc@type '$rtd) (not (list? (G2d90@binding-value G32ba@b))))) (G3058@syntax-violation '#f '"not a record type" G32aa@e) (void)) (list 'quote (G2d90@binding-value G32ba@b)))))) (G2d8e@binding-type G32ba@b))) (G2d8a@label->binding G32b8@lab G32ab@r))) (G2d86@id->label G32b6@id))) G32b2@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G32b0@t))) (G2f6b@syntax-dispatch G32b0@t '(_ any)))) G32aa@e))) (set! G2f0b@record-type-descriptor-transformer (lambda (G32be@e G32bf@r G32c0@mr) ((lambda (G32c4@t) ((lambda (G32c6@ls/false) (if (and G32c6@ls/false (apply (lambda (G32c8@id) (G2d6c@id? G32c8@id)) G32c6@ls/false)) (apply (lambda (G32ca@id) ((lambda (G32cc@lab) ((lambda (G32ce@b) ((lambda (G32d0@type) ((lambda () (begin (if (not G32cc@lab) (G2d92@raise-unbound-error G32ca@id) (void)) (if (not (and (eq? G32d0@type '$rtd) (list? (G2d90@binding-value G32ce@b)))) (G3058@syntax-violation '#f '"not a record type" G32be@e) (void)) (G2f8f@chi-expr (car (G2d90@binding-value G32ce@b)) G32bf@r G32c0@mr))))) (G2d8e@binding-type G32ce@b))) (G2d8a@label->binding G32cc@lab G32bf@r))) (G2d86@id->label G32ca@id))) G32c6@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G32c4@t))) (G2f6b@syntax-dispatch G32c4@t '(_ any)))) G32be@e))) (set! G2f0d@record-constructor-descriptor-transformer (lambda (G32d2@e G32d3@r G32d4@mr) ((lambda (G32d8@t) ((lambda (G32da@ls/false) (if (and G32da@ls/false (apply (lambda (G32dc@id) (G2d6c@id? G32dc@id)) G32da@ls/false)) (apply (lambda (G32de@id) ((lambda (G32e0@lab) ((lambda (G32e2@b) ((lambda (G32e4@type) ((lambda () (begin (if (not G32e0@lab) (G2d92@raise-unbound-error G32de@id) (void)) (if (not (and (eq? G32e4@type '$rtd) (list? (G2d90@binding-value G32e2@b)))) (G3058@syntax-violation '#f '"invalid type" G32d2@e) (void)) (G2f8f@chi-expr (cadr (G2d90@binding-value G32e2@b)) G32d3@r G32d4@mr))))) (G2d8e@binding-type G32e2@b))) (G2d8a@label->binding G32e0@lab G32d3@r))) (G2d86@id->label G32de@id))) G32da@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G32d8@t))) (G2f6b@syntax-dispatch G32d8@t '(_ any)))) G32d2@e))) (set! G2f0f@when-macro (lambda (G32e6@e) ((lambda (G32e8@t) ((lambda (G32ea@ls/false) (if G32ea@ls/false (apply (lambda (G32ec@test G32ed@e G32ee@e*) (G2f21@bless (list 'if G32ec@test (cons 'begin (cons G32ed@e G32ee@e*))))) G32ea@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G32e8@t))) (G2f6b@syntax-dispatch G32e8@t '(_ any any . each-any)))) G32e6@e))) (set! G2f11@unless-macro (lambda (G32f2@e) ((lambda (G32f4@t) ((lambda (G32f6@ls/false) (if G32f6@ls/false (apply (lambda (G32f8@test G32f9@e G32fa@e*) (G2f21@bless (list 'if (list 'not G32f8@test) (cons 'begin (cons G32f9@e G32fa@e*))))) G32f6@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G32f4@t))) (G2f6b@syntax-dispatch G32f4@t '(_ any any . each-any)))) G32f2@e))) (set! G2f13@if-transformer (lambda (G32fe@e G32ff@r G3300@mr) ((lambda (G3304@t) ((lambda (G3306@ls/false) (if G3306@ls/false (apply (lambda (G3308@e0 G3309@e1 G330a@e2) (list 'if (G2f8f@chi-expr G3308@e0 G32ff@r G3300@mr) (G2f8f@chi-expr G3309@e1 G32ff@r G3300@mr) (G2f8f@chi-expr G330a@e2 G32ff@r G3300@mr))) G3306@ls/false) ((lambda (G330e@t) ((lambda (G3310@ls/false) (if G3310@ls/false (apply (lambda (G3312@e0 G3313@e1) (list 'if (G2f8f@chi-expr G3312@e0 G32ff@r G3300@mr) (G2f8f@chi-expr G3313@e1 G32ff@r G3300@mr) (G2cca@G2c3c@build-void))) G3310@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G330e@t))) (G2f6b@syntax-dispatch G330e@t '(_ any any)))) G3304@t))) (G2f6b@syntax-dispatch G3304@t '(_ any any any)))) G32fe@e))) (set! G2f15@and-transformer (lambda (G3316@e G3317@r G3318@mr) ((lambda (G331c@t) ((lambda (G331e@ls/false) (if G331e@ls/false (apply (lambda (G3320@e*) (cons 'and (G2f8b@chi-expr* G3320@e* G3317@r G3318@mr))) G331e@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G331c@t))) (G2f6b@syntax-dispatch G331c@t '(_ . each-any)))) G3316@e))) (set! G2f17@or-transformer (lambda (G3322@e G3323@r G3324@mr) ((lambda (G3328@t) ((lambda (G332a@ls/false) (if G332a@ls/false (apply (lambda (G332c@e*) (cons 'or (G2f8b@chi-expr* G332c@e* G3323@r G3324@mr))) G332a@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3328@t))) (G2f6b@syntax-dispatch G3328@t '(_ . each-any)))) G3322@e))) (set! G2f19@case-macro (lambda (G332e@e) ((lambda (G3331@build-last G3333@build-one) (begin (set! G3331@build-last (lambda (G3358@cls) ((lambda (G335a@t) ((lambda (G335c@ls/false) (if G335c@ls/false (apply (lambda (G335e@e G335f@e*) (cons 'begin (cons G335e@e G335f@e*))) G335c@ls/false) ((lambda (G3362@t) ((lambda (G3364@ls/false) (if G3364@ls/false (apply (lambda () (G3333@build-one G3358@cls '(if #f #f))) G3364@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3362@t))) (G2f6b@syntax-dispatch G3362@t '_))) G335a@t))) (G2f6b@syntax-dispatch G335a@t '(#(scheme-id else) any . each-any)))) G3358@cls))) (set! G3333@build-one (lambda (G334a@cls G334b@k) ((lambda (G334e@t) ((lambda (G3350@ls/false) (if G3350@ls/false (apply (lambda (G3352@d* G3353@e G3354@e*) (list 'if (list 'memv 't (list 'quote G3352@d*)) (cons 'begin (cons G3353@e G3354@e*)) G334b@k)) G3350@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G334e@t))) (G2f6b@syntax-dispatch G334e@t '(each-any any . each-any)))) G334a@cls))) ((lambda (G3334@t) ((lambda (G3336@ls/false) (if G3336@ls/false (apply (lambda (G3338@expr) (G2f21@bless (cons 'let (cons (list (list 't G3338@expr)) '((if #f #f)))))) G3336@ls/false) ((lambda (G333a@t) ((lambda (G333c@ls/false) (if G333c@ls/false (apply (lambda (G333e@expr G333f@cls G3340@cls*) (G2f21@bless (list 'let (list (list 't G333e@expr)) ((letrec ((G3344@f (lambda (G3346@cls G3347@cls*) (if (null? G3347@cls*) (G3331@build-last G3346@cls) (G3333@build-one G3346@cls (G3344@f (car G3347@cls*) (cdr G3347@cls*))))))) G3344@f) G333f@cls G3340@cls*)))) G333c@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G333a@t))) (G2f6b@syntax-dispatch G333a@t '(_ any any . each-any)))) G3334@t))) (G2f6b@syntax-dispatch G3334@t '(_ any)))) G332e@e))) '#f '#f))) (set! G2f1b@quote-transformer (lambda (G3366@e G3367@r G3368@mr) ((lambda (G336c@t) ((lambda (G336e@ls/false) (if G336e@ls/false (apply (lambda (G3370@datum) (list 'quote (G2d82@stx->datum G3370@datum))) G336e@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G336c@t))) (G2f6b@syntax-dispatch G336c@t '(_ any)))) G3366@e))) (set! G2f1d@case-lambda-transformer (lambda (G3372@e G3373@r G3374@mr) ((lambda (G3378@t) ((lambda (G337a@ls/false) (if G337a@ls/false (apply (lambda (G337c@fmls* G337d@b* G337e@b**) (call-with-values (lambda () (G2f97@chi-lambda-clause* G3372@e G337c@fmls* (map cons G337d@b* G337e@b**) G3373@r G3374@mr)) (lambda (G3384@G3382 G3385@G3383) ((lambda (G3388@body* G3389@fmls*) (G2cc7@G2c06@build-case-lambda '#f G3389@fmls* G3388@body*)) G3385@G3383 G3384@G3382)))) G337a@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3378@t))) (G2f6b@syntax-dispatch G3378@t '(_ . #(each (any any . each-any)))))) G3372@e))) (set! G2f1f@lambda-transformer (lambda (G338c@e G338d@r G338e@mr) ((lambda (G3392@t) ((lambda (G3394@ls/false) (if G3394@ls/false (apply (lambda (G3396@fmls G3397@b G3398@b*) (call-with-values (lambda () (G2f95@chi-lambda-clause G338c@e G3396@fmls (cons G3397@b G3398@b*) G338d@r G338e@mr)) (lambda (G339e@G339c G339f@G339d) ((lambda (G33a2@body G33a3@fmls) (G2cc6@G2c04@build-lambda '#f G33a3@fmls G33a2@body)) G339f@G339d G339e@G339c)))) G3394@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3392@t))) (G2f6b@syntax-dispatch G3392@t '(_ any any . each-any)))) G338c@e))) (set! G2f21@bless (lambda (G33a6@x) (G2d54@mkstx ((letrec ((G33a8@f (lambda (G33aa@x) (if (G2d34@stx? G33aa@x) G33aa@x (if (pair? G33aa@x) (cons (G33a8@f (car G33aa@x)) (G33a8@f (cdr G33aa@x))) (if (symbol? G33aa@x) (G2ef5@scheme-stx G33aa@x) (if (vector? G33aa@x) (vector-map G33a8@f G33aa@x) G33aa@x))))))) G33a8@f) G33a6@x) '() '() '()))) (set! G2f23@with-syntax-macro (lambda (G33ac@e) ((lambda (G33ae@t) ((lambda (G33b0@ls/false) (if G33b0@ls/false (apply (lambda (G33b2@pat* G33b3@expr* G33b4@b G33b5@b*) ((lambda (G33ba@idn*) (begin (G2f93@verify-formals (map car G33ba@idn*) G33ac@e) ((lambda (G33bc@t*) (G2f21@bless (list 'let (map list G33bc@t* G33b3@expr*) ((letrec ((G33be@f (lambda (G33c0@pat* G33c1@t*) (if (null? G33c0@pat*) (cons 'begin (cons '#f (cons G33b4@b G33b5@b*))) (list 'syntax-case (car G33c1@t*) '() (list (car G33c0@pat*) (G33be@f (cdr G33c0@pat*) (cdr G33c1@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G33c0@pat*)) (car G33c1@t*)))))))) G33be@f) G33b2@pat* G33bc@t*)))) (G3044@generate-temporaries G33b3@expr*)))) ((letrec ((G33c4@f (lambda (G33c6@pat*) (if (null? G33c6@pat*) '() (call-with-values (lambda () (G2f69@convert-pattern (car G33c6@pat*) '())) (lambda (G33ca@G33c8 G33cb@G33c9) ((lambda (G33ce@idn* G33cf@pat) (append G33ce@idn* (G33c4@f (cdr G33c6@pat*)))) G33cb@G33c9 G33ca@G33c8))))))) G33c4@f) G33b2@pat*))) G33b0@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G33ae@t))) (G2f6b@syntax-dispatch G33ae@t '(_ #(each (any any)) any . each-any)))) G33ac@e))) (set! G2f25@invalid-fmls-error (lambda (G33d2@stx G33d3@fmls) ((lambda (G33d6@t) ((lambda (G33d8@ls/false) (if G33d8@ls/false (apply (lambda (G33da@id* G33db@last) ((letrec ((G33de@f (lambda (G33e0@id*) (if (null? G33e0@id*) (values) (if (not (G2d6c@id? (car G33e0@id*))) (G3058@syntax-violation '#f '"not an identifier" G33d2@stx (car G33e0@id*)) (begin (G33de@f (cdr G33e0@id*)) (if (G2d7a@bound-id-member? (car G33e0@id*) (cdr G33e0@id*)) (G3058@syntax-violation '#f '"duplicate binding" G33d2@stx (car G33e0@id*)) (void)))))))) G33de@f) (if (G2d6c@id? G33db@last) (cons G33db@last G33da@id*) (if (G2d62@syntax-null? G33db@last) G33da@id* (G3058@syntax-violation '#f '"not an identifier" G33d2@stx G33db@last))))) G33d8@ls/false) ((lambda (G33e2@t) ((lambda (G33e4@ls/false) (if G33e4@ls/false (apply (lambda () (G3058@syntax-violation '#f '"malformed binding form" G33d2@stx G33d3@fmls)) G33e4@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G33e2@t))) (G2f6b@syntax-dispatch G33e2@t '_))) G33d6@t))) (G2f6b@syntax-dispatch G33d6@t '#(each+ any () any)))) G33d3@fmls))) (set! G2f27@let-macro (lambda (G33e6@stx) ((lambda (G33e8@t) ((lambda (G33ea@ls/false) (if G33ea@ls/false (apply (lambda (G33ec@lhs* G33ed@rhs* G33ee@b G33ef@b*) (if (G2d76@valid-bound-ids? G33ec@lhs*) (G2f21@bless (cons (cons 'lambda (cons G33ec@lhs* (cons G33ee@b G33ef@b*))) G33ed@rhs*)) (G2f25@invalid-fmls-error G33e6@stx G33ec@lhs*))) G33ea@ls/false) ((lambda (G33f4@t) ((lambda (G33f6@ls/false) (if (and G33f6@ls/false (apply (lambda (G33f8@f G33f9@lhs* G33fa@rhs* G33fb@b G33fc@b*) (G2d6c@id? G33f8@f)) G33f6@ls/false)) (apply (lambda (G3402@f G3403@lhs* G3404@rhs* G3405@b G3406@b*) (if (G2d76@valid-bound-ids? G3403@lhs*) (G2f21@bless (cons (list 'letrec (list (list G3402@f (cons 'lambda (cons G3403@lhs* (cons G3405@b G3406@b*))))) G3402@f) G3404@rhs*)) (G2f25@invalid-fmls-error G33e6@stx G3403@lhs*))) G33f6@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G33f4@t))) (G2f6b@syntax-dispatch G33f4@t '(_ any #(each (any any)) any . each-any)))) G33e8@t))) (G2f6b@syntax-dispatch G33e8@t '(_ #(each (any any)) any . each-any)))) G33e6@stx))) (set! G2f29@let-values-macro (lambda (G340c@stx) ((lambda (G340f@rename G3411@rename*) (begin (set! G340f@rename (lambda (G3471@x G3472@old* G3473@new*) (begin (if (not (G2d6c@id? G3471@x)) (G3058@syntax-violation '#f '"not an indentifier" G340c@stx G3471@x) (void)) (if (G2d7a@bound-id-member? G3471@x G3472@old*) (G3058@syntax-violation '#f '"duplicate binding" G340c@stx G3471@x) (void)) ((lambda (G3477@y) (values G3477@y (cons G3471@x G3472@old*) (cons G3477@y G3473@new*))) (gensym (G305e@syntax->datum G3471@x)))))) (set! G3411@rename* (lambda (G345f@x* G3460@old* G3461@new*) (if (null? G345f@x*) (values '() G3460@old* G3461@new*) (call-with-values (lambda () (G340f@rename (car G345f@x*) G3460@old* G3461@new*)) (lambda (G3465@x G3466@old* G3467@new*) (call-with-values (lambda () (G3411@rename* (cdr G345f@x*) G3466@old* G3467@new*)) (lambda (G346b@x* G346c@old* G346d@new*) (values (cons G3465@x G346b@x*) G346c@old* G346d@new*)))))))) ((lambda (G3412@t) ((lambda (G3414@ls/false) (if G3414@ls/false (apply (lambda (G3416@b G3417@b*) (cons* (G2f21@bless 'let) '() G3416@b G3417@b*)) G3414@ls/false) ((lambda (G341a@t) ((lambda (G341c@ls/false) (if G341c@ls/false (apply (lambda (G341e@lhs* G341f@rhs* G3420@b G3421@b*) (G2f21@bless ((letrec ((G3426@f (lambda (G3428@lhs* G3429@rhs* G342a@old* G342b@new*) (if (null? G3428@lhs*) (cons 'let (cons (map list G342a@old* G342b@new*) (cons G3420@b G3421@b*))) ((lambda (G3430@t) ((lambda (G3432@ls/false) (if G3432@ls/false (apply (lambda (G3434@x*) (call-with-values (lambda () (G3411@rename* G3434@x* G342a@old* G342b@new*)) (lambda (G3439@G3436 G343a@G3437 G343b@G3438) ((lambda (G343f@new* G3440@old* G3441@y*) (list 'call-with-values (list 'lambda '() (car G3429@rhs*)) (list 'lambda G3441@y* (G3426@f (cdr G3428@lhs*) (cdr G3429@rhs*) G3440@old* G343f@new*)))) G343b@G3438 G343a@G3437 G3439@G3436)))) G3432@ls/false) ((lambda (G3445@t) ((lambda (G3447@ls/false) (if G3447@ls/false (apply (lambda (G3449@x* G344a@x) (call-with-values (lambda () (G340f@rename G344a@x G342a@old* G342b@new*)) (lambda (G344d@y G344e@old* G344f@new*) (call-with-values (lambda () (G3411@rename* G3449@x* G344e@old* G344f@new*)) (lambda (G3453@y* G3454@old* G3455@new*) (list 'call-with-values (list 'lambda '() (car G3429@rhs*)) (list 'lambda (append G3453@y* G344d@y) (G3426@f (cdr G3428@lhs*) (cdr G3429@rhs*) G3454@old* G3455@new*)))))))) G3447@ls/false) ((lambda (G3459@t) ((lambda (G345b@ls/false) (if G345b@ls/false (apply (lambda (G345d@others) (G3058@syntax-violation '#f '"malformed bindings" G340c@stx G345d@others)) G345b@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3459@t))) (G2f6b@syntax-dispatch G3459@t 'any))) G3445@t))) (G2f6b@syntax-dispatch G3445@t '#(each+ any () any)))) G3430@t))) (G2f6b@syntax-dispatch G3430@t 'each-any))) (car G3428@lhs*)))))) G3426@f) G341e@lhs* G341f@rhs* '() '()))) G341c@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G341a@t))) (G2f6b@syntax-dispatch G341a@t '(_ #(each (any any)) any . each-any)))) G3412@t))) (G2f6b@syntax-dispatch G3412@t '(_ () any . each-any)))) G340c@stx))) '#f '#f))) (set! G2f2b@let*-values-macro (lambda (G3479@stx) ((lambda (G347c@check) (begin (set! G347c@check (lambda (G34ab@x*) (if (not (null? G34ab@x*)) ((lambda (G34ad@x) (begin (if (not (G2d6c@id? G34ad@x)) (G3058@syntax-violation '#f '"not an identifier" G3479@stx G34ad@x) (void)) (G347c@check (cdr G34ab@x*)) (if (G2d7a@bound-id-member? G34ad@x (cdr G34ab@x*)) (G3058@syntax-violation '#f '"duplicate identifier" G3479@stx G34ad@x) (void)))) (car G34ab@x*)) (void)))) ((lambda (G347d@t) ((lambda (G347f@ls/false) (if G347f@ls/false (apply (lambda (G3481@b G3482@b*) (cons* (G2f21@bless 'let) '() G3481@b G3482@b*)) G347f@ls/false) ((lambda (G3485@t) ((lambda (G3487@ls/false) (if G3487@ls/false (apply (lambda (G3489@lhs* G348a@rhs* G348b@b G348c@b*) (G2f21@bless ((letrec ((G3491@f (lambda (G3493@lhs* G3494@rhs*) (if (null? G3493@lhs*) (cons 'begin (cons G348b@b G348c@b*)) ((lambda (G3497@t) ((lambda (G3499@ls/false) (if G3499@ls/false (apply (lambda (G349b@x*) (begin (G347c@check G349b@x*) (list 'call-with-values (list 'lambda '() (car G3494@rhs*)) (list 'lambda G349b@x* (G3491@f (cdr G3493@lhs*) (cdr G3494@rhs*)))))) G3499@ls/false) ((lambda (G349d@t) ((lambda (G349f@ls/false) (if G349f@ls/false (apply (lambda (G34a1@x* G34a2@x) (begin (G347c@check (cons G34a2@x G34a1@x*)) (list 'call-with-values (list 'lambda '() (car G3494@rhs*)) (list 'lambda (append G34a1@x* G34a2@x) (G3491@f (cdr G3493@lhs*) (cdr G3494@rhs*)))))) G349f@ls/false) ((lambda (G34a5@t) ((lambda (G34a7@ls/false) (if G34a7@ls/false (apply (lambda (G34a9@others) (G3058@syntax-violation '#f '"malformed bindings" G3479@stx G34a9@others)) G34a7@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G34a5@t))) (G2f6b@syntax-dispatch G34a5@t 'any))) G349d@t))) (G2f6b@syntax-dispatch G349d@t '#(each+ any () any)))) G3497@t))) (G2f6b@syntax-dispatch G3497@t 'each-any))) (car G3493@lhs*)))))) G3491@f) G3489@lhs* G348a@rhs*))) G3487@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3485@t))) (G2f6b@syntax-dispatch G3485@t '(_ #(each (any any)) any . each-any)))) G347d@t))) (G2f6b@syntax-dispatch G347d@t '(_ () any . each-any)))) G3479@stx))) '#f))) (set! G2f2d@trace-lambda-macro (lambda (G34af@stx) ((lambda (G34b1@t) ((lambda (G34b3@ls/false) (if G34b3@ls/false (apply (lambda (G34b5@who G34b6@fmls G34b7@b G34b8@b*) (if (G2d76@valid-bound-ids? G34b6@fmls) (G2f21@bless (list 'make-traced-procedure (list 'quote G34b5@who) (cons 'lambda (cons G34b6@fmls (cons G34b7@b G34b8@b*))))) (G2f25@invalid-fmls-error G34af@stx G34b6@fmls))) G34b3@ls/false) ((lambda (G34bd@t) ((lambda (G34bf@ls/false) (if G34bf@ls/false (apply (lambda (G34c1@who G34c2@fmls G34c3@last G34c4@b G34c5@b*) (if (G2d76@valid-bound-ids? (cons G34c3@last G34c2@fmls)) (G2f21@bless (list 'make-traced-procedure (list 'quote G34c1@who) (cons 'lambda (cons (append G34c2@fmls G34c3@last) (cons G34c4@b G34c5@b*))))) (G2f25@invalid-fmls-error G34af@stx (append G34c2@fmls G34c3@last)))) G34bf@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G34bd@t))) (G2f6b@syntax-dispatch G34bd@t '(_ any #(each+ any () any) any . each-any)))) G34b1@t))) (G2f6b@syntax-dispatch G34b1@t '(_ any each-any any . each-any)))) G34af@stx))) (set! G2f2f@trace-define-macro (lambda (G34cb@stx) ((lambda (G34cd@t) ((lambda (G34cf@ls/false) (if G34cf@ls/false (apply (lambda (G34d1@who G34d2@fmls G34d3@b G34d4@b*) (if (G2d76@valid-bound-ids? G34d2@fmls) (G2f21@bless (list 'define G34d1@who (list 'make-traced-procedure (list 'quote G34d1@who) (cons 'lambda (cons G34d2@fmls (cons G34d3@b G34d4@b*)))))) (G2f25@invalid-fmls-error G34cb@stx G34d2@fmls))) G34cf@ls/false) ((lambda (G34d9@t) ((lambda (G34db@ls/false) (if G34db@ls/false (apply (lambda (G34dd@who G34de@fmls G34df@last G34e0@b G34e1@b*) (if (G2d76@valid-bound-ids? (cons G34df@last G34de@fmls)) (G2f21@bless (list 'define G34dd@who (list 'make-traced-procedure (list 'quote G34dd@who) (cons 'lambda (cons (append G34de@fmls G34df@last) (cons G34e0@b G34e1@b*)))))) (G2f25@invalid-fmls-error G34cb@stx (append G34de@fmls G34df@last)))) G34db@ls/false) ((lambda (G34e7@t) ((lambda (G34e9@ls/false) (if G34e9@ls/false (apply (lambda (G34eb@who G34ec@expr) (if (G2d6c@id? G34eb@who) (G2f21@bless (list 'define G34eb@who (list 'let (list (list 'v G34ec@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G34eb@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G3058@syntax-violation '#f '"invalid name" G34cb@stx))) G34e9@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G34e7@t))) (G2f6b@syntax-dispatch G34e7@t '(_ any any)))) G34d9@t))) (G2f6b@syntax-dispatch G34d9@t '(_ (any . #(each+ any () any)) any . each-any)))) G34cd@t))) (G2f6b@syntax-dispatch G34cd@t '(_ (any . each-any) any . each-any)))) G34cb@stx))) (set! G2f31@trace-define-syntax-macro (lambda (G34ef@stx) ((lambda (G34f1@t) ((lambda (G34f3@ls/false) (if G34f3@ls/false (apply (lambda (G34f5@who G34f6@expr) (if (G2d6c@id? G34f5@who) (G2f21@bless (list 'define-syntax G34f5@who (list 'make-traced-macro (list 'quote G34f5@who) G34f6@expr))) (G3058@syntax-violation '#f '"invalid name" G34ef@stx))) G34f3@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G34f1@t))) (G2f6b@syntax-dispatch G34f1@t '(_ any any)))) G34ef@stx))) (set! G2f33@trace-let/rec-syntax (lambda (G34f9@who) (lambda (G34fb@stx) ((lambda (G34fd@t) ((lambda (G34ff@ls/false) (if G34ff@ls/false (apply (lambda (G3501@lhs* G3502@rhs* G3503@b G3504@b*) (if (G2d76@valid-bound-ids? G3501@lhs*) ((lambda (G3509@rhs*) (G2f21@bless (cons G34f9@who (cons (map list G3501@lhs* G3509@rhs*) (cons G3503@b G3504@b*))))) (map (lambda (G350b@lhs G350c@rhs) (list 'make-traced-macro (list 'quote G350b@lhs) G350c@rhs)) G3501@lhs* G3502@rhs*)) (G2f25@invalid-fmls-error G34fb@stx G3501@lhs*))) G34ff@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G34fd@t))) (G2f6b@syntax-dispatch G34fd@t '(_ #(each (any any)) any . each-any)))) G34fb@stx)))) (set! G2f35@trace-let-syntax-macro (G2f33@trace-let/rec-syntax 'let-syntax)) (set! G2f37@trace-letrec-syntax-macro (G2f33@trace-let/rec-syntax 'letrec-syntax)) (set! G2f39@guard-macro (lambda (G350f@x) ((lambda (G3512@gen-clauses) (begin (set! G3512@gen-clauses (lambda (G3529@con G352a@outerk G352b@clause*) ((lambda (G3530@f G3532@f*) (begin (set! G3530@f (lambda (G3565@x G3566@k) ((lambda (G3569@t) ((lambda (G356b@ls/false) (if G356b@ls/false (apply (lambda (G356d@e G356e@p) ((lambda (G3571@t) (list 'let (list (list G3571@t G356d@e)) (list 'if G3571@t (list G356e@p G3571@t) G3566@k))) (gensym))) G356b@ls/false) ((lambda (G3573@t) ((lambda (G3575@ls/false) (if G3575@ls/false (apply (lambda (G3577@e) ((lambda (G3579@t) (list 'let (list (list G3579@t G3577@e)) (list 'if G3579@t G3579@t G3566@k))) (gensym))) G3575@ls/false) ((lambda (G357b@t) ((lambda (G357d@ls/false) (if G357d@ls/false (apply (lambda (G357f@e G3580@v G3581@v*) (list 'if G357f@e (cons 'begin (cons G3580@v G3581@v*)) G3566@k)) G357d@ls/false) ((lambda (G3585@t) ((lambda (G3587@ls/false) (if G3587@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid guard clause" G3565@x)) G3587@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3585@t))) (G2f6b@syntax-dispatch G3585@t '_))) G357b@t))) (G2f6b@syntax-dispatch G357b@t '(any any . each-any)))) G3573@t))) (G2f6b@syntax-dispatch G3573@t '(any)))) G3569@t))) (G2f6b@syntax-dispatch G3569@t '(any #(scheme-id =>) any)))) G3565@x))) (set! G3532@f* (lambda (G353d@x*) ((lambda (G353f@t) ((lambda (G3541@ls/false) (if G3541@ls/false (apply (lambda () ((lambda (G3543@g) (values (list G3543@g (list 'lambda '() (list 'raise-continuable G3529@con))) G3543@g)) (gensym))) G3541@ls/false) ((lambda (G3545@t) ((lambda (G3547@ls/false) (if G3547@ls/false (apply (lambda (G3549@e G354a@e*) (values (cons 'begin (cons G3549@e G354a@e*)) '#f)) G3547@ls/false) ((lambda (G354d@t) ((lambda (G354f@ls/false) (if G354f@ls/false (apply (lambda (G3551@cls G3552@cls*) (call-with-values (lambda () (G3532@f* G3552@cls*)) (lambda (G3557@G3555 G3558@G3556) ((lambda (G355b@g G355c@e) (values (G3530@f G3551@cls G355c@e) G355b@g)) G3558@G3556 G3557@G3555)))) G354f@ls/false) ((lambda (G355f@t) ((lambda (G3561@ls/false) (if G3561@ls/false (apply (lambda (G3563@others) (G3058@syntax-violation '#f '"invalid guard clause" G3563@others)) G3561@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G355f@t))) (G2f6b@syntax-dispatch G355f@t 'any))) G354d@t))) (G2f6b@syntax-dispatch G354d@t '(any . any)))) G3545@t))) (G2f6b@syntax-dispatch G3545@t '((#(scheme-id else) any . each-any))))) G353f@t))) (G2f6b@syntax-dispatch G353f@t '()))) G353d@x*))) (call-with-values (lambda () (G3532@f* G352b@clause*)) (lambda (G3535@G3533 G3536@G3534) ((lambda (G3539@raisek G353a@code) (if G3539@raisek (list (list 'call/cc (list 'lambda (list G3539@raisek) (list G352a@outerk (list 'lambda '() G353a@code))))) (list G352a@outerk (list 'lambda '() G353a@code)))) G3536@G3534 G3535@G3533))))) '#f '#f))) ((lambda (G3513@t) ((lambda (G3515@ls/false) (if (and G3515@ls/false (apply (lambda (G3517@con G3518@clause* G3519@b G351a@b*) (G2d6c@id? G3517@con)) G3515@ls/false)) (apply (lambda (G351f@con G3520@clause* G3521@b G3522@b*) ((lambda (G3527@outerk) (G2f21@bless (list (list 'call/cc (list 'lambda (list G3527@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list G351f@con) (G3512@gen-clauses G351f@con G3527@outerk G3520@clause*)) (cons 'lambda (cons '() (cons '#f (cons G3521@b G3522@b*))))))))))) (gensym))) G3515@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3513@t))) (G2f6b@syntax-dispatch G3513@t '(_ (any . each-any) any . each-any)))) G350f@x))) '#f))) (set! G2f3b@define-enumeration-macro (lambda (G3589@stx) ((lambda (G358c@set? G358e@remove-dups) (begin (set! G358c@set? (lambda (G35a5@x) (or (null? G35a5@x) (and (not (memq (car G35a5@x) (cdr G35a5@x))) (G358c@set? (cdr G35a5@x)))))) (set! G358e@remove-dups (lambda (G35a3@ls) (if (null? G35a3@ls) '() (cons (car G35a3@ls) (G358e@remove-dups (remq (car G35a3@ls) (cdr G35a3@ls))))))) ((lambda (G358f@t) ((lambda (G3591@ls/false) (if (and G3591@ls/false (apply (lambda (G3593@name G3594@id* G3595@maker) (and (G2d6c@id? G3593@name) (G2d6c@id? G3595@maker) (for-all G2d6c@id? G3594@id*))) G3591@ls/false)) (apply (lambda (G3599@name G359a@id* G359b@maker) ((lambda (G359f@name* G35a0@mk) (G2f21@bless (list 'begin (list 'define G35a0@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G359f@name*)))) (list 'define-syntax G3599@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G359f@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G3599@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G359b@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G359b@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G359f@name*)) (cons 'syntax-violation (cons (list 'quote G359b@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G35a0@mk '('(n* ...)))))))))))) (G358e@remove-dups (G305e@syntax->datum G359a@id*)) (gensym))) G3591@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G358f@t))) (G2f6b@syntax-dispatch G358f@t '(_ any each-any any)))) G3589@stx))) '#f '#f))) (set! G2f3d@time-macro (lambda (G35a7@stx) ((lambda (G35a9@t) ((lambda (G35ab@ls/false) (if G35ab@ls/false (apply (lambda (G35ad@expr) ((lambda (G35af@str) (G2f21@bless (list 'time-it G35af@str (list 'lambda '() G35ad@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G35b3@G35b1 G35b4@G35b2) ((lambda (G35b7@e G35b8@p) (begin (write (G305e@syntax->datum G35ad@expr) G35b8@p) (G35b7@e))) G35b4@G35b2 G35b3@G35b1))))) G35ab@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G35a9@t))) (G2f6b@syntax-dispatch G35a9@t '(_ any)))) G35a7@stx))) (set! G2f3f@delay-macro (lambda (G35bb@stx) ((lambda (G35bd@t) ((lambda (G35bf@ls/false) (if G35bf@ls/false (apply (lambda (G35c1@expr) (G2f21@bless (list 'make-promise (list 'lambda '() G35c1@expr)))) G35bf@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G35bd@t))) (G2f6b@syntax-dispatch G35bd@t '(_ any)))) G35bb@stx))) (set! G2f41@assert-macro (lambda (G35c3@stx) ((lambda (G35c5@t) ((lambda (G35c7@ls/false) (if G35c7@ls/false (apply (lambda (G35c9@expr) ((lambda (G35cb@pos) (G2f21@bless (list 'unless G35c9@expr (list 'assertion-error (list 'quote G35c9@expr) (list 'quote G35cb@pos))))) (or (G304e@expression-position G35c3@stx) (G304e@expression-position G35c9@expr)))) G35c7@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G35c5@t))) (G2f6b@syntax-dispatch G35c5@t '(_ any)))) G35c3@stx))) (set! G2f43@endianness-macro (lambda (G35cd@stx) ((lambda (G35cf@t) ((lambda (G35d1@ls/false) (if G35d1@ls/false (apply (lambda (G35d3@e) ((lambda (G35d5@t) (if (memv G35d5@t '(little)) (G2f21@bless ''little) (if (memv G35d5@t '(big)) (G2f21@bless ''big) (G3058@syntax-violation '#f '"endianness must be big or little" G35cd@stx)))) (G305e@syntax->datum G35d3@e))) G35d1@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G35cf@t))) (G2f6b@syntax-dispatch G35cf@t '(_ any)))) G35cd@stx))) (set! G2f45@identifier-syntax-macro (lambda (G35d7@stx) ((lambda (G35d9@t) ((lambda (G35db@ls/false) (if G35db@ls/false (apply (lambda (G35dd@expr) (G2f21@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G35dd@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G35dd@expr) '((syntax (e* ...)))))))))) G35db@ls/false) ((lambda (G35df@t) ((lambda (G35e1@ls/false) (if (and G35e1@ls/false (apply (lambda (G35e3@id1 G35e4@expr1 G35e5@id2 G35e6@expr2 G35e7@expr3) (and (G2d6c@id? G35e3@id1) (G2d6c@id? G35e5@id2) (G2d6c@id? G35e6@expr2))) G35e1@ls/false)) (apply (lambda (G35ed@id1 G35ee@expr1 G35ef@id2 G35f0@expr2 G35f1@expr3) (G2f21@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G35ee@expr1)) (list (list 'set! 'id G35f0@expr2) (list 'syntax G35f1@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G35ee@expr1 '(e* ...))))))))) G35e1@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G35df@t))) (G2f6b@syntax-dispatch G35df@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G35d9@t))) (G2f6b@syntax-dispatch G35d9@t '(_ any)))) G35d7@stx))) (set! G2f47@do-macro (lambda (G35f7@stx) ((lambda (G35fa@bind) (begin (set! G35fa@bind (lambda (G3611@x) ((lambda (G3613@t) ((lambda (G3615@ls/false) (if G3615@ls/false (apply (lambda (G3617@x G3618@init) (list G3617@x G3618@init G3617@x)) G3615@ls/false) ((lambda (G361b@t) ((lambda (G361d@ls/false) (if G361d@ls/false (apply (lambda (G361f@x G3620@init G3621@step) (list G361f@x G3620@init G3621@step)) G361d@ls/false) ((lambda (G3625@t) ((lambda (G3627@ls/false) (if G3627@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid binding" G35f7@stx)) G3627@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3625@t))) (G2f6b@syntax-dispatch G3625@t '_))) G361b@t))) (G2f6b@syntax-dispatch G361b@t '(any any any)))) G3613@t))) (G2f6b@syntax-dispatch G3613@t '(any any)))) G3611@x))) ((lambda (G35fb@t) ((lambda (G35fd@ls/false) (if G35fd@ls/false (apply (lambda (G35ff@binding* G3600@test G3601@expr* G3602@command*) ((lambda (G3607@t) ((lambda (G3609@ls/false) (if G3609@ls/false (apply (lambda (G360b@x* G360c@init* G360d@step*) (if (G2d76@valid-bound-ids? G360b@x*) (G2f21@bless (list 'letrec (list (list 'loop (list 'lambda G360b@x* (list 'if G3600@test (cons 'begin (cons '(if #f #f) G3601@expr*)) (cons 'begin (append G3602@command* (list (cons 'loop G360d@step*)))))))) (cons 'loop G360c@init*))) (G3058@syntax-violation '#f '"invalid bindings" G35f7@stx))) G3609@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3607@t))) (G2f6b@syntax-dispatch G3607@t '#(each (any any any))))) (map G35fa@bind G35ff@binding*))) G35fd@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G35fb@t))) (G2f6b@syntax-dispatch G35fb@t '(_ each-any (any . each-any) . each-any)))) G35f7@stx))) '#f))) (set! G2f49@let*-macro (lambda (G3629@stx) ((lambda (G362b@t) ((lambda (G362d@ls/false) (if (and G362d@ls/false (apply (lambda (G362f@lhs* G3630@rhs* G3631@b G3632@b*) (for-all G2d6c@id? G362f@lhs*)) G362d@ls/false)) (apply (lambda (G3637@lhs* G3638@rhs* G3639@b G363a@b*) (G2f21@bless ((letrec ((G363f@f (lambda (G3641@x*) (if (null? G3641@x*) (cons 'let (cons '() (cons G3639@b G363a@b*))) (list 'let (list (car G3641@x*)) (G363f@f (cdr G3641@x*))))))) G363f@f) (map list G3637@lhs* G3638@rhs*)))) G362d@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G362b@t))) (G2f6b@syntax-dispatch G362b@t '(_ #(each (any any)) any . each-any)))) G3629@stx))) (set! G2f4b@or-macro (lambda (G3643@stx) ((lambda (G3645@t) ((lambda (G3647@ls/false) (if G3647@ls/false (apply (lambda () '#f) G3647@ls/false) ((lambda (G3649@t) ((lambda (G364b@ls/false) (if G364b@ls/false (apply (lambda (G364d@e G364e@e*) (G2f21@bless ((letrec ((G3651@f (lambda (G3653@e G3654@e*) (if (null? G3654@e*) (list 'begin '#f G3653@e) (list 'let (list (list 't G3653@e)) (list 'if 't 't (G3651@f (car G3654@e*) (cdr G3654@e*)))))))) G3651@f) G364d@e G364e@e*))) G364b@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3649@t))) (G2f6b@syntax-dispatch G3649@t '(_ any . each-any)))) G3645@t))) (G2f6b@syntax-dispatch G3645@t '(_)))) G3643@stx))) (set! G2f4d@and-macro (lambda (G3657@stx) ((lambda (G3659@t) ((lambda (G365b@ls/false) (if G365b@ls/false (apply (lambda () '#t) G365b@ls/false) ((lambda (G365d@t) ((lambda (G365f@ls/false) (if G365f@ls/false (apply (lambda (G3661@e G3662@e*) (G2f21@bless ((letrec ((G3665@f (lambda (G3667@e G3668@e*) (if (null? G3668@e*) (list 'begin '#f G3667@e) (cons 'if (cons G3667@e (cons (G3665@f (car G3668@e*) (cdr G3668@e*)) '(#f)))))))) G3665@f) G3661@e G3662@e*))) G365f@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G365d@t))) (G2f6b@syntax-dispatch G365d@t '(_ any . each-any)))) G3659@t))) (G2f6b@syntax-dispatch G3659@t '(_)))) G3657@stx))) (set! G2f4f@cond-macro (lambda (G366b@stx) ((lambda (G366d@t) ((lambda (G366f@ls/false) (if G366f@ls/false (apply (lambda (G3671@cls G3672@cls*) (G2f21@bless ((letrec ((G3675@f (lambda (G3677@cls G3678@cls*) (if (null? G3678@cls*) ((lambda (G367b@t) ((lambda (G367d@ls/false) (if G367d@ls/false (apply (lambda (G367f@e G3680@e*) (cons 'begin (cons G367f@e G3680@e*))) G367d@ls/false) ((lambda (G3683@t) ((lambda (G3685@ls/false) (if G3685@ls/false (apply (lambda (G3687@e G3688@p) (list 'let (list (list 't G3687@e)) (list 'if 't (cons G3688@p '(t))))) G3685@ls/false) ((lambda (G368b@t) ((lambda (G368d@ls/false) (if G368d@ls/false (apply (lambda (G368f@e) (cons 'or (cons G368f@e '((if #f #f))))) G368d@ls/false) ((lambda (G3691@t) ((lambda (G3693@ls/false) (if G3693@ls/false (apply (lambda (G3695@e G3696@e*) (list 'if G3695@e (cons 'begin G3696@e*))) G3693@ls/false) ((lambda (G3699@t) ((lambda (G369b@ls/false) (if G369b@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid last clause" G366b@stx)) G369b@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3699@t))) (G2f6b@syntax-dispatch G3699@t '_))) G3691@t))) (G2f6b@syntax-dispatch G3691@t '(any . each-any)))) G368b@t))) (G2f6b@syntax-dispatch G368b@t '(any)))) G3683@t))) (G2f6b@syntax-dispatch G3683@t '(any #(scheme-id =>) any)))) G367b@t))) (G2f6b@syntax-dispatch G367b@t '(#(scheme-id else) any . each-any)))) G3677@cls) ((lambda (G369d@t) ((lambda (G369f@ls/false) (if G369f@ls/false (apply (lambda (G36a1@e G36a2@e*) (G3058@syntax-violation '#f '"incorrect position of keyword else" G366b@stx)) G369f@ls/false) ((lambda (G36a5@t) ((lambda (G36a7@ls/false) (if G36a7@ls/false (apply (lambda (G36a9@e G36aa@p) (list 'let (list (list 't G36a9@e)) (list 'if 't (cons G36aa@p '(t)) (G3675@f (car G3678@cls*) (cdr G3678@cls*))))) G36a7@ls/false) ((lambda (G36ad@t) ((lambda (G36af@ls/false) (if G36af@ls/false (apply (lambda (G36b1@e) (list 'or G36b1@e (G3675@f (car G3678@cls*) (cdr G3678@cls*)))) G36af@ls/false) ((lambda (G36b3@t) ((lambda (G36b5@ls/false) (if G36b5@ls/false (apply (lambda (G36b7@e G36b8@e*) (list 'if G36b7@e (cons 'begin G36b8@e*) (G3675@f (car G3678@cls*) (cdr G3678@cls*)))) G36b5@ls/false) ((lambda (G36bb@t) ((lambda (G36bd@ls/false) (if G36bd@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid last clause" G366b@stx)) G36bd@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G36bb@t))) (G2f6b@syntax-dispatch G36bb@t '_))) G36b3@t))) (G2f6b@syntax-dispatch G36b3@t '(any . each-any)))) G36ad@t))) (G2f6b@syntax-dispatch G36ad@t '(any)))) G36a5@t))) (G2f6b@syntax-dispatch G36a5@t '(any #(scheme-id =>) any)))) G369d@t))) (G2f6b@syntax-dispatch G369d@t '(#(scheme-id else) any . each-any)))) G3677@cls))))) G3675@f) G3671@cls G3672@cls*))) G366f@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G366d@t))) (G2f6b@syntax-dispatch G366d@t '(_ any . each-any)))) G366b@stx))) (set! G2f51@do-include (lambda (G36bf@stx G36c0@id G36c1@filename) ((lambda (G36c5@filename) (begin (if (not (and (string? G36c5@filename) (G2d6c@id? G36c0@id))) (G3058@syntax-violation '#f '"invalid syntax" G36bf@stx) (void)) (cons (G2f21@bless 'begin) (with-input-from-file G36c5@filename (lambda () ((letrec ((G36c7@f (lambda (G36c9@ls) ((lambda (G36cb@x) (if (eof-object? G36cb@x) (reverse G36c9@ls) (G36c7@f (cons (G2d4a@datum->stx G36c0@id G36cb@x) G36c9@ls)))) (G28fb@G2824@read-annotated))))) G36c7@f) '())))))) (G2d82@stx->datum G36c1@filename)))) (set! G2f53@include-macro (lambda (G36cd@e) ((lambda (G36cf@t) ((lambda (G36d1@ls/false) (if G36d1@ls/false (apply (lambda (G36d3@id G36d4@filename) (G2f51@do-include G36cd@e G36d3@id G36d4@filename)) G36d1@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G36cf@t))) (G2f6b@syntax-dispatch G36cf@t '(any any)))) G36cd@e))) (set! G2f55@include-into-macro (lambda (G36d7@e) ((lambda (G36d9@t) ((lambda (G36db@ls/false) (if G36db@ls/false (apply (lambda (G36dd@id G36de@filename) (G2f51@do-include G36d7@e G36dd@id G36de@filename)) G36db@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G36d9@t))) (G2f6b@syntax-dispatch G36d9@t '(_ any any)))) G36d7@e))) (set! G2f57@syntax-rules-macro (lambda (G36e1@e) ((lambda (G36e3@t) ((lambda (G36e5@ls/false) (if G36e5@ls/false (apply (lambda (G36e7@lits G36e8@pat* G36e9@tmp*) (begin (G2f71@verify-literals G36e7@lits G36e1@e) (G2f21@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G36e7@lits (map (lambda (G36ed@pat G36ee@tmp) ((lambda (G36f1@t) ((lambda (G36f3@ls/false) (if G36f3@ls/false (apply (lambda (G36f5@rest) (list (cons 'g G36f5@rest) (list 'syntax G36ee@tmp))) G36f3@ls/false) ((lambda (G36f7@t) ((lambda (G36f9@ls/false) (if G36f9@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid syntax-rules pattern" G36e1@e G36ed@pat)) G36f9@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G36f7@t))) (G2f6b@syntax-dispatch G36f7@t '_))) G36f1@t))) (G2f6b@syntax-dispatch G36f1@t '(_ . any)))) G36ed@pat)) G36e8@pat* G36e9@tmp*)))))))) G36e5@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G36e3@t))) (G2f6b@syntax-dispatch G36e3@t '(_ each-any . #(each (any any)))))) G36e1@e))) (set! G2f59@quasiquote-macro ((lambda () ((lambda (G36fc@datum G371a@quasicons* G371c@quasicons G371e@quasiappend G3720@quasivector G3722@vquasi G3724@quasi) (begin (set! G36fc@datum (lambda (G37ff@x) (list (G2ef5@scheme-stx 'quote) (G2d54@mkstx G37ff@x '() '() '())))) (set! G371a@quasicons* (lambda (G37f7@x G37f8@y) ((letrec ((G37fb@f (lambda (G37fd@x) (if (null? G37fd@x) G37f8@y (G371c@quasicons (car G37fd@x) (G37fb@f (cdr G37fd@x))))))) G37fb@f) G37f7@x))) (set! G371c@quasicons (lambda (G37d1@x G37d2@y) ((lambda (G37d5@t) ((lambda (G37d7@ls/false) (if G37d7@ls/false (apply (lambda (G37d9@dy) ((lambda (G37db@t) ((lambda (G37dd@ls/false) (if G37dd@ls/false (apply (lambda (G37df@dx) (list (G2ef5@scheme-stx 'quote) (cons G37df@dx G37d9@dy))) G37dd@ls/false) ((lambda (G37e1@t) ((lambda (G37e3@ls/false) (if G37e3@ls/false (apply (lambda () ((lambda (G37e5@t) ((lambda (G37e7@ls/false) (if G37e7@ls/false (apply (lambda () (list (G2ef5@scheme-stx 'list) G37d1@x)) G37e7@ls/false) ((lambda (G37e9@t) ((lambda (G37eb@ls/false) (if G37eb@ls/false (apply (lambda () (list (G2ef5@scheme-stx 'cons) G37d1@x G37d2@y)) G37eb@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G37e9@t))) (G2f6b@syntax-dispatch G37e9@t '_))) G37e5@t))) (G2f6b@syntax-dispatch G37e5@t '()))) G37d9@dy)) G37e3@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G37e1@t))) (G2f6b@syntax-dispatch G37e1@t '_))) G37db@t))) (G2f6b@syntax-dispatch G37db@t '(#(scheme-id quote) any)))) G37d1@x)) G37d7@ls/false) ((lambda (G37ed@t) ((lambda (G37ef@ls/false) (if G37ef@ls/false (apply (lambda (G37f1@stuff) (cons* (G2ef5@scheme-stx 'list) G37d1@x G37f1@stuff)) G37ef@ls/false) ((lambda (G37f3@t) ((lambda (G37f5@ls/false) (if G37f5@ls/false (apply (lambda () (list (G2ef5@scheme-stx 'cons) G37d1@x G37d2@y)) G37f5@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G37f3@t))) (G2f6b@syntax-dispatch G37f3@t '_))) G37ed@t))) (G2f6b@syntax-dispatch G37ed@t '(#(scheme-id list) . each-any)))) G37d5@t))) (G2f6b@syntax-dispatch G37d5@t '(#(scheme-id quote) any)))) G37d2@y))) (set! G371e@quasiappend (lambda (G37b7@x G37b8@y) ((lambda (G37bb@ls) (if (null? G37bb@ls) (list (G2ef5@scheme-stx 'quote) '()) (if (null? (cdr G37bb@ls)) (car G37bb@ls) (cons* (G2ef5@scheme-stx 'append) G37bb@ls)))) ((letrec ((G37bd@f (lambda (G37bf@x) (if (null? G37bf@x) ((lambda (G37c1@t) ((lambda (G37c3@ls/false) (if G37c3@ls/false (apply (lambda () '()) G37c3@ls/false) ((lambda (G37c5@t) ((lambda (G37c7@ls/false) (if G37c7@ls/false (apply (lambda () (list G37b8@y)) G37c7@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G37c5@t))) (G2f6b@syntax-dispatch G37c5@t '_))) G37c1@t))) (G2f6b@syntax-dispatch G37c1@t '(#(scheme-id quote) ())))) G37b8@y) ((lambda (G37c9@t) ((lambda (G37cb@ls/false) (if G37cb@ls/false (apply (lambda () (G37bd@f (cdr G37bf@x))) G37cb@ls/false) ((lambda (G37cd@t) ((lambda (G37cf@ls/false) (if G37cf@ls/false (apply (lambda () (cons (car G37bf@x) (G37bd@f (cdr G37bf@x)))) G37cf@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G37cd@t))) (G2f6b@syntax-dispatch G37cd@t '_))) G37c9@t))) (G2f6b@syntax-dispatch G37c9@t '(#(scheme-id quote) ())))) (car G37bf@x)))))) G37bd@f) G37b7@x)))) (set! G3720@quasivector (lambda (G3785@x) ((lambda (G3787@pat-x) ((lambda (G3789@t) ((lambda (G378b@ls/false) (if G378b@ls/false (apply (lambda (G378d@x*) (list (G2ef5@scheme-stx 'quote) (list->vector G378d@x*))) G378b@ls/false) ((lambda (G378f@t) ((lambda (G3791@ls/false) (if G3791@ls/false (apply (lambda () ((letrec ((G3793@f (lambda (G3795@x G3796@k) ((lambda (G3799@t) ((lambda (G379b@ls/false) (if G379b@ls/false (apply (lambda (G379d@x*) (G3796@k (map (lambda (G379f@x) (list (G2ef5@scheme-stx 'quote) G379f@x)) G379d@x*))) G379b@ls/false) ((lambda (G37a1@t) ((lambda (G37a3@ls/false) (if G37a3@ls/false (apply (lambda (G37a5@x*) (G3796@k G37a5@x*)) G37a3@ls/false) ((lambda (G37a7@t) ((lambda (G37a9@ls/false) (if G37a9@ls/false (apply (lambda (G37ab@x G37ac@y) (G3793@f G37ac@y (lambda (G37af@ls) (G3796@k (cons G37ab@x G37af@ls))))) G37a9@ls/false) ((lambda (G37b1@t) ((lambda (G37b3@ls/false) (if G37b3@ls/false (apply (lambda () (list (G2ef5@scheme-stx 'list->vector) G3787@pat-x)) G37b3@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G37b1@t))) (G2f6b@syntax-dispatch G37b1@t '_))) G37a7@t))) (G2f6b@syntax-dispatch G37a7@t '(#(scheme-id cons) any any)))) G37a1@t))) (G2f6b@syntax-dispatch G37a1@t '(#(scheme-id list) . each-any)))) G3799@t))) (G2f6b@syntax-dispatch G3799@t '(#(scheme-id quote) each-any)))) G3795@x)))) G3793@f) G3785@x (lambda (G37b5@ls) (cons* (G2ef5@scheme-stx 'vector) G37b5@ls)))) G3791@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G378f@t))) (G2f6b@syntax-dispatch G378f@t '_))) G3789@t))) (G2f6b@syntax-dispatch G3789@t '(#(scheme-id quote) each-any)))) G3787@pat-x)) G3785@x))) (set! G3722@vquasi (lambda (G3763@p G3764@lev) ((lambda (G3767@t) ((lambda (G3769@ls/false) (if G3769@ls/false (apply (lambda (G376b@p G376c@q) ((lambda (G376f@t) ((lambda (G3771@ls/false) (if G3771@ls/false (apply (lambda (G3773@p) (if (= G3764@lev '0) (G371a@quasicons* G3773@p (G3722@vquasi G376c@q G3764@lev)) (G371c@quasicons (G371c@quasicons (G36fc@datum 'unquote) (G3724@quasi G3773@p (- G3764@lev '1))) (G3722@vquasi G376c@q G3764@lev)))) G3771@ls/false) ((lambda (G3775@t) ((lambda (G3777@ls/false) (if G3777@ls/false (apply (lambda (G3779@p) (if (= G3764@lev '0) (G371e@quasiappend G3779@p (G3722@vquasi G376c@q G3764@lev)) (G371c@quasicons (G371c@quasicons (G36fc@datum 'unquote-splicing) (G3724@quasi G3779@p (- G3764@lev '1))) (G3722@vquasi G376c@q G3764@lev)))) G3777@ls/false) ((lambda (G377b@t) ((lambda (G377d@ls/false) (if G377d@ls/false (apply (lambda (G377f@p) (G371c@quasicons (G3724@quasi G377f@p G3764@lev) (G3722@vquasi G376c@q G3764@lev))) G377d@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G377b@t))) (G2f6b@syntax-dispatch G377b@t 'any))) G3775@t))) (G2f6b@syntax-dispatch G3775@t '(#(scheme-id unquote-splicing) . each-any)))) G376f@t))) (G2f6b@syntax-dispatch G376f@t '(#(scheme-id unquote) . each-any)))) G376b@p)) G3769@ls/false) ((lambda (G3781@t) ((lambda (G3783@ls/false) (if G3783@ls/false (apply (lambda () (list (G2ef5@scheme-stx 'quote) '())) G3783@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3781@t))) (G2f6b@syntax-dispatch G3781@t '()))) G3767@t))) (G2f6b@syntax-dispatch G3767@t '(any . any)))) G3763@p))) (set! G3724@quasi (lambda (G372d@p G372e@lev) ((lambda (G3731@t) ((lambda (G3733@ls/false) (if G3733@ls/false (apply (lambda (G3735@p) (if (= G372e@lev '0) G3735@p (G371c@quasicons (G36fc@datum 'unquote) (G3724@quasi (list G3735@p) (- G372e@lev '1))))) G3733@ls/false) ((lambda (G3737@t) ((lambda (G3739@ls/false) (if G3739@ls/false (apply (lambda (G373b@p G373c@q) (if (= G372e@lev '0) (G371a@quasicons* G373b@p (G3724@quasi G373c@q G372e@lev)) (G371c@quasicons (G371c@quasicons (G36fc@datum 'unquote) (G3724@quasi G373b@p (- G372e@lev '1))) (G3724@quasi G373c@q G372e@lev)))) G3739@ls/false) ((lambda (G373f@t) ((lambda (G3741@ls/false) (if G3741@ls/false (apply (lambda (G3743@p G3744@q) (if (= G372e@lev '0) (G371e@quasiappend G3743@p (G3724@quasi G3744@q G372e@lev)) (G371c@quasicons (G371c@quasicons (G36fc@datum 'unquote-splicing) (G3724@quasi G3743@p (- G372e@lev '1))) (G3724@quasi G3744@q G372e@lev)))) G3741@ls/false) ((lambda (G3747@t) ((lambda (G3749@ls/false) (if G3749@ls/false (apply (lambda (G374b@p) (G371c@quasicons (G36fc@datum 'quasiquote) (G3724@quasi (list G374b@p) (+ G372e@lev '1)))) G3749@ls/false) ((lambda (G374d@t) ((lambda (G374f@ls/false) (if G374f@ls/false (apply (lambda (G3751@p G3752@q) (G371c@quasicons (G3724@quasi G3751@p G372e@lev) (G3724@quasi G3752@q G372e@lev))) G374f@ls/false) ((lambda (G3755@t) ((lambda (G3757@ls/false) (if (and G3757@ls/false (apply (lambda (G3759@x) (not (G2d34@stx? G3759@x))) G3757@ls/false)) (apply (lambda (G375b@x) (G3720@quasivector (G3722@vquasi G375b@x G372e@lev))) G3757@ls/false) ((lambda (G375d@t) ((lambda (G375f@ls/false) (if G375f@ls/false (apply (lambda (G3761@p) (list (G2ef5@scheme-stx 'quote) G3761@p)) G375f@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G375d@t))) (G2f6b@syntax-dispatch G375d@t 'any))) G3755@t))) (G2f6b@syntax-dispatch G3755@t '#(vector each-any)))) G374d@t))) (G2f6b@syntax-dispatch G374d@t '(any . any)))) G3747@t))) (G2f6b@syntax-dispatch G3747@t '(#(scheme-id quasiquote) any)))) G373f@t))) (G2f6b@syntax-dispatch G373f@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G3737@t))) (G2f6b@syntax-dispatch G3737@t '((#(scheme-id unquote) . each-any) . any)))) G3731@t))) (G2f6b@syntax-dispatch G3731@t '(#(scheme-id unquote) any)))) G372d@p))) (lambda (G3725@x) ((lambda (G3727@t) ((lambda (G3729@ls/false) (if G3729@ls/false (apply (lambda (G372b@e) (G3724@quasi G372b@e '0)) G3729@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3727@t))) (G2f6b@syntax-dispatch G3727@t '(_ any)))) G3725@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f5b@quasisyntax-macro ((lambda () ((lambda (G3802@quasi) (begin (set! G3802@quasi (lambda (G381a@p G381b@lev) ((lambda (G381e@t) ((lambda (G3820@ls/false) (if G3820@ls/false (apply (lambda (G3822@p) (if (= G381b@lev '0) ((lambda (G3824@g) (values (list G3824@g) (list G3822@p) G3824@g)) (gensym)) (call-with-values (lambda () (G3802@quasi G3822@p (- G381b@lev '1))) (lambda (G3829@G3826 G382a@G3827 G382b@G3828) ((lambda (G382f@p G3830@rhs* G3831@lhs*) (values G3831@lhs* G3830@rhs* (list 'unsyntax G382f@p))) G382b@G3828 G382a@G3827 G3829@G3826))))) G3820@ls/false) ((lambda (G3835@t) ((lambda (G3837@ls/false) (if (and G3837@ls/false (apply (lambda () (= G381b@lev '0)) G3837@ls/false)) (apply (lambda () (G3058@syntax-violation '#f '"incorrect use of unsyntax" G381a@p)) G3837@ls/false) ((lambda (G3839@t) ((lambda (G383b@ls/false) (if G383b@ls/false (apply (lambda (G383d@p* G383e@q) (call-with-values (lambda () (G3802@quasi G383e@q G381b@lev)) (lambda (G3844@G3841 G3845@G3842 G3846@G3843) ((lambda (G384a@q G384b@rhs* G384c@lhs*) (if (= G381b@lev '0) ((lambda (G3850@g*) (values (append G3850@g* G384c@lhs*) (append G383d@p* G384b@rhs*) (append G3850@g* G384a@q))) (map (lambda (G3852@x) (gensym)) G383d@p*)) (call-with-values (lambda () (G3802@quasi G383d@p* (- G381b@lev '1))) (lambda (G3857@G3854 G3858@G3855 G3859@G3856) ((lambda (G385d@p* G385e@rhs2* G385f@lhs2*) (values (append G385f@lhs2* G384c@lhs*) (append G385e@rhs2* G384b@rhs*) (cons (cons 'unsyntax G385d@p*) G384a@q))) G3859@G3856 G3858@G3855 G3857@G3854))))) G3846@G3843 G3845@G3842 G3844@G3841)))) G383b@ls/false) ((lambda (G3863@t) ((lambda (G3865@ls/false) (if G3865@ls/false (apply (lambda (G3867@p* G3868@q) (call-with-values (lambda () (G3802@quasi G3868@q G381b@lev)) (lambda (G386e@G386b G386f@G386c G3870@G386d) ((lambda (G3874@q G3875@rhs* G3876@lhs*) (if (= G381b@lev '0) ((lambda (G387a@g*) (values (append (map (lambda (G387c@g) (cons G387c@g '(...))) G387a@g*) G3876@lhs*) (append G3867@p* G3875@rhs*) (append (apply append (map (lambda (G387e@g) (cons G387e@g '(...))) G387a@g*)) G3874@q))) (map (lambda (G3880@x) (gensym)) G3867@p*)) (call-with-values (lambda () (G3802@quasi G3867@p* (- G381b@lev '1))) (lambda (G3885@G3882 G3886@G3883 G3887@G3884) ((lambda (G388b@p* G388c@rhs2* G388d@lhs2*) (values (append G388d@lhs2* G3876@lhs*) (append G388c@rhs2* G3875@rhs*) (cons (cons 'unsyntax-splicing G388b@p*) G3874@q))) G3887@G3884 G3886@G3883 G3885@G3882))))) G3870@G386d G386f@G386c G386e@G386b)))) G3865@ls/false) ((lambda (G3891@t) ((lambda (G3893@ls/false) (if (and G3893@ls/false (apply (lambda () (= G381b@lev '0)) G3893@ls/false)) (apply (lambda () (G3058@syntax-violation '#f '"incorrect use of unsyntax-splicing" G381a@p)) G3893@ls/false) ((lambda (G3895@t) ((lambda (G3897@ls/false) (if G3897@ls/false (apply (lambda (G3899@p) (call-with-values (lambda () (G3802@quasi G3899@p (+ G381b@lev '1))) (lambda (G389e@G389b G389f@G389c G38a0@G389d) ((lambda (G38a4@p G38a5@rhs* G38a6@lhs*) (values G38a6@lhs* G38a5@rhs* (list 'quasisyntax G38a4@p))) G38a0@G389d G389f@G389c G389e@G389b)))) G3897@ls/false) ((lambda (G38aa@t) ((lambda (G38ac@ls/false) (if G38ac@ls/false (apply (lambda (G38ae@p G38af@q) (call-with-values (lambda () (G3802@quasi G38ae@p G381b@lev)) (lambda (G38b8@G38b2 G38b9@G38b3 G38ba@G38b4) (call-with-values (lambda () (G3802@quasi G38af@q G381b@lev)) (lambda (G38be@G38b5 G38bf@G38b6 G38c0@G38b7) ((lambda (G38c4@q G38c5@rhs2* G38c6@lhs2* G38c7@p G38c8@rhs* G38c9@lhs*) (values (append G38c6@lhs2* G38c9@lhs*) (append G38c5@rhs2* G38c8@rhs*) (cons G38c7@p G38c4@q))) G38c0@G38b7 G38bf@G38b6 G38be@G38b5 G38ba@G38b4 G38b9@G38b3 G38b8@G38b2)))))) G38ac@ls/false) ((lambda (G38d0@t) ((lambda (G38d2@ls/false) (if G38d2@ls/false (apply (lambda (G38d4@x*) (call-with-values (lambda () (G3802@quasi G38d4@x* G381b@lev)) (lambda (G38d9@G38d6 G38da@G38d7 G38db@G38d8) ((lambda (G38df@x* G38e0@rhs* G38e1@lhs*) (values G38e1@lhs* G38e0@rhs* (list->vector G38df@x*))) G38db@G38d8 G38da@G38d7 G38d9@G38d6)))) G38d2@ls/false) ((lambda (G38e5@t) ((lambda (G38e7@ls/false) (if G38e7@ls/false (apply (lambda () (values '() '() G381a@p)) G38e7@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G38e5@t))) (G2f6b@syntax-dispatch G38e5@t '_))) G38d0@t))) (G2f6b@syntax-dispatch G38d0@t '#(vector each-any)))) G38aa@t))) (G2f6b@syntax-dispatch G38aa@t '(any . any)))) G3895@t))) (G2f6b@syntax-dispatch G3895@t '(#(scheme-id quasisyntax) any)))) G3891@t))) (G2f6b@syntax-dispatch G3891@t '#(scheme-id unsyntax-splicing)))) G3863@t))) (G2f6b@syntax-dispatch G3863@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G3839@t))) (G2f6b@syntax-dispatch G3839@t '((#(scheme-id unsyntax) . each-any) . any)))) G3835@t))) (G2f6b@syntax-dispatch G3835@t '#(scheme-id unsyntax)))) G381e@t))) (G2f6b@syntax-dispatch G381e@t '(#(scheme-id unsyntax) any)))) G381a@p))) (lambda (G3803@x) ((lambda (G3805@t) ((lambda (G3807@ls/false) (if G3807@ls/false (apply (lambda (G3809@e) (call-with-values (lambda () (G3802@quasi G3809@e '0)) (lambda (G380e@G380b G380f@G380c G3810@G380d) ((lambda (G3814@v G3815@rhs* G3816@lhs*) (G2f21@bless (list 'syntax-case (cons 'list G3815@rhs*) '() (list G3816@lhs* (list 'syntax G3814@v))))) G3810@G380d G380f@G380c G380e@G380b)))) G3807@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3805@t))) (G2f6b@syntax-dispatch G3805@t '(_ any)))) G3803@x)))) '#f)))) (set! G2f5d@define-struct-macro (lambda (G38e9@stx) (G3058@syntax-violation '#f '"define-struct not supported" G38e9@stx))) (set! G2f5f@define-record-type-macro (lambda (G38eb@x) ((lambda (G38ee@id G38f0@get-record-name G38f2@get-record-constructor-name G38f4@get-record-predicate-name G38f6@get-clause G38f8@foo-rtd-code G38fa@parent-rtd-code G38fc@parent-rcd-code G38fe@foo-rcd-code G3900@get-protocol-code G3902@get-fields G3904@get-mutator-indices G3906@get-mutators G3908@get-accessors G390a@enumerate G390c@do-define-record G390e@verify-clauses) (begin (set! G38ee@id (lambda (G3ae1@ctxt . G3ae3@str*) (G305c@datum->syntax G3ae1@ctxt (string->symbol (apply string-append (map (lambda (G3ae5@x) (if (symbol? G3ae5@x) (symbol->string G3ae5@x) (if (string? G3ae5@x) G3ae5@x (assertion-violation 'define-record-type '"BUG")))) G3ae3@str*)))))) (set! G38f0@get-record-name (lambda (G3acf@spec) ((lambda (G3ad1@t) ((lambda (G3ad3@ls/false) (if G3ad3@ls/false (apply (lambda (G3ad5@foo G3ad6@make-foo G3ad7@foo?) G3ad5@foo) G3ad3@ls/false) ((lambda (G3adb@t) ((lambda (G3add@ls/false) (if G3add@ls/false (apply (lambda (G3adf@foo) G3adf@foo) G3add@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3adb@t))) (G2f6b@syntax-dispatch G3adb@t 'any))) G3ad1@t))) (G2f6b@syntax-dispatch G3ad1@t '(any any any)))) G3acf@spec))) (set! G38f2@get-record-constructor-name (lambda (G3abb@spec) ((lambda (G3abd@t) ((lambda (G3abf@ls/false) (if G3abf@ls/false (apply (lambda (G3ac1@foo G3ac2@make-foo G3ac3@foo?) G3ac2@make-foo) G3abf@ls/false) ((lambda (G3ac7@t) ((lambda (G3ac9@ls/false) (if (and G3ac9@ls/false (apply (lambda (G3acb@foo) (G2d6c@id? G3acb@foo)) G3ac9@ls/false)) (apply (lambda (G3acd@foo) (G38ee@id G3acd@foo '"make-" (G2d82@stx->datum G3acd@foo))) G3ac9@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3ac7@t))) (G2f6b@syntax-dispatch G3ac7@t 'any))) G3abd@t))) (G2f6b@syntax-dispatch G3abd@t '(any any any)))) G3abb@spec))) (set! G38f4@get-record-predicate-name (lambda (G3aa7@spec) ((lambda (G3aa9@t) ((lambda (G3aab@ls/false) (if G3aab@ls/false (apply (lambda (G3aad@foo G3aae@make-foo G3aaf@foo?) G3aaf@foo?) G3aab@ls/false) ((lambda (G3ab3@t) ((lambda (G3ab5@ls/false) (if (and G3ab5@ls/false (apply (lambda (G3ab7@foo) (G2d6c@id? G3ab7@foo)) G3ab5@ls/false)) (apply (lambda (G3ab9@foo) (G38ee@id G3ab9@foo (G2d82@stx->datum G3ab9@foo) '"?")) G3ab5@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3ab3@t))) (G2f6b@syntax-dispatch G3ab3@t 'any))) G3aa9@t))) (G2f6b@syntax-dispatch G3aa9@t '(any any any)))) G3aa7@spec))) (set! G38f6@get-clause (lambda (G3a95@id G3a96@ls) ((lambda (G3a99@t) ((lambda (G3a9b@ls/false) (if G3a9b@ls/false (apply (lambda () '#f) G3a9b@ls/false) ((lambda (G3a9d@t) ((lambda (G3a9f@ls/false) (if G3a9f@ls/false (apply (lambda (G3aa1@x G3aa2@rest G3aa3@ls) (if (G2d74@free-id=? (G2f21@bless G3a95@id) G3aa1@x) (cons G3aa1@x G3aa2@rest) (G38f6@get-clause G3a95@id G3aa3@ls))) G3a9f@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a9d@t))) (G2f6b@syntax-dispatch G3a9d@t '((any . any) . any)))) G3a99@t))) (G2f6b@syntax-dispatch G3a99@t '()))) G3a96@ls))) (set! G38f8@foo-rtd-code (lambda (G3a43@name G3a44@clause* G3a45@parent-rtd-code) ((lambda (G3a4a@convert-field-spec*) (begin (set! G3a4a@convert-field-spec* (lambda (G3a7b@ls) (list->vector (map (lambda (G3a7d@x) ((lambda (G3a7f@t) ((lambda (G3a81@ls/false) (if G3a81@ls/false (apply (lambda (G3a83@name G3a84@rest) (list 'mutable G3a83@name)) G3a81@ls/false) ((lambda (G3a87@t) ((lambda (G3a89@ls/false) (if G3a89@ls/false (apply (lambda (G3a8b@name G3a8c@rest) (list 'immutable G3a8b@name)) G3a89@ls/false) ((lambda (G3a8f@t) ((lambda (G3a91@ls/false) (if G3a91@ls/false (apply (lambda (G3a93@name) (list 'immutable G3a93@name)) G3a91@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a8f@t))) (G2f6b@syntax-dispatch G3a8f@t 'any))) G3a87@t))) (G2f6b@syntax-dispatch G3a87@t '(#(scheme-id immutable) any . any)))) G3a7f@t))) (G2f6b@syntax-dispatch G3a7f@t '(#(scheme-id mutable) any . any)))) G3a7d@x)) G3a7b@ls)))) ((lambda (G3a4b@uid-code G3a4c@sealed? G3a4d@opaque? G3a4e@fields) (G2f21@bless (list 'make-record-type-descriptor (list 'quote G3a43@name) G3a45@parent-rtd-code G3a4b@uid-code G3a4c@sealed? G3a4d@opaque? G3a4e@fields))) ((lambda (G3a53@t) ((lambda (G3a55@ls/false) (if G3a55@ls/false (apply (lambda () (list 'quote (gensym))) G3a55@ls/false) ((lambda (G3a57@t) ((lambda (G3a59@ls/false) (if G3a59@ls/false (apply (lambda (G3a5b@uid) (list 'quote G3a5b@uid)) G3a59@ls/false) ((lambda (G3a5d@t) ((lambda (G3a5f@ls/false) (if G3a5f@ls/false (apply (lambda () '#f) G3a5f@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a5d@t))) (G2f6b@syntax-dispatch G3a5d@t '_))) G3a57@t))) (G2f6b@syntax-dispatch G3a57@t '(_ any)))) G3a53@t))) (G2f6b@syntax-dispatch G3a53@t '(_)))) (G38f6@get-clause 'nongenerative G3a44@clause*)) ((lambda (G3a61@t) ((lambda (G3a63@ls/false) (if G3a63@ls/false (apply (lambda () '#t) G3a63@ls/false) ((lambda (G3a65@t) ((lambda (G3a67@ls/false) (if G3a67@ls/false (apply (lambda () '#f) G3a67@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a65@t))) (G2f6b@syntax-dispatch G3a65@t '_))) G3a61@t))) (G2f6b@syntax-dispatch G3a61@t '(_ #(atom #t))))) (G38f6@get-clause 'sealed G3a44@clause*)) ((lambda (G3a69@t) ((lambda (G3a6b@ls/false) (if G3a6b@ls/false (apply (lambda () '#t) G3a6b@ls/false) ((lambda (G3a6d@t) ((lambda (G3a6f@ls/false) (if G3a6f@ls/false (apply (lambda () '#f) G3a6f@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a6d@t))) (G2f6b@syntax-dispatch G3a6d@t '_))) G3a69@t))) (G2f6b@syntax-dispatch G3a69@t '(_ #(atom #t))))) (G38f6@get-clause 'opaque G3a44@clause*)) ((lambda (G3a71@t) ((lambda (G3a73@ls/false) (if G3a73@ls/false (apply (lambda (G3a75@field-spec*) (list 'quote (G3a4a@convert-field-spec* G3a75@field-spec*))) G3a73@ls/false) ((lambda (G3a77@t) ((lambda (G3a79@ls/false) (if G3a79@ls/false (apply (lambda () ''#()) G3a79@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a77@t))) (G2f6b@syntax-dispatch G3a77@t '_))) G3a71@t))) (G2f6b@syntax-dispatch G3a71@t '(_ . each-any)))) (G38f6@get-clause 'fields G3a44@clause*))))) '#f))) (set! G38fa@parent-rtd-code (lambda (G3a2b@clause*) ((lambda (G3a2d@t) ((lambda (G3a2f@ls/false) (if G3a2f@ls/false (apply (lambda (G3a31@name) (list 'record-type-descriptor G3a31@name)) G3a2f@ls/false) ((lambda (G3a33@t) ((lambda (G3a35@ls/false) (if G3a35@ls/false (apply (lambda () ((lambda (G3a37@t) ((lambda (G3a39@ls/false) (if G3a39@ls/false (apply (lambda (G3a3b@rtd G3a3c@rcd) G3a3b@rtd) G3a39@ls/false) ((lambda (G3a3f@t) ((lambda (G3a41@ls/false) (if G3a41@ls/false (apply (lambda () '#f) G3a41@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a3f@t))) (G2f6b@syntax-dispatch G3a3f@t '#(atom #f)))) G3a37@t))) (G2f6b@syntax-dispatch G3a37@t '(_ any any)))) (G38f6@get-clause 'parent-rtd G3a2b@clause*))) G3a35@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a33@t))) (G2f6b@syntax-dispatch G3a33@t '#(atom #f)))) G3a2d@t))) (G2f6b@syntax-dispatch G3a2d@t '(_ any)))) (G38f6@get-clause 'parent G3a2b@clause*)))) (set! G38fc@parent-rcd-code (lambda (G3a13@clause*) ((lambda (G3a15@t) ((lambda (G3a17@ls/false) (if G3a17@ls/false (apply (lambda (G3a19@name) (list 'record-constructor-descriptor G3a19@name)) G3a17@ls/false) ((lambda (G3a1b@t) ((lambda (G3a1d@ls/false) (if G3a1d@ls/false (apply (lambda () ((lambda (G3a1f@t) ((lambda (G3a21@ls/false) (if G3a21@ls/false (apply (lambda (G3a23@rtd G3a24@rcd) G3a24@rcd) G3a21@ls/false) ((lambda (G3a27@t) ((lambda (G3a29@ls/false) (if G3a29@ls/false (apply (lambda () '#f) G3a29@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a27@t))) (G2f6b@syntax-dispatch G3a27@t '#(atom #f)))) G3a1f@t))) (G2f6b@syntax-dispatch G3a1f@t '(_ any any)))) (G38f6@get-clause 'parent-rtd G3a13@clause*))) G3a1d@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a1b@t))) (G2f6b@syntax-dispatch G3a1b@t '#(atom #f)))) G3a15@t))) (G2f6b@syntax-dispatch G3a15@t '(_ any)))) (G38f6@get-clause 'parent G3a13@clause*)))) (set! G38fe@foo-rcd-code (lambda (G3a0b@clause* G3a0c@foo-rtd G3a0d@protocol G3a0e@parent-rcd-code) (list 'make-record-constructor-descriptor G3a0c@foo-rtd G3a0e@parent-rcd-code G3a0d@protocol))) (set! G3900@get-protocol-code (lambda (G39ff@clause*) ((lambda (G3a01@t) ((lambda (G3a03@ls/false) (if G3a03@ls/false (apply (lambda (G3a05@expr) G3a05@expr) G3a03@ls/false) ((lambda (G3a07@t) ((lambda (G3a09@ls/false) (if G3a09@ls/false (apply (lambda () '#f) G3a09@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3a07@t))) (G2f6b@syntax-dispatch G3a07@t '_))) G3a01@t))) (G2f6b@syntax-dispatch G3a01@t '(_ any)))) (G38f6@get-clause 'protocol G39ff@clause*)))) (set! G3902@get-fields (lambda (G39ed@clause*) ((lambda (G39ef@t) ((lambda (G39f1@ls/false) (if G39f1@ls/false (apply (lambda () '()) G39f1@ls/false) ((lambda (G39f3@t) ((lambda (G39f5@ls/false) (if G39f5@ls/false (apply (lambda (G39f7@f*) G39f7@f*) G39f5@ls/false) ((lambda (G39f9@t) ((lambda (G39fb@ls/false) (if G39fb@ls/false (apply (lambda (G39fd@rest) (G3902@get-fields G39fd@rest)) G39fb@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G39f9@t))) (G2f6b@syntax-dispatch G39f9@t '(_ . any)))) G39f3@t))) (G2f6b@syntax-dispatch G39f3@t '((#(scheme-id fields) . each-any) . _)))) G39ef@t))) (G2f6b@syntax-dispatch G39ef@t '()))) G39ed@clause*))) (set! G3904@get-mutator-indices (lambda (G39d5@fields) ((letrec ((G39d7@f (lambda (G39d9@fields G39da@i) ((lambda (G39dd@t) ((lambda (G39df@ls/false) (if G39df@ls/false (apply (lambda () '()) G39df@ls/false) ((lambda (G39e1@t) ((lambda (G39e3@ls/false) (if G39e3@ls/false (apply (lambda (G39e5@rest) (cons G39da@i (G39d7@f G39e5@rest (+ G39da@i '1)))) G39e3@ls/false) ((lambda (G39e7@t) ((lambda (G39e9@ls/false) (if G39e9@ls/false (apply (lambda (G39eb@rest) (G39d7@f G39eb@rest (+ G39da@i '1))) G39e9@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G39e7@t))) (G2f6b@syntax-dispatch G39e7@t '(_ . any)))) G39e1@t))) (G2f6b@syntax-dispatch G39e1@t '((#(scheme-id mutable) . _) . any)))) G39dd@t))) (G2f6b@syntax-dispatch G39dd@t '()))) G39d9@fields)))) G39d7@f) G39d5@fields '0))) (set! G3906@get-mutators (lambda (G39ab@foo G39ac@fields) ((lambda (G39b0@gen-name) (begin (set! G39b0@gen-name (lambda (G39d3@x) (G305c@datum->syntax G39ab@foo (string->symbol (string-append (symbol->string (G305e@syntax->datum G39ab@foo)) '"-" (symbol->string (G305e@syntax->datum G39d3@x)) '"-set!"))))) ((letrec ((G39b1@f (lambda (G39b3@fields) ((lambda (G39b5@t) ((lambda (G39b7@ls/false) (if G39b7@ls/false (apply (lambda () '()) G39b7@ls/false) ((lambda (G39b9@t) ((lambda (G39bb@ls/false) (if G39bb@ls/false (apply (lambda (G39bd@name G39be@accessor G39bf@mutator G39c0@rest) (cons G39bf@mutator (G39b1@f G39c0@rest))) G39bb@ls/false) ((lambda (G39c5@t) ((lambda (G39c7@ls/false) (if G39c7@ls/false (apply (lambda (G39c9@name G39ca@rest) (cons (G39b0@gen-name G39c9@name) (G39b1@f G39ca@rest))) G39c7@ls/false) ((lambda (G39cd@t) ((lambda (G39cf@ls/false) (if G39cf@ls/false (apply (lambda (G39d1@rest) (G39b1@f G39d1@rest)) G39cf@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G39cd@t))) (G2f6b@syntax-dispatch G39cd@t '(_ . any)))) G39c5@t))) (G2f6b@syntax-dispatch G39c5@t '((#(scheme-id mutable) any) . any)))) G39b9@t))) (G2f6b@syntax-dispatch G39b9@t '((#(scheme-id mutable) any any any) . any)))) G39b5@t))) (G2f6b@syntax-dispatch G39b5@t '()))) G39b3@fields)))) G39b1@f) G39ac@fields))) '#f))) (set! G3908@get-accessors (lambda (G3967@foo G3968@fields) ((lambda (G396c@gen-name) (begin (set! G396c@gen-name (lambda (G39a9@x) (G305c@datum->syntax G3967@foo (string->symbol (string-append (symbol->string (G305e@syntax->datum G3967@foo)) '"-" (symbol->string (G305e@syntax->datum G39a9@x))))))) (map (lambda (G396d@field) ((lambda (G396f@t) ((lambda (G3971@ls/false) (if (and G3971@ls/false (apply (lambda (G3973@name G3974@accessor G3975@mutator) (G2d6c@id? G3974@accessor)) G3971@ls/false)) (apply (lambda (G3979@name G397a@accessor G397b@mutator) G397a@accessor) G3971@ls/false) ((lambda (G397f@t) ((lambda (G3981@ls/false) (if (and G3981@ls/false (apply (lambda (G3983@name G3984@accessor) (G2d6c@id? G3984@accessor)) G3981@ls/false)) (apply (lambda (G3987@name G3988@accessor) G3988@accessor) G3981@ls/false) ((lambda (G398b@t) ((lambda (G398d@ls/false) (if (and G398d@ls/false (apply (lambda (G398f@name) (G2d6c@id? G398f@name)) G398d@ls/false)) (apply (lambda (G3991@name) (G396c@gen-name G3991@name)) G398d@ls/false) ((lambda (G3993@t) ((lambda (G3995@ls/false) (if (and G3995@ls/false (apply (lambda (G3997@name) (G2d6c@id? G3997@name)) G3995@ls/false)) (apply (lambda (G3999@name) (G396c@gen-name G3999@name)) G3995@ls/false) ((lambda (G399b@t) ((lambda (G399d@ls/false) (if (and G399d@ls/false (apply (lambda (G399f@name) (G2d6c@id? G399f@name)) G399d@ls/false)) (apply (lambda (G39a1@name) (G396c@gen-name G39a1@name)) G399d@ls/false) ((lambda (G39a3@t) ((lambda (G39a5@ls/false) (if G39a5@ls/false (apply (lambda (G39a7@others) (G3058@syntax-violation '#f '"invalid field spec" G396d@field)) G39a5@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G39a3@t))) (G2f6b@syntax-dispatch G39a3@t 'any))) G399b@t))) (G2f6b@syntax-dispatch G399b@t 'any))) G3993@t))) (G2f6b@syntax-dispatch G3993@t '(#(scheme-id immutable) any)))) G398b@t))) (G2f6b@syntax-dispatch G398b@t '(#(scheme-id mutable) any)))) G397f@t))) (G2f6b@syntax-dispatch G397f@t '(#(scheme-id immutable) any any)))) G396f@t))) (G2f6b@syntax-dispatch G396f@t '(#(scheme-id mutable) any any any)))) G396d@field)) G3968@fields))) '#f))) (set! G390a@enumerate (lambda (G395f@ls) ((letrec ((G3961@f (lambda (G3963@ls G3964@i) (if (null? G3963@ls) '() (cons G3964@i (G3961@f (cdr G3963@ls) (+ G3964@i '1))))))) G3961@f) G395f@ls '0))) (set! G390c@do-define-record (lambda (G3937@namespec G3938@clause*) ((lambda (G393b@foo) ((lambda (G393d@foo-rtd) ((lambda (G393f@foo-rcd) ((lambda (G3941@protocol) ((lambda (G3943@make-foo) ((lambda (G3945@fields) ((lambda (G3947@idx*) ((lambda (G3949@foo-x*) ((lambda (G394b@set-foo-x!*) ((lambda (G394d@set-foo-idx*) ((lambda (G394f@foo?) ((lambda (G3951@foo-rtd-code) ((lambda (G3953@foo-rcd-code) ((lambda (G3955@protocol-code) ((lambda () (G2f21@bless (cons 'begin (cons (list 'define G393d@foo-rtd G3951@foo-rtd-code) (cons (list 'define G3941@protocol G3955@protocol-code) (cons (list 'define G393f@foo-rcd G3953@foo-rcd-code) (cons (list 'define-syntax G393b@foo (list 'list ''$rtd (list 'syntax G393d@foo-rtd) (list 'syntax G393f@foo-rcd))) (cons (list 'define G394f@foo? (list 'record-predicate G393d@foo-rtd)) (cons (list 'define G3943@make-foo (list 'record-constructor G393f@foo-rcd)) (append (map (lambda (G3957@foo-x G3958@idx) (list 'define G3957@foo-x (list 'record-accessor G393d@foo-rtd G3958@idx))) G3949@foo-x* G3947@idx*) (map (lambda (G395b@set-foo-x! G395c@idx) (list 'define G395b@set-foo-x! (list 'record-mutator G393d@foo-rtd G395c@idx))) G394b@set-foo-x!* G394d@set-foo-idx*))))))))))))) (G3900@get-protocol-code G3938@clause*))) (G38fe@foo-rcd-code G3938@clause* G393d@foo-rtd G3941@protocol (G38fc@parent-rcd-code G3938@clause*)))) (G38f8@foo-rtd-code G393b@foo G3938@clause* (G38fa@parent-rtd-code G3938@clause*)))) (G38f4@get-record-predicate-name G3937@namespec))) (G3904@get-mutator-indices G3945@fields))) (G3906@get-mutators G393b@foo G3945@fields))) (G3908@get-accessors G393b@foo G3945@fields))) (G390a@enumerate G3945@fields))) (G3902@get-fields G3938@clause*))) (G38f2@get-record-constructor-name G3937@namespec))) (gensym))) (gensym))) (gensym))) (G38f0@get-record-name G3937@namespec)))) (set! G390e@verify-clauses (lambda (G3917@x G3918@cls*) ((lambda (G391c@valid-kwds G391e@free-id-member?) (begin (set! G391c@valid-kwds (map G2f21@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G391e@free-id-member? (lambda (G3933@x G3934@ls) (and (pair? G3934@ls) (or (G2d74@free-id=? G3933@x (car G3934@ls)) (G391e@free-id-member? G3933@x (cdr G3934@ls)))))) ((letrec ((G391f@f (lambda (G3921@cls* G3922@seen*) (if (not (null? G3921@cls*)) ((lambda (G3925@t) ((lambda (G3927@ls/false) (if G3927@ls/false (apply (lambda (G3929@kwd G392a@rest) (if (or (not (G2d6c@id? G3929@kwd)) (not (G391e@free-id-member? G3929@kwd G391c@valid-kwds))) (G3058@syntax-violation '#f '"not a valid define-record-type keyword" G3929@kwd) (if (G2d7a@bound-id-member? G3929@kwd G3922@seen*) (G3058@syntax-violation '#f '"duplicate use of keyword " G3917@x G3929@kwd) (G391f@f (cdr G3921@cls*) (cons G3929@kwd G3922@seen*))))) G3927@ls/false) ((lambda (G392d@t) ((lambda (G392f@ls/false) (if G392f@ls/false (apply (lambda (G3931@cls) (G3058@syntax-violation '#f '"malformed define-record-type clause" G3931@cls)) G392f@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G392d@t))) (G2f6b@syntax-dispatch G392d@t 'any))) G3925@t))) (G2f6b@syntax-dispatch G3925@t '(any . any)))) (car G3921@cls*)) (void))))) G391f@f) G3918@cls* '()))) '#f '#f))) ((lambda (G390f@t) ((lambda (G3911@ls/false) (if G3911@ls/false (apply (lambda (G3913@namespec G3914@clause*) (begin (G390e@verify-clauses G38eb@x G3914@clause*) (G390c@do-define-record G3913@namespec G3914@clause*))) G3911@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G390f@t))) (G2f6b@syntax-dispatch G390f@t '(_ any . each-any)))) G38eb@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G2f61@define-condition-type-macro (lambda (G3ae7@x) ((lambda (G3aea@mkname) (begin (set! G3aea@mkname (lambda (G3b17@name G3b18@suffix) (G305c@datum->syntax G3b17@name (string->symbol (string-append (symbol->string (G305e@syntax->datum G3b17@name)) G3b18@suffix))))) ((lambda (G3aeb@t) ((lambda (G3aed@ls/false) (if (and G3aed@ls/false (apply (lambda (G3aef@ctxt G3af0@name G3af1@super G3af2@constructor G3af3@predicate G3af4@field* G3af5@accessor*) (and (G2d6c@id? G3af0@name) (G2d6c@id? G3af1@super) (G2d6c@id? G3af2@constructor) (G2d6c@id? G3af3@predicate) (for-all G2d6c@id? G3af4@field*) (for-all G2d6c@id? G3af5@accessor*))) G3aed@ls/false)) (apply (lambda (G3afd@ctxt G3afe@name G3aff@super G3b00@constructor G3b01@predicate G3b02@field* G3b03@accessor*) ((lambda (G3b0b@aux-accessor*) (G2f21@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3afe@name G3b00@constructor (gensym)) (cons (list 'parent G3aff@super) (cons (cons 'fields (map (lambda (G3b0d@field G3b0e@aux) (list 'immutable G3b0d@field G3b0e@aux)) G3b02@field* G3b0b@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3b01@predicate (list 'condition-predicate (list 'record-type-descriptor G3afe@name))) (map (lambda (G3b11@accessor G3b12@aux) (list 'define G3b11@accessor (list 'condition-accessor (list 'record-type-descriptor G3afe@name) G3b12@aux))) G3b03@accessor* G3b0b@aux-accessor*)))))) (map (lambda (G3b15@x) (gensym)) G3b03@accessor*))) G3aed@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3aeb@t))) (G2f6b@syntax-dispatch G3aeb@t '(any any any any any . #(each (any any)))))) G3ae7@x))) '#f))) (set! G2f63@incorrect-usage-macro (lambda (G3b1b@e) (G3058@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3b1b@e))) (set! G2f65@parameterize-macro (lambda (G3b1d@e) ((lambda (G3b1f@t) ((lambda (G3b21@ls/false) (if G3b21@ls/false (apply (lambda (G3b23@b G3b24@b*) (G2f21@bless (cons 'let (cons '() (cons G3b23@b G3b24@b*))))) G3b21@ls/false) ((lambda (G3b27@t) ((lambda (G3b29@ls/false) (if G3b29@ls/false (apply (lambda (G3b2b@olhs* G3b2c@orhs* G3b2d@b G3b2e@b*) ((lambda (G3b33@lhs* G3b34@rhs*) (G2f21@bless (cons (list 'lambda (append G3b33@lhs* G3b34@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3b37@lhs G3b38@rhs) (list 'let (list (list 't (list G3b37@lhs))) (list G3b37@lhs G3b38@rhs) (cons 'set! (cons G3b38@rhs '(t))))) G3b33@lhs* G3b34@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3b2d@b G3b2e@b*))) '(swap)))))) (append G3b2b@olhs* G3b2c@orhs*)))) (G3044@generate-temporaries G3b2b@olhs*) (G3044@generate-temporaries G3b2c@orhs*))) G3b29@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3b27@t))) (G2f6b@syntax-dispatch G3b27@t '(_ #(each (any any)) any . each-any)))) G3b1f@t))) (G2f6b@syntax-dispatch G3b1f@t '(_ () any . each-any)))) G3b1d@e))) (set! G2f67@foreign-call-transformer (lambda (G3b3b@e G3b3c@r G3b3d@mr) ((lambda (G3b41@t) ((lambda (G3b43@ls/false) (if G3b43@ls/false (apply (lambda (G3b45@name G3b46@arg*) (cons 'foreign-call (cons (G2f8f@chi-expr G3b45@name G3b3c@r G3b3d@mr) (G2f8b@chi-expr* G3b46@arg* G3b3c@r G3b3d@mr)))) G3b43@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3b41@t))) (G2f6b@syntax-dispatch G3b41@t '(_ any . each-any)))) G3b3b@e))) (set! G2f69@convert-pattern (lambda (G3b49@pattern G3b4a@keys) ((lambda (G3b4e@cvt* G3b50@cvt) (begin (set! G3b4e@cvt* (lambda (G3bdf@p* G3be0@n G3be1@ids) (if (null? G3bdf@p*) (values '() G3be1@ids) (call-with-values (lambda () (G3b4e@cvt* (cdr G3bdf@p*) G3be0@n G3be1@ids)) (lambda (G3be7@G3be5 G3be8@G3be6) ((lambda (G3beb@ids G3bec@y) (call-with-values (lambda () (G3b50@cvt (car G3bdf@p*) G3be0@n G3beb@ids)) (lambda (G3bf1@G3bef G3bf2@G3bf0) ((lambda (G3bf5@ids G3bf6@x) (values (cons G3bf6@x G3bec@y) G3bf5@ids)) G3bf2@G3bf0 G3bf1@G3bef)))) G3be8@G3be6 G3be7@G3be5)))))) (set! G3b50@cvt (lambda (G3b51@p G3b52@n G3b53@ids) ((lambda (G3b57@t) ((lambda (G3b59@ls/false) (if (and G3b59@ls/false (apply (lambda (G3b5b@id) (G2d6c@id? G3b5b@id)) G3b59@ls/false)) (apply (lambda (G3b5d@id) (if (G2d7a@bound-id-member? G3b51@p G3b4a@keys) (values (vector 'free-id G3b51@p) G3b53@ids) (if (G2d74@free-id=? G3b51@p (G2ef5@scheme-stx '_)) (values '_ G3b53@ids) (values 'any (cons (cons G3b51@p G3b52@n) G3b53@ids))))) G3b59@ls/false) ((lambda (G3b5f@t) ((lambda (G3b61@ls/false) (if (and G3b61@ls/false (apply (lambda (G3b63@p G3b64@dots) (G2f6d@ellipsis? G3b64@dots)) G3b61@ls/false)) (apply (lambda (G3b67@p G3b68@dots) (call-with-values (lambda () (G3b50@cvt G3b67@p (+ G3b52@n '1) G3b53@ids)) (lambda (G3b6d@G3b6b G3b6e@G3b6c) ((lambda (G3b71@ids G3b72@p) (values (if (eq? G3b72@p 'any) 'each-any (vector 'each G3b72@p)) G3b71@ids)) G3b6e@G3b6c G3b6d@G3b6b)))) G3b61@ls/false) ((lambda (G3b75@t) ((lambda (G3b77@ls/false) (if (and G3b77@ls/false (apply (lambda (G3b79@x G3b7a@dots G3b7b@ys G3b7c@z) (G2f6d@ellipsis? G3b7a@dots)) G3b77@ls/false)) (apply (lambda (G3b81@x G3b82@dots G3b83@ys G3b84@z) (call-with-values (lambda () (G3b50@cvt G3b84@z G3b52@n G3b53@ids)) (lambda (G3b8b@G3b89 G3b8c@G3b8a) ((lambda (G3b8f@ids G3b90@z) (call-with-values (lambda () (G3b4e@cvt* G3b83@ys G3b52@n G3b8f@ids)) (lambda (G3b95@G3b93 G3b96@G3b94) ((lambda (G3b99@ids G3b9a@ys) (call-with-values (lambda () (G3b50@cvt G3b81@x (+ G3b52@n '1) G3b99@ids)) (lambda (G3b9f@G3b9d G3ba0@G3b9e) ((lambda (G3ba3@ids G3ba4@x) (values (vector 'each+ G3ba4@x (reverse G3b9a@ys) G3b90@z) G3ba3@ids)) G3ba0@G3b9e G3b9f@G3b9d)))) G3b96@G3b94 G3b95@G3b93)))) G3b8c@G3b8a G3b8b@G3b89)))) G3b77@ls/false) ((lambda (G3ba7@t) ((lambda (G3ba9@ls/false) (if G3ba9@ls/false (apply (lambda (G3bab@x G3bac@y) (call-with-values (lambda () (G3b50@cvt G3bac@y G3b52@n G3b53@ids)) (lambda (G3bb1@G3baf G3bb2@G3bb0) ((lambda (G3bb5@ids G3bb6@y) (call-with-values (lambda () (G3b50@cvt G3bab@x G3b52@n G3bb5@ids)) (lambda (G3bbb@G3bb9 G3bbc@G3bba) ((lambda (G3bbf@ids G3bc0@x) (values (cons G3bc0@x G3bb6@y) G3bbf@ids)) G3bbc@G3bba G3bbb@G3bb9)))) G3bb2@G3bb0 G3bb1@G3baf)))) G3ba9@ls/false) ((lambda (G3bc3@t) ((lambda (G3bc5@ls/false) (if G3bc5@ls/false (apply (lambda () (values '() G3b53@ids)) G3bc5@ls/false) ((lambda (G3bc7@t) ((lambda (G3bc9@ls/false) (if (and G3bc9@ls/false (apply (lambda (G3bcb@p) (not (G2d34@stx? G3bcb@p))) G3bc9@ls/false)) (apply (lambda (G3bcd@p) (call-with-values (lambda () (G3b50@cvt G3bcd@p G3b52@n G3b53@ids)) (lambda (G3bd1@G3bcf G3bd2@G3bd0) ((lambda (G3bd5@ids G3bd6@p) (values (vector 'vector G3bd6@p) G3bd5@ids)) G3bd2@G3bd0 G3bd1@G3bcf)))) G3bc9@ls/false) ((lambda (G3bd9@t) ((lambda (G3bdb@ls/false) (if G3bdb@ls/false (apply (lambda (G3bdd@datum) (values (vector 'atom (G2d82@stx->datum G3bdd@datum)) G3b53@ids)) G3bdb@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3bd9@t))) (G2f6b@syntax-dispatch G3bd9@t 'any))) G3bc7@t))) (G2f6b@syntax-dispatch G3bc7@t '#(vector each-any)))) G3bc3@t))) (G2f6b@syntax-dispatch G3bc3@t '()))) G3ba7@t))) (G2f6b@syntax-dispatch G3ba7@t '(any . any)))) G3b75@t))) (G2f6b@syntax-dispatch G3b75@t '(any any . #(each+ any () any))))) G3b5f@t))) (G2f6b@syntax-dispatch G3b5f@t '(any any)))) G3b57@t))) (G2f6b@syntax-dispatch G3b57@t 'any))) G3b51@p))) (G3b50@cvt G3b49@pattern '0 '()))) '#f '#f))) (set! G2f6b@syntax-dispatch ((lambda () ((lambda (G3bfa@stx^ G3bfc@match-each G3bfe@match-each+ G3c00@match-each-any G3c02@match-empty G3c04@combine G3c06@match* G3c08@match) (begin (set! G3bfa@stx^ (lambda (G3cc3@e G3cc4@m* G3cc5@s* G3cc6@ae*) (if (and (null? G3cc4@m*) (null? G3cc5@s*) (null? G3cc6@ae*)) G3cc3@e (G2d54@mkstx G3cc3@e G3cc4@m* G3cc5@s* G3cc6@ae*)))) (set! G3bfc@match-each (lambda (G3ca6@e G3ca7@p G3ca8@m* G3ca9@s* G3caa@ae*) (if (pair? G3ca6@e) ((lambda (G3cb0@first) (and G3cb0@first ((lambda (G3cb2@rest) (and G3cb2@rest (cons G3cb0@first G3cb2@rest))) (G3bfc@match-each (cdr G3ca6@e) G3ca7@p G3ca8@m* G3ca9@s* G3caa@ae*)))) (G3c08@match (car G3ca6@e) G3ca7@p G3ca8@m* G3ca9@s* G3caa@ae* '())) (if (null? G3ca6@e) '() (if (G2d34@stx? G3ca6@e) (and (not (G2ce6@top-marked? G3ca8@m*)) (call-with-values (lambda () (G2d52@join-wraps G3ca8@m* G3ca9@s* G3caa@ae* G3ca6@e)) (lambda (G3cb7@G3cb4 G3cb8@G3cb5 G3cb9@G3cb6) ((lambda (G3cbd@ae* G3cbe@s* G3cbf@m*) (G3bfc@match-each (G2d38@stx-expr G3ca6@e) G3ca7@p G3cbf@m* G3cbe@s* G3cbd@ae*)) G3cb9@G3cb6 G3cb8@G3cb5 G3cb7@G3cb4)))) (if (G28fd@G2828@annotation? G3ca6@e) (G3bfc@match-each (G28ff@G282c@annotation-expression G3ca6@e) G3ca7@p G3ca8@m* G3ca9@s* G3caa@ae*) '#f)))))) (set! G3bfe@match-each+ (lambda (G3c6c@e G3c6d@x-pat G3c6e@y-pat G3c6f@z-pat G3c70@m* G3c71@s* G3c72@ae* G3c73@r) ((letrec ((G3c7c@f (lambda (G3c7e@e G3c7f@m* G3c80@s* G3c81@ae*) (if (pair? G3c7e@e) (call-with-values (lambda () (G3c7c@f (cdr G3c7e@e) G3c7f@m* G3c80@s* G3c81@ae*)) (lambda (G3c89@G3c86 G3c8a@G3c87 G3c8b@G3c88) ((lambda (G3c8f@r G3c90@y-pat G3c91@xr*) (if G3c8f@r (if (null? G3c90@y-pat) ((lambda (G3c95@xr) (if G3c95@xr (values (cons G3c95@xr G3c91@xr*) G3c90@y-pat G3c8f@r) (values '#f '#f '#f))) (G3c08@match (car G3c7e@e) G3c6d@x-pat G3c7f@m* G3c80@s* G3c81@ae* '())) (values '() (cdr G3c90@y-pat) (G3c08@match (car G3c7e@e) (car G3c90@y-pat) G3c7f@m* G3c80@s* G3c81@ae* G3c8f@r))) (values '#f '#f '#f))) G3c8b@G3c88 G3c8a@G3c87 G3c89@G3c86))) (if (G2d34@stx? G3c7e@e) (if (G2ce6@top-marked? G3c7f@m*) (values '() G3c6e@y-pat (G3c08@match G3c7e@e G3c6f@z-pat G3c7f@m* G3c80@s* G3c81@ae* G3c73@r)) (call-with-values (lambda () (G2d52@join-wraps G3c7f@m* G3c80@s* G3c81@ae* G3c7e@e)) (lambda (G3c9a@G3c97 G3c9b@G3c98 G3c9c@G3c99) ((lambda (G3ca0@ae* G3ca1@s* G3ca2@m*) (G3c7c@f (G2d38@stx-expr G3c7e@e) G3ca2@m* G3ca1@s* G3ca0@ae*)) G3c9c@G3c99 G3c9b@G3c98 G3c9a@G3c97)))) (if (G28fd@G2828@annotation? G3c7e@e) (G3c7c@f (G28ff@G282c@annotation-expression G3c7e@e) G3c7f@m* G3c80@s* G3c81@ae*) (values '() G3c6e@y-pat (G3c08@match G3c7e@e G3c6f@z-pat G3c7f@m* G3c80@s* G3c81@ae* G3c73@r)))))))) G3c7c@f) G3c6c@e G3c70@m* G3c71@s* G3c72@ae*))) (set! G3c00@match-each-any (lambda (G3c53@e G3c54@m* G3c55@s* G3c56@ae*) (if (pair? G3c53@e) ((lambda (G3c5b@l) (and G3c5b@l (cons (G3bfa@stx^ (car G3c53@e) G3c54@m* G3c55@s* G3c56@ae*) G3c5b@l))) (G3c00@match-each-any (cdr G3c53@e) G3c54@m* G3c55@s* G3c56@ae*)) (if (null? G3c53@e) '() (if (G2d34@stx? G3c53@e) (and (not (G2ce6@top-marked? G3c54@m*)) (call-with-values (lambda () (G2d52@join-wraps G3c54@m* G3c55@s* G3c56@ae* G3c53@e)) (lambda (G3c60@G3c5d G3c61@G3c5e G3c62@G3c5f) ((lambda (G3c66@ae* G3c67@s* G3c68@m*) (G3c00@match-each-any (G2d38@stx-expr G3c53@e) G3c68@m* G3c67@s* G3c66@ae*)) G3c62@G3c5f G3c61@G3c5e G3c60@G3c5d)))) (if (G28fd@G2828@annotation? G3c53@e) (G3c00@match-each-any (G28ff@G282c@annotation-expression G3c53@e) G3c54@m* G3c55@s* G3c56@ae*) '#f)))))) (set! G3c02@match-empty (lambda (G3c4d@p G3c4e@r) (if (null? G3c4d@p) G3c4e@r (if (eq? G3c4d@p '_) G3c4e@r (if (eq? G3c4d@p 'any) (cons '() G3c4e@r) (if (pair? G3c4d@p) (G3c02@match-empty (car G3c4d@p) (G3c02@match-empty (cdr G3c4d@p) G3c4e@r)) (if (eq? G3c4d@p 'each-any) (cons '() G3c4e@r) ((lambda (G3c51@t) (if (memv G3c51@t '(each)) (G3c02@match-empty (vector-ref G3c4d@p '1) G3c4e@r) (if (memv G3c51@t '(each+)) (G3c02@match-empty (vector-ref G3c4d@p '1) (G3c02@match-empty (reverse (vector-ref G3c4d@p '2)) (G3c02@match-empty (vector-ref G3c4d@p '3) G3c4e@r))) (if (memv G3c51@t '(free-id atom)) G3c4e@r (if (memv G3c51@t '(scheme-id atom)) G3c4e@r (if (memv G3c51@t '(vector)) (G3c02@match-empty (vector-ref G3c4d@p '1) G3c4e@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c4d@p))))))) (vector-ref G3c4d@p '0))))))))) (set! G3c04@combine (lambda (G3c49@r* G3c4a@r) (if (null? (car G3c49@r*)) G3c4a@r (cons (map car G3c49@r*) (G3c04@combine (map cdr G3c49@r*) G3c4a@r))))) (set! G3c06@match* (lambda (G3c28@e G3c29@p G3c2a@m* G3c2b@s* G3c2c@ae* G3c2d@r) (if (null? G3c29@p) (and (null? G3c28@e) G3c2d@r) (if (pair? G3c29@p) (and (pair? G3c28@e) (G3c08@match (car G3c28@e) (car G3c29@p) G3c2a@m* G3c2b@s* G3c2c@ae* (G3c08@match (cdr G3c28@e) (cdr G3c29@p) G3c2a@m* G3c2b@s* G3c2c@ae* G3c2d@r))) (if (eq? G3c29@p 'each-any) ((lambda (G3c34@l) (and G3c34@l (cons G3c34@l G3c2d@r))) (G3c00@match-each-any G3c28@e G3c2a@m* G3c2b@s* G3c2c@ae*)) ((lambda (G3c36@t) (if (memv G3c36@t '(each)) (if (null? G3c28@e) (G3c02@match-empty (vector-ref G3c29@p '1) G3c2d@r) ((lambda (G3c38@r*) (and G3c38@r* (G3c04@combine G3c38@r* G3c2d@r))) (G3bfc@match-each G3c28@e (vector-ref G3c29@p '1) G3c2a@m* G3c2b@s* G3c2c@ae*))) (if (memv G3c36@t '(free-id)) (and (symbol? G3c28@e) (G2ce6@top-marked? G3c2a@m*) (G2d74@free-id=? (G3bfa@stx^ G3c28@e G3c2a@m* G3c2b@s* G3c2c@ae*) (vector-ref G3c29@p '1)) G3c2d@r) (if (memv G3c36@t '(scheme-id)) (and (symbol? G3c28@e) (G2ce6@top-marked? G3c2a@m*) (G2d74@free-id=? (G3bfa@stx^ G3c28@e G3c2a@m* G3c2b@s* G3c2c@ae*) (G2ef5@scheme-stx (vector-ref G3c29@p '1))) G3c2d@r) (if (memv G3c36@t '(each+)) (call-with-values (lambda () (G3bfe@match-each+ G3c28@e (vector-ref G3c29@p '1) (vector-ref G3c29@p '2) (vector-ref G3c29@p '3) G3c2a@m* G3c2b@s* G3c2c@ae* G3c2d@r)) (lambda (G3c3d@G3c3a G3c3e@G3c3b G3c3f@G3c3c) ((lambda (G3c43@r G3c44@y-pat G3c45@xr*) (and G3c43@r (null? G3c44@y-pat) (if (null? G3c45@xr*) (G3c02@match-empty (vector-ref G3c29@p '1) G3c43@r) (G3c04@combine G3c45@xr* G3c43@r)))) G3c3f@G3c3c G3c3e@G3c3b G3c3d@G3c3a))) (if (memv G3c36@t '(atom)) (and (fast-equal? (vector-ref G3c29@p '1) (G2d80@strip G3c28@e G3c2a@m*)) G3c2d@r) (if (memv G3c36@t '(vector)) (and (vector? G3c28@e) (G3c08@match (vector->list G3c28@e) (vector-ref G3c29@p '1) G3c2a@m* G3c2b@s* G3c2c@ae* G3c2d@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3c29@p)))))))) (vector-ref G3c29@p '0))))))) (set! G3c08@match (lambda (G3c0d@e G3c0e@p G3c0f@m* G3c10@s* G3c11@ae* G3c12@r) (if (not G3c12@r) '#f (if (eq? G3c0e@p '_) G3c12@r (if (eq? G3c0e@p 'any) (cons (G3bfa@stx^ G3c0d@e G3c0f@m* G3c10@s* G3c11@ae*) G3c12@r) (if (G2d34@stx? G3c0d@e) (and (not (G2ce6@top-marked? G3c0f@m*)) (call-with-values (lambda () (G2d52@join-wraps G3c0f@m* G3c10@s* G3c11@ae* G3c0d@e)) (lambda (G3c1c@G3c19 G3c1d@G3c1a G3c1e@G3c1b) ((lambda (G3c22@ae* G3c23@s* G3c24@m*) (G3c08@match (G2d38@stx-expr G3c0d@e) G3c0e@p G3c24@m* G3c23@s* G3c22@ae* G3c12@r)) G3c1e@G3c1b G3c1d@G3c1a G3c1c@G3c19)))) (if (G28fd@G2828@annotation? G3c0d@e) (G3c08@match (G28ff@G282c@annotation-expression G3c0d@e) G3c0e@p G3c0f@m* G3c10@s* G3c11@ae* G3c12@r) (G3c06@match* G3c0d@e G3c0e@p G3c0f@m* G3c10@s* G3c11@ae* G3c12@r)))))))) (lambda (G3c09@e G3c0a@p) (G3c08@match G3c09@e G3c0a@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f6d@ellipsis? (lambda (G3ccb@x) (and (G2d6c@id? G3ccb@x) (G2d74@free-id=? G3ccb@x (G2ef5@scheme-stx '...))))) (set! G2f6f@underscore? (lambda (G3ccd@x) (and (G2d6c@id? G3ccd@x) (G2d74@free-id=? G3ccd@x (G2ef5@scheme-stx '_))))) (set! G2f71@verify-literals (lambda (G3ccf@lits G3cd0@expr) (for-each (lambda (G3cd3@x) (if (or (not (G2d6c@id? G3cd3@x)) (G2f6d@ellipsis? G3cd3@x) (G2f6f@underscore? G3cd3@x)) (G3058@syntax-violation '#f '"invalid literal" G3cd0@expr G3cd3@x) (void))) G3ccf@lits))) (set! G2f73@syntax-case-transformer ((lambda () ((lambda (G3cd6@build-dispatch-call G3cd8@invalid-ids-error G3cda@gen-clause G3cdc@gen-syntax-case) (begin (set! G3cd6@build-dispatch-call (lambda (G3d45@pvars G3d46@expr G3d47@y G3d48@r G3d49@mr) ((lambda (G3d4f@ids G3d50@levels) ((lambda (G3d53@labels G3d54@new-vars) ((lambda (G3d57@body) (list '(primitive apply) (G2cc6@G2c04@build-lambda '#f G3d54@new-vars G3d57@body) G3d47@y)) (G2f8f@chi-expr (G2d58@add-subst (G2d27@make-full-rib G3d4f@ids G3d53@labels) G3d46@expr) (append (map (lambda (G3d59@label G3d5a@var G3d5b@level) (cons G3d59@label (G2d8c@make-binding 'syntax (cons G3d5a@var G3d5b@level)))) G3d53@labels G3d54@new-vars (map cdr G3d45@pvars)) G3d48@r) G3d49@mr))) (map G2cec@gen-label G3d4f@ids) (map G2ce8@gen-lexical G3d4f@ids))) (map car G3d45@pvars) (map cdr G3d45@pvars)))) (set! G3cd8@invalid-ids-error (lambda (G3d39@id* G3d3a@e G3d3b@class) ((letrec ((G3d3f@find (lambda (G3d41@id* G3d42@ok*) (if (null? G3d41@id*) (G3058@syntax-violation '#f '"invalid syntax" G3d3a@e) (if (G2d6c@id? (car G3d41@id*)) (if (G2d7a@bound-id-member? (car G3d41@id*) G3d42@ok*) (G3052@syntax-error (car G3d41@id*) '"duplicate " G3d3b@class) (G3d3f@find (cdr G3d41@id*) (cons (car G3d41@id*) G3d42@ok*))) (G3052@syntax-error (car G3d41@id*) '"invalid " G3d3b@class)))))) G3d3f@find) G3d39@id* '()))) (set! G3cda@gen-clause (lambda (G3d13@x G3d14@keys G3d15@clauses G3d16@r G3d17@mr G3d18@pat G3d19@fender G3d1a@expr) (call-with-values (lambda () (G2f69@convert-pattern G3d18@pat G3d14@keys)) (lambda (G3d25@G3d23 G3d26@G3d24) ((lambda (G3d29@pvars G3d2a@p) (if (not (G2d78@distinct-bound-ids? (map car G3d29@pvars))) (G3cd8@invalid-ids-error (map car G3d29@pvars) G3d18@pat '"pattern variable") (if (not (for-all (lambda (G3d2d@x) (not (G2f6d@ellipsis? (car G3d2d@x)))) G3d29@pvars)) (G3058@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3d18@pat) ((lambda (G3d2f@y) ((lambda (G3d31@test) ((lambda (G3d33@conseq) ((lambda (G3d35@altern) (list (G2cc6@G2c04@build-lambda '#f (list G3d2f@y) (list 'if G3d31@test G3d33@conseq G3d35@altern)) (list '(primitive syntax-dispatch) G3d13@x (list 'quote G3d2a@p)))) (G3cdc@gen-syntax-case G3d13@x G3d14@keys G3d15@clauses G3d16@r G3d17@mr))) (G3cd6@build-dispatch-call G3d29@pvars G3d1a@expr G3d2f@y G3d16@r G3d17@mr))) (if (eq? G3d19@fender '#t) G3d2f@y ((lambda (G3d37@call) (list 'if G3d2f@y G3d37@call (list 'quote '#f))) (G3cd6@build-dispatch-call G3d29@pvars G3d19@fender G3d2f@y G3d16@r G3d17@mr))))) (G2ce8@gen-lexical 'tmp))))) G3d26@G3d24 G3d25@G3d23))))) (set! G3cdc@gen-syntax-case (lambda (G3cf1@x G3cf2@keys G3cf3@clauses G3cf4@r G3cf5@mr) (if (null? G3cf3@clauses) (list '(primitive syntax-error) G3cf1@x) ((lambda (G3cfb@t) ((lambda (G3cfd@ls/false) (if G3cfd@ls/false (apply (lambda (G3cff@pat G3d00@expr) (if (and (G2d6c@id? G3cff@pat) (not (G2d7a@bound-id-member? G3cff@pat G3cf2@keys)) (not (G2f6d@ellipsis? G3cff@pat))) (if (G2d74@free-id=? G3cff@pat (G2ef5@scheme-stx '_)) (G2f8f@chi-expr G3d00@expr G3cf4@r G3cf5@mr) ((lambda (G3d03@lab G3d04@lex) ((lambda (G3d07@body) (list (G2cc6@G2c04@build-lambda '#f (list G3d04@lex) G3d07@body) G3cf1@x)) (G2f8f@chi-expr (G2d58@add-subst (G2d27@make-full-rib (list G3cff@pat) (list G3d03@lab)) G3d00@expr) (cons (cons G3d03@lab (G2d8c@make-binding 'syntax (cons G3d04@lex '0))) G3cf4@r) G3cf5@mr))) (G2cec@gen-label G3cff@pat) (G2ce8@gen-lexical G3cff@pat))) (G3cda@gen-clause G3cf1@x G3cf2@keys (cdr G3cf3@clauses) G3cf4@r G3cf5@mr G3cff@pat '#t G3d00@expr))) G3cfd@ls/false) ((lambda (G3d09@t) ((lambda (G3d0b@ls/false) (if G3d0b@ls/false (apply (lambda (G3d0d@pat G3d0e@fender G3d0f@expr) (G3cda@gen-clause G3cf1@x G3cf2@keys (cdr G3cf3@clauses) G3cf4@r G3cf5@mr G3d0d@pat G3d0e@fender G3d0f@expr)) G3d0b@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3d09@t))) (G2f6b@syntax-dispatch G3d09@t '(any any any)))) G3cfb@t))) (G2f6b@syntax-dispatch G3cfb@t '(any any)))) (car G3cf3@clauses))))) (lambda (G3cdd@e G3cde@r G3cdf@mr) ((lambda (G3ce3@t) ((lambda (G3ce5@ls/false) (if G3ce5@ls/false (apply (lambda (G3ce7@expr G3ce8@keys G3ce9@clauses) (begin (G2f71@verify-literals G3ce8@keys G3cdd@e) ((lambda (G3ced@x) ((lambda (G3cef@body) (list (G2cc6@G2c04@build-lambda '#f (list G3ced@x) G3cef@body) (G2f8f@chi-expr G3ce7@expr G3cde@r G3cdf@mr))) (G3cdc@gen-syntax-case G3ced@x G3ce8@keys G3ce9@clauses G3cde@r G3cdf@mr))) (G2ce8@gen-lexical 'tmp)))) G3ce5@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3ce3@t))) (G2f6b@syntax-dispatch G3ce3@t '(_ any each-any . each-any)))) G3cdd@e)))) '#f '#f '#f '#f)))) (set! G2f75@ellipsis-map (lambda (G3d5f@proc G3d60@ls . G3d63@ls*) ((lambda (G3d66@who) (begin (set! G3d66@who '...) (begin (if (not (list? G3d60@ls)) (assertion-violation G3d66@who '"not a list" G3d60@ls) (void)) (if (not (null? G3d63@ls*)) ((lambda (G3d67@n) (for-each (lambda (G3d69@x) (begin (if (not (list? G3d69@x)) (assertion-violation G3d66@who '"not a list" G3d69@x) (void)) (if (not (= (length G3d69@x) G3d67@n)) (assertion-violation G3d66@who '"length mismatch" G3d60@ls G3d69@x) (void)))) G3d63@ls*)) (length G3d60@ls)) (void)) (apply map G3d5f@proc G3d60@ls G3d63@ls*)))) '#f))) (set! G2f77@syntax-transformer ((lambda () ((lambda (G3d6c@gen-syntax G3d6e@gen-ref G3d70@gen-append G3d72@gen-mappend G3d74@gen-map G3d76@gen-cons G3d78@gen-vector G3d7a@regen) (begin (set! G3d6c@gen-syntax (lambda (G3ddf@src G3de0@e G3de1@r G3de2@maps G3de3@ellipsis? G3de4@vec?) ((lambda (G3deb@t) ((lambda (G3ded@ls/false) (if (and G3ded@ls/false (apply (lambda (G3def@dots) (G3de3@ellipsis? G3def@dots)) G3ded@ls/false)) (apply (lambda (G3df1@dots) (G3058@syntax-violation '#f '"misplaced ellipsis in syntax form" G3ddf@src)) G3ded@ls/false) ((lambda (G3df3@t) ((lambda (G3df5@ls/false) (if (and G3df5@ls/false (apply (lambda (G3df7@id) (G2d6c@id? G3df7@id)) G3df5@ls/false)) (apply (lambda (G3df9@id) ((lambda (G3dfb@label) ((lambda (G3dfd@b) ((lambda () (if (eq? (G2d8e@binding-type G3dfd@b) 'syntax) (call-with-values (lambda () ((lambda (G3e01@var.lev) (G3d6e@gen-ref G3ddf@src (car G3e01@var.lev) (cdr G3e01@var.lev) G3de2@maps)) (G2d90@binding-value G3dfd@b))) (lambda (G3e03@G3dff G3e04@G3e00) ((lambda (G3e07@maps G3e08@var) (values (list 'ref G3e08@var) G3e07@maps)) G3e04@G3e00 G3e03@G3dff))) (values (list 'quote G3de0@e) G3de2@maps))))) (G2d8a@label->binding G3dfb@label G3de1@r))) (G2d86@id->label G3de0@e))) G3df5@ls/false) ((lambda (G3e0b@t) ((lambda (G3e0d@ls/false) (if (and G3e0d@ls/false (apply (lambda (G3e0f@dots G3e10@e) (G3de3@ellipsis? G3e0f@dots)) G3e0d@ls/false)) (apply (lambda (G3e13@dots G3e14@e) (if G3de4@vec? (G3058@syntax-violation '#f '"misplaced ellipsis in syntax form" G3ddf@src) (G3d6c@gen-syntax G3ddf@src G3e14@e G3de1@r G3de2@maps (lambda (G3e17@x) '#f) '#f))) G3e0d@ls/false) ((lambda (G3e19@t) ((lambda (G3e1b@ls/false) (if (and G3e1b@ls/false (apply (lambda (G3e1d@x G3e1e@dots G3e1f@y) (G3de3@ellipsis? G3e1e@dots)) G3e1b@ls/false)) (apply (lambda (G3e23@x G3e24@dots G3e25@y) ((letrec ((G3e29@f (lambda (G3e2b@y G3e2c@k) ((lambda (G3e2f@t) ((lambda (G3e31@ls/false) (if G3e31@ls/false (apply (lambda () (G3e2c@k G3de2@maps)) G3e31@ls/false) ((lambda (G3e33@t) ((lambda (G3e35@ls/false) (if (and G3e35@ls/false (apply (lambda (G3e37@dots G3e38@y) (G3de3@ellipsis? G3e37@dots)) G3e35@ls/false)) (apply (lambda (G3e3b@dots G3e3c@y) (G3e29@f G3e3c@y (lambda (G3e3f@maps) (call-with-values (lambda () (G3e2c@k (cons '() G3e3f@maps))) (lambda (G3e43@G3e41 G3e44@G3e42) ((lambda (G3e47@maps G3e48@x) (if (null? (car G3e47@maps)) (G3058@syntax-violation '#f '"extra ellipsis in syntax form" G3ddf@src) (values (G3d72@gen-mappend G3e48@x (car G3e47@maps)) (cdr G3e47@maps)))) G3e44@G3e42 G3e43@G3e41)))))) G3e35@ls/false) ((lambda (G3e4b@t) ((lambda (G3e4d@ls/false) (if G3e4d@ls/false (apply (lambda () (call-with-values (lambda () (G3d6c@gen-syntax G3ddf@src G3e2b@y G3de1@r G3de2@maps G3de3@ellipsis? G3de4@vec?)) (lambda (G3e51@G3e4f G3e52@G3e50) ((lambda (G3e55@maps G3e56@y) (call-with-values (lambda () (G3e2c@k G3e55@maps)) (lambda (G3e5b@G3e59 G3e5c@G3e5a) ((lambda (G3e5f@maps G3e60@x) (values (G3d70@gen-append G3e60@x G3e56@y) G3e5f@maps)) G3e5c@G3e5a G3e5b@G3e59)))) G3e52@G3e50 G3e51@G3e4f)))) G3e4d@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3e4b@t))) (G2f6b@syntax-dispatch G3e4b@t '_))) G3e33@t))) (G2f6b@syntax-dispatch G3e33@t '(any . any)))) G3e2f@t))) (G2f6b@syntax-dispatch G3e2f@t '()))) G3e2b@y)))) G3e29@f) G3e25@y (lambda (G3e63@maps) (call-with-values (lambda () (G3d6c@gen-syntax G3ddf@src G3e23@x G3de1@r (cons '() G3e63@maps) G3de3@ellipsis? '#f)) (lambda (G3e67@G3e65 G3e68@G3e66) ((lambda (G3e6b@maps G3e6c@x) (if (null? (car G3e6b@maps)) (G3058@syntax-violation '#f '"extra ellipsis in syntax form" G3ddf@src) (values (G3d74@gen-map G3e6c@x (car G3e6b@maps)) (cdr G3e6b@maps)))) G3e68@G3e66 G3e67@G3e65)))))) G3e1b@ls/false) ((lambda (G3e6f@t) ((lambda (G3e71@ls/false) (if G3e71@ls/false (apply (lambda (G3e73@x G3e74@y) (call-with-values (lambda () (G3d6c@gen-syntax G3ddf@src G3e73@x G3de1@r G3de2@maps G3de3@ellipsis? '#f)) (lambda (G3e79@G3e77 G3e7a@G3e78) ((lambda (G3e7d@maps G3e7e@xnew) (call-with-values (lambda () (G3d6c@gen-syntax G3ddf@src G3e74@y G3de1@r G3e7d@maps G3de3@ellipsis? G3de4@vec?)) (lambda (G3e83@G3e81 G3e84@G3e82) ((lambda (G3e87@maps G3e88@ynew) (values (G3d76@gen-cons G3de0@e G3e73@x G3e74@y G3e7e@xnew G3e88@ynew) G3e87@maps)) G3e84@G3e82 G3e83@G3e81)))) G3e7a@G3e78 G3e79@G3e77)))) G3e71@ls/false) ((lambda (G3e8b@t) ((lambda (G3e8d@ls/false) (if G3e8d@ls/false (apply (lambda (G3e8f@ls) (call-with-values (lambda () (G3d6c@gen-syntax G3ddf@src G3e8f@ls G3de1@r G3de2@maps G3de3@ellipsis? '#t)) (lambda (G3e93@G3e91 G3e94@G3e92) ((lambda (G3e97@maps G3e98@lsnew) (values (G3d78@gen-vector G3de0@e G3e8f@ls G3e98@lsnew) G3e97@maps)) G3e94@G3e92 G3e93@G3e91)))) G3e8d@ls/false) ((lambda (G3e9b@t) ((lambda (G3e9d@ls/false) (if G3e9d@ls/false (apply (lambda () (values (list 'quote G3de0@e) G3de2@maps)) G3e9d@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3e9b@t))) (G2f6b@syntax-dispatch G3e9b@t '_))) G3e8b@t))) (G2f6b@syntax-dispatch G3e8b@t '#(vector each-any)))) G3e6f@t))) (G2f6b@syntax-dispatch G3e6f@t '(any . any)))) G3e19@t))) (G2f6b@syntax-dispatch G3e19@t '(any any . any)))) G3e0b@t))) (G2f6b@syntax-dispatch G3e0b@t '(any any)))) G3df3@t))) (G2f6b@syntax-dispatch G3df3@t 'any))) G3deb@t))) (G2f6b@syntax-dispatch G3deb@t 'any))) G3de0@e))) (set! G3d6e@gen-ref (lambda (G3dc7@src G3dc8@var G3dc9@level G3dca@maps) (if (= G3dc9@level '0) (values G3dc8@var G3dca@maps) (if (null? G3dca@maps) (G3058@syntax-violation '#f '"missing ellipsis in syntax form" G3dc7@src) (call-with-values (lambda () (G3d6e@gen-ref G3dc7@src G3dc8@var (- G3dc9@level '1) (cdr G3dca@maps))) (lambda (G3dd1@G3dcf G3dd2@G3dd0) ((lambda (G3dd5@outer-maps G3dd6@outer-var) ((lambda (G3dd9@t) (if G3dd9@t ((lambda (G3ddb@b) (values (cdr G3ddb@b) G3dca@maps)) G3dd9@t) ((lambda (G3ddd@inner-var) (values G3ddd@inner-var (cons (cons (cons G3dd6@outer-var G3ddd@inner-var) (car G3dca@maps)) G3dd5@outer-maps))) (G2ce8@gen-lexical 'tmp)))) (assq G3dd6@outer-var (car G3dca@maps)))) G3dd2@G3dd0 G3dd1@G3dcf))))))) (set! G3d70@gen-append (lambda (G3dc3@x G3dc4@y) (if (fast-equal? G3dc4@y ''()) G3dc3@x (list 'append G3dc3@x G3dc4@y)))) (set! G3d72@gen-mappend (lambda (G3dbf@e G3dc0@map-env) (list 'apply '(primitive append) (G3d74@gen-map G3dbf@e G3dc0@map-env)))) (set! G3d74@gen-map (lambda (G3dad@e G3dae@map-env) ((lambda (G3db1@formals G3db2@actuals) (if (eq? (car G3dad@e) 'ref) (car G3db2@actuals) (if (for-all (lambda (G3db5@x) (and (eq? (car G3db5@x) 'ref) (memq (cadr G3db5@x) G3db1@formals))) (cdr G3dad@e)) ((lambda (G3db7@args) (cons 'map (cons (list 'primitive (car G3dad@e)) G3db7@args))) (map ((lambda (G3db9@r) (lambda (G3dbb@x) (cdr (assq (cadr G3dbb@x) G3db9@r)))) (map cons G3db1@formals G3db2@actuals)) (cdr G3dad@e))) (cons* 'map (list 'lambda G3db1@formals G3dad@e) G3db2@actuals)))) (map cdr G3dae@map-env) (map (lambda (G3dbd@x) (list 'ref (car G3dbd@x))) G3dae@map-env)))) (set! G3d76@gen-cons (lambda (G3d9d@e G3d9e@x G3d9f@y G3da0@xnew G3da1@ynew) ((lambda (G3da7@t) (if (memv G3da7@t '(quote)) (if (eq? (car G3da0@xnew) 'quote) ((lambda (G3da9@xnew G3daa@ynew) (if (and (eq? G3da9@xnew G3d9e@x) (eq? G3daa@ynew G3d9f@y)) (list 'quote G3d9d@e) (list 'quote (cons G3da9@xnew G3daa@ynew)))) (cadr G3da0@xnew) (cadr G3da1@ynew)) (if (null? (cadr G3da1@ynew)) (list 'list G3da0@xnew) (list 'cons G3da0@xnew G3da1@ynew))) (if (memv G3da7@t '(list)) (cons 'list (cons G3da0@xnew (cdr G3da1@ynew))) (list 'cons G3da0@xnew G3da1@ynew)))) (car G3da1@ynew)))) (set! G3d78@gen-vector (lambda (G3d97@e G3d98@ls G3d99@lsnew) (if (eq? (car G3d99@lsnew) 'quote) (if (eq? (cadr G3d99@lsnew) G3d98@ls) (list 'quote G3d97@e) (list 'quote (list->vector (cadr G3d99@lsnew)))) (if (eq? (car G3d99@lsnew) 'list) (cons 'vector (cdr G3d99@lsnew)) (list 'list->vector G3d99@lsnew))))) (set! G3d7a@regen (lambda (G3d91@x) ((lambda (G3d93@t) (if (memv G3d93@t '(ref)) (cadr G3d91@x) (if (memv G3d93@t '(primitive)) (list 'primitive (cadr G3d91@x)) (if (memv G3d93@t '(quote)) (list 'quote (cadr G3d91@x)) (if (memv G3d93@t '(lambda)) (G2cc6@G2c04@build-lambda '#f (cadr G3d91@x) (G3d7a@regen (caddr G3d91@x))) (if (memv G3d93@t '(map)) ((lambda (G3d95@ls) (cons '(primitive ellipsis-map) G3d95@ls)) (map G3d7a@regen (cdr G3d91@x))) (cons (list 'primitive (car G3d91@x)) (map G3d7a@regen (cdr G3d91@x))))))))) (car G3d91@x)))) (lambda (G3d7b@e G3d7c@r G3d7d@mr) ((lambda (G3d81@t) ((lambda (G3d83@ls/false) (if G3d83@ls/false (apply (lambda (G3d85@x) (call-with-values (lambda () (G3d6c@gen-syntax G3d7b@e G3d85@x G3d7c@r '() G2f6d@ellipsis? '#f)) (lambda (G3d89@G3d87 G3d8a@G3d88) ((lambda (G3d8d@maps G3d8e@e) (G3d7a@regen G3d8e@e)) G3d8a@G3d88 G3d89@G3d87)))) G3d83@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3d81@t))) (G2f6b@syntax-dispatch G3d81@t '(_ any)))) G3d7b@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2f79@core-macro-transformer (lambda (G3e9f@name) ((lambda (G3ea1@t) (if (memv G3ea1@t '(quote)) G2f1b@quote-transformer (if (memv G3ea1@t '(lambda)) G2f1f@lambda-transformer (if (memv G3ea1@t '(case-lambda)) G2f1d@case-lambda-transformer (if (memv G3ea1@t '(letrec)) G2f03@letrec-transformer (if (memv G3ea1@t '(letrec*)) G2f05@letrec*-transformer (if (memv G3ea1@t '(if)) G2f13@if-transformer (if (memv G3ea1@t '(and)) G2f15@and-transformer (if (memv G3ea1@t '(or)) G2f17@or-transformer (if (memv G3ea1@t '(foreign-call)) G2f67@foreign-call-transformer (if (memv G3ea1@t '(syntax-case)) G2f73@syntax-case-transformer (if (memv G3ea1@t '(syntax)) G2f77@syntax-transformer (if (memv G3ea1@t '(type-descriptor)) G2f09@type-descriptor-transformer (if (memv G3ea1@t '(record-type-descriptor)) G2f0b@record-type-descriptor-transformer (if (memv G3ea1@t '(record-constructor-descriptor)) G2f0d@record-constructor-descriptor-transformer (if (memv G3ea1@t '(fluid-let-syntax)) G2f07@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3e9f@name))))))))))))))))) G3e9f@name))) (set! G2f7b@file-options-macro (lambda (G3ea3@x) ((lambda (G3ea6@valid-option?) (begin (set! G3ea6@valid-option? (lambda (G3eaf@x) (and (G2d6c@id? G3eaf@x) (memq (G2d6e@id->sym G3eaf@x) '(no-fail no-create no-truncate))))) ((lambda (G3ea7@t) ((lambda (G3ea9@ls/false) (if (and G3ea9@ls/false (apply (lambda (G3eab@opt*) (and (for-all G3ea6@valid-option? G3eab@opt*) (G2909@G28aa@file-options-spec (map G2d6e@id->sym G3eab@opt*)))) G3ea9@ls/false)) (apply (lambda (G3ead@opt*) (G2f21@bless (list 'quote (G2909@G28aa@file-options-spec (map G2d6e@id->sym G3ead@opt*))))) G3ea9@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3ea7@t))) (G2f6b@syntax-dispatch G3ea7@t '(_ . each-any)))) G3ea3@x))) '#f))) (set! G2f7d@symbol-macro (lambda (G3eb1@x G3eb2@set) ((lambda (G3eb5@t) ((lambda (G3eb7@ls/false) (if (and G3eb7@ls/false (apply (lambda (G3eb9@name) (and (G2d6c@id? G3eb9@name) (memq (G2d6e@id->sym G3eb9@name) G3eb2@set))) G3eb7@ls/false)) (apply (lambda (G3ebb@name) (G2f21@bless (list 'quote G3ebb@name))) G3eb7@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3eb5@t))) (G2f6b@syntax-dispatch G3eb5@t '(_ any)))) G3eb1@x))) (set! G2f7f@macro-transformer (lambda (G3ebd@x) (if (procedure? G3ebd@x) G3ebd@x (if (symbol? G3ebd@x) ((lambda (G3ebf@t) (if (memv G3ebf@t '(define-record-type)) G2f5f@define-record-type-macro (if (memv G3ebf@t '(define-struct)) G2f5d@define-struct-macro (if (memv G3ebf@t '(include)) G2f53@include-macro (if (memv G3ebf@t '(cond)) G2f4f@cond-macro (if (memv G3ebf@t '(let)) G2f27@let-macro (if (memv G3ebf@t '(do)) G2f47@do-macro (if (memv G3ebf@t '(or)) G2f4b@or-macro (if (memv G3ebf@t '(and)) G2f4d@and-macro (if (memv G3ebf@t '(let*)) G2f49@let*-macro (if (memv G3ebf@t '(let-values)) G2f29@let-values-macro (if (memv G3ebf@t '(let*-values)) G2f2b@let*-values-macro (if (memv G3ebf@t '(syntax-rules)) G2f57@syntax-rules-macro (if (memv G3ebf@t '(quasiquote)) G2f59@quasiquote-macro (if (memv G3ebf@t '(quasisyntax)) G2f5b@quasisyntax-macro (if (memv G3ebf@t '(with-syntax)) G2f23@with-syntax-macro (if (memv G3ebf@t '(when)) G2f0f@when-macro (if (memv G3ebf@t '(unless)) G2f11@unless-macro (if (memv G3ebf@t '(case)) G2f19@case-macro (if (memv G3ebf@t '(identifier-syntax)) G2f45@identifier-syntax-macro (if (memv G3ebf@t '(time)) G2f3d@time-macro (if (memv G3ebf@t '(delay)) G2f3f@delay-macro (if (memv G3ebf@t '(assert)) G2f41@assert-macro (if (memv G3ebf@t '(endianness)) G2f43@endianness-macro (if (memv G3ebf@t '(guard)) G2f39@guard-macro (if (memv G3ebf@t '(define-enumeration)) G2f3b@define-enumeration-macro (if (memv G3ebf@t '(trace-lambda)) G2f2d@trace-lambda-macro (if (memv G3ebf@t '(trace-define)) G2f2f@trace-define-macro (if (memv G3ebf@t '(trace-define-syntax)) G2f31@trace-define-syntax-macro (if (memv G3ebf@t '(trace-let-syntax)) G2f35@trace-let-syntax-macro (if (memv G3ebf@t '(trace-letrec-syntax)) G2f37@trace-letrec-syntax-macro (if (memv G3ebf@t '(define-condition-type)) G2f61@define-condition-type-macro (if (memv G3ebf@t '(parameterize)) G2f65@parameterize-macro (if (memv G3ebf@t '(include-into)) G2f55@include-into-macro (if (memv G3ebf@t '(eol-style)) (lambda (G3ec1@x) (G2f7d@symbol-macro G3ec1@x '(none lf cr crlf nel crnel ls))) (if (memv G3ebf@t '(error-handling-mode)) (lambda (G3ec3@x) (G2f7d@symbol-macro G3ec3@x '(ignore raise replace))) (if (memv G3ebf@t '(buffer-mode)) (lambda (G3ec5@x) (G2f7d@symbol-macro G3ec5@x '(none line block))) (if (memv G3ebf@t '(file-options)) G2f7b@file-options-macro (if (memv G3ebf@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G2f63@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3ebd@x)))))))))))))))))))))))))))))))))))))))) G3ebd@x) (error 'core-macro-transformer '"BUG: invalid macro" G3ebd@x))))) (set! G2f81@local-macro-transformer (lambda (G3ec7@x) (car G3ec7@x))) (set! G2f83@do-macro-call (lambda (G3ec9@transformer G3eca@expr) ((lambda (G3ecd@out) (begin ((letrec ((G3ecf@f (lambda (G3ed1@x) (if (not (G2d34@stx? G3ed1@x)) (if (pair? G3ed1@x) (begin (G3ecf@f (car G3ed1@x)) (G3ecf@f (cdr G3ed1@x))) (if (vector? G3ed1@x) (vector-for-each G3ecf@f G3ed1@x) (if (symbol? G3ed1@x) (G3058@syntax-violation '#f '"raw symbol encountered in output of macro" G3eca@expr G3ed1@x) (void)))) (void))))) G3ecf@f) G3ecd@out) (G2d56@add-mark (G2d4c@gen-mark) G3ecd@out G3eca@expr))) (G3ec9@transformer (G2d56@add-mark G2d4e@anti-mark G3eca@expr '#f))))) (set! G2f85@chi-macro (lambda (G3ed3@p G3ed4@e) (G2f83@do-macro-call (G2f7f@macro-transformer G3ed3@p) G3ed4@e))) (set! G2f87@chi-local-macro (lambda (G3ed7@p G3ed8@e) (G2f83@do-macro-call (G2f81@local-macro-transformer G3ed7@p) G3ed8@e))) (set! G2f89@chi-global-macro (lambda (G3edb@p G3edc@e) ((lambda (G3edf@lib G3ee0@loc) (begin (G2b84@G2a2c@visit-library G3edf@lib) ((lambda (G3ee3@x) ((lambda (G3ee5@transformer) (G2f83@do-macro-call G3ee5@transformer G3edc@e)) (if (procedure? G3ee3@x) G3ee3@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3ee3@x)))) (symbol-value G3ee0@loc)))) (car G3edb@p) (cdr G3edb@p)))) (set! G2f8b@chi-expr* (lambda (G3ee7@e* G3ee8@r G3ee9@mr) (if (null? G3ee7@e*) '() ((lambda (G3eed@e) (cons G3eed@e (G2f8b@chi-expr* (cdr G3ee7@e*) G3ee8@r G3ee9@mr))) (G2f8f@chi-expr (car G3ee7@e*) G3ee8@r G3ee9@mr))))) (set! G2f8d@chi-application (lambda (G3eef@e G3ef0@r G3ef1@mr) ((lambda (G3ef5@t) ((lambda (G3ef7@ls/false) (if G3ef7@ls/false (apply (lambda (G3ef9@rator G3efa@rands) ((lambda (G3efd@rator) (cons G3efd@rator (G2f8b@chi-expr* G3efa@rands G3ef0@r G3ef1@mr))) (G2f8f@chi-expr G3ef9@rator G3ef0@r G3ef1@mr))) G3ef7@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3ef5@t))) (G2f6b@syntax-dispatch G3ef5@t '(any . each-any)))) G3eef@e))) (set! G2f8f@chi-expr (lambda (G3eff@e G3f00@r G3f01@mr) (call-with-values (lambda () (G2d94@syntax-type G3eff@e G3f00@r)) (lambda (G3f08@G3f05 G3f09@G3f06 G3f0a@G3f07) ((lambda (G3f0e@kwd G3f0f@value G3f10@type) ((lambda (G3f14@t) (if (memv G3f14@t '(core-macro)) ((lambda (G3f16@transformer) (G3f16@transformer G3eff@e G3f00@r G3f01@mr)) (G2f79@core-macro-transformer G3f0f@value)) (if (memv G3f14@t '(global)) ((lambda (G3f18@lib) ((lambda (G3f1a@loc) ((lambda () (begin ((G2fd8@inv-collector) G3f18@lib) G3f1a@loc)))) (cdr G3f0f@value))) (car G3f0f@value)) (if (memv G3f14@t '(core-prim)) ((lambda (G3f1c@name) (list 'primitive G3f1c@name)) G3f0f@value) (if (memv G3f14@t '(call)) (G2f8d@chi-application G3eff@e G3f00@r G3f01@mr) (if (memv G3f14@t '(lexical)) ((lambda (G3f1e@lex) G3f1e@lex) (G2ef7@lexical-var G3f0f@value)) (if (memv G3f14@t '(global-macro global-macro!)) (G2f8f@chi-expr (G2f89@chi-global-macro G3f0f@value G3eff@e) G3f00@r G3f01@mr) (if (memv G3f14@t '(local-macro local-macro!)) (G2f8f@chi-expr (G2f87@chi-local-macro G3f0f@value G3eff@e) G3f00@r G3f01@mr) (if (memv G3f14@t '(macro macro!)) (G2f8f@chi-expr (G2f85@chi-macro G3f0f@value G3eff@e) G3f00@r G3f01@mr) (if (memv G3f14@t '(constant)) ((lambda (G3f20@datum) (list 'quote G3f20@datum)) G3f0f@value) (if (memv G3f14@t '(set!)) (G2f91@chi-set! G3eff@e G3f00@r G3f01@mr) (if (memv G3f14@t '(begin)) ((lambda (G3f22@t) ((lambda (G3f24@ls/false) (if G3f24@ls/false (apply (lambda (G3f26@x G3f27@x*) (G2cc9@G2c3a@build-sequence '#f (G2f8b@chi-expr* (cons G3f26@x G3f27@x*) G3f00@r G3f01@mr))) G3f24@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3f22@t))) (G2f6b@syntax-dispatch G3f22@t '(_ any . each-any)))) G3eff@e) (if (memv G3f14@t '(let-syntax letrec-syntax)) ((lambda (G3f2a@t) ((lambda (G3f2c@ls/false) (if (and G3f2c@ls/false (apply (lambda (G3f2e@xlhs* G3f2f@xrhs* G3f30@xbody G3f31@xbody*) (if (not (G2d76@valid-bound-ids? G3f2e@xlhs*)) (G3058@syntax-violation '#f '"invalid identifiers" G3eff@e) (void))) G3f2c@ls/false)) (apply (lambda (G3f36@xlhs* G3f37@xrhs* G3f38@xbody G3f39@xbody*) ((lambda (G3f3e@xlab*) ((lambda (G3f40@xrib) ((lambda (G3f42@xb*) ((lambda () (G2cc9@G2c3a@build-sequence '#f (G2f8b@chi-expr* (map (lambda (G3f44@x) (G2d58@add-subst G3f40@xrib G3f44@x)) (cons G3f38@xbody G3f39@xbody*)) (append (map cons G3f3e@xlab* G3f42@xb*) G3f00@r) (append (map cons G3f3e@xlab* G3f42@xb*) G3f01@mr)))))) (map (lambda (G3f46@x) (G2dac@make-eval-transformer (G2fca@expand-transformer (if (eq? G3f10@type 'let-syntax) G3f46@x (G2d58@add-subst G3f40@xrib G3f46@x)) G3f01@mr))) G3f37@xrhs*))) (G2d27@make-full-rib G3f36@xlhs* G3f3e@xlab*))) (map G2cec@gen-label G3f36@xlhs*))) G3f2c@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3f2a@t))) (G2f6b@syntax-dispatch G3f2a@t '(_ #(each (any any)) any . each-any)))) G3eff@e) (if (memv G3f14@t '(displaced-lexical)) (G3058@syntax-violation '#f '"identifier out of context" G3eff@e) (if (memv G3f14@t '(syntax)) (G3058@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3eff@e) (if (memv G3f14@t '(define define-syntax module import library)) (G3058@syntax-violation '#f (string-append ((lambda (G3f48@t) (if (memv G3f48@t '(define)) '"a definition" (if (memv G3f48@t '(define-syntax)) '"a define-syntax" (if (memv G3f48@t '(module)) '"a module definition" (if (memv G3f48@t '(library)) '"a library definition" (if (memv G3f48@t '(import)) '"an import declaration" (if (memv G3f48@t '(export)) '"an export declaration" '"a non-expression"))))))) G3f10@type) '" was found where an expression was expected") G3eff@e) (if (memv G3f14@t '(mutable)) (G3058@syntax-violation '#f '"attempt to reference an unexportable variable" G3eff@e) (G3058@syntax-violation '#f '"invalid expression" G3eff@e)))))))))))))))))) G3f10@type)) G3f0a@G3f07 G3f09@G3f06 G3f08@G3f05))))) (set! G2f91@chi-set! (lambda (G3f4a@e G3f4b@r G3f4c@mr) ((lambda (G3f50@t) ((lambda (G3f52@ls/false) (if (and G3f52@ls/false (apply (lambda (G3f54@x G3f55@v) (G2d6c@id? G3f54@x)) G3f52@ls/false)) (apply (lambda (G3f58@x G3f59@v) (call-with-values (lambda () (G2d94@syntax-type G3f58@x G3f4b@r)) (lambda (G3f5f@G3f5c G3f60@G3f5d G3f61@G3f5e) ((lambda (G3f65@kwd G3f66@value G3f67@type) ((lambda (G3f6b@t) (if (memv G3f6b@t '(lexical)) (begin (G2efb@set-lexical-mutable! G3f66@value '#t) (list 'set! (G2ef7@lexical-var G3f66@value) (G2f8f@chi-expr G3f59@v G3f4b@r G3f4c@mr))) (if (memv G3f6b@t '(core-prim)) (G3058@syntax-violation '#f '"cannot modify imported core primitive" G3f4a@e) (if (memv G3f6b@t '(global)) (G3058@syntax-violation '#f '"attempt to modify imported binding" G3f4a@e) (if (memv G3f6b@t '(global-macro!)) (G2f8f@chi-expr (G2f89@chi-global-macro G3f66@value G3f4a@e) G3f4b@r G3f4c@mr) (if (memv G3f6b@t '(local-macro!)) (G2f8f@chi-expr (G2f87@chi-local-macro G3f66@value G3f4a@e) G3f4b@r G3f4c@mr) (if (memv G3f6b@t '(mutable)) (G3058@syntax-violation '#f '"attempt to assign to an unexportable variable" G3f4a@e) (G3058@syntax-violation '#f '"invalid syntax" G3f4a@e)))))))) G3f67@type)) G3f61@G3f5e G3f60@G3f5d G3f5f@G3f5c)))) G3f52@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3f50@t))) (G2f6b@syntax-dispatch G3f50@t '(_ any any)))) G3f4a@e))) (set! G2f93@verify-formals (lambda (G3f6d@fmls G3f6e@stx) ((lambda (G3f71@t) ((lambda (G3f73@ls/false) (if G3f73@ls/false (apply (lambda (G3f75@x*) (if (not (G2d76@valid-bound-ids? G3f75@x*)) (G2f25@invalid-fmls-error G3f6e@stx G3f6d@fmls) (void))) G3f73@ls/false) ((lambda (G3f77@t) ((lambda (G3f79@ls/false) (if G3f79@ls/false (apply (lambda (G3f7b@x* G3f7c@x) (if (not (G2d76@valid-bound-ids? (cons G3f7c@x G3f7b@x*))) (G2f25@invalid-fmls-error G3f6e@stx G3f6d@fmls) (void))) G3f79@ls/false) ((lambda (G3f7f@t) ((lambda (G3f81@ls/false) (if G3f81@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid syntax" G3f6e@stx)) G3f81@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3f7f@t))) (G2f6b@syntax-dispatch G3f7f@t '_))) G3f77@t))) (G2f6b@syntax-dispatch G3f77@t '#(each+ any () any)))) G3f71@t))) (G2f6b@syntax-dispatch G3f71@t 'each-any))) G3f6d@fmls))) (set! G2f95@chi-lambda-clause (lambda (G3f83@stx G3f84@fmls G3f85@body* G3f86@r G3f87@mr) ((lambda (G3f8d@t) ((lambda (G3f8f@ls/false) (if G3f8f@ls/false (apply (lambda (G3f91@x*) (begin (G2f93@verify-formals G3f84@fmls G3f83@stx) ((lambda (G3f93@lex* G3f94@lab*) (values G3f93@lex* (G2fa5@chi-internal (G2d58@add-subst (G2d27@make-full-rib G3f91@x* G3f94@lab*) G3f85@body*) (G2eff@add-lexicals G3f94@lab* G3f93@lex* G3f86@r) G3f87@mr))) (map G2ce8@gen-lexical G3f91@x*) (map G2cec@gen-label G3f91@x*)))) G3f8f@ls/false) ((lambda (G3f97@t) ((lambda (G3f99@ls/false) (if G3f99@ls/false (apply (lambda (G3f9b@x* G3f9c@x) (begin (G2f93@verify-formals G3f84@fmls G3f83@stx) ((lambda (G3f9f@lex* G3fa0@lab* G3fa1@lex G3fa2@lab) (values (append G3f9f@lex* G3fa1@lex) (G2fa5@chi-internal (G2d58@add-subst (G2d27@make-full-rib (cons G3f9c@x G3f9b@x*) (cons G3fa2@lab G3fa0@lab*)) G3f85@body*) (G2eff@add-lexicals (cons G3fa2@lab G3fa0@lab*) (cons G3fa1@lex G3f9f@lex*) G3f86@r) G3f87@mr))) (map G2ce8@gen-lexical G3f9b@x*) (map G2cec@gen-label G3f9b@x*) (G2ce8@gen-lexical G3f9c@x) (G2cec@gen-label G3f9c@x)))) G3f99@ls/false) ((lambda (G3fa7@t) ((lambda (G3fa9@ls/false) (if G3fa9@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid syntax" G3f84@fmls)) G3fa9@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G3fa7@t))) (G2f6b@syntax-dispatch G3fa7@t '_))) G3f97@t))) (G2f6b@syntax-dispatch G3f97@t '#(each+ any () any)))) G3f8d@t))) (G2f6b@syntax-dispatch G3f8d@t 'each-any))) G3f84@fmls))) (set! G2f97@chi-lambda-clause* (lambda (G3fab@stx G3fac@fmls* G3fad@body** G3fae@r G3faf@mr) (if (null? G3fac@fmls*) (values '() '()) (call-with-values (lambda () (G2f95@chi-lambda-clause G3fab@stx (car G3fac@fmls*) (car G3fad@body**) G3fae@r G3faf@mr)) (lambda (G3fb7@G3fb5 G3fb8@G3fb6) ((lambda (G3fbb@b G3fbc@a) (call-with-values (lambda () (G2f97@chi-lambda-clause* G3fab@stx (cdr G3fac@fmls*) (cdr G3fad@body**) G3fae@r G3faf@mr)) (lambda (G3fc1@G3fbf G3fc2@G3fc0) ((lambda (G3fc5@b* G3fc6@a*) (values (cons G3fbc@a G3fc6@a*) (cons G3fbb@b G3fc5@b*))) G3fc2@G3fc0 G3fc1@G3fbf)))) G3fb8@G3fb6 G3fb7@G3fb5)))))) (set! G2f99@chi-defun (lambda (G3fc9@x G3fca@r G3fcb@mr) ((lambda (G3fcf@fmls G3fd0@body*) (call-with-values (lambda () (G2f95@chi-lambda-clause G3fcf@fmls G3fcf@fmls G3fd0@body* G3fca@r G3fcb@mr)) (lambda (G3fd5@G3fd3 G3fd6@G3fd4) ((lambda (G3fd9@body G3fda@fmls) (G2cc6@G2c04@build-lambda '#f G3fda@fmls G3fd9@body)) G3fd6@G3fd4 G3fd5@G3fd3)))) (car G3fc9@x) (cdr G3fc9@x)))) (set! G2f9b@chi-rhs (lambda (G3fdd@rhs G3fde@r G3fdf@mr) ((lambda (G3fe3@t) (if (memv G3fe3@t '(defun)) (G2f99@chi-defun (cdr G3fdd@rhs) G3fde@r G3fdf@mr) (if (memv G3fe3@t '(expr)) ((lambda (G3fe5@expr) (G2f8f@chi-expr G3fe5@expr G3fde@r G3fdf@mr)) (cdr G3fdd@rhs)) (if (memv G3fe3@t '(top-expr)) ((lambda (G3fe7@expr) (G2cc9@G2c3a@build-sequence '#f (list (G2f8f@chi-expr G3fe7@expr G3fde@r G3fdf@mr) (G2cca@G2c3c@build-void)))) (cdr G3fdd@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G3fdd@rhs))))) (car G3fdd@rhs)))) (set! G2f9d@expand-interaction-rhs*/init* (lambda (G3fe9@lhs* G3fea@rhs* G3feb@init* G3fec@r G3fed@mr) ((letrec ((G3ff3@f (lambda (G3ff5@lhs* G3ff6@rhs*) (if (null? G3ff5@lhs*) (map (lambda (G3ff9@x) (G2f8f@chi-expr G3ff9@x G3fec@r G3fed@mr)) G3feb@init*) ((lambda (G3ffb@lhs G3ffc@rhs) ((lambda (G3fff@t) (if (memv G3fff@t '(defun)) ((lambda (G4001@rhs) (cons (list 'set! G3ffb@lhs G4001@rhs) (G3ff3@f (cdr G3ff5@lhs*) (cdr G3ff6@rhs*)))) (G2f99@chi-defun (cdr G3ffc@rhs) G3fec@r G3fed@mr)) (if (memv G3fff@t '(expr)) ((lambda (G4003@rhs) (cons (list 'set! G3ffb@lhs G4003@rhs) (G3ff3@f (cdr G3ff5@lhs*) (cdr G3ff6@rhs*)))) (G2f8f@chi-expr (cdr G3ffc@rhs) G3fec@r G3fed@mr)) (if (memv G3fff@t '(top-expr)) ((lambda (G4005@e) (cons G4005@e (G3ff3@f (cdr G3ff5@lhs*) (cdr G3ff6@rhs*)))) (G2f8f@chi-expr (cdr G3ffc@rhs) G3fec@r G3fed@mr)) (error 'expand-interaction '"invallid" G3ffc@rhs))))) (car G3ffc@rhs))) (car G3ff5@lhs*) (car G3ff6@rhs*)))))) G3ff3@f) G3fe9@lhs* G3fea@rhs*))) (set! G2f9f@chi-rhs* (lambda (G4007@rhs* G4008@r G4009@mr) ((letrec ((G400d@f (lambda (G400f@ls) (if (null? G400f@ls) '() ((lambda (G4011@a) (cons G4011@a (G400d@f (cdr G400f@ls)))) (G2f9b@chi-rhs (car G400f@ls) G4008@r G4009@mr)))))) G400d@f) G4007@rhs*))) (set! G2fa1@find-bound=? (lambda (G4013@x G4014@lhs* G4015@rhs*) (if (null? G4014@lhs*) '#f (if (G2d72@bound-id=? G4013@x (car G4014@lhs*)) (car G4015@rhs*) (G2fa1@find-bound=? G4013@x (cdr G4014@lhs*) (cdr G4015@rhs*)))))) (set! G2fa3@find-dups (lambda (G4019@ls) ((letrec ((G401b@f (lambda (G401d@ls G401e@dups) (if (null? G401d@ls) G401e@dups ((lambda (G4021@t) (if G4021@t ((lambda (G4023@x) (G401b@f (cdr G401d@ls) (cons (list (car G401d@ls) G4023@x) G401e@dups))) G4021@t) (G401b@f (cdr G401d@ls) G401e@dups))) (G2fa1@find-bound=? (car G401d@ls) (cdr G401d@ls) (cdr G401d@ls))))))) G401b@f) G4019@ls '()))) (set! G2fa5@chi-internal (lambda (G4025@e* G4026@r G4027@mr) ((lambda (G402b@rib) (call-with-values (lambda () (G2fc8@chi-body* (map (lambda (G4035@x) (G2d58@add-subst G402b@rib G4035@x)) (G2d6a@syntax->list G4025@e*)) G4026@r G4027@mr '() '() '() '() '() G402b@rib '#f)) (lambda (G4037@G402d G4038@G402e G4039@G402f G403a@G4030 G403b@G4031 G403c@G4032 G403d@G4033 G403e@G4034) ((lambda (G4047@_exp* G4048@kwd* G4049@mod** G404a@rhs* G404b@lex* G404c@mr G404d@r G404e@e*) (begin (if (null? G404e@e*) (G3058@syntax-violation '#f '"no expression in body" G404e@e*) (void)) ((lambda (G4057@init*) ((lambda (G4059@rhs*) ((lambda () (G2ccc@G2c40@build-letrec* '#f (reverse G404b@lex*) (reverse G4059@rhs*) (G2cc9@G2c3a@build-sequence '#f G4057@init*))))) (G2f9f@chi-rhs* G404a@rhs* G404d@r G404c@mr))) (G2f8b@chi-expr* (append (apply append (reverse G4049@mod**)) G404e@e*) G404d@r G404c@mr)))) G403e@G4034 G403d@G4033 G403c@G4032 G403b@G4031 G403a@G4030 G4039@G402f G4038@G402e G4037@G402d)))) (G2d17@make-empty-rib)))) (set! G2fa7@parse-module (lambda (G405b@e) ((lambda (G405d@t) ((lambda (G405f@ls/false) (if G405f@ls/false (apply (lambda (G4061@export* G4062@b*) (begin (if (not (for-all G2d6c@id? G4061@export*)) (G3058@syntax-violation '#f '"module exports must be identifiers" G405b@e) (void)) (values '#f (list->vector G4061@export*) G4062@b*))) G405f@ls/false) ((lambda (G4065@t) ((lambda (G4067@ls/false) (if G4067@ls/false (apply (lambda (G4069@name G406a@export* G406b@b*) (begin (if (not (G2d6c@id? G4069@name)) (G3058@syntax-violation '#f '"module name must be an identifier" G405b@e) (void)) (if (not (for-all G2d6c@id? G406a@export*)) (G3058@syntax-violation '#f '"module exports must be identifiers" G405b@e) (void)) (values G4069@name (list->vector G406a@export*) G406b@b*))) G4067@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G4065@t))) (G2f6b@syntax-dispatch G4065@t '(_ any each-any . each-any)))) G405d@t))) (G2f6b@syntax-dispatch G405d@t '(_ each-any . each-any)))) G405b@e))) (set! G2fad@G2fa8 (make-record-type-descriptor 'module-interface '#f 'G2fab '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G2faf@G2faa '#f) (set! G2fb1@G2fa9 (make-record-constructor-descriptor G2fad@G2fa8 '#f G2faf@G2faa)) (set! G2fb4@module-interface? (record-predicate G2fad@G2fa8)) (set! G2fb6@make-module-interface (record-constructor G2fb1@G2fa9)) (set! G2fb8@module-interface-first-mark (record-accessor G2fad@G2fa8 '0)) (set! G2fba@module-interface-exp-id-vec (record-accessor G2fad@G2fa8 '1)) (set! G2fbc@module-interface-exp-lab-vec (record-accessor G2fad@G2fa8 '2)) (set! G2fbe@set-module-interface-first-mark! (record-mutator G2fad@G2fa8 '0)) (set! G2fc0@set-module-interface-exp-id-vec! (record-mutator G2fad@G2fa8 '1)) (set! G2fc2@set-module-interface-exp-lab-vec! (record-mutator G2fad@G2fa8 '2)) (set! G2fc4@module-interface-exp-id* (lambda (G406f@iface G4070@id) ((lambda (G4074@diff-marks) (begin (set! G4074@diff-marks (lambda (G407b@ls G407c@x) (begin (if (null? G407b@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G407f@a) (if (eq? G407f@a G407c@x) '() (cons G407f@a (G4074@diff-marks (cdr G407b@ls) G407c@x)))) (car G407b@ls))))) ((lambda (G4075@diff G4076@id-vec) (if (null? G4075@diff) G4076@id-vec (vector-map (lambda (G4079@x) (G2d36@make-stx (G2d38@stx-expr G4079@x) (append G4075@diff (G2d3a@stx-mark* G4079@x)) '() '())) G4076@id-vec))) (G4074@diff-marks (G2d3a@stx-mark* G4070@id) (G2fb8@module-interface-first-mark G406f@iface)) (G2fba@module-interface-exp-id-vec G406f@iface)))) '#f))) (set! G2fc6@chi-internal-module (lambda (G4081@e G4082@r G4083@mr G4084@lex* G4085@rhs* G4086@mod** G4087@kwd*) (call-with-values (lambda () (G2fa7@parse-module G4081@e)) (lambda (G4092@G408f G4093@G4090 G4094@G4091) ((lambda (G4098@e* G4099@exp-id* G409a@name) ((lambda (G409e@rib) ((lambda (G40a0@e*) ((lambda () (call-with-values (lambda () (G2fc8@chi-body* G40a0@e* G4082@r G4083@mr G4084@lex* G4085@rhs* G4086@mod** G4087@kwd* '() G409e@rib '#f)) (lambda (G40aa@G40a2 G40ab@G40a3 G40ac@G40a4 G40ad@G40a5 G40ae@G40a6 G40af@G40a7 G40b0@G40a8 G40b1@G40a9) ((lambda (G40ba@_exp* G40bb@kwd* G40bc@mod** G40bd@rhs* G40be@lex* G40bf@mr G40c0@r G40c1@e*) ((lambda (G40ca@exp-lab* G40cb@mod**) (if (not G409a@name) (values G40be@lex* G40bd@rhs* G4099@exp-id* G40ca@exp-lab* G40c0@r G40bf@mr G40cb@mod** G40bb@kwd*) ((lambda (G40ce@lab G40cf@iface) (values G40be@lex* G40bd@rhs* (vector G409a@name) (vector G40ce@lab) (cons (cons G40ce@lab (cons '$module G40cf@iface)) G40c0@r) (cons (cons G40ce@lab (cons '$module G40cf@iface)) G40bf@mr) G40cb@mod** G40bb@kwd*)) (G2cec@gen-label 'module) (G2fb6@make-module-interface (car (G2d3a@stx-mark* G409a@name)) (vector-map (lambda (G40d2@x) (G2d36@make-stx (G2d38@stx-expr G40d2@x) (G2d3a@stx-mark* G40d2@x) '() '())) G4099@exp-id*) G40ca@exp-lab*)))) (vector-map (lambda (G40d4@x) (or (G2d86@id->label (G2d36@make-stx (G2d6e@id->sym G40d4@x) (G2d3a@stx-mark* G40d4@x) (list G409e@rib) '())) (G3058@syntax-violation '#f '"cannot find module export" G40d4@x))) G4099@exp-id*) (cons G40c1@e* G40bc@mod**))) G40b1@G40a9 G40b0@G40a8 G40af@G40a7 G40ae@G40a6 G40ad@G40a5 G40ac@G40a4 G40ab@G40a3 G40aa@G40a2)))))) (map (lambda (G40d6@x) (G2d58@add-subst G409e@rib G40d6@x)) (G2d6a@syntax->list G4098@e*)))) (G2d17@make-empty-rib))) G4094@G4091 G4093@G4090 G4092@G408f))))) (set! G2fc8@chi-body* (lambda (G40d8@e* G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40de@kwd* G40df@exp* G40e0@rib G40e1@top?) (if (null? G40d8@e*) (values G40d8@e* G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40de@kwd* G40df@exp*) ((lambda (G40ec@e) (call-with-values (lambda () (G2d94@syntax-type G40ec@e G40d9@r)) (lambda (G40f1@G40ee G40f2@G40ef G40f3@G40f0) ((lambda (G40f7@kwd G40f8@value G40f9@type) ((lambda (G40fd@kwd*) ((lambda (G40ff@t) (if (memv G40ff@t '(define)) (call-with-values (lambda () (G2eef@parse-define G40ec@e)) (lambda (G4103@G4101 G4104@G4102) ((lambda (G4107@rhs G4108@id) (begin (if (G2d7a@bound-id-member? G4108@id G40fd@kwd*) (G3058@syntax-violation '#f '"cannot redefine keyword" G40ec@e) (void)) (call-with-values (lambda () (G2cf0@gen-define-label+loc G4108@id G40e0@rib)) (lambda (G410d@G410b G410e@G410c) ((lambda (G4111@lex G4112@lab) (begin (G2d1d@extend-rib! G40e0@rib G4108@id G4112@lab) (G2fc8@chi-body* (cdr G40d8@e*) (G2efd@add-lexical G4112@lab G4111@lex G40d9@r) G40da@mr (cons G4111@lex G40db@lex*) (cons G4107@rhs G40dc@rhs*) G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?))) G410e@G410c G410d@G410b))))) G4104@G4102 G4103@G4101))) (if (memv G40ff@t '(define-syntax)) (call-with-values (lambda () (G2ef1@parse-define-syntax G40ec@e)) (lambda (G4117@G4115 G4118@G4116) ((lambda (G411b@rhs G411c@id) (begin (if (G2d7a@bound-id-member? G411c@id G40fd@kwd*) (G3058@syntax-violation '#f '"cannot redefine keyword" G40ec@e) (void)) ((lambda (G411f@lab G4120@expanded-rhs) (begin (G2d1d@extend-rib! G40e0@rib G411c@id G411f@lab) ((lambda (G4123@b) (G2fc8@chi-body* (cdr G40d8@e*) (cons (cons G411f@lab G4123@b) G40d9@r) (cons (cons G411f@lab G4123@b) G40da@mr) G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?)) (G2dac@make-eval-transformer G4120@expanded-rhs)))) (G2cf2@gen-define-label G411c@id G40e0@rib) (G2fca@expand-transformer G411b@rhs G40da@mr)))) G4118@G4116 G4117@G4115))) (if (memv G40ff@t '(let-syntax letrec-syntax)) ((lambda (G4125@t) ((lambda (G4127@ls/false) (if (and G4127@ls/false (apply (lambda (G4129@xlhs* G412a@xrhs* G412b@xbody*) (if (not (G2d76@valid-bound-ids? G4129@xlhs*)) (G3058@syntax-violation '#f '"invalid identifiers" G40ec@e) (void))) G4127@ls/false)) (apply (lambda (G412f@xlhs* G4130@xrhs* G4131@xbody*) ((lambda (G4135@xlab*) ((lambda (G4137@xrib) ((lambda (G4139@xb*) ((lambda () (G2fc8@chi-body* (append (map (lambda (G413b@x) (G2d58@add-subst G4137@xrib G413b@x)) G4131@xbody*) (cdr G40d8@e*)) (append (map cons G4135@xlab* G4139@xb*) G40d9@r) (append (map cons G4135@xlab* G4139@xb*) G40da@mr) G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?)))) (map (lambda (G413d@x) (G2dac@make-eval-transformer (G2fca@expand-transformer (if (eq? G40f9@type 'let-syntax) G413d@x (G2d58@add-subst G4137@xrib G413d@x)) G40da@mr))) G4130@xrhs*))) (G2d27@make-full-rib G412f@xlhs* G4135@xlab*))) (map G2cec@gen-label G412f@xlhs*))) G4127@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G4125@t))) (G2f6b@syntax-dispatch G4125@t '(_ #(each (any any)) . each-any)))) G40ec@e) (if (memv G40ff@t '(begin)) ((lambda (G413f@t) ((lambda (G4141@ls/false) (if G4141@ls/false (apply (lambda (G4143@x*) (G2fc8@chi-body* (append G4143@x* (cdr G40d8@e*)) G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?)) G4141@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G413f@t))) (G2f6b@syntax-dispatch G413f@t '(_ . each-any)))) G40ec@e) (if (memv G40ff@t '(global-macro global-macro!)) (G2fc8@chi-body* (cons (G2d58@add-subst G40e0@rib (G2f89@chi-global-macro G40f8@value G40ec@e)) (cdr G40d8@e*)) G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?) (if (memv G40ff@t '(local-macro local-macro!)) (G2fc8@chi-body* (cons (G2d58@add-subst G40e0@rib (G2f87@chi-local-macro G40f8@value G40ec@e)) (cdr G40d8@e*)) G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?) (if (memv G40ff@t '(macro macro!)) (G2fc8@chi-body* (cons (G2d58@add-subst G40e0@rib (G2f85@chi-macro G40f8@value G40ec@e)) (cdr G40d8@e*)) G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?) (if (memv G40ff@t '(module)) (call-with-values (lambda () (G2fc6@chi-internal-module G40ec@e G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd*)) (lambda (G414d@G4145 G414e@G4146 G414f@G4147 G4150@G4148 G4151@G4149 G4152@G414a G4153@G414b G4154@G414c) ((lambda (G415d@kwd* G415e@mod** G415f@mr G4160@r G4161@m-exp-lab* G4162@m-exp-id* G4163@rhs* G4164@lex*) (begin (vector-for-each (lambda (G416d@id G416e@lab) (G2d1d@extend-rib! G40e0@rib G416d@id G416e@lab)) G4162@m-exp-id* G4161@m-exp-lab*) (G2fc8@chi-body* (cdr G40d8@e*) G4160@r G415f@mr G4164@lex* G4163@rhs* G415e@mod** G415d@kwd* G40df@exp* G40e0@rib G40e1@top?))) G4154@G414c G4153@G414b G4152@G414a G4151@G4149 G4150@G4148 G414f@G4147 G414e@G4146 G414d@G4145))) (if (memv G40ff@t '(library)) (begin (G3038@library-expander (G2d82@stx->datum G40ec@e)) (G2fc8@chi-body* (cdr G40d8@e*) G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?)) (if (memv G40ff@t '(export)) ((lambda (G4171@t) ((lambda (G4173@ls/false) (if G4173@ls/false (apply (lambda (G4175@exp-decl*) (G2fc8@chi-body* (cdr G40d8@e*) G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* (append G4175@exp-decl* G40df@exp*) G40e0@rib G40e1@top?)) G4173@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G4171@t))) (G2f6b@syntax-dispatch G4171@t '(_ . each-any)))) G40ec@e) (if (memv G40ff@t '(import)) ((lambda () ((lambda (G4178@module-import? G417a@module-import G417c@library-import) (begin (set! G4178@module-import? (lambda (G41c4@e) ((lambda (G41c6@t) ((lambda (G41c8@ls/false) (if (and G41c8@ls/false (apply (lambda (G41ca@id) (G2d6c@id? G41ca@id)) G41c8@ls/false)) (apply (lambda (G41cc@id) '#t) G41c8@ls/false) ((lambda (G41ce@t) ((lambda (G41d0@ls/false) (if G41d0@ls/false (apply (lambda (G41d2@imp*) '#f) G41d0@ls/false) ((lambda (G41d4@t) ((lambda (G41d6@ls/false) (if G41d6@ls/false (apply (lambda () (G3058@syntax-violation '#f '"malformed import form" G41c4@e)) G41d6@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G41d4@t))) (G2f6b@syntax-dispatch G41d4@t '_))) G41ce@t))) (G2f6b@syntax-dispatch G41ce@t '(_ . each-any)))) G41c6@t))) (G2f6b@syntax-dispatch G41c6@t '(_ any)))) G41c4@e))) (set! G417a@module-import (lambda (G41a5@e G41a6@r) ((lambda (G41a9@t) ((lambda (G41ab@ls/false) (if (and G41ab@ls/false (apply (lambda (G41ad@id) (G2d6c@id? G41ad@id)) G41ab@ls/false)) (apply (lambda (G41af@id) (call-with-values (lambda () (G2d94@syntax-type G41af@id G41a6@r)) (lambda (G41b4@G41b1 G41b5@G41b2 G41b6@G41b3) ((lambda (G41ba@kwd G41bb@value G41bc@type) ((lambda (G41c0@t) (if (memv G41c0@t '($module)) ((lambda (G41c2@iface) (values (G2fc4@module-interface-exp-id* G41c2@iface G41af@id) (G2fbc@module-interface-exp-lab-vec G41c2@iface))) G41bb@value) (G3058@syntax-violation '#f '"invalid import" G41a5@e))) G41bc@type)) G41b6@G41b3 G41b5@G41b2 G41b4@G41b1)))) G41ab@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G41a9@t))) (G2f6b@syntax-dispatch G41a9@t '(_ any)))) G41a5@e))) (set! G417c@library-import (lambda (G418b@e) ((lambda (G418d@t) ((lambda (G418f@ls/false) (if G418f@ls/false (apply (lambda (G4191@ctxt G4192@imp*) (call-with-values (lambda () (G2fd2@parse-import-spec* (G305e@syntax->datum G4192@imp*))) (lambda (G4197@G4195 G4198@G4196) ((lambda (G419b@subst-labels G419c@subst-names) (values (vector-map (lambda (G419f@name) (G2d4a@datum->stx G4191@ctxt G419f@name)) G419c@subst-names) G419b@subst-labels)) G4198@G4196 G4197@G4195)))) G418f@ls/false) ((lambda (G41a1@t) ((lambda (G41a3@ls/false) (if G41a3@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid import form" G418b@e)) G41a3@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G41a1@t))) (G2f6b@syntax-dispatch G41a1@t '_))) G418d@t))) (G2f6b@syntax-dispatch G418d@t '(any . each-any)))) G418b@e))) (begin (call-with-values (lambda () (if (G4178@module-import? G40ec@e) (G417a@module-import G40ec@e G40d9@r) (G417c@library-import G40ec@e))) (lambda (G417f@G417d G4180@G417e) ((lambda (G4183@lab* G4184@id*) (vector-for-each (lambda (G4187@id G4188@lab) (G2d1d@extend-rib! G40e0@rib G4187@id G4188@lab)) G4184@id* G4183@lab*)) G4180@G417e G417f@G417d))) (G2fc8@chi-body* (cdr G40d8@e*) G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?)))) '#f '#f '#f))) (if G40e1@top? (G2fc8@chi-body* (cdr G40d8@e*) G40d9@r G40da@mr (cons (G2ce8@gen-lexical 'dummy) G40db@lex*) (cons (cons 'top-expr G40ec@e) G40dc@rhs*) G40dd@mod** G40fd@kwd* G40df@exp* G40e0@rib G40e1@top?) (values G40d8@e* G40d9@r G40da@mr G40db@lex* G40dc@rhs* G40dd@mod** G40fd@kwd* G40df@exp*)))))))))))))) G40f9@type)) (if (G2d6c@id? G40f7@kwd) (cons G40f7@kwd G40de@kwd*) G40de@kwd*))) G40f3@G40f0 G40f2@G40ef G40f1@G40ee)))) (car G40d8@e*))))) (set! G2fca@expand-transformer (lambda (G41d8@expr G41d9@r) ((lambda (G41dc@rtc) ((lambda (G41de@expanded-rhs) (begin (for-each ((lambda (G41e0@mark-visit) (lambda (G41e2@x) (begin (G2b83@G2a2a@invoke-library G41e2@x) (G41e0@mark-visit G41e2@x)))) (G2fda@vis-collector)) (G41dc@rtc)) G41de@expanded-rhs)) ((lambda (G41e8@G41e4 G41e9@G41e5 G41ea@G41e6 G41eb@G41e7) ((lambda (G41f0@swap) (dynamic-wind G41f0@swap (lambda () (G2f8f@chi-expr G41d8@expr G41d9@r G41d9@r)) G41f0@swap)) (lambda () (begin ((lambda (G41f2@t) (begin (G41e8@G41e4 G41ea@G41e6) (set! G41ea@G41e6 G41f2@t))) (G41e8@G41e4)) ((lambda (G41f4@t) (begin (G41e9@G41e5 G41eb@G41e7) (set! G41eb@G41e7 G41f4@t))) (G41e9@G41e5)))))) G2fd8@inv-collector G2fda@vis-collector G41dc@rtc (lambda (G41f6@x) (values))))) (G2fd6@make-collector)))) (set! G2fcc@parse-exports (lambda (G41f8@exp*) ((letrec ((G41fa@f (lambda (G41fc@exp* G41fd@int* G41fe@ext*) (if (null? G41fc@exp*) (begin (if (not (G2d76@valid-bound-ids? G41fe@ext*)) (G3058@syntax-violation 'export '"invalid exports" (G2fa3@find-dups G41fe@ext*)) (void)) (values (map G305e@syntax->datum G41fe@ext*) G41fd@int*)) ((lambda (G4202@t) ((lambda (G4204@ls/false) (if G4204@ls/false (apply (lambda (G4206@rename G4207@i* G4208@e*) (begin (if (not (and (eq? (G305e@syntax->datum G4206@rename) 'rename) (for-all G2d6c@id? G4207@i*) (for-all G2d6c@id? G4208@e*))) (G3058@syntax-violation 'export '"invalid export specifier" (car G41fc@exp*)) (void)) (G41fa@f (cdr G41fc@exp*) (append G4207@i* G41fd@int*) (append G4208@e* G41fe@ext*)))) G4204@ls/false) ((lambda (G420c@t) ((lambda (G420e@ls/false) (if G420e@ls/false (apply (lambda (G4210@ie) (begin (if (not (G2d6c@id? G4210@ie)) (G3058@syntax-violation 'export '"invalid export" G4210@ie) (void)) (G41fa@f (cdr G41fc@exp*) (cons G4210@ie G41fd@int*) (cons G4210@ie G41fe@ext*)))) G420e@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G420c@t))) (G2f6b@syntax-dispatch G420c@t 'any))) G4202@t))) (G2f6b@syntax-dispatch G4202@t '(any . #(each (any any)))))) (car G41fc@exp*)))))) G41fa@f) G41f8@exp* '() '()))) (set! G2fce@parse-library-name (lambda (G4212@spec) ((lambda (G4215@parse) (begin (set! G4215@parse (lambda (G4220@x) ((lambda (G4222@t) ((lambda (G4224@ls/false) (if (and G4224@ls/false (apply (lambda (G4226@v*) (for-all (lambda (G4228@x) ((lambda (G422a@x) (and (integer? G422a@x) (exact? G422a@x))) (G305e@syntax->datum G4228@x))) G4226@v*)) G4224@ls/false)) (apply (lambda (G422c@v*) (values '() (map G305e@syntax->datum G422c@v*))) G4224@ls/false) ((lambda (G422e@t) ((lambda (G4230@ls/false) (if (and G4230@ls/false (apply (lambda (G4232@x G4233@rest) (symbol? (G305e@syntax->datum G4232@x))) G4230@ls/false)) (apply (lambda (G4236@x G4237@rest) (call-with-values (lambda () (G4215@parse G4237@rest)) (lambda (G423c@G423a G423d@G423b) ((lambda (G4240@v* G4241@x*) (values (cons (G305e@syntax->datum G4236@x) G4241@x*) G4240@v*)) G423d@G423b G423c@G423a)))) G4230@ls/false) ((lambda (G4244@t) ((lambda (G4246@ls/false) (if G4246@ls/false (apply (lambda () (values '() '())) G4246@ls/false) ((lambda (G4248@t) ((lambda (G424a@ls/false) (if G424a@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid library name" G4212@spec)) G424a@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G4248@t))) (G2f6b@syntax-dispatch G4248@t '_))) G4244@t))) (G2f6b@syntax-dispatch G4244@t '()))) G422e@t))) (G2f6b@syntax-dispatch G422e@t '(any . any)))) G4222@t))) (G2f6b@syntax-dispatch G4222@t '(each-any)))) G4220@x))) (call-with-values (lambda () (G4215@parse G4212@spec)) (lambda (G4218@G4216 G4219@G4217) ((lambda (G421c@ver* G421d@name*) (begin (if (null? G421d@name*) (G3058@syntax-violation '#f '"empty library name" G4212@spec) (void)) (values G421d@name* G421c@ver*))) G4219@G4217 G4218@G4216))))) '#f))) (set! G2fd0@parse-library (lambda (G424c@e) ((lambda (G424e@t) ((lambda (G4250@ls/false) (if (and G4250@ls/false (apply (lambda (G4252@library G4253@name* G4254@export G4255@exp* G4256@import G4257@imp* G4258@b*) (and (eq? (G305e@syntax->datum G4254@export) 'export) (eq? (G305e@syntax->datum G4256@import) 'import) (eq? (G305e@syntax->datum G4252@library) 'library))) G4250@ls/false)) (apply (lambda (G4260@library G4261@name* G4262@export G4263@exp* G4264@import G4265@imp* G4266@b*) (values G4261@name* G4263@exp* G4265@imp* G4266@b*)) G4250@ls/false) ((lambda (G426e@t) ((lambda (G4270@ls/false) (if G4270@ls/false (apply (lambda () (G3058@syntax-violation '#f '"malformed library" G424c@e)) G4270@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G426e@t))) (G2f6b@syntax-dispatch G426e@t '_))) G424e@t))) (G2f6b@syntax-dispatch G424e@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G424c@e))) (set! G2fd2@parse-import-spec* ((lambda () ((lambda (G4273@idsyn? G4275@dup-error G4277@merge-substs G4279@exclude* G427b@find* G427d@rem* G427f@remove-dups G4281@parse-library-name G4283@import-library G4285@get-import G4287@add-imports!) (begin (set! G4273@idsyn? (lambda (G4472@x) (symbol? (G305e@syntax->datum G4472@x)))) (set! G4275@dup-error (lambda (G4470@name) (G3058@syntax-violation 'import '"two imports with different bindings" G4470@name))) (set! G4277@merge-substs (lambda (G445e@s G445f@subst) ((lambda (G4463@insert-to-subst) (begin (set! G4463@insert-to-subst (lambda (G4464@a G4465@subst) ((lambda (G4468@name G4469@label) ((lambda (G446c@t) (if G446c@t ((lambda (G446e@x) (if (eq? (cdr G446e@x) G4469@label) G4465@subst (G4275@dup-error G4468@name))) G446c@t) (cons G4464@a G4465@subst))) (assq G4468@name G4465@subst))) (car G4464@a) (cdr G4464@a)))) (if (null? G445e@s) G445f@subst (G4463@insert-to-subst (car G445e@s) (G4277@merge-substs (cdr G445e@s) G445f@subst))))) '#f))) (set! G4279@exclude* (lambda (G4434@sym* G4435@subst) ((lambda (G4439@exclude) (begin (set! G4439@exclude (lambda (G444e@sym G444f@subst) (if (null? G444f@subst) (G3058@syntax-violation 'import '"cannot rename unbound identifier" G444e@sym) (if (eq? G444e@sym (caar G444f@subst)) (values (cdar G444f@subst) (cdr G444f@subst)) ((lambda (G4452@a) (call-with-values (lambda () (G4439@exclude G444e@sym (cdr G444f@subst))) (lambda (G4456@G4454 G4457@G4455) ((lambda (G445a@subst G445b@old) (values G445b@old (cons G4452@a G445a@subst))) G4457@G4455 G4456@G4454)))) (car G444f@subst)))))) (if (null? G4434@sym*) (values '() G4435@subst) (call-with-values (lambda () (G4439@exclude (car G4434@sym*) G4435@subst)) (lambda (G443c@G443a G443d@G443b) ((lambda (G4440@subst G4441@old) (call-with-values (lambda () (G4279@exclude* (cdr G4434@sym*) G4440@subst)) (lambda (G4446@G4444 G4447@G4445) ((lambda (G444a@subst G444b@old*) (values (cons G4441@old G444b@old*) G444a@subst)) G4447@G4445 G4446@G4444)))) G443d@G443b G443c@G443a)))))) '#f))) (set! G427b@find* (lambda (G442c@sym* G442d@subst) (map (lambda (G4430@x) ((lambda (G4432@t) (if G4432@t (cdr G4432@t) (G3058@syntax-violation 'import '"cannot find identifier" G4430@x))) (assq G4430@x G442d@subst))) G442c@sym*))) (set! G427d@rem* (lambda (G4424@sym* G4425@subst) ((letrec ((G4428@f (lambda (G442a@subst) (if (null? G442a@subst) '() (if (memq (caar G442a@subst) G4424@sym*) (G4428@f (cdr G442a@subst)) (cons (car G442a@subst) (G4428@f (cdr G442a@subst)))))))) G4428@f) G4425@subst))) (set! G427f@remove-dups (lambda (G4422@ls) (if (null? G4422@ls) '() (if (memq (car G4422@ls) (cdr G4422@ls)) (G427f@remove-dups (cdr G4422@ls)) (cons (car G4422@ls) (G427f@remove-dups (cdr G4422@ls))))))) (set! G4281@parse-library-name (lambda (G433c@spec) ((lambda (G433f@subversion? G4341@subversion-pred G4343@version-pred) (begin (set! G433f@subversion? (lambda (G441e@x) ((lambda (G4420@x) (and (integer? G4420@x) (exact? G4420@x) (>= G4420@x '0))) (G305e@syntax->datum G441e@x)))) (set! G4341@subversion-pred (lambda (G43be@x*) ((lambda (G43c0@t) ((lambda (G43c2@ls/false) (if (and G43c2@ls/false (apply (lambda (G43c4@n) (G433f@subversion? G43c4@n)) G43c2@ls/false)) (apply (lambda (G43c6@n) (lambda (G43c8@x) (= G43c8@x (G305e@syntax->datum G43c6@n)))) G43c2@ls/false) ((lambda (G43ca@t) ((lambda (G43cc@ls/false) (if (and G43cc@ls/false (apply (lambda (G43ce@p? G43cf@sub*) (eq? (G305e@syntax->datum G43ce@p?) 'and)) G43cc@ls/false)) (apply (lambda (G43d2@p? G43d3@sub*) ((lambda (G43d6@p*) (lambda (G43d8@x) (for-all (lambda (G43da@p) (G43da@p G43d8@x)) G43d6@p*))) (map G4341@subversion-pred G43d3@sub*))) G43cc@ls/false) ((lambda (G43dc@t) ((lambda (G43de@ls/false) (if (and G43de@ls/false (apply (lambda (G43e0@p? G43e1@sub*) (eq? (G305e@syntax->datum G43e0@p?) 'or)) G43de@ls/false)) (apply (lambda (G43e4@p? G43e5@sub*) ((lambda (G43e8@p*) (lambda (G43ea@x) (exists (lambda (G43ec@p) (G43ec@p G43ea@x)) G43e8@p*))) (map G4341@subversion-pred G43e5@sub*))) G43de@ls/false) ((lambda (G43ee@t) ((lambda (G43f0@ls/false) (if (and G43f0@ls/false (apply (lambda (G43f2@p? G43f3@sub) (eq? (G305e@syntax->datum G43f2@p?) 'not)) G43f0@ls/false)) (apply (lambda (G43f6@p? G43f7@sub) ((lambda (G43fa@p) (lambda (G43fc@x) (not (G43fa@p G43fc@x)))) (G4341@subversion-pred G43f7@sub))) G43f0@ls/false) ((lambda (G43fe@t) ((lambda (G4400@ls/false) (if (and G4400@ls/false (apply (lambda (G4402@p? G4403@n) (and (eq? (G305e@syntax->datum G4402@p?) '<=) (G433f@subversion? G4403@n))) G4400@ls/false)) (apply (lambda (G4406@p? G4407@n) (lambda (G440a@x) (<= G440a@x (G305e@syntax->datum G4407@n)))) G4400@ls/false) ((lambda (G440c@t) ((lambda (G440e@ls/false) (if (and G440e@ls/false (apply (lambda (G4410@p? G4411@n) (and (eq? (G305e@syntax->datum G4410@p?) '>=) (G433f@subversion? G4411@n))) G440e@ls/false)) (apply (lambda (G4414@p? G4415@n) (lambda (G4418@x) (>= G4418@x (G305e@syntax->datum G4415@n)))) G440e@ls/false) ((lambda (G441a@t) ((lambda (G441c@ls/false) (if G441c@ls/false (apply (lambda () (G3058@syntax-violation 'import '"invalid sub-version spec" G433c@spec G43be@x*)) G441c@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G441a@t))) (G2f6b@syntax-dispatch G441a@t '_))) G440c@t))) (G2f6b@syntax-dispatch G440c@t '(any any)))) G43fe@t))) (G2f6b@syntax-dispatch G43fe@t '(any any)))) G43ee@t))) (G2f6b@syntax-dispatch G43ee@t '(any any)))) G43dc@t))) (G2f6b@syntax-dispatch G43dc@t '(any . each-any)))) G43ca@t))) (G2f6b@syntax-dispatch G43ca@t '(any . each-any)))) G43c0@t))) (G2f6b@syntax-dispatch G43c0@t 'any))) G43be@x*))) (set! G4343@version-pred (lambda (G436e@x*) ((lambda (G4370@t) ((lambda (G4372@ls/false) (if G4372@ls/false (apply (lambda () (lambda (G4374@x) '#t)) G4372@ls/false) ((lambda (G4376@t) ((lambda (G4378@ls/false) (if (and G4378@ls/false (apply (lambda (G437a@c G437b@ver*) (eq? (G305e@syntax->datum G437a@c) 'and)) G4378@ls/false)) (apply (lambda (G437e@c G437f@ver*) ((lambda (G4382@p*) (lambda (G4384@x) (for-all (lambda (G4386@p) (G4386@p G4384@x)) G4382@p*))) (map G4343@version-pred G437f@ver*))) G4378@ls/false) ((lambda (G4388@t) ((lambda (G438a@ls/false) (if (and G438a@ls/false (apply (lambda (G438c@c G438d@ver*) (eq? (G305e@syntax->datum G438c@c) 'or)) G438a@ls/false)) (apply (lambda (G4390@c G4391@ver*) ((lambda (G4394@p*) (lambda (G4396@x) (exists (lambda (G4398@p) (G4398@p G4396@x)) G4394@p*))) (map G4343@version-pred G4391@ver*))) G438a@ls/false) ((lambda (G439a@t) ((lambda (G439c@ls/false) (if (and G439c@ls/false (apply (lambda (G439e@c G439f@ver) (eq? (G305e@syntax->datum G439e@c) 'not)) G439c@ls/false)) (apply (lambda (G43a2@c G43a3@ver) ((lambda (G43a6@p) (lambda (G43a8@x) (not (G43a6@p G43a8@x)))) (G4343@version-pred G43a3@ver))) G439c@ls/false) ((lambda (G43aa@t) ((lambda (G43ac@ls/false) (if G43ac@ls/false (apply (lambda (G43ae@sub*) ((lambda (G43b0@p*) (lambda (G43b2@x) ((letrec ((G43b4@f (lambda (G43b6@p* G43b7@x) (if (null? G43b6@p*) '#t (if (null? G43b7@x) '#f (and ((car G43b6@p*) (car G43b7@x)) (G43b4@f (cdr G43b6@p*) (cdr G43b7@x)))))))) G43b4@f) G43b0@p* G43b2@x))) (map G4341@subversion-pred G43ae@sub*))) G43ac@ls/false) ((lambda (G43ba@t) ((lambda (G43bc@ls/false) (if G43bc@ls/false (apply (lambda () (G3058@syntax-violation 'import '"invalid version spec" G433c@spec G436e@x*)) G43bc@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G43ba@t))) (G2f6b@syntax-dispatch G43ba@t '_))) G43aa@t))) (G2f6b@syntax-dispatch G43aa@t 'each-any))) G439a@t))) (G2f6b@syntax-dispatch G439a@t '(any any)))) G4388@t))) (G2f6b@syntax-dispatch G4388@t '(any . each-any)))) G4376@t))) (G2f6b@syntax-dispatch G4376@t '(any . each-any)))) G4370@t))) (G2f6b@syntax-dispatch G4370@t '()))) G436e@x*))) ((letrec ((G4344@f (lambda (G4346@x) ((lambda (G4348@t) ((lambda (G434a@ls/false) (if G434a@ls/false (apply (lambda (G434c@version-spec*) (values '() (G4343@version-pred G434c@version-spec*))) G434a@ls/false) ((lambda (G434e@t) ((lambda (G4350@ls/false) (if (and G4350@ls/false (apply (lambda (G4352@x G4353@x*) (G4273@idsyn? G4352@x)) G4350@ls/false)) (apply (lambda (G4356@x G4357@x*) (call-with-values (lambda () (G4344@f G4357@x*)) (lambda (G435c@G435a G435d@G435b) ((lambda (G4360@pred G4361@name) (values (cons (G305e@syntax->datum G4356@x) G4361@name) G4360@pred)) G435d@G435b G435c@G435a)))) G4350@ls/false) ((lambda (G4364@t) ((lambda (G4366@ls/false) (if G4366@ls/false (apply (lambda () (values '() (lambda (G4368@x) '#t))) G4366@ls/false) ((lambda (G436a@t) ((lambda (G436c@ls/false) (if G436c@ls/false (apply (lambda () (G3058@syntax-violation '#f '"invalid import spec" G433c@spec)) G436c@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G436a@t))) (G2f6b@syntax-dispatch G436a@t '_))) G4364@t))) (G2f6b@syntax-dispatch G4364@t '()))) G434e@t))) (G2f6b@syntax-dispatch G434e@t '(any . any)))) G4348@t))) (G2f6b@syntax-dispatch G4348@t '(each-any)))) G4346@x)))) G4344@f) G433c@spec))) '#f '#f '#f))) (set! G4283@import-library (lambda (G432e@spec*) (call-with-values (lambda () (G4281@parse-library-name G432e@spec*)) (lambda (G4332@G4330 G4333@G4331) ((lambda (G4336@pred G4337@name) (begin (if (null? G4337@name) (G3058@syntax-violation 'import '"empty library name" G432e@spec*) (void)) ((lambda (G433a@lib) (begin (if (not G433a@lib) (G3058@syntax-violation 'import '"cannot find library with required name" G4337@name) (void)) (if (not (G4336@pred (G2b54@G29cc@library-version G433a@lib))) (G3058@syntax-violation 'import '"library does not satisfy version specification" G432e@spec* G433a@lib) (void)) ((G2fdc@imp-collector) G433a@lib) (G2b58@G29d4@library-subst G433a@lib))) (G2b7c@G2a1c@find-library-by-name G4337@name)))) G4333@G4331 G4332@G4330))))) (set! G4285@get-import (lambda (G42a0@spec) ((lambda (G42a2@t) ((lambda (G42a4@ls/false) (if (and G42a4@ls/false (apply (lambda (G42a6@x G42a7@x*) (not (memq (G305e@syntax->datum G42a6@x) '(for rename except only prefix library)))) G42a4@ls/false)) (apply (lambda (G42aa@x G42ab@x*) (G4283@import-library (cons G42aa@x G42ab@x*))) G42a4@ls/false) ((lambda (G42ae@t) ((lambda (G42b0@ls/false) (if (and G42b0@ls/false (apply (lambda (G42b2@rename G42b3@isp G42b4@old* G42b5@new*) (and (eq? (G305e@syntax->datum G42b2@rename) 'rename) (for-all G4273@idsyn? G42b4@old*) (for-all G4273@idsyn? G42b5@new*))) G42b0@ls/false)) (apply (lambda (G42ba@rename G42bb@isp G42bc@old* G42bd@new*) ((lambda (G42c2@subst G42c3@old* G42c4@new*) ((lambda (G42c8@old-label*) ((lambda (G42ca@subst) (G4277@merge-substs (map cons G42c4@new* G42c8@old-label*) G42ca@subst)) (G427d@rem* G42c3@old* G42c2@subst))) (G427b@find* G42c3@old* G42c2@subst))) (G4285@get-import G42bb@isp) (map G305e@syntax->datum G42bc@old*) (map G305e@syntax->datum G42bd@new*))) G42b0@ls/false) ((lambda (G42cc@t) ((lambda (G42ce@ls/false) (if (and G42ce@ls/false (apply (lambda (G42d0@except G42d1@isp G42d2@sym*) (and (eq? (G305e@syntax->datum G42d0@except) 'except) (for-all G4273@idsyn? G42d2@sym*))) G42ce@ls/false)) (apply (lambda (G42d6@except G42d7@isp G42d8@sym*) ((lambda (G42dc@subst) (G427d@rem* (map G305e@syntax->datum G42d8@sym*) G42dc@subst)) (G4285@get-import G42d7@isp))) G42ce@ls/false) ((lambda (G42de@t) ((lambda (G42e0@ls/false) (if (and G42e0@ls/false (apply (lambda (G42e2@only G42e3@isp G42e4@sym*) (and (eq? (G305e@syntax->datum G42e2@only) 'only) (for-all G4273@idsyn? G42e4@sym*))) G42e0@ls/false)) (apply (lambda (G42e8@only G42e9@isp G42ea@sym*) ((lambda (G42ee@subst G42ef@sym*) ((lambda (G42f2@sym*) ((lambda (G42f4@lab*) (map cons G42f2@sym* G42f4@lab*)) (G427b@find* G42f2@sym* G42ee@subst))) (G427f@remove-dups G42ef@sym*))) (G4285@get-import G42e9@isp) (map G305e@syntax->datum G42ea@sym*))) G42e0@ls/false) ((lambda (G42f6@t) ((lambda (G42f8@ls/false) (if (and G42f8@ls/false (apply (lambda (G42fa@prefix G42fb@isp G42fc@p) (and (eq? (G305e@syntax->datum G42fa@prefix) 'prefix) (G4273@idsyn? G42fc@p))) G42f8@ls/false)) (apply (lambda (G4300@prefix G4301@isp G4302@p) ((lambda (G4306@subst G4307@prefix) (map (lambda (G430a@x) (cons (string->symbol (string-append G4307@prefix (symbol->string (car G430a@x)))) (cdr G430a@x))) G4306@subst)) (G4285@get-import G4301@isp) (symbol->string (G305e@syntax->datum G4302@p)))) G42f8@ls/false) ((lambda (G430c@t) ((lambda (G430e@ls/false) (if (and G430e@ls/false (apply (lambda (G4310@library G4311@spec*) (eq? (G305e@syntax->datum G4310@library) 'library)) G430e@ls/false)) (apply (lambda (G4314@library G4315@spec*) (G4283@import-library G4315@spec*)) G430e@ls/false) ((lambda (G4318@t) ((lambda (G431a@ls/false) (if (and G431a@ls/false (apply (lambda (G431c@for G431d@isp G431e@rest) (eq? (G305e@syntax->datum G431c@for) 'for)) G431a@ls/false)) (apply (lambda (G4322@for G4323@isp G4324@rest) (G4285@get-import G4323@isp)) G431a@ls/false) ((lambda (G4328@t) ((lambda (G432a@ls/false) (if G432a@ls/false (apply (lambda (G432c@spec) (G3058@syntax-violation 'import '"invalid import spec" G432c@spec)) G432a@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G4328@t))) (G2f6b@syntax-dispatch G4328@t 'any))) G4318@t))) (G2f6b@syntax-dispatch G4318@t '(any any . any)))) G430c@t))) (G2f6b@syntax-dispatch G430c@t '(any each-any)))) G42f6@t))) (G2f6b@syntax-dispatch G42f6@t '(any any any)))) G42de@t))) (G2f6b@syntax-dispatch G42de@t '(any any . each-any)))) G42cc@t))) (G2f6b@syntax-dispatch G42cc@t '(any any . each-any)))) G42ae@t))) (G2f6b@syntax-dispatch G42ae@t '(any any . #(each (any any)))))) G42a2@t))) (G2f6b@syntax-dispatch G42a2@t '(any . each-any)))) G42a0@spec))) (set! G4287@add-imports! (lambda (G4290@imp G4291@h) ((lambda (G4294@subst) (for-each (lambda (G4296@x) ((lambda (G4298@name G4299@label) ((lambda (G429c@t) (if G429c@t ((lambda (G429e@l) (if (not (eq? G429e@l G4299@label)) (G4275@dup-error G4298@name) (void))) G429c@t) (hashtable-set! G4291@h G4298@name G4299@label))) (hashtable-ref G4291@h G4298@name '#f))) (car G4296@x) (cdr G4296@x))) G4294@subst)) (G4285@get-import G4290@imp)))) (lambda (G4288@imp*) ((letrec ((G428a@f (lambda (G428c@imp* G428d@h) (if (null? G428c@imp*) (hashtable-entries G428d@h) (begin (G4287@add-imports! (car G428c@imp*) G428d@h) (G428a@f (cdr G428c@imp*) G428d@h)))))) G428a@f) G4288@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G2fd4@make-top-rib (lambda (G4474@names G4475@labels) ((lambda (G4478@rib) (begin (vector-for-each (lambda (G447a@name G447b@label) (begin (if (not (symbol? G447a@name)) (error 'make-top-rib '"BUG: not a symbol" G447a@name) (void)) (G2d1f@extend-rib/nc! G4478@rib (G2d36@make-stx G447a@name G2ce4@top-mark* '() '()) G447b@label))) G4474@names G4475@labels) G4478@rib)) (G2d19@make-cache-rib)))) (set! G2fd6@make-collector (lambda () ((lambda (G447e@ls) (lambda G4482 ((lambda (G4483) (if (= G4483 '0) (apply (lambda () G447e@ls) G4482) (if (= G4483 '1) (apply (lambda (G4480@x) (set! G447e@ls (G2cdd@set-cons G4480@x G447e@ls))) G4482) (error 'apply '"invalid arg count")))) (length G4482)))) '()))) (set! G2fd8@inv-collector (G2908@G283e@make-parameter (lambda G4484@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4486@x) (begin (if (not (procedure? G4486@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4486@x) (void)) G4486@x)))) (set! G2fda@vis-collector (G2908@G283e@make-parameter (lambda G4488@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G448a@x) (begin (if (not (procedure? G448a@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G448a@x) (void)) G448a@x)))) (set! G2fdc@imp-collector (G2908@G283e@make-parameter (lambda G448c@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G448e@x) (begin (if (not (procedure? G448e@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G448e@x) (void)) G448e@x)))) (set! G2fde@chi-library-internal (lambda (G4490@e* G4491@rib G4492@top?) (call-with-values (lambda () (G2fc8@chi-body* G4490@e* '() '() '() '() '() '() '() G4491@rib G4492@top?)) (lambda (G449e@G4496 G449f@G4497 G44a0@G4498 G44a1@G4499 G44a2@G449a G44a3@G449b G44a4@G449c G44a5@G449d) ((lambda (G44ae@exp* G44af@_kwd* G44b0@mod** G44b1@rhs* G44b2@lex* G44b3@mr G44b4@r G44b5@e*) (values (append (apply append (reverse G44b0@mod**)) G44b5@e*) G44b4@r G44b3@mr (reverse G44b2@lex*) (reverse G44b1@rhs*) G44ae@exp*)) G44a5@G449d G44a4@G449c G44a3@G449b G44a2@G449a G44a1@G4499 G44a0@G4498 G449f@G4497 G449e@G4496))))) (set! G2fe0@chi-interaction-expr (lambda (G44be@e G44bf@rib G44c0@r) (call-with-values (lambda () (G2fc8@chi-body* (list G44be@e) G44c0@r G44c0@r '() '() '() '() '() G44bf@rib '#t)) (lambda (G44cc@G44c4 G44cd@G44c5 G44ce@G44c6 G44cf@G44c7 G44d0@G44c8 G44d1@G44c9 G44d2@G44ca G44d3@G44cb) ((lambda (G44dc@_exp* G44dd@_kwd* G44de@mod** G44df@rhs* G44e0@lex* G44e1@mr G44e2@r G44e3@e*) ((lambda (G44ec@e*) ((lambda (G44ee@e) (values G44ee@e G44e2@r)) (if (null? G44ec@e*) (G2cca@G2c3c@build-void) (if (null? (cdr G44ec@e*)) (car G44ec@e*) (G2cc9@G2c3a@build-sequence '#f G44ec@e*))))) (G2f9d@expand-interaction-rhs*/init* (reverse G44e0@lex*) (reverse G44df@rhs*) (append (apply append (reverse G44de@mod**)) G44e3@e*) G44e2@r G44e1@mr))) G44d3@G44cb G44d2@G44ca G44d1@G44c9 G44d0@G44c8 G44cf@G44c7 G44ce@G44c6 G44cd@G44c5 G44cc@G44c4))))) (set! G2fe2@library-body-expander (lambda (G44f0@name G44f1@main-exp* G44f2@imp* G44f3@b* G44f4@top?) ((lambda (G44fb@itc) (begin (set! G44fb@itc (G2fd6@make-collector)) ((lambda (G4500@G44fc G4501@G44fd G4502@G44fe G4503@G44ff) ((lambda (G4508@swap) (dynamic-wind G4508@swap (lambda () (call-with-values (lambda () (G2fd2@parse-import-spec* G44f2@imp*)) (lambda (G450c@G450a G450d@G450b) ((lambda (G4510@subst-labels G4511@subst-names) ((lambda (G4514@rib) ((lambda (G4517@wrap) (begin (set! G4517@wrap (lambda (G4583@x) (G2d36@make-stx G4583@x G2ce4@top-mark* (list G4514@rib) '()))) ((lambda (G4518@b* G4519@main-exp* G451a@rtc G451b@vtc) ((lambda (G4524@G4520 G4525@G4521 G4526@G4522 G4527@G4523) ((lambda (G452c@swap) (dynamic-wind G452c@swap (lambda () (call-with-values (lambda () (G2fde@chi-library-internal G4518@b* G4514@rib G44f4@top?)) (lambda (G4534@G452e G4535@G452f G4536@G4530 G4537@G4531 G4538@G4532 G4539@G4533) ((lambda (G4540@internal-exp* G4541@rhs* G4542@lex* G4543@mr G4544@r G4545@init*) (call-with-values (lambda () (G2fcc@parse-exports (append G4519@main-exp* G4540@internal-exp*))) (lambda (G454e@G454c G454f@G454d) ((lambda (G4552@exp-id* G4553@exp-name*) (begin (G2d23@seal-rib! G4514@rib) ((lambda (G4556@init*) ((lambda (G4558@rhs*) ((lambda () (begin (G2d25@unseal-rib! G4514@rib) ((lambda (G455a@loc* G455b@export-subst) ((lambda (G455f@errstr) (begin (set! G455f@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G3042@make-export-env/macros G4542@lex* G455a@loc* G4544@r)) (lambda (G4563@G4560 G4564@G4561 G4565@G4562) ((lambda (G4569@macro* G456a@global* G456b@export-env) (begin (for-each (lambda (G456f@s) ((lambda (G4571@name G4572@label) ((lambda (G4575@p) (if G4575@p ((lambda (G4577@b) ((lambda (G4579@type) (if (eq? G4579@type 'mutable) (G3058@syntax-violation 'export G455f@errstr G4571@name) (void))) (car G4577@b))) (cdr G4575@p)) (void))) (assq G4572@label G456b@export-env))) (car G456f@s) (cdr G456f@s))) G455b@export-subst) ((lambda (G457b@invoke-body G457c@invoke-definitions) (values (G44fb@itc) (G451a@rtc) (G451b@vtc) (G2cc9@G2c3a@build-sequence '#f (append G457c@invoke-definitions (list G457b@invoke-body))) G4569@macro* G455b@export-subst G456b@export-env)) (G2ccc@G2c40@build-letrec* '#f G4542@lex* G4558@rhs* (G303e@build-exports G456a@global* G4556@init*)) (map G2cc5@G2b8a@build-global-define (map cdr G456a@global*))))) G4565@G4562 G4564@G4561 G4563@G4560))))) '#f)) (map G2cea@gen-global G4542@lex*) (G3040@make-export-subst G4553@exp-name* G4552@exp-id*)))))) (G2f9f@chi-rhs* G4541@rhs* G4544@r G4543@mr))) (G2f8b@chi-expr* G4545@init* G4544@r G4543@mr)))) G454f@G454d G454e@G454c)))) G4539@G4533 G4538@G4532 G4537@G4531 G4536@G4530 G4535@G452f G4534@G452e)))) G452c@swap)) (lambda () (begin ((lambda (G457f@t) (begin (G4524@G4520 G4526@G4522) (set! G4526@G4522 G457f@t))) (G4524@G4520)) ((lambda (G4581@t) (begin (G4525@G4521 G4527@G4523) (set! G4527@G4523 G4581@t))) (G4525@G4521)))))) G2fd8@inv-collector G2fda@vis-collector G451a@rtc G451b@vtc)) (map G4517@wrap G44f3@b*) (map G4517@wrap G44f1@main-exp*) (G2fd6@make-collector) (G2fd6@make-collector)))) '#f)) (G2fd4@make-top-rib G4511@subst-names G4510@subst-labels))) G450d@G450b G450c@G450a)))) G4508@swap)) (lambda () (begin ((lambda (G4585@t) (begin (G4500@G44fc G4502@G44fe) (set! G4502@G44fe G4585@t))) (G4500@G44fc)) ((lambda (G4587@t) (begin (G4501@G44fd G4503@G44ff) (set! G4503@G44ff G4587@t))) (G4501@G44fd)))))) G2fdc@imp-collector G3066@top-level-context G44fb@itc '#f))) '#f))) (set! G2fe4@core-library-expander (lambda (G4589@e G458a@verify-name) (call-with-values (lambda () (G2fd0@parse-library G4589@e)) (lambda (G4591@G458d G4592@G458e G4593@G458f G4594@G4590) ((lambda (G4599@b* G459a@imp* G459b@exp* G459c@name*) (call-with-values (lambda () (G2fce@parse-library-name G459c@name*)) (lambda (G45a3@G45a1 G45a4@G45a2) ((lambda (G45a7@ver G45a8@name) (begin (G458a@verify-name G45a8@name) (call-with-values (lambda () (G2fe2@library-body-expander G45a8@name G459b@exp* G459a@imp* G4599@b* '#f)) (lambda (G45b2@G45ab G45b3@G45ac G45b4@G45ad G45b5@G45ae G45b6@G45af G45b7@G45b0 G45b8@G45b1) ((lambda (G45c0@export-env G45c1@export-subst G45c2@visit-code G45c3@invoke-code G45c4@visit-req* G45c5@invoke-req* G45c6@imp*) (values G45a8@name G45a7@ver G45c6@imp* G45c5@invoke-req* G45c4@visit-req* G45c3@invoke-code G45c2@visit-code G45c1@export-subst G45c0@export-env)) G45b8@G45b1 G45b7@G45b0 G45b6@G45af G45b5@G45ae G45b4@G45ad G45b3@G45ac G45b2@G45ab))))) G45a4@G45a2 G45a3@G45a1)))) G4594@G4590 G4593@G458f G4592@G458e G4591@G458d))))) (set! G2fe6@parse-top-level-program (lambda (G45ce@e*) ((lambda (G45d0@t) ((lambda (G45d2@ls/false) (if (and G45d2@ls/false (apply (lambda (G45d4@import G45d5@imp* G45d6@b*) (eq? (G305e@syntax->datum G45d4@import) 'import)) G45d2@ls/false)) (apply (lambda (G45da@import G45db@imp* G45dc@b*) (values G45db@imp* G45dc@b*)) G45d2@ls/false) ((lambda (G45e0@t) ((lambda (G45e2@ls/false) (if (and G45e2@ls/false (apply (lambda (G45e4@import G45e5@x G45e6@y) (eq? (G305e@syntax->datum G45e4@import) 'import)) G45e2@ls/false)) (apply (lambda (G45ea@import G45eb@x G45ec@y) (G3058@syntax-violation 'expander '"invalid syntax of top-level program" (G2d66@syntax-car G45ce@e*))) G45e2@ls/false) ((lambda (G45f0@t) ((lambda (G45f2@ls/false) (if G45f2@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G45f2@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G45f0@t))) (G2f6b@syntax-dispatch G45f0@t '_))) G45e0@t))) (G2f6b@syntax-dispatch G45e0@t '((any . any) . any)))) G45d0@t))) (G2f6b@syntax-dispatch G45d0@t '((any . each-any) . each-any)))) G45ce@e*))) (set! G2fe8@top-level-expander (lambda (G45f4@e*) (call-with-values (lambda () (G2fe6@parse-top-level-program G45f4@e*)) (lambda (G45f8@G45f6 G45f9@G45f7) ((lambda (G45fc@b* G45fd@imp*) (call-with-values (lambda () (G2fe2@library-body-expander '() '() G45fd@imp* G45fc@b* '#t)) (lambda (G4607@G4600 G4608@G4601 G4609@G4602 G460a@G4603 G460b@G4604 G460c@G4605 G460d@G4606) ((lambda (G4615@export-env G4616@export-subst G4617@visit-code G4618@invoke-code G4619@visit-req* G461a@invoke-req* G461b@imp*) (values G461a@invoke-req* G4618@invoke-code)) G460d@G4606 G460c@G4605 G460b@G4604 G460a@G4603 G4609@G4602 G4608@G4601 G4607@G4600)))) G45f9@G45f7 G45f8@G45f6))))) (set! G2fee@G2fe9 (make-record-type-descriptor 'env '#f 'G2fec '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G2ff0@G2feb '#f) (set! G2ff2@G2fea (make-record-constructor-descriptor G2fee@G2fe9 '#f G2ff0@G2feb)) (set! G2ff5@env? (record-predicate G2fee@G2fe9)) (set! G2ff7@make-env (record-constructor G2ff2@G2fea)) (set! G2ff9@env-names (record-accessor G2fee@G2fe9 '0)) (set! G2ffb@env-labels (record-accessor G2fee@G2fe9 '1)) (set! G2ffd@env-itc (record-accessor G2fee@G2fe9 '2)) (set! G2fff@set-env-names! (record-mutator G2fee@G2fe9 '0)) (set! G3001@set-env-labels! (record-mutator G2fee@G2fe9 '1)) (set! G3003@set-env-itc! (record-mutator G2fee@G2fe9 '2)) (set! G3005@rp (G2905@G2838@make-record-printer 'env (lambda (G4623@x G4624@p G4625@wr) (display '"#<environment>" G4624@p)))) (set! G300b@G3006 (make-record-type-descriptor 'interaction-env '#f 'G3009 '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G300d@G3008 '#f) (set! G300f@G3007 (make-record-constructor-descriptor G300b@G3006 '#f G300d@G3008)) (set! G3012@interaction-env? (record-predicate G300b@G3006)) (set! G3014@make-interaction-env (record-constructor G300f@G3007)) (set! G3016@interaction-env-rib (record-accessor G300b@G3006 '0)) (set! G3018@interaction-env-r (record-accessor G300b@G3006 '1)) (set! G301a@interaction-env-locs (record-accessor G300b@G3006 '2)) (set! G301c@set-interaction-env-rib! (record-mutator G300b@G3006 '0)) (set! G301e@set-interaction-env-r! (record-mutator G300b@G3006 '1)) (set! G3020@set-interaction-env-locs! (record-mutator G300b@G3006 '2)) (set! G3022@rp (G2905@G2838@make-record-printer 'interaction-env (lambda (G4629@x G462a@p G462b@wr) (display '"#<environment>" G462a@p)))) (set! G3024@interaction-environment-symbols (lambda () (G302c@environment-symbols (G3064@interaction-environment)))) (set! G3026@environment-bindings (lambda (G462f@e) (vector->list (vector-map (lambda (G4631@name G4632@label) (G3028@parse-binding (cons G4631@name (G2b82@G2a28@imported-label->binding G4632@label)))) (G2ff9@env-names G462f@e) (G2ffb@env-labels G462f@e))))) (set! G3028@parse-binding (lambda (G4635@b) (cons (car G4635@b) ((lambda (G4637@t) (if (memv G4637@t '(core-prim global)) 'procedure (if (memv G4637@t '(core-macro macro global-macro)) 'syntax (if (memv G4637@t '($core-rtd)) 'record (if (eq? (car G4635@b) (cadr G4635@b)) 'syntax 'unknown))))) (cadr G4635@b))))) (set! G302a@environment? (lambda (G4639@x) (or (G2ff5@env? G4639@x) (G3012@interaction-env? G4639@x)))) (set! G302c@environment-symbols (lambda (G463b@x) (if (G2ff5@env? G463b@x) (vector->list (G2ff9@env-names G463b@x)) (if (G3012@interaction-env? G463b@x) (map values (G2d03@rib-sym* (G3016@interaction-env-rib G463b@x))) (assertion-violation 'environment-symbols '"not an environment" G463b@x))))) (set! G302e@environment (lambda G463d@imp* ((lambda (G463f@itc) ((lambda (G4643@G4641 G4644@G4642) ((lambda (G4647@swap) (dynamic-wind G4647@swap (lambda () (call-with-values (lambda () (G2fd2@parse-import-spec* G463d@imp*)) (lambda (G464b@G4649 G464c@G464a) ((lambda (G464f@subst-labels G4650@subst-names) (G2ff7@make-env G4650@subst-names G464f@subst-labels G463f@itc)) G464c@G464a G464b@G4649)))) G4647@swap)) (lambda () ((lambda (G4653@t) (begin (G4643@G4641 G4644@G4642) (set! G4644@G4642 G4653@t))) (G4643@G4641))))) G2fdc@imp-collector G463f@itc)) (G2fd6@make-collector)))) (set! G3030@null-environment (lambda (G4655@n) (begin (if (not (eqv? G4655@n '5)) (assertion-violation 'null-environment '"not 5" G4655@n) (void)) (G302e@environment '(psyntax null-environment-5))))) (set! G3032@scheme-report-environment (lambda (G4657@n) (begin (if (not (eqv? G4657@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G4657@n) (void)) (G302e@environment '(psyntax scheme-report-environment-5))))) (set! G3034@expand (lambda (G4659@x G465a@env) (if (G2ff5@env? G465a@env) ((lambda (G465d@rib) ((lambda (G465f@x G4660@itc G4661@rtc G4662@vtc) ((lambda (G4667@x) (begin (G2d23@seal-rib! G465d@rib) (values G4667@x (G4661@rtc)))) ((lambda (G4671@G4669 G4672@G466a G4673@G466b G4674@G466c G4675@G466d G4676@G466e G4677@G466f G4678@G4670) ((lambda (G4681@swap) (dynamic-wind G4681@swap (lambda () (G2f8f@chi-expr G465f@x '() '())) G4681@swap)) (lambda () (begin ((lambda (G4683@t) (begin (G4671@G4669 G4675@G466d) (set! G4675@G466d G4683@t))) (G4671@G4669)) ((lambda (G4685@t) (begin (G4672@G466a G4676@G466e) (set! G4676@G466e G4685@t))) (G4672@G466a)) ((lambda (G4687@t) (begin (G4673@G466b G4677@G466f) (set! G4677@G466f G4687@t))) (G4673@G466b)) ((lambda (G4689@t) (begin (G4674@G466c G4678@G4670) (set! G4678@G4670 G4689@t))) (G4674@G466c)))))) G3066@top-level-context G2fd8@inv-collector G2fda@vis-collector G2fdc@imp-collector '#f G4661@rtc G4662@vtc G4660@itc))) (G2d36@make-stx G4659@x G2ce4@top-mark* (list G465d@rib) '()) (G2ffd@env-itc G465a@env) (G2fd6@make-collector) (G2fd6@make-collector))) (G2fd4@make-top-rib (G2ff9@env-names G465a@env) (G2ffb@env-labels G465a@env))) (if (G3012@interaction-env? G465a@env) ((lambda (G468b@rib G468c@r G468d@rtc) ((lambda (G4691@x) (call-with-values (lambda () ((lambda (G469d@G4695 G469e@G4696 G469f@G4697 G46a0@G4698 G46a1@G4699 G46a2@G469a G46a3@G469b G46a4@G469c) ((lambda (G46ad@swap) (dynamic-wind G46ad@swap (lambda () (G2fe0@chi-interaction-expr G4691@x G468b@rib G468c@r)) G46ad@swap)) (lambda () (begin ((lambda (G46af@t) (begin (G469d@G4695 G46a1@G4699) (set! G46a1@G4699 G46af@t))) (G469d@G4695)) ((lambda (G46b1@t) (begin (G469e@G4696 G46a2@G469a) (set! G46a2@G469a G46b1@t))) (G469e@G4696)) ((lambda (G46b3@t) (begin (G469f@G4697 G46a3@G469b) (set! G46a3@G469b G46b3@t))) (G469f@G4697)) ((lambda (G46b5@t) (begin (G46a0@G4698 G46a4@G469c) (set! G46a4@G469c G46b5@t))) (G46a0@G4698)))))) G3066@top-level-context G2fd8@inv-collector G2fda@vis-collector G2fdc@imp-collector G465a@env G468d@rtc (G2fd6@make-collector) (G2fd6@make-collector))) (lambda (G46b7@G4693 G46b8@G4694) ((lambda (G46bb@r^ G46bc@e) (begin (G301e@set-interaction-env-r! G465a@env G46bb@r^) (values G46bc@e (G468d@rtc)))) G46b8@G4694 G46b7@G4693)))) (G2d36@make-stx G4659@x G2ce4@top-mark* (list G468b@rib) '()))) (G3016@interaction-env-rib G465a@env) (G3018@interaction-env-r G465a@env) (G2fd6@make-collector)) (assertion-violation 'expand '"not an environment" G465a@env))))) (set! G3036@eval (lambda (G46bf@x G46c0@env) (begin (if (not (G302a@environment? G46c0@env)) (error 'eval '"not an environment" G46c0@env) (void)) (call-with-values (lambda () (G3034@expand G46bf@x G46c0@env)) (lambda (G46c5@G46c3 G46c6@G46c4) ((lambda (G46c9@invoke-req* G46ca@x) (begin (for-each G2b83@G2a2a@invoke-library G46c9@invoke-req*) (eval-core (G295c@G2914@expanded->core G46ca@x)))) G46c6@G46c4 G46c5@G46c3)))))) (set! G3038@library-expander (lambda G4732 ((lambda (G4733) (if (= G4733 '3) (apply (lambda (G46cd@x G46ce@filename G46cf@verify-name) ((lambda (G46d4@build-visit-code G46d6@visit!) (begin (set! G46d4@build-visit-code (lambda (G4720@macro*) (if (null? G4720@macro*) (G2cca@G2c3c@build-void) (G2cc9@G2c3a@build-sequence '#f (map (lambda (G4722@x) ((lambda (G4724@loc G4725@src) (list 'set! G4724@loc G4725@src)) (car G4722@x) (cddr G4722@x))) G4720@macro*))))) (set! G46d6@visit! (lambda (G4718@macro*) (for-each (lambda (G471a@x) ((lambda (G471c@loc G471d@proc) (set-symbol-value! G471c@loc G471d@proc)) (car G471a@x) (cadr G471a@x))) G4718@macro*))) (call-with-values (lambda () (G2fe4@core-library-expander G46cd@x G46cf@verify-name)) (lambda (G46e0@G46d7 G46e1@G46d8 G46e2@G46d9 G46e3@G46da G46e4@G46db G46e5@G46dc G46e6@G46dd G46e7@G46de G46e8@G46df) ((lambda (G46f2@export-env G46f3@export-subst G46f4@macro* G46f5@invoke-code G46f6@vis* G46f7@inv* G46f8@imp* G46f9@ver G46fa@name) ((lambda (G4704@id G4705@name G4706@ver G4707@imp* G4708@vis* G4709@inv* G470a@visit-proc G470b@invoke-proc G470c@visit-code G470d@invoke-code) (begin (G2b81@G2a26@install-library G4704@id G4705@name G4706@ver G4707@imp* G4708@vis* G4709@inv* G46f3@export-subst G46f2@export-env G470a@visit-proc G470b@invoke-proc G470c@visit-code G470d@invoke-code '#t G46ce@filename) (values G4704@id G4705@name G4706@ver G4707@imp* G4708@vis* G4709@inv* G470d@invoke-code G470c@visit-code G46f3@export-subst G46f2@export-env))) (gensym) G46fa@name G46f9@ver (map G2b87@G2a32@library-spec G46f8@imp*) (map G2b87@G2a32@library-spec G46f6@vis*) (map G2b87@G2a32@library-spec G46f7@inv*) (lambda () (G46d6@visit! G46f4@macro*)) (lambda () (eval-core (G295c@G2914@expanded->core G46f5@invoke-code))) (G46d4@build-visit-code G46f4@macro*) G46f5@invoke-code)) G46e8@G46df G46e7@G46de G46e6@G46dd G46e5@G46dc G46e4@G46db G46e3@G46da G46e2@G46d9 G46e1@G46d8 G46e0@G46d7))))) '#f '#f)) G4732) (if (= G4733 '2) (apply (lambda (G4728@x G4729@filename) (G3038@library-expander G4728@x G4729@filename (lambda (G472c@x) (values)))) G4732) (if (= G4733 '1) (apply (lambda (G472e@x) (G3038@library-expander G472e@x '#f (lambda (G4730@x) (values)))) G4732) (error 'apply '"invalid arg count"))))) (length G4732)))) (set! G303a@boot-library-expand (lambda (G4734@x) (call-with-values (lambda () (G3038@library-expander G4734@x)) (lambda (G4740@G4736 G4741@G4737 G4742@G4738 G4743@G4739 G4744@G473a G4745@G473b G4746@G473c G4747@G473d G4748@G473e G4749@G473f) ((lambda (G4754@export-env G4755@export-subst G4756@visit-code G4757@invoke-code G4758@inv* G4759@vis* G475a@imp* G475b@ver G475c@name G475d@id) (values G475c@name G4757@invoke-code G4755@export-subst G4754@export-env)) G4749@G473f G4748@G473e G4747@G473d G4746@G473c G4745@G473b G4744@G473a G4743@G4739 G4742@G4738 G4741@G4737 G4740@G4736))))) (set! G303c@rev-map-append (lambda (G4768@f G4769@ls G476a@ac) (if (null? G4769@ls) G476a@ac (G303c@rev-map-append G4768@f (cdr G4769@ls) (cons (G4768@f (car G4769@ls)) G476a@ac))))) (set! G303e@build-exports (lambda (G476e@lex*+loc* G476f@init*) (G2cc9@G2c3a@build-sequence '#f (cons (G2cca@G2c3c@build-void) (G303c@rev-map-append (lambda (G4772@x) (list 'set! (cdr G4772@x) (car G4772@x))) G476e@lex*+loc* G476f@init*))))) (set! G3040@make-export-subst (lambda (G4774@name* G4775@id*) (map (lambda (G4778@name G4779@id) ((lambda (G477c@label) (begin (if (not G477c@label) (G3058@syntax-violation '#f '"cannot export unbound identifier" G4779@id) (void)) (cons G4778@name G477c@label))) (G2d86@id->label G4779@id))) G4774@name* G4775@id*))) (set! G3042@make-export-env/macros (lambda (G477e@lex* G477f@loc* G4780@r) ((lambda (G4785@lookup) (begin (set! G4785@lookup (lambda (G47a2@x) ((letrec ((G47a4@f (lambda (G47a6@x G47a7@lex* G47a8@loc*) (if (pair? G47a7@lex*) (if (eq? G47a6@x (car G47a7@lex*)) (car G47a8@loc*) (G47a4@f G47a6@x (cdr G47a7@lex*) (cdr G47a8@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G47a4@f) G47a2@x G477e@lex* G477f@loc*))) ((letrec ((G4786@f (lambda (G4788@r G4789@env G478a@global* G478b@macro*) (if (null? G4788@r) (values G4789@env G478a@global* G478b@macro*) ((lambda (G4790@x) ((lambda (G4792@label G4793@b) ((lambda (G4796@t) (if (memv G4796@t '(lexical)) ((lambda (G4798@v) ((lambda (G479a@loc G479b@type) (G4786@f (cdr G4788@r) (cons (cons* G4792@label G479b@type G479a@loc) G4789@env) (cons (cons (G2ef7@lexical-var G4798@v) G479a@loc) G478a@global*) G478b@macro*)) (G4785@lookup (G2ef7@lexical-var G4798@v)) (if (G2ef9@lexical-mutable? G4798@v) 'mutable 'global))) (G2d90@binding-value G4793@b)) (if (memv G4796@t '(local-macro)) ((lambda (G479e@loc) (G4786@f (cdr G4788@r) (cons (cons* G4792@label 'global-macro G479e@loc) G4789@env) G478a@global* (cons (cons G479e@loc (G2d90@binding-value G4793@b)) G478b@macro*))) (gensym)) (if (memv G4796@t '(local-macro!)) ((lambda (G47a0@loc) (G4786@f (cdr G4788@r) (cons (cons* G4792@label 'global-macro! G47a0@loc) G4789@env) G478a@global* (cons (cons G47a0@loc (G2d90@binding-value G4793@b)) G478b@macro*))) (gensym)) (if (memv G4796@t '($rtd $module)) (G4786@f (cdr G4788@r) (cons G4790@x G4789@env) G478a@global* G478b@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2d8e@binding-type G4793@b) (G2d90@binding-value G4793@b))))))) (G2d8e@binding-type G4793@b))) (car G4790@x) (cdr G4790@x))) (car G4788@r)))))) G4786@f) G4780@r '() '() '()))) '#f))) (set! G3044@generate-temporaries (lambda (G47ac@ls) ((lambda (G47ae@t) ((lambda (G47b0@ls/false) (if G47b0@ls/false (apply (lambda (G47b2@ls) (map (lambda (G47b4@x) (G2d36@make-stx ((lambda (G47b6@x) (if (or (symbol? G47b6@x) (string? G47b6@x)) (gensym G47b6@x) (gensym 't))) (G305e@syntax->datum G47b4@x)) G2ce4@top-mark* '() '())) G47b2@ls)) G47b0@ls/false) ((lambda (G47b8@t) ((lambda (G47ba@ls/false) (if G47ba@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G47ba@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G47b8@t))) (G2f6b@syntax-dispatch G47b8@t '_))) G47ae@t))) (G2f6b@syntax-dispatch G47ae@t 'each-any))) G47ac@ls))) (set! G3046@free-identifier=? (lambda (G47bc@x G47bd@y) (if (G2d6c@id? G47bc@x) (if (G2d6c@id? G47bd@y) (G2d74@free-id=? G47bc@x G47bd@y) (assertion-violation 'free-identifier=? '"not an identifier" G47bd@y)) (assertion-violation 'free-identifier=? '"not an identifier" G47bc@x)))) (set! G3048@bound-identifier=? (lambda (G47c0@x G47c1@y) (if (G2d6c@id? G47c0@x) (if (G2d6c@id? G47c1@y) (G2d72@bound-id=? G47c0@x G47c1@y) (assertion-violation 'bound-identifier=? '"not an identifier" G47c1@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G47c0@x)))) (set! G304a@make-source-condition (lambda (G47c4@x) ((lambda (G47ce@G47c9 G47d0@G47cb G47d2@G47ca G47d5@G47c8 G47d7@make-source-condition G47d9@G47c6 G47db@G47c7 G47dd@source-condition? G47df@source-filename G47e1@source-character) (begin (set! G47ce@G47c9 (make-record-type-descriptor '&source-information G4c3e@G498f@&condition-rtd 'G47cc '#f '#f '#((immutable file-name) (immutable character)))) (set! G47d0@G47cb '#f) (set! G47d2@G47ca (make-record-constructor-descriptor G47ce@G47c9 G4c3f@G4991@&condition-rcd G47d0@G47cb)) (set! G47d5@G47c8 (record-predicate G47ce@G47c9)) (set! G47d7@make-source-condition (record-constructor G47d2@G47ca)) (set! G47d9@G47c6 (record-accessor G47ce@G47c9 '0)) (set! G47db@G47c7 (record-accessor G47ce@G47c9 '1)) (set! G47dd@source-condition? (condition-predicate G47ce@G47c9)) (set! G47df@source-filename (condition-accessor G47ce@G47c9 G47d9@G47c6)) (set! G47e1@source-character (condition-accessor G47ce@G47c9 G47db@G47c7)) (if (pair? G47c4@x) (G47d7@make-source-condition (car G47c4@x) (cdr G47c4@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G304c@extract-position-condition (lambda (G47e2@x) (G304a@make-source-condition (G304e@expression-position G47e2@x)))) (set! G304e@expression-position (lambda (G47e4@x) (and (G2d34@stx? G47e4@x) ((lambda (G47e6@x) (and (G28fd@G2828@annotation? G47e6@x) (G28fe@G282a@annotation-source G47e6@x))) (G2d38@stx-expr G47e4@x))))) (set! G3050@assertion-error (lambda (G47e8@expr G47e9@pos) (raise (condition (G4c6e@G4a51@make-assertion-violation) (G4c80@G4a81@make-who-condition 'assert) (G4c44@G49e4@make-message-condition '"assertion failed") (G4c76@G4a67@make-irritants-condition (list G47e8@expr)) (G304a@make-source-condition G47e9@pos))))) (set! G3052@syntax-error (lambda (G47ec@x . G47ee@args) (begin (if (not (for-all string? G47ee@args)) (assertion-violation 'syntax-error '"invalid argument" G47ee@args) (void)) (raise (condition (G4c44@G49e4@make-message-condition (if (null? G47ee@args) '"invalid syntax" (apply string-append G47ee@args))) (G4ca2@G4adb@make-syntax-violation (G305e@syntax->datum G47ec@x) '#f) (G304c@extract-position-condition G47ec@x) (G3054@extract-trace G47ec@x)))))) (set! G3054@extract-trace (lambda (G47f0@x) ((lambda (G47f9@G47f4 G47fb@G47f6 G47fd@G47f5 G4800@G47f3 G4802@make-trace G4804@G47f2 G4806@trace? G4808@trace-form) (begin (set! G47f9@G47f4 (make-record-type-descriptor '&trace G4c3e@G498f@&condition-rtd 'G47f7 '#f '#f '#((immutable form)))) (set! G47fb@G47f6 '#f) (set! G47fd@G47f5 (make-record-constructor-descriptor G47f9@G47f4 G4c3f@G4991@&condition-rcd G47fb@G47f6)) (set! G4800@G47f3 (record-predicate G47f9@G47f4)) (set! G4802@make-trace (record-constructor G47fd@G47f5)) (set! G4804@G47f2 (record-accessor G47f9@G47f4 '0)) (set! G4806@trace? (condition-predicate G47f9@G47f4)) (set! G4808@trace-form (condition-accessor G47f9@G47f4 G4804@G47f2)) ((letrec ((G4809@f (lambda (G480b@x) (if (G2d34@stx? G480b@x) (apply condition (G4802@make-trace G480b@x) (map G4809@f (G2d3e@stx-ae* G480b@x))) (if (G28fd@G2828@annotation? G480b@x) (G4802@make-trace (G2d36@make-stx G480b@x '() '() '())) (condition)))))) G4809@f) G47f0@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3056@syntax-violation* (lambda (G480d@who G480e@msg G480f@form G4810@condition-object) (begin (if (not (string? G480e@msg)) (assertion-violation 'syntax-violation '"message is not a string" G480e@msg) (void)) ((lambda (G4815@who) (raise (condition (if G4815@who (G4c80@G4a81@make-who-condition G4815@who) (condition)) (G4c44@G49e4@make-message-condition G480e@msg) G4810@condition-object (G304c@extract-position-condition G480f@form) (G3054@extract-trace G480f@form)))) (if (or (string? G480d@who) (symbol? G480d@who)) G480d@who (if (not G480d@who) ((lambda (G4817@t) ((lambda (G4819@ls/false) (if (and G4819@ls/false (apply (lambda (G481b@id) (G2d6c@id? G481b@id)) G4819@ls/false)) (apply (lambda (G481d@id) (G305e@syntax->datum G481d@id)) G4819@ls/false) ((lambda (G481f@t) ((lambda (G4821@ls/false) (if (and G4821@ls/false (apply (lambda (G4823@id G4824@rest) (G2d6c@id? G4823@id)) G4821@ls/false)) (apply (lambda (G4827@id G4828@rest) (G305e@syntax->datum G4827@id)) G4821@ls/false) ((lambda (G482b@t) ((lambda (G482d@ls/false) (if G482d@ls/false (apply (lambda () '#f) G482d@ls/false) (G3058@syntax-violation '#f '"invalid syntax" G482b@t))) (G2f6b@syntax-dispatch G482b@t '_))) G481f@t))) (G2f6b@syntax-dispatch G481f@t '(any . any)))) G4817@t))) (G2f6b@syntax-dispatch G4817@t 'any))) G480f@form) (assertion-violation 'syntax-violation '"invalid who argument" G480d@who))))))) (set! G3058@syntax-violation (lambda G483d ((lambda (G483e) (if (= G483e '3) (apply (lambda (G482f@who G4830@msg G4831@form) (G3058@syntax-violation G482f@who G4830@msg G4831@form '#f)) G483d) (if (= G483e '4) (apply (lambda (G4835@who G4836@msg G4837@form G4838@subform) (G3056@syntax-violation* G4835@who G4836@msg G4837@form (G4ca2@G4adb@make-syntax-violation (G305e@syntax->datum G4837@form) (G305e@syntax->datum G4838@subform)))) G483d) (error 'apply '"invalid arg count")))) (length G483d)))) (set! G305a@identifier? (lambda (G483f@x) (G2d6c@id? G483f@x))) (set! G305c@datum->syntax (lambda (G4841@id G4842@datum) (if (G2d6c@id? G4841@id) (G2d4a@datum->stx G4841@id G4842@datum) (assertion-violation 'datum->syntax '"not an identifier" G4841@id)))) (set! G305e@syntax->datum (lambda (G4845@x) (G2d82@stx->datum G4845@x))) (set! G3060@compile-r6rs-top-level (lambda (G4847@x*) (call-with-values (lambda () (G2fe8@top-level-expander G4847@x*)) (lambda (G484b@G4849 G484c@G484a) ((lambda (G484f@invoke-code G4850@lib*) (lambda () (begin (for-each G2b83@G2a2a@invoke-library G4850@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G295c@G2914@expanded->core G484f@invoke-code)) (void)) (eval-core (G295c@G2914@expanded->core G484f@invoke-code))))) G484c@G484a G484b@G4849))))) (set! G3062@pre-compile-r6rs-top-level (lambda (G4853@x*) (call-with-values (lambda () (G2fe8@top-level-expander G4853@x*)) (lambda (G4857@G4855 G4858@G4856) ((lambda (G485b@invoke-code G485c@lib*) (begin (for-each G2b83@G2a2a@invoke-library G485c@lib*) (G2906@G283a@compile-core (G295c@G2914@expanded->core G485b@invoke-code)))) G4858@G4856 G4857@G4855))))) (set! G3064@interaction-environment ((lambda (G485f@the-env) (lambda () (or G485f@the-env ((lambda (G4861@lib G4862@rib) (begin ((lambda (G4865@subst) (begin (G2d0d@set-rib-sym*! G4862@rib (map car G4865@subst)) (G2d0f@set-rib-mark**! G4862@rib (map (lambda (G4867@x) G2ce4@top-mark*) G4865@subst)) (G2d11@set-rib-label*! G4862@rib (map cdr G4865@subst)))) (G2b58@G29d4@library-subst G4861@lib)) ((lambda (G4869@env) (begin (set! G485f@the-env G4869@env) G4869@env)) (G3014@make-interaction-env G4862@rib '() '())))) (G2b7c@G2a1c@find-library-by-name '(mosh interaction)) (G2d19@make-cache-rib))))) '#f)) (set! G3066@top-level-context (G2908@G283e@make-parameter '#f)) (begin (set! G497a@G3066@top-level-context G3066@top-level-context) (set! G4979@G3064@interaction-environment G3064@interaction-environment) (set! G4978@G3062@pre-compile-r6rs-top-level G3062@pre-compile-r6rs-top-level) (set! G4977@G3060@compile-r6rs-top-level G3060@compile-r6rs-top-level) (set! G4976@G305e@syntax->datum G305e@syntax->datum) (set! G4975@G305c@datum->syntax G305c@datum->syntax) (set! G4974@G305a@identifier? G305a@identifier?) (set! G4973@G3058@syntax-violation G3058@syntax-violation) (set! G4972@G3056@syntax-violation* G3056@syntax-violation*) (set! G4971@G3054@extract-trace G3054@extract-trace) (set! G4970@G3052@syntax-error G3052@syntax-error) (set! G496f@G3050@assertion-error G3050@assertion-error) (set! G496e@G304e@expression-position G304e@expression-position) (set! G496d@G304c@extract-position-condition G304c@extract-position-condition) (set! G496c@G304a@make-source-condition G304a@make-source-condition) (set! G496b@G3048@bound-identifier=? G3048@bound-identifier=?) (set! G496a@G3046@free-identifier=? G3046@free-identifier=?) (set! G4969@G3044@generate-temporaries G3044@generate-temporaries) (set! G4968@G3042@make-export-env/macros G3042@make-export-env/macros) (set! G4967@G3040@make-export-subst G3040@make-export-subst) (set! G4966@G303e@build-exports G303e@build-exports) (set! G4965@G303c@rev-map-append G303c@rev-map-append) (set! G4964@G303a@boot-library-expand G303a@boot-library-expand) (set! G4963@G3038@library-expander G3038@library-expander) (set! G4962@G3036@eval G3036@eval) (set! G4961@G3034@expand G3034@expand) (set! G4960@G3032@scheme-report-environment G3032@scheme-report-environment) (set! G495f@G3030@null-environment G3030@null-environment) (set! G495e@G302e@environment G302e@environment) (set! G495d@G302c@environment-symbols G302c@environment-symbols) (set! G495c@G302a@environment? G302a@environment?) (set! G495b@G3028@parse-binding G3028@parse-binding) (set! G495a@G3026@environment-bindings G3026@environment-bindings) (set! G4959@G3024@interaction-environment-symbols G3024@interaction-environment-symbols) (set! G4958@G3022@rp G3022@rp) (set! G4957@G3020@set-interaction-env-locs! G3020@set-interaction-env-locs!) (set! G4956@G301e@set-interaction-env-r! G301e@set-interaction-env-r!) (set! G4955@G301c@set-interaction-env-rib! G301c@set-interaction-env-rib!) (set! G4954@G301a@interaction-env-locs G301a@interaction-env-locs) (set! G4953@G3018@interaction-env-r G3018@interaction-env-r) (set! G4952@G3016@interaction-env-rib G3016@interaction-env-rib) (set! G4951@G3014@make-interaction-env G3014@make-interaction-env) (set! G4950@G3012@interaction-env? G3012@interaction-env?) (set! G494f@G300f@G3007 G300f@G3007) (set! G494e@G300d@G3008 G300d@G3008) (set! G494d@G300b@G3006 G300b@G3006) (set! G494c@G3005@rp G3005@rp) (set! G494b@G3003@set-env-itc! G3003@set-env-itc!) (set! G494a@G3001@set-env-labels! G3001@set-env-labels!) (set! G4949@G2fff@set-env-names! G2fff@set-env-names!) (set! G4948@G2ffd@env-itc G2ffd@env-itc) (set! G4947@G2ffb@env-labels G2ffb@env-labels) (set! G4946@G2ff9@env-names G2ff9@env-names) (set! G4945@G2ff7@make-env G2ff7@make-env) (set! G4944@G2ff5@env? G2ff5@env?) (set! G4943@G2ff2@G2fea G2ff2@G2fea) (set! G4942@G2ff0@G2feb G2ff0@G2feb) (set! G4941@G2fee@G2fe9 G2fee@G2fe9) (set! G4940@G2fe8@top-level-expander G2fe8@top-level-expander) (set! G493f@G2fe6@parse-top-level-program G2fe6@parse-top-level-program) (set! G493e@G2fe4@core-library-expander G2fe4@core-library-expander) (set! G493d@G2fe2@library-body-expander G2fe2@library-body-expander) (set! G493c@G2fe0@chi-interaction-expr G2fe0@chi-interaction-expr) (set! G493b@G2fde@chi-library-internal G2fde@chi-library-internal) (set! G493a@G2fdc@imp-collector G2fdc@imp-collector) (set! G4939@G2fda@vis-collector G2fda@vis-collector) (set! G4938@G2fd8@inv-collector G2fd8@inv-collector) (set! G4937@G2fd6@make-collector G2fd6@make-collector) (set! G4936@G2fd4@make-top-rib G2fd4@make-top-rib) (set! G4935@G2fd2@parse-import-spec* G2fd2@parse-import-spec*) (set! G4934@G2fd0@parse-library G2fd0@parse-library) (set! G4933@G2fce@parse-library-name G2fce@parse-library-name) (set! G4932@G2fcc@parse-exports G2fcc@parse-exports) (set! G4931@G2fca@expand-transformer G2fca@expand-transformer) (set! G4930@G2fc8@chi-body* G2fc8@chi-body*) (set! G492f@G2fc6@chi-internal-module G2fc6@chi-internal-module) (set! G492e@G2fc4@module-interface-exp-id* G2fc4@module-interface-exp-id*) (set! G492d@G2fc2@set-module-interface-exp-lab-vec! G2fc2@set-module-interface-exp-lab-vec!) (set! G492c@G2fc0@set-module-interface-exp-id-vec! G2fc0@set-module-interface-exp-id-vec!) (set! G492b@G2fbe@set-module-interface-first-mark! G2fbe@set-module-interface-first-mark!) (set! G492a@G2fbc@module-interface-exp-lab-vec G2fbc@module-interface-exp-lab-vec) (set! G4929@G2fba@module-interface-exp-id-vec G2fba@module-interface-exp-id-vec) (set! G4928@G2fb8@module-interface-first-mark G2fb8@module-interface-first-mark) (set! G4927@G2fb6@make-module-interface G2fb6@make-module-interface) (set! G4926@G2fb4@module-interface? G2fb4@module-interface?) (set! G4925@G2fb1@G2fa9 G2fb1@G2fa9) (set! G4924@G2faf@G2faa G2faf@G2faa) (set! G4923@G2fad@G2fa8 G2fad@G2fa8) (set! G4922@G2fa7@parse-module G2fa7@parse-module) (set! G4921@G2fa5@chi-internal G2fa5@chi-internal) (set! G4920@G2fa3@find-dups G2fa3@find-dups) (set! G491f@G2fa1@find-bound=? G2fa1@find-bound=?) (set! G491e@G2f9f@chi-rhs* G2f9f@chi-rhs*) (set! G491d@G2f9d@expand-interaction-rhs*/init* G2f9d@expand-interaction-rhs*/init*) (set! G491c@G2f9b@chi-rhs G2f9b@chi-rhs) (set! G491b@G2f99@chi-defun G2f99@chi-defun) (set! G491a@G2f97@chi-lambda-clause* G2f97@chi-lambda-clause*) (set! G4919@G2f95@chi-lambda-clause G2f95@chi-lambda-clause) (set! G4918@G2f93@verify-formals G2f93@verify-formals) (set! G4917@G2f91@chi-set! G2f91@chi-set!) (set! G4916@G2f8f@chi-expr G2f8f@chi-expr) (set! G4915@G2f8d@chi-application G2f8d@chi-application) (set! G4914@G2f8b@chi-expr* G2f8b@chi-expr*) (set! G4913@G2f89@chi-global-macro G2f89@chi-global-macro) (set! G4912@G2f87@chi-local-macro G2f87@chi-local-macro) (set! G4911@G2f85@chi-macro G2f85@chi-macro) (set! G4910@G2f83@do-macro-call G2f83@do-macro-call) (set! G490f@G2f81@local-macro-transformer G2f81@local-macro-transformer) (set! G490e@G2f7f@macro-transformer G2f7f@macro-transformer) (set! G490d@G2f7d@symbol-macro G2f7d@symbol-macro) (set! G490c@G2f7b@file-options-macro G2f7b@file-options-macro) (set! G490b@G2f79@core-macro-transformer G2f79@core-macro-transformer) (set! G490a@G2f77@syntax-transformer G2f77@syntax-transformer) (set! G4909@G2f75@ellipsis-map G2f75@ellipsis-map) (set! G4908@G2f73@syntax-case-transformer G2f73@syntax-case-transformer) (set! G4907@G2f71@verify-literals G2f71@verify-literals) (set! G4906@G2f6f@underscore? G2f6f@underscore?) (set! G4905@G2f6d@ellipsis? G2f6d@ellipsis?) (set! G4904@G2f6b@syntax-dispatch G2f6b@syntax-dispatch) (set! G4903@G2f69@convert-pattern G2f69@convert-pattern) (set! G4902@G2f67@foreign-call-transformer G2f67@foreign-call-transformer) (set! G4901@G2f65@parameterize-macro G2f65@parameterize-macro) (set! G4900@G2f63@incorrect-usage-macro G2f63@incorrect-usage-macro) (set! G48ff@G2f61@define-condition-type-macro G2f61@define-condition-type-macro) (set! G48fe@G2f5f@define-record-type-macro G2f5f@define-record-type-macro) (set! G48fd@G2f5d@define-struct-macro G2f5d@define-struct-macro) (set! G48fc@G2f5b@quasisyntax-macro G2f5b@quasisyntax-macro) (set! G48fb@G2f59@quasiquote-macro G2f59@quasiquote-macro) (set! G48fa@G2f57@syntax-rules-macro G2f57@syntax-rules-macro) (set! G48f9@G2f55@include-into-macro G2f55@include-into-macro) (set! G48f8@G2f53@include-macro G2f53@include-macro) (set! G48f7@G2f51@do-include G2f51@do-include) (set! G48f6@G2f4f@cond-macro G2f4f@cond-macro) (set! G48f5@G2f4d@and-macro G2f4d@and-macro) (set! G48f4@G2f4b@or-macro G2f4b@or-macro) (set! G48f3@G2f49@let*-macro G2f49@let*-macro) (set! G48f2@G2f47@do-macro G2f47@do-macro) (set! G48f1@G2f45@identifier-syntax-macro G2f45@identifier-syntax-macro) (set! G48f0@G2f43@endianness-macro G2f43@endianness-macro) (set! G48ef@G2f41@assert-macro G2f41@assert-macro) (set! G48ee@G2f3f@delay-macro G2f3f@delay-macro) (set! G48ed@G2f3d@time-macro G2f3d@time-macro) (set! G48ec@G2f3b@define-enumeration-macro G2f3b@define-enumeration-macro) (set! G48eb@G2f39@guard-macro G2f39@guard-macro) (set! G48ea@G2f37@trace-letrec-syntax-macro G2f37@trace-letrec-syntax-macro) (set! G48e9@G2f35@trace-let-syntax-macro G2f35@trace-let-syntax-macro) (set! G48e8@G2f33@trace-let/rec-syntax G2f33@trace-let/rec-syntax) (set! G48e7@G2f31@trace-define-syntax-macro G2f31@trace-define-syntax-macro) (set! G48e6@G2f2f@trace-define-macro G2f2f@trace-define-macro) (set! G48e5@G2f2d@trace-lambda-macro G2f2d@trace-lambda-macro) (set! G48e4@G2f2b@let*-values-macro G2f2b@let*-values-macro) (set! G48e3@G2f29@let-values-macro G2f29@let-values-macro) (set! G48e2@G2f27@let-macro G2f27@let-macro) (set! G48e1@G2f25@invalid-fmls-error G2f25@invalid-fmls-error) (set! G48e0@G2f23@with-syntax-macro G2f23@with-syntax-macro) (set! G48df@G2f21@bless G2f21@bless) (set! G48de@G2f1f@lambda-transformer G2f1f@lambda-transformer) (set! G48dd@G2f1d@case-lambda-transformer G2f1d@case-lambda-transformer) (set! G48dc@G2f1b@quote-transformer G2f1b@quote-transformer) (set! G48db@G2f19@case-macro G2f19@case-macro) (set! G48da@G2f17@or-transformer G2f17@or-transformer) (set! G48d9@G2f15@and-transformer G2f15@and-transformer) (set! G48d8@G2f13@if-transformer G2f13@if-transformer) (set! G48d7@G2f11@unless-macro G2f11@unless-macro) (set! G48d6@G2f0f@when-macro G2f0f@when-macro) (set! G48d5@G2f0d@record-constructor-descriptor-transformer G2f0d@record-constructor-descriptor-transformer) (set! G48d4@G2f0b@record-type-descriptor-transformer G2f0b@record-type-descriptor-transformer) (set! G48d3@G2f09@type-descriptor-transformer G2f09@type-descriptor-transformer) (set! G48d2@G2f07@fluid-let-syntax-transformer G2f07@fluid-let-syntax-transformer) (set! G48d1@G2f05@letrec*-transformer G2f05@letrec*-transformer) (set! G48d0@G2f03@letrec-transformer G2f03@letrec-transformer) (set! G48cf@G2f01@letrec-helper G2f01@letrec-helper) (set! G48ce@G2eff@add-lexicals G2eff@add-lexicals) (set! G48cd@G2efd@add-lexical G2efd@add-lexical) (set! G48cc@G2efb@set-lexical-mutable! G2efb@set-lexical-mutable!) (set! G48cb@G2ef9@lexical-mutable? G2ef9@lexical-mutable?) (set! G48ca@G2ef7@lexical-var G2ef7@lexical-var) (set! G48c9@G2ef5@scheme-stx G2ef5@scheme-stx) (set! G48c8@G2ef3@scheme-stx-hashtable G2ef3@scheme-stx-hashtable) (set! G48c7@G2ef1@parse-define-syntax G2ef1@parse-define-syntax) (set! G48c6@G2eef@parse-define G2eef@parse-define) (set! G48c5@G2dac@make-eval-transformer G2dac@make-eval-transformer) (set! G48c4@G2daa@variable-transformer-procedure G2daa@variable-transformer-procedure) (set! G48c3@G2da8@variable-transformer? G2da8@variable-transformer?) (set! G48c2@G2da6@make-variable-transformer G2da6@make-variable-transformer) (set! G48c1@G2da4@sanitize-binding G2da4@sanitize-binding) (set! G48c0@G2d94@syntax-type G2d94@syntax-type) (set! G48bf@G2d92@raise-unbound-error G2d92@raise-unbound-error) (set! G48be@G2d90@binding-value G2d90@binding-value) (set! G48bd@G2d8e@binding-type G2d8e@binding-type) (set! G48bc@G2d8c@make-binding G2d8c@make-binding) (set! G48bb@G2d8a@label->binding G2d8a@label->binding) (set! G48ba@G2d88@id->real-label G2d88@id->real-label) (set! G48b9@G2d86@id->label G2d86@id->label) (set! G48b8@G2d84@same-marks*? G2d84@same-marks*?) (set! G48b7@G2d82@stx->datum G2d82@stx->datum) (set! G48b6@G2d80@strip G2d80@strip) (set! G48b5@G2d7e@strip-annotations G2d7e@strip-annotations) (set! G48b4@G2d7c@self-evaluating? G2d7c@self-evaluating?) (set! G48b3@G2d7a@bound-id-member? G2d7a@bound-id-member?) (set! G48b2@G2d78@distinct-bound-ids? G2d78@distinct-bound-ids?) (set! G48b1@G2d76@valid-bound-ids? G2d76@valid-bound-ids?) (set! G48b0@G2d74@free-id=? G2d74@free-id=?) (set! G48af@G2d72@bound-id=? G2d72@bound-id=?) (set! G48ae@G2d70@same-marks? G2d70@same-marks?) (set! G48ad@G2d6e@id->sym G2d6e@id->sym) (set! G48ac@G2d6c@id? G2d6c@id?) (set! G48ab@G2d6a@syntax->list G2d6a@syntax->list) (set! G48aa@G2d68@syntax-cdr G2d68@syntax-cdr) (set! G48a9@G2d66@syntax-car G2d66@syntax-car) (set! G48a8@G2d64@syntax-list? G2d64@syntax-list?) (set! G48a7@G2d62@syntax-null? G2d62@syntax-null?) (set! G48a6@G2d60@syntax-vector? G2d60@syntax-vector?) (set! G48a5@G2d5e@syntax-pair? G2d5e@syntax-pair?) (set! G48a4@G2d5c@syntax-vector->list G2d5c@syntax-vector->list) (set! G48a3@G2d5a@syntax-kind? G2d5a@syntax-kind?) (set! G48a2@G2d58@add-subst G2d58@add-subst) (set! G48a1@G2d56@add-mark G2d56@add-mark) (set! G48a0@G2d54@mkstx G2d54@mkstx) (set! G489f@G2d52@join-wraps G2d52@join-wraps) (set! G489e@G2d50@anti-mark? G2d50@anti-mark?) (set! G489d@G2d4e@anti-mark G2d4e@anti-mark) (set! G489c@G2d4c@gen-mark G2d4c@gen-mark) (set! G489b@G2d4a@datum->stx G2d4a@datum->stx) (set! G489a@G2d48@rp G2d48@rp) (set! G4899@G2d46@set-stx-ae*! G2d46@set-stx-ae*!) (set! G4898@G2d44@set-stx-subst*! G2d44@set-stx-subst*!) (set! G4897@G2d42@set-stx-mark*! G2d42@set-stx-mark*!) (set! G4896@G2d40@set-stx-expr! G2d40@set-stx-expr!) (set! G4895@G2d3e@stx-ae* G2d3e@stx-ae*) (set! G4894@G2d3c@stx-subst* G2d3c@stx-subst*) (set! G4893@G2d3a@stx-mark* G2d3a@stx-mark*) (set! G4892@G2d38@stx-expr G2d38@stx-expr) (set! G4891@G2d36@make-stx G2d36@make-stx) (set! G4890@G2d34@stx? G2d34@stx?) (set! G488f@G2d31@G2d29 G2d31@G2d29) (set! G488e@G2d2f@G2d2a G2d2f@G2d2a) (set! G488d@G2d2d@G2d28 G2d2d@G2d28) (set! G488c@G2d27@make-full-rib G2d27@make-full-rib) (set! G488b@G2d25@unseal-rib! G2d25@unseal-rib!) (set! G488a@G2d23@seal-rib! G2d23@seal-rib!) (set! G4889@G2d21@make-rib-map G2d21@make-rib-map) (set! G4888@G2d1f@extend-rib/nc! G2d1f@extend-rib/nc!) (set! G4887@G2d1d@extend-rib! G2d1d@extend-rib!) (set! G4886@G2d1b@find-label G2d1b@find-label) (set! G4885@G2d19@make-cache-rib G2d19@make-cache-rib) (set! G4884@G2d17@make-empty-rib G2d17@make-empty-rib) (set! G4883@G2d15@set-rib-cache! G2d15@set-rib-cache!) (set! G4882@G2d13@set-rib-sealed/freq! G2d13@set-rib-sealed/freq!) (set! G4881@G2d11@set-rib-label*! G2d11@set-rib-label*!) (set! G4880@G2d0f@set-rib-mark**! G2d0f@set-rib-mark**!) (set! G487f@G2d0d@set-rib-sym*! G2d0d@set-rib-sym*!) (set! G487e@G2d0b@rib-cache G2d0b@rib-cache) (set! G487d@G2d09@rib-sealed/freq G2d09@rib-sealed/freq) (set! G487c@G2d07@rib-label* G2d07@rib-label*) (set! G487b@G2d05@rib-mark** G2d05@rib-mark**) (set! G487a@G2d03@rib-sym* G2d03@rib-sym*) (set! G4879@G2d01@make-rib G2d01@make-rib) (set! G4878@G2cff@rib? G2cff@rib?) (set! G4877@G2cfc@G2cf4 G2cfc@G2cf4) (set! G4876@G2cfa@G2cf5 G2cfa@G2cf5) (set! G4875@G2cf8@G2cf3 G2cf8@G2cf3) (set! G4874@G2cf2@gen-define-label G2cf2@gen-define-label) (set! G4873@G2cf0@gen-define-label+loc G2cf0@gen-define-label+loc) (set! G4872@G2cee@gen-top-level-label G2cee@gen-top-level-label) (set! G4871@G2cec@gen-label G2cec@gen-label) (set! G4870@G2cea@gen-global G2cea@gen-global) (set! G486f@G2ce8@gen-lexical G2ce8@gen-lexical) (set! G486e@G2ce6@top-marked? G2ce6@top-marked?) (set! G486d@G2ce4@top-mark* G2ce4@top-mark*) (set! G486c@G2cdf@set-union G2cdf@set-union) (set! G486b@G2cdd@set-cons G2cdd@set-cons) (G2b79@G2a16@current-library-expander G3038@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4984@G497f G4986@G4981 G4988@G4980 G498b@&condition? G498d@make-&condition G498f@&condition-rtd G4991@&condition-rcd G49db@G49d6 G49dd@G49d8 G49df@G49d7 G49e2@p? G49e4@make-message-condition G49e6@G49d5 G49e8@message-condition? G49ea@condition-message G49ec@&message-rtd G49ee@&message-rcd G49f4@G49ef G49f6@G49f1 G49f8@G49f0 G49fb@p? G49fd@make-warning G49ff@warning? G4a01@&warning-rtd G4a03@&warning-rcd G4a09@G4a04 G4a0b@G4a06 G4a0d@G4a05 G4a10@p? G4a12@make-serious-condition G4a14@serious-condition? G4a16@&serious-rtd G4a18@&serious-rcd G4a1e@G4a19 G4a20@G4a1b G4a22@G4a1a G4a25@p? G4a27@make-error G4a29@error? G4a2b@&error-rtd G4a2d@&error-rcd G4a33@G4a2e G4a35@G4a30 G4a37@G4a2f G4a3a@p? G4a3c@make-violation G4a3e@violation? G4a40@&violation-rtd G4a42@&violation-rcd G4a48@G4a43 G4a4a@G4a45 G4a4c@G4a44 G4a4f@p? G4a51@make-assertion-violation G4a53@assertion-violation? G4a55@&assertion-rtd G4a57@&assertion-rcd G4a5e@G4a59 G4a60@G4a5b G4a62@G4a5a G4a65@p? G4a67@make-irritants-condition G4a69@G4a58 G4a6b@irritants-condition? G4a6d@condition-irritants G4a6f@&irritants-rtd G4a71@&irritants-rcd G4a78@G4a73 G4a7a@G4a75 G4a7c@G4a74 G4a7f@p? G4a81@make-who-condition G4a83@G4a72 G4a85@who-condition? G4a87@condition-who G4a89@&who-rtd G4a8b@&who-rcd G4a91@G4a8c G4a93@G4a8e G4a95@G4a8d G4a98@p? G4a9a@make-non-continuable-violation G4a9c@non-continuable-violation? G4a9e@&non-continuable-rtd G4aa0@&non-continuable-rcd G4aa6@G4aa1 G4aa8@G4aa3 G4aaa@G4aa2 G4aad@p? G4aaf@make-implementation-restriction-violation G4ab1@implementation-restriction-violation? G4ab3@&implementation-restriction-rtd G4ab5@&implementation-restriction-rcd G4abb@G4ab6 G4abd@G4ab8 G4abf@G4ab7 G4ac2@p? G4ac4@make-lexical-violation G4ac6@lexical-violation? G4ac8@&lexical-rtd G4aca@&lexical-rcd G4ad2@G4acd G4ad4@G4acf G4ad6@G4ace G4ad9@p? G4adb@make-syntax-violation G4add@G4acb G4adf@G4acc G4ae1@syntax-violation? G4ae3@syntax-violation-form G4ae5@syntax-violation-subform G4ae7@&syntax-rtd G4ae9@&syntax-rcd G4aef@G4aea G4af1@G4aec G4af3@G4aeb G4af6@p? G4af8@make-undefined-violation G4afa@undefined-violation? G4afc@&undefined-rtd G4afe@&undefined-rcd G4b04@G4aff G4b06@G4b01 G4b08@G4b00 G4b0b@p? G4b0d@make-i/o-error G4b0f@i/o-error? G4b11@&i/o-rtd G4b13@&i/o-rcd G4b19@G4b14 G4b1b@G4b16 G4b1d@G4b15 G4b20@p? G4b22@make-i/o-read-error G4b24@i/o-read-error? G4b26@&i/o-read-rtd G4b28@&i/o-read-rcd G4b2e@G4b29 G4b30@G4b2b G4b32@G4b2a G4b35@p? G4b37@make-i/o-write-error G4b39@i/o-write-error? G4b3b@&i/o-write-rtd G4b3d@&i/o-write-rcd G4b44@G4b3f G4b46@G4b41 G4b48@G4b40 G4b4b@p? G4b4d@make-i/o-invalid-position-error G4b4f@G4b3e G4b51@i/o-invalid-position-error? G4b53@i/o-error-position G4b55@&i/o-invalid-position-rtd G4b57@&i/o-invalid-position-rcd G4b5e@G4b59 G4b60@G4b5b G4b62@G4b5a G4b65@p? G4b67@make-i/o-filename-error G4b69@G4b58 G4b6b@i/o-filename-error? G4b6d@i/o-error-filename G4b6f@&i/o-filename-rtd G4b71@&i/o-filename-rcd G4b77@G4b72 G4b79@G4b74 G4b7b@G4b73 G4b7e@p? G4b80@make-i/o-file-protection-error G4b82@i/o-file-protection-error? G4b84@&i/o-file-protection-rtd G4b86@&i/o-file-protection-rcd G4b8c@G4b87 G4b8e@G4b89 G4b90@G4b88 G4b93@p? G4b95@make-i/o-file-is-read-only-error G4b97@i/o-file-is-read-only-error? G4b99@&i/o-file-is-read-only-rtd G4b9b@&i/o-file-is-read-only-rcd G4ba1@G4b9c G4ba3@G4b9e G4ba5@G4b9d G4ba8@p? G4baa@make-i/o-file-already-exists-error G4bac@i/o-file-already-exists-error? G4bae@&i/o-file-already-exists-rtd G4bb0@&i/o-file-already-exists-rcd G4bb6@G4bb1 G4bb8@G4bb3 G4bba@G4bb2 G4bbd@p? G4bbf@make-i/o-file-does-not-exist-error G4bc1@i/o-file-does-not-exist-error? G4bc3@&i/o-file-does-not-exist-rtd G4bc5@&i/o-file-does-not-exist-rcd G4bcc@G4bc7 G4bce@G4bc9 G4bd0@G4bc8 G4bd3@p? G4bd5@make-i/o-port-error G4bd7@G4bc6 G4bd9@i/o-port-error? G4bdb@i/o-error-port G4bdd@&i/o-port-rtd G4bdf@&i/o-port-rcd G4be5@G4be0 G4be7@G4be2 G4be9@G4be1 G4bec@p? G4bee@make-i/o-decoding-error G4bf0@i/o-decoding-error? G4bf2@&i/o-decoding-rtd G4bf4@&i/o-decoding-rcd G4bfb@G4bf6 G4bfd@G4bf8 G4bff@G4bf7 G4c02@p? G4c04@make-i/o-encoding-error G4c06@G4bf5 G4c08@i/o-encoding-error? G4c0a@i/o-encoding-error-char G4c0c@&i/o-encoding-rtd G4c0e@&i/o-encoding-rcd G4c14@G4c0f G4c16@G4c11 G4c18@G4c10 G4c1b@p? G4c1d@make-no-infinities-violation G4c1f@no-infinities-violation? G4c21@&no-infinities-rtd G4c23@&no-infinities-rcd G4c29@G4c24 G4c2b@G4c26 G4c2d@G4c25 G4c30@p? G4c32@make-no-nans-violation G4c34@no-nans-violation? G4c36@&no-nans-rtd G4c38@&no-nans-rcd) (begin (set! G4984@G497f (make-record-type-descriptor '&condition '#f 'G4982 '#f '#f '#())) (set! G4986@G4981 '#f) (set! G4988@G4980 (make-record-constructor-descriptor G4984@G497f '#f G4986@G4981)) (set! G498b@&condition? (record-predicate G4984@G497f)) (set! G498d@make-&condition (record-constructor G4988@G4980)) (set! G498f@&condition-rtd G4984@G497f) (set! G4991@&condition-rcd G4988@G4980) (set! G49db@G49d6 (make-record-type-descriptor '&message G4984@G497f 'G49d9 '#f '#f '#((immutable message)))) (set! G49dd@G49d8 '#f) (set! G49df@G49d7 (make-record-constructor-descriptor G49db@G49d6 G4988@G4980 G49dd@G49d8)) (set! G49e2@p? (record-predicate G49db@G49d6)) (set! G49e4@make-message-condition (record-constructor G49df@G49d7)) (set! G49e6@G49d5 (record-accessor G49db@G49d6 '0)) (set! G49e8@message-condition? (condition-predicate G49db@G49d6)) (set! G49ea@condition-message (condition-accessor G49db@G49d6 G49e6@G49d5)) (set! G49ec@&message-rtd G49db@G49d6) (set! G49ee@&message-rcd G49df@G49d7) (set! G49f4@G49ef (make-record-type-descriptor '&warning G4984@G497f 'G49f2 '#f '#f '#())) (set! G49f6@G49f1 '#f) (set! G49f8@G49f0 (make-record-constructor-descriptor G49f4@G49ef G4988@G4980 G49f6@G49f1)) (set! G49fb@p? (record-predicate G49f4@G49ef)) (set! G49fd@make-warning (record-constructor G49f8@G49f0)) (set! G49ff@warning? (condition-predicate G49f4@G49ef)) (set! G4a01@&warning-rtd G49f4@G49ef) (set! G4a03@&warning-rcd G49f8@G49f0) (set! G4a09@G4a04 (make-record-type-descriptor '&serious G4984@G497f 'G4a07 '#f '#f '#())) (set! G4a0b@G4a06 '#f) (set! G4a0d@G4a05 (make-record-constructor-descriptor G4a09@G4a04 G4988@G4980 G4a0b@G4a06)) (set! G4a10@p? (record-predicate G4a09@G4a04)) (set! G4a12@make-serious-condition (record-constructor G4a0d@G4a05)) (set! G4a14@serious-condition? (condition-predicate G4a09@G4a04)) (set! G4a16@&serious-rtd G4a09@G4a04) (set! G4a18@&serious-rcd G4a0d@G4a05) (set! G4a1e@G4a19 (make-record-type-descriptor '&error G4a09@G4a04 'G4a1c '#f '#f '#())) (set! G4a20@G4a1b '#f) (set! G4a22@G4a1a (make-record-constructor-descriptor G4a1e@G4a19 G4a0d@G4a05 G4a20@G4a1b)) (set! G4a25@p? (record-predicate G4a1e@G4a19)) (set! G4a27@make-error (record-constructor G4a22@G4a1a)) (set! G4a29@error? (condition-predicate G4a1e@G4a19)) (set! G4a2b@&error-rtd G4a1e@G4a19) (set! G4a2d@&error-rcd G4a22@G4a1a) (set! G4a33@G4a2e (make-record-type-descriptor '&violation G4a09@G4a04 'G4a31 '#f '#f '#())) (set! G4a35@G4a30 '#f) (set! G4a37@G4a2f (make-record-constructor-descriptor G4a33@G4a2e G4a0d@G4a05 G4a35@G4a30)) (set! G4a3a@p? (record-predicate G4a33@G4a2e)) (set! G4a3c@make-violation (record-constructor G4a37@G4a2f)) (set! G4a3e@violation? (condition-predicate G4a33@G4a2e)) (set! G4a40@&violation-rtd G4a33@G4a2e) (set! G4a42@&violation-rcd G4a37@G4a2f) (set! G4a48@G4a43 (make-record-type-descriptor '&assertion G4a33@G4a2e 'G4a46 '#f '#f '#())) (set! G4a4a@G4a45 '#f) (set! G4a4c@G4a44 (make-record-constructor-descriptor G4a48@G4a43 G4a37@G4a2f G4a4a@G4a45)) (set! G4a4f@p? (record-predicate G4a48@G4a43)) (set! G4a51@make-assertion-violation (record-constructor G4a4c@G4a44)) (set! G4a53@assertion-violation? (condition-predicate G4a48@G4a43)) (set! G4a55@&assertion-rtd G4a48@G4a43) (set! G4a57@&assertion-rcd G4a4c@G4a44) (set! G4a5e@G4a59 (make-record-type-descriptor '&irritants G4984@G497f 'G4a5c '#f '#f '#((immutable irritants)))) (set! G4a60@G4a5b '#f) (set! G4a62@G4a5a (make-record-constructor-descriptor G4a5e@G4a59 G4988@G4980 G4a60@G4a5b)) (set! G4a65@p? (record-predicate G4a5e@G4a59)) (set! G4a67@make-irritants-condition (record-constructor G4a62@G4a5a)) (set! G4a69@G4a58 (record-accessor G4a5e@G4a59 '0)) (set! G4a6b@irritants-condition? (condition-predicate G4a5e@G4a59)) (set! G4a6d@condition-irritants (condition-accessor G4a5e@G4a59 G4a69@G4a58)) (set! G4a6f@&irritants-rtd G4a5e@G4a59) (set! G4a71@&irritants-rcd G4a62@G4a5a) (set! G4a78@G4a73 (make-record-type-descriptor '&who G4984@G497f 'G4a76 '#f '#f '#((immutable who)))) (set! G4a7a@G4a75 '#f) (set! G4a7c@G4a74 (make-record-constructor-descriptor G4a78@G4a73 G4988@G4980 G4a7a@G4a75)) (set! G4a7f@p? (record-predicate G4a78@G4a73)) (set! G4a81@make-who-condition (record-constructor G4a7c@G4a74)) (set! G4a83@G4a72 (record-accessor G4a78@G4a73 '0)) (set! G4a85@who-condition? (condition-predicate G4a78@G4a73)) (set! G4a87@condition-who (condition-accessor G4a78@G4a73 G4a83@G4a72)) (set! G4a89@&who-rtd G4a78@G4a73) (set! G4a8b@&who-rcd G4a7c@G4a74) (set! G4a91@G4a8c (make-record-type-descriptor '&non-continuable G4a33@G4a2e 'G4a8f '#f '#f '#())) (set! G4a93@G4a8e '#f) (set! G4a95@G4a8d (make-record-constructor-descriptor G4a91@G4a8c G4a37@G4a2f G4a93@G4a8e)) (set! G4a98@p? (record-predicate G4a91@G4a8c)) (set! G4a9a@make-non-continuable-violation (record-constructor G4a95@G4a8d)) (set! G4a9c@non-continuable-violation? (condition-predicate G4a91@G4a8c)) (set! G4a9e@&non-continuable-rtd G4a91@G4a8c) (set! G4aa0@&non-continuable-rcd G4a95@G4a8d) (set! G4aa6@G4aa1 (make-record-type-descriptor '&implementation-restriction G4a33@G4a2e 'G4aa4 '#f '#f '#())) (set! G4aa8@G4aa3 '#f) (set! G4aaa@G4aa2 (make-record-constructor-descriptor G4aa6@G4aa1 G4a37@G4a2f G4aa8@G4aa3)) (set! G4aad@p? (record-predicate G4aa6@G4aa1)) (set! G4aaf@make-implementation-restriction-violation (record-constructor G4aaa@G4aa2)) (set! G4ab1@implementation-restriction-violation? (condition-predicate G4aa6@G4aa1)) (set! G4ab3@&implementation-restriction-rtd G4aa6@G4aa1) (set! G4ab5@&implementation-restriction-rcd G4aaa@G4aa2) (set! G4abb@G4ab6 (make-record-type-descriptor '&lexical G4a33@G4a2e 'G4ab9 '#f '#f '#())) (set! G4abd@G4ab8 '#f) (set! G4abf@G4ab7 (make-record-constructor-descriptor G4abb@G4ab6 G4a37@G4a2f G4abd@G4ab8)) (set! G4ac2@p? (record-predicate G4abb@G4ab6)) (set! G4ac4@make-lexical-violation (record-constructor G4abf@G4ab7)) (set! G4ac6@lexical-violation? (condition-predicate G4abb@G4ab6)) (set! G4ac8@&lexical-rtd G4abb@G4ab6) (set! G4aca@&lexical-rcd G4abf@G4ab7) (set! G4ad2@G4acd (make-record-type-descriptor '&syntax G4a33@G4a2e 'G4ad0 '#f '#f '#((immutable form) (immutable subform)))) (set! G4ad4@G4acf '#f) (set! G4ad6@G4ace (make-record-constructor-descriptor G4ad2@G4acd G4a37@G4a2f G4ad4@G4acf)) (set! G4ad9@p? (record-predicate G4ad2@G4acd)) (set! G4adb@make-syntax-violation (record-constructor G4ad6@G4ace)) (set! G4add@G4acb (record-accessor G4ad2@G4acd '0)) (set! G4adf@G4acc (record-accessor G4ad2@G4acd '1)) (set! G4ae1@syntax-violation? (condition-predicate G4ad2@G4acd)) (set! G4ae3@syntax-violation-form (condition-accessor G4ad2@G4acd G4add@G4acb)) (set! G4ae5@syntax-violation-subform (condition-accessor G4ad2@G4acd G4adf@G4acc)) (set! G4ae7@&syntax-rtd G4ad2@G4acd) (set! G4ae9@&syntax-rcd G4ad6@G4ace) (set! G4aef@G4aea (make-record-type-descriptor '&undefined G4a33@G4a2e 'G4aed '#f '#f '#())) (set! G4af1@G4aec '#f) (set! G4af3@G4aeb (make-record-constructor-descriptor G4aef@G4aea G4a37@G4a2f G4af1@G4aec)) (set! G4af6@p? (record-predicate G4aef@G4aea)) (set! G4af8@make-undefined-violation (record-constructor G4af3@G4aeb)) (set! G4afa@undefined-violation? (condition-predicate G4aef@G4aea)) (set! G4afc@&undefined-rtd G4aef@G4aea) (set! G4afe@&undefined-rcd G4af3@G4aeb) (set! G4b04@G4aff (make-record-type-descriptor '&i/o G4a1e@G4a19 'G4b02 '#f '#f '#())) (set! G4b06@G4b01 '#f) (set! G4b08@G4b00 (make-record-constructor-descriptor G4b04@G4aff G4a22@G4a1a G4b06@G4b01)) (set! G4b0b@p? (record-predicate G4b04@G4aff)) (set! G4b0d@make-i/o-error (record-constructor G4b08@G4b00)) (set! G4b0f@i/o-error? (condition-predicate G4b04@G4aff)) (set! G4b11@&i/o-rtd G4b04@G4aff) (set! G4b13@&i/o-rcd G4b08@G4b00) (set! G4b19@G4b14 (make-record-type-descriptor '&i/o-read G4b04@G4aff 'G4b17 '#f '#f '#())) (set! G4b1b@G4b16 '#f) (set! G4b1d@G4b15 (make-record-constructor-descriptor G4b19@G4b14 G4b08@G4b00 G4b1b@G4b16)) (set! G4b20@p? (record-predicate G4b19@G4b14)) (set! G4b22@make-i/o-read-error (record-constructor G4b1d@G4b15)) (set! G4b24@i/o-read-error? (condition-predicate G4b19@G4b14)) (set! G4b26@&i/o-read-rtd G4b19@G4b14) (set! G4b28@&i/o-read-rcd G4b1d@G4b15) (set! G4b2e@G4b29 (make-record-type-descriptor '&i/o-write G4b04@G4aff 'G4b2c '#f '#f '#())) (set! G4b30@G4b2b '#f) (set! G4b32@G4b2a (make-record-constructor-descriptor G4b2e@G4b29 G4b08@G4b00 G4b30@G4b2b)) (set! G4b35@p? (record-predicate G4b2e@G4b29)) (set! G4b37@make-i/o-write-error (record-constructor G4b32@G4b2a)) (set! G4b39@i/o-write-error? (condition-predicate G4b2e@G4b29)) (set! G4b3b@&i/o-write-rtd G4b2e@G4b29) (set! G4b3d@&i/o-write-rcd G4b32@G4b2a) (set! G4b44@G4b3f (make-record-type-descriptor '&i/o-invalid-position G4b04@G4aff 'G4b42 '#f '#f '#((immutable position)))) (set! G4b46@G4b41 '#f) (set! G4b48@G4b40 (make-record-constructor-descriptor G4b44@G4b3f G4b08@G4b00 G4b46@G4b41)) (set! G4b4b@p? (record-predicate G4b44@G4b3f)) (set! G4b4d@make-i/o-invalid-position-error (record-constructor G4b48@G4b40)) (set! G4b4f@G4b3e (record-accessor G4b44@G4b3f '0)) (set! G4b51@i/o-invalid-position-error? (condition-predicate G4b44@G4b3f)) (set! G4b53@i/o-error-position (condition-accessor G4b44@G4b3f G4b4f@G4b3e)) (set! G4b55@&i/o-invalid-position-rtd G4b44@G4b3f) (set! G4b57@&i/o-invalid-position-rcd G4b48@G4b40) (set! G4b5e@G4b59 (make-record-type-descriptor '&i/o-filename G4b04@G4aff 'G4b5c '#f '#f '#((immutable filename)))) (set! G4b60@G4b5b '#f) (set! G4b62@G4b5a (make-record-constructor-descriptor G4b5e@G4b59 G4b08@G4b00 G4b60@G4b5b)) (set! G4b65@p? (record-predicate G4b5e@G4b59)) (set! G4b67@make-i/o-filename-error (record-constructor G4b62@G4b5a)) (set! G4b69@G4b58 (record-accessor G4b5e@G4b59 '0)) (set! G4b6b@i/o-filename-error? (condition-predicate G4b5e@G4b59)) (set! G4b6d@i/o-error-filename (condition-accessor G4b5e@G4b59 G4b69@G4b58)) (set! G4b6f@&i/o-filename-rtd G4b5e@G4b59) (set! G4b71@&i/o-filename-rcd G4b62@G4b5a) (set! G4b77@G4b72 (make-record-type-descriptor '&i/o-file-protection G4b5e@G4b59 'G4b75 '#f '#f '#())) (set! G4b79@G4b74 '#f) (set! G4b7b@G4b73 (make-record-constructor-descriptor G4b77@G4b72 G4b62@G4b5a G4b79@G4b74)) (set! G4b7e@p? (record-predicate G4b77@G4b72)) (set! G4b80@make-i/o-file-protection-error (record-constructor G4b7b@G4b73)) (set! G4b82@i/o-file-protection-error? (condition-predicate G4b77@G4b72)) (set! G4b84@&i/o-file-protection-rtd G4b77@G4b72) (set! G4b86@&i/o-file-protection-rcd G4b7b@G4b73) (set! G4b8c@G4b87 (make-record-type-descriptor '&i/o-file-is-read-only G4b77@G4b72 'G4b8a '#f '#f '#())) (set! G4b8e@G4b89 '#f) (set! G4b90@G4b88 (make-record-constructor-descriptor G4b8c@G4b87 G4b7b@G4b73 G4b8e@G4b89)) (set! G4b93@p? (record-predicate G4b8c@G4b87)) (set! G4b95@make-i/o-file-is-read-only-error (record-constructor G4b90@G4b88)) (set! G4b97@i/o-file-is-read-only-error? (condition-predicate G4b8c@G4b87)) (set! G4b99@&i/o-file-is-read-only-rtd G4b8c@G4b87) (set! G4b9b@&i/o-file-is-read-only-rcd G4b90@G4b88) (set! G4ba1@G4b9c (make-record-type-descriptor '&i/o-file-already-exists G4b5e@G4b59 'G4b9f '#f '#f '#())) (set! G4ba3@G4b9e '#f) (set! G4ba5@G4b9d (make-record-constructor-descriptor G4ba1@G4b9c G4b62@G4b5a G4ba3@G4b9e)) (set! G4ba8@p? (record-predicate G4ba1@G4b9c)) (set! G4baa@make-i/o-file-already-exists-error (record-constructor G4ba5@G4b9d)) (set! G4bac@i/o-file-already-exists-error? (condition-predicate G4ba1@G4b9c)) (set! G4bae@&i/o-file-already-exists-rtd G4ba1@G4b9c) (set! G4bb0@&i/o-file-already-exists-rcd G4ba5@G4b9d) (set! G4bb6@G4bb1 (make-record-type-descriptor '&i/o-file-does-not-exist G4b5e@G4b59 'G4bb4 '#f '#f '#())) (set! G4bb8@G4bb3 '#f) (set! G4bba@G4bb2 (make-record-constructor-descriptor G4bb6@G4bb1 G4b62@G4b5a G4bb8@G4bb3)) (set! G4bbd@p? (record-predicate G4bb6@G4bb1)) (set! G4bbf@make-i/o-file-does-not-exist-error (record-constructor G4bba@G4bb2)) (set! G4bc1@i/o-file-does-not-exist-error? (condition-predicate G4bb6@G4bb1)) (set! G4bc3@&i/o-file-does-not-exist-rtd G4bb6@G4bb1) (set! G4bc5@&i/o-file-does-not-exist-rcd G4bba@G4bb2) (set! G4bcc@G4bc7 (make-record-type-descriptor '&i/o-port G4b04@G4aff 'G4bca '#f '#f '#((immutable port)))) (set! G4bce@G4bc9 '#f) (set! G4bd0@G4bc8 (make-record-constructor-descriptor G4bcc@G4bc7 G4b08@G4b00 G4bce@G4bc9)) (set! G4bd3@p? (record-predicate G4bcc@G4bc7)) (set! G4bd5@make-i/o-port-error (record-constructor G4bd0@G4bc8)) (set! G4bd7@G4bc6 (record-accessor G4bcc@G4bc7 '0)) (set! G4bd9@i/o-port-error? (condition-predicate G4bcc@G4bc7)) (set! G4bdb@i/o-error-port (condition-accessor G4bcc@G4bc7 G4bd7@G4bc6)) (set! G4bdd@&i/o-port-rtd G4bcc@G4bc7) (set! G4bdf@&i/o-port-rcd G4bd0@G4bc8) (set! G4be5@G4be0 (make-record-type-descriptor '&i/o-decoding G4bcc@G4bc7 'G4be3 '#f '#f '#())) (set! G4be7@G4be2 '#f) (set! G4be9@G4be1 (make-record-constructor-descriptor G4be5@G4be0 G4bd0@G4bc8 G4be7@G4be2)) (set! G4bec@p? (record-predicate G4be5@G4be0)) (set! G4bee@make-i/o-decoding-error (record-constructor G4be9@G4be1)) (set! G4bf0@i/o-decoding-error? (condition-predicate G4be5@G4be0)) (set! G4bf2@&i/o-decoding-rtd G4be5@G4be0) (set! G4bf4@&i/o-decoding-rcd G4be9@G4be1) (set! G4bfb@G4bf6 (make-record-type-descriptor '&i/o-encoding G4bcc@G4bc7 'G4bf9 '#f '#f '#((immutable char)))) (set! G4bfd@G4bf8 '#f) (set! G4bff@G4bf7 (make-record-constructor-descriptor G4bfb@G4bf6 G4bd0@G4bc8 G4bfd@G4bf8)) (set! G4c02@p? (record-predicate G4bfb@G4bf6)) (set! G4c04@make-i/o-encoding-error (record-constructor G4bff@G4bf7)) (set! G4c06@G4bf5 (record-accessor G4bfb@G4bf6 '0)) (set! G4c08@i/o-encoding-error? (condition-predicate G4bfb@G4bf6)) (set! G4c0a@i/o-encoding-error-char (condition-accessor G4bfb@G4bf6 G4c06@G4bf5)) (set! G4c0c@&i/o-encoding-rtd G4bfb@G4bf6) (set! G4c0e@&i/o-encoding-rcd G4bff@G4bf7) (set! G4c14@G4c0f (make-record-type-descriptor '&no-infinities G4aa6@G4aa1 'G4c12 '#f '#f '#())) (set! G4c16@G4c11 '#f) (set! G4c18@G4c10 (make-record-constructor-descriptor G4c14@G4c0f G4aaa@G4aa2 G4c16@G4c11)) (set! G4c1b@p? (record-predicate G4c14@G4c0f)) (set! G4c1d@make-no-infinities-violation (record-constructor G4c18@G4c10)) (set! G4c1f@no-infinities-violation? (condition-predicate G4c14@G4c0f)) (set! G4c21@&no-infinities-rtd G4c14@G4c0f) (set! G4c23@&no-infinities-rcd G4c18@G4c10) (set! G4c29@G4c24 (make-record-type-descriptor '&no-nans G4aa6@G4aa1 'G4c27 '#f '#f '#())) (set! G4c2b@G4c26 '#f) (set! G4c2d@G4c25 (make-record-constructor-descriptor G4c29@G4c24 G4aaa@G4aa2 G4c2b@G4c26)) (set! G4c30@p? (record-predicate G4c29@G4c24)) (set! G4c32@make-no-nans-violation (record-constructor G4c2d@G4c25)) (set! G4c34@no-nans-violation? (condition-predicate G4c29@G4c24)) (set! G4c36@&no-nans-rtd G4c29@G4c24) (set! G4c38@&no-nans-rcd G4c2d@G4c25) (begin (set! G4d29@G4c38@&no-nans-rcd G4c38@&no-nans-rcd) (set! G4d28@G4c36@&no-nans-rtd G4c36@&no-nans-rtd) (set! G4d27@G4c34@no-nans-violation? G4c34@no-nans-violation?) (set! G4d26@G4c32@make-no-nans-violation G4c32@make-no-nans-violation) (set! G4d25@G4c30@p? G4c30@p?) (set! G4d24@G4c2d@G4c25 G4c2d@G4c25) (set! G4d23@G4c2b@G4c26 G4c2b@G4c26) (set! G4d22@G4c29@G4c24 G4c29@G4c24) (set! G4d21@G4c23@&no-infinities-rcd G4c23@&no-infinities-rcd) (set! G4d20@G4c21@&no-infinities-rtd G4c21@&no-infinities-rtd) (set! G4d1f@G4c1f@no-infinities-violation? G4c1f@no-infinities-violation?) (set! G4d1e@G4c1d@make-no-infinities-violation G4c1d@make-no-infinities-violation) (set! G4d1d@G4c1b@p? G4c1b@p?) (set! G4d1c@G4c18@G4c10 G4c18@G4c10) (set! G4d1b@G4c16@G4c11 G4c16@G4c11) (set! G4d1a@G4c14@G4c0f G4c14@G4c0f) (set! G4d19@G4c0e@&i/o-encoding-rcd G4c0e@&i/o-encoding-rcd) (set! G4d18@G4c0c@&i/o-encoding-rtd G4c0c@&i/o-encoding-rtd) (set! G4d17@G4c0a@i/o-encoding-error-char G4c0a@i/o-encoding-error-char) (set! G4d16@G4c08@i/o-encoding-error? G4c08@i/o-encoding-error?) (set! G4d15@G4c06@G4bf5 G4c06@G4bf5) (set! G4d14@G4c04@make-i/o-encoding-error G4c04@make-i/o-encoding-error) (set! G4d13@G4c02@p? G4c02@p?) (set! G4d12@G4bff@G4bf7 G4bff@G4bf7) (set! G4d11@G4bfd@G4bf8 G4bfd@G4bf8) (set! G4d10@G4bfb@G4bf6 G4bfb@G4bf6) (set! G4d0f@G4bf4@&i/o-decoding-rcd G4bf4@&i/o-decoding-rcd) (set! G4d0e@G4bf2@&i/o-decoding-rtd G4bf2@&i/o-decoding-rtd) (set! G4d0d@G4bf0@i/o-decoding-error? G4bf0@i/o-decoding-error?) (set! G4d0c@G4bee@make-i/o-decoding-error G4bee@make-i/o-decoding-error) (set! G4d0b@G4bec@p? G4bec@p?) (set! G4d0a@G4be9@G4be1 G4be9@G4be1) (set! G4d09@G4be7@G4be2 G4be7@G4be2) (set! G4d08@G4be5@G4be0 G4be5@G4be0) (set! G4d07@G4bdf@&i/o-port-rcd G4bdf@&i/o-port-rcd) (set! G4d06@G4bdd@&i/o-port-rtd G4bdd@&i/o-port-rtd) (set! G4d05@G4bdb@i/o-error-port G4bdb@i/o-error-port) (set! G4d04@G4bd9@i/o-port-error? G4bd9@i/o-port-error?) (set! G4d03@G4bd7@G4bc6 G4bd7@G4bc6) (set! G4d02@G4bd5@make-i/o-port-error G4bd5@make-i/o-port-error) (set! G4d01@G4bd3@p? G4bd3@p?) (set! G4d00@G4bd0@G4bc8 G4bd0@G4bc8) (set! G4cff@G4bce@G4bc9 G4bce@G4bc9) (set! G4cfe@G4bcc@G4bc7 G4bcc@G4bc7) (set! G4cfd@G4bc5@&i/o-file-does-not-exist-rcd G4bc5@&i/o-file-does-not-exist-rcd) (set! G4cfc@G4bc3@&i/o-file-does-not-exist-rtd G4bc3@&i/o-file-does-not-exist-rtd) (set! G4cfb@G4bc1@i/o-file-does-not-exist-error? G4bc1@i/o-file-does-not-exist-error?) (set! G4cfa@G4bbf@make-i/o-file-does-not-exist-error G4bbf@make-i/o-file-does-not-exist-error) (set! G4cf9@G4bbd@p? G4bbd@p?) (set! G4cf8@G4bba@G4bb2 G4bba@G4bb2) (set! G4cf7@G4bb8@G4bb3 G4bb8@G4bb3) (set! G4cf6@G4bb6@G4bb1 G4bb6@G4bb1) (set! G4cf5@G4bb0@&i/o-file-already-exists-rcd G4bb0@&i/o-file-already-exists-rcd) (set! G4cf4@G4bae@&i/o-file-already-exists-rtd G4bae@&i/o-file-already-exists-rtd) (set! G4cf3@G4bac@i/o-file-already-exists-error? G4bac@i/o-file-already-exists-error?) (set! G4cf2@G4baa@make-i/o-file-already-exists-error G4baa@make-i/o-file-already-exists-error) (set! G4cf1@G4ba8@p? G4ba8@p?) (set! G4cf0@G4ba5@G4b9d G4ba5@G4b9d) (set! G4cef@G4ba3@G4b9e G4ba3@G4b9e) (set! G4cee@G4ba1@G4b9c G4ba1@G4b9c) (set! G4ced@G4b9b@&i/o-file-is-read-only-rcd G4b9b@&i/o-file-is-read-only-rcd) (set! G4cec@G4b99@&i/o-file-is-read-only-rtd G4b99@&i/o-file-is-read-only-rtd) (set! G4ceb@G4b97@i/o-file-is-read-only-error? G4b97@i/o-file-is-read-only-error?) (set! G4cea@G4b95@make-i/o-file-is-read-only-error G4b95@make-i/o-file-is-read-only-error) (set! G4ce9@G4b93@p? G4b93@p?) (set! G4ce8@G4b90@G4b88 G4b90@G4b88) (set! G4ce7@G4b8e@G4b89 G4b8e@G4b89) (set! G4ce6@G4b8c@G4b87 G4b8c@G4b87) (set! G4ce5@G4b86@&i/o-file-protection-rcd G4b86@&i/o-file-protection-rcd) (set! G4ce4@G4b84@&i/o-file-protection-rtd G4b84@&i/o-file-protection-rtd) (set! G4ce3@G4b82@i/o-file-protection-error? G4b82@i/o-file-protection-error?) (set! G4ce2@G4b80@make-i/o-file-protection-error G4b80@make-i/o-file-protection-error) (set! G4ce1@G4b7e@p? G4b7e@p?) (set! G4ce0@G4b7b@G4b73 G4b7b@G4b73) (set! G4cdf@G4b79@G4b74 G4b79@G4b74) (set! G4cde@G4b77@G4b72 G4b77@G4b72) (set! G4cdd@G4b71@&i/o-filename-rcd G4b71@&i/o-filename-rcd) (set! G4cdc@G4b6f@&i/o-filename-rtd G4b6f@&i/o-filename-rtd) (set! G4cdb@G4b6d@i/o-error-filename G4b6d@i/o-error-filename) (set! G4cda@G4b6b@i/o-filename-error? G4b6b@i/o-filename-error?) (set! G4cd9@G4b69@G4b58 G4b69@G4b58) (set! G4cd8@G4b67@make-i/o-filename-error G4b67@make-i/o-filename-error) (set! G4cd7@G4b65@p? G4b65@p?) (set! G4cd6@G4b62@G4b5a G4b62@G4b5a) (set! G4cd5@G4b60@G4b5b G4b60@G4b5b) (set! G4cd4@G4b5e@G4b59 G4b5e@G4b59) (set! G4cd3@G4b57@&i/o-invalid-position-rcd G4b57@&i/o-invalid-position-rcd) (set! G4cd2@G4b55@&i/o-invalid-position-rtd G4b55@&i/o-invalid-position-rtd) (set! G4cd1@G4b53@i/o-error-position G4b53@i/o-error-position) (set! G4cd0@G4b51@i/o-invalid-position-error? G4b51@i/o-invalid-position-error?) (set! G4ccf@G4b4f@G4b3e G4b4f@G4b3e) (set! G4cce@G4b4d@make-i/o-invalid-position-error G4b4d@make-i/o-invalid-position-error) (set! G4ccd@G4b4b@p? G4b4b@p?) (set! G4ccc@G4b48@G4b40 G4b48@G4b40) (set! G4ccb@G4b46@G4b41 G4b46@G4b41) (set! G4cca@G4b44@G4b3f G4b44@G4b3f) (set! G4cc9@G4b3d@&i/o-write-rcd G4b3d@&i/o-write-rcd) (set! G4cc8@G4b3b@&i/o-write-rtd G4b3b@&i/o-write-rtd) (set! G4cc7@G4b39@i/o-write-error? G4b39@i/o-write-error?) (set! G4cc6@G4b37@make-i/o-write-error G4b37@make-i/o-write-error) (set! G4cc5@G4b35@p? G4b35@p?) (set! G4cc4@G4b32@G4b2a G4b32@G4b2a) (set! G4cc3@G4b30@G4b2b G4b30@G4b2b) (set! G4cc2@G4b2e@G4b29 G4b2e@G4b29) (set! G4cc1@G4b28@&i/o-read-rcd G4b28@&i/o-read-rcd) (set! G4cc0@G4b26@&i/o-read-rtd G4b26@&i/o-read-rtd) (set! G4cbf@G4b24@i/o-read-error? G4b24@i/o-read-error?) (set! G4cbe@G4b22@make-i/o-read-error G4b22@make-i/o-read-error) (set! G4cbd@G4b20@p? G4b20@p?) (set! G4cbc@G4b1d@G4b15 G4b1d@G4b15) (set! G4cbb@G4b1b@G4b16 G4b1b@G4b16) (set! G4cba@G4b19@G4b14 G4b19@G4b14) (set! G4cb9@G4b13@&i/o-rcd G4b13@&i/o-rcd) (set! G4cb8@G4b11@&i/o-rtd G4b11@&i/o-rtd) (set! G4cb7@G4b0f@i/o-error? G4b0f@i/o-error?) (set! G4cb6@G4b0d@make-i/o-error G4b0d@make-i/o-error) (set! G4cb5@G4b0b@p? G4b0b@p?) (set! G4cb4@G4b08@G4b00 G4b08@G4b00) (set! G4cb3@G4b06@G4b01 G4b06@G4b01) (set! G4cb2@G4b04@G4aff G4b04@G4aff) (set! G4cb1@G4afe@&undefined-rcd G4afe@&undefined-rcd) (set! G4cb0@G4afc@&undefined-rtd G4afc@&undefined-rtd) (set! G4caf@G4afa@undefined-violation? G4afa@undefined-violation?) (set! G4cae@G4af8@make-undefined-violation G4af8@make-undefined-violation) (set! G4cad@G4af6@p? G4af6@p?) (set! G4cac@G4af3@G4aeb G4af3@G4aeb) (set! G4cab@G4af1@G4aec G4af1@G4aec) (set! G4caa@G4aef@G4aea G4aef@G4aea) (set! G4ca9@G4ae9@&syntax-rcd G4ae9@&syntax-rcd) (set! G4ca8@G4ae7@&syntax-rtd G4ae7@&syntax-rtd) (set! G4ca7@G4ae5@syntax-violation-subform G4ae5@syntax-violation-subform) (set! G4ca6@G4ae3@syntax-violation-form G4ae3@syntax-violation-form) (set! G4ca5@G4ae1@syntax-violation? G4ae1@syntax-violation?) (set! G4ca4@G4adf@G4acc G4adf@G4acc) (set! G4ca3@G4add@G4acb G4add@G4acb) (set! G4ca2@G4adb@make-syntax-violation G4adb@make-syntax-violation) (set! G4ca1@G4ad9@p? G4ad9@p?) (set! G4ca0@G4ad6@G4ace G4ad6@G4ace) (set! G4c9f@G4ad4@G4acf G4ad4@G4acf) (set! G4c9e@G4ad2@G4acd G4ad2@G4acd) (set! G4c9d@G4aca@&lexical-rcd G4aca@&lexical-rcd) (set! G4c9c@G4ac8@&lexical-rtd G4ac8@&lexical-rtd) (set! G4c9b@G4ac6@lexical-violation? G4ac6@lexical-violation?) (set! G4c9a@G4ac4@make-lexical-violation G4ac4@make-lexical-violation) (set! G4c99@G4ac2@p? G4ac2@p?) (set! G4c98@G4abf@G4ab7 G4abf@G4ab7) (set! G4c97@G4abd@G4ab8 G4abd@G4ab8) (set! G4c96@G4abb@G4ab6 G4abb@G4ab6) (set! G4c95@G4ab5@&implementation-restriction-rcd G4ab5@&implementation-restriction-rcd) (set! G4c94@G4ab3@&implementation-restriction-rtd G4ab3@&implementation-restriction-rtd) (set! G4c93@G4ab1@implementation-restriction-violation? G4ab1@implementation-restriction-violation?) (set! G4c92@G4aaf@make-implementation-restriction-violation G4aaf@make-implementation-restriction-violation) (set! G4c91@G4aad@p? G4aad@p?) (set! G4c90@G4aaa@G4aa2 G4aaa@G4aa2) (set! G4c8f@G4aa8@G4aa3 G4aa8@G4aa3) (set! G4c8e@G4aa6@G4aa1 G4aa6@G4aa1) (set! G4c8d@G4aa0@&non-continuable-rcd G4aa0@&non-continuable-rcd) (set! G4c8c@G4a9e@&non-continuable-rtd G4a9e@&non-continuable-rtd) (set! G4c8b@G4a9c@non-continuable-violation? G4a9c@non-continuable-violation?) (set! G4c8a@G4a9a@make-non-continuable-violation G4a9a@make-non-continuable-violation) (set! G4c89@G4a98@p? G4a98@p?) (set! G4c88@G4a95@G4a8d G4a95@G4a8d) (set! G4c87@G4a93@G4a8e G4a93@G4a8e) (set! G4c86@G4a91@G4a8c G4a91@G4a8c) (set! G4c85@G4a8b@&who-rcd G4a8b@&who-rcd) (set! G4c84@G4a89@&who-rtd G4a89@&who-rtd) (set! G4c83@G4a87@condition-who G4a87@condition-who) (set! G4c82@G4a85@who-condition? G4a85@who-condition?) (set! G4c81@G4a83@G4a72 G4a83@G4a72) (set! G4c80@G4a81@make-who-condition G4a81@make-who-condition) (set! G4c7f@G4a7f@p? G4a7f@p?) (set! G4c7e@G4a7c@G4a74 G4a7c@G4a74) (set! G4c7d@G4a7a@G4a75 G4a7a@G4a75) (set! G4c7c@G4a78@G4a73 G4a78@G4a73) (set! G4c7b@G4a71@&irritants-rcd G4a71@&irritants-rcd) (set! G4c7a@G4a6f@&irritants-rtd G4a6f@&irritants-rtd) (set! G4c79@G4a6d@condition-irritants G4a6d@condition-irritants) (set! G4c78@G4a6b@irritants-condition? G4a6b@irritants-condition?) (set! G4c77@G4a69@G4a58 G4a69@G4a58) (set! G4c76@G4a67@make-irritants-condition G4a67@make-irritants-condition) (set! G4c75@G4a65@p? G4a65@p?) (set! G4c74@G4a62@G4a5a G4a62@G4a5a) (set! G4c73@G4a60@G4a5b G4a60@G4a5b) (set! G4c72@G4a5e@G4a59 G4a5e@G4a59) (set! G4c71@G4a57@&assertion-rcd G4a57@&assertion-rcd) (set! G4c70@G4a55@&assertion-rtd G4a55@&assertion-rtd) (set! G4c6f@G4a53@assertion-violation? G4a53@assertion-violation?) (set! G4c6e@G4a51@make-assertion-violation G4a51@make-assertion-violation) (set! G4c6d@G4a4f@p? G4a4f@p?) (set! G4c6c@G4a4c@G4a44 G4a4c@G4a44) (set! G4c6b@G4a4a@G4a45 G4a4a@G4a45) (set! G4c6a@G4a48@G4a43 G4a48@G4a43) (set! G4c69@G4a42@&violation-rcd G4a42@&violation-rcd) (set! G4c68@G4a40@&violation-rtd G4a40@&violation-rtd) (set! G4c67@G4a3e@violation? G4a3e@violation?) (set! G4c66@G4a3c@make-violation G4a3c@make-violation) (set! G4c65@G4a3a@p? G4a3a@p?) (set! G4c64@G4a37@G4a2f G4a37@G4a2f) (set! G4c63@G4a35@G4a30 G4a35@G4a30) (set! G4c62@G4a33@G4a2e G4a33@G4a2e) (set! G4c61@G4a2d@&error-rcd G4a2d@&error-rcd) (set! G4c60@G4a2b@&error-rtd G4a2b@&error-rtd) (set! G4c5f@G4a29@error? G4a29@error?) (set! G4c5e@G4a27@make-error G4a27@make-error) (set! G4c5d@G4a25@p? G4a25@p?) (set! G4c5c@G4a22@G4a1a G4a22@G4a1a) (set! G4c5b@G4a20@G4a1b G4a20@G4a1b) (set! G4c5a@G4a1e@G4a19 G4a1e@G4a19) (set! G4c59@G4a18@&serious-rcd G4a18@&serious-rcd) (set! G4c58@G4a16@&serious-rtd G4a16@&serious-rtd) (set! G4c57@G4a14@serious-condition? G4a14@serious-condition?) (set! G4c56@G4a12@make-serious-condition G4a12@make-serious-condition) (set! G4c55@G4a10@p? G4a10@p?) (set! G4c54@G4a0d@G4a05 G4a0d@G4a05) (set! G4c53@G4a0b@G4a06 G4a0b@G4a06) (set! G4c52@G4a09@G4a04 G4a09@G4a04) (set! G4c51@G4a03@&warning-rcd G4a03@&warning-rcd) (set! G4c50@G4a01@&warning-rtd G4a01@&warning-rtd) (set! G4c4f@G49ff@warning? G49ff@warning?) (set! G4c4e@G49fd@make-warning G49fd@make-warning) (set! G4c4d@G49fb@p? G49fb@p?) (set! G4c4c@G49f8@G49f0 G49f8@G49f0) (set! G4c4b@G49f6@G49f1 G49f6@G49f1) (set! G4c4a@G49f4@G49ef G49f4@G49ef) (set! G4c49@G49ee@&message-rcd G49ee@&message-rcd) (set! G4c48@G49ec@&message-rtd G49ec@&message-rtd) (set! G4c47@G49ea@condition-message G49ea@condition-message) (set! G4c46@G49e8@message-condition? G49e8@message-condition?) (set! G4c45@G49e6@G49d5 G49e6@G49d5) (set! G4c44@G49e4@make-message-condition G49e4@make-message-condition) (set! G4c43@G49e2@p? G49e2@p?) (set! G4c42@G49df@G49d7 G49df@G49d7) (set! G4c41@G49dd@G49d8 G49dd@G49d8) (set! G4c40@G49db@G49d6 G49db@G49d6) (set! G4c3f@G4991@&condition-rcd G4991@&condition-rcd) (set! G4c3e@G498f@&condition-rtd G498f@&condition-rtd) (set! G4c3d@G498d@make-&condition G498d@make-&condition) (set! G4c3c@G498b@&condition? G498b@&condition?) (set! G4c3b@G4988@G4980 G4988@G4980) (set! G4c3a@G4986@G4981 G4986@G4981) (set! G4c39@G4984@G497f G4984@G497f)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G2959@G290e@current-primitive-locations (lambda (G50d0@x) ((lambda (G50d2@t) (if G50d2@t (cdr G50d2@t) '#f)) (assq G50d0@x '((&no-nans-rcd . G4d29@G4c38@&no-nans-rcd) (&no-nans-rtd . G4d28@G4c36@&no-nans-rtd) (&no-infinities-rcd . G4d21@G4c23@&no-infinities-rcd) (&no-infinities-rtd . G4d20@G4c21@&no-infinities-rtd) (&i/o-encoding-rcd . G4d19@G4c0e@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4d18@G4c0c@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4d0f@G4bf4@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4d0e@G4bf2@&i/o-decoding-rtd) (&i/o-port-rcd . G4d07@G4bdf@&i/o-port-rcd) (&i/o-port-rtd . G4d06@G4bdd@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4cfd@G4bc5@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4cfc@G4bc3@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4cf5@G4bb0@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4cf4@G4bae@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4ced@G4b9b@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4cec@G4b99@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4ce5@G4b86@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4ce4@G4b84@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4cdd@G4b71@&i/o-filename-rcd) (&i/o-filename-rtd . G4cdc@G4b6f@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4cd3@G4b57@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4cd2@G4b55@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4cc9@G4b3d@&i/o-write-rcd) (&i/o-write-rtd . G4cc8@G4b3b@&i/o-write-rtd) (&i/o-read-rcd . G4cc1@G4b28@&i/o-read-rcd) (&i/o-read-rtd . G4cc0@G4b26@&i/o-read-rtd) (&i/o-rcd . G4cb9@G4b13@&i/o-rcd) (&i/o-rtd . G4cb8@G4b11@&i/o-rtd) (&undefined-rcd . G4cb1@G4afe@&undefined-rcd) (&undefined-rtd . G4cb0@G4afc@&undefined-rtd) (&syntax-rcd . G4ca9@G4ae9@&syntax-rcd) (&syntax-rtd . G4ca8@G4ae7@&syntax-rtd) (&lexical-rcd . G4c9d@G4aca@&lexical-rcd) (&lexical-rtd . G4c9c@G4ac8@&lexical-rtd) (&implementation-restriction-rcd . G4c95@G4ab5@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4c94@G4ab3@&implementation-restriction-rtd) (&non-continuable-rcd . G4c8d@G4aa0@&non-continuable-rcd) (&non-continuable-rtd . G4c8c@G4a9e@&non-continuable-rtd) (&who-rcd . G4c85@G4a8b@&who-rcd) (&who-rtd . G4c84@G4a89@&who-rtd) (&irritants-rcd . G4c7b@G4a71@&irritants-rcd) (&irritants-rtd . G4c7a@G4a6f@&irritants-rtd) (&assertion-rcd . G4c71@G4a57@&assertion-rcd) (&assertion-rtd . G4c70@G4a55@&assertion-rtd) (&violation-rcd . G4c69@G4a42@&violation-rcd) (&violation-rtd . G4c68@G4a40@&violation-rtd) (&error-rcd . G4c61@G4a2d@&error-rcd) (&error-rtd . G4c60@G4a2b@&error-rtd) (&serious-rcd . G4c59@G4a18@&serious-rcd) (&serious-rtd . G4c58@G4a16@&serious-rtd) (&warning-rcd . G4c51@G4a03@&warning-rcd) (&warning-rtd . G4c50@G4a01@&warning-rtd) (&message-rcd . G4c49@G49ee@&message-rcd) (&message-rtd . G4c48@G49ec@&message-rtd) (&condition-rcd . G4c3f@G4991@&condition-rcd) (&condition-rtd . G4c3e@G498f@&condition-rtd) (syntax-error . G4970@G3052@syntax-error) (syntax-dispatch . G4904@G2f6b@syntax-dispatch) (load . G4dcc@G4d39@load) (interaction-environment . G4979@G3064@interaction-environment) (make-parameter . G2908@G283e@make-parameter) (make-variable-transformer . G48c2@G2da6@make-variable-transformer) (identifier? . G4974@G305a@identifier?) (generate-temporaries . G4969@G3044@generate-temporaries) (free-identifier=? . G496a@G3046@free-identifier=?) (syntax->datum . G4976@G305e@syntax->datum) (datum->syntax . G4975@G305c@datum->syntax) (bound-identifier=? . G496b@G3048@bound-identifier=?) (make-i/o-write-error . G4cc6@G4b37@make-i/o-write-error) (make-i/o-read-error . G4cbe@G4b22@make-i/o-read-error) (make-i/o-port-error . G4d02@G4bd5@make-i/o-port-error) (make-i/o-invalid-position-error . G4cce@G4b4d@make-i/o-invalid-position-error) (make-i/o-filename-error . G4cd8@G4b67@make-i/o-filename-error) (make-i/o-file-protection-error . G4ce2@G4b80@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4cea@G4b95@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4cfa@G4bbf@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4cf2@G4baa@make-i/o-file-already-exists-error) (make-i/o-error . G4cb6@G4b0d@make-i/o-error) (make-i/o-encoding-error . G4d14@G4c04@make-i/o-encoding-error) (make-i/o-decoding-error . G4d0c@G4bee@make-i/o-decoding-error) (i/o-write-error? . G4cc7@G4b39@i/o-write-error?) (i/o-read-error? . G4cbf@G4b24@i/o-read-error?) (i/o-port-error? . G4d04@G4bd9@i/o-port-error?) (i/o-invalid-position-error? . G4cd0@G4b51@i/o-invalid-position-error?) (i/o-filename-error? . G4cda@G4b6b@i/o-filename-error?) (i/o-file-protection-error? . G4ce3@G4b82@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4ceb@G4b97@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4cfb@G4bc1@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4cf3@G4bac@i/o-file-already-exists-error?) (i/o-error? . G4cb7@G4b0f@i/o-error?) (i/o-error-port . G4d05@G4bdb@i/o-error-port) (i/o-error-filename . G4cdb@G4b6d@i/o-error-filename) (i/o-encoding-error? . G4d16@G4c08@i/o-encoding-error?) (i/o-encoding-error-char . G4d17@G4c0a@i/o-encoding-error-char) (i/o-decoding-error? . G4d0d@G4bf0@i/o-decoding-error?) (scheme-report-environment . G4960@G3032@scheme-report-environment) (null-environment . G495f@G3030@null-environment) (command-line . G4dc9@G4d33@command-line) (eval . G4962@G3036@eval) (environment . G495e@G302e@environment) (who-condition? . G4c82@G4a85@who-condition?) (warning? . G4c4f@G49ff@warning?) (violation? . G4c67@G4a3e@violation?) (undefined-violation? . G4caf@G4afa@undefined-violation?) (syntax-violation? . G4ca5@G4ae1@syntax-violation?) (syntax-violation-subform . G4ca7@G4ae5@syntax-violation-subform) (syntax-violation-form . G4ca6@G4ae3@syntax-violation-form) (syntax-violation . G4973@G3058@syntax-violation) (serious-condition? . G4c57@G4a14@serious-condition?) (non-continuable-violation? . G4c8b@G4a9c@non-continuable-violation?) (message-condition? . G4c46@G49e8@message-condition?) (make-who-condition . G4c80@G4a81@make-who-condition) (make-warning . G4c4e@G49fd@make-warning) (make-violation . G4c66@G4a3c@make-violation) (make-undefined-violation . G4cae@G4af8@make-undefined-violation) (make-syntax-violation . G4ca2@G4adb@make-syntax-violation) (make-serious-condition . G4c56@G4a12@make-serious-condition) (make-non-continuable-violation . G4c8a@G4a9a@make-non-continuable-violation) (make-message-condition . G4c44@G49e4@make-message-condition) (make-lexical-violation . G4c9a@G4ac4@make-lexical-violation) (make-irritants-condition . G4c76@G4a67@make-irritants-condition) (make-implementation-restriction-violation . G4c92@G4aaf@make-implementation-restriction-violation) (make-error . G4c5e@G4a27@make-error) (make-assertion-violation . G4c6e@G4a51@make-assertion-violation) (lexical-violation? . G4c9b@G4ac6@lexical-violation?) (irritants-condition? . G4c78@G4a6b@irritants-condition?) (implementation-restriction-violation? . G4c93@G4ab1@implementation-restriction-violation?) (error? . G4c5f@G4a29@error?) (condition-who . G4c83@G4a87@condition-who) (condition-message . G4c47@G49ea@condition-message) (condition-irritants . G4c79@G4a6d@condition-irritants) (assertion-violation? . G4c6f@G4a53@assertion-violation?) (no-nans-violation? . G4d27@G4c34@no-nans-violation?) (no-infinities-violation? . G4d1f@G4c1f@no-infinities-violation?) (make-no-nans-violation . G4d26@G4c32@make-no-nans-violation) (make-no-infinities-violation . G4d1e@G4c1d@make-no-infinities-violation)))))) (G2b81@G2a26@install-library 'G50a3 '(mosh interaction) '() '() '() '() '((string-upcase . G5054) (string-titlecase . G5053) (string-normalize-nfkd . G5052) (string-normalize-nfkc . G5051) (string-normalize-nfd . G5050) (string-normalize-nfc . G504f) (string-foldcase . G504e) (string-downcase . G504d) (string-ci>? . G504c) (string-ci>=? . G504b) (string-ci=? . G504a) (string-ci<? . G5049) (string-ci<=? . G5048) (char-whitespace? . G5047) (char-upper-case? . G5046) (char-title-case? . G5045) (char-numeric? . G5044) (char-lower-case? . G5043) (char-general-category . G5042) (char-upcase . G5041) (char-titlecase . G5040) (char-foldcase . G503f) (char-downcase . G503e) (char-ci>? . G503d) (char-ci>=? . G503c) (char-ci=? . G503b) (char-ci<? . G503a) (char-ci<=? . G5039) (char-alphabetic? . G5038) (make-variable-transformer . G2da5) (identifier? . G3059) (generate-temporaries . G3043) (free-identifier=? . G3045) (syntax->datum . G305d) (datum->syntax . G305b) (bound-identifier=? . G3047) (record-type-descriptor? . G5037) (record-predicate . G5036) (record-mutator . G5035) (record-constructor . G5034) (record-accessor . G5033) (make-record-type-descriptor . G5032) (make-record-constructor-descriptor . G5031) (record? . G5030) (record-type-uid . G502f) (record-type-sealed? . G502e) (record-type-parent . G502d) (record-type-opaque? . G502c) (record-type-name . G502b) (record-type-generative? . G502a) (record-type-field-names . G5029) (record-rtd . G5028) (record-field-mutable? . G5027) (delete-file . G5026) (file-exists? . G5025) (vector-sort! . G5024) (vector-sort . G5023) (list-sort . G5022) (symbol-hash . G5021) (string-ci-hash . G5020) (string-hash . G501f) (equal-hash . G501e) (hashtable-equivalence-function . G501d) (make-hashtable . G501c) (hashtable-hash-function . G501b) (make-eqv-hashtable . G501a) (make-eq-hashtable . G5019) (hashtable? . G5018) (hashtable-update! . G5017) (hashtable-size . G5016) (hashtable-set! . G5015) (hashtable-ref . G5014) (hashtable-mutable? . G5013) (hashtable-keys . G5012) (hashtable-entries . G5011) (hashtable-delete! . G5010) (hashtable-copy . G500f) (hashtable-contains? . G500e) (hashtable-clear! . G500d) (call-with-output-file . G500c) (call-with-input-file . G500b) (write-char . G500a) (write . G5009) (with-output-to-file . G5008) (with-input-from-file . G5007) (read-char . G5006) (read . G5005) (peek-char . G5004) (open-output-file . G5003) (open-input-file . G5002) (newline . G5001) (display . G5000) (close-output-port . G4fff) (close-input-port . G4ffe) (eof-object? . G4ffd) (eof-object . G4ffc) (current-error-port . G4ffb) (current-output-port . G4ffa) (current-input-port . G4ff9) (output-port? . G4ff8) (input-port? . G4ff7) (utf-8-codec . G4ff6) (utf-16-codec . G4ff5) (transcoder-error-handling-mode . G4ff4) (transcoder-eol-style . G4ff3) (transcoder-codec . G4ff2) (transcoded-port . G4ff1) (textual-port? . G4ff0) (string->bytevector . G4fef) (standard-output-port . G4fee) (standard-input-port . G4fed) (standard-error-port . G4fec) (set-port-position! . G4feb) (put-u8 . G4fea) (put-string . G4fe9) (put-datum . G4fe8) (put-char . G4fe7) (put-bytevector . G4fe6) (port? . G4fe5) (port-transcoder . G4fe4) (port-position . G4fe3) (port-has-set-port-position!? . G4fe2) (port-has-port-position? . G4fe1) (port-eof? . G4fe0) (output-port-buffer-mode . G4fdf) (open-string-output-port . G4fde) (open-string-input-port . G4fdd) (open-file-output-port . G4fdc) (open-file-input/output-port . G4fdb) (open-file-input-port . G4fda) (open-bytevector-output-port . G4fd9) (open-bytevector-input-port . G4fd8) (native-transcoder . G4fd7) (native-eol-style . G4fd6) (make-transcoder . G4fd5) (latin-1-codec . G4fd4) (make-i/o-write-error . G4b36) (make-i/o-read-error . G4b21) (make-i/o-port-error . G4bd4) (make-i/o-invalid-position-error . G4b4c) (make-i/o-filename-error . G4b66) (make-i/o-file-protection-error . G4b7f) (make-i/o-file-is-read-only-error . G4b94) (make-i/o-file-does-not-exist-error . G4bbe) (make-i/o-file-already-exists-error . G4ba9) (make-i/o-error . G4b0c) (make-i/o-encoding-error . G4c03) (make-i/o-decoding-error . G4bed) (make-custom-textual-output-port . G4fd3) (make-custom-textual-input/output-port . G4fd2) (make-custom-textual-input-port . G4fd1) (make-custom-binary-output-port . G4fd0) (make-custom-binary-input/output-port . G4fcf) (make-custom-binary-input-port . G4fce) (make-bytevector . G4fcd) (lookahead-u8 . G4fcc) (lookahead-char . G4fcb) (i/o-write-error? . G4b38) (i/o-read-error? . G4b23) (i/o-port-error? . G4bd8) (i/o-invalid-position-error? . G4b50) (i/o-filename-error? . G4b6a) (i/o-file-protection-error? . G4b81) (i/o-file-is-read-only-error? . G4b96) (i/o-file-does-not-exist-error? . G4bc0) (i/o-file-already-exists-error? . G4bab) (i/o-error? . G4b0e) (i/o-error-port . G4bda) (i/o-error-filename . G4b6c) (i/o-encoding-error? . G4c07) (i/o-encoding-error-char . G4c09) (i/o-decoding-error? . G4bef) (get-u8 . G4fca) (get-string-n! . G4fc9) (get-string-n . G4fc8) (get-string-all . G4fc7) (get-line . G4fc6) (get-datum . G4fc5) (get-char . G4fc4) (get-bytevector-some . G4fc3) (get-bytevector-n! . G4fc2) (get-bytevector-n . G4fc1) (get-bytevector-all . G4fc0) (flush-output-port . G4fbf) (close-port . G4fbe) (exit . G4fb6) (command-line . G4d32) (string-fill! . G4fb5) (string-set! . G4fb4) (set-cdr! . G4fb3) (set-car! . G4fb2) (remove . G4fb1) (remv . G4fb0) (remp . G4faf) (remq . G4fae) (partition . G4fad) (memv . G4fac) (memq . G4fab) (memp . G4faa) (member . G4fa9) (exists . G4fa8) (for-all . G4fa7) (fold-right . G4fa6) (fold-left . G4fa5) (find . G4fa4) (filter . G4fa3) (cons* . G4fa2) (assv . G4fa1) (assq . G4fa0) (assp . G4f9f) (assoc . G4f9e) (call-with-string-output-port . G4f9d) (call-with-port . G4f9c) (call-with-bytevector-output-port . G4f9b) (bytevector->string . G4f9a) (buffer-mode? . G4f99) (binary-port? . G4f98) (with-exception-handler . G4f97) (raise-continuable . G4f96) (raise . G4f95) (eval . G3035) (environment . G302d) (make-enumeration . G4f94) (enum-set=? . G4f93) (enum-set-universe . G4f92) (enum-set-union . G4f91) (enum-set-subset? . G4f90) (enum-set-projection . G4f8f) (enum-set-member? . G4f8e) (enum-set-intersection . G4f8d) (enum-set-indexer . G4f8c) (enum-set-difference . G4f8b) (enum-set-constructor . G4f8a) (enum-set-complement . G4f89) (enum-set->list . G4f88) (who-condition? . G4a84) (warning? . G49fe) (violation? . G4a3d) (undefined-violation? . G4af9) (syntax-violation? . G4ae0) (syntax-violation-subform . G4ae4) (syntax-violation-form . G4ae2) (syntax-violation . G3057) (simple-conditions . G4f87) (serious-condition? . G4a13) (non-continuable-violation? . G4a9b) (message-condition? . G49e7) (make-who-condition . G4a80) (make-warning . G49fc) (make-violation . G4a3b) (make-undefined-violation . G4af7) (make-syntax-violation . G4ada) (make-serious-condition . G4a11) (make-non-continuable-violation . G4a99) (make-message-condition . G49e3) (make-lexical-violation . G4ac3) (make-irritants-condition . G4a66) (make-implementation-restriction-violation . G4aae) (make-error . G4a26) (make-assertion-violation . G4a50) (lexical-violation? . G4ac5) (irritants-condition? . G4a6a) (implementation-restriction-violation? . G4ab0) (error? . G4a28) (condition-who . G4a86) (condition-predicate . G4f86) (condition-message . G49e9) (condition-irritants . G4a6c) (condition-accessor . G4f85) (condition . G4f84) (assertion-violation? . G4a52) (condition? . G4f83) (utf32->string . G4f82) (utf16->string . G4f81) (utf8->string . G4f80) (uint-list->bytevector . G4f7f) (u8-list->bytevector . G4f7e) (string->utf8 . G4f7d) (string->utf32 . G4f7c) (string->utf16 . G4f7b) (sint-list->bytevector . G4f7a) (native-endianness . G4f79) (bytevector? . G4f78) (bytevector=? . G4f77) (bytevector-uint-set! . G4f76) (bytevector-uint-ref . G4f75) (bytevector-u8-set! . G4f74) (bytevector-u8-ref . G4f73) (bytevector-u64-set! . G4f72) (bytevector-u64-ref . G4f71) (bytevector-u64-native-set! . G4f70) (bytevector-u64-native-ref . G4f6f) (bytevector-u32-set! . G4f6e) (bytevector-u32-ref . G4f6d) (bytevector-u32-native-set! . G4f6c) (bytevector-u32-native-ref . G4f6b) (bytevector-u16-set! . G4f6a) (bytevector-u16-ref . G4f69) (bytevector-u16-native-set! . G4f68) (bytevector-u16-native-ref . G4f67) (bytevector-sint-set! . G4f66) (bytevector-sint-ref . G4f65) (bytevector-s8-set! . G4f64) (bytevector-s8-ref . G4f63) (bytevector-s64-set! . G4f62) (bytevector-s64-ref . G4f61) (bytevector-s64-native-set! . G4f60) (bytevector-s64-native-ref . G4f5f) (bytevector-s32-set! . G4f5e) (bytevector-s32-ref . G4f5d) (bytevector-s32-native-set! . G4f5c) (bytevector-s32-native-ref . G4f5b) (bytevector-s16-set! . G4f5a) (bytevector-s16-ref . G4f59) (bytevector-s16-native-set! . G4f58) (bytevector-s16-native-ref . G4f57) (bytevector-length . G4f56) (bytevector-ieee-single-ref . G4f55) (bytevector-ieee-single-set! . G4f54) (bytevector-ieee-single-native-set! . G4f53) (bytevector-ieee-single-native-ref . G4f52) (bytevector-ieee-double-set! . G4f51) (bytevector-ieee-double-ref . G4f50) (bytevector-ieee-double-native-set! . G4f4f) (bytevector-ieee-double-native-ref . G4f4e) (bytevector-fill! . G4f4d) (bytevector-copy! . G4f4c) (bytevector-copy . G4f4b) (bytevector->uint-list . G4f4a) (bytevector->u8-list . G4f49) (bytevector->sint-list . G4f48) (no-nans-violation? . G4c33) (no-infinities-violation? . G4c1e) (make-no-nans-violation . G4c31) (make-no-infinities-violation . G4c1c) (real->flonum . G4f47) (flzero? . G4f46) (fltruncate . G4f45) (fltan . G4f44) (flsqrt . G4f43) (flsin . G4f42) (flround . G4f41) (flpositive? . G4f40) (flonum? . G4f3f) (flodd? . G4f3e) (flnumerator . G4f3d) (flnegative? . G4f3c) (flnan? . G4f3b) (flmod0 . G4f3a) (flmod . G4f39) (flmin . G4f38) (flmax . G4f37) (fllog . G4f36) (flinteger? . G4f35) (flinfinite? . G4f34) (flfloor . G4f33) (flfinite? . G4f32) (flexpt . G4f31) (flexp . G4f30) (fleven? . G4f2f) (fldiv0-and-mod0 . G4f2e) (fldiv0 . G4f2d) (fldiv-and-mod . G4f2c) (fldiv . G4f2b) (fldenominator . G4f2a) (flcos . G4f29) (flceiling . G4f28) (flatan . G4f27) (flasin . G4f26) (flacos . G4f25) (flabs . G4f24) (fl>? . G4f23) (fl>=? . G4f22) (fl=? . G4f21) (fl<? . G4f20) (fl<=? . G4f1f) (fl/ . G4f1e) (fl- . G4f1d) (fl+ . G4f1c) (fl* . G4f1b) (fixnum->flonum . G4f1a) (fxzero? . G4f19) (fxxor . G4f18) (fxrotate-bit-field . G4f17) (fxreverse-bit-field . G4f16) (fxpositive? . G4f15) (fxodd? . G4f14) (fxnot . G4f13) (fxnegative? . G4f12) (fxmod0 . G4f11) (fxmod . G4f10) (fxmin . G4f0f) (fxmax . G4f0e) (fxlength . G4f0d) (fxior . G4f0c) (fxif . G4f0b) (fxfirst-bit-set . G4f0a) (fxeven? . G4f09) (fxdiv0-and-mod0 . G4f08) (fxdiv0 . G4f07) (fxdiv-and-mod . G4f06) (fxdiv . G4f05) (fxcopy-bit-field . G4f04) (fxcopy-bit . G4f03) (fxbit-set? . G4f02) (fxbit-field . G4f01) (fxbit-count . G4f00) (fxarithmetic-shift-right . G4eff) (fxarithmetic-shift-left . G4efe) (fxarithmetic-shift . G4efd) (fxand . G4efc) (fx>? . G4efb) (fx>=? . G4efa) (fx=? . G4ef9) (fx<? . G4ef8) (fx<=? . G4ef7) (fx-/carry . G4ef6) (fx- . G4ef5) (fx+/carry . G4ef4) (fx+ . G4ef3) (fx*/carry . G4ef2) (fx* . G4ef1) (greatest-fixnum . G4ef0) (least-fixnum . G4eef) (fixnum-width . G4eee) (fixnum? . G4eed) (bitwise-rotate-bit-field . G4eec) (bitwise-reverse-bit-field . G4eeb) (bitwise-length . G4eea) (bitwise-if . G4ee9) (bitwise-first-bit-set . G4ee8) (bitwise-copy-bit-field . G4ee7) (bitwise-copy-bit . G4ee6) (bitwise-bit-set? . G4ee5) (bitwise-bit-field . G4ee4) (bitwise-bit-count . G4ee3) (bitwise-xor . G4ee2) (bitwise-ior . G4ee1) (bitwise-and . G4ee0) (bitwise-not . G4edf) (bitwise-arithmetic-shift-right . G4ede) (bitwise-arithmetic-shift-left . G4edd) (bitwise-arithmetic-shift . G4edc) (zero? . G4edb) (vector? . G4eda) (vector-set! . G4ed9) (vector-ref . G4ed8) (vector-map . G4ed7) (vector-length . G4ed6) (vector-for-each . G4ed5) (vector-fill! . G4ed4) (vector->list . G4ed3) (vector . G4ed2) (values . G4ed1) (truncate . G4ed0) (tan . G4ecf) (symbol? . G4ece) (symbol=? . G4ecd) (symbol->string . G4ecc) (substring . G4ecb) (string? . G4eca) (string>? . G4ec9) (string>=? . G4ec8) (string=? . G4ec7) (string<? . G4ec6) (string<=? . G4ec5) (string-ref . G4ec4) (string-length . G4ec3) (string-for-each . G4ec2) (string-copy . G4ec1) (string-append . G4ec0) (string->symbol . G4ebf) (string->number . G4ebe) (string->list . G4ebd) (string . G4ebc) (sqrt . G4ebb) (sin . G4eba) (round . G4eb9) (reverse . G4eb8) (real? . G4eb7) (real-valued? . G4eb6) (real-part . G4eb5) (rationalize . G4eb4) (rational? . G4eb3) (rational-valued? . G4eb2) (procedure? . G4eb1) (positive? . G4eb0) (pair? . G4eaf) (odd? . G4eae) (numerator . G4ead) (number? . G4eac) (number->string . G4eab) (null? . G4eaa) (not . G4ea9) (negative? . G4ea8) (nan? . G4ea7) (min . G4ea6) (max . G4ea5) (map . G4ea4) (make-vector . G4ea3) (make-string . G4ea2) (make-rectangular . G4ea1) (make-polar . G4ea0) (magnitude . G4e9f) (log . G4e9e) (list? . G4e9d) (list-tail . G4e9c) (list-ref . G4e9b) (list->vector . G4e9a) (list->string . G4e99) (list . G4e98) (length . G4e97) (lcm . G4e96) (integer? . G4e95) (integer-valued? . G4e94) (integer->char . G4e93) (infinite? . G4e92) (inexact? . G4e91) (inexact . G4e90) (imag-part . G4e8f) (gcd . G4e8e) (for-each . G4e8d) (floor . G4e8c) (finite? . G4e8b) (expt . G4e8a) (exp . G4e89) (exact? . G4e88) (exact-integer-sqrt . G4e87) (exact . G4e86) (even? . G4e85) (error . G4e84) (eqv? . G4e83) (equal? . G4e82) (eq? . G4e81) (dynamic-wind . G4e80) (div0-and-mod0 . G4e7f) (mod0 . G4e7e) (div0 . G4e7d) (div-and-mod . G4e7c) (mod . G4e7b) (div . G4e7a) (denominator . G4e79) (cos . G4e78) (cons . G4e77) (complex? . G4e76) (char? . G4e75) (char>? . G4e74) (char>=? . G4e73) (char=? . G4e72) (char<? . G4e71) (char<=? . G4e70) (char->integer . G4e6f) (ceiling . G4e6e) (call-with-values . G4e6d) (call/cc . G4e6c) (call-with-current-continuation . G4e6b) (cddddr . G4e6a) (cdddar . G4e69) (cddadr . G4e68) (cddaar . G4e67) (cdaddr . G4e66) (cdadar . G4e65) (cdaadr . G4e64) (cdaaar . G4e63) (cadddr . G4e62) (caddar . G4e61) (cadadr . G4e60) (cadaar . G4e5f) (caaddr . G4e5e) (caadar . G4e5d) (caaadr . G4e5c) (caaaar . G4e5b) (cdddr . G4e5a) (cddar . G4e59) (cdadr . G4e58) (cdaar . G4e57) (caddr . G4e56) (cadar . G4e55) (caadr . G4e54) (caaar . G4e53) (cddr . G4e52) (cdar . G4e51) (cadr . G4e50) (caar . G4e4f) (cdr . G4e4e) (car . G4e4d) (boolean? . G4e4c) (boolean=? . G4e4b) (atan . G4e4a) (assertion-violation . G4e49) (asin . G4e48) (apply . G4e47) (append . G4e46) (angle . G4e45) (acos . G4e44) (abs . G4e43) (/ . G4e42) (* . G4e41) (- . G4e40) (+ . G4e3f) (>= . G4e3e) (> . G4e3d) (= . G4e3c) (<= . G4e3b) (< . G4e3a) (library . G4e39) (export . G4e38) (&no-nans . G4e37) (&no-infinities . G4e36) (&i/o-encoding . G4e35) (&i/o-decoding . G4e34) (&i/o-port . G4e33) (&i/o-file-does-not-exist . G4e32) (&i/o-file-already-exists . G4e31) (&i/o-file-is-read-only . G4e30) (&i/o-file-protection . G4e2f) (&i/o-filename . G4e2e) (&i/o-invalid-position . G4e2d) (&i/o-write . G4e2c) (&i/o-read . G4e2b) (&i/o . G4e2a) (&undefined . G4e29) (&syntax . G4e28) (&lexical . G4e27) (&implementation-restriction . G4e26) (&non-continuable . G4e25) (&who . G4e24) (&irritants . G4e23) (&assertion . G4e22) (&violation . G4e21) (&error . G4e20) (&serious . G4e1f) (&warning . G4e1e) (&message . G4e1d) (&condition . G4e1c) (define-condition-type . G4e1b) (define-enumeration . G4e1a) (define-record-type . G4e19) (parent-rtd . G4e18) (nongenerative . G4e17) (opaque . G4e16) (sealed . G4e15) (protocol . G4e14) (parent . G4e13) (immutable . G4e12) (mutable . G4e11) (fields . G4e10) (error-handling-mode . G4e0f) (file-options . G4e0e) (buffer-mode . G4e0d) (eol-style . G4e0c) (guard . G4e0b) (unsyntax-splicing . G4e08) (unsyntax . G4e07) (unquote-splicing . G4e06) (unquote . G4e05) (_ . G4e04) (else . G4e03) (=> . G4e02) (... . G4e01) (assert . G4e00) (endianness . G4dff) (do . G4dfc) (cond . G4dfb) (let* . G4dfa) (let . G4df9) (let*-values . G4df8) (let-values . G4df7) (identifier-syntax . G4df6) (with-syntax . G4df5) (quasisyntax . G4df4) (quasiquote . G4df3) (syntax-rules . G4df2) (include . G4df1) (record-constructor-descriptor . G4def) (record-type-descriptor . G4dee) (case . G4ded) (unless . G4deb) (when . G4dea) (or . G4de9) (and . G4de8) (if . G4de7) (letrec* . G4de6) (letrec . G4de5) (case-lambda . G4de3) (lambda . G4de2) (syntax . G4de1) (syntax-case . G4de0) (quote . G4ddf) (letrec-syntax . G4ddd) (let-syntax . G4ddc) (set! . G4ddb) (import . G4dda) (begin . G4dd9) (define-syntax . G4dd7) (define . G4dd6)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50a4 '(psyntax null-environment-5) '() '() '() '() '((make-promise . G4fb7) (unquote-splicing . G4e06) (unquote . G4e05) (delay . G4dfe) (do . G4dfc) (cond . G4dfb) (let* . G4dfa) (let . G4df9) (quasiquote . G4df3) (syntax-rules . G4df2) (case . G4ded) (or . G4de9) (and . G4de8) (if . G4de7) (letrec . G4de5) (lambda . G4de2) (quote . G4ddf) (letrec-syntax . G4ddd) (let-syntax . G4ddc) (set! . G4ddb) (begin . G4dd9) (define-syntax . G4dd7) (define . G4dd6)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50a5 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G504c) (string-ci>=? . G504b) (string-ci=? . G504a) (string-ci<? . G5049) (string-ci<=? . G5048) (char-whitespace? . G5047) (char-upper-case? . G5046) (char-numeric? . G5044) (char-lower-case? . G5043) (char-upcase . G5041) (char-downcase . G503e) (char-ci>? . G503d) (char-ci>=? . G503c) (char-ci=? . G503b) (char-ci<? . G503a) (char-ci<=? . G5039) (char-alphabetic? . G5038) (call-with-output-file . G500c) (call-with-input-file . G500b) (write-char . G500a) (write . G5009) (with-output-to-file . G5008) (with-input-from-file . G5007) (read-char . G5006) (read . G5005) (peek-char . G5004) (open-output-file . G5003) (open-input-file . G5002) (newline . G5001) (display . G5000) (close-output-port . G4fff) (close-input-port . G4ffe) (eof-object . G4ffc) (current-output-port . G4ffa) (current-input-port . G4ff9) (output-port? . G4ff8) (input-port? . G4ff7) (scheme-report-environment . G3031) (quotient . G4fbd) (null-environment . G302f) (remainder . G4fbc) (modulo . G4fbb) (inexact->exact . G4fba) (force . G4fb9) (exact->inexact . G4fb8) (make-promise . G4fb7) (string-fill! . G4fb5) (string-set! . G4fb4) (set-cdr! . G4fb3) (set-car! . G4fb2) (memv . G4fac) (memq . G4fab) (member . G4fa9) (assv . G4fa1) (assq . G4fa0) (assoc . G4f9e) (eval . G3035) (zero? . G4edb) (vector? . G4eda) (vector-set! . G4ed9) (vector-ref . G4ed8) (vector-length . G4ed6) (vector-fill! . G4ed4) (vector->list . G4ed3) (vector . G4ed2) (values . G4ed1) (truncate . G4ed0) (tan . G4ecf) (symbol? . G4ece) (symbol->string . G4ecc) (substring . G4ecb) (string? . G4eca) (string>? . G4ec9) (string>=? . G4ec8) (string=? . G4ec7) (string<? . G4ec6) (string<=? . G4ec5) (string-ref . G4ec4) (string-length . G4ec3) (string-copy . G4ec1) (string-append . G4ec0) (string->symbol . G4ebf) (string->number . G4ebe) (string->list . G4ebd) (string . G4ebc) (sqrt . G4ebb) (sin . G4eba) (round . G4eb9) (reverse . G4eb8) (real? . G4eb7) (real-part . G4eb5) (rationalize . G4eb4) (rational? . G4eb3) (procedure? . G4eb1) (positive? . G4eb0) (pair? . G4eaf) (odd? . G4eae) (numerator . G4ead) (number? . G4eac) (number->string . G4eab) (not . G4ea9) (negative? . G4ea8) (min . G4ea6) (max . G4ea5) (map . G4ea4) (make-vector . G4ea3) (make-string . G4ea2) (make-rectangular . G4ea1) (make-polar . G4ea0) (magnitude . G4e9f) (log . G4e9e) (list? . G4e9d) (list-tail . G4e9c) (list-ref . G4e9b) (list->vector . G4e9a) (list->string . G4e99) (list . G4e98) (length . G4e97) (lcm . G4e96) (integer? . G4e95) (integer->char . G4e93) (inexact? . G4e91) (imag-part . G4e8f) (gcd . G4e8e) (for-each . G4e8d) (floor . G4e8c) (expt . G4e8a) (exp . G4e89) (exact? . G4e88) (even? . G4e85) (eqv? . G4e83) (equal? . G4e82) (eq? . G4e81) (dynamic-wind . G4e80) (denominator . G4e79) (cos . G4e78) (cons . G4e77) (complex? . G4e76) (char? . G4e75) (char>? . G4e74) (char>=? . G4e73) (char=? . G4e72) (char<? . G4e71) (char<=? . G4e70) (char->integer . G4e6f) (ceiling . G4e6e) (call-with-values . G4e6d) (call-with-current-continuation . G4e6b) (cddddr . G4e6a) (cdddar . G4e69) (cddadr . G4e68) (cddaar . G4e67) (cdaddr . G4e66) (cdadar . G4e65) (cdaadr . G4e64) (cdaaar . G4e63) (cadddr . G4e62) (caddar . G4e61) (cadadr . G4e60) (cadaar . G4e5f) (caaddr . G4e5e) (caadar . G4e5d) (caaadr . G4e5c) (caaaar . G4e5b) (cdddr . G4e5a) (cddar . G4e59) (cdadr . G4e58) (cdaar . G4e57) (caddr . G4e56) (cadar . G4e55) (caadr . G4e54) (caaar . G4e53) (cddr . G4e52) (cdar . G4e51) (cadr . G4e50) (caar . G4e4f) (cdr . G4e4e) (car . G4e4d) (boolean? . G4e4c) (atan . G4e4a) (asin . G4e48) (apply . G4e47) (append . G4e46) (angle . G4e45) (acos . G4e44) (abs . G4e43) (/ . G4e42) (* . G4e41) (- . G4e40) (+ . G4e3f) (>= . G4e3e) (> . G4e3d) (= . G4e3c) (<= . G4e3b) (< . G4e3a) (unquote-splicing . G4e06) (unquote . G4e05) (delay . G4dfe) (do . G4dfc) (cond . G4dfb) (let* . G4dfa) (let . G4df9) (quasiquote . G4df3) (syntax-rules . G4df2) (case . G4ded) (or . G4de9) (and . G4de8) (if . G4de7) (letrec . G4de5) (lambda . G4de2) (quote . G4ddf) (letrec-syntax . G4ddd) (let-syntax . G4ddc) (set! . G4ddb) (begin . G4dd9) (define-syntax . G4dd7) (define . G4dd6)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50a6 '(psyntax modules) '() '() '() '() '((module . G4dd8)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50a7 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50a8 '(rnrs) '(6) '() '() '() '((regexp? . G509b) (string-upcase . G5054) (string-titlecase . G5053) (string-normalize-nfkd . G5052) (string-normalize-nfkc . G5051) (string-normalize-nfd . G5050) (string-normalize-nfc . G504f) (string-foldcase . G504e) (string-downcase . G504d) (string-ci>? . G504c) (string-ci>=? . G504b) (string-ci=? . G504a) (string-ci<? . G5049) (string-ci<=? . G5048) (char-whitespace? . G5047) (char-upper-case? . G5046) (char-title-case? . G5045) (char-numeric? . G5044) (char-lower-case? . G5043) (char-general-category . G5042) (char-upcase . G5041) (char-titlecase . G5040) (char-foldcase . G503f) (char-downcase . G503e) (char-ci>? . G503d) (char-ci>=? . G503c) (char-ci=? . G503b) (char-ci<? . G503a) (char-ci<=? . G5039) (char-alphabetic? . G5038) (make-variable-transformer . G2da5) (identifier? . G3059) (generate-temporaries . G3043) (free-identifier=? . G3045) (syntax->datum . G305d) (datum->syntax . G305b) (bound-identifier=? . G3047) (record-type-descriptor? . G5037) (record-predicate . G5036) (record-mutator . G5035) (record-constructor . G5034) (record-accessor . G5033) (make-record-type-descriptor . G5032) (make-record-constructor-descriptor . G5031) (record? . G5030) (record-type-uid . G502f) (record-type-sealed? . G502e) (record-type-parent . G502d) (record-type-opaque? . G502c) (record-type-name . G502b) (record-type-generative? . G502a) (record-type-field-names . G5029) (record-rtd . G5028) (record-field-mutable? . G5027) (delete-file . G5026) (file-exists? . G5025) (vector-sort! . G5024) (vector-sort . G5023) (list-sort . G5022) (symbol-hash . G5021) (string-ci-hash . G5020) (string-hash . G501f) (equal-hash . G501e) (hashtable-equivalence-function . G501d) (make-hashtable . G501c) (hashtable-hash-function . G501b) (make-eqv-hashtable . G501a) (make-eq-hashtable . G5019) (hashtable? . G5018) (hashtable-update! . G5017) (hashtable-size . G5016) (hashtable-set! . G5015) (hashtable-ref . G5014) (hashtable-mutable? . G5013) (hashtable-keys . G5012) (hashtable-entries . G5011) (hashtable-delete! . G5010) (hashtable-copy . G500f) (hashtable-contains? . G500e) (hashtable-clear! . G500d) (call-with-output-file . G500c) (call-with-input-file . G500b) (write-char . G500a) (write . G5009) (with-output-to-file . G5008) (with-input-from-file . G5007) (read-char . G5006) (read . G5005) (peek-char . G5004) (open-output-file . G5003) (open-input-file . G5002) (newline . G5001) (display . G5000) (close-output-port . G4fff) (close-input-port . G4ffe) (eof-object? . G4ffd) (eof-object . G4ffc) (current-error-port . G4ffb) (current-output-port . G4ffa) (current-input-port . G4ff9) (output-port? . G4ff8) (input-port? . G4ff7) (utf-8-codec . G4ff6) (utf-16-codec . G4ff5) (transcoder-error-handling-mode . G4ff4) (transcoder-eol-style . G4ff3) (transcoder-codec . G4ff2) (transcoded-port . G4ff1) (textual-port? . G4ff0) (string->bytevector . G4fef) (standard-output-port . G4fee) (standard-input-port . G4fed) (standard-error-port . G4fec) (set-port-position! . G4feb) (put-u8 . G4fea) (put-string . G4fe9) (put-datum . G4fe8) (put-char . G4fe7) (put-bytevector . G4fe6) (port? . G4fe5) (port-transcoder . G4fe4) (port-position . G4fe3) (port-has-set-port-position!? . G4fe2) (port-has-port-position? . G4fe1) (port-eof? . G4fe0) (output-port-buffer-mode . G4fdf) (open-string-output-port . G4fde) (open-string-input-port . G4fdd) (open-file-output-port . G4fdc) (open-file-input/output-port . G4fdb) (open-file-input-port . G4fda) (open-bytevector-output-port . G4fd9) (open-bytevector-input-port . G4fd8) (native-transcoder . G4fd7) (native-eol-style . G4fd6) (make-transcoder . G4fd5) (latin-1-codec . G4fd4) (make-i/o-write-error . G4b36) (make-i/o-read-error . G4b21) (make-i/o-port-error . G4bd4) (make-i/o-invalid-position-error . G4b4c) (make-i/o-filename-error . G4b66) (make-i/o-file-protection-error . G4b7f) (make-i/o-file-is-read-only-error . G4b94) (make-i/o-file-does-not-exist-error . G4bbe) (make-i/o-file-already-exists-error . G4ba9) (make-i/o-error . G4b0c) (make-i/o-encoding-error . G4c03) (make-i/o-decoding-error . G4bed) (make-custom-textual-output-port . G4fd3) (make-custom-textual-input/output-port . G4fd2) (make-custom-textual-input-port . G4fd1) (make-custom-binary-output-port . G4fd0) (make-custom-binary-input/output-port . G4fcf) (make-custom-binary-input-port . G4fce) (make-bytevector . G4fcd) (lookahead-u8 . G4fcc) (lookahead-char . G4fcb) (i/o-write-error? . G4b38) (i/o-read-error? . G4b23) (i/o-port-error? . G4bd8) (i/o-invalid-position-error? . G4b50) (i/o-filename-error? . G4b6a) (i/o-file-protection-error? . G4b81) (i/o-file-is-read-only-error? . G4b96) (i/o-file-does-not-exist-error? . G4bc0) (i/o-file-already-exists-error? . G4bab) (i/o-error? . G4b0e) (i/o-error-port . G4bda) (i/o-error-filename . G4b6c) (i/o-encoding-error? . G4c07) (i/o-encoding-error-char . G4c09) (i/o-decoding-error? . G4bef) (get-u8 . G4fca) (get-string-n! . G4fc9) (get-string-n . G4fc8) (get-string-all . G4fc7) (get-line . G4fc6) (get-datum . G4fc5) (get-char . G4fc4) (get-bytevector-some . G4fc3) (get-bytevector-n! . G4fc2) (get-bytevector-n . G4fc1) (get-bytevector-all . G4fc0) (flush-output-port . G4fbf) (close-port . G4fbe) (exit . G4fb6) (command-line . G4d32) (remove . G4fb1) (remv . G4fb0) (remp . G4faf) (remq . G4fae) (partition . G4fad) (memv . G4fac) (memq . G4fab) (memp . G4faa) (member . G4fa9) (exists . G4fa8) (for-all . G4fa7) (fold-right . G4fa6) (fold-left . G4fa5) (find . G4fa4) (filter . G4fa3) (cons* . G4fa2) (assv . G4fa1) (assq . G4fa0) (assp . G4f9f) (assoc . G4f9e) (call-with-string-output-port . G4f9d) (call-with-port . G4f9c) (call-with-bytevector-output-port . G4f9b) (bytevector->string . G4f9a) (buffer-mode? . G4f99) (binary-port? . G4f98) (with-exception-handler . G4f97) (raise-continuable . G4f96) (raise . G4f95) (make-enumeration . G4f94) (enum-set=? . G4f93) (enum-set-universe . G4f92) (enum-set-union . G4f91) (enum-set-subset? . G4f90) (enum-set-projection . G4f8f) (enum-set-member? . G4f8e) (enum-set-intersection . G4f8d) (enum-set-indexer . G4f8c) (enum-set-difference . G4f8b) (enum-set-constructor . G4f8a) (enum-set-complement . G4f89) (enum-set->list . G4f88) (who-condition? . G4a84) (warning? . G49fe) (violation? . G4a3d) (undefined-violation? . G4af9) (syntax-violation? . G4ae0) (syntax-violation-subform . G4ae4) (syntax-violation-form . G4ae2) (syntax-violation . G3057) (simple-conditions . G4f87) (serious-condition? . G4a13) (non-continuable-violation? . G4a9b) (message-condition? . G49e7) (make-who-condition . G4a80) (make-warning . G49fc) (make-violation . G4a3b) (make-undefined-violation . G4af7) (make-syntax-violation . G4ada) (make-serious-condition . G4a11) (make-non-continuable-violation . G4a99) (make-message-condition . G49e3) (make-lexical-violation . G4ac3) (make-irritants-condition . G4a66) (make-implementation-restriction-violation . G4aae) (make-error . G4a26) (make-assertion-violation . G4a50) (lexical-violation? . G4ac5) (irritants-condition? . G4a6a) (implementation-restriction-violation? . G4ab0) (error? . G4a28) (condition-who . G4a86) (condition-predicate . G4f86) (condition-message . G49e9) (condition-irritants . G4a6c) (condition-accessor . G4f85) (condition . G4f84) (assertion-violation? . G4a52) (condition? . G4f83) (utf32->string . G4f82) (utf16->string . G4f81) (utf8->string . G4f80) (uint-list->bytevector . G4f7f) (u8-list->bytevector . G4f7e) (string->utf8 . G4f7d) (string->utf32 . G4f7c) (string->utf16 . G4f7b) (sint-list->bytevector . G4f7a) (native-endianness . G4f79) (bytevector? . G4f78) (bytevector=? . G4f77) (bytevector-uint-set! . G4f76) (bytevector-uint-ref . G4f75) (bytevector-u8-set! . G4f74) (bytevector-u8-ref . G4f73) (bytevector-u64-set! . G4f72) (bytevector-u64-ref . G4f71) (bytevector-u64-native-set! . G4f70) (bytevector-u64-native-ref . G4f6f) (bytevector-u32-set! . G4f6e) (bytevector-u32-ref . G4f6d) (bytevector-u32-native-set! . G4f6c) (bytevector-u32-native-ref . G4f6b) (bytevector-u16-set! . G4f6a) (bytevector-u16-ref . G4f69) (bytevector-u16-native-set! . G4f68) (bytevector-u16-native-ref . G4f67) (bytevector-sint-set! . G4f66) (bytevector-sint-ref . G4f65) (bytevector-s8-set! . G4f64) (bytevector-s8-ref . G4f63) (bytevector-s64-set! . G4f62) (bytevector-s64-ref . G4f61) (bytevector-s64-native-set! . G4f60) (bytevector-s64-native-ref . G4f5f) (bytevector-s32-set! . G4f5e) (bytevector-s32-ref . G4f5d) (bytevector-s32-native-set! . G4f5c) (bytevector-s32-native-ref . G4f5b) (bytevector-s16-set! . G4f5a) (bytevector-s16-ref . G4f59) (bytevector-s16-native-set! . G4f58) (bytevector-s16-native-ref . G4f57) (bytevector-length . G4f56) (bytevector-ieee-single-ref . G4f55) (bytevector-ieee-single-set! . G4f54) (bytevector-ieee-single-native-set! . G4f53) (bytevector-ieee-single-native-ref . G4f52) (bytevector-ieee-double-set! . G4f51) (bytevector-ieee-double-ref . G4f50) (bytevector-ieee-double-native-set! . G4f4f) (bytevector-ieee-double-native-ref . G4f4e) (bytevector-fill! . G4f4d) (bytevector-copy! . G4f4c) (bytevector-copy . G4f4b) (bytevector->uint-list . G4f4a) (bytevector->u8-list . G4f49) (bytevector->sint-list . G4f48) (no-nans-violation? . G4c33) (no-infinities-violation? . G4c1e) (make-no-nans-violation . G4c31) (make-no-infinities-violation . G4c1c) (real->flonum . G4f47) (flzero? . G4f46) (fltruncate . G4f45) (fltan . G4f44) (flsqrt . G4f43) (flsin . G4f42) (flround . G4f41) (flpositive? . G4f40) (flonum? . G4f3f) (flodd? . G4f3e) (flnumerator . G4f3d) (flnegative? . G4f3c) (flnan? . G4f3b) (flmod0 . G4f3a) (flmod . G4f39) (flmin . G4f38) (flmax . G4f37) (fllog . G4f36) (flinteger? . G4f35) (flinfinite? . G4f34) (flfloor . G4f33) (flfinite? . G4f32) (flexpt . G4f31) (flexp . G4f30) (fleven? . G4f2f) (fldiv0-and-mod0 . G4f2e) (fldiv0 . G4f2d) (fldiv-and-mod . G4f2c) (fldiv . G4f2b) (fldenominator . G4f2a) (flcos . G4f29) (flceiling . G4f28) (flatan . G4f27) (flasin . G4f26) (flacos . G4f25) (flabs . G4f24) (fl>? . G4f23) (fl>=? . G4f22) (fl=? . G4f21) (fl<? . G4f20) (fl<=? . G4f1f) (fl/ . G4f1e) (fl- . G4f1d) (fl+ . G4f1c) (fl* . G4f1b) (fixnum->flonum . G4f1a) (fxzero? . G4f19) (fxxor . G4f18) (fxrotate-bit-field . G4f17) (fxreverse-bit-field . G4f16) (fxpositive? . G4f15) (fxodd? . G4f14) (fxnot . G4f13) (fxnegative? . G4f12) (fxmod0 . G4f11) (fxmod . G4f10) (fxmin . G4f0f) (fxmax . G4f0e) (fxlength . G4f0d) (fxior . G4f0c) (fxif . G4f0b) (fxfirst-bit-set . G4f0a) (fxeven? . G4f09) (fxdiv0-and-mod0 . G4f08) (fxdiv0 . G4f07) (fxdiv-and-mod . G4f06) (fxdiv . G4f05) (fxcopy-bit-field . G4f04) (fxcopy-bit . G4f03) (fxbit-set? . G4f02) (fxbit-field . G4f01) (fxbit-count . G4f00) (fxarithmetic-shift-right . G4eff) (fxarithmetic-shift-left . G4efe) (fxarithmetic-shift . G4efd) (fxand . G4efc) (fx>? . G4efb) (fx>=? . G4efa) (fx=? . G4ef9) (fx<? . G4ef8) (fx<=? . G4ef7) (fx-/carry . G4ef6) (fx- . G4ef5) (fx+/carry . G4ef4) (fx+ . G4ef3) (fx*/carry . G4ef2) (fx* . G4ef1) (greatest-fixnum . G4ef0) (least-fixnum . G4eef) (fixnum-width . G4eee) (fixnum? . G4eed) (bitwise-rotate-bit-field . G4eec) (bitwise-reverse-bit-field . G4eeb) (bitwise-length . G4eea) (bitwise-if . G4ee9) (bitwise-first-bit-set . G4ee8) (bitwise-copy-bit-field . G4ee7) (bitwise-copy-bit . G4ee6) (bitwise-bit-set? . G4ee5) (bitwise-bit-field . G4ee4) (bitwise-bit-count . G4ee3) (bitwise-xor . G4ee2) (bitwise-ior . G4ee1) (bitwise-and . G4ee0) (bitwise-not . G4edf) (bitwise-arithmetic-shift-right . G4ede) (bitwise-arithmetic-shift-left . G4edd) (bitwise-arithmetic-shift . G4edc) (zero? . G4edb) (vector? . G4eda) (vector-set! . G4ed9) (vector-ref . G4ed8) (vector-map . G4ed7) (vector-length . G4ed6) (vector-for-each . G4ed5) (vector-fill! . G4ed4) (vector->list . G4ed3) (vector . G4ed2) (values . G4ed1) (truncate . G4ed0) (tan . G4ecf) (symbol? . G4ece) (symbol=? . G4ecd) (symbol->string . G4ecc) (substring . G4ecb) (string? . G4eca) (string>? . G4ec9) (string>=? . G4ec8) (string=? . G4ec7) (string<? . G4ec6) (string<=? . G4ec5) (string-ref . G4ec4) (string-length . G4ec3) (string-for-each . G4ec2) (string-copy . G4ec1) (string-append . G4ec0) (string->symbol . G4ebf) (string->number . G4ebe) (string->list . G4ebd) (string . G4ebc) (sqrt . G4ebb) (sin . G4eba) (round . G4eb9) (reverse . G4eb8) (real? . G4eb7) (real-valued? . G4eb6) (real-part . G4eb5) (rationalize . G4eb4) (rational? . G4eb3) (rational-valued? . G4eb2) (procedure? . G4eb1) (positive? . G4eb0) (pair? . G4eaf) (odd? . G4eae) (numerator . G4ead) (number? . G4eac) (number->string . G4eab) (null? . G4eaa) (not . G4ea9) (negative? . G4ea8) (nan? . G4ea7) (min . G4ea6) (max . G4ea5) (map . G4ea4) (make-vector . G4ea3) (make-string . G4ea2) (make-rectangular . G4ea1) (make-polar . G4ea0) (magnitude . G4e9f) (log . G4e9e) (list? . G4e9d) (list-tail . G4e9c) (list-ref . G4e9b) (list->vector . G4e9a) (list->string . G4e99) (list . G4e98) (length . G4e97) (lcm . G4e96) (integer? . G4e95) (integer-valued? . G4e94) (integer->char . G4e93) (infinite? . G4e92) (inexact? . G4e91) (inexact . G4e90) (imag-part . G4e8f) (gcd . G4e8e) (for-each . G4e8d) (floor . G4e8c) (finite? . G4e8b) (expt . G4e8a) (exp . G4e89) (exact? . G4e88) (exact-integer-sqrt . G4e87) (exact . G4e86) (even? . G4e85) (error . G4e84) (eqv? . G4e83) (equal? . G4e82) (eq? . G4e81) (dynamic-wind . G4e80) (div0-and-mod0 . G4e7f) (mod0 . G4e7e) (div0 . G4e7d) (div-and-mod . G4e7c) (mod . G4e7b) (div . G4e7a) (denominator . G4e79) (cos . G4e78) (cons . G4e77) (complex? . G4e76) (char? . G4e75) (char>? . G4e74) (char>=? . G4e73) (char=? . G4e72) (char<? . G4e71) (char<=? . G4e70) (char->integer . G4e6f) (ceiling . G4e6e) (call-with-values . G4e6d) (call/cc . G4e6c) (call-with-current-continuation . G4e6b) (cddddr . G4e6a) (cdddar . G4e69) (cddadr . G4e68) (cddaar . G4e67) (cdaddr . G4e66) (cdadar . G4e65) (cdaadr . G4e64) (cdaaar . G4e63) (cadddr . G4e62) (caddar . G4e61) (cadadr . G4e60) (cadaar . G4e5f) (caaddr . G4e5e) (caadar . G4e5d) (caaadr . G4e5c) (caaaar . G4e5b) (cdddr . G4e5a) (cddar . G4e59) (cdadr . G4e58) (cdaar . G4e57) (caddr . G4e56) (cadar . G4e55) (caadr . G4e54) (caaar . G4e53) (cddr . G4e52) (cdar . G4e51) (cadr . G4e50) (caar . G4e4f) (cdr . G4e4e) (car . G4e4d) (boolean? . G4e4c) (boolean=? . G4e4b) (atan . G4e4a) (assertion-violation . G4e49) (asin . G4e48) (apply . G4e47) (append . G4e46) (angle . G4e45) (acos . G4e44) (abs . G4e43) (/ . G4e42) (* . G4e41) (- . G4e40) (+ . G4e3f) (>= . G4e3e) (> . G4e3d) (= . G4e3c) (<= . G4e3b) (< . G4e3a) (&no-nans . G4e37) (&no-infinities . G4e36) (&i/o-encoding . G4e35) (&i/o-decoding . G4e34) (&i/o-port . G4e33) (&i/o-file-does-not-exist . G4e32) (&i/o-file-already-exists . G4e31) (&i/o-file-is-read-only . G4e30) (&i/o-file-protection . G4e2f) (&i/o-filename . G4e2e) (&i/o-invalid-position . G4e2d) (&i/o-write . G4e2c) (&i/o-read . G4e2b) (&i/o . G4e2a) (&undefined . G4e29) (&syntax . G4e28) (&lexical . G4e27) (&implementation-restriction . G4e26) (&non-continuable . G4e25) (&who . G4e24) (&irritants . G4e23) (&assertion . G4e22) (&violation . G4e21) (&error . G4e20) (&serious . G4e1f) (&warning . G4e1e) (&message . G4e1d) (&condition . G4e1c) (define-condition-type . G4e1b) (define-enumeration . G4e1a) (define-record-type . G4e19) (parent-rtd . G4e18) (nongenerative . G4e17) (opaque . G4e16) (sealed . G4e15) (protocol . G4e14) (parent . G4e13) (immutable . G4e12) (mutable . G4e11) (fields . G4e10) (error-handling-mode . G4e0f) (file-options . G4e0e) (buffer-mode . G4e0d) (eol-style . G4e0c) (guard . G4e0b) (unsyntax-splicing . G4e08) (unsyntax . G4e07) (unquote-splicing . G4e06) (unquote . G4e05) (_ . G4e04) (else . G4e03) (=> . G4e02) (... . G4e01) (assert . G4e00) (endianness . G4dff) (do . G4dfc) (cond . G4dfb) (let* . G4dfa) (let . G4df9) (let*-values . G4df8) (let-values . G4df7) (identifier-syntax . G4df6) (with-syntax . G4df5) (quasisyntax . G4df4) (quasiquote . G4df3) (syntax-rules . G4df2) (record-constructor-descriptor . G4def) (record-type-descriptor . G4dee) (case . G4ded) (unless . G4deb) (when . G4dea) (or . G4de9) (and . G4de8) (if . G4de7) (letrec* . G4de6) (letrec . G4de5) (case-lambda . G4de3) (lambda . G4de2) (syntax . G4de1) (syntax-case . G4de0) (quote . G4ddf) (letrec-syntax . G4ddd) (let-syntax . G4ddc) (set! . G4ddb) (begin . G4dd9) (define-syntax . G4dd7) (define . G4dd6)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50a9 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G3031) (quotient . G4fbd) (null-environment . G302f) (remainder . G4fbc) (modulo . G4fbb) (inexact->exact . G4fba) (force . G4fb9) (exact->inexact . G4fb8) (make-promise . G4fb7) (delay . G4dfe)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50aa '(rnrs control) '(6) '() '() '() '((do . G4dfc) (unless . G4deb) (when . G4dea) (case-lambda . G4de3)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50ab '(rnrs eval) '(6) '() '() '() '((eval . G3035) (environment . G302d)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50ac '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G4fb3) (set-car! . G4fb2)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50ad '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G4fb5) (string-set! . G4fb4)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50ae '(rnrs programs) '(6) '() '() '() '((exit . G4fb6) (command-line . G4d32)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50af '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2da5) (identifier? . G3059) (generate-temporaries . G3043) (free-identifier=? . G3045) (syntax->datum . G305d) (datum->syntax . G305b) (bound-identifier=? . G3047) (syntax-violation . G3057) (unsyntax-splicing . G4e08) (unsyntax . G4e07) (_ . G4e04) (... . G4e01) (with-syntax . G4df5) (quasisyntax . G4df4) (syntax . G4de1) (syntax-case . G4de0)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b0 '(rnrs files) '(6) '() '() '() '((delete-file . G5026) (file-exists? . G5025) (make-i/o-write-error . G4b36) (make-i/o-read-error . G4b21) (make-i/o-port-error . G4bd4) (make-i/o-invalid-position-error . G4b4c) (make-i/o-filename-error . G4b66) (make-i/o-file-protection-error . G4b7f) (make-i/o-file-is-read-only-error . G4b94) (make-i/o-file-does-not-exist-error . G4bbe) (make-i/o-file-already-exists-error . G4ba9) (make-i/o-error . G4b0c) (i/o-write-error? . G4b38) (i/o-read-error? . G4b23) (i/o-port-error? . G4bd8) (i/o-invalid-position-error? . G4b50) (i/o-filename-error? . G4b6a) (i/o-file-protection-error? . G4b81) (i/o-file-is-read-only-error? . G4b96) (i/o-file-does-not-exist-error? . G4bc0) (i/o-file-already-exists-error? . G4bab) (i/o-error? . G4b0e) (i/o-error-port . G4bda) (i/o-error-filename . G4b6c) (&i/o-port . G4e33) (&i/o-file-does-not-exist . G4e32) (&i/o-file-already-exists . G4e31) (&i/o-file-is-read-only . G4e30) (&i/o-file-protection . G4e2f) (&i/o-filename . G4e2e) (&i/o-invalid-position . G4e2d) (&i/o-write . G4e2c) (&i/o-read . G4e2b) (&i/o . G4e2a)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b1 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G5024) (vector-sort . G5023) (list-sort . G5022)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b2 '(rnrs base) '(6) '() '() '() '((zero? . G4edb) (vector? . G4eda) (vector-set! . G4ed9) (vector-ref . G4ed8) (vector-map . G4ed7) (vector-length . G4ed6) (vector-for-each . G4ed5) (vector-fill! . G4ed4) (vector->list . G4ed3) (vector . G4ed2) (values . G4ed1) (truncate . G4ed0) (tan . G4ecf) (symbol? . G4ece) (symbol=? . G4ecd) (symbol->string . G4ecc) (substring . G4ecb) (string? . G4eca) (string>? . G4ec9) (string>=? . G4ec8) (string=? . G4ec7) (string<? . G4ec6) (string<=? . G4ec5) (string-ref . G4ec4) (string-length . G4ec3) (string-for-each . G4ec2) (string-copy . G4ec1) (string-append . G4ec0) (string->symbol . G4ebf) (string->number . G4ebe) (string->list . G4ebd) (string . G4ebc) (sqrt . G4ebb) (sin . G4eba) (round . G4eb9) (reverse . G4eb8) (real? . G4eb7) (real-valued? . G4eb6) (real-part . G4eb5) (rationalize . G4eb4) (rational? . G4eb3) (rational-valued? . G4eb2) (procedure? . G4eb1) (positive? . G4eb0) (pair? . G4eaf) (odd? . G4eae) (numerator . G4ead) (number? . G4eac) (number->string . G4eab) (null? . G4eaa) (not . G4ea9) (negative? . G4ea8) (nan? . G4ea7) (min . G4ea6) (max . G4ea5) (map . G4ea4) (make-vector . G4ea3) (make-string . G4ea2) (make-rectangular . G4ea1) (make-polar . G4ea0) (magnitude . G4e9f) (log . G4e9e) (list? . G4e9d) (list-tail . G4e9c) (list-ref . G4e9b) (list->vector . G4e9a) (list->string . G4e99) (list . G4e98) (length . G4e97) (lcm . G4e96) (integer? . G4e95) (integer-valued? . G4e94) (integer->char . G4e93) (infinite? . G4e92) (inexact? . G4e91) (inexact . G4e90) (imag-part . G4e8f) (gcd . G4e8e) (for-each . G4e8d) (floor . G4e8c) (finite? . G4e8b) (expt . G4e8a) (exp . G4e89) (exact? . G4e88) (exact-integer-sqrt . G4e87) (exact . G4e86) (even? . G4e85) (error . G4e84) (eqv? . G4e83) (equal? . G4e82) (eq? . G4e81) (dynamic-wind . G4e80) (div0-and-mod0 . G4e7f) (mod0 . G4e7e) (div0 . G4e7d) (div-and-mod . G4e7c) (mod . G4e7b) (div . G4e7a) (denominator . G4e79) (cos . G4e78) (cons . G4e77) (complex? . G4e76) (char? . G4e75) (char>? . G4e74) (char>=? . G4e73) (char=? . G4e72) (char<? . G4e71) (char<=? . G4e70) (char->integer . G4e6f) (ceiling . G4e6e) (call-with-values . G4e6d) (call/cc . G4e6c) (call-with-current-continuation . G4e6b) (cddddr . G4e6a) (cdddar . G4e69) (cddadr . G4e68) (cddaar . G4e67) (cdaddr . G4e66) (cdadar . G4e65) (cdaadr . G4e64) (cdaaar . G4e63) (cadddr . G4e62) (caddar . G4e61) (cadadr . G4e60) (cadaar . G4e5f) (caaddr . G4e5e) (caadar . G4e5d) (caaadr . G4e5c) (caaaar . G4e5b) (cdddr . G4e5a) (cddar . G4e59) (cdadr . G4e58) (cdaar . G4e57) (caddr . G4e56) (cadar . G4e55) (caadr . G4e54) (caaar . G4e53) (cddr . G4e52) (cdar . G4e51) (cadr . G4e50) (caar . G4e4f) (cdr . G4e4e) (car . G4e4d) (boolean? . G4e4c) (boolean=? . G4e4b) (atan . G4e4a) (assertion-violation . G4e49) (asin . G4e48) (apply . G4e47) (append . G4e46) (angle . G4e45) (acos . G4e44) (abs . G4e43) (/ . G4e42) (* . G4e41) (- . G4e40) (+ . G4e3f) (>= . G4e3e) (> . G4e3d) (= . G4e3c) (<= . G4e3b) (< . G4e3a) (unquote-splicing . G4e06) (unquote . G4e05) (_ . G4e04) (else . G4e03) (=> . G4e02) (... . G4e01) (assert . G4e00) (cond . G4dfb) (let* . G4dfa) (let . G4df9) (let*-values . G4df8) (let-values . G4df7) (identifier-syntax . G4df6) (quasiquote . G4df3) (syntax-rules . G4df2) (case . G4ded) (or . G4de9) (and . G4de8) (if . G4de7) (letrec* . G4de6) (letrec . G4de5) (lambda . G4de2) (quote . G4ddf) (letrec-syntax . G4ddd) (let-syntax . G4ddc) (set! . G4ddb) (begin . G4dd9) (define-syntax . G4dd7) (define . G4dd6)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b3 '(rnrs lists) '(6) '() '() '() '((remove . G4fb1) (remv . G4fb0) (remp . G4faf) (remq . G4fae) (partition . G4fad) (memv . G4fac) (memq . G4fab) (memp . G4faa) (member . G4fa9) (exists . G4fa8) (for-all . G4fa7) (fold-right . G4fa6) (fold-left . G4fa5) (find . G4fa4) (filter . G4fa3) (cons* . G4fa2) (assv . G4fa1) (assq . G4fa0) (assp . G4f9f) (assoc . G4f9e)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b4 '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G500c) (call-with-input-file . G500b) (write-char . G500a) (write . G5009) (with-output-to-file . G5008) (with-input-from-file . G5007) (read-char . G5006) (read . G5005) (peek-char . G5004) (open-output-file . G5003) (open-input-file . G5002) (newline . G5001) (display . G5000) (close-output-port . G4fff) (close-input-port . G4ffe) (eof-object? . G4ffd) (eof-object . G4ffc) (current-error-port . G4ffb) (current-output-port . G4ffa) (current-input-port . G4ff9) (output-port? . G4ff8) (input-port? . G4ff7) (make-i/o-write-error . G4b36) (make-i/o-read-error . G4b21) (make-i/o-port-error . G4bd4) (make-i/o-invalid-position-error . G4b4c) (make-i/o-filename-error . G4b66) (make-i/o-file-protection-error . G4b7f) (make-i/o-file-is-read-only-error . G4b94) (make-i/o-file-does-not-exist-error . G4bbe) (make-i/o-file-already-exists-error . G4ba9) (make-i/o-error . G4b0c) (i/o-write-error? . G4b38) (i/o-read-error? . G4b23) (i/o-port-error? . G4bd8) (i/o-invalid-position-error? . G4b50) (i/o-filename-error? . G4b6a) (i/o-file-protection-error? . G4b81) (i/o-file-is-read-only-error? . G4b96) (i/o-file-does-not-exist-error? . G4bc0) (i/o-file-already-exists-error? . G4bab) (i/o-error? . G4b0e) (i/o-error-port . G4bda) (i/o-error-filename . G4b6c) (&i/o-port . G4e33) (&i/o-file-does-not-exist . G4e32) (&i/o-file-already-exists . G4e31) (&i/o-file-is-read-only . G4e30) (&i/o-file-protection . G4e2f) (&i/o-filename . G4e2e) (&i/o-invalid-position . G4e2d) (&i/o-write . G4e2c) (&i/o-read . G4e2b) (&i/o . G4e2a)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b5 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G4fcd) (utf32->string . G4f82) (utf16->string . G4f81) (utf8->string . G4f80) (uint-list->bytevector . G4f7f) (u8-list->bytevector . G4f7e) (string->utf8 . G4f7d) (string->utf32 . G4f7c) (string->utf16 . G4f7b) (sint-list->bytevector . G4f7a) (native-endianness . G4f79) (bytevector? . G4f78) (bytevector=? . G4f77) (bytevector-uint-set! . G4f76) (bytevector-uint-ref . G4f75) (bytevector-u8-set! . G4f74) (bytevector-u8-ref . G4f73) (bytevector-u64-set! . G4f72) (bytevector-u64-ref . G4f71) (bytevector-u64-native-set! . G4f70) (bytevector-u64-native-ref . G4f6f) (bytevector-u32-set! . G4f6e) (bytevector-u32-ref . G4f6d) (bytevector-u32-native-set! . G4f6c) (bytevector-u32-native-ref . G4f6b) (bytevector-u16-set! . G4f6a) (bytevector-u16-ref . G4f69) (bytevector-u16-native-set! . G4f68) (bytevector-u16-native-ref . G4f67) (bytevector-sint-set! . G4f66) (bytevector-sint-ref . G4f65) (bytevector-s8-set! . G4f64) (bytevector-s8-ref . G4f63) (bytevector-s64-set! . G4f62) (bytevector-s64-ref . G4f61) (bytevector-s64-native-set! . G4f60) (bytevector-s64-native-ref . G4f5f) (bytevector-s32-set! . G4f5e) (bytevector-s32-ref . G4f5d) (bytevector-s32-native-set! . G4f5c) (bytevector-s32-native-ref . G4f5b) (bytevector-s16-set! . G4f5a) (bytevector-s16-ref . G4f59) (bytevector-s16-native-set! . G4f58) (bytevector-s16-native-ref . G4f57) (bytevector-length . G4f56) (bytevector-ieee-single-ref . G4f55) (bytevector-ieee-single-set! . G4f54) (bytevector-ieee-single-native-set! . G4f53) (bytevector-ieee-single-native-ref . G4f52) (bytevector-ieee-double-set! . G4f51) (bytevector-ieee-double-ref . G4f50) (bytevector-ieee-double-native-set! . G4f4f) (bytevector-ieee-double-native-ref . G4f4e) (bytevector-fill! . G4f4d) (bytevector-copy! . G4f4c) (bytevector-copy . G4f4b) (bytevector->uint-list . G4f4a) (bytevector->u8-list . G4f49) (bytevector->sint-list . G4f48) (endianness . G4dff)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b6 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G5054) (string-titlecase . G5053) (string-normalize-nfkd . G5052) (string-normalize-nfkc . G5051) (string-normalize-nfd . G5050) (string-normalize-nfc . G504f) (string-foldcase . G504e) (string-downcase . G504d) (string-ci>? . G504c) (string-ci>=? . G504b) (string-ci=? . G504a) (string-ci<? . G5049) (string-ci<=? . G5048) (char-whitespace? . G5047) (char-upper-case? . G5046) (char-title-case? . G5045) (char-numeric? . G5044) (char-lower-case? . G5043) (char-general-category . G5042) (char-upcase . G5041) (char-titlecase . G5040) (char-foldcase . G503f) (char-downcase . G503e) (char-ci>? . G503d) (char-ci>=? . G503c) (char-ci=? . G503b) (char-ci<? . G503a) (char-ci<=? . G5039) (char-alphabetic? . G5038)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b7 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G4f97) (raise-continuable . G4f96) (raise . G4f95) (guard . G4e0b) (else . G4e03) (=> . G4e02)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b8 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4eec) (bitwise-reverse-bit-field . G4eeb) (bitwise-length . G4eea) (bitwise-if . G4ee9) (bitwise-first-bit-set . G4ee8) (bitwise-copy-bit-field . G4ee7) (bitwise-copy-bit . G4ee6) (bitwise-bit-set? . G4ee5) (bitwise-bit-field . G4ee4) (bitwise-bit-count . G4ee3) (bitwise-xor . G4ee2) (bitwise-ior . G4ee1) (bitwise-and . G4ee0) (bitwise-not . G4edf) (bitwise-arithmetic-shift-right . G4ede) (bitwise-arithmetic-shift-left . G4edd) (bitwise-arithmetic-shift . G4edc)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50b9 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4f19) (fxxor . G4f18) (fxrotate-bit-field . G4f17) (fxreverse-bit-field . G4f16) (fxpositive? . G4f15) (fxodd? . G4f14) (fxnot . G4f13) (fxnegative? . G4f12) (fxmod0 . G4f11) (fxmod . G4f10) (fxmin . G4f0f) (fxmax . G4f0e) (fxlength . G4f0d) (fxior . G4f0c) (fxif . G4f0b) (fxfirst-bit-set . G4f0a) (fxeven? . G4f09) (fxdiv0-and-mod0 . G4f08) (fxdiv0 . G4f07) (fxdiv-and-mod . G4f06) (fxdiv . G4f05) (fxcopy-bit-field . G4f04) (fxcopy-bit . G4f03) (fxbit-set? . G4f02) (fxbit-field . G4f01) (fxbit-count . G4f00) (fxarithmetic-shift-right . G4eff) (fxarithmetic-shift-left . G4efe) (fxarithmetic-shift . G4efd) (fxand . G4efc) (fx>? . G4efb) (fx>=? . G4efa) (fx=? . G4ef9) (fx<? . G4ef8) (fx<=? . G4ef7) (fx-/carry . G4ef6) (fx- . G4ef5) (fx+/carry . G4ef4) (fx+ . G4ef3) (fx*/carry . G4ef2) (fx* . G4ef1) (greatest-fixnum . G4ef0) (least-fixnum . G4eef) (fixnum-width . G4eee) (fixnum? . G4eed)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50ba '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4c33) (no-infinities-violation? . G4c1e) (make-no-nans-violation . G4c31) (make-no-infinities-violation . G4c1c) (real->flonum . G4f47) (flzero? . G4f46) (fltruncate . G4f45) (fltan . G4f44) (flsqrt . G4f43) (flsin . G4f42) (flround . G4f41) (flpositive? . G4f40) (flonum? . G4f3f) (flodd? . G4f3e) (flnumerator . G4f3d) (flnegative? . G4f3c) (flnan? . G4f3b) (flmod0 . G4f3a) (flmod . G4f39) (flmin . G4f38) (flmax . G4f37) (fllog . G4f36) (flinteger? . G4f35) (flinfinite? . G4f34) (flfloor . G4f33) (flfinite? . G4f32) (flexpt . G4f31) (flexp . G4f30) (fleven? . G4f2f) (fldiv0-and-mod0 . G4f2e) (fldiv0 . G4f2d) (fldiv-and-mod . G4f2c) (fldiv . G4f2b) (fldenominator . G4f2a) (flcos . G4f29) (flceiling . G4f28) (flatan . G4f27) (flasin . G4f26) (flacos . G4f25) (flabs . G4f24) (fl>? . G4f23) (fl>=? . G4f22) (fl=? . G4f21) (fl<? . G4f20) (fl<=? . G4f1f) (fl/ . G4f1e) (fl- . G4f1d) (fl+ . G4f1c) (fl* . G4f1b) (fixnum->flonum . G4f1a) (&no-nans . G4e37) (&no-infinities . G4e36)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50bb '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G5021) (string-ci-hash . G5020) (string-hash . G501f) (equal-hash . G501e) (hashtable-equivalence-function . G501d) (make-hashtable . G501c) (hashtable-hash-function . G501b) (make-eqv-hashtable . G501a) (make-eq-hashtable . G5019) (hashtable? . G5018) (hashtable-update! . G5017) (hashtable-size . G5016) (hashtable-set! . G5015) (hashtable-ref . G5014) (hashtable-mutable? . G5013) (hashtable-keys . G5012) (hashtable-entries . G5011) (hashtable-delete! . G5010) (hashtable-copy . G500f) (hashtable-contains? . G500e) (hashtable-clear! . G500d)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50bc '(rnrs io ports) '(6) '() '() '() '((eof-object? . G4ffd) (eof-object . G4ffc) (current-error-port . G4ffb) (current-output-port . G4ffa) (current-input-port . G4ff9) (output-port? . G4ff8) (input-port? . G4ff7) (utf-8-codec . G4ff6) (utf-16-codec . G4ff5) (transcoder-error-handling-mode . G4ff4) (transcoder-eol-style . G4ff3) (transcoder-codec . G4ff2) (transcoded-port . G4ff1) (textual-port? . G4ff0) (string->bytevector . G4fef) (standard-output-port . G4fee) (standard-input-port . G4fed) (standard-error-port . G4fec) (set-port-position! . G4feb) (put-u8 . G4fea) (put-string . G4fe9) (put-datum . G4fe8) (put-char . G4fe7) (put-bytevector . G4fe6) (port? . G4fe5) (port-transcoder . G4fe4) (port-position . G4fe3) (port-has-set-port-position!? . G4fe2) (port-has-port-position? . G4fe1) (port-eof? . G4fe0) (output-port-buffer-mode . G4fdf) (open-string-output-port . G4fde) (open-string-input-port . G4fdd) (open-file-output-port . G4fdc) (open-file-input/output-port . G4fdb) (open-file-input-port . G4fda) (open-bytevector-output-port . G4fd9) (open-bytevector-input-port . G4fd8) (native-transcoder . G4fd7) (native-eol-style . G4fd6) (make-transcoder . G4fd5) (latin-1-codec . G4fd4) (make-i/o-write-error . G4b36) (make-i/o-read-error . G4b21) (make-i/o-port-error . G4bd4) (make-i/o-invalid-position-error . G4b4c) (make-i/o-filename-error . G4b66) (make-i/o-file-protection-error . G4b7f) (make-i/o-file-is-read-only-error . G4b94) (make-i/o-file-does-not-exist-error . G4bbe) (make-i/o-file-already-exists-error . G4ba9) (make-i/o-error . G4b0c) (make-i/o-encoding-error . G4c03) (make-i/o-decoding-error . G4bed) (make-custom-textual-output-port . G4fd3) (make-custom-textual-input/output-port . G4fd2) (make-custom-textual-input-port . G4fd1) (make-custom-binary-output-port . G4fd0) (make-custom-binary-input/output-port . G4fcf) (make-custom-binary-input-port . G4fce) (lookahead-u8 . G4fcc) (lookahead-char . G4fcb) (i/o-write-error? . G4b38) (i/o-read-error? . G4b23) (i/o-port-error? . G4bd8) (i/o-invalid-position-error? . G4b50) (i/o-filename-error? . G4b6a) (i/o-file-protection-error? . G4b81) (i/o-file-is-read-only-error? . G4b96) (i/o-file-does-not-exist-error? . G4bc0) (i/o-file-already-exists-error? . G4bab) (i/o-error? . G4b0e) (i/o-error-port . G4bda) (i/o-error-filename . G4b6c) (i/o-encoding-error? . G4c07) (i/o-encoding-error-char . G4c09) (i/o-decoding-error? . G4bef) (get-u8 . G4fca) (get-string-n! . G4fc9) (get-string-n . G4fc8) (get-string-all . G4fc7) (get-line . G4fc6) (get-datum . G4fc5) (get-char . G4fc4) (get-bytevector-some . G4fc3) (get-bytevector-n! . G4fc2) (get-bytevector-n . G4fc1) (get-bytevector-all . G4fc0) (flush-output-port . G4fbf) (close-port . G4fbe) (call-with-string-output-port . G4f9d) (call-with-port . G4f9c) (call-with-bytevector-output-port . G4f9b) (bytevector->string . G4f9a) (buffer-mode? . G4f99) (binary-port? . G4f98) (&i/o-encoding . G4e35) (&i/o-decoding . G4e34) (&i/o-port . G4e33) (&i/o-file-does-not-exist . G4e32) (&i/o-file-already-exists . G4e31) (&i/o-file-is-read-only . G4e30) (&i/o-file-protection . G4e2f) (&i/o-filename . G4e2e) (&i/o-invalid-position . G4e2d) (&i/o-write . G4e2c) (&i/o-read . G4e2b) (&i/o . G4e2a) (error-handling-mode . G4e0f) (file-options . G4e0e) (buffer-mode . G4e0d) (eol-style . G4e0c)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50bd '(rnrs enums) '(6) '() '() '() '((make-enumeration . G4f94) (enum-set=? . G4f93) (enum-set-universe . G4f92) (enum-set-union . G4f91) (enum-set-subset? . G4f90) (enum-set-projection . G4f8f) (enum-set-member? . G4f8e) (enum-set-intersection . G4f8d) (enum-set-indexer . G4f8c) (enum-set-difference . G4f8b) (enum-set-constructor . G4f8a) (enum-set-complement . G4f89) (enum-set->list . G4f88) (define-enumeration . G4e1a)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50be '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4a84) (warning? . G49fe) (violation? . G4a3d) (undefined-violation? . G4af9) (syntax-violation? . G4ae0) (syntax-violation-subform . G4ae4) (syntax-violation-form . G4ae2) (syntax-violation . G3057) (simple-conditions . G4f87) (serious-condition? . G4a13) (non-continuable-violation? . G4a9b) (message-condition? . G49e7) (make-who-condition . G4a80) (make-warning . G49fc) (make-violation . G4a3b) (make-undefined-violation . G4af7) (make-syntax-violation . G4ada) (make-serious-condition . G4a11) (make-non-continuable-violation . G4a99) (make-message-condition . G49e3) (make-lexical-violation . G4ac3) (make-irritants-condition . G4a66) (make-implementation-restriction-violation . G4aae) (make-error . G4a26) (make-assertion-violation . G4a50) (lexical-violation? . G4ac5) (irritants-condition? . G4a6a) (implementation-restriction-violation? . G4ab0) (error? . G4a28) (condition-who . G4a86) (condition-predicate . G4f86) (condition-message . G49e9) (condition-irritants . G4a6c) (condition-accessor . G4f85) (condition . G4f84) (assertion-violation? . G4a52) (condition? . G4f83) (&undefined . G4e29) (&syntax . G4e28) (&lexical . G4e27) (&implementation-restriction . G4e26) (&non-continuable . G4e25) (&who . G4e24) (&irritants . G4e23) (&assertion . G4e22) (&violation . G4e21) (&error . G4e20) (&serious . G4e1f) (&warning . G4e1e) (&message . G4e1d) (&condition . G4e1c) (define-condition-type . G4e1b)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50bf '(rnrs records inspection) '(6) '() '() '() '((record? . G5030) (record-type-uid . G502f) (record-type-sealed? . G502e) (record-type-parent . G502d) (record-type-opaque? . G502c) (record-type-name . G502b) (record-type-generative? . G502a) (record-type-field-names . G5029) (record-rtd . G5028) (record-field-mutable? . G5027)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50c0 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G5037) (record-predicate . G5036) (record-mutator . G5035) (record-constructor . G5034) (record-accessor . G5033) (make-record-type-descriptor . G5032) (make-record-constructor-descriptor . G5031)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50c1 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4e19) (parent-rtd . G4e18) (nongenerative . G4e17) (opaque . G4e16) (sealed . G4e15) (protocol . G4e14) (parent . G4e13) (immutable . G4e12) (mutable . G4e11) (fields . G4e10) (record-constructor-descriptor . G4def) (record-type-descriptor . G4dee)) '() values values '#f '#f '#t '#f) (G2b81@G2a26@install-library 'G50c2 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4c37) (&no-nans-rtd . G4c35) (&no-infinities-rcd . G4c22) (&no-infinities-rtd . G4c20) (&i/o-encoding-rcd . G4c0d) (&i/o-encoding-rtd . G4c0b) (&i/o-decoding-rcd . G4bf3) (&i/o-decoding-rtd . G4bf1) (&i/o-port-rcd . G4bde) (&i/o-port-rtd . G4bdc) (&i/o-file-does-not-exist-rcd . G4bc4) (&i/o-file-does-not-exist-rtd . G4bc2) (&i/o-file-already-exists-rcd . G4baf) (&i/o-file-already-exists-rtd . G4bad) (&i/o-file-is-read-only-rcd . G4b9a) (&i/o-file-is-read-only-rtd . G4b98) (&i/o-file-protection-rcd . G4b85) (&i/o-file-protection-rtd . G4b83) (&i/o-filename-rcd . G4b70) (&i/o-filename-rtd . G4b6e) (&i/o-invalid-position-rcd . G4b56) (&i/o-invalid-position-rtd . G4b54) (&i/o-write-rcd . G4b3c) (&i/o-write-rtd . G4b3a) (&i/o-read-rcd . G4b27) (&i/o-read-rtd . G4b25) (&i/o-rcd . G4b12) (&i/o-rtd . G4b10) (&undefined-rcd . G4afd) (&undefined-rtd . G4afb) (&syntax-rcd . G4ae8) (&syntax-rtd . G4ae6) (&lexical-rcd . G4ac9) (&lexical-rtd . G4ac7) (&implementation-restriction-rcd . G4ab4) (&implementation-restriction-rtd . G4ab2) (&non-continuable-rcd . G4a9f) (&non-continuable-rtd . G4a9d) (&who-rcd . G4a8a) (&who-rtd . G4a88) (&irritants-rcd . G4a70) (&irritants-rtd . G4a6e) (&assertion-rcd . G4a56) (&assertion-rtd . G4a54) (&violation-rcd . G4a41) (&violation-rtd . G4a3f) (&error-rcd . G4a2c) (&error-rtd . G4a2a) (&serious-rcd . G4a17) (&serious-rtd . G4a15) (&warning-rcd . G4a02) (&warning-rtd . G4a00) (&message-rcd . G49ed) (&message-rtd . G49eb) (&condition-rcd . G4990) (&condition-rtd . G498e) (syntax-error . G3051) (syntax-dispatch . G2f6a) (pretty-print . G50a2) (eval-core . G50a1) (set-symbol-value! . G50a0) (symbol-value . G509f) (gensym . G509e) (void . G509d) (load . G4d38) (interaction-environment . G3063) (char-ready? . G509c) (regexp? . G509b) (read-line . G509a) (dotted-list? . G5099) (circular-list? . G5098) (proper-list? . G5097) (circular-list . G5096) (last . G5095) (last-pair . G5094) (not-pair? . G5093) (split-at! . G5092) (split-at . G5091) (list= . G5090) (list-copy . G508f) (list-tabulate . G508e) (make-list . G508d) (xcons . G508c) (tenth . G508b) (ninth . G508a) (eighth . G5089) (seventh . G5088) (sixth . G5087) (fifth . G5086) (drop-right! . G5085) (drop-right . G5084) (take-right . G5083) (take! . G5082) (drop . G5081) (take . G5080) (car+cdr . G507f) (third . G507e) (second . G507d) (first . G507c) (iota . G507b) (every . G507a) (assoc-ref . G5079) (alist-cons . G5078) (append-map . G5077) (print . G5076) (format . G5075) (standard-library-path . G5074) (file-newer? . G5073) (stat-mtime . G5072) (current-directory . G5071) (write-to-file . G5070) (file->list . G506f) (file->string . G506e) (digit->integer . G506d) (call-with-string-input-port . G506c) (call-with-string-io . G506b) (string-split . G506a) (bytevector-for-each . G5069) (string->regexp . G5068) (rxmatch . G5067) (regexp-replace-all . G5066) (hashtable-for-each . G5065) (readdir . G5064) (get-environment-variables . G5063) (get-environment-variable . G5062) (get-timeofday . G5061) (get-command-line . G5060) (sys-display . G505f) (source-info . G505e) (make-compiler-instruction . G505d) (make-instruction . G505c) (set-source-info! . G505b) (bignum? . G505a) (make-complex . G5059) (fast-equal? . G5058) (fasl-read . G5057) (fasl-write . G5056) (receive . G5055) (make-parameter . G283d) (string-upcase . G5054) (string-titlecase . G5053) (string-normalize-nfkd . G5052) (string-normalize-nfkc . G5051) (string-normalize-nfd . G5050) (string-normalize-nfc . G504f) (string-foldcase . G504e) (string-downcase . G504d) (string-ci>? . G504c) (string-ci>=? . G504b) (string-ci=? . G504a) (string-ci<? . G5049) (string-ci<=? . G5048) (char-whitespace? . G5047) (char-upper-case? . G5046) (char-title-case? . G5045) (char-numeric? . G5044) (char-lower-case? . G5043) (char-general-category . G5042) (char-upcase . G5041) (char-titlecase . G5040) (char-foldcase . G503f) (char-downcase . G503e) (char-ci>? . G503d) (char-ci>=? . G503c) (char-ci=? . G503b) (char-ci<? . G503a) (char-ci<=? . G5039) (char-alphabetic? . G5038) (make-variable-transformer . G2da5) (identifier? . G3059) (generate-temporaries . G3043) (free-identifier=? . G3045) (syntax->datum . G305d) (datum->syntax . G305b) (bound-identifier=? . G3047) (record-type-descriptor? . G5037) (record-predicate . G5036) (record-mutator . G5035) (record-constructor . G5034) (record-accessor . G5033) (make-record-type-descriptor . G5032) (make-record-constructor-descriptor . G5031) (record? . G5030) (record-type-uid . G502f) (record-type-sealed? . G502e) (record-type-parent . G502d) (record-type-opaque? . G502c) (record-type-name . G502b) (record-type-generative? . G502a) (record-type-field-names . G5029) (record-rtd . G5028) (record-field-mutable? . G5027) (delete-file . G5026) (file-exists? . G5025) (vector-sort! . G5024) (vector-sort . G5023) (list-sort . G5022) (symbol-hash . G5021) (string-ci-hash . G5020) (string-hash . G501f) (equal-hash . G501e) (hashtable-equivalence-function . G501d) (make-hashtable . G501c) (hashtable-hash-function . G501b) (make-eqv-hashtable . G501a) (make-eq-hashtable . G5019) (hashtable? . G5018) (hashtable-update! . G5017) (hashtable-size . G5016) (hashtable-set! . G5015) (hashtable-ref . G5014) (hashtable-mutable? . G5013) (hashtable-keys . G5012) (hashtable-entries . G5011) (hashtable-delete! . G5010) (hashtable-copy . G500f) (hashtable-contains? . G500e) (hashtable-clear! . G500d) (call-with-output-file . G500c) (call-with-input-file . G500b) (write-char . G500a) (write . G5009) (with-output-to-file . G5008) (with-input-from-file . G5007) (read-char . G5006) (read . G5005) (peek-char . G5004) (open-output-file . G5003) (open-input-file . G5002) (newline . G5001) (display . G5000) (close-output-port . G4fff) (close-input-port . G4ffe) (eof-object? . G4ffd) (eof-object . G4ffc) (current-error-port . G4ffb) (current-output-port . G4ffa) (current-input-port . G4ff9) (output-port? . G4ff8) (input-port? . G4ff7) (utf-8-codec . G4ff6) (utf-16-codec . G4ff5) (transcoder-error-handling-mode . G4ff4) (transcoder-eol-style . G4ff3) (transcoder-codec . G4ff2) (transcoded-port . G4ff1) (textual-port? . G4ff0) (string->bytevector . G4fef) (standard-output-port . G4fee) (standard-input-port . G4fed) (standard-error-port . G4fec) (set-port-position! . G4feb) (put-u8 . G4fea) (put-string . G4fe9) (put-datum . G4fe8) (put-char . G4fe7) (put-bytevector . G4fe6) (port? . G4fe5) (port-transcoder . G4fe4) (port-position . G4fe3) (port-has-set-port-position!? . G4fe2) (port-has-port-position? . G4fe1) (port-eof? . G4fe0) (output-port-buffer-mode . G4fdf) (open-string-output-port . G4fde) (open-string-input-port . G4fdd) (open-file-output-port . G4fdc) (open-file-input/output-port . G4fdb) (open-file-input-port . G4fda) (open-bytevector-output-port . G4fd9) (open-bytevector-input-port . G4fd8) (native-transcoder . G4fd7) (native-eol-style . G4fd6) (make-transcoder . G4fd5) (latin-1-codec . G4fd4) (make-i/o-write-error . G4b36) (make-i/o-read-error . G4b21) (make-i/o-port-error . G4bd4) (make-i/o-invalid-position-error . G4b4c) (make-i/o-filename-error . G4b66) (make-i/o-file-protection-error . G4b7f) (make-i/o-file-is-read-only-error . G4b94) (make-i/o-file-does-not-exist-error . G4bbe) (make-i/o-file-already-exists-error . G4ba9) (make-i/o-error . G4b0c) (make-i/o-encoding-error . G4c03) (make-i/o-decoding-error . G4bed) (make-custom-textual-output-port . G4fd3) (make-custom-textual-input/output-port . G4fd2) (make-custom-textual-input-port . G4fd1) (make-custom-binary-output-port . G4fd0) (make-custom-binary-input/output-port . G4fcf) (make-custom-binary-input-port . G4fce) (make-bytevector . G4fcd) (lookahead-u8 . G4fcc) (lookahead-char . G4fcb) (i/o-write-error? . G4b38) (i/o-read-error? . G4b23) (i/o-port-error? . G4bd8) (i/o-invalid-position-error? . G4b50) (i/o-filename-error? . G4b6a) (i/o-file-protection-error? . G4b81) (i/o-file-is-read-only-error? . G4b96) (i/o-file-does-not-exist-error? . G4bc0) (i/o-file-already-exists-error? . G4bab) (i/o-error? . G4b0e) (i/o-error-port . G4bda) (i/o-error-filename . G4b6c) (i/o-encoding-error? . G4c07) (i/o-encoding-error-char . G4c09) (i/o-decoding-error? . G4bef) (get-u8 . G4fca) (get-string-n! . G4fc9) (get-string-n . G4fc8) (get-string-all . G4fc7) (get-line . G4fc6) (get-datum . G4fc5) (get-char . G4fc4) (get-bytevector-some . G4fc3) (get-bytevector-n! . G4fc2) (get-bytevector-n . G4fc1) (get-bytevector-all . G4fc0) (flush-output-port . G4fbf) (close-port . G4fbe) (scheme-report-environment . G3031) (quotient . G4fbd) (null-environment . G302f) (remainder . G4fbc) (modulo . G4fbb) (inexact->exact . G4fba) (force . G4fb9) (exact->inexact . G4fb8) (make-promise . G4fb7) (exit . G4fb6) (command-line . G4d32) (string-fill! . G4fb5) (string-set! . G4fb4) (set-cdr! . G4fb3) (set-car! . G4fb2) (remove . G4fb1) (remv . G4fb0) (remp . G4faf) (remq . G4fae) (partition . G4fad) (memv . G4fac) (memq . G4fab) (memp . G4faa) (member . G4fa9) (exists . G4fa8) (for-all . G4fa7) (fold-right . G4fa6) (fold-left . G4fa5) (find . G4fa4) (filter . G4fa3) (cons* . G4fa2) (assv . G4fa1) (assq . G4fa0) (assp . G4f9f) (assoc . G4f9e) (call-with-string-output-port . G4f9d) (call-with-port . G4f9c) (call-with-bytevector-output-port . G4f9b) (bytevector->string . G4f9a) (buffer-mode? . G4f99) (binary-port? . G4f98) (with-exception-handler . G4f97) (raise-continuable . G4f96) (raise . G4f95) (eval . G3035) (environment . G302d) (make-enumeration . G4f94) (enum-set=? . G4f93) (enum-set-universe . G4f92) (enum-set-union . G4f91) (enum-set-subset? . G4f90) (enum-set-projection . G4f8f) (enum-set-member? . G4f8e) (enum-set-intersection . G4f8d) (enum-set-indexer . G4f8c) (enum-set-difference . G4f8b) (enum-set-constructor . G4f8a) (enum-set-complement . G4f89) (enum-set->list . G4f88) (who-condition? . G4a84) (warning? . G49fe) (violation? . G4a3d) (undefined-violation? . G4af9) (syntax-violation? . G4ae0) (syntax-violation-subform . G4ae4) (syntax-violation-form . G4ae2) (syntax-violation . G3057) (simple-conditions . G4f87) (serious-condition? . G4a13) (non-continuable-violation? . G4a9b) (message-condition? . G49e7) (make-who-condition . G4a80) (make-warning . G49fc) (make-violation . G4a3b) (make-undefined-violation . G4af7) (make-syntax-violation . G4ada) (make-serious-condition . G4a11) (make-non-continuable-violation . G4a99) (make-message-condition . G49e3) (make-lexical-violation . G4ac3) (make-irritants-condition . G4a66) (make-implementation-restriction-violation . G4aae) (make-error . G4a26) (make-assertion-violation . G4a50) (lexical-violation? . G4ac5) (irritants-condition? . G4a6a) (implementation-restriction-violation? . G4ab0) (error? . G4a28) (condition-who . G4a86) (condition-predicate . G4f86) (condition-message . G49e9) (condition-irritants . G4a6c) (condition-accessor . G4f85) (condition . G4f84) (assertion-violation? . G4a52) (condition? . G4f83) (utf32->string . G4f82) (utf16->string . G4f81) (utf8->string . G4f80) (uint-list->bytevector . G4f7f) (u8-list->bytevector . G4f7e) (string->utf8 . G4f7d) (string->utf32 . G4f7c) (string->utf16 . G4f7b) (sint-list->bytevector . G4f7a) (native-endianness . G4f79) (bytevector? . G4f78) (bytevector=? . G4f77) (bytevector-uint-set! . G4f76) (bytevector-uint-ref . G4f75) (bytevector-u8-set! . G4f74) (bytevector-u8-ref . G4f73) (bytevector-u64-set! . G4f72) (bytevector-u64-ref . G4f71) (bytevector-u64-native-set! . G4f70) (bytevector-u64-native-ref . G4f6f) (bytevector-u32-set! . G4f6e) (bytevector-u32-ref . G4f6d) (bytevector-u32-native-set! . G4f6c) (bytevector-u32-native-ref . G4f6b) (bytevector-u16-set! . G4f6a) (bytevector-u16-ref . G4f69) (bytevector-u16-native-set! . G4f68) (bytevector-u16-native-ref . G4f67) (bytevector-sint-set! . G4f66) (bytevector-sint-ref . G4f65) (bytevector-s8-set! . G4f64) (bytevector-s8-ref . G4f63) (bytevector-s64-set! . G4f62) (bytevector-s64-ref . G4f61) (bytevector-s64-native-set! . G4f60) (bytevector-s64-native-ref . G4f5f) (bytevector-s32-set! . G4f5e) (bytevector-s32-ref . G4f5d) (bytevector-s32-native-set! . G4f5c) (bytevector-s32-native-ref . G4f5b) (bytevector-s16-set! . G4f5a) (bytevector-s16-ref . G4f59) (bytevector-s16-native-set! . G4f58) (bytevector-s16-native-ref . G4f57) (bytevector-length . G4f56) (bytevector-ieee-single-ref . G4f55) (bytevector-ieee-single-set! . G4f54) (bytevector-ieee-single-native-set! . G4f53) (bytevector-ieee-single-native-ref . G4f52) (bytevector-ieee-double-set! . G4f51) (bytevector-ieee-double-ref . G4f50) (bytevector-ieee-double-native-set! . G4f4f) (bytevector-ieee-double-native-ref . G4f4e) (bytevector-fill! . G4f4d) (bytevector-copy! . G4f4c) (bytevector-copy . G4f4b) (bytevector->uint-list . G4f4a) (bytevector->u8-list . G4f49) (bytevector->sint-list . G4f48) (no-nans-violation? . G4c33) (no-infinities-violation? . G4c1e) (make-no-nans-violation . G4c31) (make-no-infinities-violation . G4c1c) (real->flonum . G4f47) (flzero? . G4f46) (fltruncate . G4f45) (fltan . G4f44) (flsqrt . G4f43) (flsin . G4f42) (flround . G4f41) (flpositive? . G4f40) (flonum? . G4f3f) (flodd? . G4f3e) (flnumerator . G4f3d) (flnegative? . G4f3c) (flnan? . G4f3b) (flmod0 . G4f3a) (flmod . G4f39) (flmin . G4f38) (flmax . G4f37) (fllog . G4f36) (flinteger? . G4f35) (flinfinite? . G4f34) (flfloor . G4f33) (flfinite? . G4f32) (flexpt . G4f31) (flexp . G4f30) (fleven? . G4f2f) (fldiv0-and-mod0 . G4f2e) (fldiv0 . G4f2d) (fldiv-and-mod . G4f2c) (fldiv . G4f2b) (fldenominator . G4f2a) (flcos . G4f29) (flceiling . G4f28) (flatan . G4f27) (flasin . G4f26) (flacos . G4f25) (flabs . G4f24) (fl>? . G4f23) (fl>=? . G4f22) (fl=? . G4f21) (fl<? . G4f20) (fl<=? . G4f1f) (fl/ . G4f1e) (fl- . G4f1d) (fl+ . G4f1c) (fl* . G4f1b) (fixnum->flonum . G4f1a) (fxzero? . G4f19) (fxxor . G4f18) (fxrotate-bit-field . G4f17) (fxreverse-bit-field . G4f16) (fxpositive? . G4f15) (fxodd? . G4f14) (fxnot . G4f13) (fxnegative? . G4f12) (fxmod0 . G4f11) (fxmod . G4f10) (fxmin . G4f0f) (fxmax . G4f0e) (fxlength . G4f0d) (fxior . G4f0c) (fxif . G4f0b) (fxfirst-bit-set . G4f0a) (fxeven? . G4f09) (fxdiv0-and-mod0 . G4f08) (fxdiv0 . G4f07) (fxdiv-and-mod . G4f06) (fxdiv . G4f05) (fxcopy-bit-field . G4f04) (fxcopy-bit . G4f03) (fxbit-set? . G4f02) (fxbit-field . G4f01) (fxbit-count . G4f00) (fxarithmetic-shift-right . G4eff) (fxarithmetic-shift-left . G4efe) (fxarithmetic-shift . G4efd) (fxand . G4efc) (fx>? . G4efb) (fx>=? . G4efa) (fx=? . G4ef9) (fx<? . G4ef8) (fx<=? . G4ef7) (fx-/carry . G4ef6) (fx- . G4ef5) (fx+/carry . G4ef4) (fx+ . G4ef3) (fx*/carry . G4ef2) (fx* . G4ef1) (greatest-fixnum . G4ef0) (least-fixnum . G4eef) (fixnum-width . G4eee) (fixnum? . G4eed) (bitwise-rotate-bit-field . G4eec) (bitwise-reverse-bit-field . G4eeb) (bitwise-length . G4eea) (bitwise-if . G4ee9) (bitwise-first-bit-set . G4ee8) (bitwise-copy-bit-field . G4ee7) (bitwise-copy-bit . G4ee6) (bitwise-bit-set? . G4ee5) (bitwise-bit-field . G4ee4) (bitwise-bit-count . G4ee3) (bitwise-xor . G4ee2) (bitwise-ior . G4ee1) (bitwise-and . G4ee0) (bitwise-not . G4edf) (bitwise-arithmetic-shift-right . G4ede) (bitwise-arithmetic-shift-left . G4edd) (bitwise-arithmetic-shift . G4edc) (zero? . G4edb) (vector? . G4eda) (vector-set! . G4ed9) (vector-ref . G4ed8) (vector-map . G4ed7) (vector-length . G4ed6) (vector-for-each . G4ed5) (vector-fill! . G4ed4) (vector->list . G4ed3) (vector . G4ed2) (values . G4ed1) (truncate . G4ed0) (tan . G4ecf) (symbol? . G4ece) (symbol=? . G4ecd) (symbol->string . G4ecc) (substring . G4ecb) (string? . G4eca) (string>? . G4ec9) (string>=? . G4ec8) (string=? . G4ec7) (string<? . G4ec6) (string<=? . G4ec5) (string-ref . G4ec4) (string-length . G4ec3) (string-for-each . G4ec2) (string-copy . G4ec1) (string-append . G4ec0) (string->symbol . G4ebf) (string->number . G4ebe) (string->list . G4ebd) (string . G4ebc) (sqrt . G4ebb) (sin . G4eba) (round . G4eb9) (reverse . G4eb8) (real? . G4eb7) (real-valued? . G4eb6) (real-part . G4eb5) (rationalize . G4eb4) (rational? . G4eb3) (rational-valued? . G4eb2) (procedure? . G4eb1) (positive? . G4eb0) (pair? . G4eaf) (odd? . G4eae) (numerator . G4ead) (number? . G4eac) (number->string . G4eab) (null? . G4eaa) (not . G4ea9) (negative? . G4ea8) (nan? . G4ea7) (min . G4ea6) (max . G4ea5) (map . G4ea4) (make-vector . G4ea3) (make-string . G4ea2) (make-rectangular . G4ea1) (make-polar . G4ea0) (magnitude . G4e9f) (log . G4e9e) (list? . G4e9d) (list-tail . G4e9c) (list-ref . G4e9b) (list->vector . G4e9a) (list->string . G4e99) (list . G4e98) (length . G4e97) (lcm . G4e96) (integer? . G4e95) (integer-valued? . G4e94) (integer->char . G4e93) (infinite? . G4e92) (inexact? . G4e91) (inexact . G4e90) (imag-part . G4e8f) (gcd . G4e8e) (for-each . G4e8d) (floor . G4e8c) (finite? . G4e8b) (expt . G4e8a) (exp . G4e89) (exact? . G4e88) (exact-integer-sqrt . G4e87) (exact . G4e86) (even? . G4e85) (error . G4e84) (eqv? . G4e83) (equal? . G4e82) (eq? . G4e81) (dynamic-wind . G4e80) (div0-and-mod0 . G4e7f) (mod0 . G4e7e) (div0 . G4e7d) (div-and-mod . G4e7c) (mod . G4e7b) (div . G4e7a) (denominator . G4e79) (cos . G4e78) (cons . G4e77) (complex? . G4e76) (char? . G4e75) (char>? . G4e74) (char>=? . G4e73) (char=? . G4e72) (char<? . G4e71) (char<=? . G4e70) (char->integer . G4e6f) (ceiling . G4e6e) (call-with-values . G4e6d) (call/cc . G4e6c) (call-with-current-continuation . G4e6b) (cddddr . G4e6a) (cdddar . G4e69) (cddadr . G4e68) (cddaar . G4e67) (cdaddr . G4e66) (cdadar . G4e65) (cdaadr . G4e64) (cdaaar . G4e63) (cadddr . G4e62) (caddar . G4e61) (cadadr . G4e60) (cadaar . G4e5f) (caaddr . G4e5e) (caadar . G4e5d) (caaadr . G4e5c) (caaaar . G4e5b) (cdddr . G4e5a) (cddar . G4e59) (cdadr . G4e58) (cdaar . G4e57) (caddr . G4e56) (cadar . G4e55) (caadr . G4e54) (caaar . G4e53) (cddr . G4e52) (cdar . G4e51) (cadr . G4e50) (caar . G4e4f) (cdr . G4e4e) (car . G4e4d) (boolean? . G4e4c) (boolean=? . G4e4b) (atan . G4e4a) (assertion-violation . G4e49) (asin . G4e48) (apply . G4e47) (append . G4e46) (angle . G4e45) (acos . G4e44) (abs . G4e43) (/ . G4e42) (* . G4e41) (- . G4e40) (+ . G4e3f) (>= . G4e3e) (> . G4e3d) (= . G4e3c) (<= . G4e3b) (< . G4e3a) (library . G4e39) (export . G4e38) (&no-nans . G4e37) (&no-infinities . G4e36) (&i/o-encoding . G4e35) (&i/o-decoding . G4e34) (&i/o-port . G4e33) (&i/o-file-does-not-exist . G4e32) (&i/o-file-already-exists . G4e31) (&i/o-file-is-read-only . G4e30) (&i/o-file-protection . G4e2f) (&i/o-filename . G4e2e) (&i/o-invalid-position . G4e2d) (&i/o-write . G4e2c) (&i/o-read . G4e2b) (&i/o . G4e2a) (&undefined . G4e29) (&syntax . G4e28) (&lexical . G4e27) (&implementation-restriction . G4e26) (&non-continuable . G4e25) (&who . G4e24) (&irritants . G4e23) (&assertion . G4e22) (&violation . G4e21) (&error . G4e20) (&serious . G4e1f) (&warning . G4e1e) (&message . G4e1d) (&condition . G4e1c) (define-condition-type . G4e1b) (define-enumeration . G4e1a) (define-record-type . G4e19) (parent-rtd . G4e18) (nongenerative . G4e17) (opaque . G4e16) (sealed . G4e15) (protocol . G4e14) (parent . G4e13) (immutable . G4e12) (mutable . G4e11) (fields . G4e10) (error-handling-mode . G4e0f) (file-options . G4e0e) (buffer-mode . G4e0d) (eol-style . G4e0c) (guard . G4e0b) (trace-define . G4e0a) (trace-lambda . G4e09) (unsyntax-splicing . G4e08) (unsyntax . G4e07) (unquote-splicing . G4e06) (unquote . G4e05) (_ . G4e04) (else . G4e03) (=> . G4e02) (... . G4e01) (assert . G4e00) (endianness . G4dff) (delay . G4dfe) (time . G4dfd) (do . G4dfc) (cond . G4dfb) (let* . G4dfa) (let . G4df9) (let*-values . G4df8) (let-values . G4df7) (identifier-syntax . G4df6) (with-syntax . G4df5) (quasisyntax . G4df4) (quasiquote . G4df3) (syntax-rules . G4df2) (include . G4df1) (define-struct . G4df0) (record-constructor-descriptor . G4def) (record-type-descriptor . G4dee) (case . G4ded) (parameterize . G4dec) (unless . G4deb) (when . G4dea) (or . G4de9) (and . G4de8) (if . G4de7) (letrec* . G4de6) (letrec . G4de5) (type-descriptor . G4de4) (case-lambda . G4de3) (lambda . G4de2) (syntax . G4de1) (syntax-case . G4de0) (quote . G4ddf) (foreign-call . G4dde) (letrec-syntax . G4ddd) (let-syntax . G4ddc) (set! . G4ddb) (import . G4dda) (begin . G4dd9) (module . G4dd8) (define-syntax . G4dd7) (define . G4dd6)) '((G4c37 core-prim . &no-nans-rcd) (G4c35 core-prim . &no-nans-rtd) (G4c22 core-prim . &no-infinities-rcd) (G4c20 core-prim . &no-infinities-rtd) (G4c0d core-prim . &i/o-encoding-rcd) (G4c0b core-prim . &i/o-encoding-rtd) (G4bf3 core-prim . &i/o-decoding-rcd) (G4bf1 core-prim . &i/o-decoding-rtd) (G4bde core-prim . &i/o-port-rcd) (G4bdc core-prim . &i/o-port-rtd) (G4bc4 core-prim . &i/o-file-does-not-exist-rcd) (G4bc2 core-prim . &i/o-file-does-not-exist-rtd) (G4baf core-prim . &i/o-file-already-exists-rcd) (G4bad core-prim . &i/o-file-already-exists-rtd) (G4b9a core-prim . &i/o-file-is-read-only-rcd) (G4b98 core-prim . &i/o-file-is-read-only-rtd) (G4b85 core-prim . &i/o-file-protection-rcd) (G4b83 core-prim . &i/o-file-protection-rtd) (G4b70 core-prim . &i/o-filename-rcd) (G4b6e core-prim . &i/o-filename-rtd) (G4b56 core-prim . &i/o-invalid-position-rcd) (G4b54 core-prim . &i/o-invalid-position-rtd) (G4b3c core-prim . &i/o-write-rcd) (G4b3a core-prim . &i/o-write-rtd) (G4b27 core-prim . &i/o-read-rcd) (G4b25 core-prim . &i/o-read-rtd) (G4b12 core-prim . &i/o-rcd) (G4b10 core-prim . &i/o-rtd) (G4afd core-prim . &undefined-rcd) (G4afb core-prim . &undefined-rtd) (G4ae8 core-prim . &syntax-rcd) (G4ae6 core-prim . &syntax-rtd) (G4ac9 core-prim . &lexical-rcd) (G4ac7 core-prim . &lexical-rtd) (G4ab4 core-prim . &implementation-restriction-rcd) (G4ab2 core-prim . &implementation-restriction-rtd) (G4a9f core-prim . &non-continuable-rcd) (G4a9d core-prim . &non-continuable-rtd) (G4a8a core-prim . &who-rcd) (G4a88 core-prim . &who-rtd) (G4a70 core-prim . &irritants-rcd) (G4a6e core-prim . &irritants-rtd) (G4a56 core-prim . &assertion-rcd) (G4a54 core-prim . &assertion-rtd) (G4a41 core-prim . &violation-rcd) (G4a3f core-prim . &violation-rtd) (G4a2c core-prim . &error-rcd) (G4a2a core-prim . &error-rtd) (G4a17 core-prim . &serious-rcd) (G4a15 core-prim . &serious-rtd) (G4a02 core-prim . &warning-rcd) (G4a00 core-prim . &warning-rtd) (G49ed core-prim . &message-rcd) (G49eb core-prim . &message-rtd) (G4990 core-prim . &condition-rcd) (G498e core-prim . &condition-rtd) (G3051 core-prim . syntax-error) (G2f6a core-prim . syntax-dispatch) (G50a2 core-prim . pretty-print) (G50a1 core-prim . eval-core) (G50a0 core-prim . set-symbol-value!) (G509f core-prim . symbol-value) (G509e core-prim . gensym) (G509d core-prim . void) (G4d38 core-prim . load) (G3063 core-prim . interaction-environment) (G509c core-prim . char-ready?) (G509b core-prim . regexp?) (G509a core-prim . read-line) (G5099 core-prim . dotted-list?) (G5098 core-prim . circular-list?) (G5097 core-prim . proper-list?) (G5096 core-prim . circular-list) (G5095 core-prim . last) (G5094 core-prim . last-pair) (G5093 core-prim . not-pair?) (G5092 core-prim . split-at!) (G5091 core-prim . split-at) (G5090 core-prim . list=) (G508f core-prim . list-copy) (G508e core-prim . list-tabulate) (G508d core-prim . make-list) (G508c core-prim . xcons) (G508b core-prim . tenth) (G508a core-prim . ninth) (G5089 core-prim . eighth) (G5088 core-prim . seventh) (G5087 core-prim . sixth) (G5086 core-prim . fifth) (G5085 core-prim . drop-right!) (G5084 core-prim . drop-right) (G5083 core-prim . take-right) (G5082 core-prim . take!) (G5081 core-prim . drop) (G5080 core-prim . take) (G507f core-prim . car+cdr) (G507e core-prim . third) (G507d core-prim . second) (G507c core-prim . first) (G507b core-prim . iota) (G507a core-prim . every) (G5079 core-prim . assoc-ref) (G5078 core-prim . alist-cons) (G5077 core-prim . append-map) (G5076 core-prim . print) (G5075 core-prim . format) (G5074 core-prim . standard-library-path) (G5073 core-prim . file-newer?) (G5072 core-prim . stat-mtime) (G5071 core-prim . current-directory) (G5070 core-prim . write-to-file) (G506f core-prim . file->list) (G506e core-prim . file->string) (G506d core-prim . digit->integer) (G506c core-prim . call-with-string-input-port) (G506b core-prim . call-with-string-io) (G506a core-prim . string-split) (G5069 core-prim . bytevector-for-each) (G5068 core-prim . string->regexp) (G5067 core-prim . rxmatch) (G5066 core-prim . regexp-replace-all) (G5065 core-prim . hashtable-for-each) (G5064 core-prim . readdir) (G5063 core-prim . get-environment-variables) (G5062 core-prim . get-environment-variable) (G5061 core-prim . get-timeofday) (G5060 core-prim . get-command-line) (G505f core-prim . sys-display) (G505e core-prim . source-info) (G505d core-prim . make-compiler-instruction) (G505c core-prim . make-instruction) (G505b core-prim . set-source-info!) (G505a core-prim . bignum?) (G5059 core-prim . make-complex) (G5058 core-prim . fast-equal?) (G5057 core-prim . fasl-read) (G5056 core-prim . fasl-write) (G5055 core-prim . receive) (G283d core-prim . make-parameter) (G5054 core-prim . string-upcase) (G5053 core-prim . string-titlecase) (G5052 core-prim . string-normalize-nfkd) (G5051 core-prim . string-normalize-nfkc) (G5050 core-prim . string-normalize-nfd) (G504f core-prim . string-normalize-nfc) (G504e core-prim . string-foldcase) (G504d core-prim . string-downcase) (G504c core-prim . string-ci>?) (G504b core-prim . string-ci>=?) (G504a core-prim . string-ci=?) (G5049 core-prim . string-ci<?) (G5048 core-prim . string-ci<=?) (G5047 core-prim . char-whitespace?) (G5046 core-prim . char-upper-case?) (G5045 core-prim . char-title-case?) (G5044 core-prim . char-numeric?) (G5043 core-prim . char-lower-case?) (G5042 core-prim . char-general-category) (G5041 core-prim . char-upcase) (G5040 core-prim . char-titlecase) (G503f core-prim . char-foldcase) (G503e core-prim . char-downcase) (G503d core-prim . char-ci>?) (G503c core-prim . char-ci>=?) (G503b core-prim . char-ci=?) (G503a core-prim . char-ci<?) (G5039 core-prim . char-ci<=?) (G5038 core-prim . char-alphabetic?) (G2da5 core-prim . make-variable-transformer) (G3059 core-prim . identifier?) (G3043 core-prim . generate-temporaries) (G3045 core-prim . free-identifier=?) (G305d core-prim . syntax->datum) (G305b core-prim . datum->syntax) (G3047 core-prim . bound-identifier=?) (G5037 core-prim . record-type-descriptor?) (G5036 core-prim . record-predicate) (G5035 core-prim . record-mutator) (G5034 core-prim . record-constructor) (G5033 core-prim . record-accessor) (G5032 core-prim . make-record-type-descriptor) (G5031 core-prim . make-record-constructor-descriptor) (G5030 core-prim . record?) (G502f core-prim . record-type-uid) (G502e core-prim . record-type-sealed?) (G502d core-prim . record-type-parent) (G502c core-prim . record-type-opaque?) (G502b core-prim . record-type-name) (G502a core-prim . record-type-generative?) (G5029 core-prim . record-type-field-names) (G5028 core-prim . record-rtd) (G5027 core-prim . record-field-mutable?) (G5026 core-prim . delete-file) (G5025 core-prim . file-exists?) (G5024 core-prim . vector-sort!) (G5023 core-prim . vector-sort) (G5022 core-prim . list-sort) (G5021 core-prim . symbol-hash) (G5020 core-prim . string-ci-hash) (G501f core-prim . string-hash) (G501e core-prim . equal-hash) (G501d core-prim . hashtable-equivalence-function) (G501c core-prim . make-hashtable) (G501b core-prim . hashtable-hash-function) (G501a core-prim . make-eqv-hashtable) (G5019 core-prim . make-eq-hashtable) (G5018 core-prim . hashtable?) (G5017 core-prim . hashtable-update!) (G5016 core-prim . hashtable-size) (G5015 core-prim . hashtable-set!) (G5014 core-prim . hashtable-ref) (G5013 core-prim . hashtable-mutable?) (G5012 core-prim . hashtable-keys) (G5011 core-prim . hashtable-entries) (G5010 core-prim . hashtable-delete!) (G500f core-prim . hashtable-copy) (G500e core-prim . hashtable-contains?) (G500d core-prim . hashtable-clear!) (G500c core-prim . call-with-output-file) (G500b core-prim . call-with-input-file) (G500a core-prim . write-char) (G5009 core-prim . write) (G5008 core-prim . with-output-to-file) (G5007 core-prim . with-input-from-file) (G5006 core-prim . read-char) (G5005 core-prim . read) (G5004 core-prim . peek-char) (G5003 core-prim . open-output-file) (G5002 core-prim . open-input-file) (G5001 core-prim . newline) (G5000 core-prim . display) (G4fff core-prim . close-output-port) (G4ffe core-prim . close-input-port) (G4ffd core-prim . eof-object?) (G4ffc core-prim . eof-object) (G4ffb core-prim . current-error-port) (G4ffa core-prim . current-output-port) (G4ff9 core-prim . current-input-port) (G4ff8 core-prim . output-port?) (G4ff7 core-prim . input-port?) (G4ff6 core-prim . utf-8-codec) (G4ff5 core-prim . utf-16-codec) (G4ff4 core-prim . transcoder-error-handling-mode) (G4ff3 core-prim . transcoder-eol-style) (G4ff2 core-prim . transcoder-codec) (G4ff1 core-prim . transcoded-port) (G4ff0 core-prim . textual-port?) (G4fef core-prim . string->bytevector) (G4fee core-prim . standard-output-port) (G4fed core-prim . standard-input-port) (G4fec core-prim . standard-error-port) (G4feb core-prim . set-port-position!) (G4fea core-prim . put-u8) (G4fe9 core-prim . put-string) (G4fe8 core-prim . put-datum) (G4fe7 core-prim . put-char) (G4fe6 core-prim . put-bytevector) (G4fe5 core-prim . port?) (G4fe4 core-prim . port-transcoder) (G4fe3 core-prim . port-position) (G4fe2 core-prim . port-has-set-port-position!?) (G4fe1 core-prim . port-has-port-position?) (G4fe0 core-prim . port-eof?) (G4fdf core-prim . output-port-buffer-mode) (G4fde core-prim . open-string-output-port) (G4fdd core-prim . open-string-input-port) (G4fdc core-prim . open-file-output-port) (G4fdb core-prim . open-file-input/output-port) (G4fda core-prim . open-file-input-port) (G4fd9 core-prim . open-bytevector-output-port) (G4fd8 core-prim . open-bytevector-input-port) (G4fd7 core-prim . native-transcoder) (G4fd6 core-prim . native-eol-style) (G4fd5 core-prim . make-transcoder) (G4fd4 core-prim . latin-1-codec) (G4b36 core-prim . make-i/o-write-error) (G4b21 core-prim . make-i/o-read-error) (G4bd4 core-prim . make-i/o-port-error) (G4b4c core-prim . make-i/o-invalid-position-error) (G4b66 core-prim . make-i/o-filename-error) (G4b7f core-prim . make-i/o-file-protection-error) (G4b94 core-prim . make-i/o-file-is-read-only-error) (G4bbe core-prim . make-i/o-file-does-not-exist-error) (G4ba9 core-prim . make-i/o-file-already-exists-error) (G4b0c core-prim . make-i/o-error) (G4c03 core-prim . make-i/o-encoding-error) (G4bed core-prim . make-i/o-decoding-error) (G4fd3 core-prim . make-custom-textual-output-port) (G4fd2 core-prim . make-custom-textual-input/output-port) (G4fd1 core-prim . make-custom-textual-input-port) (G4fd0 core-prim . make-custom-binary-output-port) (G4fcf core-prim . make-custom-binary-input/output-port) (G4fce core-prim . make-custom-binary-input-port) (G4fcd core-prim . make-bytevector) (G4fcc core-prim . lookahead-u8) (G4fcb core-prim . lookahead-char) (G4b38 core-prim . i/o-write-error?) (G4b23 core-prim . i/o-read-error?) (G4bd8 core-prim . i/o-port-error?) (G4b50 core-prim . i/o-invalid-position-error?) (G4b6a core-prim . i/o-filename-error?) (G4b81 core-prim . i/o-file-protection-error?) (G4b96 core-prim . i/o-file-is-read-only-error?) (G4bc0 core-prim . i/o-file-does-not-exist-error?) (G4bab core-prim . i/o-file-already-exists-error?) (G4b0e core-prim . i/o-error?) (G4bda core-prim . i/o-error-port) (G4b6c core-prim . i/o-error-filename) (G4c07 core-prim . i/o-encoding-error?) (G4c09 core-prim . i/o-encoding-error-char) (G4bef core-prim . i/o-decoding-error?) (G4fca core-prim . get-u8) (G4fc9 core-prim . get-string-n!) (G4fc8 core-prim . get-string-n) (G4fc7 core-prim . get-string-all) (G4fc6 core-prim . get-line) (G4fc5 core-prim . get-datum) (G4fc4 core-prim . get-char) (G4fc3 core-prim . get-bytevector-some) (G4fc2 core-prim . get-bytevector-n!) (G4fc1 core-prim . get-bytevector-n) (G4fc0 core-prim . get-bytevector-all) (G4fbf core-prim . flush-output-port) (G4fbe core-prim . close-port) (G3031 core-prim . scheme-report-environment) (G4fbd core-prim . quotient) (G302f core-prim . null-environment) (G4fbc core-prim . remainder) (G4fbb core-prim . modulo) (G4fba core-prim . inexact->exact) (G4fb9 core-prim . force) (G4fb8 core-prim . exact->inexact) (G4fb7 core-prim . make-promise) (G4fb6 core-prim . exit) (G4d32 core-prim . command-line) (G4fb5 core-prim . string-fill!) (G4fb4 core-prim . string-set!) (G4fb3 core-prim . set-cdr!) (G4fb2 core-prim . set-car!) (G4fb1 core-prim . remove) (G4fb0 core-prim . remv) (G4faf core-prim . remp) (G4fae core-prim . remq) (G4fad core-prim . partition) (G4fac core-prim . memv) (G4fab core-prim . memq) (G4faa core-prim . memp) (G4fa9 core-prim . member) (G4fa8 core-prim . exists) (G4fa7 core-prim . for-all) (G4fa6 core-prim . fold-right) (G4fa5 core-prim . fold-left) (G4fa4 core-prim . find) (G4fa3 core-prim . filter) (G4fa2 core-prim . cons*) (G4fa1 core-prim . assv) (G4fa0 core-prim . assq) (G4f9f core-prim . assp) (G4f9e core-prim . assoc) (G4f9d core-prim . call-with-string-output-port) (G4f9c core-prim . call-with-port) (G4f9b core-prim . call-with-bytevector-output-port) (G4f9a core-prim . bytevector->string) (G4f99 core-prim . buffer-mode?) (G4f98 core-prim . binary-port?) (G4f97 core-prim . with-exception-handler) (G4f96 core-prim . raise-continuable) (G4f95 core-prim . raise) (G3035 core-prim . eval) (G302d core-prim . environment) (G4f94 core-prim . make-enumeration) (G4f93 core-prim . enum-set=?) (G4f92 core-prim . enum-set-universe) (G4f91 core-prim . enum-set-union) (G4f90 core-prim . enum-set-subset?) (G4f8f core-prim . enum-set-projection) (G4f8e core-prim . enum-set-member?) (G4f8d core-prim . enum-set-intersection) (G4f8c core-prim . enum-set-indexer) (G4f8b core-prim . enum-set-difference) (G4f8a core-prim . enum-set-constructor) (G4f89 core-prim . enum-set-complement) (G4f88 core-prim . enum-set->list) (G4a84 core-prim . who-condition?) (G49fe core-prim . warning?) (G4a3d core-prim . violation?) (G4af9 core-prim . undefined-violation?) (G4ae0 core-prim . syntax-violation?) (G4ae4 core-prim . syntax-violation-subform) (G4ae2 core-prim . syntax-violation-form) (G3057 core-prim . syntax-violation) (G4f87 core-prim . simple-conditions) (G4a13 core-prim . serious-condition?) (G4a9b core-prim . non-continuable-violation?) (G49e7 core-prim . message-condition?) (G4a80 core-prim . make-who-condition) (G49fc core-prim . make-warning) (G4a3b core-prim . make-violation) (G4af7 core-prim . make-undefined-violation) (G4ada core-prim . make-syntax-violation) (G4a11 core-prim . make-serious-condition) (G4a99 core-prim . make-non-continuable-violation) (G49e3 core-prim . make-message-condition) (G4ac3 core-prim . make-lexical-violation) (G4a66 core-prim . make-irritants-condition) (G4aae core-prim . make-implementation-restriction-violation) (G4a26 core-prim . make-error) (G4a50 core-prim . make-assertion-violation) (G4ac5 core-prim . lexical-violation?) (G4a6a core-prim . irritants-condition?) (G4ab0 core-prim . implementation-restriction-violation?) (G4a28 core-prim . error?) (G4a86 core-prim . condition-who) (G4f86 core-prim . condition-predicate) (G49e9 core-prim . condition-message) (G4a6c core-prim . condition-irritants) (G4f85 core-prim . condition-accessor) (G4f84 core-prim . condition) (G4a52 core-prim . assertion-violation?) (G4f83 core-prim . condition?) (G4f82 core-prim . utf32->string) (G4f81 core-prim . utf16->string) (G4f80 core-prim . utf8->string) (G4f7f core-prim . uint-list->bytevector) (G4f7e core-prim . u8-list->bytevector) (G4f7d core-prim . string->utf8) (G4f7c core-prim . string->utf32) (G4f7b core-prim . string->utf16) (G4f7a core-prim . sint-list->bytevector) (G4f79 core-prim . native-endianness) (G4f78 core-prim . bytevector?) (G4f77 core-prim . bytevector=?) (G4f76 core-prim . bytevector-uint-set!) (G4f75 core-prim . bytevector-uint-ref) (G4f74 core-prim . bytevector-u8-set!) (G4f73 core-prim . bytevector-u8-ref) (G4f72 core-prim . bytevector-u64-set!) (G4f71 core-prim . bytevector-u64-ref) (G4f70 core-prim . bytevector-u64-native-set!) (G4f6f core-prim . bytevector-u64-native-ref) (G4f6e core-prim . bytevector-u32-set!) (G4f6d core-prim . bytevector-u32-ref) (G4f6c core-prim . bytevector-u32-native-set!) (G4f6b core-prim . bytevector-u32-native-ref) (G4f6a core-prim . bytevector-u16-set!) (G4f69 core-prim . bytevector-u16-ref) (G4f68 core-prim . bytevector-u16-native-set!) (G4f67 core-prim . bytevector-u16-native-ref) (G4f66 core-prim . bytevector-sint-set!) (G4f65 core-prim . bytevector-sint-ref) (G4f64 core-prim . bytevector-s8-set!) (G4f63 core-prim . bytevector-s8-ref) (G4f62 core-prim . bytevector-s64-set!) (G4f61 core-prim . bytevector-s64-ref) (G4f60 core-prim . bytevector-s64-native-set!) (G4f5f core-prim . bytevector-s64-native-ref) (G4f5e core-prim . bytevector-s32-set!) (G4f5d core-prim . bytevector-s32-ref) (G4f5c core-prim . bytevector-s32-native-set!) (G4f5b core-prim . bytevector-s32-native-ref) (G4f5a core-prim . bytevector-s16-set!) (G4f59 core-prim . bytevector-s16-ref) (G4f58 core-prim . bytevector-s16-native-set!) (G4f57 core-prim . bytevector-s16-native-ref) (G4f56 core-prim . bytevector-length) (G4f55 core-prim . bytevector-ieee-single-ref) (G4f54 core-prim . bytevector-ieee-single-set!) (G4f53 core-prim . bytevector-ieee-single-native-set!) (G4f52 core-prim . bytevector-ieee-single-native-ref) (G4f51 core-prim . bytevector-ieee-double-set!) (G4f50 core-prim . bytevector-ieee-double-ref) (G4f4f core-prim . bytevector-ieee-double-native-set!) (G4f4e core-prim . bytevector-ieee-double-native-ref) (G4f4d core-prim . bytevector-fill!) (G4f4c core-prim . bytevector-copy!) (G4f4b core-prim . bytevector-copy) (G4f4a core-prim . bytevector->uint-list) (G4f49 core-prim . bytevector->u8-list) (G4f48 core-prim . bytevector->sint-list) (G4c33 core-prim . no-nans-violation?) (G4c1e core-prim . no-infinities-violation?) (G4c31 core-prim . make-no-nans-violation) (G4c1c core-prim . make-no-infinities-violation) (G4f47 core-prim . real->flonum) (G4f46 core-prim . flzero?) (G4f45 core-prim . fltruncate) (G4f44 core-prim . fltan) (G4f43 core-prim . flsqrt) (G4f42 core-prim . flsin) (G4f41 core-prim . flround) (G4f40 core-prim . flpositive?) (G4f3f core-prim . flonum?) (G4f3e core-prim . flodd?) (G4f3d core-prim . flnumerator) (G4f3c core-prim . flnegative?) (G4f3b core-prim . flnan?) (G4f3a core-prim . flmod0) (G4f39 core-prim . flmod) (G4f38 core-prim . flmin) (G4f37 core-prim . flmax) (G4f36 core-prim . fllog) (G4f35 core-prim . flinteger?) (G4f34 core-prim . flinfinite?) (G4f33 core-prim . flfloor) (G4f32 core-prim . flfinite?) (G4f31 core-prim . flexpt) (G4f30 core-prim . flexp) (G4f2f core-prim . fleven?) (G4f2e core-prim . fldiv0-and-mod0) (G4f2d core-prim . fldiv0) (G4f2c core-prim . fldiv-and-mod) (G4f2b core-prim . fldiv) (G4f2a core-prim . fldenominator) (G4f29 core-prim . flcos) (G4f28 core-prim . flceiling) (G4f27 core-prim . flatan) (G4f26 core-prim . flasin) (G4f25 core-prim . flacos) (G4f24 core-prim . flabs) (G4f23 core-prim . fl>?) (G4f22 core-prim . fl>=?) (G4f21 core-prim . fl=?) (G4f20 core-prim . fl<?) (G4f1f core-prim . fl<=?) (G4f1e core-prim . fl/) (G4f1d core-prim . fl-) (G4f1c core-prim . fl+) (G4f1b core-prim . fl*) (G4f1a core-prim . fixnum->flonum) (G4f19 core-prim . fxzero?) (G4f18 core-prim . fxxor) (G4f17 core-prim . fxrotate-bit-field) (G4f16 core-prim . fxreverse-bit-field) (G4f15 core-prim . fxpositive?) (G4f14 core-prim . fxodd?) (G4f13 core-prim . fxnot) (G4f12 core-prim . fxnegative?) (G4f11 core-prim . fxmod0) (G4f10 core-prim . fxmod) (G4f0f core-prim . fxmin) (G4f0e core-prim . fxmax) (G4f0d core-prim . fxlength) (G4f0c core-prim . fxior) (G4f0b core-prim . fxif) (G4f0a core-prim . fxfirst-bit-set) (G4f09 core-prim . fxeven?) (G4f08 core-prim . fxdiv0-and-mod0) (G4f07 core-prim . fxdiv0) (G4f06 core-prim . fxdiv-and-mod) (G4f05 core-prim . fxdiv) (G4f04 core-prim . fxcopy-bit-field) (G4f03 core-prim . fxcopy-bit) (G4f02 core-prim . fxbit-set?) (G4f01 core-prim . fxbit-field) (G4f00 core-prim . fxbit-count) (G4eff core-prim . fxarithmetic-shift-right) (G4efe core-prim . fxarithmetic-shift-left) (G4efd core-prim . fxarithmetic-shift) (G4efc core-prim . fxand) (G4efb core-prim . fx>?) (G4efa core-prim . fx>=?) (G4ef9 core-prim . fx=?) (G4ef8 core-prim . fx<?) (G4ef7 core-prim . fx<=?) (G4ef6 core-prim . fx-/carry) (G4ef5 core-prim . fx-) (G4ef4 core-prim . fx+/carry) (G4ef3 core-prim . fx+) (G4ef2 core-prim . fx*/carry) (G4ef1 core-prim . fx*) (G4ef0 core-prim . greatest-fixnum) (G4eef core-prim . least-fixnum) (G4eee core-prim . fixnum-width) (G4eed core-prim . fixnum?) (G4eec core-prim . bitwise-rotate-bit-field) (G4eeb core-prim . bitwise-reverse-bit-field) (G4eea core-prim . bitwise-length) (G4ee9 core-prim . bitwise-if) (G4ee8 core-prim . bitwise-first-bit-set) (G4ee7 core-prim . bitwise-copy-bit-field) (G4ee6 core-prim . bitwise-copy-bit) (G4ee5 core-prim . bitwise-bit-set?) (G4ee4 core-prim . bitwise-bit-field) (G4ee3 core-prim . bitwise-bit-count) (G4ee2 core-prim . bitwise-xor) (G4ee1 core-prim . bitwise-ior) (G4ee0 core-prim . bitwise-and) (G4edf core-prim . bitwise-not) (G4ede core-prim . bitwise-arithmetic-shift-right) (G4edd core-prim . bitwise-arithmetic-shift-left) (G4edc core-prim . bitwise-arithmetic-shift) (G4edb core-prim . zero?) (G4eda core-prim . vector?) (G4ed9 core-prim . vector-set!) (G4ed8 core-prim . vector-ref) (G4ed7 core-prim . vector-map) (G4ed6 core-prim . vector-length) (G4ed5 core-prim . vector-for-each) (G4ed4 core-prim . vector-fill!) (G4ed3 core-prim . vector->list) (G4ed2 core-prim . vector) (G4ed1 core-prim . values) (G4ed0 core-prim . truncate) (G4ecf core-prim . tan) (G4ece core-prim . symbol?) (G4ecd core-prim . symbol=?) (G4ecc core-prim . symbol->string) (G4ecb core-prim . substring) (G4eca core-prim . string?) (G4ec9 core-prim . string>?) (G4ec8 core-prim . string>=?) (G4ec7 core-prim . string=?) (G4ec6 core-prim . string<?) (G4ec5 core-prim . string<=?) (G4ec4 core-prim . string-ref) (G4ec3 core-prim . string-length) (G4ec2 core-prim . string-for-each) (G4ec1 core-prim . string-copy) (G4ec0 core-prim . string-append) (G4ebf core-prim . string->symbol) (G4ebe core-prim . string->number) (G4ebd core-prim . string->list) (G4ebc core-prim . string) (G4ebb core-prim . sqrt) (G4eba core-prim . sin) (G4eb9 core-prim . round) (G4eb8 core-prim . reverse) (G4eb7 core-prim . real?) (G4eb6 core-prim . real-valued?) (G4eb5 core-prim . real-part) (G4eb4 core-prim . rationalize) (G4eb3 core-prim . rational?) (G4eb2 core-prim . rational-valued?) (G4eb1 core-prim . procedure?) (G4eb0 core-prim . positive?) (G4eaf core-prim . pair?) (G4eae core-prim . odd?) (G4ead core-prim . numerator) (G4eac core-prim . number?) (G4eab core-prim . number->string) (G4eaa core-prim . null?) (G4ea9 core-prim . not) (G4ea8 core-prim . negative?) (G4ea7 core-prim . nan?) (G4ea6 core-prim . min) (G4ea5 core-prim . max) (G4ea4 core-prim . map) (G4ea3 core-prim . make-vector) (G4ea2 core-prim . make-string) (G4ea1 core-prim . make-rectangular) (G4ea0 core-prim . make-polar) (G4e9f core-prim . magnitude) (G4e9e core-prim . log) (G4e9d core-prim . list?) (G4e9c core-prim . list-tail) (G4e9b core-prim . list-ref) (G4e9a core-prim . list->vector) (G4e99 core-prim . list->string) (G4e98 core-prim . list) (G4e97 core-prim . length) (G4e96 core-prim . lcm) (G4e95 core-prim . integer?) (G4e94 core-prim . integer-valued?) (G4e93 core-prim . integer->char) (G4e92 core-prim . infinite?) (G4e91 core-prim . inexact?) (G4e90 core-prim . inexact) (G4e8f core-prim . imag-part) (G4e8e core-prim . gcd) (G4e8d core-prim . for-each) (G4e8c core-prim . floor) (G4e8b core-prim . finite?) (G4e8a core-prim . expt) (G4e89 core-prim . exp) (G4e88 core-prim . exact?) (G4e87 core-prim . exact-integer-sqrt) (G4e86 core-prim . exact) (G4e85 core-prim . even?) (G4e84 core-prim . error) (G4e83 core-prim . eqv?) (G4e82 core-prim . equal?) (G4e81 core-prim . eq?) (G4e80 core-prim . dynamic-wind) (G4e7f core-prim . div0-and-mod0) (G4e7e core-prim . mod0) (G4e7d core-prim . div0) (G4e7c core-prim . div-and-mod) (G4e7b core-prim . mod) (G4e7a core-prim . div) (G4e79 core-prim . denominator) (G4e78 core-prim . cos) (G4e77 core-prim . cons) (G4e76 core-prim . complex?) (G4e75 core-prim . char?) (G4e74 core-prim . char>?) (G4e73 core-prim . char>=?) (G4e72 core-prim . char=?) (G4e71 core-prim . char<?) (G4e70 core-prim . char<=?) (G4e6f core-prim . char->integer) (G4e6e core-prim . ceiling) (G4e6d core-prim . call-with-values) (G4e6c core-prim . call/cc) (G4e6b core-prim . call-with-current-continuation) (G4e6a core-prim . cddddr) (G4e69 core-prim . cdddar) (G4e68 core-prim . cddadr) (G4e67 core-prim . cddaar) (G4e66 core-prim . cdaddr) (G4e65 core-prim . cdadar) (G4e64 core-prim . cdaadr) (G4e63 core-prim . cdaaar) (G4e62 core-prim . cadddr) (G4e61 core-prim . caddar) (G4e60 core-prim . cadadr) (G4e5f core-prim . cadaar) (G4e5e core-prim . caaddr) (G4e5d core-prim . caadar) (G4e5c core-prim . caaadr) (G4e5b core-prim . caaaar) (G4e5a core-prim . cdddr) (G4e59 core-prim . cddar) (G4e58 core-prim . cdadr) (G4e57 core-prim . cdaar) (G4e56 core-prim . caddr) (G4e55 core-prim . cadar) (G4e54 core-prim . caadr) (G4e53 core-prim . caaar) (G4e52 core-prim . cddr) (G4e51 core-prim . cdar) (G4e50 core-prim . cadr) (G4e4f core-prim . caar) (G4e4e core-prim . cdr) (G4e4d core-prim . car) (G4e4c core-prim . boolean?) (G4e4b core-prim . boolean=?) (G4e4a core-prim . atan) (G4e49 core-prim . assertion-violation) (G4e48 core-prim . asin) (G4e47 core-prim . apply) (G4e46 core-prim . append) (G4e45 core-prim . angle) (G4e44 core-prim . acos) (G4e43 core-prim . abs) (G4e42 core-prim . /) (G4e41 core-prim . *) (G4e40 core-prim . -) (G4e3f core-prim . +) (G4e3e core-prim . >=) (G4e3d core-prim . >) (G4e3c core-prim . =) (G4e3b core-prim . <=) (G4e3a core-prim . <) (G4e39 core-prim . library) (G4e38 core-prim . export) (G4e37 $core-rtd &no-nans-rtd &no-nans-rcd) (G4e36 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4e35 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4e34 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4e33 $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4e32 $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4e31 $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4e30 $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4e2f $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4e2e $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4e2d $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4e2c $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4e2b $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4e2a $core-rtd &i/o-rtd &i/o-rcd) (G4e29 $core-rtd &undefined-rtd &undefined-rcd) (G4e28 $core-rtd &syntax-rtd &syntax-rcd) (G4e27 $core-rtd &lexical-rtd &lexical-rcd) (G4e26 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4e25 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4e24 $core-rtd &who-rtd &who-rcd) (G4e23 $core-rtd &irritants-rtd &irritants-rcd) (G4e22 $core-rtd &assertion-rtd &assertion-rcd) (G4e21 $core-rtd &violation-rtd &violation-rcd) (G4e20 $core-rtd &error-rtd &error-rcd) (G4e1f $core-rtd &serious-rtd &serious-rcd) (G4e1e $core-rtd &warning-rtd &warning-rcd) (G4e1d $core-rtd &message-rtd &message-rcd) (G4e1c $core-rtd &condition-rtd &condition-rcd) (G4e1b macro . define-condition-type) (G4e1a macro . define-enumeration) (G4e19 macro . define-record-type) (G4e18 macro . parent-rtd) (G4e17 macro . nongenerative) (G4e16 macro . opaque) (G4e15 macro . sealed) (G4e14 macro . protocol) (G4e13 macro . parent) (G4e12 macro . immutable) (G4e11 macro . mutable) (G4e10 macro . fields) (G4e0f macro . error-handling-mode) (G4e0e macro . file-options) (G4e0d macro . buffer-mode) (G4e0c macro . eol-style) (G4e0b macro . guard) (G4e0a macro . trace-define) (G4e09 macro . trace-lambda) (G4e08 macro . unsyntax-splicing) (G4e07 macro . unsyntax) (G4e06 macro . unquote-splicing) (G4e05 macro . unquote) (G4e04 macro . _) (G4e03 macro . else) (G4e02 macro . =>) (G4e01 macro . ...) (G4e00 macro . assert) (G4dff macro . endianness) (G4dfe macro . delay) (G4dfd macro . time) (G4dfc macro . do) (G4dfb macro . cond) (G4dfa macro . let*) (G4df9 macro . let) (G4df8 macro . let*-values) (G4df7 macro . let-values) (G4df6 macro . identifier-syntax) (G4df5 macro . with-syntax) (G4df4 macro . quasisyntax) (G4df3 macro . quasiquote) (G4df2 macro . syntax-rules) (G4df1 macro . include) (G4df0 macro . define-struct) (G4def core-macro . record-constructor-descriptor) (G4dee core-macro . record-type-descriptor) (G4ded macro . case) (G4dec macro . parameterize) (G4deb macro . unless) (G4dea macro . when) (G4de9 core-macro . or) (G4de8 core-macro . and) (G4de7 core-macro . if) (G4de6 core-macro . letrec*) (G4de5 core-macro . letrec) (G4de4 core-macro . type-descriptor) (G4de3 core-macro . case-lambda) (G4de2 core-macro . lambda) (G4de1 core-macro . syntax) (G4de0 core-macro . syntax-case) (G4ddf core-macro . quote) (G4dde core-macro . foreign-call) (G4ddd letrec-syntax) (G4ddc let-syntax) (G4ddb set!) (G4dda import) (G4dd9 begin) (G4dd8 module) (G4dd7 define-syntax) (G4dd6 define)) values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50c3 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G50a2) (eval-core . G50a1) (set-symbol-value! . G50a0) (symbol-value . G509f) (gensym . G509e) (void . G509d)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50c4 '(mosh) '() '() '() '() '((set-symbol-value! . G50a0) (symbol-value . G509f) (assoc-ref . G5079) (alist-cons . G5078) (print . G5076) (format . G5075) (standard-library-path . G5074) (file-newer? . G5073) (stat-mtime . G5072) (current-directory . G5071) (write-to-file . G5070) (file->list . G506f) (file->string . G506e) (digit->integer . G506d) (call-with-string-input-port . G506c) (call-with-string-io . G506b) (string-split . G506a) (bytevector-for-each . G5069) (string->regexp . G5068) (rxmatch . G5067) (regexp-replace-all . G5066) (hashtable-for-each . G5065) (get-timeofday . G5061) (get-command-line . G5060) (sys-display . G505f) (source-info . G505e) (make-compiler-instruction . G505d) (make-instruction . G505c) (set-source-info! . G505b) (bignum? . G505a) (make-complex . G5059) (fast-equal? . G5058) (fasl-read . G5057) (fasl-write . G5056) (include . G4df1)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50c5 '(mosh backend) '() '() '() '() '((receive . G5055)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50c6 '(mosh file) '() '() '() '() '((read-line . G509a) (file-newer? . G5073) (stat-mtime . G5072) (current-directory . G5071) (write-to-file . G5070) (file->list . G506f) (file->string . G506e)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50c7 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5069)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50c8 '(mosh number) '() '() '() '() '((digit->integer . G506d)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50c9 '(mosh string) '() '() '() '() '((print . G5076) (format . G5075) (call-with-string-input-port . G506c) (call-with-string-io . G506b) (string-split . G506a) (string->regexp . G5068)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50ca '(mosh list) '() '() '() '() '((assoc-ref . G5079)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50cb '(mosh regexp) '() '() '() '() '((rxmatch . G5067) (regexp-replace-all . G5066)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50cc '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5065)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50cd '(mosh parameters) '() '() '() '() '((make-parameter . G283d) (parameterize . G4dec)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50ce '(system) '() '() '() '() '((readdir . G5064) (get-environment-variables . G5063) (get-environment-variable . G5062)) '() values values '#f '#f '#f '#f) (G2b81@G2a26@install-library 'G50cf '(srfi :1) '() '() '() '() '((dotted-list? . G5099) (circular-list? . G5098) (proper-list? . G5097) (circular-list . G5096) (last . G5095) (last-pair . G5094) (not-pair? . G5093) (split-at! . G5092) (split-at . G5091) (list= . G5090) (list-copy . G508f) (list-tabulate . G508e) (make-list . G508d) (xcons . G508c) (tenth . G508b) (ninth . G508a) (eighth . G5089) (seventh . G5088) (sixth . G5087) (fifth . G5086) (drop-right! . G5085) (drop-right . G5084) (take-right . G5083) (take! . G5082) (drop . G5081) (take . G5080) (car+cdr . G507f) (third . G507e) (second . G507d) (first . G507c) (iota . G507b) (every . G507a) (alist-cons . G5078) (append-map . G5077)) '() values values '#f '#f '#f '#f))
((lambda (G4d2d@for-each-with-index G4d2f@repl G4d31@trace-printer G4d33@command-line G4d35@local-library-path G4d37@load/args G4d39@load G4d3b@ironscheme-build G4d3d@eval-top-level G4d3f@compile-system-libraries G4d41@compile G4d43@compile->closure G4d45@pre-compile-r6rs-file G4d47@load-r6rs-top-level G4d49@write-record) (begin (set! G4d2d@for-each-with-index (lambda (G4d60@proc G4d61@lst) (letrec ((G4d64@loop (lambda (G4d66@i G4d67@lst) (if (null? G4d67@lst) (if '#f '#f (void)) (begin (G4d60@proc G4d66@i (car G4d67@lst)) (G4d64@loop (+ G4d66@i '1) (cdr G4d67@lst))))))) (G4d64@loop '1 G4d61@lst)))) (set! G4d2f@repl (lambda G4d6a@x ((lambda (G4d6d@rec) (begin (set! G4d6d@rec (lambda () (begin (display '"mosh>") ((call/cc (lambda (G4d70@G4d6e) (lambda () (with-exception-handler (lambda (G4d72@e) ((call/cc (lambda (G4d74@G4d6f) (G4d70@G4d6e (lambda () (if '#t (G4d2d@for-each-with-index (lambda (G4d76@i G4d77@x) ((lambda (G4d7a@rtd) (begin (format '#t '"   ~d. ~a" G4d76@i (record-type-name G4d7a@rtd)) ((lambda (G4d7c@v) ((lambda (G4d7e@t) (if (memv G4d7e@t '(0)) (newline) (if (memv G4d7e@t '(1)) (begin (display '": ") (write ((record-accessor G4d7a@rtd '0) G4d77@x)) (newline)) (begin (display '":\n") ((letrec ((G4d80@f (lambda (G4d82@i) (if (not (= G4d82@i (vector-length G4d7c@v))) (begin (display '"       ") (display (vector-ref G4d7c@v G4d82@i)) (display '": ") (write ((record-accessor G4d7a@rtd G4d82@i) G4d77@x)) (newline) (G4d80@f (+ G4d82@i '1))) (void))))) G4d80@f) '0))))) (vector-length G4d7c@v))) (record-type-field-names G4d7a@rtd)))) (record-rtd G4d77@x))) (simple-conditions G4d72@e)) (G4d74@G4d6f (lambda () (raise-continuable G4d72@e)))))))))) (lambda () (begin '#f ((lambda (G4d84@line) (if (eof-object? G4d84@line) (exit) (write (G4d3d@eval-top-level (call-with-port (open-string-input-port G4d84@line) read))))) (get-line (current-input-port)))))))))) (newline) (G4d6d@rec)))) (G4d6d@rec))) '#f))) (set! G4d31@trace-printer (G2908@G283e@make-parameter write)) (set! G4d33@command-line (G2908@G283e@make-parameter (get-command-line))) (set! G4d35@local-library-path (lambda (G4d86@filename) (cons '"." (G2b71@G2a06@library-path)))) (set! G4d37@load/args (lambda (G4d88@filename . G4d8a@args) (begin (apply G4d47@load-r6rs-top-level G4d88@filename 'load G4d8a@args) (void)))) (set! G4d39@load (lambda (G4d8c@filename) (begin (apply G4d47@load-r6rs-top-level G4d8c@filename 'load (G4d33@command-line)) (void)))) (set! G4d3b@ironscheme-build (lambda () (G4d39@load '"ironscheme-buildscript.ss"))) (set! G4d3d@eval-top-level (lambda (G4d8e@x) (G4962@G3036@eval G4d8e@x (G4979@G3064@interaction-environment)))) (set! G4d3f@compile-system-libraries (lambda () (G4d3d@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4d41@compile (lambda (G4d90@filename) (G4d47@load-r6rs-top-level G4d90@filename 'compile))) (set! G4d43@compile->closure (lambda (G4d92@filename) (G4d47@load-r6rs-top-level G4d92@filename 'closure))) (set! G4d45@pre-compile-r6rs-file (lambda (G4d94@filename) (G4d47@load-r6rs-top-level G4d94@filename 'compile))) (set! G4d47@load-r6rs-top-level (lambda (G4d96@filename G4d97@how . G4d9a@args) ((lambda (G4d9e@G4d9c G4d9f@G4d9d) ((lambda (G4da2@swap) (dynamic-wind G4da2@swap (lambda () ((lambda (G4da4@x*) ((lambda (G4da6@t) (if (memv G4da6@t '(closure)) (G4978@G3062@pre-compile-r6rs-top-level G4da4@x*) (if (memv G4da6@t '(load)) ((lambda (G4daa@G4da8 G4dab@G4da9) ((lambda (G4dae@swap) (dynamic-wind G4dae@swap (lambda () ((G4977@G3060@compile-r6rs-top-level G4da4@x*))) G4dae@swap)) (lambda () ((lambda (G4db0@t) (begin (G4daa@G4da8 G4dab@G4da9) (set! G4dab@G4da9 G4db0@t))) (G4daa@G4da8))))) G4d33@command-line (cons G4d96@filename (car G4d9a@args))) (if (memv G4da6@t '(compile)) (begin (G4977@G3060@compile-r6rs-top-level G4da4@x*) (G2b75@G2a0e@serialize-all G2903@G2834@serialize-library G295d@G2916@compile-core-expr)) (if '#f '#f (void)))))) G4d97@how)) (with-input-from-file G4d96@filename (lambda () ((letrec ((G4db2@f (lambda () ((lambda (G4db4@x) (if (eof-object? G4db4@x) '() (cons G4db4@x (G4db2@f)))) (G28fb@G2824@read-annotated))))) G4db2@f)))))) G4da2@swap)) (lambda () ((lambda (G4db6@t) (begin (G4d9e@G4d9c G4d9f@G4d9d) (set! G4d9f@G4d9d G4db6@t))) (G4d9e@G4d9c))))) G2b71@G2a06@library-path (G4d35@local-library-path G4d96@filename)))) (set! G4d49@write-record (lambda (G4db8@record G4db9@port) ((lambda (G4dbc@rtd) (begin (format G4db9@port '"    ~a" (record-type-name G4dbc@rtd)) ((lambda (G4dbe@v) ((lambda (G4dc0@t) (if (memv G4dc0@t '(0)) (newline) (if (memv G4dc0@t '(1)) (begin (display '": " G4db9@port) (write ((record-accessor G4dbc@rtd '0) G4db8@record) G4db9@port) (newline G4db9@port)) (begin (display '":\n") ((letrec ((G4dc2@f (lambda (G4dc4@i) (if (not (= G4dc4@i (vector-length G4dbe@v))) (begin (display '"       " G4db9@port) (display (vector-ref G4dbe@v G4dc4@i) G4db9@port) (display '": " G4db9@port) (write ((record-accessor G4dbc@rtd G4dc4@i) G4db8@record) G4db9@port) (newline G4db9@port) (G4dc2@f (+ G4dc4@i '1))) (void))))) G4dc2@f) '0))))) (vector-length G4dbe@v))) (record-type-field-names G4dbc@rtd)))) (record-rtd G4db8@record)))) (begin (set! G4dd4@G4d49@write-record G4d49@write-record) (set! G4dd3@G4d47@load-r6rs-top-level G4d47@load-r6rs-top-level) (set! G4dd2@G4d45@pre-compile-r6rs-file G4d45@pre-compile-r6rs-file) (set! G4dd1@G4d43@compile->closure G4d43@compile->closure) (set! G4dd0@G4d41@compile G4d41@compile) (set! G4dcf@G4d3f@compile-system-libraries G4d3f@compile-system-libraries) (set! G4dce@G4d3d@eval-top-level G4d3d@eval-top-level) (set! G4dcd@G4d3b@ironscheme-build G4d3b@ironscheme-build) (set! G4dcc@G4d39@load G4d39@load) (set! G4dcb@G4d37@load/args G4d37@load/args) (set! G4dca@G4d35@local-library-path G4d35@local-library-path) (set! G4dc9@G4d33@command-line G4d33@command-line) (set! G4dc8@G4d31@trace-printer G4d31@trace-printer) (set! G4dc7@G4d2f@repl G4d2f@repl) (set! G4dc6@G4d2d@for-each-with-index G4d2d@for-each-with-index) (G2b76@G2a10@current-precompiled-library-loader G2904@G2836@load-serialized-library) (set-symbol-value! 'load G4d39@load) (set-symbol-value! 'pre-compile-r6rs-file G4d45@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4d3d@eval-top-level) (set-symbol-value! 'int-env-syms G4959@G3024@interaction-environment-symbols) (set-symbol-value! 'expanded2core G295c@G2914@expanded->core) (set-symbol-value! 'trace-printer G4d31@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (G4d4a@c) (condition (G4c8a@G4a9a@make-non-continuable-violation) (G4c80@G4a81@make-who-condition 'raise) (G4c44@G49e4@make-message-condition '"returned from non-continuable exception") (G4c76@G4a67@make-irritants-condition (list G4d4a@c))))) (G2b71@G2a06@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4d4c@args G4d4d@port) (with-exception-handler (lambda (G4d50@c) (begin (display '" Condition components:\n" G4d4d@port) (G4d2d@for-each-with-index (lambda (G4d52@i G4d53@x) ((lambda (G4d56@rtd) (begin (format G4d4d@port '"   ~d. ~a" G4d52@i (record-type-name G4d56@rtd)) ((lambda (G4d58@v) ((lambda (G4d5a@t) (if (memv G4d5a@t '(0)) (newline) (if (memv G4d5a@t '(1)) (begin (display '": ") (write ((record-accessor G4d56@rtd '0) G4d53@x)) (newline)) (begin (display '":\n") ((letrec ((G4d5c@f (lambda (G4d5e@i) (if (not (= G4d5e@i (vector-length G4d58@v))) (begin (display '"       ") (display (vector-ref G4d58@v G4d5e@i)) (display '": ") (write ((record-accessor G4d56@rtd G4d5e@i) G4d53@x)) (newline) (G4d5c@f (+ G4d5e@i '1))) (void))))) G4d5c@f) '0))))) (vector-length G4d58@v))) (record-type-field-names G4d56@rtd)))) (record-rtd G4d53@x))) (simple-conditions G4d50@c)))) (lambda () (if (null? G4d4c@args) (G4d2f@repl) (G4d47@load-r6rs-top-level (car G4d4c@args) 'load (cdr G4d4c@args)))))) (G4d33@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
