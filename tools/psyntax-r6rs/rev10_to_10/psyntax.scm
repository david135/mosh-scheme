;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

((lambda (G28ca@read-annotated G28cc@annotation-stripped G28ce@annotation? G28d0@annotation-source G28d2@annotation-expression G28d4@scm->fasl G28d6@fasl-save G28d8@fasl-load G28da@serialize-library G28dc@load-serialized-library G28de@make-record-printer G28e0@compile-core G28e2@read-library-source-file G28e4@make-parameter G2950@file-options-spec) (begin (set! G28ca@read-annotated read) (set! G28cc@annotation-stripped (lambda (G2951@x) (G28d2@annotation-expression G2951@x))) (set! G28ce@annotation? (lambda (G2953@x) (source-info G2953@x))) (set! G28d0@annotation-source (lambda (G2955@x) (source-info G2955@x))) (set! G28d2@annotation-expression (lambda (G2957@x) (if (pair? G2957@x) (cons (car G2957@x) (cdr G2957@x)) (display '"line:46\n")))) (set! G28d4@scm->fasl (lambda (G2959@filename) (string-append G2959@filename '".fasl"))) (set! G28d6@fasl-save (lambda (G295b@filename G295c@obj) (call-with-port (open-file-output-port G295b@filename) (lambda (G295f@port) ((symbol-value 'fasl-write!) G295c@obj G295f@port))))) (set! G28d8@fasl-load (lambda (G2961@filename) (call-with-port (open-file-input-port G2961@filename) (symbol-value 'fasl-read!)))) (set! G28da@serialize-library (lambda (G2963@filename G2964@obj) (begin (format '#t '"serialize-library ~a\n..." G2963@filename) ((lambda (G2967@fasl-file) (begin (if (file-exists? G2967@fasl-file) (delete-file G2967@fasl-file) (void)) (call/cc (lambda (G296a@G2969) (with-exception-handler (lambda (G296c@c) (G296a@G2969 (if '#t (begin (format '#t '"Warning:serialize-library failed " G2963@filename) (if (file-exists? G2967@fasl-file) (delete-file G2967@fasl-file) (void)) '#f) (raise G296c@c)))) (lambda () (begin '#f (G28d6@fasl-save G2967@fasl-file G2964@obj) (display '"OK\n")))))))) (G28d4@scm->fasl G2963@filename))))) (set! G28dc@load-serialized-library (lambda (G296e@filename G296f@obj) ((lambda (G2972@fasl-file) (if (and (file-exists? G2972@fasl-file) ((symbol-value 'file-newer?) G2972@fasl-file G296e@filename)) ((lambda (G2974@expanded2core) ((lambda (G2976@code) ((lambda (G2978@pivot) ((lambda (G297a@visit) ((lambda (G297c@visit-proc) ((lambda () (begin (set-car! G2978@pivot G297c@visit-proc) ((lambda (G297e@pivot) ((lambda (G2980@invoke) ((lambda () (begin (set-car! G297e@pivot (lambda () (eval-core G2980@invoke))) (apply G296f@obj G2976@code))))) (G2974@expanded2core (car G297e@pivot)))) (cdr G2978@pivot)) '#t)))) (lambda () (eval-core G297a@visit)))) (G2974@expanded2core (car G2978@pivot)))) (cddddr (cddddr G2976@code)))) (G28d8@fasl-load G2972@fasl-file))) (symbol-value 'expanded2core)) '#f)) (G28d4@scm->fasl G296e@filename)))) (set! G28de@make-record-printer (lambda (G2982@name G2983@printer) (lambda G2986@x (begin (display '"record printer") (for-each display G2986@x))))) (set! G28e0@compile-core (lambda G2988@x (apply error 'comile-core '"not implementated" G2988@x))) (set! G28e2@read-library-source-file (lambda (G298a@file-name) (with-input-from-file G298a@file-name G28ca@read-annotated))) (set! G28e4@make-parameter (lambda G299a ((lambda (G299b) (if (= G299b '1) (apply (lambda (G298c@x) (G28e4@make-parameter G298c@x (lambda (G298e@x) G298e@x))) G299a) (if (= G299b '2) (apply (lambda (G2990@x G2991@fender) ((lambda (G2994@x) (lambda G2998 ((lambda (G2999) (if (= G2999 '0) (apply (lambda () G2994@x) G2998) (if (= G2999 '1) (apply (lambda (G2996@v) (set! G2994@x (G2991@fender G2996@v))) G2998) (error 'apply '"invalid arg count")))) (length G2998)))) (G2991@fender G2990@x))) G299a) (error 'apply '"invalid arg count")))) (length G299a)))) (set! G2950@file-options-spec (lambda (G299c@x) G299c@x)) (begin (set! G29ac@G2950@file-options-spec G2950@file-options-spec) (set! G29ab@G28e4@make-parameter G28e4@make-parameter) (set! G29aa@G28e2@read-library-source-file G28e2@read-library-source-file) (set! G29a9@G28e0@compile-core G28e0@compile-core) (set! G29a8@G28de@make-record-printer G28de@make-record-printer) (set! G29a7@G28dc@load-serialized-library G28dc@load-serialized-library) (set! G29a6@G28da@serialize-library G28da@serialize-library) (set! G29a5@G28d8@fasl-load G28d8@fasl-load) (set! G29a4@G28d6@fasl-save G28d6@fasl-save) (set! G29a3@G28d4@scm->fasl G28d4@scm->fasl) (set! G29a2@G28d2@annotation-expression G28d2@annotation-expression) (set! G29a1@G28d0@annotation-source G28d0@annotation-source) (set! G29a0@G28ce@annotation? G28ce@annotation?) (set! G299f@G28cc@annotation-stripped G28cc@annotation-stripped) (set! G299e@G28ca@read-annotated G28ca@read-annotated)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G29b1@current-primitive-locations G29b3@mutable? G29b5@rewriter G29b7@expanded->core G29b9@compile-core-expr G29bb@pretty-print G29bd@compile-core-expr-to-port) (begin (set! G29b1@current-primitive-locations (G29ab@G28e4@make-parameter (lambda (G29be@x) '#f) (lambda (G29c0@p) G29c0@p))) (set! G29b3@mutable? (lambda (G29c2@x) (or (pair? G29c2@x) (vector? G29c2@x) (hashtable? G29c2@x)))) (set! G29b5@rewriter (lambda (G29c4@quote-hack?) ((lambda (G29c7@f) (begin (set! G29c7@f (lambda (G29c8@x) (if (pair? G29c8@x) ((lambda (G29ca@t) (if (memv G29ca@t '(quote)) (if (and G29c4@quote-hack? (G29b3@mutable? (cadr G29c8@x))) ((lambda (G29cc@g) (begin (set-symbol-value! G29cc@g (cadr G29c8@x)) G29cc@g)) (gensym)) G29c8@x) (if (memv G29ca@t '(case-lambda)) (cons 'case-lambda (map (lambda (G29ce@x) (cons (car G29ce@x) (map G29c7@f (cdr G29ce@x)))) (cdr G29c8@x))) (if (memv G29ca@t '(lambda)) (cons* 'lambda (cadr G29c8@x) (map G29c7@f (cddr G29c8@x))) (if (memv G29ca@t '(letrec)) ((lambda (G29d0@bindings G29d1@body*) ((lambda (G29d4@lhs* G29d5@rhs*) (cons* 'letrec (map list G29d4@lhs* (map G29c7@f G29d5@rhs*)) (map G29c7@f G29d1@body*))) (map car G29d0@bindings) (map cadr G29d0@bindings))) (cadr G29c8@x) (cddr G29c8@x)) (if (memv G29ca@t '(letrec*)) ((lambda (G29d8@bindings G29d9@body*) ((lambda (G29dc@lhs* G29dd@rhs*) (cons* 'letrec* (map list G29dc@lhs* (map G29c7@f G29dd@rhs*)) (map G29c7@f G29d9@body*))) (map car G29d8@bindings) (map cadr G29d8@bindings))) (cadr G29c8@x) (cddr G29c8@x)) (if (memv G29ca@t '(library-letrec*)) ((lambda (G29e0@name G29e1@x) ((lambda (G29e4@bindings G29e5@body*) ((lambda (G29e8@lhs* G29e9@lhs** G29ea@rhs*) (cons* 'library-letrec* G29e0@name (map list G29e8@lhs* G29e9@lhs** (map G29c7@f G29ea@rhs*)) (map G29c7@f G29e5@body*))) (map car G29e4@bindings) (map cadr G29e4@bindings) (map caddr G29e4@bindings))) (cadr G29e1@x) (cddr G29e1@x))) (cadr G29c8@x) (cdr G29c8@x)) (if (memv G29ca@t '(begin)) (cons 'begin (map G29c7@f (cdr G29c8@x))) (if (memv G29ca@t '(set!)) (list 'set! (cadr G29c8@x) (G29c7@f (caddr G29c8@x))) (if (memv G29ca@t '(primitive)) ((lambda (G29ee@op) ((lambda (G29f0@t) (if G29f0@t ((lambda (G29f2@loc) G29f2@loc) G29f0@t) G29ee@op)) ((G29b1@current-primitive-locations) G29ee@op))) (cadr G29c8@x)) (if (memv G29ca@t '(define)) G29c8@x (if (list? G29c8@x) (map G29c7@f G29c8@x) (error 'rewrite '"invalid form ~s ~s" G29c8@x (list? G29c8@x)))))))))))))) (car G29c8@x)) G29c8@x))) G29c7@f)) '#f))) (set! G29b7@expanded->core (lambda (G29f4@x) ((G29b5@rewriter '#t) G29f4@x))) (set! G29b9@compile-core-expr (lambda (G29f6@x) ((G29b5@rewriter '#f) G29f6@x))) (set! G29bb@pretty-print write) (set! G29bd@compile-core-expr-to-port (lambda (G29f8@x G29f9@p) (G29bb@pretty-print ((G29b5@rewriter '#f) G29f8@x) G29f9@p))) (begin (set! G2a02@G29bd@compile-core-expr-to-port G29bd@compile-core-expr-to-port) (set! G2a01@G29bb@pretty-print G29bb@pretty-print) (set! G2a00@G29b9@compile-core-expr G29b9@compile-core-expr) (set! G29ff@G29b7@expanded->core G29b7@expanded->core) (set! G29fe@G29b5@rewriter G29b5@rewriter) (set! G29fd@G29b3@mutable? G29b3@mutable?) (set! G29fc@G29b1@current-primitive-locations G29b1@current-primitive-locations)))) '#f '#f '#f '#f '#f '#f '#f)
(void)
((lambda (G2a58@make-collection G2a5a@current-library-collection G2a60@G2a5b G2a62@G2a5d G2a64@G2a5c G2a67@library? G2a69@make-library G2a6b@library-id G2a6d@library-name G2a6f@library-version G2a71@library-imp* G2a73@library-vis* G2a75@library-inv* G2a77@library-subst G2a79@library-env G2a7b@library-visit-state G2a7d@library-invoke-state G2a7f@library-visit-code G2a81@library-invoke-code G2a83@library-visible? G2a85@library-source-file-name G2a87@set-library-id! G2a89@set-library-name! G2a8b@set-library-version! G2a8d@set-library-imp*! G2a8f@set-library-vis*! G2a91@set-library-inv*! G2a93@set-library-subst! G2a95@set-library-env! G2a97@set-library-visit-state! G2a99@set-library-invoke-state! G2a9b@set-library-visit-code! G2a9d@set-library-invoke-code! G2a9f@set-library-visible?! G2aa1@set-library-source-file-name! G2aa3@rp G2aa5@find-dependencies G2aa7@find-library-by G2aa9@library-path G2aab@library-extensions G2aad@library-name->file-name G2aaf@file-locator G2ab1@serialize-all G2ab3@current-precompiled-library-loader G2ab5@try-load-from-file G2ab7@library-loader G2ab9@current-library-expander G2abb@external-pending-libraries G2abd@find-external-library G2abf@find-library-by-name G2ac1@library-exists? G2ac3@find-library-by-spec/die G2ac5@label->binding-table G2ac7@install-library-record G2ac9@install-library G2acb@imported-label->binding G2acd@invoke-library G2acf@visit-library G2ad1@invoke-library-by-spec G2ad3@installed-libraries G2ad5@library-spec) (begin (set! G2a58@make-collection (lambda () ((lambda (G2ad6@set) ((lambda (G2ad9@set-cons) (begin (set! G2ad9@set-cons (lambda (G2ade@x G2adf@ls) (if (memq G2ade@x G2adf@ls) G2adf@ls (cons G2ade@x G2adf@ls)))) (lambda G2adc ((lambda (G2add) (if (= G2add '0) (apply (lambda () G2ad6@set) G2adc) (if (= G2add '1) (apply (lambda (G2ada@x) (set! G2ad6@set (G2ad9@set-cons G2ada@x G2ad6@set))) G2adc) (error 'apply '"invalid arg count")))) (length G2adc))))) '#f)) '()))) (set! G2a5a@current-library-collection (G29ab@G28e4@make-parameter (G2a58@make-collection) (lambda (G2ae2@x) (begin (if (not (procedure? G2ae2@x)) (assertion-violation 'current-library-collection '"not a procedure" G2ae2@x) (void)) G2ae2@x)))) (set! G2a60@G2a5b (make-record-type-descriptor 'library '#f 'G2a5e '#t '#t '#((mutable id) (mutable name) (mutable version) (mutable imp*) (mutable vis*) (mutable inv*) (mutable subst) (mutable env) (mutable visit-state) (mutable invoke-state) (mutable visit-code) (mutable invoke-code) (mutable visible?) (mutable source-file-name)))) (set! G2a62@G2a5d '#f) (set! G2a64@G2a5c (make-record-constructor-descriptor G2a60@G2a5b '#f G2a62@G2a5d)) (set! G2a67@library? (record-predicate G2a60@G2a5b)) (set! G2a69@make-library (record-constructor G2a64@G2a5c)) (set! G2a6b@library-id (record-accessor G2a60@G2a5b '0)) (set! G2a6d@library-name (record-accessor G2a60@G2a5b '1)) (set! G2a6f@library-version (record-accessor G2a60@G2a5b '2)) (set! G2a71@library-imp* (record-accessor G2a60@G2a5b '3)) (set! G2a73@library-vis* (record-accessor G2a60@G2a5b '4)) (set! G2a75@library-inv* (record-accessor G2a60@G2a5b '5)) (set! G2a77@library-subst (record-accessor G2a60@G2a5b '6)) (set! G2a79@library-env (record-accessor G2a60@G2a5b '7)) (set! G2a7b@library-visit-state (record-accessor G2a60@G2a5b '8)) (set! G2a7d@library-invoke-state (record-accessor G2a60@G2a5b '9)) (set! G2a7f@library-visit-code (record-accessor G2a60@G2a5b '10)) (set! G2a81@library-invoke-code (record-accessor G2a60@G2a5b '11)) (set! G2a83@library-visible? (record-accessor G2a60@G2a5b '12)) (set! G2a85@library-source-file-name (record-accessor G2a60@G2a5b '13)) (set! G2a87@set-library-id! (record-mutator G2a60@G2a5b '0)) (set! G2a89@set-library-name! (record-mutator G2a60@G2a5b '1)) (set! G2a8b@set-library-version! (record-mutator G2a60@G2a5b '2)) (set! G2a8d@set-library-imp*! (record-mutator G2a60@G2a5b '3)) (set! G2a8f@set-library-vis*! (record-mutator G2a60@G2a5b '4)) (set! G2a91@set-library-inv*! (record-mutator G2a60@G2a5b '5)) (set! G2a93@set-library-subst! (record-mutator G2a60@G2a5b '6)) (set! G2a95@set-library-env! (record-mutator G2a60@G2a5b '7)) (set! G2a97@set-library-visit-state! (record-mutator G2a60@G2a5b '8)) (set! G2a99@set-library-invoke-state! (record-mutator G2a60@G2a5b '9)) (set! G2a9b@set-library-visit-code! (record-mutator G2a60@G2a5b '10)) (set! G2a9d@set-library-invoke-code! (record-mutator G2a60@G2a5b '11)) (set! G2a9f@set-library-visible?! (record-mutator G2a60@G2a5b '12)) (set! G2aa1@set-library-source-file-name! (record-mutator G2a60@G2a5b '13)) (set! G2aa3@rp (G29a8@G28de@make-record-printer 'library (lambda (G2ae4@x G2ae5@p G2ae6@wr) (begin (if (not (G2a67@library? G2ae4@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (G2a6f@library-version G2ae4@x)) (G2a6d@library-name G2ae4@x) (append (G2a6d@library-name G2ae4@x) (list (G2a6f@library-version G2ae4@x))))) G2ae5@p))))) (set! G2aa5@find-dependencies (lambda (G2aea@ls) (if (null? G2aea@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! G2aa7@find-library-by (lambda (G2aec@pred) ((letrec ((G2aee@f (lambda (G2af0@ls) (if (null? G2af0@ls) '#f (if (G2aec@pred (car G2af0@ls)) (car G2af0@ls) (G2aee@f (cdr G2af0@ls))))))) G2aee@f) ((G2a5a@current-library-collection))))) (set! G2aa9@library-path (G29ab@G28e4@make-parameter '(".") (lambda (G2af2@x) (if (and (list? G2af2@x) (for-all string? G2af2@x)) (map (lambda (G2af4@x) G2af4@x) G2af2@x) (assertion-violation 'library-path '"not a list of strings" G2af2@x))))) (set! G2aab@library-extensions (G29ab@G28e4@make-parameter '(".sls" ".ss" ".scm") (lambda (G2af6@x) (if (and (list? G2af6@x) (for-all string? G2af6@x)) (map (lambda (G2af8@x) G2af8@x) G2af6@x) (assertion-violation 'library-extensions '"not a list of strings" G2af6@x))))) (set! G2aad@library-name->file-name (lambda (G2afa@x) (call-with-values (lambda () (open-string-output-port)) (lambda (G2afe@G2afc G2aff@G2afd) ((lambda (G2b02@extract G2b03@p) ((lambda (G2b07@display-hex) (begin (set! G2b07@display-hex (lambda (G2b10@n) (if (<= '0 G2b10@n '9) (display G2b10@n G2b03@p) (display (integer->char (+ (char->integer '#\A) (- G2b10@n '10))) G2b03@p)))) (begin ((letrec ((G2b08@f (lambda (G2b0a@ls) (if (not (null? G2b0a@ls)) (begin (display '"/" G2b03@p) (for-each (lambda (G2b0c@c) (if (or (char<=? '#\a G2b0c@c '#\z) (char<=? '#\A G2b0c@c '#\Z) (char<=? '#\nul G2b0c@c '#\9) (memv G2b0c@c '(#\- #\. #\_ #\~))) (display G2b0c@c G2b03@p) (begin (display '"%" G2b03@p) ((lambda (G2b0e@n) (begin (G2b07@display-hex (quotient G2b0e@n '16)) (G2b07@display-hex (remainder G2b0e@n '16)))) (char->integer G2b0c@c))))) (string->list (symbol->string (car G2b0a@ls)))) (G2b08@f (cdr G2b0a@ls))) (void))))) G2b08@f) G2afa@x) (G2b02@extract)))) '#f)) G2aff@G2afd G2afe@G2afc))))) (set! G2aaf@file-locator (G29ab@G28e4@make-parameter (lambda (G2b12@x) ((lambda (G2b14@str) ((letrec ((G2b16@f (lambda (G2b18@ls G2b19@exts G2b1a@failed-list) (if (null? G2b18@ls) ((lambda () ((lambda (G2b26@G2b21 G2b28@G2b23 G2b2a@G2b22 G2b2d@G2b20 G2b2f@make-library-resolution-condition G2b31@G2b1e G2b33@G2b1f G2b35@library-resolution-condition? G2b37@condition-library G2b39@condition-files) (begin (set! G2b26@G2b21 (make-record-type-descriptor '&library-resolution G4cdf@G4a30@&condition-rtd 'G2b24 '#f '#f '#((immutable library) (immutable files)))) (set! G2b28@G2b23 '#f) (set! G2b2a@G2b22 (make-record-constructor-descriptor G2b26@G2b21 G4ce0@G4a32@&condition-rcd G2b28@G2b23)) (set! G2b2d@G2b20 (record-predicate G2b26@G2b21)) (set! G2b2f@make-library-resolution-condition (record-constructor G2b2a@G2b22)) (set! G2b31@G2b1e (record-accessor G2b26@G2b21 '0)) (set! G2b33@G2b1f (record-accessor G2b26@G2b21 '1)) (set! G2b35@library-resolution-condition? (condition-predicate G2b26@G2b21)) (set! G2b37@condition-library (condition-accessor G2b26@G2b21 G2b31@G2b1e)) (set! G2b39@condition-files (condition-accessor G2b26@G2b21 G2b33@G2b1f)) (raise (condition (G4cff@G4ac8@make-error) (G4d21@G4b22@make-who-condition 'expander) (G4ce5@G4a85@make-message-condition '"cannot locate library in library-path") (G2b2f@make-library-resolution-condition G2b12@x (reverse G2b1a@failed-list)))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (if (null? G2b19@exts) (G2b16@f (cdr G2b18@ls) (G2aab@library-extensions) G2b1a@failed-list) ((lambda (G2b3a@name) (if (file-exists? G2b3a@name) G2b3a@name (G2b16@f G2b18@ls (cdr G2b19@exts) (cons G2b3a@name G2b1a@failed-list)))) (string-append (car G2b18@ls) G2b14@str (car G2b19@exts)))))))) G2b16@f) (G2aa9@library-path) (G2aab@library-extensions) '())) (G2aad@library-name->file-name G2b12@x))) (lambda (G2b3c@f) (if (procedure? G2b3c@f) G2b3c@f (assertion-violation 'file-locator '"not a procedure" G2b3c@f))))) (set! G2ab1@serialize-all (lambda (G2b3e@serialize G2b3f@compile) ((lambda (G2b43@library-desc) (begin (set! G2b43@library-desc (lambda (G2b46@x) (list (G2a6b@library-id G2b46@x) (G2a6d@library-name G2b46@x)))) (for-each (lambda (G2b44@x) (if (G2a85@library-source-file-name G2b44@x) (G2b3e@serialize (G2a85@library-source-file-name G2b44@x) (list (G2a6b@library-id G2b44@x) (G2a6d@library-name G2b44@x) (G2a6f@library-version G2b44@x) (map G2b43@library-desc (G2a71@library-imp* G2b44@x)) (map G2b43@library-desc (G2a73@library-vis* G2b44@x)) (map G2b43@library-desc (G2a75@library-inv* G2b44@x)) (G2a77@library-subst G2b44@x) (G2a79@library-env G2b44@x) (G2b3f@compile (G2a7f@library-visit-code G2b44@x)) (G2b3f@compile (G2a81@library-invoke-code G2b44@x)) (G2a83@library-visible? G2b44@x))) (void))) ((G2a5a@current-library-collection))))) '#f))) (set! G2ab3@current-precompiled-library-loader (G29ab@G28e4@make-parameter (lambda (G2b48@filename G2b49@sk) '#f))) (set! G2ab5@try-load-from-file (lambda (G2b4c@filename) ((G2ab3@current-precompiled-library-loader) G2b4c@filename (lambda G2b72 ((lambda (G2b73) (if (= G2b73 '11) (apply (lambda (G2b4e@id G2b4f@name G2b50@ver G2b51@imp* G2b52@vis* G2b53@inv* G2b54@exp-subst G2b55@exp-env G2b56@visit-proc G2b57@invoke-proc G2b58@visible?) ((letrec ((G2b64@f (lambda (G2b66@deps) (if (null? G2b66@deps) (begin (G2ac9@install-library G2b4e@id G2b4f@name G2b50@ver G2b51@imp* G2b52@vis* G2b53@inv* G2b54@exp-subst G2b55@exp-env G2b56@visit-proc G2b57@invoke-proc '#f '#f G2b58@visible? '#f) '#t) ((lambda (G2b68@d) ((lambda (G2b6a@label G2b6b@dname) ((lambda (G2b6e@l) (if (and (G2a67@library? G2b6e@l) (eq? G2b6a@label (G2a6b@library-id G2b6e@l))) (G2b64@f (cdr G2b66@deps)) (begin (format (current-error-port) '"WARNING: library ~s has an inconsistent dependency \\\n                           on library ~s; file ~s will be recompiled from \\\n                           source. l=~a label=~a (library-id l)=~a\n" G2b4f@name G2b6b@dname G2b4c@filename G2b6e@l G2b6a@label (G2a6b@library-id G2b6e@l)) '#f))) (G2abf@find-library-by-name G2b6b@dname))) (car G2b68@d) (cadr G2b68@d))) (car G2b66@deps)))))) G2b64@f) (append G2b51@imp* G2b52@vis* G2b53@inv*))) G2b72) (if (>= G2b73 '0) (apply (lambda G2b70@others '#f) G2b72) (error 'apply '"invalid arg count")))) (length G2b72)))))) (set! G2ab7@library-loader (G29ab@G28e4@make-parameter (lambda (G2b74@x) ((lambda (G2b76@file-name) (if (not G2b76@file-name) (assertion-violation '#f '"cannot file library" G2b74@x) (or (G2ab5@try-load-from-file G2b76@file-name) ((G2ab9@current-library-expander) (G29aa@G28e2@read-library-source-file G2b76@file-name) G2b76@file-name (lambda (G2b78@name) (if (not (equal? G2b78@name G2b74@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (G2b7c@G2b7a G2b7d@G2b7b) ((lambda (G2b80@e G2b81@p) (begin (display '"expected to find library " G2b81@p) (write G2b74@x G2b81@p) (display '" in file " G2b81@p) (display G2b76@file-name G2b81@p) (display '", found " G2b81@p) (write G2b78@name G2b81@p) (display '" instead" G2b81@p) (G2b80@e))) G2b7d@G2b7b G2b7c@G2b7a)))) (void))))))) ((G2aaf@file-locator) G2b74@x))) (lambda (G2b84@f) (if (procedure? G2b84@f) G2b84@f (assertion-violation 'library-locator '"not a procedure" G2b84@f))))) (set! G2ab9@current-library-expander (G29ab@G28e4@make-parameter (lambda (G2b86@x) (assertion-violation 'library-expander '"not initialized")) (lambda (G2b88@f) (if (procedure? G2b88@f) G2b88@f (assertion-violation 'library-expander '"not a procedure" G2b88@f))))) (set! G2abb@external-pending-libraries (G29ab@G28e4@make-parameter '())) (set! G2abd@find-external-library (lambda (G2b8a@name) (begin (if (member G2b8a@name (G2abb@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" G2b8a@name) (void)) ((lambda (G2b8e@G2b8c@external-pending-libraries G2b8f@G2b8d@external-pending-libraries) ((lambda (G2b92@swap) (dynamic-wind G2b92@swap (lambda () (begin ((G2ab7@library-loader) G2b8a@name) (or (G2aa7@find-library-by (lambda (G2b94@x) (equal? (G2a6d@library-name G2b94@x) G2b8a@name))) (assertion-violation '#f '"handling external library did not yield the correct library" G2b8a@name)))) G2b92@swap)) (lambda () ((lambda (G2b96@t) (begin (G2b8e@G2b8c@external-pending-libraries G2b8f@G2b8d@external-pending-libraries) (set! G2b8f@G2b8d@external-pending-libraries G2b96@t))) (G2b8e@G2b8c@external-pending-libraries))))) G2abb@external-pending-libraries (cons G2b8a@name (G2abb@external-pending-libraries)))))) (set! G2abf@find-library-by-name (lambda (G2b98@name) (or (G2aa7@find-library-by (lambda (G2b9a@x) (equal? (G2a6d@library-name G2b9a@x) G2b98@name))) (G2abd@find-external-library G2b98@name)))) (set! G2ac1@library-exists? (lambda (G2b9c@name) (and (G2aa7@find-library-by (lambda (G2b9e@x) (equal? (G2a6d@library-name G2b9e@x) G2b9c@name))) '#t))) (set! G2ac3@find-library-by-spec/die (lambda (G2ba0@spec) ((lambda (G2ba2@id) (or (G2aa7@find-library-by (lambda (G2ba4@x) (eq? G2ba2@id (G2a6b@library-id G2ba4@x)))) (assertion-violation '#f '"cannot find library with required spec" G2ba0@spec))) (car G2ba0@spec)))) (set! G2ac5@label->binding-table (make-eq-hashtable)) (set! G2ac7@install-library-record (lambda (G2ba6@lib) (begin ((lambda (G2ba8@exp-env) (for-each (lambda (G2baa@x) ((lambda (G2bac@label G2bad@binding) ((lambda (G2bb0@binding) (hashtable-set! G2ac5@label->binding-table G2bac@label G2bb0@binding)) ((lambda (G2bb2@t) (if (memv G2bb2@t '(global)) (cons 'global (cons G2ba6@lib (cdr G2bad@binding))) (if (memv G2bb2@t '(global-macro)) (cons 'global-macro (cons G2ba6@lib (cdr G2bad@binding))) (if (memv G2bb2@t '(global-macro!)) (cons 'global-macro! (cons G2ba6@lib (cdr G2bad@binding))) G2bad@binding)))) (car G2bad@binding)))) (car G2baa@x) (cdr G2baa@x))) G2ba8@exp-env)) (G2a79@library-env G2ba6@lib)) ((G2a5a@current-library-collection) G2ba6@lib)))) (set! G2ac9@install-library (lambda (G2bb4@id G2bb5@name G2bb6@ver G2bb7@imp* G2bb8@vis* G2bb9@inv* G2bba@exp-subst G2bbb@exp-env G2bbc@visit-proc G2bbd@invoke-proc G2bbe@visit-code G2bbf@invoke-code G2bc0@visible? G2bc1@source-file-name) ((lambda (G2bd0@imp-lib* G2bd1@vis-lib* G2bd2@inv-lib*) (begin (if (not (and (symbol? G2bb4@id) (list? G2bb5@name) (list? G2bb6@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" G2bb4@id G2bb5@name G2bb6@ver) (void)) (if (G2ac1@library-exists? G2bb5@name) (assertion-violation 'install-library '"library is already installed" G2bb5@name) (void)) ((lambda (G2bd6@lib) (G2ac7@install-library-record G2bd6@lib)) (G2a69@make-library G2bb4@id G2bb5@name G2bb6@ver G2bd0@imp-lib* G2bd1@vis-lib* G2bd2@inv-lib* G2bba@exp-subst G2bbb@exp-env G2bbc@visit-proc G2bbd@invoke-proc G2bbe@visit-code G2bbf@invoke-code G2bc0@visible? G2bc1@source-file-name)))) (map G2ac3@find-library-by-spec/die G2bb7@imp*) (map G2ac3@find-library-by-spec/die G2bb8@vis*) (map G2ac3@find-library-by-spec/die G2bb9@inv*)))) (set! G2acb@imported-label->binding (lambda (G2bd8@lab) (hashtable-ref G2ac5@label->binding-table G2bd8@lab '#f))) (set! G2acd@invoke-library (lambda (G2bda@lib) ((lambda (G2bdc@invoke) (if (procedure? G2bdc@invoke) (begin (G2a99@set-library-invoke-state! G2bda@lib (lambda () (assertion-violation 'invoke '"circularity detected" G2bda@lib))) (for-each G2acd@invoke-library (G2a75@library-inv* G2bda@lib)) (G2a99@set-library-invoke-state! G2bda@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" G2bda@lib))) (G2bdc@invoke) (G2a99@set-library-invoke-state! G2bda@lib '#t)) (void))) (G2a7d@library-invoke-state G2bda@lib)))) (set! G2acf@visit-library (lambda (G2bde@lib) ((lambda (G2be0@visit) (if (procedure? G2be0@visit) (begin (G2a97@set-library-visit-state! G2bde@lib (lambda () (assertion-violation 'visit '"circularity detected" G2bde@lib))) (for-each G2acd@invoke-library (G2a73@library-vis* G2bde@lib)) (G2a97@set-library-visit-state! G2bde@lib (lambda () (assertion-violation 'invoke '"first visit did not return" G2bde@lib))) (G2be0@visit) (G2a97@set-library-visit-state! G2bde@lib '#t)) (void))) (G2a7b@library-visit-state G2bde@lib)))) (set! G2ad1@invoke-library-by-spec (lambda (G2be2@spec) (G2acd@invoke-library (G2ac3@find-library-by-spec/die G2be2@spec)))) (set! G2ad3@installed-libraries (lambda G2bea ((lambda (G2beb) (if (= G2beb '1) (apply (lambda (G2be4@all?) ((letrec ((G2be6@f (lambda (G2be8@ls) (if (null? G2be8@ls) '() (if (or G2be4@all? (G2a83@library-visible? (car G2be8@ls))) (cons (car G2be8@ls) (G2be6@f (cdr G2be8@ls))) (G2be6@f (cdr G2be8@ls))))))) G2be6@f) ((G2a5a@current-library-collection)))) G2bea) (if (= G2beb '0) (apply (lambda () (G2ad3@installed-libraries '#f)) G2bea) (error 'apply '"invalid arg count")))) (length G2bea)))) (set! G2ad5@library-spec (lambda (G2bec@x) (begin (if (not (G2a67@library? G2bec@x)) (assertion-violation 'library-spec '"not a library" G2bec@x) (void)) (list (G2a6b@library-id G2bec@x) (G2a6d@library-name G2bec@x) (G2a6f@library-version G2bec@x))))) (begin (set! G2c2a@G2ad5@library-spec G2ad5@library-spec) (set! G2c29@G2ad3@installed-libraries G2ad3@installed-libraries) (set! G2c28@G2ad1@invoke-library-by-spec G2ad1@invoke-library-by-spec) (set! G2c27@G2acf@visit-library G2acf@visit-library) (set! G2c26@G2acd@invoke-library G2acd@invoke-library) (set! G2c25@G2acb@imported-label->binding G2acb@imported-label->binding) (set! G2c24@G2ac9@install-library G2ac9@install-library) (set! G2c23@G2ac7@install-library-record G2ac7@install-library-record) (set! G2c22@G2ac5@label->binding-table G2ac5@label->binding-table) (set! G2c21@G2ac3@find-library-by-spec/die G2ac3@find-library-by-spec/die) (set! G2c20@G2ac1@library-exists? G2ac1@library-exists?) (set! G2c1f@G2abf@find-library-by-name G2abf@find-library-by-name) (set! G2c1e@G2abd@find-external-library G2abd@find-external-library) (set! G2c1d@G2abb@external-pending-libraries G2abb@external-pending-libraries) (set! G2c1c@G2ab9@current-library-expander G2ab9@current-library-expander) (set! G2c1b@G2ab7@library-loader G2ab7@library-loader) (set! G2c1a@G2ab5@try-load-from-file G2ab5@try-load-from-file) (set! G2c19@G2ab3@current-precompiled-library-loader G2ab3@current-precompiled-library-loader) (set! G2c18@G2ab1@serialize-all G2ab1@serialize-all) (set! G2c17@G2aaf@file-locator G2aaf@file-locator) (set! G2c16@G2aad@library-name->file-name G2aad@library-name->file-name) (set! G2c15@G2aab@library-extensions G2aab@library-extensions) (set! G2c14@G2aa9@library-path G2aa9@library-path) (set! G2c13@G2aa7@find-library-by G2aa7@find-library-by) (set! G2c12@G2aa5@find-dependencies G2aa5@find-dependencies) (set! G2c11@G2aa3@rp G2aa3@rp) (set! G2c10@G2aa1@set-library-source-file-name! G2aa1@set-library-source-file-name!) (set! G2c0f@G2a9f@set-library-visible?! G2a9f@set-library-visible?!) (set! G2c0e@G2a9d@set-library-invoke-code! G2a9d@set-library-invoke-code!) (set! G2c0d@G2a9b@set-library-visit-code! G2a9b@set-library-visit-code!) (set! G2c0c@G2a99@set-library-invoke-state! G2a99@set-library-invoke-state!) (set! G2c0b@G2a97@set-library-visit-state! G2a97@set-library-visit-state!) (set! G2c0a@G2a95@set-library-env! G2a95@set-library-env!) (set! G2c09@G2a93@set-library-subst! G2a93@set-library-subst!) (set! G2c08@G2a91@set-library-inv*! G2a91@set-library-inv*!) (set! G2c07@G2a8f@set-library-vis*! G2a8f@set-library-vis*!) (set! G2c06@G2a8d@set-library-imp*! G2a8d@set-library-imp*!) (set! G2c05@G2a8b@set-library-version! G2a8b@set-library-version!) (set! G2c04@G2a89@set-library-name! G2a89@set-library-name!) (set! G2c03@G2a87@set-library-id! G2a87@set-library-id!) (set! G2c02@G2a85@library-source-file-name G2a85@library-source-file-name) (set! G2c01@G2a83@library-visible? G2a83@library-visible?) (set! G2c00@G2a81@library-invoke-code G2a81@library-invoke-code) (set! G2bff@G2a7f@library-visit-code G2a7f@library-visit-code) (set! G2bfe@G2a7d@library-invoke-state G2a7d@library-invoke-state) (set! G2bfd@G2a7b@library-visit-state G2a7b@library-visit-state) (set! G2bfc@G2a79@library-env G2a79@library-env) (set! G2bfb@G2a77@library-subst G2a77@library-subst) (set! G2bfa@G2a75@library-inv* G2a75@library-inv*) (set! G2bf9@G2a73@library-vis* G2a73@library-vis*) (set! G2bf8@G2a71@library-imp* G2a71@library-imp*) (set! G2bf7@G2a6f@library-version G2a6f@library-version) (set! G2bf6@G2a6d@library-name G2a6d@library-name) (set! G2bf5@G2a6b@library-id G2a6b@library-id) (set! G2bf4@G2a69@make-library G2a69@make-library) (set! G2bf3@G2a67@library? G2a67@library?) (set! G2bf2@G2a64@G2a5c G2a64@G2a5c) (set! G2bf1@G2a62@G2a5d G2a62@G2a5d) (set! G2bf0@G2a60@G2a5b G2a60@G2a5b) (set! G2bef@G2a5a@current-library-collection G2a5a@current-library-collection) (set! G2bee@G2a58@make-collection G2a58@make-collection)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2c2d@build-global-define G2ca7@build-lambda G2ca9@build-case-lambda G2cab@build-let G2cdd@build-sequence G2cdf@build-void G2ce1@build-letrec G2ce3@build-letrec* G2ce5@build-library-letrec* G2ce7@build-receive) (begin (set! G2c2d@build-global-define (lambda (G2ce8@x) (G2cdf@build-void))) (set! G2ca7@build-lambda (lambda (G2cea@ae G2ceb@vars G2cec@exp) (list 'lambda G2ceb@vars G2cec@exp))) (set! G2ca9@build-case-lambda (lambda (G2cf0@ae G2cf1@vars* G2cf2@exp*) ((lambda (G2cf7@build-error G2cf9@build-pred G2cfb@build-apply G2cfd@expand-case-lambda) (begin (set! G2cf7@build-error (lambda (G2d2c@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! G2cf9@build-pred (lambda (G2d16@ae G2d17@n G2d18@vars) (call-with-values (lambda () ((letrec ((G2d1e@f (lambda (G2d20@vars G2d21@count) (if (pair? G2d20@vars) (G2d1e@f (cdr G2d20@vars) (+ G2d21@count '1)) (if (null? G2d20@vars) (values G2d21@count '=) (values G2d21@count '>=)))))) G2d1e@f) G2d18@vars '0)) (lambda (G2d24@G2d1c G2d25@G2d1d) ((lambda (G2d28@pred G2d29@count) (list (list 'primitive G2d28@pred) G2d17@n (list 'quote G2d29@count))) G2d25@G2d1d G2d24@G2d1c))))) (set! G2cfb@build-apply (lambda (G2d0e@ae G2d0f@g G2d10@vars G2d11@exp) (list '(primitive apply) (G2ca7@build-lambda G2d0e@ae G2d10@vars G2d11@exp) G2d0f@g))) (set! G2cfd@expand-case-lambda (lambda (G2cfe@ae G2cff@vars G2d00@exp*) ((lambda (G2d04@g G2d05@n) (list 'lambda G2d04@g (G2cab@build-let G2cfe@ae (list G2d05@n) (list (list '(primitive length) G2d04@g)) ((letrec ((G2d08@f (lambda (G2d0a@vars* G2d0b@exp*) (if (null? G2d0a@vars*) (G2cf7@build-error G2cfe@ae) (list 'if (G2cf9@build-pred G2cfe@ae G2d05@n (car G2d0a@vars*)) (G2cfb@build-apply G2cfe@ae G2d04@g (car G2d0a@vars*) (car G2d0b@exp*)) (G2d08@f (cdr G2d0a@vars*) (cdr G2d0b@exp*))))))) G2d08@f) G2cf1@vars* G2d00@exp*)))) (gensym) (gensym)))) (if (= (length G2cf2@exp*) '1) (G2ca7@build-lambda G2cf0@ae (car G2cf1@vars*) (car G2cf2@exp*)) (G2cfd@expand-case-lambda G2cf0@ae G2cf1@vars* G2cf2@exp*)))) '#f '#f '#f '#f))) (set! G2cab@build-let (lambda (G2d2e@ae G2d2f@lhs* G2d30@rhs* G2d31@body) (cons (G2ca7@build-lambda G2d2e@ae G2d2f@lhs* G2d31@body) G2d30@rhs*))) (set! G2cdd@build-sequence (lambda (G2d36@ae G2d37@exps) ((letrec ((G2d3a@loop (lambda (G2d3c@exps) (if (null? (cdr G2d3c@exps)) (car G2d3c@exps) (if (equal? (car G2d3c@exps) (G2cdf@build-void)) (G2d3a@loop (cdr G2d3c@exps)) (cons 'begin G2d3c@exps)))))) G2d3a@loop) G2d37@exps))) (set! G2cdf@build-void (lambda () '((primitive void)))) (set! G2ce1@build-letrec (lambda (G2d3e@ae G2d3f@vars G2d40@val-exps G2d41@body-exp) (if (null? G2d3f@vars) G2d41@body-exp (list 'letrec (map list G2d3f@vars G2d40@val-exps) G2d41@body-exp)))) (set! G2ce3@build-letrec* (lambda (G2d46@ae G2d47@vars G2d48@val-exps G2d49@body-exp) (if (null? G2d47@vars) G2d49@body-exp (G2cab@build-let G2d46@ae G2d47@vars (map (lambda (G2d4e@x) (list 'quote '#f)) G2d47@vars) (G2cdd@build-sequence G2d46@ae (append (map (lambda (G2d50@lhs G2d51@rhs) (list 'set! G2d50@lhs G2d51@rhs)) G2d47@vars G2d48@val-exps) (list G2d49@body-exp))))))) (set! G2ce5@build-library-letrec* (lambda (G2d54@ae G2d55@name G2d56@vars G2d57@locs G2d58@val-exps G2d59@body-exp) (list 'library-letrec* G2d55@name (map list G2d56@vars G2d57@locs G2d58@val-exps) G2d59@body-exp))) (set! G2ce7@build-receive (lambda (G2d60@ae G2d61@vars G2d62@producer G2d63@body*) (begin (display '"************** in ") (cons 'receive (cons G2d61@vars (cons G2d62@producer G2d63@body*)))))) (begin (set! G2d71@G2ce7@build-receive G2ce7@build-receive) (set! G2d70@G2ce5@build-library-letrec* G2ce5@build-library-letrec*) (set! G2d6f@G2ce3@build-letrec* G2ce3@build-letrec*) (set! G2d6e@G2ce1@build-letrec G2ce1@build-letrec) (set! G2d6d@G2cdf@build-void G2cdf@build-void) (set! G2d6c@G2cdd@build-sequence G2cdd@build-sequence) (set! G2d6b@G2cab@build-let G2cab@build-let) (set! G2d6a@G2ca9@build-case-lambda G2ca9@build-case-lambda) (set! G2d69@G2ca7@build-lambda G2ca7@build-lambda) (set! G2d68@G2c2d@build-global-define G2c2d@build-global-define)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G2d80@set-cons G2d82@set-union G2d87@top-mark* G2d89@top-marked? G2d8b@gen-lexical G2d8d@gen-global G2d8f@gen-label G2d91@gen-top-level-label G2d93@gen-define-label+loc G2d95@gen-define-label G2d9b@G2d96 G2d9d@G2d98 G2d9f@G2d97 G2da2@rib? G2da4@make-rib G2da6@rib-sym* G2da8@rib-mark** G2daa@rib-label* G2dac@rib-sealed/freq G2dae@rib-cache G2db0@set-rib-sym*! G2db2@set-rib-mark**! G2db4@set-rib-label*! G2db6@set-rib-sealed/freq! G2db8@set-rib-cache! G2dba@make-empty-rib G2dbc@make-cache-rib G2dbe@find-label G2dc0@extend-rib! G2dc2@extend-rib/nc! G2dc4@make-rib-map G2dc6@seal-rib! G2dc8@unseal-rib! G2dca@make-full-rib G2dd0@G2dcb G2dd2@G2dcd G2dd4@G2dcc G2dd7@stx? G2dd9@make-stx G2ddb@stx-expr G2ddd@stx-mark* G2ddf@stx-subst* G2de1@stx-ae* G2de3@set-stx-expr! G2de5@set-stx-mark*! G2de7@set-stx-subst*! G2de9@set-stx-ae*! G2deb@rp G2ded@datum->stx G2def@gen-mark G2df1@anti-mark G2df3@anti-mark? G2df5@join-wraps G2df7@mkstx G2df9@add-mark G2dfb@add-subst G2dfd@syntax-kind? G2dff@syntax-vector->list G2e01@syntax-pair? G2e03@syntax-vector? G2e05@syntax-null? G2e07@syntax-list? G2e09@syntax-car G2e0b@syntax-cdr G2e0d@syntax->list G2e0f@id? G2e11@id->sym G2e13@same-marks? G2e15@bound-id=? G2e17@free-id=? G2e19@valid-bound-ids? G2e1b@distinct-bound-ids? G2e1d@bound-id-member? G2e1f@self-evaluating? G2e21@strip-annotations G2e23@strip G2e25@stx->datum G2e27@same-marks*? G2e29@id->label G2e2b@id->real-label G2e2d@label->binding G2e2f@make-binding G2e31@binding-type G2e33@binding-value G2e35@raise-unbound-error G2e37@syntax-type G2e47@sanitize-binding G2e49@make-variable-transformer G2e4b@variable-transformer? G2e4d@variable-transformer-procedure G2e4f@make-eval-transformer G2f92@parse-define G2f94@parse-define-syntax G2f96@scheme-stx-hashtable G2f98@scheme-stx G2f9a@lexical-var G2f9c@lexical-mutable? G2f9e@set-lexical-mutable! G2fa0@add-lexical G2fa2@add-lexicals G2fa4@letrec-helper G2fa6@letrec-transformer G2fa8@letrec*-transformer G2faa@fluid-let-syntax-transformer G2fac@type-descriptor-transformer G2fae@record-type-descriptor-transformer G2fb0@record-constructor-descriptor-transformer G2fb2@when-macro G2fb4@unless-macro G2fb6@if-transformer G2fb8@and-transformer G2fba@or-transformer G2fbc@case-macro G2fbe@quote-transformer G2fc0@case-lambda-transformer G2fc2@lambda-transformer G2fc4@bless G2fc6@with-syntax-macro G2fc8@invalid-fmls-error G2fca@let-macro G2fcc@let-values-macro G2fce@let*-values-macro G2fd0@trace-lambda-macro G2fd2@trace-define-macro G2fd4@trace-define-syntax-macro G2fd6@trace-let/rec-syntax G2fd8@trace-let-syntax-macro G2fda@trace-letrec-syntax-macro G2fdc@guard-macro G2fde@define-enumeration-macro G2fe0@time-macro G2fe2@delay-macro G2fe4@assert-macro G2fe6@endianness-macro G2fe8@identifier-syntax-macro G2fea@do-macro G2fec@let*-macro G2fee@or-macro G2ff0@and-macro G2ff2@cond-macro G2ff4@do-include G2ff6@include-macro G2ff8@include-into-macro G2ffa@syntax-rules-macro G2ffc@quasiquote-macro G2ffe@quasisyntax-macro G3000@define-struct-macro G3002@define-record-type-macro G3004@define-condition-type-macro G3006@incorrect-usage-macro G3008@parameterize-macro G300a@foreign-call-transformer G300c@convert-pattern G300e@syntax-dispatch G3010@ellipsis? G3012@underscore? G3014@verify-literals G3016@syntax-case-transformer G3018@ellipsis-map G301a@syntax-transformer G301c@core-macro-transformer G301e@file-options-macro G3020@symbol-macro G3022@macro-transformer G3024@local-macro-transformer G3026@do-macro-call G3028@chi-macro G302a@chi-local-macro G302c@chi-global-macro G302e@chi-expr* G3030@chi-application G3032@chi-expr G3034@chi-set! G3036@verify-formals G3038@chi-lambda-clause G303a@chi-lambda-clause* G303c@chi-defun G303e@chi-rhs G3040@expand-interaction-rhs*/init* G3042@chi-rhs* G3044@find-bound=? G3046@find-dups G3048@chi-internal G304a@parse-module G3050@G304b G3052@G304d G3054@G304c G3057@module-interface? G3059@make-module-interface G305b@module-interface-first-mark G305d@module-interface-exp-id-vec G305f@module-interface-exp-lab-vec G3061@set-module-interface-first-mark! G3063@set-module-interface-exp-id-vec! G3065@set-module-interface-exp-lab-vec! G3067@module-interface-exp-id* G3069@chi-internal-module G306b@chi-body* G306d@expand-transformer G306f@parse-exports G3071@parse-library-name G3073@parse-library G3075@parse-import-spec* G3077@make-top-rib G3079@make-collector G307b@inv-collector G307d@vis-collector G307f@imp-collector G3081@chi-library-internal G3083@chi-interaction-expr G3085@library-body-expander G3087@core-library-expander G3089@parse-top-level-program G308b@top-level-expander G3091@G308c G3093@G308e G3095@G308d G3098@env? G309a@make-env G309c@env-names G309e@env-labels G30a0@env-itc G30a2@set-env-names! G30a4@set-env-labels! G30a6@set-env-itc! G30a8@rp G30ae@G30a9 G30b0@G30ab G30b2@G30aa G30b5@interaction-env? G30b7@make-interaction-env G30b9@interaction-env-rib G30bb@interaction-env-r G30bd@interaction-env-locs G30bf@set-interaction-env-rib! G30c1@set-interaction-env-r! G30c3@set-interaction-env-locs! G30c5@rp G30c7@interaction-environment-symbols G30c9@environment-bindings G30cb@parse-binding G30cd@environment? G30cf@environment-symbols G30d1@environment G30d3@null-environment G30d5@scheme-report-environment G30d7@expand G30d9@eval G30db@library-expander G30dd@boot-library-expand G30df@rev-map-append G30e1@build-exports G30e3@make-export-subst G30e5@make-export-env/macros G30e7@generate-temporaries G30e9@free-identifier=? G30eb@bound-identifier=? G30ed@make-source-condition G30ef@extract-position-condition G30f1@expression-position G30f3@assertion-error G30f5@syntax-error G30f7@extract-trace G30f9@syntax-violation* G30fb@syntax-violation G30fd@identifier? G30ff@datum->syntax G3101@syntax->datum G3103@compile-r6rs-top-level G3105@pre-compile-r6rs-top-level G3107@interaction-environment G3109@top-level-context) (begin (set! G2d80@set-cons (lambda (G310a@x G310b@ls) (if (memq G310a@x G310b@ls) G310b@ls (cons G310a@x G310b@ls)))) (set! G2d82@set-union (lambda (G310e@ls1 G310f@ls2) (if (null? G310e@ls1) G310f@ls2 (if (memq (car G310e@ls1) G310f@ls2) (G2d82@set-union (cdr G310e@ls1) G310f@ls2) (cons (car G310e@ls1) (G2d82@set-union (cdr G310e@ls1) G310f@ls2)))))) (set! G2d87@top-mark* '(top)) (set! G2d89@top-marked? (lambda (G3112@m*) (memq 'top G3112@m*))) (set! G2d8b@gen-lexical (lambda (G3114@sym) (if (symbol? G3114@sym) (gensym G3114@sym) (if (G2dd7@stx? G3114@sym) (G2d8b@gen-lexical (G2e11@id->sym G3114@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" G3114@sym))))) (set! G2d8d@gen-global (lambda (G3116@x) (G2d8b@gen-lexical G3116@x))) (set! G2d8f@gen-label (lambda (G3118@_) (gensym))) (set! G2d91@gen-top-level-label (lambda (G311a@id G311b@rib) ((lambda (G311f@find) (begin (set! G311f@find (lambda (G312a@sym G312b@mark* G312c@sym* G312d@mark** G312e@label*) (and (pair? G312c@sym*) (if (and (eq? G312a@sym (car G312c@sym*)) (G2e13@same-marks? G312b@mark* (car G312d@mark**))) (car G312e@label*) (G311f@find G312a@sym G312b@mark* (cdr G312c@sym*) (cdr G312d@mark**) (cdr G312e@label*)))))) ((lambda (G3120@sym G3121@mark*) ((lambda (G3124@sym*) ((lambda (G3126@t) (if G3126@t ((lambda (G3128@label) (if (G2c25@G2acb@imported-label->binding G3128@label) (gensym) G3128@label)) G3126@t) (gensym))) (and (memq G3120@sym (G2da6@rib-sym* G311b@rib)) (G311f@find G3120@sym G3121@mark* G3124@sym* (G2da8@rib-mark** G311b@rib) (G2daa@rib-label* G311b@rib))))) (G2da6@rib-sym* G311b@rib))) (G2e11@id->sym G311a@id) (G2ddd@stx-mark* G311a@id)))) '#f))) (set! G2d93@gen-define-label+loc (lambda (G3134@id G3135@rib) ((lambda (G3138@t) (if G3138@t ((lambda (G313a@env) ((lambda (G313c@label G313d@locs) (values G313c@label ((lambda (G3140@t) (if G3140@t (cdr G3140@t) ((lambda (G3142@loc) (begin (G30c3@set-interaction-env-locs! G313a@env (cons (cons G313c@label G3142@loc) G313d@locs)) G3142@loc)) (G2d8b@gen-lexical G3134@id)))) (assq G313c@label G313d@locs)))) (G2d91@gen-top-level-label G3134@id G3135@rib) (G30bd@interaction-env-locs G313a@env))) G3138@t) (values (gensym) (G2d8b@gen-lexical G3134@id)))) (G3109@top-level-context)))) (set! G2d95@gen-define-label (lambda (G3144@id G3145@rib) (if (G3109@top-level-context) (G2d91@gen-top-level-label G3144@id G3145@rib) (gensym)))) (set! G2d9b@G2d96 (make-record-type-descriptor 'rib '#f 'G2d99 '#t '#t '#((mutable sym*) (mutable mark**) (mutable label*) (mutable sealed/freq) (mutable cache)))) (set! G2d9d@G2d98 '#f) (set! G2d9f@G2d97 (make-record-constructor-descriptor G2d9b@G2d96 '#f G2d9d@G2d98)) (set! G2da2@rib? (record-predicate G2d9b@G2d96)) (set! G2da4@make-rib (record-constructor G2d9f@G2d97)) (set! G2da6@rib-sym* (record-accessor G2d9b@G2d96 '0)) (set! G2da8@rib-mark** (record-accessor G2d9b@G2d96 '1)) (set! G2daa@rib-label* (record-accessor G2d9b@G2d96 '2)) (set! G2dac@rib-sealed/freq (record-accessor G2d9b@G2d96 '3)) (set! G2dae@rib-cache (record-accessor G2d9b@G2d96 '4)) (set! G2db0@set-rib-sym*! (record-mutator G2d9b@G2d96 '0)) (set! G2db2@set-rib-mark**! (record-mutator G2d9b@G2d96 '1)) (set! G2db4@set-rib-label*! (record-mutator G2d9b@G2d96 '2)) (set! G2db6@set-rib-sealed/freq! (record-mutator G2d9b@G2d96 '3)) (set! G2db8@set-rib-cache! (record-mutator G2d9b@G2d96 '4)) (set! G2dba@make-empty-rib (lambda () (G2da4@make-rib '() '() '() '#f '#f))) (set! G2dbc@make-cache-rib (lambda () (G2da4@make-rib '() '() '() '#f (make-eq-hashtable)))) (set! G2dbe@find-label (lambda (G3148@rib G3149@sym G314a@mark*) ((lambda (G314e@ht) (and G314e@ht ((lambda (G3150@cv) ((lambda (G3152@t) (if G3152@t (cdr G3152@t) '#f)) (and G3150@cv (assp (lambda (G3154@m) (G2e13@same-marks? G314a@mark* G3154@m)) G3150@cv)))) (hashtable-ref G314e@ht G3149@sym '#f)))) (G2dae@rib-cache G3148@rib)))) (set! G2dc0@extend-rib! (lambda (G3156@rib G3157@id G3158@label) ((lambda (G315d@find) (begin (set! G315d@find (lambda (G316e@sym G316f@mark* G3170@sym* G3171@mark** G3172@label*) (and (pair? G3170@sym*) (if (and (eq? G316e@sym (car G3170@sym*)) (G2e13@same-marks? G316f@mark* (car G3171@mark**))) G3172@label* (G315d@find G316e@sym G316f@mark* (cdr G3170@sym*) (cdr G3171@mark**) (cdr G3172@label*)))))) (begin (if (G2dac@rib-sealed/freq G3156@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" G3156@rib) (void)) ((lambda (G315e@sym G315f@mark*) ((lambda (G3162@sym*) ((lambda (G3164@t) (if G3164@t ((lambda (G3166@p) (if (not (eq? G3158@label G3166@p)) (G30fb@syntax-violation '#f '"multiple definitions of identifier" G3157@id) (void))) G3164@t) ((lambda (G3168@t) (if G3168@t ((lambda (G316a@p) (if (not (eq? G3158@label (car G316a@p))) (if (G3109@top-level-context) (set-car! G316a@p G3158@label) (G30fb@syntax-violation '#f '"multiple definitions of identifier" G3157@id)) (void))) G3168@t) (begin (if (G2dae@rib-cache G3156@rib) (hashtable-update! (G2dae@rib-cache G3156@rib) G315e@sym (lambda (G316c@e) (cons (cons G315f@mark* G3158@label) G316c@e)) '()) (void)) (G2db0@set-rib-sym*! G3156@rib (cons G315e@sym G3162@sym*)) (G2db2@set-rib-mark**! G3156@rib (cons G315f@mark* (G2da8@rib-mark** G3156@rib))) (G2db4@set-rib-label*! G3156@rib (cons G3158@label (G2daa@rib-label* G3156@rib)))))) (and (memq G315e@sym (G2da6@rib-sym* G3156@rib)) (G315d@find G315e@sym G315f@mark* G3162@sym* (G2da8@rib-mark** G3156@rib) (G2daa@rib-label* G3156@rib)))))) (G2dbe@find-label G3156@rib G315e@sym G315f@mark*))) (G2da6@rib-sym* G3156@rib))) (G2e11@id->sym G3157@id) (G2ddd@stx-mark* G3157@id))))) '#f))) (set! G2dc2@extend-rib/nc! (lambda (G3178@rib G3179@id G317a@label) ((lambda (G317e@sym G317f@mark*) ((lambda (G3182@sym*) (begin (if (G2dae@rib-cache G3178@rib) (hashtable-update! (G2dae@rib-cache G3178@rib) G317e@sym (lambda (G3184@e) (cons (cons G317f@mark* G317a@label) G3184@e)) '()) (void)) (G2db0@set-rib-sym*! G3178@rib (cons G317e@sym G3182@sym*)) (G2db2@set-rib-mark**! G3178@rib (cons G317f@mark* (G2da8@rib-mark** G3178@rib))) (G2db4@set-rib-label*! G3178@rib (cons G317a@label (G2daa@rib-label* G3178@rib))))) (G2da6@rib-sym* G3178@rib))) (G2e11@id->sym G3179@id) (G2ddd@stx-mark* G3179@id)))) (set! G2dc4@make-rib-map (lambda (G3186@sym*) ((lambda (G3188@ht) ((letrec ((G318a@f (lambda (G318c@i G318d@sym*) (if (null? G318d@sym*) G3188@ht (begin (hashtable-update! G3188@ht (car G318d@sym*) (lambda (G3190@x) (cons G318c@i G3190@x)) '()) (G318a@f (+ G318c@i '1) (cdr G318d@sym*))))))) G318a@f) '0 G3186@sym*)) (make-eq-hashtable)))) (set! G2dc6@seal-rib! (lambda (G3192@rib) ((lambda (G3194@sym*) (if (not (null? G3194@sym*)) (begin (G2db0@set-rib-sym*! G3192@rib (list->vector G3194@sym*)) (G2db2@set-rib-mark**! G3192@rib (list->vector (G2da8@rib-mark** G3192@rib))) (G2db4@set-rib-label*! G3192@rib (list->vector (G2daa@rib-label* G3192@rib))) (G2db6@set-rib-sealed/freq! G3192@rib (G2dc4@make-rib-map G3194@sym*))) (void))) (G2da6@rib-sym* G3192@rib)))) (set! G2dc8@unseal-rib! (lambda (G3196@rib) (if (G2dac@rib-sealed/freq G3196@rib) (begin (G2db6@set-rib-sealed/freq! G3196@rib '#f) (G2db0@set-rib-sym*! G3196@rib (vector->list (G2da6@rib-sym* G3196@rib))) (G2db2@set-rib-mark**! G3196@rib (vector->list (G2da8@rib-mark** G3196@rib))) (G2db4@set-rib-label*! G3196@rib (vector->list (G2daa@rib-label* G3196@rib)))) (void)))) (set! G2dca@make-full-rib (lambda (G3198@id* G3199@label*) ((lambda (G319c@r) (begin (G2dc6@seal-rib! G319c@r) G319c@r)) (G2da4@make-rib (map G2e11@id->sym G3198@id*) (map G2ddd@stx-mark* G3198@id*) G3199@label* '#f '#f)))) (set! G2dd0@G2dcb (make-record-type-descriptor 'stx '#f 'G2dce '#t '#t '#((mutable expr) (mutable mark*) (mutable subst*) (mutable ae*)))) (set! G2dd2@G2dcd '#f) (set! G2dd4@G2dcc (make-record-constructor-descriptor G2dd0@G2dcb '#f G2dd2@G2dcd)) (set! G2dd7@stx? (record-predicate G2dd0@G2dcb)) (set! G2dd9@make-stx (record-constructor G2dd4@G2dcc)) (set! G2ddb@stx-expr (record-accessor G2dd0@G2dcb '0)) (set! G2ddd@stx-mark* (record-accessor G2dd0@G2dcb '1)) (set! G2ddf@stx-subst* (record-accessor G2dd0@G2dcb '2)) (set! G2de1@stx-ae* (record-accessor G2dd0@G2dcb '3)) (set! G2de3@set-stx-expr! (record-mutator G2dd0@G2dcb '0)) (set! G2de5@set-stx-mark*! (record-mutator G2dd0@G2dcb '1)) (set! G2de7@set-stx-subst*! (record-mutator G2dd0@G2dcb '2)) (set! G2de9@set-stx-ae*! (record-mutator G2dd0@G2dcb '3)) (set! G2deb@rp (G29a8@G28de@make-record-printer 'stx (lambda (G319e@x G319f@p G31a0@wr) (begin (display '"#<syntax " G319f@p) (write (G2e25@stx->datum G319e@x) G319f@p) ((lambda (G31a4@expr) (if (G29a0@G28ce@annotation? G31a4@expr) ((lambda (G31a6@src) (if (pair? G31a6@src) (begin (display '" [" G319f@p) (display (cdr G31a6@src) G319f@p) (display '" of " G319f@p) (display (car G31a6@src) G319f@p) (display '"]" G319f@p)) (void))) (G29a1@G28d0@annotation-source G31a4@expr)) (void))) (G2ddb@stx-expr G319e@x)) (display '">" G319f@p))))) (set! G2ded@datum->stx (lambda (G31a8@id G31a9@datum) (G2dd9@make-stx G31a9@datum (G2ddd@stx-mark* G31a8@id) (G2ddf@stx-subst* G31a8@id) (G2de1@stx-ae* G31a8@id)))) (set! G2def@gen-mark (lambda () (string '#\m))) (set! G2df1@anti-mark '#f) (set! G2df3@anti-mark? not) (set! G2df5@join-wraps (lambda (G31ac@m1* G31ad@s1* G31ae@ae1* G31af@e) ((lambda (G31b5@cancel) (begin (set! G31b5@cancel (lambda (G31bc@ls1 G31bd@ls2) ((letrec ((G31c0@f (lambda (G31c2@x G31c3@ls1) (if (null? G31c3@ls1) (cdr G31bd@ls2) (cons G31c2@x (G31c0@f (car G31c3@ls1) (cdr G31c3@ls1))))))) G31c0@f) (car G31bc@ls1) (cdr G31bc@ls1)))) ((lambda (G31b6@m2* G31b7@s2* G31b8@ae2*) (if (and (not (null? G31ac@m1*)) (not (null? G31b6@m2*)) (G2df3@anti-mark? (car G31b6@m2*))) (values (G31b5@cancel G31ac@m1* G31b6@m2*) (G31b5@cancel G31ad@s1* G31b7@s2*) (G31b5@cancel G31ae@ae1* G31b8@ae2*)) (values (append G31ac@m1* G31b6@m2*) (append G31ad@s1* G31b7@s2*) (append G31ae@ae1* G31b8@ae2*)))) (G2ddd@stx-mark* G31af@e) (G2ddf@stx-subst* G31af@e) (G2de1@stx-ae* G31af@e)))) '#f))) (set! G2df7@mkstx (lambda (G31c6@e G31c7@m* G31c8@s* G31c9@ae*) (if (and (G2dd7@stx? G31c6@e) (not (G2d89@top-marked? G31c7@m*))) (call-with-values (lambda () (G2df5@join-wraps G31c7@m* G31c8@s* G31c9@ae* G31c6@e)) (lambda (G31d1@G31ce G31d2@G31cf G31d3@G31d0) ((lambda (G31d7@ae* G31d8@s* G31d9@m*) (G2dd9@make-stx (G2ddb@stx-expr G31c6@e) G31d9@m* G31d8@s* G31d7@ae*)) G31d3@G31d0 G31d2@G31cf G31d1@G31ce))) (G2dd9@make-stx G31c6@e G31c7@m* G31c8@s* G31c9@ae*)))) (set! G2df9@add-mark (lambda (G31dd@m G31de@e G31df@ae) (G2df7@mkstx G31de@e (list G31dd@m) '(shift) (list G31df@ae)))) (set! G2dfb@add-subst (lambda (G31e3@subst G31e4@e) (G2df7@mkstx G31e4@e '() (list G31e3@subst) '()))) (set! G2dfd@syntax-kind? (lambda (G31e7@x G31e8@p?) (if (G2dd7@stx? G31e7@x) (G2dfd@syntax-kind? (G2ddb@stx-expr G31e7@x) G31e8@p?) (if (G29a0@G28ce@annotation? G31e7@x) (G2dfd@syntax-kind? (G29a2@G28d2@annotation-expression G31e7@x) G31e8@p?) (G31e8@p? G31e7@x))))) (set! G2dff@syntax-vector->list (lambda (G31eb@x) (if (G2dd7@stx? G31eb@x) ((lambda (G31ed@ls G31ee@m* G31ef@s* G31f0@ae*) (map (lambda (G31f5@x) (G2df7@mkstx G31f5@x G31ee@m* G31ef@s* G31f0@ae*)) G31ed@ls)) (G2dff@syntax-vector->list (G2ddb@stx-expr G31eb@x)) (G2ddd@stx-mark* G31eb@x) (G2ddf@stx-subst* G31eb@x) (G2de1@stx-ae* G31eb@x)) (if (G29a0@G28ce@annotation? G31eb@x) (G2dff@syntax-vector->list (G29a2@G28d2@annotation-expression G31eb@x)) (if (vector? G31eb@x) (vector->list G31eb@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" G31eb@x)))))) (set! G2e01@syntax-pair? (lambda (G31f7@x) (G2dfd@syntax-kind? G31f7@x pair?))) (set! G2e03@syntax-vector? (lambda (G31f9@x) (G2dfd@syntax-kind? G31f9@x vector?))) (set! G2e05@syntax-null? (lambda (G31fb@x) (G2dfd@syntax-kind? G31fb@x null?))) (set! G2e07@syntax-list? (lambda (G31fd@x) (or (G2e05@syntax-null? G31fd@x) (and (G2e01@syntax-pair? G31fd@x) (G2e07@syntax-list? (G2e0b@syntax-cdr G31fd@x)))))) (set! G2e09@syntax-car (lambda (G31ff@x) (if (G2dd7@stx? G31ff@x) (G2df7@mkstx (G2e09@syntax-car (G2ddb@stx-expr G31ff@x)) (G2ddd@stx-mark* G31ff@x) (G2ddf@stx-subst* G31ff@x) (G2de1@stx-ae* G31ff@x)) (if (G29a0@G28ce@annotation? G31ff@x) (G2e09@syntax-car (G29a2@G28d2@annotation-expression G31ff@x)) (if (pair? G31ff@x) (car G31ff@x) (assertion-violation 'syntax-car '"BUG: not a pair" G31ff@x)))))) (set! G2e0b@syntax-cdr (lambda (G3201@x) (if (G2dd7@stx? G3201@x) (G2df7@mkstx (G2e0b@syntax-cdr (G2ddb@stx-expr G3201@x)) (G2ddd@stx-mark* G3201@x) (G2ddf@stx-subst* G3201@x) (G2de1@stx-ae* G3201@x)) (if (G29a0@G28ce@annotation? G3201@x) (G2e0b@syntax-cdr (G29a2@G28d2@annotation-expression G3201@x)) (if (pair? G3201@x) (cdr G3201@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" G3201@x)))))) (set! G2e0d@syntax->list (lambda (G3203@x) (if (G2e01@syntax-pair? G3203@x) (cons (G2e09@syntax-car G3203@x) (G2e0d@syntax->list (G2e0b@syntax-cdr G3203@x))) (if (G2e05@syntax-null? G3203@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" G3203@x))))) (set! G2e0f@id? (lambda (G3205@x) (and (G2dd7@stx? G3205@x) ((lambda (G3207@expr) (symbol? (if (G29a0@G28ce@annotation? G3207@expr) (G299f@G28cc@annotation-stripped G3207@expr) G3207@expr))) (G2ddb@stx-expr G3205@x))))) (set! G2e11@id->sym (lambda (G3209@x) (begin (if (not (G2dd7@stx? G3209@x)) (error 'id->sym '"BUG in ikarus: not an id" G3209@x) (void)) ((lambda (G320b@expr) ((lambda (G320d@sym) (if (symbol? G320d@sym) G320d@sym (error 'id->sym '"BUG in ikarus: not an id" G3209@x))) (if (G29a0@G28ce@annotation? G320b@expr) (G299f@G28cc@annotation-stripped G320b@expr) G320b@expr))) (G2ddb@stx-expr G3209@x))))) (set! G2e13@same-marks? (lambda (G320f@x G3210@y) (or (and (null? G320f@x) (null? G3210@y)) (and (pair? G320f@x) (pair? G3210@y) (eq? (car G320f@x) (car G3210@y)) (G2e13@same-marks? (cdr G320f@x) (cdr G3210@y)))))) (set! G2e15@bound-id=? (lambda (G3213@x G3214@y) (and (eq? (G2e11@id->sym G3213@x) (G2e11@id->sym G3214@y)) (G2e13@same-marks? (G2ddd@stx-mark* G3213@x) (G2ddd@stx-mark* G3214@y))))) (set! G2e17@free-id=? (lambda (G3217@i G3218@j) ((lambda (G321b@t0 G321c@t1) (if (or G321b@t0 G321c@t1) (eq? G321b@t0 G321c@t1) (eq? (G2e11@id->sym G3217@i) (G2e11@id->sym G3218@j)))) (G2e2b@id->real-label G3217@i) (G2e2b@id->real-label G3218@j)))) (set! G2e19@valid-bound-ids? (lambda (G321f@id*) (and (for-all G2e0f@id? G321f@id*) (G2e1b@distinct-bound-ids? G321f@id*)))) (set! G2e1b@distinct-bound-ids? (lambda (G3221@id*) (or (null? G3221@id*) (and (not (G2e1d@bound-id-member? (car G3221@id*) (cdr G3221@id*))) (G2e1b@distinct-bound-ids? (cdr G3221@id*)))))) (set! G2e1d@bound-id-member? (lambda (G3223@id G3224@id*) (and (pair? G3224@id*) (or (G2e15@bound-id=? G3223@id (car G3224@id*)) (G2e1d@bound-id-member? G3223@id (cdr G3224@id*)))))) (set! G2e1f@self-evaluating? (lambda (G3227@x) (or (number? G3227@x) (string? G3227@x) (char? G3227@x) (boolean? G3227@x) (regexp? G3227@x) (bytevector? G3227@x)))) (set! G2e21@strip-annotations (lambda (G3229@x) (if (pair? G3229@x) (cons (G2e21@strip-annotations (car G3229@x)) (G2e21@strip-annotations (cdr G3229@x))) (if (vector? G3229@x) (vector-map G2e21@strip-annotations G3229@x) (if (G29a0@G28ce@annotation? G3229@x) (G299f@G28cc@annotation-stripped G3229@x) G3229@x))))) (set! G2e23@strip (lambda (G322b@x G322c@m*) (if (G2d89@top-marked? G322c@m*) (if (or (G29a0@G28ce@annotation? G322b@x) (and (pair? G322b@x) (G29a0@G28ce@annotation? (car G322b@x))) (and (vector? G322b@x) (> (vector-length G322b@x) '0) (G29a0@G28ce@annotation? (vector-ref G322b@x '0)))) (G2e21@strip-annotations G322b@x) G322b@x) ((letrec ((G322f@f (lambda (G3231@x) (if (G2dd7@stx? G3231@x) (G2e23@strip (G2ddb@stx-expr G3231@x) (G2ddd@stx-mark* G3231@x)) (if (G29a0@G28ce@annotation? G3231@x) (G299f@G28cc@annotation-stripped G3231@x) (if (pair? G3231@x) ((lambda (G3233@a G3234@d) (if (and (eq? G3233@a (car G3231@x)) (eq? G3234@d (cdr G3231@x))) G3231@x (cons G3233@a G3234@d))) (G322f@f (car G3231@x)) (G322f@f (cdr G3231@x))) (if (vector? G3231@x) ((lambda (G3237@old) ((lambda (G3239@new) (if (for-all eq? G3237@old G3239@new) G3231@x (list->vector G3239@new))) (map G322f@f G3237@old))) (vector->list G3231@x)) G3231@x))))))) G322f@f) G322b@x)))) (set! G2e25@stx->datum (lambda (G323b@x) (G2e23@strip G323b@x '()))) (set! G2e27@same-marks*? (lambda (G323d@mark* G323e@mark** G323f@si) (if (null? G323f@si) '#f (if (G2e13@same-marks? G323d@mark* (vector-ref G323e@mark** (car G323f@si))) (car G323f@si) (G2e27@same-marks*? G323d@mark* G323e@mark** (cdr G323f@si)))))) (set! G2e29@id->label (lambda (G3243@id) (or (G2e2b@id->real-label G3243@id) ((lambda (G3245@t) (if G3245@t ((lambda (G3247@env) ((lambda (G3249@rib) (call-with-values (lambda () (G2d93@gen-define-label+loc G3243@id G3249@rib)) (lambda (G324d@G324b G324e@G324c) ((lambda (G3251@loc_ G3252@lab) (begin (G2dc0@extend-rib! G3249@rib G3243@id G3252@lab) G3252@lab)) G324e@G324c G324d@G324b)))) (G30b9@interaction-env-rib G3247@env))) G3245@t) '#f)) (G3109@top-level-context))))) (set! G2e2b@id->real-label (lambda (G3255@id) ((lambda (G3257@sym) ((letrec ((G3259@search (lambda (G325b@subst* G325c@mark*) (if (null? G325b@subst*) '#f (if (eq? (car G325b@subst*) 'shift) (G3259@search (cdr G325b@subst*) (cdr G325c@mark*)) ((lambda (G325f@rib) ((lambda (G3261@t) (if G3261@t ((lambda (G3263@ht) ((lambda (G3265@si) ((lambda (G3267@i) (if G3267@i (vector-ref (G2daa@rib-label* G325f@rib) G3267@i) (G3259@search (cdr G325b@subst*) G325c@mark*))) (and G3265@si (G2e27@same-marks*? G325c@mark* (G2da8@rib-mark** G325f@rib) (reverse G3265@si))))) (hashtable-ref G3263@ht G3257@sym '#f))) G3261@t) (or (G2dbe@find-label G325f@rib G3257@sym G325c@mark*) ((letrec ((G3269@f (lambda (G326b@sym* G326c@mark** G326d@label*) (if (null? G326b@sym*) (G3259@search (cdr G325b@subst*) G325c@mark*) (if (and (eq? (car G326b@sym*) G3257@sym) (G2e13@same-marks? (car G326c@mark**) G325c@mark*)) (car G326d@label*) (G3269@f (cdr G326b@sym*) (cdr G326c@mark**) (cdr G326d@label*))))))) G3269@f) (G2da6@rib-sym* G325f@rib) (G2da8@rib-mark** G325f@rib) (G2daa@rib-label* G325f@rib))))) (G2dac@rib-sealed/freq G325f@rib))) (car G325b@subst*))))))) G3259@search) (G2ddf@stx-subst* G3255@id) (G2ddd@stx-mark* G3255@id))) (G2e11@id->sym G3255@id)))) (set! G2e2d@label->binding (lambda (G3271@x G3272@r) ((lambda (G3275@t) (if G3275@t ((lambda (G3277@b) (if (and (pair? G3277@b) (eq? (car G3277@b) '$core-rtd)) (cons '$rtd (map G2fc4@bless (cdr G3277@b))) (if (and (pair? G3277@b) (eq? (car G3277@b) 'global-rtd)) ((lambda (G3279@lib G327a@loc) (cons '$rtd (symbol-value G327a@loc))) (cadr G3277@b) (cddr G3277@b)) G3277@b))) G3275@t) ((lambda (G327d@t) (if G327d@t (cdr G327d@t) ((lambda (G327f@t) (if G327f@t ((lambda (G3281@env) ((lambda (G3283@t) (if G3283@t ((lambda (G3285@p) (cons* 'lexical (cdr G3285@p) '#f)) G3283@t) '(displaced-lexical . #f))) (assq G3271@x (G30bd@interaction-env-locs G3281@env)))) G327f@t) '(displaced-lexical . #f))) (G3109@top-level-context)))) (assq G3271@x G3272@r)))) (G2c25@G2acb@imported-label->binding G3271@x)))) (set! G2e2f@make-binding cons) (set! G2e31@binding-type car) (set! G2e33@binding-value cdr) (set! G2e35@raise-unbound-error (lambda (G3287@id) (G30f9@syntax-violation* '#f '"unbound identifier" G3287@id (G4d4f@G4b99@make-undefined-violation)))) (set! G2e37@syntax-type (lambda (G3289@e G328a@r) (if (G2e0f@id? G3289@e) ((lambda (G328d@id) ((lambda (G328f@label) ((lambda (G3291@b) ((lambda (G3293@type) ((lambda () (begin (if (not G328f@label) (G2e35@raise-unbound-error G328d@id) (void)) ((lambda (G3295@t) (if (memv G3295@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values G3293@type (G2e33@binding-value G3291@b) G328d@id) (values 'other '#f '#f))) G3293@type))))) (G2e31@binding-type G3291@b))) (G2e2d@label->binding G328f@label G328a@r))) (G2e29@id->label G328d@id))) G3289@e) (if (G2e01@syntax-pair? G3289@e) ((lambda (G3297@id) (if (G2e0f@id? G3297@id) ((lambda (G3299@label) ((lambda (G329b@b) ((lambda (G329d@type) ((lambda () (begin (if (not G3299@label) (G2e35@raise-unbound-error G3297@id) (void)) ((lambda (G329f@t) (if (memv G329f@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values G329d@type (G2e33@binding-value G329b@b) G3297@id) (values 'call '#f '#f))) G329d@type))))) (G2e31@binding-type G329b@b))) (G2e2d@label->binding G3299@label G328a@r))) (G2e29@id->label G3297@id)) (values 'call '#f '#f))) (G2e09@syntax-car G3289@e)) ((lambda (G32a1@d) (if (G2e1f@self-evaluating? G32a1@d) (values 'constant G32a1@d '#f) (values 'other '#f '#f))) (G2e25@stx->datum G3289@e)))))) (set! G2e47@sanitize-binding (lambda (G32a3@x G32a4@src) (if (procedure? G32a3@x) (cons* 'local-macro G32a3@x G32a4@src) (if (and (pair? G32a3@x) (eq? (car G32a3@x) 'macro!) (procedure? (cdr G32a3@x))) (cons* 'local-macro! (cdr G32a3@x) G32a4@src) (if (and (pair? G32a3@x) (eq? (car G32a3@x) '$rtd)) G32a3@x (assertion-violation 'expand '"invalid transformer" G32a3@x)))))) (set! G2e49@make-variable-transformer (lambda (G32a7@x) (if (procedure? G32a7@x) (cons 'macro! G32a7@x) (assertion-violation 'make-variable-transformer '"not a procedure" G32a7@x)))) (set! G2e4b@variable-transformer? (lambda (G32a9@x) (and (pair? G32a9@x) (eq? (car G32a9@x) 'macro!) (procedure? (cdr G32a9@x))))) (set! G2e4d@variable-transformer-procedure (lambda (G32ab@x) (if (G2e4b@variable-transformer? G32ab@x) (cdr G32ab@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" G32ab@x)))) (set! G2e4f@make-eval-transformer (lambda (G32ad@x) (G2e47@sanitize-binding (eval-core (G29ff@G29b7@expanded->core G32ad@x)) G32ad@x))) (set! G2f92@parse-define (lambda (G32af@x) ((lambda (G32b1@t) ((lambda (G32b3@ls/false) (if (and G32b3@ls/false (apply (lambda (G32b5@id G32b6@fmls G32b7@b G32b8@b*) (G2e0f@id? G32b5@id)) G32b3@ls/false)) (apply (lambda (G32bd@id G32be@fmls G32bf@b G32c0@b*) (begin (G3036@verify-formals G32be@fmls G32af@x) (values G32bd@id (cons 'defun (cons G32be@fmls (cons G32bf@b G32c0@b*)))))) G32b3@ls/false) ((lambda (G32c5@t) ((lambda (G32c7@ls/false) (if (and G32c7@ls/false (apply (lambda (G32c9@id G32ca@val) (G2e0f@id? G32c9@id)) G32c7@ls/false)) (apply (lambda (G32cd@id G32ce@val) (values G32cd@id (cons 'expr G32ce@val))) G32c7@ls/false) ((lambda (G32d1@t) ((lambda (G32d3@ls/false) (if (and G32d3@ls/false (apply (lambda (G32d5@id) (G2e0f@id? G32d5@id)) G32d3@ls/false)) (apply (lambda (G32d7@id) (values G32d7@id (cons 'expr (G2fc4@bless '(void))))) G32d3@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G32d1@t))) (G300e@syntax-dispatch G32d1@t '(_ any)))) G32c5@t))) (G300e@syntax-dispatch G32c5@t '(_ any any)))) G32b1@t))) (G300e@syntax-dispatch G32b1@t '(_ (any . any) any . each-any)))) G32af@x))) (set! G2f94@parse-define-syntax (lambda (G32d9@x) ((lambda (G32db@t) ((lambda (G32dd@ls/false) (if (and G32dd@ls/false (apply (lambda (G32df@id G32e0@val) (G2e0f@id? G32df@id)) G32dd@ls/false)) (apply (lambda (G32e3@id G32e4@val) (values G32e3@id G32e4@val)) G32dd@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G32db@t))) (G300e@syntax-dispatch G32db@t '(_ any any)))) G32d9@x))) (set! G2f96@scheme-stx-hashtable (make-eq-hashtable)) (set! G2f98@scheme-stx (lambda (G32e7@sym) (or (hashtable-ref G2f96@scheme-stx-hashtable G32e7@sym '#f) ((lambda (G32e9@subst) ((lambda (G32eb@stx) ((lambda (G32ed@stx) ((lambda () (begin (hashtable-set! G2f96@scheme-stx-hashtable G32e7@sym G32ed@stx) G32ed@stx)))) ((lambda (G32ef@t) (if G32ef@t ((lambda (G32f1@x) ((lambda (G32f3@name G32f4@label) (G2dfb@add-subst (G2da4@make-rib (list G32f3@name) (list G2d87@top-mark*) (list G32f4@label) '#f '#f) G32eb@stx)) (car G32f1@x) (cdr G32f1@x))) G32ef@t) G32eb@stx)) (assq G32e7@sym G32e9@subst)))) (G2dd9@make-stx G32e7@sym G2d87@top-mark* '() '()))) (G2bfb@G2a77@library-subst (G2c1f@G2abf@find-library-by-name '(psyntax system $all))))))) (set! G2f9a@lexical-var car) (set! G2f9c@lexical-mutable? cdr) (set! G2f9e@set-lexical-mutable! set-cdr!) (set! G2fa0@add-lexical (lambda (G32f7@lab G32f8@lex G32f9@r) (cons (cons* G32f7@lab 'lexical G32f8@lex '#f) G32f9@r))) (set! G2fa2@add-lexicals (lambda (G32fd@lab* G32fe@lex* G32ff@r) (if (null? G32fd@lab*) G32ff@r (G2fa2@add-lexicals (cdr G32fd@lab*) (cdr G32fe@lex*) (G2fa0@add-lexical (car G32fd@lab*) (car G32fe@lex*) G32ff@r))))) (set! G2fa4@letrec-helper (lambda (G3303@e G3304@r G3305@mr G3306@build) ((lambda (G330b@t) ((lambda (G330d@ls/false) (if G330d@ls/false (apply (lambda (G330f@lhs* G3310@rhs* G3311@b G3312@b*) (if (not (G2e19@valid-bound-ids? G330f@lhs*)) (G2fc8@invalid-fmls-error G3303@e G330f@lhs*) ((lambda (G3317@lex* G3318@lab*) ((lambda (G331b@rib G331c@r) ((lambda (G331f@body G3320@rhs*) (G3306@build '#f G3317@lex* G3320@rhs* G331f@body)) (G3048@chi-internal (G2dfb@add-subst G331b@rib (cons G3311@b G3312@b*)) G331c@r G3305@mr) (G302e@chi-expr* (map (lambda (G3323@x) (G2dfb@add-subst G331b@rib G3323@x)) G3310@rhs*) G331c@r G3305@mr))) (G2dca@make-full-rib G330f@lhs* G3318@lab*) (G2fa2@add-lexicals G3318@lab* G3317@lex* G3304@r))) (map G2d8b@gen-lexical G330f@lhs*) (map G2d8f@gen-label G330f@lhs*)))) G330d@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G330b@t))) (G300e@syntax-dispatch G330b@t '(_ #(each (any any)) any . each-any)))) G3303@e))) (set! G2fa6@letrec-transformer (lambda (G3325@e G3326@r G3327@mr) (G2fa4@letrec-helper G3325@e G3326@r G3327@mr G2d6e@G2ce1@build-letrec))) (set! G2fa8@letrec*-transformer (lambda (G332b@e G332c@r G332d@mr) (G2fa4@letrec-helper G332b@e G332c@r G332d@mr G2d6f@G2ce3@build-letrec*))) (set! G2faa@fluid-let-syntax-transformer (lambda (G3331@e G3332@r G3333@mr) ((lambda (G3338@lookup) (begin (set! G3338@lookup (lambda (G334b@x) (or (G2e29@id->label G334b@x) (G30fb@syntax-violation '#f '"unbound identifier" G3331@e G334b@x)))) ((lambda (G3339@t) ((lambda (G333b@ls/false) (if G333b@ls/false (apply (lambda (G333d@lhs* G333e@rhs* G333f@b G3340@b*) (if (not (G2e19@valid-bound-ids? G333d@lhs*)) (G2fc8@invalid-fmls-error G3331@e G333d@lhs*) ((lambda (G3345@lab* G3346@rhs*) (G3048@chi-internal (cons G333f@b G3340@b*) (append (map cons G3345@lab* G3346@rhs*) G3332@r) (append (map cons G3345@lab* G3346@rhs*) G3333@mr))) (map G3338@lookup G333d@lhs*) (map (lambda (G3349@x) (G2e4f@make-eval-transformer (G306d@expand-transformer G3349@x G3333@mr))) G333e@rhs*)))) G333b@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3339@t))) (G300e@syntax-dispatch G3339@t '(_ #(each (any any)) any . each-any)))) G3331@e))) '#f))) (set! G2fac@type-descriptor-transformer (lambda (G334d@e G334e@r G334f@mr) ((lambda (G3353@t) ((lambda (G3355@ls/false) (if (and G3355@ls/false (apply (lambda (G3357@id) (G2e0f@id? G3357@id)) G3355@ls/false)) (apply (lambda (G3359@id) ((lambda (G335b@lab) ((lambda (G335d@b) ((lambda (G335f@type) ((lambda () (begin (if (not G335b@lab) (G2e35@raise-unbound-error G3359@id) (void)) (if (not (and (eq? G335f@type '$rtd) (not (list? (G2e33@binding-value G335d@b))))) (G30fb@syntax-violation '#f '"not a record type" G334d@e) (void)) (list 'quote (G2e33@binding-value G335d@b)))))) (G2e31@binding-type G335d@b))) (G2e2d@label->binding G335b@lab G334e@r))) (G2e29@id->label G3359@id))) G3355@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3353@t))) (G300e@syntax-dispatch G3353@t '(_ any)))) G334d@e))) (set! G2fae@record-type-descriptor-transformer (lambda (G3361@e G3362@r G3363@mr) ((lambda (G3367@t) ((lambda (G3369@ls/false) (if (and G3369@ls/false (apply (lambda (G336b@id) (G2e0f@id? G336b@id)) G3369@ls/false)) (apply (lambda (G336d@id) ((lambda (G336f@lab) ((lambda (G3371@b) ((lambda (G3373@type) ((lambda () (begin (if (not G336f@lab) (G2e35@raise-unbound-error G336d@id) (void)) (if (not (and (eq? G3373@type '$rtd) (list? (G2e33@binding-value G3371@b)))) (G30fb@syntax-violation '#f '"not a record type" G3361@e) (void)) (G3032@chi-expr (car (G2e33@binding-value G3371@b)) G3362@r G3363@mr))))) (G2e31@binding-type G3371@b))) (G2e2d@label->binding G336f@lab G3362@r))) (G2e29@id->label G336d@id))) G3369@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3367@t))) (G300e@syntax-dispatch G3367@t '(_ any)))) G3361@e))) (set! G2fb0@record-constructor-descriptor-transformer (lambda (G3375@e G3376@r G3377@mr) ((lambda (G337b@t) ((lambda (G337d@ls/false) (if (and G337d@ls/false (apply (lambda (G337f@id) (G2e0f@id? G337f@id)) G337d@ls/false)) (apply (lambda (G3381@id) ((lambda (G3383@lab) ((lambda (G3385@b) ((lambda (G3387@type) ((lambda () (begin (if (not G3383@lab) (G2e35@raise-unbound-error G3381@id) (void)) (if (not (and (eq? G3387@type '$rtd) (list? (G2e33@binding-value G3385@b)))) (G30fb@syntax-violation '#f '"invalid type" G3375@e) (void)) (G3032@chi-expr (cadr (G2e33@binding-value G3385@b)) G3376@r G3377@mr))))) (G2e31@binding-type G3385@b))) (G2e2d@label->binding G3383@lab G3376@r))) (G2e29@id->label G3381@id))) G337d@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G337b@t))) (G300e@syntax-dispatch G337b@t '(_ any)))) G3375@e))) (set! G2fb2@when-macro (lambda (G3389@e) ((lambda (G338b@t) ((lambda (G338d@ls/false) (if G338d@ls/false (apply (lambda (G338f@test G3390@e G3391@e*) (G2fc4@bless (list 'if G338f@test (cons 'begin (cons G3390@e G3391@e*))))) G338d@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G338b@t))) (G300e@syntax-dispatch G338b@t '(_ any any . each-any)))) G3389@e))) (set! G2fb4@unless-macro (lambda (G3395@e) ((lambda (G3397@t) ((lambda (G3399@ls/false) (if G3399@ls/false (apply (lambda (G339b@test G339c@e G339d@e*) (G2fc4@bless (list 'if (list 'not G339b@test) (cons 'begin (cons G339c@e G339d@e*))))) G3399@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3397@t))) (G300e@syntax-dispatch G3397@t '(_ any any . each-any)))) G3395@e))) (set! G2fb6@if-transformer (lambda (G33a1@e G33a2@r G33a3@mr) ((lambda (G33a7@t) ((lambda (G33a9@ls/false) (if G33a9@ls/false (apply (lambda (G33ab@e0 G33ac@e1 G33ad@e2) (list 'if (G3032@chi-expr G33ab@e0 G33a2@r G33a3@mr) (G3032@chi-expr G33ac@e1 G33a2@r G33a3@mr) (G3032@chi-expr G33ad@e2 G33a2@r G33a3@mr))) G33a9@ls/false) ((lambda (G33b1@t) ((lambda (G33b3@ls/false) (if G33b3@ls/false (apply (lambda (G33b5@e0 G33b6@e1) (list 'if (G3032@chi-expr G33b5@e0 G33a2@r G33a3@mr) (G3032@chi-expr G33b6@e1 G33a2@r G33a3@mr) (G2d6d@G2cdf@build-void))) G33b3@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G33b1@t))) (G300e@syntax-dispatch G33b1@t '(_ any any)))) G33a7@t))) (G300e@syntax-dispatch G33a7@t '(_ any any any)))) G33a1@e))) (set! G2fb8@and-transformer (lambda (G33b9@e G33ba@r G33bb@mr) ((lambda (G33bf@t) ((lambda (G33c1@ls/false) (if G33c1@ls/false (apply (lambda (G33c3@e*) (cons 'and (G302e@chi-expr* G33c3@e* G33ba@r G33bb@mr))) G33c1@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G33bf@t))) (G300e@syntax-dispatch G33bf@t '(_ . each-any)))) G33b9@e))) (set! G2fba@or-transformer (lambda (G33c5@e G33c6@r G33c7@mr) ((lambda (G33cb@t) ((lambda (G33cd@ls/false) (if G33cd@ls/false (apply (lambda (G33cf@e*) (cons 'or (G302e@chi-expr* G33cf@e* G33c6@r G33c7@mr))) G33cd@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G33cb@t))) (G300e@syntax-dispatch G33cb@t '(_ . each-any)))) G33c5@e))) (set! G2fbc@case-macro (lambda (G33d1@e) ((lambda (G33d4@build-last G33d6@build-one) (begin (set! G33d4@build-last (lambda (G33fb@cls) ((lambda (G33fd@t) ((lambda (G33ff@ls/false) (if G33ff@ls/false (apply (lambda (G3401@e G3402@e*) (cons 'begin (cons G3401@e G3402@e*))) G33ff@ls/false) ((lambda (G3405@t) ((lambda (G3407@ls/false) (if G3407@ls/false (apply (lambda () (G33d6@build-one G33fb@cls '(if #f #f))) G3407@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3405@t))) (G300e@syntax-dispatch G3405@t '_))) G33fd@t))) (G300e@syntax-dispatch G33fd@t '(#(scheme-id else) any . each-any)))) G33fb@cls))) (set! G33d6@build-one (lambda (G33ed@cls G33ee@k) ((lambda (G33f1@t) ((lambda (G33f3@ls/false) (if G33f3@ls/false (apply (lambda (G33f5@d* G33f6@e G33f7@e*) (list 'if (list 'memv 't (list 'quote G33f5@d*)) (cons 'begin (cons G33f6@e G33f7@e*)) G33ee@k)) G33f3@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G33f1@t))) (G300e@syntax-dispatch G33f1@t '(each-any any . each-any)))) G33ed@cls))) ((lambda (G33d7@t) ((lambda (G33d9@ls/false) (if G33d9@ls/false (apply (lambda (G33db@expr) (G2fc4@bless (cons 'let (cons (list (list 't G33db@expr)) '((if #f #f)))))) G33d9@ls/false) ((lambda (G33dd@t) ((lambda (G33df@ls/false) (if G33df@ls/false (apply (lambda (G33e1@expr G33e2@cls G33e3@cls*) (G2fc4@bless (list 'let (list (list 't G33e1@expr)) ((letrec ((G33e7@f (lambda (G33e9@cls G33ea@cls*) (if (null? G33ea@cls*) (G33d4@build-last G33e9@cls) (G33d6@build-one G33e9@cls (G33e7@f (car G33ea@cls*) (cdr G33ea@cls*))))))) G33e7@f) G33e2@cls G33e3@cls*)))) G33df@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G33dd@t))) (G300e@syntax-dispatch G33dd@t '(_ any any . each-any)))) G33d7@t))) (G300e@syntax-dispatch G33d7@t '(_ any)))) G33d1@e))) '#f '#f))) (set! G2fbe@quote-transformer (lambda (G3409@e G340a@r G340b@mr) ((lambda (G340f@t) ((lambda (G3411@ls/false) (if G3411@ls/false (apply (lambda (G3413@datum) (list 'quote (G2e25@stx->datum G3413@datum))) G3411@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G340f@t))) (G300e@syntax-dispatch G340f@t '(_ any)))) G3409@e))) (set! G2fc0@case-lambda-transformer (lambda (G3415@e G3416@r G3417@mr) ((lambda (G341b@t) ((lambda (G341d@ls/false) (if G341d@ls/false (apply (lambda (G341f@fmls* G3420@b* G3421@b**) (call-with-values (lambda () (G303a@chi-lambda-clause* G3415@e G341f@fmls* (map cons G3420@b* G3421@b**) G3416@r G3417@mr)) (lambda (G3427@G3425 G3428@G3426) ((lambda (G342b@body* G342c@fmls*) (G2d6a@G2ca9@build-case-lambda '#f G342c@fmls* G342b@body*)) G3428@G3426 G3427@G3425)))) G341d@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G341b@t))) (G300e@syntax-dispatch G341b@t '(_ . #(each (any any . each-any)))))) G3415@e))) (set! G2fc2@lambda-transformer (lambda (G342f@e G3430@r G3431@mr) ((lambda (G3435@t) ((lambda (G3437@ls/false) (if G3437@ls/false (apply (lambda (G3439@fmls G343a@b G343b@b*) (call-with-values (lambda () (G3038@chi-lambda-clause G342f@e G3439@fmls (cons G343a@b G343b@b*) G3430@r G3431@mr)) (lambda (G3441@G343f G3442@G3440) ((lambda (G3445@body G3446@fmls) (G2d69@G2ca7@build-lambda '#f G3446@fmls G3445@body)) G3442@G3440 G3441@G343f)))) G3437@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3435@t))) (G300e@syntax-dispatch G3435@t '(_ any any . each-any)))) G342f@e))) (set! G2fc4@bless (lambda (G3449@x) (G2df7@mkstx ((letrec ((G344b@f (lambda (G344d@x) (if (G2dd7@stx? G344d@x) G344d@x (if (pair? G344d@x) (cons (G344b@f (car G344d@x)) (G344b@f (cdr G344d@x))) (if (symbol? G344d@x) (G2f98@scheme-stx G344d@x) (if (vector? G344d@x) (vector-map G344b@f G344d@x) G344d@x))))))) G344b@f) G3449@x) '() '() '()))) (set! G2fc6@with-syntax-macro (lambda (G344f@e) ((lambda (G3451@t) ((lambda (G3453@ls/false) (if G3453@ls/false (apply (lambda (G3455@pat* G3456@expr* G3457@b G3458@b*) ((lambda (G345d@idn*) (begin (G3036@verify-formals (map car G345d@idn*) G344f@e) ((lambda (G345f@t*) (G2fc4@bless (list 'let (map list G345f@t* G3456@expr*) ((letrec ((G3461@f (lambda (G3463@pat* G3464@t*) (if (null? G3463@pat*) (cons 'begin (cons '#f (cons G3457@b G3458@b*))) (list 'syntax-case (car G3464@t*) '() (list (car G3463@pat*) (G3461@f (cdr G3463@pat*) (cdr G3464@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car G3463@pat*)) (car G3464@t*)))))))) G3461@f) G3455@pat* G345f@t*)))) (G30e7@generate-temporaries G3456@expr*)))) ((letrec ((G3467@f (lambda (G3469@pat*) (if (null? G3469@pat*) '() (call-with-values (lambda () (G300c@convert-pattern (car G3469@pat*) '())) (lambda (G346d@G346b G346e@G346c) ((lambda (G3471@idn* G3472@pat) (append G3471@idn* (G3467@f (cdr G3469@pat*)))) G346e@G346c G346d@G346b))))))) G3467@f) G3455@pat*))) G3453@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3451@t))) (G300e@syntax-dispatch G3451@t '(_ #(each (any any)) any . each-any)))) G344f@e))) (set! G2fc8@invalid-fmls-error (lambda (G3475@stx G3476@fmls) ((lambda (G3479@t) ((lambda (G347b@ls/false) (if G347b@ls/false (apply (lambda (G347d@id* G347e@last) ((letrec ((G3481@f (lambda (G3483@id*) (if (null? G3483@id*) (values) (if (not (G2e0f@id? (car G3483@id*))) (G30fb@syntax-violation '#f '"not an identifier" G3475@stx (car G3483@id*)) (begin (G3481@f (cdr G3483@id*)) (if (G2e1d@bound-id-member? (car G3483@id*) (cdr G3483@id*)) (G30fb@syntax-violation '#f '"duplicate binding" G3475@stx (car G3483@id*)) (void)))))))) G3481@f) (if (G2e0f@id? G347e@last) (cons G347e@last G347d@id*) (if (G2e05@syntax-null? G347e@last) G347d@id* (G30fb@syntax-violation '#f '"not an identifier" G3475@stx G347e@last))))) G347b@ls/false) ((lambda (G3485@t) ((lambda (G3487@ls/false) (if G3487@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"malformed binding form" G3475@stx G3476@fmls)) G3487@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3485@t))) (G300e@syntax-dispatch G3485@t '_))) G3479@t))) (G300e@syntax-dispatch G3479@t '#(each+ any () any)))) G3476@fmls))) (set! G2fca@let-macro (lambda (G3489@stx) ((lambda (G348b@t) ((lambda (G348d@ls/false) (if G348d@ls/false (apply (lambda (G348f@lhs* G3490@rhs* G3491@b G3492@b*) (if (G2e19@valid-bound-ids? G348f@lhs*) (G2fc4@bless (cons (cons 'lambda (cons G348f@lhs* (cons G3491@b G3492@b*))) G3490@rhs*)) (G2fc8@invalid-fmls-error G3489@stx G348f@lhs*))) G348d@ls/false) ((lambda (G3497@t) ((lambda (G3499@ls/false) (if (and G3499@ls/false (apply (lambda (G349b@f G349c@lhs* G349d@rhs* G349e@b G349f@b*) (G2e0f@id? G349b@f)) G3499@ls/false)) (apply (lambda (G34a5@f G34a6@lhs* G34a7@rhs* G34a8@b G34a9@b*) (if (G2e19@valid-bound-ids? G34a6@lhs*) (G2fc4@bless (cons (list 'letrec (list (list G34a5@f (cons 'lambda (cons G34a6@lhs* (cons G34a8@b G34a9@b*))))) G34a5@f) G34a7@rhs*)) (G2fc8@invalid-fmls-error G3489@stx G34a6@lhs*))) G3499@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3497@t))) (G300e@syntax-dispatch G3497@t '(_ any #(each (any any)) any . each-any)))) G348b@t))) (G300e@syntax-dispatch G348b@t '(_ #(each (any any)) any . each-any)))) G3489@stx))) (set! G2fcc@let-values-macro (lambda (G34af@stx) ((lambda (G34b2@rename G34b4@rename*) (begin (set! G34b2@rename (lambda (G3514@x G3515@old* G3516@new*) (begin (if (not (G2e0f@id? G3514@x)) (G30fb@syntax-violation '#f '"not an indentifier" G34af@stx G3514@x) (void)) (if (G2e1d@bound-id-member? G3514@x G3515@old*) (G30fb@syntax-violation '#f '"duplicate binding" G34af@stx G3514@x) (void)) ((lambda (G351a@y) (values G351a@y (cons G3514@x G3515@old*) (cons G351a@y G3516@new*))) (gensym (G3101@syntax->datum G3514@x)))))) (set! G34b4@rename* (lambda (G3502@x* G3503@old* G3504@new*) (if (null? G3502@x*) (values '() G3503@old* G3504@new*) (call-with-values (lambda () (G34b2@rename (car G3502@x*) G3503@old* G3504@new*)) (lambda (G3508@x G3509@old* G350a@new*) (call-with-values (lambda () (G34b4@rename* (cdr G3502@x*) G3509@old* G350a@new*)) (lambda (G350e@x* G350f@old* G3510@new*) (values (cons G3508@x G350e@x*) G350f@old* G3510@new*)))))))) ((lambda (G34b5@t) ((lambda (G34b7@ls/false) (if G34b7@ls/false (apply (lambda (G34b9@b G34ba@b*) (cons* (G2fc4@bless 'let) '() G34b9@b G34ba@b*)) G34b7@ls/false) ((lambda (G34bd@t) ((lambda (G34bf@ls/false) (if G34bf@ls/false (apply (lambda (G34c1@lhs* G34c2@rhs* G34c3@b G34c4@b*) (G2fc4@bless ((letrec ((G34c9@f (lambda (G34cb@lhs* G34cc@rhs* G34cd@old* G34ce@new*) (if (null? G34cb@lhs*) (cons 'let (cons (map list G34cd@old* G34ce@new*) (cons G34c3@b G34c4@b*))) ((lambda (G34d3@t) ((lambda (G34d5@ls/false) (if G34d5@ls/false (apply (lambda (G34d7@x*) (call-with-values (lambda () (G34b4@rename* G34d7@x* G34cd@old* G34ce@new*)) (lambda (G34dc@G34d9 G34dd@G34da G34de@G34db) ((lambda (G34e2@new* G34e3@old* G34e4@y*) (list 'call-with-values (list 'lambda '() (car G34cc@rhs*)) (list 'lambda G34e4@y* (G34c9@f (cdr G34cb@lhs*) (cdr G34cc@rhs*) G34e3@old* G34e2@new*)))) G34de@G34db G34dd@G34da G34dc@G34d9)))) G34d5@ls/false) ((lambda (G34e8@t) ((lambda (G34ea@ls/false) (if G34ea@ls/false (apply (lambda (G34ec@x* G34ed@x) (call-with-values (lambda () (G34b2@rename G34ed@x G34cd@old* G34ce@new*)) (lambda (G34f0@y G34f1@old* G34f2@new*) (call-with-values (lambda () (G34b4@rename* G34ec@x* G34f1@old* G34f2@new*)) (lambda (G34f6@y* G34f7@old* G34f8@new*) (list 'call-with-values (list 'lambda '() (car G34cc@rhs*)) (list 'lambda (append G34f6@y* G34f0@y) (G34c9@f (cdr G34cb@lhs*) (cdr G34cc@rhs*) G34f7@old* G34f8@new*)))))))) G34ea@ls/false) ((lambda (G34fc@t) ((lambda (G34fe@ls/false) (if G34fe@ls/false (apply (lambda (G3500@others) (G30fb@syntax-violation '#f '"malformed bindings" G34af@stx G3500@others)) G34fe@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G34fc@t))) (G300e@syntax-dispatch G34fc@t 'any))) G34e8@t))) (G300e@syntax-dispatch G34e8@t '#(each+ any () any)))) G34d3@t))) (G300e@syntax-dispatch G34d3@t 'each-any))) (car G34cb@lhs*)))))) G34c9@f) G34c1@lhs* G34c2@rhs* '() '()))) G34bf@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G34bd@t))) (G300e@syntax-dispatch G34bd@t '(_ #(each (any any)) any . each-any)))) G34b5@t))) (G300e@syntax-dispatch G34b5@t '(_ () any . each-any)))) G34af@stx))) '#f '#f))) (set! G2fce@let*-values-macro (lambda (G351c@stx) ((lambda (G351f@check) (begin (set! G351f@check (lambda (G354e@x*) (if (not (null? G354e@x*)) ((lambda (G3550@x) (begin (if (not (G2e0f@id? G3550@x)) (G30fb@syntax-violation '#f '"not an identifier" G351c@stx G3550@x) (void)) (G351f@check (cdr G354e@x*)) (if (G2e1d@bound-id-member? G3550@x (cdr G354e@x*)) (G30fb@syntax-violation '#f '"duplicate identifier" G351c@stx G3550@x) (void)))) (car G354e@x*)) (void)))) ((lambda (G3520@t) ((lambda (G3522@ls/false) (if G3522@ls/false (apply (lambda (G3524@b G3525@b*) (cons* (G2fc4@bless 'let) '() G3524@b G3525@b*)) G3522@ls/false) ((lambda (G3528@t) ((lambda (G352a@ls/false) (if G352a@ls/false (apply (lambda (G352c@lhs* G352d@rhs* G352e@b G352f@b*) (G2fc4@bless ((letrec ((G3534@f (lambda (G3536@lhs* G3537@rhs*) (if (null? G3536@lhs*) (cons 'begin (cons G352e@b G352f@b*)) ((lambda (G353a@t) ((lambda (G353c@ls/false) (if G353c@ls/false (apply (lambda (G353e@x*) (begin (G351f@check G353e@x*) (list 'call-with-values (list 'lambda '() (car G3537@rhs*)) (list 'lambda G353e@x* (G3534@f (cdr G3536@lhs*) (cdr G3537@rhs*)))))) G353c@ls/false) ((lambda (G3540@t) ((lambda (G3542@ls/false) (if G3542@ls/false (apply (lambda (G3544@x* G3545@x) (begin (G351f@check (cons G3545@x G3544@x*)) (list 'call-with-values (list 'lambda '() (car G3537@rhs*)) (list 'lambda (append G3544@x* G3545@x) (G3534@f (cdr G3536@lhs*) (cdr G3537@rhs*)))))) G3542@ls/false) ((lambda (G3548@t) ((lambda (G354a@ls/false) (if G354a@ls/false (apply (lambda (G354c@others) (G30fb@syntax-violation '#f '"malformed bindings" G351c@stx G354c@others)) G354a@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3548@t))) (G300e@syntax-dispatch G3548@t 'any))) G3540@t))) (G300e@syntax-dispatch G3540@t '#(each+ any () any)))) G353a@t))) (G300e@syntax-dispatch G353a@t 'each-any))) (car G3536@lhs*)))))) G3534@f) G352c@lhs* G352d@rhs*))) G352a@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3528@t))) (G300e@syntax-dispatch G3528@t '(_ #(each (any any)) any . each-any)))) G3520@t))) (G300e@syntax-dispatch G3520@t '(_ () any . each-any)))) G351c@stx))) '#f))) (set! G2fd0@trace-lambda-macro (lambda (G3552@stx) ((lambda (G3554@t) ((lambda (G3556@ls/false) (if G3556@ls/false (apply (lambda (G3558@who G3559@fmls G355a@b G355b@b*) (if (G2e19@valid-bound-ids? G3559@fmls) (G2fc4@bless (list 'make-traced-procedure (list 'quote G3558@who) (cons 'lambda (cons G3559@fmls (cons G355a@b G355b@b*))))) (G2fc8@invalid-fmls-error G3552@stx G3559@fmls))) G3556@ls/false) ((lambda (G3560@t) ((lambda (G3562@ls/false) (if G3562@ls/false (apply (lambda (G3564@who G3565@fmls G3566@last G3567@b G3568@b*) (if (G2e19@valid-bound-ids? (cons G3566@last G3565@fmls)) (G2fc4@bless (list 'make-traced-procedure (list 'quote G3564@who) (cons 'lambda (cons (append G3565@fmls G3566@last) (cons G3567@b G3568@b*))))) (G2fc8@invalid-fmls-error G3552@stx (append G3565@fmls G3566@last)))) G3562@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3560@t))) (G300e@syntax-dispatch G3560@t '(_ any #(each+ any () any) any . each-any)))) G3554@t))) (G300e@syntax-dispatch G3554@t '(_ any each-any any . each-any)))) G3552@stx))) (set! G2fd2@trace-define-macro (lambda (G356e@stx) ((lambda (G3570@t) ((lambda (G3572@ls/false) (if G3572@ls/false (apply (lambda (G3574@who G3575@fmls G3576@b G3577@b*) (if (G2e19@valid-bound-ids? G3575@fmls) (G2fc4@bless (list 'define G3574@who (list 'make-traced-procedure (list 'quote G3574@who) (cons 'lambda (cons G3575@fmls (cons G3576@b G3577@b*)))))) (G2fc8@invalid-fmls-error G356e@stx G3575@fmls))) G3572@ls/false) ((lambda (G357c@t) ((lambda (G357e@ls/false) (if G357e@ls/false (apply (lambda (G3580@who G3581@fmls G3582@last G3583@b G3584@b*) (if (G2e19@valid-bound-ids? (cons G3582@last G3581@fmls)) (G2fc4@bless (list 'define G3580@who (list 'make-traced-procedure (list 'quote G3580@who) (cons 'lambda (cons (append G3581@fmls G3582@last) (cons G3583@b G3584@b*)))))) (G2fc8@invalid-fmls-error G356e@stx (append G3581@fmls G3582@last)))) G357e@ls/false) ((lambda (G358a@t) ((lambda (G358c@ls/false) (if G358c@ls/false (apply (lambda (G358e@who G358f@expr) (if (G2e0f@id? G358e@who) (G2fc4@bless (list 'define G358e@who (list 'let (list (list 'v G358f@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote G358e@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (G30fb@syntax-violation '#f '"invalid name" G356e@stx))) G358c@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G358a@t))) (G300e@syntax-dispatch G358a@t '(_ any any)))) G357c@t))) (G300e@syntax-dispatch G357c@t '(_ (any . #(each+ any () any)) any . each-any)))) G3570@t))) (G300e@syntax-dispatch G3570@t '(_ (any . each-any) any . each-any)))) G356e@stx))) (set! G2fd4@trace-define-syntax-macro (lambda (G3592@stx) ((lambda (G3594@t) ((lambda (G3596@ls/false) (if G3596@ls/false (apply (lambda (G3598@who G3599@expr) (if (G2e0f@id? G3598@who) (G2fc4@bless (list 'define-syntax G3598@who (list 'make-traced-macro (list 'quote G3598@who) G3599@expr))) (G30fb@syntax-violation '#f '"invalid name" G3592@stx))) G3596@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3594@t))) (G300e@syntax-dispatch G3594@t '(_ any any)))) G3592@stx))) (set! G2fd6@trace-let/rec-syntax (lambda (G359c@who) (lambda (G359e@stx) ((lambda (G35a0@t) ((lambda (G35a2@ls/false) (if G35a2@ls/false (apply (lambda (G35a4@lhs* G35a5@rhs* G35a6@b G35a7@b*) (if (G2e19@valid-bound-ids? G35a4@lhs*) ((lambda (G35ac@rhs*) (G2fc4@bless (cons G359c@who (cons (map list G35a4@lhs* G35ac@rhs*) (cons G35a6@b G35a7@b*))))) (map (lambda (G35ae@lhs G35af@rhs) (list 'make-traced-macro (list 'quote G35ae@lhs) G35af@rhs)) G35a4@lhs* G35a5@rhs*)) (G2fc8@invalid-fmls-error G359e@stx G35a4@lhs*))) G35a2@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G35a0@t))) (G300e@syntax-dispatch G35a0@t '(_ #(each (any any)) any . each-any)))) G359e@stx)))) (set! G2fd8@trace-let-syntax-macro (G2fd6@trace-let/rec-syntax 'let-syntax)) (set! G2fda@trace-letrec-syntax-macro (G2fd6@trace-let/rec-syntax 'letrec-syntax)) (set! G2fdc@guard-macro (lambda (G35b2@x) ((lambda (G35b5@gen-clauses) (begin (set! G35b5@gen-clauses (lambda (G35cc@con G35cd@outerk G35ce@clause*) ((lambda (G35d3@f G35d5@f*) (begin (set! G35d3@f (lambda (G3606@x G3607@k) ((lambda (G360a@t) ((lambda (G360c@ls/false) (if G360c@ls/false (apply (lambda (G360e@e G360f@p) ((lambda (G3612@t) (list 'let (list (list G3612@t G360e@e)) (list 'if G3612@t (list G360f@p G3612@t) G3607@k))) (gensym))) G360c@ls/false) ((lambda (G3614@t) ((lambda (G3616@ls/false) (if G3616@ls/false (apply (lambda (G3618@e) ((lambda (G361a@t) (list 'let (list (list G361a@t G3618@e)) (list 'if G361a@t G361a@t G3607@k))) (gensym))) G3616@ls/false) ((lambda (G361c@t) ((lambda (G361e@ls/false) (if G361e@ls/false (apply (lambda (G3620@e G3621@v G3622@v*) (list 'if G3620@e (cons 'begin (cons G3621@v G3622@v*)) G3607@k)) G361e@ls/false) ((lambda (G3626@t) ((lambda (G3628@ls/false) (if G3628@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid guard clause" G3606@x)) G3628@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3626@t))) (G300e@syntax-dispatch G3626@t '_))) G361c@t))) (G300e@syntax-dispatch G361c@t '(any any . each-any)))) G3614@t))) (G300e@syntax-dispatch G3614@t '(any)))) G360a@t))) (G300e@syntax-dispatch G360a@t '(any #(scheme-id =>) any)))) G3606@x))) (set! G35d5@f* (lambda (G35e0@x*) ((lambda (G35e2@t) ((lambda (G35e4@ls/false) (if G35e4@ls/false (apply (lambda () (values (list 'raise G35cc@con) '#t)) G35e4@ls/false) ((lambda (G35e6@t) ((lambda (G35e8@ls/false) (if G35e8@ls/false (apply (lambda (G35ea@e G35eb@e*) (values (cons 'begin (cons G35ea@e G35eb@e*)) '#f)) G35e8@ls/false) ((lambda (G35ee@t) ((lambda (G35f0@ls/false) (if G35f0@ls/false (apply (lambda (G35f2@cls G35f3@cls*) (call-with-values (lambda () (G35d5@f* G35f3@cls*)) (lambda (G35f8@G35f6 G35f9@G35f7) ((lambda (G35fc@g G35fd@e) (values (G35d3@f G35f2@cls G35fd@e) G35fc@g)) G35f9@G35f7 G35f8@G35f6)))) G35f0@ls/false) ((lambda (G3600@t) ((lambda (G3602@ls/false) (if G3602@ls/false (apply (lambda (G3604@others) (G30fb@syntax-violation '#f '"invalid guard clause" G3604@others)) G3602@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3600@t))) (G300e@syntax-dispatch G3600@t 'any))) G35ee@t))) (G300e@syntax-dispatch G35ee@t '(any . any)))) G35e6@t))) (G300e@syntax-dispatch G35e6@t '((#(scheme-id else) any . each-any))))) G35e2@t))) (G300e@syntax-dispatch G35e2@t '()))) G35e0@x*))) (call-with-values (lambda () (G35d5@f* G35ce@clause*)) (lambda (G35d8@G35d6 G35d9@G35d7) ((lambda (G35dc@raisek G35dd@code) (if G35dc@raisek (list G35cd@outerk G35dd@code) G35dd@code)) G35d9@G35d7 G35d8@G35d6))))) '#f '#f))) ((lambda (G35b6@t) ((lambda (G35b8@ls/false) (if (and G35b8@ls/false (apply (lambda (G35ba@con G35bb@clause* G35bc@b G35bd@b*) (G2e0f@id? G35ba@con)) G35b8@ls/false)) (apply (lambda (G35c2@con G35c3@clause* G35c4@b G35c5@b*) ((lambda (G35ca@outerk) (G2fc4@bless (list 'call/cc (list 'lambda (list G35ca@outerk) (list 'with-exception-handler (list 'lambda (list G35c2@con) (G35b5@gen-clauses G35c2@con G35ca@outerk G35c3@clause*)) (cons 'lambda (cons '() (cons '#f (cons G35c4@b G35c5@b*))))))))) (gensym))) G35b8@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G35b6@t))) (G300e@syntax-dispatch G35b6@t '(_ (any . each-any) any . each-any)))) G35b2@x))) '#f))) (set! G2fde@define-enumeration-macro (lambda (G362a@stx) ((lambda (G362d@set? G362f@remove-dups) (begin (set! G362d@set? (lambda (G3646@x) (or (null? G3646@x) (and (not (memq (car G3646@x) (cdr G3646@x))) (G362d@set? (cdr G3646@x)))))) (set! G362f@remove-dups (lambda (G3644@ls) (if (null? G3644@ls) '() (cons (car G3644@ls) (G362f@remove-dups (remq (car G3644@ls) (cdr G3644@ls))))))) ((lambda (G3630@t) ((lambda (G3632@ls/false) (if (and G3632@ls/false (apply (lambda (G3634@name G3635@id* G3636@maker) (and (G2e0f@id? G3634@name) (G2e0f@id? G3636@maker) (for-all G2e0f@id? G3635@id*))) G3632@ls/false)) (apply (lambda (G363a@name G363b@id* G363c@maker) ((lambda (G3640@name* G3641@mk) (G2fc4@bless (list 'begin (list 'define G3641@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote G3640@name*)))) (list 'define-syntax G363a@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote G3640@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote G363a@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax G363c@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote G363c@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote G3640@name*)) (cons 'syntax-violation (cons (list 'quote G363c@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons G3641@mk '('(n* ...)))))))))))) (G362f@remove-dups (G3101@syntax->datum G363b@id*)) (gensym))) G3632@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3630@t))) (G300e@syntax-dispatch G3630@t '(_ any each-any any)))) G362a@stx))) '#f '#f))) (set! G2fe0@time-macro (lambda (G3648@stx) ((lambda (G364a@t) ((lambda (G364c@ls/false) (if G364c@ls/false (apply (lambda (G364e@expr) ((lambda (G3650@str) (G2fc4@bless (list 'time-it G3650@str (list 'lambda '() G364e@expr)))) (call-with-values (lambda () (open-string-output-port)) (lambda (G3654@G3652 G3655@G3653) ((lambda (G3658@e G3659@p) (begin (write (G3101@syntax->datum G364e@expr) G3659@p) (G3658@e))) G3655@G3653 G3654@G3652))))) G364c@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G364a@t))) (G300e@syntax-dispatch G364a@t '(_ any)))) G3648@stx))) (set! G2fe2@delay-macro (lambda (G365c@stx) ((lambda (G365e@t) ((lambda (G3660@ls/false) (if G3660@ls/false (apply (lambda (G3662@expr) (G2fc4@bless (list 'make-promise (list 'lambda '() G3662@expr)))) G3660@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G365e@t))) (G300e@syntax-dispatch G365e@t '(_ any)))) G365c@stx))) (set! G2fe4@assert-macro (lambda (G3664@stx) ((lambda (G3666@t) ((lambda (G3668@ls/false) (if G3668@ls/false (apply (lambda (G366a@expr) ((lambda (G366c@pos) (G2fc4@bless (list 'unless G366a@expr (list 'assertion-error (list 'quote G366a@expr) (list 'quote G366c@pos))))) (or (G30f1@expression-position G3664@stx) (G30f1@expression-position G366a@expr)))) G3668@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3666@t))) (G300e@syntax-dispatch G3666@t '(_ any)))) G3664@stx))) (set! G2fe6@endianness-macro (lambda (G366e@stx) ((lambda (G3670@t) ((lambda (G3672@ls/false) (if G3672@ls/false (apply (lambda (G3674@e) ((lambda (G3676@t) (if (memv G3676@t '(little)) (G2fc4@bless ''little) (if (memv G3676@t '(big)) (G2fc4@bless ''big) (G30fb@syntax-violation '#f '"endianness must be big or little" G366e@stx)))) (G3101@syntax->datum G3674@e))) G3672@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3670@t))) (G300e@syntax-dispatch G3670@t '(_ any)))) G366e@stx))) (set! G2fe8@identifier-syntax-macro (lambda (G3678@stx) ((lambda (G367a@t) ((lambda (G367c@ls/false) (if G367c@ls/false (apply (lambda (G367e@expr) (G2fc4@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax G367e@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax G367e@expr) '((syntax (e* ...)))))))))) G367c@ls/false) ((lambda (G3680@t) ((lambda (G3682@ls/false) (if (and G3682@ls/false (apply (lambda (G3684@id1 G3685@expr1 G3686@id2 G3687@expr2 G3688@expr3) (and (G2e0f@id? G3684@id1) (G2e0f@id? G3686@id2) (G2e0f@id? G3687@expr2))) G3682@ls/false)) (apply (lambda (G368e@id1 G368f@expr1 G3690@id2 G3691@expr2 G3692@expr3) (G2fc4@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax G368f@expr1)) (list (list 'set! 'id G3691@expr2) (list 'syntax G3692@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons G368f@expr1 '(e* ...))))))))) G3682@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3680@t))) (G300e@syntax-dispatch G3680@t '(_ (any any) ((#(scheme-id set!) any any) any))))) G367a@t))) (G300e@syntax-dispatch G367a@t '(_ any)))) G3678@stx))) (set! G2fea@do-macro (lambda (G3698@stx) ((lambda (G369b@bind) (begin (set! G369b@bind (lambda (G36b2@x) ((lambda (G36b4@t) ((lambda (G36b6@ls/false) (if G36b6@ls/false (apply (lambda (G36b8@x G36b9@init) (list G36b8@x G36b9@init G36b8@x)) G36b6@ls/false) ((lambda (G36bc@t) ((lambda (G36be@ls/false) (if G36be@ls/false (apply (lambda (G36c0@x G36c1@init G36c2@step) (list G36c0@x G36c1@init G36c2@step)) G36be@ls/false) ((lambda (G36c6@t) ((lambda (G36c8@ls/false) (if G36c8@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid binding" G3698@stx)) G36c8@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G36c6@t))) (G300e@syntax-dispatch G36c6@t '_))) G36bc@t))) (G300e@syntax-dispatch G36bc@t '(any any any)))) G36b4@t))) (G300e@syntax-dispatch G36b4@t '(any any)))) G36b2@x))) ((lambda (G369c@t) ((lambda (G369e@ls/false) (if G369e@ls/false (apply (lambda (G36a0@binding* G36a1@test G36a2@expr* G36a3@command*) ((lambda (G36a8@t) ((lambda (G36aa@ls/false) (if G36aa@ls/false (apply (lambda (G36ac@x* G36ad@init* G36ae@step*) (if (G2e19@valid-bound-ids? G36ac@x*) (G2fc4@bless (list 'letrec (list (list 'loop (list 'lambda G36ac@x* (list 'if G36a1@test (cons 'begin (cons '(if #f #f) G36a2@expr*)) (cons 'begin (append G36a3@command* (list (cons 'loop G36ae@step*)))))))) (cons 'loop G36ad@init*))) (G30fb@syntax-violation '#f '"invalid bindings" G3698@stx))) G36aa@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G36a8@t))) (G300e@syntax-dispatch G36a8@t '#(each (any any any))))) (map G369b@bind G36a0@binding*))) G369e@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G369c@t))) (G300e@syntax-dispatch G369c@t '(_ each-any (any . each-any) . each-any)))) G3698@stx))) '#f))) (set! G2fec@let*-macro (lambda (G36ca@stx) ((lambda (G36cc@t) ((lambda (G36ce@ls/false) (if (and G36ce@ls/false (apply (lambda (G36d0@lhs* G36d1@rhs* G36d2@b G36d3@b*) (for-all G2e0f@id? G36d0@lhs*)) G36ce@ls/false)) (apply (lambda (G36d8@lhs* G36d9@rhs* G36da@b G36db@b*) (G2fc4@bless ((letrec ((G36e0@f (lambda (G36e2@x*) (if (null? G36e2@x*) (cons 'let (cons '() (cons G36da@b G36db@b*))) (list 'let (list (car G36e2@x*)) (G36e0@f (cdr G36e2@x*))))))) G36e0@f) (map list G36d8@lhs* G36d9@rhs*)))) G36ce@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G36cc@t))) (G300e@syntax-dispatch G36cc@t '(_ #(each (any any)) any . each-any)))) G36ca@stx))) (set! G2fee@or-macro (lambda (G36e4@stx) ((lambda (G36e6@t) ((lambda (G36e8@ls/false) (if G36e8@ls/false (apply (lambda () '#f) G36e8@ls/false) ((lambda (G36ea@t) ((lambda (G36ec@ls/false) (if G36ec@ls/false (apply (lambda (G36ee@e G36ef@e*) (G2fc4@bless ((letrec ((G36f2@f (lambda (G36f4@e G36f5@e*) (if (null? G36f5@e*) (list 'begin '#f G36f4@e) (list 'let (list (list 't G36f4@e)) (list 'if 't 't (G36f2@f (car G36f5@e*) (cdr G36f5@e*)))))))) G36f2@f) G36ee@e G36ef@e*))) G36ec@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G36ea@t))) (G300e@syntax-dispatch G36ea@t '(_ any . each-any)))) G36e6@t))) (G300e@syntax-dispatch G36e6@t '(_)))) G36e4@stx))) (set! G2ff0@and-macro (lambda (G36f8@stx) ((lambda (G36fa@t) ((lambda (G36fc@ls/false) (if G36fc@ls/false (apply (lambda () '#t) G36fc@ls/false) ((lambda (G36fe@t) ((lambda (G3700@ls/false) (if G3700@ls/false (apply (lambda (G3702@e G3703@e*) (G2fc4@bless ((letrec ((G3706@f (lambda (G3708@e G3709@e*) (if (null? G3709@e*) (list 'begin '#f G3708@e) (cons 'if (cons G3708@e (cons (G3706@f (car G3709@e*) (cdr G3709@e*)) '(#f)))))))) G3706@f) G3702@e G3703@e*))) G3700@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G36fe@t))) (G300e@syntax-dispatch G36fe@t '(_ any . each-any)))) G36fa@t))) (G300e@syntax-dispatch G36fa@t '(_)))) G36f8@stx))) (set! G2ff2@cond-macro (lambda (G370c@stx) ((lambda (G370e@t) ((lambda (G3710@ls/false) (if G3710@ls/false (apply (lambda (G3712@cls G3713@cls*) (G2fc4@bless ((letrec ((G3716@f (lambda (G3718@cls G3719@cls*) (if (null? G3719@cls*) ((lambda (G371c@t) ((lambda (G371e@ls/false) (if G371e@ls/false (apply (lambda (G3720@e G3721@e*) (cons 'begin (cons G3720@e G3721@e*))) G371e@ls/false) ((lambda (G3724@t) ((lambda (G3726@ls/false) (if G3726@ls/false (apply (lambda (G3728@e G3729@p) (list 'let (list (list 't G3728@e)) (list 'if 't (cons G3729@p '(t))))) G3726@ls/false) ((lambda (G372c@t) ((lambda (G372e@ls/false) (if G372e@ls/false (apply (lambda (G3730@e) (cons 'or (cons G3730@e '((if #f #f))))) G372e@ls/false) ((lambda (G3732@t) ((lambda (G3734@ls/false) (if G3734@ls/false (apply (lambda (G3736@e G3737@e*) (list 'if G3736@e (cons 'begin G3737@e*))) G3734@ls/false) ((lambda (G373a@t) ((lambda (G373c@ls/false) (if G373c@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid last clause" G370c@stx)) G373c@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G373a@t))) (G300e@syntax-dispatch G373a@t '_))) G3732@t))) (G300e@syntax-dispatch G3732@t '(any . each-any)))) G372c@t))) (G300e@syntax-dispatch G372c@t '(any)))) G3724@t))) (G300e@syntax-dispatch G3724@t '(any #(scheme-id =>) any)))) G371c@t))) (G300e@syntax-dispatch G371c@t '(#(scheme-id else) any . each-any)))) G3718@cls) ((lambda (G373e@t) ((lambda (G3740@ls/false) (if G3740@ls/false (apply (lambda (G3742@e G3743@e*) (G30fb@syntax-violation '#f '"incorrect position of keyword else" G370c@stx)) G3740@ls/false) ((lambda (G3746@t) ((lambda (G3748@ls/false) (if G3748@ls/false (apply (lambda (G374a@e G374b@p) (list 'let (list (list 't G374a@e)) (list 'if 't (cons G374b@p '(t)) (G3716@f (car G3719@cls*) (cdr G3719@cls*))))) G3748@ls/false) ((lambda (G374e@t) ((lambda (G3750@ls/false) (if G3750@ls/false (apply (lambda (G3752@e) (list 'or G3752@e (G3716@f (car G3719@cls*) (cdr G3719@cls*)))) G3750@ls/false) ((lambda (G3754@t) ((lambda (G3756@ls/false) (if G3756@ls/false (apply (lambda (G3758@e G3759@e*) (list 'if G3758@e (cons 'begin G3759@e*) (G3716@f (car G3719@cls*) (cdr G3719@cls*)))) G3756@ls/false) ((lambda (G375c@t) ((lambda (G375e@ls/false) (if G375e@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid last clause" G370c@stx)) G375e@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G375c@t))) (G300e@syntax-dispatch G375c@t '_))) G3754@t))) (G300e@syntax-dispatch G3754@t '(any . each-any)))) G374e@t))) (G300e@syntax-dispatch G374e@t '(any)))) G3746@t))) (G300e@syntax-dispatch G3746@t '(any #(scheme-id =>) any)))) G373e@t))) (G300e@syntax-dispatch G373e@t '(#(scheme-id else) any . each-any)))) G3718@cls))))) G3716@f) G3712@cls G3713@cls*))) G3710@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G370e@t))) (G300e@syntax-dispatch G370e@t '(_ any . each-any)))) G370c@stx))) (set! G2ff4@do-include (lambda (G3760@stx G3761@id G3762@filename) ((lambda (G3766@filename) (begin (if (not (and (string? G3766@filename) (G2e0f@id? G3761@id))) (G30fb@syntax-violation '#f '"invalid syntax" G3760@stx) (void)) (cons (G2fc4@bless 'begin) (with-input-from-file G3766@filename (lambda () ((letrec ((G3768@f (lambda (G376a@ls) ((lambda (G376c@x) (if (eof-object? G376c@x) (reverse G376a@ls) (G3768@f (cons (G2ded@datum->stx G3761@id G376c@x) G376a@ls)))) (G299e@G28ca@read-annotated))))) G3768@f) '())))))) (G2e25@stx->datum G3762@filename)))) (set! G2ff6@include-macro (lambda (G376e@e) ((lambda (G3770@t) ((lambda (G3772@ls/false) (if G3772@ls/false (apply (lambda (G3774@id G3775@filename) (G2ff4@do-include G376e@e G3774@id G3775@filename)) G3772@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3770@t))) (G300e@syntax-dispatch G3770@t '(any any)))) G376e@e))) (set! G2ff8@include-into-macro (lambda (G3778@e) ((lambda (G377a@t) ((lambda (G377c@ls/false) (if G377c@ls/false (apply (lambda (G377e@id G377f@filename) (G2ff4@do-include G3778@e G377e@id G377f@filename)) G377c@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G377a@t))) (G300e@syntax-dispatch G377a@t '(_ any any)))) G3778@e))) (set! G2ffa@syntax-rules-macro (lambda (G3782@e) ((lambda (G3784@t) ((lambda (G3786@ls/false) (if G3786@ls/false (apply (lambda (G3788@lits G3789@pat* G378a@tmp*) (begin (G3014@verify-literals G3788@lits G3782@e) (G2fc4@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons G3788@lits (map (lambda (G378e@pat G378f@tmp) ((lambda (G3792@t) ((lambda (G3794@ls/false) (if G3794@ls/false (apply (lambda (G3796@rest) (list (cons 'g G3796@rest) (list 'syntax G378f@tmp))) G3794@ls/false) ((lambda (G3798@t) ((lambda (G379a@ls/false) (if G379a@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid syntax-rules pattern" G3782@e G378e@pat)) G379a@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3798@t))) (G300e@syntax-dispatch G3798@t '_))) G3792@t))) (G300e@syntax-dispatch G3792@t '(_ . any)))) G378e@pat)) G3789@pat* G378a@tmp*)))))))) G3786@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3784@t))) (G300e@syntax-dispatch G3784@t '(_ each-any . #(each (any any)))))) G3782@e))) (set! G2ffc@quasiquote-macro ((lambda () ((lambda (G379d@datum G37bb@quasicons* G37bd@quasicons G37bf@quasiappend G37c1@quasivector G37c3@vquasi G37c5@quasi) (begin (set! G379d@datum (lambda (G38a0@x) (list (G2f98@scheme-stx 'quote) (G2df7@mkstx G38a0@x '() '() '())))) (set! G37bb@quasicons* (lambda (G3898@x G3899@y) ((letrec ((G389c@f (lambda (G389e@x) (if (null? G389e@x) G3899@y (G37bd@quasicons (car G389e@x) (G389c@f (cdr G389e@x))))))) G389c@f) G3898@x))) (set! G37bd@quasicons (lambda (G3872@x G3873@y) ((lambda (G3876@t) ((lambda (G3878@ls/false) (if G3878@ls/false (apply (lambda (G387a@dy) ((lambda (G387c@t) ((lambda (G387e@ls/false) (if G387e@ls/false (apply (lambda (G3880@dx) (list (G2f98@scheme-stx 'quote) (cons G3880@dx G387a@dy))) G387e@ls/false) ((lambda (G3882@t) ((lambda (G3884@ls/false) (if G3884@ls/false (apply (lambda () ((lambda (G3886@t) ((lambda (G3888@ls/false) (if G3888@ls/false (apply (lambda () (list (G2f98@scheme-stx 'list) G3872@x)) G3888@ls/false) ((lambda (G388a@t) ((lambda (G388c@ls/false) (if G388c@ls/false (apply (lambda () (list (G2f98@scheme-stx 'cons) G3872@x G3873@y)) G388c@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G388a@t))) (G300e@syntax-dispatch G388a@t '_))) G3886@t))) (G300e@syntax-dispatch G3886@t '()))) G387a@dy)) G3884@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3882@t))) (G300e@syntax-dispatch G3882@t '_))) G387c@t))) (G300e@syntax-dispatch G387c@t '(#(scheme-id quote) any)))) G3872@x)) G3878@ls/false) ((lambda (G388e@t) ((lambda (G3890@ls/false) (if G3890@ls/false (apply (lambda (G3892@stuff) (cons* (G2f98@scheme-stx 'list) G3872@x G3892@stuff)) G3890@ls/false) ((lambda (G3894@t) ((lambda (G3896@ls/false) (if G3896@ls/false (apply (lambda () (list (G2f98@scheme-stx 'cons) G3872@x G3873@y)) G3896@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3894@t))) (G300e@syntax-dispatch G3894@t '_))) G388e@t))) (G300e@syntax-dispatch G388e@t '(#(scheme-id list) . each-any)))) G3876@t))) (G300e@syntax-dispatch G3876@t '(#(scheme-id quote) any)))) G3873@y))) (set! G37bf@quasiappend (lambda (G3858@x G3859@y) ((lambda (G385c@ls) (if (null? G385c@ls) (list (G2f98@scheme-stx 'quote) '()) (if (null? (cdr G385c@ls)) (car G385c@ls) (cons* (G2f98@scheme-stx 'append) G385c@ls)))) ((letrec ((G385e@f (lambda (G3860@x) (if (null? G3860@x) ((lambda (G3862@t) ((lambda (G3864@ls/false) (if G3864@ls/false (apply (lambda () '()) G3864@ls/false) ((lambda (G3866@t) ((lambda (G3868@ls/false) (if G3868@ls/false (apply (lambda () (list G3859@y)) G3868@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3866@t))) (G300e@syntax-dispatch G3866@t '_))) G3862@t))) (G300e@syntax-dispatch G3862@t '(#(scheme-id quote) ())))) G3859@y) ((lambda (G386a@t) ((lambda (G386c@ls/false) (if G386c@ls/false (apply (lambda () (G385e@f (cdr G3860@x))) G386c@ls/false) ((lambda (G386e@t) ((lambda (G3870@ls/false) (if G3870@ls/false (apply (lambda () (cons (car G3860@x) (G385e@f (cdr G3860@x)))) G3870@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G386e@t))) (G300e@syntax-dispatch G386e@t '_))) G386a@t))) (G300e@syntax-dispatch G386a@t '(#(scheme-id quote) ())))) (car G3860@x)))))) G385e@f) G3858@x)))) (set! G37c1@quasivector (lambda (G3826@x) ((lambda (G3828@pat-x) ((lambda (G382a@t) ((lambda (G382c@ls/false) (if G382c@ls/false (apply (lambda (G382e@x*) (list (G2f98@scheme-stx 'quote) (list->vector G382e@x*))) G382c@ls/false) ((lambda (G3830@t) ((lambda (G3832@ls/false) (if G3832@ls/false (apply (lambda () ((letrec ((G3834@f (lambda (G3836@x G3837@k) ((lambda (G383a@t) ((lambda (G383c@ls/false) (if G383c@ls/false (apply (lambda (G383e@x*) (G3837@k (map (lambda (G3840@x) (list (G2f98@scheme-stx 'quote) G3840@x)) G383e@x*))) G383c@ls/false) ((lambda (G3842@t) ((lambda (G3844@ls/false) (if G3844@ls/false (apply (lambda (G3846@x*) (G3837@k G3846@x*)) G3844@ls/false) ((lambda (G3848@t) ((lambda (G384a@ls/false) (if G384a@ls/false (apply (lambda (G384c@x G384d@y) (G3834@f G384d@y (lambda (G3850@ls) (G3837@k (cons G384c@x G3850@ls))))) G384a@ls/false) ((lambda (G3852@t) ((lambda (G3854@ls/false) (if G3854@ls/false (apply (lambda () (list (G2f98@scheme-stx 'list->vector) G3828@pat-x)) G3854@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3852@t))) (G300e@syntax-dispatch G3852@t '_))) G3848@t))) (G300e@syntax-dispatch G3848@t '(#(scheme-id cons) any any)))) G3842@t))) (G300e@syntax-dispatch G3842@t '(#(scheme-id list) . each-any)))) G383a@t))) (G300e@syntax-dispatch G383a@t '(#(scheme-id quote) each-any)))) G3836@x)))) G3834@f) G3826@x (lambda (G3856@ls) (cons* (G2f98@scheme-stx 'vector) G3856@ls)))) G3832@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3830@t))) (G300e@syntax-dispatch G3830@t '_))) G382a@t))) (G300e@syntax-dispatch G382a@t '(#(scheme-id quote) each-any)))) G3828@pat-x)) G3826@x))) (set! G37c3@vquasi (lambda (G3804@p G3805@lev) ((lambda (G3808@t) ((lambda (G380a@ls/false) (if G380a@ls/false (apply (lambda (G380c@p G380d@q) ((lambda (G3810@t) ((lambda (G3812@ls/false) (if G3812@ls/false (apply (lambda (G3814@p) (if (= G3805@lev '0) (G37bb@quasicons* G3814@p (G37c3@vquasi G380d@q G3805@lev)) (G37bd@quasicons (G37bd@quasicons (G379d@datum 'unquote) (G37c5@quasi G3814@p (- G3805@lev '1))) (G37c3@vquasi G380d@q G3805@lev)))) G3812@ls/false) ((lambda (G3816@t) ((lambda (G3818@ls/false) (if G3818@ls/false (apply (lambda (G381a@p) (if (= G3805@lev '0) (G37bf@quasiappend G381a@p (G37c3@vquasi G380d@q G3805@lev)) (G37bd@quasicons (G37bd@quasicons (G379d@datum 'unquote-splicing) (G37c5@quasi G381a@p (- G3805@lev '1))) (G37c3@vquasi G380d@q G3805@lev)))) G3818@ls/false) ((lambda (G381c@t) ((lambda (G381e@ls/false) (if G381e@ls/false (apply (lambda (G3820@p) (G37bd@quasicons (G37c5@quasi G3820@p G3805@lev) (G37c3@vquasi G380d@q G3805@lev))) G381e@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G381c@t))) (G300e@syntax-dispatch G381c@t 'any))) G3816@t))) (G300e@syntax-dispatch G3816@t '(#(scheme-id unquote-splicing) . each-any)))) G3810@t))) (G300e@syntax-dispatch G3810@t '(#(scheme-id unquote) . each-any)))) G380c@p)) G380a@ls/false) ((lambda (G3822@t) ((lambda (G3824@ls/false) (if G3824@ls/false (apply (lambda () (list (G2f98@scheme-stx 'quote) '())) G3824@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3822@t))) (G300e@syntax-dispatch G3822@t '()))) G3808@t))) (G300e@syntax-dispatch G3808@t '(any . any)))) G3804@p))) (set! G37c5@quasi (lambda (G37ce@p G37cf@lev) ((lambda (G37d2@t) ((lambda (G37d4@ls/false) (if G37d4@ls/false (apply (lambda (G37d6@p) (if (= G37cf@lev '0) G37d6@p (G37bd@quasicons (G379d@datum 'unquote) (G37c5@quasi (list G37d6@p) (- G37cf@lev '1))))) G37d4@ls/false) ((lambda (G37d8@t) ((lambda (G37da@ls/false) (if G37da@ls/false (apply (lambda (G37dc@p G37dd@q) (if (= G37cf@lev '0) (G37bb@quasicons* G37dc@p (G37c5@quasi G37dd@q G37cf@lev)) (G37bd@quasicons (G37bd@quasicons (G379d@datum 'unquote) (G37c5@quasi G37dc@p (- G37cf@lev '1))) (G37c5@quasi G37dd@q G37cf@lev)))) G37da@ls/false) ((lambda (G37e0@t) ((lambda (G37e2@ls/false) (if G37e2@ls/false (apply (lambda (G37e4@p G37e5@q) (if (= G37cf@lev '0) (G37bf@quasiappend G37e4@p (G37c5@quasi G37e5@q G37cf@lev)) (G37bd@quasicons (G37bd@quasicons (G379d@datum 'unquote-splicing) (G37c5@quasi G37e4@p (- G37cf@lev '1))) (G37c5@quasi G37e5@q G37cf@lev)))) G37e2@ls/false) ((lambda (G37e8@t) ((lambda (G37ea@ls/false) (if G37ea@ls/false (apply (lambda (G37ec@p) (G37bd@quasicons (G379d@datum 'quasiquote) (G37c5@quasi (list G37ec@p) (+ G37cf@lev '1)))) G37ea@ls/false) ((lambda (G37ee@t) ((lambda (G37f0@ls/false) (if G37f0@ls/false (apply (lambda (G37f2@p G37f3@q) (G37bd@quasicons (G37c5@quasi G37f2@p G37cf@lev) (G37c5@quasi G37f3@q G37cf@lev))) G37f0@ls/false) ((lambda (G37f6@t) ((lambda (G37f8@ls/false) (if (and G37f8@ls/false (apply (lambda (G37fa@x) (not (G2dd7@stx? G37fa@x))) G37f8@ls/false)) (apply (lambda (G37fc@x) (G37c1@quasivector (G37c3@vquasi G37fc@x G37cf@lev))) G37f8@ls/false) ((lambda (G37fe@t) ((lambda (G3800@ls/false) (if G3800@ls/false (apply (lambda (G3802@p) (list (G2f98@scheme-stx 'quote) G3802@p)) G3800@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G37fe@t))) (G300e@syntax-dispatch G37fe@t 'any))) G37f6@t))) (G300e@syntax-dispatch G37f6@t '#(vector each-any)))) G37ee@t))) (G300e@syntax-dispatch G37ee@t '(any . any)))) G37e8@t))) (G300e@syntax-dispatch G37e8@t '(#(scheme-id quasiquote) any)))) G37e0@t))) (G300e@syntax-dispatch G37e0@t '((#(scheme-id unquote-splicing) . each-any) . any)))) G37d8@t))) (G300e@syntax-dispatch G37d8@t '((#(scheme-id unquote) . each-any) . any)))) G37d2@t))) (G300e@syntax-dispatch G37d2@t '(#(scheme-id unquote) any)))) G37ce@p))) (lambda (G37c6@x) ((lambda (G37c8@t) ((lambda (G37ca@ls/false) (if G37ca@ls/false (apply (lambda (G37cc@e) (G37c5@quasi G37cc@e '0)) G37ca@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G37c8@t))) (G300e@syntax-dispatch G37c8@t '(_ any)))) G37c6@x)))) '#f '#f '#f '#f '#f '#f '#f)))) (set! G2ffe@quasisyntax-macro ((lambda () ((lambda (G38a3@quasi) (begin (set! G38a3@quasi (lambda (G38bb@p G38bc@lev) ((lambda (G38bf@t) ((lambda (G38c1@ls/false) (if G38c1@ls/false (apply (lambda (G38c3@p) (if (= G38bc@lev '0) ((lambda (G38c5@g) (values (list G38c5@g) (list G38c3@p) G38c5@g)) (gensym)) (call-with-values (lambda () (G38a3@quasi G38c3@p (- G38bc@lev '1))) (lambda (G38ca@G38c7 G38cb@G38c8 G38cc@G38c9) ((lambda (G38d0@p G38d1@rhs* G38d2@lhs*) (values G38d2@lhs* G38d1@rhs* (list 'unsyntax G38d0@p))) G38cc@G38c9 G38cb@G38c8 G38ca@G38c7))))) G38c1@ls/false) ((lambda (G38d6@t) ((lambda (G38d8@ls/false) (if (and G38d8@ls/false (apply (lambda () (= G38bc@lev '0)) G38d8@ls/false)) (apply (lambda () (G30fb@syntax-violation '#f '"incorrect use of unsyntax" G38bb@p)) G38d8@ls/false) ((lambda (G38da@t) ((lambda (G38dc@ls/false) (if G38dc@ls/false (apply (lambda (G38de@p* G38df@q) (call-with-values (lambda () (G38a3@quasi G38df@q G38bc@lev)) (lambda (G38e5@G38e2 G38e6@G38e3 G38e7@G38e4) ((lambda (G38eb@q G38ec@rhs* G38ed@lhs*) (if (= G38bc@lev '0) ((lambda (G38f1@g*) (values (append G38f1@g* G38ed@lhs*) (append G38de@p* G38ec@rhs*) (append G38f1@g* G38eb@q))) (map (lambda (G38f3@x) (gensym)) G38de@p*)) (call-with-values (lambda () (G38a3@quasi G38de@p* (- G38bc@lev '1))) (lambda (G38f8@G38f5 G38f9@G38f6 G38fa@G38f7) ((lambda (G38fe@p* G38ff@rhs2* G3900@lhs2*) (values (append G3900@lhs2* G38ed@lhs*) (append G38ff@rhs2* G38ec@rhs*) (cons (cons 'unsyntax G38fe@p*) G38eb@q))) G38fa@G38f7 G38f9@G38f6 G38f8@G38f5))))) G38e7@G38e4 G38e6@G38e3 G38e5@G38e2)))) G38dc@ls/false) ((lambda (G3904@t) ((lambda (G3906@ls/false) (if G3906@ls/false (apply (lambda (G3908@p* G3909@q) (call-with-values (lambda () (G38a3@quasi G3909@q G38bc@lev)) (lambda (G390f@G390c G3910@G390d G3911@G390e) ((lambda (G3915@q G3916@rhs* G3917@lhs*) (if (= G38bc@lev '0) ((lambda (G391b@g*) (values (append (map (lambda (G391d@g) (cons G391d@g '(...))) G391b@g*) G3917@lhs*) (append G3908@p* G3916@rhs*) (append (apply append (map (lambda (G391f@g) (cons G391f@g '(...))) G391b@g*)) G3915@q))) (map (lambda (G3921@x) (gensym)) G3908@p*)) (call-with-values (lambda () (G38a3@quasi G3908@p* (- G38bc@lev '1))) (lambda (G3926@G3923 G3927@G3924 G3928@G3925) ((lambda (G392c@p* G392d@rhs2* G392e@lhs2*) (values (append G392e@lhs2* G3917@lhs*) (append G392d@rhs2* G3916@rhs*) (cons (cons 'unsyntax-splicing G392c@p*) G3915@q))) G3928@G3925 G3927@G3924 G3926@G3923))))) G3911@G390e G3910@G390d G390f@G390c)))) G3906@ls/false) ((lambda (G3932@t) ((lambda (G3934@ls/false) (if (and G3934@ls/false (apply (lambda () (= G38bc@lev '0)) G3934@ls/false)) (apply (lambda () (G30fb@syntax-violation '#f '"incorrect use of unsyntax-splicing" G38bb@p)) G3934@ls/false) ((lambda (G3936@t) ((lambda (G3938@ls/false) (if G3938@ls/false (apply (lambda (G393a@p) (call-with-values (lambda () (G38a3@quasi G393a@p (+ G38bc@lev '1))) (lambda (G393f@G393c G3940@G393d G3941@G393e) ((lambda (G3945@p G3946@rhs* G3947@lhs*) (values G3947@lhs* G3946@rhs* (list 'quasisyntax G3945@p))) G3941@G393e G3940@G393d G393f@G393c)))) G3938@ls/false) ((lambda (G394b@t) ((lambda (G394d@ls/false) (if G394d@ls/false (apply (lambda (G394f@p G3950@q) (call-with-values (lambda () (G38a3@quasi G394f@p G38bc@lev)) (lambda (G3959@G3953 G395a@G3954 G395b@G3955) (call-with-values (lambda () (G38a3@quasi G3950@q G38bc@lev)) (lambda (G395f@G3956 G3960@G3957 G3961@G3958) ((lambda (G3965@q G3966@rhs2* G3967@lhs2* G3968@p G3969@rhs* G396a@lhs*) (values (append G3967@lhs2* G396a@lhs*) (append G3966@rhs2* G3969@rhs*) (cons G3968@p G3965@q))) G3961@G3958 G3960@G3957 G395f@G3956 G395b@G3955 G395a@G3954 G3959@G3953)))))) G394d@ls/false) ((lambda (G3971@t) ((lambda (G3973@ls/false) (if G3973@ls/false (apply (lambda (G3975@x*) (call-with-values (lambda () (G38a3@quasi G3975@x* G38bc@lev)) (lambda (G397a@G3977 G397b@G3978 G397c@G3979) ((lambda (G3980@x* G3981@rhs* G3982@lhs*) (values G3982@lhs* G3981@rhs* (list->vector G3980@x*))) G397c@G3979 G397b@G3978 G397a@G3977)))) G3973@ls/false) ((lambda (G3986@t) ((lambda (G3988@ls/false) (if G3988@ls/false (apply (lambda () (values '() '() G38bb@p)) G3988@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3986@t))) (G300e@syntax-dispatch G3986@t '_))) G3971@t))) (G300e@syntax-dispatch G3971@t '#(vector each-any)))) G394b@t))) (G300e@syntax-dispatch G394b@t '(any . any)))) G3936@t))) (G300e@syntax-dispatch G3936@t '(#(scheme-id quasisyntax) any)))) G3932@t))) (G300e@syntax-dispatch G3932@t '#(scheme-id unsyntax-splicing)))) G3904@t))) (G300e@syntax-dispatch G3904@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) G38da@t))) (G300e@syntax-dispatch G38da@t '((#(scheme-id unsyntax) . each-any) . any)))) G38d6@t))) (G300e@syntax-dispatch G38d6@t '#(scheme-id unsyntax)))) G38bf@t))) (G300e@syntax-dispatch G38bf@t '(#(scheme-id unsyntax) any)))) G38bb@p))) (lambda (G38a4@x) ((lambda (G38a6@t) ((lambda (G38a8@ls/false) (if G38a8@ls/false (apply (lambda (G38aa@e) (call-with-values (lambda () (G38a3@quasi G38aa@e '0)) (lambda (G38af@G38ac G38b0@G38ad G38b1@G38ae) ((lambda (G38b5@v G38b6@rhs* G38b7@lhs*) (G2fc4@bless (list 'syntax-case (cons 'list G38b6@rhs*) '() (list G38b7@lhs* (list 'syntax G38b5@v))))) G38b1@G38ae G38b0@G38ad G38af@G38ac)))) G38a8@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G38a6@t))) (G300e@syntax-dispatch G38a6@t '(_ any)))) G38a4@x)))) '#f)))) (set! G3000@define-struct-macro (lambda (G398a@stx) (G30fb@syntax-violation '#f '"define-struct not supported" G398a@stx))) (set! G3002@define-record-type-macro (lambda (G398c@x) ((lambda (G398f@id G3991@get-record-name G3993@get-record-constructor-name G3995@get-record-predicate-name G3997@get-clause G3999@foo-rtd-code G399b@parent-rtd-code G399d@parent-rcd-code G399f@foo-rcd-code G39a1@get-protocol-code G39a3@get-fields G39a5@get-mutator-indices G39a7@get-mutators G39a9@get-accessors G39ab@enumerate G39ad@do-define-record G39af@verify-clauses) (begin (set! G398f@id (lambda (G3b82@ctxt . G3b84@str*) (G30ff@datum->syntax G3b82@ctxt (string->symbol (apply string-append (map (lambda (G3b86@x) (if (symbol? G3b86@x) (symbol->string G3b86@x) (if (string? G3b86@x) G3b86@x (assertion-violation 'define-record-type '"BUG")))) G3b84@str*)))))) (set! G3991@get-record-name (lambda (G3b70@spec) ((lambda (G3b72@t) ((lambda (G3b74@ls/false) (if G3b74@ls/false (apply (lambda (G3b76@foo G3b77@make-foo G3b78@foo?) G3b76@foo) G3b74@ls/false) ((lambda (G3b7c@t) ((lambda (G3b7e@ls/false) (if G3b7e@ls/false (apply (lambda (G3b80@foo) G3b80@foo) G3b7e@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3b7c@t))) (G300e@syntax-dispatch G3b7c@t 'any))) G3b72@t))) (G300e@syntax-dispatch G3b72@t '(any any any)))) G3b70@spec))) (set! G3993@get-record-constructor-name (lambda (G3b5c@spec) ((lambda (G3b5e@t) ((lambda (G3b60@ls/false) (if G3b60@ls/false (apply (lambda (G3b62@foo G3b63@make-foo G3b64@foo?) G3b63@make-foo) G3b60@ls/false) ((lambda (G3b68@t) ((lambda (G3b6a@ls/false) (if (and G3b6a@ls/false (apply (lambda (G3b6c@foo) (G2e0f@id? G3b6c@foo)) G3b6a@ls/false)) (apply (lambda (G3b6e@foo) (G398f@id G3b6e@foo '"make-" (G2e25@stx->datum G3b6e@foo))) G3b6a@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3b68@t))) (G300e@syntax-dispatch G3b68@t 'any))) G3b5e@t))) (G300e@syntax-dispatch G3b5e@t '(any any any)))) G3b5c@spec))) (set! G3995@get-record-predicate-name (lambda (G3b48@spec) ((lambda (G3b4a@t) ((lambda (G3b4c@ls/false) (if G3b4c@ls/false (apply (lambda (G3b4e@foo G3b4f@make-foo G3b50@foo?) G3b50@foo?) G3b4c@ls/false) ((lambda (G3b54@t) ((lambda (G3b56@ls/false) (if (and G3b56@ls/false (apply (lambda (G3b58@foo) (G2e0f@id? G3b58@foo)) G3b56@ls/false)) (apply (lambda (G3b5a@foo) (G398f@id G3b5a@foo (G2e25@stx->datum G3b5a@foo) '"?")) G3b56@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3b54@t))) (G300e@syntax-dispatch G3b54@t 'any))) G3b4a@t))) (G300e@syntax-dispatch G3b4a@t '(any any any)))) G3b48@spec))) (set! G3997@get-clause (lambda (G3b36@id G3b37@ls) ((lambda (G3b3a@t) ((lambda (G3b3c@ls/false) (if G3b3c@ls/false (apply (lambda () '#f) G3b3c@ls/false) ((lambda (G3b3e@t) ((lambda (G3b40@ls/false) (if G3b40@ls/false (apply (lambda (G3b42@x G3b43@rest G3b44@ls) (if (G2e17@free-id=? (G2fc4@bless G3b36@id) G3b42@x) (cons G3b42@x G3b43@rest) (G3997@get-clause G3b36@id G3b44@ls))) G3b40@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3b3e@t))) (G300e@syntax-dispatch G3b3e@t '((any . any) . any)))) G3b3a@t))) (G300e@syntax-dispatch G3b3a@t '()))) G3b37@ls))) (set! G3999@foo-rtd-code (lambda (G3ae4@name G3ae5@clause* G3ae6@parent-rtd-code) ((lambda (G3aeb@convert-field-spec*) (begin (set! G3aeb@convert-field-spec* (lambda (G3b1c@ls) (list->vector (map (lambda (G3b1e@x) ((lambda (G3b20@t) ((lambda (G3b22@ls/false) (if G3b22@ls/false (apply (lambda (G3b24@name G3b25@rest) (list 'mutable G3b24@name)) G3b22@ls/false) ((lambda (G3b28@t) ((lambda (G3b2a@ls/false) (if G3b2a@ls/false (apply (lambda (G3b2c@name G3b2d@rest) (list 'immutable G3b2c@name)) G3b2a@ls/false) ((lambda (G3b30@t) ((lambda (G3b32@ls/false) (if G3b32@ls/false (apply (lambda (G3b34@name) (list 'immutable G3b34@name)) G3b32@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3b30@t))) (G300e@syntax-dispatch G3b30@t 'any))) G3b28@t))) (G300e@syntax-dispatch G3b28@t '(#(scheme-id immutable) any . any)))) G3b20@t))) (G300e@syntax-dispatch G3b20@t '(#(scheme-id mutable) any . any)))) G3b1e@x)) G3b1c@ls)))) ((lambda (G3aec@uid-code G3aed@sealed? G3aee@opaque? G3aef@fields) (G2fc4@bless (list 'make-record-type-descriptor (list 'quote G3ae4@name) G3ae6@parent-rtd-code G3aec@uid-code G3aed@sealed? G3aee@opaque? G3aef@fields))) ((lambda (G3af4@t) ((lambda (G3af6@ls/false) (if G3af6@ls/false (apply (lambda () (list 'quote (gensym))) G3af6@ls/false) ((lambda (G3af8@t) ((lambda (G3afa@ls/false) (if G3afa@ls/false (apply (lambda (G3afc@uid) (list 'quote G3afc@uid)) G3afa@ls/false) ((lambda (G3afe@t) ((lambda (G3b00@ls/false) (if G3b00@ls/false (apply (lambda () '#f) G3b00@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3afe@t))) (G300e@syntax-dispatch G3afe@t '_))) G3af8@t))) (G300e@syntax-dispatch G3af8@t '(_ any)))) G3af4@t))) (G300e@syntax-dispatch G3af4@t '(_)))) (G3997@get-clause 'nongenerative G3ae5@clause*)) ((lambda (G3b02@t) ((lambda (G3b04@ls/false) (if G3b04@ls/false (apply (lambda () '#t) G3b04@ls/false) ((lambda (G3b06@t) ((lambda (G3b08@ls/false) (if G3b08@ls/false (apply (lambda () '#f) G3b08@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3b06@t))) (G300e@syntax-dispatch G3b06@t '_))) G3b02@t))) (G300e@syntax-dispatch G3b02@t '(_ #(atom #t))))) (G3997@get-clause 'sealed G3ae5@clause*)) ((lambda (G3b0a@t) ((lambda (G3b0c@ls/false) (if G3b0c@ls/false (apply (lambda () '#t) G3b0c@ls/false) ((lambda (G3b0e@t) ((lambda (G3b10@ls/false) (if G3b10@ls/false (apply (lambda () '#f) G3b10@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3b0e@t))) (G300e@syntax-dispatch G3b0e@t '_))) G3b0a@t))) (G300e@syntax-dispatch G3b0a@t '(_ #(atom #t))))) (G3997@get-clause 'opaque G3ae5@clause*)) ((lambda (G3b12@t) ((lambda (G3b14@ls/false) (if G3b14@ls/false (apply (lambda (G3b16@field-spec*) (list 'quote (G3aeb@convert-field-spec* G3b16@field-spec*))) G3b14@ls/false) ((lambda (G3b18@t) ((lambda (G3b1a@ls/false) (if G3b1a@ls/false (apply (lambda () ''#()) G3b1a@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3b18@t))) (G300e@syntax-dispatch G3b18@t '_))) G3b12@t))) (G300e@syntax-dispatch G3b12@t '(_ . each-any)))) (G3997@get-clause 'fields G3ae5@clause*))))) '#f))) (set! G399b@parent-rtd-code (lambda (G3acc@clause*) ((lambda (G3ace@t) ((lambda (G3ad0@ls/false) (if G3ad0@ls/false (apply (lambda (G3ad2@name) (list 'record-type-descriptor G3ad2@name)) G3ad0@ls/false) ((lambda (G3ad4@t) ((lambda (G3ad6@ls/false) (if G3ad6@ls/false (apply (lambda () ((lambda (G3ad8@t) ((lambda (G3ada@ls/false) (if G3ada@ls/false (apply (lambda (G3adc@rtd G3add@rcd) G3adc@rtd) G3ada@ls/false) ((lambda (G3ae0@t) ((lambda (G3ae2@ls/false) (if G3ae2@ls/false (apply (lambda () '#f) G3ae2@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3ae0@t))) (G300e@syntax-dispatch G3ae0@t '#(atom #f)))) G3ad8@t))) (G300e@syntax-dispatch G3ad8@t '(_ any any)))) (G3997@get-clause 'parent-rtd G3acc@clause*))) G3ad6@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3ad4@t))) (G300e@syntax-dispatch G3ad4@t '#(atom #f)))) G3ace@t))) (G300e@syntax-dispatch G3ace@t '(_ any)))) (G3997@get-clause 'parent G3acc@clause*)))) (set! G399d@parent-rcd-code (lambda (G3ab4@clause*) ((lambda (G3ab6@t) ((lambda (G3ab8@ls/false) (if G3ab8@ls/false (apply (lambda (G3aba@name) (list 'record-constructor-descriptor G3aba@name)) G3ab8@ls/false) ((lambda (G3abc@t) ((lambda (G3abe@ls/false) (if G3abe@ls/false (apply (lambda () ((lambda (G3ac0@t) ((lambda (G3ac2@ls/false) (if G3ac2@ls/false (apply (lambda (G3ac4@rtd G3ac5@rcd) G3ac5@rcd) G3ac2@ls/false) ((lambda (G3ac8@t) ((lambda (G3aca@ls/false) (if G3aca@ls/false (apply (lambda () '#f) G3aca@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3ac8@t))) (G300e@syntax-dispatch G3ac8@t '#(atom #f)))) G3ac0@t))) (G300e@syntax-dispatch G3ac0@t '(_ any any)))) (G3997@get-clause 'parent-rtd G3ab4@clause*))) G3abe@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3abc@t))) (G300e@syntax-dispatch G3abc@t '#(atom #f)))) G3ab6@t))) (G300e@syntax-dispatch G3ab6@t '(_ any)))) (G3997@get-clause 'parent G3ab4@clause*)))) (set! G399f@foo-rcd-code (lambda (G3aac@clause* G3aad@foo-rtd G3aae@protocol G3aaf@parent-rcd-code) (list 'make-record-constructor-descriptor G3aad@foo-rtd G3aaf@parent-rcd-code G3aae@protocol))) (set! G39a1@get-protocol-code (lambda (G3aa0@clause*) ((lambda (G3aa2@t) ((lambda (G3aa4@ls/false) (if G3aa4@ls/false (apply (lambda (G3aa6@expr) G3aa6@expr) G3aa4@ls/false) ((lambda (G3aa8@t) ((lambda (G3aaa@ls/false) (if G3aaa@ls/false (apply (lambda () '#f) G3aaa@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3aa8@t))) (G300e@syntax-dispatch G3aa8@t '_))) G3aa2@t))) (G300e@syntax-dispatch G3aa2@t '(_ any)))) (G3997@get-clause 'protocol G3aa0@clause*)))) (set! G39a3@get-fields (lambda (G3a8e@clause*) ((lambda (G3a90@t) ((lambda (G3a92@ls/false) (if G3a92@ls/false (apply (lambda () '()) G3a92@ls/false) ((lambda (G3a94@t) ((lambda (G3a96@ls/false) (if G3a96@ls/false (apply (lambda (G3a98@f*) G3a98@f*) G3a96@ls/false) ((lambda (G3a9a@t) ((lambda (G3a9c@ls/false) (if G3a9c@ls/false (apply (lambda (G3a9e@rest) (G39a3@get-fields G3a9e@rest)) G3a9c@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3a9a@t))) (G300e@syntax-dispatch G3a9a@t '(_ . any)))) G3a94@t))) (G300e@syntax-dispatch G3a94@t '((#(scheme-id fields) . each-any) . _)))) G3a90@t))) (G300e@syntax-dispatch G3a90@t '()))) G3a8e@clause*))) (set! G39a5@get-mutator-indices (lambda (G3a76@fields) ((letrec ((G3a78@f (lambda (G3a7a@fields G3a7b@i) ((lambda (G3a7e@t) ((lambda (G3a80@ls/false) (if G3a80@ls/false (apply (lambda () '()) G3a80@ls/false) ((lambda (G3a82@t) ((lambda (G3a84@ls/false) (if G3a84@ls/false (apply (lambda (G3a86@rest) (cons G3a7b@i (G3a78@f G3a86@rest (+ G3a7b@i '1)))) G3a84@ls/false) ((lambda (G3a88@t) ((lambda (G3a8a@ls/false) (if G3a8a@ls/false (apply (lambda (G3a8c@rest) (G3a78@f G3a8c@rest (+ G3a7b@i '1))) G3a8a@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3a88@t))) (G300e@syntax-dispatch G3a88@t '(_ . any)))) G3a82@t))) (G300e@syntax-dispatch G3a82@t '((#(scheme-id mutable) . _) . any)))) G3a7e@t))) (G300e@syntax-dispatch G3a7e@t '()))) G3a7a@fields)))) G3a78@f) G3a76@fields '0))) (set! G39a7@get-mutators (lambda (G3a4c@foo G3a4d@fields) ((lambda (G3a51@gen-name) (begin (set! G3a51@gen-name (lambda (G3a74@x) (G30ff@datum->syntax G3a4c@foo (string->symbol (string-append (symbol->string (G3101@syntax->datum G3a4c@foo)) '"-" (symbol->string (G3101@syntax->datum G3a74@x)) '"-set!"))))) ((letrec ((G3a52@f (lambda (G3a54@fields) ((lambda (G3a56@t) ((lambda (G3a58@ls/false) (if G3a58@ls/false (apply (lambda () '()) G3a58@ls/false) ((lambda (G3a5a@t) ((lambda (G3a5c@ls/false) (if G3a5c@ls/false (apply (lambda (G3a5e@name G3a5f@accessor G3a60@mutator G3a61@rest) (cons G3a60@mutator (G3a52@f G3a61@rest))) G3a5c@ls/false) ((lambda (G3a66@t) ((lambda (G3a68@ls/false) (if G3a68@ls/false (apply (lambda (G3a6a@name G3a6b@rest) (cons (G3a51@gen-name G3a6a@name) (G3a52@f G3a6b@rest))) G3a68@ls/false) ((lambda (G3a6e@t) ((lambda (G3a70@ls/false) (if G3a70@ls/false (apply (lambda (G3a72@rest) (G3a52@f G3a72@rest)) G3a70@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3a6e@t))) (G300e@syntax-dispatch G3a6e@t '(_ . any)))) G3a66@t))) (G300e@syntax-dispatch G3a66@t '((#(scheme-id mutable) any) . any)))) G3a5a@t))) (G300e@syntax-dispatch G3a5a@t '((#(scheme-id mutable) any any any) . any)))) G3a56@t))) (G300e@syntax-dispatch G3a56@t '()))) G3a54@fields)))) G3a52@f) G3a4d@fields))) '#f))) (set! G39a9@get-accessors (lambda (G3a08@foo G3a09@fields) ((lambda (G3a0d@gen-name) (begin (set! G3a0d@gen-name (lambda (G3a4a@x) (G30ff@datum->syntax G3a08@foo (string->symbol (string-append (symbol->string (G3101@syntax->datum G3a08@foo)) '"-" (symbol->string (G3101@syntax->datum G3a4a@x))))))) (map (lambda (G3a0e@field) ((lambda (G3a10@t) ((lambda (G3a12@ls/false) (if (and G3a12@ls/false (apply (lambda (G3a14@name G3a15@accessor G3a16@mutator) (G2e0f@id? G3a15@accessor)) G3a12@ls/false)) (apply (lambda (G3a1a@name G3a1b@accessor G3a1c@mutator) G3a1b@accessor) G3a12@ls/false) ((lambda (G3a20@t) ((lambda (G3a22@ls/false) (if (and G3a22@ls/false (apply (lambda (G3a24@name G3a25@accessor) (G2e0f@id? G3a25@accessor)) G3a22@ls/false)) (apply (lambda (G3a28@name G3a29@accessor) G3a29@accessor) G3a22@ls/false) ((lambda (G3a2c@t) ((lambda (G3a2e@ls/false) (if (and G3a2e@ls/false (apply (lambda (G3a30@name) (G2e0f@id? G3a30@name)) G3a2e@ls/false)) (apply (lambda (G3a32@name) (G3a0d@gen-name G3a32@name)) G3a2e@ls/false) ((lambda (G3a34@t) ((lambda (G3a36@ls/false) (if (and G3a36@ls/false (apply (lambda (G3a38@name) (G2e0f@id? G3a38@name)) G3a36@ls/false)) (apply (lambda (G3a3a@name) (G3a0d@gen-name G3a3a@name)) G3a36@ls/false) ((lambda (G3a3c@t) ((lambda (G3a3e@ls/false) (if (and G3a3e@ls/false (apply (lambda (G3a40@name) (G2e0f@id? G3a40@name)) G3a3e@ls/false)) (apply (lambda (G3a42@name) (G3a0d@gen-name G3a42@name)) G3a3e@ls/false) ((lambda (G3a44@t) ((lambda (G3a46@ls/false) (if G3a46@ls/false (apply (lambda (G3a48@others) (G30fb@syntax-violation '#f '"invalid field spec" G3a0e@field)) G3a46@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3a44@t))) (G300e@syntax-dispatch G3a44@t 'any))) G3a3c@t))) (G300e@syntax-dispatch G3a3c@t 'any))) G3a34@t))) (G300e@syntax-dispatch G3a34@t '(#(scheme-id immutable) any)))) G3a2c@t))) (G300e@syntax-dispatch G3a2c@t '(#(scheme-id mutable) any)))) G3a20@t))) (G300e@syntax-dispatch G3a20@t '(#(scheme-id immutable) any any)))) G3a10@t))) (G300e@syntax-dispatch G3a10@t '(#(scheme-id mutable) any any any)))) G3a0e@field)) G3a09@fields))) '#f))) (set! G39ab@enumerate (lambda (G3a00@ls) ((letrec ((G3a02@f (lambda (G3a04@ls G3a05@i) (if (null? G3a04@ls) '() (cons G3a05@i (G3a02@f (cdr G3a04@ls) (+ G3a05@i '1))))))) G3a02@f) G3a00@ls '0))) (set! G39ad@do-define-record (lambda (G39d8@namespec G39d9@clause*) ((lambda (G39dc@foo) ((lambda (G39de@foo-rtd) ((lambda (G39e0@foo-rcd) ((lambda (G39e2@protocol) ((lambda (G39e4@make-foo) ((lambda (G39e6@fields) ((lambda (G39e8@idx*) ((lambda (G39ea@foo-x*) ((lambda (G39ec@set-foo-x!*) ((lambda (G39ee@set-foo-idx*) ((lambda (G39f0@foo?) ((lambda (G39f2@foo-rtd-code) ((lambda (G39f4@foo-rcd-code) ((lambda (G39f6@protocol-code) ((lambda () (G2fc4@bless (cons 'begin (cons (list 'define G39de@foo-rtd G39f2@foo-rtd-code) (cons (list 'define G39e2@protocol G39f6@protocol-code) (cons (list 'define G39e0@foo-rcd G39f4@foo-rcd-code) (cons (list 'define-syntax G39dc@foo (list 'list ''$rtd (list 'syntax G39de@foo-rtd) (list 'syntax G39e0@foo-rcd))) (cons (list 'define G39f0@foo? (list 'record-predicate G39de@foo-rtd)) (cons (list 'define G39e4@make-foo (list 'record-constructor G39e0@foo-rcd)) (append (map (lambda (G39f8@foo-x G39f9@idx) (list 'define G39f8@foo-x (list 'record-accessor G39de@foo-rtd G39f9@idx))) G39ea@foo-x* G39e8@idx*) (map (lambda (G39fc@set-foo-x! G39fd@idx) (list 'define G39fc@set-foo-x! (list 'record-mutator G39de@foo-rtd G39fd@idx))) G39ec@set-foo-x!* G39ee@set-foo-idx*))))))))))))) (G39a1@get-protocol-code G39d9@clause*))) (G399f@foo-rcd-code G39d9@clause* G39de@foo-rtd G39e2@protocol (G399d@parent-rcd-code G39d9@clause*)))) (G3999@foo-rtd-code G39dc@foo G39d9@clause* (G399b@parent-rtd-code G39d9@clause*)))) (G3995@get-record-predicate-name G39d8@namespec))) (G39a5@get-mutator-indices G39e6@fields))) (G39a7@get-mutators G39dc@foo G39e6@fields))) (G39a9@get-accessors G39dc@foo G39e6@fields))) (G39ab@enumerate G39e6@fields))) (G39a3@get-fields G39d9@clause*))) (G3993@get-record-constructor-name G39d8@namespec))) (gensym))) (gensym))) (gensym))) (G3991@get-record-name G39d8@namespec)))) (set! G39af@verify-clauses (lambda (G39b8@x G39b9@cls*) ((lambda (G39bd@valid-kwds G39bf@free-id-member?) (begin (set! G39bd@valid-kwds (map G2fc4@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (set! G39bf@free-id-member? (lambda (G39d4@x G39d5@ls) (and (pair? G39d5@ls) (or (G2e17@free-id=? G39d4@x (car G39d5@ls)) (G39bf@free-id-member? G39d4@x (cdr G39d5@ls)))))) ((letrec ((G39c0@f (lambda (G39c2@cls* G39c3@seen*) (if (not (null? G39c2@cls*)) ((lambda (G39c6@t) ((lambda (G39c8@ls/false) (if G39c8@ls/false (apply (lambda (G39ca@kwd G39cb@rest) (if (or (not (G2e0f@id? G39ca@kwd)) (not (G39bf@free-id-member? G39ca@kwd G39bd@valid-kwds))) (G30fb@syntax-violation '#f '"not a valid define-record-type keyword" G39ca@kwd) (if (G2e1d@bound-id-member? G39ca@kwd G39c3@seen*) (G30fb@syntax-violation '#f '"duplicate use of keyword " G39b8@x G39ca@kwd) (G39c0@f (cdr G39c2@cls*) (cons G39ca@kwd G39c3@seen*))))) G39c8@ls/false) ((lambda (G39ce@t) ((lambda (G39d0@ls/false) (if G39d0@ls/false (apply (lambda (G39d2@cls) (G30fb@syntax-violation '#f '"malformed define-record-type clause" G39d2@cls)) G39d0@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G39ce@t))) (G300e@syntax-dispatch G39ce@t 'any))) G39c6@t))) (G300e@syntax-dispatch G39c6@t '(any . any)))) (car G39c2@cls*)) (void))))) G39c0@f) G39b9@cls* '()))) '#f '#f))) ((lambda (G39b0@t) ((lambda (G39b2@ls/false) (if G39b2@ls/false (apply (lambda (G39b4@namespec G39b5@clause*) (begin (G39af@verify-clauses G398c@x G39b5@clause*) (G39ad@do-define-record G39b4@namespec G39b5@clause*))) G39b2@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G39b0@t))) (G300e@syntax-dispatch G39b0@t '(_ any . each-any)))) G398c@x))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G3004@define-condition-type-macro (lambda (G3b88@x) ((lambda (G3b8b@mkname) (begin (set! G3b8b@mkname (lambda (G3bb8@name G3bb9@suffix) (G30ff@datum->syntax G3bb8@name (string->symbol (string-append (symbol->string (G3101@syntax->datum G3bb8@name)) G3bb9@suffix))))) ((lambda (G3b8c@t) ((lambda (G3b8e@ls/false) (if (and G3b8e@ls/false (apply (lambda (G3b90@ctxt G3b91@name G3b92@super G3b93@constructor G3b94@predicate G3b95@field* G3b96@accessor*) (and (G2e0f@id? G3b91@name) (G2e0f@id? G3b92@super) (G2e0f@id? G3b93@constructor) (G2e0f@id? G3b94@predicate) (for-all G2e0f@id? G3b95@field*) (for-all G2e0f@id? G3b96@accessor*))) G3b8e@ls/false)) (apply (lambda (G3b9e@ctxt G3b9f@name G3ba0@super G3ba1@constructor G3ba2@predicate G3ba3@field* G3ba4@accessor*) ((lambda (G3bac@aux-accessor*) (G2fc4@bless (cons 'begin (cons (cons 'define-record-type (cons (list G3b9f@name G3ba1@constructor (gensym)) (cons (list 'parent G3ba0@super) (cons (cons 'fields (map (lambda (G3bae@field G3baf@aux) (list 'immutable G3bae@field G3baf@aux)) G3ba3@field* G3bac@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define G3ba2@predicate (list 'condition-predicate (list 'record-type-descriptor G3b9f@name))) (map (lambda (G3bb2@accessor G3bb3@aux) (list 'define G3bb2@accessor (list 'condition-accessor (list 'record-type-descriptor G3b9f@name) G3bb3@aux))) G3ba4@accessor* G3bac@aux-accessor*)))))) (map (lambda (G3bb6@x) (gensym)) G3ba4@accessor*))) G3b8e@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3b8c@t))) (G300e@syntax-dispatch G3b8c@t '(any any any any any . #(each (any any)))))) G3b88@x))) '#f))) (set! G3006@incorrect-usage-macro (lambda (G3bbc@e) (G30fb@syntax-violation '#f '"incorrect usage of auxiliary keyword" G3bbc@e))) (set! G3008@parameterize-macro (lambda (G3bbe@e) ((lambda (G3bc0@t) ((lambda (G3bc2@ls/false) (if G3bc2@ls/false (apply (lambda (G3bc4@b G3bc5@b*) (G2fc4@bless (cons 'let (cons '() (cons G3bc4@b G3bc5@b*))))) G3bc2@ls/false) ((lambda (G3bc8@t) ((lambda (G3bca@ls/false) (if G3bca@ls/false (apply (lambda (G3bcc@olhs* G3bcd@orhs* G3bce@b G3bcf@b*) ((lambda (G3bd4@lhs* G3bd5@rhs*) (G2fc4@bless (cons (list 'lambda (append G3bd4@lhs* G3bd5@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (G3bd8@lhs G3bd9@rhs) (list 'let (list (list 't (list G3bd8@lhs))) (list G3bd8@lhs G3bd9@rhs) (cons 'set! (cons G3bd9@rhs '(t))))) G3bd4@lhs* G3bd5@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons G3bce@b G3bcf@b*))) '(swap)))))) (append G3bcc@olhs* G3bcd@orhs*)))) (G30e7@generate-temporaries G3bcc@olhs*) (G30e7@generate-temporaries G3bcd@orhs*))) G3bca@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3bc8@t))) (G300e@syntax-dispatch G3bc8@t '(_ #(each (any any)) any . each-any)))) G3bc0@t))) (G300e@syntax-dispatch G3bc0@t '(_ () any . each-any)))) G3bbe@e))) (set! G300a@foreign-call-transformer (lambda (G3bdc@e G3bdd@r G3bde@mr) ((lambda (G3be2@t) ((lambda (G3be4@ls/false) (if G3be4@ls/false (apply (lambda (G3be6@name G3be7@arg*) (cons 'foreign-call (cons (G3032@chi-expr G3be6@name G3bdd@r G3bde@mr) (G302e@chi-expr* G3be7@arg* G3bdd@r G3bde@mr)))) G3be4@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3be2@t))) (G300e@syntax-dispatch G3be2@t '(_ any . each-any)))) G3bdc@e))) (set! G300c@convert-pattern (lambda (G3bea@pattern G3beb@keys) ((lambda (G3bef@cvt* G3bf1@cvt) (begin (set! G3bef@cvt* (lambda (G3c80@p* G3c81@n G3c82@ids) (if (null? G3c80@p*) (values '() G3c82@ids) (call-with-values (lambda () (G3bef@cvt* (cdr G3c80@p*) G3c81@n G3c82@ids)) (lambda (G3c88@G3c86 G3c89@G3c87) ((lambda (G3c8c@ids G3c8d@y) (call-with-values (lambda () (G3bf1@cvt (car G3c80@p*) G3c81@n G3c8c@ids)) (lambda (G3c92@G3c90 G3c93@G3c91) ((lambda (G3c96@ids G3c97@x) (values (cons G3c97@x G3c8d@y) G3c96@ids)) G3c93@G3c91 G3c92@G3c90)))) G3c89@G3c87 G3c88@G3c86)))))) (set! G3bf1@cvt (lambda (G3bf2@p G3bf3@n G3bf4@ids) ((lambda (G3bf8@t) ((lambda (G3bfa@ls/false) (if (and G3bfa@ls/false (apply (lambda (G3bfc@id) (G2e0f@id? G3bfc@id)) G3bfa@ls/false)) (apply (lambda (G3bfe@id) (if (G2e1d@bound-id-member? G3bf2@p G3beb@keys) (values (vector 'free-id G3bf2@p) G3bf4@ids) (if (G2e17@free-id=? G3bf2@p (G2f98@scheme-stx '_)) (values '_ G3bf4@ids) (values 'any (cons (cons G3bf2@p G3bf3@n) G3bf4@ids))))) G3bfa@ls/false) ((lambda (G3c00@t) ((lambda (G3c02@ls/false) (if (and G3c02@ls/false (apply (lambda (G3c04@p G3c05@dots) (G3010@ellipsis? G3c05@dots)) G3c02@ls/false)) (apply (lambda (G3c08@p G3c09@dots) (call-with-values (lambda () (G3bf1@cvt G3c08@p (+ G3bf3@n '1) G3bf4@ids)) (lambda (G3c0e@G3c0c G3c0f@G3c0d) ((lambda (G3c12@ids G3c13@p) (values (if (eq? G3c13@p 'any) 'each-any (vector 'each G3c13@p)) G3c12@ids)) G3c0f@G3c0d G3c0e@G3c0c)))) G3c02@ls/false) ((lambda (G3c16@t) ((lambda (G3c18@ls/false) (if (and G3c18@ls/false (apply (lambda (G3c1a@x G3c1b@dots G3c1c@ys G3c1d@z) (G3010@ellipsis? G3c1b@dots)) G3c18@ls/false)) (apply (lambda (G3c22@x G3c23@dots G3c24@ys G3c25@z) (call-with-values (lambda () (G3bf1@cvt G3c25@z G3bf3@n G3bf4@ids)) (lambda (G3c2c@G3c2a G3c2d@G3c2b) ((lambda (G3c30@ids G3c31@z) (call-with-values (lambda () (G3bef@cvt* G3c24@ys G3bf3@n G3c30@ids)) (lambda (G3c36@G3c34 G3c37@G3c35) ((lambda (G3c3a@ids G3c3b@ys) (call-with-values (lambda () (G3bf1@cvt G3c22@x (+ G3bf3@n '1) G3c3a@ids)) (lambda (G3c40@G3c3e G3c41@G3c3f) ((lambda (G3c44@ids G3c45@x) (values (vector 'each+ G3c45@x (reverse G3c3b@ys) G3c31@z) G3c44@ids)) G3c41@G3c3f G3c40@G3c3e)))) G3c37@G3c35 G3c36@G3c34)))) G3c2d@G3c2b G3c2c@G3c2a)))) G3c18@ls/false) ((lambda (G3c48@t) ((lambda (G3c4a@ls/false) (if G3c4a@ls/false (apply (lambda (G3c4c@x G3c4d@y) (call-with-values (lambda () (G3bf1@cvt G3c4d@y G3bf3@n G3bf4@ids)) (lambda (G3c52@G3c50 G3c53@G3c51) ((lambda (G3c56@ids G3c57@y) (call-with-values (lambda () (G3bf1@cvt G3c4c@x G3bf3@n G3c56@ids)) (lambda (G3c5c@G3c5a G3c5d@G3c5b) ((lambda (G3c60@ids G3c61@x) (values (cons G3c61@x G3c57@y) G3c60@ids)) G3c5d@G3c5b G3c5c@G3c5a)))) G3c53@G3c51 G3c52@G3c50)))) G3c4a@ls/false) ((lambda (G3c64@t) ((lambda (G3c66@ls/false) (if G3c66@ls/false (apply (lambda () (values '() G3bf4@ids)) G3c66@ls/false) ((lambda (G3c68@t) ((lambda (G3c6a@ls/false) (if (and G3c6a@ls/false (apply (lambda (G3c6c@p) (not (G2dd7@stx? G3c6c@p))) G3c6a@ls/false)) (apply (lambda (G3c6e@p) (call-with-values (lambda () (G3bf1@cvt G3c6e@p G3bf3@n G3bf4@ids)) (lambda (G3c72@G3c70 G3c73@G3c71) ((lambda (G3c76@ids G3c77@p) (values (vector 'vector G3c77@p) G3c76@ids)) G3c73@G3c71 G3c72@G3c70)))) G3c6a@ls/false) ((lambda (G3c7a@t) ((lambda (G3c7c@ls/false) (if G3c7c@ls/false (apply (lambda (G3c7e@datum) (values (vector 'atom (G2e25@stx->datum G3c7e@datum)) G3bf4@ids)) G3c7c@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3c7a@t))) (G300e@syntax-dispatch G3c7a@t 'any))) G3c68@t))) (G300e@syntax-dispatch G3c68@t '#(vector each-any)))) G3c64@t))) (G300e@syntax-dispatch G3c64@t '()))) G3c48@t))) (G300e@syntax-dispatch G3c48@t '(any . any)))) G3c16@t))) (G300e@syntax-dispatch G3c16@t '(any any . #(each+ any () any))))) G3c00@t))) (G300e@syntax-dispatch G3c00@t '(any any)))) G3bf8@t))) (G300e@syntax-dispatch G3bf8@t 'any))) G3bf2@p))) (G3bf1@cvt G3bea@pattern '0 '()))) '#f '#f))) (set! G300e@syntax-dispatch ((lambda () ((lambda (G3c9b@stx^ G3c9d@match-each G3c9f@match-each+ G3ca1@match-each-any G3ca3@match-empty G3ca5@combine G3ca7@match* G3ca9@match) (begin (set! G3c9b@stx^ (lambda (G3d64@e G3d65@m* G3d66@s* G3d67@ae*) (if (and (null? G3d65@m*) (null? G3d66@s*) (null? G3d67@ae*)) G3d64@e (G2df7@mkstx G3d64@e G3d65@m* G3d66@s* G3d67@ae*)))) (set! G3c9d@match-each (lambda (G3d47@e G3d48@p G3d49@m* G3d4a@s* G3d4b@ae*) (if (pair? G3d47@e) ((lambda (G3d51@first) (and G3d51@first ((lambda (G3d53@rest) (and G3d53@rest (cons G3d51@first G3d53@rest))) (G3c9d@match-each (cdr G3d47@e) G3d48@p G3d49@m* G3d4a@s* G3d4b@ae*)))) (G3ca9@match (car G3d47@e) G3d48@p G3d49@m* G3d4a@s* G3d4b@ae* '())) (if (null? G3d47@e) '() (if (G2dd7@stx? G3d47@e) (and (not (G2d89@top-marked? G3d49@m*)) (call-with-values (lambda () (G2df5@join-wraps G3d49@m* G3d4a@s* G3d4b@ae* G3d47@e)) (lambda (G3d58@G3d55 G3d59@G3d56 G3d5a@G3d57) ((lambda (G3d5e@ae* G3d5f@s* G3d60@m*) (G3c9d@match-each (G2ddb@stx-expr G3d47@e) G3d48@p G3d60@m* G3d5f@s* G3d5e@ae*)) G3d5a@G3d57 G3d59@G3d56 G3d58@G3d55)))) (if (G29a0@G28ce@annotation? G3d47@e) (G3c9d@match-each (G29a2@G28d2@annotation-expression G3d47@e) G3d48@p G3d49@m* G3d4a@s* G3d4b@ae*) '#f)))))) (set! G3c9f@match-each+ (lambda (G3d0d@e G3d0e@x-pat G3d0f@y-pat G3d10@z-pat G3d11@m* G3d12@s* G3d13@ae* G3d14@r) ((letrec ((G3d1d@f (lambda (G3d1f@e G3d20@m* G3d21@s* G3d22@ae*) (if (pair? G3d1f@e) (call-with-values (lambda () (G3d1d@f (cdr G3d1f@e) G3d20@m* G3d21@s* G3d22@ae*)) (lambda (G3d2a@G3d27 G3d2b@G3d28 G3d2c@G3d29) ((lambda (G3d30@r G3d31@y-pat G3d32@xr*) (if G3d30@r (if (null? G3d31@y-pat) ((lambda (G3d36@xr) (if G3d36@xr (values (cons G3d36@xr G3d32@xr*) G3d31@y-pat G3d30@r) (values '#f '#f '#f))) (G3ca9@match (car G3d1f@e) G3d0e@x-pat G3d20@m* G3d21@s* G3d22@ae* '())) (values '() (cdr G3d31@y-pat) (G3ca9@match (car G3d1f@e) (car G3d31@y-pat) G3d20@m* G3d21@s* G3d22@ae* G3d30@r))) (values '#f '#f '#f))) G3d2c@G3d29 G3d2b@G3d28 G3d2a@G3d27))) (if (G2dd7@stx? G3d1f@e) (if (G2d89@top-marked? G3d20@m*) (values '() G3d0f@y-pat (G3ca9@match G3d1f@e G3d10@z-pat G3d20@m* G3d21@s* G3d22@ae* G3d14@r)) (call-with-values (lambda () (G2df5@join-wraps G3d20@m* G3d21@s* G3d22@ae* G3d1f@e)) (lambda (G3d3b@G3d38 G3d3c@G3d39 G3d3d@G3d3a) ((lambda (G3d41@ae* G3d42@s* G3d43@m*) (G3d1d@f (G2ddb@stx-expr G3d1f@e) G3d43@m* G3d42@s* G3d41@ae*)) G3d3d@G3d3a G3d3c@G3d39 G3d3b@G3d38)))) (if (G29a0@G28ce@annotation? G3d1f@e) (G3d1d@f (G29a2@G28d2@annotation-expression G3d1f@e) G3d20@m* G3d21@s* G3d22@ae*) (values '() G3d0f@y-pat (G3ca9@match G3d1f@e G3d10@z-pat G3d20@m* G3d21@s* G3d22@ae* G3d14@r)))))))) G3d1d@f) G3d0d@e G3d11@m* G3d12@s* G3d13@ae*))) (set! G3ca1@match-each-any (lambda (G3cf4@e G3cf5@m* G3cf6@s* G3cf7@ae*) (if (pair? G3cf4@e) ((lambda (G3cfc@l) (and G3cfc@l (cons (G3c9b@stx^ (car G3cf4@e) G3cf5@m* G3cf6@s* G3cf7@ae*) G3cfc@l))) (G3ca1@match-each-any (cdr G3cf4@e) G3cf5@m* G3cf6@s* G3cf7@ae*)) (if (null? G3cf4@e) '() (if (G2dd7@stx? G3cf4@e) (and (not (G2d89@top-marked? G3cf5@m*)) (call-with-values (lambda () (G2df5@join-wraps G3cf5@m* G3cf6@s* G3cf7@ae* G3cf4@e)) (lambda (G3d01@G3cfe G3d02@G3cff G3d03@G3d00) ((lambda (G3d07@ae* G3d08@s* G3d09@m*) (G3ca1@match-each-any (G2ddb@stx-expr G3cf4@e) G3d09@m* G3d08@s* G3d07@ae*)) G3d03@G3d00 G3d02@G3cff G3d01@G3cfe)))) (if (G29a0@G28ce@annotation? G3cf4@e) (G3ca1@match-each-any (G29a2@G28d2@annotation-expression G3cf4@e) G3cf5@m* G3cf6@s* G3cf7@ae*) '#f)))))) (set! G3ca3@match-empty (lambda (G3cee@p G3cef@r) (if (null? G3cee@p) G3cef@r (if (eq? G3cee@p '_) G3cef@r (if (eq? G3cee@p 'any) (cons '() G3cef@r) (if (pair? G3cee@p) (G3ca3@match-empty (car G3cee@p) (G3ca3@match-empty (cdr G3cee@p) G3cef@r)) (if (eq? G3cee@p 'each-any) (cons '() G3cef@r) ((lambda (G3cf2@t) (if (memv G3cf2@t '(each)) (G3ca3@match-empty (vector-ref G3cee@p '1) G3cef@r) (if (memv G3cf2@t '(each+)) (G3ca3@match-empty (vector-ref G3cee@p '1) (G3ca3@match-empty (reverse (vector-ref G3cee@p '2)) (G3ca3@match-empty (vector-ref G3cee@p '3) G3cef@r))) (if (memv G3cf2@t '(free-id atom)) G3cef@r (if (memv G3cf2@t '(scheme-id atom)) G3cef@r (if (memv G3cf2@t '(vector)) (G3ca3@match-empty (vector-ref G3cee@p '1) G3cef@r) (assertion-violation 'syntax-dispatch '"invalid pattern" G3cee@p))))))) (vector-ref G3cee@p '0))))))))) (set! G3ca5@combine (lambda (G3cea@r* G3ceb@r) (if (null? (car G3cea@r*)) G3ceb@r (cons (map car G3cea@r*) (G3ca5@combine (map cdr G3cea@r*) G3ceb@r))))) (set! G3ca7@match* (lambda (G3cc9@e G3cca@p G3ccb@m* G3ccc@s* G3ccd@ae* G3cce@r) (if (null? G3cca@p) (and (null? G3cc9@e) G3cce@r) (if (pair? G3cca@p) (and (pair? G3cc9@e) (G3ca9@match (car G3cc9@e) (car G3cca@p) G3ccb@m* G3ccc@s* G3ccd@ae* (G3ca9@match (cdr G3cc9@e) (cdr G3cca@p) G3ccb@m* G3ccc@s* G3ccd@ae* G3cce@r))) (if (eq? G3cca@p 'each-any) ((lambda (G3cd5@l) (and G3cd5@l (cons G3cd5@l G3cce@r))) (G3ca1@match-each-any G3cc9@e G3ccb@m* G3ccc@s* G3ccd@ae*)) ((lambda (G3cd7@t) (if (memv G3cd7@t '(each)) (if (null? G3cc9@e) (G3ca3@match-empty (vector-ref G3cca@p '1) G3cce@r) ((lambda (G3cd9@r*) (and G3cd9@r* (G3ca5@combine G3cd9@r* G3cce@r))) (G3c9d@match-each G3cc9@e (vector-ref G3cca@p '1) G3ccb@m* G3ccc@s* G3ccd@ae*))) (if (memv G3cd7@t '(free-id)) (and (symbol? G3cc9@e) (G2d89@top-marked? G3ccb@m*) (G2e17@free-id=? (G3c9b@stx^ G3cc9@e G3ccb@m* G3ccc@s* G3ccd@ae*) (vector-ref G3cca@p '1)) G3cce@r) (if (memv G3cd7@t '(scheme-id)) (and (symbol? G3cc9@e) (G2d89@top-marked? G3ccb@m*) (G2e17@free-id=? (G3c9b@stx^ G3cc9@e G3ccb@m* G3ccc@s* G3ccd@ae*) (G2f98@scheme-stx (vector-ref G3cca@p '1))) G3cce@r) (if (memv G3cd7@t '(each+)) (call-with-values (lambda () (G3c9f@match-each+ G3cc9@e (vector-ref G3cca@p '1) (vector-ref G3cca@p '2) (vector-ref G3cca@p '3) G3ccb@m* G3ccc@s* G3ccd@ae* G3cce@r)) (lambda (G3cde@G3cdb G3cdf@G3cdc G3ce0@G3cdd) ((lambda (G3ce4@r G3ce5@y-pat G3ce6@xr*) (and G3ce4@r (null? G3ce5@y-pat) (if (null? G3ce6@xr*) (G3ca3@match-empty (vector-ref G3cca@p '1) G3ce4@r) (G3ca5@combine G3ce6@xr* G3ce4@r)))) G3ce0@G3cdd G3cdf@G3cdc G3cde@G3cdb))) (if (memv G3cd7@t '(atom)) (and (equal? (vector-ref G3cca@p '1) (G2e23@strip G3cc9@e G3ccb@m*)) G3cce@r) (if (memv G3cd7@t '(vector)) (and (vector? G3cc9@e) (G3ca9@match (vector->list G3cc9@e) (vector-ref G3cca@p '1) G3ccb@m* G3ccc@s* G3ccd@ae* G3cce@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" G3cca@p)))))))) (vector-ref G3cca@p '0))))))) (set! G3ca9@match (lambda (G3cae@e G3caf@p G3cb0@m* G3cb1@s* G3cb2@ae* G3cb3@r) (if (not G3cb3@r) '#f (if (eq? G3caf@p '_) G3cb3@r (if (eq? G3caf@p 'any) (cons (G3c9b@stx^ G3cae@e G3cb0@m* G3cb1@s* G3cb2@ae*) G3cb3@r) (if (G2dd7@stx? G3cae@e) (and (not (G2d89@top-marked? G3cb0@m*)) (call-with-values (lambda () (G2df5@join-wraps G3cb0@m* G3cb1@s* G3cb2@ae* G3cae@e)) (lambda (G3cbd@G3cba G3cbe@G3cbb G3cbf@G3cbc) ((lambda (G3cc3@ae* G3cc4@s* G3cc5@m*) (G3ca9@match (G2ddb@stx-expr G3cae@e) G3caf@p G3cc5@m* G3cc4@s* G3cc3@ae* G3cb3@r)) G3cbf@G3cbc G3cbe@G3cbb G3cbd@G3cba)))) (if (G29a0@G28ce@annotation? G3cae@e) (G3ca9@match (G29a2@G28d2@annotation-expression G3cae@e) G3caf@p G3cb0@m* G3cb1@s* G3cb2@ae* G3cb3@r) (G3ca7@match* G3cae@e G3caf@p G3cb0@m* G3cb1@s* G3cb2@ae* G3cb3@r)))))))) (lambda (G3caa@e G3cab@p) (G3ca9@match G3caa@e G3cab@p '() '() '() '())))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3010@ellipsis? (lambda (G3d6c@x) (and (G2e0f@id? G3d6c@x) (G2e17@free-id=? G3d6c@x (G2f98@scheme-stx '...))))) (set! G3012@underscore? (lambda (G3d6e@x) (and (G2e0f@id? G3d6e@x) (G2e17@free-id=? G3d6e@x (G2f98@scheme-stx '_))))) (set! G3014@verify-literals (lambda (G3d70@lits G3d71@expr) (for-each (lambda (G3d74@x) (if (or (not (G2e0f@id? G3d74@x)) (G3010@ellipsis? G3d74@x) (G3012@underscore? G3d74@x)) (G30fb@syntax-violation '#f '"invalid literal" G3d71@expr G3d74@x) (void))) G3d70@lits))) (set! G3016@syntax-case-transformer ((lambda () ((lambda (G3d77@build-dispatch-call G3d79@invalid-ids-error G3d7b@gen-clause G3d7d@gen-syntax-case) (begin (set! G3d77@build-dispatch-call (lambda (G3de6@pvars G3de7@expr G3de8@y G3de9@r G3dea@mr) ((lambda (G3df0@ids G3df1@levels) ((lambda (G3df4@labels G3df5@new-vars) ((lambda (G3df8@body) (list '(primitive apply) (G2d69@G2ca7@build-lambda '#f G3df5@new-vars G3df8@body) G3de8@y)) (G3032@chi-expr (G2dfb@add-subst (G2dca@make-full-rib G3df0@ids G3df4@labels) G3de7@expr) (append (map (lambda (G3dfa@label G3dfb@var G3dfc@level) (cons G3dfa@label (G2e2f@make-binding 'syntax (cons G3dfb@var G3dfc@level)))) G3df4@labels G3df5@new-vars (map cdr G3de6@pvars)) G3de9@r) G3dea@mr))) (map G2d8f@gen-label G3df0@ids) (map G2d8b@gen-lexical G3df0@ids))) (map car G3de6@pvars) (map cdr G3de6@pvars)))) (set! G3d79@invalid-ids-error (lambda (G3dda@id* G3ddb@e G3ddc@class) ((letrec ((G3de0@find (lambda (G3de2@id* G3de3@ok*) (if (null? G3de2@id*) (G30fb@syntax-violation '#f '"invalid syntax" G3ddb@e) (if (G2e0f@id? (car G3de2@id*)) (if (G2e1d@bound-id-member? (car G3de2@id*) G3de3@ok*) (G30f5@syntax-error (car G3de2@id*) '"duplicate " G3ddc@class) (G3de0@find (cdr G3de2@id*) (cons (car G3de2@id*) G3de3@ok*))) (G30f5@syntax-error (car G3de2@id*) '"invalid " G3ddc@class)))))) G3de0@find) G3dda@id* '()))) (set! G3d7b@gen-clause (lambda (G3db4@x G3db5@keys G3db6@clauses G3db7@r G3db8@mr G3db9@pat G3dba@fender G3dbb@expr) (call-with-values (lambda () (G300c@convert-pattern G3db9@pat G3db5@keys)) (lambda (G3dc6@G3dc4 G3dc7@G3dc5) ((lambda (G3dca@pvars G3dcb@p) (if (not (G2e1b@distinct-bound-ids? (map car G3dca@pvars))) (G3d79@invalid-ids-error (map car G3dca@pvars) G3db9@pat '"pattern variable") (if (not (for-all (lambda (G3dce@x) (not (G3010@ellipsis? (car G3dce@x)))) G3dca@pvars)) (G30fb@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" G3db9@pat) ((lambda (G3dd0@y) ((lambda (G3dd2@test) ((lambda (G3dd4@conseq) ((lambda (G3dd6@altern) (list (G2d69@G2ca7@build-lambda '#f (list G3dd0@y) (list 'if G3dd2@test G3dd4@conseq G3dd6@altern)) (list '(primitive syntax-dispatch) G3db4@x (list 'quote G3dcb@p)))) (G3d7d@gen-syntax-case G3db4@x G3db5@keys G3db6@clauses G3db7@r G3db8@mr))) (G3d77@build-dispatch-call G3dca@pvars G3dbb@expr G3dd0@y G3db7@r G3db8@mr))) (if (eq? G3dba@fender '#t) G3dd0@y ((lambda (G3dd8@call) (list 'if G3dd0@y G3dd8@call (list 'quote '#f))) (G3d77@build-dispatch-call G3dca@pvars G3dba@fender G3dd0@y G3db7@r G3db8@mr))))) (G2d8b@gen-lexical 'tmp))))) G3dc7@G3dc5 G3dc6@G3dc4))))) (set! G3d7d@gen-syntax-case (lambda (G3d92@x G3d93@keys G3d94@clauses G3d95@r G3d96@mr) (if (null? G3d94@clauses) (list '(primitive syntax-error) G3d92@x) ((lambda (G3d9c@t) ((lambda (G3d9e@ls/false) (if G3d9e@ls/false (apply (lambda (G3da0@pat G3da1@expr) (if (and (G2e0f@id? G3da0@pat) (not (G2e1d@bound-id-member? G3da0@pat G3d93@keys)) (not (G3010@ellipsis? G3da0@pat))) (if (G2e17@free-id=? G3da0@pat (G2f98@scheme-stx '_)) (G3032@chi-expr G3da1@expr G3d95@r G3d96@mr) ((lambda (G3da4@lab G3da5@lex) ((lambda (G3da8@body) (list (G2d69@G2ca7@build-lambda '#f (list G3da5@lex) G3da8@body) G3d92@x)) (G3032@chi-expr (G2dfb@add-subst (G2dca@make-full-rib (list G3da0@pat) (list G3da4@lab)) G3da1@expr) (cons (cons G3da4@lab (G2e2f@make-binding 'syntax (cons G3da5@lex '0))) G3d95@r) G3d96@mr))) (G2d8f@gen-label G3da0@pat) (G2d8b@gen-lexical G3da0@pat))) (G3d7b@gen-clause G3d92@x G3d93@keys (cdr G3d94@clauses) G3d95@r G3d96@mr G3da0@pat '#t G3da1@expr))) G3d9e@ls/false) ((lambda (G3daa@t) ((lambda (G3dac@ls/false) (if G3dac@ls/false (apply (lambda (G3dae@pat G3daf@fender G3db0@expr) (G3d7b@gen-clause G3d92@x G3d93@keys (cdr G3d94@clauses) G3d95@r G3d96@mr G3dae@pat G3daf@fender G3db0@expr)) G3dac@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3daa@t))) (G300e@syntax-dispatch G3daa@t '(any any any)))) G3d9c@t))) (G300e@syntax-dispatch G3d9c@t '(any any)))) (car G3d94@clauses))))) (lambda (G3d7e@e G3d7f@r G3d80@mr) ((lambda (G3d84@t) ((lambda (G3d86@ls/false) (if G3d86@ls/false (apply (lambda (G3d88@expr G3d89@keys G3d8a@clauses) (begin (G3014@verify-literals G3d89@keys G3d7e@e) ((lambda (G3d8e@x) ((lambda (G3d90@body) (list (G2d69@G2ca7@build-lambda '#f (list G3d8e@x) G3d90@body) (G3032@chi-expr G3d88@expr G3d7f@r G3d80@mr))) (G3d7d@gen-syntax-case G3d8e@x G3d89@keys G3d8a@clauses G3d7f@r G3d80@mr))) (G2d8b@gen-lexical 'tmp)))) G3d86@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3d84@t))) (G300e@syntax-dispatch G3d84@t '(_ any each-any . each-any)))) G3d7e@e)))) '#f '#f '#f '#f)))) (set! G3018@ellipsis-map (lambda (G3e00@proc G3e01@ls . G3e04@ls*) ((lambda (G3e07@who) (begin (set! G3e07@who '...) (begin (if (not (list? G3e01@ls)) (assertion-violation G3e07@who '"not a list" G3e01@ls) (void)) (if (not (null? G3e04@ls*)) ((lambda (G3e08@n) (for-each (lambda (G3e0a@x) (begin (if (not (list? G3e0a@x)) (assertion-violation G3e07@who '"not a list" G3e0a@x) (void)) (if (not (= (length G3e0a@x) G3e08@n)) (assertion-violation G3e07@who '"length mismatch" G3e01@ls G3e0a@x) (void)))) G3e04@ls*)) (length G3e01@ls)) (void)) (apply map G3e00@proc G3e01@ls G3e04@ls*)))) '#f))) (set! G301a@syntax-transformer ((lambda () ((lambda (G3e0d@gen-syntax G3e0f@gen-ref G3e11@gen-append G3e13@gen-mappend G3e15@gen-map G3e17@gen-cons G3e19@gen-vector G3e1b@regen) (begin (set! G3e0d@gen-syntax (lambda (G3e80@src G3e81@e G3e82@r G3e83@maps G3e84@ellipsis? G3e85@vec?) ((lambda (G3e8c@t) ((lambda (G3e8e@ls/false) (if (and G3e8e@ls/false (apply (lambda (G3e90@dots) (G3e84@ellipsis? G3e90@dots)) G3e8e@ls/false)) (apply (lambda (G3e92@dots) (G30fb@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e80@src)) G3e8e@ls/false) ((lambda (G3e94@t) ((lambda (G3e96@ls/false) (if (and G3e96@ls/false (apply (lambda (G3e98@id) (G2e0f@id? G3e98@id)) G3e96@ls/false)) (apply (lambda (G3e9a@id) ((lambda (G3e9c@label) ((lambda (G3e9e@b) ((lambda () (if (eq? (G2e31@binding-type G3e9e@b) 'syntax) (call-with-values (lambda () ((lambda (G3ea2@var.lev) (G3e0f@gen-ref G3e80@src (car G3ea2@var.lev) (cdr G3ea2@var.lev) G3e83@maps)) (G2e33@binding-value G3e9e@b))) (lambda (G3ea4@G3ea0 G3ea5@G3ea1) ((lambda (G3ea8@maps G3ea9@var) (values (list 'ref G3ea9@var) G3ea8@maps)) G3ea5@G3ea1 G3ea4@G3ea0))) (values (list 'quote G3e81@e) G3e83@maps))))) (G2e2d@label->binding G3e9c@label G3e82@r))) (G2e29@id->label G3e81@e))) G3e96@ls/false) ((lambda (G3eac@t) ((lambda (G3eae@ls/false) (if (and G3eae@ls/false (apply (lambda (G3eb0@dots G3eb1@e) (G3e84@ellipsis? G3eb0@dots)) G3eae@ls/false)) (apply (lambda (G3eb4@dots G3eb5@e) (if G3e85@vec? (G30fb@syntax-violation '#f '"misplaced ellipsis in syntax form" G3e80@src) (G3e0d@gen-syntax G3e80@src G3eb5@e G3e82@r G3e83@maps (lambda (G3eb8@x) '#f) '#f))) G3eae@ls/false) ((lambda (G3eba@t) ((lambda (G3ebc@ls/false) (if (and G3ebc@ls/false (apply (lambda (G3ebe@x G3ebf@dots G3ec0@y) (G3e84@ellipsis? G3ebf@dots)) G3ebc@ls/false)) (apply (lambda (G3ec4@x G3ec5@dots G3ec6@y) ((letrec ((G3eca@f (lambda (G3ecc@y G3ecd@k) ((lambda (G3ed0@t) ((lambda (G3ed2@ls/false) (if G3ed2@ls/false (apply (lambda () (G3ecd@k G3e83@maps)) G3ed2@ls/false) ((lambda (G3ed4@t) ((lambda (G3ed6@ls/false) (if (and G3ed6@ls/false (apply (lambda (G3ed8@dots G3ed9@y) (G3e84@ellipsis? G3ed8@dots)) G3ed6@ls/false)) (apply (lambda (G3edc@dots G3edd@y) (G3eca@f G3edd@y (lambda (G3ee0@maps) (call-with-values (lambda () (G3ecd@k (cons '() G3ee0@maps))) (lambda (G3ee4@G3ee2 G3ee5@G3ee3) ((lambda (G3ee8@maps G3ee9@x) (if (null? (car G3ee8@maps)) (G30fb@syntax-violation '#f '"extra ellipsis in syntax form" G3e80@src) (values (G3e13@gen-mappend G3ee9@x (car G3ee8@maps)) (cdr G3ee8@maps)))) G3ee5@G3ee3 G3ee4@G3ee2)))))) G3ed6@ls/false) ((lambda (G3eec@t) ((lambda (G3eee@ls/false) (if G3eee@ls/false (apply (lambda () (call-with-values (lambda () (G3e0d@gen-syntax G3e80@src G3ecc@y G3e82@r G3e83@maps G3e84@ellipsis? G3e85@vec?)) (lambda (G3ef2@G3ef0 G3ef3@G3ef1) ((lambda (G3ef6@maps G3ef7@y) (call-with-values (lambda () (G3ecd@k G3ef6@maps)) (lambda (G3efc@G3efa G3efd@G3efb) ((lambda (G3f00@maps G3f01@x) (values (G3e11@gen-append G3f01@x G3ef7@y) G3f00@maps)) G3efd@G3efb G3efc@G3efa)))) G3ef3@G3ef1 G3ef2@G3ef0)))) G3eee@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3eec@t))) (G300e@syntax-dispatch G3eec@t '_))) G3ed4@t))) (G300e@syntax-dispatch G3ed4@t '(any . any)))) G3ed0@t))) (G300e@syntax-dispatch G3ed0@t '()))) G3ecc@y)))) G3eca@f) G3ec6@y (lambda (G3f04@maps) (call-with-values (lambda () (G3e0d@gen-syntax G3e80@src G3ec4@x G3e82@r (cons '() G3f04@maps) G3e84@ellipsis? '#f)) (lambda (G3f08@G3f06 G3f09@G3f07) ((lambda (G3f0c@maps G3f0d@x) (if (null? (car G3f0c@maps)) (G30fb@syntax-violation '#f '"extra ellipsis in syntax form" G3e80@src) (values (G3e15@gen-map G3f0d@x (car G3f0c@maps)) (cdr G3f0c@maps)))) G3f09@G3f07 G3f08@G3f06)))))) G3ebc@ls/false) ((lambda (G3f10@t) ((lambda (G3f12@ls/false) (if G3f12@ls/false (apply (lambda (G3f14@x G3f15@y) (call-with-values (lambda () (G3e0d@gen-syntax G3e80@src G3f14@x G3e82@r G3e83@maps G3e84@ellipsis? '#f)) (lambda (G3f1a@G3f18 G3f1b@G3f19) ((lambda (G3f1e@maps G3f1f@xnew) (call-with-values (lambda () (G3e0d@gen-syntax G3e80@src G3f15@y G3e82@r G3f1e@maps G3e84@ellipsis? G3e85@vec?)) (lambda (G3f24@G3f22 G3f25@G3f23) ((lambda (G3f28@maps G3f29@ynew) (values (G3e17@gen-cons G3e81@e G3f14@x G3f15@y G3f1f@xnew G3f29@ynew) G3f28@maps)) G3f25@G3f23 G3f24@G3f22)))) G3f1b@G3f19 G3f1a@G3f18)))) G3f12@ls/false) ((lambda (G3f2c@t) ((lambda (G3f2e@ls/false) (if G3f2e@ls/false (apply (lambda (G3f30@ls) (call-with-values (lambda () (G3e0d@gen-syntax G3e80@src G3f30@ls G3e82@r G3e83@maps G3e84@ellipsis? '#t)) (lambda (G3f34@G3f32 G3f35@G3f33) ((lambda (G3f38@maps G3f39@lsnew) (values (G3e19@gen-vector G3e81@e G3f30@ls G3f39@lsnew) G3f38@maps)) G3f35@G3f33 G3f34@G3f32)))) G3f2e@ls/false) ((lambda (G3f3c@t) ((lambda (G3f3e@ls/false) (if G3f3e@ls/false (apply (lambda () (values (list 'quote G3e81@e) G3e83@maps)) G3f3e@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3f3c@t))) (G300e@syntax-dispatch G3f3c@t '_))) G3f2c@t))) (G300e@syntax-dispatch G3f2c@t '#(vector each-any)))) G3f10@t))) (G300e@syntax-dispatch G3f10@t '(any . any)))) G3eba@t))) (G300e@syntax-dispatch G3eba@t '(any any . any)))) G3eac@t))) (G300e@syntax-dispatch G3eac@t '(any any)))) G3e94@t))) (G300e@syntax-dispatch G3e94@t 'any))) G3e8c@t))) (G300e@syntax-dispatch G3e8c@t 'any))) G3e81@e))) (set! G3e0f@gen-ref (lambda (G3e68@src G3e69@var G3e6a@level G3e6b@maps) (if (= G3e6a@level '0) (values G3e69@var G3e6b@maps) (if (null? G3e6b@maps) (G30fb@syntax-violation '#f '"missing ellipsis in syntax form" G3e68@src) (call-with-values (lambda () (G3e0f@gen-ref G3e68@src G3e69@var (- G3e6a@level '1) (cdr G3e6b@maps))) (lambda (G3e72@G3e70 G3e73@G3e71) ((lambda (G3e76@outer-maps G3e77@outer-var) ((lambda (G3e7a@t) (if G3e7a@t ((lambda (G3e7c@b) (values (cdr G3e7c@b) G3e6b@maps)) G3e7a@t) ((lambda (G3e7e@inner-var) (values G3e7e@inner-var (cons (cons (cons G3e77@outer-var G3e7e@inner-var) (car G3e6b@maps)) G3e76@outer-maps))) (G2d8b@gen-lexical 'tmp)))) (assq G3e77@outer-var (car G3e6b@maps)))) G3e73@G3e71 G3e72@G3e70))))))) (set! G3e11@gen-append (lambda (G3e64@x G3e65@y) (if (equal? G3e65@y ''()) G3e64@x (list 'append G3e64@x G3e65@y)))) (set! G3e13@gen-mappend (lambda (G3e60@e G3e61@map-env) (list 'apply '(primitive append) (G3e15@gen-map G3e60@e G3e61@map-env)))) (set! G3e15@gen-map (lambda (G3e4e@e G3e4f@map-env) ((lambda (G3e52@formals G3e53@actuals) (if (eq? (car G3e4e@e) 'ref) (car G3e53@actuals) (if (for-all (lambda (G3e56@x) (and (eq? (car G3e56@x) 'ref) (memq (cadr G3e56@x) G3e52@formals))) (cdr G3e4e@e)) ((lambda (G3e58@args) (cons 'map (cons (list 'primitive (car G3e4e@e)) G3e58@args))) (map ((lambda (G3e5a@r) (lambda (G3e5c@x) (cdr (assq (cadr G3e5c@x) G3e5a@r)))) (map cons G3e52@formals G3e53@actuals)) (cdr G3e4e@e))) (cons* 'map (list 'lambda G3e52@formals G3e4e@e) G3e53@actuals)))) (map cdr G3e4f@map-env) (map (lambda (G3e5e@x) (list 'ref (car G3e5e@x))) G3e4f@map-env)))) (set! G3e17@gen-cons (lambda (G3e3e@e G3e3f@x G3e40@y G3e41@xnew G3e42@ynew) ((lambda (G3e48@t) (if (memv G3e48@t '(quote)) (if (eq? (car G3e41@xnew) 'quote) ((lambda (G3e4a@xnew G3e4b@ynew) (if (and (eq? G3e4a@xnew G3e3f@x) (eq? G3e4b@ynew G3e40@y)) (list 'quote G3e3e@e) (list 'quote (cons G3e4a@xnew G3e4b@ynew)))) (cadr G3e41@xnew) (cadr G3e42@ynew)) (if (null? (cadr G3e42@ynew)) (list 'list G3e41@xnew) (list 'cons G3e41@xnew G3e42@ynew))) (if (memv G3e48@t '(list)) (cons 'list (cons G3e41@xnew (cdr G3e42@ynew))) (list 'cons G3e41@xnew G3e42@ynew)))) (car G3e42@ynew)))) (set! G3e19@gen-vector (lambda (G3e38@e G3e39@ls G3e3a@lsnew) (if (eq? (car G3e3a@lsnew) 'quote) (if (eq? (cadr G3e3a@lsnew) G3e39@ls) (list 'quote G3e38@e) (list 'quote (list->vector (cadr G3e3a@lsnew)))) (if (eq? (car G3e3a@lsnew) 'list) (cons 'vector (cdr G3e3a@lsnew)) (list 'list->vector G3e3a@lsnew))))) (set! G3e1b@regen (lambda (G3e32@x) ((lambda (G3e34@t) (if (memv G3e34@t '(ref)) (cadr G3e32@x) (if (memv G3e34@t '(primitive)) (list 'primitive (cadr G3e32@x)) (if (memv G3e34@t '(quote)) (list 'quote (cadr G3e32@x)) (if (memv G3e34@t '(lambda)) (G2d69@G2ca7@build-lambda '#f (cadr G3e32@x) (G3e1b@regen (caddr G3e32@x))) (if (memv G3e34@t '(map)) ((lambda (G3e36@ls) (cons '(primitive ellipsis-map) G3e36@ls)) (map G3e1b@regen (cdr G3e32@x))) (cons (list 'primitive (car G3e32@x)) (map G3e1b@regen (cdr G3e32@x))))))))) (car G3e32@x)))) (lambda (G3e1c@e G3e1d@r G3e1e@mr) ((lambda (G3e22@t) ((lambda (G3e24@ls/false) (if G3e24@ls/false (apply (lambda (G3e26@x) (call-with-values (lambda () (G3e0d@gen-syntax G3e1c@e G3e26@x G3e1d@r '() G3010@ellipsis? '#f)) (lambda (G3e2a@G3e28 G3e2b@G3e29) ((lambda (G3e2e@maps G3e2f@e) (G3e1b@regen G3e2f@e)) G3e2b@G3e29 G3e2a@G3e28)))) G3e24@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3e22@t))) (G300e@syntax-dispatch G3e22@t '(_ any)))) G3e1c@e)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G301c@core-macro-transformer (lambda (G3f40@name) ((lambda (G3f42@t) (if (memv G3f42@t '(quote)) G2fbe@quote-transformer (if (memv G3f42@t '(lambda)) G2fc2@lambda-transformer (if (memv G3f42@t '(case-lambda)) G2fc0@case-lambda-transformer (if (memv G3f42@t '(letrec)) G2fa6@letrec-transformer (if (memv G3f42@t '(letrec*)) G2fa8@letrec*-transformer (if (memv G3f42@t '(if)) G2fb6@if-transformer (if (memv G3f42@t '(and)) G2fb8@and-transformer (if (memv G3f42@t '(or)) G2fba@or-transformer (if (memv G3f42@t '(foreign-call)) G300a@foreign-call-transformer (if (memv G3f42@t '(syntax-case)) G3016@syntax-case-transformer (if (memv G3f42@t '(syntax)) G301a@syntax-transformer (if (memv G3f42@t '(type-descriptor)) G2fac@type-descriptor-transformer (if (memv G3f42@t '(record-type-descriptor)) G2fae@record-type-descriptor-transformer (if (memv G3f42@t '(record-constructor-descriptor)) G2fb0@record-constructor-descriptor-transformer (if (memv G3f42@t '(fluid-let-syntax)) G2faa@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" G3f40@name))))))))))))))))) G3f40@name))) (set! G301e@file-options-macro (lambda (G3f44@x) ((lambda (G3f47@valid-option?) (begin (set! G3f47@valid-option? (lambda (G3f50@x) (and (G2e0f@id? G3f50@x) (memq (G2e11@id->sym G3f50@x) '(no-fail no-create no-truncate))))) ((lambda (G3f48@t) ((lambda (G3f4a@ls/false) (if (and G3f4a@ls/false (apply (lambda (G3f4c@opt*) (and (for-all G3f47@valid-option? G3f4c@opt*) (G29ac@G2950@file-options-spec (map G2e11@id->sym G3f4c@opt*)))) G3f4a@ls/false)) (apply (lambda (G3f4e@opt*) (G2fc4@bless (list 'quote (G29ac@G2950@file-options-spec (map G2e11@id->sym G3f4e@opt*))))) G3f4a@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3f48@t))) (G300e@syntax-dispatch G3f48@t '(_ . each-any)))) G3f44@x))) '#f))) (set! G3020@symbol-macro (lambda (G3f52@x G3f53@set) ((lambda (G3f56@t) ((lambda (G3f58@ls/false) (if (and G3f58@ls/false (apply (lambda (G3f5a@name) (and (G2e0f@id? G3f5a@name) (memq (G2e11@id->sym G3f5a@name) G3f53@set))) G3f58@ls/false)) (apply (lambda (G3f5c@name) (G2fc4@bless (list 'quote G3f5c@name))) G3f58@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3f56@t))) (G300e@syntax-dispatch G3f56@t '(_ any)))) G3f52@x))) (set! G3022@macro-transformer (lambda (G3f5e@x) (if (procedure? G3f5e@x) G3f5e@x (if (symbol? G3f5e@x) ((lambda (G3f60@t) (if (memv G3f60@t '(define-record-type)) G3002@define-record-type-macro (if (memv G3f60@t '(define-struct)) G3000@define-struct-macro (if (memv G3f60@t '(include)) G2ff6@include-macro (if (memv G3f60@t '(cond)) G2ff2@cond-macro (if (memv G3f60@t '(let)) G2fca@let-macro (if (memv G3f60@t '(do)) G2fea@do-macro (if (memv G3f60@t '(or)) G2fee@or-macro (if (memv G3f60@t '(and)) G2ff0@and-macro (if (memv G3f60@t '(let*)) G2fec@let*-macro (if (memv G3f60@t '(let-values)) G2fcc@let-values-macro (if (memv G3f60@t '(let*-values)) G2fce@let*-values-macro (if (memv G3f60@t '(syntax-rules)) G2ffa@syntax-rules-macro (if (memv G3f60@t '(quasiquote)) G2ffc@quasiquote-macro (if (memv G3f60@t '(quasisyntax)) G2ffe@quasisyntax-macro (if (memv G3f60@t '(with-syntax)) G2fc6@with-syntax-macro (if (memv G3f60@t '(when)) G2fb2@when-macro (if (memv G3f60@t '(unless)) G2fb4@unless-macro (if (memv G3f60@t '(case)) G2fbc@case-macro (if (memv G3f60@t '(identifier-syntax)) G2fe8@identifier-syntax-macro (if (memv G3f60@t '(time)) G2fe0@time-macro (if (memv G3f60@t '(delay)) G2fe2@delay-macro (if (memv G3f60@t '(assert)) G2fe4@assert-macro (if (memv G3f60@t '(endianness)) G2fe6@endianness-macro (if (memv G3f60@t '(guard)) G2fdc@guard-macro (if (memv G3f60@t '(define-enumeration)) G2fde@define-enumeration-macro (if (memv G3f60@t '(trace-lambda)) G2fd0@trace-lambda-macro (if (memv G3f60@t '(trace-define)) G2fd2@trace-define-macro (if (memv G3f60@t '(trace-define-syntax)) G2fd4@trace-define-syntax-macro (if (memv G3f60@t '(trace-let-syntax)) G2fd8@trace-let-syntax-macro (if (memv G3f60@t '(trace-letrec-syntax)) G2fda@trace-letrec-syntax-macro (if (memv G3f60@t '(define-condition-type)) G3004@define-condition-type-macro (if (memv G3f60@t '(parameterize)) G3008@parameterize-macro (if (memv G3f60@t '(include-into)) G2ff8@include-into-macro (if (memv G3f60@t '(eol-style)) (lambda (G3f62@x) (G3020@symbol-macro G3f62@x '(none lf cr crlf nel crnel ls))) (if (memv G3f60@t '(error-handling-mode)) (lambda (G3f64@x) (G3020@symbol-macro G3f64@x '(ignore raise replace))) (if (memv G3f60@t '(buffer-mode)) (lambda (G3f66@x) (G3020@symbol-macro G3f66@x '(none line block))) (if (memv G3f60@t '(file-options)) G301e@file-options-macro (if (memv G3f60@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) G3006@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" G3f5e@x)))))))))))))))))))))))))))))))))))))))) G3f5e@x) (error 'core-macro-transformer '"BUG: invalid macro" G3f5e@x))))) (set! G3024@local-macro-transformer (lambda (G3f68@x) (car G3f68@x))) (set! G3026@do-macro-call (lambda (G3f6a@transformer G3f6b@expr) ((lambda (G3f6e@out) (begin ((letrec ((G3f70@f (lambda (G3f72@x) (if (not (G2dd7@stx? G3f72@x)) (if (pair? G3f72@x) (begin (G3f70@f (car G3f72@x)) (G3f70@f (cdr G3f72@x))) (if (vector? G3f72@x) (vector-for-each G3f70@f G3f72@x) (if (symbol? G3f72@x) (G30fb@syntax-violation '#f '"raw symbol encountered in output of macro" G3f6b@expr G3f72@x) (void)))) (void))))) G3f70@f) G3f6e@out) (G2df9@add-mark (G2def@gen-mark) G3f6e@out G3f6b@expr))) (G3f6a@transformer (G2df9@add-mark G2df1@anti-mark G3f6b@expr '#f))))) (set! G3028@chi-macro (lambda (G3f74@p G3f75@e) (G3026@do-macro-call (G3022@macro-transformer G3f74@p) G3f75@e))) (set! G302a@chi-local-macro (lambda (G3f78@p G3f79@e) (G3026@do-macro-call (G3024@local-macro-transformer G3f78@p) G3f79@e))) (set! G302c@chi-global-macro (lambda (G3f7c@p G3f7d@e) ((lambda (G3f80@lib G3f81@loc) (begin (G2c27@G2acf@visit-library G3f80@lib) ((lambda (G3f84@x) ((lambda (G3f86@transformer) (G3026@do-macro-call G3f86@transformer G3f7d@e)) (if (procedure? G3f84@x) G3f84@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" G3f84@x)))) (symbol-value G3f81@loc)))) (car G3f7c@p) (cdr G3f7c@p)))) (set! G302e@chi-expr* (lambda (G3f88@e* G3f89@r G3f8a@mr) (if (null? G3f88@e*) '() ((lambda (G3f8e@e) (cons G3f8e@e (G302e@chi-expr* (cdr G3f88@e*) G3f89@r G3f8a@mr))) (G3032@chi-expr (car G3f88@e*) G3f89@r G3f8a@mr))))) (set! G3030@chi-application (lambda (G3f90@e G3f91@r G3f92@mr) ((lambda (G3f96@t) ((lambda (G3f98@ls/false) (if G3f98@ls/false (apply (lambda (G3f9a@rator G3f9b@rands) ((lambda (G3f9e@rator) (cons G3f9e@rator (G302e@chi-expr* G3f9b@rands G3f91@r G3f92@mr))) (G3032@chi-expr G3f9a@rator G3f91@r G3f92@mr))) G3f98@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3f96@t))) (G300e@syntax-dispatch G3f96@t '(any . each-any)))) G3f90@e))) (set! G3032@chi-expr (lambda (G3fa0@e G3fa1@r G3fa2@mr) (call-with-values (lambda () (G2e37@syntax-type G3fa0@e G3fa1@r)) (lambda (G3fa9@G3fa6 G3faa@G3fa7 G3fab@G3fa8) ((lambda (G3faf@kwd G3fb0@value G3fb1@type) ((lambda (G3fb5@t) (if (memv G3fb5@t '(core-macro)) ((lambda (G3fb7@transformer) (G3fb7@transformer G3fa0@e G3fa1@r G3fa2@mr)) (G301c@core-macro-transformer G3fb0@value)) (if (memv G3fb5@t '(global)) ((lambda (G3fb9@lib) ((lambda (G3fbb@loc) ((lambda () (begin ((G307b@inv-collector) G3fb9@lib) G3fbb@loc)))) (cdr G3fb0@value))) (car G3fb0@value)) (if (memv G3fb5@t '(core-prim)) ((lambda (G3fbd@name) (list 'primitive G3fbd@name)) G3fb0@value) (if (memv G3fb5@t '(call)) (G3030@chi-application G3fa0@e G3fa1@r G3fa2@mr) (if (memv G3fb5@t '(lexical)) ((lambda (G3fbf@lex) G3fbf@lex) (G2f9a@lexical-var G3fb0@value)) (if (memv G3fb5@t '(global-macro global-macro!)) (G3032@chi-expr (G302c@chi-global-macro G3fb0@value G3fa0@e) G3fa1@r G3fa2@mr) (if (memv G3fb5@t '(local-macro local-macro!)) (G3032@chi-expr (G302a@chi-local-macro G3fb0@value G3fa0@e) G3fa1@r G3fa2@mr) (if (memv G3fb5@t '(macro macro!)) (G3032@chi-expr (G3028@chi-macro G3fb0@value G3fa0@e) G3fa1@r G3fa2@mr) (if (memv G3fb5@t '(constant)) ((lambda (G3fc1@datum) (list 'quote G3fc1@datum)) G3fb0@value) (if (memv G3fb5@t '(set!)) (G3034@chi-set! G3fa0@e G3fa1@r G3fa2@mr) (if (memv G3fb5@t '(begin)) ((lambda (G3fc3@t) ((lambda (G3fc5@ls/false) (if G3fc5@ls/false (apply (lambda (G3fc7@x G3fc8@x*) (G2d6c@G2cdd@build-sequence '#f (G302e@chi-expr* (cons G3fc7@x G3fc8@x*) G3fa1@r G3fa2@mr))) G3fc5@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3fc3@t))) (G300e@syntax-dispatch G3fc3@t '(_ any . each-any)))) G3fa0@e) (if (memv G3fb5@t '(let-syntax letrec-syntax)) ((lambda (G3fcb@t) ((lambda (G3fcd@ls/false) (if (and G3fcd@ls/false (apply (lambda (G3fcf@xlhs* G3fd0@xrhs* G3fd1@xbody G3fd2@xbody*) (if (not (G2e19@valid-bound-ids? G3fcf@xlhs*)) (G30fb@syntax-violation '#f '"invalid identifiers" G3fa0@e) (void))) G3fcd@ls/false)) (apply (lambda (G3fd7@xlhs* G3fd8@xrhs* G3fd9@xbody G3fda@xbody*) ((lambda (G3fdf@xlab*) ((lambda (G3fe1@xrib) ((lambda (G3fe3@xb*) ((lambda () (G2d6c@G2cdd@build-sequence '#f (G302e@chi-expr* (map (lambda (G3fe5@x) (G2dfb@add-subst G3fe1@xrib G3fe5@x)) (cons G3fd9@xbody G3fda@xbody*)) (append (map cons G3fdf@xlab* G3fe3@xb*) G3fa1@r) (append (map cons G3fdf@xlab* G3fe3@xb*) G3fa2@mr)))))) (map (lambda (G3fe7@x) (G2e4f@make-eval-transformer (G306d@expand-transformer (if (eq? G3fb1@type 'let-syntax) G3fe7@x (G2dfb@add-subst G3fe1@xrib G3fe7@x)) G3fa2@mr))) G3fd8@xrhs*))) (G2dca@make-full-rib G3fd7@xlhs* G3fdf@xlab*))) (map G2d8f@gen-label G3fd7@xlhs*))) G3fcd@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3fcb@t))) (G300e@syntax-dispatch G3fcb@t '(_ #(each (any any)) any . each-any)))) G3fa0@e) (if (memv G3fb5@t '(displaced-lexical)) (G30fb@syntax-violation '#f '"identifier out of context" G3fa0@e) (if (memv G3fb5@t '(syntax)) (G30fb@syntax-violation '#f '"reference to pattern variable outside a syntax form" G3fa0@e) (if (memv G3fb5@t '(define define-syntax module import library)) (G30fb@syntax-violation '#f (string-append ((lambda (G3fe9@t) (if (memv G3fe9@t '(define)) '"a definition" (if (memv G3fe9@t '(define-syntax)) '"a define-syntax" (if (memv G3fe9@t '(module)) '"a module definition" (if (memv G3fe9@t '(library)) '"a library definition" (if (memv G3fe9@t '(import)) '"an import declaration" (if (memv G3fe9@t '(export)) '"an export declaration" '"a non-expression"))))))) G3fb1@type) '" was found where an expression was expected") G3fa0@e) (if (memv G3fb5@t '(mutable)) (G30fb@syntax-violation '#f '"attempt to reference an unexportable variable" G3fa0@e) (G30fb@syntax-violation '#f '"invalid expression" G3fa0@e)))))))))))))))))) G3fb1@type)) G3fab@G3fa8 G3faa@G3fa7 G3fa9@G3fa6))))) (set! G3034@chi-set! (lambda (G3feb@e G3fec@r G3fed@mr) ((lambda (G3ff1@t) ((lambda (G3ff3@ls/false) (if (and G3ff3@ls/false (apply (lambda (G3ff5@x G3ff6@v) (G2e0f@id? G3ff5@x)) G3ff3@ls/false)) (apply (lambda (G3ff9@x G3ffa@v) (call-with-values (lambda () (G2e37@syntax-type G3ff9@x G3fec@r)) (lambda (G4000@G3ffd G4001@G3ffe G4002@G3fff) ((lambda (G4006@kwd G4007@value G4008@type) ((lambda (G400c@t) (if (memv G400c@t '(lexical)) (begin (G2f9e@set-lexical-mutable! G4007@value '#t) (list 'set! (G2f9a@lexical-var G4007@value) (G3032@chi-expr G3ffa@v G3fec@r G3fed@mr))) (if (memv G400c@t '(core-prim)) (G30fb@syntax-violation '#f '"cannot modify imported core primitive" G3feb@e) (if (memv G400c@t '(global)) (G30fb@syntax-violation '#f '"attempt to modify imported binding" G3feb@e) (if (memv G400c@t '(global-macro!)) (G3032@chi-expr (G302c@chi-global-macro G4007@value G3feb@e) G3fec@r G3fed@mr) (if (memv G400c@t '(local-macro!)) (G3032@chi-expr (G302a@chi-local-macro G4007@value G3feb@e) G3fec@r G3fed@mr) (if (memv G400c@t '(mutable)) (G30fb@syntax-violation '#f '"attempt to assign to an unexportable variable" G3feb@e) (G30fb@syntax-violation '#f '"invalid syntax" G3feb@e)))))))) G4008@type)) G4002@G3fff G4001@G3ffe G4000@G3ffd)))) G3ff3@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G3ff1@t))) (G300e@syntax-dispatch G3ff1@t '(_ any any)))) G3feb@e))) (set! G3036@verify-formals (lambda (G400e@fmls G400f@stx) ((lambda (G4012@t) ((lambda (G4014@ls/false) (if G4014@ls/false (apply (lambda (G4016@x*) (if (not (G2e19@valid-bound-ids? G4016@x*)) (G2fc8@invalid-fmls-error G400f@stx G400e@fmls) (void))) G4014@ls/false) ((lambda (G4018@t) ((lambda (G401a@ls/false) (if G401a@ls/false (apply (lambda (G401c@x* G401d@x) (if (not (G2e19@valid-bound-ids? (cons G401d@x G401c@x*))) (G2fc8@invalid-fmls-error G400f@stx G400e@fmls) (void))) G401a@ls/false) ((lambda (G4020@t) ((lambda (G4022@ls/false) (if G4022@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid syntax" G400f@stx)) G4022@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G4020@t))) (G300e@syntax-dispatch G4020@t '_))) G4018@t))) (G300e@syntax-dispatch G4018@t '#(each+ any () any)))) G4012@t))) (G300e@syntax-dispatch G4012@t 'each-any))) G400e@fmls))) (set! G3038@chi-lambda-clause (lambda (G4024@stx G4025@fmls G4026@body* G4027@r G4028@mr) ((lambda (G402e@t) ((lambda (G4030@ls/false) (if G4030@ls/false (apply (lambda (G4032@x*) (begin (G3036@verify-formals G4025@fmls G4024@stx) ((lambda (G4034@lex* G4035@lab*) (values G4034@lex* (G3048@chi-internal (G2dfb@add-subst (G2dca@make-full-rib G4032@x* G4035@lab*) G4026@body*) (G2fa2@add-lexicals G4035@lab* G4034@lex* G4027@r) G4028@mr))) (map G2d8b@gen-lexical G4032@x*) (map G2d8f@gen-label G4032@x*)))) G4030@ls/false) ((lambda (G4038@t) ((lambda (G403a@ls/false) (if G403a@ls/false (apply (lambda (G403c@x* G403d@x) (begin (G3036@verify-formals G4025@fmls G4024@stx) ((lambda (G4040@lex* G4041@lab* G4042@lex G4043@lab) (values (append G4040@lex* G4042@lex) (G3048@chi-internal (G2dfb@add-subst (G2dca@make-full-rib (cons G403d@x G403c@x*) (cons G4043@lab G4041@lab*)) G4026@body*) (G2fa2@add-lexicals (cons G4043@lab G4041@lab*) (cons G4042@lex G4040@lex*) G4027@r) G4028@mr))) (map G2d8b@gen-lexical G403c@x*) (map G2d8f@gen-label G403c@x*) (G2d8b@gen-lexical G403d@x) (G2d8f@gen-label G403d@x)))) G403a@ls/false) ((lambda (G4048@t) ((lambda (G404a@ls/false) (if G404a@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid syntax" G4025@fmls)) G404a@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G4048@t))) (G300e@syntax-dispatch G4048@t '_))) G4038@t))) (G300e@syntax-dispatch G4038@t '#(each+ any () any)))) G402e@t))) (G300e@syntax-dispatch G402e@t 'each-any))) G4025@fmls))) (set! G303a@chi-lambda-clause* (lambda (G404c@stx G404d@fmls* G404e@body** G404f@r G4050@mr) (if (null? G404d@fmls*) (values '() '()) (call-with-values (lambda () (G3038@chi-lambda-clause G404c@stx (car G404d@fmls*) (car G404e@body**) G404f@r G4050@mr)) (lambda (G4058@G4056 G4059@G4057) ((lambda (G405c@b G405d@a) (call-with-values (lambda () (G303a@chi-lambda-clause* G404c@stx (cdr G404d@fmls*) (cdr G404e@body**) G404f@r G4050@mr)) (lambda (G4062@G4060 G4063@G4061) ((lambda (G4066@b* G4067@a*) (values (cons G405d@a G4067@a*) (cons G405c@b G4066@b*))) G4063@G4061 G4062@G4060)))) G4059@G4057 G4058@G4056)))))) (set! G303c@chi-defun (lambda (G406a@x G406b@r G406c@mr) ((lambda (G4070@fmls G4071@body*) (call-with-values (lambda () (G3038@chi-lambda-clause G4070@fmls G4070@fmls G4071@body* G406b@r G406c@mr)) (lambda (G4076@G4074 G4077@G4075) ((lambda (G407a@body G407b@fmls) (G2d69@G2ca7@build-lambda '#f G407b@fmls G407a@body)) G4077@G4075 G4076@G4074)))) (car G406a@x) (cdr G406a@x)))) (set! G303e@chi-rhs (lambda (G407e@rhs G407f@r G4080@mr) ((lambda (G4084@t) (if (memv G4084@t '(defun)) (G303c@chi-defun (cdr G407e@rhs) G407f@r G4080@mr) (if (memv G4084@t '(expr)) ((lambda (G4086@expr) (G3032@chi-expr G4086@expr G407f@r G4080@mr)) (cdr G407e@rhs)) (if (memv G4084@t '(top-expr)) ((lambda (G4088@expr) (G2d6c@G2cdd@build-sequence '#f (list (G3032@chi-expr G4088@expr G407f@r G4080@mr) (G2d6d@G2cdf@build-void)))) (cdr G407e@rhs)) (assertion-violation 'chi-rhs '"BUG: invalid rhs" G407e@rhs))))) (car G407e@rhs)))) (set! G3040@expand-interaction-rhs*/init* (lambda (G408a@lhs* G408b@rhs* G408c@init* G408d@r G408e@mr) ((letrec ((G4094@f (lambda (G4096@lhs* G4097@rhs*) (if (null? G4096@lhs*) (map (lambda (G409a@x) (G3032@chi-expr G409a@x G408d@r G408e@mr)) G408c@init*) ((lambda (G409c@lhs G409d@rhs) ((lambda (G40a0@t) (if (memv G40a0@t '(defun)) ((lambda (G40a2@rhs) (cons (list 'set! G409c@lhs G40a2@rhs) (G4094@f (cdr G4096@lhs*) (cdr G4097@rhs*)))) (G303c@chi-defun (cdr G409d@rhs) G408d@r G408e@mr)) (if (memv G40a0@t '(expr)) ((lambda (G40a4@rhs) (cons (list 'set! G409c@lhs G40a4@rhs) (G4094@f (cdr G4096@lhs*) (cdr G4097@rhs*)))) (G3032@chi-expr (cdr G409d@rhs) G408d@r G408e@mr)) (if (memv G40a0@t '(top-expr)) ((lambda (G40a6@e) (cons G40a6@e (G4094@f (cdr G4096@lhs*) (cdr G4097@rhs*)))) (G3032@chi-expr (cdr G409d@rhs) G408d@r G408e@mr)) (error 'expand-interaction '"invallid" G409d@rhs))))) (car G409d@rhs))) (car G4096@lhs*) (car G4097@rhs*)))))) G4094@f) G408a@lhs* G408b@rhs*))) (set! G3042@chi-rhs* (lambda (G40a8@rhs* G40a9@r G40aa@mr) ((letrec ((G40ae@f (lambda (G40b0@ls) (if (null? G40b0@ls) '() ((lambda (G40b2@a) (cons G40b2@a (G40ae@f (cdr G40b0@ls)))) (G303e@chi-rhs (car G40b0@ls) G40a9@r G40aa@mr)))))) G40ae@f) G40a8@rhs*))) (set! G3044@find-bound=? (lambda (G40b4@x G40b5@lhs* G40b6@rhs*) (if (null? G40b5@lhs*) '#f (if (G2e15@bound-id=? G40b4@x (car G40b5@lhs*)) (car G40b6@rhs*) (G3044@find-bound=? G40b4@x (cdr G40b5@lhs*) (cdr G40b6@rhs*)))))) (set! G3046@find-dups (lambda (G40ba@ls) ((letrec ((G40bc@f (lambda (G40be@ls G40bf@dups) (if (null? G40be@ls) G40bf@dups ((lambda (G40c2@t) (if G40c2@t ((lambda (G40c4@x) (G40bc@f (cdr G40be@ls) (cons (list (car G40be@ls) G40c4@x) G40bf@dups))) G40c2@t) (G40bc@f (cdr G40be@ls) G40bf@dups))) (G3044@find-bound=? (car G40be@ls) (cdr G40be@ls) (cdr G40be@ls))))))) G40bc@f) G40ba@ls '()))) (set! G3048@chi-internal (lambda (G40c6@e* G40c7@r G40c8@mr) ((lambda (G40cc@rib) (call-with-values (lambda () (G306b@chi-body* (map (lambda (G40d6@x) (G2dfb@add-subst G40cc@rib G40d6@x)) (G2e0d@syntax->list G40c6@e*)) G40c7@r G40c8@mr '() '() '() '() '() G40cc@rib '#f)) (lambda (G40d8@G40ce G40d9@G40cf G40da@G40d0 G40db@G40d1 G40dc@G40d2 G40dd@G40d3 G40de@G40d4 G40df@G40d5) ((lambda (G40e8@_exp* G40e9@kwd* G40ea@mod** G40eb@rhs* G40ec@lex* G40ed@mr G40ee@r G40ef@e*) (begin (if (null? G40ef@e*) (G30fb@syntax-violation '#f '"no expression in body" G40ef@e*) (void)) ((lambda (G40f8@init*) ((lambda (G40fa@rhs*) ((lambda () (G2d6f@G2ce3@build-letrec* '#f (reverse G40ec@lex*) (reverse G40fa@rhs*) (G2d6c@G2cdd@build-sequence '#f G40f8@init*))))) (G3042@chi-rhs* G40eb@rhs* G40ee@r G40ed@mr))) (G302e@chi-expr* (append (apply append (reverse G40ea@mod**)) G40ef@e*) G40ee@r G40ed@mr)))) G40df@G40d5 G40de@G40d4 G40dd@G40d3 G40dc@G40d2 G40db@G40d1 G40da@G40d0 G40d9@G40cf G40d8@G40ce)))) (G2dba@make-empty-rib)))) (set! G304a@parse-module (lambda (G40fc@e) ((lambda (G40fe@t) ((lambda (G4100@ls/false) (if G4100@ls/false (apply (lambda (G4102@export* G4103@b*) (begin (if (not (for-all G2e0f@id? G4102@export*)) (G30fb@syntax-violation '#f '"module exports must be identifiers" G40fc@e) (void)) (values '#f (list->vector G4102@export*) G4103@b*))) G4100@ls/false) ((lambda (G4106@t) ((lambda (G4108@ls/false) (if G4108@ls/false (apply (lambda (G410a@name G410b@export* G410c@b*) (begin (if (not (G2e0f@id? G410a@name)) (G30fb@syntax-violation '#f '"module name must be an identifier" G40fc@e) (void)) (if (not (for-all G2e0f@id? G410b@export*)) (G30fb@syntax-violation '#f '"module exports must be identifiers" G40fc@e) (void)) (values G410a@name (list->vector G410b@export*) G410c@b*))) G4108@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G4106@t))) (G300e@syntax-dispatch G4106@t '(_ any each-any . each-any)))) G40fe@t))) (G300e@syntax-dispatch G40fe@t '(_ each-any . each-any)))) G40fc@e))) (set! G3050@G304b (make-record-type-descriptor 'module-interface '#f 'G304e '#t '#t '#((mutable first-mark) (mutable exp-id-vec) (mutable exp-lab-vec)))) (set! G3052@G304d '#f) (set! G3054@G304c (make-record-constructor-descriptor G3050@G304b '#f G3052@G304d)) (set! G3057@module-interface? (record-predicate G3050@G304b)) (set! G3059@make-module-interface (record-constructor G3054@G304c)) (set! G305b@module-interface-first-mark (record-accessor G3050@G304b '0)) (set! G305d@module-interface-exp-id-vec (record-accessor G3050@G304b '1)) (set! G305f@module-interface-exp-lab-vec (record-accessor G3050@G304b '2)) (set! G3061@set-module-interface-first-mark! (record-mutator G3050@G304b '0)) (set! G3063@set-module-interface-exp-id-vec! (record-mutator G3050@G304b '1)) (set! G3065@set-module-interface-exp-lab-vec! (record-mutator G3050@G304b '2)) (set! G3067@module-interface-exp-id* (lambda (G4110@iface G4111@id) ((lambda (G4115@diff-marks) (begin (set! G4115@diff-marks (lambda (G411c@ls G411d@x) (begin (if (null? G411c@ls) (error 'diff-marks '"BUG: should not happen") (void)) ((lambda (G4120@a) (if (eq? G4120@a G411d@x) '() (cons G4120@a (G4115@diff-marks (cdr G411c@ls) G411d@x)))) (car G411c@ls))))) ((lambda (G4116@diff G4117@id-vec) (if (null? G4116@diff) G4117@id-vec (vector-map (lambda (G411a@x) (G2dd9@make-stx (G2ddb@stx-expr G411a@x) (append G4116@diff (G2ddd@stx-mark* G411a@x)) '() '())) G4117@id-vec))) (G4115@diff-marks (G2ddd@stx-mark* G4111@id) (G305b@module-interface-first-mark G4110@iface)) (G305d@module-interface-exp-id-vec G4110@iface)))) '#f))) (set! G3069@chi-internal-module (lambda (G4122@e G4123@r G4124@mr G4125@lex* G4126@rhs* G4127@mod** G4128@kwd*) (call-with-values (lambda () (G304a@parse-module G4122@e)) (lambda (G4133@G4130 G4134@G4131 G4135@G4132) ((lambda (G4139@e* G413a@exp-id* G413b@name) ((lambda (G413f@rib) ((lambda (G4141@e*) ((lambda () (call-with-values (lambda () (G306b@chi-body* G4141@e* G4123@r G4124@mr G4125@lex* G4126@rhs* G4127@mod** G4128@kwd* '() G413f@rib '#f)) (lambda (G414b@G4143 G414c@G4144 G414d@G4145 G414e@G4146 G414f@G4147 G4150@G4148 G4151@G4149 G4152@G414a) ((lambda (G415b@_exp* G415c@kwd* G415d@mod** G415e@rhs* G415f@lex* G4160@mr G4161@r G4162@e*) ((lambda (G416b@exp-lab* G416c@mod**) (if (not G413b@name) (values G415f@lex* G415e@rhs* G413a@exp-id* G416b@exp-lab* G4161@r G4160@mr G416c@mod** G415c@kwd*) ((lambda (G416f@lab G4170@iface) (values G415f@lex* G415e@rhs* (vector G413b@name) (vector G416f@lab) (cons (cons G416f@lab (cons '$module G4170@iface)) G4161@r) (cons (cons G416f@lab (cons '$module G4170@iface)) G4160@mr) G416c@mod** G415c@kwd*)) (G2d8f@gen-label 'module) (G3059@make-module-interface (car (G2ddd@stx-mark* G413b@name)) (vector-map (lambda (G4173@x) (G2dd9@make-stx (G2ddb@stx-expr G4173@x) (G2ddd@stx-mark* G4173@x) '() '())) G413a@exp-id*) G416b@exp-lab*)))) (vector-map (lambda (G4175@x) (or (G2e29@id->label (G2dd9@make-stx (G2e11@id->sym G4175@x) (G2ddd@stx-mark* G4175@x) (list G413f@rib) '())) (G30fb@syntax-violation '#f '"cannot find module export" G4175@x))) G413a@exp-id*) (cons G4162@e* G415d@mod**))) G4152@G414a G4151@G4149 G4150@G4148 G414f@G4147 G414e@G4146 G414d@G4145 G414c@G4144 G414b@G4143)))))) (map (lambda (G4177@x) (G2dfb@add-subst G413f@rib G4177@x)) (G2e0d@syntax->list G4139@e*)))) (G2dba@make-empty-rib))) G4135@G4132 G4134@G4131 G4133@G4130))))) (set! G306b@chi-body* (lambda (G4179@e* G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G417f@kwd* G4180@exp* G4181@rib G4182@top?) (if (null? G4179@e*) (values G4179@e* G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G417f@kwd* G4180@exp*) ((lambda (G418d@e) (call-with-values (lambda () (G2e37@syntax-type G418d@e G417a@r)) (lambda (G4192@G418f G4193@G4190 G4194@G4191) ((lambda (G4198@kwd G4199@value G419a@type) ((lambda (G419e@kwd*) ((lambda (G41a0@t) (if (memv G41a0@t '(define)) (call-with-values (lambda () (G2f92@parse-define G418d@e)) (lambda (G41a4@G41a2 G41a5@G41a3) ((lambda (G41a8@rhs G41a9@id) (begin (if (G2e1d@bound-id-member? G41a9@id G419e@kwd*) (G30fb@syntax-violation '#f '"cannot redefine keyword" G418d@e) (void)) (call-with-values (lambda () (G2d93@gen-define-label+loc G41a9@id G4181@rib)) (lambda (G41ae@G41ac G41af@G41ad) ((lambda (G41b2@lex G41b3@lab) (begin (G2dc0@extend-rib! G4181@rib G41a9@id G41b3@lab) (G306b@chi-body* (cdr G4179@e*) (G2fa0@add-lexical G41b3@lab G41b2@lex G417a@r) G417b@mr (cons G41b2@lex G417c@lex*) (cons G41a8@rhs G417d@rhs*) G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?))) G41af@G41ad G41ae@G41ac))))) G41a5@G41a3 G41a4@G41a2))) (if (memv G41a0@t '(define-syntax)) (call-with-values (lambda () (G2f94@parse-define-syntax G418d@e)) (lambda (G41b8@G41b6 G41b9@G41b7) ((lambda (G41bc@rhs G41bd@id) (begin (if (G2e1d@bound-id-member? G41bd@id G419e@kwd*) (G30fb@syntax-violation '#f '"cannot redefine keyword" G418d@e) (void)) ((lambda (G41c0@lab G41c1@expanded-rhs) (begin (G2dc0@extend-rib! G4181@rib G41bd@id G41c0@lab) ((lambda (G41c4@b) (G306b@chi-body* (cdr G4179@e*) (cons (cons G41c0@lab G41c4@b) G417a@r) (cons (cons G41c0@lab G41c4@b) G417b@mr) G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?)) (G2e4f@make-eval-transformer G41c1@expanded-rhs)))) (G2d95@gen-define-label G41bd@id G4181@rib) (G306d@expand-transformer G41bc@rhs G417b@mr)))) G41b9@G41b7 G41b8@G41b6))) (if (memv G41a0@t '(let-syntax letrec-syntax)) ((lambda (G41c6@t) ((lambda (G41c8@ls/false) (if (and G41c8@ls/false (apply (lambda (G41ca@xlhs* G41cb@xrhs* G41cc@xbody*) (if (not (G2e19@valid-bound-ids? G41ca@xlhs*)) (G30fb@syntax-violation '#f '"invalid identifiers" G418d@e) (void))) G41c8@ls/false)) (apply (lambda (G41d0@xlhs* G41d1@xrhs* G41d2@xbody*) ((lambda (G41d6@xlab*) ((lambda (G41d8@xrib) ((lambda (G41da@xb*) ((lambda () (G306b@chi-body* (append (map (lambda (G41dc@x) (G2dfb@add-subst G41d8@xrib G41dc@x)) G41d2@xbody*) (cdr G4179@e*)) (append (map cons G41d6@xlab* G41da@xb*) G417a@r) (append (map cons G41d6@xlab* G41da@xb*) G417b@mr) G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?)))) (map (lambda (G41de@x) (G2e4f@make-eval-transformer (G306d@expand-transformer (if (eq? G419a@type 'let-syntax) G41de@x (G2dfb@add-subst G41d8@xrib G41de@x)) G417b@mr))) G41d1@xrhs*))) (G2dca@make-full-rib G41d0@xlhs* G41d6@xlab*))) (map G2d8f@gen-label G41d0@xlhs*))) G41c8@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G41c6@t))) (G300e@syntax-dispatch G41c6@t '(_ #(each (any any)) . each-any)))) G418d@e) (if (memv G41a0@t '(begin)) ((lambda (G41e0@t) ((lambda (G41e2@ls/false) (if G41e2@ls/false (apply (lambda (G41e4@x*) (G306b@chi-body* (append G41e4@x* (cdr G4179@e*)) G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?)) G41e2@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G41e0@t))) (G300e@syntax-dispatch G41e0@t '(_ . each-any)))) G418d@e) (if (memv G41a0@t '(global-macro global-macro!)) (G306b@chi-body* (cons (G2dfb@add-subst G4181@rib (G302c@chi-global-macro G4199@value G418d@e)) (cdr G4179@e*)) G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?) (if (memv G41a0@t '(local-macro local-macro!)) (G306b@chi-body* (cons (G2dfb@add-subst G4181@rib (G302a@chi-local-macro G4199@value G418d@e)) (cdr G4179@e*)) G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?) (if (memv G41a0@t '(macro macro!)) (G306b@chi-body* (cons (G2dfb@add-subst G4181@rib (G3028@chi-macro G4199@value G418d@e)) (cdr G4179@e*)) G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?) (if (memv G41a0@t '(module)) (call-with-values (lambda () (G3069@chi-internal-module G418d@e G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G419e@kwd*)) (lambda (G41ee@G41e6 G41ef@G41e7 G41f0@G41e8 G41f1@G41e9 G41f2@G41ea G41f3@G41eb G41f4@G41ec G41f5@G41ed) ((lambda (G41fe@kwd* G41ff@mod** G4200@mr G4201@r G4202@m-exp-lab* G4203@m-exp-id* G4204@rhs* G4205@lex*) (begin (vector-for-each (lambda (G420e@id G420f@lab) (G2dc0@extend-rib! G4181@rib G420e@id G420f@lab)) G4203@m-exp-id* G4202@m-exp-lab*) (G306b@chi-body* (cdr G4179@e*) G4201@r G4200@mr G4205@lex* G4204@rhs* G41ff@mod** G41fe@kwd* G4180@exp* G4181@rib G4182@top?))) G41f5@G41ed G41f4@G41ec G41f3@G41eb G41f2@G41ea G41f1@G41e9 G41f0@G41e8 G41ef@G41e7 G41ee@G41e6))) (if (memv G41a0@t '(library)) (begin (G30db@library-expander (G2e25@stx->datum G418d@e)) (G306b@chi-body* (cdr G4179@e*) G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?)) (if (memv G41a0@t '(export)) ((lambda (G4212@t) ((lambda (G4214@ls/false) (if G4214@ls/false (apply (lambda (G4216@exp-decl*) (G306b@chi-body* (cdr G4179@e*) G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* (append G4216@exp-decl* G4180@exp*) G4181@rib G4182@top?)) G4214@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G4212@t))) (G300e@syntax-dispatch G4212@t '(_ . each-any)))) G418d@e) (if (memv G41a0@t '(import)) ((lambda () ((lambda (G4219@module-import? G421b@module-import G421d@library-import) (begin (set! G4219@module-import? (lambda (G4265@e) ((lambda (G4267@t) ((lambda (G4269@ls/false) (if (and G4269@ls/false (apply (lambda (G426b@id) (G2e0f@id? G426b@id)) G4269@ls/false)) (apply (lambda (G426d@id) '#t) G4269@ls/false) ((lambda (G426f@t) ((lambda (G4271@ls/false) (if G4271@ls/false (apply (lambda (G4273@imp*) '#f) G4271@ls/false) ((lambda (G4275@t) ((lambda (G4277@ls/false) (if G4277@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"malformed import form" G4265@e)) G4277@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G4275@t))) (G300e@syntax-dispatch G4275@t '_))) G426f@t))) (G300e@syntax-dispatch G426f@t '(_ . each-any)))) G4267@t))) (G300e@syntax-dispatch G4267@t '(_ any)))) G4265@e))) (set! G421b@module-import (lambda (G4246@e G4247@r) ((lambda (G424a@t) ((lambda (G424c@ls/false) (if (and G424c@ls/false (apply (lambda (G424e@id) (G2e0f@id? G424e@id)) G424c@ls/false)) (apply (lambda (G4250@id) (call-with-values (lambda () (G2e37@syntax-type G4250@id G4247@r)) (lambda (G4255@G4252 G4256@G4253 G4257@G4254) ((lambda (G425b@kwd G425c@value G425d@type) ((lambda (G4261@t) (if (memv G4261@t '($module)) ((lambda (G4263@iface) (values (G3067@module-interface-exp-id* G4263@iface G4250@id) (G305f@module-interface-exp-lab-vec G4263@iface))) G425c@value) (G30fb@syntax-violation '#f '"invalid import" G4246@e))) G425d@type)) G4257@G4254 G4256@G4253 G4255@G4252)))) G424c@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G424a@t))) (G300e@syntax-dispatch G424a@t '(_ any)))) G4246@e))) (set! G421d@library-import (lambda (G422c@e) ((lambda (G422e@t) ((lambda (G4230@ls/false) (if G4230@ls/false (apply (lambda (G4232@ctxt G4233@imp*) (call-with-values (lambda () (G3075@parse-import-spec* (G3101@syntax->datum G4233@imp*))) (lambda (G4238@G4236 G4239@G4237) ((lambda (G423c@subst-labels G423d@subst-names) (values (vector-map (lambda (G4240@name) (G2ded@datum->stx G4232@ctxt G4240@name)) G423d@subst-names) G423c@subst-labels)) G4239@G4237 G4238@G4236)))) G4230@ls/false) ((lambda (G4242@t) ((lambda (G4244@ls/false) (if G4244@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid import form" G422c@e)) G4244@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G4242@t))) (G300e@syntax-dispatch G4242@t '_))) G422e@t))) (G300e@syntax-dispatch G422e@t '(any . each-any)))) G422c@e))) (begin (call-with-values (lambda () (if (G4219@module-import? G418d@e) (G421b@module-import G418d@e G417a@r) (G421d@library-import G418d@e))) (lambda (G4220@G421e G4221@G421f) ((lambda (G4224@lab* G4225@id*) (vector-for-each (lambda (G4228@id G4229@lab) (G2dc0@extend-rib! G4181@rib G4228@id G4229@lab)) G4225@id* G4224@lab*)) G4221@G421f G4220@G421e))) (G306b@chi-body* (cdr G4179@e*) G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?)))) '#f '#f '#f))) (if G4182@top? (G306b@chi-body* (cdr G4179@e*) G417a@r G417b@mr (cons (G2d8b@gen-lexical 'dummy) G417c@lex*) (cons (cons 'top-expr G418d@e) G417d@rhs*) G417e@mod** G419e@kwd* G4180@exp* G4181@rib G4182@top?) (values G4179@e* G417a@r G417b@mr G417c@lex* G417d@rhs* G417e@mod** G419e@kwd* G4180@exp*)))))))))))))) G419a@type)) (if (G2e0f@id? G4198@kwd) (cons G4198@kwd G417f@kwd*) G417f@kwd*))) G4194@G4191 G4193@G4190 G4192@G418f)))) (car G4179@e*))))) (set! G306d@expand-transformer (lambda (G4279@expr G427a@r) ((lambda (G427d@rtc) ((lambda (G427f@expanded-rhs) (begin (for-each ((lambda (G4281@mark-visit) (lambda (G4283@x) (begin (G2c26@G2acd@invoke-library G4283@x) (G4281@mark-visit G4283@x)))) (G307d@vis-collector)) (G427d@rtc)) G427f@expanded-rhs)) ((lambda (G4289@G4285@inv-collector G428a@G4286@vis-collector G428b@G4287@inv-collector G428c@G4288@vis-collector) ((lambda (G4291@swap) (dynamic-wind G4291@swap (lambda () (G3032@chi-expr G4279@expr G427a@r G427a@r)) G4291@swap)) (lambda () (begin ((lambda (G4293@t) (begin (G4289@G4285@inv-collector G428b@G4287@inv-collector) (set! G428b@G4287@inv-collector G4293@t))) (G4289@G4285@inv-collector)) ((lambda (G4295@t) (begin (G428a@G4286@vis-collector G428c@G4288@vis-collector) (set! G428c@G4288@vis-collector G4295@t))) (G428a@G4286@vis-collector)))))) G307b@inv-collector G307d@vis-collector G427d@rtc (lambda (G4297@x) (values))))) (G3079@make-collector)))) (set! G306f@parse-exports (lambda (G4299@exp*) ((letrec ((G429b@f (lambda (G429d@exp* G429e@int* G429f@ext*) (if (null? G429d@exp*) (begin (if (not (G2e19@valid-bound-ids? G429f@ext*)) (G30fb@syntax-violation 'export '"invalid exports" (G3046@find-dups G429f@ext*)) (void)) (values (map G3101@syntax->datum G429f@ext*) G429e@int*)) ((lambda (G42a3@t) ((lambda (G42a5@ls/false) (if G42a5@ls/false (apply (lambda (G42a7@rename G42a8@i* G42a9@e*) (begin (if (not (and (eq? (G3101@syntax->datum G42a7@rename) 'rename) (for-all G2e0f@id? G42a8@i*) (for-all G2e0f@id? G42a9@e*))) (G30fb@syntax-violation 'export '"invalid export specifier" (car G429d@exp*)) (void)) (G429b@f (cdr G429d@exp*) (append G42a8@i* G429e@int*) (append G42a9@e* G429f@ext*)))) G42a5@ls/false) ((lambda (G42ad@t) ((lambda (G42af@ls/false) (if G42af@ls/false (apply (lambda (G42b1@ie) (begin (if (not (G2e0f@id? G42b1@ie)) (G30fb@syntax-violation 'export '"invalid export" G42b1@ie) (void)) (G429b@f (cdr G429d@exp*) (cons G42b1@ie G429e@int*) (cons G42b1@ie G429f@ext*)))) G42af@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G42ad@t))) (G300e@syntax-dispatch G42ad@t 'any))) G42a3@t))) (G300e@syntax-dispatch G42a3@t '(any . #(each (any any)))))) (car G429d@exp*)))))) G429b@f) G4299@exp* '() '()))) (set! G3071@parse-library-name (lambda (G42b3@spec) ((lambda (G42b6@parse) (begin (set! G42b6@parse (lambda (G42c1@x) ((lambda (G42c3@t) ((lambda (G42c5@ls/false) (if (and G42c5@ls/false (apply (lambda (G42c7@v*) (for-all (lambda (G42c9@x) ((lambda (G42cb@x) (and (integer? G42cb@x) (exact? G42cb@x))) (G3101@syntax->datum G42c9@x))) G42c7@v*)) G42c5@ls/false)) (apply (lambda (G42cd@v*) (values '() (map G3101@syntax->datum G42cd@v*))) G42c5@ls/false) ((lambda (G42cf@t) ((lambda (G42d1@ls/false) (if (and G42d1@ls/false (apply (lambda (G42d3@x G42d4@rest) (symbol? (G3101@syntax->datum G42d3@x))) G42d1@ls/false)) (apply (lambda (G42d7@x G42d8@rest) (call-with-values (lambda () (G42b6@parse G42d8@rest)) (lambda (G42dd@G42db G42de@G42dc) ((lambda (G42e1@v* G42e2@x*) (values (cons (G3101@syntax->datum G42d7@x) G42e2@x*) G42e1@v*)) G42de@G42dc G42dd@G42db)))) G42d1@ls/false) ((lambda (G42e5@t) ((lambda (G42e7@ls/false) (if G42e7@ls/false (apply (lambda () (values '() '())) G42e7@ls/false) ((lambda (G42e9@t) ((lambda (G42eb@ls/false) (if G42eb@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid library name" G42b3@spec)) G42eb@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G42e9@t))) (G300e@syntax-dispatch G42e9@t '_))) G42e5@t))) (G300e@syntax-dispatch G42e5@t '()))) G42cf@t))) (G300e@syntax-dispatch G42cf@t '(any . any)))) G42c3@t))) (G300e@syntax-dispatch G42c3@t '(each-any)))) G42c1@x))) (call-with-values (lambda () (G42b6@parse G42b3@spec)) (lambda (G42b9@G42b7 G42ba@G42b8) ((lambda (G42bd@ver* G42be@name*) (begin (if (null? G42be@name*) (G30fb@syntax-violation '#f '"empty library name" G42b3@spec) (void)) (values G42be@name* G42bd@ver*))) G42ba@G42b8 G42b9@G42b7))))) '#f))) (set! G3073@parse-library (lambda (G42ed@e) ((lambda (G42ef@t) ((lambda (G42f1@ls/false) (if (and G42f1@ls/false (apply (lambda (G42f3@library G42f4@name* G42f5@export G42f6@exp* G42f7@import G42f8@imp* G42f9@b*) (and (eq? (G3101@syntax->datum G42f5@export) 'export) (eq? (G3101@syntax->datum G42f7@import) 'import) (eq? (G3101@syntax->datum G42f3@library) 'library))) G42f1@ls/false)) (apply (lambda (G4301@library G4302@name* G4303@export G4304@exp* G4305@import G4306@imp* G4307@b*) (values G4302@name* G4304@exp* G4306@imp* G4307@b*)) G42f1@ls/false) ((lambda (G430f@t) ((lambda (G4311@ls/false) (if G4311@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"malformed library" G42ed@e)) G4311@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G430f@t))) (G300e@syntax-dispatch G430f@t '_))) G42ef@t))) (G300e@syntax-dispatch G42ef@t '(any each-any (any . each-any) (any . each-any) . each-any)))) G42ed@e))) (set! G3075@parse-import-spec* ((lambda () ((lambda (G4314@idsyn? G4316@dup-error G4318@merge-substs G431a@exclude* G431c@find* G431e@rem* G4320@remove-dups G4322@parse-library-name G4324@import-library G4326@get-import G4328@add-imports!) (begin (set! G4314@idsyn? (lambda (G4513@x) (symbol? (G3101@syntax->datum G4513@x)))) (set! G4316@dup-error (lambda (G4511@name) (G30fb@syntax-violation 'import '"two imports with different bindings" G4511@name))) (set! G4318@merge-substs (lambda (G44ff@s G4500@subst) ((lambda (G4504@insert-to-subst) (begin (set! G4504@insert-to-subst (lambda (G4505@a G4506@subst) ((lambda (G4509@name G450a@label) ((lambda (G450d@t) (if G450d@t ((lambda (G450f@x) (if (eq? (cdr G450f@x) G450a@label) G4506@subst (G4316@dup-error G4509@name))) G450d@t) (cons G4505@a G4506@subst))) (assq G4509@name G4506@subst))) (car G4505@a) (cdr G4505@a)))) (if (null? G44ff@s) G4500@subst (G4504@insert-to-subst (car G44ff@s) (G4318@merge-substs (cdr G44ff@s) G4500@subst))))) '#f))) (set! G431a@exclude* (lambda (G44d5@sym* G44d6@subst) ((lambda (G44da@exclude) (begin (set! G44da@exclude (lambda (G44ef@sym G44f0@subst) (if (null? G44f0@subst) (G30fb@syntax-violation 'import '"cannot rename unbound identifier" G44ef@sym) (if (eq? G44ef@sym (caar G44f0@subst)) (values (cdar G44f0@subst) (cdr G44f0@subst)) ((lambda (G44f3@a) (call-with-values (lambda () (G44da@exclude G44ef@sym (cdr G44f0@subst))) (lambda (G44f7@G44f5 G44f8@G44f6) ((lambda (G44fb@subst G44fc@old) (values G44fc@old (cons G44f3@a G44fb@subst))) G44f8@G44f6 G44f7@G44f5)))) (car G44f0@subst)))))) (if (null? G44d5@sym*) (values '() G44d6@subst) (call-with-values (lambda () (G44da@exclude (car G44d5@sym*) G44d6@subst)) (lambda (G44dd@G44db G44de@G44dc) ((lambda (G44e1@subst G44e2@old) (call-with-values (lambda () (G431a@exclude* (cdr G44d5@sym*) G44e1@subst)) (lambda (G44e7@G44e5 G44e8@G44e6) ((lambda (G44eb@subst G44ec@old*) (values (cons G44e2@old G44ec@old*) G44eb@subst)) G44e8@G44e6 G44e7@G44e5)))) G44de@G44dc G44dd@G44db)))))) '#f))) (set! G431c@find* (lambda (G44cd@sym* G44ce@subst) (map (lambda (G44d1@x) ((lambda (G44d3@t) (if G44d3@t (cdr G44d3@t) (G30fb@syntax-violation 'import '"cannot find identifier" G44d1@x))) (assq G44d1@x G44ce@subst))) G44cd@sym*))) (set! G431e@rem* (lambda (G44c5@sym* G44c6@subst) ((letrec ((G44c9@f (lambda (G44cb@subst) (if (null? G44cb@subst) '() (if (memq (caar G44cb@subst) G44c5@sym*) (G44c9@f (cdr G44cb@subst)) (cons (car G44cb@subst) (G44c9@f (cdr G44cb@subst)))))))) G44c9@f) G44c6@subst))) (set! G4320@remove-dups (lambda (G44c3@ls) (if (null? G44c3@ls) '() (if (memq (car G44c3@ls) (cdr G44c3@ls)) (G4320@remove-dups (cdr G44c3@ls)) (cons (car G44c3@ls) (G4320@remove-dups (cdr G44c3@ls))))))) (set! G4322@parse-library-name (lambda (G43dd@spec) ((lambda (G43e0@subversion? G43e2@subversion-pred G43e4@version-pred) (begin (set! G43e0@subversion? (lambda (G44bf@x) ((lambda (G44c1@x) (and (integer? G44c1@x) (exact? G44c1@x) (>= G44c1@x '0))) (G3101@syntax->datum G44bf@x)))) (set! G43e2@subversion-pred (lambda (G445f@x*) ((lambda (G4461@t) ((lambda (G4463@ls/false) (if (and G4463@ls/false (apply (lambda (G4465@n) (G43e0@subversion? G4465@n)) G4463@ls/false)) (apply (lambda (G4467@n) (lambda (G4469@x) (= G4469@x (G3101@syntax->datum G4467@n)))) G4463@ls/false) ((lambda (G446b@t) ((lambda (G446d@ls/false) (if (and G446d@ls/false (apply (lambda (G446f@p? G4470@sub*) (eq? (G3101@syntax->datum G446f@p?) 'and)) G446d@ls/false)) (apply (lambda (G4473@p? G4474@sub*) ((lambda (G4477@p*) (lambda (G4479@x) (for-all (lambda (G447b@p) (G447b@p G4479@x)) G4477@p*))) (map G43e2@subversion-pred G4474@sub*))) G446d@ls/false) ((lambda (G447d@t) ((lambda (G447f@ls/false) (if (and G447f@ls/false (apply (lambda (G4481@p? G4482@sub*) (eq? (G3101@syntax->datum G4481@p?) 'or)) G447f@ls/false)) (apply (lambda (G4485@p? G4486@sub*) ((lambda (G4489@p*) (lambda (G448b@x) (exists (lambda (G448d@p) (G448d@p G448b@x)) G4489@p*))) (map G43e2@subversion-pred G4486@sub*))) G447f@ls/false) ((lambda (G448f@t) ((lambda (G4491@ls/false) (if (and G4491@ls/false (apply (lambda (G4493@p? G4494@sub) (eq? (G3101@syntax->datum G4493@p?) 'not)) G4491@ls/false)) (apply (lambda (G4497@p? G4498@sub) ((lambda (G449b@p) (lambda (G449d@x) (not (G449b@p G449d@x)))) (G43e2@subversion-pred G4498@sub))) G4491@ls/false) ((lambda (G449f@t) ((lambda (G44a1@ls/false) (if (and G44a1@ls/false (apply (lambda (G44a3@p? G44a4@n) (and (eq? (G3101@syntax->datum G44a3@p?) '<=) (G43e0@subversion? G44a4@n))) G44a1@ls/false)) (apply (lambda (G44a7@p? G44a8@n) (lambda (G44ab@x) (<= G44ab@x (G3101@syntax->datum G44a8@n)))) G44a1@ls/false) ((lambda (G44ad@t) ((lambda (G44af@ls/false) (if (and G44af@ls/false (apply (lambda (G44b1@p? G44b2@n) (and (eq? (G3101@syntax->datum G44b1@p?) '>=) (G43e0@subversion? G44b2@n))) G44af@ls/false)) (apply (lambda (G44b5@p? G44b6@n) (lambda (G44b9@x) (>= G44b9@x (G3101@syntax->datum G44b6@n)))) G44af@ls/false) ((lambda (G44bb@t) ((lambda (G44bd@ls/false) (if G44bd@ls/false (apply (lambda () (G30fb@syntax-violation 'import '"invalid sub-version spec" G43dd@spec G445f@x*)) G44bd@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G44bb@t))) (G300e@syntax-dispatch G44bb@t '_))) G44ad@t))) (G300e@syntax-dispatch G44ad@t '(any any)))) G449f@t))) (G300e@syntax-dispatch G449f@t '(any any)))) G448f@t))) (G300e@syntax-dispatch G448f@t '(any any)))) G447d@t))) (G300e@syntax-dispatch G447d@t '(any . each-any)))) G446b@t))) (G300e@syntax-dispatch G446b@t '(any . each-any)))) G4461@t))) (G300e@syntax-dispatch G4461@t 'any))) G445f@x*))) (set! G43e4@version-pred (lambda (G440f@x*) ((lambda (G4411@t) ((lambda (G4413@ls/false) (if G4413@ls/false (apply (lambda () (lambda (G4415@x) '#t)) G4413@ls/false) ((lambda (G4417@t) ((lambda (G4419@ls/false) (if (and G4419@ls/false (apply (lambda (G441b@c G441c@ver*) (eq? (G3101@syntax->datum G441b@c) 'and)) G4419@ls/false)) (apply (lambda (G441f@c G4420@ver*) ((lambda (G4423@p*) (lambda (G4425@x) (for-all (lambda (G4427@p) (G4427@p G4425@x)) G4423@p*))) (map G43e4@version-pred G4420@ver*))) G4419@ls/false) ((lambda (G4429@t) ((lambda (G442b@ls/false) (if (and G442b@ls/false (apply (lambda (G442d@c G442e@ver*) (eq? (G3101@syntax->datum G442d@c) 'or)) G442b@ls/false)) (apply (lambda (G4431@c G4432@ver*) ((lambda (G4435@p*) (lambda (G4437@x) (exists (lambda (G4439@p) (G4439@p G4437@x)) G4435@p*))) (map G43e4@version-pred G4432@ver*))) G442b@ls/false) ((lambda (G443b@t) ((lambda (G443d@ls/false) (if (and G443d@ls/false (apply (lambda (G443f@c G4440@ver) (eq? (G3101@syntax->datum G443f@c) 'not)) G443d@ls/false)) (apply (lambda (G4443@c G4444@ver) ((lambda (G4447@p) (lambda (G4449@x) (not (G4447@p G4449@x)))) (G43e4@version-pred G4444@ver))) G443d@ls/false) ((lambda (G444b@t) ((lambda (G444d@ls/false) (if G444d@ls/false (apply (lambda (G444f@sub*) ((lambda (G4451@p*) (lambda (G4453@x) ((letrec ((G4455@f (lambda (G4457@p* G4458@x) (if (null? G4457@p*) '#t (if (null? G4458@x) '#f (and ((car G4457@p*) (car G4458@x)) (G4455@f (cdr G4457@p*) (cdr G4458@x)))))))) G4455@f) G4451@p* G4453@x))) (map G43e2@subversion-pred G444f@sub*))) G444d@ls/false) ((lambda (G445b@t) ((lambda (G445d@ls/false) (if G445d@ls/false (apply (lambda () (G30fb@syntax-violation 'import '"invalid version spec" G43dd@spec G440f@x*)) G445d@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G445b@t))) (G300e@syntax-dispatch G445b@t '_))) G444b@t))) (G300e@syntax-dispatch G444b@t 'each-any))) G443b@t))) (G300e@syntax-dispatch G443b@t '(any any)))) G4429@t))) (G300e@syntax-dispatch G4429@t '(any . each-any)))) G4417@t))) (G300e@syntax-dispatch G4417@t '(any . each-any)))) G4411@t))) (G300e@syntax-dispatch G4411@t '()))) G440f@x*))) ((letrec ((G43e5@f (lambda (G43e7@x) ((lambda (G43e9@t) ((lambda (G43eb@ls/false) (if G43eb@ls/false (apply (lambda (G43ed@version-spec*) (values '() (G43e4@version-pred G43ed@version-spec*))) G43eb@ls/false) ((lambda (G43ef@t) ((lambda (G43f1@ls/false) (if (and G43f1@ls/false (apply (lambda (G43f3@x G43f4@x*) (G4314@idsyn? G43f3@x)) G43f1@ls/false)) (apply (lambda (G43f7@x G43f8@x*) (call-with-values (lambda () (G43e5@f G43f8@x*)) (lambda (G43fd@G43fb G43fe@G43fc) ((lambda (G4401@pred G4402@name) (values (cons (G3101@syntax->datum G43f7@x) G4402@name) G4401@pred)) G43fe@G43fc G43fd@G43fb)))) G43f1@ls/false) ((lambda (G4405@t) ((lambda (G4407@ls/false) (if G4407@ls/false (apply (lambda () (values '() (lambda (G4409@x) '#t))) G4407@ls/false) ((lambda (G440b@t) ((lambda (G440d@ls/false) (if G440d@ls/false (apply (lambda () (G30fb@syntax-violation '#f '"invalid import spec" G43dd@spec)) G440d@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G440b@t))) (G300e@syntax-dispatch G440b@t '_))) G4405@t))) (G300e@syntax-dispatch G4405@t '()))) G43ef@t))) (G300e@syntax-dispatch G43ef@t '(any . any)))) G43e9@t))) (G300e@syntax-dispatch G43e9@t '(each-any)))) G43e7@x)))) G43e5@f) G43dd@spec))) '#f '#f '#f))) (set! G4324@import-library (lambda (G43cf@spec*) (call-with-values (lambda () (G4322@parse-library-name G43cf@spec*)) (lambda (G43d3@G43d1 G43d4@G43d2) ((lambda (G43d7@pred G43d8@name) (begin (if (null? G43d8@name) (G30fb@syntax-violation 'import '"empty library name" G43cf@spec*) (void)) ((lambda (G43db@lib) (begin (if (not G43db@lib) (G30fb@syntax-violation 'import '"cannot find library with required name" G43d8@name) (void)) (if (not (G43d7@pred (G2bf7@G2a6f@library-version G43db@lib))) (G30fb@syntax-violation 'import '"library does not satisfy version specification" G43cf@spec* G43db@lib) (void)) ((G307f@imp-collector) G43db@lib) (G2bfb@G2a77@library-subst G43db@lib))) (G2c1f@G2abf@find-library-by-name G43d8@name)))) G43d4@G43d2 G43d3@G43d1))))) (set! G4326@get-import (lambda (G4341@spec) ((lambda (G4343@t) ((lambda (G4345@ls/false) (if (and G4345@ls/false (apply (lambda (G4347@x G4348@x*) (not (memq (G3101@syntax->datum G4347@x) '(for rename except only prefix library)))) G4345@ls/false)) (apply (lambda (G434b@x G434c@x*) (G4324@import-library (cons G434b@x G434c@x*))) G4345@ls/false) ((lambda (G434f@t) ((lambda (G4351@ls/false) (if (and G4351@ls/false (apply (lambda (G4353@rename G4354@isp G4355@old* G4356@new*) (and (eq? (G3101@syntax->datum G4353@rename) 'rename) (for-all G4314@idsyn? G4355@old*) (for-all G4314@idsyn? G4356@new*))) G4351@ls/false)) (apply (lambda (G435b@rename G435c@isp G435d@old* G435e@new*) ((lambda (G4363@subst G4364@old* G4365@new*) ((lambda (G4369@old-label*) ((lambda (G436b@subst) (G4318@merge-substs (map cons G4365@new* G4369@old-label*) G436b@subst)) (G431e@rem* G4364@old* G4363@subst))) (G431c@find* G4364@old* G4363@subst))) (G4326@get-import G435c@isp) (map G3101@syntax->datum G435d@old*) (map G3101@syntax->datum G435e@new*))) G4351@ls/false) ((lambda (G436d@t) ((lambda (G436f@ls/false) (if (and G436f@ls/false (apply (lambda (G4371@except G4372@isp G4373@sym*) (and (eq? (G3101@syntax->datum G4371@except) 'except) (for-all G4314@idsyn? G4373@sym*))) G436f@ls/false)) (apply (lambda (G4377@except G4378@isp G4379@sym*) ((lambda (G437d@subst) (G431e@rem* (map G3101@syntax->datum G4379@sym*) G437d@subst)) (G4326@get-import G4378@isp))) G436f@ls/false) ((lambda (G437f@t) ((lambda (G4381@ls/false) (if (and G4381@ls/false (apply (lambda (G4383@only G4384@isp G4385@sym*) (and (eq? (G3101@syntax->datum G4383@only) 'only) (for-all G4314@idsyn? G4385@sym*))) G4381@ls/false)) (apply (lambda (G4389@only G438a@isp G438b@sym*) ((lambda (G438f@subst G4390@sym*) ((lambda (G4393@sym*) ((lambda (G4395@lab*) (map cons G4393@sym* G4395@lab*)) (G431c@find* G4393@sym* G438f@subst))) (G4320@remove-dups G4390@sym*))) (G4326@get-import G438a@isp) (map G3101@syntax->datum G438b@sym*))) G4381@ls/false) ((lambda (G4397@t) ((lambda (G4399@ls/false) (if (and G4399@ls/false (apply (lambda (G439b@prefix G439c@isp G439d@p) (and (eq? (G3101@syntax->datum G439b@prefix) 'prefix) (G4314@idsyn? G439d@p))) G4399@ls/false)) (apply (lambda (G43a1@prefix G43a2@isp G43a3@p) ((lambda (G43a7@subst G43a8@prefix) (map (lambda (G43ab@x) (cons (string->symbol (string-append G43a8@prefix (symbol->string (car G43ab@x)))) (cdr G43ab@x))) G43a7@subst)) (G4326@get-import G43a2@isp) (symbol->string (G3101@syntax->datum G43a3@p)))) G4399@ls/false) ((lambda (G43ad@t) ((lambda (G43af@ls/false) (if (and G43af@ls/false (apply (lambda (G43b1@library G43b2@spec*) (eq? (G3101@syntax->datum G43b1@library) 'library)) G43af@ls/false)) (apply (lambda (G43b5@library G43b6@spec*) (G4324@import-library G43b6@spec*)) G43af@ls/false) ((lambda (G43b9@t) ((lambda (G43bb@ls/false) (if (and G43bb@ls/false (apply (lambda (G43bd@for G43be@isp G43bf@rest) (eq? (G3101@syntax->datum G43bd@for) 'for)) G43bb@ls/false)) (apply (lambda (G43c3@for G43c4@isp G43c5@rest) (G4326@get-import G43c4@isp)) G43bb@ls/false) ((lambda (G43c9@t) ((lambda (G43cb@ls/false) (if G43cb@ls/false (apply (lambda (G43cd@spec) (G30fb@syntax-violation 'import '"invalid import spec" G43cd@spec)) G43cb@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G43c9@t))) (G300e@syntax-dispatch G43c9@t 'any))) G43b9@t))) (G300e@syntax-dispatch G43b9@t '(any any . any)))) G43ad@t))) (G300e@syntax-dispatch G43ad@t '(any each-any)))) G4397@t))) (G300e@syntax-dispatch G4397@t '(any any any)))) G437f@t))) (G300e@syntax-dispatch G437f@t '(any any . each-any)))) G436d@t))) (G300e@syntax-dispatch G436d@t '(any any . each-any)))) G434f@t))) (G300e@syntax-dispatch G434f@t '(any any . #(each (any any)))))) G4343@t))) (G300e@syntax-dispatch G4343@t '(any . each-any)))) G4341@spec))) (set! G4328@add-imports! (lambda (G4331@imp G4332@h) ((lambda (G4335@subst) (for-each (lambda (G4337@x) ((lambda (G4339@name G433a@label) ((lambda (G433d@t) (if G433d@t ((lambda (G433f@l) (if (not (eq? G433f@l G433a@label)) (G4316@dup-error G4339@name) (void))) G433d@t) (hashtable-set! G4332@h G4339@name G433a@label))) (hashtable-ref G4332@h G4339@name '#f))) (car G4337@x) (cdr G4337@x))) G4335@subst)) (G4326@get-import G4331@imp)))) (lambda (G4329@imp*) ((letrec ((G432b@f (lambda (G432d@imp* G432e@h) (if (null? G432d@imp*) (hashtable-entries G432e@h) (begin (G4328@add-imports! (car G432d@imp*) G432e@h) (G432b@f (cdr G432d@imp*) G432e@h)))))) G432b@f) G4329@imp* (make-eq-hashtable))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! G3077@make-top-rib (lambda (G4515@names G4516@labels) ((lambda (G4519@rib) (begin (vector-for-each (lambda (G451b@name G451c@label) (begin (if (not (symbol? G451b@name)) (error 'make-top-rib '"BUG: not a symbol" G451b@name) (void)) (G2dc2@extend-rib/nc! G4519@rib (G2dd9@make-stx G451b@name G2d87@top-mark* '() '()) G451c@label))) G4515@names G4516@labels) G4519@rib)) (G2dbc@make-cache-rib)))) (set! G3079@make-collector (lambda () ((lambda (G451f@ls) (lambda G4523 ((lambda (G4524) (if (= G4524 '0) (apply (lambda () G451f@ls) G4523) (if (= G4524 '1) (apply (lambda (G4521@x) (set! G451f@ls (G2d80@set-cons G4521@x G451f@ls))) G4523) (error 'apply '"invalid arg count")))) (length G4523)))) '()))) (set! G307b@inv-collector (G29ab@G28e4@make-parameter (lambda G4525@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (G4527@x) (begin (if (not (procedure? G4527@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" G4527@x) (void)) G4527@x)))) (set! G307d@vis-collector (G29ab@G28e4@make-parameter (lambda G4529@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (G452b@x) (begin (if (not (procedure? G452b@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" G452b@x) (void)) G452b@x)))) (set! G307f@imp-collector (G29ab@G28e4@make-parameter (lambda G452d@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (G452f@x) (begin (if (not (procedure? G452f@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" G452f@x) (void)) G452f@x)))) (set! G3081@chi-library-internal (lambda (G4531@e* G4532@rib G4533@top?) (call-with-values (lambda () (G306b@chi-body* G4531@e* '() '() '() '() '() '() '() G4532@rib G4533@top?)) (lambda (G453f@G4537 G4540@G4538 G4541@G4539 G4542@G453a G4543@G453b G4544@G453c G4545@G453d G4546@G453e) ((lambda (G454f@exp* G4550@_kwd* G4551@mod** G4552@rhs* G4553@lex* G4554@mr G4555@r G4556@e*) (values (append (apply append (reverse G4551@mod**)) G4556@e*) G4555@r G4554@mr (reverse G4553@lex*) (reverse G4552@rhs*) G454f@exp*)) G4546@G453e G4545@G453d G4544@G453c G4543@G453b G4542@G453a G4541@G4539 G4540@G4538 G453f@G4537))))) (set! G3083@chi-interaction-expr (lambda (G455f@e G4560@rib G4561@r) (call-with-values (lambda () (G306b@chi-body* (list G455f@e) G4561@r G4561@r '() '() '() '() '() G4560@rib '#t)) (lambda (G456d@G4565 G456e@G4566 G456f@G4567 G4570@G4568 G4571@G4569 G4572@G456a G4573@G456b G4574@G456c) ((lambda (G457d@_exp* G457e@_kwd* G457f@mod** G4580@rhs* G4581@lex* G4582@mr G4583@r G4584@e*) ((lambda (G458d@e*) ((lambda (G458f@e) (values G458f@e G4583@r)) (if (null? G458d@e*) (G2d6d@G2cdf@build-void) (if (null? (cdr G458d@e*)) (car G458d@e*) (G2d6c@G2cdd@build-sequence '#f G458d@e*))))) (G3040@expand-interaction-rhs*/init* (reverse G4581@lex*) (reverse G4580@rhs*) (append (apply append (reverse G457f@mod**)) G4584@e*) G4583@r G4582@mr))) G4574@G456c G4573@G456b G4572@G456a G4571@G4569 G4570@G4568 G456f@G4567 G456e@G4566 G456d@G4565))))) (set! G3085@library-body-expander (lambda (G4591@name G4592@main-exp* G4593@imp* G4594@b* G4595@top?) ((lambda (G459c@itc) (begin (set! G459c@itc (G3079@make-collector)) ((lambda (G45a1@G459d@imp-collector G45a2@G459e@top-level-context G45a3@G459f@imp-collector G45a4@G45a0@top-level-context) ((lambda (G45a9@swap) (dynamic-wind G45a9@swap (lambda () (call-with-values (lambda () (G3075@parse-import-spec* G4593@imp*)) (lambda (G45ad@G45ab G45ae@G45ac) ((lambda (G45b1@subst-labels G45b2@subst-names) ((lambda (G45b5@rib) ((lambda (G45b8@wrap) (begin (set! G45b8@wrap (lambda (G4624@x) (G2dd9@make-stx G4624@x G2d87@top-mark* (list G45b5@rib) '()))) ((lambda (G45b9@b* G45ba@main-exp* G45bb@rtc G45bc@vtc) ((lambda (G45c5@G45c1@inv-collector G45c6@G45c2@vis-collector G45c7@G45c3@inv-collector G45c8@G45c4@vis-collector) ((lambda (G45cd@swap) (dynamic-wind G45cd@swap (lambda () (call-with-values (lambda () (G3081@chi-library-internal G45b9@b* G45b5@rib G4595@top?)) (lambda (G45d5@G45cf G45d6@G45d0 G45d7@G45d1 G45d8@G45d2 G45d9@G45d3 G45da@G45d4) ((lambda (G45e1@internal-exp* G45e2@rhs* G45e3@lex* G45e4@mr G45e5@r G45e6@init*) (call-with-values (lambda () (G306f@parse-exports (append G45ba@main-exp* G45e1@internal-exp*))) (lambda (G45ef@G45ed G45f0@G45ee) ((lambda (G45f3@exp-id* G45f4@exp-name*) (begin (G2dc6@seal-rib! G45b5@rib) ((lambda (G45f7@init*) ((lambda (G45f9@rhs*) ((lambda () (begin (G2dc8@unseal-rib! G45b5@rib) ((lambda (G45fb@loc* G45fc@export-subst) ((lambda (G4600@errstr) (begin (set! G4600@errstr '"attempt to export mutated variable") (call-with-values (lambda () (G30e5@make-export-env/macros G45e3@lex* G45fb@loc* G45e5@r)) (lambda (G4604@G4601 G4605@G4602 G4606@G4603) ((lambda (G460a@macro* G460b@global* G460c@export-env) (begin (for-each (lambda (G4610@s) ((lambda (G4612@name G4613@label) ((lambda (G4616@p) (if G4616@p ((lambda (G4618@b) ((lambda (G461a@type) (if (eq? G461a@type 'mutable) (G30fb@syntax-violation 'export G4600@errstr G4612@name) (void))) (car G4618@b))) (cdr G4616@p)) (void))) (assq G4613@label G460c@export-env))) (car G4610@s) (cdr G4610@s))) G45fc@export-subst) ((lambda (G461c@invoke-body G461d@invoke-definitions) (values (G459c@itc) (G45bb@rtc) (G45bc@vtc) (G2d6c@G2cdd@build-sequence '#f (append G461d@invoke-definitions (list G461c@invoke-body))) G460a@macro* G45fc@export-subst G460c@export-env)) (G2d6f@G2ce3@build-letrec* '#f G45e3@lex* G45f9@rhs* (G30e1@build-exports G460b@global* G45f7@init*)) (map G2d68@G2c2d@build-global-define (map cdr G460b@global*))))) G4606@G4603 G4605@G4602 G4604@G4601))))) '#f)) (map G2d8d@gen-global G45e3@lex*) (G30e3@make-export-subst G45f4@exp-name* G45f3@exp-id*)))))) (G3042@chi-rhs* G45e2@rhs* G45e5@r G45e4@mr))) (G302e@chi-expr* G45e6@init* G45e5@r G45e4@mr)))) G45f0@G45ee G45ef@G45ed)))) G45da@G45d4 G45d9@G45d3 G45d8@G45d2 G45d7@G45d1 G45d6@G45d0 G45d5@G45cf)))) G45cd@swap)) (lambda () (begin ((lambda (G4620@t) (begin (G45c5@G45c1@inv-collector G45c7@G45c3@inv-collector) (set! G45c7@G45c3@inv-collector G4620@t))) (G45c5@G45c1@inv-collector)) ((lambda (G4622@t) (begin (G45c6@G45c2@vis-collector G45c8@G45c4@vis-collector) (set! G45c8@G45c4@vis-collector G4622@t))) (G45c6@G45c2@vis-collector)))))) G307b@inv-collector G307d@vis-collector G45bb@rtc G45bc@vtc)) (map G45b8@wrap G4594@b*) (map G45b8@wrap G4592@main-exp*) (G3079@make-collector) (G3079@make-collector)))) '#f)) (G3077@make-top-rib G45b2@subst-names G45b1@subst-labels))) G45ae@G45ac G45ad@G45ab)))) G45a9@swap)) (lambda () (begin ((lambda (G4626@t) (begin (G45a1@G459d@imp-collector G45a3@G459f@imp-collector) (set! G45a3@G459f@imp-collector G4626@t))) (G45a1@G459d@imp-collector)) ((lambda (G4628@t) (begin (G45a2@G459e@top-level-context G45a4@G45a0@top-level-context) (set! G45a4@G45a0@top-level-context G4628@t))) (G45a2@G459e@top-level-context)))))) G307f@imp-collector G3109@top-level-context G459c@itc '#f))) '#f))) (set! G3087@core-library-expander (lambda (G462a@e G462b@verify-name) (call-with-values (lambda () (G3073@parse-library G462a@e)) (lambda (G4632@G462e G4633@G462f G4634@G4630 G4635@G4631) ((lambda (G463a@b* G463b@imp* G463c@exp* G463d@name*) (call-with-values (lambda () (G3071@parse-library-name G463d@name*)) (lambda (G4644@G4642 G4645@G4643) ((lambda (G4648@ver G4649@name) (begin (G462b@verify-name G4649@name) (call-with-values (lambda () (G3085@library-body-expander G4649@name G463c@exp* G463b@imp* G463a@b* '#f)) (lambda (G4653@G464c G4654@G464d G4655@G464e G4656@G464f G4657@G4650 G4658@G4651 G4659@G4652) ((lambda (G4661@export-env G4662@export-subst G4663@visit-code G4664@invoke-code G4665@visit-req* G4666@invoke-req* G4667@imp*) (values G4649@name G4648@ver G4667@imp* G4666@invoke-req* G4665@visit-req* G4664@invoke-code G4663@visit-code G4662@export-subst G4661@export-env)) G4659@G4652 G4658@G4651 G4657@G4650 G4656@G464f G4655@G464e G4654@G464d G4653@G464c))))) G4645@G4643 G4644@G4642)))) G4635@G4631 G4634@G4630 G4633@G462f G4632@G462e))))) (set! G3089@parse-top-level-program (lambda (G466f@e*) ((lambda (G4671@t) ((lambda (G4673@ls/false) (if (and G4673@ls/false (apply (lambda (G4675@import G4676@imp* G4677@b*) (eq? (G3101@syntax->datum G4675@import) 'import)) G4673@ls/false)) (apply (lambda (G467b@import G467c@imp* G467d@b*) (values G467c@imp* G467d@b*)) G4673@ls/false) ((lambda (G4681@t) ((lambda (G4683@ls/false) (if (and G4683@ls/false (apply (lambda (G4685@import G4686@x G4687@y) (eq? (G3101@syntax->datum G4685@import) 'import)) G4683@ls/false)) (apply (lambda (G468b@import G468c@x G468d@y) (G30fb@syntax-violation 'expander '"invalid syntax of top-level program" (G2e09@syntax-car G466f@e*))) G4683@ls/false) ((lambda (G4691@t) ((lambda (G4693@ls/false) (if G4693@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) G4693@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G4691@t))) (G300e@syntax-dispatch G4691@t '_))) G4681@t))) (G300e@syntax-dispatch G4681@t '((any . any) . any)))) G4671@t))) (G300e@syntax-dispatch G4671@t '((any . each-any) . each-any)))) G466f@e*))) (set! G308b@top-level-expander (lambda (G4695@e*) (call-with-values (lambda () (G3089@parse-top-level-program G4695@e*)) (lambda (G4699@G4697 G469a@G4698) ((lambda (G469d@b* G469e@imp*) (call-with-values (lambda () (G3085@library-body-expander '() '() G469e@imp* G469d@b* '#t)) (lambda (G46a8@G46a1 G46a9@G46a2 G46aa@G46a3 G46ab@G46a4 G46ac@G46a5 G46ad@G46a6 G46ae@G46a7) ((lambda (G46b6@export-env G46b7@export-subst G46b8@visit-code G46b9@invoke-code G46ba@visit-req* G46bb@invoke-req* G46bc@imp*) (values G46bb@invoke-req* G46b9@invoke-code)) G46ae@G46a7 G46ad@G46a6 G46ac@G46a5 G46ab@G46a4 G46aa@G46a3 G46a9@G46a2 G46a8@G46a1)))) G469a@G4698 G4699@G4697))))) (set! G3091@G308c (make-record-type-descriptor 'env '#f 'G308f '#t '#t '#((mutable names) (mutable labels) (mutable itc)))) (set! G3093@G308e '#f) (set! G3095@G308d (make-record-constructor-descriptor G3091@G308c '#f G3093@G308e)) (set! G3098@env? (record-predicate G3091@G308c)) (set! G309a@make-env (record-constructor G3095@G308d)) (set! G309c@env-names (record-accessor G3091@G308c '0)) (set! G309e@env-labels (record-accessor G3091@G308c '1)) (set! G30a0@env-itc (record-accessor G3091@G308c '2)) (set! G30a2@set-env-names! (record-mutator G3091@G308c '0)) (set! G30a4@set-env-labels! (record-mutator G3091@G308c '1)) (set! G30a6@set-env-itc! (record-mutator G3091@G308c '2)) (set! G30a8@rp (G29a8@G28de@make-record-printer 'env (lambda (G46c4@x G46c5@p G46c6@wr) (display '"#<environment>" G46c5@p)))) (set! G30ae@G30a9 (make-record-type-descriptor 'interaction-env '#f 'G30ac '#t '#t '#((mutable rib) (mutable r) (mutable locs)))) (set! G30b0@G30ab '#f) (set! G30b2@G30aa (make-record-constructor-descriptor G30ae@G30a9 '#f G30b0@G30ab)) (set! G30b5@interaction-env? (record-predicate G30ae@G30a9)) (set! G30b7@make-interaction-env (record-constructor G30b2@G30aa)) (set! G30b9@interaction-env-rib (record-accessor G30ae@G30a9 '0)) (set! G30bb@interaction-env-r (record-accessor G30ae@G30a9 '1)) (set! G30bd@interaction-env-locs (record-accessor G30ae@G30a9 '2)) (set! G30bf@set-interaction-env-rib! (record-mutator G30ae@G30a9 '0)) (set! G30c1@set-interaction-env-r! (record-mutator G30ae@G30a9 '1)) (set! G30c3@set-interaction-env-locs! (record-mutator G30ae@G30a9 '2)) (set! G30c5@rp (G29a8@G28de@make-record-printer 'interaction-env (lambda (G46ca@x G46cb@p G46cc@wr) (display '"#<environment>" G46cb@p)))) (set! G30c7@interaction-environment-symbols (lambda () (G30cf@environment-symbols (G3107@interaction-environment)))) (set! G30c9@environment-bindings (lambda (G46d0@e) (vector->list (vector-map (lambda (G46d2@name G46d3@label) (G30cb@parse-binding (cons G46d2@name (G2c25@G2acb@imported-label->binding G46d3@label)))) (G309c@env-names G46d0@e) (G309e@env-labels G46d0@e))))) (set! G30cb@parse-binding (lambda (G46d6@b) (cons (car G46d6@b) ((lambda (G46d8@t) (if (memv G46d8@t '(core-prim global)) 'procedure (if (memv G46d8@t '(core-macro macro global-macro)) 'syntax (if (memv G46d8@t '($core-rtd)) 'record (if (eq? (car G46d6@b) (cadr G46d6@b)) 'syntax 'unknown))))) (cadr G46d6@b))))) (set! G30cd@environment? (lambda (G46da@x) (or (G3098@env? G46da@x) (G30b5@interaction-env? G46da@x)))) (set! G30cf@environment-symbols (lambda (G46dc@x) (if (G3098@env? G46dc@x) (vector->list (G309c@env-names G46dc@x)) (if (G30b5@interaction-env? G46dc@x) (map values (G2da6@rib-sym* (G30b9@interaction-env-rib G46dc@x))) (assertion-violation 'environment-symbols '"not an environment" G46dc@x))))) (set! G30d1@environment (lambda G46de@imp* ((lambda (G46e0@itc) ((lambda (G46e4@G46e2@imp-collector G46e5@G46e3@imp-collector) ((lambda (G46e8@swap) (dynamic-wind G46e8@swap (lambda () (call-with-values (lambda () (G3075@parse-import-spec* G46de@imp*)) (lambda (G46ec@G46ea G46ed@G46eb) ((lambda (G46f0@subst-labels G46f1@subst-names) (G309a@make-env G46f1@subst-names G46f0@subst-labels G46e0@itc)) G46ed@G46eb G46ec@G46ea)))) G46e8@swap)) (lambda () ((lambda (G46f4@t) (begin (G46e4@G46e2@imp-collector G46e5@G46e3@imp-collector) (set! G46e5@G46e3@imp-collector G46f4@t))) (G46e4@G46e2@imp-collector))))) G307f@imp-collector G46e0@itc)) (G3079@make-collector)))) (set! G30d3@null-environment (lambda (G46f6@n) (begin (if (not (eqv? G46f6@n '5)) (assertion-violation 'null-environment '"not 5" G46f6@n) (void)) (G30d1@environment '(psyntax null-environment-5))))) (set! G30d5@scheme-report-environment (lambda (G46f8@n) (begin (if (not (eqv? G46f8@n '5)) (assertion-violation 'scheme-report-environment '"not 5" G46f8@n) (void)) (G30d1@environment '(psyntax scheme-report-environment-5))))) (set! G30d7@expand (lambda (G46fa@x G46fb@env) (if (G3098@env? G46fb@env) ((lambda (G46fe@rib) ((lambda (G4700@x G4701@itc G4702@rtc G4703@vtc) ((lambda (G4708@x) (begin (G2dc6@seal-rib! G46fe@rib) (values G4708@x (G4702@rtc)))) ((lambda (G4712@G470a@top-level-context G4713@G470b@inv-collector G4714@G470c@vis-collector G4715@G470d@imp-collector G4716@G470e@top-level-context G4717@G470f@inv-collector G4718@G4710@vis-collector G4719@G4711@imp-collector) ((lambda (G4722@swap) (dynamic-wind G4722@swap (lambda () (G3032@chi-expr G4700@x '() '())) G4722@swap)) (lambda () (begin ((lambda (G4724@t) (begin (G4712@G470a@top-level-context G4716@G470e@top-level-context) (set! G4716@G470e@top-level-context G4724@t))) (G4712@G470a@top-level-context)) ((lambda (G4726@t) (begin (G4713@G470b@inv-collector G4717@G470f@inv-collector) (set! G4717@G470f@inv-collector G4726@t))) (G4713@G470b@inv-collector)) ((lambda (G4728@t) (begin (G4714@G470c@vis-collector G4718@G4710@vis-collector) (set! G4718@G4710@vis-collector G4728@t))) (G4714@G470c@vis-collector)) ((lambda (G472a@t) (begin (G4715@G470d@imp-collector G4719@G4711@imp-collector) (set! G4719@G4711@imp-collector G472a@t))) (G4715@G470d@imp-collector)))))) G3109@top-level-context G307b@inv-collector G307d@vis-collector G307f@imp-collector '#f G4702@rtc G4703@vtc G4701@itc))) (G2dd9@make-stx G46fa@x G2d87@top-mark* (list G46fe@rib) '()) (G30a0@env-itc G46fb@env) (G3079@make-collector) (G3079@make-collector))) (G3077@make-top-rib (G309c@env-names G46fb@env) (G309e@env-labels G46fb@env))) (if (G30b5@interaction-env? G46fb@env) ((lambda (G472c@rib G472d@r G472e@rtc) ((lambda (G4732@x) (call-with-values (lambda () ((lambda (G473e@G4736@top-level-context G473f@G4737@inv-collector G4740@G4738@vis-collector G4741@G4739@imp-collector G4742@G473a@top-level-context G4743@G473b@inv-collector G4744@G473c@vis-collector G4745@G473d@imp-collector) ((lambda (G474e@swap) (dynamic-wind G474e@swap (lambda () (G3083@chi-interaction-expr G4732@x G472c@rib G472d@r)) G474e@swap)) (lambda () (begin ((lambda (G4750@t) (begin (G473e@G4736@top-level-context G4742@G473a@top-level-context) (set! G4742@G473a@top-level-context G4750@t))) (G473e@G4736@top-level-context)) ((lambda (G4752@t) (begin (G473f@G4737@inv-collector G4743@G473b@inv-collector) (set! G4743@G473b@inv-collector G4752@t))) (G473f@G4737@inv-collector)) ((lambda (G4754@t) (begin (G4740@G4738@vis-collector G4744@G473c@vis-collector) (set! G4744@G473c@vis-collector G4754@t))) (G4740@G4738@vis-collector)) ((lambda (G4756@t) (begin (G4741@G4739@imp-collector G4745@G473d@imp-collector) (set! G4745@G473d@imp-collector G4756@t))) (G4741@G4739@imp-collector)))))) G3109@top-level-context G307b@inv-collector G307d@vis-collector G307f@imp-collector G46fb@env G472e@rtc (G3079@make-collector) (G3079@make-collector))) (lambda (G4758@G4734 G4759@G4735) ((lambda (G475c@r^ G475d@e) (begin (G30c1@set-interaction-env-r! G46fb@env G475c@r^) (values G475d@e (G472e@rtc)))) G4759@G4735 G4758@G4734)))) (G2dd9@make-stx G46fa@x G2d87@top-mark* (list G472c@rib) '()))) (G30b9@interaction-env-rib G46fb@env) (G30bb@interaction-env-r G46fb@env) (G3079@make-collector)) (assertion-violation 'expand '"not an environment" G46fb@env))))) (set! G30d9@eval (lambda (G4760@x G4761@env) (begin (if (not (G30cd@environment? G4761@env)) (error 'eval '"not an environment" G4761@env) (void)) (call-with-values (lambda () (G30d7@expand G4760@x G4761@env)) (lambda (G4766@G4764 G4767@G4765) ((lambda (G476a@invoke-req* G476b@x) (begin (for-each G2c26@G2acd@invoke-library G476a@invoke-req*) (eval-core (G29ff@G29b7@expanded->core G476b@x)))) G4767@G4765 G4766@G4764)))))) (set! G30db@library-expander (lambda G47d3 ((lambda (G47d4) (if (= G47d4 '3) (apply (lambda (G476e@x G476f@filename G4770@verify-name) ((lambda (G4775@build-visit-code G4777@visit!) (begin (set! G4775@build-visit-code (lambda (G47c1@macro*) (if (null? G47c1@macro*) (G2d6d@G2cdf@build-void) (G2d6c@G2cdd@build-sequence '#f (map (lambda (G47c3@x) ((lambda (G47c5@loc G47c6@src) (list 'set! G47c5@loc G47c6@src)) (car G47c3@x) (cddr G47c3@x))) G47c1@macro*))))) (set! G4777@visit! (lambda (G47b9@macro*) (for-each (lambda (G47bb@x) ((lambda (G47bd@loc G47be@proc) (set-symbol-value! G47bd@loc G47be@proc)) (car G47bb@x) (cadr G47bb@x))) G47b9@macro*))) (call-with-values (lambda () (G3087@core-library-expander G476e@x G4770@verify-name)) (lambda (G4781@G4778 G4782@G4779 G4783@G477a G4784@G477b G4785@G477c G4786@G477d G4787@G477e G4788@G477f G4789@G4780) ((lambda (G4793@export-env G4794@export-subst G4795@macro* G4796@invoke-code G4797@vis* G4798@inv* G4799@imp* G479a@ver G479b@name) ((lambda (G47a5@id G47a6@name G47a7@ver G47a8@imp* G47a9@vis* G47aa@inv* G47ab@visit-proc G47ac@invoke-proc G47ad@visit-code G47ae@invoke-code) (begin (G2c24@G2ac9@install-library G47a5@id G47a6@name G47a7@ver G47a8@imp* G47a9@vis* G47aa@inv* G4794@export-subst G4793@export-env G47ab@visit-proc G47ac@invoke-proc G47ad@visit-code G47ae@invoke-code '#t G476f@filename) (values G47a5@id G47a6@name G47a7@ver G47a8@imp* G47a9@vis* G47aa@inv* G47ae@invoke-code G47ad@visit-code G4794@export-subst G4793@export-env))) (gensym) G479b@name G479a@ver (map G2c2a@G2ad5@library-spec G4799@imp*) (map G2c2a@G2ad5@library-spec G4797@vis*) (map G2c2a@G2ad5@library-spec G4798@inv*) (lambda () (G4777@visit! G4795@macro*)) (lambda () (eval-core (G29ff@G29b7@expanded->core G4796@invoke-code))) (G4775@build-visit-code G4795@macro*) G4796@invoke-code)) G4789@G4780 G4788@G477f G4787@G477e G4786@G477d G4785@G477c G4784@G477b G4783@G477a G4782@G4779 G4781@G4778))))) '#f '#f)) G47d3) (if (= G47d4 '2) (apply (lambda (G47c9@x G47ca@filename) (G30db@library-expander G47c9@x G47ca@filename (lambda (G47cd@x) (values)))) G47d3) (if (= G47d4 '1) (apply (lambda (G47cf@x) (G30db@library-expander G47cf@x '#f (lambda (G47d1@x) (values)))) G47d3) (error 'apply '"invalid arg count"))))) (length G47d3)))) (set! G30dd@boot-library-expand (lambda (G47d5@x) (call-with-values (lambda () (G30db@library-expander G47d5@x)) (lambda (G47e1@G47d7 G47e2@G47d8 G47e3@G47d9 G47e4@G47da G47e5@G47db G47e6@G47dc G47e7@G47dd G47e8@G47de G47e9@G47df G47ea@G47e0) ((lambda (G47f5@export-env G47f6@export-subst G47f7@visit-code G47f8@invoke-code G47f9@inv* G47fa@vis* G47fb@imp* G47fc@ver G47fd@name G47fe@id) (values G47fd@name G47f8@invoke-code G47f6@export-subst G47f5@export-env)) G47ea@G47e0 G47e9@G47df G47e8@G47de G47e7@G47dd G47e6@G47dc G47e5@G47db G47e4@G47da G47e3@G47d9 G47e2@G47d8 G47e1@G47d7))))) (set! G30df@rev-map-append (lambda (G4809@f G480a@ls G480b@ac) (if (null? G480a@ls) G480b@ac (G30df@rev-map-append G4809@f (cdr G480a@ls) (cons (G4809@f (car G480a@ls)) G480b@ac))))) (set! G30e1@build-exports (lambda (G480f@lex*+loc* G4810@init*) (G2d6c@G2cdd@build-sequence '#f (cons (G2d6d@G2cdf@build-void) (G30df@rev-map-append (lambda (G4813@x) (list 'set! (cdr G4813@x) (car G4813@x))) G480f@lex*+loc* G4810@init*))))) (set! G30e3@make-export-subst (lambda (G4815@name* G4816@id*) (map (lambda (G4819@name G481a@id) ((lambda (G481d@label) (begin (if (not G481d@label) (G30fb@syntax-violation '#f '"cannot export unbound identifier" G481a@id) (void)) (cons G4819@name G481d@label))) (G2e29@id->label G481a@id))) G4815@name* G4816@id*))) (set! G30e5@make-export-env/macros (lambda (G481f@lex* G4820@loc* G4821@r) ((lambda (G4826@lookup) (begin (set! G4826@lookup (lambda (G4843@x) ((letrec ((G4845@f (lambda (G4847@x G4848@lex* G4849@loc*) (if (pair? G4848@lex*) (if (eq? G4847@x (car G4848@lex*)) (car G4849@loc*) (G4845@f G4847@x (cdr G4848@lex*) (cdr G4849@loc*))) (assertion-violation 'lookup-make-export '"BUG"))))) G4845@f) G4843@x G481f@lex* G4820@loc*))) ((letrec ((G4827@f (lambda (G4829@r G482a@env G482b@global* G482c@macro*) (if (null? G4829@r) (values G482a@env G482b@global* G482c@macro*) ((lambda (G4831@x) ((lambda (G4833@label G4834@b) ((lambda (G4837@t) (if (memv G4837@t '(lexical)) ((lambda (G4839@v) ((lambda (G483b@loc G483c@type) (G4827@f (cdr G4829@r) (cons (cons* G4833@label G483c@type G483b@loc) G482a@env) (cons (cons (G2f9a@lexical-var G4839@v) G483b@loc) G482b@global*) G482c@macro*)) (G4826@lookup (G2f9a@lexical-var G4839@v)) (if (G2f9c@lexical-mutable? G4839@v) 'mutable 'global))) (G2e33@binding-value G4834@b)) (if (memv G4837@t '(local-macro)) ((lambda (G483f@loc) (G4827@f (cdr G4829@r) (cons (cons* G4833@label 'global-macro G483f@loc) G482a@env) G482b@global* (cons (cons G483f@loc (G2e33@binding-value G4834@b)) G482c@macro*))) (gensym)) (if (memv G4837@t '(local-macro!)) ((lambda (G4841@loc) (G4827@f (cdr G4829@r) (cons (cons* G4833@label 'global-macro! G4841@loc) G482a@env) G482b@global* (cons (cons G4841@loc (G2e33@binding-value G4834@b)) G482c@macro*))) (gensym)) (if (memv G4837@t '($rtd $module)) (G4827@f (cdr G4829@r) (cons G4831@x G482a@env) G482b@global* G482c@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (G2e31@binding-type G4834@b) (G2e33@binding-value G4834@b))))))) (G2e31@binding-type G4834@b))) (car G4831@x) (cdr G4831@x))) (car G4829@r)))))) G4827@f) G4821@r '() '() '()))) '#f))) (set! G30e7@generate-temporaries (lambda (G484d@ls) ((lambda (G484f@t) ((lambda (G4851@ls/false) (if G4851@ls/false (apply (lambda (G4853@ls) (map (lambda (G4855@x) (G2dd9@make-stx ((lambda (G4857@x) (if (or (symbol? G4857@x) (string? G4857@x)) (gensym G4857@x) (gensym 't))) (G3101@syntax->datum G4855@x)) G2d87@top-mark* '() '())) G4853@ls)) G4851@ls/false) ((lambda (G4859@t) ((lambda (G485b@ls/false) (if G485b@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) G485b@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G4859@t))) (G300e@syntax-dispatch G4859@t '_))) G484f@t))) (G300e@syntax-dispatch G484f@t 'each-any))) G484d@ls))) (set! G30e9@free-identifier=? (lambda (G485d@x G485e@y) (if (G2e0f@id? G485d@x) (if (G2e0f@id? G485e@y) (G2e17@free-id=? G485d@x G485e@y) (assertion-violation 'free-identifier=? '"not an identifier" G485e@y)) (assertion-violation 'free-identifier=? '"not an identifier" G485d@x)))) (set! G30eb@bound-identifier=? (lambda (G4861@x G4862@y) (if (G2e0f@id? G4861@x) (if (G2e0f@id? G4862@y) (G2e15@bound-id=? G4861@x G4862@y) (assertion-violation 'bound-identifier=? '"not an identifier" G4862@y)) (assertion-violation 'bound-identifier=? '"not an identifier" G4861@x)))) (set! G30ed@make-source-condition (lambda (G4865@x) ((lambda (G486f@G486a G4871@G486c G4873@G486b G4876@G4869 G4878@make-source-condition G487a@G4867 G487c@G4868 G487e@source-condition? G4880@source-filename G4882@source-character) (begin (set! G486f@G486a (make-record-type-descriptor '&source-information G4cdf@G4a30@&condition-rtd 'G486d '#f '#f '#((immutable file-name) (immutable character)))) (set! G4871@G486c '#f) (set! G4873@G486b (make-record-constructor-descriptor G486f@G486a G4ce0@G4a32@&condition-rcd G4871@G486c)) (set! G4876@G4869 (record-predicate G486f@G486a)) (set! G4878@make-source-condition (record-constructor G4873@G486b)) (set! G487a@G4867 (record-accessor G486f@G486a '0)) (set! G487c@G4868 (record-accessor G486f@G486a '1)) (set! G487e@source-condition? (condition-predicate G486f@G486a)) (set! G4880@source-filename (condition-accessor G486f@G486a G487a@G4867)) (set! G4882@source-character (condition-accessor G486f@G486a G487c@G4868)) (if (pair? G4865@x) (G4878@make-source-condition (car G4865@x) (cdr G4865@x)) (condition)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30ef@extract-position-condition (lambda (G4883@x) (G30ed@make-source-condition (G30f1@expression-position G4883@x)))) (set! G30f1@expression-position (lambda (G4885@x) (and (G2dd7@stx? G4885@x) ((lambda (G4887@x) (and (G29a0@G28ce@annotation? G4887@x) (G29a1@G28d0@annotation-source G4887@x))) (G2ddb@stx-expr G4885@x))))) (set! G30f3@assertion-error (lambda (G4889@expr G488a@pos) (raise (condition (G4d0f@G4af2@make-assertion-violation) (G4d21@G4b22@make-who-condition 'assert) (G4ce5@G4a85@make-message-condition '"assertion failed") (G4d17@G4b08@make-irritants-condition (list G4889@expr)) (G30ed@make-source-condition G488a@pos))))) (set! G30f5@syntax-error (lambda (G488d@x . G488f@args) (begin (if (not (for-all string? G488f@args)) (assertion-violation 'syntax-error '"invalid argument" G488f@args) (void)) (raise (condition (G4ce5@G4a85@make-message-condition (if (null? G488f@args) '"invalid syntax" (apply string-append G488f@args))) (G4d43@G4b7c@make-syntax-violation (G3101@syntax->datum G488d@x) '#f) (G30ef@extract-position-condition G488d@x) (G30f7@extract-trace G488d@x)))))) (set! G30f7@extract-trace (lambda (G4891@x) ((lambda (G489a@G4895 G489c@G4897 G489e@G4896 G48a1@G4894 G48a3@make-trace G48a5@G4893 G48a7@trace? G48a9@trace-form) (begin (set! G489a@G4895 (make-record-type-descriptor '&trace G4cdf@G4a30@&condition-rtd 'G4898 '#f '#f '#((immutable form)))) (set! G489c@G4897 '#f) (set! G489e@G4896 (make-record-constructor-descriptor G489a@G4895 G4ce0@G4a32@&condition-rcd G489c@G4897)) (set! G48a1@G4894 (record-predicate G489a@G4895)) (set! G48a3@make-trace (record-constructor G489e@G4896)) (set! G48a5@G4893 (record-accessor G489a@G4895 '0)) (set! G48a7@trace? (condition-predicate G489a@G4895)) (set! G48a9@trace-form (condition-accessor G489a@G4895 G48a5@G4893)) ((letrec ((G48aa@f (lambda (G48ac@x) (if (G2dd7@stx? G48ac@x) (apply condition (G48a3@make-trace G48ac@x) (map G48aa@f (G2de1@stx-ae* G48ac@x))) (if (G29a0@G28ce@annotation? G48ac@x) (G48a3@make-trace (G2dd9@make-stx G48ac@x '() '() '())) (condition)))))) G48aa@f) G4891@x))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! G30f9@syntax-violation* (lambda (G48ae@who G48af@msg G48b0@form G48b1@condition-object) (begin (if (not (string? G48af@msg)) (assertion-violation 'syntax-violation '"message is not a string" G48af@msg) (void)) ((lambda (G48b6@who) (raise (condition (if G48b6@who (G4d21@G4b22@make-who-condition G48b6@who) (condition)) (G4ce5@G4a85@make-message-condition G48af@msg) G48b1@condition-object (G30ef@extract-position-condition G48b0@form) (G30f7@extract-trace G48b0@form)))) (if (or (string? G48ae@who) (symbol? G48ae@who)) G48ae@who (if (not G48ae@who) ((lambda (G48b8@t) ((lambda (G48ba@ls/false) (if (and G48ba@ls/false (apply (lambda (G48bc@id) (G2e0f@id? G48bc@id)) G48ba@ls/false)) (apply (lambda (G48be@id) (G3101@syntax->datum G48be@id)) G48ba@ls/false) ((lambda (G48c0@t) ((lambda (G48c2@ls/false) (if (and G48c2@ls/false (apply (lambda (G48c4@id G48c5@rest) (G2e0f@id? G48c4@id)) G48c2@ls/false)) (apply (lambda (G48c8@id G48c9@rest) (G3101@syntax->datum G48c8@id)) G48c2@ls/false) ((lambda (G48cc@t) ((lambda (G48ce@ls/false) (if G48ce@ls/false (apply (lambda () '#f) G48ce@ls/false) (G30fb@syntax-violation '#f '"invalid syntax" G48cc@t))) (G300e@syntax-dispatch G48cc@t '_))) G48c0@t))) (G300e@syntax-dispatch G48c0@t '(any . any)))) G48b8@t))) (G300e@syntax-dispatch G48b8@t 'any))) G48b0@form) (assertion-violation 'syntax-violation '"invalid who argument" G48ae@who))))))) (set! G30fb@syntax-violation (lambda G48de ((lambda (G48df) (if (= G48df '3) (apply (lambda (G48d0@who G48d1@msg G48d2@form) (G30fb@syntax-violation G48d0@who G48d1@msg G48d2@form '#f)) G48de) (if (= G48df '4) (apply (lambda (G48d6@who G48d7@msg G48d8@form G48d9@subform) (G30f9@syntax-violation* G48d6@who G48d7@msg G48d8@form (G4d43@G4b7c@make-syntax-violation (G3101@syntax->datum G48d8@form) (G3101@syntax->datum G48d9@subform)))) G48de) (error 'apply '"invalid arg count")))) (length G48de)))) (set! G30fd@identifier? (lambda (G48e0@x) (G2e0f@id? G48e0@x))) (set! G30ff@datum->syntax (lambda (G48e2@id G48e3@datum) (if (G2e0f@id? G48e2@id) (G2ded@datum->stx G48e2@id G48e3@datum) (assertion-violation 'datum->syntax '"not an identifier" G48e2@id)))) (set! G3101@syntax->datum (lambda (G48e6@x) (G2e25@stx->datum G48e6@x))) (set! G3103@compile-r6rs-top-level (lambda (G48e8@x*) (call-with-values (lambda () (G308b@top-level-expander G48e8@x*)) (lambda (G48ec@G48ea G48ed@G48eb) ((lambda (G48f0@invoke-code G48f1@lib*) (lambda () (begin (for-each G2c26@G2acd@invoke-library G48f1@lib*) (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (G29ff@G29b7@expanded->core G48f0@invoke-code)) (void)) (eval-core (G29ff@G29b7@expanded->core G48f0@invoke-code))))) G48ed@G48eb G48ec@G48ea))))) (set! G3105@pre-compile-r6rs-top-level (lambda (G48f4@x*) (call-with-values (lambda () (G308b@top-level-expander G48f4@x*)) (lambda (G48f8@G48f6 G48f9@G48f7) ((lambda (G48fc@invoke-code G48fd@lib*) (begin (for-each G2c26@G2acd@invoke-library G48fd@lib*) (G29a9@G28e0@compile-core (G29ff@G29b7@expanded->core G48fc@invoke-code)))) G48f9@G48f7 G48f8@G48f6))))) (set! G3107@interaction-environment ((lambda (G4900@the-env) (lambda () (or G4900@the-env ((lambda (G4902@lib G4903@rib) (begin ((lambda (G4906@subst) (begin (G2db0@set-rib-sym*! G4903@rib (map car G4906@subst)) (G2db2@set-rib-mark**! G4903@rib (map (lambda (G4908@x) G2d87@top-mark*) G4906@subst)) (G2db4@set-rib-label*! G4903@rib (map cdr G4906@subst)))) (G2bfb@G2a77@library-subst G4902@lib)) ((lambda (G490a@env) (begin (set! G4900@the-env G490a@env) G490a@env)) (G30b7@make-interaction-env G4903@rib '() '())))) (G2c1f@G2abf@find-library-by-name '(mosh interaction)) (G2dbc@make-cache-rib))))) '#f)) (set! G3109@top-level-context (G29ab@G28e4@make-parameter '#f)) (begin (set! G4a1b@G3109@top-level-context G3109@top-level-context) (set! G4a1a@G3107@interaction-environment G3107@interaction-environment) (set! G4a19@G3105@pre-compile-r6rs-top-level G3105@pre-compile-r6rs-top-level) (set! G4a18@G3103@compile-r6rs-top-level G3103@compile-r6rs-top-level) (set! G4a17@G3101@syntax->datum G3101@syntax->datum) (set! G4a16@G30ff@datum->syntax G30ff@datum->syntax) (set! G4a15@G30fd@identifier? G30fd@identifier?) (set! G4a14@G30fb@syntax-violation G30fb@syntax-violation) (set! G4a13@G30f9@syntax-violation* G30f9@syntax-violation*) (set! G4a12@G30f7@extract-trace G30f7@extract-trace) (set! G4a11@G30f5@syntax-error G30f5@syntax-error) (set! G4a10@G30f3@assertion-error G30f3@assertion-error) (set! G4a0f@G30f1@expression-position G30f1@expression-position) (set! G4a0e@G30ef@extract-position-condition G30ef@extract-position-condition) (set! G4a0d@G30ed@make-source-condition G30ed@make-source-condition) (set! G4a0c@G30eb@bound-identifier=? G30eb@bound-identifier=?) (set! G4a0b@G30e9@free-identifier=? G30e9@free-identifier=?) (set! G4a0a@G30e7@generate-temporaries G30e7@generate-temporaries) (set! G4a09@G30e5@make-export-env/macros G30e5@make-export-env/macros) (set! G4a08@G30e3@make-export-subst G30e3@make-export-subst) (set! G4a07@G30e1@build-exports G30e1@build-exports) (set! G4a06@G30df@rev-map-append G30df@rev-map-append) (set! G4a05@G30dd@boot-library-expand G30dd@boot-library-expand) (set! G4a04@G30db@library-expander G30db@library-expander) (set! G4a03@G30d9@eval G30d9@eval) (set! G4a02@G30d7@expand G30d7@expand) (set! G4a01@G30d5@scheme-report-environment G30d5@scheme-report-environment) (set! G4a00@G30d3@null-environment G30d3@null-environment) (set! G49ff@G30d1@environment G30d1@environment) (set! G49fe@G30cf@environment-symbols G30cf@environment-symbols) (set! G49fd@G30cd@environment? G30cd@environment?) (set! G49fc@G30cb@parse-binding G30cb@parse-binding) (set! G49fb@G30c9@environment-bindings G30c9@environment-bindings) (set! G49fa@G30c7@interaction-environment-symbols G30c7@interaction-environment-symbols) (set! G49f9@G30c5@rp G30c5@rp) (set! G49f8@G30c3@set-interaction-env-locs! G30c3@set-interaction-env-locs!) (set! G49f7@G30c1@set-interaction-env-r! G30c1@set-interaction-env-r!) (set! G49f6@G30bf@set-interaction-env-rib! G30bf@set-interaction-env-rib!) (set! G49f5@G30bd@interaction-env-locs G30bd@interaction-env-locs) (set! G49f4@G30bb@interaction-env-r G30bb@interaction-env-r) (set! G49f3@G30b9@interaction-env-rib G30b9@interaction-env-rib) (set! G49f2@G30b7@make-interaction-env G30b7@make-interaction-env) (set! G49f1@G30b5@interaction-env? G30b5@interaction-env?) (set! G49f0@G30b2@G30aa G30b2@G30aa) (set! G49ef@G30b0@G30ab G30b0@G30ab) (set! G49ee@G30ae@G30a9 G30ae@G30a9) (set! G49ed@G30a8@rp G30a8@rp) (set! G49ec@G30a6@set-env-itc! G30a6@set-env-itc!) (set! G49eb@G30a4@set-env-labels! G30a4@set-env-labels!) (set! G49ea@G30a2@set-env-names! G30a2@set-env-names!) (set! G49e9@G30a0@env-itc G30a0@env-itc) (set! G49e8@G309e@env-labels G309e@env-labels) (set! G49e7@G309c@env-names G309c@env-names) (set! G49e6@G309a@make-env G309a@make-env) (set! G49e5@G3098@env? G3098@env?) (set! G49e4@G3095@G308d G3095@G308d) (set! G49e3@G3093@G308e G3093@G308e) (set! G49e2@G3091@G308c G3091@G308c) (set! G49e1@G308b@top-level-expander G308b@top-level-expander) (set! G49e0@G3089@parse-top-level-program G3089@parse-top-level-program) (set! G49df@G3087@core-library-expander G3087@core-library-expander) (set! G49de@G3085@library-body-expander G3085@library-body-expander) (set! G49dd@G3083@chi-interaction-expr G3083@chi-interaction-expr) (set! G49dc@G3081@chi-library-internal G3081@chi-library-internal) (set! G49db@G307f@imp-collector G307f@imp-collector) (set! G49da@G307d@vis-collector G307d@vis-collector) (set! G49d9@G307b@inv-collector G307b@inv-collector) (set! G49d8@G3079@make-collector G3079@make-collector) (set! G49d7@G3077@make-top-rib G3077@make-top-rib) (set! G49d6@G3075@parse-import-spec* G3075@parse-import-spec*) (set! G49d5@G3073@parse-library G3073@parse-library) (set! G49d4@G3071@parse-library-name G3071@parse-library-name) (set! G49d3@G306f@parse-exports G306f@parse-exports) (set! G49d2@G306d@expand-transformer G306d@expand-transformer) (set! G49d1@G306b@chi-body* G306b@chi-body*) (set! G49d0@G3069@chi-internal-module G3069@chi-internal-module) (set! G49cf@G3067@module-interface-exp-id* G3067@module-interface-exp-id*) (set! G49ce@G3065@set-module-interface-exp-lab-vec! G3065@set-module-interface-exp-lab-vec!) (set! G49cd@G3063@set-module-interface-exp-id-vec! G3063@set-module-interface-exp-id-vec!) (set! G49cc@G3061@set-module-interface-first-mark! G3061@set-module-interface-first-mark!) (set! G49cb@G305f@module-interface-exp-lab-vec G305f@module-interface-exp-lab-vec) (set! G49ca@G305d@module-interface-exp-id-vec G305d@module-interface-exp-id-vec) (set! G49c9@G305b@module-interface-first-mark G305b@module-interface-first-mark) (set! G49c8@G3059@make-module-interface G3059@make-module-interface) (set! G49c7@G3057@module-interface? G3057@module-interface?) (set! G49c6@G3054@G304c G3054@G304c) (set! G49c5@G3052@G304d G3052@G304d) (set! G49c4@G3050@G304b G3050@G304b) (set! G49c3@G304a@parse-module G304a@parse-module) (set! G49c2@G3048@chi-internal G3048@chi-internal) (set! G49c1@G3046@find-dups G3046@find-dups) (set! G49c0@G3044@find-bound=? G3044@find-bound=?) (set! G49bf@G3042@chi-rhs* G3042@chi-rhs*) (set! G49be@G3040@expand-interaction-rhs*/init* G3040@expand-interaction-rhs*/init*) (set! G49bd@G303e@chi-rhs G303e@chi-rhs) (set! G49bc@G303c@chi-defun G303c@chi-defun) (set! G49bb@G303a@chi-lambda-clause* G303a@chi-lambda-clause*) (set! G49ba@G3038@chi-lambda-clause G3038@chi-lambda-clause) (set! G49b9@G3036@verify-formals G3036@verify-formals) (set! G49b8@G3034@chi-set! G3034@chi-set!) (set! G49b7@G3032@chi-expr G3032@chi-expr) (set! G49b6@G3030@chi-application G3030@chi-application) (set! G49b5@G302e@chi-expr* G302e@chi-expr*) (set! G49b4@G302c@chi-global-macro G302c@chi-global-macro) (set! G49b3@G302a@chi-local-macro G302a@chi-local-macro) (set! G49b2@G3028@chi-macro G3028@chi-macro) (set! G49b1@G3026@do-macro-call G3026@do-macro-call) (set! G49b0@G3024@local-macro-transformer G3024@local-macro-transformer) (set! G49af@G3022@macro-transformer G3022@macro-transformer) (set! G49ae@G3020@symbol-macro G3020@symbol-macro) (set! G49ad@G301e@file-options-macro G301e@file-options-macro) (set! G49ac@G301c@core-macro-transformer G301c@core-macro-transformer) (set! G49ab@G301a@syntax-transformer G301a@syntax-transformer) (set! G49aa@G3018@ellipsis-map G3018@ellipsis-map) (set! G49a9@G3016@syntax-case-transformer G3016@syntax-case-transformer) (set! G49a8@G3014@verify-literals G3014@verify-literals) (set! G49a7@G3012@underscore? G3012@underscore?) (set! G49a6@G3010@ellipsis? G3010@ellipsis?) (set! G49a5@G300e@syntax-dispatch G300e@syntax-dispatch) (set! G49a4@G300c@convert-pattern G300c@convert-pattern) (set! G49a3@G300a@foreign-call-transformer G300a@foreign-call-transformer) (set! G49a2@G3008@parameterize-macro G3008@parameterize-macro) (set! G49a1@G3006@incorrect-usage-macro G3006@incorrect-usage-macro) (set! G49a0@G3004@define-condition-type-macro G3004@define-condition-type-macro) (set! G499f@G3002@define-record-type-macro G3002@define-record-type-macro) (set! G499e@G3000@define-struct-macro G3000@define-struct-macro) (set! G499d@G2ffe@quasisyntax-macro G2ffe@quasisyntax-macro) (set! G499c@G2ffc@quasiquote-macro G2ffc@quasiquote-macro) (set! G499b@G2ffa@syntax-rules-macro G2ffa@syntax-rules-macro) (set! G499a@G2ff8@include-into-macro G2ff8@include-into-macro) (set! G4999@G2ff6@include-macro G2ff6@include-macro) (set! G4998@G2ff4@do-include G2ff4@do-include) (set! G4997@G2ff2@cond-macro G2ff2@cond-macro) (set! G4996@G2ff0@and-macro G2ff0@and-macro) (set! G4995@G2fee@or-macro G2fee@or-macro) (set! G4994@G2fec@let*-macro G2fec@let*-macro) (set! G4993@G2fea@do-macro G2fea@do-macro) (set! G4992@G2fe8@identifier-syntax-macro G2fe8@identifier-syntax-macro) (set! G4991@G2fe6@endianness-macro G2fe6@endianness-macro) (set! G4990@G2fe4@assert-macro G2fe4@assert-macro) (set! G498f@G2fe2@delay-macro G2fe2@delay-macro) (set! G498e@G2fe0@time-macro G2fe0@time-macro) (set! G498d@G2fde@define-enumeration-macro G2fde@define-enumeration-macro) (set! G498c@G2fdc@guard-macro G2fdc@guard-macro) (set! G498b@G2fda@trace-letrec-syntax-macro G2fda@trace-letrec-syntax-macro) (set! G498a@G2fd8@trace-let-syntax-macro G2fd8@trace-let-syntax-macro) (set! G4989@G2fd6@trace-let/rec-syntax G2fd6@trace-let/rec-syntax) (set! G4988@G2fd4@trace-define-syntax-macro G2fd4@trace-define-syntax-macro) (set! G4987@G2fd2@trace-define-macro G2fd2@trace-define-macro) (set! G4986@G2fd0@trace-lambda-macro G2fd0@trace-lambda-macro) (set! G4985@G2fce@let*-values-macro G2fce@let*-values-macro) (set! G4984@G2fcc@let-values-macro G2fcc@let-values-macro) (set! G4983@G2fca@let-macro G2fca@let-macro) (set! G4982@G2fc8@invalid-fmls-error G2fc8@invalid-fmls-error) (set! G4981@G2fc6@with-syntax-macro G2fc6@with-syntax-macro) (set! G4980@G2fc4@bless G2fc4@bless) (set! G497f@G2fc2@lambda-transformer G2fc2@lambda-transformer) (set! G497e@G2fc0@case-lambda-transformer G2fc0@case-lambda-transformer) (set! G497d@G2fbe@quote-transformer G2fbe@quote-transformer) (set! G497c@G2fbc@case-macro G2fbc@case-macro) (set! G497b@G2fba@or-transformer G2fba@or-transformer) (set! G497a@G2fb8@and-transformer G2fb8@and-transformer) (set! G4979@G2fb6@if-transformer G2fb6@if-transformer) (set! G4978@G2fb4@unless-macro G2fb4@unless-macro) (set! G4977@G2fb2@when-macro G2fb2@when-macro) (set! G4976@G2fb0@record-constructor-descriptor-transformer G2fb0@record-constructor-descriptor-transformer) (set! G4975@G2fae@record-type-descriptor-transformer G2fae@record-type-descriptor-transformer) (set! G4974@G2fac@type-descriptor-transformer G2fac@type-descriptor-transformer) (set! G4973@G2faa@fluid-let-syntax-transformer G2faa@fluid-let-syntax-transformer) (set! G4972@G2fa8@letrec*-transformer G2fa8@letrec*-transformer) (set! G4971@G2fa6@letrec-transformer G2fa6@letrec-transformer) (set! G4970@G2fa4@letrec-helper G2fa4@letrec-helper) (set! G496f@G2fa2@add-lexicals G2fa2@add-lexicals) (set! G496e@G2fa0@add-lexical G2fa0@add-lexical) (set! G496d@G2f9e@set-lexical-mutable! G2f9e@set-lexical-mutable!) (set! G496c@G2f9c@lexical-mutable? G2f9c@lexical-mutable?) (set! G496b@G2f9a@lexical-var G2f9a@lexical-var) (set! G496a@G2f98@scheme-stx G2f98@scheme-stx) (set! G4969@G2f96@scheme-stx-hashtable G2f96@scheme-stx-hashtable) (set! G4968@G2f94@parse-define-syntax G2f94@parse-define-syntax) (set! G4967@G2f92@parse-define G2f92@parse-define) (set! G4966@G2e4f@make-eval-transformer G2e4f@make-eval-transformer) (set! G4965@G2e4d@variable-transformer-procedure G2e4d@variable-transformer-procedure) (set! G4964@G2e4b@variable-transformer? G2e4b@variable-transformer?) (set! G4963@G2e49@make-variable-transformer G2e49@make-variable-transformer) (set! G4962@G2e47@sanitize-binding G2e47@sanitize-binding) (set! G4961@G2e37@syntax-type G2e37@syntax-type) (set! G4960@G2e35@raise-unbound-error G2e35@raise-unbound-error) (set! G495f@G2e33@binding-value G2e33@binding-value) (set! G495e@G2e31@binding-type G2e31@binding-type) (set! G495d@G2e2f@make-binding G2e2f@make-binding) (set! G495c@G2e2d@label->binding G2e2d@label->binding) (set! G495b@G2e2b@id->real-label G2e2b@id->real-label) (set! G495a@G2e29@id->label G2e29@id->label) (set! G4959@G2e27@same-marks*? G2e27@same-marks*?) (set! G4958@G2e25@stx->datum G2e25@stx->datum) (set! G4957@G2e23@strip G2e23@strip) (set! G4956@G2e21@strip-annotations G2e21@strip-annotations) (set! G4955@G2e1f@self-evaluating? G2e1f@self-evaluating?) (set! G4954@G2e1d@bound-id-member? G2e1d@bound-id-member?) (set! G4953@G2e1b@distinct-bound-ids? G2e1b@distinct-bound-ids?) (set! G4952@G2e19@valid-bound-ids? G2e19@valid-bound-ids?) (set! G4951@G2e17@free-id=? G2e17@free-id=?) (set! G4950@G2e15@bound-id=? G2e15@bound-id=?) (set! G494f@G2e13@same-marks? G2e13@same-marks?) (set! G494e@G2e11@id->sym G2e11@id->sym) (set! G494d@G2e0f@id? G2e0f@id?) (set! G494c@G2e0d@syntax->list G2e0d@syntax->list) (set! G494b@G2e0b@syntax-cdr G2e0b@syntax-cdr) (set! G494a@G2e09@syntax-car G2e09@syntax-car) (set! G4949@G2e07@syntax-list? G2e07@syntax-list?) (set! G4948@G2e05@syntax-null? G2e05@syntax-null?) (set! G4947@G2e03@syntax-vector? G2e03@syntax-vector?) (set! G4946@G2e01@syntax-pair? G2e01@syntax-pair?) (set! G4945@G2dff@syntax-vector->list G2dff@syntax-vector->list) (set! G4944@G2dfd@syntax-kind? G2dfd@syntax-kind?) (set! G4943@G2dfb@add-subst G2dfb@add-subst) (set! G4942@G2df9@add-mark G2df9@add-mark) (set! G4941@G2df7@mkstx G2df7@mkstx) (set! G4940@G2df5@join-wraps G2df5@join-wraps) (set! G493f@G2df3@anti-mark? G2df3@anti-mark?) (set! G493e@G2df1@anti-mark G2df1@anti-mark) (set! G493d@G2def@gen-mark G2def@gen-mark) (set! G493c@G2ded@datum->stx G2ded@datum->stx) (set! G493b@G2deb@rp G2deb@rp) (set! G493a@G2de9@set-stx-ae*! G2de9@set-stx-ae*!) (set! G4939@G2de7@set-stx-subst*! G2de7@set-stx-subst*!) (set! G4938@G2de5@set-stx-mark*! G2de5@set-stx-mark*!) (set! G4937@G2de3@set-stx-expr! G2de3@set-stx-expr!) (set! G4936@G2de1@stx-ae* G2de1@stx-ae*) (set! G4935@G2ddf@stx-subst* G2ddf@stx-subst*) (set! G4934@G2ddd@stx-mark* G2ddd@stx-mark*) (set! G4933@G2ddb@stx-expr G2ddb@stx-expr) (set! G4932@G2dd9@make-stx G2dd9@make-stx) (set! G4931@G2dd7@stx? G2dd7@stx?) (set! G4930@G2dd4@G2dcc G2dd4@G2dcc) (set! G492f@G2dd2@G2dcd G2dd2@G2dcd) (set! G492e@G2dd0@G2dcb G2dd0@G2dcb) (set! G492d@G2dca@make-full-rib G2dca@make-full-rib) (set! G492c@G2dc8@unseal-rib! G2dc8@unseal-rib!) (set! G492b@G2dc6@seal-rib! G2dc6@seal-rib!) (set! G492a@G2dc4@make-rib-map G2dc4@make-rib-map) (set! G4929@G2dc2@extend-rib/nc! G2dc2@extend-rib/nc!) (set! G4928@G2dc0@extend-rib! G2dc0@extend-rib!) (set! G4927@G2dbe@find-label G2dbe@find-label) (set! G4926@G2dbc@make-cache-rib G2dbc@make-cache-rib) (set! G4925@G2dba@make-empty-rib G2dba@make-empty-rib) (set! G4924@G2db8@set-rib-cache! G2db8@set-rib-cache!) (set! G4923@G2db6@set-rib-sealed/freq! G2db6@set-rib-sealed/freq!) (set! G4922@G2db4@set-rib-label*! G2db4@set-rib-label*!) (set! G4921@G2db2@set-rib-mark**! G2db2@set-rib-mark**!) (set! G4920@G2db0@set-rib-sym*! G2db0@set-rib-sym*!) (set! G491f@G2dae@rib-cache G2dae@rib-cache) (set! G491e@G2dac@rib-sealed/freq G2dac@rib-sealed/freq) (set! G491d@G2daa@rib-label* G2daa@rib-label*) (set! G491c@G2da8@rib-mark** G2da8@rib-mark**) (set! G491b@G2da6@rib-sym* G2da6@rib-sym*) (set! G491a@G2da4@make-rib G2da4@make-rib) (set! G4919@G2da2@rib? G2da2@rib?) (set! G4918@G2d9f@G2d97 G2d9f@G2d97) (set! G4917@G2d9d@G2d98 G2d9d@G2d98) (set! G4916@G2d9b@G2d96 G2d9b@G2d96) (set! G4915@G2d95@gen-define-label G2d95@gen-define-label) (set! G4914@G2d93@gen-define-label+loc G2d93@gen-define-label+loc) (set! G4913@G2d91@gen-top-level-label G2d91@gen-top-level-label) (set! G4912@G2d8f@gen-label G2d8f@gen-label) (set! G4911@G2d8d@gen-global G2d8d@gen-global) (set! G4910@G2d8b@gen-lexical G2d8b@gen-lexical) (set! G490f@G2d89@top-marked? G2d89@top-marked?) (set! G490e@G2d87@top-mark* G2d87@top-mark*) (set! G490d@G2d82@set-union G2d82@set-union) (set! G490c@G2d80@set-cons G2d80@set-cons) (G2c1c@G2ab9@current-library-expander G30db@library-expander)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
((lambda (G4a25@G4a20 G4a27@G4a22 G4a29@G4a21 G4a2c@&condition? G4a2e@make-&condition G4a30@&condition-rtd G4a32@&condition-rcd G4a7c@G4a77 G4a7e@G4a79 G4a80@G4a78 G4a83@p? G4a85@make-message-condition G4a87@G4a76@condition-message G4a89@message-condition? G4a8b@condition-message G4a8d@&message-rtd G4a8f@&message-rcd G4a95@G4a90 G4a97@G4a92 G4a99@G4a91 G4a9c@p? G4a9e@make-warning G4aa0@warning? G4aa2@&warning-rtd G4aa4@&warning-rcd G4aaa@G4aa5 G4aac@G4aa7 G4aae@G4aa6 G4ab1@p? G4ab3@make-serious-condition G4ab5@serious-condition? G4ab7@&serious-rtd G4ab9@&serious-rcd G4abf@G4aba G4ac1@G4abc G4ac3@G4abb G4ac6@p? G4ac8@make-error G4aca@error? G4acc@&error-rtd G4ace@&error-rcd G4ad4@G4acf G4ad6@G4ad1 G4ad8@G4ad0 G4adb@p? G4add@make-violation G4adf@violation? G4ae1@&violation-rtd G4ae3@&violation-rcd G4ae9@G4ae4 G4aeb@G4ae6 G4aed@G4ae5 G4af0@p? G4af2@make-assertion-violation G4af4@assertion-violation? G4af6@&assertion-rtd G4af8@&assertion-rcd G4aff@G4afa G4b01@G4afc G4b03@G4afb G4b06@p? G4b08@make-irritants-condition G4b0a@G4af9@condition-irritants G4b0c@irritants-condition? G4b0e@condition-irritants G4b10@&irritants-rtd G4b12@&irritants-rcd G4b19@G4b14 G4b1b@G4b16 G4b1d@G4b15 G4b20@p? G4b22@make-who-condition G4b24@G4b13@condition-who G4b26@who-condition? G4b28@condition-who G4b2a@&who-rtd G4b2c@&who-rcd G4b32@G4b2d G4b34@G4b2f G4b36@G4b2e G4b39@p? G4b3b@make-non-continuable-violation G4b3d@non-continuable-violation? G4b3f@&non-continuable-rtd G4b41@&non-continuable-rcd G4b47@G4b42 G4b49@G4b44 G4b4b@G4b43 G4b4e@p? G4b50@make-implementation-restriction-violation G4b52@implementation-restriction-violation? G4b54@&implementation-restriction-rtd G4b56@&implementation-restriction-rcd G4b5c@G4b57 G4b5e@G4b59 G4b60@G4b58 G4b63@p? G4b65@make-lexical-violation G4b67@lexical-violation? G4b69@&lexical-rtd G4b6b@&lexical-rcd G4b73@G4b6e G4b75@G4b70 G4b77@G4b6f G4b7a@p? G4b7c@make-syntax-violation G4b7e@G4b6c@syntax-violation-form G4b80@G4b6d@syntax-violation-subform G4b82@syntax-violation? G4b84@syntax-violation-form G4b86@syntax-violation-subform G4b88@&syntax-rtd G4b8a@&syntax-rcd G4b90@G4b8b G4b92@G4b8d G4b94@G4b8c G4b97@p? G4b99@make-undefined-violation G4b9b@undefined-violation? G4b9d@&undefined-rtd G4b9f@&undefined-rcd G4ba5@G4ba0 G4ba7@G4ba2 G4ba9@G4ba1 G4bac@p? G4bae@make-i/o-error G4bb0@i/o-error? G4bb2@&i/o-rtd G4bb4@&i/o-rcd G4bba@G4bb5 G4bbc@G4bb7 G4bbe@G4bb6 G4bc1@p? G4bc3@make-i/o-read-error G4bc5@i/o-read-error? G4bc7@&i/o-read-rtd G4bc9@&i/o-read-rcd G4bcf@G4bca G4bd1@G4bcc G4bd3@G4bcb G4bd6@p? G4bd8@make-i/o-write-error G4bda@i/o-write-error? G4bdc@&i/o-write-rtd G4bde@&i/o-write-rcd G4be5@G4be0 G4be7@G4be2 G4be9@G4be1 G4bec@p? G4bee@make-i/o-invalid-position-error G4bf0@G4bdf@i/o-error-position G4bf2@i/o-invalid-position-error? G4bf4@i/o-error-position G4bf6@&i/o-invalid-position-rtd G4bf8@&i/o-invalid-position-rcd G4bff@G4bfa G4c01@G4bfc G4c03@G4bfb G4c06@p? G4c08@make-i/o-filename-error G4c0a@G4bf9@i/o-error-filename G4c0c@i/o-filename-error? G4c0e@i/o-error-filename G4c10@&i/o-filename-rtd G4c12@&i/o-filename-rcd G4c18@G4c13 G4c1a@G4c15 G4c1c@G4c14 G4c1f@p? G4c21@make-i/o-file-protection-error G4c23@i/o-file-protection-error? G4c25@&i/o-file-protection-rtd G4c27@&i/o-file-protection-rcd G4c2d@G4c28 G4c2f@G4c2a G4c31@G4c29 G4c34@p? G4c36@make-i/o-file-is-read-only-error G4c38@i/o-file-is-read-only-error? G4c3a@&i/o-file-is-read-only-rtd G4c3c@&i/o-file-is-read-only-rcd G4c42@G4c3d G4c44@G4c3f G4c46@G4c3e G4c49@p? G4c4b@make-i/o-file-already-exists-error G4c4d@i/o-file-already-exists-error? G4c4f@&i/o-file-already-exists-rtd G4c51@&i/o-file-already-exists-rcd G4c57@G4c52 G4c59@G4c54 G4c5b@G4c53 G4c5e@p? G4c60@make-i/o-file-does-not-exist-error G4c62@i/o-file-does-not-exist-error? G4c64@&i/o-file-does-not-exist-rtd G4c66@&i/o-file-does-not-exist-rcd G4c6d@G4c68 G4c6f@G4c6a G4c71@G4c69 G4c74@p? G4c76@make-i/o-port-error G4c78@G4c67@i/o-error-port G4c7a@i/o-port-error? G4c7c@i/o-error-port G4c7e@&i/o-port-rtd G4c80@&i/o-port-rcd G4c86@G4c81 G4c88@G4c83 G4c8a@G4c82 G4c8d@p? G4c8f@make-i/o-decoding-error G4c91@i/o-decoding-error? G4c93@&i/o-decoding-rtd G4c95@&i/o-decoding-rcd G4c9c@G4c97 G4c9e@G4c99 G4ca0@G4c98 G4ca3@p? G4ca5@make-i/o-encoding-error G4ca7@G4c96@i/o-encoding-error-char G4ca9@i/o-encoding-error? G4cab@i/o-encoding-error-char G4cad@&i/o-encoding-rtd G4caf@&i/o-encoding-rcd G4cb5@G4cb0 G4cb7@G4cb2 G4cb9@G4cb1 G4cbc@p? G4cbe@make-no-infinities-violation G4cc0@no-infinities-violation? G4cc2@&no-infinities-rtd G4cc4@&no-infinities-rcd G4cca@G4cc5 G4ccc@G4cc7 G4cce@G4cc6 G4cd1@p? G4cd3@make-no-nans-violation G4cd5@no-nans-violation? G4cd7@&no-nans-rtd G4cd9@&no-nans-rcd) (begin (set! G4a25@G4a20 (make-record-type-descriptor '&condition '#f 'G4a23 '#f '#f '#())) (set! G4a27@G4a22 '#f) (set! G4a29@G4a21 (make-record-constructor-descriptor G4a25@G4a20 '#f G4a27@G4a22)) (set! G4a2c@&condition? (record-predicate G4a25@G4a20)) (set! G4a2e@make-&condition (record-constructor G4a29@G4a21)) (set! G4a30@&condition-rtd G4a25@G4a20) (set! G4a32@&condition-rcd G4a29@G4a21) (set! G4a7c@G4a77 (make-record-type-descriptor '&message G4a25@G4a20 'G4a7a '#f '#f '#((immutable message)))) (set! G4a7e@G4a79 '#f) (set! G4a80@G4a78 (make-record-constructor-descriptor G4a7c@G4a77 G4a29@G4a21 G4a7e@G4a79)) (set! G4a83@p? (record-predicate G4a7c@G4a77)) (set! G4a85@make-message-condition (record-constructor G4a80@G4a78)) (set! G4a87@G4a76@condition-message (record-accessor G4a7c@G4a77 '0)) (set! G4a89@message-condition? (condition-predicate G4a7c@G4a77)) (set! G4a8b@condition-message (condition-accessor G4a7c@G4a77 G4a87@G4a76@condition-message)) (set! G4a8d@&message-rtd G4a7c@G4a77) (set! G4a8f@&message-rcd G4a80@G4a78) (set! G4a95@G4a90 (make-record-type-descriptor '&warning G4a25@G4a20 'G4a93 '#f '#f '#())) (set! G4a97@G4a92 '#f) (set! G4a99@G4a91 (make-record-constructor-descriptor G4a95@G4a90 G4a29@G4a21 G4a97@G4a92)) (set! G4a9c@p? (record-predicate G4a95@G4a90)) (set! G4a9e@make-warning (record-constructor G4a99@G4a91)) (set! G4aa0@warning? (condition-predicate G4a95@G4a90)) (set! G4aa2@&warning-rtd G4a95@G4a90) (set! G4aa4@&warning-rcd G4a99@G4a91) (set! G4aaa@G4aa5 (make-record-type-descriptor '&serious G4a25@G4a20 'G4aa8 '#f '#f '#())) (set! G4aac@G4aa7 '#f) (set! G4aae@G4aa6 (make-record-constructor-descriptor G4aaa@G4aa5 G4a29@G4a21 G4aac@G4aa7)) (set! G4ab1@p? (record-predicate G4aaa@G4aa5)) (set! G4ab3@make-serious-condition (record-constructor G4aae@G4aa6)) (set! G4ab5@serious-condition? (condition-predicate G4aaa@G4aa5)) (set! G4ab7@&serious-rtd G4aaa@G4aa5) (set! G4ab9@&serious-rcd G4aae@G4aa6) (set! G4abf@G4aba (make-record-type-descriptor '&error G4aaa@G4aa5 'G4abd '#f '#f '#())) (set! G4ac1@G4abc '#f) (set! G4ac3@G4abb (make-record-constructor-descriptor G4abf@G4aba G4aae@G4aa6 G4ac1@G4abc)) (set! G4ac6@p? (record-predicate G4abf@G4aba)) (set! G4ac8@make-error (record-constructor G4ac3@G4abb)) (set! G4aca@error? (condition-predicate G4abf@G4aba)) (set! G4acc@&error-rtd G4abf@G4aba) (set! G4ace@&error-rcd G4ac3@G4abb) (set! G4ad4@G4acf (make-record-type-descriptor '&violation G4aaa@G4aa5 'G4ad2 '#f '#f '#())) (set! G4ad6@G4ad1 '#f) (set! G4ad8@G4ad0 (make-record-constructor-descriptor G4ad4@G4acf G4aae@G4aa6 G4ad6@G4ad1)) (set! G4adb@p? (record-predicate G4ad4@G4acf)) (set! G4add@make-violation (record-constructor G4ad8@G4ad0)) (set! G4adf@violation? (condition-predicate G4ad4@G4acf)) (set! G4ae1@&violation-rtd G4ad4@G4acf) (set! G4ae3@&violation-rcd G4ad8@G4ad0) (set! G4ae9@G4ae4 (make-record-type-descriptor '&assertion G4ad4@G4acf 'G4ae7 '#f '#f '#())) (set! G4aeb@G4ae6 '#f) (set! G4aed@G4ae5 (make-record-constructor-descriptor G4ae9@G4ae4 G4ad8@G4ad0 G4aeb@G4ae6)) (set! G4af0@p? (record-predicate G4ae9@G4ae4)) (set! G4af2@make-assertion-violation (record-constructor G4aed@G4ae5)) (set! G4af4@assertion-violation? (condition-predicate G4ae9@G4ae4)) (set! G4af6@&assertion-rtd G4ae9@G4ae4) (set! G4af8@&assertion-rcd G4aed@G4ae5) (set! G4aff@G4afa (make-record-type-descriptor '&irritants G4a25@G4a20 'G4afd '#f '#f '#((immutable irritants)))) (set! G4b01@G4afc '#f) (set! G4b03@G4afb (make-record-constructor-descriptor G4aff@G4afa G4a29@G4a21 G4b01@G4afc)) (set! G4b06@p? (record-predicate G4aff@G4afa)) (set! G4b08@make-irritants-condition (record-constructor G4b03@G4afb)) (set! G4b0a@G4af9@condition-irritants (record-accessor G4aff@G4afa '0)) (set! G4b0c@irritants-condition? (condition-predicate G4aff@G4afa)) (set! G4b0e@condition-irritants (condition-accessor G4aff@G4afa G4b0a@G4af9@condition-irritants)) (set! G4b10@&irritants-rtd G4aff@G4afa) (set! G4b12@&irritants-rcd G4b03@G4afb) (set! G4b19@G4b14 (make-record-type-descriptor '&who G4a25@G4a20 'G4b17 '#f '#f '#((immutable who)))) (set! G4b1b@G4b16 '#f) (set! G4b1d@G4b15 (make-record-constructor-descriptor G4b19@G4b14 G4a29@G4a21 G4b1b@G4b16)) (set! G4b20@p? (record-predicate G4b19@G4b14)) (set! G4b22@make-who-condition (record-constructor G4b1d@G4b15)) (set! G4b24@G4b13@condition-who (record-accessor G4b19@G4b14 '0)) (set! G4b26@who-condition? (condition-predicate G4b19@G4b14)) (set! G4b28@condition-who (condition-accessor G4b19@G4b14 G4b24@G4b13@condition-who)) (set! G4b2a@&who-rtd G4b19@G4b14) (set! G4b2c@&who-rcd G4b1d@G4b15) (set! G4b32@G4b2d (make-record-type-descriptor '&non-continuable G4ad4@G4acf 'G4b30 '#f '#f '#())) (set! G4b34@G4b2f '#f) (set! G4b36@G4b2e (make-record-constructor-descriptor G4b32@G4b2d G4ad8@G4ad0 G4b34@G4b2f)) (set! G4b39@p? (record-predicate G4b32@G4b2d)) (set! G4b3b@make-non-continuable-violation (record-constructor G4b36@G4b2e)) (set! G4b3d@non-continuable-violation? (condition-predicate G4b32@G4b2d)) (set! G4b3f@&non-continuable-rtd G4b32@G4b2d) (set! G4b41@&non-continuable-rcd G4b36@G4b2e) (set! G4b47@G4b42 (make-record-type-descriptor '&implementation-restriction G4ad4@G4acf 'G4b45 '#f '#f '#())) (set! G4b49@G4b44 '#f) (set! G4b4b@G4b43 (make-record-constructor-descriptor G4b47@G4b42 G4ad8@G4ad0 G4b49@G4b44)) (set! G4b4e@p? (record-predicate G4b47@G4b42)) (set! G4b50@make-implementation-restriction-violation (record-constructor G4b4b@G4b43)) (set! G4b52@implementation-restriction-violation? (condition-predicate G4b47@G4b42)) (set! G4b54@&implementation-restriction-rtd G4b47@G4b42) (set! G4b56@&implementation-restriction-rcd G4b4b@G4b43) (set! G4b5c@G4b57 (make-record-type-descriptor '&lexical G4ad4@G4acf 'G4b5a '#f '#f '#())) (set! G4b5e@G4b59 '#f) (set! G4b60@G4b58 (make-record-constructor-descriptor G4b5c@G4b57 G4ad8@G4ad0 G4b5e@G4b59)) (set! G4b63@p? (record-predicate G4b5c@G4b57)) (set! G4b65@make-lexical-violation (record-constructor G4b60@G4b58)) (set! G4b67@lexical-violation? (condition-predicate G4b5c@G4b57)) (set! G4b69@&lexical-rtd G4b5c@G4b57) (set! G4b6b@&lexical-rcd G4b60@G4b58) (set! G4b73@G4b6e (make-record-type-descriptor '&syntax G4ad4@G4acf 'G4b71 '#f '#f '#((immutable form) (immutable subform)))) (set! G4b75@G4b70 '#f) (set! G4b77@G4b6f (make-record-constructor-descriptor G4b73@G4b6e G4ad8@G4ad0 G4b75@G4b70)) (set! G4b7a@p? (record-predicate G4b73@G4b6e)) (set! G4b7c@make-syntax-violation (record-constructor G4b77@G4b6f)) (set! G4b7e@G4b6c@syntax-violation-form (record-accessor G4b73@G4b6e '0)) (set! G4b80@G4b6d@syntax-violation-subform (record-accessor G4b73@G4b6e '1)) (set! G4b82@syntax-violation? (condition-predicate G4b73@G4b6e)) (set! G4b84@syntax-violation-form (condition-accessor G4b73@G4b6e G4b7e@G4b6c@syntax-violation-form)) (set! G4b86@syntax-violation-subform (condition-accessor G4b73@G4b6e G4b80@G4b6d@syntax-violation-subform)) (set! G4b88@&syntax-rtd G4b73@G4b6e) (set! G4b8a@&syntax-rcd G4b77@G4b6f) (set! G4b90@G4b8b (make-record-type-descriptor '&undefined G4ad4@G4acf 'G4b8e '#f '#f '#())) (set! G4b92@G4b8d '#f) (set! G4b94@G4b8c (make-record-constructor-descriptor G4b90@G4b8b G4ad8@G4ad0 G4b92@G4b8d)) (set! G4b97@p? (record-predicate G4b90@G4b8b)) (set! G4b99@make-undefined-violation (record-constructor G4b94@G4b8c)) (set! G4b9b@undefined-violation? (condition-predicate G4b90@G4b8b)) (set! G4b9d@&undefined-rtd G4b90@G4b8b) (set! G4b9f@&undefined-rcd G4b94@G4b8c) (set! G4ba5@G4ba0 (make-record-type-descriptor '&i/o G4abf@G4aba 'G4ba3 '#f '#f '#())) (set! G4ba7@G4ba2 '#f) (set! G4ba9@G4ba1 (make-record-constructor-descriptor G4ba5@G4ba0 G4ac3@G4abb G4ba7@G4ba2)) (set! G4bac@p? (record-predicate G4ba5@G4ba0)) (set! G4bae@make-i/o-error (record-constructor G4ba9@G4ba1)) (set! G4bb0@i/o-error? (condition-predicate G4ba5@G4ba0)) (set! G4bb2@&i/o-rtd G4ba5@G4ba0) (set! G4bb4@&i/o-rcd G4ba9@G4ba1) (set! G4bba@G4bb5 (make-record-type-descriptor '&i/o-read G4ba5@G4ba0 'G4bb8 '#f '#f '#())) (set! G4bbc@G4bb7 '#f) (set! G4bbe@G4bb6 (make-record-constructor-descriptor G4bba@G4bb5 G4ba9@G4ba1 G4bbc@G4bb7)) (set! G4bc1@p? (record-predicate G4bba@G4bb5)) (set! G4bc3@make-i/o-read-error (record-constructor G4bbe@G4bb6)) (set! G4bc5@i/o-read-error? (condition-predicate G4bba@G4bb5)) (set! G4bc7@&i/o-read-rtd G4bba@G4bb5) (set! G4bc9@&i/o-read-rcd G4bbe@G4bb6) (set! G4bcf@G4bca (make-record-type-descriptor '&i/o-write G4ba5@G4ba0 'G4bcd '#f '#f '#())) (set! G4bd1@G4bcc '#f) (set! G4bd3@G4bcb (make-record-constructor-descriptor G4bcf@G4bca G4ba9@G4ba1 G4bd1@G4bcc)) (set! G4bd6@p? (record-predicate G4bcf@G4bca)) (set! G4bd8@make-i/o-write-error (record-constructor G4bd3@G4bcb)) (set! G4bda@i/o-write-error? (condition-predicate G4bcf@G4bca)) (set! G4bdc@&i/o-write-rtd G4bcf@G4bca) (set! G4bde@&i/o-write-rcd G4bd3@G4bcb) (set! G4be5@G4be0 (make-record-type-descriptor '&i/o-invalid-position G4ba5@G4ba0 'G4be3 '#f '#f '#((immutable position)))) (set! G4be7@G4be2 '#f) (set! G4be9@G4be1 (make-record-constructor-descriptor G4be5@G4be0 G4ba9@G4ba1 G4be7@G4be2)) (set! G4bec@p? (record-predicate G4be5@G4be0)) (set! G4bee@make-i/o-invalid-position-error (record-constructor G4be9@G4be1)) (set! G4bf0@G4bdf@i/o-error-position (record-accessor G4be5@G4be0 '0)) (set! G4bf2@i/o-invalid-position-error? (condition-predicate G4be5@G4be0)) (set! G4bf4@i/o-error-position (condition-accessor G4be5@G4be0 G4bf0@G4bdf@i/o-error-position)) (set! G4bf6@&i/o-invalid-position-rtd G4be5@G4be0) (set! G4bf8@&i/o-invalid-position-rcd G4be9@G4be1) (set! G4bff@G4bfa (make-record-type-descriptor '&i/o-filename G4ba5@G4ba0 'G4bfd '#f '#f '#((immutable filename)))) (set! G4c01@G4bfc '#f) (set! G4c03@G4bfb (make-record-constructor-descriptor G4bff@G4bfa G4ba9@G4ba1 G4c01@G4bfc)) (set! G4c06@p? (record-predicate G4bff@G4bfa)) (set! G4c08@make-i/o-filename-error (record-constructor G4c03@G4bfb)) (set! G4c0a@G4bf9@i/o-error-filename (record-accessor G4bff@G4bfa '0)) (set! G4c0c@i/o-filename-error? (condition-predicate G4bff@G4bfa)) (set! G4c0e@i/o-error-filename (condition-accessor G4bff@G4bfa G4c0a@G4bf9@i/o-error-filename)) (set! G4c10@&i/o-filename-rtd G4bff@G4bfa) (set! G4c12@&i/o-filename-rcd G4c03@G4bfb) (set! G4c18@G4c13 (make-record-type-descriptor '&i/o-file-protection G4bff@G4bfa 'G4c16 '#f '#f '#())) (set! G4c1a@G4c15 '#f) (set! G4c1c@G4c14 (make-record-constructor-descriptor G4c18@G4c13 G4c03@G4bfb G4c1a@G4c15)) (set! G4c1f@p? (record-predicate G4c18@G4c13)) (set! G4c21@make-i/o-file-protection-error (record-constructor G4c1c@G4c14)) (set! G4c23@i/o-file-protection-error? (condition-predicate G4c18@G4c13)) (set! G4c25@&i/o-file-protection-rtd G4c18@G4c13) (set! G4c27@&i/o-file-protection-rcd G4c1c@G4c14) (set! G4c2d@G4c28 (make-record-type-descriptor '&i/o-file-is-read-only G4c18@G4c13 'G4c2b '#f '#f '#())) (set! G4c2f@G4c2a '#f) (set! G4c31@G4c29 (make-record-constructor-descriptor G4c2d@G4c28 G4c1c@G4c14 G4c2f@G4c2a)) (set! G4c34@p? (record-predicate G4c2d@G4c28)) (set! G4c36@make-i/o-file-is-read-only-error (record-constructor G4c31@G4c29)) (set! G4c38@i/o-file-is-read-only-error? (condition-predicate G4c2d@G4c28)) (set! G4c3a@&i/o-file-is-read-only-rtd G4c2d@G4c28) (set! G4c3c@&i/o-file-is-read-only-rcd G4c31@G4c29) (set! G4c42@G4c3d (make-record-type-descriptor '&i/o-file-already-exists G4bff@G4bfa 'G4c40 '#f '#f '#())) (set! G4c44@G4c3f '#f) (set! G4c46@G4c3e (make-record-constructor-descriptor G4c42@G4c3d G4c03@G4bfb G4c44@G4c3f)) (set! G4c49@p? (record-predicate G4c42@G4c3d)) (set! G4c4b@make-i/o-file-already-exists-error (record-constructor G4c46@G4c3e)) (set! G4c4d@i/o-file-already-exists-error? (condition-predicate G4c42@G4c3d)) (set! G4c4f@&i/o-file-already-exists-rtd G4c42@G4c3d) (set! G4c51@&i/o-file-already-exists-rcd G4c46@G4c3e) (set! G4c57@G4c52 (make-record-type-descriptor '&i/o-file-does-not-exist G4bff@G4bfa 'G4c55 '#f '#f '#())) (set! G4c59@G4c54 '#f) (set! G4c5b@G4c53 (make-record-constructor-descriptor G4c57@G4c52 G4c03@G4bfb G4c59@G4c54)) (set! G4c5e@p? (record-predicate G4c57@G4c52)) (set! G4c60@make-i/o-file-does-not-exist-error (record-constructor G4c5b@G4c53)) (set! G4c62@i/o-file-does-not-exist-error? (condition-predicate G4c57@G4c52)) (set! G4c64@&i/o-file-does-not-exist-rtd G4c57@G4c52) (set! G4c66@&i/o-file-does-not-exist-rcd G4c5b@G4c53) (set! G4c6d@G4c68 (make-record-type-descriptor '&i/o-port G4ba5@G4ba0 'G4c6b '#f '#f '#((immutable port)))) (set! G4c6f@G4c6a '#f) (set! G4c71@G4c69 (make-record-constructor-descriptor G4c6d@G4c68 G4ba9@G4ba1 G4c6f@G4c6a)) (set! G4c74@p? (record-predicate G4c6d@G4c68)) (set! G4c76@make-i/o-port-error (record-constructor G4c71@G4c69)) (set! G4c78@G4c67@i/o-error-port (record-accessor G4c6d@G4c68 '0)) (set! G4c7a@i/o-port-error? (condition-predicate G4c6d@G4c68)) (set! G4c7c@i/o-error-port (condition-accessor G4c6d@G4c68 G4c78@G4c67@i/o-error-port)) (set! G4c7e@&i/o-port-rtd G4c6d@G4c68) (set! G4c80@&i/o-port-rcd G4c71@G4c69) (set! G4c86@G4c81 (make-record-type-descriptor '&i/o-decoding G4c6d@G4c68 'G4c84 '#f '#f '#())) (set! G4c88@G4c83 '#f) (set! G4c8a@G4c82 (make-record-constructor-descriptor G4c86@G4c81 G4c71@G4c69 G4c88@G4c83)) (set! G4c8d@p? (record-predicate G4c86@G4c81)) (set! G4c8f@make-i/o-decoding-error (record-constructor G4c8a@G4c82)) (set! G4c91@i/o-decoding-error? (condition-predicate G4c86@G4c81)) (set! G4c93@&i/o-decoding-rtd G4c86@G4c81) (set! G4c95@&i/o-decoding-rcd G4c8a@G4c82) (set! G4c9c@G4c97 (make-record-type-descriptor '&i/o-encoding G4c6d@G4c68 'G4c9a '#f '#f '#((immutable char)))) (set! G4c9e@G4c99 '#f) (set! G4ca0@G4c98 (make-record-constructor-descriptor G4c9c@G4c97 G4c71@G4c69 G4c9e@G4c99)) (set! G4ca3@p? (record-predicate G4c9c@G4c97)) (set! G4ca5@make-i/o-encoding-error (record-constructor G4ca0@G4c98)) (set! G4ca7@G4c96@i/o-encoding-error-char (record-accessor G4c9c@G4c97 '0)) (set! G4ca9@i/o-encoding-error? (condition-predicate G4c9c@G4c97)) (set! G4cab@i/o-encoding-error-char (condition-accessor G4c9c@G4c97 G4ca7@G4c96@i/o-encoding-error-char)) (set! G4cad@&i/o-encoding-rtd G4c9c@G4c97) (set! G4caf@&i/o-encoding-rcd G4ca0@G4c98) (set! G4cb5@G4cb0 (make-record-type-descriptor '&no-infinities G4b47@G4b42 'G4cb3 '#f '#f '#())) (set! G4cb7@G4cb2 '#f) (set! G4cb9@G4cb1 (make-record-constructor-descriptor G4cb5@G4cb0 G4b4b@G4b43 G4cb7@G4cb2)) (set! G4cbc@p? (record-predicate G4cb5@G4cb0)) (set! G4cbe@make-no-infinities-violation (record-constructor G4cb9@G4cb1)) (set! G4cc0@no-infinities-violation? (condition-predicate G4cb5@G4cb0)) (set! G4cc2@&no-infinities-rtd G4cb5@G4cb0) (set! G4cc4@&no-infinities-rcd G4cb9@G4cb1) (set! G4cca@G4cc5 (make-record-type-descriptor '&no-nans G4b47@G4b42 'G4cc8 '#f '#f '#())) (set! G4ccc@G4cc7 '#f) (set! G4cce@G4cc6 (make-record-constructor-descriptor G4cca@G4cc5 G4b4b@G4b43 G4ccc@G4cc7)) (set! G4cd1@p? (record-predicate G4cca@G4cc5)) (set! G4cd3@make-no-nans-violation (record-constructor G4cce@G4cc6)) (set! G4cd5@no-nans-violation? (condition-predicate G4cca@G4cc5)) (set! G4cd7@&no-nans-rtd G4cca@G4cc5) (set! G4cd9@&no-nans-rcd G4cce@G4cc6) (begin (set! G4dca@G4cd9@&no-nans-rcd G4cd9@&no-nans-rcd) (set! G4dc9@G4cd7@&no-nans-rtd G4cd7@&no-nans-rtd) (set! G4dc8@G4cd5@no-nans-violation? G4cd5@no-nans-violation?) (set! G4dc7@G4cd3@make-no-nans-violation G4cd3@make-no-nans-violation) (set! G4dc6@G4cd1@p? G4cd1@p?) (set! G4dc5@G4cce@G4cc6 G4cce@G4cc6) (set! G4dc4@G4ccc@G4cc7 G4ccc@G4cc7) (set! G4dc3@G4cca@G4cc5 G4cca@G4cc5) (set! G4dc2@G4cc4@&no-infinities-rcd G4cc4@&no-infinities-rcd) (set! G4dc1@G4cc2@&no-infinities-rtd G4cc2@&no-infinities-rtd) (set! G4dc0@G4cc0@no-infinities-violation? G4cc0@no-infinities-violation?) (set! G4dbf@G4cbe@make-no-infinities-violation G4cbe@make-no-infinities-violation) (set! G4dbe@G4cbc@p? G4cbc@p?) (set! G4dbd@G4cb9@G4cb1 G4cb9@G4cb1) (set! G4dbc@G4cb7@G4cb2 G4cb7@G4cb2) (set! G4dbb@G4cb5@G4cb0 G4cb5@G4cb0) (set! G4dba@G4caf@&i/o-encoding-rcd G4caf@&i/o-encoding-rcd) (set! G4db9@G4cad@&i/o-encoding-rtd G4cad@&i/o-encoding-rtd) (set! G4db8@G4cab@i/o-encoding-error-char G4cab@i/o-encoding-error-char) (set! G4db7@G4ca9@i/o-encoding-error? G4ca9@i/o-encoding-error?) (set! G4db6@G4ca7@G4c96@i/o-encoding-error-char G4ca7@G4c96@i/o-encoding-error-char) (set! G4db5@G4ca5@make-i/o-encoding-error G4ca5@make-i/o-encoding-error) (set! G4db4@G4ca3@p? G4ca3@p?) (set! G4db3@G4ca0@G4c98 G4ca0@G4c98) (set! G4db2@G4c9e@G4c99 G4c9e@G4c99) (set! G4db1@G4c9c@G4c97 G4c9c@G4c97) (set! G4db0@G4c95@&i/o-decoding-rcd G4c95@&i/o-decoding-rcd) (set! G4daf@G4c93@&i/o-decoding-rtd G4c93@&i/o-decoding-rtd) (set! G4dae@G4c91@i/o-decoding-error? G4c91@i/o-decoding-error?) (set! G4dad@G4c8f@make-i/o-decoding-error G4c8f@make-i/o-decoding-error) (set! G4dac@G4c8d@p? G4c8d@p?) (set! G4dab@G4c8a@G4c82 G4c8a@G4c82) (set! G4daa@G4c88@G4c83 G4c88@G4c83) (set! G4da9@G4c86@G4c81 G4c86@G4c81) (set! G4da8@G4c80@&i/o-port-rcd G4c80@&i/o-port-rcd) (set! G4da7@G4c7e@&i/o-port-rtd G4c7e@&i/o-port-rtd) (set! G4da6@G4c7c@i/o-error-port G4c7c@i/o-error-port) (set! G4da5@G4c7a@i/o-port-error? G4c7a@i/o-port-error?) (set! G4da4@G4c78@G4c67@i/o-error-port G4c78@G4c67@i/o-error-port) (set! G4da3@G4c76@make-i/o-port-error G4c76@make-i/o-port-error) (set! G4da2@G4c74@p? G4c74@p?) (set! G4da1@G4c71@G4c69 G4c71@G4c69) (set! G4da0@G4c6f@G4c6a G4c6f@G4c6a) (set! G4d9f@G4c6d@G4c68 G4c6d@G4c68) (set! G4d9e@G4c66@&i/o-file-does-not-exist-rcd G4c66@&i/o-file-does-not-exist-rcd) (set! G4d9d@G4c64@&i/o-file-does-not-exist-rtd G4c64@&i/o-file-does-not-exist-rtd) (set! G4d9c@G4c62@i/o-file-does-not-exist-error? G4c62@i/o-file-does-not-exist-error?) (set! G4d9b@G4c60@make-i/o-file-does-not-exist-error G4c60@make-i/o-file-does-not-exist-error) (set! G4d9a@G4c5e@p? G4c5e@p?) (set! G4d99@G4c5b@G4c53 G4c5b@G4c53) (set! G4d98@G4c59@G4c54 G4c59@G4c54) (set! G4d97@G4c57@G4c52 G4c57@G4c52) (set! G4d96@G4c51@&i/o-file-already-exists-rcd G4c51@&i/o-file-already-exists-rcd) (set! G4d95@G4c4f@&i/o-file-already-exists-rtd G4c4f@&i/o-file-already-exists-rtd) (set! G4d94@G4c4d@i/o-file-already-exists-error? G4c4d@i/o-file-already-exists-error?) (set! G4d93@G4c4b@make-i/o-file-already-exists-error G4c4b@make-i/o-file-already-exists-error) (set! G4d92@G4c49@p? G4c49@p?) (set! G4d91@G4c46@G4c3e G4c46@G4c3e) (set! G4d90@G4c44@G4c3f G4c44@G4c3f) (set! G4d8f@G4c42@G4c3d G4c42@G4c3d) (set! G4d8e@G4c3c@&i/o-file-is-read-only-rcd G4c3c@&i/o-file-is-read-only-rcd) (set! G4d8d@G4c3a@&i/o-file-is-read-only-rtd G4c3a@&i/o-file-is-read-only-rtd) (set! G4d8c@G4c38@i/o-file-is-read-only-error? G4c38@i/o-file-is-read-only-error?) (set! G4d8b@G4c36@make-i/o-file-is-read-only-error G4c36@make-i/o-file-is-read-only-error) (set! G4d8a@G4c34@p? G4c34@p?) (set! G4d89@G4c31@G4c29 G4c31@G4c29) (set! G4d88@G4c2f@G4c2a G4c2f@G4c2a) (set! G4d87@G4c2d@G4c28 G4c2d@G4c28) (set! G4d86@G4c27@&i/o-file-protection-rcd G4c27@&i/o-file-protection-rcd) (set! G4d85@G4c25@&i/o-file-protection-rtd G4c25@&i/o-file-protection-rtd) (set! G4d84@G4c23@i/o-file-protection-error? G4c23@i/o-file-protection-error?) (set! G4d83@G4c21@make-i/o-file-protection-error G4c21@make-i/o-file-protection-error) (set! G4d82@G4c1f@p? G4c1f@p?) (set! G4d81@G4c1c@G4c14 G4c1c@G4c14) (set! G4d80@G4c1a@G4c15 G4c1a@G4c15) (set! G4d7f@G4c18@G4c13 G4c18@G4c13) (set! G4d7e@G4c12@&i/o-filename-rcd G4c12@&i/o-filename-rcd) (set! G4d7d@G4c10@&i/o-filename-rtd G4c10@&i/o-filename-rtd) (set! G4d7c@G4c0e@i/o-error-filename G4c0e@i/o-error-filename) (set! G4d7b@G4c0c@i/o-filename-error? G4c0c@i/o-filename-error?) (set! G4d7a@G4c0a@G4bf9@i/o-error-filename G4c0a@G4bf9@i/o-error-filename) (set! G4d79@G4c08@make-i/o-filename-error G4c08@make-i/o-filename-error) (set! G4d78@G4c06@p? G4c06@p?) (set! G4d77@G4c03@G4bfb G4c03@G4bfb) (set! G4d76@G4c01@G4bfc G4c01@G4bfc) (set! G4d75@G4bff@G4bfa G4bff@G4bfa) (set! G4d74@G4bf8@&i/o-invalid-position-rcd G4bf8@&i/o-invalid-position-rcd) (set! G4d73@G4bf6@&i/o-invalid-position-rtd G4bf6@&i/o-invalid-position-rtd) (set! G4d72@G4bf4@i/o-error-position G4bf4@i/o-error-position) (set! G4d71@G4bf2@i/o-invalid-position-error? G4bf2@i/o-invalid-position-error?) (set! G4d70@G4bf0@G4bdf@i/o-error-position G4bf0@G4bdf@i/o-error-position) (set! G4d6f@G4bee@make-i/o-invalid-position-error G4bee@make-i/o-invalid-position-error) (set! G4d6e@G4bec@p? G4bec@p?) (set! G4d6d@G4be9@G4be1 G4be9@G4be1) (set! G4d6c@G4be7@G4be2 G4be7@G4be2) (set! G4d6b@G4be5@G4be0 G4be5@G4be0) (set! G4d6a@G4bde@&i/o-write-rcd G4bde@&i/o-write-rcd) (set! G4d69@G4bdc@&i/o-write-rtd G4bdc@&i/o-write-rtd) (set! G4d68@G4bda@i/o-write-error? G4bda@i/o-write-error?) (set! G4d67@G4bd8@make-i/o-write-error G4bd8@make-i/o-write-error) (set! G4d66@G4bd6@p? G4bd6@p?) (set! G4d65@G4bd3@G4bcb G4bd3@G4bcb) (set! G4d64@G4bd1@G4bcc G4bd1@G4bcc) (set! G4d63@G4bcf@G4bca G4bcf@G4bca) (set! G4d62@G4bc9@&i/o-read-rcd G4bc9@&i/o-read-rcd) (set! G4d61@G4bc7@&i/o-read-rtd G4bc7@&i/o-read-rtd) (set! G4d60@G4bc5@i/o-read-error? G4bc5@i/o-read-error?) (set! G4d5f@G4bc3@make-i/o-read-error G4bc3@make-i/o-read-error) (set! G4d5e@G4bc1@p? G4bc1@p?) (set! G4d5d@G4bbe@G4bb6 G4bbe@G4bb6) (set! G4d5c@G4bbc@G4bb7 G4bbc@G4bb7) (set! G4d5b@G4bba@G4bb5 G4bba@G4bb5) (set! G4d5a@G4bb4@&i/o-rcd G4bb4@&i/o-rcd) (set! G4d59@G4bb2@&i/o-rtd G4bb2@&i/o-rtd) (set! G4d58@G4bb0@i/o-error? G4bb0@i/o-error?) (set! G4d57@G4bae@make-i/o-error G4bae@make-i/o-error) (set! G4d56@G4bac@p? G4bac@p?) (set! G4d55@G4ba9@G4ba1 G4ba9@G4ba1) (set! G4d54@G4ba7@G4ba2 G4ba7@G4ba2) (set! G4d53@G4ba5@G4ba0 G4ba5@G4ba0) (set! G4d52@G4b9f@&undefined-rcd G4b9f@&undefined-rcd) (set! G4d51@G4b9d@&undefined-rtd G4b9d@&undefined-rtd) (set! G4d50@G4b9b@undefined-violation? G4b9b@undefined-violation?) (set! G4d4f@G4b99@make-undefined-violation G4b99@make-undefined-violation) (set! G4d4e@G4b97@p? G4b97@p?) (set! G4d4d@G4b94@G4b8c G4b94@G4b8c) (set! G4d4c@G4b92@G4b8d G4b92@G4b8d) (set! G4d4b@G4b90@G4b8b G4b90@G4b8b) (set! G4d4a@G4b8a@&syntax-rcd G4b8a@&syntax-rcd) (set! G4d49@G4b88@&syntax-rtd G4b88@&syntax-rtd) (set! G4d48@G4b86@syntax-violation-subform G4b86@syntax-violation-subform) (set! G4d47@G4b84@syntax-violation-form G4b84@syntax-violation-form) (set! G4d46@G4b82@syntax-violation? G4b82@syntax-violation?) (set! G4d45@G4b80@G4b6d@syntax-violation-subform G4b80@G4b6d@syntax-violation-subform) (set! G4d44@G4b7e@G4b6c@syntax-violation-form G4b7e@G4b6c@syntax-violation-form) (set! G4d43@G4b7c@make-syntax-violation G4b7c@make-syntax-violation) (set! G4d42@G4b7a@p? G4b7a@p?) (set! G4d41@G4b77@G4b6f G4b77@G4b6f) (set! G4d40@G4b75@G4b70 G4b75@G4b70) (set! G4d3f@G4b73@G4b6e G4b73@G4b6e) (set! G4d3e@G4b6b@&lexical-rcd G4b6b@&lexical-rcd) (set! G4d3d@G4b69@&lexical-rtd G4b69@&lexical-rtd) (set! G4d3c@G4b67@lexical-violation? G4b67@lexical-violation?) (set! G4d3b@G4b65@make-lexical-violation G4b65@make-lexical-violation) (set! G4d3a@G4b63@p? G4b63@p?) (set! G4d39@G4b60@G4b58 G4b60@G4b58) (set! G4d38@G4b5e@G4b59 G4b5e@G4b59) (set! G4d37@G4b5c@G4b57 G4b5c@G4b57) (set! G4d36@G4b56@&implementation-restriction-rcd G4b56@&implementation-restriction-rcd) (set! G4d35@G4b54@&implementation-restriction-rtd G4b54@&implementation-restriction-rtd) (set! G4d34@G4b52@implementation-restriction-violation? G4b52@implementation-restriction-violation?) (set! G4d33@G4b50@make-implementation-restriction-violation G4b50@make-implementation-restriction-violation) (set! G4d32@G4b4e@p? G4b4e@p?) (set! G4d31@G4b4b@G4b43 G4b4b@G4b43) (set! G4d30@G4b49@G4b44 G4b49@G4b44) (set! G4d2f@G4b47@G4b42 G4b47@G4b42) (set! G4d2e@G4b41@&non-continuable-rcd G4b41@&non-continuable-rcd) (set! G4d2d@G4b3f@&non-continuable-rtd G4b3f@&non-continuable-rtd) (set! G4d2c@G4b3d@non-continuable-violation? G4b3d@non-continuable-violation?) (set! G4d2b@G4b3b@make-non-continuable-violation G4b3b@make-non-continuable-violation) (set! G4d2a@G4b39@p? G4b39@p?) (set! G4d29@G4b36@G4b2e G4b36@G4b2e) (set! G4d28@G4b34@G4b2f G4b34@G4b2f) (set! G4d27@G4b32@G4b2d G4b32@G4b2d) (set! G4d26@G4b2c@&who-rcd G4b2c@&who-rcd) (set! G4d25@G4b2a@&who-rtd G4b2a@&who-rtd) (set! G4d24@G4b28@condition-who G4b28@condition-who) (set! G4d23@G4b26@who-condition? G4b26@who-condition?) (set! G4d22@G4b24@G4b13@condition-who G4b24@G4b13@condition-who) (set! G4d21@G4b22@make-who-condition G4b22@make-who-condition) (set! G4d20@G4b20@p? G4b20@p?) (set! G4d1f@G4b1d@G4b15 G4b1d@G4b15) (set! G4d1e@G4b1b@G4b16 G4b1b@G4b16) (set! G4d1d@G4b19@G4b14 G4b19@G4b14) (set! G4d1c@G4b12@&irritants-rcd G4b12@&irritants-rcd) (set! G4d1b@G4b10@&irritants-rtd G4b10@&irritants-rtd) (set! G4d1a@G4b0e@condition-irritants G4b0e@condition-irritants) (set! G4d19@G4b0c@irritants-condition? G4b0c@irritants-condition?) (set! G4d18@G4b0a@G4af9@condition-irritants G4b0a@G4af9@condition-irritants) (set! G4d17@G4b08@make-irritants-condition G4b08@make-irritants-condition) (set! G4d16@G4b06@p? G4b06@p?) (set! G4d15@G4b03@G4afb G4b03@G4afb) (set! G4d14@G4b01@G4afc G4b01@G4afc) (set! G4d13@G4aff@G4afa G4aff@G4afa) (set! G4d12@G4af8@&assertion-rcd G4af8@&assertion-rcd) (set! G4d11@G4af6@&assertion-rtd G4af6@&assertion-rtd) (set! G4d10@G4af4@assertion-violation? G4af4@assertion-violation?) (set! G4d0f@G4af2@make-assertion-violation G4af2@make-assertion-violation) (set! G4d0e@G4af0@p? G4af0@p?) (set! G4d0d@G4aed@G4ae5 G4aed@G4ae5) (set! G4d0c@G4aeb@G4ae6 G4aeb@G4ae6) (set! G4d0b@G4ae9@G4ae4 G4ae9@G4ae4) (set! G4d0a@G4ae3@&violation-rcd G4ae3@&violation-rcd) (set! G4d09@G4ae1@&violation-rtd G4ae1@&violation-rtd) (set! G4d08@G4adf@violation? G4adf@violation?) (set! G4d07@G4add@make-violation G4add@make-violation) (set! G4d06@G4adb@p? G4adb@p?) (set! G4d05@G4ad8@G4ad0 G4ad8@G4ad0) (set! G4d04@G4ad6@G4ad1 G4ad6@G4ad1) (set! G4d03@G4ad4@G4acf G4ad4@G4acf) (set! G4d02@G4ace@&error-rcd G4ace@&error-rcd) (set! G4d01@G4acc@&error-rtd G4acc@&error-rtd) (set! G4d00@G4aca@error? G4aca@error?) (set! G4cff@G4ac8@make-error G4ac8@make-error) (set! G4cfe@G4ac6@p? G4ac6@p?) (set! G4cfd@G4ac3@G4abb G4ac3@G4abb) (set! G4cfc@G4ac1@G4abc G4ac1@G4abc) (set! G4cfb@G4abf@G4aba G4abf@G4aba) (set! G4cfa@G4ab9@&serious-rcd G4ab9@&serious-rcd) (set! G4cf9@G4ab7@&serious-rtd G4ab7@&serious-rtd) (set! G4cf8@G4ab5@serious-condition? G4ab5@serious-condition?) (set! G4cf7@G4ab3@make-serious-condition G4ab3@make-serious-condition) (set! G4cf6@G4ab1@p? G4ab1@p?) (set! G4cf5@G4aae@G4aa6 G4aae@G4aa6) (set! G4cf4@G4aac@G4aa7 G4aac@G4aa7) (set! G4cf3@G4aaa@G4aa5 G4aaa@G4aa5) (set! G4cf2@G4aa4@&warning-rcd G4aa4@&warning-rcd) (set! G4cf1@G4aa2@&warning-rtd G4aa2@&warning-rtd) (set! G4cf0@G4aa0@warning? G4aa0@warning?) (set! G4cef@G4a9e@make-warning G4a9e@make-warning) (set! G4cee@G4a9c@p? G4a9c@p?) (set! G4ced@G4a99@G4a91 G4a99@G4a91) (set! G4cec@G4a97@G4a92 G4a97@G4a92) (set! G4ceb@G4a95@G4a90 G4a95@G4a90) (set! G4cea@G4a8f@&message-rcd G4a8f@&message-rcd) (set! G4ce9@G4a8d@&message-rtd G4a8d@&message-rtd) (set! G4ce8@G4a8b@condition-message G4a8b@condition-message) (set! G4ce7@G4a89@message-condition? G4a89@message-condition?) (set! G4ce6@G4a87@G4a76@condition-message G4a87@G4a76@condition-message) (set! G4ce5@G4a85@make-message-condition G4a85@make-message-condition) (set! G4ce4@G4a83@p? G4a83@p?) (set! G4ce3@G4a80@G4a78 G4a80@G4a78) (set! G4ce2@G4a7e@G4a79 G4a7e@G4a79) (set! G4ce1@G4a7c@G4a77 G4a7c@G4a77) (set! G4ce0@G4a32@&condition-rcd G4a32@&condition-rcd) (set! G4cdf@G4a30@&condition-rtd G4a30@&condition-rtd) (set! G4cde@G4a2e@make-&condition G4a2e@make-&condition) (set! G4cdd@G4a2c@&condition? G4a2c@&condition?) (set! G4cdc@G4a29@G4a21 G4a29@G4a21) (set! G4cdb@G4a27@G4a22 G4a27@G4a22) (set! G4cda@G4a25@G4a20 G4a25@G4a20)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
(begin (G29fc@G29b1@current-primitive-locations (lambda (G516b@x) ((lambda (G516d@t) (if G516d@t (cdr G516d@t) '#f)) (assq G516b@x '((&no-nans-rcd . G4dca@G4cd9@&no-nans-rcd) (&no-nans-rtd . G4dc9@G4cd7@&no-nans-rtd) (&no-infinities-rcd . G4dc2@G4cc4@&no-infinities-rcd) (&no-infinities-rtd . G4dc1@G4cc2@&no-infinities-rtd) (&i/o-encoding-rcd . G4dba@G4caf@&i/o-encoding-rcd) (&i/o-encoding-rtd . G4db9@G4cad@&i/o-encoding-rtd) (&i/o-decoding-rcd . G4db0@G4c95@&i/o-decoding-rcd) (&i/o-decoding-rtd . G4daf@G4c93@&i/o-decoding-rtd) (&i/o-port-rcd . G4da8@G4c80@&i/o-port-rcd) (&i/o-port-rtd . G4da7@G4c7e@&i/o-port-rtd) (&i/o-file-does-not-exist-rcd . G4d9e@G4c66@&i/o-file-does-not-exist-rcd) (&i/o-file-does-not-exist-rtd . G4d9d@G4c64@&i/o-file-does-not-exist-rtd) (&i/o-file-already-exists-rcd . G4d96@G4c51@&i/o-file-already-exists-rcd) (&i/o-file-already-exists-rtd . G4d95@G4c4f@&i/o-file-already-exists-rtd) (&i/o-file-is-read-only-rcd . G4d8e@G4c3c@&i/o-file-is-read-only-rcd) (&i/o-file-is-read-only-rtd . G4d8d@G4c3a@&i/o-file-is-read-only-rtd) (&i/o-file-protection-rcd . G4d86@G4c27@&i/o-file-protection-rcd) (&i/o-file-protection-rtd . G4d85@G4c25@&i/o-file-protection-rtd) (&i/o-filename-rcd . G4d7e@G4c12@&i/o-filename-rcd) (&i/o-filename-rtd . G4d7d@G4c10@&i/o-filename-rtd) (&i/o-invalid-position-rcd . G4d74@G4bf8@&i/o-invalid-position-rcd) (&i/o-invalid-position-rtd . G4d73@G4bf6@&i/o-invalid-position-rtd) (&i/o-write-rcd . G4d6a@G4bde@&i/o-write-rcd) (&i/o-write-rtd . G4d69@G4bdc@&i/o-write-rtd) (&i/o-read-rcd . G4d62@G4bc9@&i/o-read-rcd) (&i/o-read-rtd . G4d61@G4bc7@&i/o-read-rtd) (&i/o-rcd . G4d5a@G4bb4@&i/o-rcd) (&i/o-rtd . G4d59@G4bb2@&i/o-rtd) (&undefined-rcd . G4d52@G4b9f@&undefined-rcd) (&undefined-rtd . G4d51@G4b9d@&undefined-rtd) (&syntax-rcd . G4d4a@G4b8a@&syntax-rcd) (&syntax-rtd . G4d49@G4b88@&syntax-rtd) (&lexical-rcd . G4d3e@G4b6b@&lexical-rcd) (&lexical-rtd . G4d3d@G4b69@&lexical-rtd) (&implementation-restriction-rcd . G4d36@G4b56@&implementation-restriction-rcd) (&implementation-restriction-rtd . G4d35@G4b54@&implementation-restriction-rtd) (&non-continuable-rcd . G4d2e@G4b41@&non-continuable-rcd) (&non-continuable-rtd . G4d2d@G4b3f@&non-continuable-rtd) (&who-rcd . G4d26@G4b2c@&who-rcd) (&who-rtd . G4d25@G4b2a@&who-rtd) (&irritants-rcd . G4d1c@G4b12@&irritants-rcd) (&irritants-rtd . G4d1b@G4b10@&irritants-rtd) (&assertion-rcd . G4d12@G4af8@&assertion-rcd) (&assertion-rtd . G4d11@G4af6@&assertion-rtd) (&violation-rcd . G4d0a@G4ae3@&violation-rcd) (&violation-rtd . G4d09@G4ae1@&violation-rtd) (&error-rcd . G4d02@G4ace@&error-rcd) (&error-rtd . G4d01@G4acc@&error-rtd) (&serious-rcd . G4cfa@G4ab9@&serious-rcd) (&serious-rtd . G4cf9@G4ab7@&serious-rtd) (&warning-rcd . G4cf2@G4aa4@&warning-rcd) (&warning-rtd . G4cf1@G4aa2@&warning-rtd) (&message-rcd . G4cea@G4a8f@&message-rcd) (&message-rtd . G4ce9@G4a8d@&message-rtd) (&condition-rcd . G4ce0@G4a32@&condition-rcd) (&condition-rtd . G4cdf@G4a30@&condition-rtd) (syntax-error . G4a11@G30f5@syntax-error) (syntax-dispatch . G49a5@G300e@syntax-dispatch) (load . G4e68@G4dda@load) (interaction-environment . G4a1a@G3107@interaction-environment) (make-parameter . G29ab@G28e4@make-parameter) (make-variable-transformer . G4963@G2e49@make-variable-transformer) (identifier? . G4a15@G30fd@identifier?) (generate-temporaries . G4a0a@G30e7@generate-temporaries) (free-identifier=? . G4a0b@G30e9@free-identifier=?) (syntax->datum . G4a17@G3101@syntax->datum) (datum->syntax . G4a16@G30ff@datum->syntax) (bound-identifier=? . G4a0c@G30eb@bound-identifier=?) (make-i/o-write-error . G4d67@G4bd8@make-i/o-write-error) (make-i/o-read-error . G4d5f@G4bc3@make-i/o-read-error) (make-i/o-port-error . G4da3@G4c76@make-i/o-port-error) (make-i/o-invalid-position-error . G4d6f@G4bee@make-i/o-invalid-position-error) (make-i/o-filename-error . G4d79@G4c08@make-i/o-filename-error) (make-i/o-file-protection-error . G4d83@G4c21@make-i/o-file-protection-error) (make-i/o-file-is-read-only-error . G4d8b@G4c36@make-i/o-file-is-read-only-error) (make-i/o-file-does-not-exist-error . G4d9b@G4c60@make-i/o-file-does-not-exist-error) (make-i/o-file-already-exists-error . G4d93@G4c4b@make-i/o-file-already-exists-error) (make-i/o-error . G4d57@G4bae@make-i/o-error) (make-i/o-encoding-error . G4db5@G4ca5@make-i/o-encoding-error) (make-i/o-decoding-error . G4dad@G4c8f@make-i/o-decoding-error) (i/o-write-error? . G4d68@G4bda@i/o-write-error?) (i/o-read-error? . G4d60@G4bc5@i/o-read-error?) (i/o-port-error? . G4da5@G4c7a@i/o-port-error?) (i/o-invalid-position-error? . G4d71@G4bf2@i/o-invalid-position-error?) (i/o-filename-error? . G4d7b@G4c0c@i/o-filename-error?) (i/o-file-protection-error? . G4d84@G4c23@i/o-file-protection-error?) (i/o-file-is-read-only-error? . G4d8c@G4c38@i/o-file-is-read-only-error?) (i/o-file-does-not-exist-error? . G4d9c@G4c62@i/o-file-does-not-exist-error?) (i/o-file-already-exists-error? . G4d94@G4c4d@i/o-file-already-exists-error?) (i/o-error? . G4d58@G4bb0@i/o-error?) (i/o-error-port . G4da6@G4c7c@i/o-error-port) (i/o-error-filename . G4d7c@G4c0e@i/o-error-filename) (i/o-encoding-error? . G4db7@G4ca9@i/o-encoding-error?) (i/o-encoding-error-char . G4db8@G4cab@i/o-encoding-error-char) (i/o-decoding-error? . G4dae@G4c91@i/o-decoding-error?) (scheme-report-environment . G4a01@G30d5@scheme-report-environment) (null-environment . G4a00@G30d3@null-environment) (command-line . G4e65@G4dd4@command-line) (eval . G4a03@G30d9@eval) (environment . G49ff@G30d1@environment) (who-condition? . G4d23@G4b26@who-condition?) (warning? . G4cf0@G4aa0@warning?) (violation? . G4d08@G4adf@violation?) (undefined-violation? . G4d50@G4b9b@undefined-violation?) (syntax-violation? . G4d46@G4b82@syntax-violation?) (syntax-violation-subform . G4d48@G4b86@syntax-violation-subform) (syntax-violation-form . G4d47@G4b84@syntax-violation-form) (syntax-violation . G4a14@G30fb@syntax-violation) (serious-condition? . G4cf8@G4ab5@serious-condition?) (non-continuable-violation? . G4d2c@G4b3d@non-continuable-violation?) (message-condition? . G4ce7@G4a89@message-condition?) (make-who-condition . G4d21@G4b22@make-who-condition) (make-warning . G4cef@G4a9e@make-warning) (make-violation . G4d07@G4add@make-violation) (make-undefined-violation . G4d4f@G4b99@make-undefined-violation) (make-syntax-violation . G4d43@G4b7c@make-syntax-violation) (make-serious-condition . G4cf7@G4ab3@make-serious-condition) (make-non-continuable-violation . G4d2b@G4b3b@make-non-continuable-violation) (make-message-condition . G4ce5@G4a85@make-message-condition) (make-lexical-violation . G4d3b@G4b65@make-lexical-violation) (make-irritants-condition . G4d17@G4b08@make-irritants-condition) (make-implementation-restriction-violation . G4d33@G4b50@make-implementation-restriction-violation) (make-error . G4cff@G4ac8@make-error) (make-assertion-violation . G4d0f@G4af2@make-assertion-violation) (lexical-violation? . G4d3c@G4b67@lexical-violation?) (irritants-condition? . G4d19@G4b0c@irritants-condition?) (implementation-restriction-violation? . G4d34@G4b52@implementation-restriction-violation?) (error? . G4d00@G4aca@error?) (condition-who . G4d24@G4b28@condition-who) (condition-message . G4ce8@G4a8b@condition-message) (condition-irritants . G4d1a@G4b0e@condition-irritants) (assertion-violation? . G4d10@G4af4@assertion-violation?) (no-nans-violation? . G4dc8@G4cd5@no-nans-violation?) (no-infinities-violation? . G4dc0@G4cc0@no-infinities-violation?) (make-no-nans-violation . G4dc7@G4cd3@make-no-nans-violation) (make-no-infinities-violation . G4dbf@G4cbe@make-no-infinities-violation)))))) (G2c24@G2ac9@install-library 'G513e '(mosh interaction) '() '() '() '() '((string-upcase . G50f0) (string-titlecase . G50ef) (string-normalize-nfkd . G50ee) (string-normalize-nfkc . G50ed) (string-normalize-nfd . G50ec) (string-normalize-nfc . G50eb) (string-foldcase . G50ea) (string-downcase . G50e9) (string-ci>? . G50e8) (string-ci>=? . G50e7) (string-ci=? . G50e6) (string-ci<? . G50e5) (string-ci<=? . G50e4) (char-whitespace? . G50e3) (char-upper-case? . G50e2) (char-title-case? . G50e1) (char-numeric? . G50e0) (char-lower-case? . G50df) (char-general-category . G50de) (char-upcase . G50dd) (char-titlecase . G50dc) (char-foldcase . G50db) (char-downcase . G50da) (char-ci>? . G50d9) (char-ci>=? . G50d8) (char-ci=? . G50d7) (char-ci<? . G50d6) (char-ci<=? . G50d5) (char-alphabetic? . G50d4) (make-variable-transformer . G2e48) (identifier? . G30fc) (generate-temporaries . G30e6) (free-identifier=? . G30e8) (syntax->datum . G3100) (datum->syntax . G30fe) (bound-identifier=? . G30ea) (record-type-descriptor? . G50d3) (record-predicate . G50d2) (record-mutator . G50d1) (record-constructor . G50d0) (record-accessor . G50cf) (make-record-type-descriptor . G50ce) (make-record-constructor-descriptor . G50cd) (record? . G50cc) (record-type-uid . G50cb) (record-type-sealed? . G50ca) (record-type-parent . G50c9) (record-type-opaque? . G50c8) (record-type-name . G50c7) (record-type-generative? . G50c6) (record-type-field-names . G50c5) (record-rtd . G50c4) (record-field-mutable? . G50c3) (delete-file . G50c2) (file-exists? . G50c1) (vector-sort! . G50c0) (vector-sort . G50bf) (list-sort . G50be) (symbol-hash . G50bd) (string-ci-hash . G50bc) (string-hash . G50bb) (equal-hash . G50ba) (hashtable-equivalence-function . G50b9) (make-hashtable . G50b8) (hashtable-hash-function . G50b7) (make-eqv-hashtable . G50b6) (make-eq-hashtable . G50b5) (hashtable? . G50b4) (hashtable-update! . G50b3) (hashtable-size . G50b2) (hashtable-set! . G50b1) (hashtable-ref . G50b0) (hashtable-mutable? . G50af) (hashtable-keys . G50ae) (hashtable-entries . G50ad) (hashtable-delete! . G50ac) (hashtable-copy . G50ab) (hashtable-contains? . G50aa) (hashtable-clear! . G50a9) (call-with-output-file . G50a8) (call-with-input-file . G50a7) (write-char . G50a6) (write . G50a5) (with-output-to-file . G50a4) (with-input-from-file . G50a3) (read-char . G50a2) (read . G50a1) (peek-char . G50a0) (open-output-file . G509f) (open-input-file . G509e) (newline . G509d) (display . G509c) (close-output-port . G509b) (close-input-port . G509a) (eof-object? . G5099) (eof-object . G5098) (current-error-port . G5097) (current-output-port . G5096) (current-input-port . G5095) (output-port? . G5094) (input-port? . G5093) (utf-8-codec . G5092) (utf-16-codec . G5091) (transcoder-error-handling-mode . G5090) (transcoder-eol-style . G508f) (transcoder-codec . G508e) (transcoded-port . G508d) (textual-port? . G508c) (string->bytevector . G508b) (standard-output-port . G508a) (standard-input-port . G5089) (standard-error-port . G5088) (set-port-position! . G5087) (put-u8 . G5086) (put-string . G5085) (put-datum . G5084) (put-char . G5083) (put-bytevector . G5082) (port? . G5081) (port-transcoder . G5080) (port-position . G507f) (port-has-set-port-position!? . G507e) (port-has-port-position? . G507d) (port-eof? . G507c) (output-port-buffer-mode . G507b) (open-string-output-port . G507a) (open-string-input-port . G5079) (open-file-output-port . G5078) (open-file-input/output-port . G5077) (open-file-input-port . G5076) (open-bytevector-output-port . G5075) (open-bytevector-input-port . G5074) (native-transcoder . G5073) (native-eol-style . G5072) (make-transcoder . G5071) (latin-1-codec . G5070) (make-i/o-write-error . G4bd7) (make-i/o-read-error . G4bc2) (make-i/o-port-error . G4c75) (make-i/o-invalid-position-error . G4bed) (make-i/o-filename-error . G4c07) (make-i/o-file-protection-error . G4c20) (make-i/o-file-is-read-only-error . G4c35) (make-i/o-file-does-not-exist-error . G4c5f) (make-i/o-file-already-exists-error . G4c4a) (make-i/o-error . G4bad) (make-i/o-encoding-error . G4ca4) (make-i/o-decoding-error . G4c8e) (make-custom-textual-output-port . G506f) (make-custom-textual-input/output-port . G506e) (make-custom-textual-input-port . G506d) (make-custom-binary-output-port . G506c) (make-custom-binary-input/output-port . G506b) (make-custom-binary-input-port . G506a) (make-bytevector . G5069) (lookahead-u8 . G5068) (lookahead-char . G5067) (i/o-write-error? . G4bd9) (i/o-read-error? . G4bc4) (i/o-port-error? . G4c79) (i/o-invalid-position-error? . G4bf1) (i/o-filename-error? . G4c0b) (i/o-file-protection-error? . G4c22) (i/o-file-is-read-only-error? . G4c37) (i/o-file-does-not-exist-error? . G4c61) (i/o-file-already-exists-error? . G4c4c) (i/o-error? . G4baf) (i/o-error-port . G4c7b) (i/o-error-filename . G4c0d) (i/o-encoding-error? . G4ca8) (i/o-encoding-error-char . G4caa) (i/o-decoding-error? . G4c90) (get-u8 . G5066) (get-string-n! . G5065) (get-string-n . G5064) (get-string-all . G5063) (get-line . G5062) (get-datum . G5061) (get-char . G5060) (get-bytevector-some . G505f) (get-bytevector-n! . G505e) (get-bytevector-n . G505d) (get-bytevector-all . G505c) (flush-output-port . G505b) (close-port . G505a) (exit . G5052) (command-line . G4dd3) (string-fill! . G5051) (string-set! . G5050) (set-cdr! . G504f) (set-car! . G504e) (remove . G504d) (remv . G504c) (remp . G504b) (remq . G504a) (partition . G5049) (memv . G5048) (memq . G5047) (memp . G5046) (member . G5045) (exists . G5044) (for-all . G5043) (fold-right . G5042) (fold-left . G5041) (find . G5040) (filter . G503f) (cons* . G503e) (assv . G503d) (assq . G503c) (assp . G503b) (assoc . G503a) (call-with-string-output-port . G5039) (call-with-port . G5038) (call-with-bytevector-output-port . G5037) (bytevector->string . G5036) (buffer-mode? . G5035) (binary-port? . G5034) (with-exception-handler . G5033) (raise-continuable . G5032) (raise . G5031) (eval . G30d8) (environment . G30d0) (make-enumeration . G5030) (enum-set=? . G502f) (enum-set-universe . G502e) (enum-set-union . G502d) (enum-set-subset? . G502c) (enum-set-projection . G502b) (enum-set-member? . G502a) (enum-set-intersection . G5029) (enum-set-indexer . G5028) (enum-set-difference . G5027) (enum-set-constructor . G5026) (enum-set-complement . G5025) (enum-set->list . G5024) (who-condition? . G4b25) (warning? . G4a9f) (violation? . G4ade) (undefined-violation? . G4b9a) (syntax-violation? . G4b81) (syntax-violation-subform . G4b85) (syntax-violation-form . G4b83) (syntax-violation . G30fa) (simple-conditions . G5023) (serious-condition? . G4ab4) (non-continuable-violation? . G4b3c) (message-condition? . G4a88) (make-who-condition . G4b21) (make-warning . G4a9d) (make-violation . G4adc) (make-undefined-violation . G4b98) (make-syntax-violation . G4b7b) (make-serious-condition . G4ab2) (make-non-continuable-violation . G4b3a) (make-message-condition . G4a84) (make-lexical-violation . G4b64) (make-irritants-condition . G4b07) (make-implementation-restriction-violation . G4b4f) (make-error . G4ac7) (make-assertion-violation . G4af1) (lexical-violation? . G4b66) (irritants-condition? . G4b0b) (implementation-restriction-violation? . G4b51) (error? . G4ac9) (condition-who . G4b27) (condition-predicate . G5022) (condition-message . G4a8a) (condition-irritants . G4b0d) (condition-accessor . G5021) (condition . G5020) (assertion-violation? . G4af3) (condition? . G501f) (utf32->string . G501e) (utf16->string . G501d) (utf8->string . G501c) (uint-list->bytevector . G501b) (u8-list->bytevector . G501a) (string->utf8 . G5019) (string->utf32 . G5018) (string->utf16 . G5017) (sint-list->bytevector . G5016) (native-endianness . G5015) (bytevector? . G5014) (bytevector=? . G5013) (bytevector-uint-set! . G5012) (bytevector-uint-ref . G5011) (bytevector-u8-set! . G5010) (bytevector-u8-ref . G500f) (bytevector-u64-set! . G500e) (bytevector-u64-ref . G500d) (bytevector-u64-native-set! . G500c) (bytevector-u64-native-ref . G500b) (bytevector-u32-set! . G500a) (bytevector-u32-ref . G5009) (bytevector-u32-native-set! . G5008) (bytevector-u32-native-ref . G5007) (bytevector-u16-set! . G5006) (bytevector-u16-ref . G5005) (bytevector-u16-native-set! . G5004) (bytevector-u16-native-ref . G5003) (bytevector-sint-set! . G5002) (bytevector-sint-ref . G5001) (bytevector-s8-set! . G5000) (bytevector-s8-ref . G4fff) (bytevector-s64-set! . G4ffe) (bytevector-s64-ref . G4ffd) (bytevector-s64-native-set! . G4ffc) (bytevector-s64-native-ref . G4ffb) (bytevector-s32-set! . G4ffa) (bytevector-s32-ref . G4ff9) (bytevector-s32-native-set! . G4ff8) (bytevector-s32-native-ref . G4ff7) (bytevector-s16-set! . G4ff6) (bytevector-s16-ref . G4ff5) (bytevector-s16-native-set! . G4ff4) (bytevector-s16-native-ref . G4ff3) (bytevector-length . G4ff2) (bytevector-ieee-single-ref . G4ff1) (bytevector-ieee-single-set! . G4ff0) (bytevector-ieee-single-native-set! . G4fef) (bytevector-ieee-single-native-ref . G4fee) (bytevector-ieee-double-set! . G4fed) (bytevector-ieee-double-ref . G4fec) (bytevector-ieee-double-native-set! . G4feb) (bytevector-ieee-double-native-ref . G4fea) (bytevector-fill! . G4fe9) (bytevector-copy! . G4fe8) (bytevector-copy . G4fe7) (bytevector->uint-list . G4fe6) (bytevector->u8-list . G4fe5) (bytevector->sint-list . G4fe4) (no-nans-violation? . G4cd4) (no-infinities-violation? . G4cbf) (make-no-nans-violation . G4cd2) (make-no-infinities-violation . G4cbd) (real->flonum . G4fe3) (flzero? . G4fe2) (fltruncate . G4fe1) (fltan . G4fe0) (flsqrt . G4fdf) (flsin . G4fde) (flround . G4fdd) (flpositive? . G4fdc) (flonum? . G4fdb) (flodd? . G4fda) (flnumerator . G4fd9) (flnegative? . G4fd8) (flnan? . G4fd7) (flmod0 . G4fd6) (flmod . G4fd5) (flmin . G4fd4) (flmax . G4fd3) (fllog . G4fd2) (flinteger? . G4fd1) (flinfinite? . G4fd0) (flfloor . G4fcf) (flfinite? . G4fce) (flexpt . G4fcd) (flexp . G4fcc) (fleven? . G4fcb) (fldiv0-and-mod0 . G4fca) (fldiv0 . G4fc9) (fldiv-and-mod . G4fc8) (fldiv . G4fc7) (fldenominator . G4fc6) (flcos . G4fc5) (flceiling . G4fc4) (flatan . G4fc3) (flasin . G4fc2) (flacos . G4fc1) (flabs . G4fc0) (fl>? . G4fbf) (fl>=? . G4fbe) (fl=? . G4fbd) (fl<? . G4fbc) (fl<=? . G4fbb) (fl/ . G4fba) (fl- . G4fb9) (fl+ . G4fb8) (fl* . G4fb7) (fixnum->flonum . G4fb6) (fxzero? . G4fb5) (fxxor . G4fb4) (fxrotate-bit-field . G4fb3) (fxreverse-bit-field . G4fb2) (fxpositive? . G4fb1) (fxodd? . G4fb0) (fxnot . G4faf) (fxnegative? . G4fae) (fxmod0 . G4fad) (fxmod . G4fac) (fxmin . G4fab) (fxmax . G4faa) (fxlength . G4fa9) (fxior . G4fa8) (fxif . G4fa7) (fxfirst-bit-set . G4fa6) (fxeven? . G4fa5) (fxdiv0-and-mod0 . G4fa4) (fxdiv0 . G4fa3) (fxdiv-and-mod . G4fa2) (fxdiv . G4fa1) (fxcopy-bit-field . G4fa0) (fxcopy-bit . G4f9f) (fxbit-set? . G4f9e) (fxbit-field . G4f9d) (fxbit-count . G4f9c) (fxarithmetic-shift-right . G4f9b) (fxarithmetic-shift-left . G4f9a) (fxarithmetic-shift . G4f99) (fxand . G4f98) (fx>? . G4f97) (fx>=? . G4f96) (fx=? . G4f95) (fx<? . G4f94) (fx<=? . G4f93) (fx-/carry . G4f92) (fx- . G4f91) (fx+/carry . G4f90) (fx+ . G4f8f) (fx*/carry . G4f8e) (fx* . G4f8d) (greatest-fixnum . G4f8c) (least-fixnum . G4f8b) (fixnum-width . G4f8a) (fixnum? . G4f89) (bitwise-rotate-bit-field . G4f88) (bitwise-reverse-bit-field . G4f87) (bitwise-length . G4f86) (bitwise-if . G4f85) (bitwise-first-bit-set . G4f84) (bitwise-copy-bit-field . G4f83) (bitwise-copy-bit . G4f82) (bitwise-bit-set? . G4f81) (bitwise-bit-field . G4f80) (bitwise-bit-count . G4f7f) (bitwise-xor . G4f7e) (bitwise-ior . G4f7d) (bitwise-and . G4f7c) (bitwise-not . G4f7b) (bitwise-arithmetic-shift-right . G4f7a) (bitwise-arithmetic-shift-left . G4f79) (bitwise-arithmetic-shift . G4f78) (zero? . G4f77) (vector? . G4f76) (vector-set! . G4f75) (vector-ref . G4f74) (vector-map . G4f73) (vector-length . G4f72) (vector-for-each . G4f71) (vector-fill! . G4f70) (vector->list . G4f6f) (vector . G4f6e) (values . G4f6d) (truncate . G4f6c) (tan . G4f6b) (symbol? . G4f6a) (symbol=? . G4f69) (symbol->string . G4f68) (substring . G4f67) (string? . G4f66) (string>? . G4f65) (string>=? . G4f64) (string=? . G4f63) (string<? . G4f62) (string<=? . G4f61) (string-ref . G4f60) (string-length . G4f5f) (string-for-each . G4f5e) (string-copy . G4f5d) (string-append . G4f5c) (string->symbol . G4f5b) (string->number . G4f5a) (string->list . G4f59) (string . G4f58) (sqrt . G4f57) (sin . G4f56) (round . G4f55) (reverse . G4f54) (real? . G4f53) (real-valued? . G4f52) (real-part . G4f51) (rationalize . G4f50) (rational? . G4f4f) (rational-valued? . G4f4e) (procedure? . G4f4d) (positive? . G4f4c) (pair? . G4f4b) (odd? . G4f4a) (numerator . G4f49) (number? . G4f48) (number->string . G4f47) (null? . G4f46) (not . G4f45) (negative? . G4f44) (nan? . G4f43) (min . G4f42) (max . G4f41) (map . G4f40) (make-vector . G4f3f) (make-string . G4f3e) (make-rectangular . G4f3d) (make-polar . G4f3c) (magnitude . G4f3b) (log . G4f3a) (list? . G4f39) (list-tail . G4f38) (list-ref . G4f37) (list->vector . G4f36) (list->string . G4f35) (list . G4f34) (length . G4f33) (lcm . G4f32) (integer? . G4f31) (integer-valued? . G4f30) (integer->char . G4f2f) (infinite? . G4f2e) (inexact? . G4f2d) (inexact . G4f2c) (imag-part . G4f2b) (gcd . G4f2a) (for-each . G4f29) (floor . G4f28) (finite? . G4f27) (expt . G4f26) (exp . G4f25) (exact? . G4f24) (exact-integer-sqrt . G4f23) (exact . G4f22) (even? . G4f21) (error . G4f20) (eqv? . G4f1f) (equal? . G4f1e) (eq? . G4f1d) (dynamic-wind . G4f1c) (div0-and-mod0 . G4f1b) (mod0 . G4f1a) (div0 . G4f19) (div-and-mod . G4f18) (mod . G4f17) (div . G4f16) (denominator . G4f15) (cos . G4f14) (cons . G4f13) (complex? . G4f12) (char? . G4f11) (char>? . G4f10) (char>=? . G4f0f) (char=? . G4f0e) (char<? . G4f0d) (char<=? . G4f0c) (char->integer . G4f0b) (ceiling . G4f0a) (call-with-values . G4f09) (call/cc . G4f08) (call-with-current-continuation . G4f07) (cddddr . G4f06) (cdddar . G4f05) (cddadr . G4f04) (cddaar . G4f03) (cdaddr . G4f02) (cdadar . G4f01) (cdaadr . G4f00) (cdaaar . G4eff) (cadddr . G4efe) (caddar . G4efd) (cadadr . G4efc) (cadaar . G4efb) (caaddr . G4efa) (caadar . G4ef9) (caaadr . G4ef8) (caaaar . G4ef7) (cdddr . G4ef6) (cddar . G4ef5) (cdadr . G4ef4) (cdaar . G4ef3) (caddr . G4ef2) (cadar . G4ef1) (caadr . G4ef0) (caaar . G4eef) (cddr . G4eee) (cdar . G4eed) (cadr . G4eec) (caar . G4eeb) (cdr . G4eea) (car . G4ee9) (boolean? . G4ee8) (boolean=? . G4ee7) (atan . G4ee6) (assertion-violation . G4ee5) (asin . G4ee4) (apply . G4ee3) (append . G4ee2) (angle . G4ee1) (acos . G4ee0) (abs . G4edf) (/ . G4ede) (* . G4edd) (- . G4edc) (+ . G4edb) (>= . G4eda) (> . G4ed9) (= . G4ed8) (<= . G4ed7) (< . G4ed6) (library . G4ed5) (export . G4ed4) (&no-nans . G4ed3) (&no-infinities . G4ed2) (&i/o-encoding . G4ed1) (&i/o-decoding . G4ed0) (&i/o-port . G4ecf) (&i/o-file-does-not-exist . G4ece) (&i/o-file-already-exists . G4ecd) (&i/o-file-is-read-only . G4ecc) (&i/o-file-protection . G4ecb) (&i/o-filename . G4eca) (&i/o-invalid-position . G4ec9) (&i/o-write . G4ec8) (&i/o-read . G4ec7) (&i/o . G4ec6) (&undefined . G4ec5) (&syntax . G4ec4) (&lexical . G4ec3) (&implementation-restriction . G4ec2) (&non-continuable . G4ec1) (&who . G4ec0) (&irritants . G4ebf) (&assertion . G4ebe) (&violation . G4ebd) (&error . G4ebc) (&serious . G4ebb) (&warning . G4eba) (&message . G4eb9) (&condition . G4eb8) (define-condition-type . G4eb7) (define-enumeration . G4eb6) (define-record-type . G4eb5) (parent-rtd . G4eb4) (nongenerative . G4eb3) (opaque . G4eb2) (sealed . G4eb1) (protocol . G4eb0) (parent . G4eaf) (immutable . G4eae) (mutable . G4ead) (fields . G4eac) (error-handling-mode . G4eab) (file-options . G4eaa) (buffer-mode . G4ea9) (eol-style . G4ea8) (guard . G4ea7) (unsyntax-splicing . G4ea4) (unsyntax . G4ea3) (unquote-splicing . G4ea2) (unquote . G4ea1) (_ . G4ea0) (else . G4e9f) (=> . G4e9e) (... . G4e9d) (assert . G4e9c) (endianness . G4e9b) (do . G4e98) (cond . G4e97) (let* . G4e96) (let . G4e95) (let*-values . G4e94) (let-values . G4e93) (identifier-syntax . G4e92) (with-syntax . G4e91) (quasisyntax . G4e90) (quasiquote . G4e8f) (syntax-rules . G4e8e) (include . G4e8d) (record-constructor-descriptor . G4e8b) (record-type-descriptor . G4e8a) (case . G4e89) (unless . G4e87) (when . G4e86) (or . G4e85) (and . G4e84) (if . G4e83) (letrec* . G4e82) (letrec . G4e81) (case-lambda . G4e7f) (lambda . G4e7e) (syntax . G4e7d) (syntax-case . G4e7c) (quote . G4e7b) (letrec-syntax . G4e79) (let-syntax . G4e78) (set! . G4e77) (import . G4e76) (begin . G4e75) (define-syntax . G4e73) (define . G4e72)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G513f '(psyntax null-environment-5) '() '() '() '() '((make-promise . G5053) (unquote-splicing . G4ea2) (unquote . G4ea1) (delay . G4e9a) (do . G4e98) (cond . G4e97) (let* . G4e96) (let . G4e95) (quasiquote . G4e8f) (syntax-rules . G4e8e) (case . G4e89) (or . G4e85) (and . G4e84) (if . G4e83) (letrec . G4e81) (lambda . G4e7e) (quote . G4e7b) (letrec-syntax . G4e79) (let-syntax . G4e78) (set! . G4e77) (begin . G4e75) (define-syntax . G4e73) (define . G4e72)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5140 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . G50e8) (string-ci>=? . G50e7) (string-ci=? . G50e6) (string-ci<? . G50e5) (string-ci<=? . G50e4) (char-whitespace? . G50e3) (char-upper-case? . G50e2) (char-numeric? . G50e0) (char-lower-case? . G50df) (char-upcase . G50dd) (char-downcase . G50da) (char-ci>? . G50d9) (char-ci>=? . G50d8) (char-ci=? . G50d7) (char-ci<? . G50d6) (char-ci<=? . G50d5) (char-alphabetic? . G50d4) (call-with-output-file . G50a8) (call-with-input-file . G50a7) (write-char . G50a6) (write . G50a5) (with-output-to-file . G50a4) (with-input-from-file . G50a3) (read-char . G50a2) (read . G50a1) (peek-char . G50a0) (open-output-file . G509f) (open-input-file . G509e) (newline . G509d) (display . G509c) (close-output-port . G509b) (close-input-port . G509a) (eof-object . G5098) (current-output-port . G5096) (current-input-port . G5095) (output-port? . G5094) (input-port? . G5093) (scheme-report-environment . G30d4) (quotient . G5059) (null-environment . G30d2) (remainder . G5058) (modulo . G5057) (inexact->exact . G5056) (force . G5055) (exact->inexact . G5054) (make-promise . G5053) (string-fill! . G5051) (string-set! . G5050) (set-cdr! . G504f) (set-car! . G504e) (memv . G5048) (memq . G5047) (member . G5045) (assv . G503d) (assq . G503c) (assoc . G503a) (eval . G30d8) (zero? . G4f77) (vector? . G4f76) (vector-set! . G4f75) (vector-ref . G4f74) (vector-length . G4f72) (vector-fill! . G4f70) (vector->list . G4f6f) (vector . G4f6e) (values . G4f6d) (truncate . G4f6c) (tan . G4f6b) (symbol? . G4f6a) (symbol->string . G4f68) (substring . G4f67) (string? . G4f66) (string>? . G4f65) (string>=? . G4f64) (string=? . G4f63) (string<? . G4f62) (string<=? . G4f61) (string-ref . G4f60) (string-length . G4f5f) (string-copy . G4f5d) (string-append . G4f5c) (string->symbol . G4f5b) (string->number . G4f5a) (string->list . G4f59) (string . G4f58) (sqrt . G4f57) (sin . G4f56) (round . G4f55) (reverse . G4f54) (real? . G4f53) (real-part . G4f51) (rationalize . G4f50) (rational? . G4f4f) (procedure? . G4f4d) (positive? . G4f4c) (pair? . G4f4b) (odd? . G4f4a) (numerator . G4f49) (number? . G4f48) (number->string . G4f47) (not . G4f45) (negative? . G4f44) (min . G4f42) (max . G4f41) (map . G4f40) (make-vector . G4f3f) (make-string . G4f3e) (make-rectangular . G4f3d) (make-polar . G4f3c) (magnitude . G4f3b) (log . G4f3a) (list? . G4f39) (list-tail . G4f38) (list-ref . G4f37) (list->vector . G4f36) (list->string . G4f35) (list . G4f34) (length . G4f33) (lcm . G4f32) (integer? . G4f31) (integer->char . G4f2f) (inexact? . G4f2d) (imag-part . G4f2b) (gcd . G4f2a) (for-each . G4f29) (floor . G4f28) (expt . G4f26) (exp . G4f25) (exact? . G4f24) (even? . G4f21) (eqv? . G4f1f) (equal? . G4f1e) (eq? . G4f1d) (dynamic-wind . G4f1c) (denominator . G4f15) (cos . G4f14) (cons . G4f13) (complex? . G4f12) (char? . G4f11) (char>? . G4f10) (char>=? . G4f0f) (char=? . G4f0e) (char<? . G4f0d) (char<=? . G4f0c) (char->integer . G4f0b) (ceiling . G4f0a) (call-with-values . G4f09) (call-with-current-continuation . G4f07) (cddddr . G4f06) (cdddar . G4f05) (cddadr . G4f04) (cddaar . G4f03) (cdaddr . G4f02) (cdadar . G4f01) (cdaadr . G4f00) (cdaaar . G4eff) (cadddr . G4efe) (caddar . G4efd) (cadadr . G4efc) (cadaar . G4efb) (caaddr . G4efa) (caadar . G4ef9) (caaadr . G4ef8) (caaaar . G4ef7) (cdddr . G4ef6) (cddar . G4ef5) (cdadr . G4ef4) (cdaar . G4ef3) (caddr . G4ef2) (cadar . G4ef1) (caadr . G4ef0) (caaar . G4eef) (cddr . G4eee) (cdar . G4eed) (cadr . G4eec) (caar . G4eeb) (cdr . G4eea) (car . G4ee9) (boolean? . G4ee8) (atan . G4ee6) (asin . G4ee4) (apply . G4ee3) (append . G4ee2) (angle . G4ee1) (acos . G4ee0) (abs . G4edf) (/ . G4ede) (* . G4edd) (- . G4edc) (+ . G4edb) (>= . G4eda) (> . G4ed9) (= . G4ed8) (<= . G4ed7) (< . G4ed6) (unquote-splicing . G4ea2) (unquote . G4ea1) (delay . G4e9a) (do . G4e98) (cond . G4e97) (let* . G4e96) (let . G4e95) (quasiquote . G4e8f) (syntax-rules . G4e8e) (case . G4e89) (or . G4e85) (and . G4e84) (if . G4e83) (letrec . G4e81) (lambda . G4e7e) (quote . G4e7b) (letrec-syntax . G4e79) (let-syntax . G4e78) (set! . G4e77) (begin . G4e75) (define-syntax . G4e73) (define . G4e72)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5141 '(psyntax modules) '() '() '() '() '((module . G4e74)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5142 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5143 '(rnrs) '(6) '() '() '() '((regexp? . G5136) (string-upcase . G50f0) (string-titlecase . G50ef) (string-normalize-nfkd . G50ee) (string-normalize-nfkc . G50ed) (string-normalize-nfd . G50ec) (string-normalize-nfc . G50eb) (string-foldcase . G50ea) (string-downcase . G50e9) (string-ci>? . G50e8) (string-ci>=? . G50e7) (string-ci=? . G50e6) (string-ci<? . G50e5) (string-ci<=? . G50e4) (char-whitespace? . G50e3) (char-upper-case? . G50e2) (char-title-case? . G50e1) (char-numeric? . G50e0) (char-lower-case? . G50df) (char-general-category . G50de) (char-upcase . G50dd) (char-titlecase . G50dc) (char-foldcase . G50db) (char-downcase . G50da) (char-ci>? . G50d9) (char-ci>=? . G50d8) (char-ci=? . G50d7) (char-ci<? . G50d6) (char-ci<=? . G50d5) (char-alphabetic? . G50d4) (make-variable-transformer . G2e48) (identifier? . G30fc) (generate-temporaries . G30e6) (free-identifier=? . G30e8) (syntax->datum . G3100) (datum->syntax . G30fe) (bound-identifier=? . G30ea) (record-type-descriptor? . G50d3) (record-predicate . G50d2) (record-mutator . G50d1) (record-constructor . G50d0) (record-accessor . G50cf) (make-record-type-descriptor . G50ce) (make-record-constructor-descriptor . G50cd) (record? . G50cc) (record-type-uid . G50cb) (record-type-sealed? . G50ca) (record-type-parent . G50c9) (record-type-opaque? . G50c8) (record-type-name . G50c7) (record-type-generative? . G50c6) (record-type-field-names . G50c5) (record-rtd . G50c4) (record-field-mutable? . G50c3) (delete-file . G50c2) (file-exists? . G50c1) (vector-sort! . G50c0) (vector-sort . G50bf) (list-sort . G50be) (symbol-hash . G50bd) (string-ci-hash . G50bc) (string-hash . G50bb) (equal-hash . G50ba) (hashtable-equivalence-function . G50b9) (make-hashtable . G50b8) (hashtable-hash-function . G50b7) (make-eqv-hashtable . G50b6) (make-eq-hashtable . G50b5) (hashtable? . G50b4) (hashtable-update! . G50b3) (hashtable-size . G50b2) (hashtable-set! . G50b1) (hashtable-ref . G50b0) (hashtable-mutable? . G50af) (hashtable-keys . G50ae) (hashtable-entries . G50ad) (hashtable-delete! . G50ac) (hashtable-copy . G50ab) (hashtable-contains? . G50aa) (hashtable-clear! . G50a9) (call-with-output-file . G50a8) (call-with-input-file . G50a7) (write-char . G50a6) (write . G50a5) (with-output-to-file . G50a4) (with-input-from-file . G50a3) (read-char . G50a2) (read . G50a1) (peek-char . G50a0) (open-output-file . G509f) (open-input-file . G509e) (newline . G509d) (display . G509c) (close-output-port . G509b) (close-input-port . G509a) (eof-object? . G5099) (eof-object . G5098) (current-error-port . G5097) (current-output-port . G5096) (current-input-port . G5095) (output-port? . G5094) (input-port? . G5093) (utf-8-codec . G5092) (utf-16-codec . G5091) (transcoder-error-handling-mode . G5090) (transcoder-eol-style . G508f) (transcoder-codec . G508e) (transcoded-port . G508d) (textual-port? . G508c) (string->bytevector . G508b) (standard-output-port . G508a) (standard-input-port . G5089) (standard-error-port . G5088) (set-port-position! . G5087) (put-u8 . G5086) (put-string . G5085) (put-datum . G5084) (put-char . G5083) (put-bytevector . G5082) (port? . G5081) (port-transcoder . G5080) (port-position . G507f) (port-has-set-port-position!? . G507e) (port-has-port-position? . G507d) (port-eof? . G507c) (output-port-buffer-mode . G507b) (open-string-output-port . G507a) (open-string-input-port . G5079) (open-file-output-port . G5078) (open-file-input/output-port . G5077) (open-file-input-port . G5076) (open-bytevector-output-port . G5075) (open-bytevector-input-port . G5074) (native-transcoder . G5073) (native-eol-style . G5072) (make-transcoder . G5071) (latin-1-codec . G5070) (make-i/o-write-error . G4bd7) (make-i/o-read-error . G4bc2) (make-i/o-port-error . G4c75) (make-i/o-invalid-position-error . G4bed) (make-i/o-filename-error . G4c07) (make-i/o-file-protection-error . G4c20) (make-i/o-file-is-read-only-error . G4c35) (make-i/o-file-does-not-exist-error . G4c5f) (make-i/o-file-already-exists-error . G4c4a) (make-i/o-error . G4bad) (make-i/o-encoding-error . G4ca4) (make-i/o-decoding-error . G4c8e) (make-custom-textual-output-port . G506f) (make-custom-textual-input/output-port . G506e) (make-custom-textual-input-port . G506d) (make-custom-binary-output-port . G506c) (make-custom-binary-input/output-port . G506b) (make-custom-binary-input-port . G506a) (make-bytevector . G5069) (lookahead-u8 . G5068) (lookahead-char . G5067) (i/o-write-error? . G4bd9) (i/o-read-error? . G4bc4) (i/o-port-error? . G4c79) (i/o-invalid-position-error? . G4bf1) (i/o-filename-error? . G4c0b) (i/o-file-protection-error? . G4c22) (i/o-file-is-read-only-error? . G4c37) (i/o-file-does-not-exist-error? . G4c61) (i/o-file-already-exists-error? . G4c4c) (i/o-error? . G4baf) (i/o-error-port . G4c7b) (i/o-error-filename . G4c0d) (i/o-encoding-error? . G4ca8) (i/o-encoding-error-char . G4caa) (i/o-decoding-error? . G4c90) (get-u8 . G5066) (get-string-n! . G5065) (get-string-n . G5064) (get-string-all . G5063) (get-line . G5062) (get-datum . G5061) (get-char . G5060) (get-bytevector-some . G505f) (get-bytevector-n! . G505e) (get-bytevector-n . G505d) (get-bytevector-all . G505c) (flush-output-port . G505b) (close-port . G505a) (exit . G5052) (command-line . G4dd3) (remove . G504d) (remv . G504c) (remp . G504b) (remq . G504a) (partition . G5049) (memv . G5048) (memq . G5047) (memp . G5046) (member . G5045) (exists . G5044) (for-all . G5043) (fold-right . G5042) (fold-left . G5041) (find . G5040) (filter . G503f) (cons* . G503e) (assv . G503d) (assq . G503c) (assp . G503b) (assoc . G503a) (call-with-string-output-port . G5039) (call-with-port . G5038) (call-with-bytevector-output-port . G5037) (bytevector->string . G5036) (buffer-mode? . G5035) (binary-port? . G5034) (with-exception-handler . G5033) (raise-continuable . G5032) (raise . G5031) (make-enumeration . G5030) (enum-set=? . G502f) (enum-set-universe . G502e) (enum-set-union . G502d) (enum-set-subset? . G502c) (enum-set-projection . G502b) (enum-set-member? . G502a) (enum-set-intersection . G5029) (enum-set-indexer . G5028) (enum-set-difference . G5027) (enum-set-constructor . G5026) (enum-set-complement . G5025) (enum-set->list . G5024) (who-condition? . G4b25) (warning? . G4a9f) (violation? . G4ade) (undefined-violation? . G4b9a) (syntax-violation? . G4b81) (syntax-violation-subform . G4b85) (syntax-violation-form . G4b83) (syntax-violation . G30fa) (simple-conditions . G5023) (serious-condition? . G4ab4) (non-continuable-violation? . G4b3c) (message-condition? . G4a88) (make-who-condition . G4b21) (make-warning . G4a9d) (make-violation . G4adc) (make-undefined-violation . G4b98) (make-syntax-violation . G4b7b) (make-serious-condition . G4ab2) (make-non-continuable-violation . G4b3a) (make-message-condition . G4a84) (make-lexical-violation . G4b64) (make-irritants-condition . G4b07) (make-implementation-restriction-violation . G4b4f) (make-error . G4ac7) (make-assertion-violation . G4af1) (lexical-violation? . G4b66) (irritants-condition? . G4b0b) (implementation-restriction-violation? . G4b51) (error? . G4ac9) (condition-who . G4b27) (condition-predicate . G5022) (condition-message . G4a8a) (condition-irritants . G4b0d) (condition-accessor . G5021) (condition . G5020) (assertion-violation? . G4af3) (condition? . G501f) (utf32->string . G501e) (utf16->string . G501d) (utf8->string . G501c) (uint-list->bytevector . G501b) (u8-list->bytevector . G501a) (string->utf8 . G5019) (string->utf32 . G5018) (string->utf16 . G5017) (sint-list->bytevector . G5016) (native-endianness . G5015) (bytevector? . G5014) (bytevector=? . G5013) (bytevector-uint-set! . G5012) (bytevector-uint-ref . G5011) (bytevector-u8-set! . G5010) (bytevector-u8-ref . G500f) (bytevector-u64-set! . G500e) (bytevector-u64-ref . G500d) (bytevector-u64-native-set! . G500c) (bytevector-u64-native-ref . G500b) (bytevector-u32-set! . G500a) (bytevector-u32-ref . G5009) (bytevector-u32-native-set! . G5008) (bytevector-u32-native-ref . G5007) (bytevector-u16-set! . G5006) (bytevector-u16-ref . G5005) (bytevector-u16-native-set! . G5004) (bytevector-u16-native-ref . G5003) (bytevector-sint-set! . G5002) (bytevector-sint-ref . G5001) (bytevector-s8-set! . G5000) (bytevector-s8-ref . G4fff) (bytevector-s64-set! . G4ffe) (bytevector-s64-ref . G4ffd) (bytevector-s64-native-set! . G4ffc) (bytevector-s64-native-ref . G4ffb) (bytevector-s32-set! . G4ffa) (bytevector-s32-ref . G4ff9) (bytevector-s32-native-set! . G4ff8) (bytevector-s32-native-ref . G4ff7) (bytevector-s16-set! . G4ff6) (bytevector-s16-ref . G4ff5) (bytevector-s16-native-set! . G4ff4) (bytevector-s16-native-ref . G4ff3) (bytevector-length . G4ff2) (bytevector-ieee-single-ref . G4ff1) (bytevector-ieee-single-set! . G4ff0) (bytevector-ieee-single-native-set! . G4fef) (bytevector-ieee-single-native-ref . G4fee) (bytevector-ieee-double-set! . G4fed) (bytevector-ieee-double-ref . G4fec) (bytevector-ieee-double-native-set! . G4feb) (bytevector-ieee-double-native-ref . G4fea) (bytevector-fill! . G4fe9) (bytevector-copy! . G4fe8) (bytevector-copy . G4fe7) (bytevector->uint-list . G4fe6) (bytevector->u8-list . G4fe5) (bytevector->sint-list . G4fe4) (no-nans-violation? . G4cd4) (no-infinities-violation? . G4cbf) (make-no-nans-violation . G4cd2) (make-no-infinities-violation . G4cbd) (real->flonum . G4fe3) (flzero? . G4fe2) (fltruncate . G4fe1) (fltan . G4fe0) (flsqrt . G4fdf) (flsin . G4fde) (flround . G4fdd) (flpositive? . G4fdc) (flonum? . G4fdb) (flodd? . G4fda) (flnumerator . G4fd9) (flnegative? . G4fd8) (flnan? . G4fd7) (flmod0 . G4fd6) (flmod . G4fd5) (flmin . G4fd4) (flmax . G4fd3) (fllog . G4fd2) (flinteger? . G4fd1) (flinfinite? . G4fd0) (flfloor . G4fcf) (flfinite? . G4fce) (flexpt . G4fcd) (flexp . G4fcc) (fleven? . G4fcb) (fldiv0-and-mod0 . G4fca) (fldiv0 . G4fc9) (fldiv-and-mod . G4fc8) (fldiv . G4fc7) (fldenominator . G4fc6) (flcos . G4fc5) (flceiling . G4fc4) (flatan . G4fc3) (flasin . G4fc2) (flacos . G4fc1) (flabs . G4fc0) (fl>? . G4fbf) (fl>=? . G4fbe) (fl=? . G4fbd) (fl<? . G4fbc) (fl<=? . G4fbb) (fl/ . G4fba) (fl- . G4fb9) (fl+ . G4fb8) (fl* . G4fb7) (fixnum->flonum . G4fb6) (fxzero? . G4fb5) (fxxor . G4fb4) (fxrotate-bit-field . G4fb3) (fxreverse-bit-field . G4fb2) (fxpositive? . G4fb1) (fxodd? . G4fb0) (fxnot . G4faf) (fxnegative? . G4fae) (fxmod0 . G4fad) (fxmod . G4fac) (fxmin . G4fab) (fxmax . G4faa) (fxlength . G4fa9) (fxior . G4fa8) (fxif . G4fa7) (fxfirst-bit-set . G4fa6) (fxeven? . G4fa5) (fxdiv0-and-mod0 . G4fa4) (fxdiv0 . G4fa3) (fxdiv-and-mod . G4fa2) (fxdiv . G4fa1) (fxcopy-bit-field . G4fa0) (fxcopy-bit . G4f9f) (fxbit-set? . G4f9e) (fxbit-field . G4f9d) (fxbit-count . G4f9c) (fxarithmetic-shift-right . G4f9b) (fxarithmetic-shift-left . G4f9a) (fxarithmetic-shift . G4f99) (fxand . G4f98) (fx>? . G4f97) (fx>=? . G4f96) (fx=? . G4f95) (fx<? . G4f94) (fx<=? . G4f93) (fx-/carry . G4f92) (fx- . G4f91) (fx+/carry . G4f90) (fx+ . G4f8f) (fx*/carry . G4f8e) (fx* . G4f8d) (greatest-fixnum . G4f8c) (least-fixnum . G4f8b) (fixnum-width . G4f8a) (fixnum? . G4f89) (bitwise-rotate-bit-field . G4f88) (bitwise-reverse-bit-field . G4f87) (bitwise-length . G4f86) (bitwise-if . G4f85) (bitwise-first-bit-set . G4f84) (bitwise-copy-bit-field . G4f83) (bitwise-copy-bit . G4f82) (bitwise-bit-set? . G4f81) (bitwise-bit-field . G4f80) (bitwise-bit-count . G4f7f) (bitwise-xor . G4f7e) (bitwise-ior . G4f7d) (bitwise-and . G4f7c) (bitwise-not . G4f7b) (bitwise-arithmetic-shift-right . G4f7a) (bitwise-arithmetic-shift-left . G4f79) (bitwise-arithmetic-shift . G4f78) (zero? . G4f77) (vector? . G4f76) (vector-set! . G4f75) (vector-ref . G4f74) (vector-map . G4f73) (vector-length . G4f72) (vector-for-each . G4f71) (vector-fill! . G4f70) (vector->list . G4f6f) (vector . G4f6e) (values . G4f6d) (truncate . G4f6c) (tan . G4f6b) (symbol? . G4f6a) (symbol=? . G4f69) (symbol->string . G4f68) (substring . G4f67) (string? . G4f66) (string>? . G4f65) (string>=? . G4f64) (string=? . G4f63) (string<? . G4f62) (string<=? . G4f61) (string-ref . G4f60) (string-length . G4f5f) (string-for-each . G4f5e) (string-copy . G4f5d) (string-append . G4f5c) (string->symbol . G4f5b) (string->number . G4f5a) (string->list . G4f59) (string . G4f58) (sqrt . G4f57) (sin . G4f56) (round . G4f55) (reverse . G4f54) (real? . G4f53) (real-valued? . G4f52) (real-part . G4f51) (rationalize . G4f50) (rational? . G4f4f) (rational-valued? . G4f4e) (procedure? . G4f4d) (positive? . G4f4c) (pair? . G4f4b) (odd? . G4f4a) (numerator . G4f49) (number? . G4f48) (number->string . G4f47) (null? . G4f46) (not . G4f45) (negative? . G4f44) (nan? . G4f43) (min . G4f42) (max . G4f41) (map . G4f40) (make-vector . G4f3f) (make-string . G4f3e) (make-rectangular . G4f3d) (make-polar . G4f3c) (magnitude . G4f3b) (log . G4f3a) (list? . G4f39) (list-tail . G4f38) (list-ref . G4f37) (list->vector . G4f36) (list->string . G4f35) (list . G4f34) (length . G4f33) (lcm . G4f32) (integer? . G4f31) (integer-valued? . G4f30) (integer->char . G4f2f) (infinite? . G4f2e) (inexact? . G4f2d) (inexact . G4f2c) (imag-part . G4f2b) (gcd . G4f2a) (for-each . G4f29) (floor . G4f28) (finite? . G4f27) (expt . G4f26) (exp . G4f25) (exact? . G4f24) (exact-integer-sqrt . G4f23) (exact . G4f22) (even? . G4f21) (error . G4f20) (eqv? . G4f1f) (equal? . G4f1e) (eq? . G4f1d) (dynamic-wind . G4f1c) (div0-and-mod0 . G4f1b) (mod0 . G4f1a) (div0 . G4f19) (div-and-mod . G4f18) (mod . G4f17) (div . G4f16) (denominator . G4f15) (cos . G4f14) (cons . G4f13) (complex? . G4f12) (char? . G4f11) (char>? . G4f10) (char>=? . G4f0f) (char=? . G4f0e) (char<? . G4f0d) (char<=? . G4f0c) (char->integer . G4f0b) (ceiling . G4f0a) (call-with-values . G4f09) (call/cc . G4f08) (call-with-current-continuation . G4f07) (cddddr . G4f06) (cdddar . G4f05) (cddadr . G4f04) (cddaar . G4f03) (cdaddr . G4f02) (cdadar . G4f01) (cdaadr . G4f00) (cdaaar . G4eff) (cadddr . G4efe) (caddar . G4efd) (cadadr . G4efc) (cadaar . G4efb) (caaddr . G4efa) (caadar . G4ef9) (caaadr . G4ef8) (caaaar . G4ef7) (cdddr . G4ef6) (cddar . G4ef5) (cdadr . G4ef4) (cdaar . G4ef3) (caddr . G4ef2) (cadar . G4ef1) (caadr . G4ef0) (caaar . G4eef) (cddr . G4eee) (cdar . G4eed) (cadr . G4eec) (caar . G4eeb) (cdr . G4eea) (car . G4ee9) (boolean? . G4ee8) (boolean=? . G4ee7) (atan . G4ee6) (assertion-violation . G4ee5) (asin . G4ee4) (apply . G4ee3) (append . G4ee2) (angle . G4ee1) (acos . G4ee0) (abs . G4edf) (/ . G4ede) (* . G4edd) (- . G4edc) (+ . G4edb) (>= . G4eda) (> . G4ed9) (= . G4ed8) (<= . G4ed7) (< . G4ed6) (&no-nans . G4ed3) (&no-infinities . G4ed2) (&i/o-encoding . G4ed1) (&i/o-decoding . G4ed0) (&i/o-port . G4ecf) (&i/o-file-does-not-exist . G4ece) (&i/o-file-already-exists . G4ecd) (&i/o-file-is-read-only . G4ecc) (&i/o-file-protection . G4ecb) (&i/o-filename . G4eca) (&i/o-invalid-position . G4ec9) (&i/o-write . G4ec8) (&i/o-read . G4ec7) (&i/o . G4ec6) (&undefined . G4ec5) (&syntax . G4ec4) (&lexical . G4ec3) (&implementation-restriction . G4ec2) (&non-continuable . G4ec1) (&who . G4ec0) (&irritants . G4ebf) (&assertion . G4ebe) (&violation . G4ebd) (&error . G4ebc) (&serious . G4ebb) (&warning . G4eba) (&message . G4eb9) (&condition . G4eb8) (define-condition-type . G4eb7) (define-enumeration . G4eb6) (define-record-type . G4eb5) (parent-rtd . G4eb4) (nongenerative . G4eb3) (opaque . G4eb2) (sealed . G4eb1) (protocol . G4eb0) (parent . G4eaf) (immutable . G4eae) (mutable . G4ead) (fields . G4eac) (error-handling-mode . G4eab) (file-options . G4eaa) (buffer-mode . G4ea9) (eol-style . G4ea8) (guard . G4ea7) (unsyntax-splicing . G4ea4) (unsyntax . G4ea3) (unquote-splicing . G4ea2) (unquote . G4ea1) (_ . G4ea0) (else . G4e9f) (=> . G4e9e) (... . G4e9d) (assert . G4e9c) (endianness . G4e9b) (do . G4e98) (cond . G4e97) (let* . G4e96) (let . G4e95) (let*-values . G4e94) (let-values . G4e93) (identifier-syntax . G4e92) (with-syntax . G4e91) (quasisyntax . G4e90) (quasiquote . G4e8f) (syntax-rules . G4e8e) (record-constructor-descriptor . G4e8b) (record-type-descriptor . G4e8a) (case . G4e89) (unless . G4e87) (when . G4e86) (or . G4e85) (and . G4e84) (if . G4e83) (letrec* . G4e82) (letrec . G4e81) (case-lambda . G4e7f) (lambda . G4e7e) (syntax . G4e7d) (syntax-case . G4e7c) (quote . G4e7b) (letrec-syntax . G4e79) (let-syntax . G4e78) (set! . G4e77) (begin . G4e75) (define-syntax . G4e73) (define . G4e72)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5144 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . G30d4) (quotient . G5059) (null-environment . G30d2) (remainder . G5058) (modulo . G5057) (inexact->exact . G5056) (force . G5055) (exact->inexact . G5054) (make-promise . G5053) (delay . G4e9a)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5145 '(rnrs control) '(6) '() '() '() '((do . G4e98) (unless . G4e87) (when . G4e86) (case-lambda . G4e7f)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5146 '(rnrs eval) '(6) '() '() '() '((eval . G30d8) (environment . G30d0)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5147 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . G504f) (set-car! . G504e)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5148 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . G5051) (string-set! . G5050)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5149 '(rnrs programs) '(6) '() '() '() '((exit . G5052) (command-line . G4dd3)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G514a '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . G2e48) (identifier? . G30fc) (generate-temporaries . G30e6) (free-identifier=? . G30e8) (syntax->datum . G3100) (datum->syntax . G30fe) (bound-identifier=? . G30ea) (syntax-violation . G30fa) (unsyntax-splicing . G4ea4) (unsyntax . G4ea3) (_ . G4ea0) (... . G4e9d) (with-syntax . G4e91) (quasisyntax . G4e90) (syntax . G4e7d) (syntax-case . G4e7c)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G514b '(rnrs files) '(6) '() '() '() '((delete-file . G50c2) (file-exists? . G50c1) (make-i/o-write-error . G4bd7) (make-i/o-read-error . G4bc2) (make-i/o-port-error . G4c75) (make-i/o-invalid-position-error . G4bed) (make-i/o-filename-error . G4c07) (make-i/o-file-protection-error . G4c20) (make-i/o-file-is-read-only-error . G4c35) (make-i/o-file-does-not-exist-error . G4c5f) (make-i/o-file-already-exists-error . G4c4a) (make-i/o-error . G4bad) (i/o-write-error? . G4bd9) (i/o-read-error? . G4bc4) (i/o-port-error? . G4c79) (i/o-invalid-position-error? . G4bf1) (i/o-filename-error? . G4c0b) (i/o-file-protection-error? . G4c22) (i/o-file-is-read-only-error? . G4c37) (i/o-file-does-not-exist-error? . G4c61) (i/o-file-already-exists-error? . G4c4c) (i/o-error? . G4baf) (i/o-error-port . G4c7b) (i/o-error-filename . G4c0d) (&i/o-port . G4ecf) (&i/o-file-does-not-exist . G4ece) (&i/o-file-already-exists . G4ecd) (&i/o-file-is-read-only . G4ecc) (&i/o-file-protection . G4ecb) (&i/o-filename . G4eca) (&i/o-invalid-position . G4ec9) (&i/o-write . G4ec8) (&i/o-read . G4ec7) (&i/o . G4ec6)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G514c '(rnrs sorting) '(6) '() '() '() '((vector-sort! . G50c0) (vector-sort . G50bf) (list-sort . G50be)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G514d '(rnrs base) '(6) '() '() '() '((zero? . G4f77) (vector? . G4f76) (vector-set! . G4f75) (vector-ref . G4f74) (vector-map . G4f73) (vector-length . G4f72) (vector-for-each . G4f71) (vector-fill! . G4f70) (vector->list . G4f6f) (vector . G4f6e) (values . G4f6d) (truncate . G4f6c) (tan . G4f6b) (symbol? . G4f6a) (symbol=? . G4f69) (symbol->string . G4f68) (substring . G4f67) (string? . G4f66) (string>? . G4f65) (string>=? . G4f64) (string=? . G4f63) (string<? . G4f62) (string<=? . G4f61) (string-ref . G4f60) (string-length . G4f5f) (string-for-each . G4f5e) (string-copy . G4f5d) (string-append . G4f5c) (string->symbol . G4f5b) (string->number . G4f5a) (string->list . G4f59) (string . G4f58) (sqrt . G4f57) (sin . G4f56) (round . G4f55) (reverse . G4f54) (real? . G4f53) (real-valued? . G4f52) (real-part . G4f51) (rationalize . G4f50) (rational? . G4f4f) (rational-valued? . G4f4e) (procedure? . G4f4d) (positive? . G4f4c) (pair? . G4f4b) (odd? . G4f4a) (numerator . G4f49) (number? . G4f48) (number->string . G4f47) (null? . G4f46) (not . G4f45) (negative? . G4f44) (nan? . G4f43) (min . G4f42) (max . G4f41) (map . G4f40) (make-vector . G4f3f) (make-string . G4f3e) (make-rectangular . G4f3d) (make-polar . G4f3c) (magnitude . G4f3b) (log . G4f3a) (list? . G4f39) (list-tail . G4f38) (list-ref . G4f37) (list->vector . G4f36) (list->string . G4f35) (list . G4f34) (length . G4f33) (lcm . G4f32) (integer? . G4f31) (integer-valued? . G4f30) (integer->char . G4f2f) (infinite? . G4f2e) (inexact? . G4f2d) (inexact . G4f2c) (imag-part . G4f2b) (gcd . G4f2a) (for-each . G4f29) (floor . G4f28) (finite? . G4f27) (expt . G4f26) (exp . G4f25) (exact? . G4f24) (exact-integer-sqrt . G4f23) (exact . G4f22) (even? . G4f21) (error . G4f20) (eqv? . G4f1f) (equal? . G4f1e) (eq? . G4f1d) (dynamic-wind . G4f1c) (div0-and-mod0 . G4f1b) (mod0 . G4f1a) (div0 . G4f19) (div-and-mod . G4f18) (mod . G4f17) (div . G4f16) (denominator . G4f15) (cos . G4f14) (cons . G4f13) (complex? . G4f12) (char? . G4f11) (char>? . G4f10) (char>=? . G4f0f) (char=? . G4f0e) (char<? . G4f0d) (char<=? . G4f0c) (char->integer . G4f0b) (ceiling . G4f0a) (call-with-values . G4f09) (call/cc . G4f08) (call-with-current-continuation . G4f07) (cddddr . G4f06) (cdddar . G4f05) (cddadr . G4f04) (cddaar . G4f03) (cdaddr . G4f02) (cdadar . G4f01) (cdaadr . G4f00) (cdaaar . G4eff) (cadddr . G4efe) (caddar . G4efd) (cadadr . G4efc) (cadaar . G4efb) (caaddr . G4efa) (caadar . G4ef9) (caaadr . G4ef8) (caaaar . G4ef7) (cdddr . G4ef6) (cddar . G4ef5) (cdadr . G4ef4) (cdaar . G4ef3) (caddr . G4ef2) (cadar . G4ef1) (caadr . G4ef0) (caaar . G4eef) (cddr . G4eee) (cdar . G4eed) (cadr . G4eec) (caar . G4eeb) (cdr . G4eea) (car . G4ee9) (boolean? . G4ee8) (boolean=? . G4ee7) (atan . G4ee6) (assertion-violation . G4ee5) (asin . G4ee4) (apply . G4ee3) (append . G4ee2) (angle . G4ee1) (acos . G4ee0) (abs . G4edf) (/ . G4ede) (* . G4edd) (- . G4edc) (+ . G4edb) (>= . G4eda) (> . G4ed9) (= . G4ed8) (<= . G4ed7) (< . G4ed6) (unquote-splicing . G4ea2) (unquote . G4ea1) (_ . G4ea0) (else . G4e9f) (=> . G4e9e) (... . G4e9d) (assert . G4e9c) (cond . G4e97) (let* . G4e96) (let . G4e95) (let*-values . G4e94) (let-values . G4e93) (identifier-syntax . G4e92) (quasiquote . G4e8f) (syntax-rules . G4e8e) (case . G4e89) (or . G4e85) (and . G4e84) (if . G4e83) (letrec* . G4e82) (letrec . G4e81) (lambda . G4e7e) (quote . G4e7b) (letrec-syntax . G4e79) (let-syntax . G4e78) (set! . G4e77) (begin . G4e75) (define-syntax . G4e73) (define . G4e72)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G514e '(rnrs lists) '(6) '() '() '() '((remove . G504d) (remv . G504c) (remp . G504b) (remq . G504a) (partition . G5049) (memv . G5048) (memq . G5047) (memp . G5046) (member . G5045) (exists . G5044) (for-all . G5043) (fold-right . G5042) (fold-left . G5041) (find . G5040) (filter . G503f) (cons* . G503e) (assv . G503d) (assq . G503c) (assp . G503b) (assoc . G503a)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G514f '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . G50a8) (call-with-input-file . G50a7) (write-char . G50a6) (write . G50a5) (with-output-to-file . G50a4) (with-input-from-file . G50a3) (read-char . G50a2) (read . G50a1) (peek-char . G50a0) (open-output-file . G509f) (open-input-file . G509e) (newline . G509d) (display . G509c) (close-output-port . G509b) (close-input-port . G509a) (eof-object? . G5099) (eof-object . G5098) (current-error-port . G5097) (current-output-port . G5096) (current-input-port . G5095) (output-port? . G5094) (input-port? . G5093) (make-i/o-write-error . G4bd7) (make-i/o-read-error . G4bc2) (make-i/o-port-error . G4c75) (make-i/o-invalid-position-error . G4bed) (make-i/o-filename-error . G4c07) (make-i/o-file-protection-error . G4c20) (make-i/o-file-is-read-only-error . G4c35) (make-i/o-file-does-not-exist-error . G4c5f) (make-i/o-file-already-exists-error . G4c4a) (make-i/o-error . G4bad) (i/o-write-error? . G4bd9) (i/o-read-error? . G4bc4) (i/o-port-error? . G4c79) (i/o-invalid-position-error? . G4bf1) (i/o-filename-error? . G4c0b) (i/o-file-protection-error? . G4c22) (i/o-file-is-read-only-error? . G4c37) (i/o-file-does-not-exist-error? . G4c61) (i/o-file-already-exists-error? . G4c4c) (i/o-error? . G4baf) (i/o-error-port . G4c7b) (i/o-error-filename . G4c0d) (&i/o-port . G4ecf) (&i/o-file-does-not-exist . G4ece) (&i/o-file-already-exists . G4ecd) (&i/o-file-is-read-only . G4ecc) (&i/o-file-protection . G4ecb) (&i/o-filename . G4eca) (&i/o-invalid-position . G4ec9) (&i/o-write . G4ec8) (&i/o-read . G4ec7) (&i/o . G4ec6)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5150 '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . G5069) (utf32->string . G501e) (utf16->string . G501d) (utf8->string . G501c) (uint-list->bytevector . G501b) (u8-list->bytevector . G501a) (string->utf8 . G5019) (string->utf32 . G5018) (string->utf16 . G5017) (sint-list->bytevector . G5016) (native-endianness . G5015) (bytevector? . G5014) (bytevector=? . G5013) (bytevector-uint-set! . G5012) (bytevector-uint-ref . G5011) (bytevector-u8-set! . G5010) (bytevector-u8-ref . G500f) (bytevector-u64-set! . G500e) (bytevector-u64-ref . G500d) (bytevector-u64-native-set! . G500c) (bytevector-u64-native-ref . G500b) (bytevector-u32-set! . G500a) (bytevector-u32-ref . G5009) (bytevector-u32-native-set! . G5008) (bytevector-u32-native-ref . G5007) (bytevector-u16-set! . G5006) (bytevector-u16-ref . G5005) (bytevector-u16-native-set! . G5004) (bytevector-u16-native-ref . G5003) (bytevector-sint-set! . G5002) (bytevector-sint-ref . G5001) (bytevector-s8-set! . G5000) (bytevector-s8-ref . G4fff) (bytevector-s64-set! . G4ffe) (bytevector-s64-ref . G4ffd) (bytevector-s64-native-set! . G4ffc) (bytevector-s64-native-ref . G4ffb) (bytevector-s32-set! . G4ffa) (bytevector-s32-ref . G4ff9) (bytevector-s32-native-set! . G4ff8) (bytevector-s32-native-ref . G4ff7) (bytevector-s16-set! . G4ff6) (bytevector-s16-ref . G4ff5) (bytevector-s16-native-set! . G4ff4) (bytevector-s16-native-ref . G4ff3) (bytevector-length . G4ff2) (bytevector-ieee-single-ref . G4ff1) (bytevector-ieee-single-set! . G4ff0) (bytevector-ieee-single-native-set! . G4fef) (bytevector-ieee-single-native-ref . G4fee) (bytevector-ieee-double-set! . G4fed) (bytevector-ieee-double-ref . G4fec) (bytevector-ieee-double-native-set! . G4feb) (bytevector-ieee-double-native-ref . G4fea) (bytevector-fill! . G4fe9) (bytevector-copy! . G4fe8) (bytevector-copy . G4fe7) (bytevector->uint-list . G4fe6) (bytevector->u8-list . G4fe5) (bytevector->sint-list . G4fe4) (endianness . G4e9b)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5151 '(rnrs unicode) '(6) '() '() '() '((string-upcase . G50f0) (string-titlecase . G50ef) (string-normalize-nfkd . G50ee) (string-normalize-nfkc . G50ed) (string-normalize-nfd . G50ec) (string-normalize-nfc . G50eb) (string-foldcase . G50ea) (string-downcase . G50e9) (string-ci>? . G50e8) (string-ci>=? . G50e7) (string-ci=? . G50e6) (string-ci<? . G50e5) (string-ci<=? . G50e4) (char-whitespace? . G50e3) (char-upper-case? . G50e2) (char-title-case? . G50e1) (char-numeric? . G50e0) (char-lower-case? . G50df) (char-general-category . G50de) (char-upcase . G50dd) (char-titlecase . G50dc) (char-foldcase . G50db) (char-downcase . G50da) (char-ci>? . G50d9) (char-ci>=? . G50d8) (char-ci=? . G50d7) (char-ci<? . G50d6) (char-ci<=? . G50d5) (char-alphabetic? . G50d4)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5152 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . G5033) (raise-continuable . G5032) (raise . G5031) (guard . G4ea7) (else . G4e9f) (=> . G4e9e)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5153 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . G4f88) (bitwise-reverse-bit-field . G4f87) (bitwise-length . G4f86) (bitwise-if . G4f85) (bitwise-first-bit-set . G4f84) (bitwise-copy-bit-field . G4f83) (bitwise-copy-bit . G4f82) (bitwise-bit-set? . G4f81) (bitwise-bit-field . G4f80) (bitwise-bit-count . G4f7f) (bitwise-xor . G4f7e) (bitwise-ior . G4f7d) (bitwise-and . G4f7c) (bitwise-not . G4f7b) (bitwise-arithmetic-shift-right . G4f7a) (bitwise-arithmetic-shift-left . G4f79) (bitwise-arithmetic-shift . G4f78)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5154 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . G4fb5) (fxxor . G4fb4) (fxrotate-bit-field . G4fb3) (fxreverse-bit-field . G4fb2) (fxpositive? . G4fb1) (fxodd? . G4fb0) (fxnot . G4faf) (fxnegative? . G4fae) (fxmod0 . G4fad) (fxmod . G4fac) (fxmin . G4fab) (fxmax . G4faa) (fxlength . G4fa9) (fxior . G4fa8) (fxif . G4fa7) (fxfirst-bit-set . G4fa6) (fxeven? . G4fa5) (fxdiv0-and-mod0 . G4fa4) (fxdiv0 . G4fa3) (fxdiv-and-mod . G4fa2) (fxdiv . G4fa1) (fxcopy-bit-field . G4fa0) (fxcopy-bit . G4f9f) (fxbit-set? . G4f9e) (fxbit-field . G4f9d) (fxbit-count . G4f9c) (fxarithmetic-shift-right . G4f9b) (fxarithmetic-shift-left . G4f9a) (fxarithmetic-shift . G4f99) (fxand . G4f98) (fx>? . G4f97) (fx>=? . G4f96) (fx=? . G4f95) (fx<? . G4f94) (fx<=? . G4f93) (fx-/carry . G4f92) (fx- . G4f91) (fx+/carry . G4f90) (fx+ . G4f8f) (fx*/carry . G4f8e) (fx* . G4f8d) (greatest-fixnum . G4f8c) (least-fixnum . G4f8b) (fixnum-width . G4f8a) (fixnum? . G4f89)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5155 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . G4cd4) (no-infinities-violation? . G4cbf) (make-no-nans-violation . G4cd2) (make-no-infinities-violation . G4cbd) (real->flonum . G4fe3) (flzero? . G4fe2) (fltruncate . G4fe1) (fltan . G4fe0) (flsqrt . G4fdf) (flsin . G4fde) (flround . G4fdd) (flpositive? . G4fdc) (flonum? . G4fdb) (flodd? . G4fda) (flnumerator . G4fd9) (flnegative? . G4fd8) (flnan? . G4fd7) (flmod0 . G4fd6) (flmod . G4fd5) (flmin . G4fd4) (flmax . G4fd3) (fllog . G4fd2) (flinteger? . G4fd1) (flinfinite? . G4fd0) (flfloor . G4fcf) (flfinite? . G4fce) (flexpt . G4fcd) (flexp . G4fcc) (fleven? . G4fcb) (fldiv0-and-mod0 . G4fca) (fldiv0 . G4fc9) (fldiv-and-mod . G4fc8) (fldiv . G4fc7) (fldenominator . G4fc6) (flcos . G4fc5) (flceiling . G4fc4) (flatan . G4fc3) (flasin . G4fc2) (flacos . G4fc1) (flabs . G4fc0) (fl>? . G4fbf) (fl>=? . G4fbe) (fl=? . G4fbd) (fl<? . G4fbc) (fl<=? . G4fbb) (fl/ . G4fba) (fl- . G4fb9) (fl+ . G4fb8) (fl* . G4fb7) (fixnum->flonum . G4fb6) (&no-nans . G4ed3) (&no-infinities . G4ed2)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5156 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . G50bd) (string-ci-hash . G50bc) (string-hash . G50bb) (equal-hash . G50ba) (hashtable-equivalence-function . G50b9) (make-hashtable . G50b8) (hashtable-hash-function . G50b7) (make-eqv-hashtable . G50b6) (make-eq-hashtable . G50b5) (hashtable? . G50b4) (hashtable-update! . G50b3) (hashtable-size . G50b2) (hashtable-set! . G50b1) (hashtable-ref . G50b0) (hashtable-mutable? . G50af) (hashtable-keys . G50ae) (hashtable-entries . G50ad) (hashtable-delete! . G50ac) (hashtable-copy . G50ab) (hashtable-contains? . G50aa) (hashtable-clear! . G50a9)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5157 '(rnrs io ports) '(6) '() '() '() '((eof-object? . G5099) (eof-object . G5098) (current-error-port . G5097) (current-output-port . G5096) (current-input-port . G5095) (output-port? . G5094) (input-port? . G5093) (utf-8-codec . G5092) (utf-16-codec . G5091) (transcoder-error-handling-mode . G5090) (transcoder-eol-style . G508f) (transcoder-codec . G508e) (transcoded-port . G508d) (textual-port? . G508c) (string->bytevector . G508b) (standard-output-port . G508a) (standard-input-port . G5089) (standard-error-port . G5088) (set-port-position! . G5087) (put-u8 . G5086) (put-string . G5085) (put-datum . G5084) (put-char . G5083) (put-bytevector . G5082) (port? . G5081) (port-transcoder . G5080) (port-position . G507f) (port-has-set-port-position!? . G507e) (port-has-port-position? . G507d) (port-eof? . G507c) (output-port-buffer-mode . G507b) (open-string-output-port . G507a) (open-string-input-port . G5079) (open-file-output-port . G5078) (open-file-input/output-port . G5077) (open-file-input-port . G5076) (open-bytevector-output-port . G5075) (open-bytevector-input-port . G5074) (native-transcoder . G5073) (native-eol-style . G5072) (make-transcoder . G5071) (latin-1-codec . G5070) (make-i/o-write-error . G4bd7) (make-i/o-read-error . G4bc2) (make-i/o-port-error . G4c75) (make-i/o-invalid-position-error . G4bed) (make-i/o-filename-error . G4c07) (make-i/o-file-protection-error . G4c20) (make-i/o-file-is-read-only-error . G4c35) (make-i/o-file-does-not-exist-error . G4c5f) (make-i/o-file-already-exists-error . G4c4a) (make-i/o-error . G4bad) (make-i/o-encoding-error . G4ca4) (make-i/o-decoding-error . G4c8e) (make-custom-textual-output-port . G506f) (make-custom-textual-input/output-port . G506e) (make-custom-textual-input-port . G506d) (make-custom-binary-output-port . G506c) (make-custom-binary-input/output-port . G506b) (make-custom-binary-input-port . G506a) (lookahead-u8 . G5068) (lookahead-char . G5067) (i/o-write-error? . G4bd9) (i/o-read-error? . G4bc4) (i/o-port-error? . G4c79) (i/o-invalid-position-error? . G4bf1) (i/o-filename-error? . G4c0b) (i/o-file-protection-error? . G4c22) (i/o-file-is-read-only-error? . G4c37) (i/o-file-does-not-exist-error? . G4c61) (i/o-file-already-exists-error? . G4c4c) (i/o-error? . G4baf) (i/o-error-port . G4c7b) (i/o-error-filename . G4c0d) (i/o-encoding-error? . G4ca8) (i/o-encoding-error-char . G4caa) (i/o-decoding-error? . G4c90) (get-u8 . G5066) (get-string-n! . G5065) (get-string-n . G5064) (get-string-all . G5063) (get-line . G5062) (get-datum . G5061) (get-char . G5060) (get-bytevector-some . G505f) (get-bytevector-n! . G505e) (get-bytevector-n . G505d) (get-bytevector-all . G505c) (flush-output-port . G505b) (close-port . G505a) (call-with-string-output-port . G5039) (call-with-port . G5038) (call-with-bytevector-output-port . G5037) (bytevector->string . G5036) (buffer-mode? . G5035) (binary-port? . G5034) (&i/o-encoding . G4ed1) (&i/o-decoding . G4ed0) (&i/o-port . G4ecf) (&i/o-file-does-not-exist . G4ece) (&i/o-file-already-exists . G4ecd) (&i/o-file-is-read-only . G4ecc) (&i/o-file-protection . G4ecb) (&i/o-filename . G4eca) (&i/o-invalid-position . G4ec9) (&i/o-write . G4ec8) (&i/o-read . G4ec7) (&i/o . G4ec6) (error-handling-mode . G4eab) (file-options . G4eaa) (buffer-mode . G4ea9) (eol-style . G4ea8)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5158 '(rnrs enums) '(6) '() '() '() '((make-enumeration . G5030) (enum-set=? . G502f) (enum-set-universe . G502e) (enum-set-union . G502d) (enum-set-subset? . G502c) (enum-set-projection . G502b) (enum-set-member? . G502a) (enum-set-intersection . G5029) (enum-set-indexer . G5028) (enum-set-difference . G5027) (enum-set-constructor . G5026) (enum-set-complement . G5025) (enum-set->list . G5024) (define-enumeration . G4eb6)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G5159 '(rnrs conditions) '(6) '() '() '() '((who-condition? . G4b25) (warning? . G4a9f) (violation? . G4ade) (undefined-violation? . G4b9a) (syntax-violation? . G4b81) (syntax-violation-subform . G4b85) (syntax-violation-form . G4b83) (syntax-violation . G30fa) (simple-conditions . G5023) (serious-condition? . G4ab4) (non-continuable-violation? . G4b3c) (message-condition? . G4a88) (make-who-condition . G4b21) (make-warning . G4a9d) (make-violation . G4adc) (make-undefined-violation . G4b98) (make-syntax-violation . G4b7b) (make-serious-condition . G4ab2) (make-non-continuable-violation . G4b3a) (make-message-condition . G4a84) (make-lexical-violation . G4b64) (make-irritants-condition . G4b07) (make-implementation-restriction-violation . G4b4f) (make-error . G4ac7) (make-assertion-violation . G4af1) (lexical-violation? . G4b66) (irritants-condition? . G4b0b) (implementation-restriction-violation? . G4b51) (error? . G4ac9) (condition-who . G4b27) (condition-predicate . G5022) (condition-message . G4a8a) (condition-irritants . G4b0d) (condition-accessor . G5021) (condition . G5020) (assertion-violation? . G4af3) (condition? . G501f) (&undefined . G4ec5) (&syntax . G4ec4) (&lexical . G4ec3) (&implementation-restriction . G4ec2) (&non-continuable . G4ec1) (&who . G4ec0) (&irritants . G4ebf) (&assertion . G4ebe) (&violation . G4ebd) (&error . G4ebc) (&serious . G4ebb) (&warning . G4eba) (&message . G4eb9) (&condition . G4eb8) (define-condition-type . G4eb7)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G515a '(rnrs records inspection) '(6) '() '() '() '((record? . G50cc) (record-type-uid . G50cb) (record-type-sealed? . G50ca) (record-type-parent . G50c9) (record-type-opaque? . G50c8) (record-type-name . G50c7) (record-type-generative? . G50c6) (record-type-field-names . G50c5) (record-rtd . G50c4) (record-field-mutable? . G50c3)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G515b '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . G50d3) (record-predicate . G50d2) (record-mutator . G50d1) (record-constructor . G50d0) (record-accessor . G50cf) (make-record-type-descriptor . G50ce) (make-record-constructor-descriptor . G50cd)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G515c '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . G4eb5) (parent-rtd . G4eb4) (nongenerative . G4eb3) (opaque . G4eb2) (sealed . G4eb1) (protocol . G4eb0) (parent . G4eaf) (immutable . G4eae) (mutable . G4ead) (fields . G4eac) (record-constructor-descriptor . G4e8b) (record-type-descriptor . G4e8a)) '() values values '#f '#f '#t '#f) (G2c24@G2ac9@install-library 'G515d '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . G4cd8) (&no-nans-rtd . G4cd6) (&no-infinities-rcd . G4cc3) (&no-infinities-rtd . G4cc1) (&i/o-encoding-rcd . G4cae) (&i/o-encoding-rtd . G4cac) (&i/o-decoding-rcd . G4c94) (&i/o-decoding-rtd . G4c92) (&i/o-port-rcd . G4c7f) (&i/o-port-rtd . G4c7d) (&i/o-file-does-not-exist-rcd . G4c65) (&i/o-file-does-not-exist-rtd . G4c63) (&i/o-file-already-exists-rcd . G4c50) (&i/o-file-already-exists-rtd . G4c4e) (&i/o-file-is-read-only-rcd . G4c3b) (&i/o-file-is-read-only-rtd . G4c39) (&i/o-file-protection-rcd . G4c26) (&i/o-file-protection-rtd . G4c24) (&i/o-filename-rcd . G4c11) (&i/o-filename-rtd . G4c0f) (&i/o-invalid-position-rcd . G4bf7) (&i/o-invalid-position-rtd . G4bf5) (&i/o-write-rcd . G4bdd) (&i/o-write-rtd . G4bdb) (&i/o-read-rcd . G4bc8) (&i/o-read-rtd . G4bc6) (&i/o-rcd . G4bb3) (&i/o-rtd . G4bb1) (&undefined-rcd . G4b9e) (&undefined-rtd . G4b9c) (&syntax-rcd . G4b89) (&syntax-rtd . G4b87) (&lexical-rcd . G4b6a) (&lexical-rtd . G4b68) (&implementation-restriction-rcd . G4b55) (&implementation-restriction-rtd . G4b53) (&non-continuable-rcd . G4b40) (&non-continuable-rtd . G4b3e) (&who-rcd . G4b2b) (&who-rtd . G4b29) (&irritants-rcd . G4b11) (&irritants-rtd . G4b0f) (&assertion-rcd . G4af7) (&assertion-rtd . G4af5) (&violation-rcd . G4ae2) (&violation-rtd . G4ae0) (&error-rcd . G4acd) (&error-rtd . G4acb) (&serious-rcd . G4ab8) (&serious-rtd . G4ab6) (&warning-rcd . G4aa3) (&warning-rtd . G4aa1) (&message-rcd . G4a8e) (&message-rtd . G4a8c) (&condition-rcd . G4a31) (&condition-rtd . G4a2f) (syntax-error . G30f4) (syntax-dispatch . G300d) (pretty-print . G513d) (eval-core . G513c) (set-symbol-value! . G513b) (symbol-value . G513a) (gensym . G5139) (void . G5138) (load . G4dd9) (interaction-environment . G3106) (char-ready? . G5137) (regexp? . G5136) (read-line . G5135) (dotted-list? . G5134) (circular-list? . G5133) (proper-list? . G5132) (circular-list . G5131) (last . G5130) (last-pair . G512f) (not-pair? . G512e) (split-at! . G512d) (split-at . G512c) (list= . G512b) (list-copy . G512a) (list-tabulate . G5129) (make-list . G5128) (xcons . G5127) (tenth . G5126) (ninth . G5125) (eighth . G5124) (seventh . G5123) (sixth . G5122) (fifth . G5121) (drop-right! . G5120) (drop-right . G511f) (take-right . G511e) (take! . G511d) (drop . G511c) (take . G511b) (car+cdr . G511a) (third . G5119) (second . G5118) (first . G5117) (iota . G5116) (every . G5115) (assoc-ref . G5114) (alist-cons . G5113) (append-map . G5112) (print . G5111) (format . G5110) (standard-library-path . G510f) (file-newer? . G510e) (stat-mtime . G510d) (current-directory . G510c) (write-to-file . G510b) (file->list . G510a) (file->string . G5109) (digit->integer . G5108) (call-with-string-input-port . G5107) (call-with-string-io . G5106) (string-split . G5105) (bytevector-for-each . G5104) (string->regexp . G5103) (rxmatch . G5102) (regexp-replace-all . G5101) (hashtable-for-each . G5100) (readdir . G50ff) (get-environment-variables . G50fe) (get-environment-variable . G50fd) (get-timeofday . G50fc) (get-command-line . G50fb) (sys-display . G50fa) (source-info . G50f9) (make-compiler-instruction . G50f8) (make-instruction . G50f7) (set-source-info! . G50f6) (bignum? . G50f5) (make-complex . G50f4) (fasl-read . G50f3) (fasl-write . G50f2) (receive . G50f1) (make-parameter . G28e3) (string-upcase . G50f0) (string-titlecase . G50ef) (string-normalize-nfkd . G50ee) (string-normalize-nfkc . G50ed) (string-normalize-nfd . G50ec) (string-normalize-nfc . G50eb) (string-foldcase . G50ea) (string-downcase . G50e9) (string-ci>? . G50e8) (string-ci>=? . G50e7) (string-ci=? . G50e6) (string-ci<? . G50e5) (string-ci<=? . G50e4) (char-whitespace? . G50e3) (char-upper-case? . G50e2) (char-title-case? . G50e1) (char-numeric? . G50e0) (char-lower-case? . G50df) (char-general-category . G50de) (char-upcase . G50dd) (char-titlecase . G50dc) (char-foldcase . G50db) (char-downcase . G50da) (char-ci>? . G50d9) (char-ci>=? . G50d8) (char-ci=? . G50d7) (char-ci<? . G50d6) (char-ci<=? . G50d5) (char-alphabetic? . G50d4) (make-variable-transformer . G2e48) (identifier? . G30fc) (generate-temporaries . G30e6) (free-identifier=? . G30e8) (syntax->datum . G3100) (datum->syntax . G30fe) (bound-identifier=? . G30ea) (record-type-descriptor? . G50d3) (record-predicate . G50d2) (record-mutator . G50d1) (record-constructor . G50d0) (record-accessor . G50cf) (make-record-type-descriptor . G50ce) (make-record-constructor-descriptor . G50cd) (record? . G50cc) (record-type-uid . G50cb) (record-type-sealed? . G50ca) (record-type-parent . G50c9) (record-type-opaque? . G50c8) (record-type-name . G50c7) (record-type-generative? . G50c6) (record-type-field-names . G50c5) (record-rtd . G50c4) (record-field-mutable? . G50c3) (delete-file . G50c2) (file-exists? . G50c1) (vector-sort! . G50c0) (vector-sort . G50bf) (list-sort . G50be) (symbol-hash . G50bd) (string-ci-hash . G50bc) (string-hash . G50bb) (equal-hash . G50ba) (hashtable-equivalence-function . G50b9) (make-hashtable . G50b8) (hashtable-hash-function . G50b7) (make-eqv-hashtable . G50b6) (make-eq-hashtable . G50b5) (hashtable? . G50b4) (hashtable-update! . G50b3) (hashtable-size . G50b2) (hashtable-set! . G50b1) (hashtable-ref . G50b0) (hashtable-mutable? . G50af) (hashtable-keys . G50ae) (hashtable-entries . G50ad) (hashtable-delete! . G50ac) (hashtable-copy . G50ab) (hashtable-contains? . G50aa) (hashtable-clear! . G50a9) (call-with-output-file . G50a8) (call-with-input-file . G50a7) (write-char . G50a6) (write . G50a5) (with-output-to-file . G50a4) (with-input-from-file . G50a3) (read-char . G50a2) (read . G50a1) (peek-char . G50a0) (open-output-file . G509f) (open-input-file . G509e) (newline . G509d) (display . G509c) (close-output-port . G509b) (close-input-port . G509a) (eof-object? . G5099) (eof-object . G5098) (current-error-port . G5097) (current-output-port . G5096) (current-input-port . G5095) (output-port? . G5094) (input-port? . G5093) (utf-8-codec . G5092) (utf-16-codec . G5091) (transcoder-error-handling-mode . G5090) (transcoder-eol-style . G508f) (transcoder-codec . G508e) (transcoded-port . G508d) (textual-port? . G508c) (string->bytevector . G508b) (standard-output-port . G508a) (standard-input-port . G5089) (standard-error-port . G5088) (set-port-position! . G5087) (put-u8 . G5086) (put-string . G5085) (put-datum . G5084) (put-char . G5083) (put-bytevector . G5082) (port? . G5081) (port-transcoder . G5080) (port-position . G507f) (port-has-set-port-position!? . G507e) (port-has-port-position? . G507d) (port-eof? . G507c) (output-port-buffer-mode . G507b) (open-string-output-port . G507a) (open-string-input-port . G5079) (open-file-output-port . G5078) (open-file-input/output-port . G5077) (open-file-input-port . G5076) (open-bytevector-output-port . G5075) (open-bytevector-input-port . G5074) (native-transcoder . G5073) (native-eol-style . G5072) (make-transcoder . G5071) (latin-1-codec . G5070) (make-i/o-write-error . G4bd7) (make-i/o-read-error . G4bc2) (make-i/o-port-error . G4c75) (make-i/o-invalid-position-error . G4bed) (make-i/o-filename-error . G4c07) (make-i/o-file-protection-error . G4c20) (make-i/o-file-is-read-only-error . G4c35) (make-i/o-file-does-not-exist-error . G4c5f) (make-i/o-file-already-exists-error . G4c4a) (make-i/o-error . G4bad) (make-i/o-encoding-error . G4ca4) (make-i/o-decoding-error . G4c8e) (make-custom-textual-output-port . G506f) (make-custom-textual-input/output-port . G506e) (make-custom-textual-input-port . G506d) (make-custom-binary-output-port . G506c) (make-custom-binary-input/output-port . G506b) (make-custom-binary-input-port . G506a) (make-bytevector . G5069) (lookahead-u8 . G5068) (lookahead-char . G5067) (i/o-write-error? . G4bd9) (i/o-read-error? . G4bc4) (i/o-port-error? . G4c79) (i/o-invalid-position-error? . G4bf1) (i/o-filename-error? . G4c0b) (i/o-file-protection-error? . G4c22) (i/o-file-is-read-only-error? . G4c37) (i/o-file-does-not-exist-error? . G4c61) (i/o-file-already-exists-error? . G4c4c) (i/o-error? . G4baf) (i/o-error-port . G4c7b) (i/o-error-filename . G4c0d) (i/o-encoding-error? . G4ca8) (i/o-encoding-error-char . G4caa) (i/o-decoding-error? . G4c90) (get-u8 . G5066) (get-string-n! . G5065) (get-string-n . G5064) (get-string-all . G5063) (get-line . G5062) (get-datum . G5061) (get-char . G5060) (get-bytevector-some . G505f) (get-bytevector-n! . G505e) (get-bytevector-n . G505d) (get-bytevector-all . G505c) (flush-output-port . G505b) (close-port . G505a) (scheme-report-environment . G30d4) (quotient . G5059) (null-environment . G30d2) (remainder . G5058) (modulo . G5057) (inexact->exact . G5056) (force . G5055) (exact->inexact . G5054) (make-promise . G5053) (exit . G5052) (command-line . G4dd3) (string-fill! . G5051) (string-set! . G5050) (set-cdr! . G504f) (set-car! . G504e) (remove . G504d) (remv . G504c) (remp . G504b) (remq . G504a) (partition . G5049) (memv . G5048) (memq . G5047) (memp . G5046) (member . G5045) (exists . G5044) (for-all . G5043) (fold-right . G5042) (fold-left . G5041) (find . G5040) (filter . G503f) (cons* . G503e) (assv . G503d) (assq . G503c) (assp . G503b) (assoc . G503a) (call-with-string-output-port . G5039) (call-with-port . G5038) (call-with-bytevector-output-port . G5037) (bytevector->string . G5036) (buffer-mode? . G5035) (binary-port? . G5034) (with-exception-handler . G5033) (raise-continuable . G5032) (raise . G5031) (eval . G30d8) (environment . G30d0) (make-enumeration . G5030) (enum-set=? . G502f) (enum-set-universe . G502e) (enum-set-union . G502d) (enum-set-subset? . G502c) (enum-set-projection . G502b) (enum-set-member? . G502a) (enum-set-intersection . G5029) (enum-set-indexer . G5028) (enum-set-difference . G5027) (enum-set-constructor . G5026) (enum-set-complement . G5025) (enum-set->list . G5024) (who-condition? . G4b25) (warning? . G4a9f) (violation? . G4ade) (undefined-violation? . G4b9a) (syntax-violation? . G4b81) (syntax-violation-subform . G4b85) (syntax-violation-form . G4b83) (syntax-violation . G30fa) (simple-conditions . G5023) (serious-condition? . G4ab4) (non-continuable-violation? . G4b3c) (message-condition? . G4a88) (make-who-condition . G4b21) (make-warning . G4a9d) (make-violation . G4adc) (make-undefined-violation . G4b98) (make-syntax-violation . G4b7b) (make-serious-condition . G4ab2) (make-non-continuable-violation . G4b3a) (make-message-condition . G4a84) (make-lexical-violation . G4b64) (make-irritants-condition . G4b07) (make-implementation-restriction-violation . G4b4f) (make-error . G4ac7) (make-assertion-violation . G4af1) (lexical-violation? . G4b66) (irritants-condition? . G4b0b) (implementation-restriction-violation? . G4b51) (error? . G4ac9) (condition-who . G4b27) (condition-predicate . G5022) (condition-message . G4a8a) (condition-irritants . G4b0d) (condition-accessor . G5021) (condition . G5020) (assertion-violation? . G4af3) (condition? . G501f) (utf32->string . G501e) (utf16->string . G501d) (utf8->string . G501c) (uint-list->bytevector . G501b) (u8-list->bytevector . G501a) (string->utf8 . G5019) (string->utf32 . G5018) (string->utf16 . G5017) (sint-list->bytevector . G5016) (native-endianness . G5015) (bytevector? . G5014) (bytevector=? . G5013) (bytevector-uint-set! . G5012) (bytevector-uint-ref . G5011) (bytevector-u8-set! . G5010) (bytevector-u8-ref . G500f) (bytevector-u64-set! . G500e) (bytevector-u64-ref . G500d) (bytevector-u64-native-set! . G500c) (bytevector-u64-native-ref . G500b) (bytevector-u32-set! . G500a) (bytevector-u32-ref . G5009) (bytevector-u32-native-set! . G5008) (bytevector-u32-native-ref . G5007) (bytevector-u16-set! . G5006) (bytevector-u16-ref . G5005) (bytevector-u16-native-set! . G5004) (bytevector-u16-native-ref . G5003) (bytevector-sint-set! . G5002) (bytevector-sint-ref . G5001) (bytevector-s8-set! . G5000) (bytevector-s8-ref . G4fff) (bytevector-s64-set! . G4ffe) (bytevector-s64-ref . G4ffd) (bytevector-s64-native-set! . G4ffc) (bytevector-s64-native-ref . G4ffb) (bytevector-s32-set! . G4ffa) (bytevector-s32-ref . G4ff9) (bytevector-s32-native-set! . G4ff8) (bytevector-s32-native-ref . G4ff7) (bytevector-s16-set! . G4ff6) (bytevector-s16-ref . G4ff5) (bytevector-s16-native-set! . G4ff4) (bytevector-s16-native-ref . G4ff3) (bytevector-length . G4ff2) (bytevector-ieee-single-ref . G4ff1) (bytevector-ieee-single-set! . G4ff0) (bytevector-ieee-single-native-set! . G4fef) (bytevector-ieee-single-native-ref . G4fee) (bytevector-ieee-double-set! . G4fed) (bytevector-ieee-double-ref . G4fec) (bytevector-ieee-double-native-set! . G4feb) (bytevector-ieee-double-native-ref . G4fea) (bytevector-fill! . G4fe9) (bytevector-copy! . G4fe8) (bytevector-copy . G4fe7) (bytevector->uint-list . G4fe6) (bytevector->u8-list . G4fe5) (bytevector->sint-list . G4fe4) (no-nans-violation? . G4cd4) (no-infinities-violation? . G4cbf) (make-no-nans-violation . G4cd2) (make-no-infinities-violation . G4cbd) (real->flonum . G4fe3) (flzero? . G4fe2) (fltruncate . G4fe1) (fltan . G4fe0) (flsqrt . G4fdf) (flsin . G4fde) (flround . G4fdd) (flpositive? . G4fdc) (flonum? . G4fdb) (flodd? . G4fda) (flnumerator . G4fd9) (flnegative? . G4fd8) (flnan? . G4fd7) (flmod0 . G4fd6) (flmod . G4fd5) (flmin . G4fd4) (flmax . G4fd3) (fllog . G4fd2) (flinteger? . G4fd1) (flinfinite? . G4fd0) (flfloor . G4fcf) (flfinite? . G4fce) (flexpt . G4fcd) (flexp . G4fcc) (fleven? . G4fcb) (fldiv0-and-mod0 . G4fca) (fldiv0 . G4fc9) (fldiv-and-mod . G4fc8) (fldiv . G4fc7) (fldenominator . G4fc6) (flcos . G4fc5) (flceiling . G4fc4) (flatan . G4fc3) (flasin . G4fc2) (flacos . G4fc1) (flabs . G4fc0) (fl>? . G4fbf) (fl>=? . G4fbe) (fl=? . G4fbd) (fl<? . G4fbc) (fl<=? . G4fbb) (fl/ . G4fba) (fl- . G4fb9) (fl+ . G4fb8) (fl* . G4fb7) (fixnum->flonum . G4fb6) (fxzero? . G4fb5) (fxxor . G4fb4) (fxrotate-bit-field . G4fb3) (fxreverse-bit-field . G4fb2) (fxpositive? . G4fb1) (fxodd? . G4fb0) (fxnot . G4faf) (fxnegative? . G4fae) (fxmod0 . G4fad) (fxmod . G4fac) (fxmin . G4fab) (fxmax . G4faa) (fxlength . G4fa9) (fxior . G4fa8) (fxif . G4fa7) (fxfirst-bit-set . G4fa6) (fxeven? . G4fa5) (fxdiv0-and-mod0 . G4fa4) (fxdiv0 . G4fa3) (fxdiv-and-mod . G4fa2) (fxdiv . G4fa1) (fxcopy-bit-field . G4fa0) (fxcopy-bit . G4f9f) (fxbit-set? . G4f9e) (fxbit-field . G4f9d) (fxbit-count . G4f9c) (fxarithmetic-shift-right . G4f9b) (fxarithmetic-shift-left . G4f9a) (fxarithmetic-shift . G4f99) (fxand . G4f98) (fx>? . G4f97) (fx>=? . G4f96) (fx=? . G4f95) (fx<? . G4f94) (fx<=? . G4f93) (fx-/carry . G4f92) (fx- . G4f91) (fx+/carry . G4f90) (fx+ . G4f8f) (fx*/carry . G4f8e) (fx* . G4f8d) (greatest-fixnum . G4f8c) (least-fixnum . G4f8b) (fixnum-width . G4f8a) (fixnum? . G4f89) (bitwise-rotate-bit-field . G4f88) (bitwise-reverse-bit-field . G4f87) (bitwise-length . G4f86) (bitwise-if . G4f85) (bitwise-first-bit-set . G4f84) (bitwise-copy-bit-field . G4f83) (bitwise-copy-bit . G4f82) (bitwise-bit-set? . G4f81) (bitwise-bit-field . G4f80) (bitwise-bit-count . G4f7f) (bitwise-xor . G4f7e) (bitwise-ior . G4f7d) (bitwise-and . G4f7c) (bitwise-not . G4f7b) (bitwise-arithmetic-shift-right . G4f7a) (bitwise-arithmetic-shift-left . G4f79) (bitwise-arithmetic-shift . G4f78) (zero? . G4f77) (vector? . G4f76) (vector-set! . G4f75) (vector-ref . G4f74) (vector-map . G4f73) (vector-length . G4f72) (vector-for-each . G4f71) (vector-fill! . G4f70) (vector->list . G4f6f) (vector . G4f6e) (values . G4f6d) (truncate . G4f6c) (tan . G4f6b) (symbol? . G4f6a) (symbol=? . G4f69) (symbol->string . G4f68) (substring . G4f67) (string? . G4f66) (string>? . G4f65) (string>=? . G4f64) (string=? . G4f63) (string<? . G4f62) (string<=? . G4f61) (string-ref . G4f60) (string-length . G4f5f) (string-for-each . G4f5e) (string-copy . G4f5d) (string-append . G4f5c) (string->symbol . G4f5b) (string->number . G4f5a) (string->list . G4f59) (string . G4f58) (sqrt . G4f57) (sin . G4f56) (round . G4f55) (reverse . G4f54) (real? . G4f53) (real-valued? . G4f52) (real-part . G4f51) (rationalize . G4f50) (rational? . G4f4f) (rational-valued? . G4f4e) (procedure? . G4f4d) (positive? . G4f4c) (pair? . G4f4b) (odd? . G4f4a) (numerator . G4f49) (number? . G4f48) (number->string . G4f47) (null? . G4f46) (not . G4f45) (negative? . G4f44) (nan? . G4f43) (min . G4f42) (max . G4f41) (map . G4f40) (make-vector . G4f3f) (make-string . G4f3e) (make-rectangular . G4f3d) (make-polar . G4f3c) (magnitude . G4f3b) (log . G4f3a) (list? . G4f39) (list-tail . G4f38) (list-ref . G4f37) (list->vector . G4f36) (list->string . G4f35) (list . G4f34) (length . G4f33) (lcm . G4f32) (integer? . G4f31) (integer-valued? . G4f30) (integer->char . G4f2f) (infinite? . G4f2e) (inexact? . G4f2d) (inexact . G4f2c) (imag-part . G4f2b) (gcd . G4f2a) (for-each . G4f29) (floor . G4f28) (finite? . G4f27) (expt . G4f26) (exp . G4f25) (exact? . G4f24) (exact-integer-sqrt . G4f23) (exact . G4f22) (even? . G4f21) (error . G4f20) (eqv? . G4f1f) (equal? . G4f1e) (eq? . G4f1d) (dynamic-wind . G4f1c) (div0-and-mod0 . G4f1b) (mod0 . G4f1a) (div0 . G4f19) (div-and-mod . G4f18) (mod . G4f17) (div . G4f16) (denominator . G4f15) (cos . G4f14) (cons . G4f13) (complex? . G4f12) (char? . G4f11) (char>? . G4f10) (char>=? . G4f0f) (char=? . G4f0e) (char<? . G4f0d) (char<=? . G4f0c) (char->integer . G4f0b) (ceiling . G4f0a) (call-with-values . G4f09) (call/cc . G4f08) (call-with-current-continuation . G4f07) (cddddr . G4f06) (cdddar . G4f05) (cddadr . G4f04) (cddaar . G4f03) (cdaddr . G4f02) (cdadar . G4f01) (cdaadr . G4f00) (cdaaar . G4eff) (cadddr . G4efe) (caddar . G4efd) (cadadr . G4efc) (cadaar . G4efb) (caaddr . G4efa) (caadar . G4ef9) (caaadr . G4ef8) (caaaar . G4ef7) (cdddr . G4ef6) (cddar . G4ef5) (cdadr . G4ef4) (cdaar . G4ef3) (caddr . G4ef2) (cadar . G4ef1) (caadr . G4ef0) (caaar . G4eef) (cddr . G4eee) (cdar . G4eed) (cadr . G4eec) (caar . G4eeb) (cdr . G4eea) (car . G4ee9) (boolean? . G4ee8) (boolean=? . G4ee7) (atan . G4ee6) (assertion-violation . G4ee5) (asin . G4ee4) (apply . G4ee3) (append . G4ee2) (angle . G4ee1) (acos . G4ee0) (abs . G4edf) (/ . G4ede) (* . G4edd) (- . G4edc) (+ . G4edb) (>= . G4eda) (> . G4ed9) (= . G4ed8) (<= . G4ed7) (< . G4ed6) (library . G4ed5) (export . G4ed4) (&no-nans . G4ed3) (&no-infinities . G4ed2) (&i/o-encoding . G4ed1) (&i/o-decoding . G4ed0) (&i/o-port . G4ecf) (&i/o-file-does-not-exist . G4ece) (&i/o-file-already-exists . G4ecd) (&i/o-file-is-read-only . G4ecc) (&i/o-file-protection . G4ecb) (&i/o-filename . G4eca) (&i/o-invalid-position . G4ec9) (&i/o-write . G4ec8) (&i/o-read . G4ec7) (&i/o . G4ec6) (&undefined . G4ec5) (&syntax . G4ec4) (&lexical . G4ec3) (&implementation-restriction . G4ec2) (&non-continuable . G4ec1) (&who . G4ec0) (&irritants . G4ebf) (&assertion . G4ebe) (&violation . G4ebd) (&error . G4ebc) (&serious . G4ebb) (&warning . G4eba) (&message . G4eb9) (&condition . G4eb8) (define-condition-type . G4eb7) (define-enumeration . G4eb6) (define-record-type . G4eb5) (parent-rtd . G4eb4) (nongenerative . G4eb3) (opaque . G4eb2) (sealed . G4eb1) (protocol . G4eb0) (parent . G4eaf) (immutable . G4eae) (mutable . G4ead) (fields . G4eac) (error-handling-mode . G4eab) (file-options . G4eaa) (buffer-mode . G4ea9) (eol-style . G4ea8) (guard . G4ea7) (trace-define . G4ea6) (trace-lambda . G4ea5) (unsyntax-splicing . G4ea4) (unsyntax . G4ea3) (unquote-splicing . G4ea2) (unquote . G4ea1) (_ . G4ea0) (else . G4e9f) (=> . G4e9e) (... . G4e9d) (assert . G4e9c) (endianness . G4e9b) (delay . G4e9a) (time . G4e99) (do . G4e98) (cond . G4e97) (let* . G4e96) (let . G4e95) (let*-values . G4e94) (let-values . G4e93) (identifier-syntax . G4e92) (with-syntax . G4e91) (quasisyntax . G4e90) (quasiquote . G4e8f) (syntax-rules . G4e8e) (include . G4e8d) (define-struct . G4e8c) (record-constructor-descriptor . G4e8b) (record-type-descriptor . G4e8a) (case . G4e89) (parameterize . G4e88) (unless . G4e87) (when . G4e86) (or . G4e85) (and . G4e84) (if . G4e83) (letrec* . G4e82) (letrec . G4e81) (type-descriptor . G4e80) (case-lambda . G4e7f) (lambda . G4e7e) (syntax . G4e7d) (syntax-case . G4e7c) (quote . G4e7b) (foreign-call . G4e7a) (letrec-syntax . G4e79) (let-syntax . G4e78) (set! . G4e77) (import . G4e76) (begin . G4e75) (module . G4e74) (define-syntax . G4e73) (define . G4e72)) '((G4cd8 core-prim . &no-nans-rcd) (G4cd6 core-prim . &no-nans-rtd) (G4cc3 core-prim . &no-infinities-rcd) (G4cc1 core-prim . &no-infinities-rtd) (G4cae core-prim . &i/o-encoding-rcd) (G4cac core-prim . &i/o-encoding-rtd) (G4c94 core-prim . &i/o-decoding-rcd) (G4c92 core-prim . &i/o-decoding-rtd) (G4c7f core-prim . &i/o-port-rcd) (G4c7d core-prim . &i/o-port-rtd) (G4c65 core-prim . &i/o-file-does-not-exist-rcd) (G4c63 core-prim . &i/o-file-does-not-exist-rtd) (G4c50 core-prim . &i/o-file-already-exists-rcd) (G4c4e core-prim . &i/o-file-already-exists-rtd) (G4c3b core-prim . &i/o-file-is-read-only-rcd) (G4c39 core-prim . &i/o-file-is-read-only-rtd) (G4c26 core-prim . &i/o-file-protection-rcd) (G4c24 core-prim . &i/o-file-protection-rtd) (G4c11 core-prim . &i/o-filename-rcd) (G4c0f core-prim . &i/o-filename-rtd) (G4bf7 core-prim . &i/o-invalid-position-rcd) (G4bf5 core-prim . &i/o-invalid-position-rtd) (G4bdd core-prim . &i/o-write-rcd) (G4bdb core-prim . &i/o-write-rtd) (G4bc8 core-prim . &i/o-read-rcd) (G4bc6 core-prim . &i/o-read-rtd) (G4bb3 core-prim . &i/o-rcd) (G4bb1 core-prim . &i/o-rtd) (G4b9e core-prim . &undefined-rcd) (G4b9c core-prim . &undefined-rtd) (G4b89 core-prim . &syntax-rcd) (G4b87 core-prim . &syntax-rtd) (G4b6a core-prim . &lexical-rcd) (G4b68 core-prim . &lexical-rtd) (G4b55 core-prim . &implementation-restriction-rcd) (G4b53 core-prim . &implementation-restriction-rtd) (G4b40 core-prim . &non-continuable-rcd) (G4b3e core-prim . &non-continuable-rtd) (G4b2b core-prim . &who-rcd) (G4b29 core-prim . &who-rtd) (G4b11 core-prim . &irritants-rcd) (G4b0f core-prim . &irritants-rtd) (G4af7 core-prim . &assertion-rcd) (G4af5 core-prim . &assertion-rtd) (G4ae2 core-prim . &violation-rcd) (G4ae0 core-prim . &violation-rtd) (G4acd core-prim . &error-rcd) (G4acb core-prim . &error-rtd) (G4ab8 core-prim . &serious-rcd) (G4ab6 core-prim . &serious-rtd) (G4aa3 core-prim . &warning-rcd) (G4aa1 core-prim . &warning-rtd) (G4a8e core-prim . &message-rcd) (G4a8c core-prim . &message-rtd) (G4a31 core-prim . &condition-rcd) (G4a2f core-prim . &condition-rtd) (G30f4 core-prim . syntax-error) (G300d core-prim . syntax-dispatch) (G513d core-prim . pretty-print) (G513c core-prim . eval-core) (G513b core-prim . set-symbol-value!) (G513a core-prim . symbol-value) (G5139 core-prim . gensym) (G5138 core-prim . void) (G4dd9 core-prim . load) (G3106 core-prim . interaction-environment) (G5137 core-prim . char-ready?) (G5136 core-prim . regexp?) (G5135 core-prim . read-line) (G5134 core-prim . dotted-list?) (G5133 core-prim . circular-list?) (G5132 core-prim . proper-list?) (G5131 core-prim . circular-list) (G5130 core-prim . last) (G512f core-prim . last-pair) (G512e core-prim . not-pair?) (G512d core-prim . split-at!) (G512c core-prim . split-at) (G512b core-prim . list=) (G512a core-prim . list-copy) (G5129 core-prim . list-tabulate) (G5128 core-prim . make-list) (G5127 core-prim . xcons) (G5126 core-prim . tenth) (G5125 core-prim . ninth) (G5124 core-prim . eighth) (G5123 core-prim . seventh) (G5122 core-prim . sixth) (G5121 core-prim . fifth) (G5120 core-prim . drop-right!) (G511f core-prim . drop-right) (G511e core-prim . take-right) (G511d core-prim . take!) (G511c core-prim . drop) (G511b core-prim . take) (G511a core-prim . car+cdr) (G5119 core-prim . third) (G5118 core-prim . second) (G5117 core-prim . first) (G5116 core-prim . iota) (G5115 core-prim . every) (G5114 core-prim . assoc-ref) (G5113 core-prim . alist-cons) (G5112 core-prim . append-map) (G5111 core-prim . print) (G5110 core-prim . format) (G510f core-prim . standard-library-path) (G510e core-prim . file-newer?) (G510d core-prim . stat-mtime) (G510c core-prim . current-directory) (G510b core-prim . write-to-file) (G510a core-prim . file->list) (G5109 core-prim . file->string) (G5108 core-prim . digit->integer) (G5107 core-prim . call-with-string-input-port) (G5106 core-prim . call-with-string-io) (G5105 core-prim . string-split) (G5104 core-prim . bytevector-for-each) (G5103 core-prim . string->regexp) (G5102 core-prim . rxmatch) (G5101 core-prim . regexp-replace-all) (G5100 core-prim . hashtable-for-each) (G50ff core-prim . readdir) (G50fe core-prim . get-environment-variables) (G50fd core-prim . get-environment-variable) (G50fc core-prim . get-timeofday) (G50fb core-prim . get-command-line) (G50fa core-prim . sys-display) (G50f9 core-prim . source-info) (G50f8 core-prim . make-compiler-instruction) (G50f7 core-prim . make-instruction) (G50f6 core-prim . set-source-info!) (G50f5 core-prim . bignum?) (G50f4 core-prim . make-complex) (G50f3 core-prim . fasl-read) (G50f2 core-prim . fasl-write) (G50f1 core-prim . receive) (G28e3 core-prim . make-parameter) (G50f0 core-prim . string-upcase) (G50ef core-prim . string-titlecase) (G50ee core-prim . string-normalize-nfkd) (G50ed core-prim . string-normalize-nfkc) (G50ec core-prim . string-normalize-nfd) (G50eb core-prim . string-normalize-nfc) (G50ea core-prim . string-foldcase) (G50e9 core-prim . string-downcase) (G50e8 core-prim . string-ci>?) (G50e7 core-prim . string-ci>=?) (G50e6 core-prim . string-ci=?) (G50e5 core-prim . string-ci<?) (G50e4 core-prim . string-ci<=?) (G50e3 core-prim . char-whitespace?) (G50e2 core-prim . char-upper-case?) (G50e1 core-prim . char-title-case?) (G50e0 core-prim . char-numeric?) (G50df core-prim . char-lower-case?) (G50de core-prim . char-general-category) (G50dd core-prim . char-upcase) (G50dc core-prim . char-titlecase) (G50db core-prim . char-foldcase) (G50da core-prim . char-downcase) (G50d9 core-prim . char-ci>?) (G50d8 core-prim . char-ci>=?) (G50d7 core-prim . char-ci=?) (G50d6 core-prim . char-ci<?) (G50d5 core-prim . char-ci<=?) (G50d4 core-prim . char-alphabetic?) (G2e48 core-prim . make-variable-transformer) (G30fc core-prim . identifier?) (G30e6 core-prim . generate-temporaries) (G30e8 core-prim . free-identifier=?) (G3100 core-prim . syntax->datum) (G30fe core-prim . datum->syntax) (G30ea core-prim . bound-identifier=?) (G50d3 core-prim . record-type-descriptor?) (G50d2 core-prim . record-predicate) (G50d1 core-prim . record-mutator) (G50d0 core-prim . record-constructor) (G50cf core-prim . record-accessor) (G50ce core-prim . make-record-type-descriptor) (G50cd core-prim . make-record-constructor-descriptor) (G50cc core-prim . record?) (G50cb core-prim . record-type-uid) (G50ca core-prim . record-type-sealed?) (G50c9 core-prim . record-type-parent) (G50c8 core-prim . record-type-opaque?) (G50c7 core-prim . record-type-name) (G50c6 core-prim . record-type-generative?) (G50c5 core-prim . record-type-field-names) (G50c4 core-prim . record-rtd) (G50c3 core-prim . record-field-mutable?) (G50c2 core-prim . delete-file) (G50c1 core-prim . file-exists?) (G50c0 core-prim . vector-sort!) (G50bf core-prim . vector-sort) (G50be core-prim . list-sort) (G50bd core-prim . symbol-hash) (G50bc core-prim . string-ci-hash) (G50bb core-prim . string-hash) (G50ba core-prim . equal-hash) (G50b9 core-prim . hashtable-equivalence-function) (G50b8 core-prim . make-hashtable) (G50b7 core-prim . hashtable-hash-function) (G50b6 core-prim . make-eqv-hashtable) (G50b5 core-prim . make-eq-hashtable) (G50b4 core-prim . hashtable?) (G50b3 core-prim . hashtable-update!) (G50b2 core-prim . hashtable-size) (G50b1 core-prim . hashtable-set!) (G50b0 core-prim . hashtable-ref) (G50af core-prim . hashtable-mutable?) (G50ae core-prim . hashtable-keys) (G50ad core-prim . hashtable-entries) (G50ac core-prim . hashtable-delete!) (G50ab core-prim . hashtable-copy) (G50aa core-prim . hashtable-contains?) (G50a9 core-prim . hashtable-clear!) (G50a8 core-prim . call-with-output-file) (G50a7 core-prim . call-with-input-file) (G50a6 core-prim . write-char) (G50a5 core-prim . write) (G50a4 core-prim . with-output-to-file) (G50a3 core-prim . with-input-from-file) (G50a2 core-prim . read-char) (G50a1 core-prim . read) (G50a0 core-prim . peek-char) (G509f core-prim . open-output-file) (G509e core-prim . open-input-file) (G509d core-prim . newline) (G509c core-prim . display) (G509b core-prim . close-output-port) (G509a core-prim . close-input-port) (G5099 core-prim . eof-object?) (G5098 core-prim . eof-object) (G5097 core-prim . current-error-port) (G5096 core-prim . current-output-port) (G5095 core-prim . current-input-port) (G5094 core-prim . output-port?) (G5093 core-prim . input-port?) (G5092 core-prim . utf-8-codec) (G5091 core-prim . utf-16-codec) (G5090 core-prim . transcoder-error-handling-mode) (G508f core-prim . transcoder-eol-style) (G508e core-prim . transcoder-codec) (G508d core-prim . transcoded-port) (G508c core-prim . textual-port?) (G508b core-prim . string->bytevector) (G508a core-prim . standard-output-port) (G5089 core-prim . standard-input-port) (G5088 core-prim . standard-error-port) (G5087 core-prim . set-port-position!) (G5086 core-prim . put-u8) (G5085 core-prim . put-string) (G5084 core-prim . put-datum) (G5083 core-prim . put-char) (G5082 core-prim . put-bytevector) (G5081 core-prim . port?) (G5080 core-prim . port-transcoder) (G507f core-prim . port-position) (G507e core-prim . port-has-set-port-position!?) (G507d core-prim . port-has-port-position?) (G507c core-prim . port-eof?) (G507b core-prim . output-port-buffer-mode) (G507a core-prim . open-string-output-port) (G5079 core-prim . open-string-input-port) (G5078 core-prim . open-file-output-port) (G5077 core-prim . open-file-input/output-port) (G5076 core-prim . open-file-input-port) (G5075 core-prim . open-bytevector-output-port) (G5074 core-prim . open-bytevector-input-port) (G5073 core-prim . native-transcoder) (G5072 core-prim . native-eol-style) (G5071 core-prim . make-transcoder) (G5070 core-prim . latin-1-codec) (G4bd7 core-prim . make-i/o-write-error) (G4bc2 core-prim . make-i/o-read-error) (G4c75 core-prim . make-i/o-port-error) (G4bed core-prim . make-i/o-invalid-position-error) (G4c07 core-prim . make-i/o-filename-error) (G4c20 core-prim . make-i/o-file-protection-error) (G4c35 core-prim . make-i/o-file-is-read-only-error) (G4c5f core-prim . make-i/o-file-does-not-exist-error) (G4c4a core-prim . make-i/o-file-already-exists-error) (G4bad core-prim . make-i/o-error) (G4ca4 core-prim . make-i/o-encoding-error) (G4c8e core-prim . make-i/o-decoding-error) (G506f core-prim . make-custom-textual-output-port) (G506e core-prim . make-custom-textual-input/output-port) (G506d core-prim . make-custom-textual-input-port) (G506c core-prim . make-custom-binary-output-port) (G506b core-prim . make-custom-binary-input/output-port) (G506a core-prim . make-custom-binary-input-port) (G5069 core-prim . make-bytevector) (G5068 core-prim . lookahead-u8) (G5067 core-prim . lookahead-char) (G4bd9 core-prim . i/o-write-error?) (G4bc4 core-prim . i/o-read-error?) (G4c79 core-prim . i/o-port-error?) (G4bf1 core-prim . i/o-invalid-position-error?) (G4c0b core-prim . i/o-filename-error?) (G4c22 core-prim . i/o-file-protection-error?) (G4c37 core-prim . i/o-file-is-read-only-error?) (G4c61 core-prim . i/o-file-does-not-exist-error?) (G4c4c core-prim . i/o-file-already-exists-error?) (G4baf core-prim . i/o-error?) (G4c7b core-prim . i/o-error-port) (G4c0d core-prim . i/o-error-filename) (G4ca8 core-prim . i/o-encoding-error?) (G4caa core-prim . i/o-encoding-error-char) (G4c90 core-prim . i/o-decoding-error?) (G5066 core-prim . get-u8) (G5065 core-prim . get-string-n!) (G5064 core-prim . get-string-n) (G5063 core-prim . get-string-all) (G5062 core-prim . get-line) (G5061 core-prim . get-datum) (G5060 core-prim . get-char) (G505f core-prim . get-bytevector-some) (G505e core-prim . get-bytevector-n!) (G505d core-prim . get-bytevector-n) (G505c core-prim . get-bytevector-all) (G505b core-prim . flush-output-port) (G505a core-prim . close-port) (G30d4 core-prim . scheme-report-environment) (G5059 core-prim . quotient) (G30d2 core-prim . null-environment) (G5058 core-prim . remainder) (G5057 core-prim . modulo) (G5056 core-prim . inexact->exact) (G5055 core-prim . force) (G5054 core-prim . exact->inexact) (G5053 core-prim . make-promise) (G5052 core-prim . exit) (G4dd3 core-prim . command-line) (G5051 core-prim . string-fill!) (G5050 core-prim . string-set!) (G504f core-prim . set-cdr!) (G504e core-prim . set-car!) (G504d core-prim . remove) (G504c core-prim . remv) (G504b core-prim . remp) (G504a core-prim . remq) (G5049 core-prim . partition) (G5048 core-prim . memv) (G5047 core-prim . memq) (G5046 core-prim . memp) (G5045 core-prim . member) (G5044 core-prim . exists) (G5043 core-prim . for-all) (G5042 core-prim . fold-right) (G5041 core-prim . fold-left) (G5040 core-prim . find) (G503f core-prim . filter) (G503e core-prim . cons*) (G503d core-prim . assv) (G503c core-prim . assq) (G503b core-prim . assp) (G503a core-prim . assoc) (G5039 core-prim . call-with-string-output-port) (G5038 core-prim . call-with-port) (G5037 core-prim . call-with-bytevector-output-port) (G5036 core-prim . bytevector->string) (G5035 core-prim . buffer-mode?) (G5034 core-prim . binary-port?) (G5033 core-prim . with-exception-handler) (G5032 core-prim . raise-continuable) (G5031 core-prim . raise) (G30d8 core-prim . eval) (G30d0 core-prim . environment) (G5030 core-prim . make-enumeration) (G502f core-prim . enum-set=?) (G502e core-prim . enum-set-universe) (G502d core-prim . enum-set-union) (G502c core-prim . enum-set-subset?) (G502b core-prim . enum-set-projection) (G502a core-prim . enum-set-member?) (G5029 core-prim . enum-set-intersection) (G5028 core-prim . enum-set-indexer) (G5027 core-prim . enum-set-difference) (G5026 core-prim . enum-set-constructor) (G5025 core-prim . enum-set-complement) (G5024 core-prim . enum-set->list) (G4b25 core-prim . who-condition?) (G4a9f core-prim . warning?) (G4ade core-prim . violation?) (G4b9a core-prim . undefined-violation?) (G4b81 core-prim . syntax-violation?) (G4b85 core-prim . syntax-violation-subform) (G4b83 core-prim . syntax-violation-form) (G30fa core-prim . syntax-violation) (G5023 core-prim . simple-conditions) (G4ab4 core-prim . serious-condition?) (G4b3c core-prim . non-continuable-violation?) (G4a88 core-prim . message-condition?) (G4b21 core-prim . make-who-condition) (G4a9d core-prim . make-warning) (G4adc core-prim . make-violation) (G4b98 core-prim . make-undefined-violation) (G4b7b core-prim . make-syntax-violation) (G4ab2 core-prim . make-serious-condition) (G4b3a core-prim . make-non-continuable-violation) (G4a84 core-prim . make-message-condition) (G4b64 core-prim . make-lexical-violation) (G4b07 core-prim . make-irritants-condition) (G4b4f core-prim . make-implementation-restriction-violation) (G4ac7 core-prim . make-error) (G4af1 core-prim . make-assertion-violation) (G4b66 core-prim . lexical-violation?) (G4b0b core-prim . irritants-condition?) (G4b51 core-prim . implementation-restriction-violation?) (G4ac9 core-prim . error?) (G4b27 core-prim . condition-who) (G5022 core-prim . condition-predicate) (G4a8a core-prim . condition-message) (G4b0d core-prim . condition-irritants) (G5021 core-prim . condition-accessor) (G5020 core-prim . condition) (G4af3 core-prim . assertion-violation?) (G501f core-prim . condition?) (G501e core-prim . utf32->string) (G501d core-prim . utf16->string) (G501c core-prim . utf8->string) (G501b core-prim . uint-list->bytevector) (G501a core-prim . u8-list->bytevector) (G5019 core-prim . string->utf8) (G5018 core-prim . string->utf32) (G5017 core-prim . string->utf16) (G5016 core-prim . sint-list->bytevector) (G5015 core-prim . native-endianness) (G5014 core-prim . bytevector?) (G5013 core-prim . bytevector=?) (G5012 core-prim . bytevector-uint-set!) (G5011 core-prim . bytevector-uint-ref) (G5010 core-prim . bytevector-u8-set!) (G500f core-prim . bytevector-u8-ref) (G500e core-prim . bytevector-u64-set!) (G500d core-prim . bytevector-u64-ref) (G500c core-prim . bytevector-u64-native-set!) (G500b core-prim . bytevector-u64-native-ref) (G500a core-prim . bytevector-u32-set!) (G5009 core-prim . bytevector-u32-ref) (G5008 core-prim . bytevector-u32-native-set!) (G5007 core-prim . bytevector-u32-native-ref) (G5006 core-prim . bytevector-u16-set!) (G5005 core-prim . bytevector-u16-ref) (G5004 core-prim . bytevector-u16-native-set!) (G5003 core-prim . bytevector-u16-native-ref) (G5002 core-prim . bytevector-sint-set!) (G5001 core-prim . bytevector-sint-ref) (G5000 core-prim . bytevector-s8-set!) (G4fff core-prim . bytevector-s8-ref) (G4ffe core-prim . bytevector-s64-set!) (G4ffd core-prim . bytevector-s64-ref) (G4ffc core-prim . bytevector-s64-native-set!) (G4ffb core-prim . bytevector-s64-native-ref) (G4ffa core-prim . bytevector-s32-set!) (G4ff9 core-prim . bytevector-s32-ref) (G4ff8 core-prim . bytevector-s32-native-set!) (G4ff7 core-prim . bytevector-s32-native-ref) (G4ff6 core-prim . bytevector-s16-set!) (G4ff5 core-prim . bytevector-s16-ref) (G4ff4 core-prim . bytevector-s16-native-set!) (G4ff3 core-prim . bytevector-s16-native-ref) (G4ff2 core-prim . bytevector-length) (G4ff1 core-prim . bytevector-ieee-single-ref) (G4ff0 core-prim . bytevector-ieee-single-set!) (G4fef core-prim . bytevector-ieee-single-native-set!) (G4fee core-prim . bytevector-ieee-single-native-ref) (G4fed core-prim . bytevector-ieee-double-set!) (G4fec core-prim . bytevector-ieee-double-ref) (G4feb core-prim . bytevector-ieee-double-native-set!) (G4fea core-prim . bytevector-ieee-double-native-ref) (G4fe9 core-prim . bytevector-fill!) (G4fe8 core-prim . bytevector-copy!) (G4fe7 core-prim . bytevector-copy) (G4fe6 core-prim . bytevector->uint-list) (G4fe5 core-prim . bytevector->u8-list) (G4fe4 core-prim . bytevector->sint-list) (G4cd4 core-prim . no-nans-violation?) (G4cbf core-prim . no-infinities-violation?) (G4cd2 core-prim . make-no-nans-violation) (G4cbd core-prim . make-no-infinities-violation) (G4fe3 core-prim . real->flonum) (G4fe2 core-prim . flzero?) (G4fe1 core-prim . fltruncate) (G4fe0 core-prim . fltan) (G4fdf core-prim . flsqrt) (G4fde core-prim . flsin) (G4fdd core-prim . flround) (G4fdc core-prim . flpositive?) (G4fdb core-prim . flonum?) (G4fda core-prim . flodd?) (G4fd9 core-prim . flnumerator) (G4fd8 core-prim . flnegative?) (G4fd7 core-prim . flnan?) (G4fd6 core-prim . flmod0) (G4fd5 core-prim . flmod) (G4fd4 core-prim . flmin) (G4fd3 core-prim . flmax) (G4fd2 core-prim . fllog) (G4fd1 core-prim . flinteger?) (G4fd0 core-prim . flinfinite?) (G4fcf core-prim . flfloor) (G4fce core-prim . flfinite?) (G4fcd core-prim . flexpt) (G4fcc core-prim . flexp) (G4fcb core-prim . fleven?) (G4fca core-prim . fldiv0-and-mod0) (G4fc9 core-prim . fldiv0) (G4fc8 core-prim . fldiv-and-mod) (G4fc7 core-prim . fldiv) (G4fc6 core-prim . fldenominator) (G4fc5 core-prim . flcos) (G4fc4 core-prim . flceiling) (G4fc3 core-prim . flatan) (G4fc2 core-prim . flasin) (G4fc1 core-prim . flacos) (G4fc0 core-prim . flabs) (G4fbf core-prim . fl>?) (G4fbe core-prim . fl>=?) (G4fbd core-prim . fl=?) (G4fbc core-prim . fl<?) (G4fbb core-prim . fl<=?) (G4fba core-prim . fl/) (G4fb9 core-prim . fl-) (G4fb8 core-prim . fl+) (G4fb7 core-prim . fl*) (G4fb6 core-prim . fixnum->flonum) (G4fb5 core-prim . fxzero?) (G4fb4 core-prim . fxxor) (G4fb3 core-prim . fxrotate-bit-field) (G4fb2 core-prim . fxreverse-bit-field) (G4fb1 core-prim . fxpositive?) (G4fb0 core-prim . fxodd?) (G4faf core-prim . fxnot) (G4fae core-prim . fxnegative?) (G4fad core-prim . fxmod0) (G4fac core-prim . fxmod) (G4fab core-prim . fxmin) (G4faa core-prim . fxmax) (G4fa9 core-prim . fxlength) (G4fa8 core-prim . fxior) (G4fa7 core-prim . fxif) (G4fa6 core-prim . fxfirst-bit-set) (G4fa5 core-prim . fxeven?) (G4fa4 core-prim . fxdiv0-and-mod0) (G4fa3 core-prim . fxdiv0) (G4fa2 core-prim . fxdiv-and-mod) (G4fa1 core-prim . fxdiv) (G4fa0 core-prim . fxcopy-bit-field) (G4f9f core-prim . fxcopy-bit) (G4f9e core-prim . fxbit-set?) (G4f9d core-prim . fxbit-field) (G4f9c core-prim . fxbit-count) (G4f9b core-prim . fxarithmetic-shift-right) (G4f9a core-prim . fxarithmetic-shift-left) (G4f99 core-prim . fxarithmetic-shift) (G4f98 core-prim . fxand) (G4f97 core-prim . fx>?) (G4f96 core-prim . fx>=?) (G4f95 core-prim . fx=?) (G4f94 core-prim . fx<?) (G4f93 core-prim . fx<=?) (G4f92 core-prim . fx-/carry) (G4f91 core-prim . fx-) (G4f90 core-prim . fx+/carry) (G4f8f core-prim . fx+) (G4f8e core-prim . fx*/carry) (G4f8d core-prim . fx*) (G4f8c core-prim . greatest-fixnum) (G4f8b core-prim . least-fixnum) (G4f8a core-prim . fixnum-width) (G4f89 core-prim . fixnum?) (G4f88 core-prim . bitwise-rotate-bit-field) (G4f87 core-prim . bitwise-reverse-bit-field) (G4f86 core-prim . bitwise-length) (G4f85 core-prim . bitwise-if) (G4f84 core-prim . bitwise-first-bit-set) (G4f83 core-prim . bitwise-copy-bit-field) (G4f82 core-prim . bitwise-copy-bit) (G4f81 core-prim . bitwise-bit-set?) (G4f80 core-prim . bitwise-bit-field) (G4f7f core-prim . bitwise-bit-count) (G4f7e core-prim . bitwise-xor) (G4f7d core-prim . bitwise-ior) (G4f7c core-prim . bitwise-and) (G4f7b core-prim . bitwise-not) (G4f7a core-prim . bitwise-arithmetic-shift-right) (G4f79 core-prim . bitwise-arithmetic-shift-left) (G4f78 core-prim . bitwise-arithmetic-shift) (G4f77 core-prim . zero?) (G4f76 core-prim . vector?) (G4f75 core-prim . vector-set!) (G4f74 core-prim . vector-ref) (G4f73 core-prim . vector-map) (G4f72 core-prim . vector-length) (G4f71 core-prim . vector-for-each) (G4f70 core-prim . vector-fill!) (G4f6f core-prim . vector->list) (G4f6e core-prim . vector) (G4f6d core-prim . values) (G4f6c core-prim . truncate) (G4f6b core-prim . tan) (G4f6a core-prim . symbol?) (G4f69 core-prim . symbol=?) (G4f68 core-prim . symbol->string) (G4f67 core-prim . substring) (G4f66 core-prim . string?) (G4f65 core-prim . string>?) (G4f64 core-prim . string>=?) (G4f63 core-prim . string=?) (G4f62 core-prim . string<?) (G4f61 core-prim . string<=?) (G4f60 core-prim . string-ref) (G4f5f core-prim . string-length) (G4f5e core-prim . string-for-each) (G4f5d core-prim . string-copy) (G4f5c core-prim . string-append) (G4f5b core-prim . string->symbol) (G4f5a core-prim . string->number) (G4f59 core-prim . string->list) (G4f58 core-prim . string) (G4f57 core-prim . sqrt) (G4f56 core-prim . sin) (G4f55 core-prim . round) (G4f54 core-prim . reverse) (G4f53 core-prim . real?) (G4f52 core-prim . real-valued?) (G4f51 core-prim . real-part) (G4f50 core-prim . rationalize) (G4f4f core-prim . rational?) (G4f4e core-prim . rational-valued?) (G4f4d core-prim . procedure?) (G4f4c core-prim . positive?) (G4f4b core-prim . pair?) (G4f4a core-prim . odd?) (G4f49 core-prim . numerator) (G4f48 core-prim . number?) (G4f47 core-prim . number->string) (G4f46 core-prim . null?) (G4f45 core-prim . not) (G4f44 core-prim . negative?) (G4f43 core-prim . nan?) (G4f42 core-prim . min) (G4f41 core-prim . max) (G4f40 core-prim . map) (G4f3f core-prim . make-vector) (G4f3e core-prim . make-string) (G4f3d core-prim . make-rectangular) (G4f3c core-prim . make-polar) (G4f3b core-prim . magnitude) (G4f3a core-prim . log) (G4f39 core-prim . list?) (G4f38 core-prim . list-tail) (G4f37 core-prim . list-ref) (G4f36 core-prim . list->vector) (G4f35 core-prim . list->string) (G4f34 core-prim . list) (G4f33 core-prim . length) (G4f32 core-prim . lcm) (G4f31 core-prim . integer?) (G4f30 core-prim . integer-valued?) (G4f2f core-prim . integer->char) (G4f2e core-prim . infinite?) (G4f2d core-prim . inexact?) (G4f2c core-prim . inexact) (G4f2b core-prim . imag-part) (G4f2a core-prim . gcd) (G4f29 core-prim . for-each) (G4f28 core-prim . floor) (G4f27 core-prim . finite?) (G4f26 core-prim . expt) (G4f25 core-prim . exp) (G4f24 core-prim . exact?) (G4f23 core-prim . exact-integer-sqrt) (G4f22 core-prim . exact) (G4f21 core-prim . even?) (G4f20 core-prim . error) (G4f1f core-prim . eqv?) (G4f1e core-prim . equal?) (G4f1d core-prim . eq?) (G4f1c core-prim . dynamic-wind) (G4f1b core-prim . div0-and-mod0) (G4f1a core-prim . mod0) (G4f19 core-prim . div0) (G4f18 core-prim . div-and-mod) (G4f17 core-prim . mod) (G4f16 core-prim . div) (G4f15 core-prim . denominator) (G4f14 core-prim . cos) (G4f13 core-prim . cons) (G4f12 core-prim . complex?) (G4f11 core-prim . char?) (G4f10 core-prim . char>?) (G4f0f core-prim . char>=?) (G4f0e core-prim . char=?) (G4f0d core-prim . char<?) (G4f0c core-prim . char<=?) (G4f0b core-prim . char->integer) (G4f0a core-prim . ceiling) (G4f09 core-prim . call-with-values) (G4f08 core-prim . call/cc) (G4f07 core-prim . call-with-current-continuation) (G4f06 core-prim . cddddr) (G4f05 core-prim . cdddar) (G4f04 core-prim . cddadr) (G4f03 core-prim . cddaar) (G4f02 core-prim . cdaddr) (G4f01 core-prim . cdadar) (G4f00 core-prim . cdaadr) (G4eff core-prim . cdaaar) (G4efe core-prim . cadddr) (G4efd core-prim . caddar) (G4efc core-prim . cadadr) (G4efb core-prim . cadaar) (G4efa core-prim . caaddr) (G4ef9 core-prim . caadar) (G4ef8 core-prim . caaadr) (G4ef7 core-prim . caaaar) (G4ef6 core-prim . cdddr) (G4ef5 core-prim . cddar) (G4ef4 core-prim . cdadr) (G4ef3 core-prim . cdaar) (G4ef2 core-prim . caddr) (G4ef1 core-prim . cadar) (G4ef0 core-prim . caadr) (G4eef core-prim . caaar) (G4eee core-prim . cddr) (G4eed core-prim . cdar) (G4eec core-prim . cadr) (G4eeb core-prim . caar) (G4eea core-prim . cdr) (G4ee9 core-prim . car) (G4ee8 core-prim . boolean?) (G4ee7 core-prim . boolean=?) (G4ee6 core-prim . atan) (G4ee5 core-prim . assertion-violation) (G4ee4 core-prim . asin) (G4ee3 core-prim . apply) (G4ee2 core-prim . append) (G4ee1 core-prim . angle) (G4ee0 core-prim . acos) (G4edf core-prim . abs) (G4ede core-prim . /) (G4edd core-prim . *) (G4edc core-prim . -) (G4edb core-prim . +) (G4eda core-prim . >=) (G4ed9 core-prim . >) (G4ed8 core-prim . =) (G4ed7 core-prim . <=) (G4ed6 core-prim . <) (G4ed5 core-prim . library) (G4ed4 core-prim . export) (G4ed3 $core-rtd &no-nans-rtd &no-nans-rcd) (G4ed2 $core-rtd &no-infinities-rtd &no-infinities-rcd) (G4ed1 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (G4ed0 $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (G4ecf $core-rtd &i/o-port-rtd &i/o-port-rcd) (G4ece $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (G4ecd $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (G4ecc $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (G4ecb $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (G4eca $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (G4ec9 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (G4ec8 $core-rtd &i/o-write-rtd &i/o-write-rcd) (G4ec7 $core-rtd &i/o-read-rtd &i/o-read-rcd) (G4ec6 $core-rtd &i/o-rtd &i/o-rcd) (G4ec5 $core-rtd &undefined-rtd &undefined-rcd) (G4ec4 $core-rtd &syntax-rtd &syntax-rcd) (G4ec3 $core-rtd &lexical-rtd &lexical-rcd) (G4ec2 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (G4ec1 $core-rtd &non-continuable-rtd &non-continuable-rcd) (G4ec0 $core-rtd &who-rtd &who-rcd) (G4ebf $core-rtd &irritants-rtd &irritants-rcd) (G4ebe $core-rtd &assertion-rtd &assertion-rcd) (G4ebd $core-rtd &violation-rtd &violation-rcd) (G4ebc $core-rtd &error-rtd &error-rcd) (G4ebb $core-rtd &serious-rtd &serious-rcd) (G4eba $core-rtd &warning-rtd &warning-rcd) (G4eb9 $core-rtd &message-rtd &message-rcd) (G4eb8 $core-rtd &condition-rtd &condition-rcd) (G4eb7 macro . define-condition-type) (G4eb6 macro . define-enumeration) (G4eb5 macro . define-record-type) (G4eb4 macro . parent-rtd) (G4eb3 macro . nongenerative) (G4eb2 macro . opaque) (G4eb1 macro . sealed) (G4eb0 macro . protocol) (G4eaf macro . parent) (G4eae macro . immutable) (G4ead macro . mutable) (G4eac macro . fields) (G4eab macro . error-handling-mode) (G4eaa macro . file-options) (G4ea9 macro . buffer-mode) (G4ea8 macro . eol-style) (G4ea7 macro . guard) (G4ea6 macro . trace-define) (G4ea5 macro . trace-lambda) (G4ea4 macro . unsyntax-splicing) (G4ea3 macro . unsyntax) (G4ea2 macro . unquote-splicing) (G4ea1 macro . unquote) (G4ea0 macro . _) (G4e9f macro . else) (G4e9e macro . =>) (G4e9d macro . ...) (G4e9c macro . assert) (G4e9b macro . endianness) (G4e9a macro . delay) (G4e99 macro . time) (G4e98 macro . do) (G4e97 macro . cond) (G4e96 macro . let*) (G4e95 macro . let) (G4e94 macro . let*-values) (G4e93 macro . let-values) (G4e92 macro . identifier-syntax) (G4e91 macro . with-syntax) (G4e90 macro . quasisyntax) (G4e8f macro . quasiquote) (G4e8e macro . syntax-rules) (G4e8d macro . include) (G4e8c macro . define-struct) (G4e8b core-macro . record-constructor-descriptor) (G4e8a core-macro . record-type-descriptor) (G4e89 macro . case) (G4e88 macro . parameterize) (G4e87 macro . unless) (G4e86 macro . when) (G4e85 core-macro . or) (G4e84 core-macro . and) (G4e83 core-macro . if) (G4e82 core-macro . letrec*) (G4e81 core-macro . letrec) (G4e80 core-macro . type-descriptor) (G4e7f core-macro . case-lambda) (G4e7e core-macro . lambda) (G4e7d core-macro . syntax) (G4e7c core-macro . syntax-case) (G4e7b core-macro . quote) (G4e7a core-macro . foreign-call) (G4e79 letrec-syntax) (G4e78 let-syntax) (G4e77 set!) (G4e76 import) (G4e75 begin) (G4e74 module) (G4e73 define-syntax) (G4e72 define)) values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G515e '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . G513d) (eval-core . G513c) (set-symbol-value! . G513b) (symbol-value . G513a) (gensym . G5139) (void . G5138)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G515f '(mosh) '() '() '() '() '((set-symbol-value! . G513b) (symbol-value . G513a) (assoc-ref . G5114) (alist-cons . G5113) (print . G5111) (format . G5110) (standard-library-path . G510f) (file-newer? . G510e) (stat-mtime . G510d) (current-directory . G510c) (write-to-file . G510b) (file->list . G510a) (file->string . G5109) (digit->integer . G5108) (call-with-string-input-port . G5107) (call-with-string-io . G5106) (string-split . G5105) (bytevector-for-each . G5104) (string->regexp . G5103) (rxmatch . G5102) (regexp-replace-all . G5101) (hashtable-for-each . G5100) (get-timeofday . G50fc) (get-command-line . G50fb) (sys-display . G50fa) (source-info . G50f9) (make-compiler-instruction . G50f8) (make-instruction . G50f7) (set-source-info! . G50f6) (bignum? . G50f5) (make-complex . G50f4) (fasl-read . G50f3) (fasl-write . G50f2) (include . G4e8d)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5160 '(mosh backend) '() '() '() '() '((receive . G50f1)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5161 '(mosh file) '() '() '() '() '((read-line . G5135) (file-newer? . G510e) (stat-mtime . G510d) (current-directory . G510c) (write-to-file . G510b) (file->list . G510a) (file->string . G5109)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5162 '(mosh bytevector) '() '() '() '() '((bytevector-for-each . G5104)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5163 '(mosh number) '() '() '() '() '((digit->integer . G5108)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5164 '(mosh string) '() '() '() '() '((print . G5111) (format . G5110) (call-with-string-input-port . G5107) (call-with-string-io . G5106) (string-split . G5105) (string->regexp . G5103)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5165 '(mosh list) '() '() '() '() '((assoc-ref . G5114)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5166 '(mosh regexp) '() '() '() '() '((rxmatch . G5102) (regexp-replace-all . G5101)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5167 '(mosh hashtable) '() '() '() '() '((hashtable-for-each . G5100)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5168 '(mosh parameters) '() '() '() '() '((make-parameter . G28e3) (parameterize . G4e88)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G5169 '(system) '() '() '() '() '((readdir . G50ff) (get-environment-variables . G50fe) (get-environment-variable . G50fd)) '() values values '#f '#f '#f '#f) (G2c24@G2ac9@install-library 'G516a '(srfi :1) '() '() '() '() '((dotted-list? . G5134) (circular-list? . G5133) (proper-list? . G5132) (circular-list . G5131) (last . G5130) (last-pair . G512f) (not-pair? . G512e) (split-at! . G512d) (split-at . G512c) (list= . G512b) (list-copy . G512a) (list-tabulate . G5129) (make-list . G5128) (xcons . G5127) (tenth . G5126) (ninth . G5125) (eighth . G5124) (seventh . G5123) (sixth . G5122) (fifth . G5121) (drop-right! . G5120) (drop-right . G511f) (take-right . G511e) (take! . G511d) (drop . G511c) (take . G511b) (car+cdr . G511a) (third . G5119) (second . G5118) (first . G5117) (iota . G5116) (every . G5115) (alist-cons . G5113) (append-map . G5112)) '() values values '#f '#f '#f '#f))
((lambda (G4dce@for-each-with-index G4dd0@repl G4dd2@trace-printer G4dd4@command-line G4dd6@local-library-path G4dd8@load/args G4dda@load G4ddc@ironscheme-build G4dde@eval-top-level G4de0@compile-system-libraries G4de2@compile G4de4@compile->closure G4de6@pre-compile-r6rs-file G4de8@load-r6rs-top-level G4dea@write-record) (begin (set! G4dce@for-each-with-index (lambda (G4dff@proc G4e00@lst) (letrec ((G4e03@loop (lambda (G4e05@i G4e06@lst) (if (null? G4e06@lst) (if '#f '#f (void)) (begin (G4dff@proc G4e05@i (car G4e06@lst)) (G4e03@loop (+ G4e05@i '1) (cdr G4e06@lst))))))) (G4e03@loop '1 G4e00@lst)))) (set! G4dd0@repl (lambda G4e09@x ((lambda (G4e0c@rec) (begin (set! G4e0c@rec (lambda () (begin (display '"mosh>") (call/cc (lambda (G4e0e@G4e0d) (with-exception-handler (lambda (G4e10@e) (G4e0e@G4e0d (if '#t (G4dce@for-each-with-index (lambda (G4e12@i G4e13@x) ((lambda (G4e16@rtd) (begin (format '#t '"   ~d. ~a" G4e12@i (record-type-name G4e16@rtd)) ((lambda (G4e18@v) ((lambda (G4e1a@t) (if (memv G4e1a@t '(0)) (newline) (if (memv G4e1a@t '(1)) (begin (display '": ") (write ((record-accessor G4e16@rtd '0) G4e13@x)) (newline)) (begin (display '":\n") ((letrec ((G4e1c@f (lambda (G4e1e@i) (if (not (= G4e1e@i (vector-length G4e18@v))) (begin (display '"       ") (display (vector-ref G4e18@v G4e1e@i)) (display '": ") (write ((record-accessor G4e16@rtd G4e1e@i) G4e13@x)) (newline) (G4e1c@f (+ G4e1e@i '1))) (void))))) G4e1c@f) '0))))) (vector-length G4e18@v))) (record-type-field-names G4e16@rtd)))) (record-rtd G4e13@x))) (simple-conditions G4e10@e)) (raise G4e10@e)))) (lambda () (begin '#f ((lambda (G4e20@line) (if (eof-object? G4e20@line) (exit) (write (G4dde@eval-top-level (call-with-port (open-string-input-port G4e20@line) read))))) (get-line (current-input-port)))))))) (newline) (G4e0c@rec)))) (G4e0c@rec))) '#f))) (set! G4dd2@trace-printer (G29ab@G28e4@make-parameter write)) (set! G4dd4@command-line (G29ab@G28e4@make-parameter (get-command-line))) (set! G4dd6@local-library-path (lambda (G4e22@filename) (cons '"." (G2c14@G2aa9@library-path)))) (set! G4dd8@load/args (lambda (G4e24@filename . G4e26@args) (begin (apply G4de8@load-r6rs-top-level G4e24@filename 'load G4e26@args) (void)))) (set! G4dda@load (lambda (G4e28@filename) (begin (apply G4de8@load-r6rs-top-level G4e28@filename 'load (G4dd4@command-line)) (void)))) (set! G4ddc@ironscheme-build (lambda () (G4dda@load '"ironscheme-buildscript.ss"))) (set! G4dde@eval-top-level (lambda (G4e2a@x) (G4a03@G30d9@eval G4e2a@x (G4a1a@G3107@interaction-environment)))) (set! G4de0@compile-system-libraries (lambda () (G4dde@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! G4de2@compile (lambda (G4e2c@filename) (G4de8@load-r6rs-top-level G4e2c@filename 'compile))) (set! G4de4@compile->closure (lambda (G4e2e@filename) (G4de8@load-r6rs-top-level G4e2e@filename 'closure))) (set! G4de6@pre-compile-r6rs-file (lambda (G4e30@filename) (G4de8@load-r6rs-top-level G4e30@filename 'compile))) (set! G4de8@load-r6rs-top-level (lambda (G4e32@filename G4e33@how . G4e36@args) ((lambda (G4e3a@G4e38@library-path G4e3b@G4e39@library-path) ((lambda (G4e3e@swap) (dynamic-wind G4e3e@swap (lambda () ((lambda (G4e40@x*) ((lambda (G4e42@t) (if (memv G4e42@t '(closure)) (G4a19@G3105@pre-compile-r6rs-top-level G4e40@x*) (if (memv G4e42@t '(load)) ((lambda (G4e46@G4e44@command-line G4e47@G4e45@command-line) ((lambda (G4e4a@swap) (dynamic-wind G4e4a@swap (lambda () ((G4a18@G3103@compile-r6rs-top-level G4e40@x*))) G4e4a@swap)) (lambda () ((lambda (G4e4c@t) (begin (G4e46@G4e44@command-line G4e47@G4e45@command-line) (set! G4e47@G4e45@command-line G4e4c@t))) (G4e46@G4e44@command-line))))) G4dd4@command-line (cons G4e32@filename (car G4e36@args))) (if (memv G4e42@t '(compile)) (begin (G4a18@G3103@compile-r6rs-top-level G4e40@x*) (G2c18@G2ab1@serialize-all G29a6@G28da@serialize-library G2a00@G29b9@compile-core-expr)) (if '#f '#f (void)))))) G4e33@how)) (with-input-from-file G4e32@filename (lambda () ((letrec ((G4e4e@f (lambda () ((lambda (G4e50@x) (if (eof-object? G4e50@x) '() (cons G4e50@x (G4e4e@f)))) (G299e@G28ca@read-annotated))))) G4e4e@f)))))) G4e3e@swap)) (lambda () ((lambda (G4e52@t) (begin (G4e3a@G4e38@library-path G4e3b@G4e39@library-path) (set! G4e3b@G4e39@library-path G4e52@t))) (G4e3a@G4e38@library-path))))) G2c14@G2aa9@library-path (G4dd6@local-library-path G4e32@filename)))) (set! G4dea@write-record (lambda (G4e54@record G4e55@port) ((lambda (G4e58@rtd) (begin (format G4e55@port '"    ~a" (record-type-name G4e58@rtd)) ((lambda (G4e5a@v) ((lambda (G4e5c@t) (if (memv G4e5c@t '(0)) (newline) (if (memv G4e5c@t '(1)) (begin (display '": " G4e55@port) (write ((record-accessor G4e58@rtd '0) G4e54@record) G4e55@port) (newline G4e55@port)) (begin (display '":\n") ((letrec ((G4e5e@f (lambda (G4e60@i) (if (not (= G4e60@i (vector-length G4e5a@v))) (begin (display '"       " G4e55@port) (display (vector-ref G4e5a@v G4e60@i) G4e55@port) (display '": " G4e55@port) (write ((record-accessor G4e58@rtd G4e60@i) G4e54@record) G4e55@port) (newline G4e55@port) (G4e5e@f (+ G4e60@i '1))) (void))))) G4e5e@f) '0))))) (vector-length G4e5a@v))) (record-type-field-names G4e58@rtd)))) (record-rtd G4e54@record)))) (begin (set! G4e70@G4dea@write-record G4dea@write-record) (set! G4e6f@G4de8@load-r6rs-top-level G4de8@load-r6rs-top-level) (set! G4e6e@G4de6@pre-compile-r6rs-file G4de6@pre-compile-r6rs-file) (set! G4e6d@G4de4@compile->closure G4de4@compile->closure) (set! G4e6c@G4de2@compile G4de2@compile) (set! G4e6b@G4de0@compile-system-libraries G4de0@compile-system-libraries) (set! G4e6a@G4dde@eval-top-level G4dde@eval-top-level) (set! G4e69@G4ddc@ironscheme-build G4ddc@ironscheme-build) (set! G4e68@G4dda@load G4dda@load) (set! G4e67@G4dd8@load/args G4dd8@load/args) (set! G4e66@G4dd6@local-library-path G4dd6@local-library-path) (set! G4e65@G4dd4@command-line G4dd4@command-line) (set! G4e64@G4dd2@trace-printer G4dd2@trace-printer) (set! G4e63@G4dd0@repl G4dd0@repl) (set! G4e62@G4dce@for-each-with-index G4dce@for-each-with-index) (G2c19@G2ab3@current-precompiled-library-loader G29a7@G28dc@load-serialized-library) (set-symbol-value! 'load G4dda@load) (set-symbol-value! 'pre-compile-r6rs-file G4de6@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs G4dde@eval-top-level) (set-symbol-value! 'int-env-syms G49fa@G30c7@interaction-environment-symbols) (set-symbol-value! 'expanded2core G29ff@G29b7@expanded->core) (set-symbol-value! 'trace-printer G4dd2@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (G2c14@G2aa9@library-path (list (string-append (current-directory) '"/lib") (string-append (standard-library-path) '"/lib"))) ((lambda (G4deb@args G4dec@port) (with-exception-handler (lambda (G4def@c) (begin (display '" Condition components:\n" G4dec@port) (G4dce@for-each-with-index (lambda (G4df1@i G4df2@x) ((lambda (G4df5@rtd) (begin (format G4dec@port '"   ~d. ~a" G4df1@i (record-type-name G4df5@rtd)) ((lambda (G4df7@v) ((lambda (G4df9@t) (if (memv G4df9@t '(0)) (newline) (if (memv G4df9@t '(1)) (begin (display '": ") (write ((record-accessor G4df5@rtd '0) G4df2@x)) (newline)) (begin (display '":\n") ((letrec ((G4dfb@f (lambda (G4dfd@i) (if (not (= G4dfd@i (vector-length G4df7@v))) (begin (display '"       ") (display (vector-ref G4df7@v G4dfd@i)) (display '": ") (write ((record-accessor G4df5@rtd G4dfd@i) G4df2@x)) (newline) (G4dfb@f (+ G4dfd@i '1))) (void))))) G4dfb@f) '0))))) (vector-length G4df7@v))) (record-type-field-names G4df5@rtd)))) (record-rtd G4df2@x))) (simple-conditions G4def@c)))) (lambda () (if (null? G4deb@args) (G4dd0@repl) (G4de8@load-r6rs-top-level (car G4deb@args) 'load (cdr G4deb@args)))))) (G4dd4@command-line) (current-error-port))))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f)
